
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010e74 <.init>:
   10e74:	push	{r3, lr}
   10e78:	bl	11164 <__assert_fail@plt+0x48>
   10e7c:	pop	{r3, pc}

Disassembly of section .plt:

00010e80 <calloc@plt-0x14>:
   10e80:	push	{lr}		; (str lr, [sp, #-4]!)
   10e84:	ldr	lr, [pc, #4]	; 10e90 <calloc@plt-0x4>
   10e88:	add	lr, pc, lr
   10e8c:	ldr	pc, [lr, #8]!
   10e90:	andeq	r7, r1, r0, ror r1

00010e94 <calloc@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #368]!	; 0x170

00010ea0 <fputs_unlocked@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #360]!	; 0x168

00010eac <raise@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #352]!	; 0x160

00010eb8 <strcmp@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #344]!	; 0x158

00010ec4 <fflush@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #336]!	; 0x150

00010ed0 <free@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #328]!	; 0x148

00010edc <_exit@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #320]!	; 0x140

00010ee8 <memcpy@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #312]!	; 0x138

00010ef4 <execvp@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #304]!	; 0x130

00010f00 <__strtoull_internal@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #296]!	; 0x128

00010f0c <mbsinit@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #288]!	; 0x120

00010f18 <dcgettext@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #280]!	; 0x118

00010f24 <realloc@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #272]!	; 0x110

00010f30 <textdomain@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #264]!	; 0x108

00010f3c <iswprint@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #256]!	; 0x100

00010f48 <readlink@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #248]!	; 0xf8

00010f54 <fwrite@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #240]!	; 0xf0

00010f60 <lseek64@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #232]!	; 0xe8

00010f6c <__ctype_get_mb_cur_max@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #224]!	; 0xe0

00010f78 <__fpending@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #216]!	; 0xd8

00010f84 <mbrtowc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #208]!	; 0xd0

00010f90 <error@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #200]!	; 0xc8

00010f9c <__asprintf_chk@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #192]!	; 0xc0

00010fa8 <getenv@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #184]!	; 0xb8

00010fb4 <malloc@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #176]!	; 0xb0

00010fc0 <__libc_start_main@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #168]!	; 0xa8

00010fcc <__freading@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #160]!	; 0xa0

00010fd8 <__ctype_toupper_loc@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #152]!	; 0x98

00010fe4 <__gmon_start__@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #144]!	; 0x90

00010ff0 <getopt_long@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #136]!	; 0x88

00010ffc <__ctype_b_loc@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #128]!	; 0x80

00011008 <exit@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #120]!	; 0x78

00011014 <bcmp@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #112]!	; 0x70

00011020 <strlen@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #104]!	; 0x68

0001102c <strchr@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #96]!	; 0x60

00011038 <__errno_location@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #88]!	; 0x58

00011044 <__cxa_atexit@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #80]!	; 0x50

00011050 <memset@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #72]!	; 0x48

0001105c <__printf_chk@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #64]!	; 0x40

00011068 <fileno@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #56]!	; 0x38

00011074 <__fprintf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #48]!	; 0x30

00011080 <access@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #40]!	; 0x28

0001108c <fclose@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #32]!

00011098 <fseeko64@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #24]!

000110a4 <strtok@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #16]!

000110b0 <setlocale@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #8]!

000110bc <putenv@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #94208	; 0x17000
   110c4:	ldr	pc, [ip, #0]!

000110c8 <strrchr@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4088]!	; 0xff8

000110d4 <nl_langinfo@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4080]!	; 0xff0

000110e0 <bindtextdomain@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110ec <__xstat64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110f8 <strncmp@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4056]!	; 0xfd8

00011104 <abort@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4048]!	; 0xfd0

00011110 <__mempcpy_chk@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #4040]!	; 0xfc8

0001111c <__assert_fail@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #4032]!	; 0xfc0

Disassembly of section .text:

00011128 <.text>:
   11128:	mov	fp, #0
   1112c:	mov	lr, #0
   11130:	pop	{r1}		; (ldr r1, [sp], #4)
   11134:	mov	r2, sp
   11138:	push	{r2}		; (str r2, [sp, #-4]!)
   1113c:	push	{r0}		; (str r0, [sp, #-4]!)
   11140:	ldr	ip, [pc, #16]	; 11158 <__assert_fail@plt+0x3c>
   11144:	push	{ip}		; (str ip, [sp, #-4]!)
   11148:	ldr	r0, [pc, #12]	; 1115c <__assert_fail@plt+0x40>
   1114c:	ldr	r3, [pc, #12]	; 11160 <__assert_fail@plt+0x44>
   11150:	bl	10fc0 <__libc_start_main@plt>
   11154:	bl	11104 <abort@plt>
   11158:	andeq	r6, r1, r0, lsr #5
   1115c:	andeq	r1, r1, r4, lsl #10
   11160:	andeq	r6, r1, r0, asr #4
   11164:	ldr	r3, [pc, #20]	; 11180 <__assert_fail@plt+0x64>
   11168:	ldr	r2, [pc, #20]	; 11184 <__assert_fail@plt+0x68>
   1116c:	add	r3, pc, r3
   11170:	ldr	r2, [r3, r2]
   11174:	cmp	r2, #0
   11178:	bxeq	lr
   1117c:	b	10fe4 <__gmon_start__@plt>
   11180:	andeq	r6, r1, ip, lsl #29
   11184:	andeq	r0, r0, r8, ror #1
   11188:	ldr	r0, [pc, #24]	; 111a8 <__assert_fail@plt+0x8c>
   1118c:	ldr	r3, [pc, #24]	; 111ac <__assert_fail@plt+0x90>
   11190:	cmp	r3, r0
   11194:	bxeq	lr
   11198:	ldr	r3, [pc, #16]	; 111b0 <__assert_fail@plt+0x94>
   1119c:	cmp	r3, #0
   111a0:	bxeq	lr
   111a4:	bx	r3
   111a8:	andeq	r8, r2, r0, asr #2
   111ac:	andeq	r8, r2, r0, asr #2
   111b0:	andeq	r0, r0, r0
   111b4:	ldr	r0, [pc, #36]	; 111e0 <__assert_fail@plt+0xc4>
   111b8:	ldr	r1, [pc, #36]	; 111e4 <__assert_fail@plt+0xc8>
   111bc:	sub	r1, r1, r0
   111c0:	asr	r1, r1, #2
   111c4:	add	r1, r1, r1, lsr #31
   111c8:	asrs	r1, r1, #1
   111cc:	bxeq	lr
   111d0:	ldr	r3, [pc, #16]	; 111e8 <__assert_fail@plt+0xcc>
   111d4:	cmp	r3, #0
   111d8:	bxeq	lr
   111dc:	bx	r3
   111e0:	andeq	r8, r2, r0, asr #2
   111e4:	andeq	r8, r2, r0, asr #2
   111e8:	andeq	r0, r0, r0
   111ec:	push	{r4, lr}
   111f0:	ldr	r4, [pc, #24]	; 11210 <__assert_fail@plt+0xf4>
   111f4:	ldrb	r3, [r4]
   111f8:	cmp	r3, #0
   111fc:	popne	{r4, pc}
   11200:	bl	11188 <__assert_fail@plt+0x6c>
   11204:	mov	r3, #1
   11208:	strb	r3, [r4]
   1120c:	pop	{r4, pc}
   11210:	andeq	r8, r2, ip, asr r1
   11214:	b	111b4 <__assert_fail@plt+0x98>
   11218:	push	{fp, lr}
   1121c:	mov	fp, sp
   11220:	sub	sp, sp, #56	; 0x38
   11224:	mov	r4, r0
   11228:	cmp	r0, #0
   1122c:	bne	114c0 <__assert_fail@plt+0x3a4>
   11230:	movw	r1, #25331	; 0x62f3
   11234:	mov	r0, #0
   11238:	mov	r2, #5
   1123c:	movt	r1, #1
   11240:	bl	10f18 <dcgettext@plt>
   11244:	mov	r1, r0
   11248:	movw	r0, #33168	; 0x8190
   1124c:	movt	r0, #2
   11250:	ldr	r2, [r0]
   11254:	mov	r0, #1
   11258:	bl	1105c <__printf_chk@plt>
   1125c:	movw	r1, #25360	; 0x6310
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10f18 <dcgettext@plt>
   11270:	movw	r7, #33108	; 0x8154
   11274:	movt	r7, #2
   11278:	ldr	r1, [r7]
   1127c:	bl	10ea0 <fputs_unlocked@plt>
   11280:	movw	r1, #26692	; 0x6844
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10f18 <dcgettext@plt>
   11294:	ldr	r1, [r7]
   11298:	bl	10ea0 <fputs_unlocked@plt>
   1129c:	movw	r1, #25435	; 0x635b
   112a0:	mov	r0, #0
   112a4:	mov	r2, #5
   112a8:	movt	r1, #1
   112ac:	bl	10f18 <dcgettext@plt>
   112b0:	ldr	r1, [r7]
   112b4:	bl	10ea0 <fputs_unlocked@plt>
   112b8:	movw	r1, #25617	; 0x6411
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10f18 <dcgettext@plt>
   112cc:	ldr	r1, [r7]
   112d0:	bl	10ea0 <fputs_unlocked@plt>
   112d4:	movw	r1, #25662	; 0x643e
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10f18 <dcgettext@plt>
   112e8:	ldr	r1, [r7]
   112ec:	bl	10ea0 <fputs_unlocked@plt>
   112f0:	movw	r1, #25716	; 0x6474
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10f18 <dcgettext@plt>
   11304:	ldr	r1, [r7]
   11308:	bl	10ea0 <fputs_unlocked@plt>
   1130c:	movw	r1, #25825	; 0x64e1
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	movt	r1, #1
   1131c:	bl	10f18 <dcgettext@plt>
   11320:	ldr	r1, [r7]
   11324:	bl	10ea0 <fputs_unlocked@plt>
   11328:	movw	r1, #25887	; 0x651f
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10f18 <dcgettext@plt>
   1133c:	ldr	r1, [r7]
   11340:	bl	10ea0 <fputs_unlocked@plt>
   11344:	movw	r1, #26199	; 0x6657
   11348:	mov	r0, #0
   1134c:	mov	r2, #5
   11350:	movt	r1, #1
   11354:	bl	10f18 <dcgettext@plt>
   11358:	ldr	r1, [r7]
   1135c:	bl	10ea0 <fputs_unlocked@plt>
   11360:	movw	r0, #27392	; 0x6b00
   11364:	mov	r2, #48	; 0x30
   11368:	mov	r6, sp
   1136c:	movw	r5, #26466	; 0x6762
   11370:	movt	r0, #1
   11374:	movt	r5, #1
   11378:	add	r1, r0, #32
   1137c:	add	r3, r0, #16
   11380:	vld1.64	{d18-d19}, [r0], r2
   11384:	vld1.64	{d16-d17}, [r1]
   11388:	vld1.64	{d20-d21}, [r3]
   1138c:	vldr	d22, [r0]
   11390:	add	r1, r6, #32
   11394:	add	r0, r6, #16
   11398:	vst1.64	{d16-d17}, [r1]
   1139c:	movw	r1, #26767	; 0x688f
   113a0:	vst1.64	{d20-d21}, [r0]
   113a4:	mov	r0, r6
   113a8:	movt	r1, #1
   113ac:	vst1.64	{d18-d19}, [r0], r2
   113b0:	vstr	d22, [r0]
   113b4:	mov	r0, r5
   113b8:	bl	10eb8 <strcmp@plt>
   113bc:	cmp	r0, #0
   113c0:	ldrne	r1, [r6, #8]!
   113c4:	cmpne	r1, #0
   113c8:	bne	113b4 <__assert_fail@plt+0x298>
   113cc:	movw	r1, #26862	; 0x68ee
   113d0:	ldr	r6, [r6, #4]
   113d4:	mov	r0, #0
   113d8:	mov	r2, #5
   113dc:	movt	r1, #1
   113e0:	bl	10f18 <dcgettext@plt>
   113e4:	movw	r2, #26557	; 0x67bd
   113e8:	movw	r3, #26885	; 0x6905
   113ec:	mov	r1, r0
   113f0:	mov	r0, #1
   113f4:	movt	r2, #1
   113f8:	movt	r3, #1
   113fc:	bl	1105c <__printf_chk@plt>
   11400:	cmp	r6, #0
   11404:	mov	r0, #5
   11408:	mov	r1, #0
   1140c:	moveq	r6, r5
   11410:	bl	110b0 <setlocale@plt>
   11414:	cmp	r0, #0
   11418:	beq	11450 <__assert_fail@plt+0x334>
   1141c:	movw	r1, #26925	; 0x692d
   11420:	mov	r2, #3
   11424:	movt	r1, #1
   11428:	bl	110f8 <strncmp@plt>
   1142c:	cmp	r0, #0
   11430:	beq	11450 <__assert_fail@plt+0x334>
   11434:	movw	r1, #26929	; 0x6931
   11438:	mov	r0, #0
   1143c:	mov	r2, #5
   11440:	movt	r1, #1
   11444:	bl	10f18 <dcgettext@plt>
   11448:	ldr	r1, [r7]
   1144c:	bl	10ea0 <fputs_unlocked@plt>
   11450:	movw	r1, #27000	; 0x6978
   11454:	mov	r0, #0
   11458:	mov	r2, #5
   1145c:	movt	r1, #1
   11460:	bl	10f18 <dcgettext@plt>
   11464:	movw	r2, #26885	; 0x6905
   11468:	mov	r1, r0
   1146c:	mov	r0, #1
   11470:	mov	r3, r5
   11474:	movt	r2, #1
   11478:	bl	1105c <__printf_chk@plt>
   1147c:	movw	r1, #27027	; 0x6993
   11480:	mov	r0, #0
   11484:	mov	r2, #5
   11488:	movt	r1, #1
   1148c:	bl	10f18 <dcgettext@plt>
   11490:	mov	r1, r0
   11494:	movw	r0, #26795	; 0x68ab
   11498:	movw	r3, #27077	; 0x69c5
   1149c:	cmp	r6, r5
   114a0:	mov	r2, r6
   114a4:	movt	r0, #1
   114a8:	movt	r3, #1
   114ac:	moveq	r3, r0
   114b0:	mov	r0, #1
   114b4:	bl	1105c <__printf_chk@plt>
   114b8:	mov	r0, r4
   114bc:	bl	11008 <exit@plt>
   114c0:	movw	r0, #33104	; 0x8150
   114c4:	movw	r1, #25292	; 0x62cc
   114c8:	mov	r2, #5
   114cc:	movt	r0, #2
   114d0:	movt	r1, #1
   114d4:	ldr	r5, [r0]
   114d8:	mov	r0, #0
   114dc:	bl	10f18 <dcgettext@plt>
   114e0:	mov	r2, r0
   114e4:	movw	r0, #33168	; 0x8190
   114e8:	mov	r1, #1
   114ec:	movt	r0, #2
   114f0:	ldr	r3, [r0]
   114f4:	mov	r0, r5
   114f8:	bl	11074 <__fprintf_chk@plt>
   114fc:	mov	r0, r4
   11500:	bl	11008 <exit@plt>
   11504:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11508:	add	fp, sp, #28
   1150c:	sub	sp, sp, #148	; 0x94
   11510:	mov	r5, r0
   11514:	ldr	r0, [r1]
   11518:	str	r1, [sp, #20]
   1151c:	bl	12020 <__assert_fail@plt+0xf04>
   11520:	movw	r1, #27077	; 0x69c5
   11524:	mov	r0, #6
   11528:	movt	r1, #1
   1152c:	bl	110b0 <setlocale@plt>
   11530:	movw	r4, #26561	; 0x67c1
   11534:	movw	r1, #26473	; 0x6769
   11538:	movt	r4, #1
   1153c:	movt	r1, #1
   11540:	mov	r0, r4
   11544:	bl	110e0 <bindtextdomain@plt>
   11548:	mov	r0, r4
   1154c:	bl	10f30 <textdomain@plt>
   11550:	movw	r0, #33020	; 0x80fc
   11554:	mov	r1, #125	; 0x7d
   11558:	movt	r0, #2
   1155c:	str	r1, [r0]
   11560:	movw	r0, #7456	; 0x1d20
   11564:	movt	r0, #1
   11568:	bl	162a4 <__assert_fail@plt+0x5188>
   1156c:	movw	r6, #26497	; 0x6781
   11570:	movw	r7, #27296	; 0x6aa0
   11574:	movw	r9, #33112	; 0x8158
   11578:	mov	r8, #0
   1157c:	movt	r6, #1
   11580:	movt	r7, #1
   11584:	movt	r9, #2
   11588:	ldr	r1, [sp, #20]
   1158c:	mov	r0, r5
   11590:	mov	r2, r6
   11594:	mov	r3, r7
   11598:	str	r8, [sp]
   1159c:	bl	10ff0 <getopt_long@plt>
   115a0:	cmp	r0, #100	; 0x64
   115a4:	ble	116a0 <__assert_fail@plt+0x584>
   115a8:	cmp	r0, #101	; 0x65
   115ac:	beq	115c0 <__assert_fail@plt+0x4a4>
   115b0:	cmp	r0, #111	; 0x6f
   115b4:	bne	115c8 <__assert_fail@plt+0x4ac>
   115b8:	mov	r1, #1
   115bc:	b	115d4 <__assert_fail@plt+0x4b8>
   115c0:	mov	r1, #2
   115c4:	b	115d4 <__assert_fail@plt+0x4b8>
   115c8:	cmp	r0, #105	; 0x69
   115cc:	bne	11c88 <__assert_fail@plt+0xb6c>
   115d0:	mov	r1, #0
   115d4:	movw	r2, #33120	; 0x8160
   115d8:	add	r1, r1, r1, lsl #1
   115dc:	ldr	r4, [r9]
   115e0:	movt	r2, #2
   115e4:	add	sl, r2, r1, lsl #2
   115e8:	str	r0, [sl, #8]
   115ec:	ldrb	r1, [r4]
   115f0:	sub	r2, r1, #9
   115f4:	cmp	r2, #5
   115f8:	bcs	11614 <__assert_fail@plt+0x4f8>
   115fc:	add	r4, r4, #1
   11600:	str	r4, [r9]
   11604:	ldrb	r1, [r4]
   11608:	sub	r2, r1, #9
   1160c:	cmp	r2, #5
   11610:	bcc	115fc <__assert_fail@plt+0x4e0>
   11614:	cmp	r1, #32
   11618:	beq	115fc <__assert_fail@plt+0x4e0>
   1161c:	cmp	r0, #105	; 0x69
   11620:	str	r4, [sl, #12]
   11624:	bne	11634 <__assert_fail@plt+0x518>
   11628:	ldrb	r0, [r4]
   1162c:	cmp	r0, #76	; 0x4c
   11630:	beq	11c68 <__assert_fail@plt+0xb4c>
   11634:	movw	r1, #27120	; 0x69f0
   11638:	mov	r0, r4
   1163c:	movt	r1, #1
   11640:	bl	10eb8 <strcmp@plt>
   11644:	cmp	r0, #0
   11648:	beq	11588 <__assert_fail@plt+0x46c>
   1164c:	movw	r0, #27104	; 0x69e0
   11650:	mov	r1, #0
   11654:	mov	r2, #10
   11658:	add	r3, sp, #24
   1165c:	movt	r0, #1
   11660:	str	r0, [sp]
   11664:	mov	r0, r4
   11668:	bl	14c70 <__assert_fail@plt+0x3b54>
   1166c:	ldr	r1, [sp, #28]
   11670:	cmp	r1, #0
   11674:	mov	r1, r0
   11678:	movwne	r1, #1
   1167c:	cmp	r0, #0
   11680:	movne	r1, r0
   11684:	cmp	r1, #0
   11688:	bne	11c74 <__assert_fail@plt+0xb58>
   1168c:	ldr	r4, [sp, #24]
   11690:	bl	11038 <__errno_location@plt>
   11694:	str	r8, [r0]
   11698:	str	r4, [sl, #4]
   1169c:	b	11588 <__assert_fail@plt+0x46c>
   116a0:	cmn	r0, #1
   116a4:	bne	11be0 <__assert_fail@plt+0xac4>
   116a8:	movw	r0, #33096	; 0x8148
   116ac:	movw	r6, #33120	; 0x8160
   116b0:	movt	r0, #2
   116b4:	movt	r6, #2
   116b8:	ldr	r7, [r0]
   116bc:	cmp	r7, r5
   116c0:	bge	11c90 <__assert_fail@plt+0xb74>
   116c4:	ldr	r0, [r6, #12]
   116c8:	cmp	r0, #0
   116cc:	beq	11710 <__assert_fail@plt+0x5f4>
   116d0:	ldr	r4, [r6, #8]
   116d4:	ldrb	r1, [r0]
   116d8:	add	r0, r4, #128	; 0x80
   116dc:	cmp	r1, #76	; 0x4c
   116e0:	lsr	r0, r0, #7
   116e4:	bne	1176c <__assert_fail@plt+0x650>
   116e8:	cmp	r0, #2
   116ec:	bhi	116fc <__assert_fail@plt+0x5e0>
   116f0:	bl	10fd8 <__ctype_toupper_loc@plt>
   116f4:	ldr	r0, [r0]
   116f8:	ldr	r4, [r0, r4, lsl #2]
   116fc:	movw	r2, #27115	; 0x69eb
   11700:	str	r4, [sp]
   11704:	add	r0, sp, #24
   11708:	movt	r2, #1
   1170c:	b	117a0 <__assert_fail@plt+0x684>
   11710:	mov	r0, #0
   11714:	ldr	r1, [r6, #24]
   11718:	cmp	r1, #0
   1171c:	bne	117d8 <__assert_fail@plt+0x6bc>
   11720:	ldr	r1, [r6, #36]	; 0x24
   11724:	cmp	r1, #0
   11728:	beq	11884 <__assert_fail@plt+0x768>
   1172c:	ldr	r4, [r6, #32]
   11730:	ldrb	r1, [r1]
   11734:	add	r0, r4, #128	; 0x80
   11738:	cmp	r1, #76	; 0x4c
   1173c:	lsr	r0, r0, #7
   11740:	bne	11898 <__assert_fail@plt+0x77c>
   11744:	cmp	r0, #2
   11748:	bhi	11758 <__assert_fail@plt+0x63c>
   1174c:	bl	10fd8 <__ctype_toupper_loc@plt>
   11750:	ldr	r0, [r0]
   11754:	ldr	r4, [r0, r4, lsl #2]
   11758:	movw	r2, #27115	; 0x69eb
   1175c:	add	r0, sp, #24
   11760:	str	r4, [sp]
   11764:	movt	r2, #1
   11768:	b	118cc <__assert_fail@plt+0x7b0>
   1176c:	cmp	r0, #2
   11770:	bhi	11780 <__assert_fail@plt+0x664>
   11774:	bl	10fd8 <__ctype_toupper_loc@plt>
   11778:	ldr	r0, [r0]
   1177c:	ldr	r4, [r0, r4, lsl #2]
   11780:	ldr	r0, [r6, #4]
   11784:	movw	r2, #27131	; 0x69fb
   11788:	mov	r1, #0
   1178c:	str	r4, [sp]
   11790:	movt	r2, #1
   11794:	str	r1, [sp, #12]
   11798:	str	r0, [sp, #8]
   1179c:	add	r0, sp, #24
   117a0:	movw	r3, #27122	; 0x69f2
   117a4:	mov	r1, #1
   117a8:	movt	r3, #1
   117ac:	bl	10f9c <__asprintf_chk@plt>
   117b0:	cmn	r0, #1
   117b4:	ble	11ba4 <__assert_fail@plt+0xa88>
   117b8:	ldr	r0, [sp, #24]
   117bc:	bl	110bc <putenv@plt>
   117c0:	cmp	r0, #0
   117c4:	bne	11c40 <__assert_fail@plt+0xb24>
   117c8:	mov	r0, #1
   117cc:	ldr	r1, [r6, #24]
   117d0:	cmp	r1, #0
   117d4:	beq	11720 <__assert_fail@plt+0x604>
   117d8:	ldr	r4, [r6, #20]
   117dc:	ldrb	r1, [r1]
   117e0:	add	r0, r4, #128	; 0x80
   117e4:	cmp	r1, #76	; 0x4c
   117e8:	lsr	r0, r0, #7
   117ec:	bne	11818 <__assert_fail@plt+0x6fc>
   117f0:	cmp	r0, #2
   117f4:	bhi	11804 <__assert_fail@plt+0x6e8>
   117f8:	bl	10fd8 <__ctype_toupper_loc@plt>
   117fc:	ldr	r0, [r0]
   11800:	ldr	r4, [r0, r4, lsl #2]
   11804:	movw	r2, #27115	; 0x69eb
   11808:	add	r0, sp, #24
   1180c:	str	r4, [sp]
   11810:	movt	r2, #1
   11814:	b	1184c <__assert_fail@plt+0x730>
   11818:	cmp	r0, #2
   1181c:	bhi	1182c <__assert_fail@plt+0x710>
   11820:	bl	10fd8 <__ctype_toupper_loc@plt>
   11824:	ldr	r0, [r0]
   11828:	ldr	r4, [r0, r4, lsl #2]
   1182c:	ldr	r0, [r6, #16]
   11830:	movw	r2, #27131	; 0x69fb
   11834:	mov	r1, #0
   11838:	str	r4, [sp]
   1183c:	str	r1, [sp, #12]
   11840:	movt	r2, #1
   11844:	str	r0, [sp, #8]
   11848:	add	r0, sp, #24
   1184c:	movw	r3, #27122	; 0x69f2
   11850:	mov	r1, #1
   11854:	movt	r3, #1
   11858:	bl	10f9c <__asprintf_chk@plt>
   1185c:	cmp	r0, #0
   11860:	bmi	11ba4 <__assert_fail@plt+0xa88>
   11864:	ldr	r0, [sp, #24]
   11868:	bl	110bc <putenv@plt>
   1186c:	cmp	r0, #0
   11870:	bne	11c40 <__assert_fail@plt+0xb24>
   11874:	mov	r0, #1
   11878:	ldr	r1, [r6, #36]	; 0x24
   1187c:	cmp	r1, #0
   11880:	bne	1172c <__assert_fail@plt+0x610>
   11884:	cmp	r0, #0
   11888:	bne	118f4 <__assert_fail@plt+0x7d8>
   1188c:	movw	r1, #26601	; 0x67e9
   11890:	movt	r1, #1
   11894:	b	11c98 <__assert_fail@plt+0xb7c>
   11898:	cmp	r0, #2
   1189c:	bhi	118ac <__assert_fail@plt+0x790>
   118a0:	bl	10fd8 <__ctype_toupper_loc@plt>
   118a4:	ldr	r0, [r0]
   118a8:	ldr	r4, [r0, r4, lsl #2]
   118ac:	ldr	r0, [r6, #28]
   118b0:	movw	r2, #27131	; 0x69fb
   118b4:	mov	r1, #0
   118b8:	str	r4, [sp]
   118bc:	str	r1, [sp, #12]
   118c0:	movt	r2, #1
   118c4:	str	r0, [sp, #8]
   118c8:	add	r0, sp, #24
   118cc:	movw	r3, #27122	; 0x69f2
   118d0:	mov	r1, #1
   118d4:	movt	r3, #1
   118d8:	bl	10f9c <__asprintf_chk@plt>
   118dc:	cmp	r0, #0
   118e0:	bmi	11ba4 <__assert_fail@plt+0xa88>
   118e4:	ldr	r0, [sp, #24]
   118e8:	bl	110bc <putenv@plt>
   118ec:	cmp	r0, #0
   118f0:	bne	11c40 <__assert_fail@plt+0xb24>
   118f4:	movw	r0, #33168	; 0x8190
   118f8:	mov	r1, #47	; 0x2f
   118fc:	movt	r0, #2
   11900:	ldr	r4, [r0]
   11904:	mov	r0, r4
   11908:	bl	1102c <strchr@plt>
   1190c:	cmp	r0, #0
   11910:	str	r7, [sp, #16]
   11914:	beq	1192c <__assert_fail@plt+0x810>
   11918:	mov	r0, r4
   1191c:	bl	11e0c <__assert_fail@plt+0xcf0>
   11920:	mov	r5, r0
   11924:	str	r0, [r6]
   11928:	b	11960 <__assert_fail@plt+0x844>
   1192c:	movw	r0, #27182	; 0x6a2e
   11930:	movt	r0, #1
   11934:	bl	14c3c <__assert_fail@plt+0x3b20>
   11938:	cmp	r0, #0
   1193c:	beq	11afc <__assert_fail@plt+0x9e0>
   11940:	mov	r5, r0
   11944:	bl	11e0c <__assert_fail@plt+0xcf0>
   11948:	str	r0, [r6]
   1194c:	mov	r0, r5
   11950:	bl	11ff8 <__assert_fail@plt+0xedc>
   11954:	ldr	r5, [r6]
   11958:	cmp	r5, #0
   1195c:	beq	11b74 <__assert_fail@plt+0xa58>
   11960:	movw	r0, #27202	; 0x6a42
   11964:	movt	r0, #1
   11968:	bl	10fa8 <getenv@plt>
   1196c:	mov	r9, r0
   11970:	mov	r0, #0
   11974:	str	r0, [fp, #-32]	; 0xffffffe0
   11978:	movw	r0, #27213	; 0x6a4d
   1197c:	movt	r0, #1
   11980:	str	r0, [fp, #-36]	; 0xffffffdc
   11984:	str	r5, [fp, #-40]	; 0xffffffd8
   11988:	ldrb	r0, [r5]
   1198c:	cmp	r0, #0
   11990:	beq	11a14 <__assert_fail@plt+0x8f8>
   11994:	movw	sl, #27242	; 0x6a6a
   11998:	movw	r7, #27255	; 0x6a77
   1199c:	sub	r0, fp, #40	; 0x28
   119a0:	sub	r8, fp, #44	; 0x2c
   119a4:	add	r4, sp, #24
   119a8:	movt	sl, #1
   119ac:	movt	r7, #1
   119b0:	add	r6, r0, #4
   119b4:	mov	r0, r8
   119b8:	mov	r1, #1
   119bc:	mov	r2, r7
   119c0:	mov	r3, r5
   119c4:	str	sl, [sp]
   119c8:	bl	10f9c <__asprintf_chk@plt>
   119cc:	cmn	r0, #1
   119d0:	ble	11ba4 <__assert_fail@plt+0xa88>
   119d4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   119d8:	mov	r0, #3
   119dc:	mov	r2, r4
   119e0:	bl	110ec <__xstat64@plt>
   119e4:	mov	r1, r0
   119e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   119ec:	cmp	r1, #0
   119f0:	beq	11a24 <__assert_fail@plt+0x908>
   119f4:	bl	11ff8 <__assert_fail@plt+0xedc>
   119f8:	ldr	r0, [r6]
   119fc:	cmp	r0, #0
   11a00:	beq	11ba8 <__assert_fail@plt+0xa8c>
   11a04:	ldr	r5, [r6], #4
   11a08:	ldrb	r0, [r5]
   11a0c:	cmp	r0, #0
   11a10:	bne	119b4 <__assert_fail@plt+0x898>
   11a14:	movw	r0, #27242	; 0x6a6a
   11a18:	movt	r0, #1
   11a1c:	bl	14bc0 <__assert_fail@plt+0x3aa4>
   11a20:	str	r0, [fp, #-44]	; 0xffffffd4
   11a24:	ldr	r4, [sp, #16]
   11a28:	cmp	r9, #0
   11a2c:	beq	11a48 <__assert_fail@plt+0x92c>
   11a30:	movw	r2, #27279	; 0x6a8f
   11a34:	str	r0, [sp, #4]
   11a38:	str	r9, [sp]
   11a3c:	add	r0, sp, #24
   11a40:	movt	r2, #1
   11a44:	b	11a58 <__assert_fail@plt+0x93c>
   11a48:	movw	r2, #27288	; 0x6a98
   11a4c:	str	r0, [sp]
   11a50:	add	r0, sp, #24
   11a54:	movt	r2, #1
   11a58:	movw	r3, #27202	; 0x6a42
   11a5c:	mov	r1, #1
   11a60:	movt	r3, #1
   11a64:	bl	10f9c <__asprintf_chk@plt>
   11a68:	movw	r5, #33120	; 0x8160
   11a6c:	cmn	r0, #1
   11a70:	movt	r5, #2
   11a74:	ble	11ba4 <__assert_fail@plt+0xa88>
   11a78:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11a7c:	bl	11ff8 <__assert_fail@plt+0xedc>
   11a80:	ldr	r0, [sp, #24]
   11a84:	bl	110bc <putenv@plt>
   11a88:	cmp	r0, #0
   11a8c:	bne	11c40 <__assert_fail@plt+0xb24>
   11a90:	ldr	r0, [sp, #20]
   11a94:	add	r4, r0, r4, lsl #2
   11a98:	ldr	r0, [r5]
   11a9c:	bl	11ff8 <__assert_fail@plt+0xedc>
   11aa0:	ldr	r0, [r4]
   11aa4:	mov	r1, r4
   11aa8:	bl	10ef4 <execvp@plt>
   11aac:	bl	11038 <__errno_location@plt>
   11ab0:	movw	r1, #26667	; 0x682b
   11ab4:	ldr	r5, [r0]
   11ab8:	mov	r0, #0
   11abc:	mov	r2, #5
   11ac0:	movt	r1, #1
   11ac4:	bl	10f18 <dcgettext@plt>
   11ac8:	mov	r6, r0
   11acc:	ldr	r0, [r4]
   11ad0:	bl	13fe4 <__assert_fail@plt+0x2ec8>
   11ad4:	mov	r3, r0
   11ad8:	mov	r0, #0
   11adc:	mov	r1, r5
   11ae0:	mov	r2, r6
   11ae4:	bl	10f90 <error@plt>
   11ae8:	cmp	r5, #2
   11aec:	mov	r0, #126	; 0x7e
   11af0:	movweq	r0, #127	; 0x7f
   11af4:	sub	sp, fp, #28
   11af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11afc:	movw	r0, #27197	; 0x6a3d
   11b00:	movt	r0, #1
   11b04:	bl	10fa8 <getenv@plt>
   11b08:	cmp	r0, #0
   11b0c:	beq	11b84 <__assert_fail@plt+0xa68>
   11b10:	bl	14bc0 <__assert_fail@plt+0x3aa4>
   11b14:	movw	r1, #26503	; 0x6787
   11b18:	mov	r5, r0
   11b1c:	movt	r1, #1
   11b20:	bl	110a4 <strtok@plt>
   11b24:	cmp	r0, #0
   11b28:	beq	1194c <__assert_fail@plt+0x830>
   11b2c:	movw	r8, #26503	; 0x6787
   11b30:	movt	r8, #1
   11b34:	mov	r1, r4
   11b38:	mov	r2, #0
   11b3c:	bl	11f00 <__assert_fail@plt+0xde4>
   11b40:	mov	r1, #1
   11b44:	mov	r7, r0
   11b48:	bl	11080 <access@plt>
   11b4c:	cmp	r0, #0
   11b50:	beq	11b8c <__assert_fail@plt+0xa70>
   11b54:	mov	r0, r7
   11b58:	bl	11ff8 <__assert_fail@plt+0xedc>
   11b5c:	mov	r0, #0
   11b60:	mov	r1, r8
   11b64:	bl	110a4 <strtok@plt>
   11b68:	cmp	r0, #0
   11b6c:	bne	11b34 <__assert_fail@plt+0xa18>
   11b70:	b	1194c <__assert_fail@plt+0x830>
   11b74:	movw	r0, #26642	; 0x6812
   11b78:	movt	r0, #1
   11b7c:	bl	14bc0 <__assert_fail@plt+0x3aa4>
   11b80:	b	11920 <__assert_fail@plt+0x804>
   11b84:	mov	r5, #0
   11b88:	b	1194c <__assert_fail@plt+0x830>
   11b8c:	mov	r0, r7
   11b90:	bl	11e0c <__assert_fail@plt+0xcf0>
   11b94:	str	r0, [r6]
   11b98:	mov	r0, r7
   11b9c:	bl	11ff8 <__assert_fail@plt+0xedc>
   11ba0:	b	1194c <__assert_fail@plt+0x830>
   11ba4:	bl	14bf8 <__assert_fail@plt+0x3adc>
   11ba8:	movw	r1, #27261	; 0x6a7d
   11bac:	mov	r0, #0
   11bb0:	mov	r2, #5
   11bb4:	movt	r1, #1
   11bb8:	bl	10f18 <dcgettext@plt>
   11bbc:	mov	r4, r0
   11bc0:	movw	r0, #27242	; 0x6a6a
   11bc4:	movt	r0, #1
   11bc8:	bl	13fe4 <__assert_fail@plt+0x2ec8>
   11bcc:	mov	r3, r0
   11bd0:	mov	r0, #125	; 0x7d
   11bd4:	mov	r1, #0
   11bd8:	mov	r2, r4
   11bdc:	bl	10f90 <error@plt>
   11be0:	cmn	r0, #3
   11be4:	bne	11c30 <__assert_fail@plt+0xb14>
   11be8:	movw	r0, #33016	; 0x80f8
   11bec:	movw	r2, #26571	; 0x67cb
   11bf0:	mov	r1, #0
   11bf4:	movt	r0, #2
   11bf8:	movt	r2, #1
   11bfc:	str	r1, [sp, #4]
   11c00:	movw	r1, #26466	; 0x6762
   11c04:	movt	r1, #1
   11c08:	ldr	r3, [r0]
   11c0c:	movw	r0, #33108	; 0x8154
   11c10:	str	r2, [sp]
   11c14:	movw	r2, #26557	; 0x67bd
   11c18:	movt	r0, #2
   11c1c:	movt	r2, #1
   11c20:	ldr	r0, [r0]
   11c24:	bl	14488 <__assert_fail@plt+0x336c>
   11c28:	mov	r0, #0
   11c2c:	bl	11008 <exit@plt>
   11c30:	cmn	r0, #2
   11c34:	bne	11c88 <__assert_fail@plt+0xb6c>
   11c38:	mov	r0, #0
   11c3c:	bl	11218 <__assert_fail@plt+0xfc>
   11c40:	bl	11038 <__errno_location@plt>
   11c44:	movw	r1, #27141	; 0x6a05
   11c48:	ldr	r4, [r0]
   11c4c:	mov	r0, #0
   11c50:	mov	r2, #5
   11c54:	movt	r1, #1
   11c58:	bl	10f18 <dcgettext@plt>
   11c5c:	mov	r5, r0
   11c60:	ldr	r0, [sp, #24]
   11c64:	b	11ce8 <__assert_fail@plt+0xbcc>
   11c68:	movw	r1, #26505	; 0x6789
   11c6c:	movt	r1, #1
   11c70:	b	11c98 <__assert_fail@plt+0xb7c>
   11c74:	cmp	r1, #1
   11c78:	bne	11cbc <__assert_fail@plt+0xba0>
   11c7c:	mov	r4, #75	; 0x4b
   11c80:	bl	11038 <__errno_location@plt>
   11c84:	b	11cc4 <__assert_fail@plt+0xba8>
   11c88:	mov	r0, #125	; 0x7d
   11c8c:	bl	11218 <__assert_fail@plt+0xfc>
   11c90:	movw	r1, #26585	; 0x67d9
   11c94:	movt	r1, #1
   11c98:	mov	r0, #0
   11c9c:	mov	r2, #5
   11ca0:	bl	10f18 <dcgettext@plt>
   11ca4:	mov	r2, r0
   11ca8:	mov	r0, #0
   11cac:	mov	r1, #0
   11cb0:	bl	10f90 <error@plt>
   11cb4:	mov	r0, #125	; 0x7d
   11cb8:	bl	11218 <__assert_fail@plt+0xfc>
   11cbc:	bl	11038 <__errno_location@plt>
   11cc0:	ldr	r4, [r0]
   11cc4:	str	r4, [r0]
   11cc8:	movw	r1, #26541	; 0x67ad
   11ccc:	mov	r2, #5
   11cd0:	ldr	r4, [r0]
   11cd4:	movt	r1, #1
   11cd8:	mov	r0, #0
   11cdc:	bl	10f18 <dcgettext@plt>
   11ce0:	mov	r5, r0
   11ce4:	ldr	r0, [r9]
   11ce8:	bl	13fe4 <__assert_fail@plt+0x2ec8>
   11cec:	mov	r3, r0
   11cf0:	mov	r0, #125	; 0x7d
   11cf4:	mov	r1, r4
   11cf8:	mov	r2, r5
   11cfc:	bl	10f90 <error@plt>
   11d00:	movw	r1, #33160	; 0x8188
   11d04:	movt	r1, #2
   11d08:	str	r0, [r1, #4]
   11d0c:	bx	lr
   11d10:	movw	r1, #33160	; 0x8188
   11d14:	movt	r1, #2
   11d18:	strb	r0, [r1]
   11d1c:	bx	lr
   11d20:	push	{r4, r5, r6, sl, fp, lr}
   11d24:	add	fp, sp, #16
   11d28:	sub	sp, sp, #8
   11d2c:	movw	r0, #33108	; 0x8154
   11d30:	movt	r0, #2
   11d34:	ldr	r0, [r0]
   11d38:	bl	15cc4 <__assert_fail@plt+0x4ba8>
   11d3c:	cmp	r0, #0
   11d40:	beq	11d68 <__assert_fail@plt+0xc4c>
   11d44:	movw	r5, #33160	; 0x8188
   11d48:	movt	r5, #2
   11d4c:	ldrb	r0, [r5]
   11d50:	cmp	r0, #0
   11d54:	beq	11d94 <__assert_fail@plt+0xc78>
   11d58:	bl	11038 <__errno_location@plt>
   11d5c:	ldr	r0, [r0]
   11d60:	cmp	r0, #32
   11d64:	bne	11d94 <__assert_fail@plt+0xc78>
   11d68:	movw	r0, #33104	; 0x8150
   11d6c:	movt	r0, #2
   11d70:	ldr	r0, [r0]
   11d74:	bl	15cc4 <__assert_fail@plt+0x4ba8>
   11d78:	cmp	r0, #0
   11d7c:	subeq	sp, fp, #16
   11d80:	popeq	{r4, r5, r6, sl, fp, pc}
   11d84:	movw	r0, #33020	; 0x80fc
   11d88:	movt	r0, #2
   11d8c:	ldr	r0, [r0]
   11d90:	bl	10edc <_exit@plt>
   11d94:	movw	r1, #27463	; 0x6b47
   11d98:	mov	r0, #0
   11d9c:	mov	r2, #5
   11da0:	movt	r1, #1
   11da4:	bl	10f18 <dcgettext@plt>
   11da8:	ldr	r6, [r5, #4]
   11dac:	mov	r4, r0
   11db0:	bl	11038 <__errno_location@plt>
   11db4:	ldr	r5, [r0]
   11db8:	cmp	r6, #0
   11dbc:	bne	11dd8 <__assert_fail@plt+0xcbc>
   11dc0:	movw	r2, #27479	; 0x6b57
   11dc4:	mov	r0, #0
   11dc8:	mov	r1, r5
   11dcc:	mov	r3, r4
   11dd0:	movt	r2, #1
   11dd4:	b	11df8 <__assert_fail@plt+0xcdc>
   11dd8:	mov	r0, r6
   11ddc:	bl	13c5c <__assert_fail@plt+0x2b40>
   11de0:	movw	r2, #27475	; 0x6b53
   11de4:	mov	r3, r0
   11de8:	str	r4, [sp]
   11dec:	mov	r0, #0
   11df0:	mov	r1, r5
   11df4:	movt	r2, #1
   11df8:	bl	10f90 <error@plt>
   11dfc:	movw	r0, #33020	; 0x80fc
   11e00:	movt	r0, #2
   11e04:	ldr	r0, [r0]
   11e08:	bl	10edc <_exit@plt>
   11e0c:	push	{fp, lr}
   11e10:	mov	fp, sp
   11e14:	bl	11e6c <__assert_fail@plt+0xd50>
   11e18:	cmp	r0, #0
   11e1c:	popne	{fp, pc}
   11e20:	bl	14bf8 <__assert_fail@plt+0x3adc>
   11e24:	push	{r4, r5, r6, sl, fp, lr}
   11e28:	add	fp, sp, #16
   11e2c:	mov	r5, r0
   11e30:	mov	r4, r0
   11e34:	ldrb	r6, [r5], #-1
   11e38:	bl	15a5c <__assert_fail@plt+0x4940>
   11e3c:	sub	r2, r0, r4
   11e40:	sub	r0, r6, #47	; 0x2f
   11e44:	clz	r0, r0
   11e48:	lsr	r1, r0, #5
   11e4c:	mov	r0, r2
   11e50:	cmp	r2, r1
   11e54:	bls	11e68 <__assert_fail@plt+0xd4c>
   11e58:	ldrb	r3, [r5, r0]
   11e5c:	sub	r2, r0, #1
   11e60:	cmp	r3, #47	; 0x2f
   11e64:	beq	11e4c <__assert_fail@plt+0xd30>
   11e68:	pop	{r4, r5, r6, sl, fp, pc}
   11e6c:	push	{r4, r5, r6, sl, fp, lr}
   11e70:	add	fp, sp, #16
   11e74:	mov	r6, r0
   11e78:	mov	r4, r0
   11e7c:	ldrb	r5, [r6], #-1
   11e80:	bl	15a5c <__assert_fail@plt+0x4940>
   11e84:	sub	r1, r0, r4
   11e88:	sub	r0, r5, #47	; 0x2f
   11e8c:	clz	r0, r0
   11e90:	lsr	r0, r0, #5
   11e94:	mov	r5, r1
   11e98:	cmp	r1, r0
   11e9c:	bls	11eb0 <__assert_fail@plt+0xd94>
   11ea0:	ldrb	r2, [r6, r5]
   11ea4:	sub	r1, r5, #1
   11ea8:	cmp	r2, #47	; 0x2f
   11eac:	beq	11e94 <__assert_fail@plt+0xd78>
   11eb0:	cmp	r5, #0
   11eb4:	mov	r0, r5
   11eb8:	addeq	r0, r0, #1
   11ebc:	add	r0, r0, #1
   11ec0:	bl	15978 <__assert_fail@plt+0x485c>
   11ec4:	mov	r6, r0
   11ec8:	cmp	r0, #0
   11ecc:	beq	11ef8 <__assert_fail@plt+0xddc>
   11ed0:	mov	r0, r6
   11ed4:	mov	r1, r4
   11ed8:	mov	r2, r5
   11edc:	bl	10ee8 <memcpy@plt>
   11ee0:	cmp	r5, #0
   11ee4:	moveq	r0, #46	; 0x2e
   11ee8:	moveq	r5, #1
   11eec:	strbeq	r0, [r6]
   11ef0:	mov	r0, #0
   11ef4:	strb	r0, [r6, r5]
   11ef8:	mov	r0, r6
   11efc:	pop	{r4, r5, r6, sl, fp, pc}
   11f00:	push	{fp, lr}
   11f04:	mov	fp, sp
   11f08:	bl	11f18 <__assert_fail@plt+0xdfc>
   11f0c:	cmp	r0, #0
   11f10:	popne	{fp, pc}
   11f14:	bl	14bf8 <__assert_fail@plt+0x3adc>
   11f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f1c:	add	fp, sp, #28
   11f20:	push	{r2}		; (str r2, [sp, #-4]!)
   11f24:	mov	sl, r1
   11f28:	mov	r7, r0
   11f2c:	bl	15a5c <__assert_fail@plt+0x4940>
   11f30:	sub	r4, r0, r7
   11f34:	bl	15abc <__assert_fail@plt+0x49a0>
   11f38:	mov	r6, r0
   11f3c:	add	r5, r4, r0
   11f40:	mov	r0, sl
   11f44:	bl	11020 <strlen@plt>
   11f48:	mov	r9, r0
   11f4c:	cmp	r6, #0
   11f50:	beq	11f78 <__assert_fail@plt+0xe5c>
   11f54:	add	r0, r5, r7
   11f58:	mov	r4, #0
   11f5c:	ldrb	r0, [r0, #-1]
   11f60:	cmp	r0, #47	; 0x2f
   11f64:	beq	11f88 <__assert_fail@plt+0xe6c>
   11f68:	ldrb	r0, [sl]
   11f6c:	subs	r4, r0, #47	; 0x2f
   11f70:	movwne	r4, #47	; 0x2f
   11f74:	b	11f88 <__assert_fail@plt+0xe6c>
   11f78:	ldrb	r0, [sl]
   11f7c:	mov	r4, #0
   11f80:	cmp	r0, #47	; 0x2f
   11f84:	movweq	r4, #46	; 0x2e
   11f88:	uxtb	r8, r4
   11f8c:	add	r0, r9, r5
   11f90:	cmp	r8, #0
   11f94:	movwne	r8, #1
   11f98:	add	r0, r0, r8
   11f9c:	add	r0, r0, #1
   11fa0:	bl	15978 <__assert_fail@plt+0x485c>
   11fa4:	mov	r6, r0
   11fa8:	cmp	r0, #0
   11fac:	beq	11fec <__assert_fail@plt+0xed0>
   11fb0:	mov	r0, r6
   11fb4:	mov	r1, r7
   11fb8:	mov	r2, r5
   11fbc:	mvn	r3, #0
   11fc0:	bl	11110 <__mempcpy_chk@plt>
   11fc4:	ldr	r1, [sp]
   11fc8:	strb	r4, [r0], r8
   11fcc:	mov	r2, r9
   11fd0:	mvn	r3, #0
   11fd4:	cmp	r1, #0
   11fd8:	strne	r0, [r1]
   11fdc:	mov	r1, sl
   11fe0:	bl	11110 <__mempcpy_chk@plt>
   11fe4:	mov	r1, #0
   11fe8:	strb	r1, [r0]
   11fec:	mov	r0, r6
   11ff0:	sub	sp, fp, #28
   11ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ff8:	push	{r4, r5, r6, sl, fp, lr}
   11ffc:	add	fp, sp, #16
   12000:	mov	r4, r0
   12004:	bl	11038 <__errno_location@plt>
   12008:	ldr	r6, [r0]
   1200c:	mov	r5, r0
   12010:	mov	r0, r4
   12014:	bl	10ed0 <free@plt>
   12018:	str	r6, [r5]
   1201c:	pop	{r4, r5, r6, sl, fp, pc}
   12020:	push	{r4, r5, fp, lr}
   12024:	add	fp, sp, #8
   12028:	cmp	r0, #0
   1202c:	beq	120c0 <__assert_fail@plt+0xfa4>
   12030:	mov	r1, #47	; 0x2f
   12034:	mov	r4, r0
   12038:	bl	110c8 <strrchr@plt>
   1203c:	cmp	r0, #0
   12040:	mov	r5, r4
   12044:	addne	r5, r0, #1
   12048:	sub	r0, r5, r4
   1204c:	cmp	r0, #7
   12050:	blt	120a4 <__assert_fail@plt+0xf88>
   12054:	movw	r1, #27538	; 0x6b92
   12058:	sub	r0, r5, #7
   1205c:	mov	r2, #7
   12060:	movt	r1, #1
   12064:	bl	110f8 <strncmp@plt>
   12068:	cmp	r0, #0
   1206c:	bne	120a4 <__assert_fail@plt+0xf88>
   12070:	movw	r1, #27546	; 0x6b9a
   12074:	mov	r0, r5
   12078:	mov	r2, #3
   1207c:	movt	r1, #1
   12080:	bl	110f8 <strncmp@plt>
   12084:	cmp	r0, #0
   12088:	beq	12094 <__assert_fail@plt+0xf78>
   1208c:	mov	r4, r5
   12090:	b	120a4 <__assert_fail@plt+0xf88>
   12094:	movw	r0, #33088	; 0x8140
   12098:	add	r4, r5, #3
   1209c:	movt	r0, #2
   120a0:	str	r4, [r0]
   120a4:	movw	r0, #33092	; 0x8144
   120a8:	movt	r0, #2
   120ac:	str	r4, [r0]
   120b0:	movw	r0, #33168	; 0x8190
   120b4:	movt	r0, #2
   120b8:	str	r4, [r0]
   120bc:	pop	{r4, r5, fp, pc}
   120c0:	movw	r0, #33104	; 0x8150
   120c4:	mov	r1, #55	; 0x37
   120c8:	mov	r2, #1
   120cc:	movt	r0, #2
   120d0:	ldr	r3, [r0]
   120d4:	movw	r0, #27482	; 0x6b5a
   120d8:	movt	r0, #1
   120dc:	bl	10f54 <fwrite@plt>
   120e0:	bl	11104 <abort@plt>
   120e4:	push	{r4, r5, r6, sl, fp, lr}
   120e8:	add	fp, sp, #16
   120ec:	mov	r4, r0
   120f0:	movw	r0, #33176	; 0x8198
   120f4:	movt	r0, #2
   120f8:	cmp	r4, #0
   120fc:	moveq	r4, r0
   12100:	bl	11038 <__errno_location@plt>
   12104:	ldr	r6, [r0]
   12108:	mov	r5, r0
   1210c:	mov	r0, r4
   12110:	mov	r1, #48	; 0x30
   12114:	bl	14b1c <__assert_fail@plt+0x3a00>
   12118:	str	r6, [r5]
   1211c:	pop	{r4, r5, r6, sl, fp, pc}
   12120:	movw	r1, #33176	; 0x8198
   12124:	cmp	r0, #0
   12128:	movt	r1, #2
   1212c:	movne	r1, r0
   12130:	ldr	r0, [r1]
   12134:	bx	lr
   12138:	movw	r2, #33176	; 0x8198
   1213c:	cmp	r0, #0
   12140:	movt	r2, #2
   12144:	movne	r2, r0
   12148:	str	r1, [r2]
   1214c:	bx	lr
   12150:	movw	r3, #33176	; 0x8198
   12154:	cmp	r0, #0
   12158:	and	r2, r2, #1
   1215c:	movt	r3, #2
   12160:	movne	r3, r0
   12164:	ubfx	r0, r1, #5, #3
   12168:	and	r1, r1, #31
   1216c:	add	ip, r3, r0, lsl #2
   12170:	mov	r0, #1
   12174:	ldr	r3, [ip, #8]
   12178:	and	r0, r0, r3, lsr r1
   1217c:	eor	r2, r0, r2
   12180:	eor	r1, r3, r2, lsl r1
   12184:	str	r1, [ip, #8]
   12188:	bx	lr
   1218c:	movw	r2, #33176	; 0x8198
   12190:	cmp	r0, #0
   12194:	movt	r2, #2
   12198:	movne	r2, r0
   1219c:	ldr	r0, [r2, #4]
   121a0:	str	r1, [r2, #4]
   121a4:	bx	lr
   121a8:	push	{fp, lr}
   121ac:	mov	fp, sp
   121b0:	movw	r3, #33176	; 0x8198
   121b4:	cmp	r0, #0
   121b8:	movt	r3, #2
   121bc:	movne	r3, r0
   121c0:	cmp	r1, #0
   121c4:	mov	r0, #10
   121c8:	cmpne	r2, #0
   121cc:	str	r0, [r3]
   121d0:	bne	121d8 <__assert_fail@plt+0x10bc>
   121d4:	bl	11104 <abort@plt>
   121d8:	str	r1, [r3, #40]	; 0x28
   121dc:	str	r2, [r3, #44]	; 0x2c
   121e0:	pop	{fp, pc}
   121e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121e8:	add	fp, sp, #28
   121ec:	sub	sp, sp, #20
   121f0:	mov	r7, r0
   121f4:	ldr	r0, [fp, #8]
   121f8:	movw	r5, #33176	; 0x8198
   121fc:	mov	r8, r3
   12200:	mov	r9, r2
   12204:	mov	sl, r1
   12208:	movt	r5, #2
   1220c:	cmp	r0, #0
   12210:	movne	r5, r0
   12214:	bl	11038 <__errno_location@plt>
   12218:	ldr	r2, [r5, #40]	; 0x28
   1221c:	ldr	r3, [r5, #44]	; 0x2c
   12220:	mov	r4, r0
   12224:	ldm	r5, {r0, r1}
   12228:	add	r5, r5, #8
   1222c:	ldr	r6, [r4]
   12230:	stm	sp, {r0, r1, r5}
   12234:	mov	r0, r7
   12238:	mov	r1, sl
   1223c:	str	r2, [sp, #12]
   12240:	str	r3, [sp, #16]
   12244:	mov	r2, r9
   12248:	mov	r3, r8
   1224c:	bl	1225c <__assert_fail@plt+0x1140>
   12250:	str	r6, [r4]
   12254:	sub	sp, fp, #28
   12258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1225c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12260:	add	fp, sp, #28
   12264:	sub	sp, sp, #156	; 0x9c
   12268:	str	r0, [fp, #-84]	; 0xffffffac
   1226c:	add	r0, r2, #1
   12270:	mov	r6, r1
   12274:	mov	r7, r3
   12278:	str	r2, [fp, #-80]	; 0xffffffb0
   1227c:	str	r0, [sp, #80]	; 0x50
   12280:	ldr	r0, [fp, #12]
   12284:	and	r1, r0, #1
   12288:	str	r1, [sp, #36]	; 0x24
   1228c:	and	r1, r0, #4
   12290:	str	r1, [sp, #32]
   12294:	ubfx	r8, r0, #1, #1
   12298:	bl	10f6c <__ctype_get_mb_cur_max@plt>
   1229c:	str	r0, [sp, #40]	; 0x28
   122a0:	ldr	r0, [fp, #24]
   122a4:	ldr	r4, [fp, #8]
   122a8:	mov	r1, #0
   122ac:	str	r1, [fp, #-52]	; 0xffffffcc
   122b0:	mov	r1, #0
   122b4:	str	r1, [sp, #60]	; 0x3c
   122b8:	mov	r1, #1
   122bc:	str	r1, [sp, #84]	; 0x54
   122c0:	str	r0, [sp, #76]	; 0x4c
   122c4:	ldr	r0, [fp, #20]
   122c8:	str	r0, [sp, #72]	; 0x48
   122cc:	mov	r0, #0
   122d0:	str	r0, [sp, #56]	; 0x38
   122d4:	mov	r0, #0
   122d8:	str	r0, [fp, #-88]	; 0xffffffa8
   122dc:	mov	r0, #0
   122e0:	str	r0, [fp, #-72]	; 0xffffffb8
   122e4:	mov	r0, #0
   122e8:	cmp	r4, #10
   122ec:	bhi	13608 <__assert_fail@plt+0x24ec>
   122f0:	add	r1, pc, #24
   122f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   122f8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   122fc:	mov	r5, r6
   12300:	mov	r9, #0
   12304:	mov	r2, #1
   12308:	mov	r3, #0
   1230c:	ldr	pc, [r1, r4, lsl #2]
   12310:	ldrdeq	r2, [r1], -r8
   12314:	andeq	r2, r1, r4, lsl r4
   12318:	andeq	r2, r1, r8, ror #7
   1231c:	ldrdeq	r2, [r1], -r0
   12320:	andeq	r2, r1, r8, lsl #8
   12324:	andeq	r2, r1, ip, ror #8
   12328:	strdeq	r2, [r1], -r8
   1232c:	andeq	r2, r1, r4, ror #13
   12330:	andeq	r2, r1, ip, lsr r3
   12334:	andeq	r2, r1, ip, lsr r3
   12338:	andeq	r2, r1, r4, ror r5
   1233c:	movw	r6, #27628	; 0x6bec
   12340:	mov	r0, #0
   12344:	mov	r2, #5
   12348:	movt	r6, #1
   1234c:	mov	r1, r6
   12350:	bl	10f18 <dcgettext@plt>
   12354:	cmp	r0, r6
   12358:	str	r0, [sp, #72]	; 0x48
   1235c:	bne	1254c <__assert_fail@plt+0x1430>
   12360:	bl	15ee8 <__assert_fail@plt+0x4dcc>
   12364:	ldrb	r1, [r0]
   12368:	and	r1, r1, #223	; 0xdf
   1236c:	cmp	r1, #71	; 0x47
   12370:	beq	124cc <__assert_fail@plt+0x13b0>
   12374:	cmp	r1, #85	; 0x55
   12378:	bne	12530 <__assert_fail@plt+0x1414>
   1237c:	ldrb	r1, [r0, #1]
   12380:	and	r1, r1, #223	; 0xdf
   12384:	cmp	r1, #84	; 0x54
   12388:	bne	12530 <__assert_fail@plt+0x1414>
   1238c:	ldrb	r1, [r0, #2]
   12390:	and	r1, r1, #223	; 0xdf
   12394:	cmp	r1, #70	; 0x46
   12398:	bne	12530 <__assert_fail@plt+0x1414>
   1239c:	ldrb	r1, [r0, #3]
   123a0:	cmp	r1, #45	; 0x2d
   123a4:	bne	12530 <__assert_fail@plt+0x1414>
   123a8:	ldrb	r1, [r0, #4]
   123ac:	cmp	r1, #56	; 0x38
   123b0:	bne	12530 <__assert_fail@plt+0x1414>
   123b4:	ldrb	r0, [r0, #5]
   123b8:	cmp	r0, #0
   123bc:	movw	r0, #27632	; 0x6bf0
   123c0:	movt	r0, #1
   123c4:	str	r0, [sp, #72]	; 0x48
   123c8:	bne	12530 <__assert_fail@plt+0x1414>
   123cc:	b	1254c <__assert_fail@plt+0x1430>
   123d0:	mov	r0, #1
   123d4:	b	12414 <__assert_fail@plt+0x12f8>
   123d8:	mov	r4, #0
   123dc:	mov	r9, #0
   123e0:	mov	r2, r0
   123e4:	b	12464 <__assert_fail@plt+0x1348>
   123e8:	tst	r8, #1
   123ec:	bne	12414 <__assert_fail@plt+0x12f8>
   123f0:	mov	r2, r0
   123f4:	b	1243c <__assert_fail@plt+0x1320>
   123f8:	mov	r0, #1
   123fc:	mov	r9, #0
   12400:	mov	r4, #5
   12404:	b	12480 <__assert_fail@plt+0x1364>
   12408:	mov	r2, #1
   1240c:	tst	r8, #1
   12410:	beq	1243c <__assert_fail@plt+0x1320>
   12414:	mov	r1, #1
   12418:	mov	r9, #0
   1241c:	mov	r4, #2
   12420:	mov	r2, r0
   12424:	mov	r3, #1
   12428:	str	r1, [fp, #-72]	; 0xffffffb8
   1242c:	movw	r1, #27630	; 0x6bee
   12430:	movt	r1, #1
   12434:	str	r1, [fp, #-88]	; 0xffffffa8
   12438:	b	126e4 <__assert_fail@plt+0x15c8>
   1243c:	cmp	r5, #0
   12440:	mov	r9, #1
   12444:	mov	r4, #2
   12448:	movne	r0, #39	; 0x27
   1244c:	strbne	r0, [ip]
   12450:	movw	r0, #27630	; 0x6bee
   12454:	movt	r0, #1
   12458:	str	r0, [fp, #-88]	; 0xffffffa8
   1245c:	mov	r0, #1
   12460:	str	r0, [fp, #-72]	; 0xffffffb8
   12464:	mov	r3, #0
   12468:	b	126e4 <__assert_fail@plt+0x15c8>
   1246c:	mov	r4, #5
   12470:	tst	r8, #1
   12474:	beq	1249c <__assert_fail@plt+0x1380>
   12478:	mov	r0, #1
   1247c:	mov	r9, #0
   12480:	str	r0, [fp, #-72]	; 0xffffffb8
   12484:	movw	r0, #27626	; 0x6bea
   12488:	mov	r2, #1
   1248c:	mov	r3, #1
   12490:	movt	r0, #1
   12494:	str	r0, [fp, #-88]	; 0xffffffa8
   12498:	b	126e4 <__assert_fail@plt+0x15c8>
   1249c:	cmp	r5, #0
   124a0:	mov	r3, #0
   124a4:	mov	r9, #1
   124a8:	mov	r2, #1
   124ac:	movne	r0, #34	; 0x22
   124b0:	strbne	r0, [ip]
   124b4:	movw	r0, #27626	; 0x6bea
   124b8:	movt	r0, #1
   124bc:	str	r0, [fp, #-88]	; 0xffffffa8
   124c0:	mov	r0, #1
   124c4:	str	r0, [fp, #-72]	; 0xffffffb8
   124c8:	b	126e4 <__assert_fail@plt+0x15c8>
   124cc:	ldrb	r1, [r0, #1]
   124d0:	and	r1, r1, #223	; 0xdf
   124d4:	cmp	r1, #66	; 0x42
   124d8:	bne	12530 <__assert_fail@plt+0x1414>
   124dc:	ldrb	r1, [r0, #2]
   124e0:	cmp	r1, #49	; 0x31
   124e4:	bne	12530 <__assert_fail@plt+0x1414>
   124e8:	ldrb	r1, [r0, #3]
   124ec:	cmp	r1, #56	; 0x38
   124f0:	bne	12530 <__assert_fail@plt+0x1414>
   124f4:	ldrb	r1, [r0, #4]
   124f8:	cmp	r1, #48	; 0x30
   124fc:	bne	12530 <__assert_fail@plt+0x1414>
   12500:	ldrb	r1, [r0, #5]
   12504:	cmp	r1, #51	; 0x33
   12508:	bne	12530 <__assert_fail@plt+0x1414>
   1250c:	ldrb	r1, [r0, #6]
   12510:	cmp	r1, #48	; 0x30
   12514:	bne	12530 <__assert_fail@plt+0x1414>
   12518:	ldrb	r0, [r0, #7]
   1251c:	cmp	r0, #0
   12520:	movw	r0, #27640	; 0x6bf8
   12524:	movt	r0, #1
   12528:	str	r0, [sp, #72]	; 0x48
   1252c:	beq	1254c <__assert_fail@plt+0x1430>
   12530:	movw	r1, #27626	; 0x6bea
   12534:	movw	r0, #27630	; 0x6bee
   12538:	cmp	r4, #9
   1253c:	movt	r1, #1
   12540:	movt	r0, #1
   12544:	moveq	r0, r1
   12548:	str	r0, [sp, #72]	; 0x48
   1254c:	movw	r6, #27630	; 0x6bee
   12550:	mov	r0, #0
   12554:	mov	r2, #5
   12558:	movt	r6, #1
   1255c:	mov	r1, r6
   12560:	bl	10f18 <dcgettext@plt>
   12564:	cmp	r0, r6
   12568:	str	r0, [sp, #76]	; 0x4c
   1256c:	beq	125b8 <__assert_fail@plt+0x149c>
   12570:	ldr	ip, [fp, #-84]	; 0xffffffac
   12574:	mov	r9, #0
   12578:	tst	r8, #1
   1257c:	bne	126c0 <__assert_fail@plt+0x15a4>
   12580:	ldr	r0, [sp, #72]	; 0x48
   12584:	ldrb	r0, [r0]
   12588:	cmp	r0, #0
   1258c:	beq	126c0 <__assert_fail@plt+0x15a4>
   12590:	ldr	r1, [sp, #72]	; 0x48
   12594:	mov	r9, #0
   12598:	add	r1, r1, #1
   1259c:	cmp	r9, r5
   125a0:	strbcc	r0, [ip, r9]
   125a4:	ldrb	r0, [r1, r9]
   125a8:	add	r9, r9, #1
   125ac:	cmp	r0, #0
   125b0:	bne	1259c <__assert_fail@plt+0x1480>
   125b4:	b	126c0 <__assert_fail@plt+0x15a4>
   125b8:	bl	15ee8 <__assert_fail@plt+0x4dcc>
   125bc:	ldrb	r1, [r0]
   125c0:	and	r1, r1, #223	; 0xdf
   125c4:	cmp	r1, #71	; 0x47
   125c8:	beq	12638 <__assert_fail@plt+0x151c>
   125cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   125d0:	cmp	r1, #85	; 0x55
   125d4:	bne	12694 <__assert_fail@plt+0x1578>
   125d8:	ldrb	r1, [r0, #1]
   125dc:	and	r1, r1, #223	; 0xdf
   125e0:	cmp	r1, #84	; 0x54
   125e4:	bne	12694 <__assert_fail@plt+0x1578>
   125e8:	ldrb	r1, [r0, #2]
   125ec:	and	r1, r1, #223	; 0xdf
   125f0:	cmp	r1, #70	; 0x46
   125f4:	bne	12694 <__assert_fail@plt+0x1578>
   125f8:	ldrb	r1, [r0, #3]
   125fc:	cmp	r1, #45	; 0x2d
   12600:	bne	12694 <__assert_fail@plt+0x1578>
   12604:	ldrb	r1, [r0, #4]
   12608:	cmp	r1, #56	; 0x38
   1260c:	bne	12694 <__assert_fail@plt+0x1578>
   12610:	ldrb	r0, [r0, #5]
   12614:	cmp	r0, #0
   12618:	bne	12694 <__assert_fail@plt+0x1578>
   1261c:	movw	r0, #27636	; 0x6bf4
   12620:	movt	r0, #1
   12624:	str	r0, [sp, #76]	; 0x4c
   12628:	mov	r9, #0
   1262c:	tst	r8, #1
   12630:	beq	12580 <__assert_fail@plt+0x1464>
   12634:	b	126c0 <__assert_fail@plt+0x15a4>
   12638:	ldrb	r1, [r0, #1]
   1263c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12640:	and	r1, r1, #223	; 0xdf
   12644:	cmp	r1, #66	; 0x42
   12648:	bne	12694 <__assert_fail@plt+0x1578>
   1264c:	ldrb	r1, [r0, #2]
   12650:	cmp	r1, #49	; 0x31
   12654:	bne	12694 <__assert_fail@plt+0x1578>
   12658:	ldrb	r1, [r0, #3]
   1265c:	cmp	r1, #56	; 0x38
   12660:	bne	12694 <__assert_fail@plt+0x1578>
   12664:	ldrb	r1, [r0, #4]
   12668:	cmp	r1, #48	; 0x30
   1266c:	bne	12694 <__assert_fail@plt+0x1578>
   12670:	ldrb	r1, [r0, #5]
   12674:	cmp	r1, #51	; 0x33
   12678:	bne	12694 <__assert_fail@plt+0x1578>
   1267c:	ldrb	r1, [r0, #6]
   12680:	cmp	r1, #48	; 0x30
   12684:	bne	12694 <__assert_fail@plt+0x1578>
   12688:	ldrb	r0, [r0, #7]
   1268c:	cmp	r0, #0
   12690:	beq	134a8 <__assert_fail@plt+0x238c>
   12694:	movw	r0, #27630	; 0x6bee
   12698:	cmp	r4, #9
   1269c:	movt	r0, #1
   126a0:	mov	r1, r0
   126a4:	movw	r0, #27626	; 0x6bea
   126a8:	movt	r0, #1
   126ac:	moveq	r1, r0
   126b0:	str	r1, [sp, #76]	; 0x4c
   126b4:	mov	r9, #0
   126b8:	tst	r8, #1
   126bc:	beq	12580 <__assert_fail@plt+0x1464>
   126c0:	ldr	r6, [sp, #76]	; 0x4c
   126c4:	mov	r0, r6
   126c8:	bl	11020 <strlen@plt>
   126cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   126d0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   126d4:	str	r0, [fp, #-72]	; 0xffffffb8
   126d8:	str	r6, [fp, #-88]	; 0xffffffa8
   126dc:	mov	r2, #1
   126e0:	mov	r3, r8
   126e4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   126e8:	str	r4, [fp, #-64]	; 0xffffffc0
   126ec:	mov	sl, #0
   126f0:	str	r3, [fp, #-76]	; 0xffffffb4
   126f4:	str	r2, [sp, #88]	; 0x58
   126f8:	cmp	r0, #0
   126fc:	movwne	r0, #1
   12700:	and	r1, r0, r3
   12704:	and	r1, r2, r1
   12708:	str	r1, [sp, #48]	; 0x30
   1270c:	sub	r1, r4, #2
   12710:	clz	r1, r1
   12714:	lsr	r1, r1, #5
   12718:	and	r1, r1, r3
   1271c:	str	r1, [sp, #44]	; 0x2c
   12720:	subs	r1, r4, #2
   12724:	eor	r4, r3, #1
   12728:	movwne	r1, #1
   1272c:	str	r4, [sp, #92]	; 0x5c
   12730:	orr	r4, r1, r4
   12734:	and	r1, r1, r2
   12738:	and	r0, r0, r1
   1273c:	str	r4, [sp, #64]	; 0x40
   12740:	ldr	r4, [sp, #84]	; 0x54
   12744:	str	r0, [fp, #-60]	; 0xffffffc4
   12748:	orr	r0, r1, r3
   1274c:	ldr	r1, [fp, #16]
   12750:	eor	r0, r0, #1
   12754:	clz	r1, r1
   12758:	lsr	r1, r1, #5
   1275c:	orr	r0, r1, r0
   12760:	str	r0, [fp, #-68]	; 0xffffffbc
   12764:	eor	r0, r2, #1
   12768:	str	r0, [sp, #52]	; 0x34
   1276c:	cmn	r7, #1
   12770:	beq	12780 <__assert_fail@plt+0x1664>
   12774:	cmp	sl, r7
   12778:	bne	1278c <__assert_fail@plt+0x1670>
   1277c:	b	13420 <__assert_fail@plt+0x2304>
   12780:	ldrb	r0, [lr, sl]
   12784:	cmp	r0, #0
   12788:	beq	13428 <__assert_fail@plt+0x230c>
   1278c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12790:	cmp	r0, #0
   12794:	beq	127f4 <__assert_fail@plt+0x16d8>
   12798:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1279c:	mov	r6, r5
   127a0:	add	r5, sl, r0
   127a4:	cmp	r0, #2
   127a8:	bcc	12814 <__assert_fail@plt+0x16f8>
   127ac:	mov	r0, #0
   127b0:	cmn	r7, #1
   127b4:	str	r0, [fp, #-56]	; 0xffffffc8
   127b8:	bne	127d0 <__assert_fail@plt+0x16b4>
   127bc:	mov	r0, lr
   127c0:	bl	11020 <strlen@plt>
   127c4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   127c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   127cc:	mov	r7, r0
   127d0:	cmp	r5, r7
   127d4:	bls	12824 <__assert_fail@plt+0x1708>
   127d8:	mov	r0, #0
   127dc:	mov	r5, r6
   127e0:	str	r0, [fp, #-48]	; 0xffffffd0
   127e4:	ldrb	r6, [lr, sl]
   127e8:	cmp	r6, #126	; 0x7e
   127ec:	bls	12874 <__assert_fail@plt+0x1758>
   127f0:	b	12dd0 <__assert_fail@plt+0x1cb4>
   127f4:	mov	r0, #0
   127f8:	str	r0, [fp, #-56]	; 0xffffffc8
   127fc:	mov	r0, #0
   12800:	str	r0, [fp, #-48]	; 0xffffffd0
   12804:	ldrb	r6, [lr, sl]
   12808:	cmp	r6, #126	; 0x7e
   1280c:	bls	12874 <__assert_fail@plt+0x1758>
   12810:	b	12dd0 <__assert_fail@plt+0x1cb4>
   12814:	mov	r0, #0
   12818:	str	r0, [fp, #-56]	; 0xffffffc8
   1281c:	cmp	r5, r7
   12820:	bhi	127d8 <__assert_fail@plt+0x16bc>
   12824:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12828:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1282c:	add	r0, lr, sl
   12830:	bl	11014 <bcmp@plt>
   12834:	ldr	r2, [sp, #92]	; 0x5c
   12838:	cmp	r0, #0
   1283c:	mov	r1, r0
   12840:	mov	r5, r6
   12844:	movwne	r1, #1
   12848:	orr	r1, r1, r2
   1284c:	tst	r1, #1
   12850:	beq	134e8 <__assert_fail@plt+0x23cc>
   12854:	ldr	ip, [fp, #-84]	; 0xffffffac
   12858:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1285c:	clz	r0, r0
   12860:	lsr	r0, r0, #5
   12864:	str	r0, [fp, #-48]	; 0xffffffd0
   12868:	ldrb	r6, [lr, sl]
   1286c:	cmp	r6, #126	; 0x7e
   12870:	bhi	12dd0 <__assert_fail@plt+0x1cb4>
   12874:	add	r3, pc, #16
   12878:	mov	r8, #1
   1287c:	mov	r2, #110	; 0x6e
   12880:	mov	r0, #97	; 0x61
   12884:	mov	r1, #0
   12888:	ldr	pc, [r3, r6, lsl #2]
   1288c:	andeq	r2, r1, r8, lsl #23
   12890:	ldrdeq	r2, [r1], -r0
   12894:	ldrdeq	r2, [r1], -r0
   12898:	ldrdeq	r2, [r1], -r0
   1289c:	ldrdeq	r2, [r1], -r0
   128a0:	ldrdeq	r2, [r1], -r0
   128a4:	ldrdeq	r2, [r1], -r0
   128a8:	andeq	r2, r1, r4, lsl #29
   128ac:	andeq	r2, r1, r8, ror #22
   128b0:	andeq	r2, r1, r0, ror #22
   128b4:	andeq	r2, r1, r4, ror fp
   128b8:	andeq	r2, r1, r4, lsr #25
   128bc:	andeq	r2, r1, r8, asr fp
   128c0:	andeq	r2, r1, r0, ror fp
   128c4:	ldrdeq	r2, [r1], -r0
   128c8:	ldrdeq	r2, [r1], -r0
   128cc:	ldrdeq	r2, [r1], -r0
   128d0:	ldrdeq	r2, [r1], -r0
   128d4:	ldrdeq	r2, [r1], -r0
   128d8:	ldrdeq	r2, [r1], -r0
   128dc:	ldrdeq	r2, [r1], -r0
   128e0:	ldrdeq	r2, [r1], -r0
   128e4:	ldrdeq	r2, [r1], -r0
   128e8:	ldrdeq	r2, [r1], -r0
   128ec:	ldrdeq	r2, [r1], -r0
   128f0:	ldrdeq	r2, [r1], -r0
   128f4:	ldrdeq	r2, [r1], -r0
   128f8:	ldrdeq	r2, [r1], -r0
   128fc:	ldrdeq	r2, [r1], -r0
   12900:	ldrdeq	r2, [r1], -r0
   12904:	ldrdeq	r2, [r1], -r0
   12908:	ldrdeq	r2, [r1], -r0
   1290c:	strdeq	r2, [r1], -ip
   12910:	andeq	r2, r1, r0, lsl #22
   12914:	andeq	r2, r1, r0, lsl #22
   12918:	strdeq	r2, [r1], -r0
   1291c:	andeq	r2, r1, r0, lsl #22
   12920:	andeq	r2, r1, r8, lsl #21
   12924:	andeq	r2, r1, r0, lsl #22
   12928:	andeq	r2, r1, ip, lsr #25
   1292c:	andeq	r2, r1, r0, lsl #22
   12930:	andeq	r2, r1, r0, lsl #22
   12934:	andeq	r2, r1, r0, lsl #22
   12938:	andeq	r2, r1, r8, lsl #21
   1293c:	andeq	r2, r1, r8, lsl #21
   12940:	andeq	r2, r1, r8, lsl #21
   12944:	andeq	r2, r1, r8, lsl #21
   12948:	andeq	r2, r1, r8, lsl #21
   1294c:	andeq	r2, r1, r8, lsl #21
   12950:	andeq	r2, r1, r8, lsl #21
   12954:	andeq	r2, r1, r8, lsl #21
   12958:	andeq	r2, r1, r8, lsl #21
   1295c:	andeq	r2, r1, r8, lsl #21
   12960:	andeq	r2, r1, r8, lsl #21
   12964:	andeq	r2, r1, r8, lsl #21
   12968:	andeq	r2, r1, r8, lsl #21
   1296c:	andeq	r2, r1, r8, lsl #21
   12970:	andeq	r2, r1, r8, lsl #21
   12974:	andeq	r2, r1, r8, lsl #21
   12978:	andeq	r2, r1, r0, lsl #22
   1297c:	andeq	r2, r1, r0, lsl #22
   12980:	andeq	r2, r1, r0, lsl #22
   12984:	andeq	r2, r1, r0, lsl #22
   12988:	andeq	r2, r1, r0, ror ip
   1298c:	ldrdeq	r2, [r1], -r0
   12990:	andeq	r2, r1, r8, lsl #21
   12994:	andeq	r2, r1, r8, lsl #21
   12998:	andeq	r2, r1, r8, lsl #21
   1299c:	andeq	r2, r1, r8, lsl #21
   129a0:	andeq	r2, r1, r8, lsl #21
   129a4:	andeq	r2, r1, r8, lsl #21
   129a8:	andeq	r2, r1, r8, lsl #21
   129ac:	andeq	r2, r1, r8, lsl #21
   129b0:	andeq	r2, r1, r8, lsl #21
   129b4:	andeq	r2, r1, r8, lsl #21
   129b8:	andeq	r2, r1, r8, lsl #21
   129bc:	andeq	r2, r1, r8, lsl #21
   129c0:	andeq	r2, r1, r8, lsl #21
   129c4:	andeq	r2, r1, r8, lsl #21
   129c8:	andeq	r2, r1, r8, lsl #21
   129cc:	andeq	r2, r1, r8, lsl #21
   129d0:	andeq	r2, r1, r8, lsl #21
   129d4:	andeq	r2, r1, r8, lsl #21
   129d8:	andeq	r2, r1, r8, lsl #21
   129dc:	andeq	r2, r1, r8, lsl #21
   129e0:	andeq	r2, r1, r8, lsl #21
   129e4:	andeq	r2, r1, r8, lsl #21
   129e8:	andeq	r2, r1, r8, lsl #21
   129ec:	andeq	r2, r1, r8, lsl #21
   129f0:	andeq	r2, r1, r8, lsl #21
   129f4:	andeq	r2, r1, r8, lsl #21
   129f8:	andeq	r2, r1, r0, lsl #22
   129fc:	andeq	r2, r1, r4, lsr fp
   12a00:	andeq	r2, r1, r8, lsl #21
   12a04:	andeq	r2, r1, r0, lsl #22
   12a08:	andeq	r2, r1, r8, lsl #21
   12a0c:	andeq	r2, r1, r0, lsl #22
   12a10:	andeq	r2, r1, r8, lsl #21
   12a14:	andeq	r2, r1, r8, lsl #21
   12a18:	andeq	r2, r1, r8, lsl #21
   12a1c:	andeq	r2, r1, r8, lsl #21
   12a20:	andeq	r2, r1, r8, lsl #21
   12a24:	andeq	r2, r1, r8, lsl #21
   12a28:	andeq	r2, r1, r8, lsl #21
   12a2c:	andeq	r2, r1, r8, lsl #21
   12a30:	andeq	r2, r1, r8, lsl #21
   12a34:	andeq	r2, r1, r8, lsl #21
   12a38:	andeq	r2, r1, r8, lsl #21
   12a3c:	andeq	r2, r1, r8, lsl #21
   12a40:	andeq	r2, r1, r8, lsl #21
   12a44:	andeq	r2, r1, r8, lsl #21
   12a48:	andeq	r2, r1, r8, lsl #21
   12a4c:	andeq	r2, r1, r8, lsl #21
   12a50:	andeq	r2, r1, r8, lsl #21
   12a54:	andeq	r2, r1, r8, lsl #21
   12a58:	andeq	r2, r1, r8, lsl #21
   12a5c:	andeq	r2, r1, r8, lsl #21
   12a60:	andeq	r2, r1, r8, lsl #21
   12a64:	andeq	r2, r1, r8, lsl #21
   12a68:	andeq	r2, r1, r8, lsl #21
   12a6c:	andeq	r2, r1, r8, lsl #21
   12a70:	andeq	r2, r1, r8, lsl #21
   12a74:	andeq	r2, r1, r8, lsl #21
   12a78:	andeq	r2, r1, r8, asr #21
   12a7c:	andeq	r2, r1, r0, lsl #22
   12a80:	andeq	r2, r1, r8, asr #21
   12a84:	strdeq	r2, [r1], -r0
   12a88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12a8c:	tst	r0, #1
   12a90:	bne	12d48 <__assert_fail@plt+0x1c2c>
   12a94:	ldr	r1, [fp, #16]
   12a98:	ubfx	r0, r6, #5, #3
   12a9c:	mov	r2, #1
   12aa0:	ldr	r0, [r1, r0, lsl #2]
   12aa4:	and	r1, r6, #31
   12aa8:	tst	r0, r2, lsl r1
   12aac:	beq	12d48 <__assert_fail@plt+0x1c2c>
   12ab0:	mov	r0, r6
   12ab4:	mov	r1, r8
   12ab8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12abc:	tst	r2, #1
   12ac0:	beq	12d68 <__assert_fail@plt+0x1c4c>
   12ac4:	b	134c4 <__assert_fail@plt+0x23a8>
   12ac8:	cmp	r7, #1
   12acc:	beq	12af0 <__assert_fail@plt+0x19d4>
   12ad0:	mov	r8, #0
   12ad4:	cmn	r7, #1
   12ad8:	bne	12d34 <__assert_fail@plt+0x1c18>
   12adc:	ldrb	r0, [lr, #1]
   12ae0:	cmp	r0, #0
   12ae4:	beq	12af0 <__assert_fail@plt+0x19d4>
   12ae8:	mvn	r7, #0
   12aec:	b	12d34 <__assert_fail@plt+0x1c18>
   12af0:	mov	r8, #0
   12af4:	cmp	sl, #0
   12af8:	bne	12d34 <__assert_fail@plt+0x1c18>
   12afc:	mov	r1, #1
   12b00:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12b04:	cmp	r0, #2
   12b08:	bne	12b20 <__assert_fail@plt+0x1a04>
   12b0c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b10:	mov	r8, r1
   12b14:	tst	r0, #1
   12b18:	beq	12a88 <__assert_fail@plt+0x196c>
   12b1c:	b	134c4 <__assert_fail@plt+0x23a8>
   12b20:	mov	r8, r1
   12b24:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b28:	tst	r0, #1
   12b2c:	beq	12a94 <__assert_fail@plt+0x1978>
   12b30:	b	12d48 <__assert_fail@plt+0x1c2c>
   12b34:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12b38:	cmp	r0, #2
   12b3c:	bne	12dfc <__assert_fail@plt+0x1ce0>
   12b40:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b44:	tst	r0, #1
   12b48:	bne	134c4 <__assert_fail@plt+0x23a8>
   12b4c:	mov	r0, #0
   12b50:	str	r0, [fp, #-56]	; 0xffffffc8
   12b54:	b	12e14 <__assert_fail@plt+0x1cf8>
   12b58:	mov	r0, #102	; 0x66
   12b5c:	b	12e84 <__assert_fail@plt+0x1d68>
   12b60:	mov	r2, #116	; 0x74
   12b64:	b	12b74 <__assert_fail@plt+0x1a58>
   12b68:	mov	r0, #98	; 0x62
   12b6c:	b	12e84 <__assert_fail@plt+0x1d68>
   12b70:	mov	r2, #114	; 0x72
   12b74:	ldr	r0, [sp, #64]	; 0x40
   12b78:	tst	r0, #1
   12b7c:	mov	r0, r2
   12b80:	bne	12e84 <__assert_fail@plt+0x1d68>
   12b84:	b	134c4 <__assert_fail@plt+0x23a8>
   12b88:	ldr	r0, [sp, #88]	; 0x58
   12b8c:	tst	r0, #1
   12b90:	beq	12ea4 <__assert_fail@plt+0x1d88>
   12b94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b98:	tst	r0, #1
   12b9c:	bne	13600 <__assert_fail@plt+0x24e4>
   12ba0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ba4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12ba8:	subs	r0, r0, #2
   12bac:	movwne	r0, #1
   12bb0:	orr	r0, r0, r1
   12bb4:	tst	r0, #1
   12bb8:	bne	12bf4 <__assert_fail@plt+0x1ad8>
   12bbc:	cmp	r9, r5
   12bc0:	movcc	r0, #39	; 0x27
   12bc4:	strbcc	r0, [ip, r9]
   12bc8:	add	r0, r9, #1
   12bcc:	cmp	r0, r5
   12bd0:	movcc	r1, #36	; 0x24
   12bd4:	strbcc	r1, [ip, r0]
   12bd8:	add	r0, r9, #2
   12bdc:	add	r9, r9, #3
   12be0:	cmp	r0, r5
   12be4:	movcc	r1, #39	; 0x27
   12be8:	strbcc	r1, [ip, r0]
   12bec:	mov	r0, #1
   12bf0:	str	r0, [fp, #-52]	; 0xffffffcc
   12bf4:	mov	r1, #1
   12bf8:	cmp	r9, r5
   12bfc:	mov	r8, #0
   12c00:	mov	r6, #48	; 0x30
   12c04:	str	r1, [fp, #-56]	; 0xffffffc8
   12c08:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12c0c:	movcc	r0, #92	; 0x5c
   12c10:	strbcc	r0, [ip, r9]
   12c14:	add	r0, r9, #1
   12c18:	cmp	r1, #2
   12c1c:	beq	13070 <__assert_fail@plt+0x1f54>
   12c20:	add	r1, sl, #1
   12c24:	cmp	r1, r7
   12c28:	bcs	13070 <__assert_fail@plt+0x1f54>
   12c2c:	ldrb	r1, [lr, r1]
   12c30:	sub	r1, r1, #48	; 0x30
   12c34:	uxtb	r1, r1
   12c38:	cmp	r1, #9
   12c3c:	bhi	13070 <__assert_fail@plt+0x1f54>
   12c40:	cmp	r0, r5
   12c44:	movcc	r1, #48	; 0x30
   12c48:	strbcc	r1, [ip, r0]
   12c4c:	add	r0, r9, #2
   12c50:	add	r9, r9, #3
   12c54:	cmp	r0, r5
   12c58:	movcc	r1, #48	; 0x30
   12c5c:	strbcc	r1, [ip, r0]
   12c60:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c64:	tst	r0, #1
   12c68:	beq	12a94 <__assert_fail@plt+0x1978>
   12c6c:	b	12d48 <__assert_fail@plt+0x1c2c>
   12c70:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c74:	mov	r6, #63	; 0x3f
   12c78:	cmp	r0, #5
   12c7c:	beq	13084 <__assert_fail@plt+0x1f68>
   12c80:	mov	r1, #0
   12c84:	cmp	r0, #2
   12c88:	str	r1, [fp, #-56]	; 0xffffffc8
   12c8c:	bne	1314c <__assert_fail@plt+0x2030>
   12c90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c94:	mov	r8, #0
   12c98:	tst	r0, #1
   12c9c:	beq	12a88 <__assert_fail@plt+0x196c>
   12ca0:	b	134c4 <__assert_fail@plt+0x23a8>
   12ca4:	mov	r0, #118	; 0x76
   12ca8:	b	12e84 <__assert_fail@plt+0x1d68>
   12cac:	mov	r0, #1
   12cb0:	mov	r6, #39	; 0x27
   12cb4:	str	r0, [sp, #60]	; 0x3c
   12cb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12cbc:	cmp	r0, #2
   12cc0:	bne	12ec4 <__assert_fail@plt+0x1da8>
   12cc4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12cc8:	tst	r0, #1
   12ccc:	bne	134c4 <__assert_fail@plt+0x23a8>
   12cd0:	ldr	r2, [sp, #56]	; 0x38
   12cd4:	clz	r1, r5
   12cd8:	mov	r8, #1
   12cdc:	lsr	r1, r1, #5
   12ce0:	cmp	r2, #0
   12ce4:	mov	r0, r2
   12ce8:	movwne	r0, #1
   12cec:	orrs	r0, r0, r1
   12cf0:	moveq	r2, r5
   12cf4:	moveq	r5, r0
   12cf8:	cmp	r9, r5
   12cfc:	str	r2, [sp, #56]	; 0x38
   12d00:	movcc	r0, #39	; 0x27
   12d04:	strbcc	r0, [ip, r9]
   12d08:	add	r0, r9, #1
   12d0c:	cmp	r0, r5
   12d10:	movcc	r1, #92	; 0x5c
   12d14:	strbcc	r1, [ip, r0]
   12d18:	add	r0, r9, #2
   12d1c:	add	r9, r9, #3
   12d20:	cmp	r0, r5
   12d24:	movcc	r1, #39	; 0x27
   12d28:	strbcc	r1, [ip, r0]
   12d2c:	mov	r0, #0
   12d30:	str	r0, [fp, #-52]	; 0xffffffcc
   12d34:	mov	r0, #0
   12d38:	str	r0, [fp, #-56]	; 0xffffffc8
   12d3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d40:	tst	r0, #1
   12d44:	beq	12a94 <__assert_fail@plt+0x1978>
   12d48:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12d4c:	mov	r1, r8
   12d50:	cmp	r0, #0
   12d54:	mov	r0, r6
   12d58:	beq	12e1c <__assert_fail@plt+0x1d00>
   12d5c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12d60:	tst	r2, #1
   12d64:	bne	134c4 <__assert_fail@plt+0x23a8>
   12d68:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12d6c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12d70:	subs	r2, r2, #2
   12d74:	movwne	r2, #1
   12d78:	orr	r2, r2, r3
   12d7c:	tst	r2, #1
   12d80:	bne	12dbc <__assert_fail@plt+0x1ca0>
   12d84:	cmp	r9, r5
   12d88:	movcc	r2, #39	; 0x27
   12d8c:	strbcc	r2, [ip, r9]
   12d90:	add	r2, r9, #1
   12d94:	cmp	r2, r5
   12d98:	movcc	r3, #36	; 0x24
   12d9c:	strbcc	r3, [ip, r2]
   12da0:	add	r2, r9, #2
   12da4:	add	r9, r9, #3
   12da8:	cmp	r2, r5
   12dac:	movcc	r3, #39	; 0x27
   12db0:	strbcc	r3, [ip, r2]
   12db4:	mov	r2, #1
   12db8:	str	r2, [fp, #-52]	; 0xffffffcc
   12dbc:	cmp	r9, r5
   12dc0:	movcc	r2, #92	; 0x5c
   12dc4:	strbcc	r2, [ip, r9]
   12dc8:	add	r9, r9, #1
   12dcc:	b	12e64 <__assert_fail@plt+0x1d48>
   12dd0:	ldr	r0, [sp, #40]	; 0x28
   12dd4:	cmp	r0, #1
   12dd8:	bne	12ed8 <__assert_fail@plt+0x1dbc>
   12ddc:	bl	10ffc <__ctype_b_loc@plt>
   12de0:	ldr	r0, [r0]
   12de4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12de8:	mov	r1, #1
   12dec:	add	r0, r0, r6, lsl #1
   12df0:	ldrb	r0, [r0, #1]
   12df4:	ubfx	r8, r0, #6, #1
   12df8:	b	13230 <__assert_fail@plt+0x2114>
   12dfc:	ldr	r1, [sp, #48]	; 0x30
   12e00:	mov	r0, #0
   12e04:	str	r0, [fp, #-56]	; 0xffffffc8
   12e08:	mov	r0, #92	; 0x5c
   12e0c:	cmp	r1, #0
   12e10:	beq	12e84 <__assert_fail@plt+0x1d68>
   12e14:	mov	r6, #92	; 0x5c
   12e18:	mov	r8, #0
   12e1c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12e20:	cmp	r0, #0
   12e24:	bne	12e5c <__assert_fail@plt+0x1d40>
   12e28:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12e2c:	tst	r0, #1
   12e30:	beq	12e5c <__assert_fail@plt+0x1d40>
   12e34:	cmp	r9, r5
   12e38:	movcc	r0, #39	; 0x27
   12e3c:	strbcc	r0, [ip, r9]
   12e40:	add	r0, r9, #1
   12e44:	add	r9, r9, #2
   12e48:	cmp	r0, r5
   12e4c:	movcc	r1, #39	; 0x27
   12e50:	strbcc	r1, [ip, r0]
   12e54:	mov	r0, #0
   12e58:	str	r0, [fp, #-52]	; 0xffffffcc
   12e5c:	mov	r1, r8
   12e60:	mov	r0, r6
   12e64:	cmp	r9, r5
   12e68:	and	r4, r4, r1
   12e6c:	strbcc	r0, [ip, r9]
   12e70:	add	r9, r9, #1
   12e74:	add	sl, sl, #1
   12e78:	cmn	r7, #1
   12e7c:	bne	12774 <__assert_fail@plt+0x1658>
   12e80:	b	12780 <__assert_fail@plt+0x1664>
   12e84:	mov	r1, #0
   12e88:	mov	r8, #0
   12e8c:	str	r1, [fp, #-56]	; 0xffffffc8
   12e90:	ldr	r1, [sp, #88]	; 0x58
   12e94:	tst	r1, #1
   12e98:	mov	r1, #0
   12e9c:	beq	12a88 <__assert_fail@plt+0x196c>
   12ea0:	b	12d5c <__assert_fail@plt+0x1c40>
   12ea4:	ldr	r0, [sp, #36]	; 0x24
   12ea8:	mov	r6, #0
   12eac:	mov	r8, #0
   12eb0:	cmp	r0, #0
   12eb4:	mov	r0, #0
   12eb8:	str	r0, [fp, #-56]	; 0xffffffc8
   12ebc:	bne	12e74 <__assert_fail@plt+0x1d58>
   12ec0:	b	12a88 <__assert_fail@plt+0x196c>
   12ec4:	mov	r8, #1
   12ec8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ecc:	tst	r0, #1
   12ed0:	beq	12a94 <__assert_fail@plt+0x1978>
   12ed4:	b	12d48 <__assert_fail@plt+0x1c2c>
   12ed8:	mov	r0, #0
   12edc:	cmn	r7, #1
   12ee0:	str	r0, [fp, #-36]	; 0xffffffdc
   12ee4:	str	r0, [fp, #-40]	; 0xffffffd8
   12ee8:	bne	12efc <__assert_fail@plt+0x1de0>
   12eec:	mov	r0, lr
   12ef0:	bl	11020 <strlen@plt>
   12ef4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12ef8:	mov	r7, r0
   12efc:	ldr	r0, [sp, #44]	; 0x2c
   12f00:	str	r4, [sp, #84]	; 0x54
   12f04:	str	r5, [sp, #28]
   12f08:	cmp	r0, #0
   12f0c:	beq	13160 <__assert_fail@plt+0x2044>
   12f10:	ldr	r0, [sp, #80]	; 0x50
   12f14:	mov	r8, #1
   12f18:	mov	r5, #0
   12f1c:	add	r0, r0, sl
   12f20:	str	r0, [sp, #24]
   12f24:	sub	r0, fp, #40	; 0x28
   12f28:	mov	r3, r0
   12f2c:	b	12f68 <__assert_fail@plt+0x1e4c>
   12f30:	ldr	r5, [sp, #68]	; 0x44
   12f34:	add	r5, r0, r5
   12f38:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12f3c:	bl	10f3c <iswprint@plt>
   12f40:	cmp	r0, #0
   12f44:	sub	r4, fp, #40	; 0x28
   12f48:	movwne	r0, #1
   12f4c:	and	r8, r8, r0
   12f50:	mov	r0, r4
   12f54:	bl	10f0c <mbsinit@plt>
   12f58:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12f5c:	mov	r3, r4
   12f60:	cmp	r0, #0
   12f64:	bne	13224 <__assert_fail@plt+0x2108>
   12f68:	str	r5, [sp, #68]	; 0x44
   12f6c:	add	r5, r5, sl
   12f70:	sub	r0, fp, #44	; 0x2c
   12f74:	add	r1, lr, r5
   12f78:	sub	r2, r7, r5
   12f7c:	bl	15f20 <__assert_fail@plt+0x4e04>
   12f80:	cmn	r0, #2
   12f84:	beq	131e4 <__assert_fail@plt+0x20c8>
   12f88:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f8c:	cmn	r0, #1
   12f90:	beq	131d8 <__assert_fail@plt+0x20bc>
   12f94:	cmp	r0, #0
   12f98:	beq	131dc <__assert_fail@plt+0x20c0>
   12f9c:	cmp	r0, #2
   12fa0:	bcc	12f30 <__assert_fail@plt+0x1e14>
   12fa4:	ldr	r1, [sp, #68]	; 0x44
   12fa8:	ldr	r2, [sp, #24]
   12fac:	add	r1, r2, r1
   12fb0:	sub	r2, r0, #1
   12fb4:	ldrb	r3, [r1]
   12fb8:	sub	r3, r3, #91	; 0x5b
   12fbc:	cmp	r3, #33	; 0x21
   12fc0:	bls	12fe0 <__assert_fail@plt+0x1ec4>
   12fc4:	add	r1, r1, #1
   12fc8:	subs	r2, r2, #1
   12fcc:	beq	12f30 <__assert_fail@plt+0x1e14>
   12fd0:	ldrb	r3, [r1]
   12fd4:	sub	r3, r3, #91	; 0x5b
   12fd8:	cmp	r3, #33	; 0x21
   12fdc:	bhi	12fc4 <__assert_fail@plt+0x1ea8>
   12fe0:	add	r5, pc, #0
   12fe4:	ldr	pc, [r5, r3, lsl #2]
   12fe8:	strdeq	r3, [r1], -ip
   12fec:	strdeq	r3, [r1], -ip
   12ff0:	andeq	r2, r1, r4, asr #31
   12ff4:	strdeq	r3, [r1], -ip
   12ff8:	andeq	r2, r1, r4, asr #31
   12ffc:	strdeq	r3, [r1], -ip
   13000:	andeq	r2, r1, r4, asr #31
   13004:	andeq	r2, r1, r4, asr #31
   13008:	andeq	r2, r1, r4, asr #31
   1300c:	andeq	r2, r1, r4, asr #31
   13010:	andeq	r2, r1, r4, asr #31
   13014:	andeq	r2, r1, r4, asr #31
   13018:	andeq	r2, r1, r4, asr #31
   1301c:	andeq	r2, r1, r4, asr #31
   13020:	andeq	r2, r1, r4, asr #31
   13024:	andeq	r2, r1, r4, asr #31
   13028:	andeq	r2, r1, r4, asr #31
   1302c:	andeq	r2, r1, r4, asr #31
   13030:	andeq	r2, r1, r4, asr #31
   13034:	andeq	r2, r1, r4, asr #31
   13038:	andeq	r2, r1, r4, asr #31
   1303c:	andeq	r2, r1, r4, asr #31
   13040:	andeq	r2, r1, r4, asr #31
   13044:	andeq	r2, r1, r4, asr #31
   13048:	andeq	r2, r1, r4, asr #31
   1304c:	andeq	r2, r1, r4, asr #31
   13050:	andeq	r2, r1, r4, asr #31
   13054:	andeq	r2, r1, r4, asr #31
   13058:	andeq	r2, r1, r4, asr #31
   1305c:	andeq	r2, r1, r4, asr #31
   13060:	andeq	r2, r1, r4, asr #31
   13064:	andeq	r2, r1, r4, asr #31
   13068:	andeq	r2, r1, r4, asr #31
   1306c:	strdeq	r3, [r1], -ip
   13070:	mov	r9, r0
   13074:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13078:	tst	r0, #1
   1307c:	beq	12a94 <__assert_fail@plt+0x1978>
   13080:	b	12d48 <__assert_fail@plt+0x1c2c>
   13084:	mov	r0, #0
   13088:	str	r0, [fp, #-56]	; 0xffffffc8
   1308c:	ldr	r0, [sp, #32]
   13090:	cmp	r0, #0
   13094:	beq	1314c <__assert_fail@plt+0x2030>
   13098:	add	r0, sl, #2
   1309c:	mov	r1, r7
   130a0:	cmp	r0, r7
   130a4:	bcs	1314c <__assert_fail@plt+0x2030>
   130a8:	add	r1, sl, lr
   130ac:	ldrb	r1, [r1, #1]
   130b0:	cmp	r1, #63	; 0x3f
   130b4:	bne	1314c <__assert_fail@plt+0x2030>
   130b8:	ldrb	r8, [lr, r0]
   130bc:	sub	r2, r8, #33	; 0x21
   130c0:	cmp	r2, #29
   130c4:	bhi	1314c <__assert_fail@plt+0x2030>
   130c8:	mov	r1, r4
   130cc:	movw	r4, #20929	; 0x51c1
   130d0:	mov	r3, #1
   130d4:	movt	r4, #14336	; 0x3800
   130d8:	tst	r4, r3, lsl r2
   130dc:	beq	13408 <__assert_fail@plt+0x22ec>
   130e0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   130e4:	tst	r2, #1
   130e8:	bne	134c4 <__assert_fail@plt+0x23a8>
   130ec:	cmp	r9, r5
   130f0:	mov	r6, r8
   130f4:	mov	r4, r1
   130f8:	mov	sl, r0
   130fc:	mov	r8, #0
   13100:	movcc	r2, #63	; 0x3f
   13104:	strbcc	r2, [ip, r9]
   13108:	add	r2, r9, #1
   1310c:	cmp	r2, r5
   13110:	movcc	r3, #34	; 0x22
   13114:	strbcc	r3, [ip, r2]
   13118:	add	r2, r9, #2
   1311c:	cmp	r2, r5
   13120:	movcc	r3, #34	; 0x22
   13124:	strbcc	r3, [ip, r2]
   13128:	add	r2, r9, #3
   1312c:	add	r9, r9, #4
   13130:	cmp	r2, r5
   13134:	movcc	r3, #63	; 0x3f
   13138:	strbcc	r3, [ip, r2]
   1313c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13140:	tst	r0, #1
   13144:	beq	12a94 <__assert_fail@plt+0x1978>
   13148:	b	12d48 <__assert_fail@plt+0x1c2c>
   1314c:	mov	r8, #0
   13150:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13154:	tst	r0, #1
   13158:	beq	12a94 <__assert_fail@plt+0x1978>
   1315c:	b	12d48 <__assert_fail@plt+0x1c2c>
   13160:	mov	r8, #1
   13164:	mov	r5, #0
   13168:	sub	r4, fp, #40	; 0x28
   1316c:	str	r5, [sp, #68]	; 0x44
   13170:	add	r5, r5, sl
   13174:	sub	r0, fp, #44	; 0x2c
   13178:	mov	r3, r4
   1317c:	add	r1, lr, r5
   13180:	sub	r2, r7, r5
   13184:	bl	15f20 <__assert_fail@plt+0x4e04>
   13188:	cmn	r0, #2
   1318c:	beq	131e4 <__assert_fail@plt+0x20c8>
   13190:	cmn	r0, #1
   13194:	beq	131d8 <__assert_fail@plt+0x20bc>
   13198:	ldr	r5, [sp, #68]	; 0x44
   1319c:	cmp	r0, #0
   131a0:	beq	13220 <__assert_fail@plt+0x2104>
   131a4:	add	r5, r0, r5
   131a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   131ac:	bl	10f3c <iswprint@plt>
   131b0:	cmp	r0, #0
   131b4:	sub	r4, fp, #40	; 0x28
   131b8:	movwne	r0, #1
   131bc:	and	r8, r8, r0
   131c0:	mov	r0, r4
   131c4:	bl	10f0c <mbsinit@plt>
   131c8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   131cc:	cmp	r0, #0
   131d0:	beq	1316c <__assert_fail@plt+0x2050>
   131d4:	b	13224 <__assert_fail@plt+0x2108>
   131d8:	mov	r8, #0
   131dc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   131e0:	b	13218 <__assert_fail@plt+0x20fc>
   131e4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   131e8:	mov	r8, #0
   131ec:	cmp	r5, r7
   131f0:	bcs	13218 <__assert_fail@plt+0x20fc>
   131f4:	ldrb	r0, [lr, r5]
   131f8:	cmp	r0, #0
   131fc:	beq	13218 <__assert_fail@plt+0x20fc>
   13200:	ldr	r0, [sp, #68]	; 0x44
   13204:	add	r0, r0, #1
   13208:	add	r5, r0, sl
   1320c:	str	r0, [sp, #68]	; 0x44
   13210:	cmp	r5, r7
   13214:	bcc	131f4 <__assert_fail@plt+0x20d8>
   13218:	ldr	r5, [sp, #68]	; 0x44
   1321c:	b	13224 <__assert_fail@plt+0x2108>
   13220:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13224:	mov	r1, r5
   13228:	ldr	r5, [sp, #28]
   1322c:	ldr	r4, [sp, #84]	; 0x54
   13230:	ldr	r0, [sp, #52]	; 0x34
   13234:	ldr	ip, [fp, #-84]	; 0xffffffac
   13238:	cmp	r1, #1
   1323c:	orr	r2, r8, r0
   13240:	mov	r0, r1
   13244:	bhi	13250 <__assert_fail@plt+0x2134>
   13248:	tst	r2, #1
   1324c:	bne	12a88 <__assert_fail@plt+0x196c>
   13250:	add	r0, r0, sl
   13254:	str	r2, [sp, #84]	; 0x54
   13258:	str	r0, [fp, #-56]	; 0xffffffc8
   1325c:	mov	r0, #0
   13260:	tst	r2, #1
   13264:	bne	13344 <__assert_fail@plt+0x2228>
   13268:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1326c:	tst	r1, #1
   13270:	bne	134c4 <__assert_fail@plt+0x23a8>
   13274:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13278:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1327c:	subs	r2, r1, #2
   13280:	movwne	r2, #1
   13284:	orr	r2, r2, r0
   13288:	tst	r2, #1
   1328c:	bne	132c8 <__assert_fail@plt+0x21ac>
   13290:	cmp	r9, r5
   13294:	add	r2, r9, #1
   13298:	mov	r0, #1
   1329c:	movcc	r1, #39	; 0x27
   132a0:	str	r0, [fp, #-52]	; 0xffffffcc
   132a4:	strbcc	r1, [ip, r9]
   132a8:	cmp	r2, r5
   132ac:	movcc	r1, #36	; 0x24
   132b0:	strbcc	r1, [ip, r2]
   132b4:	add	r2, r9, #2
   132b8:	add	r9, r9, #3
   132bc:	cmp	r2, r5
   132c0:	movcc	r1, #39	; 0x27
   132c4:	strbcc	r1, [ip, r2]
   132c8:	cmp	r9, r5
   132cc:	add	r2, r9, #1
   132d0:	movcc	r1, #92	; 0x5c
   132d4:	strbcc	r1, [ip, r9]
   132d8:	cmp	r2, r5
   132dc:	bcs	132f0 <__assert_fail@plt+0x21d4>
   132e0:	uxtb	r3, r6
   132e4:	mov	r1, #48	; 0x30
   132e8:	orr	r3, r1, r3, lsr #6
   132ec:	strb	r3, [ip, r2]
   132f0:	add	r2, r9, #2
   132f4:	add	r9, r9, #3
   132f8:	cmp	r2, r5
   132fc:	lsrcc	r3, r6, #3
   13300:	movcc	r1, #6
   13304:	bficc	r3, r1, #3, #29
   13308:	mov	r1, #6
   1330c:	bfi	r6, r1, #3, #29
   13310:	strbcc	r3, [ip, r2]
   13314:	mov	r2, #1
   13318:	b	13378 <__assert_fail@plt+0x225c>
   1331c:	ldr	r1, [sp, #80]	; 0x50
   13320:	cmp	r9, r2
   13324:	mov	r5, r2
   13328:	ldr	r2, [sp, #84]	; 0x54
   1332c:	strbcc	r6, [ip, r9]
   13330:	add	r9, r9, #1
   13334:	ldrb	r6, [r1, sl]
   13338:	mov	sl, r3
   1333c:	tst	r2, #1
   13340:	beq	13268 <__assert_fail@plt+0x214c>
   13344:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13348:	tst	r1, #1
   1334c:	beq	1336c <__assert_fail@plt+0x2250>
   13350:	cmp	r9, r5
   13354:	mov	r2, r0
   13358:	movcc	r1, #92	; 0x5c
   1335c:	strbcc	r1, [ip, r9]
   13360:	add	r9, r9, #1
   13364:	mov	r1, #0
   13368:	b	13374 <__assert_fail@plt+0x2258>
   1336c:	mov	r1, #0
   13370:	mov	r2, r0
   13374:	str	r1, [fp, #-48]	; 0xffffffd0
   13378:	mov	r0, r2
   1337c:	and	r1, r2, #1
   13380:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13384:	add	r3, sl, #1
   13388:	cmp	r2, r3
   1338c:	bls	133ec <__assert_fail@plt+0x22d0>
   13390:	mov	r2, r5
   13394:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13398:	cmp	r1, #0
   1339c:	movwne	r1, #1
   133a0:	mvn	r5, r5
   133a4:	orr	r5, r5, r1
   133a8:	tst	r5, #1
   133ac:	bne	1331c <__assert_fail@plt+0x2200>
   133b0:	cmp	r9, r2
   133b4:	movcc	r5, r4
   133b8:	movcc	r4, #39	; 0x27
   133bc:	strbcc	r4, [ip, r9]
   133c0:	movcc	r4, r5
   133c4:	add	r5, r9, #1
   133c8:	add	r9, r9, #2
   133cc:	cmp	r5, r2
   133d0:	movcc	r1, r4
   133d4:	movcc	r4, #39	; 0x27
   133d8:	strbcc	r4, [ip, r5]
   133dc:	movcc	r4, r1
   133e0:	mov	r1, #0
   133e4:	str	r1, [fp, #-52]	; 0xffffffcc
   133e8:	b	1331c <__assert_fail@plt+0x2200>
   133ec:	cmp	r1, #0
   133f0:	movwne	r1, #1
   133f4:	str	r1, [fp, #-56]	; 0xffffffc8
   133f8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   133fc:	cmp	r0, #0
   13400:	beq	12e28 <__assert_fail@plt+0x1d0c>
   13404:	b	12e5c <__assert_fail@plt+0x1d40>
   13408:	mov	r8, #0
   1340c:	mov	r4, r1
   13410:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13414:	tst	r0, #1
   13418:	beq	12a94 <__assert_fail@plt+0x1978>
   1341c:	b	12d48 <__assert_fail@plt+0x1c2c>
   13420:	mov	r7, sl
   13424:	b	1342c <__assert_fail@plt+0x2310>
   13428:	mvn	r7, #0
   1342c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13430:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13434:	ldr	r2, [sp, #88]	; 0x58
   13438:	eor	r0, r1, #2
   1343c:	orr	r0, r0, r9
   13440:	clz	r0, r0
   13444:	lsr	r0, r0, #5
   13448:	tst	r3, r0
   1344c:	bne	134c4 <__assert_fail@plt+0x23a8>
   13450:	subs	r0, r1, #2
   13454:	movwne	r0, #1
   13458:	orr	r0, r3, r0
   1345c:	tst	r0, #1
   13460:	ldreq	r0, [sp, #60]	; 0x3c
   13464:	eoreq	r0, r0, #1
   13468:	tsteq	r0, #1
   1346c:	bne	135a0 <__assert_fail@plt+0x2484>
   13470:	tst	r4, #1
   13474:	bne	13564 <__assert_fail@plt+0x2448>
   13478:	ldr	r6, [sp, #56]	; 0x38
   1347c:	mov	r8, #0
   13480:	cmp	r6, #0
   13484:	beq	1359c <__assert_fail@plt+0x2480>
   13488:	mov	r1, #0
   1348c:	mov	r4, #2
   13490:	cmp	r5, #0
   13494:	mov	r0, r2
   13498:	mov	r3, #0
   1349c:	str	r1, [sp, #84]	; 0x54
   134a0:	beq	122e8 <__assert_fail@plt+0x11cc>
   134a4:	b	135a0 <__assert_fail@plt+0x2484>
   134a8:	movw	r0, #27644	; 0x6bfc
   134ac:	movt	r0, #1
   134b0:	str	r0, [sp, #76]	; 0x4c
   134b4:	mov	r9, #0
   134b8:	tst	r8, #1
   134bc:	beq	12580 <__assert_fail@plt+0x1464>
   134c0:	b	126c0 <__assert_fail@plt+0x15a4>
   134c4:	ldr	r1, [sp, #88]	; 0x58
   134c8:	mov	r0, #2
   134cc:	tst	r1, #1
   134d0:	movwne	r0, #4
   134d4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   134d8:	ldr	r1, [fp, #12]
   134dc:	cmp	r2, #2
   134e0:	moveq	r2, r0
   134e4:	b	1351c <__assert_fail@plt+0x2400>
   134e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   134ec:	ldr	lr, [fp, #-80]	; 0xffffffb0
   134f0:	ldr	r1, [fp, #12]
   134f4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   134f8:	b	1351c <__assert_fail@plt+0x2400>
   134fc:	ldr	r1, [sp, #88]	; 0x58
   13500:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13504:	ldr	r5, [sp, #28]
   13508:	mov	r0, #2
   1350c:	tst	r1, #1
   13510:	ldr	r1, [fp, #12]
   13514:	movwne	r0, #4
   13518:	mov	r2, r0
   1351c:	mov	r0, #0
   13520:	bic	r1, r1, #2
   13524:	str	r2, [sp]
   13528:	mov	r2, lr
   1352c:	str	r0, [sp, #8]
   13530:	ldr	r0, [sp, #72]	; 0x48
   13534:	str	r1, [sp, #4]
   13538:	mov	r1, r5
   1353c:	str	r0, [sp, #12]
   13540:	ldr	r0, [sp, #76]	; 0x4c
   13544:	str	r0, [sp, #16]
   13548:	mov	r0, ip
   1354c:	mov	r3, r7
   13550:	bl	1225c <__assert_fail@plt+0x1140>
   13554:	mov	r9, r0
   13558:	mov	r0, r9
   1355c:	sub	sp, fp, #28
   13560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13564:	mov	r0, #5
   13568:	ldr	r1, [sp, #56]	; 0x38
   1356c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13570:	str	r0, [sp]
   13574:	ldr	r0, [fp, #12]
   13578:	str	r0, [sp, #4]
   1357c:	ldr	r0, [fp, #16]
   13580:	str	r0, [sp, #8]
   13584:	ldr	r0, [sp, #72]	; 0x48
   13588:	str	r0, [sp, #12]
   1358c:	ldr	r0, [sp, #76]	; 0x4c
   13590:	str	r0, [sp, #16]
   13594:	ldr	r0, [fp, #-84]	; 0xffffffac
   13598:	b	1354c <__assert_fail@plt+0x2430>
   1359c:	mov	r3, #0
   135a0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   135a4:	cmp	r1, #0
   135a8:	beq	135e4 <__assert_fail@plt+0x24c8>
   135ac:	ldr	r2, [fp, #-84]	; 0xffffffac
   135b0:	tst	r3, #1
   135b4:	bne	135e8 <__assert_fail@plt+0x24cc>
   135b8:	ldrb	r0, [r1]
   135bc:	cmp	r0, #0
   135c0:	beq	135e8 <__assert_fail@plt+0x24cc>
   135c4:	add	r1, r1, #1
   135c8:	cmp	r9, r5
   135cc:	strbcc	r0, [r2, r9]
   135d0:	add	r9, r9, #1
   135d4:	ldrb	r0, [r1], #1
   135d8:	cmp	r0, #0
   135dc:	bne	135c8 <__assert_fail@plt+0x24ac>
   135e0:	b	135e8 <__assert_fail@plt+0x24cc>
   135e4:	ldr	r2, [fp, #-84]	; 0xffffffac
   135e8:	cmp	r9, r5
   135ec:	movcc	r0, #0
   135f0:	strbcc	r0, [r2, r9]
   135f4:	mov	r0, r9
   135f8:	sub	sp, fp, #28
   135fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13600:	mov	r0, #4
   13604:	b	134d4 <__assert_fail@plt+0x23b8>
   13608:	bl	11104 <abort@plt>
   1360c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13610:	add	fp, sp, #28
   13614:	sub	sp, sp, #28
   13618:	movw	r5, #33176	; 0x8198
   1361c:	cmp	r2, #0
   13620:	mov	r4, r1
   13624:	mov	r7, r0
   13628:	str	r0, [sp, #20]
   1362c:	movt	r5, #2
   13630:	movne	r5, r2
   13634:	bl	11038 <__errno_location@plt>
   13638:	mov	sl, r0
   1363c:	ldr	r2, [r5, #40]	; 0x28
   13640:	ldr	r3, [r5, #44]	; 0x2c
   13644:	ldm	r5, {r0, r1}
   13648:	orr	r8, r1, #1
   1364c:	add	r9, r5, #8
   13650:	mov	r1, #0
   13654:	ldr	r6, [sl]
   13658:	stm	sp, {r0, r8, r9}
   1365c:	mov	r0, #0
   13660:	str	r2, [sp, #12]
   13664:	str	r3, [sp, #16]
   13668:	mov	r2, r7
   1366c:	mov	r3, r4
   13670:	str	r6, [sp, #24]
   13674:	mov	r6, r4
   13678:	bl	1225c <__assert_fail@plt+0x1140>
   1367c:	add	r7, r0, #1
   13680:	mov	r0, r7
   13684:	bl	146ec <__assert_fail@plt+0x35d0>
   13688:	mov	r4, r0
   1368c:	ldr	r0, [r5]
   13690:	ldr	r2, [r5, #44]	; 0x2c
   13694:	ldr	r1, [r5, #40]	; 0x28
   13698:	mov	r3, r6
   1369c:	stm	sp, {r0, r8, r9}
   136a0:	str	r2, [sp, #16]
   136a4:	ldr	r2, [sp, #20]
   136a8:	str	r1, [sp, #12]
   136ac:	mov	r0, r4
   136b0:	mov	r1, r7
   136b4:	bl	1225c <__assert_fail@plt+0x1140>
   136b8:	ldr	r0, [sp, #24]
   136bc:	str	r0, [sl]
   136c0:	mov	r0, r4
   136c4:	sub	sp, fp, #28
   136c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136d0:	add	fp, sp, #28
   136d4:	sub	sp, sp, #36	; 0x24
   136d8:	movw	r8, #33176	; 0x8198
   136dc:	cmp	r3, #0
   136e0:	mov	r4, r2
   136e4:	str	r2, [sp, #24]
   136e8:	mov	r5, r1
   136ec:	mov	r6, r0
   136f0:	str	r0, [sp, #20]
   136f4:	movt	r8, #2
   136f8:	movne	r8, r3
   136fc:	bl	11038 <__errno_location@plt>
   13700:	str	r0, [sp, #28]
   13704:	ldr	r1, [r8, #40]	; 0x28
   13708:	ldr	r2, [r8, #44]	; 0x2c
   1370c:	ldr	r7, [r0]
   13710:	cmp	r4, #0
   13714:	add	sl, r8, #8
   13718:	mov	r0, #0
   1371c:	ldm	r8, {r3, r9}
   13720:	orreq	r9, r9, #1
   13724:	stm	sp, {r3, r9, sl}
   13728:	str	r1, [sp, #12]
   1372c:	str	r2, [sp, #16]
   13730:	mov	r1, #0
   13734:	mov	r2, r6
   13738:	mov	r3, r5
   1373c:	str	r7, [sp, #32]
   13740:	mov	r7, r5
   13744:	bl	1225c <__assert_fail@plt+0x1140>
   13748:	add	r4, r0, #1
   1374c:	mov	r5, r0
   13750:	mov	r0, r4
   13754:	bl	146ec <__assert_fail@plt+0x35d0>
   13758:	mov	r6, r0
   1375c:	ldr	r0, [r8]
   13760:	ldr	r2, [r8, #44]	; 0x2c
   13764:	ldr	r1, [r8, #40]	; 0x28
   13768:	mov	r3, r7
   1376c:	stm	sp, {r0, r9, sl}
   13770:	str	r2, [sp, #16]
   13774:	ldr	r2, [sp, #20]
   13778:	str	r1, [sp, #12]
   1377c:	mov	r0, r6
   13780:	mov	r1, r4
   13784:	bl	1225c <__assert_fail@plt+0x1140>
   13788:	ldr	r0, [sp, #24]
   1378c:	ldr	r1, [sp, #32]
   13790:	ldr	r2, [sp, #28]
   13794:	cmp	r0, #0
   13798:	str	r1, [r2]
   1379c:	strne	r5, [r0]
   137a0:	mov	r0, r6
   137a4:	sub	sp, fp, #28
   137a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137ac:	push	{r4, r5, r6, r7, fp, lr}
   137b0:	add	fp, sp, #16
   137b4:	movw	r4, #33072	; 0x8130
   137b8:	movt	r4, #2
   137bc:	ldrd	r6, [r4]
   137c0:	cmp	r7, #2
   137c4:	blt	137f0 <__assert_fail@plt+0x26d4>
   137c8:	add	r5, r6, #12
   137cc:	mov	r7, #0
   137d0:	ldr	r0, [r5, r7, lsl #3]
   137d4:	bl	11ff8 <__assert_fail@plt+0xedc>
   137d8:	ldr	r1, [r4, #4]
   137dc:	add	r2, r7, #2
   137e0:	add	r0, r7, #1
   137e4:	mov	r7, r0
   137e8:	cmp	r2, r1
   137ec:	blt	137d0 <__assert_fail@plt+0x26b4>
   137f0:	ldr	r0, [r6, #4]
   137f4:	movw	r5, #33224	; 0x81c8
   137f8:	movt	r5, #2
   137fc:	cmp	r0, r5
   13800:	beq	13814 <__assert_fail@plt+0x26f8>
   13804:	bl	11ff8 <__assert_fail@plt+0xedc>
   13808:	mov	r0, #256	; 0x100
   1380c:	str	r0, [r4, #8]
   13810:	str	r5, [r4, #12]
   13814:	add	r5, r4, #8
   13818:	cmp	r6, r5
   1381c:	beq	1382c <__assert_fail@plt+0x2710>
   13820:	mov	r0, r6
   13824:	bl	11ff8 <__assert_fail@plt+0xedc>
   13828:	str	r5, [r4]
   1382c:	mov	r0, #1
   13830:	str	r0, [r4, #4]
   13834:	pop	{r4, r5, r6, r7, fp, pc}
   13838:	movw	r3, #33176	; 0x8198
   1383c:	mvn	r2, #0
   13840:	movt	r3, #2
   13844:	b	13848 <__assert_fail@plt+0x272c>
   13848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1384c:	add	fp, sp, #28
   13850:	sub	sp, sp, #44	; 0x2c
   13854:	mov	r7, r3
   13858:	str	r2, [sp, #36]	; 0x24
   1385c:	str	r1, [sp, #32]
   13860:	mov	r5, r0
   13864:	bl	11038 <__errno_location@plt>
   13868:	cmp	r5, #0
   1386c:	bmi	139d4 <__assert_fail@plt+0x28b8>
   13870:	cmn	r5, #-2147483647	; 0x80000001
   13874:	beq	139d4 <__assert_fail@plt+0x28b8>
   13878:	movw	r8, #33072	; 0x8130
   1387c:	mov	r4, r0
   13880:	ldr	r0, [r0]
   13884:	movt	r8, #2
   13888:	str	r4, [sp, #28]
   1388c:	ldr	r1, [r8, #4]
   13890:	ldr	r6, [r8]
   13894:	str	r0, [sp, #24]
   13898:	cmp	r1, r5
   1389c:	ble	138a8 <__assert_fail@plt+0x278c>
   138a0:	mov	sl, r6
   138a4:	b	13910 <__assert_fail@plt+0x27f4>
   138a8:	mov	r0, #8
   138ac:	add	r9, r8, #8
   138b0:	str	r1, [fp, #-32]	; 0xffffffe0
   138b4:	sub	r1, r5, r1
   138b8:	mvn	r3, #-2147483648	; 0x80000000
   138bc:	str	r0, [sp]
   138c0:	subs	r0, r6, r9
   138c4:	add	r2, r1, #1
   138c8:	sub	r1, fp, #32
   138cc:	movne	r0, r6
   138d0:	bl	148ec <__assert_fail@plt+0x37d0>
   138d4:	mov	sl, r0
   138d8:	cmp	r6, r9
   138dc:	str	r0, [r8]
   138e0:	bne	138ec <__assert_fail@plt+0x27d0>
   138e4:	ldrd	r0, [r8, #8]
   138e8:	stm	sl, {r0, r1}
   138ec:	ldr	r1, [r8, #4]
   138f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   138f4:	add	r0, sl, r1, lsl #3
   138f8:	sub	r1, r2, r1
   138fc:	lsl	r2, r1, #3
   13900:	mov	r1, #0
   13904:	bl	11050 <memset@plt>
   13908:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1390c:	str	r0, [r8, #4]
   13910:	mov	r9, sl
   13914:	ldm	r7, {r0, r1}
   13918:	orr	r8, r1, #1
   1391c:	add	r1, r7, #8
   13920:	ldr	r2, [r7, #40]	; 0x28
   13924:	ldr	r3, [r7, #44]	; 0x2c
   13928:	ldr	r6, [r9, r5, lsl #3]!
   1392c:	str	r1, [sp, #20]
   13930:	ldr	r4, [r9, #4]!
   13934:	stm	sp, {r0, r8}
   13938:	add	r0, sp, #8
   1393c:	stm	r0, {r1, r2, r3}
   13940:	ldr	r2, [sp, #32]
   13944:	ldr	r3, [sp, #36]	; 0x24
   13948:	mov	r1, r6
   1394c:	mov	r0, r4
   13950:	bl	1225c <__assert_fail@plt+0x1140>
   13954:	cmp	r6, r0
   13958:	bhi	139bc <__assert_fail@plt+0x28a0>
   1395c:	add	r6, r0, #1
   13960:	movw	r0, #33224	; 0x81c8
   13964:	movt	r0, #2
   13968:	str	r6, [sl, r5, lsl #3]
   1396c:	cmp	r4, r0
   13970:	beq	1397c <__assert_fail@plt+0x2860>
   13974:	mov	r0, r4
   13978:	bl	11ff8 <__assert_fail@plt+0xedc>
   1397c:	mov	r0, r6
   13980:	bl	146ec <__assert_fail@plt+0x35d0>
   13984:	str	r0, [r9]
   13988:	mov	r4, r0
   1398c:	add	r3, sp, #8
   13990:	ldr	r0, [r7]
   13994:	ldr	r1, [r7, #40]	; 0x28
   13998:	ldr	r2, [r7, #44]	; 0x2c
   1399c:	stm	sp, {r0, r8}
   139a0:	ldr	r0, [sp, #20]
   139a4:	stm	r3, {r0, r1, r2}
   139a8:	ldr	r2, [sp, #32]
   139ac:	ldr	r3, [sp, #36]	; 0x24
   139b0:	mov	r0, r4
   139b4:	mov	r1, r6
   139b8:	bl	1225c <__assert_fail@plt+0x1140>
   139bc:	ldr	r1, [sp, #24]
   139c0:	ldr	r0, [sp, #28]
   139c4:	str	r1, [r0]
   139c8:	mov	r0, r4
   139cc:	sub	sp, fp, #28
   139d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139d4:	bl	11104 <abort@plt>
   139d8:	movw	r3, #33176	; 0x8198
   139dc:	movt	r3, #2
   139e0:	b	13848 <__assert_fail@plt+0x272c>
   139e4:	movw	r3, #33176	; 0x8198
   139e8:	mov	r1, r0
   139ec:	mov	r0, #0
   139f0:	mvn	r2, #0
   139f4:	movt	r3, #2
   139f8:	b	13848 <__assert_fail@plt+0x272c>
   139fc:	movw	r3, #33176	; 0x8198
   13a00:	mov	r2, r1
   13a04:	mov	r1, r0
   13a08:	mov	r0, #0
   13a0c:	movt	r3, #2
   13a10:	b	13848 <__assert_fail@plt+0x272c>
   13a14:	push	{fp, lr}
   13a18:	mov	fp, sp
   13a1c:	sub	sp, sp, #48	; 0x30
   13a20:	vmov.i32	q8, #0	; 0x00000000
   13a24:	mov	ip, #32
   13a28:	mov	r3, sp
   13a2c:	mov	lr, r2
   13a30:	cmp	r1, #10
   13a34:	add	r2, r3, #16
   13a38:	vst1.64	{d16-d17}, [r3], ip
   13a3c:	vst1.64	{d16-d17}, [r2]
   13a40:	vst1.64	{d16-d17}, [r3]
   13a44:	beq	13a64 <__assert_fail@plt+0x2948>
   13a48:	str	r1, [sp]
   13a4c:	mov	r3, sp
   13a50:	mov	r1, lr
   13a54:	mvn	r2, #0
   13a58:	bl	13848 <__assert_fail@plt+0x272c>
   13a5c:	mov	sp, fp
   13a60:	pop	{fp, pc}
   13a64:	bl	11104 <abort@plt>
   13a68:	push	{r4, sl, fp, lr}
   13a6c:	add	fp, sp, #8
   13a70:	sub	sp, sp, #48	; 0x30
   13a74:	vmov.i32	q8, #0	; 0x00000000
   13a78:	mov	ip, r3
   13a7c:	mov	r3, sp
   13a80:	mov	lr, #32
   13a84:	cmp	r1, #10
   13a88:	add	r4, r3, #16
   13a8c:	vst1.64	{d16-d17}, [r3], lr
   13a90:	vst1.64	{d16-d17}, [r4]
   13a94:	vst1.64	{d16-d17}, [r3]
   13a98:	beq	13ab8 <__assert_fail@plt+0x299c>
   13a9c:	str	r1, [sp]
   13aa0:	mov	r1, r2
   13aa4:	mov	r3, sp
   13aa8:	mov	r2, ip
   13aac:	bl	13848 <__assert_fail@plt+0x272c>
   13ab0:	sub	sp, fp, #8
   13ab4:	pop	{r4, sl, fp, pc}
   13ab8:	bl	11104 <abort@plt>
   13abc:	push	{fp, lr}
   13ac0:	mov	fp, sp
   13ac4:	sub	sp, sp, #48	; 0x30
   13ac8:	vmov.i32	q8, #0	; 0x00000000
   13acc:	mov	r3, sp
   13ad0:	mov	ip, #32
   13ad4:	cmp	r0, #10
   13ad8:	add	r2, r3, #16
   13adc:	vst1.64	{d16-d17}, [r3], ip
   13ae0:	vst1.64	{d16-d17}, [r2]
   13ae4:	vst1.64	{d16-d17}, [r3]
   13ae8:	beq	13b08 <__assert_fail@plt+0x29ec>
   13aec:	str	r0, [sp]
   13af0:	mov	r3, sp
   13af4:	mov	r0, #0
   13af8:	mvn	r2, #0
   13afc:	bl	13848 <__assert_fail@plt+0x272c>
   13b00:	mov	sp, fp
   13b04:	pop	{fp, pc}
   13b08:	bl	11104 <abort@plt>
   13b0c:	push	{fp, lr}
   13b10:	mov	fp, sp
   13b14:	sub	sp, sp, #48	; 0x30
   13b18:	vmov.i32	q8, #0	; 0x00000000
   13b1c:	mov	r3, sp
   13b20:	mov	ip, #32
   13b24:	cmp	r0, #10
   13b28:	add	lr, r3, #16
   13b2c:	vst1.64	{d16-d17}, [r3], ip
   13b30:	vst1.64	{d16-d17}, [lr]
   13b34:	vst1.64	{d16-d17}, [r3]
   13b38:	beq	13b54 <__assert_fail@plt+0x2a38>
   13b3c:	str	r0, [sp]
   13b40:	mov	r3, sp
   13b44:	mov	r0, #0
   13b48:	bl	13848 <__assert_fail@plt+0x272c>
   13b4c:	mov	sp, fp
   13b50:	pop	{fp, pc}
   13b54:	bl	11104 <abort@plt>
   13b58:	push	{r4, sl, fp, lr}
   13b5c:	add	fp, sp, #8
   13b60:	sub	sp, sp, #48	; 0x30
   13b64:	mov	lr, r0
   13b68:	movw	r0, #33176	; 0x8198
   13b6c:	mov	ip, r1
   13b70:	mov	r1, #32
   13b74:	mov	r4, #1
   13b78:	movt	r0, #2
   13b7c:	add	r3, r0, #16
   13b80:	vld1.64	{d16-d17}, [r0], r1
   13b84:	vld1.64	{d20-d21}, [r0]
   13b88:	vld1.64	{d18-d19}, [r3]
   13b8c:	mov	r3, sp
   13b90:	add	r0, r3, #32
   13b94:	add	r1, r3, #16
   13b98:	vst1.64	{d20-d21}, [r0]
   13b9c:	mov	r0, #28
   13ba0:	vst1.64	{d18-d19}, [r1]
   13ba4:	mov	r1, r3
   13ba8:	and	r0, r0, r2, lsr #3
   13bac:	and	r2, r2, #31
   13bb0:	vst1.64	{d16-d17}, [r1], r0
   13bb4:	ldr	r0, [r1, #8]
   13bb8:	bic	r4, r4, r0, lsr r2
   13bbc:	eor	r0, r0, r4, lsl r2
   13bc0:	mov	r2, ip
   13bc4:	str	r0, [r1, #8]
   13bc8:	mov	r0, #0
   13bcc:	mov	r1, lr
   13bd0:	bl	13848 <__assert_fail@plt+0x272c>
   13bd4:	sub	sp, fp, #8
   13bd8:	pop	{r4, sl, fp, pc}
   13bdc:	push	{fp, lr}
   13be0:	mov	fp, sp
   13be4:	sub	sp, sp, #48	; 0x30
   13be8:	mov	ip, r0
   13bec:	movw	r0, #33176	; 0x8198
   13bf0:	mov	r2, #32
   13bf4:	movt	r0, #2
   13bf8:	add	r3, r0, #16
   13bfc:	vld1.64	{d16-d17}, [r0], r2
   13c00:	vld1.64	{d20-d21}, [r0]
   13c04:	vld1.64	{d18-d19}, [r3]
   13c08:	mov	r3, sp
   13c0c:	add	r0, r3, #32
   13c10:	add	r2, r3, #16
   13c14:	vst1.64	{d20-d21}, [r0]
   13c18:	mov	r0, #28
   13c1c:	vst1.64	{d18-d19}, [r2]
   13c20:	mov	r2, r3
   13c24:	and	r0, r0, r1, lsr #3
   13c28:	and	r1, r1, #31
   13c2c:	vst1.64	{d16-d17}, [r2], r0
   13c30:	mov	r0, #1
   13c34:	ldr	lr, [r2, #8]
   13c38:	bic	r0, r0, lr, lsr r1
   13c3c:	eor	r0, lr, r0, lsl r1
   13c40:	mov	r1, ip
   13c44:	str	r0, [r2, #8]
   13c48:	mov	r0, #0
   13c4c:	mvn	r2, #0
   13c50:	bl	13848 <__assert_fail@plt+0x272c>
   13c54:	mov	sp, fp
   13c58:	pop	{fp, pc}
   13c5c:	push	{fp, lr}
   13c60:	mov	fp, sp
   13c64:	sub	sp, sp, #48	; 0x30
   13c68:	mov	r1, r0
   13c6c:	movw	r0, #33176	; 0x8198
   13c70:	mov	r3, #32
   13c74:	movt	r0, #2
   13c78:	add	r2, r0, #16
   13c7c:	vld1.64	{d16-d17}, [r0], r3
   13c80:	mov	r3, sp
   13c84:	vld1.64	{d18-d19}, [r2]
   13c88:	vld1.64	{d20-d21}, [r0]
   13c8c:	add	r2, r3, #16
   13c90:	add	r0, r3, #32
   13c94:	vst1.64	{d18-d19}, [r2]
   13c98:	vst1.64	{d20-d21}, [r0]
   13c9c:	mov	r0, #12
   13ca0:	mov	r2, r3
   13ca4:	vst1.64	{d16-d17}, [r2], r0
   13ca8:	ldr	r0, [r2]
   13cac:	orr	r0, r0, #67108864	; 0x4000000
   13cb0:	str	r0, [r2]
   13cb4:	mov	r0, #0
   13cb8:	mvn	r2, #0
   13cbc:	bl	13848 <__assert_fail@plt+0x272c>
   13cc0:	mov	sp, fp
   13cc4:	pop	{fp, pc}
   13cc8:	push	{fp, lr}
   13ccc:	mov	fp, sp
   13cd0:	sub	sp, sp, #48	; 0x30
   13cd4:	mov	ip, r1
   13cd8:	mov	r1, r0
   13cdc:	movw	r0, #33176	; 0x8198
   13ce0:	mov	r2, #32
   13ce4:	movt	r0, #2
   13ce8:	add	r3, r0, #16
   13cec:	vld1.64	{d16-d17}, [r0], r2
   13cf0:	vld1.64	{d18-d19}, [r3]
   13cf4:	vld1.64	{d20-d21}, [r0]
   13cf8:	mov	r3, sp
   13cfc:	add	r2, r3, #16
   13d00:	add	r0, r3, #32
   13d04:	vst1.64	{d18-d19}, [r2]
   13d08:	vst1.64	{d20-d21}, [r0]
   13d0c:	mov	r0, #12
   13d10:	mov	r2, r3
   13d14:	vst1.64	{d16-d17}, [r2], r0
   13d18:	ldr	r0, [r2]
   13d1c:	orr	r0, r0, #67108864	; 0x4000000
   13d20:	str	r0, [r2]
   13d24:	mov	r0, #0
   13d28:	mov	r2, ip
   13d2c:	bl	13848 <__assert_fail@plt+0x272c>
   13d30:	mov	sp, fp
   13d34:	pop	{fp, pc}
   13d38:	push	{r4, sl, fp, lr}
   13d3c:	add	fp, sp, #8
   13d40:	sub	sp, sp, #96	; 0x60
   13d44:	vmov.i32	q8, #0	; 0x00000000
   13d48:	mov	ip, r2
   13d4c:	mov	r2, sp
   13d50:	mov	r4, #28
   13d54:	cmp	r1, #10
   13d58:	mov	r3, r2
   13d5c:	add	lr, r2, #16
   13d60:	vst1.64	{d16-d17}, [r3], r4
   13d64:	vst1.64	{d16-d17}, [lr]
   13d68:	vst1.32	{d16-d17}, [r3]
   13d6c:	beq	13dbc <__assert_fail@plt+0x2ca0>
   13d70:	vld1.64	{d16-d17}, [r2], r4
   13d74:	vld1.64	{d18-d19}, [lr]
   13d78:	add	r3, sp, #48	; 0x30
   13d7c:	vld1.32	{d20-d21}, [r2]
   13d80:	add	r2, r3, #20
   13d84:	add	r4, r3, #4
   13d88:	vst1.32	{d18-d19}, [r2]
   13d8c:	add	r2, r3, #32
   13d90:	vst1.32	{d16-d17}, [r4]
   13d94:	vst1.32	{d20-d21}, [r2]
   13d98:	str	r1, [sp, #48]	; 0x30
   13d9c:	mvn	r2, #0
   13da0:	ldr	r1, [sp, #60]	; 0x3c
   13da4:	orr	r1, r1, #67108864	; 0x4000000
   13da8:	str	r1, [sp, #60]	; 0x3c
   13dac:	mov	r1, ip
   13db0:	bl	13848 <__assert_fail@plt+0x272c>
   13db4:	sub	sp, fp, #8
   13db8:	pop	{r4, sl, fp, pc}
   13dbc:	bl	11104 <abort@plt>
   13dc0:	push	{r4, r5, r6, sl, fp, lr}
   13dc4:	add	fp, sp, #16
   13dc8:	sub	sp, sp, #48	; 0x30
   13dcc:	mov	ip, r3
   13dd0:	movw	r3, #33176	; 0x8198
   13dd4:	mov	r6, #32
   13dd8:	cmp	r1, #0
   13ddc:	mov	r4, sp
   13de0:	movt	r3, #2
   13de4:	cmpne	r2, #0
   13de8:	add	r5, r4, #16
   13dec:	add	lr, r3, #16
   13df0:	vld1.64	{d16-d17}, [r3], r6
   13df4:	vld1.64	{d18-d19}, [lr]
   13df8:	vld1.64	{d20-d21}, [r3]
   13dfc:	mov	r3, #10
   13e00:	vst1.64	{d16-d17}, [r4], r6
   13e04:	vst1.64	{d18-d19}, [r5]
   13e08:	vst1.64	{d20-d21}, [r4]
   13e0c:	str	r3, [sp]
   13e10:	bne	13e18 <__assert_fail@plt+0x2cfc>
   13e14:	bl	11104 <abort@plt>
   13e18:	str	r2, [sp, #44]	; 0x2c
   13e1c:	str	r1, [sp, #40]	; 0x28
   13e20:	mov	r3, sp
   13e24:	mov	r1, ip
   13e28:	mvn	r2, #0
   13e2c:	bl	13848 <__assert_fail@plt+0x272c>
   13e30:	sub	sp, fp, #16
   13e34:	pop	{r4, r5, r6, sl, fp, pc}
   13e38:	push	{r4, r5, r6, sl, fp, lr}
   13e3c:	add	fp, sp, #16
   13e40:	sub	sp, sp, #48	; 0x30
   13e44:	mov	lr, r3
   13e48:	movw	r3, #33176	; 0x8198
   13e4c:	mov	r6, #32
   13e50:	cmp	r1, #0
   13e54:	mov	r4, sp
   13e58:	movt	r3, #2
   13e5c:	cmpne	r2, #0
   13e60:	add	r5, r4, #16
   13e64:	add	ip, r3, #16
   13e68:	vld1.64	{d16-d17}, [r3], r6
   13e6c:	vld1.64	{d18-d19}, [ip]
   13e70:	vld1.64	{d20-d21}, [r3]
   13e74:	mov	r3, #10
   13e78:	vst1.64	{d16-d17}, [r4], r6
   13e7c:	vst1.64	{d18-d19}, [r5]
   13e80:	vst1.64	{d20-d21}, [r4]
   13e84:	str	r3, [sp]
   13e88:	bne	13e90 <__assert_fail@plt+0x2d74>
   13e8c:	bl	11104 <abort@plt>
   13e90:	ldr	ip, [fp, #8]
   13e94:	str	r2, [sp, #44]	; 0x2c
   13e98:	str	r1, [sp, #40]	; 0x28
   13e9c:	mov	r3, sp
   13ea0:	mov	r1, lr
   13ea4:	mov	r2, ip
   13ea8:	bl	13848 <__assert_fail@plt+0x272c>
   13eac:	sub	sp, fp, #16
   13eb0:	pop	{r4, r5, r6, sl, fp, pc}
   13eb4:	push	{r4, sl, fp, lr}
   13eb8:	add	fp, sp, #8
   13ebc:	sub	sp, sp, #48	; 0x30
   13ec0:	movw	r3, #33176	; 0x8198
   13ec4:	mov	lr, #32
   13ec8:	mov	ip, r2
   13ecc:	cmp	r0, #0
   13ed0:	movt	r3, #2
   13ed4:	cmpne	r1, #0
   13ed8:	add	r2, r3, #16
   13edc:	vld1.64	{d16-d17}, [r3], lr
   13ee0:	vld1.64	{d20-d21}, [r3]
   13ee4:	vld1.64	{d18-d19}, [r2]
   13ee8:	mov	r2, sp
   13eec:	add	r4, r2, #16
   13ef0:	vst1.64	{d16-d17}, [r2], lr
   13ef4:	vst1.64	{d20-d21}, [r2]
   13ef8:	mov	r2, #10
   13efc:	vst1.64	{d18-d19}, [r4]
   13f00:	str	r2, [sp]
   13f04:	bne	13f0c <__assert_fail@plt+0x2df0>
   13f08:	bl	11104 <abort@plt>
   13f0c:	str	r1, [sp, #44]	; 0x2c
   13f10:	str	r0, [sp, #40]	; 0x28
   13f14:	mov	r3, sp
   13f18:	mov	r0, #0
   13f1c:	mov	r1, ip
   13f20:	mvn	r2, #0
   13f24:	bl	13848 <__assert_fail@plt+0x272c>
   13f28:	sub	sp, fp, #8
   13f2c:	pop	{r4, sl, fp, pc}
   13f30:	push	{r4, r5, fp, lr}
   13f34:	add	fp, sp, #8
   13f38:	sub	sp, sp, #48	; 0x30
   13f3c:	mov	ip, r3
   13f40:	movw	r3, #33176	; 0x8198
   13f44:	mov	r4, #32
   13f48:	mov	lr, r2
   13f4c:	cmp	r0, #0
   13f50:	movt	r3, #2
   13f54:	cmpne	r1, #0
   13f58:	add	r2, r3, #16
   13f5c:	vld1.64	{d16-d17}, [r3], r4
   13f60:	vld1.64	{d20-d21}, [r3]
   13f64:	vld1.64	{d18-d19}, [r2]
   13f68:	mov	r2, sp
   13f6c:	add	r5, r2, #16
   13f70:	vst1.64	{d16-d17}, [r2], r4
   13f74:	vst1.64	{d20-d21}, [r2]
   13f78:	mov	r2, #10
   13f7c:	vst1.64	{d18-d19}, [r5]
   13f80:	str	r2, [sp]
   13f84:	bne	13f8c <__assert_fail@plt+0x2e70>
   13f88:	bl	11104 <abort@plt>
   13f8c:	str	r1, [sp, #44]	; 0x2c
   13f90:	str	r0, [sp, #40]	; 0x28
   13f94:	mov	r3, sp
   13f98:	mov	r0, #0
   13f9c:	mov	r1, lr
   13fa0:	mov	r2, ip
   13fa4:	bl	13848 <__assert_fail@plt+0x272c>
   13fa8:	sub	sp, fp, #8
   13fac:	pop	{r4, r5, fp, pc}
   13fb0:	movw	r3, #33024	; 0x8100
   13fb4:	movt	r3, #2
   13fb8:	b	13848 <__assert_fail@plt+0x272c>
   13fbc:	movw	r3, #33024	; 0x8100
   13fc0:	mov	r2, r1
   13fc4:	mov	r1, r0
   13fc8:	mov	r0, #0
   13fcc:	movt	r3, #2
   13fd0:	b	13848 <__assert_fail@plt+0x272c>
   13fd4:	movw	r3, #33024	; 0x8100
   13fd8:	mvn	r2, #0
   13fdc:	movt	r3, #2
   13fe0:	b	13848 <__assert_fail@plt+0x272c>
   13fe4:	movw	r3, #33024	; 0x8100
   13fe8:	mov	r1, r0
   13fec:	mov	r0, #0
   13ff0:	mvn	r2, #0
   13ff4:	movt	r3, #2
   13ff8:	b	13848 <__assert_fail@plt+0x272c>
   13ffc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14000:	add	fp, sp, #24
   14004:	sub	sp, sp, #32
   14008:	ldr	r6, [fp, #12]
   1400c:	ldr	r7, [fp, #8]
   14010:	mov	r4, r2
   14014:	mov	r8, r0
   14018:	cmp	r1, #0
   1401c:	beq	14044 <__assert_fail@plt+0x2f28>
   14020:	movw	r2, #27732	; 0x6c54
   14024:	mov	r5, r1
   14028:	str	r3, [sp, #4]
   1402c:	str	r4, [sp]
   14030:	mov	r0, r8
   14034:	mov	r1, #1
   14038:	movt	r2, #1
   1403c:	mov	r3, r5
   14040:	b	1405c <__assert_fail@plt+0x2f40>
   14044:	movw	r2, #27744	; 0x6c60
   14048:	str	r3, [sp]
   1404c:	mov	r0, r8
   14050:	mov	r1, #1
   14054:	mov	r3, r4
   14058:	movt	r2, #1
   1405c:	bl	11074 <__fprintf_chk@plt>
   14060:	movw	r1, #27751	; 0x6c67
   14064:	mov	r0, #0
   14068:	mov	r2, #5
   1406c:	movt	r1, #1
   14070:	bl	10f18 <dcgettext@plt>
   14074:	movw	r2, #28469	; 0x6f35
   14078:	mov	r3, r0
   1407c:	movw	r0, #2022	; 0x7e6
   14080:	mov	r1, #1
   14084:	movt	r2, #1
   14088:	str	r0, [sp]
   1408c:	mov	r0, r8
   14090:	bl	11074 <__fprintf_chk@plt>
   14094:	movw	r4, #27076	; 0x69c4
   14098:	mov	r1, r8
   1409c:	movt	r4, #1
   140a0:	mov	r0, r4
   140a4:	bl	10ea0 <fputs_unlocked@plt>
   140a8:	movw	r1, #27755	; 0x6c6b
   140ac:	mov	r0, #0
   140b0:	mov	r2, #5
   140b4:	movt	r1, #1
   140b8:	bl	10f18 <dcgettext@plt>
   140bc:	movw	r3, #27926	; 0x6d16
   140c0:	mov	r2, r0
   140c4:	mov	r0, r8
   140c8:	mov	r1, #1
   140cc:	movt	r3, #1
   140d0:	bl	11074 <__fprintf_chk@plt>
   140d4:	mov	r0, r4
   140d8:	mov	r1, r8
   140dc:	bl	10ea0 <fputs_unlocked@plt>
   140e0:	cmp	r6, #9
   140e4:	bhi	14120 <__assert_fail@plt+0x3004>
   140e8:	add	r0, pc, #0
   140ec:	ldr	pc, [r0, r6, lsl #2]
   140f0:	andeq	r4, r1, r8, lsl r1
   140f4:	andeq	r4, r1, ip, lsr #2
   140f8:	andeq	r4, r1, ip, asr r1
   140fc:	andeq	r4, r1, r4, lsl #3
   14100:	andeq	r4, r1, ip, lsr #3
   14104:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14108:	strdeq	r4, [r1], -ip
   1410c:	andeq	r4, r1, r4, lsr r2
   14110:	ldrdeq	r4, [r1], -ip
   14114:	andeq	r4, r1, r4, lsl #5
   14118:	sub	sp, fp, #24
   1411c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14120:	movw	r1, #28279	; 0x6e77
   14124:	movt	r1, #1
   14128:	b	1428c <__assert_fail@plt+0x3170>
   1412c:	movw	r1, #27960	; 0x6d38
   14130:	mov	r0, #0
   14134:	mov	r2, #5
   14138:	movt	r1, #1
   1413c:	bl	10f18 <dcgettext@plt>
   14140:	ldr	r3, [r7]
   14144:	mov	r2, r0
   14148:	mov	r0, r8
   1414c:	mov	r1, #1
   14150:	sub	sp, fp, #24
   14154:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14158:	b	11074 <__fprintf_chk@plt>
   1415c:	movw	r1, #27976	; 0x6d48
   14160:	mov	r0, #0
   14164:	mov	r2, #5
   14168:	movt	r1, #1
   1416c:	bl	10f18 <dcgettext@plt>
   14170:	mov	r2, r0
   14174:	ldr	r3, [r7]
   14178:	ldr	r0, [r7, #4]
   1417c:	str	r0, [sp]
   14180:	b	14270 <__assert_fail@plt+0x3154>
   14184:	movw	r1, #27999	; 0x6d5f
   14188:	mov	r0, #0
   1418c:	mov	r2, #5
   14190:	movt	r1, #1
   14194:	bl	10f18 <dcgettext@plt>
   14198:	mov	r2, r0
   1419c:	ldr	r3, [r7]
   141a0:	ldmib	r7, {r0, r1}
   141a4:	stm	sp, {r0, r1}
   141a8:	b	14270 <__assert_fail@plt+0x3154>
   141ac:	movw	r1, #28027	; 0x6d7b
   141b0:	mov	r0, #0
   141b4:	mov	r2, #5
   141b8:	movt	r1, #1
   141bc:	bl	10f18 <dcgettext@plt>
   141c0:	ldr	r3, [r7]
   141c4:	mov	r2, r0
   141c8:	ldmib	r7, {r0, r1, r7}
   141cc:	stm	sp, {r0, r1, r7}
   141d0:	b	14270 <__assert_fail@plt+0x3154>
   141d4:	movw	r1, #28059	; 0x6d9b
   141d8:	mov	r0, #0
   141dc:	mov	r2, #5
   141e0:	movt	r1, #1
   141e4:	bl	10f18 <dcgettext@plt>
   141e8:	ldr	r3, [r7]
   141ec:	mov	r2, r0
   141f0:	ldmib	r7, {r0, r1, r6, r7}
   141f4:	stm	sp, {r0, r1, r6, r7}
   141f8:	b	14270 <__assert_fail@plt+0x3154>
   141fc:	movw	r1, #28095	; 0x6dbf
   14200:	mov	r0, #0
   14204:	mov	r2, #5
   14208:	movt	r1, #1
   1420c:	bl	10f18 <dcgettext@plt>
   14210:	mov	r2, r0
   14214:	ldr	r3, [r7]
   14218:	ldmib	r7, {r0, r1, r6}
   1421c:	ldr	r5, [r7, #16]
   14220:	ldr	r7, [r7, #20]
   14224:	stm	sp, {r0, r1, r6}
   14228:	str	r5, [sp, #12]
   1422c:	str	r7, [sp, #16]
   14230:	b	14270 <__assert_fail@plt+0x3154>
   14234:	movw	r1, #28135	; 0x6de7
   14238:	mov	r0, #0
   1423c:	mov	r2, #5
   14240:	movt	r1, #1
   14244:	bl	10f18 <dcgettext@plt>
   14248:	mov	r2, r0
   1424c:	ldr	r3, [r7]
   14250:	ldmib	r7, {r0, r1, r6}
   14254:	ldr	r5, [r7, #16]
   14258:	ldr	r4, [r7, #20]
   1425c:	ldr	r7, [r7, #24]
   14260:	stm	sp, {r0, r1, r6}
   14264:	str	r5, [sp, #12]
   14268:	str	r4, [sp, #16]
   1426c:	str	r7, [sp, #20]
   14270:	mov	r0, r8
   14274:	mov	r1, #1
   14278:	bl	11074 <__fprintf_chk@plt>
   1427c:	sub	sp, fp, #24
   14280:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14284:	movw	r1, #28227	; 0x6e43
   14288:	movt	r1, #1
   1428c:	mov	r0, #0
   14290:	mov	r2, #5
   14294:	bl	10f18 <dcgettext@plt>
   14298:	mov	ip, r0
   1429c:	ldr	r3, [r7]
   142a0:	ldr	r0, [r7, #4]
   142a4:	ldr	r1, [r7, #8]
   142a8:	ldr	r6, [r7, #12]
   142ac:	ldr	r5, [r7, #16]
   142b0:	ldr	r4, [r7, #20]
   142b4:	ldr	r2, [r7, #24]
   142b8:	ldr	lr, [r7, #28]
   142bc:	ldr	r7, [r7, #32]
   142c0:	stm	sp, {r0, r1, r6}
   142c4:	str	r5, [sp, #12]
   142c8:	str	r4, [sp, #16]
   142cc:	str	r2, [sp, #20]
   142d0:	str	lr, [sp, #24]
   142d4:	str	r7, [sp, #28]
   142d8:	b	14320 <__assert_fail@plt+0x3204>
   142dc:	movw	r1, #28179	; 0x6e13
   142e0:	mov	r0, #0
   142e4:	mov	r2, #5
   142e8:	movt	r1, #1
   142ec:	bl	10f18 <dcgettext@plt>
   142f0:	mov	ip, r0
   142f4:	ldr	r3, [r7]
   142f8:	ldmib	r7, {r0, r1, r6}
   142fc:	ldr	r5, [r7, #16]
   14300:	ldr	r4, [r7, #20]
   14304:	ldr	r2, [r7, #24]
   14308:	ldr	r7, [r7, #28]
   1430c:	stm	sp, {r0, r1, r6}
   14310:	str	r5, [sp, #12]
   14314:	str	r4, [sp, #16]
   14318:	str	r2, [sp, #20]
   1431c:	str	r7, [sp, #24]
   14320:	mov	r0, r8
   14324:	mov	r1, #1
   14328:	mov	r2, ip
   1432c:	bl	11074 <__fprintf_chk@plt>
   14330:	sub	sp, fp, #24
   14334:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14338:	push	{r4, sl, fp, lr}
   1433c:	add	fp, sp, #8
   14340:	sub	sp, sp, #8
   14344:	ldr	ip, [fp, #8]
   14348:	mov	lr, #0
   1434c:	ldr	r4, [ip, lr, lsl #2]
   14350:	add	lr, lr, #1
   14354:	cmp	r4, #0
   14358:	bne	1434c <__assert_fail@plt+0x3230>
   1435c:	sub	r4, lr, #1
   14360:	str	ip, [sp]
   14364:	str	r4, [sp, #4]
   14368:	bl	13ffc <__assert_fail@plt+0x2ee0>
   1436c:	sub	sp, fp, #8
   14370:	pop	{r4, sl, fp, pc}
   14374:	push	{fp, lr}
   14378:	mov	fp, sp
   1437c:	sub	sp, sp, #48	; 0x30
   14380:	ldr	ip, [fp, #8]
   14384:	ldr	lr, [ip]
   14388:	cmp	lr, #0
   1438c:	str	lr, [sp, #8]
   14390:	beq	1442c <__assert_fail@plt+0x3310>
   14394:	ldr	lr, [ip, #4]
   14398:	cmp	lr, #0
   1439c:	str	lr, [sp, #12]
   143a0:	beq	14434 <__assert_fail@plt+0x3318>
   143a4:	ldr	lr, [ip, #8]
   143a8:	cmp	lr, #0
   143ac:	str	lr, [sp, #16]
   143b0:	beq	1443c <__assert_fail@plt+0x3320>
   143b4:	ldr	lr, [ip, #12]
   143b8:	cmp	lr, #0
   143bc:	str	lr, [sp, #20]
   143c0:	beq	14444 <__assert_fail@plt+0x3328>
   143c4:	ldr	lr, [ip, #16]
   143c8:	cmp	lr, #0
   143cc:	str	lr, [sp, #24]
   143d0:	beq	1444c <__assert_fail@plt+0x3330>
   143d4:	ldr	lr, [ip, #20]
   143d8:	cmp	lr, #0
   143dc:	str	lr, [sp, #28]
   143e0:	beq	14454 <__assert_fail@plt+0x3338>
   143e4:	ldr	lr, [ip, #24]
   143e8:	cmp	lr, #0
   143ec:	str	lr, [sp, #32]
   143f0:	beq	1445c <__assert_fail@plt+0x3340>
   143f4:	ldr	lr, [ip, #28]
   143f8:	cmp	lr, #0
   143fc:	str	lr, [sp, #36]	; 0x24
   14400:	beq	14464 <__assert_fail@plt+0x3348>
   14404:	ldr	lr, [ip, #32]
   14408:	cmp	lr, #0
   1440c:	str	lr, [sp, #40]	; 0x28
   14410:	beq	1446c <__assert_fail@plt+0x3350>
   14414:	ldr	lr, [ip, #36]	; 0x24
   14418:	mov	ip, #10
   1441c:	cmp	lr, #0
   14420:	str	lr, [sp, #44]	; 0x2c
   14424:	movweq	ip, #9
   14428:	b	14470 <__assert_fail@plt+0x3354>
   1442c:	mov	ip, #0
   14430:	b	14470 <__assert_fail@plt+0x3354>
   14434:	mov	ip, #1
   14438:	b	14470 <__assert_fail@plt+0x3354>
   1443c:	mov	ip, #2
   14440:	b	14470 <__assert_fail@plt+0x3354>
   14444:	mov	ip, #3
   14448:	b	14470 <__assert_fail@plt+0x3354>
   1444c:	mov	ip, #4
   14450:	b	14470 <__assert_fail@plt+0x3354>
   14454:	mov	ip, #5
   14458:	b	14470 <__assert_fail@plt+0x3354>
   1445c:	mov	ip, #6
   14460:	b	14470 <__assert_fail@plt+0x3354>
   14464:	mov	ip, #7
   14468:	b	14470 <__assert_fail@plt+0x3354>
   1446c:	mov	ip, #8
   14470:	add	lr, sp, #8
   14474:	str	ip, [sp, #4]
   14478:	str	lr, [sp]
   1447c:	bl	13ffc <__assert_fail@plt+0x2ee0>
   14480:	mov	sp, fp
   14484:	pop	{fp, pc}
   14488:	push	{fp, lr}
   1448c:	mov	fp, sp
   14490:	sub	sp, sp, #56	; 0x38
   14494:	add	ip, fp, #8
   14498:	str	ip, [sp, #12]
   1449c:	ldr	lr, [fp, #8]
   144a0:	cmp	lr, #0
   144a4:	str	lr, [sp, #16]
   144a8:	beq	14544 <__assert_fail@plt+0x3428>
   144ac:	ldr	lr, [ip, #4]
   144b0:	cmp	lr, #0
   144b4:	str	lr, [sp, #20]
   144b8:	beq	1454c <__assert_fail@plt+0x3430>
   144bc:	ldr	lr, [ip, #8]
   144c0:	cmp	lr, #0
   144c4:	str	lr, [sp, #24]
   144c8:	beq	14554 <__assert_fail@plt+0x3438>
   144cc:	ldr	lr, [ip, #12]
   144d0:	cmp	lr, #0
   144d4:	str	lr, [sp, #28]
   144d8:	beq	1455c <__assert_fail@plt+0x3440>
   144dc:	ldr	lr, [ip, #16]
   144e0:	cmp	lr, #0
   144e4:	str	lr, [sp, #32]
   144e8:	beq	14564 <__assert_fail@plt+0x3448>
   144ec:	ldr	lr, [ip, #20]
   144f0:	cmp	lr, #0
   144f4:	str	lr, [sp, #36]	; 0x24
   144f8:	beq	1456c <__assert_fail@plt+0x3450>
   144fc:	ldr	lr, [ip, #24]
   14500:	cmp	lr, #0
   14504:	str	lr, [sp, #40]	; 0x28
   14508:	beq	14574 <__assert_fail@plt+0x3458>
   1450c:	ldr	lr, [ip, #28]
   14510:	cmp	lr, #0
   14514:	str	lr, [sp, #44]	; 0x2c
   14518:	beq	1457c <__assert_fail@plt+0x3460>
   1451c:	ldr	lr, [ip, #32]
   14520:	cmp	lr, #0
   14524:	str	lr, [sp, #48]	; 0x30
   14528:	beq	14584 <__assert_fail@plt+0x3468>
   1452c:	ldr	lr, [ip, #36]	; 0x24
   14530:	mov	ip, #10
   14534:	cmp	lr, #0
   14538:	str	lr, [sp, #52]	; 0x34
   1453c:	movweq	ip, #9
   14540:	b	14588 <__assert_fail@plt+0x346c>
   14544:	mov	ip, #0
   14548:	b	14588 <__assert_fail@plt+0x346c>
   1454c:	mov	ip, #1
   14550:	b	14588 <__assert_fail@plt+0x346c>
   14554:	mov	ip, #2
   14558:	b	14588 <__assert_fail@plt+0x346c>
   1455c:	mov	ip, #3
   14560:	b	14588 <__assert_fail@plt+0x346c>
   14564:	mov	ip, #4
   14568:	b	14588 <__assert_fail@plt+0x346c>
   1456c:	mov	ip, #5
   14570:	b	14588 <__assert_fail@plt+0x346c>
   14574:	mov	ip, #6
   14578:	b	14588 <__assert_fail@plt+0x346c>
   1457c:	mov	ip, #7
   14580:	b	14588 <__assert_fail@plt+0x346c>
   14584:	mov	ip, #8
   14588:	add	lr, sp, #16
   1458c:	str	ip, [sp, #4]
   14590:	str	lr, [sp]
   14594:	bl	13ffc <__assert_fail@plt+0x2ee0>
   14598:	mov	sp, fp
   1459c:	pop	{fp, pc}
   145a0:	push	{fp, lr}
   145a4:	mov	fp, sp
   145a8:	movw	r0, #33108	; 0x8154
   145ac:	movt	r0, #2
   145b0:	ldr	r1, [r0]
   145b4:	movw	r0, #27076	; 0x69c4
   145b8:	movt	r0, #1
   145bc:	bl	10ea0 <fputs_unlocked@plt>
   145c0:	movw	r1, #28339	; 0x6eb3
   145c4:	mov	r0, #0
   145c8:	mov	r2, #5
   145cc:	movt	r1, #1
   145d0:	bl	10f18 <dcgettext@plt>
   145d4:	movw	r2, #28359	; 0x6ec7
   145d8:	mov	r1, r0
   145dc:	mov	r0, #1
   145e0:	movt	r2, #1
   145e4:	bl	1105c <__printf_chk@plt>
   145e8:	movw	r1, #28381	; 0x6edd
   145ec:	mov	r0, #0
   145f0:	mov	r2, #5
   145f4:	movt	r1, #1
   145f8:	bl	10f18 <dcgettext@plt>
   145fc:	movw	r2, #26557	; 0x67bd
   14600:	movw	r3, #26885	; 0x6905
   14604:	mov	r1, r0
   14608:	mov	r0, #1
   1460c:	movt	r2, #1
   14610:	movt	r3, #1
   14614:	bl	1105c <__printf_chk@plt>
   14618:	movw	r1, #28401	; 0x6ef1
   1461c:	mov	r0, #0
   14620:	mov	r2, #5
   14624:	movt	r1, #1
   14628:	bl	10f18 <dcgettext@plt>
   1462c:	movw	r2, #28440	; 0x6f18
   14630:	mov	r1, r0
   14634:	mov	r0, #1
   14638:	movt	r2, #1
   1463c:	pop	{fp, lr}
   14640:	b	1105c <__printf_chk@plt>
   14644:	push	{r4, r5, r6, sl, fp, lr}
   14648:	add	fp, sp, #16
   1464c:	mov	r4, r2
   14650:	mov	r5, r1
   14654:	mov	r6, r0
   14658:	bl	15f84 <__assert_fail@plt+0x4e68>
   1465c:	cmp	r0, #0
   14660:	popne	{r4, r5, r6, sl, fp, pc}
   14664:	cmp	r6, #0
   14668:	beq	1467c <__assert_fail@plt+0x3560>
   1466c:	cmp	r5, #0
   14670:	cmpne	r4, #0
   14674:	bne	1467c <__assert_fail@plt+0x3560>
   14678:	pop	{r4, r5, r6, sl, fp, pc}
   1467c:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14680:	push	{r4, r5, r6, sl, fp, lr}
   14684:	add	fp, sp, #16
   14688:	mov	r4, r2
   1468c:	mov	r5, r1
   14690:	mov	r6, r0
   14694:	bl	15f84 <__assert_fail@plt+0x4e68>
   14698:	cmp	r0, #0
   1469c:	popne	{r4, r5, r6, sl, fp, pc}
   146a0:	cmp	r6, #0
   146a4:	beq	146b8 <__assert_fail@plt+0x359c>
   146a8:	cmp	r5, #0
   146ac:	cmpne	r4, #0
   146b0:	bne	146b8 <__assert_fail@plt+0x359c>
   146b4:	pop	{r4, r5, r6, sl, fp, pc}
   146b8:	bl	14bf8 <__assert_fail@plt+0x3adc>
   146bc:	push	{fp, lr}
   146c0:	mov	fp, sp
   146c4:	bl	15978 <__assert_fail@plt+0x485c>
   146c8:	cmp	r0, #0
   146cc:	popne	{fp, pc}
   146d0:	bl	14bf8 <__assert_fail@plt+0x3adc>
   146d4:	push	{fp, lr}
   146d8:	mov	fp, sp
   146dc:	bl	15978 <__assert_fail@plt+0x485c>
   146e0:	cmp	r0, #0
   146e4:	popne	{fp, pc}
   146e8:	bl	14bf8 <__assert_fail@plt+0x3adc>
   146ec:	push	{fp, lr}
   146f0:	mov	fp, sp
   146f4:	bl	15978 <__assert_fail@plt+0x485c>
   146f8:	cmp	r0, #0
   146fc:	popne	{fp, pc}
   14700:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14704:	push	{r4, r5, fp, lr}
   14708:	add	fp, sp, #8
   1470c:	mov	r4, r1
   14710:	mov	r5, r0
   14714:	bl	159a8 <__assert_fail@plt+0x488c>
   14718:	cmp	r0, #0
   1471c:	popne	{r4, r5, fp, pc}
   14720:	cmp	r5, #0
   14724:	beq	14734 <__assert_fail@plt+0x3618>
   14728:	cmp	r4, #0
   1472c:	bne	14734 <__assert_fail@plt+0x3618>
   14730:	pop	{r4, r5, fp, pc}
   14734:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14738:	push	{fp, lr}
   1473c:	mov	fp, sp
   14740:	cmp	r1, #0
   14744:	orreq	r1, r1, #1
   14748:	bl	159a8 <__assert_fail@plt+0x488c>
   1474c:	cmp	r0, #0
   14750:	popne	{fp, pc}
   14754:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14758:	push	{fp, lr}
   1475c:	mov	fp, sp
   14760:	clz	r3, r2
   14764:	lsr	ip, r3, #5
   14768:	clz	r3, r1
   1476c:	lsr	r3, r3, #5
   14770:	orrs	r3, r3, ip
   14774:	movwne	r1, #1
   14778:	movwne	r2, #1
   1477c:	bl	15f84 <__assert_fail@plt+0x4e68>
   14780:	cmp	r0, #0
   14784:	popne	{fp, pc}
   14788:	bl	14bf8 <__assert_fail@plt+0x3adc>
   1478c:	push	{fp, lr}
   14790:	mov	fp, sp
   14794:	mov	r2, r1
   14798:	mov	r1, r0
   1479c:	mov	r0, #0
   147a0:	bl	15f84 <__assert_fail@plt+0x4e68>
   147a4:	cmp	r0, #0
   147a8:	popne	{fp, pc}
   147ac:	bl	14bf8 <__assert_fail@plt+0x3adc>
   147b0:	push	{fp, lr}
   147b4:	mov	fp, sp
   147b8:	mov	r2, r1
   147bc:	mov	r1, r0
   147c0:	clz	r0, r2
   147c4:	clz	r3, r1
   147c8:	lsr	r0, r0, #5
   147cc:	lsr	r3, r3, #5
   147d0:	orrs	r0, r3, r0
   147d4:	mov	r0, #0
   147d8:	movwne	r1, #1
   147dc:	movwne	r2, #1
   147e0:	bl	15f84 <__assert_fail@plt+0x4e68>
   147e4:	cmp	r0, #0
   147e8:	popne	{fp, pc}
   147ec:	bl	14bf8 <__assert_fail@plt+0x3adc>
   147f0:	push	{r4, r5, r6, sl, fp, lr}
   147f4:	add	fp, sp, #16
   147f8:	ldr	r5, [r1]
   147fc:	mov	r4, r1
   14800:	mov	r6, r0
   14804:	cmp	r0, #0
   14808:	beq	14820 <__assert_fail@plt+0x3704>
   1480c:	mov	r0, #1
   14810:	add	r0, r0, r5, lsr #1
   14814:	adds	r5, r5, r0
   14818:	bcc	14828 <__assert_fail@plt+0x370c>
   1481c:	b	14864 <__assert_fail@plt+0x3748>
   14820:	cmp	r5, #0
   14824:	movweq	r5, #64	; 0x40
   14828:	mov	r0, r6
   1482c:	mov	r1, r5
   14830:	mov	r2, #1
   14834:	bl	15f84 <__assert_fail@plt+0x4e68>
   14838:	cmp	r5, #0
   1483c:	mov	r1, r5
   14840:	movwne	r1, #1
   14844:	cmp	r0, #0
   14848:	bne	1485c <__assert_fail@plt+0x3740>
   1484c:	clz	r2, r6
   14850:	lsr	r2, r2, #5
   14854:	orrs	r1, r2, r1
   14858:	bne	14864 <__assert_fail@plt+0x3748>
   1485c:	str	r5, [r4]
   14860:	pop	{r4, r5, r6, sl, fp, pc}
   14864:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14868:	push	{r4, r5, r6, r7, fp, lr}
   1486c:	add	fp, sp, #16
   14870:	ldr	r5, [r1]
   14874:	mov	r6, r2
   14878:	mov	r4, r1
   1487c:	mov	r7, r0
   14880:	cmp	r0, #0
   14884:	beq	1489c <__assert_fail@plt+0x3780>
   14888:	mov	r0, #1
   1488c:	add	r0, r0, r5, lsr #1
   14890:	adds	r5, r5, r0
   14894:	bcc	148b4 <__assert_fail@plt+0x3798>
   14898:	b	148e8 <__assert_fail@plt+0x37cc>
   1489c:	cmp	r5, #0
   148a0:	bne	148b4 <__assert_fail@plt+0x3798>
   148a4:	mov	r0, #64	; 0x40
   148a8:	cmp	r6, #64	; 0x40
   148ac:	udiv	r5, r0, r6
   148b0:	addhi	r5, r5, #1
   148b4:	mov	r0, r7
   148b8:	mov	r1, r5
   148bc:	mov	r2, r6
   148c0:	bl	15f84 <__assert_fail@plt+0x4e68>
   148c4:	cmp	r0, #0
   148c8:	bne	148e0 <__assert_fail@plt+0x37c4>
   148cc:	cmp	r7, #0
   148d0:	beq	148e8 <__assert_fail@plt+0x37cc>
   148d4:	cmp	r6, #0
   148d8:	cmpne	r5, #0
   148dc:	bne	148e8 <__assert_fail@plt+0x37cc>
   148e0:	str	r5, [r4]
   148e4:	pop	{r4, r5, r6, r7, fp, pc}
   148e8:	bl	14bf8 <__assert_fail@plt+0x3adc>
   148ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   148f0:	add	fp, sp, #24
   148f4:	mov	r8, r1
   148f8:	ldr	r1, [r1]
   148fc:	mov	r5, r0
   14900:	add	r0, r1, r1, asr #1
   14904:	cmp	r0, r1
   14908:	mvnvs	r0, #-2147483648	; 0x80000000
   1490c:	cmp	r0, r3
   14910:	mov	r7, r0
   14914:	movgt	r7, r3
   14918:	cmn	r3, #1
   1491c:	movle	r7, r0
   14920:	ldr	r0, [fp, #8]
   14924:	cmn	r0, #1
   14928:	ble	14950 <__assert_fail@plt+0x3834>
   1492c:	cmp	r0, #0
   14930:	beq	149a4 <__assert_fail@plt+0x3888>
   14934:	cmn	r7, #1
   14938:	ble	14978 <__assert_fail@plt+0x385c>
   1493c:	mvn	r4, #-2147483648	; 0x80000000
   14940:	udiv	r6, r4, r0
   14944:	cmp	r6, r7
   14948:	bge	149a4 <__assert_fail@plt+0x3888>
   1494c:	b	149b4 <__assert_fail@plt+0x3898>
   14950:	cmn	r7, #1
   14954:	ble	14994 <__assert_fail@plt+0x3878>
   14958:	cmn	r0, #1
   1495c:	beq	149a4 <__assert_fail@plt+0x3888>
   14960:	mov	r6, #-2147483648	; 0x80000000
   14964:	mvn	r4, #-2147483648	; 0x80000000
   14968:	sdiv	r6, r6, r0
   1496c:	cmp	r6, r7
   14970:	bge	149a4 <__assert_fail@plt+0x3888>
   14974:	b	149b4 <__assert_fail@plt+0x3898>
   14978:	beq	149a4 <__assert_fail@plt+0x3888>
   1497c:	mov	r6, #-2147483648	; 0x80000000
   14980:	mvn	r4, #-2147483648	; 0x80000000
   14984:	sdiv	r6, r6, r7
   14988:	cmp	r6, r0
   1498c:	bge	149a4 <__assert_fail@plt+0x3888>
   14990:	b	149b4 <__assert_fail@plt+0x3898>
   14994:	mvn	r4, #-2147483648	; 0x80000000
   14998:	sdiv	r6, r4, r0
   1499c:	cmp	r7, r6
   149a0:	blt	149b4 <__assert_fail@plt+0x3898>
   149a4:	mul	r6, r7, r0
   149a8:	mov	r4, #64	; 0x40
   149ac:	cmp	r6, #63	; 0x3f
   149b0:	bgt	149bc <__assert_fail@plt+0x38a0>
   149b4:	sdiv	r7, r4, r0
   149b8:	mul	r6, r7, r0
   149bc:	cmp	r5, #0
   149c0:	moveq	r4, #0
   149c4:	streq	r4, [r8]
   149c8:	sub	r4, r7, r1
   149cc:	cmp	r4, r2
   149d0:	bge	14a7c <__assert_fail@plt+0x3960>
   149d4:	add	r7, r1, r2
   149d8:	mov	r6, #0
   149dc:	mov	r2, #0
   149e0:	cmp	r7, r3
   149e4:	movwgt	r6, #1
   149e8:	cmn	r3, #1
   149ec:	movwgt	r2, #1
   149f0:	cmp	r7, r1
   149f4:	bvs	14ab0 <__assert_fail@plt+0x3994>
   149f8:	ands	r1, r2, r6
   149fc:	bne	14ab0 <__assert_fail@plt+0x3994>
   14a00:	cmn	r0, #1
   14a04:	ble	14a2c <__assert_fail@plt+0x3910>
   14a08:	cmp	r0, #0
   14a0c:	beq	14a78 <__assert_fail@plt+0x395c>
   14a10:	cmn	r7, #1
   14a14:	ble	14a50 <__assert_fail@plt+0x3934>
   14a18:	mvn	r1, #-2147483648	; 0x80000000
   14a1c:	udiv	r1, r1, r0
   14a20:	cmp	r1, r7
   14a24:	bge	14a78 <__assert_fail@plt+0x395c>
   14a28:	b	14ab0 <__assert_fail@plt+0x3994>
   14a2c:	cmn	r7, #1
   14a30:	ble	14a68 <__assert_fail@plt+0x394c>
   14a34:	cmn	r0, #1
   14a38:	beq	14a78 <__assert_fail@plt+0x395c>
   14a3c:	mov	r1, #-2147483648	; 0x80000000
   14a40:	sdiv	r1, r1, r0
   14a44:	cmp	r1, r7
   14a48:	bge	14a78 <__assert_fail@plt+0x395c>
   14a4c:	b	14ab0 <__assert_fail@plt+0x3994>
   14a50:	beq	14a78 <__assert_fail@plt+0x395c>
   14a54:	mov	r1, #-2147483648	; 0x80000000
   14a58:	sdiv	r1, r1, r7
   14a5c:	cmp	r1, r0
   14a60:	bge	14a78 <__assert_fail@plt+0x395c>
   14a64:	b	14ab0 <__assert_fail@plt+0x3994>
   14a68:	mvn	r1, #-2147483648	; 0x80000000
   14a6c:	sdiv	r1, r1, r0
   14a70:	cmp	r7, r1
   14a74:	blt	14ab0 <__assert_fail@plt+0x3994>
   14a78:	mul	r6, r7, r0
   14a7c:	mov	r0, r5
   14a80:	mov	r1, r6
   14a84:	bl	159a8 <__assert_fail@plt+0x488c>
   14a88:	cmp	r6, #0
   14a8c:	movwne	r6, #1
   14a90:	cmp	r0, #0
   14a94:	bne	14aa8 <__assert_fail@plt+0x398c>
   14a98:	clz	r1, r5
   14a9c:	lsr	r1, r1, #5
   14aa0:	orrs	r1, r1, r6
   14aa4:	bne	14ab0 <__assert_fail@plt+0x3994>
   14aa8:	str	r7, [r8]
   14aac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ab0:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14ab4:	push	{fp, lr}
   14ab8:	mov	fp, sp
   14abc:	mov	r1, #1
   14ac0:	bl	15924 <__assert_fail@plt+0x4808>
   14ac4:	cmp	r0, #0
   14ac8:	popne	{fp, pc}
   14acc:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14ad0:	push	{fp, lr}
   14ad4:	mov	fp, sp
   14ad8:	bl	15924 <__assert_fail@plt+0x4808>
   14adc:	cmp	r0, #0
   14ae0:	popne	{fp, pc}
   14ae4:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14ae8:	push	{fp, lr}
   14aec:	mov	fp, sp
   14af0:	mov	r1, #1
   14af4:	bl	15924 <__assert_fail@plt+0x4808>
   14af8:	cmp	r0, #0
   14afc:	popne	{fp, pc}
   14b00:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14b04:	push	{fp, lr}
   14b08:	mov	fp, sp
   14b0c:	bl	15924 <__assert_fail@plt+0x4808>
   14b10:	cmp	r0, #0
   14b14:	popne	{fp, pc}
   14b18:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14b1c:	push	{r4, r5, fp, lr}
   14b20:	add	fp, sp, #8
   14b24:	mov	r5, r0
   14b28:	mov	r0, r1
   14b2c:	mov	r4, r1
   14b30:	bl	15978 <__assert_fail@plt+0x485c>
   14b34:	cmp	r0, #0
   14b38:	beq	14b4c <__assert_fail@plt+0x3a30>
   14b3c:	mov	r1, r5
   14b40:	mov	r2, r4
   14b44:	pop	{r4, r5, fp, lr}
   14b48:	b	10ee8 <memcpy@plt>
   14b4c:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14b50:	push	{r4, r5, fp, lr}
   14b54:	add	fp, sp, #8
   14b58:	mov	r5, r0
   14b5c:	mov	r0, r1
   14b60:	mov	r4, r1
   14b64:	bl	15978 <__assert_fail@plt+0x485c>
   14b68:	cmp	r0, #0
   14b6c:	beq	14b80 <__assert_fail@plt+0x3a64>
   14b70:	mov	r1, r5
   14b74:	mov	r2, r4
   14b78:	pop	{r4, r5, fp, lr}
   14b7c:	b	10ee8 <memcpy@plt>
   14b80:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14b84:	push	{r4, r5, fp, lr}
   14b88:	add	fp, sp, #8
   14b8c:	mov	r5, r0
   14b90:	add	r0, r1, #1
   14b94:	mov	r4, r1
   14b98:	bl	15978 <__assert_fail@plt+0x485c>
   14b9c:	cmp	r0, #0
   14ba0:	beq	14bbc <__assert_fail@plt+0x3aa0>
   14ba4:	mov	r1, #0
   14ba8:	mov	r2, r4
   14bac:	strb	r1, [r0, r4]
   14bb0:	mov	r1, r5
   14bb4:	pop	{r4, r5, fp, lr}
   14bb8:	b	10ee8 <memcpy@plt>
   14bbc:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14bc0:	push	{r4, r5, fp, lr}
   14bc4:	add	fp, sp, #8
   14bc8:	mov	r4, r0
   14bcc:	bl	11020 <strlen@plt>
   14bd0:	add	r5, r0, #1
   14bd4:	mov	r0, r5
   14bd8:	bl	15978 <__assert_fail@plt+0x485c>
   14bdc:	cmp	r0, #0
   14be0:	beq	14bf4 <__assert_fail@plt+0x3ad8>
   14be4:	mov	r1, r4
   14be8:	mov	r2, r5
   14bec:	pop	{r4, r5, fp, lr}
   14bf0:	b	10ee8 <memcpy@plt>
   14bf4:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14bf8:	push	{fp, lr}
   14bfc:	mov	fp, sp
   14c00:	movw	r0, #33020	; 0x80fc
   14c04:	movw	r1, #28516	; 0x6f64
   14c08:	mov	r2, #5
   14c0c:	movt	r0, #2
   14c10:	movt	r1, #1
   14c14:	ldr	r4, [r0]
   14c18:	mov	r0, #0
   14c1c:	bl	10f18 <dcgettext@plt>
   14c20:	movw	r2, #27479	; 0x6b57
   14c24:	mov	r3, r0
   14c28:	mov	r0, r4
   14c2c:	mov	r1, #0
   14c30:	movt	r2, #1
   14c34:	bl	10f90 <error@plt>
   14c38:	bl	11104 <abort@plt>
   14c3c:	push	{r4, sl, fp, lr}
   14c40:	add	fp, sp, #8
   14c44:	bl	159fc <__assert_fail@plt+0x48e0>
   14c48:	mov	r4, r0
   14c4c:	cmp	r0, #0
   14c50:	bne	14c64 <__assert_fail@plt+0x3b48>
   14c54:	bl	11038 <__errno_location@plt>
   14c58:	ldr	r0, [r0]
   14c5c:	cmp	r0, #12
   14c60:	beq	14c6c <__assert_fail@plt+0x3b50>
   14c64:	mov	r0, r4
   14c68:	pop	{r4, sl, fp, pc}
   14c6c:	bl	14bf8 <__assert_fail@plt+0x3adc>
   14c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c74:	add	fp, sp, #28
   14c78:	sub	sp, sp, #44	; 0x2c
   14c7c:	cmp	r2, #37	; 0x25
   14c80:	bcs	15904 <__assert_fail@plt+0x47e8>
   14c84:	ldr	sl, [fp, #8]
   14c88:	mov	r6, r2
   14c8c:	mov	r7, r1
   14c90:	mov	r4, r0
   14c94:	str	r3, [sp, #36]	; 0x24
   14c98:	bl	11038 <__errno_location@plt>
   14c9c:	mov	r5, r0
   14ca0:	mov	r0, #0
   14ca4:	str	r0, [r5]
   14ca8:	bl	10ffc <__ctype_b_loc@plt>
   14cac:	ldr	r1, [r0]
   14cb0:	mov	r2, r4
   14cb4:	ldrb	r0, [r2], #1
   14cb8:	add	r3, r1, r0, lsl #1
   14cbc:	ldrb	r3, [r3, #1]
   14cc0:	tst	r3, #32
   14cc4:	bne	14cb4 <__assert_fail@plt+0x3b98>
   14cc8:	cmp	r7, #0
   14ccc:	sub	r9, fp, #32
   14cd0:	mov	r8, #4
   14cd4:	movne	r9, r7
   14cd8:	cmp	r0, #45	; 0x2d
   14cdc:	beq	1509c <__assert_fail@plt+0x3f80>
   14ce0:	mov	r0, r4
   14ce4:	mov	r1, r9
   14ce8:	mov	r2, r6
   14cec:	mov	r3, #0
   14cf0:	bl	10f00 <__strtoull_internal@plt>
   14cf4:	mov	r7, r1
   14cf8:	ldr	r1, [r9]
   14cfc:	cmp	r1, r4
   14d00:	beq	14d38 <__assert_fail@plt+0x3c1c>
   14d04:	mov	r6, r0
   14d08:	ldr	r0, [r5]
   14d0c:	cmp	r0, #0
   14d10:	beq	15054 <__assert_fail@plt+0x3f38>
   14d14:	cmp	r0, #34	; 0x22
   14d18:	bne	1509c <__assert_fail@plt+0x3f80>
   14d1c:	mov	r8, #1
   14d20:	cmp	sl, #0
   14d24:	beq	158f0 <__assert_fail@plt+0x47d4>
   14d28:	ldrb	r4, [r1]
   14d2c:	cmp	r4, #0
   14d30:	bne	14d7c <__assert_fail@plt+0x3c60>
   14d34:	b	158f0 <__assert_fail@plt+0x47d4>
   14d38:	cmp	sl, #0
   14d3c:	beq	1509c <__assert_fail@plt+0x3f80>
   14d40:	mov	r5, r1
   14d44:	ldrb	r1, [r4]
   14d48:	cmp	r1, #0
   14d4c:	beq	1509c <__assert_fail@plt+0x3f80>
   14d50:	mov	r0, sl
   14d54:	bl	1102c <strchr@plt>
   14d58:	cmp	r0, #0
   14d5c:	beq	1509c <__assert_fail@plt+0x3f80>
   14d60:	mov	r1, r5
   14d64:	mov	r8, #0
   14d68:	mov	r6, #1
   14d6c:	mov	r7, #0
   14d70:	ldrb	r4, [r1]
   14d74:	cmp	r4, #0
   14d78:	beq	158f0 <__assert_fail@plt+0x47d4>
   14d7c:	str	r1, [sp, #32]
   14d80:	mov	r0, sl
   14d84:	mov	r1, r4
   14d88:	bl	1102c <strchr@plt>
   14d8c:	cmp	r0, #0
   14d90:	beq	15090 <__assert_fail@plt+0x3f74>
   14d94:	sub	r0, r4, #69	; 0x45
   14d98:	mov	r1, #1
   14d9c:	mov	r3, #0
   14da0:	mov	r5, #1024	; 0x400
   14da4:	cmp	r0, #47	; 0x2f
   14da8:	str	r1, [sp, #28]
   14dac:	bhi	14eb0 <__assert_fail@plt+0x3d94>
   14db0:	add	r1, pc, #0
   14db4:	ldr	pc, [r1, r0, lsl #2]
   14db8:	andeq	r4, r1, r8, ror lr
   14dbc:			; <UNDEFINED> instruction: 0x00014eb0
   14dc0:	andeq	r4, r1, r8, ror lr
   14dc4:			; <UNDEFINED> instruction: 0x00014eb0
   14dc8:			; <UNDEFINED> instruction: 0x00014eb0
   14dcc:			; <UNDEFINED> instruction: 0x00014eb0
   14dd0:	andeq	r4, r1, r8, ror lr
   14dd4:			; <UNDEFINED> instruction: 0x00014eb0
   14dd8:	andeq	r4, r1, r8, ror lr
   14ddc:			; <UNDEFINED> instruction: 0x00014eb0
   14de0:			; <UNDEFINED> instruction: 0x00014eb0
   14de4:	andeq	r4, r1, r8, ror lr
   14de8:			; <UNDEFINED> instruction: 0x00014eb0
   14dec:			; <UNDEFINED> instruction: 0x00014eb0
   14df0:			; <UNDEFINED> instruction: 0x00014eb0
   14df4:	andeq	r4, r1, r8, ror lr
   14df8:			; <UNDEFINED> instruction: 0x00014eb0
   14dfc:			; <UNDEFINED> instruction: 0x00014eb0
   14e00:			; <UNDEFINED> instruction: 0x00014eb0
   14e04:			; <UNDEFINED> instruction: 0x00014eb0
   14e08:	andeq	r4, r1, r8, ror lr
   14e0c:	andeq	r4, r1, r8, ror lr
   14e10:			; <UNDEFINED> instruction: 0x00014eb0
   14e14:			; <UNDEFINED> instruction: 0x00014eb0
   14e18:			; <UNDEFINED> instruction: 0x00014eb0
   14e1c:			; <UNDEFINED> instruction: 0x00014eb0
   14e20:			; <UNDEFINED> instruction: 0x00014eb0
   14e24:			; <UNDEFINED> instruction: 0x00014eb0
   14e28:			; <UNDEFINED> instruction: 0x00014eb0
   14e2c:			; <UNDEFINED> instruction: 0x00014eb0
   14e30:			; <UNDEFINED> instruction: 0x00014eb0
   14e34:			; <UNDEFINED> instruction: 0x00014eb0
   14e38:			; <UNDEFINED> instruction: 0x00014eb0
   14e3c:			; <UNDEFINED> instruction: 0x00014eb0
   14e40:	andeq	r4, r1, r8, ror lr
   14e44:			; <UNDEFINED> instruction: 0x00014eb0
   14e48:			; <UNDEFINED> instruction: 0x00014eb0
   14e4c:			; <UNDEFINED> instruction: 0x00014eb0
   14e50:	andeq	r4, r1, r8, ror lr
   14e54:			; <UNDEFINED> instruction: 0x00014eb0
   14e58:	andeq	r4, r1, r8, ror lr
   14e5c:			; <UNDEFINED> instruction: 0x00014eb0
   14e60:			; <UNDEFINED> instruction: 0x00014eb0
   14e64:			; <UNDEFINED> instruction: 0x00014eb0
   14e68:			; <UNDEFINED> instruction: 0x00014eb0
   14e6c:			; <UNDEFINED> instruction: 0x00014eb0
   14e70:			; <UNDEFINED> instruction: 0x00014eb0
   14e74:	andeq	r4, r1, r8, ror lr
   14e78:	mov	r0, sl
   14e7c:	mov	r1, #48	; 0x30
   14e80:	bl	1102c <strchr@plt>
   14e84:	cmp	r0, #0
   14e88:	beq	14eac <__assert_fail@plt+0x3d90>
   14e8c:	ldr	r1, [sp, #32]
   14e90:	ldrb	r0, [r1, #1]
   14e94:	cmp	r0, #66	; 0x42
   14e98:	cmpne	r0, #68	; 0x44
   14e9c:	bne	15064 <__assert_fail@plt+0x3f48>
   14ea0:	mov	r5, #1000	; 0x3e8
   14ea4:	mov	r0, #2
   14ea8:	str	r0, [sp, #28]
   14eac:	mov	r3, #0
   14eb0:	sub	r0, r4, #66	; 0x42
   14eb4:	cmp	r0, #53	; 0x35
   14eb8:	bhi	15090 <__assert_fail@plt+0x3f74>
   14ebc:	add	r1, pc, #0
   14ec0:	ldr	pc, [r1, r0, lsl #2]
   14ec4:	andeq	r5, r1, r0, lsl #8
   14ec8:	muleq	r1, r0, r0
   14ecc:	muleq	r1, r0, r0
   14ed0:	andeq	r5, r1, r8, lsr #8
   14ed4:	muleq	r1, r0, r0
   14ed8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14edc:	muleq	r1, r0, r0
   14ee0:	muleq	r1, r0, r0
   14ee4:	muleq	r1, r0, r0
   14ee8:	andeq	r5, r1, r8, lsr #1
   14eec:	muleq	r1, r0, r0
   14ef0:	strdeq	r5, [r1], -r0
   14ef4:	muleq	r1, r0, r0
   14ef8:	muleq	r1, r0, r0
   14efc:	andeq	r5, r1, ip, ror r5
   14f00:	muleq	r1, r0, r0
   14f04:	muleq	r1, r0, r0
   14f08:	muleq	r1, r0, r0
   14f0c:	andeq	r5, r1, ip, ror r1
   14f10:	muleq	r1, r0, r0
   14f14:	muleq	r1, r0, r0
   14f18:	muleq	r1, r0, r0
   14f1c:	muleq	r1, r0, r0
   14f20:	andeq	r5, r1, r4, lsr #13
   14f24:	andeq	r5, r1, r4, ror #4
   14f28:	muleq	r1, r0, r0
   14f2c:	muleq	r1, r0, r0
   14f30:	muleq	r1, r0, r0
   14f34:	muleq	r1, r0, r0
   14f38:	muleq	r1, r0, r0
   14f3c:	muleq	r1, r0, r0
   14f40:	muleq	r1, r0, r0
   14f44:	andeq	r5, r1, r8, ror r8
   14f48:	ldrdeq	r5, [r1], -r0
   14f4c:	muleq	r1, r0, r0
   14f50:	muleq	r1, r0, r0
   14f54:	muleq	r1, r0, r0
   14f58:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14f5c:	muleq	r1, r0, r0
   14f60:	muleq	r1, r0, r0
   14f64:	muleq	r1, r0, r0
   14f68:	andeq	r5, r1, r8, lsr #1
   14f6c:	muleq	r1, r0, r0
   14f70:	strdeq	r5, [r1], -r0
   14f74:	muleq	r1, r0, r0
   14f78:	muleq	r1, r0, r0
   14f7c:	muleq	r1, r0, r0
   14f80:	muleq	r1, r0, r0
   14f84:	muleq	r1, r0, r0
   14f88:	muleq	r1, r0, r0
   14f8c:	andeq	r5, r1, ip, ror r1
   14f90:	muleq	r1, r0, r0
   14f94:	muleq	r1, r0, r0
   14f98:	andeq	r5, r1, ip, lsr #17
   14f9c:	mvn	r0, #0
   14fa0:	mvn	r1, #0
   14fa4:	mov	r2, r5
   14fa8:	mov	sl, r3
   14fac:	bl	160cc <__assert_fail@plt+0x4fb0>
   14fb0:	subs	r3, r0, r6
   14fb4:	umull	r4, r2, r6, r5
   14fb8:	mov	lr, #0
   14fbc:	str	r1, [sp, #20]
   14fc0:	sbcs	r3, r1, r7
   14fc4:	movwcc	lr, #1
   14fc8:	mla	ip, r6, sl, r2
   14fcc:	mov	r2, r1
   14fd0:	mov	r2, #0
   14fd4:	cmp	lr, #0
   14fd8:	mla	r7, r7, r5, ip
   14fdc:	mvnne	r4, #0
   14fe0:	mvnne	r7, #0
   14fe4:	subs	r6, r0, r4
   14fe8:	sbcs	r6, r1, r7
   14fec:	umull	r3, r6, r4, r5
   14ff0:	movwcc	r2, #1
   14ff4:	cmp	r2, #0
   14ff8:	mvnne	r3, #0
   14ffc:	cmp	r2, #0
   15000:	str	r6, [sp, #16]
   15004:	umull	r6, ip, r3, r5
   15008:	mla	r1, r3, sl, ip
   1500c:	ldr	ip, [sp, #16]
   15010:	str	r1, [sp, #12]
   15014:	mla	r4, r4, sl, ip
   15018:	mla	r4, r7, r5, r4
   1501c:	mvnne	r4, #0
   15020:	subs	r0, r0, r3
   15024:	ldr	r0, [sp, #20]
   15028:	ldr	r7, [sp, #12]
   1502c:	sbcs	r0, r0, r4
   15030:	mov	r0, #0
   15034:	mla	r7, r4, r5, r7
   15038:	movwcc	r0, #1
   1503c:	cmp	r0, #0
   15040:	mov	r1, r0
   15044:	orr	r0, lr, r2
   15048:	mvnne	r7, #0
   1504c:	mvnne	r6, #0
   15050:	b	1569c <__assert_fail@plt+0x4580>
   15054:	mov	r8, r0
   15058:	cmp	sl, #0
   1505c:	bne	14d28 <__assert_fail@plt+0x3c0c>
   15060:	b	158f0 <__assert_fail@plt+0x47d4>
   15064:	cmp	r0, #105	; 0x69
   15068:	mov	r3, #0
   1506c:	bne	14eb0 <__assert_fail@plt+0x3d94>
   15070:	ldrb	r0, [r1, #2]
   15074:	mov	r1, #1
   15078:	cmp	r0, #66	; 0x42
   1507c:	movweq	r1, #3
   15080:	str	r1, [sp, #28]
   15084:	sub	r0, r4, #66	; 0x42
   15088:	cmp	r0, #53	; 0x35
   1508c:	bls	14ebc <__assert_fail@plt+0x3da0>
   15090:	ldr	r0, [sp, #36]	; 0x24
   15094:	orr	r8, r8, #2
   15098:	strd	r6, [r0]
   1509c:	mov	r0, r8
   150a0:	sub	sp, fp, #28
   150a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150a8:	mvn	r0, #0
   150ac:	mvn	r1, #0
   150b0:	mov	r2, r5
   150b4:	mov	r4, r3
   150b8:	bl	160cc <__assert_fail@plt+0x4fb0>
   150bc:	subs	r0, r0, r6
   150c0:	mov	r2, #0
   150c4:	sbcs	r0, r1, r7
   150c8:	umull	r0, r1, r6, r5
   150cc:	movwcc	r2, #1
   150d0:	cmp	r2, #0
   150d4:	mla	r1, r6, r4, r1
   150d8:	mov	r3, r2
   150dc:	mvnne	r0, #0
   150e0:	mla	r7, r7, r5, r1
   150e4:	mvnne	r7, #0
   150e8:	mov	r6, r0
   150ec:	b	158d0 <__assert_fail@plt+0x47b4>
   150f0:	mvn	r0, #0
   150f4:	mvn	r1, #0
   150f8:	mov	r2, r5
   150fc:	str	r3, [sp, #24]
   15100:	bl	160cc <__assert_fail@plt+0x4fb0>
   15104:	subs	r3, r0, r6
   15108:	mov	ip, r0
   1510c:	umull	r4, r0, r6, r5
   15110:	mov	sl, #0
   15114:	sbcs	r3, r1, r7
   15118:	mov	r3, #0
   1511c:	movwcc	r3, #1
   15120:	cmp	r3, #0
   15124:	str	r0, [sp, #20]
   15128:	ldr	r0, [sp, #24]
   1512c:	mvnne	r4, #0
   15130:	cmp	r3, #0
   15134:	umull	lr, r2, r4, r5
   15138:	mla	r2, r4, r0, r2
   1513c:	str	r2, [sp, #16]
   15140:	ldr	r2, [sp, #20]
   15144:	mla	r6, r6, r0, r2
   15148:	ldr	r0, [sp, #16]
   1514c:	mla	r6, r7, r5, r6
   15150:	mvnne	r6, #0
   15154:	mla	r7, r6, r5, r0
   15158:	subs	r0, ip, r4
   1515c:	sbcs	r0, r1, r6
   15160:	movwcc	sl, #1
   15164:	cmp	sl, #0
   15168:	orr	r3, r3, sl
   1516c:	mvnne	lr, #0
   15170:	mvnne	r7, #0
   15174:	mov	r6, lr
   15178:	b	158d0 <__assert_fail@plt+0x47b4>
   1517c:	mvn	r0, #0
   15180:	mvn	r1, #0
   15184:	mov	r2, r5
   15188:	mov	sl, r3
   1518c:	bl	160cc <__assert_fail@plt+0x4fb0>
   15190:	subs	r3, r0, r6
   15194:	mov	ip, r1
   15198:	umull	r2, lr, r6, r5
   1519c:	str	r0, [sp, #20]
   151a0:	sbcs	r3, r1, r7
   151a4:	mov	r1, #0
   151a8:	str	ip, [sp, #16]
   151ac:	movwcc	r1, #1
   151b0:	mla	r6, r6, sl, lr
   151b4:	mov	lr, #0
   151b8:	cmp	r1, #0
   151bc:	mla	r7, r7, r5, r6
   151c0:	mvnne	r2, #0
   151c4:	cmp	r1, #0
   151c8:	umull	r3, r4, r2, r5
   151cc:	mvnne	r7, #0
   151d0:	mla	r4, r2, sl, r4
   151d4:	subs	r2, r0, r2
   151d8:	sbcs	r2, ip, r7
   151dc:	mla	r4, r7, r5, r4
   151e0:	mov	r2, #0
   151e4:	movwcc	lr, #1
   151e8:	cmp	lr, #0
   151ec:	mvnne	r3, #0
   151f0:	mvnne	r4, #0
   151f4:	subs	r7, r0, r3
   151f8:	mov	r0, r5
   151fc:	sbcs	r7, ip, r4
   15200:	umull	r5, r7, r3, r5
   15204:	movwcc	r2, #1
   15208:	cmp	r2, #0
   1520c:	mla	r3, r3, sl, r7
   15210:	mvnne	r5, #0
   15214:	cmp	r2, #0
   15218:	mla	r3, r4, r0, r3
   1521c:	umull	r6, ip, r5, r0
   15220:	mvnne	r3, #0
   15224:	mla	ip, r5, sl, ip
   15228:	mla	r7, r3, r0, ip
   1522c:	ldr	r0, [sp, #20]
   15230:	subs	r0, r0, r5
   15234:	ldr	r0, [sp, #16]
   15238:	sbcs	r0, r0, r3
   1523c:	mov	r0, #0
   15240:	movwcc	r0, #1
   15244:	cmp	r0, #0
   15248:	mov	r3, r0
   1524c:	orr	r0, r1, lr
   15250:	orr	r0, r0, r2
   15254:	mvnne	r7, #0
   15258:	mvnne	r6, #0
   1525c:	orr	r3, r0, r3
   15260:	b	158d0 <__assert_fail@plt+0x47b4>
   15264:	mvn	r0, #0
   15268:	mvn	r1, #0
   1526c:	mov	r2, r5
   15270:	mov	r4, r3
   15274:	str	r3, [sp, #24]
   15278:	bl	160cc <__assert_fail@plt+0x4fb0>
   1527c:	umull	r3, r2, r6, r5
   15280:	mla	r2, r6, r4, r2
   15284:	subs	r6, r0, r6
   15288:	sbcs	r6, r1, r7
   1528c:	mov	r6, #0
   15290:	mla	r2, r7, r5, r2
   15294:	mov	r7, #0
   15298:	movwcc	r6, #1
   1529c:	cmp	r6, #0
   152a0:	str	r6, [sp, #20]
   152a4:	mvnne	r3, #0
   152a8:	mvnne	r2, #0
   152ac:	subs	r4, r0, r3
   152b0:	umull	r6, ip, r3, r5
   152b4:	sbcs	r4, r1, r2
   152b8:	ldr	r4, [sp, #24]
   152bc:	movwcc	r7, #1
   152c0:	cmp	r7, #0
   152c4:	mov	lr, r7
   152c8:	str	r7, [sp, #16]
   152cc:	mvnne	r6, #0
   152d0:	cmp	lr, #0
   152d4:	mov	lr, #0
   152d8:	umull	sl, r7, r6, r5
   152dc:	mla	r3, r3, r4, ip
   152e0:	mla	r2, r2, r5, r3
   152e4:	mvnne	r2, #0
   152e8:	subs	r3, r0, r6
   152ec:	mla	r7, r6, r4, r7
   152f0:	mov	r4, r0
   152f4:	mov	r0, #0
   152f8:	mla	r7, r2, r5, r7
   152fc:	sbcs	r2, r1, r2
   15300:	mov	r3, r4
   15304:	movwcc	r0, #1
   15308:	str	r3, [sp, #4]
   1530c:	cmp	r0, #0
   15310:	str	r0, [sp, #12]
   15314:	mov	r0, r1
   15318:	mvnne	sl, #0
   1531c:	mvnne	r7, #0
   15320:	str	r0, [sp, #8]
   15324:	subs	r2, r4, sl
   15328:	ldr	r4, [sp, #24]
   1532c:	sbcs	r2, r1, r7
   15330:	umull	r6, r2, sl, r5
   15334:	movwcc	lr, #1
   15338:	cmp	lr, #0
   1533c:	mvnne	r6, #0
   15340:	mla	r2, sl, r4, r2
   15344:	cmp	lr, #0
   15348:	umull	r1, ip, r6, r5
   1534c:	mla	r2, r7, r5, r2
   15350:	mvnne	r2, #0
   15354:	mla	ip, r6, r4, ip
   15358:	subs	r6, r3, r6
   1535c:	mla	r7, r2, r5, ip
   15360:	sbcs	r2, r0, r2
   15364:	mov	ip, #0
   15368:	mov	r2, #0
   1536c:	movwcc	ip, #1
   15370:	cmp	ip, #0
   15374:	mvnne	r1, #0
   15378:	mvnne	r7, #0
   1537c:	subs	r6, r3, r1
   15380:	ldr	r3, [sp, #24]
   15384:	sbcs	r6, r0, r7
   15388:	umull	r0, sl, r1, r5
   1538c:	movwcc	r2, #1
   15390:	cmp	r2, #0
   15394:	mvnne	r0, #0
   15398:	mla	r1, r1, r3, sl
   1539c:	cmp	r2, #0
   153a0:	umull	r6, r4, r0, r5
   153a4:	mla	r1, r7, r5, r1
   153a8:	mvnne	r1, #0
   153ac:	mla	r4, r0, r3, r4
   153b0:	ldr	r3, [sp, #4]
   153b4:	mla	r7, r1, r5, r4
   153b8:	ldr	r5, [sp, #16]
   153bc:	subs	r0, r3, r0
   153c0:	ldr	r0, [sp, #8]
   153c4:	sbcs	r0, r0, r1
   153c8:	mov	r0, #0
   153cc:	movwcc	r0, #1
   153d0:	cmp	r0, #0
   153d4:	mov	r1, r0
   153d8:	ldr	r0, [sp, #20]
   153dc:	mvnne	r7, #0
   153e0:	mvnne	r6, #0
   153e4:	orr	r0, r0, r5
   153e8:	ldr	r5, [sp, #12]
   153ec:	orr	r0, r0, r5
   153f0:	orr	r0, r0, lr
   153f4:	orr	r0, r0, ip
   153f8:	orr	r0, r0, r2
   153fc:	b	1586c <__assert_fail@plt+0x4750>
   15400:	mov	r1, #0
   15404:	lsl	r2, r7, #10
   15408:	lsl	r0, r6, #10
   1540c:	lsr	r3, r7, #22
   15410:	cmp	r1, r7, lsr #22
   15414:	orr	r2, r2, r6, lsr #22
   15418:	mvnne	r0, #0
   1541c:	movwne	r3, #1
   15420:	cmp	r1, r7, lsr #22
   15424:	b	1589c <__assert_fail@plt+0x4780>
   15428:	mvn	r0, #0
   1542c:	mvn	r1, #0
   15430:	mov	r2, r5
   15434:	mov	sl, r3
   15438:	bl	160cc <__assert_fail@plt+0x4fb0>
   1543c:	subs	r2, r0, r6
   15440:	mov	ip, r0
   15444:	mov	r0, #0
   15448:	sbcs	r2, r1, r7
   1544c:	umull	r4, r2, r6, r5
   15450:	movwcc	r0, #1
   15454:	cmp	r0, #0
   15458:	mla	r2, r6, sl, r2
   1545c:	str	r0, [sp, #20]
   15460:	mvnne	r4, #0
   15464:	cmp	r0, #0
   15468:	mla	r2, r7, r5, r2
   1546c:	mov	r0, #0
   15470:	umull	lr, r3, r4, r5
   15474:	mvnne	r2, #0
   15478:	mla	r3, r4, sl, r3
   1547c:	mla	r6, r2, r5, r3
   15480:	subs	r3, ip, r4
   15484:	mov	r3, r1
   15488:	sbcs	r2, r1, r2
   1548c:	str	r3, [sp, #8]
   15490:	movwcc	r0, #1
   15494:	cmp	r0, #0
   15498:	str	r0, [sp, #16]
   1549c:	mov	r0, ip
   154a0:	mvnne	lr, #0
   154a4:	mvnne	r6, #0
   154a8:	str	r0, [sp, #12]
   154ac:	subs	r2, ip, lr
   154b0:	umull	r7, r4, lr, r5
   154b4:	sbcs	r2, r1, r6
   154b8:	mov	r2, #0
   154bc:	movwcc	r2, #1
   154c0:	mla	r4, lr, sl, r4
   154c4:	cmp	r2, #0
   154c8:	mla	r6, r6, r5, r4
   154cc:	mov	r4, #0
   154d0:	mvnne	r7, #0
   154d4:	cmp	r2, #0
   154d8:	umull	r1, ip, r7, r5
   154dc:	mvnne	r6, #0
   154e0:	mla	ip, r7, sl, ip
   154e4:	subs	r7, r0, r7
   154e8:	sbcs	r7, r3, r6
   154ec:	mla	lr, r6, r5, ip
   154f0:	mov	ip, #0
   154f4:	movwcc	ip, #1
   154f8:	cmp	ip, #0
   154fc:	mvnne	r1, #0
   15500:	mvnne	lr, #0
   15504:	subs	r7, r0, r1
   15508:	sbcs	r7, r3, lr
   1550c:	umull	r0, r7, r1, r5
   15510:	movwcc	r4, #1
   15514:	cmp	r4, #0
   15518:	mla	r1, r1, sl, r7
   1551c:	mvnne	r0, #0
   15520:	cmp	r4, #0
   15524:	mla	r1, lr, r5, r1
   15528:	umull	r6, r3, r0, r5
   1552c:	mvnne	r1, #0
   15530:	mla	r3, r0, sl, r3
   15534:	mla	r7, r1, r5, r3
   15538:	ldr	r3, [sp, #12]
   1553c:	subs	r0, r3, r0
   15540:	ldr	r0, [sp, #8]
   15544:	ldr	r3, [sp, #16]
   15548:	sbcs	r0, r0, r1
   1554c:	mov	r0, #0
   15550:	movwcc	r0, #1
   15554:	cmp	r0, #0
   15558:	mov	r1, r0
   1555c:	ldr	r0, [sp, #20]
   15560:	mvnne	r7, #0
   15564:	mvnne	r6, #0
   15568:	orr	r0, r0, r3
   1556c:	orr	r0, r0, r2
   15570:	orr	r0, r0, ip
   15574:	orr	r0, r0, r4
   15578:	b	1569c <__assert_fail@plt+0x4580>
   1557c:	mvn	r0, #0
   15580:	mvn	r1, #0
   15584:	mov	r2, r5
   15588:	mov	sl, r3
   1558c:	bl	160cc <__assert_fail@plt+0x4fb0>
   15590:	umull	r3, r2, r6, r5
   15594:	mov	lr, r1
   15598:	mov	r1, r0
   1559c:	mla	r2, r6, sl, r2
   155a0:	subs	r6, r0, r6
   155a4:	mov	r0, #0
   155a8:	sbcs	r6, lr, r7
   155ac:	mla	r2, r7, r5, r2
   155b0:	movwcc	r0, #1
   155b4:	cmp	r0, #0
   155b8:	str	r0, [sp, #20]
   155bc:	mov	r0, r1
   155c0:	mvnne	r3, #0
   155c4:	mvnne	r2, #0
   155c8:	str	r0, [sp, #16]
   155cc:	subs	r4, r1, r3
   155d0:	umull	r7, ip, r3, r5
   155d4:	sbcs	r4, lr, r2
   155d8:	mov	r4, #0
   155dc:	movwcc	r4, #1
   155e0:	mla	r3, r3, sl, ip
   155e4:	mov	ip, #0
   155e8:	cmp	r4, #0
   155ec:	mla	r2, r2, r5, r3
   155f0:	mvnne	r7, #0
   155f4:	cmp	r4, #0
   155f8:	umull	r1, r6, r7, r5
   155fc:	mvnne	r2, #0
   15600:	mla	r6, r7, sl, r6
   15604:	mla	r3, r2, r5, r6
   15608:	subs	r6, r0, r7
   1560c:	sbcs	r2, lr, r2
   15610:	mov	r2, #0
   15614:	movwcc	ip, #1
   15618:	cmp	ip, #0
   1561c:	mvnne	r1, #0
   15620:	mvnne	r3, #0
   15624:	subs	r6, r0, r1
   15628:	sbcs	r6, lr, r3
   1562c:	umull	r0, r6, r1, r5
   15630:	movwcc	r2, #1
   15634:	cmp	r2, #0
   15638:	mvnne	r0, #0
   1563c:	cmp	r2, #0
   15640:	str	r6, [sp, #12]
   15644:	umull	r6, r7, r0, r5
   15648:	mla	r7, r0, sl, r7
   1564c:	str	r7, [sp, #8]
   15650:	ldr	r7, [sp, #12]
   15654:	mla	r1, r1, sl, r7
   15658:	mla	r1, r3, r5, r1
   1565c:	ldr	r3, [sp, #8]
   15660:	mvnne	r1, #0
   15664:	mla	r7, r1, r5, r3
   15668:	ldr	r3, [sp, #16]
   1566c:	subs	r0, r3, r0
   15670:	sbcs	r0, lr, r1
   15674:	mov	r0, #0
   15678:	movwcc	r0, #1
   1567c:	cmp	r0, #0
   15680:	mov	r1, r0
   15684:	ldr	r0, [sp, #20]
   15688:	mvnne	r7, #0
   1568c:	mvnne	r6, #0
   15690:	orr	r0, r0, r4
   15694:	orr	r0, r0, ip
   15698:	orr	r0, r0, r2
   1569c:	orr	r3, r0, r1
   156a0:	b	158d0 <__assert_fail@plt+0x47b4>
   156a4:	mvn	r0, #0
   156a8:	mvn	r1, #0
   156ac:	mov	r2, r5
   156b0:	mov	sl, r3
   156b4:	bl	160cc <__assert_fail@plt+0x4fb0>
   156b8:	mov	ip, r1
   156bc:	subs	r1, r0, r6
   156c0:	umull	r3, lr, r6, r5
   156c4:	mov	r2, r5
   156c8:	sbcs	r1, ip, r7
   156cc:	mov	r1, #0
   156d0:	str	ip, [sp, #4]
   156d4:	movwcc	r1, #1
   156d8:	mla	r6, r6, sl, lr
   156dc:	cmp	r1, #0
   156e0:	mla	r7, r7, r2, r6
   156e4:	str	r1, [sp, #20]
   156e8:	mvnne	r3, #0
   156ec:	cmp	r1, #0
   156f0:	mov	r1, r0
   156f4:	umull	r4, r5, r3, r5
   156f8:	mvnne	r7, #0
   156fc:	mov	lr, r1
   15700:	mla	r5, r3, sl, r5
   15704:	subs	r3, r0, r3
   15708:	sbcs	r0, ip, r7
   1570c:	mov	r0, #0
   15710:	mla	r5, r7, r2, r5
   15714:	movwcc	r0, #1
   15718:	cmp	r0, #0
   1571c:	str	r0, [sp, #16]
   15720:	mvnne	r4, #0
   15724:	mvnne	r5, #0
   15728:	subs	r0, r1, r4
   1572c:	mov	r1, #0
   15730:	sbcs	r0, ip, r5
   15734:	umull	r3, r0, r4, r2
   15738:	movwcc	r1, #1
   1573c:	cmp	r1, #0
   15740:	mla	r0, r4, sl, r0
   15744:	mov	r4, lr
   15748:	str	r1, [sp, #12]
   1574c:	mvnne	r3, #0
   15750:	cmp	r1, #0
   15754:	mla	r0, r5, r2, r0
   15758:	str	r4, [sp]
   1575c:	umull	r7, r6, r3, r2
   15760:	mvnne	r0, #0
   15764:	mla	r6, r3, sl, r6
   15768:	subs	r3, lr, r3
   1576c:	mov	r3, #0
   15770:	mla	r5, r0, r2, r6
   15774:	sbcs	r0, ip, r0
   15778:	mov	r0, #0
   1577c:	movwcc	r0, #1
   15780:	cmp	r0, #0
   15784:	str	r0, [sp, #8]
   15788:	mvnne	r7, #0
   1578c:	mvnne	r5, #0
   15790:	subs	r0, lr, r7
   15794:	sbcs	r0, ip, r5
   15798:	umull	r6, r0, r7, r2
   1579c:	movwcc	r3, #1
   157a0:	cmp	r3, #0
   157a4:	mla	r7, r7, sl, r0
   157a8:	mov	r0, ip
   157ac:	mvnne	r6, #0
   157b0:	cmp	r3, #0
   157b4:	mla	r7, r5, r2, r7
   157b8:	mov	r5, #0
   157bc:	umull	r1, lr, r6, r2
   157c0:	mvnne	r7, #0
   157c4:	mla	lr, r6, sl, lr
   157c8:	subs	r6, r4, r6
   157cc:	mla	lr, r7, r2, lr
   157d0:	sbcs	r7, ip, r7
   157d4:	mov	ip, #0
   157d8:	movwcc	ip, #1
   157dc:	cmp	ip, #0
   157e0:	mvnne	r1, #0
   157e4:	mvnne	lr, #0
   157e8:	subs	r7, r4, r1
   157ec:	sbcs	r7, r0, lr
   157f0:	umull	r0, r7, r1, r2
   157f4:	movwcc	r5, #1
   157f8:	cmp	r5, #0
   157fc:	mla	r1, r1, sl, r7
   15800:	mvnne	r0, #0
   15804:	cmp	r5, #0
   15808:	mla	r1, lr, r2, r1
   1580c:	umull	r6, r4, r0, r2
   15810:	mvnne	r1, #0
   15814:	mla	r4, r0, sl, r4
   15818:	mla	r7, r1, r2, r4
   1581c:	ldr	r2, [sp]
   15820:	subs	r0, r2, r0
   15824:	ldr	r0, [sp, #4]
   15828:	ldr	r2, [sp, #16]
   1582c:	sbcs	r0, r0, r1
   15830:	mov	r0, #0
   15834:	movwcc	r0, #1
   15838:	cmp	r0, #0
   1583c:	mov	r1, r0
   15840:	ldr	r0, [sp, #20]
   15844:	mvnne	r7, #0
   15848:	mvnne	r6, #0
   1584c:	orr	r0, r0, r2
   15850:	ldr	r2, [sp, #12]
   15854:	orr	r0, r0, r2
   15858:	ldr	r2, [sp, #8]
   1585c:	orr	r0, r0, r2
   15860:	orr	r0, r0, r3
   15864:	orr	r0, r0, ip
   15868:	orr	r0, r0, r5
   1586c:	orr	r0, r0, r1
   15870:	and	r3, r0, #1
   15874:	b	158d0 <__assert_fail@plt+0x47b4>
   15878:	mov	r1, #0
   1587c:	lsl	r2, r7, #9
   15880:	lsl	r0, r6, #9
   15884:	lsr	r3, r7, #23
   15888:	cmp	r1, r7, lsr #23
   1588c:	orr	r2, r2, r6, lsr #23
   15890:	mvnne	r0, #0
   15894:	movwne	r3, #1
   15898:	cmp	r1, r7, lsr #23
   1589c:	mvnne	r2, #0
   158a0:	mov	r6, r0
   158a4:	mov	r7, r2
   158a8:	b	158d0 <__assert_fail@plt+0x47b4>
   158ac:	lsl	r1, r7, #1
   158b0:	cmp	r7, #0
   158b4:	lsl	r0, r6, #1
   158b8:	lsr	r3, r7, #31
   158bc:	orr	r1, r1, r6, lsr #31
   158c0:	mvnmi	r0, #0
   158c4:	mvnmi	r1, #0
   158c8:	mov	r6, r0
   158cc:	mov	r7, r1
   158d0:	ldr	r1, [sp, #32]
   158d4:	ldr	r2, [sp, #28]
   158d8:	orr	r8, r3, r8
   158dc:	add	r0, r1, r2
   158e0:	str	r0, [r9]
   158e4:	ldrb	r0, [r1, r2]
   158e8:	cmp	r0, #0
   158ec:	orrne	r8, r8, #2
   158f0:	ldr	r0, [sp, #36]	; 0x24
   158f4:	strd	r6, [r0]
   158f8:	mov	r0, r8
   158fc:	sub	sp, fp, #28
   15900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15904:	movw	r0, #28533	; 0x6f75
   15908:	movw	r1, #28571	; 0x6f9b
   1590c:	movw	r3, #28587	; 0x6fab
   15910:	mov	r2, #85	; 0x55
   15914:	movt	r0, #1
   15918:	movt	r1, #1
   1591c:	movt	r3, #1
   15920:	bl	1111c <__assert_fail@plt>
   15924:	clz	r2, r1
   15928:	clz	r3, r0
   1592c:	lsr	r2, r2, #5
   15930:	lsr	r3, r3, #5
   15934:	orrs	r2, r3, r2
   15938:	movwne	r1, #1
   1593c:	movwne	r0, #1
   15940:	cmp	r1, #0
   15944:	beq	15974 <__assert_fail@plt+0x4858>
   15948:	mvn	r2, #-2147483648	; 0x80000000
   1594c:	udiv	r2, r2, r1
   15950:	cmp	r2, r0
   15954:	bcs	15974 <__assert_fail@plt+0x4858>
   15958:	push	{fp, lr}
   1595c:	mov	fp, sp
   15960:	bl	11038 <__errno_location@plt>
   15964:	mov	r1, #12
   15968:	str	r1, [r0]
   1596c:	mov	r0, #0
   15970:	pop	{fp, pc}
   15974:	b	10e94 <calloc@plt>
   15978:	cmp	r0, #0
   1597c:	movweq	r0, #1
   15980:	cmn	r0, #1
   15984:	ble	1598c <__assert_fail@plt+0x4870>
   15988:	b	10fb4 <malloc@plt>
   1598c:	push	{fp, lr}
   15990:	mov	fp, sp
   15994:	bl	11038 <__errno_location@plt>
   15998:	mov	r1, #12
   1599c:	str	r1, [r0]
   159a0:	mov	r0, #0
   159a4:	pop	{fp, pc}
   159a8:	push	{fp, lr}
   159ac:	mov	fp, sp
   159b0:	cmp	r0, #0
   159b4:	beq	159d0 <__assert_fail@plt+0x48b4>
   159b8:	cmp	r1, #0
   159bc:	beq	159dc <__assert_fail@plt+0x48c0>
   159c0:	cmn	r1, #1
   159c4:	ble	159e8 <__assert_fail@plt+0x48cc>
   159c8:	pop	{fp, lr}
   159cc:	b	10f24 <realloc@plt>
   159d0:	mov	r0, r1
   159d4:	pop	{fp, lr}
   159d8:	b	15978 <__assert_fail@plt+0x485c>
   159dc:	bl	11ff8 <__assert_fail@plt+0xedc>
   159e0:	mov	r0, #0
   159e4:	pop	{fp, pc}
   159e8:	bl	11038 <__errno_location@plt>
   159ec:	mov	r1, #12
   159f0:	str	r1, [r0]
   159f4:	mov	r0, #0
   159f8:	pop	{fp, pc}
   159fc:	push	{fp, lr}
   15a00:	mov	fp, sp
   15a04:	sub	sp, sp, #8
   15a08:	mov	r1, r0
   15a0c:	movw	r0, #23096	; 0x5a38
   15a10:	mov	r2, #0
   15a14:	mov	r3, #0
   15a18:	movt	r0, #1
   15a1c:	str	r2, [sp]
   15a20:	mov	r2, #0
   15a24:	str	r0, [sp, #4]
   15a28:	mvn	r0, #99	; 0x63
   15a2c:	bl	15af4 <__assert_fail@plt+0x49d8>
   15a30:	mov	sp, fp
   15a34:	pop	{fp, pc}
   15a38:	cmn	r0, #100	; 0x64
   15a3c:	bne	15a50 <__assert_fail@plt+0x4934>
   15a40:	mov	r0, r1
   15a44:	mov	r1, r2
   15a48:	mov	r2, r3
   15a4c:	b	10f48 <readlink@plt>
   15a50:	push	{fp, lr}
   15a54:	mov	fp, sp
   15a58:	bl	11104 <abort@plt>
   15a5c:	sub	r0, r0, #1
   15a60:	ldrb	r3, [r0, #1]!
   15a64:	cmp	r3, #47	; 0x2f
   15a68:	beq	15a60 <__assert_fail@plt+0x4944>
   15a6c:	mov	r2, #0
   15a70:	mov	r1, r0
   15a74:	uxtb	r3, r3
   15a78:	cmp	r3, #47	; 0x2f
   15a7c:	bne	15a94 <__assert_fail@plt+0x4978>
   15a80:	ldrb	r3, [r1, #1]!
   15a84:	mov	r2, #1
   15a88:	uxtb	r3, r3
   15a8c:	cmp	r3, #47	; 0x2f
   15a90:	beq	15a80 <__assert_fail@plt+0x4964>
   15a94:	cmp	r3, #0
   15a98:	bxeq	lr
   15a9c:	tst	r2, #1
   15aa0:	mov	r2, #0
   15aa4:	movne	r0, r1
   15aa8:	ldrb	r3, [r1, #1]!
   15aac:	uxtb	r3, r3
   15ab0:	cmp	r3, #47	; 0x2f
   15ab4:	bne	15a94 <__assert_fail@plt+0x4978>
   15ab8:	b	15a80 <__assert_fail@plt+0x4964>
   15abc:	push	{r4, sl, fp, lr}
   15ac0:	add	fp, sp, #8
   15ac4:	mov	r4, r0
   15ac8:	bl	11020 <strlen@plt>
   15acc:	mov	r1, r0
   15ad0:	sub	r2, r4, #1
   15ad4:	mov	r0, r1
   15ad8:	cmp	r1, #2
   15adc:	bcc	15af0 <__assert_fail@plt+0x49d4>
   15ae0:	ldrb	r3, [r2, r0]
   15ae4:	sub	r1, r0, #1
   15ae8:	cmp	r3, #47	; 0x2f
   15aec:	beq	15ad4 <__assert_fail@plt+0x49b8>
   15af0:	pop	{r4, sl, fp, pc}
   15af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15af8:	add	fp, sp, #28
   15afc:	sub	sp, sp, #4
   15b00:	sub	sp, sp, #1024	; 0x400
   15b04:	mov	r9, r0
   15b08:	mov	r0, sp
   15b0c:	cmp	r2, #0
   15b10:	mov	r5, r2
   15b14:	mov	r4, r3
   15b18:	ldr	sl, [fp, #12]
   15b1c:	movw	r7, #28672	; 0x7000
   15b20:	mov	r8, r1
   15b24:	moveq	r5, r0
   15b28:	ldr	r0, [fp, #8]
   15b2c:	movweq	r4, #1024	; 0x400
   15b30:	movt	r7, #1
   15b34:	cmn	r4, #-2147483647	; 0x80000001
   15b38:	mov	r6, r5
   15b3c:	mvncs	r4, #-2147483648	; 0x80000000
   15b40:	cmp	r0, #0
   15b44:	movne	r7, r0
   15b48:	mov	r0, r9
   15b4c:	mov	r1, r8
   15b50:	mov	r2, r6
   15b54:	mov	r3, r4
   15b58:	blx	sl
   15b5c:	cmn	r0, #1
   15b60:	ble	15bc8 <__assert_fail@plt+0x4aac>
   15b64:	cmp	r0, r4
   15b68:	blt	15bfc <__assert_fail@plt+0x4ae0>
   15b6c:	cmp	r6, r5
   15b70:	beq	15b80 <__assert_fail@plt+0x4a64>
   15b74:	ldr	r1, [r7, #8]
   15b78:	mov	r0, r6
   15b7c:	blx	r1
   15b80:	cmn	r4, #-1073741823	; 0xc0000001
   15b84:	bge	15c54 <__assert_fail@plt+0x4b38>
   15b88:	mov	r0, #1
   15b8c:	ldr	r1, [r7]
   15b90:	orr	r4, r0, r4, lsl #1
   15b94:	mov	r0, r4
   15b98:	blx	r1
   15b9c:	mov	r6, r0
   15ba0:	cmp	r0, #0
   15ba4:	bne	15b48 <__assert_fail@plt+0x4a2c>
   15ba8:	ldr	r1, [r7, #12]
   15bac:	cmp	r1, #0
   15bb0:	beq	15bbc <__assert_fail@plt+0x4aa0>
   15bb4:	mov	r0, r4
   15bb8:	blx	r1
   15bbc:	bl	11038 <__errno_location@plt>
   15bc0:	mov	r1, #12
   15bc4:	b	15c5c <__assert_fail@plt+0x4b40>
   15bc8:	mov	r4, #0
   15bcc:	cmp	r6, r5
   15bd0:	beq	15bf0 <__assert_fail@plt+0x4ad4>
   15bd4:	bl	11038 <__errno_location@plt>
   15bd8:	ldr	r1, [r7, #8]
   15bdc:	ldr	r8, [r0]
   15be0:	mov	r5, r0
   15be4:	mov	r0, r6
   15be8:	blx	r1
   15bec:	str	r8, [r5]
   15bf0:	mov	r0, r4
   15bf4:	sub	sp, fp, #28
   15bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bfc:	mov	r1, #0
   15c00:	add	r8, r0, #1
   15c04:	strb	r1, [r6, r0]
   15c08:	mov	r0, sp
   15c0c:	cmp	r6, r0
   15c10:	beq	15c80 <__assert_fail@plt+0x4b64>
   15c14:	cmp	r6, r5
   15c18:	beq	15c70 <__assert_fail@plt+0x4b54>
   15c1c:	cmp	r8, r4
   15c20:	bge	15c70 <__assert_fail@plt+0x4b54>
   15c24:	ldr	r2, [r7, #4]
   15c28:	cmp	r2, #0
   15c2c:	beq	15c70 <__assert_fail@plt+0x4b54>
   15c30:	mov	r0, r6
   15c34:	mov	r1, r8
   15c38:	blx	r2
   15c3c:	cmp	r0, #0
   15c40:	mov	r4, r0
   15c44:	moveq	r4, r6
   15c48:	mov	r0, r4
   15c4c:	sub	sp, fp, #28
   15c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c54:	bl	11038 <__errno_location@plt>
   15c58:	mov	r1, #36	; 0x24
   15c5c:	mov	r4, #0
   15c60:	str	r1, [r0]
   15c64:	mov	r0, r4
   15c68:	sub	sp, fp, #28
   15c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c70:	mov	r4, r6
   15c74:	mov	r0, r4
   15c78:	sub	sp, fp, #28
   15c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c80:	ldr	r1, [r7]
   15c84:	mov	r0, r8
   15c88:	blx	r1
   15c8c:	cmp	r0, #0
   15c90:	beq	15cb0 <__assert_fail@plt+0x4b94>
   15c94:	mov	r1, sp
   15c98:	mov	r2, r8
   15c9c:	mov	r4, r0
   15ca0:	bl	10ee8 <memcpy@plt>
   15ca4:	mov	r0, r4
   15ca8:	sub	sp, fp, #28
   15cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cb0:	mov	r4, r8
   15cb4:	ldr	r1, [r7, #12]
   15cb8:	cmp	r1, #0
   15cbc:	bne	15bb4 <__assert_fail@plt+0x4a98>
   15cc0:	b	15bbc <__assert_fail@plt+0x4aa0>
   15cc4:	push	{r4, r5, r6, sl, fp, lr}
   15cc8:	add	fp, sp, #16
   15ccc:	mov	r4, r0
   15cd0:	bl	10f78 <__fpending@plt>
   15cd4:	ldr	r6, [r4]
   15cd8:	mov	r5, r0
   15cdc:	mov	r0, r4
   15ce0:	bl	15d48 <__assert_fail@plt+0x4c2c>
   15ce4:	tst	r6, #32
   15ce8:	bne	15d20 <__assert_fail@plt+0x4c04>
   15cec:	cmp	r0, #0
   15cf0:	mov	r4, r0
   15cf4:	mvnne	r4, #0
   15cf8:	cmp	r5, #0
   15cfc:	bne	15d2c <__assert_fail@plt+0x4c10>
   15d00:	cmp	r0, #0
   15d04:	beq	15d2c <__assert_fail@plt+0x4c10>
   15d08:	bl	11038 <__errno_location@plt>
   15d0c:	ldr	r0, [r0]
   15d10:	subs	r4, r0, #9
   15d14:	mvnne	r4, #0
   15d18:	mov	r0, r4
   15d1c:	pop	{r4, r5, r6, sl, fp, pc}
   15d20:	mvn	r4, #0
   15d24:	cmp	r0, #0
   15d28:	beq	15d34 <__assert_fail@plt+0x4c18>
   15d2c:	mov	r0, r4
   15d30:	pop	{r4, r5, r6, sl, fp, pc}
   15d34:	bl	11038 <__errno_location@plt>
   15d38:	mov	r1, #0
   15d3c:	str	r1, [r0]
   15d40:	mov	r0, r4
   15d44:	pop	{r4, r5, r6, sl, fp, pc}
   15d48:	push	{r4, r5, r6, sl, fp, lr}
   15d4c:	add	fp, sp, #16
   15d50:	sub	sp, sp, #8
   15d54:	mov	r4, r0
   15d58:	bl	11068 <fileno@plt>
   15d5c:	cmn	r0, #1
   15d60:	ble	15dd4 <__assert_fail@plt+0x4cb8>
   15d64:	mov	r0, r4
   15d68:	bl	10fcc <__freading@plt>
   15d6c:	cmp	r0, #0
   15d70:	beq	15d9c <__assert_fail@plt+0x4c80>
   15d74:	mov	r0, r4
   15d78:	bl	11068 <fileno@plt>
   15d7c:	mov	r1, #1
   15d80:	mov	r2, #0
   15d84:	mov	r3, #0
   15d88:	str	r1, [sp]
   15d8c:	bl	10f60 <lseek64@plt>
   15d90:	and	r0, r0, r1
   15d94:	cmn	r0, #1
   15d98:	beq	15dd4 <__assert_fail@plt+0x4cb8>
   15d9c:	mov	r0, r4
   15da0:	bl	15de4 <__assert_fail@plt+0x4cc8>
   15da4:	cmp	r0, #0
   15da8:	beq	15dd4 <__assert_fail@plt+0x4cb8>
   15dac:	bl	11038 <__errno_location@plt>
   15db0:	ldr	r6, [r0]
   15db4:	mov	r5, r0
   15db8:	mov	r0, r4
   15dbc:	bl	1108c <fclose@plt>
   15dc0:	cmp	r6, #0
   15dc4:	strne	r6, [r5]
   15dc8:	mvnne	r0, #0
   15dcc:	sub	sp, fp, #16
   15dd0:	pop	{r4, r5, r6, sl, fp, pc}
   15dd4:	mov	r0, r4
   15dd8:	sub	sp, fp, #16
   15ddc:	pop	{r4, r5, r6, sl, fp, lr}
   15de0:	b	1108c <fclose@plt>
   15de4:	push	{r4, sl, fp, lr}
   15de8:	add	fp, sp, #8
   15dec:	sub	sp, sp, #8
   15df0:	mov	r4, r0
   15df4:	cmp	r0, #0
   15df8:	beq	15e30 <__assert_fail@plt+0x4d14>
   15dfc:	mov	r0, r4
   15e00:	bl	10fcc <__freading@plt>
   15e04:	cmp	r0, #0
   15e08:	beq	15e30 <__assert_fail@plt+0x4d14>
   15e0c:	ldrb	r0, [r4, #1]
   15e10:	tst	r0, #1
   15e14:	beq	15e30 <__assert_fail@plt+0x4d14>
   15e18:	mov	r0, #1
   15e1c:	mov	r2, #0
   15e20:	mov	r3, #0
   15e24:	str	r0, [sp]
   15e28:	mov	r0, r4
   15e2c:	bl	15e40 <__assert_fail@plt+0x4d24>
   15e30:	mov	r0, r4
   15e34:	sub	sp, fp, #8
   15e38:	pop	{r4, sl, fp, lr}
   15e3c:	b	10ec4 <fflush@plt>
   15e40:	push	{r4, r5, r6, r7, fp, lr}
   15e44:	add	fp, sp, #16
   15e48:	sub	sp, sp, #8
   15e4c:	mov	r4, r0
   15e50:	ldr	r0, [r0, #4]
   15e54:	mov	r5, r3
   15e58:	mov	r6, r2
   15e5c:	ldr	r1, [r4, #8]
   15e60:	cmp	r1, r0
   15e64:	bne	15e80 <__assert_fail@plt+0x4d64>
   15e68:	ldrd	r0, [r4, #16]
   15e6c:	cmp	r1, r0
   15e70:	bne	15e80 <__assert_fail@plt+0x4d64>
   15e74:	ldr	r0, [r4, #36]	; 0x24
   15e78:	cmp	r0, #0
   15e7c:	beq	15e98 <__assert_fail@plt+0x4d7c>
   15e80:	mov	r0, r4
   15e84:	mov	r2, r6
   15e88:	mov	r3, r5
   15e8c:	sub	sp, fp, #16
   15e90:	pop	{r4, r5, r6, r7, fp, lr}
   15e94:	b	11098 <fseeko64@plt>
   15e98:	ldr	r7, [fp, #8]
   15e9c:	mov	r0, r4
   15ea0:	bl	11068 <fileno@plt>
   15ea4:	mov	r2, r6
   15ea8:	mov	r3, r5
   15eac:	str	r7, [sp]
   15eb0:	bl	10f60 <lseek64@plt>
   15eb4:	and	r2, r0, r1
   15eb8:	cmn	r2, #1
   15ebc:	beq	15edc <__assert_fail@plt+0x4dc0>
   15ec0:	strd	r0, [r4, #80]	; 0x50
   15ec4:	ldr	r0, [r4]
   15ec8:	bic	r0, r0, #16
   15ecc:	str	r0, [r4]
   15ed0:	mov	r0, #0
   15ed4:	sub	sp, fp, #16
   15ed8:	pop	{r4, r5, r6, r7, fp, pc}
   15edc:	mvn	r0, #0
   15ee0:	sub	sp, fp, #16
   15ee4:	pop	{r4, r5, r6, r7, fp, pc}
   15ee8:	push	{fp, lr}
   15eec:	mov	fp, sp
   15ef0:	mov	r0, #14
   15ef4:	bl	110d4 <nl_langinfo@plt>
   15ef8:	movw	r1, #27077	; 0x69c5
   15efc:	cmp	r0, #0
   15f00:	movt	r1, #1
   15f04:	movne	r1, r0
   15f08:	movw	r0, #28666	; 0x6ffa
   15f0c:	ldrb	r2, [r1]
   15f10:	movt	r0, #1
   15f14:	cmp	r2, #0
   15f18:	movne	r0, r1
   15f1c:	pop	{fp, pc}
   15f20:	push	{r4, r5, r6, r7, fp, lr}
   15f24:	add	fp, sp, #16
   15f28:	sub	sp, sp, #8
   15f2c:	cmp	r0, #0
   15f30:	add	r5, sp, #4
   15f34:	mov	r7, r2
   15f38:	mov	r4, r1
   15f3c:	movne	r5, r0
   15f40:	mov	r0, r5
   15f44:	bl	10f84 <mbrtowc@plt>
   15f48:	mov	r6, r0
   15f4c:	cmp	r7, #0
   15f50:	beq	15f78 <__assert_fail@plt+0x4e5c>
   15f54:	cmn	r6, #2
   15f58:	bcc	15f78 <__assert_fail@plt+0x4e5c>
   15f5c:	mov	r0, #0
   15f60:	bl	15fc0 <__assert_fail@plt+0x4ea4>
   15f64:	cmp	r0, #0
   15f68:	bne	15f78 <__assert_fail@plt+0x4e5c>
   15f6c:	ldrb	r0, [r4]
   15f70:	mov	r6, #1
   15f74:	str	r0, [r5]
   15f78:	mov	r0, r6
   15f7c:	sub	sp, fp, #16
   15f80:	pop	{r4, r5, r6, r7, fp, pc}
   15f84:	cmp	r2, #0
   15f88:	beq	15fb8 <__assert_fail@plt+0x4e9c>
   15f8c:	mvn	r3, #0
   15f90:	udiv	r3, r3, r2
   15f94:	cmp	r3, r1
   15f98:	bcs	15fb8 <__assert_fail@plt+0x4e9c>
   15f9c:	push	{fp, lr}
   15fa0:	mov	fp, sp
   15fa4:	bl	11038 <__errno_location@plt>
   15fa8:	mov	r1, #12
   15fac:	str	r1, [r0]
   15fb0:	mov	r0, #0
   15fb4:	pop	{fp, pc}
   15fb8:	mul	r1, r2, r1
   15fbc:	b	159a8 <__assert_fail@plt+0x488c>
   15fc0:	push	{r4, sl, fp, lr}
   15fc4:	add	fp, sp, #8
   15fc8:	sub	sp, sp, #264	; 0x108
   15fcc:	add	r1, sp, #7
   15fd0:	movw	r2, #257	; 0x101
   15fd4:	bl	1602c <__assert_fail@plt+0x4f10>
   15fd8:	mov	r4, #0
   15fdc:	cmp	r0, #0
   15fe0:	bne	16020 <__assert_fail@plt+0x4f04>
   15fe4:	movw	r1, #28688	; 0x7010
   15fe8:	add	r0, sp, #7
   15fec:	mov	r2, #2
   15ff0:	movt	r1, #1
   15ff4:	bl	11014 <bcmp@plt>
   15ff8:	cmp	r0, #0
   15ffc:	beq	16020 <__assert_fail@plt+0x4f04>
   16000:	movw	r1, #28690	; 0x7012
   16004:	add	r0, sp, #7
   16008:	mov	r2, #6
   1600c:	movt	r1, #1
   16010:	bl	11014 <bcmp@plt>
   16014:	cmp	r0, #0
   16018:	mov	r4, r0
   1601c:	movwne	r4, #1
   16020:	mov	r0, r4
   16024:	sub	sp, fp, #8
   16028:	pop	{r4, sl, fp, pc}
   1602c:	push	{r4, r5, r6, r7, fp, lr}
   16030:	add	fp, sp, #16
   16034:	mov	r4, r1
   16038:	mov	r1, #0
   1603c:	mov	r6, r2
   16040:	bl	110b0 <setlocale@plt>
   16044:	cmp	r0, #0
   16048:	beq	16078 <__assert_fail@plt+0x4f5c>
   1604c:	mov	r7, r0
   16050:	bl	11020 <strlen@plt>
   16054:	cmp	r0, r6
   16058:	bcs	16094 <__assert_fail@plt+0x4f78>
   1605c:	add	r2, r0, #1
   16060:	mov	r0, r4
   16064:	mov	r1, r7
   16068:	bl	10ee8 <memcpy@plt>
   1606c:	mov	r5, #0
   16070:	mov	r0, r5
   16074:	pop	{r4, r5, r6, r7, fp, pc}
   16078:	mov	r5, #22
   1607c:	cmp	r6, #0
   16080:	beq	160bc <__assert_fail@plt+0x4fa0>
   16084:	mov	r0, #0
   16088:	strb	r0, [r4]
   1608c:	mov	r0, r5
   16090:	pop	{r4, r5, r6, r7, fp, pc}
   16094:	mov	r5, #34	; 0x22
   16098:	cmp	r6, #0
   1609c:	beq	160bc <__assert_fail@plt+0x4fa0>
   160a0:	sub	r6, r6, #1
   160a4:	mov	r0, r4
   160a8:	mov	r1, r7
   160ac:	mov	r2, r6
   160b0:	bl	10ee8 <memcpy@plt>
   160b4:	mov	r0, #0
   160b8:	strb	r0, [r4, r6]
   160bc:	mov	r0, r5
   160c0:	pop	{r4, r5, r6, r7, fp, pc}
   160c4:	mov	r1, #0
   160c8:	b	110b0 <setlocale@plt>
   160cc:	cmp	r3, #0
   160d0:	cmpeq	r2, #0
   160d4:	bne	160ec <__assert_fail@plt+0x4fd0>
   160d8:	cmp	r1, #0
   160dc:	cmpeq	r0, #0
   160e0:	mvnne	r1, #0
   160e4:	mvnne	r0, #0
   160e8:	b	16108 <__assert_fail@plt+0x4fec>
   160ec:	sub	sp, sp, #8
   160f0:	push	{sp, lr}
   160f4:	bl	16118 <__assert_fail@plt+0x4ffc>
   160f8:	ldr	lr, [sp, #4]
   160fc:	add	sp, sp, #8
   16100:	pop	{r2, r3}
   16104:	bx	lr
   16108:	push	{r1, lr}
   1610c:	mov	r0, #8
   16110:	bl	10eac <raise@plt>
   16114:	pop	{r1, pc}
   16118:	cmp	r1, r3
   1611c:	cmpeq	r0, r2
   16120:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16124:	mov	r4, r0
   16128:	movcc	r0, #0
   1612c:	mov	r5, r1
   16130:	ldr	lr, [sp, #36]	; 0x24
   16134:	movcc	r1, r0
   16138:	bcc	16234 <__assert_fail@plt+0x5118>
   1613c:	cmp	r3, #0
   16140:	clzeq	ip, r2
   16144:	clzne	ip, r3
   16148:	addeq	ip, ip, #32
   1614c:	cmp	r5, #0
   16150:	clzeq	r1, r4
   16154:	addeq	r1, r1, #32
   16158:	clzne	r1, r5
   1615c:	sub	ip, ip, r1
   16160:	sub	sl, ip, #32
   16164:	lsl	r9, r3, ip
   16168:	rsb	fp, ip, #32
   1616c:	orr	r9, r9, r2, lsl sl
   16170:	orr	r9, r9, r2, lsr fp
   16174:	lsl	r8, r2, ip
   16178:	cmp	r5, r9
   1617c:	cmpeq	r4, r8
   16180:	movcc	r0, #0
   16184:	movcc	r1, r0
   16188:	bcc	161a4 <__assert_fail@plt+0x5088>
   1618c:	mov	r0, #1
   16190:	subs	r4, r4, r8
   16194:	lsl	r1, r0, sl
   16198:	orr	r1, r1, r0, lsr fp
   1619c:	lsl	r0, r0, ip
   161a0:	sbc	r5, r5, r9
   161a4:	cmp	ip, #0
   161a8:	beq	16234 <__assert_fail@plt+0x5118>
   161ac:	lsr	r6, r8, #1
   161b0:	orr	r6, r6, r9, lsl #31
   161b4:	lsr	r7, r9, #1
   161b8:	mov	r2, ip
   161bc:	b	161e0 <__assert_fail@plt+0x50c4>
   161c0:	subs	r3, r4, r6
   161c4:	sbc	r8, r5, r7
   161c8:	adds	r3, r3, r3
   161cc:	adc	r8, r8, r8
   161d0:	adds	r4, r3, #1
   161d4:	adc	r5, r8, #0
   161d8:	subs	r2, r2, #1
   161dc:	beq	161fc <__assert_fail@plt+0x50e0>
   161e0:	cmp	r5, r7
   161e4:	cmpeq	r4, r6
   161e8:	bcs	161c0 <__assert_fail@plt+0x50a4>
   161ec:	adds	r4, r4, r4
   161f0:	adc	r5, r5, r5
   161f4:	subs	r2, r2, #1
   161f8:	bne	161e0 <__assert_fail@plt+0x50c4>
   161fc:	lsr	r3, r4, ip
   16200:	orr	r3, r3, r5, lsl fp
   16204:	lsr	r2, r5, ip
   16208:	orr	r3, r3, r5, lsr sl
   1620c:	adds	r0, r0, r4
   16210:	mov	r4, r3
   16214:	lsl	r3, r2, ip
   16218:	orr	r3, r3, r4, lsl sl
   1621c:	lsl	ip, r4, ip
   16220:	orr	r3, r3, r4, lsr fp
   16224:	adc	r1, r1, r5
   16228:	subs	r0, r0, ip
   1622c:	mov	r5, r2
   16230:	sbc	r1, r1, r3
   16234:	cmp	lr, #0
   16238:	strdne	r4, [lr]
   1623c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16240:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16244:	mov	r7, r0
   16248:	ldr	r6, [pc, #72]	; 16298 <__assert_fail@plt+0x517c>
   1624c:	ldr	r5, [pc, #72]	; 1629c <__assert_fail@plt+0x5180>
   16250:	add	r6, pc, r6
   16254:	add	r5, pc, r5
   16258:	sub	r6, r6, r5
   1625c:	mov	r8, r1
   16260:	mov	r9, r2
   16264:	bl	10e74 <calloc@plt-0x20>
   16268:	asrs	r6, r6, #2
   1626c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16270:	mov	r4, #0
   16274:	add	r4, r4, #1
   16278:	ldr	r3, [r5], #4
   1627c:	mov	r2, r9
   16280:	mov	r1, r8
   16284:	mov	r0, r7
   16288:	blx	r3
   1628c:	cmp	r6, r4
   16290:	bne	16274 <__assert_fail@plt+0x5158>
   16294:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16298:			; <UNDEFINED> instruction: 0x00011cb4
   1629c:	andeq	r1, r1, ip, lsr #25
   162a0:	bx	lr
   162a4:	ldr	r3, [pc, #12]	; 162b8 <__assert_fail@plt+0x519c>
   162a8:	mov	r1, #0
   162ac:	add	r3, pc, r3
   162b0:	ldr	r2, [r3]
   162b4:	b	11044 <__cxa_atexit@plt>
   162b8:	andeq	r1, r1, r0, asr #28

Disassembly of section .fini:

000162bc <.fini>:
   162bc:	push	{r3, lr}
   162c0:	pop	{r3, pc}
