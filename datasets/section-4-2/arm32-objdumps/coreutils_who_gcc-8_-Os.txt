
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

00010ec4 <.init>:
   10ec4:	push	{r3, lr}
   10ec8:	bl	1157c <__assert_fail@plt+0x38c>
   10ecc:	pop	{r3, pc}

Disassembly of section .plt:

00010ed0 <calloc@plt-0x14>:
   10ed0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ed4:	ldr	lr, [pc, #4]	; 10ee0 <calloc@plt-0x4>
   10ed8:	add	lr, pc, lr
   10edc:	ldr	pc, [lr, #8]!
   10ee0:	andeq	r5, r1, r0, lsr #2

00010ee4 <calloc@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #288]!	; 0x120

00010ef0 <fputs_unlocked@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #280]!	; 0x118

00010efc <raise@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #272]!	; 0x110

00010f08 <strcmp@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #264]!	; 0x108

00010f14 <fflush@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #256]!	; 0x100

00010f20 <utmpxname@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #248]!	; 0xf8

00010f2c <free@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #240]!	; 0xf0

00010f38 <gai_strerror@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #232]!	; 0xe8

00010f44 <_exit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #224]!	; 0xe0

00010f50 <memcpy@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #216]!	; 0xd8

00010f5c <mbsinit@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #208]!	; 0xd0

00010f68 <time@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #200]!	; 0xc8

00010f74 <memcmp@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #192]!	; 0xc0

00010f80 <stpcpy@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #86016	; 0x15000
   10f88:	ldr	pc, [ip, #184]!	; 0xb8

00010f8c <fputc_unlocked@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #86016	; 0x15000
   10f94:	ldr	pc, [ip, #176]!	; 0xb0

00010f98 <dcgettext@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #86016	; 0x15000
   10fa0:	ldr	pc, [ip, #168]!	; 0xa8

00010fa4 <strdup@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #86016	; 0x15000
   10fac:	ldr	pc, [ip, #160]!	; 0xa0

00010fb0 <setutxent@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #86016	; 0x15000
   10fb8:	ldr	pc, [ip, #152]!	; 0x98

00010fbc <realloc@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #86016	; 0x15000
   10fc4:	ldr	pc, [ip, #144]!	; 0x90

00010fc8 <textdomain@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #86016	; 0x15000
   10fd0:	ldr	pc, [ip, #136]!	; 0x88

00010fd4 <iswprint@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #86016	; 0x15000
   10fdc:	ldr	pc, [ip, #128]!	; 0x80

00010fe0 <lseek64@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #86016	; 0x15000
   10fe8:	ldr	pc, [ip, #120]!	; 0x78

00010fec <__ctype_get_mb_cur_max@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #86016	; 0x15000
   10ff4:	ldr	pc, [ip, #112]!	; 0x70

00010ff8 <strcpy@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #86016	; 0x15000
   11000:	ldr	pc, [ip, #104]!	; 0x68

00011004 <__fpending@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #86016	; 0x15000
   1100c:	ldr	pc, [ip, #96]!	; 0x60

00011010 <ferror_unlocked@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #86016	; 0x15000
   11018:	ldr	pc, [ip, #88]!	; 0x58

0001101c <mbrtowc@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #86016	; 0x15000
   11024:	ldr	pc, [ip, #80]!	; 0x50

00011028 <error@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #86016	; 0x15000
   11030:	ldr	pc, [ip, #72]!	; 0x48

00011034 <__asprintf_chk@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #86016	; 0x15000
   1103c:	ldr	pc, [ip, #64]!	; 0x40

00011040 <puts@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #86016	; 0x15000
   11048:	ldr	pc, [ip, #56]!	; 0x38

0001104c <malloc@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #86016	; 0x15000
   11054:	ldr	pc, [ip, #48]!	; 0x30

00011058 <__libc_start_main@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #86016	; 0x15000
   11060:	ldr	pc, [ip, #40]!	; 0x28

00011064 <strftime@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #86016	; 0x15000
   1106c:	ldr	pc, [ip, #32]!

00011070 <__freading@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #86016	; 0x15000
   11078:	ldr	pc, [ip, #24]!

0001107c <localtime@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #86016	; 0x15000
   11084:	ldr	pc, [ip, #16]!

00011088 <__gmon_start__@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #86016	; 0x15000
   11090:	ldr	pc, [ip, #8]!

00011094 <getopt_long@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #86016	; 0x15000
   1109c:	ldr	pc, [ip, #0]!

000110a0 <kill@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #20, 20	; 0x14000
   110a8:	ldr	pc, [ip, #4088]!	; 0xff8

000110ac <__ctype_b_loc@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #20, 20	; 0x14000
   110b4:	ldr	pc, [ip, #4080]!	; 0xff0

000110b8 <exit@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #20, 20	; 0x14000
   110c0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110c4 <ttyname@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #20, 20	; 0x14000
   110cc:	ldr	pc, [ip, #4064]!	; 0xfe0

000110d0 <strlen@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #20, 20	; 0x14000
   110d8:	ldr	pc, [ip, #4056]!	; 0xfd8

000110dc <strchr@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #20, 20	; 0x14000
   110e4:	ldr	pc, [ip, #4048]!	; 0xfd0

000110e8 <__errno_location@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #20, 20	; 0x14000
   110f0:	ldr	pc, [ip, #4040]!	; 0xfc8

000110f4 <__sprintf_chk@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #20, 20	; 0x14000
   110fc:	ldr	pc, [ip, #4032]!	; 0xfc0

00011100 <__cxa_atexit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #20, 20	; 0x14000
   11108:	ldr	pc, [ip, #4024]!	; 0xfb8

0001110c <memset@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #20, 20	; 0x14000
   11114:	ldr	pc, [ip, #4016]!	; 0xfb0

00011118 <strncpy@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #20, 20	; 0x14000
   11120:	ldr	pc, [ip, #4008]!	; 0xfa8

00011124 <__printf_chk@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #20, 20	; 0x14000
   1112c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011130 <fileno@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #20, 20	; 0x14000
   11138:	ldr	pc, [ip, #3992]!	; 0xf98

0001113c <__fprintf_chk@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #20, 20	; 0x14000
   11144:	ldr	pc, [ip, #3984]!	; 0xf90

00011148 <fclose@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #20, 20	; 0x14000
   11150:	ldr	pc, [ip, #3976]!	; 0xf88

00011154 <fseeko64@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #20, 20	; 0x14000
   1115c:	ldr	pc, [ip, #3968]!	; 0xf80

00011160 <endutxent@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #20, 20	; 0x14000
   11168:	ldr	pc, [ip, #3960]!	; 0xf78

0001116c <setlocale@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #20, 20	; 0x14000
   11174:	ldr	pc, [ip, #3952]!	; 0xf70

00011178 <strrchr@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #20, 20	; 0x14000
   11180:	ldr	pc, [ip, #3944]!	; 0xf68

00011184 <nl_langinfo@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #20, 20	; 0x14000
   1118c:	ldr	pc, [ip, #3936]!	; 0xf60

00011190 <freeaddrinfo@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #20, 20	; 0x14000
   11198:	ldr	pc, [ip, #3928]!	; 0xf58

0001119c <getaddrinfo@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #20, 20	; 0x14000
   111a4:	ldr	pc, [ip, #3920]!	; 0xf50

000111a8 <bindtextdomain@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #20, 20	; 0x14000
   111b0:	ldr	pc, [ip, #3912]!	; 0xf48

000111b4 <__xstat64@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #20, 20	; 0x14000
   111bc:	ldr	pc, [ip, #3904]!	; 0xf40

000111c0 <fputs@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #20, 20	; 0x14000
   111c8:	ldr	pc, [ip, #3896]!	; 0xf38

000111cc <strncmp@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #20, 20	; 0x14000
   111d4:	ldr	pc, [ip, #3888]!	; 0xf30

000111d8 <abort@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #20, 20	; 0x14000
   111e0:	ldr	pc, [ip, #3880]!	; 0xf28

000111e4 <getutxent@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #20, 20	; 0x14000
   111ec:	ldr	pc, [ip, #3872]!	; 0xf20

000111f0 <__assert_fail@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #20, 20	; 0x14000
   111f8:	ldr	pc, [ip, #3864]!	; 0xf18

Disassembly of section .text:

000111fc <.text>:
   111fc:	push	{r4, lr}
   11200:	bl	110e8 <__errno_location@plt>
   11204:	mov	r3, #12
   11208:	str	r3, [r0]
   1120c:	mov	r0, #0
   11210:	pop	{r4, pc}
   11214:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   11218:	mov	r6, r0
   1121c:	mov	r7, r1
   11220:	mov	sl, #1
   11224:	ldr	r0, [r1]
   11228:	bl	12910 <__assert_fail@plt+0x1720>
   1122c:	ldr	r1, [pc, #704]	; 114f4 <__assert_fail@plt+0x304>
   11230:	mov	r0, #6
   11234:	bl	1116c <setlocale@plt>
   11238:	ldr	r1, [pc, #696]	; 114f8 <__assert_fail@plt+0x308>
   1123c:	ldr	r0, [pc, #696]	; 114fc <__assert_fail@plt+0x30c>
   11240:	bl	111a8 <bindtextdomain@plt>
   11244:	ldr	r0, [pc, #688]	; 114fc <__assert_fail@plt+0x30c>
   11248:	bl	10fc8 <textdomain@plt>
   1124c:	ldr	r0, [pc, #684]	; 11500 <__assert_fail@plt+0x310>
   11250:	ldr	r9, [pc, #684]	; 11504 <__assert_fail@plt+0x314>
   11254:	ldr	r8, [pc, #684]	; 11508 <__assert_fail@plt+0x318>
   11258:	ldr	r4, [pc, #684]	; 1150c <__assert_fail@plt+0x31c>
   1125c:	bl	14f28 <__assert_fail@plt+0x3d38>
   11260:	mov	r5, #0
   11264:	mov	r3, r9
   11268:	mov	r2, r8
   1126c:	mov	r1, r7
   11270:	mov	r0, r6
   11274:	str	r5, [sp]
   11278:	bl	11094 <getopt_long@plt>
   1127c:	cmn	r0, #1
   11280:	bne	112fc <__assert_fail@plt+0x10c>
   11284:	cmp	sl, r5
   11288:	mov	r0, #2
   1128c:	movne	r3, #1
   11290:	strbne	r3, [r4, #1]
   11294:	strbne	r3, [r4, #67]	; 0x43
   11298:	ldrb	r3, [r4, #2]
   1129c:	cmp	r3, #0
   112a0:	movne	r3, #0
   112a4:	strbne	r3, [r4, #1]
   112a8:	bl	127ec <__assert_fail@plt+0x15fc>
   112ac:	cmp	r0, #0
   112b0:	ldrne	r3, [pc, #600]	; 11510 <__assert_fail@plt+0x320>
   112b4:	ldreq	r3, [pc, #600]	; 11514 <__assert_fail@plt+0x324>
   112b8:	strne	r3, [r4, #44]	; 0x2c
   112bc:	movne	r3, #16
   112c0:	streq	r3, [r4, #44]	; 0x2c
   112c4:	moveq	r3, #12
   112c8:	str	r3, [r4, #4]
   112cc:	ldr	r3, [pc, #580]	; 11518 <__assert_fail@plt+0x328>
   112d0:	ldr	r2, [r3]
   112d4:	mov	r5, r3
   112d8:	sub	r6, r6, r2
   112dc:	add	r6, r6, #1
   112e0:	cmp	r6, #3
   112e4:	ldrls	pc, [pc, r6, lsl #2]
   112e8:	b	114b8 <__assert_fail@plt+0x2c8>
   112ec:	muleq	r1, r4, r4
   112f0:	muleq	r1, r4, r4
   112f4:	andeq	r1, r1, ip, lsr #9
   112f8:	andeq	r1, r1, ip, lsl #9
   112fc:	cmp	r0, #109	; 0x6d
   11300:	beq	11444 <__assert_fail@plt+0x254>
   11304:	bgt	113a8 <__assert_fail@plt+0x1b8>
   11308:	cmp	r0, #84	; 0x54
   1130c:	beq	11470 <__assert_fail@plt+0x280>
   11310:	bgt	1136c <__assert_fail@plt+0x17c>
   11314:	cmn	r0, #2
   11318:	beq	11484 <__assert_fail@plt+0x294>
   1131c:	cmp	r0, #72	; 0x48
   11320:	beq	11438 <__assert_fail@plt+0x248>
   11324:	cmn	r0, #3
   11328:	bne	11384 <__assert_fail@plt+0x194>
   1132c:	ldr	r3, [pc, #488]	; 1151c <__assert_fail@plt+0x32c>
   11330:	ldr	r0, [pc, #488]	; 11520 <__assert_fail@plt+0x330>
   11334:	ldr	r2, [pc, #488]	; 11524 <__assert_fail@plt+0x334>
   11338:	str	r3, [sp, #8]
   1133c:	ldr	r3, [pc, #484]	; 11528 <__assert_fail@plt+0x338>
   11340:	str	r5, [sp, #12]
   11344:	ldr	r1, [pc, #480]	; 1152c <__assert_fail@plt+0x33c>
   11348:	str	r3, [sp, #4]
   1134c:	ldr	r3, [pc, #476]	; 11530 <__assert_fail@plt+0x340>
   11350:	str	r3, [sp]
   11354:	ldr	r3, [pc, #472]	; 11534 <__assert_fail@plt+0x344>
   11358:	ldr	r0, [r0]
   1135c:	ldr	r3, [r3]
   11360:	bl	14520 <__assert_fail@plt+0x3330>
   11364:	mov	r0, r5
   11368:	bl	110b8 <exit@plt>
   1136c:	cmp	r0, #98	; 0x62
   11370:	mov	r3, #1
   11374:	beq	11424 <__assert_fail@plt+0x234>
   11378:	bgt	1138c <__assert_fail@plt+0x19c>
   1137c:	cmp	r0, #97	; 0x61
   11380:	beq	113f8 <__assert_fail@plt+0x208>
   11384:	mov	r0, #1
   11388:	b	11488 <__assert_fail@plt+0x298>
   1138c:	cmp	r0, #100	; 0x64
   11390:	beq	11430 <__assert_fail@plt+0x240>
   11394:	cmp	r0, #108	; 0x6c
   11398:	bne	11384 <__assert_fail@plt+0x194>
   1139c:	strb	r3, [r4, #83]	; 0x53
   113a0:	strb	r3, [r4]
   113a4:	b	11428 <__assert_fail@plt+0x238>
   113a8:	cmp	r0, #115	; 0x73
   113ac:	mov	r3, #1
   113b0:	beq	11460 <__assert_fail@plt+0x270>
   113b4:	bgt	113d4 <__assert_fail@plt+0x1e4>
   113b8:	cmp	r0, #113	; 0x71
   113bc:	beq	11450 <__assert_fail@plt+0x260>
   113c0:	bgt	11458 <__assert_fail@plt+0x268>
   113c4:	cmp	r0, #112	; 0x70
   113c8:	bne	11384 <__assert_fail@plt+0x194>
   113cc:	strb	r3, [r4, #82]	; 0x52
   113d0:	b	11428 <__assert_fail@plt+0x238>
   113d4:	cmp	r0, #117	; 0x75
   113d8:	beq	1147c <__assert_fail@plt+0x28c>
   113dc:	blt	11468 <__assert_fail@plt+0x278>
   113e0:	cmp	r0, #119	; 0x77
   113e4:	beq	11470 <__assert_fail@plt+0x280>
   113e8:	cmp	r0, #256	; 0x100
   113ec:	bne	11384 <__assert_fail@plt+0x194>
   113f0:	strb	r3, [r4, #54]	; 0x36
   113f4:	b	11260 <__assert_fail@plt+0x70>
   113f8:	strb	r3, [r4, #3]
   113fc:	strb	r3, [r4, #67]	; 0x43
   11400:	strb	r3, [r4, #68]	; 0x44
   11404:	strb	r3, [r4, #80]	; 0x50
   11408:	strb	r3, [r4, #81]	; 0x51
   1140c:	strb	r3, [r4, #82]	; 0x52
   11410:	strb	r3, [r4, #83]	; 0x53
   11414:	strb	r3, [r4, #84]	; 0x54
   11418:	strb	r3, [r4]
   1141c:	strb	r3, [r4, #2]
   11420:	b	11428 <__assert_fail@plt+0x238>
   11424:	strb	r3, [r4, #80]	; 0x50
   11428:	mov	sl, r5
   1142c:	b	11260 <__assert_fail@plt+0x70>
   11430:	strb	r3, [r4, #84]	; 0x54
   11434:	b	11418 <__assert_fail@plt+0x228>
   11438:	mov	r3, #1
   1143c:	strb	r3, [r4, #65]	; 0x41
   11440:	b	11260 <__assert_fail@plt+0x70>
   11444:	mov	r3, #1
   11448:	strb	r3, [r4, #66]	; 0x42
   1144c:	b	11260 <__assert_fail@plt+0x70>
   11450:	strb	r3, [r4, #64]	; 0x40
   11454:	b	11260 <__assert_fail@plt+0x70>
   11458:	strb	r3, [r4, #68]	; 0x44
   1145c:	b	113a0 <__assert_fail@plt+0x1b0>
   11460:	strb	r3, [r4, #1]
   11464:	b	11260 <__assert_fail@plt+0x70>
   11468:	strb	r3, [r4, #81]	; 0x51
   1146c:	b	11428 <__assert_fail@plt+0x238>
   11470:	mov	r3, #1
   11474:	strb	r3, [r4, #3]
   11478:	b	11260 <__assert_fail@plt+0x70>
   1147c:	strb	r3, [r4, #67]	; 0x43
   11480:	b	113a0 <__assert_fail@plt+0x1b0>
   11484:	mov	r0, r5
   11488:	bl	1231c <__assert_fail@plt+0x112c>
   1148c:	mov	r3, #1
   11490:	strb	r3, [r4, #66]	; 0x42
   11494:	ldr	r0, [pc, #156]	; 11538 <__assert_fail@plt+0x348>
   11498:	mov	r1, #1
   1149c:	bl	11c90 <__assert_fail@plt+0xaa0>
   114a0:	mov	r0, #0
   114a4:	add	sp, sp, #16
   114a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   114ac:	mov	r1, #0
   114b0:	ldr	r0, [r7, r2, lsl #2]
   114b4:	b	1149c <__assert_fail@plt+0x2ac>
   114b8:	mov	r2, #5
   114bc:	ldr	r1, [pc, #120]	; 1153c <__assert_fail@plt+0x34c>
   114c0:	mov	r0, #0
   114c4:	bl	10f98 <dcgettext@plt>
   114c8:	ldr	r3, [r5]
   114cc:	mov	r4, r0
   114d0:	add	r3, r3, #2
   114d4:	ldr	r0, [r7, r3, lsl #2]
   114d8:	bl	13f10 <__assert_fail@plt+0x2d20>
   114dc:	mov	r1, #0
   114e0:	mov	r3, r0
   114e4:	mov	r2, r4
   114e8:	mov	r0, r1
   114ec:	bl	11028 <error@plt>
   114f0:	b	11384 <__assert_fail@plt+0x194>
   114f4:	andeq	r5, r1, r9, lsl #15
   114f8:	andeq	r5, r1, sl, lsl #15
   114fc:	andeq	r5, r1, r7, ror #13
   11500:	andeq	r2, r1, r8, asr #13
   11504:	andeq	r4, r1, r0, lsr #31
   11508:	ldrdeq	r5, [r1], -r1
   1150c:	andeq	r6, r2, ip, lsl #3
   11510:	andeq	r5, r1, r0, ror #15
   11514:	andeq	r5, r1, pc, ror #15
   11518:	andeq	r6, r2, r8, ror r1
   1151c:	andeq	r5, r1, r2, lsr #15
   11520:	andeq	r6, r2, r4, lsl #3
   11524:	andeq	r5, r1, r3, ror #13
   11528:			; <UNDEFINED> instruction: 0x000157b0
   1152c:	andeq	r5, r1, r3, ror #3
   11530:	andeq	r5, r1, r0, asr #15
   11534:	andeq	r6, r2, r8, lsr #2
   11538:	muleq	r1, r6, r6
   1153c:	strdeq	r5, [r1], -fp
   11540:	mov	fp, #0
   11544:	mov	lr, #0
   11548:	pop	{r1}		; (ldr r1, [sp], #4)
   1154c:	mov	r2, sp
   11550:	push	{r2}		; (str r2, [sp, #-4]!)
   11554:	push	{r0}		; (str r0, [sp, #-4]!)
   11558:	ldr	ip, [pc, #16]	; 11570 <__assert_fail@plt+0x380>
   1155c:	push	{ip}		; (str ip, [sp, #-4]!)
   11560:	ldr	r0, [pc, #12]	; 11574 <__assert_fail@plt+0x384>
   11564:	ldr	r3, [pc, #12]	; 11578 <__assert_fail@plt+0x388>
   11568:	bl	11058 <__libc_start_main@plt>
   1156c:	bl	111d8 <abort@plt>
   11570:	andeq	r4, r1, r4, lsr #30
   11574:	andeq	r1, r1, r4, lsl r2
   11578:	andeq	r4, r1, r4, asr #29
   1157c:	ldr	r3, [pc, #20]	; 11598 <__assert_fail@plt+0x3a8>
   11580:	ldr	r2, [pc, #20]	; 1159c <__assert_fail@plt+0x3ac>
   11584:	add	r3, pc, r3
   11588:	ldr	r2, [r3, r2]
   1158c:	cmp	r2, #0
   11590:	bxeq	lr
   11594:	b	11088 <__gmon_start__@plt>
   11598:	andeq	r4, r1, r4, ror sl
   1159c:	andeq	r0, r0, r4, lsl r1
   115a0:	ldr	r0, [pc, #24]	; 115c0 <__assert_fail@plt+0x3d0>
   115a4:	ldr	r3, [pc, #24]	; 115c4 <__assert_fail@plt+0x3d4>
   115a8:	cmp	r3, r0
   115ac:	bxeq	lr
   115b0:	ldr	r3, [pc, #16]	; 115c8 <__assert_fail@plt+0x3d8>
   115b4:	cmp	r3, #0
   115b8:	bxeq	lr
   115bc:	bx	r3
   115c0:	andeq	r6, r2, r0, ror r1
   115c4:	andeq	r6, r2, r0, ror r1
   115c8:	andeq	r0, r0, r0
   115cc:	ldr	r0, [pc, #36]	; 115f8 <__assert_fail@plt+0x408>
   115d0:	ldr	r1, [pc, #36]	; 115fc <__assert_fail@plt+0x40c>
   115d4:	sub	r1, r1, r0
   115d8:	asr	r1, r1, #2
   115dc:	add	r1, r1, r1, lsr #31
   115e0:	asrs	r1, r1, #1
   115e4:	bxeq	lr
   115e8:	ldr	r3, [pc, #16]	; 11600 <__assert_fail@plt+0x410>
   115ec:	cmp	r3, #0
   115f0:	bxeq	lr
   115f4:	bx	r3
   115f8:	andeq	r6, r2, r0, ror r1
   115fc:	andeq	r6, r2, r0, ror r1
   11600:	andeq	r0, r0, r0
   11604:	push	{r4, lr}
   11608:	ldr	r4, [pc, #24]	; 11628 <__assert_fail@plt+0x438>
   1160c:	ldrb	r3, [r4]
   11610:	cmp	r3, #0
   11614:	popne	{r4, pc}
   11618:	bl	115a0 <__assert_fail@plt+0x3b0>
   1161c:	mov	r3, #1
   11620:	strb	r3, [r4]
   11624:	pop	{r4, pc}
   11628:	andeq	r6, r2, r8, lsl #3
   1162c:	b	115cc <__assert_fail@plt+0x3dc>
   11630:	add	r2, r1, r2
   11634:	cmp	r2, r1
   11638:	bls	11648 <__assert_fail@plt+0x458>
   1163c:	ldrb	r3, [r1], #1
   11640:	cmp	r3, #0
   11644:	bne	11654 <__assert_fail@plt+0x464>
   11648:	mov	r3, #0
   1164c:	strb	r3, [r0]
   11650:	bx	lr
   11654:	strb	r3, [r0], #1
   11658:	b	11634 <__assert_fail@plt+0x444>
   1165c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11660:	mov	fp, r3
   11664:	sub	sp, sp, #76	; 0x4c
   11668:	mov	sl, r0
   1166c:	mov	r5, r1
   11670:	add	r7, sp, #48	; 0x30
   11674:	ldr	r3, [pc, #436]	; 11830 <__assert_fail@plt+0x640>
   11678:	ldr	r4, [pc, #436]	; 11834 <__assert_fail@plt+0x644>
   1167c:	ldr	r8, [sp, #120]	; 0x78
   11680:	strb	r2, [r3, #1]
   11684:	ldr	r6, [sp, #124]	; 0x7c
   11688:	ldrb	r3, [r4]
   1168c:	ldr	r9, [sp, #132]	; 0x84
   11690:	cmp	r3, #0
   11694:	beq	117c8 <__assert_fail@plt+0x5d8>
   11698:	ldrb	r3, [r4, #1]
   1169c:	cmp	r3, #0
   116a0:	bne	117c8 <__assert_fail@plt+0x5d8>
   116a4:	mov	r0, r8
   116a8:	bl	110d0 <strlen@plt>
   116ac:	cmp	r0, #6
   116b0:	bhi	117c8 <__assert_fail@plt+0x5d8>
   116b4:	ldr	r3, [pc, #380]	; 11838 <__assert_fail@plt+0x648>
   116b8:	mov	r2, #8
   116bc:	mov	r1, #1
   116c0:	mov	r0, r7
   116c4:	str	r8, [sp]
   116c8:	bl	110f4 <__sprintf_chk@plt>
   116cc:	ldrb	r3, [r4, #1]
   116d0:	add	r8, sp, #56	; 0x38
   116d4:	cmp	r3, #0
   116d8:	bne	117d4 <__assert_fail@plt+0x5e4>
   116dc:	mov	r0, r6
   116e0:	bl	110d0 <strlen@plt>
   116e4:	cmp	r0, #11
   116e8:	bhi	117d4 <__assert_fail@plt+0x5e4>
   116ec:	ldr	r3, [pc, #328]	; 1183c <__assert_fail@plt+0x64c>
   116f0:	mov	r2, #13
   116f4:	mov	r1, #1
   116f8:	mov	r0, r8
   116fc:	str	r6, [sp]
   11700:	bl	110f4 <__sprintf_chk@plt>
   11704:	ldrb	r3, [r4, #2]
   11708:	cmp	r3, #0
   1170c:	moveq	r0, #1
   11710:	beq	11728 <__assert_fail@plt+0x538>
   11714:	mov	r0, r9
   11718:	bl	110d0 <strlen@plt>
   1171c:	cmp	r0, #11
   11720:	addhi	r0, r0, #2
   11724:	movls	r0, #14
   11728:	bl	145e8 <__assert_fail@plt+0x33f8>
   1172c:	ldrb	r3, [r4, #2]
   11730:	mov	r6, r0
   11734:	cmp	r3, #0
   11738:	strbeq	r3, [r0]
   1173c:	beq	11754 <__assert_fail@plt+0x564>
   11740:	ldr	r3, [pc, #248]	; 11840 <__assert_fail@plt+0x650>
   11744:	mvn	r2, #0
   11748:	mov	r1, #1
   1174c:	str	r9, [sp]
   11750:	bl	110f4 <__sprintf_chk@plt>
   11754:	ldrb	r1, [r4, #3]
   11758:	cmp	r5, #0
   1175c:	add	r0, sp, #44	; 0x2c
   11760:	str	r7, [sp, #24]
   11764:	ldr	r3, [pc, #216]	; 11844 <__assert_fail@plt+0x654>
   11768:	str	r8, [sp, #28]
   1176c:	ldr	r2, [pc, #212]	; 11848 <__assert_fail@plt+0x658>
   11770:	str	r6, [sp, #36]	; 0x24
   11774:	moveq	r5, r3
   11778:	cmp	r1, #0
   1177c:	ldr	r3, [pc, #172]	; 11830 <__assert_fail@plt+0x640>
   11780:	mov	r1, #1
   11784:	moveq	r3, r2
   11788:	ldr	r2, [sp, #128]	; 0x80
   1178c:	str	r2, [sp, #32]
   11790:	ldr	r2, [sp, #116]	; 0x74
   11794:	str	r2, [sp, #20]
   11798:	ldr	r2, [r4, #4]
   1179c:	str	r5, [sp]
   117a0:	stmib	sp, {r3, fp}
   117a4:	mov	r3, sl
   117a8:	str	r2, [sp, #16]
   117ac:	ldr	r2, [sp, #112]	; 0x70
   117b0:	str	r2, [sp, #12]
   117b4:	ldr	r2, [pc, #144]	; 1184c <__assert_fail@plt+0x65c>
   117b8:	bl	11034 <__asprintf_chk@plt>
   117bc:	cmn	r0, #1
   117c0:	bne	117e0 <__assert_fail@plt+0x5f0>
   117c4:	bl	148a0 <__assert_fail@plt+0x36b0>
   117c8:	mov	r3, #0
   117cc:	strb	r3, [sp, #48]	; 0x30
   117d0:	b	116cc <__assert_fail@plt+0x4dc>
   117d4:	mov	r3, #0
   117d8:	strb	r3, [sp, #56]	; 0x38
   117dc:	b	11704 <__assert_fail@plt+0x514>
   117e0:	ldr	r4, [sp, #44]	; 0x2c
   117e4:	mov	r0, r4
   117e8:	bl	110d0 <strlen@plt>
   117ec:	add	r0, r4, r0
   117f0:	ldrb	r3, [r0, #-1]
   117f4:	sub	r2, r0, #1
   117f8:	cmp	r3, #32
   117fc:	beq	11828 <__assert_fail@plt+0x638>
   11800:	mov	r3, #0
   11804:	strb	r3, [r0]
   11808:	ldr	r0, [sp, #44]	; 0x2c
   1180c:	bl	11040 <puts@plt>
   11810:	ldr	r0, [sp, #44]	; 0x2c
   11814:	bl	1279c <__assert_fail@plt+0x15ac>
   11818:	mov	r0, r6
   1181c:	bl	1279c <__assert_fail@plt+0x15ac>
   11820:	add	sp, sp, #76	; 0x4c
   11824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11828:	mov	r0, r2
   1182c:	b	117f0 <__assert_fail@plt+0x600>
   11830:	andeq	r6, r2, r0, lsr #2
   11834:	andeq	r6, r2, ip, lsl #3
   11838:	andeq	r5, r1, r5, asr #1
   1183c:	andeq	r5, r1, fp, asr #1
   11840:	ldrdeq	r5, [r1], -r1
   11844:	andeq	r5, r1, r0, asr #1
   11848:	andeq	r5, r1, r9, lsl #15
   1184c:	ldrdeq	r5, [r1], -r8
   11850:	push	{r4, r5, r6, lr}
   11854:	mov	r2, #5
   11858:	mov	r6, r0
   1185c:	mov	r0, #0
   11860:	ldr	r5, [pc, #68]	; 118ac <__assert_fail@plt+0x6bc>
   11864:	mov	r1, r5
   11868:	bl	10f98 <dcgettext@plt>
   1186c:	bl	110d0 <strlen@plt>
   11870:	add	r0, r0, #5
   11874:	bl	145e8 <__assert_fail@plt+0x33f8>
   11878:	mov	r4, r0
   1187c:	mov	r2, #5
   11880:	mov	r1, r5
   11884:	mov	r0, #0
   11888:	bl	10f98 <dcgettext@plt>
   1188c:	mov	r1, r0
   11890:	mov	r0, r4
   11894:	bl	10f80 <stpcpy@plt>
   11898:	mov	r2, #4
   1189c:	add	r1, r6, #40	; 0x28
   118a0:	bl	11630 <__assert_fail@plt+0x440>
   118a4:	mov	r0, r4
   118a8:	pop	{r4, r5, r6, pc}
   118ac:	strdeq	r5, [r1], -r9
   118b0:	push	{r0, r1, r4, lr}
   118b4:	str	r0, [sp, #4]
   118b8:	add	r0, sp, #4
   118bc:	bl	1107c <localtime@plt>
   118c0:	subs	r3, r0, #0
   118c4:	beq	118e8 <__assert_fail@plt+0x6f8>
   118c8:	ldr	r4, [pc, #44]	; 118fc <__assert_fail@plt+0x70c>
   118cc:	mov	r1, #33	; 0x21
   118d0:	add	r0, r4, #8
   118d4:	ldr	r2, [r4, #44]	; 0x2c
   118d8:	bl	11064 <strftime@plt>
   118dc:	add	r0, r4, #8
   118e0:	add	sp, sp, #8
   118e4:	pop	{r4, pc}
   118e8:	ldr	r0, [sp, #4]
   118ec:	ldr	r2, [pc, #12]	; 11900 <__assert_fail@plt+0x710>
   118f0:	asr	r1, r0, #31
   118f4:	bl	12848 <__assert_fail@plt+0x1658>
   118f8:	b	118e0 <__assert_fail@plt+0x6f0>
   118fc:	andeq	r6, r2, ip, lsl #3
   11900:	muleq	r2, r4, r1
   11904:	ldr	r3, [r0, #4]
   11908:	mov	r2, #12
   1190c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11910:	sub	sp, sp, #476	; 0x1dc
   11914:	mov	r6, r0
   11918:	add	fp, sp, #52	; 0x34
   1191c:	mov	r7, r1
   11920:	mov	r0, fp
   11924:	mov	r1, #1
   11928:	add	r9, sp, #44	; 0x2c
   1192c:	str	r3, [sp]
   11930:	ldr	r3, [pc, #784]	; 11c48 <__assert_fail@plt+0xa58>
   11934:	bl	110f4 <__sprintf_chk@plt>
   11938:	ldrb	r3, [r6, #8]
   1193c:	mov	r2, #32
   11940:	cmp	r3, #47	; 0x2f
   11944:	ldrne	r3, [pc, #768]	; 11c4c <__assert_fail@plt+0xa5c>
   11948:	addeq	r0, sp, #64	; 0x40
   1194c:	ldrne	r0, [r3]
   11950:	ldrhne	r3, [r3, #4]
   11954:	strne	r0, [sp, #64]	; 0x40
   11958:	addne	r0, sp, #69	; 0x45
   1195c:	strhne	r3, [sp, #68]	; 0x44
   11960:	add	r3, r6, #8
   11964:	mov	r1, r3
   11968:	str	r3, [sp, #24]
   1196c:	bl	11630 <__assert_fail@plt+0x440>
   11970:	add	r1, sp, #104	; 0x68
   11974:	add	r0, sp, #64	; 0x40
   11978:	bl	14f40 <__assert_fail@plt+0x3d50>
   1197c:	cmp	r0, #0
   11980:	bne	11bbc <__assert_fail@plt+0x9cc>
   11984:	ldr	r3, [sp, #120]	; 0x78
   11988:	ldr	r4, [sp, #176]	; 0xb0
   1198c:	tst	r3, #16
   11990:	movne	sl, #43	; 0x2b
   11994:	moveq	sl, #45	; 0x2d
   11998:	cmp	r4, #0
   1199c:	beq	11bc0 <__assert_fail@plt+0x9d0>
   119a0:	ldr	r5, [pc, #680]	; 11c50 <__assert_fail@plt+0xa60>
   119a4:	ldr	r3, [r5, #4]
   119a8:	cmp	r3, #-2147483648	; 0x80000000
   119ac:	bne	119b8 <__assert_fail@plt+0x7c8>
   119b0:	add	r0, r5, #4
   119b4:	bl	10f68 <time@plt>
   119b8:	cmp	r4, r7
   119bc:	ble	11ba0 <__assert_fail@plt+0x9b0>
   119c0:	ldr	r1, [pc, #652]	; 11c54 <__assert_fail@plt+0xa64>
   119c4:	ldr	r3, [r5, #4]
   119c8:	add	r1, r3, r1
   119cc:	cmp	r4, r1
   119d0:	movlt	r2, #0
   119d4:	movge	r2, #1
   119d8:	cmp	r4, r3
   119dc:	movgt	r2, #0
   119e0:	cmp	r2, #0
   119e4:	beq	11ba0 <__assert_fail@plt+0x9b0>
   119e8:	sub	r3, r3, r4
   119ec:	cmp	r3, #59	; 0x3b
   119f0:	ble	11bb4 <__assert_fail@plt+0x9c4>
   119f4:	ldr	r2, [pc, #604]	; 11c58 <__assert_fail@plt+0xa68>
   119f8:	cmp	r3, r2
   119fc:	ble	11a14 <__assert_fail@plt+0x824>
   11a00:	ldr	r3, [pc, #596]	; 11c5c <__assert_fail@plt+0xa6c>
   11a04:	mov	r2, #205	; 0xcd
   11a08:	ldr	r1, [pc, #592]	; 11c60 <__assert_fail@plt+0xa70>
   11a0c:	ldr	r0, [pc, #592]	; 11c64 <__assert_fail@plt+0xa74>
   11a10:	bl	111f0 <__assert_fail@plt>
   11a14:	mov	r2, #3600	; 0xe10
   11a18:	ldr	r0, [pc, #584]	; 11c68 <__assert_fail@plt+0xa78>
   11a1c:	udiv	r1, r3, r2
   11a20:	mls	r3, r2, r1, r3
   11a24:	mov	r2, #60	; 0x3c
   11a28:	udiv	r3, r3, r2
   11a2c:	mov	r2, #6
   11a30:	stm	sp, {r1, r3}
   11a34:	mov	r1, #1
   11a38:	ldr	r3, [pc, #556]	; 11c6c <__assert_fail@plt+0xa7c>
   11a3c:	bl	110f4 <__sprintf_chk@plt>
   11a40:	ldr	r0, [pc, #544]	; 11c68 <__assert_fail@plt+0xa78>
   11a44:	mov	r3, #6
   11a48:	mov	r2, #7
   11a4c:	mov	r1, #1
   11a50:	str	r3, [sp]
   11a54:	ldr	r3, [pc, #532]	; 11c70 <__assert_fail@plt+0xa80>
   11a58:	str	r0, [sp, #4]
   11a5c:	mov	r0, r9
   11a60:	bl	110f4 <__sprintf_chk@plt>
   11a64:	ldrb	r3, [r6, #76]	; 0x4c
   11a68:	ldr	r4, [pc, #516]	; 11c74 <__assert_fail@plt+0xa84>
   11a6c:	cmp	r3, #0
   11a70:	beq	11c10 <__assert_fail@plt+0xa20>
   11a74:	add	r8, sp, #212	; 0xd4
   11a78:	mov	r2, #256	; 0x100
   11a7c:	add	r1, r6, #76	; 0x4c
   11a80:	mov	r0, r8
   11a84:	bl	11630 <__assert_fail@plt+0x440>
   11a88:	mov	r1, #58	; 0x3a
   11a8c:	mov	r0, r8
   11a90:	bl	110dc <strchr@plt>
   11a94:	subs	r5, r0, #0
   11a98:	movne	r3, #0
   11a9c:	strbne	r3, [r5], #1
   11aa0:	ldrb	r3, [sp, #212]	; 0xd4
   11aa4:	cmp	r3, #0
   11aa8:	beq	11ac8 <__assert_fail@plt+0x8d8>
   11aac:	ldrb	r3, [r4, #54]	; 0x36
   11ab0:	cmp	r3, #0
   11ab4:	beq	11ac8 <__assert_fail@plt+0x8d8>
   11ab8:	mov	r0, r8
   11abc:	bl	1268c <__assert_fail@plt+0x149c>
   11ac0:	subs	r7, r0, #0
   11ac4:	bne	11acc <__assert_fail@plt+0x8dc>
   11ac8:	mov	r7, r8
   11acc:	mov	r0, r7
   11ad0:	bl	110d0 <strlen@plt>
   11ad4:	cmp	r5, #0
   11ad8:	mov	r3, r0
   11adc:	ldr	r1, [r4, #56]	; 0x38
   11ae0:	ldr	r2, [r4, #60]	; 0x3c
   11ae4:	beq	11bd0 <__assert_fail@plt+0x9e0>
   11ae8:	mov	r0, r5
   11aec:	str	r1, [sp, #28]
   11af0:	strd	r2, [sp, #32]
   11af4:	bl	110d0 <strlen@plt>
   11af8:	add	r1, sp, #28
   11afc:	ldm	r1, {r1, r2, r3}
   11b00:	add	r3, r3, #4
   11b04:	add	r0, r3, r0
   11b08:	cmp	r1, r0
   11b0c:	bcs	11b28 <__assert_fail@plt+0x938>
   11b10:	str	r0, [r4, #56]	; 0x38
   11b14:	mov	r0, r2
   11b18:	bl	1279c <__assert_fail@plt+0x15ac>
   11b1c:	ldr	r0, [r4, #56]	; 0x38
   11b20:	bl	145e8 <__assert_fail@plt+0x33f8>
   11b24:	str	r0, [r4, #60]	; 0x3c
   11b28:	ldr	r3, [pc, #328]	; 11c78 <__assert_fail@plt+0xa88>
   11b2c:	mvn	r2, #0
   11b30:	mov	r1, #1
   11b34:	str	r7, [sp]
   11b38:	str	r5, [sp, #4]
   11b3c:	ldr	r0, [r4, #60]	; 0x3c
   11b40:	bl	110f4 <__sprintf_chk@plt>
   11b44:	cmp	r7, r8
   11b48:	beq	11b54 <__assert_fail@plt+0x964>
   11b4c:	mov	r0, r7
   11b50:	bl	1279c <__assert_fail@plt+0x15ac>
   11b54:	ldr	r0, [r6, #340]	; 0x154
   11b58:	add	r5, r6, #44	; 0x2c
   11b5c:	bl	118b0 <__assert_fail@plt+0x6c0>
   11b60:	ldr	r3, [r4, #60]	; 0x3c
   11b64:	mov	r1, r5
   11b68:	stmib	sp, {r0, r9, fp}
   11b6c:	ldr	r2, [pc, #264]	; 11c7c <__assert_fail@plt+0xa8c>
   11b70:	cmp	r3, #0
   11b74:	moveq	r3, r2
   11b78:	str	r3, [sp, #16]
   11b7c:	ldr	r3, [sp, #24]
   11b80:	str	r2, [sp, #20]
   11b84:	mov	r2, sl
   11b88:	str	r3, [sp]
   11b8c:	mov	r3, #32
   11b90:	mov	r0, r3
   11b94:	bl	1165c <__assert_fail@plt+0x46c>
   11b98:	add	sp, sp, #476	; 0x1dc
   11b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ba0:	mov	r2, #5
   11ba4:	ldr	r1, [pc, #212]	; 11c80 <__assert_fail@plt+0xa90>
   11ba8:	mov	r0, #0
   11bac:	bl	10f98 <dcgettext@plt>
   11bb0:	b	11a44 <__assert_fail@plt+0x854>
   11bb4:	ldr	r0, [pc, #200]	; 11c84 <__assert_fail@plt+0xa94>
   11bb8:	b	11a44 <__assert_fail@plt+0x854>
   11bbc:	mov	sl, #63	; 0x3f
   11bc0:	ldr	r1, [pc, #192]	; 11c88 <__assert_fail@plt+0xa98>
   11bc4:	mov	r0, r9
   11bc8:	bl	10ff8 <strcpy@plt>
   11bcc:	b	11a64 <__assert_fail@plt+0x874>
   11bd0:	add	r3, r0, #3
   11bd4:	cmp	r1, r3
   11bd8:	bcs	11bf4 <__assert_fail@plt+0xa04>
   11bdc:	mov	r0, r2
   11be0:	str	r3, [r4, #56]	; 0x38
   11be4:	bl	1279c <__assert_fail@plt+0x15ac>
   11be8:	ldr	r0, [r4, #56]	; 0x38
   11bec:	bl	145e8 <__assert_fail@plt+0x33f8>
   11bf0:	str	r0, [r4, #60]	; 0x3c
   11bf4:	ldr	r3, [pc, #144]	; 11c8c <__assert_fail@plt+0xa9c>
   11bf8:	mvn	r2, #0
   11bfc:	mov	r1, #1
   11c00:	str	r7, [sp]
   11c04:	ldr	r0, [r4, #60]	; 0x3c
   11c08:	bl	110f4 <__sprintf_chk@plt>
   11c0c:	b	11b44 <__assert_fail@plt+0x954>
   11c10:	ldr	r3, [r4, #56]	; 0x38
   11c14:	cmp	r3, #0
   11c18:	bne	11c38 <__assert_fail@plt+0xa48>
   11c1c:	mov	r3, #1
   11c20:	ldr	r0, [r4, #60]	; 0x3c
   11c24:	str	r3, [r4, #56]	; 0x38
   11c28:	bl	1279c <__assert_fail@plt+0x15ac>
   11c2c:	ldr	r0, [r4, #56]	; 0x38
   11c30:	bl	145e8 <__assert_fail@plt+0x33f8>
   11c34:	str	r0, [r4, #60]	; 0x3c
   11c38:	ldr	r3, [r4, #60]	; 0x3c
   11c3c:	mov	r2, #0
   11c40:	strb	r2, [r3]
   11c44:	b	11b54 <__assert_fail@plt+0x964>
   11c48:	andeq	r5, r1, r3, lsl #2
   11c4c:	andeq	r5, r1, r7, lsl #2
   11c50:	andeq	r6, r2, r0, lsr #2
   11c54:			; <UNDEFINED> instruction: 0xfffeae81
   11c58:	andeq	r5, r1, pc, ror r1
   11c5c:	andeq	r4, r1, ip, asr pc
   11c60:	andeq	r5, r1, sp, lsl #2
   11c64:	andeq	r5, r1, r7, lsl r1
   11c68:			; <UNDEFINED> instruction: 0x000261bc
   11c6c:	andeq	r5, r1, r5, lsr r1
   11c70:	andeq	r5, r1, r5, asr #2
   11c74:	andeq	r6, r2, ip, lsl #3
   11c78:	andeq	r5, r1, lr, asr #2
   11c7c:	andeq	r5, r1, r9, lsl #15
   11c80:	andeq	r5, r1, pc, lsr r1
   11c84:	strdeq	r5, [r1], -sp
   11c88:	andeq	r5, r1, sl, asr #2
   11c8c:	andeq	r5, r1, r6, asr r1
   11c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c94:	sub	sp, sp, #60	; 0x3c
   11c98:	mov	r3, r1
   11c9c:	add	r2, sp, #40	; 0x28
   11ca0:	add	r1, sp, #36	; 0x24
   11ca4:	mov	r5, r0
   11ca8:	bl	13f74 <__assert_fail@plt+0x2d84>
   11cac:	subs	r2, r0, #0
   11cb0:	beq	11ce0 <__assert_fail@plt+0xaf0>
   11cb4:	bl	110e8 <__errno_location@plt>
   11cb8:	ldr	r4, [r0]
   11cbc:	mov	r2, r5
   11cc0:	mov	r1, #3
   11cc4:	mov	r0, #0
   11cc8:	bl	13dd0 <__assert_fail@plt+0x2be0>
   11ccc:	mov	r3, r0
   11cd0:	ldr	r2, [pc, #1504]	; 122b8 <__assert_fail@plt+0x10c8>
   11cd4:	mov	r0, #1
   11cd8:	mov	r1, r4
   11cdc:	bl	11028 <error@plt>
   11ce0:	ldr	r3, [pc, #1492]	; 122bc <__assert_fail@plt+0x10cc>
   11ce4:	ldr	fp, [sp, #36]	; 0x24
   11ce8:	ldr	r4, [sp, #40]	; 0x28
   11cec:	mov	r5, r3
   11cf0:	ldrb	r6, [r3, #64]	; 0x40
   11cf4:	cmp	r6, #0
   11cf8:	bne	11e84 <__assert_fail@plt+0xc94>
   11cfc:	ldrb	r3, [r3, #65]	; 0x41
   11d00:	cmp	r3, #0
   11d04:	beq	11dc0 <__assert_fail@plt+0xbd0>
   11d08:	mov	r2, #5
   11d0c:	ldr	r1, [pc, #1452]	; 122c0 <__assert_fail@plt+0x10d0>
   11d10:	bl	10f98 <dcgettext@plt>
   11d14:	mov	r7, r0
   11d18:	mov	r2, #5
   11d1c:	ldr	r1, [pc, #1440]	; 122c4 <__assert_fail@plt+0x10d4>
   11d20:	mov	r0, r6
   11d24:	bl	10f98 <dcgettext@plt>
   11d28:	mov	r8, r0
   11d2c:	mov	r2, #5
   11d30:	ldr	r1, [pc, #1424]	; 122c8 <__assert_fail@plt+0x10d8>
   11d34:	mov	r0, r6
   11d38:	bl	10f98 <dcgettext@plt>
   11d3c:	mov	r9, r0
   11d40:	mov	r2, #5
   11d44:	ldr	r1, [pc, #1408]	; 122cc <__assert_fail@plt+0x10dc>
   11d48:	mov	r0, r6
   11d4c:	bl	10f98 <dcgettext@plt>
   11d50:	mov	sl, r0
   11d54:	mov	r2, #5
   11d58:	ldr	r1, [pc, #1392]	; 122d0 <__assert_fail@plt+0x10e0>
   11d5c:	mov	r0, r6
   11d60:	bl	10f98 <dcgettext@plt>
   11d64:	mov	r2, #5
   11d68:	ldr	r1, [pc, #1380]	; 122d4 <__assert_fail@plt+0x10e4>
   11d6c:	str	r0, [sp, #24]
   11d70:	mov	r0, r6
   11d74:	bl	10f98 <dcgettext@plt>
   11d78:	mov	r3, r0
   11d7c:	mov	r2, #5
   11d80:	ldr	r1, [pc, #1360]	; 122d8 <__assert_fail@plt+0x10e8>
   11d84:	mov	r0, r6
   11d88:	str	r3, [sp, #28]
   11d8c:	bl	10f98 <dcgettext@plt>
   11d90:	ldr	r3, [sp, #28]
   11d94:	mov	r2, #32
   11d98:	mov	r1, r7
   11d9c:	strd	r8, [sp]
   11da0:	str	sl, [sp, #8]
   11da4:	str	r3, [sp, #16]
   11da8:	ldr	r3, [sp, #24]
   11dac:	str	r0, [sp, #20]
   11db0:	str	r3, [sp, #12]
   11db4:	mvn	r3, #0
   11db8:	mov	r0, r3
   11dbc:	bl	1165c <__assert_fail@plt+0x46c>
   11dc0:	ldrb	r6, [r5, #66]	; 0x42
   11dc4:	cmp	r6, #0
   11dc8:	beq	11df0 <__assert_fail@plt+0xc00>
   11dcc:	mov	r0, #0
   11dd0:	bl	110c4 <ttyname@plt>
   11dd4:	subs	r6, r0, #0
   11dd8:	beq	11e74 <__assert_fail@plt+0xc84>
   11ddc:	mov	r2, #5
   11de0:	ldr	r1, [pc, #1268]	; 122dc <__assert_fail@plt+0x10ec>
   11de4:	bl	111cc <strncmp@plt>
   11de8:	cmp	r0, #0
   11dec:	addeq	r6, r6, #5
   11df0:	mov	r3, #-2147483648	; 0x80000000
   11df4:	add	r4, r4, #8
   11df8:	str	r3, [sp, #24]
   11dfc:	b	11f00 <__assert_fail@plt+0xd10>
   11e00:	ldrb	r3, [r4, #44]	; 0x2c
   11e04:	cmp	r3, #0
   11e08:	beq	11e48 <__assert_fail@plt+0xc58>
   11e0c:	ldrsh	r3, [r4]
   11e10:	cmp	r3, #7
   11e14:	bne	11e48 <__assert_fail@plt+0xc58>
   11e18:	mov	r0, r4
   11e1c:	add	r5, r5, #1
   11e20:	bl	13f1c <__assert_fail@plt+0x2d2c>
   11e24:	mov	r3, r0
   11e28:	mov	r2, r6
   11e2c:	mov	r7, r0
   11e30:	mov	r1, r8
   11e34:	mov	r0, #1
   11e38:	mov	r6, r9
   11e3c:	bl	11124 <__printf_chk@plt>
   11e40:	mov	r0, r7
   11e44:	bl	1279c <__assert_fail@plt+0x15ac>
   11e48:	add	r4, r4, #384	; 0x180
   11e4c:	subs	fp, fp, #1
   11e50:	bcs	11e00 <__assert_fail@plt+0xc10>
   11e54:	mov	r2, #5
   11e58:	ldr	r1, [pc, #1152]	; 122e0 <__assert_fail@plt+0x10f0>
   11e5c:	mov	r0, #0
   11e60:	bl	10f98 <dcgettext@plt>
   11e64:	mov	r1, r0
   11e68:	mov	r2, r5
   11e6c:	mov	r0, #1
   11e70:	bl	11124 <__printf_chk@plt>
   11e74:	ldr	r0, [sp, #40]	; 0x28
   11e78:	bl	1279c <__assert_fail@plt+0x15ac>
   11e7c:	add	sp, sp, #60	; 0x3c
   11e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e84:	ldr	r6, [pc, #1112]	; 122e4 <__assert_fail@plt+0x10f4>
   11e88:	mov	r5, r2
   11e8c:	ldr	r8, [pc, #1108]	; 122e8 <__assert_fail@plt+0x10f8>
   11e90:	ldr	r9, [pc, #1108]	; 122ec <__assert_fail@plt+0x10fc>
   11e94:	b	11e4c <__assert_fail@plt+0xc5c>
   11e98:	ldrb	r3, [r5, #66]	; 0x42
   11e9c:	cmp	r3, #0
   11ea0:	beq	11ebc <__assert_fail@plt+0xccc>
   11ea4:	mov	r2, #32
   11ea8:	mov	r1, r4
   11eac:	mov	r0, r6
   11eb0:	bl	111cc <strncmp@plt>
   11eb4:	cmp	r0, #0
   11eb8:	bne	11eec <__assert_fail@plt+0xcfc>
   11ebc:	ldrb	r2, [r5, #67]	; 0x43
   11ec0:	ldrsh	r3, [r4, #-8]
   11ec4:	cmp	r2, #0
   11ec8:	beq	11f10 <__assert_fail@plt+0xd20>
   11ecc:	ldrb	r2, [r4, #36]	; 0x24
   11ed0:	cmp	r2, #0
   11ed4:	beq	11f10 <__assert_fail@plt+0xd20>
   11ed8:	cmp	r3, #7
   11edc:	bne	11f10 <__assert_fail@plt+0xd20>
   11ee0:	mov	r0, r7
   11ee4:	ldr	r1, [sp, #24]
   11ee8:	bl	11904 <__assert_fail@plt+0x714>
   11eec:	ldrsh	r3, [r4, #-8]
   11ef0:	add	r4, r4, #384	; 0x180
   11ef4:	cmp	r3, #2
   11ef8:	ldreq	r3, [r4, #-52]	; 0xffffffcc
   11efc:	streq	r3, [sp, #24]
   11f00:	subs	fp, fp, #1
   11f04:	sub	r7, r4, #8
   11f08:	bcs	11e98 <__assert_fail@plt+0xca8>
   11f0c:	b	11e74 <__assert_fail@plt+0xc84>
   11f10:	ldrb	r2, [r5, #68]	; 0x44
   11f14:	cmp	r2, #0
   11f18:	beq	12048 <__assert_fail@plt+0xe58>
   11f1c:	cmp	r3, #1
   11f20:	bne	12048 <__assert_fail@plt+0xe58>
   11f24:	ldr	r3, [r4, #-4]
   11f28:	ldr	r0, [r5, #72]	; 0x48
   11f2c:	cmp	r3, #0
   11f30:	add	r7, r3, #255	; 0xff
   11f34:	movge	r7, r3
   11f38:	rsbs	r2, r3, #0
   11f3c:	uxtb	r9, r3
   11f40:	uxtb	r3, r2
   11f44:	ubfx	r7, r7, #8, #8
   11f48:	rsbpl	r9, r3, #0
   11f4c:	cmp	r0, #0
   11f50:	bne	11f70 <__assert_fail@plt+0xd80>
   11f54:	mov	r2, #5
   11f58:	ldr	r1, [pc, #912]	; 122f0 <__assert_fail@plt+0x1100>
   11f5c:	bl	10f98 <dcgettext@plt>
   11f60:	bl	110d0 <strlen@plt>
   11f64:	add	r0, r0, #3
   11f68:	bl	145e8 <__assert_fail@plt+0x33f8>
   11f6c:	str	r0, [r5, #72]	; 0x48
   11f70:	ldr	r8, [r5, #72]	; 0x48
   11f74:	mov	r2, #5
   11f78:	mov	r0, #0
   11f7c:	ldr	r1, [pc, #876]	; 122f0 <__assert_fail@plt+0x1100>
   11f80:	bl	10f98 <dcgettext@plt>
   11f84:	uxtb	r3, r9
   11f88:	mvn	r2, #0
   11f8c:	mov	r1, #1
   11f90:	stm	sp, {r0, r3}
   11f94:	mov	r0, r8
   11f98:	ldr	r3, [pc, #852]	; 122f4 <__assert_fail@plt+0x1104>
   11f9c:	bl	110f4 <__sprintf_chk@plt>
   11fa0:	ldr	r0, [r5, #76]	; 0x4c
   11fa4:	cmp	r0, #0
   11fa8:	bne	11fc8 <__assert_fail@plt+0xdd8>
   11fac:	mov	r2, #5
   11fb0:	ldr	r1, [pc, #832]	; 122f8 <__assert_fail@plt+0x1108>
   11fb4:	bl	10f98 <dcgettext@plt>
   11fb8:	bl	110d0 <strlen@plt>
   11fbc:	add	r0, r0, #2
   11fc0:	bl	145e8 <__assert_fail@plt+0x33f8>
   11fc4:	str	r0, [r5, #76]	; 0x4c
   11fc8:	ldr	r8, [r5, #76]	; 0x4c
   11fcc:	mov	r2, #5
   11fd0:	mov	r0, #0
   11fd4:	ldr	r1, [pc, #796]	; 122f8 <__assert_fail@plt+0x1108>
   11fd8:	bl	10f98 <dcgettext@plt>
   11fdc:	cmp	r7, #78	; 0x4e
   11fe0:	mvn	r2, #0
   11fe4:	movne	r3, r7
   11fe8:	moveq	r3, #83	; 0x53
   11fec:	mov	r1, #1
   11ff0:	sub	r7, r7, #32
   11ff4:	stm	sp, {r0, r3}
   11ff8:	mov	r0, r8
   11ffc:	ldr	r3, [pc, #760]	; 122fc <__assert_fail@plt+0x110c>
   12000:	bl	110f4 <__sprintf_chk@plt>
   12004:	ldr	r0, [r4, #332]	; 0x14c
   12008:	ldr	r8, [r5, #72]	; 0x48
   1200c:	bl	118b0 <__assert_fail@plt+0x6c0>
   12010:	ldr	r3, [pc, #716]	; 122e4 <__assert_fail@plt+0x10f4>
   12014:	cmp	r7, #94	; 0x5e
   12018:	ldrls	r2, [r5, #76]	; 0x4c
   1201c:	str	r8, [sp]
   12020:	ldr	r1, [pc, #700]	; 122e4 <__assert_fail@plt+0x10f4>
   12024:	movhi	r2, r3
   12028:	stmib	sp, {r0, r3}
   1202c:	str	r3, [sp, #12]
   12030:	strd	r2, [sp, #16]
   12034:	mvn	r3, #0
   12038:	mov	r2, #32
   1203c:	mov	r0, r3
   12040:	bl	1165c <__assert_fail@plt+0x46c>
   12044:	b	11eec <__assert_fail@plt+0xcfc>
   12048:	ldrb	r2, [r5, #80]	; 0x50
   1204c:	cmp	r2, #0
   12050:	beq	1209c <__assert_fail@plt+0xeac>
   12054:	cmp	r3, #2
   12058:	bne	1209c <__assert_fail@plt+0xeac>
   1205c:	ldr	r1, [pc, #668]	; 12300 <__assert_fail@plt+0x1110>
   12060:	mov	r2, #5
   12064:	mov	r0, #0
   12068:	bl	10f98 <dcgettext@plt>
   1206c:	mov	r7, r0
   12070:	ldr	r0, [r4, #332]	; 0x14c
   12074:	bl	118b0 <__assert_fail@plt+0x6c0>
   12078:	ldr	r1, [pc, #612]	; 122e4 <__assert_fail@plt+0x10f4>
   1207c:	mvn	r3, #0
   12080:	mov	r2, #32
   12084:	str	r7, [sp]
   12088:	strd	r0, [sp, #4]
   1208c:	str	r1, [sp, #12]
   12090:	str	r1, [sp, #16]
   12094:	str	r1, [sp, #20]
   12098:	b	1203c <__assert_fail@plt+0xe4c>
   1209c:	ldrb	r2, [r5, #81]	; 0x51
   120a0:	cmp	r2, #0
   120a4:	beq	120b8 <__assert_fail@plt+0xec8>
   120a8:	cmp	r3, #3
   120ac:	moveq	r2, #5
   120b0:	ldreq	r1, [pc, #588]	; 12304 <__assert_fail@plt+0x1114>
   120b4:	beq	12064 <__assert_fail@plt+0xe74>
   120b8:	ldrb	r2, [r5, #82]	; 0x52
   120bc:	cmp	r2, #0
   120c0:	beq	12124 <__assert_fail@plt+0xf34>
   120c4:	cmp	r3, #5
   120c8:	bne	12124 <__assert_fail@plt+0xf34>
   120cc:	mov	r0, r7
   120d0:	add	r8, sp, #44	; 0x2c
   120d4:	bl	11850 <__assert_fail@plt+0x660>
   120d8:	ldr	r3, [r4, #-4]
   120dc:	mov	r1, #1
   120e0:	mov	r2, #12
   120e4:	mov	r7, r0
   120e8:	mov	r0, r8
   120ec:	str	r3, [sp]
   120f0:	ldr	r3, [pc, #528]	; 12308 <__assert_fail@plt+0x1118>
   120f4:	bl	110f4 <__sprintf_chk@plt>
   120f8:	ldr	r0, [r4, #332]	; 0x14c
   120fc:	bl	118b0 <__assert_fail@plt+0x6c0>
   12100:	ldr	r1, [pc, #476]	; 122e4 <__assert_fail@plt+0x10f4>
   12104:	str	r1, [sp, #20]
   12108:	mov	r3, #32
   1210c:	str	r4, [sp]
   12110:	mov	r2, r3
   12114:	strd	r0, [sp, #4]
   12118:	str	r8, [sp, #12]
   1211c:	str	r7, [sp, #16]
   12120:	b	121a0 <__assert_fail@plt+0xfb0>
   12124:	ldrb	r2, [r5, #83]	; 0x53
   12128:	cmp	r2, #0
   1212c:	beq	121b4 <__assert_fail@plt+0xfc4>
   12130:	cmp	r3, #6
   12134:	bne	121b4 <__assert_fail@plt+0xfc4>
   12138:	mov	r0, r7
   1213c:	add	r8, sp, #44	; 0x2c
   12140:	bl	11850 <__assert_fail@plt+0x660>
   12144:	ldr	r3, [r4, #-4]
   12148:	mov	r7, r0
   1214c:	mov	r2, #12
   12150:	mov	r1, #1
   12154:	mov	r0, r8
   12158:	str	r3, [sp]
   1215c:	ldr	r3, [pc, #420]	; 12308 <__assert_fail@plt+0x1118>
   12160:	bl	110f4 <__sprintf_chk@plt>
   12164:	mov	r2, #5
   12168:	ldr	r1, [pc, #412]	; 1230c <__assert_fail@plt+0x111c>
   1216c:	mov	r0, #0
   12170:	bl	10f98 <dcgettext@plt>
   12174:	mov	r9, r0
   12178:	ldr	r0, [r4, #332]	; 0x14c
   1217c:	bl	118b0 <__assert_fail@plt+0x6c0>
   12180:	ldr	r3, [pc, #348]	; 122e4 <__assert_fail@plt+0x10f4>
   12184:	mov	r1, r9
   12188:	str	r4, [sp]
   1218c:	stmib	sp, {r0, r3, r8}
   12190:	str	r7, [sp, #16]
   12194:	str	r3, [sp, #20]
   12198:	mov	r3, #32
   1219c:	mov	r2, r3
   121a0:	mvn	r0, #0
   121a4:	bl	1165c <__assert_fail@plt+0x46c>
   121a8:	mov	r0, r7
   121ac:	bl	1279c <__assert_fail@plt+0x15ac>
   121b0:	b	11eec <__assert_fail@plt+0xcfc>
   121b4:	ldrb	r2, [r5, #84]	; 0x54
   121b8:	cmp	r2, #0
   121bc:	beq	11eec <__assert_fail@plt+0xcfc>
   121c0:	cmp	r3, #8
   121c4:	bne	11eec <__assert_fail@plt+0xcfc>
   121c8:	mov	r0, r7
   121cc:	add	r8, sp, #44	; 0x2c
   121d0:	bl	11850 <__assert_fail@plt+0x660>
   121d4:	ldr	r3, [r4, #-4]
   121d8:	mov	r7, r0
   121dc:	mov	r2, #12
   121e0:	mov	r1, #1
   121e4:	mov	r0, r8
   121e8:	str	r3, [sp]
   121ec:	ldr	r3, [pc, #276]	; 12308 <__assert_fail@plt+0x1118>
   121f0:	bl	110f4 <__sprintf_chk@plt>
   121f4:	ldr	sl, [r5, #88]	; 0x58
   121f8:	cmp	sl, #0
   121fc:	bne	1223c <__assert_fail@plt+0x104c>
   12200:	mov	r2, #5
   12204:	ldr	r1, [pc, #260]	; 12310 <__assert_fail@plt+0x1120>
   12208:	mov	r0, sl
   1220c:	bl	10f98 <dcgettext@plt>
   12210:	bl	110d0 <strlen@plt>
   12214:	mov	r9, r0
   12218:	mov	r2, #5
   1221c:	ldr	r1, [pc, #240]	; 12314 <__assert_fail@plt+0x1124>
   12220:	mov	r0, sl
   12224:	bl	10f98 <dcgettext@plt>
   12228:	bl	110d0 <strlen@plt>
   1222c:	add	r0, r9, r0
   12230:	add	r0, r0, #14
   12234:	bl	145e8 <__assert_fail@plt+0x33f8>
   12238:	str	r0, [r5, #88]	; 0x58
   1223c:	mov	r2, #5
   12240:	ldr	r1, [pc, #200]	; 12310 <__assert_fail@plt+0x1120>
   12244:	mov	r0, #0
   12248:	ldr	r9, [r5, #88]	; 0x58
   1224c:	bl	10f98 <dcgettext@plt>
   12250:	add	r3, r4, #324	; 0x144
   12254:	mov	sl, r0
   12258:	ldr	r1, [pc, #180]	; 12314 <__assert_fail@plt+0x1124>
   1225c:	mov	r2, #5
   12260:	mov	r0, #0
   12264:	ldrsh	r3, [r3]
   12268:	str	r3, [sp, #28]
   1226c:	bl	10f98 <dcgettext@plt>
   12270:	movw	r3, #326	; 0x146
   12274:	mov	r1, #1
   12278:	ldrsh	r3, [r4, r3]
   1227c:	mvn	r2, #0
   12280:	str	sl, [sp]
   12284:	str	r0, [sp, #8]
   12288:	mov	r0, r9
   1228c:	str	r3, [sp, #12]
   12290:	ldr	r3, [sp, #28]
   12294:	str	r3, [sp, #4]
   12298:	ldr	r3, [pc, #120]	; 12318 <__assert_fail@plt+0x1128>
   1229c:	bl	110f4 <__sprintf_chk@plt>
   122a0:	ldr	r0, [r4, #332]	; 0x14c
   122a4:	bl	118b0 <__assert_fail@plt+0x6c0>
   122a8:	ldr	r3, [r5, #88]	; 0x58
   122ac:	ldr	r1, [pc, #48]	; 122e4 <__assert_fail@plt+0x10f4>
   122b0:	str	r3, [sp, #20]
   122b4:	b	12108 <__assert_fail@plt+0xf18>
   122b8:	strdeq	r5, [r1], -r3
   122bc:	andeq	r6, r2, ip, lsl #3
   122c0:	andeq	r5, r1, lr, ror #2
   122c4:	andeq	r5, r1, r3, ror r1
   122c8:	andeq	r5, r1, r8, ror r1
   122cc:	andeq	r5, r1, sp, ror r1
   122d0:	andeq	r5, r1, r2, lsl #3
   122d4:	andeq	r5, r1, r6, lsl #3
   122d8:	andeq	r5, r1, lr, lsl #3
   122dc:	andeq	r5, r1, r7, lsl #2
   122e0:	andeq	r5, r1, r0, ror #2
   122e4:	andeq	r5, r1, r9, lsl #15
   122e8:	andeq	r5, r1, fp, asr r1
   122ec:	andeq	r5, r1, r1, lsl #2
   122f0:	muleq	r1, r3, r1
   122f4:	muleq	r1, sp, r1
   122f8:	andeq	r5, r1, r3, lsr #3
   122fc:	andeq	r5, r1, r9, lsr #3
   12300:	andeq	r5, r1, lr, lsr #3
   12304:			; <UNDEFINED> instruction: 0x000151ba
   12308:	andeq	r5, r1, r3, lsl #2
   1230c:	andeq	r5, r1, r7, asr #3
   12310:	andeq	r5, r1, sp, asr #3
   12314:	ldrdeq	r5, [r1], -r3
   12318:	ldrdeq	r5, [r1], -r9
   1231c:	subs	r5, r0, #0
   12320:	push	{r7, lr}
   12324:	sub	sp, sp, #56	; 0x38
   12328:	ldr	r4, [pc, #604]	; 1258c <__assert_fail@plt+0x139c>
   1232c:	beq	12364 <__assert_fail@plt+0x1174>
   12330:	mov	r2, #5
   12334:	mov	r0, #0
   12338:	ldr	r3, [pc, #592]	; 12590 <__assert_fail@plt+0x13a0>
   1233c:	ldr	r1, [pc, #592]	; 12594 <__assert_fail@plt+0x13a4>
   12340:	ldr	r6, [r3]
   12344:	bl	10f98 <dcgettext@plt>
   12348:	mov	r2, r0
   1234c:	mov	r1, #1
   12350:	ldr	r3, [r4]
   12354:	mov	r0, r6
   12358:	bl	1113c <__fprintf_chk@plt>
   1235c:	mov	r0, r5
   12360:	bl	110b8 <exit@plt>
   12364:	mov	r2, #5
   12368:	ldr	r1, [pc, #552]	; 12598 <__assert_fail@plt+0x13a8>
   1236c:	mov	r6, sp
   12370:	bl	10f98 <dcgettext@plt>
   12374:	ldr	r2, [r4]
   12378:	mov	r1, r0
   1237c:	mov	r0, #1
   12380:	bl	11124 <__printf_chk@plt>
   12384:	ldr	r4, [pc, #528]	; 1259c <__assert_fail@plt+0x13ac>
   12388:	mov	r2, #5
   1238c:	mov	r0, r5
   12390:	ldr	r1, [pc, #520]	; 125a0 <__assert_fail@plt+0x13b0>
   12394:	bl	10f98 <dcgettext@plt>
   12398:	ldr	r7, [pc, #516]	; 125a4 <__assert_fail@plt+0x13b4>
   1239c:	ldr	r1, [r4]
   123a0:	bl	10ef0 <fputs_unlocked@plt>
   123a4:	mov	r2, #5
   123a8:	ldr	r1, [pc, #504]	; 125a8 <__assert_fail@plt+0x13b8>
   123ac:	mov	r0, r5
   123b0:	bl	10f98 <dcgettext@plt>
   123b4:	ldr	r1, [r4]
   123b8:	bl	10ef0 <fputs_unlocked@plt>
   123bc:	mov	r2, #5
   123c0:	ldr	r1, [pc, #484]	; 125ac <__assert_fail@plt+0x13bc>
   123c4:	mov	r0, r5
   123c8:	bl	10f98 <dcgettext@plt>
   123cc:	ldr	r1, [r4]
   123d0:	bl	10ef0 <fputs_unlocked@plt>
   123d4:	mov	r2, #5
   123d8:	ldr	r1, [pc, #464]	; 125b0 <__assert_fail@plt+0x13c0>
   123dc:	mov	r0, r5
   123e0:	bl	10f98 <dcgettext@plt>
   123e4:	ldr	r1, [r4]
   123e8:	bl	10ef0 <fputs_unlocked@plt>
   123ec:	mov	r2, #5
   123f0:	ldr	r1, [pc, #444]	; 125b4 <__assert_fail@plt+0x13c4>
   123f4:	mov	r0, r5
   123f8:	bl	10f98 <dcgettext@plt>
   123fc:	ldr	r1, [r4]
   12400:	bl	10ef0 <fputs_unlocked@plt>
   12404:	mov	r2, #5
   12408:	ldr	r1, [pc, #424]	; 125b8 <__assert_fail@plt+0x13c8>
   1240c:	mov	r0, r5
   12410:	bl	10f98 <dcgettext@plt>
   12414:	ldr	r1, [r4]
   12418:	bl	10ef0 <fputs_unlocked@plt>
   1241c:	mov	r2, #5
   12420:	ldr	r1, [pc, #404]	; 125bc <__assert_fail@plt+0x13cc>
   12424:	mov	r0, r5
   12428:	bl	10f98 <dcgettext@plt>
   1242c:	ldr	r1, [r4]
   12430:	bl	10ef0 <fputs_unlocked@plt>
   12434:	mov	r2, #5
   12438:	ldr	r1, [pc, #384]	; 125c0 <__assert_fail@plt+0x13d0>
   1243c:	mov	r0, r5
   12440:	bl	10f98 <dcgettext@plt>
   12444:	ldr	r1, [r4]
   12448:	bl	10ef0 <fputs_unlocked@plt>
   1244c:	mov	r2, #5
   12450:	ldr	r1, [pc, #364]	; 125c4 <__assert_fail@plt+0x13d4>
   12454:	mov	r0, r5
   12458:	bl	10f98 <dcgettext@plt>
   1245c:	mov	r1, r0
   12460:	ldr	r3, [pc, #352]	; 125c8 <__assert_fail@plt+0x13d8>
   12464:	mov	r0, #1
   12468:	ldr	r2, [pc, #348]	; 125cc <__assert_fail@plt+0x13dc>
   1246c:	bl	11124 <__printf_chk@plt>
   12470:	ldr	lr, [pc, #344]	; 125d0 <__assert_fail@plt+0x13e0>
   12474:	mov	ip, sp
   12478:	ldm	lr!, {r0, r1, r2, r3}
   1247c:	stmia	ip!, {r0, r1, r2, r3}
   12480:	ldm	lr!, {r0, r1, r2, r3}
   12484:	stmia	ip!, {r0, r1, r2, r3}
   12488:	ldm	lr!, {r0, r1, r2, r3}
   1248c:	stmia	ip!, {r0, r1, r2, r3}
   12490:	ldm	lr, {r0, r1}
   12494:	stm	ip, {r0, r1}
   12498:	ldr	r1, [r6]
   1249c:	cmp	r1, #0
   124a0:	bne	12544 <__assert_fail@plt+0x1354>
   124a4:	ldr	r6, [r6, #4]
   124a8:	mov	r2, #5
   124ac:	mov	r0, #0
   124b0:	ldr	r7, [pc, #236]	; 125a4 <__assert_fail@plt+0x13b4>
   124b4:	ldr	r1, [pc, #280]	; 125d4 <__assert_fail@plt+0x13e4>
   124b8:	cmp	r6, #0
   124bc:	moveq	r6, r7
   124c0:	bl	10f98 <dcgettext@plt>
   124c4:	mov	r1, r0
   124c8:	ldr	r3, [pc, #264]	; 125d8 <__assert_fail@plt+0x13e8>
   124cc:	mov	r0, #1
   124d0:	ldr	r2, [pc, #260]	; 125dc <__assert_fail@plt+0x13ec>
   124d4:	bl	11124 <__printf_chk@plt>
   124d8:	mov	r1, #0
   124dc:	mov	r0, #5
   124e0:	bl	1116c <setlocale@plt>
   124e4:	cmp	r0, #0
   124e8:	bne	1255c <__assert_fail@plt+0x136c>
   124ec:	mov	r2, #5
   124f0:	ldr	r1, [pc, #232]	; 125e0 <__assert_fail@plt+0x13f0>
   124f4:	mov	r0, #0
   124f8:	bl	10f98 <dcgettext@plt>
   124fc:	mov	r1, r0
   12500:	ldr	r3, [pc, #156]	; 125a4 <__assert_fail@plt+0x13b4>
   12504:	mov	r0, #1
   12508:	ldr	r2, [pc, #200]	; 125d8 <__assert_fail@plt+0x13e8>
   1250c:	bl	11124 <__printf_chk@plt>
   12510:	mov	r2, #5
   12514:	ldr	r1, [pc, #200]	; 125e4 <__assert_fail@plt+0x13f4>
   12518:	mov	r0, #0
   1251c:	bl	10f98 <dcgettext@plt>
   12520:	ldr	r2, [pc, #192]	; 125e8 <__assert_fail@plt+0x13f8>
   12524:	cmp	r6, r7
   12528:	mov	r1, r0
   1252c:	mov	r0, #1
   12530:	ldr	r3, [pc, #180]	; 125ec <__assert_fail@plt+0x13fc>
   12534:	moveq	r3, r2
   12538:	mov	r2, r6
   1253c:	bl	11124 <__printf_chk@plt>
   12540:	b	1235c <__assert_fail@plt+0x116c>
   12544:	mov	r0, r7
   12548:	bl	10f08 <strcmp@plt>
   1254c:	cmp	r0, #0
   12550:	beq	124a4 <__assert_fail@plt+0x12b4>
   12554:	add	r6, r6, #8
   12558:	b	12498 <__assert_fail@plt+0x12a8>
   1255c:	mov	r2, #3
   12560:	ldr	r1, [pc, #136]	; 125f0 <__assert_fail@plt+0x1400>
   12564:	bl	111cc <strncmp@plt>
   12568:	cmp	r0, #0
   1256c:	beq	124ec <__assert_fail@plt+0x12fc>
   12570:	mov	r2, #5
   12574:	ldr	r1, [pc, #120]	; 125f4 <__assert_fail@plt+0x1404>
   12578:	mov	r0, #0
   1257c:	bl	10f98 <dcgettext@plt>
   12580:	ldr	r1, [r4]
   12584:	bl	10ef0 <fputs_unlocked@plt>
   12588:	b	124ec <__assert_fail@plt+0x12fc>
   1258c:	andeq	r6, r2, r4, lsl r2
   12590:	andeq	r6, r2, r0, lsl #3
   12594:	andeq	r5, r1, r7, ror #3
   12598:	andeq	r5, r1, lr, lsl #4
   1259c:	andeq	r6, r2, r4, lsl #3
   125a0:	andeq	r5, r1, sl, lsr r2
   125a4:	andeq	r5, r1, r3, ror #3
   125a8:	andeq	r5, r1, r6, ror r2
   125ac:	andeq	r5, r1, r9, lsr r3
   125b0:	andeq	r5, r1, fp, ror #6
   125b4:	andeq	r5, r1, r6, lsr #8
   125b8:	andeq	r5, r1, r5, lsl #10
   125bc:	andeq	r5, r1, r8, lsr #11
   125c0:	ldrdeq	r5, [r1], -r5	; <UNPREDICTABLE>
   125c4:	andeq	r5, r1, fp, lsl #12
   125c8:	andeq	r5, r1, r8, lsl #13
   125cc:	muleq	r1, r6, r6
   125d0:	andeq	r4, r1, r8, ror #30
   125d4:	andeq	r5, r1, r4, lsr #13
   125d8:			; <UNDEFINED> instruction: 0x000156bb
   125dc:	andeq	r5, r1, r3, ror #13
   125e0:	andeq	r5, r1, ip, lsr r7
   125e4:	andeq	r5, r1, r7, asr r7
   125e8:	andeq	r5, r1, r8, lsr #16
   125ec:	andeq	r5, r1, r9, lsl #15
   125f0:	strdeq	r5, [r1], -r1
   125f4:	strdeq	r5, [r1], -r5	; <UNPREDICTABLE>
   125f8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   125fc:	mov	r3, #2
   12600:	mov	r5, #0
   12604:	mov	r4, r1
   12608:	mov	r1, r5
   1260c:	mov	r7, r0
   12610:	ldr	r2, [pc, #112]	; 12688 <__assert_fail@plt+0x1498>
   12614:	str	r5, [sp, #4]
   12618:	str	r3, [r2]
   1261c:	add	r3, sp, #4
   12620:	bl	1119c <getaddrinfo@plt>
   12624:	cmp	r0, #0
   12628:	bne	12678 <__assert_fail@plt+0x1488>
   1262c:	ldr	r6, [sp, #4]
   12630:	ldr	r0, [r6, #24]
   12634:	cmp	r0, r5
   12638:	moveq	r0, r7
   1263c:	bl	10fa4 <strdup@plt>
   12640:	adds	r3, r4, #0
   12644:	mov	r5, r0
   12648:	movne	r3, #1
   1264c:	cmp	r0, #0
   12650:	movne	r3, #0
   12654:	mov	r0, r6
   12658:	cmp	r3, #0
   1265c:	mvnne	r3, #9
   12660:	strne	r3, [r4]
   12664:	bl	11190 <freeaddrinfo@plt>
   12668:	mov	r4, r5
   1266c:	mov	r0, r4
   12670:	add	sp, sp, #12
   12674:	pop	{r4, r5, r6, r7, pc}
   12678:	cmp	r4, #0
   1267c:	beq	1266c <__assert_fail@plt+0x147c>
   12680:	str	r0, [r4]
   12684:	b	12668 <__assert_fail@plt+0x1478>
   12688:	andeq	r6, r2, r8, ror #3
   1268c:	ldr	r1, [pc]	; 12694 <__assert_fail@plt+0x14a4>
   12690:	b	125f8 <__assert_fail@plt+0x1408>
   12694:	andeq	r6, r2, r8, lsl #4
   12698:	ldr	r3, [pc, #4]	; 126a4 <__assert_fail@plt+0x14b4>
   1269c:	ldr	r0, [r3, #32]
   126a0:	b	10f38 <gai_strerror@plt>
   126a4:	andeq	r6, r2, r8, ror #3
   126a8:	ldr	r3, [pc, #4]	; 126b4 <__assert_fail@plt+0x14c4>
   126ac:	str	r0, [r3]
   126b0:	bx	lr
   126b4:	andeq	r6, r2, ip, lsl #4
   126b8:	ldr	r3, [pc, #4]	; 126c4 <__assert_fail@plt+0x14d4>
   126bc:	strb	r0, [r3, #4]
   126c0:	bx	lr
   126c4:	andeq	r6, r2, ip, lsl #4
   126c8:	ldr	r3, [pc, #176]	; 12780 <__assert_fail@plt+0x1590>
   126cc:	push	{r0, r1, r4, r5, r6, lr}
   126d0:	ldr	r0, [r3]
   126d4:	bl	149a4 <__assert_fail@plt+0x37b4>
   126d8:	cmp	r0, #0
   126dc:	beq	12764 <__assert_fail@plt+0x1574>
   126e0:	ldr	r4, [pc, #156]	; 12784 <__assert_fail@plt+0x1594>
   126e4:	bl	110e8 <__errno_location@plt>
   126e8:	mov	r5, r0
   126ec:	ldrb	r6, [r4, #4]
   126f0:	cmp	r6, #0
   126f4:	beq	12704 <__assert_fail@plt+0x1514>
   126f8:	ldr	r3, [r0]
   126fc:	cmp	r3, #32
   12700:	beq	12764 <__assert_fail@plt+0x1574>
   12704:	mov	r2, #5
   12708:	ldr	r1, [pc, #120]	; 12788 <__assert_fail@plt+0x1598>
   1270c:	mov	r0, #0
   12710:	bl	10f98 <dcgettext@plt>
   12714:	mov	r6, r0
   12718:	ldr	r0, [r4]
   1271c:	cmp	r0, #0
   12720:	beq	12750 <__assert_fail@plt+0x1560>
   12724:	ldr	r4, [r5]
   12728:	bl	13dc0 <__assert_fail@plt+0x2bd0>
   1272c:	mov	r3, r0
   12730:	ldr	r2, [pc, #84]	; 1278c <__assert_fail@plt+0x159c>
   12734:	mov	r0, #0
   12738:	str	r6, [sp]
   1273c:	mov	r1, r4
   12740:	bl	11028 <error@plt>
   12744:	ldr	r3, [pc, #68]	; 12790 <__assert_fail@plt+0x15a0>
   12748:	ldr	r0, [r3]
   1274c:	bl	10f44 <_exit@plt>
   12750:	mov	r3, r6
   12754:	ldr	r2, [pc, #56]	; 12794 <__assert_fail@plt+0x15a4>
   12758:	ldr	r1, [r5]
   1275c:	bl	11028 <error@plt>
   12760:	b	12744 <__assert_fail@plt+0x1554>
   12764:	ldr	r3, [pc, #44]	; 12798 <__assert_fail@plt+0x15a8>
   12768:	ldr	r0, [r3]
   1276c:	bl	149a4 <__assert_fail@plt+0x37b4>
   12770:	cmp	r0, #0
   12774:	bne	12744 <__assert_fail@plt+0x1554>
   12778:	add	sp, sp, #8
   1277c:	pop	{r4, r5, r6, pc}
   12780:	andeq	r6, r2, r4, lsl #3
   12784:	andeq	r6, r2, ip, lsl #4
   12788:	andeq	r5, r1, r3, ror #17
   1278c:	andeq	r5, r1, pc, ror #17
   12790:	andeq	r6, r2, ip, lsr #2
   12794:	strdeq	r5, [r1], -r3
   12798:	andeq	r6, r2, r0, lsl #3
   1279c:	push	{r0, r1, r2, r4, r5, lr}
   127a0:	mov	r5, r0
   127a4:	bl	110e8 <__errno_location@plt>
   127a8:	mov	r4, r0
   127ac:	mov	r0, r5
   127b0:	ldr	r3, [r4]
   127b4:	str	r3, [sp]
   127b8:	str	r3, [sp, #4]
   127bc:	mov	r3, #0
   127c0:	str	r3, [r4]
   127c4:	bl	10f2c <free@plt>
   127c8:	ldr	r3, [r4]
   127cc:	add	r2, sp, #8
   127d0:	clz	r3, r3
   127d4:	lsr	r3, r3, #5
   127d8:	add	r3, r2, r3, lsl #2
   127dc:	ldr	r3, [r3, #-8]
   127e0:	str	r3, [r4]
   127e4:	add	sp, sp, #12
   127e8:	pop	{r4, r5, pc}
   127ec:	push	{lr}		; (str lr, [sp, #-4]!)
   127f0:	sub	sp, sp, #268	; 0x10c
   127f4:	movw	r2, #257	; 0x101
   127f8:	add	r1, sp, #4
   127fc:	bl	1405c <__assert_fail@plt+0x2e6c>
   12800:	cmp	r0, #0
   12804:	movne	r0, #0
   12808:	bne	12838 <__assert_fail@plt+0x1648>
   1280c:	ldr	r1, [pc, #44]	; 12840 <__assert_fail@plt+0x1650>
   12810:	add	r0, sp, #4
   12814:	bl	10f08 <strcmp@plt>
   12818:	cmp	r0, #0
   1281c:	beq	12834 <__assert_fail@plt+0x1644>
   12820:	ldr	r1, [pc, #28]	; 12844 <__assert_fail@plt+0x1654>
   12824:	add	r0, sp, #4
   12828:	bl	10f08 <strcmp@plt>
   1282c:	adds	r0, r0, #0
   12830:	movne	r0, #1
   12834:	and	r0, r0, #1
   12838:	add	sp, sp, #268	; 0x10c
   1283c:	pop	{pc}		; (ldr pc, [sp], #4)
   12840:	strdeq	r5, [r1], -r6
   12844:	strdeq	r5, [r1], -r8
   12848:	mov	r3, #0
   1284c:	cmp	r0, #0
   12850:	push	{r4, r5, r6, r7, r8, lr}
   12854:	mov	r4, r0
   12858:	mov	r5, r1
   1285c:	add	r6, r2, #20
   12860:	strb	r3, [r2, #20]
   12864:	sbcs	r3, r1, #0
   12868:	bge	128cc <__assert_fail@plt+0x16dc>
   1286c:	mov	r0, r4
   12870:	mov	r1, r5
   12874:	mov	r2, #10
   12878:	mov	r3, #0
   1287c:	bl	14c7c <__assert_fail@plt+0x3a8c>
   12880:	rsb	r2, r2, #48	; 0x30
   12884:	mov	r3, #0
   12888:	mov	r0, r4
   1288c:	mov	r1, r5
   12890:	strb	r2, [r6, #-1]
   12894:	mov	r2, #10
   12898:	sub	r7, r6, #1
   1289c:	bl	14c7c <__assert_fail@plt+0x3a8c>
   128a0:	mov	r4, r0
   128a4:	mov	r5, r1
   128a8:	orrs	r3, r4, r5
   128ac:	bne	128c4 <__assert_fail@plt+0x16d4>
   128b0:	mov	r3, #45	; 0x2d
   128b4:	sub	r6, r6, #2
   128b8:	strb	r3, [r7, #-1]
   128bc:	mov	r0, r6
   128c0:	pop	{r4, r5, r6, r7, r8, pc}
   128c4:	mov	r6, r7
   128c8:	b	1286c <__assert_fail@plt+0x167c>
   128cc:	mov	r0, r4
   128d0:	mov	r1, r5
   128d4:	mov	r2, #10
   128d8:	mov	r3, #0
   128dc:	bl	14c7c <__assert_fail@plt+0x3a8c>
   128e0:	add	r2, r2, #48	; 0x30
   128e4:	mov	r3, #0
   128e8:	mov	r0, r4
   128ec:	mov	r1, r5
   128f0:	strb	r2, [r6, #-1]!
   128f4:	mov	r2, #10
   128f8:	bl	14c7c <__assert_fail@plt+0x3a8c>
   128fc:	mov	r4, r0
   12900:	mov	r5, r1
   12904:	orrs	r3, r4, r5
   12908:	bne	128cc <__assert_fail@plt+0x16dc>
   1290c:	b	128bc <__assert_fail@plt+0x16cc>
   12910:	push	{r4, r5, r6, lr}
   12914:	subs	r4, r0, #0
   12918:	bne	12930 <__assert_fail@plt+0x1740>
   1291c:	ldr	r3, [pc, #124]	; 129a0 <__assert_fail@plt+0x17b0>
   12920:	ldr	r0, [pc, #124]	; 129a4 <__assert_fail@plt+0x17b4>
   12924:	ldr	r1, [r3]
   12928:	bl	111c0 <fputs@plt>
   1292c:	bl	111d8 <abort@plt>
   12930:	mov	r1, #47	; 0x2f
   12934:	bl	11178 <strrchr@plt>
   12938:	subs	r6, r0, #0
   1293c:	beq	1298c <__assert_fail@plt+0x179c>
   12940:	add	r5, r6, #1
   12944:	sub	r3, r5, r4
   12948:	cmp	r3, #6
   1294c:	ble	1298c <__assert_fail@plt+0x179c>
   12950:	mov	r2, #7
   12954:	ldr	r1, [pc, #76]	; 129a8 <__assert_fail@plt+0x17b8>
   12958:	sub	r0, r6, #6
   1295c:	bl	111cc <strncmp@plt>
   12960:	cmp	r0, #0
   12964:	bne	1298c <__assert_fail@plt+0x179c>
   12968:	mov	r2, #3
   1296c:	ldr	r1, [pc, #56]	; 129ac <__assert_fail@plt+0x17bc>
   12970:	mov	r0, r5
   12974:	bl	111cc <strncmp@plt>
   12978:	cmp	r0, #0
   1297c:	ldreq	r3, [pc, #44]	; 129b0 <__assert_fail@plt+0x17c0>
   12980:	addeq	r4, r6, #4
   12984:	movne	r4, r5
   12988:	streq	r4, [r3]
   1298c:	ldr	r3, [pc, #32]	; 129b4 <__assert_fail@plt+0x17c4>
   12990:	str	r4, [r3]
   12994:	ldr	r3, [pc, #28]	; 129b8 <__assert_fail@plt+0x17c8>
   12998:	str	r4, [r3]
   1299c:	pop	{r4, r5, r6, pc}
   129a0:	andeq	r6, r2, r0, lsl #3
   129a4:	strdeq	r5, [r1], -lr
   129a8:	andeq	r5, r1, r6, lsr r9
   129ac:	andeq	r5, r1, lr, lsr r9
   129b0:	andeq	r6, r2, r0, ror r1
   129b4:	andeq	r6, r2, r4, lsl r2
   129b8:	andeq	r6, r2, r4, ror r1
   129bc:	push	{r4, lr}
   129c0:	mov	r2, #48	; 0x30
   129c4:	mov	r4, r1
   129c8:	mov	r1, #0
   129cc:	bl	1110c <memset@plt>
   129d0:	cmp	r4, #10
   129d4:	bne	129dc <__assert_fail@plt+0x17ec>
   129d8:	bl	111d8 <abort@plt>
   129dc:	str	r4, [r0]
   129e0:	pop	{r4, pc}
   129e4:	push	{r4, r5, r6, lr}
   129e8:	mov	r2, #5
   129ec:	mov	r6, r0
   129f0:	mov	r5, r1
   129f4:	mov	r1, r0
   129f8:	mov	r0, #0
   129fc:	bl	10f98 <dcgettext@plt>
   12a00:	cmp	r6, r0
   12a04:	mov	r4, r0
   12a08:	bne	12a78 <__assert_fail@plt+0x1888>
   12a0c:	bl	14bcc <__assert_fail@plt+0x39dc>
   12a10:	ldrb	r3, [r0]
   12a14:	bic	r3, r3, #32
   12a18:	cmp	r3, #85	; 0x55
   12a1c:	bne	12a80 <__assert_fail@plt+0x1890>
   12a20:	ldrb	r3, [r0, #1]
   12a24:	bic	r3, r3, #32
   12a28:	cmp	r3, #84	; 0x54
   12a2c:	bne	12af0 <__assert_fail@plt+0x1900>
   12a30:	ldrb	r3, [r0, #2]
   12a34:	bic	r3, r3, #32
   12a38:	cmp	r3, #70	; 0x46
   12a3c:	bne	12af0 <__assert_fail@plt+0x1900>
   12a40:	ldrb	r3, [r0, #3]
   12a44:	cmp	r3, #45	; 0x2d
   12a48:	bne	12af0 <__assert_fail@plt+0x1900>
   12a4c:	ldrb	r3, [r0, #4]
   12a50:	cmp	r3, #56	; 0x38
   12a54:	bne	12af0 <__assert_fail@plt+0x1900>
   12a58:	ldrb	r3, [r0, #5]
   12a5c:	cmp	r3, #0
   12a60:	bne	12af0 <__assert_fail@plt+0x1900>
   12a64:	ldrb	r2, [r4]
   12a68:	ldr	r3, [pc, #144]	; 12b00 <__assert_fail@plt+0x1910>
   12a6c:	ldr	r4, [pc, #144]	; 12b04 <__assert_fail@plt+0x1914>
   12a70:	cmp	r2, #96	; 0x60
   12a74:	movne	r4, r3
   12a78:	mov	r0, r4
   12a7c:	pop	{r4, r5, r6, pc}
   12a80:	cmp	r3, #71	; 0x47
   12a84:	bne	12af0 <__assert_fail@plt+0x1900>
   12a88:	ldrb	r3, [r0, #1]
   12a8c:	bic	r3, r3, #32
   12a90:	cmp	r3, #66	; 0x42
   12a94:	bne	12af0 <__assert_fail@plt+0x1900>
   12a98:	ldrb	r3, [r0, #2]
   12a9c:	cmp	r3, #49	; 0x31
   12aa0:	bne	12af0 <__assert_fail@plt+0x1900>
   12aa4:	ldrb	r3, [r0, #3]
   12aa8:	cmp	r3, #56	; 0x38
   12aac:	bne	12af0 <__assert_fail@plt+0x1900>
   12ab0:	ldrb	r3, [r0, #4]
   12ab4:	cmp	r3, #48	; 0x30
   12ab8:	bne	12af0 <__assert_fail@plt+0x1900>
   12abc:	ldrb	r3, [r0, #5]
   12ac0:	cmp	r3, #51	; 0x33
   12ac4:	bne	12af0 <__assert_fail@plt+0x1900>
   12ac8:	ldrb	r3, [r0, #6]
   12acc:	cmp	r3, #48	; 0x30
   12ad0:	bne	12af0 <__assert_fail@plt+0x1900>
   12ad4:	ldrb	r3, [r0, #7]
   12ad8:	cmp	r3, #0
   12adc:	bne	12af0 <__assert_fail@plt+0x1900>
   12ae0:	ldrb	r2, [r4]
   12ae4:	ldr	r3, [pc, #28]	; 12b08 <__assert_fail@plt+0x1918>
   12ae8:	ldr	r4, [pc, #28]	; 12b0c <__assert_fail@plt+0x191c>
   12aec:	b	12a70 <__assert_fail@plt+0x1880>
   12af0:	ldr	r4, [pc, #24]	; 12b10 <__assert_fail@plt+0x1920>
   12af4:	cmp	r5, #9
   12af8:	ldr	r3, [pc, #20]	; 12b14 <__assert_fail@plt+0x1924>
   12afc:	b	12a74 <__assert_fail@plt+0x1884>
   12b00:	muleq	r1, sl, r9
   12b04:	andeq	r5, r1, r5, lsr #19
   12b08:	muleq	r1, lr, r9
   12b0c:	andeq	r5, r1, r1, lsr #19
   12b10:	muleq	r1, r8, r9
   12b14:	andeq	r5, r1, r9, lsr #19
   12b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b1c:	sub	sp, sp, #108	; 0x6c
   12b20:	mov	r8, r0
   12b24:	mov	r5, r1
   12b28:	mov	r6, #0
   12b2c:	str	r3, [sp, #40]	; 0x28
   12b30:	str	r2, [sp, #48]	; 0x30
   12b34:	ldr	sl, [sp, #144]	; 0x90
   12b38:	bl	10fec <__ctype_get_mb_cur_max@plt>
   12b3c:	ldr	r3, [sp, #148]	; 0x94
   12b40:	str	r6, [sp, #24]
   12b44:	str	r6, [sp, #32]
   12b48:	str	r6, [sp, #44]	; 0x2c
   12b4c:	str	r6, [sp, #52]	; 0x34
   12b50:	ubfx	r7, r3, #1, #1
   12b54:	mov	r3, #1
   12b58:	str	r6, [sp, #60]	; 0x3c
   12b5c:	str	r3, [sp, #72]	; 0x48
   12b60:	str	r0, [sp, #76]	; 0x4c
   12b64:	cmp	sl, #10
   12b68:	ldrls	pc, [pc, sl, lsl #2]
   12b6c:	b	12db0 <__assert_fail@plt+0x1bc0>
   12b70:	muleq	r1, ip, fp
   12b74:	andeq	r2, r1, r8, asr #27
   12b78:	andeq	r2, r1, ip, asr #26
   12b7c:	andeq	r2, r1, r4, ror #26
   12b80:	andeq	r2, r1, r4, lsr sp
   12b84:	andeq	r2, r1, ip, lsl #25
   12b88:	andeq	r2, r1, ip, ror #24
   12b8c:			; <UNDEFINED> instruction: 0x00012db4
   12b90:			; <UNDEFINED> instruction: 0x00012cbc
   12b94:			; <UNDEFINED> instruction: 0x00012cbc
   12b98:			; <UNDEFINED> instruction: 0x00012cbc
   12b9c:	mov	r4, sl
   12ba0:	mov	r7, #0
   12ba4:	mov	r9, r5
   12ba8:	mov	r3, #0
   12bac:	str	r6, [sp, #68]	; 0x44
   12bb0:	str	r3, [sp, #28]
   12bb4:	ldr	r3, [sp, #40]	; 0x28
   12bb8:	cmn	r3, #1
   12bbc:	bne	1375c <__assert_fail@plt+0x256c>
   12bc0:	ldr	r2, [sp, #28]
   12bc4:	ldr	r3, [sp, #48]	; 0x30
   12bc8:	ldrb	r3, [r3, r2]
   12bcc:	adds	r3, r3, #0
   12bd0:	movne	r3, #1
   12bd4:	str	r3, [sp, #36]	; 0x24
   12bd8:	ldr	r3, [sp, #36]	; 0x24
   12bdc:	cmp	r3, #0
   12be0:	bne	12dec <__assert_fail@plt+0x1bfc>
   12be4:	sub	r3, sl, #2
   12be8:	cmp	r4, #0
   12bec:	clz	r3, r3
   12bf0:	movne	r2, #0
   12bf4:	lsr	r3, r3, #5
   12bf8:	andeq	r2, r3, r7
   12bfc:	cmp	r2, #0
   12c00:	bne	12fb0 <__assert_fail@plt+0x1dc0>
   12c04:	eor	r7, r7, #1
   12c08:	ands	r3, r3, r7
   12c0c:	beq	137d4 <__assert_fail@plt+0x25e4>
   12c10:	ldr	r2, [sp, #68]	; 0x44
   12c14:	cmp	r2, #0
   12c18:	beq	1379c <__assert_fail@plt+0x25ac>
   12c1c:	ldr	r3, [sp, #72]	; 0x48
   12c20:	cmp	r3, #0
   12c24:	beq	13770 <__assert_fail@plt+0x2580>
   12c28:	ldr	r2, [sp, #48]	; 0x30
   12c2c:	ldr	r3, [sp, #160]	; 0xa0
   12c30:	ldr	r1, [sp, #60]	; 0x3c
   12c34:	str	r3, [sp, #16]
   12c38:	ldr	r3, [sp, #156]	; 0x9c
   12c3c:	str	r3, [sp, #12]
   12c40:	ldr	r3, [sp, #152]	; 0x98
   12c44:	str	r3, [sp, #8]
   12c48:	ldr	r3, [sp, #148]	; 0x94
   12c4c:	str	r3, [sp, #4]
   12c50:	mov	r3, #5
   12c54:	str	r3, [sp]
   12c58:	ldr	r3, [sp, #40]	; 0x28
   12c5c:	mov	r0, r8
   12c60:	bl	12b18 <__assert_fail@plt+0x1928>
   12c64:	mov	r4, r0
   12c68:	b	137c8 <__assert_fail@plt+0x25d8>
   12c6c:	ldr	r3, [pc, #2948]	; 137f8 <__assert_fail@plt+0x2608>
   12c70:	mov	r7, #1
   12c74:	mov	r4, #0
   12c78:	mov	sl, #5
   12c7c:	str	r7, [sp, #24]
   12c80:	str	r7, [sp, #32]
   12c84:	str	r3, [sp, #44]	; 0x2c
   12c88:	b	12ba4 <__assert_fail@plt+0x19b4>
   12c8c:	cmp	r7, #0
   12c90:	bne	12dd4 <__assert_fail@plt+0x1be4>
   12c94:	cmp	r5, #0
   12c98:	mov	r4, #1
   12c9c:	movne	r3, #34	; 0x22
   12ca0:	strbne	r3, [r8]
   12ca4:	mov	r3, #1
   12ca8:	str	r3, [sp, #24]
   12cac:	str	r3, [sp, #32]
   12cb0:	ldr	r3, [pc, #2880]	; 137f8 <__assert_fail@plt+0x2608>
   12cb4:	str	r3, [sp, #44]	; 0x2c
   12cb8:	b	12ba4 <__assert_fail@plt+0x19b4>
   12cbc:	cmp	sl, #10
   12cc0:	beq	12ce4 <__assert_fail@plt+0x1af4>
   12cc4:	mov	r1, sl
   12cc8:	ldr	r0, [pc, #2860]	; 137fc <__assert_fail@plt+0x260c>
   12ccc:	bl	129e4 <__assert_fail@plt+0x17f4>
   12cd0:	mov	r1, sl
   12cd4:	str	r0, [sp, #156]	; 0x9c
   12cd8:	ldr	r0, [pc, #2848]	; 13800 <__assert_fail@plt+0x2610>
   12cdc:	bl	129e4 <__assert_fail@plt+0x17f4>
   12ce0:	str	r0, [sp, #160]	; 0xa0
   12ce4:	cmp	r7, #0
   12ce8:	moveq	r4, r7
   12cec:	beq	12d04 <__assert_fail@plt+0x1b14>
   12cf0:	mov	r4, #0
   12cf4:	b	12d14 <__assert_fail@plt+0x1b24>
   12cf8:	cmp	r5, r4
   12cfc:	strbhi	r3, [r8, r4]
   12d00:	add	r4, r4, #1
   12d04:	ldr	r3, [sp, #156]	; 0x9c
   12d08:	ldrb	r3, [r3, r4]
   12d0c:	cmp	r3, #0
   12d10:	bne	12cf8 <__assert_fail@plt+0x1b08>
   12d14:	ldr	r0, [sp, #160]	; 0xa0
   12d18:	bl	110d0 <strlen@plt>
   12d1c:	ldr	r3, [sp, #160]	; 0xa0
   12d20:	str	r0, [sp, #32]
   12d24:	str	r3, [sp, #44]	; 0x2c
   12d28:	mov	r3, #1
   12d2c:	str	r3, [sp, #24]
   12d30:	b	12ba4 <__assert_fail@plt+0x19b4>
   12d34:	mov	r3, #1
   12d38:	cmp	r7, #0
   12d3c:	streq	r3, [sp, #24]
   12d40:	beq	12d84 <__assert_fail@plt+0x1b94>
   12d44:	str	r3, [sp, #32]
   12d48:	b	12d70 <__assert_fail@plt+0x1b80>
   12d4c:	cmp	r7, #0
   12d50:	beq	12d84 <__assert_fail@plt+0x1b94>
   12d54:	mov	r3, #1
   12d58:	str	r3, [sp, #32]
   12d5c:	ldr	r3, [pc, #2716]	; 13800 <__assert_fail@plt+0x2610>
   12d60:	b	12de4 <__assert_fail@plt+0x1bf4>
   12d64:	mov	r7, #1
   12d68:	str	r7, [sp, #24]
   12d6c:	str	r7, [sp, #32]
   12d70:	ldr	r3, [pc, #2696]	; 13800 <__assert_fail@plt+0x2610>
   12d74:	mov	r4, #0
   12d78:	str	r3, [sp, #44]	; 0x2c
   12d7c:	mov	sl, #2
   12d80:	b	12ba4 <__assert_fail@plt+0x19b4>
   12d84:	cmp	r5, #0
   12d88:	movne	r3, #39	; 0x27
   12d8c:	movne	r7, #0
   12d90:	strbne	r3, [r8]
   12d94:	moveq	r7, r5
   12d98:	mov	r3, #1
   12d9c:	mov	r4, #1
   12da0:	str	r3, [sp, #32]
   12da4:	ldr	r3, [pc, #2644]	; 13800 <__assert_fail@plt+0x2610>
   12da8:	str	r3, [sp, #44]	; 0x2c
   12dac:	b	12d7c <__assert_fail@plt+0x1b8c>
   12db0:	bl	111d8 <abort@plt>
   12db4:	mov	r3, #1
   12db8:	mov	r7, #0
   12dbc:	str	r3, [sp, #24]
   12dc0:	mov	r4, #0
   12dc4:	b	12ba4 <__assert_fail@plt+0x19b4>
   12dc8:	mov	r7, #1
   12dcc:	str	sl, [sp, #32]
   12dd0:	b	12d70 <__assert_fail@plt+0x1b80>
   12dd4:	mov	r3, #1
   12dd8:	str	r7, [sp, #24]
   12ddc:	str	r3, [sp, #32]
   12de0:	ldr	r3, [pc, #2576]	; 137f8 <__assert_fail@plt+0x2608>
   12de4:	str	r3, [sp, #44]	; 0x2c
   12de8:	b	12dc0 <__assert_fail@plt+0x1bd0>
   12dec:	ldr	fp, [sp, #24]
   12df0:	ldr	r3, [sp, #32]
   12df4:	cmp	sl, #2
   12df8:	moveq	fp, #0
   12dfc:	andne	fp, fp, #1
   12e00:	adds	r5, r3, #0
   12e04:	movne	r5, #1
   12e08:	ands	r3, fp, r5
   12e0c:	str	r3, [sp, #64]	; 0x40
   12e10:	beq	12ee0 <__assert_fail@plt+0x1cf0>
   12e14:	ldr	r3, [sp, #28]
   12e18:	ldr	r2, [sp, #32]
   12e1c:	cmp	r2, #1
   12e20:	add	r6, r3, r2
   12e24:	mov	r3, r2
   12e28:	ldr	r2, [sp, #40]	; 0x28
   12e2c:	movls	r3, #0
   12e30:	movhi	r3, #1
   12e34:	cmn	r2, #1
   12e38:	movne	r3, #0
   12e3c:	cmp	r3, #0
   12e40:	beq	12e50 <__assert_fail@plt+0x1c60>
   12e44:	ldr	r0, [sp, #48]	; 0x30
   12e48:	bl	110d0 <strlen@plt>
   12e4c:	str	r0, [sp, #40]	; 0x28
   12e50:	ldr	r3, [sp, #40]	; 0x28
   12e54:	cmp	r6, r3
   12e58:	bhi	12ed8 <__assert_fail@plt+0x1ce8>
   12e5c:	ldr	r0, [sp, #28]
   12e60:	ldr	r2, [sp, #32]
   12e64:	ldr	r3, [sp, #48]	; 0x30
   12e68:	ldr	r1, [sp, #44]	; 0x2c
   12e6c:	add	r0, r3, r0
   12e70:	bl	10f74 <memcmp@plt>
   12e74:	cmp	r0, #0
   12e78:	bne	12ed8 <__assert_fail@plt+0x1ce8>
   12e7c:	cmp	r7, #0
   12e80:	beq	12ee0 <__assert_fail@plt+0x1cf0>
   12e84:	str	r7, [sp, #24]
   12e88:	ldr	r3, [sp, #24]
   12e8c:	mov	r1, r9
   12e90:	ldr	r2, [sp, #48]	; 0x30
   12e94:	cmp	sl, #2
   12e98:	movne	r3, #0
   12e9c:	andeq	r3, r3, #1
   12ea0:	cmp	r3, #0
   12ea4:	ldr	r3, [sp, #160]	; 0xa0
   12ea8:	movne	sl, #4
   12eac:	str	sl, [sp]
   12eb0:	str	r3, [sp, #16]
   12eb4:	ldr	r3, [sp, #156]	; 0x9c
   12eb8:	str	r3, [sp, #12]
   12ebc:	mov	r3, #0
   12ec0:	str	r3, [sp, #8]
   12ec4:	ldr	r3, [sp, #148]	; 0x94
   12ec8:	bic	r3, r3, #2
   12ecc:	str	r3, [sp, #4]
   12ed0:	ldr	r3, [sp, #40]	; 0x28
   12ed4:	b	12c5c <__assert_fail@plt+0x1a6c>
   12ed8:	mov	r3, #0
   12edc:	str	r3, [sp, #64]	; 0x40
   12ee0:	ldr	r2, [sp, #28]
   12ee4:	ldr	r3, [sp, #48]	; 0x30
   12ee8:	add	r3, r3, r2
   12eec:	str	r3, [sp, #80]	; 0x50
   12ef0:	ldr	r3, [sp, #48]	; 0x30
   12ef4:	ldrb	r6, [r3, r2]
   12ef8:	cmp	r6, #58	; 0x3a
   12efc:	bhi	13060 <__assert_fail@plt+0x1e70>
   12f00:	cmp	r6, #43	; 0x2b
   12f04:	bcs	13220 <__assert_fail@plt+0x2030>
   12f08:	cmp	r6, #32
   12f0c:	beq	13274 <__assert_fail@plt+0x2084>
   12f10:	bhi	12fb8 <__assert_fail@plt+0x1dc8>
   12f14:	cmp	r6, #9
   12f18:	beq	1341c <__assert_fail@plt+0x222c>
   12f1c:	bhi	12f7c <__assert_fail@plt+0x1d8c>
   12f20:	cmp	r6, #7
   12f24:	beq	1342c <__assert_fail@plt+0x223c>
   12f28:	bhi	13448 <__assert_fail@plt+0x2258>
   12f2c:	cmp	r6, #0
   12f30:	beq	13290 <__assert_fail@plt+0x20a0>
   12f34:	ldr	r3, [sp, #76]	; 0x4c
   12f38:	cmp	r3, #1
   12f3c:	bne	13494 <__assert_fail@plt+0x22a4>
   12f40:	bl	110ac <__ctype_b_loc@plt>
   12f44:	ldr	r2, [r0]
   12f48:	sxth	r3, r6
   12f4c:	lsl	r3, r3, #1
   12f50:	ldrh	r5, [r2, r3]
   12f54:	ldr	r3, [sp, #76]	; 0x4c
   12f58:	ubfx	r5, r5, #14, #1
   12f5c:	str	r3, [sp, #56]	; 0x38
   12f60:	ldr	r3, [sp, #24]
   12f64:	eor	fp, r5, #1
   12f68:	and	fp, fp, r3
   12f6c:	ands	fp, fp, #255	; 0xff
   12f70:	beq	13150 <__assert_fail@plt+0x1f60>
   12f74:	mov	r5, #0
   12f78:	b	13540 <__assert_fail@plt+0x2350>
   12f7c:	cmp	r6, #11
   12f80:	beq	13450 <__assert_fail@plt+0x2260>
   12f84:	bcc	13424 <__assert_fail@plt+0x2234>
   12f88:	cmp	r6, #12
   12f8c:	beq	13458 <__assert_fail@plt+0x2268>
   12f90:	cmp	r6, #13
   12f94:	moveq	r3, #114	; 0x72
   12f98:	bne	12f34 <__assert_fail@plt+0x1d44>
   12f9c:	cmp	sl, #2
   12fa0:	movne	r2, #0
   12fa4:	andeq	r2, r7, #1
   12fa8:	cmp	r2, #0
   12fac:	beq	13430 <__assert_fail@plt+0x2240>
   12fb0:	mov	sl, #2
   12fb4:	b	12e88 <__assert_fail@plt+0x1c98>
   12fb8:	cmp	r6, #37	; 0x25
   12fbc:	beq	13220 <__assert_fail@plt+0x2030>
   12fc0:	bhi	12fd4 <__assert_fail@plt+0x1de4>
   12fc4:	cmp	r6, #35	; 0x23
   12fc8:	beq	13268 <__assert_fail@plt+0x2078>
   12fcc:	mov	r5, #0
   12fd0:	b	13278 <__assert_fail@plt+0x2088>
   12fd4:	cmp	r6, #39	; 0x27
   12fd8:	bne	12fcc <__assert_fail@plt+0x1ddc>
   12fdc:	cmp	sl, #2
   12fe0:	ldrne	r5, [sp, #36]	; 0x24
   12fe4:	movne	r3, r5
   12fe8:	strne	r3, [sp, #68]	; 0x44
   12fec:	bne	1336c <__assert_fail@plt+0x217c>
   12ff0:	cmp	r7, #0
   12ff4:	bne	12e88 <__assert_fail@plt+0x1c98>
   12ff8:	ldr	r3, [sp, #60]	; 0x3c
   12ffc:	cmp	r9, #0
   13000:	clz	r3, r3
   13004:	lsr	r3, r3, #5
   13008:	moveq	r3, #0
   1300c:	cmp	r3, #0
   13010:	strne	r9, [sp, #60]	; 0x3c
   13014:	movne	r9, #0
   13018:	bne	13028 <__assert_fail@plt+0x1e38>
   1301c:	cmp	r9, r4
   13020:	movhi	r3, #39	; 0x27
   13024:	strbhi	r3, [r8, r4]
   13028:	add	r3, r4, #1
   1302c:	ldr	r5, [sp, #36]	; 0x24
   13030:	mov	fp, #0
   13034:	cmp	r3, r9
   13038:	movcc	r2, #92	; 0x5c
   1303c:	str	fp, [sp, #52]	; 0x34
   13040:	strbcc	r2, [r8, r3]
   13044:	add	r3, r4, #2
   13048:	add	r4, r4, #3
   1304c:	cmp	r3, r9
   13050:	str	r5, [sp, #68]	; 0x44
   13054:	movcc	r2, #39	; 0x27
   13058:	strbcc	r2, [r8, r3]
   1305c:	b	13150 <__assert_fail@plt+0x1f60>
   13060:	cmp	r6, #94	; 0x5e
   13064:	beq	12fcc <__assert_fail@plt+0x1ddc>
   13068:	bhi	13228 <__assert_fail@plt+0x2038>
   1306c:	cmp	r6, #90	; 0x5a
   13070:	bhi	13214 <__assert_fail@plt+0x2024>
   13074:	cmp	r6, #65	; 0x41
   13078:	bcs	13220 <__assert_fail@plt+0x2030>
   1307c:	cmp	r6, #62	; 0x3e
   13080:	bls	12fcc <__assert_fail@plt+0x1ddc>
   13084:	cmp	r6, #63	; 0x3f
   13088:	bne	12f34 <__assert_fail@plt+0x1d44>
   1308c:	cmp	sl, #2
   13090:	beq	13374 <__assert_fail@plt+0x2184>
   13094:	cmp	sl, #5
   13098:	movne	fp, #0
   1309c:	bne	13744 <__assert_fail@plt+0x2554>
   130a0:	ldr	r3, [sp, #148]	; 0x94
   130a4:	tst	r3, #4
   130a8:	beq	1337c <__assert_fail@plt+0x218c>
   130ac:	ldr	r3, [sp, #28]
   130b0:	add	r2, r3, #2
   130b4:	ldr	r3, [sp, #40]	; 0x28
   130b8:	cmp	r2, r3
   130bc:	bcs	1337c <__assert_fail@plt+0x218c>
   130c0:	ldr	r1, [sp, #28]
   130c4:	ldr	r3, [sp, #48]	; 0x30
   130c8:	add	r3, r3, r1
   130cc:	ldrb	r1, [r3, #1]
   130d0:	cmp	r1, #63	; 0x3f
   130d4:	bne	1337c <__assert_fail@plt+0x218c>
   130d8:	ldr	r3, [sp, #48]	; 0x30
   130dc:	ldrb	r6, [r3, r2]
   130e0:	sub	r3, r6, #33	; 0x21
   130e4:	uxtb	r3, r3
   130e8:	cmp	r3, #29
   130ec:	bhi	1374c <__assert_fail@plt+0x255c>
   130f0:	ldr	r0, [pc, #1804]	; 13804 <__assert_fail@plt+0x2614>
   130f4:	mov	r5, #1
   130f8:	ands	r5, r0, r5, lsl r3
   130fc:	beq	13754 <__assert_fail@plt+0x2564>
   13100:	cmp	r7, #0
   13104:	bne	12e88 <__assert_fail@plt+0x1c98>
   13108:	cmp	r9, r4
   1310c:	add	r3, r4, #1
   13110:	str	r2, [sp, #28]
   13114:	mov	r5, #0
   13118:	strbhi	r1, [r8, r4]
   1311c:	cmp	r9, r3
   13120:	mov	fp, r5
   13124:	movhi	r1, #34	; 0x22
   13128:	strbhi	r1, [r8, r3]
   1312c:	add	r3, r4, #2
   13130:	cmp	r9, r3
   13134:	movhi	r1, #34	; 0x22
   13138:	strbhi	r1, [r8, r3]
   1313c:	add	r3, r4, #3
   13140:	add	r4, r4, #4
   13144:	cmp	r9, r3
   13148:	movhi	r1, #63	; 0x3f
   1314c:	strbhi	r1, [r8, r3]
   13150:	ldr	r3, [sp, #24]
   13154:	eor	r3, r3, #1
   13158:	cmp	sl, #2
   1315c:	orreq	r3, r3, #1
   13160:	eor	r3, r3, #1
   13164:	orr	r3, r7, r3
   13168:	tst	r3, #255	; 0xff
   1316c:	beq	13198 <__assert_fail@plt+0x1fa8>
   13170:	ldr	r3, [sp, #152]	; 0x98
   13174:	cmp	r3, #0
   13178:	beq	13198 <__assert_fail@plt+0x1fa8>
   1317c:	ldr	r1, [sp, #152]	; 0x98
   13180:	ubfx	r2, r6, #5, #8
   13184:	and	r3, r6, #31
   13188:	ldr	r2, [r1, r2, lsl #2]
   1318c:	lsr	r3, r2, r3
   13190:	tst	r3, #1
   13194:	bne	131a4 <__assert_fail@plt+0x1fb4>
   13198:	ldr	r3, [sp, #64]	; 0x40
   1319c:	cmp	r3, #0
   131a0:	beq	1339c <__assert_fail@plt+0x21ac>
   131a4:	sub	r3, sl, #2
   131a8:	cmp	r7, #0
   131ac:	clz	r3, r3
   131b0:	lsr	r3, r3, #5
   131b4:	bne	12e88 <__assert_fail@plt+0x1c98>
   131b8:	ldr	r2, [sp, #52]	; 0x34
   131bc:	eor	r2, r2, #1
   131c0:	ands	r3, r3, r2
   131c4:	beq	131fc <__assert_fail@plt+0x200c>
   131c8:	cmp	r9, r4
   131cc:	str	r3, [sp, #52]	; 0x34
   131d0:	movhi	r2, #39	; 0x27
   131d4:	strbhi	r2, [r8, r4]
   131d8:	add	r2, r4, #1
   131dc:	cmp	r9, r2
   131e0:	movhi	r1, #36	; 0x24
   131e4:	strbhi	r1, [r8, r2]
   131e8:	add	r2, r4, #2
   131ec:	add	r4, r4, #3
   131f0:	cmp	r9, r2
   131f4:	movhi	r1, #39	; 0x27
   131f8:	strbhi	r1, [r8, r2]
   131fc:	cmp	r9, r4
   13200:	ldr	fp, [sp, #36]	; 0x24
   13204:	movhi	r3, #92	; 0x5c
   13208:	strbhi	r3, [r8, r4]
   1320c:	add	r4, r4, #1
   13210:	b	1339c <__assert_fail@plt+0x21ac>
   13214:	cmp	r6, #92	; 0x5c
   13218:	beq	13384 <__assert_fail@plt+0x2194>
   1321c:	bls	12fcc <__assert_fail@plt+0x1ddc>
   13220:	ldr	r5, [sp, #36]	; 0x24
   13224:	b	1336c <__assert_fail@plt+0x217c>
   13228:	cmp	r6, #122	; 0x7a
   1322c:	bhi	1324c <__assert_fail@plt+0x205c>
   13230:	cmp	r6, #97	; 0x61
   13234:	bcs	13220 <__assert_fail@plt+0x2030>
   13238:	cmp	r6, #95	; 0x5f
   1323c:	beq	13220 <__assert_fail@plt+0x2030>
   13240:	cmp	r6, #96	; 0x60
   13244:	bne	12f34 <__assert_fail@plt+0x1d44>
   13248:	b	12fcc <__assert_fail@plt+0x1ddc>
   1324c:	cmp	r6, #124	; 0x7c
   13250:	beq	12fcc <__assert_fail@plt+0x1ddc>
   13254:	bcc	13460 <__assert_fail@plt+0x2270>
   13258:	cmp	r6, #125	; 0x7d
   1325c:	beq	13460 <__assert_fail@plt+0x2270>
   13260:	cmp	r6, #126	; 0x7e
   13264:	bne	12f34 <__assert_fail@plt+0x1d44>
   13268:	ldr	r3, [sp, #28]
   1326c:	cmp	r3, #0
   13270:	bne	1337c <__assert_fail@plt+0x218c>
   13274:	ldr	r5, [sp, #36]	; 0x24
   13278:	cmp	sl, #2
   1327c:	movne	fp, #0
   13280:	andeq	fp, r7, #1
   13284:	cmp	fp, #0
   13288:	beq	13150 <__assert_fail@plt+0x1f60>
   1328c:	b	12fb0 <__assert_fail@plt+0x1dc0>
   13290:	ldr	r3, [sp, #24]
   13294:	cmp	r3, #0
   13298:	beq	13360 <__assert_fail@plt+0x2170>
   1329c:	sub	r2, sl, #2
   132a0:	cmp	r7, #0
   132a4:	clz	r2, r2
   132a8:	lsr	r2, r2, #5
   132ac:	bne	12e84 <__assert_fail@plt+0x1c94>
   132b0:	ldr	r3, [sp, #52]	; 0x34
   132b4:	eor	r3, r3, #1
   132b8:	ands	r2, r2, r3
   132bc:	moveq	r3, r4
   132c0:	beq	132f8 <__assert_fail@plt+0x2108>
   132c4:	cmp	r9, r4
   132c8:	str	r2, [sp, #52]	; 0x34
   132cc:	movhi	r3, #39	; 0x27
   132d0:	strbhi	r3, [r8, r4]
   132d4:	add	r3, r4, #1
   132d8:	cmp	r9, r3
   132dc:	movhi	r1, #36	; 0x24
   132e0:	strbhi	r1, [r8, r3]
   132e4:	add	r3, r4, #2
   132e8:	cmp	r9, r3
   132ec:	movhi	r1, #39	; 0x27
   132f0:	strbhi	r1, [r8, r3]
   132f4:	add	r3, r4, #3
   132f8:	cmp	r9, r3
   132fc:	add	r4, r3, #1
   13300:	movhi	r2, #92	; 0x5c
   13304:	strbhi	r2, [r8, r3]
   13308:	cmp	fp, #0
   1330c:	beq	13734 <__assert_fail@plt+0x2544>
   13310:	ldr	r2, [sp, #28]
   13314:	ldr	r1, [sp, #40]	; 0x28
   13318:	add	r2, r2, #1
   1331c:	cmp	r2, r1
   13320:	bcs	13358 <__assert_fail@plt+0x2168>
   13324:	ldr	r1, [sp, #48]	; 0x30
   13328:	mov	r6, #48	; 0x30
   1332c:	ldrb	r2, [r1, r2]
   13330:	sub	r2, r2, #48	; 0x30
   13334:	cmp	r2, #9
   13338:	bhi	13744 <__assert_fail@plt+0x2554>
   1333c:	cmp	r9, r4
   13340:	add	r2, r3, #2
   13344:	strbhi	r6, [r8, r4]
   13348:	cmp	r9, r2
   1334c:	add	r4, r3, #3
   13350:	movhi	r1, #48	; 0x30
   13354:	strbhi	r1, [r8, r2]
   13358:	mov	r5, #0
   1335c:	b	1373c <__assert_fail@plt+0x254c>
   13360:	ldr	r3, [sp, #148]	; 0x94
   13364:	ands	r5, r3, #1
   13368:	bne	133f0 <__assert_fail@plt+0x2200>
   1336c:	mov	fp, #0
   13370:	b	13150 <__assert_fail@plt+0x1f60>
   13374:	cmp	r7, #0
   13378:	bne	12e88 <__assert_fail@plt+0x1c98>
   1337c:	mov	r5, #0
   13380:	b	1336c <__assert_fail@plt+0x217c>
   13384:	cmp	sl, #2
   13388:	bne	133fc <__assert_fail@plt+0x220c>
   1338c:	cmp	r7, #0
   13390:	bne	12e88 <__assert_fail@plt+0x1c98>
   13394:	mov	r5, r7
   13398:	mov	fp, r7
   1339c:	ldr	r3, [sp, #52]	; 0x34
   133a0:	eor	fp, fp, #1
   133a4:	tst	r3, fp
   133a8:	beq	133d4 <__assert_fail@plt+0x21e4>
   133ac:	cmp	r9, r4
   133b0:	movhi	r3, #39	; 0x27
   133b4:	strbhi	r3, [r8, r4]
   133b8:	add	r3, r4, #1
   133bc:	add	r4, r4, #2
   133c0:	cmp	r9, r3
   133c4:	movhi	r2, #39	; 0x27
   133c8:	strbhi	r2, [r8, r3]
   133cc:	mov	r3, #0
   133d0:	str	r3, [sp, #52]	; 0x34
   133d4:	cmp	r9, r4
   133d8:	ldr	r3, [sp, #72]	; 0x48
   133dc:	strbhi	r6, [r8, r4]
   133e0:	cmp	r5, #0
   133e4:	add	r4, r4, #1
   133e8:	moveq	r3, #0
   133ec:	str	r3, [sp, #72]	; 0x48
   133f0:	ldr	r3, [sp, #28]
   133f4:	add	r3, r3, #1
   133f8:	b	12bb0 <__assert_fail@plt+0x19c0>
   133fc:	ldr	r3, [sp, #24]
   13400:	and	r3, r3, r7
   13404:	tst	r5, r3
   13408:	moveq	r3, r6
   1340c:	beq	12f9c <__assert_fail@plt+0x1dac>
   13410:	mov	fp, #0
   13414:	mov	r5, fp
   13418:	b	1339c <__assert_fail@plt+0x21ac>
   1341c:	mov	r3, #116	; 0x74
   13420:	b	12f9c <__assert_fail@plt+0x1dac>
   13424:	mov	r3, #110	; 0x6e
   13428:	b	12f9c <__assert_fail@plt+0x1dac>
   1342c:	mov	r3, #97	; 0x61
   13430:	ldr	r2, [sp, #24]
   13434:	cmp	r2, #0
   13438:	beq	1337c <__assert_fail@plt+0x218c>
   1343c:	mov	r6, r3
   13440:	mov	r5, #0
   13444:	b	131a4 <__assert_fail@plt+0x1fb4>
   13448:	mov	r3, #98	; 0x62
   1344c:	b	13430 <__assert_fail@plt+0x2240>
   13450:	mov	r3, #118	; 0x76
   13454:	b	13430 <__assert_fail@plt+0x2240>
   13458:	mov	r3, #102	; 0x66
   1345c:	b	13430 <__assert_fail@plt+0x2240>
   13460:	ldr	r3, [sp, #40]	; 0x28
   13464:	cmn	r3, #1
   13468:	bne	13488 <__assert_fail@plt+0x2298>
   1346c:	ldr	r3, [sp, #48]	; 0x30
   13470:	ldrb	r3, [r3, #1]
   13474:	adds	r3, r3, #0
   13478:	movne	r3, #1
   1347c:	cmp	r3, #0
   13480:	bne	1337c <__assert_fail@plt+0x218c>
   13484:	b	13268 <__assert_fail@plt+0x2078>
   13488:	ldr	r3, [sp, #40]	; 0x28
   1348c:	subs	r3, r3, #1
   13490:	b	13478 <__assert_fail@plt+0x2288>
   13494:	mov	r3, #0
   13498:	mov	r2, #0
   1349c:	strd	r2, [sp, #96]	; 0x60
   134a0:	ldr	r3, [sp, #40]	; 0x28
   134a4:	cmn	r3, #1
   134a8:	bne	134b8 <__assert_fail@plt+0x22c8>
   134ac:	ldr	r0, [sp, #48]	; 0x30
   134b0:	bl	110d0 <strlen@plt>
   134b4:	str	r0, [sp, #40]	; 0x28
   134b8:	ldr	r5, [sp, #36]	; 0x24
   134bc:	mov	r3, #0
   134c0:	str	r3, [sp, #56]	; 0x38
   134c4:	ldr	r3, [sp, #28]
   134c8:	add	r0, sp, #92	; 0x5c
   134cc:	ldr	r1, [sp, #40]	; 0x28
   134d0:	ldr	r2, [sp, #56]	; 0x38
   134d4:	add	r2, r3, r2
   134d8:	ldr	r3, [sp, #48]	; 0x30
   134dc:	add	fp, r3, r2
   134e0:	sub	r2, r1, r2
   134e4:	add	r3, sp, #96	; 0x60
   134e8:	mov	r1, fp
   134ec:	bl	14c00 <__assert_fail@plt+0x3a10>
   134f0:	subs	r2, r0, #0
   134f4:	beq	13534 <__assert_fail@plt+0x2344>
   134f8:	cmn	r2, #1
   134fc:	beq	13708 <__assert_fail@plt+0x2518>
   13500:	cmn	r2, #2
   13504:	bne	13678 <__assert_fail@plt+0x2488>
   13508:	ldr	r3, [sp, #28]
   1350c:	ldr	r2, [sp, #56]	; 0x38
   13510:	add	r3, r3, r2
   13514:	ldr	r2, [sp, #40]	; 0x28
   13518:	cmp	r2, r3
   1351c:	bls	13708 <__assert_fail@plt+0x2518>
   13520:	ldr	r2, [sp, #56]	; 0x38
   13524:	ldr	r3, [sp, #80]	; 0x50
   13528:	ldrb	r5, [r3, r2]
   1352c:	cmp	r5, #0
   13530:	bne	13668 <__assert_fail@plt+0x2478>
   13534:	ldr	r3, [sp, #56]	; 0x38
   13538:	cmp	r3, #1
   1353c:	bls	12f60 <__assert_fail@plt+0x1d70>
   13540:	ldr	r3, [sp, #28]
   13544:	mov	fp, #0
   13548:	mov	ip, #92	; 0x5c
   1354c:	ldr	r2, [sp, #56]	; 0x38
   13550:	add	r3, r3, r2
   13554:	ldr	r2, [sp, #24]
   13558:	str	r3, [sp, #36]	; 0x24
   1355c:	eor	r3, r5, #1
   13560:	and	r3, r3, r2
   13564:	mov	r2, #39	; 0x27
   13568:	uxtb	r3, r3
   1356c:	cmp	r3, #0
   13570:	beq	13710 <__assert_fail@plt+0x2520>
   13574:	sub	r0, sl, #2
   13578:	cmp	r7, #0
   1357c:	clz	r0, r0
   13580:	lsr	r0, r0, #5
   13584:	bne	12e84 <__assert_fail@plt+0x1c94>
   13588:	ldr	r1, [sp, #52]	; 0x34
   1358c:	eor	r1, r1, #1
   13590:	ands	r1, r0, r1
   13594:	beq	135c4 <__assert_fail@plt+0x23d4>
   13598:	cmp	r9, r4
   1359c:	add	r0, r4, #1
   135a0:	str	r1, [sp, #52]	; 0x34
   135a4:	strbhi	r2, [r8, r4]
   135a8:	cmp	r9, r0
   135ac:	movhi	lr, #36	; 0x24
   135b0:	strbhi	lr, [r8, r0]
   135b4:	add	r0, r4, #2
   135b8:	add	r4, r4, #3
   135bc:	cmp	r9, r0
   135c0:	strbhi	r2, [r8, r0]
   135c4:	cmp	r9, r4
   135c8:	add	r0, r4, #1
   135cc:	mov	fp, r3
   135d0:	strbhi	ip, [r8, r4]
   135d4:	cmp	r9, r0
   135d8:	lsrhi	r1, r6, #6
   135dc:	addhi	r1, r1, #48	; 0x30
   135e0:	strbhi	r1, [r8, r0]
   135e4:	add	r0, r4, #2
   135e8:	add	r4, r4, #3
   135ec:	cmp	r9, r0
   135f0:	ubfxhi	r1, r6, #3, #3
   135f4:	and	r6, r6, #7
   135f8:	add	r6, r6, #48	; 0x30
   135fc:	addhi	r1, r1, #48	; 0x30
   13600:	strbhi	r1, [r8, r0]
   13604:	eor	r0, fp, #1
   13608:	ldr	r1, [sp, #28]
   1360c:	ldr	lr, [sp, #52]	; 0x34
   13610:	add	r1, r1, #1
   13614:	and	r0, r0, lr
   13618:	ldr	lr, [sp, #36]	; 0x24
   1361c:	cmp	r1, lr
   13620:	bcs	1339c <__assert_fail@plt+0x21ac>
   13624:	cmp	r0, #0
   13628:	beq	1364c <__assert_fail@plt+0x245c>
   1362c:	cmp	r9, r4
   13630:	add	r0, r4, #1
   13634:	strbhi	r2, [r8, r4]
   13638:	cmp	r9, r0
   1363c:	add	r4, r4, #2
   13640:	strbhi	r2, [r8, r0]
   13644:	mov	r0, #0
   13648:	str	r0, [sp, #52]	; 0x34
   1364c:	ldr	r0, [sp, #48]	; 0x30
   13650:	cmp	r9, r4
   13654:	str	r1, [sp, #28]
   13658:	strbhi	r6, [r8, r4]
   1365c:	add	r4, r4, #1
   13660:	ldrb	r6, [r0, r1]
   13664:	b	1356c <__assert_fail@plt+0x237c>
   13668:	ldr	r3, [sp, #56]	; 0x38
   1366c:	add	r3, r3, #1
   13670:	str	r3, [sp, #56]	; 0x38
   13674:	b	13508 <__assert_fail@plt+0x2318>
   13678:	cmp	sl, #2
   1367c:	movne	r3, #0
   13680:	andeq	r3, r7, #1
   13684:	cmp	r3, #0
   13688:	movne	r1, #1
   1368c:	bne	136e8 <__assert_fail@plt+0x24f8>
   13690:	ldr	r0, [sp, #92]	; 0x5c
   13694:	str	r2, [sp, #84]	; 0x54
   13698:	bl	10fd4 <iswprint@plt>
   1369c:	ldr	r3, [sp, #56]	; 0x38
   136a0:	cmp	r0, #0
   136a4:	add	r0, sp, #96	; 0x60
   136a8:	moveq	r5, #0
   136ac:	ldr	r2, [sp, #84]	; 0x54
   136b0:	add	r3, r3, r2
   136b4:	str	r3, [sp, #56]	; 0x38
   136b8:	bl	10f5c <mbsinit@plt>
   136bc:	cmp	r0, #0
   136c0:	beq	134c4 <__assert_fail@plt+0x22d4>
   136c4:	b	13534 <__assert_fail@plt+0x2344>
   136c8:	ldrb	r3, [fp, #1]!
   136cc:	cmp	r3, #94	; 0x5e
   136d0:	beq	12fb0 <__assert_fail@plt+0x1dc0>
   136d4:	bhi	136f4 <__assert_fail@plt+0x2504>
   136d8:	sub	r3, r3, #91	; 0x5b
   136dc:	cmp	r3, #1
   136e0:	bls	12fb0 <__assert_fail@plt+0x1dc0>
   136e4:	add	r1, r1, #1
   136e8:	cmp	r1, r2
   136ec:	bne	136c8 <__assert_fail@plt+0x24d8>
   136f0:	b	13690 <__assert_fail@plt+0x24a0>
   136f4:	cmp	r3, #96	; 0x60
   136f8:	beq	12fb0 <__assert_fail@plt+0x1dc0>
   136fc:	cmp	r3, #124	; 0x7c
   13700:	bne	136e4 <__assert_fail@plt+0x24f4>
   13704:	b	12fb0 <__assert_fail@plt+0x1dc0>
   13708:	mov	r5, #0
   1370c:	b	13534 <__assert_fail@plt+0x2344>
   13710:	ldr	r1, [sp, #64]	; 0x40
   13714:	cmp	r1, #0
   13718:	beq	13604 <__assert_fail@plt+0x2414>
   1371c:	cmp	r9, r4
   13720:	mov	r1, #0
   13724:	strbhi	ip, [r8, r4]
   13728:	add	r4, r4, #1
   1372c:	str	r1, [sp, #64]	; 0x40
   13730:	b	13604 <__assert_fail@plt+0x2414>
   13734:	mov	r5, fp
   13738:	ldr	fp, [sp, #24]
   1373c:	mov	r6, #48	; 0x30
   13740:	b	13150 <__assert_fail@plt+0x1f60>
   13744:	mov	r5, #0
   13748:	b	13150 <__assert_fail@plt+0x1f60>
   1374c:	mov	r6, r1
   13750:	b	1337c <__assert_fail@plt+0x218c>
   13754:	mov	r6, r1
   13758:	b	1336c <__assert_fail@plt+0x217c>
   1375c:	ldr	r2, [sp, #28]
   13760:	ldr	r3, [sp, #40]	; 0x28
   13764:	subs	r3, r3, r2
   13768:	movne	r3, #1
   1376c:	b	12bd4 <__assert_fail@plt+0x19e4>
   13770:	ldr	r3, [sp, #60]	; 0x3c
   13774:	mov	sl, #2
   13778:	ldr	r7, [sp, #72]	; 0x48
   1377c:	adds	r6, r3, #0
   13780:	mov	r5, r3
   13784:	movne	r6, #1
   13788:	cmp	r9, #0
   1378c:	movne	r6, #0
   13790:	cmp	r6, #0
   13794:	bne	12b64 <__assert_fail@plt+0x1974>
   13798:	ldr	r3, [sp, #68]	; 0x44
   1379c:	ldr	r2, [sp, #44]	; 0x2c
   137a0:	cmp	r2, #0
   137a4:	moveq	r3, #0
   137a8:	andne	r3, r3, #1
   137ac:	cmp	r3, #0
   137b0:	movne	r3, r2
   137b4:	subne	r3, r3, #1
   137b8:	bne	137e8 <__assert_fail@plt+0x25f8>
   137bc:	cmp	r9, r4
   137c0:	movhi	r3, #0
   137c4:	strbhi	r3, [r8, r4]
   137c8:	mov	r0, r4
   137cc:	add	sp, sp, #108	; 0x6c
   137d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137d4:	mov	r3, r7
   137d8:	b	1379c <__assert_fail@plt+0x25ac>
   137dc:	cmp	r9, r4
   137e0:	strbhi	r2, [r8, r4]
   137e4:	add	r4, r4, #1
   137e8:	ldrb	r2, [r3, #1]!
   137ec:	cmp	r2, #0
   137f0:	bne	137dc <__assert_fail@plt+0x25ec>
   137f4:	b	137bc <__assert_fail@plt+0x25cc>
   137f8:	muleq	r1, r8, r9
   137fc:	andeq	r5, r1, fp, lsr #19
   13800:	andeq	r5, r1, r9, lsr #19
   13804:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1380c:	sub	sp, sp, #52	; 0x34
   13810:	mov	r6, r0
   13814:	mov	r5, r3
   13818:	mov	r8, r1
   1381c:	mov	r9, r2
   13820:	bl	110e8 <__errno_location@plt>
   13824:	ldr	r3, [r0]
   13828:	cmn	r6, #-2147483647	; 0x80000001
   1382c:	str	r0, [sp, #24]
   13830:	ldr	r7, [pc, #368]	; 139a8 <__assert_fail@plt+0x27b8>
   13834:	str	r3, [sp, #32]
   13838:	movne	r3, #0
   1383c:	moveq	r3, #1
   13840:	orrs	r3, r3, r6, lsr #31
   13844:	ldr	r4, [r7]
   13848:	beq	13850 <__assert_fail@plt+0x2660>
   1384c:	bl	111d8 <abort@plt>
   13850:	ldr	r2, [r7, #4]
   13854:	cmp	r2, r6
   13858:	bgt	138c8 <__assert_fail@plt+0x26d8>
   1385c:	add	sl, r7, #8
   13860:	mov	r3, #8
   13864:	cmp	r4, sl
   13868:	add	r1, sp, #44	; 0x2c
   1386c:	str	r2, [sp, #44]	; 0x2c
   13870:	sub	r2, r6, r2
   13874:	movne	r0, r4
   13878:	moveq	r0, #0
   1387c:	add	r2, r2, #1
   13880:	str	r3, [sp]
   13884:	mvn	r3, #-2147483648	; 0x80000000
   13888:	bl	14720 <__assert_fail@plt+0x3530>
   1388c:	cmp	r4, sl
   13890:	mov	fp, r0
   13894:	str	r0, [r7]
   13898:	ldmeq	r4, {r0, r1}
   1389c:	mov	r4, fp
   138a0:	ldr	r2, [sp, #44]	; 0x2c
   138a4:	stmeq	fp, {r0, r1}
   138a8:	mov	r1, #0
   138ac:	ldr	r0, [r7, #4]
   138b0:	sub	r2, r2, r0
   138b4:	add	r0, fp, r0, lsl #3
   138b8:	lsl	r2, r2, #3
   138bc:	bl	1110c <memset@plt>
   138c0:	ldr	r3, [sp, #44]	; 0x2c
   138c4:	str	r3, [r7, #4]
   138c8:	ldr	r3, [r5, #4]
   138cc:	add	sl, r4, r6, lsl #3
   138d0:	mov	r2, r8
   138d4:	ldr	fp, [r4, r6, lsl #3]
   138d8:	ldr	r7, [sl, #4]
   138dc:	orr	r3, r3, #1
   138e0:	str	r3, [sp, #28]
   138e4:	add	r3, r5, #8
   138e8:	mov	r1, fp
   138ec:	str	r3, [sp, #36]	; 0x24
   138f0:	mov	r0, r7
   138f4:	ldr	r3, [r5, #44]	; 0x2c
   138f8:	str	r3, [sp, #16]
   138fc:	ldr	r3, [r5, #40]	; 0x28
   13900:	str	r3, [sp, #12]
   13904:	add	r3, r5, #8
   13908:	str	r3, [sp, #8]
   1390c:	ldr	r3, [sp, #28]
   13910:	str	r3, [sp, #4]
   13914:	ldr	r3, [r5]
   13918:	str	r3, [sp]
   1391c:	mov	r3, r9
   13920:	bl	12b18 <__assert_fail@plt+0x1928>
   13924:	cmp	fp, r0
   13928:	bhi	13990 <__assert_fail@plt+0x27a0>
   1392c:	ldr	r3, [pc, #120]	; 139ac <__assert_fail@plt+0x27bc>
   13930:	add	fp, r0, #1
   13934:	str	fp, [r4, r6, lsl #3]
   13938:	cmp	r7, r3
   1393c:	beq	13948 <__assert_fail@plt+0x2758>
   13940:	mov	r0, r7
   13944:	bl	1279c <__assert_fail@plt+0x15ac>
   13948:	mov	r0, fp
   1394c:	bl	14610 <__assert_fail@plt+0x3420>
   13950:	ldr	r3, [r5, #44]	; 0x2c
   13954:	mov	r2, r8
   13958:	mov	r1, fp
   1395c:	str	r0, [sl, #4]
   13960:	mov	r7, r0
   13964:	str	r3, [sp, #16]
   13968:	ldr	r3, [r5, #40]	; 0x28
   1396c:	str	r3, [sp, #12]
   13970:	add	r3, r5, #8
   13974:	str	r3, [sp, #8]
   13978:	ldr	r3, [sp, #28]
   1397c:	str	r3, [sp, #4]
   13980:	ldr	r3, [r5]
   13984:	str	r3, [sp]
   13988:	mov	r3, r9
   1398c:	bl	12b18 <__assert_fail@plt+0x1928>
   13990:	ldr	r3, [sp, #24]
   13994:	mov	r0, r7
   13998:	ldr	r2, [sp, #32]
   1399c:	str	r2, [r3]
   139a0:	add	sp, sp, #52	; 0x34
   139a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139a8:	andeq	r6, r2, r0, lsr r1
   139ac:	andeq	r6, r2, r8, lsl r2
   139b0:	push	{r4, r5, r6, lr}
   139b4:	mov	r5, r0
   139b8:	bl	110e8 <__errno_location@plt>
   139bc:	mov	r4, r0
   139c0:	cmp	r5, #0
   139c4:	ldr	r0, [pc, #20]	; 139e0 <__assert_fail@plt+0x27f0>
   139c8:	mov	r1, #48	; 0x30
   139cc:	movne	r0, r5
   139d0:	ldr	r6, [r4]
   139d4:	bl	14810 <__assert_fail@plt+0x3620>
   139d8:	str	r6, [r4]
   139dc:	pop	{r4, r5, r6, pc}
   139e0:	andeq	r6, r2, r8, lsl r3
   139e4:	ldr	r3, [pc, #12]	; 139f8 <__assert_fail@plt+0x2808>
   139e8:	cmp	r0, #0
   139ec:	moveq	r0, r3
   139f0:	ldr	r0, [r0]
   139f4:	bx	lr
   139f8:	andeq	r6, r2, r8, lsl r3
   139fc:	ldr	r3, [pc, #12]	; 13a10 <__assert_fail@plt+0x2820>
   13a00:	cmp	r0, #0
   13a04:	moveq	r0, r3
   13a08:	str	r1, [r0]
   13a0c:	bx	lr
   13a10:	andeq	r6, r2, r8, lsl r3
   13a14:	ldr	r3, [pc, #52]	; 13a50 <__assert_fail@plt+0x2860>
   13a18:	cmp	r0, #0
   13a1c:	push	{lr}		; (str lr, [sp, #-4]!)
   13a20:	lsr	lr, r1, #5
   13a24:	and	r1, r1, #31
   13a28:	moveq	r0, r3
   13a2c:	add	r3, r0, #8
   13a30:	ldr	ip, [r3, lr, lsl #2]
   13a34:	lsr	r0, ip, r1
   13a38:	eor	r2, r2, r0
   13a3c:	and	r0, r0, #1
   13a40:	and	r2, r2, #1
   13a44:	eor	r1, ip, r2, lsl r1
   13a48:	str	r1, [r3, lr, lsl #2]
   13a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a50:	andeq	r6, r2, r8, lsl r3
   13a54:	ldr	r3, [pc, #16]	; 13a6c <__assert_fail@plt+0x287c>
   13a58:	cmp	r0, #0
   13a5c:	movne	r3, r0
   13a60:	ldr	r0, [r3, #4]
   13a64:	str	r1, [r3, #4]
   13a68:	bx	lr
   13a6c:	andeq	r6, r2, r8, lsl r3
   13a70:	ldr	r3, [pc, #44]	; 13aa4 <__assert_fail@plt+0x28b4>
   13a74:	cmp	r0, #0
   13a78:	moveq	r0, r3
   13a7c:	mov	r3, #10
   13a80:	cmp	r2, #0
   13a84:	cmpne	r1, #0
   13a88:	str	r3, [r0]
   13a8c:	bne	13a98 <__assert_fail@plt+0x28a8>
   13a90:	push	{r4, lr}
   13a94:	bl	111d8 <abort@plt>
   13a98:	str	r1, [r0, #40]	; 0x28
   13a9c:	str	r2, [r0, #44]	; 0x2c
   13aa0:	bx	lr
   13aa4:	andeq	r6, r2, r8, lsl r3
   13aa8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13aac:	sub	sp, sp, #24
   13ab0:	mov	sl, r3
   13ab4:	mov	r7, r0
   13ab8:	mov	r8, r1
   13abc:	mov	r9, r2
   13ac0:	ldr	r4, [sp, #56]	; 0x38
   13ac4:	ldr	r3, [pc, #88]	; 13b24 <__assert_fail@plt+0x2934>
   13ac8:	cmp	r4, #0
   13acc:	moveq	r4, r3
   13ad0:	bl	110e8 <__errno_location@plt>
   13ad4:	ldr	r3, [r4, #44]	; 0x2c
   13ad8:	mov	r5, r0
   13adc:	mov	r2, r9
   13ae0:	mov	r1, r8
   13ae4:	mov	r0, r7
   13ae8:	ldr	r6, [r5]
   13aec:	str	r3, [sp, #16]
   13af0:	ldr	r3, [r4, #40]	; 0x28
   13af4:	str	r3, [sp, #12]
   13af8:	add	r3, r4, #8
   13afc:	str	r3, [sp, #8]
   13b00:	ldr	r3, [r4, #4]
   13b04:	str	r3, [sp, #4]
   13b08:	ldr	r3, [r4]
   13b0c:	str	r3, [sp]
   13b10:	mov	r3, sl
   13b14:	bl	12b18 <__assert_fail@plt+0x1928>
   13b18:	str	r6, [r5]
   13b1c:	add	sp, sp, #24
   13b20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b24:	andeq	r6, r2, r8, lsl r3
   13b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b2c:	cmp	r3, #0
   13b30:	sub	sp, sp, #44	; 0x2c
   13b34:	mov	r6, r2
   13b38:	mov	sl, r1
   13b3c:	mov	r9, r0
   13b40:	ldr	r4, [pc, #176]	; 13bf8 <__assert_fail@plt+0x2a08>
   13b44:	movne	r4, r3
   13b48:	bl	110e8 <__errno_location@plt>
   13b4c:	ldr	r3, [r0]
   13b50:	mov	r1, #0
   13b54:	mov	r2, r9
   13b58:	mov	r8, r0
   13b5c:	mov	r0, r1
   13b60:	ldr	r5, [r4, #4]
   13b64:	add	fp, r4, #8
   13b68:	str	r3, [sp, #28]
   13b6c:	ldr	r3, [r4, #44]	; 0x2c
   13b70:	cmp	r6, #0
   13b74:	orreq	r5, r5, #1
   13b78:	str	r3, [sp, #16]
   13b7c:	ldr	r3, [r4, #40]	; 0x28
   13b80:	stmib	sp, {r5, fp}
   13b84:	str	r3, [sp, #12]
   13b88:	ldr	r3, [r4]
   13b8c:	str	r3, [sp]
   13b90:	mov	r3, sl
   13b94:	bl	12b18 <__assert_fail@plt+0x1928>
   13b98:	add	r1, r0, #1
   13b9c:	mov	r7, r0
   13ba0:	mov	r0, r1
   13ba4:	str	r1, [sp, #36]	; 0x24
   13ba8:	bl	14610 <__assert_fail@plt+0x3420>
   13bac:	ldr	r3, [r4, #44]	; 0x2c
   13bb0:	mov	r2, r9
   13bb4:	ldr	r1, [sp, #36]	; 0x24
   13bb8:	str	r3, [sp, #16]
   13bbc:	ldr	r3, [r4, #40]	; 0x28
   13bc0:	stmib	sp, {r5, fp}
   13bc4:	str	r0, [sp, #32]
   13bc8:	str	r3, [sp, #12]
   13bcc:	ldr	r3, [r4]
   13bd0:	str	r3, [sp]
   13bd4:	mov	r3, sl
   13bd8:	bl	12b18 <__assert_fail@plt+0x1928>
   13bdc:	ldr	r3, [sp, #28]
   13be0:	cmp	r6, #0
   13be4:	ldr	r0, [sp, #32]
   13be8:	str	r3, [r8]
   13bec:	strne	r7, [r6]
   13bf0:	add	sp, sp, #44	; 0x2c
   13bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bf8:	andeq	r6, r2, r8, lsl r3
   13bfc:	mov	r3, r2
   13c00:	mov	r2, #0
   13c04:	b	13b28 <__assert_fail@plt+0x2938>
   13c08:	push	{r4, r5, r6, r7, r8, lr}
   13c0c:	mov	r6, #1
   13c10:	ldr	r4, [pc, #100]	; 13c7c <__assert_fail@plt+0x2a8c>
   13c14:	ldr	r5, [r4]
   13c18:	add	r7, r5, #4
   13c1c:	ldr	r3, [r4, #4]
   13c20:	cmp	r3, r6
   13c24:	bgt	13c6c <__assert_fail@plt+0x2a7c>
   13c28:	ldr	r6, [pc, #80]	; 13c80 <__assert_fail@plt+0x2a90>
   13c2c:	ldr	r0, [r5, #4]
   13c30:	cmp	r0, r6
   13c34:	beq	13c48 <__assert_fail@plt+0x2a58>
   13c38:	bl	1279c <__assert_fail@plt+0x15ac>
   13c3c:	mov	r3, #256	; 0x100
   13c40:	str	r3, [r4, #8]
   13c44:	str	r6, [r4, #12]
   13c48:	ldr	r6, [pc, #52]	; 13c84 <__assert_fail@plt+0x2a94>
   13c4c:	cmp	r5, r6
   13c50:	beq	13c60 <__assert_fail@plt+0x2a70>
   13c54:	mov	r0, r5
   13c58:	bl	1279c <__assert_fail@plt+0x15ac>
   13c5c:	str	r6, [r4]
   13c60:	mov	r3, #1
   13c64:	str	r3, [r4, #4]
   13c68:	pop	{r4, r5, r6, r7, r8, pc}
   13c6c:	ldr	r0, [r7, r6, lsl #3]
   13c70:	add	r6, r6, #1
   13c74:	bl	1279c <__assert_fail@plt+0x15ac>
   13c78:	b	13c1c <__assert_fail@plt+0x2a2c>
   13c7c:	andeq	r6, r2, r0, lsr r1
   13c80:	andeq	r6, r2, r8, lsl r2
   13c84:	andeq	r6, r2, r8, lsr r1
   13c88:	ldr	r3, [pc, #4]	; 13c94 <__assert_fail@plt+0x2aa4>
   13c8c:	mvn	r2, #0
   13c90:	b	13808 <__assert_fail@plt+0x2618>
   13c94:	andeq	r6, r2, r8, lsl r3
   13c98:	ldr	r3, [pc]	; 13ca0 <__assert_fail@plt+0x2ab0>
   13c9c:	b	13808 <__assert_fail@plt+0x2618>
   13ca0:	andeq	r6, r2, r8, lsl r3
   13ca4:	mov	r1, r0
   13ca8:	mov	r0, #0
   13cac:	b	13c88 <__assert_fail@plt+0x2a98>
   13cb0:	mov	r2, r1
   13cb4:	mov	r1, r0
   13cb8:	mov	r0, #0
   13cbc:	b	13c98 <__assert_fail@plt+0x2aa8>
   13cc0:	push	{r4, r5, lr}
   13cc4:	sub	sp, sp, #52	; 0x34
   13cc8:	mov	r5, r2
   13ccc:	mov	r4, r0
   13cd0:	mov	r0, sp
   13cd4:	bl	129bc <__assert_fail@plt+0x17cc>
   13cd8:	mov	r3, sp
   13cdc:	mvn	r2, #0
   13ce0:	mov	r1, r5
   13ce4:	mov	r0, r4
   13ce8:	bl	13808 <__assert_fail@plt+0x2618>
   13cec:	add	sp, sp, #52	; 0x34
   13cf0:	pop	{r4, r5, pc}
   13cf4:	push	{r4, r5, r6, lr}
   13cf8:	sub	sp, sp, #48	; 0x30
   13cfc:	mov	r5, r2
   13d00:	mov	r6, r3
   13d04:	mov	r4, r0
   13d08:	mov	r0, sp
   13d0c:	bl	129bc <__assert_fail@plt+0x17cc>
   13d10:	mov	r3, sp
   13d14:	mov	r2, r6
   13d18:	mov	r1, r5
   13d1c:	mov	r0, r4
   13d20:	bl	13808 <__assert_fail@plt+0x2618>
   13d24:	add	sp, sp, #48	; 0x30
   13d28:	pop	{r4, r5, r6, pc}
   13d2c:	mov	r2, r1
   13d30:	mov	r1, r0
   13d34:	mov	r0, #0
   13d38:	b	13cc0 <__assert_fail@plt+0x2ad0>
   13d3c:	mov	r3, r2
   13d40:	mov	r2, r1
   13d44:	mov	r1, r0
   13d48:	mov	r0, #0
   13d4c:	b	13cf4 <__assert_fail@plt+0x2b04>
   13d50:	push	{r4, r5, r6, lr}
   13d54:	mov	r4, r0
   13d58:	mov	r5, r1
   13d5c:	mov	r6, r2
   13d60:	sub	sp, sp, #48	; 0x30
   13d64:	mov	ip, sp
   13d68:	ldr	lr, [pc, #64]	; 13db0 <__assert_fail@plt+0x2bc0>
   13d6c:	ldm	lr!, {r0, r1, r2, r3}
   13d70:	stmia	ip!, {r0, r1, r2, r3}
   13d74:	ldm	lr!, {r0, r1, r2, r3}
   13d78:	stmia	ip!, {r0, r1, r2, r3}
   13d7c:	ldm	lr, {r0, r1, r2, r3}
   13d80:	stm	ip, {r0, r1, r2, r3}
   13d84:	mov	r1, r6
   13d88:	mov	r2, #1
   13d8c:	mov	r0, sp
   13d90:	bl	13a14 <__assert_fail@plt+0x2824>
   13d94:	mov	r3, sp
   13d98:	mov	r2, r5
   13d9c:	mov	r1, r4
   13da0:	mov	r0, #0
   13da4:	bl	13808 <__assert_fail@plt+0x2618>
   13da8:	add	sp, sp, #48	; 0x30
   13dac:	pop	{r4, r5, r6, pc}
   13db0:	andeq	r6, r2, r8, lsl r3
   13db4:	mov	r2, r1
   13db8:	mvn	r1, #0
   13dbc:	b	13d50 <__assert_fail@plt+0x2b60>
   13dc0:	mov	r1, #58	; 0x3a
   13dc4:	b	13db4 <__assert_fail@plt+0x2bc4>
   13dc8:	mov	r2, #58	; 0x3a
   13dcc:	b	13d50 <__assert_fail@plt+0x2b60>
   13dd0:	push	{r4, r5, lr}
   13dd4:	sub	sp, sp, #100	; 0x64
   13dd8:	mov	r4, r0
   13ddc:	mov	r0, sp
   13de0:	mov	r5, r2
   13de4:	bl	129bc <__assert_fail@plt+0x17cc>
   13de8:	mov	ip, sp
   13dec:	add	lr, sp, #48	; 0x30
   13df0:	ldm	ip!, {r0, r1, r2, r3}
   13df4:	stmia	lr!, {r0, r1, r2, r3}
   13df8:	ldm	ip!, {r0, r1, r2, r3}
   13dfc:	stmia	lr!, {r0, r1, r2, r3}
   13e00:	ldm	ip, {r0, r1, r2, r3}
   13e04:	stm	lr, {r0, r1, r2, r3}
   13e08:	mov	r2, #1
   13e0c:	mov	r1, #58	; 0x3a
   13e10:	add	r0, sp, #48	; 0x30
   13e14:	bl	13a14 <__assert_fail@plt+0x2824>
   13e18:	add	r3, sp, #48	; 0x30
   13e1c:	mvn	r2, #0
   13e20:	mov	r1, r5
   13e24:	mov	r0, r4
   13e28:	bl	13808 <__assert_fail@plt+0x2618>
   13e2c:	add	sp, sp, #100	; 0x64
   13e30:	pop	{r4, r5, pc}
   13e34:	push	{r4, r5, r6, r7, lr}
   13e38:	mov	r4, r0
   13e3c:	mov	r6, r1
   13e40:	mov	r7, r2
   13e44:	mov	r5, r3
   13e48:	sub	sp, sp, #52	; 0x34
   13e4c:	ldr	lr, [pc, #68]	; 13e98 <__assert_fail@plt+0x2ca8>
   13e50:	mov	ip, sp
   13e54:	ldm	lr!, {r0, r1, r2, r3}
   13e58:	stmia	ip!, {r0, r1, r2, r3}
   13e5c:	ldm	lr!, {r0, r1, r2, r3}
   13e60:	stmia	ip!, {r0, r1, r2, r3}
   13e64:	ldm	lr, {r0, r1, r2, r3}
   13e68:	stm	ip, {r0, r1, r2, r3}
   13e6c:	mov	r2, r7
   13e70:	mov	r1, r6
   13e74:	mov	r0, sp
   13e78:	bl	13a70 <__assert_fail@plt+0x2880>
   13e7c:	ldr	r2, [sp, #72]	; 0x48
   13e80:	mov	r3, sp
   13e84:	mov	r1, r5
   13e88:	mov	r0, r4
   13e8c:	bl	13808 <__assert_fail@plt+0x2618>
   13e90:	add	sp, sp, #52	; 0x34
   13e94:	pop	{r4, r5, r6, r7, pc}
   13e98:	andeq	r6, r2, r8, lsl r3
   13e9c:	mvn	ip, #0
   13ea0:	push	{r0, r1, r2, lr}
   13ea4:	str	ip, [sp]
   13ea8:	bl	13e34 <__assert_fail@plt+0x2c44>
   13eac:	add	sp, sp, #12
   13eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   13eb4:	mov	r3, r2
   13eb8:	mov	r2, r1
   13ebc:	mov	r1, r0
   13ec0:	mov	r0, #0
   13ec4:	b	13e9c <__assert_fail@plt+0x2cac>
   13ec8:	push	{r0, r1, r2, lr}
   13ecc:	str	r3, [sp]
   13ed0:	mov	r3, r2
   13ed4:	mov	r2, r1
   13ed8:	mov	r1, r0
   13edc:	mov	r0, #0
   13ee0:	bl	13e34 <__assert_fail@plt+0x2c44>
   13ee4:	add	sp, sp, #12
   13ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   13eec:	ldr	r3, [pc]	; 13ef4 <__assert_fail@plt+0x2d04>
   13ef0:	b	13808 <__assert_fail@plt+0x2618>
   13ef4:	andeq	r6, r2, r0, asr #2
   13ef8:	mov	r2, r1
   13efc:	mov	r1, r0
   13f00:	mov	r0, #0
   13f04:	b	13eec <__assert_fail@plt+0x2cfc>
   13f08:	mvn	r2, #0
   13f0c:	b	13eec <__assert_fail@plt+0x2cfc>
   13f10:	mov	r1, r0
   13f14:	mov	r0, #0
   13f18:	b	13f08 <__assert_fail@plt+0x2d18>
   13f1c:	push	{r4, r5, r6, lr}
   13f20:	mov	r5, r0
   13f24:	mov	r0, #33	; 0x21
   13f28:	bl	145e8 <__assert_fail@plt+0x33f8>
   13f2c:	mov	r4, r0
   13f30:	add	r1, r5, #44	; 0x2c
   13f34:	mov	r2, #32
   13f38:	mov	r5, #0
   13f3c:	bl	11118 <strncpy@plt>
   13f40:	mov	r0, r4
   13f44:	strb	r5, [r4, #32]
   13f48:	bl	110d0 <strlen@plt>
   13f4c:	add	r0, r4, r0
   13f50:	cmp	r0, r4
   13f54:	bls	13f64 <__assert_fail@plt+0x2d74>
   13f58:	ldrb	r3, [r0, #-1]
   13f5c:	cmp	r3, #32
   13f60:	beq	13f6c <__assert_fail@plt+0x2d7c>
   13f64:	mov	r0, r4
   13f68:	pop	{r4, r5, r6, pc}
   13f6c:	strb	r5, [r0, #-1]!
   13f70:	b	13f50 <__assert_fail@plt+0x2d60>
   13f74:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13f78:	mov	r4, #0
   13f7c:	eor	r7, r3, #2
   13f80:	mov	sl, r1
   13f84:	mov	r9, r2
   13f88:	ubfx	r7, r7, #1, #1
   13f8c:	mov	r8, r3
   13f90:	mov	r6, r4
   13f94:	str	r4, [sp, #12]
   13f98:	bl	10f20 <utmpxname@plt>
   13f9c:	bl	10fb0 <setutxent@plt>
   13fa0:	bl	111e4 <getutxent@plt>
   13fa4:	subs	r5, r0, #0
   13fa8:	bne	13fc4 <__assert_fail@plt+0x2dd4>
   13fac:	bl	11160 <endutxent@plt>
   13fb0:	mov	r0, r5
   13fb4:	str	r4, [sl]
   13fb8:	str	r6, [r9]
   13fbc:	add	sp, sp, #16
   13fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13fc4:	ldrb	r3, [r5, #44]	; 0x2c
   13fc8:	cmp	r3, #0
   13fcc:	ldrshne	r3, [r5]
   13fd0:	subne	r3, r3, #7
   13fd4:	clzne	r3, r3
   13fd8:	lsrne	r3, r3, #5
   13fdc:	orrs	r2, r7, r3
   13fe0:	beq	13fa0 <__assert_fail@plt+0x2db0>
   13fe4:	tst	r8, r3
   13fe8:	beq	14018 <__assert_fail@plt+0x2e28>
   13fec:	ldr	r0, [r5, #4]
   13ff0:	cmp	r0, #0
   13ff4:	ble	14018 <__assert_fail@plt+0x2e28>
   13ff8:	mov	r1, #0
   13ffc:	bl	110a0 <kill@plt>
   14000:	cmp	r0, #0
   14004:	bge	14018 <__assert_fail@plt+0x2e28>
   14008:	bl	110e8 <__errno_location@plt>
   1400c:	ldr	r3, [r0]
   14010:	cmp	r3, #3
   14014:	beq	13fa0 <__assert_fail@plt+0x2db0>
   14018:	ldr	r3, [sp, #12]
   1401c:	cmp	r3, r4
   14020:	bne	14044 <__assert_fail@plt+0x2e54>
   14024:	mov	r3, #384	; 0x180
   14028:	mov	r0, r6
   1402c:	mov	r2, #1
   14030:	add	r1, sp, #12
   14034:	str	r3, [sp]
   14038:	mvn	r3, #0
   1403c:	bl	14720 <__assert_fail@plt+0x3530>
   14040:	mov	r6, r0
   14044:	mov	r2, #384	; 0x180
   14048:	mov	r1, r5
   1404c:	mla	r0, r2, r4, r6
   14050:	add	r4, r4, #1
   14054:	bl	10f50 <memcpy@plt>
   14058:	b	13fa0 <__assert_fail@plt+0x2db0>
   1405c:	push	{r4, r5, r6, lr}
   14060:	mov	r5, r1
   14064:	mov	r1, #0
   14068:	mov	r4, r2
   1406c:	bl	1116c <setlocale@plt>
   14070:	subs	r6, r0, #0
   14074:	bne	14088 <__assert_fail@plt+0x2e98>
   14078:	cmp	r4, #0
   1407c:	mov	r0, #22
   14080:	strbne	r6, [r5]
   14084:	pop	{r4, r5, r6, pc}
   14088:	bl	110d0 <strlen@plt>
   1408c:	cmp	r4, r0
   14090:	bls	140ac <__assert_fail@plt+0x2ebc>
   14094:	add	r2, r0, #1
   14098:	mov	r1, r6
   1409c:	mov	r0, r5
   140a0:	bl	10f50 <memcpy@plt>
   140a4:	mov	r0, #0
   140a8:	pop	{r4, r5, r6, pc}
   140ac:	cmp	r4, #0
   140b0:	beq	140d0 <__assert_fail@plt+0x2ee0>
   140b4:	sub	r4, r4, #1
   140b8:	mov	r1, r6
   140bc:	mov	r2, r4
   140c0:	mov	r0, r5
   140c4:	bl	10f50 <memcpy@plt>
   140c8:	mov	r3, #0
   140cc:	strb	r3, [r5, r4]
   140d0:	mov	r0, #34	; 0x22
   140d4:	pop	{r4, r5, r6, pc}
   140d8:	mov	r1, #0
   140dc:	b	1116c <setlocale@plt>
   140e0:	push	{r4, r5, r6, lr}
   140e4:	cmp	r1, #0
   140e8:	sub	sp, sp, #32
   140ec:	mov	r5, r0
   140f0:	ldr	r4, [sp, #48]	; 0x30
   140f4:	ldr	r6, [sp, #52]	; 0x34
   140f8:	beq	141ac <__assert_fail@plt+0x2fbc>
   140fc:	strd	r2, [sp]
   14100:	mov	r3, r1
   14104:	mov	r1, #1
   14108:	ldr	r2, [pc, #856]	; 14468 <__assert_fail@plt+0x3278>
   1410c:	bl	1113c <__fprintf_chk@plt>
   14110:	mov	r2, #5
   14114:	ldr	r1, [pc, #848]	; 1446c <__assert_fail@plt+0x327c>
   14118:	mov	r0, #0
   1411c:	bl	10f98 <dcgettext@plt>
   14120:	movw	r3, #2022	; 0x7e6
   14124:	ldr	r2, [pc, #836]	; 14470 <__assert_fail@plt+0x3280>
   14128:	mov	r1, #1
   1412c:	str	r3, [sp]
   14130:	mov	r3, r0
   14134:	mov	r0, r5
   14138:	bl	1113c <__fprintf_chk@plt>
   1413c:	mov	r1, r5
   14140:	mov	r0, #10
   14144:	bl	10f8c <fputc_unlocked@plt>
   14148:	mov	r2, #5
   1414c:	ldr	r1, [pc, #800]	; 14474 <__assert_fail@plt+0x3284>
   14150:	mov	r0, #0
   14154:	bl	10f98 <dcgettext@plt>
   14158:	mov	r2, r0
   1415c:	mov	r1, #1
   14160:	ldr	r3, [pc, #784]	; 14478 <__assert_fail@plt+0x3288>
   14164:	mov	r0, r5
   14168:	bl	1113c <__fprintf_chk@plt>
   1416c:	mov	r1, r5
   14170:	mov	r0, #10
   14174:	bl	10f8c <fputc_unlocked@plt>
   14178:	cmp	r6, #9
   1417c:	ldrls	pc, [pc, r6, lsl #2]
   14180:	b	1445c <__assert_fail@plt+0x326c>
   14184:	muleq	r1, ip, r2
   14188:	andeq	r4, r1, r4, asr #3
   1418c:	strdeq	r4, [r1], -r0
   14190:	andeq	r4, r1, r4, lsr #4
   14194:	andeq	r4, r1, r0, ror #4
   14198:	andeq	r4, r1, r4, lsr #5
   1419c:	andeq	r4, r1, ip, ror #5
   141a0:	andeq	r4, r1, ip, lsr r3
   141a4:	muleq	r1, r4, r3
   141a8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141ac:	mov	r1, #1
   141b0:	str	r3, [sp]
   141b4:	mov	r3, r2
   141b8:	ldr	r2, [pc, #700]	; 1447c <__assert_fail@plt+0x328c>
   141bc:	bl	1113c <__fprintf_chk@plt>
   141c0:	b	14110 <__assert_fail@plt+0x2f20>
   141c4:	mov	r2, #5
   141c8:	ldr	r1, [pc, #688]	; 14480 <__assert_fail@plt+0x3290>
   141cc:	mov	r0, #0
   141d0:	bl	10f98 <dcgettext@plt>
   141d4:	ldr	r3, [r4]
   141d8:	mov	r2, r0
   141dc:	mov	r1, #1
   141e0:	mov	r0, r5
   141e4:	add	sp, sp, #32
   141e8:	pop	{r4, r5, r6, lr}
   141ec:	b	1113c <__fprintf_chk@plt>
   141f0:	mov	r2, #5
   141f4:	ldr	r1, [pc, #648]	; 14484 <__assert_fail@plt+0x3294>
   141f8:	mov	r0, #0
   141fc:	bl	10f98 <dcgettext@plt>
   14200:	ldr	r3, [r4, #4]
   14204:	mov	r2, r0
   14208:	mov	r1, #1
   1420c:	mov	r0, r5
   14210:	str	r3, [sp, #48]	; 0x30
   14214:	ldr	r3, [r4]
   14218:	add	sp, sp, #32
   1421c:	pop	{r4, r5, r6, lr}
   14220:	b	1113c <__fprintf_chk@plt>
   14224:	mov	r2, #5
   14228:	ldr	r1, [pc, #600]	; 14488 <__assert_fail@plt+0x3298>
   1422c:	mov	r0, #0
   14230:	bl	10f98 <dcgettext@plt>
   14234:	ldr	r3, [r4, #8]
   14238:	mov	r2, r0
   1423c:	mov	r1, #1
   14240:	mov	r0, r5
   14244:	str	r3, [sp, #52]	; 0x34
   14248:	ldr	r3, [r4, #4]
   1424c:	str	r3, [sp, #48]	; 0x30
   14250:	ldr	r3, [r4]
   14254:	add	sp, sp, #32
   14258:	pop	{r4, r5, r6, lr}
   1425c:	b	1113c <__fprintf_chk@plt>
   14260:	mov	r2, #5
   14264:	ldr	r1, [pc, #544]	; 1448c <__assert_fail@plt+0x329c>
   14268:	mov	r0, #0
   1426c:	bl	10f98 <dcgettext@plt>
   14270:	ldr	r3, [r4, #12]
   14274:	mov	r2, r0
   14278:	mov	r1, #1
   1427c:	mov	r0, r5
   14280:	str	r3, [sp, #8]
   14284:	ldr	r3, [r4, #8]
   14288:	str	r3, [sp, #4]
   1428c:	ldr	r3, [r4, #4]
   14290:	str	r3, [sp]
   14294:	ldr	r3, [r4]
   14298:	bl	1113c <__fprintf_chk@plt>
   1429c:	add	sp, sp, #32
   142a0:	pop	{r4, r5, r6, pc}
   142a4:	mov	r2, #5
   142a8:	ldr	r1, [pc, #480]	; 14490 <__assert_fail@plt+0x32a0>
   142ac:	mov	r0, #0
   142b0:	bl	10f98 <dcgettext@plt>
   142b4:	ldr	r3, [r4, #16]
   142b8:	mov	r2, r0
   142bc:	mov	r1, #1
   142c0:	mov	r0, r5
   142c4:	str	r3, [sp, #12]
   142c8:	ldr	r3, [r4, #12]
   142cc:	str	r3, [sp, #8]
   142d0:	ldr	r3, [r4, #8]
   142d4:	str	r3, [sp, #4]
   142d8:	ldr	r3, [r4, #4]
   142dc:	str	r3, [sp]
   142e0:	ldr	r3, [r4]
   142e4:	bl	1113c <__fprintf_chk@plt>
   142e8:	b	1429c <__assert_fail@plt+0x30ac>
   142ec:	mov	r2, #5
   142f0:	ldr	r1, [pc, #412]	; 14494 <__assert_fail@plt+0x32a4>
   142f4:	mov	r0, #0
   142f8:	bl	10f98 <dcgettext@plt>
   142fc:	ldr	r3, [r4, #20]
   14300:	mov	r2, r0
   14304:	mov	r1, #1
   14308:	mov	r0, r5
   1430c:	str	r3, [sp, #16]
   14310:	ldr	r3, [r4, #16]
   14314:	str	r3, [sp, #12]
   14318:	ldr	r3, [r4, #12]
   1431c:	str	r3, [sp, #8]
   14320:	ldr	r3, [r4, #8]
   14324:	str	r3, [sp, #4]
   14328:	ldr	r3, [r4, #4]
   1432c:	str	r3, [sp]
   14330:	ldr	r3, [r4]
   14334:	bl	1113c <__fprintf_chk@plt>
   14338:	b	1429c <__assert_fail@plt+0x30ac>
   1433c:	mov	r2, #5
   14340:	ldr	r1, [pc, #336]	; 14498 <__assert_fail@plt+0x32a8>
   14344:	mov	r0, #0
   14348:	bl	10f98 <dcgettext@plt>
   1434c:	ldr	r3, [r4, #24]
   14350:	mov	r2, r0
   14354:	mov	r1, #1
   14358:	mov	r0, r5
   1435c:	str	r3, [sp, #20]
   14360:	ldr	r3, [r4, #20]
   14364:	str	r3, [sp, #16]
   14368:	ldr	r3, [r4, #16]
   1436c:	str	r3, [sp, #12]
   14370:	ldr	r3, [r4, #12]
   14374:	str	r3, [sp, #8]
   14378:	ldr	r3, [r4, #8]
   1437c:	str	r3, [sp, #4]
   14380:	ldr	r3, [r4, #4]
   14384:	str	r3, [sp]
   14388:	ldr	r3, [r4]
   1438c:	bl	1113c <__fprintf_chk@plt>
   14390:	b	1429c <__assert_fail@plt+0x30ac>
   14394:	mov	r2, #5
   14398:	ldr	r1, [pc, #252]	; 1449c <__assert_fail@plt+0x32ac>
   1439c:	mov	r0, #0
   143a0:	bl	10f98 <dcgettext@plt>
   143a4:	ldr	r3, [r4, #28]
   143a8:	mov	r2, r0
   143ac:	mov	r1, #1
   143b0:	mov	r0, r5
   143b4:	str	r3, [sp, #24]
   143b8:	ldr	r3, [r4, #24]
   143bc:	str	r3, [sp, #20]
   143c0:	ldr	r3, [r4, #20]
   143c4:	str	r3, [sp, #16]
   143c8:	ldr	r3, [r4, #16]
   143cc:	str	r3, [sp, #12]
   143d0:	ldr	r3, [r4, #12]
   143d4:	str	r3, [sp, #8]
   143d8:	ldr	r3, [r4, #8]
   143dc:	str	r3, [sp, #4]
   143e0:	ldr	r3, [r4, #4]
   143e4:	str	r3, [sp]
   143e8:	ldr	r3, [r4]
   143ec:	bl	1113c <__fprintf_chk@plt>
   143f0:	b	1429c <__assert_fail@plt+0x30ac>
   143f4:	ldr	r1, [pc, #164]	; 144a0 <__assert_fail@plt+0x32b0>
   143f8:	mov	r2, #5
   143fc:	mov	r0, #0
   14400:	bl	10f98 <dcgettext@plt>
   14404:	ldr	r3, [r4, #32]
   14408:	mov	r2, r0
   1440c:	mov	r1, #1
   14410:	mov	r0, r5
   14414:	str	r3, [sp, #28]
   14418:	ldr	r3, [r4, #28]
   1441c:	str	r3, [sp, #24]
   14420:	ldr	r3, [r4, #24]
   14424:	str	r3, [sp, #20]
   14428:	ldr	r3, [r4, #20]
   1442c:	str	r3, [sp, #16]
   14430:	ldr	r3, [r4, #16]
   14434:	str	r3, [sp, #12]
   14438:	ldr	r3, [r4, #12]
   1443c:	str	r3, [sp, #8]
   14440:	ldr	r3, [r4, #8]
   14444:	str	r3, [sp, #4]
   14448:	ldr	r3, [r4, #4]
   1444c:	str	r3, [sp]
   14450:	ldr	r3, [r4]
   14454:	bl	1113c <__fprintf_chk@plt>
   14458:	b	1429c <__assert_fail@plt+0x30ac>
   1445c:	mov	r2, #5
   14460:	ldr	r1, [pc, #60]	; 144a4 <__assert_fail@plt+0x32b4>
   14464:	b	143fc <__assert_fail@plt+0x320c>
   14468:	strdeq	r5, [r1], -r9
   1446c:	andeq	r5, r1, ip, lsl #20
   14470:	ldrdeq	r5, [r1], -sl
   14474:	andeq	r5, r1, r0, lsl sl
   14478:			; <UNDEFINED> instruction: 0x00015abb
   1447c:	andeq	r5, r1, r5, lsl #20
   14480:	ldrdeq	r5, [r1], -sp
   14484:	andeq	r5, r1, sp, ror #21
   14488:	andeq	r5, r1, r4, lsl #22
   1448c:	andeq	r5, r1, r0, lsr #22
   14490:	andeq	r5, r1, r0, asr #22
   14494:	andeq	r5, r1, r4, ror #22
   14498:	andeq	r5, r1, ip, lsl #23
   1449c:			; <UNDEFINED> instruction: 0x00015bb8
   144a0:	andeq	r5, r1, r8, ror #23
   144a4:	andeq	r5, r1, ip, lsl ip
   144a8:	push	{r0, r1, r4, lr}
   144ac:	mov	ip, #0
   144b0:	ldr	lr, [sp, #16]
   144b4:	ldr	r4, [lr, ip, lsl #2]
   144b8:	cmp	r4, #0
   144bc:	bne	144d4 <__assert_fail@plt+0x32e4>
   144c0:	str	lr, [sp]
   144c4:	str	ip, [sp, #4]
   144c8:	bl	140e0 <__assert_fail@plt+0x2ef0>
   144cc:	add	sp, sp, #8
   144d0:	pop	{r4, pc}
   144d4:	add	ip, ip, #1
   144d8:	b	144b4 <__assert_fail@plt+0x32c4>
   144dc:	push	{r4, r5, r6, lr}
   144e0:	sub	sp, sp, #48	; 0x30
   144e4:	mov	ip, #0
   144e8:	add	lr, sp, #8
   144ec:	mov	r5, lr
   144f0:	ldr	r6, [sp, #64]	; 0x40
   144f4:	ldr	r4, [r6, ip, lsl #2]
   144f8:	cmp	r4, #0
   144fc:	str	r4, [lr], #4
   14500:	beq	14510 <__assert_fail@plt+0x3320>
   14504:	add	ip, ip, #1
   14508:	cmp	ip, #10
   1450c:	bne	144f4 <__assert_fail@plt+0x3304>
   14510:	stm	sp, {r5, ip}
   14514:	bl	140e0 <__assert_fail@plt+0x2ef0>
   14518:	add	sp, sp, #48	; 0x30
   1451c:	pop	{r4, r5, r6, pc}
   14520:	push	{r3}		; (str r3, [sp, #-4]!)
   14524:	push	{r0, r1, r2, r3, lr}
   14528:	add	r3, sp, #24
   1452c:	str	r3, [sp]
   14530:	str	r3, [sp, #12]
   14534:	ldr	r3, [sp, #20]
   14538:	bl	144dc <__assert_fail@plt+0x32ec>
   1453c:	add	sp, sp, #16
   14540:	pop	{lr}		; (ldr lr, [sp], #4)
   14544:	add	sp, sp, #4
   14548:	bx	lr
   1454c:	ldr	r3, [pc, #116]	; 145c8 <__assert_fail@plt+0x33d8>
   14550:	mov	r0, #10
   14554:	push	{r4, lr}
   14558:	ldr	r1, [r3]
   1455c:	bl	10f8c <fputc_unlocked@plt>
   14560:	mov	r2, #5
   14564:	ldr	r1, [pc, #96]	; 145cc <__assert_fail@plt+0x33dc>
   14568:	mov	r0, #0
   1456c:	bl	10f98 <dcgettext@plt>
   14570:	mov	r1, r0
   14574:	ldr	r2, [pc, #84]	; 145d0 <__assert_fail@plt+0x33e0>
   14578:	mov	r0, #1
   1457c:	bl	11124 <__printf_chk@plt>
   14580:	mov	r2, #5
   14584:	ldr	r1, [pc, #72]	; 145d4 <__assert_fail@plt+0x33e4>
   14588:	mov	r0, #0
   1458c:	bl	10f98 <dcgettext@plt>
   14590:	mov	r1, r0
   14594:	ldr	r3, [pc, #60]	; 145d8 <__assert_fail@plt+0x33e8>
   14598:	mov	r0, #1
   1459c:	ldr	r2, [pc, #56]	; 145dc <__assert_fail@plt+0x33ec>
   145a0:	bl	11124 <__printf_chk@plt>
   145a4:	mov	r2, #5
   145a8:	ldr	r1, [pc, #48]	; 145e0 <__assert_fail@plt+0x33f0>
   145ac:	mov	r0, #0
   145b0:	bl	10f98 <dcgettext@plt>
   145b4:	mov	r1, r0
   145b8:	ldr	r2, [pc, #36]	; 145e4 <__assert_fail@plt+0x33f4>
   145bc:	mov	r0, #1
   145c0:	pop	{r4, lr}
   145c4:	b	11124 <__printf_chk@plt>
   145c8:	andeq	r6, r2, r4, lsl #3
   145cc:	andeq	r5, r1, r8, asr ip
   145d0:	andeq	r5, r1, ip, ror #24
   145d4:	andeq	r5, r1, r2, lsl #25
   145d8:			; <UNDEFINED> instruction: 0x000156bb
   145dc:	andeq	r5, r1, r3, ror #13
   145e0:	muleq	r1, r6, ip
   145e4:			; <UNDEFINED> instruction: 0x00015cbd
   145e8:	push	{r4, lr}
   145ec:	bl	14934 <__assert_fail@plt+0x3744>
   145f0:	cmp	r0, #0
   145f4:	popne	{r4, pc}
   145f8:	bl	148a0 <__assert_fail@plt+0x36b0>
   145fc:	push	{r4, lr}
   14600:	bl	14934 <__assert_fail@plt+0x3744>
   14604:	cmp	r0, #0
   14608:	popne	{r4, pc}
   1460c:	bl	148a0 <__assert_fail@plt+0x36b0>
   14610:	b	145e8 <__assert_fail@plt+0x33f8>
   14614:	push	{r4, r5, r6, lr}
   14618:	mov	r5, r0
   1461c:	mov	r4, r1
   14620:	bl	14960 <__assert_fail@plt+0x3770>
   14624:	cmp	r0, #0
   14628:	popne	{r4, r5, r6, pc}
   1462c:	adds	r4, r4, #0
   14630:	movne	r4, #1
   14634:	cmp	r5, #0
   14638:	moveq	r4, #1
   1463c:	cmp	r4, #0
   14640:	popeq	{r4, r5, r6, pc}
   14644:	bl	148a0 <__assert_fail@plt+0x36b0>
   14648:	push	{r4, lr}
   1464c:	bl	14ba8 <__assert_fail@plt+0x39b8>
   14650:	cmp	r0, #0
   14654:	popne	{r4, pc}
   14658:	bl	148a0 <__assert_fail@plt+0x36b0>
   1465c:	push	{r4, r5, r6, lr}
   14660:	mov	r6, r0
   14664:	mov	r5, r1
   14668:	mov	r4, r2
   1466c:	bl	14c50 <__assert_fail@plt+0x3a60>
   14670:	cmp	r0, #0
   14674:	popne	{r4, r5, r6, pc}
   14678:	cmp	r6, #0
   1467c:	beq	1468c <__assert_fail@plt+0x349c>
   14680:	cmp	r5, #0
   14684:	cmpne	r4, #0
   14688:	popeq	{r4, r5, r6, pc}
   1468c:	bl	148a0 <__assert_fail@plt+0x36b0>
   14690:	b	1465c <__assert_fail@plt+0x346c>
   14694:	push	{r4, lr}
   14698:	bl	14bb8 <__assert_fail@plt+0x39c8>
   1469c:	cmp	r0, #0
   146a0:	popne	{r4, pc}
   146a4:	bl	148a0 <__assert_fail@plt+0x36b0>
   146a8:	mov	r2, r1
   146ac:	mov	r1, r0
   146b0:	mov	r0, #0
   146b4:	b	1465c <__assert_fail@plt+0x346c>
   146b8:	mov	r2, r1
   146bc:	mov	r1, r0
   146c0:	mov	r0, #0
   146c4:	b	14694 <__assert_fail@plt+0x34a4>
   146c8:	cmp	r0, #0
   146cc:	push	{r4, r5, r6, lr}
   146d0:	mov	r5, r1
   146d4:	ldr	r4, [r1]
   146d8:	bne	14704 <__assert_fail@plt+0x3514>
   146dc:	cmp	r4, #0
   146e0:	bne	146f4 <__assert_fail@plt+0x3504>
   146e4:	mov	r4, #64	; 0x40
   146e8:	udiv	r4, r4, r2
   146ec:	cmp	r2, #64	; 0x40
   146f0:	addhi	r4, r4, #1
   146f4:	mov	r1, r4
   146f8:	bl	1465c <__assert_fail@plt+0x346c>
   146fc:	str	r4, [r5]
   14700:	pop	{r4, r5, r6, pc}
   14704:	lsr	r3, r4, #1
   14708:	add	r3, r3, #1
   1470c:	adds	r4, r4, r3
   14710:	bcc	146f4 <__assert_fail@plt+0x3504>
   14714:	bl	148a0 <__assert_fail@plt+0x36b0>
   14718:	mov	r2, #1
   1471c:	b	146c8 <__assert_fail@plt+0x34d8>
   14720:	ldr	ip, [r1]
   14724:	push	{r4, r5, r6, r7, r8, lr}
   14728:	mov	r5, r1
   1472c:	mvn	r8, r3
   14730:	lsr	r8, r8, #31
   14734:	ldr	lr, [sp, #24]
   14738:	asr	r1, ip, #1
   1473c:	adds	r4, ip, r1
   14740:	mvnvs	r4, #-2147483648	; 0x80000000
   14744:	cmp	r3, r4
   14748:	movge	r1, #0
   1474c:	andlt	r1, r8, #1
   14750:	cmp	r1, #0
   14754:	movne	r4, r3
   14758:	smull	r6, r7, r4, lr
   1475c:	cmp	r7, r6, asr #31
   14760:	bne	14778 <__assert_fail@plt+0x3588>
   14764:	cmp	r6, #63	; 0x3f
   14768:	mov	r1, r6
   1476c:	bgt	14788 <__assert_fail@plt+0x3598>
   14770:	mov	r1, #64	; 0x40
   14774:	b	1477c <__assert_fail@plt+0x358c>
   14778:	mvn	r1, #-2147483648	; 0x80000000
   1477c:	sdiv	r4, r1, lr
   14780:	mls	r6, lr, r4, r1
   14784:	sub	r1, r1, r6
   14788:	cmp	r0, #0
   1478c:	sub	r6, r4, ip
   14790:	streq	r0, [r5]
   14794:	cmp	r6, r2
   14798:	bge	147cc <__assert_fail@plt+0x35dc>
   1479c:	adds	r4, ip, r2
   147a0:	bvs	147c8 <__assert_fail@plt+0x35d8>
   147a4:	cmp	r4, r3
   147a8:	movle	r3, #0
   147ac:	andgt	r3, r8, #1
   147b0:	cmp	r3, #0
   147b4:	bne	147c8 <__assert_fail@plt+0x35d8>
   147b8:	smull	r2, r3, r4, lr
   147bc:	cmp	r3, r2, asr #31
   147c0:	mov	r1, r2
   147c4:	beq	147cc <__assert_fail@plt+0x35dc>
   147c8:	bl	148a0 <__assert_fail@plt+0x36b0>
   147cc:	bl	14614 <__assert_fail@plt+0x3424>
   147d0:	str	r4, [r5]
   147d4:	pop	{r4, r5, r6, r7, r8, pc}
   147d8:	push	{r4, lr}
   147dc:	bl	148e0 <__assert_fail@plt+0x36f0>
   147e0:	cmp	r0, #0
   147e4:	popne	{r4, pc}
   147e8:	bl	148a0 <__assert_fail@plt+0x36b0>
   147ec:	mov	r1, #1
   147f0:	b	147d8 <__assert_fail@plt+0x35e8>
   147f4:	push	{r4, lr}
   147f8:	bl	148e0 <__assert_fail@plt+0x36f0>
   147fc:	cmp	r0, #0
   14800:	popne	{r4, pc}
   14804:	bl	148a0 <__assert_fail@plt+0x36b0>
   14808:	mov	r1, #1
   1480c:	b	147f4 <__assert_fail@plt+0x3604>
   14810:	push	{r4, r5, r6, lr}
   14814:	mov	r4, r1
   14818:	mov	r5, r0
   1481c:	mov	r0, r1
   14820:	bl	145e8 <__assert_fail@plt+0x33f8>
   14824:	mov	r2, r4
   14828:	mov	r1, r5
   1482c:	pop	{r4, r5, r6, lr}
   14830:	b	10f50 <memcpy@plt>
   14834:	push	{r4, r5, r6, lr}
   14838:	mov	r4, r1
   1483c:	mov	r5, r0
   14840:	mov	r0, r1
   14844:	bl	145fc <__assert_fail@plt+0x340c>
   14848:	mov	r2, r4
   1484c:	mov	r1, r5
   14850:	pop	{r4, r5, r6, lr}
   14854:	b	10f50 <memcpy@plt>
   14858:	push	{r4, r5, r6, lr}
   1485c:	mov	r5, r0
   14860:	add	r0, r1, #1
   14864:	mov	r4, r1
   14868:	bl	145fc <__assert_fail@plt+0x340c>
   1486c:	mov	r2, #0
   14870:	mov	r1, r5
   14874:	strb	r2, [r0, r4]
   14878:	mov	r2, r4
   1487c:	pop	{r4, r5, r6, lr}
   14880:	b	10f50 <memcpy@plt>
   14884:	push	{r4, lr}
   14888:	mov	r4, r0
   1488c:	bl	110d0 <strlen@plt>
   14890:	add	r1, r0, #1
   14894:	mov	r0, r4
   14898:	pop	{r4, lr}
   1489c:	b	14810 <__assert_fail@plt+0x3620>
   148a0:	ldr	r3, [pc, #44]	; 148d4 <__assert_fail@plt+0x36e4>
   148a4:	mov	r2, #5
   148a8:	mov	r0, #0
   148ac:	push	{r4, lr}
   148b0:	ldr	r1, [pc, #32]	; 148d8 <__assert_fail@plt+0x36e8>
   148b4:	ldr	r4, [r3]
   148b8:	bl	10f98 <dcgettext@plt>
   148bc:	mov	r3, r0
   148c0:	ldr	r2, [pc, #20]	; 148dc <__assert_fail@plt+0x36ec>
   148c4:	mov	r1, #0
   148c8:	mov	r0, r4
   148cc:	bl	11028 <error@plt>
   148d0:	bl	111d8 <abort@plt>
   148d4:	andeq	r6, r2, ip, lsr #2
   148d8:	andeq	r5, r1, r9, lsl #26
   148dc:	strdeq	r5, [r1], -r3
   148e0:	cmp	r1, #0
   148e4:	cmpne	r0, #0
   148e8:	beq	14920 <__assert_fail@plt+0x3730>
   148ec:	push	{r4, r5, r6, lr}
   148f0:	umull	r4, r5, r0, r1
   148f4:	adds	r3, r5, #0
   148f8:	movne	r3, #1
   148fc:	cmp	r4, #0
   14900:	blt	1490c <__assert_fail@plt+0x371c>
   14904:	cmp	r3, #0
   14908:	beq	1492c <__assert_fail@plt+0x373c>
   1490c:	bl	110e8 <__errno_location@plt>
   14910:	mov	r3, #12
   14914:	str	r3, [r0]
   14918:	mov	r0, #0
   1491c:	pop	{r4, r5, r6, pc}
   14920:	mov	r1, #1
   14924:	mov	r0, r1
   14928:	b	10ee4 <calloc@plt>
   1492c:	pop	{r4, r5, r6, lr}
   14930:	b	14928 <__assert_fail@plt+0x3738>
   14934:	cmp	r0, #0
   14938:	beq	14958 <__assert_fail@plt+0x3768>
   1493c:	bge	1495c <__assert_fail@plt+0x376c>
   14940:	push	{r4, lr}
   14944:	bl	110e8 <__errno_location@plt>
   14948:	mov	r3, #12
   1494c:	str	r3, [r0]
   14950:	mov	r0, #0
   14954:	pop	{r4, pc}
   14958:	mov	r0, #1
   1495c:	b	1104c <malloc@plt>
   14960:	cmp	r0, #0
   14964:	bne	14970 <__assert_fail@plt+0x3780>
   14968:	mov	r0, r1
   1496c:	b	14934 <__assert_fail@plt+0x3744>
   14970:	cmp	r1, #0
   14974:	push	{r4, lr}
   14978:	bne	14988 <__assert_fail@plt+0x3798>
   1497c:	bl	1279c <__assert_fail@plt+0x15ac>
   14980:	mov	r0, #0
   14984:	pop	{r4, pc}
   14988:	blt	14994 <__assert_fail@plt+0x37a4>
   1498c:	pop	{r4, lr}
   14990:	b	10fbc <realloc@plt>
   14994:	bl	110e8 <__errno_location@plt>
   14998:	mov	r3, #12
   1499c:	str	r3, [r0]
   149a0:	b	14980 <__assert_fail@plt+0x3790>
   149a4:	push	{r4, r5, r6, lr}
   149a8:	mov	r4, r0
   149ac:	bl	11004 <__fpending@plt>
   149b0:	mov	r5, r0
   149b4:	mov	r0, r4
   149b8:	bl	11010 <ferror_unlocked@plt>
   149bc:	mov	r6, r0
   149c0:	mov	r0, r4
   149c4:	bl	14a14 <__assert_fail@plt+0x3824>
   149c8:	cmp	r6, #0
   149cc:	mov	r4, r0
   149d0:	bne	149fc <__assert_fail@plt+0x380c>
   149d4:	cmp	r0, #0
   149d8:	beq	149f4 <__assert_fail@plt+0x3804>
   149dc:	cmp	r5, #0
   149e0:	bne	14a0c <__assert_fail@plt+0x381c>
   149e4:	bl	110e8 <__errno_location@plt>
   149e8:	ldr	r4, [r0]
   149ec:	subs	r4, r4, #9
   149f0:	mvnne	r4, #0
   149f4:	mov	r0, r4
   149f8:	pop	{r4, r5, r6, pc}
   149fc:	cmp	r0, #0
   14a00:	bne	14a0c <__assert_fail@plt+0x381c>
   14a04:	bl	110e8 <__errno_location@plt>
   14a08:	str	r4, [r0]
   14a0c:	mvn	r4, #0
   14a10:	b	149f4 <__assert_fail@plt+0x3804>
   14a14:	push	{r0, r1, r2, r4, r5, lr}
   14a18:	mov	r4, r0
   14a1c:	bl	11130 <fileno@plt>
   14a20:	cmp	r0, #0
   14a24:	mov	r0, r4
   14a28:	bge	14a38 <__assert_fail@plt+0x3848>
   14a2c:	add	sp, sp, #12
   14a30:	pop	{r4, r5, lr}
   14a34:	b	11148 <fclose@plt>
   14a38:	bl	11070 <__freading@plt>
   14a3c:	cmp	r0, #0
   14a40:	bne	14a7c <__assert_fail@plt+0x388c>
   14a44:	mov	r0, r4
   14a48:	bl	14abc <__assert_fail@plt+0x38cc>
   14a4c:	cmp	r0, #0
   14a50:	bne	14ab0 <__assert_fail@plt+0x38c0>
   14a54:	mov	r5, #0
   14a58:	mov	r0, r4
   14a5c:	bl	11148 <fclose@plt>
   14a60:	cmp	r5, #0
   14a64:	beq	14a74 <__assert_fail@plt+0x3884>
   14a68:	bl	110e8 <__errno_location@plt>
   14a6c:	str	r5, [r0]
   14a70:	mvn	r0, #0
   14a74:	add	sp, sp, #12
   14a78:	pop	{r4, r5, pc}
   14a7c:	mov	r0, r4
   14a80:	bl	11130 <fileno@plt>
   14a84:	mov	r3, #1
   14a88:	mov	r2, #0
   14a8c:	str	r3, [sp]
   14a90:	mov	r3, #0
   14a94:	bl	10fe0 <lseek64@plt>
   14a98:	mvn	r3, #0
   14a9c:	mvn	r2, #0
   14aa0:	cmp	r1, r3
   14aa4:	cmpeq	r0, r2
   14aa8:	bne	14a44 <__assert_fail@plt+0x3854>
   14aac:	b	14a54 <__assert_fail@plt+0x3864>
   14ab0:	bl	110e8 <__errno_location@plt>
   14ab4:	ldr	r5, [r0]
   14ab8:	b	14a58 <__assert_fail@plt+0x3868>
   14abc:	push	{r0, r1, r4, lr}
   14ac0:	subs	r4, r0, #0
   14ac4:	bne	14ad8 <__assert_fail@plt+0x38e8>
   14ac8:	mov	r0, r4
   14acc:	add	sp, sp, #8
   14ad0:	pop	{r4, lr}
   14ad4:	b	10f14 <fflush@plt>
   14ad8:	bl	11070 <__freading@plt>
   14adc:	cmp	r0, #0
   14ae0:	beq	14ac8 <__assert_fail@plt+0x38d8>
   14ae4:	ldr	r3, [r4]
   14ae8:	tst	r3, #256	; 0x100
   14aec:	beq	14ac8 <__assert_fail@plt+0x38d8>
   14af0:	mov	r3, #1
   14af4:	mov	r2, #0
   14af8:	mov	r0, r4
   14afc:	str	r3, [sp]
   14b00:	mov	r3, #0
   14b04:	bl	14b0c <__assert_fail@plt+0x391c>
   14b08:	b	14ac8 <__assert_fail@plt+0x38d8>
   14b0c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14b10:	mov	r4, r0
   14b14:	ldmib	r0, {ip, lr}
   14b18:	ldr	r8, [sp, #32]
   14b1c:	cmp	lr, ip
   14b20:	bne	14b90 <__assert_fail@plt+0x39a0>
   14b24:	ldr	ip, [r0, #16]
   14b28:	ldr	lr, [r0, #20]
   14b2c:	cmp	lr, ip
   14b30:	bne	14b90 <__assert_fail@plt+0x39a0>
   14b34:	ldr	r5, [r0, #36]	; 0x24
   14b38:	cmp	r5, #0
   14b3c:	bne	14b90 <__assert_fail@plt+0x39a0>
   14b40:	mov	r6, r2
   14b44:	mov	r7, r3
   14b48:	bl	11130 <fileno@plt>
   14b4c:	mov	r2, r6
   14b50:	mov	r3, r7
   14b54:	str	r8, [sp]
   14b58:	bl	10fe0 <lseek64@plt>
   14b5c:	mvn	r3, #0
   14b60:	mvn	r2, #0
   14b64:	cmp	r1, r3
   14b68:	cmpeq	r0, r2
   14b6c:	mvneq	r0, #0
   14b70:	beq	14b88 <__assert_fail@plt+0x3998>
   14b74:	ldr	r3, [r4]
   14b78:	strd	r0, [r4, #80]	; 0x50
   14b7c:	mov	r0, r5
   14b80:	bic	r3, r3, #16
   14b84:	str	r3, [r4]
   14b88:	add	sp, sp, #8
   14b8c:	pop	{r4, r5, r6, r7, r8, pc}
   14b90:	mov	r0, r4
   14b94:	str	r8, [sp, #32]
   14b98:	add	sp, sp, #8
   14b9c:	pop	{r4, r5, r6, r7, r8, lr}
   14ba0:	b	11154 <fseeko64@plt>
   14ba4:	b	14934 <__assert_fail@plt+0x3744>
   14ba8:	cmp	r1, #0
   14bac:	orreq	r1, r1, #1
   14bb0:	b	14960 <__assert_fail@plt+0x3770>
   14bb4:	b	148e0 <__assert_fail@plt+0x36f0>
   14bb8:	cmp	r2, #0
   14bbc:	cmpne	r1, #0
   14bc0:	moveq	r2, #1
   14bc4:	moveq	r1, r2
   14bc8:	b	14c50 <__assert_fail@plt+0x3a60>
   14bcc:	push	{r4, lr}
   14bd0:	mov	r0, #14
   14bd4:	bl	11184 <nl_langinfo@plt>
   14bd8:	cmp	r0, #0
   14bdc:	beq	14bf4 <__assert_fail@plt+0x3a04>
   14be0:	ldrb	r2, [r0]
   14be4:	ldr	r3, [pc, #16]	; 14bfc <__assert_fail@plt+0x3a0c>
   14be8:	cmp	r2, #0
   14bec:	moveq	r0, r3
   14bf0:	pop	{r4, pc}
   14bf4:	ldr	r0, [pc]	; 14bfc <__assert_fail@plt+0x3a0c>
   14bf8:	pop	{r4, pc}
   14bfc:	andeq	r5, r1, sl, lsl sp
   14c00:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14c04:	subs	r5, r0, #0
   14c08:	mov	r7, r2
   14c0c:	addeq	r5, sp, #4
   14c10:	mov	r6, r1
   14c14:	mov	r0, r5
   14c18:	bl	1101c <mbrtowc@plt>
   14c1c:	cmp	r7, #0
   14c20:	cmnne	r0, #3
   14c24:	mov	r4, r0
   14c28:	bls	14c44 <__assert_fail@plt+0x3a54>
   14c2c:	mov	r0, #0
   14c30:	bl	127ec <__assert_fail@plt+0x15fc>
   14c34:	cmp	r0, #0
   14c38:	ldrbeq	r3, [r6]
   14c3c:	moveq	r4, #1
   14c40:	streq	r3, [r5]
   14c44:	mov	r0, r4
   14c48:	add	sp, sp, #12
   14c4c:	pop	{r4, r5, r6, r7, pc}
   14c50:	umull	r2, r3, r1, r2
   14c54:	cmp	r3, #0
   14c58:	bne	14c64 <__assert_fail@plt+0x3a74>
   14c5c:	mov	r1, r2
   14c60:	b	14960 <__assert_fail@plt+0x3770>
   14c64:	push	{r4, lr}
   14c68:	bl	110e8 <__errno_location@plt>
   14c6c:	mov	r3, #12
   14c70:	str	r3, [r0]
   14c74:	mov	r0, #0
   14c78:	pop	{r4, pc}
   14c7c:	cmp	r3, #0
   14c80:	cmpeq	r2, #0
   14c84:	bne	14ca8 <__assert_fail@plt+0x3ab8>
   14c88:	cmp	r1, #0
   14c8c:	movlt	r1, #-2147483648	; 0x80000000
   14c90:	movlt	r0, #0
   14c94:	blt	14ca4 <__assert_fail@plt+0x3ab4>
   14c98:	cmpeq	r0, #0
   14c9c:	mvnne	r1, #-2147483648	; 0x80000000
   14ca0:	mvnne	r0, #0
   14ca4:	b	14d8c <__assert_fail@plt+0x3b9c>
   14ca8:	sub	sp, sp, #8
   14cac:	push	{sp, lr}
   14cb0:	cmp	r1, #0
   14cb4:	blt	14cd4 <__assert_fail@plt+0x3ae4>
   14cb8:	cmp	r3, #0
   14cbc:	blt	14d08 <__assert_fail@plt+0x3b18>
   14cc0:	bl	14d9c <__assert_fail@plt+0x3bac>
   14cc4:	ldr	lr, [sp, #4]
   14cc8:	add	sp, sp, #8
   14ccc:	pop	{r2, r3}
   14cd0:	bx	lr
   14cd4:	rsbs	r0, r0, #0
   14cd8:	sbc	r1, r1, r1, lsl #1
   14cdc:	cmp	r3, #0
   14ce0:	blt	14d2c <__assert_fail@plt+0x3b3c>
   14ce4:	bl	14d9c <__assert_fail@plt+0x3bac>
   14ce8:	ldr	lr, [sp, #4]
   14cec:	add	sp, sp, #8
   14cf0:	pop	{r2, r3}
   14cf4:	rsbs	r0, r0, #0
   14cf8:	sbc	r1, r1, r1, lsl #1
   14cfc:	rsbs	r2, r2, #0
   14d00:	sbc	r3, r3, r3, lsl #1
   14d04:	bx	lr
   14d08:	rsbs	r2, r2, #0
   14d0c:	sbc	r3, r3, r3, lsl #1
   14d10:	bl	14d9c <__assert_fail@plt+0x3bac>
   14d14:	ldr	lr, [sp, #4]
   14d18:	add	sp, sp, #8
   14d1c:	pop	{r2, r3}
   14d20:	rsbs	r0, r0, #0
   14d24:	sbc	r1, r1, r1, lsl #1
   14d28:	bx	lr
   14d2c:	rsbs	r2, r2, #0
   14d30:	sbc	r3, r3, r3, lsl #1
   14d34:	bl	14d9c <__assert_fail@plt+0x3bac>
   14d38:	ldr	lr, [sp, #4]
   14d3c:	add	sp, sp, #8
   14d40:	pop	{r2, r3}
   14d44:	rsbs	r2, r2, #0
   14d48:	sbc	r3, r3, r3, lsl #1
   14d4c:	bx	lr
   14d50:	cmp	r3, #0
   14d54:	cmpeq	r2, #0
   14d58:	bne	14d70 <__assert_fail@plt+0x3b80>
   14d5c:	cmp	r1, #0
   14d60:	cmpeq	r0, #0
   14d64:	mvnne	r1, #0
   14d68:	mvnne	r0, #0
   14d6c:	b	14d8c <__assert_fail@plt+0x3b9c>
   14d70:	sub	sp, sp, #8
   14d74:	push	{sp, lr}
   14d78:	bl	14d9c <__assert_fail@plt+0x3bac>
   14d7c:	ldr	lr, [sp, #4]
   14d80:	add	sp, sp, #8
   14d84:	pop	{r2, r3}
   14d88:	bx	lr
   14d8c:	push	{r1, lr}
   14d90:	mov	r0, #8
   14d94:	bl	10efc <raise@plt>
   14d98:	pop	{r1, pc}
   14d9c:	cmp	r1, r3
   14da0:	cmpeq	r0, r2
   14da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14da8:	mov	r4, r0
   14dac:	movcc	r0, #0
   14db0:	mov	r5, r1
   14db4:	ldr	lr, [sp, #36]	; 0x24
   14db8:	movcc	r1, r0
   14dbc:	bcc	14eb8 <__assert_fail@plt+0x3cc8>
   14dc0:	cmp	r3, #0
   14dc4:	clzeq	ip, r2
   14dc8:	clzne	ip, r3
   14dcc:	addeq	ip, ip, #32
   14dd0:	cmp	r5, #0
   14dd4:	clzeq	r1, r4
   14dd8:	addeq	r1, r1, #32
   14ddc:	clzne	r1, r5
   14de0:	sub	ip, ip, r1
   14de4:	sub	sl, ip, #32
   14de8:	lsl	r9, r3, ip
   14dec:	rsb	fp, ip, #32
   14df0:	orr	r9, r9, r2, lsl sl
   14df4:	orr	r9, r9, r2, lsr fp
   14df8:	lsl	r8, r2, ip
   14dfc:	cmp	r5, r9
   14e00:	cmpeq	r4, r8
   14e04:	movcc	r0, #0
   14e08:	movcc	r1, r0
   14e0c:	bcc	14e28 <__assert_fail@plt+0x3c38>
   14e10:	mov	r0, #1
   14e14:	subs	r4, r4, r8
   14e18:	lsl	r1, r0, sl
   14e1c:	orr	r1, r1, r0, lsr fp
   14e20:	lsl	r0, r0, ip
   14e24:	sbc	r5, r5, r9
   14e28:	cmp	ip, #0
   14e2c:	beq	14eb8 <__assert_fail@plt+0x3cc8>
   14e30:	lsr	r6, r8, #1
   14e34:	orr	r6, r6, r9, lsl #31
   14e38:	lsr	r7, r9, #1
   14e3c:	mov	r2, ip
   14e40:	b	14e64 <__assert_fail@plt+0x3c74>
   14e44:	subs	r3, r4, r6
   14e48:	sbc	r8, r5, r7
   14e4c:	adds	r3, r3, r3
   14e50:	adc	r8, r8, r8
   14e54:	adds	r4, r3, #1
   14e58:	adc	r5, r8, #0
   14e5c:	subs	r2, r2, #1
   14e60:	beq	14e80 <__assert_fail@plt+0x3c90>
   14e64:	cmp	r5, r7
   14e68:	cmpeq	r4, r6
   14e6c:	bcs	14e44 <__assert_fail@plt+0x3c54>
   14e70:	adds	r4, r4, r4
   14e74:	adc	r5, r5, r5
   14e78:	subs	r2, r2, #1
   14e7c:	bne	14e64 <__assert_fail@plt+0x3c74>
   14e80:	lsr	r3, r4, ip
   14e84:	orr	r3, r3, r5, lsl fp
   14e88:	lsr	r2, r5, ip
   14e8c:	orr	r3, r3, r5, lsr sl
   14e90:	adds	r0, r0, r4
   14e94:	mov	r4, r3
   14e98:	lsl	r3, r2, ip
   14e9c:	orr	r3, r3, r4, lsl sl
   14ea0:	lsl	ip, r4, ip
   14ea4:	orr	r3, r3, r4, lsr fp
   14ea8:	adc	r1, r1, r5
   14eac:	subs	r0, r0, ip
   14eb0:	mov	r5, r2
   14eb4:	sbc	r1, r1, r3
   14eb8:	cmp	lr, #0
   14ebc:	strdne	r4, [lr]
   14ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ec8:	mov	r7, r0
   14ecc:	ldr	r6, [pc, #72]	; 14f1c <__assert_fail@plt+0x3d2c>
   14ed0:	ldr	r5, [pc, #72]	; 14f20 <__assert_fail@plt+0x3d30>
   14ed4:	add	r6, pc, r6
   14ed8:	add	r5, pc, r5
   14edc:	sub	r6, r6, r5
   14ee0:	mov	r8, r1
   14ee4:	mov	r9, r2
   14ee8:	bl	10ec4 <calloc@plt-0x20>
   14eec:	asrs	r6, r6, #2
   14ef0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ef4:	mov	r4, #0
   14ef8:	add	r4, r4, #1
   14efc:	ldr	r3, [r5], #4
   14f00:	mov	r2, r9
   14f04:	mov	r1, r8
   14f08:	mov	r0, r7
   14f0c:	blx	r3
   14f10:	cmp	r6, r4
   14f14:	bne	14ef8 <__assert_fail@plt+0x3d08>
   14f18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f1c:	andeq	r1, r1, r8, lsr r0
   14f20:	andeq	r1, r1, r0, lsr r0
   14f24:	bx	lr
   14f28:	ldr	r3, [pc, #12]	; 14f3c <__assert_fail@plt+0x3d4c>
   14f2c:	mov	r1, #0
   14f30:	add	r3, pc, r3
   14f34:	ldr	r2, [r3]
   14f38:	b	11100 <__cxa_atexit@plt>
   14f3c:	andeq	r1, r1, r4, ror #3
   14f40:	mov	r2, r1
   14f44:	mov	r1, r0
   14f48:	mov	r0, #3
   14f4c:	b	111b4 <__xstat64@plt>

Disassembly of section .fini:

00014f50 <.fini>:
   14f50:	push	{r3, lr}
   14f54:	pop	{r3, pc}
