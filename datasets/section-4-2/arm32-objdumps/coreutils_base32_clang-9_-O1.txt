
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010e60 <.init>:
   10e60:	push	{r3, lr}
   10e64:	bl	11144 <__assert_fail@plt+0x48>
   10e68:	pop	{r3, pc}

Disassembly of section .plt:

00010e6c <calloc@plt-0x14>:
   10e6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e70:	ldr	lr, [pc, #4]	; 10e7c <calloc@plt-0x4>
   10e74:	add	lr, pc, lr
   10e78:	ldr	pc, [lr, #8]!
   10e7c:	andeq	r6, r1, r4, lsl #3

00010e80 <calloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #388]!	; 0x184

00010e8c <fputs_unlocked@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #380]!	; 0x17c

00010e98 <raise@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #372]!	; 0x174

00010ea4 <strcmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #364]!	; 0x16c

00010eb0 <posix_fadvise64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #356]!	; 0x164

00010ebc <fflush@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #348]!	; 0x15c

00010ec8 <memmove@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #340]!	; 0x154

00010ed4 <free@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #332]!	; 0x14c

00010ee0 <_exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #324]!	; 0x144

00010eec <memcpy@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #316]!	; 0x13c

00010ef8 <mbsinit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #308]!	; 0x134

00010f04 <fwrite_unlocked@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #300]!	; 0x12c

00010f10 <fputc_unlocked@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #292]!	; 0x124

00010f1c <dcgettext@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #284]!	; 0x11c

00010f28 <realloc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #276]!	; 0x114

00010f34 <textdomain@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #268]!	; 0x10c

00010f40 <iswprint@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #260]!	; 0x104

00010f4c <fwrite@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #252]!	; 0xfc

00010f58 <lseek64@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #244]!	; 0xf4

00010f64 <__ctype_get_mb_cur_max@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #236]!	; 0xec

00010f70 <__fpending@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #228]!	; 0xe4

00010f7c <ferror_unlocked@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #220]!	; 0xdc

00010f88 <mbrtowc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #212]!	; 0xd4

00010f94 <error@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #204]!	; 0xcc

00010fa0 <malloc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #196]!	; 0xc4

00010fac <__libc_start_main@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #188]!	; 0xbc

00010fb8 <__freading@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #180]!	; 0xb4

00010fc4 <__gmon_start__@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #172]!	; 0xac

00010fd0 <getopt_long@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #164]!	; 0xa4

00010fdc <__ctype_b_loc@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #156]!	; 0x9c

00010fe8 <exit@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #148]!	; 0x94

00010ff4 <bcmp@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #140]!	; 0x8c

00011000 <strlen@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #132]!	; 0x84

0001100c <strchr@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #124]!	; 0x7c

00011018 <__errno_location@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #116]!	; 0x74

00011024 <__cxa_atexit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #108]!	; 0x6c

00011030 <memset@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #100]!	; 0x64

0001103c <__printf_chk@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #92]!	; 0x5c

00011048 <fileno@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #84]!	; 0x54

00011054 <__fprintf_chk@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #76]!	; 0x4c

00011060 <memchr@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #68]!	; 0x44

0001106c <strtoimax@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #60]!	; 0x3c

00011078 <fclose@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #52]!	; 0x34

00011084 <fseeko64@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #44]!	; 0x2c

00011090 <setlocale@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #36]!	; 0x24

0001109c <strrchr@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #28]!

000110a8 <nl_langinfo@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #20]!

000110b4 <fopen64@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #12]!

000110c0 <bindtextdomain@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4]!

000110cc <fread_unlocked@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #4092]!	; 0xffc

000110d8 <strncmp@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4084]!	; 0xff4

000110e4 <abort@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4076]!	; 0xfec

000110f0 <feof_unlocked@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110fc <__assert_fail@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #4060]!	; 0xfdc

Disassembly of section .text:

00011108 <.text>:
   11108:	mov	fp, #0
   1110c:	mov	lr, #0
   11110:	pop	{r1}		; (ldr r1, [sp], #4)
   11114:	mov	r2, sp
   11118:	push	{r2}		; (str r2, [sp, #-4]!)
   1111c:	push	{r0}		; (str r0, [sp, #-4]!)
   11120:	ldr	ip, [pc, #16]	; 11138 <__assert_fail@plt+0x3c>
   11124:	push	{ip}		; (str ip, [sp, #-4]!)
   11128:	ldr	r0, [pc, #12]	; 1113c <__assert_fail@plt+0x40>
   1112c:	ldr	r3, [pc, #12]	; 11140 <__assert_fail@plt+0x44>
   11130:	bl	10fac <__libc_start_main@plt>
   11134:	bl	110e4 <abort@plt>
   11138:			; <UNDEFINED> instruction: 0x00015db0
   1113c:	andeq	r1, r1, r4, lsr #10
   11140:	andeq	r5, r1, r0, asr sp
   11144:	ldr	r3, [pc, #20]	; 11160 <__assert_fail@plt+0x64>
   11148:	ldr	r2, [pc, #20]	; 11164 <__assert_fail@plt+0x68>
   1114c:	add	r3, pc, r3
   11150:	ldr	r2, [r3, r2]
   11154:	cmp	r2, #0
   11158:	bxeq	lr
   1115c:	b	10fc4 <__gmon_start__@plt>
   11160:	andeq	r5, r1, ip, lsr #29
   11164:	andeq	r0, r0, r4, ror #1
   11168:	ldr	r0, [pc, #24]	; 11188 <__assert_fail@plt+0x8c>
   1116c:	ldr	r3, [pc, #24]	; 1118c <__assert_fail@plt+0x90>
   11170:	cmp	r3, r0
   11174:	bxeq	lr
   11178:	ldr	r3, [pc, #16]	; 11190 <__assert_fail@plt+0x94>
   1117c:	cmp	r3, #0
   11180:	bxeq	lr
   11184:	bx	r3
   11188:	andeq	r7, r2, r8, lsr r1
   1118c:	andeq	r7, r2, r8, lsr r1
   11190:	andeq	r0, r0, r0
   11194:	ldr	r0, [pc, #36]	; 111c0 <__assert_fail@plt+0xc4>
   11198:	ldr	r1, [pc, #36]	; 111c4 <__assert_fail@plt+0xc8>
   1119c:	sub	r1, r1, r0
   111a0:	asr	r1, r1, #2
   111a4:	add	r1, r1, r1, lsr #31
   111a8:	asrs	r1, r1, #1
   111ac:	bxeq	lr
   111b0:	ldr	r3, [pc, #16]	; 111c8 <__assert_fail@plt+0xcc>
   111b4:	cmp	r3, #0
   111b8:	bxeq	lr
   111bc:	bx	r3
   111c0:	andeq	r7, r2, r8, lsr r1
   111c4:	andeq	r7, r2, r8, lsr r1
   111c8:	andeq	r0, r0, r0
   111cc:	push	{r4, lr}
   111d0:	ldr	r4, [pc, #24]	; 111f0 <__assert_fail@plt+0xf4>
   111d4:	ldrb	r3, [r4]
   111d8:	cmp	r3, #0
   111dc:	popne	{r4, pc}
   111e0:	bl	11168 <__assert_fail@plt+0x6c>
   111e4:	mov	r3, #1
   111e8:	strb	r3, [r4]
   111ec:	pop	{r4, pc}
   111f0:	andeq	r7, r2, ip, asr r1
   111f4:	b	11194 <__assert_fail@plt+0x98>
   111f8:	push	{fp, lr}
   111fc:	mov	fp, sp
   11200:	mov	r4, r0
   11204:	cmp	r0, #0
   11208:	bne	112f8 <__assert_fail@plt+0x1fc>
   1120c:	movw	r1, #24067	; 0x5e03
   11210:	movt	r1, #1
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	bl	10f1c <dcgettext@plt>
   11220:	mov	r1, r0
   11224:	movw	r0, #29032	; 0x7168
   11228:	movt	r0, #2
   1122c:	ldr	r2, [r0]
   11230:	mov	r0, #1
   11234:	bl	1103c <__printf_chk@plt>
   11238:	movw	r1, #24097	; 0x5e21
   1123c:	movt	r1, #1
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	bl	10f1c <dcgettext@plt>
   1124c:	mov	r1, r0
   11250:	mov	r0, #1
   11254:	mov	r2, #32
   11258:	bl	1103c <__printf_chk@plt>
   1125c:	bl	1133c <__assert_fail@plt+0x240>
   11260:	bl	1136c <__assert_fail@plt+0x270>
   11264:	movw	r1, #24167	; 0x5e67
   11268:	movt	r1, #1
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	bl	10f1c <dcgettext@plt>
   11278:	movw	r5, #29012	; 0x7154
   1127c:	movt	r5, #2
   11280:	ldr	r1, [r5]
   11284:	bl	10e8c <fputs_unlocked@plt>
   11288:	movw	r1, #24409	; 0x5f59
   1128c:	movt	r1, #1
   11290:	mov	r0, #0
   11294:	mov	r2, #5
   11298:	bl	10f1c <dcgettext@plt>
   1129c:	ldr	r1, [r5]
   112a0:	bl	10e8c <fputs_unlocked@plt>
   112a4:	movw	r1, #24454	; 0x5f86
   112a8:	movt	r1, #1
   112ac:	mov	r0, #0
   112b0:	mov	r2, #5
   112b4:	bl	10f1c <dcgettext@plt>
   112b8:	ldr	r1, [r5]
   112bc:	bl	10e8c <fputs_unlocked@plt>
   112c0:	movw	r1, #24508	; 0x5fbc
   112c4:	movt	r1, #1
   112c8:	mov	r0, #0
   112cc:	mov	r2, #5
   112d0:	bl	10f1c <dcgettext@plt>
   112d4:	mov	r1, r0
   112d8:	movw	r2, #24776	; 0x60c8
   112dc:	movt	r2, #1
   112e0:	mov	r0, #1
   112e4:	mov	r3, r2
   112e8:	bl	1103c <__printf_chk@plt>
   112ec:	bl	1139c <__assert_fail@plt+0x2a0>
   112f0:	mov	r0, r4
   112f4:	bl	10fe8 <exit@plt>
   112f8:	movw	r0, #29000	; 0x7148
   112fc:	movt	r0, #2
   11300:	ldr	r5, [r0]
   11304:	movw	r1, #24028	; 0x5ddc
   11308:	movt	r1, #1
   1130c:	mov	r0, #0
   11310:	mov	r2, #5
   11314:	bl	10f1c <dcgettext@plt>
   11318:	mov	r2, r0
   1131c:	movw	r0, #29032	; 0x7168
   11320:	movt	r0, #2
   11324:	ldr	r3, [r0]
   11328:	mov	r0, r5
   1132c:	mov	r1, #1
   11330:	bl	11054 <__fprintf_chk@plt>
   11334:	mov	r0, r4
   11338:	bl	10fe8 <exit@plt>
   1133c:	push	{fp, lr}
   11340:	mov	fp, sp
   11344:	movw	r1, #24887	; 0x6137
   11348:	movt	r1, #1
   1134c:	mov	r0, #0
   11350:	mov	r2, #5
   11354:	bl	10f1c <dcgettext@plt>
   11358:	movw	r1, #29012	; 0x7154
   1135c:	movt	r1, #2
   11360:	ldr	r1, [r1]
   11364:	pop	{fp, lr}
   11368:	b	10e8c <fputs_unlocked@plt>
   1136c:	push	{fp, lr}
   11370:	mov	fp, sp
   11374:	movw	r1, #24943	; 0x616f
   11378:	movt	r1, #1
   1137c:	mov	r0, #0
   11380:	mov	r2, #5
   11384:	bl	10f1c <dcgettext@plt>
   11388:	movw	r1, #29012	; 0x7154
   1138c:	movt	r1, #2
   11390:	ldr	r1, [r1]
   11394:	pop	{fp, lr}
   11398:	b	10e8c <fputs_unlocked@plt>
   1139c:	push	{r4, r5, r6, sl, fp, lr}
   113a0:	add	fp, sp, #16
   113a4:	sub	sp, sp, #56	; 0x38
   113a8:	movw	r0, #25528	; 0x63b8
   113ac:	movt	r0, #1
   113b0:	add	r1, r0, #32
   113b4:	mov	r2, #48	; 0x30
   113b8:	vld1.64	{d16-d17}, [r1]
   113bc:	mov	r6, sp
   113c0:	add	r1, r6, #32
   113c4:	add	r3, r0, #16
   113c8:	vld1.64	{d18-d19}, [r0], r2
   113cc:	vld1.64	{d20-d21}, [r3]
   113d0:	vldr	d22, [r0]
   113d4:	vst1.64	{d16-d17}, [r1]
   113d8:	add	r0, r6, #16
   113dc:	vst1.64	{d20-d21}, [r0]
   113e0:	mov	r0, r6
   113e4:	vst1.64	{d18-d19}, [r0], r2
   113e8:	vstr	d22, [r0]
   113ec:	ldr	r1, [sp]
   113f0:	cmp	r1, #0
   113f4:	movw	r4, #24776	; 0x60c8
   113f8:	movt	r4, #1
   113fc:	beq	11424 <__assert_fail@plt+0x328>
   11400:	mov	r6, sp
   11404:	movw	r5, #24776	; 0x60c8
   11408:	movt	r5, #1
   1140c:	mov	r0, r5
   11410:	bl	10ea4 <strcmp@plt>
   11414:	cmp	r0, #0
   11418:	ldrne	r1, [r6, #8]!
   1141c:	cmpne	r1, #0
   11420:	bne	1140c <__assert_fail@plt+0x310>
   11424:	ldr	r5, [r6, #4]
   11428:	movw	r1, #25113	; 0x6219
   1142c:	movt	r1, #1
   11430:	mov	r0, #0
   11434:	mov	r2, #5
   11438:	bl	10f1c <dcgettext@plt>
   1143c:	mov	r1, r0
   11440:	movw	r2, #24837	; 0x6105
   11444:	movt	r2, #1
   11448:	movw	r3, #25136	; 0x6230
   1144c:	movt	r3, #1
   11450:	mov	r0, #1
   11454:	bl	1103c <__printf_chk@plt>
   11458:	cmp	r5, #0
   1145c:	moveq	r5, r4
   11460:	mov	r0, #5
   11464:	mov	r1, #0
   11468:	bl	11090 <setlocale@plt>
   1146c:	cmp	r0, #0
   11470:	beq	114b0 <__assert_fail@plt+0x3b4>
   11474:	movw	r1, #25176	; 0x6258
   11478:	movt	r1, #1
   1147c:	mov	r2, #3
   11480:	bl	110d8 <strncmp@plt>
   11484:	cmp	r0, #0
   11488:	beq	114b0 <__assert_fail@plt+0x3b4>
   1148c:	movw	r1, #25180	; 0x625c
   11490:	movt	r1, #1
   11494:	mov	r0, #0
   11498:	mov	r2, #5
   1149c:	bl	10f1c <dcgettext@plt>
   114a0:	movw	r1, #29012	; 0x7154
   114a4:	movt	r1, #2
   114a8:	ldr	r1, [r1]
   114ac:	bl	10e8c <fputs_unlocked@plt>
   114b0:	movw	r1, #25251	; 0x62a3
   114b4:	movt	r1, #1
   114b8:	mov	r0, #0
   114bc:	mov	r2, #5
   114c0:	bl	10f1c <dcgettext@plt>
   114c4:	mov	r1, r0
   114c8:	movw	r2, #25136	; 0x6230
   114cc:	movt	r2, #1
   114d0:	mov	r0, #1
   114d4:	mov	r3, r4
   114d8:	bl	1103c <__printf_chk@plt>
   114dc:	movw	r0, #25046	; 0x61d6
   114e0:	movt	r0, #1
   114e4:	movw	r6, #25328	; 0x62f0
   114e8:	movt	r6, #1
   114ec:	cmp	r5, r4
   114f0:	moveq	r6, r0
   114f4:	movw	r1, #25278	; 0x62be
   114f8:	movt	r1, #1
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	bl	10f1c <dcgettext@plt>
   11508:	mov	r1, r0
   1150c:	mov	r0, #1
   11510:	mov	r2, r5
   11514:	mov	r3, r6
   11518:	sub	sp, fp, #16
   1151c:	pop	{r4, r5, r6, sl, fp, lr}
   11520:	b	1103c <__printf_chk@plt>
   11524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11528:	add	fp, sp, #28
   1152c:	sub	sp, sp, #28
   11530:	mov	r4, r1
   11534:	mov	r6, r0
   11538:	ldr	r0, [r1]
   1153c:	bl	12a8c <__assert_fail@plt+0x1990>
   11540:	movw	r1, #25328	; 0x62f0
   11544:	movt	r1, #1
   11548:	mov	r0, #6
   1154c:	bl	11090 <setlocale@plt>
   11550:	movw	r5, #24841	; 0x6109
   11554:	movt	r5, #1
   11558:	movw	r1, #24783	; 0x60cf
   1155c:	movt	r1, #1
   11560:	mov	r0, r5
   11564:	bl	110c0 <bindtextdomain@plt>
   11568:	mov	r0, r5
   1156c:	bl	10f34 <textdomain@plt>
   11570:	movw	r0, #10044	; 0x273c
   11574:	movt	r0, #1
   11578:	bl	15db4 <__assert_fail@plt+0x4cb8>
   1157c:	mov	r5, #76	; 0x4c
   11580:	mov	r8, #0
   11584:	movw	r9, #24807	; 0x60e7
   11588:	movt	r9, #1
   1158c:	movw	r7, #25432	; 0x6358
   11590:	movt	r7, #1
   11594:	mov	sl, #0
   11598:	mov	r0, #0
   1159c:	str	r0, [sp, #12]
   115a0:	str	r8, [sp]
   115a4:	mov	r0, r6
   115a8:	mov	r1, r4
   115ac:	mov	r2, r9
   115b0:	mov	r3, r7
   115b4:	bl	10fd0 <getopt_long@plt>
   115b8:	cmp	r0, #99	; 0x63
   115bc:	ble	11644 <__assert_fail@plt+0x548>
   115c0:	cmp	r0, #100	; 0x64
   115c4:	beq	11634 <__assert_fail@plt+0x538>
   115c8:	cmp	r0, #105	; 0x69
   115cc:	beq	1163c <__assert_fail@plt+0x540>
   115d0:	cmp	r0, #119	; 0x77
   115d4:	bne	11828 <__assert_fail@plt+0x72c>
   115d8:	movw	r0, #29016	; 0x7158
   115dc:	movt	r0, #2
   115e0:	ldr	r0, [r0]
   115e4:	movw	r1, #25328	; 0x62f0
   115e8:	movt	r1, #1
   115ec:	str	r1, [sp]
   115f0:	mov	r1, #0
   115f4:	mov	r2, #10
   115f8:	add	r3, sp, #16
   115fc:	bl	14f70 <__assert_fail@plt+0x3e74>
   11600:	cmp	r0, #1
   11604:	bhi	117e4 <__assert_fail@plt+0x6e8>
   11608:	ldr	r1, [sp, #20]
   1160c:	cmn	r1, #1
   11610:	ble	117e4 <__assert_fail@plt+0x6e8>
   11614:	ldr	r2, [sp, #16]
   11618:	mvn	r3, #-2147483648	; 0x80000000
   1161c:	subs	r3, r3, r2
   11620:	rscs	r1, r1, #0
   11624:	movwlt	r2, #0
   11628:	subs	r5, r0, #1
   1162c:	movne	r5, r2
   11630:	b	115a0 <__assert_fail@plt+0x4a4>
   11634:	mov	sl, #1
   11638:	b	115a0 <__assert_fail@plt+0x4a4>
   1163c:	mov	r0, #1
   11640:	b	1159c <__assert_fail@plt+0x4a0>
   11644:	cmn	r0, #3
   11648:	beq	1165c <__assert_fail@plt+0x560>
   1164c:	cmn	r0, #2
   11650:	bne	116a4 <__assert_fail@plt+0x5a8>
   11654:	mov	r0, #0
   11658:	bl	111f8 <__assert_fail@plt+0xfc>
   1165c:	movw	r0, #28912	; 0x70f0
   11660:	movt	r0, #2
   11664:	ldr	r3, [r0]
   11668:	movw	r0, #29012	; 0x7154
   1166c:	movt	r0, #2
   11670:	ldr	r0, [r0]
   11674:	mov	r1, #0
   11678:	movw	r2, #24851	; 0x6113
   1167c:	movt	r2, #1
   11680:	str	r2, [sp]
   11684:	str	r1, [sp, #4]
   11688:	movw	r1, #24776	; 0x60c8
   1168c:	movt	r1, #1
   11690:	movw	r2, #24837	; 0x6105
   11694:	movt	r2, #1
   11698:	bl	14a94 <__assert_fail@plt+0x3998>
   1169c:	mov	r0, #0
   116a0:	bl	10fe8 <exit@plt>
   116a4:	cmn	r0, #1
   116a8:	bne	11828 <__assert_fail@plt+0x72c>
   116ac:	movw	r7, #28992	; 0x7140
   116b0:	movt	r7, #2
   116b4:	ldr	r0, [r7]
   116b8:	sub	r1, r6, r0
   116bc:	cmp	r1, #2
   116c0:	blt	11708 <__assert_fail@plt+0x60c>
   116c4:	movw	r1, #24867	; 0x6123
   116c8:	movt	r1, #1
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	bl	10f1c <dcgettext@plt>
   116d8:	mov	r5, r0
   116dc:	ldr	r0, [r7]
   116e0:	add	r0, r4, r0, lsl #2
   116e4:	ldr	r0, [r0, #4]
   116e8:	bl	14280 <__assert_fail@plt+0x3184>
   116ec:	mov	r3, r0
   116f0:	mov	r0, #0
   116f4:	mov	r1, #0
   116f8:	mov	r2, r5
   116fc:	bl	10f94 <error@plt>
   11700:	mov	r0, #1
   11704:	bl	111f8 <__assert_fail@plt+0xfc>
   11708:	cmp	r0, r6
   1170c:	bge	11718 <__assert_fail@plt+0x61c>
   11710:	ldr	r4, [r4, r0, lsl #2]
   11714:	b	11720 <__assert_fail@plt+0x624>
   11718:	movw	r4, #25953	; 0x6561
   1171c:	movt	r4, #1
   11720:	movw	r1, #25953	; 0x6561
   11724:	movt	r1, #1
   11728:	mov	r0, r4
   1172c:	bl	10ea4 <strcmp@plt>
   11730:	cmp	r0, #0
   11734:	bne	11754 <__assert_fail@plt+0x658>
   11738:	mov	r0, #0
   1173c:	mov	r1, #0
   11740:	bl	14f6c <__assert_fail@plt+0x3e70>
   11744:	movw	r0, #29008	; 0x7150
   11748:	movt	r0, #2
   1174c:	ldr	r6, [r0]
   11750:	b	117a0 <__assert_fail@plt+0x6a4>
   11754:	movw	r1, #24884	; 0x6134
   11758:	movt	r1, #1
   1175c:	mov	r0, r4
   11760:	bl	110b4 <fopen64@plt>
   11764:	mov	r6, r0
   11768:	cmp	r0, #0
   1176c:	bne	117a0 <__assert_fail@plt+0x6a4>
   11770:	bl	11018 <__errno_location@plt>
   11774:	ldr	r5, [r0]
   11778:	mov	r0, #0
   1177c:	mov	r1, #3
   11780:	mov	r2, r4
   11784:	bl	14140 <__assert_fail@plt+0x3044>
   11788:	mov	r3, r0
   1178c:	movw	r2, #24816	; 0x60f0
   11790:	movt	r2, #1
   11794:	mov	r0, #1
   11798:	mov	r1, r5
   1179c:	bl	10f94 <error@plt>
   117a0:	mov	r0, r6
   117a4:	mov	r1, #2
   117a8:	bl	12828 <__assert_fail@plt+0x172c>
   117ac:	movw	r0, #29012	; 0x7154
   117b0:	movt	r0, #2
   117b4:	ldr	r2, [r0]
   117b8:	tst	sl, #1
   117bc:	beq	117d4 <__assert_fail@plt+0x6d8>
   117c0:	ldr	r0, [sp, #12]
   117c4:	and	r3, r0, #1
   117c8:	mov	r0, r6
   117cc:	mov	r1, r4
   117d0:	bl	11830 <__assert_fail@plt+0x734>
   117d4:	mov	r0, r6
   117d8:	mov	r1, r4
   117dc:	mov	r3, r5
   117e0:	bl	11a50 <__assert_fail@plt+0x954>
   117e4:	movw	r1, #24819	; 0x60f3
   117e8:	movt	r1, #1
   117ec:	mov	r0, #0
   117f0:	mov	r2, #5
   117f4:	bl	10f1c <dcgettext@plt>
   117f8:	mov	r4, r0
   117fc:	movw	r0, #29016	; 0x7158
   11800:	movt	r0, #2
   11804:	ldr	r0, [r0]
   11808:	bl	14280 <__assert_fail@plt+0x3184>
   1180c:	str	r0, [sp]
   11810:	movw	r2, #24812	; 0x60ec
   11814:	movt	r2, #1
   11818:	mov	r0, #1
   1181c:	mov	r1, #0
   11820:	mov	r3, r4
   11824:	bl	10f94 <error@plt>
   11828:	mov	r0, #1
   1182c:	bl	111f8 <__assert_fail@plt+0xfc>
   11830:	push	{fp, lr}
   11834:	mov	fp, sp
   11838:	sub	sp, sp, #40	; 0x28
   1183c:	add	ip, sp, #8
   11840:	stm	ip, {r1, r2, r3}
   11844:	mov	r8, r0
   11848:	mov	r0, #8192	; 0x2000
   1184c:	bl	14b9c <__assert_fail@plt+0x3aa0>
   11850:	mov	r4, r0
   11854:	mov	r0, #5120	; 0x1400
   11858:	bl	14b9c <__assert_fail@plt+0x3aa0>
   1185c:	mov	r9, r0
   11860:	sub	r0, fp, #12
   11864:	bl	12100 <__assert_fail@plt+0x1004>
   11868:	mov	sl, #0
   1186c:	str	r8, [sp, #20]
   11870:	b	11888 <__assert_fail@plt+0x78c>
   11874:	mov	r0, r8
   11878:	bl	110f0 <feof_unlocked@plt>
   1187c:	mov	sl, #0
   11880:	cmp	r0, #0
   11884:	bne	11a44 <__assert_fail@plt+0x948>
   11888:	add	r5, r4, sl
   1188c:	rsb	r2, sl, #8192	; 0x2000
   11890:	mov	r0, r5
   11894:	mov	r1, #1
   11898:	mov	r3, r8
   1189c:	bl	110cc <fread_unlocked@plt>
   118a0:	mov	r8, r0
   118a4:	cmp	r0, #1
   118a8:	blt	11910 <__assert_fail@plt+0x814>
   118ac:	ldr	r0, [sp, #16]
   118b0:	cmp	r0, #0
   118b4:	beq	11910 <__assert_fail@plt+0x814>
   118b8:	mov	r6, #0
   118bc:	add	r0, r6, sl
   118c0:	ldrb	r7, [r4, r0]
   118c4:	mov	r0, r7
   118c8:	bl	120d4 <__assert_fail@plt+0xfd8>
   118cc:	cmp	r0, #0
   118d0:	bne	11904 <__assert_fail@plt+0x808>
   118d4:	cmp	r7, #61	; 0x3d
   118d8:	beq	11904 <__assert_fail@plt+0x808>
   118dc:	sub	r8, r8, #1
   118e0:	sub	r2, r8, r6
   118e4:	add	r0, r5, r6
   118e8:	add	r1, r0, #1
   118ec:	bl	10ec8 <memmove@plt>
   118f0:	cmp	r8, #1
   118f4:	blt	11910 <__assert_fail@plt+0x814>
   118f8:	cmp	r6, r8
   118fc:	blt	118bc <__assert_fail@plt+0x7c0>
   11900:	b	11910 <__assert_fail@plt+0x814>
   11904:	add	r6, r6, #1
   11908:	cmp	r8, #1
   1190c:	bge	118f8 <__assert_fail@plt+0x7fc>
   11910:	ldr	r0, [sp, #20]
   11914:	bl	10f7c <ferror_unlocked@plt>
   11918:	cmp	r0, #0
   1191c:	bne	11a30 <__assert_fail@plt+0x934>
   11920:	add	sl, r8, sl
   11924:	cmp	sl, #8192	; 0x2000
   11928:	ldr	r8, [sp, #20]
   1192c:	bge	11940 <__assert_fail@plt+0x844>
   11930:	mov	r0, r8
   11934:	bl	110f0 <feof_unlocked@plt>
   11938:	cmp	r0, #0
   1193c:	beq	11888 <__assert_fail@plt+0x78c>
   11940:	mov	r0, r8
   11944:	bl	110f0 <feof_unlocked@plt>
   11948:	mov	r6, #0
   1194c:	ldr	r5, [sp, #12]
   11950:	cmp	r6, #1
   11954:	bne	11964 <__assert_fail@plt+0x868>
   11958:	ldr	r0, [fp, #-12]
   1195c:	cmp	r0, #0
   11960:	beq	11874 <__assert_fail@plt+0x778>
   11964:	mov	r0, #5120	; 0x1400
   11968:	str	r0, [fp, #-16]
   1196c:	sub	r0, fp, #16
   11970:	str	r0, [sp]
   11974:	cmp	r6, #0
   11978:	mov	r2, #0
   1197c:	moveq	r2, sl
   11980:	sub	r0, fp, #12
   11984:	mov	r1, r4
   11988:	mov	r3, r9
   1198c:	bl	1210c <__assert_fail@plt+0x1010>
   11990:	mov	r7, r0
   11994:	ldr	r2, [fp, #-16]
   11998:	mov	r0, r9
   1199c:	mov	r1, #1
   119a0:	mov	r3, r5
   119a4:	bl	10f04 <fwrite_unlocked@plt>
   119a8:	ldr	r1, [fp, #-16]
   119ac:	cmp	r0, r1
   119b0:	bcc	119e0 <__assert_fail@plt+0x8e4>
   119b4:	cmp	r7, #0
   119b8:	beq	11a0c <__assert_fail@plt+0x910>
   119bc:	mov	r0, r8
   119c0:	bl	110f0 <feof_unlocked@plt>
   119c4:	cmp	r0, #0
   119c8:	mov	r0, #2
   119cc:	movweq	r0, #1
   119d0:	add	r6, r6, #1
   119d4:	cmp	r6, r0
   119d8:	bcc	11950 <__assert_fail@plt+0x854>
   119dc:	b	11874 <__assert_fail@plt+0x778>
   119e0:	bl	11018 <__errno_location@plt>
   119e4:	ldr	r4, [r0]
   119e8:	movw	r1, #25380	; 0x6324
   119ec:	movt	r1, #1
   119f0:	mov	r0, #0
   119f4:	mov	r2, #5
   119f8:	bl	10f1c <dcgettext@plt>
   119fc:	mov	r2, r0
   11a00:	mov	r0, #1
   11a04:	mov	r1, r4
   11a08:	bl	10f94 <error@plt>
   11a0c:	movw	r1, #25392	; 0x6330
   11a10:	movt	r1, #1
   11a14:	mov	r0, #0
   11a18:	mov	r2, #5
   11a1c:	bl	10f1c <dcgettext@plt>
   11a20:	mov	r2, r0
   11a24:	mov	r0, #1
   11a28:	mov	r1, #0
   11a2c:	bl	10f94 <error@plt>
   11a30:	bl	11018 <__errno_location@plt>
   11a34:	ldr	r4, [r0]
   11a38:	movw	r1, #25369	; 0x6319
   11a3c:	movt	r1, #1
   11a40:	b	119f0 <__assert_fail@plt+0x8f4>
   11a44:	mov	r0, r8
   11a48:	ldr	r1, [sp, #8]
   11a4c:	bl	11bd4 <__assert_fail@plt+0xad8>
   11a50:	push	{fp, lr}
   11a54:	mov	fp, sp
   11a58:	sub	sp, sp, #16
   11a5c:	mov	sl, r3
   11a60:	mov	r9, r2
   11a64:	str	r1, [sp, #8]
   11a68:	mov	r5, r0
   11a6c:	mov	r4, #0
   11a70:	str	r4, [fp, #-4]
   11a74:	mov	r0, #30720	; 0x7800
   11a78:	bl	14b9c <__assert_fail@plt+0x3aa0>
   11a7c:	mov	r6, r0
   11a80:	mov	r0, #49152	; 0xc000
   11a84:	bl	14b9c <__assert_fail@plt+0x3aa0>
   11a88:	mov	r7, r0
   11a8c:	add	r0, r6, r4
   11a90:	rsb	r2, r4, #30720	; 0x7800
   11a94:	mov	r1, #1
   11a98:	mov	r3, r5
   11a9c:	bl	110cc <fread_unlocked@plt>
   11aa0:	add	r4, r0, r4
   11aa4:	mov	r0, r5
   11aa8:	bl	110f0 <feof_unlocked@plt>
   11aac:	cmp	r0, #0
   11ab0:	beq	11b34 <__assert_fail@plt+0xa38>
   11ab4:	cmp	r4, #1
   11ab8:	blt	11b04 <__assert_fail@plt+0xa08>
   11abc:	add	r0, r4, #4
   11ac0:	movw	r1, #26215	; 0x6667
   11ac4:	movt	r1, #26214	; 0x6666
   11ac8:	smmul	r0, r0, r1
   11acc:	lsr	r1, r0, #1
   11ad0:	add	r0, r1, r0, lsr #31
   11ad4:	lsl	r8, r0, #3
   11ad8:	mov	r0, r6
   11adc:	mov	r1, r4
   11ae0:	mov	r2, r7
   11ae4:	mov	r3, r8
   11ae8:	bl	11d6c <__assert_fail@plt+0xc70>
   11aec:	str	r9, [sp]
   11af0:	mov	r0, r7
   11af4:	mov	r1, r8
   11af8:	mov	r2, sl
   11afc:	sub	r3, fp, #4
   11b00:	bl	11c64 <__assert_fail@plt+0xb68>
   11b04:	mov	r0, r5
   11b08:	bl	110f0 <feof_unlocked@plt>
   11b0c:	cmp	r0, #0
   11b10:	bne	11b50 <__assert_fail@plt+0xa54>
   11b14:	mov	r0, r5
   11b18:	bl	10f7c <ferror_unlocked@plt>
   11b1c:	cmp	r4, #30720	; 0x7800
   11b20:	bne	11b50 <__assert_fail@plt+0xa54>
   11b24:	cmp	r0, #0
   11b28:	mov	r4, #0
   11b2c:	beq	11a8c <__assert_fail@plt+0x990>
   11b30:	b	11b50 <__assert_fail@plt+0xa54>
   11b34:	mov	r0, r5
   11b38:	bl	10f7c <ferror_unlocked@plt>
   11b3c:	cmp	r4, #30720	; 0x7800
   11b40:	bge	11ab4 <__assert_fail@plt+0x9b8>
   11b44:	cmp	r0, #0
   11b48:	beq	11a8c <__assert_fail@plt+0x990>
   11b4c:	b	11ab4 <__assert_fail@plt+0x9b8>
   11b50:	cmp	sl, #0
   11b54:	beq	11b8c <__assert_fail@plt+0xa90>
   11b58:	ldr	r0, [fp, #-4]
   11b5c:	cmp	r0, #1
   11b60:	blt	11b8c <__assert_fail@plt+0xa90>
   11b64:	mov	r0, #10
   11b68:	mov	r1, r9
   11b6c:	bl	10f10 <fputc_unlocked@plt>
   11b70:	cmn	r0, #1
   11b74:	bne	11b8c <__assert_fail@plt+0xa90>
   11b78:	bl	11018 <__errno_location@plt>
   11b7c:	ldr	r4, [r0]
   11b80:	movw	r1, #25380	; 0x6324
   11b84:	movt	r1, #1
   11b88:	b	11bb8 <__assert_fail@plt+0xabc>
   11b8c:	mov	r0, r5
   11b90:	bl	10f7c <ferror_unlocked@plt>
   11b94:	cmp	r0, #0
   11b98:	bne	11ba8 <__assert_fail@plt+0xaac>
   11b9c:	mov	r0, r5
   11ba0:	ldr	r1, [sp, #8]
   11ba4:	bl	11bd4 <__assert_fail@plt+0xad8>
   11ba8:	bl	11018 <__errno_location@plt>
   11bac:	ldr	r4, [r0]
   11bb0:	movw	r1, #25369	; 0x6319
   11bb4:	movt	r1, #1
   11bb8:	mov	r0, #0
   11bbc:	mov	r2, #5
   11bc0:	bl	10f1c <dcgettext@plt>
   11bc4:	mov	r2, r0
   11bc8:	mov	r0, #1
   11bcc:	mov	r1, r4
   11bd0:	bl	10f94 <error@plt>
   11bd4:	push	{fp, lr}
   11bd8:	mov	fp, sp
   11bdc:	mov	r5, r1
   11be0:	bl	12864 <__assert_fail@plt+0x1768>
   11be4:	cmp	r0, #0
   11be8:	bne	11bf4 <__assert_fail@plt+0xaf8>
   11bec:	mov	r0, #0
   11bf0:	bl	10fe8 <exit@plt>
   11bf4:	movw	r1, #25953	; 0x6561
   11bf8:	movt	r1, #1
   11bfc:	mov	r0, r5
   11c00:	bl	10ea4 <strcmp@plt>
   11c04:	mov	r6, r0
   11c08:	bl	11018 <__errno_location@plt>
   11c0c:	ldr	r4, [r0]
   11c10:	cmp	r6, #0
   11c14:	bne	11c3c <__assert_fail@plt+0xb40>
   11c18:	movw	r1, #25406	; 0x633e
   11c1c:	movt	r1, #1
   11c20:	mov	r0, #0
   11c24:	mov	r2, #5
   11c28:	bl	10f1c <dcgettext@plt>
   11c2c:	mov	r2, r0
   11c30:	mov	r0, #1
   11c34:	mov	r1, r4
   11c38:	bl	10f94 <error@plt>
   11c3c:	mov	r0, #0
   11c40:	mov	r1, #3
   11c44:	mov	r2, r5
   11c48:	bl	14140 <__assert_fail@plt+0x3044>
   11c4c:	mov	r3, r0
   11c50:	movw	r2, #24816	; 0x60f0
   11c54:	movt	r2, #1
   11c58:	mov	r0, #1
   11c5c:	mov	r1, r4
   11c60:	bl	10f94 <error@plt>
   11c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c68:	add	fp, sp, #28
   11c6c:	sub	sp, sp, #4
   11c70:	mov	r4, r1
   11c74:	mov	r9, r0
   11c78:	cmp	r2, #0
   11c7c:	beq	11d14 <__assert_fail@plt+0xc18>
   11c80:	cmp	r4, #1
   11c84:	blt	11d38 <__assert_fail@plt+0xc3c>
   11c88:	mov	r6, r3
   11c8c:	mov	r7, r2
   11c90:	movw	r8, #29012	; 0x7154
   11c94:	movt	r8, #2
   11c98:	mov	sl, #0
   11c9c:	b	11ca8 <__assert_fail@plt+0xbac>
   11ca0:	cmp	sl, r4
   11ca4:	bge	11d38 <__assert_fail@plt+0xc3c>
   11ca8:	sub	r5, r4, sl
   11cac:	ldr	r0, [r6]
   11cb0:	sub	r0, r7, r0
   11cb4:	cmp	r0, r5
   11cb8:	movlt	r5, r0
   11cbc:	cmp	r5, #0
   11cc0:	beq	11cf4 <__assert_fail@plt+0xbf8>
   11cc4:	add	r0, r9, sl
   11cc8:	ldr	r3, [r8]
   11ccc:	mov	r1, #1
   11cd0:	mov	r2, r5
   11cd4:	bl	10f04 <fwrite_unlocked@plt>
   11cd8:	cmp	r0, r5
   11cdc:	bcc	11d40 <__assert_fail@plt+0xc44>
   11ce0:	ldr	r0, [r6]
   11ce4:	add	r0, r0, r5
   11ce8:	str	r0, [r6]
   11cec:	add	sl, r5, sl
   11cf0:	b	11ca0 <__assert_fail@plt+0xba4>
   11cf4:	mov	r0, #10
   11cf8:	ldr	r1, [fp, #8]
   11cfc:	bl	10f10 <fputc_unlocked@plt>
   11d00:	cmn	r0, #1
   11d04:	beq	11d40 <__assert_fail@plt+0xc44>
   11d08:	mov	r0, #0
   11d0c:	str	r0, [r6]
   11d10:	b	11ca0 <__assert_fail@plt+0xba4>
   11d14:	movw	r0, #29012	; 0x7154
   11d18:	movt	r0, #2
   11d1c:	ldr	r3, [r0]
   11d20:	mov	r0, r9
   11d24:	mov	r1, #1
   11d28:	mov	r2, r4
   11d2c:	bl	10f04 <fwrite_unlocked@plt>
   11d30:	cmp	r0, r4
   11d34:	bcc	11d40 <__assert_fail@plt+0xc44>
   11d38:	sub	sp, fp, #28
   11d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d40:	bl	11018 <__errno_location@plt>
   11d44:	ldr	r4, [r0]
   11d48:	movw	r1, #25380	; 0x6324
   11d4c:	movt	r1, #1
   11d50:	mov	r0, #0
   11d54:	mov	r2, #5
   11d58:	bl	10f1c <dcgettext@plt>
   11d5c:	mov	r2, r0
   11d60:	mov	r0, #1
   11d64:	mov	r1, r4
   11d68:	bl	10f94 <error@plt>
   11d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d70:	add	fp, sp, #28
   11d74:	sub	sp, sp, #36	; 0x24
   11d78:	str	r2, [sp, #32]
   11d7c:	cmp	r1, #0
   11d80:	cmpne	r3, #0
   11d84:	bne	11da4 <__assert_fail@plt+0xca8>
   11d88:	cmp	r3, #0
   11d8c:	beq	11d9c <__assert_fail@plt+0xca0>
   11d90:	mov	r0, #0
   11d94:	ldr	r1, [sp, #32]
   11d98:	strb	r0, [r1]
   11d9c:	sub	sp, fp, #28
   11da0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11da4:	mov	r6, r1
   11da8:	mov	r9, r0
   11dac:	sub	r0, r3, #7
   11db0:	str	r0, [sp, #4]
   11db4:	sub	r0, r3, #6
   11db8:	str	r0, [sp, #8]
   11dbc:	sub	r0, r3, #5
   11dc0:	str	r0, [sp, #12]
   11dc4:	sub	r0, r3, #4
   11dc8:	str	r0, [sp, #16]
   11dcc:	sub	r0, r3, #3
   11dd0:	str	r0, [sp, #20]
   11dd4:	sub	r0, r3, #2
   11dd8:	str	r0, [sp, #24]
   11ddc:	sub	r0, r3, #1
   11de0:	str	r0, [sp, #28]
   11de4:	sub	r0, r3, #8
   11de8:	str	r0, [sp]
   11dec:	mov	r7, #0
   11df0:	movw	r8, #25599	; 0x63ff
   11df4:	movt	r8, #1
   11df8:	ldrb	r0, [r9]
   11dfc:	bl	1201c <__assert_fail@plt+0xf20>
   11e00:	ldrb	r0, [r8, r0, lsr #3]
   11e04:	ldr	r4, [sp, #32]
   11e08:	strb	r0, [r4, r7]!
   11e0c:	ldr	r0, [sp, #28]
   11e10:	cmp	r0, r7
   11e14:	beq	11d9c <__assert_fail@plt+0xca0>
   11e18:	ldrb	r0, [r9]
   11e1c:	bl	1201c <__assert_fail@plt+0xf20>
   11e20:	lsl	r5, r0, #2
   11e24:	mov	r0, #0
   11e28:	cmp	r6, #1
   11e2c:	beq	11e3c <__assert_fail@plt+0xd40>
   11e30:	ldrb	r0, [r9, #1]
   11e34:	bl	1201c <__assert_fail@plt+0xf20>
   11e38:	lsr	r0, r0, #6
   11e3c:	add	r0, r0, r5
   11e40:	and	r0, r0, #31
   11e44:	ldrb	r0, [r8, r0]
   11e48:	strb	r0, [r4, #1]
   11e4c:	ldr	r0, [sp, #24]
   11e50:	cmp	r0, r7
   11e54:	beq	11d9c <__assert_fail@plt+0xca0>
   11e58:	mov	r0, #61	; 0x3d
   11e5c:	cmp	r6, #1
   11e60:	beq	11e74 <__assert_fail@plt+0xd78>
   11e64:	ldrb	r0, [r9, #1]
   11e68:	bl	1201c <__assert_fail@plt+0xf20>
   11e6c:	ubfx	r0, r0, #1, #5
   11e70:	ldrb	r0, [r8, r0]
   11e74:	strb	r0, [r4, #2]
   11e78:	ldr	r0, [sp, #20]
   11e7c:	cmp	r0, r7
   11e80:	beq	11d9c <__assert_fail@plt+0xca0>
   11e84:	cmp	r6, #1
   11e88:	beq	11eb0 <__assert_fail@plt+0xdb4>
   11e8c:	ldrb	r0, [r9, #1]
   11e90:	bl	1201c <__assert_fail@plt+0xf20>
   11e94:	subs	r6, r6, #2
   11e98:	lsl	r5, r0, #4
   11e9c:	beq	11ebc <__assert_fail@plt+0xdc0>
   11ea0:	ldrb	r0, [r9, #2]
   11ea4:	bl	1201c <__assert_fail@plt+0xf20>
   11ea8:	lsr	r0, r0, #4
   11eac:	b	11ec0 <__assert_fail@plt+0xdc4>
   11eb0:	mov	r0, #61	; 0x3d
   11eb4:	mov	r6, #0
   11eb8:	b	11ecc <__assert_fail@plt+0xdd0>
   11ebc:	mov	r0, #0
   11ec0:	add	r0, r0, r5
   11ec4:	and	r0, r0, #31
   11ec8:	ldrb	r0, [r8, r0]
   11ecc:	strb	r0, [r4, #3]
   11ed0:	ldr	r0, [sp, #16]
   11ed4:	cmp	r0, r7
   11ed8:	beq	11d9c <__assert_fail@plt+0xca0>
   11edc:	cmp	r6, #0
   11ee0:	beq	11f08 <__assert_fail@plt+0xe0c>
   11ee4:	ldrb	r0, [r9, #2]
   11ee8:	bl	1201c <__assert_fail@plt+0xf20>
   11eec:	subs	r6, r6, #1
   11ef0:	lsl	r5, r0, #1
   11ef4:	beq	11f14 <__assert_fail@plt+0xe18>
   11ef8:	ldrb	r0, [r9, #3]
   11efc:	bl	1201c <__assert_fail@plt+0xf20>
   11f00:	lsr	r0, r0, #7
   11f04:	b	11f18 <__assert_fail@plt+0xe1c>
   11f08:	mov	r0, #61	; 0x3d
   11f0c:	mov	r6, #0
   11f10:	b	11f24 <__assert_fail@plt+0xe28>
   11f14:	mov	r0, #0
   11f18:	add	r0, r0, r5
   11f1c:	and	r0, r0, #31
   11f20:	ldrb	r0, [r8, r0]
   11f24:	strb	r0, [r4, #4]
   11f28:	ldr	r0, [sp, #12]
   11f2c:	cmp	r0, r7
   11f30:	beq	11d9c <__assert_fail@plt+0xca0>
   11f34:	cmp	r6, #0
   11f38:	beq	11f50 <__assert_fail@plt+0xe54>
   11f3c:	ldrb	r0, [r9, #3]
   11f40:	bl	1201c <__assert_fail@plt+0xf20>
   11f44:	ubfx	r0, r0, #2, #5
   11f48:	ldrb	r0, [r8, r0]
   11f4c:	b	11f54 <__assert_fail@plt+0xe58>
   11f50:	mov	r0, #61	; 0x3d
   11f54:	strb	r0, [r4, #5]
   11f58:	ldr	r0, [sp, #8]
   11f5c:	cmp	r0, r7
   11f60:	beq	11d9c <__assert_fail@plt+0xca0>
   11f64:	cmp	r6, #0
   11f68:	beq	11f90 <__assert_fail@plt+0xe94>
   11f6c:	ldrb	r0, [r9, #3]
   11f70:	bl	1201c <__assert_fail@plt+0xf20>
   11f74:	subs	sl, r6, #1
   11f78:	lsl	r5, r0, #3
   11f7c:	beq	11f9c <__assert_fail@plt+0xea0>
   11f80:	ldrb	r0, [r9, #4]
   11f84:	bl	1201c <__assert_fail@plt+0xf20>
   11f88:	lsr	r0, r0, #5
   11f8c:	b	11fa0 <__assert_fail@plt+0xea4>
   11f90:	mov	r0, #61	; 0x3d
   11f94:	mov	sl, #0
   11f98:	b	11fac <__assert_fail@plt+0xeb0>
   11f9c:	mov	r0, #0
   11fa0:	add	r0, r0, r5
   11fa4:	and	r0, r0, #31
   11fa8:	ldrb	r0, [r8, r0]
   11fac:	strb	r0, [r4, #6]
   11fb0:	ldr	r0, [sp, #4]
   11fb4:	cmp	r0, r7
   11fb8:	beq	11d9c <__assert_fail@plt+0xca0>
   11fbc:	cmp	sl, #0
   11fc0:	beq	11fd8 <__assert_fail@plt+0xedc>
   11fc4:	ldrb	r0, [r9, #4]
   11fc8:	bl	1201c <__assert_fail@plt+0xf20>
   11fcc:	and	r0, r0, #31
   11fd0:	ldrb	r0, [r8, r0]
   11fd4:	b	11fdc <__assert_fail@plt+0xee0>
   11fd8:	mov	r0, #61	; 0x3d
   11fdc:	strb	r0, [r4, #7]
   11fe0:	ldr	r0, [sp]
   11fe4:	cmp	r0, r7
   11fe8:	beq	11d9c <__assert_fail@plt+0xca0>
   11fec:	sub	r6, sl, #1
   11ff0:	cmp	r6, sl
   11ff4:	mov	r0, r6
   11ff8:	movwcs	r0, #0
   11ffc:	cmp	r0, #0
   12000:	addne	r9, r9, #5
   12004:	add	r7, r7, #8
   12008:	bne	11df8 <__assert_fail@plt+0xcfc>
   1200c:	ldr	r0, [sp, #32]
   12010:	add	r0, r0, r7
   12014:	str	r0, [sp, #32]
   12018:	b	11d90 <__assert_fail@plt+0xc94>
   1201c:	bx	lr
   12020:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12024:	add	fp, sp, #24
   12028:	mov	r6, r2
   1202c:	mov	r4, r1
   12030:	mov	r8, r0
   12034:	movw	r0, #26215	; 0x6667
   12038:	movt	r0, #26214	; 0x6666
   1203c:	smmul	r0, r1, r0
   12040:	asr	r1, r0, #1
   12044:	add	r0, r1, r0, lsr #31
   12048:	add	r1, r0, r0, lsl #2
   1204c:	subs	r1, r4, r1
   12050:	addne	r0, r0, #1
   12054:	cmn	r0, #1
   12058:	ble	12068 <__assert_fail@plt+0xf6c>
   1205c:	cmn	r0, #-268435455	; 0xf0000001
   12060:	ble	1207c <__assert_fail@plt+0xf80>
   12064:	b	120bc <__assert_fail@plt+0xfc0>
   12068:	beq	1207c <__assert_fail@plt+0xf80>
   1206c:	mov	r1, #-2147483648	; 0x80000000
   12070:	sdiv	r1, r1, r0
   12074:	cmp	r1, #8
   12078:	blt	120bc <__assert_fail@plt+0xfc0>
   1207c:	cmn	r4, #1
   12080:	ble	120bc <__assert_fail@plt+0xfc0>
   12084:	lsl	r7, r0, #3
   12088:	orr	r5, r7, #1
   1208c:	mov	r0, r5
   12090:	bl	12a58 <__assert_fail@plt+0x195c>
   12094:	str	r0, [r6]
   12098:	cmp	r0, #0
   1209c:	beq	120cc <__assert_fail@plt+0xfd0>
   120a0:	mov	r2, r0
   120a4:	mov	r0, r8
   120a8:	mov	r1, r4
   120ac:	mov	r3, r5
   120b0:	bl	11d6c <__assert_fail@plt+0xc70>
   120b4:	mov	r0, r7
   120b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   120bc:	mov	r7, #0
   120c0:	str	r7, [r6]
   120c4:	mov	r0, r7
   120c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   120cc:	mov	r0, r5
   120d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   120d4:	push	{fp, lr}
   120d8:	mov	fp, sp
   120dc:	bl	1201c <__assert_fail@plt+0xf20>
   120e0:	movw	r1, #25631	; 0x641f
   120e4:	movt	r1, #1
   120e8:	add	r0, r1, r0
   120ec:	ldrsb	r1, [r0]
   120f0:	mov	r0, #0
   120f4:	cmn	r1, #1
   120f8:	movwgt	r0, #1
   120fc:	pop	{fp, pc}
   12100:	mov	r1, #0
   12104:	str	r1, [r0]
   12108:	bx	lr
   1210c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12110:	add	fp, sp, #28
   12114:	sub	sp, sp, #28
   12118:	mov	r9, r0
   1211c:	str	r2, [sp, #20]
   12120:	str	r1, [sp, #24]
   12124:	str	r3, [sp, #16]
   12128:	ldr	r0, [fp, #8]
   1212c:	ldr	r0, [r0]
   12130:	str	r0, [sp, #12]
   12134:	mov	r0, #0
   12138:	cmp	r9, #0
   1213c:	mov	r4, #0
   12140:	beq	12158 <__assert_fail@plt+0x105c>
   12144:	clz	r0, r2
   12148:	lsr	r4, r0, #5
   1214c:	ldr	r0, [r9]
   12150:	cmp	r0, #0
   12154:	movwne	r0, #1
   12158:	orr	r8, r0, r4
   1215c:	clz	r0, r9
   12160:	lsr	r0, r0, #5
   12164:	str	r0, [sp, #8]
   12168:	add	r7, sp, #16
   1216c:	add	r5, sp, #12
   12170:	str	r4, [sp, #4]
   12174:	b	12188 <__assert_fail@plt+0x108c>
   12178:	add	r0, r0, #1
   1217c:	str	r0, [sp, #24]
   12180:	sub	r0, r6, #1
   12184:	str	r0, [sp, #20]
   12188:	ldr	sl, [sp, #12]
   1218c:	cmp	r8, #0
   12190:	beq	1219c <__assert_fail@plt+0x10a0>
   12194:	ldr	r6, [sp, #20]
   12198:	b	121f4 <__assert_fail@plt+0x10f8>
   1219c:	ldr	r6, [sp, #20]
   121a0:	ldr	r4, [sp, #24]
   121a4:	mov	r0, r4
   121a8:	mov	r1, r6
   121ac:	mov	r2, r7
   121b0:	mov	r3, r5
   121b4:	bl	122ec <__assert_fail@plt+0x11f0>
   121b8:	cmp	r0, #0
   121bc:	beq	121f0 <__assert_fail@plt+0x10f4>
   121c0:	ldr	sl, [sp, #12]
   121c4:	add	r4, r4, #8
   121c8:	sub	r6, r6, #8
   121cc:	mov	r0, r4
   121d0:	mov	r1, r6
   121d4:	mov	r2, r7
   121d8:	mov	r3, r5
   121dc:	bl	122ec <__assert_fail@plt+0x11f0>
   121e0:	cmp	r0, #0
   121e4:	bne	121c0 <__assert_fail@plt+0x10c4>
   121e8:	str	r6, [sp, #20]
   121ec:	str	r4, [sp, #24]
   121f0:	ldr	r4, [sp, #4]
   121f4:	cmp	r6, #0
   121f8:	mov	r0, r6
   121fc:	movwne	r0, #1
   12200:	orr	r0, r4, r0
   12204:	cmp	r0, #1
   12208:	bne	122c0 <__assert_fail@plt+0x11c4>
   1220c:	cmp	r6, #0
   12210:	beq	12230 <__assert_fail@plt+0x1134>
   12214:	ldr	r0, [sp, #24]
   12218:	ldrb	r1, [r0]
   1221c:	subs	r1, r1, #10
   12220:	movwne	r1, #1
   12224:	ldr	r2, [sp, #8]
   12228:	orrs	r1, r1, r2
   1222c:	beq	12178 <__assert_fail@plt+0x107c>
   12230:	ldr	r0, [sp, #12]
   12234:	str	sl, [sp, #12]
   12238:	sub	r0, r0, sl
   1223c:	ldr	r1, [sp, #16]
   12240:	add	r0, r1, r0
   12244:	str	r0, [sp, #16]
   12248:	ldr	r0, [sp, #24]
   1224c:	add	r6, r0, r6
   12250:	cmp	r9, #0
   12254:	beq	1226c <__assert_fail@plt+0x1170>
   12258:	mov	r0, r9
   1225c:	add	r1, sp, #24
   12260:	mov	r2, r6
   12264:	add	r3, sp, #20
   12268:	bl	125c4 <__assert_fail@plt+0x14c8>
   1226c:	ldr	r1, [sp, #20]
   12270:	cmp	r1, #0
   12274:	beq	122b8 <__assert_fail@plt+0x11bc>
   12278:	cmp	r1, #7
   1227c:	mov	r2, #0
   12280:	movwgt	r2, #1
   12284:	orr	r2, r4, r2
   12288:	ldr	r3, [sp, #8]
   1228c:	orrs	r2, r2, r3
   12290:	beq	122b8 <__assert_fail@plt+0x11bc>
   12294:	mov	r2, r7
   12298:	mov	r3, r5
   1229c:	bl	122ec <__assert_fail@plt+0x11f0>
   122a0:	cmp	r0, #0
   122a4:	beq	122c0 <__assert_fail@plt+0x11c4>
   122a8:	ldr	r0, [sp, #24]
   122ac:	sub	r0, r6, r0
   122b0:	str	r0, [sp, #20]
   122b4:	b	12188 <__assert_fail@plt+0x108c>
   122b8:	mov	r0, #0
   122bc:	str	r0, [sp, #20]
   122c0:	ldr	r0, [fp, #8]
   122c4:	mov	r2, r0
   122c8:	ldr	r0, [r0]
   122cc:	ldr	r1, [sp, #12]
   122d0:	sub	r0, r0, r1
   122d4:	str	r0, [r2]
   122d8:	ldr	r0, [sp, #20]
   122dc:	clz	r0, r0
   122e0:	lsr	r0, r0, #5
   122e4:	sub	sp, fp, #28
   122e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122f0:	add	fp, sp, #28
   122f4:	sub	sp, sp, #4
   122f8:	mov	r5, #0
   122fc:	cmp	r1, #8
   12300:	blt	125b8 <__assert_fail@plt+0x14bc>
   12304:	mov	sl, r3
   12308:	mov	r8, r2
   1230c:	mov	r6, r0
   12310:	ldr	r9, [r2]
   12314:	ldrb	r7, [r0]
   12318:	mov	r0, r7
   1231c:	bl	120d4 <__assert_fail@plt+0xfd8>
   12320:	cmp	r0, #0
   12324:	beq	125b8 <__assert_fail@plt+0x14bc>
   12328:	ldrb	r4, [r6, #1]
   1232c:	mov	r0, r4
   12330:	bl	120d4 <__assert_fail@plt+0xfd8>
   12334:	cmp	r0, #0
   12338:	beq	125b8 <__assert_fail@plt+0x14bc>
   1233c:	ldr	r0, [sl]
   12340:	cmp	r0, #0
   12344:	beq	12384 <__assert_fail@plt+0x1288>
   12348:	mov	r0, r7
   1234c:	bl	1201c <__assert_fail@plt+0xf20>
   12350:	mov	r0, r4
   12354:	bl	1201c <__assert_fail@plt+0xf20>
   12358:	movw	r0, #25631	; 0x641f
   1235c:	movt	r0, #1
   12360:	ldrb	r1, [r0, r7]
   12364:	add	r0, r0, r4
   12368:	ldrsb	r0, [r0]
   1236c:	lsr	r0, r0, #2
   12370:	orr	r0, r0, r1, lsl #3
   12374:	strb	r0, [r9], #1
   12378:	ldr	r0, [sl]
   1237c:	sub	r0, r0, #1
   12380:	str	r0, [sl]
   12384:	ldrb	r7, [r6, #2]
   12388:	cmp	r7, #61	; 0x3d
   1238c:	bne	123ac <__assert_fail@plt+0x12b0>
   12390:	ldrb	r0, [r6, #3]
   12394:	cmp	r0, #61	; 0x3d
   12398:	bne	125b4 <__assert_fail@plt+0x14b8>
   1239c:	ldrb	r0, [r6, #4]
   123a0:	cmp	r0, #61	; 0x3d
   123a4:	beq	12434 <__assert_fail@plt+0x1338>
   123a8:	b	125b4 <__assert_fail@plt+0x14b8>
   123ac:	mov	r0, r7
   123b0:	bl	120d4 <__assert_fail@plt+0xfd8>
   123b4:	cmp	r0, #0
   123b8:	beq	125b4 <__assert_fail@plt+0x14b8>
   123bc:	ldrb	r0, [r6, #3]
   123c0:	str	r0, [sp]
   123c4:	bl	120d4 <__assert_fail@plt+0xfd8>
   123c8:	cmp	r0, #0
   123cc:	beq	125b4 <__assert_fail@plt+0x14b8>
   123d0:	ldr	r0, [sl]
   123d4:	cmp	r0, #0
   123d8:	beq	12428 <__assert_fail@plt+0x132c>
   123dc:	mov	r0, r4
   123e0:	bl	1201c <__assert_fail@plt+0xf20>
   123e4:	mov	r0, r7
   123e8:	bl	1201c <__assert_fail@plt+0xf20>
   123ec:	ldr	r0, [sp]
   123f0:	bl	1201c <__assert_fail@plt+0xf20>
   123f4:	movw	r3, #25631	; 0x641f
   123f8:	movt	r3, #1
   123fc:	ldrb	r1, [r3, r4]
   12400:	ldrb	r2, [r3, r7]
   12404:	lsl	r2, r2, #1
   12408:	orr	r1, r2, r1, lsl #6
   1240c:	add	r0, r3, r0
   12410:	ldrsb	r0, [r0]
   12414:	orr	r0, r1, r0, lsr #4
   12418:	strb	r0, [r9], #1
   1241c:	ldr	r0, [sl]
   12420:	sub	r0, r0, #1
   12424:	str	r0, [sl]
   12428:	ldrb	r4, [r6, #4]
   1242c:	cmp	r4, #61	; 0x3d
   12430:	bne	12464 <__assert_fail@plt+0x1368>
   12434:	ldrb	r0, [r6, #5]
   12438:	cmp	r0, #61	; 0x3d
   1243c:	bne	125b4 <__assert_fail@plt+0x14b8>
   12440:	ldrb	r0, [r6, #6]
   12444:	cmp	r0, #61	; 0x3d
   12448:	bne	125b4 <__assert_fail@plt+0x14b8>
   1244c:	ldrb	r0, [r6, #7]
   12450:	cmp	r0, #61	; 0x3d
   12454:	bne	125b4 <__assert_fail@plt+0x14b8>
   12458:	str	r9, [r8]
   1245c:	mov	r5, #1
   12460:	b	125b8 <__assert_fail@plt+0x14bc>
   12464:	mov	r0, r4
   12468:	bl	120d4 <__assert_fail@plt+0xfd8>
   1246c:	cmp	r0, #0
   12470:	beq	125b4 <__assert_fail@plt+0x14b8>
   12474:	ldr	r0, [sl]
   12478:	cmp	r0, #0
   1247c:	beq	124c0 <__assert_fail@plt+0x13c4>
   12480:	ldr	r7, [sp]
   12484:	mov	r0, r7
   12488:	bl	1201c <__assert_fail@plt+0xf20>
   1248c:	mov	r0, r4
   12490:	bl	1201c <__assert_fail@plt+0xf20>
   12494:	movw	r0, #25631	; 0x641f
   12498:	movt	r0, #1
   1249c:	ldrb	r1, [r0, r7]
   124a0:	add	r0, r0, r4
   124a4:	ldrsb	r0, [r0]
   124a8:	lsr	r0, r0, #1
   124ac:	orr	r0, r0, r1, lsl #4
   124b0:	strb	r0, [r9], #1
   124b4:	ldr	r0, [sl]
   124b8:	sub	r0, r0, #1
   124bc:	str	r0, [sl]
   124c0:	ldrb	r4, [r6, #5]
   124c4:	cmp	r4, #61	; 0x3d
   124c8:	beq	12440 <__assert_fail@plt+0x1344>
   124cc:	mov	r0, r4
   124d0:	bl	120d4 <__assert_fail@plt+0xfd8>
   124d4:	cmp	r0, #0
   124d8:	beq	125b4 <__assert_fail@plt+0x14b8>
   124dc:	ldrb	r7, [r6, #6]
   124e0:	mov	r0, r7
   124e4:	bl	120d4 <__assert_fail@plt+0xfd8>
   124e8:	cmp	r0, #0
   124ec:	beq	125b4 <__assert_fail@plt+0x14b8>
   124f0:	ldr	r0, [sl]
   124f4:	cmp	r0, #0
   124f8:	beq	12550 <__assert_fail@plt+0x1454>
   124fc:	ldrb	r0, [r6, #4]
   12500:	str	r0, [sp]
   12504:	bl	1201c <__assert_fail@plt+0xf20>
   12508:	mov	r0, r4
   1250c:	bl	1201c <__assert_fail@plt+0xf20>
   12510:	mov	r0, r7
   12514:	bl	1201c <__assert_fail@plt+0xf20>
   12518:	movw	r0, #25631	; 0x641f
   1251c:	movt	r0, #1
   12520:	ldr	r1, [sp]
   12524:	ldrb	r1, [r0, r1]
   12528:	ldrb	r2, [r0, r4]
   1252c:	lsl	r2, r2, #2
   12530:	orr	r1, r2, r1, lsl #7
   12534:	add	r0, r0, r7
   12538:	ldrsb	r0, [r0]
   1253c:	orr	r0, r1, r0, lsr #3
   12540:	strb	r0, [r9], #1
   12544:	ldr	r0, [sl]
   12548:	sub	r0, r0, #1
   1254c:	str	r0, [sl]
   12550:	ldrb	r4, [r6, #7]
   12554:	cmp	r4, #61	; 0x3d
   12558:	beq	12458 <__assert_fail@plt+0x135c>
   1255c:	mov	r0, r4
   12560:	bl	120d4 <__assert_fail@plt+0xfd8>
   12564:	cmp	r0, #0
   12568:	beq	125b4 <__assert_fail@plt+0x14b8>
   1256c:	ldr	r0, [sl]
   12570:	cmp	r0, #0
   12574:	beq	12458 <__assert_fail@plt+0x135c>
   12578:	ldrb	r5, [r6, #6]
   1257c:	mov	r0, r5
   12580:	bl	1201c <__assert_fail@plt+0xf20>
   12584:	mov	r0, r4
   12588:	bl	1201c <__assert_fail@plt+0xf20>
   1258c:	movw	r0, #25631	; 0x641f
   12590:	movt	r0, #1
   12594:	ldrb	r1, [r0, r4]
   12598:	ldrb	r0, [r0, r5]
   1259c:	orr	r0, r1, r0, lsl #5
   125a0:	strb	r0, [r9], #1
   125a4:	ldr	r0, [sl]
   125a8:	sub	r0, r0, #1
   125ac:	str	r0, [sl]
   125b0:	b	12458 <__assert_fail@plt+0x135c>
   125b4:	str	r9, [r8]
   125b8:	mov	r0, r5
   125bc:	sub	sp, fp, #28
   125c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   125c8:	add	fp, sp, #24
   125cc:	mov	r8, r3
   125d0:	mov	r7, r2
   125d4:	mov	r6, r1
   125d8:	mov	r4, r0
   125dc:	ldr	r0, [r0]
   125e0:	cmp	r0, #0
   125e4:	beq	125f8 <__assert_fail@plt+0x14fc>
   125e8:	cmp	r0, #8
   125ec:	bne	12624 <__assert_fail@plt+0x1528>
   125f0:	mov	r0, #0
   125f4:	str	r0, [r4]
   125f8:	ldr	r5, [r6]
   125fc:	sub	r0, r7, r5
   12600:	cmp	r0, #8
   12604:	blt	12624 <__assert_fail@plt+0x1528>
   12608:	mov	r9, #8
   1260c:	mov	r0, r5
   12610:	mov	r1, #10
   12614:	mov	r2, #8
   12618:	bl	11060 <memchr@plt>
   1261c:	cmp	r0, #0
   12620:	beq	12674 <__assert_fail@plt+0x1578>
   12624:	ldr	r0, [r6]
   12628:	cmp	r0, r7
   1262c:	bcs	12660 <__assert_fail@plt+0x1564>
   12630:	add	r0, r0, #1
   12634:	ldrb	r1, [r0, #-1]
   12638:	cmp	r1, #10
   1263c:	beq	12628 <__assert_fail@plt+0x152c>
   12640:	ldr	r2, [r4]
   12644:	add	r3, r2, #1
   12648:	mov	r5, r4
   1264c:	str	r3, [r5], r2
   12650:	strb	r1, [r5, #4]
   12654:	ldr	r1, [r4]
   12658:	cmp	r1, #8
   1265c:	bne	12628 <__assert_fail@plt+0x152c>
   12660:	str	r0, [r6]
   12664:	ldr	r0, [r4], #4
   12668:	str	r0, [r8]
   1266c:	mov	r0, r4
   12670:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12674:	add	r0, r5, #8
   12678:	str	r0, [r6]
   1267c:	str	r9, [r8]
   12680:	mov	r0, r5
   12684:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12688:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1268c:	add	fp, sp, #24
   12690:	sub	sp, sp, #8
   12694:	mov	r4, r3
   12698:	mov	r6, r2
   1269c:	mov	r8, r1
   126a0:	mov	r7, r0
   126a4:	asr	r0, r2, #3
   126a8:	add	r0, r0, r0, lsl #2
   126ac:	add	r0, r0, #5
   126b0:	str	r0, [sp, #4]
   126b4:	bl	12a58 <__assert_fail@plt+0x195c>
   126b8:	str	r0, [r4]
   126bc:	mov	r5, #1
   126c0:	cmp	r0, #0
   126c4:	beq	12710 <__assert_fail@plt+0x1614>
   126c8:	mov	r3, r0
   126cc:	add	r0, sp, #4
   126d0:	str	r0, [sp]
   126d4:	mov	r0, r7
   126d8:	mov	r1, r8
   126dc:	mov	r2, r6
   126e0:	bl	1210c <__assert_fail@plt+0x1010>
   126e4:	cmp	r0, #0
   126e8:	beq	12700 <__assert_fail@plt+0x1604>
   126ec:	ldr	r0, [fp, #8]
   126f0:	cmp	r0, #0
   126f4:	ldrne	r1, [sp, #4]
   126f8:	strne	r1, [r0]
   126fc:	b	12710 <__assert_fail@plt+0x1614>
   12700:	ldr	r0, [r4]
   12704:	bl	1296c <__assert_fail@plt+0x1870>
   12708:	mov	r5, #0
   1270c:	str	r5, [r4]
   12710:	mov	r0, r5
   12714:	sub	sp, fp, #24
   12718:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1271c:	movw	r1, #29024	; 0x7160
   12720:	movt	r1, #2
   12724:	str	r0, [r1]
   12728:	bx	lr
   1272c:	movw	r1, #29028	; 0x7164
   12730:	movt	r1, #2
   12734:	strb	r0, [r1]
   12738:	bx	lr
   1273c:	push	{r4, r5, r6, sl, fp, lr}
   12740:	add	fp, sp, #16
   12744:	sub	sp, sp, #8
   12748:	movw	r0, #29012	; 0x7154
   1274c:	movt	r0, #2
   12750:	ldr	r0, [r0]
   12754:	bl	15914 <__assert_fail@plt+0x4818>
   12758:	cmp	r0, #0
   1275c:	beq	12784 <__assert_fail@plt+0x1688>
   12760:	movw	r0, #29028	; 0x7164
   12764:	movt	r0, #2
   12768:	ldrb	r0, [r0]
   1276c:	cmp	r0, #0
   12770:	beq	127a4 <__assert_fail@plt+0x16a8>
   12774:	bl	11018 <__errno_location@plt>
   12778:	ldr	r0, [r0]
   1277c:	cmp	r0, #32
   12780:	bne	127a4 <__assert_fail@plt+0x16a8>
   12784:	movw	r0, #29000	; 0x7148
   12788:	movt	r0, #2
   1278c:	ldr	r0, [r0]
   12790:	bl	15914 <__assert_fail@plt+0x4818>
   12794:	cmp	r0, #0
   12798:	subeq	sp, fp, #16
   1279c:	popeq	{r4, r5, r6, sl, fp, pc}
   127a0:	b	12814 <__assert_fail@plt+0x1718>
   127a4:	movw	r1, #25380	; 0x6324
   127a8:	movt	r1, #1
   127ac:	mov	r0, #0
   127b0:	mov	r2, #5
   127b4:	bl	10f1c <dcgettext@plt>
   127b8:	mov	r4, r0
   127bc:	movw	r0, #29024	; 0x7160
   127c0:	movt	r0, #2
   127c4:	ldr	r6, [r0]
   127c8:	bl	11018 <__errno_location@plt>
   127cc:	ldr	r5, [r0]
   127d0:	cmp	r6, #0
   127d4:	bne	127f0 <__assert_fail@plt+0x16f4>
   127d8:	movw	r2, #24816	; 0x60f0
   127dc:	movt	r2, #1
   127e0:	mov	r0, #0
   127e4:	mov	r1, r5
   127e8:	mov	r3, r4
   127ec:	b	12810 <__assert_fail@plt+0x1714>
   127f0:	mov	r0, r6
   127f4:	bl	14130 <__assert_fail@plt+0x3034>
   127f8:	mov	r3, r0
   127fc:	str	r4, [sp]
   12800:	movw	r2, #24812	; 0x60ec
   12804:	movt	r2, #1
   12808:	mov	r0, #0
   1280c:	mov	r1, r5
   12810:	bl	10f94 <error@plt>
   12814:	movw	r0, #28916	; 0x70f4
   12818:	movt	r0, #2
   1281c:	ldr	r0, [r0]
   12820:	bl	10ee0 <_exit@plt>
   12824:	b	10eb0 <posix_fadvise64@plt>
   12828:	cmp	r0, #0
   1282c:	bxeq	lr
   12830:	push	{r4, sl, fp, lr}
   12834:	add	fp, sp, #8
   12838:	sub	sp, sp, #16
   1283c:	mov	r4, r1
   12840:	bl	11048 <fileno@plt>
   12844:	mov	r1, #0
   12848:	str	r1, [sp]
   1284c:	stmib	sp, {r1, r4}
   12850:	mov	r2, #0
   12854:	mov	r3, #0
   12858:	bl	12824 <__assert_fail@plt+0x1728>
   1285c:	sub	sp, fp, #8
   12860:	pop	{r4, sl, fp, pc}
   12864:	push	{r4, r5, fp, lr}
   12868:	add	fp, sp, #8
   1286c:	sub	sp, sp, #8
   12870:	mov	r4, r0
   12874:	bl	11048 <fileno@plt>
   12878:	cmn	r0, #1
   1287c:	ble	128f4 <__assert_fail@plt+0x17f8>
   12880:	mov	r0, r4
   12884:	bl	10fb8 <__freading@plt>
   12888:	cmp	r0, #0
   1288c:	beq	128b8 <__assert_fail@plt+0x17bc>
   12890:	mov	r0, r4
   12894:	bl	11048 <fileno@plt>
   12898:	mov	r1, #1
   1289c:	str	r1, [sp]
   128a0:	mov	r2, #0
   128a4:	mov	r3, #0
   128a8:	bl	10f58 <lseek64@plt>
   128ac:	and	r0, r0, r1
   128b0:	cmn	r0, #1
   128b4:	beq	128f4 <__assert_fail@plt+0x17f8>
   128b8:	mov	r0, r4
   128bc:	bl	12904 <__assert_fail@plt+0x1808>
   128c0:	cmp	r0, #0
   128c4:	beq	128f4 <__assert_fail@plt+0x17f8>
   128c8:	bl	11018 <__errno_location@plt>
   128cc:	ldr	r5, [r0]
   128d0:	mov	r0, r4
   128d4:	bl	11078 <fclose@plt>
   128d8:	cmp	r5, #0
   128dc:	beq	128ec <__assert_fail@plt+0x17f0>
   128e0:	bl	11018 <__errno_location@plt>
   128e4:	str	r5, [r0]
   128e8:	mvn	r0, #0
   128ec:	sub	sp, fp, #8
   128f0:	pop	{r4, r5, fp, pc}
   128f4:	mov	r0, r4
   128f8:	sub	sp, fp, #8
   128fc:	pop	{r4, r5, fp, lr}
   12900:	b	11078 <fclose@plt>
   12904:	push	{r4, sl, fp, lr}
   12908:	add	fp, sp, #8
   1290c:	mov	r4, r0
   12910:	cmp	r0, #0
   12914:	beq	1292c <__assert_fail@plt+0x1830>
   12918:	mov	r0, r4
   1291c:	bl	10fb8 <__freading@plt>
   12920:	cmp	r0, #0
   12924:	movne	r0, r4
   12928:	blne	12938 <__assert_fail@plt+0x183c>
   1292c:	mov	r0, r4
   12930:	pop	{r4, sl, fp, lr}
   12934:	b	10ebc <fflush@plt>
   12938:	push	{fp, lr}
   1293c:	mov	fp, sp
   12940:	sub	sp, sp, #8
   12944:	ldrb	r1, [r0, #1]
   12948:	tst	r1, #1
   1294c:	beq	12964 <__assert_fail@plt+0x1868>
   12950:	mov	r1, #1
   12954:	str	r1, [sp]
   12958:	mov	r2, #0
   1295c:	mov	r3, #0
   12960:	bl	12994 <__assert_fail@plt+0x1898>
   12964:	mov	sp, fp
   12968:	pop	{fp, pc}
   1296c:	push	{r4, r5, r6, sl, fp, lr}
   12970:	add	fp, sp, #16
   12974:	mov	r4, r0
   12978:	bl	11018 <__errno_location@plt>
   1297c:	mov	r5, r0
   12980:	ldr	r6, [r0]
   12984:	mov	r0, r4
   12988:	bl	10ed4 <free@plt>
   1298c:	str	r6, [r5]
   12990:	pop	{r4, r5, r6, sl, fp, pc}
   12994:	push	{r4, r5, r6, r7, fp, lr}
   12998:	add	fp, sp, #16
   1299c:	sub	sp, sp, #8
   129a0:	mov	r5, r3
   129a4:	mov	r6, r2
   129a8:	mov	r4, r0
   129ac:	ldr	r0, [r0, #4]
   129b0:	ldr	r1, [r4, #8]
   129b4:	cmp	r1, r0
   129b8:	bne	129d4 <__assert_fail@plt+0x18d8>
   129bc:	ldrd	r0, [r4, #16]
   129c0:	cmp	r1, r0
   129c4:	bne	129d4 <__assert_fail@plt+0x18d8>
   129c8:	ldr	r0, [r4, #36]	; 0x24
   129cc:	cmp	r0, #0
   129d0:	beq	129ec <__assert_fail@plt+0x18f0>
   129d4:	mov	r0, r4
   129d8:	mov	r2, r6
   129dc:	mov	r3, r5
   129e0:	sub	sp, fp, #16
   129e4:	pop	{r4, r5, r6, r7, fp, lr}
   129e8:	b	11084 <fseeko64@plt>
   129ec:	ldr	r7, [fp, #8]
   129f0:	mov	r0, r4
   129f4:	bl	11048 <fileno@plt>
   129f8:	str	r7, [sp]
   129fc:	mov	r2, r6
   12a00:	mov	r3, r5
   12a04:	bl	10f58 <lseek64@plt>
   12a08:	and	r2, r0, r1
   12a0c:	cmn	r2, #1
   12a10:	beq	12a30 <__assert_fail@plt+0x1934>
   12a14:	strd	r0, [r4, #80]	; 0x50
   12a18:	ldr	r0, [r4]
   12a1c:	bic	r0, r0, #16
   12a20:	str	r0, [r4]
   12a24:	mov	r0, #0
   12a28:	sub	sp, fp, #16
   12a2c:	pop	{r4, r5, r6, r7, fp, pc}
   12a30:	mvn	r0, #0
   12a34:	sub	sp, fp, #16
   12a38:	pop	{r4, r5, r6, r7, fp, pc}
   12a3c:	push	{fp, lr}
   12a40:	mov	fp, sp
   12a44:	bl	11018 <__errno_location@plt>
   12a48:	mov	r1, #12
   12a4c:	str	r1, [r0]
   12a50:	mov	r0, #0
   12a54:	pop	{fp, pc}
   12a58:	b	1555c <__assert_fail@plt+0x4460>
   12a5c:	cmp	r1, #0
   12a60:	orreq	r1, r1, #1
   12a64:	b	1558c <__assert_fail@plt+0x4490>
   12a68:	b	15508 <__assert_fail@plt+0x440c>
   12a6c:	clz	r3, r2
   12a70:	lsr	ip, r3, #5
   12a74:	clz	r3, r1
   12a78:	lsr	r3, r3, #5
   12a7c:	orrs	r3, r3, ip
   12a80:	movwne	r1, #1
   12a84:	movwne	r2, #1
   12a88:	b	14698 <__assert_fail@plt+0x359c>
   12a8c:	push	{r4, r5, fp, lr}
   12a90:	add	fp, sp, #8
   12a94:	cmp	r0, #0
   12a98:	beq	12b2c <__assert_fail@plt+0x1a30>
   12a9c:	mov	r4, r0
   12aa0:	mov	r1, #47	; 0x2f
   12aa4:	bl	1109c <strrchr@plt>
   12aa8:	cmp	r0, #0
   12aac:	mov	r5, r4
   12ab0:	addne	r5, r0, #1
   12ab4:	sub	r0, r5, r4
   12ab8:	cmp	r0, #7
   12abc:	blt	12b10 <__assert_fail@plt+0x1a14>
   12ac0:	sub	r0, r5, #7
   12ac4:	movw	r1, #25943	; 0x6557
   12ac8:	movt	r1, #1
   12acc:	mov	r2, #7
   12ad0:	bl	110d8 <strncmp@plt>
   12ad4:	cmp	r0, #0
   12ad8:	bne	12b10 <__assert_fail@plt+0x1a14>
   12adc:	movw	r1, #25951	; 0x655f
   12ae0:	movt	r1, #1
   12ae4:	mov	r0, r5
   12ae8:	mov	r2, #3
   12aec:	bl	110d8 <strncmp@plt>
   12af0:	cmp	r0, #0
   12af4:	beq	12b00 <__assert_fail@plt+0x1a04>
   12af8:	mov	r4, r5
   12afc:	b	12b10 <__assert_fail@plt+0x1a14>
   12b00:	add	r4, r5, #3
   12b04:	movw	r0, #28984	; 0x7138
   12b08:	movt	r0, #2
   12b0c:	str	r4, [r0]
   12b10:	movw	r0, #28988	; 0x713c
   12b14:	movt	r0, #2
   12b18:	str	r4, [r0]
   12b1c:	movw	r0, #29032	; 0x7168
   12b20:	movt	r0, #2
   12b24:	str	r4, [r0]
   12b28:	pop	{r4, r5, fp, pc}
   12b2c:	movw	r0, #29000	; 0x7148
   12b30:	movt	r0, #2
   12b34:	ldr	r3, [r0]
   12b38:	movw	r0, #25887	; 0x651f
   12b3c:	movt	r0, #1
   12b40:	mov	r1, #55	; 0x37
   12b44:	mov	r2, #1
   12b48:	bl	10f4c <fwrite@plt>
   12b4c:	bl	110e4 <abort@plt>
   12b50:	push	{r4, r5, r6, sl, fp, lr}
   12b54:	add	fp, sp, #16
   12b58:	mov	r4, r0
   12b5c:	movw	r0, #29040	; 0x7170
   12b60:	movt	r0, #2
   12b64:	cmp	r4, #0
   12b68:	moveq	r4, r0
   12b6c:	bl	11018 <__errno_location@plt>
   12b70:	mov	r5, r0
   12b74:	ldr	r6, [r0]
   12b78:	mov	r0, r4
   12b7c:	mov	r1, #48	; 0x30
   12b80:	bl	14e84 <__assert_fail@plt+0x3d88>
   12b84:	str	r6, [r5]
   12b88:	pop	{r4, r5, r6, sl, fp, pc}
   12b8c:	movw	r1, #29040	; 0x7170
   12b90:	movt	r1, #2
   12b94:	cmp	r0, #0
   12b98:	movne	r1, r0
   12b9c:	ldr	r0, [r1]
   12ba0:	bx	lr
   12ba4:	movw	r2, #29040	; 0x7170
   12ba8:	movt	r2, #2
   12bac:	cmp	r0, #0
   12bb0:	movne	r2, r0
   12bb4:	str	r1, [r2]
   12bb8:	bx	lr
   12bbc:	movw	r3, #29040	; 0x7170
   12bc0:	movt	r3, #2
   12bc4:	cmp	r0, #0
   12bc8:	movne	r3, r0
   12bcc:	ubfx	r0, r1, #5, #3
   12bd0:	add	ip, r3, r0, lsl #2
   12bd4:	ldr	r3, [ip, #8]
   12bd8:	and	r1, r1, #31
   12bdc:	mov	r0, #1
   12be0:	and	r0, r0, r3, lsr r1
   12be4:	and	r2, r2, #1
   12be8:	eor	r2, r0, r2
   12bec:	eor	r1, r3, r2, lsl r1
   12bf0:	str	r1, [ip, #8]
   12bf4:	bx	lr
   12bf8:	movw	r2, #29040	; 0x7170
   12bfc:	movt	r2, #2
   12c00:	cmp	r0, #0
   12c04:	movne	r2, r0
   12c08:	ldr	r0, [r2, #4]
   12c0c:	str	r1, [r2, #4]
   12c10:	bx	lr
   12c14:	push	{fp, lr}
   12c18:	mov	fp, sp
   12c1c:	movw	r3, #29040	; 0x7170
   12c20:	movt	r3, #2
   12c24:	cmp	r0, #0
   12c28:	movne	r3, r0
   12c2c:	mov	r0, #10
   12c30:	str	r0, [r3]
   12c34:	cmp	r1, #0
   12c38:	cmpne	r2, #0
   12c3c:	bne	12c44 <__assert_fail@plt+0x1b48>
   12c40:	bl	110e4 <abort@plt>
   12c44:	str	r1, [r3, #40]	; 0x28
   12c48:	str	r2, [r3, #44]	; 0x2c
   12c4c:	pop	{fp, pc}
   12c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c54:	add	fp, sp, #28
   12c58:	sub	sp, sp, #20
   12c5c:	mov	r8, r3
   12c60:	mov	r9, r2
   12c64:	mov	sl, r1
   12c68:	mov	r7, r0
   12c6c:	ldr	r0, [fp, #8]
   12c70:	movw	r5, #29040	; 0x7170
   12c74:	movt	r5, #2
   12c78:	cmp	r0, #0
   12c7c:	movne	r5, r0
   12c80:	bl	11018 <__errno_location@plt>
   12c84:	mov	r4, r0
   12c88:	ldm	r5, {r0, r1}
   12c8c:	ldr	r2, [r5, #40]	; 0x28
   12c90:	ldr	r3, [r5, #44]	; 0x2c
   12c94:	ldr	r6, [r4]
   12c98:	add	r5, r5, #8
   12c9c:	stm	sp, {r0, r1, r5}
   12ca0:	str	r2, [sp, #12]
   12ca4:	str	r3, [sp, #16]
   12ca8:	mov	r0, r7
   12cac:	mov	r1, sl
   12cb0:	mov	r2, r9
   12cb4:	mov	r3, r8
   12cb8:	bl	12cc8 <__assert_fail@plt+0x1bcc>
   12cbc:	str	r6, [r4]
   12cc0:	sub	sp, fp, #28
   12cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ccc:	add	fp, sp, #28
   12cd0:	sub	sp, sp, #156	; 0x9c
   12cd4:	mov	r9, r3
   12cd8:	mov	r7, r1
   12cdc:	mov	r6, r0
   12ce0:	str	r2, [fp, #-80]	; 0xffffffb0
   12ce4:	add	r0, r2, #1
   12ce8:	str	r0, [sp, #76]	; 0x4c
   12cec:	ldr	r0, [fp, #12]
   12cf0:	and	r1, r0, #1
   12cf4:	str	r1, [sp, #40]	; 0x28
   12cf8:	and	r1, r0, #4
   12cfc:	str	r1, [sp, #36]	; 0x24
   12d00:	ubfx	r4, r0, #1, #1
   12d04:	bl	10f64 <__ctype_get_mb_cur_max@plt>
   12d08:	str	r0, [sp, #44]	; 0x2c
   12d0c:	ldr	r0, [fp, #24]
   12d10:	str	r0, [sp, #88]	; 0x58
   12d14:	ldr	r0, [fp, #20]
   12d18:	str	r0, [sp, #80]	; 0x50
   12d1c:	ldr	r1, [fp, #8]
   12d20:	mov	r0, #0
   12d24:	str	r0, [sp, #84]	; 0x54
   12d28:	mov	r0, #0
   12d2c:	str	r0, [fp, #-84]	; 0xffffffac
   12d30:	mov	r0, #0
   12d34:	str	r0, [fp, #-72]	; 0xffffffb8
   12d38:	mov	r0, #0
   12d3c:	mov	r2, #0
   12d40:	str	r2, [fp, #-56]	; 0xffffffc8
   12d44:	mov	r2, #0
   12d48:	str	r2, [sp, #64]	; 0x40
   12d4c:	mov	r2, #1
   12d50:	str	r2, [fp, #-48]	; 0xffffffd0
   12d54:	cmp	r1, #10
   12d58:	bhi	13c84 <__assert_fail@plt+0x2b88>
   12d5c:	mov	sl, r7
   12d60:	mov	r7, r1
   12d64:	add	r1, pc, #24
   12d68:	mov	r8, #0
   12d6c:	mov	r2, #1
   12d70:	mov	r3, #0
   12d74:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12d78:	mov	lr, r9
   12d7c:	mov	r5, r6
   12d80:	ldr	pc, [r1, r7, lsl #2]
   12d84:	andeq	r2, r1, r8, asr lr
   12d88:	muleq	r1, r8, lr
   12d8c:	andeq	r2, r1, r8, ror #28
   12d90:	andeq	r2, r1, r0, asr lr
   12d94:	andeq	r2, r1, ip, lsl #29
   12d98:	andeq	r2, r1, ip, ror #29
   12d9c:	andeq	r2, r1, r8, ror lr
   12da0:	andeq	r2, r1, r8, asr #30
   12da4:			; <UNDEFINED> instruction: 0x00012db0
   12da8:			; <UNDEFINED> instruction: 0x00012db0
   12dac:	ldrdeq	r2, [r1], -ip
   12db0:	movw	r0, #26033	; 0x65b1
   12db4:	movt	r0, #1
   12db8:	mov	r1, r7
   12dbc:	bl	1428c <__assert_fail@plt+0x3190>
   12dc0:	str	r0, [sp, #80]	; 0x50
   12dc4:	movw	r0, #26035	; 0x65b3
   12dc8:	movt	r0, #1
   12dcc:	mov	r1, r7
   12dd0:	bl	1428c <__assert_fail@plt+0x3190>
   12dd4:	mov	r5, r6
   12dd8:	str	r0, [sp, #88]	; 0x58
   12ddc:	mov	r8, #0
   12de0:	tst	r4, #1
   12de4:	str	r7, [fp, #-64]	; 0xffffffc0
   12de8:	bne	12e20 <__assert_fail@plt+0x1d24>
   12dec:	ldr	r0, [sp, #80]	; 0x50
   12df0:	ldrb	r0, [r0]
   12df4:	cmp	r0, #0
   12df8:	beq	12e20 <__assert_fail@plt+0x1d24>
   12dfc:	ldr	r1, [sp, #80]	; 0x50
   12e00:	add	r1, r1, #1
   12e04:	mov	r8, #0
   12e08:	cmp	r8, sl
   12e0c:	strbcc	r0, [r5, r8]
   12e10:	ldrb	r0, [r1, r8]
   12e14:	add	r8, r8, #1
   12e18:	cmp	r0, #0
   12e1c:	bne	12e08 <__assert_fail@plt+0x1d0c>
   12e20:	ldr	r7, [sp, #88]	; 0x58
   12e24:	mov	r0, r7
   12e28:	bl	11000 <strlen@plt>
   12e2c:	mov	r5, r6
   12e30:	str	r0, [fp, #-72]	; 0xffffffb8
   12e34:	str	r7, [fp, #-84]	; 0xffffffac
   12e38:	mov	r2, #1
   12e3c:	mov	r3, r4
   12e40:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12e44:	mov	lr, r9
   12e48:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12e4c:	b	12f48 <__assert_fail@plt+0x1e4c>
   12e50:	mov	r0, #1
   12e54:	b	12e98 <__assert_fail@plt+0x1d9c>
   12e58:	mov	r7, #0
   12e5c:	mov	r8, #0
   12e60:	mov	r2, r0
   12e64:	b	12f44 <__assert_fail@plt+0x1e48>
   12e68:	tst	r4, #1
   12e6c:	bne	12e98 <__assert_fail@plt+0x1d9c>
   12e70:	mov	r2, r0
   12e74:	b	12ec0 <__assert_fail@plt+0x1dc4>
   12e78:	mov	r0, #1
   12e7c:	str	r0, [fp, #-72]	; 0xffffffb8
   12e80:	mov	r8, #0
   12e84:	mov	r7, #5
   12e88:	b	12f04 <__assert_fail@plt+0x1e08>
   12e8c:	mov	r2, #1
   12e90:	tst	r4, #1
   12e94:	beq	12ec0 <__assert_fail@plt+0x1dc4>
   12e98:	mov	r1, #1
   12e9c:	str	r1, [fp, #-72]	; 0xffffffb8
   12ea0:	mov	r8, #0
   12ea4:	mov	r7, #2
   12ea8:	movw	r1, #26035	; 0x65b3
   12eac:	movt	r1, #1
   12eb0:	str	r1, [fp, #-84]	; 0xffffffac
   12eb4:	mov	r2, r0
   12eb8:	mov	r3, #1
   12ebc:	b	12f48 <__assert_fail@plt+0x1e4c>
   12ec0:	mov	r8, #1
   12ec4:	mov	r7, #2
   12ec8:	cmp	sl, #0
   12ecc:	movne	r0, #39	; 0x27
   12ed0:	strbne	r0, [r5]
   12ed4:	movw	r0, #26035	; 0x65b3
   12ed8:	movt	r0, #1
   12edc:	str	r0, [fp, #-84]	; 0xffffffac
   12ee0:	mov	r0, #1
   12ee4:	str	r0, [fp, #-72]	; 0xffffffb8
   12ee8:	b	12f44 <__assert_fail@plt+0x1e48>
   12eec:	mov	r7, #5
   12ef0:	tst	r4, #1
   12ef4:	beq	12f1c <__assert_fail@plt+0x1e20>
   12ef8:	mov	r0, #1
   12efc:	str	r0, [fp, #-72]	; 0xffffffb8
   12f00:	mov	r8, #0
   12f04:	movw	r0, #26031	; 0x65af
   12f08:	movt	r0, #1
   12f0c:	str	r0, [fp, #-84]	; 0xffffffac
   12f10:	mov	r2, #1
   12f14:	mov	r3, #1
   12f18:	b	12f48 <__assert_fail@plt+0x1e4c>
   12f1c:	cmp	sl, #0
   12f20:	movne	r0, #34	; 0x22
   12f24:	strbne	r0, [r5]
   12f28:	mov	r8, #1
   12f2c:	movw	r0, #26031	; 0x65af
   12f30:	movt	r0, #1
   12f34:	str	r0, [fp, #-84]	; 0xffffffac
   12f38:	mov	r0, #1
   12f3c:	str	r0, [fp, #-72]	; 0xffffffb8
   12f40:	mov	r2, #1
   12f44:	mov	r3, #0
   12f48:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f4c:	cmp	r0, #0
   12f50:	movwne	r0, #1
   12f54:	and	r1, r0, r3
   12f58:	and	r1, r2, r1
   12f5c:	str	r1, [sp, #56]	; 0x38
   12f60:	sub	r1, r7, #2
   12f64:	clz	r1, r1
   12f68:	lsr	r1, r1, #5
   12f6c:	and	r1, r1, r3
   12f70:	str	r1, [sp, #68]	; 0x44
   12f74:	str	r7, [fp, #-64]	; 0xffffffc0
   12f78:	subs	r1, r7, #2
   12f7c:	movwne	r1, #1
   12f80:	eor	r4, r3, #1
   12f84:	str	r4, [fp, #-88]	; 0xffffffa8
   12f88:	orr	r4, r1, r4
   12f8c:	str	r4, [sp, #72]	; 0x48
   12f90:	and	r1, r1, r2
   12f94:	and	r0, r0, r1
   12f98:	str	r0, [fp, #-60]	; 0xffffffc4
   12f9c:	str	r3, [fp, #-76]	; 0xffffffb4
   12fa0:	orr	r0, r1, r3
   12fa4:	eor	r0, r0, #1
   12fa8:	ldr	r1, [fp, #16]
   12fac:	clz	r1, r1
   12fb0:	lsr	r1, r1, #5
   12fb4:	orr	r0, r1, r0
   12fb8:	str	r0, [fp, #-68]	; 0xffffffbc
   12fbc:	str	r2, [sp, #92]	; 0x5c
   12fc0:	eor	r0, r2, #1
   12fc4:	str	r0, [sp, #60]	; 0x3c
   12fc8:	mov	r7, #0
   12fcc:	cmn	lr, #1
   12fd0:	beq	12fe0 <__assert_fail@plt+0x1ee4>
   12fd4:	cmp	r7, lr
   12fd8:	bne	12fec <__assert_fail@plt+0x1ef0>
   12fdc:	b	13af8 <__assert_fail@plt+0x29fc>
   12fe0:	ldrb	r0, [ip, r7]
   12fe4:	cmp	r0, #0
   12fe8:	beq	13af8 <__assert_fail@plt+0x29fc>
   12fec:	mov	r9, #0
   12ff0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12ff4:	cmp	r0, #0
   12ff8:	beq	1302c <__assert_fail@plt+0x1f30>
   12ffc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13000:	add	r4, r7, r0
   13004:	cmp	r0, #2
   13008:	bcc	13024 <__assert_fail@plt+0x1f28>
   1300c:	cmn	lr, #1
   13010:	bne	13024 <__assert_fail@plt+0x1f28>
   13014:	mov	r0, ip
   13018:	bl	11000 <strlen@plt>
   1301c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13020:	mov	lr, r0
   13024:	cmp	r4, lr
   13028:	bls	13038 <__assert_fail@plt+0x1f3c>
   1302c:	mov	r0, #0
   13030:	str	r0, [fp, #-52]	; 0xffffffcc
   13034:	b	1307c <__assert_fail@plt+0x1f80>
   13038:	mov	r4, lr
   1303c:	add	r0, ip, r7
   13040:	ldr	r1, [fp, #-84]	; 0xffffffac
   13044:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13048:	bl	10ff4 <bcmp@plt>
   1304c:	cmp	r0, #0
   13050:	mov	r1, r0
   13054:	movwne	r1, #1
   13058:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1305c:	orr	r1, r1, r2
   13060:	tst	r1, #1
   13064:	beq	13bcc <__assert_fail@plt+0x2ad0>
   13068:	clz	r0, r0
   1306c:	lsr	r0, r0, #5
   13070:	str	r0, [fp, #-52]	; 0xffffffcc
   13074:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13078:	mov	lr, r4
   1307c:	ldrb	r4, [ip, r7]
   13080:	cmp	r4, #126	; 0x7e
   13084:	bhi	135b4 <__assert_fail@plt+0x24b8>
   13088:	mov	r6, #1
   1308c:	mov	r2, #110	; 0x6e
   13090:	mov	r0, #97	; 0x61
   13094:	add	r3, pc, #4
   13098:	mov	r1, #0
   1309c:	ldr	pc, [r3, r4, lsl #2]
   130a0:	andeq	r3, r1, r4, lsl r4
   130a4:			; <UNDEFINED> instruction: 0x000135b4
   130a8:			; <UNDEFINED> instruction: 0x000135b4
   130ac:			; <UNDEFINED> instruction: 0x000135b4
   130b0:			; <UNDEFINED> instruction: 0x000135b4
   130b4:			; <UNDEFINED> instruction: 0x000135b4
   130b8:			; <UNDEFINED> instruction: 0x000135b4
   130bc:	andeq	r3, r1, r8, lsl #13
   130c0:	strdeq	r3, [r1], -r4
   130c4:	andeq	r3, r1, ip, ror #7
   130c8:	andeq	r3, r1, r0, lsl #8
   130cc:	andeq	r3, r1, ip, lsl r5
   130d0:	andeq	r3, r1, r4, ror #7
   130d4:	strdeq	r3, [r1], -ip
   130d8:			; <UNDEFINED> instruction: 0x000135b4
   130dc:			; <UNDEFINED> instruction: 0x000135b4
   130e0:			; <UNDEFINED> instruction: 0x000135b4
   130e4:			; <UNDEFINED> instruction: 0x000135b4
   130e8:			; <UNDEFINED> instruction: 0x000135b4
   130ec:			; <UNDEFINED> instruction: 0x000135b4
   130f0:			; <UNDEFINED> instruction: 0x000135b4
   130f4:			; <UNDEFINED> instruction: 0x000135b4
   130f8:			; <UNDEFINED> instruction: 0x000135b4
   130fc:			; <UNDEFINED> instruction: 0x000135b4
   13100:			; <UNDEFINED> instruction: 0x000135b4
   13104:			; <UNDEFINED> instruction: 0x000135b4
   13108:			; <UNDEFINED> instruction: 0x000135b4
   1310c:			; <UNDEFINED> instruction: 0x000135b4
   13110:			; <UNDEFINED> instruction: 0x000135b4
   13114:			; <UNDEFINED> instruction: 0x000135b4
   13118:			; <UNDEFINED> instruction: 0x000135b4
   1311c:			; <UNDEFINED> instruction: 0x000135b4
   13120:	muleq	r1, r8, r3
   13124:	muleq	r1, ip, r3
   13128:	muleq	r1, ip, r3
   1312c:	andeq	r3, r1, r4, lsl #7
   13130:	muleq	r1, ip, r3
   13134:	muleq	r1, ip, r2
   13138:	muleq	r1, ip, r3
   1313c:	andeq	r3, r1, r4, lsr #10
   13140:	muleq	r1, ip, r3
   13144:	muleq	r1, ip, r3
   13148:	muleq	r1, ip, r3
   1314c:	muleq	r1, ip, r2
   13150:	muleq	r1, ip, r2
   13154:	muleq	r1, ip, r2
   13158:	muleq	r1, ip, r2
   1315c:	muleq	r1, ip, r2
   13160:	muleq	r1, ip, r2
   13164:	muleq	r1, ip, r2
   13168:	muleq	r1, ip, r2
   1316c:	muleq	r1, ip, r2
   13170:	muleq	r1, ip, r2
   13174:	muleq	r1, ip, r2
   13178:	muleq	r1, ip, r2
   1317c:	muleq	r1, ip, r2
   13180:	muleq	r1, ip, r2
   13184:	muleq	r1, ip, r2
   13188:	muleq	r1, ip, r2
   1318c:	muleq	r1, ip, r3
   13190:	muleq	r1, ip, r3
   13194:	muleq	r1, ip, r3
   13198:	muleq	r1, ip, r3
   1319c:	andeq	r3, r1, ip, ror #9
   131a0:			; <UNDEFINED> instruction: 0x000135b4
   131a4:	muleq	r1, ip, r2
   131a8:	muleq	r1, ip, r2
   131ac:	muleq	r1, ip, r2
   131b0:	muleq	r1, ip, r2
   131b4:	muleq	r1, ip, r2
   131b8:	muleq	r1, ip, r2
   131bc:	muleq	r1, ip, r2
   131c0:	muleq	r1, ip, r2
   131c4:	muleq	r1, ip, r2
   131c8:	muleq	r1, ip, r2
   131cc:	muleq	r1, ip, r2
   131d0:	muleq	r1, ip, r2
   131d4:	muleq	r1, ip, r2
   131d8:	muleq	r1, ip, r2
   131dc:	muleq	r1, ip, r2
   131e0:	muleq	r1, ip, r2
   131e4:	muleq	r1, ip, r2
   131e8:	muleq	r1, ip, r2
   131ec:	muleq	r1, ip, r2
   131f0:	muleq	r1, ip, r2
   131f4:	muleq	r1, ip, r2
   131f8:	muleq	r1, ip, r2
   131fc:	muleq	r1, ip, r2
   13200:	muleq	r1, ip, r2
   13204:	muleq	r1, ip, r2
   13208:	muleq	r1, ip, r2
   1320c:	muleq	r1, ip, r3
   13210:	andeq	r3, r1, r4, asr #7
   13214:	muleq	r1, ip, r2
   13218:	muleq	r1, ip, r3
   1321c:	muleq	r1, ip, r2
   13220:	muleq	r1, ip, r3
   13224:	muleq	r1, ip, r2
   13228:	muleq	r1, ip, r2
   1322c:	muleq	r1, ip, r2
   13230:	muleq	r1, ip, r2
   13234:	muleq	r1, ip, r2
   13238:	muleq	r1, ip, r2
   1323c:	muleq	r1, ip, r2
   13240:	muleq	r1, ip, r2
   13244:	muleq	r1, ip, r2
   13248:	muleq	r1, ip, r2
   1324c:	muleq	r1, ip, r2
   13250:	muleq	r1, ip, r2
   13254:	muleq	r1, ip, r2
   13258:	muleq	r1, ip, r2
   1325c:	muleq	r1, ip, r2
   13260:	muleq	r1, ip, r2
   13264:	muleq	r1, ip, r2
   13268:	muleq	r1, ip, r2
   1326c:	muleq	r1, ip, r2
   13270:	muleq	r1, ip, r2
   13274:	muleq	r1, ip, r2
   13278:	muleq	r1, ip, r2
   1327c:	muleq	r1, ip, r2
   13280:	muleq	r1, ip, r2
   13284:	muleq	r1, ip, r2
   13288:	muleq	r1, ip, r2
   1328c:	andeq	r3, r1, r8, asr r3
   13290:	muleq	r1, ip, r3
   13294:	andeq	r3, r1, r8, asr r3
   13298:	andeq	r3, r1, r4, lsl #7
   1329c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   132a0:	tst	r0, #1
   132a4:	bne	132d0 <__assert_fail@plt+0x21d4>
   132a8:	ubfx	r0, r4, #5, #3
   132ac:	ldr	r1, [fp, #16]
   132b0:	ldr	r0, [r1, r0, lsl #2]
   132b4:	and	r1, r4, #31
   132b8:	mov	r2, #1
   132bc:	tst	r0, r2, lsl r1
   132c0:	beq	132d0 <__assert_fail@plt+0x21d4>
   132c4:	mov	r0, r4
   132c8:	mov	r1, r6
   132cc:	b	132e4 <__assert_fail@plt+0x21e8>
   132d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   132d4:	cmp	r0, #0
   132d8:	mov	r0, r4
   132dc:	mov	r1, r6
   132e0:	beq	1361c <__assert_fail@plt+0x2520>
   132e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   132e8:	tst	r2, #1
   132ec:	bne	13be0 <__assert_fail@plt+0x2ae4>
   132f0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   132f4:	subs	r2, r2, #2
   132f8:	movwne	r2, #1
   132fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13300:	orr	r2, r2, r3
   13304:	tst	r2, #1
   13308:	bne	13344 <__assert_fail@plt+0x2248>
   1330c:	cmp	r8, sl
   13310:	movcc	r2, #39	; 0x27
   13314:	strbcc	r2, [r5, r8]
   13318:	add	r2, r8, #1
   1331c:	cmp	r2, sl
   13320:	movcc	r3, #36	; 0x24
   13324:	strbcc	r3, [r5, r2]
   13328:	add	r2, r8, #2
   1332c:	cmp	r2, sl
   13330:	movcc	r3, #39	; 0x27
   13334:	strbcc	r3, [r5, r2]
   13338:	add	r8, r8, #3
   1333c:	mov	r2, #1
   13340:	str	r2, [fp, #-56]	; 0xffffffc8
   13344:	cmp	r8, sl
   13348:	movcc	r2, #92	; 0x5c
   1334c:	strbcc	r2, [r5, r8]
   13350:	add	r8, r8, #1
   13354:	b	13660 <__assert_fail@plt+0x2564>
   13358:	cmp	lr, #1
   1335c:	beq	13384 <__assert_fail@plt+0x2288>
   13360:	mov	r6, #0
   13364:	cmn	lr, #1
   13368:	bne	13390 <__assert_fail@plt+0x2294>
   1336c:	ldrb	r0, [ip, #1]
   13370:	cmp	r0, #0
   13374:	beq	13384 <__assert_fail@plt+0x2288>
   13378:	mvn	lr, #0
   1337c:	mov	r9, #0
   13380:	b	1329c <__assert_fail@plt+0x21a0>
   13384:	mov	r6, #0
   13388:	cmp	r7, #0
   1338c:	beq	13398 <__assert_fail@plt+0x229c>
   13390:	mov	r9, #0
   13394:	b	1329c <__assert_fail@plt+0x21a0>
   13398:	mov	r1, #1
   1339c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   133a0:	cmp	r0, #2
   133a4:	bne	133bc <__assert_fail@plt+0x22c0>
   133a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   133ac:	tst	r0, #1
   133b0:	mov	r6, r1
   133b4:	beq	1329c <__assert_fail@plt+0x21a0>
   133b8:	b	13be0 <__assert_fail@plt+0x2ae4>
   133bc:	mov	r6, r1
   133c0:	b	1329c <__assert_fail@plt+0x21a0>
   133c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   133c8:	cmp	r0, #2
   133cc:	bne	13600 <__assert_fail@plt+0x2504>
   133d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   133d4:	tst	r0, #1
   133d8:	bne	13be0 <__assert_fail@plt+0x2ae4>
   133dc:	mov	r9, #0
   133e0:	b	13614 <__assert_fail@plt+0x2518>
   133e4:	mov	r0, #102	; 0x66
   133e8:	b	13688 <__assert_fail@plt+0x258c>
   133ec:	mov	r2, #116	; 0x74
   133f0:	b	13400 <__assert_fail@plt+0x2304>
   133f4:	mov	r0, #98	; 0x62
   133f8:	b	13688 <__assert_fail@plt+0x258c>
   133fc:	mov	r2, #114	; 0x72
   13400:	ldr	r0, [sp, #72]	; 0x48
   13404:	tst	r0, #1
   13408:	mov	r0, r2
   1340c:	bne	13688 <__assert_fail@plt+0x258c>
   13410:	b	13be0 <__assert_fail@plt+0x2ae4>
   13414:	ldr	r0, [sp, #92]	; 0x5c
   13418:	tst	r0, #1
   1341c:	beq	136a4 <__assert_fail@plt+0x25a8>
   13420:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13424:	tst	r0, #1
   13428:	bne	13be0 <__assert_fail@plt+0x2ae4>
   1342c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13430:	subs	r0, r0, #2
   13434:	movwne	r0, #1
   13438:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1343c:	orr	r0, r0, r1
   13440:	tst	r0, #1
   13444:	bne	13480 <__assert_fail@plt+0x2384>
   13448:	cmp	r8, sl
   1344c:	movcc	r0, #39	; 0x27
   13450:	strbcc	r0, [r5, r8]
   13454:	add	r0, r8, #1
   13458:	cmp	r0, sl
   1345c:	movcc	r1, #36	; 0x24
   13460:	strbcc	r1, [r5, r0]
   13464:	add	r0, r8, #2
   13468:	cmp	r0, sl
   1346c:	movcc	r1, #39	; 0x27
   13470:	strbcc	r1, [r5, r0]
   13474:	add	r8, r8, #3
   13478:	mov	r0, #1
   1347c:	str	r0, [fp, #-56]	; 0xffffffc8
   13480:	cmp	r8, sl
   13484:	movcc	r0, #92	; 0x5c
   13488:	strbcc	r0, [r5, r8]
   1348c:	add	r0, r8, #1
   13490:	mov	r6, #0
   13494:	mov	r9, #1
   13498:	mov	r4, #48	; 0x30
   1349c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   134a0:	cmp	r1, #2
   134a4:	beq	13868 <__assert_fail@plt+0x276c>
   134a8:	add	r1, r7, #1
   134ac:	cmp	r1, lr
   134b0:	bcs	13868 <__assert_fail@plt+0x276c>
   134b4:	ldrb	r1, [ip, r1]
   134b8:	sub	r1, r1, #48	; 0x30
   134bc:	uxtb	r1, r1
   134c0:	cmp	r1, #9
   134c4:	bhi	13868 <__assert_fail@plt+0x276c>
   134c8:	cmp	r0, sl
   134cc:	movcc	r1, #48	; 0x30
   134d0:	strbcc	r1, [r5, r0]
   134d4:	add	r0, r8, #2
   134d8:	cmp	r0, sl
   134dc:	movcc	r1, #48	; 0x30
   134e0:	strbcc	r1, [r5, r0]
   134e4:	add	r8, r8, #3
   134e8:	b	1329c <__assert_fail@plt+0x21a0>
   134ec:	mov	r9, #0
   134f0:	mov	r4, #63	; 0x3f
   134f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   134f8:	cmp	r0, #5
   134fc:	beq	13870 <__assert_fail@plt+0x2774>
   13500:	cmp	r0, #2
   13504:	bne	13918 <__assert_fail@plt+0x281c>
   13508:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1350c:	tst	r0, #1
   13510:	mov	r6, #0
   13514:	beq	1329c <__assert_fail@plt+0x21a0>
   13518:	b	13be0 <__assert_fail@plt+0x2ae4>
   1351c:	mov	r0, #118	; 0x76
   13520:	b	13688 <__assert_fail@plt+0x258c>
   13524:	mov	r4, #39	; 0x27
   13528:	mov	r0, #1
   1352c:	str	r0, [sp, #64]	; 0x40
   13530:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13534:	cmp	r0, #2
   13538:	bne	136c0 <__assert_fail@plt+0x25c4>
   1353c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13540:	tst	r0, #1
   13544:	bne	13be0 <__assert_fail@plt+0x2ae4>
   13548:	ldr	r2, [sp, #84]	; 0x54
   1354c:	cmp	r2, #0
   13550:	mov	r0, r2
   13554:	movwne	r0, #1
   13558:	clz	r1, sl
   1355c:	lsr	r1, r1, #5
   13560:	orrs	r0, r0, r1
   13564:	moveq	r2, sl
   13568:	str	r2, [sp, #84]	; 0x54
   1356c:	moveq	sl, r0
   13570:	cmp	r8, sl
   13574:	movcc	r0, #39	; 0x27
   13578:	strbcc	r0, [r5, r8]
   1357c:	add	r0, r8, #1
   13580:	cmp	r0, sl
   13584:	movcc	r1, #92	; 0x5c
   13588:	strbcc	r1, [r5, r0]
   1358c:	add	r0, r8, #2
   13590:	cmp	r0, sl
   13594:	movcc	r1, #39	; 0x27
   13598:	strbcc	r1, [r5, r0]
   1359c:	add	r8, r8, #3
   135a0:	mov	r0, #0
   135a4:	str	r0, [fp, #-56]	; 0xffffffc8
   135a8:	mov	r9, #0
   135ac:	mov	r6, #1
   135b0:	b	1329c <__assert_fail@plt+0x21a0>
   135b4:	ldr	r0, [sp, #44]	; 0x2c
   135b8:	cmp	r0, #1
   135bc:	bne	136c8 <__assert_fail@plt+0x25cc>
   135c0:	str	lr, [sp, #32]
   135c4:	bl	10fdc <__ctype_b_loc@plt>
   135c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   135cc:	ldr	r0, [r0]
   135d0:	add	r0, r0, r4, lsl #1
   135d4:	ldrb	r0, [r0, #1]
   135d8:	ubfx	r6, r0, #6, #1
   135dc:	mov	r2, #1
   135e0:	ldr	r0, [sp, #60]	; 0x3c
   135e4:	orr	r1, r6, r0
   135e8:	cmp	r2, #1
   135ec:	bhi	13920 <__assert_fail@plt+0x2824>
   135f0:	tst	r1, #1
   135f4:	beq	13920 <__assert_fail@plt+0x2824>
   135f8:	ldr	lr, [sp, #32]
   135fc:	b	1329c <__assert_fail@plt+0x21a0>
   13600:	mov	r9, #0
   13604:	mov	r0, #92	; 0x5c
   13608:	ldr	r1, [sp, #56]	; 0x38
   1360c:	cmp	r1, #0
   13610:	beq	13688 <__assert_fail@plt+0x258c>
   13614:	mov	r4, #92	; 0x5c
   13618:	mov	r6, #0
   1361c:	cmp	r9, #0
   13620:	bne	13658 <__assert_fail@plt+0x255c>
   13624:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13628:	tst	r0, #1
   1362c:	beq	13658 <__assert_fail@plt+0x255c>
   13630:	cmp	r8, sl
   13634:	movcc	r0, #39	; 0x27
   13638:	strbcc	r0, [r5, r8]
   1363c:	add	r0, r8, #1
   13640:	cmp	r0, sl
   13644:	movcc	r1, #39	; 0x27
   13648:	strbcc	r1, [r5, r0]
   1364c:	add	r8, r8, #2
   13650:	mov	r0, #0
   13654:	str	r0, [fp, #-56]	; 0xffffffc8
   13658:	mov	r1, r6
   1365c:	mov	r0, r4
   13660:	cmp	r8, sl
   13664:	strbcc	r0, [r5, r8]
   13668:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1366c:	and	r0, r0, r1
   13670:	str	r0, [fp, #-48]	; 0xffffffd0
   13674:	add	r8, r8, #1
   13678:	add	r7, r7, #1
   1367c:	cmn	lr, #1
   13680:	bne	12fd4 <__assert_fail@plt+0x1ed8>
   13684:	b	12fe0 <__assert_fail@plt+0x1ee4>
   13688:	mov	r9, #0
   1368c:	ldr	r1, [sp, #92]	; 0x5c
   13690:	tst	r1, #1
   13694:	mov	r6, #0
   13698:	mov	r1, #0
   1369c:	beq	1329c <__assert_fail@plt+0x21a0>
   136a0:	b	132e4 <__assert_fail@plt+0x21e8>
   136a4:	mov	r4, #0
   136a8:	ldr	r0, [sp, #40]	; 0x28
   136ac:	cmp	r0, #0
   136b0:	mov	r9, #0
   136b4:	mov	r6, #0
   136b8:	beq	1329c <__assert_fail@plt+0x21a0>
   136bc:	b	13678 <__assert_fail@plt+0x257c>
   136c0:	mov	r6, #1
   136c4:	b	1329c <__assert_fail@plt+0x21a0>
   136c8:	mov	r0, #0
   136cc:	str	r0, [fp, #-36]	; 0xffffffdc
   136d0:	str	r0, [fp, #-40]	; 0xffffffd8
   136d4:	cmn	lr, #1
   136d8:	bne	136ec <__assert_fail@plt+0x25f0>
   136dc:	mov	r0, ip
   136e0:	bl	11000 <strlen@plt>
   136e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   136e8:	mov	lr, r0
   136ec:	ldr	r0, [sp, #76]	; 0x4c
   136f0:	add	r0, r0, r7
   136f4:	str	r0, [sp, #24]
   136f8:	mov	r6, #1
   136fc:	mov	r2, #0
   13700:	sub	r0, fp, #40	; 0x28
   13704:	mov	r3, r0
   13708:	str	r5, [sp, #28]
   1370c:	str	lr, [sp, #32]
   13710:	b	13754 <__assert_fail@plt+0x2658>
   13714:	ldr	r5, [sp, #52]	; 0x34
   13718:	add	r5, r0, r5
   1371c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13720:	bl	10f40 <iswprint@plt>
   13724:	cmp	r0, #0
   13728:	movwne	r0, #1
   1372c:	and	r6, r6, r0
   13730:	sub	r0, fp, #40	; 0x28
   13734:	bl	10ef8 <mbsinit@plt>
   13738:	sub	r3, fp, #40	; 0x28
   1373c:	mov	r2, r5
   13740:	ldr	lr, [sp, #32]
   13744:	cmp	r0, #0
   13748:	ldr	r5, [sp, #28]
   1374c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13750:	bne	135e0 <__assert_fail@plt+0x24e4>
   13754:	str	r2, [sp, #52]	; 0x34
   13758:	add	r0, r2, r7
   1375c:	add	r1, ip, r0
   13760:	str	r0, [sp, #48]	; 0x30
   13764:	sub	r2, lr, r0
   13768:	sub	r0, fp, #44	; 0x2c
   1376c:	bl	159d0 <__assert_fail@plt+0x48d4>
   13770:	cmp	r0, #0
   13774:	beq	13aec <__assert_fail@plt+0x29f0>
   13778:	cmn	r0, #1
   1377c:	beq	13aa8 <__assert_fail@plt+0x29ac>
   13780:	cmn	r0, #2
   13784:	ldr	lr, [sp, #32]
   13788:	beq	13ab0 <__assert_fail@plt+0x29b4>
   1378c:	cmp	r0, #2
   13790:	mov	r1, #0
   13794:	movwcc	r1, #1
   13798:	ldr	r2, [sp, #68]	; 0x44
   1379c:	eor	r2, r2, #1
   137a0:	orrs	r1, r2, r1
   137a4:	bne	13714 <__assert_fail@plt+0x2618>
   137a8:	ldr	r1, [sp, #52]	; 0x34
   137ac:	ldr	r2, [sp, #24]
   137b0:	add	r1, r2, r1
   137b4:	sub	r2, r0, #1
   137b8:	b	137c8 <__assert_fail@plt+0x26cc>
   137bc:	add	r1, r1, #1
   137c0:	subs	r2, r2, #1
   137c4:	beq	13714 <__assert_fail@plt+0x2618>
   137c8:	ldrb	r3, [r1]
   137cc:	sub	r3, r3, #91	; 0x5b
   137d0:	cmp	r3, #33	; 0x21
   137d4:	bhi	137bc <__assert_fail@plt+0x26c0>
   137d8:	add	r5, pc, #0
   137dc:	ldr	pc, [r5, r3, lsl #2]
   137e0:	ldrdeq	r3, [r1], -r8
   137e4:	ldrdeq	r3, [r1], -r8
   137e8:			; <UNDEFINED> instruction: 0x000137bc
   137ec:	ldrdeq	r3, [r1], -r8
   137f0:			; <UNDEFINED> instruction: 0x000137bc
   137f4:	ldrdeq	r3, [r1], -r8
   137f8:			; <UNDEFINED> instruction: 0x000137bc
   137fc:			; <UNDEFINED> instruction: 0x000137bc
   13800:			; <UNDEFINED> instruction: 0x000137bc
   13804:			; <UNDEFINED> instruction: 0x000137bc
   13808:			; <UNDEFINED> instruction: 0x000137bc
   1380c:			; <UNDEFINED> instruction: 0x000137bc
   13810:			; <UNDEFINED> instruction: 0x000137bc
   13814:			; <UNDEFINED> instruction: 0x000137bc
   13818:			; <UNDEFINED> instruction: 0x000137bc
   1381c:			; <UNDEFINED> instruction: 0x000137bc
   13820:			; <UNDEFINED> instruction: 0x000137bc
   13824:			; <UNDEFINED> instruction: 0x000137bc
   13828:			; <UNDEFINED> instruction: 0x000137bc
   1382c:			; <UNDEFINED> instruction: 0x000137bc
   13830:			; <UNDEFINED> instruction: 0x000137bc
   13834:			; <UNDEFINED> instruction: 0x000137bc
   13838:			; <UNDEFINED> instruction: 0x000137bc
   1383c:			; <UNDEFINED> instruction: 0x000137bc
   13840:			; <UNDEFINED> instruction: 0x000137bc
   13844:			; <UNDEFINED> instruction: 0x000137bc
   13848:			; <UNDEFINED> instruction: 0x000137bc
   1384c:			; <UNDEFINED> instruction: 0x000137bc
   13850:			; <UNDEFINED> instruction: 0x000137bc
   13854:			; <UNDEFINED> instruction: 0x000137bc
   13858:			; <UNDEFINED> instruction: 0x000137bc
   1385c:			; <UNDEFINED> instruction: 0x000137bc
   13860:			; <UNDEFINED> instruction: 0x000137bc
   13864:	ldrdeq	r3, [r1], -r8
   13868:	mov	r8, r0
   1386c:	b	1329c <__assert_fail@plt+0x21a0>
   13870:	ldr	r0, [sp, #36]	; 0x24
   13874:	cmp	r0, #0
   13878:	beq	13918 <__assert_fail@plt+0x281c>
   1387c:	add	r0, r7, #2
   13880:	cmp	r0, lr
   13884:	bcs	13918 <__assert_fail@plt+0x281c>
   13888:	add	r1, r7, ip
   1388c:	ldrb	r1, [r1, #1]
   13890:	cmp	r1, #63	; 0x3f
   13894:	bne	13918 <__assert_fail@plt+0x281c>
   13898:	ldrb	r1, [ip, r0]
   1389c:	sub	r2, r1, #33	; 0x21
   138a0:	cmp	r2, #29
   138a4:	bhi	13918 <__assert_fail@plt+0x281c>
   138a8:	mov	r3, #1
   138ac:	movw	r6, #20929	; 0x51c1
   138b0:	movt	r6, #14336	; 0x3800
   138b4:	tst	r6, r3, lsl r2
   138b8:	beq	13918 <__assert_fail@plt+0x281c>
   138bc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   138c0:	tst	r2, #1
   138c4:	bne	13be0 <__assert_fail@plt+0x2ae4>
   138c8:	cmp	r8, sl
   138cc:	movcc	r2, #63	; 0x3f
   138d0:	strbcc	r2, [r5, r8]
   138d4:	add	r2, r8, #1
   138d8:	cmp	r2, sl
   138dc:	movcc	r3, #34	; 0x22
   138e0:	strbcc	r3, [r5, r2]
   138e4:	add	r2, r8, #2
   138e8:	cmp	r2, sl
   138ec:	movcc	r3, #34	; 0x22
   138f0:	strbcc	r3, [r5, r2]
   138f4:	add	r2, r8, #3
   138f8:	cmp	r2, sl
   138fc:	movcc	r3, #63	; 0x3f
   13900:	strbcc	r3, [r5, r2]
   13904:	add	r8, r8, #4
   13908:	mov	r7, r0
   1390c:	mov	r4, r1
   13910:	mov	r6, #0
   13914:	b	1329c <__assert_fail@plt+0x21a0>
   13918:	mov	r6, #0
   1391c:	b	1329c <__assert_fail@plt+0x21a0>
   13920:	add	r0, r2, r7
   13924:	str	r0, [sp, #52]	; 0x34
   13928:	mov	r2, #0
   1392c:	ldr	lr, [sp, #32]
   13930:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13934:	str	r1, [sp, #48]	; 0x30
   13938:	tst	r1, #1
   1393c:	bne	13a18 <__assert_fail@plt+0x291c>
   13940:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13944:	tst	r1, #1
   13948:	bne	13be0 <__assert_fail@plt+0x2ae4>
   1394c:	mov	r3, r0
   13950:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13954:	subs	r1, r0, #2
   13958:	movwne	r1, #1
   1395c:	orr	r1, r1, r3
   13960:	tst	r1, #1
   13964:	bne	1399c <__assert_fail@plt+0x28a0>
   13968:	cmp	r8, sl
   1396c:	movcc	r0, #39	; 0x27
   13970:	strbcc	r0, [r5, r8]
   13974:	add	r2, r8, #1
   13978:	cmp	r2, sl
   1397c:	movcc	r0, #36	; 0x24
   13980:	strbcc	r0, [r5, r2]
   13984:	add	r2, r8, #2
   13988:	cmp	r2, sl
   1398c:	movcc	r0, #39	; 0x27
   13990:	strbcc	r0, [r5, r2]
   13994:	add	r8, r8, #3
   13998:	mov	r3, #1
   1399c:	cmp	r8, sl
   139a0:	movcc	r1, #92	; 0x5c
   139a4:	strbcc	r1, [r5, r8]
   139a8:	add	r2, r8, #1
   139ac:	cmp	r2, sl
   139b0:	bcs	139c4 <__assert_fail@plt+0x28c8>
   139b4:	uxtb	r1, r4
   139b8:	mov	r0, #48	; 0x30
   139bc:	orr	r1, r0, r1, lsr #6
   139c0:	strb	r1, [r5, r2]
   139c4:	add	r2, r8, #2
   139c8:	cmp	r2, sl
   139cc:	lsrcc	r1, r4, #3
   139d0:	movcc	r0, #6
   139d4:	bficc	r1, r0, #3, #29
   139d8:	strbcc	r1, [r5, r2]
   139dc:	mov	r0, #6
   139e0:	bfi	r4, r0, #3, #29
   139e4:	add	r8, r8, #3
   139e8:	mov	r2, #1
   139ec:	mov	r0, r3
   139f0:	b	13a3c <__assert_fail@plt+0x2940>
   139f4:	cmp	r8, sl
   139f8:	strbcc	r4, [r5, r8]
   139fc:	ldr	r1, [sp, #76]	; 0x4c
   13a00:	ldrb	r4, [r1, r7]
   13a04:	add	r8, r8, #1
   13a08:	mov	r7, r3
   13a0c:	ldr	r1, [sp, #48]	; 0x30
   13a10:	tst	r1, #1
   13a14:	beq	13940 <__assert_fail@plt+0x2844>
   13a18:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13a1c:	tst	r1, #1
   13a20:	beq	13a34 <__assert_fail@plt+0x2938>
   13a24:	cmp	r8, sl
   13a28:	movcc	r1, #92	; 0x5c
   13a2c:	strbcc	r1, [r5, r8]
   13a30:	add	r8, r8, #1
   13a34:	mov	r1, #0
   13a38:	str	r1, [fp, #-52]	; 0xffffffcc
   13a3c:	and	r9, r2, #1
   13a40:	add	r3, r7, #1
   13a44:	ldr	r1, [sp, #52]	; 0x34
   13a48:	cmp	r1, r3
   13a4c:	bls	13a90 <__assert_fail@plt+0x2994>
   13a50:	cmp	r9, #0
   13a54:	movwne	r9, #1
   13a58:	mvn	r1, r0
   13a5c:	orr	r1, r1, r9
   13a60:	tst	r1, #1
   13a64:	bne	139f4 <__assert_fail@plt+0x28f8>
   13a68:	cmp	r8, sl
   13a6c:	movcc	r1, #39	; 0x27
   13a70:	strbcc	r1, [r5, r8]
   13a74:	add	r1, r8, #1
   13a78:	cmp	r1, sl
   13a7c:	movcc	r0, #39	; 0x27
   13a80:	strbcc	r0, [r5, r1]
   13a84:	add	r8, r8, #2
   13a88:	mov	r0, #0
   13a8c:	b	139f4 <__assert_fail@plt+0x28f8>
   13a90:	str	r0, [fp, #-56]	; 0xffffffc8
   13a94:	cmp	r9, #0
   13a98:	movwne	r9, #1
   13a9c:	cmp	r9, #0
   13aa0:	beq	13624 <__assert_fail@plt+0x2528>
   13aa4:	b	13658 <__assert_fail@plt+0x255c>
   13aa8:	mov	r6, #0
   13aac:	b	13aec <__assert_fail@plt+0x29f0>
   13ab0:	mov	r6, #0
   13ab4:	ldr	r0, [sp, #48]	; 0x30
   13ab8:	cmp	r0, lr
   13abc:	bcs	13aec <__assert_fail@plt+0x29f0>
   13ac0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13ac4:	add	r0, ip, r7
   13ac8:	ldr	r2, [sp, #52]	; 0x34
   13acc:	ldrb	r1, [r0, r2]
   13ad0:	cmp	r1, #0
   13ad4:	beq	135e0 <__assert_fail@plt+0x24e4>
   13ad8:	add	r2, r2, #1
   13adc:	add	r1, r7, r2
   13ae0:	cmp	r1, lr
   13ae4:	bcc	13acc <__assert_fail@plt+0x29d0>
   13ae8:	b	135e0 <__assert_fail@plt+0x24e4>
   13aec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13af0:	ldr	r2, [sp, #52]	; 0x34
   13af4:	b	135e0 <__assert_fail@plt+0x24e4>
   13af8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13afc:	eor	r0, r1, #2
   13b00:	orr	r0, r0, r8
   13b04:	clz	r0, r0
   13b08:	lsr	r0, r0, #5
   13b0c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13b10:	tst	r3, r0
   13b14:	bne	13be0 <__assert_fail@plt+0x2ae4>
   13b18:	mov	r6, r5
   13b1c:	subs	r0, r1, #2
   13b20:	movwne	r0, #1
   13b24:	orr	r0, r3, r0
   13b28:	tst	r0, #1
   13b2c:	ldr	r2, [sp, #92]	; 0x5c
   13b30:	ldreq	r0, [sp, #64]	; 0x40
   13b34:	eoreq	r0, r0, #1
   13b38:	tsteq	r0, #1
   13b3c:	bne	13b7c <__assert_fail@plt+0x2a80>
   13b40:	mov	r9, lr
   13b44:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13b48:	tst	r0, #1
   13b4c:	bne	13c48 <__assert_fail@plt+0x2b4c>
   13b50:	ldr	r0, [sp, #84]	; 0x54
   13b54:	cmp	r0, #0
   13b58:	beq	13b7c <__assert_fail@plt+0x2a80>
   13b5c:	mov	r0, #0
   13b60:	str	r0, [fp, #-48]	; 0xffffffd0
   13b64:	mov	r1, #2
   13b68:	cmp	sl, #0
   13b6c:	mov	r0, r2
   13b70:	mov	r4, r3
   13b74:	ldr	r7, [sp, #84]	; 0x54
   13b78:	beq	12d54 <__assert_fail@plt+0x1c58>
   13b7c:	ldr	r1, [fp, #-84]	; 0xffffffac
   13b80:	clz	r0, r1
   13b84:	lsr	r0, r0, #5
   13b88:	orr	r0, r0, r3
   13b8c:	tst	r0, #1
   13b90:	bne	13bbc <__assert_fail@plt+0x2ac0>
   13b94:	ldrb	r0, [r1]
   13b98:	cmp	r0, #0
   13b9c:	beq	13bbc <__assert_fail@plt+0x2ac0>
   13ba0:	add	r1, r1, #1
   13ba4:	cmp	r8, sl
   13ba8:	strbcc	r0, [r6, r8]
   13bac:	add	r8, r8, #1
   13bb0:	ldrb	r0, [r1], #1
   13bb4:	cmp	r0, #0
   13bb8:	bne	13ba4 <__assert_fail@plt+0x2aa8>
   13bbc:	cmp	r8, sl
   13bc0:	movcc	r0, #0
   13bc4:	strbcc	r0, [r6, r8]
   13bc8:	b	13c3c <__assert_fail@plt+0x2b40>
   13bcc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13bd0:	mov	lr, r4
   13bd4:	b	13be0 <__assert_fail@plt+0x2ae4>
   13bd8:	ldr	r5, [sp, #28]
   13bdc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13be0:	mov	r0, #0
   13be4:	ldr	r1, [fp, #12]
   13be8:	bic	r1, r1, #2
   13bec:	mov	r2, #2
   13bf0:	ldr	r3, [sp, #92]	; 0x5c
   13bf4:	tst	r3, #1
   13bf8:	movwne	r2, #4
   13bfc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13c00:	cmp	r3, #2
   13c04:	movne	r2, r3
   13c08:	str	r2, [sp]
   13c0c:	str	r1, [sp, #4]
   13c10:	str	r0, [sp, #8]
   13c14:	ldr	r0, [sp, #80]	; 0x50
   13c18:	str	r0, [sp, #12]
   13c1c:	ldr	r0, [sp, #88]	; 0x58
   13c20:	str	r0, [sp, #16]
   13c24:	mov	r0, r5
   13c28:	mov	r1, sl
   13c2c:	mov	r2, ip
   13c30:	mov	r3, lr
   13c34:	bl	12cc8 <__assert_fail@plt+0x1bcc>
   13c38:	mov	r8, r0
   13c3c:	mov	r0, r8
   13c40:	sub	sp, fp, #28
   13c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c48:	mov	r0, #5
   13c4c:	str	r0, [sp]
   13c50:	ldr	r0, [fp, #12]
   13c54:	str	r0, [sp, #4]
   13c58:	ldr	r0, [fp, #16]
   13c5c:	str	r0, [sp, #8]
   13c60:	ldr	r0, [sp, #80]	; 0x50
   13c64:	str	r0, [sp, #12]
   13c68:	ldr	r0, [sp, #88]	; 0x58
   13c6c:	str	r0, [sp, #16]
   13c70:	mov	r0, r6
   13c74:	ldr	r1, [sp, #84]	; 0x54
   13c78:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13c7c:	mov	r3, r9
   13c80:	b	13c34 <__assert_fail@plt+0x2b38>
   13c84:	bl	110e4 <abort@plt>
   13c88:	mov	r3, r2
   13c8c:	mov	r2, #0
   13c90:	b	13c94 <__assert_fail@plt+0x2b98>
   13c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c98:	add	fp, sp, #28
   13c9c:	sub	sp, sp, #36	; 0x24
   13ca0:	mov	r4, r2
   13ca4:	str	r2, [sp, #24]
   13ca8:	mov	r5, r1
   13cac:	mov	r6, r0
   13cb0:	str	r0, [sp, #20]
   13cb4:	movw	r8, #29040	; 0x7170
   13cb8:	movt	r8, #2
   13cbc:	cmp	r3, #0
   13cc0:	movne	r8, r3
   13cc4:	bl	11018 <__errno_location@plt>
   13cc8:	str	r0, [sp, #28]
   13ccc:	ldm	r8, {r3, r9}
   13cd0:	ldr	r1, [r8, #40]	; 0x28
   13cd4:	ldr	r2, [r8, #44]	; 0x2c
   13cd8:	ldr	r7, [r0]
   13cdc:	str	r7, [sp, #32]
   13ce0:	add	sl, r8, #8
   13ce4:	cmp	r4, #0
   13ce8:	orreq	r9, r9, #1
   13cec:	stm	sp, {r3, r9, sl}
   13cf0:	str	r1, [sp, #12]
   13cf4:	str	r2, [sp, #16]
   13cf8:	mov	r0, #0
   13cfc:	mov	r1, #0
   13d00:	mov	r2, r6
   13d04:	mov	r3, r5
   13d08:	mov	r7, r5
   13d0c:	bl	12cc8 <__assert_fail@plt+0x1bcc>
   13d10:	mov	r5, r0
   13d14:	add	r4, r0, #1
   13d18:	mov	r0, r4
   13d1c:	bl	14bd8 <__assert_fail@plt+0x3adc>
   13d20:	mov	r6, r0
   13d24:	ldr	r0, [r8]
   13d28:	ldr	r1, [r8, #40]	; 0x28
   13d2c:	ldr	r2, [r8, #44]	; 0x2c
   13d30:	stm	sp, {r0, r9, sl}
   13d34:	str	r1, [sp, #12]
   13d38:	str	r2, [sp, #16]
   13d3c:	mov	r0, r6
   13d40:	mov	r1, r4
   13d44:	ldr	r2, [sp, #20]
   13d48:	mov	r3, r7
   13d4c:	bl	12cc8 <__assert_fail@plt+0x1bcc>
   13d50:	ldr	r0, [sp, #24]
   13d54:	ldr	r1, [sp, #32]
   13d58:	ldr	r2, [sp, #28]
   13d5c:	str	r1, [r2]
   13d60:	cmp	r0, #0
   13d64:	strne	r5, [r0]
   13d68:	mov	r0, r6
   13d6c:	sub	sp, fp, #28
   13d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13d78:	add	fp, sp, #24
   13d7c:	movw	r8, #28920	; 0x70f8
   13d80:	movt	r8, #2
   13d84:	ldr	r4, [r8]
   13d88:	movw	r5, #28924	; 0x70fc
   13d8c:	movt	r5, #2
   13d90:	ldr	r0, [r5]
   13d94:	cmp	r0, #2
   13d98:	blt	13dc4 <__assert_fail@plt+0x2cc8>
   13d9c:	add	r7, r4, #12
   13da0:	mov	r6, #0
   13da4:	ldr	r0, [r7, r6, lsl #3]
   13da8:	bl	1296c <__assert_fail@plt+0x1870>
   13dac:	add	r0, r6, #1
   13db0:	ldr	r1, [r5]
   13db4:	add	r2, r6, #2
   13db8:	cmp	r2, r1
   13dbc:	mov	r6, r0
   13dc0:	blt	13da4 <__assert_fail@plt+0x2ca8>
   13dc4:	ldr	r0, [r4, #4]
   13dc8:	movw	r9, #29088	; 0x71a0
   13dcc:	movt	r9, #2
   13dd0:	cmp	r0, r9
   13dd4:	movw	r7, #28928	; 0x7100
   13dd8:	movt	r7, #2
   13ddc:	beq	13dec <__assert_fail@plt+0x2cf0>
   13de0:	bl	1296c <__assert_fail@plt+0x1870>
   13de4:	mov	r0, #256	; 0x100
   13de8:	stm	r7, {r0, r9}
   13dec:	cmp	r4, r7
   13df0:	beq	13e00 <__assert_fail@plt+0x2d04>
   13df4:	mov	r0, r4
   13df8:	bl	1296c <__assert_fail@plt+0x1870>
   13dfc:	str	r7, [r8]
   13e00:	mov	r0, #1
   13e04:	str	r0, [r5]
   13e08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e0c:	movw	r3, #29040	; 0x7170
   13e10:	movt	r3, #2
   13e14:	mvn	r2, #0
   13e18:	b	13e1c <__assert_fail@plt+0x2d20>
   13e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e20:	add	fp, sp, #28
   13e24:	sub	sp, sp, #44	; 0x2c
   13e28:	mov	r7, r3
   13e2c:	str	r2, [sp, #36]	; 0x24
   13e30:	str	r1, [sp, #32]
   13e34:	mov	r5, r0
   13e38:	bl	11018 <__errno_location@plt>
   13e3c:	cmp	r5, #0
   13e40:	bmi	13fb0 <__assert_fail@plt+0x2eb4>
   13e44:	cmn	r5, #-2147483647	; 0x80000001
   13e48:	beq	13fb0 <__assert_fail@plt+0x2eb4>
   13e4c:	movw	r4, #28920	; 0x70f8
   13e50:	movt	r4, #2
   13e54:	ldr	r6, [r4]
   13e58:	str	r0, [sp, #28]
   13e5c:	ldr	r0, [r0]
   13e60:	str	r0, [sp, #24]
   13e64:	movw	r8, #28924	; 0x70fc
   13e68:	movt	r8, #2
   13e6c:	ldr	r1, [r8]
   13e70:	cmp	r1, r5
   13e74:	ble	13e80 <__assert_fail@plt+0x2d84>
   13e78:	mov	sl, r6
   13e7c:	b	13eec <__assert_fail@plt+0x2df0>
   13e80:	str	r1, [fp, #-32]	; 0xffffffe0
   13e84:	mov	r0, #8
   13e88:	str	r0, [sp]
   13e8c:	movw	r9, #28928	; 0x7100
   13e90:	movt	r9, #2
   13e94:	subs	r0, r6, r9
   13e98:	movne	r0, r6
   13e9c:	sub	r1, r5, r1
   13ea0:	add	r2, r1, #1
   13ea4:	sub	r1, fp, #32
   13ea8:	mvn	r3, #-2147483648	; 0x80000000
   13eac:	bl	14cb4 <__assert_fail@plt+0x3bb8>
   13eb0:	mov	sl, r0
   13eb4:	str	r0, [r4]
   13eb8:	cmp	r6, r9
   13ebc:	bne	13ec8 <__assert_fail@plt+0x2dcc>
   13ec0:	ldrd	r0, [r9]
   13ec4:	stm	sl, {r0, r1}
   13ec8:	ldr	r1, [r8]
   13ecc:	add	r0, sl, r1, lsl #3
   13ed0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13ed4:	sub	r1, r2, r1
   13ed8:	lsl	r2, r1, #3
   13edc:	mov	r1, #0
   13ee0:	bl	11030 <memset@plt>
   13ee4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13ee8:	str	r0, [r8]
   13eec:	mov	r9, sl
   13ef0:	ldr	r6, [r9, r5, lsl #3]!
   13ef4:	ldr	r4, [r9, #4]!
   13ef8:	ldm	r7, {r0, r1}
   13efc:	ldr	r2, [r7, #40]	; 0x28
   13f00:	ldr	r3, [r7, #44]	; 0x2c
   13f04:	orr	r8, r1, #1
   13f08:	add	r1, r7, #8
   13f0c:	stm	sp, {r0, r8}
   13f10:	str	r1, [sp, #20]
   13f14:	add	r0, sp, #8
   13f18:	stm	r0, {r1, r2, r3}
   13f1c:	mov	r0, r4
   13f20:	mov	r1, r6
   13f24:	ldr	r2, [sp, #32]
   13f28:	ldr	r3, [sp, #36]	; 0x24
   13f2c:	bl	12cc8 <__assert_fail@plt+0x1bcc>
   13f30:	cmp	r6, r0
   13f34:	bhi	13f98 <__assert_fail@plt+0x2e9c>
   13f38:	add	r6, r0, #1
   13f3c:	str	r6, [sl, r5, lsl #3]
   13f40:	movw	r0, #29088	; 0x71a0
   13f44:	movt	r0, #2
   13f48:	cmp	r4, r0
   13f4c:	beq	13f58 <__assert_fail@plt+0x2e5c>
   13f50:	mov	r0, r4
   13f54:	bl	1296c <__assert_fail@plt+0x1870>
   13f58:	mov	r0, r6
   13f5c:	bl	14bd8 <__assert_fail@plt+0x3adc>
   13f60:	mov	r4, r0
   13f64:	str	r0, [r9]
   13f68:	ldr	r0, [r7]
   13f6c:	ldr	r1, [r7, #40]	; 0x28
   13f70:	ldr	r2, [r7, #44]	; 0x2c
   13f74:	stm	sp, {r0, r8}
   13f78:	ldr	r0, [sp, #20]
   13f7c:	add	r3, sp, #8
   13f80:	stm	r3, {r0, r1, r2}
   13f84:	mov	r0, r4
   13f88:	mov	r1, r6
   13f8c:	ldr	r2, [sp, #32]
   13f90:	ldr	r3, [sp, #36]	; 0x24
   13f94:	bl	12cc8 <__assert_fail@plt+0x1bcc>
   13f98:	ldr	r0, [sp, #28]
   13f9c:	ldr	r1, [sp, #24]
   13fa0:	str	r1, [r0]
   13fa4:	mov	r0, r4
   13fa8:	sub	sp, fp, #28
   13fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fb0:	bl	110e4 <abort@plt>
   13fb4:	movw	r3, #29040	; 0x7170
   13fb8:	movt	r3, #2
   13fbc:	b	13e1c <__assert_fail@plt+0x2d20>
   13fc0:	mov	r1, r0
   13fc4:	mov	r0, #0
   13fc8:	b	13e0c <__assert_fail@plt+0x2d10>
   13fcc:	mov	r2, r1
   13fd0:	mov	r1, r0
   13fd4:	mov	r0, #0
   13fd8:	b	13fb4 <__assert_fail@plt+0x2eb8>
   13fdc:	push	{r4, r5, r6, sl, fp, lr}
   13fe0:	add	fp, sp, #16
   13fe4:	sub	sp, sp, #48	; 0x30
   13fe8:	mov	r4, r2
   13fec:	mov	r5, r0
   13ff0:	mov	r6, sp
   13ff4:	mov	r0, r6
   13ff8:	bl	14018 <__assert_fail@plt+0x2f1c>
   13ffc:	mov	r0, r5
   14000:	mov	r1, r4
   14004:	mvn	r2, #0
   14008:	mov	r3, r6
   1400c:	bl	13e1c <__assert_fail@plt+0x2d20>
   14010:	sub	sp, fp, #16
   14014:	pop	{r4, r5, r6, sl, fp, pc}
   14018:	push	{fp, lr}
   1401c:	mov	fp, sp
   14020:	vmov.i32	q8, #0	; 0x00000000
   14024:	mov	r2, #32
   14028:	mov	r3, r0
   1402c:	vst1.32	{d16-d17}, [r3], r2
   14030:	vst1.32	{d16-d17}, [r3]
   14034:	add	r2, r0, #16
   14038:	vst1.32	{d16-d17}, [r2]
   1403c:	cmp	r1, #10
   14040:	strne	r1, [r0]
   14044:	popne	{fp, pc}
   14048:	bl	110e4 <abort@plt>
   1404c:	push	{r4, r5, r6, r7, fp, lr}
   14050:	add	fp, sp, #16
   14054:	sub	sp, sp, #48	; 0x30
   14058:	mov	r4, r3
   1405c:	mov	r5, r2
   14060:	mov	r6, r0
   14064:	mov	r7, sp
   14068:	mov	r0, r7
   1406c:	bl	14018 <__assert_fail@plt+0x2f1c>
   14070:	mov	r0, r6
   14074:	mov	r1, r5
   14078:	mov	r2, r4
   1407c:	mov	r3, r7
   14080:	bl	13e1c <__assert_fail@plt+0x2d20>
   14084:	sub	sp, fp, #16
   14088:	pop	{r4, r5, r6, r7, fp, pc}
   1408c:	mov	r2, r1
   14090:	mov	r1, r0
   14094:	mov	r0, #0
   14098:	b	13fdc <__assert_fail@plt+0x2ee0>
   1409c:	mov	r3, r2
   140a0:	mov	r2, r1
   140a4:	mov	r1, r0
   140a8:	mov	r0, #0
   140ac:	b	1404c <__assert_fail@plt+0x2f50>
   140b0:	push	{r4, r5, r6, sl, fp, lr}
   140b4:	add	fp, sp, #16
   140b8:	sub	sp, sp, #48	; 0x30
   140bc:	mov	r4, r1
   140c0:	mov	r5, r0
   140c4:	movw	r0, #29040	; 0x7170
   140c8:	movt	r0, #2
   140cc:	add	r1, r0, #16
   140d0:	mov	r3, #32
   140d4:	vld1.64	{d16-d17}, [r0], r3
   140d8:	vld1.64	{d18-d19}, [r1]
   140dc:	mov	r6, sp
   140e0:	add	r1, r6, #16
   140e4:	vld1.64	{d20-d21}, [r0]
   140e8:	vst1.64	{d18-d19}, [r1]
   140ec:	mov	r0, r6
   140f0:	vst1.64	{d16-d17}, [r0], r3
   140f4:	vst1.64	{d20-d21}, [r0]
   140f8:	mov	r0, r6
   140fc:	mov	r1, r2
   14100:	mov	r2, #1
   14104:	bl	12bbc <__assert_fail@plt+0x1ac0>
   14108:	mov	r0, #0
   1410c:	mov	r1, r5
   14110:	mov	r2, r4
   14114:	mov	r3, r6
   14118:	bl	13e1c <__assert_fail@plt+0x2d20>
   1411c:	sub	sp, fp, #16
   14120:	pop	{r4, r5, r6, sl, fp, pc}
   14124:	mov	r2, r1
   14128:	mvn	r1, #0
   1412c:	b	140b0 <__assert_fail@plt+0x2fb4>
   14130:	mov	r1, #58	; 0x3a
   14134:	b	14124 <__assert_fail@plt+0x3028>
   14138:	mov	r2, #58	; 0x3a
   1413c:	b	140b0 <__assert_fail@plt+0x2fb4>
   14140:	push	{r4, r5, r6, sl, fp, lr}
   14144:	add	fp, sp, #16
   14148:	sub	sp, sp, #48	; 0x30
   1414c:	mov	r4, r2
   14150:	mov	r5, r0
   14154:	mov	r6, sp
   14158:	mov	r0, r6
   1415c:	bl	14018 <__assert_fail@plt+0x2f1c>
   14160:	mov	r0, r6
   14164:	mov	r1, #58	; 0x3a
   14168:	mov	r2, #1
   1416c:	bl	12bbc <__assert_fail@plt+0x1ac0>
   14170:	mov	r0, r5
   14174:	mov	r1, r4
   14178:	mvn	r2, #0
   1417c:	mov	r3, r6
   14180:	bl	13e1c <__assert_fail@plt+0x2d20>
   14184:	sub	sp, fp, #16
   14188:	pop	{r4, r5, r6, sl, fp, pc}
   1418c:	push	{fp, lr}
   14190:	mov	fp, sp
   14194:	sub	sp, sp, #8
   14198:	mvn	ip, #0
   1419c:	str	ip, [sp]
   141a0:	bl	141ac <__assert_fail@plt+0x30b0>
   141a4:	mov	sp, fp
   141a8:	pop	{fp, pc}
   141ac:	push	{r4, r5, r6, r7, fp, lr}
   141b0:	add	fp, sp, #16
   141b4:	sub	sp, sp, #48	; 0x30
   141b8:	mov	r7, r3
   141bc:	mov	r5, r0
   141c0:	movw	r0, #29040	; 0x7170
   141c4:	movt	r0, #2
   141c8:	add	r3, r0, #16
   141cc:	mov	r4, #32
   141d0:	vld1.64	{d16-d17}, [r0], r4
   141d4:	vld1.64	{d18-d19}, [r3]
   141d8:	mov	r6, sp
   141dc:	add	r3, r6, #16
   141e0:	vld1.64	{d20-d21}, [r0]
   141e4:	vst1.64	{d18-d19}, [r3]
   141e8:	mov	r0, r6
   141ec:	vst1.64	{d16-d17}, [r0], r4
   141f0:	vst1.64	{d20-d21}, [r0]
   141f4:	mov	r0, r6
   141f8:	bl	12c14 <__assert_fail@plt+0x1b18>
   141fc:	ldr	r2, [fp, #8]
   14200:	mov	r0, r5
   14204:	mov	r1, r7
   14208:	mov	r3, r6
   1420c:	bl	13e1c <__assert_fail@plt+0x2d20>
   14210:	sub	sp, fp, #16
   14214:	pop	{r4, r5, r6, r7, fp, pc}
   14218:	mov	r3, r2
   1421c:	mov	r2, r1
   14220:	mov	r1, r0
   14224:	mov	r0, #0
   14228:	b	1418c <__assert_fail@plt+0x3090>
   1422c:	push	{fp, lr}
   14230:	mov	fp, sp
   14234:	sub	sp, sp, #8
   14238:	mov	ip, r2
   1423c:	mov	r2, r1
   14240:	mov	r1, r0
   14244:	str	r3, [sp]
   14248:	mov	r0, #0
   1424c:	mov	r3, ip
   14250:	bl	141ac <__assert_fail@plt+0x30b0>
   14254:	mov	sp, fp
   14258:	pop	{fp, pc}
   1425c:	movw	r3, #28936	; 0x7108
   14260:	movt	r3, #2
   14264:	b	13e1c <__assert_fail@plt+0x2d20>
   14268:	mov	r2, r1
   1426c:	mov	r1, r0
   14270:	mov	r0, #0
   14274:	b	1425c <__assert_fail@plt+0x3160>
   14278:	mvn	r2, #0
   1427c:	b	1425c <__assert_fail@plt+0x3160>
   14280:	mov	r1, r0
   14284:	mov	r0, #0
   14288:	b	14278 <__assert_fail@plt+0x317c>
   1428c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14290:	add	fp, sp, #24
   14294:	sub	sp, sp, #16
   14298:	mov	r4, r1
   1429c:	mov	r5, r0
   142a0:	mov	r7, #0
   142a4:	mov	r0, #0
   142a8:	mov	r1, r5
   142ac:	mov	r2, #5
   142b0:	bl	10f1c <dcgettext@plt>
   142b4:	cmp	r0, r5
   142b8:	beq	142c4 <__assert_fail@plt+0x31c8>
   142bc:	sub	sp, fp, #24
   142c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142c4:	bl	15998 <__assert_fail@plt+0x489c>
   142c8:	mov	r6, r0
   142cc:	mov	r8, #56	; 0x38
   142d0:	mov	r0, #45	; 0x2d
   142d4:	stm	sp, {r0, r8}
   142d8:	str	r7, [sp, #8]
   142dc:	str	r7, [sp, #12]
   142e0:	mov	r0, r6
   142e4:	mov	r1, #85	; 0x55
   142e8:	mov	r2, #84	; 0x54
   142ec:	mov	r3, #70	; 0x46
   142f0:	bl	14388 <__assert_fail@plt+0x328c>
   142f4:	cmp	r0, #0
   142f8:	beq	14314 <__assert_fail@plt+0x3218>
   142fc:	ldrb	r1, [r5]
   14300:	movw	r2, #26037	; 0x65b5
   14304:	movt	r2, #1
   14308:	movw	r0, #26041	; 0x65b9
   1430c:	movt	r0, #1
   14310:	b	14358 <__assert_fail@plt+0x325c>
   14314:	mov	r0, #48	; 0x30
   14318:	mov	r1, #51	; 0x33
   1431c:	str	r8, [sp]
   14320:	stmib	sp, {r0, r1}
   14324:	str	r0, [sp, #12]
   14328:	mov	r0, r6
   1432c:	mov	r1, #71	; 0x47
   14330:	mov	r2, #66	; 0x42
   14334:	mov	r3, #49	; 0x31
   14338:	bl	14388 <__assert_fail@plt+0x328c>
   1433c:	cmp	r0, #0
   14340:	beq	14368 <__assert_fail@plt+0x326c>
   14344:	ldrb	r1, [r5]
   14348:	movw	r2, #26045	; 0x65bd
   1434c:	movt	r2, #1
   14350:	movw	r0, #26049	; 0x65c1
   14354:	movt	r0, #1
   14358:	cmp	r1, #96	; 0x60
   1435c:	moveq	r0, r2
   14360:	sub	sp, fp, #24
   14364:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14368:	movw	r1, #26031	; 0x65af
   1436c:	movt	r1, #1
   14370:	movw	r0, #26035	; 0x65b3
   14374:	movt	r0, #1
   14378:	cmp	r4, #9
   1437c:	moveq	r0, r1
   14380:	sub	sp, fp, #24
   14384:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14388:	push	{r4, r5, r6, r7, fp, lr}
   1438c:	add	fp, sp, #16
   14390:	sub	sp, sp, #16
   14394:	mov	r4, r3
   14398:	mov	r5, r2
   1439c:	mov	r7, r1
   143a0:	mov	r6, r0
   143a4:	mov	r0, r1
   143a8:	bl	158a4 <__assert_fail@plt+0x47a8>
   143ac:	ldrb	r1, [r6]
   143b0:	cmp	r0, #0
   143b4:	andne	r1, r1, #223	; 0xdf
   143b8:	mov	r0, #0
   143bc:	cmp	r1, r7
   143c0:	bne	143f8 <__assert_fail@plt+0x32fc>
   143c4:	cmp	r7, #0
   143c8:	beq	14400 <__assert_fail@plt+0x3304>
   143cc:	ldr	r0, [fp, #20]
   143d0:	ldr	r1, [fp, #16]
   143d4:	ldr	r2, [fp, #12]
   143d8:	ldr	r3, [fp, #8]
   143dc:	str	r2, [sp]
   143e0:	str	r1, [sp, #4]
   143e4:	str	r0, [sp, #8]
   143e8:	mov	r0, r6
   143ec:	mov	r1, r5
   143f0:	mov	r2, r4
   143f4:	bl	1440c <__assert_fail@plt+0x3310>
   143f8:	sub	sp, fp, #16
   143fc:	pop	{r4, r5, r6, r7, fp, pc}
   14400:	mov	r0, #1
   14404:	sub	sp, fp, #16
   14408:	pop	{r4, r5, r6, r7, fp, pc}
   1440c:	push	{r4, r5, r6, r7, fp, lr}
   14410:	add	fp, sp, #16
   14414:	sub	sp, sp, #8
   14418:	mov	r4, r3
   1441c:	mov	r5, r2
   14420:	mov	r7, r1
   14424:	mov	r6, r0
   14428:	mov	r0, r1
   1442c:	bl	158a4 <__assert_fail@plt+0x47a8>
   14430:	ldrb	r1, [r6, #1]
   14434:	cmp	r0, #0
   14438:	andne	r1, r1, #223	; 0xdf
   1443c:	mov	r0, #0
   14440:	cmp	r1, r7
   14444:	bne	14474 <__assert_fail@plt+0x3378>
   14448:	cmp	r7, #0
   1444c:	beq	1447c <__assert_fail@plt+0x3380>
   14450:	ldr	r0, [fp, #16]
   14454:	ldr	r1, [fp, #12]
   14458:	ldr	r3, [fp, #8]
   1445c:	str	r1, [sp]
   14460:	str	r0, [sp, #4]
   14464:	mov	r0, r6
   14468:	mov	r1, r5
   1446c:	mov	r2, r4
   14470:	bl	14488 <__assert_fail@plt+0x338c>
   14474:	sub	sp, fp, #16
   14478:	pop	{r4, r5, r6, r7, fp, pc}
   1447c:	mov	r0, #1
   14480:	sub	sp, fp, #16
   14484:	pop	{r4, r5, r6, r7, fp, pc}
   14488:	push	{r4, r5, r6, r7, fp, lr}
   1448c:	add	fp, sp, #16
   14490:	sub	sp, sp, #8
   14494:	mov	r4, r3
   14498:	mov	r5, r2
   1449c:	mov	r7, r1
   144a0:	mov	r6, r0
   144a4:	mov	r0, r1
   144a8:	bl	158a4 <__assert_fail@plt+0x47a8>
   144ac:	ldrb	r1, [r6, #2]
   144b0:	cmp	r0, #0
   144b4:	andne	r1, r1, #223	; 0xdf
   144b8:	mov	r0, #0
   144bc:	cmp	r1, r7
   144c0:	bne	144e8 <__assert_fail@plt+0x33ec>
   144c4:	cmp	r7, #0
   144c8:	beq	144f0 <__assert_fail@plt+0x33f4>
   144cc:	ldr	r0, [fp, #12]
   144d0:	ldr	r3, [fp, #8]
   144d4:	str	r0, [sp]
   144d8:	mov	r0, r6
   144dc:	mov	r1, r5
   144e0:	mov	r2, r4
   144e4:	bl	144fc <__assert_fail@plt+0x3400>
   144e8:	sub	sp, fp, #16
   144ec:	pop	{r4, r5, r6, r7, fp, pc}
   144f0:	mov	r0, #1
   144f4:	sub	sp, fp, #16
   144f8:	pop	{r4, r5, r6, r7, fp, pc}
   144fc:	push	{r4, r5, r6, r7, fp, lr}
   14500:	add	fp, sp, #16
   14504:	mov	r4, r3
   14508:	mov	r5, r2
   1450c:	mov	r7, r1
   14510:	mov	r6, r0
   14514:	mov	r0, r1
   14518:	bl	158a4 <__assert_fail@plt+0x47a8>
   1451c:	ldrb	r1, [r6, #3]
   14520:	ldr	r3, [fp, #8]
   14524:	cmp	r0, #0
   14528:	andne	r1, r1, #223	; 0xdf
   1452c:	mov	r0, #0
   14530:	cmp	r1, r7
   14534:	bne	14558 <__assert_fail@plt+0x345c>
   14538:	cmp	r7, #0
   1453c:	beq	14554 <__assert_fail@plt+0x3458>
   14540:	mov	r0, r6
   14544:	mov	r1, r5
   14548:	mov	r2, r4
   1454c:	pop	{r4, r5, r6, r7, fp, lr}
   14550:	b	1455c <__assert_fail@plt+0x3460>
   14554:	mov	r0, #1
   14558:	pop	{r4, r5, r6, r7, fp, pc}
   1455c:	push	{r4, r5, r6, r7, fp, lr}
   14560:	add	fp, sp, #16
   14564:	mov	r4, r3
   14568:	mov	r5, r2
   1456c:	mov	r7, r1
   14570:	mov	r6, r0
   14574:	mov	r0, r1
   14578:	bl	158a4 <__assert_fail@plt+0x47a8>
   1457c:	ldrb	r1, [r6, #4]
   14580:	cmp	r0, #0
   14584:	andne	r1, r1, #223	; 0xdf
   14588:	mov	r0, #0
   1458c:	cmp	r1, r7
   14590:	bne	145b4 <__assert_fail@plt+0x34b8>
   14594:	cmp	r7, #0
   14598:	beq	145b0 <__assert_fail@plt+0x34b4>
   1459c:	mov	r0, r6
   145a0:	mov	r1, r5
   145a4:	mov	r2, r4
   145a8:	pop	{r4, r5, r6, r7, fp, lr}
   145ac:	b	145b8 <__assert_fail@plt+0x34bc>
   145b0:	mov	r0, #1
   145b4:	pop	{r4, r5, r6, r7, fp, pc}
   145b8:	push	{r4, r5, r6, sl, fp, lr}
   145bc:	add	fp, sp, #16
   145c0:	mov	r4, r2
   145c4:	mov	r6, r1
   145c8:	mov	r5, r0
   145cc:	mov	r0, r1
   145d0:	bl	158a4 <__assert_fail@plt+0x47a8>
   145d4:	ldrb	r1, [r5, #5]
   145d8:	cmp	r0, #0
   145dc:	andne	r1, r1, #223	; 0xdf
   145e0:	mov	r0, #0
   145e4:	cmp	r1, r6
   145e8:	bne	14608 <__assert_fail@plt+0x350c>
   145ec:	cmp	r6, #0
   145f0:	beq	14604 <__assert_fail@plt+0x3508>
   145f4:	mov	r0, r5
   145f8:	mov	r1, r4
   145fc:	pop	{r4, r5, r6, sl, fp, lr}
   14600:	b	1460c <__assert_fail@plt+0x3510>
   14604:	mov	r0, #1
   14608:	pop	{r4, r5, r6, sl, fp, pc}
   1460c:	push	{r4, r5, fp, lr}
   14610:	add	fp, sp, #8
   14614:	mov	r5, r1
   14618:	mov	r4, r0
   1461c:	mov	r0, r1
   14620:	bl	158a4 <__assert_fail@plt+0x47a8>
   14624:	ldrb	r1, [r4, #6]
   14628:	cmp	r0, #0
   1462c:	andne	r1, r1, #223	; 0xdf
   14630:	mov	r0, #0
   14634:	cmp	r1, r5
   14638:	popne	{r4, r5, fp, pc}
   1463c:	cmp	r5, #0
   14640:	beq	14650 <__assert_fail@plt+0x3554>
   14644:	mov	r0, r4
   14648:	pop	{r4, r5, fp, lr}
   1464c:	b	14658 <__assert_fail@plt+0x355c>
   14650:	mov	r0, #1
   14654:	pop	{r4, r5, fp, pc}
   14658:	push	{r4, sl, fp, lr}
   1465c:	add	fp, sp, #8
   14660:	mov	r4, r0
   14664:	mov	r0, #0
   14668:	bl	158a4 <__assert_fail@plt+0x47a8>
   1466c:	ldrb	r1, [r4, #7]
   14670:	cmp	r0, #0
   14674:	beq	14688 <__assert_fail@plt+0x358c>
   14678:	tst	r1, #223	; 0xdf
   1467c:	bne	14690 <__assert_fail@plt+0x3594>
   14680:	mov	r0, #1
   14684:	pop	{r4, sl, fp, pc}
   14688:	cmp	r1, #0
   1468c:	beq	14680 <__assert_fail@plt+0x3584>
   14690:	mov	r0, #0
   14694:	pop	{r4, sl, fp, pc}
   14698:	cmp	r2, #0
   1469c:	beq	146cc <__assert_fail@plt+0x35d0>
   146a0:	mvn	r3, #0
   146a4:	udiv	r3, r3, r2
   146a8:	cmp	r3, r1
   146ac:	bcs	146cc <__assert_fail@plt+0x35d0>
   146b0:	push	{fp, lr}
   146b4:	mov	fp, sp
   146b8:	bl	11018 <__errno_location@plt>
   146bc:	mov	r1, #12
   146c0:	str	r1, [r0]
   146c4:	mov	r0, #0
   146c8:	pop	{fp, pc}
   146cc:	mul	r1, r2, r1
   146d0:	b	1558c <__assert_fail@plt+0x4490>
   146d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   146d8:	add	fp, sp, #24
   146dc:	sub	sp, sp, #32
   146e0:	mov	r4, r2
   146e4:	mov	r8, r0
   146e8:	ldr	r6, [fp, #12]
   146ec:	ldr	r7, [fp, #8]
   146f0:	cmp	r1, #0
   146f4:	beq	1471c <__assert_fail@plt+0x3620>
   146f8:	mov	r5, r1
   146fc:	str	r4, [sp]
   14700:	str	r3, [sp, #4]
   14704:	movw	r2, #26136	; 0x6618
   14708:	movt	r2, #1
   1470c:	mov	r0, r8
   14710:	mov	r1, #1
   14714:	mov	r3, r5
   14718:	b	14734 <__assert_fail@plt+0x3638>
   1471c:	str	r3, [sp]
   14720:	movw	r2, #26148	; 0x6624
   14724:	movt	r2, #1
   14728:	mov	r0, r8
   1472c:	mov	r1, #1
   14730:	mov	r3, r4
   14734:	bl	11054 <__fprintf_chk@plt>
   14738:	movw	r1, #26155	; 0x662b
   1473c:	movt	r1, #1
   14740:	mov	r0, #0
   14744:	mov	r2, #5
   14748:	bl	10f1c <dcgettext@plt>
   1474c:	mov	r3, r0
   14750:	movw	r0, #2022	; 0x7e6
   14754:	str	r0, [sp]
   14758:	movw	r2, #26873	; 0x68f9
   1475c:	movt	r2, #1
   14760:	mov	r0, r8
   14764:	mov	r1, #1
   14768:	bl	11054 <__fprintf_chk@plt>
   1476c:	movw	r4, #25327	; 0x62ef
   14770:	movt	r4, #1
   14774:	mov	r0, r4
   14778:	mov	r1, r8
   1477c:	bl	10e8c <fputs_unlocked@plt>
   14780:	movw	r1, #26159	; 0x662f
   14784:	movt	r1, #1
   14788:	mov	r0, #0
   1478c:	mov	r2, #5
   14790:	bl	10f1c <dcgettext@plt>
   14794:	mov	r2, r0
   14798:	movw	r3, #26330	; 0x66da
   1479c:	movt	r3, #1
   147a0:	mov	r0, r8
   147a4:	mov	r1, #1
   147a8:	bl	11054 <__fprintf_chk@plt>
   147ac:	mov	r0, r4
   147b0:	mov	r1, r8
   147b4:	bl	10e8c <fputs_unlocked@plt>
   147b8:	cmp	r6, #9
   147bc:	bhi	147f8 <__assert_fail@plt+0x36fc>
   147c0:	add	r0, pc, #0
   147c4:	ldr	pc, [r0, r6, lsl #2]
   147c8:	strdeq	r4, [r1], -r0
   147cc:	andeq	r4, r1, r4, lsl #16
   147d0:	andeq	r4, r1, r4, lsr r8
   147d4:	andeq	r4, r1, ip, asr r8
   147d8:	andeq	r4, r1, r4, lsl #17
   147dc:	andeq	r4, r1, ip, lsr #17
   147e0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147e4:	andeq	r4, r1, ip, lsl #18
   147e8:	andeq	r4, r1, ip, lsr #19
   147ec:	andeq	r4, r1, r4, asr r9
   147f0:	sub	sp, fp, #24
   147f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   147f8:	movw	r1, #26683	; 0x683b
   147fc:	movt	r1, #1
   14800:	b	1495c <__assert_fail@plt+0x3860>
   14804:	movw	r1, #26364	; 0x66fc
   14808:	movt	r1, #1
   1480c:	mov	r0, #0
   14810:	mov	r2, #5
   14814:	bl	10f1c <dcgettext@plt>
   14818:	mov	r2, r0
   1481c:	ldr	r3, [r7]
   14820:	mov	r0, r8
   14824:	mov	r1, #1
   14828:	sub	sp, fp, #24
   1482c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14830:	b	11054 <__fprintf_chk@plt>
   14834:	movw	r1, #26380	; 0x670c
   14838:	movt	r1, #1
   1483c:	mov	r0, #0
   14840:	mov	r2, #5
   14844:	bl	10f1c <dcgettext@plt>
   14848:	mov	r2, r0
   1484c:	ldr	r3, [r7]
   14850:	ldr	r0, [r7, #4]
   14854:	str	r0, [sp]
   14858:	b	14948 <__assert_fail@plt+0x384c>
   1485c:	movw	r1, #26403	; 0x6723
   14860:	movt	r1, #1
   14864:	mov	r0, #0
   14868:	mov	r2, #5
   1486c:	bl	10f1c <dcgettext@plt>
   14870:	mov	r2, r0
   14874:	ldr	r3, [r7]
   14878:	ldmib	r7, {r0, r1}
   1487c:	stm	sp, {r0, r1}
   14880:	b	14948 <__assert_fail@plt+0x384c>
   14884:	movw	r1, #26431	; 0x673f
   14888:	movt	r1, #1
   1488c:	mov	r0, #0
   14890:	mov	r2, #5
   14894:	bl	10f1c <dcgettext@plt>
   14898:	mov	r2, r0
   1489c:	ldr	r3, [r7]
   148a0:	ldmib	r7, {r0, r1, r7}
   148a4:	stm	sp, {r0, r1, r7}
   148a8:	b	14948 <__assert_fail@plt+0x384c>
   148ac:	movw	r1, #26463	; 0x675f
   148b0:	movt	r1, #1
   148b4:	mov	r0, #0
   148b8:	mov	r2, #5
   148bc:	bl	10f1c <dcgettext@plt>
   148c0:	mov	r2, r0
   148c4:	ldr	r3, [r7]
   148c8:	ldmib	r7, {r0, r1, r6, r7}
   148cc:	stm	sp, {r0, r1, r6, r7}
   148d0:	b	14948 <__assert_fail@plt+0x384c>
   148d4:	movw	r1, #26499	; 0x6783
   148d8:	movt	r1, #1
   148dc:	mov	r0, #0
   148e0:	mov	r2, #5
   148e4:	bl	10f1c <dcgettext@plt>
   148e8:	mov	r2, r0
   148ec:	ldr	r3, [r7]
   148f0:	ldmib	r7, {r0, r1, r6}
   148f4:	ldr	r5, [r7, #16]
   148f8:	ldr	r7, [r7, #20]
   148fc:	stm	sp, {r0, r1, r6}
   14900:	str	r5, [sp, #12]
   14904:	str	r7, [sp, #16]
   14908:	b	14948 <__assert_fail@plt+0x384c>
   1490c:	movw	r1, #26539	; 0x67ab
   14910:	movt	r1, #1
   14914:	mov	r0, #0
   14918:	mov	r2, #5
   1491c:	bl	10f1c <dcgettext@plt>
   14920:	mov	r2, r0
   14924:	ldr	r3, [r7]
   14928:	ldmib	r7, {r0, r1, r6}
   1492c:	ldr	r5, [r7, #16]
   14930:	ldr	r4, [r7, #20]
   14934:	ldr	r7, [r7, #24]
   14938:	stm	sp, {r0, r1, r6}
   1493c:	str	r5, [sp, #12]
   14940:	str	r4, [sp, #16]
   14944:	str	r7, [sp, #20]
   14948:	mov	r0, r8
   1494c:	mov	r1, #1
   14950:	b	149fc <__assert_fail@plt+0x3900>
   14954:	movw	r1, #26631	; 0x6807
   14958:	movt	r1, #1
   1495c:	mov	r0, #0
   14960:	mov	r2, #5
   14964:	bl	10f1c <dcgettext@plt>
   14968:	mov	ip, r0
   1496c:	ldr	r3, [r7]
   14970:	ldr	r0, [r7, #4]
   14974:	ldr	r1, [r7, #8]
   14978:	ldr	r6, [r7, #12]
   1497c:	ldr	r5, [r7, #16]
   14980:	ldr	r4, [r7, #20]
   14984:	ldr	r2, [r7, #24]
   14988:	ldr	lr, [r7, #28]
   1498c:	ldr	r7, [r7, #32]
   14990:	stm	sp, {r0, r1, r6}
   14994:	str	r5, [sp, #12]
   14998:	str	r4, [sp, #16]
   1499c:	str	r2, [sp, #20]
   149a0:	str	lr, [sp, #24]
   149a4:	str	r7, [sp, #28]
   149a8:	b	149f0 <__assert_fail@plt+0x38f4>
   149ac:	movw	r1, #26583	; 0x67d7
   149b0:	movt	r1, #1
   149b4:	mov	r0, #0
   149b8:	mov	r2, #5
   149bc:	bl	10f1c <dcgettext@plt>
   149c0:	mov	ip, r0
   149c4:	ldr	r3, [r7]
   149c8:	ldmib	r7, {r0, r1, r6}
   149cc:	ldr	r5, [r7, #16]
   149d0:	ldr	r4, [r7, #20]
   149d4:	ldr	r2, [r7, #24]
   149d8:	ldr	r7, [r7, #28]
   149dc:	stm	sp, {r0, r1, r6}
   149e0:	str	r5, [sp, #12]
   149e4:	str	r4, [sp, #16]
   149e8:	str	r2, [sp, #20]
   149ec:	str	r7, [sp, #24]
   149f0:	mov	r0, r8
   149f4:	mov	r1, #1
   149f8:	mov	r2, ip
   149fc:	bl	11054 <__fprintf_chk@plt>
   14a00:	sub	sp, fp, #24
   14a04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a08:	push	{r4, sl, fp, lr}
   14a0c:	add	fp, sp, #8
   14a10:	sub	sp, sp, #8
   14a14:	mov	lr, #0
   14a18:	ldr	ip, [fp, #8]
   14a1c:	ldr	r4, [ip, lr, lsl #2]
   14a20:	add	lr, lr, #1
   14a24:	cmp	r4, #0
   14a28:	bne	14a1c <__assert_fail@plt+0x3920>
   14a2c:	sub	r4, lr, #1
   14a30:	str	ip, [sp]
   14a34:	str	r4, [sp, #4]
   14a38:	bl	146d4 <__assert_fail@plt+0x35d8>
   14a3c:	sub	sp, fp, #8
   14a40:	pop	{r4, sl, fp, pc}
   14a44:	push	{r4, r5, fp, lr}
   14a48:	add	fp, sp, #8
   14a4c:	sub	sp, sp, #48	; 0x30
   14a50:	mov	ip, #0
   14a54:	ldr	r4, [fp, #8]
   14a58:	add	lr, sp, #8
   14a5c:	ldr	r5, [r4]
   14a60:	str	r5, [lr, ip, lsl #2]
   14a64:	cmp	r5, #0
   14a68:	beq	14a80 <__assert_fail@plt+0x3984>
   14a6c:	add	ip, ip, #1
   14a70:	add	r4, r4, #4
   14a74:	cmp	ip, #10
   14a78:	bne	14a5c <__assert_fail@plt+0x3960>
   14a7c:	mov	ip, #10
   14a80:	str	lr, [sp]
   14a84:	str	ip, [sp, #4]
   14a88:	bl	146d4 <__assert_fail@plt+0x35d8>
   14a8c:	sub	sp, fp, #8
   14a90:	pop	{r4, r5, fp, pc}
   14a94:	push	{fp, lr}
   14a98:	mov	fp, sp
   14a9c:	sub	sp, sp, #8
   14aa0:	add	ip, fp, #8
   14aa4:	str	ip, [sp, #4]
   14aa8:	str	ip, [sp]
   14aac:	bl	14a44 <__assert_fail@plt+0x3948>
   14ab0:	mov	sp, fp
   14ab4:	pop	{fp, pc}
   14ab8:	push	{fp, lr}
   14abc:	mov	fp, sp
   14ac0:	movw	r0, #29012	; 0x7154
   14ac4:	movt	r0, #2
   14ac8:	ldr	r1, [r0]
   14acc:	movw	r0, #25327	; 0x62ef
   14ad0:	movt	r0, #1
   14ad4:	bl	10e8c <fputs_unlocked@plt>
   14ad8:	movw	r1, #26743	; 0x6877
   14adc:	movt	r1, #1
   14ae0:	mov	r0, #0
   14ae4:	mov	r2, #5
   14ae8:	bl	10f1c <dcgettext@plt>
   14aec:	mov	r1, r0
   14af0:	movw	r2, #26763	; 0x688b
   14af4:	movt	r2, #1
   14af8:	mov	r0, #1
   14afc:	bl	1103c <__printf_chk@plt>
   14b00:	movw	r1, #26785	; 0x68a1
   14b04:	movt	r1, #1
   14b08:	mov	r0, #0
   14b0c:	mov	r2, #5
   14b10:	bl	10f1c <dcgettext@plt>
   14b14:	mov	r1, r0
   14b18:	movw	r2, #24837	; 0x6105
   14b1c:	movt	r2, #1
   14b20:	movw	r3, #25136	; 0x6230
   14b24:	movt	r3, #1
   14b28:	mov	r0, #1
   14b2c:	bl	1103c <__printf_chk@plt>
   14b30:	movw	r1, #26805	; 0x68b5
   14b34:	movt	r1, #1
   14b38:	mov	r0, #0
   14b3c:	mov	r2, #5
   14b40:	bl	10f1c <dcgettext@plt>
   14b44:	mov	r1, r0
   14b48:	movw	r2, #26844	; 0x68dc
   14b4c:	movt	r2, #1
   14b50:	mov	r0, #1
   14b54:	pop	{fp, lr}
   14b58:	b	1103c <__printf_chk@plt>
   14b5c:	b	14b60 <__assert_fail@plt+0x3a64>
   14b60:	push	{r4, r5, r6, sl, fp, lr}
   14b64:	add	fp, sp, #16
   14b68:	mov	r4, r2
   14b6c:	mov	r5, r1
   14b70:	mov	r6, r0
   14b74:	bl	14698 <__assert_fail@plt+0x359c>
   14b78:	cmp	r0, #0
   14b7c:	popne	{r4, r5, r6, sl, fp, pc}
   14b80:	cmp	r6, #0
   14b84:	beq	14b98 <__assert_fail@plt+0x3a9c>
   14b88:	cmp	r5, #0
   14b8c:	cmpne	r4, #0
   14b90:	bne	14b98 <__assert_fail@plt+0x3a9c>
   14b94:	pop	{r4, r5, r6, sl, fp, pc}
   14b98:	bl	14f24 <__assert_fail@plt+0x3e28>
   14b9c:	push	{fp, lr}
   14ba0:	mov	fp, sp
   14ba4:	bl	1555c <__assert_fail@plt+0x4460>
   14ba8:	pop	{fp, lr}
   14bac:	b	14bb0 <__assert_fail@plt+0x3ab4>
   14bb0:	cmp	r0, #0
   14bb4:	bxne	lr
   14bb8:	push	{fp, lr}
   14bbc:	mov	fp, sp
   14bc0:	bl	14f24 <__assert_fail@plt+0x3e28>
   14bc4:	push	{fp, lr}
   14bc8:	mov	fp, sp
   14bcc:	bl	12a58 <__assert_fail@plt+0x195c>
   14bd0:	pop	{fp, lr}
   14bd4:	b	14bb0 <__assert_fail@plt+0x3ab4>
   14bd8:	b	14b9c <__assert_fail@plt+0x3aa0>
   14bdc:	push	{r4, r5, fp, lr}
   14be0:	add	fp, sp, #8
   14be4:	mov	r4, r1
   14be8:	mov	r5, r0
   14bec:	bl	1558c <__assert_fail@plt+0x4490>
   14bf0:	cmp	r0, #0
   14bf4:	popne	{r4, r5, fp, pc}
   14bf8:	cmp	r5, #0
   14bfc:	beq	14c0c <__assert_fail@plt+0x3b10>
   14c00:	cmp	r4, #0
   14c04:	bne	14c0c <__assert_fail@plt+0x3b10>
   14c08:	pop	{r4, r5, fp, pc}
   14c0c:	bl	14f24 <__assert_fail@plt+0x3e28>
   14c10:	push	{fp, lr}
   14c14:	mov	fp, sp
   14c18:	bl	12a5c <__assert_fail@plt+0x1960>
   14c1c:	pop	{fp, lr}
   14c20:	b	14bb0 <__assert_fail@plt+0x3ab4>
   14c24:	push	{fp, lr}
   14c28:	mov	fp, sp
   14c2c:	bl	12a6c <__assert_fail@plt+0x1970>
   14c30:	pop	{fp, lr}
   14c34:	b	14bb0 <__assert_fail@plt+0x3ab4>
   14c38:	mov	r2, r1
   14c3c:	mov	r1, r0
   14c40:	mov	r0, #0
   14c44:	b	14b60 <__assert_fail@plt+0x3a64>
   14c48:	mov	r2, r1
   14c4c:	mov	r1, r0
   14c50:	mov	r0, #0
   14c54:	b	14c24 <__assert_fail@plt+0x3b28>
   14c58:	mov	r2, #1
   14c5c:	b	14c60 <__assert_fail@plt+0x3b64>
   14c60:	push	{r4, r5, fp, lr}
   14c64:	add	fp, sp, #8
   14c68:	mov	r4, r1
   14c6c:	ldr	r5, [r1]
   14c70:	cmp	r0, #0
   14c74:	beq	14c8c <__assert_fail@plt+0x3b90>
   14c78:	mov	r1, #1
   14c7c:	add	r1, r1, r5, lsr #1
   14c80:	adds	r5, r5, r1
   14c84:	bcc	14ca4 <__assert_fail@plt+0x3ba8>
   14c88:	bl	14f24 <__assert_fail@plt+0x3e28>
   14c8c:	cmp	r5, #0
   14c90:	bne	14ca4 <__assert_fail@plt+0x3ba8>
   14c94:	mov	r1, #64	; 0x40
   14c98:	udiv	r5, r1, r2
   14c9c:	cmp	r2, #64	; 0x40
   14ca0:	addhi	r5, r5, #1
   14ca4:	mov	r1, r5
   14ca8:	bl	14b60 <__assert_fail@plt+0x3a64>
   14cac:	str	r5, [r4]
   14cb0:	pop	{r4, r5, fp, pc}
   14cb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14cb8:	add	fp, sp, #24
   14cbc:	mov	r8, r1
   14cc0:	ldr	r6, [r1]
   14cc4:	add	r1, r6, r6, asr #1
   14cc8:	cmp	r1, r6
   14ccc:	mvnvs	r1, #-2147483648	; 0x80000000
   14cd0:	cmp	r1, r3
   14cd4:	mov	r5, r1
   14cd8:	movgt	r5, r3
   14cdc:	cmn	r3, #1
   14ce0:	movle	r5, r1
   14ce4:	ldr	r4, [fp, #8]
   14ce8:	cmn	r4, #1
   14cec:	ble	14d14 <__assert_fail@plt+0x3c18>
   14cf0:	cmp	r4, #0
   14cf4:	beq	14d68 <__assert_fail@plt+0x3c6c>
   14cf8:	cmn	r5, #1
   14cfc:	ble	14d3c <__assert_fail@plt+0x3c40>
   14d00:	mvn	r7, #-2147483648	; 0x80000000
   14d04:	udiv	r1, r7, r4
   14d08:	cmp	r1, r5
   14d0c:	bge	14d68 <__assert_fail@plt+0x3c6c>
   14d10:	b	14d78 <__assert_fail@plt+0x3c7c>
   14d14:	cmn	r5, #1
   14d18:	ble	14d58 <__assert_fail@plt+0x3c5c>
   14d1c:	cmn	r4, #1
   14d20:	beq	14d68 <__assert_fail@plt+0x3c6c>
   14d24:	mov	r1, #-2147483648	; 0x80000000
   14d28:	sdiv	r1, r1, r4
   14d2c:	mvn	r7, #-2147483648	; 0x80000000
   14d30:	cmp	r1, r5
   14d34:	bge	14d68 <__assert_fail@plt+0x3c6c>
   14d38:	b	14d78 <__assert_fail@plt+0x3c7c>
   14d3c:	beq	14d68 <__assert_fail@plt+0x3c6c>
   14d40:	mov	r1, #-2147483648	; 0x80000000
   14d44:	sdiv	r1, r1, r5
   14d48:	mvn	r7, #-2147483648	; 0x80000000
   14d4c:	cmp	r1, r4
   14d50:	bge	14d68 <__assert_fail@plt+0x3c6c>
   14d54:	b	14d78 <__assert_fail@plt+0x3c7c>
   14d58:	mvn	r7, #-2147483648	; 0x80000000
   14d5c:	sdiv	r1, r7, r4
   14d60:	cmp	r5, r1
   14d64:	blt	14d78 <__assert_fail@plt+0x3c7c>
   14d68:	mul	r1, r5, r4
   14d6c:	mov	r7, #64	; 0x40
   14d70:	cmp	r1, #63	; 0x3f
   14d74:	bgt	14d80 <__assert_fail@plt+0x3c84>
   14d78:	sdiv	r5, r7, r4
   14d7c:	mul	r1, r5, r4
   14d80:	cmp	r0, #0
   14d84:	moveq	r7, #0
   14d88:	streq	r7, [r8]
   14d8c:	sub	r7, r5, r6
   14d90:	cmp	r7, r2
   14d94:	bge	14e40 <__assert_fail@plt+0x3d44>
   14d98:	add	r5, r6, r2
   14d9c:	mov	r1, #0
   14da0:	cmp	r5, r3
   14da4:	mov	r2, #0
   14da8:	movwgt	r2, #1
   14dac:	cmn	r3, #1
   14db0:	movwgt	r1, #1
   14db4:	cmp	r5, r6
   14db8:	bvs	14e28 <__assert_fail@plt+0x3d2c>
   14dbc:	ands	r1, r1, r2
   14dc0:	bne	14e28 <__assert_fail@plt+0x3d2c>
   14dc4:	cmn	r4, #1
   14dc8:	ble	14df0 <__assert_fail@plt+0x3cf4>
   14dcc:	cmp	r4, #0
   14dd0:	beq	14e3c <__assert_fail@plt+0x3d40>
   14dd4:	cmn	r5, #1
   14dd8:	ble	14e14 <__assert_fail@plt+0x3d18>
   14ddc:	mvn	r1, #-2147483648	; 0x80000000
   14de0:	udiv	r1, r1, r4
   14de4:	cmp	r1, r5
   14de8:	bge	14e3c <__assert_fail@plt+0x3d40>
   14dec:	b	14e28 <__assert_fail@plt+0x3d2c>
   14df0:	cmn	r5, #1
   14df4:	ble	14e2c <__assert_fail@plt+0x3d30>
   14df8:	cmn	r4, #1
   14dfc:	beq	14e3c <__assert_fail@plt+0x3d40>
   14e00:	mov	r1, #-2147483648	; 0x80000000
   14e04:	sdiv	r1, r1, r4
   14e08:	cmp	r1, r5
   14e0c:	bge	14e3c <__assert_fail@plt+0x3d40>
   14e10:	b	14e28 <__assert_fail@plt+0x3d2c>
   14e14:	beq	14e3c <__assert_fail@plt+0x3d40>
   14e18:	mov	r1, #-2147483648	; 0x80000000
   14e1c:	sdiv	r1, r1, r5
   14e20:	cmp	r1, r4
   14e24:	bge	14e3c <__assert_fail@plt+0x3d40>
   14e28:	bl	14f24 <__assert_fail@plt+0x3e28>
   14e2c:	mvn	r1, #-2147483648	; 0x80000000
   14e30:	sdiv	r1, r1, r4
   14e34:	cmp	r5, r1
   14e38:	blt	14e28 <__assert_fail@plt+0x3d2c>
   14e3c:	mul	r1, r5, r4
   14e40:	bl	14bdc <__assert_fail@plt+0x3ae0>
   14e44:	str	r5, [r8]
   14e48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e4c:	mov	r1, #1
   14e50:	b	14e54 <__assert_fail@plt+0x3d58>
   14e54:	push	{fp, lr}
   14e58:	mov	fp, sp
   14e5c:	bl	15508 <__assert_fail@plt+0x440c>
   14e60:	pop	{fp, lr}
   14e64:	b	14bb0 <__assert_fail@plt+0x3ab4>
   14e68:	mov	r1, #1
   14e6c:	b	14e70 <__assert_fail@plt+0x3d74>
   14e70:	push	{fp, lr}
   14e74:	mov	fp, sp
   14e78:	bl	12a68 <__assert_fail@plt+0x196c>
   14e7c:	pop	{fp, lr}
   14e80:	b	14bb0 <__assert_fail@plt+0x3ab4>
   14e84:	push	{r4, r5, fp, lr}
   14e88:	add	fp, sp, #8
   14e8c:	mov	r4, r1
   14e90:	mov	r5, r0
   14e94:	mov	r0, r1
   14e98:	bl	14b9c <__assert_fail@plt+0x3aa0>
   14e9c:	mov	r1, r5
   14ea0:	mov	r2, r4
   14ea4:	pop	{r4, r5, fp, lr}
   14ea8:	b	10eec <memcpy@plt>
   14eac:	push	{r4, r5, fp, lr}
   14eb0:	add	fp, sp, #8
   14eb4:	mov	r4, r1
   14eb8:	mov	r5, r0
   14ebc:	mov	r0, r1
   14ec0:	bl	14bc4 <__assert_fail@plt+0x3ac8>
   14ec4:	mov	r1, r5
   14ec8:	mov	r2, r4
   14ecc:	pop	{r4, r5, fp, lr}
   14ed0:	b	10eec <memcpy@plt>
   14ed4:	push	{r4, r5, fp, lr}
   14ed8:	add	fp, sp, #8
   14edc:	mov	r4, r1
   14ee0:	mov	r5, r0
   14ee4:	add	r0, r1, #1
   14ee8:	bl	14bc4 <__assert_fail@plt+0x3ac8>
   14eec:	mov	r1, #0
   14ef0:	strb	r1, [r0, r4]
   14ef4:	mov	r1, r5
   14ef8:	mov	r2, r4
   14efc:	pop	{r4, r5, fp, lr}
   14f00:	b	10eec <memcpy@plt>
   14f04:	push	{r4, sl, fp, lr}
   14f08:	add	fp, sp, #8
   14f0c:	mov	r4, r0
   14f10:	bl	11000 <strlen@plt>
   14f14:	add	r1, r0, #1
   14f18:	mov	r0, r4
   14f1c:	pop	{r4, sl, fp, lr}
   14f20:	b	14e84 <__assert_fail@plt+0x3d88>
   14f24:	push	{fp, lr}
   14f28:	mov	fp, sp
   14f2c:	movw	r0, #28916	; 0x70f4
   14f30:	movt	r0, #2
   14f34:	ldr	r4, [r0]
   14f38:	movw	r1, #26920	; 0x6928
   14f3c:	movt	r1, #1
   14f40:	mov	r0, #0
   14f44:	mov	r2, #5
   14f48:	bl	10f1c <dcgettext@plt>
   14f4c:	mov	r3, r0
   14f50:	movw	r2, #24816	; 0x60f0
   14f54:	movt	r2, #1
   14f58:	mov	r0, r4
   14f5c:	mov	r1, #0
   14f60:	bl	10f94 <error@plt>
   14f64:	bl	110e4 <abort@plt>
   14f68:	bx	lr
   14f6c:	b	155e8 <__assert_fail@plt+0x44ec>
   14f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f74:	add	fp, sp, #28
   14f78:	sub	sp, sp, #20
   14f7c:	cmp	r2, #37	; 0x25
   14f80:	bcs	15398 <__assert_fail@plt+0x429c>
   14f84:	mov	r9, r3
   14f88:	mov	r7, r2
   14f8c:	mov	r6, r1
   14f90:	mov	r4, r0
   14f94:	ldr	sl, [fp, #8]
   14f98:	bl	11018 <__errno_location@plt>
   14f9c:	mov	r5, r0
   14fa0:	mov	r0, #0
   14fa4:	str	r0, [r5]
   14fa8:	add	r8, sp, #16
   14fac:	cmp	r6, #0
   14fb0:	movne	r8, r6
   14fb4:	mov	r0, r4
   14fb8:	mov	r1, r8
   14fbc:	mov	r2, r7
   14fc0:	bl	1106c <strtoimax@plt>
   14fc4:	str	r1, [sp, #12]
   14fc8:	str	r0, [sp, #8]
   14fcc:	ldr	r7, [r8]
   14fd0:	cmp	r7, r4
   14fd4:	beq	15000 <__assert_fail@plt+0x3f04>
   14fd8:	ldr	r0, [r5]
   14fdc:	cmp	r0, #0
   14fe0:	beq	1503c <__assert_fail@plt+0x3f40>
   14fe4:	mov	r5, #4
   14fe8:	cmp	r0, #34	; 0x22
   14fec:	bne	1538c <__assert_fail@plt+0x4290>
   14ff0:	mov	r5, #1
   14ff4:	cmp	sl, #0
   14ff8:	bne	15048 <__assert_fail@plt+0x3f4c>
   14ffc:	b	15380 <__assert_fail@plt+0x4284>
   15000:	mov	r5, #4
   15004:	cmp	sl, #0
   15008:	beq	1538c <__assert_fail@plt+0x4290>
   1500c:	ldrb	r1, [r7]
   15010:	cmp	r1, #0
   15014:	beq	1538c <__assert_fail@plt+0x4290>
   15018:	mov	r0, sl
   1501c:	bl	1100c <strchr@plt>
   15020:	cmp	r0, #0
   15024:	beq	1538c <__assert_fail@plt+0x4290>
   15028:	mov	r5, #0
   1502c:	str	r5, [sp, #12]
   15030:	mov	r0, #1
   15034:	str	r0, [sp, #8]
   15038:	b	15048 <__assert_fail@plt+0x3f4c>
   1503c:	mov	r5, r0
   15040:	cmp	sl, #0
   15044:	beq	15380 <__assert_fail@plt+0x4284>
   15048:	ldrb	r4, [r7]
   1504c:	cmp	r4, #0
   15050:	beq	15380 <__assert_fail@plt+0x4284>
   15054:	mov	r0, sl
   15058:	mov	r1, r4
   1505c:	bl	1100c <strchr@plt>
   15060:	cmp	r0, #0
   15064:	beq	1529c <__assert_fail@plt+0x41a0>
   15068:	sub	r0, r4, #69	; 0x45
   1506c:	mov	r1, #1
   15070:	str	r1, [sp, #4]
   15074:	mov	r6, #1024	; 0x400
   15078:	cmp	r0, #47	; 0x2f
   1507c:	bhi	15198 <__assert_fail@plt+0x409c>
   15080:	add	r1, pc, #0
   15084:	ldr	pc, [r1, r0, lsl #2]
   15088:	andeq	r5, r1, r8, asr #2
   1508c:	muleq	r1, r8, r1
   15090:	andeq	r5, r1, r8, asr #2
   15094:	muleq	r1, r8, r1
   15098:	muleq	r1, r8, r1
   1509c:	muleq	r1, r8, r1
   150a0:	andeq	r5, r1, r8, asr #2
   150a4:	muleq	r1, r8, r1
   150a8:	andeq	r5, r1, r8, asr #2
   150ac:	muleq	r1, r8, r1
   150b0:	muleq	r1, r8, r1
   150b4:	andeq	r5, r1, r8, asr #2
   150b8:	muleq	r1, r8, r1
   150bc:	muleq	r1, r8, r1
   150c0:	muleq	r1, r8, r1
   150c4:	andeq	r5, r1, r8, asr #2
   150c8:	muleq	r1, r8, r1
   150cc:	muleq	r1, r8, r1
   150d0:	muleq	r1, r8, r1
   150d4:	muleq	r1, r8, r1
   150d8:	andeq	r5, r1, r8, asr #2
   150dc:	andeq	r5, r1, r8, asr #2
   150e0:	muleq	r1, r8, r1
   150e4:	muleq	r1, r8, r1
   150e8:	muleq	r1, r8, r1
   150ec:	muleq	r1, r8, r1
   150f0:	muleq	r1, r8, r1
   150f4:	muleq	r1, r8, r1
   150f8:	muleq	r1, r8, r1
   150fc:	muleq	r1, r8, r1
   15100:	muleq	r1, r8, r1
   15104:	muleq	r1, r8, r1
   15108:	muleq	r1, r8, r1
   1510c:	muleq	r1, r8, r1
   15110:	andeq	r5, r1, r8, asr #2
   15114:	muleq	r1, r8, r1
   15118:	muleq	r1, r8, r1
   1511c:	muleq	r1, r8, r1
   15120:	andeq	r5, r1, r8, asr #2
   15124:	muleq	r1, r8, r1
   15128:	andeq	r5, r1, r8, asr #2
   1512c:	muleq	r1, r8, r1
   15130:	muleq	r1, r8, r1
   15134:	muleq	r1, r8, r1
   15138:	muleq	r1, r8, r1
   1513c:	muleq	r1, r8, r1
   15140:	muleq	r1, r8, r1
   15144:	andeq	r5, r1, r8, asr #2
   15148:	mov	r0, sl
   1514c:	mov	r1, #48	; 0x30
   15150:	bl	1100c <strchr@plt>
   15154:	cmp	r0, #0
   15158:	beq	15198 <__assert_fail@plt+0x409c>
   1515c:	ldrb	r0, [r7, #1]
   15160:	cmp	r0, #66	; 0x42
   15164:	cmpne	r0, #68	; 0x44
   15168:	bne	1517c <__assert_fail@plt+0x4080>
   1516c:	mov	r0, #2
   15170:	str	r0, [sp, #4]
   15174:	mov	r6, #1000	; 0x3e8
   15178:	b	15198 <__assert_fail@plt+0x409c>
   1517c:	cmp	r0, #105	; 0x69
   15180:	bne	15198 <__assert_fail@plt+0x409c>
   15184:	ldrb	r0, [r7, #2]
   15188:	mov	r1, #1
   1518c:	cmp	r0, #66	; 0x42
   15190:	movweq	r1, #3
   15194:	str	r1, [sp, #4]
   15198:	sub	r1, r4, #66	; 0x42
   1519c:	cmp	r1, #53	; 0x35
   151a0:	bhi	1529c <__assert_fail@plt+0x41a0>
   151a4:	mov	r0, #0
   151a8:	add	r2, pc, #0
   151ac:	ldr	pc, [r2, r1, lsl #2]
   151b0:	andeq	r5, r1, r0, lsl #6
   151b4:	muleq	r1, ip, r2
   151b8:	muleq	r1, ip, r2
   151bc:	andeq	r5, r1, ip, lsl #6
   151c0:	muleq	r1, ip, r2
   151c4:	andeq	r5, r1, r8, lsl #5
   151c8:	muleq	r1, ip, r2
   151cc:	muleq	r1, ip, r2
   151d0:	muleq	r1, ip, r2
   151d4:			; <UNDEFINED> instruction: 0x000152b0
   151d8:	muleq	r1, ip, r2
   151dc:	andeq	r5, r1, r4, asr #5
   151e0:	muleq	r1, ip, r2
   151e4:	muleq	r1, ip, r2
   151e8:	andeq	r5, r1, r0, lsr #6
   151ec:	muleq	r1, ip, r2
   151f0:	muleq	r1, ip, r2
   151f4:	muleq	r1, ip, r2
   151f8:	ldrdeq	r5, [r1], -r8
   151fc:	muleq	r1, ip, r2
   15200:	muleq	r1, ip, r2
   15204:	muleq	r1, ip, r2
   15208:	muleq	r1, ip, r2
   1520c:	andeq	r5, r1, r4, lsr r3
   15210:	andeq	r5, r1, ip, ror #5
   15214:	muleq	r1, ip, r2
   15218:	muleq	r1, ip, r2
   1521c:	muleq	r1, ip, r2
   15220:	muleq	r1, ip, r2
   15224:	muleq	r1, ip, r2
   15228:	muleq	r1, ip, r2
   1522c:	muleq	r1, ip, r2
   15230:	andeq	r5, r1, r8, asr #6
   15234:	andeq	r5, r1, r0, ror #6
   15238:	muleq	r1, ip, r2
   1523c:	muleq	r1, ip, r2
   15240:	muleq	r1, ip, r2
   15244:	andeq	r5, r1, r8, lsl #5
   15248:	muleq	r1, ip, r2
   1524c:	muleq	r1, ip, r2
   15250:	muleq	r1, ip, r2
   15254:			; <UNDEFINED> instruction: 0x000152b0
   15258:	muleq	r1, ip, r2
   1525c:	andeq	r5, r1, r4, asr #5
   15260:	muleq	r1, ip, r2
   15264:	muleq	r1, ip, r2
   15268:	muleq	r1, ip, r2
   1526c:	muleq	r1, ip, r2
   15270:	muleq	r1, ip, r2
   15274:	muleq	r1, ip, r2
   15278:	ldrdeq	r5, [r1], -r8
   1527c:	muleq	r1, ip, r2
   15280:	muleq	r1, ip, r2
   15284:	andeq	r5, r1, r4, asr r3
   15288:	add	r0, sp, #8
   1528c:	mov	r1, r6
   15290:	mov	r2, #3
   15294:	bl	154bc <__assert_fail@plt+0x43c0>
   15298:	b	15360 <__assert_fail@plt+0x4264>
   1529c:	ldr	r0, [sp, #8]
   152a0:	ldr	r1, [sp, #12]
   152a4:	strd	r0, [r9]
   152a8:	orr	r5, r5, #2
   152ac:	b	1538c <__assert_fail@plt+0x4290>
   152b0:	add	r0, sp, #8
   152b4:	mov	r1, r6
   152b8:	mov	r2, #1
   152bc:	bl	154bc <__assert_fail@plt+0x43c0>
   152c0:	b	15360 <__assert_fail@plt+0x4264>
   152c4:	add	r0, sp, #8
   152c8:	mov	r1, r6
   152cc:	mov	r2, #2
   152d0:	bl	154bc <__assert_fail@plt+0x43c0>
   152d4:	b	15360 <__assert_fail@plt+0x4264>
   152d8:	add	r0, sp, #8
   152dc:	mov	r1, r6
   152e0:	mov	r2, #4
   152e4:	bl	154bc <__assert_fail@plt+0x43c0>
   152e8:	b	15360 <__assert_fail@plt+0x4264>
   152ec:	add	r0, sp, #8
   152f0:	mov	r1, r6
   152f4:	mov	r2, #7
   152f8:	bl	154bc <__assert_fail@plt+0x43c0>
   152fc:	b	15360 <__assert_fail@plt+0x4264>
   15300:	add	r0, sp, #8
   15304:	mov	r1, #1024	; 0x400
   15308:	b	1535c <__assert_fail@plt+0x4260>
   1530c:	add	r0, sp, #8
   15310:	mov	r1, r6
   15314:	mov	r2, #6
   15318:	bl	154bc <__assert_fail@plt+0x43c0>
   1531c:	b	15360 <__assert_fail@plt+0x4264>
   15320:	add	r0, sp, #8
   15324:	mov	r1, r6
   15328:	mov	r2, #5
   1532c:	bl	154bc <__assert_fail@plt+0x43c0>
   15330:	b	15360 <__assert_fail@plt+0x4264>
   15334:	add	r0, sp, #8
   15338:	mov	r1, r6
   1533c:	mov	r2, #8
   15340:	bl	154bc <__assert_fail@plt+0x43c0>
   15344:	b	15360 <__assert_fail@plt+0x4264>
   15348:	add	r0, sp, #8
   1534c:	mov	r1, #512	; 0x200
   15350:	b	1535c <__assert_fail@plt+0x4260>
   15354:	add	r0, sp, #8
   15358:	mov	r1, #2
   1535c:	bl	153b8 <__assert_fail@plt+0x42bc>
   15360:	ldr	r1, [r8]
   15364:	ldr	r3, [sp, #4]
   15368:	add	r2, r1, r3
   1536c:	str	r2, [r8]
   15370:	ldrb	r1, [r1, r3]
   15374:	orr	r5, r0, r5
   15378:	cmp	r1, #0
   1537c:	orrne	r5, r5, #2
   15380:	ldr	r0, [sp, #8]
   15384:	ldr	r1, [sp, #12]
   15388:	strd	r0, [r9]
   1538c:	mov	r0, r5
   15390:	sub	sp, fp, #28
   15394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15398:	movw	r0, #26937	; 0x6939
   1539c:	movt	r0, #1
   153a0:	movw	r1, #26975	; 0x695f
   153a4:	movt	r1, #1
   153a8:	movw	r3, #26991	; 0x696f
   153ac:	movt	r3, #1
   153b0:	mov	r2, #85	; 0x55
   153b4:	bl	110fc <__assert_fail@plt>
   153b8:	push	{r4, r5, r6, r7, fp, lr}
   153bc:	add	fp, sp, #16
   153c0:	mov	r5, r1
   153c4:	mov	r4, r0
   153c8:	cmn	r1, #1
   153cc:	ble	153f4 <__assert_fail@plt+0x42f8>
   153d0:	cmp	r5, #0
   153d4:	beq	15458 <__assert_fail@plt+0x435c>
   153d8:	ldrd	r6, [r4]
   153dc:	cmn	r7, #1
   153e0:	ble	1542c <__assert_fail@plt+0x4330>
   153e4:	asr	r3, r5, #31
   153e8:	mvn	r0, #0
   153ec:	mvn	r1, #-2147483648	; 0x80000000
   153f0:	b	15414 <__assert_fail@plt+0x4318>
   153f4:	ldrd	r6, [r4]
   153f8:	cmn	r7, #1
   153fc:	ble	15474 <__assert_fail@plt+0x4378>
   15400:	cmn	r5, #1
   15404:	beq	15458 <__assert_fail@plt+0x435c>
   15408:	asr	r3, r5, #31
   1540c:	mov	r0, #0
   15410:	mov	r1, #-2147483648	; 0x80000000
   15414:	mov	r2, r5
   15418:	bl	15b44 <__assert_fail@plt+0x4a48>
   1541c:	subs	r0, r0, r6
   15420:	sbcs	r0, r1, r7
   15424:	bge	15458 <__assert_fail@plt+0x435c>
   15428:	b	15494 <__assert_fail@plt+0x4398>
   1542c:	and	r0, r6, r7
   15430:	cmn	r0, #1
   15434:	beq	15458 <__assert_fail@plt+0x435c>
   15438:	mov	r0, #0
   1543c:	mov	r1, #-2147483648	; 0x80000000
   15440:	mov	r2, r6
   15444:	mov	r3, r7
   15448:	bl	15b44 <__assert_fail@plt+0x4a48>
   1544c:	subs	r0, r0, r5
   15450:	sbcs	r0, r1, r5, asr #31
   15454:	blt	15494 <__assert_fail@plt+0x4398>
   15458:	ldrd	r0, [r4]
   1545c:	umull	r2, r3, r0, r5
   15460:	asr	r7, r5, #31
   15464:	mla	r0, r0, r7, r3
   15468:	mla	r1, r1, r5, r0
   1546c:	mov	r0, #0
   15470:	b	154b0 <__assert_fail@plt+0x43b4>
   15474:	asr	r3, r5, #31
   15478:	mvn	r0, #0
   1547c:	mvn	r1, #-2147483648	; 0x80000000
   15480:	mov	r2, r5
   15484:	bl	15b44 <__assert_fail@plt+0x4a48>
   15488:	subs	r0, r6, r0
   1548c:	sbcs	r0, r7, r1
   15490:	bge	15458 <__assert_fail@plt+0x435c>
   15494:	ldr	r0, [r4, #4]
   15498:	mvn	r1, #-2147483648	; 0x80000000
   1549c:	cmp	r0, #0
   154a0:	movmi	r1, #-2147483648	; 0x80000000
   154a4:	mvn	r2, #0
   154a8:	movwmi	r2, #0
   154ac:	mov	r0, #1
   154b0:	str	r2, [r4]
   154b4:	str	r1, [r4, #4]
   154b8:	pop	{r4, r5, r6, r7, fp, pc}
   154bc:	push	{r4, r5, r6, r7, fp, lr}
   154c0:	add	fp, sp, #16
   154c4:	cmp	r2, #0
   154c8:	beq	154fc <__assert_fail@plt+0x4400>
   154cc:	mov	r4, r2
   154d0:	mov	r5, r1
   154d4:	mov	r7, r0
   154d8:	mov	r6, #0
   154dc:	mov	r0, r7
   154e0:	mov	r1, r5
   154e4:	bl	153b8 <__assert_fail@plt+0x42bc>
   154e8:	orr	r6, r0, r6
   154ec:	subs	r4, r4, #1
   154f0:	bne	154dc <__assert_fail@plt+0x43e0>
   154f4:	mov	r0, r6
   154f8:	pop	{r4, r5, r6, r7, fp, pc}
   154fc:	mov	r6, #0
   15500:	mov	r0, r6
   15504:	pop	{r4, r5, r6, r7, fp, pc}
   15508:	clz	r2, r1
   1550c:	lsr	r2, r2, #5
   15510:	clz	r3, r0
   15514:	lsr	r3, r3, #5
   15518:	orrs	r2, r3, r2
   1551c:	movwne	r1, #1
   15520:	movwne	r0, #1
   15524:	cmp	r1, #0
   15528:	beq	15558 <__assert_fail@plt+0x445c>
   1552c:	mvn	r2, #-2147483648	; 0x80000000
   15530:	udiv	r2, r2, r1
   15534:	cmp	r2, r0
   15538:	bcs	15558 <__assert_fail@plt+0x445c>
   1553c:	push	{fp, lr}
   15540:	mov	fp, sp
   15544:	bl	11018 <__errno_location@plt>
   15548:	mov	r1, #12
   1554c:	str	r1, [r0]
   15550:	mov	r0, #0
   15554:	pop	{fp, pc}
   15558:	b	10e80 <calloc@plt>
   1555c:	cmp	r0, #0
   15560:	movweq	r0, #1
   15564:	cmn	r0, #1
   15568:	ble	15570 <__assert_fail@plt+0x4474>
   1556c:	b	10fa0 <malloc@plt>
   15570:	push	{fp, lr}
   15574:	mov	fp, sp
   15578:	bl	11018 <__errno_location@plt>
   1557c:	mov	r1, #12
   15580:	str	r1, [r0]
   15584:	mov	r0, #0
   15588:	pop	{fp, pc}
   1558c:	push	{fp, lr}
   15590:	mov	fp, sp
   15594:	cmp	r0, #0
   15598:	beq	155b4 <__assert_fail@plt+0x44b8>
   1559c:	cmp	r1, #0
   155a0:	beq	155c0 <__assert_fail@plt+0x44c4>
   155a4:	cmn	r1, #1
   155a8:	ble	155cc <__assert_fail@plt+0x44d0>
   155ac:	pop	{fp, lr}
   155b0:	b	10f28 <realloc@plt>
   155b4:	mov	r0, r1
   155b8:	pop	{fp, lr}
   155bc:	b	1555c <__assert_fail@plt+0x4460>
   155c0:	bl	1296c <__assert_fail@plt+0x1870>
   155c4:	mov	r0, #0
   155c8:	pop	{fp, pc}
   155cc:	bl	11018 <__errno_location@plt>
   155d0:	mov	r1, #12
   155d4:	str	r1, [r0]
   155d8:	mov	r0, #0
   155dc:	pop	{fp, pc}
   155e0:	mov	r0, #0
   155e4:	bx	lr
   155e8:	mov	r0, #0
   155ec:	bx	lr
   155f0:	mov	r1, r0
   155f4:	sub	r2, r0, #65	; 0x41
   155f8:	mov	r0, #1
   155fc:	cmp	r2, #26
   15600:	subcs	r2, r1, #97	; 0x61
   15604:	cmpcs	r2, #26
   15608:	bcs	15610 <__assert_fail@plt+0x4514>
   1560c:	bx	lr
   15610:	sub	r1, r1, #48	; 0x30
   15614:	cmp	r1, #10
   15618:	movcs	r0, #0
   1561c:	bx	lr
   15620:	mov	r1, r0
   15624:	sub	r2, r0, #65	; 0x41
   15628:	mov	r0, #1
   1562c:	cmp	r2, #26
   15630:	subcs	r1, r1, #97	; 0x61
   15634:	cmpcs	r1, #26
   15638:	movcs	r0, #0
   1563c:	bx	lr
   15640:	mov	r1, #0
   15644:	cmp	r0, #128	; 0x80
   15648:	movwcc	r1, #1
   1564c:	mov	r0, r1
   15650:	bx	lr
   15654:	sub	r1, r0, #9
   15658:	clz	r1, r1
   1565c:	lsr	r1, r1, #5
   15660:	sub	r0, r0, #32
   15664:	clz	r0, r0
   15668:	lsr	r0, r0, #5
   1566c:	orr	r0, r0, r1
   15670:	bx	lr
   15674:	mov	r1, r0
   15678:	mov	r0, #1
   1567c:	cmp	r1, #32
   15680:	bxcc	lr
   15684:	cmp	r1, #127	; 0x7f
   15688:	movne	r0, #0
   1568c:	bx	lr
   15690:	sub	r1, r0, #48	; 0x30
   15694:	mov	r0, #0
   15698:	cmp	r1, #10
   1569c:	movwcc	r0, #1
   156a0:	bx	lr
   156a4:	sub	r1, r0, #33	; 0x21
   156a8:	mov	r0, #0
   156ac:	cmp	r1, #94	; 0x5e
   156b0:	movwcc	r0, #1
   156b4:	bx	lr
   156b8:	sub	r1, r0, #97	; 0x61
   156bc:	mov	r0, #0
   156c0:	cmp	r1, #26
   156c4:	movwcc	r0, #1
   156c8:	bx	lr
   156cc:	sub	r1, r0, #32
   156d0:	mov	r0, #0
   156d4:	cmp	r1, #95	; 0x5f
   156d8:	movwcc	r0, #1
   156dc:	bx	lr
   156e0:	sub	r1, r0, #33	; 0x21
   156e4:	cmp	r1, #93	; 0x5d
   156e8:	bhi	15874 <__assert_fail@plt+0x4778>
   156ec:	mov	r0, #1
   156f0:	add	r2, pc, #0
   156f4:	ldr	pc, [r2, r1, lsl #2]
   156f8:	andeq	r5, r1, r0, ror r8
   156fc:	andeq	r5, r1, r0, ror r8
   15700:	andeq	r5, r1, r0, ror r8
   15704:	andeq	r5, r1, r0, ror r8
   15708:	andeq	r5, r1, r0, ror r8
   1570c:	andeq	r5, r1, r0, ror r8
   15710:	andeq	r5, r1, r0, ror r8
   15714:	andeq	r5, r1, r0, ror r8
   15718:	andeq	r5, r1, r0, ror r8
   1571c:	andeq	r5, r1, r0, ror r8
   15720:	andeq	r5, r1, r0, ror r8
   15724:	andeq	r5, r1, r0, ror r8
   15728:	andeq	r5, r1, r0, ror r8
   1572c:	andeq	r5, r1, r0, ror r8
   15730:	andeq	r5, r1, r0, ror r8
   15734:	andeq	r5, r1, r4, ror r8
   15738:	andeq	r5, r1, r4, ror r8
   1573c:	andeq	r5, r1, r4, ror r8
   15740:	andeq	r5, r1, r4, ror r8
   15744:	andeq	r5, r1, r4, ror r8
   15748:	andeq	r5, r1, r4, ror r8
   1574c:	andeq	r5, r1, r4, ror r8
   15750:	andeq	r5, r1, r4, ror r8
   15754:	andeq	r5, r1, r4, ror r8
   15758:	andeq	r5, r1, r4, ror r8
   1575c:	andeq	r5, r1, r0, ror r8
   15760:	andeq	r5, r1, r0, ror r8
   15764:	andeq	r5, r1, r0, ror r8
   15768:	andeq	r5, r1, r0, ror r8
   1576c:	andeq	r5, r1, r0, ror r8
   15770:	andeq	r5, r1, r0, ror r8
   15774:	andeq	r5, r1, r0, ror r8
   15778:	andeq	r5, r1, r4, ror r8
   1577c:	andeq	r5, r1, r4, ror r8
   15780:	andeq	r5, r1, r4, ror r8
   15784:	andeq	r5, r1, r4, ror r8
   15788:	andeq	r5, r1, r4, ror r8
   1578c:	andeq	r5, r1, r4, ror r8
   15790:	andeq	r5, r1, r4, ror r8
   15794:	andeq	r5, r1, r4, ror r8
   15798:	andeq	r5, r1, r4, ror r8
   1579c:	andeq	r5, r1, r4, ror r8
   157a0:	andeq	r5, r1, r4, ror r8
   157a4:	andeq	r5, r1, r4, ror r8
   157a8:	andeq	r5, r1, r4, ror r8
   157ac:	andeq	r5, r1, r4, ror r8
   157b0:	andeq	r5, r1, r4, ror r8
   157b4:	andeq	r5, r1, r4, ror r8
   157b8:	andeq	r5, r1, r4, ror r8
   157bc:	andeq	r5, r1, r4, ror r8
   157c0:	andeq	r5, r1, r4, ror r8
   157c4:	andeq	r5, r1, r4, ror r8
   157c8:	andeq	r5, r1, r4, ror r8
   157cc:	andeq	r5, r1, r4, ror r8
   157d0:	andeq	r5, r1, r4, ror r8
   157d4:	andeq	r5, r1, r4, ror r8
   157d8:	andeq	r5, r1, r4, ror r8
   157dc:	andeq	r5, r1, r4, ror r8
   157e0:	andeq	r5, r1, r0, ror r8
   157e4:	andeq	r5, r1, r0, ror r8
   157e8:	andeq	r5, r1, r0, ror r8
   157ec:	andeq	r5, r1, r0, ror r8
   157f0:	andeq	r5, r1, r0, ror r8
   157f4:	andeq	r5, r1, r0, ror r8
   157f8:	andeq	r5, r1, r4, ror r8
   157fc:	andeq	r5, r1, r4, ror r8
   15800:	andeq	r5, r1, r4, ror r8
   15804:	andeq	r5, r1, r4, ror r8
   15808:	andeq	r5, r1, r4, ror r8
   1580c:	andeq	r5, r1, r4, ror r8
   15810:	andeq	r5, r1, r4, ror r8
   15814:	andeq	r5, r1, r4, ror r8
   15818:	andeq	r5, r1, r4, ror r8
   1581c:	andeq	r5, r1, r4, ror r8
   15820:	andeq	r5, r1, r4, ror r8
   15824:	andeq	r5, r1, r4, ror r8
   15828:	andeq	r5, r1, r4, ror r8
   1582c:	andeq	r5, r1, r4, ror r8
   15830:	andeq	r5, r1, r4, ror r8
   15834:	andeq	r5, r1, r4, ror r8
   15838:	andeq	r5, r1, r4, ror r8
   1583c:	andeq	r5, r1, r4, ror r8
   15840:	andeq	r5, r1, r4, ror r8
   15844:	andeq	r5, r1, r4, ror r8
   15848:	andeq	r5, r1, r4, ror r8
   1584c:	andeq	r5, r1, r4, ror r8
   15850:	andeq	r5, r1, r4, ror r8
   15854:	andeq	r5, r1, r4, ror r8
   15858:	andeq	r5, r1, r4, ror r8
   1585c:	andeq	r5, r1, r4, ror r8
   15860:	andeq	r5, r1, r0, ror r8
   15864:	andeq	r5, r1, r0, ror r8
   15868:	andeq	r5, r1, r0, ror r8
   1586c:	andeq	r5, r1, r0, ror r8
   15870:	bx	lr
   15874:	mov	r0, #0
   15878:	bx	lr
   1587c:	sub	r0, r0, #9
   15880:	cmp	r0, #23
   15884:	movhi	r0, #0
   15888:	bxhi	lr
   1588c:	bic	r0, r0, #-16777216	; 0xff000000
   15890:	movw	r1, #31
   15894:	movt	r1, #128	; 0x80
   15898:	mov	r2, #1
   1589c:	and	r0, r2, r1, lsr r0
   158a0:	bx	lr
   158a4:	sub	r1, r0, #65	; 0x41
   158a8:	mov	r0, #0
   158ac:	cmp	r1, #26
   158b0:	movwcc	r0, #1
   158b4:	bx	lr
   158b8:	mov	r1, r0
   158bc:	sub	r2, r0, #48	; 0x30
   158c0:	mov	r0, #1
   158c4:	cmp	r2, #22
   158c8:	bhi	158e0 <__assert_fail@plt+0x47e4>
   158cc:	mov	ip, #1
   158d0:	movw	r3, #1023	; 0x3ff
   158d4:	movt	r3, #126	; 0x7e
   158d8:	tst	r3, ip, lsl r2
   158dc:	bxne	lr
   158e0:	sub	r1, r1, #97	; 0x61
   158e4:	cmp	r1, #6
   158e8:	movcs	r0, #0
   158ec:	bxcs	lr
   158f0:	bx	lr
   158f4:	sub	r1, r0, #65	; 0x41
   158f8:	cmp	r1, #26
   158fc:	addcc	r0, r0, #32
   15900:	bx	lr
   15904:	sub	r1, r0, #97	; 0x61
   15908:	cmp	r1, #26
   1590c:	subcc	r0, r0, #32
   15910:	bx	lr
   15914:	push	{r4, r5, r6, sl, fp, lr}
   15918:	add	fp, sp, #16
   1591c:	mov	r4, r0
   15920:	bl	10f70 <__fpending@plt>
   15924:	mov	r5, r0
   15928:	mov	r0, r4
   1592c:	bl	10f7c <ferror_unlocked@plt>
   15930:	mov	r6, r0
   15934:	mov	r0, r4
   15938:	bl	12864 <__assert_fail@plt+0x1768>
   1593c:	cmp	r6, #0
   15940:	beq	15964 <__assert_fail@plt+0x4868>
   15944:	mvn	r4, #0
   15948:	cmp	r0, #0
   1594c:	bne	15990 <__assert_fail@plt+0x4894>
   15950:	bl	11018 <__errno_location@plt>
   15954:	mov	r1, #0
   15958:	str	r1, [r0]
   1595c:	mov	r0, r4
   15960:	pop	{r4, r5, r6, sl, fp, pc}
   15964:	cmp	r0, #0
   15968:	mov	r4, r0
   1596c:	mvnne	r4, #0
   15970:	cmp	r5, #0
   15974:	bne	15990 <__assert_fail@plt+0x4894>
   15978:	cmp	r0, #0
   1597c:	beq	15990 <__assert_fail@plt+0x4894>
   15980:	bl	11018 <__errno_location@plt>
   15984:	ldr	r0, [r0]
   15988:	subs	r4, r0, #9
   1598c:	mvnne	r4, #0
   15990:	mov	r0, r4
   15994:	pop	{r4, r5, r6, sl, fp, pc}
   15998:	push	{fp, lr}
   1599c:	mov	fp, sp
   159a0:	mov	r0, #14
   159a4:	bl	110a8 <nl_langinfo@plt>
   159a8:	movw	r1, #25328	; 0x62f0
   159ac:	movt	r1, #1
   159b0:	cmp	r0, #0
   159b4:	movne	r1, r0
   159b8:	ldrb	r2, [r1]
   159bc:	movw	r0, #27069	; 0x69bd
   159c0:	movt	r0, #1
   159c4:	cmp	r2, #0
   159c8:	movne	r0, r1
   159cc:	pop	{fp, pc}
   159d0:	push	{r4, r5, r6, r7, fp, lr}
   159d4:	add	fp, sp, #16
   159d8:	sub	sp, sp, #8
   159dc:	mov	r7, r2
   159e0:	mov	r4, r1
   159e4:	add	r5, sp, #4
   159e8:	cmp	r0, #0
   159ec:	movne	r5, r0
   159f0:	mov	r0, r5
   159f4:	bl	10f88 <mbrtowc@plt>
   159f8:	mov	r6, r0
   159fc:	cmp	r7, #0
   15a00:	beq	15a28 <__assert_fail@plt+0x492c>
   15a04:	cmn	r6, #2
   15a08:	bcc	15a28 <__assert_fail@plt+0x492c>
   15a0c:	mov	r0, #0
   15a10:	bl	15a34 <__assert_fail@plt+0x4938>
   15a14:	cmp	r0, #0
   15a18:	bne	15a28 <__assert_fail@plt+0x492c>
   15a1c:	ldrb	r0, [r4]
   15a20:	str	r0, [r5]
   15a24:	mov	r6, #1
   15a28:	mov	r0, r6
   15a2c:	sub	sp, fp, #16
   15a30:	pop	{r4, r5, r6, r7, fp, pc}
   15a34:	push	{r4, sl, fp, lr}
   15a38:	add	fp, sp, #8
   15a3c:	sub	sp, sp, #264	; 0x108
   15a40:	add	r1, sp, #7
   15a44:	movw	r2, #257	; 0x101
   15a48:	bl	15aa0 <__assert_fail@plt+0x49a4>
   15a4c:	mov	r4, #0
   15a50:	cmp	r0, #0
   15a54:	bne	15a94 <__assert_fail@plt+0x4998>
   15a58:	add	r0, sp, #7
   15a5c:	movw	r1, #27075	; 0x69c3
   15a60:	movt	r1, #1
   15a64:	mov	r2, #2
   15a68:	bl	10ff4 <bcmp@plt>
   15a6c:	cmp	r0, #0
   15a70:	beq	15a94 <__assert_fail@plt+0x4998>
   15a74:	add	r0, sp, #7
   15a78:	movw	r1, #27077	; 0x69c5
   15a7c:	movt	r1, #1
   15a80:	mov	r2, #6
   15a84:	bl	10ff4 <bcmp@plt>
   15a88:	mov	r4, r0
   15a8c:	cmp	r0, #0
   15a90:	movwne	r4, #1
   15a94:	mov	r0, r4
   15a98:	sub	sp, fp, #8
   15a9c:	pop	{r4, sl, fp, pc}
   15aa0:	b	15aa4 <__assert_fail@plt+0x49a8>
   15aa4:	push	{r4, r5, r6, r7, fp, lr}
   15aa8:	add	fp, sp, #16
   15aac:	mov	r6, r2
   15ab0:	mov	r4, r1
   15ab4:	bl	15b3c <__assert_fail@plt+0x4a40>
   15ab8:	cmp	r0, #0
   15abc:	beq	15aec <__assert_fail@plt+0x49f0>
   15ac0:	mov	r7, r0
   15ac4:	bl	11000 <strlen@plt>
   15ac8:	cmp	r0, r6
   15acc:	bcs	15b08 <__assert_fail@plt+0x4a0c>
   15ad0:	add	r2, r0, #1
   15ad4:	mov	r0, r4
   15ad8:	mov	r1, r7
   15adc:	bl	10eec <memcpy@plt>
   15ae0:	mov	r5, #0
   15ae4:	mov	r0, r5
   15ae8:	pop	{r4, r5, r6, r7, fp, pc}
   15aec:	mov	r5, #22
   15af0:	cmp	r6, #0
   15af4:	beq	15b30 <__assert_fail@plt+0x4a34>
   15af8:	mov	r0, #0
   15afc:	strb	r0, [r4]
   15b00:	mov	r0, r5
   15b04:	pop	{r4, r5, r6, r7, fp, pc}
   15b08:	mov	r5, #34	; 0x22
   15b0c:	cmp	r6, #0
   15b10:	beq	15b30 <__assert_fail@plt+0x4a34>
   15b14:	sub	r6, r6, #1
   15b18:	mov	r0, r4
   15b1c:	mov	r1, r7
   15b20:	mov	r2, r6
   15b24:	bl	10eec <memcpy@plt>
   15b28:	mov	r0, #0
   15b2c:	strb	r0, [r4, r6]
   15b30:	mov	r0, r5
   15b34:	pop	{r4, r5, r6, r7, fp, pc}
   15b38:	b	15b3c <__assert_fail@plt+0x4a40>
   15b3c:	mov	r1, #0
   15b40:	b	11090 <setlocale@plt>
   15b44:	cmp	r3, #0
   15b48:	cmpeq	r2, #0
   15b4c:	bne	15b70 <__assert_fail@plt+0x4a74>
   15b50:	cmp	r1, #0
   15b54:	movlt	r1, #-2147483648	; 0x80000000
   15b58:	movlt	r0, #0
   15b5c:	blt	15b6c <__assert_fail@plt+0x4a70>
   15b60:	cmpeq	r0, #0
   15b64:	mvnne	r1, #-2147483648	; 0x80000000
   15b68:	mvnne	r0, #0
   15b6c:	b	15c18 <__assert_fail@plt+0x4b1c>
   15b70:	sub	sp, sp, #8
   15b74:	push	{sp, lr}
   15b78:	cmp	r1, #0
   15b7c:	blt	15b9c <__assert_fail@plt+0x4aa0>
   15b80:	cmp	r3, #0
   15b84:	blt	15bd0 <__assert_fail@plt+0x4ad4>
   15b88:	bl	15c28 <__assert_fail@plt+0x4b2c>
   15b8c:	ldr	lr, [sp, #4]
   15b90:	add	sp, sp, #8
   15b94:	pop	{r2, r3}
   15b98:	bx	lr
   15b9c:	rsbs	r0, r0, #0
   15ba0:	sbc	r1, r1, r1, lsl #1
   15ba4:	cmp	r3, #0
   15ba8:	blt	15bf4 <__assert_fail@plt+0x4af8>
   15bac:	bl	15c28 <__assert_fail@plt+0x4b2c>
   15bb0:	ldr	lr, [sp, #4]
   15bb4:	add	sp, sp, #8
   15bb8:	pop	{r2, r3}
   15bbc:	rsbs	r0, r0, #0
   15bc0:	sbc	r1, r1, r1, lsl #1
   15bc4:	rsbs	r2, r2, #0
   15bc8:	sbc	r3, r3, r3, lsl #1
   15bcc:	bx	lr
   15bd0:	rsbs	r2, r2, #0
   15bd4:	sbc	r3, r3, r3, lsl #1
   15bd8:	bl	15c28 <__assert_fail@plt+0x4b2c>
   15bdc:	ldr	lr, [sp, #4]
   15be0:	add	sp, sp, #8
   15be4:	pop	{r2, r3}
   15be8:	rsbs	r0, r0, #0
   15bec:	sbc	r1, r1, r1, lsl #1
   15bf0:	bx	lr
   15bf4:	rsbs	r2, r2, #0
   15bf8:	sbc	r3, r3, r3, lsl #1
   15bfc:	bl	15c28 <__assert_fail@plt+0x4b2c>
   15c00:	ldr	lr, [sp, #4]
   15c04:	add	sp, sp, #8
   15c08:	pop	{r2, r3}
   15c0c:	rsbs	r2, r2, #0
   15c10:	sbc	r3, r3, r3, lsl #1
   15c14:	bx	lr
   15c18:	push	{r1, lr}
   15c1c:	mov	r0, #8
   15c20:	bl	10e98 <raise@plt>
   15c24:	pop	{r1, pc}
   15c28:	cmp	r1, r3
   15c2c:	cmpeq	r0, r2
   15c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c34:	mov	r4, r0
   15c38:	movcc	r0, #0
   15c3c:	mov	r5, r1
   15c40:	ldr	lr, [sp, #36]	; 0x24
   15c44:	movcc	r1, r0
   15c48:	bcc	15d44 <__assert_fail@plt+0x4c48>
   15c4c:	cmp	r3, #0
   15c50:	clzeq	ip, r2
   15c54:	clzne	ip, r3
   15c58:	addeq	ip, ip, #32
   15c5c:	cmp	r5, #0
   15c60:	clzeq	r1, r4
   15c64:	addeq	r1, r1, #32
   15c68:	clzne	r1, r5
   15c6c:	sub	ip, ip, r1
   15c70:	sub	sl, ip, #32
   15c74:	lsl	r9, r3, ip
   15c78:	rsb	fp, ip, #32
   15c7c:	orr	r9, r9, r2, lsl sl
   15c80:	orr	r9, r9, r2, lsr fp
   15c84:	lsl	r8, r2, ip
   15c88:	cmp	r5, r9
   15c8c:	cmpeq	r4, r8
   15c90:	movcc	r0, #0
   15c94:	movcc	r1, r0
   15c98:	bcc	15cb4 <__assert_fail@plt+0x4bb8>
   15c9c:	mov	r0, #1
   15ca0:	subs	r4, r4, r8
   15ca4:	lsl	r1, r0, sl
   15ca8:	orr	r1, r1, r0, lsr fp
   15cac:	lsl	r0, r0, ip
   15cb0:	sbc	r5, r5, r9
   15cb4:	cmp	ip, #0
   15cb8:	beq	15d44 <__assert_fail@plt+0x4c48>
   15cbc:	lsr	r6, r8, #1
   15cc0:	orr	r6, r6, r9, lsl #31
   15cc4:	lsr	r7, r9, #1
   15cc8:	mov	r2, ip
   15ccc:	b	15cf0 <__assert_fail@plt+0x4bf4>
   15cd0:	subs	r3, r4, r6
   15cd4:	sbc	r8, r5, r7
   15cd8:	adds	r3, r3, r3
   15cdc:	adc	r8, r8, r8
   15ce0:	adds	r4, r3, #1
   15ce4:	adc	r5, r8, #0
   15ce8:	subs	r2, r2, #1
   15cec:	beq	15d0c <__assert_fail@plt+0x4c10>
   15cf0:	cmp	r5, r7
   15cf4:	cmpeq	r4, r6
   15cf8:	bcs	15cd0 <__assert_fail@plt+0x4bd4>
   15cfc:	adds	r4, r4, r4
   15d00:	adc	r5, r5, r5
   15d04:	subs	r2, r2, #1
   15d08:	bne	15cf0 <__assert_fail@plt+0x4bf4>
   15d0c:	lsr	r3, r4, ip
   15d10:	orr	r3, r3, r5, lsl fp
   15d14:	lsr	r2, r5, ip
   15d18:	orr	r3, r3, r5, lsr sl
   15d1c:	adds	r0, r0, r4
   15d20:	mov	r4, r3
   15d24:	lsl	r3, r2, ip
   15d28:	orr	r3, r3, r4, lsl sl
   15d2c:	lsl	ip, r4, ip
   15d30:	orr	r3, r3, r4, lsr fp
   15d34:	adc	r1, r1, r5
   15d38:	subs	r0, r0, ip
   15d3c:	mov	r5, r2
   15d40:	sbc	r1, r1, r3
   15d44:	cmp	lr, #0
   15d48:	strdne	r4, [lr]
   15d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15d54:	mov	r7, r0
   15d58:	ldr	r6, [pc, #72]	; 15da8 <__assert_fail@plt+0x4cac>
   15d5c:	ldr	r5, [pc, #72]	; 15dac <__assert_fail@plt+0x4cb0>
   15d60:	add	r6, pc, r6
   15d64:	add	r5, pc, r5
   15d68:	sub	r6, r6, r5
   15d6c:	mov	r8, r1
   15d70:	mov	r9, r2
   15d74:	bl	10e60 <calloc@plt-0x20>
   15d78:	asrs	r6, r6, #2
   15d7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d80:	mov	r4, #0
   15d84:	add	r4, r4, #1
   15d88:	ldr	r3, [r5], #4
   15d8c:	mov	r2, r9
   15d90:	mov	r1, r8
   15d94:	mov	r0, r7
   15d98:	blx	r3
   15d9c:	cmp	r6, r4
   15da0:	bne	15d84 <__assert_fail@plt+0x4c88>
   15da4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15da8:	andeq	r1, r1, r4, lsr #3
   15dac:	muleq	r1, ip, r1
   15db0:	bx	lr
   15db4:	ldr	r3, [pc, #12]	; 15dc8 <__assert_fail@plt+0x4ccc>
   15db8:	mov	r1, #0
   15dbc:	add	r3, pc, r3
   15dc0:	ldr	r2, [r3]
   15dc4:	b	11024 <__cxa_atexit@plt>
   15dc8:	andeq	r1, r1, r8, lsr #6

Disassembly of section .fini:

00015dcc <.fini>:
   15dcc:	push	{r3, lr}
   15dd0:	pop	{r3, pc}
