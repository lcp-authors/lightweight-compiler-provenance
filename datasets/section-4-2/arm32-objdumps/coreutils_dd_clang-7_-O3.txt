
../repos/coreutils/src/dd:     file format elf32-littlearm


Disassembly of section .init:

00011338 <.init>:
   11338:	push	{r3, lr}
   1133c:	bl	1171c <__assert_fail@plt+0x4c>
   11340:	pop	{r3, pc}

Disassembly of section .plt:

00011344 <calloc@plt-0x14>:
   11344:	push	{lr}		; (str lr, [sp, #-4]!)
   11348:	ldr	lr, [pc, #4]	; 11354 <calloc@plt-0x4>
   1134c:	add	lr, pc, lr
   11350:	ldr	pc, [lr, #8]!
   11354:	andeq	sp, r1, ip, lsr #25

00011358 <calloc@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #118784	; 0x1d000
   11360:	ldr	pc, [ip, #3244]!	; 0xcac

00011364 <fputs_unlocked@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #118784	; 0x1d000
   1136c:	ldr	pc, [ip, #3236]!	; 0xca4

00011370 <raise@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #118784	; 0x1d000
   11378:	ldr	pc, [ip, #3228]!	; 0xc9c

0001137c <fsync@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #118784	; 0x1d000
   11384:	ldr	pc, [ip, #3220]!	; 0xc94

00011388 <strcmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #118784	; 0x1d000
   11390:	ldr	pc, [ip, #3212]!	; 0xc8c

00011394 <posix_fadvise64@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #118784	; 0x1d000
   1139c:	ldr	pc, [ip, #3204]!	; 0xc84

000113a0 <read@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #118784	; 0x1d000
   113a8:	ldr	pc, [ip, #3196]!	; 0xc7c

000113ac <fflush@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #118784	; 0x1d000
   113b4:	ldr	pc, [ip, #3188]!	; 0xc74

000113b8 <sigprocmask@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #118784	; 0x1d000
   113c0:	ldr	pc, [ip, #3180]!	; 0xc6c

000113c4 <memmove@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #118784	; 0x1d000
   113cc:	ldr	pc, [ip, #3172]!	; 0xc64

000113d0 <free@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #118784	; 0x1d000
   113d8:	ldr	pc, [ip, #3164]!	; 0xc5c

000113dc <clock_gettime@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #118784	; 0x1d000
   113e4:	ldr	pc, [ip, #3156]!	; 0xc54

000113e8 <_exit@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #118784	; 0x1d000
   113f0:	ldr	pc, [ip, #3148]!	; 0xc4c

000113f4 <memcpy@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #118784	; 0x1d000
   113fc:	ldr	pc, [ip, #3140]!	; 0xc44

00011400 <__strtoull_internal@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #118784	; 0x1d000
   11408:	ldr	pc, [ip, #3132]!	; 0xc3c

0001140c <mbsinit@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #118784	; 0x1d000
   11414:	ldr	pc, [ip, #3124]!	; 0xc34

00011418 <ftruncate64@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #118784	; 0x1d000
   11420:	ldr	pc, [ip, #3116]!	; 0xc2c

00011424 <memcmp@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #118784	; 0x1d000
   1142c:	ldr	pc, [ip, #3108]!	; 0xc24

00011430 <dcgettext@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #118784	; 0x1d000
   11438:	ldr	pc, [ip, #3100]!	; 0xc1c

0001143c <dup2@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #118784	; 0x1d000
   11444:	ldr	pc, [ip, #3092]!	; 0xc14

00011448 <realloc@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #118784	; 0x1d000
   11450:	ldr	pc, [ip, #3084]!	; 0xc0c

00011454 <sigismember@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #118784	; 0x1d000
   1145c:	ldr	pc, [ip, #3076]!	; 0xc04

00011460 <textdomain@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #118784	; 0x1d000
   11468:	ldr	pc, [ip, #3068]!	; 0xbfc

0001146c <iswprint@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #118784	; 0x1d000
   11474:	ldr	pc, [ip, #3060]!	; 0xbf4

00011478 <__fxstat64@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #118784	; 0x1d000
   11480:	ldr	pc, [ip, #3052]!	; 0xbec

00011484 <sigaction@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #118784	; 0x1d000
   1148c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011490 <fwrite@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #118784	; 0x1d000
   11498:	ldr	pc, [ip, #3036]!	; 0xbdc

0001149c <lseek64@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #118784	; 0x1d000
   114a4:	ldr	pc, [ip, #3028]!	; 0xbd4

000114a8 <__ctype_get_mb_cur_max@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #118784	; 0x1d000
   114b0:	ldr	pc, [ip, #3020]!	; 0xbcc

000114b4 <__fpending@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #118784	; 0x1d000
   114bc:	ldr	pc, [ip, #3012]!	; 0xbc4

000114c0 <mbrtowc@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #118784	; 0x1d000
   114c8:	ldr	pc, [ip, #3004]!	; 0xbbc

000114cc <error@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #118784	; 0x1d000
   114d4:	ldr	pc, [ip, #2996]!	; 0xbb4

000114d8 <open64@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #118784	; 0x1d000
   114e0:	ldr	pc, [ip, #2988]!	; 0xbac

000114e4 <getenv@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #118784	; 0x1d000
   114ec:	ldr	pc, [ip, #2980]!	; 0xba4

000114f0 <malloc@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #118784	; 0x1d000
   114f8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114fc <error_at_line@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #118784	; 0x1d000
   11504:	ldr	pc, [ip, #2964]!	; 0xb94

00011508 <sigaddset@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #118784	; 0x1d000
   11510:	ldr	pc, [ip, #2956]!	; 0xb8c

00011514 <__libc_start_main@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #118784	; 0x1d000
   1151c:	ldr	pc, [ip, #2948]!	; 0xb84

00011520 <__freading@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #118784	; 0x1d000
   11528:	ldr	pc, [ip, #2940]!	; 0xb7c

0001152c <__ctype_tolower_loc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #118784	; 0x1d000
   11534:	ldr	pc, [ip, #2932]!	; 0xb74

00011538 <__ctype_toupper_loc@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #118784	; 0x1d000
   11540:	ldr	pc, [ip, #2924]!	; 0xb6c

00011544 <__gmon_start__@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #118784	; 0x1d000
   1154c:	ldr	pc, [ip, #2916]!	; 0xb64

00011550 <getopt_long@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #118784	; 0x1d000
   11558:	ldr	pc, [ip, #2908]!	; 0xb5c

0001155c <__ctype_b_loc@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #118784	; 0x1d000
   11564:	ldr	pc, [ip, #2900]!	; 0xb54

00011568 <exit@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #118784	; 0x1d000
   11570:	ldr	pc, [ip, #2892]!	; 0xb4c

00011574 <strlen@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #118784	; 0x1d000
   1157c:	ldr	pc, [ip, #2884]!	; 0xb44

00011580 <strchr@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #118784	; 0x1d000
   11588:	ldr	pc, [ip, #2876]!	; 0xb3c

0001158c <getpagesize@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #118784	; 0x1d000
   11594:	ldr	pc, [ip, #2868]!	; 0xb34

00011598 <__errno_location@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #118784	; 0x1d000
   115a0:	ldr	pc, [ip, #2860]!	; 0xb2c

000115a4 <__sprintf_chk@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #118784	; 0x1d000
   115ac:	ldr	pc, [ip, #2852]!	; 0xb24

000115b0 <__cxa_atexit@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #118784	; 0x1d000
   115b8:	ldr	pc, [ip, #2844]!	; 0xb1c

000115bc <__vasprintf_chk@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #118784	; 0x1d000
   115c4:	ldr	pc, [ip, #2836]!	; 0xb14

000115c8 <memset@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #118784	; 0x1d000
   115d0:	ldr	pc, [ip, #2828]!	; 0xb0c

000115d4 <__printf_chk@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #118784	; 0x1d000
   115dc:	ldr	pc, [ip, #2820]!	; 0xb04

000115e0 <write@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #118784	; 0x1d000
   115e8:	ldr	pc, [ip, #2812]!	; 0xafc

000115ec <fileno@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #118784	; 0x1d000
   115f4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115f8 <__fprintf_chk@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #118784	; 0x1d000
   11600:	ldr	pc, [ip, #2796]!	; 0xaec

00011604 <fclose@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #118784	; 0x1d000
   1160c:	ldr	pc, [ip, #2788]!	; 0xae4

00011610 <fseeko64@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #118784	; 0x1d000
   11618:	ldr	pc, [ip, #2780]!	; 0xadc

0001161c <fcntl64@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #118784	; 0x1d000
   11624:	ldr	pc, [ip, #2772]!	; 0xad4

00011628 <__overflow@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #118784	; 0x1d000
   11630:	ldr	pc, [ip, #2764]!	; 0xacc

00011634 <setlocale@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #118784	; 0x1d000
   1163c:	ldr	pc, [ip, #2756]!	; 0xac4

00011640 <sigemptyset@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #118784	; 0x1d000
   11648:	ldr	pc, [ip, #2748]!	; 0xabc

0001164c <strrchr@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #118784	; 0x1d000
   11654:	ldr	pc, [ip, #2740]!	; 0xab4

00011658 <nl_langinfo@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #118784	; 0x1d000
   11660:	ldr	pc, [ip, #2732]!	; 0xaac

00011664 <localeconv@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #118784	; 0x1d000
   1166c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011670 <bindtextdomain@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #118784	; 0x1d000
   11678:	ldr	pc, [ip, #2716]!	; 0xa9c

0001167c <aligned_alloc@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #118784	; 0x1d000
   11684:	ldr	pc, [ip, #2708]!	; 0xa94

00011688 <strncmp@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #118784	; 0x1d000
   11690:	ldr	pc, [ip, #2700]!	; 0xa8c

00011694 <fdatasync@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #118784	; 0x1d000
   1169c:	ldr	pc, [ip, #2692]!	; 0xa84

000116a0 <abort@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #118784	; 0x1d000
   116a8:	ldr	pc, [ip, #2684]!	; 0xa7c

000116ac <close@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #118784	; 0x1d000
   116b4:	ldr	pc, [ip, #2676]!	; 0xa74

000116b8 <dcngettext@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #118784	; 0x1d000
   116c0:	ldr	pc, [ip, #2668]!	; 0xa6c

000116c4 <__snprintf_chk@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #118784	; 0x1d000
   116cc:	ldr	pc, [ip, #2660]!	; 0xa64

000116d0 <__assert_fail@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #118784	; 0x1d000
   116d8:	ldr	pc, [ip, #2652]!	; 0xa5c

Disassembly of section .text:

000116e0 <.text>:
   116e0:	mov	fp, #0
   116e4:	mov	lr, #0
   116e8:	pop	{r1}		; (ldr r1, [sp], #4)
   116ec:	mov	r2, sp
   116f0:	push	{r2}		; (str r2, [sp, #-4]!)
   116f4:	push	{r0}		; (str r0, [sp, #-4]!)
   116f8:	ldr	ip, [pc, #16]	; 11710 <__assert_fail@plt+0x40>
   116fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11700:	ldr	r0, [pc, #12]	; 11714 <__assert_fail@plt+0x44>
   11704:	ldr	r3, [pc, #12]	; 11718 <__assert_fail@plt+0x48>
   11708:	bl	11514 <__libc_start_main@plt>
   1170c:	bl	116a0 <abort@plt>
   11710:	andeq	ip, r1, r0, ror r4
   11714:	andeq	r1, r1, r0, asr #24
   11718:	andeq	ip, r1, r0, lsl r4
   1171c:	ldr	r3, [pc, #20]	; 11738 <__assert_fail@plt+0x68>
   11720:	ldr	r2, [pc, #20]	; 1173c <__assert_fail@plt+0x6c>
   11724:	add	r3, pc, r3
   11728:	ldr	r2, [r3, r2]
   1172c:	cmp	r2, #0
   11730:	bxeq	lr
   11734:	b	11544 <__gmon_start__@plt>
   11738:	ldrdeq	sp, [r1], -r4
   1173c:	andeq	r0, r0, r8, lsr r1
   11740:	ldr	r0, [pc, #24]	; 11760 <__assert_fail@plt+0x90>
   11744:	ldr	r3, [pc, #24]	; 11764 <__assert_fail@plt+0x94>
   11748:	cmp	r3, r0
   1174c:	bxeq	lr
   11750:	ldr	r3, [pc, #16]	; 11768 <__assert_fail@plt+0x98>
   11754:	cmp	r3, #0
   11758:	bxeq	lr
   1175c:	bx	r3
   11760:			; <UNDEFINED> instruction: 0x0002f1b4
   11764:			; <UNDEFINED> instruction: 0x0002f1b4
   11768:	andeq	r0, r0, r0
   1176c:	ldr	r0, [pc, #36]	; 11798 <__assert_fail@plt+0xc8>
   11770:	ldr	r1, [pc, #36]	; 1179c <__assert_fail@plt+0xcc>
   11774:	sub	r1, r1, r0
   11778:	asr	r1, r1, #2
   1177c:	add	r1, r1, r1, lsr #31
   11780:	asrs	r1, r1, #1
   11784:	bxeq	lr
   11788:	ldr	r3, [pc, #16]	; 117a0 <__assert_fail@plt+0xd0>
   1178c:	cmp	r3, #0
   11790:	bxeq	lr
   11794:	bx	r3
   11798:			; <UNDEFINED> instruction: 0x0002f1b4
   1179c:			; <UNDEFINED> instruction: 0x0002f1b4
   117a0:	andeq	r0, r0, r0
   117a4:	push	{r4, lr}
   117a8:	ldr	r4, [pc, #24]	; 117c8 <__assert_fail@plt+0xf8>
   117ac:	ldrb	r3, [r4]
   117b0:	cmp	r3, #0
   117b4:	popne	{r4, pc}
   117b8:	bl	11740 <__assert_fail@plt+0x70>
   117bc:	mov	r3, #1
   117c0:	strb	r3, [r4]
   117c4:	pop	{r4, pc}
   117c8:	ldrdeq	pc, [r2], -ip
   117cc:	b	1176c <__assert_fail@plt+0x9c>
   117d0:	push	{fp, lr}
   117d4:	mov	fp, sp
   117d8:	sub	sp, sp, #56	; 0x38
   117dc:	mov	r4, r0
   117e0:	cmp	r0, #0
   117e4:	bne	11bf4 <__assert_fail@plt+0x524>
   117e8:	movw	r1, #50371	; 0xc4c3
   117ec:	mov	r0, #0
   117f0:	mov	r2, #5
   117f4:	movt	r1, #1
   117f8:	bl	11430 <dcgettext@plt>
   117fc:	mov	r1, r0
   11800:	movw	r0, #62532	; 0xf444
   11804:	movt	r0, #2
   11808:	ldr	r2, [r0]
   1180c:	mov	r0, #1
   11810:	mov	r3, r2
   11814:	bl	115d4 <__printf_chk@plt>
   11818:	movw	r1, #50412	; 0xc4ec
   1181c:	mov	r0, #0
   11820:	mov	r2, #5
   11824:	movt	r1, #1
   11828:	bl	11430 <dcgettext@plt>
   1182c:	movw	r7, #61908	; 0xf1d4
   11830:	movt	r7, #2
   11834:	ldr	r1, [r7]
   11838:	bl	11364 <fputs_unlocked@plt>
   1183c:	movw	r1, #50828	; 0xc68c
   11840:	mov	r0, #0
   11844:	mov	r2, #5
   11848:	movt	r1, #1
   1184c:	bl	11430 <dcgettext@plt>
   11850:	ldr	r1, [r7]
   11854:	bl	11364 <fputs_unlocked@plt>
   11858:	movw	r1, #51499	; 0xc92b
   1185c:	mov	r0, #0
   11860:	mov	r2, #5
   11864:	movt	r1, #1
   11868:	bl	11430 <dcgettext@plt>
   1186c:	ldr	r1, [r7]
   11870:	bl	11364 <fputs_unlocked@plt>
   11874:	movw	r1, #51790	; 0xca4e
   11878:	mov	r0, #0
   1187c:	mov	r2, #5
   11880:	movt	r1, #1
   11884:	bl	11430 <dcgettext@plt>
   11888:	ldr	r1, [r7]
   1188c:	bl	11364 <fputs_unlocked@plt>
   11890:	movw	r1, #52366	; 0xcc8e
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	movt	r1, #1
   118a0:	bl	11430 <dcgettext@plt>
   118a4:	ldr	r1, [r7]
   118a8:	bl	11364 <fputs_unlocked@plt>
   118ac:	movw	r1, #52653	; 0xcdad
   118b0:	mov	r0, #0
   118b4:	mov	r2, #5
   118b8:	movt	r1, #1
   118bc:	bl	11430 <dcgettext@plt>
   118c0:	ldr	r1, [r7]
   118c4:	bl	11364 <fputs_unlocked@plt>
   118c8:	movw	r1, #52759	; 0xce17
   118cc:	mov	r0, #0
   118d0:	mov	r2, #5
   118d4:	movt	r1, #1
   118d8:	bl	11430 <dcgettext@plt>
   118dc:	ldr	r1, [r7]
   118e0:	bl	11364 <fputs_unlocked@plt>
   118e4:	movw	r1, #52796	; 0xce3c
   118e8:	mov	r0, #0
   118ec:	mov	r2, #5
   118f0:	movt	r1, #1
   118f4:	bl	11430 <dcgettext@plt>
   118f8:	ldr	r1, [r7]
   118fc:	bl	11364 <fputs_unlocked@plt>
   11900:	movw	r1, #52834	; 0xce62
   11904:	mov	r0, #0
   11908:	mov	r2, #5
   1190c:	movt	r1, #1
   11910:	bl	11430 <dcgettext@plt>
   11914:	ldr	r1, [r7]
   11918:	bl	11364 <fputs_unlocked@plt>
   1191c:	movw	r1, #52877	; 0xce8d
   11920:	mov	r0, #0
   11924:	mov	r2, #5
   11928:	movt	r1, #1
   1192c:	bl	11430 <dcgettext@plt>
   11930:	ldr	r1, [r7]
   11934:	bl	11364 <fputs_unlocked@plt>
   11938:	movw	r1, #52922	; 0xceba
   1193c:	mov	r0, #0
   11940:	mov	r2, #5
   11944:	movt	r1, #1
   11948:	bl	11430 <dcgettext@plt>
   1194c:	ldr	r1, [r7]
   11950:	bl	11364 <fputs_unlocked@plt>
   11954:	movw	r1, #52981	; 0xcef5
   11958:	mov	r0, #0
   1195c:	mov	r2, #5
   11960:	movt	r1, #1
   11964:	bl	11430 <dcgettext@plt>
   11968:	ldr	r1, [r7]
   1196c:	bl	11364 <fputs_unlocked@plt>
   11970:	movw	r1, #53015	; 0xcf17
   11974:	mov	r0, #0
   11978:	mov	r2, #5
   1197c:	movt	r1, #1
   11980:	bl	11430 <dcgettext@plt>
   11984:	ldr	r1, [r7]
   11988:	bl	11364 <fputs_unlocked@plt>
   1198c:	movw	r1, #53054	; 0xcf3e
   11990:	mov	r0, #0
   11994:	mov	r2, #5
   11998:	movt	r1, #1
   1199c:	bl	11430 <dcgettext@plt>
   119a0:	ldr	r1, [r7]
   119a4:	bl	11364 <fputs_unlocked@plt>
   119a8:	movw	r1, #53111	; 0xcf77
   119ac:	mov	r0, #0
   119b0:	mov	r2, #5
   119b4:	movt	r1, #1
   119b8:	bl	11430 <dcgettext@plt>
   119bc:	ldr	r1, [r7]
   119c0:	bl	11364 <fputs_unlocked@plt>
   119c4:	movw	r1, #53169	; 0xcfb1
   119c8:	mov	r0, #0
   119cc:	mov	r2, #5
   119d0:	movt	r1, #1
   119d4:	bl	11430 <dcgettext@plt>
   119d8:	ldr	r1, [r7]
   119dc:	bl	11364 <fputs_unlocked@plt>
   119e0:	movw	r1, #53205	; 0xcfd5
   119e4:	mov	r0, #0
   119e8:	mov	r2, #5
   119ec:	movt	r1, #1
   119f0:	bl	11430 <dcgettext@plt>
   119f4:	ldr	r1, [r7]
   119f8:	bl	11364 <fputs_unlocked@plt>
   119fc:	movw	r1, #53266	; 0xd012
   11a00:	mov	r0, #0
   11a04:	mov	r2, #5
   11a08:	movt	r1, #1
   11a0c:	bl	11430 <dcgettext@plt>
   11a10:	ldr	r1, [r7]
   11a14:	bl	11364 <fputs_unlocked@plt>
   11a18:	movw	r1, #53325	; 0xd04d
   11a1c:	mov	r0, #0
   11a20:	mov	r2, #5
   11a24:	movt	r1, #1
   11a28:	bl	11430 <dcgettext@plt>
   11a2c:	ldr	r1, [r7]
   11a30:	bl	11364 <fputs_unlocked@plt>
   11a34:	movw	r1, #53384	; 0xd088
   11a38:	mov	r0, #0
   11a3c:	mov	r2, #5
   11a40:	movt	r1, #1
   11a44:	bl	11430 <dcgettext@plt>
   11a48:	movw	r2, #53520	; 0xd110
   11a4c:	mov	r1, r0
   11a50:	mov	r0, #1
   11a54:	movt	r2, #1
   11a58:	bl	115d4 <__printf_chk@plt>
   11a5c:	movw	r1, #53525	; 0xd115
   11a60:	mov	r0, #0
   11a64:	mov	r2, #5
   11a68:	movt	r1, #1
   11a6c:	bl	11430 <dcgettext@plt>
   11a70:	ldr	r1, [r7]
   11a74:	bl	11364 <fputs_unlocked@plt>
   11a78:	movw	r1, #53570	; 0xd142
   11a7c:	mov	r0, #0
   11a80:	mov	r2, #5
   11a84:	movt	r1, #1
   11a88:	bl	11430 <dcgettext@plt>
   11a8c:	ldr	r1, [r7]
   11a90:	bl	11364 <fputs_unlocked@plt>
   11a94:	movw	r0, #55576	; 0xd918
   11a98:	mov	r2, #48	; 0x30
   11a9c:	mov	r6, sp
   11aa0:	movw	r5, #53624	; 0xd178
   11aa4:	movt	r0, #1
   11aa8:	movt	r5, #1
   11aac:	add	r1, r0, #32
   11ab0:	add	r3, r0, #16
   11ab4:	vld1.64	{d18-d19}, [r0], r2
   11ab8:	vld1.64	{d16-d17}, [r1]
   11abc:	vld1.64	{d20-d21}, [r3]
   11ac0:	add	r1, r6, #32
   11ac4:	vldr	d22, [r0]
   11ac8:	add	r0, r6, #16
   11acc:	vst1.64	{d16-d17}, [r1]
   11ad0:	movw	r1, #53915	; 0xd29b
   11ad4:	vst1.64	{d20-d21}, [r0]
   11ad8:	mov	r0, r6
   11adc:	vst1.64	{d18-d19}, [r0], r2
   11ae0:	movt	r1, #1
   11ae4:	vstr	d22, [r0]
   11ae8:	mov	r0, r5
   11aec:	bl	11388 <strcmp@plt>
   11af0:	cmp	r0, #0
   11af4:	ldrne	r1, [r6, #8]!
   11af8:	cmpne	r1, #0
   11afc:	bne	11ae8 <__assert_fail@plt+0x418>
   11b00:	ldr	r6, [r6, #4]
   11b04:	movw	r1, #54010	; 0xd2fa
   11b08:	mov	r0, #0
   11b0c:	mov	r2, #5
   11b10:	movt	r1, #1
   11b14:	bl	11430 <dcgettext@plt>
   11b18:	movw	r2, #54033	; 0xd311
   11b1c:	movw	r3, #54047	; 0xd31f
   11b20:	mov	r1, r0
   11b24:	mov	r0, #1
   11b28:	movt	r2, #1
   11b2c:	movt	r3, #1
   11b30:	bl	115d4 <__printf_chk@plt>
   11b34:	cmp	r6, #0
   11b38:	mov	r0, #5
   11b3c:	mov	r1, #0
   11b40:	moveq	r6, r5
   11b44:	bl	11634 <setlocale@plt>
   11b48:	cmp	r0, #0
   11b4c:	beq	11b84 <__assert_fail@plt+0x4b4>
   11b50:	movw	r1, #54087	; 0xd347
   11b54:	mov	r2, #3
   11b58:	movt	r1, #1
   11b5c:	bl	11688 <strncmp@plt>
   11b60:	cmp	r0, #0
   11b64:	beq	11b84 <__assert_fail@plt+0x4b4>
   11b68:	movw	r1, #54091	; 0xd34b
   11b6c:	mov	r0, #0
   11b70:	mov	r2, #5
   11b74:	movt	r1, #1
   11b78:	bl	11430 <dcgettext@plt>
   11b7c:	ldr	r1, [r7]
   11b80:	bl	11364 <fputs_unlocked@plt>
   11b84:	movw	r1, #54162	; 0xd392
   11b88:	mov	r0, #0
   11b8c:	mov	r2, #5
   11b90:	movt	r1, #1
   11b94:	bl	11430 <dcgettext@plt>
   11b98:	movw	r2, #54047	; 0xd31f
   11b9c:	mov	r1, r0
   11ba0:	mov	r0, #1
   11ba4:	mov	r3, r5
   11ba8:	movt	r2, #1
   11bac:	bl	115d4 <__printf_chk@plt>
   11bb0:	movw	r1, #54189	; 0xd3ad
   11bb4:	mov	r0, #0
   11bb8:	mov	r2, #5
   11bbc:	movt	r1, #1
   11bc0:	bl	11430 <dcgettext@plt>
   11bc4:	movw	r3, #51789	; 0xca4d
   11bc8:	mov	r1, r0
   11bcc:	movw	r0, #53943	; 0xd2b7
   11bd0:	cmp	r6, r5
   11bd4:	mov	r2, r6
   11bd8:	movt	r0, #1
   11bdc:	movt	r3, #1
   11be0:	moveq	r3, r0
   11be4:	mov	r0, #1
   11be8:	bl	115d4 <__printf_chk@plt>
   11bec:	mov	r0, r4
   11bf0:	bl	11568 <exit@plt>
   11bf4:	movw	r0, #61904	; 0xf1d0
   11bf8:	movw	r1, #50332	; 0xc49c
   11bfc:	mov	r2, #5
   11c00:	movt	r0, #2
   11c04:	movt	r1, #1
   11c08:	ldr	r5, [r0]
   11c0c:	mov	r0, #0
   11c10:	bl	11430 <dcgettext@plt>
   11c14:	mov	r2, r0
   11c18:	movw	r0, #62532	; 0xf444
   11c1c:	mov	r1, #1
   11c20:	movt	r0, #2
   11c24:	ldr	r3, [r0]
   11c28:	mov	r0, r5
   11c2c:	bl	115f8 <__fprintf_chk@plt>
   11c30:	mov	r0, r4
   11c34:	bl	11568 <exit@plt>
   11c38:	nop	{0}
   11c3c:	nop	{0}
   11c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c44:	add	fp, sp, #28
   11c48:	sub	sp, sp, #732	; 0x2dc
   11c4c:	str	r0, [sp, #64]	; 0x40
   11c50:	movw	r0, #54240	; 0xd3e0
   11c54:	mov	r6, r1
   11c58:	movt	r0, #1
   11c5c:	bl	114e4 <getenv@plt>
   11c60:	mov	r5, r0
   11c64:	movw	r0, #62176	; 0xf2e0
   11c68:	movt	r0, #2
   11c6c:	bl	11640 <sigemptyset@plt>
   11c70:	cmp	r5, #0
   11c74:	bne	11c88 <__assert_fail@plt+0x5b8>
   11c78:	movw	r0, #62176	; 0xf2e0
   11c7c:	mov	r1, #10
   11c80:	movt	r0, #2
   11c84:	bl	11508 <sigaddset@plt>
   11c88:	add	r4, sp, #72	; 0x48
   11c8c:	mov	r0, #2
   11c90:	mov	r1, #0
   11c94:	mov	r2, r4
   11c98:	bl	11484 <sigaction@plt>
   11c9c:	ldr	r0, [sp, #72]	; 0x48
   11ca0:	cmp	r0, #1
   11ca4:	beq	11cb8 <__assert_fail@plt+0x5e8>
   11ca8:	movw	r0, #62176	; 0xf2e0
   11cac:	mov	r1, #2
   11cb0:	movt	r0, #2
   11cb4:	bl	11508 <sigaddset@plt>
   11cb8:	movw	r5, #62176	; 0xf2e0
   11cbc:	add	r0, r4, #4
   11cc0:	mov	r2, #128	; 0x80
   11cc4:	movt	r5, #2
   11cc8:	mov	r1, r5
   11ccc:	bl	113f4 <memcpy@plt>
   11cd0:	mov	r0, r5
   11cd4:	mov	r1, #10
   11cd8:	bl	11454 <sigismember@plt>
   11cdc:	cmp	r0, #0
   11ce0:	beq	11d08 <__assert_fail@plt+0x638>
   11ce4:	mov	r0, #0
   11ce8:	add	r1, sp, #72	; 0x48
   11cec:	mov	r2, #0
   11cf0:	str	r0, [sp, #204]	; 0xcc
   11cf4:	movw	r0, #20132	; 0x4ea4
   11cf8:	movt	r0, #1
   11cfc:	str	r0, [sp, #72]	; 0x48
   11d00:	mov	r0, #10
   11d04:	bl	11484 <sigaction@plt>
   11d08:	movw	r0, #62176	; 0xf2e0
   11d0c:	mov	r1, #2
   11d10:	movt	r0, #2
   11d14:	bl	11454 <sigismember@plt>
   11d18:	cmp	r0, #0
   11d1c:	beq	11d44 <__assert_fail@plt+0x674>
   11d20:	mov	r0, #-1073741824	; 0xc0000000
   11d24:	add	r1, sp, #72	; 0x48
   11d28:	mov	r2, #0
   11d2c:	str	r0, [sp, #204]	; 0xcc
   11d30:	movw	r0, #20156	; 0x4ebc
   11d34:	movt	r0, #1
   11d38:	str	r0, [sp, #72]	; 0x48
   11d3c:	mov	r0, #2
   11d40:	bl	11484 <sigaction@plt>
   11d44:	ldr	r0, [r6]
   11d48:	bl	17a60 <__assert_fail@plt+0x6390>
   11d4c:	movw	r1, #51789	; 0xca4d
   11d50:	mov	r0, #6
   11d54:	movt	r1, #1
   11d58:	bl	11634 <setlocale@plt>
   11d5c:	movw	r5, #54037	; 0xd315
   11d60:	movw	r1, #53627	; 0xd17b
   11d64:	movt	r5, #1
   11d68:	movt	r1, #1
   11d6c:	mov	r0, r5
   11d70:	bl	11670 <bindtextdomain@plt>
   11d74:	mov	r0, r5
   11d78:	bl	11460 <textdomain@plt>
   11d7c:	movw	r0, #18428	; 0x47fc
   11d80:	movt	r0, #1
   11d84:	bl	1c474 <__assert_fail@plt+0xada4>
   11d88:	bl	1158c <getpagesize@plt>
   11d8c:	movw	r8, #62304	; 0xf360
   11d90:	movw	r7, #6096	; 0x17d0
   11d94:	mov	r4, #1
   11d98:	movw	r2, #53662	; 0xd19e
   11d9c:	movw	r1, #53678	; 0xd1ae
   11da0:	movw	r3, #53651	; 0xd193
   11da4:	mov	r9, #0
   11da8:	movt	r8, #2
   11dac:	movt	r7, #1
   11db0:	movt	r2, #1
   11db4:	movt	r1, #1
   11db8:	movt	r3, #1
   11dbc:	str	r0, [r8, #12]
   11dc0:	movw	r0, #61800	; 0xf168
   11dc4:	movt	r0, #2
   11dc8:	ldr	r0, [r0]
   11dcc:	stm	sp, {r0, r4, r7}
   11dd0:	str	r2, [sp, #16]
   11dd4:	movw	r2, #53624	; 0xd178
   11dd8:	str	r3, [sp, #12]
   11ddc:	str	r1, [sp, #20]
   11de0:	mov	r1, r6
   11de4:	mov	r3, r5
   11de8:	str	r9, [sp, #24]
   11dec:	str	r6, [sp, #60]	; 0x3c
   11df0:	ldr	r7, [sp, #64]	; 0x40
   11df4:	movt	r2, #1
   11df8:	mov	r0, r7
   11dfc:	bl	17998 <__assert_fail@plt+0x62c8>
   11e00:	add	r0, pc, #840	; 0x348
   11e04:	add	r1, pc, #852	; 0x354
   11e08:	add	r2, pc, #864	; 0x360
   11e0c:	movw	r6, #61920	; 0xf1e0
   11e10:	vld1.64	{d18-d19}, [r2 :128]
   11e14:	add	r2, pc, #868	; 0x364
   11e18:	vld1.64	{d16-d17}, [r0 :128]
   11e1c:	movt	r6, #2
   11e20:	vld1.64	{d2-d3}, [r1 :128]
   11e24:	vld1.64	{d20-d21}, [r2 :128]
   11e28:	add	r2, pc, #864	; 0x360
   11e2c:	add	r0, r6, #16
   11e30:	vld1.64	{d22-d23}, [r2 :128]
   11e34:	add	r2, pc, #868	; 0x364
   11e38:	vld1.64	{d24-d25}, [r2 :128]
   11e3c:	add	r2, pc, #924	; 0x39c
   11e40:	vld1.64	{d26-d27}, [r2 :128]
   11e44:	add	r2, pc, #932	; 0x3a4
   11e48:	vld1.64	{d28-d29}, [r2 :128]
   11e4c:	add	r2, pc, #940	; 0x3ac
   11e50:	vld1.64	{d30-d31}, [r2 :128]
   11e54:	add	r2, pc, #948	; 0x3b4
   11e58:	vst1.64	{d16-d17}, [r0 :128]
   11e5c:	add	r0, r6, #32
   11e60:	add	r1, pc, #952	; 0x3b8
   11e64:	vst1.64	{d18-d19}, [r0 :128]
   11e68:	add	r0, r6, #48	; 0x30
   11e6c:	vld1.64	{d16-d17}, [r1 :128]
   11e70:	add	r1, pc, #952	; 0x3b8
   11e74:	vld1.64	{d0-d1}, [r2 :128]
   11e78:	vst1.64	{d20-d21}, [r0 :128]
   11e7c:	add	r0, r6, #64	; 0x40
   11e80:	vld1.64	{d18-d19}, [r1 :128]
   11e84:	add	r1, pc, #948	; 0x3b4
   11e88:	vst1.64	{d22-d23}, [r0 :128]
   11e8c:	add	r0, r6, #80	; 0x50
   11e90:	vld1.64	{d20-d21}, [r1 :128]
   11e94:	add	r1, pc, #948	; 0x3b4
   11e98:	vst1.64	{d24-d25}, [r0 :128]
   11e9c:	add	r0, r6, #96	; 0x60
   11ea0:	vld1.64	{d22-d23}, [r1 :128]
   11ea4:	add	r1, pc, #948	; 0x3b4
   11ea8:	vst1.64	{d26-d27}, [r0 :128]
   11eac:	add	r0, pc, #956	; 0x3bc
   11eb0:	vld1.64	{d24-d25}, [r1 :128]
   11eb4:	mov	r1, r6
   11eb8:	strb	r4, [r8]
   11ebc:	str	r9, [sp, #72]	; 0x48
   11ec0:	vld1.64	{d26-d27}, [r0 :128]
   11ec4:	add	r0, r6, #112	; 0x70
   11ec8:	vst1.64	{d28-d29}, [r0 :128]
   11ecc:	add	r0, r6, #128	; 0x80
   11ed0:	vst1.64	{d30-d31}, [r0 :128]
   11ed4:	add	r0, r6, #144	; 0x90
   11ed8:	vst1.64	{d0-d1}, [r0 :128]
   11edc:	add	r0, r6, #160	; 0xa0
   11ee0:	vst1.64	{d2-d3}, [r0 :128]
   11ee4:	add	r0, r6, #176	; 0xb0
   11ee8:	vst1.64	{d16-d17}, [r0 :128]
   11eec:	add	r0, r6, #192	; 0xc0
   11ef0:	vst1.64	{d18-d19}, [r0 :128]
   11ef4:	add	r0, r6, #208	; 0xd0
   11ef8:	vst1.64	{d20-d21}, [r0 :128]
   11efc:	add	r0, r6, #224	; 0xe0
   11f00:	vst1.64	{d22-d23}, [r0 :128]
   11f04:	mov	r0, #240	; 0xf0
   11f08:	vst1.8	{d24-d25}, [r1 :128], r0
   11f0c:	mov	r0, #0
   11f10:	str	r0, [sp, #56]	; 0x38
   11f14:	movw	r0, #61896	; 0xf1c8
   11f18:	vst1.64	{d26-d27}, [r1 :128]
   11f1c:	movt	r0, #2
   11f20:	ldr	r5, [r0]
   11f24:	cmp	r5, r7
   11f28:	bge	12698 <__assert_fail@plt+0xfc8>
   11f2c:	mov	r0, #0
   11f30:	movw	r7, #54280	; 0xd408
   11f34:	movw	r9, #54283	; 0xd40b
   11f38:	movw	r3, #54286	; 0xd40e
   11f3c:	str	r0, [sp, #56]	; 0x38
   11f40:	mvn	r0, #-2147483648	; 0x80000000
   11f44:	movt	r7, #1
   11f48:	movt	r9, #1
   11f4c:	movt	r3, #1
   11f50:	str	r0, [sp, #40]	; 0x28
   11f54:	mvn	r0, #0
   11f58:	str	r0, [sp, #44]	; 0x2c
   11f5c:	mov	r0, #0
   11f60:	str	r0, [sp, #32]
   11f64:	mov	r0, #0
   11f68:	str	r0, [sp, #28]
   11f6c:	mov	r0, #0
   11f70:	str	r0, [sp, #52]	; 0x34
   11f74:	ldr	r0, [sp, #60]	; 0x3c
   11f78:	mov	r1, #61	; 0x3d
   11f7c:	mov	r8, r3
   11f80:	ldr	sl, [r0, r5, lsl #2]
   11f84:	mov	r0, sl
   11f88:	bl	11580 <strchr@plt>
   11f8c:	cmp	r0, #0
   11f90:	beq	14590 <__assert_fail@plt+0x2ec0>
   11f94:	movw	r6, #54310	; 0xd426
   11f98:	add	r4, r0, #1
   11f9c:	mov	r0, #0
   11fa0:	mov	r3, r8
   11fa4:	movt	r6, #1
   11fa8:	ldrb	r1, [r7, r0]
   11fac:	cmp	r1, #0
   11fb0:	beq	11fc8 <__assert_fail@plt+0x8f8>
   11fb4:	ldrb	r2, [sl, r0]
   11fb8:	add	r0, r0, #1
   11fbc:	cmp	r2, r1
   11fc0:	beq	11fa8 <__assert_fail@plt+0x8d8>
   11fc4:	b	11ff8 <__assert_fail@plt+0x928>
   11fc8:	ldrb	r0, [sl, r0]
   11fcc:	cmp	r0, #0
   11fd0:	cmpne	r0, #61	; 0x3d
   11fd4:	bne	11ff8 <__assert_fail@plt+0x928>
   11fd8:	movw	r0, #62304	; 0xf360
   11fdc:	movt	r0, #2
   11fe0:	str	r4, [r0, #16]
   11fe4:	ldr	r0, [sp, #64]	; 0x40
   11fe8:	add	r5, r5, #1
   11fec:	cmp	r5, r0
   11ff0:	blt	11f74 <__assert_fail@plt+0x8a4>
   11ff4:	b	126b8 <__assert_fail@plt+0xfe8>
   11ff8:	mov	r0, #0
   11ffc:	ldrb	r1, [r9, r0]
   12000:	cmp	r1, #0
   12004:	beq	1201c <__assert_fail@plt+0x94c>
   12008:	ldrb	r2, [sl, r0]
   1200c:	add	r0, r0, #1
   12010:	cmp	r2, r1
   12014:	beq	11ffc <__assert_fail@plt+0x92c>
   12018:	b	1204c <__assert_fail@plt+0x97c>
   1201c:	ldrb	r0, [sl, r0]
   12020:	cmp	r0, #0
   12024:	cmpne	r0, #61	; 0x3d
   12028:	bne	1204c <__assert_fail@plt+0x97c>
   1202c:	movw	r0, #62304	; 0xf360
   12030:	movt	r0, #2
   12034:	str	r4, [r0, #28]
   12038:	ldr	r0, [sp, #64]	; 0x40
   1203c:	add	r5, r5, #1
   12040:	cmp	r5, r0
   12044:	blt	11f74 <__assert_fail@plt+0x8a4>
   12048:	b	126b8 <__assert_fail@plt+0xfe8>
   1204c:	mov	r0, #0
   12050:	ldrb	r1, [r3, r0]
   12054:	cmp	r1, #0
   12058:	beq	12070 <__assert_fail@plt+0x9a0>
   1205c:	ldrb	r2, [sl, r0]
   12060:	add	r0, r0, #1
   12064:	cmp	r2, r1
   12068:	beq	12050 <__assert_fail@plt+0x980>
   1206c:	b	120cc <__assert_fail@plt+0x9fc>
   12070:	ldrb	r0, [sl, r0]
   12074:	cmp	r0, #0
   12078:	cmpne	r0, #61	; 0x3d
   1207c:	bne	120cc <__assert_fail@plt+0x9fc>
   12080:	movw	r1, #55632	; 0xd950
   12084:	movw	r3, #54291	; 0xd413
   12088:	mov	r0, r4
   1208c:	mov	r2, #0
   12090:	movt	r1, #1
   12094:	movt	r3, #1
   12098:	bl	14ecc <__assert_fail@plt+0x37fc>
   1209c:	movw	r1, #62304	; 0xf360
   120a0:	mov	r3, r8
   120a4:	movt	r1, #2
   120a8:	mov	r2, r1
   120ac:	ldr	r1, [r1, #36]	; 0x24
   120b0:	orr	r0, r1, r0
   120b4:	str	r0, [r2, #36]	; 0x24
   120b8:	ldr	r0, [sp, #64]	; 0x40
   120bc:	add	r5, r5, #1
   120c0:	cmp	r5, r0
   120c4:	blt	11f74 <__assert_fail@plt+0x8a4>
   120c8:	b	126b8 <__assert_fail@plt+0xfe8>
   120cc:	mov	r0, #0
   120d0:	ldrb	r1, [r6, r0]
   120d4:	cmp	r1, #0
   120d8:	beq	120f0 <__assert_fail@plt+0xa20>
   120dc:	ldrb	r2, [sl, r0]
   120e0:	add	r0, r0, #1
   120e4:	cmp	r2, r1
   120e8:	beq	120d0 <__assert_fail@plt+0xa00>
   120ec:	b	121b0 <__assert_fail@plt+0xae0>
   120f0:	ldrb	r0, [sl, r0]
   120f4:	cmp	r0, #0
   120f8:	cmpne	r0, #61	; 0x3d
   120fc:	bne	121b0 <__assert_fail@plt+0xae0>
   12100:	movw	r1, #55904	; 0xda60
   12104:	movw	r3, #54316	; 0xd42c
   12108:	mov	r0, r4
   1210c:	mov	r2, #0
   12110:	movt	r1, #1
   12114:	movt	r3, #1
   12118:	bl	14ecc <__assert_fail@plt+0x37fc>
   1211c:	movw	r1, #62304	; 0xf360
   12120:	mov	r3, r8
   12124:	movt	r1, #2
   12128:	mov	r2, r1
   1212c:	ldr	r1, [r1, #20]
   12130:	orr	r0, r1, r0
   12134:	str	r0, [r2, #20]
   12138:	ldr	r0, [sp, #64]	; 0x40
   1213c:	add	r5, r5, #1
   12140:	cmp	r5, r0
   12144:	blt	11f74 <__assert_fail@plt+0x8a4>
   12148:	b	126b8 <__assert_fail@plt+0xfe8>
   1214c:	nop	{0}
   12150:	tstne	r2, #16, 2
   12154:			; <UNDEFINED> instruction: 0x17161514
   12158:	blne	6985c0 <opterr@@GLIBC_2.4+0x6693e8>
   1215c:	svcne	0x001e1d1c
   12160:			; <UNDEFINED> instruction: 0xa3a2a1a0
   12164:	strge	sl, [r6, r4, lsr #11]!
   12168:	blge	feabc810 <opterr@@GLIBC_2.4+0xfea8d638>
   1216c:	svcge	0x00aeadac
   12170:			; <UNDEFINED> instruction: 0x23222120
   12174:	strcs	r2, [r6, -r4, lsr #10]!
   12178:	blcs	a9c620 <opterr@@GLIBC_2.4+0xa6d448>
   1217c:	svccs	0x002e2d2c
   12180:	teqcc	r2, #48, 2
   12184:			; <UNDEFINED> instruction: 0x37363534
   12188:	blcc	ea0670 <opterr@@GLIBC_2.4+0xe71498>
   1218c:	svccc	0x003e3d3c
   12190:	movtmi	r4, #8512	; 0x2140
   12194:	strbmi	r4, [r6, -r4, asr #10]
   12198:	blmi	12a46c0 <opterr@@GLIBC_2.4+0x12754e8>
   1219c:	svcmi	0x004e4d4c
   121a0:	cmppl	r2, #80, 2
   121a4:			; <UNDEFINED> instruction: 0x57565554
   121a8:	blpl	16a8710 <opterr@@GLIBC_2.4+0x1679538>
   121ac:	svcpl	0x005e5d5c
   121b0:	movw	r3, #54335	; 0xd43f
   121b4:	mov	r0, #0
   121b8:	movt	r3, #1
   121bc:	ldrb	r1, [r3, r0]
   121c0:	cmp	r1, #0
   121c4:	beq	12280 <__assert_fail@plt+0xbb0>
   121c8:	ldrb	r2, [sl, r0]
   121cc:	add	r0, r0, #1
   121d0:	cmp	r2, r1
   121d4:	beq	121bc <__assert_fail@plt+0xaec>
   121d8:	b	122dc <__assert_fail@plt+0xc0c>
   121dc:	nop	{0}
   121e0:	cmnvs	r2, #96, 2
   121e4:	strbvs	r6, [r6, -r4, ror #10]!
   121e8:	blvs	1aac790 <opterr@@GLIBC_2.4+0x1a7d5b8>
   121ec:	svcvs	0x006e6d6c
   121f0:	cmnvc	r2, #112, 2
   121f4:			; <UNDEFINED> instruction: 0x77767574
   121f8:	blvc	1eb07e0 <opterr@@GLIBC_2.4+0x1e81608>
   121fc:	svcvc	0x007e7d7c
   12200:	orrhi	r8, r2, #128, 2
   12204:	strhi	r8, [r6, r4, lsl #11]
   12208:	blhi	fe2b4830 <opterr@@GLIBC_2.4+0xfe285658>
   1220c:	svchi	0x008e8d8c
   12210:	orrsls	r9, r2, #144, 2	; 0x24
   12214:			; <UNDEFINED> instruction: 0x97969594
   12218:	blls	fe6b8880 <opterr@@GLIBC_2.4+0xfe6896a8>
   1221c:	svcls	0x009e9d9c
   12220:			; <UNDEFINED> instruction: 0xb3b2b1b0
   12224:			; <UNDEFINED> instruction: 0xb7b6b5b4
   12228:	bllt	feec0910 <opterr@@GLIBC_2.4+0xfee91738>
   1222c:	svclt	0x00bebdbc
   12230:	bicgt	ip, r2, #192, 2	; 0x30
   12234:	strbgt	ip, [r6, r4, asr #11]
   12238:	blgt	ff2c4960 <opterr@@GLIBC_2.4+0xff295788>
   1223c:	svcgt	0x00cecdcc
   12240:	bicsle	sp, r2, #208, 2	; 0x34
   12244:			; <UNDEFINED> instruction: 0xd7d6d5d4
   12248:	blle	ff6c89b0 <opterr@@GLIBC_2.4+0xff6997d8>
   1224c:	svcle	0x00dedddc
   12250:	mvn	lr, #224, 2	; 0x38
   12254:	strb	lr, [r6, r4, ror #11]!
   12258:	bl	ffacca00 <opterr@@GLIBC_2.4+0xffa9d828>
   1225c:	svc	0x00eeedec
   12260:	movweq	r0, #8448	; 0x2100
   12264:	streq	r0, [r6, -r4, lsl #10]
   12268:	bleq	294690 <opterr@@GLIBC_2.4+0x2654b8>
   1226c:	svceq	0x000e0d0c
   12270:	vsra.u64	<illegal reg q15.5>, q8, #14
   12274:			; <UNDEFINED> instruction: 0xf7f6f5f4
   12278:	blx	ffed0a62 <opterr@@GLIBC_2.4+0xffea188a>
   1227c:			; <UNDEFINED> instruction: 0xfffefdfc
   12280:	ldrb	r0, [sl, r0]
   12284:	cmp	r0, #0
   12288:	cmpne	r0, #61	; 0x3d
   1228c:	bne	122dc <__assert_fail@plt+0xc0c>
   12290:	movw	r1, #55904	; 0xda60
   12294:	movw	r3, #54341	; 0xd445
   12298:	mov	r0, r4
   1229c:	mov	r2, #0
   122a0:	movt	r1, #1
   122a4:	movt	r3, #1
   122a8:	bl	14ecc <__assert_fail@plt+0x37fc>
   122ac:	movw	r1, #62304	; 0xf360
   122b0:	mov	r3, r8
   122b4:	movt	r1, #2
   122b8:	mov	r2, r1
   122bc:	ldr	r1, [r1, #32]
   122c0:	orr	r0, r1, r0
   122c4:	str	r0, [r2, #32]
   122c8:	ldr	r0, [sp, #64]	; 0x40
   122cc:	add	r5, r5, #1
   122d0:	cmp	r5, r0
   122d4:	blt	11f74 <__assert_fail@plt+0x8a4>
   122d8:	b	126b8 <__assert_fail@plt+0xfe8>
   122dc:	movw	r3, #54361	; 0xd459
   122e0:	mov	r0, #0
   122e4:	movt	r3, #1
   122e8:	ldrb	r1, [r3, r0]
   122ec:	cmp	r1, #0
   122f0:	beq	12308 <__assert_fail@plt+0xc38>
   122f4:	ldrb	r2, [sl, r0]
   122f8:	add	r0, r0, #1
   122fc:	cmp	r2, r1
   12300:	beq	122e8 <__assert_fail@plt+0xc18>
   12304:	b	12358 <__assert_fail@plt+0xc88>
   12308:	ldrb	r0, [sl, r0]
   1230c:	cmp	r0, #61	; 0x3d
   12310:	cmpne	r0, #0
   12314:	bne	12358 <__assert_fail@plt+0xc88>
   12318:	movw	r1, #56208	; 0xdb90
   1231c:	movw	r3, #54368	; 0xd460
   12320:	mov	r0, r4
   12324:	mov	r2, #1
   12328:	movt	r1, #1
   1232c:	movt	r3, #1
   12330:	bl	14ecc <__assert_fail@plt+0x37fc>
   12334:	movw	r1, #61768	; 0xf148
   12338:	mov	r3, r8
   1233c:	movt	r1, #2
   12340:	str	r0, [r1]
   12344:	ldr	r0, [sp, #64]	; 0x40
   12348:	add	r5, r5, #1
   1234c:	cmp	r5, r0
   12350:	blt	11f74 <__assert_fail@plt+0x8a4>
   12354:	b	126b8 <__assert_fail@plt+0xfe8>
   12358:	mov	r6, #0
   1235c:	mov	r0, r4
   12360:	add	r1, sp, #68	; 0x44
   12364:	str	r4, [sp, #36]	; 0x24
   12368:	str	r6, [sp, #68]	; 0x44
   1236c:	bl	15044 <__assert_fail@plt+0x3974>
   12370:	str	r1, [sp, #48]	; 0x30
   12374:	movw	r1, #54389	; 0xd475
   12378:	movt	r1, #1
   1237c:	ldrb	r1, [r1, r6]
   12380:	cmp	r1, #0
   12384:	beq	1239c <__assert_fail@plt+0xccc>
   12388:	ldrb	r2, [sl, r6]
   1238c:	add	r6, r6, #1
   12390:	cmp	r2, r1
   12394:	beq	12374 <__assert_fail@plt+0xca4>
   12398:	b	123c8 <__assert_fail@plt+0xcf8>
   1239c:	ldrb	r6, [sl, r6]
   123a0:	movw	r1, #62304	; 0xf360
   123a4:	mov	r2, #0
   123a8:	mov	lr, #1
   123ac:	movt	r1, #2
   123b0:	add	r4, r1, #56	; 0x38
   123b4:	mvn	r1, #-2147483647	; 0x80000001
   123b8:	cmp	r6, #0
   123bc:	beq	12514 <__assert_fail@plt+0xe44>
   123c0:	cmp	r6, #61	; 0x3d
   123c4:	beq	12514 <__assert_fail@plt+0xe44>
   123c8:	movw	r6, #54393	; 0xd479
   123cc:	mov	r1, #0
   123d0:	movt	r6, #1
   123d4:	ldrb	r2, [r6, r1]
   123d8:	cmp	r2, #0
   123dc:	beq	123f4 <__assert_fail@plt+0xd24>
   123e0:	ldrb	r3, [sl, r1]
   123e4:	add	r1, r1, #1
   123e8:	cmp	r3, r2
   123ec:	beq	123d4 <__assert_fail@plt+0xd04>
   123f0:	b	12420 <__assert_fail@plt+0xd50>
   123f4:	ldrb	r6, [sl, r1]
   123f8:	movw	r1, #62304	; 0xf360
   123fc:	mov	r2, #0
   12400:	mov	lr, #1
   12404:	movt	r1, #2
   12408:	add	r4, r1, #40	; 0x28
   1240c:	mvn	r1, #-2147483647	; 0x80000001
   12410:	cmp	r6, #0
   12414:	beq	12514 <__assert_fail@plt+0xe44>
   12418:	cmp	r6, #61	; 0x3d
   1241c:	beq	12514 <__assert_fail@plt+0xe44>
   12420:	movw	r6, #54398	; 0xd47e
   12424:	mov	r1, #0
   12428:	movt	r6, #1
   1242c:	ldrb	r2, [r6, r1]
   12430:	cmp	r2, #0
   12434:	beq	1244c <__assert_fail@plt+0xd7c>
   12438:	ldrb	r3, [sl, r1]
   1243c:	add	r1, r1, #1
   12440:	cmp	r3, r2
   12444:	beq	1242c <__assert_fail@plt+0xd5c>
   12448:	b	124bc <__assert_fail@plt+0xdec>
   1244c:	ldrb	r3, [sl, r1]
   12450:	mov	r2, #0
   12454:	mvn	r1, #-2147483647	; 0x80000001
   12458:	mov	lr, #1
   1245c:	cmp	r3, #0
   12460:	cmpne	r3, #61	; 0x3d
   12464:	bne	124bc <__assert_fail@plt+0xdec>
   12468:	add	r3, sp, #72	; 0x48
   1246c:	mov	ip, #0
   12470:	mov	r4, r3
   12474:	ldr	r3, [sp, #48]	; 0x30
   12478:	subs	r6, r0, lr
   1247c:	sbcs	r2, r3, r2
   12480:	blt	1268c <__assert_fail@plt+0xfbc>
   12484:	subs	r1, r1, r0
   12488:	sbcs	r1, ip, r3
   1248c:	blt	1462c <__assert_fail@plt+0x2f5c>
   12490:	ldr	r1, [sp, #68]	; 0x44
   12494:	cmp	r1, #0
   12498:	bne	14610 <__assert_fail@plt+0x2f40>
   1249c:	mov	r3, r8
   124a0:	cmp	r4, #0
   124a4:	strne	r0, [r4]
   124a8:	ldr	r0, [sp, #64]	; 0x40
   124ac:	add	r5, r5, #1
   124b0:	cmp	r5, r0
   124b4:	blt	11f74 <__assert_fail@plt+0x8a4>
   124b8:	b	126b8 <__assert_fail@plt+0xfe8>
   124bc:	movw	r6, #54397	; 0xd47d
   124c0:	mov	r1, #0
   124c4:	movt	r6, #1
   124c8:	ldrb	r2, [r6, r1]
   124cc:	cmp	r2, #0
   124d0:	beq	124e8 <__assert_fail@plt+0xe18>
   124d4:	ldrb	r3, [sl, r1]
   124d8:	add	r1, r1, #1
   124dc:	cmp	r3, r2
   124e0:	beq	124c8 <__assert_fail@plt+0xdf8>
   124e4:	b	1252c <__assert_fail@plt+0xe5c>
   124e8:	ldrb	r6, [sl, r1]
   124ec:	movw	r1, #62304	; 0xf360
   124f0:	mov	r2, #0
   124f4:	mov	lr, #1
   124f8:	movt	r1, #2
   124fc:	add	r4, r1, #60	; 0x3c
   12500:	mvn	r1, #-2147483648	; 0x80000000
   12504:	cmp	r6, #0
   12508:	beq	12514 <__assert_fail@plt+0xe44>
   1250c:	cmp	r6, #61	; 0x3d
   12510:	bne	1252c <__assert_fail@plt+0xe5c>
   12514:	mov	ip, #0
   12518:	ldr	r3, [sp, #48]	; 0x30
   1251c:	subs	r6, r0, lr
   12520:	sbcs	r2, r3, r2
   12524:	bge	12484 <__assert_fail@plt+0xdb4>
   12528:	b	1268c <__assert_fail@plt+0xfbc>
   1252c:	movw	r6, #55235	; 0xd7c3
   12530:	mov	r1, #0
   12534:	movt	r6, #1
   12538:	ldrb	r2, [r6, r1]
   1253c:	cmp	r2, #0
   12540:	beq	12558 <__assert_fail@plt+0xe88>
   12544:	ldrb	r3, [sl, r1]
   12548:	add	r1, r1, #1
   1254c:	cmp	r3, r2
   12550:	beq	12538 <__assert_fail@plt+0xe68>
   12554:	b	12584 <__assert_fail@plt+0xeb4>
   12558:	ldrb	r2, [sl, r1]
   1255c:	mvn	ip, #-2147483648	; 0x80000000
   12560:	mvn	r1, #0
   12564:	mov	lr, #0
   12568:	cmp	r2, #0
   1256c:	cmpne	r2, #61	; 0x3d
   12570:	bne	12584 <__assert_fail@plt+0xeb4>
   12574:	ldr	r2, [sp, #48]	; 0x30
   12578:	str	r0, [sp, #56]	; 0x38
   1257c:	str	r2, [sp, #32]
   12580:	b	125d8 <__assert_fail@plt+0xf08>
   12584:	movw	r6, #55251	; 0xd7d3
   12588:	mov	r1, #0
   1258c:	movt	r6, #1
   12590:	ldrb	r2, [r6, r1]
   12594:	cmp	r2, #0
   12598:	beq	125b0 <__assert_fail@plt+0xee0>
   1259c:	ldrb	r3, [sl, r1]
   125a0:	add	r1, r1, #1
   125a4:	cmp	r3, r2
   125a8:	beq	12590 <__assert_fail@plt+0xec0>
   125ac:	b	125f4 <__assert_fail@plt+0xf24>
   125b0:	ldrb	r2, [sl, r1]
   125b4:	mvn	ip, #-2147483648	; 0x80000000
   125b8:	mvn	r1, #0
   125bc:	mov	lr, #0
   125c0:	cmp	r2, #0
   125c4:	cmpne	r2, #61	; 0x3d
   125c8:	bne	125f4 <__assert_fail@plt+0xf24>
   125cc:	ldr	r2, [sp, #48]	; 0x30
   125d0:	str	r0, [sp, #28]
   125d4:	str	r2, [sp, #52]	; 0x34
   125d8:	mov	r2, #0
   125dc:	mov	r4, #0
   125e0:	ldr	r3, [sp, #48]	; 0x30
   125e4:	subs	r6, r0, lr
   125e8:	sbcs	r2, r3, r2
   125ec:	bge	12484 <__assert_fail@plt+0xdb4>
   125f0:	b	1268c <__assert_fail@plt+0xfbc>
   125f4:	movw	r6, #54401	; 0xd481
   125f8:	mov	r1, #0
   125fc:	movt	r6, #1
   12600:	ldrb	r2, [r6, r1]
   12604:	cmp	r2, #0
   12608:	beq	12620 <__assert_fail@plt+0xf50>
   1260c:	ldrb	r3, [sl, r1]
   12610:	add	r1, r1, #1
   12614:	cmp	r3, r2
   12618:	beq	12600 <__assert_fail@plt+0xf30>
   1261c:	b	14590 <__assert_fail@plt+0x2ec0>
   12620:	ldrb	r2, [sl, r1]
   12624:	mvn	ip, #-2147483648	; 0x80000000
   12628:	mvn	r1, #0
   1262c:	mov	lr, #0
   12630:	cmp	r2, #0
   12634:	beq	12668 <__assert_fail@plt+0xf98>
   12638:	ldr	r3, [sp, #48]	; 0x30
   1263c:	cmp	r2, #61	; 0x3d
   12640:	mov	r2, #0
   12644:	mov	r4, #0
   12648:	str	r0, [sp, #44]	; 0x2c
   1264c:	str	r3, [sp, #40]	; 0x28
   12650:	bne	14590 <__assert_fail@plt+0x2ec0>
   12654:	ldr	r3, [sp, #48]	; 0x30
   12658:	subs	r6, r0, lr
   1265c:	sbcs	r2, r3, r2
   12660:	bge	12484 <__assert_fail@plt+0xdb4>
   12664:	b	1268c <__assert_fail@plt+0xfbc>
   12668:	ldr	r3, [sp, #48]	; 0x30
   1266c:	mov	r2, #0
   12670:	mov	r4, #0
   12674:	str	r0, [sp, #44]	; 0x2c
   12678:	str	r3, [sp, #40]	; 0x28
   1267c:	ldr	r3, [sp, #48]	; 0x30
   12680:	subs	r6, r0, lr
   12684:	sbcs	r2, r3, r2
   12688:	bge	12484 <__assert_fail@plt+0xdb4>
   1268c:	mov	r0, #4
   12690:	str	r0, [sp, #68]	; 0x44
   12694:	b	14618 <__assert_fail@plt+0x2f48>
   12698:	mvn	r0, #-2147483648	; 0x80000000
   1269c:	mov	r2, #0
   126a0:	mov	ip, #0
   126a4:	mov	r4, #0
   126a8:	str	r0, [sp, #40]	; 0x28
   126ac:	mvn	r0, #0
   126b0:	str	r0, [sp, #44]	; 0x2c
   126b4:	b	12704 <__assert_fail@plt+0x1034>
   126b8:	ldr	sl, [sp, #72]	; 0x48
   126bc:	movw	r8, #62304	; 0xf360
   126c0:	movt	r8, #2
   126c4:	cmp	sl, #0
   126c8:	beq	126f0 <__assert_fail@plt+0x1020>
   126cc:	ldr	ip, [sp, #28]
   126d0:	ldr	r4, [sp, #52]	; 0x34
   126d4:	ldr	r2, [sp, #32]
   126d8:	movw	r6, #61920	; 0xf1e0
   126dc:	mov	r5, sl
   126e0:	str	sl, [r8, #56]	; 0x38
   126e4:	str	sl, [r8, #40]	; 0x28
   126e8:	movt	r6, #2
   126ec:	b	12730 <__assert_fail@plt+0x1060>
   126f0:	ldr	ip, [sp, #28]
   126f4:	ldr	r4, [sp, #52]	; 0x34
   126f8:	ldr	r2, [sp, #32]
   126fc:	movw	r6, #61920	; 0xf1e0
   12700:	movt	r6, #2
   12704:	ldr	r5, [r8, #56]	; 0x38
   12708:	ldr	r0, [r8, #36]	; 0x24
   1270c:	cmp	r5, #0
   12710:	orr	r0, r0, #2048	; 0x800
   12714:	moveq	r5, #512	; 0x200
   12718:	str	r0, [r8, #36]	; 0x24
   1271c:	streq	r5, [r8, #56]	; 0x38
   12720:	ldr	sl, [r8, #40]	; 0x28
   12724:	cmp	sl, #0
   12728:	moveq	sl, #512	; 0x200
   1272c:	streq	sl, [r8, #40]	; 0x28
   12730:	ldr	r0, [r8, #60]	; 0x3c
   12734:	cmp	r0, #0
   12738:	ldreq	r0, [r8, #36]	; 0x24
   1273c:	biceq	r0, r0, #24
   12740:	streq	r0, [r8, #36]	; 0x24
   12744:	movw	r0, #4096	; 0x1000
   12748:	ldr	r7, [r8, #20]
   1274c:	movt	r0, #16
   12750:	tst	r7, r0
   12754:	orrne	r7, r7, r0
   12758:	strne	r7, [r8, #20]
   1275c:	ldr	r3, [r8, #32]
   12760:	tst	r3, #1
   12764:	bne	14674 <__assert_fail@plt+0x2fa4>
   12768:	tst	r7, #16
   1276c:	bne	14698 <__assert_fail@plt+0x2fc8>
   12770:	tst	r3, #12
   12774:	bne	146bc <__assert_fail@plt+0x2fec>
   12778:	ldr	r0, [sp, #56]	; 0x38
   1277c:	str	r4, [sp, #52]	; 0x34
   12780:	str	r3, [sp, #64]	; 0x40
   12784:	orrs	r0, r0, r2
   12788:	andsne	r1, r7, #8
   1278c:	bne	127ac <__assert_fail@plt+0x10dc>
   12790:	cmp	r0, #0
   12794:	ldrne	r1, [sp, #56]	; 0x38
   12798:	movwne	r0, #62424	; 0xf3d8
   1279c:	movtne	r0, #2
   127a0:	strne	r1, [r0, #24]
   127a4:	strne	r2, [r0, #28]
   127a8:	b	127e4 <__assert_fail@plt+0x1114>
   127ac:	ldr	r4, [sp, #56]	; 0x38
   127b0:	mov	r1, r2
   127b4:	asr	r3, r5, #31
   127b8:	mov	r2, r5
   127bc:	mov	r9, ip
   127c0:	mov	r0, r4
   127c4:	bl	1c188 <__assert_fail@plt+0xaab8>
   127c8:	movw	r2, #62424	; 0xf3d8
   127cc:	mov	ip, r9
   127d0:	movt	r2, #2
   127d4:	strd	r0, [r2, #24]
   127d8:	mls	r0, r0, r5, r4
   127dc:	ldr	r4, [sp, #52]	; 0x34
   127e0:	str	r0, [r8, #64]	; 0x40
   127e4:	ldr	r1, [sp, #40]	; 0x28
   127e8:	mvn	r0, #-2147483648	; 0x80000000
   127ec:	eor	r0, r1, r0
   127f0:	ldr	r1, [sp, #44]	; 0x2c
   127f4:	mvn	r1, r1
   127f8:	orrs	r0, r1, r0
   127fc:	andsne	r1, r7, #4
   12800:	bne	12884 <__assert_fail@plt+0x11b4>
   12804:	ldr	lr, [sp, #64]	; 0x40
   12808:	cmp	r0, #0
   1280c:	beq	128cc <__assert_fail@plt+0x11fc>
   12810:	ldr	r1, [sp, #44]	; 0x2c
   12814:	ldr	r2, [sp, #40]	; 0x28
   12818:	movw	r0, #61768	; 0xf148
   1281c:	movt	r0, #2
   12820:	str	r1, [r0, #8]
   12824:	str	r2, [r0, #12]
   12828:	orrs	r0, ip, r4
   1282c:	andsne	r1, lr, #16
   12830:	beq	128d8 <__assert_fail@plt+0x1208>
   12834:	asr	r5, sl, #31
   12838:	mov	r1, r4
   1283c:	mov	r0, ip
   12840:	mov	r2, sl
   12844:	mov	r9, ip
   12848:	mov	r4, lr
   1284c:	mov	r3, r5
   12850:	bl	1c188 <__assert_fail@plt+0xaab8>
   12854:	umull	r2, r3, r0, sl
   12858:	strd	r0, [r8, #112]	; 0x70
   1285c:	movw	ip, #62424	; 0xf3d8
   12860:	mov	lr, r4
   12864:	mla	r0, r0, r5, r3
   12868:	subs	r2, r9, r2
   1286c:	movt	ip, #2
   12870:	mla	r0, r1, sl, r0
   12874:	ldr	r1, [sp, #52]	; 0x34
   12878:	sbc	r3, r1, r0
   1287c:	strd	r2, [ip]
   12880:	b	128e4 <__assert_fail@plt+0x1214>
   12884:	ldr	r9, [sp, #44]	; 0x2c
   12888:	ldr	r1, [sp, #40]	; 0x28
   1288c:	asr	r3, r5, #31
   12890:	mov	r2, r5
   12894:	str	r5, [sp, #60]	; 0x3c
   12898:	mov	r5, sl
   1289c:	mov	sl, ip
   128a0:	mov	r0, r9
   128a4:	bl	1c188 <__assert_fail@plt+0xaab8>
   128a8:	movw	r2, #61768	; 0xf148
   128ac:	ldr	lr, [sp, #64]	; 0x40
   128b0:	mov	ip, sl
   128b4:	mov	sl, r5
   128b8:	movt	r2, #2
   128bc:	strd	r0, [r2, #8]
   128c0:	ldr	r1, [sp, #60]	; 0x3c
   128c4:	mls	r0, r0, r1, r9
   128c8:	str	r0, [r8, #44]	; 0x2c
   128cc:	orrs	r0, ip, r4
   128d0:	andsne	r1, lr, #16
   128d4:	bne	12834 <__assert_fail@plt+0x1164>
   128d8:	cmp	r0, #0
   128dc:	strne	ip, [r8, #112]	; 0x70
   128e0:	strne	r4, [r8, #116]	; 0x74
   128e4:	ldr	r5, [r8, #36]	; 0x24
   128e8:	and	r0, r7, #1
   128ec:	and	r1, r5, #2048	; 0x800
   128f0:	orrs	r1, r1, r0
   128f4:	mov	r1, #0
   128f8:	bne	12948 <__assert_fail@plt+0x1278>
   128fc:	movw	r1, #62424	; 0xf3d8
   12900:	movt	r1, #2
   12904:	ldrd	r2, [r1, #24]
   12908:	orrs	r1, r2, r3
   1290c:	mov	r1, #1
   12910:	bne	12948 <__assert_fail@plt+0x1278>
   12914:	movw	r2, #61768	; 0xf148
   12918:	movt	r2, #2
   1291c:	ldrd	r2, [r2, #8]
   12920:	subs	r4, r2, #1
   12924:	sbcs	r4, r3, #0
   12928:	blt	12940 <__assert_fail@plt+0x1270>
   1292c:	mvn	r4, #-2147483648	; 0x80000000
   12930:	mvn	r2, r2
   12934:	eor	r3, r3, r4
   12938:	orrs	r2, r2, r3
   1293c:	bne	12948 <__assert_fail@plt+0x1278>
   12940:	orr	r1, lr, r7
   12944:	ubfx	r1, r1, #16, #1
   12948:	movw	r2, #21124	; 0x5284
   1294c:	strb	r1, [r8, #6]
   12950:	movw	r1, #21224	; 0x52e8
   12954:	cmp	r0, #0
   12958:	sub	r0, r5, #1
   1295c:	bic	r4, r7, #1
   12960:	movt	r1, #1
   12964:	movt	r2, #1
   12968:	and	r0, r5, r0
   1296c:	moveq	r2, r1
   12970:	tst	r0, #7
   12974:	str	r2, [r8, #68]	; 0x44
   12978:	str	r4, [r8, #20]
   1297c:	bne	14718 <__assert_fail@plt+0x3048>
   12980:	and	r0, r5, #24
   12984:	sub	r1, r0, #1
   12988:	tst	r1, r0
   1298c:	bne	14724 <__assert_fail@plt+0x3054>
   12990:	and	r0, r5, #96	; 0x60
   12994:	sub	r1, r0, #1
   12998:	tst	r1, r0
   1299c:	bne	14730 <__assert_fail@plt+0x3060>
   129a0:	and	r0, r5, #12288	; 0x3000
   129a4:	sub	r1, r0, #1
   129a8:	tst	r1, r0
   129ac:	bne	1473c <__assert_fail@plt+0x306c>
   129b0:	movw	r0, #2
   129b4:	movt	r0, #1
   129b8:	and	r1, r7, r0
   129bc:	sub	r2, r1, #1
   129c0:	tst	r2, r1
   129c4:	movweq	r1, #65535	; 0xffff
   129c8:	andeq	r0, lr, r0
   129cc:	movteq	r1, #1
   129d0:	addeq	r1, r0, r1
   129d4:	tsteq	r1, r0
   129d8:	bne	14620 <__assert_fail@plt+0x2f50>
   129dc:	tst	r7, #2
   129e0:	bne	12a2c <__assert_fail@plt+0x135c>
   129e4:	tst	lr, #2
   129e8:	bne	12a68 <__assert_fail@plt+0x1398>
   129ec:	tst	r5, #1
   129f0:	bne	12aa4 <__assert_fail@plt+0x13d4>
   129f4:	tst	r5, #64	; 0x40
   129f8:	bne	12ad8 <__assert_fail@plt+0x1408>
   129fc:	tst	r5, #32
   12a00:	beq	12b04 <__assert_fail@plt+0x1434>
   12a04:	bl	1152c <__ctype_tolower_loc@plt>
   12a08:	ldr	r0, [r0]
   12a0c:	mov	r1, #0
   12a10:	ldrb	r2, [r6, r1]
   12a14:	ldr	r2, [r0, r2, lsl #2]
   12a18:	strb	r2, [r6, r1]
   12a1c:	add	r1, r1, #1
   12a20:	cmp	r1, #256	; 0x100
   12a24:	bne	12a10 <__assert_fail@plt+0x1340>
   12a28:	b	12afc <__assert_fail@plt+0x142c>
   12a2c:	movw	r1, #61768	; 0xf148
   12a30:	mov	r0, #1
   12a34:	bic	r4, r7, #3
   12a38:	movt	r1, #2
   12a3c:	strb	r0, [r8, #2]
   12a40:	str	r4, [r8, #20]
   12a44:	ldrd	r2, [r1, #8]
   12a48:	ldr	r0, [r8, #44]	; 0x2c
   12a4c:	orr	r1, r2, r3
   12a50:	orr	r0, r1, r0
   12a54:	clz	r0, r0
   12a58:	lsr	r0, r0, #5
   12a5c:	strb	r0, [r8, #4]
   12a60:	tst	lr, #2
   12a64:	beq	129ec <__assert_fail@plt+0x131c>
   12a68:	movw	r1, #61768	; 0xf148
   12a6c:	mov	r0, #1
   12a70:	strb	r0, [r8, #3]
   12a74:	bic	r0, lr, #2
   12a78:	movt	r1, #2
   12a7c:	ldrd	r2, [r1, #8]
   12a80:	str	r0, [r8, #32]
   12a84:	ldr	r0, [r8, #44]	; 0x2c
   12a88:	orr	r1, r2, r3
   12a8c:	orr	r0, r1, r0
   12a90:	clz	r0, r0
   12a94:	lsr	r0, r0, #5
   12a98:	strb	r0, [r8, #5]
   12a9c:	tst	r5, #1
   12aa0:	beq	129f4 <__assert_fail@plt+0x1324>
   12aa4:	movw	r1, #56272	; 0xdbd0
   12aa8:	mov	r0, #0
   12aac:	movt	r1, #1
   12ab0:	ldrb	r2, [r6, r0]
   12ab4:	ldrb	r2, [r1, r2]
   12ab8:	strb	r2, [r6, r0]
   12abc:	add	r0, r0, #1
   12ac0:	cmp	r0, #256	; 0x100
   12ac4:	bne	12ab0 <__assert_fail@plt+0x13e0>
   12ac8:	mov	r0, #1
   12acc:	strb	r0, [r8, #7]
   12ad0:	tst	r5, #64	; 0x40
   12ad4:	beq	129fc <__assert_fail@plt+0x132c>
   12ad8:	bl	11538 <__ctype_toupper_loc@plt>
   12adc:	ldr	r0, [r0]
   12ae0:	mov	r1, #0
   12ae4:	ldrb	r2, [r6, r1]
   12ae8:	ldr	r2, [r0, r2, lsl #2]
   12aec:	strb	r2, [r6, r1]
   12af0:	add	r1, r1, #1
   12af4:	cmp	r1, #256	; 0x100
   12af8:	bne	12ae4 <__assert_fail@plt+0x1414>
   12afc:	mov	r0, #1
   12b00:	strb	r0, [r8, #7]
   12b04:	tst	r5, #2
   12b08:	bne	12b3c <__assert_fail@plt+0x146c>
   12b0c:	tst	r5, #4
   12b10:	beq	12b70 <__assert_fail@plt+0x14a0>
   12b14:	movw	r1, #56784	; 0xddd0
   12b18:	mov	r0, #0
   12b1c:	movt	r1, #1
   12b20:	ldrb	r2, [r6, r0]
   12b24:	ldrb	r2, [r1, r2]
   12b28:	strb	r2, [r6, r0]
   12b2c:	add	r0, r0, #1
   12b30:	cmp	r0, #256	; 0x100
   12b34:	bne	12b20 <__assert_fail@plt+0x1450>
   12b38:	b	12b60 <__assert_fail@plt+0x1490>
   12b3c:	movw	r1, #56528	; 0xdcd0
   12b40:	mov	r0, #0
   12b44:	movt	r1, #1
   12b48:	ldrb	r2, [r6, r0]
   12b4c:	ldrb	r2, [r1, r2]
   12b50:	strb	r2, [r6, r0]
   12b54:	add	r0, r0, #1
   12b58:	cmp	r0, #256	; 0x100
   12b5c:	bne	12b48 <__assert_fail@plt+0x1478>
   12b60:	movw	r0, #257	; 0x101
   12b64:	strh	r0, [r8, #7]
   12b68:	mov	r0, #1
   12b6c:	strb	r0, [r8, #9]
   12b70:	ldr	r5, [r8, #16]
   12b74:	cmp	r5, #0
   12b78:	beq	12be4 <__assert_fail@plt+0x1514>
   12b7c:	bl	1545c <__assert_fail@plt+0x3d8c>
   12b80:	mov	r0, #0
   12b84:	mov	r1, r5
   12b88:	mov	r2, r4
   12b8c:	mov	r3, #0
   12b90:	bl	16b80 <__assert_fail@plt+0x54b0>
   12b94:	cmn	r0, #1
   12b98:	bgt	12c0c <__assert_fail@plt+0x153c>
   12b9c:	bl	11598 <__errno_location@plt>
   12ba0:	ldr	r6, [r0]
   12ba4:	cmp	r6, #4
   12ba8:	beq	12b7c <__assert_fail@plt+0x14ac>
   12bac:	movw	r1, #53705	; 0xd1c9
   12bb0:	mov	r0, #0
   12bb4:	mov	r2, #5
   12bb8:	movt	r1, #1
   12bbc:	bl	11430 <dcgettext@plt>
   12bc0:	ldr	r1, [r8, #16]
   12bc4:	mov	r4, r0
   12bc8:	mov	r0, #4
   12bcc:	bl	194b4 <__assert_fail@plt+0x7de4>
   12bd0:	mov	r3, r0
   12bd4:	mov	r0, #1
   12bd8:	mov	r1, r6
   12bdc:	mov	r2, r4
   12be0:	bl	1494c <__assert_fail@plt+0x327c>
   12be4:	movw	r1, #53690	; 0xd1ba
   12be8:	mov	r0, #0
   12bec:	mov	r2, #5
   12bf0:	movt	r1, #1
   12bf4:	bl	11430 <dcgettext@plt>
   12bf8:	str	r0, [r8, #16]
   12bfc:	mov	r2, r0
   12c00:	mov	r0, #0
   12c04:	ldr	r1, [r8, #20]
   12c08:	bl	14840 <__assert_fail@plt+0x3170>
   12c0c:	mov	r4, #1
   12c10:	mov	r0, #0
   12c14:	mov	r2, #0
   12c18:	mov	r3, #0
   12c1c:	mov	r6, #0
   12c20:	str	r4, [sp]
   12c24:	bl	1149c <lseek64@plt>
   12c28:	mov	r7, r1
   12c2c:	eor	r1, r4, r1, lsr #31
   12c30:	strb	r1, [r8, #1]
   12c34:	rsbs	r1, r0, #0
   12c38:	rscs	r1, r7, #0
   12c3c:	movwlt	r6, #1
   12c40:	cmp	r6, #0
   12c44:	moveq	r7, r6
   12c48:	movne	r6, r0
   12c4c:	strd	r6, [r8, #104]	; 0x68
   12c50:	bl	11598 <__errno_location@plt>
   12c54:	mov	r7, r0
   12c58:	ldr	r0, [r0]
   12c5c:	mvn	ip, #0
   12c60:	str	r7, [sp, #64]	; 0x40
   12c64:	str	r0, [r8, #24]
   12c68:	ldr	r5, [r8, #28]
   12c6c:	cmp	r5, #0
   12c70:	beq	12cd4 <__assert_fail@plt+0x1604>
   12c74:	add	r7, r8, #32
   12c78:	mov	r3, #128	; 0x80
   12c7c:	mov	r2, #64	; 0x40
   12c80:	ldm	r7, {r0, r1, r7}
   12c84:	ldrd	r8, [r8, #112]	; 0x70
   12c88:	and	r3, r3, r1, lsr #6
   12c8c:	bic	r2, r2, r1, lsr #6
   12c90:	orrs	r4, r8, r9
   12c94:	orr	r0, r3, r0
   12c98:	orr	r0, r0, r2
   12c9c:	mov	sl, r0
   12ca0:	orreq	sl, sl, #512	; 0x200
   12ca4:	ands	lr, r1, #512	; 0x200
   12ca8:	movne	sl, r0
   12cac:	cmn	r7, #1
   12cb0:	ble	12d00 <__assert_fail@plt+0x1630>
   12cb4:	cmp	r7, #0
   12cb8:	beq	12dd8 <__assert_fail@plt+0x1708>
   12cbc:	cmn	r9, #1
   12cc0:	ble	12d44 <__assert_fail@plt+0x1674>
   12cc4:	asr	r3, r7, #31
   12cc8:	mvn	r0, #0
   12ccc:	mvn	r1, #-2147483648	; 0x80000000
   12cd0:	b	12d1c <__assert_fail@plt+0x164c>
   12cd4:	movw	r1, #53723	; 0xd1db
   12cd8:	mov	r0, #0
   12cdc:	mov	r2, #5
   12ce0:	movt	r1, #1
   12ce4:	bl	11430 <dcgettext@plt>
   12ce8:	str	r0, [r8, #28]
   12cec:	mov	r2, r0
   12cf0:	mov	r0, #1
   12cf4:	ldr	r1, [r8, #32]
   12cf8:	bl	14840 <__assert_fail@plt+0x3170>
   12cfc:	b	12fc8 <__assert_fail@plt+0x18f8>
   12d00:	cmn	r9, #1
   12d04:	ble	12d88 <__assert_fail@plt+0x16b8>
   12d08:	cmn	r7, #1
   12d0c:	beq	12dd8 <__assert_fail@plt+0x1708>
   12d10:	asr	r3, r7, #31
   12d14:	mov	r0, #0
   12d18:	mov	r1, #-2147483648	; 0x80000000
   12d1c:	mov	r2, r7
   12d20:	mov	r6, r3
   12d24:	str	r3, [sp, #56]	; 0x38
   12d28:	mov	r6, lr
   12d2c:	bl	1c188 <__assert_fail@plt+0xaab8>
   12d30:	subs	r0, r0, r8
   12d34:	mov	lr, r6
   12d38:	sbcs	r0, r1, r9
   12d3c:	blt	12db8 <__assert_fail@plt+0x16e8>
   12d40:	b	12dd8 <__assert_fail@plt+0x1708>
   12d44:	eor	r0, r8, ip
   12d48:	eor	r1, r9, ip
   12d4c:	orrs	r0, r0, r1
   12d50:	beq	12dd8 <__assert_fail@plt+0x1708>
   12d54:	mov	r0, #0
   12d58:	mov	r1, #-2147483648	; 0x80000000
   12d5c:	mov	r2, r8
   12d60:	mov	r3, r9
   12d64:	mov	r6, lr
   12d68:	bl	1c188 <__assert_fail@plt+0xaab8>
   12d6c:	subs	r0, r0, r7
   12d70:	mov	lr, r6
   12d74:	sbcs	r0, r1, r7, asr #31
   12d78:	bge	12dd8 <__assert_fail@plt+0x1708>
   12d7c:	asr	r0, r7, #31
   12d80:	str	r0, [sp, #56]	; 0x38
   12d84:	b	12db8 <__assert_fail@plt+0x16e8>
   12d88:	asr	r3, r7, #31
   12d8c:	mvn	r0, #0
   12d90:	mvn	r1, #-2147483648	; 0x80000000
   12d94:	mov	r2, r7
   12d98:	mov	r6, r3
   12d9c:	str	r3, [sp, #56]	; 0x38
   12da0:	mov	r6, lr
   12da4:	bl	1c188 <__assert_fail@plt+0xaab8>
   12da8:	subs	r0, r8, r0
   12dac:	mov	lr, r6
   12db0:	sbcs	r0, r9, r1
   12db4:	bge	12dd8 <__assert_fail@plt+0x1708>
   12db8:	umull	r1, r0, r8, r7
   12dbc:	str	r1, [sp, #60]	; 0x3c
   12dc0:	ldr	r1, [sp, #56]	; 0x38
   12dc4:	mla	r0, r8, r1, r0
   12dc8:	mla	r9, r9, r7, r0
   12dcc:	cmp	lr, #0
   12dd0:	bne	12e4c <__assert_fail@plt+0x177c>
   12dd4:	b	14760 <__assert_fail@plt+0x3090>
   12dd8:	umull	r0, r1, r8, r7
   12ddc:	asr	r2, r7, #31
   12de0:	mla	r1, r8, r2, r1
   12de4:	movw	r2, #62424	; 0xf3d8
   12de8:	movt	r2, #2
   12dec:	mla	r1, r9, r7, r1
   12df0:	ldrd	r2, [r2]
   12df4:	adds	r0, r2, r0
   12df8:	mov	r2, #0
   12dfc:	adc	r9, r3, r1
   12e00:	str	r0, [sp, #60]	; 0x3c
   12e04:	mov	r0, #0
   12e08:	cmn	r9, #1
   12e0c:	movwgt	r2, #1
   12e10:	cmn	r3, #1
   12e14:	mov	r3, #0
   12e18:	movwgt	r3, #1
   12e1c:	subs	r2, r3, r2
   12e20:	movwne	r2, #1
   12e24:	cmn	r1, #1
   12e28:	movwgt	r0, #1
   12e2c:	sub	r0, r3, r0
   12e30:	clz	r0, r0
   12e34:	lsr	r0, r0, #5
   12e38:	and	r0, r0, r2
   12e3c:	cmp	r0, #1
   12e40:	bne	12e4c <__assert_fail@plt+0x177c>
   12e44:	cmp	lr, #0
   12e48:	beq	14760 <__assert_fail@plt+0x3090>
   12e4c:	ldr	r7, [sp, #64]	; 0x40
   12e50:	movw	r8, #62304	; 0xf360
   12e54:	cmp	r4, #0
   12e58:	movt	r8, #2
   12e5c:	beq	12e94 <__assert_fail@plt+0x17c4>
   12e60:	orr	r4, sl, #2
   12e64:	bl	1545c <__assert_fail@plt+0x3d8c>
   12e68:	mov	r0, #1
   12e6c:	mov	r1, r5
   12e70:	mov	r2, r4
   12e74:	movw	r3, #438	; 0x1b6
   12e78:	bl	16b80 <__assert_fail@plt+0x54b0>
   12e7c:	cmn	r0, #1
   12e80:	bgt	12efc <__assert_fail@plt+0x182c>
   12e84:	ldr	r0, [r7]
   12e88:	cmp	r0, #4
   12e8c:	beq	12e64 <__assert_fail@plt+0x1794>
   12e90:	ldr	r5, [r8, #28]
   12e94:	orr	r6, sl, #1
   12e98:	bl	1545c <__assert_fail@plt+0x3d8c>
   12e9c:	mov	r0, #1
   12ea0:	mov	r1, r5
   12ea4:	mov	r2, r6
   12ea8:	movw	r3, #438	; 0x1b6
   12eac:	bl	16b80 <__assert_fail@plt+0x54b0>
   12eb0:	cmn	r0, #1
   12eb4:	bgt	12efc <__assert_fail@plt+0x182c>
   12eb8:	ldr	r4, [r7]
   12ebc:	cmp	r4, #4
   12ec0:	beq	12e98 <__assert_fail@plt+0x17c8>
   12ec4:	movw	r1, #53705	; 0xd1c9
   12ec8:	mov	r0, #0
   12ecc:	mov	r2, #5
   12ed0:	movt	r1, #1
   12ed4:	bl	11430 <dcgettext@plt>
   12ed8:	ldr	r1, [r8, #28]
   12edc:	mov	r5, r0
   12ee0:	mov	r0, #4
   12ee4:	bl	194b4 <__assert_fail@plt+0x7de4>
   12ee8:	mov	r3, r0
   12eec:	mov	r0, #1
   12ef0:	mov	r1, r4
   12ef4:	mov	r2, r5
   12ef8:	bl	1494c <__assert_fail@plt+0x327c>
   12efc:	ldrd	r0, [r8, #112]	; 0x70
   12f00:	orrs	r0, r0, r1
   12f04:	beq	12fc8 <__assert_fail@plt+0x18f8>
   12f08:	ldrb	r0, [r8, #37]	; 0x25
   12f0c:	tst	r0, #2
   12f10:	bne	12fc8 <__assert_fail@plt+0x18f8>
   12f14:	ldr	r6, [sp, #60]	; 0x3c
   12f18:	bl	1545c <__assert_fail@plt+0x3d8c>
   12f1c:	mov	r0, #1
   12f20:	mov	r2, r6
   12f24:	mov	r3, r9
   12f28:	bl	11418 <ftruncate64@plt>
   12f2c:	cmn	r0, #1
   12f30:	bgt	12f44 <__assert_fail@plt+0x1874>
   12f34:	ldr	r5, [r7]
   12f38:	cmp	r5, #4
   12f3c:	beq	12f18 <__assert_fail@plt+0x1848>
   12f40:	b	12f54 <__assert_fail@plt+0x1884>
   12f44:	cmp	r0, #0
   12f48:	beq	12fc8 <__assert_fail@plt+0x18f8>
   12f4c:	ldr	r5, [r7]
   12f50:	ldr	r6, [sp, #60]	; 0x3c
   12f54:	add	sl, sp, #72	; 0x48
   12f58:	bl	1545c <__assert_fail@plt+0x3d8c>
   12f5c:	mov	r0, #3
   12f60:	mov	r1, #1
   12f64:	mov	r2, sl
   12f68:	bl	11478 <__fxstat64@plt>
   12f6c:	cmn	r0, #1
   12f70:	bgt	12f84 <__assert_fail@plt+0x18b4>
   12f74:	ldr	r4, [r7]
   12f78:	cmp	r4, #4
   12f7c:	beq	12f58 <__assert_fail@plt+0x1888>
   12f80:	b	12f90 <__assert_fail@plt+0x18c0>
   12f84:	cmp	r0, #0
   12f88:	beq	13fc0 <__assert_fail@plt+0x28f0>
   12f8c:	ldr	r4, [r7]
   12f90:	movw	r1, #53816	; 0xd238
   12f94:	mov	r0, #0
   12f98:	mov	r2, #5
   12f9c:	movt	r1, #1
   12fa0:	bl	11430 <dcgettext@plt>
   12fa4:	ldr	r1, [r8, #28]
   12fa8:	mov	r5, r0
   12fac:	mov	r0, #4
   12fb0:	bl	194b4 <__assert_fail@plt+0x7de4>
   12fb4:	mov	r3, r0
   12fb8:	mov	r0, #0
   12fbc:	mov	r1, r4
   12fc0:	mov	r2, r5
   12fc4:	bl	1494c <__assert_fail@plt+0x327c>
   12fc8:	bl	16cf4 <__assert_fail@plt+0x5624>
   12fcc:	movw	r2, #51712	; 0xca00
   12fd0:	movw	r5, #62424	; 0xf3d8
   12fd4:	movt	r2, #15258	; 0x3b9a
   12fd8:	movt	r5, #2
   12fdc:	adds	r2, r0, r2
   12fe0:	add	ip, r5, #8
   12fe4:	adc	r3, r1, #0
   12fe8:	stm	ip, {r0, r1, r2, r3}
   12fec:	ldr	r6, [r8, #64]	; 0x40
   12ff0:	ldr	r4, [r5, #24]
   12ff4:	ldr	r7, [r5, #28]
   12ff8:	orrs	r0, r4, r7
   12ffc:	cmpeq	r6, #0
   13000:	beq	1321c <__assert_fail@plt+0x1b4c>
   13004:	movw	r9, #62304	; 0xf360
   13008:	movt	r9, #2
   1300c:	ldr	r5, [r9, #56]	; 0x38
   13010:	cmn	r5, #1
   13014:	ble	1303c <__assert_fail@plt+0x196c>
   13018:	cmp	r5, #0
   1301c:	mvn	r1, #0
   13020:	beq	130e8 <__assert_fail@plt+0x1a18>
   13024:	cmn	r7, #1
   13028:	ble	13074 <__assert_fail@plt+0x19a4>
   1302c:	asr	r8, r5, #31
   13030:	mvn	r0, #0
   13034:	mvn	r1, #-2147483648	; 0x80000000
   13038:	b	13058 <__assert_fail@plt+0x1988>
   1303c:	cmn	r7, #1
   13040:	ble	130ac <__assert_fail@plt+0x19dc>
   13044:	cmn	r5, #1
   13048:	beq	130e8 <__assert_fail@plt+0x1a18>
   1304c:	asr	r8, r5, #31
   13050:	mov	r0, #0
   13054:	mov	r1, #-2147483648	; 0x80000000
   13058:	mov	r2, r5
   1305c:	mov	r3, r8
   13060:	bl	1c188 <__assert_fail@plt+0xaab8>
   13064:	subs	r0, r0, r4
   13068:	sbcs	r0, r1, r7
   1306c:	blt	130d0 <__assert_fail@plt+0x1a00>
   13070:	b	130e8 <__assert_fail@plt+0x1a18>
   13074:	eor	r0, r4, r1
   13078:	eor	r1, r7, r1
   1307c:	orrs	r0, r0, r1
   13080:	beq	130e8 <__assert_fail@plt+0x1a18>
   13084:	mov	r0, #0
   13088:	mov	r1, #-2147483648	; 0x80000000
   1308c:	mov	r2, r4
   13090:	mov	r3, r7
   13094:	bl	1c188 <__assert_fail@plt+0xaab8>
   13098:	subs	r0, r0, r5
   1309c:	sbcs	r0, r1, r5, asr #31
   130a0:	bge	130e8 <__assert_fail@plt+0x1a18>
   130a4:	asr	r8, r5, #31
   130a8:	b	130d0 <__assert_fail@plt+0x1a00>
   130ac:	asr	r8, r5, #31
   130b0:	mvn	r0, #0
   130b4:	mvn	r1, #-2147483648	; 0x80000000
   130b8:	mov	r2, r5
   130bc:	mov	r3, r8
   130c0:	bl	1c188 <__assert_fail@plt+0xaab8>
   130c4:	subs	r0, r4, r0
   130c8:	sbcs	r0, r7, r1
   130cc:	bge	130e8 <__assert_fail@plt+0x1a18>
   130d0:	umull	r1, r0, r5, r4
   130d4:	mla	r0, r5, r7, r0
   130d8:	str	r1, [sp, #60]	; 0x3c
   130dc:	mla	r6, r8, r4, r0
   130e0:	mov	r8, #1
   130e4:	b	13144 <__assert_fail@plt+0x1a74>
   130e8:	umull	r0, r1, r4, r5
   130ec:	asr	r2, r5, #31
   130f0:	mov	r3, #0
   130f4:	mla	r1, r4, r2, r1
   130f8:	adds	r0, r6, r0
   130fc:	asr	r2, r6, #31
   13100:	mla	r1, r7, r5, r1
   13104:	str	r0, [sp, #60]	; 0x3c
   13108:	mov	r0, #0
   1310c:	adc	r6, r2, r1
   13110:	cmn	r6, #1
   13114:	movwgt	r3, #1
   13118:	cmn	r2, #1
   1311c:	mov	r2, #0
   13120:	movwgt	r2, #1
   13124:	subs	r3, r2, r3
   13128:	movwne	r3, #1
   1312c:	cmn	r1, #1
   13130:	movwgt	r0, #1
   13134:	sub	r0, r2, r0
   13138:	clz	r0, r0
   1313c:	lsr	r0, r0, #5
   13140:	and	r8, r0, r3
   13144:	ldr	r1, [r9, #16]
   13148:	mov	r0, r9
   1314c:	ldr	sl, [r9, #104]	; 0x68
   13150:	ldr	r9, [r9, #108]	; 0x6c
   13154:	mov	r2, r4
   13158:	mov	r3, r7
   1315c:	str	r5, [sp]
   13160:	add	r0, r0, #64	; 0x40
   13164:	str	r0, [sp, #4]
   13168:	mov	r0, #0
   1316c:	bl	15b20 <__assert_fail@plt+0x4450>
   13170:	movw	r5, #62424	; 0xf3d8
   13174:	orrs	r0, r0, r1
   13178:	movt	r5, #2
   1317c:	beq	131dc <__assert_fail@plt+0x1b0c>
   13180:	movw	r0, #61768	; 0xf148
   13184:	movt	r0, #2
   13188:	ldr	r0, [r0]
   1318c:	cmp	r0, #1
   13190:	beq	1321c <__assert_fail@plt+0x1b4c>
   13194:	movw	r1, #55140	; 0xd764
   13198:	mov	r0, #0
   1319c:	mov	r2, #5
   131a0:	movt	r1, #1
   131a4:	bl	11430 <dcgettext@plt>
   131a8:	mov	r4, r0
   131ac:	movw	r0, #62304	; 0xf360
   131b0:	mov	r1, #3
   131b4:	movt	r0, #2
   131b8:	ldr	r2, [r0, #16]
   131bc:	mov	r0, #0
   131c0:	bl	19730 <__assert_fail@plt+0x8060>
   131c4:	mov	r3, r0
   131c8:	mov	r0, #0
   131cc:	mov	r1, #0
   131d0:	mov	r2, r4
   131d4:	bl	1494c <__assert_fail@plt+0x327c>
   131d8:	b	1321c <__assert_fail@plt+0x1b4c>
   131dc:	movw	r0, #62304	; 0xf360
   131e0:	mvn	r3, #0
   131e4:	movt	r0, #2
   131e8:	ldrd	r0, [r0, #104]	; 0x68
   131ec:	subs	r2, r3, r0
   131f0:	sbcs	r2, r3, r1
   131f4:	bge	1321c <__assert_fail@plt+0x1b4c>
   131f8:	cmp	r8, #0
   131fc:	bne	13180 <__assert_fail@plt+0x1ab0>
   13200:	ldr	r2, [sp, #60]	; 0x3c
   13204:	subs	r0, r0, sl
   13208:	sbc	r1, r1, r9
   1320c:	eor	r1, r6, r1
   13210:	eor	r0, r2, r0
   13214:	orrs	r0, r0, r1
   13218:	bne	13180 <__assert_fail@plt+0x1ab0>
   1321c:	movw	r9, #62304	; 0xf360
   13220:	ldrd	r0, [r5]
   13224:	mvn	sl, #0
   13228:	movt	r9, #2
   1322c:	ldrd	r2, [r9, #112]	; 0x70
   13230:	orr	r1, r1, r3
   13234:	orr	r7, r0, r2
   13238:	orrs	r1, r7, r1
   1323c:	beq	132e8 <__assert_fail@plt+0x1c18>
   13240:	str	r0, [sp, #72]	; 0x48
   13244:	ldr	r0, [r9, #40]	; 0x28
   13248:	ldr	r1, [r9, #28]
   1324c:	str	r0, [sp]
   13250:	add	r0, sp, #72	; 0x48
   13254:	str	r0, [sp, #4]
   13258:	mov	r0, #1
   1325c:	bl	15b20 <__assert_fail@plt+0x4450>
   13260:	ldr	r8, [sp, #72]	; 0x48
   13264:	mov	r6, r1
   13268:	orrs	r1, r0, r1
   1326c:	mov	r5, r0
   13270:	cmpeq	r8, #0
   13274:	beq	132e0 <__assert_fail@plt+0x1c10>
   13278:	ldr	r2, [r9, #40]	; 0x28
   1327c:	ldr	r0, [r9, #80]	; 0x50
   13280:	cmp	r1, #0
   13284:	mov	r1, #0
   13288:	moveq	r2, r8
   1328c:	bl	115c8 <memset@plt>
   13290:	ldr	r4, [r9, #40]	; 0x28
   13294:	ldr	r0, [r9, #80]	; 0x50
   13298:	orrs	r7, r5, r6
   1329c:	moveq	r4, r8
   132a0:	mov	r1, r4
   132a4:	bl	1619c <__assert_fail@plt+0x4acc>
   132a8:	cmp	r0, r4
   132ac:	bne	145cc <__assert_fail@plt+0x2efc>
   132b0:	subs	r5, r5, #1
   132b4:	sbc	r6, r6, #0
   132b8:	cmp	r7, #0
   132bc:	moveq	r6, r7
   132c0:	moveq	r5, r7
   132c4:	moveq	r8, r7
   132c8:	orr	r0, r5, r6
   132cc:	cmp	r0, #0
   132d0:	cmpeq	r8, #0
   132d4:	bne	13290 <__assert_fail@plt+0x1bc0>
   132d8:	mov	r0, #0
   132dc:	str	r0, [sp, #72]	; 0x48
   132e0:	movw	r5, #62424	; 0xf3d8
   132e4:	movt	r5, #2
   132e8:	movw	r4, #61768	; 0xf148
   132ec:	movt	r4, #2
   132f0:	ldrd	r0, [r4, #8]
   132f4:	orrs	r0, r0, r1
   132f8:	ldreq	r0, [r9, #44]	; 0x2c
   132fc:	moveq	r8, #0
   13300:	cmpeq	r0, #0
   13304:	beq	140e4 <__assert_fail@plt+0x2a14>
   13308:	ldr	r0, [r9, #84]	; 0x54
   1330c:	cmp	r0, #0
   13310:	bne	13338 <__assert_fail@plt+0x1c68>
   13314:	ldr	r1, [r9, #36]	; 0x24
   13318:	ldr	r2, [r9, #56]	; 0x38
   1331c:	ldr	r0, [r9, #12]
   13320:	ubfx	r1, r1, #7, #1
   13324:	add	r1, r2, r1
   13328:	bl	1167c <aligned_alloc@plt>
   1332c:	cmp	r0, #0
   13330:	str	r0, [r9, #84]	; 0x54
   13334:	beq	147a0 <__assert_fail@plt+0x30d0>
   13338:	bl	16468 <__assert_fail@plt+0x4d98>
   1333c:	mvn	r0, #0
   13340:	mov	r8, #0
   13344:	str	r0, [sp, #56]	; 0x38
   13348:	mov	r0, #0
   1334c:	str	r0, [sp, #60]	; 0x3c
   13350:	b	13380 <__assert_fail@plt+0x1cb0>
   13354:	movw	r0, #62304	; 0xf360
   13358:	add	r1, r5, #56	; 0x38
   1335c:	mov	r8, r9
   13360:	movt	r0, #2
   13364:	ldr	r0, [r0, #56]	; 0x38
   13368:	cmp	r6, r0
   1336c:	addeq	r1, r5, #48	; 0x30
   13370:	ldm	r1, {r0, r3}
   13374:	adds	r0, r0, #1
   13378:	adc	r3, r3, #0
   1337c:	stm	r1, {r0, r3}
   13380:	ldr	r0, [r4]
   13384:	cmp	r0, #4
   13388:	bne	133bc <__assert_fail@plt+0x1cec>
   1338c:	bl	16cf4 <__assert_fail@plt+0x5624>
   13390:	ldrd	r2, [r5, #16]
   13394:	subs	r2, r0, r2
   13398:	sbcs	r2, r1, r3
   1339c:	blt	133bc <__assert_fail@plt+0x1cec>
   133a0:	bl	15780 <__assert_fail@plt+0x40b0>
   133a4:	ldrd	r0, [r5, #16]
   133a8:	movw	r2, #51712	; 0xca00
   133ac:	movt	r2, #15258	; 0x3b9a
   133b0:	adds	r0, r0, r2
   133b4:	adc	r1, r1, #0
   133b8:	strd	r0, [r5, #16]
   133bc:	movw	sl, #62304	; 0xf360
   133c0:	ldr	r6, [r4, #8]
   133c4:	ldr	r9, [r4, #12]
   133c8:	mov	r2, r5
   133cc:	ldr	r4, [r5, #32]
   133d0:	ldr	r3, [r5, #36]	; 0x24
   133d4:	ldr	r5, [r5, #40]	; 0x28
   133d8:	movt	sl, #2
   133dc:	ldr	r2, [r2, #44]	; 0x2c
   133e0:	ldr	r7, [sl, #44]	; 0x2c
   133e4:	adds	r0, r6, #1
   133e8:	adc	r1, r9, #0
   133ec:	cmp	r7, #0
   133f0:	moveq	r0, r6
   133f4:	moveq	r1, r9
   133f8:	adds	r4, r4, r5
   133fc:	adc	r5, r3, r2
   13400:	subs	r0, r4, r0
   13404:	sbcs	r0, r5, r1
   13408:	bge	13b68 <__assert_fail@plt+0x2498>
   1340c:	ldr	r1, [sl, #36]	; 0x24
   13410:	and	r0, r1, #1280	; 0x500
   13414:	cmp	r0, #1280	; 0x500
   13418:	bne	13430 <__assert_fail@plt+0x1d60>
   1341c:	ldr	r2, [sl, #56]	; 0x38
   13420:	ldr	r0, [sl, #84]	; 0x54
   13424:	ands	r1, r1, #24
   13428:	movwne	r1, #32
   1342c:	bl	115c8 <memset@plt>
   13430:	ldr	r0, [sl, #56]	; 0x38
   13434:	subs	r2, r4, r6
   13438:	ldr	r3, [sl, #68]	; 0x44
   1343c:	ldr	r1, [sl, #84]	; 0x54
   13440:	sbcs	r2, r5, r9
   13444:	movlt	r7, r0
   13448:	mov	r0, #0
   1344c:	mov	r2, r7
   13450:	blx	r3
   13454:	mov	r9, r0
   13458:	cmp	r0, #1
   1345c:	bge	13750 <__assert_fail@plt+0x2080>
   13460:	cmp	r9, #0
   13464:	movw	r9, #62304	; 0xf360
   13468:	mvn	sl, #0
   1346c:	movt	r9, #2
   13470:	beq	13c34 <__assert_fail@plt+0x2564>
   13474:	ldr	r0, [r9, #36]	; 0x24
   13478:	movw	r4, #61768	; 0xf148
   1347c:	movt	r4, #2
   13480:	tst	r0, #256	; 0x100
   13484:	beq	13494 <__assert_fail@plt+0x1dc4>
   13488:	ldr	r0, [r4]
   1348c:	cmp	r0, #1
   13490:	beq	134e0 <__assert_fail@plt+0x1e10>
   13494:	ldr	r0, [sp, #64]	; 0x40
   13498:	movw	r1, #55190	; 0xd796
   1349c:	mov	r2, #5
   134a0:	movt	r1, #1
   134a4:	ldr	r5, [r0]
   134a8:	mov	r0, #0
   134ac:	bl	11430 <dcgettext@plt>
   134b0:	ldr	r1, [r9, #16]
   134b4:	mov	r6, r0
   134b8:	mov	r0, #4
   134bc:	bl	194b4 <__assert_fail@plt+0x7de4>
   134c0:	mov	r3, r0
   134c4:	mov	r0, #0
   134c8:	mov	r1, r5
   134cc:	mov	r2, r6
   134d0:	bl	1494c <__assert_fail@plt+0x327c>
   134d4:	ldrb	r0, [r9, #37]	; 0x25
   134d8:	tst	r0, #1
   134dc:	beq	13e38 <__assert_fail@plt+0x2768>
   134e0:	bl	15604 <__assert_fail@plt+0x3f34>
   134e4:	ldr	r0, [r9, #56]	; 0x38
   134e8:	sub	r7, r0, r8
   134ec:	mov	r0, #0
   134f0:	asr	r5, r7, #31
   134f4:	mov	r2, r7
   134f8:	mov	r3, r5
   134fc:	bl	14b2c <__assert_fail@plt+0x345c>
   13500:	ldrb	r0, [r9, #1]
   13504:	cmp	r0, #0
   13508:	beq	13608 <__assert_fail@plt+0x1f38>
   1350c:	ldrd	r0, [r9, #104]	; 0x68
   13510:	subs	r2, sl, r0
   13514:	sbcs	r2, sl, r1
   13518:	bge	135d0 <__assert_fail@plt+0x1f00>
   1351c:	cmn	r1, #1
   13520:	mov	r2, #0
   13524:	mov	r3, #0
   13528:	mov	r6, #0
   1352c:	movwgt	r2, #1
   13530:	adds	r0, r0, r7
   13534:	adc	r1, r1, r7, asr #31
   13538:	cmn	r1, #1
   1353c:	movwgt	r3, #1
   13540:	subs	r3, r2, r3
   13544:	movwne	r3, #1
   13548:	cmn	r5, #1
   1354c:	movwgt	r6, #1
   13550:	sub	r2, r2, r6
   13554:	clz	r2, r2
   13558:	lsr	r2, r2, #5
   1355c:	ands	r2, r2, r3
   13560:	movne	r1, sl
   13564:	movne	r0, sl
   13568:	cmn	r1, #1
   1356c:	strd	r0, [r9, #104]	; 0x68
   13570:	ble	135d0 <__assert_fail@plt+0x1f00>
   13574:	mov	r0, #1
   13578:	mov	r2, #0
   1357c:	mov	r3, #0
   13580:	str	r0, [sp]
   13584:	mov	r0, #0
   13588:	bl	1149c <lseek64@plt>
   1358c:	subs	r2, sl, r0
   13590:	sbcs	r2, sl, r1
   13594:	bge	13624 <__assert_fail@plt+0x1f54>
   13598:	ldrd	r2, [r9, #104]	; 0x68
   1359c:	eor	r6, r3, r1
   135a0:	eor	r5, r2, r0
   135a4:	orrs	r6, r5, r6
   135a8:	bne	1369c <__assert_fail@plt+0x1fcc>
   135ac:	movw	r5, #62424	; 0xf3d8
   135b0:	movt	r5, #2
   135b4:	cmp	r8, #0
   135b8:	bne	13380 <__assert_fail@plt+0x1cb0>
   135bc:	ldr	r0, [r9, #36]	; 0x24
   135c0:	ands	r0, r0, #1024	; 0x400
   135c4:	beq	13380 <__assert_fail@plt+0x1cb0>
   135c8:	mov	r9, #0
   135cc:	b	137ec <__assert_fail@plt+0x211c>
   135d0:	movw	r1, #55401	; 0xd869
   135d4:	mov	r0, #0
   135d8:	mov	r2, #5
   135dc:	movt	r1, #1
   135e0:	bl	11430 <dcgettext@plt>
   135e4:	ldr	r1, [r9, #16]
   135e8:	mov	r4, r0
   135ec:	mov	r0, #4
   135f0:	bl	194b4 <__assert_fail@plt+0x7de4>
   135f4:	mov	r3, r0
   135f8:	mov	r0, #0
   135fc:	mov	r1, #0
   13600:	mov	r2, r4
   13604:	b	13664 <__assert_fail@plt+0x1f94>
   13608:	ldr	r0, [r9, #24]
   1360c:	movw	r5, #62424	; 0xf3d8
   13610:	movt	r5, #2
   13614:	cmp	r0, #29
   13618:	beq	13690 <__assert_fail@plt+0x1fc0>
   1361c:	ldr	r1, [sp, #64]	; 0x40
   13620:	str	r0, [r1]
   13624:	ldr	r0, [sp, #64]	; 0x40
   13628:	movw	r1, #55240	; 0xd7c8
   1362c:	mov	r2, #5
   13630:	movt	r1, #1
   13634:	ldr	r4, [r0]
   13638:	mov	r0, #0
   1363c:	bl	11430 <dcgettext@plt>
   13640:	ldr	r2, [r9, #16]
   13644:	mov	r5, r0
   13648:	mov	r0, #0
   1364c:	mov	r1, #3
   13650:	bl	19730 <__assert_fail@plt+0x8060>
   13654:	mov	r3, r0
   13658:	mov	r0, #0
   1365c:	mov	r1, r4
   13660:	mov	r2, r5
   13664:	bl	1494c <__assert_fail@plt+0x327c>
   13668:	mov	r0, #29
   1366c:	movw	r5, #62424	; 0xf3d8
   13670:	movw	r4, #61768	; 0xf148
   13674:	str	r0, [r9, #24]
   13678:	mov	r0, #0
   1367c:	movt	r5, #2
   13680:	movt	r4, #2
   13684:	strb	r0, [r9, #1]
   13688:	mov	r0, #1
   1368c:	str	r0, [sp, #60]	; 0x3c
   13690:	cmp	r8, #0
   13694:	beq	135bc <__assert_fail@plt+0x1eec>
   13698:	b	13380 <__assert_fail@plt+0x1cb0>
   1369c:	subs	r6, r2, r0
   136a0:	sbc	r5, r3, r1
   136a4:	subs	r0, sl, r6
   136a8:	sbcs	r0, sl, r5
   136ac:	bge	136bc <__assert_fail@plt+0x1fec>
   136b0:	subs	r0, r7, r6
   136b4:	rscs	r0, r5, r7, asr #31
   136b8:	bge	136ec <__assert_fail@plt+0x201c>
   136bc:	ldr	r0, [r4]
   136c0:	cmp	r0, #1
   136c4:	beq	136ec <__assert_fail@plt+0x201c>
   136c8:	movw	r1, #55439	; 0xd88f
   136cc:	mov	r0, #0
   136d0:	mov	r2, #5
   136d4:	movt	r1, #1
   136d8:	bl	11430 <dcgettext@plt>
   136dc:	mov	r2, r0
   136e0:	mov	r0, #0
   136e4:	mov	r1, #0
   136e8:	bl	1494c <__assert_fail@plt+0x327c>
   136ec:	mov	r0, #1
   136f0:	mov	r2, r6
   136f4:	mov	r3, r5
   136f8:	str	r0, [sp]
   136fc:	mov	r0, #0
   13700:	bl	1149c <lseek64@plt>
   13704:	subs	r0, sl, r0
   13708:	movw	r5, #62424	; 0xf3d8
   1370c:	sbcs	r0, sl, r1
   13710:	movt	r5, #2
   13714:	blt	13690 <__assert_fail@plt+0x1fc0>
   13718:	ldr	r0, [sp, #64]	; 0x40
   1371c:	ldr	r0, [r0]
   13720:	cmp	r0, #0
   13724:	bne	13624 <__assert_fail@plt+0x1f54>
   13728:	movw	r1, #55486	; 0xd8be
   1372c:	mov	r0, #0
   13730:	mov	r2, #5
   13734:	movt	r1, #1
   13738:	bl	11430 <dcgettext@plt>
   1373c:	mov	r2, r0
   13740:	mov	r0, #0
   13744:	mov	r1, #0
   13748:	bl	1494c <__assert_fail@plt+0x327c>
   1374c:	b	13624 <__assert_fail@plt+0x1f54>
   13750:	movw	r6, #62304	; 0xf360
   13754:	mvn	sl, #0
   13758:	movw	r5, #62424	; 0xf3d8
   1375c:	movt	r6, #2
   13760:	movt	r5, #2
   13764:	ldrd	r0, [r6, #104]	; 0x68
   13768:	subs	r2, sl, r0
   1376c:	sbcs	r2, sl, r1
   13770:	bge	137c8 <__assert_fail@plt+0x20f8>
   13774:	cmn	r1, #1
   13778:	mov	r2, #0
   1377c:	mov	r3, #0
   13780:	asr	r7, r9, #31
   13784:	movwgt	r2, #1
   13788:	adds	r0, r0, r9
   1378c:	adc	r1, r1, r9, asr #31
   13790:	cmn	r1, #1
   13794:	movwgt	r3, #1
   13798:	subs	r3, r2, r3
   1379c:	movwne	r3, #1
   137a0:	cmn	r7, #1
   137a4:	mov	r7, #0
   137a8:	movwgt	r7, #1
   137ac:	sub	r2, r2, r7
   137b0:	clz	r2, r2
   137b4:	lsr	r2, r2, #5
   137b8:	ands	r2, r2, r3
   137bc:	movne	r1, sl
   137c0:	movne	r0, sl
   137c4:	strd	r0, [r6, #104]	; 0x68
   137c8:	ldrb	r0, [r6, #2]
   137cc:	movw	r4, #61768	; 0xf148
   137d0:	movt	r4, #2
   137d4:	cmp	r0, #1
   137d8:	bne	137ec <__assert_fail@plt+0x211c>
   137dc:	asr	r3, r9, #31
   137e0:	mov	r0, #0
   137e4:	mov	r2, r9
   137e8:	bl	14b2c <__assert_fail@plt+0x345c>
   137ec:	movw	r2, #62304	; 0xf360
   137f0:	movt	r2, #2
   137f4:	ldr	r6, [r2, #56]	; 0x38
   137f8:	cmp	r6, r9
   137fc:	ble	13824 <__assert_fail@plt+0x2154>
   13800:	ldrd	r0, [r5, #40]	; 0x28
   13804:	adds	r0, r0, #1
   13808:	adc	r1, r1, #0
   1380c:	strd	r0, [r5, #40]	; 0x28
   13810:	ldr	r1, [r2, #36]	; 0x24
   13814:	tst	r1, #1024	; 0x400
   13818:	bne	1387c <__assert_fail@plt+0x21ac>
   1381c:	mov	r6, r9
   13820:	b	1383c <__assert_fail@plt+0x216c>
   13824:	ldrd	r0, [r5, #32]
   13828:	mov	r6, r9
   1382c:	mov	r9, #0
   13830:	adds	r0, r0, #1
   13834:	adc	r1, r1, #0
   13838:	strd	r0, [r5, #32]
   1383c:	movw	r0, #62304	; 0xf360
   13840:	movt	r0, #2
   13844:	ldr	r7, [r0, #84]	; 0x54
   13848:	ldr	r0, [r0, #80]	; 0x50
   1384c:	cmp	r7, r0
   13850:	bne	138b8 <__assert_fail@plt+0x21e8>
   13854:	mov	r0, r7
   13858:	mov	r1, r6
   1385c:	bl	1619c <__assert_fail@plt+0x4acc>
   13860:	ldrd	r2, [r5, #72]	; 0x48
   13864:	adds	r2, r2, r0
   13868:	adc	r3, r3, r0, asr #31
   1386c:	cmp	r0, r6
   13870:	strd	r2, [r5, #72]	; 0x48
   13874:	beq	13354 <__assert_fail@plt+0x1c84>
   13878:	b	14014 <__assert_fail@plt+0x2944>
   1387c:	tst	r1, #256	; 0x100
   13880:	bne	1383c <__assert_fail@plt+0x216c>
   13884:	movw	r0, #62304	; 0xf360
   13888:	ands	r1, r1, #24
   1388c:	sub	r2, r6, r9
   13890:	movt	r0, #2
   13894:	movwne	r1, #32
   13898:	mov	r4, r0
   1389c:	ldr	r0, [r0, #84]	; 0x54
   138a0:	add	r0, r0, r9
   138a4:	bl	115c8 <memset@plt>
   138a8:	ldr	r6, [r4, #56]	; 0x38
   138ac:	movw	r4, #61768	; 0xf148
   138b0:	movt	r4, #2
   138b4:	b	1383c <__assert_fail@plt+0x216c>
   138b8:	movw	r0, #62304	; 0xf360
   138bc:	cmp	r6, #0
   138c0:	movt	r0, #2
   138c4:	beq	1390c <__assert_fail@plt+0x223c>
   138c8:	ldrb	r0, [r0, #7]
   138cc:	cmp	r0, #0
   138d0:	beq	13904 <__assert_fail@plt+0x2234>
   138d4:	movw	r2, #61920	; 0xf1e0
   138d8:	mov	r0, r6
   138dc:	movt	r2, #2
   138e0:	ldrb	r1, [r7]
   138e4:	subs	r0, r0, #1
   138e8:	ldrb	r1, [r2, r1]
   138ec:	strb	r1, [r7], #1
   138f0:	bne	138e0 <__assert_fail@plt+0x2210>
   138f4:	movw	r0, #62304	; 0xf360
   138f8:	movt	r0, #2
   138fc:	ldr	r7, [r0, #84]	; 0x54
   13900:	b	1390c <__assert_fail@plt+0x223c>
   13904:	movw	r0, #62304	; 0xf360
   13908:	movt	r0, #2
   1390c:	ldr	r0, [r0, #36]	; 0x24
   13910:	mov	r1, #0
   13914:	ands	r2, r0, #128	; 0x80
   13918:	moveq	r1, r6
   1391c:	cmp	r6, #0
   13920:	beq	13a04 <__assert_fail@plt+0x2334>
   13924:	cmp	r2, #0
   13928:	beq	13a04 <__assert_fail@plt+0x2334>
   1392c:	ldr	r3, [sp, #56]	; 0x38
   13930:	and	r2, r6, #1
   13934:	mvn	r1, #0
   13938:	cmp	r2, r3, lsr #31
   1393c:	subeq	r6, r6, #1
   13940:	ldrbeq	r1, [r7, r6]
   13944:	cmp	r6, #2
   13948:	mov	r2, r6
   1394c:	blt	1396c <__assert_fail@plt+0x229c>
   13950:	add	r3, r7, r2
   13954:	cmp	r2, #3
   13958:	ldrb	r3, [r3, #-2]
   1395c:	strb	r3, [r7, r2]
   13960:	sub	r3, r2, #2
   13964:	mov	r2, r3
   13968:	bgt	13950 <__assert_fail@plt+0x2280>
   1396c:	ldr	r2, [sp, #56]	; 0x38
   13970:	str	r1, [sp, #56]	; 0x38
   13974:	cmp	r2, #0
   13978:	strbge	r2, [r7, #1]
   1397c:	addge	r6, r6, #1
   13980:	addlt	r7, r7, #1
   13984:	tst	r0, #8
   13988:	bne	13a10 <__assert_fail@plt+0x2340>
   1398c:	tst	r0, #16
   13990:	bne	13b54 <__assert_fail@plt+0x2484>
   13994:	movw	r0, #62304	; 0xf360
   13998:	movt	r0, #2
   1399c:	mov	r8, r0
   139a0:	ldr	r0, [r0, #40]	; 0x28
   139a4:	ldr	r4, [r8, #88]	; 0x58
   139a8:	ldr	r1, [r8, #80]	; 0x50
   139ac:	sub	r5, r0, r4
   139b0:	add	r0, r1, r4
   139b4:	mov	r1, r7
   139b8:	cmp	r6, r5
   139bc:	movlt	r5, r6
   139c0:	mov	r2, r5
   139c4:	bl	113f4 <memcpy@plt>
   139c8:	add	r0, r5, r4
   139cc:	sub	r6, r6, r5
   139d0:	str	r0, [r8, #88]	; 0x58
   139d4:	ldr	r1, [r8, #40]	; 0x28
   139d8:	cmp	r0, r1
   139dc:	blge	166b8 <__assert_fail@plt+0x4fe8>
   139e0:	add	r7, r7, r5
   139e4:	cmp	r6, #0
   139e8:	bne	13994 <__assert_fail@plt+0x22c4>
   139ec:	movw	r5, #62424	; 0xf3d8
   139f0:	movw	r4, #61768	; 0xf148
   139f4:	mov	r8, r9
   139f8:	movt	r5, #2
   139fc:	movt	r4, #2
   13a00:	b	13380 <__assert_fail@plt+0x1cb0>
   13a04:	mov	r6, r1
   13a08:	tst	r0, #8
   13a0c:	beq	1398c <__assert_fail@plt+0x22bc>
   13a10:	cmp	r6, #0
   13a14:	mov	r8, r9
   13a18:	beq	13380 <__assert_fail@plt+0x1cb0>
   13a1c:	movw	r1, #62304	; 0xf360
   13a20:	movt	r1, #2
   13a24:	ldr	r5, [r1, #92]	; 0x5c
   13a28:	ldrb	r0, [r1, #8]
   13a2c:	ldr	r1, [r1, #60]	; 0x3c
   13a30:	mov	r2, #10
   13a34:	cmp	r0, #0
   13a38:	ldrb	r0, [r7]
   13a3c:	movwne	r2, #37	; 0x25
   13a40:	cmp	r2, r0
   13a44:	bne	13ab0 <__assert_fail@plt+0x23e0>
   13a48:	cmp	r5, r1
   13a4c:	bge	13ad8 <__assert_fail@plt+0x2408>
   13a50:	movw	r4, #62304	; 0xf360
   13a54:	movt	r4, #2
   13a58:	ldr	r0, [r4, #88]	; 0x58
   13a5c:	add	r1, r0, #1
   13a60:	str	r1, [r4, #88]	; 0x58
   13a64:	ldrb	r2, [r4, #9]
   13a68:	ldr	r3, [r4, #80]	; 0x50
   13a6c:	cmp	r2, #0
   13a70:	mov	r2, #32
   13a74:	movwne	r2, #64	; 0x40
   13a78:	strb	r2, [r3, r0]
   13a7c:	ldr	r0, [r4, #40]	; 0x28
   13a80:	cmp	r1, r0
   13a84:	blge	166b8 <__assert_fail@plt+0x4fe8>
   13a88:	movw	r4, #62304	; 0xf360
   13a8c:	add	r5, r5, #1
   13a90:	movt	r4, #2
   13a94:	ldr	r0, [r4, #60]	; 0x3c
   13a98:	cmp	r5, r0
   13a9c:	blt	13a58 <__assert_fail@plt+0x2388>
   13aa0:	movw	r4, #61768	; 0xf148
   13aa4:	mov	r5, #0
   13aa8:	movt	r4, #2
   13aac:	b	13b2c <__assert_fail@plt+0x245c>
   13ab0:	cmp	r5, r1
   13ab4:	bne	13ae0 <__assert_fail@plt+0x2410>
   13ab8:	movw	r0, #62424	; 0xf3d8
   13abc:	movt	r0, #2
   13ac0:	mov	r2, r0
   13ac4:	ldrd	r0, [r0, #64]	; 0x40
   13ac8:	adds	r0, r0, #1
   13acc:	adc	r1, r1, #0
   13ad0:	strd	r0, [r2, #64]	; 0x40
   13ad4:	b	13b28 <__assert_fail@plt+0x2458>
   13ad8:	mov	r5, #0
   13adc:	b	13b2c <__assert_fail@plt+0x245c>
   13ae0:	bge	13b28 <__assert_fail@plt+0x2458>
   13ae4:	movw	r1, #62304	; 0xf360
   13ae8:	movt	r1, #2
   13aec:	mov	r4, r1
   13af0:	ldr	r1, [r1, #80]	; 0x50
   13af4:	ldr	r2, [r4, #88]	; 0x58
   13af8:	add	r3, r2, #1
   13afc:	str	r3, [r4, #88]	; 0x58
   13b00:	strb	r0, [r1, r2]
   13b04:	ldr	r0, [r4, #40]	; 0x28
   13b08:	movw	r4, #61768	; 0xf148
   13b0c:	movt	r4, #2
   13b10:	cmp	r3, r0
   13b14:	blt	13b28 <__assert_fail@plt+0x2458>
   13b18:	bl	166b8 <__assert_fail@plt+0x4fe8>
   13b1c:	movw	r0, #62304	; 0xf360
   13b20:	movt	r0, #2
   13b24:	ldr	r5, [r0, #92]	; 0x5c
   13b28:	add	r5, r5, #1
   13b2c:	movw	r1, #62304	; 0xf360
   13b30:	add	r7, r7, #1
   13b34:	subs	r6, r6, #1
   13b38:	movt	r1, #2
   13b3c:	str	r5, [r1, #92]	; 0x5c
   13b40:	bne	13a28 <__assert_fail@plt+0x2358>
   13b44:	movw	r5, #62424	; 0xf3d8
   13b48:	mov	r8, r9
   13b4c:	movt	r5, #2
   13b50:	b	13380 <__assert_fail@plt+0x1cb0>
   13b54:	mov	r0, r7
   13b58:	mov	r1, r6
   13b5c:	bl	16568 <__assert_fail@plt+0x4e98>
   13b60:	mov	r8, r9
   13b64:	b	13380 <__assert_fail@plt+0x1cb0>
   13b68:	ldr	r8, [sp, #60]	; 0x3c
   13b6c:	movw	r4, #61768	; 0xf148
   13b70:	mov	r9, sl
   13b74:	mvn	sl, #0
   13b78:	movt	r4, #2
   13b7c:	ldr	r3, [sp, #56]	; 0x38
   13b80:	cmp	r3, #0
   13b84:	blt	13c84 <__assert_fail@plt+0x25b4>
   13b88:	ldr	r0, [r9, #36]	; 0x24
   13b8c:	strb	r3, [sp, #72]	; 0x48
   13b90:	tst	r0, #8
   13b94:	bne	13d6c <__assert_fail@plt+0x269c>
   13b98:	tst	r0, #16
   13b9c:	bne	13eac <__assert_fail@plt+0x27dc>
   13ba0:	ldr	r1, [r9, #88]	; 0x58
   13ba4:	ldr	r0, [r9, #80]	; 0x50
   13ba8:	add	r2, r1, #1
   13bac:	str	r2, [r9, #88]	; 0x58
   13bb0:	strb	r3, [r0, r1]
   13bb4:	ldr	r0, [r9, #40]	; 0x28
   13bb8:	cmp	r2, r0
   13bbc:	blge	166b8 <__assert_fail@plt+0x4fe8>
   13bc0:	ldr	r0, [r9, #36]	; 0x24
   13bc4:	ldr	r5, [r9, #92]	; 0x5c
   13bc8:	tst	r0, #8
   13bcc:	beq	13c94 <__assert_fail@plt+0x25c4>
   13bd0:	cmp	r5, #1
   13bd4:	blt	13c94 <__assert_fail@plt+0x25c4>
   13bd8:	ldr	r1, [r9, #60]	; 0x3c
   13bdc:	cmp	r5, r1
   13be0:	bge	13ca0 <__assert_fail@plt+0x25d0>
   13be4:	ldr	r0, [r9, #88]	; 0x58
   13be8:	add	r1, r0, #1
   13bec:	str	r1, [r9, #88]	; 0x58
   13bf0:	ldrb	r2, [r9, #9]
   13bf4:	ldr	r3, [r9, #80]	; 0x50
   13bf8:	cmp	r2, #0
   13bfc:	mov	r2, #32
   13c00:	movwne	r2, #64	; 0x40
   13c04:	strb	r2, [r3, r0]
   13c08:	ldr	r0, [r9, #40]	; 0x28
   13c0c:	cmp	r1, r0
   13c10:	blge	166b8 <__assert_fail@plt+0x4fe8>
   13c14:	ldr	r0, [r9, #60]	; 0x3c
   13c18:	add	r5, r5, #1
   13c1c:	cmp	r5, r0
   13c20:	blt	13be4 <__assert_fail@plt+0x2514>
   13c24:	ldr	r5, [r9, #92]	; 0x5c
   13c28:	cmp	r5, #0
   13c2c:	bne	13c9c <__assert_fail@plt+0x25cc>
   13c30:	b	13cdc <__assert_fail@plt+0x260c>
   13c34:	ldrb	r0, [r9, #2]
   13c38:	ldrb	r2, [r9, #4]
   13c3c:	ldrb	r1, [r9, #3]
   13c40:	ldr	r8, [sp, #60]	; 0x3c
   13c44:	movw	r4, #61768	; 0xf148
   13c48:	movt	r4, #2
   13c4c:	orr	r0, r2, r0
   13c50:	cmp	r1, #1
   13c54:	strb	r0, [r9, #4]
   13c58:	mov	r0, #0
   13c5c:	moveq	r1, #1
   13c60:	ldrbeq	r0, [r9, #37]	; 0x25
   13c64:	andeq	r0, r0, #2
   13c68:	eoreq	r0, r1, r0, lsr #1
   13c6c:	ldrb	r1, [r9, #5]
   13c70:	orr	r0, r1, r0
   13c74:	strb	r0, [r9, #5]
   13c78:	ldr	r3, [sp, #56]	; 0x38
   13c7c:	cmp	r3, #0
   13c80:	bge	13b88 <__assert_fail@plt+0x24b8>
   13c84:	ldr	r0, [r9, #36]	; 0x24
   13c88:	ldr	r5, [r9, #92]	; 0x5c
   13c8c:	tst	r0, #8
   13c90:	bne	13bd0 <__assert_fail@plt+0x2500>
   13c94:	cmp	r5, #0
   13c98:	beq	13cdc <__assert_fail@plt+0x260c>
   13c9c:	ldr	r0, [r9, #36]	; 0x24
   13ca0:	tst	r0, #16
   13ca4:	beq	13cdc <__assert_fail@plt+0x260c>
   13ca8:	ldr	r0, [r9, #88]	; 0x58
   13cac:	mov	r3, #10
   13cb0:	add	r1, r0, #1
   13cb4:	str	r1, [r9, #88]	; 0x58
   13cb8:	ldrb	r2, [r9, #8]
   13cbc:	cmp	r2, #0
   13cc0:	ldr	r2, [r9, #80]	; 0x50
   13cc4:	movwne	r3, #37	; 0x25
   13cc8:	strb	r3, [r2, r0]
   13ccc:	ldr	r0, [r9, #40]	; 0x28
   13cd0:	cmp	r1, r0
   13cd4:	blt	13ce0 <__assert_fail@plt+0x2610>
   13cd8:	bl	166b8 <__assert_fail@plt+0x4fe8>
   13cdc:	ldr	r1, [r9, #88]	; 0x58
   13ce0:	movw	r5, #62424	; 0xf3d8
   13ce4:	cmp	r1, #0
   13ce8:	movt	r5, #2
   13cec:	beq	13d2c <__assert_fail@plt+0x265c>
   13cf0:	ldr	r0, [r9, #80]	; 0x50
   13cf4:	bl	1619c <__assert_fail@plt+0x4acc>
   13cf8:	ldrd	r2, [r5, #72]	; 0x48
   13cfc:	adds	r2, r2, r0
   13d00:	adc	r3, r3, r0, asr #31
   13d04:	cmp	r0, #0
   13d08:	strd	r2, [r5, #72]	; 0x48
   13d0c:	beq	13d20 <__assert_fail@plt+0x2650>
   13d10:	ldrd	r2, [r5, #56]	; 0x38
   13d14:	adds	r2, r2, #1
   13d18:	adc	r3, r3, #0
   13d1c:	strd	r2, [r5, #56]	; 0x38
   13d20:	ldr	r1, [r9, #88]	; 0x58
   13d24:	cmp	r0, r1
   13d28:	bne	13de0 <__assert_fail@plt+0x2710>
   13d2c:	ldrb	r0, [r9, #10]
   13d30:	cmp	r0, #1
   13d34:	bne	140a0 <__assert_fail@plt+0x29d0>
   13d38:	add	r6, sp, #72	; 0x48
   13d3c:	bl	1545c <__assert_fail@plt+0x3d8c>
   13d40:	mov	r0, #3
   13d44:	mov	r1, #1
   13d48:	mov	r2, r6
   13d4c:	bl	11478 <__fxstat64@plt>
   13d50:	cmn	r0, #1
   13d54:	bgt	13e4c <__assert_fail@plt+0x277c>
   13d58:	ldr	r0, [sp, #64]	; 0x40
   13d5c:	ldr	r5, [r0]
   13d60:	cmp	r5, #4
   13d64:	beq	13d3c <__assert_fail@plt+0x266c>
   13d68:	b	13e5c <__assert_fail@plt+0x278c>
   13d6c:	ldrb	r0, [r9, #8]
   13d70:	ldr	r5, [r9, #92]	; 0x5c
   13d74:	mov	r1, #10
   13d78:	uxtb	r2, r3
   13d7c:	cmp	r0, #0
   13d80:	ldr	r0, [r9, #60]	; 0x3c
   13d84:	movwne	r1, #37	; 0x25
   13d88:	cmp	r1, r2
   13d8c:	bne	13ecc <__assert_fail@plt+0x27fc>
   13d90:	mov	r6, #0
   13d94:	cmp	r5, r0
   13d98:	bge	13f28 <__assert_fail@plt+0x2858>
   13d9c:	ldr	r0, [r9, #88]	; 0x58
   13da0:	add	r1, r0, #1
   13da4:	str	r1, [r9, #88]	; 0x58
   13da8:	ldrb	r2, [r9, #9]
   13dac:	ldr	r3, [r9, #80]	; 0x50
   13db0:	cmp	r2, #0
   13db4:	mov	r2, #32
   13db8:	movwne	r2, #64	; 0x40
   13dbc:	strb	r2, [r3, r0]
   13dc0:	ldr	r0, [r9, #40]	; 0x28
   13dc4:	cmp	r1, r0
   13dc8:	blge	166b8 <__assert_fail@plt+0x4fe8>
   13dcc:	ldr	r0, [r9, #60]	; 0x3c
   13dd0:	add	r5, r5, #1
   13dd4:	cmp	r5, r0
   13dd8:	blt	13d9c <__assert_fail@plt+0x26cc>
   13ddc:	b	13f28 <__assert_fail@plt+0x2858>
   13de0:	ldr	r0, [sp, #64]	; 0x40
   13de4:	movw	r1, #55207	; 0xd7a7
   13de8:	mov	r2, #5
   13dec:	movt	r1, #1
   13df0:	ldr	r4, [r0]
   13df4:	mov	r0, #0
   13df8:	bl	11430 <dcgettext@plt>
   13dfc:	mov	r5, r0
   13e00:	ldr	r1, [r9, #28]
   13e04:	mov	r0, #4
   13e08:	bl	194b4 <__assert_fail@plt+0x7de4>
   13e0c:	mov	r3, r0
   13e10:	mov	r1, r4
   13e14:	movw	r4, #61768	; 0xf148
   13e18:	mov	r2, r5
   13e1c:	movw	r5, #62424	; 0xf3d8
   13e20:	mov	r0, #0
   13e24:	movt	r4, #2
   13e28:	movt	r5, #2
   13e2c:	bl	1494c <__assert_fail@plt+0x327c>
   13e30:	mov	r8, #1
   13e34:	b	140e4 <__assert_fail@plt+0x2a14>
   13e38:	mov	r8, #1
   13e3c:	ldr	r3, [sp, #56]	; 0x38
   13e40:	cmp	r3, #0
   13e44:	bge	13b88 <__assert_fail@plt+0x24b8>
   13e48:	b	13c84 <__assert_fail@plt+0x25b4>
   13e4c:	cmp	r0, #0
   13e50:	beq	13f40 <__assert_fail@plt+0x2870>
   13e54:	ldr	r0, [sp, #64]	; 0x40
   13e58:	ldr	r5, [r0]
   13e5c:	movw	r1, #53816	; 0xd238
   13e60:	mov	r0, #0
   13e64:	mov	r2, #5
   13e68:	movt	r1, #1
   13e6c:	bl	11430 <dcgettext@plt>
   13e70:	ldr	r1, [r9, #28]
   13e74:	mov	r4, r0
   13e78:	mov	r0, #4
   13e7c:	bl	194b4 <__assert_fail@plt+0x7de4>
   13e80:	mov	r3, r0
   13e84:	mov	r2, r4
   13e88:	movw	r4, #61768	; 0xf148
   13e8c:	mov	r0, #0
   13e90:	mov	r1, r5
   13e94:	movt	r4, #2
   13e98:	bl	1494c <__assert_fail@plt+0x327c>
   13e9c:	movw	r5, #62424	; 0xf3d8
   13ea0:	mov	r8, #1
   13ea4:	movt	r5, #2
   13ea8:	b	140e4 <__assert_fail@plt+0x2a14>
   13eac:	add	r0, sp, #72	; 0x48
   13eb0:	mov	r1, #1
   13eb4:	bl	16568 <__assert_fail@plt+0x4e98>
   13eb8:	ldr	r0, [r9, #36]	; 0x24
   13ebc:	ldr	r5, [r9, #92]	; 0x5c
   13ec0:	tst	r0, #8
   13ec4:	bne	13bd0 <__assert_fail@plt+0x2500>
   13ec8:	b	13c94 <__assert_fail@plt+0x25c4>
   13ecc:	cmp	r5, r0
   13ed0:	bne	13ef4 <__assert_fail@plt+0x2824>
   13ed4:	movw	r0, #62424	; 0xf3d8
   13ed8:	movt	r0, #2
   13edc:	mov	r2, r0
   13ee0:	ldrd	r0, [r0, #64]	; 0x40
   13ee4:	adds	r0, r0, #1
   13ee8:	adc	r1, r1, #0
   13eec:	strd	r0, [r2, #64]	; 0x40
   13ef0:	b	13f24 <__assert_fail@plt+0x2854>
   13ef4:	bge	13f24 <__assert_fail@plt+0x2854>
   13ef8:	ldr	r1, [r9, #88]	; 0x58
   13efc:	ldr	r0, [r9, #80]	; 0x50
   13f00:	ldr	r3, [sp, #56]	; 0x38
   13f04:	add	r2, r1, #1
   13f08:	str	r2, [r9, #88]	; 0x58
   13f0c:	strb	r3, [r0, r1]
   13f10:	ldr	r0, [r9, #40]	; 0x28
   13f14:	cmp	r2, r0
   13f18:	blt	13f24 <__assert_fail@plt+0x2854>
   13f1c:	bl	166b8 <__assert_fail@plt+0x4fe8>
   13f20:	ldr	r5, [r9, #92]	; 0x5c
   13f24:	add	r6, r5, #1
   13f28:	str	r6, [r9, #92]	; 0x5c
   13f2c:	ldr	r0, [r9, #36]	; 0x24
   13f30:	ldr	r5, [r9, #92]	; 0x5c
   13f34:	tst	r0, #8
   13f38:	bne	13bd0 <__assert_fail@plt+0x2500>
   13f3c:	b	13c94 <__assert_fail@plt+0x25c4>
   13f40:	ldr	r0, [sp, #88]	; 0x58
   13f44:	and	r0, r0, #61440	; 0xf000
   13f48:	cmp	r0, #32768	; 0x8000
   13f4c:	bne	14098 <__assert_fail@plt+0x29c8>
   13f50:	mov	r0, #1
   13f54:	mov	r2, #0
   13f58:	mov	r3, #0
   13f5c:	str	r0, [sp]
   13f60:	mov	r0, #1
   13f64:	bl	1149c <lseek64@plt>
   13f68:	mov	r6, r0
   13f6c:	subs	r0, sl, r0
   13f70:	sbcs	r0, sl, r1
   13f74:	bge	14098 <__assert_fail@plt+0x29c8>
   13f78:	ldr	r0, [sp, #120]	; 0x78
   13f7c:	mov	r7, r1
   13f80:	ldr	r1, [sp, #124]	; 0x7c
   13f84:	subs	r0, r0, r6
   13f88:	sbcs	r0, r1, r7
   13f8c:	bge	14098 <__assert_fail@plt+0x29c8>
   13f90:	bl	1545c <__assert_fail@plt+0x3d8c>
   13f94:	mov	r0, #1
   13f98:	mov	r2, r6
   13f9c:	mov	r3, r7
   13fa0:	bl	11418 <ftruncate64@plt>
   13fa4:	cmn	r0, #1
   13fa8:	bgt	14040 <__assert_fail@plt+0x2970>
   13fac:	ldr	r0, [sp, #64]	; 0x40
   13fb0:	ldr	r5, [r0]
   13fb4:	cmp	r5, #4
   13fb8:	beq	13f90 <__assert_fail@plt+0x28c0>
   13fbc:	b	14050 <__assert_fail@plt+0x2980>
   13fc0:	ldr	r0, [sp, #88]	; 0x58
   13fc4:	and	r0, r0, #61440	; 0xf000
   13fc8:	cmp	r0, #32768	; 0x8000
   13fcc:	cmpne	r0, #16384	; 0x4000
   13fd0:	bne	12fc8 <__assert_fail@plt+0x18f8>
   13fd4:	movw	r1, #53832	; 0xd248
   13fd8:	mov	r0, #0
   13fdc:	mov	r2, #5
   13fe0:	movt	r1, #1
   13fe4:	bl	11430 <dcgettext@plt>
   13fe8:	ldr	r1, [r8, #28]
   13fec:	mov	r4, r0
   13ff0:	mov	r0, #4
   13ff4:	bl	194b4 <__assert_fail@plt+0x7de4>
   13ff8:	stm	sp, {r6, r9}
   13ffc:	str	r0, [sp, #8]
   14000:	mov	r0, #0
   14004:	mov	r1, r5
   14008:	mov	r2, r4
   1400c:	bl	1494c <__assert_fail@plt+0x327c>
   14010:	b	12fc8 <__assert_fail@plt+0x18f8>
   14014:	ldr	r0, [sp, #64]	; 0x40
   14018:	movw	r1, #55207	; 0xd7a7
   1401c:	mov	r2, #5
   14020:	movt	r1, #1
   14024:	ldr	r4, [r0]
   14028:	mov	r0, #0
   1402c:	bl	11430 <dcgettext@plt>
   14030:	movw	r9, #62304	; 0xf360
   14034:	mov	r5, r0
   14038:	movt	r9, #2
   1403c:	b	13e00 <__assert_fail@plt+0x2730>
   14040:	cmp	r0, #0
   14044:	beq	14098 <__assert_fail@plt+0x29c8>
   14048:	ldr	r0, [sp, #64]	; 0x40
   1404c:	ldr	r5, [r0]
   14050:	movw	r1, #53832	; 0xd248
   14054:	mov	r0, #0
   14058:	mov	r2, #5
   1405c:	movt	r1, #1
   14060:	bl	11430 <dcgettext@plt>
   14064:	ldr	r1, [r9, #28]
   14068:	mov	r4, r0
   1406c:	mov	r0, #4
   14070:	bl	194b4 <__assert_fail@plt+0x7de4>
   14074:	stm	sp, {r6, r7}
   14078:	str	r0, [sp, #8]
   1407c:	mov	r2, r4
   14080:	movw	r4, #61768	; 0xf148
   14084:	mov	r0, #0
   14088:	mov	r1, r5
   1408c:	movt	r4, #2
   14090:	bl	1494c <__assert_fail@plt+0x327c>
   14094:	b	13e9c <__assert_fail@plt+0x27cc>
   14098:	movw	r5, #62424	; 0xf3d8
   1409c:	movt	r5, #2
   140a0:	ldr	r0, [r9, #36]	; 0x24
   140a4:	tst	r0, #49152	; 0xc000
   140a8:	beq	140e4 <__assert_fail@plt+0x2a14>
   140ac:	ldr	r0, [r4]
   140b0:	cmp	r0, #4
   140b4:	bne	140e4 <__assert_fail@plt+0x2a14>
   140b8:	ldrd	r0, [r4, #16]
   140bc:	subs	r2, sl, r0
   140c0:	sbcs	r2, sl, r1
   140c4:	bge	140e4 <__assert_fail@plt+0x2a14>
   140c8:	ldrd	r2, [r5, #72]	; 0x48
   140cc:	subs	r0, r0, r2
   140d0:	sbcs	r0, r1, r3
   140d4:	bge	140e4 <__assert_fail@plt+0x2a14>
   140d8:	mov	r0, #0
   140dc:	mov	r1, #0
   140e0:	bl	15780 <__assert_fail@plt+0x40b0>
   140e4:	bl	149e8 <__assert_fail@plt+0x3318>
   140e8:	cmp	r0, #0
   140ec:	ldrb	r1, [r9, #2]
   140f0:	movne	r8, r0
   140f4:	ldr	r0, [r4, #8]
   140f8:	ldr	r3, [r4, #12]
   140fc:	orrs	r0, r0, r3
   14100:	ldreq	r0, [r9, #44]	; 0x2c
   14104:	cmpeq	r0, #0
   14108:	beq	141e0 <__assert_fail@plt+0x2b10>
   1410c:	ldrb	r0, [r9, #4]
   14110:	cmp	r0, #0
   14114:	bne	14120 <__assert_fail@plt+0x2a50>
   14118:	eors	r1, r1, #1
   1411c:	bne	142c4 <__assert_fail@plt+0x2bf4>
   14120:	ldr	r2, [r5, #80]	; 0x50
   14124:	ldr	r1, [r5, #84]	; 0x54
   14128:	cmp	r0, #0
   1412c:	orrseq	r3, r2, r1
   14130:	beq	142c4 <__assert_fail@plt+0x2bf4>
   14134:	ldrb	r3, [r9, #1]
   14138:	cmp	r3, #0
   1413c:	beq	142b8 <__assert_fail@plt+0x2be8>
   14140:	ldr	r4, [r9, #104]	; 0x68
   14144:	ldr	r3, [r9, #108]	; 0x6c
   14148:	subs	r7, sl, r4
   1414c:	sbcs	r7, sl, r3
   14150:	bge	142c4 <__assert_fail@plt+0x2bf4>
   14154:	orrs	r7, r2, r1
   14158:	mov	r5, r2
   1415c:	str	r8, [sp, #60]	; 0x3c
   14160:	movwne	r7, #1
   14164:	cmp	r0, #0
   14168:	movwne	r0, #1
   1416c:	ands	r0, r0, r7
   14170:	mov	r7, r1
   14174:	movwne	r5, #0
   14178:	movwne	r7, #0
   1417c:	subs	r4, r4, r5
   14180:	sbc	r3, r3, r7
   14184:	subs	r6, r4, r2
   14188:	sbc	r8, r3, r1
   1418c:	cmp	r0, #0
   14190:	moveq	r6, r4
   14194:	moveq	r8, r3
   14198:	orrs	r0, r5, r7
   1419c:	bne	141bc <__assert_fail@plt+0x2aec>
   141a0:	ldr	r2, [r9, #12]
   141a4:	mov	r0, r6
   141a8:	mov	r1, r8
   141ac:	asr	r3, r2, #31
   141b0:	bl	1c188 <__assert_fail@plt+0xaab8>
   141b4:	subs	r6, r6, r2
   141b8:	sbc	r8, r8, r3
   141bc:	mov	r0, #4
   141c0:	stm	sp, {r5, r7}
   141c4:	mov	r2, r6
   141c8:	mov	r3, r8
   141cc:	str	r0, [sp, #8]
   141d0:	mov	r0, #0
   141d4:	bl	11394 <posix_fadvise64@plt>
   141d8:	ldr	r8, [sp, #60]	; 0x3c
   141dc:	b	142c4 <__assert_fail@plt+0x2bf4>
   141e0:	cmp	r1, #0
   141e4:	beq	14424 <__assert_fail@plt+0x2d54>
   141e8:	ldrb	r2, [r9, #4]
   141ec:	ldrd	r0, [r5, #80]	; 0x50
   141f0:	cmp	r2, #0
   141f4:	orrseq	r3, r0, r1
   141f8:	beq	14424 <__assert_fail@plt+0x2d54>
   141fc:	ldrb	r3, [r9, #1]
   14200:	cmp	r3, #0
   14204:	beq	143c8 <__assert_fail@plt+0x2cf8>
   14208:	ldr	r4, [r9, #104]	; 0x68
   1420c:	ldr	r3, [r9, #108]	; 0x6c
   14210:	subs	r7, sl, r4
   14214:	sbcs	r7, sl, r3
   14218:	bge	143d4 <__assert_fail@plt+0x2d04>
   1421c:	orrs	r7, r0, r1
   14220:	mov	r5, r0
   14224:	str	r8, [sp, #60]	; 0x3c
   14228:	movwne	r7, #1
   1422c:	cmp	r2, #0
   14230:	movwne	r2, #1
   14234:	ands	r2, r2, r7
   14238:	mov	r7, r1
   1423c:	movwne	r5, #0
   14240:	movwne	r7, #0
   14244:	subs	r4, r4, r5
   14248:	sbc	r3, r3, r7
   1424c:	subs	r8, r4, r0
   14250:	sbc	r6, r3, r1
   14254:	cmp	r2, #0
   14258:	moveq	r8, r4
   1425c:	moveq	r6, r3
   14260:	orrs	r0, r5, r7
   14264:	bne	14284 <__assert_fail@plt+0x2bb4>
   14268:	ldr	r2, [r9, #12]
   1426c:	mov	r0, r8
   14270:	mov	r1, r6
   14274:	asr	r3, r2, #31
   14278:	bl	1c188 <__assert_fail@plt+0xaab8>
   1427c:	subs	r8, r8, r2
   14280:	sbc	r6, r6, r3
   14284:	mov	r0, #4
   14288:	stm	sp, {r5, r7}
   1428c:	mov	r2, r8
   14290:	mov	r3, r6
   14294:	str	r0, [sp, #8]
   14298:	mov	r0, #0
   1429c:	bl	11394 <posix_fadvise64@plt>
   142a0:	ldr	r8, [sp, #60]	; 0x3c
   142a4:	movw	r5, #62424	; 0xf3d8
   142a8:	cmn	r0, #1
   142ac:	movt	r5, #2
   142b0:	bne	14424 <__assert_fail@plt+0x2d54>
   142b4:	b	143d4 <__assert_fail@plt+0x2d04>
   142b8:	ldr	r1, [sp, #64]	; 0x40
   142bc:	mov	r0, #29
   142c0:	str	r0, [r1]
   142c4:	ldrb	r5, [r9, #5]
   142c8:	cmp	r5, #0
   142cc:	ldrbeq	r0, [r9, #3]
   142d0:	cmpeq	r0, #0
   142d4:	beq	14578 <__assert_fail@plt+0x2ea8>
   142d8:	movw	r0, #62424	; 0xf3d8
   142dc:	cmp	r5, #0
   142e0:	movt	r0, #2
   142e4:	ldrd	r6, [r0, #88]	; 0x58
   142e8:	orrseq	r0, r6, r7
   142ec:	beq	14578 <__assert_fail@plt+0x2ea8>
   142f0:	movw	r4, #61768	; 0xf148
   142f4:	movt	r4, #2
   142f8:	ldrd	r0, [r4, #24]
   142fc:	eor	r2, r1, sl
   14300:	eor	r3, r0, sl
   14304:	orrs	r2, r3, r2
   14308:	beq	14578 <__assert_fail@plt+0x2ea8>
   1430c:	cmn	r1, #1
   14310:	bgt	1433c <__assert_fail@plt+0x2c6c>
   14314:	mov	r0, #1
   14318:	mov	r2, #0
   1431c:	mov	r3, #0
   14320:	str	r0, [sp]
   14324:	mov	r0, #1
   14328:	bl	1149c <lseek64@plt>
   1432c:	subs	r2, sl, r0
   14330:	strd	r0, [r4, #24]
   14334:	sbcs	r2, sl, r1
   14338:	bge	14578 <__assert_fail@plt+0x2ea8>
   1433c:	orrs	r2, r6, r7
   14340:	mov	r4, r8
   14344:	mov	r8, r7
   14348:	movwne	r2, #1
   1434c:	cmp	r5, #0
   14350:	movwne	r5, #1
   14354:	ands	r2, r5, r2
   14358:	mov	r5, r6
   1435c:	movwne	r5, #0
   14360:	movwne	r8, #0
   14364:	subs	r0, r0, r5
   14368:	sbc	r1, r1, r8
   1436c:	subs	r6, r0, r6
   14370:	sbc	r7, r1, r7
   14374:	cmp	r2, #0
   14378:	moveq	r6, r0
   1437c:	moveq	r7, r1
   14380:	orrs	r0, r5, r8
   14384:	bne	143a4 <__assert_fail@plt+0x2cd4>
   14388:	ldr	r2, [r9, #12]
   1438c:	mov	r0, r6
   14390:	mov	r1, r7
   14394:	asr	r3, r2, #31
   14398:	bl	1c188 <__assert_fail@plt+0xaab8>
   1439c:	subs	r6, r6, r2
   143a0:	sbc	r7, r7, r3
   143a4:	mov	r0, #4
   143a8:	stm	sp, {r5, r8}
   143ac:	mov	r2, r6
   143b0:	mov	r3, r7
   143b4:	str	r0, [sp, #8]
   143b8:	mov	r0, #1
   143bc:	bl	11394 <posix_fadvise64@plt>
   143c0:	mov	r8, r4
   143c4:	b	14578 <__assert_fail@plt+0x2ea8>
   143c8:	ldr	r1, [sp, #64]	; 0x40
   143cc:	mov	r0, #29
   143d0:	str	r0, [r1]
   143d4:	ldr	r0, [sp, #64]	; 0x40
   143d8:	movw	r1, #53883	; 0xd27b
   143dc:	mov	r2, #5
   143e0:	movt	r1, #1
   143e4:	ldr	r4, [r0]
   143e8:	mov	r0, #0
   143ec:	bl	11430 <dcgettext@plt>
   143f0:	ldr	r2, [r9, #16]
   143f4:	mov	r5, r0
   143f8:	mov	r0, #0
   143fc:	mov	r1, #3
   14400:	bl	19730 <__assert_fail@plt+0x8060>
   14404:	mov	r3, r0
   14408:	mov	r2, r5
   1440c:	movw	r5, #62424	; 0xf3d8
   14410:	mov	r0, #0
   14414:	mov	r1, r4
   14418:	movt	r5, #2
   1441c:	bl	1494c <__assert_fail@plt+0x327c>
   14420:	mov	r8, #1
   14424:	ldrb	r0, [r9, #3]
   14428:	cmp	r0, #1
   1442c:	bne	14578 <__assert_fail@plt+0x2ea8>
   14430:	ldrd	r6, [r5, #88]	; 0x58
   14434:	ldrb	r5, [r9, #5]
   14438:	cmp	r5, #0
   1443c:	orrseq	r0, r6, r7
   14440:	beq	14578 <__assert_fail@plt+0x2ea8>
   14444:	movw	r4, #61768	; 0xf148
   14448:	movt	r4, #2
   1444c:	ldrd	r0, [r4, #24]
   14450:	eor	r2, r1, sl
   14454:	eor	r3, r0, sl
   14458:	orrs	r2, r3, r2
   1445c:	beq	14530 <__assert_fail@plt+0x2e60>
   14460:	cmn	r1, #1
   14464:	bgt	14490 <__assert_fail@plt+0x2dc0>
   14468:	mov	r0, #1
   1446c:	mov	r2, #0
   14470:	mov	r3, #0
   14474:	str	r0, [sp]
   14478:	mov	r0, #1
   1447c:	bl	1149c <lseek64@plt>
   14480:	subs	r2, sl, r0
   14484:	strd	r0, [r4, #24]
   14488:	sbcs	r2, sl, r1
   1448c:	bge	14530 <__assert_fail@plt+0x2e60>
   14490:	orrs	r2, r6, r7
   14494:	mov	r9, r7
   14498:	mov	r4, r8
   1449c:	movwne	r2, #1
   144a0:	cmp	r5, #0
   144a4:	movwne	r5, #1
   144a8:	ands	r2, r5, r2
   144ac:	mov	r5, r6
   144b0:	movwne	r5, #0
   144b4:	movwne	r9, #0
   144b8:	subs	r0, r0, r5
   144bc:	sbc	r1, r1, r9
   144c0:	subs	r8, r0, r6
   144c4:	sbc	r6, r1, r7
   144c8:	cmp	r2, #0
   144cc:	moveq	r8, r0
   144d0:	moveq	r6, r1
   144d4:	orrs	r0, r5, r9
   144d8:	bne	14500 <__assert_fail@plt+0x2e30>
   144dc:	movw	r0, #62304	; 0xf360
   144e0:	mov	r1, r6
   144e4:	movt	r0, #2
   144e8:	ldr	r2, [r0, #12]
   144ec:	mov	r0, r8
   144f0:	asr	r3, r2, #31
   144f4:	bl	1c188 <__assert_fail@plt+0xaab8>
   144f8:	subs	r8, r8, r2
   144fc:	sbc	r6, r6, r3
   14500:	mov	r0, #4
   14504:	stm	sp, {r5, r9}
   14508:	mov	r2, r8
   1450c:	mov	r3, r6
   14510:	str	r0, [sp, #8]
   14514:	mov	r0, #1
   14518:	bl	11394 <posix_fadvise64@plt>
   1451c:	movw	r9, #62304	; 0xf360
   14520:	cmn	r0, #1
   14524:	mov	r8, r4
   14528:	movt	r9, #2
   1452c:	bne	14578 <__assert_fail@plt+0x2ea8>
   14530:	ldr	r0, [sp, #64]	; 0x40
   14534:	movw	r1, #53883	; 0xd27b
   14538:	mov	r2, #5
   1453c:	movt	r1, #1
   14540:	ldr	r4, [r0]
   14544:	mov	r0, #0
   14548:	bl	11430 <dcgettext@plt>
   1454c:	ldr	r2, [r9, #28]
   14550:	mov	r5, r0
   14554:	mov	r0, #0
   14558:	mov	r1, #3
   1455c:	bl	19730 <__assert_fail@plt+0x8060>
   14560:	mov	r3, r0
   14564:	mov	r0, #0
   14568:	mov	r1, r4
   1456c:	mov	r2, r5
   14570:	bl	1494c <__assert_fail@plt+0x327c>
   14574:	mov	r8, #1
   14578:	bl	1545c <__assert_fail@plt+0x3d8c>
   1457c:	bl	15508 <__assert_fail@plt+0x3e38>
   14580:	bl	15604 <__assert_fail@plt+0x3f34>
   14584:	mov	r0, r8
   14588:	sub	sp, fp, #28
   1458c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14590:	movw	r1, #54256	; 0xd3f0
   14594:	mov	r0, #0
   14598:	mov	r2, #5
   1459c:	movt	r1, #1
   145a0:	bl	11430 <dcgettext@plt>
   145a4:	mov	r4, r0
   145a8:	mov	r0, sl
   145ac:	bl	199dc <__assert_fail@plt+0x830c>
   145b0:	mov	r3, r0
   145b4:	mov	r0, #0
   145b8:	mov	r1, #0
   145bc:	mov	r2, r4
   145c0:	bl	1494c <__assert_fail@plt+0x327c>
   145c4:	mov	r0, #1
   145c8:	bl	117d0 <__assert_fail@plt+0x100>
   145cc:	ldr	r0, [sp, #64]	; 0x40
   145d0:	movw	r1, #55176	; 0xd788
   145d4:	mov	r2, #5
   145d8:	movt	r1, #1
   145dc:	ldr	r4, [r0]
   145e0:	mov	r0, #0
   145e4:	bl	11430 <dcgettext@plt>
   145e8:	ldr	r1, [r9, #28]
   145ec:	mov	r5, r0
   145f0:	mov	r0, #4
   145f4:	bl	194b4 <__assert_fail@plt+0x7de4>
   145f8:	mov	r3, r0
   145fc:	mov	r0, #0
   14600:	mov	r1, r4
   14604:	mov	r2, r5
   14608:	bl	1494c <__assert_fail@plt+0x327c>
   1460c:	bl	16454 <__assert_fail@plt+0x4d84>
   14610:	cmp	r1, #1
   14614:	beq	14634 <__assert_fail@plt+0x2f64>
   14618:	mov	r4, #0
   1461c:	b	14638 <__assert_fail@plt+0x2f68>
   14620:	movw	r1, #54604	; 0xd54c
   14624:	movt	r1, #1
   14628:	b	14744 <__assert_fail@plt+0x3074>
   1462c:	mov	r0, #1
   14630:	str	r0, [sp, #68]	; 0x44
   14634:	mov	r4, #75	; 0x4b
   14638:	movw	r1, #54414	; 0xd48e
   1463c:	mov	r0, #0
   14640:	mov	r2, #5
   14644:	movt	r1, #1
   14648:	bl	11430 <dcgettext@plt>
   1464c:	mov	r5, r0
   14650:	ldr	r0, [sp, #36]	; 0x24
   14654:	bl	199dc <__assert_fail@plt+0x830c>
   14658:	movw	r2, #54407	; 0xd487
   1465c:	str	r0, [sp]
   14660:	mov	r0, #1
   14664:	mov	r1, r4
   14668:	mov	r3, r5
   1466c:	movt	r2, #1
   14670:	bl	1494c <__assert_fail@plt+0x327c>
   14674:	movw	r1, #54341	; 0xd445
   14678:	mov	r0, #0
   1467c:	mov	r2, #5
   14680:	movt	r1, #1
   14684:	bl	11430 <dcgettext@plt>
   14688:	mov	r4, r0
   1468c:	movw	r0, #54765	; 0xd5ed
   14690:	movt	r0, #1
   14694:	b	146f0 <__assert_fail@plt+0x3020>
   14698:	movw	r1, #54316	; 0xd42c
   1469c:	mov	r0, #0
   146a0:	mov	r2, #5
   146a4:	movt	r1, #1
   146a8:	bl	11430 <dcgettext@plt>
   146ac:	mov	r4, r0
   146b0:	movw	r0, #54429	; 0xd49d
   146b4:	movt	r0, #1
   146b8:	b	146f0 <__assert_fail@plt+0x3020>
   146bc:	movw	r1, #54341	; 0xd445
   146c0:	mov	r0, #0
   146c4:	mov	r2, #5
   146c8:	movt	r1, #1
   146cc:	bl	11430 <dcgettext@plt>
   146d0:	ldr	r1, [r8, #32]
   146d4:	movw	r2, #54452	; 0xd4b4
   146d8:	mov	r4, r0
   146dc:	movw	r0, #54440	; 0xd4a8
   146e0:	movt	r2, #1
   146e4:	movt	r0, #1
   146e8:	tst	r1, #4
   146ec:	moveq	r0, r2
   146f0:	bl	199dc <__assert_fail@plt+0x830c>
   146f4:	movw	r2, #54407	; 0xd487
   146f8:	str	r0, [sp]
   146fc:	mov	r0, #0
   14700:	mov	r1, #0
   14704:	mov	r3, r4
   14708:	movt	r2, #1
   1470c:	bl	1494c <__assert_fail@plt+0x327c>
   14710:	mov	r0, #1
   14714:	bl	117d0 <__assert_fail@plt+0x100>
   14718:	movw	r1, #54463	; 0xd4bf
   1471c:	movt	r1, #1
   14720:	b	14744 <__assert_fail@plt+0x3074>
   14724:	movw	r1, #54508	; 0xd4ec
   14728:	movt	r1, #1
   1472c:	b	14744 <__assert_fail@plt+0x3074>
   14730:	movw	r1, #54541	; 0xd50d
   14734:	movt	r1, #1
   14738:	b	14744 <__assert_fail@plt+0x3074>
   1473c:	movw	r1, #54572	; 0xd52c
   14740:	movt	r1, #1
   14744:	mov	r0, #0
   14748:	mov	r2, #5
   1474c:	bl	11430 <dcgettext@plt>
   14750:	mov	r2, r0
   14754:	mov	r0, #1
   14758:	mov	r1, #0
   1475c:	bl	1494c <__assert_fail@plt+0x327c>
   14760:	movw	r1, #53739	; 0xd1eb
   14764:	mov	r0, #0
   14768:	mov	r2, #5
   1476c:	movt	r1, #1
   14770:	bl	11430 <dcgettext@plt>
   14774:	mov	r2, r0
   14778:	movw	r0, #62304	; 0xf360
   1477c:	movt	r0, #2
   14780:	mov	r1, r0
   14784:	ldr	r0, [r0, #40]	; 0x28
   14788:	ldrd	r4, [r1, #112]	; 0x70
   1478c:	stm	sp, {r4, r5}
   14790:	str	r0, [sp, #8]
   14794:	mov	r0, #1
   14798:	mov	r1, #0
   1479c:	bl	1494c <__assert_fail@plt+0x327c>
   147a0:	movw	r1, #55288	; 0xd7f8
   147a4:	mov	r0, #0
   147a8:	mov	r2, #5
   147ac:	mov	r6, #0
   147b0:	movt	r1, #1
   147b4:	bl	11430 <dcgettext@plt>
   147b8:	ldr	r5, [r9, #56]	; 0x38
   147bc:	mov	r4, r0
   147c0:	mov	r0, #1
   147c4:	add	r2, sp, #72	; 0x48
   147c8:	movw	r3, #497	; 0x1f1
   147cc:	stm	sp, {r0, r6}
   147d0:	str	r0, [sp, #8]
   147d4:	str	r6, [sp, #12]
   147d8:	asr	r1, r5, #31
   147dc:	mov	r0, r5
   147e0:	bl	16d70 <__assert_fail@plt+0x56a0>
   147e4:	str	r0, [sp]
   147e8:	mov	r0, #1
   147ec:	mov	r1, #0
   147f0:	mov	r2, r4
   147f4:	mov	r3, r5
   147f8:	bl	1494c <__assert_fail@plt+0x327c>
   147fc:	push	{fp, lr}
   14800:	mov	fp, sp
   14804:	movw	r0, #62304	; 0xf360
   14808:	movt	r0, #2
   1480c:	ldrb	r0, [r0]
   14810:	cmp	r0, #0
   14814:	beq	14838 <__assert_fail@plt+0x3168>
   14818:	movw	r0, #61904	; 0xf1d0
   1481c:	movt	r0, #2
   14820:	ldr	r0, [r0]
   14824:	bl	16774 <__assert_fail@plt+0x50a4>
   14828:	cmp	r0, #0
   1482c:	popeq	{fp, pc}
   14830:	mov	r0, #1
   14834:	bl	113e8 <_exit@plt>
   14838:	pop	{fp, lr}
   1483c:	b	16818 <__assert_fail@plt+0x5148>
   14840:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14844:	add	fp, sp, #24
   14848:	sub	sp, sp, #104	; 0x68
   1484c:	bic	r4, r1, #33024	; 0x8100
   14850:	cmp	r4, #0
   14854:	beq	14934 <__assert_fail@plt+0x3264>
   14858:	mov	r1, #3
   1485c:	mov	r8, r2
   14860:	mov	r5, r0
   14864:	bl	169a0 <__assert_fail@plt+0x52d0>
   14868:	cmp	r0, #0
   1486c:	blt	148b8 <__assert_fail@plt+0x31e8>
   14870:	orr	r6, r0, r4
   14874:	mov	r7, r0
   14878:	cmp	r0, r6
   1487c:	beq	14934 <__assert_fail@plt+0x3264>
   14880:	tst	r6, #16384	; 0x4000
   14884:	beq	14914 <__assert_fail@plt+0x3244>
   14888:	mov	r4, sp
   1488c:	bl	1545c <__assert_fail@plt+0x3d8c>
   14890:	mov	r0, #3
   14894:	mov	r1, r5
   14898:	mov	r2, r4
   1489c:	bl	11478 <__fxstat64@plt>
   148a0:	cmn	r0, #1
   148a4:	bgt	148f8 <__assert_fail@plt+0x3228>
   148a8:	bl	11598 <__errno_location@plt>
   148ac:	ldr	r0, [r0]
   148b0:	cmp	r0, #4
   148b4:	beq	1488c <__assert_fail@plt+0x31bc>
   148b8:	bl	11598 <__errno_location@plt>
   148bc:	ldr	r4, [r0]
   148c0:	movw	r1, #55119	; 0xd74f
   148c4:	mov	r0, #0
   148c8:	mov	r2, #5
   148cc:	movt	r1, #1
   148d0:	bl	11430 <dcgettext@plt>
   148d4:	mov	r5, r0
   148d8:	mov	r0, #4
   148dc:	mov	r1, r8
   148e0:	bl	194b4 <__assert_fail@plt+0x7de4>
   148e4:	mov	r3, r0
   148e8:	mov	r0, #1
   148ec:	mov	r1, r4
   148f0:	mov	r2, r5
   148f4:	bl	1494c <__assert_fail@plt+0x327c>
   148f8:	cmp	r0, #0
   148fc:	bne	148b8 <__assert_fail@plt+0x31e8>
   14900:	ldr	r0, [sp, #16]
   14904:	and	r0, r0, #61440	; 0xf000
   14908:	cmp	r0, #16384	; 0x4000
   1490c:	bne	1493c <__assert_fail@plt+0x326c>
   14910:	bic	r6, r6, #16384	; 0x4000
   14914:	cmp	r7, r6
   14918:	beq	14934 <__assert_fail@plt+0x3264>
   1491c:	mov	r0, r5
   14920:	mov	r1, #4
   14924:	mov	r2, r6
   14928:	bl	169a0 <__assert_fail@plt+0x52d0>
   1492c:	cmn	r0, #1
   14930:	beq	148b8 <__assert_fail@plt+0x31e8>
   14934:	sub	sp, fp, #24
   14938:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1493c:	bl	11598 <__errno_location@plt>
   14940:	mov	r1, #20
   14944:	str	r1, [r0]
   14948:	b	148b8 <__assert_fail@plt+0x31e8>
   1494c:	sub	sp, sp, #4
   14950:	push	{r4, r5, r6, r7, fp, lr}
   14954:	add	fp, sp, #16
   14958:	sub	sp, sp, #4
   1495c:	movw	r7, #62304	; 0xf360
   14960:	mov	r6, r0
   14964:	mov	r4, r2
   14968:	mov	r5, r1
   1496c:	str	r3, [fp, #8]
   14970:	movt	r7, #2
   14974:	ldr	r0, [r7, #76]	; 0x4c
   14978:	cmp	r0, #1
   1497c:	blt	149b4 <__assert_fail@plt+0x32e4>
   14980:	movw	r0, #61904	; 0xf1d0
   14984:	movt	r0, #2
   14988:	ldr	r0, [r0]
   1498c:	ldr	r1, [r0, #20]
   14990:	ldr	r2, [r0, #24]
   14994:	cmp	r1, r2
   14998:	bcs	149dc <__assert_fail@plt+0x330c>
   1499c:	add	r2, r1, #1
   149a0:	str	r2, [r0, #20]
   149a4:	mov	r0, #10
   149a8:	strb	r0, [r1]
   149ac:	mov	r0, #0
   149b0:	str	r0, [r7, #76]	; 0x4c
   149b4:	add	r3, fp, #8
   149b8:	mov	r0, r6
   149bc:	mov	r1, r5
   149c0:	mov	r2, r4
   149c4:	str	r3, [sp]
   149c8:	bl	199f4 <__assert_fail@plt+0x8324>
   149cc:	sub	sp, fp, #16
   149d0:	pop	{r4, r5, r6, r7, fp, lr}
   149d4:	add	sp, sp, #4
   149d8:	bx	lr
   149dc:	mov	r1, #10
   149e0:	bl	11628 <__overflow@plt>
   149e4:	b	149ac <__assert_fail@plt+0x32dc>
   149e8:	push	{r4, r5, r6, r7, fp, lr}
   149ec:	add	fp, sp, #16
   149f0:	movw	r6, #62304	; 0xf360
   149f4:	mov	r4, #0
   149f8:	movt	r6, #2
   149fc:	ldr	r7, [r6, #36]	; 0x24
   14a00:	bic	r0, r7, #49152	; 0xc000
   14a04:	tst	r7, #16384	; 0x4000
   14a08:	str	r0, [r6, #36]	; 0x24
   14a0c:	beq	14a48 <__assert_fail@plt+0x3378>
   14a10:	bl	1545c <__assert_fail@plt+0x3d8c>
   14a14:	mov	r0, #1
   14a18:	bl	11694 <fdatasync@plt>
   14a1c:	cmn	r0, #1
   14a20:	bgt	14a78 <__assert_fail@plt+0x33a8>
   14a24:	bl	11598 <__errno_location@plt>
   14a28:	ldr	r5, [r0]
   14a2c:	cmp	r5, #4
   14a30:	beq	14a10 <__assert_fail@plt+0x3340>
   14a34:	cmp	r5, #22
   14a38:	mov	r4, #0
   14a3c:	cmpne	r5, #38	; 0x26
   14a40:	bne	14a98 <__assert_fail@plt+0x33c8>
   14a44:	orr	r7, r7, #32768	; 0x8000
   14a48:	tst	r7, #32768	; 0x8000
   14a4c:	beq	14b24 <__assert_fail@plt+0x3454>
   14a50:	bl	1545c <__assert_fail@plt+0x3d8c>
   14a54:	mov	r0, #1
   14a58:	bl	1137c <fsync@plt>
   14a5c:	cmn	r0, #1
   14a60:	bgt	14ad8 <__assert_fail@plt+0x3408>
   14a64:	bl	11598 <__errno_location@plt>
   14a68:	ldr	r1, [r0]
   14a6c:	cmp	r1, #4
   14a70:	beq	14a50 <__assert_fail@plt+0x3380>
   14a74:	b	14ae4 <__assert_fail@plt+0x3414>
   14a78:	cmp	r0, #0
   14a7c:	beq	14a48 <__assert_fail@plt+0x3378>
   14a80:	bl	11598 <__errno_location@plt>
   14a84:	ldr	r5, [r0]
   14a88:	cmp	r5, #22
   14a8c:	mov	r4, #0
   14a90:	cmpne	r5, #38	; 0x26
   14a94:	beq	14a44 <__assert_fail@plt+0x3374>
   14a98:	movw	r1, #55526	; 0xd8e6
   14a9c:	mov	r0, #0
   14aa0:	mov	r2, #5
   14aa4:	movt	r1, #1
   14aa8:	bl	11430 <dcgettext@plt>
   14aac:	ldr	r1, [r6, #28]
   14ab0:	mov	r4, r0
   14ab4:	mov	r0, #4
   14ab8:	bl	194b4 <__assert_fail@plt+0x7de4>
   14abc:	mov	r3, r0
   14ac0:	mov	r0, #0
   14ac4:	mov	r1, r5
   14ac8:	mov	r2, r4
   14acc:	bl	1494c <__assert_fail@plt+0x327c>
   14ad0:	mov	r4, #1
   14ad4:	b	14a44 <__assert_fail@plt+0x3374>
   14ad8:	cmp	r0, #0
   14adc:	beq	14b24 <__assert_fail@plt+0x3454>
   14ae0:	bl	11598 <__errno_location@plt>
   14ae4:	ldr	r4, [r0]
   14ae8:	movw	r1, #55550	; 0xd8fe
   14aec:	mov	r0, #0
   14af0:	mov	r2, #5
   14af4:	movt	r1, #1
   14af8:	bl	11430 <dcgettext@plt>
   14afc:	ldr	r1, [r6, #28]
   14b00:	mov	r5, r0
   14b04:	mov	r0, #4
   14b08:	bl	194b4 <__assert_fail@plt+0x7de4>
   14b0c:	mov	r3, r0
   14b10:	mov	r0, #0
   14b14:	mov	r1, r4
   14b18:	mov	r2, r5
   14b1c:	bl	1494c <__assert_fail@plt+0x327c>
   14b20:	mov	r4, #1
   14b24:	mov	r0, r4
   14b28:	pop	{r4, r5, r6, r7, fp, pc}
   14b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b30:	add	fp, sp, #28
   14b34:	sub	sp, sp, #20
   14b38:	mov	sl, r0
   14b3c:	cmp	r0, #0
   14b40:	beq	14bf8 <__assert_fail@plt+0x3528>
   14b44:	orrs	r0, r2, r3
   14b48:	movw	r1, #62304	; 0xf360
   14b4c:	movw	r0, #62424	; 0xf3d8
   14b50:	movt	r1, #2
   14b54:	movt	r0, #2
   14b58:	ldr	r6, [r0, #88]	; 0x58
   14b5c:	ldr	r9, [r0, #92]	; 0x5c
   14b60:	ldrb	r8, [r1, #5]
   14b64:	beq	14c9c <__assert_fail@plt+0x35cc>
   14b68:	cmn	r9, #1
   14b6c:	mov	r7, #0
   14b70:	mov	r1, #0
   14b74:	movwgt	r7, #1
   14b78:	adds	r5, r6, r2
   14b7c:	mov	r6, #0
   14b80:	adc	r4, r9, r3
   14b84:	cmn	r4, #1
   14b88:	movwgt	r6, #1
   14b8c:	subs	r6, r7, r6
   14b90:	movwne	r6, #1
   14b94:	cmn	r3, #1
   14b98:	movwgt	r1, #1
   14b9c:	sub	r1, r7, r1
   14ba0:	clz	r1, r1
   14ba4:	lsr	r1, r1, #5
   14ba8:	ands	r1, r1, r6
   14bac:	mvnne	r4, #-2147483648	; 0x80000000
   14bb0:	mvnne	r5, #0
   14bb4:	asr	r1, r4, #31
   14bb8:	adds	r6, r5, r1, lsr #15
   14bbc:	bfc	r6, #0, #17
   14bc0:	adc	r9, r4, #0
   14bc4:	subs	r1, r5, r6
   14bc8:	sbc	r7, r4, r9
   14bcc:	str	r1, [r0, #88]	; 0x58
   14bd0:	subs	r1, r1, r5
   14bd4:	str	r7, [r0, #92]	; 0x5c
   14bd8:	mov	r0, #1
   14bdc:	sbcs	r1, r7, r4
   14be0:	bge	14d80 <__assert_fail@plt+0x36b0>
   14be4:	orrs	r0, r6, r9
   14be8:	mov	ip, #0
   14bec:	mov	r0, #1
   14bf0:	bne	14ca8 <__assert_fail@plt+0x35d8>
   14bf4:	b	14d80 <__assert_fail@plt+0x36b0>
   14bf8:	orrs	r0, r2, r3
   14bfc:	movw	r1, #62304	; 0xf360
   14c00:	movw	r0, #62424	; 0xf3d8
   14c04:	movt	r1, #2
   14c08:	movt	r0, #2
   14c0c:	ldr	r6, [r0, #80]	; 0x50
   14c10:	ldr	r9, [r0, #84]	; 0x54
   14c14:	ldrb	r8, [r1, #4]
   14c18:	beq	14c9c <__assert_fail@plt+0x35cc>
   14c1c:	cmn	r9, #1
   14c20:	mov	r5, #0
   14c24:	mov	r1, #0
   14c28:	movwgt	r5, #1
   14c2c:	adds	r4, r6, r2
   14c30:	mov	r6, #0
   14c34:	adc	r7, r9, r3
   14c38:	cmn	r7, #1
   14c3c:	movwgt	r6, #1
   14c40:	subs	r6, r5, r6
   14c44:	movwne	r6, #1
   14c48:	cmn	r3, #1
   14c4c:	movwgt	r1, #1
   14c50:	sub	r1, r5, r1
   14c54:	clz	r1, r1
   14c58:	lsr	r1, r1, #5
   14c5c:	ands	r1, r1, r6
   14c60:	mvnne	r7, #-2147483648	; 0x80000000
   14c64:	mvnne	r4, #0
   14c68:	asr	r1, r7, #31
   14c6c:	adds	r6, r4, r1, lsr #15
   14c70:	bfc	r6, #0, #17
   14c74:	adc	r9, r7, #0
   14c78:	subs	r1, r4, r6
   14c7c:	sbc	r5, r7, r9
   14c80:	str	r1, [r0, #80]	; 0x50
   14c84:	subs	r1, r1, r4
   14c88:	str	r5, [r0, #84]	; 0x54
   14c8c:	mov	r0, #1
   14c90:	sbcs	r1, r5, r7
   14c94:	blt	14be4 <__assert_fail@plt+0x3514>
   14c98:	b	14d80 <__assert_fail@plt+0x36b0>
   14c9c:	orrs	r0, r6, r9
   14ca0:	mov	ip, #1
   14ca4:	movwne	r0, #1
   14ca8:	cmp	r8, #0
   14cac:	mov	r7, r0
   14cb0:	orreq	r1, r6, r2
   14cb4:	orreq	r4, r9, r3
   14cb8:	moveq	r0, #1
   14cbc:	orrseq	r1, r1, r4
   14cc0:	beq	14d80 <__assert_fail@plt+0x36b0>
   14cc4:	orrs	r1, r2, r3
   14cc8:	beq	14d40 <__assert_fail@plt+0x3670>
   14ccc:	movw	r0, #62424	; 0xf3d8
   14cd0:	cmp	sl, #0
   14cd4:	movt	r0, #2
   14cd8:	add	r2, r0, #88	; 0x58
   14cdc:	addeq	r2, r0, #80	; 0x50
   14ce0:	ldr	lr, [r2]
   14ce4:	ldr	r2, [r2, #4]
   14ce8:	mvn	r4, #0
   14cec:	cmp	sl, #0
   14cf0:	beq	14d54 <__assert_fail@plt+0x3684>
   14cf4:	movw	r0, #61768	; 0xf148
   14cf8:	str	r2, [sp, #16]
   14cfc:	movt	r0, #2
   14d00:	ldrd	r2, [r0, #24]
   14d04:	eor	r0, r3, r4
   14d08:	eor	r5, r2, r4
   14d0c:	orrs	r0, r5, r0
   14d10:	mov	r0, #0
   14d14:	beq	14d80 <__assert_fail@plt+0x36b0>
   14d18:	cmn	r3, #1
   14d1c:	ble	14da0 <__assert_fail@plt+0x36d0>
   14d20:	cmp	r1, #0
   14d24:	beq	14dec <__assert_fail@plt+0x371c>
   14d28:	ldr	r1, [sp, #16]
   14d2c:	adds	r0, lr, r6
   14d30:	adc	r1, r1, r9
   14d34:	adds	r2, r0, r2
   14d38:	adc	r3, r1, r3
   14d3c:	b	14dd0 <__assert_fail@plt+0x3700>
   14d40:	mov	lr, #0
   14d44:	mov	r2, #0
   14d48:	mvn	r4, #0
   14d4c:	cmp	sl, #0
   14d50:	bne	14cf4 <__assert_fail@plt+0x3624>
   14d54:	movw	r0, #62304	; 0xf360
   14d58:	movt	r0, #2
   14d5c:	ldrb	r1, [r0, #1]
   14d60:	cmp	r1, #0
   14d64:	beq	14d88 <__assert_fail@plt+0x36b8>
   14d68:	str	r2, [sp, #16]
   14d6c:	ldrd	r2, [r0, #104]	; 0x68
   14d70:	subs	r1, r4, r2
   14d74:	mov	r0, #0
   14d78:	sbcs	r1, r4, r3
   14d7c:	blt	14dec <__assert_fail@plt+0x371c>
   14d80:	sub	sp, fp, #28
   14d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d88:	bl	11598 <__errno_location@plt>
   14d8c:	mov	r1, #29
   14d90:	str	r1, [r0]
   14d94:	mov	r0, #0
   14d98:	sub	sp, fp, #28
   14d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14da0:	mov	r0, #1
   14da4:	mov	r2, #0
   14da8:	mov	r3, #0
   14dac:	mov	r5, ip
   14db0:	str	lr, [sp, #12]
   14db4:	str	r0, [sp]
   14db8:	mov	r0, sl
   14dbc:	bl	1149c <lseek64@plt>
   14dc0:	ldr	lr, [sp, #12]
   14dc4:	mov	ip, r5
   14dc8:	mov	r2, r0
   14dcc:	mov	r3, r1
   14dd0:	movw	r0, #61768	; 0xf148
   14dd4:	movt	r0, #2
   14dd8:	strd	r2, [r0, #24]
   14ddc:	subs	r1, r4, r2
   14de0:	mov	r0, #0
   14de4:	sbcs	r1, r4, r3
   14de8:	bge	14d80 <__assert_fail@plt+0x36b0>
   14dec:	cmp	r8, #0
   14df0:	and	r0, r7, ip
   14df4:	mov	r5, r6
   14df8:	movwne	r8, #1
   14dfc:	ands	r0, r0, r8
   14e00:	mov	r8, r9
   14e04:	movwne	r5, #0
   14e08:	movwne	r8, #0
   14e0c:	subs	r1, r2, r5
   14e10:	sbc	r2, r3, r8
   14e14:	cmp	r0, #0
   14e18:	ldr	r0, [sp, #16]
   14e1c:	movne	lr, r6
   14e20:	movne	r0, r9
   14e24:	subs	r7, r1, lr
   14e28:	sbc	r6, r2, r0
   14e2c:	orrs	r0, r5, r8
   14e30:	bne	14e58 <__assert_fail@plt+0x3788>
   14e34:	movw	r0, #62304	; 0xf360
   14e38:	mov	r1, r6
   14e3c:	movt	r0, #2
   14e40:	ldr	r2, [r0, #12]
   14e44:	mov	r0, r7
   14e48:	asr	r3, r2, #31
   14e4c:	bl	1c188 <__assert_fail@plt+0xaab8>
   14e50:	subs	r7, r7, r2
   14e54:	sbc	r6, r6, r3
   14e58:	mov	r0, #4
   14e5c:	stm	sp, {r5, r8}
   14e60:	mov	r2, r7
   14e64:	mov	r3, r6
   14e68:	str	r0, [sp, #8]
   14e6c:	mov	r0, sl
   14e70:	bl	11394 <posix_fadvise64@plt>
   14e74:	mov	r1, r0
   14e78:	add	r0, r0, #1
   14e7c:	cmn	r1, #1
   14e80:	movwne	r0, #1
   14e84:	sub	sp, fp, #28
   14e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e8c:	push	{fp, lr}
   14e90:	mov	fp, sp
   14e94:	bl	1545c <__assert_fail@plt+0x3d8c>
   14e98:	bl	15508 <__assert_fail@plt+0x3e38>
   14e9c:	pop	{fp, lr}
   14ea0:	b	15604 <__assert_fail@plt+0x3f34>
   14ea4:	movw	r0, #62304	; 0xf360
   14ea8:	movt	r0, #2
   14eac:	ldr	r1, [r0, #48]	; 0x30
   14eb0:	add	r1, r1, #1
   14eb4:	str	r1, [r0, #48]	; 0x30
   14eb8:	bx	lr
   14ebc:	movw	r1, #62304	; 0xf360
   14ec0:	movt	r1, #2
   14ec4:	str	r0, [r1, #52]	; 0x34
   14ec8:	bx	lr
   14ecc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ed0:	add	fp, sp, #24
   14ed4:	sub	sp, sp, #8
   14ed8:	mov	r8, r3
   14edc:	mov	r6, r1
   14ee0:	mov	r4, r0
   14ee4:	cmp	r2, #0
   14ee8:	beq	14f5c <__assert_fail@plt+0x388c>
   14eec:	mov	r0, r4
   14ef0:	mov	r1, #44	; 0x2c
   14ef4:	bl	11580 <strchr@plt>
   14ef8:	mov	r1, r6
   14efc:	mov	r2, #0
   14f00:	ldrb	r3, [r1, r2]
   14f04:	cmp	r3, #0
   14f08:	beq	14f20 <__assert_fail@plt+0x3850>
   14f0c:	ldrb	r7, [r4, r2]
   14f10:	add	r2, r2, #1
   14f14:	cmp	r7, r3
   14f18:	beq	14f00 <__assert_fail@plt+0x3830>
   14f1c:	b	14f3c <__assert_fail@plt+0x386c>
   14f20:	ldrb	r2, [r4, r2]
   14f24:	cmp	r2, #44	; 0x2c
   14f28:	cmpne	r2, #0
   14f2c:	bne	14f3c <__assert_fail@plt+0x386c>
   14f30:	ldr	r7, [r1, #12]
   14f34:	cmp	r7, #0
   14f38:	bne	14f4c <__assert_fail@plt+0x387c>
   14f3c:	ldrb	r2, [r1], #16
   14f40:	cmp	r2, #0
   14f44:	bne	14efc <__assert_fail@plt+0x382c>
   14f48:	b	14fdc <__assert_fail@plt+0x390c>
   14f4c:	add	r4, r0, #1
   14f50:	cmp	r0, #0
   14f54:	bne	14eec <__assert_fail@plt+0x381c>
   14f58:	b	14fd0 <__assert_fail@plt+0x3900>
   14f5c:	mov	r7, #0
   14f60:	mov	r0, r4
   14f64:	mov	r1, #44	; 0x2c
   14f68:	bl	11580 <strchr@plt>
   14f6c:	mov	r1, r6
   14f70:	mov	r2, #0
   14f74:	ldrb	r3, [r1, r2]
   14f78:	cmp	r3, #0
   14f7c:	beq	14f94 <__assert_fail@plt+0x38c4>
   14f80:	ldrb	r5, [r4, r2]
   14f84:	add	r2, r2, #1
   14f88:	cmp	r5, r3
   14f8c:	beq	14f74 <__assert_fail@plt+0x38a4>
   14f90:	b	14fb0 <__assert_fail@plt+0x38e0>
   14f94:	ldrb	r2, [r4, r2]
   14f98:	cmp	r2, #44	; 0x2c
   14f9c:	cmpne	r2, #0
   14fa0:	bne	14fb0 <__assert_fail@plt+0x38e0>
   14fa4:	ldr	r2, [r1, #12]
   14fa8:	cmp	r2, #0
   14fac:	bne	14fc0 <__assert_fail@plt+0x38f0>
   14fb0:	ldrb	r2, [r1], #16
   14fb4:	cmp	r2, #0
   14fb8:	bne	14f70 <__assert_fail@plt+0x38a0>
   14fbc:	b	14fdc <__assert_fail@plt+0x390c>
   14fc0:	orr	r7, r2, r7
   14fc4:	add	r4, r0, #1
   14fc8:	cmp	r0, #0
   14fcc:	bne	14f60 <__assert_fail@plt+0x3890>
   14fd0:	mov	r0, r7
   14fd4:	sub	sp, fp, #24
   14fd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fdc:	cmp	r0, #0
   14fe0:	bne	14ff4 <__assert_fail@plt+0x3924>
   14fe4:	mov	r0, r4
   14fe8:	bl	11574 <strlen@plt>
   14fec:	mov	r6, r0
   14ff0:	b	14ff8 <__assert_fail@plt+0x3928>
   14ff4:	sub	r6, r0, r4
   14ff8:	mov	r0, #0
   14ffc:	mov	r1, r8
   15000:	mov	r2, #5
   15004:	bl	11430 <dcgettext@plt>
   15008:	mov	r5, r0
   1500c:	mov	r0, #0
   15010:	mov	r1, #8
   15014:	mov	r2, r4
   15018:	mov	r3, r6
   1501c:	bl	19460 <__assert_fail@plt+0x7d90>
   15020:	movw	r2, #54407	; 0xd487
   15024:	str	r0, [sp]
   15028:	mov	r0, #0
   1502c:	mov	r1, #0
   15030:	mov	r3, r5
   15034:	movt	r2, #1
   15038:	bl	1494c <__assert_fail@plt+0x327c>
   1503c:	mov	r0, #1
   15040:	bl	117d0 <__assert_fail@plt+0x100>
   15044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15048:	add	fp, sp, #28
   1504c:	sub	sp, sp, #28
   15050:	mov	r6, r0
   15054:	mov	r0, #0
   15058:	mov	r8, r1
   1505c:	add	r1, sp, #12
   15060:	add	r3, sp, #16
   15064:	mov	r2, #10
   15068:	str	r0, [sp, #20]
   1506c:	str	r0, [sp, #16]
   15070:	movw	r0, #54638	; 0xd56e
   15074:	movt	r0, #1
   15078:	str	r0, [sp]
   1507c:	mov	r0, r6
   15080:	bl	1a798 <__assert_fail@plt+0x90c8>
   15084:	mov	r7, r0
   15088:	bic	r0, r0, #1
   1508c:	cmp	r0, #2
   15090:	bne	150e4 <__assert_fail@plt+0x3a14>
   15094:	ldr	r0, [sp, #12]
   15098:	ldrb	r1, [r0]
   1509c:	cmp	r1, #120	; 0x78
   150a0:	bne	150e4 <__assert_fail@plt+0x3a14>
   150a4:	mov	r1, #0
   150a8:	add	r0, r0, #1
   150ac:	str	r1, [sp, #8]
   150b0:	add	r1, sp, #8
   150b4:	bl	15044 <__assert_fail@plt+0x3974>
   150b8:	ldr	sl, [sp, #8]
   150bc:	mov	r9, r0
   150c0:	mov	r5, r1
   150c4:	cmp	sl, #2
   150c8:	bcc	15114 <__assert_fail@plt+0x3a44>
   150cc:	str	sl, [r8]
   150d0:	mov	r4, r9
   150d4:	mov	r0, r4
   150d8:	mov	r1, r5
   150dc:	sub	sp, fp, #28
   150e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e4:	ldr	r5, [sp, #20]
   150e8:	cmn	r5, #1
   150ec:	ble	1510c <__assert_fail@plt+0x3a3c>
   150f0:	ldr	r4, [sp, #16]
   150f4:	cmp	r7, #0
   150f8:	strne	r7, [r8]
   150fc:	mov	r0, r4
   15100:	mov	r1, r5
   15104:	sub	sp, fp, #28
   15108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1510c:	orr	r0, r7, #1
   15110:	b	151d8 <__assert_fail@plt+0x3b08>
   15114:	cmn	r5, #1
   15118:	ble	15158 <__assert_fail@plt+0x3a88>
   1511c:	ldr	r4, [sp, #16]
   15120:	ldr	r2, [sp, #20]
   15124:	orrs	r0, r9, r5
   15128:	beq	151b0 <__assert_fail@plt+0x3ae0>
   1512c:	str	r2, [sp, #4]
   15130:	mvn	r0, #0
   15134:	mvn	r1, #-2147483648	; 0x80000000
   15138:	mov	r2, r9
   1513c:	mov	r3, r5
   15140:	bl	1c25c <__assert_fail@plt+0xab8c>
   15144:	ldr	r2, [sp, #4]
   15148:	subs	r0, r0, r4
   1514c:	sbcs	r0, r1, r2
   15150:	bcs	151b0 <__assert_fail@plt+0x3ae0>
   15154:	b	151d4 <__assert_fail@plt+0x3b04>
   15158:	ldr	r4, [sp, #16]
   1515c:	ldr	r2, [sp, #20]
   15160:	and	r0, r9, r5
   15164:	cmn	r0, #1
   15168:	beq	15198 <__assert_fail@plt+0x3ac8>
   1516c:	str	r2, [sp, #4]
   15170:	mov	r0, #0
   15174:	mov	r1, #-2147483648	; 0x80000000
   15178:	mov	r2, r9
   1517c:	mov	r3, r5
   15180:	bl	1c188 <__assert_fail@plt+0xaab8>
   15184:	ldr	r2, [sp, #4]
   15188:	subs	r0, r0, r4
   1518c:	sbcs	r0, r1, r2
   15190:	bcs	151b0 <__assert_fail@plt+0x3ae0>
   15194:	b	151d4 <__assert_fail@plt+0x3b04>
   15198:	subs	r0, r4, #1
   1519c:	sbc	r0, r2, #0
   151a0:	orrs	r1, r4, r2
   151a4:	beq	151b0 <__assert_fail@plt+0x3ae0>
   151a8:	cmp	r0, #0
   151ac:	blt	151d4 <__assert_fail@plt+0x3b04>
   151b0:	mov	r1, r4
   151b4:	umull	r4, r0, r4, r9
   151b8:	mla	r0, r1, r5, r0
   151bc:	mla	r5, r2, r9, r0
   151c0:	orrs	r0, r4, r5
   151c4:	beq	151f4 <__assert_fail@plt+0x3b24>
   151c8:	orr	r0, sl, r7
   151cc:	tst	r0, #1
   151d0:	beq	151e4 <__assert_fail@plt+0x3b14>
   151d4:	mov	r0, #1
   151d8:	str	r0, [r8]
   151dc:	mvn	r5, #-2147483648	; 0x80000000
   151e0:	mvn	r4, #0
   151e4:	mov	r0, r4
   151e8:	mov	r1, r5
   151ec:	sub	sp, fp, #28
   151f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151f4:	movw	r1, #54714	; 0xd5ba
   151f8:	mov	r0, r6
   151fc:	mov	r2, #2
   15200:	movt	r1, #1
   15204:	bl	11688 <strncmp@plt>
   15208:	mov	r4, #0
   1520c:	cmp	r0, #0
   15210:	mov	r5, #0
   15214:	bne	151e4 <__assert_fail@plt+0x3b14>
   15218:	movw	r1, #54652	; 0xd57c
   1521c:	mov	r0, #0
   15220:	mov	r2, #5
   15224:	mov	r4, #0
   15228:	movt	r1, #1
   1522c:	bl	11430 <dcgettext@plt>
   15230:	movw	r1, #54714	; 0xd5ba
   15234:	mov	r5, r0
   15238:	mov	r0, #0
   1523c:	movt	r1, #1
   15240:	bl	199cc <__assert_fail@plt+0x82fc>
   15244:	movw	r1, #54713	; 0xd5b9
   15248:	mov	r6, r0
   1524c:	mov	r0, #1
   15250:	movt	r1, #1
   15254:	bl	199cc <__assert_fail@plt+0x82fc>
   15258:	str	r0, [sp]
   1525c:	mov	r0, #0
   15260:	mov	r1, #0
   15264:	mov	r2, r5
   15268:	mov	r3, r6
   1526c:	bl	1494c <__assert_fail@plt+0x327c>
   15270:	mov	r5, #0
   15274:	mov	r0, r4
   15278:	mov	r1, r5
   1527c:	sub	sp, fp, #28
   15280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15284:	push	{r4, r5, r6, r7, fp, lr}
   15288:	add	fp, sp, #16
   1528c:	cmp	r2, #1
   15290:	blt	152dc <__assert_fail@plt+0x3c0c>
   15294:	mov	r5, r2
   15298:	mov	r6, r1
   1529c:	mov	r7, r0
   152a0:	mov	r4, #0
   152a4:	mov	r0, r7
   152a8:	mov	r1, r6
   152ac:	mov	r2, r5
   152b0:	bl	152e8 <__assert_fail@plt+0x3c18>
   152b4:	cmp	r0, #0
   152b8:	poplt	{r4, r5, r6, r7, fp, pc}
   152bc:	beq	152d4 <__assert_fail@plt+0x3c04>
   152c0:	sub	r5, r5, r0
   152c4:	add	r6, r6, r0
   152c8:	add	r4, r0, r4
   152cc:	cmp	r5, #0
   152d0:	bgt	152a4 <__assert_fail@plt+0x3bd4>
   152d4:	mov	r0, r4
   152d8:	pop	{r4, r5, r6, r7, fp, pc}
   152dc:	mov	r4, #0
   152e0:	mov	r0, r4
   152e4:	pop	{r4, r5, r6, r7, fp, pc}
   152e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152ec:	add	fp, sp, #24
   152f0:	sub	sp, sp, #8
   152f4:	movw	r8, #62304	; 0xf360
   152f8:	mov	r5, r2
   152fc:	mov	r6, r1
   15300:	mov	r7, r0
   15304:	movt	r8, #2
   15308:	bl	1545c <__assert_fail@plt+0x3d8c>
   1530c:	mov	r0, r7
   15310:	mov	r1, r6
   15314:	mov	r2, r5
   15318:	bl	113a0 <read@plt>
   1531c:	mov	r4, r0
   15320:	cmn	r0, #1
   15324:	beq	15340 <__assert_fail@plt+0x3c70>
   15328:	bgt	15380 <__assert_fail@plt+0x3cb0>
   1532c:	bl	11598 <__errno_location@plt>
   15330:	ldr	r0, [r0]
   15334:	cmp	r0, #4
   15338:	beq	15308 <__assert_fail@plt+0x3c38>
   1533c:	b	15420 <__assert_fail@plt+0x3d50>
   15340:	bl	11598 <__errno_location@plt>
   15344:	ldr	r1, [r8, #72]	; 0x48
   15348:	cmp	r1, r5
   1534c:	bge	15370 <__assert_fail@plt+0x3ca0>
   15350:	ldr	r2, [r0]
   15354:	cmp	r2, #22
   15358:	bne	15370 <__assert_fail@plt+0x3ca0>
   1535c:	cmp	r1, #1
   15360:	blt	15370 <__assert_fail@plt+0x3ca0>
   15364:	ldrb	r1, [r8, #22]
   15368:	tst	r1, #1
   1536c:	bne	15430 <__assert_fail@plt+0x3d60>
   15370:	ldr	r0, [r0]
   15374:	cmp	r0, #4
   15378:	beq	15308 <__assert_fail@plt+0x3c38>
   1537c:	b	15420 <__assert_fail@plt+0x3d50>
   15380:	cmp	r4, #0
   15384:	beq	153a4 <__assert_fail@plt+0x3cd4>
   15388:	cmp	r4, r5
   1538c:	bge	153a4 <__assert_fail@plt+0x3cd4>
   15390:	bl	1545c <__assert_fail@plt+0x3d8c>
   15394:	ldr	r6, [r8, #72]	; 0x48
   15398:	cmp	r6, r5
   1539c:	blt	153b8 <__assert_fail@plt+0x3ce8>
   153a0:	b	15420 <__assert_fail@plt+0x3d50>
   153a4:	cmp	r4, #0
   153a8:	beq	15448 <__assert_fail@plt+0x3d78>
   153ac:	ldr	r6, [r8, #72]	; 0x48
   153b0:	cmp	r6, r5
   153b4:	bge	15420 <__assert_fail@plt+0x3d50>
   153b8:	ldrb	r0, [r8, #6]
   153bc:	cmp	r0, #0
   153c0:	beq	15420 <__assert_fail@plt+0x3d50>
   153c4:	cmp	r6, #1
   153c8:	blt	15420 <__assert_fail@plt+0x3d50>
   153cc:	movw	r0, #61768	; 0xf148
   153d0:	movt	r0, #2
   153d4:	ldr	r0, [r0]
   153d8:	cmp	r0, #1
   153dc:	beq	15418 <__assert_fail@plt+0x3d48>
   153e0:	movw	r1, #54717	; 0xd5bd
   153e4:	movw	r2, #54775	; 0xd5f7
   153e8:	mov	r0, #5
   153ec:	mov	r3, r6
   153f0:	str	r0, [sp]
   153f4:	movt	r1, #1
   153f8:	movt	r2, #1
   153fc:	mov	r0, #0
   15400:	bl	116b8 <dcngettext@plt>
   15404:	mov	r2, r0
   15408:	mov	r0, #0
   1540c:	mov	r1, #0
   15410:	mov	r3, r6
   15414:	bl	1494c <__assert_fail@plt+0x327c>
   15418:	mov	r0, #0
   1541c:	strb	r0, [r8, #6]
   15420:	str	r4, [r8, #72]	; 0x48
   15424:	mov	r0, r4
   15428:	sub	sp, fp, #24
   1542c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15430:	mov	r4, #0
   15434:	str	r4, [r0]
   15438:	str	r4, [r8, #72]	; 0x48
   1543c:	mov	r0, r4
   15440:	sub	sp, fp, #24
   15444:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15448:	mov	r4, #0
   1544c:	str	r4, [r8, #72]	; 0x48
   15450:	mov	r0, r4
   15454:	sub	sp, fp, #24
   15458:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1545c:	push	{r4, r5, r6, r7, fp, lr}
   15460:	add	fp, sp, #16
   15464:	sub	sp, sp, #128	; 0x80
   15468:	movw	r7, #62304	; 0xf360
   1546c:	movw	r4, #62176	; 0xf2e0
   15470:	mov	r5, sp
   15474:	movt	r7, #2
   15478:	movt	r4, #2
   1547c:	ldr	r0, [r7, #52]	; 0x34
   15480:	cmp	r0, #0
   15484:	bne	154b8 <__assert_fail@plt+0x3de8>
   15488:	b	154a8 <__assert_fail@plt+0x3dd8>
   1548c:	bl	15508 <__assert_fail@plt+0x3e38>
   15490:	bl	15604 <__assert_fail@plt+0x3f34>
   15494:	mov	r0, r6
   15498:	bl	11370 <raise@plt>
   1549c:	ldr	r0, [r7, #52]	; 0x34
   154a0:	cmp	r0, #0
   154a4:	bne	154b8 <__assert_fail@plt+0x3de8>
   154a8:	ldr	r0, [r7, #48]	; 0x30
   154ac:	cmp	r0, #0
   154b0:	subeq	sp, fp, #16
   154b4:	popeq	{r4, r5, r6, r7, fp, pc}
   154b8:	mov	r0, #0
   154bc:	mov	r1, r4
   154c0:	mov	r2, r5
   154c4:	bl	113b8 <sigprocmask@plt>
   154c8:	ldr	r6, [r7, #52]	; 0x34
   154cc:	ldr	r0, [r7, #48]	; 0x30
   154d0:	mov	r1, r5
   154d4:	mov	r2, #0
   154d8:	cmp	r0, #0
   154dc:	subne	r0, r0, #1
   154e0:	strne	r0, [r7, #48]	; 0x30
   154e4:	mov	r0, #2
   154e8:	bl	113b8 <sigprocmask@plt>
   154ec:	cmp	r6, #0
   154f0:	bne	1548c <__assert_fail@plt+0x3dbc>
   154f4:	bl	15604 <__assert_fail@plt+0x3f34>
   154f8:	ldr	r0, [r7, #52]	; 0x34
   154fc:	cmp	r0, #0
   15500:	bne	154b8 <__assert_fail@plt+0x3de8>
   15504:	b	154a8 <__assert_fail@plt+0x3dd8>
   15508:	push	{r4, r5, r6, sl, fp, lr}
   1550c:	add	fp, sp, #16
   15510:	movw	r6, #62304	; 0xf360
   15514:	movt	r6, #2
   15518:	ldr	r0, [r6, #52]	; 0x34
   1551c:	cmp	r0, #0
   15520:	bne	15530 <__assert_fail@plt+0x3e60>
   15524:	bl	149e8 <__assert_fail@plt+0x3318>
   15528:	cmp	r0, #0
   1552c:	bne	15600 <__assert_fail@plt+0x3f30>
   15530:	mov	r0, #0
   15534:	bl	116ac <close@plt>
   15538:	cmp	r0, #0
   1553c:	beq	1556c <__assert_fail@plt+0x3e9c>
   15540:	bl	11598 <__errno_location@plt>
   15544:	ldr	r4, [r0]
   15548:	mov	r5, r0
   1554c:	cmp	r4, #4
   15550:	bne	155c8 <__assert_fail@plt+0x3ef8>
   15554:	mov	r0, #0
   15558:	bl	116ac <close@plt>
   1555c:	cmp	r0, #0
   15560:	ldrne	r4, [r5]
   15564:	cmpne	r4, #9
   15568:	bne	1554c <__assert_fail@plt+0x3e7c>
   1556c:	mov	r0, #1
   15570:	bl	116ac <close@plt>
   15574:	cmp	r0, #0
   15578:	popeq	{r4, r5, r6, sl, fp, pc}
   1557c:	bl	11598 <__errno_location@plt>
   15580:	ldr	r4, [r0]
   15584:	mov	r5, r0
   15588:	cmp	r4, #4
   1558c:	bne	155ac <__assert_fail@plt+0x3edc>
   15590:	mov	r0, #1
   15594:	bl	116ac <close@plt>
   15598:	cmp	r0, #0
   1559c:	ldrne	r4, [r5]
   155a0:	cmpne	r4, #9
   155a4:	bne	15588 <__assert_fail@plt+0x3eb8>
   155a8:	pop	{r4, r5, r6, sl, fp, pc}
   155ac:	movw	r1, #54856	; 0xd648
   155b0:	mov	r0, #0
   155b4:	mov	r2, #5
   155b8:	movt	r1, #1
   155bc:	bl	11430 <dcgettext@plt>
   155c0:	ldr	r1, [r6, #28]
   155c4:	b	155e0 <__assert_fail@plt+0x3f10>
   155c8:	movw	r1, #54834	; 0xd632
   155cc:	mov	r0, #0
   155d0:	mov	r2, #5
   155d4:	movt	r1, #1
   155d8:	bl	11430 <dcgettext@plt>
   155dc:	ldr	r1, [r6, #16]
   155e0:	mov	r5, r0
   155e4:	mov	r0, #4
   155e8:	bl	194b4 <__assert_fail@plt+0x7de4>
   155ec:	mov	r3, r0
   155f0:	mov	r0, #1
   155f4:	mov	r1, r4
   155f8:	mov	r2, r5
   155fc:	bl	1494c <__assert_fail@plt+0x327c>
   15600:	bl	11568 <exit@plt>
   15604:	movw	r0, #61768	; 0xf148
   15608:	movt	r0, #2
   1560c:	ldr	r0, [r0]
   15610:	cmp	r0, #1
   15614:	bxeq	lr
   15618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1561c:	add	fp, sp, #28
   15620:	sub	sp, sp, #36	; 0x24
   15624:	movw	r4, #62304	; 0xf360
   15628:	movt	r4, #2
   1562c:	ldr	r0, [r4, #76]	; 0x4c
   15630:	cmp	r0, #1
   15634:	blt	1566c <__assert_fail@plt+0x3f9c>
   15638:	movw	r0, #61904	; 0xf1d0
   1563c:	movt	r0, #2
   15640:	ldr	r0, [r0]
   15644:	ldr	r1, [r0, #20]
   15648:	ldr	r2, [r0, #24]
   1564c:	cmp	r1, r2
   15650:	bcs	15774 <__assert_fail@plt+0x40a4>
   15654:	add	r2, r1, #1
   15658:	str	r2, [r0, #20]
   1565c:	mov	r0, #10
   15660:	strb	r0, [r1]
   15664:	mov	r0, #0
   15668:	str	r0, [r4, #76]	; 0x4c
   1566c:	movw	sl, #61904	; 0xf1d0
   15670:	movw	r1, #54879	; 0xd65f
   15674:	mov	r0, #0
   15678:	mov	r2, #5
   1567c:	movt	sl, #2
   15680:	movt	r1, #1
   15684:	ldr	r8, [sl]
   15688:	bl	11430 <dcgettext@plt>
   1568c:	movw	r7, #62424	; 0xf3d8
   15690:	mov	ip, r0
   15694:	movt	r7, #2
   15698:	add	r6, r7, #32
   1569c:	ldm	r6, {r0, r1, r3, r6}
   156a0:	ldr	r2, [r7, #56]	; 0x38
   156a4:	ldr	r5, [r7, #48]	; 0x30
   156a8:	ldr	r4, [r7, #52]	; 0x34
   156ac:	ldr	lr, [r7, #60]	; 0x3c
   156b0:	stm	sp, {r0, r1, r3, r6}
   156b4:	str	r2, [sp, #24]
   156b8:	mov	r0, r8
   156bc:	mov	r1, #1
   156c0:	mov	r2, ip
   156c4:	str	r5, [sp, #16]
   156c8:	str	r4, [sp, #20]
   156cc:	str	lr, [sp, #28]
   156d0:	bl	115f8 <__fprintf_chk@plt>
   156d4:	ldrd	r8, [r7, #64]	; 0x40
   156d8:	orrs	r0, r8, r9
   156dc:	beq	15748 <__assert_fail@plt+0x4078>
   156e0:	ldr	r4, [sl]
   156e4:	cmp	r9, #0
   156e8:	beq	1570c <__assert_fail@plt+0x403c>
   156ec:	movw	r5, #16960	; 0x4240
   156f0:	mov	r0, r8
   156f4:	mov	r1, r9
   156f8:	mov	r3, #0
   156fc:	movt	r5, #15
   15700:	mov	r2, r5
   15704:	bl	1c25c <__assert_fail@plt+0xab8c>
   15708:	add	r8, r2, r5
   1570c:	movw	r1, #54923	; 0xd68b
   15710:	movw	r2, #54946	; 0xd6a2
   15714:	mov	r0, #5
   15718:	mov	r3, r8
   1571c:	str	r0, [sp]
   15720:	movt	r1, #1
   15724:	movt	r2, #1
   15728:	mov	r0, #0
   1572c:	bl	116b8 <dcngettext@plt>
   15730:	mov	r2, r0
   15734:	ldrd	r0, [r7, #64]	; 0x40
   15738:	stm	sp, {r0, r1}
   1573c:	mov	r0, r4
   15740:	mov	r1, #1
   15744:	bl	115f8 <__fprintf_chk@plt>
   15748:	movw	r0, #61768	; 0xf148
   1574c:	movt	r0, #2
   15750:	ldr	r0, [r0]
   15754:	cmp	r0, #2
   15758:	sub	sp, fp, #28
   1575c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15760:	bne	15768 <__assert_fail@plt+0x4098>
   15764:	bx	lr
   15768:	mov	r0, #0
   1576c:	mov	r1, #0
   15770:	b	15780 <__assert_fail@plt+0x40b0>
   15774:	mov	r1, #10
   15778:	bl	11628 <__overflow@plt>
   1577c:	b	15664 <__assert_fail@plt+0x3f94>
   15780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15784:	add	fp, sp, #28
   15788:	sub	sp, sp, #4
   1578c:	vpush	{d8-d9}
   15790:	sub	sp, sp, #2032	; 0x7f0
   15794:	mov	r6, r0
   15798:	orrs	r0, r0, r1
   1579c:	str	r0, [sp, #36]	; 0x24
   157a0:	bne	157ac <__assert_fail@plt+0x40dc>
   157a4:	bl	16cf4 <__assert_fail@plt+0x5624>
   157a8:	mov	r6, r0
   157ac:	movw	r9, #62424	; 0xf3d8
   157b0:	mov	r7, r1
   157b4:	add	r4, sp, #66	; 0x42
   157b8:	mov	r8, #0
   157bc:	mov	r5, #1
   157c0:	movw	r3, #465	; 0x1d1
   157c4:	movt	r9, #2
   157c8:	mov	r2, r4
   157cc:	ldrd	r0, [r9, #72]	; 0x48
   157d0:	stm	sp, {r5, r8}
   157d4:	str	r5, [sp, #8]
   157d8:	str	r8, [sp, #12]
   157dc:	bl	16d70 <__assert_fail@plt+0x56a0>
   157e0:	str	r0, [sp, #32]
   157e4:	ldrd	r0, [r9, #72]	; 0x48
   157e8:	movw	r2, #654	; 0x28e
   157ec:	movw	r3, #497	; 0x1f1
   157f0:	stm	sp, {r5, r8}
   157f4:	str	r5, [sp, #8]
   157f8:	str	r8, [sp, #12]
   157fc:	add	r2, r4, r2
   15800:	bl	16d70 <__assert_fail@plt+0x56a0>
   15804:	str	r0, [sp, #28]
   15808:	movw	r0, #1308	; 0x51c
   1580c:	add	r4, r4, r0
   15810:	ldrd	r0, [r9, #8]
   15814:	subs	r2, r0, r6
   15818:	sbcs	r2, r1, r7
   1581c:	bge	1588c <__assert_fail@plt+0x41bc>
   15820:	subs	r6, r6, r0
   15824:	sbc	r7, r7, r1
   15828:	mov	r0, r6
   1582c:	mov	r1, r7
   15830:	bl	1c128 <__assert_fail@plt+0xaa58>
   15834:	mov	r2, r4
   15838:	mov	r5, r0
   1583c:	mov	r4, r1
   15840:	ldrd	r0, [r9, #72]	; 0x48
   15844:	movw	r3, #51712	; 0xca00
   15848:	mov	sl, r9
   1584c:	movt	r3, #15258	; 0x3b9a
   15850:	stm	sp, {r3, r8}
   15854:	movw	r3, #465	; 0x1d1
   15858:	str	r6, [sp, #8]
   1585c:	str	r7, [sp, #12]
   15860:	bl	16d70 <__assert_fail@plt+0x56a0>
   15864:	vldr	d8, [pc, #684]	; 15b18 <__assert_fail@plt+0x4448>
   15868:	vmov	d9, r5, r4
   1586c:	movw	r6, #29487	; 0x732f
   15870:	mov	r4, r0
   15874:	bl	11574 <strlen@plt>
   15878:	mov	r1, r4
   1587c:	vdiv.f64	d8, d9, d8
   15880:	strh	r6, [r1, r0]!
   15884:	strb	r8, [r1, #2]
   15888:	b	158cc <__assert_fail@plt+0x41fc>
   1588c:	movw	r1, #54977	; 0xd6c1
   15890:	mov	r0, #0
   15894:	mov	r2, #5
   15898:	mov	sl, r9
   1589c:	movt	r1, #1
   158a0:	bl	11430 <dcgettext@plt>
   158a4:	movw	r1, #54970	; 0xd6ba
   158a8:	str	r0, [sp, #4]
   158ac:	mov	r0, r4
   158b0:	mov	r2, #1
   158b4:	movw	r3, #654	; 0x28e
   158b8:	movt	r1, #1
   158bc:	str	r1, [sp]
   158c0:	movw	r1, #654	; 0x28e
   158c4:	bl	116c4 <__snprintf_chk@plt>
   158c8:	vmov.i32	d8, #0	; 0x00000000
   158cc:	ldr	r7, [sp, #36]	; 0x24
   158d0:	ldr	r5, [sp, #32]
   158d4:	ldr	r6, [sp, #28]
   158d8:	cmp	r7, #0
   158dc:	beq	1590c <__assert_fail@plt+0x423c>
   158e0:	movw	r0, #61904	; 0xf1d0
   158e4:	movt	r0, #2
   158e8:	ldr	r0, [r0]
   158ec:	ldr	r1, [r0, #20]
   158f0:	ldr	r2, [r0, #24]
   158f4:	cmp	r1, r2
   158f8:	bcs	15afc <__assert_fail@plt+0x442c>
   158fc:	add	r2, r1, #1
   15900:	str	r2, [r0, #20]
   15904:	mov	r0, #13
   15908:	strb	r0, [r1]
   1590c:	movw	r0, #54986	; 0xd6ca
   15910:	movw	r1, #54993	; 0xd6d1
   15914:	cmp	r7, #0
   15918:	add	r8, sp, #42	; 0x2a
   1591c:	mov	r2, #1
   15920:	mov	r3, #24
   15924:	vstr	d8, [sp, #8]
   15928:	movt	r0, #1
   1592c:	movt	r1, #1
   15930:	movne	r1, r0
   15934:	mov	r0, r8
   15938:	str	r1, [sp]
   1593c:	mov	r1, #24
   15940:	bl	116c4 <__snprintf_chk@plt>
   15944:	mov	r0, r5
   15948:	bl	11574 <strlen@plt>
   1594c:	add	r0, r5, r0
   15950:	ldrb	r0, [r0, #-2]
   15954:	cmp	r0, #32
   15958:	bne	159d0 <__assert_fail@plt+0x4300>
   1595c:	movw	r0, #61904	; 0xf1d0
   15960:	ldr	r6, [sl, #72]	; 0x48
   15964:	ldr	r1, [sl, #76]	; 0x4c
   15968:	movt	r0, #2
   1596c:	ldr	r5, [r0]
   15970:	cmp	r1, #0
   15974:	beq	15994 <__assert_fail@plt+0x42c4>
   15978:	movw	r9, #16960	; 0x4240
   1597c:	mov	r0, r6
   15980:	mov	r3, #0
   15984:	movt	r9, #15
   15988:	mov	r2, r9
   1598c:	bl	1c25c <__assert_fail@plt+0xab8c>
   15990:	add	r6, r2, r9
   15994:	movw	r1, #54998	; 0xd6d6
   15998:	movw	r2, #55023	; 0xd6ef
   1599c:	mov	r0, #5
   159a0:	mov	r3, r6
   159a4:	str	r0, [sp]
   159a8:	movt	r1, #1
   159ac:	movt	r2, #1
   159b0:	mov	r0, #0
   159b4:	bl	116b8 <dcngettext@plt>
   159b8:	mov	r2, r0
   159bc:	ldrd	r0, [sl, #72]	; 0x48
   159c0:	stm	sp, {r0, r1, r8}
   159c4:	str	r4, [sp, #12]
   159c8:	mov	r0, r5
   159cc:	b	15a44 <__assert_fail@plt+0x4374>
   159d0:	mov	r0, r6
   159d4:	bl	11574 <strlen@plt>
   159d8:	add	r0, r6, r0
   159dc:	movw	r1, #61904	; 0xf1d0
   159e0:	ldrb	r0, [r0, #-2]
   159e4:	movt	r1, #2
   159e8:	ldr	r9, [r1]
   159ec:	cmp	r0, #32
   159f0:	bne	15a1c <__assert_fail@plt+0x434c>
   159f4:	movw	r1, #55049	; 0xd709
   159f8:	mov	r0, #0
   159fc:	mov	r2, #5
   15a00:	movt	r1, #1
   15a04:	bl	11430 <dcgettext@plt>
   15a08:	mov	r2, r0
   15a0c:	ldrd	r0, [sl, #72]	; 0x48
   15a10:	stm	sp, {r0, r1, r5, r8}
   15a14:	str	r4, [sp, #16]
   15a18:	b	15a40 <__assert_fail@plt+0x4370>
   15a1c:	movw	r1, #55080	; 0xd728
   15a20:	mov	r0, #0
   15a24:	mov	r2, #5
   15a28:	movt	r1, #1
   15a2c:	bl	11430 <dcgettext@plt>
   15a30:	mov	r2, r0
   15a34:	ldrd	r0, [sl, #72]	; 0x48
   15a38:	stm	sp, {r0, r1, r5, r6, r8}
   15a3c:	str	r4, [sp, #20]
   15a40:	mov	r0, r9
   15a44:	mov	r1, #1
   15a48:	bl	115f8 <__fprintf_chk@plt>
   15a4c:	mov	r4, r0
   15a50:	cmp	r7, #0
   15a54:	beq	15ab0 <__assert_fail@plt+0x43e0>
   15a58:	cmp	r4, #0
   15a5c:	blt	15aa0 <__assert_fail@plt+0x43d0>
   15a60:	movw	r0, #62304	; 0xf360
   15a64:	movt	r0, #2
   15a68:	ldr	r1, [r0, #76]	; 0x4c
   15a6c:	cmp	r1, r4
   15a70:	ble	15aa0 <__assert_fail@plt+0x43d0>
   15a74:	movw	r0, #61904	; 0xf1d0
   15a78:	movw	r2, #51789	; 0xca4d
   15a7c:	sub	r3, r1, r4
   15a80:	mov	r1, #1
   15a84:	movt	r0, #2
   15a88:	movt	r2, #1
   15a8c:	ldr	r0, [r0]
   15a90:	str	r2, [sp]
   15a94:	movw	r2, #55115	; 0xd74b
   15a98:	movt	r2, #1
   15a9c:	bl	115f8 <__fprintf_chk@plt>
   15aa0:	movw	r0, #62304	; 0xf360
   15aa4:	movt	r0, #2
   15aa8:	str	r4, [r0, #76]	; 0x4c
   15aac:	b	15adc <__assert_fail@plt+0x440c>
   15ab0:	movw	r0, #61904	; 0xf1d0
   15ab4:	movt	r0, #2
   15ab8:	ldr	r0, [r0]
   15abc:	ldr	r1, [r0, #20]
   15ac0:	ldr	r2, [r0, #24]
   15ac4:	cmp	r1, r2
   15ac8:	bcs	15b08 <__assert_fail@plt+0x4438>
   15acc:	add	r2, r1, #1
   15ad0:	str	r2, [r0, #20]
   15ad4:	mov	r0, #10
   15ad8:	strb	r0, [r1]
   15adc:	ldrd	r0, [sl, #72]	; 0x48
   15ae0:	movw	r2, #61768	; 0xf148
   15ae4:	movt	r2, #2
   15ae8:	strd	r0, [r2, #16]
   15aec:	sub	sp, fp, #48	; 0x30
   15af0:	vpop	{d8-d9}
   15af4:	add	sp, sp, #4
   15af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15afc:	mov	r1, #13
   15b00:	bl	11628 <__overflow@plt>
   15b04:	b	1590c <__assert_fail@plt+0x423c>
   15b08:	mov	r1, #10
   15b0c:	bl	11628 <__overflow@plt>
   15b10:	b	15adc <__assert_fail@plt+0x440c>
   15b14:	nop	{0}
   15b18:	andeq	r0, r0, r0
   15b1c:	bicmi	ip, sp, r5, ror #26
   15b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b24:	add	fp, sp, #28
   15b28:	sub	sp, sp, #692	; 0x2b4
   15b2c:	mov	r6, r3
   15b30:	mov	sl, r2
   15b34:	str	r1, [sp, #24]
   15b38:	str	r0, [sp, #28]
   15b3c:	bl	11598 <__errno_location@plt>
   15b40:	ldr	r9, [fp, #8]
   15b44:	mov	r5, r0
   15b48:	mov	r0, #0
   15b4c:	mvn	r4, #0
   15b50:	str	r0, [r5]
   15b54:	cmn	r9, #1
   15b58:	ble	15b94 <__assert_fail@plt+0x44c4>
   15b5c:	cmp	r9, #0
   15b60:	beq	15c28 <__assert_fail@plt+0x4558>
   15b64:	cmn	r6, #1
   15b68:	ble	15bcc <__assert_fail@plt+0x44fc>
   15b6c:	asr	r3, r9, #31
   15b70:	mvn	r0, #0
   15b74:	mvn	r1, #-2147483648	; 0x80000000
   15b78:	mov	r2, r9
   15b7c:	bl	1c188 <__assert_fail@plt+0xaab8>
   15b80:	mov	r8, #0
   15b84:	subs	r0, r0, sl
   15b88:	sbcs	r0, r1, r6
   15b8c:	bge	15c28 <__assert_fail@plt+0x4558>
   15b90:	b	15d34 <__assert_fail@plt+0x4664>
   15b94:	cmn	r6, #1
   15b98:	ble	15c04 <__assert_fail@plt+0x4534>
   15b9c:	cmn	r9, #1
   15ba0:	beq	15c28 <__assert_fail@plt+0x4558>
   15ba4:	asr	r3, r9, #31
   15ba8:	mov	r0, #0
   15bac:	mov	r1, #-2147483648	; 0x80000000
   15bb0:	mov	r2, r9
   15bb4:	mov	r8, #0
   15bb8:	bl	1c188 <__assert_fail@plt+0xaab8>
   15bbc:	subs	r0, r0, sl
   15bc0:	sbcs	r0, r1, r6
   15bc4:	bge	15c28 <__assert_fail@plt+0x4558>
   15bc8:	b	15d34 <__assert_fail@plt+0x4664>
   15bcc:	eor	r0, sl, r4
   15bd0:	eor	r1, r6, r4
   15bd4:	orrs	r0, r0, r1
   15bd8:	beq	15c28 <__assert_fail@plt+0x4558>
   15bdc:	mov	r0, #0
   15be0:	mov	r1, #-2147483648	; 0x80000000
   15be4:	mov	r2, sl
   15be8:	mov	r3, r6
   15bec:	mov	r8, #0
   15bf0:	bl	1c188 <__assert_fail@plt+0xaab8>
   15bf4:	subs	r0, r0, r9
   15bf8:	sbcs	r0, r1, r9, asr #31
   15bfc:	bge	15c28 <__assert_fail@plt+0x4558>
   15c00:	b	15d34 <__assert_fail@plt+0x4664>
   15c04:	asr	r3, r9, #31
   15c08:	mvn	r0, #0
   15c0c:	mvn	r1, #-2147483648	; 0x80000000
   15c10:	mov	r2, r9
   15c14:	bl	1c188 <__assert_fail@plt+0xaab8>
   15c18:	subs	r0, sl, r0
   15c1c:	mov	r8, #0
   15c20:	sbcs	r0, r6, r1
   15c24:	blt	15d34 <__assert_fail@plt+0x4664>
   15c28:	ldr	r2, [fp, #12]
   15c2c:	mov	ip, r5
   15c30:	umull	r0, r1, r9, sl
   15c34:	asr	r7, r9, #31
   15c38:	mov	r8, #0
   15c3c:	mla	r1, r9, r6, r1
   15c40:	mla	r1, r7, sl, r1
   15c44:	ldr	r5, [r2]
   15c48:	adds	r2, r0, r5
   15c4c:	mov	r0, #0
   15c50:	adc	r3, r1, r5, asr #31
   15c54:	asr	r5, r5, #31
   15c58:	cmn	r3, #1
   15c5c:	movwgt	r0, #1
   15c60:	cmn	r1, #1
   15c64:	mov	r1, #0
   15c68:	movwgt	r1, #1
   15c6c:	subs	r0, r1, r0
   15c70:	movwne	r0, #1
   15c74:	cmn	r5, #1
   15c78:	mov	r5, #0
   15c7c:	movwgt	r5, #1
   15c80:	sub	r1, r1, r5
   15c84:	mov	r5, ip
   15c88:	clz	r1, r1
   15c8c:	lsr	r1, r1, #5
   15c90:	tst	r1, r0
   15c94:	bne	15d34 <__assert_fail@plt+0x4664>
   15c98:	ldr	r8, [sp, #28]
   15c9c:	mov	r0, #1
   15ca0:	str	r7, [sp, #16]
   15ca4:	str	r2, [sp, #20]
   15ca8:	mov	r7, r3
   15cac:	str	r0, [sp]
   15cb0:	mov	r0, r8
   15cb4:	bl	1149c <lseek64@plt>
   15cb8:	subs	r0, r4, r0
   15cbc:	sbcs	r0, r4, r1
   15cc0:	bge	15d30 <__assert_fail@plt+0x4660>
   15cc4:	cmp	r8, #0
   15cc8:	bne	15eec <__assert_fail@plt+0x481c>
   15ccc:	add	r6, sp, #32
   15cd0:	bl	1545c <__assert_fail@plt+0x3d8c>
   15cd4:	mov	r0, #3
   15cd8:	mov	r1, #0
   15cdc:	mov	r2, r6
   15ce0:	bl	11478 <__fxstat64@plt>
   15ce4:	cmn	r0, #1
   15ce8:	bgt	15f0c <__assert_fail@plt+0x483c>
   15cec:	ldr	r4, [r5]
   15cf0:	cmp	r4, #4
   15cf4:	beq	15cd0 <__assert_fail@plt+0x4600>
   15cf8:	movw	r1, #53816	; 0xd238
   15cfc:	mov	r0, #0
   15d00:	mov	r2, #5
   15d04:	movt	r1, #1
   15d08:	bl	11430 <dcgettext@plt>
   15d0c:	ldr	r1, [sp, #24]
   15d10:	mov	r5, r0
   15d14:	mov	r0, #4
   15d18:	bl	194b4 <__assert_fail@plt+0x7de4>
   15d1c:	mov	r3, r0
   15d20:	mov	r0, #1
   15d24:	mov	r1, r4
   15d28:	mov	r2, r5
   15d2c:	bl	1494c <__assert_fail@plt+0x327c>
   15d30:	ldr	r8, [r5]
   15d34:	ldr	r7, [sp, #28]
   15d38:	mov	r0, #2
   15d3c:	mov	r2, #0
   15d40:	mov	r3, #0
   15d44:	str	r0, [sp]
   15d48:	mov	r0, r7
   15d4c:	bl	1149c <lseek64@plt>
   15d50:	subs	r0, r4, r0
   15d54:	sbcs	r0, r4, r1
   15d58:	blt	160dc <__assert_fail@plt+0x4a0c>
   15d5c:	cmp	r7, #0
   15d60:	str	r8, [sp, #16]
   15d64:	str	r5, [sp, #20]
   15d68:	beq	15de0 <__assert_fail@plt+0x4710>
   15d6c:	bl	16468 <__assert_fail@plt+0x4d98>
   15d70:	movw	r8, #62304	; 0xf360
   15d74:	movt	r8, #2
   15d78:	ldr	r7, [r8, #80]	; 0x50
   15d7c:	orrs	r4, sl, r6
   15d80:	mov	r5, r9
   15d84:	ldr	r3, [r8, #68]	; 0x44
   15d88:	mov	r1, r7
   15d8c:	ldreq	r0, [fp, #12]
   15d90:	ldreq	r9, [r0]
   15d94:	ldr	r0, [sp, #28]
   15d98:	mov	r2, r9
   15d9c:	blx	r3
   15da0:	cmn	r0, #1
   15da4:	ble	16034 <__assert_fail@plt+0x4964>
   15da8:	cmp	r0, #0
   15dac:	beq	15efc <__assert_fail@plt+0x482c>
   15db0:	cmp	r4, #0
   15db4:	beq	15eec <__assert_fail@plt+0x481c>
   15db8:	subs	sl, sl, #1
   15dbc:	mov	r9, r5
   15dc0:	sbc	r6, r6, #0
   15dc4:	orrs	r0, sl, r6
   15dc8:	bne	15d7c <__assert_fail@plt+0x46ac>
   15dcc:	ldr	r0, [fp, #12]
   15dd0:	ldr	r0, [r0]
   15dd4:	cmp	r0, #0
   15dd8:	bne	15d7c <__assert_fail@plt+0x46ac>
   15ddc:	b	15ee4 <__assert_fail@plt+0x4814>
   15de0:	movw	r8, #62304	; 0xf360
   15de4:	mov	r5, r9
   15de8:	movt	r8, #2
   15dec:	ldr	r7, [r8, #84]	; 0x54
   15df0:	cmp	r7, #0
   15df4:	bne	15e20 <__assert_fail@plt+0x4750>
   15df8:	ldr	r1, [r8, #36]	; 0x24
   15dfc:	ldr	r2, [r8, #56]	; 0x38
   15e00:	ldr	r0, [r8, #12]
   15e04:	ubfx	r1, r1, #7, #1
   15e08:	add	r1, r2, r1
   15e0c:	bl	1167c <aligned_alloc@plt>
   15e10:	mov	r7, r0
   15e14:	cmp	r0, #0
   15e18:	str	r0, [r8, #84]	; 0x54
   15e1c:	beq	16138 <__assert_fail@plt+0x4a68>
   15e20:	orrs	r9, sl, r6
   15e24:	mov	r2, r5
   15e28:	ldr	r3, [r8, #68]	; 0x44
   15e2c:	mov	r1, r7
   15e30:	ldreq	r0, [fp, #12]
   15e34:	ldreq	r2, [r0]
   15e38:	mov	r0, #0
   15e3c:	blx	r3
   15e40:	cmp	r0, #0
   15e44:	blt	16034 <__assert_fail@plt+0x4964>
   15e48:	beq	15efc <__assert_fail@plt+0x482c>
   15e4c:	ldr	r2, [r8, #104]	; 0x68
   15e50:	ldr	r1, [r8, #108]	; 0x6c
   15e54:	subs	r3, r4, r2
   15e58:	sbcs	r3, r4, r1
   15e5c:	bge	15ebc <__assert_fail@plt+0x47ec>
   15e60:	cmn	r1, #1
   15e64:	mov	r3, #0
   15e68:	mov	r4, #0
   15e6c:	movwgt	r3, #1
   15e70:	adds	r2, r2, r0
   15e74:	adc	r1, r1, r0, asr #31
   15e78:	asr	r0, r0, #31
   15e7c:	cmn	r1, #1
   15e80:	movwgt	r4, #1
   15e84:	subs	r4, r3, r4
   15e88:	movwne	r4, #1
   15e8c:	cmn	r0, #1
   15e90:	mov	r0, #0
   15e94:	movwgt	r0, #1
   15e98:	sub	r0, r3, r0
   15e9c:	clz	r0, r0
   15ea0:	lsr	r0, r0, #5
   15ea4:	ands	r0, r0, r4
   15ea8:	mvn	r4, #0
   15eac:	movne	r2, r4
   15eb0:	movne	r1, r4
   15eb4:	str	r2, [r8, #104]	; 0x68
   15eb8:	str	r1, [r8, #108]	; 0x6c
   15ebc:	cmp	r9, #0
   15ec0:	beq	15eec <__assert_fail@plt+0x481c>
   15ec4:	subs	sl, sl, #1
   15ec8:	sbc	r6, r6, #0
   15ecc:	orrs	r0, sl, r6
   15ed0:	bne	15e20 <__assert_fail@plt+0x4750>
   15ed4:	ldr	r0, [fp, #12]
   15ed8:	ldr	r0, [r0]
   15edc:	cmp	r0, #0
   15ee0:	bne	15e20 <__assert_fail@plt+0x4750>
   15ee4:	mov	sl, #0
   15ee8:	b	15ef8 <__assert_fail@plt+0x4828>
   15eec:	ldr	r0, [fp, #12]
   15ef0:	mov	sl, #0
   15ef4:	str	sl, [r0]
   15ef8:	mov	r6, #0
   15efc:	mov	r0, sl
   15f00:	mov	r1, r6
   15f04:	sub	sp, fp, #28
   15f08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f0c:	cmp	r0, #0
   15f10:	bne	16194 <__assert_fail@plt+0x4ac4>
   15f14:	ldr	r0, [sp, #48]	; 0x30
   15f18:	ldr	lr, [sp, #20]
   15f1c:	ldr	r3, [sp, #16]
   15f20:	mov	r5, r7
   15f24:	and	r0, r0, #53248	; 0xd000
   15f28:	orr	r0, r0, #8192	; 0x2000
   15f2c:	cmp	r0, #40960	; 0xa000
   15f30:	movw	r0, #62304	; 0xf360
   15f34:	movt	r0, #2
   15f38:	bne	15fa0 <__assert_fail@plt+0x48d0>
   15f3c:	ldr	r8, [r0, #104]	; 0x68
   15f40:	ldr	r4, [r0, #108]	; 0x6c
   15f44:	mvn	r1, #0
   15f48:	mov	sl, #0
   15f4c:	mov	r6, #0
   15f50:	subs	r0, r1, r8
   15f54:	sbcs	r0, r1, r4
   15f58:	bge	15efc <__assert_fail@plt+0x482c>
   15f5c:	ldr	r0, [sp, #80]	; 0x50
   15f60:	ldr	r1, [sp, #84]	; 0x54
   15f64:	mov	r2, r9
   15f68:	mov	sl, #0
   15f6c:	subs	r9, r0, r8
   15f70:	sbc	r6, r1, r4
   15f74:	subs	r7, r9, lr
   15f78:	sbcs	r7, r6, r5
   15f7c:	bge	15fc4 <__assert_fail@plt+0x48f4>
   15f80:	subs	r0, lr, r0
   15f84:	sbc	r1, r5, r1
   15f88:	mov	r5, r6
   15f8c:	bl	1c188 <__assert_fail@plt+0xaab8>
   15f90:	mov	sl, r0
   15f94:	mov	r6, r1
   15f98:	mov	lr, r9
   15f9c:	b	15fc8 <__assert_fail@plt+0x48f8>
   15fa0:	ldr	r8, [r0, #104]	; 0x68
   15fa4:	ldr	r4, [r0, #108]	; 0x6c
   15fa8:	mvn	ip, #0
   15fac:	mov	sl, #0
   15fb0:	mov	r6, #0
   15fb4:	subs	r0, ip, r8
   15fb8:	sbcs	r0, ip, r4
   15fbc:	bge	15efc <__assert_fail@plt+0x482c>
   15fc0:	b	15fcc <__assert_fail@plt+0x48fc>
   15fc4:	mov	r6, #0
   15fc8:	mvn	ip, #0
   15fcc:	cmn	r4, #1
   15fd0:	mov	r1, #0
   15fd4:	mov	r0, #0
   15fd8:	movwgt	r1, #1
   15fdc:	adds	r2, r8, lr
   15fe0:	adc	r3, r4, r5
   15fe4:	mov	r4, #0
   15fe8:	cmn	r3, #1
   15fec:	movwgt	r4, #1
   15ff0:	subs	r4, r1, r4
   15ff4:	movwne	r4, #1
   15ff8:	cmn	r5, #1
   15ffc:	movwgt	r0, #1
   16000:	sub	r0, r1, r0
   16004:	clz	r0, r0
   16008:	lsr	r0, r0, #5
   1600c:	ands	r0, r0, r4
   16010:	movw	r0, #62304	; 0xf360
   16014:	movne	r3, ip
   16018:	movne	r2, ip
   1601c:	movt	r0, #2
   16020:	strd	r2, [r0, #104]	; 0x68
   16024:	mov	r0, sl
   16028:	mov	r1, r6
   1602c:	sub	sp, fp, #28
   16030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16034:	ldr	r0, [sp, #28]
   16038:	cmp	r0, #0
   1603c:	bne	1609c <__assert_fail@plt+0x49cc>
   16040:	ldr	r0, [sp, #20]
   16044:	movw	r1, #55190	; 0xd796
   16048:	mov	r2, #5
   1604c:	movt	r1, #1
   16050:	ldr	r4, [r0]
   16054:	mov	r0, #0
   16058:	bl	11430 <dcgettext@plt>
   1605c:	ldr	r1, [sp, #24]
   16060:	mov	r5, r0
   16064:	mov	r0, #4
   16068:	bl	194b4 <__assert_fail@plt+0x7de4>
   1606c:	mov	r3, r0
   16070:	mov	r0, #0
   16074:	mov	r1, r4
   16078:	mov	r2, r5
   1607c:	bl	1494c <__assert_fail@plt+0x327c>
   16080:	movw	r0, #62304	; 0xf360
   16084:	movt	r0, #2
   16088:	ldrb	r0, [r0, #37]	; 0x25
   1608c:	tst	r0, #1
   16090:	beq	160d8 <__assert_fail@plt+0x4a08>
   16094:	bl	15604 <__assert_fail@plt+0x3f34>
   16098:	bl	16454 <__assert_fail@plt+0x4d84>
   1609c:	movw	r1, #55240	; 0xd7c8
   160a0:	mov	r0, #0
   160a4:	mov	r2, #5
   160a8:	movt	r1, #1
   160ac:	bl	11430 <dcgettext@plt>
   160b0:	ldr	r2, [sp, #24]
   160b4:	mov	r4, r0
   160b8:	mov	r0, #0
   160bc:	mov	r1, #3
   160c0:	bl	19730 <__assert_fail@plt+0x8060>
   160c4:	ldr	r1, [sp, #16]
   160c8:	mov	r3, r0
   160cc:	mov	r0, #0
   160d0:	mov	r2, r4
   160d4:	bl	1494c <__assert_fail@plt+0x327c>
   160d8:	bl	16454 <__assert_fail@plt+0x4d84>
   160dc:	mov	r5, r8
   160e0:	ldr	r8, [sp, #24]
   160e4:	cmp	r5, #0
   160e8:	movweq	r5, #75	; 0x4b
   160ec:	cmp	r7, #0
   160f0:	bne	16100 <__assert_fail@plt+0x4a30>
   160f4:	movw	r1, #55224	; 0xd7b8
   160f8:	movt	r1, #1
   160fc:	b	16108 <__assert_fail@plt+0x4a38>
   16100:	movw	r1, #55240	; 0xd7c8
   16104:	movt	r1, #1
   16108:	mov	r0, #0
   1610c:	mov	r2, #5
   16110:	bl	11430 <dcgettext@plt>
   16114:	mov	r4, r0
   16118:	mov	r0, #0
   1611c:	mov	r1, #3
   16120:	mov	r2, r8
   16124:	bl	19730 <__assert_fail@plt+0x8060>
   16128:	mov	r3, r0
   1612c:	mov	r0, #0
   16130:	mov	r1, r5
   16134:	b	160d0 <__assert_fail@plt+0x4a00>
   16138:	movw	r1, #55288	; 0xd7f8
   1613c:	mov	r0, #0
   16140:	mov	r2, #5
   16144:	mov	r6, #0
   16148:	movt	r1, #1
   1614c:	bl	11430 <dcgettext@plt>
   16150:	ldr	r5, [r8, #56]	; 0x38
   16154:	mov	r4, r0
   16158:	mov	r0, #1
   1615c:	add	r2, sp, #32
   16160:	movw	r3, #497	; 0x1f1
   16164:	stm	sp, {r0, r6}
   16168:	str	r0, [sp, #8]
   1616c:	str	r6, [sp, #12]
   16170:	asr	r1, r5, #31
   16174:	mov	r0, r5
   16178:	bl	16d70 <__assert_fail@plt+0x56a0>
   1617c:	str	r0, [sp]
   16180:	mov	r0, #1
   16184:	mov	r1, #0
   16188:	mov	r2, r4
   1618c:	mov	r3, r5
   16190:	bl	1494c <__assert_fail@plt+0x327c>
   16194:	ldr	r4, [r5]
   16198:	b	15cf8 <__assert_fail@plt+0x4628>
   1619c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161a0:	add	fp, sp, #28
   161a4:	sub	sp, sp, #20
   161a8:	movw	r7, #62304	; 0xf360
   161ac:	mov	r5, r0
   161b0:	mov	r4, r1
   161b4:	movt	r7, #2
   161b8:	ldr	r0, [r7, #32]
   161bc:	tst	r0, #65536	; 0x10000
   161c0:	beq	162f0 <__assert_fail@plt+0x4c20>
   161c4:	ldr	r0, [r7, #40]	; 0x28
   161c8:	cmp	r0, r4
   161cc:	ble	162f0 <__assert_fail@plt+0x4c20>
   161d0:	mov	r0, #1
   161d4:	mov	r1, #3
   161d8:	mov	sl, #1
   161dc:	bl	169a0 <__assert_fail@plt+0x52d0>
   161e0:	bic	r2, r0, #65536	; 0x10000
   161e4:	mov	r0, #1
   161e8:	mov	r1, #4
   161ec:	bl	169a0 <__assert_fail@plt+0x52d0>
   161f0:	movw	r9, #61768	; 0xf148
   161f4:	cmp	r0, #0
   161f8:	movt	r9, #2
   161fc:	ldrne	r0, [r9]
   16200:	cmpne	r0, #1
   16204:	beq	1624c <__assert_fail@plt+0x4b7c>
   16208:	bl	11598 <__errno_location@plt>
   1620c:	ldr	r8, [r0]
   16210:	movw	r1, #55256	; 0xd7d8
   16214:	mov	r0, #0
   16218:	mov	r2, #5
   1621c:	movt	r1, #1
   16220:	bl	11430 <dcgettext@plt>
   16224:	ldr	r2, [r7, #28]
   16228:	mov	r6, r0
   1622c:	mov	r0, #0
   16230:	mov	r1, #3
   16234:	bl	19730 <__assert_fail@plt+0x8060>
   16238:	mov	r3, r0
   1623c:	mov	r0, #0
   16240:	mov	r1, r8
   16244:	mov	r2, r6
   16248:	bl	1494c <__assert_fail@plt+0x327c>
   1624c:	ldrd	r0, [r9, #24]
   16250:	strb	sl, [r7, #5]
   16254:	and	r2, r0, r1
   16258:	cmn	r2, #1
   1625c:	beq	162e4 <__assert_fail@plt+0x4c14>
   16260:	movw	r2, #62424	; 0xf3d8
   16264:	cmn	r1, #1
   16268:	movt	r2, #2
   1626c:	ldr	r6, [r2, #88]	; 0x58
   16270:	ldr	r8, [r2, #92]	; 0x5c
   16274:	bgt	162a4 <__assert_fail@plt+0x4bd4>
   16278:	mov	r0, #1
   1627c:	mov	r2, #0
   16280:	mov	r3, #0
   16284:	mvn	sl, #0
   16288:	str	r0, [sp]
   1628c:	mov	r0, #1
   16290:	bl	1149c <lseek64@plt>
   16294:	subs	r2, sl, r0
   16298:	strd	r0, [r9, #24]
   1629c:	sbcs	r2, sl, r1
   162a0:	bge	162e4 <__assert_fail@plt+0x4c14>
   162a4:	ldr	r2, [r7, #12]
   162a8:	subs	r6, r0, r6
   162ac:	sbc	r8, r1, r8
   162b0:	mov	r0, r6
   162b4:	mov	r1, r8
   162b8:	asr	r3, r2, #31
   162bc:	bl	1c188 <__assert_fail@plt+0xaab8>
   162c0:	mov	r0, #4
   162c4:	subs	r2, r6, r2
   162c8:	mov	r1, #0
   162cc:	str	r0, [sp, #8]
   162d0:	sbc	r3, r8, r3
   162d4:	mov	r0, #1
   162d8:	str	r1, [sp]
   162dc:	str	r1, [sp, #4]
   162e0:	bl	11394 <posix_fadvise64@plt>
   162e4:	ldr	r0, [r7, #36]	; 0x24
   162e8:	orr	r0, r0, #32768	; 0x8000
   162ec:	str	r0, [r7, #36]	; 0x24
   162f0:	cmp	r4, #1
   162f4:	blt	1640c <__assert_fail@plt+0x4d3c>
   162f8:	asr	r0, r4, #31
   162fc:	sub	r9, r4, #1
   16300:	mov	sl, #0
   16304:	mov	r6, #0
   16308:	mov	r8, #1
   1630c:	str	r0, [sp, #16]
   16310:	b	16324 <__assert_fail@plt+0x4c54>
   16314:	ldr	r0, [r7, #36]	; 0x24
   16318:	bic	r0, r0, #65536	; 0x10000
   1631c:	str	r0, [r7, #36]	; 0x24
   16320:	b	1637c <__assert_fail@plt+0x4cac>
   16324:	bl	1545c <__assert_fail@plt+0x3d8c>
   16328:	strb	sl, [r7, #10]
   1632c:	ldrb	r0, [r7, #38]	; 0x26
   16330:	tst	r0, #1
   16334:	beq	1637c <__assert_fail@plt+0x4cac>
   16338:	mov	r0, #0
   1633c:	ldrb	r1, [r5, -r0]
   16340:	cmp	r1, #0
   16344:	bne	1637c <__assert_fail@plt+0x4cac>
   16348:	add	r1, r4, r0
   1634c:	cmp	r1, #1
   16350:	beq	163ac <__assert_fail@plt+0x4cdc>
   16354:	add	r1, r9, r0
   16358:	sub	r0, r0, #1
   1635c:	tst	r1, #15
   16360:	bne	1633c <__assert_fail@plt+0x4c6c>
   16364:	sub	r1, r5, r0
   16368:	add	r2, r4, r0
   1636c:	mov	r0, r5
   16370:	bl	11424 <memcmp@plt>
   16374:	cmp	r0, #0
   16378:	beq	163ac <__assert_fail@plt+0x4cdc>
   1637c:	add	r1, r5, r6
   16380:	sub	r2, r4, r6
   16384:	mov	r0, #1
   16388:	bl	115e0 <write@plt>
   1638c:	cmn	r0, #1
   16390:	ble	163d8 <__assert_fail@plt+0x4d08>
   16394:	cmp	r0, #0
   16398:	beq	1641c <__assert_fail@plt+0x4d4c>
   1639c:	add	r6, r0, r6
   163a0:	cmp	r6, r4
   163a4:	blt	16324 <__assert_fail@plt+0x4c54>
   163a8:	b	163f0 <__assert_fail@plt+0x4d20>
   163ac:	ldr	r3, [sp, #16]
   163b0:	mov	r0, #1
   163b4:	mov	r2, r4
   163b8:	str	r8, [sp]
   163bc:	bl	1149c <lseek64@plt>
   163c0:	cmn	r1, #1
   163c4:	ble	16314 <__assert_fail@plt+0x4c44>
   163c8:	strb	r8, [r7, #10]
   163cc:	mov	r0, r4
   163d0:	cmn	r0, #1
   163d4:	bgt	16394 <__assert_fail@plt+0x4cc4>
   163d8:	bl	11598 <__errno_location@plt>
   163dc:	ldr	r0, [r0]
   163e0:	cmp	r0, #4
   163e4:	bne	163f0 <__assert_fail@plt+0x4d20>
   163e8:	cmp	r6, r4
   163ec:	blt	16324 <__assert_fail@plt+0x4c54>
   163f0:	cmp	r6, #0
   163f4:	ldrbne	r0, [r7, #3]
   163f8:	cmpne	r0, #0
   163fc:	bne	16438 <__assert_fail@plt+0x4d68>
   16400:	mov	r0, r6
   16404:	sub	sp, fp, #28
   16408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1640c:	mov	r6, #0
   16410:	mov	r0, r6
   16414:	sub	sp, fp, #28
   16418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1641c:	bl	11598 <__errno_location@plt>
   16420:	mov	r1, #28
   16424:	str	r1, [r0]
   16428:	cmp	r6, #0
   1642c:	ldrbne	r0, [r7, #3]
   16430:	cmpne	r0, #0
   16434:	beq	16400 <__assert_fail@plt+0x4d30>
   16438:	asr	r3, r6, #31
   1643c:	mov	r0, #1
   16440:	mov	r2, r6
   16444:	bl	14b2c <__assert_fail@plt+0x345c>
   16448:	mov	r0, r6
   1644c:	sub	sp, fp, #28
   16450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16454:	push	{fp, lr}
   16458:	mov	fp, sp
   1645c:	bl	14e8c <__assert_fail@plt+0x37bc>
   16460:	mov	r0, #1
   16464:	bl	11568 <exit@plt>
   16468:	push	{r4, r5, r6, sl, fp, lr}
   1646c:	add	fp, sp, #16
   16470:	sub	sp, sp, #672	; 0x2a0
   16474:	movw	r5, #62304	; 0xf360
   16478:	movt	r5, #2
   1647c:	ldr	r0, [r5, #80]	; 0x50
   16480:	cmp	r0, #0
   16484:	bne	164e4 <__assert_fail@plt+0x4e14>
   16488:	ldr	r1, [r5, #36]	; 0x24
   1648c:	tst	r1, #2048	; 0x800
   16490:	bne	164cc <__assert_fail@plt+0x4dfc>
   16494:	ldr	r0, [r5, #84]	; 0x54
   16498:	cmp	r0, #0
   1649c:	bne	164c0 <__assert_fail@plt+0x4df0>
   164a0:	ldr	r2, [r5, #56]	; 0x38
   164a4:	ldr	r0, [r5, #12]
   164a8:	ubfx	r1, r1, #7, #1
   164ac:	add	r1, r2, r1
   164b0:	bl	1167c <aligned_alloc@plt>
   164b4:	cmp	r0, #0
   164b8:	str	r0, [r5, #84]	; 0x54
   164bc:	beq	1650c <__assert_fail@plt+0x4e3c>
   164c0:	str	r0, [r5, #80]	; 0x50
   164c4:	sub	sp, fp, #16
   164c8:	pop	{r4, r5, r6, sl, fp, pc}
   164cc:	ldr	r0, [r5, #12]
   164d0:	ldr	r1, [r5, #40]	; 0x28
   164d4:	bl	1167c <aligned_alloc@plt>
   164d8:	cmp	r0, #0
   164dc:	str	r0, [r5, #80]	; 0x50
   164e0:	beq	164ec <__assert_fail@plt+0x4e1c>
   164e4:	sub	sp, fp, #16
   164e8:	pop	{r4, r5, r6, sl, fp, pc}
   164ec:	movw	r1, #55344	; 0xd830
   164f0:	mov	r0, #0
   164f4:	mov	r2, #5
   164f8:	mov	r6, #0
   164fc:	movt	r1, #1
   16500:	bl	11430 <dcgettext@plt>
   16504:	ldr	r5, [r5, #40]	; 0x28
   16508:	b	16528 <__assert_fail@plt+0x4e58>
   1650c:	movw	r1, #55288	; 0xd7f8
   16510:	mov	r0, #0
   16514:	mov	r2, #5
   16518:	mov	r6, #0
   1651c:	movt	r1, #1
   16520:	bl	11430 <dcgettext@plt>
   16524:	ldr	r5, [r5, #56]	; 0x38
   16528:	mov	r4, r0
   1652c:	mov	r0, #1
   16530:	asr	r1, r5, #31
   16534:	add	r2, sp, #20
   16538:	movw	r3, #497	; 0x1f1
   1653c:	stm	sp, {r0, r6}
   16540:	str	r0, [sp, #8]
   16544:	mov	r0, r5
   16548:	str	r6, [sp, #12]
   1654c:	bl	16d70 <__assert_fail@plt+0x56a0>
   16550:	str	r0, [sp]
   16554:	mov	r0, #1
   16558:	mov	r1, #0
   1655c:	mov	r2, r4
   16560:	mov	r3, r5
   16564:	bl	1494c <__assert_fail@plt+0x327c>
   16568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1656c:	add	fp, sp, #28
   16570:	sub	sp, sp, #4
   16574:	cmp	r1, #1
   16578:	blt	166b0 <__assert_fail@plt+0x4fe0>
   1657c:	movw	r7, #62304	; 0xf360
   16580:	mov	sl, r1
   16584:	mov	r9, r0
   16588:	mov	r8, #0
   1658c:	mov	r6, #0
   16590:	movt	r7, #2
   16594:	ldr	r1, [r7, #92]	; 0x5c
   16598:	ldr	r0, [r7, #60]	; 0x3c
   1659c:	ldrb	r5, [r9, r6]
   165a0:	add	r2, r1, #1
   165a4:	cmp	r1, r0
   165a8:	str	r2, [r7, #92]	; 0x5c
   165ac:	bge	165e4 <__assert_fail@plt+0x4f14>
   165b0:	ldrb	r1, [r7, #9]
   165b4:	ldr	r0, [r7, #96]	; 0x60
   165b8:	mov	r2, #32
   165bc:	cmp	r1, #0
   165c0:	movwne	r2, #64	; 0x40
   165c4:	cmp	r2, r5
   165c8:	bne	16630 <__assert_fail@plt+0x4f60>
   165cc:	add	r0, r0, #1
   165d0:	str	r0, [r7, #96]	; 0x60
   165d4:	add	r6, r6, #1
   165d8:	cmp	r6, sl
   165dc:	blt	16594 <__assert_fail@plt+0x4ec4>
   165e0:	b	166b0 <__assert_fail@plt+0x4fe0>
   165e4:	str	r8, [r7, #92]	; 0x5c
   165e8:	str	r8, [r7, #96]	; 0x60
   165ec:	sub	r6, r6, #1
   165f0:	ldr	r0, [r7, #88]	; 0x58
   165f4:	add	r1, r0, #1
   165f8:	str	r1, [r7, #88]	; 0x58
   165fc:	ldrb	r2, [r7, #8]
   16600:	ldr	r3, [r7, #80]	; 0x50
   16604:	cmp	r2, #0
   16608:	mov	r2, #10
   1660c:	movwne	r2, #37	; 0x25
   16610:	strb	r2, [r3, r0]
   16614:	ldr	r0, [r7, #40]	; 0x28
   16618:	cmp	r1, r0
   1661c:	blge	166b8 <__assert_fail@plt+0x4fe8>
   16620:	add	r6, r6, #1
   16624:	cmp	r6, sl
   16628:	blt	16594 <__assert_fail@plt+0x4ec4>
   1662c:	b	166b0 <__assert_fail@plt+0x4fe0>
   16630:	cmp	r0, #0
   16634:	bne	16640 <__assert_fail@plt+0x4f70>
   16638:	b	16680 <__assert_fail@plt+0x4fb0>
   1663c:	ldrb	r1, [r7, #9]
   16640:	ldr	r3, [r7, #88]	; 0x58
   16644:	ldr	r2, [r7, #80]	; 0x50
   16648:	tst	r1, #1
   1664c:	mov	r1, #32
   16650:	movwne	r1, #64	; 0x40
   16654:	add	r4, r3, #1
   16658:	str	r4, [r7, #88]	; 0x58
   1665c:	strb	r1, [r2, r3]
   16660:	ldr	r1, [r7, #40]	; 0x28
   16664:	cmp	r4, r1
   16668:	blt	16674 <__assert_fail@plt+0x4fa4>
   1666c:	bl	166b8 <__assert_fail@plt+0x4fe8>
   16670:	ldr	r0, [r7, #96]	; 0x60
   16674:	subs	r0, r0, #1
   16678:	str	r0, [r7, #96]	; 0x60
   1667c:	bne	1663c <__assert_fail@plt+0x4f6c>
   16680:	ldr	r1, [r7, #88]	; 0x58
   16684:	ldr	r0, [r7, #80]	; 0x50
   16688:	add	r2, r1, #1
   1668c:	str	r2, [r7, #88]	; 0x58
   16690:	strb	r5, [r0, r1]
   16694:	ldr	r0, [r7, #40]	; 0x28
   16698:	cmp	r2, r0
   1669c:	blt	16620 <__assert_fail@plt+0x4f50>
   166a0:	bl	166b8 <__assert_fail@plt+0x4fe8>
   166a4:	add	r6, r6, #1
   166a8:	cmp	r6, sl
   166ac:	blt	16594 <__assert_fail@plt+0x4ec4>
   166b0:	sub	sp, fp, #28
   166b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   166bc:	add	fp, sp, #24
   166c0:	movw	r5, #62304	; 0xf360
   166c4:	movt	r5, #2
   166c8:	ldr	r1, [r5, #40]	; 0x28
   166cc:	ldr	r0, [r5, #80]	; 0x50
   166d0:	bl	1619c <__assert_fail@plt+0x4acc>
   166d4:	movw	r7, #62424	; 0xf3d8
   166d8:	mov	r4, r0
   166dc:	movt	r7, #2
   166e0:	ldrd	r0, [r7, #72]	; 0x48
   166e4:	adds	r0, r0, r4
   166e8:	adc	r1, r1, r4, asr #31
   166ec:	strd	r0, [r7, #72]	; 0x48
   166f0:	ldr	r0, [r5, #40]	; 0x28
   166f4:	cmp	r4, r0
   166f8:	bne	16718 <__assert_fail@plt+0x5048>
   166fc:	mov	r0, #0
   16700:	str	r0, [r5, #88]	; 0x58
   16704:	ldrd	r0, [r7, #48]	; 0x30
   16708:	adds	r0, r0, #1
   1670c:	adc	r1, r1, #0
   16710:	strd	r0, [r7, #48]	; 0x30
   16714:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16718:	bl	11598 <__errno_location@plt>
   1671c:	ldr	r8, [r0]
   16720:	movw	r1, #55176	; 0xd788
   16724:	mov	r0, #0
   16728:	mov	r2, #5
   1672c:	movt	r1, #1
   16730:	bl	11430 <dcgettext@plt>
   16734:	ldr	r1, [r5, #28]
   16738:	mov	r6, r0
   1673c:	mov	r0, #4
   16740:	bl	194b4 <__assert_fail@plt+0x7de4>
   16744:	mov	r3, r0
   16748:	mov	r0, #0
   1674c:	mov	r1, r8
   16750:	mov	r2, r6
   16754:	bl	1494c <__assert_fail@plt+0x327c>
   16758:	cmp	r4, #0
   1675c:	beq	16770 <__assert_fail@plt+0x50a0>
   16760:	ldrd	r0, [r7, #56]	; 0x38
   16764:	adds	r0, r0, #1
   16768:	adc	r1, r1, #0
   1676c:	strd	r0, [r7, #56]	; 0x38
   16770:	bl	16454 <__assert_fail@plt+0x4d84>
   16774:	push	{r4, r5, r6, sl, fp, lr}
   16778:	add	fp, sp, #16
   1677c:	mov	r4, r0
   16780:	bl	114b4 <__fpending@plt>
   16784:	ldr	r6, [r4]
   16788:	mov	r5, r0
   1678c:	mov	r0, r4
   16790:	bl	16904 <__assert_fail@plt+0x5234>
   16794:	tst	r6, #32
   16798:	bne	167d0 <__assert_fail@plt+0x5100>
   1679c:	cmp	r0, #0
   167a0:	mov	r4, r0
   167a4:	mvnne	r4, #0
   167a8:	cmp	r5, #0
   167ac:	bne	167dc <__assert_fail@plt+0x510c>
   167b0:	cmp	r0, #0
   167b4:	beq	167dc <__assert_fail@plt+0x510c>
   167b8:	bl	11598 <__errno_location@plt>
   167bc:	ldr	r0, [r0]
   167c0:	subs	r4, r0, #9
   167c4:	mvnne	r4, #0
   167c8:	mov	r0, r4
   167cc:	pop	{r4, r5, r6, sl, fp, pc}
   167d0:	mvn	r4, #0
   167d4:	cmp	r0, #0
   167d8:	beq	167e4 <__assert_fail@plt+0x5114>
   167dc:	mov	r0, r4
   167e0:	pop	{r4, r5, r6, sl, fp, pc}
   167e4:	bl	11598 <__errno_location@plt>
   167e8:	mov	r1, #0
   167ec:	str	r1, [r0]
   167f0:	mov	r0, r4
   167f4:	pop	{r4, r5, r6, sl, fp, pc}
   167f8:	movw	r1, #62520	; 0xf438
   167fc:	movt	r1, #2
   16800:	str	r0, [r1, #4]
   16804:	bx	lr
   16808:	movw	r1, #62520	; 0xf438
   1680c:	movt	r1, #2
   16810:	strb	r0, [r1]
   16814:	bx	lr
   16818:	push	{r4, r5, r6, sl, fp, lr}
   1681c:	add	fp, sp, #16
   16820:	sub	sp, sp, #8
   16824:	movw	r0, #61908	; 0xf1d4
   16828:	movt	r0, #2
   1682c:	ldr	r0, [r0]
   16830:	bl	16774 <__assert_fail@plt+0x50a4>
   16834:	cmp	r0, #0
   16838:	beq	16860 <__assert_fail@plt+0x5190>
   1683c:	movw	r5, #62520	; 0xf438
   16840:	movt	r5, #2
   16844:	ldrb	r0, [r5]
   16848:	cmp	r0, #0
   1684c:	beq	1688c <__assert_fail@plt+0x51bc>
   16850:	bl	11598 <__errno_location@plt>
   16854:	ldr	r0, [r0]
   16858:	cmp	r0, #32
   1685c:	bne	1688c <__assert_fail@plt+0x51bc>
   16860:	movw	r0, #61904	; 0xf1d0
   16864:	movt	r0, #2
   16868:	ldr	r0, [r0]
   1686c:	bl	16774 <__assert_fail@plt+0x50a4>
   16870:	cmp	r0, #0
   16874:	subeq	sp, fp, #16
   16878:	popeq	{r4, r5, r6, sl, fp, pc}
   1687c:	movw	r0, #61804	; 0xf16c
   16880:	movt	r0, #2
   16884:	ldr	r0, [r0]
   16888:	bl	113e8 <_exit@plt>
   1688c:	movw	r1, #57055	; 0xdedf
   16890:	mov	r0, #0
   16894:	mov	r2, #5
   16898:	movt	r1, #1
   1689c:	bl	11430 <dcgettext@plt>
   168a0:	ldr	r6, [r5, #4]
   168a4:	mov	r4, r0
   168a8:	bl	11598 <__errno_location@plt>
   168ac:	ldr	r5, [r0]
   168b0:	cmp	r6, #0
   168b4:	bne	168d0 <__assert_fail@plt+0x5200>
   168b8:	movw	r2, #55112	; 0xd748
   168bc:	mov	r0, #0
   168c0:	mov	r1, r5
   168c4:	mov	r3, r4
   168c8:	movt	r2, #1
   168cc:	b	168f0 <__assert_fail@plt+0x5220>
   168d0:	mov	r0, r6
   168d4:	bl	19654 <__assert_fail@plt+0x7f84>
   168d8:	movw	r2, #54407	; 0xd487
   168dc:	mov	r3, r0
   168e0:	str	r4, [sp]
   168e4:	mov	r0, #0
   168e8:	mov	r1, r5
   168ec:	movt	r2, #1
   168f0:	bl	114cc <error@plt>
   168f4:	movw	r0, #61804	; 0xf16c
   168f8:	movt	r0, #2
   168fc:	ldr	r0, [r0]
   16900:	bl	113e8 <_exit@plt>
   16904:	push	{r4, r5, r6, sl, fp, lr}
   16908:	add	fp, sp, #16
   1690c:	sub	sp, sp, #8
   16910:	mov	r4, r0
   16914:	bl	115ec <fileno@plt>
   16918:	cmn	r0, #1
   1691c:	ble	16990 <__assert_fail@plt+0x52c0>
   16920:	mov	r0, r4
   16924:	bl	11520 <__freading@plt>
   16928:	cmp	r0, #0
   1692c:	beq	16958 <__assert_fail@plt+0x5288>
   16930:	mov	r0, r4
   16934:	bl	115ec <fileno@plt>
   16938:	mov	r1, #1
   1693c:	mov	r2, #0
   16940:	mov	r3, #0
   16944:	str	r1, [sp]
   16948:	bl	1149c <lseek64@plt>
   1694c:	and	r0, r0, r1
   16950:	cmn	r0, #1
   16954:	beq	16990 <__assert_fail@plt+0x52c0>
   16958:	mov	r0, r4
   1695c:	bl	16be8 <__assert_fail@plt+0x5518>
   16960:	cmp	r0, #0
   16964:	beq	16990 <__assert_fail@plt+0x52c0>
   16968:	bl	11598 <__errno_location@plt>
   1696c:	ldr	r6, [r0]
   16970:	mov	r5, r0
   16974:	mov	r0, r4
   16978:	bl	11604 <fclose@plt>
   1697c:	cmp	r6, #0
   16980:	strne	r6, [r5]
   16984:	mvnne	r0, #0
   16988:	sub	sp, fp, #16
   1698c:	pop	{r4, r5, r6, sl, fp, pc}
   16990:	mov	r0, r4
   16994:	sub	sp, fp, #16
   16998:	pop	{r4, r5, r6, sl, fp, lr}
   1699c:	b	11604 <fclose@plt>
   169a0:	sub	sp, sp, #8
   169a4:	push	{r4, r5, r6, r7, fp, lr}
   169a8:	add	fp, sp, #16
   169ac:	sub	sp, sp, #8
   169b0:	mov	r5, r0
   169b4:	add	r0, fp, #8
   169b8:	cmp	r1, #11
   169bc:	str	r3, [fp, #12]
   169c0:	str	r2, [fp, #8]
   169c4:	str	r0, [sp, #4]
   169c8:	bhi	16a04 <__assert_fail@plt+0x5334>
   169cc:	mov	r0, #1
   169d0:	movw	r2, #1300	; 0x514
   169d4:	tst	r2, r0, lsl r1
   169d8:	bne	16ac4 <__assert_fail@plt+0x53f4>
   169dc:	movw	r2, #2570	; 0xa0a
   169e0:	tst	r2, r0, lsl r1
   169e4:	bne	16a2c <__assert_fail@plt+0x535c>
   169e8:	cmp	r1, #0
   169ec:	bne	16a04 <__assert_fail@plt+0x5334>
   169f0:	ldr	r0, [sp, #4]
   169f4:	add	r1, r0, #4
   169f8:	str	r1, [sp, #4]
   169fc:	mov	r1, #0
   16a00:	b	16ad0 <__assert_fail@plt+0x5400>
   16a04:	sub	r0, r1, #1024	; 0x400
   16a08:	cmp	r0, #10
   16a0c:	bhi	16ac4 <__assert_fail@plt+0x53f4>
   16a10:	mov	r2, #1
   16a14:	movw	r3, #645	; 0x285
   16a18:	tst	r3, r2, lsl r0
   16a1c:	bne	16ac4 <__assert_fail@plt+0x53f4>
   16a20:	movw	r3, #1282	; 0x502
   16a24:	tst	r3, r2, lsl r0
   16a28:	beq	16a38 <__assert_fail@plt+0x5368>
   16a2c:	mov	r0, r5
   16a30:	bl	1161c <fcntl64@plt>
   16a34:	b	16adc <__assert_fail@plt+0x540c>
   16a38:	cmp	r0, #6
   16a3c:	bne	16ac4 <__assert_fail@plt+0x53f4>
   16a40:	ldr	r0, [sp, #4]
   16a44:	movw	r7, #62528	; 0xf440
   16a48:	movt	r7, #2
   16a4c:	add	r1, r0, #4
   16a50:	str	r1, [sp, #4]
   16a54:	ldr	r6, [r0]
   16a58:	ldr	r0, [r7]
   16a5c:	cmp	r0, #0
   16a60:	blt	16b00 <__assert_fail@plt+0x5430>
   16a64:	mov	r0, r5
   16a68:	movw	r1, #1030	; 0x406
   16a6c:	mov	r2, r6
   16a70:	bl	1161c <fcntl64@plt>
   16a74:	mov	r4, r0
   16a78:	cmn	r0, #1
   16a7c:	bgt	16af4 <__assert_fail@plt+0x5424>
   16a80:	bl	11598 <__errno_location@plt>
   16a84:	ldr	r0, [r0]
   16a88:	cmp	r0, #22
   16a8c:	bne	16af4 <__assert_fail@plt+0x5424>
   16a90:	mov	r0, r5
   16a94:	mov	r1, #0
   16a98:	mov	r2, r6
   16a9c:	bl	1161c <fcntl64@plt>
   16aa0:	mov	r4, r0
   16aa4:	cmp	r0, #0
   16aa8:	blt	16ae0 <__assert_fail@plt+0x5410>
   16aac:	mvn	r0, #0
   16ab0:	str	r0, [r7]
   16ab4:	mov	r0, #1
   16ab8:	cmp	r0, #0
   16abc:	bne	16b2c <__assert_fail@plt+0x545c>
   16ac0:	b	16ae0 <__assert_fail@plt+0x5410>
   16ac4:	ldr	r0, [sp, #4]
   16ac8:	add	r2, r0, #4
   16acc:	str	r2, [sp, #4]
   16ad0:	ldr	r2, [r0]
   16ad4:	mov	r0, r5
   16ad8:	bl	1161c <fcntl64@plt>
   16adc:	mov	r4, r0
   16ae0:	mov	r0, r4
   16ae4:	sub	sp, fp, #16
   16ae8:	pop	{r4, r5, r6, r7, fp, lr}
   16aec:	add	sp, sp, #8
   16af0:	bx	lr
   16af4:	mov	r0, #1
   16af8:	str	r0, [r7]
   16afc:	b	16ae0 <__assert_fail@plt+0x5410>
   16b00:	mov	r0, r5
   16b04:	mov	r1, #0
   16b08:	mov	r2, r6
   16b0c:	bl	1161c <fcntl64@plt>
   16b10:	mov	r4, r0
   16b14:	ldr	r0, [r7]
   16b18:	add	r0, r0, #1
   16b1c:	clz	r0, r0
   16b20:	lsr	r0, r0, #5
   16b24:	cmp	r0, #0
   16b28:	beq	16ae0 <__assert_fail@plt+0x5410>
   16b2c:	cmp	r4, #0
   16b30:	blt	16ae0 <__assert_fail@plt+0x5410>
   16b34:	mov	r0, r4
   16b38:	mov	r1, #1
   16b3c:	bl	1161c <fcntl64@plt>
   16b40:	cmp	r0, #0
   16b44:	blt	16b60 <__assert_fail@plt+0x5490>
   16b48:	orr	r2, r0, #1
   16b4c:	mov	r0, r4
   16b50:	mov	r1, #2
   16b54:	bl	1161c <fcntl64@plt>
   16b58:	cmn	r0, #1
   16b5c:	bne	16ae0 <__assert_fail@plt+0x5410>
   16b60:	bl	11598 <__errno_location@plt>
   16b64:	ldr	r6, [r0]
   16b68:	mov	r5, r0
   16b6c:	mov	r0, r4
   16b70:	bl	116ac <close@plt>
   16b74:	str	r6, [r5]
   16b78:	mvn	r4, #0
   16b7c:	b	16ae0 <__assert_fail@plt+0x5410>
   16b80:	push	{r4, r5, r6, r7, fp, lr}
   16b84:	add	fp, sp, #16
   16b88:	mov	r5, r0
   16b8c:	mov	r0, r1
   16b90:	mov	r1, r2
   16b94:	mov	r2, r3
   16b98:	bl	114d8 <open64@plt>
   16b9c:	mov	r4, r0
   16ba0:	cmp	r0, r5
   16ba4:	beq	16be0 <__assert_fail@plt+0x5510>
   16ba8:	cmp	r4, #0
   16bac:	blt	16be0 <__assert_fail@plt+0x5510>
   16bb0:	mov	r0, r4
   16bb4:	mov	r1, r5
   16bb8:	bl	1143c <dup2@plt>
   16bbc:	mov	r5, r0
   16bc0:	bl	11598 <__errno_location@plt>
   16bc4:	ldr	r7, [r0]
   16bc8:	mov	r6, r0
   16bcc:	mov	r0, r4
   16bd0:	bl	116ac <close@plt>
   16bd4:	mov	r0, r5
   16bd8:	str	r7, [r6]
   16bdc:	pop	{r4, r5, r6, r7, fp, pc}
   16be0:	mov	r0, r4
   16be4:	pop	{r4, r5, r6, r7, fp, pc}
   16be8:	push	{r4, sl, fp, lr}
   16bec:	add	fp, sp, #8
   16bf0:	sub	sp, sp, #8
   16bf4:	mov	r4, r0
   16bf8:	cmp	r0, #0
   16bfc:	beq	16c18 <__assert_fail@plt+0x5548>
   16c00:	mov	r0, r4
   16c04:	bl	11520 <__freading@plt>
   16c08:	cmp	r0, #0
   16c0c:	ldrbne	r0, [r4, #1]
   16c10:	tstne	r0, #1
   16c14:	bne	16c28 <__assert_fail@plt+0x5558>
   16c18:	mov	r0, r4
   16c1c:	sub	sp, fp, #8
   16c20:	pop	{r4, sl, fp, lr}
   16c24:	b	113ac <fflush@plt>
   16c28:	mov	r0, #1
   16c2c:	mov	r2, #0
   16c30:	mov	r3, #0
   16c34:	str	r0, [sp]
   16c38:	mov	r0, r4
   16c3c:	bl	16c50 <__assert_fail@plt+0x5580>
   16c40:	mov	r0, r4
   16c44:	sub	sp, fp, #8
   16c48:	pop	{r4, sl, fp, lr}
   16c4c:	b	113ac <fflush@plt>
   16c50:	push	{r4, r5, r6, r7, fp, lr}
   16c54:	add	fp, sp, #16
   16c58:	sub	sp, sp, #8
   16c5c:	mov	r4, r0
   16c60:	ldr	r0, [r0, #4]
   16c64:	mov	r5, r3
   16c68:	mov	r6, r2
   16c6c:	ldr	r1, [r4, #8]
   16c70:	cmp	r1, r0
   16c74:	bne	16c90 <__assert_fail@plt+0x55c0>
   16c78:	ldrd	r0, [r4, #16]
   16c7c:	cmp	r1, r0
   16c80:	bne	16c90 <__assert_fail@plt+0x55c0>
   16c84:	ldr	r0, [r4, #36]	; 0x24
   16c88:	cmp	r0, #0
   16c8c:	beq	16ca8 <__assert_fail@plt+0x55d8>
   16c90:	mov	r0, r4
   16c94:	mov	r2, r6
   16c98:	mov	r3, r5
   16c9c:	sub	sp, fp, #16
   16ca0:	pop	{r4, r5, r6, r7, fp, lr}
   16ca4:	b	11610 <fseeko64@plt>
   16ca8:	ldr	r7, [fp, #8]
   16cac:	mov	r0, r4
   16cb0:	bl	115ec <fileno@plt>
   16cb4:	mov	r2, r6
   16cb8:	mov	r3, r5
   16cbc:	str	r7, [sp]
   16cc0:	bl	1149c <lseek64@plt>
   16cc4:	and	r2, r0, r1
   16cc8:	cmn	r2, #1
   16ccc:	mvneq	r0, #0
   16cd0:	subeq	sp, fp, #16
   16cd4:	popeq	{r4, r5, r6, r7, fp, pc}
   16cd8:	strd	r0, [r4, #80]	; 0x50
   16cdc:	ldr	r0, [r4]
   16ce0:	bic	r0, r0, #16
   16ce4:	str	r0, [r4]
   16ce8:	mov	r0, #0
   16cec:	sub	sp, fp, #16
   16cf0:	pop	{r4, r5, r6, r7, fp, pc}
   16cf4:	push	{r4, sl, fp, lr}
   16cf8:	add	fp, sp, #8
   16cfc:	sub	sp, sp, #8
   16d00:	mov	r1, sp
   16d04:	mov	r0, #1
   16d08:	bl	113dc <clock_gettime@plt>
   16d0c:	movw	r4, #51712	; 0xca00
   16d10:	cmp	r0, #0
   16d14:	movt	r4, #15258	; 0x3b9a
   16d18:	beq	16d24 <__assert_fail@plt+0x5654>
   16d1c:	mov	r0, sp
   16d20:	bl	16d48 <__assert_fail@plt+0x5678>
   16d24:	ldr	r0, [sp]
   16d28:	ldr	r1, [sp, #4]
   16d2c:	umull	r2, r3, r0, r4
   16d30:	asr	r0, r0, #31
   16d34:	mla	r3, r0, r4, r3
   16d38:	adds	r0, r2, r1
   16d3c:	adc	r1, r3, r1, asr #31
   16d40:	sub	sp, fp, #8
   16d44:	pop	{r4, sl, fp, pc}
   16d48:	mov	r1, r0
   16d4c:	mov	r0, #0
   16d50:	b	113dc <clock_gettime@plt>
   16d54:	push	{fp, lr}
   16d58:	mov	fp, sp
   16d5c:	mov	r1, r0
   16d60:	mov	r0, #0
   16d64:	bl	113dc <clock_gettime@plt>
   16d68:	pop	{fp, pc}
   16d6c:	andeq	r0, r0, r0
   16d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d74:	add	fp, sp, #28
   16d78:	sub	sp, sp, #4
   16d7c:	vpush	{d8-d9}
   16d80:	sub	sp, sp, #104	; 0x68
   16d84:	mov	r7, r3
   16d88:	mov	r6, r2
   16d8c:	mov	r9, r1
   16d90:	str	r0, [sp, #44]	; 0x2c
   16d94:	bl	11664 <localeconv@plt>
   16d98:	ldr	r5, [r0]
   16d9c:	mov	r4, r0
   16da0:	mov	r0, r5
   16da4:	bl	11574 <strlen@plt>
   16da8:	movw	r2, #57067	; 0xdeeb
   16dac:	sub	r1, r0, #1
   16db0:	cmp	r1, #16
   16db4:	movt	r2, #1
   16db8:	movcc	r2, r5
   16dbc:	ldr	r5, [r4, #4]
   16dc0:	ldr	r4, [r4, #8]
   16dc4:	movcs	r0, #1
   16dc8:	str	r0, [sp, #16]
   16dcc:	str	r2, [sp, #12]
   16dd0:	mov	r0, r5
   16dd4:	bl	11574 <strlen@plt>
   16dd8:	movw	r3, #51789	; 0xca4d
   16ddc:	cmp	r0, #17
   16de0:	movw	r0, #647	; 0x287
   16de4:	ldr	r2, [fp, #16]
   16de8:	ldr	sl, [fp, #8]
   16dec:	ldr	r8, [fp, #12]
   16df0:	str	r6, [sp, #28]
   16df4:	str	r7, [sp, #36]	; 0x24
   16df8:	str	r4, [sp, #20]
   16dfc:	movt	r3, #1
   16e00:	add	r1, r6, r0
   16e04:	movcc	r3, r5
   16e08:	ands	r0, r7, #32
   16e0c:	ldr	r5, [fp, #20]
   16e10:	str	r1, [sp, #32]
   16e14:	str	r0, [sp, #24]
   16e18:	mov	r0, #1000	; 0x3e8
   16e1c:	str	r3, [sp, #52]	; 0x34
   16e20:	movwne	r0, #1024	; 0x400
   16e24:	str	r0, [sp, #40]	; 0x28
   16e28:	and	r0, r7, #3
   16e2c:	str	r0, [sp, #48]	; 0x30
   16e30:	subs	r0, sl, r2
   16e34:	sbcs	r0, r8, r5
   16e38:	bcs	16f2c <__assert_fail@plt+0x585c>
   16e3c:	orrs	r0, sl, r8
   16e40:	mov	r4, r9
   16e44:	beq	17014 <__assert_fail@plt+0x5944>
   16e48:	ldr	r5, [fp, #20]
   16e4c:	mov	r0, r2
   16e50:	mov	r2, sl
   16e54:	mov	r3, r8
   16e58:	mov	r1, r5
   16e5c:	bl	1c25c <__assert_fail@plt+0xab8c>
   16e60:	ldr	r2, [fp, #16]
   16e64:	mov	r6, r0
   16e68:	mov	r3, r1
   16e6c:	umull	r0, r1, r0, sl
   16e70:	mla	r1, r6, r8, r1
   16e74:	mla	r1, r3, sl, r1
   16e78:	subs	r0, r2, r0
   16e7c:	sbc	r1, r5, r1
   16e80:	orrs	r0, r0, r1
   16e84:	bne	17014 <__assert_fail@plt+0x5944>
   16e88:	ldr	r5, [sp, #44]	; 0x2c
   16e8c:	mov	r1, r4
   16e90:	mov	r2, r6
   16e94:	mov	r8, r3
   16e98:	mov	r0, r5
   16e9c:	bl	1c25c <__assert_fail@plt+0xab8c>
   16ea0:	mov	r7, r0
   16ea4:	mov	r9, r1
   16ea8:	umull	r0, r1, r0, r6
   16eac:	mov	r2, #10
   16eb0:	mov	r3, r8
   16eb4:	mla	r1, r7, r8, r1
   16eb8:	subs	r0, r5, r0
   16ebc:	mla	r1, r9, r6, r1
   16ec0:	umull	sl, r0, r0, r2
   16ec4:	mov	r2, r6
   16ec8:	sbc	r1, r4, r1
   16ecc:	add	r1, r1, r1, lsl #2
   16ed0:	add	r5, r0, r1, lsl #1
   16ed4:	mov	r0, sl
   16ed8:	mov	r1, r5
   16edc:	bl	1c25c <__assert_fail@plt+0xab8c>
   16ee0:	mov	r4, r0
   16ee4:	umull	r0, r2, r0, r6
   16ee8:	mla	r2, r4, r8, r2
   16eec:	subs	r0, sl, r0
   16ef0:	mla	r1, r1, r6, r2
   16ef4:	mov	r2, #2
   16ef8:	sbc	r1, r5, r1
   16efc:	subs	r3, r6, r0, lsl #1
   16f00:	lsl	r1, r1, #1
   16f04:	orr	r1, r1, r0, lsr #31
   16f08:	sbcs	r3, r8, r1
   16f0c:	orr	r5, r1, r0, lsl #1
   16f10:	movwcc	r2, #3
   16f14:	cmp	r5, #0
   16f18:	movwne	r5, #1
   16f1c:	rsbs	r0, r6, r0, lsl #1
   16f20:	sbcs	r0, r1, r8
   16f24:	movcs	r5, r2
   16f28:	b	16fa4 <__assert_fail@plt+0x58d4>
   16f2c:	mov	r0, sl
   16f30:	mov	r1, r8
   16f34:	mov	r3, r5
   16f38:	bl	1c25c <__assert_fail@plt+0xab8c>
   16f3c:	ldr	r2, [fp, #16]
   16f40:	mov	r6, r0
   16f44:	mov	r3, r1
   16f48:	mov	r4, r9
   16f4c:	umull	r0, r1, r0, r2
   16f50:	mla	r1, r6, r5, r1
   16f54:	subs	r0, sl, r0
   16f58:	mla	r1, r3, r2, r1
   16f5c:	sbc	r1, r8, r1
   16f60:	orrs	r0, r0, r1
   16f64:	bne	17014 <__assert_fail@plt+0x5944>
   16f68:	ldr	r5, [sp, #44]	; 0x2c
   16f6c:	mov	r2, r6
   16f70:	umull	r7, r0, r6, r5
   16f74:	mla	r0, r6, r4, r0
   16f78:	mla	r9, r3, r5, r0
   16f7c:	mov	r0, r7
   16f80:	mov	r1, r9
   16f84:	bl	1c25c <__assert_fail@plt+0xab8c>
   16f88:	ldr	r2, [fp, #16]
   16f8c:	eor	r1, r1, r4
   16f90:	eor	r0, r0, r5
   16f94:	orrs	r0, r0, r1
   16f98:	bne	17014 <__assert_fail@plt+0x5944>
   16f9c:	mov	r5, #0
   16fa0:	mov	r4, #0
   16fa4:	ldr	r0, [sp, #36]	; 0x24
   16fa8:	ldr	r2, [sp, #40]	; 0x28
   16fac:	mvn	r6, #0
   16fb0:	ands	r8, r0, #16
   16fb4:	beq	16fc8 <__assert_fail@plt+0x58f8>
   16fb8:	subs	r0, r7, r2
   16fbc:	mov	r6, #0
   16fc0:	sbcs	r0, r9, #0
   16fc4:	bcs	17310 <__assert_fail@plt+0x5c40>
   16fc8:	ldr	r0, [sp, #32]
   16fcc:	mov	sl, r7
   16fd0:	str	r0, [sp, #44]	; 0x2c
   16fd4:	ldr	r0, [sp, #48]	; 0x30
   16fd8:	cmp	r0, #0
   16fdc:	beq	1745c <__assert_fail@plt+0x5d8c>
   16fe0:	cmp	r0, #1
   16fe4:	bne	17304 <__assert_fail@plt+0x5c34>
   16fe8:	rsbs	r1, r5, #0
   16fec:	mov	r0, #0
   16ff0:	and	r3, sl, #1
   16ff4:	ldr	r5, [sp, #44]	; 0x2c
   16ff8:	sbc	r0, r0, #0
   16ffc:	eor	r1, r3, r1
   17000:	orrs	r0, r1, r0
   17004:	addne	r4, r4, #1
   17008:	cmp	r4, #5
   1700c:	bgt	1746c <__assert_fail@plt+0x5d9c>
   17010:	b	174c0 <__assert_fail@plt+0x5df0>
   17014:	ldr	r9, [fp, #20]
   17018:	mov	r0, r2
   1701c:	mov	r1, r9
   17020:	bl	1c114 <__assert_fail@plt+0xaa44>
   17024:	vmov	d8, r0, r1
   17028:	ldr	r0, [sp, #44]	; 0x2c
   1702c:	mov	r1, r4
   17030:	bl	1c114 <__assert_fail@plt+0xaa44>
   17034:	mov	r6, r0
   17038:	mov	r7, r1
   1703c:	mov	r0, sl
   17040:	mov	r1, r8
   17044:	bl	1c114 <__assert_fail@plt+0xaa44>
   17048:	vmov	d17, r6, r7
   1704c:	ldr	r7, [sp, #36]	; 0x24
   17050:	vmov	d16, r0, r1
   17054:	vdiv.f64	d16, d16, d8
   17058:	vmul.f64	d8, d16, d17
   1705c:	tst	r7, #16
   17060:	bne	170d4 <__assert_fail@plt+0x5a04>
   17064:	ldr	r0, [sp, #48]	; 0x30
   17068:	ldr	sl, [sp, #28]
   1706c:	cmp	r0, #1
   17070:	beq	1725c <__assert_fail@plt+0x5b8c>
   17074:	vldr	d16, [pc, #964]	; 17440 <__assert_fail@plt+0x5d70>
   17078:	ldr	r8, [sp, #32]
   1707c:	vcmpe.f64	d8, d16
   17080:	vmrs	APSR_nzcv, fpscr
   17084:	bpl	17260 <__assert_fail@plt+0x5b90>
   17088:	mov	r6, r0
   1708c:	vmov	r0, r1, d8
   17090:	bl	1c2a8 <__assert_fail@plt+0xabd8>
   17094:	mov	r4, r0
   17098:	mov	r5, r1
   1709c:	bl	1c114 <__assert_fail@plt+0xaa44>
   170a0:	vmov	d16, r0, r1
   170a4:	clz	r0, r6
   170a8:	mov	r2, #0
   170ac:	vcmp.f64	d8, d16
   170b0:	lsr	r0, r0, #5
   170b4:	vmrs	APSR_nzcv, fpscr
   170b8:	movwne	r2, #1
   170bc:	and	r0, r0, r2
   170c0:	adds	r0, r0, r4
   170c4:	adc	r1, r5, #0
   170c8:	bl	1c114 <__assert_fail@plt+0xaa44>
   170cc:	vmov	d8, r0, r1
   170d0:	b	17260 <__assert_fail@plt+0x5b90>
   170d4:	ldr	r0, [sp, #40]	; 0x28
   170d8:	vmov.f64	d16, #112	; 0x3f800000  1.0
   170dc:	mov	r6, #0
   170e0:	vmov	s0, r0
   170e4:	vcvt.f64.u32	d17, s0
   170e8:	ldr	sl, [sp, #28]
   170ec:	add	r6, r6, #1
   170f0:	vmul.f64	d16, d16, d17
   170f4:	cmp	r6, #7
   170f8:	vmulls.f64	d18, d16, d17
   170fc:	vcmpels.f64	d18, d8
   17100:	vmrsls	APSR_nzcv, fpscr
   17104:	bls	170ec <__assert_fail@plt+0x5a1c>
   17108:	ldr	r0, [sp, #48]	; 0x30
   1710c:	ldr	r8, [sp, #32]
   17110:	ldr	r5, [sp, #16]
   17114:	vdiv.f64	d8, d8, d16
   17118:	vmov.f64	d16, d8
   1711c:	cmp	r0, #1
   17120:	beq	17184 <__assert_fail@plt+0x5ab4>
   17124:	vldr	d16, [pc, #788]	; 17440 <__assert_fail@plt+0x5d70>
   17128:	vcmpe.f64	d8, d16
   1712c:	vmov.f64	d16, d8
   17130:	vmrs	APSR_nzcv, fpscr
   17134:	bpl	17184 <__assert_fail@plt+0x5ab4>
   17138:	vmov	r0, r1, d8
   1713c:	bl	1c2a8 <__assert_fail@plt+0xabd8>
   17140:	mov	r4, r0
   17144:	mov	r5, r1
   17148:	bl	1c114 <__assert_fail@plt+0xaa44>
   1714c:	vmov	d16, r0, r1
   17150:	ldr	r0, [sp, #48]	; 0x30
   17154:	mov	r2, #0
   17158:	vcmp.f64	d8, d16
   1715c:	vmrs	APSR_nzcv, fpscr
   17160:	movwne	r2, #1
   17164:	clz	r0, r0
   17168:	lsr	r0, r0, #5
   1716c:	and	r0, r0, r2
   17170:	adds	r0, r0, r4
   17174:	adc	r1, r5, #0
   17178:	ldr	r5, [sp, #16]
   1717c:	bl	1c114 <__assert_fail@plt+0xaa44>
   17180:	vmov	d16, r0, r1
   17184:	movw	r3, #57075	; 0xdef3
   17188:	mov	r0, sl
   1718c:	mov	r1, #1
   17190:	mvn	r2, #0
   17194:	vstr	d16, [sp]
   17198:	movt	r3, #1
   1719c:	bl	115a4 <__sprintf_chk@plt>
   171a0:	ldr	r1, [sp, #24]
   171a4:	mov	r0, #3
   171a8:	cmp	r1, #0
   171ac:	movwne	r0, #2
   171b0:	add	r4, r0, r5
   171b4:	mov	r0, sl
   171b8:	bl	11574 <strlen@plt>
   171bc:	cmp	r4, r0
   171c0:	bcc	171e4 <__assert_fail@plt+0x5b14>
   171c4:	mov	r2, r0
   171c8:	add	r5, r5, #1
   171cc:	tst	r7, #8
   171d0:	beq	17290 <__assert_fail@plt+0x5bc0>
   171d4:	add	r0, sl, r2
   171d8:	ldrb	r0, [r0, #-1]
   171dc:	cmp	r0, #48	; 0x30
   171e0:	bne	17290 <__assert_fail@plt+0x5bc0>
   171e4:	ldr	r0, [sp, #48]	; 0x30
   171e8:	vmov.f64	d9, #36	; 0x41200000  10.0
   171ec:	vmul.f64	d8, d8, d9
   171f0:	cmp	r0, #1
   171f4:	beq	17250 <__assert_fail@plt+0x5b80>
   171f8:	vldr	d16, [pc, #576]	; 17440 <__assert_fail@plt+0x5d70>
   171fc:	vcmpe.f64	d8, d16
   17200:	vmrs	APSR_nzcv, fpscr
   17204:	bpl	17250 <__assert_fail@plt+0x5b80>
   17208:	vmov	r0, r1, d8
   1720c:	bl	1c2a8 <__assert_fail@plt+0xabd8>
   17210:	mov	r4, r0
   17214:	mov	r5, r1
   17218:	bl	1c114 <__assert_fail@plt+0xaa44>
   1721c:	vmov	d16, r0, r1
   17220:	ldr	r0, [sp, #48]	; 0x30
   17224:	mov	r2, #0
   17228:	vcmp.f64	d8, d16
   1722c:	vmrs	APSR_nzcv, fpscr
   17230:	movwne	r2, #1
   17234:	clz	r0, r0
   17238:	lsr	r0, r0, #5
   1723c:	and	r0, r0, r2
   17240:	adds	r0, r0, r4
   17244:	adc	r1, r5, #0
   17248:	bl	1c114 <__assert_fail@plt+0xaa44>
   1724c:	vmov	d8, r0, r1
   17250:	vdiv.f64	d16, d8, d9
   17254:	vstr	d16, [sp]
   17258:	b	17268 <__assert_fail@plt+0x5b98>
   1725c:	ldr	r8, [sp, #32]
   17260:	mvn	r6, #0
   17264:	vstr	d8, [sp]
   17268:	movw	r3, #57069	; 0xdeed
   1726c:	mov	r0, sl
   17270:	mov	r1, #1
   17274:	mvn	r2, #0
   17278:	movt	r3, #1
   1727c:	bl	115a4 <__sprintf_chk@plt>
   17280:	mov	r0, sl
   17284:	bl	11574 <strlen@plt>
   17288:	mov	r2, r0
   1728c:	mov	r5, #0
   17290:	sub	r4, r8, r2
   17294:	mov	r1, sl
   17298:	mov	r0, r4
   1729c:	bl	113c4 <memmove@plt>
   172a0:	sub	r5, r8, r5
   172a4:	tst	r7, #4
   172a8:	bne	17514 <__assert_fail@plt+0x5e44>
   172ac:	ldr	r3, [sp, #40]	; 0x28
   172b0:	ldr	r5, [fp, #16]
   172b4:	tst	r7, #128	; 0x80
   172b8:	beq	17630 <__assert_fail@plt+0x5f60>
   172bc:	cmn	r6, #1
   172c0:	bgt	173d0 <__assert_fail@plt+0x5d00>
   172c4:	subs	r0, r5, #2
   172c8:	mov	r6, #0
   172cc:	sbcs	r0, r9, #0
   172d0:	bcc	173d0 <__assert_fail@plt+0x5d00>
   172d4:	mov	r0, #0
   172d8:	mov	r1, #1
   172dc:	mov	r6, #0
   172e0:	cmp	r6, #7
   172e4:	beq	173cc <__assert_fail@plt+0x5cfc>
   172e8:	umull	r1, r2, r1, r3
   172ec:	add	r6, r6, #1
   172f0:	mla	r0, r0, r3, r2
   172f4:	subs	r2, r1, r5
   172f8:	sbcs	r2, r0, r9
   172fc:	bcc	172e0 <__assert_fail@plt+0x5c10>
   17300:	b	173d0 <__assert_fail@plt+0x5d00>
   17304:	ldr	r8, [sp, #32]
   17308:	ldr	r5, [sp, #44]	; 0x2c
   1730c:	b	174c4 <__assert_fail@plt+0x5df4>
   17310:	mov	r6, #0
   17314:	mov	r0, r7
   17318:	mov	r1, r9
   1731c:	mov	r3, #0
   17320:	bl	1c25c <__assert_fail@plt+0xab8c>
   17324:	ldr	r2, [sp, #40]	; 0x28
   17328:	mov	sl, r0
   1732c:	mov	r9, r1
   17330:	mls	r0, r0, r2, r7
   17334:	add	r0, r0, r0, lsl #2
   17338:	add	r0, r4, r0, lsl #1
   1733c:	udiv	r4, r0, r2
   17340:	mls	r0, r4, r2, r0
   17344:	lsl	r0, r0, #1
   17348:	add	r0, r0, r5, lsr #1
   1734c:	cmp	r0, r2
   17350:	bcs	17374 <__assert_fail@plt+0x5ca4>
   17354:	add	r1, r0, r5
   17358:	cmn	r0, r5
   1735c:	movwne	r1, #1
   17360:	mov	r5, r1
   17364:	add	r6, r6, #1
   17368:	cmp	r6, #7
   1736c:	bls	17390 <__assert_fail@plt+0x5cc0>
   17370:	b	173a0 <__assert_fail@plt+0x5cd0>
   17374:	add	r0, r0, r5
   17378:	mov	r5, #2
   1737c:	cmp	r2, r0
   17380:	movwcc	r5, #3
   17384:	add	r6, r6, #1
   17388:	cmp	r6, #7
   1738c:	bhi	173a0 <__assert_fail@plt+0x5cd0>
   17390:	subs	r0, sl, r2
   17394:	mov	r7, sl
   17398:	sbcs	r0, r9, #0
   1739c:	bcs	17314 <__assert_fail@plt+0x5c44>
   173a0:	rsbs	r0, sl, #9
   173a4:	rscs	r0, r9, #0
   173a8:	bcc	17448 <__assert_fail@plt+0x5d78>
   173ac:	ldr	r0, [sp, #48]	; 0x30
   173b0:	cmp	r0, #1
   173b4:	bne	1764c <__assert_fail@plt+0x5f7c>
   173b8:	and	r0, r4, #1
   173bc:	add	r0, r5, r0
   173c0:	cmp	r0, #2
   173c4:	bhi	1765c <__assert_fail@plt+0x5f8c>
   173c8:	b	17690 <__assert_fail@plt+0x5fc0>
   173cc:	mov	r6, #8
   173d0:	and	r0, r7, #256	; 0x100
   173d4:	tst	r7, #64	; 0x40
   173d8:	orrsne	r1, r6, r0
   173dc:	movne	r1, #32
   173e0:	addne	r8, sl, #648	; 0x288
   173e4:	strbne	r1, [sl, #647]	; 0x287
   173e8:	cmp	r6, #0
   173ec:	beq	17414 <__assert_fail@plt+0x5d44>
   173f0:	ldr	r1, [sp, #24]
   173f4:	cmp	r1, #0
   173f8:	moveq	r1, #107	; 0x6b
   173fc:	cmpeq	r6, #1
   17400:	beq	17410 <__assert_fail@plt+0x5d40>
   17404:	movw	r1, #57140	; 0xdf34
   17408:	movt	r1, #1
   1740c:	ldrb	r1, [r1, r6]
   17410:	strb	r1, [r8], #1
   17414:	cmp	r0, #0
   17418:	beq	17630 <__assert_fail@plt+0x5f60>
   1741c:	ldr	r0, [sp, #24]
   17420:	cmp	r0, #0
   17424:	cmpne	r6, #0
   17428:	movne	r0, #105	; 0x69
   1742c:	strbne	r0, [r8], #1
   17430:	mov	r0, #66	; 0x42
   17434:	strb	r0, [r8], #1
   17438:	b	17630 <__assert_fail@plt+0x5f60>
   1743c:	nop	{0}
   17440:	andeq	r0, r0, r0
   17444:	mvnsmi	r0, #0
   17448:	ldr	r0, [sp, #32]
   1744c:	str	r0, [sp, #44]	; 0x2c
   17450:	ldr	r0, [sp, #48]	; 0x30
   17454:	cmp	r0, #0
   17458:	bne	16fe0 <__assert_fail@plt+0x5910>
   1745c:	add	r0, r4, r5
   17460:	ldr	r5, [sp, #44]	; 0x2c
   17464:	cmp	r0, #1
   17468:	blt	174c0 <__assert_fail@plt+0x5df0>
   1746c:	adds	sl, sl, #1
   17470:	adc	r9, r9, #0
   17474:	cmp	r6, #7
   17478:	bgt	174c0 <__assert_fail@plt+0x5df0>
   1747c:	cmp	r8, #0
   17480:	beq	174c0 <__assert_fail@plt+0x5df0>
   17484:	eor	r0, sl, r2
   17488:	orrs	r0, r0, r9
   1748c:	ldreq	r0, [sp, #36]	; 0x24
   17490:	addeq	r6, r6, #1
   17494:	moveq	r9, #0
   17498:	moveq	sl, #1
   1749c:	tsteq	r0, #8
   174a0:	bne	174c0 <__assert_fail@plt+0x5df0>
   174a4:	ldr	r2, [sp, #16]
   174a8:	mov	r0, #48	; 0x30
   174ac:	ldr	r1, [sp, #12]
   174b0:	strb	r0, [r5, #-1]!
   174b4:	sub	r5, r5, r2
   174b8:	mov	r0, r5
   174bc:	bl	113f4 <memcpy@plt>
   174c0:	ldr	r8, [sp, #32]
   174c4:	mov	r4, r5
   174c8:	mov	r0, sl
   174cc:	mov	r1, r9
   174d0:	mov	r2, #10
   174d4:	mov	r3, #0
   174d8:	bl	1c25c <__assert_fail@plt+0xab8c>
   174dc:	add	r2, r0, r0, lsl #2
   174e0:	sub	r2, sl, r2, lsl #1
   174e4:	orr	r2, r2, #48	; 0x30
   174e8:	strb	r2, [r4, #-1]!
   174ec:	rsbs	r2, sl, #9
   174f0:	mov	sl, r0
   174f4:	rscs	r2, r9, #0
   174f8:	mov	r9, r1
   174fc:	bcc	174c8 <__assert_fail@plt+0x5df8>
   17500:	ldr	r7, [sp, #36]	; 0x24
   17504:	ldr	r9, [fp, #20]
   17508:	ldr	sl, [sp, #28]
   1750c:	tst	r7, #4
   17510:	beq	172ac <__assert_fail@plt+0x5bdc>
   17514:	ldr	r0, [sp, #52]	; 0x34
   17518:	mov	r7, r5
   1751c:	str	r6, [sp, #16]
   17520:	sub	r5, r5, r4
   17524:	bl	11574 <strlen@plt>
   17528:	add	r8, sp, #56	; 0x38
   1752c:	str	r0, [sp, #48]	; 0x30
   17530:	mov	r1, r4
   17534:	mov	r2, r5
   17538:	mov	r0, r8
   1753c:	bl	113f4 <memcpy@plt>
   17540:	ldr	r0, [sp, #20]
   17544:	ldrb	r6, [r0]
   17548:	cmp	r6, #255	; 0xff
   1754c:	mov	r9, r6
   17550:	moveq	r9, r5
   17554:	cmp	r6, #0
   17558:	mvneq	r9, #0
   1755c:	cmp	r9, r5
   17560:	movhi	r9, r5
   17564:	sub	r4, r7, r9
   17568:	sub	r7, r5, r9
   1756c:	mov	r2, r9
   17570:	add	r1, r8, r7
   17574:	mov	r0, r4
   17578:	bl	113f4 <memcpy@plt>
   1757c:	cmp	r7, #0
   17580:	beq	1760c <__assert_fail@plt+0x5f3c>
   17584:	clz	r0, r6
   17588:	ldr	r8, [sp, #20]
   1758c:	lsr	sl, r0, #5
   17590:	ldr	r0, [sp, #48]	; 0x30
   17594:	rsb	r0, r0, #0
   17598:	str	r0, [sp, #44]	; 0x2c
   1759c:	ldr	r0, [sp, #44]	; 0x2c
   175a0:	ldr	r1, [sp, #52]	; 0x34
   175a4:	ldr	r2, [sp, #48]	; 0x30
   175a8:	add	r4, r4, r0
   175ac:	mov	r0, r4
   175b0:	bl	113f4 <memcpy@plt>
   175b4:	tst	sl, #1
   175b8:	add	r0, sp, #56	; 0x38
   175bc:	addeq	r8, r8, #1
   175c0:	ldrb	r6, [r8]
   175c4:	cmp	r6, #255	; 0xff
   175c8:	mov	r5, r6
   175cc:	moveq	r5, r7
   175d0:	cmp	r6, #0
   175d4:	moveq	r5, r9
   175d8:	cmp	r7, r5
   175dc:	movcc	r5, r7
   175e0:	sub	r7, r7, r5
   175e4:	sub	r4, r4, r5
   175e8:	mov	r2, r5
   175ec:	add	r1, r0, r7
   175f0:	mov	r0, r4
   175f4:	bl	113f4 <memcpy@plt>
   175f8:	clz	r0, r6
   175fc:	cmp	r7, #0
   17600:	mov	r9, r5
   17604:	lsr	sl, r0, #5
   17608:	bne	1759c <__assert_fail@plt+0x5ecc>
   1760c:	ldr	r8, [sp, #32]
   17610:	ldr	sl, [sp, #28]
   17614:	ldr	r7, [sp, #36]	; 0x24
   17618:	ldr	r3, [sp, #40]	; 0x28
   1761c:	ldr	r9, [fp, #20]
   17620:	ldr	r5, [fp, #16]
   17624:	ldr	r6, [sp, #16]
   17628:	tst	r7, #128	; 0x80
   1762c:	bne	172bc <__assert_fail@plt+0x5bec>
   17630:	mov	r0, #0
   17634:	strb	r0, [r8]
   17638:	mov	r0, r4
   1763c:	sub	sp, fp, #48	; 0x30
   17640:	vpop	{d8-d9}
   17644:	add	sp, sp, #4
   17648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1764c:	cmp	r0, #0
   17650:	bne	17690 <__assert_fail@plt+0x5fc0>
   17654:	cmp	r5, #0
   17658:	beq	17690 <__assert_fail@plt+0x5fc0>
   1765c:	adds	r0, sl, #1
   17660:	add	r4, r4, #1
   17664:	mov	r5, #0
   17668:	adc	r1, r9, #0
   1766c:	cmp	r4, #10
   17670:	bne	17690 <__assert_fail@plt+0x5fc0>
   17674:	rsbs	r3, r0, #9
   17678:	mov	r4, #0
   1767c:	mov	sl, r0
   17680:	mov	r9, r1
   17684:	mov	r5, #0
   17688:	rscs	r3, r1, #0
   1768c:	bcc	176fc <__assert_fail@plt+0x602c>
   17690:	ldr	r0, [sp, #36]	; 0x24
   17694:	tst	r0, #8
   17698:	beq	176c0 <__assert_fail@plt+0x5ff0>
   1769c:	cmp	r4, #0
   176a0:	bne	176c0 <__assert_fail@plt+0x5ff0>
   176a4:	ldr	r0, [sp, #32]
   176a8:	str	r0, [sp, #44]	; 0x2c
   176ac:	mov	r4, #0
   176b0:	ldr	r0, [sp, #48]	; 0x30
   176b4:	cmp	r0, #0
   176b8:	bne	16fe0 <__assert_fail@plt+0x5910>
   176bc:	b	1745c <__assert_fail@plt+0x5d8c>
   176c0:	ldr	r1, [sp, #28]
   176c4:	ldr	r2, [sp, #16]
   176c8:	add	r0, r4, #48	; 0x30
   176cc:	strb	r0, [r1, #646]!	; 0x286
   176d0:	sub	r0, r1, r2
   176d4:	ldr	r1, [sp, #12]
   176d8:	str	r0, [sp, #44]	; 0x2c
   176dc:	bl	113f4 <memcpy@plt>
   176e0:	ldr	r2, [sp, #40]	; 0x28
   176e4:	mov	r5, #0
   176e8:	mov	r4, #0
   176ec:	ldr	r0, [sp, #48]	; 0x30
   176f0:	cmp	r0, #0
   176f4:	bne	16fe0 <__assert_fail@plt+0x5910>
   176f8:	b	1745c <__assert_fail@plt+0x5d8c>
   176fc:	ldr	r0, [sp, #32]
   17700:	mov	r5, #0
   17704:	mov	sl, #10
   17708:	mov	r9, #0
   1770c:	str	r0, [sp, #44]	; 0x2c
   17710:	ldr	r0, [sp, #48]	; 0x30
   17714:	cmp	r0, #0
   17718:	bne	16fe0 <__assert_fail@plt+0x5910>
   1771c:	b	1745c <__assert_fail@plt+0x5d8c>
   17720:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17724:	add	fp, sp, #24
   17728:	sub	sp, sp, #8
   1772c:	mov	r4, r2
   17730:	mov	r8, r1
   17734:	cmp	r0, #0
   17738:	bne	17764 <__assert_fail@plt+0x6094>
   1773c:	movw	r0, #57081	; 0xdef9
   17740:	movt	r0, #1
   17744:	bl	114e4 <getenv@plt>
   17748:	cmp	r0, #0
   1774c:	bne	17764 <__assert_fail@plt+0x6094>
   17750:	movw	r0, #57092	; 0xdf04
   17754:	movt	r0, #1
   17758:	bl	114e4 <getenv@plt>
   1775c:	cmp	r0, #0
   17760:	beq	17890 <__assert_fail@plt+0x61c0>
   17764:	mov	r6, r0
   17768:	movw	r7, #57164	; 0xdf4c
   1776c:	movw	r1, #57152	; 0xdf40
   17770:	mov	r3, #4
   17774:	ldrb	r5, [r6], #1
   17778:	movt	r7, #1
   1777c:	movt	r1, #1
   17780:	mov	r2, r7
   17784:	cmp	r5, #39	; 0x27
   17788:	movne	r6, r0
   1778c:	mov	r0, r6
   17790:	bl	1b6c0 <__assert_fail@plt+0x9ff0>
   17794:	sub	r1, r5, #39	; 0x27
   17798:	cmp	r0, #0
   1779c:	clz	r1, r1
   177a0:	lsr	r1, r1, #5
   177a4:	lsl	r5, r1, #2
   177a8:	blt	177e0 <__assert_fail@plt+0x6110>
   177ac:	ldr	r0, [r7, r0, lsl #2]
   177b0:	mov	r2, #1
   177b4:	mov	r1, #0
   177b8:	str	r2, [r4]
   177bc:	str	r1, [r4, #4]
   177c0:	orr	r1, r0, r5
   177c4:	mov	r0, #0
   177c8:	str	r1, [r8]
   177cc:	ldrd	r2, [r4]
   177d0:	orrs	r1, r2, r3
   177d4:	beq	1781c <__assert_fail@plt+0x614c>
   177d8:	sub	sp, fp, #24
   177dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   177e0:	movw	r0, #57102	; 0xdf0e
   177e4:	add	r1, sp, #4
   177e8:	mov	r2, #0
   177ec:	mov	r3, r4
   177f0:	mov	r7, #0
   177f4:	movt	r0, #1
   177f8:	str	r0, [sp]
   177fc:	mov	r0, r6
   17800:	bl	1a798 <__assert_fail@plt+0x90c8>
   17804:	cmp	r0, #0
   17808:	beq	1784c <__assert_fail@plt+0x617c>
   1780c:	str	r7, [r8]
   17810:	ldrd	r2, [r4]
   17814:	orrs	r1, r2, r3
   17818:	bne	177d8 <__assert_fail@plt+0x6108>
   1781c:	movw	r0, #54240	; 0xd3e0
   17820:	movt	r0, #1
   17824:	bl	114e4 <getenv@plt>
   17828:	cmp	r0, #0
   1782c:	mov	r2, #512	; 0x200
   17830:	mov	r0, #4
   17834:	mov	r1, #0
   17838:	movweq	r2, #1024	; 0x400
   1783c:	str	r2, [r4]
   17840:	str	r1, [r4, #4]
   17844:	sub	sp, fp, #24
   17848:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1784c:	ldrb	r0, [r6]
   17850:	sub	r0, r0, #48	; 0x30
   17854:	uxtb	r0, r0
   17858:	cmp	r0, #10
   1785c:	bcc	17888 <__assert_fail@plt+0x61b8>
   17860:	ldr	r0, [sp, #4]
   17864:	cmp	r0, r6
   17868:	beq	178b8 <__assert_fail@plt+0x61e8>
   1786c:	ldrb	r2, [r6, #1]
   17870:	add	r1, r6, #1
   17874:	mov	r6, r1
   17878:	sub	r2, r2, #48	; 0x30
   1787c:	uxtb	r2, r2
   17880:	cmp	r2, #10
   17884:	bcs	17864 <__assert_fail@plt+0x6194>
   17888:	mov	r1, r5
   1788c:	b	177c4 <__assert_fail@plt+0x60f4>
   17890:	movw	r0, #54240	; 0xd3e0
   17894:	movt	r0, #1
   17898:	bl	114e4 <getenv@plt>
   1789c:	mov	r2, #512	; 0x200
   178a0:	cmp	r0, #0
   178a4:	mov	r1, #0
   178a8:	movweq	r2, #1024	; 0x400
   178ac:	str	r2, [r4]
   178b0:	str	r1, [r4, #4]
   178b4:	b	177c4 <__assert_fail@plt+0x60f4>
   178b8:	ldrb	r2, [r0, #-1]
   178bc:	orr	r1, r5, #384	; 0x180
   178c0:	cmp	r2, #66	; 0x42
   178c4:	mov	r2, r1
   178c8:	orrne	r2, r5, #128	; 0x80
   178cc:	bne	178e0 <__assert_fail@plt+0x6210>
   178d0:	ldrb	r0, [r0, #-2]
   178d4:	cmp	r0, #105	; 0x69
   178d8:	orreq	r1, r2, #32
   178dc:	b	177c4 <__assert_fail@plt+0x60f4>
   178e0:	orr	r1, r2, #32
   178e4:	b	177c4 <__assert_fail@plt+0x60f4>
   178e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   178ec:	add	fp, sp, #24
   178f0:	sub	sp, sp, #8
   178f4:	movw	r6, #61912	; 0xf1d8
   178f8:	mov	r4, #0
   178fc:	cmp	r0, #2
   17900:	movt	r6, #2
   17904:	ldr	r7, [r6]
   17908:	str	r4, [r6]
   1790c:	bne	17980 <__assert_fail@plt+0x62b0>
   17910:	mov	r8, r3
   17914:	movw	r3, #57180	; 0xdf5c
   17918:	mov	r5, r2
   1791c:	movw	r2, #57172	; 0xdf54
   17920:	mov	r0, #2
   17924:	str	r4, [sp]
   17928:	movt	r2, #1
   1792c:	movt	r3, #1
   17930:	bl	11550 <getopt_long@plt>
   17934:	cmp	r0, #104	; 0x68
   17938:	beq	17974 <__assert_fail@plt+0x62a4>
   1793c:	cmp	r0, #118	; 0x76
   17940:	bne	17980 <__assert_fail@plt+0x62b0>
   17944:	movw	r0, #61908	; 0xf1d4
   17948:	ldr	r3, [fp, #8]
   1794c:	add	r1, fp, #16
   17950:	mov	r2, r8
   17954:	movt	r0, #2
   17958:	str	r1, [sp, #4]
   1795c:	str	r1, [sp]
   17960:	mov	r1, r5
   17964:	ldr	r0, [r0]
   17968:	bl	19eac <__assert_fail@plt+0x87dc>
   1796c:	mov	r0, #0
   17970:	bl	11568 <exit@plt>
   17974:	ldr	r1, [fp, #12]
   17978:	mov	r0, #0
   1797c:	blx	r1
   17980:	movw	r0, #61896	; 0xf1c8
   17984:	str	r7, [r6]
   17988:	movt	r0, #2
   1798c:	str	r4, [r0]
   17990:	sub	sp, fp, #24
   17994:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17998:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1799c:	add	fp, sp, #24
   179a0:	sub	sp, sp, #8
   179a4:	movw	r6, #61912	; 0xf1d8
   179a8:	mov	r8, r3
   179ac:	ldr	r3, [fp, #12]
   179b0:	mov	r5, r2
   179b4:	mov	r2, #1
   179b8:	movw	r4, #51789	; 0xca4d
   179bc:	movt	r6, #2
   179c0:	movt	r4, #1
   179c4:	ldr	r7, [r6]
   179c8:	str	r2, [r6]
   179cc:	mov	r2, #0
   179d0:	str	r2, [sp]
   179d4:	movw	r2, #57172	; 0xdf54
   179d8:	cmp	r3, #0
   179dc:	movt	r2, #1
   179e0:	movw	r3, #57180	; 0xdf5c
   179e4:	movne	r2, r4
   179e8:	movt	r3, #1
   179ec:	bl	11550 <getopt_long@plt>
   179f0:	cmn	r0, #1
   179f4:	beq	17a24 <__assert_fail@plt+0x6354>
   179f8:	ldr	r1, [fp, #16]
   179fc:	cmp	r0, #104	; 0x68
   17a00:	beq	17a1c <__assert_fail@plt+0x634c>
   17a04:	cmp	r0, #118	; 0x76
   17a08:	beq	17a30 <__assert_fail@plt+0x6360>
   17a0c:	movw	r0, #61804	; 0xf16c
   17a10:	movt	r0, #2
   17a14:	ldr	r0, [r0]
   17a18:	b	17a20 <__assert_fail@plt+0x6350>
   17a1c:	mov	r0, #0
   17a20:	blx	r1
   17a24:	str	r7, [r6]
   17a28:	sub	sp, fp, #24
   17a2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a30:	movw	r0, #61908	; 0xf1d4
   17a34:	ldr	r3, [fp, #8]
   17a38:	add	r1, fp, #20
   17a3c:	mov	r2, r8
   17a40:	movt	r0, #2
   17a44:	str	r1, [sp, #4]
   17a48:	str	r1, [sp]
   17a4c:	mov	r1, r5
   17a50:	ldr	r0, [r0]
   17a54:	bl	19eac <__assert_fail@plt+0x87dc>
   17a58:	mov	r0, #0
   17a5c:	bl	11568 <exit@plt>
   17a60:	push	{r4, r5, fp, lr}
   17a64:	add	fp, sp, #8
   17a68:	cmp	r0, #0
   17a6c:	beq	17b00 <__assert_fail@plt+0x6430>
   17a70:	mov	r1, #47	; 0x2f
   17a74:	mov	r4, r0
   17a78:	bl	1164c <strrchr@plt>
   17a7c:	cmp	r0, #0
   17a80:	mov	r5, r4
   17a84:	addne	r5, r0, #1
   17a88:	sub	r0, r5, r4
   17a8c:	cmp	r0, #7
   17a90:	blt	17ae4 <__assert_fail@plt+0x6414>
   17a94:	movw	r1, #57284	; 0xdfc4
   17a98:	sub	r0, r5, #7
   17a9c:	mov	r2, #7
   17aa0:	movt	r1, #1
   17aa4:	bl	11688 <strncmp@plt>
   17aa8:	cmp	r0, #0
   17aac:	bne	17ae4 <__assert_fail@plt+0x6414>
   17ab0:	movw	r1, #57292	; 0xdfcc
   17ab4:	mov	r0, r5
   17ab8:	mov	r2, #3
   17abc:	movt	r1, #1
   17ac0:	bl	11688 <strncmp@plt>
   17ac4:	cmp	r0, #0
   17ac8:	beq	17ad4 <__assert_fail@plt+0x6404>
   17acc:	mov	r4, r5
   17ad0:	b	17ae4 <__assert_fail@plt+0x6414>
   17ad4:	movw	r0, #61888	; 0xf1c0
   17ad8:	add	r4, r5, #3
   17adc:	movt	r0, #2
   17ae0:	str	r4, [r0]
   17ae4:	movw	r0, #61892	; 0xf1c4
   17ae8:	movt	r0, #2
   17aec:	str	r4, [r0]
   17af0:	movw	r0, #62532	; 0xf444
   17af4:	movt	r0, #2
   17af8:	str	r4, [r0]
   17afc:	pop	{r4, r5, fp, pc}
   17b00:	movw	r0, #61904	; 0xf1d0
   17b04:	mov	r1, #55	; 0x37
   17b08:	mov	r2, #1
   17b0c:	movt	r0, #2
   17b10:	ldr	r3, [r0]
   17b14:	movw	r0, #57228	; 0xdf8c
   17b18:	movt	r0, #1
   17b1c:	bl	11490 <fwrite@plt>
   17b20:	bl	116a0 <abort@plt>
   17b24:	push	{r4, r5, r6, sl, fp, lr}
   17b28:	add	fp, sp, #16
   17b2c:	mov	r4, r0
   17b30:	movw	r0, #62536	; 0xf448
   17b34:	movt	r0, #2
   17b38:	cmp	r4, #0
   17b3c:	moveq	r4, r0
   17b40:	bl	11598 <__errno_location@plt>
   17b44:	ldr	r6, [r0]
   17b48:	mov	r5, r0
   17b4c:	mov	r0, r4
   17b50:	mov	r1, #48	; 0x30
   17b54:	bl	1a654 <__assert_fail@plt+0x8f84>
   17b58:	str	r6, [r5]
   17b5c:	pop	{r4, r5, r6, sl, fp, pc}
   17b60:	movw	r1, #62536	; 0xf448
   17b64:	cmp	r0, #0
   17b68:	movt	r1, #2
   17b6c:	movne	r1, r0
   17b70:	ldr	r0, [r1]
   17b74:	bx	lr
   17b78:	movw	r2, #62536	; 0xf448
   17b7c:	cmp	r0, #0
   17b80:	movt	r2, #2
   17b84:	movne	r2, r0
   17b88:	str	r1, [r2]
   17b8c:	bx	lr
   17b90:	movw	r3, #62536	; 0xf448
   17b94:	cmp	r0, #0
   17b98:	movt	r3, #2
   17b9c:	movne	r3, r0
   17ba0:	ubfx	r0, r1, #5, #3
   17ba4:	and	r1, r1, #31
   17ba8:	add	r0, r3, r0, lsl #2
   17bac:	ldr	r3, [r0, #8]
   17bb0:	eor	r2, r2, r3, lsr r1
   17bb4:	and	r2, r2, #1
   17bb8:	eor	r2, r3, r2, lsl r1
   17bbc:	str	r2, [r0, #8]
   17bc0:	mov	r0, #1
   17bc4:	and	r0, r0, r3, lsr r1
   17bc8:	bx	lr
   17bcc:	movw	r2, #62536	; 0xf448
   17bd0:	cmp	r0, #0
   17bd4:	movt	r2, #2
   17bd8:	movne	r2, r0
   17bdc:	ldr	r0, [r2, #4]
   17be0:	str	r1, [r2, #4]
   17be4:	bx	lr
   17be8:	movw	r3, #62536	; 0xf448
   17bec:	cmp	r0, #0
   17bf0:	movt	r3, #2
   17bf4:	movne	r3, r0
   17bf8:	cmp	r1, #0
   17bfc:	mov	r0, #10
   17c00:	cmpne	r2, #0
   17c04:	str	r0, [r3]
   17c08:	bne	17c18 <__assert_fail@plt+0x6548>
   17c0c:	push	{fp, lr}
   17c10:	mov	fp, sp
   17c14:	bl	116a0 <abort@plt>
   17c18:	str	r1, [r3, #40]	; 0x28
   17c1c:	str	r2, [r3, #44]	; 0x2c
   17c20:	bx	lr
   17c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c28:	add	fp, sp, #28
   17c2c:	sub	sp, sp, #20
   17c30:	mov	r7, r0
   17c34:	ldr	r0, [fp, #8]
   17c38:	movw	r5, #62536	; 0xf448
   17c3c:	mov	r8, r3
   17c40:	mov	r9, r2
   17c44:	mov	sl, r1
   17c48:	movt	r5, #2
   17c4c:	cmp	r0, #0
   17c50:	movne	r5, r0
   17c54:	bl	11598 <__errno_location@plt>
   17c58:	mov	r4, r0
   17c5c:	ldm	r5, {r0, r1}
   17c60:	ldr	r2, [r5, #40]	; 0x28
   17c64:	ldr	r3, [r5, #44]	; 0x2c
   17c68:	add	r5, r5, #8
   17c6c:	ldr	r6, [r4]
   17c70:	stm	sp, {r0, r1, r5}
   17c74:	str	r2, [sp, #12]
   17c78:	str	r3, [sp, #16]
   17c7c:	mov	r0, r7
   17c80:	mov	r1, sl
   17c84:	mov	r2, r9
   17c88:	mov	r3, r8
   17c8c:	bl	17c9c <__assert_fail@plt+0x65cc>
   17c90:	str	r6, [r4]
   17c94:	sub	sp, fp, #28
   17c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ca0:	add	fp, sp, #28
   17ca4:	sub	sp, sp, #156	; 0x9c
   17ca8:	str	r0, [sp, #76]	; 0x4c
   17cac:	ldr	r0, [fp, #12]
   17cb0:	mov	r6, r1
   17cb4:	str	r3, [sp, #84]	; 0x54
   17cb8:	str	r2, [fp, #-84]	; 0xffffffac
   17cbc:	and	r1, r0, #4
   17cc0:	str	r1, [sp, #24]
   17cc4:	and	r1, r0, #1
   17cc8:	str	r1, [sp, #28]
   17ccc:	ubfx	r8, r0, #1, #1
   17cd0:	bl	114a8 <__ctype_get_mb_cur_max@plt>
   17cd4:	str	r0, [sp, #32]
   17cd8:	ldr	r0, [fp, #24]
   17cdc:	ldr	r7, [fp, #8]
   17ce0:	mov	r1, #0
   17ce4:	mov	r2, #0
   17ce8:	mov	r4, #1
   17cec:	str	r1, [sp, #52]	; 0x34
   17cf0:	str	r0, [sp, #72]	; 0x48
   17cf4:	ldr	r0, [fp, #20]
   17cf8:	str	r0, [sp, #68]	; 0x44
   17cfc:	mov	r0, #0
   17d00:	str	r0, [sp, #48]	; 0x30
   17d04:	mov	r0, #0
   17d08:	str	r0, [sp, #92]	; 0x5c
   17d0c:	mov	r0, #0
   17d10:	str	r0, [fp, #-76]	; 0xffffffb4
   17d14:	mov	r0, #0
   17d18:	cmp	r7, #10
   17d1c:	bhi	19004 <__assert_fail@plt+0x7934>
   17d20:	add	r1, pc, #28
   17d24:	mov	sl, r6
   17d28:	ldr	r6, [sp, #76]	; 0x4c
   17d2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17d30:	ldr	lr, [sp, #84]	; 0x54
   17d34:	mov	r9, #0
   17d38:	mov	r3, #1
   17d3c:	mov	r5, #0
   17d40:	ldr	pc, [r1, r7, lsl #2]
   17d44:	andeq	r7, r1, r4, lsl lr
   17d48:	andeq	r7, r1, r0, asr lr
   17d4c:	andeq	r7, r1, r4, lsr #28
   17d50:	andeq	r7, r1, ip, lsl #28
   17d54:	andeq	r7, r1, r4, asr #28
   17d58:	andeq	r7, r1, r8, ror lr
   17d5c:	andeq	r7, r1, r4, lsr lr
   17d60:	andeq	r8, r1, r4, lsl #1
   17d64:	andeq	r7, r1, r0, ror sp
   17d68:	andeq	r7, r1, r0, ror sp
   17d6c:	andeq	r8, r1, r8, lsl r0
   17d70:	mov	r9, r4
   17d74:	movw	r4, #57374	; 0xe01e
   17d78:	mov	r5, r8
   17d7c:	mov	r8, r2
   17d80:	mov	r0, #0
   17d84:	mov	r2, #5
   17d88:	movt	r4, #1
   17d8c:	mov	r1, r4
   17d90:	bl	11430 <dcgettext@plt>
   17d94:	cmp	r0, r4
   17d98:	str	r0, [sp, #68]	; 0x44
   17d9c:	bne	17f2c <__assert_fail@plt+0x685c>
   17da0:	bl	1bbec <__assert_fail@plt+0xa51c>
   17da4:	ldrb	r1, [r0]
   17da8:	and	r1, r1, #223	; 0xdf
   17dac:	cmp	r1, #71	; 0x47
   17db0:	beq	17ef8 <__assert_fail@plt+0x6828>
   17db4:	cmp	r1, #85	; 0x55
   17db8:	bne	17f10 <__assert_fail@plt+0x6840>
   17dbc:	ldrb	r1, [r0, #1]
   17dc0:	and	r1, r1, #223	; 0xdf
   17dc4:	cmp	r1, #84	; 0x54
   17dc8:	bne	17f10 <__assert_fail@plt+0x6840>
   17dcc:	ldrb	r1, [r0, #2]
   17dd0:	and	r1, r1, #223	; 0xdf
   17dd4:	cmp	r1, #70	; 0x46
   17dd8:	bne	17f10 <__assert_fail@plt+0x6840>
   17ddc:	ldrb	r1, [r0, #3]
   17de0:	cmp	r1, #45	; 0x2d
   17de4:	ldrbeq	r1, [r0, #4]
   17de8:	cmpeq	r1, #56	; 0x38
   17dec:	bne	17f10 <__assert_fail@plt+0x6840>
   17df0:	ldrb	r0, [r0, #5]
   17df4:	cmp	r0, #0
   17df8:	movw	r0, #57378	; 0xe022
   17dfc:	movt	r0, #1
   17e00:	str	r0, [sp, #68]	; 0x44
   17e04:	bne	17f10 <__assert_fail@plt+0x6840>
   17e08:	b	17f2c <__assert_fail@plt+0x685c>
   17e0c:	mov	r0, #1
   17e10:	b	17e50 <__assert_fail@plt+0x6780>
   17e14:	mov	r7, #0
   17e18:	mov	r9, #0
   17e1c:	mov	r3, r0
   17e20:	b	17ef0 <__assert_fail@plt+0x6820>
   17e24:	tst	r8, #1
   17e28:	bne	17e50 <__assert_fail@plt+0x6780>
   17e2c:	mov	r3, r0
   17e30:	b	17ea8 <__assert_fail@plt+0x67d8>
   17e34:	mov	r0, #1
   17e38:	mov	r9, #0
   17e3c:	mov	r7, #5
   17e40:	b	17e8c <__assert_fail@plt+0x67bc>
   17e44:	mov	r3, #1
   17e48:	tst	r8, #1
   17e4c:	beq	17ea8 <__assert_fail@plt+0x67d8>
   17e50:	mov	r1, #1
   17e54:	mov	r9, #0
   17e58:	mov	r7, #2
   17e5c:	mov	r3, r0
   17e60:	mov	r5, #1
   17e64:	str	r1, [fp, #-76]	; 0xffffffb4
   17e68:	movw	r1, #57376	; 0xe020
   17e6c:	movt	r1, #1
   17e70:	str	r1, [sp, #92]	; 0x5c
   17e74:	b	18084 <__assert_fail@plt+0x69b4>
   17e78:	mov	r7, #5
   17e7c:	tst	r8, #1
   17e80:	beq	17ec8 <__assert_fail@plt+0x67f8>
   17e84:	mov	r0, #1
   17e88:	mov	r9, #0
   17e8c:	str	r0, [fp, #-76]	; 0xffffffb4
   17e90:	movw	r0, #57372	; 0xe01c
   17e94:	mov	r3, #1
   17e98:	mov	r5, #1
   17e9c:	movt	r0, #1
   17ea0:	str	r0, [sp, #92]	; 0x5c
   17ea4:	b	18084 <__assert_fail@plt+0x69b4>
   17ea8:	cmp	sl, #0
   17eac:	mov	r9, #1
   17eb0:	mov	r7, #2
   17eb4:	movne	r0, #39	; 0x27
   17eb8:	strbne	r0, [r6]
   17ebc:	movw	r0, #57376	; 0xe020
   17ec0:	movt	r0, #1
   17ec4:	b	17ee4 <__assert_fail@plt+0x6814>
   17ec8:	cmp	sl, #0
   17ecc:	mov	r9, #1
   17ed0:	mov	r3, #1
   17ed4:	movne	r0, #34	; 0x22
   17ed8:	strbne	r0, [r6]
   17edc:	movw	r0, #57372	; 0xe01c
   17ee0:	movt	r0, #1
   17ee4:	str	r0, [sp, #92]	; 0x5c
   17ee8:	mov	r0, #1
   17eec:	str	r0, [fp, #-76]	; 0xffffffb4
   17ef0:	mov	r5, #0
   17ef4:	b	18084 <__assert_fail@plt+0x69b4>
   17ef8:	ldrb	r1, [r0, #1]
   17efc:	and	r1, r1, #223	; 0xdf
   17f00:	cmp	r1, #66	; 0x42
   17f04:	ldrbeq	r1, [r0, #2]
   17f08:	cmpeq	r1, #49	; 0x31
   17f0c:	beq	18e2c <__assert_fail@plt+0x775c>
   17f10:	movw	r0, #57376	; 0xe020
   17f14:	movw	r1, #57372	; 0xe01c
   17f18:	cmp	r7, #9
   17f1c:	movt	r0, #1
   17f20:	movt	r1, #1
   17f24:	moveq	r0, r1
   17f28:	str	r0, [sp, #68]	; 0x44
   17f2c:	movw	r4, #57376	; 0xe020
   17f30:	mov	r0, #0
   17f34:	mov	r2, #5
   17f38:	movt	r4, #1
   17f3c:	mov	r1, r4
   17f40:	bl	11430 <dcgettext@plt>
   17f44:	cmp	r0, r4
   17f48:	str	r0, [sp, #72]	; 0x48
   17f4c:	beq	17f5c <__assert_fail@plt+0x688c>
   17f50:	mov	r4, r9
   17f54:	mov	r2, r8
   17f58:	b	18014 <__assert_fail@plt+0x6944>
   17f5c:	bl	1bbec <__assert_fail@plt+0xa51c>
   17f60:	ldrb	r1, [r0]
   17f64:	mov	r4, r9
   17f68:	and	r1, r1, #223	; 0xdf
   17f6c:	cmp	r1, #71	; 0x47
   17f70:	beq	17fcc <__assert_fail@plt+0x68fc>
   17f74:	cmp	r1, #85	; 0x55
   17f78:	mov	r2, r8
   17f7c:	bne	17ff4 <__assert_fail@plt+0x6924>
   17f80:	ldrb	r1, [r0, #1]
   17f84:	and	r1, r1, #223	; 0xdf
   17f88:	cmp	r1, #84	; 0x54
   17f8c:	bne	17ff4 <__assert_fail@plt+0x6924>
   17f90:	ldrb	r1, [r0, #2]
   17f94:	and	r1, r1, #223	; 0xdf
   17f98:	cmp	r1, #70	; 0x46
   17f9c:	ldrbeq	r1, [r0, #3]
   17fa0:	cmpeq	r1, #45	; 0x2d
   17fa4:	bne	17ff4 <__assert_fail@plt+0x6924>
   17fa8:	ldrb	r1, [r0, #4]
   17fac:	cmp	r1, #56	; 0x38
   17fb0:	ldrbeq	r0, [r0, #5]
   17fb4:	cmpeq	r0, #0
   17fb8:	bne	17ff4 <__assert_fail@plt+0x6924>
   17fbc:	movw	r0, #57382	; 0xe026
   17fc0:	movt	r0, #1
   17fc4:	str	r0, [sp, #72]	; 0x48
   17fc8:	b	18014 <__assert_fail@plt+0x6944>
   17fcc:	ldrb	r1, [r0, #1]
   17fd0:	mov	r2, r8
   17fd4:	and	r1, r1, #223	; 0xdf
   17fd8:	cmp	r1, #66	; 0x42
   17fdc:	bne	17ff4 <__assert_fail@plt+0x6924>
   17fe0:	ldrb	r1, [r0, #2]
   17fe4:	cmp	r1, #49	; 0x31
   17fe8:	ldrbeq	r1, [r0, #3]
   17fec:	cmpeq	r1, #56	; 0x38
   17ff0:	beq	18e70 <__assert_fail@plt+0x77a0>
   17ff4:	movw	r0, #57376	; 0xe020
   17ff8:	cmp	r7, #9
   17ffc:	movt	r0, #1
   18000:	mov	r1, r0
   18004:	movw	r0, #57372	; 0xe01c
   18008:	movt	r0, #1
   1800c:	moveq	r1, r0
   18010:	str	r1, [sp, #72]	; 0x48
   18014:	mov	r8, r5
   18018:	mov	r9, #0
   1801c:	tst	r8, #1
   18020:	mov	r5, r8
   18024:	str	r2, [fp, #-48]	; 0xffffffd0
   18028:	bne	18060 <__assert_fail@plt+0x6990>
   1802c:	ldr	r0, [sp, #68]	; 0x44
   18030:	ldrb	r0, [r0]
   18034:	cmp	r0, #0
   18038:	beq	18060 <__assert_fail@plt+0x6990>
   1803c:	ldr	r1, [sp, #68]	; 0x44
   18040:	mov	r9, #0
   18044:	add	r1, r1, #1
   18048:	cmp	r9, sl
   1804c:	strbcc	r0, [r6, r9]
   18050:	ldrb	r0, [r1, r9]
   18054:	add	r9, r9, #1
   18058:	cmp	r0, #0
   1805c:	bne	18048 <__assert_fail@plt+0x6978>
   18060:	ldr	r8, [sp, #72]	; 0x48
   18064:	mov	r0, r8
   18068:	bl	11574 <strlen@plt>
   1806c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18070:	ldr	lr, [sp, #84]	; 0x54
   18074:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18078:	str	r0, [fp, #-76]	; 0xffffffb4
   1807c:	str	r8, [sp, #92]	; 0x5c
   18080:	mov	r3, #1
   18084:	ldr	r0, [fp, #16]
   18088:	str	r7, [fp, #-64]	; 0xffffffc0
   1808c:	str	r5, [fp, #-72]	; 0xffffffb8
   18090:	str	r3, [sp, #80]	; 0x50
   18094:	cmp	r0, #0
   18098:	movwne	r0, #1
   1809c:	and	r0, r0, r5
   180a0:	str	r0, [fp, #-88]	; 0xffffffa8
   180a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   180a8:	cmp	r0, #0
   180ac:	movwne	r0, #1
   180b0:	subs	r7, r7, #2
   180b4:	and	r1, r0, r5
   180b8:	str	r7, [fp, #-80]	; 0xffffffb0
   180bc:	and	r1, r3, r1
   180c0:	str	r1, [sp, #40]	; 0x28
   180c4:	clz	r1, r7
   180c8:	lsr	r1, r1, #5
   180cc:	and	r1, r1, r5
   180d0:	eor	r5, r5, #1
   180d4:	str	r1, [sp, #36]	; 0x24
   180d8:	mov	r1, r7
   180dc:	str	r5, [sp, #88]	; 0x58
   180e0:	mov	r7, #0
   180e4:	movwne	r1, #1
   180e8:	orr	r5, r1, r5
   180ec:	and	r1, r1, r3
   180f0:	and	r0, r0, r1
   180f4:	str	r5, [sp, #60]	; 0x3c
   180f8:	str	r1, [fp, #-68]	; 0xffffffbc
   180fc:	str	r0, [fp, #-60]	; 0xffffffc4
   18100:	eor	r0, r3, #1
   18104:	str	r0, [sp, #44]	; 0x2c
   18108:	cmn	lr, #1
   1810c:	beq	1811c <__assert_fail@plt+0x6a4c>
   18110:	cmp	r7, lr
   18114:	bne	18128 <__assert_fail@plt+0x6a58>
   18118:	b	18da0 <__assert_fail@plt+0x76d0>
   1811c:	ldrb	r0, [ip, r7]
   18120:	cmp	r0, #0
   18124:	beq	18da8 <__assert_fail@plt+0x76d8>
   18128:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1812c:	mov	r8, #0
   18130:	str	r4, [fp, #-52]	; 0xffffffcc
   18134:	str	r2, [fp, #-48]	; 0xffffffd0
   18138:	cmp	r0, #0
   1813c:	beq	18170 <__assert_fail@plt+0x6aa0>
   18140:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18144:	add	r4, r7, r0
   18148:	cmp	r0, #2
   1814c:	bcc	18168 <__assert_fail@plt+0x6a98>
   18150:	cmn	lr, #1
   18154:	bne	18168 <__assert_fail@plt+0x6a98>
   18158:	mov	r0, ip
   1815c:	bl	11574 <strlen@plt>
   18160:	ldr	ip, [fp, #-84]	; 0xffffffac
   18164:	mov	lr, r0
   18168:	cmp	r4, lr
   1816c:	bls	18188 <__assert_fail@plt+0x6ab8>
   18170:	mov	r0, #0
   18174:	str	r0, [fp, #-56]	; 0xffffffc8
   18178:	ldrb	r5, [ip, r7]
   1817c:	cmp	r5, #126	; 0x7e
   18180:	bls	181d8 <__assert_fail@plt+0x6b08>
   18184:	b	185e0 <__assert_fail@plt+0x6f10>
   18188:	ldr	r1, [sp, #92]	; 0x5c
   1818c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18190:	add	r0, ip, r7
   18194:	mov	r4, lr
   18198:	bl	11424 <memcmp@plt>
   1819c:	ldr	r2, [sp, #88]	; 0x58
   181a0:	cmp	r0, #0
   181a4:	mov	r1, r0
   181a8:	movwne	r1, #1
   181ac:	orr	r1, r1, r2
   181b0:	tst	r1, #1
   181b4:	beq	18eb4 <__assert_fail@plt+0x77e4>
   181b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   181bc:	clz	r0, r0
   181c0:	mov	lr, r4
   181c4:	lsr	r0, r0, #5
   181c8:	str	r0, [fp, #-56]	; 0xffffffc8
   181cc:	ldrb	r5, [ip, r7]
   181d0:	cmp	r5, #126	; 0x7e
   181d4:	bhi	185e0 <__assert_fail@plt+0x6f10>
   181d8:	add	r3, pc, #16
   181dc:	mov	r4, #1
   181e0:	mov	r2, #110	; 0x6e
   181e4:	mov	r0, #97	; 0x61
   181e8:	mov	r1, #0
   181ec:	ldr	pc, [r3, r5, lsl #2]
   181f0:	andeq	r8, r1, r0, asr #9
   181f4:	andeq	r8, r1, r0, ror #11
   181f8:	andeq	r8, r1, r0, ror #11
   181fc:	andeq	r8, r1, r0, ror #11
   18200:	andeq	r8, r1, r0, ror #11
   18204:	andeq	r8, r1, r0, ror #11
   18208:	andeq	r8, r1, r0, ror #11
   1820c:			; <UNDEFINED> instruction: 0x000186bc
   18210:	andeq	r8, r1, r0, lsr #9
   18214:	andeq	r8, r1, r8, lsl #9
   18218:	andeq	r8, r1, ip, lsr #9
   1821c:	andeq	r8, r1, ip, lsr r5
   18220:	andeq	r8, r1, r0, lsl #9
   18224:	andeq	r8, r1, r8, lsr #9
   18228:	andeq	r8, r1, r0, ror #11
   1822c:	andeq	r8, r1, r0, ror #11
   18230:	andeq	r8, r1, r0, ror #11
   18234:	andeq	r8, r1, r0, ror #11
   18238:	andeq	r8, r1, r0, ror #11
   1823c:	andeq	r8, r1, r0, ror #11
   18240:	andeq	r8, r1, r0, ror #11
   18244:	andeq	r8, r1, r0, ror #11
   18248:	andeq	r8, r1, r0, ror #11
   1824c:	andeq	r8, r1, r0, ror #11
   18250:	andeq	r8, r1, r0, ror #11
   18254:	andeq	r8, r1, r0, ror #11
   18258:	andeq	r8, r1, r0, ror #11
   1825c:	andeq	r8, r1, r0, ror #11
   18260:	andeq	r8, r1, r0, ror #11
   18264:	andeq	r8, r1, r0, ror #11
   18268:	andeq	r8, r1, r0, ror #11
   1826c:	andeq	r8, r1, r0, ror #11
   18270:	andeq	r8, r1, r8, lsr r6
   18274:	andeq	r8, r1, ip, lsr r6
   18278:	andeq	r8, r1, ip, lsr r6
   1827c:	andeq	r8, r1, ip, lsl #8
   18280:	andeq	r8, r1, ip, lsr r6
   18284:	andeq	r8, r1, ip, ror #7
   18288:	andeq	r8, r1, ip, lsr r6
   1828c:	andeq	r8, r1, r4, asr #10
   18290:	andeq	r8, r1, ip, lsr r6
   18294:	andeq	r8, r1, ip, lsr r6
   18298:	andeq	r8, r1, ip, lsr r6
   1829c:	andeq	r8, r1, ip, ror #7
   182a0:	andeq	r8, r1, ip, ror #7
   182a4:	andeq	r8, r1, ip, ror #7
   182a8:	andeq	r8, r1, ip, ror #7
   182ac:	andeq	r8, r1, ip, ror #7
   182b0:	andeq	r8, r1, ip, ror #7
   182b4:	andeq	r8, r1, ip, ror #7
   182b8:	andeq	r8, r1, ip, ror #7
   182bc:	andeq	r8, r1, ip, ror #7
   182c0:	andeq	r8, r1, ip, ror #7
   182c4:	andeq	r8, r1, ip, ror #7
   182c8:	andeq	r8, r1, ip, ror #7
   182cc:	andeq	r8, r1, ip, ror #7
   182d0:	andeq	r8, r1, ip, ror #7
   182d4:	andeq	r8, r1, ip, ror #7
   182d8:	andeq	r8, r1, ip, ror #7
   182dc:	andeq	r8, r1, ip, lsr r6
   182e0:	andeq	r8, r1, ip, lsr r6
   182e4:	andeq	r8, r1, ip, lsr r6
   182e8:	andeq	r8, r1, ip, lsr r6
   182ec:	andeq	r8, r1, r0, lsl #10
   182f0:	andeq	r8, r1, r0, ror #11
   182f4:	andeq	r8, r1, ip, ror #7
   182f8:	andeq	r8, r1, ip, ror #7
   182fc:	andeq	r8, r1, ip, ror #7
   18300:	andeq	r8, r1, ip, ror #7
   18304:	andeq	r8, r1, ip, ror #7
   18308:	andeq	r8, r1, ip, ror #7
   1830c:	andeq	r8, r1, ip, ror #7
   18310:	andeq	r8, r1, ip, ror #7
   18314:	andeq	r8, r1, ip, ror #7
   18318:	andeq	r8, r1, ip, ror #7
   1831c:	andeq	r8, r1, ip, ror #7
   18320:	andeq	r8, r1, ip, ror #7
   18324:	andeq	r8, r1, ip, ror #7
   18328:	andeq	r8, r1, ip, ror #7
   1832c:	andeq	r8, r1, ip, ror #7
   18330:	andeq	r8, r1, ip, ror #7
   18334:	andeq	r8, r1, ip, ror #7
   18338:	andeq	r8, r1, ip, ror #7
   1833c:	andeq	r8, r1, ip, ror #7
   18340:	andeq	r8, r1, ip, ror #7
   18344:	andeq	r8, r1, ip, ror #7
   18348:	andeq	r8, r1, ip, ror #7
   1834c:	andeq	r8, r1, ip, ror #7
   18350:	andeq	r8, r1, ip, ror #7
   18354:	andeq	r8, r1, ip, ror #7
   18358:	andeq	r8, r1, ip, ror #7
   1835c:	andeq	r8, r1, ip, lsr r6
   18360:	andeq	r8, r1, ip, asr #8
   18364:	andeq	r8, r1, ip, ror #7
   18368:	andeq	r8, r1, ip, lsr r6
   1836c:	andeq	r8, r1, ip, ror #7
   18370:	andeq	r8, r1, ip, lsr r6
   18374:	andeq	r8, r1, ip, ror #7
   18378:	andeq	r8, r1, ip, ror #7
   1837c:	andeq	r8, r1, ip, ror #7
   18380:	andeq	r8, r1, ip, ror #7
   18384:	andeq	r8, r1, ip, ror #7
   18388:	andeq	r8, r1, ip, ror #7
   1838c:	andeq	r8, r1, ip, ror #7
   18390:	andeq	r8, r1, ip, ror #7
   18394:	andeq	r8, r1, ip, ror #7
   18398:	andeq	r8, r1, ip, ror #7
   1839c:	andeq	r8, r1, ip, ror #7
   183a0:	andeq	r8, r1, ip, ror #7
   183a4:	andeq	r8, r1, ip, ror #7
   183a8:	andeq	r8, r1, ip, ror #7
   183ac:	andeq	r8, r1, ip, ror #7
   183b0:	andeq	r8, r1, ip, ror #7
   183b4:	andeq	r8, r1, ip, ror #7
   183b8:	andeq	r8, r1, ip, ror #7
   183bc:	andeq	r8, r1, ip, ror #7
   183c0:	andeq	r8, r1, ip, ror #7
   183c4:	andeq	r8, r1, ip, ror #7
   183c8:	andeq	r8, r1, ip, ror #7
   183cc:	andeq	r8, r1, ip, ror #7
   183d0:	andeq	r8, r1, ip, ror #7
   183d4:	andeq	r8, r1, ip, ror #7
   183d8:	andeq	r8, r1, ip, ror #7
   183dc:	andeq	r8, r1, ip, lsr #8
   183e0:	andeq	r8, r1, ip, lsr r6
   183e4:	andeq	r8, r1, ip, lsr #8
   183e8:	andeq	r8, r1, ip, lsl #8
   183ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   183f0:	cmp	r0, #0
   183f4:	beq	186d0 <__assert_fail@plt+0x7000>
   183f8:	ldr	r0, [fp, #16]
   183fc:	cmp	r0, #0
   18400:	mov	r0, r5
   18404:	bne	186e0 <__assert_fail@plt+0x7010>
   18408:	b	18700 <__assert_fail@plt+0x7030>
   1840c:	mov	r4, #0
   18410:	cmp	r7, #0
   18414:	beq	18638 <__assert_fail@plt+0x6f68>
   18418:	mov	r8, #0
   1841c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18420:	cmp	r0, #0
   18424:	bne	183f8 <__assert_fail@plt+0x6d28>
   18428:	b	186d0 <__assert_fail@plt+0x7000>
   1842c:	mov	r4, #0
   18430:	cmn	lr, #1
   18434:	beq	18610 <__assert_fail@plt+0x6f40>
   18438:	cmp	r7, #0
   1843c:	bne	18418 <__assert_fail@plt+0x6d48>
   18440:	cmp	lr, #1
   18444:	beq	18638 <__assert_fail@plt+0x6f68>
   18448:	b	18418 <__assert_fail@plt+0x6d48>
   1844c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18450:	cmp	r0, #2
   18454:	bne	18668 <__assert_fail@plt+0x6f98>
   18458:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1845c:	tst	r0, #1
   18460:	bne	18ec8 <__assert_fail@plt+0x77f8>
   18464:	mov	r8, #0
   18468:	mov	r0, #92	; 0x5c
   1846c:	mov	r4, #0
   18470:	cmp	r8, #0
   18474:	beq	18688 <__assert_fail@plt+0x6fb8>
   18478:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1847c:	b	1877c <__assert_fail@plt+0x70ac>
   18480:	mov	r0, #102	; 0x66
   18484:	b	186bc <__assert_fail@plt+0x6fec>
   18488:	mov	r2, #116	; 0x74
   1848c:	ldr	r0, [sp, #60]	; 0x3c
   18490:	tst	r0, #1
   18494:	mov	r0, r2
   18498:	bne	186bc <__assert_fail@plt+0x6fec>
   1849c:	b	18ec8 <__assert_fail@plt+0x77f8>
   184a0:	mov	r0, #98	; 0x62
   184a4:	b	186bc <__assert_fail@plt+0x6fec>
   184a8:	mov	r2, #114	; 0x72
   184ac:	ldr	r0, [sp, #60]	; 0x3c
   184b0:	tst	r0, #1
   184b4:	mov	r0, r2
   184b8:	bne	186bc <__assert_fail@plt+0x6fec>
   184bc:	b	18ec8 <__assert_fail@plt+0x77f8>
   184c0:	ldr	r0, [sp, #80]	; 0x50
   184c4:	tst	r0, #1
   184c8:	beq	187a4 <__assert_fail@plt+0x70d4>
   184cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   184d0:	tst	r0, #1
   184d4:	bne	18ff0 <__assert_fail@plt+0x7920>
   184d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   184dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   184e0:	cmp	r0, #2
   184e4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   184e8:	movwne	r0, #1
   184ec:	orr	r0, r0, r2
   184f0:	tst	r0, #1
   184f4:	beq	18a9c <__assert_fail@plt+0x73cc>
   184f8:	mov	r0, r9
   184fc:	b	18ad0 <__assert_fail@plt+0x7400>
   18500:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18504:	mov	r8, #0
   18508:	mov	r5, #63	; 0x3f
   1850c:	cmp	r0, #5
   18510:	beq	18958 <__assert_fail@plt+0x7288>
   18514:	cmp	r0, #2
   18518:	bne	18a08 <__assert_fail@plt+0x7338>
   1851c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18520:	tst	r0, #1
   18524:	bne	18ec8 <__assert_fail@plt+0x77f8>
   18528:	mov	r4, #0
   1852c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18530:	cmp	r0, #0
   18534:	bne	183f8 <__assert_fail@plt+0x6d28>
   18538:	b	186d0 <__assert_fail@plt+0x7000>
   1853c:	mov	r0, #118	; 0x76
   18540:	b	186bc <__assert_fail@plt+0x6fec>
   18544:	mov	r0, #1
   18548:	mov	r5, #39	; 0x27
   1854c:	str	r0, [sp, #52]	; 0x34
   18550:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18554:	cmp	r0, #2
   18558:	bne	185cc <__assert_fail@plt+0x6efc>
   1855c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18560:	tst	r0, #1
   18564:	bne	18ec8 <__assert_fail@plt+0x77f8>
   18568:	ldr	r2, [sp, #48]	; 0x30
   1856c:	clz	r1, sl
   18570:	mov	r8, #0
   18574:	lsr	r1, r1, #5
   18578:	cmp	r2, #0
   1857c:	mov	r0, r2
   18580:	movwne	r0, #1
   18584:	orrs	r0, r0, r1
   18588:	moveq	r2, sl
   1858c:	moveq	sl, r0
   18590:	cmp	r9, sl
   18594:	str	r2, [sp, #48]	; 0x30
   18598:	movcc	r0, #39	; 0x27
   1859c:	strbcc	r0, [r6, r9]
   185a0:	add	r0, r9, #1
   185a4:	cmp	r0, sl
   185a8:	movcc	r1, #92	; 0x5c
   185ac:	strbcc	r1, [r6, r0]
   185b0:	add	r0, r9, #2
   185b4:	add	r9, r9, #3
   185b8:	cmp	r0, sl
   185bc:	movcc	r1, #39	; 0x27
   185c0:	strbcc	r1, [r6, r0]
   185c4:	mov	r0, #0
   185c8:	str	r0, [fp, #-48]	; 0xffffffd0
   185cc:	mov	r4, #1
   185d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   185d4:	cmp	r0, #0
   185d8:	bne	183f8 <__assert_fail@plt+0x6d28>
   185dc:	b	186d0 <__assert_fail@plt+0x7000>
   185e0:	ldr	r0, [sp, #32]
   185e4:	cmp	r0, #1
   185e8:	bne	187d4 <__assert_fail@plt+0x7104>
   185ec:	str	lr, [sp, #84]	; 0x54
   185f0:	bl	1155c <__ctype_b_loc@plt>
   185f4:	ldr	r0, [r0]
   185f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   185fc:	mov	r1, #1
   18600:	add	r0, r0, r5, lsl #1
   18604:	ldrb	r0, [r0, #1]
   18608:	ubfx	r4, r0, #6, #1
   1860c:	b	18bcc <__assert_fail@plt+0x74fc>
   18610:	cmp	r7, #0
   18614:	ldrbeq	r0, [ip, #1]
   18618:	cmpeq	r0, #0
   1861c:	beq	18638 <__assert_fail@plt+0x6f68>
   18620:	mvn	lr, #0
   18624:	mov	r8, #0
   18628:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1862c:	cmp	r0, #0
   18630:	bne	183f8 <__assert_fail@plt+0x6d28>
   18634:	b	186d0 <__assert_fail@plt+0x7000>
   18638:	mov	r1, #1
   1863c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18640:	cmp	r0, #2
   18644:	bne	18654 <__assert_fail@plt+0x6f84>
   18648:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1864c:	tst	r0, #1
   18650:	bne	18ec8 <__assert_fail@plt+0x77f8>
   18654:	mov	r4, r1
   18658:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1865c:	cmp	r0, #0
   18660:	bne	183f8 <__assert_fail@plt+0x6d28>
   18664:	b	186d0 <__assert_fail@plt+0x7000>
   18668:	ldr	r1, [sp, #40]	; 0x28
   1866c:	mov	r8, #0
   18670:	mov	r0, #92	; 0x5c
   18674:	cmp	r1, #0
   18678:	beq	186bc <__assert_fail@plt+0x6fec>
   1867c:	mov	r4, #0
   18680:	cmp	r8, #0
   18684:	bne	18478 <__assert_fail@plt+0x6da8>
   18688:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1868c:	tst	r2, #1
   18690:	beq	1877c <__assert_fail@plt+0x70ac>
   18694:	cmp	r9, sl
   18698:	movcc	r1, #39	; 0x27
   1869c:	strbcc	r1, [r6, r9]
   186a0:	add	r1, r9, #1
   186a4:	add	r9, r9, #2
   186a8:	cmp	r1, sl
   186ac:	movcc	r2, #39	; 0x27
   186b0:	strbcc	r2, [r6, r1]
   186b4:	mov	r2, #0
   186b8:	b	1877c <__assert_fail@plt+0x70ac>
   186bc:	ldr	r1, [sp, #80]	; 0x50
   186c0:	mov	r4, #0
   186c4:	mov	r8, #0
   186c8:	tst	r1, #1
   186cc:	bne	1870c <__assert_fail@plt+0x703c>
   186d0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   186d4:	cmp	r0, #0
   186d8:	mov	r0, r5
   186dc:	beq	18700 <__assert_fail@plt+0x7030>
   186e0:	ldr	r1, [fp, #16]
   186e4:	ubfx	r0, r5, #5, #3
   186e8:	mov	r2, #1
   186ec:	ldr	r0, [r1, r0, lsl #2]
   186f0:	and	r1, r5, #31
   186f4:	tst	r0, r2, lsl r1
   186f8:	mov	r0, r5
   186fc:	bne	1870c <__assert_fail@plt+0x703c>
   18700:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18704:	cmp	r1, #0
   18708:	beq	18b64 <__assert_fail@plt+0x7494>
   1870c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18710:	tst	r1, #1
   18714:	bne	18ea8 <__assert_fail@plt+0x77d8>
   18718:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1871c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18720:	cmp	r1, #2
   18724:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18728:	movwne	r1, #1
   1872c:	orr	r1, r1, r2
   18730:	tst	r1, #1
   18734:	bne	1876c <__assert_fail@plt+0x709c>
   18738:	cmp	r9, sl
   1873c:	movcc	r1, #39	; 0x27
   18740:	strbcc	r1, [r6, r9]
   18744:	add	r1, r9, #1
   18748:	cmp	r1, sl
   1874c:	movcc	r2, #36	; 0x24
   18750:	strbcc	r2, [r6, r1]
   18754:	add	r1, r9, #2
   18758:	add	r9, r9, #3
   1875c:	cmp	r1, sl
   18760:	movcc	r2, #39	; 0x27
   18764:	strbcc	r2, [r6, r1]
   18768:	mov	r2, #1
   1876c:	cmp	r9, sl
   18770:	movcc	r1, #92	; 0x5c
   18774:	strbcc	r1, [r6, r9]
   18778:	add	r9, r9, #1
   1877c:	cmp	r9, sl
   18780:	add	r7, r7, #1
   18784:	strbcc	r0, [r6, r9]
   18788:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1878c:	add	r9, r9, #1
   18790:	and	r0, r0, r4
   18794:	mov	r4, r0
   18798:	cmn	lr, #1
   1879c:	bne	18110 <__assert_fail@plt+0x6a40>
   187a0:	b	1811c <__assert_fail@plt+0x6a4c>
   187a4:	ldr	r0, [sp, #28]
   187a8:	mov	r4, #0
   187ac:	mov	r8, #0
   187b0:	mov	r5, #0
   187b4:	cmp	r0, #0
   187b8:	beq	186d0 <__assert_fail@plt+0x7000>
   187bc:	ldr	r4, [fp, #-52]	; 0xffffffcc
   187c0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   187c4:	add	r7, r7, #1
   187c8:	cmn	lr, #1
   187cc:	bne	18110 <__assert_fail@plt+0x6a40>
   187d0:	b	1811c <__assert_fail@plt+0x6a4c>
   187d4:	mov	r0, #0
   187d8:	cmn	lr, #1
   187dc:	str	r0, [fp, #-36]	; 0xffffffdc
   187e0:	str	r0, [fp, #-40]	; 0xffffffd8
   187e4:	bne	187f8 <__assert_fail@plt+0x7128>
   187e8:	mov	r0, ip
   187ec:	bl	11574 <strlen@plt>
   187f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   187f4:	mov	lr, r0
   187f8:	ldr	r0, [sp, #36]	; 0x24
   187fc:	str	sl, [sp, #56]	; 0x38
   18800:	str	lr, [sp, #84]	; 0x54
   18804:	cmp	r0, #0
   18808:	beq	18a20 <__assert_fail@plt+0x7350>
   1880c:	add	r0, ip, r7
   18810:	mov	r4, #1
   18814:	mov	r6, #0
   18818:	sub	sl, fp, #40	; 0x28
   1881c:	str	r0, [sp, #20]
   18820:	str	r6, [sp, #64]	; 0x40
   18824:	add	r6, r6, r7
   18828:	sub	r0, fp, #44	; 0x2c
   1882c:	mov	r3, sl
   18830:	add	r1, ip, r6
   18834:	sub	r2, lr, r6
   18838:	bl	1bc24 <__assert_fail@plt+0xa554>
   1883c:	cmn	r0, #2
   18840:	beq	18b7c <__assert_fail@plt+0x74ac>
   18844:	ldr	sl, [sp, #56]	; 0x38
   18848:	cmn	r0, #1
   1884c:	beq	18b70 <__assert_fail@plt+0x74a0>
   18850:	cmp	r0, #0
   18854:	beq	18b74 <__assert_fail@plt+0x74a4>
   18858:	cmp	r0, #2
   1885c:	bcc	1891c <__assert_fail@plt+0x724c>
   18860:	ldr	r1, [sp, #64]	; 0x40
   18864:	ldr	r2, [sp, #20]
   18868:	add	r1, r2, r1
   1886c:	mov	r2, #1
   18870:	ldrb	r3, [r1, r2]
   18874:	sub	r3, r3, #91	; 0x5b
   18878:	cmp	r3, #33	; 0x21
   1887c:	bhi	18910 <__assert_fail@plt+0x7240>
   18880:	add	r6, pc, #0
   18884:	ldr	pc, [r6, r3, lsl #2]
   18888:	ldrdeq	r8, [r1], -r4
   1888c:	ldrdeq	r8, [r1], -r4
   18890:	andeq	r8, r1, r0, lsl r9
   18894:	ldrdeq	r8, [r1], -r4
   18898:	andeq	r8, r1, r0, lsl r9
   1889c:	ldrdeq	r8, [r1], -r4
   188a0:	andeq	r8, r1, r0, lsl r9
   188a4:	andeq	r8, r1, r0, lsl r9
   188a8:	andeq	r8, r1, r0, lsl r9
   188ac:	andeq	r8, r1, r0, lsl r9
   188b0:	andeq	r8, r1, r0, lsl r9
   188b4:	andeq	r8, r1, r0, lsl r9
   188b8:	andeq	r8, r1, r0, lsl r9
   188bc:	andeq	r8, r1, r0, lsl r9
   188c0:	andeq	r8, r1, r0, lsl r9
   188c4:	andeq	r8, r1, r0, lsl r9
   188c8:	andeq	r8, r1, r0, lsl r9
   188cc:	andeq	r8, r1, r0, lsl r9
   188d0:	andeq	r8, r1, r0, lsl r9
   188d4:	andeq	r8, r1, r0, lsl r9
   188d8:	andeq	r8, r1, r0, lsl r9
   188dc:	andeq	r8, r1, r0, lsl r9
   188e0:	andeq	r8, r1, r0, lsl r9
   188e4:	andeq	r8, r1, r0, lsl r9
   188e8:	andeq	r8, r1, r0, lsl r9
   188ec:	andeq	r8, r1, r0, lsl r9
   188f0:	andeq	r8, r1, r0, lsl r9
   188f4:	andeq	r8, r1, r0, lsl r9
   188f8:	andeq	r8, r1, r0, lsl r9
   188fc:	andeq	r8, r1, r0, lsl r9
   18900:	andeq	r8, r1, r0, lsl r9
   18904:	andeq	r8, r1, r0, lsl r9
   18908:	andeq	r8, r1, r0, lsl r9
   1890c:	ldrdeq	r8, [r1], -r4
   18910:	add	r2, r2, #1
   18914:	cmp	r2, r0
   18918:	bcc	18870 <__assert_fail@plt+0x71a0>
   1891c:	ldr	r6, [sp, #64]	; 0x40
   18920:	add	r6, r0, r6
   18924:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18928:	bl	1146c <iswprint@plt>
   1892c:	cmp	r0, #0
   18930:	sub	sl, fp, #40	; 0x28
   18934:	movwne	r0, #1
   18938:	and	r4, r4, r0
   1893c:	mov	r0, sl
   18940:	bl	1140c <mbsinit@plt>
   18944:	ldr	ip, [fp, #-84]	; 0xffffffac
   18948:	ldr	lr, [sp, #84]	; 0x54
   1894c:	cmp	r0, #0
   18950:	beq	18820 <__assert_fail@plt+0x7150>
   18954:	b	18bc0 <__assert_fail@plt+0x74f0>
   18958:	ldr	r0, [sp, #24]
   1895c:	cmp	r0, #0
   18960:	beq	18a08 <__assert_fail@plt+0x7338>
   18964:	add	r0, r7, #2
   18968:	cmp	r0, lr
   1896c:	bcs	18a08 <__assert_fail@plt+0x7338>
   18970:	add	r1, ip, r7
   18974:	ldrb	r1, [r1, #1]
   18978:	cmp	r1, #63	; 0x3f
   1897c:	bne	18a08 <__assert_fail@plt+0x7338>
   18980:	ldrb	r5, [ip, r0]
   18984:	sub	r1, r5, #33	; 0x21
   18988:	cmp	r1, #29
   1898c:	bhi	18a08 <__assert_fail@plt+0x7338>
   18990:	movw	r3, #20929	; 0x51c1
   18994:	mov	r2, #1
   18998:	movt	r3, #14336	; 0x3800
   1899c:	tst	r3, r2, lsl r1
   189a0:	beq	18a08 <__assert_fail@plt+0x7338>
   189a4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   189a8:	tst	r1, #1
   189ac:	bne	18ff8 <__assert_fail@plt+0x7928>
   189b0:	cmp	r9, sl
   189b4:	mov	r7, r0
   189b8:	mov	r4, #0
   189bc:	movcc	r1, #63	; 0x3f
   189c0:	strbcc	r1, [r6, r9]
   189c4:	add	r1, r9, #1
   189c8:	cmp	r1, sl
   189cc:	movcc	r2, #34	; 0x22
   189d0:	strbcc	r2, [r6, r1]
   189d4:	add	r1, r9, #2
   189d8:	cmp	r1, sl
   189dc:	movcc	r2, #34	; 0x22
   189e0:	strbcc	r2, [r6, r1]
   189e4:	add	r1, r9, #3
   189e8:	add	r9, r9, #4
   189ec:	cmp	r1, sl
   189f0:	movcc	r2, #63	; 0x3f
   189f4:	strbcc	r2, [r6, r1]
   189f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   189fc:	cmp	r0, #0
   18a00:	bne	183f8 <__assert_fail@plt+0x6d28>
   18a04:	b	186d0 <__assert_fail@plt+0x7000>
   18a08:	mov	r5, #63	; 0x3f
   18a0c:	mov	r4, #0
   18a10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18a14:	cmp	r0, #0
   18a18:	bne	183f8 <__assert_fail@plt+0x6d28>
   18a1c:	b	186d0 <__assert_fail@plt+0x7000>
   18a20:	mov	r4, #1
   18a24:	mov	r6, #0
   18a28:	sub	sl, fp, #40	; 0x28
   18a2c:	str	r6, [sp, #64]	; 0x40
   18a30:	add	r6, r6, r7
   18a34:	sub	r0, fp, #44	; 0x2c
   18a38:	mov	r3, sl
   18a3c:	add	r1, ip, r6
   18a40:	sub	r2, lr, r6
   18a44:	bl	1bc24 <__assert_fail@plt+0xa554>
   18a48:	cmn	r0, #2
   18a4c:	beq	18b7c <__assert_fail@plt+0x74ac>
   18a50:	cmn	r0, #1
   18a54:	beq	18b70 <__assert_fail@plt+0x74a0>
   18a58:	ldr	r6, [sp, #64]	; 0x40
   18a5c:	cmp	r0, #0
   18a60:	beq	18bbc <__assert_fail@plt+0x74ec>
   18a64:	add	r6, r0, r6
   18a68:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18a6c:	bl	1146c <iswprint@plt>
   18a70:	cmp	r0, #0
   18a74:	sub	sl, fp, #40	; 0x28
   18a78:	movwne	r0, #1
   18a7c:	and	r4, r4, r0
   18a80:	mov	r0, sl
   18a84:	bl	1140c <mbsinit@plt>
   18a88:	ldr	ip, [fp, #-84]	; 0xffffffac
   18a8c:	ldr	lr, [sp, #84]	; 0x54
   18a90:	cmp	r0, #0
   18a94:	beq	18a2c <__assert_fail@plt+0x735c>
   18a98:	b	18bc0 <__assert_fail@plt+0x74f0>
   18a9c:	cmp	r9, sl
   18aa0:	mov	r2, #1
   18aa4:	movcc	r0, #39	; 0x27
   18aa8:	strbcc	r0, [r6, r9]
   18aac:	add	r0, r9, #1
   18ab0:	cmp	r0, sl
   18ab4:	movcc	r1, #36	; 0x24
   18ab8:	strbcc	r1, [r6, r0]
   18abc:	add	r0, r9, #2
   18ac0:	cmp	r0, sl
   18ac4:	movcc	r1, #39	; 0x27
   18ac8:	strbcc	r1, [r6, r0]
   18acc:	add	r0, r9, #3
   18ad0:	cmp	r0, sl
   18ad4:	add	r9, r0, #1
   18ad8:	str	r2, [fp, #-48]	; 0xffffffd0
   18adc:	movcc	r1, #92	; 0x5c
   18ae0:	strbcc	r1, [r6, r0]
   18ae4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18ae8:	cmp	r1, #2
   18aec:	beq	18b4c <__assert_fail@plt+0x747c>
   18af0:	add	r1, r7, #1
   18af4:	mov	r4, #0
   18af8:	mov	r8, #1
   18afc:	mov	r5, #48	; 0x30
   18b00:	cmp	r1, lr
   18b04:	bcs	183ec <__assert_fail@plt+0x6d1c>
   18b08:	ldrb	r1, [ip, r1]
   18b0c:	sub	r1, r1, #48	; 0x30
   18b10:	uxtb	r1, r1
   18b14:	cmp	r1, #9
   18b18:	bhi	183ec <__assert_fail@plt+0x6d1c>
   18b1c:	cmp	r9, sl
   18b20:	movcc	r1, #48	; 0x30
   18b24:	strbcc	r1, [r6, r9]
   18b28:	add	r1, r0, #2
   18b2c:	add	r9, r0, #3
   18b30:	cmp	r1, sl
   18b34:	movcc	r2, #48	; 0x30
   18b38:	strbcc	r2, [r6, r1]
   18b3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18b40:	cmp	r0, #0
   18b44:	bne	183f8 <__assert_fail@plt+0x6d28>
   18b48:	b	186d0 <__assert_fail@plt+0x7000>
   18b4c:	mov	r0, #48	; 0x30
   18b50:	mov	r8, #1
   18b54:	mov	r4, #0
   18b58:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18b5c:	cmp	r1, #0
   18b60:	bne	1870c <__assert_fail@plt+0x703c>
   18b64:	cmp	r8, #0
   18b68:	beq	18688 <__assert_fail@plt+0x6fb8>
   18b6c:	b	18478 <__assert_fail@plt+0x6da8>
   18b70:	mov	r4, #0
   18b74:	ldr	ip, [fp, #-84]	; 0xffffffac
   18b78:	b	18bb4 <__assert_fail@plt+0x74e4>
   18b7c:	ldr	r1, [sp, #84]	; 0x54
   18b80:	ldr	ip, [fp, #-84]	; 0xffffffac
   18b84:	mov	r4, #0
   18b88:	cmp	r6, r1
   18b8c:	bcs	18bb4 <__assert_fail@plt+0x74e4>
   18b90:	ldrb	r0, [ip, r6]
   18b94:	cmp	r0, #0
   18b98:	beq	18bb4 <__assert_fail@plt+0x74e4>
   18b9c:	ldr	r0, [sp, #64]	; 0x40
   18ba0:	add	r0, r0, #1
   18ba4:	add	r6, r0, r7
   18ba8:	str	r0, [sp, #64]	; 0x40
   18bac:	cmp	r6, r1
   18bb0:	bcc	18b90 <__assert_fail@plt+0x74c0>
   18bb4:	ldr	r6, [sp, #64]	; 0x40
   18bb8:	b	18bc0 <__assert_fail@plt+0x74f0>
   18bbc:	ldr	ip, [fp, #-84]	; 0xffffffac
   18bc0:	mov	r1, r6
   18bc4:	ldr	r6, [sp, #76]	; 0x4c
   18bc8:	ldr	sl, [sp, #56]	; 0x38
   18bcc:	ldr	r0, [sp, #44]	; 0x2c
   18bd0:	cmp	r1, #1
   18bd4:	orr	r2, r4, r0
   18bd8:	mov	r0, r1
   18bdc:	bhi	18bfc <__assert_fail@plt+0x752c>
   18be0:	tst	r2, #1
   18be4:	beq	18bfc <__assert_fail@plt+0x752c>
   18be8:	ldr	lr, [sp, #84]	; 0x54
   18bec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18bf0:	cmp	r0, #0
   18bf4:	bne	183f8 <__assert_fail@plt+0x6d28>
   18bf8:	b	186d0 <__assert_fail@plt+0x7000>
   18bfc:	str	r2, [sp, #64]	; 0x40
   18c00:	add	r0, r0, r7
   18c04:	add	r1, r7, #1
   18c08:	ldr	lr, [sp, #84]	; 0x54
   18c0c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18c10:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18c14:	mov	r3, #0
   18c18:	str	r0, [sp, #56]	; 0x38
   18c1c:	ldr	r0, [sp, #64]	; 0x40
   18c20:	tst	r0, #1
   18c24:	bne	18d0c <__assert_fail@plt+0x763c>
   18c28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18c2c:	tst	r0, #1
   18c30:	bne	18eac <__assert_fail@plt+0x77dc>
   18c34:	ldr	r3, [fp, #-80]	; 0xffffffb0
   18c38:	cmp	r7, #2
   18c3c:	movwne	r3, #1
   18c40:	orr	r3, r3, r2
   18c44:	tst	r3, #1
   18c48:	bne	18c80 <__assert_fail@plt+0x75b0>
   18c4c:	cmp	r9, sl
   18c50:	add	r3, r9, #1
   18c54:	movcc	r2, #39	; 0x27
   18c58:	strbcc	r2, [r6, r9]
   18c5c:	cmp	r3, sl
   18c60:	movcc	r2, #36	; 0x24
   18c64:	strbcc	r2, [r6, r3]
   18c68:	add	r3, r9, #2
   18c6c:	add	r9, r9, #3
   18c70:	cmp	r3, sl
   18c74:	movcc	r2, #39	; 0x27
   18c78:	strbcc	r2, [r6, r3]
   18c7c:	mov	r2, #1
   18c80:	cmp	r9, sl
   18c84:	mov	r0, r2
   18c88:	movcc	r3, #92	; 0x5c
   18c8c:	strbcc	r3, [r6, r9]
   18c90:	add	r3, r9, #1
   18c94:	cmp	r3, sl
   18c98:	andcc	r7, r5, #192	; 0xc0
   18c9c:	movcc	r2, #48	; 0x30
   18ca0:	orrcc	r7, r2, r7, lsr #6
   18ca4:	strbcc	r7, [r6, r3]
   18ca8:	add	r3, r9, #2
   18cac:	add	r9, r9, #3
   18cb0:	cmp	r3, sl
   18cb4:	lsrcc	r7, r5, #3
   18cb8:	movcc	r2, #6
   18cbc:	bficc	r7, r2, #3, #29
   18cc0:	mov	r2, #6
   18cc4:	strbcc	r7, [r6, r3]
   18cc8:	bfi	r5, r2, #3, #29
   18ccc:	mov	r3, #1
   18cd0:	mov	r2, r0
   18cd4:	ldr	r0, [sp, #56]	; 0x38
   18cd8:	and	r8, r3, #1
   18cdc:	cmp	r0, r1
   18ce0:	bhi	18d40 <__assert_fail@plt+0x7670>
   18ce4:	b	18d80 <__assert_fail@plt+0x76b0>
   18ce8:	cmp	r9, sl
   18cec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18cf0:	strbcc	r5, [r6, r9]
   18cf4:	add	r9, r9, #1
   18cf8:	ldrb	r5, [ip, r1]
   18cfc:	add	r1, r1, #1
   18d00:	ldr	r0, [sp, #64]	; 0x40
   18d04:	tst	r0, #1
   18d08:	beq	18c28 <__assert_fail@plt+0x7558>
   18d0c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   18d10:	tst	r7, #1
   18d14:	beq	18d28 <__assert_fail@plt+0x7658>
   18d18:	cmp	r9, sl
   18d1c:	movcc	r7, #92	; 0x5c
   18d20:	strbcc	r7, [r6, r9]
   18d24:	add	r9, r9, #1
   18d28:	mov	r7, #0
   18d2c:	str	r7, [fp, #-56]	; 0xffffffc8
   18d30:	ldr	r0, [sp, #56]	; 0x38
   18d34:	and	r8, r3, #1
   18d38:	cmp	r0, r1
   18d3c:	bls	18d80 <__assert_fail@plt+0x76b0>
   18d40:	cmp	r8, #0
   18d44:	mvn	r7, r2
   18d48:	movwne	r8, #1
   18d4c:	orr	r7, r7, r8
   18d50:	tst	r7, #1
   18d54:	bne	18ce8 <__assert_fail@plt+0x7618>
   18d58:	cmp	r9, sl
   18d5c:	movcc	r7, #39	; 0x27
   18d60:	strbcc	r7, [r6, r9]
   18d64:	add	r7, r9, #1
   18d68:	add	r9, r9, #2
   18d6c:	cmp	r7, sl
   18d70:	movcc	r2, #39	; 0x27
   18d74:	strbcc	r2, [r6, r7]
   18d78:	mov	r2, #0
   18d7c:	b	18ce8 <__assert_fail@plt+0x7618>
   18d80:	cmp	r8, #0
   18d84:	sub	r7, r1, #1
   18d88:	mov	r0, r5
   18d8c:	str	r2, [fp, #-48]	; 0xffffffd0
   18d90:	movwne	r8, #1
   18d94:	cmp	r8, #0
   18d98:	beq	18688 <__assert_fail@plt+0x6fb8>
   18d9c:	b	18478 <__assert_fail@plt+0x6da8>
   18da0:	mov	lr, r7
   18da4:	b	18dac <__assert_fail@plt+0x76dc>
   18da8:	mvn	lr, #0
   18dac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18db0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18db4:	eor	r0, r7, #2
   18db8:	orr	r0, r0, r9
   18dbc:	clz	r0, r0
   18dc0:	lsr	r0, r0, #5
   18dc4:	tst	r1, r0
   18dc8:	bne	18ec8 <__assert_fail@plt+0x77f8>
   18dcc:	mov	r0, r1
   18dd0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18dd4:	cmp	r7, #2
   18dd8:	movwne	r1, #1
   18ddc:	orr	r0, r0, r1
   18de0:	tst	r0, #1
   18de4:	ldreq	r0, [sp, #52]	; 0x34
   18de8:	streq	lr, [sp, #84]	; 0x54
   18dec:	eoreq	r0, r0, #1
   18df0:	tsteq	r0, #1
   18df4:	bne	18f8c <__assert_fail@plt+0x78bc>
   18df8:	tst	r4, #1
   18dfc:	bne	18f48 <__assert_fail@plt+0x7878>
   18e00:	ldr	r6, [sp, #48]	; 0x30
   18e04:	mov	r8, #0
   18e08:	cmp	r6, #0
   18e0c:	beq	18f84 <__assert_fail@plt+0x78b4>
   18e10:	ldr	r0, [sp, #80]	; 0x50
   18e14:	mov	r1, #0
   18e18:	cmp	sl, #0
   18e1c:	mov	r4, #0
   18e20:	str	r1, [fp, #-72]	; 0xffffffb8
   18e24:	beq	17d18 <__assert_fail@plt+0x6648>
   18e28:	b	18f8c <__assert_fail@plt+0x78bc>
   18e2c:	ldrb	r1, [r0, #3]
   18e30:	cmp	r1, #56	; 0x38
   18e34:	ldrbeq	r1, [r0, #4]
   18e38:	cmpeq	r1, #48	; 0x30
   18e3c:	bne	17f10 <__assert_fail@plt+0x6840>
   18e40:	ldrb	r1, [r0, #5]
   18e44:	cmp	r1, #51	; 0x33
   18e48:	ldrbeq	r1, [r0, #6]
   18e4c:	cmpeq	r1, #48	; 0x30
   18e50:	bne	17f10 <__assert_fail@plt+0x6840>
   18e54:	ldrb	r0, [r0, #7]
   18e58:	cmp	r0, #0
   18e5c:	movw	r0, #57386	; 0xe02a
   18e60:	movt	r0, #1
   18e64:	str	r0, [sp, #68]	; 0x44
   18e68:	bne	17f10 <__assert_fail@plt+0x6840>
   18e6c:	b	17f2c <__assert_fail@plt+0x685c>
   18e70:	ldrb	r1, [r0, #4]
   18e74:	cmp	r1, #48	; 0x30
   18e78:	ldrbeq	r1, [r0, #5]
   18e7c:	cmpeq	r1, #51	; 0x33
   18e80:	bne	17ff4 <__assert_fail@plt+0x6924>
   18e84:	ldrb	r1, [r0, #6]
   18e88:	cmp	r1, #48	; 0x30
   18e8c:	ldrbeq	r0, [r0, #7]
   18e90:	cmpeq	r0, #0
   18e94:	bne	17ff4 <__assert_fail@plt+0x6924>
   18e98:	movw	r0, #57390	; 0xe02e
   18e9c:	movt	r0, #1
   18ea0:	str	r0, [sp, #72]	; 0x48
   18ea4:	b	18014 <__assert_fail@plt+0x6944>
   18ea8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18eac:	ldr	r2, [sp, #80]	; 0x50
   18eb0:	b	18ee8 <__assert_fail@plt+0x7818>
   18eb4:	ldr	ip, [fp, #-84]	; 0xffffffac
   18eb8:	mov	r2, #1
   18ebc:	mov	lr, r4
   18ec0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18ec4:	b	18ee8 <__assert_fail@plt+0x7818>
   18ec8:	ldr	r2, [sp, #80]	; 0x50
   18ecc:	mov	r7, #2
   18ed0:	b	18ee8 <__assert_fail@plt+0x7818>
   18ed4:	ldr	r6, [sp, #76]	; 0x4c
   18ed8:	ldr	ip, [fp, #-84]	; 0xffffffac
   18edc:	ldr	lr, [sp, #84]	; 0x54
   18ee0:	ldr	r2, [sp, #80]	; 0x50
   18ee4:	mov	r7, #2
   18ee8:	mov	r0, #0
   18eec:	ldr	r1, [fp, #12]
   18ef0:	tst	r2, #1
   18ef4:	mov	r2, r7
   18ef8:	mov	r3, lr
   18efc:	str	r0, [sp, #8]
   18f00:	ldr	r0, [sp, #68]	; 0x44
   18f04:	movwne	r2, #4
   18f08:	cmp	r7, #2
   18f0c:	movne	r2, r7
   18f10:	str	r2, [sp]
   18f14:	mov	r2, ip
   18f18:	bic	r1, r1, #2
   18f1c:	str	r0, [sp, #12]
   18f20:	ldr	r0, [sp, #72]	; 0x48
   18f24:	str	r1, [sp, #4]
   18f28:	mov	r1, sl
   18f2c:	str	r0, [sp, #16]
   18f30:	mov	r0, r6
   18f34:	bl	17c9c <__assert_fail@plt+0x65cc>
   18f38:	mov	r9, r0
   18f3c:	mov	r0, r9
   18f40:	sub	sp, fp, #28
   18f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f48:	mov	r0, #5
   18f4c:	ldr	r1, [sp, #48]	; 0x30
   18f50:	ldr	r2, [fp, #-84]	; 0xffffffac
   18f54:	ldr	r3, [sp, #84]	; 0x54
   18f58:	str	r0, [sp]
   18f5c:	ldr	r0, [fp, #12]
   18f60:	str	r0, [sp, #4]
   18f64:	ldr	r0, [fp, #16]
   18f68:	str	r0, [sp, #8]
   18f6c:	ldr	r0, [sp, #68]	; 0x44
   18f70:	str	r0, [sp, #12]
   18f74:	ldr	r0, [sp, #72]	; 0x48
   18f78:	str	r0, [sp, #16]
   18f7c:	ldr	r0, [sp, #76]	; 0x4c
   18f80:	b	18f34 <__assert_fail@plt+0x7864>
   18f84:	mov	r0, #0
   18f88:	str	r0, [fp, #-72]	; 0xffffffb8
   18f8c:	ldr	r1, [sp, #92]	; 0x5c
   18f90:	cmp	r1, #0
   18f94:	beq	18fd4 <__assert_fail@plt+0x7904>
   18f98:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18f9c:	ldr	r2, [sp, #76]	; 0x4c
   18fa0:	tst	r0, #1
   18fa4:	bne	18fd8 <__assert_fail@plt+0x7908>
   18fa8:	ldrb	r0, [r1]
   18fac:	cmp	r0, #0
   18fb0:	beq	18fd8 <__assert_fail@plt+0x7908>
   18fb4:	add	r1, r1, #1
   18fb8:	cmp	r9, sl
   18fbc:	strbcc	r0, [r2, r9]
   18fc0:	add	r9, r9, #1
   18fc4:	ldrb	r0, [r1], #1
   18fc8:	cmp	r0, #0
   18fcc:	bne	18fb8 <__assert_fail@plt+0x78e8>
   18fd0:	b	18fd8 <__assert_fail@plt+0x7908>
   18fd4:	ldr	r2, [sp, #76]	; 0x4c
   18fd8:	cmp	r9, sl
   18fdc:	movcc	r0, #0
   18fe0:	strbcc	r0, [r2, r9]
   18fe4:	mov	r0, r9
   18fe8:	sub	sp, fp, #28
   18fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ff0:	mov	r2, #1
   18ff4:	b	18ec0 <__assert_fail@plt+0x77f0>
   18ff8:	ldr	r2, [sp, #80]	; 0x50
   18ffc:	mov	r7, #5
   19000:	b	18ee8 <__assert_fail@plt+0x7818>
   19004:	bl	116a0 <abort@plt>
   19008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1900c:	add	fp, sp, #28
   19010:	sub	sp, sp, #28
   19014:	movw	r5, #62536	; 0xf448
   19018:	cmp	r2, #0
   1901c:	mov	r4, r1
   19020:	mov	r7, r0
   19024:	str	r0, [sp, #20]
   19028:	movt	r5, #2
   1902c:	movne	r5, r2
   19030:	bl	11598 <__errno_location@plt>
   19034:	mov	sl, r0
   19038:	ldm	r5, {r0, r1}
   1903c:	ldr	r2, [r5, #40]	; 0x28
   19040:	ldr	r3, [r5, #44]	; 0x2c
   19044:	add	r9, r5, #8
   19048:	ldr	r6, [sl]
   1904c:	orr	r8, r1, #1
   19050:	mov	r1, #0
   19054:	str	r6, [sp, #24]
   19058:	stm	sp, {r0, r8, r9}
   1905c:	str	r2, [sp, #12]
   19060:	str	r3, [sp, #16]
   19064:	mov	r0, #0
   19068:	mov	r2, r7
   1906c:	mov	r3, r4
   19070:	mov	r6, r4
   19074:	bl	17c9c <__assert_fail@plt+0x65cc>
   19078:	add	r7, r0, #1
   1907c:	mov	r0, r7
   19080:	bl	1a224 <__assert_fail@plt+0x8b54>
   19084:	mov	r4, r0
   19088:	ldr	r0, [r5]
   1908c:	ldr	r2, [r5, #44]	; 0x2c
   19090:	ldr	r1, [r5, #40]	; 0x28
   19094:	mov	r3, r6
   19098:	stm	sp, {r0, r8, r9}
   1909c:	str	r2, [sp, #16]
   190a0:	str	r1, [sp, #12]
   190a4:	mov	r0, r4
   190a8:	mov	r1, r7
   190ac:	ldr	r2, [sp, #20]
   190b0:	bl	17c9c <__assert_fail@plt+0x65cc>
   190b4:	ldr	r0, [sp, #24]
   190b8:	str	r0, [sl]
   190bc:	mov	r0, r4
   190c0:	sub	sp, fp, #28
   190c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190cc:	add	fp, sp, #28
   190d0:	sub	sp, sp, #36	; 0x24
   190d4:	movw	r8, #62536	; 0xf448
   190d8:	cmp	r3, #0
   190dc:	mov	r4, r2
   190e0:	str	r2, [sp, #24]
   190e4:	mov	r5, r1
   190e8:	mov	r6, r0
   190ec:	str	r0, [sp, #20]
   190f0:	movt	r8, #2
   190f4:	movne	r8, r3
   190f8:	bl	11598 <__errno_location@plt>
   190fc:	str	r0, [sp, #28]
   19100:	cmp	r4, #0
   19104:	add	sl, r8, #8
   19108:	ldm	r8, {r3, r9}
   1910c:	ldr	r7, [r0]
   19110:	ldr	r1, [r8, #40]	; 0x28
   19114:	ldr	r2, [r8, #44]	; 0x2c
   19118:	mov	r0, #0
   1911c:	orreq	r9, r9, #1
   19120:	str	r7, [sp, #32]
   19124:	mov	r7, r5
   19128:	stm	sp, {r3, r9, sl}
   1912c:	str	r1, [sp, #12]
   19130:	str	r2, [sp, #16]
   19134:	mov	r1, #0
   19138:	mov	r2, r6
   1913c:	mov	r3, r5
   19140:	bl	17c9c <__assert_fail@plt+0x65cc>
   19144:	add	r4, r0, #1
   19148:	mov	r5, r0
   1914c:	mov	r0, r4
   19150:	bl	1a224 <__assert_fail@plt+0x8b54>
   19154:	mov	r6, r0
   19158:	ldr	r0, [r8]
   1915c:	ldr	r2, [r8, #44]	; 0x2c
   19160:	ldr	r1, [r8, #40]	; 0x28
   19164:	mov	r3, r7
   19168:	stm	sp, {r0, r9, sl}
   1916c:	str	r2, [sp, #16]
   19170:	str	r1, [sp, #12]
   19174:	mov	r0, r6
   19178:	mov	r1, r4
   1917c:	ldr	r2, [sp, #20]
   19180:	bl	17c9c <__assert_fail@plt+0x65cc>
   19184:	ldr	r0, [sp, #24]
   19188:	ldr	r1, [sp, #32]
   1918c:	ldr	r2, [sp, #28]
   19190:	cmp	r0, #0
   19194:	str	r1, [r2]
   19198:	strne	r5, [r0]
   1919c:	mov	r0, r6
   191a0:	sub	sp, fp, #28
   191a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191a8:	push	{r4, r5, r6, r7, fp, lr}
   191ac:	add	fp, sp, #16
   191b0:	movw	r4, #61856	; 0xf1a0
   191b4:	movt	r4, #2
   191b8:	ldrd	r6, [r4]
   191bc:	cmp	r7, #2
   191c0:	blt	191ec <__assert_fail@plt+0x7b1c>
   191c4:	add	r5, r6, #12
   191c8:	mov	r7, #0
   191cc:	ldr	r0, [r5, r7, lsl #3]
   191d0:	bl	1bbc4 <__assert_fail@plt+0xa4f4>
   191d4:	ldr	r1, [r4, #4]
   191d8:	add	r2, r7, #2
   191dc:	add	r0, r7, #1
   191e0:	mov	r7, r0
   191e4:	cmp	r2, r1
   191e8:	blt	191cc <__assert_fail@plt+0x7afc>
   191ec:	ldr	r0, [r6, #4]
   191f0:	movw	r5, #62584	; 0xf478
   191f4:	movt	r5, #2
   191f8:	cmp	r0, r5
   191fc:	beq	19210 <__assert_fail@plt+0x7b40>
   19200:	bl	1bbc4 <__assert_fail@plt+0xa4f4>
   19204:	mov	r0, #256	; 0x100
   19208:	str	r0, [r4, #8]
   1920c:	str	r5, [r4, #12]
   19210:	add	r5, r4, #8
   19214:	cmp	r6, r5
   19218:	beq	19228 <__assert_fail@plt+0x7b58>
   1921c:	mov	r0, r6
   19220:	bl	1bbc4 <__assert_fail@plt+0xa4f4>
   19224:	str	r5, [r4]
   19228:	mov	r0, #1
   1922c:	str	r0, [r4, #4]
   19230:	pop	{r4, r5, r6, r7, fp, pc}
   19234:	movw	r3, #62536	; 0xf448
   19238:	mvn	r2, #0
   1923c:	movt	r3, #2
   19240:	b	19244 <__assert_fail@plt+0x7b74>
   19244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19248:	add	fp, sp, #28
   1924c:	sub	sp, sp, #44	; 0x2c
   19250:	mov	r7, r3
   19254:	str	r2, [sp, #36]	; 0x24
   19258:	str	r1, [sp, #32]
   1925c:	mov	r5, r0
   19260:	bl	11598 <__errno_location@plt>
   19264:	cmp	r5, #0
   19268:	blt	193cc <__assert_fail@plt+0x7cfc>
   1926c:	cmn	r5, #-2147483647	; 0x80000001
   19270:	beq	193cc <__assert_fail@plt+0x7cfc>
   19274:	movw	r8, #61856	; 0xf1a0
   19278:	mov	r4, r0
   1927c:	movt	r8, #2
   19280:	ldr	r6, [r8]
   19284:	ldr	r1, [r8, #4]
   19288:	ldr	r0, [r0]
   1928c:	str	r4, [sp, #28]
   19290:	cmp	r1, r5
   19294:	str	r0, [sp, #24]
   19298:	ble	192a4 <__assert_fail@plt+0x7bd4>
   1929c:	mov	sl, r6
   192a0:	b	19308 <__assert_fail@plt+0x7c38>
   192a4:	mov	r0, #8
   192a8:	add	r9, r8, #8
   192ac:	add	r2, r5, #1
   192b0:	str	r1, [fp, #-32]	; 0xffffffe0
   192b4:	mvn	r3, #-2147483648	; 0x80000000
   192b8:	str	r0, [sp]
   192bc:	subs	r0, r6, r9
   192c0:	sub	r2, r2, r1
   192c4:	sub	r1, fp, #32
   192c8:	movne	r0, r6
   192cc:	bl	1a424 <__assert_fail@plt+0x8d54>
   192d0:	str	r0, [r8]
   192d4:	cmp	r6, r9
   192d8:	mov	sl, r0
   192dc:	ldrdeq	r0, [r8, #8]
   192e0:	stmeq	sl, {r0, r1}
   192e4:	ldr	r1, [r8, #4]
   192e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   192ec:	add	r0, sl, r1, lsl #3
   192f0:	sub	r1, r2, r1
   192f4:	lsl	r2, r1, #3
   192f8:	mov	r1, #0
   192fc:	bl	115c8 <memset@plt>
   19300:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19304:	str	r0, [r8, #4]
   19308:	mov	r9, sl
   1930c:	ldr	r6, [r9, r5, lsl #3]!
   19310:	ldr	r4, [r9, #4]!
   19314:	ldm	r7, {r0, r1}
   19318:	ldr	r2, [r7, #40]	; 0x28
   1931c:	ldr	r3, [r7, #44]	; 0x2c
   19320:	orr	r8, r1, #1
   19324:	add	r1, r7, #8
   19328:	stm	sp, {r0, r8}
   1932c:	add	r0, sp, #8
   19330:	str	r1, [sp, #20]
   19334:	stm	r0, {r1, r2, r3}
   19338:	mov	r0, r4
   1933c:	mov	r1, r6
   19340:	ldr	r2, [sp, #32]
   19344:	ldr	r3, [sp, #36]	; 0x24
   19348:	bl	17c9c <__assert_fail@plt+0x65cc>
   1934c:	cmp	r6, r0
   19350:	bhi	193b4 <__assert_fail@plt+0x7ce4>
   19354:	add	r6, r0, #1
   19358:	movw	r0, #62584	; 0xf478
   1935c:	movt	r0, #2
   19360:	str	r6, [sl, r5, lsl #3]
   19364:	cmp	r4, r0
   19368:	beq	19374 <__assert_fail@plt+0x7ca4>
   1936c:	mov	r0, r4
   19370:	bl	1bbc4 <__assert_fail@plt+0xa4f4>
   19374:	mov	r0, r6
   19378:	bl	1a224 <__assert_fail@plt+0x8b54>
   1937c:	str	r0, [r9]
   19380:	mov	r4, r0
   19384:	add	r3, sp, #8
   19388:	ldr	r0, [r7]
   1938c:	ldr	r1, [r7, #40]	; 0x28
   19390:	ldr	r2, [r7, #44]	; 0x2c
   19394:	stm	sp, {r0, r8}
   19398:	ldr	r0, [sp, #20]
   1939c:	stm	r3, {r0, r1, r2}
   193a0:	mov	r0, r4
   193a4:	mov	r1, r6
   193a8:	ldr	r2, [sp, #32]
   193ac:	ldr	r3, [sp, #36]	; 0x24
   193b0:	bl	17c9c <__assert_fail@plt+0x65cc>
   193b4:	ldr	r1, [sp, #24]
   193b8:	ldr	r0, [sp, #28]
   193bc:	str	r1, [r0]
   193c0:	mov	r0, r4
   193c4:	sub	sp, fp, #28
   193c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193cc:	bl	116a0 <abort@plt>
   193d0:	movw	r3, #62536	; 0xf448
   193d4:	movt	r3, #2
   193d8:	b	19244 <__assert_fail@plt+0x7b74>
   193dc:	movw	r3, #62536	; 0xf448
   193e0:	mov	r1, r0
   193e4:	mov	r0, #0
   193e8:	mvn	r2, #0
   193ec:	movt	r3, #2
   193f0:	b	19244 <__assert_fail@plt+0x7b74>
   193f4:	movw	r3, #62536	; 0xf448
   193f8:	mov	r2, r1
   193fc:	mov	r1, r0
   19400:	mov	r0, #0
   19404:	movt	r3, #2
   19408:	b	19244 <__assert_fail@plt+0x7b74>
   1940c:	push	{fp, lr}
   19410:	mov	fp, sp
   19414:	sub	sp, sp, #48	; 0x30
   19418:	vmov.i32	q8, #0	; 0x00000000
   1941c:	mov	ip, #32
   19420:	mov	r3, sp
   19424:	mov	lr, r2
   19428:	cmp	r1, #10
   1942c:	add	r2, r3, #16
   19430:	vst1.64	{d16-d17}, [r3], ip
   19434:	vst1.64	{d16-d17}, [r3]
   19438:	vst1.64	{d16-d17}, [r2]
   1943c:	beq	1945c <__assert_fail@plt+0x7d8c>
   19440:	str	r1, [sp]
   19444:	mov	r3, sp
   19448:	mov	r1, lr
   1944c:	mvn	r2, #0
   19450:	bl	19244 <__assert_fail@plt+0x7b74>
   19454:	mov	sp, fp
   19458:	pop	{fp, pc}
   1945c:	bl	116a0 <abort@plt>
   19460:	push	{r4, sl, fp, lr}
   19464:	add	fp, sp, #8
   19468:	sub	sp, sp, #48	; 0x30
   1946c:	mov	ip, r3
   19470:	mov	r3, sp
   19474:	vmov.i32	q8, #0	; 0x00000000
   19478:	mov	lr, #32
   1947c:	cmp	r1, #10
   19480:	add	r4, r3, #16
   19484:	vst1.64	{d16-d17}, [r3], lr
   19488:	vst1.64	{d16-d17}, [r3]
   1948c:	vst1.64	{d16-d17}, [r4]
   19490:	beq	194b0 <__assert_fail@plt+0x7de0>
   19494:	str	r1, [sp]
   19498:	mov	r1, r2
   1949c:	mov	r3, sp
   194a0:	mov	r2, ip
   194a4:	bl	19244 <__assert_fail@plt+0x7b74>
   194a8:	sub	sp, fp, #8
   194ac:	pop	{r4, sl, fp, pc}
   194b0:	bl	116a0 <abort@plt>
   194b4:	push	{fp, lr}
   194b8:	mov	fp, sp
   194bc:	sub	sp, sp, #48	; 0x30
   194c0:	mov	r3, sp
   194c4:	vmov.i32	q8, #0	; 0x00000000
   194c8:	mov	ip, #32
   194cc:	cmp	r0, #10
   194d0:	add	r2, r3, #16
   194d4:	vst1.64	{d16-d17}, [r3], ip
   194d8:	vst1.64	{d16-d17}, [r3]
   194dc:	vst1.64	{d16-d17}, [r2]
   194e0:	beq	19500 <__assert_fail@plt+0x7e30>
   194e4:	str	r0, [sp]
   194e8:	mov	r3, sp
   194ec:	mov	r0, #0
   194f0:	mvn	r2, #0
   194f4:	bl	19244 <__assert_fail@plt+0x7b74>
   194f8:	mov	sp, fp
   194fc:	pop	{fp, pc}
   19500:	bl	116a0 <abort@plt>
   19504:	push	{fp, lr}
   19508:	mov	fp, sp
   1950c:	sub	sp, sp, #48	; 0x30
   19510:	mov	r3, sp
   19514:	vmov.i32	q8, #0	; 0x00000000
   19518:	mov	ip, #32
   1951c:	cmp	r0, #10
   19520:	add	lr, r3, #16
   19524:	vst1.64	{d16-d17}, [r3], ip
   19528:	vst1.64	{d16-d17}, [r3]
   1952c:	vst1.64	{d16-d17}, [lr]
   19530:	beq	1954c <__assert_fail@plt+0x7e7c>
   19534:	str	r0, [sp]
   19538:	mov	r3, sp
   1953c:	mov	r0, #0
   19540:	bl	19244 <__assert_fail@plt+0x7b74>
   19544:	mov	sp, fp
   19548:	pop	{fp, pc}
   1954c:	bl	116a0 <abort@plt>
   19550:	push	{r4, sl, fp, lr}
   19554:	add	fp, sp, #8
   19558:	sub	sp, sp, #48	; 0x30
   1955c:	mov	lr, r0
   19560:	movw	r0, #62536	; 0xf448
   19564:	mov	r3, #32
   19568:	mov	ip, r1
   1956c:	mov	r4, #1
   19570:	movt	r0, #2
   19574:	add	r1, r0, #16
   19578:	vld1.64	{d16-d17}, [r0], r3
   1957c:	mov	r3, sp
   19580:	vld1.64	{d18-d19}, [r1]
   19584:	add	r1, r3, #16
   19588:	vld1.64	{d20-d21}, [r0]
   1958c:	add	r0, r3, #32
   19590:	vst1.64	{d18-d19}, [r1]
   19594:	mov	r1, r3
   19598:	vst1.64	{d20-d21}, [r0]
   1959c:	mov	r0, #28
   195a0:	and	r0, r0, r2, lsr #3
   195a4:	and	r2, r2, #31
   195a8:	vst1.64	{d16-d17}, [r1], r0
   195ac:	ldr	r0, [r1, #8]
   195b0:	bic	r4, r4, r0, lsr r2
   195b4:	eor	r0, r0, r4, lsl r2
   195b8:	mov	r2, ip
   195bc:	str	r0, [r1, #8]
   195c0:	mov	r0, #0
   195c4:	mov	r1, lr
   195c8:	bl	19244 <__assert_fail@plt+0x7b74>
   195cc:	sub	sp, fp, #8
   195d0:	pop	{r4, sl, fp, pc}
   195d4:	push	{fp, lr}
   195d8:	mov	fp, sp
   195dc:	sub	sp, sp, #48	; 0x30
   195e0:	mov	ip, r0
   195e4:	movw	r0, #62536	; 0xf448
   195e8:	mov	r3, #32
   195ec:	movt	r0, #2
   195f0:	add	r2, r0, #16
   195f4:	vld1.64	{d16-d17}, [r0], r3
   195f8:	mov	r3, sp
   195fc:	vld1.64	{d18-d19}, [r2]
   19600:	add	r2, r3, #16
   19604:	vld1.64	{d20-d21}, [r0]
   19608:	add	r0, r3, #32
   1960c:	vst1.64	{d18-d19}, [r2]
   19610:	mov	r2, r3
   19614:	vst1.64	{d20-d21}, [r0]
   19618:	mov	r0, #28
   1961c:	and	r0, r0, r1, lsr #3
   19620:	and	r1, r1, #31
   19624:	vst1.64	{d16-d17}, [r2], r0
   19628:	mov	r0, #1
   1962c:	ldr	lr, [r2, #8]
   19630:	bic	r0, r0, lr, lsr r1
   19634:	eor	r0, lr, r0, lsl r1
   19638:	mov	r1, ip
   1963c:	str	r0, [r2, #8]
   19640:	mov	r0, #0
   19644:	mvn	r2, #0
   19648:	bl	19244 <__assert_fail@plt+0x7b74>
   1964c:	mov	sp, fp
   19650:	pop	{fp, pc}
   19654:	push	{fp, lr}
   19658:	mov	fp, sp
   1965c:	sub	sp, sp, #48	; 0x30
   19660:	movw	r2, #62536	; 0xf448
   19664:	mov	r3, #32
   19668:	mov	r1, r0
   1966c:	movt	r2, #2
   19670:	add	r0, r2, #16
   19674:	vld1.64	{d16-d17}, [r2], r3
   19678:	mov	r3, sp
   1967c:	vld1.64	{d18-d19}, [r0]
   19680:	add	r0, r3, #16
   19684:	vld1.64	{d20-d21}, [r2]
   19688:	mov	r2, r3
   1968c:	vst1.64	{d18-d19}, [r0]
   19690:	add	r0, r3, #32
   19694:	vst1.64	{d20-d21}, [r0]
   19698:	mov	r0, #12
   1969c:	vst1.64	{d16-d17}, [r2], r0
   196a0:	ldr	r0, [r2]
   196a4:	orr	r0, r0, #67108864	; 0x4000000
   196a8:	str	r0, [r2]
   196ac:	mov	r0, #0
   196b0:	mvn	r2, #0
   196b4:	bl	19244 <__assert_fail@plt+0x7b74>
   196b8:	mov	sp, fp
   196bc:	pop	{fp, pc}
   196c0:	push	{fp, lr}
   196c4:	mov	fp, sp
   196c8:	sub	sp, sp, #48	; 0x30
   196cc:	mov	ip, r1
   196d0:	mov	r1, r0
   196d4:	movw	r0, #62536	; 0xf448
   196d8:	mov	r3, #32
   196dc:	movt	r0, #2
   196e0:	add	r2, r0, #16
   196e4:	vld1.64	{d16-d17}, [r0], r3
   196e8:	mov	r3, sp
   196ec:	vld1.64	{d18-d19}, [r2]
   196f0:	add	r2, r3, #16
   196f4:	vld1.64	{d20-d21}, [r0]
   196f8:	add	r0, r3, #32
   196fc:	vst1.64	{d18-d19}, [r2]
   19700:	mov	r2, r3
   19704:	vst1.64	{d20-d21}, [r0]
   19708:	mov	r0, #12
   1970c:	vst1.64	{d16-d17}, [r2], r0
   19710:	ldr	r0, [r2]
   19714:	orr	r0, r0, #67108864	; 0x4000000
   19718:	str	r0, [r2]
   1971c:	mov	r0, #0
   19720:	mov	r2, ip
   19724:	bl	19244 <__assert_fail@plt+0x7b74>
   19728:	mov	sp, fp
   1972c:	pop	{fp, pc}
   19730:	push	{r4, sl, fp, lr}
   19734:	add	fp, sp, #8
   19738:	sub	sp, sp, #96	; 0x60
   1973c:	mov	ip, r2
   19740:	mov	r2, sp
   19744:	vmov.i32	q8, #0	; 0x00000000
   19748:	mov	r4, #28
   1974c:	cmp	r1, #10
   19750:	mov	r3, r2
   19754:	add	lr, r2, #16
   19758:	vst1.64	{d16-d17}, [r3], r4
   1975c:	vst1.64	{d16-d17}, [lr]
   19760:	vst1.32	{d16-d17}, [r3]
   19764:	beq	197b4 <__assert_fail@plt+0x80e4>
   19768:	vld1.64	{d16-d17}, [r2], r4
   1976c:	vld1.64	{d18-d19}, [lr]
   19770:	add	r3, sp, #48	; 0x30
   19774:	add	r4, r3, #4
   19778:	vld1.32	{d20-d21}, [r2]
   1977c:	add	r2, r3, #20
   19780:	vst1.32	{d16-d17}, [r4]
   19784:	vst1.32	{d18-d19}, [r2]
   19788:	add	r2, r3, #32
   1978c:	vst1.32	{d20-d21}, [r2]
   19790:	str	r1, [sp, #48]	; 0x30
   19794:	mvn	r2, #0
   19798:	ldr	r1, [sp, #60]	; 0x3c
   1979c:	orr	r1, r1, #67108864	; 0x4000000
   197a0:	str	r1, [sp, #60]	; 0x3c
   197a4:	mov	r1, ip
   197a8:	bl	19244 <__assert_fail@plt+0x7b74>
   197ac:	sub	sp, fp, #8
   197b0:	pop	{r4, sl, fp, pc}
   197b4:	bl	116a0 <abort@plt>
   197b8:	push	{r4, r5, fp, lr}
   197bc:	add	fp, sp, #8
   197c0:	sub	sp, sp, #48	; 0x30
   197c4:	mov	ip, r3
   197c8:	movw	r3, #62536	; 0xf448
   197cc:	mov	lr, #32
   197d0:	cmp	r1, #0
   197d4:	mov	r5, sp
   197d8:	movt	r3, #2
   197dc:	cmpne	r2, #0
   197e0:	add	r4, r3, #16
   197e4:	vld1.64	{d16-d17}, [r3], lr
   197e8:	vld1.64	{d18-d19}, [r4]
   197ec:	add	r4, r5, #16
   197f0:	vld1.64	{d20-d21}, [r3]
   197f4:	vst1.64	{d16-d17}, [r5], lr
   197f8:	mov	r3, #10
   197fc:	vst1.64	{d18-d19}, [r4]
   19800:	vst1.64	{d20-d21}, [r5]
   19804:	str	r3, [sp]
   19808:	bne	19810 <__assert_fail@plt+0x8140>
   1980c:	bl	116a0 <abort@plt>
   19810:	str	r2, [sp, #44]	; 0x2c
   19814:	str	r1, [sp, #40]	; 0x28
   19818:	mov	r3, sp
   1981c:	mov	r1, ip
   19820:	mvn	r2, #0
   19824:	bl	19244 <__assert_fail@plt+0x7b74>
   19828:	sub	sp, fp, #8
   1982c:	pop	{r4, r5, fp, pc}
   19830:	push	{r4, r5, fp, lr}
   19834:	add	fp, sp, #8
   19838:	sub	sp, sp, #48	; 0x30
   1983c:	mov	lr, r3
   19840:	movw	r3, #62536	; 0xf448
   19844:	mov	ip, #32
   19848:	cmp	r1, #0
   1984c:	mov	r5, sp
   19850:	movt	r3, #2
   19854:	cmpne	r2, #0
   19858:	add	r4, r3, #16
   1985c:	vld1.64	{d16-d17}, [r3], ip
   19860:	vld1.64	{d18-d19}, [r4]
   19864:	add	r4, r5, #16
   19868:	vld1.64	{d20-d21}, [r3]
   1986c:	vst1.64	{d16-d17}, [r5], ip
   19870:	mov	r3, #10
   19874:	vst1.64	{d18-d19}, [r4]
   19878:	vst1.64	{d20-d21}, [r5]
   1987c:	str	r3, [sp]
   19880:	bne	19888 <__assert_fail@plt+0x81b8>
   19884:	bl	116a0 <abort@plt>
   19888:	ldr	ip, [fp, #8]
   1988c:	str	r2, [sp, #44]	; 0x2c
   19890:	str	r1, [sp, #40]	; 0x28
   19894:	mov	r3, sp
   19898:	mov	r1, lr
   1989c:	mov	r2, ip
   198a0:	bl	19244 <__assert_fail@plt+0x7b74>
   198a4:	sub	sp, fp, #8
   198a8:	pop	{r4, r5, fp, pc}
   198ac:	push	{r4, sl, fp, lr}
   198b0:	add	fp, sp, #8
   198b4:	sub	sp, sp, #48	; 0x30
   198b8:	mov	ip, r2
   198bc:	movw	r2, #62536	; 0xf448
   198c0:	mov	lr, #32
   198c4:	cmp	r0, #0
   198c8:	mov	r4, sp
   198cc:	movt	r2, #2
   198d0:	cmpne	r1, #0
   198d4:	add	r3, r2, #16
   198d8:	vld1.64	{d16-d17}, [r2], lr
   198dc:	vld1.64	{d18-d19}, [r3]
   198e0:	add	r3, r4, #16
   198e4:	vld1.64	{d20-d21}, [r2]
   198e8:	vst1.64	{d16-d17}, [r4], lr
   198ec:	mov	r2, #10
   198f0:	vst1.64	{d18-d19}, [r3]
   198f4:	vst1.64	{d20-d21}, [r4]
   198f8:	str	r2, [sp]
   198fc:	bne	19904 <__assert_fail@plt+0x8234>
   19900:	bl	116a0 <abort@plt>
   19904:	str	r1, [sp, #44]	; 0x2c
   19908:	str	r0, [sp, #40]	; 0x28
   1990c:	mov	r3, sp
   19910:	mov	r0, #0
   19914:	mov	r1, ip
   19918:	mvn	r2, #0
   1991c:	bl	19244 <__assert_fail@plt+0x7b74>
   19920:	sub	sp, fp, #8
   19924:	pop	{r4, sl, fp, pc}
   19928:	push	{r4, r5, fp, lr}
   1992c:	add	fp, sp, #8
   19930:	sub	sp, sp, #48	; 0x30
   19934:	mov	lr, r2
   19938:	movw	r2, #62536	; 0xf448
   1993c:	mov	ip, r3
   19940:	mov	r3, #32
   19944:	cmp	r0, #0
   19948:	mov	r5, sp
   1994c:	movt	r2, #2
   19950:	cmpne	r1, #0
   19954:	add	r4, r2, #16
   19958:	vld1.64	{d16-d17}, [r2], r3
   1995c:	vld1.64	{d18-d19}, [r4]
   19960:	add	r4, r5, #16
   19964:	vld1.64	{d20-d21}, [r2]
   19968:	vst1.64	{d16-d17}, [r5], r3
   1996c:	mov	r2, #10
   19970:	vst1.64	{d18-d19}, [r4]
   19974:	vst1.64	{d20-d21}, [r5]
   19978:	str	r2, [sp]
   1997c:	bne	19984 <__assert_fail@plt+0x82b4>
   19980:	bl	116a0 <abort@plt>
   19984:	str	r1, [sp, #44]	; 0x2c
   19988:	str	r0, [sp, #40]	; 0x28
   1998c:	mov	r3, sp
   19990:	mov	r0, #0
   19994:	mov	r1, lr
   19998:	mov	r2, ip
   1999c:	bl	19244 <__assert_fail@plt+0x7b74>
   199a0:	sub	sp, fp, #8
   199a4:	pop	{r4, r5, fp, pc}
   199a8:	movw	r3, #61808	; 0xf170
   199ac:	movt	r3, #2
   199b0:	b	19244 <__assert_fail@plt+0x7b74>
   199b4:	movw	r3, #61808	; 0xf170
   199b8:	mov	r2, r1
   199bc:	mov	r1, r0
   199c0:	mov	r0, #0
   199c4:	movt	r3, #2
   199c8:	b	19244 <__assert_fail@plt+0x7b74>
   199cc:	movw	r3, #61808	; 0xf170
   199d0:	mvn	r2, #0
   199d4:	movt	r3, #2
   199d8:	b	19244 <__assert_fail@plt+0x7b74>
   199dc:	movw	r3, #61808	; 0xf170
   199e0:	mov	r1, r0
   199e4:	mov	r0, #0
   199e8:	mvn	r2, #0
   199ec:	movt	r3, #2
   199f0:	b	19244 <__assert_fail@plt+0x7b74>
   199f4:	push	{r4, r5, r6, sl, fp, lr}
   199f8:	add	fp, sp, #16
   199fc:	mov	r4, r1
   19a00:	mov	r5, r0
   19a04:	mov	r0, r2
   19a08:	mov	r1, r3
   19a0c:	bl	1b44c <__assert_fail@plt+0x9d7c>
   19a10:	cmp	r0, #0
   19a14:	beq	19a40 <__assert_fail@plt+0x8370>
   19a18:	mov	r6, r0
   19a1c:	movw	r2, #55112	; 0xd748
   19a20:	mov	r0, r5
   19a24:	mov	r1, r4
   19a28:	movt	r2, #1
   19a2c:	mov	r3, r6
   19a30:	bl	114cc <error@plt>
   19a34:	mov	r0, r6
   19a38:	pop	{r4, r5, r6, sl, fp, lr}
   19a3c:	b	1bbc4 <__assert_fail@plt+0xa4f4>
   19a40:	bl	11598 <__errno_location@plt>
   19a44:	ldr	r4, [r0]
   19a48:	movw	r1, #57480	; 0xe088
   19a4c:	mov	r0, #0
   19a50:	mov	r2, #5
   19a54:	movt	r1, #1
   19a58:	bl	11430 <dcgettext@plt>
   19a5c:	mov	r2, r0
   19a60:	mov	r0, #0
   19a64:	mov	r1, r4
   19a68:	bl	114cc <error@plt>
   19a6c:	bl	116a0 <abort@plt>
   19a70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19a74:	add	fp, sp, #24
   19a78:	sub	sp, sp, #8
   19a7c:	mov	r5, r1
   19a80:	mov	r6, r0
   19a84:	ldr	r0, [fp, #8]
   19a88:	ldr	r1, [fp, #12]
   19a8c:	mov	r8, r3
   19a90:	mov	r7, r2
   19a94:	bl	1b44c <__assert_fail@plt+0x9d7c>
   19a98:	cmp	r0, #0
   19a9c:	beq	19b04 <__assert_fail@plt+0x8434>
   19aa0:	mov	r4, r0
   19aa4:	cmp	r7, #0
   19aa8:	beq	19adc <__assert_fail@plt+0x840c>
   19aac:	movw	r0, #55112	; 0xd748
   19ab0:	mov	r1, r5
   19ab4:	mov	r2, r7
   19ab8:	mov	r3, r8
   19abc:	movt	r0, #1
   19ac0:	stm	sp, {r0, r4}
   19ac4:	mov	r0, r6
   19ac8:	bl	114fc <error_at_line@plt>
   19acc:	mov	r0, r4
   19ad0:	sub	sp, fp, #24
   19ad4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19ad8:	b	1bbc4 <__assert_fail@plt+0xa4f4>
   19adc:	movw	r2, #55112	; 0xd748
   19ae0:	mov	r0, r6
   19ae4:	mov	r1, r5
   19ae8:	mov	r3, r4
   19aec:	movt	r2, #1
   19af0:	bl	114cc <error@plt>
   19af4:	mov	r0, r4
   19af8:	sub	sp, fp, #24
   19afc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19b00:	b	1bbc4 <__assert_fail@plt+0xa4f4>
   19b04:	bl	11598 <__errno_location@plt>
   19b08:	ldr	r4, [r0]
   19b0c:	movw	r1, #57480	; 0xe088
   19b10:	mov	r0, #0
   19b14:	mov	r2, #5
   19b18:	movt	r1, #1
   19b1c:	bl	11430 <dcgettext@plt>
   19b20:	mov	r2, r0
   19b24:	mov	r0, #0
   19b28:	mov	r1, r4
   19b2c:	bl	114cc <error@plt>
   19b30:	bl	116a0 <abort@plt>
   19b34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19b38:	add	fp, sp, #24
   19b3c:	sub	sp, sp, #32
   19b40:	ldr	r6, [fp, #12]
   19b44:	ldr	r7, [fp, #8]
   19b48:	mov	r4, r2
   19b4c:	mov	r8, r0
   19b50:	cmp	r1, #0
   19b54:	beq	19b7c <__assert_fail@plt+0x84ac>
   19b58:	movw	r2, #57512	; 0xe0a8
   19b5c:	mov	r5, r1
   19b60:	str	r3, [sp, #4]
   19b64:	str	r4, [sp]
   19b68:	mov	r0, r8
   19b6c:	mov	r1, #1
   19b70:	movt	r2, #1
   19b74:	mov	r3, r5
   19b78:	b	19b94 <__assert_fail@plt+0x84c4>
   19b7c:	movw	r2, #57524	; 0xe0b4
   19b80:	str	r3, [sp]
   19b84:	mov	r0, r8
   19b88:	mov	r1, #1
   19b8c:	mov	r3, r4
   19b90:	movt	r2, #1
   19b94:	bl	115f8 <__fprintf_chk@plt>
   19b98:	movw	r1, #57531	; 0xe0bb
   19b9c:	mov	r0, #0
   19ba0:	mov	r2, #5
   19ba4:	movt	r1, #1
   19ba8:	bl	11430 <dcgettext@plt>
   19bac:	movw	r2, #58249	; 0xe389
   19bb0:	mov	r3, r0
   19bb4:	movw	r0, #2022	; 0x7e6
   19bb8:	mov	r1, #1
   19bbc:	str	r0, [sp]
   19bc0:	movt	r2, #1
   19bc4:	mov	r0, r8
   19bc8:	bl	115f8 <__fprintf_chk@plt>
   19bcc:	movw	r4, #51788	; 0xca4c
   19bd0:	mov	r1, r8
   19bd4:	movt	r4, #1
   19bd8:	mov	r0, r4
   19bdc:	bl	11364 <fputs_unlocked@plt>
   19be0:	movw	r1, #57535	; 0xe0bf
   19be4:	mov	r0, #0
   19be8:	mov	r2, #5
   19bec:	movt	r1, #1
   19bf0:	bl	11430 <dcgettext@plt>
   19bf4:	movw	r3, #57706	; 0xe16a
   19bf8:	mov	r2, r0
   19bfc:	mov	r0, r8
   19c00:	mov	r1, #1
   19c04:	movt	r3, #1
   19c08:	bl	115f8 <__fprintf_chk@plt>
   19c0c:	mov	r0, r4
   19c10:	mov	r1, r8
   19c14:	bl	11364 <fputs_unlocked@plt>
   19c18:	cmp	r6, #9
   19c1c:	bhi	19c58 <__assert_fail@plt+0x8588>
   19c20:	add	r0, pc, #0
   19c24:	ldr	pc, [r0, r6, lsl #2]
   19c28:	andeq	r9, r1, r0, asr ip
   19c2c:	andeq	r9, r1, r4, ror #24
   19c30:	muleq	r1, r4, ip
   19c34:			; <UNDEFINED> instruction: 0x00019cbc
   19c38:	andeq	r9, r1, r4, ror #25
   19c3c:	andeq	r9, r1, ip, lsl #26
   19c40:	andeq	r9, r1, r4, lsr sp
   19c44:	andeq	r9, r1, ip, ror #26
   19c48:	andeq	r9, r1, r4, lsl lr
   19c4c:			; <UNDEFINED> instruction: 0x00019dbc
   19c50:	sub	sp, fp, #24
   19c54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c58:	movw	r1, #58059	; 0xe2cb
   19c5c:	movt	r1, #1
   19c60:	b	19dc4 <__assert_fail@plt+0x86f4>
   19c64:	movw	r1, #57740	; 0xe18c
   19c68:	mov	r0, #0
   19c6c:	mov	r2, #5
   19c70:	movt	r1, #1
   19c74:	bl	11430 <dcgettext@plt>
   19c78:	ldr	r3, [r7]
   19c7c:	mov	r2, r0
   19c80:	mov	r0, r8
   19c84:	mov	r1, #1
   19c88:	sub	sp, fp, #24
   19c8c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19c90:	b	115f8 <__fprintf_chk@plt>
   19c94:	movw	r1, #57756	; 0xe19c
   19c98:	mov	r0, #0
   19c9c:	mov	r2, #5
   19ca0:	movt	r1, #1
   19ca4:	bl	11430 <dcgettext@plt>
   19ca8:	mov	r2, r0
   19cac:	ldr	r3, [r7]
   19cb0:	ldr	r0, [r7, #4]
   19cb4:	str	r0, [sp]
   19cb8:	b	19da8 <__assert_fail@plt+0x86d8>
   19cbc:	movw	r1, #57779	; 0xe1b3
   19cc0:	mov	r0, #0
   19cc4:	mov	r2, #5
   19cc8:	movt	r1, #1
   19ccc:	bl	11430 <dcgettext@plt>
   19cd0:	ldr	r3, [r7]
   19cd4:	mov	r2, r0
   19cd8:	ldmib	r7, {r0, r1}
   19cdc:	stm	sp, {r0, r1}
   19ce0:	b	19da8 <__assert_fail@plt+0x86d8>
   19ce4:	movw	r1, #57807	; 0xe1cf
   19ce8:	mov	r0, #0
   19cec:	mov	r2, #5
   19cf0:	movt	r1, #1
   19cf4:	bl	11430 <dcgettext@plt>
   19cf8:	ldr	r3, [r7]
   19cfc:	mov	r2, r0
   19d00:	ldmib	r7, {r0, r1, r7}
   19d04:	stm	sp, {r0, r1, r7}
   19d08:	b	19da8 <__assert_fail@plt+0x86d8>
   19d0c:	movw	r1, #57839	; 0xe1ef
   19d10:	mov	r0, #0
   19d14:	mov	r2, #5
   19d18:	movt	r1, #1
   19d1c:	bl	11430 <dcgettext@plt>
   19d20:	ldr	r3, [r7]
   19d24:	mov	r2, r0
   19d28:	ldmib	r7, {r0, r1, r6, r7}
   19d2c:	stm	sp, {r0, r1, r6, r7}
   19d30:	b	19da8 <__assert_fail@plt+0x86d8>
   19d34:	movw	r1, #57875	; 0xe213
   19d38:	mov	r0, #0
   19d3c:	mov	r2, #5
   19d40:	movt	r1, #1
   19d44:	bl	11430 <dcgettext@plt>
   19d48:	ldr	r3, [r7]
   19d4c:	mov	r2, r0
   19d50:	ldmib	r7, {r0, r1, r6}
   19d54:	ldr	r5, [r7, #16]
   19d58:	ldr	r7, [r7, #20]
   19d5c:	stm	sp, {r0, r1, r6}
   19d60:	str	r5, [sp, #12]
   19d64:	str	r7, [sp, #16]
   19d68:	b	19da8 <__assert_fail@plt+0x86d8>
   19d6c:	movw	r1, #57915	; 0xe23b
   19d70:	mov	r0, #0
   19d74:	mov	r2, #5
   19d78:	movt	r1, #1
   19d7c:	bl	11430 <dcgettext@plt>
   19d80:	ldr	r3, [r7]
   19d84:	mov	r2, r0
   19d88:	ldmib	r7, {r0, r1, r6}
   19d8c:	ldr	r5, [r7, #16]
   19d90:	ldr	r4, [r7, #20]
   19d94:	ldr	r7, [r7, #24]
   19d98:	stm	sp, {r0, r1, r6}
   19d9c:	str	r5, [sp, #12]
   19da0:	str	r4, [sp, #16]
   19da4:	str	r7, [sp, #20]
   19da8:	mov	r0, r8
   19dac:	mov	r1, #1
   19db0:	bl	115f8 <__fprintf_chk@plt>
   19db4:	sub	sp, fp, #24
   19db8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19dbc:	movw	r1, #58007	; 0xe297
   19dc0:	movt	r1, #1
   19dc4:	mov	r0, #0
   19dc8:	mov	r2, #5
   19dcc:	bl	11430 <dcgettext@plt>
   19dd0:	mov	ip, r0
   19dd4:	ldr	r3, [r7]
   19dd8:	ldr	r0, [r7, #4]
   19ddc:	ldr	r1, [r7, #8]
   19de0:	ldr	r6, [r7, #12]
   19de4:	ldr	r5, [r7, #16]
   19de8:	ldr	r4, [r7, #20]
   19dec:	ldr	r2, [r7, #24]
   19df0:	ldr	lr, [r7, #28]
   19df4:	ldr	r7, [r7, #32]
   19df8:	stm	sp, {r0, r1, r6}
   19dfc:	str	r5, [sp, #12]
   19e00:	str	r4, [sp, #16]
   19e04:	str	r2, [sp, #20]
   19e08:	str	lr, [sp, #24]
   19e0c:	str	r7, [sp, #28]
   19e10:	b	19e58 <__assert_fail@plt+0x8788>
   19e14:	movw	r1, #57959	; 0xe267
   19e18:	mov	r0, #0
   19e1c:	mov	r2, #5
   19e20:	movt	r1, #1
   19e24:	bl	11430 <dcgettext@plt>
   19e28:	mov	ip, r0
   19e2c:	ldr	r3, [r7]
   19e30:	ldmib	r7, {r0, r1, r6}
   19e34:	ldr	r5, [r7, #16]
   19e38:	ldr	r4, [r7, #20]
   19e3c:	ldr	r2, [r7, #24]
   19e40:	ldr	r7, [r7, #28]
   19e44:	stm	sp, {r0, r1, r6}
   19e48:	str	r5, [sp, #12]
   19e4c:	str	r4, [sp, #16]
   19e50:	str	r2, [sp, #20]
   19e54:	str	r7, [sp, #24]
   19e58:	mov	r0, r8
   19e5c:	mov	r1, #1
   19e60:	mov	r2, ip
   19e64:	bl	115f8 <__fprintf_chk@plt>
   19e68:	sub	sp, fp, #24
   19e6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19e70:	push	{r4, sl, fp, lr}
   19e74:	add	fp, sp, #8
   19e78:	sub	sp, sp, #8
   19e7c:	ldr	ip, [fp, #8]
   19e80:	mov	lr, #0
   19e84:	ldr	r4, [ip, lr, lsl #2]
   19e88:	add	lr, lr, #1
   19e8c:	cmp	r4, #0
   19e90:	bne	19e84 <__assert_fail@plt+0x87b4>
   19e94:	sub	r4, lr, #1
   19e98:	str	ip, [sp]
   19e9c:	str	r4, [sp, #4]
   19ea0:	bl	19b34 <__assert_fail@plt+0x8464>
   19ea4:	sub	sp, fp, #8
   19ea8:	pop	{r4, sl, fp, pc}
   19eac:	push	{fp, lr}
   19eb0:	mov	fp, sp
   19eb4:	sub	sp, sp, #48	; 0x30
   19eb8:	ldr	ip, [fp, #8]
   19ebc:	ldr	lr, [ip]
   19ec0:	cmp	lr, #0
   19ec4:	str	lr, [sp, #8]
   19ec8:	beq	19f64 <__assert_fail@plt+0x8894>
   19ecc:	ldr	lr, [ip, #4]
   19ed0:	cmp	lr, #0
   19ed4:	str	lr, [sp, #12]
   19ed8:	beq	19f6c <__assert_fail@plt+0x889c>
   19edc:	ldr	lr, [ip, #8]
   19ee0:	cmp	lr, #0
   19ee4:	str	lr, [sp, #16]
   19ee8:	beq	19f74 <__assert_fail@plt+0x88a4>
   19eec:	ldr	lr, [ip, #12]
   19ef0:	cmp	lr, #0
   19ef4:	str	lr, [sp, #20]
   19ef8:	beq	19f7c <__assert_fail@plt+0x88ac>
   19efc:	ldr	lr, [ip, #16]
   19f00:	cmp	lr, #0
   19f04:	str	lr, [sp, #24]
   19f08:	beq	19f84 <__assert_fail@plt+0x88b4>
   19f0c:	ldr	lr, [ip, #20]
   19f10:	cmp	lr, #0
   19f14:	str	lr, [sp, #28]
   19f18:	beq	19f8c <__assert_fail@plt+0x88bc>
   19f1c:	ldr	lr, [ip, #24]
   19f20:	cmp	lr, #0
   19f24:	str	lr, [sp, #32]
   19f28:	beq	19f94 <__assert_fail@plt+0x88c4>
   19f2c:	ldr	lr, [ip, #28]
   19f30:	cmp	lr, #0
   19f34:	str	lr, [sp, #36]	; 0x24
   19f38:	beq	19f9c <__assert_fail@plt+0x88cc>
   19f3c:	ldr	lr, [ip, #32]
   19f40:	cmp	lr, #0
   19f44:	str	lr, [sp, #40]	; 0x28
   19f48:	beq	19fa4 <__assert_fail@plt+0x88d4>
   19f4c:	ldr	lr, [ip, #36]	; 0x24
   19f50:	mov	ip, #10
   19f54:	cmp	lr, #0
   19f58:	str	lr, [sp, #44]	; 0x2c
   19f5c:	movweq	ip, #9
   19f60:	b	19fa8 <__assert_fail@plt+0x88d8>
   19f64:	mov	ip, #0
   19f68:	b	19fa8 <__assert_fail@plt+0x88d8>
   19f6c:	mov	ip, #1
   19f70:	b	19fa8 <__assert_fail@plt+0x88d8>
   19f74:	mov	ip, #2
   19f78:	b	19fa8 <__assert_fail@plt+0x88d8>
   19f7c:	mov	ip, #3
   19f80:	b	19fa8 <__assert_fail@plt+0x88d8>
   19f84:	mov	ip, #4
   19f88:	b	19fa8 <__assert_fail@plt+0x88d8>
   19f8c:	mov	ip, #5
   19f90:	b	19fa8 <__assert_fail@plt+0x88d8>
   19f94:	mov	ip, #6
   19f98:	b	19fa8 <__assert_fail@plt+0x88d8>
   19f9c:	mov	ip, #7
   19fa0:	b	19fa8 <__assert_fail@plt+0x88d8>
   19fa4:	mov	ip, #8
   19fa8:	add	lr, sp, #8
   19fac:	str	ip, [sp, #4]
   19fb0:	str	lr, [sp]
   19fb4:	bl	19b34 <__assert_fail@plt+0x8464>
   19fb8:	mov	sp, fp
   19fbc:	pop	{fp, pc}
   19fc0:	push	{fp, lr}
   19fc4:	mov	fp, sp
   19fc8:	sub	sp, sp, #56	; 0x38
   19fcc:	add	ip, fp, #8
   19fd0:	str	ip, [sp, #12]
   19fd4:	ldr	lr, [fp, #8]
   19fd8:	cmp	lr, #0
   19fdc:	str	lr, [sp, #16]
   19fe0:	beq	1a07c <__assert_fail@plt+0x89ac>
   19fe4:	ldr	lr, [ip, #4]
   19fe8:	cmp	lr, #0
   19fec:	str	lr, [sp, #20]
   19ff0:	beq	1a084 <__assert_fail@plt+0x89b4>
   19ff4:	ldr	lr, [ip, #8]
   19ff8:	cmp	lr, #0
   19ffc:	str	lr, [sp, #24]
   1a000:	beq	1a08c <__assert_fail@plt+0x89bc>
   1a004:	ldr	lr, [ip, #12]
   1a008:	cmp	lr, #0
   1a00c:	str	lr, [sp, #28]
   1a010:	beq	1a094 <__assert_fail@plt+0x89c4>
   1a014:	ldr	lr, [ip, #16]
   1a018:	cmp	lr, #0
   1a01c:	str	lr, [sp, #32]
   1a020:	beq	1a09c <__assert_fail@plt+0x89cc>
   1a024:	ldr	lr, [ip, #20]
   1a028:	cmp	lr, #0
   1a02c:	str	lr, [sp, #36]	; 0x24
   1a030:	beq	1a0a4 <__assert_fail@plt+0x89d4>
   1a034:	ldr	lr, [ip, #24]
   1a038:	cmp	lr, #0
   1a03c:	str	lr, [sp, #40]	; 0x28
   1a040:	beq	1a0ac <__assert_fail@plt+0x89dc>
   1a044:	ldr	lr, [ip, #28]
   1a048:	cmp	lr, #0
   1a04c:	str	lr, [sp, #44]	; 0x2c
   1a050:	beq	1a0b4 <__assert_fail@plt+0x89e4>
   1a054:	ldr	lr, [ip, #32]
   1a058:	cmp	lr, #0
   1a05c:	str	lr, [sp, #48]	; 0x30
   1a060:	beq	1a0bc <__assert_fail@plt+0x89ec>
   1a064:	ldr	lr, [ip, #36]	; 0x24
   1a068:	mov	ip, #10
   1a06c:	cmp	lr, #0
   1a070:	str	lr, [sp, #52]	; 0x34
   1a074:	movweq	ip, #9
   1a078:	b	1a0c0 <__assert_fail@plt+0x89f0>
   1a07c:	mov	ip, #0
   1a080:	b	1a0c0 <__assert_fail@plt+0x89f0>
   1a084:	mov	ip, #1
   1a088:	b	1a0c0 <__assert_fail@plt+0x89f0>
   1a08c:	mov	ip, #2
   1a090:	b	1a0c0 <__assert_fail@plt+0x89f0>
   1a094:	mov	ip, #3
   1a098:	b	1a0c0 <__assert_fail@plt+0x89f0>
   1a09c:	mov	ip, #4
   1a0a0:	b	1a0c0 <__assert_fail@plt+0x89f0>
   1a0a4:	mov	ip, #5
   1a0a8:	b	1a0c0 <__assert_fail@plt+0x89f0>
   1a0ac:	mov	ip, #6
   1a0b0:	b	1a0c0 <__assert_fail@plt+0x89f0>
   1a0b4:	mov	ip, #7
   1a0b8:	b	1a0c0 <__assert_fail@plt+0x89f0>
   1a0bc:	mov	ip, #8
   1a0c0:	add	lr, sp, #16
   1a0c4:	str	ip, [sp, #4]
   1a0c8:	str	lr, [sp]
   1a0cc:	bl	19b34 <__assert_fail@plt+0x8464>
   1a0d0:	mov	sp, fp
   1a0d4:	pop	{fp, pc}
   1a0d8:	push	{fp, lr}
   1a0dc:	mov	fp, sp
   1a0e0:	movw	r0, #61908	; 0xf1d4
   1a0e4:	movt	r0, #2
   1a0e8:	ldr	r1, [r0]
   1a0ec:	movw	r0, #51788	; 0xca4c
   1a0f0:	movt	r0, #1
   1a0f4:	bl	11364 <fputs_unlocked@plt>
   1a0f8:	movw	r1, #58119	; 0xe307
   1a0fc:	mov	r0, #0
   1a100:	mov	r2, #5
   1a104:	movt	r1, #1
   1a108:	bl	11430 <dcgettext@plt>
   1a10c:	movw	r2, #58139	; 0xe31b
   1a110:	mov	r1, r0
   1a114:	mov	r0, #1
   1a118:	movt	r2, #1
   1a11c:	bl	115d4 <__printf_chk@plt>
   1a120:	movw	r1, #58161	; 0xe331
   1a124:	mov	r0, #0
   1a128:	mov	r2, #5
   1a12c:	movt	r1, #1
   1a130:	bl	11430 <dcgettext@plt>
   1a134:	movw	r2, #54033	; 0xd311
   1a138:	movw	r3, #54047	; 0xd31f
   1a13c:	mov	r1, r0
   1a140:	mov	r0, #1
   1a144:	movt	r2, #1
   1a148:	movt	r3, #1
   1a14c:	bl	115d4 <__printf_chk@plt>
   1a150:	movw	r1, #58181	; 0xe345
   1a154:	mov	r0, #0
   1a158:	mov	r2, #5
   1a15c:	movt	r1, #1
   1a160:	bl	11430 <dcgettext@plt>
   1a164:	movw	r2, #58220	; 0xe36c
   1a168:	mov	r1, r0
   1a16c:	mov	r0, #1
   1a170:	movt	r2, #1
   1a174:	pop	{fp, lr}
   1a178:	b	115d4 <__printf_chk@plt>
   1a17c:	push	{r4, r5, r6, sl, fp, lr}
   1a180:	add	fp, sp, #16
   1a184:	mov	r4, r2
   1a188:	mov	r5, r1
   1a18c:	mov	r6, r0
   1a190:	bl	1bc84 <__assert_fail@plt+0xa5b4>
   1a194:	cmp	r0, #0
   1a198:	popne	{r4, r5, r6, sl, fp, pc}
   1a19c:	cmp	r6, #0
   1a1a0:	beq	1a1b4 <__assert_fail@plt+0x8ae4>
   1a1a4:	cmp	r5, #0
   1a1a8:	cmpne	r4, #0
   1a1ac:	bne	1a1b4 <__assert_fail@plt+0x8ae4>
   1a1b0:	pop	{r4, r5, r6, sl, fp, pc}
   1a1b4:	bl	1a754 <__assert_fail@plt+0x9084>
   1a1b8:	push	{r4, r5, r6, sl, fp, lr}
   1a1bc:	add	fp, sp, #16
   1a1c0:	mov	r4, r2
   1a1c4:	mov	r5, r1
   1a1c8:	mov	r6, r0
   1a1cc:	bl	1bc84 <__assert_fail@plt+0xa5b4>
   1a1d0:	cmp	r0, #0
   1a1d4:	popne	{r4, r5, r6, sl, fp, pc}
   1a1d8:	cmp	r6, #0
   1a1dc:	beq	1a1f0 <__assert_fail@plt+0x8b20>
   1a1e0:	cmp	r5, #0
   1a1e4:	cmpne	r4, #0
   1a1e8:	bne	1a1f0 <__assert_fail@plt+0x8b20>
   1a1ec:	pop	{r4, r5, r6, sl, fp, pc}
   1a1f0:	bl	1a754 <__assert_fail@plt+0x9084>
   1a1f4:	push	{fp, lr}
   1a1f8:	mov	fp, sp
   1a1fc:	bl	1b634 <__assert_fail@plt+0x9f64>
   1a200:	cmp	r0, #0
   1a204:	popne	{fp, pc}
   1a208:	bl	1a754 <__assert_fail@plt+0x9084>
   1a20c:	push	{fp, lr}
   1a210:	mov	fp, sp
   1a214:	bl	1b634 <__assert_fail@plt+0x9f64>
   1a218:	cmp	r0, #0
   1a21c:	popne	{fp, pc}
   1a220:	bl	1a754 <__assert_fail@plt+0x9084>
   1a224:	push	{fp, lr}
   1a228:	mov	fp, sp
   1a22c:	bl	1b634 <__assert_fail@plt+0x9f64>
   1a230:	cmp	r0, #0
   1a234:	popne	{fp, pc}
   1a238:	bl	1a754 <__assert_fail@plt+0x9084>
   1a23c:	push	{r4, r5, fp, lr}
   1a240:	add	fp, sp, #8
   1a244:	mov	r4, r1
   1a248:	mov	r5, r0
   1a24c:	bl	1b664 <__assert_fail@plt+0x9f94>
   1a250:	cmp	r0, #0
   1a254:	popne	{r4, r5, fp, pc}
   1a258:	cmp	r5, #0
   1a25c:	beq	1a26c <__assert_fail@plt+0x8b9c>
   1a260:	cmp	r4, #0
   1a264:	bne	1a26c <__assert_fail@plt+0x8b9c>
   1a268:	pop	{r4, r5, fp, pc}
   1a26c:	bl	1a754 <__assert_fail@plt+0x9084>
   1a270:	push	{fp, lr}
   1a274:	mov	fp, sp
   1a278:	cmp	r1, #0
   1a27c:	orreq	r1, r1, #1
   1a280:	bl	1b664 <__assert_fail@plt+0x9f94>
   1a284:	cmp	r0, #0
   1a288:	popne	{fp, pc}
   1a28c:	bl	1a754 <__assert_fail@plt+0x9084>
   1a290:	push	{fp, lr}
   1a294:	mov	fp, sp
   1a298:	clz	r3, r2
   1a29c:	lsr	ip, r3, #5
   1a2a0:	clz	r3, r1
   1a2a4:	lsr	r3, r3, #5
   1a2a8:	orrs	r3, r3, ip
   1a2ac:	movwne	r1, #1
   1a2b0:	movwne	r2, #1
   1a2b4:	bl	1bc84 <__assert_fail@plt+0xa5b4>
   1a2b8:	cmp	r0, #0
   1a2bc:	popne	{fp, pc}
   1a2c0:	bl	1a754 <__assert_fail@plt+0x9084>
   1a2c4:	push	{fp, lr}
   1a2c8:	mov	fp, sp
   1a2cc:	mov	r2, r1
   1a2d0:	mov	r1, r0
   1a2d4:	mov	r0, #0
   1a2d8:	bl	1bc84 <__assert_fail@plt+0xa5b4>
   1a2dc:	cmp	r0, #0
   1a2e0:	popne	{fp, pc}
   1a2e4:	bl	1a754 <__assert_fail@plt+0x9084>
   1a2e8:	push	{fp, lr}
   1a2ec:	mov	fp, sp
   1a2f0:	mov	r2, r1
   1a2f4:	mov	r1, r0
   1a2f8:	clz	r0, r2
   1a2fc:	clz	r3, r1
   1a300:	lsr	r0, r0, #5
   1a304:	lsr	r3, r3, #5
   1a308:	orrs	r0, r3, r0
   1a30c:	movwne	r1, #1
   1a310:	movwne	r2, #1
   1a314:	mov	r0, #0
   1a318:	bl	1bc84 <__assert_fail@plt+0xa5b4>
   1a31c:	cmp	r0, #0
   1a320:	popne	{fp, pc}
   1a324:	bl	1a754 <__assert_fail@plt+0x9084>
   1a328:	push	{r4, r5, r6, sl, fp, lr}
   1a32c:	add	fp, sp, #16
   1a330:	ldr	r5, [r1]
   1a334:	mov	r4, r1
   1a338:	mov	r6, r0
   1a33c:	cmp	r0, #0
   1a340:	beq	1a358 <__assert_fail@plt+0x8c88>
   1a344:	mov	r0, #1
   1a348:	add	r0, r0, r5, lsr #1
   1a34c:	adds	r5, r5, r0
   1a350:	bcc	1a360 <__assert_fail@plt+0x8c90>
   1a354:	b	1a39c <__assert_fail@plt+0x8ccc>
   1a358:	cmp	r5, #0
   1a35c:	movweq	r5, #64	; 0x40
   1a360:	mov	r0, r6
   1a364:	mov	r1, r5
   1a368:	mov	r2, #1
   1a36c:	bl	1bc84 <__assert_fail@plt+0xa5b4>
   1a370:	cmp	r5, #0
   1a374:	mov	r1, r5
   1a378:	movwne	r1, #1
   1a37c:	cmp	r0, #0
   1a380:	bne	1a394 <__assert_fail@plt+0x8cc4>
   1a384:	clz	r2, r6
   1a388:	lsr	r2, r2, #5
   1a38c:	orrs	r1, r2, r1
   1a390:	bne	1a39c <__assert_fail@plt+0x8ccc>
   1a394:	str	r5, [r4]
   1a398:	pop	{r4, r5, r6, sl, fp, pc}
   1a39c:	bl	1a754 <__assert_fail@plt+0x9084>
   1a3a0:	push	{r4, r5, r6, r7, fp, lr}
   1a3a4:	add	fp, sp, #16
   1a3a8:	ldr	r5, [r1]
   1a3ac:	mov	r6, r2
   1a3b0:	mov	r4, r1
   1a3b4:	mov	r7, r0
   1a3b8:	cmp	r0, #0
   1a3bc:	beq	1a3d4 <__assert_fail@plt+0x8d04>
   1a3c0:	mov	r0, #1
   1a3c4:	add	r0, r0, r5, lsr #1
   1a3c8:	adds	r5, r5, r0
   1a3cc:	bcc	1a3ec <__assert_fail@plt+0x8d1c>
   1a3d0:	b	1a420 <__assert_fail@plt+0x8d50>
   1a3d4:	cmp	r5, #0
   1a3d8:	bne	1a3ec <__assert_fail@plt+0x8d1c>
   1a3dc:	mov	r0, #64	; 0x40
   1a3e0:	cmp	r6, #64	; 0x40
   1a3e4:	udiv	r5, r0, r6
   1a3e8:	addhi	r5, r5, #1
   1a3ec:	mov	r0, r7
   1a3f0:	mov	r1, r5
   1a3f4:	mov	r2, r6
   1a3f8:	bl	1bc84 <__assert_fail@plt+0xa5b4>
   1a3fc:	cmp	r0, #0
   1a400:	bne	1a418 <__assert_fail@plt+0x8d48>
   1a404:	cmp	r7, #0
   1a408:	beq	1a420 <__assert_fail@plt+0x8d50>
   1a40c:	cmp	r6, #0
   1a410:	cmpne	r5, #0
   1a414:	bne	1a420 <__assert_fail@plt+0x8d50>
   1a418:	str	r5, [r4]
   1a41c:	pop	{r4, r5, r6, r7, fp, pc}
   1a420:	bl	1a754 <__assert_fail@plt+0x9084>
   1a424:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a428:	add	fp, sp, #24
   1a42c:	mov	r8, r1
   1a430:	ldr	r1, [r1]
   1a434:	mov	r5, r0
   1a438:	add	r0, r1, r1, asr #1
   1a43c:	cmp	r0, r1
   1a440:	mvnvs	r0, #-2147483648	; 0x80000000
   1a444:	cmp	r0, r3
   1a448:	mov	r7, r0
   1a44c:	movgt	r7, r3
   1a450:	cmn	r3, #1
   1a454:	movle	r7, r0
   1a458:	ldr	r0, [fp, #8]
   1a45c:	cmn	r0, #1
   1a460:	ble	1a488 <__assert_fail@plt+0x8db8>
   1a464:	cmp	r0, #0
   1a468:	beq	1a4dc <__assert_fail@plt+0x8e0c>
   1a46c:	cmn	r7, #1
   1a470:	ble	1a4b0 <__assert_fail@plt+0x8de0>
   1a474:	mvn	r4, #-2147483648	; 0x80000000
   1a478:	udiv	r6, r4, r0
   1a47c:	cmp	r6, r7
   1a480:	bge	1a4dc <__assert_fail@plt+0x8e0c>
   1a484:	b	1a4ec <__assert_fail@plt+0x8e1c>
   1a488:	cmn	r7, #1
   1a48c:	ble	1a4cc <__assert_fail@plt+0x8dfc>
   1a490:	cmn	r0, #1
   1a494:	beq	1a4dc <__assert_fail@plt+0x8e0c>
   1a498:	mov	r6, #-2147483648	; 0x80000000
   1a49c:	mvn	r4, #-2147483648	; 0x80000000
   1a4a0:	sdiv	r6, r6, r0
   1a4a4:	cmp	r6, r7
   1a4a8:	bge	1a4dc <__assert_fail@plt+0x8e0c>
   1a4ac:	b	1a4ec <__assert_fail@plt+0x8e1c>
   1a4b0:	beq	1a4dc <__assert_fail@plt+0x8e0c>
   1a4b4:	mov	r6, #-2147483648	; 0x80000000
   1a4b8:	mvn	r4, #-2147483648	; 0x80000000
   1a4bc:	sdiv	r6, r6, r7
   1a4c0:	cmp	r6, r0
   1a4c4:	bge	1a4dc <__assert_fail@plt+0x8e0c>
   1a4c8:	b	1a4ec <__assert_fail@plt+0x8e1c>
   1a4cc:	mvn	r4, #-2147483648	; 0x80000000
   1a4d0:	sdiv	r6, r4, r0
   1a4d4:	cmp	r7, r6
   1a4d8:	blt	1a4ec <__assert_fail@plt+0x8e1c>
   1a4dc:	mul	r6, r7, r0
   1a4e0:	mov	r4, #64	; 0x40
   1a4e4:	cmp	r6, #63	; 0x3f
   1a4e8:	bgt	1a4f4 <__assert_fail@plt+0x8e24>
   1a4ec:	sdiv	r7, r4, r0
   1a4f0:	mul	r6, r7, r0
   1a4f4:	cmp	r5, #0
   1a4f8:	moveq	r4, #0
   1a4fc:	streq	r4, [r8]
   1a500:	sub	r4, r7, r1
   1a504:	cmp	r4, r2
   1a508:	bge	1a5b4 <__assert_fail@plt+0x8ee4>
   1a50c:	add	r7, r1, r2
   1a510:	mov	r6, #0
   1a514:	mov	r2, #0
   1a518:	cmp	r7, r3
   1a51c:	movwgt	r6, #1
   1a520:	cmn	r3, #1
   1a524:	movwgt	r2, #1
   1a528:	cmp	r7, r1
   1a52c:	bvs	1a5e8 <__assert_fail@plt+0x8f18>
   1a530:	ands	r1, r2, r6
   1a534:	bne	1a5e8 <__assert_fail@plt+0x8f18>
   1a538:	cmn	r0, #1
   1a53c:	ble	1a564 <__assert_fail@plt+0x8e94>
   1a540:	cmp	r0, #0
   1a544:	beq	1a5b0 <__assert_fail@plt+0x8ee0>
   1a548:	cmn	r7, #1
   1a54c:	ble	1a588 <__assert_fail@plt+0x8eb8>
   1a550:	mvn	r1, #-2147483648	; 0x80000000
   1a554:	udiv	r1, r1, r0
   1a558:	cmp	r1, r7
   1a55c:	bge	1a5b0 <__assert_fail@plt+0x8ee0>
   1a560:	b	1a5e8 <__assert_fail@plt+0x8f18>
   1a564:	cmn	r7, #1
   1a568:	ble	1a5a0 <__assert_fail@plt+0x8ed0>
   1a56c:	cmn	r0, #1
   1a570:	beq	1a5b0 <__assert_fail@plt+0x8ee0>
   1a574:	mov	r1, #-2147483648	; 0x80000000
   1a578:	sdiv	r1, r1, r0
   1a57c:	cmp	r1, r7
   1a580:	bge	1a5b0 <__assert_fail@plt+0x8ee0>
   1a584:	b	1a5e8 <__assert_fail@plt+0x8f18>
   1a588:	beq	1a5b0 <__assert_fail@plt+0x8ee0>
   1a58c:	mov	r1, #-2147483648	; 0x80000000
   1a590:	sdiv	r1, r1, r7
   1a594:	cmp	r1, r0
   1a598:	bge	1a5b0 <__assert_fail@plt+0x8ee0>
   1a59c:	b	1a5e8 <__assert_fail@plt+0x8f18>
   1a5a0:	mvn	r1, #-2147483648	; 0x80000000
   1a5a4:	sdiv	r1, r1, r0
   1a5a8:	cmp	r7, r1
   1a5ac:	blt	1a5e8 <__assert_fail@plt+0x8f18>
   1a5b0:	mul	r6, r7, r0
   1a5b4:	mov	r0, r5
   1a5b8:	mov	r1, r6
   1a5bc:	bl	1b664 <__assert_fail@plt+0x9f94>
   1a5c0:	cmp	r6, #0
   1a5c4:	movwne	r6, #1
   1a5c8:	cmp	r0, #0
   1a5cc:	bne	1a5e0 <__assert_fail@plt+0x8f10>
   1a5d0:	clz	r1, r5
   1a5d4:	lsr	r1, r1, #5
   1a5d8:	orrs	r1, r1, r6
   1a5dc:	bne	1a5e8 <__assert_fail@plt+0x8f18>
   1a5e0:	str	r7, [r8]
   1a5e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a5e8:	bl	1a754 <__assert_fail@plt+0x9084>
   1a5ec:	push	{fp, lr}
   1a5f0:	mov	fp, sp
   1a5f4:	mov	r1, #1
   1a5f8:	bl	1b5e0 <__assert_fail@plt+0x9f10>
   1a5fc:	cmp	r0, #0
   1a600:	popne	{fp, pc}
   1a604:	bl	1a754 <__assert_fail@plt+0x9084>
   1a608:	push	{fp, lr}
   1a60c:	mov	fp, sp
   1a610:	bl	1b5e0 <__assert_fail@plt+0x9f10>
   1a614:	cmp	r0, #0
   1a618:	popne	{fp, pc}
   1a61c:	bl	1a754 <__assert_fail@plt+0x9084>
   1a620:	push	{fp, lr}
   1a624:	mov	fp, sp
   1a628:	mov	r1, #1
   1a62c:	bl	1b5e0 <__assert_fail@plt+0x9f10>
   1a630:	cmp	r0, #0
   1a634:	popne	{fp, pc}
   1a638:	bl	1a754 <__assert_fail@plt+0x9084>
   1a63c:	push	{fp, lr}
   1a640:	mov	fp, sp
   1a644:	bl	1b5e0 <__assert_fail@plt+0x9f10>
   1a648:	cmp	r0, #0
   1a64c:	popne	{fp, pc}
   1a650:	bl	1a754 <__assert_fail@plt+0x9084>
   1a654:	push	{r4, r5, r6, sl, fp, lr}
   1a658:	add	fp, sp, #16
   1a65c:	mov	r5, r0
   1a660:	mov	r0, r1
   1a664:	mov	r4, r1
   1a668:	bl	1b634 <__assert_fail@plt+0x9f64>
   1a66c:	cmp	r0, #0
   1a670:	beq	1a68c <__assert_fail@plt+0x8fbc>
   1a674:	mov	r1, r5
   1a678:	mov	r2, r4
   1a67c:	mov	r6, r0
   1a680:	bl	113f4 <memcpy@plt>
   1a684:	mov	r0, r6
   1a688:	pop	{r4, r5, r6, sl, fp, pc}
   1a68c:	bl	1a754 <__assert_fail@plt+0x9084>
   1a690:	push	{r4, r5, r6, sl, fp, lr}
   1a694:	add	fp, sp, #16
   1a698:	mov	r5, r0
   1a69c:	mov	r0, r1
   1a6a0:	mov	r4, r1
   1a6a4:	bl	1b634 <__assert_fail@plt+0x9f64>
   1a6a8:	cmp	r0, #0
   1a6ac:	beq	1a6c8 <__assert_fail@plt+0x8ff8>
   1a6b0:	mov	r1, r5
   1a6b4:	mov	r2, r4
   1a6b8:	mov	r6, r0
   1a6bc:	bl	113f4 <memcpy@plt>
   1a6c0:	mov	r0, r6
   1a6c4:	pop	{r4, r5, r6, sl, fp, pc}
   1a6c8:	bl	1a754 <__assert_fail@plt+0x9084>
   1a6cc:	push	{r4, r5, r6, sl, fp, lr}
   1a6d0:	add	fp, sp, #16
   1a6d4:	mov	r5, r0
   1a6d8:	add	r0, r1, #1
   1a6dc:	mov	r4, r1
   1a6e0:	bl	1b634 <__assert_fail@plt+0x9f64>
   1a6e4:	cmp	r0, #0
   1a6e8:	beq	1a710 <__assert_fail@plt+0x9040>
   1a6ec:	mov	r6, r0
   1a6f0:	mov	r0, #0
   1a6f4:	mov	r1, r5
   1a6f8:	mov	r2, r4
   1a6fc:	strb	r0, [r6, r4]
   1a700:	mov	r0, r6
   1a704:	bl	113f4 <memcpy@plt>
   1a708:	mov	r0, r6
   1a70c:	pop	{r4, r5, r6, sl, fp, pc}
   1a710:	bl	1a754 <__assert_fail@plt+0x9084>
   1a714:	push	{r4, r5, r6, sl, fp, lr}
   1a718:	add	fp, sp, #16
   1a71c:	mov	r4, r0
   1a720:	bl	11574 <strlen@plt>
   1a724:	add	r5, r0, #1
   1a728:	mov	r0, r5
   1a72c:	bl	1b634 <__assert_fail@plt+0x9f64>
   1a730:	cmp	r0, #0
   1a734:	beq	1a750 <__assert_fail@plt+0x9080>
   1a738:	mov	r1, r4
   1a73c:	mov	r2, r5
   1a740:	mov	r6, r0
   1a744:	bl	113f4 <memcpy@plt>
   1a748:	mov	r0, r6
   1a74c:	pop	{r4, r5, r6, sl, fp, pc}
   1a750:	bl	1a754 <__assert_fail@plt+0x9084>
   1a754:	push	{fp, lr}
   1a758:	mov	fp, sp
   1a75c:	movw	r0, #61804	; 0xf16c
   1a760:	movw	r1, #58296	; 0xe3b8
   1a764:	mov	r2, #5
   1a768:	movt	r0, #2
   1a76c:	movt	r1, #1
   1a770:	ldr	r4, [r0]
   1a774:	mov	r0, #0
   1a778:	bl	11430 <dcgettext@plt>
   1a77c:	movw	r2, #55112	; 0xd748
   1a780:	mov	r3, r0
   1a784:	mov	r0, r4
   1a788:	mov	r1, #0
   1a78c:	movt	r2, #1
   1a790:	bl	114cc <error@plt>
   1a794:	bl	116a0 <abort@plt>
   1a798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a79c:	add	fp, sp, #28
   1a7a0:	sub	sp, sp, #44	; 0x2c
   1a7a4:	cmp	r2, #37	; 0x25
   1a7a8:	bcs	1b42c <__assert_fail@plt+0x9d5c>
   1a7ac:	ldr	sl, [fp, #8]
   1a7b0:	mov	r6, r2
   1a7b4:	mov	r7, r1
   1a7b8:	mov	r4, r0
   1a7bc:	str	r3, [sp, #36]	; 0x24
   1a7c0:	bl	11598 <__errno_location@plt>
   1a7c4:	mov	r5, r0
   1a7c8:	mov	r0, #0
   1a7cc:	str	r0, [r5]
   1a7d0:	bl	1155c <__ctype_b_loc@plt>
   1a7d4:	ldr	r1, [r0]
   1a7d8:	mov	r2, r4
   1a7dc:	ldrb	r0, [r2], #1
   1a7e0:	add	r3, r1, r0, lsl #1
   1a7e4:	ldrb	r3, [r3, #1]
   1a7e8:	tst	r3, #32
   1a7ec:	bne	1a7dc <__assert_fail@plt+0x910c>
   1a7f0:	sub	r9, fp, #32
   1a7f4:	cmp	r7, #0
   1a7f8:	mov	r8, #4
   1a7fc:	movne	r9, r7
   1a800:	cmp	r0, #45	; 0x2d
   1a804:	beq	1abc4 <__assert_fail@plt+0x94f4>
   1a808:	mov	r0, r4
   1a80c:	mov	r1, r9
   1a810:	mov	r2, r6
   1a814:	mov	r3, #0
   1a818:	bl	11400 <__strtoull_internal@plt>
   1a81c:	mov	r7, r1
   1a820:	ldr	r1, [r9]
   1a824:	cmp	r1, r4
   1a828:	beq	1a860 <__assert_fail@plt+0x9190>
   1a82c:	mov	r6, r0
   1a830:	ldr	r0, [r5]
   1a834:	cmp	r0, #0
   1a838:	beq	1ab7c <__assert_fail@plt+0x94ac>
   1a83c:	cmp	r0, #34	; 0x22
   1a840:	bne	1abc4 <__assert_fail@plt+0x94f4>
   1a844:	mov	r8, #1
   1a848:	cmp	sl, #0
   1a84c:	beq	1b418 <__assert_fail@plt+0x9d48>
   1a850:	ldrb	r4, [r1]
   1a854:	cmp	r4, #0
   1a858:	bne	1a8a4 <__assert_fail@plt+0x91d4>
   1a85c:	b	1b418 <__assert_fail@plt+0x9d48>
   1a860:	cmp	sl, #0
   1a864:	beq	1abc4 <__assert_fail@plt+0x94f4>
   1a868:	mov	r5, r1
   1a86c:	ldrb	r1, [r4]
   1a870:	cmp	r1, #0
   1a874:	beq	1abc4 <__assert_fail@plt+0x94f4>
   1a878:	mov	r0, sl
   1a87c:	bl	11580 <strchr@plt>
   1a880:	cmp	r0, #0
   1a884:	beq	1abc4 <__assert_fail@plt+0x94f4>
   1a888:	mov	r1, r5
   1a88c:	mov	r8, #0
   1a890:	mov	r6, #1
   1a894:	mov	r7, #0
   1a898:	ldrb	r4, [r1]
   1a89c:	cmp	r4, #0
   1a8a0:	beq	1b418 <__assert_fail@plt+0x9d48>
   1a8a4:	str	r1, [sp, #32]
   1a8a8:	mov	r0, sl
   1a8ac:	mov	r1, r4
   1a8b0:	bl	11580 <strchr@plt>
   1a8b4:	cmp	r0, #0
   1a8b8:	beq	1abb8 <__assert_fail@plt+0x94e8>
   1a8bc:	sub	r0, r4, #69	; 0x45
   1a8c0:	mov	r1, #1
   1a8c4:	mov	r3, #0
   1a8c8:	mov	r5, #1024	; 0x400
   1a8cc:	cmp	r0, #47	; 0x2f
   1a8d0:	str	r1, [sp, #28]
   1a8d4:	bhi	1a9d8 <__assert_fail@plt+0x9308>
   1a8d8:	add	r1, pc, #0
   1a8dc:	ldr	pc, [r1, r0, lsl #2]
   1a8e0:	andeq	sl, r1, r0, lsr #19
   1a8e4:	ldrdeq	sl, [r1], -r8
   1a8e8:	andeq	sl, r1, r0, lsr #19
   1a8ec:	ldrdeq	sl, [r1], -r8
   1a8f0:	ldrdeq	sl, [r1], -r8
   1a8f4:	ldrdeq	sl, [r1], -r8
   1a8f8:	andeq	sl, r1, r0, lsr #19
   1a8fc:	ldrdeq	sl, [r1], -r8
   1a900:	andeq	sl, r1, r0, lsr #19
   1a904:	ldrdeq	sl, [r1], -r8
   1a908:	ldrdeq	sl, [r1], -r8
   1a90c:	andeq	sl, r1, r0, lsr #19
   1a910:	ldrdeq	sl, [r1], -r8
   1a914:	ldrdeq	sl, [r1], -r8
   1a918:	ldrdeq	sl, [r1], -r8
   1a91c:	andeq	sl, r1, r0, lsr #19
   1a920:	ldrdeq	sl, [r1], -r8
   1a924:	ldrdeq	sl, [r1], -r8
   1a928:	ldrdeq	sl, [r1], -r8
   1a92c:	ldrdeq	sl, [r1], -r8
   1a930:	andeq	sl, r1, r0, lsr #19
   1a934:	andeq	sl, r1, r0, lsr #19
   1a938:	ldrdeq	sl, [r1], -r8
   1a93c:	ldrdeq	sl, [r1], -r8
   1a940:	ldrdeq	sl, [r1], -r8
   1a944:	ldrdeq	sl, [r1], -r8
   1a948:	ldrdeq	sl, [r1], -r8
   1a94c:	ldrdeq	sl, [r1], -r8
   1a950:	ldrdeq	sl, [r1], -r8
   1a954:	ldrdeq	sl, [r1], -r8
   1a958:	ldrdeq	sl, [r1], -r8
   1a95c:	ldrdeq	sl, [r1], -r8
   1a960:	ldrdeq	sl, [r1], -r8
   1a964:	ldrdeq	sl, [r1], -r8
   1a968:	andeq	sl, r1, r0, lsr #19
   1a96c:	ldrdeq	sl, [r1], -r8
   1a970:	ldrdeq	sl, [r1], -r8
   1a974:	ldrdeq	sl, [r1], -r8
   1a978:	andeq	sl, r1, r0, lsr #19
   1a97c:	ldrdeq	sl, [r1], -r8
   1a980:	andeq	sl, r1, r0, lsr #19
   1a984:	ldrdeq	sl, [r1], -r8
   1a988:	ldrdeq	sl, [r1], -r8
   1a98c:	ldrdeq	sl, [r1], -r8
   1a990:	ldrdeq	sl, [r1], -r8
   1a994:	ldrdeq	sl, [r1], -r8
   1a998:	ldrdeq	sl, [r1], -r8
   1a99c:	andeq	sl, r1, r0, lsr #19
   1a9a0:	mov	r0, sl
   1a9a4:	mov	r1, #48	; 0x30
   1a9a8:	bl	11580 <strchr@plt>
   1a9ac:	cmp	r0, #0
   1a9b0:	beq	1a9d4 <__assert_fail@plt+0x9304>
   1a9b4:	ldr	r1, [sp, #32]
   1a9b8:	ldrb	r0, [r1, #1]
   1a9bc:	cmp	r0, #66	; 0x42
   1a9c0:	cmpne	r0, #68	; 0x44
   1a9c4:	bne	1ab8c <__assert_fail@plt+0x94bc>
   1a9c8:	mov	r5, #1000	; 0x3e8
   1a9cc:	mov	r0, #2
   1a9d0:	str	r0, [sp, #28]
   1a9d4:	mov	r3, #0
   1a9d8:	sub	r0, r4, #66	; 0x42
   1a9dc:	cmp	r0, #53	; 0x35
   1a9e0:	bhi	1abb8 <__assert_fail@plt+0x94e8>
   1a9e4:	add	r1, pc, #0
   1a9e8:	ldr	pc, [r1, r0, lsl #2]
   1a9ec:	andeq	sl, r1, r8, lsr #30
   1a9f0:			; <UNDEFINED> instruction: 0x0001abb8
   1a9f4:			; <UNDEFINED> instruction: 0x0001abb8
   1a9f8:	andeq	sl, r1, r0, asr pc
   1a9fc:			; <UNDEFINED> instruction: 0x0001abb8
   1aa00:	andeq	sl, r1, r4, asr #21
   1aa04:			; <UNDEFINED> instruction: 0x0001abb8
   1aa08:			; <UNDEFINED> instruction: 0x0001abb8
   1aa0c:			; <UNDEFINED> instruction: 0x0001abb8
   1aa10:	ldrdeq	sl, [r1], -r0
   1aa14:			; <UNDEFINED> instruction: 0x0001abb8
   1aa18:	andeq	sl, r1, r8, lsl ip
   1aa1c:			; <UNDEFINED> instruction: 0x0001abb8
   1aa20:			; <UNDEFINED> instruction: 0x0001abb8
   1aa24:	andeq	fp, r1, r4, lsr #1
   1aa28:			; <UNDEFINED> instruction: 0x0001abb8
   1aa2c:			; <UNDEFINED> instruction: 0x0001abb8
   1aa30:			; <UNDEFINED> instruction: 0x0001abb8
   1aa34:	andeq	sl, r1, r4, lsr #25
   1aa38:			; <UNDEFINED> instruction: 0x0001abb8
   1aa3c:			; <UNDEFINED> instruction: 0x0001abb8
   1aa40:			; <UNDEFINED> instruction: 0x0001abb8
   1aa44:			; <UNDEFINED> instruction: 0x0001abb8
   1aa48:	andeq	fp, r1, ip, asr #3
   1aa4c:	andeq	sl, r1, ip, lsl #27
   1aa50:			; <UNDEFINED> instruction: 0x0001abb8
   1aa54:			; <UNDEFINED> instruction: 0x0001abb8
   1aa58:			; <UNDEFINED> instruction: 0x0001abb8
   1aa5c:			; <UNDEFINED> instruction: 0x0001abb8
   1aa60:			; <UNDEFINED> instruction: 0x0001abb8
   1aa64:			; <UNDEFINED> instruction: 0x0001abb8
   1aa68:			; <UNDEFINED> instruction: 0x0001abb8
   1aa6c:	andeq	fp, r1, r0, lsr #7
   1aa70:	strdeq	fp, [r1], -r8
   1aa74:			; <UNDEFINED> instruction: 0x0001abb8
   1aa78:			; <UNDEFINED> instruction: 0x0001abb8
   1aa7c:			; <UNDEFINED> instruction: 0x0001abb8
   1aa80:	andeq	sl, r1, r4, asr #21
   1aa84:			; <UNDEFINED> instruction: 0x0001abb8
   1aa88:			; <UNDEFINED> instruction: 0x0001abb8
   1aa8c:			; <UNDEFINED> instruction: 0x0001abb8
   1aa90:	ldrdeq	sl, [r1], -r0
   1aa94:			; <UNDEFINED> instruction: 0x0001abb8
   1aa98:	andeq	sl, r1, r8, lsl ip
   1aa9c:			; <UNDEFINED> instruction: 0x0001abb8
   1aaa0:			; <UNDEFINED> instruction: 0x0001abb8
   1aaa4:			; <UNDEFINED> instruction: 0x0001abb8
   1aaa8:			; <UNDEFINED> instruction: 0x0001abb8
   1aaac:			; <UNDEFINED> instruction: 0x0001abb8
   1aab0:			; <UNDEFINED> instruction: 0x0001abb8
   1aab4:	andeq	sl, r1, r4, lsr #25
   1aab8:			; <UNDEFINED> instruction: 0x0001abb8
   1aabc:			; <UNDEFINED> instruction: 0x0001abb8
   1aac0:	ldrdeq	fp, [r1], -r4
   1aac4:	mvn	r0, #0
   1aac8:	mvn	r1, #0
   1aacc:	mov	r2, r5
   1aad0:	mov	sl, r3
   1aad4:	bl	1c25c <__assert_fail@plt+0xab8c>
   1aad8:	subs	r3, r0, r6
   1aadc:	mov	lr, #0
   1aae0:	umull	r4, r2, r6, r5
   1aae4:	str	r1, [sp, #20]
   1aae8:	sbcs	r3, r1, r7
   1aaec:	mla	ip, r6, sl, r2
   1aaf0:	mov	r2, r1
   1aaf4:	movwcc	lr, #1
   1aaf8:	mla	r7, r7, r5, ip
   1aafc:	mov	r2, #0
   1ab00:	cmp	lr, #0
   1ab04:	mvnne	r4, #0
   1ab08:	mvnne	r7, #0
   1ab0c:	subs	r6, r0, r4
   1ab10:	sbcs	r6, r1, r7
   1ab14:	movwcc	r2, #1
   1ab18:	umull	r3, r6, r4, r5
   1ab1c:	cmp	r2, #0
   1ab20:	str	r6, [sp, #16]
   1ab24:	mvnne	r3, #0
   1ab28:	cmp	r2, #0
   1ab2c:	umull	r6, ip, r3, r5
   1ab30:	mla	r1, r3, sl, ip
   1ab34:	ldr	ip, [sp, #16]
   1ab38:	str	r1, [sp, #12]
   1ab3c:	mla	r4, r4, sl, ip
   1ab40:	mla	r4, r7, r5, r4
   1ab44:	ldr	r7, [sp, #12]
   1ab48:	mvnne	r4, #0
   1ab4c:	subs	r0, r0, r3
   1ab50:	ldr	r0, [sp, #20]
   1ab54:	mla	r7, r4, r5, r7
   1ab58:	sbcs	r0, r0, r4
   1ab5c:	mov	r0, #0
   1ab60:	movwcc	r0, #1
   1ab64:	cmp	r0, #0
   1ab68:	mov	r1, r0
   1ab6c:	orr	r0, lr, r2
   1ab70:	mvnne	r7, #0
   1ab74:	mvnne	r6, #0
   1ab78:	b	1b1c4 <__assert_fail@plt+0x9af4>
   1ab7c:	mov	r8, r0
   1ab80:	cmp	sl, #0
   1ab84:	bne	1a850 <__assert_fail@plt+0x9180>
   1ab88:	b	1b418 <__assert_fail@plt+0x9d48>
   1ab8c:	cmp	r0, #105	; 0x69
   1ab90:	mov	r3, #0
   1ab94:	bne	1a9d8 <__assert_fail@plt+0x9308>
   1ab98:	ldrb	r0, [r1, #2]
   1ab9c:	mov	r1, #1
   1aba0:	cmp	r0, #66	; 0x42
   1aba4:	movweq	r1, #3
   1aba8:	str	r1, [sp, #28]
   1abac:	sub	r0, r4, #66	; 0x42
   1abb0:	cmp	r0, #53	; 0x35
   1abb4:	bls	1a9e4 <__assert_fail@plt+0x9314>
   1abb8:	ldr	r0, [sp, #36]	; 0x24
   1abbc:	orr	r8, r8, #2
   1abc0:	strd	r6, [r0]
   1abc4:	mov	r0, r8
   1abc8:	sub	sp, fp, #28
   1abcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abd0:	mvn	r0, #0
   1abd4:	mvn	r1, #0
   1abd8:	mov	r2, r5
   1abdc:	mov	r4, r3
   1abe0:	bl	1c25c <__assert_fail@plt+0xab8c>
   1abe4:	subs	r0, r0, r6
   1abe8:	mov	r2, #0
   1abec:	sbcs	r0, r1, r7
   1abf0:	movwcc	r2, #1
   1abf4:	umull	r0, r1, r6, r5
   1abf8:	mla	r1, r6, r4, r1
   1abfc:	cmp	r2, #0
   1ac00:	mov	r3, r2
   1ac04:	mla	r7, r7, r5, r1
   1ac08:	mvnne	r0, #0
   1ac0c:	mvnne	r7, #0
   1ac10:	mov	r6, r0
   1ac14:	b	1b3f8 <__assert_fail@plt+0x9d28>
   1ac18:	mvn	r0, #0
   1ac1c:	mvn	r1, #0
   1ac20:	mov	r2, r5
   1ac24:	str	r3, [sp, #24]
   1ac28:	bl	1c25c <__assert_fail@plt+0xab8c>
   1ac2c:	subs	r3, r0, r6
   1ac30:	mov	ip, r0
   1ac34:	umull	r4, r0, r6, r5
   1ac38:	mov	sl, #0
   1ac3c:	sbcs	r3, r1, r7
   1ac40:	str	r0, [sp, #20]
   1ac44:	ldr	r0, [sp, #24]
   1ac48:	mov	r3, #0
   1ac4c:	movwcc	r3, #1
   1ac50:	cmp	r3, #0
   1ac54:	mvnne	r4, #0
   1ac58:	cmp	r3, #0
   1ac5c:	umull	lr, r2, r4, r5
   1ac60:	mla	r2, r4, r0, r2
   1ac64:	str	r2, [sp, #16]
   1ac68:	ldr	r2, [sp, #20]
   1ac6c:	mla	r6, r6, r0, r2
   1ac70:	ldr	r0, [sp, #16]
   1ac74:	mla	r6, r7, r5, r6
   1ac78:	mvnne	r6, #0
   1ac7c:	mla	r7, r6, r5, r0
   1ac80:	subs	r0, ip, r4
   1ac84:	sbcs	r0, r1, r6
   1ac88:	movwcc	sl, #1
   1ac8c:	cmp	sl, #0
   1ac90:	orr	r3, r3, sl
   1ac94:	mvnne	lr, #0
   1ac98:	mvnne	r7, #0
   1ac9c:	mov	r6, lr
   1aca0:	b	1b3f8 <__assert_fail@plt+0x9d28>
   1aca4:	mvn	r0, #0
   1aca8:	mvn	r1, #0
   1acac:	mov	r2, r5
   1acb0:	mov	sl, r3
   1acb4:	bl	1c25c <__assert_fail@plt+0xab8c>
   1acb8:	subs	r3, r0, r6
   1acbc:	mov	ip, r1
   1acc0:	umull	r2, lr, r6, r5
   1acc4:	str	r0, [sp, #20]
   1acc8:	sbcs	r3, r1, r7
   1accc:	mov	r1, #0
   1acd0:	mla	r6, r6, sl, lr
   1acd4:	mov	lr, #0
   1acd8:	str	ip, [sp, #16]
   1acdc:	movwcc	r1, #1
   1ace0:	mla	r7, r7, r5, r6
   1ace4:	cmp	r1, #0
   1ace8:	mvnne	r2, #0
   1acec:	cmp	r1, #0
   1acf0:	umull	r3, r4, r2, r5
   1acf4:	mvnne	r7, #0
   1acf8:	mla	r4, r2, sl, r4
   1acfc:	subs	r2, r0, r2
   1ad00:	sbcs	r2, ip, r7
   1ad04:	mla	r4, r7, r5, r4
   1ad08:	movwcc	lr, #1
   1ad0c:	mov	r2, #0
   1ad10:	cmp	lr, #0
   1ad14:	mvnne	r3, #0
   1ad18:	mvnne	r4, #0
   1ad1c:	subs	r7, r0, r3
   1ad20:	mov	r0, r5
   1ad24:	sbcs	r7, ip, r4
   1ad28:	movwcc	r2, #1
   1ad2c:	umull	r5, r7, r3, r5
   1ad30:	cmp	r2, #0
   1ad34:	mla	r3, r3, sl, r7
   1ad38:	mvnne	r5, #0
   1ad3c:	mla	r3, r4, r0, r3
   1ad40:	cmp	r2, #0
   1ad44:	umull	r6, ip, r5, r0
   1ad48:	mvnne	r3, #0
   1ad4c:	mla	ip, r5, sl, ip
   1ad50:	mla	r7, r3, r0, ip
   1ad54:	ldr	r0, [sp, #20]
   1ad58:	subs	r0, r0, r5
   1ad5c:	ldr	r0, [sp, #16]
   1ad60:	sbcs	r0, r0, r3
   1ad64:	mov	r0, #0
   1ad68:	movwcc	r0, #1
   1ad6c:	cmp	r0, #0
   1ad70:	mov	r3, r0
   1ad74:	orr	r0, r1, lr
   1ad78:	orr	r0, r0, r2
   1ad7c:	mvnne	r7, #0
   1ad80:	mvnne	r6, #0
   1ad84:	orr	r3, r0, r3
   1ad88:	b	1b3f8 <__assert_fail@plt+0x9d28>
   1ad8c:	mvn	r0, #0
   1ad90:	mvn	r1, #0
   1ad94:	mov	r2, r5
   1ad98:	mov	r4, r3
   1ad9c:	str	r3, [sp, #24]
   1ada0:	bl	1c25c <__assert_fail@plt+0xab8c>
   1ada4:	umull	r3, r2, r6, r5
   1ada8:	mla	r2, r6, r4, r2
   1adac:	subs	r6, r0, r6
   1adb0:	sbcs	r6, r1, r7
   1adb4:	mla	r2, r7, r5, r2
   1adb8:	mov	r7, #0
   1adbc:	mov	r6, #0
   1adc0:	movwcc	r6, #1
   1adc4:	cmp	r6, #0
   1adc8:	str	r6, [sp, #20]
   1adcc:	mvnne	r3, #0
   1add0:	mvnne	r2, #0
   1add4:	subs	r4, r0, r3
   1add8:	umull	r6, ip, r3, r5
   1addc:	sbcs	r4, r1, r2
   1ade0:	ldr	r4, [sp, #24]
   1ade4:	movwcc	r7, #1
   1ade8:	cmp	r7, #0
   1adec:	mov	lr, r7
   1adf0:	str	r7, [sp, #16]
   1adf4:	mvnne	r6, #0
   1adf8:	cmp	lr, #0
   1adfc:	mov	lr, #0
   1ae00:	umull	sl, r7, r6, r5
   1ae04:	mla	r3, r3, r4, ip
   1ae08:	mla	r7, r6, r4, r7
   1ae0c:	mov	r4, r0
   1ae10:	mla	r2, r2, r5, r3
   1ae14:	mvnne	r2, #0
   1ae18:	subs	r3, r0, r6
   1ae1c:	mov	r0, #0
   1ae20:	mla	r7, r2, r5, r7
   1ae24:	sbcs	r2, r1, r2
   1ae28:	mov	r3, r4
   1ae2c:	movwcc	r0, #1
   1ae30:	str	r3, [sp, #4]
   1ae34:	cmp	r0, #0
   1ae38:	str	r0, [sp, #12]
   1ae3c:	mov	r0, r1
   1ae40:	mvnne	sl, #0
   1ae44:	mvnne	r7, #0
   1ae48:	str	r0, [sp, #8]
   1ae4c:	subs	r2, r4, sl
   1ae50:	ldr	r4, [sp, #24]
   1ae54:	sbcs	r2, r1, r7
   1ae58:	movwcc	lr, #1
   1ae5c:	umull	r6, r2, sl, r5
   1ae60:	cmp	lr, #0
   1ae64:	mvnne	r6, #0
   1ae68:	mla	r2, sl, r4, r2
   1ae6c:	cmp	lr, #0
   1ae70:	umull	r1, ip, r6, r5
   1ae74:	mla	r2, r7, r5, r2
   1ae78:	mla	ip, r6, r4, ip
   1ae7c:	mvnne	r2, #0
   1ae80:	subs	r6, r3, r6
   1ae84:	mla	r7, r2, r5, ip
   1ae88:	sbcs	r2, r0, r2
   1ae8c:	mov	ip, #0
   1ae90:	movwcc	ip, #1
   1ae94:	mov	r2, #0
   1ae98:	cmp	ip, #0
   1ae9c:	mvnne	r1, #0
   1aea0:	mvnne	r7, #0
   1aea4:	subs	r6, r3, r1
   1aea8:	ldr	r3, [sp, #24]
   1aeac:	sbcs	r6, r0, r7
   1aeb0:	umull	r0, sl, r1, r5
   1aeb4:	movwcc	r2, #1
   1aeb8:	cmp	r2, #0
   1aebc:	mvnne	r0, #0
   1aec0:	mla	r1, r1, r3, sl
   1aec4:	cmp	r2, #0
   1aec8:	umull	r6, r4, r0, r5
   1aecc:	mla	r1, r7, r5, r1
   1aed0:	mla	r4, r0, r3, r4
   1aed4:	ldr	r3, [sp, #4]
   1aed8:	mvnne	r1, #0
   1aedc:	mla	r7, r1, r5, r4
   1aee0:	ldr	r5, [sp, #16]
   1aee4:	subs	r0, r3, r0
   1aee8:	ldr	r0, [sp, #8]
   1aeec:	sbcs	r0, r0, r1
   1aef0:	mov	r0, #0
   1aef4:	movwcc	r0, #1
   1aef8:	cmp	r0, #0
   1aefc:	mov	r1, r0
   1af00:	ldr	r0, [sp, #20]
   1af04:	mvnne	r7, #0
   1af08:	mvnne	r6, #0
   1af0c:	orr	r0, r0, r5
   1af10:	ldr	r5, [sp, #12]
   1af14:	orr	r0, r0, r5
   1af18:	orr	r0, r0, lr
   1af1c:	orr	r0, r0, ip
   1af20:	orr	r0, r0, r2
   1af24:	b	1b394 <__assert_fail@plt+0x9cc4>
   1af28:	mov	r1, #0
   1af2c:	lsl	r2, r7, #10
   1af30:	lsl	r0, r6, #10
   1af34:	lsr	r3, r7, #22
   1af38:	cmp	r1, r7, lsr #22
   1af3c:	orr	r2, r2, r6, lsr #22
   1af40:	mvnne	r0, #0
   1af44:	movwne	r3, #1
   1af48:	cmp	r1, r7, lsr #22
   1af4c:	b	1b3c4 <__assert_fail@plt+0x9cf4>
   1af50:	mvn	r0, #0
   1af54:	mvn	r1, #0
   1af58:	mov	r2, r5
   1af5c:	mov	sl, r3
   1af60:	bl	1c25c <__assert_fail@plt+0xab8c>
   1af64:	subs	r2, r0, r6
   1af68:	mov	ip, r0
   1af6c:	mov	r0, #0
   1af70:	sbcs	r2, r1, r7
   1af74:	movwcc	r0, #1
   1af78:	umull	r4, r2, r6, r5
   1af7c:	cmp	r0, #0
   1af80:	mla	r2, r6, sl, r2
   1af84:	str	r0, [sp, #20]
   1af88:	mvnne	r4, #0
   1af8c:	cmp	r0, #0
   1af90:	mla	r2, r7, r5, r2
   1af94:	mov	r0, #0
   1af98:	umull	lr, r3, r4, r5
   1af9c:	mvnne	r2, #0
   1afa0:	mla	r3, r4, sl, r3
   1afa4:	mla	r6, r2, r5, r3
   1afa8:	subs	r3, ip, r4
   1afac:	sbcs	r2, r1, r2
   1afb0:	mov	r3, r1
   1afb4:	movwcc	r0, #1
   1afb8:	str	r3, [sp, #8]
   1afbc:	cmp	r0, #0
   1afc0:	str	r0, [sp, #16]
   1afc4:	mov	r0, ip
   1afc8:	mvnne	lr, #0
   1afcc:	mvnne	r6, #0
   1afd0:	str	r0, [sp, #12]
   1afd4:	subs	r2, ip, lr
   1afd8:	umull	r7, r4, lr, r5
   1afdc:	sbcs	r2, r1, r6
   1afe0:	mla	r4, lr, sl, r4
   1afe4:	mov	r2, #0
   1afe8:	mla	r6, r6, r5, r4
   1afec:	mov	r4, #0
   1aff0:	movwcc	r2, #1
   1aff4:	cmp	r2, #0
   1aff8:	mvnne	r7, #0
   1affc:	cmp	r2, #0
   1b000:	umull	r1, ip, r7, r5
   1b004:	mvnne	r6, #0
   1b008:	mla	ip, r7, sl, ip
   1b00c:	subs	r7, r0, r7
   1b010:	mla	lr, r6, r5, ip
   1b014:	sbcs	r7, r3, r6
   1b018:	mov	ip, #0
   1b01c:	movwcc	ip, #1
   1b020:	cmp	ip, #0
   1b024:	mvnne	r1, #0
   1b028:	mvnne	lr, #0
   1b02c:	subs	r7, r0, r1
   1b030:	sbcs	r7, r3, lr
   1b034:	movwcc	r4, #1
   1b038:	umull	r0, r7, r1, r5
   1b03c:	cmp	r4, #0
   1b040:	mla	r1, r1, sl, r7
   1b044:	mvnne	r0, #0
   1b048:	mla	r1, lr, r5, r1
   1b04c:	cmp	r4, #0
   1b050:	umull	r6, r3, r0, r5
   1b054:	mvnne	r1, #0
   1b058:	mla	r3, r0, sl, r3
   1b05c:	mla	r7, r1, r5, r3
   1b060:	ldr	r3, [sp, #12]
   1b064:	subs	r0, r3, r0
   1b068:	ldr	r3, [sp, #16]
   1b06c:	ldr	r0, [sp, #8]
   1b070:	sbcs	r0, r0, r1
   1b074:	mov	r0, #0
   1b078:	movwcc	r0, #1
   1b07c:	cmp	r0, #0
   1b080:	mov	r1, r0
   1b084:	ldr	r0, [sp, #20]
   1b088:	mvnne	r7, #0
   1b08c:	mvnne	r6, #0
   1b090:	orr	r0, r0, r3
   1b094:	orr	r0, r0, r2
   1b098:	orr	r0, r0, ip
   1b09c:	orr	r0, r0, r4
   1b0a0:	b	1b1c4 <__assert_fail@plt+0x9af4>
   1b0a4:	mvn	r0, #0
   1b0a8:	mvn	r1, #0
   1b0ac:	mov	r2, r5
   1b0b0:	mov	sl, r3
   1b0b4:	bl	1c25c <__assert_fail@plt+0xab8c>
   1b0b8:	umull	r3, r2, r6, r5
   1b0bc:	mov	lr, r1
   1b0c0:	mov	r1, r0
   1b0c4:	mla	r2, r6, sl, r2
   1b0c8:	subs	r6, r0, r6
   1b0cc:	mov	r0, #0
   1b0d0:	sbcs	r6, lr, r7
   1b0d4:	mla	r2, r7, r5, r2
   1b0d8:	movwcc	r0, #1
   1b0dc:	cmp	r0, #0
   1b0e0:	str	r0, [sp, #20]
   1b0e4:	mov	r0, r1
   1b0e8:	mvnne	r3, #0
   1b0ec:	mvnne	r2, #0
   1b0f0:	str	r0, [sp, #16]
   1b0f4:	subs	r4, r1, r3
   1b0f8:	umull	r7, ip, r3, r5
   1b0fc:	sbcs	r4, lr, r2
   1b100:	mla	r3, r3, sl, ip
   1b104:	mov	ip, #0
   1b108:	mov	r4, #0
   1b10c:	mla	r2, r2, r5, r3
   1b110:	movwcc	r4, #1
   1b114:	cmp	r4, #0
   1b118:	mvnne	r7, #0
   1b11c:	cmp	r4, #0
   1b120:	umull	r1, r6, r7, r5
   1b124:	mvnne	r2, #0
   1b128:	mla	r6, r7, sl, r6
   1b12c:	mla	r3, r2, r5, r6
   1b130:	subs	r6, r0, r7
   1b134:	sbcs	r2, lr, r2
   1b138:	movwcc	ip, #1
   1b13c:	mov	r2, #0
   1b140:	cmp	ip, #0
   1b144:	mvnne	r1, #0
   1b148:	mvnne	r3, #0
   1b14c:	subs	r6, r0, r1
   1b150:	sbcs	r6, lr, r3
   1b154:	movwcc	r2, #1
   1b158:	umull	r0, r6, r1, r5
   1b15c:	cmp	r2, #0
   1b160:	str	r6, [sp, #12]
   1b164:	mvnne	r0, #0
   1b168:	cmp	r2, #0
   1b16c:	umull	r6, r7, r0, r5
   1b170:	mla	r7, r0, sl, r7
   1b174:	str	r7, [sp, #8]
   1b178:	ldr	r7, [sp, #12]
   1b17c:	mla	r1, r1, sl, r7
   1b180:	mla	r1, r3, r5, r1
   1b184:	ldr	r3, [sp, #8]
   1b188:	mvnne	r1, #0
   1b18c:	mla	r7, r1, r5, r3
   1b190:	ldr	r3, [sp, #16]
   1b194:	subs	r0, r3, r0
   1b198:	sbcs	r0, lr, r1
   1b19c:	mov	r0, #0
   1b1a0:	movwcc	r0, #1
   1b1a4:	cmp	r0, #0
   1b1a8:	mov	r1, r0
   1b1ac:	ldr	r0, [sp, #20]
   1b1b0:	mvnne	r7, #0
   1b1b4:	mvnne	r6, #0
   1b1b8:	orr	r0, r0, r4
   1b1bc:	orr	r0, r0, ip
   1b1c0:	orr	r0, r0, r2
   1b1c4:	orr	r3, r0, r1
   1b1c8:	b	1b3f8 <__assert_fail@plt+0x9d28>
   1b1cc:	mvn	r0, #0
   1b1d0:	mvn	r1, #0
   1b1d4:	mov	r2, r5
   1b1d8:	mov	sl, r3
   1b1dc:	bl	1c25c <__assert_fail@plt+0xab8c>
   1b1e0:	mov	ip, r1
   1b1e4:	subs	r1, r0, r6
   1b1e8:	umull	r3, lr, r6, r5
   1b1ec:	mov	r2, r5
   1b1f0:	sbcs	r1, ip, r7
   1b1f4:	mla	r6, r6, sl, lr
   1b1f8:	str	ip, [sp, #4]
   1b1fc:	mov	r1, #0
   1b200:	mla	r7, r7, r2, r6
   1b204:	movwcc	r1, #1
   1b208:	cmp	r1, #0
   1b20c:	str	r1, [sp, #20]
   1b210:	mvnne	r3, #0
   1b214:	cmp	r1, #0
   1b218:	mov	r1, r0
   1b21c:	umull	r4, r5, r3, r5
   1b220:	mvnne	r7, #0
   1b224:	mov	lr, r1
   1b228:	mla	r5, r3, sl, r5
   1b22c:	subs	r3, r0, r3
   1b230:	sbcs	r0, ip, r7
   1b234:	mla	r5, r7, r2, r5
   1b238:	mov	r0, #0
   1b23c:	movwcc	r0, #1
   1b240:	cmp	r0, #0
   1b244:	str	r0, [sp, #16]
   1b248:	mvnne	r4, #0
   1b24c:	mvnne	r5, #0
   1b250:	subs	r0, r1, r4
   1b254:	mov	r1, #0
   1b258:	sbcs	r0, ip, r5
   1b25c:	movwcc	r1, #1
   1b260:	umull	r3, r0, r4, r2
   1b264:	cmp	r1, #0
   1b268:	mla	r0, r4, sl, r0
   1b26c:	mov	r4, lr
   1b270:	str	r1, [sp, #12]
   1b274:	mvnne	r3, #0
   1b278:	mla	r0, r5, r2, r0
   1b27c:	cmp	r1, #0
   1b280:	str	r4, [sp]
   1b284:	umull	r7, r6, r3, r2
   1b288:	mvnne	r0, #0
   1b28c:	mla	r6, r3, sl, r6
   1b290:	subs	r3, lr, r3
   1b294:	mla	r5, r0, r2, r6
   1b298:	sbcs	r0, ip, r0
   1b29c:	mov	r3, #0
   1b2a0:	mov	r0, #0
   1b2a4:	movwcc	r0, #1
   1b2a8:	cmp	r0, #0
   1b2ac:	str	r0, [sp, #8]
   1b2b0:	mvnne	r7, #0
   1b2b4:	mvnne	r5, #0
   1b2b8:	subs	r0, lr, r7
   1b2bc:	sbcs	r0, ip, r5
   1b2c0:	movwcc	r3, #1
   1b2c4:	umull	r6, r0, r7, r2
   1b2c8:	cmp	r3, #0
   1b2cc:	mla	r7, r7, sl, r0
   1b2d0:	mov	r0, ip
   1b2d4:	mvnne	r6, #0
   1b2d8:	mla	r7, r5, r2, r7
   1b2dc:	cmp	r3, #0
   1b2e0:	mov	r5, #0
   1b2e4:	umull	r1, lr, r6, r2
   1b2e8:	mvnne	r7, #0
   1b2ec:	mla	lr, r6, sl, lr
   1b2f0:	subs	r6, r4, r6
   1b2f4:	mla	lr, r7, r2, lr
   1b2f8:	sbcs	r7, ip, r7
   1b2fc:	mov	ip, #0
   1b300:	movwcc	ip, #1
   1b304:	cmp	ip, #0
   1b308:	mvnne	r1, #0
   1b30c:	mvnne	lr, #0
   1b310:	subs	r7, r4, r1
   1b314:	sbcs	r7, r0, lr
   1b318:	movwcc	r5, #1
   1b31c:	umull	r0, r7, r1, r2
   1b320:	cmp	r5, #0
   1b324:	mla	r1, r1, sl, r7
   1b328:	mvnne	r0, #0
   1b32c:	mla	r1, lr, r2, r1
   1b330:	cmp	r5, #0
   1b334:	umull	r6, r4, r0, r2
   1b338:	mvnne	r1, #0
   1b33c:	mla	r4, r0, sl, r4
   1b340:	mla	r7, r1, r2, r4
   1b344:	ldr	r2, [sp]
   1b348:	subs	r0, r2, r0
   1b34c:	ldr	r2, [sp, #16]
   1b350:	ldr	r0, [sp, #4]
   1b354:	sbcs	r0, r0, r1
   1b358:	mov	r0, #0
   1b35c:	movwcc	r0, #1
   1b360:	cmp	r0, #0
   1b364:	mov	r1, r0
   1b368:	ldr	r0, [sp, #20]
   1b36c:	mvnne	r7, #0
   1b370:	mvnne	r6, #0
   1b374:	orr	r0, r0, r2
   1b378:	ldr	r2, [sp, #12]
   1b37c:	orr	r0, r0, r2
   1b380:	ldr	r2, [sp, #8]
   1b384:	orr	r0, r0, r2
   1b388:	orr	r0, r0, r3
   1b38c:	orr	r0, r0, ip
   1b390:	orr	r0, r0, r5
   1b394:	orr	r0, r0, r1
   1b398:	and	r3, r0, #1
   1b39c:	b	1b3f8 <__assert_fail@plt+0x9d28>
   1b3a0:	mov	r1, #0
   1b3a4:	lsl	r2, r7, #9
   1b3a8:	lsl	r0, r6, #9
   1b3ac:	lsr	r3, r7, #23
   1b3b0:	cmp	r1, r7, lsr #23
   1b3b4:	orr	r2, r2, r6, lsr #23
   1b3b8:	mvnne	r0, #0
   1b3bc:	movwne	r3, #1
   1b3c0:	cmp	r1, r7, lsr #23
   1b3c4:	mvnne	r2, #0
   1b3c8:	mov	r6, r0
   1b3cc:	mov	r7, r2
   1b3d0:	b	1b3f8 <__assert_fail@plt+0x9d28>
   1b3d4:	lsl	r1, r7, #1
   1b3d8:	lsl	r0, r6, #1
   1b3dc:	cmp	r7, #0
   1b3e0:	lsr	r3, r7, #31
   1b3e4:	orr	r1, r1, r6, lsr #31
   1b3e8:	mvnlt	r0, #0
   1b3ec:	mvnlt	r1, #0
   1b3f0:	mov	r6, r0
   1b3f4:	mov	r7, r1
   1b3f8:	ldr	r1, [sp, #32]
   1b3fc:	ldr	r2, [sp, #28]
   1b400:	orr	r8, r3, r8
   1b404:	add	r0, r1, r2
   1b408:	str	r0, [r9]
   1b40c:	ldrb	r0, [r1, r2]
   1b410:	cmp	r0, #0
   1b414:	orrne	r8, r8, #2
   1b418:	ldr	r0, [sp, #36]	; 0x24
   1b41c:	strd	r6, [r0]
   1b420:	mov	r0, r8
   1b424:	sub	sp, fp, #28
   1b428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b42c:	movw	r0, #58313	; 0xe3c9
   1b430:	movw	r1, #58351	; 0xe3ef
   1b434:	movw	r3, #58367	; 0xe3ff
   1b438:	mov	r2, #85	; 0x55
   1b43c:	movt	r0, #1
   1b440:	movt	r1, #1
   1b444:	movt	r3, #1
   1b448:	bl	116d0 <__assert_fail@plt>
   1b44c:	push	{fp, lr}
   1b450:	mov	fp, sp
   1b454:	sub	sp, sp, #8
   1b458:	mov	r2, r0
   1b45c:	mov	ip, r1
   1b460:	mov	r0, #0
   1b464:	mov	r1, r2
   1b468:	ldrb	r3, [r1, r0, lsl #1]!
   1b46c:	cmp	r3, #37	; 0x25
   1b470:	beq	1b4a0 <__assert_fail@plt+0x9dd0>
   1b474:	cmp	r3, #0
   1b478:	bne	1b4ac <__assert_fail@plt+0x9ddc>
   1b47c:	mov	r1, ip
   1b480:	bl	1b4f0 <__assert_fail@plt+0x9e20>
   1b484:	mov	sp, fp
   1b488:	pop	{fp, pc}
   1b48c:	add	r0, r0, #1
   1b490:	mov	r1, r2
   1b494:	ldrb	r3, [r1, r0, lsl #1]!
   1b498:	cmp	r3, #37	; 0x25
   1b49c:	bne	1b474 <__assert_fail@plt+0x9da4>
   1b4a0:	ldrb	r1, [r1, #1]
   1b4a4:	cmp	r1, #115	; 0x73
   1b4a8:	beq	1b48c <__assert_fail@plt+0x9dbc>
   1b4ac:	add	r0, sp, #4
   1b4b0:	mov	r1, #1
   1b4b4:	mov	r3, ip
   1b4b8:	bl	115bc <__vasprintf_chk@plt>
   1b4bc:	cmn	r0, #1
   1b4c0:	ble	1b4d0 <__assert_fail@plt+0x9e00>
   1b4c4:	ldr	r0, [sp, #4]
   1b4c8:	mov	sp, fp
   1b4cc:	pop	{fp, pc}
   1b4d0:	bl	11598 <__errno_location@plt>
   1b4d4:	ldr	r1, [r0]
   1b4d8:	mov	r0, #0
   1b4dc:	cmp	r1, #12
   1b4e0:	beq	1b4ec <__assert_fail@plt+0x9e1c>
   1b4e4:	mov	sp, fp
   1b4e8:	pop	{fp, pc}
   1b4ec:	bl	1a754 <__assert_fail@plt+0x9084>
   1b4f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b4f4:	add	fp, sp, #24
   1b4f8:	sub	sp, sp, #8
   1b4fc:	str	r1, [sp, #4]
   1b500:	mov	r4, r0
   1b504:	ldr	r0, [sp, #4]
   1b508:	cmp	r4, #0
   1b50c:	str	r0, [sp]
   1b510:	beq	1b5a0 <__assert_fail@plt+0x9ed0>
   1b514:	ldr	r0, [sp]
   1b518:	mov	r5, #0
   1b51c:	mov	r7, r4
   1b520:	add	r6, r0, #4
   1b524:	str	r6, [sp]
   1b528:	ldr	r0, [r6, #-4]
   1b52c:	bl	11574 <strlen@plt>
   1b530:	adds	r5, r0, r5
   1b534:	add	r6, r6, #4
   1b538:	mvncs	r5, #0
   1b53c:	subs	r7, r7, #1
   1b540:	bne	1b524 <__assert_fail@plt+0x9e54>
   1b544:	cmn	r5, #1
   1b548:	ble	1b5c4 <__assert_fail@plt+0x9ef4>
   1b54c:	add	r0, r5, #1
   1b550:	bl	1a1f4 <__assert_fail@plt+0x8b24>
   1b554:	mov	r8, r0
   1b558:	mov	r6, r0
   1b55c:	cmp	r4, #0
   1b560:	beq	1b5b0 <__assert_fail@plt+0x9ee0>
   1b564:	ldr	r0, [sp, #4]
   1b568:	add	r1, r0, #4
   1b56c:	str	r1, [sp, #4]
   1b570:	ldr	r7, [r0]
   1b574:	mov	r0, r7
   1b578:	bl	11574 <strlen@plt>
   1b57c:	mov	r5, r0
   1b580:	mov	r0, r6
   1b584:	mov	r1, r7
   1b588:	mov	r2, r5
   1b58c:	bl	113f4 <memcpy@plt>
   1b590:	add	r6, r6, r5
   1b594:	subs	r4, r4, #1
   1b598:	bne	1b564 <__assert_fail@plt+0x9e94>
   1b59c:	b	1b5b0 <__assert_fail@plt+0x9ee0>
   1b5a0:	mov	r0, #1
   1b5a4:	bl	1a1f4 <__assert_fail@plt+0x8b24>
   1b5a8:	mov	r8, r0
   1b5ac:	mov	r6, r0
   1b5b0:	mov	r0, #0
   1b5b4:	strb	r0, [r6]
   1b5b8:	mov	r0, r8
   1b5bc:	sub	sp, fp, #24
   1b5c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b5c4:	bl	11598 <__errno_location@plt>
   1b5c8:	mov	r1, #75	; 0x4b
   1b5cc:	mov	r8, #0
   1b5d0:	str	r1, [r0]
   1b5d4:	mov	r0, r8
   1b5d8:	sub	sp, fp, #24
   1b5dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b5e0:	clz	r2, r1
   1b5e4:	clz	r3, r0
   1b5e8:	lsr	r2, r2, #5
   1b5ec:	lsr	r3, r3, #5
   1b5f0:	orrs	r2, r3, r2
   1b5f4:	movwne	r1, #1
   1b5f8:	movwne	r0, #1
   1b5fc:	cmp	r1, #0
   1b600:	beq	1b630 <__assert_fail@plt+0x9f60>
   1b604:	mvn	r2, #-2147483648	; 0x80000000
   1b608:	udiv	r2, r2, r1
   1b60c:	cmp	r2, r0
   1b610:	bcs	1b630 <__assert_fail@plt+0x9f60>
   1b614:	push	{fp, lr}
   1b618:	mov	fp, sp
   1b61c:	bl	11598 <__errno_location@plt>
   1b620:	mov	r1, #12
   1b624:	str	r1, [r0]
   1b628:	mov	r0, #0
   1b62c:	pop	{fp, pc}
   1b630:	b	11358 <calloc@plt>
   1b634:	cmp	r0, #0
   1b638:	movweq	r0, #1
   1b63c:	cmn	r0, #1
   1b640:	ble	1b648 <__assert_fail@plt+0x9f78>
   1b644:	b	114f0 <malloc@plt>
   1b648:	push	{fp, lr}
   1b64c:	mov	fp, sp
   1b650:	bl	11598 <__errno_location@plt>
   1b654:	mov	r1, #12
   1b658:	str	r1, [r0]
   1b65c:	mov	r0, #0
   1b660:	pop	{fp, pc}
   1b664:	push	{fp, lr}
   1b668:	mov	fp, sp
   1b66c:	cmp	r0, #0
   1b670:	beq	1b68c <__assert_fail@plt+0x9fbc>
   1b674:	cmp	r1, #0
   1b678:	beq	1b698 <__assert_fail@plt+0x9fc8>
   1b67c:	cmn	r1, #1
   1b680:	ble	1b6a4 <__assert_fail@plt+0x9fd4>
   1b684:	pop	{fp, lr}
   1b688:	b	11448 <realloc@plt>
   1b68c:	mov	r0, r1
   1b690:	pop	{fp, lr}
   1b694:	b	1b634 <__assert_fail@plt+0x9f64>
   1b698:	bl	1bbc4 <__assert_fail@plt+0xa4f4>
   1b69c:	mov	r0, #0
   1b6a0:	pop	{fp, pc}
   1b6a4:	bl	11598 <__errno_location@plt>
   1b6a8:	mov	r1, #12
   1b6ac:	str	r1, [r0]
   1b6b0:	mov	r0, #0
   1b6b4:	pop	{fp, pc}
   1b6b8:	mov	r0, #1
   1b6bc:	b	117d0 <__assert_fail@plt+0x100>
   1b6c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6c4:	add	fp, sp, #28
   1b6c8:	sub	sp, sp, #12
   1b6cc:	mov	r4, r3
   1b6d0:	mov	r9, r2
   1b6d4:	mov	r7, r1
   1b6d8:	mov	r8, r0
   1b6dc:	bl	11574 <strlen@plt>
   1b6e0:	ldr	r6, [r7]
   1b6e4:	cmp	r6, #0
   1b6e8:	beq	1b794 <__assert_fail@plt+0xa0c4>
   1b6ec:	mov	r5, r0
   1b6f0:	cmp	r9, #0
   1b6f4:	beq	1b7a4 <__assert_fail@plt+0xa0d4>
   1b6f8:	add	r0, r7, #4
   1b6fc:	mvn	sl, #0
   1b700:	mov	r7, #0
   1b704:	str	r9, [sp]
   1b708:	str	r0, [sp, #8]
   1b70c:	mov	r0, #0
   1b710:	str	r0, [sp, #4]
   1b714:	mov	r0, r9
   1b718:	mov	r0, r6
   1b71c:	mov	r1, r8
   1b720:	mov	r2, r5
   1b724:	bl	11688 <strncmp@plt>
   1b728:	cmp	r0, #0
   1b72c:	bne	1b778 <__assert_fail@plt+0xa0a8>
   1b730:	mov	r0, r6
   1b734:	bl	11574 <strlen@plt>
   1b738:	cmp	r0, r5
   1b73c:	beq	1b798 <__assert_fail@plt+0xa0c8>
   1b740:	cmn	sl, #1
   1b744:	beq	1b774 <__assert_fail@plt+0xa0a4>
   1b748:	ldr	r0, [sp]
   1b74c:	mov	r1, r9
   1b750:	mov	r2, r4
   1b754:	mla	r0, sl, r4, r0
   1b758:	bl	11424 <memcmp@plt>
   1b75c:	ldr	r1, [sp, #4]
   1b760:	cmp	r0, #0
   1b764:	movwne	r0, #1
   1b768:	orr	r1, r1, r0
   1b76c:	str	r1, [sp, #4]
   1b770:	b	1b778 <__assert_fail@plt+0xa0a8>
   1b774:	mov	sl, r7
   1b778:	ldr	r0, [sp, #8]
   1b77c:	add	r9, r9, r4
   1b780:	ldr	r6, [r0, r7, lsl #2]
   1b784:	add	r7, r7, #1
   1b788:	cmp	r6, #0
   1b78c:	bne	1b718 <__assert_fail@plt+0xa048>
   1b790:	b	1b80c <__assert_fail@plt+0xa13c>
   1b794:	mvn	r7, #0
   1b798:	mov	r0, r7
   1b79c:	sub	sp, fp, #28
   1b7a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7a4:	add	r4, r7, #4
   1b7a8:	mov	r0, #0
   1b7ac:	mvn	sl, #0
   1b7b0:	mov	r7, #0
   1b7b4:	str	r0, [sp, #4]
   1b7b8:	mov	r0, r6
   1b7bc:	mov	r1, r8
   1b7c0:	mov	r2, r5
   1b7c4:	bl	11688 <strncmp@plt>
   1b7c8:	cmp	r0, #0
   1b7cc:	bne	1b7fc <__assert_fail@plt+0xa12c>
   1b7d0:	mov	r0, r6
   1b7d4:	bl	11574 <strlen@plt>
   1b7d8:	cmp	r0, r5
   1b7dc:	beq	1b798 <__assert_fail@plt+0xa0c8>
   1b7e0:	ldr	r1, [sp, #4]
   1b7e4:	cmn	sl, #1
   1b7e8:	add	r0, sl, #1
   1b7ec:	movwne	r0, #1
   1b7f0:	moveq	sl, r7
   1b7f4:	orr	r1, r1, r0
   1b7f8:	str	r1, [sp, #4]
   1b7fc:	ldr	r6, [r4, r7, lsl #2]
   1b800:	add	r7, r7, #1
   1b804:	cmp	r6, #0
   1b808:	bne	1b7b8 <__assert_fail@plt+0xa0e8>
   1b80c:	ldr	r0, [sp, #4]
   1b810:	tst	r0, #1
   1b814:	mvnne	sl, #1
   1b818:	mov	r0, sl
   1b81c:	sub	sp, fp, #28
   1b820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b824:	push	{r4, r5, r6, r7, fp, lr}
   1b828:	add	fp, sp, #16
   1b82c:	mov	r5, r0
   1b830:	ldr	r0, [r1]
   1b834:	mvn	r4, #0
   1b838:	cmp	r0, #0
   1b83c:	beq	1b86c <__assert_fail@plt+0xa19c>
   1b840:	add	r7, r1, #4
   1b844:	mov	r6, #0
   1b848:	mov	r1, r5
   1b84c:	bl	11388 <strcmp@plt>
   1b850:	cmp	r0, #0
   1b854:	moveq	r0, r6
   1b858:	popeq	{r4, r5, r6, r7, fp, pc}
   1b85c:	ldr	r0, [r7, r6, lsl #2]
   1b860:	add	r6, r6, #1
   1b864:	cmp	r0, #0
   1b868:	bne	1b848 <__assert_fail@plt+0xa178>
   1b86c:	mov	r0, r4
   1b870:	pop	{r4, r5, r6, r7, fp, pc}
   1b874:	push	{r4, r5, r6, sl, fp, lr}
   1b878:	add	fp, sp, #16
   1b87c:	sub	sp, sp, #8
   1b880:	mov	r4, r1
   1b884:	movw	r1, #58473	; 0xe469
   1b888:	mov	r5, r0
   1b88c:	movw	r0, #58446	; 0xe44e
   1b890:	cmn	r2, #1
   1b894:	mov	r2, #5
   1b898:	movt	r0, #1
   1b89c:	movt	r1, #1
   1b8a0:	moveq	r1, r0
   1b8a4:	mov	r0, #0
   1b8a8:	bl	11430 <dcgettext@plt>
   1b8ac:	mov	r6, r0
   1b8b0:	mov	r0, #0
   1b8b4:	mov	r1, #8
   1b8b8:	mov	r2, r4
   1b8bc:	bl	1940c <__assert_fail@plt+0x7d3c>
   1b8c0:	mov	r4, r0
   1b8c4:	mov	r0, #1
   1b8c8:	mov	r1, r5
   1b8cc:	bl	199cc <__assert_fail@plt+0x82fc>
   1b8d0:	str	r0, [sp]
   1b8d4:	mov	r0, #0
   1b8d8:	mov	r1, #0
   1b8dc:	mov	r2, r6
   1b8e0:	mov	r3, r4
   1b8e4:	bl	114cc <error@plt>
   1b8e8:	sub	sp, fp, #16
   1b8ec:	pop	{r4, r5, r6, sl, fp, pc}
   1b8f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8f4:	add	fp, sp, #28
   1b8f8:	sub	sp, sp, #4
   1b8fc:	mov	r5, r1
   1b900:	movw	r1, #58502	; 0xe486
   1b904:	mov	sl, r2
   1b908:	mov	r7, r0
   1b90c:	mov	r0, #0
   1b910:	mov	r2, #5
   1b914:	mov	r8, #0
   1b918:	movt	r1, #1
   1b91c:	bl	11430 <dcgettext@plt>
   1b920:	movw	r4, #61904	; 0xf1d0
   1b924:	movt	r4, #2
   1b928:	ldr	r1, [r4]
   1b92c:	bl	11364 <fputs_unlocked@plt>
   1b930:	ldr	r6, [r7]
   1b934:	cmp	r6, #0
   1b938:	beq	1b9d8 <__assert_fail@plt+0xa308>
   1b93c:	add	r9, r7, #4
   1b940:	mov	r7, #0
   1b944:	str	sl, [sp]
   1b948:	cmp	r8, #0
   1b94c:	beq	1b968 <__assert_fail@plt+0xa298>
   1b950:	mov	r0, r7
   1b954:	mov	r1, r5
   1b958:	mov	r2, sl
   1b95c:	bl	11424 <memcmp@plt>
   1b960:	cmp	r0, #0
   1b964:	beq	1b994 <__assert_fail@plt+0xa2c4>
   1b968:	ldr	r7, [r4]
   1b96c:	mov	r0, r6
   1b970:	bl	199dc <__assert_fail@plt+0x830c>
   1b974:	movw	r2, #58523	; 0xe49b
   1b978:	mov	r3, r0
   1b97c:	mov	r0, r7
   1b980:	mov	r1, #1
   1b984:	movt	r2, #1
   1b988:	bl	115f8 <__fprintf_chk@plt>
   1b98c:	mov	r7, r5
   1b990:	b	1b9c4 <__assert_fail@plt+0xa2f4>
   1b994:	mov	sl, r9
   1b998:	ldr	r9, [r4]
   1b99c:	mov	r0, r6
   1b9a0:	bl	199dc <__assert_fail@plt+0x830c>
   1b9a4:	mov	r3, r0
   1b9a8:	mov	r0, r9
   1b9ac:	mov	r9, sl
   1b9b0:	ldr	sl, [sp]
   1b9b4:	movw	r2, #55110	; 0xd746
   1b9b8:	mov	r1, #1
   1b9bc:	movt	r2, #1
   1b9c0:	bl	115f8 <__fprintf_chk@plt>
   1b9c4:	ldr	r6, [r9, -r8, lsl #2]
   1b9c8:	add	r5, r5, sl
   1b9cc:	sub	r8, r8, #1
   1b9d0:	cmp	r6, #0
   1b9d4:	bne	1b948 <__assert_fail@plt+0xa278>
   1b9d8:	ldr	r0, [r4]
   1b9dc:	ldr	r1, [r0, #20]
   1b9e0:	ldr	r2, [r0, #24]
   1b9e4:	cmp	r1, r2
   1b9e8:	addcc	r2, r1, #1
   1b9ec:	strcc	r2, [r0, #20]
   1b9f0:	movcc	r0, #10
   1b9f4:	strbcc	r0, [r1]
   1b9f8:	subcc	sp, fp, #28
   1b9fc:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba00:	mov	r1, #10
   1ba04:	sub	sp, fp, #28
   1ba08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba0c:	b	11628 <__overflow@plt>
   1ba10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba14:	add	fp, sp, #28
   1ba18:	sub	sp, sp, #12
   1ba1c:	mov	sl, r0
   1ba20:	ldr	r0, [fp, #16]
   1ba24:	ldr	r9, [fp, #8]
   1ba28:	mov	r5, r3
   1ba2c:	mov	r8, r2
   1ba30:	mov	r6, r1
   1ba34:	cmp	r0, #0
   1ba38:	beq	1ba68 <__assert_fail@plt+0xa398>
   1ba3c:	mov	r0, r6
   1ba40:	mov	r1, r8
   1ba44:	mov	r2, r5
   1ba48:	mov	r3, r9
   1ba4c:	bl	1b6c0 <__assert_fail@plt+0x9ff0>
   1ba50:	mov	r4, r0
   1ba54:	cmn	r4, #1
   1ba58:	ble	1bab8 <__assert_fail@plt+0xa3e8>
   1ba5c:	mov	r0, r4
   1ba60:	sub	sp, fp, #28
   1ba64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba68:	ldr	r0, [r8]
   1ba6c:	movw	r7, #58446	; 0xe44e
   1ba70:	str	r5, [sp, #8]
   1ba74:	movt	r7, #1
   1ba78:	cmp	r0, #0
   1ba7c:	beq	1bad0 <__assert_fail@plt+0xa400>
   1ba80:	add	r5, r8, #4
   1ba84:	mov	r4, #0
   1ba88:	mov	r1, r6
   1ba8c:	bl	11388 <strcmp@plt>
   1ba90:	cmp	r0, #0
   1ba94:	beq	1baac <__assert_fail@plt+0xa3dc>
   1ba98:	ldr	r0, [r5, r4, lsl #2]
   1ba9c:	add	r4, r4, #1
   1baa0:	cmp	r0, #0
   1baa4:	bne	1ba88 <__assert_fail@plt+0xa3b8>
   1baa8:	b	1bad0 <__assert_fail@plt+0xa400>
   1baac:	ldr	r5, [sp, #8]
   1bab0:	cmn	r4, #1
   1bab4:	bgt	1ba5c <__assert_fail@plt+0xa38c>
   1bab8:	movw	r0, #58446	; 0xe44e
   1babc:	movw	r7, #58473	; 0xe469
   1bac0:	str	r5, [sp, #8]
   1bac4:	movt	r0, #1
   1bac8:	movt	r7, #1
   1bacc:	moveq	r7, r0
   1bad0:	ldr	r5, [fp, #12]
   1bad4:	mov	r0, #0
   1bad8:	mov	r1, r7
   1badc:	mov	r2, #5
   1bae0:	bl	11430 <dcgettext@plt>
   1bae4:	mov	r4, r0
   1bae8:	mov	r0, #0
   1baec:	mov	r1, #8
   1baf0:	mov	r2, r6
   1baf4:	bl	1940c <__assert_fail@plt+0x7d3c>
   1baf8:	mov	r6, r0
   1bafc:	mov	r0, #1
   1bb00:	mov	r1, sl
   1bb04:	bl	199cc <__assert_fail@plt+0x82fc>
   1bb08:	str	r0, [sp]
   1bb0c:	mov	r0, #0
   1bb10:	mov	r1, #0
   1bb14:	mov	r2, r4
   1bb18:	mov	r3, r6
   1bb1c:	bl	114cc <error@plt>
   1bb20:	ldr	r1, [sp, #8]
   1bb24:	mov	r0, r8
   1bb28:	mov	r2, r9
   1bb2c:	bl	1b8f0 <__assert_fail@plt+0xa220>
   1bb30:	blx	r5
   1bb34:	mvn	r4, #0
   1bb38:	mov	r0, r4
   1bb3c:	sub	sp, fp, #28
   1bb40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bb48:	add	fp, sp, #24
   1bb4c:	ldr	r6, [r1]
   1bb50:	cmp	r6, #0
   1bb54:	beq	1bbb8 <__assert_fail@plt+0xa4e8>
   1bb58:	mov	r8, r1
   1bb5c:	mov	r7, r2
   1bb60:	mov	r1, r2
   1bb64:	mov	r2, r3
   1bb68:	mov	r4, r3
   1bb6c:	mov	r9, r0
   1bb70:	bl	11424 <memcmp@plt>
   1bb74:	cmp	r0, #0
   1bb78:	beq	1bbb0 <__assert_fail@plt+0xa4e0>
   1bb7c:	add	r7, r7, r4
   1bb80:	add	r5, r8, #4
   1bb84:	ldr	r6, [r5]
   1bb88:	cmp	r6, #0
   1bb8c:	beq	1bbb8 <__assert_fail@plt+0xa4e8>
   1bb90:	mov	r0, r9
   1bb94:	mov	r1, r7
   1bb98:	mov	r2, r4
   1bb9c:	bl	11424 <memcmp@plt>
   1bba0:	add	r7, r7, r4
   1bba4:	add	r5, r5, #4
   1bba8:	cmp	r0, #0
   1bbac:	bne	1bb84 <__assert_fail@plt+0xa4b4>
   1bbb0:	mov	r0, r6
   1bbb4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bbb8:	mov	r6, #0
   1bbbc:	mov	r0, r6
   1bbc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bbc4:	push	{r4, r5, r6, sl, fp, lr}
   1bbc8:	add	fp, sp, #16
   1bbcc:	mov	r4, r0
   1bbd0:	bl	11598 <__errno_location@plt>
   1bbd4:	ldr	r6, [r0]
   1bbd8:	mov	r5, r0
   1bbdc:	mov	r0, r4
   1bbe0:	bl	113d0 <free@plt>
   1bbe4:	str	r6, [r5]
   1bbe8:	pop	{r4, r5, r6, sl, fp, pc}
   1bbec:	push	{fp, lr}
   1bbf0:	mov	fp, sp
   1bbf4:	mov	r0, #14
   1bbf8:	bl	11658 <nl_langinfo@plt>
   1bbfc:	movw	r1, #51789	; 0xca4d
   1bc00:	cmp	r0, #0
   1bc04:	movt	r1, #1
   1bc08:	movne	r1, r0
   1bc0c:	movw	r0, #58531	; 0xe4a3
   1bc10:	ldrb	r2, [r1]
   1bc14:	movt	r0, #1
   1bc18:	cmp	r2, #0
   1bc1c:	movne	r0, r1
   1bc20:	pop	{fp, pc}
   1bc24:	push	{r4, r5, r6, r7, fp, lr}
   1bc28:	add	fp, sp, #16
   1bc2c:	sub	sp, sp, #8
   1bc30:	add	r5, sp, #4
   1bc34:	cmp	r0, #0
   1bc38:	mov	r7, r2
   1bc3c:	mov	r4, r1
   1bc40:	movne	r5, r0
   1bc44:	mov	r0, r5
   1bc48:	bl	114c0 <mbrtowc@plt>
   1bc4c:	mov	r6, r0
   1bc50:	cmp	r7, #0
   1bc54:	beq	1bc78 <__assert_fail@plt+0xa5a8>
   1bc58:	cmn	r6, #2
   1bc5c:	bcc	1bc78 <__assert_fail@plt+0xa5a8>
   1bc60:	mov	r0, #0
   1bc64:	bl	1bcc0 <__assert_fail@plt+0xa5f0>
   1bc68:	cmp	r0, #0
   1bc6c:	ldrbeq	r0, [r4]
   1bc70:	moveq	r6, #1
   1bc74:	streq	r0, [r5]
   1bc78:	mov	r0, r6
   1bc7c:	sub	sp, fp, #16
   1bc80:	pop	{r4, r5, r6, r7, fp, pc}
   1bc84:	cmp	r2, #0
   1bc88:	beq	1bcb8 <__assert_fail@plt+0xa5e8>
   1bc8c:	mvn	r3, #0
   1bc90:	udiv	r3, r3, r2
   1bc94:	cmp	r3, r1
   1bc98:	bcs	1bcb8 <__assert_fail@plt+0xa5e8>
   1bc9c:	push	{fp, lr}
   1bca0:	mov	fp, sp
   1bca4:	bl	11598 <__errno_location@plt>
   1bca8:	mov	r1, #12
   1bcac:	str	r1, [r0]
   1bcb0:	mov	r0, #0
   1bcb4:	pop	{fp, pc}
   1bcb8:	mul	r1, r2, r1
   1bcbc:	b	1b664 <__assert_fail@plt+0x9f94>
   1bcc0:	push	{r4, sl, fp, lr}
   1bcc4:	add	fp, sp, #8
   1bcc8:	sub	sp, sp, #264	; 0x108
   1bccc:	add	r1, sp, #7
   1bcd0:	movw	r2, #257	; 0x101
   1bcd4:	bl	1bd24 <__assert_fail@plt+0xa654>
   1bcd8:	mov	r4, #0
   1bcdc:	cmp	r0, #0
   1bce0:	bne	1bd18 <__assert_fail@plt+0xa648>
   1bce4:	movw	r1, #58537	; 0xe4a9
   1bce8:	add	r0, sp, #7
   1bcec:	movt	r1, #1
   1bcf0:	bl	11388 <strcmp@plt>
   1bcf4:	cmp	r0, #0
   1bcf8:	beq	1bd18 <__assert_fail@plt+0xa648>
   1bcfc:	movw	r1, #58539	; 0xe4ab
   1bd00:	add	r0, sp, #7
   1bd04:	movt	r1, #1
   1bd08:	bl	11388 <strcmp@plt>
   1bd0c:	mov	r4, r0
   1bd10:	cmp	r0, #0
   1bd14:	movwne	r4, #1
   1bd18:	mov	r0, r4
   1bd1c:	sub	sp, fp, #8
   1bd20:	pop	{r4, sl, fp, pc}
   1bd24:	push	{r4, r5, r6, r7, fp, lr}
   1bd28:	add	fp, sp, #16
   1bd2c:	mov	r4, r1
   1bd30:	mov	r1, #0
   1bd34:	mov	r6, r2
   1bd38:	bl	11634 <setlocale@plt>
   1bd3c:	cmp	r0, #0
   1bd40:	beq	1bd70 <__assert_fail@plt+0xa6a0>
   1bd44:	mov	r7, r0
   1bd48:	bl	11574 <strlen@plt>
   1bd4c:	cmp	r0, r6
   1bd50:	bcs	1bd90 <__assert_fail@plt+0xa6c0>
   1bd54:	add	r2, r0, #1
   1bd58:	mov	r0, r4
   1bd5c:	mov	r1, r7
   1bd60:	bl	113f4 <memcpy@plt>
   1bd64:	mov	r5, #0
   1bd68:	mov	r0, r5
   1bd6c:	pop	{r4, r5, r6, r7, fp, pc}
   1bd70:	cmp	r6, #0
   1bd74:	mov	r5, #22
   1bd78:	movne	r0, #0
   1bd7c:	strbne	r0, [r4]
   1bd80:	movne	r0, r5
   1bd84:	popne	{r4, r5, r6, r7, fp, pc}
   1bd88:	mov	r0, r5
   1bd8c:	pop	{r4, r5, r6, r7, fp, pc}
   1bd90:	mov	r5, #34	; 0x22
   1bd94:	cmp	r6, #0
   1bd98:	beq	1bdb8 <__assert_fail@plt+0xa6e8>
   1bd9c:	sub	r6, r6, #1
   1bda0:	mov	r0, r4
   1bda4:	mov	r1, r7
   1bda8:	mov	r2, r6
   1bdac:	bl	113f4 <memcpy@plt>
   1bdb0:	mov	r0, #0
   1bdb4:	strb	r0, [r4, r6]
   1bdb8:	mov	r0, r5
   1bdbc:	pop	{r4, r5, r6, r7, fp, pc}
   1bdc0:	mov	r1, #0
   1bdc4:	b	11634 <setlocale@plt>
   1bdc8:	eor	r1, r1, #-2147483648	; 0x80000000
   1bdcc:	b	1bdd4 <__assert_fail@plt+0xa704>
   1bdd0:	eor	r3, r3, #-2147483648	; 0x80000000
   1bdd4:	push	{r4, r5, lr}
   1bdd8:	lsl	r4, r1, #1
   1bddc:	lsl	r5, r3, #1
   1bde0:	teq	r4, r5
   1bde4:	teqeq	r0, r2
   1bde8:	orrsne	ip, r4, r0
   1bdec:	orrsne	ip, r5, r2
   1bdf0:	mvnsne	ip, r4, asr #21
   1bdf4:	mvnsne	ip, r5, asr #21
   1bdf8:	beq	1bfe4 <__assert_fail@plt+0xa914>
   1bdfc:	lsr	r4, r4, #21
   1be00:	rsbs	r5, r4, r5, lsr #21
   1be04:	rsblt	r5, r5, #0
   1be08:	ble	1be28 <__assert_fail@plt+0xa758>
   1be0c:	add	r4, r4, r5
   1be10:	eor	r2, r0, r2
   1be14:	eor	r3, r1, r3
   1be18:	eor	r0, r2, r0
   1be1c:	eor	r1, r3, r1
   1be20:	eor	r2, r0, r2
   1be24:	eor	r3, r1, r3
   1be28:	cmp	r5, #54	; 0x36
   1be2c:	pophi	{r4, r5, pc}
   1be30:	tst	r1, #-2147483648	; 0x80000000
   1be34:	lsl	r1, r1, #12
   1be38:	mov	ip, #1048576	; 0x100000
   1be3c:	orr	r1, ip, r1, lsr #12
   1be40:	beq	1be4c <__assert_fail@plt+0xa77c>
   1be44:	rsbs	r0, r0, #0
   1be48:	rsc	r1, r1, #0
   1be4c:	tst	r3, #-2147483648	; 0x80000000
   1be50:	lsl	r3, r3, #12
   1be54:	orr	r3, ip, r3, lsr #12
   1be58:	beq	1be64 <__assert_fail@plt+0xa794>
   1be5c:	rsbs	r2, r2, #0
   1be60:	rsc	r3, r3, #0
   1be64:	teq	r4, r5
   1be68:	beq	1bfcc <__assert_fail@plt+0xa8fc>
   1be6c:	sub	r4, r4, #1
   1be70:	rsbs	lr, r5, #32
   1be74:	blt	1be90 <__assert_fail@plt+0xa7c0>
   1be78:	lsl	ip, r2, lr
   1be7c:	adds	r0, r0, r2, lsr r5
   1be80:	adc	r1, r1, #0
   1be84:	adds	r0, r0, r3, lsl lr
   1be88:	adcs	r1, r1, r3, asr r5
   1be8c:	b	1beac <__assert_fail@plt+0xa7dc>
   1be90:	sub	r5, r5, #32
   1be94:	add	lr, lr, #32
   1be98:	cmp	r2, #1
   1be9c:	lsl	ip, r3, lr
   1bea0:	orrcs	ip, ip, #2
   1bea4:	adds	r0, r0, r3, asr r5
   1bea8:	adcs	r1, r1, r3, asr #31
   1beac:	and	r5, r1, #-2147483648	; 0x80000000
   1beb0:	bpl	1bec0 <__assert_fail@plt+0xa7f0>
   1beb4:	rsbs	ip, ip, #0
   1beb8:	rscs	r0, r0, #0
   1bebc:	rsc	r1, r1, #0
   1bec0:	cmp	r1, #1048576	; 0x100000
   1bec4:	bcc	1bf04 <__assert_fail@plt+0xa834>
   1bec8:	cmp	r1, #2097152	; 0x200000
   1becc:	bcc	1beec <__assert_fail@plt+0xa81c>
   1bed0:	lsrs	r1, r1, #1
   1bed4:	rrxs	r0, r0
   1bed8:	rrx	ip, ip
   1bedc:	add	r4, r4, #1
   1bee0:	lsl	r2, r4, #21
   1bee4:	cmn	r2, #4194304	; 0x400000
   1bee8:	bcs	1c044 <__assert_fail@plt+0xa974>
   1beec:	cmp	ip, #-2147483648	; 0x80000000
   1bef0:	lsrseq	ip, r0, #1
   1bef4:	adcs	r0, r0, #0
   1bef8:	adc	r1, r1, r4, lsl #20
   1befc:	orr	r1, r1, r5
   1bf00:	pop	{r4, r5, pc}
   1bf04:	lsls	ip, ip, #1
   1bf08:	adcs	r0, r0, r0
   1bf0c:	adc	r1, r1, r1
   1bf10:	tst	r1, #1048576	; 0x100000
   1bf14:	sub	r4, r4, #1
   1bf18:	bne	1beec <__assert_fail@plt+0xa81c>
   1bf1c:	teq	r1, #0
   1bf20:	moveq	r1, r0
   1bf24:	moveq	r0, #0
   1bf28:	clz	r3, r1
   1bf2c:	addeq	r3, r3, #32
   1bf30:	sub	r3, r3, #11
   1bf34:	subs	r2, r3, #32
   1bf38:	bge	1bf5c <__assert_fail@plt+0xa88c>
   1bf3c:	adds	r2, r2, #12
   1bf40:	ble	1bf58 <__assert_fail@plt+0xa888>
   1bf44:	add	ip, r2, #20
   1bf48:	rsb	r2, r2, #12
   1bf4c:	lsl	r0, r1, ip
   1bf50:	lsr	r1, r1, r2
   1bf54:	b	1bf6c <__assert_fail@plt+0xa89c>
   1bf58:	add	r2, r2, #20
   1bf5c:	rsble	ip, r2, #32
   1bf60:	lsl	r1, r1, r2
   1bf64:	orrle	r1, r1, r0, lsr ip
   1bf68:	lslle	r0, r0, r2
   1bf6c:	subs	r4, r4, r3
   1bf70:	addge	r1, r1, r4, lsl #20
   1bf74:	orrge	r1, r1, r5
   1bf78:	popge	{r4, r5, pc}
   1bf7c:	mvn	r4, r4
   1bf80:	subs	r4, r4, #31
   1bf84:	bge	1bfc0 <__assert_fail@plt+0xa8f0>
   1bf88:	adds	r4, r4, #12
   1bf8c:	bgt	1bfa8 <__assert_fail@plt+0xa8d8>
   1bf90:	add	r4, r4, #20
   1bf94:	rsb	r2, r4, #32
   1bf98:	lsr	r0, r0, r4
   1bf9c:	orr	r0, r0, r1, lsl r2
   1bfa0:	orr	r1, r5, r1, lsr r4
   1bfa4:	pop	{r4, r5, pc}
   1bfa8:	rsb	r4, r4, #12
   1bfac:	rsb	r2, r4, #32
   1bfb0:	lsr	r0, r0, r2
   1bfb4:	orr	r0, r0, r1, lsl r4
   1bfb8:	mov	r1, r5
   1bfbc:	pop	{r4, r5, pc}
   1bfc0:	lsr	r0, r1, r4
   1bfc4:	mov	r1, r5
   1bfc8:	pop	{r4, r5, pc}
   1bfcc:	teq	r4, #0
   1bfd0:	eor	r3, r3, #1048576	; 0x100000
   1bfd4:	eoreq	r1, r1, #1048576	; 0x100000
   1bfd8:	addeq	r4, r4, #1
   1bfdc:	subne	r5, r5, #1
   1bfe0:	b	1be6c <__assert_fail@plt+0xa79c>
   1bfe4:	mvns	ip, r4, asr #21
   1bfe8:	mvnsne	ip, r5, asr #21
   1bfec:	beq	1c054 <__assert_fail@plt+0xa984>
   1bff0:	teq	r4, r5
   1bff4:	teqeq	r0, r2
   1bff8:	beq	1c00c <__assert_fail@plt+0xa93c>
   1bffc:	orrs	ip, r4, r0
   1c000:	moveq	r1, r3
   1c004:	moveq	r0, r2
   1c008:	pop	{r4, r5, pc}
   1c00c:	teq	r1, r3
   1c010:	movne	r1, #0
   1c014:	movne	r0, #0
   1c018:	popne	{r4, r5, pc}
   1c01c:	lsrs	ip, r4, #21
   1c020:	bne	1c034 <__assert_fail@plt+0xa964>
   1c024:	lsls	r0, r0, #1
   1c028:	adcs	r1, r1, r1
   1c02c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1c030:	pop	{r4, r5, pc}
   1c034:	adds	r4, r4, #4194304	; 0x400000
   1c038:	addcc	r1, r1, #1048576	; 0x100000
   1c03c:	popcc	{r4, r5, pc}
   1c040:	and	r5, r1, #-2147483648	; 0x80000000
   1c044:	orr	r1, r5, #2130706432	; 0x7f000000
   1c048:	orr	r1, r1, #15728640	; 0xf00000
   1c04c:	mov	r0, #0
   1c050:	pop	{r4, r5, pc}
   1c054:	mvns	ip, r4, asr #21
   1c058:	movne	r1, r3
   1c05c:	movne	r0, r2
   1c060:	mvnseq	ip, r5, asr #21
   1c064:	movne	r3, r1
   1c068:	movne	r2, r0
   1c06c:	orrs	r4, r0, r1, lsl #12
   1c070:	orrseq	r5, r2, r3, lsl #12
   1c074:	teqeq	r1, r3
   1c078:	orrne	r1, r1, #524288	; 0x80000
   1c07c:	pop	{r4, r5, pc}
   1c080:	teq	r0, #0
   1c084:	moveq	r1, #0
   1c088:	bxeq	lr
   1c08c:	push	{r4, r5, lr}
   1c090:	mov	r4, #1024	; 0x400
   1c094:	add	r4, r4, #50	; 0x32
   1c098:	mov	r5, #0
   1c09c:	mov	r1, #0
   1c0a0:	b	1bf1c <__assert_fail@plt+0xa84c>
   1c0a4:	teq	r0, #0
   1c0a8:	moveq	r1, #0
   1c0ac:	bxeq	lr
   1c0b0:	push	{r4, r5, lr}
   1c0b4:	mov	r4, #1024	; 0x400
   1c0b8:	add	r4, r4, #50	; 0x32
   1c0bc:	ands	r5, r0, #-2147483648	; 0x80000000
   1c0c0:	rsbmi	r0, r0, #0
   1c0c4:	mov	r1, #0
   1c0c8:	b	1bf1c <__assert_fail@plt+0xa84c>
   1c0cc:	lsls	r2, r0, #1
   1c0d0:	asr	r1, r2, #3
   1c0d4:	rrx	r1, r1
   1c0d8:	lsl	r0, r2, #28
   1c0dc:	andsne	r3, r2, #-16777216	; 0xff000000
   1c0e0:	teqne	r3, #-16777216	; 0xff000000
   1c0e4:	eorne	r1, r1, #939524096	; 0x38000000
   1c0e8:	bxne	lr
   1c0ec:	bics	r2, r2, #-16777216	; 0xff000000
   1c0f0:	bxeq	lr
   1c0f4:	teq	r3, #-16777216	; 0xff000000
   1c0f8:	orreq	r1, r1, #524288	; 0x80000
   1c0fc:	bxeq	lr
   1c100:	push	{r4, r5, lr}
   1c104:	mov	r4, #896	; 0x380
   1c108:	and	r5, r1, #-2147483648	; 0x80000000
   1c10c:	bic	r1, r1, #-2147483648	; 0x80000000
   1c110:	b	1bf1c <__assert_fail@plt+0xa84c>
   1c114:	orrs	r2, r0, r1
   1c118:	bxeq	lr
   1c11c:	push	{r4, r5, lr}
   1c120:	mov	r5, #0
   1c124:	b	1c144 <__assert_fail@plt+0xaa74>
   1c128:	orrs	r2, r0, r1
   1c12c:	bxeq	lr
   1c130:	push	{r4, r5, lr}
   1c134:	ands	r5, r1, #-2147483648	; 0x80000000
   1c138:	bpl	1c144 <__assert_fail@plt+0xaa74>
   1c13c:	rsbs	r0, r0, #0
   1c140:	rsc	r1, r1, #0
   1c144:	mov	r4, #1024	; 0x400
   1c148:	add	r4, r4, #50	; 0x32
   1c14c:	lsrs	ip, r1, #22
   1c150:	beq	1bec0 <__assert_fail@plt+0xa7f0>
   1c154:	mov	r2, #3
   1c158:	lsrs	ip, ip, #3
   1c15c:	addne	r2, r2, #3
   1c160:	lsrs	ip, ip, #3
   1c164:	addne	r2, r2, #3
   1c168:	add	r2, r2, ip, lsr #3
   1c16c:	rsb	r3, r2, #32
   1c170:	lsl	ip, r0, r3
   1c174:	lsr	r0, r0, r2
   1c178:	orr	r0, r0, r1, lsl r3
   1c17c:	lsr	r1, r1, r2
   1c180:	add	r4, r4, r2
   1c184:	b	1bec0 <__assert_fail@plt+0xa7f0>
   1c188:	cmp	r3, #0
   1c18c:	cmpeq	r2, #0
   1c190:	bne	1c1b4 <__assert_fail@plt+0xaae4>
   1c194:	cmp	r1, #0
   1c198:	movlt	r1, #-2147483648	; 0x80000000
   1c19c:	movlt	r0, #0
   1c1a0:	blt	1c1b0 <__assert_fail@plt+0xaae0>
   1c1a4:	cmpeq	r0, #0
   1c1a8:	mvnne	r1, #-2147483648	; 0x80000000
   1c1ac:	mvnne	r0, #0
   1c1b0:	b	1c298 <__assert_fail@plt+0xabc8>
   1c1b4:	sub	sp, sp, #8
   1c1b8:	push	{sp, lr}
   1c1bc:	cmp	r1, #0
   1c1c0:	blt	1c1e0 <__assert_fail@plt+0xab10>
   1c1c4:	cmp	r3, #0
   1c1c8:	blt	1c214 <__assert_fail@plt+0xab44>
   1c1cc:	bl	1c2e8 <__assert_fail@plt+0xac18>
   1c1d0:	ldr	lr, [sp, #4]
   1c1d4:	add	sp, sp, #8
   1c1d8:	pop	{r2, r3}
   1c1dc:	bx	lr
   1c1e0:	rsbs	r0, r0, #0
   1c1e4:	sbc	r1, r1, r1, lsl #1
   1c1e8:	cmp	r3, #0
   1c1ec:	blt	1c238 <__assert_fail@plt+0xab68>
   1c1f0:	bl	1c2e8 <__assert_fail@plt+0xac18>
   1c1f4:	ldr	lr, [sp, #4]
   1c1f8:	add	sp, sp, #8
   1c1fc:	pop	{r2, r3}
   1c200:	rsbs	r0, r0, #0
   1c204:	sbc	r1, r1, r1, lsl #1
   1c208:	rsbs	r2, r2, #0
   1c20c:	sbc	r3, r3, r3, lsl #1
   1c210:	bx	lr
   1c214:	rsbs	r2, r2, #0
   1c218:	sbc	r3, r3, r3, lsl #1
   1c21c:	bl	1c2e8 <__assert_fail@plt+0xac18>
   1c220:	ldr	lr, [sp, #4]
   1c224:	add	sp, sp, #8
   1c228:	pop	{r2, r3}
   1c22c:	rsbs	r0, r0, #0
   1c230:	sbc	r1, r1, r1, lsl #1
   1c234:	bx	lr
   1c238:	rsbs	r2, r2, #0
   1c23c:	sbc	r3, r3, r3, lsl #1
   1c240:	bl	1c2e8 <__assert_fail@plt+0xac18>
   1c244:	ldr	lr, [sp, #4]
   1c248:	add	sp, sp, #8
   1c24c:	pop	{r2, r3}
   1c250:	rsbs	r2, r2, #0
   1c254:	sbc	r3, r3, r3, lsl #1
   1c258:	bx	lr
   1c25c:	cmp	r3, #0
   1c260:	cmpeq	r2, #0
   1c264:	bne	1c27c <__assert_fail@plt+0xabac>
   1c268:	cmp	r1, #0
   1c26c:	cmpeq	r0, #0
   1c270:	mvnne	r1, #0
   1c274:	mvnne	r0, #0
   1c278:	b	1c298 <__assert_fail@plt+0xabc8>
   1c27c:	sub	sp, sp, #8
   1c280:	push	{sp, lr}
   1c284:	bl	1c2e8 <__assert_fail@plt+0xac18>
   1c288:	ldr	lr, [sp, #4]
   1c28c:	add	sp, sp, #8
   1c290:	pop	{r2, r3}
   1c294:	bx	lr
   1c298:	push	{r1, lr}
   1c29c:	mov	r0, #8
   1c2a0:	bl	11370 <raise@plt>
   1c2a4:	pop	{r1, pc}
   1c2a8:	vmov	d6, r0, r1
   1c2ac:	vldr	d7, [pc, #36]	; 1c2d8 <__assert_fail@plt+0xac08>
   1c2b0:	vldr	d5, [pc, #40]	; 1c2e0 <__assert_fail@plt+0xac10>
   1c2b4:	vmul.f64	d7, d6, d7
   1c2b8:	vcvt.u32.f64	s14, d7
   1c2bc:	vcvt.f64.u32	d4, s14
   1c2c0:	vmov	r1, s14
   1c2c4:	vmls.f64	d6, d4, d5
   1c2c8:	vcvt.u32.f64	s15, d6
   1c2cc:	vmov	r0, s15
   1c2d0:	bx	lr
   1c2d4:	nop			; (mov r0, r0)
   1c2d8:	andeq	r0, r0, r0
   1c2dc:	ldclcc	0, cr0, [r0]
   1c2e0:	andeq	r0, r0, r0
   1c2e4:	mvnsmi	r0, r0
   1c2e8:	cmp	r1, r3
   1c2ec:	cmpeq	r0, r2
   1c2f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2f4:	mov	r4, r0
   1c2f8:	movcc	r0, #0
   1c2fc:	mov	r5, r1
   1c300:	ldr	lr, [sp, #36]	; 0x24
   1c304:	movcc	r1, r0
   1c308:	bcc	1c404 <__assert_fail@plt+0xad34>
   1c30c:	cmp	r3, #0
   1c310:	clzeq	ip, r2
   1c314:	clzne	ip, r3
   1c318:	addeq	ip, ip, #32
   1c31c:	cmp	r5, #0
   1c320:	clzeq	r1, r4
   1c324:	addeq	r1, r1, #32
   1c328:	clzne	r1, r5
   1c32c:	sub	ip, ip, r1
   1c330:	sub	sl, ip, #32
   1c334:	lsl	r9, r3, ip
   1c338:	rsb	fp, ip, #32
   1c33c:	orr	r9, r9, r2, lsl sl
   1c340:	orr	r9, r9, r2, lsr fp
   1c344:	lsl	r8, r2, ip
   1c348:	cmp	r5, r9
   1c34c:	cmpeq	r4, r8
   1c350:	movcc	r0, #0
   1c354:	movcc	r1, r0
   1c358:	bcc	1c374 <__assert_fail@plt+0xaca4>
   1c35c:	mov	r0, #1
   1c360:	subs	r4, r4, r8
   1c364:	lsl	r1, r0, sl
   1c368:	orr	r1, r1, r0, lsr fp
   1c36c:	lsl	r0, r0, ip
   1c370:	sbc	r5, r5, r9
   1c374:	cmp	ip, #0
   1c378:	beq	1c404 <__assert_fail@plt+0xad34>
   1c37c:	lsr	r6, r8, #1
   1c380:	orr	r6, r6, r9, lsl #31
   1c384:	lsr	r7, r9, #1
   1c388:	mov	r2, ip
   1c38c:	b	1c3b0 <__assert_fail@plt+0xace0>
   1c390:	subs	r3, r4, r6
   1c394:	sbc	r8, r5, r7
   1c398:	adds	r3, r3, r3
   1c39c:	adc	r8, r8, r8
   1c3a0:	adds	r4, r3, #1
   1c3a4:	adc	r5, r8, #0
   1c3a8:	subs	r2, r2, #1
   1c3ac:	beq	1c3cc <__assert_fail@plt+0xacfc>
   1c3b0:	cmp	r5, r7
   1c3b4:	cmpeq	r4, r6
   1c3b8:	bcs	1c390 <__assert_fail@plt+0xacc0>
   1c3bc:	adds	r4, r4, r4
   1c3c0:	adc	r5, r5, r5
   1c3c4:	subs	r2, r2, #1
   1c3c8:	bne	1c3b0 <__assert_fail@plt+0xace0>
   1c3cc:	lsr	r3, r4, ip
   1c3d0:	orr	r3, r3, r5, lsl fp
   1c3d4:	lsr	r2, r5, ip
   1c3d8:	orr	r3, r3, r5, lsr sl
   1c3dc:	adds	r0, r0, r4
   1c3e0:	mov	r4, r3
   1c3e4:	lsl	r3, r2, ip
   1c3e8:	orr	r3, r3, r4, lsl sl
   1c3ec:	lsl	ip, r4, ip
   1c3f0:	orr	r3, r3, r4, lsr fp
   1c3f4:	adc	r1, r1, r5
   1c3f8:	subs	r0, r0, ip
   1c3fc:	mov	r5, r2
   1c400:	sbc	r1, r1, r3
   1c404:	cmp	lr, #0
   1c408:	strdne	r4, [lr]
   1c40c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c410:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c414:	mov	r7, r0
   1c418:	ldr	r6, [pc, #72]	; 1c468 <__assert_fail@plt+0xad98>
   1c41c:	ldr	r5, [pc, #72]	; 1c46c <__assert_fail@plt+0xad9c>
   1c420:	add	r6, pc, r6
   1c424:	add	r5, pc, r5
   1c428:	sub	r6, r6, r5
   1c42c:	mov	r8, r1
   1c430:	mov	r9, r2
   1c434:	bl	11338 <calloc@plt-0x20>
   1c438:	asrs	r6, r6, #2
   1c43c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c440:	mov	r4, #0
   1c444:	add	r4, r4, #1
   1c448:	ldr	r3, [r5], #4
   1c44c:	mov	r2, r9
   1c450:	mov	r1, r8
   1c454:	mov	r0, r7
   1c458:	blx	r3
   1c45c:	cmp	r6, r4
   1c460:	bne	1c444 <__assert_fail@plt+0xad74>
   1c464:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c468:	andeq	r2, r1, r4, ror #21
   1c46c:	ldrdeq	r2, [r1], -ip
   1c470:	bx	lr
   1c474:	ldr	r3, [pc, #12]	; 1c488 <__assert_fail@plt+0xadb8>
   1c478:	mov	r1, #0
   1c47c:	add	r3, pc, r3
   1c480:	ldr	r2, [r3]
   1c484:	b	115b0 <__cxa_atexit@plt>
   1c488:	andeq	r2, r1, r0, asr #25

Disassembly of section .fini:

0001c48c <.fini>:
   1c48c:	push	{r3, lr}
   1c490:	pop	{r3, pc}
