
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010ca4 <.init>:
   10ca4:	push	{r3, lr}
   10ca8:	bl	111cc <__assert_fail@plt+0x298>
   10cac:	pop	{r3, pc}

Disassembly of section .plt:

00010cb0 <calloc@plt-0x14>:
   10cb0:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb4:	ldr	lr, [pc, #4]	; 10cc0 <calloc@plt-0x4>
   10cb8:	add	lr, pc, lr
   10cbc:	ldr	pc, [lr, #8]!
   10cc0:	andeq	r9, r1, r0, asr #6

00010cc4 <calloc@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #102400	; 0x19000
   10ccc:	ldr	pc, [ip, #832]!	; 0x340

00010cd0 <fputs_unlocked@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #102400	; 0x19000
   10cd8:	ldr	pc, [ip, #824]!	; 0x338

00010cdc <raise@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #102400	; 0x19000
   10ce4:	ldr	pc, [ip, #816]!	; 0x330

00010ce8 <strcmp@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #102400	; 0x19000
   10cf0:	ldr	pc, [ip, #808]!	; 0x328

00010cf4 <posix_fadvise64@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #102400	; 0x19000
   10cfc:	ldr	pc, [ip, #800]!	; 0x320

00010d00 <fflush@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #102400	; 0x19000
   10d08:	ldr	pc, [ip, #792]!	; 0x318

00010d0c <memmove@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #102400	; 0x19000
   10d14:	ldr	pc, [ip, #784]!	; 0x310

00010d18 <free@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #102400	; 0x19000
   10d20:	ldr	pc, [ip, #776]!	; 0x308

00010d24 <_exit@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #102400	; 0x19000
   10d2c:	ldr	pc, [ip, #768]!	; 0x300

00010d30 <memcpy@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #102400	; 0x19000
   10d38:	ldr	pc, [ip, #760]!	; 0x2f8

00010d3c <__strtoull_internal@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #102400	; 0x19000
   10d44:	ldr	pc, [ip, #752]!	; 0x2f0

00010d48 <mbsinit@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #102400	; 0x19000
   10d50:	ldr	pc, [ip, #744]!	; 0x2e8

00010d54 <fwrite_unlocked@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #102400	; 0x19000
   10d5c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d60 <memcmp@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #102400	; 0x19000
   10d68:	ldr	pc, [ip, #728]!	; 0x2d8

00010d6c <fputc_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #102400	; 0x19000
   10d74:	ldr	pc, [ip, #720]!	; 0x2d0

00010d78 <dcgettext@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #102400	; 0x19000
   10d80:	ldr	pc, [ip, #712]!	; 0x2c8

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #102400	; 0x19000
   10d8c:	ldr	pc, [ip, #704]!	; 0x2c0

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #102400	; 0x19000
   10d98:	ldr	pc, [ip, #696]!	; 0x2b8

00010d9c <iswprint@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #102400	; 0x19000
   10da4:	ldr	pc, [ip, #688]!	; 0x2b0

00010da8 <fwrite@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #102400	; 0x19000
   10db0:	ldr	pc, [ip, #680]!	; 0x2a8

00010db4 <lseek64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #102400	; 0x19000
   10dbc:	ldr	pc, [ip, #672]!	; 0x2a0

00010dc0 <__ctype_get_mb_cur_max@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #102400	; 0x19000
   10dc8:	ldr	pc, [ip, #664]!	; 0x298

00010dcc <__fpending@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #102400	; 0x19000
   10dd4:	ldr	pc, [ip, #656]!	; 0x290

00010dd8 <mbrtowc@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #102400	; 0x19000
   10de0:	ldr	pc, [ip, #648]!	; 0x288

00010de4 <error@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #102400	; 0x19000
   10dec:	ldr	pc, [ip, #640]!	; 0x280

00010df0 <malloc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #102400	; 0x19000
   10df8:	ldr	pc, [ip, #632]!	; 0x278

00010dfc <__libc_start_main@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #102400	; 0x19000
   10e04:	ldr	pc, [ip, #624]!	; 0x270

00010e08 <__freading@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #102400	; 0x19000
   10e10:	ldr	pc, [ip, #616]!	; 0x268

00010e14 <__gmon_start__@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #102400	; 0x19000
   10e1c:	ldr	pc, [ip, #608]!	; 0x260

00010e20 <getopt_long@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #102400	; 0x19000
   10e28:	ldr	pc, [ip, #600]!	; 0x258

00010e2c <__ctype_b_loc@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #102400	; 0x19000
   10e34:	ldr	pc, [ip, #592]!	; 0x250

00010e38 <exit@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #102400	; 0x19000
   10e40:	ldr	pc, [ip, #584]!	; 0x248

00010e44 <strlen@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #102400	; 0x19000
   10e4c:	ldr	pc, [ip, #576]!	; 0x240

00010e50 <strchr@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #102400	; 0x19000
   10e58:	ldr	pc, [ip, #568]!	; 0x238

00010e5c <__errno_location@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #102400	; 0x19000
   10e64:	ldr	pc, [ip, #560]!	; 0x230

00010e68 <__cxa_atexit@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #102400	; 0x19000
   10e70:	ldr	pc, [ip, #552]!	; 0x228

00010e74 <memset@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #102400	; 0x19000
   10e7c:	ldr	pc, [ip, #544]!	; 0x220

00010e80 <__printf_chk@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #102400	; 0x19000
   10e88:	ldr	pc, [ip, #536]!	; 0x218

00010e8c <fileno@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #102400	; 0x19000
   10e94:	ldr	pc, [ip, #528]!	; 0x210

00010e98 <__fprintf_chk@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #102400	; 0x19000
   10ea0:	ldr	pc, [ip, #520]!	; 0x208

00010ea4 <fclose@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #102400	; 0x19000
   10eac:	ldr	pc, [ip, #512]!	; 0x200

00010eb0 <fseeko64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #102400	; 0x19000
   10eb8:	ldr	pc, [ip, #504]!	; 0x1f8

00010ebc <__uflow@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #102400	; 0x19000
   10ec4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ec8 <__overflow@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #102400	; 0x19000
   10ed0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ed4 <setlocale@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #102400	; 0x19000
   10edc:	ldr	pc, [ip, #480]!	; 0x1e0

00010ee0 <strrchr@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #102400	; 0x19000
   10ee8:	ldr	pc, [ip, #472]!	; 0x1d8

00010eec <nl_langinfo@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #102400	; 0x19000
   10ef4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ef8 <clearerr_unlocked@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #102400	; 0x19000
   10f00:	ldr	pc, [ip, #456]!	; 0x1c8

00010f04 <fopen64@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #102400	; 0x19000
   10f0c:	ldr	pc, [ip, #448]!	; 0x1c0

00010f10 <bindtextdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #102400	; 0x19000
   10f18:	ldr	pc, [ip, #440]!	; 0x1b8

00010f1c <strncmp@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #102400	; 0x19000
   10f24:	ldr	pc, [ip, #432]!	; 0x1b0

00010f28 <abort@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #102400	; 0x19000
   10f30:	ldr	pc, [ip, #424]!	; 0x1a8

00010f34 <__assert_fail@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #102400	; 0x19000
   10f3c:	ldr	pc, [ip, #416]!	; 0x1a0

Disassembly of section .text:

00010f40 <.text>:
   10f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f44:	mov	r7, r0
   10f48:	sub	sp, sp, #36	; 0x24
   10f4c:	ldr	r0, [r1]
   10f50:	mov	r5, r1
   10f54:	bl	11cc4 <__assert_fail@plt+0xd90>
   10f58:	ldr	r1, [pc, #492]	; 1114c <__assert_fail@plt+0x218>
   10f5c:	mov	r0, #6
   10f60:	bl	10ed4 <setlocale@plt>
   10f64:	ldr	r1, [pc, #484]	; 11150 <__assert_fail@plt+0x21c>
   10f68:	ldr	r0, [pc, #484]	; 11154 <__assert_fail@plt+0x220>
   10f6c:	bl	10f10 <bindtextdomain@plt>
   10f70:	ldr	r6, [pc, #480]	; 11158 <__assert_fail@plt+0x224>
   10f74:	ldr	r0, [pc, #472]	; 11154 <__assert_fail@plt+0x220>
   10f78:	ldr	r8, [pc, #476]	; 1115c <__assert_fail@plt+0x228>
   10f7c:	ldr	fp, [pc, #476]	; 11160 <__assert_fail@plt+0x22c>
   10f80:	ldr	r9, [pc, #476]	; 11164 <__assert_fail@plt+0x230>
   10f84:	bl	10d90 <textdomain@plt>
   10f88:	mov	sl, #80	; 0x50
   10f8c:	ldr	r0, [pc, #468]	; 11168 <__assert_fail@plt+0x234>
   10f90:	bl	18648 <__assert_fail@plt+0x7714>
   10f94:	mov	r3, #0
   10f98:	strb	r3, [r6]
   10f9c:	strb	r3, [r6, #12]
   10fa0:	strb	r3, [r6, #13]
   10fa4:	mov	r4, #0
   10fa8:	str	r4, [sp]
   10fac:	mov	r3, r8
   10fb0:	ldr	r2, [pc, #436]	; 1116c <__assert_fail@plt+0x238>
   10fb4:	mov	r1, r5
   10fb8:	mov	r0, r7
   10fbc:	bl	10e20 <getopt_long@plt>
   10fc0:	cmn	r0, #1
   10fc4:	beq	110c0 <__assert_fail@plt+0x18c>
   10fc8:	cmp	r0, #57	; 0x39
   10fcc:	bgt	10ff0 <__assert_fail@plt+0xbc>
   10fd0:	cmp	r0, #48	; 0x30
   10fd4:	bge	11010 <__assert_fail@plt+0xdc>
   10fd8:	cmn	r0, #3
   10fdc:	beq	11078 <__assert_fail@plt+0x144>
   10fe0:	cmn	r0, #2
   10fe4:	bne	11008 <__assert_fail@plt+0xd4>
   10fe8:	mov	r0, r4
   10fec:	bl	116c4 <__assert_fail@plt+0x790>
   10ff0:	cmp	r0, #115	; 0x73
   10ff4:	beq	110a8 <__assert_fail@plt+0x174>
   10ff8:	cmp	r0, #119	; 0x77
   10ffc:	beq	1102c <__assert_fail@plt+0xf8>
   11000:	cmp	r0, #98	; 0x62
   11004:	beq	110b4 <__assert_fail@plt+0x180>
   11008:	mov	r0, #1
   1100c:	bl	116c4 <__assert_fail@plt+0x790>
   11010:	ldr	r3, [r9]
   11014:	cmp	r3, #0
   11018:	subne	r3, r3, #1
   1101c:	strbeq	r3, [sp, #29]
   11020:	addeq	r3, sp, #28
   11024:	strbeq	r0, [sp, #28]
   11028:	str	r3, [r9]
   1102c:	mov	r2, #5
   11030:	mov	r1, fp
   11034:	mov	r0, #0
   11038:	ldr	r4, [r9]
   1103c:	bl	10d78 <dcgettext@plt>
   11040:	ldr	r3, [pc, #260]	; 1114c <__assert_fail@plt+0x218>
   11044:	mvn	r2, #9
   11048:	str	r3, [sp, #8]
   1104c:	mov	r3, #0
   11050:	mov	r1, #0
   11054:	strd	r2, [sp]
   11058:	str	r1, [sp, #16]
   1105c:	mov	r2, #1
   11060:	mov	r3, #0
   11064:	str	r0, [sp, #12]
   11068:	mov	r0, r4
   1106c:	bl	16f10 <__assert_fail@plt+0x5fdc>
   11070:	mov	sl, r0
   11074:	b	10fa4 <__assert_fail@plt+0x70>
   11078:	ldr	r1, [pc, #240]	; 11170 <__assert_fail@plt+0x23c>
   1107c:	ldr	r3, [pc, #240]	; 11174 <__assert_fail@plt+0x240>
   11080:	ldr	r2, [pc, #240]	; 11178 <__assert_fail@plt+0x244>
   11084:	str	r4, [sp, #4]
   11088:	ldr	r0, [r1]
   1108c:	ldr	r3, [r3]
   11090:	ldr	r1, [pc, #228]	; 1117c <__assert_fail@plt+0x248>
   11094:	str	r2, [sp]
   11098:	ldr	r2, [pc, #224]	; 11180 <__assert_fail@plt+0x24c>
   1109c:	bl	16564 <__assert_fail@plt+0x5630>
   110a0:	mov	r0, r4
   110a4:	bl	10e38 <exit@plt>
   110a8:	mov	r3, #1
   110ac:	strb	r3, [r6, #13]
   110b0:	b	10fa4 <__assert_fail@plt+0x70>
   110b4:	mov	r3, #1
   110b8:	strb	r3, [r6, #12]
   110bc:	b	10fa4 <__assert_fail@plt+0x70>
   110c0:	ldr	r3, [pc, #188]	; 11184 <__assert_fail@plt+0x250>
   110c4:	ldr	r8, [r3]
   110c8:	cmp	r7, r8
   110cc:	movne	r4, #1
   110d0:	bne	11118 <__assert_fail@plt+0x1e4>
   110d4:	mov	r1, sl
   110d8:	ldr	r0, [pc, #168]	; 11188 <__assert_fail@plt+0x254>
   110dc:	bl	112b8 <__assert_fail@plt+0x384>
   110e0:	mov	r4, r0
   110e4:	ldrb	r3, [r6]
   110e8:	cmp	r3, #0
   110ec:	bne	11124 <__assert_fail@plt+0x1f0>
   110f0:	eor	r0, r4, #1
   110f4:	uxtb	r0, r0
   110f8:	add	sp, sp, #36	; 0x24
   110fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11100:	ldr	r0, [r5, r8, lsl #2]
   11104:	mov	r1, sl
   11108:	bl	112b8 <__assert_fail@plt+0x384>
   1110c:	add	r8, r8, #1
   11110:	and	r4, r4, r0
   11114:	uxtb	r4, r4
   11118:	cmp	r8, r7
   1111c:	blt	11100 <__assert_fail@plt+0x1cc>
   11120:	b	110e4 <__assert_fail@plt+0x1b0>
   11124:	ldr	r3, [pc, #96]	; 1118c <__assert_fail@plt+0x258>
   11128:	ldr	r0, [r3]
   1112c:	bl	11b24 <__assert_fail@plt+0xbf0>
   11130:	cmn	r0, #1
   11134:	bne	110f0 <__assert_fail@plt+0x1bc>
   11138:	bl	10e5c <__errno_location@plt>
   1113c:	ldr	r2, [pc, #68]	; 11188 <__assert_fail@plt+0x254>
   11140:	ldr	r1, [r0]
   11144:	mov	r0, #1
   11148:	bl	10de4 <error@plt>
   1114c:	andeq	r8, r1, r0, lsl #15
   11150:	andeq	r8, r1, ip, lsr #20
   11154:	andeq	r8, r1, r4, lsl #19
   11158:	andeq	sl, r2, r0, ror #2
   1115c:	andeq	r8, r1, r4, lsr #13
   11160:	andeq	r8, r1, r4, asr #20
   11164:	andeq	sl, r2, r8, asr r1
   11168:	andeq	r1, r1, r0, lsl #20
   1116c:	andeq	r8, r1, r4, lsl #14
   11170:	andeq	sl, r2, r4, asr r1
   11174:	andeq	sl, r2, ip, ror #1
   11178:	andeq	r8, r1, r0, ror #20
   1117c:	andeq	r8, r1, r0, lsr r7
   11180:	andeq	r8, r1, r0, lsl #19
   11184:	andeq	sl, r2, r0, asr #2
   11188:	andeq	r8, r1, r8, lsr #14
   1118c:	andeq	sl, r2, r0, asr r1
   11190:	mov	fp, #0
   11194:	mov	lr, #0
   11198:	pop	{r1}		; (ldr r1, [sp], #4)
   1119c:	mov	r2, sp
   111a0:	push	{r2}		; (str r2, [sp, #-4]!)
   111a4:	push	{r0}		; (str r0, [sp, #-4]!)
   111a8:	ldr	ip, [pc, #16]	; 111c0 <__assert_fail@plt+0x28c>
   111ac:	push	{ip}		; (str ip, [sp, #-4]!)
   111b0:	ldr	r0, [pc, #12]	; 111c4 <__assert_fail@plt+0x290>
   111b4:	ldr	r3, [pc, #12]	; 111c8 <__assert_fail@plt+0x294>
   111b8:	bl	10dfc <__libc_start_main@plt>
   111bc:	bl	10f28 <abort@plt>
   111c0:	andeq	r8, r1, r4, asr #12
   111c4:	andeq	r0, r1, r0, asr #30
   111c8:	andeq	r8, r1, r4, ror #11
   111cc:	ldr	r3, [pc, #20]	; 111e8 <__assert_fail@plt+0x2b4>
   111d0:	ldr	r2, [pc, #20]	; 111ec <__assert_fail@plt+0x2b8>
   111d4:	add	r3, pc, r3
   111d8:	ldr	r2, [r3, r2]
   111dc:	cmp	r2, #0
   111e0:	bxeq	lr
   111e4:	b	10e14 <__gmon_start__@plt>
   111e8:	andeq	r8, r1, r4, lsr #28
   111ec:	andeq	r0, r0, r0, ror #1
   111f0:	ldr	r3, [pc, #28]	; 11214 <__assert_fail@plt+0x2e0>
   111f4:	ldr	r0, [pc, #28]	; 11218 <__assert_fail@plt+0x2e4>
   111f8:	sub	r3, r3, r0
   111fc:	cmp	r3, #6
   11200:	bxls	lr
   11204:	ldr	r3, [pc, #16]	; 1121c <__assert_fail@plt+0x2e8>
   11208:	cmp	r3, #0
   1120c:	bxeq	lr
   11210:	bx	r3
   11214:	andeq	sl, r2, r7, lsr r1
   11218:	andeq	sl, r2, r4, lsr r1
   1121c:	andeq	r0, r0, r0
   11220:	ldr	r1, [pc, #36]	; 1124c <__assert_fail@plt+0x318>
   11224:	ldr	r0, [pc, #36]	; 11250 <__assert_fail@plt+0x31c>
   11228:	sub	r1, r1, r0
   1122c:	asr	r1, r1, #2
   11230:	add	r1, r1, r1, lsr #31
   11234:	asrs	r1, r1, #1
   11238:	bxeq	lr
   1123c:	ldr	r3, [pc, #16]	; 11254 <__assert_fail@plt+0x320>
   11240:	cmp	r3, #0
   11244:	bxeq	lr
   11248:	bx	r3
   1124c:	andeq	sl, r2, r4, lsr r1
   11250:	andeq	sl, r2, r4, lsr r1
   11254:	andeq	r0, r0, r0
   11258:	push	{r4, lr}
   1125c:	ldr	r4, [pc, #24]	; 1127c <__assert_fail@plt+0x348>
   11260:	ldrb	r3, [r4]
   11264:	cmp	r3, #0
   11268:	popne	{r4, pc}
   1126c:	bl	111f0 <__assert_fail@plt+0x2bc>
   11270:	mov	r3, #1
   11274:	strb	r3, [r4]
   11278:	pop	{r4, pc}
   1127c:	andeq	sl, r2, ip, asr r1
   11280:	ldr	r0, [pc, #40]	; 112b0 <__assert_fail@plt+0x37c>
   11284:	ldr	r3, [r0]
   11288:	cmp	r3, #0
   1128c:	bne	11294 <__assert_fail@plt+0x360>
   11290:	b	11220 <__assert_fail@plt+0x2ec>
   11294:	ldr	r3, [pc, #24]	; 112b4 <__assert_fail@plt+0x380>
   11298:	cmp	r3, #0
   1129c:	beq	11290 <__assert_fail@plt+0x35c>
   112a0:	push	{r4, lr}
   112a4:	blx	r3
   112a8:	pop	{r4, lr}
   112ac:	b	11220 <__assert_fail@plt+0x2ec>
   112b0:	andeq	r9, r2, r4, lsl pc
   112b4:	andeq	r0, r0, r0
   112b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112bc:	sub	sp, sp, #12
   112c0:	mov	sl, r1
   112c4:	ldr	r1, [pc, #988]	; 116a8 <__assert_fail@plt+0x774>
   112c8:	str	r0, [sp, #4]
   112cc:	bl	10ce8 <strcmp@plt>
   112d0:	cmp	r0, #0
   112d4:	bne	1166c <__assert_fail@plt+0x738>
   112d8:	ldr	r1, [pc, #972]	; 116ac <__assert_fail@plt+0x778>
   112dc:	ldr	r3, [pc, #972]	; 116b0 <__assert_fail@plt+0x77c>
   112e0:	mov	r2, #1
   112e4:	ldr	r8, [r1]
   112e8:	strb	r2, [r3]
   112ec:	cmp	r8, #0
   112f0:	beq	11684 <__assert_fail@plt+0x750>
   112f4:	mov	r1, #2
   112f8:	mov	r0, r8
   112fc:	bl	11af0 <__assert_fail@plt+0xbbc>
   11300:	mov	r5, #0
   11304:	ldr	r6, [pc, #932]	; 116b0 <__assert_fail@plt+0x77c>
   11308:	ldr	r9, [pc, #932]	; 116b4 <__assert_fail@plt+0x780>
   1130c:	mov	r4, r5
   11310:	ldr	r3, [r8, #4]
   11314:	ldr	r2, [r8, #8]
   11318:	cmp	r3, r2
   1131c:	bcs	114bc <__assert_fail@plt+0x588>
   11320:	add	r2, r3, #1
   11324:	str	r2, [r8, #4]
   11328:	ldrb	r7, [r3]
   1132c:	ldr	r3, [r6, #4]
   11330:	add	r2, r5, #1
   11334:	cmp	r2, r3
   11338:	bcs	1156c <__assert_fail@plt+0x638>
   1133c:	cmp	r7, #10
   11340:	ldr	fp, [r6, #8]
   11344:	beq	11590 <__assert_fail@plt+0x65c>
   11348:	ldrb	r3, [r6, #12]
   1134c:	uxtb	r7, r7
   11350:	cmp	r3, #0
   11354:	bne	11378 <__assert_fail@plt+0x444>
   11358:	cmp	r7, #8
   1135c:	beq	115b0 <__assert_fail@plt+0x67c>
   11360:	cmp	r7, #13
   11364:	beq	11604 <__assert_fail@plt+0x6d0>
   11368:	cmp	r7, #9
   1136c:	biceq	r4, r4, #7
   11370:	addeq	r4, r4, #8
   11374:	beq	1137c <__assert_fail@plt+0x448>
   11378:	add	r4, r4, #1
   1137c:	cmp	sl, r4
   11380:	bcs	115b8 <__assert_fail@plt+0x684>
   11384:	ldrb	r3, [r6, #13]
   11388:	cmp	r3, #0
   1138c:	beq	1149c <__assert_fail@plt+0x568>
   11390:	cmp	r5, #0
   11394:	beq	114a4 <__assert_fail@plt+0x570>
   11398:	bl	10e2c <__ctype_b_loc@plt>
   1139c:	mov	r4, r5
   113a0:	add	r1, fp, r5
   113a4:	ldr	r0, [r0]
   113a8:	b	113b4 <__assert_fail@plt+0x480>
   113ac:	subs	r4, r2, #0
   113b0:	beq	1153c <__assert_fail@plt+0x608>
   113b4:	ldrb	r3, [r1, #-1]!
   113b8:	sub	r2, r4, #1
   113bc:	lsl	r3, r3, #1
   113c0:	ldrh	r3, [r0, r3]
   113c4:	tst	r3, #1
   113c8:	beq	113ac <__assert_fail@plt+0x478>
   113cc:	ldr	r3, [r9]
   113d0:	mov	r2, r4
   113d4:	mov	r0, fp
   113d8:	mov	r1, #1
   113dc:	bl	10d54 <fwrite_unlocked@plt>
   113e0:	ldr	r0, [r9]
   113e4:	ldr	r2, [r0, #24]
   113e8:	ldr	r3, [r0, #20]
   113ec:	cmp	r3, r2
   113f0:	addcc	r2, r3, #1
   113f4:	strcc	r2, [r0, #20]
   113f8:	movcc	r2, #10
   113fc:	strbcc	r2, [r3]
   11400:	bcs	11658 <__assert_fail@plt+0x724>
   11404:	ldr	fp, [r6, #8]
   11408:	sub	r5, r5, r4
   1140c:	mov	r2, r5
   11410:	add	r1, fp, r4
   11414:	mov	r0, fp
   11418:	bl	10d0c <memmove@plt>
   1141c:	cmp	r5, #0
   11420:	ldrb	r3, [r6, #12]
   11424:	beq	11664 <__assert_fail@plt+0x730>
   11428:	cmp	r3, #0
   1142c:	bne	115c4 <__assert_fail@plt+0x690>
   11430:	mov	r4, r3
   11434:	mov	r1, fp
   11438:	add	r0, fp, r5
   1143c:	b	11464 <__assert_fail@plt+0x530>
   11440:	cmp	r2, #13
   11444:	beq	115d8 <__assert_fail@plt+0x6a4>
   11448:	cmp	r2, #9
   1144c:	biceq	r4, r4, #7
   11450:	addne	r4, r4, #1
   11454:	addeq	r4, r4, #8
   11458:	mov	r1, r3
   1145c:	cmp	r0, r3
   11460:	beq	11358 <__assert_fail@plt+0x424>
   11464:	mov	r3, r1
   11468:	ldrb	r2, [r3], #1
   1146c:	cmp	r2, #8
   11470:	bne	11440 <__assert_fail@plt+0x50c>
   11474:	cmp	r4, #0
   11478:	bne	115f8 <__assert_fail@plt+0x6c4>
   1147c:	cmp	r3, r0
   11480:	beq	11358 <__assert_fail@plt+0x424>
   11484:	ldrb	r2, [r3]
   11488:	add	r3, r1, #2
   1148c:	cmp	r2, #8
   11490:	bne	11440 <__assert_fail@plt+0x50c>
   11494:	mov	r1, r3
   11498:	b	1145c <__assert_fail@plt+0x528>
   1149c:	cmp	r5, #0
   114a0:	bne	1153c <__assert_fail@plt+0x608>
   114a4:	strb	r7, [fp]
   114a8:	ldr	r3, [r8, #4]
   114ac:	ldr	r2, [r8, #8]
   114b0:	mov	r5, #1
   114b4:	cmp	r3, r2
   114b8:	bcc	11320 <__assert_fail@plt+0x3ec>
   114bc:	mov	r0, r8
   114c0:	bl	10ebc <__uflow@plt>
   114c4:	cmn	r0, #1
   114c8:	mov	r7, r0
   114cc:	bne	1132c <__assert_fail@plt+0x3f8>
   114d0:	bl	10e5c <__errno_location@plt>
   114d4:	ldr	r4, [r8]
   114d8:	ands	r4, r4, #32
   114dc:	ldr	r3, [r0]
   114e0:	mov	r6, r0
   114e4:	movne	r4, r3
   114e8:	cmp	r5, #0
   114ec:	beq	1150c <__assert_fail@plt+0x5d8>
   114f0:	ldr	r1, [pc, #440]	; 116b0 <__assert_fail@plt+0x77c>
   114f4:	ldr	r3, [pc, #440]	; 116b4 <__assert_fail@plt+0x780>
   114f8:	mov	r2, r5
   114fc:	ldr	r0, [r1, #8]
   11500:	ldr	r3, [r3]
   11504:	mov	r1, #1
   11508:	bl	10d54 <fwrite_unlocked@plt>
   1150c:	ldr	r1, [pc, #404]	; 116a8 <__assert_fail@plt+0x774>
   11510:	ldr	r0, [sp, #4]
   11514:	bl	10ce8 <strcmp@plt>
   11518:	cmp	r0, #0
   1151c:	mov	r0, r8
   11520:	bne	11614 <__assert_fail@plt+0x6e0>
   11524:	bl	10ef8 <clearerr_unlocked@plt>
   11528:	cmp	r4, #0
   1152c:	moveq	r0, #1
   11530:	bne	11628 <__assert_fail@plt+0x6f4>
   11534:	add	sp, sp, #12
   11538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1153c:	mov	r3, #10
   11540:	strb	r3, [fp, r5]
   11544:	add	r2, r5, #1
   11548:	mov	r0, fp
   1154c:	ldr	r3, [r9]
   11550:	mov	r1, #1
   11554:	mov	r5, #0
   11558:	bl	10d54 <fwrite_unlocked@plt>
   1155c:	mov	r4, r5
   11560:	ldr	fp, [r6, #8]
   11564:	ldrb	r3, [r6, #12]
   11568:	b	11350 <__assert_fail@plt+0x41c>
   1156c:	ldr	r1, [pc, #324]	; 116b8 <__assert_fail@plt+0x784>
   11570:	ldr	r0, [r6, #8]
   11574:	str	r2, [sp]
   11578:	bl	16880 <__assert_fail@plt+0x594c>
   1157c:	cmp	r7, #10
   11580:	ldr	r2, [sp]
   11584:	mov	fp, r0
   11588:	str	r0, [r6, #8]
   1158c:	bne	11348 <__assert_fail@plt+0x414>
   11590:	strb	r7, [fp, r5]
   11594:	mov	r0, fp
   11598:	ldr	r3, [r9]
   1159c:	mov	r1, #1
   115a0:	mov	r5, #0
   115a4:	bl	10d54 <fwrite_unlocked@plt>
   115a8:	mov	r4, r5
   115ac:	b	11310 <__assert_fail@plt+0x3dc>
   115b0:	cmp	r4, #0
   115b4:	bne	1160c <__assert_fail@plt+0x6d8>
   115b8:	strb	r7, [fp, r5]
   115bc:	add	r5, r5, #1
   115c0:	b	11310 <__assert_fail@plt+0x3dc>
   115c4:	mov	r4, #0
   115c8:	add	r4, r4, #1
   115cc:	cmp	r5, r4
   115d0:	bne	115c8 <__assert_fail@plt+0x694>
   115d4:	b	11350 <__assert_fail@plt+0x41c>
   115d8:	cmp	r3, r0
   115dc:	beq	116a0 <__assert_fail@plt+0x76c>
   115e0:	ldrb	r2, [r3], #1
   115e4:	mov	r4, #0
   115e8:	cmp	r2, #8
   115ec:	bne	11440 <__assert_fail@plt+0x50c>
   115f0:	mov	r1, r3
   115f4:	b	1145c <__assert_fail@plt+0x528>
   115f8:	sub	r4, r4, #1
   115fc:	mov	r1, r3
   11600:	b	1145c <__assert_fail@plt+0x528>
   11604:	mov	r4, #0
   11608:	b	115b8 <__assert_fail@plt+0x684>
   1160c:	sub	r4, r4, #1
   11610:	b	1137c <__assert_fail@plt+0x448>
   11614:	bl	11b24 <__assert_fail@plt+0xbf0>
   11618:	cmp	r0, #0
   1161c:	beq	11528 <__assert_fail@plt+0x5f4>
   11620:	cmp	r4, #0
   11624:	beq	11698 <__assert_fail@plt+0x764>
   11628:	ldr	r2, [sp, #4]
   1162c:	mov	r1, #3
   11630:	mov	r0, #0
   11634:	bl	14c9c <__assert_fail@plt+0x3d68>
   11638:	mov	r1, r4
   1163c:	ldr	r2, [pc, #120]	; 116bc <__assert_fail@plt+0x788>
   11640:	mov	r3, r0
   11644:	mov	r0, #0
   11648:	bl	10de4 <error@plt>
   1164c:	mov	r0, #0
   11650:	add	sp, sp, #12
   11654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11658:	mov	r1, #10
   1165c:	bl	10ec8 <__overflow@plt>
   11660:	b	11404 <__assert_fail@plt+0x4d0>
   11664:	mov	r4, r5
   11668:	b	11350 <__assert_fail@plt+0x41c>
   1166c:	ldr	r1, [pc, #76]	; 116c0 <__assert_fail@plt+0x78c>
   11670:	ldr	r0, [sp, #4]
   11674:	bl	10f04 <fopen64@plt>
   11678:	mov	r8, r0
   1167c:	cmp	r8, #0
   11680:	bne	112f4 <__assert_fail@plt+0x3c0>
   11684:	bl	10e5c <__errno_location@plt>
   11688:	ldr	r2, [sp, #4]
   1168c:	mov	r1, #3
   11690:	ldr	r4, [r0]
   11694:	b	11630 <__assert_fail@plt+0x6fc>
   11698:	ldr	r4, [r6]
   1169c:	b	11528 <__assert_fail@plt+0x5f4>
   116a0:	mov	r4, #0
   116a4:	b	11358 <__assert_fail@plt+0x424>
   116a8:	andeq	r8, r1, r8, lsr #14
   116ac:	andeq	sl, r2, r0, asr r1
   116b0:	andeq	sl, r2, r0, ror #2
   116b4:	andeq	sl, r2, r4, asr r1
   116b8:	andeq	sl, r2, r4, ror #2
   116bc:	andeq	r8, r1, r4, lsr #22
   116c0:	andeq	r8, r1, ip, lsr #14
   116c4:	subs	r6, r0, #0
   116c8:	push	{r7, lr}
   116cc:	sub	sp, sp, #56	; 0x38
   116d0:	beq	1170c <__assert_fail@plt+0x7d8>
   116d4:	ldr	r3, [pc, #684]	; 11988 <__assert_fail@plt+0xa54>
   116d8:	mov	r2, #5
   116dc:	ldr	r1, [pc, #680]	; 1198c <__assert_fail@plt+0xa58>
   116e0:	mov	r0, #0
   116e4:	ldr	r4, [r3]
   116e8:	bl	10d78 <dcgettext@plt>
   116ec:	ldr	r3, [pc, #668]	; 11990 <__assert_fail@plt+0xa5c>
   116f0:	mov	r1, #1
   116f4:	ldr	r3, [r3]
   116f8:	mov	r2, r0
   116fc:	mov	r0, r4
   11700:	bl	10e98 <__fprintf_chk@plt>
   11704:	mov	r0, r6
   11708:	bl	10e38 <exit@plt>
   1170c:	mov	r2, #5
   11710:	ldr	r1, [pc, #636]	; 11994 <__assert_fail@plt+0xa60>
   11714:	bl	10d78 <dcgettext@plt>
   11718:	ldr	r3, [pc, #624]	; 11990 <__assert_fail@plt+0xa5c>
   1171c:	ldr	r7, [pc, #628]	; 11998 <__assert_fail@plt+0xa64>
   11720:	ldr	r4, [pc, #628]	; 1199c <__assert_fail@plt+0xa68>
   11724:	ldr	r2, [r3]
   11728:	mov	r1, r0
   1172c:	mov	r0, #1
   11730:	bl	10e80 <__printf_chk@plt>
   11734:	mov	r2, #5
   11738:	ldr	r1, [pc, #608]	; 119a0 <__assert_fail@plt+0xa6c>
   1173c:	mov	r0, r6
   11740:	bl	10d78 <dcgettext@plt>
   11744:	ldr	r1, [r7]
   11748:	bl	10cd0 <fputs_unlocked@plt>
   1174c:	mov	r2, #5
   11750:	ldr	r1, [pc, #588]	; 119a4 <__assert_fail@plt+0xa70>
   11754:	mov	r0, r6
   11758:	bl	10d78 <dcgettext@plt>
   1175c:	ldr	r1, [r7]
   11760:	bl	10cd0 <fputs_unlocked@plt>
   11764:	mov	r2, #5
   11768:	ldr	r1, [pc, #568]	; 119a8 <__assert_fail@plt+0xa74>
   1176c:	mov	r0, r6
   11770:	bl	10d78 <dcgettext@plt>
   11774:	ldr	r1, [r7]
   11778:	bl	10cd0 <fputs_unlocked@plt>
   1177c:	mov	r2, #5
   11780:	ldr	r1, [pc, #548]	; 119ac <__assert_fail@plt+0xa78>
   11784:	mov	r0, r6
   11788:	bl	10d78 <dcgettext@plt>
   1178c:	ldr	r1, [r7]
   11790:	bl	10cd0 <fputs_unlocked@plt>
   11794:	mov	r2, #5
   11798:	ldr	r1, [pc, #528]	; 119b0 <__assert_fail@plt+0xa7c>
   1179c:	mov	r0, r6
   117a0:	bl	10d78 <dcgettext@plt>
   117a4:	ldr	r1, [r7]
   117a8:	bl	10cd0 <fputs_unlocked@plt>
   117ac:	mov	r2, #5
   117b0:	ldr	r1, [pc, #508]	; 119b4 <__assert_fail@plt+0xa80>
   117b4:	mov	r0, r6
   117b8:	bl	10d78 <dcgettext@plt>
   117bc:	ldr	r1, [r7]
   117c0:	bl	10cd0 <fputs_unlocked@plt>
   117c4:	ldm	r4!, {r0, r1, r2, r3}
   117c8:	mov	lr, sp
   117cc:	stmia	lr!, {r0, r1, r2, r3}
   117d0:	ldm	r4!, {r0, r1, r2, r3}
   117d4:	ldr	ip, [sp]
   117d8:	stmia	lr!, {r0, r1, r2, r3}
   117dc:	cmp	ip, #0
   117e0:	ldm	r4!, {r0, r1, r2, r3}
   117e4:	stmia	lr!, {r0, r1, r2, r3}
   117e8:	ldm	r4, {r0, r1}
   117ec:	moveq	r4, sp
   117f0:	stm	lr, {r0, r1}
   117f4:	beq	11824 <__assert_fail@plt+0x8f0>
   117f8:	ldr	r5, [pc, #440]	; 119b8 <__assert_fail@plt+0xa84>
   117fc:	mov	r4, sp
   11800:	b	11810 <__assert_fail@plt+0x8dc>
   11804:	ldr	ip, [r4, #8]!
   11808:	cmp	ip, #0
   1180c:	beq	11824 <__assert_fail@plt+0x8f0>
   11810:	mov	r1, ip
   11814:	mov	r0, r5
   11818:	bl	10ce8 <strcmp@plt>
   1181c:	cmp	r0, #0
   11820:	bne	11804 <__assert_fail@plt+0x8d0>
   11824:	ldr	r4, [r4, #4]
   11828:	mov	r2, #5
   1182c:	cmp	r4, #0
   11830:	ldr	r1, [pc, #388]	; 119bc <__assert_fail@plt+0xa88>
   11834:	beq	118dc <__assert_fail@plt+0x9a8>
   11838:	mov	r0, #0
   1183c:	bl	10d78 <dcgettext@plt>
   11840:	ldr	r3, [pc, #376]	; 119c0 <__assert_fail@plt+0xa8c>
   11844:	ldr	r2, [pc, #376]	; 119c4 <__assert_fail@plt+0xa90>
   11848:	mov	r1, r0
   1184c:	mov	r0, #1
   11850:	bl	10e80 <__printf_chk@plt>
   11854:	mov	r1, #0
   11858:	mov	r0, #5
   1185c:	bl	10ed4 <setlocale@plt>
   11860:	cmp	r0, #0
   11864:	ldreq	r5, [pc, #332]	; 119b8 <__assert_fail@plt+0xa84>
   11868:	beq	11884 <__assert_fail@plt+0x950>
   1186c:	mov	r2, #3
   11870:	ldr	r1, [pc, #336]	; 119c8 <__assert_fail@plt+0xa94>
   11874:	bl	10f1c <strncmp@plt>
   11878:	ldr	r5, [pc, #312]	; 119b8 <__assert_fail@plt+0xa84>
   1187c:	cmp	r0, #0
   11880:	bne	1196c <__assert_fail@plt+0xa38>
   11884:	mov	r2, #5
   11888:	ldr	r1, [pc, #316]	; 119cc <__assert_fail@plt+0xa98>
   1188c:	mov	r0, #0
   11890:	bl	10d78 <dcgettext@plt>
   11894:	ldr	r3, [pc, #284]	; 119b8 <__assert_fail@plt+0xa84>
   11898:	ldr	r2, [pc, #288]	; 119c0 <__assert_fail@plt+0xa8c>
   1189c:	mov	r1, r0
   118a0:	mov	r0, #1
   118a4:	bl	10e80 <__printf_chk@plt>
   118a8:	mov	r2, #5
   118ac:	ldr	r1, [pc, #284]	; 119d0 <__assert_fail@plt+0xa9c>
   118b0:	mov	r0, #0
   118b4:	bl	10d78 <dcgettext@plt>
   118b8:	ldr	r2, [pc, #276]	; 119d4 <__assert_fail@plt+0xaa0>
   118bc:	cmp	r4, r5
   118c0:	ldr	r3, [pc, #272]	; 119d8 <__assert_fail@plt+0xaa4>
   118c4:	movne	r3, r2
   118c8:	mov	r1, r0
   118cc:	mov	r2, r4
   118d0:	mov	r0, #1
   118d4:	bl	10e80 <__printf_chk@plt>
   118d8:	b	11704 <__assert_fail@plt+0x7d0>
   118dc:	mov	r0, r4
   118e0:	bl	10d78 <dcgettext@plt>
   118e4:	ldr	r3, [pc, #212]	; 119c0 <__assert_fail@plt+0xa8c>
   118e8:	ldr	r2, [pc, #212]	; 119c4 <__assert_fail@plt+0xa90>
   118ec:	mov	r1, r0
   118f0:	mov	r0, #1
   118f4:	bl	10e80 <__printf_chk@plt>
   118f8:	mov	r1, r4
   118fc:	mov	r0, #5
   11900:	bl	10ed4 <setlocale@plt>
   11904:	cmp	r0, #0
   11908:	beq	11920 <__assert_fail@plt+0x9ec>
   1190c:	mov	r2, #3
   11910:	ldr	r1, [pc, #176]	; 119c8 <__assert_fail@plt+0xa94>
   11914:	bl	10f1c <strncmp@plt>
   11918:	cmp	r0, #0
   1191c:	bne	11964 <__assert_fail@plt+0xa30>
   11920:	mov	r2, #5
   11924:	ldr	r1, [pc, #160]	; 119cc <__assert_fail@plt+0xa98>
   11928:	mov	r0, #0
   1192c:	bl	10d78 <dcgettext@plt>
   11930:	ldr	r3, [pc, #128]	; 119b8 <__assert_fail@plt+0xa84>
   11934:	ldr	r2, [pc, #132]	; 119c0 <__assert_fail@plt+0xa8c>
   11938:	mov	r4, r3
   1193c:	mov	r1, r0
   11940:	mov	r0, #1
   11944:	bl	10e80 <__printf_chk@plt>
   11948:	ldr	r1, [pc, #128]	; 119d0 <__assert_fail@plt+0xa9c>
   1194c:	mov	r2, #5
   11950:	mov	r0, #0
   11954:	bl	10d78 <dcgettext@plt>
   11958:	ldr	r3, [pc, #120]	; 119d8 <__assert_fail@plt+0xaa4>
   1195c:	mov	r1, r0
   11960:	b	118cc <__assert_fail@plt+0x998>
   11964:	ldr	r5, [pc, #76]	; 119b8 <__assert_fail@plt+0xa84>
   11968:	mov	r4, r5
   1196c:	mov	r2, #5
   11970:	ldr	r1, [pc, #100]	; 119dc <__assert_fail@plt+0xaa8>
   11974:	mov	r0, #0
   11978:	bl	10d78 <dcgettext@plt>
   1197c:	ldr	r1, [r7]
   11980:	bl	10cd0 <fputs_unlocked@plt>
   11984:	b	11884 <__assert_fail@plt+0x950>
   11988:	andeq	sl, r2, r8, asr #2
   1198c:	andeq	r8, r1, r8, lsr r7
   11990:	andeq	sl, r2, r8, ror r1
   11994:	andeq	r8, r1, r0, ror #14
   11998:	andeq	sl, r2, r4, asr r1
   1199c:	andeq	r8, r1, ip, ror #12
   119a0:	andeq	r8, r1, r4, lsl #15
   119a4:	andeq	r8, r1, r0, asr #15
   119a8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   119ac:	andeq	r8, r1, r4, asr #16
   119b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   119b4:	andeq	r8, r1, r8, lsl #18
   119b8:	andeq	r8, r1, r0, lsr r7
   119bc:	andeq	r8, r1, r0, asr #18
   119c0:	andeq	r8, r1, r8, asr r9
   119c4:	andeq	r8, r1, r0, lsl #19
   119c8:	muleq	r1, r0, r9
   119cc:	ldrdeq	r8, [r1], -ip
   119d0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   119d4:	andeq	r8, r1, r0, lsl #15
   119d8:	andeq	r8, r1, r8, ror sl
   119dc:	muleq	r1, r4, r9
   119e0:	ldr	r3, [pc, #4]	; 119ec <__assert_fail@plt+0xab8>
   119e4:	str	r0, [r3]
   119e8:	bx	lr
   119ec:	andeq	sl, r2, r0, ror r1
   119f0:	ldr	r3, [pc, #4]	; 119fc <__assert_fail@plt+0xac8>
   119f4:	strb	r0, [r3, #4]
   119f8:	bx	lr
   119fc:	andeq	sl, r2, r0, ror r1
   11a00:	ldr	r3, [pc, #192]	; 11ac8 <__assert_fail@plt+0xb94>
   11a04:	push	{r4, r5, r6, lr}
   11a08:	sub	sp, sp, #8
   11a0c:	ldr	r0, [r3]
   11a10:	bl	17eec <__assert_fail@plt+0x6fb8>
   11a14:	cmp	r0, #0
   11a18:	beq	11a3c <__assert_fail@plt+0xb08>
   11a1c:	ldr	r4, [pc, #168]	; 11acc <__assert_fail@plt+0xb98>
   11a20:	ldrb	r3, [r4, #4]
   11a24:	cmp	r3, #0
   11a28:	beq	11a58 <__assert_fail@plt+0xb24>
   11a2c:	bl	10e5c <__errno_location@plt>
   11a30:	ldr	r3, [r0]
   11a34:	cmp	r3, #32
   11a38:	bne	11a58 <__assert_fail@plt+0xb24>
   11a3c:	ldr	r3, [pc, #140]	; 11ad0 <__assert_fail@plt+0xb9c>
   11a40:	ldr	r0, [r3]
   11a44:	bl	17eec <__assert_fail@plt+0x6fb8>
   11a48:	cmp	r0, #0
   11a4c:	bne	11aa0 <__assert_fail@plt+0xb6c>
   11a50:	add	sp, sp, #8
   11a54:	pop	{r4, r5, r6, pc}
   11a58:	mov	r2, #5
   11a5c:	ldr	r1, [pc, #112]	; 11ad4 <__assert_fail@plt+0xba0>
   11a60:	mov	r0, #0
   11a64:	bl	10d78 <dcgettext@plt>
   11a68:	ldr	r4, [r4]
   11a6c:	cmp	r4, #0
   11a70:	mov	r5, r0
   11a74:	beq	11aac <__assert_fail@plt+0xb78>
   11a78:	bl	10e5c <__errno_location@plt>
   11a7c:	ldr	r6, [r0]
   11a80:	mov	r0, r4
   11a84:	bl	14930 <__assert_fail@plt+0x39fc>
   11a88:	mov	r1, r6
   11a8c:	str	r5, [sp]
   11a90:	ldr	r2, [pc, #64]	; 11ad8 <__assert_fail@plt+0xba4>
   11a94:	mov	r3, r0
   11a98:	mov	r0, #0
   11a9c:	bl	10de4 <error@plt>
   11aa0:	ldr	r3, [pc, #52]	; 11adc <__assert_fail@plt+0xba8>
   11aa4:	ldr	r0, [r3]
   11aa8:	bl	10d24 <_exit@plt>
   11aac:	bl	10e5c <__errno_location@plt>
   11ab0:	mov	r3, r5
   11ab4:	ldr	r2, [pc, #36]	; 11ae0 <__assert_fail@plt+0xbac>
   11ab8:	ldr	r1, [r0]
   11abc:	mov	r0, r4
   11ac0:	bl	10de4 <error@plt>
   11ac4:	b	11aa0 <__assert_fail@plt+0xb6c>
   11ac8:	andeq	sl, r2, r4, asr r1
   11acc:	andeq	sl, r2, r0, ror r1
   11ad0:	andeq	sl, r2, r8, asr #2
   11ad4:	andeq	r8, r1, r4, lsl fp
   11ad8:	andeq	r8, r1, r0, lsr #22
   11adc:	strdeq	sl, [r2], -r0
   11ae0:	andeq	r8, r1, r4, lsr #22
   11ae4:	push	{r4, r5}
   11ae8:	pop	{r4, r5}
   11aec:	b	10cf4 <posix_fadvise64@plt>
   11af0:	cmp	r0, #0
   11af4:	bxeq	lr
   11af8:	push	{r4, lr}
   11afc:	sub	sp, sp, #16
   11b00:	mov	r4, r1
   11b04:	bl	10e8c <fileno@plt>
   11b08:	mov	r2, #0
   11b0c:	mov	r3, #0
   11b10:	str	r4, [sp, #8]
   11b14:	strd	r2, [sp]
   11b18:	bl	10cf4 <posix_fadvise64@plt>
   11b1c:	add	sp, sp, #16
   11b20:	pop	{r4, pc}
   11b24:	push	{r4, r5, lr}
   11b28:	sub	sp, sp, #12
   11b2c:	mov	r4, r0
   11b30:	bl	10e8c <fileno@plt>
   11b34:	cmp	r0, #0
   11b38:	mov	r0, r4
   11b3c:	blt	11bb8 <__assert_fail@plt+0xc84>
   11b40:	bl	10e08 <__freading@plt>
   11b44:	cmp	r0, #0
   11b48:	bne	11b84 <__assert_fail@plt+0xc50>
   11b4c:	mov	r0, r4
   11b50:	bl	11bc4 <__assert_fail@plt+0xc90>
   11b54:	cmp	r0, #0
   11b58:	beq	11bb4 <__assert_fail@plt+0xc80>
   11b5c:	bl	10e5c <__errno_location@plt>
   11b60:	mov	r5, r0
   11b64:	mov	r0, r4
   11b68:	ldr	r4, [r5]
   11b6c:	bl	10ea4 <fclose@plt>
   11b70:	cmp	r4, #0
   11b74:	mvnne	r0, #0
   11b78:	strne	r4, [r5]
   11b7c:	add	sp, sp, #12
   11b80:	pop	{r4, r5, pc}
   11b84:	mov	r0, r4
   11b88:	bl	10e8c <fileno@plt>
   11b8c:	mov	r3, #1
   11b90:	str	r3, [sp]
   11b94:	mov	r2, #0
   11b98:	mov	r3, #0
   11b9c:	bl	10db4 <lseek64@plt>
   11ba0:	mvn	r3, #0
   11ba4:	mvn	r2, #0
   11ba8:	cmp	r1, r3
   11bac:	cmpeq	r0, r2
   11bb0:	bne	11b4c <__assert_fail@plt+0xc18>
   11bb4:	mov	r0, r4
   11bb8:	add	sp, sp, #12
   11bbc:	pop	{r4, r5, lr}
   11bc0:	b	10ea4 <fclose@plt>
   11bc4:	push	{r4, lr}
   11bc8:	subs	r4, r0, #0
   11bcc:	sub	sp, sp, #8
   11bd0:	beq	11bec <__assert_fail@plt+0xcb8>
   11bd4:	bl	10e08 <__freading@plt>
   11bd8:	cmp	r0, #0
   11bdc:	beq	11bec <__assert_fail@plt+0xcb8>
   11be0:	ldr	r3, [r4]
   11be4:	tst	r3, #256	; 0x100
   11be8:	bne	11bfc <__assert_fail@plt+0xcc8>
   11bec:	mov	r0, r4
   11bf0:	add	sp, sp, #8
   11bf4:	pop	{r4, lr}
   11bf8:	b	10d00 <fflush@plt>
   11bfc:	mov	r3, #1
   11c00:	str	r3, [sp]
   11c04:	mov	r2, #0
   11c08:	mov	r3, #0
   11c0c:	mov	r0, r4
   11c10:	bl	11c24 <__assert_fail@plt+0xcf0>
   11c14:	mov	r0, r4
   11c18:	add	sp, sp, #8
   11c1c:	pop	{r4, lr}
   11c20:	b	10d00 <fflush@plt>
   11c24:	push	{r4, r5, r6, r7, r8, lr}
   11c28:	sub	sp, sp, #8
   11c2c:	ldmib	r0, {ip, lr}
   11c30:	mov	r4, r0
   11c34:	ldr	r5, [sp, #32]
   11c38:	cmp	lr, ip
   11c3c:	beq	11c54 <__assert_fail@plt+0xd20>
   11c40:	str	r5, [sp, #32]
   11c44:	mov	r0, r4
   11c48:	add	sp, sp, #8
   11c4c:	pop	{r4, r5, r6, r7, r8, lr}
   11c50:	b	10eb0 <fseeko64@plt>
   11c54:	ldr	lr, [r0, #20]
   11c58:	ldr	ip, [r0, #16]
   11c5c:	cmp	lr, ip
   11c60:	bne	11c40 <__assert_fail@plt+0xd0c>
   11c64:	ldr	r8, [r0, #36]	; 0x24
   11c68:	cmp	r8, #0
   11c6c:	bne	11c40 <__assert_fail@plt+0xd0c>
   11c70:	mov	r6, r2
   11c74:	mov	r7, r3
   11c78:	bl	10e8c <fileno@plt>
   11c7c:	mov	r2, r6
   11c80:	mov	r3, r7
   11c84:	str	r5, [sp]
   11c88:	bl	10db4 <lseek64@plt>
   11c8c:	mvn	r3, #0
   11c90:	mvn	r2, #0
   11c94:	cmp	r1, r3
   11c98:	cmpeq	r0, r2
   11c9c:	beq	11cbc <__assert_fail@plt+0xd88>
   11ca0:	ldr	r3, [r4]
   11ca4:	strd	r0, [r4, #80]	; 0x50
   11ca8:	mov	r0, r8
   11cac:	bic	r3, r3, #16
   11cb0:	str	r3, [r4]
   11cb4:	add	sp, sp, #8
   11cb8:	pop	{r4, r5, r6, r7, r8, pc}
   11cbc:	mvn	r0, #0
   11cc0:	b	11cb4 <__assert_fail@plt+0xd80>
   11cc4:	push	{r4, r5, r6, lr}
   11cc8:	subs	r4, r0, #0
   11ccc:	beq	11d40 <__assert_fail@plt+0xe0c>
   11cd0:	mov	r1, #47	; 0x2f
   11cd4:	bl	10ee0 <strrchr@plt>
   11cd8:	subs	r5, r0, #0
   11cdc:	beq	11d2c <__assert_fail@plt+0xdf8>
   11ce0:	add	r6, r5, #1
   11ce4:	sub	r3, r6, r4
   11ce8:	cmp	r3, #6
   11cec:	ble	11d2c <__assert_fail@plt+0xdf8>
   11cf0:	mov	r2, #7
   11cf4:	ldr	r1, [pc, #96]	; 11d5c <__assert_fail@plt+0xe28>
   11cf8:	sub	r0, r5, #6
   11cfc:	bl	10f1c <strncmp@plt>
   11d00:	cmp	r0, #0
   11d04:	bne	11d2c <__assert_fail@plt+0xdf8>
   11d08:	mov	r2, #3
   11d0c:	ldr	r1, [pc, #76]	; 11d60 <__assert_fail@plt+0xe2c>
   11d10:	mov	r0, r6
   11d14:	bl	10f1c <strncmp@plt>
   11d18:	cmp	r0, #0
   11d1c:	movne	r4, r6
   11d20:	ldreq	r3, [pc, #60]	; 11d64 <__assert_fail@plt+0xe30>
   11d24:	addeq	r4, r5, #4
   11d28:	streq	r4, [r3]
   11d2c:	ldr	r2, [pc, #52]	; 11d68 <__assert_fail@plt+0xe34>
   11d30:	ldr	r3, [pc, #52]	; 11d6c <__assert_fail@plt+0xe38>
   11d34:	str	r4, [r2]
   11d38:	str	r4, [r3]
   11d3c:	pop	{r4, r5, r6, pc}
   11d40:	ldr	r3, [pc, #40]	; 11d70 <__assert_fail@plt+0xe3c>
   11d44:	mov	r2, #55	; 0x37
   11d48:	mov	r1, #1
   11d4c:	ldr	r3, [r3]
   11d50:	ldr	r0, [pc, #28]	; 11d74 <__assert_fail@plt+0xe40>
   11d54:	bl	10da8 <fwrite@plt>
   11d58:	bl	10f28 <abort@plt>
   11d5c:	andeq	r8, r1, r0, ror #22
   11d60:	andeq	r8, r1, r8, ror #22
   11d64:	andeq	sl, r2, r8, lsr r1
   11d68:	andeq	sl, r2, r8, ror r1
   11d6c:	andeq	sl, r2, ip, lsr r1
   11d70:	andeq	sl, r2, r8, asr #2
   11d74:	andeq	r8, r1, r8, lsr #22
   11d78:	push	{r4, r5, r6, lr}
   11d7c:	mov	r4, r0
   11d80:	mov	r5, r1
   11d84:	bl	17fc0 <__assert_fail@plt+0x708c>
   11d88:	ldrb	r3, [r0]
   11d8c:	bic	r3, r3, #32
   11d90:	cmp	r3, #85	; 0x55
   11d94:	bne	11df4 <__assert_fail@plt+0xec0>
   11d98:	ldrb	r3, [r0, #1]
   11d9c:	bic	r3, r3, #32
   11da0:	cmp	r3, #84	; 0x54
   11da4:	bne	11e30 <__assert_fail@plt+0xefc>
   11da8:	ldrb	r3, [r0, #2]
   11dac:	bic	r3, r3, #32
   11db0:	cmp	r3, #70	; 0x46
   11db4:	bne	11e30 <__assert_fail@plt+0xefc>
   11db8:	ldrb	r3, [r0, #3]
   11dbc:	cmp	r3, #45	; 0x2d
   11dc0:	bne	11e30 <__assert_fail@plt+0xefc>
   11dc4:	ldrb	r3, [r0, #4]
   11dc8:	cmp	r3, #56	; 0x38
   11dcc:	bne	11e30 <__assert_fail@plt+0xefc>
   11dd0:	ldrb	r3, [r0, #5]
   11dd4:	cmp	r3, #0
   11dd8:	bne	11e30 <__assert_fail@plt+0xefc>
   11ddc:	ldrb	r2, [r4]
   11de0:	ldr	r3, [pc, #152]	; 11e80 <__assert_fail@plt+0xf4c>
   11de4:	ldr	r0, [pc, #152]	; 11e84 <__assert_fail@plt+0xf50>
   11de8:	cmp	r2, #96	; 0x60
   11dec:	movne	r0, r3
   11df0:	pop	{r4, r5, r6, pc}
   11df4:	cmp	r3, #71	; 0x47
   11df8:	bne	11e30 <__assert_fail@plt+0xefc>
   11dfc:	ldrb	r3, [r0, #1]
   11e00:	bic	r3, r3, #32
   11e04:	cmp	r3, #66	; 0x42
   11e08:	bne	11e30 <__assert_fail@plt+0xefc>
   11e0c:	ldrb	r3, [r0, #2]
   11e10:	cmp	r3, #49	; 0x31
   11e14:	bne	11e30 <__assert_fail@plt+0xefc>
   11e18:	ldrb	r3, [r0, #3]
   11e1c:	cmp	r3, #56	; 0x38
   11e20:	bne	11e30 <__assert_fail@plt+0xefc>
   11e24:	ldrb	r3, [r0, #4]
   11e28:	cmp	r3, #48	; 0x30
   11e2c:	beq	11e44 <__assert_fail@plt+0xf10>
   11e30:	ldr	r3, [pc, #80]	; 11e88 <__assert_fail@plt+0xf54>
   11e34:	cmp	r5, #9
   11e38:	ldr	r0, [pc, #76]	; 11e8c <__assert_fail@plt+0xf58>
   11e3c:	movne	r0, r3
   11e40:	pop	{r4, r5, r6, pc}
   11e44:	ldrb	r3, [r0, #5]
   11e48:	cmp	r3, #51	; 0x33
   11e4c:	bne	11e30 <__assert_fail@plt+0xefc>
   11e50:	ldrb	r3, [r0, #6]
   11e54:	cmp	r3, #48	; 0x30
   11e58:	bne	11e30 <__assert_fail@plt+0xefc>
   11e5c:	ldrb	r3, [r0, #7]
   11e60:	cmp	r3, #0
   11e64:	bne	11e30 <__assert_fail@plt+0xefc>
   11e68:	ldrb	r2, [r4]
   11e6c:	ldr	r3, [pc, #28]	; 11e90 <__assert_fail@plt+0xf5c>
   11e70:	ldr	r0, [pc, #28]	; 11e94 <__assert_fail@plt+0xf60>
   11e74:	cmp	r2, #96	; 0x60
   11e78:	movne	r0, r3
   11e7c:	pop	{r4, r5, r6, pc}
   11e80:	andeq	r8, r1, r4, asr #23
   11e84:	andeq	r8, r1, r0, asr #23
   11e88:	ldrdeq	r8, [r1], -r4
   11e8c:	ldrdeq	r8, [r1], -r0
   11e90:	andeq	r8, r1, ip, asr #23
   11e94:	andeq	r8, r1, r8, asr #23
   11e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e9c:	sub	sp, sp, #140	; 0x8c
   11ea0:	mov	r9, r1
   11ea4:	str	r3, [sp, #24]
   11ea8:	mov	r3, #1
   11eac:	mov	sl, r0
   11eb0:	str	r2, [sp, #44]	; 0x2c
   11eb4:	str	r3, [sp, #28]
   11eb8:	bl	10dc0 <__ctype_get_mb_cur_max@plt>
   11ebc:	ldr	r3, [sp, #180]	; 0xb4
   11ec0:	mov	fp, r9
   11ec4:	mov	r9, sl
   11ec8:	lsr	r3, r3, #1
   11ecc:	and	r3, r3, #1
   11ed0:	str	r3, [sp, #40]	; 0x28
   11ed4:	ldr	r3, [sp, #180]	; 0xb4
   11ed8:	mov	r2, #0
   11edc:	and	r3, r3, #4
   11ee0:	str	r3, [sp, #100]	; 0x64
   11ee4:	ldr	r3, [sp, #180]	; 0xb4
   11ee8:	str	r2, [sp, #76]	; 0x4c
   11eec:	and	r3, r3, #1
   11ef0:	str	r3, [sp, #96]	; 0x60
   11ef4:	str	r2, [sp, #36]	; 0x24
   11ef8:	str	r2, [sp, #56]	; 0x38
   11efc:	str	r2, [sp, #68]	; 0x44
   11f00:	str	r2, [sp, #72]	; 0x48
   11f04:	str	r2, [sp, #84]	; 0x54
   11f08:	str	r0, [sp, #80]	; 0x50
   11f0c:	ldr	r3, [sp, #176]	; 0xb0
   11f10:	cmp	r3, #10
   11f14:	ldrls	pc, [pc, r3, lsl #2]
   11f18:	b	130f0 <__assert_fail@plt+0x21bc>
   11f1c:	andeq	r1, r1, r8, asr #30
   11f20:	andeq	r2, r1, r8, ror #4
   11f24:	andeq	r2, r1, r0, asr #7
   11f28:	muleq	r1, ip, r2
   11f2c:	andeq	r2, r1, r4, lsl r4
   11f30:	strdeq	r2, [r1], -r4
   11f34:			; <UNDEFINED> instruction: 0x000122bc
   11f38:	andeq	r2, r1, r0, ror #5
   11f3c:	andeq	r2, r1, r8, lsl #6
   11f40:	andeq	r2, r1, r8, lsl #6
   11f44:	andeq	r2, r1, r8, lsl #6
   11f48:	mov	r3, #0
   11f4c:	ldr	r1, [sp, #56]	; 0x38
   11f50:	ldr	r2, [sp, #176]	; 0xb0
   11f54:	ldr	lr, [sp, #176]	; 0xb0
   11f58:	mov	r8, r3
   11f5c:	mov	ip, r3
   11f60:	str	r3, [sp, #40]	; 0x28
   11f64:	mov	r3, r1
   11f68:	cmp	r2, #2
   11f6c:	moveq	r3, #0
   11f70:	andne	r3, r3, #1
   11f74:	mov	r0, r3
   11f78:	str	r3, [sp, #92]	; 0x5c
   11f7c:	ldr	r3, [sp, #68]	; 0x44
   11f80:	sub	lr, lr, #2
   11f84:	adds	r2, r3, #0
   11f88:	movne	r2, #1
   11f8c:	and	r3, r1, ip
   11f90:	and	r3, r2, r3
   11f94:	clz	lr, lr
   11f98:	str	r3, [sp, #88]	; 0x58
   11f9c:	lsr	lr, lr, #5
   11fa0:	mov	r3, ip
   11fa4:	and	r3, r3, lr
   11fa8:	mov	sl, #0
   11fac:	and	r0, r2, r0
   11fb0:	str	r3, [sp, #64]	; 0x40
   11fb4:	eor	r3, r1, #1
   11fb8:	str	lr, [sp, #52]	; 0x34
   11fbc:	str	r0, [sp, #48]	; 0x30
   11fc0:	str	r3, [sp, #60]	; 0x3c
   11fc4:	ldr	r3, [sp, #24]
   11fc8:	cmn	r3, #1
   11fcc:	beq	124fc <__assert_fail@plt+0x15c8>
   11fd0:	subs	r7, r3, sl
   11fd4:	movne	r7, #1
   11fd8:	cmp	r7, #0
   11fdc:	beq	12514 <__assert_fail@plt+0x15e0>
   11fe0:	ldr	r3, [sp, #48]	; 0x30
   11fe4:	cmp	r3, #0
   11fe8:	beq	12880 <__assert_fail@plt+0x194c>
   11fec:	ldr	r2, [sp, #68]	; 0x44
   11ff0:	ldr	r1, [sp, #24]
   11ff4:	cmp	r2, #1
   11ff8:	mov	r3, r2
   11ffc:	movls	r3, #0
   12000:	movhi	r3, #1
   12004:	cmn	r1, #1
   12008:	movne	r3, #0
   1200c:	cmp	r3, #0
   12010:	add	r4, sl, r2
   12014:	beq	12024 <__assert_fail@plt+0x10f0>
   12018:	ldr	r0, [sp, #44]	; 0x2c
   1201c:	bl	10e44 <strlen@plt>
   12020:	str	r0, [sp, #24]
   12024:	ldr	r3, [sp, #24]
   12028:	cmp	r3, r4
   1202c:	ldr	r3, [sp, #44]	; 0x2c
   12030:	add	r5, r3, sl
   12034:	bcc	12888 <__assert_fail@plt+0x1954>
   12038:	mov	r0, r5
   1203c:	ldr	r2, [sp, #68]	; 0x44
   12040:	ldr	r1, [sp, #72]	; 0x48
   12044:	bl	10d60 <memcmp@plt>
   12048:	cmp	r0, #0
   1204c:	bne	12888 <__assert_fail@plt+0x1954>
   12050:	ldr	r3, [sp, #40]	; 0x28
   12054:	cmp	r3, #0
   12058:	bne	13244 <__assert_fail@plt+0x2310>
   1205c:	ldrb	r4, [r5]
   12060:	cmp	r4, #126	; 0x7e
   12064:	ldrls	pc, [pc, r4, lsl #2]
   12068:	b	13180 <__assert_fail@plt+0x224c>
   1206c:	andeq	r2, r1, r0, asr #14
   12070:	andeq	r3, r1, r0, lsl #3
   12074:	andeq	r3, r1, r0, lsl #3
   12078:	andeq	r3, r1, r0, lsl #3
   1207c:	andeq	r3, r1, r0, lsl #3
   12080:	andeq	r3, r1, r0, lsl #3
   12084:	andeq	r3, r1, r0, lsl #3
   12088:	andeq	r2, r1, ip, lsr #14
   1208c:	andeq	r2, r1, r8, lsl r7
   12090:	strdeq	r2, [r1], -r4
   12094:	ldrdeq	r2, [r1], -r4
   12098:	andeq	r2, r1, r4, lsl #14
   1209c:	andeq	r2, r1, ip, lsr r6
   120a0:	andeq	r2, r1, r0, ror r8
   120a4:	andeq	r3, r1, r0, lsl #3
   120a8:	andeq	r3, r1, r0, lsl #3
   120ac:	andeq	r3, r1, r0, lsl #3
   120b0:	andeq	r3, r1, r0, lsl #3
   120b4:	andeq	r3, r1, r0, lsl #3
   120b8:	andeq	r3, r1, r0, lsl #3
   120bc:	andeq	r3, r1, r0, lsl #3
   120c0:	andeq	r3, r1, r0, lsl #3
   120c4:	andeq	r3, r1, r0, lsl #3
   120c8:	andeq	r3, r1, r0, lsl #3
   120cc:	andeq	r3, r1, r0, lsl #3
   120d0:	andeq	r3, r1, r0, lsl #3
   120d4:	andeq	r3, r1, r0, lsl #3
   120d8:	andeq	r3, r1, r0, lsl #3
   120dc:	andeq	r3, r1, r0, lsl #3
   120e0:	andeq	r3, r1, r0, lsl #3
   120e4:	andeq	r3, r1, r0, lsl #3
   120e8:	andeq	r3, r1, r0, lsl #3
   120ec:	andeq	r2, r1, r0, ror #16
   120f0:	andeq	r2, r1, r0, asr #16
   120f4:	andeq	r2, r1, r0, asr #16
   120f8:	andeq	r2, r1, r0, lsr #16
   120fc:	andeq	r2, r1, r0, asr #16
   12100:	andeq	r2, r1, ip, lsr #12
   12104:	andeq	r2, r1, r0, asr #16
   12108:	andeq	r2, r1, r8, lsl #12
   1210c:	andeq	r2, r1, r0, asr #16
   12110:	andeq	r2, r1, r0, asr #16
   12114:	andeq	r2, r1, r0, asr #16
   12118:	andeq	r2, r1, ip, lsr #12
   1211c:	andeq	r2, r1, ip, lsr #12
   12120:	andeq	r2, r1, ip, lsr #12
   12124:	andeq	r2, r1, ip, lsr #12
   12128:	andeq	r2, r1, ip, lsr #12
   1212c:	andeq	r2, r1, ip, lsr #12
   12130:	andeq	r2, r1, ip, lsr #12
   12134:	andeq	r2, r1, ip, lsr #12
   12138:	andeq	r2, r1, ip, lsr #12
   1213c:	andeq	r2, r1, ip, lsr #12
   12140:	andeq	r2, r1, ip, lsr #12
   12144:	andeq	r2, r1, ip, lsr #12
   12148:	andeq	r2, r1, ip, lsr #12
   1214c:	andeq	r2, r1, ip, lsr #12
   12150:	andeq	r2, r1, ip, lsr #12
   12154:	andeq	r2, r1, ip, lsr #12
   12158:	andeq	r2, r1, r0, asr #16
   1215c:	andeq	r2, r1, r0, asr #16
   12160:	andeq	r2, r1, r0, asr #16
   12164:	andeq	r2, r1, r0, asr #16
   12168:			; <UNDEFINED> instruction: 0x000125b8
   1216c:	andeq	r3, r1, r0, lsl #3
   12170:	andeq	r2, r1, ip, lsr #12
   12174:	andeq	r2, r1, ip, lsr #12
   12178:	andeq	r2, r1, ip, lsr #12
   1217c:	andeq	r2, r1, ip, lsr #12
   12180:	andeq	r2, r1, ip, lsr #12
   12184:	andeq	r2, r1, ip, lsr #12
   12188:	andeq	r2, r1, ip, lsr #12
   1218c:	andeq	r2, r1, ip, lsr #12
   12190:	andeq	r2, r1, ip, lsr #12
   12194:	andeq	r2, r1, ip, lsr #12
   12198:	andeq	r2, r1, ip, lsr #12
   1219c:	andeq	r2, r1, ip, lsr #12
   121a0:	andeq	r2, r1, ip, lsr #12
   121a4:	andeq	r2, r1, ip, lsr #12
   121a8:	andeq	r2, r1, ip, lsr #12
   121ac:	andeq	r2, r1, ip, lsr #12
   121b0:	andeq	r2, r1, ip, lsr #12
   121b4:	andeq	r2, r1, ip, lsr #12
   121b8:	andeq	r2, r1, ip, lsr #12
   121bc:	andeq	r2, r1, ip, lsr #12
   121c0:	andeq	r2, r1, ip, lsr #12
   121c4:	andeq	r2, r1, ip, lsr #12
   121c8:	andeq	r2, r1, ip, lsr #12
   121cc:	andeq	r2, r1, ip, lsr #12
   121d0:	andeq	r2, r1, ip, lsr #12
   121d4:	andeq	r2, r1, ip, lsr #12
   121d8:	andeq	r2, r1, r0, asr #16
   121dc:	andeq	r2, r1, r4, lsl #11
   121e0:	andeq	r2, r1, ip, lsr #12
   121e4:	andeq	r2, r1, r0, asr #16
   121e8:	andeq	r2, r1, ip, lsr #12
   121ec:	andeq	r2, r1, r0, asr #16
   121f0:	andeq	r2, r1, ip, lsr #12
   121f4:	andeq	r2, r1, ip, lsr #12
   121f8:	andeq	r2, r1, ip, lsr #12
   121fc:	andeq	r2, r1, ip, lsr #12
   12200:	andeq	r2, r1, ip, lsr #12
   12204:	andeq	r2, r1, ip, lsr #12
   12208:	andeq	r2, r1, ip, lsr #12
   1220c:	andeq	r2, r1, ip, lsr #12
   12210:	andeq	r2, r1, ip, lsr #12
   12214:	andeq	r2, r1, ip, lsr #12
   12218:	andeq	r2, r1, ip, lsr #12
   1221c:	andeq	r2, r1, ip, lsr #12
   12220:	andeq	r2, r1, ip, lsr #12
   12224:	andeq	r2, r1, ip, lsr #12
   12228:	andeq	r2, r1, ip, lsr #12
   1222c:	andeq	r2, r1, ip, lsr #12
   12230:	andeq	r2, r1, ip, lsr #12
   12234:	andeq	r2, r1, ip, lsr #12
   12238:	andeq	r2, r1, ip, lsr #12
   1223c:	andeq	r2, r1, ip, lsr #12
   12240:	andeq	r2, r1, ip, lsr #12
   12244:	andeq	r2, r1, ip, lsr #12
   12248:	andeq	r2, r1, ip, lsr #12
   1224c:	andeq	r2, r1, ip, lsr #12
   12250:	andeq	r2, r1, ip, lsr #12
   12254:	andeq	r2, r1, ip, lsr #12
   12258:	andeq	r2, r1, ip, lsr r4
   1225c:	andeq	r2, r1, r0, asr #16
   12260:	andeq	r2, r1, ip, lsr r4
   12264:	andeq	r2, r1, r0, lsr #16
   12268:	mov	r3, #1
   1226c:	str	r3, [sp, #40]	; 0x28
   12270:	str	r3, [sp, #68]	; 0x44
   12274:	mov	r8, #0
   12278:	ldr	r3, [pc, #4056]	; 13258 <__assert_fail@plt+0x2324>
   1227c:	str	r3, [sp, #72]	; 0x48
   12280:	mov	r3, #2
   12284:	str	r3, [sp, #176]	; 0xb0
   12288:	ldr	r1, [sp, #56]	; 0x38
   1228c:	mov	r2, r3
   12290:	ldr	ip, [sp, #40]	; 0x28
   12294:	mov	lr, r3
   12298:	b	11f64 <__assert_fail@plt+0x1030>
   1229c:	mov	r3, #1
   122a0:	str	r3, [sp, #56]	; 0x38
   122a4:	str	r3, [sp, #68]	; 0x44
   122a8:	str	r3, [sp, #40]	; 0x28
   122ac:	ldr	r3, [pc, #4004]	; 13258 <__assert_fail@plt+0x2324>
   122b0:	mov	r8, #0
   122b4:	str	r3, [sp, #72]	; 0x48
   122b8:	b	12280 <__assert_fail@plt+0x134c>
   122bc:	mov	r3, #1
   122c0:	str	r3, [sp, #56]	; 0x38
   122c4:	str	r3, [sp, #68]	; 0x44
   122c8:	str	r3, [sp, #40]	; 0x28
   122cc:	ldr	r3, [pc, #3976]	; 1325c <__assert_fail@plt+0x2328>
   122d0:	mov	r8, #0
   122d4:	str	r3, [sp, #72]	; 0x48
   122d8:	mov	r3, #5
   122dc:	b	12284 <__assert_fail@plt+0x1350>
   122e0:	mov	r3, #0
   122e4:	str	r3, [sp, #40]	; 0x28
   122e8:	mov	r3, #1
   122ec:	str	r3, [sp, #56]	; 0x38
   122f0:	mov	r8, #0
   122f4:	mov	r1, r3
   122f8:	ldr	r2, [sp, #176]	; 0xb0
   122fc:	ldr	ip, [sp, #40]	; 0x28
   12300:	ldr	lr, [sp, #176]	; 0xb0
   12304:	b	11f64 <__assert_fail@plt+0x1030>
   12308:	ldr	r3, [sp, #176]	; 0xb0
   1230c:	cmp	r3, #10
   12310:	beq	12354 <__assert_fail@plt+0x1420>
   12314:	mov	r2, #5
   12318:	ldr	r1, [pc, #3904]	; 13260 <__assert_fail@plt+0x232c>
   1231c:	mov	r0, #0
   12320:	bl	10d78 <dcgettext@plt>
   12324:	ldr	r2, [pc, #3892]	; 13260 <__assert_fail@plt+0x232c>
   12328:	cmp	r0, r2
   1232c:	str	r0, [sp, #188]	; 0xbc
   12330:	beq	133ec <__assert_fail@plt+0x24b8>
   12334:	mov	r2, #5
   12338:	ldr	r1, [pc, #3864]	; 13258 <__assert_fail@plt+0x2324>
   1233c:	mov	r0, #0
   12340:	bl	10d78 <dcgettext@plt>
   12344:	ldr	r2, [pc, #3852]	; 13258 <__assert_fail@plt+0x2324>
   12348:	cmp	r0, r2
   1234c:	str	r0, [sp, #192]	; 0xc0
   12350:	beq	133dc <__assert_fail@plt+0x24a8>
   12354:	ldr	r8, [sp, #40]	; 0x28
   12358:	cmp	r8, #0
   1235c:	movne	r8, #0
   12360:	bne	12390 <__assert_fail@plt+0x145c>
   12364:	ldr	r3, [sp, #188]	; 0xbc
   12368:	ldrb	r3, [r3]
   1236c:	cmp	r3, #0
   12370:	beq	12390 <__assert_fail@plt+0x145c>
   12374:	ldr	r2, [sp, #188]	; 0xbc
   12378:	cmp	fp, r8
   1237c:	strbhi	r3, [r9, r8]
   12380:	ldrb	r3, [r2, #1]!
   12384:	add	r8, r8, #1
   12388:	cmp	r3, #0
   1238c:	bne	12378 <__assert_fail@plt+0x1444>
   12390:	ldr	r0, [sp, #192]	; 0xc0
   12394:	bl	10e44 <strlen@plt>
   12398:	ldr	r3, [sp, #192]	; 0xc0
   1239c:	ldr	r2, [sp, #176]	; 0xb0
   123a0:	str	r3, [sp, #72]	; 0x48
   123a4:	mov	r3, #1
   123a8:	str	r3, [sp, #56]	; 0x38
   123ac:	mov	r1, r3
   123b0:	ldr	ip, [sp, #40]	; 0x28
   123b4:	ldr	lr, [sp, #176]	; 0xb0
   123b8:	str	r0, [sp, #68]	; 0x44
   123bc:	b	11f64 <__assert_fail@plt+0x1030>
   123c0:	ldr	r3, [sp, #40]	; 0x28
   123c4:	cmp	r3, #0
   123c8:	beq	13070 <__assert_fail@plt+0x213c>
   123cc:	mov	r3, #1
   123d0:	str	r3, [sp, #68]	; 0x44
   123d4:	ldr	r3, [pc, #3708]	; 13258 <__assert_fail@plt+0x2324>
   123d8:	str	r3, [sp, #72]	; 0x48
   123dc:	mov	r8, #0
   123e0:	ldr	r1, [sp, #56]	; 0x38
   123e4:	ldr	r2, [sp, #176]	; 0xb0
   123e8:	ldr	ip, [sp, #40]	; 0x28
   123ec:	ldr	lr, [sp, #176]	; 0xb0
   123f0:	b	11f64 <__assert_fail@plt+0x1030>
   123f4:	ldr	r3, [sp, #40]	; 0x28
   123f8:	cmp	r3, #0
   123fc:	beq	130f4 <__assert_fail@plt+0x21c0>
   12400:	str	r3, [sp, #56]	; 0x38
   12404:	mov	r3, #1
   12408:	str	r3, [sp, #68]	; 0x44
   1240c:	ldr	r3, [pc, #3656]	; 1325c <__assert_fail@plt+0x2328>
   12410:	b	123d8 <__assert_fail@plt+0x14a4>
   12414:	ldr	r3, [sp, #40]	; 0x28
   12418:	cmp	r3, #0
   1241c:	mov	r3, #1
   12420:	streq	r3, [sp, #56]	; 0x38
   12424:	beq	13070 <__assert_fail@plt+0x213c>
   12428:	str	r3, [sp, #68]	; 0x44
   1242c:	ldr	r3, [pc, #3620]	; 13258 <__assert_fail@plt+0x2324>
   12430:	mov	r8, #0
   12434:	str	r3, [sp, #72]	; 0x48
   12438:	b	12280 <__assert_fail@plt+0x134c>
   1243c:	ldr	r3, [sp, #24]
   12440:	ldr	r6, [sp, #48]	; 0x30
   12444:	cmn	r3, #1
   12448:	beq	12aa4 <__assert_fail@plt+0x1b70>
   1244c:	subs	r3, r3, #1
   12450:	movne	r3, #1
   12454:	cmp	r3, #0
   12458:	beq	12824 <__assert_fail@plt+0x18f0>
   1245c:	ldr	r1, [sp, #52]	; 0x34
   12460:	mov	r7, r3
   12464:	mov	r3, #0
   12468:	str	r3, [sp, #32]
   1246c:	ldr	r3, [sp, #60]	; 0x3c
   12470:	orr	r2, r1, r3
   12474:	ldr	r3, [sp, #40]	; 0x28
   12478:	eor	r2, r2, #1
   1247c:	orr	r2, r3, r2
   12480:	tst	r2, #255	; 0xff
   12484:	bne	12da8 <__assert_fail@plt+0x1e74>
   12488:	cmp	r6, #0
   1248c:	bne	12668 <__assert_fail@plt+0x1734>
   12490:	ldr	r3, [sp, #36]	; 0x24
   12494:	add	sl, sl, #1
   12498:	and	r3, r3, r7
   1249c:	uxtb	r6, r3
   124a0:	cmp	r6, #0
   124a4:	beq	124d0 <__assert_fail@plt+0x159c>
   124a8:	cmp	fp, r8
   124ac:	movhi	r3, #39	; 0x27
   124b0:	strbhi	r3, [r9, r8]
   124b4:	add	r3, r8, #1
   124b8:	cmp	fp, r3
   124bc:	movhi	r2, #39	; 0x27
   124c0:	add	r8, r8, #2
   124c4:	strbhi	r2, [r9, r3]
   124c8:	mov	r3, #0
   124cc:	str	r3, [sp, #36]	; 0x24
   124d0:	ldr	r2, [sp, #32]
   124d4:	cmp	r8, fp
   124d8:	ldr	r3, [sp, #28]
   124dc:	strbcc	r4, [r9, r8]
   124e0:	cmp	r2, #0
   124e4:	moveq	r3, #0
   124e8:	str	r3, [sp, #28]
   124ec:	ldr	r3, [sp, #24]
   124f0:	add	r8, r8, #1
   124f4:	cmn	r3, #1
   124f8:	bne	11fd0 <__assert_fail@plt+0x109c>
   124fc:	ldr	r3, [sp, #44]	; 0x2c
   12500:	ldrb	r3, [r3, sl]
   12504:	adds	r7, r3, #0
   12508:	movne	r7, #1
   1250c:	cmp	r7, #0
   12510:	bne	11fe0 <__assert_fail@plt+0x10ac>
   12514:	ldr	r3, [sp, #64]	; 0x40
   12518:	cmp	r8, #0
   1251c:	movne	r3, #0
   12520:	andeq	r3, r3, #1
   12524:	cmp	r3, #0
   12528:	str	r3, [sp, #64]	; 0x40
   1252c:	bne	12fd0 <__assert_fail@plt+0x209c>
   12530:	ldr	r3, [sp, #40]	; 0x28
   12534:	ldr	r2, [sp, #52]	; 0x34
   12538:	eor	r3, r3, #1
   1253c:	ands	r2, r2, r3
   12540:	beq	133fc <__assert_fail@plt+0x24c8>
   12544:	ldr	r3, [sp, #76]	; 0x4c
   12548:	cmp	r3, #0
   1254c:	beq	133cc <__assert_fail@plt+0x2498>
   12550:	ldr	r3, [sp, #28]
   12554:	cmp	r3, #0
   12558:	bne	13388 <__assert_fail@plt+0x2454>
   1255c:	ldr	r2, [sp, #84]	; 0x54
   12560:	clz	r3, fp
   12564:	cmp	r2, #0
   12568:	lsr	r3, r3, #5
   1256c:	moveq	r3, #0
   12570:	cmp	r3, #0
   12574:	beq	13328 <__assert_fail@plt+0x23f4>
   12578:	mov	fp, r2
   1257c:	str	r3, [sp, #76]	; 0x4c
   12580:	b	11f0c <__assert_fail@plt+0xfd8>
   12584:	ldr	r3, [sp, #176]	; 0xb0
   12588:	ldr	r6, [sp, #48]	; 0x30
   1258c:	cmp	r3, #2
   12590:	beq	12ac8 <__assert_fail@plt+0x1b94>
   12594:	ldr	r3, [sp, #88]	; 0x58
   12598:	cmp	r3, #0
   1259c:	beq	1304c <__assert_fail@plt+0x2118>
   125a0:	mov	r3, #0
   125a4:	add	sl, sl, #1
   125a8:	ldr	r6, [sp, #36]	; 0x24
   125ac:	str	r3, [sp, #32]
   125b0:	mov	r4, #92	; 0x5c
   125b4:	b	124a0 <__assert_fail@plt+0x156c>
   125b8:	ldr	r3, [sp, #176]	; 0xb0
   125bc:	ldr	r6, [sp, #48]	; 0x30
   125c0:	cmp	r3, #2
   125c4:	beq	12af8 <__assert_fail@plt+0x1bc4>
   125c8:	cmp	r3, #5
   125cc:	bne	1305c <__assert_fail@plt+0x2128>
   125d0:	ldr	r3, [sp, #100]	; 0x64
   125d4:	cmp	r3, #0
   125d8:	beq	130c0 <__assert_fail@plt+0x218c>
   125dc:	ldr	r2, [sp, #24]
   125e0:	add	r3, sl, #2
   125e4:	cmp	r2, r3
   125e8:	bls	125f8 <__assert_fail@plt+0x16c4>
   125ec:	ldrb	r4, [r5, #1]
   125f0:	cmp	r4, #63	; 0x3f
   125f4:	beq	13268 <__assert_fail@plt+0x2334>
   125f8:	mov	r1, #0
   125fc:	str	r1, [sp, #32]
   12600:	mov	r4, #63	; 0x3f
   12604:	b	1246c <__assert_fail@plt+0x1538>
   12608:	ldr	r3, [sp, #176]	; 0xb0
   1260c:	ldr	r6, [sp, #48]	; 0x30
   12610:	cmp	r3, #2
   12614:	beq	12b24 <__assert_fail@plt+0x1bf0>
   12618:	str	r7, [sp, #32]
   1261c:	str	r7, [sp, #76]	; 0x4c
   12620:	mov	r1, #0
   12624:	mov	r4, #39	; 0x27
   12628:	b	1246c <__assert_fail@plt+0x1538>
   1262c:	ldr	r6, [sp, #48]	; 0x30
   12630:	ldr	r1, [sp, #52]	; 0x34
   12634:	str	r7, [sp, #32]
   12638:	b	1246c <__assert_fail@plt+0x1538>
   1263c:	ldr	r6, [sp, #48]	; 0x30
   12640:	ldr	r1, [sp, #52]	; 0x34
   12644:	mov	r4, #12
   12648:	mov	r3, #102	; 0x66
   1264c:	ldr	r2, [sp, #56]	; 0x38
   12650:	cmp	r2, #0
   12654:	streq	r2, [sp, #32]
   12658:	beq	1246c <__assert_fail@plt+0x1538>
   1265c:	mov	r4, r3
   12660:	mov	r3, #0
   12664:	str	r3, [sp, #32]
   12668:	ldr	r3, [sp, #40]	; 0x28
   1266c:	cmp	r3, #0
   12670:	bne	12de0 <__assert_fail@plt+0x1eac>
   12674:	ldr	r3, [sp, #36]	; 0x24
   12678:	eor	r3, r3, #1
   1267c:	and	r3, r3, r1
   12680:	ands	r3, r3, #255	; 0xff
   12684:	beq	126bc <__assert_fail@plt+0x1788>
   12688:	cmp	fp, r8
   1268c:	movhi	r2, #39	; 0x27
   12690:	strbhi	r2, [r9, r8]
   12694:	add	r2, r8, #1
   12698:	cmp	fp, r2
   1269c:	movhi	r1, #36	; 0x24
   126a0:	strbhi	r1, [r9, r2]
   126a4:	add	r2, r8, #2
   126a8:	cmp	fp, r2
   126ac:	add	r8, r8, #3
   126b0:	movhi	r1, #39	; 0x27
   126b4:	strbhi	r1, [r9, r2]
   126b8:	str	r3, [sp, #36]	; 0x24
   126bc:	cmp	fp, r8
   126c0:	movhi	r3, #92	; 0x5c
   126c4:	strbhi	r3, [r9, r8]
   126c8:	add	sl, sl, #1
   126cc:	add	r8, r8, #1
   126d0:	b	124d0 <__assert_fail@plt+0x159c>
   126d4:	ldr	r6, [sp, #48]	; 0x30
   126d8:	mov	r4, #10
   126dc:	mov	r3, #110	; 0x6e
   126e0:	ldr	r2, [sp, #64]	; 0x40
   126e4:	cmp	r2, #0
   126e8:	bne	13168 <__assert_fail@plt+0x2234>
   126ec:	ldr	r1, [sp, #52]	; 0x34
   126f0:	b	1264c <__assert_fail@plt+0x1718>
   126f4:	ldr	r6, [sp, #48]	; 0x30
   126f8:	ldr	r1, [sp, #52]	; 0x34
   126fc:	mov	r3, #116	; 0x74
   12700:	b	1264c <__assert_fail@plt+0x1718>
   12704:	ldr	r6, [sp, #48]	; 0x30
   12708:	ldr	r1, [sp, #52]	; 0x34
   1270c:	mov	r4, #11
   12710:	mov	r3, #118	; 0x76
   12714:	b	1264c <__assert_fail@plt+0x1718>
   12718:	ldr	r6, [sp, #48]	; 0x30
   1271c:	ldr	r1, [sp, #52]	; 0x34
   12720:	mov	r4, #8
   12724:	mov	r3, #98	; 0x62
   12728:	b	1264c <__assert_fail@plt+0x1718>
   1272c:	ldr	r6, [sp, #48]	; 0x30
   12730:	ldr	r1, [sp, #52]	; 0x34
   12734:	mov	r4, #7
   12738:	mov	r3, #97	; 0x61
   1273c:	b	1264c <__assert_fail@plt+0x1718>
   12740:	ldr	r3, [sp, #56]	; 0x38
   12744:	ldr	r6, [sp, #48]	; 0x30
   12748:	cmp	r3, #0
   1274c:	beq	12c10 <__assert_fail@plt+0x1cdc>
   12750:	ldr	r3, [sp, #40]	; 0x28
   12754:	cmp	r3, #0
   12758:	bne	13244 <__assert_fail@plt+0x2310>
   1275c:	ldr	r3, [sp, #36]	; 0x24
   12760:	ldr	r2, [sp, #52]	; 0x34
   12764:	eor	r3, r3, #1
   12768:	ands	r3, r2, r3
   1276c:	moveq	r2, r8
   12770:	beq	127a8 <__assert_fail@plt+0x1874>
   12774:	cmp	fp, r8
   12778:	movhi	r2, #39	; 0x27
   1277c:	strbhi	r2, [r9, r8]
   12780:	add	r2, r8, #1
   12784:	cmp	fp, r2
   12788:	movhi	r1, #36	; 0x24
   1278c:	strbhi	r1, [r9, r2]
   12790:	add	r2, r8, #2
   12794:	cmp	fp, r2
   12798:	movhi	r1, #39	; 0x27
   1279c:	strbhi	r1, [r9, r2]
   127a0:	add	r2, r8, #3
   127a4:	str	r3, [sp, #36]	; 0x24
   127a8:	cmp	fp, r2
   127ac:	movhi	r3, #92	; 0x5c
   127b0:	strbhi	r3, [r9, r2]
   127b4:	ldr	r3, [sp, #92]	; 0x5c
   127b8:	add	r8, r2, #1
   127bc:	cmp	r3, #0
   127c0:	beq	13144 <__assert_fail@plt+0x2210>
   127c4:	ldr	r1, [sp, #24]
   127c8:	add	r3, sl, #1
   127cc:	cmp	r1, r3
   127d0:	bls	12808 <__assert_fail@plt+0x18d4>
   127d4:	ldr	r1, [sp, #44]	; 0x2c
   127d8:	ldrb	r3, [r1, r3]
   127dc:	sub	r3, r3, #48	; 0x30
   127e0:	cmp	r3, #9
   127e4:	bhi	12808 <__assert_fail@plt+0x18d4>
   127e8:	cmp	fp, r8
   127ec:	movhi	r3, #48	; 0x30
   127f0:	strbhi	r3, [r9, r8]
   127f4:	add	r3, r2, #2
   127f8:	cmp	fp, r3
   127fc:	add	r8, r2, #3
   12800:	movhi	r1, #48	; 0x30
   12804:	strbhi	r1, [r9, r3]
   12808:	ldr	r3, [sp, #40]	; 0x28
   1280c:	ldr	r1, [sp, #52]	; 0x34
   12810:	mov	r7, r3
   12814:	str	r3, [sp, #32]
   12818:	mov	r4, #48	; 0x30
   1281c:	b	1246c <__assert_fail@plt+0x1538>
   12820:	ldr	r6, [sp, #48]	; 0x30
   12824:	cmp	sl, #0
   12828:	streq	r7, [sp, #32]
   1282c:	beq	1284c <__assert_fail@plt+0x1918>
   12830:	mov	r3, #0
   12834:	ldr	r1, [sp, #52]	; 0x34
   12838:	str	r3, [sp, #32]
   1283c:	b	1246c <__assert_fail@plt+0x1538>
   12840:	ldr	r6, [sp, #48]	; 0x30
   12844:	mov	r3, #0
   12848:	str	r3, [sp, #32]
   1284c:	ldr	r3, [sp, #64]	; 0x40
   12850:	cmp	r3, #0
   12854:	bne	12fd0 <__assert_fail@plt+0x209c>
   12858:	ldr	r1, [sp, #52]	; 0x34
   1285c:	b	1246c <__assert_fail@plt+0x1538>
   12860:	ldr	r3, [sp, #48]	; 0x30
   12864:	mov	r6, r3
   12868:	str	r3, [sp, #32]
   1286c:	b	1284c <__assert_fail@plt+0x1918>
   12870:	ldr	r6, [sp, #48]	; 0x30
   12874:	mov	r4, #13
   12878:	mov	r3, #114	; 0x72
   1287c:	b	126e0 <__assert_fail@plt+0x17ac>
   12880:	ldr	r3, [sp, #44]	; 0x2c
   12884:	add	r5, r3, sl
   12888:	ldrb	r4, [r5]
   1288c:	cmp	r4, #126	; 0x7e
   12890:	ldrls	pc, [pc, r4, lsl #2]
   12894:	b	12c30 <__assert_fail@plt+0x1cfc>
   12898:	andeq	r2, r1, r0, lsl #24
   1289c:	andeq	r2, r1, r0, lsr ip
   128a0:	andeq	r2, r1, r0, lsr ip
   128a4:	andeq	r2, r1, r0, lsr ip
   128a8:	andeq	r2, r1, r0, lsr ip
   128ac:	andeq	r2, r1, r0, lsr ip
   128b0:	andeq	r2, r1, r0, lsr ip
   128b4:	strdeq	r2, [r1], -r8
   128b8:	strdeq	r2, [r1], -r0
   128bc:	andeq	r2, r1, r4, ror #23
   128c0:	ldrdeq	r2, [r1], -ip
   128c4:	ldrdeq	r2, [r1], -r4
   128c8:	andeq	r2, r1, ip, asr #23
   128cc:	andeq	r2, r1, r4, asr #23
   128d0:	andeq	r2, r1, r0, lsr ip
   128d4:	andeq	r2, r1, r0, lsr ip
   128d8:	andeq	r2, r1, r0, lsr ip
   128dc:	andeq	r2, r1, r0, lsr ip
   128e0:	andeq	r2, r1, r0, lsr ip
   128e4:	andeq	r2, r1, r0, lsr ip
   128e8:	andeq	r2, r1, r0, lsr ip
   128ec:	andeq	r2, r1, r0, lsr ip
   128f0:	andeq	r2, r1, r0, lsr ip
   128f4:	andeq	r2, r1, r0, lsr ip
   128f8:	andeq	r2, r1, r0, lsr ip
   128fc:	andeq	r2, r1, r0, lsr ip
   12900:	andeq	r2, r1, r0, lsr ip
   12904:	andeq	r2, r1, r0, lsr ip
   12908:	andeq	r2, r1, r0, lsr ip
   1290c:	andeq	r2, r1, r0, lsr ip
   12910:	andeq	r2, r1, r0, lsr ip
   12914:	andeq	r2, r1, r0, lsr ip
   12918:			; <UNDEFINED> instruction: 0x00012bb8
   1291c:			; <UNDEFINED> instruction: 0x00012bb0
   12920:			; <UNDEFINED> instruction: 0x00012bb0
   12924:	andeq	r2, r1, r8, lsr #23
   12928:			; <UNDEFINED> instruction: 0x00012bb0
   1292c:	andeq	r2, r1, r0, lsr #23
   12930:			; <UNDEFINED> instruction: 0x00012bb0
   12934:	andeq	r2, r1, r4, lsl fp
   12938:			; <UNDEFINED> instruction: 0x00012bb0
   1293c:			; <UNDEFINED> instruction: 0x00012bb0
   12940:			; <UNDEFINED> instruction: 0x00012bb0
   12944:	andeq	r2, r1, r0, lsr #23
   12948:	andeq	r2, r1, r0, lsr #23
   1294c:	andeq	r2, r1, r0, lsr #23
   12950:	andeq	r2, r1, r0, lsr #23
   12954:	andeq	r2, r1, r0, lsr #23
   12958:	andeq	r2, r1, r0, lsr #23
   1295c:	andeq	r2, r1, r0, lsr #23
   12960:	andeq	r2, r1, r0, lsr #23
   12964:	andeq	r2, r1, r0, lsr #23
   12968:	andeq	r2, r1, r0, lsr #23
   1296c:	andeq	r2, r1, r0, lsr #23
   12970:	andeq	r2, r1, r0, lsr #23
   12974:	andeq	r2, r1, r0, lsr #23
   12978:	andeq	r2, r1, r0, lsr #23
   1297c:	andeq	r2, r1, r0, lsr #23
   12980:	andeq	r2, r1, r0, lsr #23
   12984:			; <UNDEFINED> instruction: 0x00012bb0
   12988:			; <UNDEFINED> instruction: 0x00012bb0
   1298c:			; <UNDEFINED> instruction: 0x00012bb0
   12990:			; <UNDEFINED> instruction: 0x00012bb0
   12994:	andeq	r2, r1, r8, ror #21
   12998:	andeq	r2, r1, r0, lsr ip
   1299c:	andeq	r2, r1, r0, lsr #23
   129a0:	andeq	r2, r1, r0, lsr #23
   129a4:	andeq	r2, r1, r0, lsr #23
   129a8:	andeq	r2, r1, r0, lsr #23
   129ac:	andeq	r2, r1, r0, lsr #23
   129b0:	andeq	r2, r1, r0, lsr #23
   129b4:	andeq	r2, r1, r0, lsr #23
   129b8:	andeq	r2, r1, r0, lsr #23
   129bc:	andeq	r2, r1, r0, lsr #23
   129c0:	andeq	r2, r1, r0, lsr #23
   129c4:	andeq	r2, r1, r0, lsr #23
   129c8:	andeq	r2, r1, r0, lsr #23
   129cc:	andeq	r2, r1, r0, lsr #23
   129d0:	andeq	r2, r1, r0, lsr #23
   129d4:	andeq	r2, r1, r0, lsr #23
   129d8:	andeq	r2, r1, r0, lsr #23
   129dc:	andeq	r2, r1, r0, lsr #23
   129e0:	andeq	r2, r1, r0, lsr #23
   129e4:	andeq	r2, r1, r0, lsr #23
   129e8:	andeq	r2, r1, r0, lsr #23
   129ec:	andeq	r2, r1, r0, lsr #23
   129f0:	andeq	r2, r1, r0, lsr #23
   129f4:	andeq	r2, r1, r0, lsr #23
   129f8:	andeq	r2, r1, r0, lsr #23
   129fc:	andeq	r2, r1, r0, lsr #23
   12a00:	andeq	r2, r1, r0, lsr #23
   12a04:			; <UNDEFINED> instruction: 0x00012bb0
   12a08:			; <UNDEFINED> instruction: 0x00012ab8
   12a0c:	andeq	r2, r1, r0, lsr #23
   12a10:			; <UNDEFINED> instruction: 0x00012bb0
   12a14:	andeq	r2, r1, r0, lsr #23
   12a18:			; <UNDEFINED> instruction: 0x00012bb0
   12a1c:	andeq	r2, r1, r0, lsr #23
   12a20:	andeq	r2, r1, r0, lsr #23
   12a24:	andeq	r2, r1, r0, lsr #23
   12a28:	andeq	r2, r1, r0, lsr #23
   12a2c:	andeq	r2, r1, r0, lsr #23
   12a30:	andeq	r2, r1, r0, lsr #23
   12a34:	andeq	r2, r1, r0, lsr #23
   12a38:	andeq	r2, r1, r0, lsr #23
   12a3c:	andeq	r2, r1, r0, lsr #23
   12a40:	andeq	r2, r1, r0, lsr #23
   12a44:	andeq	r2, r1, r0, lsr #23
   12a48:	andeq	r2, r1, r0, lsr #23
   12a4c:	andeq	r2, r1, r0, lsr #23
   12a50:	andeq	r2, r1, r0, lsr #23
   12a54:	andeq	r2, r1, r0, lsr #23
   12a58:	andeq	r2, r1, r0, lsr #23
   12a5c:	andeq	r2, r1, r0, lsr #23
   12a60:	andeq	r2, r1, r0, lsr #23
   12a64:	andeq	r2, r1, r0, lsr #23
   12a68:	andeq	r2, r1, r0, lsr #23
   12a6c:	andeq	r2, r1, r0, lsr #23
   12a70:	andeq	r2, r1, r0, lsr #23
   12a74:	andeq	r2, r1, r0, lsr #23
   12a78:	andeq	r2, r1, r0, lsr #23
   12a7c:	andeq	r2, r1, r0, lsr #23
   12a80:	andeq	r2, r1, r0, lsr #23
   12a84:	muleq	r1, r4, sl
   12a88:			; <UNDEFINED> instruction: 0x00012bb0
   12a8c:	muleq	r1, r4, sl
   12a90:	andeq	r2, r1, r8, lsr #23
   12a94:	ldr	r3, [sp, #24]
   12a98:	mov	r6, #0
   12a9c:	cmn	r3, #1
   12aa0:	bne	1244c <__assert_fail@plt+0x1518>
   12aa4:	ldr	r3, [sp, #44]	; 0x2c
   12aa8:	ldrb	r3, [r3, #1]
   12aac:	adds	r3, r3, #0
   12ab0:	movne	r3, #1
   12ab4:	b	12454 <__assert_fail@plt+0x1520>
   12ab8:	ldr	r3, [sp, #176]	; 0xb0
   12abc:	mov	r6, #0
   12ac0:	cmp	r3, #2
   12ac4:	bne	12594 <__assert_fail@plt+0x1660>
   12ac8:	ldr	r3, [sp, #64]	; 0x40
   12acc:	cmp	r3, #0
   12ad0:	bne	13308 <__assert_fail@plt+0x23d4>
   12ad4:	add	sl, sl, #1
   12ad8:	ldr	r6, [sp, #36]	; 0x24
   12adc:	str	r3, [sp, #32]
   12ae0:	mov	r4, #92	; 0x5c
   12ae4:	b	124a0 <__assert_fail@plt+0x156c>
   12ae8:	ldr	r3, [sp, #176]	; 0xb0
   12aec:	mov	r6, #0
   12af0:	cmp	r3, #2
   12af4:	bne	125c8 <__assert_fail@plt+0x1694>
   12af8:	ldr	r3, [sp, #40]	; 0x28
   12afc:	cmp	r3, #0
   12b00:	bne	12de4 <__assert_fail@plt+0x1eb0>
   12b04:	mov	r1, r7
   12b08:	str	r3, [sp, #32]
   12b0c:	mov	r4, #63	; 0x3f
   12b10:	b	1246c <__assert_fail@plt+0x1538>
   12b14:	ldr	r3, [sp, #176]	; 0xb0
   12b18:	mov	r6, #0
   12b1c:	cmp	r3, #2
   12b20:	bne	12618 <__assert_fail@plt+0x16e4>
   12b24:	ldr	r3, [sp, #64]	; 0x40
   12b28:	cmp	r3, #0
   12b2c:	bne	13308 <__assert_fail@plt+0x23d4>
   12b30:	ldr	r2, [sp, #84]	; 0x54
   12b34:	adds	r3, fp, #0
   12b38:	movne	r3, #1
   12b3c:	cmp	r2, #0
   12b40:	movne	r3, #0
   12b44:	cmp	r3, #0
   12b48:	strne	fp, [sp, #84]	; 0x54
   12b4c:	movne	fp, #0
   12b50:	bne	12b80 <__assert_fail@plt+0x1c4c>
   12b54:	cmp	fp, r8
   12b58:	movhi	r3, #39	; 0x27
   12b5c:	strbhi	r3, [r9, r8]
   12b60:	add	r3, r8, #1
   12b64:	cmp	fp, r3
   12b68:	movhi	r2, #92	; 0x5c
   12b6c:	strbhi	r2, [r9, r3]
   12b70:	add	r3, r8, #2
   12b74:	cmp	fp, r3
   12b78:	movhi	r2, #39	; 0x27
   12b7c:	strbhi	r2, [r9, r3]
   12b80:	ldr	r3, [sp, #64]	; 0x40
   12b84:	add	r8, r8, #3
   12b88:	mov	r1, r7
   12b8c:	str	r7, [sp, #32]
   12b90:	str	r7, [sp, #76]	; 0x4c
   12b94:	str	r3, [sp, #36]	; 0x24
   12b98:	mov	r4, #39	; 0x27
   12b9c:	b	1246c <__assert_fail@plt+0x1538>
   12ba0:	mov	r6, #0
   12ba4:	b	12630 <__assert_fail@plt+0x16fc>
   12ba8:	mov	r6, #0
   12bac:	b	12824 <__assert_fail@plt+0x18f0>
   12bb0:	mov	r6, #0
   12bb4:	b	12844 <__assert_fail@plt+0x1910>
   12bb8:	str	r7, [sp, #32]
   12bbc:	mov	r6, #0
   12bc0:	b	1284c <__assert_fail@plt+0x1918>
   12bc4:	mov	r6, #0
   12bc8:	b	12874 <__assert_fail@plt+0x1940>
   12bcc:	mov	r6, #0
   12bd0:	b	12640 <__assert_fail@plt+0x170c>
   12bd4:	mov	r6, #0
   12bd8:	b	12708 <__assert_fail@plt+0x17d4>
   12bdc:	mov	r6, #0
   12be0:	b	126d8 <__assert_fail@plt+0x17a4>
   12be4:	mov	r6, #0
   12be8:	mov	r3, #116	; 0x74
   12bec:	b	126e0 <__assert_fail@plt+0x17ac>
   12bf0:	mov	r6, #0
   12bf4:	b	1271c <__assert_fail@plt+0x17e8>
   12bf8:	mov	r6, #0
   12bfc:	b	12730 <__assert_fail@plt+0x17fc>
   12c00:	ldr	r3, [sp, #56]	; 0x38
   12c04:	mov	r6, #0
   12c08:	cmp	r3, #0
   12c0c:	bne	12750 <__assert_fail@plt+0x181c>
   12c10:	ldr	r3, [sp, #96]	; 0x60
   12c14:	cmp	r3, #0
   12c18:	addne	sl, sl, #1
   12c1c:	bne	11fc4 <__assert_fail@plt+0x1090>
   12c20:	ldr	r1, [sp, #52]	; 0x34
   12c24:	str	r3, [sp, #32]
   12c28:	mov	r4, r3
   12c2c:	b	1246c <__assert_fail@plt+0x1538>
   12c30:	mov	r6, #0
   12c34:	ldr	r3, [sp, #80]	; 0x50
   12c38:	cmp	r3, #1
   12c3c:	bne	12e2c <__assert_fail@plt+0x1ef8>
   12c40:	bl	10e2c <__ctype_b_loc@plt>
   12c44:	ldr	r2, [sp, #80]	; 0x50
   12c48:	sxth	r3, r4
   12c4c:	mov	r1, r2
   12c50:	lsl	r3, r3, #1
   12c54:	ldr	r2, [r0]
   12c58:	ldrh	r3, [r2, r3]
   12c5c:	and	r3, r3, #16384	; 0x4000
   12c60:	cmp	r3, #0
   12c64:	movne	r3, #1
   12c68:	moveq	r3, #0
   12c6c:	str	r3, [sp, #32]
   12c70:	moveq	r3, #1
   12c74:	movne	r3, #0
   12c78:	ldr	r2, [sp, #56]	; 0x38
   12c7c:	and	r3, r3, r2
   12c80:	ands	r3, r3, #255	; 0xff
   12c84:	beq	12858 <__assert_fail@plt+0x1924>
   12c88:	add	r1, sl, r1
   12c8c:	mov	r0, #0
   12c90:	ldr	r7, [sp, #40]	; 0x28
   12c94:	ldr	r2, [sp, #36]	; 0x24
   12c98:	ldr	lr, [sp, #52]	; 0x34
   12c9c:	b	12d4c <__assert_fail@plt+0x1e18>
   12ca0:	cmp	r7, #0
   12ca4:	bne	130a0 <__assert_fail@plt+0x216c>
   12ca8:	eor	r0, r2, #1
   12cac:	ands	r0, lr, r0
   12cb0:	beq	12ce8 <__assert_fail@plt+0x1db4>
   12cb4:	cmp	fp, r8
   12cb8:	movhi	r2, #39	; 0x27
   12cbc:	strbhi	r2, [r9, r8]
   12cc0:	add	r2, r8, #1
   12cc4:	cmp	fp, r2
   12cc8:	movhi	ip, #36	; 0x24
   12ccc:	strbhi	ip, [r9, r2]
   12cd0:	add	r2, r8, #2
   12cd4:	cmp	fp, r2
   12cd8:	movhi	ip, #39	; 0x27
   12cdc:	strbhi	ip, [r9, r2]
   12ce0:	add	r8, r8, #3
   12ce4:	mov	r2, r0
   12ce8:	cmp	fp, r8
   12cec:	movhi	r0, #92	; 0x5c
   12cf0:	strbhi	r0, [r9, r8]
   12cf4:	add	r0, r8, #1
   12cf8:	cmp	fp, r0
   12cfc:	lsrhi	ip, r4, #6
   12d00:	addhi	ip, ip, #48	; 0x30
   12d04:	strbhi	ip, [r9, r0]
   12d08:	add	ip, r8, #2
   12d0c:	cmp	fp, ip
   12d10:	lsrhi	r0, r4, #3
   12d14:	andhi	r0, r0, #7
   12d18:	addhi	r0, r0, #48	; 0x30
   12d1c:	add	sl, sl, #1
   12d20:	strbhi	r0, [r9, ip]
   12d24:	and	r4, r4, #7
   12d28:	cmp	sl, r1
   12d2c:	add	r4, r4, #48	; 0x30
   12d30:	add	r8, r8, #3
   12d34:	bcs	130b8 <__assert_fail@plt+0x2184>
   12d38:	mov	r0, r3
   12d3c:	cmp	fp, r8
   12d40:	strbhi	r4, [r9, r8]
   12d44:	ldrb	r4, [r5, #1]!
   12d48:	add	r8, r8, #1
   12d4c:	cmp	r3, #0
   12d50:	bne	12ca0 <__assert_fail@plt+0x1d6c>
   12d54:	cmp	r6, #0
   12d58:	bne	12dfc <__assert_fail@plt+0x1ec8>
   12d5c:	eor	r6, r0, #1
   12d60:	and	r6, r6, r2
   12d64:	add	sl, sl, #1
   12d68:	cmp	r1, sl
   12d6c:	uxtb	r6, r6
   12d70:	bls	12e24 <__assert_fail@plt+0x1ef0>
   12d74:	cmp	r6, #0
   12d78:	beq	12d3c <__assert_fail@plt+0x1e08>
   12d7c:	cmp	fp, r8
   12d80:	movhi	r2, #39	; 0x27
   12d84:	strbhi	r2, [r9, r8]
   12d88:	add	r2, r8, #1
   12d8c:	cmp	fp, r2
   12d90:	movhi	ip, #39	; 0x27
   12d94:	strbhi	ip, [r9, r2]
   12d98:	add	r8, r8, #2
   12d9c:	mov	r6, r3
   12da0:	mov	r2, r3
   12da4:	b	12d3c <__assert_fail@plt+0x1e08>
   12da8:	ldr	r3, [sp, #184]	; 0xb8
   12dac:	cmp	r3, #0
   12db0:	beq	12488 <__assert_fail@plt+0x1554>
   12db4:	lsr	r2, r4, #5
   12db8:	mov	r0, r3
   12dbc:	uxtb	r2, r2
   12dc0:	and	r3, r4, #31
   12dc4:	ldr	r2, [r0, r2, lsl #2]
   12dc8:	lsr	r3, r2, r3
   12dcc:	tst	r3, #1
   12dd0:	beq	12488 <__assert_fail@plt+0x1554>
   12dd4:	ldr	r3, [sp, #40]	; 0x28
   12dd8:	cmp	r3, #0
   12ddc:	beq	12674 <__assert_fail@plt+0x1740>
   12de0:	mov	r3, r1
   12de4:	str	r3, [sp, #64]	; 0x40
   12de8:	mov	sl, r9
   12dec:	ldr	r3, [sp, #56]	; 0x38
   12df0:	mov	r9, fp
   12df4:	ldr	r2, [sp, #64]	; 0x40
   12df8:	b	12fe8 <__assert_fail@plt+0x20b4>
   12dfc:	cmp	fp, r8
   12e00:	eor	r6, r0, #1
   12e04:	movhi	ip, #92	; 0x5c
   12e08:	and	r6, r6, r2
   12e0c:	add	sl, sl, #1
   12e10:	strbhi	ip, [r9, r8]
   12e14:	cmp	r1, sl
   12e18:	add	r8, r8, #1
   12e1c:	uxtb	r6, r6
   12e20:	bhi	12d74 <__assert_fail@plt+0x1e40>
   12e24:	str	r2, [sp, #36]	; 0x24
   12e28:	b	124a0 <__assert_fail@plt+0x156c>
   12e2c:	ldr	r3, [sp, #24]
   12e30:	cmn	r3, #1
   12e34:	mov	r3, #0
   12e38:	str	r3, [sp, #128]	; 0x80
   12e3c:	str	r3, [sp, #132]	; 0x84
   12e40:	beq	13134 <__assert_fail@plt+0x2200>
   12e44:	mov	r2, r7
   12e48:	mov	r3, #0
   12e4c:	str	r7, [sp, #104]	; 0x68
   12e50:	str	r5, [sp, #116]	; 0x74
   12e54:	mov	r7, r3
   12e58:	mov	r5, r2
   12e5c:	str	r4, [sp, #32]
   12e60:	str	r6, [sp, #108]	; 0x6c
   12e64:	str	r8, [sp, #112]	; 0x70
   12e68:	ldr	r3, [sp, #44]	; 0x2c
   12e6c:	add	r6, sl, r7
   12e70:	add	r4, r3, r6
   12e74:	ldr	r3, [sp, #24]
   12e78:	mov	r1, r4
   12e7c:	sub	r2, r3, r6
   12e80:	add	r0, sp, #124	; 0x7c
   12e84:	add	r3, sp, #128	; 0x80
   12e88:	bl	17ff4 <__assert_fail@plt+0x70c0>
   12e8c:	subs	r8, r0, #0
   12e90:	beq	13218 <__assert_fail@plt+0x22e4>
   12e94:	cmn	r8, #1
   12e98:	beq	131f0 <__assert_fail@plt+0x22bc>
   12e9c:	cmn	r8, #2
   12ea0:	beq	13188 <__assert_fail@plt+0x2254>
   12ea4:	ldr	r3, [sp, #64]	; 0x40
   12ea8:	cmp	r3, #0
   12eac:	beq	12f6c <__assert_fail@plt+0x2038>
   12eb0:	cmp	r8, #1
   12eb4:	beq	12f6c <__assert_fail@plt+0x2038>
   12eb8:	sub	r3, r8, #1
   12ebc:	add	r6, r3, r6
   12ec0:	ldr	r3, [sp, #44]	; 0x2c
   12ec4:	add	r6, r3, r6
   12ec8:	ldrb	r3, [r4, #1]!
   12ecc:	sub	r3, r3, #91	; 0x5b
   12ed0:	cmp	r3, #33	; 0x21
   12ed4:	ldrls	pc, [pc, r3, lsl #2]
   12ed8:	b	12f64 <__assert_fail@plt+0x2030>
   12edc:	ldrdeq	r2, [r1], -r0
   12ee0:	ldrdeq	r2, [r1], -r0
   12ee4:	andeq	r2, r1, r4, ror #30
   12ee8:	ldrdeq	r2, [r1], -r0
   12eec:	andeq	r2, r1, r4, ror #30
   12ef0:	ldrdeq	r2, [r1], -r0
   12ef4:	andeq	r2, r1, r4, ror #30
   12ef8:	andeq	r2, r1, r4, ror #30
   12efc:	andeq	r2, r1, r4, ror #30
   12f00:	andeq	r2, r1, r4, ror #30
   12f04:	andeq	r2, r1, r4, ror #30
   12f08:	andeq	r2, r1, r4, ror #30
   12f0c:	andeq	r2, r1, r4, ror #30
   12f10:	andeq	r2, r1, r4, ror #30
   12f14:	andeq	r2, r1, r4, ror #30
   12f18:	andeq	r2, r1, r4, ror #30
   12f1c:	andeq	r2, r1, r4, ror #30
   12f20:	andeq	r2, r1, r4, ror #30
   12f24:	andeq	r2, r1, r4, ror #30
   12f28:	andeq	r2, r1, r4, ror #30
   12f2c:	andeq	r2, r1, r4, ror #30
   12f30:	andeq	r2, r1, r4, ror #30
   12f34:	andeq	r2, r1, r4, ror #30
   12f38:	andeq	r2, r1, r4, ror #30
   12f3c:	andeq	r2, r1, r4, ror #30
   12f40:	andeq	r2, r1, r4, ror #30
   12f44:	andeq	r2, r1, r4, ror #30
   12f48:	andeq	r2, r1, r4, ror #30
   12f4c:	andeq	r2, r1, r4, ror #30
   12f50:	andeq	r2, r1, r4, ror #30
   12f54:	andeq	r2, r1, r4, ror #30
   12f58:	andeq	r2, r1, r4, ror #30
   12f5c:	andeq	r2, r1, r4, ror #30
   12f60:	ldrdeq	r2, [r1], -r0
   12f64:	cmp	r6, r4
   12f68:	bne	12ec8 <__assert_fail@plt+0x1f94>
   12f6c:	ldr	r0, [sp, #124]	; 0x7c
   12f70:	bl	10d9c <iswprint@plt>
   12f74:	add	r7, r7, r8
   12f78:	cmp	r0, #0
   12f7c:	add	r0, sp, #128	; 0x80
   12f80:	moveq	r5, #0
   12f84:	bl	10d48 <mbsinit@plt>
   12f88:	cmp	r0, #0
   12f8c:	beq	12e68 <__assert_fail@plt+0x1f34>
   12f90:	ldr	r4, [sp, #32]
   12f94:	str	r5, [sp, #32]
   12f98:	ldr	r3, [sp, #32]
   12f9c:	mov	r1, r7
   12fa0:	eor	r3, r3, #1
   12fa4:	ldr	r7, [sp, #104]	; 0x68
   12fa8:	ldr	r6, [sp, #108]	; 0x6c
   12fac:	ldr	r8, [sp, #112]	; 0x70
   12fb0:	ldr	r5, [sp, #116]	; 0x74
   12fb4:	uxtb	r3, r3
   12fb8:	cmp	r1, #1
   12fbc:	bls	12c78 <__assert_fail@plt+0x1d44>
   12fc0:	ldr	r2, [sp, #56]	; 0x38
   12fc4:	and	r3, r3, r2
   12fc8:	uxtb	r3, r3
   12fcc:	b	12c88 <__assert_fail@plt+0x1d54>
   12fd0:	mov	r3, #2
   12fd4:	str	r3, [sp, #176]	; 0xb0
   12fd8:	ldr	r2, [sp, #64]	; 0x40
   12fdc:	ldr	r3, [sp, #56]	; 0x38
   12fe0:	mov	sl, r9
   12fe4:	mov	r9, fp
   12fe8:	and	r3, r3, r2
   12fec:	tst	r3, #255	; 0xff
   12ff0:	ldr	r3, [sp, #176]	; 0xb0
   12ff4:	movne	r3, #4
   12ff8:	str	r3, [sp, #176]	; 0xb0
   12ffc:	ldr	r3, [sp, #180]	; 0xb4
   13000:	mov	ip, #0
   13004:	bic	r3, r3, #2
   13008:	str	r3, [sp, #4]
   1300c:	ldr	r3, [sp, #192]	; 0xc0
   13010:	ldr	r2, [sp, #44]	; 0x2c
   13014:	str	r3, [sp, #16]
   13018:	ldr	r3, [sp, #188]	; 0xbc
   1301c:	mov	r1, r9
   13020:	str	r3, [sp, #12]
   13024:	ldr	r3, [sp, #176]	; 0xb0
   13028:	mov	r0, sl
   1302c:	str	r3, [sp]
   13030:	str	ip, [sp, #8]
   13034:	ldr	r3, [sp, #24]
   13038:	bl	11e98 <__assert_fail@plt+0xf64>
   1303c:	mov	fp, r0
   13040:	mov	r0, fp
   13044:	add	sp, sp, #140	; 0x8c
   13048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1304c:	mov	r4, #92	; 0x5c
   13050:	mov	r1, #0
   13054:	mov	r3, r4
   13058:	b	1264c <__assert_fail@plt+0x1718>
   1305c:	mov	r3, #0
   13060:	ldr	r1, [sp, #52]	; 0x34
   13064:	str	r3, [sp, #32]
   13068:	mov	r4, #63	; 0x3f
   1306c:	b	1246c <__assert_fail@plt+0x1538>
   13070:	cmp	fp, #0
   13074:	beq	130d0 <__assert_fail@plt+0x219c>
   13078:	mov	r3, #39	; 0x27
   1307c:	strb	r3, [r9]
   13080:	mov	r3, #0
   13084:	str	r3, [sp, #40]	; 0x28
   13088:	mov	r3, #1
   1308c:	str	r3, [sp, #68]	; 0x44
   13090:	ldr	r3, [pc, #448]	; 13258 <__assert_fail@plt+0x2324>
   13094:	mov	r8, #1
   13098:	str	r3, [sp, #72]	; 0x48
   1309c:	b	12280 <__assert_fail@plt+0x134c>
   130a0:	ldr	r3, [sp, #40]	; 0x28
   130a4:	mov	sl, r9
   130a8:	str	r3, [sp, #56]	; 0x38
   130ac:	mov	r9, fp
   130b0:	ldr	r2, [sp, #64]	; 0x40
   130b4:	b	12fe8 <__assert_fail@plt+0x20b4>
   130b8:	str	r2, [sp, #36]	; 0x24
   130bc:	b	124d0 <__assert_fail@plt+0x159c>
   130c0:	mov	r1, #0
   130c4:	str	r3, [sp, #32]
   130c8:	mov	r4, #63	; 0x3f
   130cc:	b	1246c <__assert_fail@plt+0x1538>
   130d0:	ldr	r3, [pc, #384]	; 13258 <__assert_fail@plt+0x2324>
   130d4:	str	r3, [sp, #72]	; 0x48
   130d8:	mov	r3, #0
   130dc:	str	r3, [sp, #40]	; 0x28
   130e0:	mov	r3, #1
   130e4:	str	r3, [sp, #68]	; 0x44
   130e8:	mov	r8, r3
   130ec:	b	12280 <__assert_fail@plt+0x134c>
   130f0:	bl	10f28 <abort@plt>
   130f4:	cmp	fp, #0
   130f8:	beq	13158 <__assert_fail@plt+0x2224>
   130fc:	mov	r2, #1
   13100:	mov	r3, #34	; 0x22
   13104:	strb	r3, [r9]
   13108:	mov	r8, r2
   1310c:	mov	r3, r2
   13110:	str	r2, [sp, #68]	; 0x44
   13114:	str	r3, [sp, #56]	; 0x38
   13118:	ldr	r3, [pc, #316]	; 1325c <__assert_fail@plt+0x2328>
   1311c:	ldr	r1, [sp, #56]	; 0x38
   13120:	str	r3, [sp, #72]	; 0x48
   13124:	ldr	r2, [sp, #176]	; 0xb0
   13128:	ldr	ip, [sp, #40]	; 0x28
   1312c:	ldr	lr, [sp, #176]	; 0xb0
   13130:	b	11f64 <__assert_fail@plt+0x1030>
   13134:	ldr	r0, [sp, #44]	; 0x2c
   13138:	bl	10e44 <strlen@plt>
   1313c:	str	r0, [sp, #24]
   13140:	b	12e44 <__assert_fail@plt+0x1f10>
   13144:	mov	r7, #0
   13148:	ldr	r1, [sp, #52]	; 0x34
   1314c:	str	r3, [sp, #32]
   13150:	mov	r4, #48	; 0x30
   13154:	b	1246c <__assert_fail@plt+0x1538>
   13158:	mov	r3, #1
   1315c:	str	r3, [sp, #68]	; 0x44
   13160:	mov	r8, r3
   13164:	b	13114 <__assert_fail@plt+0x21e0>
   13168:	mov	r3, #2
   1316c:	mov	sl, r9
   13170:	str	r3, [sp, #176]	; 0xb0
   13174:	mov	r9, fp
   13178:	ldr	r3, [sp, #56]	; 0x38
   1317c:	b	12fe8 <__assert_fail@plt+0x20b4>
   13180:	ldr	r6, [sp, #48]	; 0x30
   13184:	b	12c34 <__assert_fail@plt+0x1d00>
   13188:	ldr	r0, [sp, #24]
   1318c:	mov	ip, r6
   13190:	cmp	r0, ip
   13194:	mov	r1, r7
   13198:	mov	r2, r4
   1319c:	ldr	r7, [sp, #104]	; 0x68
   131a0:	ldr	r4, [sp, #32]
   131a4:	ldr	r6, [sp, #108]	; 0x6c
   131a8:	ldr	r8, [sp, #112]	; 0x70
   131ac:	ldr	r5, [sp, #116]	; 0x74
   131b0:	bls	131e0 <__assert_fail@plt+0x22ac>
   131b4:	ldrb	r3, [r2]
   131b8:	cmp	r3, #0
   131bc:	bne	131d0 <__assert_fail@plt+0x229c>
   131c0:	b	132f0 <__assert_fail@plt+0x23bc>
   131c4:	ldrb	r3, [r2, #1]!
   131c8:	cmp	r3, #0
   131cc:	beq	132f0 <__assert_fail@plt+0x23bc>
   131d0:	add	r1, r1, #1
   131d4:	add	r3, sl, r1
   131d8:	cmp	r0, r3
   131dc:	bhi	131c4 <__assert_fail@plt+0x2290>
   131e0:	mov	r2, #0
   131e4:	mov	r3, r7
   131e8:	str	r2, [sp, #32]
   131ec:	b	12fb8 <__assert_fail@plt+0x2084>
   131f0:	mov	r1, r7
   131f4:	ldr	r7, [sp, #104]	; 0x68
   131f8:	mov	r2, #0
   131fc:	ldr	r4, [sp, #32]
   13200:	ldr	r6, [sp, #108]	; 0x6c
   13204:	ldr	r8, [sp, #112]	; 0x70
   13208:	ldr	r5, [sp, #116]	; 0x74
   1320c:	mov	r3, r7
   13210:	str	r2, [sp, #32]
   13214:	b	12fb8 <__assert_fail@plt+0x2084>
   13218:	mov	r3, r5
   1321c:	eor	r3, r3, #1
   13220:	ldr	r4, [sp, #32]
   13224:	mov	r1, r7
   13228:	str	r5, [sp, #32]
   1322c:	ldr	r7, [sp, #104]	; 0x68
   13230:	ldr	r6, [sp, #108]	; 0x6c
   13234:	ldr	r8, [sp, #112]	; 0x70
   13238:	ldr	r5, [sp, #116]	; 0x74
   1323c:	uxtb	r3, r3
   13240:	b	12fb8 <__assert_fail@plt+0x2084>
   13244:	mov	sl, r9
   13248:	str	r3, [sp, #56]	; 0x38
   1324c:	mov	r9, fp
   13250:	ldr	r2, [sp, #64]	; 0x40
   13254:	b	12fe8 <__assert_fail@plt+0x20b4>
   13258:	ldrdeq	r8, [r1], -r4
   1325c:	ldrdeq	r8, [r1], -r0
   13260:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   13264:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13268:	ldr	r2, [sp, #44]	; 0x2c
   1326c:	ldrb	r1, [r2, r3]
   13270:	sub	r2, r1, #33	; 0x21
   13274:	uxtb	r2, r2
   13278:	cmp	r2, #29
   1327c:	bhi	132fc <__assert_fail@plt+0x23c8>
   13280:	ldr	r0, [pc, #-36]	; 13264 <__assert_fail@plt+0x2330>
   13284:	mov	ip, #1
   13288:	ands	r2, r0, ip, lsl r2
   1328c:	beq	1331c <__assert_fail@plt+0x23e8>
   13290:	ldr	r2, [sp, #40]	; 0x28
   13294:	cmp	r2, #0
   13298:	bne	13410 <__assert_fail@plt+0x24dc>
   1329c:	add	r2, r8, #1
   132a0:	cmp	fp, r8
   132a4:	strbhi	r4, [r9, r8]
   132a8:	cmp	fp, r2
   132ac:	movhi	r0, #34	; 0x22
   132b0:	strbhi	r0, [r9, r2]
   132b4:	add	r2, r8, #2
   132b8:	cmp	fp, r2
   132bc:	movhi	r0, #34	; 0x22
   132c0:	strbhi	r0, [r9, r2]
   132c4:	add	r2, r8, #3
   132c8:	cmp	fp, r2
   132cc:	mov	sl, r3
   132d0:	ldr	r3, [sp, #40]	; 0x28
   132d4:	movhi	r0, #63	; 0x3f
   132d8:	mov	r4, r1
   132dc:	strbhi	r0, [r9, r2]
   132e0:	add	r8, r8, #4
   132e4:	mov	r1, r3
   132e8:	str	r3, [sp, #32]
   132ec:	b	1246c <__assert_fail@plt+0x1538>
   132f0:	str	r3, [sp, #32]
   132f4:	mov	r3, r7
   132f8:	b	12fb8 <__assert_fail@plt+0x2084>
   132fc:	mov	r1, #0
   13300:	str	r1, [sp, #32]
   13304:	b	1246c <__assert_fail@plt+0x1538>
   13308:	mov	sl, r9
   1330c:	ldr	r3, [sp, #56]	; 0x38
   13310:	mov	r9, fp
   13314:	ldr	r2, [sp, #64]	; 0x40
   13318:	b	12fe8 <__assert_fail@plt+0x20b4>
   1331c:	str	r2, [sp, #32]
   13320:	mov	r1, #0
   13324:	b	1246c <__assert_fail@plt+0x1538>
   13328:	ldr	r2, [sp, #76]	; 0x4c
   1332c:	mov	sl, r9
   13330:	mov	r9, fp
   13334:	mov	fp, r8
   13338:	ldr	r1, [sp, #72]	; 0x48
   1333c:	cmp	r1, #0
   13340:	moveq	r3, #0
   13344:	andne	r3, r2, #1
   13348:	cmp	r3, #0
   1334c:	beq	13378 <__assert_fail@plt+0x2444>
   13350:	ldrb	r3, [r1]
   13354:	cmp	r3, #0
   13358:	beq	13378 <__assert_fail@plt+0x2444>
   1335c:	mov	r2, r1
   13360:	cmp	r9, fp
   13364:	strbhi	r3, [sl, fp]
   13368:	ldrb	r3, [r2, #1]!
   1336c:	add	fp, fp, #1
   13370:	cmp	r3, #0
   13374:	bne	13360 <__assert_fail@plt+0x242c>
   13378:	cmp	r9, fp
   1337c:	movhi	r3, #0
   13380:	strbhi	r3, [sl, fp]
   13384:	b	13040 <__assert_fail@plt+0x210c>
   13388:	ldr	r3, [sp, #192]	; 0xc0
   1338c:	mov	ip, #5
   13390:	str	r3, [sp, #16]
   13394:	ldr	r3, [sp, #188]	; 0xbc
   13398:	ldr	r2, [sp, #44]	; 0x2c
   1339c:	str	r3, [sp, #12]
   133a0:	ldr	r3, [sp, #184]	; 0xb8
   133a4:	ldr	r1, [sp, #84]	; 0x54
   133a8:	str	r3, [sp, #8]
   133ac:	ldr	r3, [sp, #180]	; 0xb4
   133b0:	mov	r0, r9
   133b4:	str	r3, [sp, #4]
   133b8:	str	ip, [sp]
   133bc:	ldr	r3, [sp, #24]
   133c0:	bl	11e98 <__assert_fail@plt+0xf64>
   133c4:	mov	fp, r0
   133c8:	b	13040 <__assert_fail@plt+0x210c>
   133cc:	mov	sl, r9
   133d0:	mov	r9, fp
   133d4:	mov	fp, r8
   133d8:	b	13338 <__assert_fail@plt+0x2404>
   133dc:	ldr	r1, [sp, #176]	; 0xb0
   133e0:	bl	11d78 <__assert_fail@plt+0xe44>
   133e4:	str	r0, [sp, #192]	; 0xc0
   133e8:	b	12354 <__assert_fail@plt+0x1420>
   133ec:	ldr	r1, [sp, #176]	; 0xb0
   133f0:	bl	11d78 <__assert_fail@plt+0xe44>
   133f4:	str	r0, [sp, #188]	; 0xbc
   133f8:	b	12334 <__assert_fail@plt+0x1400>
   133fc:	mov	sl, r9
   13400:	mov	r2, r3
   13404:	mov	r9, fp
   13408:	mov	fp, r8
   1340c:	b	13338 <__assert_fail@plt+0x2404>
   13410:	mov	sl, r9
   13414:	mov	r9, fp
   13418:	b	12ffc <__assert_fail@plt+0x20c8>
   1341c:	push	{r4, r5, r6, lr}
   13420:	mov	r5, r0
   13424:	bl	10e5c <__errno_location@plt>
   13428:	cmp	r5, #0
   1342c:	mov	r1, #48	; 0x30
   13430:	mov	r4, r0
   13434:	ldr	r0, [pc, #16]	; 1344c <__assert_fail@plt+0x2518>
   13438:	ldr	r6, [r4]
   1343c:	movne	r0, r5
   13440:	bl	16cb8 <__assert_fail@plt+0x5d84>
   13444:	str	r6, [r4]
   13448:	pop	{r4, r5, r6, pc}
   1344c:	andeq	sl, r2, ip, ror r1
   13450:	ldr	r3, [pc, #12]	; 13464 <__assert_fail@plt+0x2530>
   13454:	cmp	r0, #0
   13458:	moveq	r0, r3
   1345c:	ldr	r0, [r0]
   13460:	bx	lr
   13464:	andeq	sl, r2, ip, ror r1
   13468:	ldr	r3, [pc, #12]	; 1347c <__assert_fail@plt+0x2548>
   1346c:	cmp	r0, #0
   13470:	moveq	r0, r3
   13474:	str	r1, [r0]
   13478:	bx	lr
   1347c:	andeq	sl, r2, ip, ror r1
   13480:	ldr	r3, [pc, #52]	; 134bc <__assert_fail@plt+0x2588>
   13484:	cmp	r0, #0
   13488:	moveq	r0, r3
   1348c:	add	r3, r0, #8
   13490:	push	{lr}		; (str lr, [sp, #-4]!)
   13494:	lsr	lr, r1, #5
   13498:	and	r1, r1, #31
   1349c:	ldr	ip, [r3, lr, lsl #2]
   134a0:	lsr	r0, ip, r1
   134a4:	eor	r2, r2, r0
   134a8:	and	r2, r2, #1
   134ac:	and	r0, r0, #1
   134b0:	eor	r1, ip, r2, lsl r1
   134b4:	str	r1, [r3, lr, lsl #2]
   134b8:	pop	{pc}		; (ldr pc, [sp], #4)
   134bc:	andeq	sl, r2, ip, ror r1
   134c0:	ldr	r3, [pc, #16]	; 134d8 <__assert_fail@plt+0x25a4>
   134c4:	cmp	r0, #0
   134c8:	movne	r3, r0
   134cc:	ldr	r0, [r3, #4]
   134d0:	str	r1, [r3, #4]
   134d4:	bx	lr
   134d8:	andeq	sl, r2, ip, ror r1
   134dc:	ldr	r3, [pc, #44]	; 13510 <__assert_fail@plt+0x25dc>
   134e0:	cmp	r0, #0
   134e4:	moveq	r0, r3
   134e8:	mov	ip, #10
   134ec:	cmp	r2, #0
   134f0:	cmpne	r1, #0
   134f4:	str	ip, [r0]
   134f8:	beq	13508 <__assert_fail@plt+0x25d4>
   134fc:	str	r1, [r0, #40]	; 0x28
   13500:	str	r2, [r0, #44]	; 0x2c
   13504:	bx	lr
   13508:	push	{r4, lr}
   1350c:	bl	10f28 <abort@plt>
   13510:	andeq	sl, r2, ip, ror r1
   13514:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13518:	sub	sp, sp, #24
   1351c:	ldr	ip, [pc, #108]	; 13590 <__assert_fail@plt+0x265c>
   13520:	ldr	r4, [sp, #56]	; 0x38
   13524:	mov	r9, r2
   13528:	cmp	r4, #0
   1352c:	moveq	r4, ip
   13530:	mov	sl, r3
   13534:	mov	r7, r0
   13538:	mov	r8, r1
   1353c:	bl	10e5c <__errno_location@plt>
   13540:	ldr	r3, [r4, #44]	; 0x2c
   13544:	mov	r1, r8
   13548:	ldr	r6, [r0]
   1354c:	str	r3, [sp, #16]
   13550:	ldr	r2, [r4, #40]	; 0x28
   13554:	add	r3, r4, #8
   13558:	str	r3, [sp, #8]
   1355c:	str	r2, [sp, #12]
   13560:	ldr	r2, [r4, #4]
   13564:	mov	r5, r0
   13568:	str	r2, [sp, #4]
   1356c:	ldr	ip, [r4]
   13570:	mov	r3, sl
   13574:	mov	r2, r9
   13578:	mov	r0, r7
   1357c:	str	ip, [sp]
   13580:	bl	11e98 <__assert_fail@plt+0xf64>
   13584:	str	r6, [r5]
   13588:	add	sp, sp, #24
   1358c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13590:	andeq	sl, r2, ip, ror r1
   13594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13598:	cmp	r2, #0
   1359c:	sub	sp, sp, #36	; 0x24
   135a0:	ldr	r4, [pc, #164]	; 1364c <__assert_fail@plt+0x2718>
   135a4:	mov	r8, r1
   135a8:	movne	r4, r2
   135ac:	mov	r7, r0
   135b0:	bl	10e5c <__errno_location@plt>
   135b4:	ldr	r3, [r4, #44]	; 0x2c
   135b8:	ldr	r5, [r4, #4]
   135bc:	add	r9, r4, #8
   135c0:	orr	r5, r5, #1
   135c4:	mov	r1, #0
   135c8:	mov	r2, r7
   135cc:	ldr	fp, [r0]
   135d0:	str	r3, [sp, #16]
   135d4:	ldr	r3, [r4, #40]	; 0x28
   135d8:	stmib	sp, {r5, r9}
   135dc:	str	r3, [sp, #12]
   135e0:	ldr	r3, [r4]
   135e4:	mov	r6, r0
   135e8:	str	r3, [sp]
   135ec:	mov	r0, r1
   135f0:	mov	r3, r8
   135f4:	bl	11e98 <__assert_fail@plt+0xf64>
   135f8:	add	r1, r0, #1
   135fc:	mov	r0, r1
   13600:	str	r1, [sp, #28]
   13604:	bl	16774 <__assert_fail@plt+0x5840>
   13608:	ldr	r3, [r4, #44]	; 0x2c
   1360c:	ldr	r1, [sp, #28]
   13610:	str	r3, [sp, #16]
   13614:	ldr	r3, [r4, #40]	; 0x28
   13618:	str	r5, [sp, #4]
   1361c:	str	r3, [sp, #12]
   13620:	str	r9, [sp, #8]
   13624:	ldr	ip, [r4]
   13628:	mov	r3, r8
   1362c:	mov	r2, r7
   13630:	str	ip, [sp]
   13634:	mov	sl, r0
   13638:	bl	11e98 <__assert_fail@plt+0xf64>
   1363c:	mov	r0, sl
   13640:	str	fp, [r6]
   13644:	add	sp, sp, #36	; 0x24
   13648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1364c:	andeq	sl, r2, ip, ror r1
   13650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13654:	cmp	r3, #0
   13658:	sub	sp, sp, #44	; 0x2c
   1365c:	ldr	r4, [pc, #192]	; 13724 <__assert_fail@plt+0x27f0>
   13660:	mov	r6, r2
   13664:	movne	r4, r3
   13668:	mov	r9, r1
   1366c:	mov	r8, r0
   13670:	bl	10e5c <__errno_location@plt>
   13674:	ldr	r3, [r4, #44]	; 0x2c
   13678:	ldr	r5, [r4, #4]
   1367c:	add	sl, r4, #8
   13680:	cmp	r6, #0
   13684:	orreq	r5, r5, #1
   13688:	mov	r1, #0
   1368c:	ldr	r2, [r0]
   13690:	str	r3, [sp, #16]
   13694:	ldr	r3, [r4, #40]	; 0x28
   13698:	stmib	sp, {r5, sl}
   1369c:	str	r3, [sp, #12]
   136a0:	ldr	r3, [r4]
   136a4:	mov	r7, r0
   136a8:	str	r2, [sp, #28]
   136ac:	str	r3, [sp]
   136b0:	mov	r2, r8
   136b4:	mov	r3, r9
   136b8:	mov	r0, r1
   136bc:	bl	11e98 <__assert_fail@plt+0xf64>
   136c0:	add	r1, r0, #1
   136c4:	mov	fp, r0
   136c8:	mov	r0, r1
   136cc:	str	r1, [sp, #36]	; 0x24
   136d0:	bl	16774 <__assert_fail@plt+0x5840>
   136d4:	ldr	r3, [r4, #44]	; 0x2c
   136d8:	mov	r2, r8
   136dc:	str	r3, [sp, #16]
   136e0:	ldr	r3, [r4, #40]	; 0x28
   136e4:	str	r5, [sp, #4]
   136e8:	str	r3, [sp, #12]
   136ec:	str	sl, [sp, #8]
   136f0:	ldr	ip, [r4]
   136f4:	ldr	r1, [sp, #36]	; 0x24
   136f8:	mov	r3, r9
   136fc:	str	ip, [sp]
   13700:	str	r0, [sp, #32]
   13704:	bl	11e98 <__assert_fail@plt+0xf64>
   13708:	ldr	r2, [sp, #28]
   1370c:	cmp	r6, #0
   13710:	str	r2, [r7]
   13714:	ldr	r0, [sp, #32]
   13718:	strne	fp, [r6]
   1371c:	add	sp, sp, #44	; 0x2c
   13720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13724:	andeq	sl, r2, ip, ror r1
   13728:	push	{r4, r5, r6, r7, r8, lr}
   1372c:	ldr	r6, [pc, #116]	; 137a8 <__assert_fail@plt+0x2874>
   13730:	ldr	r3, [r6, #4]
   13734:	ldr	r7, [r6]
   13738:	cmp	r3, #1
   1373c:	movgt	r5, r7
   13740:	movgt	r4, #1
   13744:	ble	13764 <__assert_fail@plt+0x2830>
   13748:	ldr	r0, [r5, #12]
   1374c:	bl	17f68 <__assert_fail@plt+0x7034>
   13750:	ldr	r3, [r6, #4]
   13754:	add	r4, r4, #1
   13758:	cmp	r3, r4
   1375c:	add	r5, r5, #8
   13760:	bgt	13748 <__assert_fail@plt+0x2814>
   13764:	ldr	r0, [r7, #4]
   13768:	ldr	r4, [pc, #60]	; 137ac <__assert_fail@plt+0x2878>
   1376c:	cmp	r0, r4
   13770:	beq	13784 <__assert_fail@plt+0x2850>
   13774:	bl	17f68 <__assert_fail@plt+0x7034>
   13778:	mov	r3, #256	; 0x100
   1377c:	str	r4, [r6, #12]
   13780:	str	r3, [r6, #8]
   13784:	ldr	r4, [pc, #36]	; 137b0 <__assert_fail@plt+0x287c>
   13788:	cmp	r7, r4
   1378c:	beq	1379c <__assert_fail@plt+0x2868>
   13790:	mov	r0, r7
   13794:	bl	17f68 <__assert_fail@plt+0x7034>
   13798:	str	r4, [r6]
   1379c:	mov	r3, #1
   137a0:	str	r3, [r6, #4]
   137a4:	pop	{r4, r5, r6, r7, r8, pc}
   137a8:	strdeq	sl, [r2], -r4
   137ac:	andeq	sl, r2, ip, lsr #3
   137b0:	strdeq	sl, [r2], -ip
   137b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137b8:	sub	sp, sp, #44	; 0x2c
   137bc:	mov	r5, r0
   137c0:	mov	sl, r1
   137c4:	bl	10e5c <__errno_location@plt>
   137c8:	ldr	r4, [pc, #400]	; 13960 <__assert_fail@plt+0x2a2c>
   137cc:	cmn	r5, #-2147483647	; 0x80000001
   137d0:	ldr	r6, [r4]
   137d4:	mov	r8, r0
   137d8:	movne	r0, #0
   137dc:	moveq	r0, #1
   137e0:	ldr	r3, [r8]
   137e4:	orrs	r0, r0, r5, lsr #31
   137e8:	str	r3, [sp, #24]
   137ec:	bne	1395c <__assert_fail@plt+0x2a28>
   137f0:	ldr	r2, [r4, #4]
   137f4:	cmp	r5, r2
   137f8:	blt	13858 <__assert_fail@plt+0x2924>
   137fc:	add	r7, r4, #8
   13800:	cmp	r6, r7
   13804:	str	r2, [sp, #36]	; 0x24
   13808:	beq	1392c <__assert_fail@plt+0x29f8>
   1380c:	mov	r3, #8
   13810:	sub	r2, r5, r2
   13814:	mov	r0, r6
   13818:	str	r3, [sp]
   1381c:	add	r2, r2, #1
   13820:	mvn	r3, #-2147483648	; 0x80000000
   13824:	add	r1, sp, #36	; 0x24
   13828:	bl	16990 <__assert_fail@plt+0x5a5c>
   1382c:	mov	r6, r0
   13830:	str	r0, [r4]
   13834:	ldr	r0, [r4, #4]
   13838:	ldr	r2, [sp, #36]	; 0x24
   1383c:	mov	r1, #0
   13840:	sub	r2, r2, r0
   13844:	add	r0, r6, r0, lsl #3
   13848:	lsl	r2, r2, #3
   1384c:	bl	10e74 <memset@plt>
   13850:	ldr	r3, [sp, #36]	; 0x24
   13854:	str	r3, [r4, #4]
   13858:	ldr	r4, [pc, #260]	; 13964 <__assert_fail@plt+0x2a30>
   1385c:	add	fp, r6, r5, lsl #3
   13860:	ldr	r9, [r6, r5, lsl #3]
   13864:	ldr	r0, [r4, #4]
   13868:	ldr	r3, [r4]
   1386c:	ldr	r7, [fp, #4]
   13870:	ldr	r1, [r4, #44]	; 0x2c
   13874:	ldr	r2, [r4, #40]	; 0x28
   13878:	orr	r0, r0, #1
   1387c:	str	r3, [sp]
   13880:	add	r3, r4, #8
   13884:	str	r0, [sp, #28]
   13888:	str	r0, [sp, #4]
   1388c:	str	r1, [sp, #16]
   13890:	str	r2, [sp, #12]
   13894:	str	r3, [sp, #8]
   13898:	mov	r0, r7
   1389c:	mov	r1, r9
   138a0:	mvn	r3, #0
   138a4:	mov	r2, sl
   138a8:	bl	11e98 <__assert_fail@plt+0xf64>
   138ac:	cmp	r9, r0
   138b0:	bhi	13918 <__assert_fail@plt+0x29e4>
   138b4:	add	r3, r4, #48	; 0x30
   138b8:	add	r9, r0, #1
   138bc:	cmp	r7, r3
   138c0:	str	r9, [r6, r5, lsl #3]
   138c4:	beq	138d0 <__assert_fail@plt+0x299c>
   138c8:	mov	r0, r7
   138cc:	bl	17f68 <__assert_fail@plt+0x7034>
   138d0:	mov	r0, r9
   138d4:	bl	16774 <__assert_fail@plt+0x5840>
   138d8:	ldr	ip, [r4, #44]	; 0x2c
   138dc:	ldr	r3, [r4]
   138e0:	ldr	lr, [r4, #40]	; 0x28
   138e4:	ldr	r4, [pc, #124]	; 13968 <__assert_fail@plt+0x2a34>
   138e8:	mov	r2, sl
   138ec:	mov	r1, r9
   138f0:	str	r0, [fp, #4]
   138f4:	str	r4, [sp, #8]
   138f8:	ldr	r4, [sp, #28]
   138fc:	str	r3, [sp]
   13900:	str	r4, [sp, #4]
   13904:	str	ip, [sp, #16]
   13908:	str	lr, [sp, #12]
   1390c:	mvn	r3, #0
   13910:	mov	r7, r0
   13914:	bl	11e98 <__assert_fail@plt+0xf64>
   13918:	ldr	r3, [sp, #24]
   1391c:	mov	r0, r7
   13920:	str	r3, [r8]
   13924:	add	sp, sp, #44	; 0x2c
   13928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1392c:	mov	r3, #8
   13930:	sub	r2, r5, r2
   13934:	str	r3, [sp]
   13938:	add	r1, sp, #36	; 0x24
   1393c:	add	r2, r2, #1
   13940:	mvn	r3, #-2147483648	; 0x80000000
   13944:	bl	16990 <__assert_fail@plt+0x5a5c>
   13948:	mov	r6, r0
   1394c:	ldm	r7, {r0, r1}
   13950:	str	r6, [r4]
   13954:	stm	r6, {r0, r1}
   13958:	b	13834 <__assert_fail@plt+0x2900>
   1395c:	bl	10f28 <abort@plt>
   13960:	strdeq	sl, [r2], -r4
   13964:	andeq	sl, r2, ip, ror r1
   13968:	andeq	sl, r2, r4, lsl #3
   1396c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13970:	sub	sp, sp, #52	; 0x34
   13974:	mov	r5, r0
   13978:	mov	sl, r1
   1397c:	mov	fp, r2
   13980:	bl	10e5c <__errno_location@plt>
   13984:	ldr	r4, [pc, #408]	; 13b24 <__assert_fail@plt+0x2bf0>
   13988:	cmn	r5, #-2147483647	; 0x80000001
   1398c:	ldr	r6, [r4]
   13990:	mov	r8, r0
   13994:	movne	r0, #0
   13998:	moveq	r0, #1
   1399c:	ldr	r3, [r8]
   139a0:	orrs	r0, r0, r5, lsr #31
   139a4:	str	r3, [sp, #28]
   139a8:	bne	13b20 <__assert_fail@plt+0x2bec>
   139ac:	ldr	r2, [r4, #4]
   139b0:	cmp	r5, r2
   139b4:	blt	13a14 <__assert_fail@plt+0x2ae0>
   139b8:	add	r7, r4, #8
   139bc:	cmp	r6, r7
   139c0:	str	r2, [sp, #44]	; 0x2c
   139c4:	beq	13af0 <__assert_fail@plt+0x2bbc>
   139c8:	mov	r3, #8
   139cc:	sub	r2, r5, r2
   139d0:	mov	r0, r6
   139d4:	str	r3, [sp]
   139d8:	add	r2, r2, #1
   139dc:	mvn	r3, #-2147483648	; 0x80000000
   139e0:	add	r1, sp, #44	; 0x2c
   139e4:	bl	16990 <__assert_fail@plt+0x5a5c>
   139e8:	mov	r6, r0
   139ec:	str	r0, [r4]
   139f0:	ldr	r0, [r4, #4]
   139f4:	ldr	r2, [sp, #44]	; 0x2c
   139f8:	mov	r1, #0
   139fc:	sub	r2, r2, r0
   13a00:	add	r0, r6, r0, lsl #3
   13a04:	lsl	r2, r2, #3
   13a08:	bl	10e74 <memset@plt>
   13a0c:	ldr	r3, [sp, #44]	; 0x2c
   13a10:	str	r3, [r4, #4]
   13a14:	ldr	r4, [pc, #268]	; 13b28 <__assert_fail@plt+0x2bf4>
   13a18:	add	r3, r6, r5, lsl #3
   13a1c:	str	r3, [sp, #32]
   13a20:	ldr	r7, [r3, #4]
   13a24:	ldr	r0, [r4, #4]
   13a28:	ldr	r3, [r4]
   13a2c:	ldr	r9, [r6, r5, lsl #3]
   13a30:	ldr	r1, [r4, #44]	; 0x2c
   13a34:	ldr	r2, [r4, #40]	; 0x28
   13a38:	orr	r0, r0, #1
   13a3c:	str	r3, [sp]
   13a40:	add	r3, r4, #8
   13a44:	str	r0, [sp, #36]	; 0x24
   13a48:	str	r0, [sp, #4]
   13a4c:	str	r1, [sp, #16]
   13a50:	str	r2, [sp, #12]
   13a54:	str	r3, [sp, #8]
   13a58:	mov	r0, r7
   13a5c:	mov	r1, r9
   13a60:	mov	r3, fp
   13a64:	mov	r2, sl
   13a68:	bl	11e98 <__assert_fail@plt+0xf64>
   13a6c:	cmp	r9, r0
   13a70:	bhi	13adc <__assert_fail@plt+0x2ba8>
   13a74:	add	r3, r4, #48	; 0x30
   13a78:	add	r9, r0, #1
   13a7c:	cmp	r7, r3
   13a80:	str	r9, [r6, r5, lsl #3]
   13a84:	beq	13a90 <__assert_fail@plt+0x2b5c>
   13a88:	mov	r0, r7
   13a8c:	bl	17f68 <__assert_fail@plt+0x7034>
   13a90:	mov	r0, r9
   13a94:	bl	16774 <__assert_fail@plt+0x5840>
   13a98:	ldr	ip, [sp, #32]
   13a9c:	ldr	lr, [r4, #44]	; 0x2c
   13aa0:	ldr	r5, [r4, #40]	; 0x28
   13aa4:	mov	r3, fp
   13aa8:	mov	r2, sl
   13aac:	mov	r1, r9
   13ab0:	str	r0, [ip, #4]
   13ab4:	ldr	ip, [r4]
   13ab8:	ldr	r4, [pc, #108]	; 13b2c <__assert_fail@plt+0x2bf8>
   13abc:	str	lr, [sp, #16]
   13ac0:	str	r4, [sp, #8]
   13ac4:	ldr	r4, [sp, #36]	; 0x24
   13ac8:	str	r5, [sp, #12]
   13acc:	str	r4, [sp, #4]
   13ad0:	str	ip, [sp]
   13ad4:	mov	r7, r0
   13ad8:	bl	11e98 <__assert_fail@plt+0xf64>
   13adc:	ldr	r3, [sp, #28]
   13ae0:	mov	r0, r7
   13ae4:	str	r3, [r8]
   13ae8:	add	sp, sp, #52	; 0x34
   13aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13af0:	mov	r3, #8
   13af4:	sub	r2, r5, r2
   13af8:	str	r3, [sp]
   13afc:	add	r1, sp, #44	; 0x2c
   13b00:	add	r2, r2, #1
   13b04:	mvn	r3, #-2147483648	; 0x80000000
   13b08:	bl	16990 <__assert_fail@plt+0x5a5c>
   13b0c:	mov	r6, r0
   13b10:	ldm	r7, {r0, r1}
   13b14:	str	r6, [r4]
   13b18:	stm	r6, {r0, r1}
   13b1c:	b	139f0 <__assert_fail@plt+0x2abc>
   13b20:	bl	10f28 <abort@plt>
   13b24:	strdeq	sl, [r2], -r4
   13b28:	andeq	sl, r2, ip, ror r1
   13b2c:	andeq	sl, r2, r4, lsl #3
   13b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b34:	sub	sp, sp, #44	; 0x2c
   13b38:	mov	sl, r0
   13b3c:	bl	10e5c <__errno_location@plt>
   13b40:	ldr	r4, [pc, #352]	; 13ca8 <__assert_fail@plt+0x2d74>
   13b44:	ldr	r2, [r4, #4]
   13b48:	ldr	r5, [r4]
   13b4c:	cmp	r2, #0
   13b50:	ldr	r3, [r0]
   13b54:	mov	r8, r0
   13b58:	str	r3, [sp, #28]
   13b5c:	bgt	13bb8 <__assert_fail@plt+0x2c84>
   13b60:	add	r6, r4, #8
   13b64:	cmp	r5, r6
   13b68:	str	r2, [sp, #36]	; 0x24
   13b6c:	beq	13c78 <__assert_fail@plt+0x2d44>
   13b70:	mov	r3, #8
   13b74:	mov	r0, r5
   13b78:	str	r3, [sp]
   13b7c:	rsb	r2, r2, #1
   13b80:	mvn	r3, #-2147483648	; 0x80000000
   13b84:	add	r1, sp, #36	; 0x24
   13b88:	bl	16990 <__assert_fail@plt+0x5a5c>
   13b8c:	mov	r5, r0
   13b90:	str	r0, [r4]
   13b94:	ldr	r0, [r4, #4]
   13b98:	ldr	r2, [sp, #36]	; 0x24
   13b9c:	mov	r1, #0
   13ba0:	sub	r2, r2, r0
   13ba4:	add	r0, r5, r0, lsl #3
   13ba8:	lsl	r2, r2, #3
   13bac:	bl	10e74 <memset@plt>
   13bb0:	ldr	r3, [sp, #36]	; 0x24
   13bb4:	str	r3, [r4, #4]
   13bb8:	ldr	r4, [pc, #236]	; 13cac <__assert_fail@plt+0x2d78>
   13bbc:	ldr	r9, [r5]
   13bc0:	ldr	r6, [r5, #4]
   13bc4:	ldr	r7, [r4, #4]
   13bc8:	ldr	r1, [r4, #44]	; 0x2c
   13bcc:	ldr	r2, [r4, #40]	; 0x28
   13bd0:	ldr	r3, [r4]
   13bd4:	orr	r7, r7, #1
   13bd8:	add	fp, r4, #8
   13bdc:	str	r1, [sp, #16]
   13be0:	str	r2, [sp, #12]
   13be4:	str	r3, [sp]
   13be8:	str	r7, [sp, #4]
   13bec:	str	fp, [sp, #8]
   13bf0:	mov	r1, r9
   13bf4:	mov	r0, r6
   13bf8:	mvn	r3, #0
   13bfc:	mov	r2, sl
   13c00:	bl	11e98 <__assert_fail@plt+0xf64>
   13c04:	cmp	r9, r0
   13c08:	bhi	13c64 <__assert_fail@plt+0x2d30>
   13c0c:	add	r3, r4, #48	; 0x30
   13c10:	add	r9, r0, #1
   13c14:	cmp	r6, r3
   13c18:	str	r9, [r5]
   13c1c:	beq	13c28 <__assert_fail@plt+0x2cf4>
   13c20:	mov	r0, r6
   13c24:	bl	17f68 <__assert_fail@plt+0x7034>
   13c28:	mov	r0, r9
   13c2c:	bl	16774 <__assert_fail@plt+0x5840>
   13c30:	ldr	ip, [r4, #44]	; 0x2c
   13c34:	ldr	r3, [r4]
   13c38:	ldr	lr, [r4, #40]	; 0x28
   13c3c:	mov	r2, sl
   13c40:	mov	r1, r9
   13c44:	str	r0, [r5, #4]
   13c48:	str	r3, [sp]
   13c4c:	stmib	sp, {r7, fp}
   13c50:	str	ip, [sp, #16]
   13c54:	str	lr, [sp, #12]
   13c58:	mvn	r3, #0
   13c5c:	mov	r6, r0
   13c60:	bl	11e98 <__assert_fail@plt+0xf64>
   13c64:	ldr	r3, [sp, #28]
   13c68:	mov	r0, r6
   13c6c:	str	r3, [r8]
   13c70:	add	sp, sp, #44	; 0x2c
   13c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c78:	mov	r3, #8
   13c7c:	str	r3, [sp]
   13c80:	add	r1, sp, #36	; 0x24
   13c84:	rsb	r2, r2, #1
   13c88:	mvn	r3, #-2147483648	; 0x80000000
   13c8c:	mov	r0, #0
   13c90:	bl	16990 <__assert_fail@plt+0x5a5c>
   13c94:	mov	r5, r0
   13c98:	ldm	r6, {r0, r1}
   13c9c:	str	r5, [r4]
   13ca0:	stm	r5, {r0, r1}
   13ca4:	b	13b94 <__assert_fail@plt+0x2c60>
   13ca8:	strdeq	sl, [r2], -r4
   13cac:	andeq	sl, r2, ip, ror r1
   13cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cb4:	sub	sp, sp, #44	; 0x2c
   13cb8:	mov	r9, r0
   13cbc:	mov	sl, r1
   13cc0:	bl	10e5c <__errno_location@plt>
   13cc4:	ldr	r4, [pc, #364]	; 13e38 <__assert_fail@plt+0x2f04>
   13cc8:	ldr	r2, [r4, #4]
   13ccc:	ldr	r5, [r4]
   13cd0:	cmp	r2, #0
   13cd4:	ldr	r3, [r0]
   13cd8:	mov	r7, r0
   13cdc:	str	r3, [sp, #24]
   13ce0:	bgt	13d3c <__assert_fail@plt+0x2e08>
   13ce4:	add	r6, r4, #8
   13ce8:	cmp	r5, r6
   13cec:	str	r2, [sp, #36]	; 0x24
   13cf0:	beq	13e08 <__assert_fail@plt+0x2ed4>
   13cf4:	mov	r3, #8
   13cf8:	mov	r0, r5
   13cfc:	str	r3, [sp]
   13d00:	rsb	r2, r2, #1
   13d04:	mvn	r3, #-2147483648	; 0x80000000
   13d08:	add	r1, sp, #36	; 0x24
   13d0c:	bl	16990 <__assert_fail@plt+0x5a5c>
   13d10:	mov	r5, r0
   13d14:	str	r0, [r4]
   13d18:	ldr	r0, [r4, #4]
   13d1c:	ldr	r2, [sp, #36]	; 0x24
   13d20:	mov	r1, #0
   13d24:	sub	r2, r2, r0
   13d28:	add	r0, r5, r0, lsl #3
   13d2c:	lsl	r2, r2, #3
   13d30:	bl	10e74 <memset@plt>
   13d34:	ldr	r3, [sp, #36]	; 0x24
   13d38:	str	r3, [r4, #4]
   13d3c:	ldr	r4, [pc, #248]	; 13e3c <__assert_fail@plt+0x2f08>
   13d40:	ldr	r8, [r5]
   13d44:	ldr	r6, [r5, #4]
   13d48:	ldr	r0, [r4, #4]
   13d4c:	ldr	r1, [r4, #44]	; 0x2c
   13d50:	ldr	r2, [r4, #40]	; 0x28
   13d54:	ldr	r3, [r4]
   13d58:	orr	r0, r0, #1
   13d5c:	add	fp, r4, #8
   13d60:	str	r0, [sp, #28]
   13d64:	str	r0, [sp, #4]
   13d68:	str	r1, [sp, #16]
   13d6c:	str	r2, [sp, #12]
   13d70:	str	r3, [sp]
   13d74:	str	fp, [sp, #8]
   13d78:	mov	r1, r8
   13d7c:	mov	r0, r6
   13d80:	mov	r3, sl
   13d84:	mov	r2, r9
   13d88:	bl	11e98 <__assert_fail@plt+0xf64>
   13d8c:	cmp	r8, r0
   13d90:	bhi	13df4 <__assert_fail@plt+0x2ec0>
   13d94:	add	r3, r4, #48	; 0x30
   13d98:	add	r8, r0, #1
   13d9c:	cmp	r6, r3
   13da0:	str	r8, [r5]
   13da4:	beq	13db0 <__assert_fail@plt+0x2e7c>
   13da8:	mov	r0, r6
   13dac:	bl	17f68 <__assert_fail@plt+0x7034>
   13db0:	mov	r0, r8
   13db4:	bl	16774 <__assert_fail@plt+0x5840>
   13db8:	ldr	lr, [r4, #44]	; 0x2c
   13dbc:	ldr	ip, [r4]
   13dc0:	mov	r3, sl
   13dc4:	mov	r2, r9
   13dc8:	mov	r1, r8
   13dcc:	str	r0, [r5, #4]
   13dd0:	ldr	r5, [r4, #40]	; 0x28
   13dd4:	ldr	r4, [sp, #28]
   13dd8:	str	fp, [sp, #8]
   13ddc:	str	r4, [sp, #4]
   13de0:	str	lr, [sp, #16]
   13de4:	str	r5, [sp, #12]
   13de8:	str	ip, [sp]
   13dec:	mov	r6, r0
   13df0:	bl	11e98 <__assert_fail@plt+0xf64>
   13df4:	ldr	r3, [sp, #24]
   13df8:	mov	r0, r6
   13dfc:	str	r3, [r7]
   13e00:	add	sp, sp, #44	; 0x2c
   13e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e08:	mov	r3, #8
   13e0c:	str	r3, [sp]
   13e10:	add	r1, sp, #36	; 0x24
   13e14:	rsb	r2, r2, #1
   13e18:	mvn	r3, #-2147483648	; 0x80000000
   13e1c:	mov	r0, #0
   13e20:	bl	16990 <__assert_fail@plt+0x5a5c>
   13e24:	mov	r5, r0
   13e28:	ldm	r6, {r0, r1}
   13e2c:	str	r5, [r4]
   13e30:	stm	r5, {r0, r1}
   13e34:	b	13d18 <__assert_fail@plt+0x2de4>
   13e38:	strdeq	sl, [r2], -r4
   13e3c:	andeq	sl, r2, ip, ror r1
   13e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e44:	sub	sp, sp, #132	; 0x84
   13e48:	mov	r5, r1
   13e4c:	mov	r4, r0
   13e50:	mov	r9, r2
   13e54:	add	r0, sp, #80	; 0x50
   13e58:	mov	r2, #48	; 0x30
   13e5c:	mov	r1, #0
   13e60:	bl	10e74 <memset@plt>
   13e64:	cmp	r5, #10
   13e68:	beq	14020 <__assert_fail@plt+0x30ec>
   13e6c:	add	lr, sp, #80	; 0x50
   13e70:	str	r5, [sp, #80]	; 0x50
   13e74:	ldm	lr!, {r0, r1, r2, r3}
   13e78:	add	ip, sp, #32
   13e7c:	ldr	r6, [pc, #416]	; 14024 <__assert_fail@plt+0x30f0>
   13e80:	stmia	ip!, {r0, r1, r2, r3}
   13e84:	ldm	lr!, {r0, r1, r2, r3}
   13e88:	stmia	ip!, {r0, r1, r2, r3}
   13e8c:	ldm	lr, {r0, r1, r2, r3}
   13e90:	stm	ip, {r0, r1, r2, r3}
   13e94:	bl	10e5c <__errno_location@plt>
   13e98:	cmn	r4, #-2147483647	; 0x80000001
   13e9c:	ldr	r5, [r6]
   13ea0:	mov	r7, r0
   13ea4:	movne	r0, #0
   13ea8:	moveq	r0, #1
   13eac:	ldr	r3, [r7]
   13eb0:	orrs	r0, r0, r4, lsr #31
   13eb4:	str	r3, [sp, #24]
   13eb8:	bne	14020 <__assert_fail@plt+0x30ec>
   13ebc:	ldr	r2, [r6, #4]
   13ec0:	cmp	r4, r2
   13ec4:	blt	13f24 <__assert_fail@plt+0x2ff0>
   13ec8:	add	r8, r6, #8
   13ecc:	cmp	r5, r8
   13ed0:	str	r2, [sp, #80]	; 0x50
   13ed4:	beq	13ff0 <__assert_fail@plt+0x30bc>
   13ed8:	mov	r3, #8
   13edc:	sub	r2, r4, r2
   13ee0:	mov	r0, r5
   13ee4:	str	r3, [sp]
   13ee8:	add	r2, r2, #1
   13eec:	add	r1, sp, #80	; 0x50
   13ef0:	mvn	r3, #-2147483648	; 0x80000000
   13ef4:	bl	16990 <__assert_fail@plt+0x5a5c>
   13ef8:	mov	r5, r0
   13efc:	str	r0, [r6]
   13f00:	ldr	r0, [r6, #4]
   13f04:	ldr	r2, [sp, #80]	; 0x50
   13f08:	mov	r1, #0
   13f0c:	sub	r2, r2, r0
   13f10:	add	r0, r5, r0, lsl #3
   13f14:	lsl	r2, r2, #3
   13f18:	bl	10e74 <memset@plt>
   13f1c:	ldr	r3, [sp, #80]	; 0x50
   13f20:	str	r3, [r6, #4]
   13f24:	add	fp, r5, r4, lsl #3
   13f28:	ldr	r1, [sp, #36]	; 0x24
   13f2c:	ldr	r8, [r5, r4, lsl #3]
   13f30:	ldr	r6, [fp, #4]
   13f34:	ldr	r2, [sp, #72]	; 0x48
   13f38:	ldr	r3, [sp, #32]
   13f3c:	ldr	ip, [sp, #76]	; 0x4c
   13f40:	orr	r1, r1, #1
   13f44:	add	sl, sp, #40	; 0x28
   13f48:	str	r1, [sp, #28]
   13f4c:	str	r1, [sp, #4]
   13f50:	str	r2, [sp, #12]
   13f54:	str	r3, [sp]
   13f58:	mov	r0, r6
   13f5c:	mov	r1, r8
   13f60:	str	ip, [sp, #16]
   13f64:	str	sl, [sp, #8]
   13f68:	mvn	r3, #0
   13f6c:	mov	r2, r9
   13f70:	bl	11e98 <__assert_fail@plt+0xf64>
   13f74:	cmp	r8, r0
   13f78:	bhi	13fdc <__assert_fail@plt+0x30a8>
   13f7c:	ldr	r3, [pc, #164]	; 14028 <__assert_fail@plt+0x30f4>
   13f80:	add	r8, r0, #1
   13f84:	cmp	r6, r3
   13f88:	str	r8, [r5, r4, lsl #3]
   13f8c:	beq	13f98 <__assert_fail@plt+0x3064>
   13f90:	mov	r0, r6
   13f94:	bl	17f68 <__assert_fail@plt+0x7034>
   13f98:	mov	r0, r8
   13f9c:	bl	16774 <__assert_fail@plt+0x5840>
   13fa0:	ldr	lr, [sp, #76]	; 0x4c
   13fa4:	ldr	r3, [sp, #32]
   13fa8:	ldr	ip, [sp, #72]	; 0x48
   13fac:	ldr	r4, [sp, #28]
   13fb0:	mov	r2, r9
   13fb4:	mov	r1, r8
   13fb8:	str	r0, [fp, #4]
   13fbc:	str	r3, [sp]
   13fc0:	str	sl, [sp, #8]
   13fc4:	str	r4, [sp, #4]
   13fc8:	str	lr, [sp, #16]
   13fcc:	str	ip, [sp, #12]
   13fd0:	mvn	r3, #0
   13fd4:	mov	r6, r0
   13fd8:	bl	11e98 <__assert_fail@plt+0xf64>
   13fdc:	ldr	r3, [sp, #24]
   13fe0:	mov	r0, r6
   13fe4:	str	r3, [r7]
   13fe8:	add	sp, sp, #132	; 0x84
   13fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ff0:	mov	r3, #8
   13ff4:	sub	r2, r4, r2
   13ff8:	add	r1, sp, #80	; 0x50
   13ffc:	str	r3, [sp]
   14000:	add	r2, r2, #1
   14004:	mvn	r3, #-2147483648	; 0x80000000
   14008:	bl	16990 <__assert_fail@plt+0x5a5c>
   1400c:	mov	r5, r0
   14010:	ldm	r8, {r0, r1}
   14014:	str	r5, [r6]
   14018:	stm	r5, {r0, r1}
   1401c:	b	13f00 <__assert_fail@plt+0x2fcc>
   14020:	bl	10f28 <abort@plt>
   14024:	strdeq	sl, [r2], -r4
   14028:	andeq	sl, r2, ip, lsr #3
   1402c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14030:	sub	sp, sp, #132	; 0x84
   14034:	mov	r5, r1
   14038:	mov	r4, r0
   1403c:	mov	r9, r2
   14040:	add	r0, sp, #80	; 0x50
   14044:	mov	r2, #48	; 0x30
   14048:	mov	r1, #0
   1404c:	mov	sl, r3
   14050:	bl	10e74 <memset@plt>
   14054:	cmp	r5, #10
   14058:	beq	14214 <__assert_fail@plt+0x32e0>
   1405c:	add	lr, sp, #80	; 0x50
   14060:	str	r5, [sp, #80]	; 0x50
   14064:	ldm	lr!, {r0, r1, r2, r3}
   14068:	add	ip, sp, #32
   1406c:	ldr	r6, [pc, #420]	; 14218 <__assert_fail@plt+0x32e4>
   14070:	stmia	ip!, {r0, r1, r2, r3}
   14074:	ldm	lr!, {r0, r1, r2, r3}
   14078:	stmia	ip!, {r0, r1, r2, r3}
   1407c:	ldm	lr, {r0, r1, r2, r3}
   14080:	stm	ip, {r0, r1, r2, r3}
   14084:	bl	10e5c <__errno_location@plt>
   14088:	cmn	r4, #-2147483647	; 0x80000001
   1408c:	ldr	r5, [r6]
   14090:	mov	r7, r0
   14094:	movne	r0, #0
   14098:	moveq	r0, #1
   1409c:	ldr	r3, [r7]
   140a0:	orrs	r0, r0, r4, lsr #31
   140a4:	str	r3, [sp, #24]
   140a8:	bne	14214 <__assert_fail@plt+0x32e0>
   140ac:	ldr	r2, [r6, #4]
   140b0:	cmp	r4, r2
   140b4:	blt	14114 <__assert_fail@plt+0x31e0>
   140b8:	add	r8, r6, #8
   140bc:	cmp	r5, r8
   140c0:	str	r2, [sp, #80]	; 0x50
   140c4:	beq	141e4 <__assert_fail@plt+0x32b0>
   140c8:	mov	r3, #8
   140cc:	sub	r2, r4, r2
   140d0:	mov	r0, r5
   140d4:	str	r3, [sp]
   140d8:	add	r2, r2, #1
   140dc:	add	r1, sp, #80	; 0x50
   140e0:	mvn	r3, #-2147483648	; 0x80000000
   140e4:	bl	16990 <__assert_fail@plt+0x5a5c>
   140e8:	mov	r5, r0
   140ec:	str	r0, [r6]
   140f0:	ldr	r0, [r6, #4]
   140f4:	ldr	r2, [sp, #80]	; 0x50
   140f8:	mov	r1, #0
   140fc:	sub	r2, r2, r0
   14100:	add	r0, r5, r0, lsl #3
   14104:	lsl	r2, r2, #3
   14108:	bl	10e74 <memset@plt>
   1410c:	ldr	r3, [sp, #80]	; 0x50
   14110:	str	r3, [r6, #4]
   14114:	add	fp, r5, r4, lsl #3
   14118:	ldr	r3, [sp, #32]
   1411c:	ldr	r1, [sp, #36]	; 0x24
   14120:	ldr	r8, [r5, r4, lsl #3]
   14124:	ldr	r6, [fp, #4]
   14128:	ldr	r2, [sp, #72]	; 0x48
   1412c:	ldr	ip, [sp, #76]	; 0x4c
   14130:	orr	r1, r1, #1
   14134:	str	r3, [sp]
   14138:	add	r3, sp, #40	; 0x28
   1413c:	str	r1, [sp, #28]
   14140:	str	r1, [sp, #4]
   14144:	str	r2, [sp, #12]
   14148:	str	r3, [sp, #8]
   1414c:	mov	r0, r6
   14150:	mov	r1, r8
   14154:	str	ip, [sp, #16]
   14158:	mov	r3, sl
   1415c:	mov	r2, r9
   14160:	bl	11e98 <__assert_fail@plt+0xf64>
   14164:	cmp	r8, r0
   14168:	bhi	141d0 <__assert_fail@plt+0x329c>
   1416c:	ldr	r3, [pc, #168]	; 1421c <__assert_fail@plt+0x32e8>
   14170:	add	r8, r0, #1
   14174:	cmp	r6, r3
   14178:	str	r8, [r5, r4, lsl #3]
   1417c:	beq	14188 <__assert_fail@plt+0x3254>
   14180:	mov	r0, r6
   14184:	bl	17f68 <__assert_fail@plt+0x7034>
   14188:	mov	r0, r8
   1418c:	bl	16774 <__assert_fail@plt+0x5840>
   14190:	add	lr, sp, #40	; 0x28
   14194:	ldr	ip, [sp, #76]	; 0x4c
   14198:	ldr	r4, [sp, #72]	; 0x48
   1419c:	ldr	r5, [sp, #28]
   141a0:	mov	r3, sl
   141a4:	mov	r2, r9
   141a8:	mov	r1, r8
   141ac:	str	r0, [fp, #4]
   141b0:	str	lr, [sp, #8]
   141b4:	ldr	lr, [sp, #32]
   141b8:	str	r5, [sp, #4]
   141bc:	str	ip, [sp, #16]
   141c0:	str	r4, [sp, #12]
   141c4:	str	lr, [sp]
   141c8:	mov	r6, r0
   141cc:	bl	11e98 <__assert_fail@plt+0xf64>
   141d0:	ldr	r3, [sp, #24]
   141d4:	mov	r0, r6
   141d8:	str	r3, [r7]
   141dc:	add	sp, sp, #132	; 0x84
   141e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141e4:	mov	r3, #8
   141e8:	sub	r2, r4, r2
   141ec:	add	r1, sp, #80	; 0x50
   141f0:	str	r3, [sp]
   141f4:	add	r2, r2, #1
   141f8:	mvn	r3, #-2147483648	; 0x80000000
   141fc:	bl	16990 <__assert_fail@plt+0x5a5c>
   14200:	mov	r5, r0
   14204:	ldm	r8, {r0, r1}
   14208:	str	r5, [r6]
   1420c:	stm	r5, {r0, r1}
   14210:	b	140f0 <__assert_fail@plt+0x31bc>
   14214:	bl	10f28 <abort@plt>
   14218:	strdeq	sl, [r2], -r4
   1421c:	andeq	sl, r2, ip, lsr #3
   14220:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14224:	sub	sp, sp, #124	; 0x7c
   14228:	mov	r4, r0
   1422c:	mov	r9, r1
   14230:	add	r0, sp, #72	; 0x48
   14234:	mov	r2, #48	; 0x30
   14238:	mov	r1, #0
   1423c:	bl	10e74 <memset@plt>
   14240:	cmp	r4, #10
   14244:	beq	143d0 <__assert_fail@plt+0x349c>
   14248:	add	lr, sp, #72	; 0x48
   1424c:	str	r4, [sp, #72]	; 0x48
   14250:	ldm	lr!, {r0, r1, r2, r3}
   14254:	add	ip, sp, #24
   14258:	ldr	r5, [pc, #372]	; 143d4 <__assert_fail@plt+0x34a0>
   1425c:	stmia	ip!, {r0, r1, r2, r3}
   14260:	ldm	lr!, {r0, r1, r2, r3}
   14264:	stmia	ip!, {r0, r1, r2, r3}
   14268:	ldm	lr, {r0, r1, r2, r3}
   1426c:	stm	ip, {r0, r1, r2, r3}
   14270:	bl	10e5c <__errno_location@plt>
   14274:	ldr	r2, [r5, #4]
   14278:	ldr	r4, [r5]
   1427c:	cmp	r2, #0
   14280:	mov	r7, r0
   14284:	ldr	fp, [r0]
   14288:	bgt	142e4 <__assert_fail@plt+0x33b0>
   1428c:	add	r6, r5, #8
   14290:	cmp	r4, r6
   14294:	str	r2, [sp, #72]	; 0x48
   14298:	beq	143a0 <__assert_fail@plt+0x346c>
   1429c:	mov	r3, #8
   142a0:	mov	r0, r4
   142a4:	str	r3, [sp]
   142a8:	rsb	r2, r2, #1
   142ac:	add	r1, sp, #72	; 0x48
   142b0:	mvn	r3, #-2147483648	; 0x80000000
   142b4:	bl	16990 <__assert_fail@plt+0x5a5c>
   142b8:	mov	r4, r0
   142bc:	str	r0, [r5]
   142c0:	ldr	r0, [r5, #4]
   142c4:	ldr	r2, [sp, #72]	; 0x48
   142c8:	mov	r1, #0
   142cc:	sub	r2, r2, r0
   142d0:	add	r0, r4, r0, lsl #3
   142d4:	lsl	r2, r2, #3
   142d8:	bl	10e74 <memset@plt>
   142dc:	ldr	r3, [sp, #72]	; 0x48
   142e0:	str	r3, [r5, #4]
   142e4:	ldr	r6, [sp, #28]
   142e8:	ldr	r8, [r4]
   142ec:	ldr	r5, [r4, #4]
   142f0:	ldr	r2, [sp, #64]	; 0x40
   142f4:	ldr	r3, [sp, #24]
   142f8:	ldr	ip, [sp, #68]	; 0x44
   142fc:	orr	r6, r6, #1
   14300:	add	sl, sp, #32
   14304:	str	r2, [sp, #12]
   14308:	str	r3, [sp]
   1430c:	str	r6, [sp, #4]
   14310:	mov	r1, r8
   14314:	mov	r0, r5
   14318:	str	ip, [sp, #16]
   1431c:	str	sl, [sp, #8]
   14320:	mvn	r3, #0
   14324:	mov	r2, r9
   14328:	bl	11e98 <__assert_fail@plt+0xf64>
   1432c:	cmp	r8, r0
   14330:	bhi	14390 <__assert_fail@plt+0x345c>
   14334:	ldr	r3, [pc, #156]	; 143d8 <__assert_fail@plt+0x34a4>
   14338:	add	r8, r0, #1
   1433c:	cmp	r5, r3
   14340:	str	r8, [r4]
   14344:	beq	14350 <__assert_fail@plt+0x341c>
   14348:	mov	r0, r5
   1434c:	bl	17f68 <__assert_fail@plt+0x7034>
   14350:	mov	r0, r8
   14354:	bl	16774 <__assert_fail@plt+0x5840>
   14358:	ldr	lr, [sp, #68]	; 0x44
   1435c:	ldr	r3, [sp, #24]
   14360:	ldr	ip, [sp, #64]	; 0x40
   14364:	mov	r2, r9
   14368:	mov	r1, r8
   1436c:	str	r0, [r4, #4]
   14370:	str	r3, [sp]
   14374:	str	sl, [sp, #8]
   14378:	str	r6, [sp, #4]
   1437c:	str	lr, [sp, #16]
   14380:	str	ip, [sp, #12]
   14384:	mvn	r3, #0
   14388:	mov	r5, r0
   1438c:	bl	11e98 <__assert_fail@plt+0xf64>
   14390:	mov	r0, r5
   14394:	str	fp, [r7]
   14398:	add	sp, sp, #124	; 0x7c
   1439c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143a0:	mov	r3, #8
   143a4:	add	r1, sp, #72	; 0x48
   143a8:	str	r3, [sp]
   143ac:	rsb	r2, r2, #1
   143b0:	mvn	r3, #-2147483648	; 0x80000000
   143b4:	mov	r0, #0
   143b8:	bl	16990 <__assert_fail@plt+0x5a5c>
   143bc:	mov	r4, r0
   143c0:	ldm	r6, {r0, r1}
   143c4:	str	r4, [r5]
   143c8:	stm	r4, {r0, r1}
   143cc:	b	142c0 <__assert_fail@plt+0x338c>
   143d0:	bl	10f28 <abort@plt>
   143d4:	strdeq	sl, [r2], -r4
   143d8:	andeq	sl, r2, ip, lsr #3
   143dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143e0:	sub	sp, sp, #132	; 0x84
   143e4:	mov	r4, r0
   143e8:	mov	r9, r1
   143ec:	mov	sl, r2
   143f0:	add	r0, sp, #80	; 0x50
   143f4:	mov	r2, #48	; 0x30
   143f8:	mov	r1, #0
   143fc:	bl	10e74 <memset@plt>
   14400:	cmp	r4, #10
   14404:	beq	14598 <__assert_fail@plt+0x3664>
   14408:	add	lr, sp, #80	; 0x50
   1440c:	str	r4, [sp, #80]	; 0x50
   14410:	ldm	lr!, {r0, r1, r2, r3}
   14414:	add	ip, sp, #32
   14418:	ldr	r5, [pc, #380]	; 1459c <__assert_fail@plt+0x3668>
   1441c:	stmia	ip!, {r0, r1, r2, r3}
   14420:	ldm	lr!, {r0, r1, r2, r3}
   14424:	stmia	ip!, {r0, r1, r2, r3}
   14428:	ldm	lr, {r0, r1, r2, r3}
   1442c:	stm	ip, {r0, r1, r2, r3}
   14430:	bl	10e5c <__errno_location@plt>
   14434:	ldr	r2, [r5, #4]
   14438:	ldr	r4, [r5]
   1443c:	cmp	r2, #0
   14440:	ldr	r3, [r0]
   14444:	mov	r7, r0
   14448:	str	r3, [sp, #28]
   1444c:	bgt	144a8 <__assert_fail@plt+0x3574>
   14450:	add	r6, r5, #8
   14454:	cmp	r4, r6
   14458:	str	r2, [sp, #80]	; 0x50
   1445c:	beq	14568 <__assert_fail@plt+0x3634>
   14460:	mov	r3, #8
   14464:	mov	r0, r4
   14468:	str	r3, [sp]
   1446c:	rsb	r2, r2, #1
   14470:	add	r1, sp, #80	; 0x50
   14474:	mvn	r3, #-2147483648	; 0x80000000
   14478:	bl	16990 <__assert_fail@plt+0x5a5c>
   1447c:	mov	r4, r0
   14480:	str	r0, [r5]
   14484:	ldr	r0, [r5, #4]
   14488:	ldr	r2, [sp, #80]	; 0x50
   1448c:	mov	r1, #0
   14490:	sub	r2, r2, r0
   14494:	add	r0, r4, r0, lsl #3
   14498:	lsl	r2, r2, #3
   1449c:	bl	10e74 <memset@plt>
   144a0:	ldr	r3, [sp, #80]	; 0x50
   144a4:	str	r3, [r5, #4]
   144a8:	ldr	r6, [sp, #36]	; 0x24
   144ac:	ldr	r8, [r4]
   144b0:	ldr	r5, [r4, #4]
   144b4:	ldr	r2, [sp, #72]	; 0x48
   144b8:	ldr	r3, [sp, #32]
   144bc:	ldr	ip, [sp, #76]	; 0x4c
   144c0:	orr	r6, r6, #1
   144c4:	add	fp, sp, #40	; 0x28
   144c8:	str	r2, [sp, #12]
   144cc:	str	r3, [sp]
   144d0:	str	r6, [sp, #4]
   144d4:	mov	r1, r8
   144d8:	mov	r0, r5
   144dc:	str	ip, [sp, #16]
   144e0:	str	fp, [sp, #8]
   144e4:	mov	r3, sl
   144e8:	mov	r2, r9
   144ec:	bl	11e98 <__assert_fail@plt+0xf64>
   144f0:	cmp	r8, r0
   144f4:	bhi	14554 <__assert_fail@plt+0x3620>
   144f8:	ldr	r3, [pc, #160]	; 145a0 <__assert_fail@plt+0x366c>
   144fc:	add	r8, r0, #1
   14500:	cmp	r5, r3
   14504:	str	r8, [r4]
   14508:	beq	14514 <__assert_fail@plt+0x35e0>
   1450c:	mov	r0, r5
   14510:	bl	17f68 <__assert_fail@plt+0x7034>
   14514:	mov	r0, r8
   14518:	bl	16774 <__assert_fail@plt+0x5840>
   1451c:	ldr	ip, [sp, #76]	; 0x4c
   14520:	ldr	lr, [sp, #32]
   14524:	mov	r3, sl
   14528:	mov	r2, r9
   1452c:	mov	r1, r8
   14530:	str	r0, [r4, #4]
   14534:	ldr	r4, [sp, #72]	; 0x48
   14538:	str	fp, [sp, #8]
   1453c:	str	r6, [sp, #4]
   14540:	str	ip, [sp, #16]
   14544:	str	r4, [sp, #12]
   14548:	str	lr, [sp]
   1454c:	mov	r5, r0
   14550:	bl	11e98 <__assert_fail@plt+0xf64>
   14554:	ldr	r3, [sp, #28]
   14558:	mov	r0, r5
   1455c:	str	r3, [r7]
   14560:	add	sp, sp, #132	; 0x84
   14564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14568:	mov	r3, #8
   1456c:	add	r1, sp, #80	; 0x50
   14570:	str	r3, [sp]
   14574:	rsb	r2, r2, #1
   14578:	mvn	r3, #-2147483648	; 0x80000000
   1457c:	mov	r0, #0
   14580:	bl	16990 <__assert_fail@plt+0x5a5c>
   14584:	mov	r4, r0
   14588:	ldm	r6, {r0, r1}
   1458c:	str	r4, [r5]
   14590:	stm	r4, {r0, r1}
   14594:	b	14484 <__assert_fail@plt+0x3550>
   14598:	bl	10f28 <abort@plt>
   1459c:	strdeq	sl, [r2], -r4
   145a0:	andeq	sl, r2, ip, lsr #3
   145a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a8:	mov	r4, r2
   145ac:	ldr	lr, [pc, #432]	; 14764 <__assert_fail@plt+0x3830>
   145b0:	mov	sl, r0
   145b4:	mov	fp, r1
   145b8:	ldm	lr!, {r0, r1, r2, r3}
   145bc:	sub	sp, sp, #92	; 0x5c
   145c0:	add	ip, sp, #40	; 0x28
   145c4:	lsr	r7, r4, #5
   145c8:	stmia	ip!, {r0, r1, r2, r3}
   145cc:	add	r6, sp, #48	; 0x30
   145d0:	ldm	lr!, {r0, r1, r2, r3}
   145d4:	and	r4, r4, #31
   145d8:	ldr	r5, [pc, #392]	; 14768 <__assert_fail@plt+0x3834>
   145dc:	stmia	ip!, {r0, r1, r2, r3}
   145e0:	ldm	lr, {r0, r1, r2, r3}
   145e4:	stm	ip, {r0, r1, r2, r3}
   145e8:	ldr	r2, [r6, r7, lsl #2]
   145ec:	lsr	r3, r2, r4
   145f0:	eor	r3, r3, #1
   145f4:	and	r3, r3, #1
   145f8:	eor	r4, r2, r3, lsl r4
   145fc:	str	r4, [r6, r7, lsl #2]
   14600:	bl	10e5c <__errno_location@plt>
   14604:	ldr	r2, [r5, #4]
   14608:	ldr	r4, [r5]
   1460c:	cmp	r2, #0
   14610:	ldr	r3, [r0]
   14614:	mov	r8, r0
   14618:	str	r3, [sp, #28]
   1461c:	bgt	14678 <__assert_fail@plt+0x3744>
   14620:	add	r7, r5, #8
   14624:	cmp	r4, r7
   14628:	str	r2, [sp, #36]	; 0x24
   1462c:	beq	14734 <__assert_fail@plt+0x3800>
   14630:	mov	r3, #8
   14634:	mov	r0, r4
   14638:	str	r3, [sp]
   1463c:	rsb	r2, r2, #1
   14640:	mvn	r3, #-2147483648	; 0x80000000
   14644:	add	r1, sp, #36	; 0x24
   14648:	bl	16990 <__assert_fail@plt+0x5a5c>
   1464c:	mov	r4, r0
   14650:	str	r0, [r5]
   14654:	ldr	r0, [r5, #4]
   14658:	ldr	r2, [sp, #36]	; 0x24
   1465c:	mov	r1, #0
   14660:	sub	r2, r2, r0
   14664:	add	r0, r4, r0, lsl #3
   14668:	lsl	r2, r2, #3
   1466c:	bl	10e74 <memset@plt>
   14670:	ldr	r3, [sp, #36]	; 0x24
   14674:	str	r3, [r5, #4]
   14678:	ldr	r7, [sp, #44]	; 0x2c
   1467c:	ldr	r9, [r4]
   14680:	ldr	r5, [r4, #4]
   14684:	ldr	r2, [sp, #80]	; 0x50
   14688:	ldr	r3, [sp, #40]	; 0x28
   1468c:	ldr	ip, [sp, #84]	; 0x54
   14690:	orr	r7, r7, #1
   14694:	str	r2, [sp, #12]
   14698:	str	r3, [sp]
   1469c:	str	r7, [sp, #4]
   146a0:	str	r6, [sp, #8]
   146a4:	mov	r1, r9
   146a8:	mov	r0, r5
   146ac:	str	ip, [sp, #16]
   146b0:	mov	r3, fp
   146b4:	mov	r2, sl
   146b8:	bl	11e98 <__assert_fail@plt+0xf64>
   146bc:	cmp	r9, r0
   146c0:	bhi	14720 <__assert_fail@plt+0x37ec>
   146c4:	ldr	r3, [pc, #160]	; 1476c <__assert_fail@plt+0x3838>
   146c8:	add	r9, r0, #1
   146cc:	cmp	r5, r3
   146d0:	str	r9, [r4]
   146d4:	beq	146e0 <__assert_fail@plt+0x37ac>
   146d8:	mov	r0, r5
   146dc:	bl	17f68 <__assert_fail@plt+0x7034>
   146e0:	mov	r0, r9
   146e4:	bl	16774 <__assert_fail@plt+0x5840>
   146e8:	ldr	ip, [sp, #84]	; 0x54
   146ec:	ldr	lr, [sp, #40]	; 0x28
   146f0:	mov	r3, fp
   146f4:	mov	r2, sl
   146f8:	mov	r1, r9
   146fc:	str	r0, [r4, #4]
   14700:	ldr	r4, [sp, #80]	; 0x50
   14704:	str	r6, [sp, #8]
   14708:	str	r7, [sp, #4]
   1470c:	str	ip, [sp, #16]
   14710:	str	r4, [sp, #12]
   14714:	str	lr, [sp]
   14718:	mov	r5, r0
   1471c:	bl	11e98 <__assert_fail@plt+0xf64>
   14720:	ldr	r3, [sp, #28]
   14724:	mov	r0, r5
   14728:	str	r3, [r8]
   1472c:	add	sp, sp, #92	; 0x5c
   14730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14734:	mov	r3, #8
   14738:	str	r3, [sp]
   1473c:	add	r1, sp, #36	; 0x24
   14740:	rsb	r2, r2, #1
   14744:	mvn	r3, #-2147483648	; 0x80000000
   14748:	mov	r0, #0
   1474c:	bl	16990 <__assert_fail@plt+0x5a5c>
   14750:	mov	r4, r0
   14754:	ldm	r7, {r0, r1}
   14758:	str	r4, [r5]
   1475c:	stm	r4, {r0, r1}
   14760:	b	14654 <__assert_fail@plt+0x3720>
   14764:	andeq	sl, r2, ip, ror r1
   14768:	strdeq	sl, [r2], -r4
   1476c:	andeq	sl, r2, ip, lsr #3
   14770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14774:	mov	r4, r1
   14778:	ldr	lr, [pc, #420]	; 14924 <__assert_fail@plt+0x39f0>
   1477c:	mov	r6, r0
   14780:	sub	sp, sp, #84	; 0x54
   14784:	ldm	lr!, {r0, r1, r2, r3}
   14788:	add	ip, sp, #32
   1478c:	lsr	r8, r4, #5
   14790:	add	r5, sp, #40	; 0x28
   14794:	stmia	ip!, {r0, r1, r2, r3}
   14798:	and	r4, r4, #31
   1479c:	ldm	lr!, {r0, r1, r2, r3}
   147a0:	ldr	r7, [pc, #384]	; 14928 <__assert_fail@plt+0x39f4>
   147a4:	stmia	ip!, {r0, r1, r2, r3}
   147a8:	ldm	lr, {r0, r1, r2, r3}
   147ac:	stm	ip, {r0, r1, r2, r3}
   147b0:	ldr	r2, [r5, r8, lsl #2]
   147b4:	lsr	r3, r2, r4
   147b8:	eor	r3, r3, #1
   147bc:	and	r3, r3, #1
   147c0:	eor	r4, r2, r3, lsl r4
   147c4:	str	r4, [r5, r8, lsl #2]
   147c8:	bl	10e5c <__errno_location@plt>
   147cc:	ldr	r2, [r7, #4]
   147d0:	ldr	r4, [r7]
   147d4:	cmp	r2, #0
   147d8:	mov	r9, r0
   147dc:	ldr	sl, [r0]
   147e0:	bgt	1483c <__assert_fail@plt+0x3908>
   147e4:	add	r8, r7, #8
   147e8:	cmp	r4, r8
   147ec:	str	r2, [sp, #28]
   147f0:	beq	148f4 <__assert_fail@plt+0x39c0>
   147f4:	mov	r3, #8
   147f8:	mov	r0, r4
   147fc:	str	r3, [sp]
   14800:	rsb	r2, r2, #1
   14804:	mvn	r3, #-2147483648	; 0x80000000
   14808:	add	r1, sp, #28
   1480c:	bl	16990 <__assert_fail@plt+0x5a5c>
   14810:	mov	r4, r0
   14814:	str	r0, [r7]
   14818:	ldr	r0, [r7, #4]
   1481c:	ldr	r2, [sp, #28]
   14820:	mov	r1, #0
   14824:	sub	r2, r2, r0
   14828:	add	r0, r4, r0, lsl #3
   1482c:	lsl	r2, r2, #3
   14830:	bl	10e74 <memset@plt>
   14834:	ldr	r3, [sp, #28]
   14838:	str	r3, [r7, #4]
   1483c:	ldr	r8, [sp, #36]	; 0x24
   14840:	ldr	fp, [r4]
   14844:	ldr	r7, [r4, #4]
   14848:	ldr	r2, [sp, #72]	; 0x48
   1484c:	ldr	r3, [sp, #32]
   14850:	ldr	ip, [sp, #76]	; 0x4c
   14854:	orr	r8, r8, #1
   14858:	str	r2, [sp, #12]
   1485c:	str	r3, [sp]
   14860:	str	r8, [sp, #4]
   14864:	str	r5, [sp, #8]
   14868:	mov	r1, fp
   1486c:	mov	r0, r7
   14870:	str	ip, [sp, #16]
   14874:	mvn	r3, #0
   14878:	mov	r2, r6
   1487c:	bl	11e98 <__assert_fail@plt+0xf64>
   14880:	cmp	fp, r0
   14884:	bhi	148e4 <__assert_fail@plt+0x39b0>
   14888:	ldr	r3, [pc, #156]	; 1492c <__assert_fail@plt+0x39f8>
   1488c:	add	fp, r0, #1
   14890:	cmp	r7, r3
   14894:	str	fp, [r4]
   14898:	beq	148a4 <__assert_fail@plt+0x3970>
   1489c:	mov	r0, r7
   148a0:	bl	17f68 <__assert_fail@plt+0x7034>
   148a4:	mov	r0, fp
   148a8:	bl	16774 <__assert_fail@plt+0x5840>
   148ac:	ldr	lr, [sp, #76]	; 0x4c
   148b0:	ldr	r3, [sp, #32]
   148b4:	ldr	ip, [sp, #72]	; 0x48
   148b8:	mov	r2, r6
   148bc:	mov	r1, fp
   148c0:	str	r0, [r4, #4]
   148c4:	str	r3, [sp]
   148c8:	str	r5, [sp, #8]
   148cc:	str	r8, [sp, #4]
   148d0:	str	lr, [sp, #16]
   148d4:	str	ip, [sp, #12]
   148d8:	mvn	r3, #0
   148dc:	mov	r7, r0
   148e0:	bl	11e98 <__assert_fail@plt+0xf64>
   148e4:	mov	r0, r7
   148e8:	str	sl, [r9]
   148ec:	add	sp, sp, #84	; 0x54
   148f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148f4:	mov	r3, #8
   148f8:	str	r3, [sp]
   148fc:	add	r1, sp, #28
   14900:	rsb	r2, r2, #1
   14904:	mvn	r3, #-2147483648	; 0x80000000
   14908:	mov	r0, #0
   1490c:	bl	16990 <__assert_fail@plt+0x5a5c>
   14910:	mov	r4, r0
   14914:	ldm	r8, {r0, r1}
   14918:	str	r4, [r7]
   1491c:	stm	r4, {r0, r1}
   14920:	b	14818 <__assert_fail@plt+0x38e4>
   14924:	andeq	sl, r2, ip, ror r1
   14928:	strdeq	sl, [r2], -r4
   1492c:	andeq	sl, r2, ip, lsr #3
   14930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14934:	mov	r6, r0
   14938:	ldr	lr, [pc, #404]	; 14ad4 <__assert_fail@plt+0x3ba0>
   1493c:	sub	sp, sp, #84	; 0x54
   14940:	add	ip, sp, #32
   14944:	ldm	lr!, {r0, r1, r2, r3}
   14948:	ldr	r5, [pc, #392]	; 14ad8 <__assert_fail@plt+0x3ba4>
   1494c:	stmia	ip!, {r0, r1, r2, r3}
   14950:	ldm	lr!, {r0, r1, r2, r3}
   14954:	ldr	r4, [sp, #44]	; 0x2c
   14958:	stmia	ip!, {r0, r1, r2, r3}
   1495c:	ldm	lr, {r0, r1, r2, r3}
   14960:	mvn	lr, r4
   14964:	and	lr, lr, #67108864	; 0x4000000
   14968:	eor	lr, lr, r4
   1496c:	stm	ip, {r0, r1, r2, r3}
   14970:	str	lr, [sp, #44]	; 0x2c
   14974:	bl	10e5c <__errno_location@plt>
   14978:	ldr	r2, [r5, #4]
   1497c:	ldr	r4, [r5]
   14980:	cmp	r2, #0
   14984:	mov	r8, r0
   14988:	ldr	sl, [r0]
   1498c:	bgt	149e8 <__assert_fail@plt+0x3ab4>
   14990:	add	r7, r5, #8
   14994:	cmp	r4, r7
   14998:	str	r2, [sp, #28]
   1499c:	beq	14aa4 <__assert_fail@plt+0x3b70>
   149a0:	mov	r3, #8
   149a4:	mov	r0, r4
   149a8:	str	r3, [sp]
   149ac:	rsb	r2, r2, #1
   149b0:	mvn	r3, #-2147483648	; 0x80000000
   149b4:	add	r1, sp, #28
   149b8:	bl	16990 <__assert_fail@plt+0x5a5c>
   149bc:	mov	r4, r0
   149c0:	str	r0, [r5]
   149c4:	ldr	r0, [r5, #4]
   149c8:	ldr	r2, [sp, #28]
   149cc:	mov	r1, #0
   149d0:	sub	r2, r2, r0
   149d4:	add	r0, r4, r0, lsl #3
   149d8:	lsl	r2, r2, #3
   149dc:	bl	10e74 <memset@plt>
   149e0:	ldr	r3, [sp, #28]
   149e4:	str	r3, [r5, #4]
   149e8:	ldr	r7, [sp, #36]	; 0x24
   149ec:	ldr	r9, [r4]
   149f0:	ldr	r5, [r4, #4]
   149f4:	ldr	r2, [sp, #72]	; 0x48
   149f8:	ldr	r3, [sp, #32]
   149fc:	ldr	ip, [sp, #76]	; 0x4c
   14a00:	orr	r7, r7, #1
   14a04:	add	fp, sp, #40	; 0x28
   14a08:	str	r2, [sp, #12]
   14a0c:	str	r3, [sp]
   14a10:	str	r7, [sp, #4]
   14a14:	mov	r1, r9
   14a18:	mov	r0, r5
   14a1c:	str	ip, [sp, #16]
   14a20:	str	fp, [sp, #8]
   14a24:	mvn	r3, #0
   14a28:	mov	r2, r6
   14a2c:	bl	11e98 <__assert_fail@plt+0xf64>
   14a30:	cmp	r9, r0
   14a34:	bhi	14a94 <__assert_fail@plt+0x3b60>
   14a38:	ldr	r3, [pc, #156]	; 14adc <__assert_fail@plt+0x3ba8>
   14a3c:	add	r9, r0, #1
   14a40:	cmp	r5, r3
   14a44:	str	r9, [r4]
   14a48:	beq	14a54 <__assert_fail@plt+0x3b20>
   14a4c:	mov	r0, r5
   14a50:	bl	17f68 <__assert_fail@plt+0x7034>
   14a54:	mov	r0, r9
   14a58:	bl	16774 <__assert_fail@plt+0x5840>
   14a5c:	ldr	lr, [sp, #76]	; 0x4c
   14a60:	ldr	r3, [sp, #32]
   14a64:	ldr	ip, [sp, #72]	; 0x48
   14a68:	mov	r2, r6
   14a6c:	mov	r1, r9
   14a70:	str	r0, [r4, #4]
   14a74:	str	r3, [sp]
   14a78:	str	fp, [sp, #8]
   14a7c:	str	r7, [sp, #4]
   14a80:	str	lr, [sp, #16]
   14a84:	str	ip, [sp, #12]
   14a88:	mvn	r3, #0
   14a8c:	mov	r5, r0
   14a90:	bl	11e98 <__assert_fail@plt+0xf64>
   14a94:	mov	r0, r5
   14a98:	str	sl, [r8]
   14a9c:	add	sp, sp, #84	; 0x54
   14aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aa4:	mov	r3, #8
   14aa8:	str	r3, [sp]
   14aac:	add	r1, sp, #28
   14ab0:	rsb	r2, r2, #1
   14ab4:	mvn	r3, #-2147483648	; 0x80000000
   14ab8:	mov	r0, #0
   14abc:	bl	16990 <__assert_fail@plt+0x5a5c>
   14ac0:	mov	r4, r0
   14ac4:	ldm	r7, {r0, r1}
   14ac8:	str	r4, [r5]
   14acc:	stm	r4, {r0, r1}
   14ad0:	b	149c4 <__assert_fail@plt+0x3a90>
   14ad4:	andeq	sl, r2, ip, ror r1
   14ad8:	strdeq	sl, [r2], -r4
   14adc:	andeq	sl, r2, ip, lsr #3
   14ae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ae4:	mov	r9, r0
   14ae8:	ldr	lr, [pc, #416]	; 14c90 <__assert_fail@plt+0x3d5c>
   14aec:	mov	sl, r1
   14af0:	sub	sp, sp, #92	; 0x5c
   14af4:	ldm	lr!, {r0, r1, r2, r3}
   14af8:	add	ip, sp, #40	; 0x28
   14afc:	ldr	r5, [pc, #400]	; 14c94 <__assert_fail@plt+0x3d60>
   14b00:	stmia	ip!, {r0, r1, r2, r3}
   14b04:	ldm	lr!, {r0, r1, r2, r3}
   14b08:	ldr	r4, [sp, #52]	; 0x34
   14b0c:	stmia	ip!, {r0, r1, r2, r3}
   14b10:	ldm	lr, {r0, r1, r2, r3}
   14b14:	mvn	lr, r4
   14b18:	and	lr, lr, #67108864	; 0x4000000
   14b1c:	eor	lr, lr, r4
   14b20:	stm	ip, {r0, r1, r2, r3}
   14b24:	str	lr, [sp, #52]	; 0x34
   14b28:	bl	10e5c <__errno_location@plt>
   14b2c:	ldr	r2, [r5, #4]
   14b30:	ldr	r4, [r5]
   14b34:	cmp	r2, #0
   14b38:	ldr	r3, [r0]
   14b3c:	mov	r7, r0
   14b40:	str	r3, [sp, #28]
   14b44:	bgt	14ba0 <__assert_fail@plt+0x3c6c>
   14b48:	add	r6, r5, #8
   14b4c:	cmp	r4, r6
   14b50:	str	r2, [sp, #36]	; 0x24
   14b54:	beq	14c60 <__assert_fail@plt+0x3d2c>
   14b58:	mov	r3, #8
   14b5c:	mov	r0, r4
   14b60:	str	r3, [sp]
   14b64:	rsb	r2, r2, #1
   14b68:	mvn	r3, #-2147483648	; 0x80000000
   14b6c:	add	r1, sp, #36	; 0x24
   14b70:	bl	16990 <__assert_fail@plt+0x5a5c>
   14b74:	mov	r4, r0
   14b78:	str	r0, [r5]
   14b7c:	ldr	r0, [r5, #4]
   14b80:	ldr	r2, [sp, #36]	; 0x24
   14b84:	mov	r1, #0
   14b88:	sub	r2, r2, r0
   14b8c:	add	r0, r4, r0, lsl #3
   14b90:	lsl	r2, r2, #3
   14b94:	bl	10e74 <memset@plt>
   14b98:	ldr	r3, [sp, #36]	; 0x24
   14b9c:	str	r3, [r5, #4]
   14ba0:	ldr	r6, [sp, #44]	; 0x2c
   14ba4:	ldr	r8, [r4]
   14ba8:	ldr	r5, [r4, #4]
   14bac:	ldr	r2, [sp, #80]	; 0x50
   14bb0:	ldr	r3, [sp, #40]	; 0x28
   14bb4:	ldr	ip, [sp, #84]	; 0x54
   14bb8:	orr	r6, r6, #1
   14bbc:	add	fp, sp, #48	; 0x30
   14bc0:	str	r2, [sp, #12]
   14bc4:	str	r3, [sp]
   14bc8:	str	r6, [sp, #4]
   14bcc:	mov	r1, r8
   14bd0:	mov	r0, r5
   14bd4:	str	ip, [sp, #16]
   14bd8:	str	fp, [sp, #8]
   14bdc:	mov	r3, sl
   14be0:	mov	r2, r9
   14be4:	bl	11e98 <__assert_fail@plt+0xf64>
   14be8:	cmp	r8, r0
   14bec:	bhi	14c4c <__assert_fail@plt+0x3d18>
   14bf0:	ldr	r3, [pc, #160]	; 14c98 <__assert_fail@plt+0x3d64>
   14bf4:	add	r8, r0, #1
   14bf8:	cmp	r5, r3
   14bfc:	str	r8, [r4]
   14c00:	beq	14c0c <__assert_fail@plt+0x3cd8>
   14c04:	mov	r0, r5
   14c08:	bl	17f68 <__assert_fail@plt+0x7034>
   14c0c:	mov	r0, r8
   14c10:	bl	16774 <__assert_fail@plt+0x5840>
   14c14:	ldr	ip, [sp, #84]	; 0x54
   14c18:	ldr	lr, [sp, #40]	; 0x28
   14c1c:	mov	r3, sl
   14c20:	mov	r2, r9
   14c24:	mov	r1, r8
   14c28:	str	r0, [r4, #4]
   14c2c:	ldr	r4, [sp, #80]	; 0x50
   14c30:	str	fp, [sp, #8]
   14c34:	str	r6, [sp, #4]
   14c38:	str	ip, [sp, #16]
   14c3c:	str	r4, [sp, #12]
   14c40:	str	lr, [sp]
   14c44:	mov	r5, r0
   14c48:	bl	11e98 <__assert_fail@plt+0xf64>
   14c4c:	ldr	r3, [sp, #28]
   14c50:	mov	r0, r5
   14c54:	str	r3, [r7]
   14c58:	add	sp, sp, #92	; 0x5c
   14c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c60:	mov	r3, #8
   14c64:	str	r3, [sp]
   14c68:	add	r1, sp, #36	; 0x24
   14c6c:	rsb	r2, r2, #1
   14c70:	mvn	r3, #-2147483648	; 0x80000000
   14c74:	mov	r0, #0
   14c78:	bl	16990 <__assert_fail@plt+0x5a5c>
   14c7c:	mov	r4, r0
   14c80:	ldm	r6, {r0, r1}
   14c84:	str	r4, [r5]
   14c88:	stm	r4, {r0, r1}
   14c8c:	b	14b7c <__assert_fail@plt+0x3c48>
   14c90:	andeq	sl, r2, ip, ror r1
   14c94:	strdeq	sl, [r2], -r4
   14c98:	andeq	sl, r2, ip, lsr #3
   14c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ca0:	sub	sp, sp, #180	; 0xb4
   14ca4:	mov	r6, r1
   14ca8:	mov	r4, r0
   14cac:	mov	r9, r2
   14cb0:	add	r0, sp, #80	; 0x50
   14cb4:	mov	r2, #48	; 0x30
   14cb8:	mov	r1, #0
   14cbc:	bl	10e74 <memset@plt>
   14cc0:	cmp	r6, #10
   14cc4:	beq	14ea4 <__assert_fail@plt+0x3f70>
   14cc8:	add	r5, sp, #80	; 0x50
   14ccc:	str	r6, [sp, #80]	; 0x50
   14cd0:	ldm	r5!, {r0, r1, r2, r3}
   14cd4:	add	ip, sp, #128	; 0x80
   14cd8:	mov	r7, ip
   14cdc:	add	lr, sp, #32
   14ce0:	stmia	ip!, {r0, r1, r2, r3}
   14ce4:	mov	r8, #67108864	; 0x4000000
   14ce8:	ldm	r5!, {r0, r1, r2, r3}
   14cec:	ldr	r6, [pc, #436]	; 14ea8 <__assert_fail@plt+0x3f74>
   14cf0:	stmia	ip!, {r0, r1, r2, r3}
   14cf4:	ldm	r5, {r0, r1, r2, r3}
   14cf8:	stm	ip, {r0, r1, r2, r3}
   14cfc:	ldm	r7!, {r0, r1, r2, r3}
   14d00:	stmia	lr!, {r0, r1, r2, r3}
   14d04:	ldm	r7!, {r0, r1, r2, r3}
   14d08:	str	r8, [sp, #44]	; 0x2c
   14d0c:	stmia	lr!, {r0, r1, r2, r3}
   14d10:	ldm	ip, {r0, r1, r2, r3}
   14d14:	stm	lr, {r0, r1, r2, r3}
   14d18:	bl	10e5c <__errno_location@plt>
   14d1c:	cmn	r4, #-2147483647	; 0x80000001
   14d20:	ldr	r5, [r6]
   14d24:	mov	r7, r0
   14d28:	movne	r0, #0
   14d2c:	moveq	r0, #1
   14d30:	ldr	r3, [r7]
   14d34:	orrs	r0, r0, r4, lsr #31
   14d38:	str	r3, [sp, #24]
   14d3c:	bne	14ea4 <__assert_fail@plt+0x3f70>
   14d40:	ldr	r2, [r6, #4]
   14d44:	cmp	r4, r2
   14d48:	blt	14da8 <__assert_fail@plt+0x3e74>
   14d4c:	add	r8, r6, #8
   14d50:	cmp	r5, r8
   14d54:	str	r2, [sp, #80]	; 0x50
   14d58:	beq	14e74 <__assert_fail@plt+0x3f40>
   14d5c:	mov	r3, #8
   14d60:	sub	r2, r4, r2
   14d64:	mov	r0, r5
   14d68:	str	r3, [sp]
   14d6c:	add	r2, r2, #1
   14d70:	add	r1, sp, #80	; 0x50
   14d74:	mvn	r3, #-2147483648	; 0x80000000
   14d78:	bl	16990 <__assert_fail@plt+0x5a5c>
   14d7c:	mov	r5, r0
   14d80:	str	r0, [r6]
   14d84:	ldr	r0, [r6, #4]
   14d88:	ldr	r2, [sp, #80]	; 0x50
   14d8c:	mov	r1, #0
   14d90:	sub	r2, r2, r0
   14d94:	add	r0, r5, r0, lsl #3
   14d98:	lsl	r2, r2, #3
   14d9c:	bl	10e74 <memset@plt>
   14da0:	ldr	r3, [sp, #80]	; 0x50
   14da4:	str	r3, [r6, #4]
   14da8:	add	fp, r5, r4, lsl #3
   14dac:	ldr	r1, [sp, #36]	; 0x24
   14db0:	ldr	r8, [r5, r4, lsl #3]
   14db4:	ldr	r6, [fp, #4]
   14db8:	ldr	r2, [sp, #72]	; 0x48
   14dbc:	ldr	r3, [sp, #32]
   14dc0:	ldr	ip, [sp, #76]	; 0x4c
   14dc4:	orr	r1, r1, #1
   14dc8:	add	sl, sp, #40	; 0x28
   14dcc:	str	r1, [sp, #28]
   14dd0:	str	r1, [sp, #4]
   14dd4:	str	r2, [sp, #12]
   14dd8:	str	r3, [sp]
   14ddc:	mov	r0, r6
   14de0:	mov	r1, r8
   14de4:	str	ip, [sp, #16]
   14de8:	str	sl, [sp, #8]
   14dec:	mvn	r3, #0
   14df0:	mov	r2, r9
   14df4:	bl	11e98 <__assert_fail@plt+0xf64>
   14df8:	cmp	r8, r0
   14dfc:	bhi	14e60 <__assert_fail@plt+0x3f2c>
   14e00:	ldr	r3, [pc, #164]	; 14eac <__assert_fail@plt+0x3f78>
   14e04:	add	r8, r0, #1
   14e08:	cmp	r6, r3
   14e0c:	str	r8, [r5, r4, lsl #3]
   14e10:	beq	14e1c <__assert_fail@plt+0x3ee8>
   14e14:	mov	r0, r6
   14e18:	bl	17f68 <__assert_fail@plt+0x7034>
   14e1c:	mov	r0, r8
   14e20:	bl	16774 <__assert_fail@plt+0x5840>
   14e24:	ldr	lr, [sp, #76]	; 0x4c
   14e28:	ldr	r3, [sp, #32]
   14e2c:	ldr	ip, [sp, #72]	; 0x48
   14e30:	ldr	r4, [sp, #28]
   14e34:	mov	r2, r9
   14e38:	mov	r1, r8
   14e3c:	str	r0, [fp, #4]
   14e40:	str	r3, [sp]
   14e44:	str	sl, [sp, #8]
   14e48:	str	r4, [sp, #4]
   14e4c:	str	lr, [sp, #16]
   14e50:	str	ip, [sp, #12]
   14e54:	mvn	r3, #0
   14e58:	mov	r6, r0
   14e5c:	bl	11e98 <__assert_fail@plt+0xf64>
   14e60:	ldr	r3, [sp, #24]
   14e64:	mov	r0, r6
   14e68:	str	r3, [r7]
   14e6c:	add	sp, sp, #180	; 0xb4
   14e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e74:	mov	r3, #8
   14e78:	sub	r2, r4, r2
   14e7c:	add	r1, sp, #80	; 0x50
   14e80:	str	r3, [sp]
   14e84:	add	r2, r2, #1
   14e88:	mvn	r3, #-2147483648	; 0x80000000
   14e8c:	bl	16990 <__assert_fail@plt+0x5a5c>
   14e90:	mov	r5, r0
   14e94:	ldm	r8, {r0, r1}
   14e98:	str	r5, [r6]
   14e9c:	stm	r5, {r0, r1}
   14ea0:	b	14d84 <__assert_fail@plt+0x3e50>
   14ea4:	bl	10f28 <abort@plt>
   14ea8:	strdeq	sl, [r2], -r4
   14eac:	andeq	sl, r2, ip, lsr #3
   14eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eb4:	mov	r7, r1
   14eb8:	ldr	lr, [pc, #492]	; 150ac <__assert_fail@plt+0x4178>
   14ebc:	mov	r8, r2
   14ec0:	mov	r4, r0
   14ec4:	mov	fp, r3
   14ec8:	ldm	lr!, {r0, r1, r2, r3}
   14ecc:	sub	sp, sp, #100	; 0x64
   14ed0:	add	ip, sp, #48	; 0x30
   14ed4:	mov	sl, #10
   14ed8:	stmia	ip!, {r0, r1, r2, r3}
   14edc:	cmp	r8, #0
   14ee0:	cmpne	r7, #0
   14ee4:	ldm	lr!, {r0, r1, r2, r3}
   14ee8:	str	sl, [sp, #48]	; 0x30
   14eec:	stmia	ip!, {r0, r1, r2, r3}
   14ef0:	ldm	lr, {r0, r1, r2, r3}
   14ef4:	stm	ip, {r0, r1, r2, r3}
   14ef8:	beq	150a8 <__assert_fail@plt+0x4174>
   14efc:	str	r7, [sp, #88]	; 0x58
   14f00:	str	r8, [sp, #92]	; 0x5c
   14f04:	bl	10e5c <__errno_location@plt>
   14f08:	ldr	r6, [pc, #416]	; 150b0 <__assert_fail@plt+0x417c>
   14f0c:	cmn	r4, #-2147483647	; 0x80000001
   14f10:	ldr	r5, [r6]
   14f14:	mov	r9, r0
   14f18:	movne	r0, #0
   14f1c:	moveq	r0, #1
   14f20:	ldr	r3, [r9]
   14f24:	orrs	r0, r0, r4, lsr #31
   14f28:	str	r3, [sp, #28]
   14f2c:	bne	150a8 <__assert_fail@plt+0x4174>
   14f30:	ldr	r2, [r6, #4]
   14f34:	cmp	r4, r2
   14f38:	movlt	r3, sl
   14f3c:	blt	14fa8 <__assert_fail@plt+0x4074>
   14f40:	add	r7, r6, #8
   14f44:	cmp	r5, r7
   14f48:	str	r2, [sp, #44]	; 0x2c
   14f4c:	beq	15078 <__assert_fail@plt+0x4144>
   14f50:	mov	r3, #8
   14f54:	sub	r2, r4, r2
   14f58:	mov	r0, r5
   14f5c:	str	r3, [sp]
   14f60:	add	r2, r2, #1
   14f64:	mvn	r3, #-2147483648	; 0x80000000
   14f68:	add	r1, sp, #44	; 0x2c
   14f6c:	bl	16990 <__assert_fail@plt+0x5a5c>
   14f70:	mov	r5, r0
   14f74:	str	r0, [r6]
   14f78:	ldr	r0, [r6, #4]
   14f7c:	ldr	r2, [sp, #44]	; 0x2c
   14f80:	mov	r1, #0
   14f84:	sub	r2, r2, r0
   14f88:	add	r0, r5, r0, lsl #3
   14f8c:	lsl	r2, r2, #3
   14f90:	bl	10e74 <memset@plt>
   14f94:	ldr	r3, [sp, #48]	; 0x30
   14f98:	ldr	r7, [sp, #88]	; 0x58
   14f9c:	ldr	r8, [sp, #92]	; 0x5c
   14fa0:	ldr	r2, [sp, #44]	; 0x2c
   14fa4:	str	r2, [r6, #4]
   14fa8:	add	r2, r5, r4, lsl #3
   14fac:	mov	r1, r2
   14fb0:	str	r2, [sp, #32]
   14fb4:	ldr	r2, [sp, #52]	; 0x34
   14fb8:	ldr	r6, [r1, #4]
   14fbc:	ldr	sl, [r5, r4, lsl #3]
   14fc0:	orr	r2, r2, #1
   14fc4:	str	r3, [sp]
   14fc8:	add	r3, sp, #56	; 0x38
   14fcc:	str	r2, [sp, #36]	; 0x24
   14fd0:	str	r2, [sp, #4]
   14fd4:	str	r3, [sp, #8]
   14fd8:	mov	r0, r6
   14fdc:	str	r8, [sp, #16]
   14fe0:	str	r7, [sp, #12]
   14fe4:	mov	r1, sl
   14fe8:	mvn	r3, #0
   14fec:	mov	r2, fp
   14ff0:	bl	11e98 <__assert_fail@plt+0xf64>
   14ff4:	cmp	sl, r0
   14ff8:	bhi	15064 <__assert_fail@plt+0x4130>
   14ffc:	ldr	r3, [pc, #176]	; 150b4 <__assert_fail@plt+0x4180>
   15000:	add	r7, r0, #1
   15004:	cmp	r6, r3
   15008:	str	r7, [r5, r4, lsl #3]
   1500c:	beq	15018 <__assert_fail@plt+0x40e4>
   15010:	mov	r0, r6
   15014:	bl	17f68 <__assert_fail@plt+0x7034>
   15018:	mov	r0, r7
   1501c:	bl	16774 <__assert_fail@plt+0x5840>
   15020:	ldr	r3, [sp, #32]
   15024:	ldr	lr, [sp, #92]	; 0x5c
   15028:	ldr	ip, [sp, #88]	; 0x58
   1502c:	ldr	r4, [sp, #36]	; 0x24
   15030:	mov	r2, fp
   15034:	mov	r1, r7
   15038:	str	r0, [r3, #4]
   1503c:	add	r3, sp, #56	; 0x38
   15040:	str	r3, [sp, #8]
   15044:	ldr	r3, [sp, #48]	; 0x30
   15048:	str	r4, [sp, #4]
   1504c:	str	r3, [sp]
   15050:	str	lr, [sp, #16]
   15054:	str	ip, [sp, #12]
   15058:	mvn	r3, #0
   1505c:	mov	r6, r0
   15060:	bl	11e98 <__assert_fail@plt+0xf64>
   15064:	ldr	r3, [sp, #28]
   15068:	mov	r0, r6
   1506c:	str	r3, [r9]
   15070:	add	sp, sp, #100	; 0x64
   15074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15078:	mov	r3, #8
   1507c:	sub	r2, r4, r2
   15080:	str	r3, [sp]
   15084:	add	r1, sp, #44	; 0x2c
   15088:	add	r2, r2, #1
   1508c:	mvn	r3, #-2147483648	; 0x80000000
   15090:	bl	16990 <__assert_fail@plt+0x5a5c>
   15094:	mov	r5, r0
   15098:	ldm	r7, {r0, r1}
   1509c:	str	r5, [r6]
   150a0:	stm	r5, {r0, r1}
   150a4:	b	14f78 <__assert_fail@plt+0x4044>
   150a8:	bl	10f28 <abort@plt>
   150ac:	andeq	sl, r2, ip, ror r1
   150b0:	strdeq	sl, [r2], -r4
   150b4:	andeq	sl, r2, ip, lsr #3
   150b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150bc:	mov	r7, r1
   150c0:	ldr	lr, [pc, #492]	; 152b4 <__assert_fail@plt+0x4380>
   150c4:	mov	r8, r2
   150c8:	mov	r4, r0
   150cc:	mov	fp, r3
   150d0:	ldm	lr!, {r0, r1, r2, r3}
   150d4:	sub	sp, sp, #100	; 0x64
   150d8:	add	ip, sp, #48	; 0x30
   150dc:	mov	sl, #10
   150e0:	stmia	ip!, {r0, r1, r2, r3}
   150e4:	cmp	r8, #0
   150e8:	cmpne	r7, #0
   150ec:	ldm	lr!, {r0, r1, r2, r3}
   150f0:	str	sl, [sp, #48]	; 0x30
   150f4:	stmia	ip!, {r0, r1, r2, r3}
   150f8:	ldm	lr, {r0, r1, r2, r3}
   150fc:	stm	ip, {r0, r1, r2, r3}
   15100:	beq	152b0 <__assert_fail@plt+0x437c>
   15104:	str	r7, [sp, #88]	; 0x58
   15108:	str	r8, [sp, #92]	; 0x5c
   1510c:	bl	10e5c <__errno_location@plt>
   15110:	ldr	r6, [pc, #416]	; 152b8 <__assert_fail@plt+0x4384>
   15114:	cmn	r4, #-2147483647	; 0x80000001
   15118:	ldr	r5, [r6]
   1511c:	mov	r9, r0
   15120:	movne	r0, #0
   15124:	moveq	r0, #1
   15128:	ldr	r3, [r9]
   1512c:	orrs	r0, r0, r4, lsr #31
   15130:	str	r3, [sp, #28]
   15134:	bne	152b0 <__assert_fail@plt+0x437c>
   15138:	ldr	r2, [r6, #4]
   1513c:	cmp	r4, r2
   15140:	movlt	r3, sl
   15144:	blt	151b0 <__assert_fail@plt+0x427c>
   15148:	add	r7, r6, #8
   1514c:	cmp	r5, r7
   15150:	str	r2, [sp, #44]	; 0x2c
   15154:	beq	15280 <__assert_fail@plt+0x434c>
   15158:	mov	r3, #8
   1515c:	sub	r2, r4, r2
   15160:	mov	r0, r5
   15164:	str	r3, [sp]
   15168:	add	r2, r2, #1
   1516c:	mvn	r3, #-2147483648	; 0x80000000
   15170:	add	r1, sp, #44	; 0x2c
   15174:	bl	16990 <__assert_fail@plt+0x5a5c>
   15178:	mov	r5, r0
   1517c:	str	r0, [r6]
   15180:	ldr	r0, [r6, #4]
   15184:	ldr	r2, [sp, #44]	; 0x2c
   15188:	mov	r1, #0
   1518c:	sub	r2, r2, r0
   15190:	add	r0, r5, r0, lsl #3
   15194:	lsl	r2, r2, #3
   15198:	bl	10e74 <memset@plt>
   1519c:	ldr	r3, [sp, #48]	; 0x30
   151a0:	ldr	r7, [sp, #88]	; 0x58
   151a4:	ldr	r8, [sp, #92]	; 0x5c
   151a8:	ldr	r2, [sp, #44]	; 0x2c
   151ac:	str	r2, [r6, #4]
   151b0:	add	r2, r5, r4, lsl #3
   151b4:	mov	r1, r2
   151b8:	str	r2, [sp, #32]
   151bc:	ldr	r2, [sp, #52]	; 0x34
   151c0:	ldr	r6, [r1, #4]
   151c4:	ldr	sl, [r5, r4, lsl #3]
   151c8:	orr	r2, r2, #1
   151cc:	str	r3, [sp]
   151d0:	add	r3, sp, #56	; 0x38
   151d4:	str	r2, [sp, #36]	; 0x24
   151d8:	str	r2, [sp, #4]
   151dc:	str	r3, [sp, #8]
   151e0:	mov	r0, r6
   151e4:	str	r8, [sp, #16]
   151e8:	str	r7, [sp, #12]
   151ec:	mov	r1, sl
   151f0:	ldr	r3, [sp, #136]	; 0x88
   151f4:	mov	r2, fp
   151f8:	bl	11e98 <__assert_fail@plt+0xf64>
   151fc:	cmp	sl, r0
   15200:	bhi	1526c <__assert_fail@plt+0x4338>
   15204:	ldr	r3, [pc, #176]	; 152bc <__assert_fail@plt+0x4388>
   15208:	add	r7, r0, #1
   1520c:	cmp	r6, r3
   15210:	str	r7, [r5, r4, lsl #3]
   15214:	beq	15220 <__assert_fail@plt+0x42ec>
   15218:	mov	r0, r6
   1521c:	bl	17f68 <__assert_fail@plt+0x7034>
   15220:	mov	r0, r7
   15224:	bl	16774 <__assert_fail@plt+0x5840>
   15228:	ldr	r3, [sp, #32]
   1522c:	ldr	lr, [sp, #92]	; 0x5c
   15230:	ldr	ip, [sp, #88]	; 0x58
   15234:	ldr	r4, [sp, #36]	; 0x24
   15238:	mov	r2, fp
   1523c:	mov	r1, r7
   15240:	str	r0, [r3, #4]
   15244:	add	r3, sp, #56	; 0x38
   15248:	str	r3, [sp, #8]
   1524c:	ldr	r3, [sp, #48]	; 0x30
   15250:	str	r4, [sp, #4]
   15254:	str	r3, [sp]
   15258:	str	lr, [sp, #16]
   1525c:	str	ip, [sp, #12]
   15260:	ldr	r3, [sp, #136]	; 0x88
   15264:	mov	r6, r0
   15268:	bl	11e98 <__assert_fail@plt+0xf64>
   1526c:	ldr	r3, [sp, #28]
   15270:	mov	r0, r6
   15274:	str	r3, [r9]
   15278:	add	sp, sp, #100	; 0x64
   1527c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15280:	mov	r3, #8
   15284:	sub	r2, r4, r2
   15288:	str	r3, [sp]
   1528c:	add	r1, sp, #44	; 0x2c
   15290:	add	r2, r2, #1
   15294:	mvn	r3, #-2147483648	; 0x80000000
   15298:	bl	16990 <__assert_fail@plt+0x5a5c>
   1529c:	mov	r5, r0
   152a0:	ldm	r7, {r0, r1}
   152a4:	str	r5, [r6]
   152a8:	stm	r5, {r0, r1}
   152ac:	b	15180 <__assert_fail@plt+0x424c>
   152b0:	bl	10f28 <abort@plt>
   152b4:	andeq	sl, r2, ip, ror r1
   152b8:	strdeq	sl, [r2], -r4
   152bc:	andeq	sl, r2, ip, lsr #3
   152c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152c4:	mov	r5, r0
   152c8:	ldr	lr, [pc, #452]	; 15494 <__assert_fail@plt+0x4560>
   152cc:	mov	r6, r1
   152d0:	mov	sl, r2
   152d4:	ldm	lr!, {r0, r1, r2, r3}
   152d8:	sub	sp, sp, #92	; 0x5c
   152dc:	add	ip, sp, #40	; 0x28
   152e0:	cmp	r6, #0
   152e4:	cmpne	r5, #0
   152e8:	stmia	ip!, {r0, r1, r2, r3}
   152ec:	mov	r9, #10
   152f0:	ldm	lr!, {r0, r1, r2, r3}
   152f4:	moveq	fp, #1
   152f8:	movne	fp, #0
   152fc:	str	r9, [sp, #40]	; 0x28
   15300:	stmia	ip!, {r0, r1, r2, r3}
   15304:	ldm	lr, {r0, r1, r2, r3}
   15308:	stm	ip, {r0, r1, r2, r3}
   1530c:	beq	15490 <__assert_fail@plt+0x455c>
   15310:	str	r5, [sp, #80]	; 0x50
   15314:	str	r6, [sp, #84]	; 0x54
   15318:	bl	10e5c <__errno_location@plt>
   1531c:	ldr	r7, [pc, #372]	; 15498 <__assert_fail@plt+0x4564>
   15320:	ldr	r2, [r7, #4]
   15324:	ldr	r4, [r7]
   15328:	cmp	r2, #0
   1532c:	ldr	r3, [r0]
   15330:	mov	r8, r0
   15334:	str	r3, [sp, #24]
   15338:	movgt	r3, r9
   1533c:	bgt	153a4 <__assert_fail@plt+0x4470>
   15340:	add	r5, r7, #8
   15344:	cmp	r4, r5
   15348:	str	r2, [sp, #36]	; 0x24
   1534c:	beq	15460 <__assert_fail@plt+0x452c>
   15350:	mov	r3, #8
   15354:	mov	r0, r4
   15358:	str	r3, [sp]
   1535c:	rsb	r2, r2, #1
   15360:	mvn	r3, #-2147483648	; 0x80000000
   15364:	add	r1, sp, #36	; 0x24
   15368:	bl	16990 <__assert_fail@plt+0x5a5c>
   1536c:	mov	r4, r0
   15370:	str	r0, [r7]
   15374:	ldr	r0, [r7, #4]
   15378:	ldr	r2, [sp, #36]	; 0x24
   1537c:	mov	r1, #0
   15380:	sub	r2, r2, r0
   15384:	add	r0, r4, r0, lsl #3
   15388:	lsl	r2, r2, #3
   1538c:	bl	10e74 <memset@plt>
   15390:	ldr	r3, [sp, #40]	; 0x28
   15394:	ldr	r5, [sp, #80]	; 0x50
   15398:	ldr	r6, [sp, #84]	; 0x54
   1539c:	ldr	r2, [sp, #36]	; 0x24
   153a0:	str	r2, [r7, #4]
   153a4:	ldr	r2, [sp, #44]	; 0x2c
   153a8:	ldr	r9, [r4]
   153ac:	ldr	r7, [r4, #4]
   153b0:	orr	r2, r2, #1
   153b4:	add	fp, sp, #48	; 0x30
   153b8:	str	r2, [sp, #28]
   153bc:	str	r2, [sp, #4]
   153c0:	str	r3, [sp]
   153c4:	str	r6, [sp, #16]
   153c8:	str	r5, [sp, #12]
   153cc:	mov	r1, r9
   153d0:	mov	r0, r7
   153d4:	str	fp, [sp, #8]
   153d8:	mvn	r3, #0
   153dc:	mov	r2, sl
   153e0:	bl	11e98 <__assert_fail@plt+0xf64>
   153e4:	cmp	r9, r0
   153e8:	bhi	1544c <__assert_fail@plt+0x4518>
   153ec:	ldr	r3, [pc, #168]	; 1549c <__assert_fail@plt+0x4568>
   153f0:	add	r5, r0, #1
   153f4:	cmp	r7, r3
   153f8:	str	r5, [r4]
   153fc:	beq	15408 <__assert_fail@plt+0x44d4>
   15400:	mov	r0, r7
   15404:	bl	17f68 <__assert_fail@plt+0x7034>
   15408:	mov	r0, r5
   1540c:	bl	16774 <__assert_fail@plt+0x5840>
   15410:	ldr	lr, [sp, #84]	; 0x54
   15414:	ldr	r3, [sp, #40]	; 0x28
   15418:	ldr	ip, [sp, #80]	; 0x50
   1541c:	mov	r2, sl
   15420:	mov	r1, r5
   15424:	str	r0, [r4, #4]
   15428:	ldr	r4, [sp, #28]
   1542c:	str	r3, [sp]
   15430:	str	fp, [sp, #8]
   15434:	str	r4, [sp, #4]
   15438:	str	lr, [sp, #16]
   1543c:	str	ip, [sp, #12]
   15440:	mvn	r3, #0
   15444:	mov	r7, r0
   15448:	bl	11e98 <__assert_fail@plt+0xf64>
   1544c:	ldr	r3, [sp, #24]
   15450:	mov	r0, r7
   15454:	str	r3, [r8]
   15458:	add	sp, sp, #92	; 0x5c
   1545c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15460:	mov	r3, #8
   15464:	str	r3, [sp]
   15468:	add	r1, sp, #36	; 0x24
   1546c:	rsb	r2, r2, #1
   15470:	mov	r0, fp
   15474:	mvn	r3, #-2147483648	; 0x80000000
   15478:	bl	16990 <__assert_fail@plt+0x5a5c>
   1547c:	mov	r4, r0
   15480:	ldm	r5, {r0, r1}
   15484:	str	r4, [r7]
   15488:	stm	r4, {r0, r1}
   1548c:	b	15374 <__assert_fail@plt+0x4440>
   15490:	bl	10f28 <abort@plt>
   15494:	andeq	sl, r2, ip, ror r1
   15498:	strdeq	sl, [r2], -r4
   1549c:	andeq	sl, r2, ip, lsr #3
   154a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154a4:	mov	r5, r0
   154a8:	ldr	lr, [pc, #464]	; 15680 <__assert_fail@plt+0x474c>
   154ac:	mov	r6, r1
   154b0:	mov	sl, r2
   154b4:	mov	fp, r3
   154b8:	ldm	lr!, {r0, r1, r2, r3}
   154bc:	sub	sp, sp, #92	; 0x5c
   154c0:	add	ip, sp, #40	; 0x28
   154c4:	cmp	r6, #0
   154c8:	cmpne	r5, #0
   154cc:	stmia	ip!, {r0, r1, r2, r3}
   154d0:	moveq	r4, #1
   154d4:	ldm	lr!, {r0, r1, r2, r3}
   154d8:	movne	r4, #0
   154dc:	mov	r9, #10
   154e0:	str	r4, [sp, #28]
   154e4:	stmia	ip!, {r0, r1, r2, r3}
   154e8:	ldm	lr, {r0, r1, r2, r3}
   154ec:	str	r9, [sp, #40]	; 0x28
   154f0:	stm	ip, {r0, r1, r2, r3}
   154f4:	beq	1567c <__assert_fail@plt+0x4748>
   154f8:	str	r5, [sp, #80]	; 0x50
   154fc:	str	r6, [sp, #84]	; 0x54
   15500:	bl	10e5c <__errno_location@plt>
   15504:	ldr	r7, [pc, #376]	; 15684 <__assert_fail@plt+0x4750>
   15508:	ldr	r2, [r7, #4]
   1550c:	ldr	r4, [r7]
   15510:	cmp	r2, #0
   15514:	ldr	r3, [r0]
   15518:	mov	r8, r0
   1551c:	str	r3, [sp, #24]
   15520:	movgt	r3, r9
   15524:	bgt	1558c <__assert_fail@plt+0x4658>
   15528:	add	r5, r7, #8
   1552c:	cmp	r4, r5
   15530:	str	r2, [sp, #36]	; 0x24
   15534:	beq	1564c <__assert_fail@plt+0x4718>
   15538:	mov	r3, #8
   1553c:	mov	r0, r4
   15540:	str	r3, [sp]
   15544:	rsb	r2, r2, #1
   15548:	mvn	r3, #-2147483648	; 0x80000000
   1554c:	add	r1, sp, #36	; 0x24
   15550:	bl	16990 <__assert_fail@plt+0x5a5c>
   15554:	mov	r4, r0
   15558:	str	r0, [r7]
   1555c:	ldr	r0, [r7, #4]
   15560:	ldr	r2, [sp, #36]	; 0x24
   15564:	mov	r1, #0
   15568:	sub	r2, r2, r0
   1556c:	add	r0, r4, r0, lsl #3
   15570:	lsl	r2, r2, #3
   15574:	bl	10e74 <memset@plt>
   15578:	ldr	r3, [sp, #40]	; 0x28
   1557c:	ldr	r5, [sp, #80]	; 0x50
   15580:	ldr	r6, [sp, #84]	; 0x54
   15584:	ldr	r2, [sp, #36]	; 0x24
   15588:	str	r2, [r7, #4]
   1558c:	ldr	r2, [sp, #44]	; 0x2c
   15590:	ldr	r9, [r4]
   15594:	ldr	r7, [r4, #4]
   15598:	orr	r2, r2, #1
   1559c:	str	r3, [sp]
   155a0:	add	r3, sp, #48	; 0x30
   155a4:	str	r2, [sp, #28]
   155a8:	str	r2, [sp, #4]
   155ac:	str	r3, [sp, #8]
   155b0:	str	r6, [sp, #16]
   155b4:	str	r5, [sp, #12]
   155b8:	mov	r1, r9
   155bc:	mov	r0, r7
   155c0:	mov	r3, fp
   155c4:	mov	r2, sl
   155c8:	bl	11e98 <__assert_fail@plt+0xf64>
   155cc:	cmp	r9, r0
   155d0:	bhi	15638 <__assert_fail@plt+0x4704>
   155d4:	ldr	r3, [pc, #172]	; 15688 <__assert_fail@plt+0x4754>
   155d8:	add	r5, r0, #1
   155dc:	cmp	r7, r3
   155e0:	str	r5, [r4]
   155e4:	beq	155f0 <__assert_fail@plt+0x46bc>
   155e8:	mov	r0, r7
   155ec:	bl	17f68 <__assert_fail@plt+0x7034>
   155f0:	mov	r0, r5
   155f4:	bl	16774 <__assert_fail@plt+0x5840>
   155f8:	add	lr, sp, #48	; 0x30
   155fc:	ldr	ip, [sp, #84]	; 0x54
   15600:	mov	r1, r5
   15604:	ldr	r5, [sp, #28]
   15608:	mov	r3, fp
   1560c:	mov	r2, sl
   15610:	str	r0, [r4, #4]
   15614:	ldr	r4, [sp, #80]	; 0x50
   15618:	str	lr, [sp, #8]
   1561c:	ldr	lr, [sp, #40]	; 0x28
   15620:	str	r5, [sp, #4]
   15624:	str	ip, [sp, #16]
   15628:	str	r4, [sp, #12]
   1562c:	str	lr, [sp]
   15630:	mov	r7, r0
   15634:	bl	11e98 <__assert_fail@plt+0xf64>
   15638:	ldr	r3, [sp, #24]
   1563c:	mov	r0, r7
   15640:	str	r3, [r8]
   15644:	add	sp, sp, #92	; 0x5c
   15648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1564c:	mov	r3, #8
   15650:	str	r3, [sp]
   15654:	add	r1, sp, #36	; 0x24
   15658:	rsb	r2, r2, #1
   1565c:	ldr	r0, [sp, #28]
   15660:	mvn	r3, #-2147483648	; 0x80000000
   15664:	bl	16990 <__assert_fail@plt+0x5a5c>
   15668:	mov	r4, r0
   1566c:	ldm	r5, {r0, r1}
   15670:	str	r4, [r7]
   15674:	stm	r4, {r0, r1}
   15678:	b	1555c <__assert_fail@plt+0x4628>
   1567c:	bl	10f28 <abort@plt>
   15680:	andeq	sl, r2, ip, ror r1
   15684:	strdeq	sl, [r2], -r4
   15688:	andeq	sl, r2, ip, lsr #3
   1568c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15690:	sub	sp, sp, #52	; 0x34
   15694:	mov	r5, r0
   15698:	mov	sl, r1
   1569c:	mov	fp, r2
   156a0:	bl	10e5c <__errno_location@plt>
   156a4:	ldr	r4, [pc, #404]	; 15840 <__assert_fail@plt+0x490c>
   156a8:	cmn	r5, #-2147483647	; 0x80000001
   156ac:	ldr	r6, [r4]
   156b0:	mov	r8, r0
   156b4:	movne	r0, #0
   156b8:	moveq	r0, #1
   156bc:	ldr	r3, [r8]
   156c0:	orrs	r0, r0, r5, lsr #31
   156c4:	str	r3, [sp, #28]
   156c8:	bne	1583c <__assert_fail@plt+0x4908>
   156cc:	ldr	r2, [r4, #4]
   156d0:	cmp	r5, r2
   156d4:	blt	15734 <__assert_fail@plt+0x4800>
   156d8:	add	r7, r4, #8
   156dc:	cmp	r6, r7
   156e0:	str	r2, [sp, #44]	; 0x2c
   156e4:	beq	1580c <__assert_fail@plt+0x48d8>
   156e8:	mov	r3, #8
   156ec:	sub	r2, r5, r2
   156f0:	mov	r0, r6
   156f4:	str	r3, [sp]
   156f8:	add	r2, r2, #1
   156fc:	mvn	r3, #-2147483648	; 0x80000000
   15700:	add	r1, sp, #44	; 0x2c
   15704:	bl	16990 <__assert_fail@plt+0x5a5c>
   15708:	mov	r6, r0
   1570c:	str	r0, [r4]
   15710:	ldr	r0, [r4, #4]
   15714:	ldr	r2, [sp, #44]	; 0x2c
   15718:	mov	r1, #0
   1571c:	sub	r2, r2, r0
   15720:	add	r0, r6, r0, lsl #3
   15724:	lsl	r2, r2, #3
   15728:	bl	10e74 <memset@plt>
   1572c:	ldr	r3, [sp, #44]	; 0x2c
   15730:	str	r3, [r4, #4]
   15734:	ldr	r2, [r4, #56]	; 0x38
   15738:	add	r3, r6, r5, lsl #3
   1573c:	ldr	r1, [r4, #20]
   15740:	ldr	r7, [r3, #4]
   15744:	ldr	r9, [r6, r5, lsl #3]
   15748:	ldr	ip, [r4, #60]	; 0x3c
   1574c:	str	r3, [sp, #32]
   15750:	ldr	r3, [r4, #16]
   15754:	str	r2, [sp, #12]
   15758:	ldr	r2, [pc, #228]	; 15844 <__assert_fail@plt+0x4910>
   1575c:	orr	r1, r1, #1
   15760:	str	r1, [sp, #36]	; 0x24
   15764:	str	r1, [sp, #4]
   15768:	str	r2, [sp, #8]
   1576c:	str	r3, [sp]
   15770:	mov	r0, r7
   15774:	mov	r1, r9
   15778:	str	ip, [sp, #16]
   1577c:	mov	r3, fp
   15780:	mov	r2, sl
   15784:	bl	11e98 <__assert_fail@plt+0xf64>
   15788:	cmp	r9, r0
   1578c:	bhi	157f8 <__assert_fail@plt+0x48c4>
   15790:	ldr	r3, [pc, #176]	; 15848 <__assert_fail@plt+0x4914>
   15794:	add	r9, r0, #1
   15798:	cmp	r7, r3
   1579c:	str	r9, [r6, r5, lsl #3]
   157a0:	beq	157ac <__assert_fail@plt+0x4878>
   157a4:	mov	r0, r7
   157a8:	bl	17f68 <__assert_fail@plt+0x7034>
   157ac:	mov	r0, r9
   157b0:	bl	16774 <__assert_fail@plt+0x5840>
   157b4:	ldr	ip, [sp, #32]
   157b8:	ldr	lr, [r4, #60]	; 0x3c
   157bc:	ldr	r5, [r4, #56]	; 0x38
   157c0:	mov	r3, fp
   157c4:	mov	r2, sl
   157c8:	mov	r1, r9
   157cc:	str	r0, [ip, #4]
   157d0:	ldr	ip, [r4, #16]
   157d4:	ldr	r4, [pc, #104]	; 15844 <__assert_fail@plt+0x4910>
   157d8:	str	lr, [sp, #16]
   157dc:	str	r4, [sp, #8]
   157e0:	ldr	r4, [sp, #36]	; 0x24
   157e4:	str	r5, [sp, #12]
   157e8:	str	r4, [sp, #4]
   157ec:	str	ip, [sp]
   157f0:	mov	r7, r0
   157f4:	bl	11e98 <__assert_fail@plt+0xf64>
   157f8:	ldr	r3, [sp, #28]
   157fc:	mov	r0, r7
   15800:	str	r3, [r8]
   15804:	add	sp, sp, #52	; 0x34
   15808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1580c:	mov	r3, #8
   15810:	sub	r2, r5, r2
   15814:	str	r3, [sp]
   15818:	add	r1, sp, #44	; 0x2c
   1581c:	add	r2, r2, #1
   15820:	mvn	r3, #-2147483648	; 0x80000000
   15824:	bl	16990 <__assert_fail@plt+0x5a5c>
   15828:	mov	r6, r0
   1582c:	ldm	r7, {r0, r1}
   15830:	str	r6, [r4]
   15834:	stm	r6, {r0, r1}
   15838:	b	15710 <__assert_fail@plt+0x47dc>
   1583c:	bl	10f28 <abort@plt>
   15840:	strdeq	sl, [r2], -r4
   15844:	andeq	sl, r2, ip, lsl #2
   15848:	andeq	sl, r2, ip, lsr #3
   1584c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15850:	sub	sp, sp, #44	; 0x2c
   15854:	mov	r9, r0
   15858:	mov	sl, r1
   1585c:	bl	10e5c <__errno_location@plt>
   15860:	ldr	r4, [pc, #360]	; 159d0 <__assert_fail@plt+0x4a9c>
   15864:	ldr	r2, [r4, #4]
   15868:	ldr	r5, [r4]
   1586c:	cmp	r2, #0
   15870:	ldr	r3, [r0]
   15874:	mov	r7, r0
   15878:	str	r3, [sp, #24]
   1587c:	bgt	158d8 <__assert_fail@plt+0x49a4>
   15880:	add	r6, r4, #8
   15884:	cmp	r5, r6
   15888:	str	r2, [sp, #36]	; 0x24
   1588c:	beq	159a0 <__assert_fail@plt+0x4a6c>
   15890:	mov	r3, #8
   15894:	mov	r0, r5
   15898:	str	r3, [sp]
   1589c:	rsb	r2, r2, #1
   158a0:	mvn	r3, #-2147483648	; 0x80000000
   158a4:	add	r1, sp, #36	; 0x24
   158a8:	bl	16990 <__assert_fail@plt+0x5a5c>
   158ac:	mov	r5, r0
   158b0:	str	r0, [r4]
   158b4:	ldr	r0, [r4, #4]
   158b8:	ldr	r2, [sp, #36]	; 0x24
   158bc:	mov	r1, #0
   158c0:	sub	r2, r2, r0
   158c4:	add	r0, r5, r0, lsl #3
   158c8:	lsl	r2, r2, #3
   158cc:	bl	10e74 <memset@plt>
   158d0:	ldr	r3, [sp, #36]	; 0x24
   158d4:	str	r3, [r4, #4]
   158d8:	ldr	r1, [r4, #20]
   158dc:	ldr	r8, [r5]
   158e0:	ldr	r6, [r5, #4]
   158e4:	ldr	r2, [r4, #56]	; 0x38
   158e8:	ldr	r3, [r4, #16]
   158ec:	ldr	ip, [r4, #60]	; 0x3c
   158f0:	ldr	fp, [pc, #220]	; 159d4 <__assert_fail@plt+0x4aa0>
   158f4:	orr	r1, r1, #1
   158f8:	str	r1, [sp, #28]
   158fc:	str	r1, [sp, #4]
   15900:	str	r2, [sp, #12]
   15904:	str	r3, [sp]
   15908:	mov	r1, r8
   1590c:	mov	r0, r6
   15910:	str	ip, [sp, #16]
   15914:	str	fp, [sp, #8]
   15918:	mov	r3, sl
   1591c:	mov	r2, r9
   15920:	bl	11e98 <__assert_fail@plt+0xf64>
   15924:	cmp	r8, r0
   15928:	bhi	1598c <__assert_fail@plt+0x4a58>
   1592c:	ldr	r3, [pc, #164]	; 159d8 <__assert_fail@plt+0x4aa4>
   15930:	add	r8, r0, #1
   15934:	cmp	r6, r3
   15938:	str	r8, [r5]
   1593c:	beq	15948 <__assert_fail@plt+0x4a14>
   15940:	mov	r0, r6
   15944:	bl	17f68 <__assert_fail@plt+0x7034>
   15948:	mov	r0, r8
   1594c:	bl	16774 <__assert_fail@plt+0x5840>
   15950:	ldr	lr, [r4, #60]	; 0x3c
   15954:	ldr	ip, [r4, #16]
   15958:	mov	r3, sl
   1595c:	mov	r2, r9
   15960:	mov	r1, r8
   15964:	str	r0, [r5, #4]
   15968:	ldr	r5, [r4, #56]	; 0x38
   1596c:	ldr	r4, [sp, #28]
   15970:	str	fp, [sp, #8]
   15974:	str	r4, [sp, #4]
   15978:	str	lr, [sp, #16]
   1597c:	str	r5, [sp, #12]
   15980:	str	ip, [sp]
   15984:	mov	r6, r0
   15988:	bl	11e98 <__assert_fail@plt+0xf64>
   1598c:	ldr	r3, [sp, #24]
   15990:	mov	r0, r6
   15994:	str	r3, [r7]
   15998:	add	sp, sp, #44	; 0x2c
   1599c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159a0:	mov	r3, #8
   159a4:	str	r3, [sp]
   159a8:	add	r1, sp, #36	; 0x24
   159ac:	rsb	r2, r2, #1
   159b0:	mvn	r3, #-2147483648	; 0x80000000
   159b4:	mov	r0, #0
   159b8:	bl	16990 <__assert_fail@plt+0x5a5c>
   159bc:	mov	r5, r0
   159c0:	ldm	r6, {r0, r1}
   159c4:	str	r5, [r4]
   159c8:	stm	r5, {r0, r1}
   159cc:	b	158b4 <__assert_fail@plt+0x4980>
   159d0:	strdeq	sl, [r2], -r4
   159d4:	andeq	sl, r2, ip, lsl #2
   159d8:	andeq	sl, r2, ip, lsr #3
   159dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159e0:	sub	sp, sp, #44	; 0x2c
   159e4:	mov	r5, r0
   159e8:	mov	sl, r1
   159ec:	bl	10e5c <__errno_location@plt>
   159f0:	ldr	r4, [pc, #396]	; 15b84 <__assert_fail@plt+0x4c50>
   159f4:	cmn	r5, #-2147483647	; 0x80000001
   159f8:	ldr	r6, [r4]
   159fc:	mov	r8, r0
   15a00:	movne	r0, #0
   15a04:	moveq	r0, #1
   15a08:	ldr	r3, [r8]
   15a0c:	orrs	r0, r0, r5, lsr #31
   15a10:	str	r3, [sp, #24]
   15a14:	bne	15b80 <__assert_fail@plt+0x4c4c>
   15a18:	ldr	r2, [r4, #4]
   15a1c:	cmp	r5, r2
   15a20:	blt	15a80 <__assert_fail@plt+0x4b4c>
   15a24:	add	r7, r4, #8
   15a28:	cmp	r6, r7
   15a2c:	str	r2, [sp, #36]	; 0x24
   15a30:	beq	15b50 <__assert_fail@plt+0x4c1c>
   15a34:	mov	r3, #8
   15a38:	sub	r2, r5, r2
   15a3c:	mov	r0, r6
   15a40:	str	r3, [sp]
   15a44:	add	r2, r2, #1
   15a48:	mvn	r3, #-2147483648	; 0x80000000
   15a4c:	add	r1, sp, #36	; 0x24
   15a50:	bl	16990 <__assert_fail@plt+0x5a5c>
   15a54:	mov	r6, r0
   15a58:	str	r0, [r4]
   15a5c:	ldr	r0, [r4, #4]
   15a60:	ldr	r2, [sp, #36]	; 0x24
   15a64:	mov	r1, #0
   15a68:	sub	r2, r2, r0
   15a6c:	add	r0, r6, r0, lsl #3
   15a70:	lsl	r2, r2, #3
   15a74:	bl	10e74 <memset@plt>
   15a78:	ldr	r3, [sp, #36]	; 0x24
   15a7c:	str	r3, [r4, #4]
   15a80:	ldr	r2, [r4, #56]	; 0x38
   15a84:	add	fp, r6, r5, lsl #3
   15a88:	ldr	r1, [r4, #20]
   15a8c:	ldr	r9, [r6, r5, lsl #3]
   15a90:	ldr	r7, [fp, #4]
   15a94:	ldr	r3, [r4, #16]
   15a98:	ldr	ip, [r4, #60]	; 0x3c
   15a9c:	str	r2, [sp, #12]
   15aa0:	ldr	r2, [pc, #224]	; 15b88 <__assert_fail@plt+0x4c54>
   15aa4:	orr	r1, r1, #1
   15aa8:	str	r1, [sp, #28]
   15aac:	str	r1, [sp, #4]
   15ab0:	str	r2, [sp, #8]
   15ab4:	str	r3, [sp]
   15ab8:	mov	r0, r7
   15abc:	mov	r1, r9
   15ac0:	str	ip, [sp, #16]
   15ac4:	mvn	r3, #0
   15ac8:	mov	r2, sl
   15acc:	bl	11e98 <__assert_fail@plt+0xf64>
   15ad0:	cmp	r9, r0
   15ad4:	bhi	15b3c <__assert_fail@plt+0x4c08>
   15ad8:	ldr	r3, [pc, #172]	; 15b8c <__assert_fail@plt+0x4c58>
   15adc:	add	r9, r0, #1
   15ae0:	cmp	r7, r3
   15ae4:	str	r9, [r6, r5, lsl #3]
   15ae8:	beq	15af4 <__assert_fail@plt+0x4bc0>
   15aec:	mov	r0, r7
   15af0:	bl	17f68 <__assert_fail@plt+0x7034>
   15af4:	mov	r0, r9
   15af8:	bl	16774 <__assert_fail@plt+0x5840>
   15afc:	ldr	ip, [r4, #60]	; 0x3c
   15b00:	ldr	r3, [r4, #16]
   15b04:	ldr	lr, [r4, #56]	; 0x38
   15b08:	ldr	r4, [pc, #120]	; 15b88 <__assert_fail@plt+0x4c54>
   15b0c:	mov	r2, sl
   15b10:	mov	r1, r9
   15b14:	str	r0, [fp, #4]
   15b18:	str	r4, [sp, #8]
   15b1c:	ldr	r4, [sp, #28]
   15b20:	str	r3, [sp]
   15b24:	str	r4, [sp, #4]
   15b28:	str	ip, [sp, #16]
   15b2c:	str	lr, [sp, #12]
   15b30:	mvn	r3, #0
   15b34:	mov	r7, r0
   15b38:	bl	11e98 <__assert_fail@plt+0xf64>
   15b3c:	ldr	r3, [sp, #24]
   15b40:	mov	r0, r7
   15b44:	str	r3, [r8]
   15b48:	add	sp, sp, #44	; 0x2c
   15b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b50:	mov	r3, #8
   15b54:	sub	r2, r5, r2
   15b58:	str	r3, [sp]
   15b5c:	add	r1, sp, #36	; 0x24
   15b60:	add	r2, r2, #1
   15b64:	mvn	r3, #-2147483648	; 0x80000000
   15b68:	bl	16990 <__assert_fail@plt+0x5a5c>
   15b6c:	mov	r6, r0
   15b70:	ldm	r7, {r0, r1}
   15b74:	str	r6, [r4]
   15b78:	stm	r6, {r0, r1}
   15b7c:	b	15a5c <__assert_fail@plt+0x4b28>
   15b80:	bl	10f28 <abort@plt>
   15b84:	strdeq	sl, [r2], -r4
   15b88:	andeq	sl, r2, ip, lsl #2
   15b8c:	andeq	sl, r2, ip, lsr #3
   15b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b94:	sub	sp, sp, #44	; 0x2c
   15b98:	mov	sl, r0
   15b9c:	bl	10e5c <__errno_location@plt>
   15ba0:	ldr	r4, [pc, #348]	; 15d04 <__assert_fail@plt+0x4dd0>
   15ba4:	ldr	r2, [r4, #4]
   15ba8:	ldr	r5, [r4]
   15bac:	cmp	r2, #0
   15bb0:	ldr	r3, [r0]
   15bb4:	mov	r8, r0
   15bb8:	str	r3, [sp, #28]
   15bbc:	bgt	15c18 <__assert_fail@plt+0x4ce4>
   15bc0:	add	r6, r4, #8
   15bc4:	cmp	r5, r6
   15bc8:	str	r2, [sp, #36]	; 0x24
   15bcc:	beq	15cd4 <__assert_fail@plt+0x4da0>
   15bd0:	mov	r3, #8
   15bd4:	mov	r0, r5
   15bd8:	str	r3, [sp]
   15bdc:	rsb	r2, r2, #1
   15be0:	mvn	r3, #-2147483648	; 0x80000000
   15be4:	add	r1, sp, #36	; 0x24
   15be8:	bl	16990 <__assert_fail@plt+0x5a5c>
   15bec:	mov	r5, r0
   15bf0:	str	r0, [r4]
   15bf4:	ldr	r0, [r4, #4]
   15bf8:	ldr	r2, [sp, #36]	; 0x24
   15bfc:	mov	r1, #0
   15c00:	sub	r2, r2, r0
   15c04:	add	r0, r5, r0, lsl #3
   15c08:	lsl	r2, r2, #3
   15c0c:	bl	10e74 <memset@plt>
   15c10:	ldr	r3, [sp, #36]	; 0x24
   15c14:	str	r3, [r4, #4]
   15c18:	ldr	r7, [r4, #20]
   15c1c:	ldr	r9, [r5]
   15c20:	ldr	r6, [r5, #4]
   15c24:	ldr	r2, [r4, #56]	; 0x38
   15c28:	ldr	r3, [r4, #16]
   15c2c:	ldr	ip, [r4, #60]	; 0x3c
   15c30:	ldr	fp, [pc, #208]	; 15d08 <__assert_fail@plt+0x4dd4>
   15c34:	orr	r7, r7, #1
   15c38:	str	r2, [sp, #12]
   15c3c:	str	r3, [sp]
   15c40:	str	r7, [sp, #4]
   15c44:	mov	r1, r9
   15c48:	mov	r0, r6
   15c4c:	str	ip, [sp, #16]
   15c50:	str	fp, [sp, #8]
   15c54:	mvn	r3, #0
   15c58:	mov	r2, sl
   15c5c:	bl	11e98 <__assert_fail@plt+0xf64>
   15c60:	cmp	r9, r0
   15c64:	bhi	15cc0 <__assert_fail@plt+0x4d8c>
   15c68:	ldr	r3, [pc, #156]	; 15d0c <__assert_fail@plt+0x4dd8>
   15c6c:	add	r9, r0, #1
   15c70:	cmp	r6, r3
   15c74:	str	r9, [r5]
   15c78:	beq	15c84 <__assert_fail@plt+0x4d50>
   15c7c:	mov	r0, r6
   15c80:	bl	17f68 <__assert_fail@plt+0x7034>
   15c84:	mov	r0, r9
   15c88:	bl	16774 <__assert_fail@plt+0x5840>
   15c8c:	ldr	ip, [r4, #60]	; 0x3c
   15c90:	ldr	r3, [r4, #16]
   15c94:	ldr	lr, [r4, #56]	; 0x38
   15c98:	mov	r2, sl
   15c9c:	mov	r1, r9
   15ca0:	str	r0, [r5, #4]
   15ca4:	str	r3, [sp]
   15ca8:	stmib	sp, {r7, fp}
   15cac:	str	ip, [sp, #16]
   15cb0:	str	lr, [sp, #12]
   15cb4:	mvn	r3, #0
   15cb8:	mov	r6, r0
   15cbc:	bl	11e98 <__assert_fail@plt+0xf64>
   15cc0:	ldr	r3, [sp, #28]
   15cc4:	mov	r0, r6
   15cc8:	str	r3, [r8]
   15ccc:	add	sp, sp, #44	; 0x2c
   15cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd4:	mov	r3, #8
   15cd8:	str	r3, [sp]
   15cdc:	add	r1, sp, #36	; 0x24
   15ce0:	rsb	r2, r2, #1
   15ce4:	mvn	r3, #-2147483648	; 0x80000000
   15ce8:	mov	r0, #0
   15cec:	bl	16990 <__assert_fail@plt+0x5a5c>
   15cf0:	mov	r5, r0
   15cf4:	ldm	r6, {r0, r1}
   15cf8:	str	r5, [r4]
   15cfc:	stm	r5, {r0, r1}
   15d00:	b	15bf4 <__assert_fail@plt+0x4cc0>
   15d04:	strdeq	sl, [r2], -r4
   15d08:	andeq	sl, r2, ip, lsl #2
   15d0c:	andeq	sl, r2, ip, lsr #3
   15d10:	push	{r4, r5, r6, lr}
   15d14:	sub	sp, sp, #32
   15d18:	cmp	r1, #0
   15d1c:	mov	r4, r0
   15d20:	ldr	r5, [sp, #48]	; 0x30
   15d24:	ldr	r6, [sp, #52]	; 0x34
   15d28:	beq	16040 <__assert_fail@plt+0x510c>
   15d2c:	stm	sp, {r2, r3}
   15d30:	mov	r3, r1
   15d34:	ldr	r2, [pc, #808]	; 16064 <__assert_fail@plt+0x5130>
   15d38:	mov	r1, #1
   15d3c:	bl	10e98 <__fprintf_chk@plt>
   15d40:	mov	r2, #5
   15d44:	ldr	r1, [pc, #796]	; 16068 <__assert_fail@plt+0x5134>
   15d48:	mov	r0, #0
   15d4c:	bl	10d78 <dcgettext@plt>
   15d50:	ldr	r3, [pc, #788]	; 1606c <__assert_fail@plt+0x5138>
   15d54:	ldr	r2, [pc, #788]	; 16070 <__assert_fail@plt+0x513c>
   15d58:	str	r3, [sp]
   15d5c:	mov	r1, #1
   15d60:	mov	r3, r0
   15d64:	mov	r0, r4
   15d68:	bl	10e98 <__fprintf_chk@plt>
   15d6c:	mov	r1, r4
   15d70:	mov	r0, #10
   15d74:	bl	10d6c <fputc_unlocked@plt>
   15d78:	mov	r2, #5
   15d7c:	ldr	r1, [pc, #752]	; 16074 <__assert_fail@plt+0x5140>
   15d80:	mov	r0, #0
   15d84:	bl	10d78 <dcgettext@plt>
   15d88:	mov	r1, #1
   15d8c:	ldr	r3, [pc, #740]	; 16078 <__assert_fail@plt+0x5144>
   15d90:	mov	r2, r0
   15d94:	mov	r0, r4
   15d98:	bl	10e98 <__fprintf_chk@plt>
   15d9c:	mov	r1, r4
   15da0:	mov	r0, #10
   15da4:	bl	10d6c <fputc_unlocked@plt>
   15da8:	cmp	r6, #9
   15dac:	ldrls	pc, [pc, r6, lsl #2]
   15db0:	b	16058 <__assert_fail@plt+0x5124>
   15db4:	andeq	r5, r1, r8, lsr lr
   15db8:	andeq	r5, r1, r0, asr #28
   15dbc:	andeq	r5, r1, ip, ror #28
   15dc0:	andeq	r5, r1, r0, lsr #29
   15dc4:	ldrdeq	r5, [r1], -ip
   15dc8:	andeq	r5, r1, r8, lsl pc
   15dcc:	andeq	r5, r1, r4, asr pc
   15dd0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15dd4:	andeq	r5, r1, r8, ror #31
   15dd8:	ldrdeq	r5, [r1], -ip
   15ddc:	ldr	r1, [pc, #664]	; 1607c <__assert_fail@plt+0x5148>
   15de0:	mov	r2, #5
   15de4:	mov	r0, #0
   15de8:	bl	10d78 <dcgettext@plt>
   15dec:	ldr	ip, [r5, #32]
   15df0:	ldr	r1, [r5, #28]
   15df4:	ldr	r2, [r5, #24]
   15df8:	ldr	r3, [r5]
   15dfc:	ldr	r6, [r5, #20]
   15e00:	str	ip, [sp, #28]
   15e04:	ldr	lr, [r5, #16]
   15e08:	str	r1, [sp, #24]
   15e0c:	ldr	ip, [r5, #12]
   15e10:	str	r2, [sp, #20]
   15e14:	ldr	r1, [r5, #8]
   15e18:	ldr	r2, [r5, #4]
   15e1c:	str	r6, [sp, #16]
   15e20:	stmib	sp, {r1, ip, lr}
   15e24:	mov	r1, #1
   15e28:	str	r2, [sp]
   15e2c:	mov	r2, r0
   15e30:	mov	r0, r4
   15e34:	bl	10e98 <__fprintf_chk@plt>
   15e38:	add	sp, sp, #32
   15e3c:	pop	{r4, r5, r6, pc}
   15e40:	mov	r2, #5
   15e44:	ldr	r1, [pc, #564]	; 16080 <__assert_fail@plt+0x514c>
   15e48:	mov	r0, #0
   15e4c:	bl	10d78 <dcgettext@plt>
   15e50:	ldr	r3, [r5]
   15e54:	mov	r1, #1
   15e58:	mov	r2, r0
   15e5c:	mov	r0, r4
   15e60:	add	sp, sp, #32
   15e64:	pop	{r4, r5, r6, lr}
   15e68:	b	10e98 <__fprintf_chk@plt>
   15e6c:	mov	r2, #5
   15e70:	ldr	r1, [pc, #524]	; 16084 <__assert_fail@plt+0x5150>
   15e74:	mov	r0, #0
   15e78:	bl	10d78 <dcgettext@plt>
   15e7c:	ldr	r2, [r5, #4]
   15e80:	ldr	r3, [r5]
   15e84:	mov	r1, #1
   15e88:	str	r2, [sp, #48]	; 0x30
   15e8c:	mov	r2, r0
   15e90:	mov	r0, r4
   15e94:	add	sp, sp, #32
   15e98:	pop	{r4, r5, r6, lr}
   15e9c:	b	10e98 <__fprintf_chk@plt>
   15ea0:	mov	r2, #5
   15ea4:	ldr	r1, [pc, #476]	; 16088 <__assert_fail@plt+0x5154>
   15ea8:	mov	r0, #0
   15eac:	bl	10d78 <dcgettext@plt>
   15eb0:	ldr	r1, [r5, #8]
   15eb4:	ldr	r2, [r5, #4]
   15eb8:	ldr	r3, [r5]
   15ebc:	str	r1, [sp, #52]	; 0x34
   15ec0:	str	r2, [sp, #48]	; 0x30
   15ec4:	mov	r1, #1
   15ec8:	mov	r2, r0
   15ecc:	mov	r0, r4
   15ed0:	add	sp, sp, #32
   15ed4:	pop	{r4, r5, r6, lr}
   15ed8:	b	10e98 <__fprintf_chk@plt>
   15edc:	mov	r2, #5
   15ee0:	ldr	r1, [pc, #420]	; 1608c <__assert_fail@plt+0x5158>
   15ee4:	mov	r0, #0
   15ee8:	bl	10d78 <dcgettext@plt>
   15eec:	ldr	r1, [r5, #8]
   15ef0:	ldr	ip, [r5, #12]
   15ef4:	ldr	r2, [r5, #4]
   15ef8:	ldr	r3, [r5]
   15efc:	stmib	sp, {r1, ip}
   15f00:	str	r2, [sp]
   15f04:	mov	r1, #1
   15f08:	mov	r2, r0
   15f0c:	mov	r0, r4
   15f10:	bl	10e98 <__fprintf_chk@plt>
   15f14:	b	15e38 <__assert_fail@plt+0x4f04>
   15f18:	mov	r2, #5
   15f1c:	ldr	r1, [pc, #364]	; 16090 <__assert_fail@plt+0x515c>
   15f20:	mov	r0, #0
   15f24:	bl	10d78 <dcgettext@plt>
   15f28:	add	r1, r5, #8
   15f2c:	ldr	r2, [r5, #4]
   15f30:	ldm	r1, {r1, ip, lr}
   15f34:	ldr	r3, [r5]
   15f38:	str	r2, [sp]
   15f3c:	stmib	sp, {r1, ip, lr}
   15f40:	mov	r1, #1
   15f44:	mov	r2, r0
   15f48:	mov	r0, r4
   15f4c:	bl	10e98 <__fprintf_chk@plt>
   15f50:	b	15e38 <__assert_fail@plt+0x4f04>
   15f54:	mov	r2, #5
   15f58:	ldr	r1, [pc, #308]	; 16094 <__assert_fail@plt+0x5160>
   15f5c:	mov	r0, #0
   15f60:	bl	10d78 <dcgettext@plt>
   15f64:	add	r1, r5, #8
   15f68:	ldr	r2, [r5, #4]
   15f6c:	ldm	r1, {r1, ip, lr}
   15f70:	ldr	r6, [r5, #20]
   15f74:	ldr	r3, [r5]
   15f78:	stmib	sp, {r1, ip, lr}
   15f7c:	mov	r1, #1
   15f80:	str	r2, [sp]
   15f84:	str	r6, [sp, #16]
   15f88:	mov	r2, r0
   15f8c:	mov	r0, r4
   15f90:	bl	10e98 <__fprintf_chk@plt>
   15f94:	b	15e38 <__assert_fail@plt+0x4f04>
   15f98:	mov	r2, #5
   15f9c:	ldr	r1, [pc, #244]	; 16098 <__assert_fail@plt+0x5164>
   15fa0:	mov	r0, #0
   15fa4:	bl	10d78 <dcgettext@plt>
   15fa8:	ldr	r2, [r5, #24]
   15fac:	ldr	r3, [r5]
   15fb0:	ldr	r6, [r5, #20]
   15fb4:	ldr	lr, [r5, #16]
   15fb8:	ldr	ip, [r5, #12]
   15fbc:	str	r2, [sp, #20]
   15fc0:	ldr	r1, [r5, #8]
   15fc4:	ldr	r2, [r5, #4]
   15fc8:	str	r6, [sp, #16]
   15fcc:	stmib	sp, {r1, ip, lr}
   15fd0:	mov	r1, #1
   15fd4:	str	r2, [sp]
   15fd8:	mov	r2, r0
   15fdc:	mov	r0, r4
   15fe0:	bl	10e98 <__fprintf_chk@plt>
   15fe4:	b	15e38 <__assert_fail@plt+0x4f04>
   15fe8:	mov	r2, #5
   15fec:	ldr	r1, [pc, #168]	; 1609c <__assert_fail@plt+0x5168>
   15ff0:	mov	r0, #0
   15ff4:	bl	10d78 <dcgettext@plt>
   15ff8:	ldr	r1, [r5, #28]
   15ffc:	ldr	r2, [r5, #24]
   16000:	ldr	r3, [r5]
   16004:	ldr	r6, [r5, #20]
   16008:	ldr	lr, [r5, #16]
   1600c:	str	r1, [sp, #24]
   16010:	ldr	ip, [r5, #12]
   16014:	str	r2, [sp, #20]
   16018:	ldr	r1, [r5, #8]
   1601c:	ldr	r2, [r5, #4]
   16020:	str	r6, [sp, #16]
   16024:	stmib	sp, {r1, ip, lr}
   16028:	mov	r1, #1
   1602c:	str	r2, [sp]
   16030:	mov	r2, r0
   16034:	mov	r0, r4
   16038:	bl	10e98 <__fprintf_chk@plt>
   1603c:	b	15e38 <__assert_fail@plt+0x4f04>
   16040:	str	r3, [sp]
   16044:	mov	r1, #1
   16048:	mov	r3, r2
   1604c:	ldr	r2, [pc, #76]	; 160a0 <__assert_fail@plt+0x516c>
   16050:	bl	10e98 <__fprintf_chk@plt>
   16054:	b	15d40 <__assert_fail@plt+0x4e0c>
   16058:	mov	r2, #5
   1605c:	ldr	r1, [pc, #64]	; 160a4 <__assert_fail@plt+0x5170>
   16060:	b	15de4 <__assert_fail@plt+0x4eb0>
   16064:	andeq	r8, r1, r0, asr #24
   16068:	andeq	r8, r1, r4, asr ip
   1606c:	andeq	r0, r0, r6, ror #15
   16070:	andeq	r8, r1, ip, lsr #30
   16074:	andeq	r8, r1, r8, asr ip
   16078:	andeq	r8, r1, r4, lsl #26
   1607c:	andeq	r8, r1, r4, lsr lr
   16080:	andeq	r8, r1, r8, lsr #26
   16084:	andeq	r8, r1, r8, lsr sp
   16088:	andeq	r8, r1, r0, asr sp
   1608c:	andeq	r8, r1, ip, ror #26
   16090:	andeq	r8, r1, ip, lsl #27
   16094:			; <UNDEFINED> instruction: 0x00018db0
   16098:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1609c:	andeq	r8, r1, r4, lsl #28
   160a0:	andeq	r8, r1, ip, asr #24
   160a4:	andeq	r8, r1, r8, ror #28
   160a8:	push	{r4, r5, lr}
   160ac:	sub	sp, sp, #12
   160b0:	ldr	r5, [sp, #24]
   160b4:	ldr	ip, [r5]
   160b8:	cmp	ip, #0
   160bc:	beq	160d8 <__assert_fail@plt+0x51a4>
   160c0:	mov	lr, r5
   160c4:	mov	ip, #0
   160c8:	ldr	r4, [lr, #4]!
   160cc:	add	ip, ip, #1
   160d0:	cmp	r4, #0
   160d4:	bne	160c8 <__assert_fail@plt+0x5194>
   160d8:	stm	sp, {r5, ip}
   160dc:	bl	15d10 <__assert_fail@plt+0x4ddc>
   160e0:	add	sp, sp, #12
   160e4:	pop	{r4, r5, pc}
   160e8:	push	{r4, r5, lr}
   160ec:	sub	sp, sp, #76	; 0x4c
   160f0:	mov	r5, r0
   160f4:	ldr	ip, [sp, #88]	; 0x58
   160f8:	ldr	r0, [ip]
   160fc:	cmp	r0, #0
   16100:	str	r0, [sp, #32]
   16104:	beq	164d8 <__assert_fail@plt+0x55a4>
   16108:	ldr	r0, [ip, #4]
   1610c:	cmp	r0, #0
   16110:	str	r0, [sp, #36]	; 0x24
   16114:	beq	164e0 <__assert_fail@plt+0x55ac>
   16118:	ldr	r0, [ip, #8]
   1611c:	cmp	r0, #0
   16120:	str	r0, [sp, #40]	; 0x28
   16124:	beq	164e8 <__assert_fail@plt+0x55b4>
   16128:	ldr	r0, [ip, #12]
   1612c:	cmp	r0, #0
   16130:	str	r0, [sp, #44]	; 0x2c
   16134:	beq	164f0 <__assert_fail@plt+0x55bc>
   16138:	ldr	r0, [ip, #16]
   1613c:	cmp	r0, #0
   16140:	str	r0, [sp, #48]	; 0x30
   16144:	beq	164f8 <__assert_fail@plt+0x55c4>
   16148:	ldr	r0, [ip, #20]
   1614c:	cmp	r0, #0
   16150:	str	r0, [sp, #52]	; 0x34
   16154:	beq	16500 <__assert_fail@plt+0x55cc>
   16158:	ldr	r0, [ip, #24]
   1615c:	cmp	r0, #0
   16160:	str	r0, [sp, #56]	; 0x38
   16164:	beq	16508 <__assert_fail@plt+0x55d4>
   16168:	ldr	r0, [ip, #28]
   1616c:	cmp	r0, #0
   16170:	str	r0, [sp, #60]	; 0x3c
   16174:	beq	16510 <__assert_fail@plt+0x55dc>
   16178:	ldr	r0, [ip, #32]
   1617c:	cmp	r0, #0
   16180:	str	r0, [sp, #64]	; 0x40
   16184:	beq	16518 <__assert_fail@plt+0x55e4>
   16188:	ldr	r0, [ip, #36]	; 0x24
   1618c:	cmp	r0, #0
   16190:	movne	r4, #10
   16194:	moveq	r4, #9
   16198:	cmp	r1, #0
   1619c:	beq	164b0 <__assert_fail@plt+0x557c>
   161a0:	stm	sp, {r2, r3}
   161a4:	mov	r0, r5
   161a8:	mov	r3, r1
   161ac:	ldr	r2, [pc, #876]	; 16520 <__assert_fail@plt+0x55ec>
   161b0:	mov	r1, #1
   161b4:	bl	10e98 <__fprintf_chk@plt>
   161b8:	mov	r2, #5
   161bc:	ldr	r1, [pc, #864]	; 16524 <__assert_fail@plt+0x55f0>
   161c0:	mov	r0, #0
   161c4:	bl	10d78 <dcgettext@plt>
   161c8:	ldr	r3, [pc, #856]	; 16528 <__assert_fail@plt+0x55f4>
   161cc:	ldr	r2, [pc, #856]	; 1652c <__assert_fail@plt+0x55f8>
   161d0:	str	r3, [sp]
   161d4:	mov	r1, #1
   161d8:	mov	r3, r0
   161dc:	mov	r0, r5
   161e0:	bl	10e98 <__fprintf_chk@plt>
   161e4:	mov	r1, r5
   161e8:	mov	r0, #10
   161ec:	bl	10d6c <fputc_unlocked@plt>
   161f0:	mov	r2, #5
   161f4:	ldr	r1, [pc, #820]	; 16530 <__assert_fail@plt+0x55fc>
   161f8:	mov	r0, #0
   161fc:	bl	10d78 <dcgettext@plt>
   16200:	mov	r1, #1
   16204:	ldr	r3, [pc, #808]	; 16534 <__assert_fail@plt+0x5600>
   16208:	mov	r2, r0
   1620c:	mov	r0, r5
   16210:	bl	10e98 <__fprintf_chk@plt>
   16214:	mov	r1, r5
   16218:	mov	r0, #10
   1621c:	bl	10d6c <fputc_unlocked@plt>
   16220:	cmp	r4, #9
   16224:	ldrls	pc, [pc, r4, lsl #2]
   16228:	b	164cc <__assert_fail@plt+0x5598>
   1622c:			; <UNDEFINED> instruction: 0x000162b0
   16230:			; <UNDEFINED> instruction: 0x000162b8
   16234:	andeq	r6, r1, r4, ror #5
   16238:	andeq	r6, r1, r8, lsl r3
   1623c:	andeq	r6, r1, r0, asr r3
   16240:	andeq	r6, r1, ip, lsl #7
   16244:	andeq	r6, r1, r8, asr #7
   16248:	andeq	r6, r1, ip, lsl #8
   1624c:	andeq	r6, r1, r8, asr r4
   16250:	andeq	r6, r1, r4, asr r2
   16254:	ldr	r1, [pc, #732]	; 16538 <__assert_fail@plt+0x5604>
   16258:	mov	r2, #5
   1625c:	mov	r0, #0
   16260:	bl	10d78 <dcgettext@plt>
   16264:	ldr	ip, [sp, #64]	; 0x40
   16268:	ldr	r1, [sp, #60]	; 0x3c
   1626c:	ldr	r2, [sp, #56]	; 0x38
   16270:	ldr	lr, [sp, #48]	; 0x30
   16274:	str	ip, [sp, #28]
   16278:	str	r1, [sp, #24]
   1627c:	ldr	ip, [sp, #44]	; 0x2c
   16280:	ldr	r1, [sp, #40]	; 0x28
   16284:	ldr	r4, [sp, #52]	; 0x34
   16288:	str	r2, [sp, #20]
   1628c:	ldr	r2, [sp, #36]	; 0x24
   16290:	stmib	sp, {r1, ip, lr}
   16294:	mov	r1, #1
   16298:	str	r2, [sp]
   1629c:	ldr	r3, [sp, #32]
   162a0:	str	r4, [sp, #16]
   162a4:	mov	r2, r0
   162a8:	mov	r0, r5
   162ac:	bl	10e98 <__fprintf_chk@plt>
   162b0:	add	sp, sp, #76	; 0x4c
   162b4:	pop	{r4, r5, pc}
   162b8:	mov	r2, #5
   162bc:	ldr	r1, [pc, #632]	; 1653c <__assert_fail@plt+0x5608>
   162c0:	mov	r0, #0
   162c4:	bl	10d78 <dcgettext@plt>
   162c8:	ldr	r3, [sp, #32]
   162cc:	mov	r1, #1
   162d0:	mov	r2, r0
   162d4:	mov	r0, r5
   162d8:	add	sp, sp, #76	; 0x4c
   162dc:	pop	{r4, r5, lr}
   162e0:	b	10e98 <__fprintf_chk@plt>
   162e4:	mov	r2, #5
   162e8:	ldr	r1, [pc, #592]	; 16540 <__assert_fail@plt+0x560c>
   162ec:	mov	r0, #0
   162f0:	bl	10d78 <dcgettext@plt>
   162f4:	ldr	r2, [sp, #36]	; 0x24
   162f8:	ldr	r3, [sp, #32]
   162fc:	str	r2, [sp, #88]	; 0x58
   16300:	mov	r1, #1
   16304:	mov	r2, r0
   16308:	mov	r0, r5
   1630c:	add	sp, sp, #76	; 0x4c
   16310:	pop	{r4, r5, lr}
   16314:	b	10e98 <__fprintf_chk@plt>
   16318:	mov	r2, #5
   1631c:	ldr	r1, [pc, #544]	; 16544 <__assert_fail@plt+0x5610>
   16320:	mov	r0, #0
   16324:	bl	10d78 <dcgettext@plt>
   16328:	ldr	r1, [sp, #40]	; 0x28
   1632c:	ldr	r2, [sp, #36]	; 0x24
   16330:	str	r1, [sp, #4]
   16334:	str	r2, [sp]
   16338:	ldr	r3, [sp, #32]
   1633c:	mov	r1, #1
   16340:	mov	r2, r0
   16344:	mov	r0, r5
   16348:	bl	10e98 <__fprintf_chk@plt>
   1634c:	b	162b0 <__assert_fail@plt+0x537c>
   16350:	mov	r2, #5
   16354:	ldr	r1, [pc, #492]	; 16548 <__assert_fail@plt+0x5614>
   16358:	mov	r0, #0
   1635c:	bl	10d78 <dcgettext@plt>
   16360:	ldr	r1, [sp, #40]	; 0x28
   16364:	ldr	ip, [sp, #44]	; 0x2c
   16368:	ldr	r2, [sp, #36]	; 0x24
   1636c:	ldr	r3, [sp, #32]
   16370:	stmib	sp, {r1, ip}
   16374:	str	r2, [sp]
   16378:	mov	r1, #1
   1637c:	mov	r2, r0
   16380:	mov	r0, r5
   16384:	bl	10e98 <__fprintf_chk@plt>
   16388:	b	162b0 <__assert_fail@plt+0x537c>
   1638c:	mov	r2, #5
   16390:	ldr	r1, [pc, #436]	; 1654c <__assert_fail@plt+0x5618>
   16394:	mov	r0, #0
   16398:	bl	10d78 <dcgettext@plt>
   1639c:	add	r1, sp, #40	; 0x28
   163a0:	ldr	r2, [sp, #36]	; 0x24
   163a4:	ldm	r1, {r1, ip, lr}
   163a8:	ldr	r3, [sp, #32]
   163ac:	str	r2, [sp]
   163b0:	stmib	sp, {r1, ip, lr}
   163b4:	mov	r1, #1
   163b8:	mov	r2, r0
   163bc:	mov	r0, r5
   163c0:	bl	10e98 <__fprintf_chk@plt>
   163c4:	b	162b0 <__assert_fail@plt+0x537c>
   163c8:	mov	r2, #5
   163cc:	ldr	r1, [pc, #380]	; 16550 <__assert_fail@plt+0x561c>
   163d0:	mov	r0, #0
   163d4:	bl	10d78 <dcgettext@plt>
   163d8:	add	r1, sp, #40	; 0x28
   163dc:	ldr	r2, [sp, #36]	; 0x24
   163e0:	ldm	r1, {r1, ip, lr}
   163e4:	ldr	r4, [sp, #52]	; 0x34
   163e8:	str	r2, [sp]
   163ec:	stmib	sp, {r1, ip, lr}
   163f0:	mov	r1, #1
   163f4:	ldr	r3, [sp, #32]
   163f8:	str	r4, [sp, #16]
   163fc:	mov	r2, r0
   16400:	mov	r0, r5
   16404:	bl	10e98 <__fprintf_chk@plt>
   16408:	b	162b0 <__assert_fail@plt+0x537c>
   1640c:	mov	r2, #5
   16410:	ldr	r1, [pc, #316]	; 16554 <__assert_fail@plt+0x5620>
   16414:	mov	r0, #0
   16418:	bl	10d78 <dcgettext@plt>
   1641c:	add	r1, sp, #40	; 0x28
   16420:	ldr	r2, [sp, #56]	; 0x38
   16424:	ldm	r1, {r1, ip, lr}
   16428:	ldr	r4, [sp, #52]	; 0x34
   1642c:	str	r2, [sp, #20]
   16430:	ldr	r2, [sp, #36]	; 0x24
   16434:	stmib	sp, {r1, ip, lr}
   16438:	mov	r1, #1
   1643c:	str	r2, [sp]
   16440:	ldr	r3, [sp, #32]
   16444:	str	r4, [sp, #16]
   16448:	mov	r2, r0
   1644c:	mov	r0, r5
   16450:	bl	10e98 <__fprintf_chk@plt>
   16454:	b	162b0 <__assert_fail@plt+0x537c>
   16458:	mov	r2, #5
   1645c:	ldr	r1, [pc, #244]	; 16558 <__assert_fail@plt+0x5624>
   16460:	mov	r0, #0
   16464:	bl	10d78 <dcgettext@plt>
   16468:	ldr	r1, [sp, #60]	; 0x3c
   1646c:	ldr	r2, [sp, #56]	; 0x38
   16470:	ldr	lr, [sp, #48]	; 0x30
   16474:	ldr	ip, [sp, #44]	; 0x2c
   16478:	str	r1, [sp, #24]
   1647c:	ldr	r1, [sp, #40]	; 0x28
   16480:	ldr	r4, [sp, #52]	; 0x34
   16484:	str	r2, [sp, #20]
   16488:	ldr	r2, [sp, #36]	; 0x24
   1648c:	stmib	sp, {r1, ip, lr}
   16490:	mov	r1, #1
   16494:	str	r2, [sp]
   16498:	ldr	r3, [sp, #32]
   1649c:	str	r4, [sp, #16]
   164a0:	mov	r2, r0
   164a4:	mov	r0, r5
   164a8:	bl	10e98 <__fprintf_chk@plt>
   164ac:	b	162b0 <__assert_fail@plt+0x537c>
   164b0:	str	r3, [sp]
   164b4:	mov	r1, #1
   164b8:	mov	r3, r2
   164bc:	mov	r0, r5
   164c0:	ldr	r2, [pc, #148]	; 1655c <__assert_fail@plt+0x5628>
   164c4:	bl	10e98 <__fprintf_chk@plt>
   164c8:	b	161b8 <__assert_fail@plt+0x5284>
   164cc:	mov	r2, #5
   164d0:	ldr	r1, [pc, #136]	; 16560 <__assert_fail@plt+0x562c>
   164d4:	b	1625c <__assert_fail@plt+0x5328>
   164d8:	mov	r4, r0
   164dc:	b	16198 <__assert_fail@plt+0x5264>
   164e0:	mov	r4, #1
   164e4:	b	16198 <__assert_fail@plt+0x5264>
   164e8:	mov	r4, #2
   164ec:	b	16198 <__assert_fail@plt+0x5264>
   164f0:	mov	r4, #3
   164f4:	b	16198 <__assert_fail@plt+0x5264>
   164f8:	mov	r4, #4
   164fc:	b	16198 <__assert_fail@plt+0x5264>
   16500:	mov	r4, #5
   16504:	b	16198 <__assert_fail@plt+0x5264>
   16508:	mov	r4, #6
   1650c:	b	16198 <__assert_fail@plt+0x5264>
   16510:	mov	r4, #7
   16514:	b	16198 <__assert_fail@plt+0x5264>
   16518:	mov	r4, #8
   1651c:	b	16198 <__assert_fail@plt+0x5264>
   16520:	andeq	r8, r1, r0, asr #24
   16524:	andeq	r8, r1, r4, asr ip
   16528:	andeq	r0, r0, r6, ror #15
   1652c:	andeq	r8, r1, ip, lsr #30
   16530:	andeq	r8, r1, r8, asr ip
   16534:	andeq	r8, r1, r4, lsl #26
   16538:	andeq	r8, r1, r4, lsr lr
   1653c:	andeq	r8, r1, r8, lsr #26
   16540:	andeq	r8, r1, r8, lsr sp
   16544:	andeq	r8, r1, r0, asr sp
   16548:	andeq	r8, r1, ip, ror #26
   1654c:	andeq	r8, r1, ip, lsl #27
   16550:			; <UNDEFINED> instruction: 0x00018db0
   16554:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16558:	andeq	r8, r1, r4, lsl #28
   1655c:	andeq	r8, r1, ip, asr #24
   16560:	andeq	r8, r1, r8, ror #28
   16564:	push	{r3}		; (str r3, [sp, #-4]!)
   16568:	push	{lr}		; (str lr, [sp, #-4]!)
   1656c:	sub	sp, sp, #56	; 0x38
   16570:	add	r3, sp, #64	; 0x40
   16574:	ldr	ip, [sp, #64]	; 0x40
   16578:	str	r3, [sp, #12]
   1657c:	cmp	ip, #0
   16580:	str	ip, [sp, #16]
   16584:	beq	1661c <__assert_fail@plt+0x56e8>
   16588:	ldr	ip, [sp, #68]	; 0x44
   1658c:	cmp	ip, #0
   16590:	str	ip, [sp, #20]
   16594:	beq	1663c <__assert_fail@plt+0x5708>
   16598:	ldr	ip, [sp, #72]	; 0x48
   1659c:	cmp	ip, #0
   165a0:	str	ip, [sp, #24]
   165a4:	beq	16644 <__assert_fail@plt+0x5710>
   165a8:	ldr	ip, [sp, #76]	; 0x4c
   165ac:	cmp	ip, #0
   165b0:	str	ip, [sp, #28]
   165b4:	beq	1664c <__assert_fail@plt+0x5718>
   165b8:	ldr	ip, [sp, #80]	; 0x50
   165bc:	cmp	ip, #0
   165c0:	str	ip, [sp, #32]
   165c4:	beq	16654 <__assert_fail@plt+0x5720>
   165c8:	ldr	ip, [sp, #84]	; 0x54
   165cc:	cmp	ip, #0
   165d0:	str	ip, [sp, #36]	; 0x24
   165d4:	beq	1665c <__assert_fail@plt+0x5728>
   165d8:	ldr	ip, [sp, #88]	; 0x58
   165dc:	cmp	ip, #0
   165e0:	str	ip, [sp, #40]	; 0x28
   165e4:	beq	16664 <__assert_fail@plt+0x5730>
   165e8:	ldr	ip, [sp, #92]	; 0x5c
   165ec:	cmp	ip, #0
   165f0:	str	ip, [sp, #44]	; 0x2c
   165f4:	beq	1666c <__assert_fail@plt+0x5738>
   165f8:	ldr	ip, [sp, #96]	; 0x60
   165fc:	cmp	ip, #0
   16600:	str	ip, [sp, #48]	; 0x30
   16604:	beq	16674 <__assert_fail@plt+0x5740>
   16608:	ldr	ip, [sp, #100]	; 0x64
   1660c:	cmp	ip, #0
   16610:	str	ip, [sp, #52]	; 0x34
   16614:	movne	ip, #10
   16618:	moveq	ip, #9
   1661c:	add	r3, sp, #16
   16620:	stm	sp, {r3, ip}
   16624:	ldr	r3, [sp, #60]	; 0x3c
   16628:	bl	15d10 <__assert_fail@plt+0x4ddc>
   1662c:	add	sp, sp, #56	; 0x38
   16630:	pop	{lr}		; (ldr lr, [sp], #4)
   16634:	add	sp, sp, #4
   16638:	bx	lr
   1663c:	mov	ip, #1
   16640:	b	1661c <__assert_fail@plt+0x56e8>
   16644:	mov	ip, #2
   16648:	b	1661c <__assert_fail@plt+0x56e8>
   1664c:	mov	ip, #3
   16650:	b	1661c <__assert_fail@plt+0x56e8>
   16654:	mov	ip, #4
   16658:	b	1661c <__assert_fail@plt+0x56e8>
   1665c:	mov	ip, #5
   16660:	b	1661c <__assert_fail@plt+0x56e8>
   16664:	mov	ip, #6
   16668:	b	1661c <__assert_fail@plt+0x56e8>
   1666c:	mov	ip, #7
   16670:	b	1661c <__assert_fail@plt+0x56e8>
   16674:	mov	ip, #8
   16678:	b	1661c <__assert_fail@plt+0x56e8>
   1667c:	ldr	r3, [pc, #116]	; 166f8 <__assert_fail@plt+0x57c4>
   16680:	push	{r4, lr}
   16684:	mov	r0, #10
   16688:	ldr	r1, [r3]
   1668c:	bl	10d6c <fputc_unlocked@plt>
   16690:	mov	r2, #5
   16694:	ldr	r1, [pc, #96]	; 166fc <__assert_fail@plt+0x57c8>
   16698:	mov	r0, #0
   1669c:	bl	10d78 <dcgettext@plt>
   166a0:	ldr	r2, [pc, #88]	; 16700 <__assert_fail@plt+0x57cc>
   166a4:	mov	r1, r0
   166a8:	mov	r0, #1
   166ac:	bl	10e80 <__printf_chk@plt>
   166b0:	mov	r2, #5
   166b4:	ldr	r1, [pc, #72]	; 16704 <__assert_fail@plt+0x57d0>
   166b8:	mov	r0, #0
   166bc:	bl	10d78 <dcgettext@plt>
   166c0:	ldr	r3, [pc, #64]	; 16708 <__assert_fail@plt+0x57d4>
   166c4:	ldr	r2, [pc, #64]	; 1670c <__assert_fail@plt+0x57d8>
   166c8:	mov	r1, r0
   166cc:	mov	r0, #1
   166d0:	bl	10e80 <__printf_chk@plt>
   166d4:	mov	r2, #5
   166d8:	ldr	r1, [pc, #48]	; 16710 <__assert_fail@plt+0x57dc>
   166dc:	mov	r0, #0
   166e0:	bl	10d78 <dcgettext@plt>
   166e4:	ldr	r2, [pc, #40]	; 16714 <__assert_fail@plt+0x57e0>
   166e8:	pop	{r4, lr}
   166ec:	mov	r1, r0
   166f0:	mov	r0, #1
   166f4:	b	10e80 <__printf_chk@plt>
   166f8:	andeq	sl, r2, r4, asr r1
   166fc:	andeq	r8, r1, r4, lsr #29
   16700:			; <UNDEFINED> instruction: 0x00018eb8
   16704:	ldrdeq	r8, [r1], -r0
   16708:	andeq	r8, r1, r8, asr r9
   1670c:	andeq	r8, r1, r0, lsl #19
   16710:	andeq	r8, r1, r4, ror #29
   16714:	andeq	r8, r1, ip, lsl #30
   16718:	push	{r4, r5, r6, lr}
   1671c:	mov	r6, r0
   16720:	mov	r5, r1
   16724:	mov	r4, r2
   16728:	bl	18048 <__assert_fail@plt+0x7114>
   1672c:	cmp	r0, #0
   16730:	popne	{r4, r5, r6, pc}
   16734:	cmp	r6, #0
   16738:	beq	16748 <__assert_fail@plt+0x5814>
   1673c:	cmp	r5, #0
   16740:	cmpne	r4, #0
   16744:	popeq	{r4, r5, r6, pc}
   16748:	bl	16d94 <__assert_fail@plt+0x5e60>
   1674c:	push	{r4, lr}
   16750:	bl	17e64 <__assert_fail@plt+0x6f30>
   16754:	cmp	r0, #0
   16758:	popne	{r4, pc}
   1675c:	bl	16d94 <__assert_fail@plt+0x5e60>
   16760:	push	{r4, lr}
   16764:	bl	17e64 <__assert_fail@plt+0x6f30>
   16768:	cmp	r0, #0
   1676c:	popne	{r4, pc}
   16770:	bl	16d94 <__assert_fail@plt+0x5e60>
   16774:	push	{r4, lr}
   16778:	bl	17e64 <__assert_fail@plt+0x6f30>
   1677c:	cmp	r0, #0
   16780:	popne	{r4, pc}
   16784:	bl	16d94 <__assert_fail@plt+0x5e60>
   16788:	push	{r4, r5, r6, lr}
   1678c:	mov	r5, r0
   16790:	mov	r4, r1
   16794:	bl	17e90 <__assert_fail@plt+0x6f5c>
   16798:	cmp	r0, #0
   1679c:	popne	{r4, r5, r6, pc}
   167a0:	adds	r4, r4, #0
   167a4:	movne	r4, #1
   167a8:	cmp	r5, #0
   167ac:	orreq	r4, r4, #1
   167b0:	cmp	r4, #0
   167b4:	popeq	{r4, r5, r6, pc}
   167b8:	bl	16d94 <__assert_fail@plt+0x5e60>
   167bc:	push	{r4, lr}
   167c0:	cmp	r1, #0
   167c4:	orreq	r1, r1, #1
   167c8:	bl	17e90 <__assert_fail@plt+0x6f5c>
   167cc:	cmp	r0, #0
   167d0:	popne	{r4, pc}
   167d4:	bl	16d94 <__assert_fail@plt+0x5e60>
   167d8:	push	{r4, r5, r6, lr}
   167dc:	mov	r6, r0
   167e0:	mov	r5, r1
   167e4:	mov	r4, r2
   167e8:	bl	18048 <__assert_fail@plt+0x7114>
   167ec:	cmp	r0, #0
   167f0:	popne	{r4, r5, r6, pc}
   167f4:	cmp	r6, #0
   167f8:	beq	16808 <__assert_fail@plt+0x58d4>
   167fc:	cmp	r5, #0
   16800:	cmpne	r4, #0
   16804:	popeq	{r4, r5, r6, pc}
   16808:	bl	16d94 <__assert_fail@plt+0x5e60>
   1680c:	cmp	r2, #0
   16810:	cmpne	r1, #0
   16814:	moveq	r2, #1
   16818:	moveq	r1, r2
   1681c:	push	{r4, lr}
   16820:	bl	18048 <__assert_fail@plt+0x7114>
   16824:	cmp	r0, #0
   16828:	popne	{r4, pc}
   1682c:	bl	16d94 <__assert_fail@plt+0x5e60>
   16830:	push	{r4, lr}
   16834:	mov	r2, r1
   16838:	mov	r1, r0
   1683c:	mov	r0, #0
   16840:	bl	18048 <__assert_fail@plt+0x7114>
   16844:	cmp	r0, #0
   16848:	popne	{r4, pc}
   1684c:	bl	16d94 <__assert_fail@plt+0x5e60>
   16850:	cmp	r1, #0
   16854:	cmpne	r0, #0
   16858:	moveq	r2, #1
   1685c:	movne	r2, r1
   16860:	moveq	r1, r2
   16864:	movne	r1, r0
   16868:	push	{r4, lr}
   1686c:	mov	r0, #0
   16870:	bl	18048 <__assert_fail@plt+0x7114>
   16874:	cmp	r0, #0
   16878:	popne	{r4, pc}
   1687c:	bl	16d94 <__assert_fail@plt+0x5e60>
   16880:	cmp	r0, #0
   16884:	push	{r4, r5, r6, lr}
   16888:	mov	r5, r1
   1688c:	ldr	r4, [r1]
   16890:	beq	168cc <__assert_fail@plt+0x5998>
   16894:	lsr	r2, r4, #1
   16898:	add	r3, r2, #1
   1689c:	mvn	r3, r3
   168a0:	cmp	r4, r3
   168a4:	bhi	168e8 <__assert_fail@plt+0x59b4>
   168a8:	add	r4, r4, #1
   168ac:	add	r4, r4, r2
   168b0:	mov	r1, r4
   168b4:	mov	r2, #1
   168b8:	bl	18048 <__assert_fail@plt+0x7114>
   168bc:	cmp	r0, #0
   168c0:	beq	168ec <__assert_fail@plt+0x59b8>
   168c4:	str	r4, [r5]
   168c8:	pop	{r4, r5, r6, pc}
   168cc:	cmp	r4, #0
   168d0:	moveq	r4, #64	; 0x40
   168d4:	mov	r1, r4
   168d8:	mov	r2, #1
   168dc:	bl	18048 <__assert_fail@plt+0x7114>
   168e0:	cmp	r0, #0
   168e4:	bne	168c4 <__assert_fail@plt+0x5990>
   168e8:	bl	16d94 <__assert_fail@plt+0x5e60>
   168ec:	cmp	r4, #0
   168f0:	bne	168e8 <__assert_fail@plt+0x59b4>
   168f4:	str	r4, [r5]
   168f8:	pop	{r4, r5, r6, pc}
   168fc:	cmp	r0, #0
   16900:	push	{r4, r5, r6, lr}
   16904:	mov	r5, r1
   16908:	ldr	r4, [r1]
   1690c:	mov	r6, r2
   16910:	beq	16954 <__assert_fail@plt+0x5a20>
   16914:	lsr	r1, r4, #1
   16918:	add	r3, r1, #1
   1691c:	mvn	r3, r3
   16920:	cmp	r4, r3
   16924:	bhi	1698c <__assert_fail@plt+0x5a58>
   16928:	add	r4, r4, #1
   1692c:	add	r4, r4, r1
   16930:	mov	r1, r4
   16934:	bl	18048 <__assert_fail@plt+0x7114>
   16938:	cmp	r0, #0
   1693c:	bne	1694c <__assert_fail@plt+0x5a18>
   16940:	cmp	r4, #0
   16944:	cmpne	r6, #0
   16948:	bne	1698c <__assert_fail@plt+0x5a58>
   1694c:	str	r4, [r5]
   16950:	pop	{r4, r5, r6, pc}
   16954:	cmp	r4, #0
   16958:	bne	16974 <__assert_fail@plt+0x5a40>
   1695c:	mov	r1, r2
   16960:	mov	r0, #64	; 0x40
   16964:	bl	18188 <__assert_fail@plt+0x7254>
   16968:	cmp	r0, #0
   1696c:	movne	r4, r0
   16970:	addeq	r4, r0, #1
   16974:	mov	r2, r6
   16978:	mov	r1, r4
   1697c:	mov	r0, #0
   16980:	bl	18048 <__assert_fail@plt+0x7114>
   16984:	cmp	r0, #0
   16988:	bne	1694c <__assert_fail@plt+0x5a18>
   1698c:	bl	16d94 <__assert_fail@plt+0x5e60>
   16990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16994:	sub	sp, sp, #12
   16998:	ldr	r6, [r1]
   1699c:	mov	r8, r1
   169a0:	mov	r9, r0
   169a4:	asrs	r4, r6, #1
   169a8:	mov	sl, r2
   169ac:	mov	fp, r3
   169b0:	ldr	r7, [sp, #48]	; 0x30
   169b4:	bmi	16b30 <__assert_fail@plt+0x5bfc>
   169b8:	mvn	r1, #-2147483648	; 0x80000000
   169bc:	sub	r1, r1, r4
   169c0:	cmp	r6, r1
   169c4:	movle	r1, #0
   169c8:	movgt	r1, #1
   169cc:	mvn	r3, fp
   169d0:	cmp	r1, #0
   169d4:	addeq	r4, r4, r6
   169d8:	mvnne	r4, #-2147483648	; 0x80000000
   169dc:	lsr	r3, r3, #31
   169e0:	cmp	fp, r4
   169e4:	movge	r2, #0
   169e8:	andlt	r2, r3, #1
   169ec:	cmp	r2, #0
   169f0:	beq	16ae0 <__assert_fail@plt+0x5bac>
   169f4:	cmp	r7, #0
   169f8:	blt	16bc8 <__assert_fail@plt+0x5c94>
   169fc:	bne	16bc0 <__assert_fail@plt+0x5c8c>
   16a00:	mov	r5, #64	; 0x40
   16a04:	mov	r1, r7
   16a08:	mov	r0, r5
   16a0c:	str	r3, [sp, #4]
   16a10:	bl	18394 <__assert_fail@plt+0x7460>
   16a14:	mov	r1, r7
   16a18:	mov	r4, r0
   16a1c:	mov	r0, r5
   16a20:	bl	185b4 <__assert_fail@plt+0x7680>
   16a24:	ldr	r3, [sp, #4]
   16a28:	sub	r5, r5, r1
   16a2c:	cmp	r9, #0
   16a30:	sub	r2, r4, r6
   16a34:	streq	r9, [r8]
   16a38:	cmp	r2, sl
   16a3c:	bge	16ac0 <__assert_fail@plt+0x5b8c>
   16a40:	cmp	sl, #0
   16a44:	blt	16b60 <__assert_fail@plt+0x5c2c>
   16a48:	cmp	r6, #0
   16a4c:	blt	16a6c <__assert_fail@plt+0x5b38>
   16a50:	mvn	r2, #-2147483648	; 0x80000000
   16a54:	sub	r2, r2, sl
   16a58:	cmp	r6, r2
   16a5c:	movle	r2, #0
   16a60:	movgt	r2, #1
   16a64:	cmp	r2, #0
   16a68:	bne	16b5c <__assert_fail@plt+0x5c28>
   16a6c:	add	r6, r6, sl
   16a70:	cmp	fp, r6
   16a74:	movge	r3, #0
   16a78:	andlt	r3, r3, #1
   16a7c:	cmp	r3, #0
   16a80:	mov	r4, r6
   16a84:	bne	16b5c <__assert_fail@plt+0x5c28>
   16a88:	cmp	r7, #0
   16a8c:	blt	16b74 <__assert_fail@plt+0x5c40>
   16a90:	beq	16abc <__assert_fail@plt+0x5b88>
   16a94:	cmp	r6, #0
   16a98:	blt	16c18 <__assert_fail@plt+0x5ce4>
   16a9c:	mov	r1, r7
   16aa0:	mvn	r0, #-2147483648	; 0x80000000
   16aa4:	bl	18394 <__assert_fail@plt+0x7460>
   16aa8:	cmp	r6, r0
   16aac:	movle	r0, #0
   16ab0:	movgt	r0, #1
   16ab4:	cmp	r0, #0
   16ab8:	bne	16b5c <__assert_fail@plt+0x5c28>
   16abc:	mul	r5, r6, r7
   16ac0:	mov	r1, r5
   16ac4:	mov	r0, r9
   16ac8:	bl	17e90 <__assert_fail@plt+0x6f5c>
   16acc:	cmp	r0, #0
   16ad0:	beq	16b44 <__assert_fail@plt+0x5c10>
   16ad4:	str	r4, [r8]
   16ad8:	add	sp, sp, #12
   16adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ae0:	cmp	r7, #0
   16ae4:	blt	16ba0 <__assert_fail@plt+0x5c6c>
   16ae8:	beq	16a00 <__assert_fail@plt+0x5acc>
   16aec:	cmp	r4, #0
   16af0:	blt	16bd0 <__assert_fail@plt+0x5c9c>
   16af4:	mov	r1, r7
   16af8:	mvn	r0, #-2147483648	; 0x80000000
   16afc:	str	r3, [sp, #4]
   16b00:	bl	18394 <__assert_fail@plt+0x7460>
   16b04:	ldr	r3, [sp, #4]
   16b08:	cmp	r0, r4
   16b0c:	movge	r0, #0
   16b10:	movlt	r0, #1
   16b14:	cmp	r0, #0
   16b18:	mvnne	r5, #-2147483648	; 0x80000000
   16b1c:	bne	16a04 <__assert_fail@plt+0x5ad0>
   16b20:	mul	r5, r7, r4
   16b24:	cmp	r5, #63	; 0x3f
   16b28:	bgt	16a2c <__assert_fail@plt+0x5af8>
   16b2c:	b	16a00 <__assert_fail@plt+0x5acc>
   16b30:	rsb	r1, r4, #-2147483648	; 0x80000000
   16b34:	cmp	r6, r1
   16b38:	movge	r1, #0
   16b3c:	movlt	r1, #1
   16b40:	b	169cc <__assert_fail@plt+0x5a98>
   16b44:	adds	r5, r5, #0
   16b48:	movne	r5, #1
   16b4c:	cmp	r9, #0
   16b50:	orreq	r5, r5, #1
   16b54:	cmp	r5, #0
   16b58:	beq	16ad4 <__assert_fail@plt+0x5ba0>
   16b5c:	bl	16d94 <__assert_fail@plt+0x5e60>
   16b60:	rsb	r2, sl, #-2147483648	; 0x80000000
   16b64:	cmp	r6, r2
   16b68:	movge	r2, #0
   16b6c:	movlt	r2, #1
   16b70:	b	16a64 <__assert_fail@plt+0x5b30>
   16b74:	cmp	r6, #0
   16b78:	blt	16bfc <__assert_fail@plt+0x5cc8>
   16b7c:	cmn	r7, #1
   16b80:	beq	16abc <__assert_fail@plt+0x5b88>
   16b84:	mov	r1, r7
   16b88:	mov	r0, #-2147483648	; 0x80000000
   16b8c:	bl	18394 <__assert_fail@plt+0x7460>
   16b90:	cmp	r6, r0
   16b94:	movle	r0, #0
   16b98:	movgt	r0, #1
   16b9c:	b	16ab4 <__assert_fail@plt+0x5b80>
   16ba0:	cmp	r4, #0
   16ba4:	blt	16c3c <__assert_fail@plt+0x5d08>
   16ba8:	cmn	r7, #1
   16bac:	beq	16b20 <__assert_fail@plt+0x5bec>
   16bb0:	str	r3, [sp, #4]
   16bb4:	mov	r1, r7
   16bb8:	mov	r0, #-2147483648	; 0x80000000
   16bbc:	b	16b00 <__assert_fail@plt+0x5bcc>
   16bc0:	mov	r4, fp
   16bc4:	b	16af4 <__assert_fail@plt+0x5bc0>
   16bc8:	mov	r4, fp
   16bcc:	b	16ba8 <__assert_fail@plt+0x5c74>
   16bd0:	cmn	r4, #1
   16bd4:	beq	16b20 <__assert_fail@plt+0x5bec>
   16bd8:	mov	r1, r4
   16bdc:	mov	r0, #-2147483648	; 0x80000000
   16be0:	str	r3, [sp, #4]
   16be4:	bl	18394 <__assert_fail@plt+0x7460>
   16be8:	ldr	r3, [sp, #4]
   16bec:	cmp	r7, r0
   16bf0:	movle	r0, #0
   16bf4:	movgt	r0, #1
   16bf8:	b	16b14 <__assert_fail@plt+0x5be0>
   16bfc:	mov	r1, r7
   16c00:	mvn	r0, #-2147483648	; 0x80000000
   16c04:	bl	18394 <__assert_fail@plt+0x7460>
   16c08:	cmp	r6, r0
   16c0c:	movge	r0, #0
   16c10:	movlt	r0, #1
   16c14:	b	16ab4 <__assert_fail@plt+0x5b80>
   16c18:	cmn	r6, #1
   16c1c:	beq	16abc <__assert_fail@plt+0x5b88>
   16c20:	mov	r1, r6
   16c24:	mov	r0, #-2147483648	; 0x80000000
   16c28:	bl	18394 <__assert_fail@plt+0x7460>
   16c2c:	cmp	r7, r0
   16c30:	movle	r0, #0
   16c34:	movgt	r0, #1
   16c38:	b	16ab4 <__assert_fail@plt+0x5b80>
   16c3c:	mov	r1, r7
   16c40:	mvn	r0, #-2147483648	; 0x80000000
   16c44:	str	r3, [sp, #4]
   16c48:	bl	18394 <__assert_fail@plt+0x7460>
   16c4c:	ldr	r3, [sp, #4]
   16c50:	cmp	r0, r4
   16c54:	movle	r0, #0
   16c58:	movgt	r0, #1
   16c5c:	b	16b14 <__assert_fail@plt+0x5be0>
   16c60:	push	{r4, lr}
   16c64:	mov	r1, #1
   16c68:	bl	17e1c <__assert_fail@plt+0x6ee8>
   16c6c:	cmp	r0, #0
   16c70:	popne	{r4, pc}
   16c74:	bl	16d94 <__assert_fail@plt+0x5e60>
   16c78:	push	{r4, lr}
   16c7c:	mov	r1, #1
   16c80:	bl	17e1c <__assert_fail@plt+0x6ee8>
   16c84:	cmp	r0, #0
   16c88:	popne	{r4, pc}
   16c8c:	bl	16d94 <__assert_fail@plt+0x5e60>
   16c90:	push	{r4, lr}
   16c94:	bl	17e1c <__assert_fail@plt+0x6ee8>
   16c98:	cmp	r0, #0
   16c9c:	popne	{r4, pc}
   16ca0:	bl	16d94 <__assert_fail@plt+0x5e60>
   16ca4:	push	{r4, lr}
   16ca8:	bl	17e1c <__assert_fail@plt+0x6ee8>
   16cac:	cmp	r0, #0
   16cb0:	popne	{r4, pc}
   16cb4:	bl	16d94 <__assert_fail@plt+0x5e60>
   16cb8:	push	{r4, r5, r6, lr}
   16cbc:	mov	r6, r0
   16cc0:	mov	r0, r1
   16cc4:	mov	r4, r1
   16cc8:	bl	17e64 <__assert_fail@plt+0x6f30>
   16ccc:	subs	r5, r0, #0
   16cd0:	beq	16ce8 <__assert_fail@plt+0x5db4>
   16cd4:	mov	r2, r4
   16cd8:	mov	r1, r6
   16cdc:	bl	10d30 <memcpy@plt>
   16ce0:	mov	r0, r5
   16ce4:	pop	{r4, r5, r6, pc}
   16ce8:	bl	16d94 <__assert_fail@plt+0x5e60>
   16cec:	push	{r4, r5, r6, lr}
   16cf0:	mov	r6, r0
   16cf4:	mov	r0, r1
   16cf8:	mov	r4, r1
   16cfc:	bl	17e64 <__assert_fail@plt+0x6f30>
   16d00:	subs	r5, r0, #0
   16d04:	beq	16d1c <__assert_fail@plt+0x5de8>
   16d08:	mov	r2, r4
   16d0c:	mov	r1, r6
   16d10:	bl	10d30 <memcpy@plt>
   16d14:	mov	r0, r5
   16d18:	pop	{r4, r5, r6, pc}
   16d1c:	bl	16d94 <__assert_fail@plt+0x5e60>
   16d20:	push	{r4, r5, r6, lr}
   16d24:	mov	r6, r0
   16d28:	add	r0, r1, #1
   16d2c:	mov	r4, r1
   16d30:	bl	17e64 <__assert_fail@plt+0x6f30>
   16d34:	subs	r5, r0, #0
   16d38:	beq	16d58 <__assert_fail@plt+0x5e24>
   16d3c:	mov	r3, #0
   16d40:	mov	r1, r6
   16d44:	strb	r3, [r5, r4]
   16d48:	mov	r2, r4
   16d4c:	bl	10d30 <memcpy@plt>
   16d50:	mov	r0, r5
   16d54:	pop	{r4, r5, r6, pc}
   16d58:	bl	16d94 <__assert_fail@plt+0x5e60>
   16d5c:	push	{r4, r5, r6, lr}
   16d60:	mov	r6, r0
   16d64:	bl	10e44 <strlen@plt>
   16d68:	add	r4, r0, #1
   16d6c:	mov	r0, r4
   16d70:	bl	17e64 <__assert_fail@plt+0x6f30>
   16d74:	subs	r5, r0, #0
   16d78:	beq	16d90 <__assert_fail@plt+0x5e5c>
   16d7c:	mov	r2, r4
   16d80:	mov	r1, r6
   16d84:	bl	10d30 <memcpy@plt>
   16d88:	mov	r0, r5
   16d8c:	pop	{r4, r5, r6, pc}
   16d90:	bl	16d94 <__assert_fail@plt+0x5e60>
   16d94:	ldr	r3, [pc, #44]	; 16dc8 <__assert_fail@plt+0x5e94>
   16d98:	push	{r4, lr}
   16d9c:	mov	r2, #5
   16da0:	ldr	r1, [pc, #36]	; 16dcc <__assert_fail@plt+0x5e98>
   16da4:	mov	r0, #0
   16da8:	ldr	r4, [r3]
   16dac:	bl	10d78 <dcgettext@plt>
   16db0:	ldr	r2, [pc, #24]	; 16dd0 <__assert_fail@plt+0x5e9c>
   16db4:	mov	r1, #0
   16db8:	mov	r3, r0
   16dbc:	mov	r0, r4
   16dc0:	bl	10de4 <error@plt>
   16dc4:	bl	10f28 <abort@plt>
   16dc8:	strdeq	sl, [r2], -r0
   16dcc:	andeq	r8, r1, ip, asr pc
   16dd0:	andeq	r8, r1, r4, lsr #22
   16dd4:	push	{r4, r5, r6, r7, lr}
   16dd8:	sub	sp, sp, #20
   16ddc:	mov	r6, r2
   16de0:	ldr	ip, [sp, #48]	; 0x30
   16de4:	mov	r2, r1
   16de8:	mov	r7, r3
   16dec:	str	ip, [sp]
   16df0:	add	r3, sp, #8
   16df4:	mov	r1, #0
   16df8:	mov	r5, r0
   16dfc:	ldr	r4, [sp, #56]	; 0x38
   16e00:	bl	17050 <__assert_fail@plt+0x611c>
   16e04:	cmp	r0, #0
   16e08:	bne	16e8c <__assert_fail@plt+0x5f58>
   16e0c:	ldrd	r0, [sp, #8]
   16e10:	cmp	r1, r7
   16e14:	cmpeq	r0, r6
   16e18:	ldrd	r6, [sp, #40]	; 0x28
   16e1c:	movcc	r3, #1
   16e20:	movcs	r3, #0
   16e24:	cmp	r1, r7
   16e28:	cmpeq	r0, r6
   16e2c:	orrhi	r3, r3, #1
   16e30:	cmp	r3, #0
   16e34:	beq	16e84 <__assert_fail@plt+0x5f50>
   16e38:	mov	r3, #0
   16e3c:	mvn	r2, #-1073741824	; 0xc0000000
   16e40:	cmp	r1, r3
   16e44:	cmpeq	r0, r2
   16e48:	bhi	16eb8 <__assert_fail@plt+0x5f84>
   16e4c:	bl	10e5c <__errno_location@plt>
   16e50:	mov	r3, #34	; 0x22
   16e54:	mov	r6, r3
   16e58:	str	r3, [r0]
   16e5c:	cmp	r4, #0
   16e60:	moveq	r4, #1
   16e64:	mov	r0, r5
   16e68:	bl	15b90 <__assert_fail@plt+0x4c5c>
   16e6c:	mov	r1, r6
   16e70:	ldr	r3, [sp, #52]	; 0x34
   16e74:	ldr	r2, [pc, #144]	; 16f0c <__assert_fail@plt+0x5fd8>
   16e78:	str	r0, [sp]
   16e7c:	mov	r0, r4
   16e80:	bl	10de4 <error@plt>
   16e84:	add	sp, sp, #20
   16e88:	pop	{r4, r5, r6, r7, pc}
   16e8c:	cmp	r0, #1
   16e90:	beq	16ecc <__assert_fail@plt+0x5f98>
   16e94:	cmp	r0, #3
   16e98:	beq	16efc <__assert_fail@plt+0x5fc8>
   16e9c:	cmp	r4, #0
   16ea0:	beq	16eec <__assert_fail@plt+0x5fb8>
   16ea4:	bl	10e5c <__errno_location@plt>
   16ea8:	ldr	r6, [r0]
   16eac:	cmp	r6, #22
   16eb0:	moveq	r6, #0
   16eb4:	b	16e64 <__assert_fail@plt+0x5f30>
   16eb8:	bl	10e5c <__errno_location@plt>
   16ebc:	mov	r3, #75	; 0x4b
   16ec0:	mov	r6, r3
   16ec4:	str	r3, [r0]
   16ec8:	b	16e5c <__assert_fail@plt+0x5f28>
   16ecc:	bl	10e5c <__errno_location@plt>
   16ed0:	mov	r3, #75	; 0x4b
   16ed4:	mov	r6, r3
   16ed8:	str	r3, [r0]
   16edc:	cmp	r4, #0
   16ee0:	moveq	r4, #1
   16ee4:	bne	16eac <__assert_fail@plt+0x5f78>
   16ee8:	b	16e64 <__assert_fail@plt+0x5f30>
   16eec:	bl	10e5c <__errno_location@plt>
   16ef0:	mov	r4, #1
   16ef4:	ldr	r6, [r0]
   16ef8:	b	16eac <__assert_fail@plt+0x5f78>
   16efc:	bl	10e5c <__errno_location@plt>
   16f00:	mov	r6, #0
   16f04:	str	r6, [r0]
   16f08:	b	16edc <__assert_fail@plt+0x5fa8>
   16f0c:	andeq	r8, r1, r0, lsr #22
   16f10:	push	{r4, r5, r6, r7, lr}
   16f14:	sub	sp, sp, #20
   16f18:	mov	r6, r2
   16f1c:	ldr	r1, [sp, #48]	; 0x30
   16f20:	mov	r7, r3
   16f24:	str	r1, [sp]
   16f28:	add	r3, sp, #8
   16f2c:	mov	r2, #10
   16f30:	mov	r1, #0
   16f34:	mov	r5, r0
   16f38:	ldr	r4, [sp, #56]	; 0x38
   16f3c:	bl	17050 <__assert_fail@plt+0x611c>
   16f40:	cmp	r0, #0
   16f44:	bne	16fc8 <__assert_fail@plt+0x6094>
   16f48:	ldrd	r0, [sp, #8]
   16f4c:	cmp	r7, r1
   16f50:	cmpeq	r6, r0
   16f54:	ldrd	r6, [sp, #40]	; 0x28
   16f58:	movhi	r3, #1
   16f5c:	movls	r3, #0
   16f60:	cmp	r7, r1
   16f64:	cmpeq	r6, r0
   16f68:	orrcc	r3, r3, #1
   16f6c:	cmp	r3, #0
   16f70:	beq	16fc0 <__assert_fail@plt+0x608c>
   16f74:	mov	r3, #0
   16f78:	mvn	r2, #-1073741824	; 0xc0000000
   16f7c:	cmp	r1, r3
   16f80:	cmpeq	r0, r2
   16f84:	bhi	16ff4 <__assert_fail@plt+0x60c0>
   16f88:	bl	10e5c <__errno_location@plt>
   16f8c:	mov	r3, #34	; 0x22
   16f90:	mov	r6, r3
   16f94:	str	r3, [r0]
   16f98:	cmp	r4, #0
   16f9c:	moveq	r4, #1
   16fa0:	mov	r0, r5
   16fa4:	bl	15b90 <__assert_fail@plt+0x4c5c>
   16fa8:	mov	r1, r6
   16fac:	ldr	r3, [sp, #52]	; 0x34
   16fb0:	ldr	r2, [pc, #144]	; 17048 <__assert_fail@plt+0x6114>
   16fb4:	str	r0, [sp]
   16fb8:	mov	r0, r4
   16fbc:	bl	10de4 <error@plt>
   16fc0:	add	sp, sp, #20
   16fc4:	pop	{r4, r5, r6, r7, pc}
   16fc8:	cmp	r0, #1
   16fcc:	beq	17008 <__assert_fail@plt+0x60d4>
   16fd0:	cmp	r0, #3
   16fd4:	beq	17038 <__assert_fail@plt+0x6104>
   16fd8:	cmp	r4, #0
   16fdc:	beq	17028 <__assert_fail@plt+0x60f4>
   16fe0:	bl	10e5c <__errno_location@plt>
   16fe4:	ldr	r6, [r0]
   16fe8:	cmp	r6, #22
   16fec:	moveq	r6, #0
   16ff0:	b	16fa0 <__assert_fail@plt+0x606c>
   16ff4:	bl	10e5c <__errno_location@plt>
   16ff8:	mov	r3, #75	; 0x4b
   16ffc:	mov	r6, r3
   17000:	str	r3, [r0]
   17004:	b	16f98 <__assert_fail@plt+0x6064>
   17008:	bl	10e5c <__errno_location@plt>
   1700c:	mov	r3, #75	; 0x4b
   17010:	mov	r6, r3
   17014:	str	r3, [r0]
   17018:	cmp	r4, #0
   1701c:	moveq	r4, #1
   17020:	bne	16fe8 <__assert_fail@plt+0x60b4>
   17024:	b	16fa0 <__assert_fail@plt+0x606c>
   17028:	bl	10e5c <__errno_location@plt>
   1702c:	mov	r4, #1
   17030:	ldr	r6, [r0]
   17034:	b	16fe8 <__assert_fail@plt+0x60b4>
   17038:	bl	10e5c <__errno_location@plt>
   1703c:	mov	r6, #0
   17040:	str	r6, [r0]
   17044:	b	17018 <__assert_fail@plt+0x60e4>
   17048:	andeq	r8, r1, r0, lsr #22
   1704c:	andeq	r0, r0, r0
   17050:	cmp	r2, #36	; 0x24
   17054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17058:	sub	sp, sp, #52	; 0x34
   1705c:	bhi	17dec <__assert_fail@plt+0x6eb8>
   17060:	cmp	r1, #0
   17064:	mov	r6, r2
   17068:	mov	sl, r0
   1706c:	mov	r5, r1
   17070:	mov	r8, r3
   17074:	addeq	r5, sp, #44	; 0x2c
   17078:	bl	10e5c <__errno_location@plt>
   1707c:	mov	r3, #0
   17080:	str	r3, [r0]
   17084:	mov	fp, r0
   17088:	bl	10e2c <__ctype_b_loc@plt>
   1708c:	ldrb	r3, [sl]
   17090:	mov	r2, sl
   17094:	ldr	r0, [r0]
   17098:	b	170a0 <__assert_fail@plt+0x616c>
   1709c:	ldrb	r3, [r2, #1]!
   170a0:	lsl	r1, r3, #1
   170a4:	ldrh	r4, [r0, r1]
   170a8:	ands	r4, r4, #8192	; 0x2000
   170ac:	bne	1709c <__assert_fail@plt+0x6168>
   170b0:	cmp	r3, #45	; 0x2d
   170b4:	bne	170c8 <__assert_fail@plt+0x6194>
   170b8:	mov	r4, #4
   170bc:	mov	r0, r4
   170c0:	add	sp, sp, #52	; 0x34
   170c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170c8:	mov	r2, r6
   170cc:	mov	r3, r4
   170d0:	mov	r1, r5
   170d4:	mov	r0, sl
   170d8:	bl	10d3c <__strtoull_internal@plt>
   170dc:	ldr	r9, [r5]
   170e0:	cmp	sl, r9
   170e4:	mov	r6, r0
   170e8:	mov	r7, r1
   170ec:	beq	17134 <__assert_fail@plt+0x6200>
   170f0:	ldr	r4, [fp]
   170f4:	cmp	r4, #0
   170f8:	bne	17124 <__assert_fail@plt+0x61f0>
   170fc:	ldr	r3, [sp, #88]	; 0x58
   17100:	cmp	r3, #0
   17104:	beq	17114 <__assert_fail@plt+0x61e0>
   17108:	ldrb	sl, [r9]
   1710c:	cmp	sl, #0
   17110:	bne	17168 <__assert_fail@plt+0x6234>
   17114:	mov	r0, r4
   17118:	strd	r6, [r8]
   1711c:	add	sp, sp, #52	; 0x34
   17120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17124:	cmp	r4, #34	; 0x22
   17128:	bne	170b8 <__assert_fail@plt+0x6184>
   1712c:	mov	r4, #1
   17130:	b	170fc <__assert_fail@plt+0x61c8>
   17134:	ldr	r3, [sp, #88]	; 0x58
   17138:	cmp	r3, #0
   1713c:	beq	170b8 <__assert_fail@plt+0x6184>
   17140:	ldrb	sl, [r9]
   17144:	cmp	sl, #0
   17148:	beq	170b8 <__assert_fail@plt+0x6184>
   1714c:	mov	r1, sl
   17150:	mov	r0, r3
   17154:	bl	10e50 <strchr@plt>
   17158:	cmp	r0, #0
   1715c:	movne	r6, #1
   17160:	movne	r7, #0
   17164:	beq	170b8 <__assert_fail@plt+0x6184>
   17168:	mov	r1, sl
   1716c:	ldr	r0, [sp, #88]	; 0x58
   17170:	bl	10e50 <strchr@plt>
   17174:	cmp	r0, #0
   17178:	beq	17cd8 <__assert_fail@plt+0x6da4>
   1717c:	sub	r3, sl, #69	; 0x45
   17180:	cmp	r3, #47	; 0x2f
   17184:	ldrls	pc, [pc, r3, lsl #2]
   17188:	b	1727c <__assert_fail@plt+0x6348>
   1718c:	andeq	r7, r1, ip, asr #4
   17190:	andeq	r7, r1, ip, ror r2
   17194:	andeq	r7, r1, ip, asr #4
   17198:	andeq	r7, r1, ip, ror r2
   1719c:	andeq	r7, r1, ip, ror r2
   171a0:	andeq	r7, r1, ip, ror r2
   171a4:	andeq	r7, r1, ip, asr #4
   171a8:	andeq	r7, r1, ip, ror r2
   171ac:	andeq	r7, r1, ip, asr #4
   171b0:	andeq	r7, r1, ip, ror r2
   171b4:	andeq	r7, r1, ip, ror r2
   171b8:	andeq	r7, r1, ip, asr #4
   171bc:	andeq	r7, r1, ip, ror r2
   171c0:	andeq	r7, r1, ip, ror r2
   171c4:	andeq	r7, r1, ip, ror r2
   171c8:	andeq	r7, r1, ip, asr #4
   171cc:	andeq	r7, r1, ip, ror r2
   171d0:	andeq	r7, r1, ip, ror r2
   171d4:	andeq	r7, r1, ip, ror r2
   171d8:	andeq	r7, r1, ip, ror r2
   171dc:	andeq	r7, r1, ip, asr #4
   171e0:	andeq	r7, r1, ip, asr #4
   171e4:	andeq	r7, r1, ip, ror r2
   171e8:	andeq	r7, r1, ip, ror r2
   171ec:	andeq	r7, r1, ip, ror r2
   171f0:	andeq	r7, r1, ip, ror r2
   171f4:	andeq	r7, r1, ip, ror r2
   171f8:	andeq	r7, r1, ip, ror r2
   171fc:	andeq	r7, r1, ip, ror r2
   17200:	andeq	r7, r1, ip, ror r2
   17204:	andeq	r7, r1, ip, ror r2
   17208:	andeq	r7, r1, ip, ror r2
   1720c:	andeq	r7, r1, ip, ror r2
   17210:	andeq	r7, r1, ip, ror r2
   17214:	andeq	r7, r1, ip, asr #4
   17218:	andeq	r7, r1, ip, ror r2
   1721c:	andeq	r7, r1, ip, ror r2
   17220:	andeq	r7, r1, ip, ror r2
   17224:	andeq	r7, r1, ip, asr #4
   17228:	andeq	r7, r1, ip, ror r2
   1722c:	andeq	r7, r1, ip, asr #4
   17230:	andeq	r7, r1, ip, ror r2
   17234:	andeq	r7, r1, ip, ror r2
   17238:	andeq	r7, r1, ip, ror r2
   1723c:	andeq	r7, r1, ip, ror r2
   17240:	andeq	r7, r1, ip, ror r2
   17244:	andeq	r7, r1, ip, ror r2
   17248:	andeq	r7, r1, ip, asr #4
   1724c:	mov	r1, #48	; 0x30
   17250:	ldr	r0, [sp, #88]	; 0x58
   17254:	bl	10e50 <strchr@plt>
   17258:	cmp	r0, #0
   1725c:	beq	17d6c <__assert_fail@plt+0x6e38>
   17260:	ldrb	r3, [r9, #1]
   17264:	cmp	r3, #68	; 0x44
   17268:	beq	17d4c <__assert_fail@plt+0x6e18>
   1726c:	cmp	r3, #105	; 0x69
   17270:	beq	17d1c <__assert_fail@plt+0x6de8>
   17274:	cmp	r3, #66	; 0x42
   17278:	beq	17d4c <__assert_fail@plt+0x6e18>
   1727c:	ldr	r3, [pc, #2948]	; 17e08 <__assert_fail@plt+0x6ed4>
   17280:	mvn	r2, #0
   17284:	mov	r1, #1024	; 0x400
   17288:	mov	lr, #0
   1728c:	strd	r2, [sp]
   17290:	mov	r3, #1
   17294:	str	r3, [sp, #12]
   17298:	sub	sl, sl, #66	; 0x42
   1729c:	cmp	sl, #53	; 0x35
   172a0:	ldrls	pc, [pc, sl, lsl #2]
   172a4:	b	17cd8 <__assert_fail@plt+0x6da4>
   172a8:	andeq	r7, r1, r8, lsr #25
   172ac:	ldrdeq	r7, [r1], -r8
   172b0:	ldrdeq	r7, [r1], -r8
   172b4:	andeq	r7, r1, r4, lsr #22
   172b8:	ldrdeq	r7, [r1], -r8
   172bc:	andeq	r7, r1, r0, ror #20
   172c0:	ldrdeq	r7, [r1], -r8
   172c4:	ldrdeq	r7, [r1], -r8
   172c8:	ldrdeq	r7, [r1], -r8
   172cc:	andeq	r7, r1, r4, ror #25
   172d0:	ldrdeq	r7, [r1], -r8
   172d4:	andeq	r7, r1, r0, lsl #7
   172d8:	ldrdeq	r7, [r1], -r8
   172dc:	ldrdeq	r7, [r1], -r8
   172e0:	andeq	r7, r1, ip, lsl #8
   172e4:	ldrdeq	r7, [r1], -r8
   172e8:	ldrdeq	r7, [r1], -r8
   172ec:	ldrdeq	r7, [r1], -r8
   172f0:	andeq	r7, r1, ip, lsl #15
   172f4:	ldrdeq	r7, [r1], -r8
   172f8:	ldrdeq	r7, [r1], -r8
   172fc:	ldrdeq	r7, [r1], -r8
   17300:	ldrdeq	r7, [r1], -r8
   17304:	andeq	r7, r1, r4, ror #10
   17308:	andeq	r7, r1, r0, asr #17
   1730c:	ldrdeq	r7, [r1], -r8
   17310:	ldrdeq	r7, [r1], -r8
   17314:	ldrdeq	r7, [r1], -r8
   17318:	ldrdeq	r7, [r1], -r8
   1731c:	ldrdeq	r7, [r1], -r8
   17320:	ldrdeq	r7, [r1], -r8
   17324:	ldrdeq	r7, [r1], -r8
   17328:	muleq	r1, r0, r8
   1732c:	andeq	r7, r1, r8, lsl #17
   17330:	ldrdeq	r7, [r1], -r8
   17334:	ldrdeq	r7, [r1], -r8
   17338:	ldrdeq	r7, [r1], -r8
   1733c:	andeq	r7, r1, r0, ror #20
   17340:	ldrdeq	r7, [r1], -r8
   17344:	ldrdeq	r7, [r1], -r8
   17348:	ldrdeq	r7, [r1], -r8
   1734c:	andeq	r7, r1, r4, ror #25
   17350:	ldrdeq	r7, [r1], -r8
   17354:	andeq	r7, r1, r0, lsl #7
   17358:	ldrdeq	r7, [r1], -r8
   1735c:	ldrdeq	r7, [r1], -r8
   17360:	ldrdeq	r7, [r1], -r8
   17364:	ldrdeq	r7, [r1], -r8
   17368:	ldrdeq	r7, [r1], -r8
   1736c:	ldrdeq	r7, [r1], -r8
   17370:	andeq	r7, r1, ip, lsl #15
   17374:	ldrdeq	r7, [r1], -r8
   17378:	ldrdeq	r7, [r1], -r8
   1737c:	andeq	r7, r1, ip, ror #16
   17380:	mul	r0, r6, lr
   17384:	ldrd	sl, [sp]
   17388:	umull	r2, r3, r6, r1
   1738c:	mla	r0, r1, r7, r0
   17390:	cmp	r7, fp
   17394:	cmpeq	r6, sl
   17398:	add	r3, r0, r3
   1739c:	mvnhi	r3, #0
   173a0:	mvnhi	r2, #0
   173a4:	mul	r6, r1, r3
   173a8:	umull	r0, r1, r1, r2
   173ac:	mla	lr, lr, r2, r6
   173b0:	ldrd	r6, [sp]
   173b4:	movhi	ip, #1
   173b8:	movls	ip, #0
   173bc:	cmp	r7, r3
   173c0:	cmpeq	r6, r2
   173c4:	mvncc	r0, #0
   173c8:	add	r1, lr, r1
   173cc:	mov	sl, r6
   173d0:	movcc	r1, r0
   173d4:	mov	fp, r7
   173d8:	cmp	fp, r3
   173dc:	cmpeq	sl, r2
   173e0:	mov	r6, r0
   173e4:	mov	r7, r1
   173e8:	orrcc	ip, ip, #1
   173ec:	ldr	r2, [sp, #12]
   173f0:	orr	r4, r4, ip
   173f4:	add	r3, r9, r2
   173f8:	str	r3, [r5]
   173fc:	ldrb	r3, [r9, r2]
   17400:	cmp	r3, #0
   17404:	orrne	r4, r4, #2
   17408:	b	17114 <__assert_fail@plt+0x61e0>
   1740c:	ldrd	sl, [sp]
   17410:	umull	r2, r3, r6, r1
   17414:	mul	r0, r6, lr
   17418:	cmp	r7, fp
   1741c:	cmpeq	r6, sl
   17420:	mvnhi	r2, #0
   17424:	mla	r0, r1, r7, r0
   17428:	umull	sl, fp, r2, r1
   1742c:	add	r3, r0, r3
   17430:	mul	r0, lr, r2
   17434:	mvnhi	r3, #0
   17438:	strd	sl, [sp, #16]
   1743c:	ldrd	sl, [sp]
   17440:	mla	r0, r1, r3, r0
   17444:	ldr	ip, [sp, #20]
   17448:	cmp	r3, fp
   1744c:	add	r0, r0, ip
   17450:	cmpeq	r2, sl
   17454:	str	r0, [sp, #20]
   17458:	bls	17470 <__assert_fail@plt+0x653c>
   1745c:	mvn	sl, #0
   17460:	mvn	fp, #0
   17464:	strd	sl, [sp, #16]
   17468:	ldr	r0, [sp, #20]
   1746c:	ldrd	sl, [sp]
   17470:	cmp	r7, fp
   17474:	cmpeq	r6, sl
   17478:	mul	r0, r1, r0
   1747c:	ldrd	r6, [sp, #16]
   17480:	mla	ip, lr, r6, r0
   17484:	mov	r0, r6
   17488:	movhi	r0, #1
   1748c:	movls	r0, #0
   17490:	cmp	r3, fp
   17494:	cmpeq	r2, sl
   17498:	ldrd	r2, [sp, #16]
   1749c:	umull	r6, r7, r1, r6
   174a0:	orrhi	r0, r0, #1
   174a4:	cmp	fp, r3
   174a8:	cmpeq	sl, r2
   174ac:	add	r7, ip, r7
   174b0:	bcc	17dbc <__assert_fail@plt+0x6e88>
   174b4:	mov	sl, r6
   174b8:	mov	fp, r7
   174bc:	strd	r6, [sp, #24]
   174c0:	mul	r3, r1, fp
   174c4:	umull	r6, r7, r1, sl
   174c8:	mla	ip, lr, sl, r3
   174cc:	ldrd	sl, [sp]
   174d0:	ldrd	r2, [sp, #16]
   174d4:	add	r7, ip, r7
   174d8:	cmp	fp, r3
   174dc:	cmpeq	sl, r2
   174e0:	mov	r3, fp
   174e4:	mov	r2, sl
   174e8:	ldrd	sl, [sp, #24]
   174ec:	orrcc	r0, r0, #1
   174f0:	str	r0, [sp, #16]
   174f4:	cmp	r3, fp
   174f8:	cmpeq	r2, sl
   174fc:	bcs	17a54 <__assert_fail@plt+0x6b20>
   17500:	mvn	r2, #0
   17504:	mvn	r3, #0
   17508:	mul	ip, lr, r2
   1750c:	ldrd	sl, [sp]
   17510:	mla	ip, r1, r3, ip
   17514:	umull	r6, r7, r2, r1
   17518:	ldrd	r0, [sp, #24]
   1751c:	add	r7, ip, r7
   17520:	cmp	fp, r1
   17524:	ldr	r1, [sp, #16]
   17528:	cmpeq	sl, r0
   1752c:	orrcc	r1, r1, #1
   17530:	cmp	r3, fp
   17534:	cmpeq	r2, sl
   17538:	mvnhi	r0, #0
   1753c:	movls	ip, r7
   17540:	movhi	ip, r0
   17544:	movls	r0, r6
   17548:	cmp	r3, fp
   1754c:	cmpeq	r2, sl
   17550:	mov	r7, ip
   17554:	mov	r6, r0
   17558:	movls	ip, r1
   1755c:	orrhi	ip, r1, #1
   17560:	b	173ec <__assert_fail@plt+0x64b8>
   17564:	ldrd	sl, [sp]
   17568:	umull	r2, r3, r6, r1
   1756c:	mul	r0, r6, lr
   17570:	cmp	r7, fp
   17574:	cmpeq	r6, sl
   17578:	mvnhi	r2, #0
   1757c:	mla	r0, r1, r7, r0
   17580:	umull	sl, fp, r2, r1
   17584:	add	r3, r0, r3
   17588:	mul	r0, lr, r2
   1758c:	mvnhi	r3, #0
   17590:	strd	sl, [sp, #16]
   17594:	ldrd	sl, [sp]
   17598:	mla	r0, r1, r3, r0
   1759c:	ldr	ip, [sp, #20]
   175a0:	cmp	r3, fp
   175a4:	add	r0, r0, ip
   175a8:	cmpeq	r2, sl
   175ac:	str	r0, [sp, #20]
   175b0:	mvnhi	sl, #0
   175b4:	mvnhi	fp, #0
   175b8:	strdhi	sl, [sp, #16]
   175bc:	ldrdhi	sl, [sp]
   175c0:	ldr	r0, [sp, #16]
   175c4:	cmp	r3, fp
   175c8:	ldr	r3, [sp, #20]
   175cc:	mul	r0, lr, r0
   175d0:	cmpeq	r2, sl
   175d4:	mla	r0, r1, r3, r0
   175d8:	ldr	r3, [sp, #16]
   175dc:	umull	r2, r3, r3, r1
   175e0:	strd	r2, [sp, #24]
   175e4:	movhi	r3, #1
   175e8:	movls	r3, #0
   175ec:	cmp	r7, fp
   175f0:	cmpeq	r6, sl
   175f4:	ldrd	r6, [sp, #16]
   175f8:	ldr	r2, [sp, #28]
   175fc:	movls	ip, r3
   17600:	orrhi	ip, r3, #1
   17604:	cmp	r7, fp
   17608:	add	r2, r0, r2
   1760c:	cmpeq	r6, sl
   17610:	str	r2, [sp, #28]
   17614:	mvnhi	r2, #0
   17618:	mvnhi	r3, #0
   1761c:	strdhi	r2, [sp, #24]
   17620:	ldrd	r6, [sp, #24]
   17624:	mul	r2, r1, r7
   17628:	umull	sl, fp, r1, r6
   1762c:	mla	r3, lr, r6, r2
   17630:	ldrd	r6, [sp]
   17634:	str	r3, [sp, #32]
   17638:	ldrd	r2, [sp, #16]
   1763c:	cmp	r3, r7
   17640:	cmpeq	r2, r6
   17644:	ldrd	r2, [sp, #24]
   17648:	orrhi	ip, ip, #1
   1764c:	cmp	r3, r7
   17650:	ldr	r3, [sp, #32]
   17654:	cmpeq	r2, r6
   17658:	add	r2, r3, fp
   1765c:	mov	fp, r2
   17660:	bhi	17da4 <__assert_fail@plt+0x6e70>
   17664:	strd	sl, [sp, #16]
   17668:	mul	r2, r1, fp
   1766c:	umull	r6, r7, r1, sl
   17670:	mla	r3, lr, sl, r2
   17674:	ldrd	sl, [sp]
   17678:	str	r3, [sp, #32]
   1767c:	ldrd	r2, [sp, #24]
   17680:	cmp	r3, fp
   17684:	cmpeq	r2, sl
   17688:	ldrd	r2, [sp, #16]
   1768c:	orrhi	ip, ip, #1
   17690:	cmp	fp, r3
   17694:	ldr	r3, [sp, #32]
   17698:	cmpeq	sl, r2
   1769c:	add	r2, r3, r7
   176a0:	mov	r7, r2
   176a4:	mvncc	r7, #0
   176a8:	mvncc	r6, #0
   176ac:	mul	r2, r1, r7
   176b0:	mov	sl, r6
   176b4:	strd	r6, [sp, #24]
   176b8:	mla	r0, lr, sl, r2
   176bc:	ldrd	r2, [sp, #16]
   176c0:	ldrd	sl, [sp]
   176c4:	umull	r6, r7, r1, r6
   176c8:	cmp	fp, r3
   176cc:	cmpeq	sl, r2
   176d0:	mov	r3, fp
   176d4:	mov	r2, sl
   176d8:	ldrd	sl, [sp, #24]
   176dc:	orrcc	ip, ip, #1
   176e0:	add	r7, r0, r7
   176e4:	cmp	r3, fp
   176e8:	cmpeq	r2, sl
   176ec:	mvncc	r6, #0
   176f0:	mvncc	r7, #0
   176f4:	umull	sl, fp, r1, r6
   176f8:	mul	r3, r1, r7
   176fc:	strd	sl, [sp, #16]
   17700:	mla	r0, lr, r6, r3
   17704:	ldrd	sl, [sp, #24]
   17708:	ldrd	r2, [sp]
   1770c:	cmp	r3, fp
   17710:	cmpeq	r2, sl
   17714:	orrcc	ip, ip, #1
   17718:	cmp	r3, r7
   1771c:	ldr	r3, [sp, #20]
   17720:	cmpeq	r2, r6
   17724:	add	r3, r0, r3
   17728:	str	r3, [sp, #20]
   1772c:	mvncc	r2, #0
   17730:	mvncc	r3, #0
   17734:	ldrdcs	r2, [sp, #16]
   17738:	ldrd	sl, [sp]
   1773c:	mul	r0, r1, r3
   17740:	cmp	fp, r7
   17744:	str	r0, [sp, #16]
   17748:	cmpeq	sl, r6
   1774c:	ldr	r6, [sp, #16]
   17750:	umull	r0, r1, r1, r2
   17754:	mla	lr, lr, r2, r6
   17758:	orrcc	ip, ip, #1
   1775c:	cmp	r3, fp
   17760:	cmpeq	r2, sl
   17764:	add	r1, lr, r1
   17768:	bls	17774 <__assert_fail@plt+0x6840>
   1776c:	mvn	r0, #0
   17770:	mov	r1, r0
   17774:	cmp	r3, fp
   17778:	cmpeq	r2, sl
   1777c:	mov	r6, r0
   17780:	mov	r7, r1
   17784:	orrhi	ip, ip, #1
   17788:	b	173ec <__assert_fail@plt+0x64b8>
   1778c:	ldrd	sl, [sp]
   17790:	umull	r2, r3, r6, r1
   17794:	mul	r0, r6, lr
   17798:	cmp	r7, fp
   1779c:	cmpeq	r6, sl
   177a0:	mvnhi	r2, #0
   177a4:	mla	r0, r1, r7, r0
   177a8:	umull	sl, fp, r1, r2
   177ac:	add	r3, r0, r3
   177b0:	mvnhi	r3, #0
   177b4:	strd	sl, [sp, #16]
   177b8:	mul	r0, r1, r3
   177bc:	ldrd	sl, [sp]
   177c0:	mla	r0, lr, r2, r0
   177c4:	ldr	ip, [sp, #20]
   177c8:	cmp	fp, r3
   177cc:	add	r0, r0, ip
   177d0:	cmpeq	sl, r2
   177d4:	str	r0, [sp, #20]
   177d8:	mvncc	sl, #0
   177dc:	mvncc	fp, #0
   177e0:	strdcc	sl, [sp, #16]
   177e4:	ldrdcc	sl, [sp]
   177e8:	ldr	r0, [sp, #16]
   177ec:	cmp	fp, r3
   177f0:	cmpeq	sl, r2
   177f4:	mul	r0, lr, r0
   177f8:	ldr	r2, [sp, #20]
   177fc:	ldr	r3, [sp, #16]
   17800:	movcc	ip, #1
   17804:	movcs	ip, #0
   17808:	cmp	r7, fp
   1780c:	cmpeq	r6, sl
   17810:	ldrd	r6, [sp, #16]
   17814:	mla	r0, r1, r2, r0
   17818:	umull	r2, r3, r3, r1
   1781c:	orrhi	ip, ip, #1
   17820:	cmp	r7, fp
   17824:	cmpeq	r6, sl
   17828:	add	r3, r0, r3
   1782c:	mvnhi	r3, #0
   17830:	mvnhi	r2, #0
   17834:	mul	r0, r1, r3
   17838:	cmp	r7, fp
   1783c:	str	r0, [sp, #24]
   17840:	cmpeq	r6, sl
   17844:	ldr	r6, [sp, #24]
   17848:	umull	r0, r1, r1, r2
   1784c:	mla	lr, lr, r2, r6
   17850:	orrhi	ip, ip, #1
   17854:	cmp	fp, r3
   17858:	cmpeq	sl, r2
   1785c:	mvncc	r0, #0
   17860:	add	r1, lr, r1
   17864:	movcc	r1, r0
   17868:	b	173d8 <__assert_fail@plt+0x64a4>
   1786c:	cmp	r6, #0
   17870:	sbcs	r3, r7, #0
   17874:	blt	17d0c <__assert_fail@plt+0x6dd8>
   17878:	adds	r6, r6, r6
   1787c:	adc	r7, r7, r7
   17880:	mov	ip, #0
   17884:	b	173ec <__assert_fail@plt+0x64b8>
   17888:	mov	ip, #0
   1788c:	b	173ec <__assert_fail@plt+0x64b8>
   17890:	ldr	r3, [pc, #1396]	; 17e0c <__assert_fail@plt+0x6ed8>
   17894:	mvn	r2, #0
   17898:	cmp	r7, r3
   1789c:	cmpeq	r6, r2
   178a0:	bhi	17d0c <__assert_fail@plt+0x6dd8>
   178a4:	lsl	r3, r7, #9
   178a8:	orr	r3, r3, r6, lsr #23
   178ac:	lsl	r2, r6, #9
   178b0:	mov	r6, r2
   178b4:	mov	r7, r3
   178b8:	mov	ip, #0
   178bc:	b	173ec <__assert_fail@plt+0x64b8>
   178c0:	ldrd	sl, [sp]
   178c4:	umull	r2, r3, r6, r1
   178c8:	mul	r0, r6, lr
   178cc:	cmp	r7, fp
   178d0:	cmpeq	r6, sl
   178d4:	mvnhi	r2, #0
   178d8:	mla	r0, r1, r7, r0
   178dc:	umull	sl, fp, r2, r1
   178e0:	add	r3, r0, r3
   178e4:	mul	r0, lr, r2
   178e8:	mvnhi	r3, #0
   178ec:	strd	sl, [sp, #16]
   178f0:	ldrd	sl, [sp]
   178f4:	mla	r0, r1, r3, r0
   178f8:	ldr	ip, [sp, #20]
   178fc:	cmp	r3, fp
   17900:	add	r0, r0, ip
   17904:	cmpeq	r2, sl
   17908:	str	r0, [sp, #20]
   1790c:	mvnhi	sl, #0
   17910:	mvnhi	fp, #0
   17914:	strdhi	sl, [sp, #16]
   17918:	ldrdhi	sl, [sp]
   1791c:	ldr	r0, [sp, #16]
   17920:	cmp	r3, fp
   17924:	ldr	r3, [sp, #20]
   17928:	mul	r0, lr, r0
   1792c:	cmpeq	r2, sl
   17930:	mla	r0, r1, r3, r0
   17934:	ldr	r3, [sp, #16]
   17938:	umull	r2, r3, r3, r1
   1793c:	strd	r2, [sp, #24]
   17940:	movhi	r3, #1
   17944:	movls	r3, #0
   17948:	cmp	r7, fp
   1794c:	cmpeq	r6, sl
   17950:	ldrd	r6, [sp, #16]
   17954:	ldr	r2, [sp, #28]
   17958:	movls	ip, r3
   1795c:	orrhi	ip, r3, #1
   17960:	cmp	r7, fp
   17964:	add	r2, r0, r2
   17968:	cmpeq	r6, sl
   1796c:	str	r2, [sp, #28]
   17970:	mvnhi	r2, #0
   17974:	mvnhi	r3, #0
   17978:	strdhi	r2, [sp, #24]
   1797c:	ldrd	r6, [sp, #24]
   17980:	mul	r2, lr, r6
   17984:	umull	sl, fp, r6, r1
   17988:	mla	r3, r1, r7, r2
   1798c:	ldrd	r6, [sp]
   17990:	str	r3, [sp, #32]
   17994:	ldrd	r2, [sp, #16]
   17998:	cmp	r3, r7
   1799c:	cmpeq	r2, r6
   179a0:	ldrd	r2, [sp, #24]
   179a4:	orrhi	ip, ip, #1
   179a8:	cmp	r3, r7
   179ac:	ldr	r3, [sp, #32]
   179b0:	cmpeq	r2, r6
   179b4:	add	r2, r3, fp
   179b8:	mov	fp, r2
   179bc:	bhi	17dd4 <__assert_fail@plt+0x6ea0>
   179c0:	strd	sl, [sp, #16]
   179c4:	mul	r2, lr, sl
   179c8:	umull	r6, r7, sl, r1
   179cc:	mla	r3, r1, fp, r2
   179d0:	ldrd	sl, [sp]
   179d4:	str	r3, [sp, #32]
   179d8:	ldrd	r2, [sp, #24]
   179dc:	cmp	r3, fp
   179e0:	cmpeq	r2, sl
   179e4:	ldrd	r2, [sp, #16]
   179e8:	orrhi	ip, ip, #1
   179ec:	cmp	r3, fp
   179f0:	ldr	r3, [sp, #32]
   179f4:	cmpeq	r2, sl
   179f8:	add	r2, r3, r7
   179fc:	mov	r7, r2
   17a00:	mvnhi	r7, #0
   17a04:	mvnhi	r6, #0
   17a08:	mul	r2, r1, r7
   17a0c:	mov	sl, r6
   17a10:	strd	r6, [sp, #24]
   17a14:	mla	r0, lr, sl, r2
   17a18:	ldrd	sl, [sp]
   17a1c:	ldrd	r2, [sp, #16]
   17a20:	umull	r6, r7, r1, r6
   17a24:	cmp	r3, fp
   17a28:	cmpeq	r2, sl
   17a2c:	mov	r3, ip
   17a30:	orrhi	r3, r3, #1
   17a34:	mov	r2, sl
   17a38:	str	r3, [sp, #16]
   17a3c:	mov	r3, fp
   17a40:	ldrd	sl, [sp, #24]
   17a44:	add	r7, r0, r7
   17a48:	cmp	r3, fp
   17a4c:	cmpeq	r2, sl
   17a50:	bcc	17500 <__assert_fail@plt+0x65cc>
   17a54:	mov	r2, r6
   17a58:	mov	r3, r7
   17a5c:	b	17508 <__assert_fail@plt+0x65d4>
   17a60:	ldrd	sl, [sp]
   17a64:	umull	r2, r3, r6, r1
   17a68:	mul	r0, r6, lr
   17a6c:	cmp	r7, fp
   17a70:	cmpeq	r6, sl
   17a74:	mvnhi	r2, #0
   17a78:	mla	r0, r1, r7, r0
   17a7c:	umull	sl, fp, r2, r1
   17a80:	add	r3, r0, r3
   17a84:	mul	r0, lr, r2
   17a88:	mvnhi	r3, #0
   17a8c:	strd	sl, [sp, #16]
   17a90:	ldrd	sl, [sp]
   17a94:	mla	r0, r1, r3, r0
   17a98:	ldr	ip, [sp, #20]
   17a9c:	cmp	r3, fp
   17aa0:	add	r0, r0, ip
   17aa4:	cmpeq	r2, sl
   17aa8:	str	r0, [sp, #20]
   17aac:	mvnhi	sl, #0
   17ab0:	mvnhi	fp, #0
   17ab4:	strdhi	sl, [sp, #16]
   17ab8:	ldrdhi	sl, [sp]
   17abc:	ldr	r0, [sp, #16]
   17ac0:	cmp	r3, fp
   17ac4:	ldr	ip, [sp, #20]
   17ac8:	mul	r0, lr, r0
   17acc:	ldr	r3, [sp, #16]
   17ad0:	cmpeq	r2, sl
   17ad4:	mla	r0, r1, ip, r0
   17ad8:	umull	r2, r3, r3, r1
   17adc:	movhi	r1, #1
   17ae0:	movls	r1, #0
   17ae4:	cmp	r7, fp
   17ae8:	cmpeq	r6, sl
   17aec:	ldrd	r6, [sp, #16]
   17af0:	movls	ip, r1
   17af4:	orrhi	ip, r1, #1
   17af8:	cmp	r7, fp
   17afc:	cmpeq	r6, sl
   17b00:	mvnhi	r2, #0
   17b04:	add	r3, r0, r3
   17b08:	movhi	r3, r2
   17b0c:	cmp	r7, fp
   17b10:	cmpeq	r6, sl
   17b14:	mov	r7, r3
   17b18:	mov	r6, r2
   17b1c:	orrhi	ip, ip, #1
   17b20:	b	173ec <__assert_fail@plt+0x64b8>
   17b24:	ldrd	sl, [sp]
   17b28:	umull	r2, r3, r6, r1
   17b2c:	mul	r0, r6, lr
   17b30:	cmp	r7, fp
   17b34:	cmpeq	r6, sl
   17b38:	mvnhi	r2, #0
   17b3c:	mla	r0, r1, r7, r0
   17b40:	umull	sl, fp, r1, r2
   17b44:	add	r3, r0, r3
   17b48:	mvnhi	r3, #0
   17b4c:	strd	sl, [sp, #16]
   17b50:	mul	r0, r1, r3
   17b54:	ldrd	sl, [sp]
   17b58:	mla	r0, lr, r2, r0
   17b5c:	ldr	ip, [sp, #20]
   17b60:	cmp	fp, r3
   17b64:	add	r0, r0, ip
   17b68:	cmpeq	sl, r2
   17b6c:	str	r0, [sp, #20]
   17b70:	mvncc	sl, #0
   17b74:	mvncc	fp, #0
   17b78:	strdcc	sl, [sp, #16]
   17b7c:	ldrdcc	sl, [sp]
   17b80:	ldr	r0, [sp, #16]
   17b84:	cmp	fp, r3
   17b88:	ldr	r3, [sp, #20]
   17b8c:	mul	r0, lr, r0
   17b90:	cmpeq	sl, r2
   17b94:	mla	r0, r1, r3, r0
   17b98:	ldr	r3, [sp, #16]
   17b9c:	umull	r2, r3, r3, r1
   17ba0:	strd	r2, [sp, #24]
   17ba4:	movcc	r3, #1
   17ba8:	movcs	r3, #0
   17bac:	cmp	r7, fp
   17bb0:	cmpeq	r6, sl
   17bb4:	movls	ip, r3
   17bb8:	orrhi	ip, r3, #1
   17bbc:	ldrd	r2, [sp, #16]
   17bc0:	cmp	r3, fp
   17bc4:	ldr	r3, [sp, #28]
   17bc8:	cmpeq	r2, sl
   17bcc:	add	r3, r0, r3
   17bd0:	str	r3, [sp, #28]
   17bd4:	bhi	17d8c <__assert_fail@plt+0x6e58>
   17bd8:	ldrd	r2, [sp, #24]
   17bdc:	mov	sl, r2
   17be0:	mov	fp, r3
   17be4:	mul	r2, lr, sl
   17be8:	umull	r6, r7, sl, r1
   17bec:	mla	r0, r1, fp, r2
   17bf0:	ldrd	r2, [sp]
   17bf4:	add	r7, r0, r7
   17bf8:	mov	sl, r2
   17bfc:	mov	fp, r3
   17c00:	strd	r2, [sp, #32]
   17c04:	ldrd	r2, [sp, #16]
   17c08:	cmp	r3, fp
   17c0c:	cmpeq	r2, sl
   17c10:	ldrd	r2, [sp, #32]
   17c14:	ldrd	sl, [sp, #24]
   17c18:	orrhi	ip, ip, #1
   17c1c:	cmp	fp, r3
   17c20:	cmpeq	sl, r2
   17c24:	mvnhi	r6, #0
   17c28:	mvnhi	r7, #0
   17c2c:	umull	sl, fp, r6, r1
   17c30:	mul	r3, lr, r6
   17c34:	strd	sl, [sp, #16]
   17c38:	mla	r0, r1, r7, r3
   17c3c:	ldrd	sl, [sp, #24]
   17c40:	ldrd	r2, [sp]
   17c44:	cmp	fp, r3
   17c48:	cmpeq	sl, r2
   17c4c:	orrhi	ip, ip, #1
   17c50:	cmp	r7, r3
   17c54:	ldr	r3, [sp, #20]
   17c58:	cmpeq	r6, r2
   17c5c:	add	r3, r0, r3
   17c60:	str	r3, [sp, #20]
   17c64:	mvnhi	r2, #0
   17c68:	mvnhi	r3, #0
   17c6c:	ldrdls	r2, [sp, #16]
   17c70:	ldrd	sl, [sp]
   17c74:	mul	r0, r1, r3
   17c78:	cmp	r7, fp
   17c7c:	str	r0, [sp, #16]
   17c80:	cmpeq	r6, sl
   17c84:	ldr	r6, [sp, #16]
   17c88:	umull	r0, r1, r1, r2
   17c8c:	mla	lr, lr, r2, r6
   17c90:	orrhi	ip, ip, #1
   17c94:	cmp	r3, fp
   17c98:	cmpeq	r2, sl
   17c9c:	add	r1, lr, r1
   17ca0:	bls	17774 <__assert_fail@plt+0x6840>
   17ca4:	b	1776c <__assert_fail@plt+0x6838>
   17ca8:	ldr	r3, [pc, #344]	; 17e08 <__assert_fail@plt+0x6ed4>
   17cac:	mvn	r2, #0
   17cb0:	cmp	r7, r3
   17cb4:	cmpeq	r6, r2
   17cb8:	bhi	17d0c <__assert_fail@plt+0x6dd8>
   17cbc:	lsl	r3, r7, #10
   17cc0:	orr	r3, r3, r6, lsr #22
   17cc4:	lsl	r2, r6, #10
   17cc8:	mov	r6, r2
   17ccc:	mov	r7, r3
   17cd0:	mov	ip, #0
   17cd4:	b	173ec <__assert_fail@plt+0x64b8>
   17cd8:	strd	r6, [r8]
   17cdc:	orr	r4, r4, #2
   17ce0:	b	170bc <__assert_fail@plt+0x6188>
   17ce4:	ldrd	r2, [sp]
   17ce8:	cmp	r7, r3
   17cec:	cmpeq	r6, r2
   17cf0:	bhi	17d0c <__assert_fail@plt+0x6dd8>
   17cf4:	mul	r3, r6, lr
   17cf8:	mov	ip, #0
   17cfc:	mla	r3, r1, r7, r3
   17d00:	umull	r6, r7, r6, r1
   17d04:	add	r7, r3, r7
   17d08:	b	173ec <__assert_fail@plt+0x64b8>
   17d0c:	mvn	r6, #0
   17d10:	mvn	r7, #0
   17d14:	mov	ip, #1
   17d18:	b	173ec <__assert_fail@plt+0x64b8>
   17d1c:	ldrb	r3, [r9, #2]
   17d20:	mvn	r2, #0
   17d24:	mov	r1, #1024	; 0x400
   17d28:	cmp	r3, #66	; 0x42
   17d2c:	ldr	r3, [pc, #212]	; 17e08 <__assert_fail@plt+0x6ed4>
   17d30:	mov	lr, #0
   17d34:	strd	r2, [sp]
   17d38:	moveq	r3, #3
   17d3c:	streq	r3, [sp, #12]
   17d40:	movne	r3, #1
   17d44:	strne	r3, [sp, #12]
   17d48:	b	17298 <__assert_fail@plt+0x6364>
   17d4c:	add	r3, pc, #172	; 0xac
   17d50:	ldrd	r2, [r3]
   17d54:	mov	r1, #1000	; 0x3e8
   17d58:	mov	lr, #0
   17d5c:	strd	r2, [sp]
   17d60:	mov	r3, #2
   17d64:	str	r3, [sp, #12]
   17d68:	b	17298 <__assert_fail@plt+0x6364>
   17d6c:	ldr	r3, [pc, #148]	; 17e08 <__assert_fail@plt+0x6ed4>
   17d70:	mvn	r2, #0
   17d74:	mov	lr, r0
   17d78:	strd	r2, [sp]
   17d7c:	mov	r3, #1
   17d80:	mov	r1, #1024	; 0x400
   17d84:	str	r3, [sp, #12]
   17d88:	b	17298 <__assert_fail@plt+0x6364>
   17d8c:	mvn	r2, #0
   17d90:	mvn	r3, #0
   17d94:	mov	sl, r2
   17d98:	strd	r2, [sp, #24]
   17d9c:	mov	fp, r3
   17da0:	b	17be4 <__assert_fail@plt+0x6cb0>
   17da4:	mvn	r2, #0
   17da8:	mvn	r3, #0
   17dac:	mov	sl, r2
   17db0:	strd	r2, [sp, #16]
   17db4:	mov	fp, r3
   17db8:	b	17668 <__assert_fail@plt+0x6734>
   17dbc:	mvn	r2, #0
   17dc0:	mvn	r3, #0
   17dc4:	mov	sl, r2
   17dc8:	strd	r2, [sp, #24]
   17dcc:	mov	fp, r3
   17dd0:	b	174c0 <__assert_fail@plt+0x658c>
   17dd4:	mvn	r2, #0
   17dd8:	mvn	r3, #0
   17ddc:	mov	sl, r2
   17de0:	strd	r2, [sp, #16]
   17de4:	mov	fp, r3
   17de8:	b	179c4 <__assert_fail@plt+0x6a90>
   17dec:	ldr	r3, [pc, #28]	; 17e10 <__assert_fail@plt+0x6edc>
   17df0:	mov	r2, #85	; 0x55
   17df4:	ldr	r1, [pc, #24]	; 17e14 <__assert_fail@plt+0x6ee0>
   17df8:	ldr	r0, [pc, #24]	; 17e18 <__assert_fail@plt+0x6ee4>
   17dfc:	bl	10f34 <__assert_fail@plt>
   17e00:	blmi	ff1c1dc4 <optarg@@GLIBC_2.4+0xff197c6c>
   17e04:	subeq	r8, r1, r7, lsr r9
   17e08:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   17e0c:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   17e10:	andeq	r8, r1, r0, ror pc
   17e14:	andeq	r8, r1, ip, ror pc
   17e18:	andeq	r8, r1, ip, lsl #31
   17e1c:	cmp	r1, #0
   17e20:	cmpne	r0, #0
   17e24:	moveq	r1, #1
   17e28:	moveq	r0, r1
   17e2c:	umull	r2, r3, r0, r1
   17e30:	adds	r3, r3, #0
   17e34:	movne	r3, #1
   17e38:	cmp	r2, #0
   17e3c:	blt	17e4c <__assert_fail@plt+0x6f18>
   17e40:	cmp	r3, #0
   17e44:	bne	17e4c <__assert_fail@plt+0x6f18>
   17e48:	b	10cc4 <calloc@plt>
   17e4c:	push	{r4, lr}
   17e50:	bl	10e5c <__errno_location@plt>
   17e54:	mov	r3, #12
   17e58:	str	r3, [r0]
   17e5c:	mov	r0, #0
   17e60:	pop	{r4, pc}
   17e64:	cmp	r0, #0
   17e68:	moveq	r0, #1
   17e6c:	cmp	r0, #0
   17e70:	blt	17e78 <__assert_fail@plt+0x6f44>
   17e74:	b	10df0 <malloc@plt>
   17e78:	push	{r4, lr}
   17e7c:	bl	10e5c <__errno_location@plt>
   17e80:	mov	r3, #12
   17e84:	str	r3, [r0]
   17e88:	mov	r0, #0
   17e8c:	pop	{r4, pc}
   17e90:	cmp	r0, #0
   17e94:	beq	17eb8 <__assert_fail@plt+0x6f84>
   17e98:	cmp	r1, #0
   17e9c:	push	{lr}		; (str lr, [sp, #-4]!)
   17ea0:	sub	sp, sp, #12
   17ea4:	beq	17ec0 <__assert_fail@plt+0x6f8c>
   17ea8:	blt	17ed8 <__assert_fail@plt+0x6fa4>
   17eac:	add	sp, sp, #12
   17eb0:	pop	{lr}		; (ldr lr, [sp], #4)
   17eb4:	b	10d84 <realloc@plt>
   17eb8:	mov	r0, r1
   17ebc:	b	17e64 <__assert_fail@plt+0x6f30>
   17ec0:	str	r1, [sp, #4]
   17ec4:	bl	17f68 <__assert_fail@plt+0x7034>
   17ec8:	ldr	r3, [sp, #4]
   17ecc:	mov	r0, r3
   17ed0:	add	sp, sp, #12
   17ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ed8:	bl	10e5c <__errno_location@plt>
   17edc:	mov	r2, #12
   17ee0:	mov	r3, #0
   17ee4:	str	r2, [r0]
   17ee8:	b	17ecc <__assert_fail@plt+0x6f98>
   17eec:	push	{r4, r5, r6, lr}
   17ef0:	mov	r4, r0
   17ef4:	bl	10dcc <__fpending@plt>
   17ef8:	ldr	r5, [r4]
   17efc:	and	r5, r5, #32
   17f00:	mov	r6, r0
   17f04:	mov	r0, r4
   17f08:	bl	11b24 <__assert_fail@plt+0xbf0>
   17f0c:	cmp	r5, #0
   17f10:	mov	r4, r0
   17f14:	bne	17f34 <__assert_fail@plt+0x7000>
   17f18:	cmp	r0, #0
   17f1c:	beq	17f2c <__assert_fail@plt+0x6ff8>
   17f20:	cmp	r6, #0
   17f24:	beq	17f50 <__assert_fail@plt+0x701c>
   17f28:	mvn	r4, #0
   17f2c:	mov	r0, r4
   17f30:	pop	{r4, r5, r6, pc}
   17f34:	cmp	r0, #0
   17f38:	bne	17f28 <__assert_fail@plt+0x6ff4>
   17f3c:	bl	10e5c <__errno_location@plt>
   17f40:	str	r4, [r0]
   17f44:	mvn	r4, #0
   17f48:	mov	r0, r4
   17f4c:	pop	{r4, r5, r6, pc}
   17f50:	bl	10e5c <__errno_location@plt>
   17f54:	ldr	r4, [r0]
   17f58:	subs	r4, r4, #9
   17f5c:	mvnne	r4, #0
   17f60:	mov	r0, r4
   17f64:	pop	{r4, r5, r6, pc}
   17f68:	push	{r4, r5, lr}
   17f6c:	sub	sp, sp, #12
   17f70:	mov	r5, r0
   17f74:	bl	10e5c <__errno_location@plt>
   17f78:	mov	r2, #0
   17f7c:	mov	r4, r0
   17f80:	ldr	r3, [r0]
   17f84:	str	r2, [r4]
   17f88:	mov	r0, r5
   17f8c:	str	r3, [sp]
   17f90:	str	r3, [sp, #4]
   17f94:	bl	10d18 <free@plt>
   17f98:	ldr	r3, [r4]
   17f9c:	add	r2, sp, #8
   17fa0:	cmp	r3, #0
   17fa4:	moveq	r3, #4
   17fa8:	movne	r3, #0
   17fac:	add	r3, r2, r3
   17fb0:	ldr	r3, [r3, #-8]
   17fb4:	str	r3, [r4]
   17fb8:	add	sp, sp, #12
   17fbc:	pop	{r4, r5, pc}
   17fc0:	push	{r4, lr}
   17fc4:	mov	r0, #14
   17fc8:	bl	10eec <nl_langinfo@plt>
   17fcc:	cmp	r0, #0
   17fd0:	beq	17fe8 <__assert_fail@plt+0x70b4>
   17fd4:	ldrb	r2, [r0]
   17fd8:	ldr	r3, [pc, #16]	; 17ff0 <__assert_fail@plt+0x70bc>
   17fdc:	cmp	r2, #0
   17fe0:	moveq	r0, r3
   17fe4:	pop	{r4, pc}
   17fe8:	ldr	r0, [pc]	; 17ff0 <__assert_fail@plt+0x70bc>
   17fec:	pop	{r4, pc}
   17ff0:			; <UNDEFINED> instruction: 0x00018fb4
   17ff4:	push	{r4, r5, r6, r7, lr}
   17ff8:	subs	r6, r0, #0
   17ffc:	sub	sp, sp, #12
   18000:	addeq	r6, sp, #4
   18004:	mov	r0, r6
   18008:	mov	r5, r2
   1800c:	mov	r7, r1
   18010:	bl	10dd8 <mbrtowc@plt>
   18014:	cmp	r5, #0
   18018:	cmnne	r0, #3
   1801c:	mov	r4, r0
   18020:	bls	1803c <__assert_fail@plt+0x7108>
   18024:	mov	r0, #0
   18028:	bl	18094 <__assert_fail@plt+0x7160>
   1802c:	cmp	r0, #0
   18030:	moveq	r4, #1
   18034:	ldrbeq	r3, [r7]
   18038:	streq	r3, [r6]
   1803c:	mov	r0, r4
   18040:	add	sp, sp, #12
   18044:	pop	{r4, r5, r6, r7, pc}
   18048:	push	{r4, r5, r6, lr}
   1804c:	subs	r4, r2, #0
   18050:	mov	r6, r0
   18054:	mov	r5, r1
   18058:	beq	18084 <__assert_fail@plt+0x7150>
   1805c:	mov	r1, r4
   18060:	mvn	r0, #0
   18064:	bl	18188 <__assert_fail@plt+0x7254>
   18068:	cmp	r0, r5
   1806c:	bcs	18084 <__assert_fail@plt+0x7150>
   18070:	bl	10e5c <__errno_location@plt>
   18074:	mov	r3, #12
   18078:	str	r3, [r0]
   1807c:	mov	r0, #0
   18080:	pop	{r4, r5, r6, pc}
   18084:	mul	r1, r5, r4
   18088:	mov	r0, r6
   1808c:	pop	{r4, r5, r6, lr}
   18090:	b	17e90 <__assert_fail@plt+0x6f5c>
   18094:	push	{lr}		; (str lr, [sp, #-4]!)
   18098:	sub	sp, sp, #268	; 0x10c
   1809c:	add	r1, sp, #4
   180a0:	ldr	r2, [pc, #60]	; 180e4 <__assert_fail@plt+0x71b0>
   180a4:	bl	180f0 <__assert_fail@plt+0x71bc>
   180a8:	cmp	r0, #0
   180ac:	movne	r0, #0
   180b0:	bne	180dc <__assert_fail@plt+0x71a8>
   180b4:	ldr	r1, [pc, #44]	; 180e8 <__assert_fail@plt+0x71b4>
   180b8:	add	r0, sp, #4
   180bc:	bl	10ce8 <strcmp@plt>
   180c0:	cmp	r0, #0
   180c4:	beq	180dc <__assert_fail@plt+0x71a8>
   180c8:	add	r0, sp, #4
   180cc:	ldr	r1, [pc, #24]	; 180ec <__assert_fail@plt+0x71b8>
   180d0:	bl	10ce8 <strcmp@plt>
   180d4:	adds	r0, r0, #0
   180d8:	movne	r0, #1
   180dc:	add	sp, sp, #268	; 0x10c
   180e0:	pop	{pc}		; (ldr pc, [sp], #4)
   180e4:	andeq	r0, r0, r1, lsl #2
   180e8:			; <UNDEFINED> instruction: 0x00018fbc
   180ec:	andeq	r8, r1, r0, asr #31
   180f0:	push	{r4, r5, r6, lr}
   180f4:	mov	r5, r1
   180f8:	mov	r1, #0
   180fc:	mov	r4, r2
   18100:	bl	10ed4 <setlocale@plt>
   18104:	subs	r6, r0, #0
   18108:	beq	18164 <__assert_fail@plt+0x7230>
   1810c:	bl	10e44 <strlen@plt>
   18110:	cmp	r4, r0
   18114:	bhi	1814c <__assert_fail@plt+0x7218>
   18118:	cmp	r4, #0
   1811c:	bne	18128 <__assert_fail@plt+0x71f4>
   18120:	mov	r0, #34	; 0x22
   18124:	pop	{r4, r5, r6, pc}
   18128:	sub	r4, r4, #1
   1812c:	mov	r1, r6
   18130:	mov	r2, r4
   18134:	mov	r0, r5
   18138:	bl	10d30 <memcpy@plt>
   1813c:	mov	r3, #0
   18140:	strb	r3, [r5, r4]
   18144:	mov	r0, #34	; 0x22
   18148:	pop	{r4, r5, r6, pc}
   1814c:	add	r2, r0, #1
   18150:	mov	r1, r6
   18154:	mov	r0, r5
   18158:	bl	10d30 <memcpy@plt>
   1815c:	mov	r0, #0
   18160:	pop	{r4, r5, r6, pc}
   18164:	cmp	r4, #0
   18168:	beq	18178 <__assert_fail@plt+0x7244>
   1816c:	strb	r6, [r5]
   18170:	mov	r0, #22
   18174:	pop	{r4, r5, r6, pc}
   18178:	mov	r0, #22
   1817c:	pop	{r4, r5, r6, pc}
   18180:	mov	r1, #0
   18184:	b	10ed4 <setlocale@plt>
   18188:	subs	r2, r1, #1
   1818c:	bxeq	lr
   18190:	bcc	18368 <__assert_fail@plt+0x7434>
   18194:	cmp	r0, r1
   18198:	bls	1834c <__assert_fail@plt+0x7418>
   1819c:	tst	r1, r2
   181a0:	beq	18358 <__assert_fail@plt+0x7424>
   181a4:	clz	r3, r0
   181a8:	clz	r2, r1
   181ac:	sub	r3, r2, r3
   181b0:	rsbs	r3, r3, #31
   181b4:	addne	r3, r3, r3, lsl #1
   181b8:	mov	r2, #0
   181bc:	addne	pc, pc, r3, lsl #2
   181c0:	nop			; (mov r0, r0)
   181c4:	cmp	r0, r1, lsl #31
   181c8:	adc	r2, r2, r2
   181cc:	subcs	r0, r0, r1, lsl #31
   181d0:	cmp	r0, r1, lsl #30
   181d4:	adc	r2, r2, r2
   181d8:	subcs	r0, r0, r1, lsl #30
   181dc:	cmp	r0, r1, lsl #29
   181e0:	adc	r2, r2, r2
   181e4:	subcs	r0, r0, r1, lsl #29
   181e8:	cmp	r0, r1, lsl #28
   181ec:	adc	r2, r2, r2
   181f0:	subcs	r0, r0, r1, lsl #28
   181f4:	cmp	r0, r1, lsl #27
   181f8:	adc	r2, r2, r2
   181fc:	subcs	r0, r0, r1, lsl #27
   18200:	cmp	r0, r1, lsl #26
   18204:	adc	r2, r2, r2
   18208:	subcs	r0, r0, r1, lsl #26
   1820c:	cmp	r0, r1, lsl #25
   18210:	adc	r2, r2, r2
   18214:	subcs	r0, r0, r1, lsl #25
   18218:	cmp	r0, r1, lsl #24
   1821c:	adc	r2, r2, r2
   18220:	subcs	r0, r0, r1, lsl #24
   18224:	cmp	r0, r1, lsl #23
   18228:	adc	r2, r2, r2
   1822c:	subcs	r0, r0, r1, lsl #23
   18230:	cmp	r0, r1, lsl #22
   18234:	adc	r2, r2, r2
   18238:	subcs	r0, r0, r1, lsl #22
   1823c:	cmp	r0, r1, lsl #21
   18240:	adc	r2, r2, r2
   18244:	subcs	r0, r0, r1, lsl #21
   18248:	cmp	r0, r1, lsl #20
   1824c:	adc	r2, r2, r2
   18250:	subcs	r0, r0, r1, lsl #20
   18254:	cmp	r0, r1, lsl #19
   18258:	adc	r2, r2, r2
   1825c:	subcs	r0, r0, r1, lsl #19
   18260:	cmp	r0, r1, lsl #18
   18264:	adc	r2, r2, r2
   18268:	subcs	r0, r0, r1, lsl #18
   1826c:	cmp	r0, r1, lsl #17
   18270:	adc	r2, r2, r2
   18274:	subcs	r0, r0, r1, lsl #17
   18278:	cmp	r0, r1, lsl #16
   1827c:	adc	r2, r2, r2
   18280:	subcs	r0, r0, r1, lsl #16
   18284:	cmp	r0, r1, lsl #15
   18288:	adc	r2, r2, r2
   1828c:	subcs	r0, r0, r1, lsl #15
   18290:	cmp	r0, r1, lsl #14
   18294:	adc	r2, r2, r2
   18298:	subcs	r0, r0, r1, lsl #14
   1829c:	cmp	r0, r1, lsl #13
   182a0:	adc	r2, r2, r2
   182a4:	subcs	r0, r0, r1, lsl #13
   182a8:	cmp	r0, r1, lsl #12
   182ac:	adc	r2, r2, r2
   182b0:	subcs	r0, r0, r1, lsl #12
   182b4:	cmp	r0, r1, lsl #11
   182b8:	adc	r2, r2, r2
   182bc:	subcs	r0, r0, r1, lsl #11
   182c0:	cmp	r0, r1, lsl #10
   182c4:	adc	r2, r2, r2
   182c8:	subcs	r0, r0, r1, lsl #10
   182cc:	cmp	r0, r1, lsl #9
   182d0:	adc	r2, r2, r2
   182d4:	subcs	r0, r0, r1, lsl #9
   182d8:	cmp	r0, r1, lsl #8
   182dc:	adc	r2, r2, r2
   182e0:	subcs	r0, r0, r1, lsl #8
   182e4:	cmp	r0, r1, lsl #7
   182e8:	adc	r2, r2, r2
   182ec:	subcs	r0, r0, r1, lsl #7
   182f0:	cmp	r0, r1, lsl #6
   182f4:	adc	r2, r2, r2
   182f8:	subcs	r0, r0, r1, lsl #6
   182fc:	cmp	r0, r1, lsl #5
   18300:	adc	r2, r2, r2
   18304:	subcs	r0, r0, r1, lsl #5
   18308:	cmp	r0, r1, lsl #4
   1830c:	adc	r2, r2, r2
   18310:	subcs	r0, r0, r1, lsl #4
   18314:	cmp	r0, r1, lsl #3
   18318:	adc	r2, r2, r2
   1831c:	subcs	r0, r0, r1, lsl #3
   18320:	cmp	r0, r1, lsl #2
   18324:	adc	r2, r2, r2
   18328:	subcs	r0, r0, r1, lsl #2
   1832c:	cmp	r0, r1, lsl #1
   18330:	adc	r2, r2, r2
   18334:	subcs	r0, r0, r1, lsl #1
   18338:	cmp	r0, r1
   1833c:	adc	r2, r2, r2
   18340:	subcs	r0, r0, r1
   18344:	mov	r0, r2
   18348:	bx	lr
   1834c:	moveq	r0, #1
   18350:	movne	r0, #0
   18354:	bx	lr
   18358:	clz	r2, r1
   1835c:	rsb	r2, r2, #31
   18360:	lsr	r0, r0, r2
   18364:	bx	lr
   18368:	cmp	r0, #0
   1836c:	mvnne	r0, #0
   18370:	b	185d4 <__assert_fail@plt+0x76a0>
   18374:	cmp	r1, #0
   18378:	beq	18368 <__assert_fail@plt+0x7434>
   1837c:	push	{r0, r1, lr}
   18380:	bl	18188 <__assert_fail@plt+0x7254>
   18384:	pop	{r1, r2, lr}
   18388:	mul	r3, r2, r0
   1838c:	sub	r1, r1, r3
   18390:	bx	lr
   18394:	cmp	r1, #0
   18398:	beq	185a4 <__assert_fail@plt+0x7670>
   1839c:	eor	ip, r0, r1
   183a0:	rsbmi	r1, r1, #0
   183a4:	subs	r2, r1, #1
   183a8:	beq	18570 <__assert_fail@plt+0x763c>
   183ac:	movs	r3, r0
   183b0:	rsbmi	r3, r0, #0
   183b4:	cmp	r3, r1
   183b8:	bls	1857c <__assert_fail@plt+0x7648>
   183bc:	tst	r1, r2
   183c0:	beq	1858c <__assert_fail@plt+0x7658>
   183c4:	clz	r2, r3
   183c8:	clz	r0, r1
   183cc:	sub	r2, r0, r2
   183d0:	rsbs	r2, r2, #31
   183d4:	addne	r2, r2, r2, lsl #1
   183d8:	mov	r0, #0
   183dc:	addne	pc, pc, r2, lsl #2
   183e0:	nop			; (mov r0, r0)
   183e4:	cmp	r3, r1, lsl #31
   183e8:	adc	r0, r0, r0
   183ec:	subcs	r3, r3, r1, lsl #31
   183f0:	cmp	r3, r1, lsl #30
   183f4:	adc	r0, r0, r0
   183f8:	subcs	r3, r3, r1, lsl #30
   183fc:	cmp	r3, r1, lsl #29
   18400:	adc	r0, r0, r0
   18404:	subcs	r3, r3, r1, lsl #29
   18408:	cmp	r3, r1, lsl #28
   1840c:	adc	r0, r0, r0
   18410:	subcs	r3, r3, r1, lsl #28
   18414:	cmp	r3, r1, lsl #27
   18418:	adc	r0, r0, r0
   1841c:	subcs	r3, r3, r1, lsl #27
   18420:	cmp	r3, r1, lsl #26
   18424:	adc	r0, r0, r0
   18428:	subcs	r3, r3, r1, lsl #26
   1842c:	cmp	r3, r1, lsl #25
   18430:	adc	r0, r0, r0
   18434:	subcs	r3, r3, r1, lsl #25
   18438:	cmp	r3, r1, lsl #24
   1843c:	adc	r0, r0, r0
   18440:	subcs	r3, r3, r1, lsl #24
   18444:	cmp	r3, r1, lsl #23
   18448:	adc	r0, r0, r0
   1844c:	subcs	r3, r3, r1, lsl #23
   18450:	cmp	r3, r1, lsl #22
   18454:	adc	r0, r0, r0
   18458:	subcs	r3, r3, r1, lsl #22
   1845c:	cmp	r3, r1, lsl #21
   18460:	adc	r0, r0, r0
   18464:	subcs	r3, r3, r1, lsl #21
   18468:	cmp	r3, r1, lsl #20
   1846c:	adc	r0, r0, r0
   18470:	subcs	r3, r3, r1, lsl #20
   18474:	cmp	r3, r1, lsl #19
   18478:	adc	r0, r0, r0
   1847c:	subcs	r3, r3, r1, lsl #19
   18480:	cmp	r3, r1, lsl #18
   18484:	adc	r0, r0, r0
   18488:	subcs	r3, r3, r1, lsl #18
   1848c:	cmp	r3, r1, lsl #17
   18490:	adc	r0, r0, r0
   18494:	subcs	r3, r3, r1, lsl #17
   18498:	cmp	r3, r1, lsl #16
   1849c:	adc	r0, r0, r0
   184a0:	subcs	r3, r3, r1, lsl #16
   184a4:	cmp	r3, r1, lsl #15
   184a8:	adc	r0, r0, r0
   184ac:	subcs	r3, r3, r1, lsl #15
   184b0:	cmp	r3, r1, lsl #14
   184b4:	adc	r0, r0, r0
   184b8:	subcs	r3, r3, r1, lsl #14
   184bc:	cmp	r3, r1, lsl #13
   184c0:	adc	r0, r0, r0
   184c4:	subcs	r3, r3, r1, lsl #13
   184c8:	cmp	r3, r1, lsl #12
   184cc:	adc	r0, r0, r0
   184d0:	subcs	r3, r3, r1, lsl #12
   184d4:	cmp	r3, r1, lsl #11
   184d8:	adc	r0, r0, r0
   184dc:	subcs	r3, r3, r1, lsl #11
   184e0:	cmp	r3, r1, lsl #10
   184e4:	adc	r0, r0, r0
   184e8:	subcs	r3, r3, r1, lsl #10
   184ec:	cmp	r3, r1, lsl #9
   184f0:	adc	r0, r0, r0
   184f4:	subcs	r3, r3, r1, lsl #9
   184f8:	cmp	r3, r1, lsl #8
   184fc:	adc	r0, r0, r0
   18500:	subcs	r3, r3, r1, lsl #8
   18504:	cmp	r3, r1, lsl #7
   18508:	adc	r0, r0, r0
   1850c:	subcs	r3, r3, r1, lsl #7
   18510:	cmp	r3, r1, lsl #6
   18514:	adc	r0, r0, r0
   18518:	subcs	r3, r3, r1, lsl #6
   1851c:	cmp	r3, r1, lsl #5
   18520:	adc	r0, r0, r0
   18524:	subcs	r3, r3, r1, lsl #5
   18528:	cmp	r3, r1, lsl #4
   1852c:	adc	r0, r0, r0
   18530:	subcs	r3, r3, r1, lsl #4
   18534:	cmp	r3, r1, lsl #3
   18538:	adc	r0, r0, r0
   1853c:	subcs	r3, r3, r1, lsl #3
   18540:	cmp	r3, r1, lsl #2
   18544:	adc	r0, r0, r0
   18548:	subcs	r3, r3, r1, lsl #2
   1854c:	cmp	r3, r1, lsl #1
   18550:	adc	r0, r0, r0
   18554:	subcs	r3, r3, r1, lsl #1
   18558:	cmp	r3, r1
   1855c:	adc	r0, r0, r0
   18560:	subcs	r3, r3, r1
   18564:	cmp	ip, #0
   18568:	rsbmi	r0, r0, #0
   1856c:	bx	lr
   18570:	teq	ip, r0
   18574:	rsbmi	r0, r0, #0
   18578:	bx	lr
   1857c:	movcc	r0, #0
   18580:	asreq	r0, ip, #31
   18584:	orreq	r0, r0, #1
   18588:	bx	lr
   1858c:	clz	r2, r1
   18590:	rsb	r2, r2, #31
   18594:	cmp	ip, #0
   18598:	lsr	r0, r3, r2
   1859c:	rsbmi	r0, r0, #0
   185a0:	bx	lr
   185a4:	cmp	r0, #0
   185a8:	mvngt	r0, #-2147483648	; 0x80000000
   185ac:	movlt	r0, #-2147483648	; 0x80000000
   185b0:	b	185d4 <__assert_fail@plt+0x76a0>
   185b4:	cmp	r1, #0
   185b8:	beq	185a4 <__assert_fail@plt+0x7670>
   185bc:	push	{r0, r1, lr}
   185c0:	bl	1839c <__assert_fail@plt+0x7468>
   185c4:	pop	{r1, r2, lr}
   185c8:	mul	r3, r2, r0
   185cc:	sub	r1, r1, r3
   185d0:	bx	lr
   185d4:	push	{r1, lr}
   185d8:	mov	r0, #8
   185dc:	bl	10cdc <raise@plt>
   185e0:	pop	{r1, pc}
   185e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   185e8:	mov	r7, r0
   185ec:	ldr	r6, [pc, #72]	; 1863c <__assert_fail@plt+0x7708>
   185f0:	ldr	r5, [pc, #72]	; 18640 <__assert_fail@plt+0x770c>
   185f4:	add	r6, pc, r6
   185f8:	add	r5, pc, r5
   185fc:	sub	r6, r6, r5
   18600:	mov	r8, r1
   18604:	mov	r9, r2
   18608:	bl	10ca4 <calloc@plt-0x20>
   1860c:	asrs	r6, r6, #2
   18610:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18614:	mov	r4, #0
   18618:	add	r4, r4, #1
   1861c:	ldr	r3, [r5], #4
   18620:	mov	r2, r9
   18624:	mov	r1, r8
   18628:	mov	r0, r7
   1862c:	blx	r3
   18630:	cmp	r6, r4
   18634:	bne	18618 <__assert_fail@plt+0x76e4>
   18638:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1863c:	andeq	r1, r1, r4, lsl r9
   18640:	andeq	r1, r1, ip, lsl #18
   18644:	bx	lr
   18648:	ldr	r3, [pc, #12]	; 1865c <__assert_fail@plt+0x7728>
   1864c:	mov	r1, #0
   18650:	add	r3, pc, r3
   18654:	ldr	r2, [r3]
   18658:	b	10e68 <__cxa_atexit@plt>
   1865c:	muleq	r1, r0, sl

Disassembly of section .fini:

00018660 <.fini>:
   18660:	push	{r3, lr}
   18664:	pop	{r3, pc}
