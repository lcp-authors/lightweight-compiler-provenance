
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010d8c <.init>:
   10d8c:	push	{r3, lr}
   10d90:	bl	11040 <__assert_fail@plt+0x48>
   10d94:	pop	{r3, pc}

Disassembly of section .plt:

00010d98 <calloc@plt-0x14>:
   10d98:	push	{lr}		; (str lr, [sp, #-4]!)
   10d9c:	ldr	lr, [pc, #4]	; 10da8 <calloc@plt-0x4>
   10da0:	add	lr, pc, lr
   10da4:	ldr	pc, [lr, #8]!
   10da8:	andeq	r5, r1, r8, asr r2

00010dac <calloc@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #600]!	; 0x258

00010db8 <fputs_unlocked@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #592]!	; 0x250

00010dc4 <strcmp@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #584]!	; 0x248

00010dd0 <posix_fadvise64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #576]!	; 0x240

00010ddc <fflush@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #568]!	; 0x238

00010de8 <free@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #560]!	; 0x230

00010df4 <_exit@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #552]!	; 0x228

00010e00 <memcpy@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #544]!	; 0x220

00010e0c <mbsinit@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #536]!	; 0x218

00010e18 <getc_unlocked@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #528]!	; 0x210

00010e24 <dcgettext@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #520]!	; 0x208

00010e30 <dup2@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #512]!	; 0x200

00010e3c <realloc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #504]!	; 0x1f8

00010e48 <textdomain@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #496]!	; 0x1f0

00010e54 <iswprint@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #488]!	; 0x1e8

00010e60 <lseek64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #480]!	; 0x1e0

00010e6c <__ctype_get_mb_cur_max@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #472]!	; 0x1d8

00010e78 <__fpending@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #464]!	; 0x1d0

00010e84 <ferror_unlocked@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #456]!	; 0x1c8

00010e90 <mbrtowc@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #448]!	; 0x1c0

00010e9c <error@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #440]!	; 0x1b8

00010ea8 <open64@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #432]!	; 0x1b0

00010eb4 <puts@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #424]!	; 0x1a8

00010ec0 <malloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #416]!	; 0x1a0

00010ecc <__libc_start_main@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #408]!	; 0x198

00010ed8 <__freading@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #400]!	; 0x190

00010ee4 <__gmon_start__@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #392]!	; 0x188

00010ef0 <freopen64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #384]!	; 0x180

00010efc <getopt_long@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #376]!	; 0x178

00010f08 <__ctype_b_loc@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #368]!	; 0x170

00010f14 <exit@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #360]!	; 0x168

00010f20 <bcmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #352]!	; 0x160

00010f2c <strlen@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #344]!	; 0x158

00010f38 <__errno_location@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #336]!	; 0x150

00010f44 <__cxa_atexit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #328]!	; 0x148

00010f50 <memset@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #320]!	; 0x140

00010f5c <__printf_chk@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #312]!	; 0x138

00010f68 <fileno@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #304]!	; 0x130

00010f74 <__fprintf_chk@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #296]!	; 0x128

00010f80 <fclose@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #86016	; 0x15000
   10f88:	ldr	pc, [ip, #288]!	; 0x120

00010f8c <fseeko64@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #86016	; 0x15000
   10f94:	ldr	pc, [ip, #280]!	; 0x118

00010f98 <setlocale@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #86016	; 0x15000
   10fa0:	ldr	pc, [ip, #272]!	; 0x110

00010fa4 <strrchr@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #86016	; 0x15000
   10fac:	ldr	pc, [ip, #264]!	; 0x108

00010fb0 <nl_langinfo@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #86016	; 0x15000
   10fb8:	ldr	pc, [ip, #256]!	; 0x100

00010fbc <bindtextdomain@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #86016	; 0x15000
   10fc4:	ldr	pc, [ip, #248]!	; 0xf8

00010fc8 <fputs@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #86016	; 0x15000
   10fd0:	ldr	pc, [ip, #240]!	; 0xf0

00010fd4 <strncmp@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #86016	; 0x15000
   10fdc:	ldr	pc, [ip, #232]!	; 0xe8

00010fe0 <abort@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #86016	; 0x15000
   10fe8:	ldr	pc, [ip, #224]!	; 0xe0

00010fec <close@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #86016	; 0x15000
   10ff4:	ldr	pc, [ip, #216]!	; 0xd8

00010ff8 <__assert_fail@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #86016	; 0x15000
   11000:	ldr	pc, [ip, #208]!	; 0xd0

Disassembly of section .text:

00011004 <.text>:
   11004:	mov	fp, #0
   11008:	mov	lr, #0
   1100c:	pop	{r1}		; (ldr r1, [sp], #4)
   11010:	mov	r2, sp
   11014:	push	{r2}		; (str r2, [sp, #-4]!)
   11018:	push	{r0}		; (str r0, [sp, #-4]!)
   1101c:	ldr	ip, [pc, #16]	; 11034 <__assert_fail@plt+0x3c>
   11020:	push	{ip}		; (str ip, [sp, #-4]!)
   11024:	ldr	r0, [pc, #12]	; 11038 <__assert_fail@plt+0x40>
   11028:	ldr	r3, [pc, #12]	; 1103c <__assert_fail@plt+0x44>
   1102c:	bl	10ecc <__libc_start_main@plt>
   11030:	bl	10fe0 <abort@plt>
   11034:	andeq	r4, r1, r0, asr #27
   11038:	andeq	r1, r1, r4, lsr r3
   1103c:	andeq	r4, r1, r0, ror #26
   11040:	ldr	r3, [pc, #20]	; 1105c <__assert_fail@plt+0x64>
   11044:	ldr	r2, [pc, #20]	; 11060 <__assert_fail@plt+0x68>
   11048:	add	r3, pc, r3
   1104c:	ldr	r2, [r3, r2]
   11050:	cmp	r2, #0
   11054:	bxeq	lr
   11058:	b	10ee4 <__gmon_start__@plt>
   1105c:			; <UNDEFINED> instruction: 0x00014fb0
   11060:	ldrdeq	r0, [r0], -r4
   11064:	ldr	r0, [pc, #24]	; 11084 <__assert_fail@plt+0x8c>
   11068:	ldr	r3, [pc, #24]	; 11088 <__assert_fail@plt+0x90>
   1106c:	cmp	r3, r0
   11070:	bxeq	lr
   11074:	ldr	r3, [pc, #16]	; 1108c <__assert_fail@plt+0x94>
   11078:	cmp	r3, #0
   1107c:	bxeq	lr
   11080:	bx	r3
   11084:	andeq	r6, r2, r8, lsr #2
   11088:	andeq	r6, r2, r8, lsr #2
   1108c:	andeq	r0, r0, r0
   11090:	ldr	r0, [pc, #36]	; 110bc <__assert_fail@plt+0xc4>
   11094:	ldr	r1, [pc, #36]	; 110c0 <__assert_fail@plt+0xc8>
   11098:	sub	r1, r1, r0
   1109c:	asr	r1, r1, #2
   110a0:	add	r1, r1, r1, lsr #31
   110a4:	asrs	r1, r1, #1
   110a8:	bxeq	lr
   110ac:	ldr	r3, [pc, #16]	; 110c4 <__assert_fail@plt+0xcc>
   110b0:	cmp	r3, #0
   110b4:	bxeq	lr
   110b8:	bx	r3
   110bc:	andeq	r6, r2, r8, lsr #2
   110c0:	andeq	r6, r2, r8, lsr #2
   110c4:	andeq	r0, r0, r0
   110c8:	push	{r4, lr}
   110cc:	ldr	r4, [pc, #24]	; 110ec <__assert_fail@plt+0xf4>
   110d0:	ldrb	r3, [r4]
   110d4:	cmp	r3, #0
   110d8:	popne	{r4, pc}
   110dc:	bl	11064 <__assert_fail@plt+0x6c>
   110e0:	mov	r3, #1
   110e4:	strb	r3, [r4]
   110e8:	pop	{r4, pc}
   110ec:	andeq	r6, r2, ip, asr #2
   110f0:	b	11090 <__assert_fail@plt+0x98>
   110f4:	push	{fp, lr}
   110f8:	mov	fp, sp
   110fc:	sub	sp, sp, #56	; 0x38
   11100:	mov	r8, r0
   11104:	cmp	r0, #0
   11108:	bne	112f4 <__assert_fail@plt+0x2fc>
   1110c:	movw	r1, #19987	; 0x4e13
   11110:	mov	r0, #0
   11114:	mov	r2, #5
   11118:	movt	r1, #1
   1111c:	bl	10e24 <dcgettext@plt>
   11120:	mov	r1, r0
   11124:	movw	r0, #24936	; 0x6168
   11128:	movt	r0, #2
   1112c:	ldr	r2, [r0]
   11130:	mov	r0, #1
   11134:	bl	10f5c <__printf_chk@plt>
   11138:	movw	r1, #20261	; 0x4f25
   1113c:	mov	r0, #0
   11140:	mov	r2, #5
   11144:	movt	r1, #1
   11148:	bl	10e24 <dcgettext@plt>
   1114c:	movw	r9, #24900	; 0x6144
   11150:	movt	r9, #2
   11154:	ldr	r1, [r9]
   11158:	bl	10db8 <fputs_unlocked@plt>
   1115c:	movw	r1, #20630	; 0x5096
   11160:	mov	r0, #0
   11164:	mov	r2, #5
   11168:	movt	r1, #1
   1116c:	bl	10e24 <dcgettext@plt>
   11170:	ldr	r1, [r9]
   11174:	bl	10db8 <fputs_unlocked@plt>
   11178:	movw	r1, #20087	; 0x4e77
   1117c:	mov	r0, #0
   11180:	mov	r2, #5
   11184:	movt	r1, #1
   11188:	bl	10e24 <dcgettext@plt>
   1118c:	ldr	r1, [r9]
   11190:	bl	10db8 <fputs_unlocked@plt>
   11194:	movw	r1, #20132	; 0x4ea4
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e24 <dcgettext@plt>
   111a8:	ldr	r1, [r9]
   111ac:	bl	10db8 <fputs_unlocked@plt>
   111b0:	movw	r0, #20928	; 0x51c0
   111b4:	mov	r6, sp
   111b8:	movt	r0, #1
   111bc:	mov	r1, r6
   111c0:	ldm	r0!, {r2, r3, r4, r5}
   111c4:	stmia	r1!, {r2, r3, r4, r5}
   111c8:	ldm	r0!, {r2, r3, r4, r5, r7}
   111cc:	stmia	r1!, {r2, r3, r4, r5, r7}
   111d0:	ldm	r0, {r2, r3, r4, r5, r7}
   111d4:	stm	r1, {r2, r3, r4, r5, r7}
   111d8:	movw	r1, #20317	; 0x4f5d
   111dc:	movw	r5, #20186	; 0x4eda
   111e0:	movt	r1, #1
   111e4:	movt	r5, #1
   111e8:	mov	r0, r5
   111ec:	bl	10dc4 <strcmp@plt>
   111f0:	cmp	r0, #0
   111f4:	ldrne	r1, [r6, #8]!
   111f8:	cmpne	r1, #0
   111fc:	bne	111e8 <__assert_fail@plt+0x1f0>
   11200:	movw	r1, #20412	; 0x4fbc
   11204:	ldr	r6, [r6, #4]
   11208:	mov	r0, #0
   1120c:	mov	r2, #5
   11210:	movt	r1, #1
   11214:	bl	10e24 <dcgettext@plt>
   11218:	movw	r2, #20216	; 0x4ef8
   1121c:	movw	r3, #20435	; 0x4fd3
   11220:	mov	r1, r0
   11224:	mov	r0, #1
   11228:	movt	r2, #1
   1122c:	movt	r3, #1
   11230:	bl	10f5c <__printf_chk@plt>
   11234:	cmp	r6, #0
   11238:	mov	r0, #5
   1123c:	mov	r1, #0
   11240:	moveq	r6, r5
   11244:	bl	10f98 <setlocale@plt>
   11248:	cmp	r0, #0
   1124c:	beq	11284 <__assert_fail@plt+0x28c>
   11250:	movw	r1, #20475	; 0x4ffb
   11254:	mov	r2, #3
   11258:	movt	r1, #1
   1125c:	bl	10fd4 <strncmp@plt>
   11260:	cmp	r0, #0
   11264:	beq	11284 <__assert_fail@plt+0x28c>
   11268:	movw	r1, #20479	; 0x4fff
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	movt	r1, #1
   11278:	bl	10e24 <dcgettext@plt>
   1127c:	ldr	r1, [r9]
   11280:	bl	10db8 <fputs_unlocked@plt>
   11284:	movw	r1, #20550	; 0x5046
   11288:	mov	r0, #0
   1128c:	mov	r2, #5
   11290:	movt	r1, #1
   11294:	bl	10e24 <dcgettext@plt>
   11298:	movw	r2, #20435	; 0x4fd3
   1129c:	mov	r1, r0
   112a0:	mov	r0, #1
   112a4:	mov	r3, r5
   112a8:	movt	r2, #1
   112ac:	bl	10f5c <__printf_chk@plt>
   112b0:	movw	r1, #20577	; 0x5061
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10e24 <dcgettext@plt>
   112c4:	mov	r1, r0
   112c8:	movw	r0, #20345	; 0x4f79
   112cc:	movw	r3, #20631	; 0x5097
   112d0:	cmp	r6, r5
   112d4:	mov	r2, r6
   112d8:	movt	r0, #1
   112dc:	movt	r3, #1
   112e0:	moveq	r3, r0
   112e4:	mov	r0, #1
   112e8:	bl	10f5c <__printf_chk@plt>
   112ec:	mov	r0, r8
   112f0:	bl	10f14 <exit@plt>
   112f4:	movw	r0, #24888	; 0x6138
   112f8:	movw	r1, #19948	; 0x4dec
   112fc:	mov	r2, #5
   11300:	movt	r0, #2
   11304:	movt	r1, #1
   11308:	ldr	r5, [r0]
   1130c:	mov	r0, #0
   11310:	bl	10e24 <dcgettext@plt>
   11314:	mov	r2, r0
   11318:	movw	r0, #24936	; 0x6168
   1131c:	mov	r1, #1
   11320:	movt	r0, #2
   11324:	ldr	r3, [r0]
   11328:	mov	r0, r5
   1132c:	bl	10f74 <__fprintf_chk@plt>
   11330:	b	112ec <__assert_fail@plt+0x2f4>
   11334:	push	{fp, lr}
   11338:	mov	fp, sp
   1133c:	sub	sp, sp, #24
   11340:	mov	r5, r0
   11344:	ldr	r0, [r1]
   11348:	mov	r4, r1
   1134c:	bl	12334 <__assert_fail@plt+0x133c>
   11350:	movw	r1, #20631	; 0x5097
   11354:	mov	r0, #6
   11358:	movt	r1, #1
   1135c:	bl	10f98 <setlocale@plt>
   11360:	movw	r6, #20220	; 0x4efc
   11364:	movw	r1, #20192	; 0x4ee0
   11368:	movt	r6, #1
   1136c:	movt	r1, #1
   11370:	mov	r0, r6
   11374:	bl	10fbc <bindtextdomain@plt>
   11378:	mov	r0, r6
   1137c:	bl	10e48 <textdomain@plt>
   11380:	movw	r0, #7468	; 0x1d2c
   11384:	movt	r0, #1
   11388:	bl	14dc4 <__assert_fail@plt+0x3dcc>
   1138c:	movw	r0, #24800	; 0x60e0
   11390:	movw	r2, #20230	; 0x4f06
   11394:	movw	r3, #4340	; 0x10f4
   11398:	mov	r6, #1
   1139c:	mov	r1, #0
   113a0:	movt	r0, #2
   113a4:	movt	r2, #1
   113a8:	movt	r3, #1
   113ac:	ldr	r0, [r0]
   113b0:	stm	sp, {r0, r6}
   113b4:	str	r3, [sp, #8]
   113b8:	movw	r3, #20216	; 0x4ef8
   113bc:	str	r2, [sp, #12]
   113c0:	movw	r2, #20186	; 0x4eda
   113c4:	str	r1, [sp, #16]
   113c8:	mov	r0, r5
   113cc:	mov	r1, r4
   113d0:	movt	r2, #1
   113d4:	movt	r3, #1
   113d8:	bl	12270 <__assert_fail@plt+0x1278>
   113dc:	movw	r6, #24880	; 0x6130
   113e0:	movt	r6, #2
   113e4:	ldr	r0, [r6]
   113e8:	sub	r1, r5, r0
   113ec:	cmp	r1, #2
   113f0:	blt	11438 <__assert_fail@plt+0x440>
   113f4:	movw	r1, #20244	; 0x4f14
   113f8:	mov	r0, #0
   113fc:	mov	r2, #5
   11400:	movt	r1, #1
   11404:	bl	10e24 <dcgettext@plt>
   11408:	mov	r5, r0
   1140c:	ldr	r0, [r6]
   11410:	add	r0, r4, r0, lsl #2
   11414:	ldr	r0, [r0, #4]
   11418:	bl	13d20 <__assert_fail@plt+0x2d28>
   1141c:	mov	r3, r0
   11420:	mov	r0, #0
   11424:	mov	r1, #0
   11428:	mov	r2, r5
   1142c:	bl	10e9c <error@plt>
   11430:	mov	r0, #1
   11434:	bl	110f4 <__assert_fail@plt+0xfc>
   11438:	cmp	r0, r5
   1143c:	bne	1144c <__assert_fail@plt+0x454>
   11440:	movw	r0, #21158	; 0x52a6
   11444:	movt	r0, #1
   11448:	bl	11454 <__assert_fail@plt+0x45c>
   1144c:	ldr	r0, [r4, r0, lsl #2]
   11450:	bl	11454 <__assert_fail@plt+0x45c>
   11454:	push	{fp, lr}
   11458:	mov	fp, sp
   1145c:	sub	sp, sp, #40	; 0x28
   11460:	movw	r1, #21158	; 0x52a6
   11464:	mov	r9, r0
   11468:	movt	r1, #1
   1146c:	bl	10dc4 <strcmp@plt>
   11470:	mov	r4, r0
   11474:	mov	r0, #28
   11478:	bl	14884 <__assert_fail@plt+0x388c>
   1147c:	str	r4, [sp, #16]
   11480:	cmp	r4, #0
   11484:	movw	r4, #24896	; 0x6140
   11488:	mov	sl, r0
   1148c:	movt	r4, #2
   11490:	beq	114b0 <__assert_fail@plt+0x4b8>
   11494:	ldr	r2, [r4]
   11498:	movw	r1, #21009	; 0x5211
   1149c:	mov	r0, r9
   114a0:	movt	r1, #1
   114a4:	bl	11f4c <__assert_fail@plt+0xf54>
   114a8:	cmp	r0, #0
   114ac:	beq	11a80 <__assert_fail@plt+0xa88>
   114b0:	ldr	r0, [r4]
   114b4:	mov	r1, #2
   114b8:	bl	11e18 <__assert_fail@plt+0xe20>
   114bc:	sub	r6, fp, #8
   114c0:	mov	r0, r6
   114c4:	bl	13e6c <__assert_fail@plt+0x2e74>
   114c8:	movw	r5, #20628	; 0x5094
   114cc:	mov	r0, #0
   114d0:	str	r9, [fp, #-12]
   114d4:	movt	r5, #1
   114d8:	mov	r7, r0
   114dc:	ldr	r0, [r4]
   114e0:	mov	r1, r5
   114e4:	mov	r2, #3
   114e8:	mov	r3, r6
   114ec:	bl	13e7c <__assert_fail@plt+0x2e84>
   114f0:	cmn	r0, #1
   114f4:	beq	1184c <__assert_fail@plt+0x854>
   114f8:	cmp	r0, #0
   114fc:	str	r7, [fp, #-16]
   11500:	beq	11a98 <__assert_fail@plt+0xaa0>
   11504:	ldr	r5, [sl, #8]
   11508:	ldr	r7, [fp, #-4]
   1150c:	cmp	r5, #0
   11510:	beq	1157c <__assert_fail@plt+0x584>
   11514:	cmp	r7, #0
   11518:	str	sl, [sp, #20]
   1151c:	ldrne	r1, [r5]
   11520:	cmpne	r1, #0
   11524:	beq	11a08 <__assert_fail@plt+0xa10>
   11528:	ldr	r6, [sp, #20]
   1152c:	mov	sl, r5
   11530:	mov	r0, r7
   11534:	bl	10dc4 <strcmp@plt>
   11538:	cmp	r0, #0
   1153c:	beq	115a4 <__assert_fail@plt+0x5ac>
   11540:	mov	r4, r0
   11544:	mov	r0, #8
   11548:	movwmi	r0, #4
   1154c:	ldr	r0, [r5, r0]
   11550:	cmp	r0, #0
   11554:	beq	11614 <__assert_fail@plt+0x61c>
   11558:	ldrb	r1, [r0, #12]
   1155c:	cmp	r1, #0
   11560:	ldr	r1, [r0]
   11564:	movne	r6, r5
   11568:	movne	sl, r0
   1156c:	mov	r5, r0
   11570:	cmp	r1, #0
   11574:	bne	11530 <__assert_fail@plt+0x538>
   11578:	b	11a08 <__assert_fail@plt+0xa10>
   1157c:	mov	r0, #28
   11580:	bl	14884 <__assert_fail@plt+0x388c>
   11584:	mov	r8, r0
   11588:	cmp	r7, #0
   1158c:	beq	1159c <__assert_fail@plt+0x5a4>
   11590:	mov	r0, r7
   11594:	bl	14990 <__assert_fail@plt+0x3998>
   11598:	str	r0, [r8]
   1159c:	str	r8, [sl, #8]
   115a0:	b	115b8 <__assert_fail@plt+0x5c0>
   115a4:	mov	r8, r5
   115a8:	ldr	sl, [sp, #20]
   115ac:	movw	r4, #24896	; 0x6140
   115b0:	sub	r6, fp, #8
   115b4:	movt	r4, #2
   115b8:	ldr	r7, [fp, #-16]
   115bc:	movw	r5, #20628	; 0x5094
   115c0:	movt	r5, #1
   115c4:	cmp	r7, #0
   115c8:	mov	r0, r8
   115cc:	beq	114d8 <__assert_fail@plt+0x4e0>
   115d0:	ldr	r1, [r8]
   115d4:	ldr	r0, [r7]
   115d8:	bl	10dc4 <strcmp@plt>
   115dc:	cmp	r0, #0
   115e0:	mov	r0, #0
   115e4:	beq	114d8 <__assert_fail@plt+0x4e0>
   115e8:	ldr	r0, [r8, #16]
   115ec:	add	r0, r0, #1
   115f0:	str	r0, [r8, #16]
   115f4:	mov	r0, #8
   115f8:	bl	1459c <__assert_fail@plt+0x35a4>
   115fc:	str	r8, [r0]
   11600:	ldr	r1, [r7, #24]
   11604:	str	r1, [r0, #4]
   11608:	str	r0, [r7, #24]
   1160c:	mov	r0, #0
   11610:	b	114d8 <__assert_fail@plt+0x4e0>
   11614:	mov	r0, #28
   11618:	add	r9, r5, #8
   1161c:	bl	14884 <__assert_fail@plt+0x388c>
   11620:	mov	r8, r0
   11624:	mov	r0, r7
   11628:	bl	14990 <__assert_fail@plt+0x3998>
   1162c:	cmp	r4, #0
   11630:	str	r0, [r8]
   11634:	addmi	r9, r5, #4
   11638:	cmp	sl, #0
   1163c:	str	r8, [r9]
   11640:	ldrne	r1, [sl]
   11644:	cmpne	r1, #0
   11648:	beq	11a50 <__assert_fail@plt+0xa58>
   1164c:	mov	r0, r7
   11650:	bl	10dc4 <strcmp@plt>
   11654:	cmp	r0, #0
   11658:	beq	11a50 <__assert_fail@plt+0xa58>
   1165c:	mov	r4, r0
   11660:	mov	r0, #1
   11664:	mvnmi	r0, #0
   11668:	ldr	r9, [fp, #-12]
   1166c:	str	r0, [sp, #12]
   11670:	mov	r0, #8
   11674:	movwmi	r0, #4
   11678:	ldr	r0, [sl, r0]
   1167c:	cmp	r0, r8
   11680:	str	r0, [sp, #8]
   11684:	beq	116dc <__assert_fail@plt+0x6e4>
   11688:	ldr	r5, [sp, #8]
   1168c:	cmp	r5, #0
   11690:	ldrne	r1, [r5]
   11694:	cmpne	r1, #0
   11698:	beq	11a68 <__assert_fail@plt+0xa70>
   1169c:	mov	r0, r7
   116a0:	bl	10dc4 <strcmp@plt>
   116a4:	cmp	r0, #0
   116a8:	beq	11a68 <__assert_fail@plt+0xa70>
   116ac:	cmn	r0, #1
   116b0:	bgt	116c4 <__assert_fail@plt+0x6cc>
   116b4:	mov	r0, #255	; 0xff
   116b8:	strb	r0, [r5, #12]
   116bc:	add	r0, r5, #4
   116c0:	b	116d0 <__assert_fail@plt+0x6d8>
   116c4:	mov	r0, #1
   116c8:	strb	r0, [r5, #12]
   116cc:	add	r0, r5, #8
   116d0:	ldr	r5, [r0]
   116d4:	cmp	r5, r8
   116d8:	bne	1168c <__assert_fail@plt+0x694>
   116dc:	mov	r0, sl
   116e0:	ldr	r3, [sp, #12]
   116e4:	ldrsb	r2, [r0, #12]!
   116e8:	uxtb	r1, r2
   116ec:	cmp	r1, #0
   116f0:	cmnne	r2, r3
   116f4:	bne	11704 <__assert_fail@plt+0x70c>
   116f8:	add	r1, r1, r3
   116fc:	strb	r1, [r0]
   11700:	b	115a8 <__assert_fail@plt+0x5b0>
   11704:	ldr	r5, [sp, #8]
   11708:	ldr	r2, [sp, #12]
   1170c:	add	r3, sl, #8
   11710:	add	lr, sl, #4
   11714:	mov	r1, r5
   11718:	ldrsb	r7, [r1, #12]!
   1171c:	cmp	r2, r7
   11720:	bne	11770 <__assert_fail@plt+0x778>
   11724:	cmp	r4, #0
   11728:	add	r1, r5, #4
   1172c:	ldr	r7, [fp, #-16]
   11730:	mov	ip, #0
   11734:	mov	r2, r0
   11738:	addmi	r1, r5, #8
   1173c:	movmi	r3, lr
   11740:	cmp	r4, #0
   11744:	movw	r4, #24896	; 0x6140
   11748:	ldr	r1, [r1]
   1174c:	movt	r4, #2
   11750:	str	r1, [r3]
   11754:	mov	r1, #4
   11758:	movwmi	r1, #8
   1175c:	str	sl, [r5, r1]
   11760:	strb	ip, [r5, #12]
   11764:	movw	r5, #20628	; 0x5094
   11768:	movt	r5, #1
   1176c:	b	11828 <__assert_fail@plt+0x830>
   11770:	cmn	r4, #1
   11774:	mov	ip, #0
   11778:	bgt	11798 <__assert_fail@plt+0x7a0>
   1177c:	ldr	r3, [r5, #8]
   11780:	ldr	r7, [r3, #4]
   11784:	mov	r2, r3
   11788:	str	r7, [r5, #8]
   1178c:	str	r5, [r3, #4]
   11790:	add	r7, r3, #8
   11794:	b	117b8 <__assert_fail@plt+0x7c0>
   11798:	mov	r7, r5
   1179c:	ldr	r5, [r5, #4]
   117a0:	mov	lr, r3
   117a4:	ldr	r2, [r5, #8]
   117a8:	str	r2, [r7, #4]
   117ac:	str	r7, [r5, #8]
   117b0:	add	r7, r5, #4
   117b4:	mov	r2, r5
   117b8:	ldr	r3, [sp, #12]
   117bc:	str	r2, [sp, #8]
   117c0:	movw	r4, #24896	; 0x6140
   117c4:	movt	r4, #2
   117c8:	rsb	r5, r3, #0
   117cc:	str	r5, [sp, #4]
   117d0:	ldr	r5, [r7]
   117d4:	str	r5, [lr]
   117d8:	str	sl, [r7]
   117dc:	strb	ip, [sl, #12]
   117e0:	strb	ip, [r1]
   117e4:	ldrsb	r7, [r2, #12]!
   117e8:	cmp	r3, r7
   117ec:	bne	1180c <__assert_fail@plt+0x814>
   117f0:	ldr	lr, [sp, #4]
   117f4:	ldr	r7, [fp, #-16]
   117f8:	movw	r5, #20628	; 0x5094
   117fc:	mov	r1, r0
   11800:	movt	r5, #1
   11804:	strb	lr, [r1]
   11808:	b	11828 <__assert_fail@plt+0x830>
   1180c:	ldr	r0, [sp, #4]
   11810:	ldr	lr, [sp, #12]
   11814:	movw	r5, #20628	; 0x5094
   11818:	movt	r5, #1
   1181c:	cmp	r7, r0
   11820:	ldr	r7, [fp, #-16]
   11824:	strbeq	lr, [r1]
   11828:	strb	ip, [r2]
   1182c:	ldr	r0, [r6, #8]
   11830:	cmp	sl, r0
   11834:	ldr	r0, [sp, #8]
   11838:	ldr	sl, [sp, #20]
   1183c:	streq	r0, [r6, #8]
   11840:	strne	r0, [r6, #4]
   11844:	sub	r6, fp, #8
   11848:	b	115c4 <__assert_fail@plt+0x5cc>
   1184c:	cmp	r7, #0
   11850:	bne	11ab8 <__assert_fail@plt+0xac0>
   11854:	ldr	r5, [sl, #8]
   11858:	cmp	r5, #0
   1185c:	beq	11870 <__assert_fail@plt+0x878>
   11860:	movw	r1, #6912	; 0x1b00
   11864:	mov	r0, r5
   11868:	movt	r1, #1
   1186c:	bl	11c7c <__assert_fail@plt+0xc84>
   11870:	movw	r6, #24912	; 0x6150
   11874:	movt	r6, #2
   11878:	ldr	r0, [r6]
   1187c:	cmp	r0, #0
   11880:	beq	11af4 <__assert_fail@plt+0xafc>
   11884:	movw	sl, #24916	; 0x6154
   11888:	movw	r9, #24924	; 0x615c
   1188c:	movw	r7, #7012	; 0x1b64
   11890:	movw	r4, #24920	; 0x6158
   11894:	mov	r0, #1
   11898:	movt	sl, #2
   1189c:	movt	r9, #2
   118a0:	movt	r7, #1
   118a4:	movt	r4, #2
   118a8:	str	r0, [fp, #-16]
   118ac:	cmp	r5, #0
   118b0:	beq	118c4 <__assert_fail@plt+0x8cc>
   118b4:	movw	r1, #6940	; 0x1b1c
   118b8:	mov	r0, r5
   118bc:	movt	r1, #1
   118c0:	bl	11c7c <__assert_fail@plt+0xc84>
   118c4:	ldr	r1, [sl]
   118c8:	cmp	r1, #0
   118cc:	beq	1193c <__assert_fail@plt+0x944>
   118d0:	ldr	r0, [r1]
   118d4:	ldr	r8, [r1, #24]
   118d8:	bl	10eb4 <puts@plt>
   118dc:	ldr	r1, [sl]
   118e0:	mov	r0, #1
   118e4:	strb	r0, [r1, #13]
   118e8:	ldr	r0, [r6]
   118ec:	sub	r0, r0, #1
   118f0:	str	r0, [r6]
   118f4:	b	11920 <__assert_fail@plt+0x928>
   118f8:	ldr	r2, [r8]
   118fc:	ldr	r3, [r2, #16]
   11900:	subs	r3, r3, #1
   11904:	str	r3, [r2, #16]
   11908:	bne	1191c <__assert_fail@plt+0x924>
   1190c:	ldr	r3, [r4]
   11910:	str	r2, [r3, #20]
   11914:	ldr	r2, [r8]
   11918:	str	r2, [r4]
   1191c:	ldr	r8, [r8, #4]
   11920:	cmp	r8, #0
   11924:	bne	118f8 <__assert_fail@plt+0x900>
   11928:	ldr	r1, [r1, #20]
   1192c:	cmp	r1, #0
   11930:	str	r1, [sl]
   11934:	bne	118d0 <__assert_fail@plt+0x8d8>
   11938:	b	11940 <__assert_fail@plt+0x948>
   1193c:	ldr	r0, [r6]
   11940:	cmp	r0, #0
   11944:	beq	119b4 <__assert_fail@plt+0x9bc>
   11948:	movw	r1, #20721	; 0x50f1
   1194c:	mov	r0, #0
   11950:	mov	r2, #5
   11954:	movt	r1, #1
   11958:	bl	10e24 <dcgettext@plt>
   1195c:	ldr	r2, [fp, #-12]
   11960:	mov	r8, r0
   11964:	mov	r0, #0
   11968:	mov	r1, #3
   1196c:	bl	13b8c <__assert_fail@plt+0x2b94>
   11970:	mov	r3, r0
   11974:	mov	r0, #0
   11978:	mov	r1, #0
   1197c:	mov	r2, r8
   11980:	bl	10e9c <error@plt>
   11984:	cmp	r5, #0
   11988:	movne	r0, r5
   1198c:	movne	r1, r7
   11990:	blne	11c7c <__assert_fail@plt+0xc84>
   11994:	ldr	r0, [r9]
   11998:	cmp	r0, #0
   1199c:	bne	11984 <__assert_fail@plt+0x98c>
   119a0:	ldr	r0, [r6]
   119a4:	mov	r1, #0
   119a8:	str	r1, [fp, #-16]
   119ac:	cmp	r0, #0
   119b0:	bne	118ac <__assert_fail@plt+0x8b4>
   119b4:	movw	r0, #24896	; 0x6140
   119b8:	movt	r0, #2
   119bc:	ldr	r0, [r0]
   119c0:	bl	11e54 <__assert_fail@plt+0xe5c>
   119c4:	cmp	r0, #0
   119c8:	bne	119dc <__assert_fail@plt+0x9e4>
   119cc:	ldr	r1, [fp, #-16]
   119d0:	mov	r0, #1
   119d4:	bic	r0, r0, r1
   119d8:	bl	10f14 <exit@plt>
   119dc:	bl	10f38 <__errno_location@plt>
   119e0:	ldr	r4, [r0]
   119e4:	ldr	r0, [sp, #16]
   119e8:	cmp	r0, #0
   119ec:	bne	11a28 <__assert_fail@plt+0xa30>
   119f0:	movw	r1, #20748	; 0x510c
   119f4:	mov	r0, #0
   119f8:	mov	r2, #5
   119fc:	movt	r1, #1
   11a00:	bl	10e24 <dcgettext@plt>
   11a04:	b	11a38 <__assert_fail@plt+0xa40>
   11a08:	movw	r0, #20817	; 0x5151
   11a0c:	movw	r1, #20641	; 0x50a1
   11a10:	movw	r3, #20763	; 0x511b
   11a14:	mov	r2, #140	; 0x8c
   11a18:	movt	r0, #1
   11a1c:	movt	r1, #1
   11a20:	movt	r3, #1
   11a24:	bl	10ff8 <__assert_fail@plt>
   11a28:	ldr	r2, [fp, #-12]
   11a2c:	mov	r0, #0
   11a30:	mov	r1, #3
   11a34:	bl	13b8c <__assert_fail@plt+0x2b94>
   11a38:	movw	r2, #21015	; 0x5217
   11a3c:	mov	r3, r0
   11a40:	mov	r0, #1
   11a44:	mov	r1, r4
   11a48:	movt	r2, #1
   11a4c:	bl	10e9c <error@plt>
   11a50:	movw	r0, #20836	; 0x5164
   11a54:	movw	r1, #20641	; 0x50a1
   11a58:	movw	r3, #20763	; 0x511b
   11a5c:	mov	r2, #163	; 0xa3
   11a60:	movt	r0, #1
   11a64:	b	11a1c <__assert_fail@plt+0xa24>
   11a68:	movw	r0, #20879	; 0x518f
   11a6c:	movw	r1, #20641	; 0x50a1
   11a70:	movw	r3, #20763	; 0x511b
   11a74:	mov	r2, #177	; 0xb1
   11a78:	movt	r0, #1
   11a7c:	b	11a1c <__assert_fail@plt+0xa24>
   11a80:	bl	10f38 <__errno_location@plt>
   11a84:	ldr	r4, [r0]
   11a88:	mov	r0, #0
   11a8c:	mov	r1, #3
   11a90:	mov	r2, r9
   11a94:	b	11a34 <__assert_fail@plt+0xa3c>
   11a98:	movw	r0, #20632	; 0x5098
   11a9c:	movw	r1, #20641	; 0x50a1
   11aa0:	movw	r3, #20653	; 0x50ad
   11aa4:	movw	r2, #458	; 0x1ca
   11aa8:	movt	r0, #1
   11aac:	movt	r1, #1
   11ab0:	movt	r3, #1
   11ab4:	bl	10ff8 <__assert_fail@plt>
   11ab8:	movw	r1, #20678	; 0x50c6
   11abc:	mov	r0, #0
   11ac0:	mov	r2, #5
   11ac4:	movt	r1, #1
   11ac8:	bl	10e24 <dcgettext@plt>
   11acc:	mov	r4, r0
   11ad0:	mov	r0, #0
   11ad4:	mov	r1, #3
   11ad8:	mov	r2, r9
   11adc:	bl	13b8c <__assert_fail@plt+0x2b94>
   11ae0:	mov	r3, r0
   11ae4:	mov	r0, #1
   11ae8:	mov	r1, #0
   11aec:	mov	r2, r4
   11af0:	bl	10e9c <error@plt>
   11af4:	mov	r0, #1
   11af8:	str	r0, [fp, #-16]
   11afc:	b	119b4 <__assert_fail@plt+0x9bc>
   11b00:	movw	r0, #24912	; 0x6150
   11b04:	movt	r0, #2
   11b08:	ldr	r1, [r0]
   11b0c:	add	r1, r1, #1
   11b10:	str	r1, [r0]
   11b14:	mov	r0, #0
   11b18:	bx	lr
   11b1c:	ldr	r1, [r0, #16]
   11b20:	cmp	r1, #0
   11b24:	bne	11b5c <__assert_fail@plt+0xb64>
   11b28:	ldrb	r1, [r0, #13]
   11b2c:	cmp	r1, #0
   11b30:	bne	11b5c <__assert_fail@plt+0xb64>
   11b34:	movw	r1, #24916	; 0x6154
   11b38:	movw	ip, #24920	; 0x6158
   11b3c:	movt	r1, #2
   11b40:	movt	ip, #2
   11b44:	ldr	r2, [r1]
   11b48:	ldr	r3, [ip]
   11b4c:	cmp	r2, #0
   11b50:	addne	r1, r3, #20
   11b54:	str	r0, [r1]
   11b58:	str	r0, [ip]
   11b5c:	mov	r0, #0
   11b60:	bx	lr
   11b64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11b68:	add	fp, sp, #24
   11b6c:	ldr	r1, [r0, #16]
   11b70:	mov	r4, r0
   11b74:	mov	r0, #0
   11b78:	cmp	r1, #0
   11b7c:	beq	11c78 <__assert_fail@plt+0xc80>
   11b80:	movw	r6, #24924	; 0x615c
   11b84:	movt	r6, #2
   11b88:	ldr	r7, [r6]
   11b8c:	cmp	r7, #0
   11b90:	beq	11c28 <__assert_fail@plt+0xc30>
   11b94:	mov	r8, r4
   11b98:	ldr	r1, [r8, #24]!
   11b9c:	cmp	r1, #0
   11ba0:	beq	11c78 <__assert_fail@plt+0xc80>
   11ba4:	ldr	r2, [r1]
   11ba8:	cmp	r2, r7
   11bac:	beq	11bd0 <__assert_fail@plt+0xbd8>
   11bb0:	mov	r2, r1
   11bb4:	ldr	r1, [r1, #4]
   11bb8:	cmp	r1, #0
   11bbc:	beq	11c78 <__assert_fail@plt+0xc80>
   11bc0:	ldr	r3, [r1]
   11bc4:	cmp	r3, r7
   11bc8:	bne	11bb0 <__assert_fail@plt+0xbb8>
   11bcc:	add	r8, r2, #4
   11bd0:	ldr	r1, [r4, #20]
   11bd4:	cmp	r1, #0
   11bd8:	beq	11c24 <__assert_fail@plt+0xc2c>
   11bdc:	movw	r5, #21015	; 0x5217
   11be0:	mov	r9, #0
   11be4:	movt	r5, #1
   11be8:	ldr	r3, [r7]
   11bec:	ldr	r7, [r7, #20]
   11bf0:	mov	r0, #0
   11bf4:	mov	r1, #0
   11bf8:	mov	r2, r5
   11bfc:	bl	10e9c <error@plt>
   11c00:	ldr	r0, [r6]
   11c04:	cmp	r0, r4
   11c08:	beq	11c30 <__assert_fail@plt+0xc38>
   11c0c:	cmp	r7, #0
   11c10:	str	r9, [r0, #20]
   11c14:	str	r7, [r6]
   11c18:	bne	11be8 <__assert_fail@plt+0xbf0>
   11c1c:	mov	r4, r7
   11c20:	b	11c4c <__assert_fail@plt+0xc54>
   11c24:	str	r7, [r4, #20]
   11c28:	str	r4, [r6]
   11c2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c30:	ldr	r0, [r8]
   11c34:	ldr	r1, [r0]
   11c38:	ldr	r2, [r1, #16]
   11c3c:	sub	r2, r2, #1
   11c40:	str	r2, [r1, #16]
   11c44:	ldr	r0, [r0, #4]
   11c48:	str	r0, [r8]
   11c4c:	mov	r0, #1
   11c50:	cmp	r4, #0
   11c54:	beq	11c78 <__assert_fail@plt+0xc80>
   11c58:	mov	r1, #0
   11c5c:	ldr	r2, [r4, #20]
   11c60:	str	r1, [r4, #20]
   11c64:	cmp	r2, #0
   11c68:	mov	r4, r2
   11c6c:	bne	11c5c <__assert_fail@plt+0xc64>
   11c70:	mov	r1, #0
   11c74:	str	r1, [r6]
   11c78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c7c:	push	{r4, r5, r6, sl, fp, lr}
   11c80:	add	fp, sp, #16
   11c84:	mov	r4, r0
   11c88:	ldr	r0, [r0, #4]
   11c8c:	cmp	r0, #0
   11c90:	beq	11cb0 <__assert_fail@plt+0xcb8>
   11c94:	mov	r5, r1
   11c98:	bl	11c7c <__assert_fail@plt+0xc84>
   11c9c:	mov	r1, r5
   11ca0:	mov	r5, #1
   11ca4:	cmp	r0, #0
   11ca8:	beq	11cbc <__assert_fail@plt+0xcc4>
   11cac:	b	11d04 <__assert_fail@plt+0xd0c>
   11cb0:	ldr	r0, [r4, #8]
   11cb4:	cmp	r0, #0
   11cb8:	beq	11cf4 <__assert_fail@plt+0xcfc>
   11cbc:	mov	r0, r4
   11cc0:	mov	r6, r1
   11cc4:	blx	r1
   11cc8:	mov	r5, #1
   11ccc:	cmp	r0, #0
   11cd0:	bne	11d04 <__assert_fail@plt+0xd0c>
   11cd4:	ldr	r0, [r4, #8]
   11cd8:	cmp	r0, #0
   11cdc:	beq	11d00 <__assert_fail@plt+0xd08>
   11ce0:	mov	r1, r6
   11ce4:	bl	11c7c <__assert_fail@plt+0xc84>
   11ce8:	cmp	r0, #0
   11cec:	moveq	r5, #0
   11cf0:	b	11d04 <__assert_fail@plt+0xd0c>
   11cf4:	mov	r0, r4
   11cf8:	pop	{r4, r5, r6, sl, fp, lr}
   11cfc:	bx	r1
   11d00:	mov	r5, #0
   11d04:	mov	r0, r5
   11d08:	pop	{r4, r5, r6, sl, fp, pc}
   11d0c:	movw	r1, #24928	; 0x6160
   11d10:	movt	r1, #2
   11d14:	str	r0, [r1]
   11d18:	bx	lr
   11d1c:	movw	r1, #24932	; 0x6164
   11d20:	movt	r1, #2
   11d24:	strb	r0, [r1]
   11d28:	bx	lr
   11d2c:	push	{r4, r5, r6, sl, fp, lr}
   11d30:	add	fp, sp, #16
   11d34:	sub	sp, sp, #8
   11d38:	movw	r0, #24900	; 0x6144
   11d3c:	movt	r0, #2
   11d40:	ldr	r0, [r0]
   11d44:	bl	14ae0 <__assert_fail@plt+0x3ae8>
   11d48:	cmp	r0, #0
   11d4c:	beq	11d74 <__assert_fail@plt+0xd7c>
   11d50:	movw	r0, #24932	; 0x6164
   11d54:	movt	r0, #2
   11d58:	ldrb	r0, [r0]
   11d5c:	cmp	r0, #0
   11d60:	beq	11d94 <__assert_fail@plt+0xd9c>
   11d64:	bl	10f38 <__errno_location@plt>
   11d68:	ldr	r0, [r0]
   11d6c:	cmp	r0, #32
   11d70:	bne	11d94 <__assert_fail@plt+0xd9c>
   11d74:	movw	r0, #24888	; 0x6138
   11d78:	movt	r0, #2
   11d7c:	ldr	r0, [r0]
   11d80:	bl	14ae0 <__assert_fail@plt+0x3ae8>
   11d84:	cmp	r0, #0
   11d88:	subeq	sp, fp, #16
   11d8c:	popeq	{r4, r5, r6, sl, fp, pc}
   11d90:	b	11e04 <__assert_fail@plt+0xe0c>
   11d94:	movw	r1, #20999	; 0x5207
   11d98:	mov	r0, #0
   11d9c:	mov	r2, #5
   11da0:	movt	r1, #1
   11da4:	bl	10e24 <dcgettext@plt>
   11da8:	mov	r4, r0
   11dac:	movw	r0, #24928	; 0x6160
   11db0:	movt	r0, #2
   11db4:	ldr	r6, [r0]
   11db8:	bl	10f38 <__errno_location@plt>
   11dbc:	ldr	r5, [r0]
   11dc0:	cmp	r6, #0
   11dc4:	bne	11de0 <__assert_fail@plt+0xde8>
   11dc8:	movw	r2, #21015	; 0x5217
   11dcc:	mov	r0, #0
   11dd0:	mov	r1, r5
   11dd4:	mov	r3, r4
   11dd8:	movt	r2, #1
   11ddc:	b	11e00 <__assert_fail@plt+0xe08>
   11de0:	mov	r0, r6
   11de4:	bl	13ae0 <__assert_fail@plt+0x2ae8>
   11de8:	movw	r2, #21011	; 0x5213
   11dec:	mov	r3, r0
   11df0:	str	r4, [sp]
   11df4:	mov	r0, #0
   11df8:	mov	r1, r5
   11dfc:	movt	r2, #1
   11e00:	bl	10e9c <error@plt>
   11e04:	movw	r0, #24804	; 0x60e4
   11e08:	movt	r0, #2
   11e0c:	ldr	r0, [r0]
   11e10:	bl	10df4 <_exit@plt>
   11e14:	b	10dd0 <posix_fadvise64@plt>
   11e18:	cmp	r0, #0
   11e1c:	bxeq	lr
   11e20:	push	{r4, sl, fp, lr}
   11e24:	add	fp, sp, #8
   11e28:	sub	sp, sp, #16
   11e2c:	mov	r4, r1
   11e30:	bl	10f68 <fileno@plt>
   11e34:	mov	r1, #0
   11e38:	mov	r2, #0
   11e3c:	mov	r3, #0
   11e40:	str	r1, [sp]
   11e44:	stmib	sp, {r1, r4}
   11e48:	bl	10dd0 <posix_fadvise64@plt>
   11e4c:	sub	sp, fp, #8
   11e50:	pop	{r4, sl, fp, pc}
   11e54:	push	{r4, r5, r6, sl, fp, lr}
   11e58:	add	fp, sp, #16
   11e5c:	sub	sp, sp, #8
   11e60:	mov	r4, r0
   11e64:	bl	10f68 <fileno@plt>
   11e68:	cmn	r0, #1
   11e6c:	ble	11ee0 <__assert_fail@plt+0xee8>
   11e70:	mov	r0, r4
   11e74:	bl	10ed8 <__freading@plt>
   11e78:	cmp	r0, #0
   11e7c:	beq	11ea8 <__assert_fail@plt+0xeb0>
   11e80:	mov	r0, r4
   11e84:	bl	10f68 <fileno@plt>
   11e88:	mov	r1, #1
   11e8c:	mov	r2, #0
   11e90:	mov	r3, #0
   11e94:	str	r1, [sp]
   11e98:	bl	10e60 <lseek64@plt>
   11e9c:	and	r0, r0, r1
   11ea0:	cmn	r0, #1
   11ea4:	beq	11ee0 <__assert_fail@plt+0xee8>
   11ea8:	mov	r0, r4
   11eac:	bl	11ef0 <__assert_fail@plt+0xef8>
   11eb0:	cmp	r0, #0
   11eb4:	beq	11ee0 <__assert_fail@plt+0xee8>
   11eb8:	bl	10f38 <__errno_location@plt>
   11ebc:	ldr	r6, [r0]
   11ec0:	mov	r5, r0
   11ec4:	mov	r0, r4
   11ec8:	bl	10f80 <fclose@plt>
   11ecc:	cmp	r6, #0
   11ed0:	strne	r6, [r5]
   11ed4:	mvnne	r0, #0
   11ed8:	sub	sp, fp, #16
   11edc:	pop	{r4, r5, r6, sl, fp, pc}
   11ee0:	mov	r0, r4
   11ee4:	sub	sp, fp, #16
   11ee8:	pop	{r4, r5, r6, sl, fp, lr}
   11eec:	b	10f80 <fclose@plt>
   11ef0:	push	{r4, sl, fp, lr}
   11ef4:	add	fp, sp, #8
   11ef8:	sub	sp, sp, #8
   11efc:	mov	r4, r0
   11f00:	cmp	r0, #0
   11f04:	beq	11f3c <__assert_fail@plt+0xf44>
   11f08:	mov	r0, r4
   11f0c:	bl	10ed8 <__freading@plt>
   11f10:	cmp	r0, #0
   11f14:	beq	11f3c <__assert_fail@plt+0xf44>
   11f18:	ldrb	r0, [r4, #1]
   11f1c:	tst	r0, #1
   11f20:	beq	11f3c <__assert_fail@plt+0xf44>
   11f24:	mov	r0, #1
   11f28:	mov	r2, #0
   11f2c:	mov	r3, #0
   11f30:	str	r0, [sp]
   11f34:	mov	r0, r4
   11f38:	bl	1211c <__assert_fail@plt+0x1124>
   11f3c:	mov	r0, r4
   11f40:	sub	sp, fp, #8
   11f44:	pop	{r4, sl, fp, lr}
   11f48:	b	10ddc <fflush@plt>
   11f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f50:	add	fp, sp, #28
   11f54:	sub	sp, sp, #4
   11f58:	mov	r5, r0
   11f5c:	mov	r0, r2
   11f60:	mov	r4, r2
   11f64:	mov	r8, r1
   11f68:	bl	10f68 <fileno@plt>
   11f6c:	mov	r6, #0
   11f70:	cmp	r0, #0
   11f74:	beq	11fb4 <__assert_fail@plt+0xfbc>
   11f78:	cmp	r0, #1
   11f7c:	beq	11fc0 <__assert_fail@plt+0xfc8>
   11f80:	cmp	r0, #2
   11f84:	beq	11f9c <__assert_fail@plt+0xfa4>
   11f88:	mov	r0, #2
   11f8c:	mov	r1, #2
   11f90:	bl	10e30 <dup2@plt>
   11f94:	subs	r6, r0, #2
   11f98:	movwne	r6, #1
   11f9c:	mov	r0, #1
   11fa0:	mov	r1, #1
   11fa4:	bl	10e30 <dup2@plt>
   11fa8:	subs	r7, r0, #1
   11fac:	movwne	r7, #1
   11fb0:	b	11fc4 <__assert_fail@plt+0xfcc>
   11fb4:	mov	r7, #0
   11fb8:	mov	r9, #0
   11fbc:	b	1206c <__assert_fail@plt+0x1074>
   11fc0:	mov	r7, #0
   11fc4:	mov	r0, #0
   11fc8:	mov	r1, #0
   11fcc:	mov	sl, #0
   11fd0:	bl	10e30 <dup2@plt>
   11fd4:	cmp	r0, #0
   11fd8:	mov	r9, #0
   11fdc:	beq	11ff4 <__assert_fail@plt+0xffc>
   11fe0:	mov	r0, #0
   11fe4:	bl	120d0 <__assert_fail@plt+0x10d8>
   11fe8:	mov	r9, #1
   11fec:	cmp	r0, #0
   11ff0:	beq	12050 <__assert_fail@plt+0x1058>
   11ff4:	cmp	r7, #0
   11ff8:	beq	12010 <__assert_fail@plt+0x1018>
   11ffc:	mov	r0, #1
   12000:	mov	sl, #1
   12004:	bl	120d0 <__assert_fail@plt+0x10d8>
   12008:	cmp	r0, #0
   1200c:	beq	12050 <__assert_fail@plt+0x1058>
   12010:	cmp	r6, #0
   12014:	beq	12064 <__assert_fail@plt+0x106c>
   12018:	mov	r0, #2
   1201c:	bl	120d0 <__assert_fail@plt+0x10d8>
   12020:	mov	r6, #1
   12024:	cmp	r0, #0
   12028:	bne	12068 <__assert_fail@plt+0x1070>
   1202c:	bl	10f38 <__errno_location@plt>
   12030:	ldr	r8, [r0]
   12034:	mov	r4, r0
   12038:	mov	r0, #2
   1203c:	bl	10fec <close@plt>
   12040:	mov	r5, #0
   12044:	cmp	sl, #0
   12048:	bne	120a4 <__assert_fail@plt+0x10ac>
   1204c:	b	120ac <__assert_fail@plt+0x10b4>
   12050:	bl	10f38 <__errno_location@plt>
   12054:	ldr	r8, [r0]
   12058:	mov	r4, r0
   1205c:	mov	r5, #0
   12060:	b	1208c <__assert_fail@plt+0x1094>
   12064:	mov	r6, #0
   12068:	mov	r7, sl
   1206c:	mov	r0, r5
   12070:	mov	r1, r8
   12074:	mov	r2, r4
   12078:	bl	10ef0 <freopen64@plt>
   1207c:	mov	r5, r0
   12080:	bl	10f38 <__errno_location@plt>
   12084:	ldr	r8, [r0]
   12088:	mov	r4, r0
   1208c:	cmp	r6, #0
   12090:	beq	1209c <__assert_fail@plt+0x10a4>
   12094:	mov	r0, #2
   12098:	bl	10fec <close@plt>
   1209c:	cmp	r7, #0
   120a0:	beq	120ac <__assert_fail@plt+0x10b4>
   120a4:	mov	r0, #1
   120a8:	bl	10fec <close@plt>
   120ac:	cmp	r9, #0
   120b0:	beq	120bc <__assert_fail@plt+0x10c4>
   120b4:	mov	r0, #0
   120b8:	bl	10fec <close@plt>
   120bc:	cmp	r5, #0
   120c0:	mov	r0, r5
   120c4:	streq	r8, [r4]
   120c8:	sub	sp, fp, #28
   120cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120d0:	push	{r4, sl, fp, lr}
   120d4:	add	fp, sp, #8
   120d8:	mov	r4, r0
   120dc:	movw	r0, #21018	; 0x521a
   120e0:	mov	r1, #0
   120e4:	movt	r0, #1
   120e8:	bl	10ea8 <open64@plt>
   120ec:	mov	r1, #1
   120f0:	cmp	r0, r4
   120f4:	beq	12114 <__assert_fail@plt+0x111c>
   120f8:	cmp	r0, #0
   120fc:	bmi	12110 <__assert_fail@plt+0x1118>
   12100:	bl	10fec <close@plt>
   12104:	bl	10f38 <__errno_location@plt>
   12108:	mov	r1, #9
   1210c:	str	r1, [r0]
   12110:	mov	r1, #0
   12114:	mov	r0, r1
   12118:	pop	{r4, sl, fp, pc}
   1211c:	push	{r4, r5, r6, r7, fp, lr}
   12120:	add	fp, sp, #16
   12124:	sub	sp, sp, #8
   12128:	mov	r4, r0
   1212c:	ldr	r0, [r0, #4]
   12130:	mov	r5, r3
   12134:	mov	r6, r2
   12138:	ldr	r1, [r4, #8]
   1213c:	cmp	r1, r0
   12140:	bne	1215c <__assert_fail@plt+0x1164>
   12144:	ldrd	r0, [r4, #16]
   12148:	cmp	r1, r0
   1214c:	bne	1215c <__assert_fail@plt+0x1164>
   12150:	ldr	r0, [r4, #36]	; 0x24
   12154:	cmp	r0, #0
   12158:	beq	12174 <__assert_fail@plt+0x117c>
   1215c:	mov	r0, r4
   12160:	mov	r2, r6
   12164:	mov	r3, r5
   12168:	sub	sp, fp, #16
   1216c:	pop	{r4, r5, r6, r7, fp, lr}
   12170:	b	10f8c <fseeko64@plt>
   12174:	ldr	r7, [fp, #8]
   12178:	mov	r0, r4
   1217c:	bl	10f68 <fileno@plt>
   12180:	mov	r2, r6
   12184:	mov	r3, r5
   12188:	str	r7, [sp]
   1218c:	bl	10e60 <lseek64@plt>
   12190:	and	r2, r0, r1
   12194:	cmn	r2, #1
   12198:	beq	121b4 <__assert_fail@plt+0x11bc>
   1219c:	strd	r0, [r4, #80]	; 0x50
   121a0:	ldr	r0, [r4]
   121a4:	bic	r0, r0, #16
   121a8:	str	r0, [r4]
   121ac:	mov	r0, #0
   121b0:	b	121b8 <__assert_fail@plt+0x11c0>
   121b4:	mvn	r0, #0
   121b8:	sub	sp, fp, #16
   121bc:	pop	{r4, r5, r6, r7, fp, pc}
   121c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   121c4:	add	fp, sp, #24
   121c8:	sub	sp, sp, #8
   121cc:	movw	r6, #24904	; 0x6148
   121d0:	mov	r4, #0
   121d4:	cmp	r0, #2
   121d8:	movt	r6, #2
   121dc:	ldr	r7, [r6]
   121e0:	str	r4, [r6]
   121e4:	bne	12258 <__assert_fail@plt+0x1260>
   121e8:	mov	r8, r3
   121ec:	movw	r3, #21044	; 0x5234
   121f0:	mov	r5, r2
   121f4:	movw	r2, #21028	; 0x5224
   121f8:	mov	r0, #2
   121fc:	str	r4, [sp]
   12200:	movt	r2, #1
   12204:	movt	r3, #1
   12208:	bl	10efc <getopt_long@plt>
   1220c:	cmp	r0, #104	; 0x68
   12210:	beq	1224c <__assert_fail@plt+0x1254>
   12214:	cmp	r0, #118	; 0x76
   12218:	bne	12258 <__assert_fail@plt+0x1260>
   1221c:	movw	r0, #24900	; 0x6144
   12220:	ldr	r3, [fp, #8]
   12224:	add	r1, fp, #16
   12228:	mov	r2, r8
   1222c:	movt	r0, #2
   12230:	str	r1, [sp, #4]
   12234:	str	r1, [sp]
   12238:	mov	r1, r5
   1223c:	ldr	r0, [r0]
   12240:	bl	14444 <__assert_fail@plt+0x344c>
   12244:	mov	r0, #0
   12248:	bl	10f14 <exit@plt>
   1224c:	ldr	r1, [fp, #12]
   12250:	mov	r0, #0
   12254:	blx	r1
   12258:	movw	r0, #24880	; 0x6130
   1225c:	str	r7, [r6]
   12260:	movt	r0, #2
   12264:	str	r4, [r0]
   12268:	sub	sp, fp, #24
   1226c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12270:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12274:	add	fp, sp, #24
   12278:	sub	sp, sp, #8
   1227c:	mov	r8, r3
   12280:	ldr	r3, [fp, #12]
   12284:	movw	r7, #24904	; 0x6148
   12288:	movw	r5, #20631	; 0x5097
   1228c:	mov	r9, r2
   12290:	mov	r2, #1
   12294:	mov	r6, #0
   12298:	movt	r7, #2
   1229c:	movt	r5, #1
   122a0:	str	r6, [sp]
   122a4:	ldr	r4, [r7]
   122a8:	str	r2, [r7]
   122ac:	movw	r2, #21028	; 0x5224
   122b0:	cmp	r3, #0
   122b4:	movw	r3, #21044	; 0x5234
   122b8:	movt	r2, #1
   122bc:	movt	r3, #1
   122c0:	movne	r2, r5
   122c4:	bl	10efc <getopt_long@plt>
   122c8:	cmn	r0, #1
   122cc:	beq	122f8 <__assert_fail@plt+0x1300>
   122d0:	cmp	r0, #104	; 0x68
   122d4:	beq	122ec <__assert_fail@plt+0x12f4>
   122d8:	cmp	r0, #118	; 0x76
   122dc:	beq	12304 <__assert_fail@plt+0x130c>
   122e0:	movw	r0, #24804	; 0x60e4
   122e4:	movt	r0, #2
   122e8:	ldr	r6, [r0]
   122ec:	ldr	r1, [fp, #16]
   122f0:	mov	r0, r6
   122f4:	blx	r1
   122f8:	str	r4, [r7]
   122fc:	sub	sp, fp, #24
   12300:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12304:	movw	r0, #24900	; 0x6144
   12308:	ldr	r3, [fp, #8]
   1230c:	add	r1, fp, #20
   12310:	mov	r2, r8
   12314:	movt	r0, #2
   12318:	str	r1, [sp, #4]
   1231c:	str	r1, [sp]
   12320:	mov	r1, r9
   12324:	ldr	r0, [r0]
   12328:	bl	14444 <__assert_fail@plt+0x344c>
   1232c:	mov	r0, #0
   12330:	bl	10f14 <exit@plt>
   12334:	push	{r4, r5, fp, lr}
   12338:	add	fp, sp, #8
   1233c:	cmp	r0, #0
   12340:	beq	123d4 <__assert_fail@plt+0x13dc>
   12344:	mov	r1, #47	; 0x2f
   12348:	mov	r4, r0
   1234c:	bl	10fa4 <strrchr@plt>
   12350:	cmp	r0, #0
   12354:	mov	r5, r4
   12358:	addne	r5, r0, #1
   1235c:	sub	r0, r5, r4
   12360:	cmp	r0, #7
   12364:	blt	123b8 <__assert_fail@plt+0x13c0>
   12368:	movw	r1, #21148	; 0x529c
   1236c:	sub	r0, r5, #7
   12370:	mov	r2, #7
   12374:	movt	r1, #1
   12378:	bl	10fd4 <strncmp@plt>
   1237c:	cmp	r0, #0
   12380:	bne	123b8 <__assert_fail@plt+0x13c0>
   12384:	movw	r1, #21156	; 0x52a4
   12388:	mov	r0, r5
   1238c:	mov	r2, #3
   12390:	movt	r1, #1
   12394:	bl	10fd4 <strncmp@plt>
   12398:	cmp	r0, #0
   1239c:	beq	123a8 <__assert_fail@plt+0x13b0>
   123a0:	mov	r4, r5
   123a4:	b	123b8 <__assert_fail@plt+0x13c0>
   123a8:	movw	r0, #24872	; 0x6128
   123ac:	add	r4, r5, #3
   123b0:	movt	r0, #2
   123b4:	str	r4, [r0]
   123b8:	movw	r0, #24876	; 0x612c
   123bc:	movt	r0, #2
   123c0:	str	r4, [r0]
   123c4:	movw	r0, #24936	; 0x6168
   123c8:	movt	r0, #2
   123cc:	str	r4, [r0]
   123d0:	pop	{r4, r5, fp, pc}
   123d4:	movw	r0, #24888	; 0x6138
   123d8:	movt	r0, #2
   123dc:	ldr	r1, [r0]
   123e0:	movw	r0, #21092	; 0x5264
   123e4:	movt	r0, #1
   123e8:	bl	10fc8 <fputs@plt>
   123ec:	bl	10fe0 <abort@plt>
   123f0:	push	{r4, r5, r6, sl, fp, lr}
   123f4:	add	fp, sp, #16
   123f8:	mov	r4, r0
   123fc:	movw	r0, #24944	; 0x6170
   12400:	movt	r0, #2
   12404:	cmp	r4, #0
   12408:	moveq	r4, r0
   1240c:	bl	10f38 <__errno_location@plt>
   12410:	ldr	r6, [r0]
   12414:	mov	r5, r0
   12418:	mov	r0, r4
   1241c:	mov	r1, #48	; 0x30
   12420:	bl	148ec <__assert_fail@plt+0x38f4>
   12424:	str	r6, [r5]
   12428:	pop	{r4, r5, r6, sl, fp, pc}
   1242c:	movw	r1, #24944	; 0x6170
   12430:	cmp	r0, #0
   12434:	movt	r1, #2
   12438:	movne	r1, r0
   1243c:	ldr	r0, [r1]
   12440:	bx	lr
   12444:	movw	r2, #24944	; 0x6170
   12448:	cmp	r0, #0
   1244c:	movt	r2, #2
   12450:	movne	r2, r0
   12454:	str	r1, [r2]
   12458:	bx	lr
   1245c:	movw	r3, #24944	; 0x6170
   12460:	cmp	r0, #0
   12464:	and	r2, r2, #1
   12468:	movt	r3, #2
   1246c:	movne	r3, r0
   12470:	ubfx	r0, r1, #5, #3
   12474:	and	r1, r1, #31
   12478:	add	ip, r3, r0, lsl #2
   1247c:	mov	r0, #1
   12480:	ldr	r3, [ip, #8]
   12484:	and	r0, r0, r3, lsr r1
   12488:	eor	r2, r0, r2
   1248c:	eor	r1, r3, r2, lsl r1
   12490:	str	r1, [ip, #8]
   12494:	bx	lr
   12498:	movw	r2, #24944	; 0x6170
   1249c:	cmp	r0, #0
   124a0:	movt	r2, #2
   124a4:	movne	r2, r0
   124a8:	ldr	r0, [r2, #4]
   124ac:	str	r1, [r2, #4]
   124b0:	bx	lr
   124b4:	push	{fp, lr}
   124b8:	mov	fp, sp
   124bc:	movw	r3, #24944	; 0x6170
   124c0:	cmp	r0, #0
   124c4:	movt	r3, #2
   124c8:	movne	r3, r0
   124cc:	cmp	r1, #0
   124d0:	mov	r0, #10
   124d4:	cmpne	r2, #0
   124d8:	str	r0, [r3]
   124dc:	bne	124e4 <__assert_fail@plt+0x14ec>
   124e0:	bl	10fe0 <abort@plt>
   124e4:	str	r1, [r3, #40]	; 0x28
   124e8:	str	r2, [r3, #44]	; 0x2c
   124ec:	pop	{fp, pc}
   124f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124f4:	add	fp, sp, #28
   124f8:	sub	sp, sp, #20
   124fc:	mov	r7, r0
   12500:	ldr	r0, [fp, #8]
   12504:	movw	r5, #24944	; 0x6170
   12508:	mov	r8, r3
   1250c:	mov	r9, r2
   12510:	mov	sl, r1
   12514:	movt	r5, #2
   12518:	cmp	r0, #0
   1251c:	movne	r5, r0
   12520:	bl	10f38 <__errno_location@plt>
   12524:	ldr	r2, [r5, #40]	; 0x28
   12528:	ldr	r3, [r5, #44]	; 0x2c
   1252c:	mov	r4, r0
   12530:	ldm	r5, {r0, r1}
   12534:	add	r5, r5, #8
   12538:	ldr	r6, [r4]
   1253c:	stm	sp, {r0, r1, r5}
   12540:	mov	r0, r7
   12544:	mov	r1, sl
   12548:	str	r2, [sp, #12]
   1254c:	str	r3, [sp, #16]
   12550:	mov	r2, r9
   12554:	mov	r3, r8
   12558:	bl	12568 <__assert_fail@plt+0x1570>
   1255c:	str	r6, [r4]
   12560:	sub	sp, fp, #28
   12564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1256c:	add	fp, sp, #28
   12570:	sub	sp, sp, #156	; 0x9c
   12574:	mov	r5, r0
   12578:	add	r0, r2, #1
   1257c:	mov	r6, r1
   12580:	mov	sl, r3
   12584:	str	r2, [fp, #-80]	; 0xffffffb0
   12588:	str	r0, [sp, #72]	; 0x48
   1258c:	ldr	r0, [fp, #12]
   12590:	and	r1, r0, #1
   12594:	str	r1, [sp, #32]
   12598:	and	r1, r0, #4
   1259c:	str	r1, [sp, #28]
   125a0:	ubfx	r9, r0, #1, #1
   125a4:	bl	10e6c <__ctype_get_mb_cur_max@plt>
   125a8:	str	r0, [sp, #40]	; 0x28
   125ac:	ldr	r0, [fp, #24]
   125b0:	ldr	r7, [fp, #8]
   125b4:	mov	r1, #0
   125b8:	mov	lr, #0
   125bc:	str	r5, [fp, #-84]	; 0xffffffac
   125c0:	str	r1, [sp, #60]	; 0x3c
   125c4:	mov	r1, #1
   125c8:	str	r1, [fp, #-48]	; 0xffffffd0
   125cc:	str	r0, [sp, #80]	; 0x50
   125d0:	ldr	r0, [fp, #20]
   125d4:	str	r0, [sp, #76]	; 0x4c
   125d8:	mov	r0, #0
   125dc:	str	r0, [sp, #56]	; 0x38
   125e0:	mov	r0, #0
   125e4:	str	r0, [fp, #-88]	; 0xffffffa8
   125e8:	mov	r0, #0
   125ec:	str	r0, [fp, #-72]	; 0xffffffb8
   125f0:	mov	r0, #0
   125f4:	cmp	r7, #10
   125f8:	bhi	135d4 <__assert_fail@plt+0x25dc>
   125fc:	add	r1, pc, #24
   12600:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12604:	mov	ip, r6
   12608:	mov	r8, #0
   1260c:	mov	r2, #1
   12610:	mov	r6, #0
   12614:	mov	r3, sl
   12618:	ldr	pc, [r1, r7, lsl #2]
   1261c:	andeq	r2, r1, r8, lsl #14
   12620:	andeq	r2, r1, ip, asr r7
   12624:	andeq	r2, r1, ip, lsl r7
   12628:	andeq	r2, r1, r0, lsl #14
   1262c:	andeq	r2, r1, r0, asr r7
   12630:	andeq	r2, r1, r4, lsl #15
   12634:	andeq	r2, r1, ip, lsr #14
   12638:	andeq	r2, r1, r8, lsl #16
   1263c:	andeq	r2, r1, r8, asr #12
   12640:	andeq	r2, r1, r8, asr #12
   12644:	andeq	r2, r1, r8, lsl #13
   12648:	movw	r0, #21238	; 0x52f6
   1264c:	mov	r1, r7
   12650:	mov	r6, r5
   12654:	mov	r4, ip
   12658:	mov	r5, lr
   1265c:	movt	r0, #1
   12660:	bl	13d38 <__assert_fail@plt+0x2d40>
   12664:	str	r0, [sp, #76]	; 0x4c
   12668:	movw	r0, #21240	; 0x52f8
   1266c:	mov	r1, r7
   12670:	movt	r0, #1
   12674:	bl	13d38 <__assert_fail@plt+0x2d40>
   12678:	mov	lr, r5
   1267c:	mov	r5, r6
   12680:	mov	ip, r4
   12684:	str	r0, [sp, #80]	; 0x50
   12688:	mov	r8, #0
   1268c:	tst	r9, #1
   12690:	str	lr, [sp, #44]	; 0x2c
   12694:	bne	126cc <__assert_fail@plt+0x16d4>
   12698:	ldr	r0, [sp, #76]	; 0x4c
   1269c:	ldrb	r0, [r0]
   126a0:	cmp	r0, #0
   126a4:	beq	126cc <__assert_fail@plt+0x16d4>
   126a8:	ldr	r1, [sp, #76]	; 0x4c
   126ac:	mov	r8, #0
   126b0:	add	r1, r1, #1
   126b4:	cmp	r8, ip
   126b8:	strbcc	r0, [r5, r8]
   126bc:	ldrb	r0, [r1, r8]
   126c0:	add	r8, r8, #1
   126c4:	cmp	r0, #0
   126c8:	bne	126b4 <__assert_fail@plt+0x16bc>
   126cc:	ldr	r6, [sp, #80]	; 0x50
   126d0:	mov	r4, ip
   126d4:	mov	r0, r6
   126d8:	bl	10f2c <strlen@plt>
   126dc:	mov	ip, r4
   126e0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   126e4:	ldr	lr, [sp, #44]	; 0x2c
   126e8:	str	r6, [fp, #-88]	; 0xffffffa8
   126ec:	str	r0, [fp, #-72]	; 0xffffffb8
   126f0:	mov	r2, #1
   126f4:	mov	r6, r9
   126f8:	mov	r3, sl
   126fc:	b	12808 <__assert_fail@plt+0x1810>
   12700:	mov	r0, #1
   12704:	b	1275c <__assert_fail@plt+0x1764>
   12708:	mov	r7, #0
   1270c:	mov	r8, #0
   12710:	mov	r2, r0
   12714:	mov	r6, #0
   12718:	b	12808 <__assert_fail@plt+0x1810>
   1271c:	tst	r9, #1
   12720:	bne	1275c <__assert_fail@plt+0x1764>
   12724:	mov	r2, r0
   12728:	b	127b4 <__assert_fail@plt+0x17bc>
   1272c:	mov	r0, #1
   12730:	mov	r8, #0
   12734:	mov	r7, #5
   12738:	mov	r2, #1
   1273c:	str	r0, [fp, #-72]	; 0xffffffb8
   12740:	movw	r0, #21236	; 0x52f4
   12744:	movt	r0, #1
   12748:	str	r0, [fp, #-88]	; 0xffffffa8
   1274c:	b	1277c <__assert_fail@plt+0x1784>
   12750:	mov	r2, #1
   12754:	tst	r9, #1
   12758:	beq	127b4 <__assert_fail@plt+0x17bc>
   1275c:	mov	r1, #1
   12760:	mov	r8, #0
   12764:	mov	r7, #2
   12768:	mov	r2, r0
   1276c:	str	r1, [fp, #-72]	; 0xffffffb8
   12770:	movw	r1, #21240	; 0x52f8
   12774:	movt	r1, #1
   12778:	str	r1, [fp, #-88]	; 0xffffffa8
   1277c:	mov	r6, #1
   12780:	b	12808 <__assert_fail@plt+0x1810>
   12784:	tst	r9, #1
   12788:	beq	127d8 <__assert_fail@plt+0x17e0>
   1278c:	mov	r0, #1
   12790:	mov	r8, #0
   12794:	mov	r2, #1
   12798:	mov	r6, #1
   1279c:	mov	r7, #5
   127a0:	str	r0, [fp, #-72]	; 0xffffffb8
   127a4:	movw	r0, #21236	; 0x52f4
   127a8:	movt	r0, #1
   127ac:	str	r0, [fp, #-88]	; 0xffffffa8
   127b0:	b	12808 <__assert_fail@plt+0x1810>
   127b4:	cmp	ip, #0
   127b8:	mov	r8, #1
   127bc:	mov	r6, #0
   127c0:	mov	r7, #2
   127c4:	movne	r0, #39	; 0x27
   127c8:	strbne	r0, [r5]
   127cc:	movw	r0, #21240	; 0x52f8
   127d0:	movt	r0, #1
   127d4:	b	127fc <__assert_fail@plt+0x1804>
   127d8:	cmp	ip, #0
   127dc:	mov	r8, #1
   127e0:	mov	r2, #1
   127e4:	mov	r7, #5
   127e8:	mov	r6, #0
   127ec:	movne	r0, #34	; 0x22
   127f0:	strbne	r0, [r5]
   127f4:	movw	r0, #21236	; 0x52f4
   127f8:	movt	r0, #1
   127fc:	str	r0, [fp, #-88]	; 0xffffffa8
   12800:	mov	r0, #1
   12804:	str	r0, [fp, #-72]	; 0xffffffb8
   12808:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1280c:	str	r7, [fp, #-68]	; 0xffffffbc
   12810:	str	r6, [fp, #-76]	; 0xffffffb4
   12814:	str	r2, [sp, #84]	; 0x54
   12818:	cmp	r0, #0
   1281c:	movwne	r0, #1
   12820:	and	r1, r0, r6
   12824:	and	r1, r2, r1
   12828:	str	r1, [sp, #48]	; 0x30
   1282c:	sub	r1, r7, #2
   12830:	clz	r1, r1
   12834:	lsr	r1, r1, #5
   12838:	and	r1, r1, r6
   1283c:	str	r1, [sp, #64]	; 0x40
   12840:	subs	r1, r7, #2
   12844:	eor	r7, r6, #1
   12848:	movwne	r1, #1
   1284c:	str	r7, [sp, #92]	; 0x5c
   12850:	orr	r7, r1, r7
   12854:	and	r1, r1, r2
   12858:	and	r0, r0, r1
   1285c:	str	r7, [sp, #68]	; 0x44
   12860:	mov	r7, #0
   12864:	str	r0, [fp, #-60]	; 0xffffffc4
   12868:	orr	r0, r1, r6
   1286c:	ldr	r1, [fp, #16]
   12870:	eor	r0, r0, #1
   12874:	clz	r1, r1
   12878:	lsr	r1, r1, #5
   1287c:	orr	r0, r1, r0
   12880:	str	r0, [fp, #-64]	; 0xffffffc0
   12884:	eor	r0, r2, #1
   12888:	str	r0, [sp, #52]	; 0x34
   1288c:	cmn	r3, #1
   12890:	beq	128a0 <__assert_fail@plt+0x18a8>
   12894:	cmp	r7, r3
   12898:	bne	128ac <__assert_fail@plt+0x18b4>
   1289c:	b	13408 <__assert_fail@plt+0x2410>
   128a0:	ldrb	r0, [r4, r7]
   128a4:	cmp	r0, #0
   128a8:	beq	13410 <__assert_fail@plt+0x2418>
   128ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   128b0:	cmp	r0, #0
   128b4:	beq	128fc <__assert_fail@plt+0x1904>
   128b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   128bc:	add	r5, r7, r0
   128c0:	cmp	r0, #2
   128c4:	bcc	12910 <__assert_fail@plt+0x1918>
   128c8:	mov	r0, #0
   128cc:	cmn	r3, #1
   128d0:	str	r0, [fp, #-56]	; 0xffffffc8
   128d4:	bne	12918 <__assert_fail@plt+0x1920>
   128d8:	mov	r0, r4
   128dc:	mov	r4, ip
   128e0:	mov	r6, lr
   128e4:	bl	10f2c <strlen@plt>
   128e8:	mov	ip, r4
   128ec:	ldr	r4, [fp, #-80]	; 0xffffffb0
   128f0:	mov	lr, r6
   128f4:	mov	r3, r0
   128f8:	b	12918 <__assert_fail@plt+0x1920>
   128fc:	mov	r0, #0
   12900:	mov	sl, r3
   12904:	str	r0, [fp, #-56]	; 0xffffffc8
   12908:	mov	r0, #0
   1290c:	b	12984 <__assert_fail@plt+0x198c>
   12910:	mov	r0, #0
   12914:	str	r0, [fp, #-56]	; 0xffffffc8
   12918:	cmp	r5, r3
   1291c:	bls	12930 <__assert_fail@plt+0x1938>
   12920:	ldr	r5, [fp, #-84]	; 0xffffffac
   12924:	mov	r0, #0
   12928:	mov	sl, r3
   1292c:	b	12984 <__assert_fail@plt+0x198c>
   12930:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12934:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12938:	add	r0, r4, r7
   1293c:	mov	r5, lr
   12940:	mov	r6, ip
   12944:	mov	sl, r3
   12948:	bl	10f20 <bcmp@plt>
   1294c:	ldr	r2, [sp, #92]	; 0x5c
   12950:	cmp	r0, #0
   12954:	ldr	r3, [fp, #-84]	; 0xffffffac
   12958:	mov	r1, r0
   1295c:	movwne	r1, #1
   12960:	orr	r1, r1, r2
   12964:	tst	r1, #1
   12968:	beq	13494 <__assert_fail@plt+0x249c>
   1296c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12970:	clz	r0, r0
   12974:	mov	lr, r5
   12978:	mov	ip, r6
   1297c:	mov	r5, r3
   12980:	lsr	r0, r0, #5
   12984:	str	r0, [fp, #-52]	; 0xffffffcc
   12988:	ldrb	r6, [r4, r7]
   1298c:	cmp	r6, #126	; 0x7e
   12990:	bhi	12eb8 <__assert_fail@plt+0x1ec0>
   12994:	add	r3, pc, #16
   12998:	mov	r9, #1
   1299c:	mov	r2, #110	; 0x6e
   129a0:	mov	r0, #97	; 0x61
   129a4:	mov	r1, #0
   129a8:	ldr	pc, [r3, r6, lsl #2]
   129ac:	andeq	r2, r1, ip, lsl sp
   129b0:			; <UNDEFINED> instruction: 0x00012eb8
   129b4:			; <UNDEFINED> instruction: 0x00012eb8
   129b8:			; <UNDEFINED> instruction: 0x00012eb8
   129bc:			; <UNDEFINED> instruction: 0x00012eb8
   129c0:			; <UNDEFINED> instruction: 0x00012eb8
   129c4:			; <UNDEFINED> instruction: 0x00012eb8
   129c8:	andeq	r2, r1, r8, lsr pc
   129cc:	strdeq	r2, [r1], -ip
   129d0:	strdeq	r2, [r1], -r4
   129d4:	andeq	r2, r1, r8, lsl #26
   129d8:	andeq	r2, r1, r0, lsr #28
   129dc:	andeq	r2, r1, ip, ror #25
   129e0:	andeq	r2, r1, r4, lsl #26
   129e4:			; <UNDEFINED> instruction: 0x00012eb8
   129e8:			; <UNDEFINED> instruction: 0x00012eb8
   129ec:			; <UNDEFINED> instruction: 0x00012eb8
   129f0:			; <UNDEFINED> instruction: 0x00012eb8
   129f4:			; <UNDEFINED> instruction: 0x00012eb8
   129f8:			; <UNDEFINED> instruction: 0x00012eb8
   129fc:			; <UNDEFINED> instruction: 0x00012eb8
   12a00:			; <UNDEFINED> instruction: 0x00012eb8
   12a04:			; <UNDEFINED> instruction: 0x00012eb8
   12a08:			; <UNDEFINED> instruction: 0x00012eb8
   12a0c:			; <UNDEFINED> instruction: 0x00012eb8
   12a10:			; <UNDEFINED> instruction: 0x00012eb8
   12a14:			; <UNDEFINED> instruction: 0x00012eb8
   12a18:			; <UNDEFINED> instruction: 0x00012eb8
   12a1c:			; <UNDEFINED> instruction: 0x00012eb8
   12a20:			; <UNDEFINED> instruction: 0x00012eb8
   12a24:			; <UNDEFINED> instruction: 0x00012eb8
   12a28:			; <UNDEFINED> instruction: 0x00012eb8
   12a2c:	muleq	r1, ip, ip
   12a30:	andeq	r2, r1, r0, lsr #25
   12a34:	andeq	r2, r1, r0, lsr #25
   12a38:	andeq	r2, r1, r4, lsl #25
   12a3c:	andeq	r2, r1, r0, lsr #25
   12a40:	andeq	r2, r1, r8, lsr #23
   12a44:	andeq	r2, r1, r0, lsr #25
   12a48:	andeq	r2, r1, r8, lsr #28
   12a4c:	andeq	r2, r1, r0, lsr #25
   12a50:	andeq	r2, r1, r0, lsr #25
   12a54:	andeq	r2, r1, r0, lsr #25
   12a58:	andeq	r2, r1, r8, lsr #23
   12a5c:	andeq	r2, r1, r8, lsr #23
   12a60:	andeq	r2, r1, r8, lsr #23
   12a64:	andeq	r2, r1, r8, lsr #23
   12a68:	andeq	r2, r1, r8, lsr #23
   12a6c:	andeq	r2, r1, r8, lsr #23
   12a70:	andeq	r2, r1, r8, lsr #23
   12a74:	andeq	r2, r1, r8, lsr #23
   12a78:	andeq	r2, r1, r8, lsr #23
   12a7c:	andeq	r2, r1, r8, lsr #23
   12a80:	andeq	r2, r1, r8, lsr #23
   12a84:	andeq	r2, r1, r8, lsr #23
   12a88:	andeq	r2, r1, r8, lsr #23
   12a8c:	andeq	r2, r1, r8, lsr #23
   12a90:	andeq	r2, r1, r8, lsr #23
   12a94:	andeq	r2, r1, r8, lsr #23
   12a98:	andeq	r2, r1, r0, lsr #25
   12a9c:	andeq	r2, r1, r0, lsr #25
   12aa0:	andeq	r2, r1, r0, lsr #25
   12aa4:	andeq	r2, r1, r0, lsr #25
   12aa8:	strdeq	r2, [r1], -r4
   12aac:			; <UNDEFINED> instruction: 0x00012eb8
   12ab0:	andeq	r2, r1, r8, lsr #23
   12ab4:	andeq	r2, r1, r8, lsr #23
   12ab8:	andeq	r2, r1, r8, lsr #23
   12abc:	andeq	r2, r1, r8, lsr #23
   12ac0:	andeq	r2, r1, r8, lsr #23
   12ac4:	andeq	r2, r1, r8, lsr #23
   12ac8:	andeq	r2, r1, r8, lsr #23
   12acc:	andeq	r2, r1, r8, lsr #23
   12ad0:	andeq	r2, r1, r8, lsr #23
   12ad4:	andeq	r2, r1, r8, lsr #23
   12ad8:	andeq	r2, r1, r8, lsr #23
   12adc:	andeq	r2, r1, r8, lsr #23
   12ae0:	andeq	r2, r1, r8, lsr #23
   12ae4:	andeq	r2, r1, r8, lsr #23
   12ae8:	andeq	r2, r1, r8, lsr #23
   12aec:	andeq	r2, r1, r8, lsr #23
   12af0:	andeq	r2, r1, r8, lsr #23
   12af4:	andeq	r2, r1, r8, lsr #23
   12af8:	andeq	r2, r1, r8, lsr #23
   12afc:	andeq	r2, r1, r8, lsr #23
   12b00:	andeq	r2, r1, r8, lsr #23
   12b04:	andeq	r2, r1, r8, lsr #23
   12b08:	andeq	r2, r1, r8, lsr #23
   12b0c:	andeq	r2, r1, r8, lsr #23
   12b10:	andeq	r2, r1, r8, lsr #23
   12b14:	andeq	r2, r1, r8, lsr #23
   12b18:	andeq	r2, r1, r0, lsr #25
   12b1c:	andeq	r2, r1, r8, asr #25
   12b20:	andeq	r2, r1, r8, lsr #23
   12b24:	andeq	r2, r1, r0, lsr #25
   12b28:	andeq	r2, r1, r8, lsr #23
   12b2c:	andeq	r2, r1, r0, lsr #25
   12b30:	andeq	r2, r1, r8, lsr #23
   12b34:	andeq	r2, r1, r8, lsr #23
   12b38:	andeq	r2, r1, r8, lsr #23
   12b3c:	andeq	r2, r1, r8, lsr #23
   12b40:	andeq	r2, r1, r8, lsr #23
   12b44:	andeq	r2, r1, r8, lsr #23
   12b48:	andeq	r2, r1, r8, lsr #23
   12b4c:	andeq	r2, r1, r8, lsr #23
   12b50:	andeq	r2, r1, r8, lsr #23
   12b54:	andeq	r2, r1, r8, lsr #23
   12b58:	andeq	r2, r1, r8, lsr #23
   12b5c:	andeq	r2, r1, r8, lsr #23
   12b60:	andeq	r2, r1, r8, lsr #23
   12b64:	andeq	r2, r1, r8, lsr #23
   12b68:	andeq	r2, r1, r8, lsr #23
   12b6c:	andeq	r2, r1, r8, lsr #23
   12b70:	andeq	r2, r1, r8, lsr #23
   12b74:	andeq	r2, r1, r8, lsr #23
   12b78:	andeq	r2, r1, r8, lsr #23
   12b7c:	andeq	r2, r1, r8, lsr #23
   12b80:	andeq	r2, r1, r8, lsr #23
   12b84:	andeq	r2, r1, r8, lsr #23
   12b88:	andeq	r2, r1, r8, lsr #23
   12b8c:	andeq	r2, r1, r8, lsr #23
   12b90:	andeq	r2, r1, r8, lsr #23
   12b94:	andeq	r2, r1, r8, lsr #23
   12b98:	andeq	r2, r1, ip, asr ip
   12b9c:	andeq	r2, r1, r0, lsr #25
   12ba0:	andeq	r2, r1, ip, asr ip
   12ba4:	andeq	r2, r1, r4, lsl #25
   12ba8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12bac:	tst	r0, #1
   12bb0:	bne	12bdc <__assert_fail@plt+0x1be4>
   12bb4:	ldr	r1, [fp, #16]
   12bb8:	ubfx	r0, r6, #5, #3
   12bbc:	mov	r2, #1
   12bc0:	ldr	r0, [r1, r0, lsl #2]
   12bc4:	and	r1, r6, #31
   12bc8:	tst	r0, r2, lsl r1
   12bcc:	beq	12bdc <__assert_fail@plt+0x1be4>
   12bd0:	mov	r0, r6
   12bd4:	mov	r1, r9
   12bd8:	b	12bf0 <__assert_fail@plt+0x1bf8>
   12bdc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12be0:	mov	r1, r9
   12be4:	cmp	r0, #0
   12be8:	mov	r0, r6
   12bec:	beq	1333c <__assert_fail@plt+0x2344>
   12bf0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12bf4:	tst	r2, #1
   12bf8:	bne	134d8 <__assert_fail@plt+0x24e0>
   12bfc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12c00:	subs	r2, r2, #2
   12c04:	movwne	r2, #1
   12c08:	orr	r2, r2, lr
   12c0c:	tst	r2, #1
   12c10:	bne	12c48 <__assert_fail@plt+0x1c50>
   12c14:	cmp	r8, ip
   12c18:	mov	lr, #1
   12c1c:	movcc	r2, #39	; 0x27
   12c20:	strbcc	r2, [r5, r8]
   12c24:	add	r2, r8, #1
   12c28:	cmp	r2, ip
   12c2c:	movcc	r3, #36	; 0x24
   12c30:	strbcc	r3, [r5, r2]
   12c34:	add	r2, r8, #2
   12c38:	add	r8, r8, #3
   12c3c:	cmp	r2, ip
   12c40:	movcc	r3, #39	; 0x27
   12c44:	strbcc	r3, [r5, r2]
   12c48:	cmp	r8, ip
   12c4c:	movcc	r2, #92	; 0x5c
   12c50:	strbcc	r2, [r5, r8]
   12c54:	add	r8, r8, #1
   12c58:	b	1337c <__assert_fail@plt+0x2384>
   12c5c:	cmp	sl, #1
   12c60:	beq	12c84 <__assert_fail@plt+0x1c8c>
   12c64:	mov	r9, #0
   12c68:	cmn	sl, #1
   12c6c:	bne	12c90 <__assert_fail@plt+0x1c98>
   12c70:	ldrb	r0, [r4, #1]
   12c74:	cmp	r0, #0
   12c78:	beq	12c84 <__assert_fail@plt+0x1c8c>
   12c7c:	mvn	sl, #0
   12c80:	b	12c90 <__assert_fail@plt+0x1c98>
   12c84:	mov	r9, #0
   12c88:	cmp	r7, #0
   12c8c:	beq	12c9c <__assert_fail@plt+0x1ca4>
   12c90:	mov	r0, #0
   12c94:	str	r0, [fp, #-56]	; 0xffffffc8
   12c98:	b	12ba8 <__assert_fail@plt+0x1bb0>
   12c9c:	mov	r1, #1
   12ca0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ca4:	cmp	r0, #2
   12ca8:	bne	12cc0 <__assert_fail@plt+0x1cc8>
   12cac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12cb0:	mov	r9, r1
   12cb4:	tst	r0, #1
   12cb8:	beq	12ba8 <__assert_fail@plt+0x1bb0>
   12cbc:	b	134d8 <__assert_fail@plt+0x24e0>
   12cc0:	mov	r9, r1
   12cc4:	b	12ba8 <__assert_fail@plt+0x1bb0>
   12cc8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ccc:	cmp	r0, #2
   12cd0:	bne	12f14 <__assert_fail@plt+0x1f1c>
   12cd4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12cd8:	tst	r0, #1
   12cdc:	bne	134d8 <__assert_fail@plt+0x24e0>
   12ce0:	mov	r0, #0
   12ce4:	str	r0, [fp, #-56]	; 0xffffffc8
   12ce8:	b	12f2c <__assert_fail@plt+0x1f34>
   12cec:	mov	r0, #102	; 0x66
   12cf0:	b	12f38 <__assert_fail@plt+0x1f40>
   12cf4:	mov	r2, #116	; 0x74
   12cf8:	b	12d08 <__assert_fail@plt+0x1d10>
   12cfc:	mov	r0, #98	; 0x62
   12d00:	b	12f38 <__assert_fail@plt+0x1f40>
   12d04:	mov	r2, #114	; 0x72
   12d08:	ldr	r0, [sp, #68]	; 0x44
   12d0c:	tst	r0, #1
   12d10:	mov	r0, r2
   12d14:	bne	12f38 <__assert_fail@plt+0x1f40>
   12d18:	b	134d8 <__assert_fail@plt+0x24e0>
   12d1c:	ldr	r0, [sp, #84]	; 0x54
   12d20:	tst	r0, #1
   12d24:	beq	12f58 <__assert_fail@plt+0x1f60>
   12d28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d2c:	tst	r0, #1
   12d30:	bne	135c4 <__assert_fail@plt+0x25cc>
   12d34:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d38:	mov	r2, sl
   12d3c:	subs	r0, r0, #2
   12d40:	movwne	r0, #1
   12d44:	orr	r0, r0, lr
   12d48:	tst	r0, #1
   12d4c:	bne	12d84 <__assert_fail@plt+0x1d8c>
   12d50:	cmp	r8, ip
   12d54:	mov	lr, #1
   12d58:	movcc	r0, #39	; 0x27
   12d5c:	strbcc	r0, [r5, r8]
   12d60:	add	r0, r8, #1
   12d64:	cmp	r0, ip
   12d68:	movcc	r1, #36	; 0x24
   12d6c:	strbcc	r1, [r5, r0]
   12d70:	add	r0, r8, #2
   12d74:	add	r8, r8, #3
   12d78:	cmp	r0, ip
   12d7c:	movcc	r1, #39	; 0x27
   12d80:	strbcc	r1, [r5, r0]
   12d84:	mov	r1, #1
   12d88:	cmp	r8, ip
   12d8c:	mov	r9, #0
   12d90:	mov	r6, #48	; 0x30
   12d94:	str	r1, [fp, #-56]	; 0xffffffc8
   12d98:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12d9c:	movcc	r0, #92	; 0x5c
   12da0:	strbcc	r0, [r5, r8]
   12da4:	add	r0, r8, #1
   12da8:	cmp	r1, #2
   12dac:	beq	130b4 <__assert_fail@plt+0x20bc>
   12db0:	add	r1, r7, #1
   12db4:	cmp	r1, r2
   12db8:	bcs	130b4 <__assert_fail@plt+0x20bc>
   12dbc:	ldrb	r1, [r4, r1]
   12dc0:	sub	r1, r1, #48	; 0x30
   12dc4:	uxtb	r1, r1
   12dc8:	cmp	r1, #9
   12dcc:	bhi	130b4 <__assert_fail@plt+0x20bc>
   12dd0:	cmp	r0, ip
   12dd4:	movcc	r1, #48	; 0x30
   12dd8:	strbcc	r1, [r5, r0]
   12ddc:	add	r0, r8, #2
   12de0:	add	r8, r8, #3
   12de4:	cmp	r0, ip
   12de8:	movcc	r1, #48	; 0x30
   12dec:	strbcc	r1, [r5, r0]
   12df0:	b	12ba8 <__assert_fail@plt+0x1bb0>
   12df4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12df8:	mov	r6, #63	; 0x3f
   12dfc:	cmp	r0, #5
   12e00:	beq	130bc <__assert_fail@plt+0x20c4>
   12e04:	mov	r1, #0
   12e08:	cmp	r0, #2
   12e0c:	str	r1, [fp, #-56]	; 0xffffffc8
   12e10:	bne	13170 <__assert_fail@plt+0x2178>
   12e14:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e18:	mov	r9, #0
   12e1c:	b	12cb4 <__assert_fail@plt+0x1cbc>
   12e20:	mov	r0, #118	; 0x76
   12e24:	b	12f38 <__assert_fail@plt+0x1f40>
   12e28:	mov	r0, #1
   12e2c:	mov	r6, #39	; 0x27
   12e30:	str	r0, [sp, #60]	; 0x3c
   12e34:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e38:	cmp	r0, #2
   12e3c:	bne	12eb0 <__assert_fail@plt+0x1eb8>
   12e40:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e44:	tst	r0, #1
   12e48:	bne	134d8 <__assert_fail@plt+0x24e0>
   12e4c:	ldr	r2, [sp, #56]	; 0x38
   12e50:	clz	r1, ip
   12e54:	mov	lr, #0
   12e58:	lsr	r1, r1, #5
   12e5c:	cmp	r2, #0
   12e60:	mov	r0, r2
   12e64:	movwne	r0, #1
   12e68:	orrs	r0, r0, r1
   12e6c:	moveq	r2, ip
   12e70:	moveq	ip, r0
   12e74:	cmp	r8, ip
   12e78:	str	r2, [sp, #56]	; 0x38
   12e7c:	movcc	r0, #39	; 0x27
   12e80:	strbcc	r0, [r5, r8]
   12e84:	add	r0, r8, #1
   12e88:	cmp	r0, ip
   12e8c:	movcc	r1, #92	; 0x5c
   12e90:	strbcc	r1, [r5, r0]
   12e94:	add	r0, r8, #2
   12e98:	add	r8, r8, #3
   12e9c:	cmp	r0, ip
   12ea0:	movcc	r1, #39	; 0x27
   12ea4:	strbcc	r1, [r5, r0]
   12ea8:	mov	r0, #0
   12eac:	str	r0, [fp, #-56]	; 0xffffffc8
   12eb0:	mov	r9, #1
   12eb4:	b	12ba8 <__assert_fail@plt+0x1bb0>
   12eb8:	ldr	r0, [sp, #40]	; 0x28
   12ebc:	str	lr, [sp, #44]	; 0x2c
   12ec0:	str	ip, [sp, #88]	; 0x58
   12ec4:	cmp	r0, #1
   12ec8:	bne	12f78 <__assert_fail@plt+0x1f80>
   12ecc:	str	sl, [sp, #36]	; 0x24
   12ed0:	bl	10f08 <__ctype_b_loc@plt>
   12ed4:	ldr	r0, [r0]
   12ed8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12edc:	mov	r1, #1
   12ee0:	add	r0, r0, r6, lsl #1
   12ee4:	ldrb	r0, [r0, #1]
   12ee8:	ubfx	r9, r0, #6, #1
   12eec:	ldr	r0, [sp, #52]	; 0x34
   12ef0:	ldr	lr, [sp, #44]	; 0x2c
   12ef4:	cmp	r1, #1
   12ef8:	orr	r3, r9, r0
   12efc:	bhi	13178 <__assert_fail@plt+0x2180>
   12f00:	tst	r3, #1
   12f04:	beq	13178 <__assert_fail@plt+0x2180>
   12f08:	ldr	sl, [sp, #36]	; 0x24
   12f0c:	ldr	ip, [sp, #88]	; 0x58
   12f10:	b	12ba8 <__assert_fail@plt+0x1bb0>
   12f14:	ldr	r1, [sp, #48]	; 0x30
   12f18:	mov	r0, #0
   12f1c:	str	r0, [fp, #-56]	; 0xffffffc8
   12f20:	mov	r0, #92	; 0x5c
   12f24:	cmp	r1, #0
   12f28:	beq	12f38 <__assert_fail@plt+0x1f40>
   12f2c:	mov	r6, #92	; 0x5c
   12f30:	mov	r9, #0
   12f34:	b	1333c <__assert_fail@plt+0x2344>
   12f38:	mov	r1, #0
   12f3c:	mov	r9, #0
   12f40:	str	r1, [fp, #-56]	; 0xffffffc8
   12f44:	ldr	r1, [sp, #84]	; 0x54
   12f48:	tst	r1, #1
   12f4c:	mov	r1, #0
   12f50:	beq	12ba8 <__assert_fail@plt+0x1bb0>
   12f54:	b	12bf0 <__assert_fail@plt+0x1bf8>
   12f58:	ldr	r0, [sp, #32]
   12f5c:	mov	r6, #0
   12f60:	mov	r9, #0
   12f64:	cmp	r0, #0
   12f68:	mov	r0, #0
   12f6c:	str	r0, [fp, #-56]	; 0xffffffc8
   12f70:	beq	12ba8 <__assert_fail@plt+0x1bb0>
   12f74:	b	13394 <__assert_fail@plt+0x239c>
   12f78:	mov	r0, #0
   12f7c:	cmn	sl, #1
   12f80:	sub	r3, fp, #40	; 0x28
   12f84:	str	r0, [fp, #-36]	; 0xffffffdc
   12f88:	str	r0, [fp, #-40]	; 0xffffffd8
   12f8c:	bne	12fa4 <__assert_fail@plt+0x1fac>
   12f90:	mov	r0, r4
   12f94:	bl	10f2c <strlen@plt>
   12f98:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12f9c:	sub	r3, fp, #40	; 0x28
   12fa0:	mov	sl, r0
   12fa4:	ldr	r0, [sp, #72]	; 0x48
   12fa8:	mov	r9, #1
   12fac:	mov	r1, #0
   12fb0:	str	sl, [sp, #36]	; 0x24
   12fb4:	add	r0, r0, r7
   12fb8:	str	r0, [sp, #20]
   12fbc:	add	r0, r1, r7
   12fc0:	str	r1, [sp, #24]
   12fc4:	add	r1, r4, r0
   12fc8:	mov	r4, r0
   12fcc:	sub	r2, sl, r0
   12fd0:	sub	r0, fp, #44	; 0x2c
   12fd4:	bl	14bc0 <__assert_fail@plt+0x3bc8>
   12fd8:	cmp	r0, #0
   12fdc:	beq	133e8 <__assert_fail@plt+0x23f0>
   12fe0:	cmn	r0, #1
   12fe4:	beq	133a0 <__assert_fail@plt+0x23a8>
   12fe8:	ldr	r2, [sp, #36]	; 0x24
   12fec:	cmn	r0, #2
   12ff0:	beq	133a8 <__assert_fail@plt+0x23b0>
   12ff4:	ldr	r2, [sp, #64]	; 0x40
   12ff8:	ldr	ip, [sp, #88]	; 0x58
   12ffc:	ldr	r4, [sp, #84]	; 0x54
   13000:	ldr	lr, [fp, #-48]	; 0xffffffd0
   13004:	cmp	r0, #2
   13008:	mov	r1, #0
   1300c:	movwcc	r1, #1
   13010:	eor	r2, r2, #1
   13014:	orrs	r1, r2, r1
   13018:	bne	13068 <__assert_fail@plt+0x2070>
   1301c:	ldr	r1, [sp, #24]
   13020:	ldr	r2, [sp, #20]
   13024:	add	r1, r2, r1
   13028:	sub	r2, r0, #1
   1302c:	ldrb	r3, [r1]
   13030:	sub	r5, r3, #94	; 0x5e
   13034:	cmp	r5, #30
   13038:	bhi	13050 <__assert_fail@plt+0x2058>
   1303c:	mov	r4, #1
   13040:	mov	sl, #1073741829	; 0x40000005
   13044:	tst	sl, r4, lsl r5
   13048:	ldr	r4, [sp, #84]	; 0x54
   1304c:	bne	134b0 <__assert_fail@plt+0x24b8>
   13050:	sub	r3, r3, #91	; 0x5b
   13054:	cmp	r3, #2
   13058:	bcc	134b0 <__assert_fail@plt+0x24b8>
   1305c:	add	r1, r1, #1
   13060:	subs	r2, r2, #1
   13064:	bne	1302c <__assert_fail@plt+0x2034>
   13068:	ldr	r5, [sp, #24]
   1306c:	str	lr, [fp, #-48]	; 0xffffffd0
   13070:	add	r5, r0, r5
   13074:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13078:	bl	10e54 <iswprint@plt>
   1307c:	cmp	r0, #0
   13080:	sub	r4, fp, #40	; 0x28
   13084:	movwne	r0, #1
   13088:	and	r9, r9, r0
   1308c:	mov	r0, r4
   13090:	bl	10e0c <mbsinit@plt>
   13094:	mov	r1, r5
   13098:	mov	r3, r4
   1309c:	ldr	sl, [sp, #36]	; 0x24
   130a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   130a4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   130a8:	cmp	r0, #0
   130ac:	beq	12fbc <__assert_fail@plt+0x1fc4>
   130b0:	b	12eec <__assert_fail@plt+0x1ef4>
   130b4:	mov	r8, r0
   130b8:	b	12ba8 <__assert_fail@plt+0x1bb0>
   130bc:	mov	r0, #0
   130c0:	str	r0, [fp, #-56]	; 0xffffffc8
   130c4:	ldr	r0, [sp, #28]
   130c8:	cmp	r0, #0
   130cc:	beq	13170 <__assert_fail@plt+0x2178>
   130d0:	add	r0, r7, #2
   130d4:	mov	r1, sl
   130d8:	cmp	r0, sl
   130dc:	bcs	13170 <__assert_fail@plt+0x2178>
   130e0:	add	r1, r7, r4
   130e4:	ldrb	r1, [r1, #1]
   130e8:	cmp	r1, #63	; 0x3f
   130ec:	bne	13170 <__assert_fail@plt+0x2178>
   130f0:	ldrb	r9, [r4, r0]
   130f4:	sub	r2, r9, #33	; 0x21
   130f8:	cmp	r2, #29
   130fc:	bhi	13170 <__assert_fail@plt+0x2178>
   13100:	mov	r1, r4
   13104:	movw	r4, #20929	; 0x51c1
   13108:	mov	r3, #1
   1310c:	movt	r4, #14336	; 0x3800
   13110:	tst	r4, r3, lsl r2
   13114:	beq	133fc <__assert_fail@plt+0x2404>
   13118:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1311c:	tst	r2, #1
   13120:	bne	135cc <__assert_fail@plt+0x25d4>
   13124:	cmp	r8, ip
   13128:	mov	r4, r1
   1312c:	mov	r7, r0
   13130:	mov	r6, r9
   13134:	movcc	r2, #63	; 0x3f
   13138:	strbcc	r2, [r5, r8]
   1313c:	add	r2, r8, #1
   13140:	cmp	r2, ip
   13144:	movcc	r3, #34	; 0x22
   13148:	strbcc	r3, [r5, r2]
   1314c:	add	r2, r8, #2
   13150:	cmp	r2, ip
   13154:	movcc	r3, #34	; 0x22
   13158:	strbcc	r3, [r5, r2]
   1315c:	add	r2, r8, #3
   13160:	add	r8, r8, #4
   13164:	cmp	r2, ip
   13168:	movcc	r3, #63	; 0x3f
   1316c:	strbcc	r3, [r5, r2]
   13170:	mov	r9, #0
   13174:	b	12ba8 <__assert_fail@plt+0x1bb0>
   13178:	ldr	sl, [sp, #36]	; 0x24
   1317c:	add	r0, r1, r7
   13180:	mov	r2, #0
   13184:	str	r3, [sp, #24]
   13188:	str	r0, [fp, #-56]	; 0xffffffc8
   1318c:	tst	r3, #1
   13190:	beq	131bc <__assert_fail@plt+0x21c4>
   13194:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13198:	tst	r0, #1
   1319c:	beq	13284 <__assert_fail@plt+0x228c>
   131a0:	ldr	r1, [sp, #88]	; 0x58
   131a4:	mov	r0, r3
   131a8:	cmp	r8, r1
   131ac:	movcc	r1, #92	; 0x5c
   131b0:	strbcc	r1, [r5, r8]
   131b4:	add	r8, r8, #1
   131b8:	b	13288 <__assert_fail@plt+0x2290>
   131bc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   131c0:	tst	r1, #1
   131c4:	bne	134d4 <__assert_fail@plt+0x24dc>
   131c8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   131cc:	subs	r2, r1, #2
   131d0:	movwne	r2, #1
   131d4:	orr	r2, r2, lr
   131d8:	tst	r2, #1
   131dc:	bne	13220 <__assert_fail@plt+0x2228>
   131e0:	ldr	r1, [sp, #88]	; 0x58
   131e4:	add	r2, r8, #1
   131e8:	mov	lr, #1
   131ec:	cmp	r8, r1
   131f0:	movcc	r1, #39	; 0x27
   131f4:	strbcc	r1, [r5, r8]
   131f8:	ldr	r1, [sp, #88]	; 0x58
   131fc:	cmp	r2, r1
   13200:	movcc	r1, #36	; 0x24
   13204:	strbcc	r1, [r5, r2]
   13208:	ldr	r1, [sp, #88]	; 0x58
   1320c:	add	r2, r8, #2
   13210:	add	r8, r8, #3
   13214:	cmp	r2, r1
   13218:	movcc	r1, #39	; 0x27
   1321c:	strbcc	r1, [r5, r2]
   13220:	ldr	r1, [sp, #88]	; 0x58
   13224:	add	r2, r8, #1
   13228:	mov	r0, r3
   1322c:	cmp	r8, r1
   13230:	movcc	r1, #92	; 0x5c
   13234:	strbcc	r1, [r5, r8]
   13238:	ldr	r1, [sp, #88]	; 0x58
   1323c:	cmp	r2, r1
   13240:	bcs	13254 <__assert_fail@plt+0x225c>
   13244:	uxtb	r3, r6
   13248:	mov	r1, #48	; 0x30
   1324c:	orr	r3, r1, r3, lsr #6
   13250:	strb	r3, [r5, r2]
   13254:	ldr	r1, [sp, #88]	; 0x58
   13258:	add	r2, r8, #2
   1325c:	add	r8, r8, #3
   13260:	cmp	r2, r1
   13264:	lsrcc	r3, r6, #3
   13268:	movcc	r1, #6
   1326c:	bficc	r3, r1, #3, #29
   13270:	mov	r1, #6
   13274:	bfi	r6, r1, #3, #29
   13278:	strbcc	r3, [r5, r2]
   1327c:	mov	r2, #1
   13280:	b	13290 <__assert_fail@plt+0x2298>
   13284:	mov	r0, r3
   13288:	mov	r1, #0
   1328c:	str	r1, [fp, #-52]	; 0xffffffcc
   13290:	mov	ip, r2
   13294:	and	r1, r2, #1
   13298:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1329c:	add	r3, r7, #1
   132a0:	cmp	r2, r3
   132a4:	bls	1332c <__assert_fail@plt+0x2334>
   132a8:	cmp	r1, #0
   132ac:	mvn	r5, lr
   132b0:	movwne	r1, #1
   132b4:	orr	r5, r5, r1
   132b8:	tst	r5, #1
   132bc:	bne	13300 <__assert_fail@plt+0x2308>
   132c0:	ldr	r1, [sp, #88]	; 0x58
   132c4:	ldr	r5, [fp, #-84]	; 0xffffffac
   132c8:	mov	r2, r4
   132cc:	ldr	r4, [sp, #88]	; 0x58
   132d0:	ldr	r0, [sp, #24]
   132d4:	mov	lr, #0
   132d8:	cmp	r8, r1
   132dc:	movcc	r1, #39	; 0x27
   132e0:	strbcc	r1, [r5, r8]
   132e4:	add	r1, r8, #1
   132e8:	add	r8, r8, #2
   132ec:	cmp	r1, r4
   132f0:	movcc	r4, #39	; 0x27
   132f4:	strbcc	r4, [r5, r1]
   132f8:	mov	r4, r2
   132fc:	b	13304 <__assert_fail@plt+0x230c>
   13300:	ldr	r5, [fp, #-84]	; 0xffffffac
   13304:	ldr	r1, [sp, #88]	; 0x58
   13308:	mov	r2, ip
   1330c:	cmp	r8, r1
   13310:	ldr	r1, [sp, #72]	; 0x48
   13314:	strbcc	r6, [r5, r8]
   13318:	add	r8, r8, #1
   1331c:	ldrb	r6, [r1, r7]
   13320:	mov	r7, r3
   13324:	mov	r3, r0
   13328:	b	1318c <__assert_fail@plt+0x2194>
   1332c:	ldr	ip, [sp, #88]	; 0x58
   13330:	cmp	r1, #0
   13334:	movwne	r1, #1
   13338:	str	r1, [fp, #-56]	; 0xffffffc8
   1333c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13340:	cmp	r0, #0
   13344:	bne	13374 <__assert_fail@plt+0x237c>
   13348:	tst	lr, #1
   1334c:	beq	13374 <__assert_fail@plt+0x237c>
   13350:	cmp	r8, ip
   13354:	mov	lr, #0
   13358:	movcc	r0, #39	; 0x27
   1335c:	strbcc	r0, [r5, r8]
   13360:	add	r0, r8, #1
   13364:	add	r8, r8, #2
   13368:	cmp	r0, ip
   1336c:	movcc	r1, #39	; 0x27
   13370:	strbcc	r1, [r5, r0]
   13374:	mov	r1, r9
   13378:	mov	r0, r6
   1337c:	cmp	r8, ip
   13380:	strbcc	r0, [r5, r8]
   13384:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13388:	add	r8, r8, #1
   1338c:	and	r0, r0, r1
   13390:	str	r0, [fp, #-48]	; 0xffffffd0
   13394:	mov	r3, sl
   13398:	add	r7, r7, #1
   1339c:	b	1288c <__assert_fail@plt+0x1894>
   133a0:	mov	r9, #0
   133a4:	b	133e8 <__assert_fail@plt+0x23f0>
   133a8:	mov	r9, #0
   133ac:	cmp	r2, r4
   133b0:	bls	133e8 <__assert_fail@plt+0x23f0>
   133b4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   133b8:	ldr	r1, [sp, #24]
   133bc:	add	r0, r4, r7
   133c0:	mov	r3, r1
   133c4:	ldrb	r1, [r0, r1]
   133c8:	cmp	r1, #0
   133cc:	beq	133f4 <__assert_fail@plt+0x23fc>
   133d0:	add	r3, r3, #1
   133d4:	add	r1, r7, r3
   133d8:	cmp	r1, r2
   133dc:	mov	r1, r3
   133e0:	bcc	133c0 <__assert_fail@plt+0x23c8>
   133e4:	b	12eec <__assert_fail@plt+0x1ef4>
   133e8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   133ec:	ldr	r1, [sp, #24]
   133f0:	b	12eec <__assert_fail@plt+0x1ef4>
   133f4:	mov	r1, r3
   133f8:	b	12eec <__assert_fail@plt+0x1ef4>
   133fc:	mov	r9, #0
   13400:	mov	r4, r1
   13404:	b	12ba8 <__assert_fail@plt+0x1bb0>
   13408:	mov	sl, r7
   1340c:	b	13414 <__assert_fail@plt+0x241c>
   13410:	mvn	sl, #0
   13414:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13418:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1341c:	eor	r0, r1, #2
   13420:	orr	r0, r0, r8
   13424:	clz	r0, r0
   13428:	lsr	r0, r0, #5
   1342c:	tst	r2, r0
   13430:	bne	134d8 <__assert_fail@plt+0x24e0>
   13434:	subs	r0, r1, #2
   13438:	movwne	r0, #1
   1343c:	orr	r0, r2, r0
   13440:	tst	r0, #1
   13444:	ldreq	r0, [sp, #60]	; 0x3c
   13448:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   1344c:	eoreq	r0, r0, #1
   13450:	tsteq	r0, #1
   13454:	bne	1356c <__assert_fail@plt+0x2574>
   13458:	tst	r1, #1
   1345c:	bne	13538 <__assert_fail@plt+0x2540>
   13460:	ldr	r6, [sp, #56]	; 0x38
   13464:	mov	r9, #0
   13468:	cmp	r6, #0
   1346c:	beq	13564 <__assert_fail@plt+0x256c>
   13470:	ldr	r0, [sp, #84]	; 0x54
   13474:	mov	r1, #0
   13478:	mov	r7, #2
   1347c:	cmp	ip, #0
   13480:	str	r1, [fp, #-48]	; 0xffffffd0
   13484:	mov	r1, #0
   13488:	str	r1, [fp, #-76]	; 0xffffffb4
   1348c:	beq	125f4 <__assert_fail@plt+0x15fc>
   13490:	b	1356c <__assert_fail@plt+0x2574>
   13494:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13498:	ldr	r1, [fp, #12]
   1349c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   134a0:	mov	r5, r3
   134a4:	mov	ip, r6
   134a8:	mov	r3, sl
   134ac:	b	134fc <__assert_fail@plt+0x2504>
   134b0:	tst	r4, #1
   134b4:	ldr	r5, [fp, #-84]	; 0xffffffac
   134b8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   134bc:	ldr	r1, [fp, #12]
   134c0:	ldr	r3, [sp, #36]	; 0x24
   134c4:	mov	r0, #2
   134c8:	movwne	r0, #4
   134cc:	mov	r2, r0
   134d0:	b	134fc <__assert_fail@plt+0x2504>
   134d4:	ldr	ip, [sp, #88]	; 0x58
   134d8:	ldr	r1, [sp, #84]	; 0x54
   134dc:	mov	r0, #2
   134e0:	tst	r1, #1
   134e4:	movwne	r0, #4
   134e8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   134ec:	ldr	r1, [fp, #12]
   134f0:	mov	r3, sl
   134f4:	cmp	r2, #2
   134f8:	moveq	r2, r0
   134fc:	mov	r0, #0
   13500:	bic	r1, r1, #2
   13504:	str	r2, [sp]
   13508:	mov	r2, r4
   1350c:	str	r0, [sp, #8]
   13510:	ldr	r0, [sp, #76]	; 0x4c
   13514:	str	r1, [sp, #4]
   13518:	mov	r1, ip
   1351c:	str	r0, [sp, #12]
   13520:	ldr	r0, [sp, #80]	; 0x50
   13524:	str	r0, [sp, #16]
   13528:	mov	r0, r5
   1352c:	bl	12568 <__assert_fail@plt+0x1570>
   13530:	mov	r8, r0
   13534:	b	135b8 <__assert_fail@plt+0x25c0>
   13538:	mov	r0, #5
   1353c:	ldr	r1, [sp, #56]	; 0x38
   13540:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13544:	mov	r3, sl
   13548:	str	r0, [sp]
   1354c:	ldr	r0, [fp, #12]
   13550:	str	r0, [sp, #4]
   13554:	ldr	r0, [fp, #16]
   13558:	str	r0, [sp, #8]
   1355c:	ldr	r0, [sp, #76]	; 0x4c
   13560:	b	1351c <__assert_fail@plt+0x2524>
   13564:	mov	r0, #0
   13568:	str	r0, [fp, #-76]	; 0xffffffb4
   1356c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13570:	cmp	r1, #0
   13574:	beq	135ac <__assert_fail@plt+0x25b4>
   13578:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1357c:	tst	r0, #1
   13580:	bne	135ac <__assert_fail@plt+0x25b4>
   13584:	ldrb	r0, [r1]
   13588:	cmp	r0, #0
   1358c:	beq	135ac <__assert_fail@plt+0x25b4>
   13590:	add	r1, r1, #1
   13594:	cmp	r8, ip
   13598:	strbcc	r0, [r5, r8]
   1359c:	add	r8, r8, #1
   135a0:	ldrb	r0, [r1], #1
   135a4:	cmp	r0, #0
   135a8:	bne	13594 <__assert_fail@plt+0x259c>
   135ac:	cmp	r8, ip
   135b0:	movcc	r0, #0
   135b4:	strbcc	r0, [r5, r8]
   135b8:	mov	r0, r8
   135bc:	sub	sp, fp, #28
   135c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c4:	mov	r0, #4
   135c8:	b	134e8 <__assert_fail@plt+0x24f0>
   135cc:	mov	r4, r1
   135d0:	b	134d8 <__assert_fail@plt+0x24e0>
   135d4:	bl	10fe0 <abort@plt>
   135d8:	mov	r3, r2
   135dc:	mov	r2, #0
   135e0:	b	135e4 <__assert_fail@plt+0x25ec>
   135e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e8:	add	fp, sp, #28
   135ec:	sub	sp, sp, #36	; 0x24
   135f0:	movw	r8, #24944	; 0x6170
   135f4:	cmp	r3, #0
   135f8:	mov	r4, r2
   135fc:	str	r2, [sp, #24]
   13600:	mov	r5, r1
   13604:	mov	r6, r0
   13608:	str	r0, [sp, #20]
   1360c:	movt	r8, #2
   13610:	movne	r8, r3
   13614:	bl	10f38 <__errno_location@plt>
   13618:	str	r0, [sp, #28]
   1361c:	ldr	r1, [r8, #40]	; 0x28
   13620:	ldr	r2, [r8, #44]	; 0x2c
   13624:	ldr	r7, [r0]
   13628:	cmp	r4, #0
   1362c:	add	sl, r8, #8
   13630:	mov	r0, #0
   13634:	ldm	r8, {r3, r9}
   13638:	orreq	r9, r9, #1
   1363c:	stm	sp, {r3, r9, sl}
   13640:	str	r1, [sp, #12]
   13644:	str	r2, [sp, #16]
   13648:	mov	r1, #0
   1364c:	mov	r2, r6
   13650:	mov	r3, r5
   13654:	str	r7, [sp, #32]
   13658:	mov	r7, r5
   1365c:	bl	12568 <__assert_fail@plt+0x1570>
   13660:	add	r4, r0, #1
   13664:	mov	r5, r0
   13668:	mov	r0, r4
   1366c:	bl	145cc <__assert_fail@plt+0x35d4>
   13670:	mov	r6, r0
   13674:	ldr	r0, [r8]
   13678:	ldr	r2, [r8, #44]	; 0x2c
   1367c:	ldr	r1, [r8, #40]	; 0x28
   13680:	mov	r3, r7
   13684:	stm	sp, {r0, r9, sl}
   13688:	str	r2, [sp, #16]
   1368c:	ldr	r2, [sp, #20]
   13690:	str	r1, [sp, #12]
   13694:	mov	r0, r6
   13698:	mov	r1, r4
   1369c:	bl	12568 <__assert_fail@plt+0x1570>
   136a0:	ldr	r0, [sp, #24]
   136a4:	ldr	r1, [sp, #32]
   136a8:	ldr	r2, [sp, #28]
   136ac:	cmp	r0, #0
   136b0:	str	r1, [r2]
   136b4:	strne	r5, [r0]
   136b8:	mov	r0, r6
   136bc:	sub	sp, fp, #28
   136c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   136c8:	add	fp, sp, #24
   136cc:	movw	r5, #24812	; 0x60ec
   136d0:	movw	r8, #24808	; 0x60e8
   136d4:	movt	r5, #2
   136d8:	movt	r8, #2
   136dc:	ldr	r0, [r5]
   136e0:	ldr	r4, [r8]
   136e4:	cmp	r0, #2
   136e8:	blt	13714 <__assert_fail@plt+0x271c>
   136ec:	add	r7, r4, #12
   136f0:	mov	r6, #0
   136f4:	ldr	r0, [r7, r6, lsl #3]
   136f8:	bl	14b60 <__assert_fail@plt+0x3b68>
   136fc:	ldr	r1, [r5]
   13700:	add	r2, r6, #2
   13704:	add	r0, r6, #1
   13708:	mov	r6, r0
   1370c:	cmp	r2, r1
   13710:	blt	136f4 <__assert_fail@plt+0x26fc>
   13714:	ldr	r0, [r4, #4]
   13718:	movw	r9, #24992	; 0x61a0
   1371c:	movw	r7, #24816	; 0x60f0
   13720:	movt	r9, #2
   13724:	movt	r7, #2
   13728:	cmp	r0, r9
   1372c:	beq	1373c <__assert_fail@plt+0x2744>
   13730:	bl	14b60 <__assert_fail@plt+0x3b68>
   13734:	mov	r0, #256	; 0x100
   13738:	stm	r7, {r0, r9}
   1373c:	cmp	r4, r7
   13740:	beq	13750 <__assert_fail@plt+0x2758>
   13744:	mov	r0, r4
   13748:	bl	14b60 <__assert_fail@plt+0x3b68>
   1374c:	str	r7, [r8]
   13750:	mov	r0, #1
   13754:	str	r0, [r5]
   13758:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1375c:	movw	r3, #24944	; 0x6170
   13760:	mvn	r2, #0
   13764:	movt	r3, #2
   13768:	b	1376c <__assert_fail@plt+0x2774>
   1376c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13770:	add	fp, sp, #28
   13774:	sub	sp, sp, #44	; 0x2c
   13778:	mov	r7, r3
   1377c:	str	r2, [sp, #36]	; 0x24
   13780:	str	r1, [sp, #32]
   13784:	mov	r5, r0
   13788:	bl	10f38 <__errno_location@plt>
   1378c:	cmp	r5, #0
   13790:	bmi	13900 <__assert_fail@plt+0x2908>
   13794:	cmn	r5, #-2147483647	; 0x80000001
   13798:	beq	13900 <__assert_fail@plt+0x2908>
   1379c:	movw	r8, #24812	; 0x60ec
   137a0:	movw	r4, #24808	; 0x60e8
   137a4:	str	r0, [sp, #28]
   137a8:	ldr	r0, [r0]
   137ac:	movt	r8, #2
   137b0:	movt	r4, #2
   137b4:	ldr	r1, [r8]
   137b8:	ldr	r6, [r4]
   137bc:	str	r0, [sp, #24]
   137c0:	cmp	r1, r5
   137c4:	ble	137d0 <__assert_fail@plt+0x27d8>
   137c8:	mov	sl, r6
   137cc:	b	1383c <__assert_fail@plt+0x2844>
   137d0:	movw	r9, #24816	; 0x60f0
   137d4:	mov	r0, #8
   137d8:	str	r1, [fp, #-32]	; 0xffffffe0
   137dc:	sub	r1, r5, r1
   137e0:	mvn	r3, #-2147483648	; 0x80000000
   137e4:	movt	r9, #2
   137e8:	str	r0, [sp]
   137ec:	add	r2, r1, #1
   137f0:	sub	r1, fp, #32
   137f4:	subs	r0, r6, r9
   137f8:	movne	r0, r6
   137fc:	bl	146fc <__assert_fail@plt+0x3704>
   13800:	mov	sl, r0
   13804:	cmp	r6, r9
   13808:	str	r0, [r4]
   1380c:	bne	13818 <__assert_fail@plt+0x2820>
   13810:	ldrd	r0, [r9]
   13814:	stm	sl, {r0, r1}
   13818:	ldr	r1, [r8]
   1381c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13820:	add	r0, sl, r1, lsl #3
   13824:	sub	r1, r2, r1
   13828:	lsl	r2, r1, #3
   1382c:	mov	r1, #0
   13830:	bl	10f50 <memset@plt>
   13834:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13838:	str	r0, [r8]
   1383c:	mov	r9, sl
   13840:	ldm	r7, {r0, r1}
   13844:	orr	r8, r1, #1
   13848:	add	r1, r7, #8
   1384c:	ldr	r2, [r7, #40]	; 0x28
   13850:	ldr	r3, [r7, #44]	; 0x2c
   13854:	ldr	r6, [r9, r5, lsl #3]!
   13858:	str	r1, [sp, #20]
   1385c:	ldr	r4, [r9, #4]!
   13860:	stm	sp, {r0, r8}
   13864:	add	r0, sp, #8
   13868:	stm	r0, {r1, r2, r3}
   1386c:	ldr	r2, [sp, #32]
   13870:	ldr	r3, [sp, #36]	; 0x24
   13874:	mov	r1, r6
   13878:	mov	r0, r4
   1387c:	bl	12568 <__assert_fail@plt+0x1570>
   13880:	cmp	r6, r0
   13884:	bhi	138e8 <__assert_fail@plt+0x28f0>
   13888:	add	r6, r0, #1
   1388c:	movw	r0, #24992	; 0x61a0
   13890:	movt	r0, #2
   13894:	str	r6, [sl, r5, lsl #3]
   13898:	cmp	r4, r0
   1389c:	beq	138a8 <__assert_fail@plt+0x28b0>
   138a0:	mov	r0, r4
   138a4:	bl	14b60 <__assert_fail@plt+0x3b68>
   138a8:	mov	r0, r6
   138ac:	bl	145cc <__assert_fail@plt+0x35d4>
   138b0:	str	r0, [r9]
   138b4:	mov	r4, r0
   138b8:	add	r3, sp, #8
   138bc:	ldr	r0, [r7]
   138c0:	ldr	r1, [r7, #40]	; 0x28
   138c4:	ldr	r2, [r7, #44]	; 0x2c
   138c8:	stm	sp, {r0, r8}
   138cc:	ldr	r0, [sp, #20]
   138d0:	stm	r3, {r0, r1, r2}
   138d4:	ldr	r2, [sp, #32]
   138d8:	ldr	r3, [sp, #36]	; 0x24
   138dc:	mov	r0, r4
   138e0:	mov	r1, r6
   138e4:	bl	12568 <__assert_fail@plt+0x1570>
   138e8:	ldr	r0, [sp, #28]
   138ec:	ldr	r1, [sp, #24]
   138f0:	str	r1, [r0]
   138f4:	mov	r0, r4
   138f8:	sub	sp, fp, #28
   138fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13900:	bl	10fe0 <abort@plt>
   13904:	movw	r3, #24944	; 0x6170
   13908:	movt	r3, #2
   1390c:	b	1376c <__assert_fail@plt+0x2774>
   13910:	movw	r3, #24944	; 0x6170
   13914:	mov	r1, r0
   13918:	mov	r0, #0
   1391c:	mvn	r2, #0
   13920:	movt	r3, #2
   13924:	b	1376c <__assert_fail@plt+0x2774>
   13928:	movw	r3, #24944	; 0x6170
   1392c:	mov	r2, r1
   13930:	mov	r1, r0
   13934:	mov	r0, #0
   13938:	movt	r3, #2
   1393c:	b	1376c <__assert_fail@plt+0x2774>
   13940:	push	{fp, lr}
   13944:	mov	fp, sp
   13948:	sub	sp, sp, #48	; 0x30
   1394c:	vmov.i32	q8, #0	; 0x00000000
   13950:	mov	ip, #32
   13954:	mov	r3, sp
   13958:	mov	lr, r2
   1395c:	cmp	r1, #10
   13960:	add	r2, r3, #16
   13964:	vst1.64	{d16-d17}, [r3], ip
   13968:	vst1.64	{d16-d17}, [r2]
   1396c:	vst1.64	{d16-d17}, [r3]
   13970:	beq	13990 <__assert_fail@plt+0x2998>
   13974:	str	r1, [sp]
   13978:	mov	r3, sp
   1397c:	mov	r1, lr
   13980:	mvn	r2, #0
   13984:	bl	1376c <__assert_fail@plt+0x2774>
   13988:	mov	sp, fp
   1398c:	pop	{fp, pc}
   13990:	bl	10fe0 <abort@plt>
   13994:	push	{r4, sl, fp, lr}
   13998:	add	fp, sp, #8
   1399c:	sub	sp, sp, #48	; 0x30
   139a0:	vmov.i32	q8, #0	; 0x00000000
   139a4:	mov	ip, r3
   139a8:	mov	r3, sp
   139ac:	mov	lr, #32
   139b0:	cmp	r1, #10
   139b4:	add	r4, r3, #16
   139b8:	vst1.64	{d16-d17}, [r3], lr
   139bc:	vst1.64	{d16-d17}, [r4]
   139c0:	vst1.64	{d16-d17}, [r3]
   139c4:	beq	139e4 <__assert_fail@plt+0x29ec>
   139c8:	str	r1, [sp]
   139cc:	mov	r1, r2
   139d0:	mov	r3, sp
   139d4:	mov	r2, ip
   139d8:	bl	1376c <__assert_fail@plt+0x2774>
   139dc:	sub	sp, fp, #8
   139e0:	pop	{r4, sl, fp, pc}
   139e4:	bl	10fe0 <abort@plt>
   139e8:	mov	r2, r1
   139ec:	mov	r1, r0
   139f0:	mov	r0, #0
   139f4:	b	13940 <__assert_fail@plt+0x2948>
   139f8:	mov	r3, r2
   139fc:	mov	r2, r1
   13a00:	mov	r1, r0
   13a04:	mov	r0, #0
   13a08:	b	13994 <__assert_fail@plt+0x299c>
   13a0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a10:	add	fp, sp, #24
   13a14:	sub	sp, sp, #48	; 0x30
   13a18:	movw	r8, #24944	; 0x6170
   13a1c:	mov	lr, r0
   13a20:	mov	r3, sp
   13a24:	mov	ip, r1
   13a28:	movt	r8, #2
   13a2c:	mov	r1, r3
   13a30:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13a34:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13a38:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13a3c:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13a40:	ubfx	r0, r2, #5, #3
   13a44:	and	r2, r2, #31
   13a48:	mov	r4, #1
   13a4c:	add	r0, r3, r0, lsl #2
   13a50:	ldr	r1, [r0, #8]
   13a54:	bic	r4, r4, r1, lsr r2
   13a58:	eor	r1, r1, r4, lsl r2
   13a5c:	mov	r2, ip
   13a60:	str	r1, [r0, #8]
   13a64:	mov	r0, #0
   13a68:	mov	r1, lr
   13a6c:	bl	1376c <__assert_fail@plt+0x2774>
   13a70:	sub	sp, fp, #24
   13a74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a7c:	add	fp, sp, #24
   13a80:	sub	sp, sp, #48	; 0x30
   13a84:	movw	lr, #24944	; 0x6170
   13a88:	mov	ip, r0
   13a8c:	mov	r3, sp
   13a90:	movt	lr, #2
   13a94:	mov	r2, r3
   13a98:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13a9c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13aa0:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13aa4:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13aa8:	ubfx	r0, r1, #5, #3
   13aac:	and	r1, r1, #31
   13ab0:	mov	r7, #1
   13ab4:	add	r0, r3, r0, lsl #2
   13ab8:	ldr	r2, [r0, #8]
   13abc:	bic	r7, r7, r2, lsr r1
   13ac0:	eor	r1, r2, r7, lsl r1
   13ac4:	mvn	r2, #0
   13ac8:	str	r1, [r0, #8]
   13acc:	mov	r0, #0
   13ad0:	mov	r1, ip
   13ad4:	bl	1376c <__assert_fail@plt+0x2774>
   13ad8:	sub	sp, fp, #24
   13adc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ae0:	push	{r4, r5, r6, r7, fp, lr}
   13ae4:	add	fp, sp, #16
   13ae8:	sub	sp, sp, #48	; 0x30
   13aec:	movw	lr, #24944	; 0x6170
   13af0:	mov	ip, r0
   13af4:	mov	r3, sp
   13af8:	movt	lr, #2
   13afc:	mov	r2, r3
   13b00:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13b04:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13b08:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13b0c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13b10:	mov	r1, ip
   13b14:	mvn	r2, #0
   13b18:	ldr	r0, [sp, #12]
   13b1c:	orr	r0, r0, #67108864	; 0x4000000
   13b20:	str	r0, [sp, #12]
   13b24:	mov	r0, #0
   13b28:	bl	1376c <__assert_fail@plt+0x2774>
   13b2c:	sub	sp, fp, #16
   13b30:	pop	{r4, r5, r6, r7, fp, pc}
   13b34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b38:	add	fp, sp, #24
   13b3c:	sub	sp, sp, #48	; 0x30
   13b40:	movw	r8, #24944	; 0x6170
   13b44:	mov	ip, r1
   13b48:	mov	lr, r0
   13b4c:	mov	r3, sp
   13b50:	movt	r8, #2
   13b54:	mov	r2, r3
   13b58:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13b5c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13b60:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13b64:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13b68:	mov	r1, lr
   13b6c:	mov	r2, ip
   13b70:	ldr	r0, [sp, #12]
   13b74:	orr	r0, r0, #67108864	; 0x4000000
   13b78:	str	r0, [sp, #12]
   13b7c:	mov	r0, #0
   13b80:	bl	1376c <__assert_fail@plt+0x2774>
   13b84:	sub	sp, fp, #24
   13b88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b90:	add	fp, sp, #24
   13b94:	sub	sp, sp, #96	; 0x60
   13b98:	vmov.i32	q8, #0	; 0x00000000
   13b9c:	mov	lr, sp
   13ba0:	mov	ip, r2
   13ba4:	cmp	r1, #10
   13ba8:	add	r3, lr, #16
   13bac:	mov	r2, lr
   13bb0:	vst1.64	{d16-d17}, [r3]
   13bb4:	mov	r3, #28
   13bb8:	vst1.64	{d16-d17}, [r2], r3
   13bbc:	vst1.32	{d16-d17}, [r2]
   13bc0:	beq	13c00 <__assert_fail@plt+0x2c08>
   13bc4:	str	r1, [sp, #48]	; 0x30
   13bc8:	add	r3, sp, #48	; 0x30
   13bcc:	ldm	lr!, {r2, r4, r5, r6, r7}
   13bd0:	add	r1, r3, #4
   13bd4:	stmia	r1!, {r2, r4, r5, r6, r7}
   13bd8:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13bdc:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13be0:	mvn	r2, #0
   13be4:	ldr	r1, [sp, #60]	; 0x3c
   13be8:	orr	r1, r1, #67108864	; 0x4000000
   13bec:	str	r1, [sp, #60]	; 0x3c
   13bf0:	mov	r1, ip
   13bf4:	bl	1376c <__assert_fail@plt+0x2774>
   13bf8:	sub	sp, fp, #24
   13bfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c00:	bl	10fe0 <abort@plt>
   13c04:	push	{fp, lr}
   13c08:	mov	fp, sp
   13c0c:	sub	sp, sp, #8
   13c10:	mvn	ip, #0
   13c14:	str	ip, [sp]
   13c18:	bl	13c24 <__assert_fail@plt+0x2c2c>
   13c1c:	mov	sp, fp
   13c20:	pop	{fp, pc}
   13c24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13c28:	add	fp, sp, #24
   13c2c:	sub	sp, sp, #48	; 0x30
   13c30:	movw	ip, #24944	; 0x6170
   13c34:	mov	lr, r3
   13c38:	mov	r3, sp
   13c3c:	cmp	r1, #0
   13c40:	movt	ip, #2
   13c44:	cmpne	r2, #0
   13c48:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13c4c:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13c50:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13c54:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13c58:	mov	r3, #10
   13c5c:	str	r3, [sp]
   13c60:	bne	13c68 <__assert_fail@plt+0x2c70>
   13c64:	bl	10fe0 <abort@plt>
   13c68:	ldr	ip, [fp, #8]
   13c6c:	str	r2, [sp, #44]	; 0x2c
   13c70:	str	r1, [sp, #40]	; 0x28
   13c74:	mov	r3, sp
   13c78:	mov	r1, lr
   13c7c:	mov	r2, ip
   13c80:	bl	1376c <__assert_fail@plt+0x2774>
   13c84:	sub	sp, fp, #24
   13c88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13c8c:	push	{fp, lr}
   13c90:	mov	fp, sp
   13c94:	sub	sp, sp, #8
   13c98:	mov	r3, r2
   13c9c:	mov	r2, r1
   13ca0:	mov	r1, r0
   13ca4:	mvn	r0, #0
   13ca8:	str	r0, [sp]
   13cac:	mov	r0, #0
   13cb0:	bl	13c24 <__assert_fail@plt+0x2c2c>
   13cb4:	mov	sp, fp
   13cb8:	pop	{fp, pc}
   13cbc:	push	{fp, lr}
   13cc0:	mov	fp, sp
   13cc4:	sub	sp, sp, #8
   13cc8:	mov	ip, r2
   13ccc:	mov	r2, r1
   13cd0:	mov	r1, r0
   13cd4:	str	r3, [sp]
   13cd8:	mov	r0, #0
   13cdc:	mov	r3, ip
   13ce0:	bl	13c24 <__assert_fail@plt+0x2c2c>
   13ce4:	mov	sp, fp
   13ce8:	pop	{fp, pc}
   13cec:	movw	r3, #24824	; 0x60f8
   13cf0:	movt	r3, #2
   13cf4:	b	1376c <__assert_fail@plt+0x2774>
   13cf8:	movw	r3, #24824	; 0x60f8
   13cfc:	mov	r2, r1
   13d00:	mov	r1, r0
   13d04:	mov	r0, #0
   13d08:	movt	r3, #2
   13d0c:	b	1376c <__assert_fail@plt+0x2774>
   13d10:	movw	r3, #24824	; 0x60f8
   13d14:	mvn	r2, #0
   13d18:	movt	r3, #2
   13d1c:	b	1376c <__assert_fail@plt+0x2774>
   13d20:	movw	r3, #24824	; 0x60f8
   13d24:	mov	r1, r0
   13d28:	mov	r0, #0
   13d2c:	mvn	r2, #0
   13d30:	movt	r3, #2
   13d34:	b	1376c <__assert_fail@plt+0x2774>
   13d38:	push	{r4, r5, fp, lr}
   13d3c:	add	fp, sp, #8
   13d40:	mov	r5, r0
   13d44:	mov	r4, r1
   13d48:	mov	r0, #0
   13d4c:	mov	r2, #5
   13d50:	mov	r1, r5
   13d54:	bl	10e24 <dcgettext@plt>
   13d58:	cmp	r0, r5
   13d5c:	popne	{r4, r5, fp, pc}
   13d60:	bl	14b88 <__assert_fail@plt+0x3b90>
   13d64:	ldrb	r1, [r0]
   13d68:	and	r1, r1, #223	; 0xdf
   13d6c:	cmp	r1, #71	; 0x47
   13d70:	beq	13dd8 <__assert_fail@plt+0x2de0>
   13d74:	cmp	r1, #85	; 0x55
   13d78:	bne	13e30 <__assert_fail@plt+0x2e38>
   13d7c:	ldrb	r1, [r0, #1]
   13d80:	and	r1, r1, #223	; 0xdf
   13d84:	cmp	r1, #84	; 0x54
   13d88:	bne	13e30 <__assert_fail@plt+0x2e38>
   13d8c:	ldrb	r1, [r0, #2]
   13d90:	and	r1, r1, #223	; 0xdf
   13d94:	cmp	r1, #70	; 0x46
   13d98:	bne	13e30 <__assert_fail@plt+0x2e38>
   13d9c:	ldrb	r1, [r0, #3]
   13da0:	cmp	r1, #45	; 0x2d
   13da4:	bne	13e30 <__assert_fail@plt+0x2e38>
   13da8:	ldrb	r1, [r0, #4]
   13dac:	cmp	r1, #56	; 0x38
   13db0:	bne	13e30 <__assert_fail@plt+0x2e38>
   13db4:	ldrb	r0, [r0, #5]
   13db8:	cmp	r0, #0
   13dbc:	bne	13e30 <__assert_fail@plt+0x2e38>
   13dc0:	ldrb	r1, [r5]
   13dc4:	movw	r2, #21242	; 0x52fa
   13dc8:	movw	r0, #21246	; 0x52fe
   13dcc:	movt	r2, #1
   13dd0:	movt	r0, #1
   13dd4:	b	13e60 <__assert_fail@plt+0x2e68>
   13dd8:	ldrb	r1, [r0, #1]
   13ddc:	and	r1, r1, #223	; 0xdf
   13de0:	cmp	r1, #66	; 0x42
   13de4:	bne	13e30 <__assert_fail@plt+0x2e38>
   13de8:	ldrb	r1, [r0, #2]
   13dec:	cmp	r1, #49	; 0x31
   13df0:	bne	13e30 <__assert_fail@plt+0x2e38>
   13df4:	ldrb	r1, [r0, #3]
   13df8:	cmp	r1, #56	; 0x38
   13dfc:	bne	13e30 <__assert_fail@plt+0x2e38>
   13e00:	ldrb	r1, [r0, #4]
   13e04:	cmp	r1, #48	; 0x30
   13e08:	bne	13e30 <__assert_fail@plt+0x2e38>
   13e0c:	ldrb	r1, [r0, #5]
   13e10:	cmp	r1, #51	; 0x33
   13e14:	bne	13e30 <__assert_fail@plt+0x2e38>
   13e18:	ldrb	r1, [r0, #6]
   13e1c:	cmp	r1, #48	; 0x30
   13e20:	bne	13e30 <__assert_fail@plt+0x2e38>
   13e24:	ldrb	r0, [r0, #7]
   13e28:	cmp	r0, #0
   13e2c:	beq	13e4c <__assert_fail@plt+0x2e54>
   13e30:	movw	r1, #21236	; 0x52f4
   13e34:	movw	r0, #21240	; 0x52f8
   13e38:	cmp	r4, #9
   13e3c:	movt	r1, #1
   13e40:	movt	r0, #1
   13e44:	moveq	r0, r1
   13e48:	pop	{r4, r5, fp, pc}
   13e4c:	ldrb	r1, [r5]
   13e50:	movw	r2, #21250	; 0x5302
   13e54:	movw	r0, #21254	; 0x5306
   13e58:	movt	r2, #1
   13e5c:	movt	r0, #1
   13e60:	cmp	r1, #96	; 0x60
   13e64:	moveq	r0, r2
   13e68:	pop	{r4, r5, fp, pc}
   13e6c:	mov	r1, #0
   13e70:	str	r1, [r0]
   13e74:	str	r1, [r0, #4]
   13e78:	bx	lr
   13e7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e80:	add	fp, sp, #28
   13e84:	sub	sp, sp, #52	; 0x34
   13e88:	vmov.i32	q8, #0	; 0x00000000
   13e8c:	add	r5, sp, #16
   13e90:	mov	sl, r0
   13e94:	mov	r8, r3
   13e98:	cmp	r2, #0
   13e9c:	mov	r0, r5
   13ea0:	vst1.64	{d16-d17}, [r0]!
   13ea4:	vst1.64	{d16-d17}, [r0]
   13ea8:	beq	13ed0 <__assert_fail@plt+0x2ed8>
   13eac:	mov	r0, #1
   13eb0:	ldrb	r3, [r1], #1
   13eb4:	subs	r2, r2, #1
   13eb8:	ubfx	r7, r3, #5, #3
   13ebc:	and	r3, r3, #31
   13ec0:	ldr	r6, [r5, r7, lsl #2]
   13ec4:	orr	r3, r6, r0, lsl r3
   13ec8:	str	r3, [r5, r7, lsl #2]
   13ecc:	bne	13eb0 <__assert_fail@plt+0x2eb8>
   13ed0:	mov	r0, sl
   13ed4:	bl	10e18 <getc_unlocked@plt>
   13ed8:	mov	r6, r0
   13edc:	cmp	r0, #0
   13ee0:	bmi	13f10 <__assert_fail@plt+0x2f18>
   13ee4:	mov	r4, #1
   13ee8:	lsr	r0, r6, #5
   13eec:	and	r1, r6, #31
   13ef0:	ldr	r0, [r5, r0, lsl #2]
   13ef4:	tst	r0, r4, lsl r1
   13ef8:	beq	13f10 <__assert_fail@plt+0x2f18>
   13efc:	mov	r0, sl
   13f00:	bl	10e18 <getc_unlocked@plt>
   13f04:	mov	r6, r0
   13f08:	cmn	r0, #1
   13f0c:	bgt	13ee8 <__assert_fail@plt+0x2ef0>
   13f10:	ldm	r8, {r0, r7}
   13f14:	cmp	r6, #0
   13f18:	str	r0, [sp, #12]
   13f1c:	bmi	13fa4 <__assert_fail@plt+0x2fac>
   13f20:	str	r8, [sp, #8]
   13f24:	mov	r9, #0
   13f28:	mov	r8, #1
   13f2c:	mov	r4, #0
   13f30:	b	13f50 <__assert_fail@plt+0x2f58>
   13f34:	mov	r0, sl
   13f38:	strb	r6, [r7, r4]
   13f3c:	bl	10e18 <getc_unlocked@plt>
   13f40:	mov	r6, r0
   13f44:	lsr	r9, r0, #31
   13f48:	ldr	r0, [sp, #12]
   13f4c:	add	r4, r4, #1
   13f50:	cmp	r4, r0
   13f54:	bne	13f74 <__assert_fail@plt+0x2f7c>
   13f58:	mov	r0, r7
   13f5c:	add	r1, sp, #12
   13f60:	mov	r2, #1
   13f64:	mvn	r3, #0
   13f68:	str	r8, [sp]
   13f6c:	bl	146fc <__assert_fail@plt+0x3704>
   13f70:	mov	r7, r0
   13f74:	tst	r9, #1
   13f78:	lsreq	r0, r6, #5
   13f7c:	andeq	r1, r6, #31
   13f80:	ldreq	r0, [r5, r0, lsl #2]
   13f84:	tsteq	r0, r8, lsl r1
   13f88:	beq	13f34 <__assert_fail@plt+0x2f3c>
   13f8c:	mov	r0, #0
   13f90:	ldr	r1, [sp, #8]
   13f94:	strb	r0, [r7, r4]
   13f98:	ldr	r0, [sp, #12]
   13f9c:	stm	r1, {r0, r7}
   13fa0:	b	13fa8 <__assert_fail@plt+0x2fb0>
   13fa4:	mvn	r4, #0
   13fa8:	mov	r0, r4
   13fac:	sub	sp, fp, #28
   13fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fb8:	add	fp, sp, #28
   13fbc:	sub	sp, sp, #28
   13fc0:	cmp	r1, #0
   13fc4:	add	r4, r1, #1
   13fc8:	mov	r7, r0
   13fcc:	mov	r1, #4
   13fd0:	str	r3, [sp, #12]
   13fd4:	str	r2, [sp, #8]
   13fd8:	movweq	r4, #64	; 0x40
   13fdc:	mov	r0, r4
   13fe0:	str	r4, [sp, #16]
   13fe4:	bl	1466c <__assert_fail@plt+0x3674>
   13fe8:	mov	r6, r0
   13fec:	mov	r0, r4
   13ff0:	mov	r1, #4
   13ff4:	bl	1466c <__assert_fail@plt+0x3674>
   13ff8:	mov	r4, #0
   13ffc:	mov	r5, r0
   14000:	str	r4, [sp, #24]
   14004:	str	r4, [sp, #20]
   14008:	ldr	r1, [sp, #8]
   1400c:	ldr	r2, [sp, #12]
   14010:	mov	r0, r7
   14014:	add	r3, sp, #20
   14018:	bl	13e7c <__assert_fail@plt+0x2e84>
   1401c:	mov	sl, r0
   14020:	ldr	r0, [sp, #16]
   14024:	cmp	r4, r0
   14028:	blt	14060 <__assert_fail@plt+0x3068>
   1402c:	mov	r0, #4
   14030:	add	r1, sp, #16
   14034:	mov	r2, #1
   14038:	mvn	r3, #0
   1403c:	str	r0, [sp]
   14040:	mov	r0, r6
   14044:	bl	146fc <__assert_fail@plt+0x3704>
   14048:	ldr	r1, [sp, #16]
   1404c:	mov	r6, r0
   14050:	mov	r0, r5
   14054:	mov	r2, #4
   14058:	bl	14560 <__assert_fail@plt+0x3568>
   1405c:	mov	r5, r0
   14060:	cmn	sl, #1
   14064:	beq	14098 <__assert_fail@plt+0x30a0>
   14068:	add	r8, sl, #1
   1406c:	mov	r1, #1
   14070:	mov	r0, r8
   14074:	bl	1466c <__assert_fail@plt+0x3674>
   14078:	str	sl, [r5, r4, lsl #2]
   1407c:	mov	r2, r8
   14080:	mov	r9, r0
   14084:	ldr	r1, [sp, #24]
   14088:	bl	10e00 <memcpy@plt>
   1408c:	str	r9, [r6, r4, lsl #2]
   14090:	add	r4, r4, #1
   14094:	b	14008 <__assert_fail@plt+0x3010>
   14098:	mov	r0, #0
   1409c:	str	r0, [r6, r4, lsl #2]
   140a0:	str	r0, [r5, r4, lsl #2]
   140a4:	ldr	r0, [sp, #24]
   140a8:	bl	14b60 <__assert_fail@plt+0x3b68>
   140ac:	ldr	r0, [fp, #8]
   140b0:	str	r6, [r0]
   140b4:	ldr	r0, [fp, #12]
   140b8:	cmp	r0, #0
   140bc:	beq	140c8 <__assert_fail@plt+0x30d0>
   140c0:	str	r5, [r0]
   140c4:	b	140d0 <__assert_fail@plt+0x30d8>
   140c8:	mov	r0, r5
   140cc:	bl	14b60 <__assert_fail@plt+0x3b68>
   140d0:	mov	r0, r4
   140d4:	sub	sp, fp, #28
   140d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140e0:	add	fp, sp, #24
   140e4:	sub	sp, sp, #32
   140e8:	ldr	r6, [fp, #12]
   140ec:	ldr	r7, [fp, #8]
   140f0:	mov	r4, r2
   140f4:	mov	r8, r0
   140f8:	cmp	r1, #0
   140fc:	beq	14124 <__assert_fail@plt+0x312c>
   14100:	movw	r2, #21344	; 0x5360
   14104:	mov	r5, r1
   14108:	str	r3, [sp, #4]
   1410c:	str	r4, [sp]
   14110:	mov	r0, r8
   14114:	mov	r1, #1
   14118:	movt	r2, #1
   1411c:	mov	r3, r5
   14120:	b	1413c <__assert_fail@plt+0x3144>
   14124:	movw	r2, #21356	; 0x536c
   14128:	str	r3, [sp]
   1412c:	mov	r0, r8
   14130:	mov	r1, #1
   14134:	mov	r3, r4
   14138:	movt	r2, #1
   1413c:	bl	10f74 <__fprintf_chk@plt>
   14140:	movw	r1, #21363	; 0x5373
   14144:	mov	r0, #0
   14148:	mov	r2, #5
   1414c:	movt	r1, #1
   14150:	bl	10e24 <dcgettext@plt>
   14154:	movw	r2, #22081	; 0x5641
   14158:	mov	r3, r0
   1415c:	movw	r0, #2022	; 0x7e6
   14160:	mov	r1, #1
   14164:	movt	r2, #1
   14168:	str	r0, [sp]
   1416c:	mov	r0, r8
   14170:	bl	10f74 <__fprintf_chk@plt>
   14174:	movw	r4, #20630	; 0x5096
   14178:	mov	r1, r8
   1417c:	movt	r4, #1
   14180:	mov	r0, r4
   14184:	bl	10db8 <fputs_unlocked@plt>
   14188:	movw	r1, #21367	; 0x5377
   1418c:	mov	r0, #0
   14190:	mov	r2, #5
   14194:	movt	r1, #1
   14198:	bl	10e24 <dcgettext@plt>
   1419c:	movw	r3, #21538	; 0x5422
   141a0:	mov	r2, r0
   141a4:	mov	r0, r8
   141a8:	mov	r1, #1
   141ac:	movt	r3, #1
   141b0:	bl	10f74 <__fprintf_chk@plt>
   141b4:	mov	r0, r4
   141b8:	mov	r1, r8
   141bc:	bl	10db8 <fputs_unlocked@plt>
   141c0:	cmp	r6, #9
   141c4:	bhi	14228 <__assert_fail@plt+0x3230>
   141c8:	add	r0, pc, #0
   141cc:	ldr	pc, [r0, r6, lsl #2]
   141d0:	andeq	r4, r1, r0, lsl #8
   141d4:	strdeq	r4, [r1], -r8
   141d8:	andeq	r4, r1, r4, lsr r2
   141dc:	andeq	r4, r1, ip, asr r2
   141e0:	andeq	r4, r1, r4, lsl #5
   141e4:	andeq	r4, r1, ip, lsr #5
   141e8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141ec:	andeq	r4, r1, ip, lsl #6
   141f0:	andeq	r4, r1, ip, lsr #7
   141f4:	andeq	r4, r1, r4, asr r3
   141f8:	movw	r1, #21572	; 0x5444
   141fc:	mov	r0, #0
   14200:	mov	r2, #5
   14204:	movt	r1, #1
   14208:	bl	10e24 <dcgettext@plt>
   1420c:	ldr	r3, [r7]
   14210:	mov	r2, r0
   14214:	mov	r0, r8
   14218:	mov	r1, #1
   1421c:	sub	sp, fp, #24
   14220:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14224:	b	10f74 <__fprintf_chk@plt>
   14228:	movw	r1, #21891	; 0x5583
   1422c:	movt	r1, #1
   14230:	b	1435c <__assert_fail@plt+0x3364>
   14234:	movw	r1, #21588	; 0x5454
   14238:	mov	r0, #0
   1423c:	mov	r2, #5
   14240:	movt	r1, #1
   14244:	bl	10e24 <dcgettext@plt>
   14248:	mov	r2, r0
   1424c:	ldr	r3, [r7]
   14250:	ldr	r0, [r7, #4]
   14254:	str	r0, [sp]
   14258:	b	14348 <__assert_fail@plt+0x3350>
   1425c:	movw	r1, #21611	; 0x546b
   14260:	mov	r0, #0
   14264:	mov	r2, #5
   14268:	movt	r1, #1
   1426c:	bl	10e24 <dcgettext@plt>
   14270:	mov	r2, r0
   14274:	ldr	r3, [r7]
   14278:	ldmib	r7, {r0, r1}
   1427c:	stm	sp, {r0, r1}
   14280:	b	14348 <__assert_fail@plt+0x3350>
   14284:	movw	r1, #21639	; 0x5487
   14288:	mov	r0, #0
   1428c:	mov	r2, #5
   14290:	movt	r1, #1
   14294:	bl	10e24 <dcgettext@plt>
   14298:	ldr	r3, [r7]
   1429c:	mov	r2, r0
   142a0:	ldmib	r7, {r0, r1, r7}
   142a4:	stm	sp, {r0, r1, r7}
   142a8:	b	14348 <__assert_fail@plt+0x3350>
   142ac:	movw	r1, #21671	; 0x54a7
   142b0:	mov	r0, #0
   142b4:	mov	r2, #5
   142b8:	movt	r1, #1
   142bc:	bl	10e24 <dcgettext@plt>
   142c0:	ldr	r3, [r7]
   142c4:	mov	r2, r0
   142c8:	ldmib	r7, {r0, r1, r6, r7}
   142cc:	stm	sp, {r0, r1, r6, r7}
   142d0:	b	14348 <__assert_fail@plt+0x3350>
   142d4:	movw	r1, #21707	; 0x54cb
   142d8:	mov	r0, #0
   142dc:	mov	r2, #5
   142e0:	movt	r1, #1
   142e4:	bl	10e24 <dcgettext@plt>
   142e8:	mov	r2, r0
   142ec:	ldr	r3, [r7]
   142f0:	ldmib	r7, {r0, r1, r6}
   142f4:	ldr	r5, [r7, #16]
   142f8:	ldr	r7, [r7, #20]
   142fc:	stm	sp, {r0, r1, r6}
   14300:	str	r5, [sp, #12]
   14304:	str	r7, [sp, #16]
   14308:	b	14348 <__assert_fail@plt+0x3350>
   1430c:	movw	r1, #21747	; 0x54f3
   14310:	mov	r0, #0
   14314:	mov	r2, #5
   14318:	movt	r1, #1
   1431c:	bl	10e24 <dcgettext@plt>
   14320:	mov	r2, r0
   14324:	ldr	r3, [r7]
   14328:	ldmib	r7, {r0, r1, r6}
   1432c:	ldr	r5, [r7, #16]
   14330:	ldr	r4, [r7, #20]
   14334:	ldr	r7, [r7, #24]
   14338:	stm	sp, {r0, r1, r6}
   1433c:	str	r5, [sp, #12]
   14340:	str	r4, [sp, #16]
   14344:	str	r7, [sp, #20]
   14348:	mov	r0, r8
   1434c:	mov	r1, #1
   14350:	b	143fc <__assert_fail@plt+0x3404>
   14354:	movw	r1, #21839	; 0x554f
   14358:	movt	r1, #1
   1435c:	mov	r0, #0
   14360:	mov	r2, #5
   14364:	bl	10e24 <dcgettext@plt>
   14368:	mov	ip, r0
   1436c:	ldr	r3, [r7]
   14370:	ldr	r0, [r7, #4]
   14374:	ldr	r1, [r7, #8]
   14378:	ldr	r6, [r7, #12]
   1437c:	ldr	r5, [r7, #16]
   14380:	ldr	r4, [r7, #20]
   14384:	ldr	r2, [r7, #24]
   14388:	ldr	lr, [r7, #28]
   1438c:	ldr	r7, [r7, #32]
   14390:	stm	sp, {r0, r1, r6}
   14394:	str	r5, [sp, #12]
   14398:	str	r4, [sp, #16]
   1439c:	str	r2, [sp, #20]
   143a0:	str	lr, [sp, #24]
   143a4:	str	r7, [sp, #28]
   143a8:	b	143f0 <__assert_fail@plt+0x33f8>
   143ac:	movw	r1, #21791	; 0x551f
   143b0:	mov	r0, #0
   143b4:	mov	r2, #5
   143b8:	movt	r1, #1
   143bc:	bl	10e24 <dcgettext@plt>
   143c0:	mov	ip, r0
   143c4:	ldr	r3, [r7]
   143c8:	ldmib	r7, {r0, r1, r6}
   143cc:	ldr	r5, [r7, #16]
   143d0:	ldr	r4, [r7, #20]
   143d4:	ldr	r2, [r7, #24]
   143d8:	ldr	r7, [r7, #28]
   143dc:	stm	sp, {r0, r1, r6}
   143e0:	str	r5, [sp, #12]
   143e4:	str	r4, [sp, #16]
   143e8:	str	r2, [sp, #20]
   143ec:	str	r7, [sp, #24]
   143f0:	mov	r0, r8
   143f4:	mov	r1, #1
   143f8:	mov	r2, ip
   143fc:	bl	10f74 <__fprintf_chk@plt>
   14400:	sub	sp, fp, #24
   14404:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14408:	push	{r4, sl, fp, lr}
   1440c:	add	fp, sp, #8
   14410:	sub	sp, sp, #8
   14414:	ldr	ip, [fp, #8]
   14418:	mov	lr, #0
   1441c:	ldr	r4, [ip, lr, lsl #2]
   14420:	add	lr, lr, #1
   14424:	cmp	r4, #0
   14428:	bne	1441c <__assert_fail@plt+0x3424>
   1442c:	sub	r4, lr, #1
   14430:	str	ip, [sp]
   14434:	str	r4, [sp, #4]
   14438:	bl	140dc <__assert_fail@plt+0x30e4>
   1443c:	sub	sp, fp, #8
   14440:	pop	{r4, sl, fp, pc}
   14444:	push	{r4, r5, fp, lr}
   14448:	add	fp, sp, #8
   1444c:	sub	sp, sp, #48	; 0x30
   14450:	ldr	r4, [fp, #8]
   14454:	mov	ip, #0
   14458:	add	lr, sp, #8
   1445c:	ldr	r5, [r4]
   14460:	cmp	r5, #0
   14464:	str	r5, [lr, ip, lsl #2]
   14468:	beq	14480 <__assert_fail@plt+0x3488>
   1446c:	add	ip, ip, #1
   14470:	add	r4, r4, #4
   14474:	cmp	ip, #10
   14478:	bne	1445c <__assert_fail@plt+0x3464>
   1447c:	mov	ip, #10
   14480:	str	lr, [sp]
   14484:	str	ip, [sp, #4]
   14488:	bl	140dc <__assert_fail@plt+0x30e4>
   1448c:	sub	sp, fp, #8
   14490:	pop	{r4, r5, fp, pc}
   14494:	push	{fp, lr}
   14498:	mov	fp, sp
   1449c:	sub	sp, sp, #8
   144a0:	add	ip, fp, #8
   144a4:	str	ip, [sp, #4]
   144a8:	str	ip, [sp]
   144ac:	bl	14444 <__assert_fail@plt+0x344c>
   144b0:	mov	sp, fp
   144b4:	pop	{fp, pc}
   144b8:	push	{fp, lr}
   144bc:	mov	fp, sp
   144c0:	movw	r0, #24900	; 0x6144
   144c4:	movt	r0, #2
   144c8:	ldr	r1, [r0]
   144cc:	movw	r0, #20630	; 0x5096
   144d0:	movt	r0, #1
   144d4:	bl	10db8 <fputs_unlocked@plt>
   144d8:	movw	r1, #21951	; 0x55bf
   144dc:	mov	r0, #0
   144e0:	mov	r2, #5
   144e4:	movt	r1, #1
   144e8:	bl	10e24 <dcgettext@plt>
   144ec:	movw	r2, #21971	; 0x55d3
   144f0:	mov	r1, r0
   144f4:	mov	r0, #1
   144f8:	movt	r2, #1
   144fc:	bl	10f5c <__printf_chk@plt>
   14500:	movw	r1, #21993	; 0x55e9
   14504:	mov	r0, #0
   14508:	mov	r2, #5
   1450c:	movt	r1, #1
   14510:	bl	10e24 <dcgettext@plt>
   14514:	movw	r2, #20216	; 0x4ef8
   14518:	movw	r3, #20435	; 0x4fd3
   1451c:	mov	r1, r0
   14520:	mov	r0, #1
   14524:	movt	r2, #1
   14528:	movt	r3, #1
   1452c:	bl	10f5c <__printf_chk@plt>
   14530:	movw	r1, #22013	; 0x55fd
   14534:	mov	r0, #0
   14538:	mov	r2, #5
   1453c:	movt	r1, #1
   14540:	bl	10e24 <dcgettext@plt>
   14544:	movw	r2, #22052	; 0x5624
   14548:	mov	r1, r0
   1454c:	mov	r0, #1
   14550:	movt	r2, #1
   14554:	pop	{fp, lr}
   14558:	b	10f5c <__printf_chk@plt>
   1455c:	b	14560 <__assert_fail@plt+0x3568>
   14560:	push	{r4, r5, r6, sl, fp, lr}
   14564:	add	fp, sp, #16
   14568:	mov	r4, r2
   1456c:	mov	r5, r1
   14570:	mov	r6, r0
   14574:	bl	14c24 <__assert_fail@plt+0x3c2c>
   14578:	cmp	r0, #0
   1457c:	popne	{r4, r5, r6, sl, fp, pc}
   14580:	cmp	r6, #0
   14584:	beq	14598 <__assert_fail@plt+0x35a0>
   14588:	cmp	r5, #0
   1458c:	cmpne	r4, #0
   14590:	bne	14598 <__assert_fail@plt+0x35a0>
   14594:	pop	{r4, r5, r6, sl, fp, pc}
   14598:	bl	149c8 <__assert_fail@plt+0x39d0>
   1459c:	push	{fp, lr}
   145a0:	mov	fp, sp
   145a4:	bl	14a60 <__assert_fail@plt+0x3a68>
   145a8:	cmp	r0, #0
   145ac:	popne	{fp, pc}
   145b0:	bl	149c8 <__assert_fail@plt+0x39d0>
   145b4:	push	{fp, lr}
   145b8:	mov	fp, sp
   145bc:	bl	14a60 <__assert_fail@plt+0x3a68>
   145c0:	cmp	r0, #0
   145c4:	popne	{fp, pc}
   145c8:	bl	149c8 <__assert_fail@plt+0x39d0>
   145cc:	push	{fp, lr}
   145d0:	mov	fp, sp
   145d4:	bl	14a60 <__assert_fail@plt+0x3a68>
   145d8:	cmp	r0, #0
   145dc:	popne	{fp, pc}
   145e0:	bl	149c8 <__assert_fail@plt+0x39d0>
   145e4:	push	{r4, r5, fp, lr}
   145e8:	add	fp, sp, #8
   145ec:	mov	r4, r1
   145f0:	mov	r5, r0
   145f4:	bl	14a90 <__assert_fail@plt+0x3a98>
   145f8:	cmp	r0, #0
   145fc:	popne	{r4, r5, fp, pc}
   14600:	cmp	r5, #0
   14604:	beq	14614 <__assert_fail@plt+0x361c>
   14608:	cmp	r4, #0
   1460c:	bne	14614 <__assert_fail@plt+0x361c>
   14610:	pop	{r4, r5, fp, pc}
   14614:	bl	149c8 <__assert_fail@plt+0x39d0>
   14618:	push	{fp, lr}
   1461c:	mov	fp, sp
   14620:	cmp	r1, #0
   14624:	orreq	r1, r1, #1
   14628:	bl	14a90 <__assert_fail@plt+0x3a98>
   1462c:	cmp	r0, #0
   14630:	popne	{fp, pc}
   14634:	bl	149c8 <__assert_fail@plt+0x39d0>
   14638:	push	{fp, lr}
   1463c:	mov	fp, sp
   14640:	clz	r3, r2
   14644:	lsr	ip, r3, #5
   14648:	clz	r3, r1
   1464c:	lsr	r3, r3, #5
   14650:	orrs	r3, r3, ip
   14654:	movwne	r1, #1
   14658:	movwne	r2, #1
   1465c:	bl	14c24 <__assert_fail@plt+0x3c2c>
   14660:	cmp	r0, #0
   14664:	popne	{fp, pc}
   14668:	bl	149c8 <__assert_fail@plt+0x39d0>
   1466c:	push	{fp, lr}
   14670:	mov	fp, sp
   14674:	mov	r2, r1
   14678:	mov	r1, r0
   1467c:	mov	r0, #0
   14680:	bl	14c24 <__assert_fail@plt+0x3c2c>
   14684:	cmp	r0, #0
   14688:	popne	{fp, pc}
   1468c:	bl	149c8 <__assert_fail@plt+0x39d0>
   14690:	mov	r2, r1
   14694:	mov	r1, r0
   14698:	mov	r0, #0
   1469c:	b	14638 <__assert_fail@plt+0x3640>
   146a0:	mov	r2, #1
   146a4:	b	146a8 <__assert_fail@plt+0x36b0>
   146a8:	push	{r4, r5, fp, lr}
   146ac:	add	fp, sp, #8
   146b0:	ldr	r5, [r1]
   146b4:	mov	r4, r1
   146b8:	cmp	r0, #0
   146bc:	beq	146d4 <__assert_fail@plt+0x36dc>
   146c0:	mov	r1, #1
   146c4:	add	r1, r1, r5, lsr #1
   146c8:	adds	r5, r5, r1
   146cc:	bcc	146ec <__assert_fail@plt+0x36f4>
   146d0:	bl	149c8 <__assert_fail@plt+0x39d0>
   146d4:	cmp	r5, #0
   146d8:	bne	146ec <__assert_fail@plt+0x36f4>
   146dc:	mov	r1, #64	; 0x40
   146e0:	cmp	r2, #64	; 0x40
   146e4:	udiv	r5, r1, r2
   146e8:	addhi	r5, r5, #1
   146ec:	mov	r1, r5
   146f0:	bl	14560 <__assert_fail@plt+0x3568>
   146f4:	str	r5, [r4]
   146f8:	pop	{r4, r5, fp, pc}
   146fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14700:	add	fp, sp, #24
   14704:	ldr	r6, [r1]
   14708:	mov	r8, r1
   1470c:	ldr	r4, [fp, #8]
   14710:	add	r1, r6, r6, asr #1
   14714:	cmp	r1, r6
   14718:	mvnvs	r1, #-2147483648	; 0x80000000
   1471c:	cmp	r1, r3
   14720:	mov	r5, r1
   14724:	movgt	r5, r3
   14728:	cmn	r3, #1
   1472c:	movle	r5, r1
   14730:	cmn	r4, #1
   14734:	ble	14754 <__assert_fail@plt+0x375c>
   14738:	cmp	r4, #0
   1473c:	beq	147a8 <__assert_fail@plt+0x37b0>
   14740:	cmn	r5, #1
   14744:	ble	1477c <__assert_fail@plt+0x3784>
   14748:	mvn	r7, #-2147483648	; 0x80000000
   1474c:	udiv	r1, r7, r4
   14750:	b	14770 <__assert_fail@plt+0x3778>
   14754:	cmn	r5, #1
   14758:	ble	14798 <__assert_fail@plt+0x37a0>
   1475c:	cmn	r4, #1
   14760:	beq	147a8 <__assert_fail@plt+0x37b0>
   14764:	mov	r1, #-2147483648	; 0x80000000
   14768:	mvn	r7, #-2147483648	; 0x80000000
   1476c:	sdiv	r1, r1, r4
   14770:	cmp	r1, r5
   14774:	bge	147a8 <__assert_fail@plt+0x37b0>
   14778:	b	147b8 <__assert_fail@plt+0x37c0>
   1477c:	beq	147a8 <__assert_fail@plt+0x37b0>
   14780:	mov	r1, #-2147483648	; 0x80000000
   14784:	mvn	r7, #-2147483648	; 0x80000000
   14788:	sdiv	r1, r1, r5
   1478c:	cmp	r1, r4
   14790:	bge	147a8 <__assert_fail@plt+0x37b0>
   14794:	b	147b8 <__assert_fail@plt+0x37c0>
   14798:	mvn	r7, #-2147483648	; 0x80000000
   1479c:	sdiv	r1, r7, r4
   147a0:	cmp	r5, r1
   147a4:	blt	147b8 <__assert_fail@plt+0x37c0>
   147a8:	mul	r1, r5, r4
   147ac:	mov	r7, #64	; 0x40
   147b0:	cmp	r1, #63	; 0x3f
   147b4:	bgt	147c0 <__assert_fail@plt+0x37c8>
   147b8:	sdiv	r5, r7, r4
   147bc:	mul	r1, r5, r4
   147c0:	cmp	r0, #0
   147c4:	moveq	r7, #0
   147c8:	streq	r7, [r8]
   147cc:	sub	r7, r5, r6
   147d0:	cmp	r7, r2
   147d4:	bge	14878 <__assert_fail@plt+0x3880>
   147d8:	add	r5, r6, r2
   147dc:	mov	r2, #0
   147e0:	mov	r1, #0
   147e4:	cmp	r5, r3
   147e8:	movwgt	r2, #1
   147ec:	cmn	r3, #1
   147f0:	movwgt	r1, #1
   147f4:	cmp	r5, r6
   147f8:	bvs	14860 <__assert_fail@plt+0x3868>
   147fc:	ands	r1, r1, r2
   14800:	bne	14860 <__assert_fail@plt+0x3868>
   14804:	cmn	r4, #1
   14808:	ble	14828 <__assert_fail@plt+0x3830>
   1480c:	cmp	r4, #0
   14810:	beq	14874 <__assert_fail@plt+0x387c>
   14814:	cmn	r5, #1
   14818:	ble	1484c <__assert_fail@plt+0x3854>
   1481c:	mvn	r1, #-2147483648	; 0x80000000
   14820:	udiv	r1, r1, r4
   14824:	b	14840 <__assert_fail@plt+0x3848>
   14828:	cmn	r5, #1
   1482c:	ble	14864 <__assert_fail@plt+0x386c>
   14830:	cmn	r4, #1
   14834:	beq	14874 <__assert_fail@plt+0x387c>
   14838:	mov	r1, #-2147483648	; 0x80000000
   1483c:	sdiv	r1, r1, r4
   14840:	cmp	r1, r5
   14844:	bge	14874 <__assert_fail@plt+0x387c>
   14848:	b	14860 <__assert_fail@plt+0x3868>
   1484c:	beq	14874 <__assert_fail@plt+0x387c>
   14850:	mov	r1, #-2147483648	; 0x80000000
   14854:	sdiv	r1, r1, r5
   14858:	cmp	r1, r4
   1485c:	bge	14874 <__assert_fail@plt+0x387c>
   14860:	bl	149c8 <__assert_fail@plt+0x39d0>
   14864:	mvn	r1, #-2147483648	; 0x80000000
   14868:	sdiv	r1, r1, r4
   1486c:	cmp	r5, r1
   14870:	blt	14860 <__assert_fail@plt+0x3868>
   14874:	mul	r1, r5, r4
   14878:	bl	145e4 <__assert_fail@plt+0x35ec>
   1487c:	str	r5, [r8]
   14880:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14884:	push	{fp, lr}
   14888:	mov	fp, sp
   1488c:	mov	r1, #1
   14890:	bl	14a0c <__assert_fail@plt+0x3a14>
   14894:	cmp	r0, #0
   14898:	popne	{fp, pc}
   1489c:	bl	149c8 <__assert_fail@plt+0x39d0>
   148a0:	push	{fp, lr}
   148a4:	mov	fp, sp
   148a8:	bl	14a0c <__assert_fail@plt+0x3a14>
   148ac:	cmp	r0, #0
   148b0:	popne	{fp, pc}
   148b4:	bl	149c8 <__assert_fail@plt+0x39d0>
   148b8:	push	{fp, lr}
   148bc:	mov	fp, sp
   148c0:	mov	r1, #1
   148c4:	bl	14a0c <__assert_fail@plt+0x3a14>
   148c8:	cmp	r0, #0
   148cc:	popne	{fp, pc}
   148d0:	bl	149c8 <__assert_fail@plt+0x39d0>
   148d4:	push	{fp, lr}
   148d8:	mov	fp, sp
   148dc:	bl	14a0c <__assert_fail@plt+0x3a14>
   148e0:	cmp	r0, #0
   148e4:	popne	{fp, pc}
   148e8:	bl	149c8 <__assert_fail@plt+0x39d0>
   148ec:	push	{r4, r5, fp, lr}
   148f0:	add	fp, sp, #8
   148f4:	mov	r5, r0
   148f8:	mov	r0, r1
   148fc:	mov	r4, r1
   14900:	bl	14a60 <__assert_fail@plt+0x3a68>
   14904:	cmp	r0, #0
   14908:	beq	1491c <__assert_fail@plt+0x3924>
   1490c:	mov	r1, r5
   14910:	mov	r2, r4
   14914:	pop	{r4, r5, fp, lr}
   14918:	b	10e00 <memcpy@plt>
   1491c:	bl	149c8 <__assert_fail@plt+0x39d0>
   14920:	push	{r4, r5, fp, lr}
   14924:	add	fp, sp, #8
   14928:	mov	r5, r0
   1492c:	mov	r0, r1
   14930:	mov	r4, r1
   14934:	bl	14a60 <__assert_fail@plt+0x3a68>
   14938:	cmp	r0, #0
   1493c:	beq	14950 <__assert_fail@plt+0x3958>
   14940:	mov	r1, r5
   14944:	mov	r2, r4
   14948:	pop	{r4, r5, fp, lr}
   1494c:	b	10e00 <memcpy@plt>
   14950:	bl	149c8 <__assert_fail@plt+0x39d0>
   14954:	push	{r4, r5, fp, lr}
   14958:	add	fp, sp, #8
   1495c:	mov	r5, r0
   14960:	add	r0, r1, #1
   14964:	mov	r4, r1
   14968:	bl	14a60 <__assert_fail@plt+0x3a68>
   1496c:	cmp	r0, #0
   14970:	beq	1498c <__assert_fail@plt+0x3994>
   14974:	mov	r1, #0
   14978:	mov	r2, r4
   1497c:	strb	r1, [r0, r4]
   14980:	mov	r1, r5
   14984:	pop	{r4, r5, fp, lr}
   14988:	b	10e00 <memcpy@plt>
   1498c:	bl	149c8 <__assert_fail@plt+0x39d0>
   14990:	push	{r4, r5, fp, lr}
   14994:	add	fp, sp, #8
   14998:	mov	r4, r0
   1499c:	bl	10f2c <strlen@plt>
   149a0:	add	r5, r0, #1
   149a4:	mov	r0, r5
   149a8:	bl	14a60 <__assert_fail@plt+0x3a68>
   149ac:	cmp	r0, #0
   149b0:	beq	149c4 <__assert_fail@plt+0x39cc>
   149b4:	mov	r1, r4
   149b8:	mov	r2, r5
   149bc:	pop	{r4, r5, fp, lr}
   149c0:	b	10e00 <memcpy@plt>
   149c4:	bl	149c8 <__assert_fail@plt+0x39d0>
   149c8:	push	{fp, lr}
   149cc:	mov	fp, sp
   149d0:	movw	r0, #24804	; 0x60e4
   149d4:	movw	r1, #22128	; 0x5670
   149d8:	mov	r2, #5
   149dc:	movt	r0, #2
   149e0:	movt	r1, #1
   149e4:	ldr	r4, [r0]
   149e8:	mov	r0, #0
   149ec:	bl	10e24 <dcgettext@plt>
   149f0:	movw	r2, #21015	; 0x5217
   149f4:	mov	r3, r0
   149f8:	mov	r0, r4
   149fc:	mov	r1, #0
   14a00:	movt	r2, #1
   14a04:	bl	10e9c <error@plt>
   14a08:	bl	10fe0 <abort@plt>
   14a0c:	clz	r2, r1
   14a10:	clz	r3, r0
   14a14:	lsr	r2, r2, #5
   14a18:	lsr	r3, r3, #5
   14a1c:	orrs	r2, r3, r2
   14a20:	movwne	r1, #1
   14a24:	movwne	r0, #1
   14a28:	cmp	r1, #0
   14a2c:	beq	14a5c <__assert_fail@plt+0x3a64>
   14a30:	mvn	r2, #-2147483648	; 0x80000000
   14a34:	udiv	r2, r2, r1
   14a38:	cmp	r2, r0
   14a3c:	bcs	14a5c <__assert_fail@plt+0x3a64>
   14a40:	push	{fp, lr}
   14a44:	mov	fp, sp
   14a48:	bl	10f38 <__errno_location@plt>
   14a4c:	mov	r1, #12
   14a50:	str	r1, [r0]
   14a54:	mov	r0, #0
   14a58:	pop	{fp, pc}
   14a5c:	b	10dac <calloc@plt>
   14a60:	cmp	r0, #0
   14a64:	movweq	r0, #1
   14a68:	cmn	r0, #1
   14a6c:	ble	14a74 <__assert_fail@plt+0x3a7c>
   14a70:	b	10ec0 <malloc@plt>
   14a74:	push	{fp, lr}
   14a78:	mov	fp, sp
   14a7c:	bl	10f38 <__errno_location@plt>
   14a80:	mov	r1, #12
   14a84:	str	r1, [r0]
   14a88:	mov	r0, #0
   14a8c:	pop	{fp, pc}
   14a90:	push	{fp, lr}
   14a94:	mov	fp, sp
   14a98:	cmp	r0, #0
   14a9c:	beq	14ab8 <__assert_fail@plt+0x3ac0>
   14aa0:	cmp	r1, #0
   14aa4:	beq	14ac4 <__assert_fail@plt+0x3acc>
   14aa8:	cmn	r1, #1
   14aac:	ble	14acc <__assert_fail@plt+0x3ad4>
   14ab0:	pop	{fp, lr}
   14ab4:	b	10e3c <realloc@plt>
   14ab8:	mov	r0, r1
   14abc:	pop	{fp, lr}
   14ac0:	b	14a60 <__assert_fail@plt+0x3a68>
   14ac4:	bl	14b60 <__assert_fail@plt+0x3b68>
   14ac8:	b	14ad8 <__assert_fail@plt+0x3ae0>
   14acc:	bl	10f38 <__errno_location@plt>
   14ad0:	mov	r1, #12
   14ad4:	str	r1, [r0]
   14ad8:	mov	r0, #0
   14adc:	pop	{fp, pc}
   14ae0:	push	{r4, r5, r6, sl, fp, lr}
   14ae4:	add	fp, sp, #16
   14ae8:	mov	r4, r0
   14aec:	bl	10e78 <__fpending@plt>
   14af0:	mov	r5, r0
   14af4:	mov	r0, r4
   14af8:	bl	10e84 <ferror_unlocked@plt>
   14afc:	mov	r6, r0
   14b00:	mov	r0, r4
   14b04:	bl	11e54 <__assert_fail@plt+0xe5c>
   14b08:	cmp	r6, #0
   14b0c:	beq	14b2c <__assert_fail@plt+0x3b34>
   14b10:	mvn	r4, #0
   14b14:	cmp	r0, #0
   14b18:	bne	14b58 <__assert_fail@plt+0x3b60>
   14b1c:	bl	10f38 <__errno_location@plt>
   14b20:	mov	r1, #0
   14b24:	str	r1, [r0]
   14b28:	b	14b58 <__assert_fail@plt+0x3b60>
   14b2c:	cmp	r0, #0
   14b30:	mov	r4, r0
   14b34:	mvnne	r4, #0
   14b38:	cmp	r5, #0
   14b3c:	bne	14b58 <__assert_fail@plt+0x3b60>
   14b40:	cmp	r0, #0
   14b44:	beq	14b58 <__assert_fail@plt+0x3b60>
   14b48:	bl	10f38 <__errno_location@plt>
   14b4c:	ldr	r0, [r0]
   14b50:	subs	r4, r0, #9
   14b54:	mvnne	r4, #0
   14b58:	mov	r0, r4
   14b5c:	pop	{r4, r5, r6, sl, fp, pc}
   14b60:	push	{r4, r5, r6, sl, fp, lr}
   14b64:	add	fp, sp, #16
   14b68:	mov	r4, r0
   14b6c:	bl	10f38 <__errno_location@plt>
   14b70:	ldr	r6, [r0]
   14b74:	mov	r5, r0
   14b78:	mov	r0, r4
   14b7c:	bl	10de8 <free@plt>
   14b80:	str	r6, [r5]
   14b84:	pop	{r4, r5, r6, sl, fp, pc}
   14b88:	push	{fp, lr}
   14b8c:	mov	fp, sp
   14b90:	mov	r0, #14
   14b94:	bl	10fb0 <nl_langinfo@plt>
   14b98:	movw	r1, #20631	; 0x5097
   14b9c:	cmp	r0, #0
   14ba0:	movt	r1, #1
   14ba4:	movne	r1, r0
   14ba8:	movw	r0, #22145	; 0x5681
   14bac:	ldrb	r2, [r1]
   14bb0:	movt	r0, #1
   14bb4:	cmp	r2, #0
   14bb8:	movne	r0, r1
   14bbc:	pop	{fp, pc}
   14bc0:	push	{r4, r5, r6, r7, fp, lr}
   14bc4:	add	fp, sp, #16
   14bc8:	sub	sp, sp, #8
   14bcc:	cmp	r0, #0
   14bd0:	add	r5, sp, #4
   14bd4:	mov	r7, r2
   14bd8:	mov	r4, r1
   14bdc:	movne	r5, r0
   14be0:	mov	r0, r5
   14be4:	bl	10e90 <mbrtowc@plt>
   14be8:	mov	r6, r0
   14bec:	cmp	r7, #0
   14bf0:	beq	14c18 <__assert_fail@plt+0x3c20>
   14bf4:	cmn	r6, #2
   14bf8:	bcc	14c18 <__assert_fail@plt+0x3c20>
   14bfc:	mov	r0, #0
   14c00:	bl	14c60 <__assert_fail@plt+0x3c68>
   14c04:	cmp	r0, #0
   14c08:	bne	14c18 <__assert_fail@plt+0x3c20>
   14c0c:	ldrb	r0, [r4]
   14c10:	mov	r6, #1
   14c14:	str	r0, [r5]
   14c18:	mov	r0, r6
   14c1c:	sub	sp, fp, #16
   14c20:	pop	{r4, r5, r6, r7, fp, pc}
   14c24:	cmp	r2, #0
   14c28:	beq	14c58 <__assert_fail@plt+0x3c60>
   14c2c:	mvn	r3, #0
   14c30:	udiv	r3, r3, r2
   14c34:	cmp	r3, r1
   14c38:	bcs	14c58 <__assert_fail@plt+0x3c60>
   14c3c:	push	{fp, lr}
   14c40:	mov	fp, sp
   14c44:	bl	10f38 <__errno_location@plt>
   14c48:	mov	r1, #12
   14c4c:	str	r1, [r0]
   14c50:	mov	r0, #0
   14c54:	pop	{fp, pc}
   14c58:	mul	r1, r2, r1
   14c5c:	b	14a90 <__assert_fail@plt+0x3a98>
   14c60:	push	{r4, sl, fp, lr}
   14c64:	add	fp, sp, #8
   14c68:	sub	sp, sp, #264	; 0x108
   14c6c:	add	r1, sp, #7
   14c70:	movw	r2, #257	; 0x101
   14c74:	bl	14ccc <__assert_fail@plt+0x3cd4>
   14c78:	mov	r4, #0
   14c7c:	cmp	r0, #0
   14c80:	bne	14cc0 <__assert_fail@plt+0x3cc8>
   14c84:	movw	r1, #22151	; 0x5687
   14c88:	add	r0, sp, #7
   14c8c:	mov	r2, #2
   14c90:	movt	r1, #1
   14c94:	bl	10f20 <bcmp@plt>
   14c98:	cmp	r0, #0
   14c9c:	beq	14cc0 <__assert_fail@plt+0x3cc8>
   14ca0:	movw	r1, #22153	; 0x5689
   14ca4:	add	r0, sp, #7
   14ca8:	mov	r2, #6
   14cac:	movt	r1, #1
   14cb0:	bl	10f20 <bcmp@plt>
   14cb4:	cmp	r0, #0
   14cb8:	mov	r4, r0
   14cbc:	movwne	r4, #1
   14cc0:	mov	r0, r4
   14cc4:	sub	sp, fp, #8
   14cc8:	pop	{r4, sl, fp, pc}
   14ccc:	push	{r4, r5, r6, r7, fp, lr}
   14cd0:	add	fp, sp, #16
   14cd4:	mov	r4, r1
   14cd8:	mov	r1, #0
   14cdc:	mov	r6, r2
   14ce0:	bl	10f98 <setlocale@plt>
   14ce4:	cmp	r0, #0
   14ce8:	beq	14d14 <__assert_fail@plt+0x3d1c>
   14cec:	mov	r7, r0
   14cf0:	bl	10f2c <strlen@plt>
   14cf4:	cmp	r0, r6
   14cf8:	bcs	14d28 <__assert_fail@plt+0x3d30>
   14cfc:	add	r2, r0, #1
   14d00:	mov	r0, r4
   14d04:	mov	r1, r7
   14d08:	bl	10e00 <memcpy@plt>
   14d0c:	mov	r5, #0
   14d10:	b	14d50 <__assert_fail@plt+0x3d58>
   14d14:	cmp	r6, #0
   14d18:	mov	r5, #22
   14d1c:	movne	r0, #0
   14d20:	strbne	r0, [r4]
   14d24:	b	14d50 <__assert_fail@plt+0x3d58>
   14d28:	mov	r5, #34	; 0x22
   14d2c:	cmp	r6, #0
   14d30:	beq	14d50 <__assert_fail@plt+0x3d58>
   14d34:	sub	r6, r6, #1
   14d38:	mov	r0, r4
   14d3c:	mov	r1, r7
   14d40:	mov	r2, r6
   14d44:	bl	10e00 <memcpy@plt>
   14d48:	mov	r0, #0
   14d4c:	strb	r0, [r4, r6]
   14d50:	mov	r0, r5
   14d54:	pop	{r4, r5, r6, r7, fp, pc}
   14d58:	mov	r1, #0
   14d5c:	b	10f98 <setlocale@plt>
   14d60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d64:	mov	r7, r0
   14d68:	ldr	r6, [pc, #72]	; 14db8 <__assert_fail@plt+0x3dc0>
   14d6c:	ldr	r5, [pc, #72]	; 14dbc <__assert_fail@plt+0x3dc4>
   14d70:	add	r6, pc, r6
   14d74:	add	r5, pc, r5
   14d78:	sub	r6, r6, r5
   14d7c:	mov	r8, r1
   14d80:	mov	r9, r2
   14d84:	bl	10d8c <calloc@plt-0x20>
   14d88:	asrs	r6, r6, #2
   14d8c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d90:	mov	r4, #0
   14d94:	add	r4, r4, #1
   14d98:	ldr	r3, [r5], #4
   14d9c:	mov	r2, r9
   14da0:	mov	r1, r8
   14da4:	mov	r0, r7
   14da8:	blx	r3
   14dac:	cmp	r6, r4
   14db0:	bne	14d94 <__assert_fail@plt+0x3d9c>
   14db4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14db8:	muleq	r1, r4, r1
   14dbc:	andeq	r1, r1, ip, lsl #3
   14dc0:	bx	lr
   14dc4:	ldr	r3, [pc, #12]	; 14dd8 <__assert_fail@plt+0x3de0>
   14dc8:	mov	r1, #0
   14dcc:	add	r3, pc, r3
   14dd0:	ldr	r2, [r3]
   14dd4:	b	10f44 <__cxa_atexit@plt>
   14dd8:	andeq	r1, r1, r8, lsl #6

Disassembly of section .fini:

00014ddc <.fini>:
   14ddc:	push	{r3, lr}
   14de0:	pop	{r3, pc}
