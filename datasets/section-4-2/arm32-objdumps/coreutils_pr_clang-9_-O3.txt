
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011290 <.init>:
   11290:	push	{r3, lr}
   11294:	bl	1164c <__assert_fail@plt+0x48>
   11298:	pop	{r3, pc}

Disassembly of section .plt:

0001129c <fdopen@plt-0x14>:
   1129c:	push	{lr}		; (str lr, [sp, #-4]!)
   112a0:	ldr	lr, [pc, #4]	; 112ac <fdopen@plt-0x4>
   112a4:	add	lr, pc, lr
   112a8:	ldr	pc, [lr, #8]!
   112ac:	andeq	r0, r2, r4, asr sp

000112b0 <fdopen@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #32, 20	; 0x20000
   112b8:	ldr	pc, [ip, #3412]!	; 0xd54

000112bc <calloc@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #32, 20	; 0x20000
   112c4:	ldr	pc, [ip, #3404]!	; 0xd4c

000112c8 <fputs_unlocked@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #32, 20	; 0x20000
   112d0:	ldr	pc, [ip, #3396]!	; 0xd44

000112d4 <raise@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #32, 20	; 0x20000
   112dc:	ldr	pc, [ip, #3388]!	; 0xd3c

000112e0 <gmtime_r@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #32, 20	; 0x20000
   112e8:	ldr	pc, [ip, #3380]!	; 0xd34

000112ec <strcmp@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #32, 20	; 0x20000
   112f4:	ldr	pc, [ip, #3372]!	; 0xd2c

000112f8 <strtol@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #32, 20	; 0x20000
   11300:	ldr	pc, [ip, #3364]!	; 0xd24

00011304 <posix_fadvise64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #32, 20	; 0x20000
   1130c:	ldr	pc, [ip, #3356]!	; 0xd1c

00011310 <mktime@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #32, 20	; 0x20000
   11318:	ldr	pc, [ip, #3348]!	; 0xd14

0001131c <fflush@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #32, 20	; 0x20000
   11324:	ldr	pc, [ip, #3340]!	; 0xd0c

00011328 <wcwidth@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #32, 20	; 0x20000
   11330:	ldr	pc, [ip, #3332]!	; 0xd04

00011334 <free@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #32, 20	; 0x20000
   1133c:	ldr	pc, [ip, #3324]!	; 0xcfc

00011340 <clock_gettime@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #32, 20	; 0x20000
   11348:	ldr	pc, [ip, #3316]!	; 0xcf4

0001134c <_exit@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #32, 20	; 0x20000
   11354:	ldr	pc, [ip, #3308]!	; 0xcec

00011358 <memcpy@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #32, 20	; 0x20000
   11360:	ldr	pc, [ip, #3300]!	; 0xce4

00011364 <__strtoull_internal@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #32, 20	; 0x20000
   1136c:	ldr	pc, [ip, #3292]!	; 0xcdc

00011370 <mbsinit@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #32, 20	; 0x20000
   11378:	ldr	pc, [ip, #3284]!	; 0xcd4

0001137c <dcgettext@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #32, 20	; 0x20000
   11384:	ldr	pc, [ip, #3276]!	; 0xccc

00011388 <realloc@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #32, 20	; 0x20000
   11390:	ldr	pc, [ip, #3268]!	; 0xcc4

00011394 <localtime_r@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #32, 20	; 0x20000
   1139c:	ldr	pc, [ip, #3260]!	; 0xcbc

000113a0 <textdomain@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #32, 20	; 0x20000
   113a8:	ldr	pc, [ip, #3252]!	; 0xcb4

000113ac <iswcntrl@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #32, 20	; 0x20000
   113b4:	ldr	pc, [ip, #3244]!	; 0xcac

000113b8 <iswprint@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #32, 20	; 0x20000
   113c0:	ldr	pc, [ip, #3236]!	; 0xca4

000113c4 <tzset@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #32, 20	; 0x20000
   113cc:	ldr	pc, [ip, #3228]!	; 0xc9c

000113d0 <__fxstat64@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #32, 20	; 0x20000
   113d8:	ldr	pc, [ip, #3220]!	; 0xc94

000113dc <fwrite@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #32, 20	; 0x20000
   113e4:	ldr	pc, [ip, #3212]!	; 0xc8c

000113e8 <lseek64@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #32, 20	; 0x20000
   113f0:	ldr	pc, [ip, #3204]!	; 0xc84

000113f4 <__ctype_get_mb_cur_max@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #32, 20	; 0x20000
   113fc:	ldr	pc, [ip, #3196]!	; 0xc7c

00011400 <__fpending@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #32, 20	; 0x20000
   11408:	ldr	pc, [ip, #3188]!	; 0xc74

0001140c <mbrtowc@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #32, 20	; 0x20000
   11414:	ldr	pc, [ip, #3180]!	; 0xc6c

00011418 <error@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #32, 20	; 0x20000
   11420:	ldr	pc, [ip, #3172]!	; 0xc64

00011424 <getenv@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #32, 20	; 0x20000
   1142c:	ldr	pc, [ip, #3164]!	; 0xc5c

00011430 <malloc@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #32, 20	; 0x20000
   11438:	ldr	pc, [ip, #3156]!	; 0xc54

0001143c <__libc_start_main@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #32, 20	; 0x20000
   11444:	ldr	pc, [ip, #3148]!	; 0xc4c

00011448 <strftime@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #32, 20	; 0x20000
   11450:	ldr	pc, [ip, #3140]!	; 0xc44

00011454 <__freading@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #32, 20	; 0x20000
   1145c:	ldr	pc, [ip, #3132]!	; 0xc3c

00011460 <__ctype_tolower_loc@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #32, 20	; 0x20000
   11468:	ldr	pc, [ip, #3124]!	; 0xc34

0001146c <__ctype_toupper_loc@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #32, 20	; 0x20000
   11474:	ldr	pc, [ip, #3116]!	; 0xc2c

00011478 <__gmon_start__@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #32, 20	; 0x20000
   11480:	ldr	pc, [ip, #3108]!	; 0xc24

00011484 <getopt_long@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #32, 20	; 0x20000
   1148c:	ldr	pc, [ip, #3100]!	; 0xc1c

00011490 <__ctype_b_loc@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #32, 20	; 0x20000
   11498:	ldr	pc, [ip, #3092]!	; 0xc14

0001149c <exit@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #32, 20	; 0x20000
   114a4:	ldr	pc, [ip, #3084]!	; 0xc0c

000114a8 <bcmp@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #32, 20	; 0x20000
   114b0:	ldr	pc, [ip, #3076]!	; 0xc04

000114b4 <strlen@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #32, 20	; 0x20000
   114bc:	ldr	pc, [ip, #3068]!	; 0xbfc

000114c0 <strchr@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #32, 20	; 0x20000
   114c8:	ldr	pc, [ip, #3060]!	; 0xbf4

000114cc <setenv@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #32, 20	; 0x20000
   114d4:	ldr	pc, [ip, #3052]!	; 0xbec

000114d8 <ungetc@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #32, 20	; 0x20000
   114e0:	ldr	pc, [ip, #3044]!	; 0xbe4

000114e4 <__errno_location@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #32, 20	; 0x20000
   114ec:	ldr	pc, [ip, #3036]!	; 0xbdc

000114f0 <__sprintf_chk@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #32, 20	; 0x20000
   114f8:	ldr	pc, [ip, #3028]!	; 0xbd4

000114fc <__cxa_atexit@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #32, 20	; 0x20000
   11504:	ldr	pc, [ip, #3020]!	; 0xbcc

00011508 <memset@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #32, 20	; 0x20000
   11510:	ldr	pc, [ip, #3012]!	; 0xbc4

00011514 <__printf_chk@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #32, 20	; 0x20000
   1151c:	ldr	pc, [ip, #3004]!	; 0xbbc

00011520 <fileno@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #32, 20	; 0x20000
   11528:	ldr	pc, [ip, #2996]!	; 0xbb4

0001152c <__fprintf_chk@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #32, 20	; 0x20000
   11534:	ldr	pc, [ip, #2988]!	; 0xbac

00011538 <fclose@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #32, 20	; 0x20000
   11540:	ldr	pc, [ip, #2980]!	; 0xba4

00011544 <fseeko64@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #32, 20	; 0x20000
   1154c:	ldr	pc, [ip, #2972]!	; 0xb9c

00011550 <fcntl64@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #32, 20	; 0x20000
   11558:	ldr	pc, [ip, #2964]!	; 0xb94

0001155c <__uflow@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #32, 20	; 0x20000
   11564:	ldr	pc, [ip, #2956]!	; 0xb8c

00011568 <__overflow@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #32, 20	; 0x20000
   11570:	ldr	pc, [ip, #2948]!	; 0xb84

00011574 <setlocale@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #32, 20	; 0x20000
   1157c:	ldr	pc, [ip, #2940]!	; 0xb7c

00011580 <strrchr@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #32, 20	; 0x20000
   11588:	ldr	pc, [ip, #2932]!	; 0xb74

0001158c <nl_langinfo@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #32, 20	; 0x20000
   11594:	ldr	pc, [ip, #2924]!	; 0xb6c

00011598 <timegm@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #32, 20	; 0x20000
   115a0:	ldr	pc, [ip, #2916]!	; 0xb64

000115a4 <clearerr_unlocked@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #32, 20	; 0x20000
   115ac:	ldr	pc, [ip, #2908]!	; 0xb5c

000115b0 <__strtoll_internal@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #32, 20	; 0x20000
   115b8:	ldr	pc, [ip, #2900]!	; 0xb54

000115bc <fopen64@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #32, 20	; 0x20000
   115c4:	ldr	pc, [ip, #2892]!	; 0xb4c

000115c8 <bindtextdomain@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #32, 20	; 0x20000
   115d0:	ldr	pc, [ip, #2884]!	; 0xb44

000115d4 <unsetenv@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #32, 20	; 0x20000
   115dc:	ldr	pc, [ip, #2876]!	; 0xb3c

000115e0 <strncmp@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #32, 20	; 0x20000
   115e8:	ldr	pc, [ip, #2868]!	; 0xb34

000115ec <abort@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #32, 20	; 0x20000
   115f4:	ldr	pc, [ip, #2860]!	; 0xb2c

000115f8 <close@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #32, 20	; 0x20000
   11600:	ldr	pc, [ip, #2852]!	; 0xb24

00011604 <__assert_fail@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #32, 20	; 0x20000
   1160c:	ldr	pc, [ip, #2844]!	; 0xb1c

Disassembly of section .text:

00011610 <.text>:
   11610:	mov	fp, #0
   11614:	mov	lr, #0
   11618:	pop	{r1}		; (ldr r1, [sp], #4)
   1161c:	mov	r2, sp
   11620:	push	{r2}		; (str r2, [sp, #-4]!)
   11624:	push	{r0}		; (str r0, [sp, #-4]!)
   11628:	ldr	ip, [pc, #16]	; 11640 <__assert_fail@plt+0x3c>
   1162c:	push	{ip}		; (str ip, [sp, #-4]!)
   11630:	ldr	r0, [pc, #12]	; 11644 <__assert_fail@plt+0x40>
   11634:	ldr	r3, [pc, #12]	; 11648 <__assert_fail@plt+0x44>
   11638:	bl	1143c <__libc_start_main@plt>
   1163c:	bl	115ec <abort@plt>
   11640:	andeq	pc, r1, r4, lsr r9	; <UNPREDICTABLE>
   11644:	andeq	r1, r1, r0, lsl #14
   11648:	ldrdeq	pc, [r1], -r4
   1164c:	ldr	r3, [pc, #20]	; 11668 <__assert_fail@plt+0x64>
   11650:	ldr	r2, [pc, #20]	; 1166c <__assert_fail@plt+0x68>
   11654:	add	r3, pc, r3
   11658:	ldr	r2, [r3, r2]
   1165c:	cmp	r2, #0
   11660:	bxeq	lr
   11664:	b	11478 <__gmon_start__@plt>
   11668:	andeq	r0, r2, r4, lsr #19
   1166c:	andeq	r0, r0, ip, lsr #2
   11670:	ldr	r0, [pc, #24]	; 11690 <__assert_fail@plt+0x8c>
   11674:	ldr	r3, [pc, #24]	; 11694 <__assert_fail@plt+0x90>
   11678:	cmp	r3, r0
   1167c:	bxeq	lr
   11680:	ldr	r3, [pc, #16]	; 11698 <__assert_fail@plt+0x94>
   11684:	cmp	r3, #0
   11688:	bxeq	lr
   1168c:	bx	r3
   11690:			; <UNDEFINED> instruction: 0x000321b0
   11694:			; <UNDEFINED> instruction: 0x000321b0
   11698:	andeq	r0, r0, r0
   1169c:	ldr	r0, [pc, #36]	; 116c8 <__assert_fail@plt+0xc4>
   116a0:	ldr	r1, [pc, #36]	; 116cc <__assert_fail@plt+0xc8>
   116a4:	sub	r1, r1, r0
   116a8:	asr	r1, r1, #2
   116ac:	add	r1, r1, r1, lsr #31
   116b0:	asrs	r1, r1, #1
   116b4:	bxeq	lr
   116b8:	ldr	r3, [pc, #16]	; 116d0 <__assert_fail@plt+0xcc>
   116bc:	cmp	r3, #0
   116c0:	bxeq	lr
   116c4:	bx	r3
   116c8:			; <UNDEFINED> instruction: 0x000321b0
   116cc:			; <UNDEFINED> instruction: 0x000321b0
   116d0:	andeq	r0, r0, r0
   116d4:	push	{r4, lr}
   116d8:	ldr	r4, [pc, #24]	; 116f8 <__assert_fail@plt+0xf4>
   116dc:	ldrb	r3, [r4]
   116e0:	cmp	r3, #0
   116e4:	popne	{r4, pc}
   116e8:	bl	11670 <__assert_fail@plt+0x6c>
   116ec:	mov	r3, #1
   116f0:	strb	r3, [r4]
   116f4:	pop	{r4, pc}
   116f8:	ldrdeq	r2, [r3], -r4
   116fc:	b	1169c <__assert_fail@plt+0x98>
   11700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11704:	add	fp, sp, #28
   11708:	sub	sp, sp, #44	; 0x2c
   1170c:	mov	r4, #0
   11710:	mov	r6, r0
   11714:	mov	sl, r1
   11718:	str	r4, [fp, #-32]	; 0xffffffe0
   1171c:	ldr	r0, [r1]
   11720:	bl	18aa4 <__assert_fail@plt+0x74a0>
   11724:	movw	r1, #3108	; 0xc24
   11728:	mov	r0, #6
   1172c:	movt	r1, #2
   11730:	bl	11574 <setlocale@plt>
   11734:	movw	r5, #64143	; 0xfa8f
   11738:	movw	r1, #63836	; 0xf95c
   1173c:	movt	r5, #1
   11740:	movt	r1, #1
   11744:	mov	r0, r5
   11748:	bl	115c8 <bindtextdomain@plt>
   1174c:	mov	r0, r5
   11750:	bl	113a0 <textdomain@plt>
   11754:	movw	r0, #25388	; 0x632c
   11758:	movt	r0, #1
   1175c:	bl	1f938 <__assert_fail@plt+0xe334>
   11760:	cmp	r6, #2
   11764:	blt	11778 <__assert_fail@plt+0x174>
   11768:	sub	r0, r6, #1
   1176c:	mov	r1, #4
   11770:	bl	1ba54 <__assert_fail@plt+0xa450>
   11774:	mov	r4, r0
   11778:	movw	r2, #3672	; 0xe58
   1177c:	movw	r3, #3728	; 0xe90
   11780:	mvn	r0, #0
   11784:	mov	r1, sl
   11788:	str	r6, [sp, #32]
   1178c:	str	r0, [sp, #36]	; 0x24
   11790:	add	r0, sp, #36	; 0x24
   11794:	movt	r2, #2
   11798:	movt	r3, #2
   1179c:	str	r0, [sp]
   117a0:	mov	r0, r6
   117a4:	bl	11484 <getopt_long@plt>
   117a8:	movw	r5, #8664	; 0x21d8
   117ac:	movw	r7, #8792	; 0x2258
   117b0:	cmn	r0, #1
   117b4:	movt	r5, #3
   117b8:	movt	r7, #3
   117bc:	beq	12334 <__assert_fail@plt+0xd30>
   117c0:	mov	r8, r0
   117c4:	mov	r0, #0
   117c8:	mov	r9, #0
   117cc:	mov	r5, #0
   117d0:	mov	r6, #0
   117d4:	str	r0, [sp, #20]
   117d8:	mov	r0, #0
   117dc:	str	r0, [sp, #24]
   117e0:	mov	r0, #0
   117e4:	str	r0, [sp, #28]
   117e8:	sub	r0, r8, #48	; 0x30
   117ec:	cmp	r0, #9
   117f0:	bhi	11864 <__assert_fail@plt+0x260>
   117f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   117f8:	add	r7, r9, #1
   117fc:	cmp	r7, r0
   11800:	bcc	11814 <__assert_fail@plt+0x210>
   11804:	mov	r0, r5
   11808:	sub	r1, fp, #32
   1180c:	bl	1bab8 <__assert_fail@plt+0xa4b4>
   11810:	mov	r5, r0
   11814:	mov	r0, #0
   11818:	strb	r8, [r5, r9]
   1181c:	mov	r9, r7
   11820:	strb	r0, [r5, r7]
   11824:	ldr	r7, [sp, #32]
   11828:	movw	r2, #3672	; 0xe58
   1182c:	movw	r3, #3728	; 0xe90
   11830:	mvn	r0, #0
   11834:	mov	r1, sl
   11838:	str	r0, [sp, #36]	; 0x24
   1183c:	add	r0, sp, #36	; 0x24
   11840:	movt	r2, #2
   11844:	movt	r3, #2
   11848:	str	r0, [sp]
   1184c:	mov	r0, r7
   11850:	bl	11484 <getopt_long@plt>
   11854:	mov	r8, r0
   11858:	cmn	r0, #1
   1185c:	bne	117e8 <__assert_fail@plt+0x1e4>
   11860:	b	122b8 <__assert_fail@plt+0xcb4>
   11864:	add	r0, r8, #3
   11868:	cmp	r0, #260	; 0x104
   1186c:	bhi	1262c <__assert_fail@plt+0x1028>
   11870:	add	r1, pc, #0
   11874:	ldr	pc, [r1, r0, lsl #2]
   11878:	andeq	r2, r1, r4, lsr r6
   1187c:	andeq	r2, r1, r8, lsl #13
   11880:	andeq	r2, r1, ip, lsr #12
   11884:	andeq	r2, r1, ip, lsr #12
   11888:	andeq	r2, r1, r8, asr #2
   1188c:	andeq	r2, r1, ip, lsr #12
   11890:	andeq	r2, r1, ip, lsr #12
   11894:	andeq	r2, r1, ip, lsr #12
   11898:	andeq	r2, r1, ip, lsr #12
   1189c:	andeq	r2, r1, ip, lsr #12
   118a0:	andeq	r2, r1, ip, lsr #12
   118a4:	andeq	r2, r1, ip, lsr #12
   118a8:	andeq	r2, r1, ip, lsr #12
   118ac:	andeq	r2, r1, ip, lsr #12
   118b0:	andeq	r2, r1, ip, lsr #12
   118b4:	andeq	r2, r1, ip, lsr #12
   118b8:	andeq	r2, r1, ip, lsr #12
   118bc:	andeq	r2, r1, ip, lsr #12
   118c0:	andeq	r2, r1, ip, lsr #12
   118c4:	andeq	r2, r1, ip, lsr #12
   118c8:	andeq	r2, r1, ip, lsr #12
   118cc:	andeq	r2, r1, ip, lsr #12
   118d0:	andeq	r2, r1, ip, lsr #12
   118d4:	andeq	r2, r1, ip, lsr #12
   118d8:	andeq	r2, r1, ip, lsr #12
   118dc:	andeq	r2, r1, ip, lsr #12
   118e0:	andeq	r2, r1, ip, lsr #12
   118e4:	andeq	r2, r1, ip, lsr #12
   118e8:	andeq	r2, r1, ip, lsr #12
   118ec:	andeq	r2, r1, ip, lsr #12
   118f0:	andeq	r2, r1, ip, lsr #12
   118f4:	andeq	r2, r1, ip, lsr #12
   118f8:	andeq	r2, r1, ip, lsr #12
   118fc:	andeq	r2, r1, ip, lsr #12
   11900:	andeq	r2, r1, ip, lsr #12
   11904:	andeq	r2, r1, ip, lsr #12
   11908:	andeq	r2, r1, ip, lsr #12
   1190c:	andeq	r2, r1, ip, lsr #12
   11910:	andeq	r2, r1, ip, lsr #12
   11914:	andeq	r2, r1, ip, lsr #12
   11918:	andeq	r2, r1, ip, lsr #12
   1191c:	andeq	r2, r1, ip, lsr #12
   11920:	andeq	r2, r1, ip, lsr #12
   11924:	andeq	r2, r1, ip, lsr #12
   11928:	andeq	r2, r1, ip, lsr #12
   1192c:	andeq	r2, r1, ip, lsr #12
   11930:	andeq	r2, r1, ip, lsr #12
   11934:	andeq	r2, r1, ip, lsr #12
   11938:	andeq	r2, r1, ip, lsr #12
   1193c:	andeq	r2, r1, ip, lsr #12
   11940:	andeq	r2, r1, ip, lsr #12
   11944:	andeq	r2, r1, ip, lsr #12
   11948:	andeq	r2, r1, ip, lsr #12
   1194c:	andeq	r2, r1, ip, lsr #12
   11950:	andeq	r2, r1, ip, lsr #12
   11954:	andeq	r2, r1, ip, lsr #12
   11958:	andeq	r2, r1, ip, lsr #12
   1195c:	andeq	r2, r1, ip, lsr #12
   11960:	andeq	r2, r1, ip, lsr #12
   11964:	andeq	r2, r1, ip, lsr #12
   11968:	andeq	r2, r1, ip, lsr #12
   1196c:	andeq	r2, r1, ip, lsr #12
   11970:	andeq	r2, r1, ip, lsr #12
   11974:	andeq	r2, r1, ip, lsr #12
   11978:	andeq	r2, r1, ip, lsr #12
   1197c:	andeq	r2, r1, ip, lsr #12
   11980:	andeq	r2, r1, ip, lsr #12
   11984:	andeq	r2, r1, ip, lsr #12
   11988:	andeq	r2, r1, ip, lsr #12
   1198c:	andeq	r2, r1, ip, lsr #12
   11990:	andeq	r2, r1, ip, lsr #12
   11994:	andeq	r2, r1, r8, rrx
   11998:	andeq	r2, r1, ip, lsr #12
   1199c:	andeq	r1, r1, ip, lsl #25
   119a0:	andeq	r2, r1, ip, lsr #12
   119a4:	andeq	r2, r1, ip, lsr #12
   119a8:	andeq	r2, r1, ip, lsr #12
   119ac:	andeq	r2, r1, ip, lsr #3
   119b0:	andeq	r2, r1, ip, lsr #12
   119b4:	andeq	r2, r1, ip, lsr #12
   119b8:	andeq	r2, r1, ip, lsr #12
   119bc:	andeq	r1, r1, r8, lsl #31
   119c0:	andeq	r2, r1, ip, lsr #12
   119c4:	andeq	r2, r1, ip, lsr #12
   119c8:	andeq	r2, r1, ip, lsr #12
   119cc:	andeq	r2, r1, ip, lsr #12
   119d0:	andeq	r1, r1, r4, lsl pc
   119d4:	strdeq	r1, [r1], -r8
   119d8:	andeq	r2, r1, ip, lsr #12
   119dc:	andeq	r2, r1, ip, lsr #12
   119e0:	andeq	r1, r1, r0, asr #27
   119e4:	andeq	r2, r1, ip, lsr #12
   119e8:	andeq	r2, r1, ip, lsr #12
   119ec:	andeq	r2, r1, ip, lsr #12
   119f0:	andeq	r2, r1, ip, lsr #12
   119f4:	andeq	r2, r1, ip, lsr #12
   119f8:	andeq	r2, r1, ip, lsr #12
   119fc:	andeq	r2, r1, ip, lsr #12
   11a00:	andeq	r2, r1, ip, lsr #12
   11a04:	andeq	r2, r1, ip, lsr #12
   11a08:	ldrdeq	r2, [r1], -ip
   11a0c:	andeq	r2, r1, r0, asr r0
   11a10:	strdeq	r1, [r1], -ip
   11a14:	andeq	r2, r1, r8, lsr r0
   11a18:	andeq	r2, r1, r8, lsr #4
   11a1c:	andeq	r1, r1, ip, lsl #25
   11a20:	andeq	r2, r1, ip, lsr #12
   11a24:	andeq	r2, r1, r0
   11a28:	andeq	r2, r1, r8, ror #4
   11a2c:	andeq	r2, r1, ip, lsr #12
   11a30:	andeq	r2, r1, ip, lsr #12
   11a34:	andeq	r2, r1, r8, ror #1
   11a38:	andeq	r1, r1, r4, lsr #27
   11a3c:			; <UNDEFINED> instruction: 0x00011eb8
   11a40:	andeq	r2, r1, r8, lsl #1
   11a44:	andeq	r2, r1, ip, lsr #12
   11a48:	andeq	r2, r1, ip, lsr #12
   11a4c:	andeq	r1, r1, r4, lsr lr
   11a50:	andeq	r1, r1, ip, asr #28
   11a54:	andeq	r2, r1, r0, lsr #32
   11a58:	andeq	r2, r1, ip, lsr #12
   11a5c:	andeq	r2, r1, r4, asr #3
   11a60:	andeq	r1, r1, r4, lsr #26
   11a64:	andeq	r2, r1, ip, lsr #12
   11a68:	andeq	r2, r1, ip, lsr #12
   11a6c:	andeq	r2, r1, ip, lsr #12
   11a70:	andeq	r2, r1, ip, lsr #12
   11a74:	andeq	r2, r1, ip, lsr #12
   11a78:	andeq	r2, r1, ip, lsr #12
   11a7c:	andeq	r2, r1, ip, lsr #12
   11a80:	andeq	r2, r1, ip, lsr #12
   11a84:	andeq	r2, r1, ip, lsr #12
   11a88:	andeq	r2, r1, ip, lsr #12
   11a8c:	andeq	r2, r1, ip, lsr #12
   11a90:	andeq	r2, r1, ip, lsr #12
   11a94:	andeq	r2, r1, ip, lsr #12
   11a98:	andeq	r2, r1, ip, lsr #12
   11a9c:	andeq	r2, r1, ip, lsr #12
   11aa0:	andeq	r2, r1, ip, lsr #12
   11aa4:	andeq	r2, r1, ip, lsr #12
   11aa8:	andeq	r2, r1, ip, lsr #12
   11aac:	andeq	r2, r1, ip, lsr #12
   11ab0:	andeq	r2, r1, ip, lsr #12
   11ab4:	andeq	r2, r1, ip, lsr #12
   11ab8:	andeq	r2, r1, ip, lsr #12
   11abc:	andeq	r2, r1, ip, lsr #12
   11ac0:	andeq	r2, r1, ip, lsr #12
   11ac4:	andeq	r2, r1, ip, lsr #12
   11ac8:	andeq	r2, r1, ip, lsr #12
   11acc:	andeq	r2, r1, ip, lsr #12
   11ad0:	andeq	r2, r1, ip, lsr #12
   11ad4:	andeq	r2, r1, ip, lsr #12
   11ad8:	andeq	r2, r1, ip, lsr #12
   11adc:	andeq	r2, r1, ip, lsr #12
   11ae0:	andeq	r2, r1, ip, lsr #12
   11ae4:	andeq	r2, r1, ip, lsr #12
   11ae8:	andeq	r2, r1, ip, lsr #12
   11aec:	andeq	r2, r1, ip, lsr #12
   11af0:	andeq	r2, r1, ip, lsr #12
   11af4:	andeq	r2, r1, ip, lsr #12
   11af8:	andeq	r2, r1, ip, lsr #12
   11afc:	andeq	r2, r1, ip, lsr #12
   11b00:	andeq	r2, r1, ip, lsr #12
   11b04:	andeq	r2, r1, ip, lsr #12
   11b08:	andeq	r2, r1, ip, lsr #12
   11b0c:	andeq	r2, r1, ip, lsr #12
   11b10:	andeq	r2, r1, ip, lsr #12
   11b14:	andeq	r2, r1, ip, lsr #12
   11b18:	andeq	r2, r1, ip, lsr #12
   11b1c:	andeq	r2, r1, ip, lsr #12
   11b20:	andeq	r2, r1, ip, lsr #12
   11b24:	andeq	r2, r1, ip, lsr #12
   11b28:	andeq	r2, r1, ip, lsr #12
   11b2c:	andeq	r2, r1, ip, lsr #12
   11b30:	andeq	r2, r1, ip, lsr #12
   11b34:	andeq	r2, r1, ip, lsr #12
   11b38:	andeq	r2, r1, ip, lsr #12
   11b3c:	andeq	r2, r1, ip, lsr #12
   11b40:	andeq	r2, r1, ip, lsr #12
   11b44:	andeq	r2, r1, ip, lsr #12
   11b48:	andeq	r2, r1, ip, lsr #12
   11b4c:	andeq	r2, r1, ip, lsr #12
   11b50:	andeq	r2, r1, ip, lsr #12
   11b54:	andeq	r2, r1, ip, lsr #12
   11b58:	andeq	r2, r1, ip, lsr #12
   11b5c:	andeq	r2, r1, ip, lsr #12
   11b60:	andeq	r2, r1, ip, lsr #12
   11b64:	andeq	r2, r1, ip, lsr #12
   11b68:	andeq	r2, r1, ip, lsr #12
   11b6c:	andeq	r2, r1, ip, lsr #12
   11b70:	andeq	r2, r1, ip, lsr #12
   11b74:	andeq	r2, r1, ip, lsr #12
   11b78:	andeq	r2, r1, ip, lsr #12
   11b7c:	andeq	r2, r1, ip, lsr #12
   11b80:	andeq	r2, r1, ip, lsr #12
   11b84:	andeq	r2, r1, ip, lsr #12
   11b88:	andeq	r2, r1, ip, lsr #12
   11b8c:	andeq	r2, r1, ip, lsr #12
   11b90:	andeq	r2, r1, ip, lsr #12
   11b94:	andeq	r2, r1, ip, lsr #12
   11b98:	andeq	r2, r1, ip, lsr #12
   11b9c:	andeq	r2, r1, ip, lsr #12
   11ba0:	andeq	r2, r1, ip, lsr #12
   11ba4:	andeq	r2, r1, ip, lsr #12
   11ba8:	andeq	r2, r1, ip, lsr #12
   11bac:	andeq	r2, r1, ip, lsr #12
   11bb0:	andeq	r2, r1, ip, lsr #12
   11bb4:	andeq	r2, r1, ip, lsr #12
   11bb8:	andeq	r2, r1, ip, lsr #12
   11bbc:	andeq	r2, r1, ip, lsr #12
   11bc0:	andeq	r2, r1, ip, lsr #12
   11bc4:	andeq	r2, r1, ip, lsr #12
   11bc8:	andeq	r2, r1, ip, lsr #12
   11bcc:	andeq	r2, r1, ip, lsr #12
   11bd0:	andeq	r2, r1, ip, lsr #12
   11bd4:	andeq	r2, r1, ip, lsr #12
   11bd8:	andeq	r2, r1, ip, lsr #12
   11bdc:	andeq	r2, r1, ip, lsr #12
   11be0:	andeq	r2, r1, ip, lsr #12
   11be4:	andeq	r2, r1, ip, lsr #12
   11be8:	andeq	r2, r1, ip, lsr #12
   11bec:	andeq	r2, r1, ip, lsr #12
   11bf0:	andeq	r2, r1, ip, lsr #12
   11bf4:	andeq	r2, r1, ip, lsr #12
   11bf8:	andeq	r2, r1, ip, lsr #12
   11bfc:	andeq	r2, r1, ip, lsr #12
   11c00:	andeq	r2, r1, ip, lsr #12
   11c04:	andeq	r2, r1, ip, lsr #12
   11c08:	andeq	r2, r1, ip, lsr #12
   11c0c:	andeq	r2, r1, ip, lsr #12
   11c10:	andeq	r2, r1, ip, lsr #12
   11c14:	andeq	r2, r1, ip, lsr #12
   11c18:	andeq	r2, r1, ip, lsr #12
   11c1c:	andeq	r2, r1, ip, lsr #12
   11c20:	andeq	r2, r1, ip, lsr #12
   11c24:	andeq	r2, r1, ip, lsr #12
   11c28:	andeq	r2, r1, ip, lsr #12
   11c2c:	andeq	r2, r1, ip, lsr #12
   11c30:	andeq	r2, r1, ip, lsr #12
   11c34:	andeq	r2, r1, ip, lsr #12
   11c38:	andeq	r2, r1, ip, lsr #12
   11c3c:	andeq	r2, r1, ip, lsr #12
   11c40:	andeq	r2, r1, ip, lsr #12
   11c44:	andeq	r2, r1, ip, lsr #12
   11c48:	andeq	r2, r1, ip, lsr #12
   11c4c:	andeq	r2, r1, ip, lsr #12
   11c50:	andeq	r2, r1, ip, lsr #12
   11c54:	andeq	r2, r1, ip, lsr #12
   11c58:	andeq	r2, r1, ip, lsr #12
   11c5c:	andeq	r2, r1, ip, lsr #12
   11c60:	andeq	r2, r1, ip, lsr #12
   11c64:	andeq	r2, r1, ip, lsr #12
   11c68:	andeq	r2, r1, ip, lsr #12
   11c6c:	andeq	r2, r1, ip, lsr #12
   11c70:	andeq	r2, r1, ip, lsr #12
   11c74:	andeq	r2, r1, ip, lsr #12
   11c78:	andeq	r2, r1, ip, lsr #12
   11c7c:	andeq	r2, r1, ip, lsr #12
   11c80:	andeq	r2, r1, ip, lsr #12
   11c84:	andeq	r1, r1, r4, lsr #25
   11c88:	strdeq	r2, [r1], -r4
   11c8c:	movw	r1, #8664	; 0x21d8
   11c90:	mov	r0, #1
   11c94:	mov	r9, #0
   11c98:	movt	r1, #3
   11c9c:	strb	r0, [r1, #6]
   11ca0:	b	11824 <__assert_fail@plt+0x220>
   11ca4:	movw	r0, #8656	; 0x21d0
   11ca8:	movw	r1, #2981	; 0xba5
   11cac:	mov	r2, #5
   11cb0:	mov	r9, #0
   11cb4:	movt	r0, #3
   11cb8:	movt	r1, #2
   11cbc:	ldr	r7, [r0]
   11cc0:	mov	r0, #0
   11cc4:	bl	1137c <dcgettext@plt>
   11cc8:	mvn	r1, #-2147483648	; 0x80000000
   11ccc:	mov	r2, #1
   11cd0:	mov	r3, #0
   11cd4:	mov	r8, #1
   11cd8:	stm	sp, {r1, r9}
   11cdc:	movw	r1, #3108	; 0xc24
   11ce0:	str	r0, [sp, #12]
   11ce4:	mov	r0, r7
   11ce8:	str	r9, [sp, #16]
   11cec:	movt	r1, #2
   11cf0:	str	r1, [sp, #8]
   11cf4:	bl	1c00c <__assert_fail@plt+0xaa08>
   11cf8:	movw	r1, #8504	; 0x2138
   11cfc:	movt	r1, #3
   11d00:	str	r0, [r1, #32]
   11d04:	movw	r0, #8664	; 0x21d8
   11d08:	movt	r0, #3
   11d0c:	strb	r8, [r0, #18]
   11d10:	mov	r0, r5
   11d14:	bl	16600 <__assert_fail@plt+0x4ffc>
   11d18:	mov	r5, #0
   11d1c:	str	r9, [fp, #-32]	; 0xffffffe0
   11d20:	b	11824 <__assert_fail@plt+0x220>
   11d24:	movw	r0, #8656	; 0x21d0
   11d28:	movw	r1, #64046	; 0xfa2e
   11d2c:	mov	r2, #5
   11d30:	mov	r9, #0
   11d34:	movt	r0, #3
   11d38:	movt	r1, #1
   11d3c:	ldr	r7, [r0]
   11d40:	mov	r0, #0
   11d44:	bl	1137c <dcgettext@plt>
   11d48:	mvn	r1, #-2147483648	; 0x80000000
   11d4c:	mov	r2, #1
   11d50:	mov	r3, #0
   11d54:	stm	sp, {r1, r9}
   11d58:	movw	r1, #3108	; 0xc24
   11d5c:	str	r0, [sp, #12]
   11d60:	mov	r0, #1
   11d64:	str	r9, [sp, #16]
   11d68:	movt	r1, #2
   11d6c:	str	r0, [sp, #28]
   11d70:	mov	r0, r7
   11d74:	str	r1, [sp, #8]
   11d78:	bl	1c00c <__assert_fail@plt+0xaa08>
   11d7c:	movw	r1, #8664	; 0x21d8
   11d80:	movt	r1, #3
   11d84:	ldrb	r1, [r1, #17]
   11d88:	cmp	r1, #0
   11d8c:	movweq	r1, #8504	; 0x2138
   11d90:	movteq	r1, #3
   11d94:	streq	r0, [r1, #28]
   11d98:	mov	r0, #1
   11d9c:	str	r0, [sp, #24]
   11da0:	b	11824 <__assert_fail@plt+0x220>
   11da4:	movw	r1, #8664	; 0x21d8
   11da8:	mov	r0, #1
   11dac:	mov	r9, #0
   11db0:	movt	r1, #3
   11db4:	strb	r0, [r1, #1]
   11db8:	strb	r0, [r1, #9]
   11dbc:	b	11824 <__assert_fail@plt+0x220>
   11dc0:	movw	r1, #8664	; 0x21d8
   11dc4:	mov	r0, #1
   11dc8:	mov	r2, #5
   11dcc:	mov	r8, #0
   11dd0:	movt	r1, #3
   11dd4:	strb	r0, [r1, #17]
   11dd8:	movw	r0, #8656	; 0x21d0
   11ddc:	movw	r1, #64091	; 0xfa5b
   11de0:	movt	r0, #3
   11de4:	movt	r1, #1
   11de8:	ldr	r7, [r0]
   11dec:	mov	r0, #0
   11df0:	bl	1137c <dcgettext@plt>
   11df4:	mvn	r1, #-2147483648	; 0x80000000
   11df8:	mov	r2, #1
   11dfc:	mov	r3, #0
   11e00:	stm	sp, {r1, r8}
   11e04:	movw	r1, #3108	; 0xc24
   11e08:	str	r0, [sp, #12]
   11e0c:	mov	r0, #0
   11e10:	str	r8, [sp, #16]
   11e14:	movt	r1, #2
   11e18:	str	r0, [sp, #24]
   11e1c:	mov	r0, r7
   11e20:	str	r1, [sp, #8]
   11e24:	bl	1c00c <__assert_fail@plt+0xaa08>
   11e28:	movw	r1, #8504	; 0x2138
   11e2c:	movt	r1, #3
   11e30:	b	1207c <__assert_fail@plt+0xa78>
   11e34:	movw	r1, #8664	; 0x21d8
   11e38:	mov	r0, #1
   11e3c:	mov	r9, #0
   11e40:	movt	r1, #3
   11e44:	strb	r0, [r1, #12]
   11e48:	b	11824 <__assert_fail@plt+0x220>
   11e4c:	movw	r0, #8656	; 0x21d0
   11e50:	mov	r9, #0
   11e54:	movt	r0, #3
   11e58:	ldr	r8, [r0]
   11e5c:	mov	r0, #1
   11e60:	str	r0, [sp, #28]
   11e64:	cmp	r8, #0
   11e68:	beq	122ac <__assert_fail@plt+0xca8>
   11e6c:	movw	r0, #8664	; 0x21d8
   11e70:	ldr	r7, [sp, #32]
   11e74:	movt	r0, #3
   11e78:	ldrb	r0, [r0, #13]
   11e7c:	cmp	r0, #0
   11e80:	bne	11eac <__assert_fail@plt+0x8a8>
   11e84:	mov	r0, r8
   11e88:	bl	114b4 <strlen@plt>
   11e8c:	cmn	r0, #1
   11e90:	ble	12690 <__assert_fail@plt+0x108c>
   11e94:	movw	r1, #8504	; 0x2138
   11e98:	movt	r1, #3
   11e9c:	str	r8, [r1, #24]
   11ea0:	movw	r1, #8664	; 0x21d8
   11ea4:	movt	r1, #3
   11ea8:	str	r0, [r1, #40]	; 0x28
   11eac:	mov	r0, #1
   11eb0:	str	r0, [sp, #20]
   11eb4:	b	11828 <__assert_fail@plt+0x224>
   11eb8:	movw	r1, #8664	; 0x21d8
   11ebc:	mov	r0, #1
   11ec0:	mov	r9, #0
   11ec4:	movt	r1, #3
   11ec8:	strb	r0, [r1, #10]
   11ecc:	movw	r0, #8656	; 0x21d0
   11ed0:	movt	r0, #3
   11ed4:	ldr	r0, [r0]
   11ed8:	cmp	r0, #0
   11edc:	beq	11824 <__assert_fail@plt+0x220>
   11ee0:	movw	r1, #8504	; 0x2138
   11ee4:	movt	r1, #3
   11ee8:	add	r2, r1, #2
   11eec:	add	r3, r1, #16
   11ef0:	mov	r1, #110	; 0x6e
   11ef4:	bl	12864 <__assert_fail@plt+0x1260>
   11ef8:	b	11824 <__assert_fail@plt+0x220>
   11efc:	movw	r1, #8664	; 0x21d8
   11f00:	mov	r0, #1
   11f04:	mov	r9, #0
   11f08:	movt	r1, #3
   11f0c:	strb	r0, [r1, #3]
   11f10:	b	11824 <__assert_fail@plt+0x220>
   11f14:	movw	r0, #8664	; 0x21d8
   11f18:	mov	r2, #0
   11f1c:	movw	r8, #8504	; 0x2138
   11f20:	movt	r0, #3
   11f24:	movt	r8, #3
   11f28:	mov	r1, r0
   11f2c:	str	r2, [r0, #40]	; 0x28
   11f30:	movw	r0, #3108	; 0xc24
   11f34:	movt	r0, #2
   11f38:	str	r0, [r8, #24]
   11f3c:	mov	r0, #1
   11f40:	strb	r0, [r1, #13]
   11f44:	movw	r0, #8656	; 0x21d0
   11f48:	movt	r0, #3
   11f4c:	ldr	r7, [r0]
   11f50:	cmp	r7, #0
   11f54:	beq	11f78 <__assert_fail@plt+0x974>
   11f58:	mov	r0, r7
   11f5c:	bl	114b4 <strlen@plt>
   11f60:	cmn	r0, #1
   11f64:	ble	12690 <__assert_fail@plt+0x108c>
   11f68:	movw	r1, #8664	; 0x21d8
   11f6c:	str	r7, [r8, #24]
   11f70:	movt	r1, #3
   11f74:	str	r0, [r1, #40]	; 0x28
   11f78:	mov	r0, #0
   11f7c:	mov	r9, #0
   11f80:	str	r0, [sp, #20]
   11f84:	b	11824 <__assert_fail@plt+0x220>
   11f88:	movw	r1, #8664	; 0x21d8
   11f8c:	mov	r0, #1
   11f90:	mov	r2, #5
   11f94:	mov	r9, #0
   11f98:	movt	r1, #3
   11f9c:	strb	r0, [r1, #11]
   11fa0:	movw	r0, #8656	; 0x21d0
   11fa4:	movw	r1, #63973	; 0xf9e5
   11fa8:	movt	r0, #3
   11fac:	movt	r1, #1
   11fb0:	ldr	r7, [r0]
   11fb4:	mov	r0, #0
   11fb8:	bl	1137c <dcgettext@plt>
   11fbc:	mvn	r1, #-2147483648	; 0x80000000
   11fc0:	mov	r2, #-2147483648	; 0x80000000
   11fc4:	mvn	r3, #0
   11fc8:	stm	sp, {r1, r9}
   11fcc:	movw	r1, #3108	; 0xc24
   11fd0:	str	r0, [sp, #12]
   11fd4:	mov	r0, r7
   11fd8:	str	r9, [sp, #16]
   11fdc:	movt	r1, #2
   11fe0:	str	r1, [sp, #8]
   11fe4:	bl	1c00c <__assert_fail@plt+0xaa08>
   11fe8:	movw	r1, #8504	; 0x2138
   11fec:	movt	r1, #3
   11ff0:	str	r0, [r1, #20]
   11ff4:	b	11824 <__assert_fail@plt+0x220>
   11ff8:	mov	r0, #1
   11ffc:	b	12024 <__assert_fail@plt+0xa20>
   12000:	movw	r0, #8656	; 0x21d0
   12004:	movw	r1, #8664	; 0x21d8
   12008:	mov	r9, #0
   1200c:	movt	r0, #3
   12010:	movt	r1, #3
   12014:	ldr	r0, [r0]
   12018:	str	r0, [r1, #32]
   1201c:	b	11824 <__assert_fail@plt+0x220>
   12020:	movw	r0, #257	; 0x101
   12024:	movw	r1, #8664	; 0x21d8
   12028:	mov	r9, #0
   1202c:	movt	r1, #3
   12030:	strh	r0, [r1, #14]
   12034:	b	11824 <__assert_fail@plt+0x220>
   12038:	movw	r1, #8664	; 0x21d8
   1203c:	mov	r0, #1
   12040:	mov	r9, #0
   12044:	movt	r1, #3
   12048:	strb	r0, [r1, #4]
   1204c:	b	11824 <__assert_fail@plt+0x220>
   12050:	movw	r1, #8664	; 0x21d8
   12054:	mov	r0, #1
   12058:	mov	r9, #0
   1205c:	movt	r1, #3
   12060:	strb	r0, [r1, #2]
   12064:	b	11824 <__assert_fail@plt+0x220>
   12068:	movw	r0, #8656	; 0x21d0
   1206c:	movw	r1, #8664	; 0x21d8
   12070:	movt	r0, #3
   12074:	movt	r1, #3
   12078:	ldr	r0, [r0]
   1207c:	str	r0, [r1, #28]
   12080:	mov	r9, #0
   12084:	b	11824 <__assert_fail@plt+0x220>
   12088:	movw	r0, #8656	; 0x21d0
   1208c:	movw	r1, #64014	; 0xfa0e
   12090:	mov	r2, #5
   12094:	mov	r9, #0
   12098:	movt	r0, #3
   1209c:	movt	r1, #1
   120a0:	ldr	r7, [r0]
   120a4:	mov	r0, #0
   120a8:	bl	1137c <dcgettext@plt>
   120ac:	mvn	r1, #-2147483648	; 0x80000000
   120b0:	mov	r2, #0
   120b4:	mov	r3, #0
   120b8:	stm	sp, {r1, r9}
   120bc:	movw	r1, #3108	; 0xc24
   120c0:	str	r0, [sp, #12]
   120c4:	mov	r0, r7
   120c8:	str	r9, [sp, #16]
   120cc:	movt	r1, #2
   120d0:	str	r1, [sp, #8]
   120d4:	bl	1c00c <__assert_fail@plt+0xaa08>
   120d8:	movw	r1, #8664	; 0x21d8
   120dc:	movt	r1, #3
   120e0:	str	r0, [r1, #36]	; 0x24
   120e4:	b	11824 <__assert_fail@plt+0x220>
   120e8:	movw	r0, #8656	; 0x21d0
   120ec:	movw	r1, #63932	; 0xf9bc
   120f0:	mov	r2, #5
   120f4:	mov	r9, #0
   120f8:	movt	r0, #3
   120fc:	movt	r1, #1
   12100:	ldr	r7, [r0]
   12104:	mov	r0, #0
   12108:	bl	1137c <dcgettext@plt>
   1210c:	mvn	r1, #-2147483648	; 0x80000000
   12110:	mov	r2, #1
   12114:	mov	r3, #0
   12118:	stm	sp, {r1, r9}
   1211c:	movw	r1, #3108	; 0xc24
   12120:	str	r0, [sp, #12]
   12124:	mov	r0, r7
   12128:	str	r9, [sp, #16]
   1212c:	movt	r1, #2
   12130:	str	r1, [sp, #8]
   12134:	bl	1c00c <__assert_fail@plt+0xaa08>
   12138:	movw	r1, #8504	; 0x2138
   1213c:	movt	r1, #3
   12140:	str	r0, [r1, #12]
   12144:	b	11824 <__assert_fail@plt+0x220>
   12148:	movw	r0, #8792	; 0x2258
   1214c:	movt	r0, #3
   12150:	ldrd	r0, [r0, #16]
   12154:	orrs	r0, r0, r1
   12158:	bne	12190 <__assert_fail@plt+0xb8c>
   1215c:	movw	r0, #8656	; 0x21d0
   12160:	movt	r0, #3
   12164:	ldr	r0, [r0]
   12168:	ldrb	r1, [r0]
   1216c:	cmp	r1, #43	; 0x2b
   12170:	bne	12190 <__assert_fail@plt+0xb8c>
   12174:	add	r2, r0, #1
   12178:	mvn	r0, #1
   1217c:	mov	r1, #43	; 0x2b
   12180:	bl	12730 <__assert_fail@plt+0x112c>
   12184:	mov	r9, #0
   12188:	cmp	r0, #0
   1218c:	bne	11824 <__assert_fail@plt+0x220>
   12190:	movw	r0, #8656	; 0x21d0
   12194:	mov	r9, #0
   12198:	movt	r0, #3
   1219c:	ldr	r0, [r0]
   121a0:	str	r0, [r4, r6, lsl #2]
   121a4:	add	r6, r6, #1
   121a8:	b	11824 <__assert_fail@plt+0x220>
   121ac:	movw	r1, #8664	; 0x21d8
   121b0:	mov	r0, #1
   121b4:	mov	r9, #0
   121b8:	movt	r1, #3
   121bc:	strb	r0, [r1, #8]
   121c0:	b	11824 <__assert_fail@plt+0x220>
   121c4:	movw	r1, #8664	; 0x21d8
   121c8:	mov	r0, #1
   121cc:	mov	r9, #0
   121d0:	movt	r1, #3
   121d4:	strb	r0, [r1, #16]
   121d8:	b	11824 <__assert_fail@plt+0x220>
   121dc:	movw	r1, #8664	; 0x21d8
   121e0:	movw	r0, #257	; 0x101
   121e4:	mov	r9, #0
   121e8:	movt	r1, #3
   121ec:	strh	r0, [r1]
   121f0:	b	11824 <__assert_fail@plt+0x220>
   121f4:	movw	r8, #8656	; 0x21d0
   121f8:	movt	r8, #3
   121fc:	ldr	r2, [r8]
   12200:	cmp	r2, #0
   12204:	beq	12694 <__assert_fail@plt+0x1090>
   12208:	ldr	r0, [sp, #36]	; 0x24
   1220c:	mov	r1, #0
   12210:	mov	r9, #0
   12214:	bl	12730 <__assert_fail@plt+0x112c>
   12218:	ldr	r7, [sp, #32]
   1221c:	cmp	r0, #0
   12220:	bne	11828 <__assert_fail@plt+0x224>
   12224:	b	126a0 <__assert_fail@plt+0x109c>
   12228:	movw	r0, #8656	; 0x21d0
   1222c:	movt	r0, #3
   12230:	ldr	r0, [r0]
   12234:	cmp	r0, #0
   12238:	beq	12250 <__assert_fail@plt+0xc4c>
   1223c:	movw	r2, #8504	; 0x2138
   12240:	mov	r1, #101	; 0x65
   12244:	movt	r2, #3
   12248:	add	r3, r2, #4
   1224c:	bl	12864 <__assert_fail@plt+0x1260>
   12250:	movw	r1, #8664	; 0x21d8
   12254:	mov	r0, #1
   12258:	mov	r9, #0
   1225c:	movt	r1, #3
   12260:	strb	r0, [r1, #5]
   12264:	b	11824 <__assert_fail@plt+0x220>
   12268:	movw	r0, #8656	; 0x21d0
   1226c:	movt	r0, #3
   12270:	ldr	r0, [r0]
   12274:	cmp	r0, #0
   12278:	beq	12294 <__assert_fail@plt+0xc90>
   1227c:	movw	r1, #8504	; 0x2138
   12280:	movt	r1, #3
   12284:	add	r2, r1, #1
   12288:	add	r3, r1, #8
   1228c:	mov	r1, #105	; 0x69
   12290:	bl	12864 <__assert_fail@plt+0x1260>
   12294:	movw	r1, #8664	; 0x21d8
   12298:	mov	r0, #1
   1229c:	mov	r9, #0
   122a0:	movt	r1, #3
   122a4:	strb	r0, [r1, #7]
   122a8:	b	11824 <__assert_fail@plt+0x220>
   122ac:	mov	r0, #1
   122b0:	str	r0, [sp, #20]
   122b4:	b	11824 <__assert_fail@plt+0x220>
   122b8:	cmp	r5, #0
   122bc:	beq	1235c <__assert_fail@plt+0xd58>
   122c0:	movw	r1, #2981	; 0xba5
   122c4:	mov	r0, #0
   122c8:	mov	r2, #5
   122cc:	mov	r7, #0
   122d0:	movt	r1, #2
   122d4:	bl	1137c <dcgettext@plt>
   122d8:	mvn	r1, #-2147483648	; 0x80000000
   122dc:	mov	r2, #1
   122e0:	mov	r3, #0
   122e4:	stm	sp, {r1, r7}
   122e8:	movw	r1, #3108	; 0xc24
   122ec:	str	r0, [sp, #12]
   122f0:	mov	r0, r5
   122f4:	str	r7, [sp, #16]
   122f8:	mov	r7, #1
   122fc:	movt	r1, #2
   12300:	str	r1, [sp, #8]
   12304:	bl	1c00c <__assert_fail@plt+0xaa08>
   12308:	movw	r1, #8504	; 0x2138
   1230c:	movt	r1, #3
   12310:	str	r0, [r1, #32]
   12314:	movw	r0, #8664	; 0x21d8
   12318:	movt	r0, #3
   1231c:	mov	r1, r0
   12320:	strb	r7, [r0, #18]
   12324:	mov	r0, r5
   12328:	mov	r5, r1
   1232c:	bl	16600 <__assert_fail@plt+0x4ffc>
   12330:	b	12364 <__assert_fail@plt+0xd60>
   12334:	mov	r0, #0
   12338:	mov	r6, #0
   1233c:	mov	r8, #0
   12340:	str	r0, [sp, #24]
   12344:	mov	r0, #0
   12348:	str	r0, [sp, #28]
   1234c:	ldr	r0, [r5, #28]
   12350:	cmp	r0, #0
   12354:	bne	123c0 <__assert_fail@plt+0xdbc>
   12358:	b	1237c <__assert_fail@plt+0xd78>
   1235c:	movw	r5, #8664	; 0x21d8
   12360:	movt	r5, #3
   12364:	ldr	r8, [sp, #20]
   12368:	movw	r7, #8792	; 0x2258
   1236c:	movt	r7, #3
   12370:	ldr	r0, [r5, #28]
   12374:	cmp	r0, #0
   12378:	bne	123c0 <__assert_fail@plt+0xdbc>
   1237c:	movw	r0, #64181	; 0xfab5
   12380:	movt	r0, #1
   12384:	bl	11424 <getenv@plt>
   12388:	cmp	r0, #0
   1238c:	beq	123b4 <__assert_fail@plt+0xdb0>
   12390:	mov	r0, #2
   12394:	bl	166f4 <__assert_fail@plt+0x50f0>
   12398:	movw	r2, #64212	; 0xfad4
   1239c:	movw	r1, #64197	; 0xfac5
   123a0:	cmp	r0, #0
   123a4:	movt	r2, #1
   123a8:	movt	r1, #1
   123ac:	movne	r1, r2
   123b0:	b	123bc <__assert_fail@plt+0xdb8>
   123b4:	movw	r1, #64212	; 0xfad4
   123b8:	movt	r1, #1
   123bc:	str	r1, [r5, #28]
   123c0:	movw	r0, #64227	; 0xfae3
   123c4:	movt	r0, #1
   123c8:	bl	11424 <getenv@plt>
   123cc:	bl	1ab20 <__assert_fail@plt+0x951c>
   123d0:	str	r0, [r5, #44]	; 0x2c
   123d4:	ldrd	r0, [r7, #16]
   123d8:	ldrb	r9, [r5, #9]
   123dc:	orrs	r0, r0, r1
   123e0:	moveq	r1, #0
   123e4:	moveq	r0, #1
   123e8:	strdeq	r0, [r7, #16]
   123ec:	cmp	r9, #1
   123f0:	bne	1240c <__assert_fail@plt+0xe08>
   123f4:	ldrb	r0, [r5, #18]
   123f8:	cmp	r0, #1
   123fc:	beq	126d4 <__assert_fail@plt+0x10d0>
   12400:	ldrb	r0, [r5]
   12404:	cmp	r0, #1
   12408:	beq	126e0 <__assert_fail@plt+0x10dc>
   1240c:	ldr	r0, [sp, #28]
   12410:	tst	r0, #1
   12414:	beq	124ac <__assert_fail@plt+0xea8>
   12418:	ldr	r0, [sp, #24]
   1241c:	tst	r0, #1
   12420:	beq	1244c <__assert_fail@plt+0xe48>
   12424:	cmp	r9, #0
   12428:	bne	12438 <__assert_fail@plt+0xe34>
   1242c:	ldrb	r0, [r5, #18]
   12430:	cmp	r0, #1
   12434:	bne	1248c <__assert_fail@plt+0xe88>
   12438:	mov	r0, #1
   1243c:	tst	r8, #1
   12440:	strb	r0, [r5, #17]
   12444:	bne	12484 <__assert_fail@plt+0xe80>
   12448:	b	124ac <__assert_fail@plt+0xea8>
   1244c:	ldrb	r0, [r5, #13]
   12450:	cmp	r0, #0
   12454:	eoreq	r0, r8, #1
   12458:	tsteq	r0, #1
   1245c:	bne	124ac <__assert_fail@plt+0xea8>
   12460:	cmp	r9, #0
   12464:	bne	12474 <__assert_fail@plt+0xe70>
   12468:	ldrb	r0, [r5, #18]
   1246c:	cmp	r0, #1
   12470:	bne	124ac <__assert_fail@plt+0xea8>
   12474:	ldrb	r0, [r5, #17]
   12478:	cmp	r0, #0
   1247c:	beq	12498 <__assert_fail@plt+0xe94>
   12480:	mov	r0, #1
   12484:	strb	r0, [r5, #13]
   12488:	b	124ac <__assert_fail@plt+0xea8>
   1248c:	mov	r0, #1
   12490:	strb	r0, [r5, #8]
   12494:	b	124ac <__assert_fail@plt+0xea8>
   12498:	mov	r0, #1
   1249c:	strb	r0, [r5, #8]
   124a0:	ldr	r1, [r5, #40]	; 0x28
   124a4:	cmp	r1, #1
   124a8:	strbge	r0, [r5, #13]
   124ac:	movw	r8, #8632	; 0x21b8
   124b0:	ldr	r2, [sp, #32]
   124b4:	movt	r8, #3
   124b8:	ldr	r7, [r8]
   124bc:	cmp	r7, r2
   124c0:	bge	12588 <__assert_fail@plt+0xf84>
   124c4:	sub	r5, r2, r7
   124c8:	add	r0, r4, r6, lsl #2
   124cc:	add	r1, sl, r7, lsl #2
   124d0:	lsl	r2, r5, #2
   124d4:	bl	11358 <memcpy@plt>
   124d8:	cmp	r5, #4
   124dc:	bcc	12564 <__assert_fail@plt+0xf60>
   124e0:	mov	r0, #0
   124e4:	mov	r1, #1
   124e8:	vdup.32	q8, r0
   124ec:	bic	r0, r5, #3
   124f0:	sub	r3, r0, #4
   124f4:	add	r2, r1, r3, lsr #2
   124f8:	cmp	r3, #12
   124fc:	and	r1, r2, #3
   12500:	vmov.32	d16[0], r6
   12504:	bcc	1251c <__assert_fail@plt+0xf18>
   12508:	vmov.i32	q9, #4	; 0x00000004
   1250c:	sub	r2, r1, r2
   12510:	vadd.i32	q8, q8, q9
   12514:	adds	r2, r2, #4
   12518:	bne	12510 <__assert_fail@plt+0xf0c>
   1251c:	cmp	r1, #0
   12520:	beq	12538 <__assert_fail@plt+0xf34>
   12524:	vmov.i32	q9, #1	; 0x00000001
   12528:	rsb	r1, r1, #0
   1252c:	vadd.i32	q8, q8, q9
   12530:	adds	r1, r1, #1
   12534:	bcc	1252c <__assert_fail@plt+0xf28>
   12538:	vext.8	q9, q8, q8, #8
   1253c:	cmp	r5, r0
   12540:	vadd.i32	q8, q8, q9
   12544:	vdup.32	q9, d16[1]
   12548:	vadd.i32	q8, q8, q9
   1254c:	vmov.32	r6, d16[0]
   12550:	bne	12560 <__assert_fail@plt+0xf5c>
   12554:	movw	r5, #8664	; 0x21d8
   12558:	movt	r5, #3
   1255c:	b	12580 <__assert_fail@plt+0xf7c>
   12560:	add	r7, r7, r0
   12564:	ldr	r0, [sp, #32]
   12568:	movw	r5, #8664	; 0x21d8
   1256c:	movt	r5, #3
   12570:	sub	r0, r0, r7
   12574:	subs	r0, r0, #1
   12578:	add	r6, r6, #1
   1257c:	bne	12574 <__assert_fail@plt+0xf70>
   12580:	ldr	r0, [sp, #32]
   12584:	str	r0, [r8]
   12588:	cmp	r6, #0
   1258c:	beq	125c0 <__assert_fail@plt+0xfbc>
   12590:	cmp	r9, #0
   12594:	beq	125a4 <__assert_fail@plt+0xfa0>
   12598:	mov	r0, r6
   1259c:	mov	r1, r4
   125a0:	b	125c8 <__assert_fail@plt+0xfc4>
   125a4:	mov	r0, #1
   125a8:	mov	r1, r4
   125ac:	bl	12d08 <__assert_fail@plt+0x1704>
   125b0:	add	r4, r4, #4
   125b4:	subs	r6, r6, #1
   125b8:	bne	125a4 <__assert_fail@plt+0xfa0>
   125bc:	b	125cc <__assert_fail@plt+0xfc8>
   125c0:	mov	r0, #0
   125c4:	mov	r1, #0
   125c8:	bl	12d08 <__assert_fail@plt+0x1704>
   125cc:	ldr	r0, [r5, #64]	; 0x40
   125d0:	bl	16600 <__assert_fail@plt+0x4ffc>
   125d4:	ldr	r0, [r5, #68]	; 0x44
   125d8:	bl	16600 <__assert_fail@plt+0x4ffc>
   125dc:	ldr	r0, [r5, #76]	; 0x4c
   125e0:	bl	16600 <__assert_fail@plt+0x4ffc>
   125e4:	ldr	r0, [r5, #96]	; 0x60
   125e8:	bl	16600 <__assert_fail@plt+0x4ffc>
   125ec:	ldr	r0, [r5, #100]	; 0x64
   125f0:	bl	16600 <__assert_fail@plt+0x4ffc>
   125f4:	ldr	r0, [r5, #104]	; 0x68
   125f8:	bl	16600 <__assert_fail@plt+0x4ffc>
   125fc:	ldrb	r0, [r5, #19]
   12600:	cmp	r0, #1
   12604:	bne	12620 <__assert_fail@plt+0x101c>
   12608:	movw	r0, #8648	; 0x21c8
   1260c:	movt	r0, #3
   12610:	ldr	r0, [r0]
   12614:	bl	16458 <__assert_fail@plt+0x4e54>
   12618:	cmn	r0, #1
   1261c:	beq	12704 <__assert_fail@plt+0x1100>
   12620:	ldrb	r0, [r5, #20]
   12624:	sub	sp, fp, #28
   12628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1262c:	mov	r0, #1
   12630:	bl	12920 <__assert_fail@plt+0x131c>
   12634:	movw	r0, #8552	; 0x2168
   12638:	movw	r2, #64166	; 0xfaa6
   1263c:	mov	r1, #0
   12640:	movw	r7, #64153	; 0xfa99
   12644:	movt	r0, #3
   12648:	movt	r2, #1
   1264c:	str	r1, [sp, #8]
   12650:	movw	r1, #64136	; 0xfa88
   12654:	movt	r7, #1
   12658:	movt	r1, #1
   1265c:	ldr	r3, [r0]
   12660:	movw	r0, #8652	; 0x21cc
   12664:	str	r2, [sp, #4]
   12668:	movw	r2, #64139	; 0xfa8b
   1266c:	str	r7, [sp]
   12670:	movt	r0, #3
   12674:	movt	r2, #1
   12678:	ldr	r0, [r0]
   1267c:	bl	1b750 <__assert_fail@plt+0xa14c>
   12680:	mov	r0, #0
   12684:	bl	1149c <exit@plt>
   12688:	mov	r0, #0
   1268c:	bl	12920 <__assert_fail@plt+0x131c>
   12690:	bl	145c0 <__assert_fail@plt+0x2fbc>
   12694:	movw	r1, #63860	; 0xf974
   12698:	movt	r1, #1
   1269c:	b	126e8 <__assert_fail@plt+0x10e4>
   126a0:	movw	r1, #63910	; 0xf9a6
   126a4:	mov	r0, #0
   126a8:	mov	r2, #5
   126ac:	movt	r1, #1
   126b0:	bl	1137c <dcgettext@plt>
   126b4:	mov	r4, r0
   126b8:	ldr	r0, [r8]
   126bc:	bl	1aa68 <__assert_fail@plt+0x9464>
   126c0:	mov	r3, r0
   126c4:	mov	r0, #1
   126c8:	mov	r1, #0
   126cc:	mov	r2, r4
   126d0:	bl	11418 <error@plt>
   126d4:	movw	r1, #64230	; 0xfae6
   126d8:	movt	r1, #1
   126dc:	b	126e8 <__assert_fail@plt+0x10e4>
   126e0:	movw	r1, #64289	; 0xfb21
   126e4:	movt	r1, #1
   126e8:	mov	r0, #0
   126ec:	mov	r2, #5
   126f0:	bl	1137c <dcgettext@plt>
   126f4:	mov	r2, r0
   126f8:	mov	r0, #1
   126fc:	mov	r1, #0
   12700:	bl	11418 <error@plt>
   12704:	bl	114e4 <__errno_location@plt>
   12708:	movw	r1, #64350	; 0xfb5e
   1270c:	ldr	r4, [r0]
   12710:	mov	r0, #0
   12714:	mov	r2, #5
   12718:	movt	r1, #1
   1271c:	bl	1137c <dcgettext@plt>
   12720:	mov	r2, r0
   12724:	mov	r0, #1
   12728:	mov	r1, r4
   1272c:	bl	11418 <error@plt>
   12730:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12734:	add	fp, sp, #24
   12738:	sub	sp, sp, #32
   1273c:	movw	r6, #3108	; 0xc24
   12740:	mvn	r5, #0
   12744:	mov	r8, r1
   12748:	mov	r9, r0
   1274c:	mov	r7, r2
   12750:	mov	r0, r2
   12754:	add	r1, sp, #28
   12758:	add	r3, sp, #16
   1275c:	mov	r2, #10
   12760:	movt	r6, #2
   12764:	str	r5, [sp, #12]
   12768:	str	r5, [sp, #8]
   1276c:	str	r6, [sp]
   12770:	bl	1e5c4 <__assert_fail@plt+0xcfc0>
   12774:	mvn	r1, #2
   12778:	tst	r0, r1
   1277c:	bne	1284c <__assert_fail@plt+0x1248>
   12780:	ldr	r3, [sp, #28]
   12784:	mov	r4, #0
   12788:	cmp	r3, r7
   1278c:	ldrne	r0, [sp, #16]
   12790:	ldrne	r1, [sp, #20]
   12794:	orrsne	r2, r0, r1
   12798:	bne	127a8 <__assert_fail@plt+0x11a4>
   1279c:	mov	r0, r4
   127a0:	sub	sp, fp, #24
   127a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   127a8:	ldrb	r2, [r3]
   127ac:	cmp	r2, #58	; 0x3a
   127b0:	bne	12810 <__assert_fail@plt+0x120c>
   127b4:	add	r5, r3, #1
   127b8:	add	r1, sp, #28
   127bc:	add	r3, sp, #8
   127c0:	mov	r2, #10
   127c4:	str	r6, [sp]
   127c8:	mov	r0, r5
   127cc:	bl	1e5c4 <__assert_fail@plt+0xcfc0>
   127d0:	cmp	r0, #0
   127d4:	bne	1284c <__assert_fail@plt+0x1248>
   127d8:	ldr	r2, [sp, #28]
   127dc:	cmp	r5, r2
   127e0:	beq	1279c <__assert_fail@plt+0x1198>
   127e4:	ldr	r0, [sp, #16]
   127e8:	ldr	r5, [sp, #8]
   127ec:	ldr	r1, [sp, #20]
   127f0:	ldr	r3, [sp, #12]
   127f4:	subs	r7, r5, r0
   127f8:	sbcs	r7, r3, r1
   127fc:	bcc	1279c <__assert_fail@plt+0x1198>
   12800:	ldrb	r2, [r2]
   12804:	cmp	r2, #0
   12808:	bne	1279c <__assert_fail@plt+0x1198>
   1280c:	b	1281c <__assert_fail@plt+0x1218>
   12810:	mvn	r3, #0
   12814:	cmp	r2, #0
   12818:	bne	1279c <__assert_fail@plt+0x1198>
   1281c:	movw	r2, #8504	; 0x2138
   12820:	movw	r7, #8792	; 0x2258
   12824:	mov	r4, #1
   12828:	movt	r7, #3
   1282c:	movt	r2, #3
   12830:	str	r5, [r2, #40]	; 0x28
   12834:	str	r0, [r7, #16]
   12838:	str	r3, [r2, #44]	; 0x2c
   1283c:	str	r1, [r7, #20]
   12840:	mov	r0, r4
   12844:	sub	sp, fp, #24
   12848:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1284c:	movw	r3, #3728	; 0xe90
   12850:	mov	r1, r9
   12854:	mov	r2, r8
   12858:	str	r7, [sp]
   1285c:	movt	r3, #2
   12860:	bl	1e500 <__assert_fail@plt+0xcefc>
   12864:	push	{r4, r5, r6, r7, fp, lr}
   12868:	add	fp, sp, #16
   1286c:	sub	sp, sp, #8
   12870:	mov	r5, r0
   12874:	ldrb	r0, [r0]
   12878:	mov	r4, r1
   1287c:	mov	r6, r3
   12880:	sub	r1, r0, #48	; 0x30
   12884:	cmp	r1, #10
   12888:	strbcs	r0, [r2]
   1288c:	ldrbcs	r0, [r5, #1]!
   12890:	cmp	r0, #0
   12894:	beq	128d0 <__assert_fail@plt+0x12cc>
   12898:	movw	r0, #3108	; 0xc24
   1289c:	add	r3, sp, #4
   128a0:	mov	r1, #0
   128a4:	mov	r2, #10
   128a8:	movt	r0, #2
   128ac:	str	r0, [sp]
   128b0:	mov	r0, r5
   128b4:	bl	1d974 <__assert_fail@plt+0xc370>
   128b8:	cmp	r0, #0
   128bc:	bne	128d8 <__assert_fail@plt+0x12d4>
   128c0:	ldr	r0, [sp, #4]
   128c4:	cmp	r0, #0
   128c8:	ble	128d8 <__assert_fail@plt+0x12d4>
   128cc:	str	r0, [r6]
   128d0:	sub	sp, fp, #16
   128d4:	pop	{r4, r5, r6, r7, fp, pc}
   128d8:	bl	114e4 <__errno_location@plt>
   128dc:	movw	r1, #3024	; 0xbd0
   128e0:	ldr	r6, [r0]
   128e4:	mov	r0, #0
   128e8:	mov	r2, #5
   128ec:	movt	r1, #2
   128f0:	bl	1137c <dcgettext@plt>
   128f4:	mov	r7, r0
   128f8:	mov	r0, r5
   128fc:	bl	1aa68 <__assert_fail@plt+0x9464>
   12900:	str	r0, [sp]
   12904:	mov	r0, #0
   12908:	mov	r1, r6
   1290c:	mov	r2, r7
   12910:	mov	r3, r4
   12914:	bl	11418 <error@plt>
   12918:	mov	r0, #1
   1291c:	bl	12920 <__assert_fail@plt+0x131c>
   12920:	push	{fp, lr}
   12924:	mov	fp, sp
   12928:	sub	sp, sp, #56	; 0x38
   1292c:	mov	r4, r0
   12930:	cmp	r0, #0
   12934:	bne	12cc4 <__assert_fail@plt+0x16c0>
   12938:	movw	r1, #64404	; 0xfb94
   1293c:	mov	r0, #0
   12940:	mov	r2, #5
   12944:	movt	r1, #1
   12948:	bl	1137c <dcgettext@plt>
   1294c:	mov	r1, r0
   12950:	movw	r0, #8840	; 0x2288
   12954:	movt	r0, #3
   12958:	ldr	r2, [r0]
   1295c:	mov	r0, #1
   12960:	bl	11514 <__printf_chk@plt>
   12964:	movw	r1, #64437	; 0xfbb5
   12968:	mov	r0, #0
   1296c:	mov	r2, #5
   12970:	movt	r1, #1
   12974:	bl	1137c <dcgettext@plt>
   12978:	movw	r7, #8652	; 0x21cc
   1297c:	movt	r7, #3
   12980:	ldr	r1, [r7]
   12984:	bl	112c8 <fputs_unlocked@plt>
   12988:	movw	r1, #3230	; 0xc9e
   1298c:	mov	r0, #0
   12990:	mov	r2, #5
   12994:	movt	r1, #2
   12998:	bl	1137c <dcgettext@plt>
   1299c:	ldr	r1, [r7]
   129a0:	bl	112c8 <fputs_unlocked@plt>
   129a4:	movw	r1, #3286	; 0xcd6
   129a8:	mov	r0, #0
   129ac:	mov	r2, #5
   129b0:	movt	r1, #2
   129b4:	bl	1137c <dcgettext@plt>
   129b8:	ldr	r1, [r7]
   129bc:	bl	112c8 <fputs_unlocked@plt>
   129c0:	movw	r1, #64482	; 0xfbe2
   129c4:	mov	r0, #0
   129c8:	mov	r2, #5
   129cc:	movt	r1, #1
   129d0:	bl	1137c <dcgettext@plt>
   129d4:	ldr	r1, [r7]
   129d8:	bl	112c8 <fputs_unlocked@plt>
   129dc:	movw	r1, #64816	; 0xfd30
   129e0:	mov	r0, #0
   129e4:	mov	r2, #5
   129e8:	movt	r1, #1
   129ec:	bl	1137c <dcgettext@plt>
   129f0:	ldr	r1, [r7]
   129f4:	bl	112c8 <fputs_unlocked@plt>
   129f8:	movw	r1, #65086	; 0xfe3e
   129fc:	mov	r0, #0
   12a00:	mov	r2, #5
   12a04:	movt	r1, #1
   12a08:	bl	1137c <dcgettext@plt>
   12a0c:	ldr	r1, [r7]
   12a10:	bl	112c8 <fputs_unlocked@plt>
   12a14:	movw	r1, #65486	; 0xffce
   12a18:	mov	r0, #0
   12a1c:	mov	r2, #5
   12a20:	movt	r1, #1
   12a24:	bl	1137c <dcgettext@plt>
   12a28:	ldr	r1, [r7]
   12a2c:	bl	112c8 <fputs_unlocked@plt>
   12a30:	movw	r1, #377	; 0x179
   12a34:	mov	r0, #0
   12a38:	mov	r2, #5
   12a3c:	movt	r1, #2
   12a40:	bl	1137c <dcgettext@plt>
   12a44:	ldr	r1, [r7]
   12a48:	bl	112c8 <fputs_unlocked@plt>
   12a4c:	movw	r1, #597	; 0x255
   12a50:	mov	r0, #0
   12a54:	mov	r2, #5
   12a58:	movt	r1, #2
   12a5c:	bl	1137c <dcgettext@plt>
   12a60:	ldr	r1, [r7]
   12a64:	bl	112c8 <fputs_unlocked@plt>
   12a68:	movw	r1, #741	; 0x2e5
   12a6c:	mov	r0, #0
   12a70:	mov	r2, #5
   12a74:	movt	r1, #2
   12a78:	bl	1137c <dcgettext@plt>
   12a7c:	ldr	r1, [r7]
   12a80:	bl	112c8 <fputs_unlocked@plt>
   12a84:	movw	r1, #1087	; 0x43f
   12a88:	mov	r0, #0
   12a8c:	mov	r2, #5
   12a90:	movt	r1, #2
   12a94:	bl	1137c <dcgettext@plt>
   12a98:	ldr	r1, [r7]
   12a9c:	bl	112c8 <fputs_unlocked@plt>
   12aa0:	movw	r1, #1340	; 0x53c
   12aa4:	mov	r0, #0
   12aa8:	mov	r2, #5
   12aac:	movt	r1, #2
   12ab0:	bl	1137c <dcgettext@plt>
   12ab4:	ldr	r1, [r7]
   12ab8:	bl	112c8 <fputs_unlocked@plt>
   12abc:	movw	r1, #1666	; 0x682
   12ac0:	mov	r0, #0
   12ac4:	mov	r2, #5
   12ac8:	movt	r1, #2
   12acc:	bl	1137c <dcgettext@plt>
   12ad0:	ldr	r1, [r7]
   12ad4:	bl	112c8 <fputs_unlocked@plt>
   12ad8:	movw	r1, #1902	; 0x76e
   12adc:	mov	r0, #0
   12ae0:	mov	r2, #5
   12ae4:	movt	r1, #2
   12ae8:	bl	1137c <dcgettext@plt>
   12aec:	ldr	r1, [r7]
   12af0:	bl	112c8 <fputs_unlocked@plt>
   12af4:	movw	r1, #2006	; 0x7d6
   12af8:	mov	r0, #0
   12afc:	mov	r2, #5
   12b00:	movt	r1, #2
   12b04:	bl	1137c <dcgettext@plt>
   12b08:	ldr	r1, [r7]
   12b0c:	bl	112c8 <fputs_unlocked@plt>
   12b10:	movw	r1, #2407	; 0x967
   12b14:	mov	r0, #0
   12b18:	mov	r2, #5
   12b1c:	movt	r1, #2
   12b20:	bl	1137c <dcgettext@plt>
   12b24:	ldr	r1, [r7]
   12b28:	bl	112c8 <fputs_unlocked@plt>
   12b2c:	movw	r1, #2622	; 0xa3e
   12b30:	mov	r0, #0
   12b34:	mov	r2, #5
   12b38:	movt	r1, #2
   12b3c:	bl	1137c <dcgettext@plt>
   12b40:	ldr	r1, [r7]
   12b44:	bl	112c8 <fputs_unlocked@plt>
   12b48:	movw	r1, #2667	; 0xa6b
   12b4c:	mov	r0, #0
   12b50:	mov	r2, #5
   12b54:	movt	r1, #2
   12b58:	bl	1137c <dcgettext@plt>
   12b5c:	ldr	r1, [r7]
   12b60:	bl	112c8 <fputs_unlocked@plt>
   12b64:	movw	r0, #4160	; 0x1040
   12b68:	mov	r2, #48	; 0x30
   12b6c:	mov	r6, sp
   12b70:	movw	r5, #64136	; 0xfa88
   12b74:	movt	r0, #2
   12b78:	movt	r5, #1
   12b7c:	add	r1, r0, #32
   12b80:	add	r3, r0, #16
   12b84:	vld1.64	{d18-d19}, [r0], r2
   12b88:	vld1.64	{d16-d17}, [r1]
   12b8c:	vld1.64	{d20-d21}, [r3]
   12b90:	vldr	d22, [r0]
   12b94:	add	r1, r6, #32
   12b98:	add	r0, r6, #16
   12b9c:	vst1.64	{d16-d17}, [r1]
   12ba0:	movw	r1, #3361	; 0xd21
   12ba4:	vst1.64	{d20-d21}, [r0]
   12ba8:	mov	r0, r6
   12bac:	movt	r1, #2
   12bb0:	vst1.64	{d18-d19}, [r0], r2
   12bb4:	vstr	d22, [r0]
   12bb8:	mov	r0, r5
   12bbc:	bl	112ec <strcmp@plt>
   12bc0:	cmp	r0, #0
   12bc4:	ldrne	r1, [r6, #8]!
   12bc8:	cmpne	r1, #0
   12bcc:	bne	12bb8 <__assert_fail@plt+0x15b4>
   12bd0:	movw	r1, #3456	; 0xd80
   12bd4:	ldr	r6, [r6, #4]
   12bd8:	mov	r0, #0
   12bdc:	mov	r2, #5
   12be0:	movt	r1, #2
   12be4:	bl	1137c <dcgettext@plt>
   12be8:	movw	r2, #64139	; 0xfa8b
   12bec:	movw	r3, #3479	; 0xd97
   12bf0:	mov	r1, r0
   12bf4:	mov	r0, #1
   12bf8:	movt	r2, #1
   12bfc:	movt	r3, #2
   12c00:	bl	11514 <__printf_chk@plt>
   12c04:	cmp	r6, #0
   12c08:	mov	r0, #5
   12c0c:	mov	r1, #0
   12c10:	moveq	r6, r5
   12c14:	bl	11574 <setlocale@plt>
   12c18:	cmp	r0, #0
   12c1c:	beq	12c54 <__assert_fail@plt+0x1650>
   12c20:	movw	r1, #3519	; 0xdbf
   12c24:	mov	r2, #3
   12c28:	movt	r1, #2
   12c2c:	bl	115e0 <strncmp@plt>
   12c30:	cmp	r0, #0
   12c34:	beq	12c54 <__assert_fail@plt+0x1650>
   12c38:	movw	r1, #3523	; 0xdc3
   12c3c:	mov	r0, #0
   12c40:	mov	r2, #5
   12c44:	movt	r1, #2
   12c48:	bl	1137c <dcgettext@plt>
   12c4c:	ldr	r1, [r7]
   12c50:	bl	112c8 <fputs_unlocked@plt>
   12c54:	movw	r1, #3594	; 0xe0a
   12c58:	mov	r0, #0
   12c5c:	mov	r2, #5
   12c60:	movt	r1, #2
   12c64:	bl	1137c <dcgettext@plt>
   12c68:	movw	r2, #3479	; 0xd97
   12c6c:	mov	r1, r0
   12c70:	mov	r0, #1
   12c74:	mov	r3, r5
   12c78:	movt	r2, #2
   12c7c:	bl	11514 <__printf_chk@plt>
   12c80:	movw	r1, #3621	; 0xe25
   12c84:	mov	r0, #0
   12c88:	mov	r2, #5
   12c8c:	movt	r1, #2
   12c90:	bl	1137c <dcgettext@plt>
   12c94:	mov	r1, r0
   12c98:	movw	r0, #3389	; 0xd3d
   12c9c:	movw	r3, #3108	; 0xc24
   12ca0:	cmp	r6, r5
   12ca4:	mov	r2, r6
   12ca8:	movt	r0, #2
   12cac:	movt	r3, #2
   12cb0:	moveq	r3, r0
   12cb4:	mov	r0, #1
   12cb8:	bl	11514 <__printf_chk@plt>
   12cbc:	mov	r0, r4
   12cc0:	bl	1149c <exit@plt>
   12cc4:	movw	r0, #8640	; 0x21c0
   12cc8:	movw	r1, #64365	; 0xfb6d
   12ccc:	mov	r2, #5
   12cd0:	movt	r0, #3
   12cd4:	movt	r1, #1
   12cd8:	ldr	r5, [r0]
   12cdc:	mov	r0, #0
   12ce0:	bl	1137c <dcgettext@plt>
   12ce4:	mov	r2, r0
   12ce8:	movw	r0, #8840	; 0x2288
   12cec:	mov	r1, #1
   12cf0:	movt	r0, #3
   12cf4:	ldr	r3, [r0]
   12cf8:	mov	r0, r5
   12cfc:	bl	1152c <__fprintf_chk@plt>
   12d00:	mov	r0, r4
   12d04:	bl	1149c <exit@plt>
   12d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d0c:	add	fp, sp, #28
   12d10:	sub	sp, sp, #28
   12d14:	mov	r5, r0
   12d18:	movw	r0, #8504	; 0x2138
   12d1c:	mov	r4, r1
   12d20:	movw	r8, #8664	; 0x21d8
   12d24:	movt	r0, #3
   12d28:	movt	r8, #3
   12d2c:	ldr	r1, [r0, #12]
   12d30:	sub	r0, r1, #10
   12d34:	cmp	r0, #0
   12d38:	str	r0, [r8, #52]	; 0x34
   12d3c:	ble	12d50 <__assert_fail@plt+0x174c>
   12d40:	ldrb	r2, [r8, #14]
   12d44:	cmp	r2, #1
   12d48:	beq	12d58 <__assert_fail@plt+0x1754>
   12d4c:	b	12d60 <__assert_fail@plt+0x175c>
   12d50:	movw	r0, #257	; 0x101
   12d54:	strh	r0, [r8, #14]
   12d58:	mov	r0, r1
   12d5c:	str	r1, [r8, #52]	; 0x34
   12d60:	ldrb	r1, [r8, #4]
   12d64:	cmp	r1, #1
   12d68:	addeq	r0, r0, r0, lsr #31
   12d6c:	asreq	r0, r0, #1
   12d70:	streq	r0, [r8, #52]	; 0x34
   12d74:	cmp	r5, #0
   12d78:	beq	12d9c <__assert_fail@plt+0x1798>
   12d7c:	ldrb	r0, [r8, #9]
   12d80:	mov	r1, #0
   12d84:	cmp	r0, #1
   12d88:	movweq	r0, #8504	; 0x2138
   12d8c:	moveq	r1, #1
   12d90:	movteq	r0, #3
   12d94:	streq	r5, [r0, #32]
   12d98:	b	12da4 <__assert_fail@plt+0x17a0>
   12d9c:	mov	r1, #0
   12da0:	strb	r1, [r8, #9]
   12da4:	ldrb	r0, [r8, #1]
   12da8:	cmp	r0, #0
   12dac:	moveq	r0, #1
   12db0:	strbeq	r0, [r8, #2]
   12db4:	movw	r0, #8504	; 0x2138
   12db8:	movt	r0, #3
   12dbc:	ldr	r0, [r0, #32]
   12dc0:	cmp	r0, #2
   12dc4:	blt	12e44 <__assert_fail@plt+0x1840>
   12dc8:	ldrb	r3, [r8, #13]
   12dcc:	ldrb	r2, [r8, #8]
   12dd0:	cmp	r3, #0
   12dd4:	beq	12e54 <__assert_fail@plt+0x1850>
   12dd8:	ldr	r3, [r8, #40]	; 0x28
   12ddc:	cmp	r3, #1
   12de0:	bne	12e18 <__assert_fail@plt+0x1814>
   12de4:	eors	r7, r2, #1
   12de8:	beq	12e18 <__assert_fail@plt+0x1814>
   12dec:	movw	r7, #8504	; 0x2138
   12df0:	movt	r7, #3
   12df4:	ldr	r7, [r7, #24]
   12df8:	ldrb	r7, [r7]
   12dfc:	cmp	r7, #9
   12e00:	bne	12e18 <__assert_fail@plt+0x1814>
   12e04:	movw	r7, #3109	; 0xc25
   12e08:	movw	r6, #8504	; 0x2138
   12e0c:	movt	r7, #2
   12e10:	movt	r6, #3
   12e14:	str	r7, [r6, #24]
   12e18:	mov	r7, #1
   12e1c:	cmp	r3, #1
   12e20:	strb	r7, [r8, #17]
   12e24:	bne	12e94 <__assert_fail@plt+0x1890>
   12e28:	movw	r3, #8504	; 0x2138
   12e2c:	movt	r3, #3
   12e30:	ldr	r3, [r3, #24]
   12e34:	ldrb	r3, [r3]
   12e38:	cmp	r3, #9
   12e3c:	bne	12e94 <__assert_fail@plt+0x1890>
   12e40:	b	12e9c <__assert_fail@plt+0x1898>
   12e44:	mov	r2, #1
   12e48:	strb	r2, [r8, #1]
   12e4c:	ldrb	r2, [r8, #8]
   12e50:	b	12ea4 <__assert_fail@plt+0x18a0>
   12e54:	movw	r7, #3107	; 0xc23
   12e58:	mov	r3, #1
   12e5c:	cmp	r2, #0
   12e60:	movt	r7, #2
   12e64:	str	r3, [r8, #40]	; 0x28
   12e68:	strb	r3, [r8, #17]
   12e6c:	strb	r3, [r8, #13]
   12e70:	movw	r3, #3109	; 0xc25
   12e74:	movt	r3, #2
   12e78:	movne	r3, r7
   12e7c:	movw	r7, #8504	; 0x2138
   12e80:	movt	r7, #3
   12e84:	str	r3, [r7, #24]
   12e88:	ldrb	r3, [r3]
   12e8c:	cmp	r3, #9
   12e90:	beq	12e9c <__assert_fail@plt+0x1898>
   12e94:	mov	r3, #1
   12e98:	strb	r3, [r8, #5]
   12e9c:	mov	r3, #1
   12ea0:	strb	r3, [r8, #7]
   12ea4:	cmp	r2, #0
   12ea8:	mov	r3, #0
   12eac:	movne	r2, #0
   12eb0:	strbne	r2, [r8, #17]
   12eb4:	ldrb	ip, [r8, #10]
   12eb8:	cmp	ip, #1
   12ebc:	bne	12f04 <__assert_fail@plt+0x1900>
   12ec0:	movw	r2, #8504	; 0x2138
   12ec4:	movt	r2, #3
   12ec8:	ldrd	r6, [r2, #16]
   12ecc:	str	r7, [r2, #36]	; 0x24
   12ed0:	ldrb	r3, [r2, #2]
   12ed4:	cmp	r3, #9
   12ed8:	bne	12ef0 <__assert_fail@plt+0x18ec>
   12edc:	asr	r3, r6, #31
   12ee0:	add	r3, r6, r3, lsr #29
   12ee4:	bic	r3, r3, #7
   12ee8:	add	r3, r3, #8
   12eec:	b	12ef4 <__assert_fail@plt+0x18f0>
   12ef0:	add	r3, r6, #1
   12ef4:	cmp	r1, #0
   12ef8:	str	r3, [r8, #56]	; 0x38
   12efc:	movne	r1, r3
   12f00:	mov	r3, r1
   12f04:	ldr	r1, [r8, #40]	; 0x28
   12f08:	sub	r7, r0, #1
   12f0c:	cmn	r1, #1
   12f10:	ble	12f38 <__assert_fail@plt+0x1934>
   12f14:	cmp	r1, #0
   12f18:	beq	12f94 <__assert_fail@plt+0x1990>
   12f1c:	cmp	r0, #0
   12f20:	ble	12f60 <__assert_fail@plt+0x195c>
   12f24:	mvn	r6, #-2147483648	; 0x80000000
   12f28:	udiv	r2, r6, r1
   12f2c:	cmp	r2, r7
   12f30:	bge	12f94 <__assert_fail@plt+0x1990>
   12f34:	b	12f98 <__assert_fail@plt+0x1994>
   12f38:	cmp	r0, #0
   12f3c:	ble	12f7c <__assert_fail@plt+0x1978>
   12f40:	cmn	r1, #1
   12f44:	beq	12f94 <__assert_fail@plt+0x1990>
   12f48:	mov	r2, #-2147483648	; 0x80000000
   12f4c:	mvn	r6, #-2147483648	; 0x80000000
   12f50:	sdiv	r2, r2, r1
   12f54:	cmp	r2, r7
   12f58:	bge	12f94 <__assert_fail@plt+0x1990>
   12f5c:	b	12f98 <__assert_fail@plt+0x1994>
   12f60:	beq	12f90 <__assert_fail@plt+0x198c>
   12f64:	mov	r2, #-2147483648	; 0x80000000
   12f68:	mvn	r6, #-2147483648	; 0x80000000
   12f6c:	sdiv	r2, r2, r7
   12f70:	cmp	r2, r1
   12f74:	mulge	r6, r7, r1
   12f78:	b	12f98 <__assert_fail@plt+0x1994>
   12f7c:	mvn	r6, #-2147483648	; 0x80000000
   12f80:	sdiv	r2, r6, r1
   12f84:	cmp	r0, r2
   12f88:	bgt	12f94 <__assert_fail@plt+0x1990>
   12f8c:	b	12f98 <__assert_fail@plt+0x1994>
   12f90:	mvn	r7, #0
   12f94:	mul	r6, r7, r1
   12f98:	movw	r1, #8504	; 0x2138
   12f9c:	movt	r1, #3
   12fa0:	ldr	r1, [r1, #28]
   12fa4:	sub	r1, r1, r3
   12fa8:	subs	r1, r1, r6
   12fac:	movvs	r1, #0
   12fb0:	sdiv	r0, r1, r0
   12fb4:	cmp	r0, #0
   12fb8:	str	r0, [r8, #60]	; 0x3c
   12fbc:	ble	1459c <__assert_fail@plt+0x2f98>
   12fc0:	cmp	ip, #0
   12fc4:	beq	12ff0 <__assert_fail@plt+0x19ec>
   12fc8:	ldr	r0, [r8, #64]	; 0x40
   12fcc:	bl	16600 <__assert_fail@plt+0x4ffc>
   12fd0:	movw	r0, #8504	; 0x2138
   12fd4:	movt	r0, #3
   12fd8:	ldr	r0, [r0, #16]
   12fdc:	cmp	r0, #11
   12fe0:	movls	r0, #11
   12fe4:	add	r0, r0, #1
   12fe8:	bl	1b984 <__assert_fail@plt+0xa380>
   12fec:	str	r0, [r8, #64]	; 0x40
   12ff0:	ldr	r0, [r8, #68]	; 0x44
   12ff4:	bl	16600 <__assert_fail@plt+0x4ffc>
   12ff8:	movw	r0, #8504	; 0x2138
   12ffc:	movt	r0, #3
   13000:	mov	r6, r0
   13004:	ldr	r0, [r0, #4]
   13008:	cmp	r0, #8
   1300c:	movle	r0, #8
   13010:	bl	1b984 <__assert_fail@plt+0xa380>
   13014:	mov	r1, #0
   13018:	str	r0, [r8, #68]	; 0x44
   1301c:	str	r1, [r8, #72]	; 0x48
   13020:	ldr	r0, [r8, #76]	; 0x4c
   13024:	bl	16600 <__assert_fail@plt+0x4ffc>
   13028:	ldr	r0, [r6, #32]
   1302c:	mov	r1, #40	; 0x28
   13030:	bl	1ba54 <__assert_fail@plt+0xa450>
   13034:	str	r0, [r8, #76]	; 0x4c
   13038:	mov	r6, r0
   1303c:	ldrb	r0, [r8, #9]
   13040:	cmp	r0, #1
   13044:	beq	13090 <__assert_fail@plt+0x1a8c>
   13048:	cmp	r5, #1
   1304c:	blt	130f8 <__assert_fail@plt+0x1af4>
   13050:	ldr	r0, [r4]
   13054:	mov	r1, r6
   13058:	bl	145ec <__assert_fail@plt+0x2fe8>
   1305c:	cmp	r0, #0
   13060:	beq	144e4 <__assert_fail@plt+0x2ee0>
   13064:	ldr	r0, [r6]
   13068:	ldr	r4, [r4]
   1306c:	bl	11520 <fileno@plt>
   13070:	mov	r1, r0
   13074:	mov	r0, r4
   13078:	bl	14708 <__assert_fail@plt+0x3104>
   1307c:	mov	r0, #0
   13080:	str	r0, [r6, #24]
   13084:	b	13150 <__assert_fail@plt+0x1b4c>
   13088:	add	r4, r4, #4
   1308c:	add	r6, r6, #40	; 0x28
   13090:	cmp	r5, #0
   13094:	beq	130d0 <__assert_fail@plt+0x1acc>
   13098:	ldr	r0, [r4]
   1309c:	mov	r1, r6
   130a0:	bl	145ec <__assert_fail@plt+0x2fe8>
   130a4:	sub	r5, r5, #1
   130a8:	cmp	r0, #0
   130ac:	bne	13088 <__assert_fail@plt+0x1a84>
   130b0:	movw	r0, #8504	; 0x2138
   130b4:	sub	r6, r6, #40	; 0x28
   130b8:	movt	r0, #3
   130bc:	mov	r1, r0
   130c0:	ldr	r0, [r0, #32]
   130c4:	sub	r0, r0, #1
   130c8:	str	r0, [r1, #32]
   130cc:	b	13088 <__assert_fail@plt+0x1a84>
   130d0:	movw	r0, #8504	; 0x2138
   130d4:	movt	r0, #3
   130d8:	ldr	r0, [r0, #32]
   130dc:	cmp	r0, #0
   130e0:	beq	144e4 <__assert_fail@plt+0x2ee0>
   130e4:	movw	r0, #3108	; 0xc24
   130e8:	mvn	r1, #0
   130ec:	movt	r0, #2
   130f0:	bl	14708 <__assert_fail@plt+0x3104>
   130f4:	b	131d8 <__assert_fail@plt+0x1bd4>
   130f8:	movw	r1, #64350	; 0xfb5e
   130fc:	mov	r0, #0
   13100:	mov	r2, #5
   13104:	mov	r4, #0
   13108:	movt	r1, #1
   1310c:	bl	1137c <dcgettext@plt>
   13110:	movw	r1, #8648	; 0x21c8
   13114:	mov	r2, #1
   13118:	strb	r4, [r6, #37]	; 0x25
   1311c:	movt	r1, #3
   13120:	strb	r2, [r8, #19]
   13124:	ldr	r1, [r1]
   13128:	str	r1, [r6]
   1312c:	stmib	r6, {r0, r4}
   13130:	ldr	r0, [r8, #72]	; 0x48
   13134:	mvn	r1, #0
   13138:	add	r0, r0, #1
   1313c:	str	r0, [r8, #72]	; 0x48
   13140:	movw	r0, #3108	; 0xc24
   13144:	movt	r0, #2
   13148:	bl	14708 <__assert_fail@plt+0x3104>
   1314c:	str	r4, [r6, #24]
   13150:	movw	r0, #8504	; 0x2138
   13154:	movt	r0, #3
   13158:	ldr	r3, [r0, #32]
   1315c:	subs	r2, r3, #1
   13160:	beq	131d8 <__assert_fail@plt+0x1bd4>
   13164:	ldm	r6, {r0, r1}
   13168:	tst	r3, #1
   1316c:	bne	13198 <__assert_fail@plt+0x1b94>
   13170:	mov	r2, #0
   13174:	add	ip, r6, #40	; 0x28
   13178:	add	r7, r6, #80	; 0x50
   1317c:	strb	r2, [r6, #77]	; 0x4d
   13180:	stm	ip, {r0, r1, r2}
   13184:	str	r2, [r6, #64]	; 0x40
   13188:	sub	r2, r3, #2
   1318c:	cmp	r3, #2
   13190:	bne	131a4 <__assert_fail@plt+0x1ba0>
   13194:	b	131d8 <__assert_fail@plt+0x1bd4>
   13198:	add	r7, r6, #40	; 0x28
   1319c:	cmp	r3, #2
   131a0:	beq	131d8 <__assert_fail@plt+0x1bd4>
   131a4:	add	r3, r7, #77	; 0x4d
   131a8:	mov	r7, #0
   131ac:	sub	ip, r3, #77	; 0x4d
   131b0:	strb	r7, [r3, #-40]	; 0xffffffd8
   131b4:	subs	r2, r2, #2
   131b8:	stm	ip, {r0, r1, r7}
   131bc:	sub	ip, r3, #37	; 0x25
   131c0:	str	r7, [r3, #-53]	; 0xffffffcb
   131c4:	strb	r7, [r3]
   131c8:	stm	ip, {r0, r1, r7}
   131cc:	str	r7, [r3, #-13]
   131d0:	add	r3, r3, #80	; 0x50
   131d4:	bne	131ac <__assert_fail@plt+0x1ba8>
   131d8:	ldr	r0, [r8, #72]	; 0x48
   131dc:	str	r0, [r8, #80]	; 0x50
   131e0:	ldrb	r0, [r8, #1]
   131e4:	cmp	r0, #0
   131e8:	bne	13380 <__assert_fail@plt+0x1d7c>
   131ec:	movw	r0, #8504	; 0x2138
   131f0:	movt	r0, #3
   131f4:	ldr	r0, [r0, #32]
   131f8:	cmn	r0, #1
   131fc:	ble	13228 <__assert_fail@plt+0x1c24>
   13200:	ldr	r1, [r8, #52]	; 0x34
   13204:	cmp	r0, #0
   13208:	beq	13280 <__assert_fail@plt+0x1c7c>
   1320c:	cmn	r1, #1
   13210:	ble	13250 <__assert_fail@plt+0x1c4c>
   13214:	mvn	r2, #-2147483648	; 0x80000000
   13218:	udiv	r2, r2, r0
   1321c:	cmp	r2, r1
   13220:	bge	13280 <__assert_fail@plt+0x1c7c>
   13224:	b	13294 <__assert_fail@plt+0x1c90>
   13228:	ldr	r1, [r8, #52]	; 0x34
   1322c:	cmn	r1, #1
   13230:	ble	13268 <__assert_fail@plt+0x1c64>
   13234:	cmn	r0, #1
   13238:	beq	13280 <__assert_fail@plt+0x1c7c>
   1323c:	mov	r2, #-2147483648	; 0x80000000
   13240:	sdiv	r2, r2, r0
   13244:	cmp	r2, r1
   13248:	bge	13280 <__assert_fail@plt+0x1c7c>
   1324c:	b	13294 <__assert_fail@plt+0x1c90>
   13250:	beq	1327c <__assert_fail@plt+0x1c78>
   13254:	mov	r2, #-2147483648	; 0x80000000
   13258:	sdiv	r2, r2, r1
   1325c:	cmp	r2, r0
   13260:	bge	13280 <__assert_fail@plt+0x1c7c>
   13264:	b	13294 <__assert_fail@plt+0x1c90>
   13268:	mvn	r2, #-2147483648	; 0x80000000
   1326c:	sdiv	r2, r2, r0
   13270:	cmp	r1, r2
   13274:	bge	13280 <__assert_fail@plt+0x1c7c>
   13278:	b	13294 <__assert_fail@plt+0x1c90>
   1327c:	mvn	r1, #0
   13280:	mul	r4, r1, r0
   13284:	adds	r5, r4, #1
   13288:	ldrvc	r0, [r8, #60]	; 0x3c
   1328c:	addsvc	r6, r0, #1
   13290:	bvc	13298 <__assert_fail@plt+0x1c94>
   13294:	bl	145c0 <__assert_fail@plt+0x2fbc>
   13298:	cmn	r6, #1
   1329c:	ble	132c4 <__assert_fail@plt+0x1cc0>
   132a0:	cmp	r6, #0
   132a4:	beq	13310 <__assert_fail@plt+0x1d0c>
   132a8:	cmn	r4, #1
   132ac:	ble	132e8 <__assert_fail@plt+0x1ce4>
   132b0:	mvn	r0, #-2147483648	; 0x80000000
   132b4:	udiv	r0, r0, r6
   132b8:	cmp	r0, r4
   132bc:	bge	13310 <__assert_fail@plt+0x1d0c>
   132c0:	b	13294 <__assert_fail@plt+0x1c90>
   132c4:	cmn	r4, #1
   132c8:	ble	13300 <__assert_fail@plt+0x1cfc>
   132cc:	cmn	r6, #1
   132d0:	beq	13310 <__assert_fail@plt+0x1d0c>
   132d4:	mov	r0, #-2147483648	; 0x80000000
   132d8:	sdiv	r0, r0, r6
   132dc:	cmp	r0, r4
   132e0:	bge	13310 <__assert_fail@plt+0x1d0c>
   132e4:	b	13294 <__assert_fail@plt+0x1c90>
   132e8:	beq	13310 <__assert_fail@plt+0x1d0c>
   132ec:	mov	r0, #-2147483648	; 0x80000000
   132f0:	sdiv	r0, r0, r4
   132f4:	cmp	r0, r6
   132f8:	bge	13310 <__assert_fail@plt+0x1d0c>
   132fc:	b	13294 <__assert_fail@plt+0x1c90>
   13300:	mvn	r0, #-2147483648	; 0x80000000
   13304:	sdiv	r0, r0, r6
   13308:	cmp	r4, r0
   1330c:	blt	13294 <__assert_fail@plt+0x1c90>
   13310:	ldr	r0, [r8, #96]	; 0x60
   13314:	bl	16600 <__assert_fail@plt+0x4ffc>
   13318:	mov	r0, r5
   1331c:	mov	r1, #4
   13320:	bl	1ba54 <__assert_fail@plt+0xa450>
   13324:	str	r0, [r8, #96]	; 0x60
   13328:	ldr	r0, [r8, #100]	; 0x64
   1332c:	bl	16600 <__assert_fail@plt+0x4ffc>
   13330:	mov	r0, r4
   13334:	mov	r1, #4
   13338:	bl	1ba54 <__assert_fail@plt+0xa450>
   1333c:	str	r0, [r8, #100]	; 0x64
   13340:	ldr	r0, [r8, #104]	; 0x68
   13344:	bl	16600 <__assert_fail@plt+0x4ffc>
   13348:	ldrb	r0, [r8, #13]
   1334c:	mul	r4, r6, r4
   13350:	mov	r1, #1
   13354:	mov	r5, #1
   13358:	cmp	r0, #0
   1335c:	mov	r0, r4
   13360:	movwne	r1, #2
   13364:	bl	1ba54 <__assert_fail@plt+0xa450>
   13368:	ldrb	r1, [r8, #13]
   1336c:	str	r0, [r8, #104]	; 0x68
   13370:	cmp	r1, #0
   13374:	movwne	r5, #2
   13378:	mul	r1, r5, r4
   1337c:	str	r1, [r8, #108]	; 0x6c
   13380:	movw	r4, #8792	; 0x2258
   13384:	mov	r5, #0
   13388:	mov	r0, #1
   1338c:	movt	r4, #3
   13390:	ldr	r1, [r4, #16]
   13394:	ldr	r2, [r4, #20]
   13398:	str	r1, [sp, #20]
   1339c:	subs	r1, r1, #2
   133a0:	str	r2, [sp, #24]
   133a4:	sbcs	r1, r2, #0
   133a8:	mov	r1, #0
   133ac:	bcc	13650 <__assert_fail@plt+0x204c>
   133b0:	movw	r0, #8504	; 0x2138
   133b4:	mov	sl, #1
   133b8:	mov	r9, #0
   133bc:	movt	r0, #3
   133c0:	ldr	r7, [r0, #32]
   133c4:	ldr	r1, [r8, #52]	; 0x34
   133c8:	cmp	r1, #2
   133cc:	bge	13414 <__assert_fail@plt+0x1e10>
   133d0:	b	1348c <__assert_fail@plt+0x1e88>
   133d4:	strb	r5, [r8, #21]
   133d8:	movw	r4, #8792	; 0x2258
   133dc:	ldr	r0, [r8, #80]	; 0x50
   133e0:	movt	r4, #3
   133e4:	cmp	r0, #1
   133e8:	blt	13604 <__assert_fail@plt+0x2000>
   133ec:	ldr	r0, [sp, #20]
   133f0:	adds	sl, sl, #1
   133f4:	adc	r9, r9, #0
   133f8:	subs	r0, sl, r0
   133fc:	ldr	r0, [sp, #24]
   13400:	sbcs	r0, r9, r0
   13404:	bcs	13648 <__assert_fail@plt+0x2044>
   13408:	ldr	r1, [r8, #52]	; 0x34
   1340c:	cmp	r1, #2
   13410:	blt	1348c <__assert_fail@plt+0x1e88>
   13414:	mov	r6, #1
   13418:	cmp	r7, #1
   1341c:	bge	1343c <__assert_fail@plt+0x1e38>
   13420:	b	13428 <__assert_fail@plt+0x1e24>
   13424:	ldr	r1, [r8, #52]	; 0x34
   13428:	add	r6, r6, #1
   1342c:	cmp	r6, r1
   13430:	bge	1348c <__assert_fail@plt+0x1e88>
   13434:	cmp	r7, #1
   13438:	blt	13428 <__assert_fail@plt+0x1e24>
   1343c:	ldr	r4, [r8, #76]	; 0x4c
   13440:	mov	r5, #1
   13444:	ldr	r0, [r4, #8]
   13448:	cmp	r0, #0
   1344c:	beq	13470 <__assert_fail@plt+0x1e6c>
   13450:	add	r0, r5, #1
   13454:	cmp	r5, r7
   13458:	add	r4, r4, #40	; 0x28
   1345c:	mov	r5, r0
   13460:	bge	13424 <__assert_fail@plt+0x1e20>
   13464:	ldr	r0, [r4, #8]
   13468:	cmp	r0, #0
   1346c:	bne	13450 <__assert_fail@plt+0x1e4c>
   13470:	mov	r0, r4
   13474:	mov	r1, r5
   13478:	bl	14898 <__assert_fail@plt+0x3294>
   1347c:	movw	r0, #8504	; 0x2138
   13480:	movt	r0, #3
   13484:	ldr	r7, [r0, #32]
   13488:	b	13450 <__assert_fail@plt+0x1e4c>
   1348c:	mov	r0, #1
   13490:	cmp	r7, #0
   13494:	strb	r0, [r8, #21]
   13498:	ble	1356c <__assert_fail@plt+0x1f68>
   1349c:	ldr	r4, [r8, #76]	; 0x4c
   134a0:	mov	r5, #1
   134a4:	ldr	r0, [r4, #8]
   134a8:	cmp	r0, #0
   134ac:	beq	134d0 <__assert_fail@plt+0x1ecc>
   134b0:	add	r0, r5, #1
   134b4:	cmp	r5, r7
   134b8:	add	r4, r4, #40	; 0x28
   134bc:	mov	r5, r0
   134c0:	bge	134ec <__assert_fail@plt+0x1ee8>
   134c4:	ldr	r0, [r4, #8]
   134c8:	cmp	r0, #0
   134cc:	bne	134b0 <__assert_fail@plt+0x1eac>
   134d0:	mov	r0, r4
   134d4:	mov	r1, r5
   134d8:	bl	14898 <__assert_fail@plt+0x3294>
   134dc:	movw	r0, #8504	; 0x2138
   134e0:	movt	r0, #3
   134e4:	ldr	r7, [r0, #32]
   134e8:	b	134b0 <__assert_fail@plt+0x1eac>
   134ec:	ldr	r1, [r8, #76]	; 0x4c
   134f0:	ldrb	r2, [r8, #1]
   134f4:	cmp	r7, #1
   134f8:	mov	r5, #0
   134fc:	blt	13578 <__assert_fail@plt+0x1f74>
   13500:	cmp	r2, #0
   13504:	mov	r4, #2
   13508:	bne	13578 <__assert_fail@plt+0x1f74>
   1350c:	and	r0, r7, #1
   13510:	cmp	r7, #1
   13514:	mov	r3, r1
   13518:	beq	13548 <__assert_fail@plt+0x1f44>
   1351c:	sub	r2, r0, r7
   13520:	mov	r3, r1
   13524:	ldr	r6, [r3, #8]
   13528:	cmp	r6, #3
   1352c:	strne	r4, [r3, #8]
   13530:	ldr	r6, [r3, #48]	; 0x30
   13534:	cmp	r6, #3
   13538:	strne	r4, [r3, #48]	; 0x30
   1353c:	adds	r2, r2, #2
   13540:	add	r3, r3, #80	; 0x50
   13544:	bne	13524 <__assert_fail@plt+0x1f20>
   13548:	mov	r2, #0
   1354c:	cmp	r0, #0
   13550:	beq	13578 <__assert_fail@plt+0x1f74>
   13554:	ldr	r0, [r3, #8]
   13558:	cmp	r0, #3
   1355c:	strne	r4, [r3, #8]
   13560:	cmp	r7, #0
   13564:	bne	13580 <__assert_fail@plt+0x1f7c>
   13568:	b	135c8 <__assert_fail@plt+0x1fc4>
   1356c:	ldr	r1, [r8, #76]	; 0x4c
   13570:	ldrb	r2, [r8, #1]
   13574:	mov	r5, #0
   13578:	cmp	r7, #0
   1357c:	beq	135c8 <__assert_fail@plt+0x1fc4>
   13580:	add	r3, r1, #8
   13584:	mov	r0, r7
   13588:	ldr	r6, [r3]
   1358c:	cmp	r6, #2
   13590:	beq	135ac <__assert_fail@plt+0x1fa8>
   13594:	add	r3, r3, #40	; 0x28
   13598:	subs	r0, r0, #1
   1359c:	beq	135c8 <__assert_fail@plt+0x1fc4>
   135a0:	ldr	r6, [r3]
   135a4:	cmp	r6, #2
   135a8:	bne	13594 <__assert_fail@plt+0x1f90>
   135ac:	str	r5, [r3]
   135b0:	ldr	r6, [r8, #80]	; 0x50
   135b4:	add	r6, r6, #1
   135b8:	str	r6, [r8, #80]	; 0x50
   135bc:	add	r3, r3, #40	; 0x28
   135c0:	subs	r0, r0, #1
   135c4:	bne	135a0 <__assert_fail@plt+0x1f9c>
   135c8:	cmp	r2, #0
   135cc:	bne	133d4 <__assert_fail@plt+0x1dd0>
   135d0:	ldr	r0, [r1, #8]
   135d4:	movw	r4, #8792	; 0x2258
   135d8:	mov	r2, #0
   135dc:	movt	r4, #3
   135e0:	cmp	r0, #3
   135e4:	beq	135f8 <__assert_fail@plt+0x1ff4>
   135e8:	mov	r0, #1
   135ec:	strb	r2, [r8, #21]
   135f0:	str	r0, [r8, #80]	; 0x50
   135f4:	b	133ec <__assert_fail@plt+0x1de8>
   135f8:	mov	r0, #0
   135fc:	strb	r0, [r8, #21]
   13600:	str	r0, [r8, #80]	; 0x50
   13604:	movw	r1, #3119	; 0xc2f
   13608:	mov	r0, #0
   1360c:	mov	r2, #5
   13610:	movt	r1, #2
   13614:	bl	1137c <dcgettext@plt>
   13618:	mov	r2, r0
   1361c:	ldr	r0, [sp, #20]
   13620:	mov	r1, #0
   13624:	str	r0, [sp]
   13628:	ldr	r0, [sp, #24]
   1362c:	stmib	sp, {r0, sl}
   13630:	mov	r0, #0
   13634:	str	r9, [sp, #12]
   13638:	bl	11418 <error@plt>
   1363c:	ldr	r0, [r8, #80]	; 0x50
   13640:	cmp	r0, #1
   13644:	blt	144e4 <__assert_fail@plt+0x2ee0>
   13648:	ldrd	r0, [r4, #16]
   1364c:	mov	r5, #0
   13650:	ldrb	r3, [r8, #17]
   13654:	strd	r0, [r4, #24]
   13658:	ldr	r0, [r8, #36]	; 0x24
   1365c:	cmp	r3, #1
   13660:	bne	13698 <__assert_fail@plt+0x2094>
   13664:	ldrb	r1, [r8, #9]
   13668:	cmp	r1, #1
   1366c:	bne	13690 <__assert_fail@plt+0x208c>
   13670:	ldrb	r1, [r8, #10]
   13674:	cmp	r1, #1
   13678:	bne	13690 <__assert_fail@plt+0x208c>
   1367c:	ldr	r2, [r8, #60]	; 0x3c
   13680:	ldr	r1, [r8, #56]	; 0x38
   13684:	add	r2, r2, r0
   13688:	add	r5, r2, r1
   1368c:	b	13698 <__assert_fail@plt+0x2094>
   13690:	ldr	r1, [r8, #60]	; 0x3c
   13694:	add	r5, r1, r0
   13698:	ldr	lr, [r8, #40]	; 0x28
   1369c:	ldrb	r1, [r8, #1]
   136a0:	ldr	r4, [r8, #76]	; 0x4c
   136a4:	add	r2, lr, r0
   136a8:	movw	r0, #8504	; 0x2138
   136ac:	movt	r0, #3
   136b0:	ldr	r7, [r0, #32]
   136b4:	mov	r0, #1
   136b8:	cmp	r7, #2
   136bc:	blt	13754 <__assert_fail@plt+0x2150>
   136c0:	movw	r0, #20728	; 0x50f8
   136c4:	movw	ip, #19716	; 0x4d04
   136c8:	cmp	r1, #0
   136cc:	movw	sl, #19644	; 0x4cbc
   136d0:	ldr	r6, [r8, #60]	; 0x3c
   136d4:	movt	r0, #1
   136d8:	movt	ip, #1
   136dc:	movt	sl, #1
   136e0:	movne	ip, r0
   136e4:	movw	r0, #20288	; 0x4f40
   136e8:	movt	r0, #1
   136ec:	movne	sl, r0
   136f0:	ldrb	r0, [r8, #10]
   136f4:	cmp	r0, #1
   136f8:	bne	13780 <__assert_fail@plt+0x217c>
   136fc:	ldrb	r0, [r8, #9]
   13700:	cmp	r3, #0
   13704:	eor	r9, r0, #1
   13708:	mov	r0, #1
   1370c:	beq	144ec <__assert_fail@plt+0x2ee8>
   13710:	mov	r3, r4
   13714:	str	ip, [r3, #12]
   13718:	str	sl, [r3, #16]
   1371c:	str	r2, [r3, #32]
   13720:	sub	r2, r0, #1
   13724:	add	r0, r0, #1
   13728:	clz	r2, r2
   1372c:	cmp	r7, r0
   13730:	lsr	r2, r2, #5
   13734:	orr	r2, r2, r9
   13738:	and	r2, r2, #1
   1373c:	strb	r2, [r3, #36]	; 0x24
   13740:	add	r2, r5, lr
   13744:	add	r3, r3, #40	; 0x28
   13748:	add	r5, r2, r6
   1374c:	bne	13714 <__assert_fail@plt+0x2110>
   13750:	b	137bc <__assert_fail@plt+0x21b8>
   13754:	mov	r3, r4
   13758:	cmp	r1, #0
   1375c:	bne	137cc <__assert_fail@plt+0x21c8>
   13760:	ldrb	r6, [r8, #2]
   13764:	cmp	r6, #0
   13768:	beq	137cc <__assert_fail@plt+0x21c8>
   1376c:	movw	r6, #19716	; 0x4d04
   13770:	movw	r5, #19644	; 0x4cbc
   13774:	movt	r6, #1
   13778:	movt	r5, #1
   1377c:	b	137dc <__assert_fail@plt+0x21d8>
   13780:	cmp	r3, #0
   13784:	beq	1453c <__assert_fail@plt+0x2f38>
   13788:	mov	r0, #1
   1378c:	mov	r9, #0
   13790:	mov	r3, r4
   13794:	strb	r9, [r3, #36]	; 0x24
   13798:	str	ip, [r3, #12]
   1379c:	str	sl, [r3, #16]
   137a0:	str	r2, [r3, #32]
   137a4:	add	r2, r5, lr
   137a8:	add	r0, r0, #1
   137ac:	add	r3, r3, #40	; 0x28
   137b0:	add	r5, r2, r6
   137b4:	cmp	r7, r0
   137b8:	bne	13794 <__assert_fail@plt+0x2190>
   137bc:	sub	r2, r5, r6
   137c0:	mov	r0, r7
   137c4:	cmp	r1, #0
   137c8:	beq	13760 <__assert_fail@plt+0x215c>
   137cc:	movw	r6, #20728	; 0x50f8
   137d0:	movw	r5, #20288	; 0x4f40
   137d4:	movt	r6, #1
   137d8:	movt	r5, #1
   137dc:	str	r6, [r3, #12]
   137e0:	str	r5, [r3, #16]
   137e4:	mov	r5, #0
   137e8:	ldrb	r6, [r8, #10]
   137ec:	cmp	r6, #1
   137f0:	mov	r6, #0
   137f4:	bne	13814 <__assert_fail@plt+0x2210>
   137f8:	ldrb	r6, [r8, #9]
   137fc:	sub	r0, r0, #1
   13800:	clz	r0, r0
   13804:	lsr	r0, r0, #5
   13808:	mvn	r6, r6
   1380c:	orr	r0, r0, r6
   13810:	and	r6, r0, #1
   13814:	movw	r0, #8504	; 0x2138
   13818:	str	r2, [r3, #32]
   1381c:	strb	r6, [r3, #36]	; 0x24
   13820:	mov	r9, #10
   13824:	movt	r0, #3
   13828:	ldr	r0, [r0, #36]	; 0x24
   1382c:	str	r0, [r8, #48]	; 0x30
   13830:	tst	r1, #1
   13834:	beq	138b4 <__assert_fail@plt+0x22b0>
   13838:	cmp	r7, #0
   1383c:	beq	144e4 <__assert_fail@plt+0x2ee0>
   13840:	ldr	r1, [r8, #52]	; 0x34
   13844:	tst	r7, #1
   13848:	mov	r2, r4
   1384c:	mov	r0, r7
   13850:	beq	13870 <__assert_fail@plt+0x226c>
   13854:	ldr	r0, [r4, #8]
   13858:	add	r2, r4, #40	; 0x28
   1385c:	cmp	r0, #0
   13860:	mov	r0, #0
   13864:	moveq	r0, r1
   13868:	str	r0, [r4, #28]
   1386c:	sub	r0, r7, #1
   13870:	cmp	r7, #1
   13874:	beq	13b54 <__assert_fail@plt+0x2550>
   13878:	add	r2, r2, #48	; 0x30
   1387c:	ldr	r3, [r2, #-40]	; 0xffffffd8
   13880:	ldr	r6, [r2]
   13884:	cmp	r3, #0
   13888:	mov	r3, #0
   1388c:	moveq	r3, r1
   13890:	cmp	r6, #0
   13894:	str	r3, [r2, #-20]	; 0xffffffec
   13898:	mov	r3, #0
   1389c:	moveq	r3, r1
   138a0:	subs	r0, r0, #2
   138a4:	str	r3, [r2, #20]
   138a8:	add	r2, r2, #80	; 0x50
   138ac:	bne	1387c <__assert_fail@plt+0x2278>
   138b0:	b	13b54 <__assert_fail@plt+0x2550>
   138b4:	str	r5, [r8, #112]	; 0x70
   138b8:	ldrb	r2, [r8, #2]
   138bc:	eor	r0, r2, #1
   138c0:	sub	r6, r7, r0
   138c4:	cmp	r6, #0
   138c8:	ble	13a38 <__assert_fail@plt+0x2434>
   138cc:	mvn	r0, r0
   138d0:	add	r1, r7, r0
   138d4:	and	r0, r6, #3
   138d8:	cmp	r1, #3
   138dc:	mov	r1, r4
   138e0:	bcc	13908 <__assert_fail@plt+0x2304>
   138e4:	sub	r3, r6, r0
   138e8:	mov	r1, r4
   138ec:	str	r5, [r1, #144]	; 0x90
   138f0:	str	r5, [r1, #104]	; 0x68
   138f4:	str	r5, [r1, #64]	; 0x40
   138f8:	str	r5, [r1, #24]
   138fc:	subs	r3, r3, #4
   13900:	add	r1, r1, #160	; 0xa0
   13904:	bne	138ec <__assert_fail@plt+0x22e8>
   13908:	cmp	r0, #0
   1390c:	beq	13920 <__assert_fail@plt+0x231c>
   13910:	add	r1, r1, #24
   13914:	str	r5, [r1], #40	; 0x28
   13918:	subs	r0, r0, #1
   1391c:	bne	13914 <__assert_fail@plt+0x2310>
   13920:	cmp	r6, #1
   13924:	blt	13a38 <__assert_fail@plt+0x2434>
   13928:	ldr	r1, [r8, #80]	; 0x50
   1392c:	cmp	r1, #0
   13930:	beq	13a38 <__assert_fail@plt+0x2434>
   13934:	str	r6, [sp, #24]
   13938:	mov	sl, #1
   1393c:	mov	r0, #0
   13940:	mov	r6, #0
   13944:	cmp	r1, #0
   13948:	str	r6, [r4, #20]
   1394c:	ldrne	r2, [r8, #52]	; 0x34
   13950:	movne	r9, #0
   13954:	cmpne	r2, #0
   13958:	bne	13980 <__assert_fail@plt+0x237c>
   1395c:	ldr	r2, [sp, #24]
   13960:	mov	r5, #0
   13964:	cmp	sl, r2
   13968:	bge	13a54 <__assert_fail@plt+0x2450>
   1396c:	add	r4, r4, #40	; 0x28
   13970:	add	sl, sl, #1
   13974:	cmp	r1, #0
   13978:	bne	13944 <__assert_fail@plt+0x2340>
   1397c:	b	13a54 <__assert_fail@plt+0x2450>
   13980:	sub	r7, r2, #1
   13984:	ldr	r2, [r4, #8]
   13988:	mov	r5, r0
   1398c:	cmp	r2, #0
   13990:	beq	139c0 <__assert_fail@plt+0x23bc>
   13994:	mov	r0, r5
   13998:	ldr	r1, [r8, #80]	; 0x50
   1399c:	sub	r3, r7, #1
   139a0:	cmp	r3, r7
   139a4:	bcs	1395c <__assert_fail@plt+0x2358>
   139a8:	cmp	r1, #0
   139ac:	mov	r7, r3
   139b0:	mov	r5, r0
   139b4:	beq	1395c <__assert_fail@plt+0x2358>
   139b8:	cmp	r2, #0
   139bc:	bne	13994 <__assert_fail@plt+0x2390>
   139c0:	movw	r0, #8792	; 0x2258
   139c4:	movt	r0, #3
   139c8:	str	r9, [r0, #8]
   139cc:	mov	r0, r4
   139d0:	bl	150f8 <__assert_fail@plt+0x3af4>
   139d4:	cmp	r0, #0
   139d8:	moveq	r0, r4
   139dc:	bleq	161b8 <__assert_fail@plt+0x4bb4>
   139e0:	ldr	r2, [r4, #8]
   139e4:	ldr	r0, [r8, #112]	; 0x70
   139e8:	cmp	r2, #0
   139ec:	beq	139f8 <__assert_fail@plt+0x23f4>
   139f0:	cmp	r5, r0
   139f4:	beq	13994 <__assert_fail@plt+0x2390>
   139f8:	ldr	r1, [r4, #24]
   139fc:	movw	r3, #8792	; 0x2258
   13a00:	movt	r3, #3
   13a04:	add	r1, r1, #1
   13a08:	str	r1, [r4, #24]
   13a0c:	ldr	r1, [r8, #96]	; 0x60
   13a10:	str	r5, [r1, r6, lsl #2]
   13a14:	ldr	r1, [r8, #100]	; 0x64
   13a18:	ldr	r3, [r3, #8]
   13a1c:	str	r3, [r1, r6, lsl #2]
   13a20:	add	r6, r6, #1
   13a24:	ldr	r1, [r8, #80]	; 0x50
   13a28:	sub	r3, r7, #1
   13a2c:	cmp	r3, r7
   13a30:	bcc	139a8 <__assert_fail@plt+0x23a4>
   13a34:	b	1395c <__assert_fail@plt+0x2358>
   13a38:	ldr	r0, [r8, #96]	; 0x60
   13a3c:	mov	r6, #0
   13a40:	cmp	r2, #0
   13a44:	mov	r1, #0
   13a48:	str	r6, [r0]
   13a4c:	beq	13acc <__assert_fail@plt+0x24c8>
   13a50:	b	13a70 <__assert_fail@plt+0x246c>
   13a54:	ldrb	r2, [r8, #2]
   13a58:	ldr	r1, [r8, #96]	; 0x60
   13a5c:	mov	r9, #10
   13a60:	str	r0, [r1, r6, lsl #2]
   13a64:	mov	r1, #0
   13a68:	cmp	r2, #0
   13a6c:	beq	13acc <__assert_fail@plt+0x24c8>
   13a70:	movw	r0, #8504	; 0x2138
   13a74:	mov	r1, #1
   13a78:	movt	r0, #3
   13a7c:	ldr	r0, [r0, #32]
   13a80:	cmp	r0, #1
   13a84:	blt	13acc <__assert_fail@plt+0x24c8>
   13a88:	sdiv	r4, r6, r0
   13a8c:	ldr	r7, [r8, #76]	; 0x4c
   13a90:	mov	r5, #0
   13a94:	add	r7, r7, #20
   13a98:	mls	r3, r4, r0, r6
   13a9c:	mov	r6, #0
   13aa0:	add	r6, r6, #1
   13aa4:	mov	r2, r4
   13aa8:	str	r5, [r7]
   13aac:	cmp	r6, r3
   13ab0:	addle	r2, r2, #1
   13ab4:	cmp	r0, r6
   13ab8:	str	r2, [r7, #4]
   13abc:	add	r5, r2, r5
   13ac0:	add	r7, r7, #40	; 0x28
   13ac4:	bne	13aa0 <__assert_fail@plt+0x249c>
   13ac8:	mov	r5, #0
   13acc:	movw	r0, #8504	; 0x2138
   13ad0:	ldr	r4, [r8, #76]	; 0x4c
   13ad4:	movt	r0, #3
   13ad8:	ldr	r7, [r0, #32]
   13adc:	mov	r2, r4
   13ae0:	subs	r3, r7, #1
   13ae4:	beq	13b28 <__assert_fail@plt+0x2524>
   13ae8:	tst	r7, #1
   13aec:	mov	r2, r4
   13af0:	bne	13b04 <__assert_fail@plt+0x2500>
   13af4:	ldr	r0, [r4, #24]
   13af8:	sub	r3, r7, #2
   13afc:	add	r2, r4, #40	; 0x28
   13b00:	str	r0, [r4, #28]
   13b04:	cmp	r7, #2
   13b08:	beq	13b28 <__assert_fail@plt+0x2524>
   13b0c:	ldr	r0, [r2, #24]
   13b10:	ldr	r6, [r2, #64]	; 0x40
   13b14:	subs	r3, r3, #2
   13b18:	str	r0, [r2, #28]
   13b1c:	str	r6, [r2, #68]	; 0x44
   13b20:	add	r2, r2, #80	; 0x50
   13b24:	bne	13b0c <__assert_fail@plt+0x2508>
   13b28:	cmp	r1, #0
   13b2c:	beq	13b38 <__assert_fail@plt+0x2534>
   13b30:	add	r0, r2, #24
   13b34:	b	13b4c <__assert_fail@plt+0x2548>
   13b38:	ldr	r1, [r2, #8]
   13b3c:	mov	r0, #0
   13b40:	cmp	r1, #0
   13b44:	bne	13b50 <__assert_fail@plt+0x254c>
   13b48:	add	r0, r8, #52	; 0x34
   13b4c:	ldr	r0, [r0]
   13b50:	str	r0, [r2, #28]
   13b54:	cmp	r7, #0
   13b58:	beq	144e4 <__assert_fail@plt+0x2ee0>
   13b5c:	ldrb	r1, [r8, #1]
   13b60:	cmp	r1, #0
   13b64:	beq	13bd8 <__assert_fail@plt+0x25d4>
   13b68:	and	ip, r7, #1
   13b6c:	mov	r2, #0
   13b70:	cmp	r7, #1
   13b74:	mov	r0, r4
   13b78:	beq	13bac <__assert_fail@plt+0x25a8>
   13b7c:	sub	r6, ip, r7
   13b80:	mov	r2, #0
   13b84:	mov	r0, r4
   13b88:	ldr	r5, [r0, #8]
   13b8c:	ldr	r3, [r0, #48]	; 0x30
   13b90:	add	r0, r0, #80	; 0x50
   13b94:	cmp	r5, #2
   13b98:	addcc	r2, r2, #1
   13b9c:	cmp	r3, #2
   13ba0:	addcc	r2, r2, #1
   13ba4:	adds	r6, r6, #2
   13ba8:	bne	13b88 <__assert_fail@plt+0x2584>
   13bac:	cmp	ip, #0
   13bb0:	mov	r5, #0
   13bb4:	beq	13c30 <__assert_fail@plt+0x262c>
   13bb8:	ldr	r0, [r0, #8]
   13bbc:	cmp	r0, #2
   13bc0:	addcc	r2, r2, #1
   13bc4:	movw	r6, #8792	; 0x2258
   13bc8:	cmp	r2, #0
   13bcc:	movt	r6, #3
   13bd0:	bne	13c40 <__assert_fail@plt+0x263c>
   13bd4:	b	144e4 <__assert_fail@plt+0x2ee0>
   13bd8:	add	r3, r4, #28
   13bdc:	mov	r2, #0
   13be0:	mov	r0, r7
   13be4:	ldr	r6, [r3, #-20]	; 0xffffffec
   13be8:	cmp	r6, #2
   13bec:	bcs	13c0c <__assert_fail@plt+0x2608>
   13bf0:	add	r2, r2, #1
   13bf4:	add	r3, r3, #40	; 0x28
   13bf8:	subs	r0, r0, #1
   13bfc:	beq	13c30 <__assert_fail@plt+0x262c>
   13c00:	ldr	r6, [r3, #-20]	; 0xffffffec
   13c04:	cmp	r6, #2
   13c08:	bcc	13bf0 <__assert_fail@plt+0x25ec>
   13c0c:	ldr	r6, [r3, #-4]
   13c10:	cmp	r6, #1
   13c14:	blt	13bf4 <__assert_fail@plt+0x25f0>
   13c18:	ldr	r6, [r3]
   13c1c:	cmp	r6, #1
   13c20:	addge	r2, r2, #1
   13c24:	add	r3, r3, #40	; 0x28
   13c28:	subs	r0, r0, #1
   13c2c:	bne	13c00 <__assert_fail@plt+0x25fc>
   13c30:	movw	r6, #8792	; 0x2258
   13c34:	cmp	r2, #0
   13c38:	movt	r6, #3
   13c3c:	beq	144e4 <__assert_fail@plt+0x2ee0>
   13c40:	ldrb	r0, [r8, #14]
   13c44:	mov	sl, #0
   13c48:	cmp	r0, #0
   13c4c:	moveq	r0, #1
   13c50:	strbeq	r0, [r8, #23]
   13c54:	strb	sl, [r8, #22]
   13c58:	ldrb	r0, [r8, #4]
   13c5c:	ldr	r2, [r8, #52]	; 0x34
   13c60:	lsl	r0, r2, r0
   13c64:	cmp	r0, #1
   13c68:	str	r0, [sp, #24]
   13c6c:	blt	142ac <__assert_fail@plt+0x2ca8>
   13c70:	mov	sl, #0
   13c74:	tst	r1, #1
   13c78:	bne	13cd8 <__assert_fail@plt+0x26d4>
   13c7c:	add	r2, r4, #28
   13c80:	mov	r1, #0
   13c84:	mov	r0, r7
   13c88:	ldr	r3, [r2, #-20]	; 0xffffffec
   13c8c:	cmp	r3, #2
   13c90:	bcs	13cb0 <__assert_fail@plt+0x26ac>
   13c94:	add	r1, r1, #1
   13c98:	add	r2, r2, #40	; 0x28
   13c9c:	subs	r0, r0, #1
   13ca0:	beq	13d30 <__assert_fail@plt+0x272c>
   13ca4:	ldr	r3, [r2, #-20]	; 0xffffffec
   13ca8:	cmp	r3, #2
   13cac:	bcc	13c94 <__assert_fail@plt+0x2690>
   13cb0:	ldr	r3, [r2, #-4]
   13cb4:	cmp	r3, #1
   13cb8:	blt	13c98 <__assert_fail@plt+0x2694>
   13cbc:	ldr	r3, [r2]
   13cc0:	cmp	r3, #1
   13cc4:	addge	r1, r1, #1
   13cc8:	add	r2, r2, #40	; 0x28
   13ccc:	subs	r0, r0, #1
   13cd0:	bne	13ca4 <__assert_fail@plt+0x26a0>
   13cd4:	b	13d30 <__assert_fail@plt+0x272c>
   13cd8:	and	r2, r7, #1
   13cdc:	mov	r1, #0
   13ce0:	cmp	r7, #1
   13ce4:	mov	r0, r4
   13ce8:	beq	13d1c <__assert_fail@plt+0x2718>
   13cec:	sub	r3, r2, r7
   13cf0:	mov	r1, #0
   13cf4:	mov	r0, r4
   13cf8:	ldr	r6, [r0, #8]
   13cfc:	ldr	r5, [r0, #48]	; 0x30
   13d00:	add	r0, r0, #80	; 0x50
   13d04:	cmp	r6, #2
   13d08:	addcc	r1, r1, #1
   13d0c:	cmp	r5, #2
   13d10:	addcc	r1, r1, #1
   13d14:	adds	r3, r3, #2
   13d18:	bne	13cf8 <__assert_fail@plt+0x26f4>
   13d1c:	movw	r6, #8792	; 0x2258
   13d20:	cmp	r2, #0
   13d24:	mov	r5, #0
   13d28:	movt	r6, #3
   13d2c:	bne	14264 <__assert_fail@plt+0x2c60>
   13d30:	cmp	r1, #0
   13d34:	beq	142ac <__assert_fail@plt+0x2ca8>
   13d38:	cmp	r7, #1
   13d3c:	mov	r0, #256	; 0x100
   13d40:	str	r5, [r8, #120]	; 0x78
   13d44:	str	r5, [r6]
   13d48:	str	r5, [r6, #4]
   13d4c:	strh	r0, [r8, #26]
   13d50:	strb	r5, [r8, #22]
   13d54:	blt	140b4 <__assert_fail@plt+0x2ab0>
   13d58:	mov	r9, #1
   13d5c:	str	r5, [r6, #8]
   13d60:	ldr	r0, [r4, #28]
   13d64:	cmp	r0, #0
   13d68:	bgt	13dac <__assert_fail@plt+0x27a8>
   13d6c:	b	13da0 <__assert_fail@plt+0x279c>
   13d70:	movw	r1, #8504	; 0x2138
   13d74:	add	r0, r9, #1
   13d78:	add	r4, r4, #40	; 0x28
   13d7c:	movt	r1, #3
   13d80:	ldr	r7, [r1, #32]
   13d84:	cmp	r9, r7
   13d88:	mov	r9, r0
   13d8c:	bge	14134 <__assert_fail@plt+0x2b30>
   13d90:	str	r5, [r6, #8]
   13d94:	ldr	r0, [r4, #28]
   13d98:	cmp	r0, #0
   13d9c:	bgt	13dac <__assert_fail@plt+0x27a8>
   13da0:	ldr	r0, [r4, #8]
   13da4:	cmp	r0, #1
   13da8:	bne	13fac <__assert_fail@plt+0x29a8>
   13dac:	strb	r5, [r8, #24]
   13db0:	ldr	r0, [r4, #32]
   13db4:	str	r0, [r8, #116]	; 0x74
   13db8:	mov	r0, r4
   13dbc:	ldr	r1, [r4, #12]
   13dc0:	blx	r1
   13dc4:	cmp	r0, #0
   13dc8:	moveq	r0, r4
   13dcc:	bleq	161b8 <__assert_fail@plt+0x4bb4>
   13dd0:	ldr	r0, [r4, #28]
   13dd4:	ldrb	r1, [r8, #22]
   13dd8:	sub	r2, r0, #1
   13ddc:	str	r2, [r4, #28]
   13de0:	and	r2, sl, #1
   13de4:	orrs	sl, r1, r2
   13de8:	movwne	sl, #1
   13dec:	cmp	r0, #1
   13df0:	bgt	13e7c <__assert_fail@plt+0x2878>
   13df4:	movw	r0, #8504	; 0x2138
   13df8:	movt	r0, #3
   13dfc:	ldr	r7, [r0, #32]
   13e00:	cmp	r7, #0
   13e04:	beq	1427c <__assert_fail@plt+0x2c78>
   13e08:	ldrb	r0, [r8, #1]
   13e0c:	ldr	r3, [r8, #76]	; 0x4c
   13e10:	cmp	r0, #0
   13e14:	beq	13f40 <__assert_fail@plt+0x293c>
   13e18:	and	ip, r7, #1
   13e1c:	mov	r2, #0
   13e20:	cmp	r7, #1
   13e24:	beq	13e54 <__assert_fail@plt+0x2850>
   13e28:	sub	r6, ip, r7
   13e2c:	mov	r2, #0
   13e30:	ldr	r5, [r3, #8]
   13e34:	ldr	r0, [r3, #48]	; 0x30
   13e38:	add	r3, r3, #80	; 0x50
   13e3c:	cmp	r5, #2
   13e40:	addcc	r2, r2, #1
   13e44:	cmp	r0, #2
   13e48:	addcc	r2, r2, #1
   13e4c:	adds	r6, r6, #2
   13e50:	bne	13e30 <__assert_fail@plt+0x282c>
   13e54:	cmp	ip, #0
   13e58:	mov	r5, #0
   13e5c:	beq	13f98 <__assert_fail@plt+0x2994>
   13e60:	ldr	r0, [r3, #8]
   13e64:	cmp	r0, #2
   13e68:	addcc	r2, r2, #1
   13e6c:	movw	r6, #8792	; 0x2258
   13e70:	cmp	r2, #0
   13e74:	movt	r6, #3
   13e78:	beq	14138 <__assert_fail@plt+0x2b34>
   13e7c:	ldrb	r0, [r8, #9]
   13e80:	cmp	r0, #1
   13e84:	bne	13fcc <__assert_fail@plt+0x29c8>
   13e88:	ldr	r0, [r4, #8]
   13e8c:	cmp	r0, #0
   13e90:	beq	13fcc <__assert_fail@plt+0x29c8>
   13e94:	ldrb	r1, [r8, #27]
   13e98:	cmp	r1, #1
   13e9c:	beq	13fc4 <__assert_fail@plt+0x29c0>
   13ea0:	cmp	r0, #3
   13ea4:	beq	13ebc <__assert_fail@plt+0x28b8>
   13ea8:	cmp	r0, #2
   13eac:	bne	13fcc <__assert_fail@plt+0x29c8>
   13eb0:	ldrb	r0, [r8, #24]
   13eb4:	cmp	r0, #1
   13eb8:	bne	13fcc <__assert_fail@plt+0x29c8>
   13ebc:	ldr	r0, [r4, #32]
   13ec0:	str	r0, [r8, #116]	; 0x74
   13ec4:	ldr	r1, [r8, #40]	; 0x28
   13ec8:	cmp	r0, r1
   13ecc:	ble	14088 <__assert_fail@plt+0x2a84>
   13ed0:	ldrb	r3, [r8, #7]
   13ed4:	ldr	r2, [r6]
   13ed8:	sub	r5, r0, r1
   13edc:	cmp	r3, #0
   13ee0:	bne	14010 <__assert_fail@plt+0x2a0c>
   13ee4:	cmp	r5, r2
   13ee8:	ble	14074 <__assert_fail@plt+0x2a70>
   13eec:	add	r1, r2, r1
   13ef0:	sub	r6, r1, r0
   13ef4:	movw	r0, #8652	; 0x21cc
   13ef8:	movt	r0, #3
   13efc:	ldr	r0, [r0]
   13f00:	ldr	r1, [r0, #20]
   13f04:	ldr	r2, [r0, #24]
   13f08:	cmp	r1, r2
   13f0c:	bcs	13f2c <__assert_fail@plt+0x2928>
   13f10:	add	r2, r1, #1
   13f14:	str	r2, [r0, #20]
   13f18:	mov	r0, #32
   13f1c:	strb	r0, [r1]
   13f20:	adds	r6, r6, #1
   13f24:	bcc	13ef4 <__assert_fail@plt+0x28f0>
   13f28:	b	14074 <__assert_fail@plt+0x2a70>
   13f2c:	mov	r1, #32
   13f30:	bl	11568 <__overflow@plt>
   13f34:	adds	r6, r6, #1
   13f38:	bcc	13ef4 <__assert_fail@plt+0x28f0>
   13f3c:	b	14074 <__assert_fail@plt+0x2a70>
   13f40:	add	r3, r3, #28
   13f44:	mov	r2, #0
   13f48:	mov	r0, r7
   13f4c:	ldr	r6, [r3, #-20]	; 0xffffffec
   13f50:	cmp	r6, #2
   13f54:	bcs	13f74 <__assert_fail@plt+0x2970>
   13f58:	add	r2, r2, #1
   13f5c:	add	r3, r3, #40	; 0x28
   13f60:	subs	r0, r0, #1
   13f64:	beq	13f98 <__assert_fail@plt+0x2994>
   13f68:	ldr	r6, [r3, #-20]	; 0xffffffec
   13f6c:	cmp	r6, #2
   13f70:	bcc	13f58 <__assert_fail@plt+0x2954>
   13f74:	ldr	r6, [r3, #-4]
   13f78:	cmp	r6, #1
   13f7c:	blt	13f5c <__assert_fail@plt+0x2958>
   13f80:	ldr	r6, [r3]
   13f84:	cmp	r6, #1
   13f88:	addge	r2, r2, #1
   13f8c:	add	r3, r3, #40	; 0x28
   13f90:	subs	r0, r0, #1
   13f94:	bne	13f68 <__assert_fail@plt+0x2964>
   13f98:	movw	r6, #8792	; 0x2258
   13f9c:	cmp	r2, #0
   13fa0:	movt	r6, #3
   13fa4:	bne	13e7c <__assert_fail@plt+0x2878>
   13fa8:	b	14138 <__assert_fail@plt+0x2b34>
   13fac:	ldrb	r0, [r8, #9]
   13fb0:	cmp	r0, #1
   13fb4:	bne	13fcc <__assert_fail@plt+0x29c8>
   13fb8:	ldrb	r0, [r8, #27]
   13fbc:	cmp	r0, #1
   13fc0:	bne	13fe8 <__assert_fail@plt+0x29e4>
   13fc4:	mov	r0, #1
   13fc8:	strb	r0, [r8, #26]
   13fcc:	ldrb	r0, [r8, #13]
   13fd0:	cmp	r0, #1
   13fd4:	bne	13d70 <__assert_fail@plt+0x276c>
   13fd8:	ldr	r0, [r6, #4]
   13fdc:	add	r0, r0, #1
   13fe0:	str	r0, [r6, #4]
   13fe4:	b	13d70 <__assert_fail@plt+0x276c>
   13fe8:	ldr	r0, [r4, #32]
   13fec:	str	r0, [r8, #116]	; 0x74
   13ff0:	ldr	r1, [r8, #40]	; 0x28
   13ff4:	cmp	r0, r1
   13ff8:	ble	14088 <__assert_fail@plt+0x2a84>
   13ffc:	ldrb	r3, [r8, #7]
   14000:	ldr	r2, [r6]
   14004:	sub	r5, r0, r1
   14008:	cmp	r3, #0
   1400c:	beq	1401c <__assert_fail@plt+0x2a18>
   14010:	sub	r0, r5, r2
   14014:	str	r0, [r8, #120]	; 0x78
   14018:	b	14080 <__assert_fail@plt+0x2a7c>
   1401c:	cmp	r5, r2
   14020:	ble	14074 <__assert_fail@plt+0x2a70>
   14024:	add	r1, r2, r1
   14028:	sub	r6, r1, r0
   1402c:	movw	r0, #8652	; 0x21cc
   14030:	movt	r0, #3
   14034:	ldr	r0, [r0]
   14038:	ldr	r1, [r0, #20]
   1403c:	ldr	r2, [r0, #24]
   14040:	cmp	r1, r2
   14044:	bcs	14064 <__assert_fail@plt+0x2a60>
   14048:	add	r2, r1, #1
   1404c:	str	r2, [r0, #20]
   14050:	mov	r0, #32
   14054:	strb	r0, [r1]
   14058:	adds	r6, r6, #1
   1405c:	bcc	1402c <__assert_fail@plt+0x2a28>
   14060:	b	14074 <__assert_fail@plt+0x2a70>
   14064:	mov	r1, #32
   14068:	bl	11568 <__overflow@plt>
   1406c:	adds	r6, r6, #1
   14070:	bcc	1402c <__assert_fail@plt+0x2a28>
   14074:	movw	r6, #8792	; 0x2258
   14078:	movt	r6, #3
   1407c:	str	r5, [r6]
   14080:	mov	r5, #0
   14084:	str	r5, [r8, #116]	; 0x74
   14088:	ldrb	r0, [r8, #13]
   1408c:	cmp	r0, #1
   14090:	bleq	15a7c <__assert_fail@plt+0x4478>
   14094:	ldrb	r0, [r4, #36]	; 0x24
   14098:	cmp	r0, #0
   1409c:	movne	r0, r4
   140a0:	blne	16060 <__assert_fail@plt+0x4a5c>
   140a4:	ldrb	r0, [r8, #13]
   140a8:	cmp	r0, #1
   140ac:	bne	13d70 <__assert_fail@plt+0x276c>
   140b0:	b	13fd8 <__assert_fail@plt+0x29d4>
   140b4:	ldr	r4, [sp, #24]
   140b8:	cmp	r7, #0
   140bc:	beq	141e8 <__assert_fail@plt+0x2be4>
   140c0:	ldrb	r0, [r8, #1]
   140c4:	ldr	r2, [r8, #76]	; 0x4c
   140c8:	cmp	r0, #0
   140cc:	beq	1418c <__assert_fail@plt+0x2b88>
   140d0:	and	r3, r7, #1
   140d4:	mov	r1, #0
   140d8:	cmp	r7, #1
   140dc:	beq	1410c <__assert_fail@plt+0x2b08>
   140e0:	sub	r0, r3, r7
   140e4:	mov	r1, #0
   140e8:	ldr	r7, [r2, #8]
   140ec:	ldr	r6, [r2, #48]	; 0x30
   140f0:	add	r2, r2, #80	; 0x50
   140f4:	cmp	r7, #2
   140f8:	addcc	r1, r1, #1
   140fc:	cmp	r6, #2
   14100:	addcc	r1, r1, #1
   14104:	adds	r0, r0, #2
   14108:	bne	140e8 <__assert_fail@plt+0x2ae4>
   1410c:	movw	r6, #8792	; 0x2258
   14110:	cmp	r3, #0
   14114:	movt	r6, #3
   14118:	beq	141e0 <__assert_fail@plt+0x2bdc>
   1411c:	ldr	r0, [r2, #8]
   14120:	cmp	r0, #2
   14124:	addcc	r1, r1, #1
   14128:	cmp	r1, #0
   1412c:	bne	141f4 <__assert_fail@plt+0x2bf0>
   14130:	b	141e8 <__assert_fail@plt+0x2be4>
   14134:	ldrb	r1, [r8, #22]
   14138:	ldr	r4, [sp, #24]
   1413c:	cmp	r1, #0
   14140:	mov	r9, #10
   14144:	beq	14180 <__assert_fail@plt+0x2b7c>
   14148:	movw	r0, #8652	; 0x21cc
   1414c:	movt	r0, #3
   14150:	ldr	r0, [r0]
   14154:	ldr	r1, [r0, #20]
   14158:	ldr	r2, [r0, #24]
   1415c:	cmp	r1, r2
   14160:	bcs	142a0 <__assert_fail@plt+0x2c9c>
   14164:	add	r2, r1, #1
   14168:	str	r2, [r0, #20]
   1416c:	strb	r9, [r1]
   14170:	movw	r0, #8504	; 0x2138
   14174:	sub	r4, r4, #1
   14178:	movt	r0, #3
   1417c:	ldr	r7, [r0, #32]
   14180:	cmp	r7, #0
   14184:	bne	140c0 <__assert_fail@plt+0x2abc>
   14188:	b	141e8 <__assert_fail@plt+0x2be4>
   1418c:	add	r2, r2, #28
   14190:	mov	r1, #0
   14194:	ldr	r0, [r2, #-20]	; 0xffffffec
   14198:	cmp	r0, #2
   1419c:	bcs	141bc <__assert_fail@plt+0x2bb8>
   141a0:	add	r1, r1, #1
   141a4:	add	r2, r2, #40	; 0x28
   141a8:	subs	r7, r7, #1
   141ac:	beq	141e0 <__assert_fail@plt+0x2bdc>
   141b0:	ldr	r0, [r2, #-20]	; 0xffffffec
   141b4:	cmp	r0, #2
   141b8:	bcc	141a0 <__assert_fail@plt+0x2b9c>
   141bc:	ldr	r0, [r2, #-4]
   141c0:	cmp	r0, #1
   141c4:	blt	141a4 <__assert_fail@plt+0x2ba0>
   141c8:	ldr	r0, [r2]
   141cc:	cmp	r0, #1
   141d0:	addge	r1, r1, #1
   141d4:	add	r2, r2, #40	; 0x28
   141d8:	subs	r7, r7, #1
   141dc:	bne	141b0 <__assert_fail@plt+0x2bac>
   141e0:	cmp	r1, #0
   141e4:	bne	141f4 <__assert_fail@plt+0x2bf0>
   141e8:	ldrb	r0, [r8, #14]
   141ec:	cmp	r0, #0
   141f0:	bne	142b0 <__assert_fail@plt+0x2cac>
   141f4:	ldrb	r0, [r8, #4]
   141f8:	and	r0, sl, r0
   141fc:	tst	r0, #1
   14200:	beq	14230 <__assert_fail@plt+0x2c2c>
   14204:	movw	r0, #8652	; 0x21cc
   14208:	movt	r0, #3
   1420c:	ldr	r0, [r0]
   14210:	ldr	r1, [r0, #20]
   14214:	ldr	r2, [r0, #24]
   14218:	cmp	r1, r2
   1421c:	bcs	14294 <__assert_fail@plt+0x2c90>
   14220:	add	r2, r1, #1
   14224:	str	r2, [r0, #20]
   14228:	strb	r9, [r1]
   1422c:	sub	r4, r4, #1
   14230:	cmp	r4, #1
   14234:	blt	142b0 <__assert_fail@plt+0x2cac>
   14238:	movw	r0, #8504	; 0x2138
   1423c:	movt	r0, #3
   14240:	ldr	r7, [r0, #32]
   14244:	cmp	r7, #0
   14248:	beq	142b8 <__assert_fail@plt+0x2cb4>
   1424c:	str	r4, [sp, #24]
   14250:	ldrb	r1, [r8, #1]
   14254:	ldr	r4, [r8, #76]	; 0x4c
   14258:	tst	r1, #1
   1425c:	beq	13c7c <__assert_fail@plt+0x2678>
   14260:	b	13cd8 <__assert_fail@plt+0x26d4>
   14264:	ldr	r0, [r0, #8]
   14268:	cmp	r0, #2
   1426c:	addcc	r1, r1, #1
   14270:	cmp	r1, #0
   14274:	bne	13d38 <__assert_fail@plt+0x2734>
   14278:	b	142ac <__assert_fail@plt+0x2ca8>
   1427c:	mov	r7, #0
   14280:	ldr	r4, [sp, #24]
   14284:	cmp	r1, #0
   14288:	mov	r9, #10
   1428c:	bne	14148 <__assert_fail@plt+0x2b44>
   14290:	b	14180 <__assert_fail@plt+0x2b7c>
   14294:	mov	r1, #10
   14298:	bl	11568 <__overflow@plt>
   1429c:	b	1422c <__assert_fail@plt+0x2c28>
   142a0:	mov	r1, #10
   142a4:	bl	11568 <__overflow@plt>
   142a8:	b	14170 <__assert_fail@plt+0x2b6c>
   142ac:	ldr	r4, [sp, #24]
   142b0:	cmp	r4, #0
   142b4:	beq	1431c <__assert_fail@plt+0x2d18>
   142b8:	ands	r0, sl, #1
   142bc:	strb	r0, [r8, #22]
   142c0:	beq	142d0 <__assert_fail@plt+0x2ccc>
   142c4:	ldrb	r0, [r8, #14]
   142c8:	cmp	r0, #0
   142cc:	beq	14394 <__assert_fail@plt+0x2d90>
   142d0:	ldrb	r0, [r8, #15]
   142d4:	cmp	r0, #1
   142d8:	bne	14434 <__assert_fail@plt+0x2e30>
   142dc:	ldrb	r0, [r8, #25]
   142e0:	cmp	r0, #1
   142e4:	bne	14434 <__assert_fail@plt+0x2e30>
   142e8:	movw	r0, #8652	; 0x21cc
   142ec:	movt	r0, #3
   142f0:	ldr	r0, [r0]
   142f4:	ldr	r1, [r0, #20]
   142f8:	ldr	r2, [r0, #24]
   142fc:	cmp	r1, r2
   14300:	bcs	14420 <__assert_fail@plt+0x2e1c>
   14304:	add	r2, r1, #1
   14308:	str	r2, [r0, #20]
   1430c:	mov	r0, #12
   14310:	strb	r0, [r1]
   14314:	strb	r5, [r8, #25]
   14318:	b	14434 <__assert_fail@plt+0x2e30>
   1431c:	movw	r0, #8504	; 0x2138
   14320:	movt	r0, #3
   14324:	ldr	r2, [r0, #32]
   14328:	cmp	r2, #1
   1432c:	blt	142b8 <__assert_fail@plt+0x2cb4>
   14330:	ldr	r0, [r8, #76]	; 0x4c
   14334:	and	r1, r2, #1
   14338:	beq	1436c <__assert_fail@plt+0x2d68>
   1433c:	sub	r2, r1, r2
   14340:	ldr	r3, [r0, #8]
   14344:	cmp	r3, #0
   14348:	moveq	r3, #1
   1434c:	strbeq	r3, [r0, #37]	; 0x25
   14350:	ldr	r3, [r0, #48]	; 0x30
   14354:	cmp	r3, #0
   14358:	moveq	r3, #1
   1435c:	strbeq	r3, [r0, #77]	; 0x4d
   14360:	adds	r2, r2, #2
   14364:	add	r0, r0, #80	; 0x50
   14368:	bne	14340 <__assert_fail@plt+0x2d3c>
   1436c:	cmp	r1, #0
   14370:	beq	142b8 <__assert_fail@plt+0x2cb4>
   14374:	ldr	r1, [r0, #8]
   14378:	cmp	r1, #0
   1437c:	moveq	r1, #1
   14380:	strbeq	r1, [r0, #37]	; 0x25
   14384:	ands	r0, sl, #1
   14388:	strb	r0, [r8, #22]
   1438c:	bne	142c4 <__assert_fail@plt+0x2cc0>
   14390:	b	142d0 <__assert_fail@plt+0x2ccc>
   14394:	ldrb	r0, [r8, #6]
   14398:	cmp	r0, #0
   1439c:	beq	143d0 <__assert_fail@plt+0x2dcc>
   143a0:	movw	r0, #8652	; 0x21cc
   143a4:	movt	r0, #3
   143a8:	ldr	r0, [r0]
   143ac:	ldr	r1, [r0, #20]
   143b0:	ldr	r2, [r0, #24]
   143b4:	cmp	r1, r2
   143b8:	bcs	1442c <__assert_fail@plt+0x2e28>
   143bc:	add	r2, r1, #1
   143c0:	str	r2, [r0, #20]
   143c4:	mov	r0, #12
   143c8:	strb	r0, [r1]
   143cc:	b	14434 <__assert_fail@plt+0x2e30>
   143d0:	adds	r4, r4, #5
   143d4:	beq	14434 <__assert_fail@plt+0x2e30>
   143d8:	movw	r0, #8652	; 0x21cc
   143dc:	movt	r0, #3
   143e0:	ldr	r0, [r0]
   143e4:	ldr	r1, [r0, #20]
   143e8:	ldr	r2, [r0, #24]
   143ec:	cmp	r1, r2
   143f0:	bcs	1440c <__assert_fail@plt+0x2e08>
   143f4:	add	r2, r1, #1
   143f8:	str	r2, [r0, #20]
   143fc:	strb	r9, [r1]
   14400:	subs	r4, r4, #1
   14404:	bne	143d8 <__assert_fail@plt+0x2dd4>
   14408:	b	14434 <__assert_fail@plt+0x2e30>
   1440c:	mov	r1, #10
   14410:	bl	11568 <__overflow@plt>
   14414:	subs	r4, r4, #1
   14418:	bne	143d8 <__assert_fail@plt+0x2dd4>
   1441c:	b	14434 <__assert_fail@plt+0x2e30>
   14420:	mov	r1, #12
   14424:	bl	11568 <__overflow@plt>
   14428:	b	14314 <__assert_fail@plt+0x2d10>
   1442c:	mov	r1, #12
   14430:	bl	11568 <__overflow@plt>
   14434:	movw	r2, #8504	; 0x2138
   14438:	ldrd	r0, [r6, #24]
   1443c:	movt	r2, #3
   14440:	ldrd	r2, [r2, #40]	; 0x28
   14444:	adds	r0, r0, #1
   14448:	adc	r1, r1, #0
   1444c:	strd	r0, [r6, #24]
   14450:	subs	r0, r2, r0
   14454:	sbcs	r0, r3, r1
   14458:	bcc	144e4 <__assert_fail@plt+0x2ee0>
   1445c:	movw	r0, #8504	; 0x2138
   14460:	ldr	r4, [r8, #76]	; 0x4c
   14464:	movt	r0, #3
   14468:	ldr	r7, [r0, #32]
   1446c:	cmp	r7, #0
   14470:	beq	144bc <__assert_fail@plt+0x2eb8>
   14474:	add	r0, r4, #8
   14478:	mov	r1, r7
   1447c:	ldr	r2, [r0]
   14480:	cmp	r2, #2
   14484:	beq	144a0 <__assert_fail@plt+0x2e9c>
   14488:	add	r0, r0, #40	; 0x28
   1448c:	subs	r1, r1, #1
   14490:	beq	144bc <__assert_fail@plt+0x2eb8>
   14494:	ldr	r2, [r0]
   14498:	cmp	r2, #2
   1449c:	bne	14488 <__assert_fail@plt+0x2e84>
   144a0:	str	r5, [r0]
   144a4:	ldr	r2, [r8, #80]	; 0x50
   144a8:	add	r2, r2, #1
   144ac:	str	r2, [r8, #80]	; 0x50
   144b0:	add	r0, r0, #40	; 0x28
   144b4:	subs	r1, r1, #1
   144b8:	bne	14494 <__assert_fail@plt+0x2e90>
   144bc:	ldrb	r1, [r8, #1]
   144c0:	cmp	r1, #0
   144c4:	bne	13830 <__assert_fail@plt+0x222c>
   144c8:	ldr	r0, [r4, #8]
   144cc:	subs	r0, r0, #3
   144d0:	movwne	r0, #1
   144d4:	str	r0, [r8, #80]	; 0x50
   144d8:	tst	r1, #1
   144dc:	bne	13838 <__assert_fail@plt+0x2234>
   144e0:	b	138b4 <__assert_fail@plt+0x22b0>
   144e4:	sub	sp, fp, #28
   144e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144ec:	strb	r0, [r4, #36]	; 0x24
   144f0:	str	ip, [r4, #12]
   144f4:	str	sl, [r4, #16]
   144f8:	str	r2, [r4, #32]
   144fc:	add	r3, r4, #40	; 0x28
   14500:	mov	r2, #0
   14504:	cmp	r7, #2
   14508:	beq	137c0 <__assert_fail@plt+0x21bc>
   1450c:	and	r0, r9, #1
   14510:	mov	r6, #2
   14514:	mov	r2, #0
   14518:	add	r6, r6, #1
   1451c:	strb	r0, [r3, #36]	; 0x24
   14520:	str	ip, [r3, #12]
   14524:	str	sl, [r3, #16]
   14528:	str	r2, [r3, #32]
   1452c:	add	r3, r3, #40	; 0x28
   14530:	cmp	r7, r6
   14534:	bne	14518 <__assert_fail@plt+0x2f14>
   14538:	b	137c0 <__assert_fail@plt+0x21bc>
   1453c:	mov	r0, #0
   14540:	add	r3, r4, #40	; 0x28
   14544:	cmp	r7, #2
   14548:	strb	r0, [r4, #36]	; 0x24
   1454c:	str	ip, [r4, #12]
   14550:	str	sl, [r4, #16]
   14554:	str	r2, [r4, #32]
   14558:	bne	14570 <__assert_fail@plt+0x2f6c>
   1455c:	mov	r0, r7
   14560:	mov	r2, #0
   14564:	cmp	r1, #0
   14568:	beq	13760 <__assert_fail@plt+0x215c>
   1456c:	b	137cc <__assert_fail@plt+0x21c8>
   14570:	mov	r0, #2
   14574:	mov	r2, #0
   14578:	add	r0, r0, #1
   1457c:	strb	r2, [r3, #36]	; 0x24
   14580:	str	ip, [r3, #12]
   14584:	str	sl, [r3, #16]
   14588:	str	r2, [r3, #32]
   1458c:	add	r3, r3, #40	; 0x28
   14590:	cmp	r7, r0
   14594:	bne	14578 <__assert_fail@plt+0x2f74>
   14598:	b	137c0 <__assert_fail@plt+0x21bc>
   1459c:	movw	r1, #3085	; 0xc0d
   145a0:	mov	r0, #0
   145a4:	mov	r2, #5
   145a8:	movt	r1, #2
   145ac:	bl	1137c <dcgettext@plt>
   145b0:	mov	r2, r0
   145b4:	mov	r0, #1
   145b8:	mov	r1, #0
   145bc:	bl	11418 <error@plt>
   145c0:	push	{fp, lr}
   145c4:	mov	fp, sp
   145c8:	movw	r1, #3007	; 0xbbf
   145cc:	mov	r0, #0
   145d0:	mov	r2, #5
   145d4:	movt	r1, #2
   145d8:	bl	1137c <dcgettext@plt>
   145dc:	mov	r2, r0
   145e0:	mov	r0, #1
   145e4:	mov	r1, #0
   145e8:	bl	11418 <error@plt>
   145ec:	push	{r4, r5, r6, sl, fp, lr}
   145f0:	add	fp, sp, #16
   145f4:	mov	r5, r1
   145f8:	movw	r1, #5537	; 0x15a1
   145fc:	mov	r4, r0
   14600:	movt	r1, #2
   14604:	bl	112ec <strcmp@plt>
   14608:	cmp	r0, #0
   1460c:	beq	14664 <__assert_fail@plt+0x3060>
   14610:	movw	r1, #64012	; 0xfa0c
   14614:	mov	r0, r4
   14618:	str	r4, [r5, #4]
   1461c:	movt	r1, #1
   14620:	bl	16550 <__assert_fail@plt+0x4f4c>
   14624:	str	r0, [r5]
   14628:	cmp	r0, #0
   1462c:	beq	146a4 <__assert_fail@plt+0x30a0>
   14630:	mov	r1, #2
   14634:	bl	1641c <__assert_fail@plt+0x4e18>
   14638:	mov	r0, #0
   1463c:	strb	r0, [r5, #37]	; 0x25
   14640:	str	r0, [r5, #8]
   14644:	movw	r0, #8664	; 0x21d8
   14648:	mov	r5, #1
   1464c:	movt	r0, #3
   14650:	ldr	r1, [r0, #72]	; 0x48
   14654:	add	r1, r1, #1
   14658:	str	r1, [r0, #72]	; 0x48
   1465c:	mov	r0, r5
   14660:	pop	{r4, r5, r6, sl, fp, pc}
   14664:	movw	r1, #64350	; 0xfb5e
   14668:	mov	r0, #0
   1466c:	mov	r2, #5
   14670:	movt	r1, #1
   14674:	bl	1137c <dcgettext@plt>
   14678:	str	r0, [r5, #4]
   1467c:	movw	r0, #8648	; 0x21c8
   14680:	movw	r1, #8664	; 0x21d8
   14684:	mov	r2, #1
   14688:	movt	r0, #3
   1468c:	movt	r1, #3
   14690:	ldr	r0, [r0]
   14694:	str	r0, [r5]
   14698:	strb	r2, [r1, #19]
   1469c:	cmp	r0, #0
   146a0:	bne	14630 <__assert_fail@plt+0x302c>
   146a4:	movw	r0, #8664	; 0x21d8
   146a8:	mov	r1, #1
   146ac:	mov	r5, #0
   146b0:	movt	r0, #3
   146b4:	strb	r1, [r0, #20]
   146b8:	ldrb	r0, [r0, #12]
   146bc:	cmp	r0, #0
   146c0:	beq	146cc <__assert_fail@plt+0x30c8>
   146c4:	mov	r0, r5
   146c8:	pop	{r4, r5, r6, sl, fp, pc}
   146cc:	bl	114e4 <__errno_location@plt>
   146d0:	ldr	r6, [r0]
   146d4:	mov	r0, #0
   146d8:	mov	r1, #3
   146dc:	mov	r2, r4
   146e0:	mov	r5, #0
   146e4:	bl	1a7bc <__assert_fail@plt+0x91b8>
   146e8:	movw	r2, #4247	; 0x1097
   146ec:	mov	r3, r0
   146f0:	mov	r0, #0
   146f4:	mov	r1, r6
   146f8:	movt	r2, #2
   146fc:	bl	11418 <error@plt>
   14700:	mov	r0, r5
   14704:	pop	{r4, r5, r6, sl, fp, pc}
   14708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1470c:	add	fp, sp, #28
   14710:	sub	sp, sp, #196	; 0xc4
   14714:	mov	r9, r1
   14718:	movw	r1, #5537	; 0x15a1
   1471c:	mov	r4, r0
   14720:	movt	r1, #2
   14724:	bl	112ec <strcmp@plt>
   14728:	cmp	r0, #0
   1472c:	mvneq	r9, #0
   14730:	cmp	r9, #0
   14734:	bmi	14754 <__assert_fail@plt+0x3150>
   14738:	add	r6, sp, #88	; 0x58
   1473c:	mov	r0, #3
   14740:	mov	r1, r9
   14744:	mov	r2, r6
   14748:	bl	113d0 <__fxstat64@plt>
   1474c:	cmp	r0, #0
   14750:	beq	1477c <__assert_fail@plt+0x3178>
   14754:	movw	r0, #8792	; 0x2258
   14758:	movt	r0, #3
   1475c:	mov	r6, r0
   14760:	ldr	r1, [r6, #32]!
   14764:	cmp	r1, #0
   14768:	bne	14780 <__assert_fail@plt+0x317c>
   1476c:	add	r6, r0, #32
   14770:	mov	r0, r6
   14774:	bl	166d0 <__assert_fail@plt+0x50cc>
   14778:	b	14780 <__assert_fail@plt+0x317c>
   1477c:	add	r6, r6, #80	; 0x50
   14780:	ldm	r6, {r0, r5}
   14784:	movw	sl, #8664	; 0x21d8
   14788:	add	r1, sp, #80	; 0x50
   1478c:	add	r2, sp, #36	; 0x24
   14790:	str	r5, [sp, #84]	; 0x54
   14794:	movt	sl, #3
   14798:	str	r0, [sp, #80]	; 0x50
   1479c:	ldr	r0, [sl, #44]	; 0x2c
   147a0:	bl	1abe4 <__assert_fail@plt+0x95e0>
   147a4:	cmp	r0, #0
   147a8:	beq	147fc <__assert_fail@plt+0x31f8>
   147ac:	ldr	r0, [sl, #44]	; 0x2c
   147b0:	ldr	r2, [sl, #28]
   147b4:	add	r8, sp, #36	; 0x24
   147b8:	mvn	r1, #0
   147bc:	mov	r3, r8
   147c0:	stm	sp, {r0, r5}
   147c4:	mov	r0, #0
   147c8:	bl	16e50 <__assert_fail@plt+0x584c>
   147cc:	add	r7, r0, #1
   147d0:	mov	r0, r7
   147d4:	bl	1b984 <__assert_fail@plt+0xa380>
   147d8:	mov	r6, r0
   147dc:	ldr	r0, [sl, #44]	; 0x2c
   147e0:	ldr	r2, [sl, #28]
   147e4:	mov	r1, r7
   147e8:	mov	r3, r8
   147ec:	stm	sp, {r0, r5}
   147f0:	mov	r0, r6
   147f4:	bl	16e50 <__assert_fail@plt+0x584c>
   147f8:	b	14834 <__assert_fail@plt+0x3230>
   147fc:	mov	r0, #33	; 0x21
   14800:	bl	1b984 <__assert_fail@plt+0xa380>
   14804:	mov	r6, r0
   14808:	ldr	r0, [sp, #80]	; 0x50
   1480c:	add	r2, sp, #15
   14810:	asr	r1, r0, #31
   14814:	bl	16760 <__assert_fail@plt+0x515c>
   14818:	movw	r3, #3111	; 0xc27
   1481c:	stm	sp, {r0, r5}
   14820:	mov	r0, r6
   14824:	mov	r1, #1
   14828:	mov	r2, #33	; 0x21
   1482c:	movt	r3, #2
   14830:	bl	114f0 <__sprintf_chk@plt>
   14834:	ldr	r0, [sl, #84]	; 0x54
   14838:	bl	16600 <__assert_fail@plt+0x4ffc>
   1483c:	movw	r0, #3108	; 0xc24
   14840:	cmp	r9, #0
   14844:	mov	r1, #0
   14848:	movt	r0, #2
   1484c:	movmi	r4, r0
   14850:	ldr	r0, [sl, #32]
   14854:	str	r6, [sl, #84]	; 0x54
   14858:	cmp	r0, #0
   1485c:	movne	r4, r0
   14860:	movw	r0, #8504	; 0x2138
   14864:	movt	r0, #3
   14868:	str	r4, [sl, #88]	; 0x58
   1486c:	ldr	r4, [r0, #28]
   14870:	mov	r0, r6
   14874:	bl	16820 <__assert_fail@plt+0x521c>
   14878:	sub	r4, r4, r0
   1487c:	ldr	r0, [sl, #88]	; 0x58
   14880:	mov	r1, #0
   14884:	bl	16820 <__assert_fail@plt+0x521c>
   14888:	sub	r0, r4, r0
   1488c:	str	r0, [sl, #92]	; 0x5c
   14890:	sub	sp, fp, #28
   14894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14898:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1489c:	add	fp, sp, #24
   148a0:	ldr	r6, [r0]
   148a4:	mov	r8, r1
   148a8:	mov	r5, r0
   148ac:	ldmib	r6, {r0, r1}
   148b0:	cmp	r0, r1
   148b4:	bcs	14938 <__assert_fail@plt+0x3334>
   148b8:	add	r1, r0, #1
   148bc:	str	r1, [r6, #4]
   148c0:	ldrb	r0, [r0]
   148c4:	cmp	r0, #12
   148c8:	bne	14948 <__assert_fail@plt+0x3344>
   148cc:	ldrb	r0, [r5, #37]	; 0x25
   148d0:	cmp	r0, #0
   148d4:	beq	14924 <__assert_fail@plt+0x3320>
   148d8:	ldmib	r6, {r0, r1}
   148dc:	cmp	r0, r1
   148e0:	bcs	14b70 <__assert_fail@plt+0x356c>
   148e4:	add	r1, r0, #1
   148e8:	str	r1, [r6, #4]
   148ec:	ldrb	r0, [r0]
   148f0:	cmp	r0, #10
   148f4:	bne	14910 <__assert_fail@plt+0x330c>
   148f8:	ldmib	r6, {r0, r1}
   148fc:	cmp	r0, r1
   14900:	bcs	14b84 <__assert_fail@plt+0x3580>
   14904:	add	r1, r0, #1
   14908:	str	r1, [r6, #4]
   1490c:	ldrb	r0, [r0]
   14910:	mov	r7, #0
   14914:	cmp	r0, #12
   14918:	strb	r7, [r5, #37]	; 0x25
   1491c:	beq	1492c <__assert_fail@plt+0x3328>
   14920:	b	14950 <__assert_fail@plt+0x334c>
   14924:	mov	r0, #0
   14928:	strb	r0, [r5, #37]	; 0x25
   1492c:	mov	r7, #1
   14930:	mov	r0, #12
   14934:	b	14950 <__assert_fail@plt+0x334c>
   14938:	mov	r0, r6
   1493c:	bl	1155c <__uflow@plt>
   14940:	cmp	r0, #12
   14944:	beq	148cc <__assert_fail@plt+0x32c8>
   14948:	mov	r7, #0
   1494c:	strb	r7, [r5, #37]	; 0x25
   14950:	movw	r4, #8664	; 0x21d8
   14954:	movt	r4, #3
   14958:	ldrb	r1, [r4, #21]
   1495c:	strb	r1, [r5, #37]	; 0x25
   14960:	cmn	r0, #1
   14964:	beq	149ac <__assert_fail@plt+0x33a8>
   14968:	cmp	r0, #10
   1496c:	beq	149b4 <__assert_fail@plt+0x33b0>
   14970:	cmp	r0, #12
   14974:	beq	149c4 <__assert_fail@plt+0x33c0>
   14978:	ldmib	r6, {r0, r1}
   1497c:	cmp	r0, r1
   14980:	bcs	1499c <__assert_fail@plt+0x3398>
   14984:	add	r1, r0, #1
   14988:	str	r1, [r6, #4]
   1498c:	ldrb	r0, [r0]
   14990:	cmn	r0, #1
   14994:	bne	14968 <__assert_fail@plt+0x3364>
   14998:	b	149ac <__assert_fail@plt+0x33a8>
   1499c:	mov	r0, r6
   149a0:	bl	1155c <__uflow@plt>
   149a4:	cmn	r0, #1
   149a8:	bne	14968 <__assert_fail@plt+0x3364>
   149ac:	mov	r0, r5
   149b0:	bl	14ba0 <__assert_fail@plt+0x359c>
   149b4:	ldrb	r0, [r4, #11]
   149b8:	cmp	r0, #0
   149bc:	beq	14b2c <__assert_fail@plt+0x3528>
   149c0:	b	14b58 <__assert_fail@plt+0x3554>
   149c4:	ldrb	r0, [r4, #21]
   149c8:	cmp	r0, #1
   149cc:	bne	14a5c <__assert_fail@plt+0x3458>
   149d0:	ldrb	r0, [r4, #9]
   149d4:	cmp	r0, #0
   149d8:	beq	149f4 <__assert_fail@plt+0x33f0>
   149dc:	mov	r0, #0
   149e0:	strb	r0, [r5, #37]	; 0x25
   149e4:	ldmib	r6, {r0, r1}
   149e8:	cmp	r0, r1
   149ec:	bcc	14a68 <__assert_fail@plt+0x3464>
   149f0:	b	14b5c <__assert_fail@plt+0x3558>
   149f4:	movw	r0, #8504	; 0x2138
   149f8:	movt	r0, #3
   149fc:	ldr	r0, [r0, #32]
   14a00:	cmp	r0, #0
   14a04:	beq	14a5c <__assert_fail@plt+0x3458>
   14a08:	ldr	r1, [r4, #76]	; 0x4c
   14a0c:	ands	r3, r0, #3
   14a10:	sub	ip, r0, #1
   14a14:	beq	14a30 <__assert_fail@plt+0x342c>
   14a18:	mov	r2, #0
   14a1c:	strb	r2, [r1, #37]	; 0x25
   14a20:	subs	r3, r3, #1
   14a24:	sub	r0, r0, #1
   14a28:	add	r1, r1, #40	; 0x28
   14a2c:	bne	14a1c <__assert_fail@plt+0x3418>
   14a30:	cmp	ip, #3
   14a34:	bcc	14a5c <__assert_fail@plt+0x3458>
   14a38:	add	r1, r1, #117	; 0x75
   14a3c:	mov	r2, #0
   14a40:	strb	r2, [r1, #40]	; 0x28
   14a44:	strb	r2, [r1]
   14a48:	strb	r2, [r1, #-40]	; 0xffffffd8
   14a4c:	strb	r2, [r1, #-80]	; 0xffffffb0
   14a50:	add	r1, r1, #160	; 0xa0
   14a54:	subs	r0, r0, #4
   14a58:	bne	14a40 <__assert_fail@plt+0x343c>
   14a5c:	ldmib	r6, {r0, r1}
   14a60:	cmp	r0, r1
   14a64:	bcs	14b5c <__assert_fail@plt+0x3558>
   14a68:	add	r1, r0, #1
   14a6c:	str	r1, [r6, #4]
   14a70:	ldrb	r0, [r0]
   14a74:	cmp	r0, #10
   14a78:	beq	14a84 <__assert_fail@plt+0x3480>
   14a7c:	mov	r1, r6
   14a80:	bl	114d8 <ungetc@plt>
   14a84:	ldrb	r0, [r4, #9]
   14a88:	cmp	r0, #0
   14a8c:	beq	14a9c <__assert_fail@plt+0x3498>
   14a90:	mov	r0, #2
   14a94:	str	r0, [r5, #8]
   14a98:	b	14b0c <__assert_fail@plt+0x3508>
   14a9c:	movw	r0, #8504	; 0x2138
   14aa0:	movt	r0, #3
   14aa4:	ldr	r0, [r0, #32]
   14aa8:	cmp	r0, #0
   14aac:	beq	14b0c <__assert_fail@plt+0x3508>
   14ab0:	ldrb	r2, [r4, #1]
   14ab4:	mov	r1, #1
   14ab8:	sub	r3, r0, #1
   14abc:	cmp	r2, #0
   14ac0:	ldr	r2, [r4, #76]	; 0x4c
   14ac4:	movwne	r1, #2
   14ac8:	ands	r6, r0, #3
   14acc:	beq	14ae4 <__assert_fail@plt+0x34e0>
   14ad0:	str	r1, [r2, #8]
   14ad4:	subs	r6, r6, #1
   14ad8:	sub	r0, r0, #1
   14adc:	add	r2, r2, #40	; 0x28
   14ae0:	bne	14ad0 <__assert_fail@plt+0x34cc>
   14ae4:	cmp	r3, #3
   14ae8:	bcc	14b0c <__assert_fail@plt+0x3508>
   14aec:	add	r2, r2, #128	; 0x80
   14af0:	str	r1, [r2]
   14af4:	str	r1, [r2, #-40]	; 0xffffffd8
   14af8:	str	r1, [r2, #-80]	; 0xffffffb0
   14afc:	str	r1, [r2, #-120]	; 0xffffff88
   14b00:	add	r2, r2, #160	; 0xa0
   14b04:	subs	r0, r0, #4
   14b08:	bne	14af0 <__assert_fail@plt+0x34ec>
   14b0c:	mov	r0, #0
   14b10:	str	r0, [r5, #28]
   14b14:	ldr	r0, [r4, #80]	; 0x50
   14b18:	sub	r0, r0, #1
   14b1c:	str	r0, [r4, #80]	; 0x50
   14b20:	ldrb	r0, [r4, #11]
   14b24:	cmp	r0, #0
   14b28:	bne	14b58 <__assert_fail@plt+0x3554>
   14b2c:	ldrb	r1, [r4, #9]
   14b30:	subs	r0, r8, #1
   14b34:	movwne	r0, #1
   14b38:	and	r0, r0, r1
   14b3c:	orrs	r0, r7, r0
   14b40:	bne	14b58 <__assert_fail@plt+0x3554>
   14b44:	movw	r0, #8504	; 0x2138
   14b48:	movt	r0, #3
   14b4c:	ldr	r1, [r0, #36]	; 0x24
   14b50:	add	r1, r1, #1
   14b54:	str	r1, [r0, #36]	; 0x24
   14b58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b5c:	mov	r0, r6
   14b60:	bl	1155c <__uflow@plt>
   14b64:	cmp	r0, #10
   14b68:	bne	14a7c <__assert_fail@plt+0x3478>
   14b6c:	b	14a84 <__assert_fail@plt+0x3480>
   14b70:	mov	r0, r6
   14b74:	bl	1155c <__uflow@plt>
   14b78:	cmp	r0, #10
   14b7c:	beq	148f8 <__assert_fail@plt+0x32f4>
   14b80:	b	14910 <__assert_fail@plt+0x330c>
   14b84:	mov	r0, r6
   14b88:	bl	1155c <__uflow@plt>
   14b8c:	mov	r7, #0
   14b90:	cmp	r0, #12
   14b94:	strb	r7, [r5, #37]	; 0x25
   14b98:	beq	1492c <__assert_fail@plt+0x3328>
   14b9c:	b	14950 <__assert_fail@plt+0x334c>
   14ba0:	push	{r4, r5, r6, sl, fp, lr}
   14ba4:	add	fp, sp, #16
   14ba8:	mov	r4, r0
   14bac:	ldr	r0, [r0, #8]
   14bb0:	cmp	r0, #3
   14bb4:	popeq	{r4, r5, r6, sl, fp, pc}
   14bb8:	bl	114e4 <__errno_location@plt>
   14bbc:	mov	r6, r0
   14bc0:	ldr	r1, [r0]
   14bc4:	ldr	r0, [r4]
   14bc8:	ldr	r2, [r0]
   14bcc:	lsl	r2, r2, #26
   14bd0:	and	r5, r1, r2, asr #31
   14bd4:	bl	11520 <fileno@plt>
   14bd8:	mov	r1, r0
   14bdc:	ldr	r0, [r4]
   14be0:	cmp	r1, #0
   14be4:	beq	14c88 <__assert_fail@plt+0x3684>
   14be8:	bl	16458 <__assert_fail@plt+0x4e54>
   14bec:	cmp	r5, #0
   14bf0:	bne	14bfc <__assert_fail@plt+0x35f8>
   14bf4:	cmp	r0, #0
   14bf8:	ldrne	r5, [r6]
   14bfc:	cmp	r5, #0
   14c00:	bne	14c94 <__assert_fail@plt+0x3690>
   14c04:	movw	r0, #8664	; 0x21d8
   14c08:	movt	r0, #3
   14c0c:	ldrb	r1, [r0, #9]
   14c10:	cmp	r1, #0
   14c14:	beq	14c38 <__assert_fail@plt+0x3634>
   14c18:	mov	r1, #0
   14c1c:	str	r1, [r4, #28]
   14c20:	mov	r1, #3
   14c24:	str	r1, [r4, #8]
   14c28:	ldr	r1, [r0, #80]	; 0x50
   14c2c:	sub	r1, r1, #1
   14c30:	str	r1, [r0, #80]	; 0x50
   14c34:	pop	{r4, r5, r6, sl, fp, pc}
   14c38:	movw	r1, #8504	; 0x2138
   14c3c:	movt	r1, #3
   14c40:	ldr	r1, [r1, #32]
   14c44:	cmp	r1, #0
   14c48:	beq	14c78 <__assert_fail@plt+0x3674>
   14c4c:	ldr	r2, [r0, #76]	; 0x4c
   14c50:	mov	r3, #3
   14c54:	mov	r6, #0
   14c58:	add	r2, r2, #24
   14c5c:	str	r3, [r2, #-16]
   14c60:	ldr	r5, [r2]
   14c64:	cmp	r5, #0
   14c68:	streq	r6, [r2, #4]
   14c6c:	add	r2, r2, #40	; 0x28
   14c70:	subs	r1, r1, #1
   14c74:	bne	14c5c <__assert_fail@plt+0x3658>
   14c78:	ldr	r1, [r0, #80]	; 0x50
   14c7c:	sub	r1, r1, #1
   14c80:	str	r1, [r0, #80]	; 0x50
   14c84:	pop	{r4, r5, r6, sl, fp, pc}
   14c88:	bl	115a4 <clearerr_unlocked@plt>
   14c8c:	cmp	r5, #0
   14c90:	beq	14c04 <__assert_fail@plt+0x3600>
   14c94:	ldr	r2, [r4, #4]
   14c98:	mov	r0, #0
   14c9c:	mov	r1, #3
   14ca0:	bl	1a7bc <__assert_fail@plt+0x91b8>
   14ca4:	movw	r2, #4247	; 0x1097
   14ca8:	mov	r3, r0
   14cac:	mov	r0, #1
   14cb0:	mov	r1, r5
   14cb4:	movt	r2, #2
   14cb8:	bl	11418 <error@plt>
   14cbc:	push	{r4, r5, fp, lr}
   14cc0:	add	fp, sp, #8
   14cc4:	movw	r5, #8664	; 0x21d8
   14cc8:	mov	r4, r0
   14ccc:	movt	r5, #3
   14cd0:	ldr	r2, [r5, #108]	; 0x6c
   14cd4:	ldr	r1, [r5, #112]	; 0x70
   14cd8:	ldr	r0, [r5, #104]	; 0x68
   14cdc:	cmp	r1, r2
   14ce0:	bcc	14cf4 <__assert_fail@plt+0x36f0>
   14ce4:	add	r1, r5, #108	; 0x6c
   14ce8:	bl	1bab8 <__assert_fail@plt+0xa4b4>
   14cec:	str	r0, [r5, #104]	; 0x68
   14cf0:	ldr	r1, [r5, #112]	; 0x70
   14cf4:	add	r2, r1, #1
   14cf8:	str	r2, [r5, #112]	; 0x70
   14cfc:	strb	r4, [r0, r1]
   14d00:	pop	{r4, r5, fp, pc}
   14d04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d08:	add	fp, sp, #28
   14d0c:	sub	sp, sp, #20
   14d10:	ldr	r8, [r0, #20]
   14d14:	movw	r4, #8664	; 0x21d8
   14d18:	mov	r5, r0
   14d1c:	movt	r4, #3
   14d20:	add	r0, r8, #1
   14d24:	str	r0, [r5, #20]
   14d28:	ldr	r1, [r4, #96]	; 0x60
   14d2c:	ldr	r9, [r1, r0, lsl #2]
   14d30:	mov	r0, #1
   14d34:	ldr	r6, [r1, r8, lsl #2]
   14d38:	strb	r0, [r4, #22]
   14d3c:	ldrb	r0, [r4, #23]
   14d40:	ldr	sl, [r4, #104]	; 0x68
   14d44:	cmp	r0, #1
   14d48:	bleq	15810 <__assert_fail@plt+0x420c>
   14d4c:	ldr	r0, [r5, #8]
   14d50:	cmp	r0, #1
   14d54:	bne	14dd4 <__assert_fail@plt+0x37d0>
   14d58:	movw	r0, #8504	; 0x2138
   14d5c:	movt	r0, #3
   14d60:	ldr	r3, [r0, #32]
   14d64:	ldr	r0, [r4, #76]	; 0x4c
   14d68:	cmp	r3, #1
   14d6c:	blt	14dc8 <__assert_fail@plt+0x37c4>
   14d70:	sub	r2, r3, #1
   14d74:	and	r1, r3, #3
   14d78:	cmp	r2, #3
   14d7c:	mov	r2, r0
   14d80:	bcc	14dac <__assert_fail@plt+0x37a8>
   14d84:	sub	r3, r1, r3
   14d88:	mov	r7, #2
   14d8c:	mov	r2, r0
   14d90:	str	r7, [r2, #128]	; 0x80
   14d94:	str	r7, [r2, #88]	; 0x58
   14d98:	str	r7, [r2, #48]	; 0x30
   14d9c:	str	r7, [r2, #8]
   14da0:	adds	r3, r3, #4
   14da4:	add	r2, r2, #160	; 0xa0
   14da8:	bne	14d90 <__assert_fail@plt+0x378c>
   14dac:	cmp	r1, #0
   14db0:	beq	14dc8 <__assert_fail@plt+0x37c4>
   14db4:	add	r2, r2, #8
   14db8:	mov	r3, #2
   14dbc:	str	r3, [r2], #40	; 0x28
   14dc0:	subs	r1, r1, #1
   14dc4:	bne	14dbc <__assert_fail@plt+0x37b8>
   14dc8:	ldr	r0, [r0, #28]
   14dcc:	cmp	r0, #0
   14dd0:	ble	14f24 <__assert_fail@plt+0x3920>
   14dd4:	ldr	r0, [r4, #40]	; 0x28
   14dd8:	ldr	r1, [r4, #116]	; 0x74
   14ddc:	cmp	r1, r0
   14de0:	ble	14ea0 <__assert_fail@plt+0x389c>
   14de4:	movw	ip, #8792	; 0x2258
   14de8:	ldrb	r3, [r4, #7]
   14dec:	sub	r7, r1, r0
   14df0:	movt	ip, #3
   14df4:	ldr	r2, [ip]
   14df8:	cmp	r3, #0
   14dfc:	beq	14e0c <__assert_fail@plt+0x3808>
   14e00:	sub	r0, r7, r2
   14e04:	str	r0, [r4, #120]	; 0x78
   14e08:	b	14e98 <__assert_fail@plt+0x3894>
   14e0c:	str	r6, [sp, #16]
   14e10:	mov	r6, r8
   14e14:	cmp	r7, r2
   14e18:	str	sl, [sp, #12]
   14e1c:	str	r9, [sp, #8]
   14e20:	ble	14e84 <__assert_fail@plt+0x3880>
   14e24:	movw	r8, #8652	; 0x21cc
   14e28:	add	r0, r2, r0
   14e2c:	mov	sl, #32
   14e30:	movt	r8, #3
   14e34:	sub	r9, r0, r1
   14e38:	ldr	r0, [r8]
   14e3c:	ldr	r1, [r0, #20]
   14e40:	ldr	r2, [r0, #24]
   14e44:	cmp	r1, r2
   14e48:	bcs	14e64 <__assert_fail@plt+0x3860>
   14e4c:	add	r2, r1, #1
   14e50:	str	r2, [r0, #20]
   14e54:	strb	sl, [r1]
   14e58:	adds	r9, r9, #1
   14e5c:	bcc	14e38 <__assert_fail@plt+0x3834>
   14e60:	b	14e84 <__assert_fail@plt+0x3880>
   14e64:	mov	r1, #32
   14e68:	str	r7, [sp, #4]
   14e6c:	mov	r7, ip
   14e70:	bl	11568 <__overflow@plt>
   14e74:	mov	ip, r7
   14e78:	ldr	r7, [sp, #4]
   14e7c:	adds	r9, r9, #1
   14e80:	bcc	14e38 <__assert_fail@plt+0x3834>
   14e84:	mov	r8, r6
   14e88:	ldr	r9, [sp, #8]
   14e8c:	ldr	r6, [sp, #16]
   14e90:	ldr	sl, [sp, #12]
   14e94:	str	r7, [ip]
   14e98:	mov	r0, #0
   14e9c:	str	r0, [r4, #116]	; 0x74
   14ea0:	ldrb	r0, [r4, #13]
   14ea4:	cmp	r0, #1
   14ea8:	bleq	15a7c <__assert_fail@plt+0x4478>
   14eac:	cmp	r6, r9
   14eb0:	beq	14ecc <__assert_fail@plt+0x38c8>
   14eb4:	add	r7, sl, r6
   14eb8:	sub	r6, r9, r6
   14ebc:	ldrb	r0, [r7], #1
   14ec0:	bl	14f40 <__assert_fail@plt+0x393c>
   14ec4:	subs	r6, r6, #1
   14ec8:	bne	14ebc <__assert_fail@plt+0x38b8>
   14ecc:	ldr	r0, [r4, #120]	; 0x78
   14ed0:	cmp	r0, #0
   14ed4:	beq	14ee4 <__assert_fail@plt+0x38e0>
   14ed8:	mov	r0, #1
   14edc:	sub	sp, fp, #28
   14ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ee4:	ldr	r1, [r4, #100]	; 0x64
   14ee8:	ldr	r0, [r4, #40]	; 0x28
   14eec:	ldr	r7, [r5, #32]
   14ef0:	ldr	r3, [r4, #36]	; 0x24
   14ef4:	movw	r2, #8792	; 0x2258
   14ef8:	movt	r2, #3
   14efc:	ldr	r1, [r1, r8, lsl #2]
   14f00:	add	r1, r1, r7
   14f04:	sub	r7, r7, r0
   14f08:	cmp	r7, r3
   14f0c:	str	r1, [r2]
   14f10:	subeq	r0, r1, r0
   14f14:	streq	r0, [r2]
   14f18:	mov	r0, #1
   14f1c:	sub	sp, fp, #28
   14f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f24:	ldrb	r0, [r4, #14]
   14f28:	cmp	r0, #1
   14f2c:	moveq	r0, #0
   14f30:	strbeq	r0, [r4, #22]
   14f34:	mov	r0, #1
   14f38:	sub	sp, fp, #28
   14f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f44:	add	fp, sp, #28
   14f48:	sub	sp, sp, #4
   14f4c:	movw	sl, #8664	; 0x21d8
   14f50:	mov	r8, r0
   14f54:	movt	sl, #3
   14f58:	ldrb	r0, [sl, #7]
   14f5c:	cmp	r0, #1
   14f60:	bne	150bc <__assert_fail@plt+0x3ab8>
   14f64:	ldr	r1, [sl, #120]	; 0x78
   14f68:	cmp	r8, #32
   14f6c:	bne	14f80 <__assert_fail@plt+0x397c>
   14f70:	add	r0, r1, #1
   14f74:	str	r0, [sl, #120]	; 0x78
   14f78:	sub	sp, fp, #28
   14f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f80:	movw	r4, #8792	; 0x2258
   14f84:	cmp	r1, #1
   14f88:	movt	r4, #3
   14f8c:	blt	15084 <__assert_fail@plt+0x3a80>
   14f90:	ldr	r0, [r4]
   14f94:	cmp	r1, #1
   14f98:	add	r7, r0, r1
   14f9c:	beq	1501c <__assert_fail@plt+0x3a18>
   14fa0:	movw	r5, #8504	; 0x2138
   14fa4:	movw	r9, #8652	; 0x21cc
   14fa8:	movt	r5, #3
   14fac:	movt	r9, #3
   14fb0:	ldr	r1, [r5, #8]
   14fb4:	sdiv	r2, r0, r1
   14fb8:	mul	r2, r2, r1
   14fbc:	sub	r2, r2, r0
   14fc0:	add	r1, r1, r2
   14fc4:	add	r6, r1, r0
   14fc8:	cmp	r7, r6
   14fcc:	blt	1501c <__assert_fail@plt+0x3a18>
   14fd0:	ldr	r0, [r9]
   14fd4:	ldrb	r1, [r5, #1]
   14fd8:	ldr	r2, [r0, #20]
   14fdc:	ldr	r3, [r0, #24]
   14fe0:	cmp	r2, r3
   14fe4:	bcs	15008 <__assert_fail@plt+0x3a04>
   14fe8:	add	r3, r2, #1
   14fec:	str	r3, [r0, #20]
   14ff0:	strb	r1, [r2]
   14ff4:	sub	r0, r7, r6
   14ff8:	cmp	r0, #1
   14ffc:	mov	r0, r6
   15000:	bgt	14fb0 <__assert_fail@plt+0x39ac>
   15004:	b	1501c <__assert_fail@plt+0x3a18>
   15008:	bl	11568 <__overflow@plt>
   1500c:	sub	r0, r7, r6
   15010:	cmp	r0, #1
   15014:	mov	r0, r6
   15018:	bgt	14fb0 <__assert_fail@plt+0x39ac>
   1501c:	cmp	r0, r7
   15020:	bge	15070 <__assert_fail@plt+0x3a6c>
   15024:	movw	r6, #8652	; 0x21cc
   15028:	sub	r5, r7, r0
   1502c:	mov	r4, #32
   15030:	movt	r6, #3
   15034:	ldr	r0, [r6]
   15038:	ldr	r1, [r0, #20]
   1503c:	ldr	r2, [r0, #24]
   15040:	cmp	r1, r2
   15044:	bcs	15060 <__assert_fail@plt+0x3a5c>
   15048:	add	r2, r1, #1
   1504c:	str	r2, [r0, #20]
   15050:	strb	r4, [r1]
   15054:	subs	r5, r5, #1
   15058:	bne	15034 <__assert_fail@plt+0x3a30>
   1505c:	b	15070 <__assert_fail@plt+0x3a6c>
   15060:	mov	r1, #32
   15064:	bl	11568 <__overflow@plt>
   15068:	subs	r5, r5, #1
   1506c:	bne	15034 <__assert_fail@plt+0x3a30>
   15070:	movw	r4, #8792	; 0x2258
   15074:	mov	r0, #0
   15078:	movt	r4, #3
   1507c:	str	r0, [sl, #120]	; 0x78
   15080:	str	r7, [r4]
   15084:	bl	11490 <__ctype_b_loc@plt>
   15088:	ldr	r0, [r0]
   1508c:	add	r0, r0, r8, lsl #1
   15090:	ldrb	r0, [r0, #1]
   15094:	tst	r0, #64	; 0x40
   15098:	bne	150b0 <__assert_fail@plt+0x3aac>
   1509c:	cmp	r8, #8
   150a0:	bne	150bc <__assert_fail@plt+0x3ab8>
   150a4:	ldr	r0, [r4]
   150a8:	sub	r0, r0, #1
   150ac:	b	150b8 <__assert_fail@plt+0x3ab4>
   150b0:	ldr	r0, [r4]
   150b4:	add	r0, r0, #1
   150b8:	str	r0, [r4]
   150bc:	movw	r0, #8652	; 0x21cc
   150c0:	movt	r0, #3
   150c4:	ldr	r0, [r0]
   150c8:	ldr	r1, [r0, #20]
   150cc:	ldr	r2, [r0, #24]
   150d0:	cmp	r1, r2
   150d4:	addcc	r2, r1, #1
   150d8:	strcc	r2, [r0, #20]
   150dc:	strbcc	r8, [r1]
   150e0:	subcc	sp, fp, #28
   150e4:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e8:	mov	r1, r8
   150ec:	sub	sp, fp, #28
   150f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150f4:	b	11568 <__overflow@plt>
   150f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150fc:	add	fp, sp, #28
   15100:	sub	sp, sp, #12
   15104:	mov	r4, r0
   15108:	ldr	r0, [r0]
   1510c:	ldmib	r0, {r1, r2}
   15110:	cmp	r1, r2
   15114:	bcs	157a0 <__assert_fail@plt+0x419c>
   15118:	add	r2, r1, #1
   1511c:	str	r2, [r0, #4]
   15120:	ldrb	r5, [r1]
   15124:	movw	r7, #8792	; 0x2258
   15128:	cmp	r5, #12
   1512c:	movt	r7, #3
   15130:	ldr	r8, [r7, #8]
   15134:	bne	15184 <__assert_fail@plt+0x3b80>
   15138:	ldrb	r0, [r4, #37]	; 0x25
   1513c:	cmp	r0, #0
   15140:	beq	153a8 <__assert_fail@plt+0x3da4>
   15144:	ldr	r0, [r4]
   15148:	ldmib	r0, {r1, r2}
   1514c:	cmp	r1, r2
   15150:	bcs	157bc <__assert_fail@plt+0x41b8>
   15154:	add	r2, r1, #1
   15158:	str	r2, [r0, #4]
   1515c:	ldrb	r5, [r1]
   15160:	cmp	r5, #10
   15164:	bne	15184 <__assert_fail@plt+0x3b80>
   15168:	ldr	r0, [r4]
   1516c:	ldmib	r0, {r1, r2}
   15170:	cmp	r1, r2
   15174:	bcs	157d0 <__assert_fail@plt+0x41cc>
   15178:	add	r2, r1, #1
   1517c:	str	r2, [r0, #4]
   15180:	ldrb	r5, [r1]
   15184:	mov	r0, #0
   15188:	cmn	r5, #1
   1518c:	strb	r0, [r4, #37]	; 0x25
   15190:	beq	157e8 <__assert_fail@plt+0x41e4>
   15194:	cmp	r5, #10
   15198:	beq	151b4 <__assert_fail@plt+0x3bb0>
   1519c:	cmp	r5, #12
   151a0:	beq	153b0 <__assert_fail@plt+0x3dac>
   151a4:	uxtb	r0, r5
   151a8:	bl	15e8c <__assert_fail@plt+0x4888>
   151ac:	mov	r6, r0
   151b0:	b	151b4 <__assert_fail@plt+0x3bb0>
   151b4:	movw	sl, #8664	; 0x21d8
   151b8:	movt	sl, #3
   151bc:	ldrb	r0, [sl, #17]
   151c0:	cmp	r0, #1
   151c4:	bne	151ec <__assert_fail@plt+0x3be8>
   151c8:	ldr	r0, [sl, #60]	; 0x3c
   151cc:	ldr	r1, [r7, #8]
   151d0:	cmp	r1, r0
   151d4:	ble	151ec <__assert_fail@plt+0x3be8>
   151d8:	str	r8, [r7, #8]
   151dc:	mov	r8, #0
   151e0:	mov	r0, r8
   151e4:	sub	sp, fp, #28
   151e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151ec:	ldr	r0, [r4, #16]
   151f0:	movw	r1, #19644	; 0x4cbc
   151f4:	movt	r1, #1
   151f8:	cmp	r0, r1
   151fc:	beq	155b8 <__assert_fail@plt+0x3fb4>
   15200:	mov	r0, #1
   15204:	strb	r0, [sl, #22]
   15208:	ldrb	r0, [sl, #23]
   1520c:	cmp	r0, #1
   15210:	bne	15220 <__assert_fail@plt+0x3c1c>
   15214:	ldrb	r0, [sl, #1]
   15218:	cmp	r0, #1
   1521c:	bleq	15810 <__assert_fail@plt+0x420c>
   15220:	ldrb	r0, [sl, #9]
   15224:	cmp	r0, #1
   15228:	bne	15508 <__assert_fail@plt+0x3f04>
   1522c:	ldrb	r0, [sl, #26]
   15230:	cmp	r0, #1
   15234:	bne	15508 <__assert_fail@plt+0x3f04>
   15238:	ldr	r9, [r7, #4]
   1523c:	mov	r0, #0
   15240:	str	r5, [sp, #4]
   15244:	str	r0, [r7, #4]
   15248:	cmp	r9, #1
   1524c:	blt	154d8 <__assert_fail@plt+0x3ed4>
   15250:	ldr	r7, [sl, #76]	; 0x4c
   15254:	movw	r5, #8652	; 0x21cc
   15258:	mov	r8, #1
   1525c:	mov	ip, #32
   15260:	str	r9, [sp, #8]
   15264:	movt	r5, #3
   15268:	b	15298 <__assert_fail@plt+0x3c94>
   1526c:	movw	r0, #8792	; 0x2258
   15270:	add	r7, r7, #40	; 0x28
   15274:	cmp	r8, r9
   15278:	movt	r0, #3
   1527c:	mov	r1, r0
   15280:	ldr	r0, [r0, #4]
   15284:	add	r0, r0, #1
   15288:	str	r0, [r1, #4]
   1528c:	add	r0, r8, #1
   15290:	mov	r8, r0
   15294:	beq	154d8 <__assert_fail@plt+0x3ed4>
   15298:	ldr	r0, [r7, #32]
   1529c:	str	r0, [sl, #116]	; 0x74
   152a0:	ldr	r1, [sl, #40]	; 0x28
   152a4:	cmp	r0, r1
   152a8:	bgt	152c8 <__assert_fail@plt+0x3cc4>
   152ac:	ldrb	r0, [sl, #13]
   152b0:	cmp	r0, #1
   152b4:	beq	15374 <__assert_fail@plt+0x3d70>
   152b8:	ldrb	r0, [r7, #36]	; 0x24
   152bc:	cmp	r0, #0
   152c0:	bne	15390 <__assert_fail@plt+0x3d8c>
   152c4:	b	1526c <__assert_fail@plt+0x3c68>
   152c8:	movw	r2, #8792	; 0x2258
   152cc:	ldrb	r3, [sl, #7]
   152d0:	sub	r9, r0, r1
   152d4:	movt	r2, #3
   152d8:	ldr	r2, [r2]
   152dc:	cmp	r3, #0
   152e0:	beq	152f0 <__assert_fail@plt+0x3cec>
   152e4:	sub	r0, r9, r2
   152e8:	str	r0, [sl, #120]	; 0x78
   152ec:	b	1535c <__assert_fail@plt+0x3d58>
   152f0:	cmp	r9, r2
   152f4:	ble	15348 <__assert_fail@plt+0x3d44>
   152f8:	add	r1, r2, r1
   152fc:	sub	sl, r1, r0
   15300:	ldr	r0, [r5]
   15304:	ldr	r1, [r0, #20]
   15308:	ldr	r2, [r0, #24]
   1530c:	cmp	r1, r2
   15310:	bcs	1532c <__assert_fail@plt+0x3d28>
   15314:	add	r2, r1, #1
   15318:	str	r2, [r0, #20]
   1531c:	strb	ip, [r1]
   15320:	adds	sl, sl, #1
   15324:	bcc	15300 <__assert_fail@plt+0x3cfc>
   15328:	b	15348 <__assert_fail@plt+0x3d44>
   1532c:	mov	r1, #32
   15330:	bl	11568 <__overflow@plt>
   15334:	movw	r5, #8652	; 0x21cc
   15338:	mov	ip, #32
   1533c:	movt	r5, #3
   15340:	adds	sl, sl, #1
   15344:	bcc	15300 <__assert_fail@plt+0x3cfc>
   15348:	movw	r0, #8792	; 0x2258
   1534c:	movw	sl, #8664	; 0x21d8
   15350:	movt	r0, #3
   15354:	movt	sl, #3
   15358:	str	r9, [r0]
   1535c:	ldr	r9, [sp, #8]
   15360:	mov	r0, #0
   15364:	str	r0, [sl, #116]	; 0x74
   15368:	ldrb	r0, [sl, #13]
   1536c:	cmp	r0, #1
   15370:	bne	152b8 <__assert_fail@plt+0x3cb4>
   15374:	bl	15a7c <__assert_fail@plt+0x4478>
   15378:	movw	r5, #8652	; 0x21cc
   1537c:	mov	ip, #32
   15380:	movt	r5, #3
   15384:	ldrb	r0, [r7, #36]	; 0x24
   15388:	cmp	r0, #0
   1538c:	beq	1526c <__assert_fail@plt+0x3c68>
   15390:	mov	r0, r7
   15394:	bl	16060 <__assert_fail@plt+0x4a5c>
   15398:	movw	r5, #8652	; 0x21cc
   1539c:	mov	ip, #32
   153a0:	movt	r5, #3
   153a4:	b	1526c <__assert_fail@plt+0x3c68>
   153a8:	mov	r0, #0
   153ac:	strb	r0, [r4, #37]	; 0x25
   153b0:	ldr	r0, [r4]
   153b4:	ldmib	r0, {r1, r2}
   153b8:	cmp	r1, r2
   153bc:	bcs	157ac <__assert_fail@plt+0x41a8>
   153c0:	add	r2, r1, #1
   153c4:	str	r2, [r0, #4]
   153c8:	ldrb	r0, [r1]
   153cc:	cmp	r0, #10
   153d0:	beq	153dc <__assert_fail@plt+0x3dd8>
   153d4:	ldr	r1, [r4]
   153d8:	bl	114d8 <ungetc@plt>
   153dc:	movw	r5, #8664	; 0x21d8
   153e0:	mov	r0, #1
   153e4:	movt	r5, #3
   153e8:	strb	r0, [r5, #24]
   153ec:	ldrb	r0, [r5, #23]
   153f0:	cmp	r0, #1
   153f4:	bne	15490 <__assert_fail@plt+0x3e8c>
   153f8:	ldrb	r0, [r5, #1]
   153fc:	cmp	r0, #1
   15400:	bne	15490 <__assert_fail@plt+0x3e8c>
   15404:	mov	r0, #1
   15408:	strb	r0, [r5, #22]
   1540c:	bl	15810 <__assert_fail@plt+0x420c>
   15410:	ldrb	r0, [r5, #9]
   15414:	cmp	r0, #0
   15418:	bne	154ac <__assert_fail@plt+0x3ea8>
   1541c:	movw	r0, #8504	; 0x2138
   15420:	movt	r0, #3
   15424:	ldr	r0, [r0, #32]
   15428:	cmp	r0, #0
   1542c:	beq	154b4 <__assert_fail@plt+0x3eb0>
   15430:	ldrb	r2, [r5, #1]
   15434:	mov	r1, #1
   15438:	sub	r3, r0, #1
   1543c:	cmp	r2, #0
   15440:	ldr	r2, [r5, #76]	; 0x4c
   15444:	movwne	r1, #2
   15448:	ands	r7, r0, #3
   1544c:	beq	15464 <__assert_fail@plt+0x3e60>
   15450:	str	r1, [r2, #8]
   15454:	subs	r7, r7, #1
   15458:	sub	r0, r0, #1
   1545c:	add	r2, r2, #40	; 0x28
   15460:	bne	15450 <__assert_fail@plt+0x3e4c>
   15464:	cmp	r3, #3
   15468:	bcc	154b4 <__assert_fail@plt+0x3eb0>
   1546c:	add	r2, r2, #128	; 0x80
   15470:	str	r1, [r2]
   15474:	str	r1, [r2, #-40]	; 0xffffffd8
   15478:	str	r1, [r2, #-80]	; 0xffffffb0
   1547c:	str	r1, [r2, #-120]	; 0xffffff88
   15480:	add	r2, r2, #160	; 0xa0
   15484:	subs	r0, r0, #4
   15488:	bne	15470 <__assert_fail@plt+0x3e6c>
   1548c:	b	154b4 <__assert_fail@plt+0x3eb0>
   15490:	ldrb	r0, [r5, #15]
   15494:	cmp	r0, #1
   15498:	moveq	r0, #1
   1549c:	strbeq	r0, [r5, #25]
   154a0:	ldrb	r0, [r5, #9]
   154a4:	cmp	r0, #0
   154a8:	beq	1541c <__assert_fail@plt+0x3e18>
   154ac:	mov	r0, #2
   154b0:	str	r0, [r4, #8]
   154b4:	mov	r0, #0
   154b8:	str	r0, [r4, #28]
   154bc:	ldr	r0, [r5, #80]	; 0x50
   154c0:	sub	r0, r0, #1
   154c4:	str	r0, [r5, #80]	; 0x50
   154c8:	mov	r8, #1
   154cc:	mov	r0, r8
   154d0:	sub	sp, fp, #28
   154d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154d8:	mov	r1, #0
   154dc:	ldr	r0, [r4, #32]
   154e0:	ldr	r5, [sp, #4]
   154e4:	movw	r7, #8792	; 0x2258
   154e8:	strb	r1, [sl, #26]
   154ec:	movt	r7, #3
   154f0:	ldrb	r2, [sl, #17]
   154f4:	ldr	r1, [sl, #60]	; 0x3c
   154f8:	str	r0, [sl, #116]	; 0x74
   154fc:	cmp	r2, #0
   15500:	moveq	r1, r2
   15504:	str	r1, [sl, #120]	; 0x78
   15508:	ldr	r0, [sl, #40]	; 0x28
   1550c:	ldr	r1, [sl, #116]	; 0x74
   15510:	cmp	r1, r0
   15514:	ble	155ac <__assert_fail@plt+0x3fa8>
   15518:	ldrb	r3, [sl, #7]
   1551c:	ldr	r2, [r7]
   15520:	sub	r8, r1, r0
   15524:	cmp	r3, #0
   15528:	beq	15538 <__assert_fail@plt+0x3f34>
   1552c:	sub	r0, r8, r2
   15530:	str	r0, [sl, #120]	; 0x78
   15534:	b	155a4 <__assert_fail@plt+0x3fa0>
   15538:	cmp	r8, r2
   1553c:	str	r5, [sp, #4]
   15540:	ble	15594 <__assert_fail@plt+0x3f90>
   15544:	movw	r9, #8652	; 0x21cc
   15548:	add	r0, r2, r0
   1554c:	mov	r7, #32
   15550:	movt	r9, #3
   15554:	sub	r5, r0, r1
   15558:	ldr	r0, [r9]
   1555c:	ldr	r1, [r0, #20]
   15560:	ldr	r2, [r0, #24]
   15564:	cmp	r1, r2
   15568:	bcs	15584 <__assert_fail@plt+0x3f80>
   1556c:	add	r2, r1, #1
   15570:	str	r2, [r0, #20]
   15574:	strb	r7, [r1]
   15578:	adds	r5, r5, #1
   1557c:	bcc	15558 <__assert_fail@plt+0x3f54>
   15580:	b	15594 <__assert_fail@plt+0x3f90>
   15584:	mov	r1, #32
   15588:	bl	11568 <__overflow@plt>
   1558c:	adds	r5, r5, #1
   15590:	bcc	15558 <__assert_fail@plt+0x3f54>
   15594:	ldr	r5, [sp, #4]
   15598:	movw	r7, #8792	; 0x2258
   1559c:	movt	r7, #3
   155a0:	str	r8, [r7]
   155a4:	mov	r0, #0
   155a8:	str	r0, [sl, #116]	; 0x74
   155ac:	ldrb	r0, [sl, #13]
   155b0:	cmp	r0, #1
   155b4:	bleq	15a7c <__assert_fail@plt+0x4478>
   155b8:	ldrb	r0, [r4, #36]	; 0x24
   155bc:	cmp	r0, #0
   155c0:	movne	r0, r4
   155c4:	blne	16060 <__assert_fail@plt+0x4a5c>
   155c8:	mov	r0, #0
   155cc:	mov	r8, #1
   155d0:	cmp	r5, #10
   155d4:	strb	r0, [sl, #27]
   155d8:	beq	1569c <__assert_fail@plt+0x4098>
   155dc:	cmp	r6, #0
   155e0:	beq	15634 <__assert_fail@plt+0x4030>
   155e4:	ldr	r5, [sl, #68]	; 0x44
   155e8:	ldrb	r0, [r5], #1
   155ec:	ldr	r1, [r4, #16]
   155f0:	blx	r1
   155f4:	subs	r6, r6, #1
   155f8:	bne	155e8 <__assert_fail@plt+0x3fe4>
   155fc:	b	15634 <__assert_fail@plt+0x4030>
   15600:	cmp	r5, #0
   15604:	beq	15634 <__assert_fail@plt+0x4030>
   15608:	ldr	r6, [sl, #68]	; 0x44
   1560c:	ldrb	r0, [r6], #1
   15610:	ldr	r1, [r4, #16]
   15614:	blx	r1
   15618:	subs	r5, r5, #1
   1561c:	bne	1560c <__assert_fail@plt+0x4008>
   15620:	b	15634 <__assert_fail@plt+0x4030>
   15624:	bl	1155c <__uflow@plt>
   15628:	cmn	r0, #1
   1562c:	bne	15658 <__assert_fail@plt+0x4054>
   15630:	b	156a8 <__assert_fail@plt+0x40a4>
   15634:	ldr	r0, [r4]
   15638:	ldmib	r0, {r1, r2}
   1563c:	cmp	r1, r2
   15640:	bcs	15624 <__assert_fail@plt+0x4020>
   15644:	add	r2, r1, #1
   15648:	str	r2, [r0, #4]
   1564c:	ldrb	r0, [r1]
   15650:	cmn	r0, #1
   15654:	beq	156a8 <__assert_fail@plt+0x40a4>
   15658:	cmp	r0, #10
   1565c:	beq	1569c <__assert_fail@plt+0x4098>
   15660:	cmp	r0, #12
   15664:	beq	156bc <__assert_fail@plt+0x40b8>
   15668:	ldr	r6, [r7, #8]
   1566c:	uxtb	r0, r0
   15670:	bl	15e8c <__assert_fail@plt+0x4888>
   15674:	mov	r5, r0
   15678:	ldrb	r0, [sl, #17]
   1567c:	cmp	r0, #1
   15680:	bne	15600 <__assert_fail@plt+0x3ffc>
   15684:	ldr	r0, [sl, #60]	; 0x3c
   15688:	ldr	r1, [r7, #8]
   1568c:	cmp	r1, r0
   15690:	ble	15600 <__assert_fail@plt+0x3ffc>
   15694:	str	r6, [r7, #8]
   15698:	mov	r8, #0
   1569c:	mov	r0, r8
   156a0:	sub	sp, fp, #28
   156a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156a8:	mov	r0, r4
   156ac:	bl	14ba0 <__assert_fail@plt+0x359c>
   156b0:	mov	r0, r8
   156b4:	sub	sp, fp, #28
   156b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156bc:	ldr	r0, [r4]
   156c0:	ldmib	r0, {r1, r2}
   156c4:	cmp	r1, r2
   156c8:	bcs	15800 <__assert_fail@plt+0x41fc>
   156cc:	add	r2, r1, #1
   156d0:	str	r2, [r0, #4]
   156d4:	ldrb	r0, [r1]
   156d8:	cmp	r0, #10
   156dc:	beq	156e8 <__assert_fail@plt+0x40e4>
   156e0:	ldr	r1, [r4]
   156e4:	bl	114d8 <ungetc@plt>
   156e8:	ldrb	r0, [sl, #15]
   156ec:	cmp	r0, #1
   156f0:	moveq	r0, #1
   156f4:	strbeq	r0, [sl, #25]
   156f8:	ldrb	r0, [sl, #9]
   156fc:	cmp	r0, #0
   15700:	beq	15710 <__assert_fail@plt+0x410c>
   15704:	mov	r0, #2
   15708:	str	r0, [r4, #8]
   1570c:	b	15780 <__assert_fail@plt+0x417c>
   15710:	movw	r0, #8504	; 0x2138
   15714:	movt	r0, #3
   15718:	ldr	r0, [r0, #32]
   1571c:	cmp	r0, #0
   15720:	beq	15780 <__assert_fail@plt+0x417c>
   15724:	ldrb	r2, [sl, #1]
   15728:	mov	r1, #1
   1572c:	sub	r3, r0, #1
   15730:	cmp	r2, #0
   15734:	ldr	r2, [sl, #76]	; 0x4c
   15738:	movwne	r1, #2
   1573c:	ands	r6, r0, #3
   15740:	beq	15758 <__assert_fail@plt+0x4154>
   15744:	str	r1, [r2, #8]
   15748:	subs	r6, r6, #1
   1574c:	sub	r0, r0, #1
   15750:	add	r2, r2, #40	; 0x28
   15754:	bne	15744 <__assert_fail@plt+0x4140>
   15758:	cmp	r3, #3
   1575c:	bcc	15780 <__assert_fail@plt+0x417c>
   15760:	add	r2, r2, #128	; 0x80
   15764:	str	r1, [r2]
   15768:	str	r1, [r2, #-40]	; 0xffffffd8
   1576c:	str	r1, [r2, #-80]	; 0xffffffb0
   15770:	str	r1, [r2, #-120]	; 0xffffff88
   15774:	add	r2, r2, #160	; 0xa0
   15778:	subs	r0, r0, #4
   1577c:	bne	15764 <__assert_fail@plt+0x4160>
   15780:	mov	r0, #0
   15784:	str	r0, [r4, #28]
   15788:	ldr	r0, [sl, #80]	; 0x50
   1578c:	sub	r0, r0, #1
   15790:	str	r0, [sl, #80]	; 0x50
   15794:	mov	r0, r8
   15798:	sub	sp, fp, #28
   1579c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157a0:	bl	1155c <__uflow@plt>
   157a4:	mov	r5, r0
   157a8:	b	15124 <__assert_fail@plt+0x3b20>
   157ac:	bl	1155c <__uflow@plt>
   157b0:	cmp	r0, #10
   157b4:	bne	153d4 <__assert_fail@plt+0x3dd0>
   157b8:	b	153dc <__assert_fail@plt+0x3dd8>
   157bc:	bl	1155c <__uflow@plt>
   157c0:	mov	r5, r0
   157c4:	cmp	r5, #10
   157c8:	beq	15168 <__assert_fail@plt+0x3b64>
   157cc:	b	15184 <__assert_fail@plt+0x3b80>
   157d0:	bl	1155c <__uflow@plt>
   157d4:	mov	r5, r0
   157d8:	mov	r0, #0
   157dc:	cmn	r5, #1
   157e0:	strb	r0, [r4, #37]	; 0x25
   157e4:	bne	15194 <__assert_fail@plt+0x3b90>
   157e8:	mov	r0, r4
   157ec:	bl	14ba0 <__assert_fail@plt+0x359c>
   157f0:	mov	r8, #1
   157f4:	mov	r0, r8
   157f8:	sub	sp, fp, #28
   157fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15800:	bl	1155c <__uflow@plt>
   15804:	cmp	r0, #10
   15808:	bne	156e0 <__assert_fail@plt+0x40dc>
   1580c:	b	156e8 <__assert_fail@plt+0x40e4>
   15810:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15814:	add	fp, sp, #24
   15818:	sub	sp, sp, #312	; 0x138
   1581c:	movw	r9, #8664	; 0x21d8
   15820:	movw	r8, #8792	; 0x2258
   15824:	mov	r0, #0
   15828:	movt	r9, #3
   1582c:	movt	r8, #3
   15830:	ldrb	r1, [r9, #7]
   15834:	ldr	r4, [r9, #36]	; 0x24
   15838:	str	r0, [r8]
   1583c:	cmp	r1, #0
   15840:	beq	1585c <__assert_fail@plt+0x4258>
   15844:	str	r4, [r9, #120]	; 0x78
   15848:	mov	r1, r4
   1584c:	add	r4, r0, r1
   15850:	cmp	r1, #2
   15854:	bge	158c8 <__assert_fail@plt+0x42c4>
   15858:	b	15944 <__assert_fail@plt+0x4340>
   1585c:	cmp	r4, #1
   15860:	blt	158b0 <__assert_fail@plt+0x42ac>
   15864:	movw	r5, #8652	; 0x21cc
   15868:	mov	r6, #32
   1586c:	mov	r7, r4
   15870:	movt	r5, #3
   15874:	ldr	r0, [r5]
   15878:	ldr	r1, [r0, #20]
   1587c:	ldr	r2, [r0, #24]
   15880:	cmp	r1, r2
   15884:	bcs	158a0 <__assert_fail@plt+0x429c>
   15888:	add	r2, r1, #1
   1588c:	str	r2, [r0, #20]
   15890:	strb	r6, [r1]
   15894:	subs	r7, r7, #1
   15898:	bne	15874 <__assert_fail@plt+0x4270>
   1589c:	b	158b0 <__assert_fail@plt+0x42ac>
   158a0:	mov	r1, #32
   158a4:	bl	11568 <__overflow@plt>
   158a8:	subs	r7, r7, #1
   158ac:	bne	15874 <__assert_fail@plt+0x4270>
   158b0:	ldr	r1, [r9, #120]	; 0x78
   158b4:	mov	r0, r4
   158b8:	str	r4, [r8]
   158bc:	add	r4, r0, r1
   158c0:	cmp	r1, #2
   158c4:	blt	15944 <__assert_fail@plt+0x4340>
   158c8:	movw	r7, #8504	; 0x2138
   158cc:	movw	r5, #8652	; 0x21cc
   158d0:	movt	r7, #3
   158d4:	movt	r5, #3
   158d8:	ldr	r1, [r7, #8]
   158dc:	sdiv	r2, r0, r1
   158e0:	mul	r2, r2, r1
   158e4:	sub	r2, r2, r0
   158e8:	add	r1, r1, r2
   158ec:	add	r6, r1, r0
   158f0:	cmp	r4, r6
   158f4:	blt	15944 <__assert_fail@plt+0x4340>
   158f8:	ldr	r0, [r5]
   158fc:	ldrb	r1, [r7, #1]
   15900:	ldr	r2, [r0, #20]
   15904:	ldr	r3, [r0, #24]
   15908:	cmp	r2, r3
   1590c:	bcs	15930 <__assert_fail@plt+0x432c>
   15910:	add	r3, r2, #1
   15914:	str	r3, [r0, #20]
   15918:	strb	r1, [r2]
   1591c:	sub	r0, r4, r6
   15920:	cmp	r0, #1
   15924:	mov	r0, r6
   15928:	bgt	158d8 <__assert_fail@plt+0x42d4>
   1592c:	b	15944 <__assert_fail@plt+0x4340>
   15930:	bl	11568 <__overflow@plt>
   15934:	sub	r0, r4, r6
   15938:	cmp	r0, #1
   1593c:	mov	r0, r6
   15940:	bgt	158d8 <__assert_fail@plt+0x42d4>
   15944:	cmp	r0, r4
   15948:	bge	15998 <__assert_fail@plt+0x4394>
   1594c:	movw	r6, #8652	; 0x21cc
   15950:	sub	r5, r4, r0
   15954:	mov	r7, #32
   15958:	movt	r6, #3
   1595c:	ldr	r0, [r6]
   15960:	ldr	r1, [r0, #20]
   15964:	ldr	r2, [r0, #24]
   15968:	cmp	r1, r2
   1596c:	bcs	15988 <__assert_fail@plt+0x4384>
   15970:	add	r2, r1, #1
   15974:	str	r2, [r0, #20]
   15978:	strb	r7, [r1]
   1597c:	subs	r5, r5, #1
   15980:	bne	1595c <__assert_fail@plt+0x4358>
   15984:	b	15998 <__assert_fail@plt+0x4394>
   15988:	mov	r1, #32
   1598c:	bl	11568 <__overflow@plt>
   15990:	subs	r5, r5, #1
   15994:	bne	1595c <__assert_fail@plt+0x4358>
   15998:	str	r4, [r8]
   1599c:	mov	r7, #0
   159a0:	ldrd	r0, [r8, #24]
   159a4:	str	r7, [r9, #120]	; 0x78
   159a8:	orrs	r0, r0, r1
   159ac:	beq	15a58 <__assert_fail@plt+0x4454>
   159b0:	movw	r1, #3190	; 0xc76
   159b4:	mov	r0, #0
   159b8:	mov	r2, #5
   159bc:	movt	r1, #2
   159c0:	bl	1137c <dcgettext@plt>
   159c4:	mov	r3, r0
   159c8:	ldrd	r0, [r8, #24]
   159cc:	add	r4, sp, #32
   159d0:	mov	r2, #276	; 0x114
   159d4:	stm	sp, {r0, r1}
   159d8:	mov	r0, r4
   159dc:	mov	r1, #1
   159e0:	bl	114f0 <__sprintf_chk@plt>
   159e4:	ldr	r5, [r9, #92]	; 0x5c
   159e8:	mov	r0, r4
   159ec:	mov	r1, #0
   159f0:	bl	16820 <__assert_fail@plt+0x521c>
   159f4:	sub	r0, r5, r0
   159f8:	ldr	r1, [r9, #84]	; 0x54
   159fc:	ldr	r3, [r9, #88]	; 0x58
   15a00:	movw	r5, #3109	; 0xc25
   15a04:	ldr	r2, [r9, #36]	; 0x24
   15a08:	bic	r0, r0, r0, asr #31
   15a0c:	movt	r5, #2
   15a10:	sub	r6, r0, r0, lsr #1
   15a14:	lsr	r0, r0, #1
   15a18:	str	r1, [sp]
   15a1c:	stmib	sp, {r0, r5}
   15a20:	movw	r1, #3200	; 0xc80
   15a24:	str	r3, [sp, #12]
   15a28:	movw	r3, #3108	; 0xc24
   15a2c:	mov	r0, #1
   15a30:	str	r5, [sp, #20]
   15a34:	str	r4, [sp, #24]
   15a38:	movt	r1, #2
   15a3c:	movt	r3, #2
   15a40:	str	r6, [sp, #16]
   15a44:	bl	11514 <__printf_chk@plt>
   15a48:	strb	r7, [r9, #23]
   15a4c:	str	r7, [r8]
   15a50:	sub	sp, fp, #24
   15a54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15a58:	movw	r1, #3169	; 0xc61
   15a5c:	mov	r0, #0
   15a60:	mov	r2, #5
   15a64:	movt	r1, #2
   15a68:	bl	1137c <dcgettext@plt>
   15a6c:	mov	r2, r0
   15a70:	mov	r0, #1
   15a74:	mov	r1, #0
   15a78:	bl	11418 <error@plt>
   15a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a80:	add	fp, sp, #28
   15a84:	sub	sp, sp, #4
   15a88:	movw	lr, #8792	; 0x2258
   15a8c:	movw	ip, #8664	; 0x21d8
   15a90:	movt	lr, #3
   15a94:	movt	ip, #3
   15a98:	ldr	r0, [lr, #4]
   15a9c:	cmp	r0, #1
   15aa0:	blt	15d74 <__assert_fail@plt+0x4770>
   15aa4:	movw	r5, #8504	; 0x2138
   15aa8:	ldr	r6, [ip, #40]	; 0x28
   15aac:	movw	r4, #8652	; 0x21cc
   15ab0:	mov	sl, #32
   15ab4:	movt	r5, #3
   15ab8:	movt	r4, #3
   15abc:	ldr	r7, [r5, #24]
   15ac0:	subs	r6, r6, #1
   15ac4:	bge	15bec <__assert_fail@plt+0x45e8>
   15ac8:	b	15afc <__assert_fail@plt+0x44f8>
   15acc:	movw	r5, #8504	; 0x2138
   15ad0:	mov	r0, #0
   15ad4:	str	r8, [lr]
   15ad8:	movt	r5, #3
   15adc:	str	r0, [ip, #120]	; 0x78
   15ae0:	ldr	r0, [lr, #4]
   15ae4:	sub	r0, r0, #1
   15ae8:	cmp	r0, #0
   15aec:	str	r0, [lr, #4]
   15af0:	ble	15e84 <__assert_fail@plt+0x4880>
   15af4:	subs	r6, r6, #1
   15af8:	bge	15bec <__assert_fail@plt+0x45e8>
   15afc:	ldr	r1, [ip, #120]	; 0x78
   15b00:	cmp	r1, #1
   15b04:	blt	15ae0 <__assert_fail@plt+0x44dc>
   15b08:	ldr	r0, [lr]
   15b0c:	add	r8, r0, r1
   15b10:	beq	15d04 <__assert_fail@plt+0x4700>
   15b14:	mov	r3, r5
   15b18:	ldr	r1, [r3, #8]
   15b1c:	sdiv	r2, r0, r1
   15b20:	mul	r2, r2, r1
   15b24:	sub	r2, r2, r0
   15b28:	add	r1, r1, r2
   15b2c:	add	r5, r1, r0
   15b30:	cmp	r8, r5
   15b34:	blt	15d04 <__assert_fail@plt+0x4700>
   15b38:	ldr	r0, [r4]
   15b3c:	ldrb	r1, [r3, #1]
   15b40:	ldr	r2, [r0, #20]
   15b44:	ldr	r3, [r0, #24]
   15b48:	cmp	r2, r3
   15b4c:	bcs	15b78 <__assert_fail@plt+0x4574>
   15b50:	add	r3, r2, #1
   15b54:	str	r3, [r0, #20]
   15b58:	strb	r1, [r2]
   15b5c:	movw	r3, #8504	; 0x2138
   15b60:	sub	r0, r8, r5
   15b64:	movt	r3, #3
   15b68:	cmp	r0, #1
   15b6c:	mov	r0, r5
   15b70:	bgt	15b18 <__assert_fail@plt+0x4514>
   15b74:	b	15d04 <__assert_fail@plt+0x4700>
   15b78:	bl	11568 <__overflow@plt>
   15b7c:	movw	lr, #8792	; 0x2258
   15b80:	movw	ip, #8664	; 0x21d8
   15b84:	movt	lr, #3
   15b88:	movt	ip, #3
   15b8c:	b	15b5c <__assert_fail@plt+0x4558>
   15b90:	mov	r0, #0
   15b94:	str	r8, [lr]
   15b98:	str	r0, [ip, #120]	; 0x78
   15b9c:	ldrb	r1, [r7]
   15ba0:	ldr	r0, [r4]
   15ba4:	ldr	r2, [r0, #20]
   15ba8:	ldr	r3, [r0, #24]
   15bac:	cmp	r2, r3
   15bb0:	bcs	15cec <__assert_fail@plt+0x46e8>
   15bb4:	add	r3, r2, #1
   15bb8:	str	r3, [r0, #20]
   15bbc:	strb	r1, [r2]
   15bc0:	ldr	r2, [lr]
   15bc4:	movw	r5, #8504	; 0x2138
   15bc8:	mov	r0, lr
   15bcc:	movt	r5, #3
   15bd0:	add	r1, r2, #1
   15bd4:	add	r7, r7, #1
   15bd8:	cmp	r6, #0
   15bdc:	str	r1, [r0]
   15be0:	sub	r0, r6, #1
   15be4:	mov	r6, r0
   15be8:	ble	15d60 <__assert_fail@plt+0x475c>
   15bec:	mov	r0, ip
   15bf0:	ldrb	r1, [r7]
   15bf4:	ldr	r2, [r0, #120]!	; 0x78
   15bf8:	cmp	r1, #32
   15bfc:	beq	15bd0 <__assert_fail@plt+0x45cc>
   15c00:	cmp	r2, #1
   15c04:	blt	15ba0 <__assert_fail@plt+0x459c>
   15c08:	ldr	r0, [lr]
   15c0c:	add	r8, r0, r2
   15c10:	beq	15c90 <__assert_fail@plt+0x468c>
   15c14:	ldr	r1, [r5, #8]
   15c18:	sdiv	r2, r0, r1
   15c1c:	mul	r2, r2, r1
   15c20:	sub	r2, r2, r0
   15c24:	add	r1, r1, r2
   15c28:	add	r9, r1, r0
   15c2c:	cmp	r8, r9
   15c30:	blt	15c90 <__assert_fail@plt+0x468c>
   15c34:	ldr	r0, [r4]
   15c38:	ldrb	r1, [r5, #1]
   15c3c:	ldr	r2, [r0, #20]
   15c40:	ldr	r3, [r0, #24]
   15c44:	cmp	r2, r3
   15c48:	bcs	15c6c <__assert_fail@plt+0x4668>
   15c4c:	add	r3, r2, #1
   15c50:	str	r3, [r0, #20]
   15c54:	strb	r1, [r2]
   15c58:	sub	r0, r8, r9
   15c5c:	cmp	r0, #1
   15c60:	mov	r0, r9
   15c64:	bgt	15c14 <__assert_fail@plt+0x4610>
   15c68:	b	15c90 <__assert_fail@plt+0x468c>
   15c6c:	bl	11568 <__overflow@plt>
   15c70:	movw	lr, #8792	; 0x2258
   15c74:	movw	ip, #8664	; 0x21d8
   15c78:	movt	lr, #3
   15c7c:	movt	ip, #3
   15c80:	sub	r0, r8, r9
   15c84:	cmp	r0, #1
   15c88:	mov	r0, r9
   15c8c:	bgt	15c14 <__assert_fail@plt+0x4610>
   15c90:	cmp	r0, r8
   15c94:	bge	15b90 <__assert_fail@plt+0x458c>
   15c98:	sub	r5, r8, r0
   15c9c:	ldr	r0, [r4]
   15ca0:	ldr	r1, [r0, #20]
   15ca4:	ldr	r2, [r0, #24]
   15ca8:	cmp	r1, r2
   15cac:	bcs	15cc8 <__assert_fail@plt+0x46c4>
   15cb0:	add	r2, r1, #1
   15cb4:	str	r2, [r0, #20]
   15cb8:	strb	sl, [r1]
   15cbc:	subs	r5, r5, #1
   15cc0:	bne	15c9c <__assert_fail@plt+0x4698>
   15cc4:	b	15b90 <__assert_fail@plt+0x458c>
   15cc8:	mov	r1, #32
   15ccc:	bl	11568 <__overflow@plt>
   15cd0:	movw	lr, #8792	; 0x2258
   15cd4:	movw	ip, #8664	; 0x21d8
   15cd8:	movt	lr, #3
   15cdc:	movt	ip, #3
   15ce0:	subs	r5, r5, #1
   15ce4:	bne	15c9c <__assert_fail@plt+0x4698>
   15ce8:	b	15b90 <__assert_fail@plt+0x458c>
   15cec:	bl	11568 <__overflow@plt>
   15cf0:	movw	lr, #8792	; 0x2258
   15cf4:	movw	ip, #8664	; 0x21d8
   15cf8:	movt	lr, #3
   15cfc:	movt	ip, #3
   15d00:	b	15bc0 <__assert_fail@plt+0x45bc>
   15d04:	cmp	r0, r8
   15d08:	bge	15acc <__assert_fail@plt+0x44c8>
   15d0c:	sub	r5, r8, r0
   15d10:	ldr	r0, [r4]
   15d14:	ldr	r1, [r0, #20]
   15d18:	ldr	r2, [r0, #24]
   15d1c:	cmp	r1, r2
   15d20:	bcs	15d3c <__assert_fail@plt+0x4738>
   15d24:	add	r2, r1, #1
   15d28:	str	r2, [r0, #20]
   15d2c:	strb	sl, [r1]
   15d30:	subs	r5, r5, #1
   15d34:	bne	15d10 <__assert_fail@plt+0x470c>
   15d38:	b	15acc <__assert_fail@plt+0x44c8>
   15d3c:	mov	r1, #32
   15d40:	bl	11568 <__overflow@plt>
   15d44:	movw	lr, #8792	; 0x2258
   15d48:	movw	ip, #8664	; 0x21d8
   15d4c:	movt	lr, #3
   15d50:	movt	ip, #3
   15d54:	subs	r5, r5, #1
   15d58:	bne	15d10 <__assert_fail@plt+0x470c>
   15d5c:	b	15acc <__assert_fail@plt+0x44c8>
   15d60:	mvn	r6, #0
   15d64:	ldr	r1, [ip, #120]	; 0x78
   15d68:	cmp	r1, #1
   15d6c:	bge	15b08 <__assert_fail@plt+0x4504>
   15d70:	b	15ae0 <__assert_fail@plt+0x44dc>
   15d74:	ldr	r1, [ip, #120]	; 0x78
   15d78:	cmp	r1, #1
   15d7c:	blt	15e84 <__assert_fail@plt+0x4880>
   15d80:	movw	r8, #8792	; 0x2258
   15d84:	cmp	r1, #1
   15d88:	movt	r8, #3
   15d8c:	ldr	r0, [r8]
   15d90:	add	r5, r0, r1
   15d94:	beq	15e1c <__assert_fail@plt+0x4818>
   15d98:	movw	r6, #8504	; 0x2138
   15d9c:	movw	r7, #8652	; 0x21cc
   15da0:	movt	r6, #3
   15da4:	movt	r7, #3
   15da8:	ldr	r1, [r6, #8]
   15dac:	sdiv	r2, r0, r1
   15db0:	mul	r2, r2, r1
   15db4:	sub	r2, r2, r0
   15db8:	add	r1, r1, r2
   15dbc:	add	r4, r1, r0
   15dc0:	cmp	r5, r4
   15dc4:	blt	15e1c <__assert_fail@plt+0x4818>
   15dc8:	ldr	r0, [r7]
   15dcc:	ldrb	r1, [r6, #1]
   15dd0:	ldr	r2, [r0, #20]
   15dd4:	ldr	r3, [r0, #24]
   15dd8:	cmp	r2, r3
   15ddc:	bcs	15e00 <__assert_fail@plt+0x47fc>
   15de0:	add	r3, r2, #1
   15de4:	str	r3, [r0, #20]
   15de8:	strb	r1, [r2]
   15dec:	sub	r0, r5, r4
   15df0:	cmp	r0, #1
   15df4:	mov	r0, r4
   15df8:	bgt	15da8 <__assert_fail@plt+0x47a4>
   15dfc:	b	15e1c <__assert_fail@plt+0x4818>
   15e00:	bl	11568 <__overflow@plt>
   15e04:	movw	ip, #8664	; 0x21d8
   15e08:	movt	ip, #3
   15e0c:	sub	r0, r5, r4
   15e10:	cmp	r0, #1
   15e14:	mov	r0, r4
   15e18:	bgt	15da8 <__assert_fail@plt+0x47a4>
   15e1c:	cmp	r0, r5
   15e20:	bge	15e78 <__assert_fail@plt+0x4874>
   15e24:	movw	r6, #8652	; 0x21cc
   15e28:	sub	r4, r5, r0
   15e2c:	mov	r7, #32
   15e30:	movt	r6, #3
   15e34:	ldr	r0, [r6]
   15e38:	ldr	r1, [r0, #20]
   15e3c:	ldr	r2, [r0, #24]
   15e40:	cmp	r1, r2
   15e44:	bcs	15e60 <__assert_fail@plt+0x485c>
   15e48:	add	r2, r1, #1
   15e4c:	str	r2, [r0, #20]
   15e50:	strb	r7, [r1]
   15e54:	subs	r4, r4, #1
   15e58:	bne	15e34 <__assert_fail@plt+0x4830>
   15e5c:	b	15e78 <__assert_fail@plt+0x4874>
   15e60:	mov	r1, #32
   15e64:	bl	11568 <__overflow@plt>
   15e68:	movw	ip, #8664	; 0x21d8
   15e6c:	movt	ip, #3
   15e70:	subs	r4, r4, #1
   15e74:	bne	15e34 <__assert_fail@plt+0x4830>
   15e78:	mov	r0, #0
   15e7c:	str	r5, [r8]
   15e80:	str	r0, [ip, #120]	; 0x78
   15e84:	sub	sp, fp, #28
   15e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e8c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15e90:	add	fp, sp, #24
   15e94:	sub	sp, sp, #8
   15e98:	mov	r6, r0
   15e9c:	movw	r0, #8504	; 0x2138
   15ea0:	movw	r5, #8664	; 0x21d8
   15ea4:	movw	r8, #8792	; 0x2258
   15ea8:	movt	r0, #3
   15eac:	movt	r5, #3
   15eb0:	movt	r8, #3
   15eb4:	ldrb	r1, [r0]
   15eb8:	ldr	r9, [r5, #68]	; 0x44
   15ebc:	ldr	r0, [r0, #4]
   15ec0:	cmp	r1, r6
   15ec4:	movne	r0, #8
   15ec8:	cmp	r6, #9
   15ecc:	cmpne	r1, r6
   15ed0:	bne	15f34 <__assert_fail@plt+0x4930>
   15ed4:	ldr	r7, [r8, #8]
   15ed8:	sdiv	r1, r7, r0
   15edc:	mul	r1, r1, r0
   15ee0:	sub	r1, r1, r7
   15ee4:	add	r4, r0, r1
   15ee8:	ldrb	r0, [r5, #5]
   15eec:	cmp	r0, #1
   15ef0:	bne	15f9c <__assert_fail@plt+0x4998>
   15ef4:	cmp	r4, #0
   15ef8:	beq	16020 <__assert_fail@plt+0x4a1c>
   15efc:	mov	r0, r9
   15f00:	mov	r1, #32
   15f04:	mov	r2, r4
   15f08:	bl	11508 <memset@plt>
   15f0c:	mov	r0, r4
   15f10:	mov	r1, #0
   15f14:	cmn	r4, #1
   15f18:	bgt	15fb0 <__assert_fail@plt+0x49ac>
   15f1c:	cmp	r7, #0
   15f20:	bne	15fb0 <__assert_fail@plt+0x49ac>
   15f24:	mov	r0, #0
   15f28:	str	r1, [r8, #8]
   15f2c:	sub	sp, fp, #24
   15f30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15f34:	bl	11490 <__ctype_b_loc@plt>
   15f38:	ldr	r0, [r0]
   15f3c:	add	r0, r0, r6, lsl #1
   15f40:	ldrb	r0, [r0, #1]
   15f44:	tst	r0, #64	; 0x40
   15f48:	bne	15fd0 <__assert_fail@plt+0x49cc>
   15f4c:	ldrb	r0, [r5, #16]
   15f50:	cmp	r0, #1
   15f54:	bne	15ff0 <__assert_fail@plt+0x49ec>
   15f58:	movw	r3, #3221	; 0xc95
   15f5c:	mov	r0, #92	; 0x5c
   15f60:	mov	r1, #1
   15f64:	mov	r2, #4
   15f68:	mov	r4, #4
   15f6c:	movt	r3, #2
   15f70:	strb	r0, [r9]
   15f74:	add	r0, sp, #4
   15f78:	str	r6, [sp]
   15f7c:	bl	114f0 <__sprintf_chk@plt>
   15f80:	ldrb	r0, [sp, #4]
   15f84:	strb	r0, [r9, #1]
   15f88:	ldrb	r0, [sp, #5]
   15f8c:	strb	r0, [r9, #2]
   15f90:	ldrb	r0, [sp, #6]
   15f94:	strb	r0, [r9, #3]
   15f98:	b	15fd8 <__assert_fail@plt+0x49d4>
   15f9c:	strb	r6, [r9]
   15fa0:	mov	r0, #1
   15fa4:	mov	r1, #0
   15fa8:	cmn	r4, #1
   15fac:	ble	15f1c <__assert_fail@plt+0x4918>
   15fb0:	rsb	r2, r4, #0
   15fb4:	cmp	r7, r2
   15fb8:	bgt	15fe0 <__assert_fail@plt+0x49dc>
   15fbc:	cmp	r4, #0
   15fc0:	addpl	r1, r7, r4
   15fc4:	str	r1, [r8, #8]
   15fc8:	sub	sp, fp, #24
   15fcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15fd0:	mov	r4, #1
   15fd4:	strb	r6, [r9]
   15fd8:	ldr	r7, [r8, #8]
   15fdc:	mov	r0, r4
   15fe0:	add	r1, r7, r4
   15fe4:	str	r1, [r8, #8]
   15fe8:	sub	sp, fp, #24
   15fec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15ff0:	ldrb	r0, [r5, #3]
   15ff4:	cmp	r0, #1
   15ff8:	bne	16038 <__assert_fail@plt+0x4a34>
   15ffc:	sxtb	r0, r6
   16000:	cmp	r0, #0
   16004:	bmi	15f58 <__assert_fail@plt+0x4954>
   16008:	mov	r0, #94	; 0x5e
   1600c:	mov	r4, #2
   16010:	strb	r0, [r9]
   16014:	eor	r0, r6, #64	; 0x40
   16018:	strb	r0, [r9, #1]
   1601c:	b	15fd8 <__assert_fail@plt+0x49d4>
   16020:	mov	r4, #0
   16024:	mov	r0, #0
   16028:	add	r1, r7, r4
   1602c:	str	r1, [r8, #8]
   16030:	sub	sp, fp, #24
   16034:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16038:	strb	r6, [r9]
   1603c:	cmp	r6, #8
   16040:	mov	r4, #0
   16044:	mov	r0, #1
   16048:	ldr	r7, [r8, #8]
   1604c:	mvneq	r4, #0
   16050:	mov	r1, #0
   16054:	cmn	r4, #1
   16058:	ble	15f1c <__assert_fail@plt+0x4918>
   1605c:	b	15fb0 <__assert_fail@plt+0x49ac>
   16060:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16064:	add	fp, sp, #24
   16068:	sub	sp, sp, #8
   1606c:	movw	r6, #8504	; 0x2138
   16070:	movw	r8, #8664	; 0x21d8
   16074:	mov	r4, r0
   16078:	movw	r3, #3226	; 0xc9a
   1607c:	movt	r6, #3
   16080:	movt	r8, #3
   16084:	movt	r3, #2
   16088:	ldr	r1, [r6, #16]
   1608c:	ldr	r0, [r8, #64]	; 0x40
   16090:	ldr	r2, [r8, #48]	; 0x30
   16094:	stm	sp, {r1, r2}
   16098:	mov	r1, #1
   1609c:	mvn	r2, #0
   160a0:	bl	114f0 <__sprintf_chk@plt>
   160a4:	ldr	r1, [r8, #48]	; 0x30
   160a8:	ldr	r7, [r6, #16]
   160ac:	add	r1, r1, #1
   160b0:	cmp	r7, #1
   160b4:	str	r1, [r8, #48]	; 0x30
   160b8:	blt	160dc <__assert_fail@plt+0x4ad8>
   160bc:	ldr	r1, [r8, #64]	; 0x40
   160c0:	add	r5, r1, r0
   160c4:	ldrb	r0, [r5, -r7]
   160c8:	ldr	r1, [r4, #16]
   160cc:	blx	r1
   160d0:	sub	r7, r7, #1
   160d4:	cmp	r7, #0
   160d8:	bgt	160c4 <__assert_fail@plt+0x4ac0>
   160dc:	ldr	r0, [r6, #32]
   160e0:	cmp	r0, #2
   160e4:	blt	16124 <__assert_fail@plt+0x4b20>
   160e8:	ldrb	r0, [r6, #2]
   160ec:	cmp	r0, #9
   160f0:	bne	1619c <__assert_fail@plt+0x4b98>
   160f4:	ldr	r0, [r6, #16]
   160f8:	ldr	r1, [r8, #56]	; 0x38
   160fc:	sub	r6, r1, r0
   16100:	cmp	r6, #1
   16104:	blt	16164 <__assert_fail@plt+0x4b60>
   16108:	ldr	r1, [r4, #16]
   1610c:	mov	r0, #32
   16110:	blx	r1
   16114:	sub	r6, r6, #1
   16118:	cmp	r6, #0
   1611c:	bgt	16108 <__assert_fail@plt+0x4b04>
   16120:	b	16164 <__assert_fail@plt+0x4b60>
   16124:	ldrb	r0, [r6, #2]
   16128:	ldr	r1, [r4, #16]
   1612c:	blx	r1
   16130:	ldrb	r0, [r6, #2]
   16134:	cmp	r0, #9
   16138:	bne	16164 <__assert_fail@plt+0x4b60>
   1613c:	movw	r0, #8792	; 0x2258
   16140:	ldr	r2, [r6, #8]
   16144:	movt	r0, #3
   16148:	ldr	r1, [r0]
   1614c:	sdiv	r7, r1, r2
   16150:	add	r3, r2, r1
   16154:	mul	r2, r7, r2
   16158:	sub	r1, r2, r1
   1615c:	add	r1, r3, r1
   16160:	str	r1, [r0]
   16164:	ldrb	r0, [r8, #17]
   16168:	cmp	r0, #1
   1616c:	bne	161b0 <__assert_fail@plt+0x4bac>
   16170:	ldrb	r0, [r8, #9]
   16174:	cmp	r0, #0
   16178:	bne	161b0 <__assert_fail@plt+0x4bac>
   1617c:	movw	r1, #8792	; 0x2258
   16180:	ldr	r0, [r8, #56]	; 0x38
   16184:	movt	r1, #3
   16188:	ldr	r2, [r1, #8]
   1618c:	add	r0, r2, r0
   16190:	str	r0, [r1, #8]
   16194:	sub	sp, fp, #24
   16198:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1619c:	ldr	r1, [r4, #16]
   161a0:	blx	r1
   161a4:	ldrb	r0, [r8, #17]
   161a8:	cmp	r0, #1
   161ac:	beq	16170 <__assert_fail@plt+0x4b6c>
   161b0:	sub	sp, fp, #24
   161b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161b8:	push	{r4, r5, fp, lr}
   161bc:	add	fp, sp, #8
   161c0:	ldr	r5, [r0]
   161c4:	mov	r4, r0
   161c8:	ldmib	r5, {r0, r1}
   161cc:	cmp	r0, r1
   161d0:	bcs	161fc <__assert_fail@plt+0x4bf8>
   161d4:	add	r1, r0, #1
   161d8:	str	r1, [r5, #4]
   161dc:	ldrb	r0, [r0]
   161e0:	cmn	r0, #1
   161e4:	beq	1620c <__assert_fail@plt+0x4c08>
   161e8:	cmp	r0, #10
   161ec:	beq	162f4 <__assert_fail@plt+0x4cf0>
   161f0:	cmp	r0, #12
   161f4:	bne	161c8 <__assert_fail@plt+0x4bc4>
   161f8:	b	16218 <__assert_fail@plt+0x4c14>
   161fc:	mov	r0, r5
   16200:	bl	1155c <__uflow@plt>
   16204:	cmn	r0, #1
   16208:	bne	161e8 <__assert_fail@plt+0x4be4>
   1620c:	mov	r0, r4
   16210:	pop	{r4, r5, fp, lr}
   16214:	b	14ba0 <__assert_fail@plt+0x359c>
   16218:	ldmib	r5, {r0, r1}
   1621c:	cmp	r0, r1
   16220:	bcs	162f8 <__assert_fail@plt+0x4cf4>
   16224:	add	r1, r0, #1
   16228:	str	r1, [r5, #4]
   1622c:	ldrb	r0, [r0]
   16230:	cmp	r0, #10
   16234:	beq	16240 <__assert_fail@plt+0x4c3c>
   16238:	mov	r1, r5
   1623c:	bl	114d8 <ungetc@plt>
   16240:	movw	r0, #8664	; 0x21d8
   16244:	movt	r0, #3
   16248:	ldrb	r1, [r0, #15]
   1624c:	cmp	r1, #1
   16250:	moveq	r1, #1
   16254:	strbeq	r1, [r0, #25]
   16258:	ldrb	r1, [r0, #9]
   1625c:	cmp	r1, #0
   16260:	beq	16270 <__assert_fail@plt+0x4c6c>
   16264:	mov	r1, #2
   16268:	str	r1, [r4, #8]
   1626c:	b	162e0 <__assert_fail@plt+0x4cdc>
   16270:	movw	r1, #8504	; 0x2138
   16274:	movt	r1, #3
   16278:	ldr	r1, [r1, #32]
   1627c:	cmp	r1, #0
   16280:	beq	162e0 <__assert_fail@plt+0x4cdc>
   16284:	ldrb	r3, [r0, #1]
   16288:	mov	r2, #1
   1628c:	sub	ip, r1, #1
   16290:	cmp	r3, #0
   16294:	ldr	r3, [r0, #76]	; 0x4c
   16298:	movwne	r2, #2
   1629c:	ands	r5, r1, #3
   162a0:	beq	162b8 <__assert_fail@plt+0x4cb4>
   162a4:	str	r2, [r3, #8]
   162a8:	subs	r5, r5, #1
   162ac:	sub	r1, r1, #1
   162b0:	add	r3, r3, #40	; 0x28
   162b4:	bne	162a4 <__assert_fail@plt+0x4ca0>
   162b8:	cmp	ip, #3
   162bc:	bcc	162e0 <__assert_fail@plt+0x4cdc>
   162c0:	add	r3, r3, #128	; 0x80
   162c4:	str	r2, [r3]
   162c8:	str	r2, [r3, #-40]	; 0xffffffd8
   162cc:	str	r2, [r3, #-80]	; 0xffffffb0
   162d0:	str	r2, [r3, #-120]	; 0xffffff88
   162d4:	add	r3, r3, #160	; 0xa0
   162d8:	subs	r1, r1, #4
   162dc:	bne	162c4 <__assert_fail@plt+0x4cc0>
   162e0:	mov	r1, #0
   162e4:	str	r1, [r4, #28]
   162e8:	ldr	r1, [r0, #80]	; 0x50
   162ec:	sub	r1, r1, #1
   162f0:	str	r1, [r0, #80]	; 0x50
   162f4:	pop	{r4, r5, fp, pc}
   162f8:	mov	r0, r5
   162fc:	bl	1155c <__uflow@plt>
   16300:	cmp	r0, #10
   16304:	bne	16238 <__assert_fail@plt+0x4c34>
   16308:	b	16240 <__assert_fail@plt+0x4c3c>
   1630c:	movw	r1, #8832	; 0x2280
   16310:	movt	r1, #3
   16314:	str	r0, [r1, #4]
   16318:	bx	lr
   1631c:	movw	r1, #8832	; 0x2280
   16320:	movt	r1, #3
   16324:	strb	r0, [r1]
   16328:	bx	lr
   1632c:	push	{r4, r5, r6, sl, fp, lr}
   16330:	add	fp, sp, #16
   16334:	sub	sp, sp, #8
   16338:	movw	r0, #8652	; 0x21cc
   1633c:	movt	r0, #3
   16340:	ldr	r0, [r0]
   16344:	bl	1f350 <__assert_fail@plt+0xdd4c>
   16348:	cmp	r0, #0
   1634c:	beq	16374 <__assert_fail@plt+0x4d70>
   16350:	movw	r5, #8832	; 0x2280
   16354:	movt	r5, #3
   16358:	ldrb	r0, [r5]
   1635c:	cmp	r0, #0
   16360:	beq	163a0 <__assert_fail@plt+0x4d9c>
   16364:	bl	114e4 <__errno_location@plt>
   16368:	ldr	r0, [r0]
   1636c:	cmp	r0, #32
   16370:	bne	163a0 <__assert_fail@plt+0x4d9c>
   16374:	movw	r0, #8640	; 0x21c0
   16378:	movt	r0, #3
   1637c:	ldr	r0, [r0]
   16380:	bl	1f350 <__assert_fail@plt+0xdd4c>
   16384:	cmp	r0, #0
   16388:	subeq	sp, fp, #16
   1638c:	popeq	{r4, r5, r6, sl, fp, pc}
   16390:	movw	r0, #8556	; 0x216c
   16394:	movt	r0, #3
   16398:	ldr	r0, [r0]
   1639c:	bl	1134c <_exit@plt>
   163a0:	movw	r1, #4231	; 0x1087
   163a4:	mov	r0, #0
   163a8:	mov	r2, #5
   163ac:	movt	r1, #2
   163b0:	bl	1137c <dcgettext@plt>
   163b4:	ldr	r6, [r5, #4]
   163b8:	mov	r4, r0
   163bc:	bl	114e4 <__errno_location@plt>
   163c0:	ldr	r5, [r0]
   163c4:	cmp	r6, #0
   163c8:	bne	163e4 <__assert_fail@plt+0x4de0>
   163cc:	movw	r2, #4247	; 0x1097
   163d0:	mov	r0, #0
   163d4:	mov	r1, r5
   163d8:	mov	r3, r4
   163dc:	movt	r2, #2
   163e0:	b	16404 <__assert_fail@plt+0x4e00>
   163e4:	mov	r0, r6
   163e8:	bl	1a6e0 <__assert_fail@plt+0x90dc>
   163ec:	movw	r2, #4243	; 0x1093
   163f0:	mov	r3, r0
   163f4:	str	r4, [sp]
   163f8:	mov	r0, #0
   163fc:	mov	r1, r5
   16400:	movt	r2, #2
   16404:	bl	11418 <error@plt>
   16408:	movw	r0, #8556	; 0x216c
   1640c:	movt	r0, #3
   16410:	ldr	r0, [r0]
   16414:	bl	1134c <_exit@plt>
   16418:	b	11304 <posix_fadvise64@plt>
   1641c:	cmp	r0, #0
   16420:	bxeq	lr
   16424:	push	{r4, sl, fp, lr}
   16428:	add	fp, sp, #8
   1642c:	sub	sp, sp, #16
   16430:	mov	r4, r1
   16434:	bl	11520 <fileno@plt>
   16438:	mov	r1, #0
   1643c:	mov	r2, #0
   16440:	mov	r3, #0
   16444:	str	r1, [sp]
   16448:	stmib	sp, {r1, r4}
   1644c:	bl	11304 <posix_fadvise64@plt>
   16450:	sub	sp, fp, #8
   16454:	pop	{r4, sl, fp, pc}
   16458:	push	{r4, r5, r6, sl, fp, lr}
   1645c:	add	fp, sp, #16
   16460:	sub	sp, sp, #8
   16464:	mov	r4, r0
   16468:	bl	11520 <fileno@plt>
   1646c:	cmn	r0, #1
   16470:	ble	164e4 <__assert_fail@plt+0x4ee0>
   16474:	mov	r0, r4
   16478:	bl	11454 <__freading@plt>
   1647c:	cmp	r0, #0
   16480:	beq	164ac <__assert_fail@plt+0x4ea8>
   16484:	mov	r0, r4
   16488:	bl	11520 <fileno@plt>
   1648c:	mov	r1, #1
   16490:	mov	r2, #0
   16494:	mov	r3, #0
   16498:	str	r1, [sp]
   1649c:	bl	113e8 <lseek64@plt>
   164a0:	and	r0, r0, r1
   164a4:	cmn	r0, #1
   164a8:	beq	164e4 <__assert_fail@plt+0x4ee0>
   164ac:	mov	r0, r4
   164b0:	bl	164f4 <__assert_fail@plt+0x4ef0>
   164b4:	cmp	r0, #0
   164b8:	beq	164e4 <__assert_fail@plt+0x4ee0>
   164bc:	bl	114e4 <__errno_location@plt>
   164c0:	ldr	r6, [r0]
   164c4:	mov	r5, r0
   164c8:	mov	r0, r4
   164cc:	bl	11538 <fclose@plt>
   164d0:	cmp	r6, #0
   164d4:	strne	r6, [r5]
   164d8:	mvnne	r0, #0
   164dc:	sub	sp, fp, #16
   164e0:	pop	{r4, r5, r6, sl, fp, pc}
   164e4:	mov	r0, r4
   164e8:	sub	sp, fp, #16
   164ec:	pop	{r4, r5, r6, sl, fp, lr}
   164f0:	b	11538 <fclose@plt>
   164f4:	push	{r4, sl, fp, lr}
   164f8:	add	fp, sp, #8
   164fc:	sub	sp, sp, #8
   16500:	mov	r4, r0
   16504:	cmp	r0, #0
   16508:	beq	16540 <__assert_fail@plt+0x4f3c>
   1650c:	mov	r0, r4
   16510:	bl	11454 <__freading@plt>
   16514:	cmp	r0, #0
   16518:	beq	16540 <__assert_fail@plt+0x4f3c>
   1651c:	ldrb	r0, [r4, #1]
   16520:	tst	r0, #1
   16524:	beq	16540 <__assert_fail@plt+0x4f3c>
   16528:	mov	r0, #1
   1652c:	mov	r2, #0
   16530:	mov	r3, #0
   16534:	str	r0, [sp]
   16538:	mov	r0, r4
   1653c:	bl	16628 <__assert_fail@plt+0x5024>
   16540:	mov	r0, r4
   16544:	sub	sp, fp, #8
   16548:	pop	{r4, sl, fp, lr}
   1654c:	b	1131c <fflush@plt>
   16550:	push	{r4, r5, r6, r7, fp, lr}
   16554:	add	fp, sp, #16
   16558:	mov	r5, r1
   1655c:	bl	115bc <fopen64@plt>
   16560:	mov	r4, #0
   16564:	cmp	r0, #0
   16568:	beq	165d0 <__assert_fail@plt+0x4fcc>
   1656c:	mov	r6, r0
   16570:	bl	11520 <fileno@plt>
   16574:	cmp	r0, #2
   16578:	bhi	165d8 <__assert_fail@plt+0x4fd4>
   1657c:	bl	1b2b8 <__assert_fail@plt+0x9cb4>
   16580:	cmn	r0, #1
   16584:	ble	165e0 <__assert_fail@plt+0x4fdc>
   16588:	mov	r7, r0
   1658c:	mov	r0, r6
   16590:	bl	16458 <__assert_fail@plt+0x4e54>
   16594:	cmp	r0, #0
   16598:	bne	165b4 <__assert_fail@plt+0x4fb0>
   1659c:	mov	r0, r7
   165a0:	mov	r1, r5
   165a4:	bl	112b0 <fdopen@plt>
   165a8:	mov	r4, r0
   165ac:	cmp	r0, #0
   165b0:	bne	165d0 <__assert_fail@plt+0x4fcc>
   165b4:	bl	114e4 <__errno_location@plt>
   165b8:	ldr	r5, [r0]
   165bc:	mov	r4, r0
   165c0:	mov	r0, r7
   165c4:	bl	115f8 <close@plt>
   165c8:	str	r5, [r4]
   165cc:	mov	r4, #0
   165d0:	mov	r0, r4
   165d4:	pop	{r4, r5, r6, r7, fp, pc}
   165d8:	mov	r0, r6
   165dc:	pop	{r4, r5, r6, r7, fp, pc}
   165e0:	bl	114e4 <__errno_location@plt>
   165e4:	ldr	r7, [r0]
   165e8:	mov	r5, r0
   165ec:	mov	r0, r6
   165f0:	bl	16458 <__assert_fail@plt+0x4e54>
   165f4:	mov	r0, r4
   165f8:	str	r7, [r5]
   165fc:	pop	{r4, r5, r6, r7, fp, pc}
   16600:	push	{r4, r5, r6, sl, fp, lr}
   16604:	add	fp, sp, #16
   16608:	mov	r4, r0
   1660c:	bl	114e4 <__errno_location@plt>
   16610:	ldr	r6, [r0]
   16614:	mov	r5, r0
   16618:	mov	r0, r4
   1661c:	bl	11334 <free@plt>
   16620:	str	r6, [r5]
   16624:	pop	{r4, r5, r6, sl, fp, pc}
   16628:	push	{r4, r5, r6, r7, fp, lr}
   1662c:	add	fp, sp, #16
   16630:	sub	sp, sp, #8
   16634:	mov	r4, r0
   16638:	ldr	r0, [r0, #4]
   1663c:	mov	r5, r3
   16640:	mov	r6, r2
   16644:	ldr	r1, [r4, #8]
   16648:	cmp	r1, r0
   1664c:	bne	16668 <__assert_fail@plt+0x5064>
   16650:	ldrd	r0, [r4, #16]
   16654:	cmp	r1, r0
   16658:	bne	16668 <__assert_fail@plt+0x5064>
   1665c:	ldr	r0, [r4, #36]	; 0x24
   16660:	cmp	r0, #0
   16664:	beq	16680 <__assert_fail@plt+0x507c>
   16668:	mov	r0, r4
   1666c:	mov	r2, r6
   16670:	mov	r3, r5
   16674:	sub	sp, fp, #16
   16678:	pop	{r4, r5, r6, r7, fp, lr}
   1667c:	b	11544 <fseeko64@plt>
   16680:	ldr	r7, [fp, #8]
   16684:	mov	r0, r4
   16688:	bl	11520 <fileno@plt>
   1668c:	mov	r2, r6
   16690:	mov	r3, r5
   16694:	str	r7, [sp]
   16698:	bl	113e8 <lseek64@plt>
   1669c:	and	r2, r0, r1
   166a0:	cmn	r2, #1
   166a4:	beq	166c4 <__assert_fail@plt+0x50c0>
   166a8:	strd	r0, [r4, #80]	; 0x50
   166ac:	ldr	r0, [r4]
   166b0:	bic	r0, r0, #16
   166b4:	str	r0, [r4]
   166b8:	mov	r0, #0
   166bc:	sub	sp, fp, #16
   166c0:	pop	{r4, r5, r6, r7, fp, pc}
   166c4:	mvn	r0, #0
   166c8:	sub	sp, fp, #16
   166cc:	pop	{r4, r5, r6, r7, fp, pc}
   166d0:	mov	r1, r0
   166d4:	mov	r0, #0
   166d8:	b	11340 <clock_gettime@plt>
   166dc:	push	{fp, lr}
   166e0:	mov	fp, sp
   166e4:	mov	r1, r0
   166e8:	mov	r0, #0
   166ec:	bl	11340 <clock_gettime@plt>
   166f0:	pop	{fp, pc}
   166f4:	push	{r4, sl, fp, lr}
   166f8:	add	fp, sp, #8
   166fc:	sub	sp, sp, #264	; 0x108
   16700:	add	r1, sp, #7
   16704:	movw	r2, #257	; 0x101
   16708:	bl	1aa80 <__assert_fail@plt+0x947c>
   1670c:	mov	r4, #0
   16710:	cmp	r0, #0
   16714:	bne	16754 <__assert_fail@plt+0x5150>
   16718:	movw	r1, #4250	; 0x109a
   1671c:	add	r0, sp, #7
   16720:	mov	r2, #2
   16724:	movt	r1, #2
   16728:	bl	114a8 <bcmp@plt>
   1672c:	cmp	r0, #0
   16730:	beq	16754 <__assert_fail@plt+0x5150>
   16734:	movw	r1, #4252	; 0x109c
   16738:	add	r0, sp, #7
   1673c:	mov	r2, #6
   16740:	movt	r1, #2
   16744:	bl	114a8 <bcmp@plt>
   16748:	cmp	r0, #0
   1674c:	mov	r4, r0
   16750:	movwne	r4, #1
   16754:	mov	r0, r4
   16758:	sub	sp, fp, #8
   1675c:	pop	{r4, sl, fp, pc}
   16760:	push	{r4, r5, r6, sl, fp, lr}
   16764:	add	fp, sp, #16
   16768:	mov	r5, r0
   1676c:	mov	r0, #0
   16770:	mov	r4, r1
   16774:	add	r6, r2, #19
   16778:	cmp	r1, #0
   1677c:	strb	r0, [r2, #20]
   16780:	bmi	167d0 <__assert_fail@plt+0x51cc>
   16784:	mov	r0, r5
   16788:	mov	r1, r4
   1678c:	mov	r2, #10
   16790:	mov	r3, #0
   16794:	bl	1f68c <__assert_fail@plt+0xe088>
   16798:	add	r2, r0, r0, lsl #2
   1679c:	sub	r2, r5, r2, lsl #1
   167a0:	add	r2, r2, #48	; 0x30
   167a4:	strb	r2, [r6], #-1
   167a8:	adds	r2, r5, #9
   167ac:	mov	r5, r0
   167b0:	adc	r3, r4, #0
   167b4:	rsbs	r2, r2, #18
   167b8:	mov	r4, r1
   167bc:	rscs	r2, r3, #0
   167c0:	bcc	16784 <__assert_fail@plt+0x5180>
   167c4:	add	r6, r6, #1
   167c8:	mov	r0, r6
   167cc:	pop	{r4, r5, r6, sl, fp, pc}
   167d0:	mov	r0, r5
   167d4:	mov	r1, r4
   167d8:	mov	r2, #10
   167dc:	mov	r3, #0
   167e0:	bl	1f68c <__assert_fail@plt+0xe088>
   167e4:	add	r2, r0, r0, lsl #2
   167e8:	rsb	r2, r5, r2, lsl #1
   167ec:	add	r2, r2, #48	; 0x30
   167f0:	strb	r2, [r6], #-1
   167f4:	adds	r2, r5, #9
   167f8:	mov	r5, r0
   167fc:	adc	r3, r4, #0
   16800:	rsbs	r2, r2, #18
   16804:	mov	r4, r1
   16808:	rscs	r2, r3, #0
   1680c:	bcc	167d0 <__assert_fail@plt+0x51cc>
   16810:	mov	r0, #45	; 0x2d
   16814:	strb	r0, [r6]
   16818:	mov	r0, r6
   1681c:	pop	{r4, r5, r6, sl, fp, pc}
   16820:	push	{r4, r5, fp, lr}
   16824:	add	fp, sp, #8
   16828:	mov	r4, r1
   1682c:	mov	r5, r0
   16830:	bl	114b4 <strlen@plt>
   16834:	mov	r1, r0
   16838:	mov	r0, r5
   1683c:	mov	r2, r4
   16840:	pop	{r4, r5, fp, lr}
   16844:	b	16848 <__assert_fail@plt+0x5244>
   16848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1684c:	add	fp, sp, #28
   16850:	sub	sp, sp, #20
   16854:	mov	r5, r2
   16858:	mov	r6, r1
   1685c:	mov	r4, r0
   16860:	add	r7, r0, r1
   16864:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   16868:	cmp	r0, #1
   1686c:	bls	16b2c <__assert_fail@plt+0x5528>
   16870:	cmp	r6, #1
   16874:	blt	16b80 <__assert_fail@plt+0x557c>
   16878:	and	r2, r5, #1
   1687c:	mov	r3, #0
   16880:	add	r8, sp, #4
   16884:	add	r9, sp, #8
   16888:	mvn	sl, #-2147483648	; 0x80000000
   1688c:	tst	r5, #2
   16890:	bne	16b90 <__assert_fail@plt+0x558c>
   16894:	mov	r5, #0
   16898:	ldrb	r0, [r4]
   1689c:	sub	r0, r0, #32
   168a0:	cmp	r0, #94	; 0x5e
   168a4:	bhi	16a40 <__assert_fail@plt+0x543c>
   168a8:	add	r1, pc, #0
   168ac:	ldr	pc, [r1, r0, lsl #2]
   168b0:	andeq	r6, r1, ip, lsr #20
   168b4:	andeq	r6, r1, ip, lsr #20
   168b8:	andeq	r6, r1, ip, lsr #20
   168bc:	andeq	r6, r1, ip, lsr #20
   168c0:	andeq	r6, r1, r0, asr #20
   168c4:	andeq	r6, r1, ip, lsr #20
   168c8:	andeq	r6, r1, ip, lsr #20
   168cc:	andeq	r6, r1, ip, lsr #20
   168d0:	andeq	r6, r1, ip, lsr #20
   168d4:	andeq	r6, r1, ip, lsr #20
   168d8:	andeq	r6, r1, ip, lsr #20
   168dc:	andeq	r6, r1, ip, lsr #20
   168e0:	andeq	r6, r1, ip, lsr #20
   168e4:	andeq	r6, r1, ip, lsr #20
   168e8:	andeq	r6, r1, ip, lsr #20
   168ec:	andeq	r6, r1, ip, lsr #20
   168f0:	andeq	r6, r1, ip, lsr #20
   168f4:	andeq	r6, r1, ip, lsr #20
   168f8:	andeq	r6, r1, ip, lsr #20
   168fc:	andeq	r6, r1, ip, lsr #20
   16900:	andeq	r6, r1, ip, lsr #20
   16904:	andeq	r6, r1, ip, lsr #20
   16908:	andeq	r6, r1, ip, lsr #20
   1690c:	andeq	r6, r1, ip, lsr #20
   16910:	andeq	r6, r1, ip, lsr #20
   16914:	andeq	r6, r1, ip, lsr #20
   16918:	andeq	r6, r1, ip, lsr #20
   1691c:	andeq	r6, r1, ip, lsr #20
   16920:	andeq	r6, r1, ip, lsr #20
   16924:	andeq	r6, r1, ip, lsr #20
   16928:	andeq	r6, r1, ip, lsr #20
   1692c:	andeq	r6, r1, ip, lsr #20
   16930:	andeq	r6, r1, r0, asr #20
   16934:	andeq	r6, r1, ip, lsr #20
   16938:	andeq	r6, r1, ip, lsr #20
   1693c:	andeq	r6, r1, ip, lsr #20
   16940:	andeq	r6, r1, ip, lsr #20
   16944:	andeq	r6, r1, ip, lsr #20
   16948:	andeq	r6, r1, ip, lsr #20
   1694c:	andeq	r6, r1, ip, lsr #20
   16950:	andeq	r6, r1, ip, lsr #20
   16954:	andeq	r6, r1, ip, lsr #20
   16958:	andeq	r6, r1, ip, lsr #20
   1695c:	andeq	r6, r1, ip, lsr #20
   16960:	andeq	r6, r1, ip, lsr #20
   16964:	andeq	r6, r1, ip, lsr #20
   16968:	andeq	r6, r1, ip, lsr #20
   1696c:	andeq	r6, r1, ip, lsr #20
   16970:	andeq	r6, r1, ip, lsr #20
   16974:	andeq	r6, r1, ip, lsr #20
   16978:	andeq	r6, r1, ip, lsr #20
   1697c:	andeq	r6, r1, ip, lsr #20
   16980:	andeq	r6, r1, ip, lsr #20
   16984:	andeq	r6, r1, ip, lsr #20
   16988:	andeq	r6, r1, ip, lsr #20
   1698c:	andeq	r6, r1, ip, lsr #20
   16990:	andeq	r6, r1, ip, lsr #20
   16994:	andeq	r6, r1, ip, lsr #20
   16998:	andeq	r6, r1, ip, lsr #20
   1699c:	andeq	r6, r1, ip, lsr #20
   169a0:	andeq	r6, r1, ip, lsr #20
   169a4:	andeq	r6, r1, ip, lsr #20
   169a8:	andeq	r6, r1, ip, lsr #20
   169ac:	andeq	r6, r1, ip, lsr #20
   169b0:	andeq	r6, r1, r0, asr #20
   169b4:	andeq	r6, r1, ip, lsr #20
   169b8:	andeq	r6, r1, ip, lsr #20
   169bc:	andeq	r6, r1, ip, lsr #20
   169c0:	andeq	r6, r1, ip, lsr #20
   169c4:	andeq	r6, r1, ip, lsr #20
   169c8:	andeq	r6, r1, ip, lsr #20
   169cc:	andeq	r6, r1, ip, lsr #20
   169d0:	andeq	r6, r1, ip, lsr #20
   169d4:	andeq	r6, r1, ip, lsr #20
   169d8:	andeq	r6, r1, ip, lsr #20
   169dc:	andeq	r6, r1, ip, lsr #20
   169e0:	andeq	r6, r1, ip, lsr #20
   169e4:	andeq	r6, r1, ip, lsr #20
   169e8:	andeq	r6, r1, ip, lsr #20
   169ec:	andeq	r6, r1, ip, lsr #20
   169f0:	andeq	r6, r1, ip, lsr #20
   169f4:	andeq	r6, r1, ip, lsr #20
   169f8:	andeq	r6, r1, ip, lsr #20
   169fc:	andeq	r6, r1, ip, lsr #20
   16a00:	andeq	r6, r1, ip, lsr #20
   16a04:	andeq	r6, r1, ip, lsr #20
   16a08:	andeq	r6, r1, ip, lsr #20
   16a0c:	andeq	r6, r1, ip, lsr #20
   16a10:	andeq	r6, r1, ip, lsr #20
   16a14:	andeq	r6, r1, ip, lsr #20
   16a18:	andeq	r6, r1, ip, lsr #20
   16a1c:	andeq	r6, r1, ip, lsr #20
   16a20:	andeq	r6, r1, ip, lsr #20
   16a24:	andeq	r6, r1, ip, lsr #20
   16a28:	andeq	r6, r1, ip, lsr #20
   16a2c:	add	r5, r5, #1
   16a30:	add	r4, r4, #1
   16a34:	cmp	r4, r7
   16a38:	bcc	16898 <__assert_fail@plt+0x5294>
   16a3c:	b	16e24 <__assert_fail@plt+0x5820>
   16a40:	str	r2, [sp]
   16a44:	str	r3, [sp, #12]
   16a48:	str	r3, [sp, #8]
   16a4c:	b	16a74 <__assert_fail@plt+0x5470>
   16a50:	ldr	r0, [sp, #4]
   16a54:	bl	113ac <iswcntrl@plt>
   16a58:	cmp	r0, #0
   16a5c:	beq	16ae0 <__assert_fail@plt+0x54dc>
   16a60:	mov	r0, r9
   16a64:	add	r4, r4, r6
   16a68:	bl	11370 <mbsinit@plt>
   16a6c:	cmp	r0, #0
   16a70:	bne	16b18 <__assert_fail@plt+0x5514>
   16a74:	sub	r2, r7, r4
   16a78:	mov	r0, r8
   16a7c:	mov	r1, r4
   16a80:	mov	r3, r9
   16a84:	bl	1f5ec <__assert_fail@plt+0xdfe8>
   16a88:	cmp	r0, #0
   16a8c:	beq	16ac8 <__assert_fail@plt+0x54c4>
   16a90:	mov	r6, r0
   16a94:	cmn	r0, #2
   16a98:	beq	16af0 <__assert_fail@plt+0x54ec>
   16a9c:	cmn	r6, #1
   16aa0:	beq	16b04 <__assert_fail@plt+0x5500>
   16aa4:	ldr	r0, [sp, #4]
   16aa8:	bl	11328 <wcwidth@plt>
   16aac:	cmn	r0, #1
   16ab0:	ble	16a50 <__assert_fail@plt+0x544c>
   16ab4:	sub	r1, sl, r5
   16ab8:	cmp	r0, r1
   16abc:	bgt	16e30 <__assert_fail@plt+0x582c>
   16ac0:	add	r5, r0, r5
   16ac4:	b	16a60 <__assert_fail@plt+0x545c>
   16ac8:	mov	r6, #1
   16acc:	ldr	r0, [sp, #4]
   16ad0:	bl	11328 <wcwidth@plt>
   16ad4:	cmn	r0, #1
   16ad8:	bgt	16ab4 <__assert_fail@plt+0x54b0>
   16adc:	b	16a50 <__assert_fail@plt+0x544c>
   16ae0:	cmn	r5, #-2147483647	; 0x80000001
   16ae4:	beq	16e30 <__assert_fail@plt+0x582c>
   16ae8:	add	r5, r5, #1
   16aec:	b	16a60 <__assert_fail@plt+0x545c>
   16af0:	ldr	r0, [sp]
   16af4:	mov	r4, r7
   16af8:	cmp	r0, #0
   16afc:	beq	16b14 <__assert_fail@plt+0x5510>
   16b00:	b	16e40 <__assert_fail@plt+0x583c>
   16b04:	ldr	r0, [sp]
   16b08:	cmp	r0, #0
   16b0c:	bne	16e40 <__assert_fail@plt+0x583c>
   16b10:	add	r4, r4, #1
   16b14:	add	r5, r5, #1
   16b18:	ldr	r2, [sp]
   16b1c:	mov	r3, #0
   16b20:	cmp	r4, r7
   16b24:	bcc	16898 <__assert_fail@plt+0x5294>
   16b28:	b	16e24 <__assert_fail@plt+0x5820>
   16b2c:	cmp	r6, #1
   16b30:	blt	16b80 <__assert_fail@plt+0x557c>
   16b34:	bl	11490 <__ctype_b_loc@plt>
   16b38:	ldr	r0, [r0]
   16b3c:	tst	r5, #2
   16b40:	bne	16df4 <__assert_fail@plt+0x57f0>
   16b44:	mov	r5, #0
   16b48:	b	16b60 <__assert_fail@plt+0x555c>
   16b4c:	cmn	r5, #-2147483647	; 0x80000001
   16b50:	beq	16e30 <__assert_fail@plt+0x582c>
   16b54:	add	r5, r5, #1
   16b58:	cmp	r4, r7
   16b5c:	bcs	16e24 <__assert_fail@plt+0x5820>
   16b60:	ldrb	r1, [r4], #1
   16b64:	add	r1, r0, r1, lsl #1
   16b68:	ldrh	r1, [r1]
   16b6c:	tst	r1, #16384	; 0x4000
   16b70:	bne	16b4c <__assert_fail@plt+0x5548>
   16b74:	tst	r1, #2
   16b78:	beq	16b4c <__assert_fail@plt+0x5548>
   16b7c:	b	16b58 <__assert_fail@plt+0x5554>
   16b80:	mov	r5, #0
   16b84:	mov	r0, r5
   16b88:	sub	sp, fp, #28
   16b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b90:	mov	r5, #0
   16b94:	ldrb	r0, [r4]
   16b98:	sub	r0, r0, #32
   16b9c:	cmp	r0, #94	; 0x5e
   16ba0:	bhi	16d3c <__assert_fail@plt+0x5738>
   16ba4:	add	r1, pc, #0
   16ba8:	ldr	pc, [r1, r0, lsl #2]
   16bac:	andeq	r6, r1, r8, lsr #26
   16bb0:	andeq	r6, r1, r8, lsr #26
   16bb4:	andeq	r6, r1, r8, lsr #26
   16bb8:	andeq	r6, r1, r8, lsr #26
   16bbc:	andeq	r6, r1, ip, lsr sp
   16bc0:	andeq	r6, r1, r8, lsr #26
   16bc4:	andeq	r6, r1, r8, lsr #26
   16bc8:	andeq	r6, r1, r8, lsr #26
   16bcc:	andeq	r6, r1, r8, lsr #26
   16bd0:	andeq	r6, r1, r8, lsr #26
   16bd4:	andeq	r6, r1, r8, lsr #26
   16bd8:	andeq	r6, r1, r8, lsr #26
   16bdc:	andeq	r6, r1, r8, lsr #26
   16be0:	andeq	r6, r1, r8, lsr #26
   16be4:	andeq	r6, r1, r8, lsr #26
   16be8:	andeq	r6, r1, r8, lsr #26
   16bec:	andeq	r6, r1, r8, lsr #26
   16bf0:	andeq	r6, r1, r8, lsr #26
   16bf4:	andeq	r6, r1, r8, lsr #26
   16bf8:	andeq	r6, r1, r8, lsr #26
   16bfc:	andeq	r6, r1, r8, lsr #26
   16c00:	andeq	r6, r1, r8, lsr #26
   16c04:	andeq	r6, r1, r8, lsr #26
   16c08:	andeq	r6, r1, r8, lsr #26
   16c0c:	andeq	r6, r1, r8, lsr #26
   16c10:	andeq	r6, r1, r8, lsr #26
   16c14:	andeq	r6, r1, r8, lsr #26
   16c18:	andeq	r6, r1, r8, lsr #26
   16c1c:	andeq	r6, r1, r8, lsr #26
   16c20:	andeq	r6, r1, r8, lsr #26
   16c24:	andeq	r6, r1, r8, lsr #26
   16c28:	andeq	r6, r1, r8, lsr #26
   16c2c:	andeq	r6, r1, ip, lsr sp
   16c30:	andeq	r6, r1, r8, lsr #26
   16c34:	andeq	r6, r1, r8, lsr #26
   16c38:	andeq	r6, r1, r8, lsr #26
   16c3c:	andeq	r6, r1, r8, lsr #26
   16c40:	andeq	r6, r1, r8, lsr #26
   16c44:	andeq	r6, r1, r8, lsr #26
   16c48:	andeq	r6, r1, r8, lsr #26
   16c4c:	andeq	r6, r1, r8, lsr #26
   16c50:	andeq	r6, r1, r8, lsr #26
   16c54:	andeq	r6, r1, r8, lsr #26
   16c58:	andeq	r6, r1, r8, lsr #26
   16c5c:	andeq	r6, r1, r8, lsr #26
   16c60:	andeq	r6, r1, r8, lsr #26
   16c64:	andeq	r6, r1, r8, lsr #26
   16c68:	andeq	r6, r1, r8, lsr #26
   16c6c:	andeq	r6, r1, r8, lsr #26
   16c70:	andeq	r6, r1, r8, lsr #26
   16c74:	andeq	r6, r1, r8, lsr #26
   16c78:	andeq	r6, r1, r8, lsr #26
   16c7c:	andeq	r6, r1, r8, lsr #26
   16c80:	andeq	r6, r1, r8, lsr #26
   16c84:	andeq	r6, r1, r8, lsr #26
   16c88:	andeq	r6, r1, r8, lsr #26
   16c8c:	andeq	r6, r1, r8, lsr #26
   16c90:	andeq	r6, r1, r8, lsr #26
   16c94:	andeq	r6, r1, r8, lsr #26
   16c98:	andeq	r6, r1, r8, lsr #26
   16c9c:	andeq	r6, r1, r8, lsr #26
   16ca0:	andeq	r6, r1, r8, lsr #26
   16ca4:	andeq	r6, r1, r8, lsr #26
   16ca8:	andeq	r6, r1, r8, lsr #26
   16cac:	andeq	r6, r1, ip, lsr sp
   16cb0:	andeq	r6, r1, r8, lsr #26
   16cb4:	andeq	r6, r1, r8, lsr #26
   16cb8:	andeq	r6, r1, r8, lsr #26
   16cbc:	andeq	r6, r1, r8, lsr #26
   16cc0:	andeq	r6, r1, r8, lsr #26
   16cc4:	andeq	r6, r1, r8, lsr #26
   16cc8:	andeq	r6, r1, r8, lsr #26
   16ccc:	andeq	r6, r1, r8, lsr #26
   16cd0:	andeq	r6, r1, r8, lsr #26
   16cd4:	andeq	r6, r1, r8, lsr #26
   16cd8:	andeq	r6, r1, r8, lsr #26
   16cdc:	andeq	r6, r1, r8, lsr #26
   16ce0:	andeq	r6, r1, r8, lsr #26
   16ce4:	andeq	r6, r1, r8, lsr #26
   16ce8:	andeq	r6, r1, r8, lsr #26
   16cec:	andeq	r6, r1, r8, lsr #26
   16cf0:	andeq	r6, r1, r8, lsr #26
   16cf4:	andeq	r6, r1, r8, lsr #26
   16cf8:	andeq	r6, r1, r8, lsr #26
   16cfc:	andeq	r6, r1, r8, lsr #26
   16d00:	andeq	r6, r1, r8, lsr #26
   16d04:	andeq	r6, r1, r8, lsr #26
   16d08:	andeq	r6, r1, r8, lsr #26
   16d0c:	andeq	r6, r1, r8, lsr #26
   16d10:	andeq	r6, r1, r8, lsr #26
   16d14:	andeq	r6, r1, r8, lsr #26
   16d18:	andeq	r6, r1, r8, lsr #26
   16d1c:	andeq	r6, r1, r8, lsr #26
   16d20:	andeq	r6, r1, r8, lsr #26
   16d24:	andeq	r6, r1, r8, lsr #26
   16d28:	add	r5, r5, #1
   16d2c:	add	r4, r4, #1
   16d30:	cmp	r4, r7
   16d34:	bcc	16b94 <__assert_fail@plt+0x5590>
   16d38:	b	16e24 <__assert_fail@plt+0x5820>
   16d3c:	str	r2, [sp]
   16d40:	str	r3, [sp, #12]
   16d44:	str	r3, [sp, #8]
   16d48:	sub	r2, r7, r4
   16d4c:	mov	r0, r8
   16d50:	mov	r1, r4
   16d54:	mov	r3, r9
   16d58:	bl	1f5ec <__assert_fail@plt+0xdfe8>
   16d5c:	cmp	r0, #0
   16d60:	beq	16d7c <__assert_fail@plt+0x5778>
   16d64:	mov	r6, r0
   16d68:	cmn	r0, #2
   16d6c:	beq	16db8 <__assert_fail@plt+0x57b4>
   16d70:	cmn	r6, #1
   16d74:	bne	16d80 <__assert_fail@plt+0x577c>
   16d78:	b	16dcc <__assert_fail@plt+0x57c8>
   16d7c:	mov	r6, #1
   16d80:	ldr	r0, [sp, #4]
   16d84:	bl	11328 <wcwidth@plt>
   16d88:	cmp	r0, #0
   16d8c:	bmi	16e40 <__assert_fail@plt+0x583c>
   16d90:	sub	r1, sl, r5
   16d94:	cmp	r0, r1
   16d98:	bgt	16e30 <__assert_fail@plt+0x582c>
   16d9c:	add	r5, r0, r5
   16da0:	mov	r0, r9
   16da4:	add	r4, r4, r6
   16da8:	bl	11370 <mbsinit@plt>
   16dac:	cmp	r0, #0
   16db0:	beq	16d48 <__assert_fail@plt+0x5744>
   16db4:	b	16de0 <__assert_fail@plt+0x57dc>
   16db8:	ldr	r0, [sp]
   16dbc:	mov	r4, r7
   16dc0:	cmp	r0, #0
   16dc4:	beq	16ddc <__assert_fail@plt+0x57d8>
   16dc8:	b	16e40 <__assert_fail@plt+0x583c>
   16dcc:	ldr	r0, [sp]
   16dd0:	cmp	r0, #0
   16dd4:	bne	16e40 <__assert_fail@plt+0x583c>
   16dd8:	add	r4, r4, #1
   16ddc:	add	r5, r5, #1
   16de0:	ldr	r2, [sp]
   16de4:	mov	r3, #0
   16de8:	cmp	r4, r7
   16dec:	bcc	16b94 <__assert_fail@plt+0x5590>
   16df0:	b	16e24 <__assert_fail@plt+0x5820>
   16df4:	mov	r5, #0
   16df8:	ldrb	r1, [r4, r5]
   16dfc:	add	r1, r0, r1, lsl #1
   16e00:	ldrb	r1, [r1, #1]
   16e04:	tst	r1, #64	; 0x40
   16e08:	beq	16e40 <__assert_fail@plt+0x583c>
   16e0c:	cmn	r5, #-2147483647	; 0x80000001
   16e10:	beq	16e30 <__assert_fail@plt+0x582c>
   16e14:	add	r5, r5, #1
   16e18:	add	r1, r4, r5
   16e1c:	cmp	r1, r7
   16e20:	bcc	16df8 <__assert_fail@plt+0x57f4>
   16e24:	mov	r0, r5
   16e28:	sub	sp, fp, #28
   16e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e30:	mvn	r5, #-2147483648	; 0x80000000
   16e34:	mov	r0, r5
   16e38:	sub	sp, fp, #28
   16e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e40:	mvn	r5, #0
   16e44:	mov	r0, r5
   16e48:	sub	sp, fp, #28
   16e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e50:	push	{fp, lr}
   16e54:	mov	fp, sp
   16e58:	sub	sp, sp, #24
   16e5c:	mvn	ip, #0
   16e60:	str	ip, [sp, #8]
   16e64:	mov	ip, #0
   16e68:	str	ip, [sp, #4]
   16e6c:	str	ip, [sp]
   16e70:	ldr	ip, [fp, #12]
   16e74:	str	ip, [sp, #16]
   16e78:	ldr	ip, [fp, #8]
   16e7c:	str	ip, [sp, #12]
   16e80:	bl	16e8c <__assert_fail@plt+0x5888>
   16e84:	mov	sp, fp
   16e88:	pop	{fp, pc}
   16e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e90:	add	fp, sp, #28
   16e94:	sub	sp, sp, #140	; 0x8c
   16e98:	sub	sp, sp, #1024	; 0x400
   16e9c:	mov	r4, r3
   16ea0:	mov	r6, r2
   16ea4:	str	r1, [sp, #104]	; 0x68
   16ea8:	str	r0, [sp, #108]	; 0x6c
   16eac:	bl	114e4 <__errno_location@plt>
   16eb0:	mov	r2, r4
   16eb4:	ldrb	r3, [r6]
   16eb8:	str	r0, [sp, #76]	; 0x4c
   16ebc:	ldr	r0, [r0]
   16ec0:	movw	r5, #3108	; 0xc24
   16ec4:	ldr	r1, [r2, #8]!
   16ec8:	movt	r5, #2
   16ecc:	str	r0, [sp, #72]	; 0x48
   16ed0:	cmp	r1, #0
   16ed4:	mov	r7, r1
   16ed8:	movweq	r7, #12
   16edc:	cmp	r1, #12
   16ee0:	subgt	r7, r1, #12
   16ee4:	ldr	r1, [r2, #32]
   16ee8:	cmp	r1, #0
   16eec:	movne	r5, r1
   16ef0:	cmp	r3, #0
   16ef4:	beq	18a4c <__assert_fail@plt+0x7448>
   16ef8:	sub	r0, fp, #48	; 0x30
   16efc:	mvn	r1, #13
   16f00:	str	r2, [sp, #60]	; 0x3c
   16f04:	str	r7, [sp, #56]	; 0x38
   16f08:	ldr	r7, [fp, #16]
   16f0c:	ldr	ip, [sp, #108]	; 0x6c
   16f10:	sub	r9, r5, #2
   16f14:	mov	sl, r6
   16f18:	mov	lr, #0
   16f1c:	mov	r8, #-2147483648	; 0x80000000
   16f20:	str	r5, [sp, #64]	; 0x40
   16f24:	str	r4, [sp, #88]	; 0x58
   16f28:	sub	r1, r1, r0
   16f2c:	str	r9, [sp, #32]
   16f30:	str	r1, [sp, #44]	; 0x2c
   16f34:	add	r1, sp, #112	; 0x70
   16f38:	add	r1, r1, #1
   16f3c:	str	r1, [sp, #48]	; 0x30
   16f40:	sub	r1, fp, #53	; 0x35
   16f44:	add	r2, r1, #3
   16f48:	add	r1, r1, #2
   16f4c:	str	r1, [sp, #84]	; 0x54
   16f50:	add	r1, r4, #12
   16f54:	str	r2, [sp, #68]	; 0x44
   16f58:	str	r1, [sp, #52]	; 0x34
   16f5c:	sub	r1, r0, #2
   16f60:	str	r1, [sp, #28]
   16f64:	add	r1, r0, #8
   16f68:	str	r1, [sp, #24]
   16f6c:	add	r1, r0, #13
   16f70:	add	r0, r0, #14
   16f74:	str	r0, [sp, #80]	; 0x50
   16f78:	mvn	r0, r0
   16f7c:	str	r1, [sp, #40]	; 0x28
   16f80:	str	r0, [sp, #36]	; 0x24
   16f84:	uxtb	r1, r3
   16f88:	cmp	r1, #37	; 0x25
   16f8c:	beq	16fb8 <__assert_fail@plt+0x59b4>
   16f90:	b	17064 <__assert_fail@plt+0x5a60>
   16f94:	mov	ip, #0
   16f98:	add	lr, r5, lr
   16f9c:	ldrb	r3, [sl, #1]!
   16fa0:	mvn	r7, #0
   16fa4:	cmp	r3, #0
   16fa8:	beq	18a54 <__assert_fail@plt+0x7450>
   16fac:	uxtb	r1, r3
   16fb0:	cmp	r1, #37	; 0x25
   16fb4:	bne	17064 <__assert_fail@plt+0x5a60>
   16fb8:	ldr	r0, [fp, #8]
   16fbc:	mov	r6, #0
   16fc0:	mov	r9, #0
   16fc4:	str	sl, [sp, #100]	; 0x64
   16fc8:	mov	r4, r0
   16fcc:	add	r1, sl, #2
   16fd0:	add	sl, sl, #1
   16fd4:	ldrb	r0, [sl]
   16fd8:	sub	r2, r0, #35	; 0x23
   16fdc:	cmp	r2, #13
   16fe0:	bhi	17024 <__assert_fail@plt+0x5a20>
   16fe4:	add	r3, pc, #0
   16fe8:	ldr	pc, [r3, r2, lsl #2]
   16fec:	andeq	r7, r1, ip, asr r0
   16ff0:	andeq	r7, r1, r0, ror #1
   16ff4:	andeq	r7, r1, r0, ror #1
   16ff8:	andeq	r7, r1, r0, ror #1
   16ffc:	andeq	r7, r1, r0, ror #1
   17000:	andeq	r7, r1, r0, ror #1
   17004:	andeq	r7, r1, r0, ror #1
   17008:	andeq	r7, r1, r0, ror #1
   1700c:	andeq	r7, r1, ip, lsr #32
   17010:	andeq	r7, r1, r0, ror #1
   17014:	andeq	r7, r1, ip, lsr #32
   17018:	andeq	r7, r1, r0, ror #1
   1701c:	andeq	r7, r1, r0, ror #1
   17020:	andeq	r7, r1, ip, lsr #32
   17024:	cmp	r0, #95	; 0x5f
   17028:	bne	1704c <__assert_fail@plt+0x5a48>
   1702c:	add	r1, r1, #1
   17030:	add	sl, sl, #1
   17034:	mov	r9, r0
   17038:	ldrb	r0, [sl]
   1703c:	sub	r2, r0, #35	; 0x23
   17040:	cmp	r2, #13
   17044:	bls	16fe4 <__assert_fail@plt+0x59e0>
   17048:	b	17024 <__assert_fail@plt+0x5a20>
   1704c:	cmp	r0, #94	; 0x5e
   17050:	bne	170e0 <__assert_fail@plt+0x5adc>
   17054:	mov	r4, #1
   17058:	b	16fcc <__assert_fail@plt+0x59c8>
   1705c:	mov	r6, #1
   17060:	b	16fcc <__assert_fail@plt+0x59c8>
   17064:	ldr	r0, [sp, #104]	; 0x68
   17068:	bic	r1, r7, r7, asr #31
   1706c:	cmp	r1, #1
   17070:	mov	r5, r1
   17074:	movls	r5, #1
   17078:	sub	r2, r0, lr
   1707c:	cmp	r5, r2
   17080:	bcs	18a80 <__assert_fail@plt+0x747c>
   17084:	cmp	ip, #0
   17088:	beq	16f94 <__assert_fail@plt+0x5990>
   1708c:	cmp	r1, #2
   17090:	bcc	170c4 <__assert_fail@plt+0x5ac0>
   17094:	sub	r4, r1, #1
   17098:	mov	r0, ip
   1709c:	mov	r1, #32
   170a0:	mov	r7, lr
   170a4:	mov	r6, ip
   170a8:	mov	r2, r4
   170ac:	bl	11508 <memset@plt>
   170b0:	ldrb	r3, [sl]
   170b4:	mov	ip, r6
   170b8:	mov	lr, r7
   170bc:	add	ip, r6, r4
   170c0:	mov	r8, #-2147483648	; 0x80000000
   170c4:	strb	r3, [ip], #1
   170c8:	add	lr, r5, lr
   170cc:	ldrb	r3, [sl, #1]!
   170d0:	mvn	r7, #0
   170d4:	cmp	r3, #0
   170d8:	bne	16fac <__assert_fail@plt+0x59a8>
   170dc:	b	18a54 <__assert_fail@plt+0x7450>
   170e0:	sub	r2, r0, #48	; 0x30
   170e4:	cmp	r2, #9
   170e8:	bhi	17168 <__assert_fail@plt+0x5b64>
   170ec:	movw	r5, #52428	; 0xcccc
   170f0:	mov	r7, #0
   170f4:	movt	r5, #3276	; 0xccc
   170f8:	cmn	r7, #1
   170fc:	bgt	17134 <__assert_fail@plt+0x5b30>
   17100:	b	17140 <__assert_fail@plt+0x5b3c>
   17104:	add	r2, r7, r7, lsl #2
   17108:	lsl	r3, r2, #1
   1710c:	uxtab	r0, r3, r0
   17110:	sub	r7, r0, #48	; 0x30
   17114:	cmp	r7, r2, lsl #1
   17118:	mvnvs	r7, #-2147483648	; 0x80000000
   1711c:	ldrb	r0, [r1], #1
   17120:	sub	r2, r0, #48	; 0x30
   17124:	cmp	r2, #10
   17128:	bcs	17164 <__assert_fail@plt+0x5b60>
   1712c:	cmn	r7, #1
   17130:	ble	17140 <__assert_fail@plt+0x5b3c>
   17134:	cmp	r7, r5
   17138:	ble	17104 <__assert_fail@plt+0x5b00>
   1713c:	b	17150 <__assert_fail@plt+0x5b4c>
   17140:	beq	17104 <__assert_fail@plt+0x5b00>
   17144:	sdiv	r2, r8, r7
   17148:	cmp	r2, #10
   1714c:	bge	17104 <__assert_fail@plt+0x5b00>
   17150:	mvn	r7, #-2147483648	; 0x80000000
   17154:	ldrb	r0, [r1], #1
   17158:	sub	r2, r0, #48	; 0x30
   1715c:	cmp	r2, #10
   17160:	bcc	1712c <__assert_fail@plt+0x5b28>
   17164:	sub	sl, r1, #1
   17168:	cmp	r0, #79	; 0x4f
   1716c:	str	ip, [sp, #108]	; 0x6c
   17170:	str	r4, [sp, #96]	; 0x60
   17174:	cmpne	r0, #69	; 0x45
   17178:	bne	1718c <__assert_fail@plt+0x5b88>
   1717c:	ldrb	r1, [sl, #1]!
   17180:	cmp	r1, #122	; 0x7a
   17184:	bls	1719c <__assert_fail@plt+0x5b98>
   17188:	b	17cac <__assert_fail@plt+0x66a8>
   1718c:	mov	r1, r0
   17190:	mov	r0, #0
   17194:	cmp	r1, #122	; 0x7a
   17198:	bhi	17cac <__assert_fail@plt+0x66a8>
   1719c:	movw	r4, #64221	; 0xfadd
   171a0:	add	r2, pc, #12
   171a4:	mov	r5, #0
   171a8:	mvn	r8, #0
   171ac:	movt	r4, #1
   171b0:	ldr	pc, [r2, r1, lsl #2]
   171b4:	andeq	r7, r1, ip, lsl r5
   171b8:	andeq	r7, r1, ip, lsr #25
   171bc:	andeq	r7, r1, ip, lsr #25
   171c0:	andeq	r7, r1, ip, lsr #25
   171c4:	andeq	r7, r1, ip, lsr #25
   171c8:	andeq	r7, r1, ip, lsr #25
   171cc:	andeq	r7, r1, ip, lsr #25
   171d0:	andeq	r7, r1, ip, lsr #25
   171d4:	andeq	r7, r1, ip, lsr #25
   171d8:	andeq	r7, r1, ip, lsr #25
   171dc:	andeq	r7, r1, ip, lsr #25
   171e0:	andeq	r7, r1, ip, lsr #25
   171e4:	andeq	r7, r1, ip, lsr #25
   171e8:	andeq	r7, r1, ip, lsr #25
   171ec:	andeq	r7, r1, ip, lsr #25
   171f0:	andeq	r7, r1, ip, lsr #25
   171f4:	andeq	r7, r1, ip, lsr #25
   171f8:	andeq	r7, r1, ip, lsr #25
   171fc:	andeq	r7, r1, ip, lsr #25
   17200:	andeq	r7, r1, ip, lsr #25
   17204:	andeq	r7, r1, ip, lsr #25
   17208:	andeq	r7, r1, ip, lsr #25
   1720c:	andeq	r7, r1, ip, lsr #25
   17210:	andeq	r7, r1, ip, lsr #25
   17214:	andeq	r7, r1, ip, lsr #25
   17218:	andeq	r7, r1, ip, lsr #25
   1721c:	andeq	r7, r1, ip, lsr #25
   17220:	andeq	r7, r1, ip, lsr #25
   17224:	andeq	r7, r1, ip, lsr #25
   17228:	andeq	r7, r1, ip, lsr #25
   1722c:	andeq	r7, r1, ip, lsr #25
   17230:	andeq	r7, r1, ip, lsr #25
   17234:	andeq	r7, r1, ip, lsr #25
   17238:	andeq	r7, r1, ip, lsr #25
   1723c:	andeq	r7, r1, ip, lsr #25
   17240:	andeq	r7, r1, ip, lsr #25
   17244:	andeq	r7, r1, ip, lsr #25
   17248:	andeq	r7, r1, ip, lsl #10
   1724c:	andeq	r7, r1, ip, lsr #25
   17250:	andeq	r7, r1, ip, lsr #25
   17254:	andeq	r7, r1, ip, lsr #25
   17258:	andeq	r7, r1, ip, lsr #25
   1725c:	andeq	r7, r1, ip, lsr #25
   17260:	andeq	r7, r1, ip, lsr #25
   17264:	andeq	r7, r1, ip, lsr #25
   17268:	andeq	r7, r1, ip, lsr #25
   1726c:	andeq	r7, r1, ip, lsr #25
   17270:	andeq	r7, r1, ip, lsr #25
   17274:	andeq	r7, r1, ip, lsr #25
   17278:	andeq	r7, r1, ip, lsr #25
   1727c:	andeq	r7, r1, ip, lsr #25
   17280:	andeq	r7, r1, ip, lsr #25
   17284:	andeq	r7, r1, ip, lsr #25
   17288:	andeq	r7, r1, ip, lsr #25
   1728c:	andeq	r7, r1, ip, lsr #25
   17290:	andeq	r7, r1, ip, lsr #25
   17294:	andeq	r7, r1, ip, lsr #25
   17298:	andeq	r7, r1, ip, lsr #25
   1729c:	andeq	r7, r1, r4, lsr #10
   172a0:	andeq	r7, r1, ip, lsr #25
   172a4:	andeq	r7, r1, ip, lsr #25
   172a8:	andeq	r7, r1, ip, lsr #25
   172ac:	andeq	r7, r1, ip, lsr #25
   172b0:	andeq	r7, r1, ip, lsr #25
   172b4:	andeq	r7, r1, ip, lsr #25
   172b8:	andeq	r7, r1, r0, lsr #11
   172bc:	andeq	r7, r1, r0, asr #11
   172c0:	andeq	r7, r1, r0, ror #11
   172c4:	strdeq	r7, [r1], -r4
   172c8:	andeq	r7, r1, ip, lsr #25
   172cc:	andeq	r7, r1, r8, lsl #12
   172d0:	andeq	r7, r1, r0, lsr #7
   172d4:	andeq	r7, r1, r4, lsr r6
   172d8:	andeq	r7, r1, r8, asr #12
   172dc:	andeq	r7, r1, ip, lsr #25
   172e0:	andeq	r7, r1, ip, lsr #25
   172e4:	andeq	r7, r1, ip, lsr #25
   172e8:	andeq	r7, r1, ip, asr r6
   172ec:	andeq	r7, r1, r0, ror r6
   172f0:	andeq	r7, r1, ip, lsr #25
   172f4:	strdeq	r7, [r1], -r4
   172f8:	andeq	r7, r1, ip, lsr #25
   172fc:	andeq	r7, r1, r0, lsr r7
   17300:	andeq	r7, r1, r4, lsl r7
   17304:	andeq	r7, r1, r8, lsr #14
   17308:	ldrdeq	r7, [r1], -r8
   1730c:	andeq	r7, r1, r0, lsr #7
   17310:	andeq	r7, r1, r4, lsl #16
   17314:	andeq	r7, r1, r0, asr r8
   17318:	andeq	r7, r1, r4, ror #16
   1731c:	andeq	r7, r1, r0, lsr #17
   17320:	andeq	r7, r1, ip, lsr #25
   17324:	andeq	r7, r1, ip, lsr #25
   17328:	andeq	r7, r1, ip, lsr #25
   1732c:	andeq	r7, r1, ip, lsr #25
   17330:	andeq	r7, r1, ip, lsr #25
   17334:	andeq	r7, r1, ip, lsr #25
   17338:	andeq	r7, r1, ip, lsl #18
   1733c:	strdeq	r7, [r1], -r0
   17340:	andeq	r7, r1, ip, lsr #18
   17344:	andeq	r7, r1, r0, asr #18
   17348:	andeq	r7, r1, r4, asr r9
   1734c:	andeq	r7, r1, ip, lsr #25
   17350:	andeq	r7, r1, r0, lsr #7
   17354:	strdeq	r7, [r1], -r0
   17358:	andeq	r7, r1, ip, lsr #25
   1735c:	andeq	r7, r1, r4, ror #18
   17360:	andeq	r7, r1, ip, ror r9
   17364:	muleq	r1, r0, r9
   17368:			; <UNDEFINED> instruction: 0x00017ab8
   1736c:	andeq	r7, r1, r0, ror #21
   17370:	andeq	r7, r1, ip, lsr #25
   17374:	strdeq	r7, [r1], -r8
   17378:	andeq	r7, r1, ip, lsr fp
   1737c:	andeq	r8, r1, r8, lsr #15
   17380:	andeq	r7, r1, ip, asr fp
   17384:	strdeq	r7, [r1], -ip
   17388:	andeq	r7, r1, r8, asr ip
   1738c:	andeq	r7, r1, ip, lsr #25
   17390:	andeq	r7, r1, ip, lsl #25
   17394:	andeq	r7, r1, r4, lsr #25
   17398:	andeq	r7, r1, r8, lsr lr
   1739c:	andeq	r7, r1, r0, asr r5
   173a0:	cmp	r0, #69	; 0x45
   173a4:	beq	17cac <__assert_fail@plt+0x66a8>
   173a8:	ldr	r2, [sp, #88]	; 0x58
   173ac:	movw	ip, #9363	; 0x2493
   173b0:	str	lr, [sp, #92]	; 0x5c
   173b4:	movw	r6, #382	; 0x17e
   173b8:	movt	ip, #37449	; 0x9249
   173bc:	ldr	r8, [r2, #24]
   173c0:	ldr	r5, [r2, #28]
   173c4:	ldr	lr, [r2, #20]
   173c8:	sub	r2, r5, r8
   173cc:	cmp	lr, #0
   173d0:	add	r2, r2, r6
   173d4:	smmla	r4, r2, ip, r2
   173d8:	asr	r6, r4, #2
   173dc:	add	r4, r6, r4, lsr #31
   173e0:	rsb	r4, r4, r4, lsl #3
   173e4:	sub	r2, r4, r2
   173e8:	add	r2, r5, r2
   173ec:	add	r4, r2, #3
   173f0:	mvn	r2, #99	; 0x63
   173f4:	movwmi	r2, #300	; 0x12c
   173f8:	add	r2, r2, lr
   173fc:	cmn	r4, #1
   17400:	ble	17ff8 <__assert_fail@plt+0x69f4>
   17404:	movw	r6, #365	; 0x16d
   17408:	tst	r2, #3
   1740c:	bne	17458 <__assert_fail@plt+0x5e54>
   17410:	movw	r6, #34079	; 0x851f
   17414:	mov	ip, #100	; 0x64
   17418:	movt	r6, #20971	; 0x51eb
   1741c:	smmul	r6, r2, r6
   17420:	asr	r3, r6, #5
   17424:	add	r3, r3, r6, lsr #31
   17428:	mls	ip, r3, ip, r2
   1742c:	asr	r3, r6, #7
   17430:	add	r3, r3, r6, lsr #31
   17434:	mov	r6, #400	; 0x190
   17438:	mls	r2, r3, r6, r2
   1743c:	movw	r6, #365	; 0x16d
   17440:	cmp	r2, #0
   17444:	movweq	r6, #366	; 0x16e
   17448:	cmp	ip, #0
   1744c:	movw	ip, #9363	; 0x2493
   17450:	movt	ip, #37449	; 0x9249
   17454:	movwne	r6, #366	; 0x16e
   17458:	add	r2, r8, r6
   1745c:	movw	r3, #382	; 0x17e
   17460:	sub	r2, r5, r2
   17464:	add	r2, r2, r3
   17468:	smmla	r2, r2, ip, r2
   1746c:	asr	r3, r2, #2
   17470:	add	r2, r3, r2, lsr #31
   17474:	movw	r3, #379	; 0x17b
   17478:	rsb	r2, r2, r2, lsl #3
   1747c:	add	r2, r8, r2
   17480:	sub	r2, r2, r3
   17484:	cmn	r2, #1
   17488:	movgt	r4, r2
   1748c:	mvn	r2, r2
   17490:	lsr	r3, r2, #31
   17494:	cmp	r1, #71	; 0x47
   17498:	beq	1807c <__assert_fail@plt+0x6a78>
   1749c:	cmp	r1, #103	; 0x67
   174a0:	bne	180ac <__assert_fail@plt+0x6aa8>
   174a4:	movw	r2, #34079	; 0x851f
   174a8:	mov	ip, #2
   174ac:	movt	r2, #20971	; 0x51eb
   174b0:	smmul	r6, lr, r2
   174b4:	asr	r5, r6, #5
   174b8:	add	r6, r5, r6, lsr #31
   174bc:	mov	r5, #100	; 0x64
   174c0:	mls	r6, r6, r5, lr
   174c4:	add	r6, r3, r6
   174c8:	smmul	r2, r6, r2
   174cc:	asr	r4, r2, #5
   174d0:	add	r2, r4, r2, lsr #31
   174d4:	mls	r4, r2, r5, r6
   174d8:	mov	r2, #0
   174dc:	cmn	r4, #1
   174e0:	ble	184c0 <__assert_fail@plt+0x6ebc>
   174e4:	ldr	lr, [sp, #92]	; 0x5c
   174e8:	mov	r3, r4
   174ec:	b	18508 <__assert_fail@plt+0x6f04>
   174f0:	ldr	r2, [sp, #96]	; 0x60
   174f4:	mov	r5, #0
   174f8:	cmp	r0, #69	; 0x45
   174fc:	orr	r2, r6, r2
   17500:	str	r2, [sp, #96]	; 0x60
   17504:	beq	17cac <__assert_fail@plt+0x66a8>
   17508:	b	187a8 <__assert_fail@plt+0x71a4>
   1750c:	ldr	r1, [sp, #100]	; 0x64
   17510:	sub	r0, sl, #1
   17514:	cmp	r0, r1
   17518:	beq	1825c <__assert_fail@plt+0x6c58>
   1751c:	sub	sl, sl, #1
   17520:	b	17cac <__assert_fail@plt+0x66a8>
   17524:	mov	r5, #1
   17528:	ldrb	r2, [sl, r5]
   1752c:	cmp	r2, #58	; 0x3a
   17530:	bne	17544 <__assert_fail@plt+0x5f40>
   17534:	add	r5, r5, #1
   17538:	ldrb	r2, [sl, r5]
   1753c:	cmp	r2, #58	; 0x3a
   17540:	beq	17534 <__assert_fail@plt+0x5f30>
   17544:	cmp	r2, #122	; 0x7a
   17548:	bne	17cac <__assert_fail@plt+0x66a8>
   1754c:	add	sl, sl, r5
   17550:	ldr	r3, [sp, #88]	; 0x58
   17554:	ldr	r2, [r3, #32]
   17558:	cmp	r2, #0
   1755c:	bmi	1885c <__assert_fail@plt+0x7258>
   17560:	mov	r8, lr
   17564:	ldr	lr, [r3, #36]	; 0x24
   17568:	cmp	lr, #0
   1756c:	bmi	18324 <__assert_fail@plt+0x6d20>
   17570:	ldr	r3, [sp, #108]	; 0x6c
   17574:	mov	r2, #0
   17578:	bne	1832c <__assert_fail@plt+0x6d28>
   1757c:	ldr	r2, [sp, #64]	; 0x40
   17580:	ldrb	r2, [r2]
   17584:	sub	r2, r2, #45	; 0x2d
   17588:	clz	r2, r2
   1758c:	lsr	r2, r2, #5
   17590:	cmp	r5, #3
   17594:	bls	18334 <__assert_fail@plt+0x6d30>
   17598:	mov	lr, r8
   1759c:	b	17cb0 <__assert_fail@plt+0x66ac>
   175a0:	cmp	r0, #0
   175a4:	bne	17cac <__assert_fail@plt+0x66a8>
   175a8:	ldr	r1, [sp, #96]	; 0x60
   175ac:	mov	r5, #0
   175b0:	orr	r1, r6, r1
   175b4:	str	r1, [sp, #96]	; 0x60
   175b8:	mov	r1, #65	; 0x41
   175bc:	b	187a8 <__assert_fail@plt+0x71a4>
   175c0:	cmp	r0, #69	; 0x45
   175c4:	beq	17cac <__assert_fail@plt+0x66a8>
   175c8:	ldr	r1, [sp, #96]	; 0x60
   175cc:	mov	r5, #0
   175d0:	orr	r1, r6, r1
   175d4:	str	r1, [sp, #96]	; 0x60
   175d8:	mov	r1, #66	; 0x42
   175dc:	b	187a8 <__assert_fail@plt+0x71a4>
   175e0:	cmp	r0, #69	; 0x45
   175e4:	bne	180c8 <__assert_fail@plt+0x6ac4>
   175e8:	mov	r5, #0
   175ec:	mov	r1, #67	; 0x43
   175f0:	b	187a8 <__assert_fail@plt+0x71a4>
   175f4:	cmp	r0, #0
   175f8:	bne	17cac <__assert_fail@plt+0x66a8>
   175fc:	movw	r4, #4258	; 0x10a2
   17600:	movt	r4, #2
   17604:	b	17730 <__assert_fail@plt+0x612c>
   17608:	cmp	r0, #0
   1760c:	bne	17cac <__assert_fail@plt+0x66a8>
   17610:	movw	r4, #4267	; 0x10ab
   17614:	cmp	r9, #0
   17618:	movt	r4, #2
   1761c:	bne	184e0 <__assert_fail@plt+0x6edc>
   17620:	cmp	r7, #0
   17624:	bpl	184e0 <__assert_fail@plt+0x6edc>
   17628:	mov	r9, #43	; 0x2b
   1762c:	mov	r8, #4
   17630:	b	17730 <__assert_fail@plt+0x612c>
   17634:	cmp	r0, #69	; 0x45
   17638:	beq	17cac <__assert_fail@plt+0x66a8>
   1763c:	ldr	r2, [sp, #60]	; 0x3c
   17640:	ldr	r3, [r2]
   17644:	b	179a4 <__assert_fail@plt+0x63a0>
   17648:	mov	ip, #2
   1764c:	cmp	r0, #69	; 0x45
   17650:	beq	17cac <__assert_fail@plt+0x66a8>
   17654:	ldr	r3, [sp, #56]	; 0x38
   17658:	b	179a8 <__assert_fail@plt+0x63a4>
   1765c:	cmp	r0, #69	; 0x45
   17660:	beq	17cac <__assert_fail@plt+0x66a8>
   17664:	ldr	r2, [sp, #88]	; 0x58
   17668:	ldr	r3, [r2, #4]
   1766c:	b	179a4 <__assert_fail@plt+0x63a0>
   17670:	cmp	r0, #69	; 0x45
   17674:	beq	17cac <__assert_fail@plt+0x66a8>
   17678:	ldr	r1, [fp, #24]
   1767c:	ldr	ip, [sp, #108]	; 0x6c
   17680:	cmp	r7, #1
   17684:	sub	r5, fp, #48	; 0x30
   17688:	mov	r4, #9
   1768c:	mov	r0, #8
   17690:	movwlt	r7, #9
   17694:	mov	r8, r5
   17698:	cmp	r7, r4
   1769c:	blt	176cc <__assert_fail@plt+0x60c8>
   176a0:	movw	r2, #26215	; 0x6667
   176a4:	cmp	r4, #2
   176a8:	movt	r2, #26214	; 0x6666
   176ac:	blt	1811c <__assert_fail@plt+0x6b18>
   176b0:	smmul	r3, r1, r2
   176b4:	asr	r6, r3, #2
   176b8:	add	r3, r6, r3, lsr #31
   176bc:	add	r3, r3, r3, lsl #2
   176c0:	sub	r3, r1, r3, lsl #1
   176c4:	cmp	r3, #0
   176c8:	bne	1811c <__assert_fail@plt+0x6b18>
   176cc:	movw	r2, #26215	; 0x6667
   176d0:	sub	r0, r0, #1
   176d4:	sub	r4, r4, #1
   176d8:	movt	r2, #26214	; 0x6666
   176dc:	smmul	r1, r1, r2
   176e0:	asr	r2, r1, #2
   176e4:	add	r1, r2, r1, lsr #31
   176e8:	cmp	r7, r4
   176ec:	blt	176cc <__assert_fail@plt+0x60c8>
   176f0:	b	176a0 <__assert_fail@plt+0x609c>
   176f4:	mov	r5, #1
   176f8:	ldr	r2, [sp, #96]	; 0x60
   176fc:	eor	r1, r6, #1
   17700:	orr	r5, r6, r5
   17704:	and	r2, r2, r1
   17708:	mov	r1, #112	; 0x70
   1770c:	str	r2, [sp, #96]	; 0x60
   17710:	b	187a8 <__assert_fail@plt+0x71a4>
   17714:	cmp	r0, #69	; 0x45
   17718:	beq	17cac <__assert_fail@plt+0x66a8>
   1771c:	ldr	r2, [sp, #88]	; 0x58
   17720:	ldr	r3, [r2]
   17724:	b	179a4 <__assert_fail@plt+0x63a0>
   17728:	movw	r4, #4276	; 0x10b4
   1772c:	movt	r4, #2
   17730:	ldr	r0, [sp, #96]	; 0x60
   17734:	ldr	r3, [sp, #88]	; 0x58
   17738:	mvn	r1, #0
   1773c:	mov	r2, r4
   17740:	str	lr, [sp, #92]	; 0x5c
   17744:	and	r0, r0, #1
   17748:	stm	sp, {r0, r9}
   1774c:	str	r0, [sp, #100]	; 0x64
   17750:	ldr	r0, [fp, #20]
   17754:	str	r8, [sp, #8]
   17758:	str	r0, [sp, #12]
   1775c:	ldr	r0, [fp, #24]
   17760:	str	r0, [sp, #16]
   17764:	mov	r0, #0
   17768:	bl	16e8c <__assert_fail@plt+0x5888>
   1776c:	mov	r6, r0
   17770:	subs	r0, r9, #45	; 0x2d
   17774:	ldr	lr, [sp, #92]	; 0x5c
   17778:	ldr	r1, [sp, #104]	; 0x68
   1777c:	movne	r0, r7
   17780:	cmp	r7, #0
   17784:	mov	r5, r6
   17788:	movwmi	r0, #0
   1778c:	cmp	r0, r6
   17790:	movhi	r5, r0
   17794:	sub	r1, r1, lr
   17798:	cmp	r5, r1
   1779c:	bcs	18a80 <__assert_fail@plt+0x747c>
   177a0:	ldr	r7, [sp, #108]	; 0x6c
   177a4:	cmp	r7, #0
   177a8:	beq	17e4c <__assert_fail@plt+0x6848>
   177ac:	cmp	r0, r6
   177b0:	bls	17e54 <__assert_fail@plt+0x6850>
   177b4:	cmp	r9, #48	; 0x30
   177b8:	sub	r2, r0, r6
   177bc:	str	r1, [sp, #20]
   177c0:	cmpne	r9, #43	; 0x2b
   177c4:	str	r2, [sp, #96]	; 0x60
   177c8:	bne	18450 <__assert_fail@plt+0x6e4c>
   177cc:	mov	r0, r7
   177d0:	mov	r1, #48	; 0x30
   177d4:	b	18458 <__assert_fail@plt+0x6e54>
   177d8:	cmp	r0, #69	; 0x45
   177dc:	beq	17cac <__assert_fail@plt+0x66a8>
   177e0:	ldr	r3, [sp, #88]	; 0x58
   177e4:	ldr	r2, [r3, #24]
   177e8:	ldr	r3, [r3, #28]
   177ec:	sub	r2, r3, r2
   177f0:	movw	r3, #9363	; 0x2493
   177f4:	movt	r3, #37449	; 0x9249
   177f8:	add	r2, r2, #7
   177fc:	smmla	r2, r2, r3, r2
   17800:	b	17844 <__assert_fail@plt+0x6240>
   17804:	cmp	r0, #69	; 0x45
   17808:	beq	17cac <__assert_fail@plt+0x66a8>
   1780c:	ldr	r3, [sp, #88]	; 0x58
   17810:	movw	r6, #9363	; 0x2493
   17814:	movt	r6, #37449	; 0x9249
   17818:	ldr	r2, [r3, #24]
   1781c:	ldr	r3, [r3, #28]
   17820:	add	r2, r2, #6
   17824:	smmla	r5, r2, r6, r2
   17828:	asr	r4, r5, #2
   1782c:	add	r5, r4, r5, lsr #31
   17830:	rsb	r5, r5, r5, lsl #3
   17834:	sub	r2, r5, r2
   17838:	add	r2, r3, r2
   1783c:	add	r2, r2, #7
   17840:	smmla	r2, r2, r6, r2
   17844:	asr	r3, r2, #2
   17848:	add	r3, r3, r2, lsr #31
   1784c:	b	179a4 <__assert_fail@plt+0x63a0>
   17850:	cmp	r0, #79	; 0x4f
   17854:	beq	17cac <__assert_fail@plt+0x66a8>
   17858:	mov	r5, #0
   1785c:	mov	r1, #88	; 0x58
   17860:	b	187a8 <__assert_fail@plt+0x71a4>
   17864:	cmp	r0, #69	; 0x45
   17868:	beq	183a8 <__assert_fail@plt+0x6da4>
   1786c:	cmp	r0, #79	; 0x4f
   17870:	beq	17cac <__assert_fail@plt+0x66a8>
   17874:	ldr	r2, [sp, #88]	; 0x58
   17878:	movw	r6, #63636	; 0xf894
   1787c:	mov	ip, #4
   17880:	movt	r6, #65535	; 0xffff
   17884:	ldr	r3, [r2, #20]
   17888:	mov	r2, #0
   1788c:	cmp	r3, r6
   17890:	movw	r6, #1900	; 0x76c
   17894:	movwlt	r2, #1
   17898:	add	r3, r3, r6
   1789c:	b	18508 <__assert_fail@plt+0x6f04>
   178a0:	ldr	r0, [sp, #64]	; 0x40
   178a4:	subs	r5, r9, #45	; 0x2d
   178a8:	bicne	r5, r7, r7, asr #31
   178ac:	mov	r7, lr
   178b0:	bl	114b4 <strlen@plt>
   178b4:	mov	r8, r0
   178b8:	cmp	r5, r0
   178bc:	mov	r4, r0
   178c0:	ldr	r0, [sp, #104]	; 0x68
   178c4:	movhi	r4, r5
   178c8:	sub	r0, r0, r7
   178cc:	cmp	r4, r0
   178d0:	bcs	18a80 <__assert_fail@plt+0x747c>
   178d4:	ldr	ip, [sp, #108]	; 0x6c
   178d8:	mov	lr, r7
   178dc:	cmp	ip, #0
   178e0:	beq	182bc <__assert_fail@plt+0x6cb8>
   178e4:	cmp	r5, r8
   178e8:	bls	183b4 <__assert_fail@plt+0x6db0>
   178ec:	uxtb	r0, r9
   178f0:	sub	r5, r5, r8
   178f4:	cmp	r0, #48	; 0x30
   178f8:	cmpne	r0, #43	; 0x2b
   178fc:	bne	18610 <__assert_fail@plt+0x700c>
   17900:	mov	r0, ip
   17904:	mov	r1, #48	; 0x30
   17908:	b	18618 <__assert_fail@plt+0x7014>
   1790c:	cmp	r0, #0
   17910:	bne	17cac <__assert_fail@plt+0x66a8>
   17914:	ldr	r1, [sp, #96]	; 0x60
   17918:	mov	r5, #0
   1791c:	orr	r1, r6, r1
   17920:	str	r1, [sp, #96]	; 0x60
   17924:	mov	r1, #97	; 0x61
   17928:	b	187a8 <__assert_fail@plt+0x71a4>
   1792c:	cmp	r0, #79	; 0x4f
   17930:	beq	17cac <__assert_fail@plt+0x66a8>
   17934:	mov	r5, #0
   17938:	mov	r1, #99	; 0x63
   1793c:	b	187a8 <__assert_fail@plt+0x71a4>
   17940:	cmp	r0, #69	; 0x45
   17944:	beq	17cac <__assert_fail@plt+0x66a8>
   17948:	ldr	r2, [sp, #52]	; 0x34
   1794c:	ldr	r3, [r2]
   17950:	b	179a4 <__assert_fail@plt+0x63a0>
   17954:	ldr	r2, [sp, #52]	; 0x34
   17958:	cmp	r0, #69	; 0x45
   1795c:	bne	17988 <__assert_fail@plt+0x6384>
   17960:	b	17cac <__assert_fail@plt+0x66a8>
   17964:	cmp	r0, #69	; 0x45
   17968:	beq	17cac <__assert_fail@plt+0x66a8>
   1796c:	ldr	r2, [sp, #88]	; 0x58
   17970:	mov	ip, #3
   17974:	ldr	r3, [r2, #28]
   17978:	b	17acc <__assert_fail@plt+0x64c8>
   1797c:	ldr	r2, [sp, #60]	; 0x3c
   17980:	cmp	r0, #69	; 0x45
   17984:	beq	17cac <__assert_fail@plt+0x66a8>
   17988:	ldr	r3, [r2]
   1798c:	b	1799c <__assert_fail@plt+0x6398>
   17990:	ldr	r3, [sp, #56]	; 0x38
   17994:	cmp	r0, #69	; 0x45
   17998:	beq	17cac <__assert_fail@plt+0x66a8>
   1799c:	cmp	r9, #0
   179a0:	movweq	r9, #95	; 0x5f
   179a4:	mov	ip, #2
   179a8:	lsr	r2, r3, #31
   179ac:	cmp	r2, #0
   179b0:	mov	r6, #0
   179b4:	mov	r4, #0
   179b8:	movwne	r2, #1
   179bc:	cmp	r0, #79	; 0x4f
   179c0:	moveq	r5, #0
   179c4:	cmpeq	r2, #0
   179c8:	beq	187a8 <__assert_fail@plt+0x71a4>
   179cc:	ldr	r8, [sp, #80]	; 0x50
   179d0:	cmp	r2, #0
   179d4:	rsbne	r3, r3, #0
   179d8:	tst	r6, #1
   179dc:	asr	r6, r6, #1
   179e0:	movne	r0, #58	; 0x3a
   179e4:	strbne	r0, [r8, #-1]!
   179e8:	movw	r0, #52429	; 0xcccd
   179ec:	cmp	r3, #9
   179f0:	movt	r0, #52428	; 0xcccc
   179f4:	umull	r0, r1, r3, r0
   179f8:	lsr	r0, r1, #3
   179fc:	add	r1, r0, r0, lsl #2
   17a00:	sub	r1, r3, r1, lsl #1
   17a04:	mov	r3, r0
   17a08:	orr	r1, r1, #48	; 0x30
   17a0c:	strb	r1, [r8, #-1]!
   17a10:	bhi	179d8 <__assert_fail@plt+0x63d4>
   17a14:	cmp	r6, #0
   17a18:	mov	r3, r0
   17a1c:	bne	179d8 <__assert_fail@plt+0x63d4>
   17a20:	cmp	r7, #0
   17a24:	ldr	r3, [sp, #108]	; 0x6c
   17a28:	str	sl, [sp, #100]	; 0x64
   17a2c:	movmi	r7, ip
   17a30:	ldr	ip, [sp, #96]	; 0x60
   17a34:	cmp	r4, #0
   17a38:	movwne	r4, #43	; 0x2b
   17a3c:	cmp	r9, #0
   17a40:	movweq	r9, #48	; 0x30
   17a44:	ldr	r1, [sp, #80]	; 0x50
   17a48:	cmp	r2, #0
   17a4c:	mov	r0, r7
   17a50:	movwne	r4, #45	; 0x2d
   17a54:	cmp	r4, #0
   17a58:	subne	r0, r0, #1
   17a5c:	sub	sl, r1, r8
   17a60:	sub	r0, r0, sl
   17a64:	cmp	r0, #1
   17a68:	movwlt	r0, #0
   17a6c:	subs	r5, r9, #45	; 0x2d
   17a70:	movne	r5, r0
   17a74:	cmp	r4, #0
   17a78:	beq	17e90 <__assert_fail@plt+0x688c>
   17a7c:	cmp	r9, #95	; 0x5f
   17a80:	bne	17e6c <__assert_fail@plt+0x6868>
   17a84:	cmp	r3, #0
   17a88:	beq	17e60 <__assert_fail@plt+0x685c>
   17a8c:	mov	r0, r3
   17a90:	mov	r1, #32
   17a94:	mov	r2, r5
   17a98:	str	lr, [sp, #92]	; 0x5c
   17a9c:	mov	r6, r3
   17aa0:	bl	11508 <memset@plt>
   17aa4:	ldr	ip, [sp, #96]	; 0x60
   17aa8:	ldr	lr, [sp, #92]	; 0x5c
   17aac:	mov	r3, r6
   17ab0:	add	r3, r6, r5
   17ab4:	b	17e64 <__assert_fail@plt+0x6860>
   17ab8:	cmp	r0, #69	; 0x45
   17abc:	beq	17cac <__assert_fail@plt+0x66a8>
   17ac0:	ldr	r2, [sp, #88]	; 0x58
   17ac4:	mov	ip, #2
   17ac8:	ldr	r3, [r2, #16]
   17acc:	mov	r2, #0
   17ad0:	cmn	r3, #1
   17ad4:	add	r3, r3, #1
   17ad8:	movwlt	r2, #1
   17adc:	b	179ac <__assert_fail@plt+0x63a8>
   17ae0:	subs	r0, r9, #45	; 0x2d
   17ae4:	ldr	r1, [sp, #104]	; 0x68
   17ae8:	bicne	r0, r7, r7, asr #31
   17aec:	cmp	r0, #1
   17af0:	mov	r5, r0
   17af4:	movls	r5, #1
   17af8:	sub	r1, r1, lr
   17afc:	cmp	r5, r1
   17b00:	bcs	18a80 <__assert_fail@plt+0x747c>
   17b04:	ldr	ip, [sp, #108]	; 0x6c
   17b08:	mov	r8, #-2147483648	; 0x80000000
   17b0c:	cmp	ip, #0
   17b10:	beq	16f94 <__assert_fail@plt+0x5990>
   17b14:	cmp	r0, #2
   17b18:	bcc	186fc <__assert_fail@plt+0x70f8>
   17b1c:	uxtb	r1, r9
   17b20:	sub	r4, r0, #1
   17b24:	cmp	r1, #48	; 0x30
   17b28:	cmpne	r1, #43	; 0x2b
   17b2c:	bne	186d4 <__assert_fail@plt+0x70d0>
   17b30:	mov	r0, ip
   17b34:	mov	r1, #48	; 0x30
   17b38:	b	186dc <__assert_fail@plt+0x70d8>
   17b3c:	ldr	r2, [sp, #88]	; 0x58
   17b40:	mov	r3, #11
   17b44:	mov	ip, #1
   17b48:	ldr	r2, [r2, #16]
   17b4c:	mul	r2, r2, r3
   17b50:	add	r3, ip, r2, asr #5
   17b54:	mov	r2, #0
   17b58:	b	179ac <__assert_fail@plt+0x63a8>
   17b5c:	ldr	r2, [sp, #88]	; 0x58
   17b60:	mov	r0, #28
   17b64:	add	r1, sp, #112	; 0x70
   17b68:	str	lr, [sp, #92]	; 0x5c
   17b6c:	mov	r4, r1
   17b70:	mov	r3, r2
   17b74:	add	r2, r2, #16
   17b78:	vld1.32	{d16-d17}, [r3], r0
   17b7c:	vld1.32	{d18-d19}, [r2]
   17b80:	add	r2, r1, #16
   17b84:	vld1.32	{d20-d21}, [r3]
   17b88:	vst1.64	{d16-d17}, [r4], r0
   17b8c:	mvn	r0, #0
   17b90:	vst1.64	{d18-d19}, [r2]
   17b94:	vst1.32	{d20-d21}, [r4]
   17b98:	str	r0, [r4]
   17b9c:	ldr	r0, [fp, #20]
   17ba0:	bl	1afd8 <__assert_fail@plt+0x99d4>
   17ba4:	ldr	r1, [r4]
   17ba8:	cmp	r1, #0
   17bac:	bmi	18a9c <__assert_fail@plt+0x7498>
   17bb0:	movw	r1, #26215	; 0x6667
   17bb4:	cmp	r0, #0
   17bb8:	movt	r1, #26214	; 0x6666
   17bbc:	bmi	182c4 <__assert_fail@plt+0x6cc0>
   17bc0:	ldr	r4, [sp, #96]	; 0x60
   17bc4:	ldr	r2, [sp, #40]	; 0x28
   17bc8:	mov	r3, r0
   17bcc:	smmul	r6, r3, r1
   17bd0:	asr	r5, r6, #2
   17bd4:	add	r6, r5, r6, lsr #31
   17bd8:	add	r5, r6, r6, lsl #2
   17bdc:	sub	r5, r3, r5, lsl #1
   17be0:	add	r3, r3, #9
   17be4:	cmp	r3, #18
   17be8:	mov	r3, r6
   17bec:	add	r5, r5, #48	; 0x30
   17bf0:	strb	r5, [r2], #-1
   17bf4:	bhi	17bcc <__assert_fail@plt+0x65c8>
   17bf8:	b	182fc <__assert_fail@plt+0x6cf8>
   17bfc:	subs	r0, r9, #45	; 0x2d
   17c00:	ldr	r1, [sp, #104]	; 0x68
   17c04:	bicne	r0, r7, r7, asr #31
   17c08:	cmp	r0, #1
   17c0c:	mov	r5, r0
   17c10:	movls	r5, #1
   17c14:	sub	r1, r1, lr
   17c18:	cmp	r5, r1
   17c1c:	bcs	18a80 <__assert_fail@plt+0x747c>
   17c20:	ldr	ip, [sp, #108]	; 0x6c
   17c24:	mov	r8, #-2147483648	; 0x80000000
   17c28:	cmp	ip, #0
   17c2c:	beq	16f94 <__assert_fail@plt+0x5990>
   17c30:	cmp	r0, #2
   17c34:	bcc	1872c <__assert_fail@plt+0x7128>
   17c38:	uxtb	r1, r9
   17c3c:	sub	r4, r0, #1
   17c40:	cmp	r1, #48	; 0x30
   17c44:	cmpne	r1, #43	; 0x2b
   17c48:	bne	18704 <__assert_fail@plt+0x7100>
   17c4c:	mov	r0, ip
   17c50:	mov	r1, #48	; 0x30
   17c54:	b	1870c <__assert_fail@plt+0x7108>
   17c58:	ldr	r2, [sp, #88]	; 0x58
   17c5c:	movw	r3, #9363	; 0x2493
   17c60:	mov	ip, #1
   17c64:	movt	r3, #37449	; 0x9249
   17c68:	ldr	r2, [r2, #24]
   17c6c:	add	r2, r2, #6
   17c70:	smmla	r3, r2, r3, r2
   17c74:	asr	r6, r3, #2
   17c78:	add	r3, r6, r3, lsr #31
   17c7c:	rsb	r3, r3, r3, lsl #3
   17c80:	sub	r2, r2, r3
   17c84:	add	r3, r2, #1
   17c88:	b	179a8 <__assert_fail@plt+0x63a4>
   17c8c:	cmp	r0, #69	; 0x45
   17c90:	beq	17cac <__assert_fail@plt+0x66a8>
   17c94:	ldr	r2, [sp, #88]	; 0x58
   17c98:	mov	ip, #1
   17c9c:	ldr	r3, [r2, #24]
   17ca0:	b	179a8 <__assert_fail@plt+0x63a4>
   17ca4:	cmp	r0, #79	; 0x4f
   17ca8:	bne	18214 <__assert_fail@plt+0x6c10>
   17cac:	ldr	r3, [sp, #108]	; 0x6c
   17cb0:	ldr	r0, [sp, #100]	; 0x64
   17cb4:	subs	r5, r9, #45	; 0x2d
   17cb8:	bicne	r5, r7, r7, asr #31
   17cbc:	sub	r8, sl, r0
   17cc0:	ldr	r0, [sp, #104]	; 0x68
   17cc4:	add	r4, r8, #1
   17cc8:	cmp	r5, r4
   17ccc:	mov	r7, r4
   17cd0:	movhi	r7, r5
   17cd4:	sub	r0, r0, lr
   17cd8:	cmp	r7, r0
   17cdc:	bcs	18a80 <__assert_fail@plt+0x747c>
   17ce0:	cmp	r3, #0
   17ce4:	beq	17d18 <__assert_fail@plt+0x6714>
   17ce8:	cmp	r5, r4
   17cec:	mov	ip, r3
   17cf0:	bls	17d3c <__assert_fail@plt+0x6738>
   17cf4:	uxtb	r0, r9
   17cf8:	sub	r6, r5, r4
   17cfc:	str	lr, [sp, #92]	; 0x5c
   17d00:	cmp	r0, #48	; 0x30
   17d04:	cmpne	r0, #43	; 0x2b
   17d08:	bne	17d20 <__assert_fail@plt+0x671c>
   17d0c:	mov	r0, r3
   17d10:	mov	r1, #48	; 0x30
   17d14:	b	17d28 <__assert_fail@plt+0x6724>
   17d18:	mov	ip, #0
   17d1c:	b	17e1c <__assert_fail@plt+0x6818>
   17d20:	mov	r0, r3
   17d24:	mov	r1, #32
   17d28:	mov	r2, r6
   17d2c:	mov	r9, r3
   17d30:	bl	11508 <memset@plt>
   17d34:	ldr	lr, [sp, #92]	; 0x5c
   17d38:	add	ip, r9, r6
   17d3c:	ldr	r0, [sp, #96]	; 0x60
   17d40:	tst	r0, #1
   17d44:	beq	17df8 <__assert_fail@plt+0x67f4>
   17d48:	cmp	r4, #0
   17d4c:	beq	17e18 <__assert_fail@plt+0x6814>
   17d50:	ldr	r0, [sp, #100]	; 0x64
   17d54:	str	lr, [sp, #92]	; 0x5c
   17d58:	mov	r6, ip
   17d5c:	sub	r0, sl, r0
   17d60:	add	r9, r0, #1
   17d64:	bl	1146c <__ctype_toupper_loc@plt>
   17d68:	mov	ip, r6
   17d6c:	tst	r9, #1
   17d70:	mov	r1, r4
   17d74:	beq	17d8c <__assert_fail@plt+0x6788>
   17d78:	ldrb	r1, [sl]
   17d7c:	ldr	r2, [r0]
   17d80:	ldr	r1, [r2, r1, lsl #2]
   17d84:	strb	r1, [ip, r8]
   17d88:	mov	r1, r8
   17d8c:	ldr	r2, [sp, #100]	; 0x64
   17d90:	ldr	lr, [sp, #92]	; 0x5c
   17d94:	ldr	r3, [sp, #108]	; 0x6c
   17d98:	cmp	sl, r2
   17d9c:	beq	17e18 <__assert_fail@plt+0x6814>
   17da0:	ldr	r6, [sp, #100]	; 0x64
   17da4:	cmp	r5, r9
   17da8:	movhi	r9, r5
   17dac:	add	r2, r1, r6
   17db0:	add	r2, r2, r9
   17db4:	sub	r2, r2, sl
   17db8:	add	r2, r3, r2
   17dbc:	sub	r3, r6, #2
   17dc0:	sub	r2, r2, #2
   17dc4:	add	r6, r3, r1
   17dc8:	ldr	r5, [r0]
   17dcc:	ldrb	r6, [r6, #1]
   17dd0:	ldr	r6, [r5, r6, lsl #2]
   17dd4:	strb	r6, [r2]
   17dd8:	ldrb	r6, [r3, r1]
   17ddc:	ldr	r5, [r0]
   17de0:	subs	r1, r1, #2
   17de4:	ldr	r6, [r5, r6, lsl #2]
   17de8:	strb	r6, [r2, #-1]
   17dec:	sub	r2, r2, #2
   17df0:	bne	17dc4 <__assert_fail@plt+0x67c0>
   17df4:	b	17e18 <__assert_fail@plt+0x6814>
   17df8:	ldr	r1, [sp, #100]	; 0x64
   17dfc:	mov	r0, ip
   17e00:	mov	r2, r4
   17e04:	mov	r5, lr
   17e08:	mov	r6, ip
   17e0c:	bl	11358 <memcpy@plt>
   17e10:	mov	ip, r6
   17e14:	mov	lr, r5
   17e18:	add	ip, ip, r4
   17e1c:	add	lr, r7, lr
   17e20:	mov	r8, #-2147483648	; 0x80000000
   17e24:	ldrb	r3, [sl, #1]!
   17e28:	mvn	r7, #0
   17e2c:	cmp	r3, #0
   17e30:	bne	16fac <__assert_fail@plt+0x59a8>
   17e34:	b	18a54 <__assert_fail@plt+0x7450>
   17e38:	cmp	r0, #69	; 0x45
   17e3c:	bne	18220 <__assert_fail@plt+0x6c1c>
   17e40:	mov	r5, #0
   17e44:	mov	r1, #121	; 0x79
   17e48:	b	187a8 <__assert_fail@plt+0x71a4>
   17e4c:	mov	ip, #0
   17e50:	b	184a4 <__assert_fail@plt+0x6ea0>
   17e54:	ldr	r3, [sp, #88]	; 0x58
   17e58:	ldr	r0, [sp, #100]	; 0x64
   17e5c:	b	18474 <__assert_fail@plt+0x6e70>
   17e60:	mov	r3, #0
   17e64:	sub	r7, r7, r5
   17e68:	add	lr, r5, lr
   17e6c:	ldr	r0, [sp, #104]	; 0x68
   17e70:	sub	r0, r0, lr
   17e74:	cmp	r0, #2
   17e78:	bcc	18a80 <__assert_fail@plt+0x747c>
   17e7c:	cmp	r3, #0
   17e80:	sub	r7, r7, #1
   17e84:	add	lr, lr, #1
   17e88:	strbne	r4, [r3], #1
   17e8c:	moveq	r3, #0
   17e90:	subs	r5, r9, #45	; 0x2d
   17e94:	ldr	r0, [sp, #104]	; 0x68
   17e98:	mov	r4, sl
   17e9c:	bicne	r5, r7, r7, asr #31
   17ea0:	cmp	r5, sl
   17ea4:	movhi	r4, r5
   17ea8:	sub	r0, r0, lr
   17eac:	cmp	r4, r0
   17eb0:	bcs	18a80 <__assert_fail@plt+0x747c>
   17eb4:	cmp	r3, #0
   17eb8:	beq	17ee8 <__assert_fail@plt+0x68e4>
   17ebc:	cmp	r5, sl
   17ec0:	mov	r6, r3
   17ec4:	bls	17f14 <__assert_fail@plt+0x6910>
   17ec8:	cmp	r9, #48	; 0x30
   17ecc:	sub	r6, r5, sl
   17ed0:	str	lr, [sp, #92]	; 0x5c
   17ed4:	cmpne	r9, #43	; 0x2b
   17ed8:	bne	17ef0 <__assert_fail@plt+0x68ec>
   17edc:	mov	r0, r3
   17ee0:	mov	r1, #48	; 0x30
   17ee4:	b	17ef8 <__assert_fail@plt+0x68f4>
   17ee8:	mov	ip, #0
   17eec:	b	17fd8 <__assert_fail@plt+0x69d4>
   17ef0:	mov	r0, r3
   17ef4:	mov	r1, #32
   17ef8:	mov	r2, r6
   17efc:	mov	r7, r3
   17f00:	bl	11508 <memset@plt>
   17f04:	ldr	lr, [sp, #92]	; 0x5c
   17f08:	ldr	ip, [sp, #96]	; 0x60
   17f0c:	add	r6, r7, r6
   17f10:	mov	r3, r7
   17f14:	tst	ip, #1
   17f18:	beq	17fbc <__assert_fail@plt+0x69b8>
   17f1c:	cmp	sl, #0
   17f20:	beq	17fd4 <__assert_fail@plt+0x69d0>
   17f24:	str	r3, [sp, #108]	; 0x6c
   17f28:	mov	r7, lr
   17f2c:	mvn	r9, r8
   17f30:	bl	1146c <__ctype_toupper_loc@plt>
   17f34:	tst	sl, #1
   17f38:	mov	r1, sl
   17f3c:	beq	17f54 <__assert_fail@plt+0x6950>
   17f40:	sub	r1, sl, #1
   17f44:	ldr	r3, [r0]
   17f48:	ldrb	r2, [r8, r1]
   17f4c:	ldr	r2, [r3, r2, lsl #2]
   17f50:	strb	r2, [r6, r1]
   17f54:	ldr	r2, [sp, #44]	; 0x2c
   17f58:	mov	lr, r7
   17f5c:	ldr	r7, [sp, #108]	; 0x6c
   17f60:	cmp	r9, r2
   17f64:	beq	17fd4 <__assert_fail@plt+0x69d0>
   17f68:	ldr	r3, [sp, #36]	; 0x24
   17f6c:	cmp	r5, sl
   17f70:	add	r2, r1, r8
   17f74:	movls	r5, sl
   17f78:	add	r2, r2, r5
   17f7c:	add	r3, r7, r3
   17f80:	add	r2, r3, r2
   17f84:	sub	r3, r8, #2
   17f88:	add	r5, r3, r1
   17f8c:	ldr	r7, [r0]
   17f90:	ldrb	r5, [r5, #1]
   17f94:	ldr	r7, [r7, r5, lsl #2]
   17f98:	strb	r7, [r2]
   17f9c:	ldrb	r7, [r3, r1]
   17fa0:	ldr	r5, [r0]
   17fa4:	subs	r1, r1, #2
   17fa8:	ldr	r7, [r5, r7, lsl #2]
   17fac:	strb	r7, [r2, #-1]
   17fb0:	sub	r2, r2, #2
   17fb4:	bne	17f88 <__assert_fail@plt+0x6984>
   17fb8:	b	17fd4 <__assert_fail@plt+0x69d0>
   17fbc:	mov	r0, r6
   17fc0:	mov	r1, r8
   17fc4:	mov	r2, sl
   17fc8:	mov	r5, lr
   17fcc:	bl	11358 <memcpy@plt>
   17fd0:	mov	lr, r5
   17fd4:	add	ip, r6, sl
   17fd8:	ldr	sl, [sp, #100]	; 0x64
   17fdc:	add	lr, r4, lr
   17fe0:	mov	r8, #-2147483648	; 0x80000000
   17fe4:	ldrb	r3, [sl, #1]!
   17fe8:	mvn	r7, #0
   17fec:	cmp	r3, #0
   17ff0:	bne	16fac <__assert_fail@plt+0x59a8>
   17ff4:	b	18a54 <__assert_fail@plt+0x7450>
   17ff8:	sub	r2, r2, #1
   17ffc:	movw	r4, #365	; 0x16d
   18000:	tst	r2, #3
   18004:	bne	18048 <__assert_fail@plt+0x6a44>
   18008:	movw	r4, #34079	; 0x851f
   1800c:	movt	r4, #20971	; 0x51eb
   18010:	smmul	r4, r2, r4
   18014:	asr	r6, r4, #5
   18018:	add	r3, r6, r4, lsr #31
   1801c:	mov	r6, #100	; 0x64
   18020:	mls	r3, r3, r6, r2
   18024:	asr	r6, r4, #7
   18028:	add	r4, r6, r4, lsr #31
   1802c:	mov	r6, #400	; 0x190
   18030:	mls	r2, r4, r6, r2
   18034:	movw	r4, #365	; 0x16d
   18038:	cmp	r2, #0
   1803c:	movweq	r4, #366	; 0x16e
   18040:	cmp	r3, #0
   18044:	movwne	r4, #366	; 0x16e
   18048:	add	r2, r4, r5
   1804c:	movw	r4, #382	; 0x17e
   18050:	sub	r3, r4, r8
   18054:	add	r2, r3, r2
   18058:	smmla	r2, r2, ip, r2
   1805c:	asr	r4, r2, #2
   18060:	add	r2, r4, r2, lsr #31
   18064:	rsb	r2, r2, r2, lsl #3
   18068:	sub	r2, r2, r3
   1806c:	mvn	r3, #0
   18070:	add	r4, r2, #3
   18074:	cmp	r1, #71	; 0x47
   18078:	bne	1749c <__assert_fail@plt+0x5e98>
   1807c:	movw	r2, #63636	; 0xf894
   18080:	mov	ip, #4
   18084:	movt	r2, #65535	; 0xffff
   18088:	sub	r6, r2, r3
   1808c:	add	r3, lr, r3
   18090:	mov	r2, #0
   18094:	cmp	lr, r6
   18098:	ldr	lr, [sp, #92]	; 0x5c
   1809c:	movw	r6, #1900	; 0x76c
   180a0:	movwlt	r2, #1
   180a4:	add	r3, r3, r6
   180a8:	b	18508 <__assert_fail@plt+0x6f04>
   180ac:	smmla	r2, r4, ip, r4
   180b0:	ldr	lr, [sp, #92]	; 0x5c
   180b4:	mov	ip, #2
   180b8:	asr	r3, r2, #2
   180bc:	add	r2, r3, r2, lsr #31
   180c0:	add	r3, r2, #1
   180c4:	b	179a8 <__assert_fail@plt+0x63a4>
   180c8:	ldr	r2, [sp, #88]	; 0x58
   180cc:	movw	r5, #63636	; 0xf894
   180d0:	mov	r3, #0
   180d4:	mvn	r4, #98	; 0x62
   180d8:	mov	ip, #2
   180dc:	movt	r5, #65535	; 0xffff
   180e0:	ldr	r6, [r2, #20]
   180e4:	mov	r2, #0
   180e8:	cmp	r6, r5
   180ec:	movwge	r3, #1
   180f0:	cmp	r6, r5
   180f4:	and	r3, r3, r6, lsr #31
   180f8:	movwlt	r2, #1
   180fc:	smlabb	r3, r3, r4, r6
   18100:	movw	r4, #34079	; 0x851f
   18104:	movt	r4, #20971	; 0x51eb
   18108:	smmul	r3, r3, r4
   1810c:	asr	r4, r3, #5
   18110:	add	r3, r4, r3, lsr #31
   18114:	add	r3, r3, #19
   18118:	b	18508 <__assert_fail@plt+0x6f04>
   1811c:	cmp	r4, #1
   18120:	blt	18154 <__assert_fail@plt+0x6b50>
   18124:	smmul	r3, r1, r2
   18128:	cmp	r0, #0
   1812c:	asr	r6, r3, #2
   18130:	add	r3, r6, r3, lsr #31
   18134:	add	r6, r3, r3, lsl #2
   18138:	sub	r1, r1, r6, lsl #1
   1813c:	add	r1, r1, #48	; 0x30
   18140:	strb	r1, [r8, r0]
   18144:	sub	r1, r0, #1
   18148:	mov	r0, r1
   1814c:	mov	r1, r3
   18150:	bgt	18124 <__assert_fail@plt+0x6b20>
   18154:	ldr	r0, [sp, #104]	; 0x68
   18158:	cmp	r9, #0
   1815c:	movweq	r9, #48	; 0x30
   18160:	sub	r8, r0, lr
   18164:	cmp	r4, r8
   18168:	bcs	18a80 <__assert_fail@plt+0x747c>
   1816c:	mov	r2, #0
   18170:	cmp	ip, #0
   18174:	mov	r5, #0
   18178:	beq	185a4 <__assert_fail@plt+0x6fa0>
   1817c:	ldr	r0, [sp, #96]	; 0x60
   18180:	tst	r0, #1
   18184:	beq	1857c <__assert_fail@plt+0x6f78>
   18188:	cmp	r4, #0
   1818c:	beq	1859c <__assert_fail@plt+0x6f98>
   18190:	mov	r5, lr
   18194:	mov	r6, ip
   18198:	bl	1146c <__ctype_toupper_loc@plt>
   1819c:	mov	ip, r6
   181a0:	tst	r4, #1
   181a4:	mov	r1, r4
   181a8:	beq	181cc <__assert_fail@plt+0x6bc8>
   181ac:	ldr	r1, [sp, #24]
   181b0:	ldr	r2, [r0]
   181b4:	add	r1, r1, r4
   181b8:	ldrb	r1, [r1, #-9]
   181bc:	ldr	r1, [r2, r1, lsl #2]
   181c0:	add	r2, ip, r4
   181c4:	strb	r1, [r2, #-1]
   181c8:	sub	r1, r4, #1
   181cc:	ldr	r6, [sp, #28]
   181d0:	cmp	r4, #1
   181d4:	mov	lr, r5
   181d8:	beq	1859c <__assert_fail@plt+0x6f98>
   181dc:	sub	r2, ip, #2
   181e0:	add	r3, r6, r1
   181e4:	ldr	r5, [r0]
   181e8:	ldrb	r3, [r3, #1]
   181ec:	ldr	r3, [r5, r3, lsl #2]
   181f0:	add	r5, r2, r1
   181f4:	strb	r3, [r5, #1]
   181f8:	ldrb	r3, [r6, r1]
   181fc:	ldr	r5, [r0]
   18200:	ldr	r3, [r5, r3, lsl #2]
   18204:	strb	r3, [r2, r1]
   18208:	subs	r1, r1, #2
   1820c:	bne	181e0 <__assert_fail@plt+0x6bdc>
   18210:	b	1859c <__assert_fail@plt+0x6f98>
   18214:	mov	r5, #0
   18218:	mov	r1, #120	; 0x78
   1821c:	b	187a8 <__assert_fail@plt+0x71a4>
   18220:	ldr	r2, [sp, #88]	; 0x58
   18224:	mov	ip, #2
   18228:	ldr	r6, [r2, #20]
   1822c:	movw	r2, #34079	; 0x851f
   18230:	movt	r2, #20971	; 0x51eb
   18234:	smmul	r2, r6, r2
   18238:	asr	r3, r2, #5
   1823c:	add	r2, r3, r2, lsr #31
   18240:	mov	r3, #100	; 0x64
   18244:	mls	r5, r2, r3, r6
   18248:	mov	r2, #0
   1824c:	cmn	r5, #1
   18250:	ble	184f4 <__assert_fail@plt+0x6ef0>
   18254:	mov	r3, r5
   18258:	b	18508 <__assert_fail@plt+0x6f04>
   1825c:	subs	r0, r9, #45	; 0x2d
   18260:	ldr	r1, [sp, #104]	; 0x68
   18264:	bicne	r0, r7, r7, asr #31
   18268:	cmp	r0, #1
   1826c:	mov	r5, r0
   18270:	movls	r5, #1
   18274:	sub	r1, r1, lr
   18278:	cmp	r5, r1
   1827c:	bcs	18a80 <__assert_fail@plt+0x747c>
   18280:	ldr	ip, [sp, #108]	; 0x6c
   18284:	mov	r8, #-2147483648	; 0x80000000
   18288:	cmp	ip, #0
   1828c:	beq	16f94 <__assert_fail@plt+0x5990>
   18290:	mov	r1, #37	; 0x25
   18294:	cmp	r0, #2
   18298:	bcc	18a28 <__assert_fail@plt+0x7424>
   1829c:	uxtb	r1, r9
   182a0:	sub	r4, r0, #1
   182a4:	cmp	r1, #48	; 0x30
   182a8:	cmpne	r1, #43	; 0x2b
   182ac:	bne	189fc <__assert_fail@plt+0x73f8>
   182b0:	mov	r0, ip
   182b4:	mov	r1, #48	; 0x30
   182b8:	b	18a04 <__assert_fail@plt+0x7400>
   182bc:	mov	ip, #0
   182c0:	b	186b8 <__assert_fail@plt+0x70b4>
   182c4:	ldr	r4, [sp, #96]	; 0x60
   182c8:	ldr	r2, [sp, #40]	; 0x28
   182cc:	mov	r3, r0
   182d0:	smmul	r6, r3, r1
   182d4:	asr	r5, r6, #2
   182d8:	add	r6, r5, r6, lsr #31
   182dc:	add	r5, r6, r6, lsl #2
   182e0:	rsb	r5, r3, r5, lsl #1
   182e4:	add	r3, r3, #9
   182e8:	cmp	r3, #18
   182ec:	mov	r3, r6
   182f0:	add	r5, r5, #48	; 0x30
   182f4:	strb	r5, [r2], #-1
   182f8:	bhi	182d0 <__assert_fail@plt+0x6ccc>
   182fc:	ldr	lr, [sp, #92]	; 0x5c
   18300:	ldr	r3, [sp, #108]	; 0x6c
   18304:	cmp	r7, #0
   18308:	add	r8, r2, #1
   1830c:	mov	ip, r4
   18310:	lsr	r2, r0, #31
   18314:	mov	r4, #0
   18318:	str	sl, [sp, #100]	; 0x64
   1831c:	movwmi	r7, #1
   18320:	b	17a3c <__assert_fail@plt+0x6438>
   18324:	ldr	r3, [sp, #108]	; 0x6c
   18328:	mov	r2, #1
   1832c:	cmp	r5, #3
   18330:	bhi	17598 <__assert_fail@plt+0x5f94>
   18334:	movw	ip, #34953	; 0x8889
   18338:	movt	ip, #34952	; 0x8888
   1833c:	smmla	r6, lr, ip, lr
   18340:	asr	r3, r6, #5
   18344:	add	r6, r3, r6, lsr #31
   18348:	smmla	r3, r6, ip, r6
   1834c:	asr	r4, r3, #5
   18350:	add	r3, r4, r3, lsr #31
   18354:	rsb	r3, r3, r3, lsl #4
   18358:	sub	ip, r6, r3, lsl #2
   1835c:	movw	r3, #46021	; 0xb3c5
   18360:	movt	r3, #37282	; 0x91a2
   18364:	smmla	r3, lr, r3, lr
   18368:	asr	r4, r3, #11
   1836c:	add	r3, r4, r3, lsr #31
   18370:	rsb	r4, r6, r6, lsl #4
   18374:	add	r6, pc, #4
   18378:	sub	r4, lr, r4, lsl #2
   1837c:	ldr	pc, [r6, r5, lsl #2]
   18380:	muleq	r1, r0, r3
   18384:	andeq	r8, r1, r0, lsl #15
   18388:	andeq	r8, r1, ip, asr r5
   1838c:	andeq	r8, r1, r4, asr r5
   18390:	mov	r6, #100	; 0x64
   18394:	mla	r3, r3, r6, ip
   18398:	mov	ip, #5
   1839c:	mov	r4, #1
   183a0:	mov	r6, #0
   183a4:	b	18794 <__assert_fail@plt+0x7190>
   183a8:	mov	r5, #0
   183ac:	mov	r1, #89	; 0x59
   183b0:	b	187a8 <__assert_fail@plt+0x71a4>
   183b4:	ldr	r9, [sp, #32]
   183b8:	mov	r0, r6
   183bc:	tst	r0, #1
   183c0:	bne	18640 <__assert_fail@plt+0x703c>
   183c4:	ldr	r1, [sp, #96]	; 0x60
   183c8:	eor	r0, r0, #1
   183cc:	and	r0, r1, r0
   183d0:	tst	r0, #1
   183d4:	beq	185f0 <__assert_fail@plt+0x6fec>
   183d8:	cmp	r8, #0
   183dc:	beq	186b4 <__assert_fail@plt+0x70b0>
   183e0:	mov	r5, ip
   183e4:	bl	1146c <__ctype_toupper_loc@plt>
   183e8:	mov	ip, r5
   183ec:	tst	r8, #1
   183f0:	mov	r1, r8
   183f4:	beq	18410 <__assert_fail@plt+0x6e0c>
   183f8:	ldr	r2, [sp, #64]	; 0x40
   183fc:	sub	r1, r8, #1
   18400:	ldr	r3, [r0]
   18404:	ldrb	r2, [r2, r1]
   18408:	ldr	r2, [r3, r2, lsl #2]
   1840c:	strb	r2, [ip, r1]
   18410:	cmp	r8, #1
   18414:	mov	lr, r7
   18418:	beq	186b4 <__assert_fail@plt+0x70b0>
   1841c:	add	r2, r9, r1
   18420:	ldr	r3, [r0]
   18424:	ldrb	r2, [r2, #1]
   18428:	ldr	r2, [r3, r2, lsl #2]
   1842c:	add	r3, ip, r1
   18430:	strb	r2, [r3, #-1]
   18434:	ldrb	r2, [r9, r1]
   18438:	ldr	r7, [r0]
   1843c:	subs	r1, r1, #2
   18440:	ldr	r2, [r7, r2, lsl #2]
   18444:	strb	r2, [r3, #-2]
   18448:	bne	1841c <__assert_fail@plt+0x6e18>
   1844c:	b	186b4 <__assert_fail@plt+0x70b0>
   18450:	mov	r0, r7
   18454:	mov	r1, #32
   18458:	ldr	r2, [sp, #96]	; 0x60
   1845c:	bl	11508 <memset@plt>
   18460:	ldr	r2, [sp, #96]	; 0x60
   18464:	ldr	r1, [sp, #20]
   18468:	ldr	r3, [sp, #88]	; 0x58
   1846c:	ldr	r0, [sp, #100]	; 0x64
   18470:	add	r7, r7, r2
   18474:	stm	sp, {r0, r9}
   18478:	ldr	r0, [fp, #20]
   1847c:	mov	r2, r4
   18480:	str	r8, [sp, #8]
   18484:	str	r0, [sp, #12]
   18488:	ldr	r0, [fp, #24]
   1848c:	str	r0, [sp, #16]
   18490:	mov	r0, r7
   18494:	bl	16e8c <__assert_fail@plt+0x5888>
   18498:	ldr	lr, [sp, #92]	; 0x5c
   1849c:	mov	ip, r7
   184a0:	add	ip, r7, r6
   184a4:	mov	r8, #-2147483648	; 0x80000000
   184a8:	add	lr, r5, lr
   184ac:	ldrb	r3, [sl, #1]!
   184b0:	mvn	r7, #0
   184b4:	cmp	r3, #0
   184b8:	bne	16fac <__assert_fail@plt+0x59a8>
   184bc:	b	18a54 <__assert_fail@plt+0x7450>
   184c0:	movw	r5, #63636	; 0xf894
   184c4:	movt	r5, #65535	; 0xffff
   184c8:	sub	r5, r5, r3
   184cc:	add	r3, r4, #100	; 0x64
   184d0:	cmp	lr, r5
   184d4:	ldr	lr, [sp, #92]	; 0x5c
   184d8:	rsblt	r3, r4, #0
   184dc:	b	18508 <__assert_fail@plt+0x6f04>
   184e0:	cmp	r7, #6
   184e4:	mov	r0, r7
   184e8:	movle	r0, #6
   184ec:	sub	r8, r0, #6
   184f0:	b	17730 <__assert_fail@plt+0x612c>
   184f4:	movw	r4, #63636	; 0xf894
   184f8:	add	r3, r5, #100	; 0x64
   184fc:	movt	r4, #65535	; 0xffff
   18500:	cmp	r6, r4
   18504:	rsblt	r3, r5, #0
   18508:	ldr	r4, [fp, #12]
   1850c:	cmp	r9, #0
   18510:	mov	r6, #0
   18514:	moveq	r9, r4
   18518:	mov	r4, #0
   1851c:	cmp	r9, #43	; 0x2b
   18520:	bne	179bc <__assert_fail@plt+0x63b8>
   18524:	cmp	ip, r7
   18528:	mov	r4, #0
   1852c:	movw	r5, #9999	; 0x270f
   18530:	mov	r8, lr
   18534:	mov	lr, #0
   18538:	movwlt	r4, #1
   1853c:	cmp	ip, #2
   18540:	movweq	r5, #99	; 0x63
   18544:	cmp	r5, r3
   18548:	movwcc	lr, #1
   1854c:	orr	r4, r4, lr
   18550:	b	18794 <__assert_fail@plt+0x7190>
   18554:	cmp	r4, #0
   18558:	beq	18778 <__assert_fail@plt+0x7174>
   1855c:	movw	r6, #10000	; 0x2710
   18560:	mla	r3, r3, r6, r4
   18564:	mov	r6, #100	; 0x64
   18568:	mov	r4, #1
   1856c:	mla	r3, ip, r6, r3
   18570:	mov	ip, #9
   18574:	mov	r6, #20
   18578:	b	18794 <__assert_fail@plt+0x7190>
   1857c:	sub	r1, fp, #48	; 0x30
   18580:	mov	r0, ip
   18584:	mov	r2, r4
   18588:	mov	r5, lr
   1858c:	mov	r6, ip
   18590:	bl	11358 <memcpy@plt>
   18594:	mov	ip, r6
   18598:	mov	lr, r5
   1859c:	add	r5, ip, r4
   185a0:	mov	r2, #0
   185a4:	cmp	r9, #45	; 0x2d
   185a8:	subne	r0, r7, r4
   185ac:	bicne	r2, r0, r0, asr #31
   185b0:	sub	r0, r8, r4
   185b4:	cmp	r2, r0
   185b8:	bcs	18a80 <__assert_fail@plt+0x747c>
   185bc:	cmp	r5, #0
   185c0:	beq	185e8 <__assert_fail@plt+0x6fe4>
   185c4:	cmp	r2, #0
   185c8:	beq	185e8 <__assert_fail@plt+0x6fe4>
   185cc:	uxtb	r0, r9
   185d0:	cmp	r0, #48	; 0x30
   185d4:	cmpne	r0, #43	; 0x2b
   185d8:	bne	1874c <__assert_fail@plt+0x7148>
   185dc:	mov	r0, r5
   185e0:	mov	r1, #48	; 0x30
   185e4:	b	18754 <__assert_fail@plt+0x7150>
   185e8:	mov	ip, r5
   185ec:	b	1876c <__assert_fail@plt+0x7168>
   185f0:	ldr	r1, [sp, #64]	; 0x40
   185f4:	mov	r0, ip
   185f8:	mov	r2, r8
   185fc:	mov	r5, ip
   18600:	bl	11358 <memcpy@plt>
   18604:	mov	ip, r5
   18608:	mov	lr, r7
   1860c:	b	186b4 <__assert_fail@plt+0x70b0>
   18610:	mov	r0, ip
   18614:	mov	r1, #32
   18618:	mov	r2, r5
   1861c:	mov	r9, ip
   18620:	bl	11508 <memset@plt>
   18624:	mov	ip, r9
   18628:	ldr	r9, [sp, #32]
   1862c:	mov	r0, r6
   18630:	mov	lr, r7
   18634:	add	ip, ip, r5
   18638:	tst	r0, #1
   1863c:	beq	183c4 <__assert_fail@plt+0x6dc0>
   18640:	cmp	r8, #0
   18644:	beq	186b4 <__assert_fail@plt+0x70b0>
   18648:	mov	r5, ip
   1864c:	bl	11460 <__ctype_tolower_loc@plt>
   18650:	mov	ip, r5
   18654:	tst	r8, #1
   18658:	mov	r1, r8
   1865c:	beq	18678 <__assert_fail@plt+0x7074>
   18660:	ldr	r2, [sp, #64]	; 0x40
   18664:	sub	r1, r8, #1
   18668:	ldr	r3, [r0]
   1866c:	ldrb	r2, [r2, r1]
   18670:	ldr	r2, [r3, r2, lsl #2]
   18674:	strb	r2, [ip, r1]
   18678:	cmp	r8, #1
   1867c:	mov	lr, r7
   18680:	beq	186b4 <__assert_fail@plt+0x70b0>
   18684:	add	r2, r9, r1
   18688:	ldr	r3, [r0]
   1868c:	ldrb	r2, [r2, #1]
   18690:	ldr	r2, [r3, r2, lsl #2]
   18694:	add	r3, ip, r1
   18698:	strb	r2, [r3, #-1]
   1869c:	ldrb	r2, [r9, r1]
   186a0:	ldr	r7, [r0]
   186a4:	subs	r1, r1, #2
   186a8:	ldr	r2, [r7, r2, lsl #2]
   186ac:	strb	r2, [r3, #-2]
   186b0:	bne	18684 <__assert_fail@plt+0x7080>
   186b4:	add	ip, ip, r8
   186b8:	mov	r8, #-2147483648	; 0x80000000
   186bc:	add	lr, r4, lr
   186c0:	ldrb	r3, [sl, #1]!
   186c4:	mvn	r7, #0
   186c8:	cmp	r3, #0
   186cc:	bne	16fac <__assert_fail@plt+0x59a8>
   186d0:	b	18a54 <__assert_fail@plt+0x7450>
   186d4:	mov	r0, ip
   186d8:	mov	r1, #32
   186dc:	mov	r2, r4
   186e0:	mov	r6, lr
   186e4:	mov	r7, ip
   186e8:	bl	11508 <memset@plt>
   186ec:	mov	ip, r7
   186f0:	mov	lr, r6
   186f4:	add	ip, r7, r4
   186f8:	mov	r8, #-2147483648	; 0x80000000
   186fc:	mov	r0, #10
   18700:	b	18730 <__assert_fail@plt+0x712c>
   18704:	mov	r0, ip
   18708:	mov	r1, #32
   1870c:	mov	r2, r4
   18710:	mov	r6, lr
   18714:	mov	r7, ip
   18718:	bl	11508 <memset@plt>
   1871c:	mov	ip, r7
   18720:	mov	lr, r6
   18724:	add	ip, r7, r4
   18728:	mov	r8, #-2147483648	; 0x80000000
   1872c:	mov	r0, #9
   18730:	strb	r0, [ip], #1
   18734:	add	lr, r5, lr
   18738:	ldrb	r3, [sl, #1]!
   1873c:	mvn	r7, #0
   18740:	cmp	r3, #0
   18744:	bne	16fac <__assert_fail@plt+0x59a8>
   18748:	b	18a54 <__assert_fail@plt+0x7450>
   1874c:	mov	r0, r5
   18750:	mov	r1, #32
   18754:	mov	r7, r2
   18758:	mov	r6, lr
   1875c:	bl	11508 <memset@plt>
   18760:	mov	r2, r7
   18764:	mov	lr, r6
   18768:	add	ip, r5, r7
   1876c:	add	r0, r2, lr
   18770:	add	lr, r0, r4
   18774:	b	17e20 <__assert_fail@plt+0x681c>
   18778:	cmp	ip, #0
   1877c:	beq	18a44 <__assert_fail@plt+0x7440>
   18780:	mov	r6, #100	; 0x64
   18784:	mov	r4, #1
   18788:	mla	r3, r3, r6, ip
   1878c:	mov	ip, #6
   18790:	mov	r6, #4
   18794:	mov	lr, r8
   18798:	cmp	r0, #79	; 0x4f
   1879c:	moveq	r5, #0
   187a0:	cmpeq	r2, #0
   187a4:	bne	179cc <__assert_fail@plt+0x63c8>
   187a8:	movw	r2, #9504	; 0x2520
   187ac:	cmp	r0, #0
   187b0:	ldr	r3, [sp, #88]	; 0x58
   187b4:	str	lr, [sp, #92]	; 0x5c
   187b8:	strh	r2, [fp, #-53]	; 0xffffffcb
   187bc:	ldr	r2, [sp, #84]	; 0x54
   187c0:	ldrne	r2, [sp, #68]	; 0x44
   187c4:	strbne	r0, [fp, #-51]	; 0xffffffcd
   187c8:	mov	r0, #0
   187cc:	strb	r0, [r2, #1]
   187d0:	strb	r1, [r2]
   187d4:	add	r0, sp, #112	; 0x70
   187d8:	sub	r2, fp, #53	; 0x35
   187dc:	mov	r1, #1024	; 0x400
   187e0:	bl	11448 <strftime@plt>
   187e4:	cmp	r0, #0
   187e8:	beq	18858 <__assert_fail@plt+0x7254>
   187ec:	subs	r4, r9, #45	; 0x2d
   187f0:	mov	r6, r0
   187f4:	sub	r8, r0, #1
   187f8:	ldr	lr, [sp, #92]	; 0x5c
   187fc:	ldr	r0, [sp, #104]	; 0x68
   18800:	movne	r4, r7
   18804:	cmp	r7, #0
   18808:	mov	r7, r8
   1880c:	movwmi	r4, #0
   18810:	cmp	r4, r8
   18814:	movhi	r7, r4
   18818:	sub	r0, r0, lr
   1881c:	cmp	r7, r0
   18820:	bcs	18a80 <__assert_fail@plt+0x747c>
   18824:	ldr	r0, [sp, #108]	; 0x6c
   18828:	cmp	r0, #0
   1882c:	beq	18878 <__assert_fail@plt+0x7274>
   18830:	cmp	r4, r8
   18834:	mov	r2, r0
   18838:	bls	1889c <__assert_fail@plt+0x7298>
   1883c:	cmp	r9, #48	; 0x30
   18840:	sub	r2, r4, r8
   18844:	cmpne	r9, #43	; 0x2b
   18848:	str	r2, [sp, #100]	; 0x64
   1884c:	bne	18880 <__assert_fail@plt+0x727c>
   18850:	mov	r1, #48	; 0x30
   18854:	b	18884 <__assert_fail@plt+0x7280>
   18858:	ldr	lr, [sp, #92]	; 0x5c
   1885c:	ldr	ip, [sp, #108]	; 0x6c
   18860:	mov	r8, #-2147483648	; 0x80000000
   18864:	ldrb	r3, [sl, #1]!
   18868:	mvn	r7, #0
   1886c:	cmp	r3, #0
   18870:	bne	16fac <__assert_fail@plt+0x59a8>
   18874:	b	18a54 <__assert_fail@plt+0x7450>
   18878:	mov	ip, #0
   1887c:	b	189e0 <__assert_fail@plt+0x73dc>
   18880:	mov	r1, #32
   18884:	mov	r9, r0
   18888:	bl	11508 <memset@plt>
   1888c:	ldr	r0, [sp, #100]	; 0x64
   18890:	ldr	lr, [sp, #92]	; 0x5c
   18894:	add	r2, r9, r0
   18898:	mov	r0, r9
   1889c:	tst	r5, #1
   188a0:	str	r2, [sp, #100]	; 0x64
   188a4:	beq	18930 <__assert_fail@plt+0x732c>
   188a8:	cmp	r8, #0
   188ac:	beq	189d8 <__assert_fail@plt+0x73d4>
   188b0:	mov	r5, r0
   188b4:	bl	11460 <__ctype_tolower_loc@plt>
   188b8:	add	ip, sp, #112	; 0x70
   188bc:	tst	r8, #1
   188c0:	mov	r1, r8
   188c4:	beq	188e0 <__assert_fail@plt+0x72dc>
   188c8:	ldrb	r1, [ip, r8]
   188cc:	ldr	r2, [r0]
   188d0:	ldr	r3, [sp, #100]	; 0x64
   188d4:	ldr	r2, [r2, r1, lsl #2]
   188d8:	sub	r1, r6, #2
   188dc:	strb	r2, [r3, r1]
   188e0:	ldr	lr, [sp, #92]	; 0x5c
   188e4:	cmp	r6, #2
   188e8:	beq	189d8 <__assert_fail@plt+0x73d4>
   188ec:	cmp	r4, r8
   188f0:	movls	r4, r8
   188f4:	sub	r2, r4, r6
   188f8:	add	r5, r5, r2
   188fc:	ldrb	r3, [ip, r1]
   18900:	ldr	r6, [r0]
   18904:	mov	r2, r5
   18908:	ldr	r3, [r6, r3, lsl #2]
   1890c:	strb	r3, [r2, r1]!
   18910:	add	r3, ip, r1
   18914:	subs	r1, r1, #2
   18918:	ldrb	r3, [r3, #-1]
   1891c:	ldr	r6, [r0]
   18920:	ldr	r3, [r6, r3, lsl #2]
   18924:	strb	r3, [r2, #-1]
   18928:	bne	188fc <__assert_fail@plt+0x72f8>
   1892c:	b	189d8 <__assert_fail@plt+0x73d4>
   18930:	ldr	r1, [sp, #96]	; 0x60
   18934:	tst	r1, #1
   18938:	beq	189c4 <__assert_fail@plt+0x73c0>
   1893c:	cmp	r8, #0
   18940:	beq	189d8 <__assert_fail@plt+0x73d4>
   18944:	mov	r5, r0
   18948:	bl	1146c <__ctype_toupper_loc@plt>
   1894c:	add	ip, sp, #112	; 0x70
   18950:	tst	r8, #1
   18954:	mov	r1, r8
   18958:	beq	18974 <__assert_fail@plt+0x7370>
   1895c:	ldrb	r1, [ip, r8]
   18960:	ldr	r2, [r0]
   18964:	ldr	r3, [sp, #100]	; 0x64
   18968:	ldr	r2, [r2, r1, lsl #2]
   1896c:	sub	r1, r6, #2
   18970:	strb	r2, [r3, r1]
   18974:	ldr	lr, [sp, #92]	; 0x5c
   18978:	cmp	r6, #2
   1897c:	beq	189d8 <__assert_fail@plt+0x73d4>
   18980:	cmp	r4, r8
   18984:	movls	r4, r8
   18988:	sub	r2, r4, r6
   1898c:	add	r5, r5, r2
   18990:	ldrb	r3, [ip, r1]
   18994:	ldr	r6, [r0]
   18998:	mov	r2, r5
   1899c:	ldr	r3, [r6, r3, lsl #2]
   189a0:	strb	r3, [r2, r1]!
   189a4:	add	r3, ip, r1
   189a8:	subs	r1, r1, #2
   189ac:	ldrb	r3, [r3, #-1]
   189b0:	ldr	r6, [r0]
   189b4:	ldr	r3, [r6, r3, lsl #2]
   189b8:	strb	r3, [r2, #-1]
   189bc:	bne	18990 <__assert_fail@plt+0x738c>
   189c0:	b	189d8 <__assert_fail@plt+0x73d4>
   189c4:	ldr	r1, [sp, #48]	; 0x30
   189c8:	mov	r0, r2
   189cc:	mov	r2, r8
   189d0:	bl	11358 <memcpy@plt>
   189d4:	ldr	lr, [sp, #92]	; 0x5c
   189d8:	ldr	r0, [sp, #100]	; 0x64
   189dc:	add	ip, r0, r8
   189e0:	mov	r8, #-2147483648	; 0x80000000
   189e4:	add	lr, r7, lr
   189e8:	ldrb	r3, [sl, #1]!
   189ec:	mvn	r7, #0
   189f0:	cmp	r3, #0
   189f4:	bne	16fac <__assert_fail@plt+0x59a8>
   189f8:	b	18a54 <__assert_fail@plt+0x7450>
   189fc:	mov	r0, ip
   18a00:	mov	r1, #32
   18a04:	mov	r2, r4
   18a08:	mov	r6, lr
   18a0c:	mov	r7, ip
   18a10:	bl	11508 <memset@plt>
   18a14:	ldrb	r1, [sl]
   18a18:	mov	ip, r7
   18a1c:	mov	lr, r6
   18a20:	add	ip, r7, r4
   18a24:	mov	r8, #-2147483648	; 0x80000000
   18a28:	strb	r1, [ip], #1
   18a2c:	add	lr, r5, lr
   18a30:	ldrb	r3, [sl, #1]!
   18a34:	mvn	r7, #0
   18a38:	cmp	r3, #0
   18a3c:	bne	16fac <__assert_fail@plt+0x59a8>
   18a40:	b	18a54 <__assert_fail@plt+0x7450>
   18a44:	mov	ip, #3
   18a48:	b	1839c <__assert_fail@plt+0x6d98>
   18a4c:	ldr	ip, [sp, #108]	; 0x6c
   18a50:	mov	lr, #0
   18a54:	ldr	r0, [sp, #104]	; 0x68
   18a58:	ldr	r1, [sp, #72]	; 0x48
   18a5c:	cmp	r0, #0
   18a60:	cmpne	ip, #0
   18a64:	movne	r0, #0
   18a68:	strbne	r0, [ip]
   18a6c:	ldr	r0, [sp, #76]	; 0x4c
   18a70:	str	r1, [r0]
   18a74:	mov	r0, lr
   18a78:	sub	sp, fp, #28
   18a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a80:	mov	r0, #34	; 0x22
   18a84:	ldr	r1, [sp, #76]	; 0x4c
   18a88:	mov	lr, #0
   18a8c:	str	r0, [r1]
   18a90:	mov	r0, lr
   18a94:	sub	sp, fp, #28
   18a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a9c:	mov	r0, #75	; 0x4b
   18aa0:	b	18a84 <__assert_fail@plt+0x7480>
   18aa4:	push	{r4, r5, fp, lr}
   18aa8:	add	fp, sp, #8
   18aac:	cmp	r0, #0
   18ab0:	beq	18b44 <__assert_fail@plt+0x7540>
   18ab4:	mov	r1, #47	; 0x2f
   18ab8:	mov	r4, r0
   18abc:	bl	11580 <strrchr@plt>
   18ac0:	cmp	r0, #0
   18ac4:	mov	r5, r4
   18ac8:	addne	r5, r0, #1
   18acc:	sub	r0, r5, r4
   18ad0:	cmp	r0, #7
   18ad4:	blt	18b28 <__assert_fail@plt+0x7524>
   18ad8:	movw	r1, #4341	; 0x10f5
   18adc:	sub	r0, r5, #7
   18ae0:	mov	r2, #7
   18ae4:	movt	r1, #2
   18ae8:	bl	115e0 <strncmp@plt>
   18aec:	cmp	r0, #0
   18af0:	bne	18b28 <__assert_fail@plt+0x7524>
   18af4:	movw	r1, #4349	; 0x10fd
   18af8:	mov	r0, r5
   18afc:	mov	r2, #3
   18b00:	movt	r1, #2
   18b04:	bl	115e0 <strncmp@plt>
   18b08:	cmp	r0, #0
   18b0c:	beq	18b18 <__assert_fail@plt+0x7514>
   18b10:	mov	r4, r5
   18b14:	b	18b28 <__assert_fail@plt+0x7524>
   18b18:	movw	r0, #8624	; 0x21b0
   18b1c:	add	r4, r5, #3
   18b20:	movt	r0, #3
   18b24:	str	r4, [r0]
   18b28:	movw	r0, #8628	; 0x21b4
   18b2c:	movt	r0, #3
   18b30:	str	r4, [r0]
   18b34:	movw	r0, #8840	; 0x2288
   18b38:	movt	r0, #3
   18b3c:	str	r4, [r0]
   18b40:	pop	{r4, r5, fp, pc}
   18b44:	movw	r0, #8640	; 0x21c0
   18b48:	mov	r1, #55	; 0x37
   18b4c:	mov	r2, #1
   18b50:	movt	r0, #3
   18b54:	ldr	r3, [r0]
   18b58:	movw	r0, #4285	; 0x10bd
   18b5c:	movt	r0, #2
   18b60:	bl	113dc <fwrite@plt>
   18b64:	bl	115ec <abort@plt>
   18b68:	push	{r4, r5, r6, sl, fp, lr}
   18b6c:	add	fp, sp, #16
   18b70:	mov	r4, r0
   18b74:	movw	r0, #8848	; 0x2290
   18b78:	movt	r0, #3
   18b7c:	cmp	r4, #0
   18b80:	moveq	r4, r0
   18b84:	bl	114e4 <__errno_location@plt>
   18b88:	ldr	r6, [r0]
   18b8c:	mov	r5, r0
   18b90:	mov	r0, r4
   18b94:	mov	r1, #48	; 0x30
   18b98:	bl	1bde4 <__assert_fail@plt+0xa7e0>
   18b9c:	str	r6, [r5]
   18ba0:	pop	{r4, r5, r6, sl, fp, pc}
   18ba4:	movw	r1, #8848	; 0x2290
   18ba8:	cmp	r0, #0
   18bac:	movt	r1, #3
   18bb0:	movne	r1, r0
   18bb4:	ldr	r0, [r1]
   18bb8:	bx	lr
   18bbc:	movw	r2, #8848	; 0x2290
   18bc0:	cmp	r0, #0
   18bc4:	movt	r2, #3
   18bc8:	movne	r2, r0
   18bcc:	str	r1, [r2]
   18bd0:	bx	lr
   18bd4:	movw	r3, #8848	; 0x2290
   18bd8:	cmp	r0, #0
   18bdc:	and	r2, r2, #1
   18be0:	movt	r3, #3
   18be4:	movne	r3, r0
   18be8:	ubfx	r0, r1, #5, #3
   18bec:	and	r1, r1, #31
   18bf0:	add	ip, r3, r0, lsl #2
   18bf4:	mov	r0, #1
   18bf8:	ldr	r3, [ip, #8]
   18bfc:	and	r0, r0, r3, lsr r1
   18c00:	eor	r2, r0, r2
   18c04:	eor	r1, r3, r2, lsl r1
   18c08:	str	r1, [ip, #8]
   18c0c:	bx	lr
   18c10:	movw	r2, #8848	; 0x2290
   18c14:	cmp	r0, #0
   18c18:	movt	r2, #3
   18c1c:	movne	r2, r0
   18c20:	ldr	r0, [r2, #4]
   18c24:	str	r1, [r2, #4]
   18c28:	bx	lr
   18c2c:	push	{fp, lr}
   18c30:	mov	fp, sp
   18c34:	movw	r3, #8848	; 0x2290
   18c38:	cmp	r0, #0
   18c3c:	movt	r3, #3
   18c40:	movne	r3, r0
   18c44:	cmp	r1, #0
   18c48:	mov	r0, #10
   18c4c:	cmpne	r2, #0
   18c50:	str	r0, [r3]
   18c54:	bne	18c5c <__assert_fail@plt+0x7658>
   18c58:	bl	115ec <abort@plt>
   18c5c:	str	r1, [r3, #40]	; 0x28
   18c60:	str	r2, [r3, #44]	; 0x2c
   18c64:	pop	{fp, pc}
   18c68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c6c:	add	fp, sp, #28
   18c70:	sub	sp, sp, #20
   18c74:	mov	r7, r0
   18c78:	ldr	r0, [fp, #8]
   18c7c:	movw	r5, #8848	; 0x2290
   18c80:	mov	r8, r3
   18c84:	mov	r9, r2
   18c88:	mov	sl, r1
   18c8c:	movt	r5, #3
   18c90:	cmp	r0, #0
   18c94:	movne	r5, r0
   18c98:	bl	114e4 <__errno_location@plt>
   18c9c:	ldr	r2, [r5, #40]	; 0x28
   18ca0:	ldr	r3, [r5, #44]	; 0x2c
   18ca4:	mov	r4, r0
   18ca8:	ldm	r5, {r0, r1}
   18cac:	add	r5, r5, #8
   18cb0:	ldr	r6, [r4]
   18cb4:	stm	sp, {r0, r1, r5}
   18cb8:	mov	r0, r7
   18cbc:	mov	r1, sl
   18cc0:	str	r2, [sp, #12]
   18cc4:	str	r3, [sp, #16]
   18cc8:	mov	r2, r9
   18ccc:	mov	r3, r8
   18cd0:	bl	18ce0 <__assert_fail@plt+0x76dc>
   18cd4:	str	r6, [r4]
   18cd8:	sub	sp, fp, #28
   18cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ce4:	add	fp, sp, #28
   18ce8:	sub	sp, sp, #156	; 0x9c
   18cec:	str	r0, [fp, #-84]	; 0xffffffac
   18cf0:	add	r0, r2, #1
   18cf4:	mov	r6, r1
   18cf8:	mov	r7, r3
   18cfc:	str	r2, [fp, #-80]	; 0xffffffb0
   18d00:	str	r0, [sp, #80]	; 0x50
   18d04:	ldr	r0, [fp, #12]
   18d08:	and	r1, r0, #1
   18d0c:	str	r1, [sp, #36]	; 0x24
   18d10:	and	r1, r0, #4
   18d14:	str	r1, [sp, #32]
   18d18:	ubfx	r8, r0, #1, #1
   18d1c:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   18d20:	str	r0, [sp, #40]	; 0x28
   18d24:	ldr	r0, [fp, #24]
   18d28:	ldr	r4, [fp, #8]
   18d2c:	mov	r1, #0
   18d30:	str	r1, [fp, #-52]	; 0xffffffcc
   18d34:	mov	r1, #0
   18d38:	str	r1, [sp, #60]	; 0x3c
   18d3c:	mov	r1, #1
   18d40:	str	r1, [sp, #84]	; 0x54
   18d44:	str	r0, [sp, #76]	; 0x4c
   18d48:	ldr	r0, [fp, #20]
   18d4c:	str	r0, [sp, #72]	; 0x48
   18d50:	mov	r0, #0
   18d54:	str	r0, [sp, #56]	; 0x38
   18d58:	mov	r0, #0
   18d5c:	str	r0, [fp, #-88]	; 0xffffffa8
   18d60:	mov	r0, #0
   18d64:	str	r0, [fp, #-72]	; 0xffffffb8
   18d68:	mov	r0, #0
   18d6c:	cmp	r4, #10
   18d70:	bhi	1a08c <__assert_fail@plt+0x8a88>
   18d74:	add	r1, pc, #24
   18d78:	ldr	ip, [fp, #-84]	; 0xffffffac
   18d7c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18d80:	mov	r5, r6
   18d84:	mov	r9, #0
   18d88:	mov	r2, #1
   18d8c:	mov	r3, #0
   18d90:	ldr	pc, [r1, r4, lsl #2]
   18d94:	andeq	r8, r1, ip, asr lr
   18d98:	muleq	r1, r8, lr
   18d9c:	andeq	r8, r1, ip, ror #28
   18da0:	andeq	r8, r1, r4, asr lr
   18da4:	andeq	r8, r1, ip, lsl #29
   18da8:	strdeq	r8, [r1], -r0
   18dac:	andeq	r8, r1, ip, ror lr
   18db0:	andeq	r9, r1, r8, ror #2
   18db4:	andeq	r8, r1, r0, asr #27
   18db8:	andeq	r8, r1, r0, asr #27
   18dbc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18dc0:	movw	r6, #4431	; 0x114f
   18dc4:	mov	r0, #0
   18dc8:	mov	r2, #5
   18dcc:	movt	r6, #2
   18dd0:	mov	r1, r6
   18dd4:	bl	1137c <dcgettext@plt>
   18dd8:	cmp	r0, r6
   18ddc:	str	r0, [sp, #72]	; 0x48
   18de0:	bne	18fd0 <__assert_fail@plt+0x79cc>
   18de4:	bl	1f5b4 <__assert_fail@plt+0xdfb0>
   18de8:	ldrb	r1, [r0]
   18dec:	and	r1, r1, #223	; 0xdf
   18df0:	cmp	r1, #71	; 0x47
   18df4:	beq	18f50 <__assert_fail@plt+0x794c>
   18df8:	cmp	r1, #85	; 0x55
   18dfc:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18e00:	ldrb	r1, [r0, #1]
   18e04:	and	r1, r1, #223	; 0xdf
   18e08:	cmp	r1, #84	; 0x54
   18e0c:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18e10:	ldrb	r1, [r0, #2]
   18e14:	and	r1, r1, #223	; 0xdf
   18e18:	cmp	r1, #70	; 0x46
   18e1c:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18e20:	ldrb	r1, [r0, #3]
   18e24:	cmp	r1, #45	; 0x2d
   18e28:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18e2c:	ldrb	r1, [r0, #4]
   18e30:	cmp	r1, #56	; 0x38
   18e34:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18e38:	ldrb	r0, [r0, #5]
   18e3c:	cmp	r0, #0
   18e40:	movw	r0, #4433	; 0x1151
   18e44:	movt	r0, #2
   18e48:	str	r0, [sp, #72]	; 0x48
   18e4c:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18e50:	b	18fd0 <__assert_fail@plt+0x79cc>
   18e54:	mov	r0, #1
   18e58:	b	18e98 <__assert_fail@plt+0x7894>
   18e5c:	mov	r4, #0
   18e60:	mov	r9, #0
   18e64:	mov	r2, r0
   18e68:	b	18ee8 <__assert_fail@plt+0x78e4>
   18e6c:	tst	r8, #1
   18e70:	bne	18e98 <__assert_fail@plt+0x7894>
   18e74:	mov	r2, r0
   18e78:	b	18ec0 <__assert_fail@plt+0x78bc>
   18e7c:	mov	r0, #1
   18e80:	mov	r9, #0
   18e84:	mov	r4, #5
   18e88:	b	18f04 <__assert_fail@plt+0x7900>
   18e8c:	mov	r2, #1
   18e90:	tst	r8, #1
   18e94:	beq	18ec0 <__assert_fail@plt+0x78bc>
   18e98:	mov	r1, #1
   18e9c:	mov	r9, #0
   18ea0:	mov	r4, #2
   18ea4:	mov	r2, r0
   18ea8:	mov	r3, #1
   18eac:	str	r1, [fp, #-72]	; 0xffffffb8
   18eb0:	movw	r1, #5564	; 0x15bc
   18eb4:	movt	r1, #2
   18eb8:	str	r1, [fp, #-88]	; 0xffffffa8
   18ebc:	b	19168 <__assert_fail@plt+0x7b64>
   18ec0:	cmp	r5, #0
   18ec4:	mov	r9, #1
   18ec8:	mov	r4, #2
   18ecc:	movne	r0, #39	; 0x27
   18ed0:	strbne	r0, [ip]
   18ed4:	movw	r0, #5564	; 0x15bc
   18ed8:	movt	r0, #2
   18edc:	str	r0, [fp, #-88]	; 0xffffffa8
   18ee0:	mov	r0, #1
   18ee4:	str	r0, [fp, #-72]	; 0xffffffb8
   18ee8:	mov	r3, #0
   18eec:	b	19168 <__assert_fail@plt+0x7b64>
   18ef0:	mov	r4, #5
   18ef4:	tst	r8, #1
   18ef8:	beq	18f20 <__assert_fail@plt+0x791c>
   18efc:	mov	r0, #1
   18f00:	mov	r9, #0
   18f04:	str	r0, [fp, #-72]	; 0xffffffb8
   18f08:	movw	r0, #4429	; 0x114d
   18f0c:	mov	r2, #1
   18f10:	mov	r3, #1
   18f14:	movt	r0, #2
   18f18:	str	r0, [fp, #-88]	; 0xffffffa8
   18f1c:	b	19168 <__assert_fail@plt+0x7b64>
   18f20:	cmp	r5, #0
   18f24:	mov	r3, #0
   18f28:	mov	r9, #1
   18f2c:	mov	r2, #1
   18f30:	movne	r0, #34	; 0x22
   18f34:	strbne	r0, [ip]
   18f38:	movw	r0, #4429	; 0x114d
   18f3c:	movt	r0, #2
   18f40:	str	r0, [fp, #-88]	; 0xffffffa8
   18f44:	mov	r0, #1
   18f48:	str	r0, [fp, #-72]	; 0xffffffb8
   18f4c:	b	19168 <__assert_fail@plt+0x7b64>
   18f50:	ldrb	r1, [r0, #1]
   18f54:	and	r1, r1, #223	; 0xdf
   18f58:	cmp	r1, #66	; 0x42
   18f5c:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18f60:	ldrb	r1, [r0, #2]
   18f64:	cmp	r1, #49	; 0x31
   18f68:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18f6c:	ldrb	r1, [r0, #3]
   18f70:	cmp	r1, #56	; 0x38
   18f74:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18f78:	ldrb	r1, [r0, #4]
   18f7c:	cmp	r1, #48	; 0x30
   18f80:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18f84:	ldrb	r1, [r0, #5]
   18f88:	cmp	r1, #51	; 0x33
   18f8c:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18f90:	ldrb	r1, [r0, #6]
   18f94:	cmp	r1, #48	; 0x30
   18f98:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18f9c:	ldrb	r0, [r0, #7]
   18fa0:	cmp	r0, #0
   18fa4:	movw	r0, #4441	; 0x1159
   18fa8:	movt	r0, #2
   18fac:	str	r0, [sp, #72]	; 0x48
   18fb0:	beq	18fd0 <__assert_fail@plt+0x79cc>
   18fb4:	movw	r1, #4429	; 0x114d
   18fb8:	movw	r0, #5564	; 0x15bc
   18fbc:	cmp	r4, #9
   18fc0:	movt	r1, #2
   18fc4:	movt	r0, #2
   18fc8:	moveq	r0, r1
   18fcc:	str	r0, [sp, #72]	; 0x48
   18fd0:	movw	r6, #5564	; 0x15bc
   18fd4:	mov	r0, #0
   18fd8:	mov	r2, #5
   18fdc:	movt	r6, #2
   18fe0:	mov	r1, r6
   18fe4:	bl	1137c <dcgettext@plt>
   18fe8:	cmp	r0, r6
   18fec:	str	r0, [sp, #76]	; 0x4c
   18ff0:	beq	1903c <__assert_fail@plt+0x7a38>
   18ff4:	ldr	ip, [fp, #-84]	; 0xffffffac
   18ff8:	mov	r9, #0
   18ffc:	tst	r8, #1
   19000:	bne	19144 <__assert_fail@plt+0x7b40>
   19004:	ldr	r0, [sp, #72]	; 0x48
   19008:	ldrb	r0, [r0]
   1900c:	cmp	r0, #0
   19010:	beq	19144 <__assert_fail@plt+0x7b40>
   19014:	ldr	r1, [sp, #72]	; 0x48
   19018:	mov	r9, #0
   1901c:	add	r1, r1, #1
   19020:	cmp	r9, r5
   19024:	strbcc	r0, [ip, r9]
   19028:	ldrb	r0, [r1, r9]
   1902c:	add	r9, r9, #1
   19030:	cmp	r0, #0
   19034:	bne	19020 <__assert_fail@plt+0x7a1c>
   19038:	b	19144 <__assert_fail@plt+0x7b40>
   1903c:	bl	1f5b4 <__assert_fail@plt+0xdfb0>
   19040:	ldrb	r1, [r0]
   19044:	and	r1, r1, #223	; 0xdf
   19048:	cmp	r1, #71	; 0x47
   1904c:	beq	190bc <__assert_fail@plt+0x7ab8>
   19050:	ldr	ip, [fp, #-84]	; 0xffffffac
   19054:	cmp	r1, #85	; 0x55
   19058:	bne	19118 <__assert_fail@plt+0x7b14>
   1905c:	ldrb	r1, [r0, #1]
   19060:	and	r1, r1, #223	; 0xdf
   19064:	cmp	r1, #84	; 0x54
   19068:	bne	19118 <__assert_fail@plt+0x7b14>
   1906c:	ldrb	r1, [r0, #2]
   19070:	and	r1, r1, #223	; 0xdf
   19074:	cmp	r1, #70	; 0x46
   19078:	bne	19118 <__assert_fail@plt+0x7b14>
   1907c:	ldrb	r1, [r0, #3]
   19080:	cmp	r1, #45	; 0x2d
   19084:	bne	19118 <__assert_fail@plt+0x7b14>
   19088:	ldrb	r1, [r0, #4]
   1908c:	cmp	r1, #56	; 0x38
   19090:	bne	19118 <__assert_fail@plt+0x7b14>
   19094:	ldrb	r0, [r0, #5]
   19098:	cmp	r0, #0
   1909c:	bne	19118 <__assert_fail@plt+0x7b14>
   190a0:	movw	r0, #4437	; 0x1155
   190a4:	movt	r0, #2
   190a8:	str	r0, [sp, #76]	; 0x4c
   190ac:	mov	r9, #0
   190b0:	tst	r8, #1
   190b4:	beq	19004 <__assert_fail@plt+0x7a00>
   190b8:	b	19144 <__assert_fail@plt+0x7b40>
   190bc:	ldrb	r1, [r0, #1]
   190c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   190c4:	and	r1, r1, #223	; 0xdf
   190c8:	cmp	r1, #66	; 0x42
   190cc:	bne	19118 <__assert_fail@plt+0x7b14>
   190d0:	ldrb	r1, [r0, #2]
   190d4:	cmp	r1, #49	; 0x31
   190d8:	bne	19118 <__assert_fail@plt+0x7b14>
   190dc:	ldrb	r1, [r0, #3]
   190e0:	cmp	r1, #56	; 0x38
   190e4:	bne	19118 <__assert_fail@plt+0x7b14>
   190e8:	ldrb	r1, [r0, #4]
   190ec:	cmp	r1, #48	; 0x30
   190f0:	bne	19118 <__assert_fail@plt+0x7b14>
   190f4:	ldrb	r1, [r0, #5]
   190f8:	cmp	r1, #51	; 0x33
   190fc:	bne	19118 <__assert_fail@plt+0x7b14>
   19100:	ldrb	r1, [r0, #6]
   19104:	cmp	r1, #48	; 0x30
   19108:	bne	19118 <__assert_fail@plt+0x7b14>
   1910c:	ldrb	r0, [r0, #7]
   19110:	cmp	r0, #0
   19114:	beq	19f2c <__assert_fail@plt+0x8928>
   19118:	movw	r0, #5564	; 0x15bc
   1911c:	cmp	r4, #9
   19120:	movt	r0, #2
   19124:	mov	r1, r0
   19128:	movw	r0, #4429	; 0x114d
   1912c:	movt	r0, #2
   19130:	moveq	r1, r0
   19134:	str	r1, [sp, #76]	; 0x4c
   19138:	mov	r9, #0
   1913c:	tst	r8, #1
   19140:	beq	19004 <__assert_fail@plt+0x7a00>
   19144:	ldr	r6, [sp, #76]	; 0x4c
   19148:	mov	r0, r6
   1914c:	bl	114b4 <strlen@plt>
   19150:	ldr	ip, [fp, #-84]	; 0xffffffac
   19154:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19158:	str	r0, [fp, #-72]	; 0xffffffb8
   1915c:	str	r6, [fp, #-88]	; 0xffffffa8
   19160:	mov	r2, #1
   19164:	mov	r3, r8
   19168:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1916c:	str	r4, [fp, #-64]	; 0xffffffc0
   19170:	mov	sl, #0
   19174:	str	r3, [fp, #-76]	; 0xffffffb4
   19178:	str	r2, [sp, #88]	; 0x58
   1917c:	cmp	r0, #0
   19180:	movwne	r0, #1
   19184:	and	r1, r0, r3
   19188:	and	r1, r2, r1
   1918c:	str	r1, [sp, #48]	; 0x30
   19190:	sub	r1, r4, #2
   19194:	clz	r1, r1
   19198:	lsr	r1, r1, #5
   1919c:	and	r1, r1, r3
   191a0:	str	r1, [sp, #44]	; 0x2c
   191a4:	subs	r1, r4, #2
   191a8:	eor	r4, r3, #1
   191ac:	movwne	r1, #1
   191b0:	str	r4, [sp, #92]	; 0x5c
   191b4:	orr	r4, r1, r4
   191b8:	and	r1, r1, r2
   191bc:	and	r0, r0, r1
   191c0:	str	r4, [sp, #64]	; 0x40
   191c4:	ldr	r4, [sp, #84]	; 0x54
   191c8:	str	r0, [fp, #-60]	; 0xffffffc4
   191cc:	orr	r0, r1, r3
   191d0:	ldr	r1, [fp, #16]
   191d4:	eor	r0, r0, #1
   191d8:	clz	r1, r1
   191dc:	lsr	r1, r1, #5
   191e0:	orr	r0, r1, r0
   191e4:	str	r0, [fp, #-68]	; 0xffffffbc
   191e8:	eor	r0, r2, #1
   191ec:	str	r0, [sp, #52]	; 0x34
   191f0:	cmn	r7, #1
   191f4:	beq	19204 <__assert_fail@plt+0x7c00>
   191f8:	cmp	sl, r7
   191fc:	bne	19210 <__assert_fail@plt+0x7c0c>
   19200:	b	19ea4 <__assert_fail@plt+0x88a0>
   19204:	ldrb	r0, [lr, sl]
   19208:	cmp	r0, #0
   1920c:	beq	19eac <__assert_fail@plt+0x88a8>
   19210:	ldr	r0, [fp, #-60]	; 0xffffffc4
   19214:	cmp	r0, #0
   19218:	beq	19278 <__assert_fail@plt+0x7c74>
   1921c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19220:	mov	r6, r5
   19224:	add	r5, sl, r0
   19228:	cmp	r0, #2
   1922c:	bcc	19298 <__assert_fail@plt+0x7c94>
   19230:	mov	r0, #0
   19234:	cmn	r7, #1
   19238:	str	r0, [fp, #-56]	; 0xffffffc8
   1923c:	bne	19254 <__assert_fail@plt+0x7c50>
   19240:	mov	r0, lr
   19244:	bl	114b4 <strlen@plt>
   19248:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1924c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19250:	mov	r7, r0
   19254:	cmp	r5, r7
   19258:	bls	192a8 <__assert_fail@plt+0x7ca4>
   1925c:	mov	r0, #0
   19260:	mov	r5, r6
   19264:	str	r0, [fp, #-48]	; 0xffffffd0
   19268:	ldrb	r6, [lr, sl]
   1926c:	cmp	r6, #126	; 0x7e
   19270:	bls	192f8 <__assert_fail@plt+0x7cf4>
   19274:	b	19854 <__assert_fail@plt+0x8250>
   19278:	mov	r0, #0
   1927c:	str	r0, [fp, #-56]	; 0xffffffc8
   19280:	mov	r0, #0
   19284:	str	r0, [fp, #-48]	; 0xffffffd0
   19288:	ldrb	r6, [lr, sl]
   1928c:	cmp	r6, #126	; 0x7e
   19290:	bls	192f8 <__assert_fail@plt+0x7cf4>
   19294:	b	19854 <__assert_fail@plt+0x8250>
   19298:	mov	r0, #0
   1929c:	str	r0, [fp, #-56]	; 0xffffffc8
   192a0:	cmp	r5, r7
   192a4:	bhi	1925c <__assert_fail@plt+0x7c58>
   192a8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   192ac:	ldr	r2, [fp, #-72]	; 0xffffffb8
   192b0:	add	r0, lr, sl
   192b4:	bl	114a8 <bcmp@plt>
   192b8:	ldr	r2, [sp, #92]	; 0x5c
   192bc:	cmp	r0, #0
   192c0:	mov	r1, r0
   192c4:	mov	r5, r6
   192c8:	movwne	r1, #1
   192cc:	orr	r1, r1, r2
   192d0:	tst	r1, #1
   192d4:	beq	19f6c <__assert_fail@plt+0x8968>
   192d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   192dc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   192e0:	clz	r0, r0
   192e4:	lsr	r0, r0, #5
   192e8:	str	r0, [fp, #-48]	; 0xffffffd0
   192ec:	ldrb	r6, [lr, sl]
   192f0:	cmp	r6, #126	; 0x7e
   192f4:	bhi	19854 <__assert_fail@plt+0x8250>
   192f8:	add	r3, pc, #16
   192fc:	mov	r8, #1
   19300:	mov	r2, #110	; 0x6e
   19304:	mov	r0, #97	; 0x61
   19308:	mov	r1, #0
   1930c:	ldr	pc, [r3, r6, lsl #2]
   19310:	andeq	r9, r1, ip, lsl #12
   19314:	andeq	r9, r1, r4, asr r8
   19318:	andeq	r9, r1, r4, asr r8
   1931c:	andeq	r9, r1, r4, asr r8
   19320:	andeq	r9, r1, r4, asr r8
   19324:	andeq	r9, r1, r4, asr r8
   19328:	andeq	r9, r1, r4, asr r8
   1932c:	andeq	r9, r1, r8, lsl #18
   19330:	andeq	r9, r1, ip, ror #11
   19334:	andeq	r9, r1, r4, ror #11
   19338:	strdeq	r9, [r1], -r8
   1933c:	andeq	r9, r1, r8, lsr #14
   19340:	ldrdeq	r9, [r1], -ip
   19344:	strdeq	r9, [r1], -r4
   19348:	andeq	r9, r1, r4, asr r8
   1934c:	andeq	r9, r1, r4, asr r8
   19350:	andeq	r9, r1, r4, asr r8
   19354:	andeq	r9, r1, r4, asr r8
   19358:	andeq	r9, r1, r4, asr r8
   1935c:	andeq	r9, r1, r4, asr r8
   19360:	andeq	r9, r1, r4, asr r8
   19364:	andeq	r9, r1, r4, asr r8
   19368:	andeq	r9, r1, r4, asr r8
   1936c:	andeq	r9, r1, r4, asr r8
   19370:	andeq	r9, r1, r4, asr r8
   19374:	andeq	r9, r1, r4, asr r8
   19378:	andeq	r9, r1, r4, asr r8
   1937c:	andeq	r9, r1, r4, asr r8
   19380:	andeq	r9, r1, r4, asr r8
   19384:	andeq	r9, r1, r4, asr r8
   19388:	andeq	r9, r1, r4, asr r8
   1938c:	andeq	r9, r1, r4, asr r8
   19390:	andeq	r9, r1, r0, lsl #11
   19394:	andeq	r9, r1, r4, lsl #11
   19398:	andeq	r9, r1, r4, lsl #11
   1939c:	andeq	r9, r1, r4, ror r5
   193a0:	andeq	r9, r1, r4, lsl #11
   193a4:	andeq	r9, r1, ip, lsl #10
   193a8:	andeq	r9, r1, r4, lsl #11
   193ac:	andeq	r9, r1, r0, lsr r7
   193b0:	andeq	r9, r1, r4, lsl #11
   193b4:	andeq	r9, r1, r4, lsl #11
   193b8:	andeq	r9, r1, r4, lsl #11
   193bc:	andeq	r9, r1, ip, lsl #10
   193c0:	andeq	r9, r1, ip, lsl #10
   193c4:	andeq	r9, r1, ip, lsl #10
   193c8:	andeq	r9, r1, ip, lsl #10
   193cc:	andeq	r9, r1, ip, lsl #10
   193d0:	andeq	r9, r1, ip, lsl #10
   193d4:	andeq	r9, r1, ip, lsl #10
   193d8:	andeq	r9, r1, ip, lsl #10
   193dc:	andeq	r9, r1, ip, lsl #10
   193e0:	andeq	r9, r1, ip, lsl #10
   193e4:	andeq	r9, r1, ip, lsl #10
   193e8:	andeq	r9, r1, ip, lsl #10
   193ec:	andeq	r9, r1, ip, lsl #10
   193f0:	andeq	r9, r1, ip, lsl #10
   193f4:	andeq	r9, r1, ip, lsl #10
   193f8:	andeq	r9, r1, ip, lsl #10
   193fc:	andeq	r9, r1, r4, lsl #11
   19400:	andeq	r9, r1, r4, lsl #11
   19404:	andeq	r9, r1, r4, lsl #11
   19408:	andeq	r9, r1, r4, lsl #11
   1940c:	strdeq	r9, [r1], -r4
   19410:	andeq	r9, r1, r4, asr r8
   19414:	andeq	r9, r1, ip, lsl #10
   19418:	andeq	r9, r1, ip, lsl #10
   1941c:	andeq	r9, r1, ip, lsl #10
   19420:	andeq	r9, r1, ip, lsl #10
   19424:	andeq	r9, r1, ip, lsl #10
   19428:	andeq	r9, r1, ip, lsl #10
   1942c:	andeq	r9, r1, ip, lsl #10
   19430:	andeq	r9, r1, ip, lsl #10
   19434:	andeq	r9, r1, ip, lsl #10
   19438:	andeq	r9, r1, ip, lsl #10
   1943c:	andeq	r9, r1, ip, lsl #10
   19440:	andeq	r9, r1, ip, lsl #10
   19444:	andeq	r9, r1, ip, lsl #10
   19448:	andeq	r9, r1, ip, lsl #10
   1944c:	andeq	r9, r1, ip, lsl #10
   19450:	andeq	r9, r1, ip, lsl #10
   19454:	andeq	r9, r1, ip, lsl #10
   19458:	andeq	r9, r1, ip, lsl #10
   1945c:	andeq	r9, r1, ip, lsl #10
   19460:	andeq	r9, r1, ip, lsl #10
   19464:	andeq	r9, r1, ip, lsl #10
   19468:	andeq	r9, r1, ip, lsl #10
   1946c:	andeq	r9, r1, ip, lsl #10
   19470:	andeq	r9, r1, ip, lsl #10
   19474:	andeq	r9, r1, ip, lsl #10
   19478:	andeq	r9, r1, ip, lsl #10
   1947c:	andeq	r9, r1, r4, lsl #11
   19480:			; <UNDEFINED> instruction: 0x000195b8
   19484:	andeq	r9, r1, ip, lsl #10
   19488:	andeq	r9, r1, r4, lsl #11
   1948c:	andeq	r9, r1, ip, lsl #10
   19490:	andeq	r9, r1, r4, lsl #11
   19494:	andeq	r9, r1, ip, lsl #10
   19498:	andeq	r9, r1, ip, lsl #10
   1949c:	andeq	r9, r1, ip, lsl #10
   194a0:	andeq	r9, r1, ip, lsl #10
   194a4:	andeq	r9, r1, ip, lsl #10
   194a8:	andeq	r9, r1, ip, lsl #10
   194ac:	andeq	r9, r1, ip, lsl #10
   194b0:	andeq	r9, r1, ip, lsl #10
   194b4:	andeq	r9, r1, ip, lsl #10
   194b8:	andeq	r9, r1, ip, lsl #10
   194bc:	andeq	r9, r1, ip, lsl #10
   194c0:	andeq	r9, r1, ip, lsl #10
   194c4:	andeq	r9, r1, ip, lsl #10
   194c8:	andeq	r9, r1, ip, lsl #10
   194cc:	andeq	r9, r1, ip, lsl #10
   194d0:	andeq	r9, r1, ip, lsl #10
   194d4:	andeq	r9, r1, ip, lsl #10
   194d8:	andeq	r9, r1, ip, lsl #10
   194dc:	andeq	r9, r1, ip, lsl #10
   194e0:	andeq	r9, r1, ip, lsl #10
   194e4:	andeq	r9, r1, ip, lsl #10
   194e8:	andeq	r9, r1, ip, lsl #10
   194ec:	andeq	r9, r1, ip, lsl #10
   194f0:	andeq	r9, r1, ip, lsl #10
   194f4:	andeq	r9, r1, ip, lsl #10
   194f8:	andeq	r9, r1, ip, lsl #10
   194fc:	andeq	r9, r1, ip, asr #10
   19500:	andeq	r9, r1, r4, lsl #11
   19504:	andeq	r9, r1, ip, asr #10
   19508:	andeq	r9, r1, r4, ror r5
   1950c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19510:	tst	r0, #1
   19514:	bne	197cc <__assert_fail@plt+0x81c8>
   19518:	ldr	r1, [fp, #16]
   1951c:	ubfx	r0, r6, #5, #3
   19520:	mov	r2, #1
   19524:	ldr	r0, [r1, r0, lsl #2]
   19528:	and	r1, r6, #31
   1952c:	tst	r0, r2, lsl r1
   19530:	beq	197cc <__assert_fail@plt+0x81c8>
   19534:	mov	r0, r6
   19538:	mov	r1, r8
   1953c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   19540:	tst	r2, #1
   19544:	beq	197ec <__assert_fail@plt+0x81e8>
   19548:	b	19f48 <__assert_fail@plt+0x8944>
   1954c:	cmp	r7, #1
   19550:	beq	19574 <__assert_fail@plt+0x7f70>
   19554:	mov	r8, #0
   19558:	cmn	r7, #1
   1955c:	bne	197b8 <__assert_fail@plt+0x81b4>
   19560:	ldrb	r0, [lr, #1]
   19564:	cmp	r0, #0
   19568:	beq	19574 <__assert_fail@plt+0x7f70>
   1956c:	mvn	r7, #0
   19570:	b	197b8 <__assert_fail@plt+0x81b4>
   19574:	mov	r8, #0
   19578:	cmp	sl, #0
   1957c:	bne	197b8 <__assert_fail@plt+0x81b4>
   19580:	mov	r1, #1
   19584:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19588:	cmp	r0, #2
   1958c:	bne	195a4 <__assert_fail@plt+0x7fa0>
   19590:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19594:	mov	r8, r1
   19598:	tst	r0, #1
   1959c:	beq	1950c <__assert_fail@plt+0x7f08>
   195a0:	b	19f48 <__assert_fail@plt+0x8944>
   195a4:	mov	r8, r1
   195a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   195ac:	tst	r0, #1
   195b0:	beq	19518 <__assert_fail@plt+0x7f14>
   195b4:	b	197cc <__assert_fail@plt+0x81c8>
   195b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   195bc:	cmp	r0, #2
   195c0:	bne	19880 <__assert_fail@plt+0x827c>
   195c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   195c8:	tst	r0, #1
   195cc:	bne	19f48 <__assert_fail@plt+0x8944>
   195d0:	mov	r0, #0
   195d4:	str	r0, [fp, #-56]	; 0xffffffc8
   195d8:	b	19898 <__assert_fail@plt+0x8294>
   195dc:	mov	r0, #102	; 0x66
   195e0:	b	19908 <__assert_fail@plt+0x8304>
   195e4:	mov	r2, #116	; 0x74
   195e8:	b	195f8 <__assert_fail@plt+0x7ff4>
   195ec:	mov	r0, #98	; 0x62
   195f0:	b	19908 <__assert_fail@plt+0x8304>
   195f4:	mov	r2, #114	; 0x72
   195f8:	ldr	r0, [sp, #64]	; 0x40
   195fc:	tst	r0, #1
   19600:	mov	r0, r2
   19604:	bne	19908 <__assert_fail@plt+0x8304>
   19608:	b	19f48 <__assert_fail@plt+0x8944>
   1960c:	ldr	r0, [sp, #88]	; 0x58
   19610:	tst	r0, #1
   19614:	beq	19928 <__assert_fail@plt+0x8324>
   19618:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1961c:	tst	r0, #1
   19620:	bne	1a084 <__assert_fail@plt+0x8a80>
   19624:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19628:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1962c:	subs	r0, r0, #2
   19630:	movwne	r0, #1
   19634:	orr	r0, r0, r1
   19638:	tst	r0, #1
   1963c:	bne	19678 <__assert_fail@plt+0x8074>
   19640:	cmp	r9, r5
   19644:	movcc	r0, #39	; 0x27
   19648:	strbcc	r0, [ip, r9]
   1964c:	add	r0, r9, #1
   19650:	cmp	r0, r5
   19654:	movcc	r1, #36	; 0x24
   19658:	strbcc	r1, [ip, r0]
   1965c:	add	r0, r9, #2
   19660:	add	r9, r9, #3
   19664:	cmp	r0, r5
   19668:	movcc	r1, #39	; 0x27
   1966c:	strbcc	r1, [ip, r0]
   19670:	mov	r0, #1
   19674:	str	r0, [fp, #-52]	; 0xffffffcc
   19678:	mov	r1, #1
   1967c:	cmp	r9, r5
   19680:	mov	r8, #0
   19684:	mov	r6, #48	; 0x30
   19688:	str	r1, [fp, #-56]	; 0xffffffc8
   1968c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19690:	movcc	r0, #92	; 0x5c
   19694:	strbcc	r0, [ip, r9]
   19698:	add	r0, r9, #1
   1969c:	cmp	r1, #2
   196a0:	beq	19af4 <__assert_fail@plt+0x84f0>
   196a4:	add	r1, sl, #1
   196a8:	cmp	r1, r7
   196ac:	bcs	19af4 <__assert_fail@plt+0x84f0>
   196b0:	ldrb	r1, [lr, r1]
   196b4:	sub	r1, r1, #48	; 0x30
   196b8:	uxtb	r1, r1
   196bc:	cmp	r1, #9
   196c0:	bhi	19af4 <__assert_fail@plt+0x84f0>
   196c4:	cmp	r0, r5
   196c8:	movcc	r1, #48	; 0x30
   196cc:	strbcc	r1, [ip, r0]
   196d0:	add	r0, r9, #2
   196d4:	add	r9, r9, #3
   196d8:	cmp	r0, r5
   196dc:	movcc	r1, #48	; 0x30
   196e0:	strbcc	r1, [ip, r0]
   196e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   196e8:	tst	r0, #1
   196ec:	beq	19518 <__assert_fail@plt+0x7f14>
   196f0:	b	197cc <__assert_fail@plt+0x81c8>
   196f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   196f8:	mov	r6, #63	; 0x3f
   196fc:	cmp	r0, #5
   19700:	beq	19b08 <__assert_fail@plt+0x8504>
   19704:	mov	r1, #0
   19708:	cmp	r0, #2
   1970c:	str	r1, [fp, #-56]	; 0xffffffc8
   19710:	bne	19bd0 <__assert_fail@plt+0x85cc>
   19714:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19718:	mov	r8, #0
   1971c:	tst	r0, #1
   19720:	beq	1950c <__assert_fail@plt+0x7f08>
   19724:	b	19f48 <__assert_fail@plt+0x8944>
   19728:	mov	r0, #118	; 0x76
   1972c:	b	19908 <__assert_fail@plt+0x8304>
   19730:	mov	r0, #1
   19734:	mov	r6, #39	; 0x27
   19738:	str	r0, [sp, #60]	; 0x3c
   1973c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19740:	cmp	r0, #2
   19744:	bne	19948 <__assert_fail@plt+0x8344>
   19748:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1974c:	tst	r0, #1
   19750:	bne	19f48 <__assert_fail@plt+0x8944>
   19754:	ldr	r2, [sp, #56]	; 0x38
   19758:	clz	r1, r5
   1975c:	mov	r8, #1
   19760:	lsr	r1, r1, #5
   19764:	cmp	r2, #0
   19768:	mov	r0, r2
   1976c:	movwne	r0, #1
   19770:	orrs	r0, r0, r1
   19774:	moveq	r2, r5
   19778:	moveq	r5, r0
   1977c:	cmp	r9, r5
   19780:	str	r2, [sp, #56]	; 0x38
   19784:	movcc	r0, #39	; 0x27
   19788:	strbcc	r0, [ip, r9]
   1978c:	add	r0, r9, #1
   19790:	cmp	r0, r5
   19794:	movcc	r1, #92	; 0x5c
   19798:	strbcc	r1, [ip, r0]
   1979c:	add	r0, r9, #2
   197a0:	add	r9, r9, #3
   197a4:	cmp	r0, r5
   197a8:	movcc	r1, #39	; 0x27
   197ac:	strbcc	r1, [ip, r0]
   197b0:	mov	r0, #0
   197b4:	str	r0, [fp, #-52]	; 0xffffffcc
   197b8:	mov	r0, #0
   197bc:	str	r0, [fp, #-56]	; 0xffffffc8
   197c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   197c4:	tst	r0, #1
   197c8:	beq	19518 <__assert_fail@plt+0x7f14>
   197cc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   197d0:	mov	r1, r8
   197d4:	cmp	r0, #0
   197d8:	mov	r0, r6
   197dc:	beq	198a0 <__assert_fail@plt+0x829c>
   197e0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   197e4:	tst	r2, #1
   197e8:	bne	19f48 <__assert_fail@plt+0x8944>
   197ec:	ldr	r2, [fp, #-64]	; 0xffffffc0
   197f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   197f4:	subs	r2, r2, #2
   197f8:	movwne	r2, #1
   197fc:	orr	r2, r2, r3
   19800:	tst	r2, #1
   19804:	bne	19840 <__assert_fail@plt+0x823c>
   19808:	cmp	r9, r5
   1980c:	movcc	r2, #39	; 0x27
   19810:	strbcc	r2, [ip, r9]
   19814:	add	r2, r9, #1
   19818:	cmp	r2, r5
   1981c:	movcc	r3, #36	; 0x24
   19820:	strbcc	r3, [ip, r2]
   19824:	add	r2, r9, #2
   19828:	add	r9, r9, #3
   1982c:	cmp	r2, r5
   19830:	movcc	r3, #39	; 0x27
   19834:	strbcc	r3, [ip, r2]
   19838:	mov	r2, #1
   1983c:	str	r2, [fp, #-52]	; 0xffffffcc
   19840:	cmp	r9, r5
   19844:	movcc	r2, #92	; 0x5c
   19848:	strbcc	r2, [ip, r9]
   1984c:	add	r9, r9, #1
   19850:	b	198e8 <__assert_fail@plt+0x82e4>
   19854:	ldr	r0, [sp, #40]	; 0x28
   19858:	cmp	r0, #1
   1985c:	bne	1995c <__assert_fail@plt+0x8358>
   19860:	bl	11490 <__ctype_b_loc@plt>
   19864:	ldr	r0, [r0]
   19868:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1986c:	mov	r1, #1
   19870:	add	r0, r0, r6, lsl #1
   19874:	ldrb	r0, [r0, #1]
   19878:	ubfx	r8, r0, #6, #1
   1987c:	b	19cb4 <__assert_fail@plt+0x86b0>
   19880:	ldr	r1, [sp, #48]	; 0x30
   19884:	mov	r0, #0
   19888:	str	r0, [fp, #-56]	; 0xffffffc8
   1988c:	mov	r0, #92	; 0x5c
   19890:	cmp	r1, #0
   19894:	beq	19908 <__assert_fail@plt+0x8304>
   19898:	mov	r6, #92	; 0x5c
   1989c:	mov	r8, #0
   198a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   198a4:	cmp	r0, #0
   198a8:	bne	198e0 <__assert_fail@plt+0x82dc>
   198ac:	ldr	r0, [fp, #-52]	; 0xffffffcc
   198b0:	tst	r0, #1
   198b4:	beq	198e0 <__assert_fail@plt+0x82dc>
   198b8:	cmp	r9, r5
   198bc:	movcc	r0, #39	; 0x27
   198c0:	strbcc	r0, [ip, r9]
   198c4:	add	r0, r9, #1
   198c8:	add	r9, r9, #2
   198cc:	cmp	r0, r5
   198d0:	movcc	r1, #39	; 0x27
   198d4:	strbcc	r1, [ip, r0]
   198d8:	mov	r0, #0
   198dc:	str	r0, [fp, #-52]	; 0xffffffcc
   198e0:	mov	r1, r8
   198e4:	mov	r0, r6
   198e8:	cmp	r9, r5
   198ec:	and	r4, r4, r1
   198f0:	strbcc	r0, [ip, r9]
   198f4:	add	r9, r9, #1
   198f8:	add	sl, sl, #1
   198fc:	cmn	r7, #1
   19900:	bne	191f8 <__assert_fail@plt+0x7bf4>
   19904:	b	19204 <__assert_fail@plt+0x7c00>
   19908:	mov	r1, #0
   1990c:	mov	r8, #0
   19910:	str	r1, [fp, #-56]	; 0xffffffc8
   19914:	ldr	r1, [sp, #88]	; 0x58
   19918:	tst	r1, #1
   1991c:	mov	r1, #0
   19920:	beq	1950c <__assert_fail@plt+0x7f08>
   19924:	b	197e0 <__assert_fail@plt+0x81dc>
   19928:	ldr	r0, [sp, #36]	; 0x24
   1992c:	mov	r6, #0
   19930:	mov	r8, #0
   19934:	cmp	r0, #0
   19938:	mov	r0, #0
   1993c:	str	r0, [fp, #-56]	; 0xffffffc8
   19940:	bne	198f8 <__assert_fail@plt+0x82f4>
   19944:	b	1950c <__assert_fail@plt+0x7f08>
   19948:	mov	r8, #1
   1994c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19950:	tst	r0, #1
   19954:	beq	19518 <__assert_fail@plt+0x7f14>
   19958:	b	197cc <__assert_fail@plt+0x81c8>
   1995c:	mov	r0, #0
   19960:	cmn	r7, #1
   19964:	str	r0, [fp, #-36]	; 0xffffffdc
   19968:	str	r0, [fp, #-40]	; 0xffffffd8
   1996c:	bne	19980 <__assert_fail@plt+0x837c>
   19970:	mov	r0, lr
   19974:	bl	114b4 <strlen@plt>
   19978:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1997c:	mov	r7, r0
   19980:	ldr	r0, [sp, #44]	; 0x2c
   19984:	str	r4, [sp, #84]	; 0x54
   19988:	str	r5, [sp, #28]
   1998c:	cmp	r0, #0
   19990:	beq	19be4 <__assert_fail@plt+0x85e0>
   19994:	ldr	r0, [sp, #80]	; 0x50
   19998:	mov	r8, #1
   1999c:	mov	r5, #0
   199a0:	add	r0, r0, sl
   199a4:	str	r0, [sp, #24]
   199a8:	sub	r0, fp, #40	; 0x28
   199ac:	mov	r3, r0
   199b0:	b	199ec <__assert_fail@plt+0x83e8>
   199b4:	ldr	r5, [sp, #68]	; 0x44
   199b8:	add	r5, r0, r5
   199bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   199c0:	bl	113b8 <iswprint@plt>
   199c4:	cmp	r0, #0
   199c8:	sub	r4, fp, #40	; 0x28
   199cc:	movwne	r0, #1
   199d0:	and	r8, r8, r0
   199d4:	mov	r0, r4
   199d8:	bl	11370 <mbsinit@plt>
   199dc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   199e0:	mov	r3, r4
   199e4:	cmp	r0, #0
   199e8:	bne	19ca8 <__assert_fail@plt+0x86a4>
   199ec:	str	r5, [sp, #68]	; 0x44
   199f0:	add	r5, r5, sl
   199f4:	sub	r0, fp, #44	; 0x2c
   199f8:	add	r1, lr, r5
   199fc:	sub	r2, r7, r5
   19a00:	bl	1f5ec <__assert_fail@plt+0xdfe8>
   19a04:	cmn	r0, #2
   19a08:	beq	19c68 <__assert_fail@plt+0x8664>
   19a0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19a10:	cmn	r0, #1
   19a14:	beq	19c5c <__assert_fail@plt+0x8658>
   19a18:	cmp	r0, #0
   19a1c:	beq	19c60 <__assert_fail@plt+0x865c>
   19a20:	cmp	r0, #2
   19a24:	bcc	199b4 <__assert_fail@plt+0x83b0>
   19a28:	ldr	r1, [sp, #68]	; 0x44
   19a2c:	ldr	r2, [sp, #24]
   19a30:	add	r1, r2, r1
   19a34:	sub	r2, r0, #1
   19a38:	ldrb	r3, [r1]
   19a3c:	sub	r3, r3, #91	; 0x5b
   19a40:	cmp	r3, #33	; 0x21
   19a44:	bls	19a64 <__assert_fail@plt+0x8460>
   19a48:	add	r1, r1, #1
   19a4c:	subs	r2, r2, #1
   19a50:	beq	199b4 <__assert_fail@plt+0x83b0>
   19a54:	ldrb	r3, [r1]
   19a58:	sub	r3, r3, #91	; 0x5b
   19a5c:	cmp	r3, #33	; 0x21
   19a60:	bhi	19a48 <__assert_fail@plt+0x8444>
   19a64:	add	r5, pc, #0
   19a68:	ldr	pc, [r5, r3, lsl #2]
   19a6c:	andeq	r9, r1, r0, lsl #31
   19a70:	andeq	r9, r1, r0, lsl #31
   19a74:	andeq	r9, r1, r8, asr #20
   19a78:	andeq	r9, r1, r0, lsl #31
   19a7c:	andeq	r9, r1, r8, asr #20
   19a80:	andeq	r9, r1, r0, lsl #31
   19a84:	andeq	r9, r1, r8, asr #20
   19a88:	andeq	r9, r1, r8, asr #20
   19a8c:	andeq	r9, r1, r8, asr #20
   19a90:	andeq	r9, r1, r8, asr #20
   19a94:	andeq	r9, r1, r8, asr #20
   19a98:	andeq	r9, r1, r8, asr #20
   19a9c:	andeq	r9, r1, r8, asr #20
   19aa0:	andeq	r9, r1, r8, asr #20
   19aa4:	andeq	r9, r1, r8, asr #20
   19aa8:	andeq	r9, r1, r8, asr #20
   19aac:	andeq	r9, r1, r8, asr #20
   19ab0:	andeq	r9, r1, r8, asr #20
   19ab4:	andeq	r9, r1, r8, asr #20
   19ab8:	andeq	r9, r1, r8, asr #20
   19abc:	andeq	r9, r1, r8, asr #20
   19ac0:	andeq	r9, r1, r8, asr #20
   19ac4:	andeq	r9, r1, r8, asr #20
   19ac8:	andeq	r9, r1, r8, asr #20
   19acc:	andeq	r9, r1, r8, asr #20
   19ad0:	andeq	r9, r1, r8, asr #20
   19ad4:	andeq	r9, r1, r8, asr #20
   19ad8:	andeq	r9, r1, r8, asr #20
   19adc:	andeq	r9, r1, r8, asr #20
   19ae0:	andeq	r9, r1, r8, asr #20
   19ae4:	andeq	r9, r1, r8, asr #20
   19ae8:	andeq	r9, r1, r8, asr #20
   19aec:	andeq	r9, r1, r8, asr #20
   19af0:	andeq	r9, r1, r0, lsl #31
   19af4:	mov	r9, r0
   19af8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19afc:	tst	r0, #1
   19b00:	beq	19518 <__assert_fail@plt+0x7f14>
   19b04:	b	197cc <__assert_fail@plt+0x81c8>
   19b08:	mov	r0, #0
   19b0c:	str	r0, [fp, #-56]	; 0xffffffc8
   19b10:	ldr	r0, [sp, #32]
   19b14:	cmp	r0, #0
   19b18:	beq	19bd0 <__assert_fail@plt+0x85cc>
   19b1c:	add	r0, sl, #2
   19b20:	mov	r1, r7
   19b24:	cmp	r0, r7
   19b28:	bcs	19bd0 <__assert_fail@plt+0x85cc>
   19b2c:	add	r1, sl, lr
   19b30:	ldrb	r1, [r1, #1]
   19b34:	cmp	r1, #63	; 0x3f
   19b38:	bne	19bd0 <__assert_fail@plt+0x85cc>
   19b3c:	ldrb	r8, [lr, r0]
   19b40:	sub	r2, r8, #33	; 0x21
   19b44:	cmp	r2, #29
   19b48:	bhi	19bd0 <__assert_fail@plt+0x85cc>
   19b4c:	mov	r1, r4
   19b50:	movw	r4, #20929	; 0x51c1
   19b54:	mov	r3, #1
   19b58:	movt	r4, #14336	; 0x3800
   19b5c:	tst	r4, r3, lsl r2
   19b60:	beq	19e8c <__assert_fail@plt+0x8888>
   19b64:	ldr	r2, [fp, #-76]	; 0xffffffb4
   19b68:	tst	r2, #1
   19b6c:	bne	19f48 <__assert_fail@plt+0x8944>
   19b70:	cmp	r9, r5
   19b74:	mov	r6, r8
   19b78:	mov	r4, r1
   19b7c:	mov	sl, r0
   19b80:	mov	r8, #0
   19b84:	movcc	r2, #63	; 0x3f
   19b88:	strbcc	r2, [ip, r9]
   19b8c:	add	r2, r9, #1
   19b90:	cmp	r2, r5
   19b94:	movcc	r3, #34	; 0x22
   19b98:	strbcc	r3, [ip, r2]
   19b9c:	add	r2, r9, #2
   19ba0:	cmp	r2, r5
   19ba4:	movcc	r3, #34	; 0x22
   19ba8:	strbcc	r3, [ip, r2]
   19bac:	add	r2, r9, #3
   19bb0:	add	r9, r9, #4
   19bb4:	cmp	r2, r5
   19bb8:	movcc	r3, #63	; 0x3f
   19bbc:	strbcc	r3, [ip, r2]
   19bc0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19bc4:	tst	r0, #1
   19bc8:	beq	19518 <__assert_fail@plt+0x7f14>
   19bcc:	b	197cc <__assert_fail@plt+0x81c8>
   19bd0:	mov	r8, #0
   19bd4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19bd8:	tst	r0, #1
   19bdc:	beq	19518 <__assert_fail@plt+0x7f14>
   19be0:	b	197cc <__assert_fail@plt+0x81c8>
   19be4:	mov	r8, #1
   19be8:	mov	r5, #0
   19bec:	sub	r4, fp, #40	; 0x28
   19bf0:	str	r5, [sp, #68]	; 0x44
   19bf4:	add	r5, r5, sl
   19bf8:	sub	r0, fp, #44	; 0x2c
   19bfc:	mov	r3, r4
   19c00:	add	r1, lr, r5
   19c04:	sub	r2, r7, r5
   19c08:	bl	1f5ec <__assert_fail@plt+0xdfe8>
   19c0c:	cmn	r0, #2
   19c10:	beq	19c68 <__assert_fail@plt+0x8664>
   19c14:	cmn	r0, #1
   19c18:	beq	19c5c <__assert_fail@plt+0x8658>
   19c1c:	ldr	r5, [sp, #68]	; 0x44
   19c20:	cmp	r0, #0
   19c24:	beq	19ca4 <__assert_fail@plt+0x86a0>
   19c28:	add	r5, r0, r5
   19c2c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19c30:	bl	113b8 <iswprint@plt>
   19c34:	cmp	r0, #0
   19c38:	sub	r4, fp, #40	; 0x28
   19c3c:	movwne	r0, #1
   19c40:	and	r8, r8, r0
   19c44:	mov	r0, r4
   19c48:	bl	11370 <mbsinit@plt>
   19c4c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19c50:	cmp	r0, #0
   19c54:	beq	19bf0 <__assert_fail@plt+0x85ec>
   19c58:	b	19ca8 <__assert_fail@plt+0x86a4>
   19c5c:	mov	r8, #0
   19c60:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19c64:	b	19c9c <__assert_fail@plt+0x8698>
   19c68:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19c6c:	mov	r8, #0
   19c70:	cmp	r5, r7
   19c74:	bcs	19c9c <__assert_fail@plt+0x8698>
   19c78:	ldrb	r0, [lr, r5]
   19c7c:	cmp	r0, #0
   19c80:	beq	19c9c <__assert_fail@plt+0x8698>
   19c84:	ldr	r0, [sp, #68]	; 0x44
   19c88:	add	r0, r0, #1
   19c8c:	add	r5, r0, sl
   19c90:	str	r0, [sp, #68]	; 0x44
   19c94:	cmp	r5, r7
   19c98:	bcc	19c78 <__assert_fail@plt+0x8674>
   19c9c:	ldr	r5, [sp, #68]	; 0x44
   19ca0:	b	19ca8 <__assert_fail@plt+0x86a4>
   19ca4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19ca8:	mov	r1, r5
   19cac:	ldr	r5, [sp, #28]
   19cb0:	ldr	r4, [sp, #84]	; 0x54
   19cb4:	ldr	r0, [sp, #52]	; 0x34
   19cb8:	ldr	ip, [fp, #-84]	; 0xffffffac
   19cbc:	cmp	r1, #1
   19cc0:	orr	r2, r8, r0
   19cc4:	mov	r0, r1
   19cc8:	bhi	19cd4 <__assert_fail@plt+0x86d0>
   19ccc:	tst	r2, #1
   19cd0:	bne	1950c <__assert_fail@plt+0x7f08>
   19cd4:	add	r0, r0, sl
   19cd8:	str	r2, [sp, #84]	; 0x54
   19cdc:	str	r0, [fp, #-56]	; 0xffffffc8
   19ce0:	mov	r0, #0
   19ce4:	tst	r2, #1
   19ce8:	bne	19dc8 <__assert_fail@plt+0x87c4>
   19cec:	ldr	r1, [fp, #-76]	; 0xffffffb4
   19cf0:	tst	r1, #1
   19cf4:	bne	19f48 <__assert_fail@plt+0x8944>
   19cf8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19cfc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   19d00:	subs	r2, r1, #2
   19d04:	movwne	r2, #1
   19d08:	orr	r2, r2, r0
   19d0c:	tst	r2, #1
   19d10:	bne	19d4c <__assert_fail@plt+0x8748>
   19d14:	cmp	r9, r5
   19d18:	add	r2, r9, #1
   19d1c:	mov	r0, #1
   19d20:	movcc	r1, #39	; 0x27
   19d24:	str	r0, [fp, #-52]	; 0xffffffcc
   19d28:	strbcc	r1, [ip, r9]
   19d2c:	cmp	r2, r5
   19d30:	movcc	r1, #36	; 0x24
   19d34:	strbcc	r1, [ip, r2]
   19d38:	add	r2, r9, #2
   19d3c:	add	r9, r9, #3
   19d40:	cmp	r2, r5
   19d44:	movcc	r1, #39	; 0x27
   19d48:	strbcc	r1, [ip, r2]
   19d4c:	cmp	r9, r5
   19d50:	add	r2, r9, #1
   19d54:	movcc	r1, #92	; 0x5c
   19d58:	strbcc	r1, [ip, r9]
   19d5c:	cmp	r2, r5
   19d60:	bcs	19d74 <__assert_fail@plt+0x8770>
   19d64:	uxtb	r3, r6
   19d68:	mov	r1, #48	; 0x30
   19d6c:	orr	r3, r1, r3, lsr #6
   19d70:	strb	r3, [ip, r2]
   19d74:	add	r2, r9, #2
   19d78:	add	r9, r9, #3
   19d7c:	cmp	r2, r5
   19d80:	lsrcc	r3, r6, #3
   19d84:	movcc	r1, #6
   19d88:	bficc	r3, r1, #3, #29
   19d8c:	mov	r1, #6
   19d90:	bfi	r6, r1, #3, #29
   19d94:	strbcc	r3, [ip, r2]
   19d98:	mov	r2, #1
   19d9c:	b	19dfc <__assert_fail@plt+0x87f8>
   19da0:	ldr	r1, [sp, #80]	; 0x50
   19da4:	cmp	r9, r2
   19da8:	mov	r5, r2
   19dac:	ldr	r2, [sp, #84]	; 0x54
   19db0:	strbcc	r6, [ip, r9]
   19db4:	add	r9, r9, #1
   19db8:	ldrb	r6, [r1, sl]
   19dbc:	mov	sl, r3
   19dc0:	tst	r2, #1
   19dc4:	beq	19cec <__assert_fail@plt+0x86e8>
   19dc8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   19dcc:	tst	r1, #1
   19dd0:	beq	19df0 <__assert_fail@plt+0x87ec>
   19dd4:	cmp	r9, r5
   19dd8:	mov	r2, r0
   19ddc:	movcc	r1, #92	; 0x5c
   19de0:	strbcc	r1, [ip, r9]
   19de4:	add	r9, r9, #1
   19de8:	mov	r1, #0
   19dec:	b	19df8 <__assert_fail@plt+0x87f4>
   19df0:	mov	r1, #0
   19df4:	mov	r2, r0
   19df8:	str	r1, [fp, #-48]	; 0xffffffd0
   19dfc:	mov	r0, r2
   19e00:	and	r1, r2, #1
   19e04:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19e08:	add	r3, sl, #1
   19e0c:	cmp	r2, r3
   19e10:	bls	19e70 <__assert_fail@plt+0x886c>
   19e14:	mov	r2, r5
   19e18:	ldr	r5, [fp, #-52]	; 0xffffffcc
   19e1c:	cmp	r1, #0
   19e20:	movwne	r1, #1
   19e24:	mvn	r5, r5
   19e28:	orr	r5, r5, r1
   19e2c:	tst	r5, #1
   19e30:	bne	19da0 <__assert_fail@plt+0x879c>
   19e34:	cmp	r9, r2
   19e38:	movcc	r5, r4
   19e3c:	movcc	r4, #39	; 0x27
   19e40:	strbcc	r4, [ip, r9]
   19e44:	movcc	r4, r5
   19e48:	add	r5, r9, #1
   19e4c:	add	r9, r9, #2
   19e50:	cmp	r5, r2
   19e54:	movcc	r1, r4
   19e58:	movcc	r4, #39	; 0x27
   19e5c:	strbcc	r4, [ip, r5]
   19e60:	movcc	r4, r1
   19e64:	mov	r1, #0
   19e68:	str	r1, [fp, #-52]	; 0xffffffcc
   19e6c:	b	19da0 <__assert_fail@plt+0x879c>
   19e70:	cmp	r1, #0
   19e74:	movwne	r1, #1
   19e78:	str	r1, [fp, #-56]	; 0xffffffc8
   19e7c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   19e80:	cmp	r0, #0
   19e84:	beq	198ac <__assert_fail@plt+0x82a8>
   19e88:	b	198e0 <__assert_fail@plt+0x82dc>
   19e8c:	mov	r8, #0
   19e90:	mov	r4, r1
   19e94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19e98:	tst	r0, #1
   19e9c:	beq	19518 <__assert_fail@plt+0x7f14>
   19ea0:	b	197cc <__assert_fail@plt+0x81c8>
   19ea4:	mov	r7, sl
   19ea8:	b	19eb0 <__assert_fail@plt+0x88ac>
   19eac:	mvn	r7, #0
   19eb0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19eb4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   19eb8:	ldr	r2, [sp, #88]	; 0x58
   19ebc:	eor	r0, r1, #2
   19ec0:	orr	r0, r0, r9
   19ec4:	clz	r0, r0
   19ec8:	lsr	r0, r0, #5
   19ecc:	tst	r3, r0
   19ed0:	bne	19f48 <__assert_fail@plt+0x8944>
   19ed4:	subs	r0, r1, #2
   19ed8:	movwne	r0, #1
   19edc:	orr	r0, r3, r0
   19ee0:	tst	r0, #1
   19ee4:	ldreq	r0, [sp, #60]	; 0x3c
   19ee8:	eoreq	r0, r0, #1
   19eec:	tsteq	r0, #1
   19ef0:	bne	1a024 <__assert_fail@plt+0x8a20>
   19ef4:	tst	r4, #1
   19ef8:	bne	19fe8 <__assert_fail@plt+0x89e4>
   19efc:	ldr	r6, [sp, #56]	; 0x38
   19f00:	mov	r8, #0
   19f04:	cmp	r6, #0
   19f08:	beq	1a020 <__assert_fail@plt+0x8a1c>
   19f0c:	mov	r1, #0
   19f10:	mov	r4, #2
   19f14:	cmp	r5, #0
   19f18:	mov	r0, r2
   19f1c:	mov	r3, #0
   19f20:	str	r1, [sp, #84]	; 0x54
   19f24:	beq	18d6c <__assert_fail@plt+0x7768>
   19f28:	b	1a024 <__assert_fail@plt+0x8a20>
   19f2c:	movw	r0, #4445	; 0x115d
   19f30:	movt	r0, #2
   19f34:	str	r0, [sp, #76]	; 0x4c
   19f38:	mov	r9, #0
   19f3c:	tst	r8, #1
   19f40:	beq	19004 <__assert_fail@plt+0x7a00>
   19f44:	b	19144 <__assert_fail@plt+0x7b40>
   19f48:	ldr	r1, [sp, #88]	; 0x58
   19f4c:	mov	r0, #2
   19f50:	tst	r1, #1
   19f54:	movwne	r0, #4
   19f58:	ldr	r2, [fp, #-64]	; 0xffffffc0
   19f5c:	ldr	r1, [fp, #12]
   19f60:	cmp	r2, #2
   19f64:	moveq	r2, r0
   19f68:	b	19fa0 <__assert_fail@plt+0x899c>
   19f6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19f70:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19f74:	ldr	r1, [fp, #12]
   19f78:	ldr	r2, [fp, #-64]	; 0xffffffc0
   19f7c:	b	19fa0 <__assert_fail@plt+0x899c>
   19f80:	ldr	r1, [sp, #88]	; 0x58
   19f84:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19f88:	ldr	r5, [sp, #28]
   19f8c:	mov	r0, #2
   19f90:	tst	r1, #1
   19f94:	ldr	r1, [fp, #12]
   19f98:	movwne	r0, #4
   19f9c:	mov	r2, r0
   19fa0:	mov	r0, #0
   19fa4:	bic	r1, r1, #2
   19fa8:	str	r2, [sp]
   19fac:	mov	r2, lr
   19fb0:	str	r0, [sp, #8]
   19fb4:	ldr	r0, [sp, #72]	; 0x48
   19fb8:	str	r1, [sp, #4]
   19fbc:	mov	r1, r5
   19fc0:	str	r0, [sp, #12]
   19fc4:	ldr	r0, [sp, #76]	; 0x4c
   19fc8:	str	r0, [sp, #16]
   19fcc:	mov	r0, ip
   19fd0:	mov	r3, r7
   19fd4:	bl	18ce0 <__assert_fail@plt+0x76dc>
   19fd8:	mov	r9, r0
   19fdc:	mov	r0, r9
   19fe0:	sub	sp, fp, #28
   19fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fe8:	mov	r0, #5
   19fec:	ldr	r1, [sp, #56]	; 0x38
   19ff0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   19ff4:	str	r0, [sp]
   19ff8:	ldr	r0, [fp, #12]
   19ffc:	str	r0, [sp, #4]
   1a000:	ldr	r0, [fp, #16]
   1a004:	str	r0, [sp, #8]
   1a008:	ldr	r0, [sp, #72]	; 0x48
   1a00c:	str	r0, [sp, #12]
   1a010:	ldr	r0, [sp, #76]	; 0x4c
   1a014:	str	r0, [sp, #16]
   1a018:	ldr	r0, [fp, #-84]	; 0xffffffac
   1a01c:	b	19fd0 <__assert_fail@plt+0x89cc>
   1a020:	mov	r3, #0
   1a024:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1a028:	cmp	r1, #0
   1a02c:	beq	1a068 <__assert_fail@plt+0x8a64>
   1a030:	ldr	r2, [fp, #-84]	; 0xffffffac
   1a034:	tst	r3, #1
   1a038:	bne	1a06c <__assert_fail@plt+0x8a68>
   1a03c:	ldrb	r0, [r1]
   1a040:	cmp	r0, #0
   1a044:	beq	1a06c <__assert_fail@plt+0x8a68>
   1a048:	add	r1, r1, #1
   1a04c:	cmp	r9, r5
   1a050:	strbcc	r0, [r2, r9]
   1a054:	add	r9, r9, #1
   1a058:	ldrb	r0, [r1], #1
   1a05c:	cmp	r0, #0
   1a060:	bne	1a04c <__assert_fail@plt+0x8a48>
   1a064:	b	1a06c <__assert_fail@plt+0x8a68>
   1a068:	ldr	r2, [fp, #-84]	; 0xffffffac
   1a06c:	cmp	r9, r5
   1a070:	movcc	r0, #0
   1a074:	strbcc	r0, [r2, r9]
   1a078:	mov	r0, r9
   1a07c:	sub	sp, fp, #28
   1a080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a084:	mov	r0, #4
   1a088:	b	19f58 <__assert_fail@plt+0x8954>
   1a08c:	bl	115ec <abort@plt>
   1a090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a094:	add	fp, sp, #28
   1a098:	sub	sp, sp, #28
   1a09c:	movw	r5, #8848	; 0x2290
   1a0a0:	cmp	r2, #0
   1a0a4:	mov	r4, r1
   1a0a8:	mov	r7, r0
   1a0ac:	str	r0, [sp, #20]
   1a0b0:	movt	r5, #3
   1a0b4:	movne	r5, r2
   1a0b8:	bl	114e4 <__errno_location@plt>
   1a0bc:	mov	sl, r0
   1a0c0:	ldr	r2, [r5, #40]	; 0x28
   1a0c4:	ldr	r3, [r5, #44]	; 0x2c
   1a0c8:	ldm	r5, {r0, r1}
   1a0cc:	orr	r8, r1, #1
   1a0d0:	add	r9, r5, #8
   1a0d4:	mov	r1, #0
   1a0d8:	ldr	r6, [sl]
   1a0dc:	stm	sp, {r0, r8, r9}
   1a0e0:	mov	r0, #0
   1a0e4:	str	r2, [sp, #12]
   1a0e8:	str	r3, [sp, #16]
   1a0ec:	mov	r2, r7
   1a0f0:	mov	r3, r4
   1a0f4:	str	r6, [sp, #24]
   1a0f8:	mov	r6, r4
   1a0fc:	bl	18ce0 <__assert_fail@plt+0x76dc>
   1a100:	add	r7, r0, #1
   1a104:	mov	r0, r7
   1a108:	bl	1b9b4 <__assert_fail@plt+0xa3b0>
   1a10c:	mov	r4, r0
   1a110:	ldr	r0, [r5]
   1a114:	ldr	r2, [r5, #44]	; 0x2c
   1a118:	ldr	r1, [r5, #40]	; 0x28
   1a11c:	mov	r3, r6
   1a120:	stm	sp, {r0, r8, r9}
   1a124:	str	r2, [sp, #16]
   1a128:	ldr	r2, [sp, #20]
   1a12c:	str	r1, [sp, #12]
   1a130:	mov	r0, r4
   1a134:	mov	r1, r7
   1a138:	bl	18ce0 <__assert_fail@plt+0x76dc>
   1a13c:	ldr	r0, [sp, #24]
   1a140:	str	r0, [sl]
   1a144:	mov	r0, r4
   1a148:	sub	sp, fp, #28
   1a14c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a154:	add	fp, sp, #28
   1a158:	sub	sp, sp, #36	; 0x24
   1a15c:	movw	r8, #8848	; 0x2290
   1a160:	cmp	r3, #0
   1a164:	mov	r4, r2
   1a168:	str	r2, [sp, #24]
   1a16c:	mov	r5, r1
   1a170:	mov	r6, r0
   1a174:	str	r0, [sp, #20]
   1a178:	movt	r8, #3
   1a17c:	movne	r8, r3
   1a180:	bl	114e4 <__errno_location@plt>
   1a184:	str	r0, [sp, #28]
   1a188:	ldr	r1, [r8, #40]	; 0x28
   1a18c:	ldr	r2, [r8, #44]	; 0x2c
   1a190:	ldr	r7, [r0]
   1a194:	cmp	r4, #0
   1a198:	add	sl, r8, #8
   1a19c:	mov	r0, #0
   1a1a0:	ldm	r8, {r3, r9}
   1a1a4:	orreq	r9, r9, #1
   1a1a8:	stm	sp, {r3, r9, sl}
   1a1ac:	str	r1, [sp, #12]
   1a1b0:	str	r2, [sp, #16]
   1a1b4:	mov	r1, #0
   1a1b8:	mov	r2, r6
   1a1bc:	mov	r3, r5
   1a1c0:	str	r7, [sp, #32]
   1a1c4:	mov	r7, r5
   1a1c8:	bl	18ce0 <__assert_fail@plt+0x76dc>
   1a1cc:	add	r4, r0, #1
   1a1d0:	mov	r5, r0
   1a1d4:	mov	r0, r4
   1a1d8:	bl	1b9b4 <__assert_fail@plt+0xa3b0>
   1a1dc:	mov	r6, r0
   1a1e0:	ldr	r0, [r8]
   1a1e4:	ldr	r2, [r8, #44]	; 0x2c
   1a1e8:	ldr	r1, [r8, #40]	; 0x28
   1a1ec:	mov	r3, r7
   1a1f0:	stm	sp, {r0, r9, sl}
   1a1f4:	str	r2, [sp, #16]
   1a1f8:	ldr	r2, [sp, #20]
   1a1fc:	str	r1, [sp, #12]
   1a200:	mov	r0, r6
   1a204:	mov	r1, r4
   1a208:	bl	18ce0 <__assert_fail@plt+0x76dc>
   1a20c:	ldr	r0, [sp, #24]
   1a210:	ldr	r1, [sp, #32]
   1a214:	ldr	r2, [sp, #28]
   1a218:	cmp	r0, #0
   1a21c:	str	r1, [r2]
   1a220:	strne	r5, [r0]
   1a224:	mov	r0, r6
   1a228:	sub	sp, fp, #28
   1a22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a230:	push	{r4, r5, r6, r7, fp, lr}
   1a234:	add	fp, sp, #16
   1a238:	movw	r4, #8608	; 0x21a0
   1a23c:	movt	r4, #3
   1a240:	ldrd	r6, [r4]
   1a244:	cmp	r7, #2
   1a248:	blt	1a274 <__assert_fail@plt+0x8c70>
   1a24c:	add	r5, r6, #12
   1a250:	mov	r7, #0
   1a254:	ldr	r0, [r5, r7, lsl #3]
   1a258:	bl	16600 <__assert_fail@plt+0x4ffc>
   1a25c:	ldr	r1, [r4, #4]
   1a260:	add	r2, r7, #2
   1a264:	add	r0, r7, #1
   1a268:	mov	r7, r0
   1a26c:	cmp	r2, r1
   1a270:	blt	1a254 <__assert_fail@plt+0x8c50>
   1a274:	ldr	r0, [r6, #4]
   1a278:	movw	r5, #8896	; 0x22c0
   1a27c:	movt	r5, #3
   1a280:	cmp	r0, r5
   1a284:	beq	1a298 <__assert_fail@plt+0x8c94>
   1a288:	bl	16600 <__assert_fail@plt+0x4ffc>
   1a28c:	mov	r0, #256	; 0x100
   1a290:	str	r0, [r4, #8]
   1a294:	str	r5, [r4, #12]
   1a298:	add	r5, r4, #8
   1a29c:	cmp	r6, r5
   1a2a0:	beq	1a2b0 <__assert_fail@plt+0x8cac>
   1a2a4:	mov	r0, r6
   1a2a8:	bl	16600 <__assert_fail@plt+0x4ffc>
   1a2ac:	str	r5, [r4]
   1a2b0:	mov	r0, #1
   1a2b4:	str	r0, [r4, #4]
   1a2b8:	pop	{r4, r5, r6, r7, fp, pc}
   1a2bc:	movw	r3, #8848	; 0x2290
   1a2c0:	mvn	r2, #0
   1a2c4:	movt	r3, #3
   1a2c8:	b	1a2cc <__assert_fail@plt+0x8cc8>
   1a2cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2d0:	add	fp, sp, #28
   1a2d4:	sub	sp, sp, #44	; 0x2c
   1a2d8:	mov	r7, r3
   1a2dc:	str	r2, [sp, #36]	; 0x24
   1a2e0:	str	r1, [sp, #32]
   1a2e4:	mov	r5, r0
   1a2e8:	bl	114e4 <__errno_location@plt>
   1a2ec:	cmp	r5, #0
   1a2f0:	bmi	1a458 <__assert_fail@plt+0x8e54>
   1a2f4:	cmn	r5, #-2147483647	; 0x80000001
   1a2f8:	beq	1a458 <__assert_fail@plt+0x8e54>
   1a2fc:	movw	r8, #8608	; 0x21a0
   1a300:	mov	r4, r0
   1a304:	ldr	r0, [r0]
   1a308:	movt	r8, #3
   1a30c:	str	r4, [sp, #28]
   1a310:	ldr	r1, [r8, #4]
   1a314:	ldr	r6, [r8]
   1a318:	str	r0, [sp, #24]
   1a31c:	cmp	r1, r5
   1a320:	ble	1a32c <__assert_fail@plt+0x8d28>
   1a324:	mov	sl, r6
   1a328:	b	1a394 <__assert_fail@plt+0x8d90>
   1a32c:	mov	r0, #8
   1a330:	add	r9, r8, #8
   1a334:	str	r1, [fp, #-32]	; 0xffffffe0
   1a338:	sub	r1, r5, r1
   1a33c:	mvn	r3, #-2147483648	; 0x80000000
   1a340:	str	r0, [sp]
   1a344:	subs	r0, r6, r9
   1a348:	add	r2, r1, #1
   1a34c:	sub	r1, fp, #32
   1a350:	movne	r0, r6
   1a354:	bl	1bbb4 <__assert_fail@plt+0xa5b0>
   1a358:	mov	sl, r0
   1a35c:	cmp	r6, r9
   1a360:	str	r0, [r8]
   1a364:	bne	1a370 <__assert_fail@plt+0x8d6c>
   1a368:	ldrd	r0, [r8, #8]
   1a36c:	stm	sl, {r0, r1}
   1a370:	ldr	r1, [r8, #4]
   1a374:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a378:	add	r0, sl, r1, lsl #3
   1a37c:	sub	r1, r2, r1
   1a380:	lsl	r2, r1, #3
   1a384:	mov	r1, #0
   1a388:	bl	11508 <memset@plt>
   1a38c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a390:	str	r0, [r8, #4]
   1a394:	mov	r9, sl
   1a398:	ldm	r7, {r0, r1}
   1a39c:	orr	r8, r1, #1
   1a3a0:	add	r1, r7, #8
   1a3a4:	ldr	r2, [r7, #40]	; 0x28
   1a3a8:	ldr	r3, [r7, #44]	; 0x2c
   1a3ac:	ldr	r6, [r9, r5, lsl #3]!
   1a3b0:	str	r1, [sp, #20]
   1a3b4:	ldr	r4, [r9, #4]!
   1a3b8:	stm	sp, {r0, r8}
   1a3bc:	add	r0, sp, #8
   1a3c0:	stm	r0, {r1, r2, r3}
   1a3c4:	ldr	r2, [sp, #32]
   1a3c8:	ldr	r3, [sp, #36]	; 0x24
   1a3cc:	mov	r1, r6
   1a3d0:	mov	r0, r4
   1a3d4:	bl	18ce0 <__assert_fail@plt+0x76dc>
   1a3d8:	cmp	r6, r0
   1a3dc:	bhi	1a440 <__assert_fail@plt+0x8e3c>
   1a3e0:	add	r6, r0, #1
   1a3e4:	movw	r0, #8896	; 0x22c0
   1a3e8:	movt	r0, #3
   1a3ec:	str	r6, [sl, r5, lsl #3]
   1a3f0:	cmp	r4, r0
   1a3f4:	beq	1a400 <__assert_fail@plt+0x8dfc>
   1a3f8:	mov	r0, r4
   1a3fc:	bl	16600 <__assert_fail@plt+0x4ffc>
   1a400:	mov	r0, r6
   1a404:	bl	1b9b4 <__assert_fail@plt+0xa3b0>
   1a408:	str	r0, [r9]
   1a40c:	mov	r4, r0
   1a410:	add	r3, sp, #8
   1a414:	ldr	r0, [r7]
   1a418:	ldr	r1, [r7, #40]	; 0x28
   1a41c:	ldr	r2, [r7, #44]	; 0x2c
   1a420:	stm	sp, {r0, r8}
   1a424:	ldr	r0, [sp, #20]
   1a428:	stm	r3, {r0, r1, r2}
   1a42c:	ldr	r2, [sp, #32]
   1a430:	ldr	r3, [sp, #36]	; 0x24
   1a434:	mov	r0, r4
   1a438:	mov	r1, r6
   1a43c:	bl	18ce0 <__assert_fail@plt+0x76dc>
   1a440:	ldr	r1, [sp, #24]
   1a444:	ldr	r0, [sp, #28]
   1a448:	str	r1, [r0]
   1a44c:	mov	r0, r4
   1a450:	sub	sp, fp, #28
   1a454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a458:	bl	115ec <abort@plt>
   1a45c:	movw	r3, #8848	; 0x2290
   1a460:	movt	r3, #3
   1a464:	b	1a2cc <__assert_fail@plt+0x8cc8>
   1a468:	movw	r3, #8848	; 0x2290
   1a46c:	mov	r1, r0
   1a470:	mov	r0, #0
   1a474:	mvn	r2, #0
   1a478:	movt	r3, #3
   1a47c:	b	1a2cc <__assert_fail@plt+0x8cc8>
   1a480:	movw	r3, #8848	; 0x2290
   1a484:	mov	r2, r1
   1a488:	mov	r1, r0
   1a48c:	mov	r0, #0
   1a490:	movt	r3, #3
   1a494:	b	1a2cc <__assert_fail@plt+0x8cc8>
   1a498:	push	{fp, lr}
   1a49c:	mov	fp, sp
   1a4a0:	sub	sp, sp, #48	; 0x30
   1a4a4:	vmov.i32	q8, #0	; 0x00000000
   1a4a8:	mov	ip, #32
   1a4ac:	mov	r3, sp
   1a4b0:	mov	lr, r2
   1a4b4:	cmp	r1, #10
   1a4b8:	add	r2, r3, #16
   1a4bc:	vst1.64	{d16-d17}, [r3], ip
   1a4c0:	vst1.64	{d16-d17}, [r2]
   1a4c4:	vst1.64	{d16-d17}, [r3]
   1a4c8:	beq	1a4e8 <__assert_fail@plt+0x8ee4>
   1a4cc:	str	r1, [sp]
   1a4d0:	mov	r3, sp
   1a4d4:	mov	r1, lr
   1a4d8:	mvn	r2, #0
   1a4dc:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1a4e0:	mov	sp, fp
   1a4e4:	pop	{fp, pc}
   1a4e8:	bl	115ec <abort@plt>
   1a4ec:	push	{r4, sl, fp, lr}
   1a4f0:	add	fp, sp, #8
   1a4f4:	sub	sp, sp, #48	; 0x30
   1a4f8:	vmov.i32	q8, #0	; 0x00000000
   1a4fc:	mov	ip, r3
   1a500:	mov	r3, sp
   1a504:	mov	lr, #32
   1a508:	cmp	r1, #10
   1a50c:	add	r4, r3, #16
   1a510:	vst1.64	{d16-d17}, [r3], lr
   1a514:	vst1.64	{d16-d17}, [r4]
   1a518:	vst1.64	{d16-d17}, [r3]
   1a51c:	beq	1a53c <__assert_fail@plt+0x8f38>
   1a520:	str	r1, [sp]
   1a524:	mov	r1, r2
   1a528:	mov	r3, sp
   1a52c:	mov	r2, ip
   1a530:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1a534:	sub	sp, fp, #8
   1a538:	pop	{r4, sl, fp, pc}
   1a53c:	bl	115ec <abort@plt>
   1a540:	push	{fp, lr}
   1a544:	mov	fp, sp
   1a548:	sub	sp, sp, #48	; 0x30
   1a54c:	vmov.i32	q8, #0	; 0x00000000
   1a550:	mov	r3, sp
   1a554:	mov	ip, #32
   1a558:	cmp	r0, #10
   1a55c:	add	r2, r3, #16
   1a560:	vst1.64	{d16-d17}, [r3], ip
   1a564:	vst1.64	{d16-d17}, [r2]
   1a568:	vst1.64	{d16-d17}, [r3]
   1a56c:	beq	1a58c <__assert_fail@plt+0x8f88>
   1a570:	str	r0, [sp]
   1a574:	mov	r3, sp
   1a578:	mov	r0, #0
   1a57c:	mvn	r2, #0
   1a580:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1a584:	mov	sp, fp
   1a588:	pop	{fp, pc}
   1a58c:	bl	115ec <abort@plt>
   1a590:	push	{fp, lr}
   1a594:	mov	fp, sp
   1a598:	sub	sp, sp, #48	; 0x30
   1a59c:	vmov.i32	q8, #0	; 0x00000000
   1a5a0:	mov	r3, sp
   1a5a4:	mov	ip, #32
   1a5a8:	cmp	r0, #10
   1a5ac:	add	lr, r3, #16
   1a5b0:	vst1.64	{d16-d17}, [r3], ip
   1a5b4:	vst1.64	{d16-d17}, [lr]
   1a5b8:	vst1.64	{d16-d17}, [r3]
   1a5bc:	beq	1a5d8 <__assert_fail@plt+0x8fd4>
   1a5c0:	str	r0, [sp]
   1a5c4:	mov	r3, sp
   1a5c8:	mov	r0, #0
   1a5cc:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1a5d0:	mov	sp, fp
   1a5d4:	pop	{fp, pc}
   1a5d8:	bl	115ec <abort@plt>
   1a5dc:	push	{r4, sl, fp, lr}
   1a5e0:	add	fp, sp, #8
   1a5e4:	sub	sp, sp, #48	; 0x30
   1a5e8:	mov	lr, r0
   1a5ec:	movw	r0, #8848	; 0x2290
   1a5f0:	mov	ip, r1
   1a5f4:	mov	r1, #32
   1a5f8:	mov	r4, #1
   1a5fc:	movt	r0, #3
   1a600:	add	r3, r0, #16
   1a604:	vld1.64	{d16-d17}, [r0], r1
   1a608:	vld1.64	{d20-d21}, [r0]
   1a60c:	vld1.64	{d18-d19}, [r3]
   1a610:	mov	r3, sp
   1a614:	add	r0, r3, #32
   1a618:	add	r1, r3, #16
   1a61c:	vst1.64	{d20-d21}, [r0]
   1a620:	mov	r0, #28
   1a624:	vst1.64	{d18-d19}, [r1]
   1a628:	mov	r1, r3
   1a62c:	and	r0, r0, r2, lsr #3
   1a630:	and	r2, r2, #31
   1a634:	vst1.64	{d16-d17}, [r1], r0
   1a638:	ldr	r0, [r1, #8]
   1a63c:	bic	r4, r4, r0, lsr r2
   1a640:	eor	r0, r0, r4, lsl r2
   1a644:	mov	r2, ip
   1a648:	str	r0, [r1, #8]
   1a64c:	mov	r0, #0
   1a650:	mov	r1, lr
   1a654:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1a658:	sub	sp, fp, #8
   1a65c:	pop	{r4, sl, fp, pc}
   1a660:	push	{fp, lr}
   1a664:	mov	fp, sp
   1a668:	sub	sp, sp, #48	; 0x30
   1a66c:	mov	ip, r0
   1a670:	movw	r0, #8848	; 0x2290
   1a674:	mov	r2, #32
   1a678:	movt	r0, #3
   1a67c:	add	r3, r0, #16
   1a680:	vld1.64	{d16-d17}, [r0], r2
   1a684:	vld1.64	{d20-d21}, [r0]
   1a688:	vld1.64	{d18-d19}, [r3]
   1a68c:	mov	r3, sp
   1a690:	add	r0, r3, #32
   1a694:	add	r2, r3, #16
   1a698:	vst1.64	{d20-d21}, [r0]
   1a69c:	mov	r0, #28
   1a6a0:	vst1.64	{d18-d19}, [r2]
   1a6a4:	mov	r2, r3
   1a6a8:	and	r0, r0, r1, lsr #3
   1a6ac:	and	r1, r1, #31
   1a6b0:	vst1.64	{d16-d17}, [r2], r0
   1a6b4:	mov	r0, #1
   1a6b8:	ldr	lr, [r2, #8]
   1a6bc:	bic	r0, r0, lr, lsr r1
   1a6c0:	eor	r0, lr, r0, lsl r1
   1a6c4:	mov	r1, ip
   1a6c8:	str	r0, [r2, #8]
   1a6cc:	mov	r0, #0
   1a6d0:	mvn	r2, #0
   1a6d4:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1a6d8:	mov	sp, fp
   1a6dc:	pop	{fp, pc}
   1a6e0:	push	{fp, lr}
   1a6e4:	mov	fp, sp
   1a6e8:	sub	sp, sp, #48	; 0x30
   1a6ec:	mov	r1, r0
   1a6f0:	movw	r0, #8848	; 0x2290
   1a6f4:	mov	r3, #32
   1a6f8:	movt	r0, #3
   1a6fc:	add	r2, r0, #16
   1a700:	vld1.64	{d16-d17}, [r0], r3
   1a704:	mov	r3, sp
   1a708:	vld1.64	{d18-d19}, [r2]
   1a70c:	vld1.64	{d20-d21}, [r0]
   1a710:	add	r2, r3, #16
   1a714:	add	r0, r3, #32
   1a718:	vst1.64	{d18-d19}, [r2]
   1a71c:	vst1.64	{d20-d21}, [r0]
   1a720:	mov	r0, #12
   1a724:	mov	r2, r3
   1a728:	vst1.64	{d16-d17}, [r2], r0
   1a72c:	ldr	r0, [r2]
   1a730:	orr	r0, r0, #67108864	; 0x4000000
   1a734:	str	r0, [r2]
   1a738:	mov	r0, #0
   1a73c:	mvn	r2, #0
   1a740:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1a744:	mov	sp, fp
   1a748:	pop	{fp, pc}
   1a74c:	push	{fp, lr}
   1a750:	mov	fp, sp
   1a754:	sub	sp, sp, #48	; 0x30
   1a758:	mov	ip, r1
   1a75c:	mov	r1, r0
   1a760:	movw	r0, #8848	; 0x2290
   1a764:	mov	r2, #32
   1a768:	movt	r0, #3
   1a76c:	add	r3, r0, #16
   1a770:	vld1.64	{d16-d17}, [r0], r2
   1a774:	vld1.64	{d18-d19}, [r3]
   1a778:	vld1.64	{d20-d21}, [r0]
   1a77c:	mov	r3, sp
   1a780:	add	r2, r3, #16
   1a784:	add	r0, r3, #32
   1a788:	vst1.64	{d18-d19}, [r2]
   1a78c:	vst1.64	{d20-d21}, [r0]
   1a790:	mov	r0, #12
   1a794:	mov	r2, r3
   1a798:	vst1.64	{d16-d17}, [r2], r0
   1a79c:	ldr	r0, [r2]
   1a7a0:	orr	r0, r0, #67108864	; 0x4000000
   1a7a4:	str	r0, [r2]
   1a7a8:	mov	r0, #0
   1a7ac:	mov	r2, ip
   1a7b0:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1a7b4:	mov	sp, fp
   1a7b8:	pop	{fp, pc}
   1a7bc:	push	{r4, sl, fp, lr}
   1a7c0:	add	fp, sp, #8
   1a7c4:	sub	sp, sp, #96	; 0x60
   1a7c8:	vmov.i32	q8, #0	; 0x00000000
   1a7cc:	mov	ip, r2
   1a7d0:	mov	r2, sp
   1a7d4:	mov	r4, #28
   1a7d8:	cmp	r1, #10
   1a7dc:	mov	r3, r2
   1a7e0:	add	lr, r2, #16
   1a7e4:	vst1.64	{d16-d17}, [r3], r4
   1a7e8:	vst1.64	{d16-d17}, [lr]
   1a7ec:	vst1.32	{d16-d17}, [r3]
   1a7f0:	beq	1a840 <__assert_fail@plt+0x923c>
   1a7f4:	vld1.64	{d16-d17}, [r2], r4
   1a7f8:	vld1.64	{d18-d19}, [lr]
   1a7fc:	add	r3, sp, #48	; 0x30
   1a800:	vld1.32	{d20-d21}, [r2]
   1a804:	add	r2, r3, #20
   1a808:	add	r4, r3, #4
   1a80c:	vst1.32	{d18-d19}, [r2]
   1a810:	add	r2, r3, #32
   1a814:	vst1.32	{d16-d17}, [r4]
   1a818:	vst1.32	{d20-d21}, [r2]
   1a81c:	str	r1, [sp, #48]	; 0x30
   1a820:	mvn	r2, #0
   1a824:	ldr	r1, [sp, #60]	; 0x3c
   1a828:	orr	r1, r1, #67108864	; 0x4000000
   1a82c:	str	r1, [sp, #60]	; 0x3c
   1a830:	mov	r1, ip
   1a834:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1a838:	sub	sp, fp, #8
   1a83c:	pop	{r4, sl, fp, pc}
   1a840:	bl	115ec <abort@plt>
   1a844:	push	{r4, r5, r6, sl, fp, lr}
   1a848:	add	fp, sp, #16
   1a84c:	sub	sp, sp, #48	; 0x30
   1a850:	mov	ip, r3
   1a854:	movw	r3, #8848	; 0x2290
   1a858:	mov	r6, #32
   1a85c:	cmp	r1, #0
   1a860:	mov	r4, sp
   1a864:	movt	r3, #3
   1a868:	cmpne	r2, #0
   1a86c:	add	r5, r4, #16
   1a870:	add	lr, r3, #16
   1a874:	vld1.64	{d16-d17}, [r3], r6
   1a878:	vld1.64	{d18-d19}, [lr]
   1a87c:	vld1.64	{d20-d21}, [r3]
   1a880:	mov	r3, #10
   1a884:	vst1.64	{d16-d17}, [r4], r6
   1a888:	vst1.64	{d18-d19}, [r5]
   1a88c:	vst1.64	{d20-d21}, [r4]
   1a890:	str	r3, [sp]
   1a894:	bne	1a89c <__assert_fail@plt+0x9298>
   1a898:	bl	115ec <abort@plt>
   1a89c:	str	r2, [sp, #44]	; 0x2c
   1a8a0:	str	r1, [sp, #40]	; 0x28
   1a8a4:	mov	r3, sp
   1a8a8:	mov	r1, ip
   1a8ac:	mvn	r2, #0
   1a8b0:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1a8b4:	sub	sp, fp, #16
   1a8b8:	pop	{r4, r5, r6, sl, fp, pc}
   1a8bc:	push	{r4, r5, r6, sl, fp, lr}
   1a8c0:	add	fp, sp, #16
   1a8c4:	sub	sp, sp, #48	; 0x30
   1a8c8:	mov	lr, r3
   1a8cc:	movw	r3, #8848	; 0x2290
   1a8d0:	mov	r6, #32
   1a8d4:	cmp	r1, #0
   1a8d8:	mov	r4, sp
   1a8dc:	movt	r3, #3
   1a8e0:	cmpne	r2, #0
   1a8e4:	add	r5, r4, #16
   1a8e8:	add	ip, r3, #16
   1a8ec:	vld1.64	{d16-d17}, [r3], r6
   1a8f0:	vld1.64	{d18-d19}, [ip]
   1a8f4:	vld1.64	{d20-d21}, [r3]
   1a8f8:	mov	r3, #10
   1a8fc:	vst1.64	{d16-d17}, [r4], r6
   1a900:	vst1.64	{d18-d19}, [r5]
   1a904:	vst1.64	{d20-d21}, [r4]
   1a908:	str	r3, [sp]
   1a90c:	bne	1a914 <__assert_fail@plt+0x9310>
   1a910:	bl	115ec <abort@plt>
   1a914:	ldr	ip, [fp, #8]
   1a918:	str	r2, [sp, #44]	; 0x2c
   1a91c:	str	r1, [sp, #40]	; 0x28
   1a920:	mov	r3, sp
   1a924:	mov	r1, lr
   1a928:	mov	r2, ip
   1a92c:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1a930:	sub	sp, fp, #16
   1a934:	pop	{r4, r5, r6, sl, fp, pc}
   1a938:	push	{r4, sl, fp, lr}
   1a93c:	add	fp, sp, #8
   1a940:	sub	sp, sp, #48	; 0x30
   1a944:	movw	r3, #8848	; 0x2290
   1a948:	mov	lr, #32
   1a94c:	mov	ip, r2
   1a950:	cmp	r0, #0
   1a954:	movt	r3, #3
   1a958:	cmpne	r1, #0
   1a95c:	add	r2, r3, #16
   1a960:	vld1.64	{d16-d17}, [r3], lr
   1a964:	vld1.64	{d20-d21}, [r3]
   1a968:	vld1.64	{d18-d19}, [r2]
   1a96c:	mov	r2, sp
   1a970:	add	r4, r2, #16
   1a974:	vst1.64	{d16-d17}, [r2], lr
   1a978:	vst1.64	{d20-d21}, [r2]
   1a97c:	mov	r2, #10
   1a980:	vst1.64	{d18-d19}, [r4]
   1a984:	str	r2, [sp]
   1a988:	bne	1a990 <__assert_fail@plt+0x938c>
   1a98c:	bl	115ec <abort@plt>
   1a990:	str	r1, [sp, #44]	; 0x2c
   1a994:	str	r0, [sp, #40]	; 0x28
   1a998:	mov	r3, sp
   1a99c:	mov	r0, #0
   1a9a0:	mov	r1, ip
   1a9a4:	mvn	r2, #0
   1a9a8:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1a9ac:	sub	sp, fp, #8
   1a9b0:	pop	{r4, sl, fp, pc}
   1a9b4:	push	{r4, r5, fp, lr}
   1a9b8:	add	fp, sp, #8
   1a9bc:	sub	sp, sp, #48	; 0x30
   1a9c0:	mov	ip, r3
   1a9c4:	movw	r3, #8848	; 0x2290
   1a9c8:	mov	r4, #32
   1a9cc:	mov	lr, r2
   1a9d0:	cmp	r0, #0
   1a9d4:	movt	r3, #3
   1a9d8:	cmpne	r1, #0
   1a9dc:	add	r2, r3, #16
   1a9e0:	vld1.64	{d16-d17}, [r3], r4
   1a9e4:	vld1.64	{d20-d21}, [r3]
   1a9e8:	vld1.64	{d18-d19}, [r2]
   1a9ec:	mov	r2, sp
   1a9f0:	add	r5, r2, #16
   1a9f4:	vst1.64	{d16-d17}, [r2], r4
   1a9f8:	vst1.64	{d20-d21}, [r2]
   1a9fc:	mov	r2, #10
   1aa00:	vst1.64	{d18-d19}, [r5]
   1aa04:	str	r2, [sp]
   1aa08:	bne	1aa10 <__assert_fail@plt+0x940c>
   1aa0c:	bl	115ec <abort@plt>
   1aa10:	str	r1, [sp, #44]	; 0x2c
   1aa14:	str	r0, [sp, #40]	; 0x28
   1aa18:	mov	r3, sp
   1aa1c:	mov	r0, #0
   1aa20:	mov	r1, lr
   1aa24:	mov	r2, ip
   1aa28:	bl	1a2cc <__assert_fail@plt+0x8cc8>
   1aa2c:	sub	sp, fp, #8
   1aa30:	pop	{r4, r5, fp, pc}
   1aa34:	movw	r3, #8560	; 0x2170
   1aa38:	movt	r3, #3
   1aa3c:	b	1a2cc <__assert_fail@plt+0x8cc8>
   1aa40:	movw	r3, #8560	; 0x2170
   1aa44:	mov	r2, r1
   1aa48:	mov	r1, r0
   1aa4c:	mov	r0, #0
   1aa50:	movt	r3, #3
   1aa54:	b	1a2cc <__assert_fail@plt+0x8cc8>
   1aa58:	movw	r3, #8560	; 0x2170
   1aa5c:	mvn	r2, #0
   1aa60:	movt	r3, #3
   1aa64:	b	1a2cc <__assert_fail@plt+0x8cc8>
   1aa68:	movw	r3, #8560	; 0x2170
   1aa6c:	mov	r1, r0
   1aa70:	mov	r0, #0
   1aa74:	mvn	r2, #0
   1aa78:	movt	r3, #3
   1aa7c:	b	1a2cc <__assert_fail@plt+0x8cc8>
   1aa80:	push	{r4, r5, r6, r7, fp, lr}
   1aa84:	add	fp, sp, #16
   1aa88:	mov	r4, r1
   1aa8c:	mov	r1, #0
   1aa90:	mov	r6, r2
   1aa94:	bl	11574 <setlocale@plt>
   1aa98:	cmp	r0, #0
   1aa9c:	beq	1aacc <__assert_fail@plt+0x94c8>
   1aaa0:	mov	r7, r0
   1aaa4:	bl	114b4 <strlen@plt>
   1aaa8:	cmp	r0, r6
   1aaac:	bcs	1aae8 <__assert_fail@plt+0x94e4>
   1aab0:	add	r2, r0, #1
   1aab4:	mov	r0, r4
   1aab8:	mov	r1, r7
   1aabc:	bl	11358 <memcpy@plt>
   1aac0:	mov	r5, #0
   1aac4:	mov	r0, r5
   1aac8:	pop	{r4, r5, r6, r7, fp, pc}
   1aacc:	mov	r5, #22
   1aad0:	cmp	r6, #0
   1aad4:	beq	1ab10 <__assert_fail@plt+0x950c>
   1aad8:	mov	r0, #0
   1aadc:	strb	r0, [r4]
   1aae0:	mov	r0, r5
   1aae4:	pop	{r4, r5, r6, r7, fp, pc}
   1aae8:	mov	r5, #34	; 0x22
   1aaec:	cmp	r6, #0
   1aaf0:	beq	1ab10 <__assert_fail@plt+0x950c>
   1aaf4:	sub	r6, r6, #1
   1aaf8:	mov	r0, r4
   1aafc:	mov	r1, r7
   1ab00:	mov	r2, r6
   1ab04:	bl	11358 <memcpy@plt>
   1ab08:	mov	r0, #0
   1ab0c:	strb	r0, [r4, r6]
   1ab10:	mov	r0, r5
   1ab14:	pop	{r4, r5, r6, r7, fp, pc}
   1ab18:	mov	r1, #0
   1ab1c:	b	11574 <setlocale@plt>
   1ab20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ab24:	add	fp, sp, #24
   1ab28:	mov	r4, r0
   1ab2c:	cmp	r0, #0
   1ab30:	beq	1ab64 <__assert_fail@plt+0x9560>
   1ab34:	mov	r0, r4
   1ab38:	bl	114b4 <strlen@plt>
   1ab3c:	add	r5, r0, #1
   1ab40:	cmp	r5, #58	; 0x3a
   1ab44:	bls	1ab68 <__assert_fail@plt+0x9564>
   1ab48:	add	r0, r0, #10
   1ab4c:	bic	r0, r0, #3
   1ab50:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1ab54:	mov	r6, r0
   1ab58:	cmp	r0, #0
   1ab5c:	bne	1ab7c <__assert_fail@plt+0x9578>
   1ab60:	b	1abb4 <__assert_fail@plt+0x95b0>
   1ab64:	mov	r5, #0
   1ab68:	mov	r0, #64	; 0x40
   1ab6c:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1ab70:	mov	r6, r0
   1ab74:	cmp	r0, #0
   1ab78:	beq	1abb4 <__assert_fail@plt+0x95b0>
   1ab7c:	cmp	r4, #0
   1ab80:	mov	r0, r4
   1ab84:	mov	r8, #0
   1ab88:	mov	r7, r6
   1ab8c:	movwne	r0, #1
   1ab90:	str	r8, [r6]
   1ab94:	strb	r0, [r6, #4]
   1ab98:	strb	r8, [r7, #5]!
   1ab9c:	beq	1abb4 <__assert_fail@plt+0x95b0>
   1aba0:	mov	r0, r7
   1aba4:	mov	r1, r4
   1aba8:	mov	r2, r5
   1abac:	bl	11358 <memcpy@plt>
   1abb0:	strb	r8, [r7, r5]
   1abb4:	mov	r0, r6
   1abb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1abbc:	push	{r4, sl, fp, lr}
   1abc0:	add	fp, sp, #8
   1abc4:	cmp	r0, #2
   1abc8:	popcc	{r4, sl, fp, pc}
   1abcc:	ldr	r4, [r0]
   1abd0:	bl	16600 <__assert_fail@plt+0x4ffc>
   1abd4:	cmp	r4, #0
   1abd8:	mov	r0, r4
   1abdc:	bne	1abcc <__assert_fail@plt+0x95c8>
   1abe0:	pop	{r4, sl, fp, pc}
   1abe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abe8:	add	fp, sp, #28
   1abec:	sub	sp, sp, #4
   1abf0:	mov	r7, r2
   1abf4:	mov	r5, r1
   1abf8:	cmp	r0, #0
   1abfc:	beq	1ac78 <__assert_fail@plt+0x9674>
   1ac00:	mov	r6, r0
   1ac04:	movw	r0, #64227	; 0xfae3
   1ac08:	movt	r0, #1
   1ac0c:	bl	11424 <getenv@plt>
   1ac10:	mov	r9, r0
   1ac14:	ldrb	r0, [r6, #4]
   1ac18:	cmp	r9, #0
   1ac1c:	beq	1ac8c <__assert_fail@plt+0x9688>
   1ac20:	cmp	r0, #0
   1ac24:	beq	1ac3c <__assert_fail@plt+0x9638>
   1ac28:	add	r0, r6, #5
   1ac2c:	mov	r1, r9
   1ac30:	bl	112ec <strcmp@plt>
   1ac34:	cmp	r0, #0
   1ac38:	beq	1ad7c <__assert_fail@plt+0x9778>
   1ac3c:	mov	r0, r9
   1ac40:	str	r7, [sp]
   1ac44:	bl	114b4 <strlen@plt>
   1ac48:	add	sl, r0, #1
   1ac4c:	mov	r8, #1
   1ac50:	cmp	sl, #58	; 0x3a
   1ac54:	bls	1aca0 <__assert_fail@plt+0x969c>
   1ac58:	add	r0, r0, #10
   1ac5c:	bic	r0, r0, #3
   1ac60:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1ac64:	cmp	r0, #0
   1ac68:	bne	1acb0 <__assert_fail@plt+0x96ac>
   1ac6c:	mov	r0, #0
   1ac70:	sub	sp, fp, #28
   1ac74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac78:	mov	r0, r5
   1ac7c:	mov	r1, r7
   1ac80:	sub	sp, fp, #28
   1ac84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac88:	b	112e0 <gmtime_r@plt>
   1ac8c:	mov	r8, #0
   1ac90:	cmp	r0, #0
   1ac94:	mov	sl, #0
   1ac98:	str	r7, [sp]
   1ac9c:	beq	1ad78 <__assert_fail@plt+0x9774>
   1aca0:	mov	r0, #64	; 0x40
   1aca4:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1aca8:	cmp	r0, #0
   1acac:	beq	1ac6c <__assert_fail@plt+0x9668>
   1acb0:	mov	r4, r0
   1acb4:	mov	r7, r5
   1acb8:	strb	r8, [r0, #4]
   1acbc:	mov	r0, #0
   1acc0:	cmp	r8, #0
   1acc4:	mov	r5, r4
   1acc8:	str	r0, [r4]
   1accc:	strb	r0, [r5, #5]!
   1acd0:	beq	1acec <__assert_fail@plt+0x96e8>
   1acd4:	mov	r0, r5
   1acd8:	mov	r1, r9
   1acdc:	mov	r2, sl
   1ace0:	mov	r8, #0
   1ace4:	bl	11358 <memcpy@plt>
   1ace8:	strb	r8, [r5, sl]
   1acec:	ldrb	r0, [r6, #4]
   1acf0:	mov	r5, r7
   1acf4:	cmp	r0, #0
   1acf8:	beq	1ad58 <__assert_fail@plt+0x9754>
   1acfc:	movw	r0, #64227	; 0xfae3
   1ad00:	add	r1, r6, #5
   1ad04:	mov	r2, #1
   1ad08:	movt	r0, #1
   1ad0c:	bl	114cc <setenv@plt>
   1ad10:	ldr	r7, [sp]
   1ad14:	cmp	r0, #0
   1ad18:	beq	1ad70 <__assert_fail@plt+0x976c>
   1ad1c:	bl	114e4 <__errno_location@plt>
   1ad20:	ldr	r6, [r0]
   1ad24:	mov	r5, r0
   1ad28:	cmp	r4, #2
   1ad2c:	bcc	1ad48 <__assert_fail@plt+0x9744>
   1ad30:	ldr	r7, [r4]
   1ad34:	mov	r0, r4
   1ad38:	bl	16600 <__assert_fail@plt+0x4ffc>
   1ad3c:	cmp	r7, #0
   1ad40:	mov	r4, r7
   1ad44:	bne	1ad30 <__assert_fail@plt+0x972c>
   1ad48:	str	r6, [r5]
   1ad4c:	mov	r0, #0
   1ad50:	sub	sp, fp, #28
   1ad54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad58:	movw	r0, #64227	; 0xfae3
   1ad5c:	movt	r0, #1
   1ad60:	bl	115d4 <unsetenv@plt>
   1ad64:	ldr	r7, [sp]
   1ad68:	cmp	r0, #0
   1ad6c:	bne	1ad1c <__assert_fail@plt+0x9718>
   1ad70:	bl	113c4 <tzset@plt>
   1ad74:	b	1ad80 <__assert_fail@plt+0x977c>
   1ad78:	ldr	r7, [sp]
   1ad7c:	mov	r4, #1
   1ad80:	mov	r0, r5
   1ad84:	mov	r1, r7
   1ad88:	bl	11394 <localtime_r@plt>
   1ad8c:	mov	sl, #1
   1ad90:	cmp	r0, #0
   1ad94:	mov	r9, #1
   1ad98:	beq	1adac <__assert_fail@plt+0x97a8>
   1ad9c:	mov	r0, r6
   1ada0:	mov	r1, r7
   1ada4:	bl	1ae58 <__assert_fail@plt+0x9854>
   1ada8:	eor	r9, r0, #1
   1adac:	cmp	r4, #1
   1adb0:	beq	1ae14 <__assert_fail@plt+0x9810>
   1adb4:	bl	114e4 <__errno_location@plt>
   1adb8:	mov	r6, r0
   1adbc:	ldr	r8, [r0]
   1adc0:	ldrb	r0, [r4, #4]
   1adc4:	cmp	r0, #0
   1adc8:	beq	1ae30 <__assert_fail@plt+0x982c>
   1adcc:	movw	r0, #64227	; 0xfae3
   1add0:	add	r1, r4, #5
   1add4:	mov	r2, #1
   1add8:	movt	r0, #1
   1addc:	bl	114cc <setenv@plt>
   1ade0:	cmp	r0, #0
   1ade4:	beq	1ae44 <__assert_fail@plt+0x9840>
   1ade8:	ldr	r8, [r6]
   1adec:	mov	sl, #0
   1adf0:	cmp	r4, #2
   1adf4:	bcc	1ae10 <__assert_fail@plt+0x980c>
   1adf8:	ldr	r5, [r4]
   1adfc:	mov	r0, r4
   1ae00:	bl	16600 <__assert_fail@plt+0x4ffc>
   1ae04:	cmp	r5, #0
   1ae08:	mov	r4, r5
   1ae0c:	bne	1adf8 <__assert_fail@plt+0x97f4>
   1ae10:	str	r8, [r6]
   1ae14:	cmp	sl, #0
   1ae18:	moveq	r7, sl
   1ae1c:	cmp	r9, #0
   1ae20:	movwne	r7, #0
   1ae24:	mov	r0, r7
   1ae28:	sub	sp, fp, #28
   1ae2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae30:	movw	r0, #64227	; 0xfae3
   1ae34:	movt	r0, #1
   1ae38:	bl	115d4 <unsetenv@plt>
   1ae3c:	cmp	r0, #0
   1ae40:	bne	1ade8 <__assert_fail@plt+0x97e4>
   1ae44:	bl	113c4 <tzset@plt>
   1ae48:	mov	sl, #1
   1ae4c:	cmp	r4, #2
   1ae50:	bcs	1adf8 <__assert_fail@plt+0x97f4>
   1ae54:	b	1ae10 <__assert_fail@plt+0x980c>
   1ae58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae5c:	add	fp, sp, #28
   1ae60:	sub	sp, sp, #4
   1ae64:	ldr	r7, [r1, #40]	; 0x28
   1ae68:	mov	r8, #1
   1ae6c:	cmp	r7, #0
   1ae70:	beq	1af10 <__assert_fail@plt+0x990c>
   1ae74:	mov	r5, r1
   1ae78:	mov	r6, r0
   1ae7c:	cmp	r7, r1
   1ae80:	bcc	1ae90 <__assert_fail@plt+0x988c>
   1ae84:	add	r0, r5, #44	; 0x2c
   1ae88:	cmp	r7, r0
   1ae8c:	bcc	1af10 <__assert_fail@plt+0x990c>
   1ae90:	ldrb	r0, [r7]
   1ae94:	cmp	r0, #0
   1ae98:	beq	1af04 <__assert_fail@plt+0x9900>
   1ae9c:	add	r4, r6, #5
   1aea0:	mov	r0, r4
   1aea4:	mov	r1, r7
   1aea8:	bl	112ec <strcmp@plt>
   1aeac:	cmp	r0, #0
   1aeb0:	beq	1afb4 <__assert_fail@plt+0x99b0>
   1aeb4:	ldrb	r0, [r4]
   1aeb8:	cmp	r0, #0
   1aebc:	bne	1aed8 <__assert_fail@plt+0x98d4>
   1aec0:	add	r0, r6, #5
   1aec4:	cmp	r4, r0
   1aec8:	bne	1af1c <__assert_fail@plt+0x9918>
   1aecc:	ldrb	r0, [r6, #4]
   1aed0:	cmp	r0, #0
   1aed4:	beq	1af1c <__assert_fail@plt+0x9918>
   1aed8:	mov	r0, r4
   1aedc:	bl	114b4 <strlen@plt>
   1aee0:	add	r4, r0, r4
   1aee4:	ldrb	r0, [r4, #1]!
   1aee8:	cmp	r0, #0
   1aeec:	bne	1aea0 <__assert_fail@plt+0x989c>
   1aef0:	ldr	r0, [r6]
   1aef4:	cmp	r0, #0
   1aef8:	addne	r4, r0, #5
   1aefc:	movne	r6, r0
   1af00:	b	1aea0 <__assert_fail@plt+0x989c>
   1af04:	movw	r4, #3108	; 0xc24
   1af08:	movt	r4, #2
   1af0c:	str	r4, [r5, #40]	; 0x28
   1af10:	mov	r0, r8
   1af14:	sub	sp, fp, #28
   1af18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af1c:	sub	r0, r6, r4
   1af20:	add	sl, r0, #64	; 0x40
   1af24:	mov	r0, r7
   1af28:	bl	114b4 <strlen@plt>
   1af2c:	add	r9, r0, #1
   1af30:	cmp	r9, sl
   1af34:	bge	1af60 <__assert_fail@plt+0x995c>
   1af38:	mov	r0, r4
   1af3c:	mov	r1, r7
   1af40:	mov	r2, r9
   1af44:	bl	11358 <memcpy@plt>
   1af48:	mov	r0, #0
   1af4c:	strb	r0, [r4, r9]
   1af50:	str	r4, [r5, #40]	; 0x28
   1af54:	mov	r0, r8
   1af58:	sub	sp, fp, #28
   1af5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af60:	add	r0, r0, #10
   1af64:	cmp	r9, #59	; 0x3b
   1af68:	bic	r0, r0, #3
   1af6c:	movwcc	r0, #64	; 0x40
   1af70:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1af74:	cmp	r0, #0
   1af78:	beq	1afc4 <__assert_fail@plt+0x99c0>
   1af7c:	mov	sl, r0
   1af80:	mov	r0, #1
   1af84:	mov	r1, r7
   1af88:	mov	r2, r9
   1af8c:	strh	r0, [sl, #4]
   1af90:	mov	r0, #0
   1af94:	add	r4, sl, #5
   1af98:	str	r0, [sl]
   1af9c:	mov	r0, r4
   1afa0:	bl	11358 <memcpy@plt>
   1afa4:	mov	r0, #0
   1afa8:	strb	r0, [r4, r9]
   1afac:	str	sl, [r6]
   1afb0:	strb	r0, [sl, #4]
   1afb4:	str	r4, [r5, #40]	; 0x28
   1afb8:	mov	r0, r8
   1afbc:	sub	sp, fp, #28
   1afc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afc4:	mov	r8, #0
   1afc8:	str	r8, [r6]
   1afcc:	mov	r0, r8
   1afd0:	sub	sp, fp, #28
   1afd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afdc:	add	fp, sp, #28
   1afe0:	sub	sp, sp, #52	; 0x34
   1afe4:	mov	r9, r1
   1afe8:	cmp	r0, #0
   1afec:	beq	1b068 <__assert_fail@plt+0x9a64>
   1aff0:	mov	r7, r0
   1aff4:	movw	r0, #64227	; 0xfae3
   1aff8:	movt	r0, #1
   1affc:	bl	11424 <getenv@plt>
   1b000:	mov	r5, r0
   1b004:	ldrb	r0, [r7, #4]
   1b008:	cmp	r5, #0
   1b00c:	beq	1b078 <__assert_fail@plt+0x9a74>
   1b010:	cmp	r0, #0
   1b014:	beq	1b02c <__assert_fail@plt+0x9a28>
   1b018:	add	r0, r7, #5
   1b01c:	mov	r1, r5
   1b020:	bl	112ec <strcmp@plt>
   1b024:	cmp	r0, #0
   1b028:	beq	1b13c <__assert_fail@plt+0x9b38>
   1b02c:	mov	r0, r5
   1b030:	bl	114b4 <strlen@plt>
   1b034:	add	sl, r0, #1
   1b038:	mov	r8, #1
   1b03c:	cmp	sl, #58	; 0x3a
   1b040:	bls	1b088 <__assert_fail@plt+0x9a84>
   1b044:	add	r0, r0, #10
   1b048:	bic	r0, r0, #3
   1b04c:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1b050:	mvn	r6, #0
   1b054:	cmp	r0, #0
   1b058:	bne	1b09c <__assert_fail@plt+0x9a98>
   1b05c:	mov	r0, r6
   1b060:	sub	sp, fp, #28
   1b064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b068:	mov	r0, r9
   1b06c:	sub	sp, fp, #28
   1b070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b074:	b	11598 <timegm@plt>
   1b078:	mov	r8, #0
   1b07c:	cmp	r0, #0
   1b080:	mov	sl, #0
   1b084:	beq	1b13c <__assert_fail@plt+0x9b38>
   1b088:	mov	r0, #64	; 0x40
   1b08c:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1b090:	mvn	r6, #0
   1b094:	cmp	r0, #0
   1b098:	beq	1b05c <__assert_fail@plt+0x9a58>
   1b09c:	mov	r4, r0
   1b0a0:	strb	r8, [r0, #4]
   1b0a4:	mov	r0, #0
   1b0a8:	cmp	r8, #0
   1b0ac:	mov	r6, r4
   1b0b0:	str	r0, [r4]
   1b0b4:	strb	r0, [r6, #5]!
   1b0b8:	beq	1b0d4 <__assert_fail@plt+0x9ad0>
   1b0bc:	mov	r0, r6
   1b0c0:	mov	r1, r5
   1b0c4:	mov	r2, sl
   1b0c8:	mov	r8, #0
   1b0cc:	bl	11358 <memcpy@plt>
   1b0d0:	strb	r8, [r6, sl]
   1b0d4:	ldrb	r0, [r7, #4]
   1b0d8:	cmp	r0, #0
   1b0dc:	beq	1b144 <__assert_fail@plt+0x9b40>
   1b0e0:	movw	r0, #64227	; 0xfae3
   1b0e4:	add	r1, r7, #5
   1b0e8:	mov	r2, #1
   1b0ec:	movt	r0, #1
   1b0f0:	bl	114cc <setenv@plt>
   1b0f4:	cmp	r0, #0
   1b0f8:	beq	1b158 <__assert_fail@plt+0x9b54>
   1b0fc:	bl	114e4 <__errno_location@plt>
   1b100:	ldr	r5, [r0]
   1b104:	mov	r6, r0
   1b108:	cmp	r4, #2
   1b10c:	bcc	1b128 <__assert_fail@plt+0x9b24>
   1b110:	ldr	r7, [r4]
   1b114:	mov	r0, r4
   1b118:	bl	16600 <__assert_fail@plt+0x4ffc>
   1b11c:	cmp	r7, #0
   1b120:	mov	r4, r7
   1b124:	bne	1b110 <__assert_fail@plt+0x9b0c>
   1b128:	str	r5, [r6]
   1b12c:	mvn	r6, #0
   1b130:	mov	r0, r6
   1b134:	sub	sp, fp, #28
   1b138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b13c:	mov	r4, #1
   1b140:	b	1b15c <__assert_fail@plt+0x9b58>
   1b144:	movw	r0, #64227	; 0xfae3
   1b148:	movt	r0, #1
   1b14c:	bl	115d4 <unsetenv@plt>
   1b150:	cmp	r0, #0
   1b154:	bne	1b0fc <__assert_fail@plt+0x9af8>
   1b158:	bl	113c4 <tzset@plt>
   1b15c:	mov	r0, #32
   1b160:	mov	r1, r9
   1b164:	add	r5, sp, #8
   1b168:	vld1.32	{d16-d17}, [r1], r0
   1b16c:	mov	r2, r5
   1b170:	vst1.32	{d16-d17}, [r2], r0
   1b174:	ldr	r0, [r9, #16]
   1b178:	ldr	r3, [r9, #20]
   1b17c:	str	r0, [sp, #24]
   1b180:	mvn	r0, #0
   1b184:	str	r0, [sp, #36]	; 0x24
   1b188:	str	r3, [sp, #28]
   1b18c:	ldr	r0, [r1]
   1b190:	str	r0, [r2]
   1b194:	mov	r0, r5
   1b198:	bl	11310 <mktime@plt>
   1b19c:	mov	r6, r0
   1b1a0:	ldr	r0, [sp, #36]	; 0x24
   1b1a4:	mov	sl, #1
   1b1a8:	mov	r8, #1
   1b1ac:	cmp	r0, #0
   1b1b0:	bmi	1b1c4 <__assert_fail@plt+0x9bc0>
   1b1b4:	add	r1, sp, #8
   1b1b8:	mov	r0, r7
   1b1bc:	bl	1ae58 <__assert_fail@plt+0x9854>
   1b1c0:	eor	r8, r0, #1
   1b1c4:	cmp	r4, #1
   1b1c8:	beq	1b23c <__assert_fail@plt+0x9c38>
   1b1cc:	bl	114e4 <__errno_location@plt>
   1b1d0:	mov	r7, r0
   1b1d4:	ldr	sl, [r0]
   1b1d8:	ldrb	r0, [r4, #4]
   1b1dc:	cmp	r0, #0
   1b1e0:	beq	1b288 <__assert_fail@plt+0x9c84>
   1b1e4:	movw	r0, #64227	; 0xfae3
   1b1e8:	add	r1, r4, #5
   1b1ec:	mov	r2, #1
   1b1f0:	movt	r0, #1
   1b1f4:	bl	114cc <setenv@plt>
   1b1f8:	cmp	r0, #0
   1b1fc:	str	r6, [sp, #4]
   1b200:	beq	1b2a0 <__assert_fail@plt+0x9c9c>
   1b204:	ldr	r0, [r7]
   1b208:	mov	sl, #0
   1b20c:	str	r0, [sp]
   1b210:	cmp	r4, #2
   1b214:	bcc	1b230 <__assert_fail@plt+0x9c2c>
   1b218:	ldr	r6, [r4]
   1b21c:	mov	r0, r4
   1b220:	bl	16600 <__assert_fail@plt+0x4ffc>
   1b224:	cmp	r6, #0
   1b228:	mov	r4, r6
   1b22c:	bne	1b218 <__assert_fail@plt+0x9c14>
   1b230:	ldr	r0, [sp]
   1b234:	ldr	r6, [sp, #4]
   1b238:	str	r0, [r7]
   1b23c:	eor	r0, sl, #1
   1b240:	orrs	r0, r8, r0
   1b244:	beq	1b258 <__assert_fail@plt+0x9c54>
   1b248:	mvn	r6, #0
   1b24c:	mov	r0, r6
   1b250:	sub	sp, fp, #28
   1b254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b258:	mov	r0, #28
   1b25c:	add	r1, r5, #16
   1b260:	vld1.32	{d16-d17}, [r5], r0
   1b264:	vld1.64	{d18-d19}, [r1]
   1b268:	add	r1, r9, #16
   1b26c:	vld1.32	{d20-d21}, [r5]
   1b270:	vst1.32	{d16-d17}, [r9], r0
   1b274:	vst1.32	{d18-d19}, [r1]
   1b278:	vst1.32	{d20-d21}, [r9]
   1b27c:	mov	r0, r6
   1b280:	sub	sp, fp, #28
   1b284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b288:	movw	r0, #64227	; 0xfae3
   1b28c:	movt	r0, #1
   1b290:	bl	115d4 <unsetenv@plt>
   1b294:	cmp	r0, #0
   1b298:	str	r6, [sp, #4]
   1b29c:	bne	1b204 <__assert_fail@plt+0x9c00>
   1b2a0:	str	sl, [sp]
   1b2a4:	bl	113c4 <tzset@plt>
   1b2a8:	mov	sl, #1
   1b2ac:	cmp	r4, #2
   1b2b0:	bcs	1b218 <__assert_fail@plt+0x9c14>
   1b2b4:	b	1b230 <__assert_fail@plt+0x9c2c>
   1b2b8:	mov	r1, #0
   1b2bc:	mov	r2, #3
   1b2c0:	b	1f3d4 <__assert_fail@plt+0xddd0>
   1b2c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b2c8:	add	fp, sp, #24
   1b2cc:	sub	sp, sp, #32
   1b2d0:	ldr	r6, [fp, #12]
   1b2d4:	ldr	r7, [fp, #8]
   1b2d8:	mov	r4, r2
   1b2dc:	mov	r8, r0
   1b2e0:	cmp	r1, #0
   1b2e4:	beq	1b30c <__assert_fail@plt+0x9d08>
   1b2e8:	movw	r2, #4532	; 0x11b4
   1b2ec:	mov	r5, r1
   1b2f0:	str	r3, [sp, #4]
   1b2f4:	str	r4, [sp]
   1b2f8:	mov	r0, r8
   1b2fc:	mov	r1, #1
   1b300:	movt	r2, #2
   1b304:	mov	r3, r5
   1b308:	b	1b324 <__assert_fail@plt+0x9d20>
   1b30c:	movw	r2, #4544	; 0x11c0
   1b310:	str	r3, [sp]
   1b314:	mov	r0, r8
   1b318:	mov	r1, #1
   1b31c:	mov	r3, r4
   1b320:	movt	r2, #2
   1b324:	bl	1152c <__fprintf_chk@plt>
   1b328:	movw	r1, #4551	; 0x11c7
   1b32c:	mov	r0, #0
   1b330:	mov	r2, #5
   1b334:	movt	r1, #2
   1b338:	bl	1137c <dcgettext@plt>
   1b33c:	movw	r2, #5269	; 0x1495
   1b340:	mov	r3, r0
   1b344:	movw	r0, #2022	; 0x7e6
   1b348:	mov	r1, #1
   1b34c:	movt	r2, #2
   1b350:	str	r0, [sp]
   1b354:	mov	r0, r8
   1b358:	bl	1152c <__fprintf_chk@plt>
   1b35c:	movw	r4, #3219	; 0xc93
   1b360:	mov	r1, r8
   1b364:	movt	r4, #2
   1b368:	mov	r0, r4
   1b36c:	bl	112c8 <fputs_unlocked@plt>
   1b370:	movw	r1, #4555	; 0x11cb
   1b374:	mov	r0, #0
   1b378:	mov	r2, #5
   1b37c:	movt	r1, #2
   1b380:	bl	1137c <dcgettext@plt>
   1b384:	movw	r3, #4726	; 0x1276
   1b388:	mov	r2, r0
   1b38c:	mov	r0, r8
   1b390:	mov	r1, #1
   1b394:	movt	r3, #2
   1b398:	bl	1152c <__fprintf_chk@plt>
   1b39c:	mov	r0, r4
   1b3a0:	mov	r1, r8
   1b3a4:	bl	112c8 <fputs_unlocked@plt>
   1b3a8:	cmp	r6, #9
   1b3ac:	bhi	1b3e8 <__assert_fail@plt+0x9de4>
   1b3b0:	add	r0, pc, #0
   1b3b4:	ldr	pc, [r0, r6, lsl #2]
   1b3b8:	andeq	fp, r1, r0, ror #7
   1b3bc:	strdeq	fp, [r1], -r4
   1b3c0:	andeq	fp, r1, r4, lsr #8
   1b3c4:	andeq	fp, r1, ip, asr #8
   1b3c8:	andeq	fp, r1, r4, ror r4
   1b3cc:	muleq	r1, ip, r4
   1b3d0:	andeq	fp, r1, r4, asr #9
   1b3d4:	strdeq	fp, [r1], -ip
   1b3d8:	andeq	fp, r1, r4, lsr #11
   1b3dc:	andeq	fp, r1, ip, asr #10
   1b3e0:	sub	sp, fp, #24
   1b3e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b3e8:	movw	r1, #5079	; 0x13d7
   1b3ec:	movt	r1, #2
   1b3f0:	b	1b554 <__assert_fail@plt+0x9f50>
   1b3f4:	movw	r1, #4760	; 0x1298
   1b3f8:	mov	r0, #0
   1b3fc:	mov	r2, #5
   1b400:	movt	r1, #2
   1b404:	bl	1137c <dcgettext@plt>
   1b408:	ldr	r3, [r7]
   1b40c:	mov	r2, r0
   1b410:	mov	r0, r8
   1b414:	mov	r1, #1
   1b418:	sub	sp, fp, #24
   1b41c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b420:	b	1152c <__fprintf_chk@plt>
   1b424:	movw	r1, #4776	; 0x12a8
   1b428:	mov	r0, #0
   1b42c:	mov	r2, #5
   1b430:	movt	r1, #2
   1b434:	bl	1137c <dcgettext@plt>
   1b438:	mov	r2, r0
   1b43c:	ldr	r3, [r7]
   1b440:	ldr	r0, [r7, #4]
   1b444:	str	r0, [sp]
   1b448:	b	1b538 <__assert_fail@plt+0x9f34>
   1b44c:	movw	r1, #4799	; 0x12bf
   1b450:	mov	r0, #0
   1b454:	mov	r2, #5
   1b458:	movt	r1, #2
   1b45c:	bl	1137c <dcgettext@plt>
   1b460:	mov	r2, r0
   1b464:	ldr	r3, [r7]
   1b468:	ldmib	r7, {r0, r1}
   1b46c:	stm	sp, {r0, r1}
   1b470:	b	1b538 <__assert_fail@plt+0x9f34>
   1b474:	movw	r1, #4827	; 0x12db
   1b478:	mov	r0, #0
   1b47c:	mov	r2, #5
   1b480:	movt	r1, #2
   1b484:	bl	1137c <dcgettext@plt>
   1b488:	ldr	r3, [r7]
   1b48c:	mov	r2, r0
   1b490:	ldmib	r7, {r0, r1, r7}
   1b494:	stm	sp, {r0, r1, r7}
   1b498:	b	1b538 <__assert_fail@plt+0x9f34>
   1b49c:	movw	r1, #4859	; 0x12fb
   1b4a0:	mov	r0, #0
   1b4a4:	mov	r2, #5
   1b4a8:	movt	r1, #2
   1b4ac:	bl	1137c <dcgettext@plt>
   1b4b0:	ldr	r3, [r7]
   1b4b4:	mov	r2, r0
   1b4b8:	ldmib	r7, {r0, r1, r6, r7}
   1b4bc:	stm	sp, {r0, r1, r6, r7}
   1b4c0:	b	1b538 <__assert_fail@plt+0x9f34>
   1b4c4:	movw	r1, #4895	; 0x131f
   1b4c8:	mov	r0, #0
   1b4cc:	mov	r2, #5
   1b4d0:	movt	r1, #2
   1b4d4:	bl	1137c <dcgettext@plt>
   1b4d8:	mov	r2, r0
   1b4dc:	ldr	r3, [r7]
   1b4e0:	ldmib	r7, {r0, r1, r6}
   1b4e4:	ldr	r5, [r7, #16]
   1b4e8:	ldr	r7, [r7, #20]
   1b4ec:	stm	sp, {r0, r1, r6}
   1b4f0:	str	r5, [sp, #12]
   1b4f4:	str	r7, [sp, #16]
   1b4f8:	b	1b538 <__assert_fail@plt+0x9f34>
   1b4fc:	movw	r1, #4935	; 0x1347
   1b500:	mov	r0, #0
   1b504:	mov	r2, #5
   1b508:	movt	r1, #2
   1b50c:	bl	1137c <dcgettext@plt>
   1b510:	mov	r2, r0
   1b514:	ldr	r3, [r7]
   1b518:	ldmib	r7, {r0, r1, r6}
   1b51c:	ldr	r5, [r7, #16]
   1b520:	ldr	r4, [r7, #20]
   1b524:	ldr	r7, [r7, #24]
   1b528:	stm	sp, {r0, r1, r6}
   1b52c:	str	r5, [sp, #12]
   1b530:	str	r4, [sp, #16]
   1b534:	str	r7, [sp, #20]
   1b538:	mov	r0, r8
   1b53c:	mov	r1, #1
   1b540:	bl	1152c <__fprintf_chk@plt>
   1b544:	sub	sp, fp, #24
   1b548:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b54c:	movw	r1, #5027	; 0x13a3
   1b550:	movt	r1, #2
   1b554:	mov	r0, #0
   1b558:	mov	r2, #5
   1b55c:	bl	1137c <dcgettext@plt>
   1b560:	mov	ip, r0
   1b564:	ldr	r3, [r7]
   1b568:	ldr	r0, [r7, #4]
   1b56c:	ldr	r1, [r7, #8]
   1b570:	ldr	r6, [r7, #12]
   1b574:	ldr	r5, [r7, #16]
   1b578:	ldr	r4, [r7, #20]
   1b57c:	ldr	r2, [r7, #24]
   1b580:	ldr	lr, [r7, #28]
   1b584:	ldr	r7, [r7, #32]
   1b588:	stm	sp, {r0, r1, r6}
   1b58c:	str	r5, [sp, #12]
   1b590:	str	r4, [sp, #16]
   1b594:	str	r2, [sp, #20]
   1b598:	str	lr, [sp, #24]
   1b59c:	str	r7, [sp, #28]
   1b5a0:	b	1b5e8 <__assert_fail@plt+0x9fe4>
   1b5a4:	movw	r1, #4979	; 0x1373
   1b5a8:	mov	r0, #0
   1b5ac:	mov	r2, #5
   1b5b0:	movt	r1, #2
   1b5b4:	bl	1137c <dcgettext@plt>
   1b5b8:	mov	ip, r0
   1b5bc:	ldr	r3, [r7]
   1b5c0:	ldmib	r7, {r0, r1, r6}
   1b5c4:	ldr	r5, [r7, #16]
   1b5c8:	ldr	r4, [r7, #20]
   1b5cc:	ldr	r2, [r7, #24]
   1b5d0:	ldr	r7, [r7, #28]
   1b5d4:	stm	sp, {r0, r1, r6}
   1b5d8:	str	r5, [sp, #12]
   1b5dc:	str	r4, [sp, #16]
   1b5e0:	str	r2, [sp, #20]
   1b5e4:	str	r7, [sp, #24]
   1b5e8:	mov	r0, r8
   1b5ec:	mov	r1, #1
   1b5f0:	mov	r2, ip
   1b5f4:	bl	1152c <__fprintf_chk@plt>
   1b5f8:	sub	sp, fp, #24
   1b5fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b600:	push	{r4, sl, fp, lr}
   1b604:	add	fp, sp, #8
   1b608:	sub	sp, sp, #8
   1b60c:	ldr	ip, [fp, #8]
   1b610:	mov	lr, #0
   1b614:	ldr	r4, [ip, lr, lsl #2]
   1b618:	add	lr, lr, #1
   1b61c:	cmp	r4, #0
   1b620:	bne	1b614 <__assert_fail@plt+0xa010>
   1b624:	sub	r4, lr, #1
   1b628:	str	ip, [sp]
   1b62c:	str	r4, [sp, #4]
   1b630:	bl	1b2c4 <__assert_fail@plt+0x9cc0>
   1b634:	sub	sp, fp, #8
   1b638:	pop	{r4, sl, fp, pc}
   1b63c:	push	{fp, lr}
   1b640:	mov	fp, sp
   1b644:	sub	sp, sp, #48	; 0x30
   1b648:	ldr	ip, [fp, #8]
   1b64c:	ldr	lr, [ip]
   1b650:	cmp	lr, #0
   1b654:	str	lr, [sp, #8]
   1b658:	beq	1b6f4 <__assert_fail@plt+0xa0f0>
   1b65c:	ldr	lr, [ip, #4]
   1b660:	cmp	lr, #0
   1b664:	str	lr, [sp, #12]
   1b668:	beq	1b6fc <__assert_fail@plt+0xa0f8>
   1b66c:	ldr	lr, [ip, #8]
   1b670:	cmp	lr, #0
   1b674:	str	lr, [sp, #16]
   1b678:	beq	1b704 <__assert_fail@plt+0xa100>
   1b67c:	ldr	lr, [ip, #12]
   1b680:	cmp	lr, #0
   1b684:	str	lr, [sp, #20]
   1b688:	beq	1b70c <__assert_fail@plt+0xa108>
   1b68c:	ldr	lr, [ip, #16]
   1b690:	cmp	lr, #0
   1b694:	str	lr, [sp, #24]
   1b698:	beq	1b714 <__assert_fail@plt+0xa110>
   1b69c:	ldr	lr, [ip, #20]
   1b6a0:	cmp	lr, #0
   1b6a4:	str	lr, [sp, #28]
   1b6a8:	beq	1b71c <__assert_fail@plt+0xa118>
   1b6ac:	ldr	lr, [ip, #24]
   1b6b0:	cmp	lr, #0
   1b6b4:	str	lr, [sp, #32]
   1b6b8:	beq	1b724 <__assert_fail@plt+0xa120>
   1b6bc:	ldr	lr, [ip, #28]
   1b6c0:	cmp	lr, #0
   1b6c4:	str	lr, [sp, #36]	; 0x24
   1b6c8:	beq	1b72c <__assert_fail@plt+0xa128>
   1b6cc:	ldr	lr, [ip, #32]
   1b6d0:	cmp	lr, #0
   1b6d4:	str	lr, [sp, #40]	; 0x28
   1b6d8:	beq	1b734 <__assert_fail@plt+0xa130>
   1b6dc:	ldr	lr, [ip, #36]	; 0x24
   1b6e0:	mov	ip, #10
   1b6e4:	cmp	lr, #0
   1b6e8:	str	lr, [sp, #44]	; 0x2c
   1b6ec:	movweq	ip, #9
   1b6f0:	b	1b738 <__assert_fail@plt+0xa134>
   1b6f4:	mov	ip, #0
   1b6f8:	b	1b738 <__assert_fail@plt+0xa134>
   1b6fc:	mov	ip, #1
   1b700:	b	1b738 <__assert_fail@plt+0xa134>
   1b704:	mov	ip, #2
   1b708:	b	1b738 <__assert_fail@plt+0xa134>
   1b70c:	mov	ip, #3
   1b710:	b	1b738 <__assert_fail@plt+0xa134>
   1b714:	mov	ip, #4
   1b718:	b	1b738 <__assert_fail@plt+0xa134>
   1b71c:	mov	ip, #5
   1b720:	b	1b738 <__assert_fail@plt+0xa134>
   1b724:	mov	ip, #6
   1b728:	b	1b738 <__assert_fail@plt+0xa134>
   1b72c:	mov	ip, #7
   1b730:	b	1b738 <__assert_fail@plt+0xa134>
   1b734:	mov	ip, #8
   1b738:	add	lr, sp, #8
   1b73c:	str	ip, [sp, #4]
   1b740:	str	lr, [sp]
   1b744:	bl	1b2c4 <__assert_fail@plt+0x9cc0>
   1b748:	mov	sp, fp
   1b74c:	pop	{fp, pc}
   1b750:	push	{fp, lr}
   1b754:	mov	fp, sp
   1b758:	sub	sp, sp, #56	; 0x38
   1b75c:	add	ip, fp, #8
   1b760:	str	ip, [sp, #12]
   1b764:	ldr	lr, [fp, #8]
   1b768:	cmp	lr, #0
   1b76c:	str	lr, [sp, #16]
   1b770:	beq	1b80c <__assert_fail@plt+0xa208>
   1b774:	ldr	lr, [ip, #4]
   1b778:	cmp	lr, #0
   1b77c:	str	lr, [sp, #20]
   1b780:	beq	1b814 <__assert_fail@plt+0xa210>
   1b784:	ldr	lr, [ip, #8]
   1b788:	cmp	lr, #0
   1b78c:	str	lr, [sp, #24]
   1b790:	beq	1b81c <__assert_fail@plt+0xa218>
   1b794:	ldr	lr, [ip, #12]
   1b798:	cmp	lr, #0
   1b79c:	str	lr, [sp, #28]
   1b7a0:	beq	1b824 <__assert_fail@plt+0xa220>
   1b7a4:	ldr	lr, [ip, #16]
   1b7a8:	cmp	lr, #0
   1b7ac:	str	lr, [sp, #32]
   1b7b0:	beq	1b82c <__assert_fail@plt+0xa228>
   1b7b4:	ldr	lr, [ip, #20]
   1b7b8:	cmp	lr, #0
   1b7bc:	str	lr, [sp, #36]	; 0x24
   1b7c0:	beq	1b834 <__assert_fail@plt+0xa230>
   1b7c4:	ldr	lr, [ip, #24]
   1b7c8:	cmp	lr, #0
   1b7cc:	str	lr, [sp, #40]	; 0x28
   1b7d0:	beq	1b83c <__assert_fail@plt+0xa238>
   1b7d4:	ldr	lr, [ip, #28]
   1b7d8:	cmp	lr, #0
   1b7dc:	str	lr, [sp, #44]	; 0x2c
   1b7e0:	beq	1b844 <__assert_fail@plt+0xa240>
   1b7e4:	ldr	lr, [ip, #32]
   1b7e8:	cmp	lr, #0
   1b7ec:	str	lr, [sp, #48]	; 0x30
   1b7f0:	beq	1b84c <__assert_fail@plt+0xa248>
   1b7f4:	ldr	lr, [ip, #36]	; 0x24
   1b7f8:	mov	ip, #10
   1b7fc:	cmp	lr, #0
   1b800:	str	lr, [sp, #52]	; 0x34
   1b804:	movweq	ip, #9
   1b808:	b	1b850 <__assert_fail@plt+0xa24c>
   1b80c:	mov	ip, #0
   1b810:	b	1b850 <__assert_fail@plt+0xa24c>
   1b814:	mov	ip, #1
   1b818:	b	1b850 <__assert_fail@plt+0xa24c>
   1b81c:	mov	ip, #2
   1b820:	b	1b850 <__assert_fail@plt+0xa24c>
   1b824:	mov	ip, #3
   1b828:	b	1b850 <__assert_fail@plt+0xa24c>
   1b82c:	mov	ip, #4
   1b830:	b	1b850 <__assert_fail@plt+0xa24c>
   1b834:	mov	ip, #5
   1b838:	b	1b850 <__assert_fail@plt+0xa24c>
   1b83c:	mov	ip, #6
   1b840:	b	1b850 <__assert_fail@plt+0xa24c>
   1b844:	mov	ip, #7
   1b848:	b	1b850 <__assert_fail@plt+0xa24c>
   1b84c:	mov	ip, #8
   1b850:	add	lr, sp, #16
   1b854:	str	ip, [sp, #4]
   1b858:	str	lr, [sp]
   1b85c:	bl	1b2c4 <__assert_fail@plt+0x9cc0>
   1b860:	mov	sp, fp
   1b864:	pop	{fp, pc}
   1b868:	push	{fp, lr}
   1b86c:	mov	fp, sp
   1b870:	movw	r0, #8652	; 0x21cc
   1b874:	movt	r0, #3
   1b878:	ldr	r1, [r0]
   1b87c:	movw	r0, #3219	; 0xc93
   1b880:	movt	r0, #2
   1b884:	bl	112c8 <fputs_unlocked@plt>
   1b888:	movw	r1, #5139	; 0x1413
   1b88c:	mov	r0, #0
   1b890:	mov	r2, #5
   1b894:	movt	r1, #2
   1b898:	bl	1137c <dcgettext@plt>
   1b89c:	movw	r2, #5159	; 0x1427
   1b8a0:	mov	r1, r0
   1b8a4:	mov	r0, #1
   1b8a8:	movt	r2, #2
   1b8ac:	bl	11514 <__printf_chk@plt>
   1b8b0:	movw	r1, #5181	; 0x143d
   1b8b4:	mov	r0, #0
   1b8b8:	mov	r2, #5
   1b8bc:	movt	r1, #2
   1b8c0:	bl	1137c <dcgettext@plt>
   1b8c4:	movw	r2, #64139	; 0xfa8b
   1b8c8:	movw	r3, #3479	; 0xd97
   1b8cc:	mov	r1, r0
   1b8d0:	mov	r0, #1
   1b8d4:	movt	r2, #1
   1b8d8:	movt	r3, #2
   1b8dc:	bl	11514 <__printf_chk@plt>
   1b8e0:	movw	r1, #5201	; 0x1451
   1b8e4:	mov	r0, #0
   1b8e8:	mov	r2, #5
   1b8ec:	movt	r1, #2
   1b8f0:	bl	1137c <dcgettext@plt>
   1b8f4:	movw	r2, #5240	; 0x1478
   1b8f8:	mov	r1, r0
   1b8fc:	mov	r0, #1
   1b900:	movt	r2, #2
   1b904:	pop	{fp, lr}
   1b908:	b	11514 <__printf_chk@plt>
   1b90c:	push	{r4, r5, r6, sl, fp, lr}
   1b910:	add	fp, sp, #16
   1b914:	mov	r4, r2
   1b918:	mov	r5, r1
   1b91c:	mov	r6, r0
   1b920:	bl	1f650 <__assert_fail@plt+0xe04c>
   1b924:	cmp	r0, #0
   1b928:	popne	{r4, r5, r6, sl, fp, pc}
   1b92c:	cmp	r6, #0
   1b930:	beq	1b944 <__assert_fail@plt+0xa340>
   1b934:	cmp	r5, #0
   1b938:	cmpne	r4, #0
   1b93c:	bne	1b944 <__assert_fail@plt+0xa340>
   1b940:	pop	{r4, r5, r6, sl, fp, pc}
   1b944:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1b948:	push	{r4, r5, r6, sl, fp, lr}
   1b94c:	add	fp, sp, #16
   1b950:	mov	r4, r2
   1b954:	mov	r5, r1
   1b958:	mov	r6, r0
   1b95c:	bl	1f650 <__assert_fail@plt+0xe04c>
   1b960:	cmp	r0, #0
   1b964:	popne	{r4, r5, r6, sl, fp, pc}
   1b968:	cmp	r6, #0
   1b96c:	beq	1b980 <__assert_fail@plt+0xa37c>
   1b970:	cmp	r5, #0
   1b974:	cmpne	r4, #0
   1b978:	bne	1b980 <__assert_fail@plt+0xa37c>
   1b97c:	pop	{r4, r5, r6, sl, fp, pc}
   1b980:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1b984:	push	{fp, lr}
   1b988:	mov	fp, sp
   1b98c:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1b990:	cmp	r0, #0
   1b994:	popne	{fp, pc}
   1b998:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1b99c:	push	{fp, lr}
   1b9a0:	mov	fp, sp
   1b9a4:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1b9a8:	cmp	r0, #0
   1b9ac:	popne	{fp, pc}
   1b9b0:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1b9b4:	push	{fp, lr}
   1b9b8:	mov	fp, sp
   1b9bc:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1b9c0:	cmp	r0, #0
   1b9c4:	popne	{fp, pc}
   1b9c8:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1b9cc:	push	{r4, r5, fp, lr}
   1b9d0:	add	fp, sp, #8
   1b9d4:	mov	r4, r1
   1b9d8:	mov	r5, r0
   1b9dc:	bl	1f2fc <__assert_fail@plt+0xdcf8>
   1b9e0:	cmp	r0, #0
   1b9e4:	popne	{r4, r5, fp, pc}
   1b9e8:	cmp	r5, #0
   1b9ec:	beq	1b9fc <__assert_fail@plt+0xa3f8>
   1b9f0:	cmp	r4, #0
   1b9f4:	bne	1b9fc <__assert_fail@plt+0xa3f8>
   1b9f8:	pop	{r4, r5, fp, pc}
   1b9fc:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1ba00:	push	{fp, lr}
   1ba04:	mov	fp, sp
   1ba08:	cmp	r1, #0
   1ba0c:	orreq	r1, r1, #1
   1ba10:	bl	1f2fc <__assert_fail@plt+0xdcf8>
   1ba14:	cmp	r0, #0
   1ba18:	popne	{fp, pc}
   1ba1c:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1ba20:	push	{fp, lr}
   1ba24:	mov	fp, sp
   1ba28:	clz	r3, r2
   1ba2c:	lsr	ip, r3, #5
   1ba30:	clz	r3, r1
   1ba34:	lsr	r3, r3, #5
   1ba38:	orrs	r3, r3, ip
   1ba3c:	movwne	r1, #1
   1ba40:	movwne	r2, #1
   1ba44:	bl	1f650 <__assert_fail@plt+0xe04c>
   1ba48:	cmp	r0, #0
   1ba4c:	popne	{fp, pc}
   1ba50:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1ba54:	push	{fp, lr}
   1ba58:	mov	fp, sp
   1ba5c:	mov	r2, r1
   1ba60:	mov	r1, r0
   1ba64:	mov	r0, #0
   1ba68:	bl	1f650 <__assert_fail@plt+0xe04c>
   1ba6c:	cmp	r0, #0
   1ba70:	popne	{fp, pc}
   1ba74:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1ba78:	push	{fp, lr}
   1ba7c:	mov	fp, sp
   1ba80:	mov	r2, r1
   1ba84:	mov	r1, r0
   1ba88:	clz	r0, r2
   1ba8c:	clz	r3, r1
   1ba90:	lsr	r0, r0, #5
   1ba94:	lsr	r3, r3, #5
   1ba98:	orrs	r0, r3, r0
   1ba9c:	mov	r0, #0
   1baa0:	movwne	r1, #1
   1baa4:	movwne	r2, #1
   1baa8:	bl	1f650 <__assert_fail@plt+0xe04c>
   1baac:	cmp	r0, #0
   1bab0:	popne	{fp, pc}
   1bab4:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1bab8:	push	{r4, r5, r6, sl, fp, lr}
   1babc:	add	fp, sp, #16
   1bac0:	ldr	r5, [r1]
   1bac4:	mov	r4, r1
   1bac8:	mov	r6, r0
   1bacc:	cmp	r0, #0
   1bad0:	beq	1bae8 <__assert_fail@plt+0xa4e4>
   1bad4:	mov	r0, #1
   1bad8:	add	r0, r0, r5, lsr #1
   1badc:	adds	r5, r5, r0
   1bae0:	bcc	1baf0 <__assert_fail@plt+0xa4ec>
   1bae4:	b	1bb2c <__assert_fail@plt+0xa528>
   1bae8:	cmp	r5, #0
   1baec:	movweq	r5, #64	; 0x40
   1baf0:	mov	r0, r6
   1baf4:	mov	r1, r5
   1baf8:	mov	r2, #1
   1bafc:	bl	1f650 <__assert_fail@plt+0xe04c>
   1bb00:	cmp	r5, #0
   1bb04:	mov	r1, r5
   1bb08:	movwne	r1, #1
   1bb0c:	cmp	r0, #0
   1bb10:	bne	1bb24 <__assert_fail@plt+0xa520>
   1bb14:	clz	r2, r6
   1bb18:	lsr	r2, r2, #5
   1bb1c:	orrs	r1, r2, r1
   1bb20:	bne	1bb2c <__assert_fail@plt+0xa528>
   1bb24:	str	r5, [r4]
   1bb28:	pop	{r4, r5, r6, sl, fp, pc}
   1bb2c:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1bb30:	push	{r4, r5, r6, r7, fp, lr}
   1bb34:	add	fp, sp, #16
   1bb38:	ldr	r5, [r1]
   1bb3c:	mov	r6, r2
   1bb40:	mov	r4, r1
   1bb44:	mov	r7, r0
   1bb48:	cmp	r0, #0
   1bb4c:	beq	1bb64 <__assert_fail@plt+0xa560>
   1bb50:	mov	r0, #1
   1bb54:	add	r0, r0, r5, lsr #1
   1bb58:	adds	r5, r5, r0
   1bb5c:	bcc	1bb7c <__assert_fail@plt+0xa578>
   1bb60:	b	1bbb0 <__assert_fail@plt+0xa5ac>
   1bb64:	cmp	r5, #0
   1bb68:	bne	1bb7c <__assert_fail@plt+0xa578>
   1bb6c:	mov	r0, #64	; 0x40
   1bb70:	cmp	r6, #64	; 0x40
   1bb74:	udiv	r5, r0, r6
   1bb78:	addhi	r5, r5, #1
   1bb7c:	mov	r0, r7
   1bb80:	mov	r1, r5
   1bb84:	mov	r2, r6
   1bb88:	bl	1f650 <__assert_fail@plt+0xe04c>
   1bb8c:	cmp	r0, #0
   1bb90:	bne	1bba8 <__assert_fail@plt+0xa5a4>
   1bb94:	cmp	r7, #0
   1bb98:	beq	1bbb0 <__assert_fail@plt+0xa5ac>
   1bb9c:	cmp	r6, #0
   1bba0:	cmpne	r5, #0
   1bba4:	bne	1bbb0 <__assert_fail@plt+0xa5ac>
   1bba8:	str	r5, [r4]
   1bbac:	pop	{r4, r5, r6, r7, fp, pc}
   1bbb0:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1bbb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bbb8:	add	fp, sp, #24
   1bbbc:	mov	r8, r1
   1bbc0:	ldr	r1, [r1]
   1bbc4:	mov	r5, r0
   1bbc8:	add	r0, r1, r1, asr #1
   1bbcc:	cmp	r0, r1
   1bbd0:	mvnvs	r0, #-2147483648	; 0x80000000
   1bbd4:	cmp	r0, r3
   1bbd8:	mov	r7, r0
   1bbdc:	movgt	r7, r3
   1bbe0:	cmn	r3, #1
   1bbe4:	movle	r7, r0
   1bbe8:	ldr	r0, [fp, #8]
   1bbec:	cmn	r0, #1
   1bbf0:	ble	1bc18 <__assert_fail@plt+0xa614>
   1bbf4:	cmp	r0, #0
   1bbf8:	beq	1bc6c <__assert_fail@plt+0xa668>
   1bbfc:	cmn	r7, #1
   1bc00:	ble	1bc40 <__assert_fail@plt+0xa63c>
   1bc04:	mvn	r4, #-2147483648	; 0x80000000
   1bc08:	udiv	r6, r4, r0
   1bc0c:	cmp	r6, r7
   1bc10:	bge	1bc6c <__assert_fail@plt+0xa668>
   1bc14:	b	1bc7c <__assert_fail@plt+0xa678>
   1bc18:	cmn	r7, #1
   1bc1c:	ble	1bc5c <__assert_fail@plt+0xa658>
   1bc20:	cmn	r0, #1
   1bc24:	beq	1bc6c <__assert_fail@plt+0xa668>
   1bc28:	mov	r6, #-2147483648	; 0x80000000
   1bc2c:	mvn	r4, #-2147483648	; 0x80000000
   1bc30:	sdiv	r6, r6, r0
   1bc34:	cmp	r6, r7
   1bc38:	bge	1bc6c <__assert_fail@plt+0xa668>
   1bc3c:	b	1bc7c <__assert_fail@plt+0xa678>
   1bc40:	beq	1bc6c <__assert_fail@plt+0xa668>
   1bc44:	mov	r6, #-2147483648	; 0x80000000
   1bc48:	mvn	r4, #-2147483648	; 0x80000000
   1bc4c:	sdiv	r6, r6, r7
   1bc50:	cmp	r6, r0
   1bc54:	bge	1bc6c <__assert_fail@plt+0xa668>
   1bc58:	b	1bc7c <__assert_fail@plt+0xa678>
   1bc5c:	mvn	r4, #-2147483648	; 0x80000000
   1bc60:	sdiv	r6, r4, r0
   1bc64:	cmp	r7, r6
   1bc68:	blt	1bc7c <__assert_fail@plt+0xa678>
   1bc6c:	mul	r6, r7, r0
   1bc70:	mov	r4, #64	; 0x40
   1bc74:	cmp	r6, #63	; 0x3f
   1bc78:	bgt	1bc84 <__assert_fail@plt+0xa680>
   1bc7c:	sdiv	r7, r4, r0
   1bc80:	mul	r6, r7, r0
   1bc84:	cmp	r5, #0
   1bc88:	moveq	r4, #0
   1bc8c:	streq	r4, [r8]
   1bc90:	sub	r4, r7, r1
   1bc94:	cmp	r4, r2
   1bc98:	bge	1bd44 <__assert_fail@plt+0xa740>
   1bc9c:	add	r7, r1, r2
   1bca0:	mov	r6, #0
   1bca4:	mov	r2, #0
   1bca8:	cmp	r7, r3
   1bcac:	movwgt	r6, #1
   1bcb0:	cmn	r3, #1
   1bcb4:	movwgt	r2, #1
   1bcb8:	cmp	r7, r1
   1bcbc:	bvs	1bd78 <__assert_fail@plt+0xa774>
   1bcc0:	ands	r1, r2, r6
   1bcc4:	bne	1bd78 <__assert_fail@plt+0xa774>
   1bcc8:	cmn	r0, #1
   1bccc:	ble	1bcf4 <__assert_fail@plt+0xa6f0>
   1bcd0:	cmp	r0, #0
   1bcd4:	beq	1bd40 <__assert_fail@plt+0xa73c>
   1bcd8:	cmn	r7, #1
   1bcdc:	ble	1bd18 <__assert_fail@plt+0xa714>
   1bce0:	mvn	r1, #-2147483648	; 0x80000000
   1bce4:	udiv	r1, r1, r0
   1bce8:	cmp	r1, r7
   1bcec:	bge	1bd40 <__assert_fail@plt+0xa73c>
   1bcf0:	b	1bd78 <__assert_fail@plt+0xa774>
   1bcf4:	cmn	r7, #1
   1bcf8:	ble	1bd30 <__assert_fail@plt+0xa72c>
   1bcfc:	cmn	r0, #1
   1bd00:	beq	1bd40 <__assert_fail@plt+0xa73c>
   1bd04:	mov	r1, #-2147483648	; 0x80000000
   1bd08:	sdiv	r1, r1, r0
   1bd0c:	cmp	r1, r7
   1bd10:	bge	1bd40 <__assert_fail@plt+0xa73c>
   1bd14:	b	1bd78 <__assert_fail@plt+0xa774>
   1bd18:	beq	1bd40 <__assert_fail@plt+0xa73c>
   1bd1c:	mov	r1, #-2147483648	; 0x80000000
   1bd20:	sdiv	r1, r1, r7
   1bd24:	cmp	r1, r0
   1bd28:	bge	1bd40 <__assert_fail@plt+0xa73c>
   1bd2c:	b	1bd78 <__assert_fail@plt+0xa774>
   1bd30:	mvn	r1, #-2147483648	; 0x80000000
   1bd34:	sdiv	r1, r1, r0
   1bd38:	cmp	r7, r1
   1bd3c:	blt	1bd78 <__assert_fail@plt+0xa774>
   1bd40:	mul	r6, r7, r0
   1bd44:	mov	r0, r5
   1bd48:	mov	r1, r6
   1bd4c:	bl	1f2fc <__assert_fail@plt+0xdcf8>
   1bd50:	cmp	r6, #0
   1bd54:	movwne	r6, #1
   1bd58:	cmp	r0, #0
   1bd5c:	bne	1bd70 <__assert_fail@plt+0xa76c>
   1bd60:	clz	r1, r5
   1bd64:	lsr	r1, r1, #5
   1bd68:	orrs	r1, r1, r6
   1bd6c:	bne	1bd78 <__assert_fail@plt+0xa774>
   1bd70:	str	r7, [r8]
   1bd74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bd78:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1bd7c:	push	{fp, lr}
   1bd80:	mov	fp, sp
   1bd84:	mov	r1, #1
   1bd88:	bl	1f278 <__assert_fail@plt+0xdc74>
   1bd8c:	cmp	r0, #0
   1bd90:	popne	{fp, pc}
   1bd94:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1bd98:	push	{fp, lr}
   1bd9c:	mov	fp, sp
   1bda0:	bl	1f278 <__assert_fail@plt+0xdc74>
   1bda4:	cmp	r0, #0
   1bda8:	popne	{fp, pc}
   1bdac:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1bdb0:	push	{fp, lr}
   1bdb4:	mov	fp, sp
   1bdb8:	mov	r1, #1
   1bdbc:	bl	1f278 <__assert_fail@plt+0xdc74>
   1bdc0:	cmp	r0, #0
   1bdc4:	popne	{fp, pc}
   1bdc8:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1bdcc:	push	{fp, lr}
   1bdd0:	mov	fp, sp
   1bdd4:	bl	1f278 <__assert_fail@plt+0xdc74>
   1bdd8:	cmp	r0, #0
   1bddc:	popne	{fp, pc}
   1bde0:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1bde4:	push	{r4, r5, fp, lr}
   1bde8:	add	fp, sp, #8
   1bdec:	mov	r5, r0
   1bdf0:	mov	r0, r1
   1bdf4:	mov	r4, r1
   1bdf8:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1bdfc:	cmp	r0, #0
   1be00:	beq	1be14 <__assert_fail@plt+0xa810>
   1be04:	mov	r1, r5
   1be08:	mov	r2, r4
   1be0c:	pop	{r4, r5, fp, lr}
   1be10:	b	11358 <memcpy@plt>
   1be14:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1be18:	push	{r4, r5, fp, lr}
   1be1c:	add	fp, sp, #8
   1be20:	mov	r5, r0
   1be24:	mov	r0, r1
   1be28:	mov	r4, r1
   1be2c:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1be30:	cmp	r0, #0
   1be34:	beq	1be48 <__assert_fail@plt+0xa844>
   1be38:	mov	r1, r5
   1be3c:	mov	r2, r4
   1be40:	pop	{r4, r5, fp, lr}
   1be44:	b	11358 <memcpy@plt>
   1be48:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1be4c:	push	{r4, r5, fp, lr}
   1be50:	add	fp, sp, #8
   1be54:	mov	r5, r0
   1be58:	add	r0, r1, #1
   1be5c:	mov	r4, r1
   1be60:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1be64:	cmp	r0, #0
   1be68:	beq	1be84 <__assert_fail@plt+0xa880>
   1be6c:	mov	r1, #0
   1be70:	mov	r2, r4
   1be74:	strb	r1, [r0, r4]
   1be78:	mov	r1, r5
   1be7c:	pop	{r4, r5, fp, lr}
   1be80:	b	11358 <memcpy@plt>
   1be84:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1be88:	push	{r4, r5, fp, lr}
   1be8c:	add	fp, sp, #8
   1be90:	mov	r4, r0
   1be94:	bl	114b4 <strlen@plt>
   1be98:	add	r5, r0, #1
   1be9c:	mov	r0, r5
   1bea0:	bl	1f2cc <__assert_fail@plt+0xdcc8>
   1bea4:	cmp	r0, #0
   1bea8:	beq	1bebc <__assert_fail@plt+0xa8b8>
   1beac:	mov	r1, r4
   1beb0:	mov	r2, r5
   1beb4:	pop	{r4, r5, fp, lr}
   1beb8:	b	11358 <memcpy@plt>
   1bebc:	bl	1bec0 <__assert_fail@plt+0xa8bc>
   1bec0:	push	{fp, lr}
   1bec4:	mov	fp, sp
   1bec8:	movw	r0, #8556	; 0x216c
   1becc:	movw	r1, #5316	; 0x14c4
   1bed0:	mov	r2, #5
   1bed4:	movt	r0, #3
   1bed8:	movt	r1, #2
   1bedc:	ldr	r4, [r0]
   1bee0:	mov	r0, #0
   1bee4:	bl	1137c <dcgettext@plt>
   1bee8:	movw	r2, #4247	; 0x1097
   1beec:	mov	r3, r0
   1bef0:	mov	r0, r4
   1bef4:	mov	r1, #0
   1bef8:	movt	r2, #2
   1befc:	bl	11418 <error@plt>
   1bf00:	bl	115ec <abort@plt>
   1bf04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bf08:	add	fp, sp, #24
   1bf0c:	sub	sp, sp, #16
   1bf10:	mov	r8, r0
   1bf14:	ldr	r0, [fp, #16]
   1bf18:	mov	r7, r3
   1bf1c:	mov	r4, r2
   1bf20:	mov	r2, r1
   1bf24:	add	r3, sp, #8
   1bf28:	mov	r1, #0
   1bf2c:	str	r0, [sp]
   1bf30:	mov	r0, r8
   1bf34:	bl	1c014 <__assert_fail@plt+0xaa10>
   1bf38:	cmp	r0, #0
   1bf3c:	bne	1bfe8 <__assert_fail@plt+0xa9e4>
   1bf40:	ldr	r6, [sp, #8]
   1bf44:	ldr	r5, [sp, #12]
   1bf48:	subs	r0, r6, r4
   1bf4c:	sbcs	r0, r5, r7
   1bf50:	blt	1bf74 <__assert_fail@plt+0xa970>
   1bf54:	ldr	r1, [fp, #8]
   1bf58:	ldr	r0, [fp, #12]
   1bf5c:	subs	r1, r1, r6
   1bf60:	sbcs	r0, r0, r5
   1bf64:	movge	r0, r6
   1bf68:	movge	r1, r5
   1bf6c:	subge	sp, fp, #24
   1bf70:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bf74:	subs	r0, r6, #1073741824	; 0x40000000
   1bf78:	sbcs	r0, r5, #0
   1bf7c:	blt	1bf8c <__assert_fail@plt+0xa988>
   1bf80:	bl	114e4 <__errno_location@plt>
   1bf84:	mov	r1, #75	; 0x4b
   1bf88:	b	1bfa8 <__assert_fail@plt+0xa9a4>
   1bf8c:	bl	114e4 <__errno_location@plt>
   1bf90:	mvn	r2, #1073741824	; 0x40000000
   1bf94:	mvn	r1, #0
   1bf98:	subs	r2, r2, r6
   1bf9c:	sbcs	r1, r1, r5
   1bfa0:	movlt	r1, #34	; 0x22
   1bfa4:	movge	r1, #75	; 0x4b
   1bfa8:	str	r1, [r0]
   1bfac:	ldr	r6, [r0]
   1bfb0:	ldr	r4, [fp, #24]
   1bfb4:	ldr	r5, [fp, #20]
   1bfb8:	mov	r0, r8
   1bfbc:	bl	1aa68 <__assert_fail@plt+0x9464>
   1bfc0:	subs	r1, r6, #22
   1bfc4:	movw	r2, #4243	; 0x1093
   1bfc8:	str	r0, [sp]
   1bfcc:	mov	r3, r5
   1bfd0:	movne	r1, r6
   1bfd4:	cmp	r4, #0
   1bfd8:	movt	r2, #2
   1bfdc:	movweq	r4, #1
   1bfe0:	mov	r0, r4
   1bfe4:	bl	11418 <error@plt>
   1bfe8:	cmp	r0, #1
   1bfec:	beq	1bf80 <__assert_fail@plt+0xa97c>
   1bff0:	cmp	r0, #3
   1bff4:	bne	1c004 <__assert_fail@plt+0xaa00>
   1bff8:	bl	114e4 <__errno_location@plt>
   1bffc:	mov	r1, #0
   1c000:	b	1bfa8 <__assert_fail@plt+0xa9a4>
   1c004:	bl	114e4 <__errno_location@plt>
   1c008:	b	1bfac <__assert_fail@plt+0xa9a8>
   1c00c:	mov	r1, #10
   1c010:	b	1bf04 <__assert_fail@plt+0xa900>
   1c014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c018:	add	fp, sp, #28
   1c01c:	sub	sp, sp, #36	; 0x24
   1c020:	cmp	r2, #37	; 0x25
   1c024:	bcs	1d954 <__assert_fail@plt+0xc350>
   1c028:	ldr	r8, [fp, #8]
   1c02c:	mov	r9, r3
   1c030:	mov	r6, r2
   1c034:	mov	r7, r1
   1c038:	mov	r4, r0
   1c03c:	bl	114e4 <__errno_location@plt>
   1c040:	cmp	r7, #0
   1c044:	add	sl, sp, #32
   1c048:	mov	r5, r0
   1c04c:	mov	r0, #0
   1c050:	mov	r2, r6
   1c054:	mov	r3, #0
   1c058:	movne	sl, r7
   1c05c:	str	r0, [r5]
   1c060:	mov	r0, r4
   1c064:	mov	r1, sl
   1c068:	bl	115b0 <__strtoll_internal@plt>
   1c06c:	mov	r7, r1
   1c070:	ldr	r1, [sl]
   1c074:	cmp	r1, r4
   1c078:	beq	1c0b4 <__assert_fail@plt+0xaab0>
   1c07c:	mov	r6, r0
   1c080:	ldr	r0, [r5]
   1c084:	cmp	r0, #0
   1c088:	beq	1c240 <__assert_fail@plt+0xac3c>
   1c08c:	mov	r5, #4
   1c090:	cmp	r0, #34	; 0x22
   1c094:	bne	1c498 <__assert_fail@plt+0xae94>
   1c098:	mov	r5, #1
   1c09c:	cmp	r8, #0
   1c0a0:	beq	1c24c <__assert_fail@plt+0xac48>
   1c0a4:	ldrb	r4, [r1]
   1c0a8:	cmp	r4, #0
   1c0ac:	bne	1c0fc <__assert_fail@plt+0xaaf8>
   1c0b0:	b	1c24c <__assert_fail@plt+0xac48>
   1c0b4:	mov	r5, #4
   1c0b8:	cmp	r8, #0
   1c0bc:	beq	1c498 <__assert_fail@plt+0xae94>
   1c0c0:	mov	r6, r1
   1c0c4:	ldrb	r1, [r4]
   1c0c8:	cmp	r1, #0
   1c0cc:	beq	1c498 <__assert_fail@plt+0xae94>
   1c0d0:	mov	r0, r8
   1c0d4:	bl	114c0 <strchr@plt>
   1c0d8:	cmp	r0, #0
   1c0dc:	beq	1c498 <__assert_fail@plt+0xae94>
   1c0e0:	mov	r1, r6
   1c0e4:	mov	r5, #0
   1c0e8:	mov	r6, #1
   1c0ec:	mov	r7, #0
   1c0f0:	ldrb	r4, [r1]
   1c0f4:	cmp	r4, #0
   1c0f8:	beq	1c24c <__assert_fail@plt+0xac48>
   1c0fc:	str	r1, [sp, #20]
   1c100:	mov	r0, r8
   1c104:	mov	r1, r4
   1c108:	bl	114c0 <strchr@plt>
   1c10c:	cmp	r0, #0
   1c110:	beq	1c490 <__assert_fail@plt+0xae8c>
   1c114:	sub	r0, r4, #69	; 0x45
   1c118:	mov	r1, #1
   1c11c:	mov	r3, #0
   1c120:	mov	r2, #1024	; 0x400
   1c124:	cmp	r0, #47	; 0x2f
   1c128:	str	r1, [sp, #16]
   1c12c:	bhi	1c264 <__assert_fail@plt+0xac60>
   1c130:	add	r1, pc, #0
   1c134:	ldr	pc, [r1, r0, lsl #2]
   1c138:	strdeq	ip, [r1], -r8
   1c13c:	andeq	ip, r1, r4, ror #4
   1c140:	strdeq	ip, [r1], -r8
   1c144:	andeq	ip, r1, r4, ror #4
   1c148:	andeq	ip, r1, r4, ror #4
   1c14c:	andeq	ip, r1, r4, ror #4
   1c150:	strdeq	ip, [r1], -r8
   1c154:	andeq	ip, r1, r4, ror #4
   1c158:	strdeq	ip, [r1], -r8
   1c15c:	andeq	ip, r1, r4, ror #4
   1c160:	andeq	ip, r1, r4, ror #4
   1c164:	strdeq	ip, [r1], -r8
   1c168:	andeq	ip, r1, r4, ror #4
   1c16c:	andeq	ip, r1, r4, ror #4
   1c170:	andeq	ip, r1, r4, ror #4
   1c174:	strdeq	ip, [r1], -r8
   1c178:	andeq	ip, r1, r4, ror #4
   1c17c:	andeq	ip, r1, r4, ror #4
   1c180:	andeq	ip, r1, r4, ror #4
   1c184:	andeq	ip, r1, r4, ror #4
   1c188:	strdeq	ip, [r1], -r8
   1c18c:	strdeq	ip, [r1], -r8
   1c190:	andeq	ip, r1, r4, ror #4
   1c194:	andeq	ip, r1, r4, ror #4
   1c198:	andeq	ip, r1, r4, ror #4
   1c19c:	andeq	ip, r1, r4, ror #4
   1c1a0:	andeq	ip, r1, r4, ror #4
   1c1a4:	andeq	ip, r1, r4, ror #4
   1c1a8:	andeq	ip, r1, r4, ror #4
   1c1ac:	andeq	ip, r1, r4, ror #4
   1c1b0:	andeq	ip, r1, r4, ror #4
   1c1b4:	andeq	ip, r1, r4, ror #4
   1c1b8:	andeq	ip, r1, r4, ror #4
   1c1bc:	andeq	ip, r1, r4, ror #4
   1c1c0:	strdeq	ip, [r1], -r8
   1c1c4:	andeq	ip, r1, r4, ror #4
   1c1c8:	andeq	ip, r1, r4, ror #4
   1c1cc:	andeq	ip, r1, r4, ror #4
   1c1d0:	strdeq	ip, [r1], -r8
   1c1d4:	andeq	ip, r1, r4, ror #4
   1c1d8:	strdeq	ip, [r1], -r8
   1c1dc:	andeq	ip, r1, r4, ror #4
   1c1e0:	andeq	ip, r1, r4, ror #4
   1c1e4:	andeq	ip, r1, r4, ror #4
   1c1e8:	andeq	ip, r1, r4, ror #4
   1c1ec:	andeq	ip, r1, r4, ror #4
   1c1f0:	andeq	ip, r1, r4, ror #4
   1c1f4:	strdeq	ip, [r1], -r8
   1c1f8:	mov	r0, r8
   1c1fc:	mov	r1, #48	; 0x30
   1c200:	bl	114c0 <strchr@plt>
   1c204:	cmp	r0, #0
   1c208:	beq	1c25c <__assert_fail@plt+0xac58>
   1c20c:	ldr	r1, [sp, #20]
   1c210:	ldrb	r0, [r1, #1]
   1c214:	cmp	r0, #66	; 0x42
   1c218:	cmpne	r0, #68	; 0x44
   1c21c:	bne	1c398 <__assert_fail@plt+0xad94>
   1c220:	mov	r0, #2
   1c224:	mov	r2, #1000	; 0x3e8
   1c228:	mov	r3, #0
   1c22c:	str	r0, [sp, #16]
   1c230:	sub	r0, r4, #66	; 0x42
   1c234:	cmp	r0, #53	; 0x35
   1c238:	bls	1c270 <__assert_fail@plt+0xac6c>
   1c23c:	b	1c490 <__assert_fail@plt+0xae8c>
   1c240:	mov	r5, r0
   1c244:	cmp	r8, #0
   1c248:	bne	1c0a4 <__assert_fail@plt+0xaaa0>
   1c24c:	strd	r6, [r9]
   1c250:	mov	r0, r5
   1c254:	sub	sp, fp, #28
   1c258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c25c:	mov	r3, #0
   1c260:	mov	r2, #1024	; 0x400
   1c264:	sub	r0, r4, #66	; 0x42
   1c268:	cmp	r0, #53	; 0x35
   1c26c:	bhi	1c490 <__assert_fail@plt+0xae8c>
   1c270:	add	r1, pc, #8
   1c274:	str	r3, [sp, #28]
   1c278:	str	r2, [sp, #24]
   1c27c:	ldr	pc, [r1, r0, lsl #2]
   1c280:	andeq	ip, r1, r8, ror #9
   1c284:	muleq	r1, r0, r4
   1c288:	muleq	r1, r0, r4
   1c28c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c290:	muleq	r1, r0, r4
   1c294:	andeq	ip, r1, r8, asr r3
   1c298:	muleq	r1, r0, r4
   1c29c:	muleq	r1, r0, r4
   1c2a0:	muleq	r1, r0, r4
   1c2a4:	andeq	ip, r1, ip, asr #7
   1c2a8:	muleq	r1, r0, r4
   1c2ac:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c2b0:	muleq	r1, r0, r4
   1c2b4:	muleq	r1, r0, r4
   1c2b8:	andeq	ip, r1, r0, asr #10
   1c2bc:	muleq	r1, r0, r4
   1c2c0:	muleq	r1, r0, r4
   1c2c4:	muleq	r1, r0, r4
   1c2c8:	andeq	ip, r1, ip, lsr r4
   1c2cc:	muleq	r1, r0, r4
   1c2d0:	muleq	r1, r0, r4
   1c2d4:	muleq	r1, r0, r4
   1c2d8:	muleq	r1, r0, r4
   1c2dc:	andeq	ip, r1, r4, lsl #11
   1c2e0:	andeq	ip, r1, r4, lsr #9
   1c2e4:	muleq	r1, r0, r4
   1c2e8:	muleq	r1, r0, r4
   1c2ec:	muleq	r1, r0, r4
   1c2f0:	muleq	r1, r0, r4
   1c2f4:	muleq	r1, r0, r4
   1c2f8:	muleq	r1, r0, r4
   1c2fc:	muleq	r1, r0, r4
   1c300:	andeq	ip, r1, r8, asr #11
   1c304:	andeq	sp, r1, r0, asr #10
   1c308:	muleq	r1, r0, r4
   1c30c:	muleq	r1, r0, r4
   1c310:	muleq	r1, r0, r4
   1c314:	andeq	ip, r1, r8, asr r3
   1c318:	muleq	r1, r0, r4
   1c31c:	muleq	r1, r0, r4
   1c320:	muleq	r1, r0, r4
   1c324:	andeq	ip, r1, ip, asr #7
   1c328:	muleq	r1, r0, r4
   1c32c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c330:	muleq	r1, r0, r4
   1c334:	muleq	r1, r0, r4
   1c338:	muleq	r1, r0, r4
   1c33c:	muleq	r1, r0, r4
   1c340:	muleq	r1, r0, r4
   1c344:	muleq	r1, r0, r4
   1c348:	andeq	ip, r1, ip, lsr r4
   1c34c:	muleq	r1, r0, r4
   1c350:	muleq	r1, r0, r4
   1c354:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c358:	cmn	r7, #1
   1c35c:	str	r9, [sp, #12]
   1c360:	ble	1c5f0 <__assert_fail@plt+0xafec>
   1c364:	ldr	r3, [sp, #28]
   1c368:	mvn	r0, #0
   1c36c:	mvn	r1, #-2147483648	; 0x80000000
   1c370:	mvn	r8, #0
   1c374:	mvn	r9, #-2147483648	; 0x80000000
   1c378:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c37c:	ldr	r2, [sp, #24]
   1c380:	ldr	r3, [sp, #28]
   1c384:	subs	r0, r0, r6
   1c388:	mov	r4, #1
   1c38c:	sbcs	r0, r1, r7
   1c390:	bge	1c630 <__assert_fail@plt+0xb02c>
   1c394:	b	1c648 <__assert_fail@plt+0xb044>
   1c398:	cmp	r0, #105	; 0x69
   1c39c:	mov	r3, #0
   1c3a0:	bne	1c480 <__assert_fail@plt+0xae7c>
   1c3a4:	ldrb	r0, [r1, #2]
   1c3a8:	mov	r1, #1
   1c3ac:	mov	r2, #1024	; 0x400
   1c3b0:	cmp	r0, #66	; 0x42
   1c3b4:	movweq	r1, #3
   1c3b8:	str	r1, [sp, #16]
   1c3bc:	sub	r0, r4, #66	; 0x42
   1c3c0:	cmp	r0, #53	; 0x35
   1c3c4:	bls	1c270 <__assert_fail@plt+0xac6c>
   1c3c8:	b	1c490 <__assert_fail@plt+0xae8c>
   1c3cc:	cmn	r7, #1
   1c3d0:	ble	1c684 <__assert_fail@plt+0xb080>
   1c3d4:	ldr	r3, [sp, #28]
   1c3d8:	mvn	r0, #0
   1c3dc:	mvn	r1, #-2147483648	; 0x80000000
   1c3e0:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c3e4:	ldr	r2, [sp, #24]
   1c3e8:	ldr	r3, [sp, #28]
   1c3ec:	subs	r0, r0, r6
   1c3f0:	sbcs	r0, r1, r7
   1c3f4:	bge	1c6b8 <__assert_fail@plt+0xb0b4>
   1c3f8:	b	1cdc8 <__assert_fail@plt+0xb7c4>
   1c3fc:	cmn	r7, #1
   1c400:	str	r9, [sp, #12]
   1c404:	ble	1c6cc <__assert_fail@plt+0xb0c8>
   1c408:	ldr	r3, [sp, #28]
   1c40c:	mvn	r0, #0
   1c410:	mvn	r1, #-2147483648	; 0x80000000
   1c414:	mvn	r8, #0
   1c418:	mvn	r9, #-2147483648	; 0x80000000
   1c41c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c420:	ldr	r2, [sp, #24]
   1c424:	ldr	r3, [sp, #28]
   1c428:	subs	r0, r0, r6
   1c42c:	mov	r4, #1
   1c430:	sbcs	r0, r1, r7
   1c434:	bge	1c70c <__assert_fail@plt+0xb108>
   1c438:	b	1c724 <__assert_fail@plt+0xb120>
   1c43c:	cmn	r7, #1
   1c440:	str	r9, [sp, #12]
   1c444:	ble	1c75c <__assert_fail@plt+0xb158>
   1c448:	ldr	r3, [sp, #28]
   1c44c:	mvn	r0, #0
   1c450:	mvn	r1, #-2147483648	; 0x80000000
   1c454:	mvn	r9, #-2147483648	; 0x80000000
   1c458:	str	r0, [sp, #8]
   1c45c:	mvn	r0, #0
   1c460:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c464:	ldr	r2, [sp, #24]
   1c468:	ldr	r3, [sp, #28]
   1c46c:	subs	r0, r0, r6
   1c470:	mov	r4, #1
   1c474:	sbcs	r0, r1, r7
   1c478:	bge	1c7a0 <__assert_fail@plt+0xb19c>
   1c47c:	b	1c7bc <__assert_fail@plt+0xb1b8>
   1c480:	mov	r2, #1024	; 0x400
   1c484:	sub	r0, r4, #66	; 0x42
   1c488:	cmp	r0, #53	; 0x35
   1c48c:	bls	1c270 <__assert_fail@plt+0xac6c>
   1c490:	orr	r5, r5, #2
   1c494:	strd	r6, [r9]
   1c498:	mov	r0, r5
   1c49c:	sub	sp, fp, #28
   1c4a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4a4:	cmp	r7, #0
   1c4a8:	str	r9, [sp, #12]
   1c4ac:	bmi	1caa4 <__assert_fail@plt+0xb4a0>
   1c4b0:	ldr	r3, [sp, #28]
   1c4b4:	mvn	r0, #0
   1c4b8:	mvn	r1, #-2147483648	; 0x80000000
   1c4bc:	mvn	r9, #-2147483648	; 0x80000000
   1c4c0:	str	r0, [sp, #8]
   1c4c4:	mvn	r0, #0
   1c4c8:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c4cc:	ldr	r2, [sp, #24]
   1c4d0:	ldr	r3, [sp, #28]
   1c4d4:	subs	r0, r0, r6
   1c4d8:	mov	r4, #1
   1c4dc:	sbcs	r0, r1, r7
   1c4e0:	bge	1cae8 <__assert_fail@plt+0xb4e4>
   1c4e4:	b	1cb04 <__assert_fail@plt+0xb500>
   1c4e8:	cmn	r7, #1
   1c4ec:	ble	1cb40 <__assert_fail@plt+0xb53c>
   1c4f0:	cmp	r7, #2097152	; 0x200000
   1c4f4:	blt	1cb70 <__assert_fail@plt+0xb56c>
   1c4f8:	b	1cdc8 <__assert_fail@plt+0xb7c4>
   1c4fc:	cmp	r7, #0
   1c500:	str	r9, [sp, #12]
   1c504:	bmi	1cb80 <__assert_fail@plt+0xb57c>
   1c508:	ldr	r3, [sp, #28]
   1c50c:	mvn	r0, #0
   1c510:	mvn	r1, #-2147483648	; 0x80000000
   1c514:	mvn	r9, #-2147483648	; 0x80000000
   1c518:	str	r0, [sp, #8]
   1c51c:	mvn	r0, #0
   1c520:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c524:	ldr	r2, [sp, #24]
   1c528:	ldr	r3, [sp, #28]
   1c52c:	subs	r0, r0, r6
   1c530:	mov	r4, #1
   1c534:	sbcs	r0, r1, r7
   1c538:	bge	1cbc4 <__assert_fail@plt+0xb5c0>
   1c53c:	b	1cbe0 <__assert_fail@plt+0xb5dc>
   1c540:	cmp	r7, #0
   1c544:	str	r9, [sp, #12]
   1c548:	bmi	1cc1c <__assert_fail@plt+0xb618>
   1c54c:	ldr	r3, [sp, #28]
   1c550:	mvn	r0, #0
   1c554:	mvn	r1, #-2147483648	; 0x80000000
   1c558:	mvn	r8, #-2147483648	; 0x80000000
   1c55c:	str	r0, [sp, #8]
   1c560:	mvn	r0, #0
   1c564:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c568:	ldr	r2, [sp, #24]
   1c56c:	ldr	r3, [sp, #28]
   1c570:	subs	r0, r0, r6
   1c574:	mov	r4, #1
   1c578:	sbcs	r0, r1, r7
   1c57c:	bge	1cc60 <__assert_fail@plt+0xb65c>
   1c580:	b	1cc7c <__assert_fail@plt+0xb678>
   1c584:	cmp	r7, #0
   1c588:	str	r9, [sp, #12]
   1c58c:	bmi	1ccb8 <__assert_fail@plt+0xb6b4>
   1c590:	ldr	r3, [sp, #28]
   1c594:	mvn	r0, #0
   1c598:	mvn	r1, #-2147483648	; 0x80000000
   1c59c:	mvn	r9, #-2147483648	; 0x80000000
   1c5a0:	str	r0, [sp, #8]
   1c5a4:	mvn	r0, #0
   1c5a8:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c5ac:	ldr	r2, [sp, #24]
   1c5b0:	ldr	r3, [sp, #28]
   1c5b4:	subs	r0, r0, r6
   1c5b8:	mov	r4, #1
   1c5bc:	sbcs	r0, r1, r7
   1c5c0:	bge	1ccfc <__assert_fail@plt+0xb6f8>
   1c5c4:	b	1cd18 <__assert_fail@plt+0xb714>
   1c5c8:	cmn	r7, #1
   1c5cc:	ble	1cd58 <__assert_fail@plt+0xb754>
   1c5d0:	cmp	r7, #4194304	; 0x400000
   1c5d4:	blt	1cd88 <__assert_fail@plt+0xb784>
   1c5d8:	b	1cdc8 <__assert_fail@plt+0xb7c4>
   1c5dc:	cmn	r7, #1
   1c5e0:	ble	1cd98 <__assert_fail@plt+0xb794>
   1c5e4:	cmp	r7, #1073741824	; 0x40000000
   1c5e8:	bge	1cdc8 <__assert_fail@plt+0xb7c4>
   1c5ec:	b	1cde8 <__assert_fail@plt+0xb7e4>
   1c5f0:	and	r0, r6, r7
   1c5f4:	cmn	r0, #1
   1c5f8:	beq	1c630 <__assert_fail@plt+0xb02c>
   1c5fc:	mov	r0, #0
   1c600:	mov	r1, #-2147483648	; 0x80000000
   1c604:	mov	r2, r6
   1c608:	mov	r3, r7
   1c60c:	mov	r8, #0
   1c610:	mov	r9, #-2147483648	; 0x80000000
   1c614:	bl	1f68c <__assert_fail@plt+0xe088>
   1c618:	ldr	r2, [sp, #24]
   1c61c:	ldr	r3, [sp, #28]
   1c620:	mov	r4, #1
   1c624:	subs	r0, r0, r2
   1c628:	sbcs	r0, r1, r3
   1c62c:	blt	1c7f8 <__assert_fail@plt+0xb1f4>
   1c630:	umull	r8, r0, r6, r2
   1c634:	mov	r4, #0
   1c638:	mla	r0, r6, r3, r0
   1c63c:	mla	r9, r7, r2, r0
   1c640:	cmp	r9, #0
   1c644:	bmi	1c7f8 <__assert_fail@plt+0xb1f4>
   1c648:	ldr	r3, [sp, #28]
   1c64c:	mvn	r0, #-2147483648	; 0x80000000
   1c650:	mvn	r1, #-2147483648	; 0x80000000
   1c654:	mov	r6, r4
   1c658:	mvn	r4, #0
   1c65c:	str	r0, [sp, #8]
   1c660:	mvn	r0, #0
   1c664:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c668:	ldr	r2, [sp, #24]
   1c66c:	ldr	r3, [sp, #28]
   1c670:	subs	r0, r0, r8
   1c674:	mov	r7, #1
   1c678:	sbcs	r0, r1, r9
   1c67c:	bge	1c834 <__assert_fail@plt+0xb230>
   1c680:	b	1c850 <__assert_fail@plt+0xb24c>
   1c684:	and	r0, r6, r7
   1c688:	cmn	r0, #1
   1c68c:	beq	1c6b8 <__assert_fail@plt+0xb0b4>
   1c690:	mov	r0, #0
   1c694:	mov	r1, #-2147483648	; 0x80000000
   1c698:	mov	r2, r6
   1c69c:	mov	r3, r7
   1c6a0:	bl	1f68c <__assert_fail@plt+0xe088>
   1c6a4:	ldr	r2, [sp, #24]
   1c6a8:	ldr	r3, [sp, #28]
   1c6ac:	subs	r0, r0, r2
   1c6b0:	sbcs	r0, r1, r3
   1c6b4:	blt	1cdc8 <__assert_fail@plt+0xb7c4>
   1c6b8:	umull	r0, r1, r6, r2
   1c6bc:	mla	r1, r6, r3, r1
   1c6c0:	mla	r7, r7, r2, r1
   1c6c4:	mov	r6, r0
   1c6c8:	b	1d540 <__assert_fail@plt+0xbf3c>
   1c6cc:	and	r0, r6, r7
   1c6d0:	cmn	r0, #1
   1c6d4:	beq	1c70c <__assert_fail@plt+0xb108>
   1c6d8:	mov	r0, #0
   1c6dc:	mov	r1, #-2147483648	; 0x80000000
   1c6e0:	mov	r2, r6
   1c6e4:	mov	r3, r7
   1c6e8:	mov	r8, #0
   1c6ec:	mov	r9, #-2147483648	; 0x80000000
   1c6f0:	bl	1f68c <__assert_fail@plt+0xe088>
   1c6f4:	ldr	r2, [sp, #24]
   1c6f8:	ldr	r3, [sp, #28]
   1c6fc:	mov	r4, #1
   1c700:	subs	r0, r0, r2
   1c704:	sbcs	r0, r1, r3
   1c708:	blt	1c8e4 <__assert_fail@plt+0xb2e0>
   1c70c:	umull	r8, r0, r6, r2
   1c710:	mov	r4, #0
   1c714:	mla	r0, r6, r3, r0
   1c718:	mla	r9, r7, r2, r0
   1c71c:	cmp	r9, #0
   1c720:	bmi	1c8e4 <__assert_fail@plt+0xb2e0>
   1c724:	ldr	r3, [sp, #28]
   1c728:	mvn	r0, #0
   1c72c:	mvn	r1, #-2147483648	; 0x80000000
   1c730:	str	r4, [sp, #8]
   1c734:	mvn	r6, #0
   1c738:	mvn	r7, #-2147483648	; 0x80000000
   1c73c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c740:	ldr	r4, [sp, #24]
   1c744:	ldr	r3, [sp, #28]
   1c748:	subs	r0, r0, r8
   1c74c:	mov	r2, #1
   1c750:	sbcs	r0, r1, r9
   1c754:	bge	1c91c <__assert_fail@plt+0xb318>
   1c758:	b	1ca54 <__assert_fail@plt+0xb450>
   1c75c:	and	r0, r6, r7
   1c760:	cmn	r0, #1
   1c764:	beq	1c7a0 <__assert_fail@plt+0xb19c>
   1c768:	mov	r0, #0
   1c76c:	mov	r1, #-2147483648	; 0x80000000
   1c770:	mov	r2, r6
   1c774:	mov	r3, r7
   1c778:	bl	1f68c <__assert_fail@plt+0xe088>
   1c77c:	ldr	r2, [sp, #24]
   1c780:	ldr	r3, [sp, #28]
   1c784:	mov	r4, #1
   1c788:	mov	r9, #-2147483648	; 0x80000000
   1c78c:	subs	r0, r0, r2
   1c790:	sbcs	r0, r1, r3
   1c794:	mov	r0, #0
   1c798:	str	r0, [sp, #8]
   1c79c:	blt	1c930 <__assert_fail@plt+0xb32c>
   1c7a0:	umull	r1, r0, r6, r2
   1c7a4:	mov	r4, #0
   1c7a8:	mla	r0, r6, r3, r0
   1c7ac:	mla	r9, r7, r2, r0
   1c7b0:	str	r1, [sp, #8]
   1c7b4:	cmp	r9, #0
   1c7b8:	bmi	1c930 <__assert_fail@plt+0xb32c>
   1c7bc:	ldr	r3, [sp, #28]
   1c7c0:	mvn	r0, #0
   1c7c4:	mvn	r1, #-2147483648	; 0x80000000
   1c7c8:	str	r4, [sp, #4]
   1c7cc:	mvn	r6, #0
   1c7d0:	mvn	r8, #-2147483648	; 0x80000000
   1c7d4:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c7d8:	ldr	r4, [sp, #8]
   1c7dc:	ldr	r2, [sp, #24]
   1c7e0:	ldr	r3, [sp, #28]
   1c7e4:	mov	r7, #1
   1c7e8:	subs	r0, r0, r4
   1c7ec:	sbcs	r0, r1, r9
   1c7f0:	bge	1c96c <__assert_fail@plt+0xb368>
   1c7f4:	b	1c984 <__assert_fail@plt+0xb380>
   1c7f8:	mov	r0, #-2147483648	; 0x80000000
   1c7fc:	mov	r1, #-2147483648	; 0x80000000
   1c800:	mov	r2, r8
   1c804:	mov	r3, r9
   1c808:	mov	r6, r4
   1c80c:	mov	r4, #0
   1c810:	str	r0, [sp, #8]
   1c814:	mov	r0, #0
   1c818:	bl	1f68c <__assert_fail@plt+0xe088>
   1c81c:	ldr	r2, [sp, #24]
   1c820:	ldr	r3, [sp, #28]
   1c824:	mov	r7, #1
   1c828:	subs	r0, r0, r2
   1c82c:	sbcs	r0, r1, r3
   1c830:	blt	1c8a4 <__assert_fail@plt+0xb2a0>
   1c834:	umull	r4, r0, r8, r2
   1c838:	mov	r7, r6
   1c83c:	mla	r0, r8, r3, r0
   1c840:	mla	r0, r9, r2, r0
   1c844:	cmp	r0, #0
   1c848:	str	r0, [sp, #8]
   1c84c:	bmi	1c8a4 <__assert_fail@plt+0xb2a0>
   1c850:	ldr	r3, [sp, #28]
   1c854:	mvn	r0, #0
   1c858:	mvn	r1, #-2147483648	; 0x80000000
   1c85c:	mov	r9, r7
   1c860:	mvn	r6, #0
   1c864:	mvn	r7, #-2147483648	; 0x80000000
   1c868:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c86c:	ldr	r8, [sp, #8]
   1c870:	ldr	r3, [sp, #24]
   1c874:	ldr	ip, [sp, #28]
   1c878:	subs	r0, r0, r4
   1c87c:	mov	r2, #1
   1c880:	sbcs	r0, r1, r8
   1c884:	blt	1c898 <__assert_fail@plt+0xb294>
   1c888:	umull	r6, r0, r4, r3
   1c88c:	mov	r2, #0
   1c890:	mla	r0, r4, ip, r0
   1c894:	mla	r7, r8, r3, r0
   1c898:	orr	r3, r2, r9
   1c89c:	ldr	r9, [sp, #12]
   1c8a0:	b	1d540 <__assert_fail@plt+0xbf3c>
   1c8a4:	ldr	r8, [sp, #8]
   1c8a8:	mov	r0, #0
   1c8ac:	mov	r1, #-2147483648	; 0x80000000
   1c8b0:	mov	r2, r4
   1c8b4:	mov	r9, r7
   1c8b8:	mov	r6, #0
   1c8bc:	mov	r7, #-2147483648	; 0x80000000
   1c8c0:	mov	r3, r8
   1c8c4:	bl	1f68c <__assert_fail@plt+0xe088>
   1c8c8:	ldr	r3, [sp, #24]
   1c8cc:	ldr	ip, [sp, #28]
   1c8d0:	mov	r2, #1
   1c8d4:	subs	r0, r0, r3
   1c8d8:	sbcs	r0, r1, ip
   1c8dc:	bge	1c888 <__assert_fail@plt+0xb284>
   1c8e0:	b	1c898 <__assert_fail@plt+0xb294>
   1c8e4:	mov	r0, #0
   1c8e8:	mov	r1, #-2147483648	; 0x80000000
   1c8ec:	mov	r2, r8
   1c8f0:	mov	r3, r9
   1c8f4:	str	r4, [sp, #8]
   1c8f8:	mov	r6, #0
   1c8fc:	mov	r7, #-2147483648	; 0x80000000
   1c900:	bl	1f68c <__assert_fail@plt+0xe088>
   1c904:	ldr	r4, [sp, #24]
   1c908:	ldr	r3, [sp, #28]
   1c90c:	mov	r2, #1
   1c910:	subs	r0, r0, r4
   1c914:	sbcs	r0, r1, r3
   1c918:	blt	1ca54 <__assert_fail@plt+0xb450>
   1c91c:	umull	r6, r0, r8, r4
   1c920:	mov	r2, #0
   1c924:	mla	r0, r8, r3, r0
   1c928:	mla	r7, r9, r4, r0
   1c92c:	b	1ca54 <__assert_fail@plt+0xb450>
   1c930:	str	r4, [sp, #4]
   1c934:	ldr	r4, [sp, #8]
   1c938:	mov	r0, #0
   1c93c:	mov	r1, #-2147483648	; 0x80000000
   1c940:	mov	r3, r9
   1c944:	mov	r2, r4
   1c948:	bl	1f68c <__assert_fail@plt+0xe088>
   1c94c:	ldr	r2, [sp, #24]
   1c950:	ldr	r3, [sp, #28]
   1c954:	mov	r7, #1
   1c958:	mov	r6, #0
   1c95c:	mov	r8, #-2147483648	; 0x80000000
   1c960:	subs	r0, r0, r2
   1c964:	sbcs	r0, r1, r3
   1c968:	blt	1c9bc <__assert_fail@plt+0xb3b8>
   1c96c:	umull	r6, r0, r4, r2
   1c970:	ldr	r7, [sp, #4]
   1c974:	mla	r0, r4, r3, r0
   1c978:	mla	r8, r9, r2, r0
   1c97c:	cmp	r8, #0
   1c980:	bmi	1c9bc <__assert_fail@plt+0xb3b8>
   1c984:	ldr	r3, [sp, #28]
   1c988:	mvn	r0, #0
   1c98c:	mvn	r1, #-2147483648	; 0x80000000
   1c990:	str	r7, [sp, #8]
   1c994:	mvn	r4, #0
   1c998:	mvn	r9, #-2147483648	; 0x80000000
   1c99c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1c9a0:	ldr	r2, [sp, #24]
   1c9a4:	ldr	r3, [sp, #28]
   1c9a8:	subs	r0, r0, r6
   1c9ac:	mov	r7, #1
   1c9b0:	sbcs	r0, r1, r8
   1c9b4:	bge	1c9f4 <__assert_fail@plt+0xb3f0>
   1c9b8:	b	1ca0c <__assert_fail@plt+0xb408>
   1c9bc:	mov	r0, #0
   1c9c0:	mov	r1, #-2147483648	; 0x80000000
   1c9c4:	mov	r2, r6
   1c9c8:	mov	r3, r8
   1c9cc:	str	r7, [sp, #8]
   1c9d0:	bl	1f68c <__assert_fail@plt+0xe088>
   1c9d4:	ldr	r2, [sp, #24]
   1c9d8:	ldr	r3, [sp, #28]
   1c9dc:	mov	r7, #1
   1c9e0:	mov	r4, #0
   1c9e4:	mov	r9, #-2147483648	; 0x80000000
   1c9e8:	subs	r0, r0, r2
   1c9ec:	sbcs	r0, r1, r3
   1c9f0:	blt	1ca64 <__assert_fail@plt+0xb460>
   1c9f4:	umull	r4, r0, r6, r2
   1c9f8:	ldr	r7, [sp, #8]
   1c9fc:	mla	r0, r6, r3, r0
   1ca00:	mla	r9, r8, r2, r0
   1ca04:	cmp	r9, #0
   1ca08:	bmi	1ca64 <__assert_fail@plt+0xb460>
   1ca0c:	ldr	r3, [sp, #28]
   1ca10:	mvn	r0, #0
   1ca14:	mvn	r1, #-2147483648	; 0x80000000
   1ca18:	str	r7, [sp, #8]
   1ca1c:	mvn	r6, #0
   1ca20:	mvn	r7, #-2147483648	; 0x80000000
   1ca24:	bl	1f760 <__assert_fail@plt+0xe15c>
   1ca28:	ldr	r3, [sp, #24]
   1ca2c:	ldr	ip, [sp, #28]
   1ca30:	subs	r0, r0, r4
   1ca34:	mov	r2, #1
   1ca38:	mov	r8, r4
   1ca3c:	sbcs	r0, r1, r9
   1ca40:	blt	1ca54 <__assert_fail@plt+0xb450>
   1ca44:	umull	r6, r0, r8, r3
   1ca48:	mov	r2, #0
   1ca4c:	mla	r0, r8, ip, r0
   1ca50:	mla	r7, r9, r3, r0
   1ca54:	ldr	r0, [sp, #8]
   1ca58:	ldr	r9, [sp, #12]
   1ca5c:	orr	r3, r2, r0
   1ca60:	b	1d540 <__assert_fail@plt+0xbf3c>
   1ca64:	mov	r0, #0
   1ca68:	mov	r1, #-2147483648	; 0x80000000
   1ca6c:	mov	r2, r4
   1ca70:	mov	r3, r9
   1ca74:	str	r7, [sp, #8]
   1ca78:	mov	r8, r4
   1ca7c:	bl	1f68c <__assert_fail@plt+0xe088>
   1ca80:	ldr	r3, [sp, #24]
   1ca84:	ldr	ip, [sp, #28]
   1ca88:	mov	r2, #1
   1ca8c:	mov	r6, #0
   1ca90:	mov	r7, #-2147483648	; 0x80000000
   1ca94:	subs	r0, r0, r3
   1ca98:	sbcs	r0, r1, ip
   1ca9c:	bge	1ca44 <__assert_fail@plt+0xb440>
   1caa0:	b	1ca54 <__assert_fail@plt+0xb450>
   1caa4:	and	r0, r6, r7
   1caa8:	cmn	r0, #1
   1caac:	beq	1cae8 <__assert_fail@plt+0xb4e4>
   1cab0:	mov	r0, #0
   1cab4:	mov	r1, #-2147483648	; 0x80000000
   1cab8:	mov	r2, r6
   1cabc:	mov	r3, r7
   1cac0:	bl	1f68c <__assert_fail@plt+0xe088>
   1cac4:	ldr	r2, [sp, #24]
   1cac8:	ldr	r3, [sp, #28]
   1cacc:	mov	r4, #1
   1cad0:	mov	r9, #-2147483648	; 0x80000000
   1cad4:	subs	r0, r0, r2
   1cad8:	sbcs	r0, r1, r3
   1cadc:	mov	r0, #0
   1cae0:	str	r0, [sp, #8]
   1cae4:	blt	1cdf8 <__assert_fail@plt+0xb7f4>
   1cae8:	umull	r1, r0, r6, r2
   1caec:	mov	r4, #0
   1caf0:	mla	r0, r6, r3, r0
   1caf4:	mla	r9, r7, r2, r0
   1caf8:	str	r1, [sp, #8]
   1cafc:	cmp	r9, #0
   1cb00:	bmi	1cdf8 <__assert_fail@plt+0xb7f4>
   1cb04:	ldr	r3, [sp, #28]
   1cb08:	mvn	r0, #0
   1cb0c:	mvn	r1, #-2147483648	; 0x80000000
   1cb10:	str	r4, [sp, #4]
   1cb14:	mvn	r8, #0
   1cb18:	mvn	r4, #-2147483648	; 0x80000000
   1cb1c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1cb20:	ldr	r6, [sp, #8]
   1cb24:	ldr	r2, [sp, #24]
   1cb28:	ldr	r3, [sp, #28]
   1cb2c:	mov	r7, #1
   1cb30:	subs	r0, r0, r6
   1cb34:	sbcs	r0, r1, r9
   1cb38:	bge	1ce34 <__assert_fail@plt+0xb830>
   1cb3c:	b	1ce4c <__assert_fail@plt+0xb848>
   1cb40:	and	r0, r6, r7
   1cb44:	cmn	r0, #1
   1cb48:	beq	1cb70 <__assert_fail@plt+0xb56c>
   1cb4c:	mov	r0, #0
   1cb50:	mov	r1, #-2147483648	; 0x80000000
   1cb54:	mov	r2, r6
   1cb58:	mov	r3, r7
   1cb5c:	bl	1f68c <__assert_fail@plt+0xe088>
   1cb60:	ldr	r3, [sp, #28]
   1cb64:	subs	r0, r0, #1024	; 0x400
   1cb68:	sbcs	r0, r1, #0
   1cb6c:	blt	1cdc8 <__assert_fail@plt+0xb7c4>
   1cb70:	lsl	r0, r7, #10
   1cb74:	orr	r7, r0, r6, lsr #22
   1cb78:	lsl	r6, r6, #10
   1cb7c:	b	1d540 <__assert_fail@plt+0xbf3c>
   1cb80:	and	r0, r6, r7
   1cb84:	cmn	r0, #1
   1cb88:	beq	1cbc4 <__assert_fail@plt+0xb5c0>
   1cb8c:	mov	r0, #0
   1cb90:	mov	r1, #-2147483648	; 0x80000000
   1cb94:	mov	r2, r6
   1cb98:	mov	r3, r7
   1cb9c:	bl	1f68c <__assert_fail@plt+0xe088>
   1cba0:	ldr	r2, [sp, #24]
   1cba4:	ldr	r3, [sp, #28]
   1cba8:	mov	r4, #1
   1cbac:	mov	r9, #-2147483648	; 0x80000000
   1cbb0:	subs	r0, r0, r2
   1cbb4:	sbcs	r0, r1, r3
   1cbb8:	mov	r0, #0
   1cbbc:	str	r0, [sp, #8]
   1cbc0:	blt	1d110 <__assert_fail@plt+0xbb0c>
   1cbc4:	umull	r1, r0, r6, r2
   1cbc8:	mov	r4, #0
   1cbcc:	mla	r0, r6, r3, r0
   1cbd0:	mla	r9, r7, r2, r0
   1cbd4:	str	r1, [sp, #8]
   1cbd8:	cmp	r9, #0
   1cbdc:	bmi	1d110 <__assert_fail@plt+0xbb0c>
   1cbe0:	ldr	r3, [sp, #28]
   1cbe4:	mvn	r0, #0
   1cbe8:	mvn	r1, #-2147483648	; 0x80000000
   1cbec:	str	r4, [sp, #4]
   1cbf0:	mvn	r8, #0
   1cbf4:	mvn	r4, #-2147483648	; 0x80000000
   1cbf8:	bl	1f760 <__assert_fail@plt+0xe15c>
   1cbfc:	ldr	r6, [sp, #8]
   1cc00:	ldr	r2, [sp, #24]
   1cc04:	ldr	r3, [sp, #28]
   1cc08:	mov	r7, #1
   1cc0c:	subs	r0, r0, r6
   1cc10:	sbcs	r0, r1, r9
   1cc14:	bge	1d14c <__assert_fail@plt+0xbb48>
   1cc18:	b	1d164 <__assert_fail@plt+0xbb60>
   1cc1c:	and	r0, r6, r7
   1cc20:	cmn	r0, #1
   1cc24:	beq	1cc60 <__assert_fail@plt+0xb65c>
   1cc28:	mov	r0, #0
   1cc2c:	mov	r1, #-2147483648	; 0x80000000
   1cc30:	mov	r2, r6
   1cc34:	mov	r3, r7
   1cc38:	bl	1f68c <__assert_fail@plt+0xe088>
   1cc3c:	ldr	r2, [sp, #24]
   1cc40:	ldr	r3, [sp, #28]
   1cc44:	mov	r4, #1
   1cc48:	mov	r8, #-2147483648	; 0x80000000
   1cc4c:	subs	r0, r0, r2
   1cc50:	sbcs	r0, r1, r3
   1cc54:	mov	r0, #0
   1cc58:	str	r0, [sp, #8]
   1cc5c:	blt	1d38c <__assert_fail@plt+0xbd88>
   1cc60:	umull	r1, r0, r6, r2
   1cc64:	mov	r4, #0
   1cc68:	mla	r0, r6, r3, r0
   1cc6c:	mla	r8, r7, r2, r0
   1cc70:	str	r1, [sp, #8]
   1cc74:	cmp	r8, #0
   1cc78:	bmi	1d38c <__assert_fail@plt+0xbd88>
   1cc7c:	ldr	r3, [sp, #28]
   1cc80:	mvn	r0, #0
   1cc84:	mvn	r1, #-2147483648	; 0x80000000
   1cc88:	str	r4, [sp, #4]
   1cc8c:	mvn	r9, #0
   1cc90:	mvn	r4, #-2147483648	; 0x80000000
   1cc94:	bl	1f760 <__assert_fail@plt+0xe15c>
   1cc98:	ldr	r6, [sp, #8]
   1cc9c:	ldr	r2, [sp, #24]
   1cca0:	ldr	r3, [sp, #28]
   1cca4:	mov	r7, #1
   1cca8:	subs	r0, r0, r6
   1ccac:	sbcs	r0, r1, r8
   1ccb0:	bge	1d3c8 <__assert_fail@plt+0xbdc4>
   1ccb4:	b	1d3e0 <__assert_fail@plt+0xbddc>
   1ccb8:	and	r0, r6, r7
   1ccbc:	cmn	r0, #1
   1ccc0:	beq	1ccfc <__assert_fail@plt+0xb6f8>
   1ccc4:	mov	r0, #0
   1ccc8:	mov	r1, #-2147483648	; 0x80000000
   1cccc:	mov	r2, r6
   1ccd0:	mov	r3, r7
   1ccd4:	bl	1f68c <__assert_fail@plt+0xe088>
   1ccd8:	ldr	r2, [sp, #24]
   1ccdc:	ldr	r3, [sp, #28]
   1cce0:	mov	r4, #1
   1cce4:	mov	r9, #-2147483648	; 0x80000000
   1cce8:	subs	r0, r0, r2
   1ccec:	sbcs	r0, r1, r3
   1ccf0:	mov	r0, #0
   1ccf4:	str	r0, [sp, #8]
   1ccf8:	blt	1d5a8 <__assert_fail@plt+0xbfa4>
   1ccfc:	umull	r1, r0, r6, r2
   1cd00:	mov	r4, #0
   1cd04:	mla	r0, r6, r3, r0
   1cd08:	mla	r9, r7, r2, r0
   1cd0c:	str	r1, [sp, #8]
   1cd10:	cmp	r9, #0
   1cd14:	bmi	1d5a8 <__assert_fail@plt+0xbfa4>
   1cd18:	ldr	r3, [sp, #28]
   1cd1c:	mvn	r0, #0
   1cd20:	mvn	r1, #-2147483648	; 0x80000000
   1cd24:	str	r4, [sp]
   1cd28:	mvn	r8, #-2147483648	; 0x80000000
   1cd2c:	str	r0, [sp, #4]
   1cd30:	mvn	r0, #0
   1cd34:	bl	1f760 <__assert_fail@plt+0xe15c>
   1cd38:	ldr	r6, [sp, #8]
   1cd3c:	ldr	r2, [sp, #24]
   1cd40:	ldr	r3, [sp, #28]
   1cd44:	mov	r7, #1
   1cd48:	subs	r0, r0, r6
   1cd4c:	sbcs	r0, r1, r9
   1cd50:	bge	1d5e8 <__assert_fail@plt+0xbfe4>
   1cd54:	b	1d604 <__assert_fail@plt+0xc000>
   1cd58:	and	r0, r6, r7
   1cd5c:	cmn	r0, #1
   1cd60:	beq	1cd88 <__assert_fail@plt+0xb784>
   1cd64:	mov	r0, #0
   1cd68:	mov	r1, #-2147483648	; 0x80000000
   1cd6c:	mov	r2, r6
   1cd70:	mov	r3, r7
   1cd74:	bl	1f68c <__assert_fail@plt+0xe088>
   1cd78:	ldr	r3, [sp, #28]
   1cd7c:	subs	r0, r0, #512	; 0x200
   1cd80:	sbcs	r0, r1, #0
   1cd84:	blt	1cdc8 <__assert_fail@plt+0xb7c4>
   1cd88:	lsl	r0, r7, #9
   1cd8c:	orr	r7, r0, r6, lsr #23
   1cd90:	lsl	r6, r6, #9
   1cd94:	b	1d540 <__assert_fail@plt+0xbf3c>
   1cd98:	and	r0, r6, r7
   1cd9c:	cmn	r0, #1
   1cda0:	beq	1cde8 <__assert_fail@plt+0xb7e4>
   1cda4:	mov	r0, #0
   1cda8:	mov	r1, #-2147483648	; 0x80000000
   1cdac:	mov	r2, r6
   1cdb0:	mov	r3, r7
   1cdb4:	bl	1f68c <__assert_fail@plt+0xe088>
   1cdb8:	ldr	r3, [sp, #28]
   1cdbc:	subs	r0, r0, #2
   1cdc0:	sbcs	r0, r1, #0
   1cdc4:	bge	1cde8 <__assert_fail@plt+0xb7e4>
   1cdc8:	cmp	r7, #0
   1cdcc:	mvn	r0, #-2147483648	; 0x80000000
   1cdd0:	mvn	r6, #0
   1cdd4:	mov	r3, #1
   1cdd8:	movmi	r0, #-2147483648	; 0x80000000
   1cddc:	movwmi	r6, #0
   1cde0:	mov	r7, r0
   1cde4:	b	1d540 <__assert_fail@plt+0xbf3c>
   1cde8:	lsl	r0, r7, #1
   1cdec:	orr	r7, r0, r6, lsr #31
   1cdf0:	lsl	r6, r6, #1
   1cdf4:	b	1d540 <__assert_fail@plt+0xbf3c>
   1cdf8:	ldr	r6, [sp, #8]
   1cdfc:	mov	r0, #0
   1ce00:	mov	r1, #-2147483648	; 0x80000000
   1ce04:	mov	r3, r9
   1ce08:	str	r4, [sp, #4]
   1ce0c:	mov	r2, r6
   1ce10:	bl	1f68c <__assert_fail@plt+0xe088>
   1ce14:	ldr	r2, [sp, #24]
   1ce18:	ldr	r3, [sp, #28]
   1ce1c:	mov	r7, #1
   1ce20:	mov	r8, #0
   1ce24:	mov	r4, #-2147483648	; 0x80000000
   1ce28:	subs	r0, r0, r2
   1ce2c:	sbcs	r0, r1, r3
   1ce30:	blt	1ce84 <__assert_fail@plt+0xb880>
   1ce34:	umull	r8, r0, r6, r2
   1ce38:	ldr	r7, [sp, #4]
   1ce3c:	mla	r0, r6, r3, r0
   1ce40:	mla	r4, r9, r2, r0
   1ce44:	cmp	r4, #0
   1ce48:	bmi	1ce84 <__assert_fail@plt+0xb880>
   1ce4c:	ldr	r3, [sp, #28]
   1ce50:	mvn	r0, #0
   1ce54:	mvn	r1, #-2147483648	; 0x80000000
   1ce58:	str	r7, [sp, #8]
   1ce5c:	mvn	r7, #0
   1ce60:	mvn	r9, #-2147483648	; 0x80000000
   1ce64:	bl	1f760 <__assert_fail@plt+0xe15c>
   1ce68:	ldr	r2, [sp, #24]
   1ce6c:	ldr	r3, [sp, #28]
   1ce70:	subs	r0, r0, r8
   1ce74:	mov	r6, #1
   1ce78:	sbcs	r0, r1, r4
   1ce7c:	bge	1cebc <__assert_fail@plt+0xb8b8>
   1ce80:	b	1ced4 <__assert_fail@plt+0xb8d0>
   1ce84:	mov	r0, #0
   1ce88:	mov	r1, #-2147483648	; 0x80000000
   1ce8c:	mov	r2, r8
   1ce90:	mov	r3, r4
   1ce94:	str	r7, [sp, #8]
   1ce98:	bl	1f68c <__assert_fail@plt+0xe088>
   1ce9c:	ldr	r2, [sp, #24]
   1cea0:	ldr	r3, [sp, #28]
   1cea4:	mov	r6, #1
   1cea8:	mov	r7, #0
   1ceac:	mov	r9, #-2147483648	; 0x80000000
   1ceb0:	subs	r0, r0, r2
   1ceb4:	sbcs	r0, r1, r3
   1ceb8:	blt	1cf14 <__assert_fail@plt+0xb910>
   1cebc:	umull	r7, r0, r8, r2
   1cec0:	ldr	r6, [sp, #8]
   1cec4:	mla	r0, r8, r3, r0
   1cec8:	mla	r9, r4, r2, r0
   1cecc:	cmp	r9, #0
   1ced0:	bmi	1cf14 <__assert_fail@plt+0xb910>
   1ced4:	ldr	r3, [sp, #28]
   1ced8:	mvn	r0, #0
   1cedc:	mvn	r1, #-2147483648	; 0x80000000
   1cee0:	str	r6, [sp, #8]
   1cee4:	mvn	r8, #0
   1cee8:	mvn	r4, #-2147483648	; 0x80000000
   1ceec:	bl	1f760 <__assert_fail@plt+0xe15c>
   1cef0:	ldr	r2, [sp, #24]
   1cef4:	ldr	r3, [sp, #28]
   1cef8:	subs	r0, r0, r7
   1cefc:	sbcs	r0, r1, r9
   1cf00:	bge	1cf58 <__assert_fail@plt+0xb954>
   1cf04:	mov	r0, #1
   1cf08:	mov	r6, #0
   1cf0c:	str	r0, [sp, #8]
   1cf10:	b	1cf70 <__assert_fail@plt+0xb96c>
   1cf14:	mov	r0, #0
   1cf18:	mov	r1, #-2147483648	; 0x80000000
   1cf1c:	mov	r2, r7
   1cf20:	mov	r3, r9
   1cf24:	str	r6, [sp, #8]
   1cf28:	bl	1f68c <__assert_fail@plt+0xe088>
   1cf2c:	ldr	r2, [sp, #24]
   1cf30:	ldr	r3, [sp, #28]
   1cf34:	subs	r0, r0, r2
   1cf38:	sbcs	r0, r1, r3
   1cf3c:	bge	1cf58 <__assert_fail@plt+0xb954>
   1cf40:	mov	r0, #1
   1cf44:	mov	r8, #0
   1cf48:	mov	r4, #-2147483648	; 0x80000000
   1cf4c:	mov	r6, #0
   1cf50:	str	r0, [sp, #8]
   1cf54:	b	1cfa8 <__assert_fail@plt+0xb9a4>
   1cf58:	umull	r8, r0, r7, r2
   1cf5c:	mov	r6, #0
   1cf60:	mla	r0, r7, r3, r0
   1cf64:	mla	r4, r9, r2, r0
   1cf68:	cmp	r4, #0
   1cf6c:	bmi	1cfa8 <__assert_fail@plt+0xb9a4>
   1cf70:	ldr	r3, [sp, #28]
   1cf74:	mvn	r0, #0
   1cf78:	mvn	r1, #-2147483648	; 0x80000000
   1cf7c:	mvn	r9, #0
   1cf80:	mvn	r7, #-2147483648	; 0x80000000
   1cf84:	bl	1f760 <__assert_fail@plt+0xe15c>
   1cf88:	ldr	r2, [sp, #24]
   1cf8c:	ldr	r3, [sp, #28]
   1cf90:	subs	r0, r0, r8
   1cf94:	sbcs	r0, r1, r4
   1cf98:	bge	1cfe4 <__assert_fail@plt+0xb9e0>
   1cf9c:	mov	r0, #1
   1cfa0:	str	r0, [sp, #8]
   1cfa4:	b	1cff8 <__assert_fail@plt+0xb9f4>
   1cfa8:	mov	r0, #0
   1cfac:	mov	r1, #-2147483648	; 0x80000000
   1cfb0:	mov	r2, r8
   1cfb4:	mov	r3, r4
   1cfb8:	bl	1f68c <__assert_fail@plt+0xe088>
   1cfbc:	ldr	r2, [sp, #24]
   1cfc0:	ldr	r3, [sp, #28]
   1cfc4:	subs	r0, r0, r2
   1cfc8:	sbcs	r0, r1, r3
   1cfcc:	bge	1cfe4 <__assert_fail@plt+0xb9e0>
   1cfd0:	mov	r0, #1
   1cfd4:	mov	r9, #0
   1cfd8:	mov	r7, #-2147483648	; 0x80000000
   1cfdc:	str	r0, [sp, #8]
   1cfe0:	b	1d034 <__assert_fail@plt+0xba30>
   1cfe4:	umull	r9, r0, r8, r2
   1cfe8:	mla	r0, r8, r3, r0
   1cfec:	mla	r7, r4, r2, r0
   1cff0:	cmp	r7, #0
   1cff4:	bmi	1d034 <__assert_fail@plt+0xba30>
   1cff8:	ldr	r3, [sp, #28]
   1cffc:	mvn	r0, #0
   1d000:	mvn	r1, #-2147483648	; 0x80000000
   1d004:	mvn	r8, #0
   1d008:	mvn	r4, #-2147483648	; 0x80000000
   1d00c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d010:	ldr	r2, [sp, #24]
   1d014:	ldr	r3, [sp, #28]
   1d018:	subs	r0, r0, r9
   1d01c:	sbcs	r0, r1, r7
   1d020:	bge	1d074 <__assert_fail@plt+0xba70>
   1d024:	ldr	r9, [sp, #12]
   1d028:	mov	r0, #1
   1d02c:	str	r0, [sp, #8]
   1d030:	b	1d08c <__assert_fail@plt+0xba88>
   1d034:	mov	r0, #0
   1d038:	mov	r1, #-2147483648	; 0x80000000
   1d03c:	mov	r2, r9
   1d040:	mov	r3, r7
   1d044:	bl	1f68c <__assert_fail@plt+0xe088>
   1d048:	ldr	r2, [sp, #24]
   1d04c:	ldr	r3, [sp, #28]
   1d050:	subs	r0, r0, r2
   1d054:	sbcs	r0, r1, r3
   1d058:	bge	1d074 <__assert_fail@plt+0xba70>
   1d05c:	ldr	r9, [sp, #12]
   1d060:	mov	r0, #1
   1d064:	mov	r8, #0
   1d068:	mov	r4, #-2147483648	; 0x80000000
   1d06c:	str	r0, [sp, #8]
   1d070:	b	1d0dc <__assert_fail@plt+0xbad8>
   1d074:	umull	r8, r0, r9, r2
   1d078:	mla	r0, r9, r3, r0
   1d07c:	ldr	r9, [sp, #12]
   1d080:	mla	r4, r7, r2, r0
   1d084:	cmp	r4, #0
   1d088:	bmi	1d0dc <__assert_fail@plt+0xbad8>
   1d08c:	ldr	r3, [sp, #28]
   1d090:	mvn	r0, #0
   1d094:	mvn	r1, #-2147483648	; 0x80000000
   1d098:	mvn	r6, #0
   1d09c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d0a0:	ldr	r7, [sp, #24]
   1d0a4:	ldr	r3, [sp, #28]
   1d0a8:	subs	r0, r0, r8
   1d0ac:	mov	r2, #1
   1d0b0:	sbcs	r0, r1, r4
   1d0b4:	mvn	r0, #-2147483648	; 0x80000000
   1d0b8:	blt	1d0cc <__assert_fail@plt+0xbac8>
   1d0bc:	umull	r6, r0, r8, r7
   1d0c0:	mov	r2, #0
   1d0c4:	mla	r0, r8, r3, r0
   1d0c8:	mla	r0, r4, r7, r0
   1d0cc:	ldr	r1, [sp, #8]
   1d0d0:	mov	r7, r0
   1d0d4:	orr	r3, r2, r1
   1d0d8:	b	1d540 <__assert_fail@plt+0xbf3c>
   1d0dc:	mov	r0, #0
   1d0e0:	mov	r1, #-2147483648	; 0x80000000
   1d0e4:	mov	r2, r8
   1d0e8:	mov	r3, r4
   1d0ec:	bl	1f68c <__assert_fail@plt+0xe088>
   1d0f0:	ldr	r7, [sp, #24]
   1d0f4:	ldr	r3, [sp, #28]
   1d0f8:	mov	r2, #1
   1d0fc:	subs	r0, r0, r7
   1d100:	sbcs	r0, r1, r3
   1d104:	mov	r0, #-2147483648	; 0x80000000
   1d108:	bge	1d0bc <__assert_fail@plt+0xbab8>
   1d10c:	b	1d0cc <__assert_fail@plt+0xbac8>
   1d110:	ldr	r6, [sp, #8]
   1d114:	mov	r0, #0
   1d118:	mov	r1, #-2147483648	; 0x80000000
   1d11c:	mov	r3, r9
   1d120:	str	r4, [sp, #4]
   1d124:	mov	r2, r6
   1d128:	bl	1f68c <__assert_fail@plt+0xe088>
   1d12c:	ldr	r2, [sp, #24]
   1d130:	ldr	r3, [sp, #28]
   1d134:	mov	r7, #1
   1d138:	mov	r8, #0
   1d13c:	mov	r4, #-2147483648	; 0x80000000
   1d140:	subs	r0, r0, r2
   1d144:	sbcs	r0, r1, r3
   1d148:	blt	1d1a0 <__assert_fail@plt+0xbb9c>
   1d14c:	umull	r8, r0, r6, r2
   1d150:	ldr	r7, [sp, #4]
   1d154:	mla	r0, r6, r3, r0
   1d158:	mla	r4, r9, r2, r0
   1d15c:	cmp	r4, #0
   1d160:	bmi	1d1a0 <__assert_fail@plt+0xbb9c>
   1d164:	ldr	r3, [sp, #28]
   1d168:	mvn	r0, #0
   1d16c:	mvn	r1, #-2147483648	; 0x80000000
   1d170:	str	r7, [sp, #4]
   1d174:	mvn	r7, #0
   1d178:	mvn	r9, #-2147483648	; 0x80000000
   1d17c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d180:	ldr	r2, [sp, #24]
   1d184:	ldr	r3, [sp, #28]
   1d188:	subs	r0, r0, r8
   1d18c:	mov	r6, #1
   1d190:	sbcs	r0, r1, r4
   1d194:	str	r6, [sp, #8]
   1d198:	bge	1d1dc <__assert_fail@plt+0xbbd8>
   1d19c:	b	1d1f8 <__assert_fail@plt+0xbbf4>
   1d1a0:	mov	r0, #0
   1d1a4:	mov	r1, #-2147483648	; 0x80000000
   1d1a8:	mov	r2, r8
   1d1ac:	mov	r3, r4
   1d1b0:	str	r7, [sp, #4]
   1d1b4:	bl	1f68c <__assert_fail@plt+0xe088>
   1d1b8:	ldr	r2, [sp, #24]
   1d1bc:	ldr	r3, [sp, #28]
   1d1c0:	mov	r7, #1
   1d1c4:	mov	r9, #-2147483648	; 0x80000000
   1d1c8:	str	r7, [sp, #8]
   1d1cc:	mov	r7, #0
   1d1d0:	subs	r0, r0, r2
   1d1d4:	sbcs	r0, r1, r3
   1d1d8:	blt	1d230 <__assert_fail@plt+0xbc2c>
   1d1dc:	umull	r7, r0, r8, r2
   1d1e0:	mla	r0, r8, r3, r0
   1d1e4:	mla	r9, r4, r2, r0
   1d1e8:	ldr	r0, [sp, #4]
   1d1ec:	cmp	r9, #0
   1d1f0:	str	r0, [sp, #8]
   1d1f4:	bmi	1d230 <__assert_fail@plt+0xbc2c>
   1d1f8:	ldr	r3, [sp, #28]
   1d1fc:	mvn	r0, #0
   1d200:	mvn	r1, #-2147483648	; 0x80000000
   1d204:	mvn	r4, #0
   1d208:	mvn	r8, #-2147483648	; 0x80000000
   1d20c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d210:	ldr	r2, [sp, #24]
   1d214:	ldr	r3, [sp, #28]
   1d218:	subs	r0, r0, r7
   1d21c:	sbcs	r0, r1, r9
   1d220:	bge	1d26c <__assert_fail@plt+0xbc68>
   1d224:	mov	r0, #1
   1d228:	str	r0, [sp, #8]
   1d22c:	b	1d280 <__assert_fail@plt+0xbc7c>
   1d230:	mov	r0, #0
   1d234:	mov	r1, #-2147483648	; 0x80000000
   1d238:	mov	r2, r7
   1d23c:	mov	r3, r9
   1d240:	bl	1f68c <__assert_fail@plt+0xe088>
   1d244:	ldr	r2, [sp, #24]
   1d248:	ldr	r3, [sp, #28]
   1d24c:	subs	r0, r0, r2
   1d250:	sbcs	r0, r1, r3
   1d254:	bge	1d26c <__assert_fail@plt+0xbc68>
   1d258:	mov	r0, #1
   1d25c:	mov	r4, #0
   1d260:	mov	r8, #-2147483648	; 0x80000000
   1d264:	str	r0, [sp, #8]
   1d268:	b	1d2b4 <__assert_fail@plt+0xbcb0>
   1d26c:	umull	r4, r0, r7, r2
   1d270:	mla	r0, r7, r3, r0
   1d274:	mla	r8, r9, r2, r0
   1d278:	cmp	r8, #0
   1d27c:	bmi	1d2b4 <__assert_fail@plt+0xbcb0>
   1d280:	ldr	r3, [sp, #28]
   1d284:	mvn	r0, #0
   1d288:	mvn	r1, #-2147483648	; 0x80000000
   1d28c:	mvn	r6, #0
   1d290:	mvn	r9, #-2147483648	; 0x80000000
   1d294:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d298:	ldr	r2, [sp, #24]
   1d29c:	ldr	r3, [sp, #28]
   1d2a0:	subs	r0, r0, r4
   1d2a4:	sbcs	r0, r1, r8
   1d2a8:	bge	1d2ec <__assert_fail@plt+0xbce8>
   1d2ac:	mov	r8, #1
   1d2b0:	b	1d304 <__assert_fail@plt+0xbd00>
   1d2b4:	mov	r0, #0
   1d2b8:	mov	r1, #-2147483648	; 0x80000000
   1d2bc:	mov	r2, r4
   1d2c0:	mov	r3, r8
   1d2c4:	bl	1f68c <__assert_fail@plt+0xe088>
   1d2c8:	ldr	r2, [sp, #24]
   1d2cc:	ldr	r3, [sp, #28]
   1d2d0:	subs	r0, r0, r2
   1d2d4:	sbcs	r0, r1, r3
   1d2d8:	bge	1d2ec <__assert_fail@plt+0xbce8>
   1d2dc:	mov	r8, #1
   1d2e0:	mov	r6, #0
   1d2e4:	mov	r9, #-2147483648	; 0x80000000
   1d2e8:	b	1d354 <__assert_fail@plt+0xbd50>
   1d2ec:	umull	r6, r0, r4, r2
   1d2f0:	mla	r0, r4, r3, r0
   1d2f4:	mla	r9, r8, r2, r0
   1d2f8:	ldr	r8, [sp, #8]
   1d2fc:	cmp	r9, #0
   1d300:	bmi	1d354 <__assert_fail@plt+0xbd50>
   1d304:	ldr	r3, [sp, #28]
   1d308:	mvn	r0, #0
   1d30c:	mvn	r1, #-2147483648	; 0x80000000
   1d310:	mvn	r4, #0
   1d314:	mvn	r7, #-2147483648	; 0x80000000
   1d318:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d31c:	ldr	r3, [sp, #24]
   1d320:	ldr	ip, [sp, #28]
   1d324:	subs	r0, r0, r6
   1d328:	mov	r2, #1
   1d32c:	sbcs	r0, r1, r9
   1d330:	blt	1d344 <__assert_fail@plt+0xbd40>
   1d334:	umull	r4, r0, r6, r3
   1d338:	mov	r2, #0
   1d33c:	mla	r0, r6, ip, r0
   1d340:	mla	r7, r9, r3, r0
   1d344:	ldr	r9, [sp, #12]
   1d348:	orr	r3, r2, r8
   1d34c:	mov	r6, r4
   1d350:	b	1d540 <__assert_fail@plt+0xbf3c>
   1d354:	mov	r0, #0
   1d358:	mov	r1, #-2147483648	; 0x80000000
   1d35c:	mov	r2, r6
   1d360:	mov	r3, r9
   1d364:	bl	1f68c <__assert_fail@plt+0xe088>
   1d368:	ldr	r3, [sp, #24]
   1d36c:	ldr	ip, [sp, #28]
   1d370:	mov	r2, #1
   1d374:	mov	r4, #0
   1d378:	mov	r7, #-2147483648	; 0x80000000
   1d37c:	subs	r0, r0, r3
   1d380:	sbcs	r0, r1, ip
   1d384:	bge	1d334 <__assert_fail@plt+0xbd30>
   1d388:	b	1d344 <__assert_fail@plt+0xbd40>
   1d38c:	ldr	r6, [sp, #8]
   1d390:	mov	r0, #0
   1d394:	mov	r1, #-2147483648	; 0x80000000
   1d398:	mov	r3, r8
   1d39c:	str	r4, [sp, #4]
   1d3a0:	mov	r2, r6
   1d3a4:	bl	1f68c <__assert_fail@plt+0xe088>
   1d3a8:	ldr	r2, [sp, #24]
   1d3ac:	ldr	r3, [sp, #28]
   1d3b0:	mov	r7, #1
   1d3b4:	mov	r9, #0
   1d3b8:	mov	r4, #-2147483648	; 0x80000000
   1d3bc:	subs	r0, r0, r2
   1d3c0:	sbcs	r0, r1, r3
   1d3c4:	blt	1d41c <__assert_fail@plt+0xbe18>
   1d3c8:	umull	r9, r0, r6, r2
   1d3cc:	ldr	r7, [sp, #4]
   1d3d0:	mla	r0, r6, r3, r0
   1d3d4:	mla	r4, r8, r2, r0
   1d3d8:	cmp	r4, #0
   1d3dc:	bmi	1d41c <__assert_fail@plt+0xbe18>
   1d3e0:	ldr	r3, [sp, #28]
   1d3e4:	mvn	r0, #0
   1d3e8:	mvn	r1, #-2147483648	; 0x80000000
   1d3ec:	str	r7, [sp, #4]
   1d3f0:	mvn	r8, #0
   1d3f4:	mvn	r7, #-2147483648	; 0x80000000
   1d3f8:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d3fc:	ldr	r2, [sp, #24]
   1d400:	ldr	r3, [sp, #28]
   1d404:	subs	r0, r0, r9
   1d408:	mov	r6, #1
   1d40c:	sbcs	r0, r1, r4
   1d410:	str	r6, [sp, #8]
   1d414:	bge	1d458 <__assert_fail@plt+0xbe54>
   1d418:	b	1d474 <__assert_fail@plt+0xbe70>
   1d41c:	mov	r0, #0
   1d420:	mov	r1, #-2147483648	; 0x80000000
   1d424:	mov	r2, r9
   1d428:	mov	r3, r4
   1d42c:	str	r7, [sp, #4]
   1d430:	bl	1f68c <__assert_fail@plt+0xe088>
   1d434:	ldr	r2, [sp, #24]
   1d438:	ldr	r3, [sp, #28]
   1d43c:	mov	r7, #1
   1d440:	mov	r8, #0
   1d444:	str	r7, [sp, #8]
   1d448:	mov	r7, #-2147483648	; 0x80000000
   1d44c:	subs	r0, r0, r2
   1d450:	sbcs	r0, r1, r3
   1d454:	blt	1d4a8 <__assert_fail@plt+0xbea4>
   1d458:	umull	r8, r0, r9, r2
   1d45c:	mla	r0, r9, r3, r0
   1d460:	mla	r7, r4, r2, r0
   1d464:	ldr	r0, [sp, #4]
   1d468:	cmp	r7, #0
   1d46c:	str	r0, [sp, #8]
   1d470:	bmi	1d4a8 <__assert_fail@plt+0xbea4>
   1d474:	ldr	r3, [sp, #28]
   1d478:	mvn	r0, #0
   1d47c:	mvn	r1, #-2147483648	; 0x80000000
   1d480:	mvn	r4, #0
   1d484:	mvn	r9, #-2147483648	; 0x80000000
   1d488:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d48c:	ldr	r2, [sp, #24]
   1d490:	ldr	r3, [sp, #28]
   1d494:	subs	r0, r0, r8
   1d498:	sbcs	r0, r1, r7
   1d49c:	bge	1d4e0 <__assert_fail@plt+0xbedc>
   1d4a0:	mov	r8, #1
   1d4a4:	b	1d4f8 <__assert_fail@plt+0xbef4>
   1d4a8:	mov	r0, #0
   1d4ac:	mov	r1, #-2147483648	; 0x80000000
   1d4b0:	mov	r2, r8
   1d4b4:	mov	r3, r7
   1d4b8:	bl	1f68c <__assert_fail@plt+0xe088>
   1d4bc:	ldr	r2, [sp, #24]
   1d4c0:	ldr	r3, [sp, #28]
   1d4c4:	subs	r0, r0, r2
   1d4c8:	sbcs	r0, r1, r3
   1d4cc:	bge	1d4e0 <__assert_fail@plt+0xbedc>
   1d4d0:	mov	r8, #1
   1d4d4:	mov	r4, #0
   1d4d8:	mov	r9, #-2147483648	; 0x80000000
   1d4dc:	b	1d570 <__assert_fail@plt+0xbf6c>
   1d4e0:	umull	r4, r0, r8, r2
   1d4e4:	mla	r0, r8, r3, r0
   1d4e8:	ldr	r8, [sp, #8]
   1d4ec:	mla	r9, r7, r2, r0
   1d4f0:	cmp	r9, #0
   1d4f4:	bmi	1d570 <__assert_fail@plt+0xbf6c>
   1d4f8:	ldr	r3, [sp, #28]
   1d4fc:	mvn	r0, #0
   1d500:	mvn	r1, #-2147483648	; 0x80000000
   1d504:	mvn	r6, #0
   1d508:	mvn	r7, #-2147483648	; 0x80000000
   1d50c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d510:	ldr	r3, [sp, #24]
   1d514:	ldr	ip, [sp, #28]
   1d518:	subs	r0, r0, r4
   1d51c:	mov	r2, #1
   1d520:	sbcs	r0, r1, r9
   1d524:	blt	1d538 <__assert_fail@plt+0xbf34>
   1d528:	umull	r6, r0, r4, r3
   1d52c:	mov	r2, #0
   1d530:	mla	r0, r4, ip, r0
   1d534:	mla	r7, r9, r3, r0
   1d538:	ldr	r9, [sp, #12]
   1d53c:	orr	r3, r2, r8
   1d540:	ldr	r1, [sp, #20]
   1d544:	ldr	r2, [sp, #16]
   1d548:	orr	r5, r3, r5
   1d54c:	add	r0, r1, r2
   1d550:	str	r0, [sl]
   1d554:	ldrb	r0, [r1, r2]
   1d558:	cmp	r0, #0
   1d55c:	orrne	r5, r5, #2
   1d560:	strd	r6, [r9]
   1d564:	mov	r0, r5
   1d568:	sub	sp, fp, #28
   1d56c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d570:	mov	r0, #0
   1d574:	mov	r1, #-2147483648	; 0x80000000
   1d578:	mov	r2, r4
   1d57c:	mov	r3, r9
   1d580:	bl	1f68c <__assert_fail@plt+0xe088>
   1d584:	ldr	r3, [sp, #24]
   1d588:	ldr	ip, [sp, #28]
   1d58c:	mov	r2, #1
   1d590:	mov	r6, #0
   1d594:	mov	r7, #-2147483648	; 0x80000000
   1d598:	subs	r0, r0, r3
   1d59c:	sbcs	r0, r1, ip
   1d5a0:	bge	1d528 <__assert_fail@plt+0xbf24>
   1d5a4:	b	1d538 <__assert_fail@plt+0xbf34>
   1d5a8:	ldr	r6, [sp, #8]
   1d5ac:	mov	r0, #0
   1d5b0:	mov	r1, #-2147483648	; 0x80000000
   1d5b4:	mov	r3, r9
   1d5b8:	str	r4, [sp]
   1d5bc:	mov	r2, r6
   1d5c0:	bl	1f68c <__assert_fail@plt+0xe088>
   1d5c4:	ldr	r2, [sp, #24]
   1d5c8:	ldr	r3, [sp, #28]
   1d5cc:	mov	r7, #1
   1d5d0:	mov	r8, #-2147483648	; 0x80000000
   1d5d4:	subs	r0, r0, r2
   1d5d8:	sbcs	r0, r1, r3
   1d5dc:	mov	r0, #0
   1d5e0:	str	r0, [sp, #4]
   1d5e4:	blt	1d644 <__assert_fail@plt+0xc040>
   1d5e8:	umull	r1, r0, r6, r2
   1d5ec:	ldr	r7, [sp]
   1d5f0:	mla	r0, r6, r3, r0
   1d5f4:	mla	r8, r9, r2, r0
   1d5f8:	str	r1, [sp, #4]
   1d5fc:	cmp	r8, #0
   1d600:	bmi	1d644 <__assert_fail@plt+0xc040>
   1d604:	ldr	r3, [sp, #28]
   1d608:	mvn	r0, #0
   1d60c:	mvn	r1, #-2147483648	; 0x80000000
   1d610:	str	r7, [sp]
   1d614:	mvn	r7, #0
   1d618:	mvn	r4, #-2147483648	; 0x80000000
   1d61c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d620:	mov	r6, #1
   1d624:	ldr	r2, [sp, #24]
   1d628:	ldr	r3, [sp, #28]
   1d62c:	str	r6, [sp, #8]
   1d630:	ldr	r6, [sp, #4]
   1d634:	subs	r0, r0, r6
   1d638:	sbcs	r0, r1, r8
   1d63c:	bge	1d684 <__assert_fail@plt+0xc080>
   1d640:	b	1d6a0 <__assert_fail@plt+0xc09c>
   1d644:	ldr	r6, [sp, #4]
   1d648:	mov	r0, #0
   1d64c:	mov	r1, #-2147483648	; 0x80000000
   1d650:	mov	r3, r8
   1d654:	str	r7, [sp]
   1d658:	mov	r2, r6
   1d65c:	bl	1f68c <__assert_fail@plt+0xe088>
   1d660:	ldr	r2, [sp, #24]
   1d664:	ldr	r3, [sp, #28]
   1d668:	mov	r7, #1
   1d66c:	mov	r4, #-2147483648	; 0x80000000
   1d670:	str	r7, [sp, #8]
   1d674:	mov	r7, #0
   1d678:	subs	r0, r0, r2
   1d67c:	sbcs	r0, r1, r3
   1d680:	blt	1d6d8 <__assert_fail@plt+0xc0d4>
   1d684:	umull	r7, r0, r6, r2
   1d688:	mla	r0, r6, r3, r0
   1d68c:	mla	r4, r8, r2, r0
   1d690:	ldr	r0, [sp]
   1d694:	cmp	r4, #0
   1d698:	str	r0, [sp, #8]
   1d69c:	bmi	1d6d8 <__assert_fail@plt+0xc0d4>
   1d6a0:	ldr	r3, [sp, #28]
   1d6a4:	mvn	r0, #0
   1d6a8:	mvn	r1, #-2147483648	; 0x80000000
   1d6ac:	mvn	r9, #0
   1d6b0:	mvn	r8, #-2147483648	; 0x80000000
   1d6b4:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d6b8:	ldr	r2, [sp, #24]
   1d6bc:	ldr	r3, [sp, #28]
   1d6c0:	subs	r0, r0, r7
   1d6c4:	sbcs	r0, r1, r4
   1d6c8:	bge	1d714 <__assert_fail@plt+0xc110>
   1d6cc:	mov	r0, #1
   1d6d0:	str	r0, [sp, #8]
   1d6d4:	b	1d728 <__assert_fail@plt+0xc124>
   1d6d8:	mov	r0, #0
   1d6dc:	mov	r1, #-2147483648	; 0x80000000
   1d6e0:	mov	r2, r7
   1d6e4:	mov	r3, r4
   1d6e8:	bl	1f68c <__assert_fail@plt+0xe088>
   1d6ec:	ldr	r2, [sp, #24]
   1d6f0:	ldr	r3, [sp, #28]
   1d6f4:	subs	r0, r0, r2
   1d6f8:	sbcs	r0, r1, r3
   1d6fc:	bge	1d714 <__assert_fail@plt+0xc110>
   1d700:	mov	r0, #1
   1d704:	mov	r9, #0
   1d708:	mov	r8, #-2147483648	; 0x80000000
   1d70c:	str	r0, [sp, #8]
   1d710:	b	1d760 <__assert_fail@plt+0xc15c>
   1d714:	umull	r9, r0, r7, r2
   1d718:	mla	r0, r7, r3, r0
   1d71c:	mla	r8, r4, r2, r0
   1d720:	cmp	r8, #0
   1d724:	bmi	1d760 <__assert_fail@plt+0xc15c>
   1d728:	ldr	r3, [sp, #28]
   1d72c:	mvn	r0, #0
   1d730:	mvn	r1, #-2147483648	; 0x80000000
   1d734:	mvn	r4, #0
   1d738:	mvn	r7, #-2147483648	; 0x80000000
   1d73c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d740:	ldr	r2, [sp, #24]
   1d744:	ldr	r3, [sp, #28]
   1d748:	subs	r0, r0, r9
   1d74c:	sbcs	r0, r1, r8
   1d750:	bge	1d79c <__assert_fail@plt+0xc198>
   1d754:	mov	r0, #1
   1d758:	str	r0, [sp, #8]
   1d75c:	b	1d7b0 <__assert_fail@plt+0xc1ac>
   1d760:	mov	r0, #0
   1d764:	mov	r1, #-2147483648	; 0x80000000
   1d768:	mov	r2, r9
   1d76c:	mov	r3, r8
   1d770:	bl	1f68c <__assert_fail@plt+0xe088>
   1d774:	ldr	r2, [sp, #24]
   1d778:	ldr	r3, [sp, #28]
   1d77c:	subs	r0, r0, r2
   1d780:	sbcs	r0, r1, r3
   1d784:	bge	1d79c <__assert_fail@plt+0xc198>
   1d788:	mov	r0, #1
   1d78c:	mov	r4, #0
   1d790:	mov	r7, #-2147483648	; 0x80000000
   1d794:	str	r0, [sp, #8]
   1d798:	b	1d7e8 <__assert_fail@plt+0xc1e4>
   1d79c:	umull	r4, r0, r9, r2
   1d7a0:	mla	r0, r9, r3, r0
   1d7a4:	mla	r7, r8, r2, r0
   1d7a8:	cmp	r7, #0
   1d7ac:	bmi	1d7e8 <__assert_fail@plt+0xc1e4>
   1d7b0:	ldr	r3, [sp, #28]
   1d7b4:	mvn	r0, #0
   1d7b8:	mvn	r1, #-2147483648	; 0x80000000
   1d7bc:	mvn	r8, #0
   1d7c0:	mvn	r9, #-2147483648	; 0x80000000
   1d7c4:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d7c8:	ldr	r2, [sp, #24]
   1d7cc:	ldr	r3, [sp, #28]
   1d7d0:	subs	r0, r0, r4
   1d7d4:	sbcs	r0, r1, r7
   1d7d8:	bge	1d824 <__assert_fail@plt+0xc220>
   1d7dc:	mov	r0, #1
   1d7e0:	str	r0, [sp, #8]
   1d7e4:	b	1d838 <__assert_fail@plt+0xc234>
   1d7e8:	mov	r0, #0
   1d7ec:	mov	r1, #-2147483648	; 0x80000000
   1d7f0:	mov	r2, r4
   1d7f4:	mov	r3, r7
   1d7f8:	bl	1f68c <__assert_fail@plt+0xe088>
   1d7fc:	ldr	r2, [sp, #24]
   1d800:	ldr	r3, [sp, #28]
   1d804:	subs	r0, r0, r2
   1d808:	sbcs	r0, r1, r3
   1d80c:	bge	1d824 <__assert_fail@plt+0xc220>
   1d810:	mov	r0, #1
   1d814:	mov	r8, #0
   1d818:	mov	r9, #-2147483648	; 0x80000000
   1d81c:	str	r0, [sp, #8]
   1d820:	b	1d874 <__assert_fail@plt+0xc270>
   1d824:	umull	r8, r0, r4, r2
   1d828:	mla	r0, r4, r3, r0
   1d82c:	mla	r9, r7, r2, r0
   1d830:	cmp	r9, #0
   1d834:	bmi	1d874 <__assert_fail@plt+0xc270>
   1d838:	ldr	r3, [sp, #28]
   1d83c:	mvn	r0, #0
   1d840:	mvn	r1, #-2147483648	; 0x80000000
   1d844:	mvn	r4, #0
   1d848:	mvn	r6, #-2147483648	; 0x80000000
   1d84c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d850:	ldr	r2, [sp, #24]
   1d854:	ldr	r3, [sp, #28]
   1d858:	subs	r0, r0, r8
   1d85c:	sbcs	r0, r1, r9
   1d860:	bge	1d8b4 <__assert_fail@plt+0xc2b0>
   1d864:	ldr	r9, [sp, #12]
   1d868:	mov	r0, #1
   1d86c:	str	r0, [sp, #8]
   1d870:	b	1d8cc <__assert_fail@plt+0xc2c8>
   1d874:	mov	r0, #0
   1d878:	mov	r1, #-2147483648	; 0x80000000
   1d87c:	mov	r2, r8
   1d880:	mov	r3, r9
   1d884:	bl	1f68c <__assert_fail@plt+0xe088>
   1d888:	ldr	r2, [sp, #24]
   1d88c:	ldr	r3, [sp, #28]
   1d890:	subs	r0, r0, r2
   1d894:	sbcs	r0, r1, r3
   1d898:	bge	1d8b4 <__assert_fail@plt+0xc2b0>
   1d89c:	ldr	r9, [sp, #12]
   1d8a0:	mov	r0, #1
   1d8a4:	mov	r4, #0
   1d8a8:	mov	r6, #-2147483648	; 0x80000000
   1d8ac:	str	r0, [sp, #8]
   1d8b0:	b	1d918 <__assert_fail@plt+0xc314>
   1d8b4:	umull	r4, r0, r8, r2
   1d8b8:	mla	r0, r8, r3, r0
   1d8bc:	mla	r6, r9, r2, r0
   1d8c0:	ldr	r9, [sp, #12]
   1d8c4:	cmp	r6, #0
   1d8c8:	bmi	1d918 <__assert_fail@plt+0xc314>
   1d8cc:	ldr	r3, [sp, #28]
   1d8d0:	mvn	r0, #0
   1d8d4:	mvn	r1, #-2147483648	; 0x80000000
   1d8d8:	mov	r8, r6
   1d8dc:	mvn	r6, #0
   1d8e0:	mvn	r7, #-2147483648	; 0x80000000
   1d8e4:	bl	1f760 <__assert_fail@plt+0xe15c>
   1d8e8:	ldr	r3, [sp, #24]
   1d8ec:	ldr	ip, [sp, #28]
   1d8f0:	subs	r0, r0, r4
   1d8f4:	mov	r2, #1
   1d8f8:	sbcs	r0, r1, r8
   1d8fc:	blt	1d910 <__assert_fail@plt+0xc30c>
   1d900:	umull	r6, r0, r4, r3
   1d904:	mov	r2, #0
   1d908:	mla	r0, r4, ip, r0
   1d90c:	mla	r7, r8, r3, r0
   1d910:	ldr	r0, [sp, #8]
   1d914:	b	1ca5c <__assert_fail@plt+0xb458>
   1d918:	mov	r0, #0
   1d91c:	mov	r1, #-2147483648	; 0x80000000
   1d920:	mov	r2, r4
   1d924:	mov	r3, r6
   1d928:	bl	1f68c <__assert_fail@plt+0xe088>
   1d92c:	ldr	r3, [sp, #24]
   1d930:	ldr	ip, [sp, #28]
   1d934:	mov	r8, r6
   1d938:	mov	r2, #1
   1d93c:	mov	r6, #0
   1d940:	mov	r7, #-2147483648	; 0x80000000
   1d944:	subs	r0, r0, r3
   1d948:	sbcs	r0, r1, ip
   1d94c:	bge	1d900 <__assert_fail@plt+0xc2fc>
   1d950:	b	1d910 <__assert_fail@plt+0xc30c>
   1d954:	movw	r0, #5333	; 0x14d5
   1d958:	movw	r1, #5371	; 0x14fb
   1d95c:	movw	r3, #5387	; 0x150b
   1d960:	mov	r2, #85	; 0x55
   1d964:	movt	r0, #2
   1d968:	movt	r1, #2
   1d96c:	movt	r3, #2
   1d970:	bl	11604 <__assert_fail@plt>
   1d974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d978:	add	fp, sp, #28
   1d97c:	sub	sp, sp, #12
   1d980:	cmp	r2, #37	; 0x25
   1d984:	bcs	1e4e0 <__assert_fail@plt+0xcedc>
   1d988:	ldr	r8, [fp, #8]
   1d98c:	mov	r9, r3
   1d990:	mov	r7, r2
   1d994:	mov	r4, r1
   1d998:	mov	r5, r0
   1d99c:	bl	114e4 <__errno_location@plt>
   1d9a0:	cmp	r4, #0
   1d9a4:	add	sl, sp, #8
   1d9a8:	mov	r6, r0
   1d9ac:	mov	r0, #0
   1d9b0:	mov	r2, r7
   1d9b4:	movne	sl, r4
   1d9b8:	str	r0, [r6]
   1d9bc:	mov	r0, r5
   1d9c0:	mov	r1, sl
   1d9c4:	bl	112f8 <strtol@plt>
   1d9c8:	ldr	r4, [sl]
   1d9cc:	str	r9, [sp, #4]
   1d9d0:	cmp	r4, r5
   1d9d4:	beq	1da10 <__assert_fail@plt+0xc40c>
   1d9d8:	mov	r7, r0
   1d9dc:	ldr	r0, [r6]
   1d9e0:	cmp	r0, #0
   1d9e4:	beq	1db78 <__assert_fail@plt+0xc574>
   1d9e8:	mov	r9, #4
   1d9ec:	cmp	r0, #34	; 0x22
   1d9f0:	bne	1dd3c <__assert_fail@plt+0xc738>
   1d9f4:	mov	r9, #1
   1d9f8:	cmp	r8, #0
   1d9fc:	beq	1e4b4 <__assert_fail@plt+0xceb0>
   1da00:	ldrb	r5, [r4]
   1da04:	cmp	r5, #0
   1da08:	bne	1da4c <__assert_fail@plt+0xc448>
   1da0c:	b	1e4b4 <__assert_fail@plt+0xceb0>
   1da10:	mov	r9, #4
   1da14:	cmp	r8, #0
   1da18:	beq	1dd3c <__assert_fail@plt+0xc738>
   1da1c:	ldrb	r1, [r5]
   1da20:	cmp	r1, #0
   1da24:	beq	1dd3c <__assert_fail@plt+0xc738>
   1da28:	mov	r0, r8
   1da2c:	bl	114c0 <strchr@plt>
   1da30:	cmp	r0, #0
   1da34:	beq	1dd3c <__assert_fail@plt+0xc738>
   1da38:	mov	r7, #1
   1da3c:	mov	r9, #0
   1da40:	ldrb	r5, [r4]
   1da44:	cmp	r5, #0
   1da48:	beq	1e4b4 <__assert_fail@plt+0xceb0>
   1da4c:	mov	r0, r8
   1da50:	mov	r1, r5
   1da54:	bl	114c0 <strchr@plt>
   1da58:	cmp	r0, #0
   1da5c:	beq	1dd30 <__assert_fail@plt+0xc72c>
   1da60:	sub	r0, r5, #69	; 0x45
   1da64:	mov	ip, #1
   1da68:	mov	r6, #1024	; 0x400
   1da6c:	cmp	r0, #47	; 0x2f
   1da70:	bhi	1db8c <__assert_fail@plt+0xc588>
   1da74:	add	r1, pc, #0
   1da78:	ldr	pc, [r1, r0, lsl #2]
   1da7c:	andeq	sp, r1, ip, lsr fp
   1da80:	andeq	sp, r1, ip, lsl #23
   1da84:	andeq	sp, r1, ip, lsr fp
   1da88:	andeq	sp, r1, ip, lsl #23
   1da8c:	andeq	sp, r1, ip, lsl #23
   1da90:	andeq	sp, r1, ip, lsl #23
   1da94:	andeq	sp, r1, ip, lsr fp
   1da98:	andeq	sp, r1, ip, lsl #23
   1da9c:	andeq	sp, r1, ip, lsr fp
   1daa0:	andeq	sp, r1, ip, lsl #23
   1daa4:	andeq	sp, r1, ip, lsl #23
   1daa8:	andeq	sp, r1, ip, lsr fp
   1daac:	andeq	sp, r1, ip, lsl #23
   1dab0:	andeq	sp, r1, ip, lsl #23
   1dab4:	andeq	sp, r1, ip, lsl #23
   1dab8:	andeq	sp, r1, ip, lsr fp
   1dabc:	andeq	sp, r1, ip, lsl #23
   1dac0:	andeq	sp, r1, ip, lsl #23
   1dac4:	andeq	sp, r1, ip, lsl #23
   1dac8:	andeq	sp, r1, ip, lsl #23
   1dacc:	andeq	sp, r1, ip, lsr fp
   1dad0:	andeq	sp, r1, ip, lsr fp
   1dad4:	andeq	sp, r1, ip, lsl #23
   1dad8:	andeq	sp, r1, ip, lsl #23
   1dadc:	andeq	sp, r1, ip, lsl #23
   1dae0:	andeq	sp, r1, ip, lsl #23
   1dae4:	andeq	sp, r1, ip, lsl #23
   1dae8:	andeq	sp, r1, ip, lsl #23
   1daec:	andeq	sp, r1, ip, lsl #23
   1daf0:	andeq	sp, r1, ip, lsl #23
   1daf4:	andeq	sp, r1, ip, lsl #23
   1daf8:	andeq	sp, r1, ip, lsl #23
   1dafc:	andeq	sp, r1, ip, lsl #23
   1db00:	andeq	sp, r1, ip, lsl #23
   1db04:	andeq	sp, r1, ip, lsr fp
   1db08:	andeq	sp, r1, ip, lsl #23
   1db0c:	andeq	sp, r1, ip, lsl #23
   1db10:	andeq	sp, r1, ip, lsl #23
   1db14:	andeq	sp, r1, ip, lsr fp
   1db18:	andeq	sp, r1, ip, lsl #23
   1db1c:	andeq	sp, r1, ip, lsr fp
   1db20:	andeq	sp, r1, ip, lsl #23
   1db24:	andeq	sp, r1, ip, lsl #23
   1db28:	andeq	sp, r1, ip, lsl #23
   1db2c:	andeq	sp, r1, ip, lsl #23
   1db30:	andeq	sp, r1, ip, lsl #23
   1db34:	andeq	sp, r1, ip, lsl #23
   1db38:	andeq	sp, r1, ip, lsr fp
   1db3c:	mov	r0, r8
   1db40:	mov	r1, #48	; 0x30
   1db44:	bl	114c0 <strchr@plt>
   1db48:	cmp	r0, #0
   1db4c:	beq	1db88 <__assert_fail@plt+0xc584>
   1db50:	ldrb	r0, [r4, #1]
   1db54:	cmp	r0, #66	; 0x42
   1db58:	cmpne	r0, #68	; 0x44
   1db5c:	bne	1dc9c <__assert_fail@plt+0xc698>
   1db60:	mov	ip, #2
   1db64:	mov	r6, #1000	; 0x3e8
   1db68:	sub	r1, r5, #66	; 0x42
   1db6c:	cmp	r1, #53	; 0x35
   1db70:	bls	1db98 <__assert_fail@plt+0xc594>
   1db74:	b	1dd30 <__assert_fail@plt+0xc72c>
   1db78:	mov	r9, r0
   1db7c:	cmp	r8, #0
   1db80:	bne	1da00 <__assert_fail@plt+0xc3fc>
   1db84:	b	1e4b4 <__assert_fail@plt+0xceb0>
   1db88:	mov	ip, #1
   1db8c:	sub	r1, r5, #66	; 0x42
   1db90:	cmp	r1, #53	; 0x35
   1db94:	bhi	1dd30 <__assert_fail@plt+0xc72c>
   1db98:	add	r2, pc, #4
   1db9c:	mov	r0, #0
   1dba0:	ldr	pc, [r2, r1, lsl #2]
   1dba4:	andeq	sp, r1, r8, ror #26
   1dba8:	andeq	sp, r1, r0, lsr sp
   1dbac:	andeq	sp, r1, r0, lsr sp
   1dbb0:	andeq	sp, r1, ip, ror sp
   1dbb4:	andeq	sp, r1, r0, lsr sp
   1dbb8:	andeq	sp, r1, ip, ror ip
   1dbbc:	andeq	sp, r1, r0, lsr sp
   1dbc0:	andeq	sp, r1, r0, lsr sp
   1dbc4:	andeq	sp, r1, r0, lsr sp
   1dbc8:	andeq	sp, r1, r4, asr #25
   1dbcc:	andeq	sp, r1, r0, lsr sp
   1dbd0:	andeq	sp, r1, r0, ror #25
   1dbd4:	andeq	sp, r1, r0, lsr sp
   1dbd8:	andeq	sp, r1, r0, lsr sp
   1dbdc:	muleq	r1, ip, sp
   1dbe0:	andeq	sp, r1, r0, lsr sp
   1dbe4:	andeq	sp, r1, r0, lsr sp
   1dbe8:	andeq	sp, r1, r0, lsr sp
   1dbec:	andeq	sp, r1, r0, lsl #26
   1dbf0:	andeq	sp, r1, r0, lsr sp
   1dbf4:	andeq	sp, r1, r0, lsr sp
   1dbf8:	andeq	sp, r1, r0, lsr sp
   1dbfc:	andeq	sp, r1, r0, lsr sp
   1dc00:			; <UNDEFINED> instruction: 0x0001ddbc
   1dc04:	andeq	sp, r1, r8, asr #26
   1dc08:	andeq	sp, r1, r0, lsr sp
   1dc0c:	andeq	sp, r1, r0, lsr sp
   1dc10:	andeq	sp, r1, r0, lsr sp
   1dc14:	andeq	sp, r1, r0, lsr sp
   1dc18:	andeq	sp, r1, r0, lsr sp
   1dc1c:	andeq	sp, r1, r0, lsr sp
   1dc20:	andeq	sp, r1, r0, lsr sp
   1dc24:	ldrdeq	sp, [r1], -ip
   1dc28:	muleq	r1, ip, r4
   1dc2c:	andeq	sp, r1, r0, lsr sp
   1dc30:	andeq	sp, r1, r0, lsr sp
   1dc34:	andeq	sp, r1, r0, lsr sp
   1dc38:	andeq	sp, r1, ip, ror ip
   1dc3c:	andeq	sp, r1, r0, lsr sp
   1dc40:	andeq	sp, r1, r0, lsr sp
   1dc44:	andeq	sp, r1, r0, lsr sp
   1dc48:	andeq	sp, r1, r4, asr #25
   1dc4c:	andeq	sp, r1, r0, lsr sp
   1dc50:	andeq	sp, r1, r0, ror #25
   1dc54:	andeq	sp, r1, r0, lsr sp
   1dc58:	andeq	sp, r1, r0, lsr sp
   1dc5c:	andeq	sp, r1, r0, lsr sp
   1dc60:	andeq	sp, r1, r0, lsr sp
   1dc64:	andeq	sp, r1, r0, lsr sp
   1dc68:	andeq	sp, r1, r0, lsr sp
   1dc6c:	andeq	sp, r1, r0, lsl #26
   1dc70:	andeq	sp, r1, r0, lsr sp
   1dc74:	andeq	sp, r1, r0, lsr sp
   1dc78:	strdeq	sp, [r1], -ip
   1dc7c:	cmn	r7, #1
   1dc80:	ble	1de10 <__assert_fail@plt+0xc80c>
   1dc84:	mvn	r2, #-2147483648	; 0x80000000
   1dc88:	mov	r3, #1
   1dc8c:	udiv	r0, r2, r6
   1dc90:	cmp	r0, r7
   1dc94:	bge	1de28 <__assert_fail@plt+0xc824>
   1dc98:	b	1dee8 <__assert_fail@plt+0xc8e4>
   1dc9c:	cmp	r0, #105	; 0x69
   1dca0:	bne	1dd20 <__assert_fail@plt+0xc71c>
   1dca4:	ldrb	r0, [r4, #2]
   1dca8:	mov	ip, #1
   1dcac:	cmp	r0, #66	; 0x42
   1dcb0:	movweq	ip, #3
   1dcb4:	sub	r1, r5, #66	; 0x42
   1dcb8:	cmp	r1, #53	; 0x35
   1dcbc:	bls	1db98 <__assert_fail@plt+0xc594>
   1dcc0:	b	1dd30 <__assert_fail@plt+0xc72c>
   1dcc4:	cmn	r7, #1
   1dcc8:	ble	1de3c <__assert_fail@plt+0xc838>
   1dccc:	mvn	r1, #-2147483648	; 0x80000000
   1dcd0:	udiv	r1, r1, r6
   1dcd4:	cmp	r1, r7
   1dcd8:	bge	1de50 <__assert_fail@plt+0xc84c>
   1dcdc:	b	1e0b8 <__assert_fail@plt+0xcab4>
   1dce0:	cmn	r7, #1
   1dce4:	ble	1de58 <__assert_fail@plt+0xc854>
   1dce8:	mvn	r1, #-2147483648	; 0x80000000
   1dcec:	mov	r0, #1
   1dcf0:	udiv	r2, r1, r6
   1dcf4:	cmp	r2, r7
   1dcf8:	bge	1de70 <__assert_fail@plt+0xc86c>
   1dcfc:	b	1df24 <__assert_fail@plt+0xc920>
   1dd00:	cmn	r7, #1
   1dd04:	ble	1de84 <__assert_fail@plt+0xc880>
   1dd08:	mvn	r0, #-2147483648	; 0x80000000
   1dd0c:	mov	r1, #1
   1dd10:	udiv	r2, r0, r6
   1dd14:	cmp	r2, r7
   1dd18:	bge	1de9c <__assert_fail@plt+0xc898>
   1dd1c:	b	1deac <__assert_fail@plt+0xc8a8>
   1dd20:	mov	ip, #1
   1dd24:	sub	r1, r5, #66	; 0x42
   1dd28:	cmp	r1, #53	; 0x35
   1dd2c:	bls	1db98 <__assert_fail@plt+0xc594>
   1dd30:	ldr	r0, [sp, #4]
   1dd34:	orr	r9, r9, #2
   1dd38:	str	r7, [r0]
   1dd3c:	mov	r0, r9
   1dd40:	sub	sp, fp, #28
   1dd44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd48:	cmp	r7, #0
   1dd4c:	bmi	1df5c <__assert_fail@plt+0xc958>
   1dd50:	mvn	r0, #-2147483648	; 0x80000000
   1dd54:	mov	r3, #1
   1dd58:	udiv	r1, r0, r6
   1dd5c:	cmp	r1, r7
   1dd60:	bge	1df78 <__assert_fail@plt+0xc974>
   1dd64:	b	1df88 <__assert_fail@plt+0xc984>
   1dd68:	cmn	r7, #1
   1dd6c:	ble	1dfa0 <__assert_fail@plt+0xc99c>
   1dd70:	cmp	r7, #2097152	; 0x200000
   1dd74:	blt	1dfb4 <__assert_fail@plt+0xc9b0>
   1dd78:	b	1e0b8 <__assert_fail@plt+0xcab4>
   1dd7c:	cmp	r7, #0
   1dd80:	bmi	1dfbc <__assert_fail@plt+0xc9b8>
   1dd84:	mvn	r0, #-2147483648	; 0x80000000
   1dd88:	mov	r3, #1
   1dd8c:	udiv	r1, r0, r6
   1dd90:	cmp	r1, r7
   1dd94:	bge	1dfd8 <__assert_fail@plt+0xc9d4>
   1dd98:	b	1dfe8 <__assert_fail@plt+0xc9e4>
   1dd9c:	cmp	r7, #0
   1dda0:	bmi	1e000 <__assert_fail@plt+0xc9fc>
   1dda4:	mvn	r0, #-2147483648	; 0x80000000
   1dda8:	mov	r3, #1
   1ddac:	udiv	r1, r0, r6
   1ddb0:	cmp	r1, r7
   1ddb4:	bge	1e01c <__assert_fail@plt+0xca18>
   1ddb8:	b	1e02c <__assert_fail@plt+0xca28>
   1ddbc:	cmp	r7, #0
   1ddc0:	bmi	1e044 <__assert_fail@plt+0xca40>
   1ddc4:	mvn	r0, #-2147483648	; 0x80000000
   1ddc8:	mov	r3, #1
   1ddcc:	udiv	r1, r0, r6
   1ddd0:	cmp	r1, r7
   1ddd4:	bge	1e060 <__assert_fail@plt+0xca5c>
   1ddd8:	b	1e070 <__assert_fail@plt+0xca6c>
   1dddc:	cmn	r7, #1
   1dde0:	ble	1e088 <__assert_fail@plt+0xca84>
   1dde4:	movw	r1, #65535	; 0xffff
   1dde8:	movt	r1, #31
   1ddec:	orr	r1, r1, #2097152	; 0x200000
   1ddf0:	cmp	r7, r1
   1ddf4:	ble	1e09c <__assert_fail@plt+0xca98>
   1ddf8:	b	1e0b8 <__assert_fail@plt+0xcab4>
   1ddfc:	cmn	r7, #1
   1de00:	ble	1e0a4 <__assert_fail@plt+0xcaa0>
   1de04:	cmp	r7, #1073741824	; 0x40000000
   1de08:	bge	1e0b8 <__assert_fail@plt+0xcab4>
   1de0c:	b	1e0d0 <__assert_fail@plt+0xcacc>
   1de10:	beq	1de28 <__assert_fail@plt+0xc824>
   1de14:	mov	r2, #-2147483648	; 0x80000000
   1de18:	mov	r3, #1
   1de1c:	sdiv	r0, r2, r7
   1de20:	cmp	r0, r6
   1de24:	blt	1df00 <__assert_fail@plt+0xc8fc>
   1de28:	mul	r2, r7, r6
   1de2c:	mov	r3, #0
   1de30:	cmp	r2, #0
   1de34:	bpl	1dee8 <__assert_fail@plt+0xc8e4>
   1de38:	b	1df00 <__assert_fail@plt+0xc8fc>
   1de3c:	beq	1de50 <__assert_fail@plt+0xc84c>
   1de40:	mov	r1, #-2147483648	; 0x80000000
   1de44:	sdiv	r1, r1, r7
   1de48:	cmp	r1, r6
   1de4c:	blt	1e0b8 <__assert_fail@plt+0xcab4>
   1de50:	mul	r7, r7, r6
   1de54:	b	1e49c <__assert_fail@plt+0xce98>
   1de58:	beq	1de70 <__assert_fail@plt+0xc86c>
   1de5c:	mov	r1, #-2147483648	; 0x80000000
   1de60:	mov	r0, #1
   1de64:	sdiv	r2, r1, r7
   1de68:	cmp	r2, r6
   1de6c:	blt	1df3c <__assert_fail@plt+0xc938>
   1de70:	mul	r1, r7, r6
   1de74:	mov	r0, #0
   1de78:	cmp	r1, #0
   1de7c:	bpl	1df24 <__assert_fail@plt+0xc920>
   1de80:	b	1df3c <__assert_fail@plt+0xc938>
   1de84:	beq	1de9c <__assert_fail@plt+0xc898>
   1de88:	mov	r0, #-2147483648	; 0x80000000
   1de8c:	mov	r1, #1
   1de90:	sdiv	r2, r0, r7
   1de94:	cmp	r2, r6
   1de98:	blt	1dec4 <__assert_fail@plt+0xc8c0>
   1de9c:	mul	r0, r7, r6
   1dea0:	mov	r1, #0
   1dea4:	cmp	r0, #0
   1dea8:	bmi	1dec4 <__assert_fail@plt+0xc8c0>
   1deac:	mvn	r2, #-2147483648	; 0x80000000
   1deb0:	mov	r3, #1
   1deb4:	udiv	r7, r2, r6
   1deb8:	cmp	r7, r0
   1debc:	blt	1dee8 <__assert_fail@plt+0xc8e4>
   1dec0:	b	1ded8 <__assert_fail@plt+0xc8d4>
   1dec4:	mov	r2, #-2147483648	; 0x80000000
   1dec8:	mov	r3, #1
   1decc:	sdiv	r7, r2, r0
   1ded0:	cmp	r7, r6
   1ded4:	blt	1df00 <__assert_fail@plt+0xc8fc>
   1ded8:	mul	r2, r0, r6
   1dedc:	mov	r3, r1
   1dee0:	cmp	r2, #0
   1dee4:	bmi	1df00 <__assert_fail@plt+0xc8fc>
   1dee8:	mvn	r1, #-2147483648	; 0x80000000
   1deec:	mov	r0, #1
   1def0:	udiv	r7, r1, r6
   1def4:	cmp	r7, r2
   1def8:	blt	1df24 <__assert_fail@plt+0xc920>
   1defc:	b	1df14 <__assert_fail@plt+0xc910>
   1df00:	mov	r1, #-2147483648	; 0x80000000
   1df04:	mov	r0, #1
   1df08:	sdiv	r7, r1, r2
   1df0c:	cmp	r7, r6
   1df10:	blt	1df3c <__assert_fail@plt+0xc938>
   1df14:	mul	r1, r2, r6
   1df18:	mov	r0, r3
   1df1c:	cmp	r1, #0
   1df20:	bmi	1df3c <__assert_fail@plt+0xc938>
   1df24:	mvn	r7, #-2147483648	; 0x80000000
   1df28:	mov	r2, #1
   1df2c:	udiv	r3, r7, r6
   1df30:	cmp	r3, r1
   1df34:	blt	1e498 <__assert_fail@plt+0xce94>
   1df38:	b	1df50 <__assert_fail@plt+0xc94c>
   1df3c:	mov	r7, #-2147483648	; 0x80000000
   1df40:	mov	r2, #1
   1df44:	sdiv	r3, r7, r1
   1df48:	cmp	r3, r6
   1df4c:	blt	1e498 <__assert_fail@plt+0xce94>
   1df50:	mov	r2, #0
   1df54:	mul	r7, r1, r6
   1df58:	b	1e498 <__assert_fail@plt+0xce94>
   1df5c:	cmn	r7, #1
   1df60:	beq	1df78 <__assert_fail@plt+0xc974>
   1df64:	mov	r0, #-2147483648	; 0x80000000
   1df68:	mov	r3, #1
   1df6c:	sdiv	r1, r0, r7
   1df70:	cmp	r1, r6
   1df74:	blt	1e0d8 <__assert_fail@plt+0xcad4>
   1df78:	mul	r0, r7, r6
   1df7c:	mov	r3, #0
   1df80:	cmp	r0, #0
   1df84:	bmi	1e0d8 <__assert_fail@plt+0xcad4>
   1df88:	mvn	r1, #-2147483648	; 0x80000000
   1df8c:	mov	r2, #1
   1df90:	udiv	r7, r1, r6
   1df94:	cmp	r7, r0
   1df98:	bge	1e0ec <__assert_fail@plt+0xcae8>
   1df9c:	b	1e0fc <__assert_fail@plt+0xcaf8>
   1dfa0:	beq	1dfb4 <__assert_fail@plt+0xc9b0>
   1dfa4:	mov	r1, #-2147483648	; 0x80000000
   1dfa8:	sdiv	r1, r1, r7
   1dfac:	cmp	r1, #1024	; 0x400
   1dfb0:	blt	1e0b8 <__assert_fail@plt+0xcab4>
   1dfb4:	lsl	r7, r7, #10
   1dfb8:	b	1e49c <__assert_fail@plt+0xce98>
   1dfbc:	cmn	r7, #1
   1dfc0:	beq	1dfd8 <__assert_fail@plt+0xc9d4>
   1dfc4:	mov	r0, #-2147483648	; 0x80000000
   1dfc8:	mov	r3, #1
   1dfcc:	sdiv	r1, r0, r7
   1dfd0:	cmp	r1, r6
   1dfd4:	blt	1e1b8 <__assert_fail@plt+0xcbb4>
   1dfd8:	mul	r0, r7, r6
   1dfdc:	mov	r3, #0
   1dfe0:	cmp	r0, #0
   1dfe4:	bmi	1e1b8 <__assert_fail@plt+0xcbb4>
   1dfe8:	mvn	r1, #-2147483648	; 0x80000000
   1dfec:	mov	r2, #1
   1dff0:	udiv	r7, r1, r6
   1dff4:	cmp	r7, r0
   1dff8:	bge	1e1cc <__assert_fail@plt+0xcbc8>
   1dffc:	b	1e1dc <__assert_fail@plt+0xcbd8>
   1e000:	cmn	r7, #1
   1e004:	beq	1e01c <__assert_fail@plt+0xca18>
   1e008:	mov	r0, #-2147483648	; 0x80000000
   1e00c:	mov	r3, #1
   1e010:	sdiv	r1, r0, r7
   1e014:	cmp	r1, r6
   1e018:	blt	1e298 <__assert_fail@plt+0xcc94>
   1e01c:	mul	r0, r7, r6
   1e020:	mov	r3, #0
   1e024:	cmp	r0, #0
   1e028:	bmi	1e298 <__assert_fail@plt+0xcc94>
   1e02c:	mvn	r1, #-2147483648	; 0x80000000
   1e030:	mov	r2, #1
   1e034:	udiv	r7, r1, r6
   1e038:	cmp	r7, r0
   1e03c:	bge	1e2ac <__assert_fail@plt+0xcca8>
   1e040:	b	1e2bc <__assert_fail@plt+0xccb8>
   1e044:	cmn	r7, #1
   1e048:	beq	1e060 <__assert_fail@plt+0xca5c>
   1e04c:	mov	r0, #-2147483648	; 0x80000000
   1e050:	mov	r3, #1
   1e054:	sdiv	r1, r0, r7
   1e058:	cmp	r1, r6
   1e05c:	blt	1e2fc <__assert_fail@plt+0xccf8>
   1e060:	mul	r0, r7, r6
   1e064:	mov	r3, #0
   1e068:	cmp	r0, #0
   1e06c:	bmi	1e2fc <__assert_fail@plt+0xccf8>
   1e070:	mvn	r1, #-2147483648	; 0x80000000
   1e074:	mov	r2, #1
   1e078:	udiv	r7, r1, r6
   1e07c:	cmp	r7, r0
   1e080:	bge	1e310 <__assert_fail@plt+0xcd0c>
   1e084:	b	1e320 <__assert_fail@plt+0xcd1c>
   1e088:	beq	1e09c <__assert_fail@plt+0xca98>
   1e08c:	mov	r1, #-2147483648	; 0x80000000
   1e090:	sdiv	r1, r1, r7
   1e094:	cmp	r1, #512	; 0x200
   1e098:	blt	1e0b8 <__assert_fail@plt+0xcab4>
   1e09c:	lsl	r7, r7, #9
   1e0a0:	b	1e49c <__assert_fail@plt+0xce98>
   1e0a4:	beq	1e0d0 <__assert_fail@plt+0xcacc>
   1e0a8:	mov	r1, #-2147483648	; 0x80000000
   1e0ac:	sdiv	r1, r1, r7
   1e0b0:	cmp	r1, #2
   1e0b4:	bge	1e0d0 <__assert_fail@plt+0xcacc>
   1e0b8:	cmp	r7, #0
   1e0bc:	mvn	r1, #-2147483648	; 0x80000000
   1e0c0:	mov	r0, #1
   1e0c4:	movmi	r1, #-2147483648	; 0x80000000
   1e0c8:	mov	r7, r1
   1e0cc:	b	1e49c <__assert_fail@plt+0xce98>
   1e0d0:	lsl	r7, r7, #1
   1e0d4:	b	1e49c <__assert_fail@plt+0xce98>
   1e0d8:	mov	r1, #-2147483648	; 0x80000000
   1e0dc:	mov	r2, #1
   1e0e0:	sdiv	r7, r1, r0
   1e0e4:	cmp	r7, r6
   1e0e8:	blt	1e114 <__assert_fail@plt+0xcb10>
   1e0ec:	mul	r1, r0, r6
   1e0f0:	mov	r2, r3
   1e0f4:	cmp	r1, #0
   1e0f8:	bmi	1e114 <__assert_fail@plt+0xcb10>
   1e0fc:	mvn	r3, #-2147483648	; 0x80000000
   1e100:	mov	r0, #1
   1e104:	udiv	r7, r3, r6
   1e108:	cmp	r7, r1
   1e10c:	bge	1e128 <__assert_fail@plt+0xcb24>
   1e110:	b	1e138 <__assert_fail@plt+0xcb34>
   1e114:	mov	r3, #-2147483648	; 0x80000000
   1e118:	mov	r0, #1
   1e11c:	sdiv	r7, r3, r1
   1e120:	cmp	r7, r6
   1e124:	blt	1e160 <__assert_fail@plt+0xcb5c>
   1e128:	mul	r3, r1, r6
   1e12c:	mov	r0, r2
   1e130:	cmp	r3, #0
   1e134:	bmi	1e160 <__assert_fail@plt+0xcb5c>
   1e138:	mvn	r1, #-2147483648	; 0x80000000
   1e13c:	udiv	r2, r1, r6
   1e140:	cmp	r2, r3
   1e144:	bge	1e178 <__assert_fail@plt+0xcb74>
   1e148:	mov	r0, #1
   1e14c:	mvn	r2, #-2147483648	; 0x80000000
   1e150:	udiv	r3, r2, r6
   1e154:	cmp	r3, r1
   1e158:	blt	1e228 <__assert_fail@plt+0xcc24>
   1e15c:	b	1e1a8 <__assert_fail@plt+0xcba4>
   1e160:	mov	r1, #-2147483648	; 0x80000000
   1e164:	sdiv	r2, r1, r3
   1e168:	cmp	r2, r6
   1e16c:	bge	1e178 <__assert_fail@plt+0xcb74>
   1e170:	mov	r0, #1
   1e174:	b	1e198 <__assert_fail@plt+0xcb94>
   1e178:	mul	r1, r3, r6
   1e17c:	cmp	r1, #0
   1e180:	bmi	1e198 <__assert_fail@plt+0xcb94>
   1e184:	mvn	r2, #-2147483648	; 0x80000000
   1e188:	udiv	r3, r2, r6
   1e18c:	cmp	r3, r1
   1e190:	bge	1e1a8 <__assert_fail@plt+0xcba4>
   1e194:	b	1e228 <__assert_fail@plt+0xcc24>
   1e198:	mov	r2, #-2147483648	; 0x80000000
   1e19c:	sdiv	r3, r2, r1
   1e1a0:	cmp	r3, r6
   1e1a4:	blt	1e250 <__assert_fail@plt+0xcc4c>
   1e1a8:	mul	r2, r1, r6
   1e1ac:	cmp	r2, #0
   1e1b0:	bpl	1e264 <__assert_fail@plt+0xcc60>
   1e1b4:	b	1e278 <__assert_fail@plt+0xcc74>
   1e1b8:	mov	r1, #-2147483648	; 0x80000000
   1e1bc:	mov	r2, #1
   1e1c0:	sdiv	r7, r1, r0
   1e1c4:	cmp	r7, r6
   1e1c8:	blt	1e1f4 <__assert_fail@plt+0xcbf0>
   1e1cc:	mul	r1, r0, r6
   1e1d0:	mov	r2, r3
   1e1d4:	cmp	r1, #0
   1e1d8:	bmi	1e1f4 <__assert_fail@plt+0xcbf0>
   1e1dc:	mvn	r3, #-2147483648	; 0x80000000
   1e1e0:	mov	r0, #1
   1e1e4:	udiv	r7, r3, r6
   1e1e8:	cmp	r7, r1
   1e1ec:	bge	1e208 <__assert_fail@plt+0xcc04>
   1e1f0:	b	1e218 <__assert_fail@plt+0xcc14>
   1e1f4:	mov	r3, #-2147483648	; 0x80000000
   1e1f8:	mov	r0, #1
   1e1fc:	sdiv	r7, r3, r1
   1e200:	cmp	r7, r6
   1e204:	blt	1e240 <__assert_fail@plt+0xcc3c>
   1e208:	mul	r3, r1, r6
   1e20c:	mov	r0, r2
   1e210:	cmp	r3, #0
   1e214:	bmi	1e240 <__assert_fail@plt+0xcc3c>
   1e218:	mvn	r2, #-2147483648	; 0x80000000
   1e21c:	udiv	r1, r2, r6
   1e220:	cmp	r1, r3
   1e224:	bge	1e258 <__assert_fail@plt+0xcc54>
   1e228:	mov	r0, #1
   1e22c:	mvn	r1, #-2147483648	; 0x80000000
   1e230:	udiv	r3, r1, r6
   1e234:	cmp	r3, r2
   1e238:	bge	1e288 <__assert_fail@plt+0xcc84>
   1e23c:	b	1e450 <__assert_fail@plt+0xce4c>
   1e240:	mov	r2, #-2147483648	; 0x80000000
   1e244:	sdiv	r1, r2, r3
   1e248:	cmp	r1, r6
   1e24c:	bge	1e258 <__assert_fail@plt+0xcc54>
   1e250:	mov	r0, #1
   1e254:	b	1e278 <__assert_fail@plt+0xcc74>
   1e258:	mul	r2, r3, r6
   1e25c:	cmp	r2, #0
   1e260:	bmi	1e278 <__assert_fail@plt+0xcc74>
   1e264:	mvn	r1, #-2147483648	; 0x80000000
   1e268:	udiv	r3, r1, r6
   1e26c:	cmp	r3, r2
   1e270:	blt	1e450 <__assert_fail@plt+0xce4c>
   1e274:	b	1e288 <__assert_fail@plt+0xcc84>
   1e278:	mov	r1, #-2147483648	; 0x80000000
   1e27c:	sdiv	r3, r1, r2
   1e280:	cmp	r3, r6
   1e284:	blt	1e468 <__assert_fail@plt+0xce64>
   1e288:	mul	r1, r2, r6
   1e28c:	cmp	r1, #0
   1e290:	bpl	1e47c <__assert_fail@plt+0xce78>
   1e294:	b	1e4c8 <__assert_fail@plt+0xcec4>
   1e298:	mov	r1, #-2147483648	; 0x80000000
   1e29c:	mov	r2, #1
   1e2a0:	sdiv	r7, r1, r0
   1e2a4:	cmp	r7, r6
   1e2a8:	blt	1e2d4 <__assert_fail@plt+0xccd0>
   1e2ac:	mul	r1, r0, r6
   1e2b0:	mov	r2, r3
   1e2b4:	cmp	r1, #0
   1e2b8:	bmi	1e2d4 <__assert_fail@plt+0xccd0>
   1e2bc:	mvn	r3, #-2147483648	; 0x80000000
   1e2c0:	mov	r0, #1
   1e2c4:	udiv	r7, r3, r6
   1e2c8:	cmp	r7, r1
   1e2cc:	bge	1e2e8 <__assert_fail@plt+0xcce4>
   1e2d0:	b	1e440 <__assert_fail@plt+0xce3c>
   1e2d4:	mov	r3, #-2147483648	; 0x80000000
   1e2d8:	mov	r0, #1
   1e2dc:	sdiv	r7, r3, r1
   1e2e0:	cmp	r7, r6
   1e2e4:	blt	1e458 <__assert_fail@plt+0xce54>
   1e2e8:	mul	r3, r1, r6
   1e2ec:	mov	r0, r2
   1e2f0:	cmp	r3, #0
   1e2f4:	bpl	1e440 <__assert_fail@plt+0xce3c>
   1e2f8:	b	1e458 <__assert_fail@plt+0xce54>
   1e2fc:	mov	r1, #-2147483648	; 0x80000000
   1e300:	mov	r2, #1
   1e304:	sdiv	r7, r1, r0
   1e308:	cmp	r7, r6
   1e30c:	blt	1e338 <__assert_fail@plt+0xcd34>
   1e310:	mul	r1, r0, r6
   1e314:	mov	r2, r3
   1e318:	cmp	r1, #0
   1e31c:	bmi	1e338 <__assert_fail@plt+0xcd34>
   1e320:	mvn	r3, #-2147483648	; 0x80000000
   1e324:	mov	r0, #1
   1e328:	udiv	r7, r3, r6
   1e32c:	cmp	r7, r1
   1e330:	bge	1e34c <__assert_fail@plt+0xcd48>
   1e334:	b	1e35c <__assert_fail@plt+0xcd58>
   1e338:	mov	r3, #-2147483648	; 0x80000000
   1e33c:	mov	r0, #1
   1e340:	sdiv	r7, r3, r1
   1e344:	cmp	r7, r6
   1e348:	blt	1e384 <__assert_fail@plt+0xcd80>
   1e34c:	mul	r3, r1, r6
   1e350:	mov	r0, r2
   1e354:	cmp	r3, #0
   1e358:	bmi	1e384 <__assert_fail@plt+0xcd80>
   1e35c:	mvn	r1, #-2147483648	; 0x80000000
   1e360:	udiv	r2, r1, r6
   1e364:	cmp	r2, r3
   1e368:	bge	1e39c <__assert_fail@plt+0xcd98>
   1e36c:	mov	r0, #1
   1e370:	mvn	r2, #-2147483648	; 0x80000000
   1e374:	udiv	r3, r2, r6
   1e378:	cmp	r3, r1
   1e37c:	blt	1e3b8 <__assert_fail@plt+0xcdb4>
   1e380:	b	1e3e8 <__assert_fail@plt+0xcde4>
   1e384:	mov	r1, #-2147483648	; 0x80000000
   1e388:	sdiv	r2, r1, r3
   1e38c:	cmp	r2, r6
   1e390:	bge	1e39c <__assert_fail@plt+0xcd98>
   1e394:	mov	r0, #1
   1e398:	b	1e3d0 <__assert_fail@plt+0xcdcc>
   1e39c:	mul	r1, r3, r6
   1e3a0:	cmp	r1, #0
   1e3a4:	bmi	1e3d0 <__assert_fail@plt+0xcdcc>
   1e3a8:	mvn	r2, #-2147483648	; 0x80000000
   1e3ac:	udiv	r3, r2, r6
   1e3b0:	cmp	r3, r1
   1e3b4:	bge	1e3e8 <__assert_fail@plt+0xcde4>
   1e3b8:	mov	r0, #1
   1e3bc:	mvn	r3, #-2147483648	; 0x80000000
   1e3c0:	udiv	r1, r3, r6
   1e3c4:	cmp	r1, r2
   1e3c8:	bge	1e434 <__assert_fail@plt+0xce30>
   1e3cc:	b	1e404 <__assert_fail@plt+0xce00>
   1e3d0:	mov	r2, #-2147483648	; 0x80000000
   1e3d4:	sdiv	r3, r2, r1
   1e3d8:	cmp	r3, r6
   1e3dc:	bge	1e3e8 <__assert_fail@plt+0xcde4>
   1e3e0:	mov	r0, #1
   1e3e4:	b	1e41c <__assert_fail@plt+0xce18>
   1e3e8:	mul	r2, r1, r6
   1e3ec:	cmp	r2, #0
   1e3f0:	bmi	1e41c <__assert_fail@plt+0xce18>
   1e3f4:	mvn	r3, #-2147483648	; 0x80000000
   1e3f8:	udiv	r1, r3, r6
   1e3fc:	cmp	r1, r2
   1e400:	bge	1e434 <__assert_fail@plt+0xce30>
   1e404:	mov	r0, #1
   1e408:	mvn	r1, #-2147483648	; 0x80000000
   1e40c:	udiv	r2, r1, r6
   1e410:	cmp	r2, r3
   1e414:	bge	1e470 <__assert_fail@plt+0xce6c>
   1e418:	b	1e450 <__assert_fail@plt+0xce4c>
   1e41c:	mov	r3, #-2147483648	; 0x80000000
   1e420:	sdiv	r1, r3, r2
   1e424:	cmp	r1, r6
   1e428:	bge	1e434 <__assert_fail@plt+0xce30>
   1e42c:	mov	r0, #1
   1e430:	b	1e458 <__assert_fail@plt+0xce54>
   1e434:	mul	r3, r2, r6
   1e438:	cmp	r3, #0
   1e43c:	bmi	1e458 <__assert_fail@plt+0xce54>
   1e440:	mvn	r1, #-2147483648	; 0x80000000
   1e444:	udiv	r2, r1, r6
   1e448:	cmp	r2, r3
   1e44c:	bge	1e470 <__assert_fail@plt+0xce6c>
   1e450:	mov	r0, #1
   1e454:	b	1e47c <__assert_fail@plt+0xce78>
   1e458:	mov	r1, #-2147483648	; 0x80000000
   1e45c:	sdiv	r2, r1, r3
   1e460:	cmp	r2, r6
   1e464:	bge	1e470 <__assert_fail@plt+0xce6c>
   1e468:	mov	r0, #1
   1e46c:	b	1e4c8 <__assert_fail@plt+0xcec4>
   1e470:	mul	r1, r3, r6
   1e474:	cmp	r1, #0
   1e478:	bmi	1e4c8 <__assert_fail@plt+0xcec4>
   1e47c:	mvn	r7, #-2147483648	; 0x80000000
   1e480:	mov	r2, #1
   1e484:	udiv	r3, r7, r6
   1e488:	cmp	r3, r1
   1e48c:	blt	1e498 <__assert_fail@plt+0xce94>
   1e490:	mul	r7, r1, r6
   1e494:	mov	r2, #0
   1e498:	orr	r0, r2, r0
   1e49c:	add	r1, r4, ip
   1e4a0:	orr	r9, r0, r9
   1e4a4:	str	r1, [sl]
   1e4a8:	ldrb	r1, [r4, ip]
   1e4ac:	cmp	r1, #0
   1e4b0:	orrne	r9, r9, #2
   1e4b4:	ldr	r0, [sp, #4]
   1e4b8:	str	r7, [r0]
   1e4bc:	mov	r0, r9
   1e4c0:	sub	sp, fp, #28
   1e4c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4c8:	mov	r7, #-2147483648	; 0x80000000
   1e4cc:	mov	r2, #1
   1e4d0:	sdiv	r3, r7, r1
   1e4d4:	cmp	r3, r6
   1e4d8:	bge	1e490 <__assert_fail@plt+0xce8c>
   1e4dc:	b	1e498 <__assert_fail@plt+0xce94>
   1e4e0:	movw	r0, #5333	; 0x14d5
   1e4e4:	movw	r1, #5373	; 0x14fd
   1e4e8:	movw	r3, #5465	; 0x1559
   1e4ec:	mov	r2, #85	; 0x55
   1e4f0:	movt	r0, #2
   1e4f4:	movt	r1, #2
   1e4f8:	movt	r3, #2
   1e4fc:	bl	11604 <__assert_fail@plt>
   1e500:	push	{fp, lr}
   1e504:	mov	fp, sp
   1e508:	sub	sp, sp, #8
   1e50c:	movw	ip, #8556	; 0x216c
   1e510:	movt	ip, #3
   1e514:	ldr	ip, [ip]
   1e518:	str	ip, [sp, #4]
   1e51c:	ldr	ip, [fp, #8]
   1e520:	str	ip, [sp]
   1e524:	bl	1e52c <__assert_fail@plt+0xcf28>
   1e528:	bl	115ec <abort@plt>
   1e52c:	push	{r4, r5, r6, r7, fp, lr}
   1e530:	add	fp, sp, #16
   1e534:	sub	sp, sp, #16
   1e538:	sub	r0, r0, #1
   1e53c:	cmp	r0, #4
   1e540:	bcs	1e5c0 <__assert_fail@plt+0xcfbc>
   1e544:	mov	r5, r1
   1e548:	movw	r1, #5632	; 0x1600
   1e54c:	ldr	r4, [fp, #12]
   1e550:	ldr	r6, [fp, #8]
   1e554:	movt	r1, #2
   1e558:	cmn	r5, #1
   1e55c:	ldr	r1, [r1, r0, lsl #2]
   1e560:	ble	1e574 <__assert_fail@plt+0xcf70>
   1e564:	ldr	r7, [r3, r5, lsl #4]
   1e568:	movw	r5, #5536	; 0x15a0
   1e56c:	movt	r5, #2
   1e570:	b	1e590 <__assert_fail@plt+0xcf8c>
   1e574:	mov	r0, #0
   1e578:	add	r7, sp, #14
   1e57c:	strb	r0, [sp, #15]
   1e580:	movw	r0, #5536	; 0x15a0
   1e584:	strb	r2, [sp, #14]
   1e588:	movt	r0, #2
   1e58c:	sub	r5, r0, r5
   1e590:	mov	r0, #0
   1e594:	mov	r2, #5
   1e598:	bl	1137c <dcgettext@plt>
   1e59c:	mov	r2, r0
   1e5a0:	mov	r0, r4
   1e5a4:	mov	r1, #0
   1e5a8:	mov	r3, r5
   1e5ac:	str	r7, [sp]
   1e5b0:	str	r6, [sp, #4]
   1e5b4:	bl	11418 <error@plt>
   1e5b8:	sub	sp, fp, #16
   1e5bc:	pop	{r4, r5, r6, r7, fp, pc}
   1e5c0:	bl	115ec <abort@plt>
   1e5c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5c8:	add	fp, sp, #28
   1e5cc:	sub	sp, sp, #44	; 0x2c
   1e5d0:	cmp	r2, #37	; 0x25
   1e5d4:	bcs	1f258 <__assert_fail@plt+0xdc54>
   1e5d8:	ldr	sl, [fp, #8]
   1e5dc:	mov	r6, r2
   1e5e0:	mov	r7, r1
   1e5e4:	mov	r4, r0
   1e5e8:	str	r3, [sp, #36]	; 0x24
   1e5ec:	bl	114e4 <__errno_location@plt>
   1e5f0:	mov	r5, r0
   1e5f4:	mov	r0, #0
   1e5f8:	str	r0, [r5]
   1e5fc:	bl	11490 <__ctype_b_loc@plt>
   1e600:	ldr	r1, [r0]
   1e604:	mov	r2, r4
   1e608:	ldrb	r0, [r2], #1
   1e60c:	add	r3, r1, r0, lsl #1
   1e610:	ldrb	r3, [r3, #1]
   1e614:	tst	r3, #32
   1e618:	bne	1e608 <__assert_fail@plt+0xd004>
   1e61c:	cmp	r7, #0
   1e620:	sub	r9, fp, #32
   1e624:	mov	r8, #4
   1e628:	movne	r9, r7
   1e62c:	cmp	r0, #45	; 0x2d
   1e630:	beq	1e9f0 <__assert_fail@plt+0xd3ec>
   1e634:	mov	r0, r4
   1e638:	mov	r1, r9
   1e63c:	mov	r2, r6
   1e640:	mov	r3, #0
   1e644:	bl	11364 <__strtoull_internal@plt>
   1e648:	mov	r7, r1
   1e64c:	ldr	r1, [r9]
   1e650:	cmp	r1, r4
   1e654:	beq	1e68c <__assert_fail@plt+0xd088>
   1e658:	mov	r6, r0
   1e65c:	ldr	r0, [r5]
   1e660:	cmp	r0, #0
   1e664:	beq	1e9a8 <__assert_fail@plt+0xd3a4>
   1e668:	cmp	r0, #34	; 0x22
   1e66c:	bne	1e9f0 <__assert_fail@plt+0xd3ec>
   1e670:	mov	r8, #1
   1e674:	cmp	sl, #0
   1e678:	beq	1f244 <__assert_fail@plt+0xdc40>
   1e67c:	ldrb	r4, [r1]
   1e680:	cmp	r4, #0
   1e684:	bne	1e6d0 <__assert_fail@plt+0xd0cc>
   1e688:	b	1f244 <__assert_fail@plt+0xdc40>
   1e68c:	cmp	sl, #0
   1e690:	beq	1e9f0 <__assert_fail@plt+0xd3ec>
   1e694:	mov	r5, r1
   1e698:	ldrb	r1, [r4]
   1e69c:	cmp	r1, #0
   1e6a0:	beq	1e9f0 <__assert_fail@plt+0xd3ec>
   1e6a4:	mov	r0, sl
   1e6a8:	bl	114c0 <strchr@plt>
   1e6ac:	cmp	r0, #0
   1e6b0:	beq	1e9f0 <__assert_fail@plt+0xd3ec>
   1e6b4:	mov	r1, r5
   1e6b8:	mov	r8, #0
   1e6bc:	mov	r6, #1
   1e6c0:	mov	r7, #0
   1e6c4:	ldrb	r4, [r1]
   1e6c8:	cmp	r4, #0
   1e6cc:	beq	1f244 <__assert_fail@plt+0xdc40>
   1e6d0:	str	r1, [sp, #32]
   1e6d4:	mov	r0, sl
   1e6d8:	mov	r1, r4
   1e6dc:	bl	114c0 <strchr@plt>
   1e6e0:	cmp	r0, #0
   1e6e4:	beq	1e9e4 <__assert_fail@plt+0xd3e0>
   1e6e8:	sub	r0, r4, #69	; 0x45
   1e6ec:	mov	r1, #1
   1e6f0:	mov	r3, #0
   1e6f4:	mov	r5, #1024	; 0x400
   1e6f8:	cmp	r0, #47	; 0x2f
   1e6fc:	str	r1, [sp, #28]
   1e700:	bhi	1e804 <__assert_fail@plt+0xd200>
   1e704:	add	r1, pc, #0
   1e708:	ldr	pc, [r1, r0, lsl #2]
   1e70c:	andeq	lr, r1, ip, asr #15
   1e710:	andeq	lr, r1, r4, lsl #16
   1e714:	andeq	lr, r1, ip, asr #15
   1e718:	andeq	lr, r1, r4, lsl #16
   1e71c:	andeq	lr, r1, r4, lsl #16
   1e720:	andeq	lr, r1, r4, lsl #16
   1e724:	andeq	lr, r1, ip, asr #15
   1e728:	andeq	lr, r1, r4, lsl #16
   1e72c:	andeq	lr, r1, ip, asr #15
   1e730:	andeq	lr, r1, r4, lsl #16
   1e734:	andeq	lr, r1, r4, lsl #16
   1e738:	andeq	lr, r1, ip, asr #15
   1e73c:	andeq	lr, r1, r4, lsl #16
   1e740:	andeq	lr, r1, r4, lsl #16
   1e744:	andeq	lr, r1, r4, lsl #16
   1e748:	andeq	lr, r1, ip, asr #15
   1e74c:	andeq	lr, r1, r4, lsl #16
   1e750:	andeq	lr, r1, r4, lsl #16
   1e754:	andeq	lr, r1, r4, lsl #16
   1e758:	andeq	lr, r1, r4, lsl #16
   1e75c:	andeq	lr, r1, ip, asr #15
   1e760:	andeq	lr, r1, ip, asr #15
   1e764:	andeq	lr, r1, r4, lsl #16
   1e768:	andeq	lr, r1, r4, lsl #16
   1e76c:	andeq	lr, r1, r4, lsl #16
   1e770:	andeq	lr, r1, r4, lsl #16
   1e774:	andeq	lr, r1, r4, lsl #16
   1e778:	andeq	lr, r1, r4, lsl #16
   1e77c:	andeq	lr, r1, r4, lsl #16
   1e780:	andeq	lr, r1, r4, lsl #16
   1e784:	andeq	lr, r1, r4, lsl #16
   1e788:	andeq	lr, r1, r4, lsl #16
   1e78c:	andeq	lr, r1, r4, lsl #16
   1e790:	andeq	lr, r1, r4, lsl #16
   1e794:	andeq	lr, r1, ip, asr #15
   1e798:	andeq	lr, r1, r4, lsl #16
   1e79c:	andeq	lr, r1, r4, lsl #16
   1e7a0:	andeq	lr, r1, r4, lsl #16
   1e7a4:	andeq	lr, r1, ip, asr #15
   1e7a8:	andeq	lr, r1, r4, lsl #16
   1e7ac:	andeq	lr, r1, ip, asr #15
   1e7b0:	andeq	lr, r1, r4, lsl #16
   1e7b4:	andeq	lr, r1, r4, lsl #16
   1e7b8:	andeq	lr, r1, r4, lsl #16
   1e7bc:	andeq	lr, r1, r4, lsl #16
   1e7c0:	andeq	lr, r1, r4, lsl #16
   1e7c4:	andeq	lr, r1, r4, lsl #16
   1e7c8:	andeq	lr, r1, ip, asr #15
   1e7cc:	mov	r0, sl
   1e7d0:	mov	r1, #48	; 0x30
   1e7d4:	bl	114c0 <strchr@plt>
   1e7d8:	cmp	r0, #0
   1e7dc:	beq	1e800 <__assert_fail@plt+0xd1fc>
   1e7e0:	ldr	r1, [sp, #32]
   1e7e4:	ldrb	r0, [r1, #1]
   1e7e8:	cmp	r0, #66	; 0x42
   1e7ec:	cmpne	r0, #68	; 0x44
   1e7f0:	bne	1e9b8 <__assert_fail@plt+0xd3b4>
   1e7f4:	mov	r5, #1000	; 0x3e8
   1e7f8:	mov	r0, #2
   1e7fc:	str	r0, [sp, #28]
   1e800:	mov	r3, #0
   1e804:	sub	r0, r4, #66	; 0x42
   1e808:	cmp	r0, #53	; 0x35
   1e80c:	bhi	1e9e4 <__assert_fail@plt+0xd3e0>
   1e810:	add	r1, pc, #0
   1e814:	ldr	pc, [r1, r0, lsl #2]
   1e818:	andeq	lr, r1, r4, asr sp
   1e81c:	andeq	lr, r1, r4, ror #19
   1e820:	andeq	lr, r1, r4, ror #19
   1e824:	andeq	lr, r1, ip, ror sp
   1e828:	andeq	lr, r1, r4, ror #19
   1e82c:	strdeq	lr, [r1], -r0
   1e830:	andeq	lr, r1, r4, ror #19
   1e834:	andeq	lr, r1, r4, ror #19
   1e838:	andeq	lr, r1, r4, ror #19
   1e83c:	strdeq	lr, [r1], -ip
   1e840:	andeq	lr, r1, r4, ror #19
   1e844:	andeq	lr, r1, r4, asr #20
   1e848:	andeq	lr, r1, r4, ror #19
   1e84c:	andeq	lr, r1, r4, ror #19
   1e850:	ldrdeq	lr, [r1], -r0
   1e854:	andeq	lr, r1, r4, ror #19
   1e858:	andeq	lr, r1, r4, ror #19
   1e85c:	andeq	lr, r1, r4, ror #19
   1e860:	ldrdeq	lr, [r1], -r0
   1e864:	andeq	lr, r1, r4, ror #19
   1e868:	andeq	lr, r1, r4, ror #19
   1e86c:	andeq	lr, r1, r4, ror #19
   1e870:	andeq	lr, r1, r4, ror #19
   1e874:	strdeq	lr, [r1], -r8
   1e878:			; <UNDEFINED> instruction: 0x0001ebb8
   1e87c:	andeq	lr, r1, r4, ror #19
   1e880:	andeq	lr, r1, r4, ror #19
   1e884:	andeq	lr, r1, r4, ror #19
   1e888:	andeq	lr, r1, r4, ror #19
   1e88c:	andeq	lr, r1, r4, ror #19
   1e890:	andeq	lr, r1, r4, ror #19
   1e894:	andeq	lr, r1, r4, ror #19
   1e898:	andeq	pc, r1, ip, asr #3
   1e89c:	andeq	pc, r1, r4, lsr #4
   1e8a0:	andeq	lr, r1, r4, ror #19
   1e8a4:	andeq	lr, r1, r4, ror #19
   1e8a8:	andeq	lr, r1, r4, ror #19
   1e8ac:	strdeq	lr, [r1], -r0
   1e8b0:	andeq	lr, r1, r4, ror #19
   1e8b4:	andeq	lr, r1, r4, ror #19
   1e8b8:	andeq	lr, r1, r4, ror #19
   1e8bc:	strdeq	lr, [r1], -ip
   1e8c0:	andeq	lr, r1, r4, ror #19
   1e8c4:	andeq	lr, r1, r4, asr #20
   1e8c8:	andeq	lr, r1, r4, ror #19
   1e8cc:	andeq	lr, r1, r4, ror #19
   1e8d0:	andeq	lr, r1, r4, ror #19
   1e8d4:	andeq	lr, r1, r4, ror #19
   1e8d8:	andeq	lr, r1, r4, ror #19
   1e8dc:	andeq	lr, r1, r4, ror #19
   1e8e0:	ldrdeq	lr, [r1], -r0
   1e8e4:	andeq	lr, r1, r4, ror #19
   1e8e8:	andeq	lr, r1, r4, ror #19
   1e8ec:	andeq	pc, r1, r0, lsl #4
   1e8f0:	mvn	r0, #0
   1e8f4:	mvn	r1, #0
   1e8f8:	mov	r2, r5
   1e8fc:	mov	sl, r3
   1e900:	bl	1f760 <__assert_fail@plt+0xe15c>
   1e904:	subs	r3, r0, r6
   1e908:	umull	r4, r2, r6, r5
   1e90c:	mov	lr, #0
   1e910:	str	r1, [sp, #20]
   1e914:	sbcs	r3, r1, r7
   1e918:	movwcc	lr, #1
   1e91c:	mla	ip, r6, sl, r2
   1e920:	mov	r2, r1
   1e924:	mov	r2, #0
   1e928:	cmp	lr, #0
   1e92c:	mla	r7, r7, r5, ip
   1e930:	mvnne	r4, #0
   1e934:	mvnne	r7, #0
   1e938:	subs	r6, r0, r4
   1e93c:	sbcs	r6, r1, r7
   1e940:	umull	r3, r6, r4, r5
   1e944:	movwcc	r2, #1
   1e948:	cmp	r2, #0
   1e94c:	mvnne	r3, #0
   1e950:	cmp	r2, #0
   1e954:	str	r6, [sp, #16]
   1e958:	umull	r6, ip, r3, r5
   1e95c:	mla	r1, r3, sl, ip
   1e960:	ldr	ip, [sp, #16]
   1e964:	str	r1, [sp, #12]
   1e968:	mla	r4, r4, sl, ip
   1e96c:	mla	r4, r7, r5, r4
   1e970:	mvnne	r4, #0
   1e974:	subs	r0, r0, r3
   1e978:	ldr	r0, [sp, #20]
   1e97c:	ldr	r7, [sp, #12]
   1e980:	sbcs	r0, r0, r4
   1e984:	mov	r0, #0
   1e988:	mla	r7, r4, r5, r7
   1e98c:	movwcc	r0, #1
   1e990:	cmp	r0, #0
   1e994:	mov	r1, r0
   1e998:	orr	r0, lr, r2
   1e99c:	mvnne	r7, #0
   1e9a0:	mvnne	r6, #0
   1e9a4:	b	1eff0 <__assert_fail@plt+0xd9ec>
   1e9a8:	mov	r8, r0
   1e9ac:	cmp	sl, #0
   1e9b0:	bne	1e67c <__assert_fail@plt+0xd078>
   1e9b4:	b	1f244 <__assert_fail@plt+0xdc40>
   1e9b8:	cmp	r0, #105	; 0x69
   1e9bc:	mov	r3, #0
   1e9c0:	bne	1e804 <__assert_fail@plt+0xd200>
   1e9c4:	ldrb	r0, [r1, #2]
   1e9c8:	mov	r1, #1
   1e9cc:	cmp	r0, #66	; 0x42
   1e9d0:	movweq	r1, #3
   1e9d4:	str	r1, [sp, #28]
   1e9d8:	sub	r0, r4, #66	; 0x42
   1e9dc:	cmp	r0, #53	; 0x35
   1e9e0:	bls	1e810 <__assert_fail@plt+0xd20c>
   1e9e4:	ldr	r0, [sp, #36]	; 0x24
   1e9e8:	orr	r8, r8, #2
   1e9ec:	strd	r6, [r0]
   1e9f0:	mov	r0, r8
   1e9f4:	sub	sp, fp, #28
   1e9f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9fc:	mvn	r0, #0
   1ea00:	mvn	r1, #0
   1ea04:	mov	r2, r5
   1ea08:	mov	r4, r3
   1ea0c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1ea10:	subs	r0, r0, r6
   1ea14:	mov	r2, #0
   1ea18:	sbcs	r0, r1, r7
   1ea1c:	umull	r0, r1, r6, r5
   1ea20:	movwcc	r2, #1
   1ea24:	cmp	r2, #0
   1ea28:	mla	r1, r6, r4, r1
   1ea2c:	mov	r3, r2
   1ea30:	mvnne	r0, #0
   1ea34:	mla	r7, r7, r5, r1
   1ea38:	mvnne	r7, #0
   1ea3c:	mov	r6, r0
   1ea40:	b	1f224 <__assert_fail@plt+0xdc20>
   1ea44:	mvn	r0, #0
   1ea48:	mvn	r1, #0
   1ea4c:	mov	r2, r5
   1ea50:	str	r3, [sp, #24]
   1ea54:	bl	1f760 <__assert_fail@plt+0xe15c>
   1ea58:	subs	r3, r0, r6
   1ea5c:	mov	ip, r0
   1ea60:	umull	r4, r0, r6, r5
   1ea64:	mov	sl, #0
   1ea68:	sbcs	r3, r1, r7
   1ea6c:	mov	r3, #0
   1ea70:	movwcc	r3, #1
   1ea74:	cmp	r3, #0
   1ea78:	str	r0, [sp, #20]
   1ea7c:	ldr	r0, [sp, #24]
   1ea80:	mvnne	r4, #0
   1ea84:	cmp	r3, #0
   1ea88:	umull	lr, r2, r4, r5
   1ea8c:	mla	r2, r4, r0, r2
   1ea90:	str	r2, [sp, #16]
   1ea94:	ldr	r2, [sp, #20]
   1ea98:	mla	r6, r6, r0, r2
   1ea9c:	ldr	r0, [sp, #16]
   1eaa0:	mla	r6, r7, r5, r6
   1eaa4:	mvnne	r6, #0
   1eaa8:	mla	r7, r6, r5, r0
   1eaac:	subs	r0, ip, r4
   1eab0:	sbcs	r0, r1, r6
   1eab4:	movwcc	sl, #1
   1eab8:	cmp	sl, #0
   1eabc:	orr	r3, r3, sl
   1eac0:	mvnne	lr, #0
   1eac4:	mvnne	r7, #0
   1eac8:	mov	r6, lr
   1eacc:	b	1f224 <__assert_fail@plt+0xdc20>
   1ead0:	mvn	r0, #0
   1ead4:	mvn	r1, #0
   1ead8:	mov	r2, r5
   1eadc:	mov	sl, r3
   1eae0:	bl	1f760 <__assert_fail@plt+0xe15c>
   1eae4:	subs	r3, r0, r6
   1eae8:	mov	ip, r1
   1eaec:	umull	r2, lr, r6, r5
   1eaf0:	str	r0, [sp, #20]
   1eaf4:	sbcs	r3, r1, r7
   1eaf8:	mov	r1, #0
   1eafc:	str	ip, [sp, #16]
   1eb00:	movwcc	r1, #1
   1eb04:	mla	r6, r6, sl, lr
   1eb08:	mov	lr, #0
   1eb0c:	cmp	r1, #0
   1eb10:	mla	r7, r7, r5, r6
   1eb14:	mvnne	r2, #0
   1eb18:	cmp	r1, #0
   1eb1c:	umull	r3, r4, r2, r5
   1eb20:	mvnne	r7, #0
   1eb24:	mla	r4, r2, sl, r4
   1eb28:	subs	r2, r0, r2
   1eb2c:	sbcs	r2, ip, r7
   1eb30:	mla	r4, r7, r5, r4
   1eb34:	mov	r2, #0
   1eb38:	movwcc	lr, #1
   1eb3c:	cmp	lr, #0
   1eb40:	mvnne	r3, #0
   1eb44:	mvnne	r4, #0
   1eb48:	subs	r7, r0, r3
   1eb4c:	mov	r0, r5
   1eb50:	sbcs	r7, ip, r4
   1eb54:	umull	r5, r7, r3, r5
   1eb58:	movwcc	r2, #1
   1eb5c:	cmp	r2, #0
   1eb60:	mla	r3, r3, sl, r7
   1eb64:	mvnne	r5, #0
   1eb68:	cmp	r2, #0
   1eb6c:	mla	r3, r4, r0, r3
   1eb70:	umull	r6, ip, r5, r0
   1eb74:	mvnne	r3, #0
   1eb78:	mla	ip, r5, sl, ip
   1eb7c:	mla	r7, r3, r0, ip
   1eb80:	ldr	r0, [sp, #20]
   1eb84:	subs	r0, r0, r5
   1eb88:	ldr	r0, [sp, #16]
   1eb8c:	sbcs	r0, r0, r3
   1eb90:	mov	r0, #0
   1eb94:	movwcc	r0, #1
   1eb98:	cmp	r0, #0
   1eb9c:	mov	r3, r0
   1eba0:	orr	r0, r1, lr
   1eba4:	orr	r0, r0, r2
   1eba8:	mvnne	r7, #0
   1ebac:	mvnne	r6, #0
   1ebb0:	orr	r3, r0, r3
   1ebb4:	b	1f224 <__assert_fail@plt+0xdc20>
   1ebb8:	mvn	r0, #0
   1ebbc:	mvn	r1, #0
   1ebc0:	mov	r2, r5
   1ebc4:	mov	r4, r3
   1ebc8:	str	r3, [sp, #24]
   1ebcc:	bl	1f760 <__assert_fail@plt+0xe15c>
   1ebd0:	umull	r3, r2, r6, r5
   1ebd4:	mla	r2, r6, r4, r2
   1ebd8:	subs	r6, r0, r6
   1ebdc:	sbcs	r6, r1, r7
   1ebe0:	mov	r6, #0
   1ebe4:	mla	r2, r7, r5, r2
   1ebe8:	mov	r7, #0
   1ebec:	movwcc	r6, #1
   1ebf0:	cmp	r6, #0
   1ebf4:	str	r6, [sp, #20]
   1ebf8:	mvnne	r3, #0
   1ebfc:	mvnne	r2, #0
   1ec00:	subs	r4, r0, r3
   1ec04:	umull	r6, ip, r3, r5
   1ec08:	sbcs	r4, r1, r2
   1ec0c:	ldr	r4, [sp, #24]
   1ec10:	movwcc	r7, #1
   1ec14:	cmp	r7, #0
   1ec18:	mov	lr, r7
   1ec1c:	str	r7, [sp, #16]
   1ec20:	mvnne	r6, #0
   1ec24:	cmp	lr, #0
   1ec28:	mov	lr, #0
   1ec2c:	umull	sl, r7, r6, r5
   1ec30:	mla	r3, r3, r4, ip
   1ec34:	mla	r2, r2, r5, r3
   1ec38:	mvnne	r2, #0
   1ec3c:	subs	r3, r0, r6
   1ec40:	mla	r7, r6, r4, r7
   1ec44:	mov	r4, r0
   1ec48:	mov	r0, #0
   1ec4c:	mla	r7, r2, r5, r7
   1ec50:	sbcs	r2, r1, r2
   1ec54:	mov	r3, r4
   1ec58:	movwcc	r0, #1
   1ec5c:	str	r3, [sp, #4]
   1ec60:	cmp	r0, #0
   1ec64:	str	r0, [sp, #12]
   1ec68:	mov	r0, r1
   1ec6c:	mvnne	sl, #0
   1ec70:	mvnne	r7, #0
   1ec74:	str	r0, [sp, #8]
   1ec78:	subs	r2, r4, sl
   1ec7c:	ldr	r4, [sp, #24]
   1ec80:	sbcs	r2, r1, r7
   1ec84:	umull	r6, r2, sl, r5
   1ec88:	movwcc	lr, #1
   1ec8c:	cmp	lr, #0
   1ec90:	mvnne	r6, #0
   1ec94:	mla	r2, sl, r4, r2
   1ec98:	cmp	lr, #0
   1ec9c:	umull	r1, ip, r6, r5
   1eca0:	mla	r2, r7, r5, r2
   1eca4:	mvnne	r2, #0
   1eca8:	mla	ip, r6, r4, ip
   1ecac:	subs	r6, r3, r6
   1ecb0:	mla	r7, r2, r5, ip
   1ecb4:	sbcs	r2, r0, r2
   1ecb8:	mov	ip, #0
   1ecbc:	mov	r2, #0
   1ecc0:	movwcc	ip, #1
   1ecc4:	cmp	ip, #0
   1ecc8:	mvnne	r1, #0
   1eccc:	mvnne	r7, #0
   1ecd0:	subs	r6, r3, r1
   1ecd4:	ldr	r3, [sp, #24]
   1ecd8:	sbcs	r6, r0, r7
   1ecdc:	umull	r0, sl, r1, r5
   1ece0:	movwcc	r2, #1
   1ece4:	cmp	r2, #0
   1ece8:	mvnne	r0, #0
   1ecec:	mla	r1, r1, r3, sl
   1ecf0:	cmp	r2, #0
   1ecf4:	umull	r6, r4, r0, r5
   1ecf8:	mla	r1, r7, r5, r1
   1ecfc:	mvnne	r1, #0
   1ed00:	mla	r4, r0, r3, r4
   1ed04:	ldr	r3, [sp, #4]
   1ed08:	mla	r7, r1, r5, r4
   1ed0c:	ldr	r5, [sp, #16]
   1ed10:	subs	r0, r3, r0
   1ed14:	ldr	r0, [sp, #8]
   1ed18:	sbcs	r0, r0, r1
   1ed1c:	mov	r0, #0
   1ed20:	movwcc	r0, #1
   1ed24:	cmp	r0, #0
   1ed28:	mov	r1, r0
   1ed2c:	ldr	r0, [sp, #20]
   1ed30:	mvnne	r7, #0
   1ed34:	mvnne	r6, #0
   1ed38:	orr	r0, r0, r5
   1ed3c:	ldr	r5, [sp, #12]
   1ed40:	orr	r0, r0, r5
   1ed44:	orr	r0, r0, lr
   1ed48:	orr	r0, r0, ip
   1ed4c:	orr	r0, r0, r2
   1ed50:	b	1f1c0 <__assert_fail@plt+0xdbbc>
   1ed54:	mov	r1, #0
   1ed58:	lsl	r2, r7, #10
   1ed5c:	lsl	r0, r6, #10
   1ed60:	lsr	r3, r7, #22
   1ed64:	cmp	r1, r7, lsr #22
   1ed68:	orr	r2, r2, r6, lsr #22
   1ed6c:	mvnne	r0, #0
   1ed70:	movwne	r3, #1
   1ed74:	cmp	r1, r7, lsr #22
   1ed78:	b	1f1f0 <__assert_fail@plt+0xdbec>
   1ed7c:	mvn	r0, #0
   1ed80:	mvn	r1, #0
   1ed84:	mov	r2, r5
   1ed88:	mov	sl, r3
   1ed8c:	bl	1f760 <__assert_fail@plt+0xe15c>
   1ed90:	subs	r2, r0, r6
   1ed94:	mov	ip, r0
   1ed98:	mov	r0, #0
   1ed9c:	sbcs	r2, r1, r7
   1eda0:	umull	r4, r2, r6, r5
   1eda4:	movwcc	r0, #1
   1eda8:	cmp	r0, #0
   1edac:	mla	r2, r6, sl, r2
   1edb0:	str	r0, [sp, #20]
   1edb4:	mvnne	r4, #0
   1edb8:	cmp	r0, #0
   1edbc:	mla	r2, r7, r5, r2
   1edc0:	mov	r0, #0
   1edc4:	umull	lr, r3, r4, r5
   1edc8:	mvnne	r2, #0
   1edcc:	mla	r3, r4, sl, r3
   1edd0:	mla	r6, r2, r5, r3
   1edd4:	subs	r3, ip, r4
   1edd8:	mov	r3, r1
   1eddc:	sbcs	r2, r1, r2
   1ede0:	str	r3, [sp, #8]
   1ede4:	movwcc	r0, #1
   1ede8:	cmp	r0, #0
   1edec:	str	r0, [sp, #16]
   1edf0:	mov	r0, ip
   1edf4:	mvnne	lr, #0
   1edf8:	mvnne	r6, #0
   1edfc:	str	r0, [sp, #12]
   1ee00:	subs	r2, ip, lr
   1ee04:	umull	r7, r4, lr, r5
   1ee08:	sbcs	r2, r1, r6
   1ee0c:	mov	r2, #0
   1ee10:	movwcc	r2, #1
   1ee14:	mla	r4, lr, sl, r4
   1ee18:	cmp	r2, #0
   1ee1c:	mla	r6, r6, r5, r4
   1ee20:	mov	r4, #0
   1ee24:	mvnne	r7, #0
   1ee28:	cmp	r2, #0
   1ee2c:	umull	r1, ip, r7, r5
   1ee30:	mvnne	r6, #0
   1ee34:	mla	ip, r7, sl, ip
   1ee38:	subs	r7, r0, r7
   1ee3c:	sbcs	r7, r3, r6
   1ee40:	mla	lr, r6, r5, ip
   1ee44:	mov	ip, #0
   1ee48:	movwcc	ip, #1
   1ee4c:	cmp	ip, #0
   1ee50:	mvnne	r1, #0
   1ee54:	mvnne	lr, #0
   1ee58:	subs	r7, r0, r1
   1ee5c:	sbcs	r7, r3, lr
   1ee60:	umull	r0, r7, r1, r5
   1ee64:	movwcc	r4, #1
   1ee68:	cmp	r4, #0
   1ee6c:	mla	r1, r1, sl, r7
   1ee70:	mvnne	r0, #0
   1ee74:	cmp	r4, #0
   1ee78:	mla	r1, lr, r5, r1
   1ee7c:	umull	r6, r3, r0, r5
   1ee80:	mvnne	r1, #0
   1ee84:	mla	r3, r0, sl, r3
   1ee88:	mla	r7, r1, r5, r3
   1ee8c:	ldr	r3, [sp, #12]
   1ee90:	subs	r0, r3, r0
   1ee94:	ldr	r0, [sp, #8]
   1ee98:	ldr	r3, [sp, #16]
   1ee9c:	sbcs	r0, r0, r1
   1eea0:	mov	r0, #0
   1eea4:	movwcc	r0, #1
   1eea8:	cmp	r0, #0
   1eeac:	mov	r1, r0
   1eeb0:	ldr	r0, [sp, #20]
   1eeb4:	mvnne	r7, #0
   1eeb8:	mvnne	r6, #0
   1eebc:	orr	r0, r0, r3
   1eec0:	orr	r0, r0, r2
   1eec4:	orr	r0, r0, ip
   1eec8:	orr	r0, r0, r4
   1eecc:	b	1eff0 <__assert_fail@plt+0xd9ec>
   1eed0:	mvn	r0, #0
   1eed4:	mvn	r1, #0
   1eed8:	mov	r2, r5
   1eedc:	mov	sl, r3
   1eee0:	bl	1f760 <__assert_fail@plt+0xe15c>
   1eee4:	umull	r3, r2, r6, r5
   1eee8:	mov	lr, r1
   1eeec:	mov	r1, r0
   1eef0:	mla	r2, r6, sl, r2
   1eef4:	subs	r6, r0, r6
   1eef8:	mov	r0, #0
   1eefc:	sbcs	r6, lr, r7
   1ef00:	mla	r2, r7, r5, r2
   1ef04:	movwcc	r0, #1
   1ef08:	cmp	r0, #0
   1ef0c:	str	r0, [sp, #20]
   1ef10:	mov	r0, r1
   1ef14:	mvnne	r3, #0
   1ef18:	mvnne	r2, #0
   1ef1c:	str	r0, [sp, #16]
   1ef20:	subs	r4, r1, r3
   1ef24:	umull	r7, ip, r3, r5
   1ef28:	sbcs	r4, lr, r2
   1ef2c:	mov	r4, #0
   1ef30:	movwcc	r4, #1
   1ef34:	mla	r3, r3, sl, ip
   1ef38:	mov	ip, #0
   1ef3c:	cmp	r4, #0
   1ef40:	mla	r2, r2, r5, r3
   1ef44:	mvnne	r7, #0
   1ef48:	cmp	r4, #0
   1ef4c:	umull	r1, r6, r7, r5
   1ef50:	mvnne	r2, #0
   1ef54:	mla	r6, r7, sl, r6
   1ef58:	mla	r3, r2, r5, r6
   1ef5c:	subs	r6, r0, r7
   1ef60:	sbcs	r2, lr, r2
   1ef64:	mov	r2, #0
   1ef68:	movwcc	ip, #1
   1ef6c:	cmp	ip, #0
   1ef70:	mvnne	r1, #0
   1ef74:	mvnne	r3, #0
   1ef78:	subs	r6, r0, r1
   1ef7c:	sbcs	r6, lr, r3
   1ef80:	umull	r0, r6, r1, r5
   1ef84:	movwcc	r2, #1
   1ef88:	cmp	r2, #0
   1ef8c:	mvnne	r0, #0
   1ef90:	cmp	r2, #0
   1ef94:	str	r6, [sp, #12]
   1ef98:	umull	r6, r7, r0, r5
   1ef9c:	mla	r7, r0, sl, r7
   1efa0:	str	r7, [sp, #8]
   1efa4:	ldr	r7, [sp, #12]
   1efa8:	mla	r1, r1, sl, r7
   1efac:	mla	r1, r3, r5, r1
   1efb0:	ldr	r3, [sp, #8]
   1efb4:	mvnne	r1, #0
   1efb8:	mla	r7, r1, r5, r3
   1efbc:	ldr	r3, [sp, #16]
   1efc0:	subs	r0, r3, r0
   1efc4:	sbcs	r0, lr, r1
   1efc8:	mov	r0, #0
   1efcc:	movwcc	r0, #1
   1efd0:	cmp	r0, #0
   1efd4:	mov	r1, r0
   1efd8:	ldr	r0, [sp, #20]
   1efdc:	mvnne	r7, #0
   1efe0:	mvnne	r6, #0
   1efe4:	orr	r0, r0, r4
   1efe8:	orr	r0, r0, ip
   1efec:	orr	r0, r0, r2
   1eff0:	orr	r3, r0, r1
   1eff4:	b	1f224 <__assert_fail@plt+0xdc20>
   1eff8:	mvn	r0, #0
   1effc:	mvn	r1, #0
   1f000:	mov	r2, r5
   1f004:	mov	sl, r3
   1f008:	bl	1f760 <__assert_fail@plt+0xe15c>
   1f00c:	mov	ip, r1
   1f010:	subs	r1, r0, r6
   1f014:	umull	r3, lr, r6, r5
   1f018:	mov	r2, r5
   1f01c:	sbcs	r1, ip, r7
   1f020:	mov	r1, #0
   1f024:	str	ip, [sp, #4]
   1f028:	movwcc	r1, #1
   1f02c:	mla	r6, r6, sl, lr
   1f030:	cmp	r1, #0
   1f034:	mla	r7, r7, r2, r6
   1f038:	str	r1, [sp, #20]
   1f03c:	mvnne	r3, #0
   1f040:	cmp	r1, #0
   1f044:	mov	r1, r0
   1f048:	umull	r4, r5, r3, r5
   1f04c:	mvnne	r7, #0
   1f050:	mov	lr, r1
   1f054:	mla	r5, r3, sl, r5
   1f058:	subs	r3, r0, r3
   1f05c:	sbcs	r0, ip, r7
   1f060:	mov	r0, #0
   1f064:	mla	r5, r7, r2, r5
   1f068:	movwcc	r0, #1
   1f06c:	cmp	r0, #0
   1f070:	str	r0, [sp, #16]
   1f074:	mvnne	r4, #0
   1f078:	mvnne	r5, #0
   1f07c:	subs	r0, r1, r4
   1f080:	mov	r1, #0
   1f084:	sbcs	r0, ip, r5
   1f088:	umull	r3, r0, r4, r2
   1f08c:	movwcc	r1, #1
   1f090:	cmp	r1, #0
   1f094:	mla	r0, r4, sl, r0
   1f098:	mov	r4, lr
   1f09c:	str	r1, [sp, #12]
   1f0a0:	mvnne	r3, #0
   1f0a4:	cmp	r1, #0
   1f0a8:	mla	r0, r5, r2, r0
   1f0ac:	str	r4, [sp]
   1f0b0:	umull	r7, r6, r3, r2
   1f0b4:	mvnne	r0, #0
   1f0b8:	mla	r6, r3, sl, r6
   1f0bc:	subs	r3, lr, r3
   1f0c0:	mov	r3, #0
   1f0c4:	mla	r5, r0, r2, r6
   1f0c8:	sbcs	r0, ip, r0
   1f0cc:	mov	r0, #0
   1f0d0:	movwcc	r0, #1
   1f0d4:	cmp	r0, #0
   1f0d8:	str	r0, [sp, #8]
   1f0dc:	mvnne	r7, #0
   1f0e0:	mvnne	r5, #0
   1f0e4:	subs	r0, lr, r7
   1f0e8:	sbcs	r0, ip, r5
   1f0ec:	umull	r6, r0, r7, r2
   1f0f0:	movwcc	r3, #1
   1f0f4:	cmp	r3, #0
   1f0f8:	mla	r7, r7, sl, r0
   1f0fc:	mov	r0, ip
   1f100:	mvnne	r6, #0
   1f104:	cmp	r3, #0
   1f108:	mla	r7, r5, r2, r7
   1f10c:	mov	r5, #0
   1f110:	umull	r1, lr, r6, r2
   1f114:	mvnne	r7, #0
   1f118:	mla	lr, r6, sl, lr
   1f11c:	subs	r6, r4, r6
   1f120:	mla	lr, r7, r2, lr
   1f124:	sbcs	r7, ip, r7
   1f128:	mov	ip, #0
   1f12c:	movwcc	ip, #1
   1f130:	cmp	ip, #0
   1f134:	mvnne	r1, #0
   1f138:	mvnne	lr, #0
   1f13c:	subs	r7, r4, r1
   1f140:	sbcs	r7, r0, lr
   1f144:	umull	r0, r7, r1, r2
   1f148:	movwcc	r5, #1
   1f14c:	cmp	r5, #0
   1f150:	mla	r1, r1, sl, r7
   1f154:	mvnne	r0, #0
   1f158:	cmp	r5, #0
   1f15c:	mla	r1, lr, r2, r1
   1f160:	umull	r6, r4, r0, r2
   1f164:	mvnne	r1, #0
   1f168:	mla	r4, r0, sl, r4
   1f16c:	mla	r7, r1, r2, r4
   1f170:	ldr	r2, [sp]
   1f174:	subs	r0, r2, r0
   1f178:	ldr	r0, [sp, #4]
   1f17c:	ldr	r2, [sp, #16]
   1f180:	sbcs	r0, r0, r1
   1f184:	mov	r0, #0
   1f188:	movwcc	r0, #1
   1f18c:	cmp	r0, #0
   1f190:	mov	r1, r0
   1f194:	ldr	r0, [sp, #20]
   1f198:	mvnne	r7, #0
   1f19c:	mvnne	r6, #0
   1f1a0:	orr	r0, r0, r2
   1f1a4:	ldr	r2, [sp, #12]
   1f1a8:	orr	r0, r0, r2
   1f1ac:	ldr	r2, [sp, #8]
   1f1b0:	orr	r0, r0, r2
   1f1b4:	orr	r0, r0, r3
   1f1b8:	orr	r0, r0, ip
   1f1bc:	orr	r0, r0, r5
   1f1c0:	orr	r0, r0, r1
   1f1c4:	and	r3, r0, #1
   1f1c8:	b	1f224 <__assert_fail@plt+0xdc20>
   1f1cc:	mov	r1, #0
   1f1d0:	lsl	r2, r7, #9
   1f1d4:	lsl	r0, r6, #9
   1f1d8:	lsr	r3, r7, #23
   1f1dc:	cmp	r1, r7, lsr #23
   1f1e0:	orr	r2, r2, r6, lsr #23
   1f1e4:	mvnne	r0, #0
   1f1e8:	movwne	r3, #1
   1f1ec:	cmp	r1, r7, lsr #23
   1f1f0:	mvnne	r2, #0
   1f1f4:	mov	r6, r0
   1f1f8:	mov	r7, r2
   1f1fc:	b	1f224 <__assert_fail@plt+0xdc20>
   1f200:	lsl	r1, r7, #1
   1f204:	cmp	r7, #0
   1f208:	lsl	r0, r6, #1
   1f20c:	lsr	r3, r7, #31
   1f210:	orr	r1, r1, r6, lsr #31
   1f214:	mvnmi	r0, #0
   1f218:	mvnmi	r1, #0
   1f21c:	mov	r6, r0
   1f220:	mov	r7, r1
   1f224:	ldr	r1, [sp, #32]
   1f228:	ldr	r2, [sp, #28]
   1f22c:	orr	r8, r3, r8
   1f230:	add	r0, r1, r2
   1f234:	str	r0, [r9]
   1f238:	ldrb	r0, [r1, r2]
   1f23c:	cmp	r0, #0
   1f240:	orrne	r8, r8, #2
   1f244:	ldr	r0, [sp, #36]	; 0x24
   1f248:	strd	r6, [r0]
   1f24c:	mov	r0, r8
   1f250:	sub	sp, fp, #28
   1f254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f258:	movw	r0, #5333	; 0x14d5
   1f25c:	movw	r1, #5371	; 0x14fb
   1f260:	movw	r3, #5648	; 0x1610
   1f264:	mov	r2, #85	; 0x55
   1f268:	movt	r0, #2
   1f26c:	movt	r1, #2
   1f270:	movt	r3, #2
   1f274:	bl	11604 <__assert_fail@plt>
   1f278:	clz	r2, r1
   1f27c:	clz	r3, r0
   1f280:	lsr	r2, r2, #5
   1f284:	lsr	r3, r3, #5
   1f288:	orrs	r2, r3, r2
   1f28c:	movwne	r1, #1
   1f290:	movwne	r0, #1
   1f294:	cmp	r1, #0
   1f298:	beq	1f2c8 <__assert_fail@plt+0xdcc4>
   1f29c:	mvn	r2, #-2147483648	; 0x80000000
   1f2a0:	udiv	r2, r2, r1
   1f2a4:	cmp	r2, r0
   1f2a8:	bcs	1f2c8 <__assert_fail@plt+0xdcc4>
   1f2ac:	push	{fp, lr}
   1f2b0:	mov	fp, sp
   1f2b4:	bl	114e4 <__errno_location@plt>
   1f2b8:	mov	r1, #12
   1f2bc:	str	r1, [r0]
   1f2c0:	mov	r0, #0
   1f2c4:	pop	{fp, pc}
   1f2c8:	b	112bc <calloc@plt>
   1f2cc:	cmp	r0, #0
   1f2d0:	movweq	r0, #1
   1f2d4:	cmn	r0, #1
   1f2d8:	ble	1f2e0 <__assert_fail@plt+0xdcdc>
   1f2dc:	b	11430 <malloc@plt>
   1f2e0:	push	{fp, lr}
   1f2e4:	mov	fp, sp
   1f2e8:	bl	114e4 <__errno_location@plt>
   1f2ec:	mov	r1, #12
   1f2f0:	str	r1, [r0]
   1f2f4:	mov	r0, #0
   1f2f8:	pop	{fp, pc}
   1f2fc:	push	{fp, lr}
   1f300:	mov	fp, sp
   1f304:	cmp	r0, #0
   1f308:	beq	1f324 <__assert_fail@plt+0xdd20>
   1f30c:	cmp	r1, #0
   1f310:	beq	1f330 <__assert_fail@plt+0xdd2c>
   1f314:	cmn	r1, #1
   1f318:	ble	1f33c <__assert_fail@plt+0xdd38>
   1f31c:	pop	{fp, lr}
   1f320:	b	11388 <realloc@plt>
   1f324:	mov	r0, r1
   1f328:	pop	{fp, lr}
   1f32c:	b	1f2cc <__assert_fail@plt+0xdcc8>
   1f330:	bl	16600 <__assert_fail@plt+0x4ffc>
   1f334:	mov	r0, #0
   1f338:	pop	{fp, pc}
   1f33c:	bl	114e4 <__errno_location@plt>
   1f340:	mov	r1, #12
   1f344:	str	r1, [r0]
   1f348:	mov	r0, #0
   1f34c:	pop	{fp, pc}
   1f350:	push	{r4, r5, r6, sl, fp, lr}
   1f354:	add	fp, sp, #16
   1f358:	mov	r4, r0
   1f35c:	bl	11400 <__fpending@plt>
   1f360:	ldr	r6, [r4]
   1f364:	mov	r5, r0
   1f368:	mov	r0, r4
   1f36c:	bl	16458 <__assert_fail@plt+0x4e54>
   1f370:	tst	r6, #32
   1f374:	bne	1f3ac <__assert_fail@plt+0xdda8>
   1f378:	cmp	r0, #0
   1f37c:	mov	r4, r0
   1f380:	mvnne	r4, #0
   1f384:	cmp	r5, #0
   1f388:	bne	1f3b8 <__assert_fail@plt+0xddb4>
   1f38c:	cmp	r0, #0
   1f390:	beq	1f3b8 <__assert_fail@plt+0xddb4>
   1f394:	bl	114e4 <__errno_location@plt>
   1f398:	ldr	r0, [r0]
   1f39c:	subs	r4, r0, #9
   1f3a0:	mvnne	r4, #0
   1f3a4:	mov	r0, r4
   1f3a8:	pop	{r4, r5, r6, sl, fp, pc}
   1f3ac:	mvn	r4, #0
   1f3b0:	cmp	r0, #0
   1f3b4:	beq	1f3c0 <__assert_fail@plt+0xddbc>
   1f3b8:	mov	r0, r4
   1f3bc:	pop	{r4, r5, r6, sl, fp, pc}
   1f3c0:	bl	114e4 <__errno_location@plt>
   1f3c4:	mov	r1, #0
   1f3c8:	str	r1, [r0]
   1f3cc:	mov	r0, r4
   1f3d0:	pop	{r4, r5, r6, sl, fp, pc}
   1f3d4:	sub	sp, sp, #8
   1f3d8:	push	{r4, r5, r6, r7, fp, lr}
   1f3dc:	add	fp, sp, #16
   1f3e0:	sub	sp, sp, #8
   1f3e4:	mov	r5, r0
   1f3e8:	add	r0, fp, #8
   1f3ec:	cmp	r1, #11
   1f3f0:	str	r2, [fp, #8]
   1f3f4:	str	r3, [fp, #12]
   1f3f8:	str	r0, [sp, #4]
   1f3fc:	bhi	1f438 <__assert_fail@plt+0xde34>
   1f400:	mov	r0, #1
   1f404:	movw	r2, #1300	; 0x514
   1f408:	tst	r2, r0, lsl r1
   1f40c:	bne	1f4f8 <__assert_fail@plt+0xdef4>
   1f410:	movw	r2, #2570	; 0xa0a
   1f414:	tst	r2, r0, lsl r1
   1f418:	bne	1f460 <__assert_fail@plt+0xde5c>
   1f41c:	cmp	r1, #0
   1f420:	bne	1f438 <__assert_fail@plt+0xde34>
   1f424:	ldr	r0, [sp, #4]
   1f428:	add	r1, r0, #4
   1f42c:	str	r1, [sp, #4]
   1f430:	mov	r1, #0
   1f434:	b	1f504 <__assert_fail@plt+0xdf00>
   1f438:	sub	r0, r1, #1024	; 0x400
   1f43c:	cmp	r0, #10
   1f440:	bhi	1f4f8 <__assert_fail@plt+0xdef4>
   1f444:	mov	r2, #1
   1f448:	movw	r3, #645	; 0x285
   1f44c:	tst	r3, r2, lsl r0
   1f450:	bne	1f4f8 <__assert_fail@plt+0xdef4>
   1f454:	movw	r3, #1282	; 0x502
   1f458:	tst	r3, r2, lsl r0
   1f45c:	beq	1f46c <__assert_fail@plt+0xde68>
   1f460:	mov	r0, r5
   1f464:	bl	11550 <fcntl64@plt>
   1f468:	b	1f510 <__assert_fail@plt+0xdf0c>
   1f46c:	cmp	r0, #6
   1f470:	bne	1f4f8 <__assert_fail@plt+0xdef4>
   1f474:	ldr	r0, [sp, #4]
   1f478:	movw	r7, #9152	; 0x23c0
   1f47c:	movt	r7, #3
   1f480:	add	r1, r0, #4
   1f484:	str	r1, [sp, #4]
   1f488:	ldr	r6, [r0]
   1f48c:	ldr	r0, [r7]
   1f490:	cmp	r0, #0
   1f494:	bmi	1f534 <__assert_fail@plt+0xdf30>
   1f498:	mov	r0, r5
   1f49c:	movw	r1, #1030	; 0x406
   1f4a0:	mov	r2, r6
   1f4a4:	bl	11550 <fcntl64@plt>
   1f4a8:	mov	r4, r0
   1f4ac:	cmn	r0, #1
   1f4b0:	bgt	1f528 <__assert_fail@plt+0xdf24>
   1f4b4:	bl	114e4 <__errno_location@plt>
   1f4b8:	ldr	r0, [r0]
   1f4bc:	cmp	r0, #22
   1f4c0:	bne	1f528 <__assert_fail@plt+0xdf24>
   1f4c4:	mov	r0, r5
   1f4c8:	mov	r1, #0
   1f4cc:	mov	r2, r6
   1f4d0:	bl	11550 <fcntl64@plt>
   1f4d4:	mov	r4, r0
   1f4d8:	cmp	r0, #0
   1f4dc:	bmi	1f514 <__assert_fail@plt+0xdf10>
   1f4e0:	mvn	r0, #0
   1f4e4:	str	r0, [r7]
   1f4e8:	mov	r0, #1
   1f4ec:	cmp	r0, #0
   1f4f0:	bne	1f560 <__assert_fail@plt+0xdf5c>
   1f4f4:	b	1f514 <__assert_fail@plt+0xdf10>
   1f4f8:	ldr	r0, [sp, #4]
   1f4fc:	add	r2, r0, #4
   1f500:	str	r2, [sp, #4]
   1f504:	ldr	r2, [r0]
   1f508:	mov	r0, r5
   1f50c:	bl	11550 <fcntl64@plt>
   1f510:	mov	r4, r0
   1f514:	mov	r0, r4
   1f518:	sub	sp, fp, #16
   1f51c:	pop	{r4, r5, r6, r7, fp, lr}
   1f520:	add	sp, sp, #8
   1f524:	bx	lr
   1f528:	mov	r0, #1
   1f52c:	str	r0, [r7]
   1f530:	b	1f514 <__assert_fail@plt+0xdf10>
   1f534:	mov	r0, r5
   1f538:	mov	r1, #0
   1f53c:	mov	r2, r6
   1f540:	bl	11550 <fcntl64@plt>
   1f544:	mov	r4, r0
   1f548:	ldr	r0, [r7]
   1f54c:	add	r0, r0, #1
   1f550:	clz	r0, r0
   1f554:	lsr	r0, r0, #5
   1f558:	cmp	r0, #0
   1f55c:	beq	1f514 <__assert_fail@plt+0xdf10>
   1f560:	cmp	r4, #0
   1f564:	bmi	1f514 <__assert_fail@plt+0xdf10>
   1f568:	mov	r0, r4
   1f56c:	mov	r1, #1
   1f570:	bl	11550 <fcntl64@plt>
   1f574:	cmp	r0, #0
   1f578:	bmi	1f594 <__assert_fail@plt+0xdf90>
   1f57c:	orr	r2, r0, #1
   1f580:	mov	r0, r4
   1f584:	mov	r1, #2
   1f588:	bl	11550 <fcntl64@plt>
   1f58c:	cmn	r0, #1
   1f590:	bne	1f514 <__assert_fail@plt+0xdf10>
   1f594:	bl	114e4 <__errno_location@plt>
   1f598:	ldr	r6, [r0]
   1f59c:	mov	r5, r0
   1f5a0:	mov	r0, r4
   1f5a4:	bl	115f8 <close@plt>
   1f5a8:	str	r6, [r5]
   1f5ac:	mvn	r4, #0
   1f5b0:	b	1f514 <__assert_fail@plt+0xdf10>
   1f5b4:	push	{fp, lr}
   1f5b8:	mov	fp, sp
   1f5bc:	mov	r0, #14
   1f5c0:	bl	1158c <nl_langinfo@plt>
   1f5c4:	movw	r1, #3108	; 0xc24
   1f5c8:	cmp	r0, #0
   1f5cc:	movt	r1, #2
   1f5d0:	movne	r1, r0
   1f5d4:	movw	r0, #5727	; 0x165f
   1f5d8:	ldrb	r2, [r1]
   1f5dc:	movt	r0, #2
   1f5e0:	cmp	r2, #0
   1f5e4:	movne	r0, r1
   1f5e8:	pop	{fp, pc}
   1f5ec:	push	{r4, r5, r6, r7, fp, lr}
   1f5f0:	add	fp, sp, #16
   1f5f4:	sub	sp, sp, #8
   1f5f8:	cmp	r0, #0
   1f5fc:	add	r5, sp, #4
   1f600:	mov	r7, r2
   1f604:	mov	r4, r1
   1f608:	movne	r5, r0
   1f60c:	mov	r0, r5
   1f610:	bl	1140c <mbrtowc@plt>
   1f614:	mov	r6, r0
   1f618:	cmp	r7, #0
   1f61c:	beq	1f644 <__assert_fail@plt+0xe040>
   1f620:	cmn	r6, #2
   1f624:	bcc	1f644 <__assert_fail@plt+0xe040>
   1f628:	mov	r0, #0
   1f62c:	bl	166f4 <__assert_fail@plt+0x50f0>
   1f630:	cmp	r0, #0
   1f634:	bne	1f644 <__assert_fail@plt+0xe040>
   1f638:	ldrb	r0, [r4]
   1f63c:	mov	r6, #1
   1f640:	str	r0, [r5]
   1f644:	mov	r0, r6
   1f648:	sub	sp, fp, #16
   1f64c:	pop	{r4, r5, r6, r7, fp, pc}
   1f650:	cmp	r2, #0
   1f654:	beq	1f684 <__assert_fail@plt+0xe080>
   1f658:	mvn	r3, #0
   1f65c:	udiv	r3, r3, r2
   1f660:	cmp	r3, r1
   1f664:	bcs	1f684 <__assert_fail@plt+0xe080>
   1f668:	push	{fp, lr}
   1f66c:	mov	fp, sp
   1f670:	bl	114e4 <__errno_location@plt>
   1f674:	mov	r1, #12
   1f678:	str	r1, [r0]
   1f67c:	mov	r0, #0
   1f680:	pop	{fp, pc}
   1f684:	mul	r1, r2, r1
   1f688:	b	1f2fc <__assert_fail@plt+0xdcf8>
   1f68c:	cmp	r3, #0
   1f690:	cmpeq	r2, #0
   1f694:	bne	1f6b8 <__assert_fail@plt+0xe0b4>
   1f698:	cmp	r1, #0
   1f69c:	movlt	r1, #-2147483648	; 0x80000000
   1f6a0:	movlt	r0, #0
   1f6a4:	blt	1f6b4 <__assert_fail@plt+0xe0b0>
   1f6a8:	cmpeq	r0, #0
   1f6ac:	mvnne	r1, #-2147483648	; 0x80000000
   1f6b0:	mvnne	r0, #0
   1f6b4:	b	1f79c <__assert_fail@plt+0xe198>
   1f6b8:	sub	sp, sp, #8
   1f6bc:	push	{sp, lr}
   1f6c0:	cmp	r1, #0
   1f6c4:	blt	1f6e4 <__assert_fail@plt+0xe0e0>
   1f6c8:	cmp	r3, #0
   1f6cc:	blt	1f718 <__assert_fail@plt+0xe114>
   1f6d0:	bl	1f7ac <__assert_fail@plt+0xe1a8>
   1f6d4:	ldr	lr, [sp, #4]
   1f6d8:	add	sp, sp, #8
   1f6dc:	pop	{r2, r3}
   1f6e0:	bx	lr
   1f6e4:	rsbs	r0, r0, #0
   1f6e8:	sbc	r1, r1, r1, lsl #1
   1f6ec:	cmp	r3, #0
   1f6f0:	blt	1f73c <__assert_fail@plt+0xe138>
   1f6f4:	bl	1f7ac <__assert_fail@plt+0xe1a8>
   1f6f8:	ldr	lr, [sp, #4]
   1f6fc:	add	sp, sp, #8
   1f700:	pop	{r2, r3}
   1f704:	rsbs	r0, r0, #0
   1f708:	sbc	r1, r1, r1, lsl #1
   1f70c:	rsbs	r2, r2, #0
   1f710:	sbc	r3, r3, r3, lsl #1
   1f714:	bx	lr
   1f718:	rsbs	r2, r2, #0
   1f71c:	sbc	r3, r3, r3, lsl #1
   1f720:	bl	1f7ac <__assert_fail@plt+0xe1a8>
   1f724:	ldr	lr, [sp, #4]
   1f728:	add	sp, sp, #8
   1f72c:	pop	{r2, r3}
   1f730:	rsbs	r0, r0, #0
   1f734:	sbc	r1, r1, r1, lsl #1
   1f738:	bx	lr
   1f73c:	rsbs	r2, r2, #0
   1f740:	sbc	r3, r3, r3, lsl #1
   1f744:	bl	1f7ac <__assert_fail@plt+0xe1a8>
   1f748:	ldr	lr, [sp, #4]
   1f74c:	add	sp, sp, #8
   1f750:	pop	{r2, r3}
   1f754:	rsbs	r2, r2, #0
   1f758:	sbc	r3, r3, r3, lsl #1
   1f75c:	bx	lr
   1f760:	cmp	r3, #0
   1f764:	cmpeq	r2, #0
   1f768:	bne	1f780 <__assert_fail@plt+0xe17c>
   1f76c:	cmp	r1, #0
   1f770:	cmpeq	r0, #0
   1f774:	mvnne	r1, #0
   1f778:	mvnne	r0, #0
   1f77c:	b	1f79c <__assert_fail@plt+0xe198>
   1f780:	sub	sp, sp, #8
   1f784:	push	{sp, lr}
   1f788:	bl	1f7ac <__assert_fail@plt+0xe1a8>
   1f78c:	ldr	lr, [sp, #4]
   1f790:	add	sp, sp, #8
   1f794:	pop	{r2, r3}
   1f798:	bx	lr
   1f79c:	push	{r1, lr}
   1f7a0:	mov	r0, #8
   1f7a4:	bl	112d4 <raise@plt>
   1f7a8:	pop	{r1, pc}
   1f7ac:	cmp	r1, r3
   1f7b0:	cmpeq	r0, r2
   1f7b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7b8:	mov	r4, r0
   1f7bc:	movcc	r0, #0
   1f7c0:	mov	r5, r1
   1f7c4:	ldr	lr, [sp, #36]	; 0x24
   1f7c8:	movcc	r1, r0
   1f7cc:	bcc	1f8c8 <__assert_fail@plt+0xe2c4>
   1f7d0:	cmp	r3, #0
   1f7d4:	clzeq	ip, r2
   1f7d8:	clzne	ip, r3
   1f7dc:	addeq	ip, ip, #32
   1f7e0:	cmp	r5, #0
   1f7e4:	clzeq	r1, r4
   1f7e8:	addeq	r1, r1, #32
   1f7ec:	clzne	r1, r5
   1f7f0:	sub	ip, ip, r1
   1f7f4:	sub	sl, ip, #32
   1f7f8:	lsl	r9, r3, ip
   1f7fc:	rsb	fp, ip, #32
   1f800:	orr	r9, r9, r2, lsl sl
   1f804:	orr	r9, r9, r2, lsr fp
   1f808:	lsl	r8, r2, ip
   1f80c:	cmp	r5, r9
   1f810:	cmpeq	r4, r8
   1f814:	movcc	r0, #0
   1f818:	movcc	r1, r0
   1f81c:	bcc	1f838 <__assert_fail@plt+0xe234>
   1f820:	mov	r0, #1
   1f824:	subs	r4, r4, r8
   1f828:	lsl	r1, r0, sl
   1f82c:	orr	r1, r1, r0, lsr fp
   1f830:	lsl	r0, r0, ip
   1f834:	sbc	r5, r5, r9
   1f838:	cmp	ip, #0
   1f83c:	beq	1f8c8 <__assert_fail@plt+0xe2c4>
   1f840:	lsr	r6, r8, #1
   1f844:	orr	r6, r6, r9, lsl #31
   1f848:	lsr	r7, r9, #1
   1f84c:	mov	r2, ip
   1f850:	b	1f874 <__assert_fail@plt+0xe270>
   1f854:	subs	r3, r4, r6
   1f858:	sbc	r8, r5, r7
   1f85c:	adds	r3, r3, r3
   1f860:	adc	r8, r8, r8
   1f864:	adds	r4, r3, #1
   1f868:	adc	r5, r8, #0
   1f86c:	subs	r2, r2, #1
   1f870:	beq	1f890 <__assert_fail@plt+0xe28c>
   1f874:	cmp	r5, r7
   1f878:	cmpeq	r4, r6
   1f87c:	bcs	1f854 <__assert_fail@plt+0xe250>
   1f880:	adds	r4, r4, r4
   1f884:	adc	r5, r5, r5
   1f888:	subs	r2, r2, #1
   1f88c:	bne	1f874 <__assert_fail@plt+0xe270>
   1f890:	lsr	r3, r4, ip
   1f894:	orr	r3, r3, r5, lsl fp
   1f898:	lsr	r2, r5, ip
   1f89c:	orr	r3, r3, r5, lsr sl
   1f8a0:	adds	r0, r0, r4
   1f8a4:	mov	r4, r3
   1f8a8:	lsl	r3, r2, ip
   1f8ac:	orr	r3, r3, r4, lsl sl
   1f8b0:	lsl	ip, r4, ip
   1f8b4:	orr	r3, r3, r4, lsr fp
   1f8b8:	adc	r1, r1, r5
   1f8bc:	subs	r0, r0, ip
   1f8c0:	mov	r5, r2
   1f8c4:	sbc	r1, r1, r3
   1f8c8:	cmp	lr, #0
   1f8cc:	strdne	r4, [lr]
   1f8d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f8d8:	mov	r7, r0
   1f8dc:	ldr	r6, [pc, #72]	; 1f92c <__assert_fail@plt+0xe328>
   1f8e0:	ldr	r5, [pc, #72]	; 1f930 <__assert_fail@plt+0xe32c>
   1f8e4:	add	r6, pc, r6
   1f8e8:	add	r5, pc, r5
   1f8ec:	sub	r6, r6, r5
   1f8f0:	mov	r8, r1
   1f8f4:	mov	r9, r2
   1f8f8:	bl	11290 <fdopen@plt-0x20>
   1f8fc:	asrs	r6, r6, #2
   1f900:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f904:	mov	r4, #0
   1f908:	add	r4, r4, #1
   1f90c:	ldr	r3, [r5], #4
   1f910:	mov	r2, r9
   1f914:	mov	r1, r8
   1f918:	mov	r0, r7
   1f91c:	blx	r3
   1f920:	cmp	r6, r4
   1f924:	bne	1f908 <__assert_fail@plt+0xe304>
   1f928:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f92c:	andeq	r2, r1, r0, lsr #12
   1f930:	andeq	r2, r1, r8, lsl r6
   1f934:	bx	lr
   1f938:	ldr	r3, [pc, #12]	; 1f94c <__assert_fail@plt+0xe348>
   1f93c:	mov	r1, #0
   1f940:	add	r3, pc, r3
   1f944:	ldr	r2, [r3]
   1f948:	b	114fc <__cxa_atexit@plt>
   1f94c:	andeq	r2, r1, ip, ror #15

Disassembly of section .fini:

0001f950 <.fini>:
   1f950:	push	{r3, lr}
   1f954:	pop	{r3, pc}
