
../repos/coreutils/src/df:     file format elf32-littlearm


Disassembly of section .init:

000112c4 <.init>:
   112c4:	push	{r3, lr}
   112c8:	bl	12bd8 <__assert_fail@plt+0x14d4>
   112cc:	pop	{r3, pc}

Disassembly of section .plt:

000112d0 <calloc@plt-0x14>:
   112d0:	push	{lr}		; (str lr, [sp, #-4]!)
   112d4:	ldr	lr, [pc, #4]	; 112e0 <calloc@plt-0x4>
   112d8:	add	lr, pc, lr
   112dc:	ldr	pc, [lr, #8]!
   112e0:	andeq	sp, r1, r0, lsr #26

000112e4 <calloc@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #118784	; 0x1d000
   112ec:	ldr	pc, [ip, #3360]!	; 0xd20

000112f0 <fputs_unlocked@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #118784	; 0x1d000
   112f8:	ldr	pc, [ip, #3352]!	; 0xd18

000112fc <raise@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #118784	; 0x1d000
   11304:	ldr	pc, [ip, #3344]!	; 0xd10

00011308 <strverscmp@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #118784	; 0x1d000
   11310:	ldr	pc, [ip, #3336]!	; 0xd08

00011314 <__getdelim@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #118784	; 0x1d000
   1131c:	ldr	pc, [ip, #3328]!	; 0xd00

00011320 <strcmp@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #118784	; 0x1d000
   11328:	ldr	pc, [ip, #3320]!	; 0xcf8

0001132c <fflush@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #118784	; 0x1d000
   11334:	ldr	pc, [ip, #3312]!	; 0xcf0

00011338 <wcwidth@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #118784	; 0x1d000
   11340:	ldr	pc, [ip, #3304]!	; 0xce8

00011344 <memmove@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #118784	; 0x1d000
   1134c:	ldr	pc, [ip, #3296]!	; 0xce0

00011350 <free@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #118784	; 0x1d000
   11358:	ldr	pc, [ip, #3288]!	; 0xcd8

0001135c <faccessat@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #118784	; 0x1d000
   11364:	ldr	pc, [ip, #3280]!	; 0xcd0

00011368 <_exit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #118784	; 0x1d000
   11370:	ldr	pc, [ip, #3272]!	; 0xcc8

00011374 <memcpy@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #118784	; 0x1d000
   1137c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011380 <__strtoull_internal@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #118784	; 0x1d000
   11388:	ldr	pc, [ip, #3256]!	; 0xcb8

0001138c <mbsinit@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #118784	; 0x1d000
   11394:	ldr	pc, [ip, #3248]!	; 0xcb0

00011398 <memcmp@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #118784	; 0x1d000
   113a0:	ldr	pc, [ip, #3240]!	; 0xca8

000113a4 <fputc_unlocked@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #118784	; 0x1d000
   113ac:	ldr	pc, [ip, #3232]!	; 0xca0

000113b0 <uname@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #118784	; 0x1d000
   113b8:	ldr	pc, [ip, #3224]!	; 0xc98

000113bc <dcgettext@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #118784	; 0x1d000
   113c4:	ldr	pc, [ip, #3216]!	; 0xc90

000113c8 <strdup@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #118784	; 0x1d000
   113d0:	ldr	pc, [ip, #3208]!	; 0xc88

000113d4 <realloc@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #118784	; 0x1d000
   113dc:	ldr	pc, [ip, #3200]!	; 0xc80

000113e0 <textdomain@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #118784	; 0x1d000
   113e8:	ldr	pc, [ip, #3192]!	; 0xc78

000113ec <iswcntrl@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #118784	; 0x1d000
   113f4:	ldr	pc, [ip, #3184]!	; 0xc70

000113f8 <rawmemchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #118784	; 0x1d000
   11400:	ldr	pc, [ip, #3176]!	; 0xc68

00011404 <chdir@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #118784	; 0x1d000
   1140c:	ldr	pc, [ip, #3168]!	; 0xc60

00011410 <iswprint@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #118784	; 0x1d000
   11418:	ldr	pc, [ip, #3160]!	; 0xc58

0001141c <__fxstat64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #118784	; 0x1d000
   11424:	ldr	pc, [ip, #3152]!	; 0xc50

00011428 <readlink@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #118784	; 0x1d000
   11430:	ldr	pc, [ip, #3144]!	; 0xc48

00011434 <__memcpy_chk@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #118784	; 0x1d000
   1143c:	ldr	pc, [ip, #3136]!	; 0xc40

00011440 <fwrite@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #118784	; 0x1d000
   11448:	ldr	pc, [ip, #3128]!	; 0xc38

0001144c <lseek64@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #118784	; 0x1d000
   11454:	ldr	pc, [ip, #3120]!	; 0xc30

00011458 <__ctype_get_mb_cur_max@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #118784	; 0x1d000
   11460:	ldr	pc, [ip, #3112]!	; 0xc28

00011464 <hasmntopt@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #118784	; 0x1d000
   1146c:	ldr	pc, [ip, #3104]!	; 0xc20

00011470 <__fpending@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #118784	; 0x1d000
   11478:	ldr	pc, [ip, #3096]!	; 0xc18

0001147c <mbrtowc@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #118784	; 0x1d000
   11484:	ldr	pc, [ip, #3088]!	; 0xc10

00011488 <wcstombs@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #118784	; 0x1d000
   11490:	ldr	pc, [ip, #3080]!	; 0xc08

00011494 <error@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #118784	; 0x1d000
   1149c:	ldr	pc, [ip, #3072]!	; 0xc00

000114a0 <getmntent@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #118784	; 0x1d000
   114a8:	ldr	pc, [ip, #3064]!	; 0xbf8

000114ac <open64@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #118784	; 0x1d000
   114b4:	ldr	pc, [ip, #3056]!	; 0xbf0

000114b8 <__asprintf_chk@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #118784	; 0x1d000
   114c0:	ldr	pc, [ip, #3048]!	; 0xbe8

000114c4 <getenv@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #118784	; 0x1d000
   114cc:	ldr	pc, [ip, #3040]!	; 0xbe0

000114d0 <malloc@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #118784	; 0x1d000
   114d8:	ldr	pc, [ip, #3032]!	; 0xbd8

000114dc <__libc_start_main@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #118784	; 0x1d000
   114e4:	ldr	pc, [ip, #3024]!	; 0xbd0

000114e8 <__freading@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #118784	; 0x1d000
   114f0:	ldr	pc, [ip, #3016]!	; 0xbc8

000114f4 <__gmon_start__@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #118784	; 0x1d000
   114fc:	ldr	pc, [ip, #3008]!	; 0xbc0

00011500 <mempcpy@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #118784	; 0x1d000
   11508:	ldr	pc, [ip, #3000]!	; 0xbb8

0001150c <getopt_long@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #118784	; 0x1d000
   11514:	ldr	pc, [ip, #2992]!	; 0xbb0

00011518 <__ctype_b_loc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #118784	; 0x1d000
   11520:	ldr	pc, [ip, #2984]!	; 0xba8

00011524 <getcwd@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #118784	; 0x1d000
   1152c:	ldr	pc, [ip, #2976]!	; 0xba0

00011530 <exit@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #118784	; 0x1d000
   11538:	ldr	pc, [ip, #2968]!	; 0xb98

0001153c <strlen@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #118784	; 0x1d000
   11544:	ldr	pc, [ip, #2960]!	; 0xb90

00011548 <strchr@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #118784	; 0x1d000
   11550:	ldr	pc, [ip, #2952]!	; 0xb88

00011554 <openat64@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #118784	; 0x1d000
   1155c:	ldr	pc, [ip, #2944]!	; 0xb80

00011560 <memrchr@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #118784	; 0x1d000
   11568:	ldr	pc, [ip, #2936]!	; 0xb78

0001156c <__errno_location@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #118784	; 0x1d000
   11574:	ldr	pc, [ip, #2928]!	; 0xb70

00011578 <__sprintf_chk@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #118784	; 0x1d000
   11580:	ldr	pc, [ip, #2920]!	; 0xb68

00011584 <__cxa_atexit@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #118784	; 0x1d000
   1158c:	ldr	pc, [ip, #2912]!	; 0xb60

00011590 <memset@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #118784	; 0x1d000
   11598:	ldr	pc, [ip, #2904]!	; 0xb58

0001159c <__printf_chk@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #118784	; 0x1d000
   115a4:	ldr	pc, [ip, #2896]!	; 0xb50

000115a8 <statvfs64@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #118784	; 0x1d000
   115b0:	ldr	pc, [ip, #2888]!	; 0xb48

000115b4 <fileno@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #118784	; 0x1d000
   115bc:	ldr	pc, [ip, #2880]!	; 0xb40

000115c0 <__fprintf_chk@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #118784	; 0x1d000
   115c8:	ldr	pc, [ip, #2872]!	; 0xb38

000115cc <memchr@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #118784	; 0x1d000
   115d4:	ldr	pc, [ip, #2864]!	; 0xb30

000115d8 <fclose@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #118784	; 0x1d000
   115e0:	ldr	pc, [ip, #2856]!	; 0xb28

000115e4 <fseeko64@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #118784	; 0x1d000
   115ec:	ldr	pc, [ip, #2848]!	; 0xb20

000115f0 <endmntent@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #118784	; 0x1d000
   115f8:	ldr	pc, [ip, #2840]!	; 0xb18

000115fc <fcntl64@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #118784	; 0x1d000
   11604:	ldr	pc, [ip, #2832]!	; 0xb10

00011608 <__overflow@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #118784	; 0x1d000
   11610:	ldr	pc, [ip, #2824]!	; 0xb08

00011614 <setlocale@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #118784	; 0x1d000
   1161c:	ldr	pc, [ip, #2816]!	; 0xb00

00011620 <wcswidth@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #118784	; 0x1d000
   11628:	ldr	pc, [ip, #2808]!	; 0xaf8

0001162c <strrchr@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #118784	; 0x1d000
   11634:	ldr	pc, [ip, #2800]!	; 0xaf0

00011638 <statfs64@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #118784	; 0x1d000
   11640:	ldr	pc, [ip, #2792]!	; 0xae8

00011644 <nl_langinfo@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #118784	; 0x1d000
   1164c:	ldr	pc, [ip, #2784]!	; 0xae0

00011650 <sscanf@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #118784	; 0x1d000
   11658:	ldr	pc, [ip, #2776]!	; 0xad8

0001165c <localeconv@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #118784	; 0x1d000
   11664:	ldr	pc, [ip, #2768]!	; 0xad0

00011668 <mbstowcs@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #118784	; 0x1d000
   11670:	ldr	pc, [ip, #2760]!	; 0xac8

00011674 <fchdir@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #118784	; 0x1d000
   1167c:	ldr	pc, [ip, #2752]!	; 0xac0

00011680 <canonicalize_file_name@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #118784	; 0x1d000
   11688:	ldr	pc, [ip, #2744]!	; 0xab8

0001168c <fopen64@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #118784	; 0x1d000
   11694:	ldr	pc, [ip, #2736]!	; 0xab0

00011698 <setmntent@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #118784	; 0x1d000
   116a0:	ldr	pc, [ip, #2728]!	; 0xaa8

000116a4 <bindtextdomain@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #118784	; 0x1d000
   116ac:	ldr	pc, [ip, #2720]!	; 0xaa0

000116b0 <sync@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #118784	; 0x1d000
   116b8:	ldr	pc, [ip, #2712]!	; 0xa98

000116bc <__xstat64@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #118784	; 0x1d000
   116c4:	ldr	pc, [ip, #2704]!	; 0xa90

000116c8 <isatty@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #118784	; 0x1d000
   116d0:	ldr	pc, [ip, #2696]!	; 0xa88

000116d4 <strncmp@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #118784	; 0x1d000
   116dc:	ldr	pc, [ip, #2688]!	; 0xa80

000116e0 <abort@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #118784	; 0x1d000
   116e8:	ldr	pc, [ip, #2680]!	; 0xa78

000116ec <close@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #118784	; 0x1d000
   116f4:	ldr	pc, [ip, #2672]!	; 0xa70

000116f8 <strspn@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #118784	; 0x1d000
   11700:	ldr	pc, [ip, #2664]!	; 0xa68

00011704 <__assert_fail@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #118784	; 0x1d000
   1170c:	ldr	pc, [ip, #2656]!	; 0xa60

Disassembly of section .text:

00011710 <.text>:
   11710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11714:	sub	sp, sp, #180	; 0xb4
   11718:	ldr	r9, [pc, #3904]	; 12660 <__assert_fail@plt+0xf5c>
   1171c:	str	r0, [sp, #24]
   11720:	ldr	r0, [r1]
   11724:	str	r1, [sp, #28]
   11728:	bl	17e7c <__assert_fail@plt+0x6778>
   1172c:	ldr	r1, [pc, #3888]	; 12664 <__assert_fail@plt+0xf60>
   11730:	mov	r0, #6
   11734:	bl	11614 <setlocale@plt>
   11738:	ldr	r1, [pc, #3880]	; 12668 <__assert_fail@plt+0xf64>
   1173c:	ldr	r0, [pc, #3880]	; 1266c <__assert_fail@plt+0xf68>
   11740:	bl	116a4 <bindtextdomain@plt>
   11744:	ldr	r0, [pc, #3872]	; 1266c <__assert_fail@plt+0xf68>
   11748:	bl	113e0 <textdomain@plt>
   1174c:	mov	sl, #1
   11750:	ldr	r0, [pc, #3864]	; 12670 <__assert_fail@plt+0xf6c>
   11754:	mov	fp, #0
   11758:	bl	1d1ec <__assert_fail@plt+0xbae8>
   1175c:	mov	r0, #0
   11760:	mvn	r3, #0
   11764:	mov	r2, #5
   11768:	ldr	r1, [pc, #3844]	; 12674 <__assert_fail@plt+0xf70>
   1176c:	strd	sl, [r9, #56]	; 0x38
   11770:	str	r3, [r9, #28]
   11774:	str	r0, [r9]
   11778:	str	r0, [r9, #4]
   1177c:	strb	r0, [r9, #45]	; 0x2d
   11780:	strb	r0, [r9, #46]	; 0x2e
   11784:	strb	r0, [r9, #112]	; 0x70
   11788:	strb	r0, [r9, #52]	; 0x34
   1178c:	str	r0, [r9, #48]	; 0x30
   11790:	strb	r0, [r9, #53]	; 0x35
   11794:	mov	r8, r0
   11798:	bl	113bc <dcgettext@plt>
   1179c:	ldr	r5, [pc, #3796]	; 12678 <__assert_fail@plt+0xf74>
   117a0:	ldr	r4, [pc, #3796]	; 1267c <__assert_fail@plt+0xf78>
   117a4:	ldr	r6, [pc, #3796]	; 12680 <__assert_fail@plt+0xf7c>
   117a8:	ldr	r7, [pc, #3796]	; 12684 <__assert_fail@plt+0xf80>
   117ac:	mov	sl, r0
   117b0:	add	r3, sp, #72	; 0x48
   117b4:	str	r3, [sp]
   117b8:	mvn	ip, #0
   117bc:	mov	r3, r5
   117c0:	mov	r2, r4
   117c4:	ldr	r1, [sp, #28]
   117c8:	ldr	r0, [sp, #24]
   117cc:	str	ip, [sp, #72]	; 0x48
   117d0:	bl	1150c <getopt_long@plt>
   117d4:	cmn	r0, #1
   117d8:	mov	fp, r0
   117dc:	beq	11a8c <__assert_fail@plt+0x388>
   117e0:	cmp	r0, #105	; 0x69
   117e4:	beq	11a28 <__assert_fail@plt+0x324>
   117e8:	bgt	1182c <__assert_fail@plt+0x128>
   117ec:	cmp	r0, #72	; 0x48
   117f0:	beq	11a10 <__assert_fail@plt+0x30c>
   117f4:	ble	11864 <__assert_fail@plt+0x160>
   117f8:	cmp	r0, #84	; 0x54
   117fc:	beq	119f8 <__assert_fail@plt+0x2f4>
   11800:	ble	119d0 <__assert_fail@plt+0x2cc>
   11804:	cmp	r0, #97	; 0x61
   11808:	beq	119b8 <__assert_fail@plt+0x2b4>
   1180c:	cmp	r0, #104	; 0x68
   11810:	bne	11a5c <__assert_fail@plt+0x358>
   11814:	mov	r0, #1
   11818:	mov	r1, #0
   1181c:	mov	r3, #176	; 0xb0
   11820:	strd	r0, [r9, #32]
   11824:	str	r3, [r9, #28]
   11828:	b	117b0 <__assert_fail@plt+0xac>
   1182c:	cmp	r0, #118	; 0x76
   11830:	beq	117b0 <__assert_fail@plt+0xac>
   11834:	ble	118a8 <__assert_fail@plt+0x1a4>
   11838:	ldr	r3, [pc, #3656]	; 12688 <__assert_fail@plt+0xf84>
   1183c:	cmp	r0, r3
   11840:	beq	11a40 <__assert_fail@plt+0x33c>
   11844:	bgt	118d4 <__assert_fail@plt+0x1d0>
   11848:	cmp	r0, #120	; 0x78
   1184c:	beq	11998 <__assert_fail@plt+0x294>
   11850:	cmp	r0, #256	; 0x100
   11854:	bne	11a5c <__assert_fail@plt+0x358>
   11858:	mov	r3, #0
   1185c:	strb	r3, [r9, #113]	; 0x71
   11860:	b	117b0 <__assert_fail@plt+0xac>
   11864:	cmn	r0, #2
   11868:	beq	11a4c <__assert_fail@plt+0x348>
   1186c:	ble	11930 <__assert_fail@plt+0x22c>
   11870:	cmp	r0, #66	; 0x42
   11874:	bne	11a54 <__assert_fail@plt+0x350>
   11878:	ldr	r2, [pc, #3596]	; 1268c <__assert_fail@plt+0xf88>
   1187c:	ldr	r0, [r6]
   11880:	sub	r1, r2, #4
   11884:	bl	16c28 <__assert_fail@plt+0x5524>
   11888:	cmp	r0, #0
   1188c:	beq	117b0 <__assert_fail@plt+0xac>
   11890:	ldr	r3, [r6]
   11894:	mov	r2, fp
   11898:	str	r3, [sp]
   1189c:	ldr	r1, [sp, #72]	; 0x48
   118a0:	ldr	r3, [pc, #3536]	; 12678 <__assert_fail@plt+0xf74>
   118a4:	bl	1aa14 <__assert_fail@plt+0x9310>
   118a8:	cmp	r0, #108	; 0x6c
   118ac:	beq	119ec <__assert_fail@plt+0x2e8>
   118b0:	ble	11978 <__assert_fail@plt+0x274>
   118b4:	cmp	r0, #109	; 0x6d
   118b8:	bne	11a64 <__assert_fail@plt+0x360>
   118bc:	mov	r0, #1048576	; 0x100000
   118c0:	mov	r1, #0
   118c4:	mov	r3, #0
   118c8:	strd	r0, [r9, #32]
   118cc:	str	r3, [r9, #28]
   118d0:	b	117b0 <__assert_fail@plt+0xac>
   118d4:	cmp	r0, r7
   118d8:	beq	119c4 <__assert_fail@plt+0x2c0>
   118dc:	ldr	r3, [pc, #3500]	; 12690 <__assert_fail@plt+0xf8c>
   118e0:	cmp	r0, r3
   118e4:	bne	11a5c <__assert_fail@plt+0x358>
   118e8:	ldr	r3, [r9, #24]
   118ec:	cmp	r3, #1
   118f0:	beq	12b58 <__assert_fail@plt+0x1454>
   118f4:	cmp	r3, #0
   118f8:	movne	r1, #0
   118fc:	andeq	r1, r8, #1
   11900:	cmp	r1, #0
   11904:	bne	12b14 <__assert_fail@plt+0x1410>
   11908:	ldrb	r3, [r9, #112]	; 0x70
   1190c:	cmp	r3, #0
   11910:	bne	12b38 <__assert_fail@plt+0x1434>
   11914:	ldr	r0, [r6]
   11918:	mov	r3, #4
   1191c:	cmp	r0, #0
   11920:	str	r3, [r9, #24]
   11924:	beq	117b0 <__assert_fail@plt+0xac>
   11928:	bl	14204 <__assert_fail@plt+0x2b00>
   1192c:	b	117b0 <__assert_fail@plt+0xac>
   11930:	cmn	r0, #3
   11934:	bne	11a5c <__assert_fail@plt+0x358>
   11938:	ldr	ip, [pc, #3412]	; 12694 <__assert_fail@plt+0xf90>
   1193c:	ldr	r1, [pc, #3412]	; 12698 <__assert_fail@plt+0xf94>
   11940:	ldr	r3, [pc, #3412]	; 1269c <__assert_fail@plt+0xf98>
   11944:	ldr	r0, [pc, #3524]	; 12710 <__assert_fail@plt+0x100c>
   11948:	ldr	r2, [pc, #3408]	; 126a0 <__assert_fail@plt+0xf9c>
   1194c:	mov	r4, #0
   11950:	ldr	r0, [r0]
   11954:	ldr	r3, [r3]
   11958:	stmib	sp, {r1, ip}
   1195c:	str	r2, [sp]
   11960:	str	r4, [sp, #12]
   11964:	ldr	r2, [pc, #3384]	; 126a4 <__assert_fail@plt+0xfa0>
   11968:	ldr	r1, [pc, #3384]	; 126a8 <__assert_fail@plt+0xfa4>
   1196c:	bl	1a35c <__assert_fail@plt+0x8c58>
   11970:	mov	r0, r4
   11974:	bl	11530 <exit@plt>
   11978:	cmp	r0, #107	; 0x6b
   1197c:	bne	11a5c <__assert_fail@plt+0x358>
   11980:	mov	r0, #1024	; 0x400
   11984:	mov	r1, #0
   11988:	mov	r3, #0
   1198c:	strd	r0, [r9, #32]
   11990:	str	r3, [r9, #28]
   11994:	b	117b0 <__assert_fail@plt+0xac>
   11998:	mov	r0, #8
   1199c:	ldr	fp, [r6]
   119a0:	bl	1a458 <__assert_fail@plt+0x8d54>
   119a4:	ldr	r3, [r9, #4]
   119a8:	str	fp, [r0]
   119ac:	str	r3, [r0, #4]
   119b0:	str	r0, [r9, #4]
   119b4:	b	117b0 <__assert_fail@plt+0xac>
   119b8:	mov	r3, #1
   119bc:	strb	r3, [r9, #45]	; 0x2d
   119c0:	b	117b0 <__assert_fail@plt+0xac>
   119c4:	mov	r3, #1
   119c8:	strb	r3, [r9, #53]	; 0x35
   119cc:	b	117b0 <__assert_fail@plt+0xac>
   119d0:	cmp	r0, #80	; 0x50
   119d4:	bne	11a5c <__assert_fail@plt+0x358>
   119d8:	ldr	r3, [r9, #24]
   119dc:	cmp	r3, #4
   119e0:	beq	12b14 <__assert_fail@plt+0x1410>
   119e4:	mov	r8, #1
   119e8:	b	117b0 <__assert_fail@plt+0xac>
   119ec:	mov	r3, #1
   119f0:	strb	r3, [r9, #44]	; 0x2c
   119f4:	b	117b0 <__assert_fail@plt+0xac>
   119f8:	ldr	r3, [r9, #24]
   119fc:	cmp	r3, #4
   11a00:	beq	12af0 <__assert_fail@plt+0x13ec>
   11a04:	mov	r3, #1
   11a08:	strb	r3, [r9, #112]	; 0x70
   11a0c:	b	117b0 <__assert_fail@plt+0xac>
   11a10:	mov	r0, #1
   11a14:	mov	r1, #0
   11a18:	mov	r3, #144	; 0x90
   11a1c:	strd	r0, [r9, #32]
   11a20:	str	r3, [r9, #28]
   11a24:	b	117b0 <__assert_fail@plt+0xac>
   11a28:	ldr	r3, [r9, #24]
   11a2c:	cmp	r3, #4
   11a30:	beq	12b58 <__assert_fail@plt+0x1454>
   11a34:	mov	r3, #1
   11a38:	str	r3, [r9, #24]
   11a3c:	b	117b0 <__assert_fail@plt+0xac>
   11a40:	mov	r3, #1
   11a44:	strb	r3, [r9, #113]	; 0x71
   11a48:	b	117b0 <__assert_fail@plt+0xac>
   11a4c:	mov	r0, #0
   11a50:	bl	13e34 <__assert_fail@plt+0x2730>
   11a54:	cmp	r0, #70	; 0x46
   11a58:	beq	11a6c <__assert_fail@plt+0x368>
   11a5c:	mov	r0, #1
   11a60:	bl	13e34 <__assert_fail@plt+0x2730>
   11a64:	cmp	r0, #116	; 0x74
   11a68:	bne	11a5c <__assert_fail@plt+0x358>
   11a6c:	mov	r0, #8
   11a70:	ldr	fp, [r6]
   11a74:	bl	1a458 <__assert_fail@plt+0x8d54>
   11a78:	ldr	r3, [r9]
   11a7c:	str	fp, [r0]
   11a80:	str	r3, [r0, #4]
   11a84:	str	r0, [r9]
   11a88:	b	117b0 <__assert_fail@plt+0xac>
   11a8c:	ldr	r3, [r9, #28]
   11a90:	cmn	r3, #1
   11a94:	beq	124e0 <__assert_fail@plt+0xddc>
   11a98:	ldr	r3, [r9, #24]
   11a9c:	cmp	r3, #4
   11aa0:	cmpne	r3, #1
   11aa4:	beq	11abc <__assert_fail@plt+0x3b8>
   11aa8:	ldr	r3, [r9, #28]
   11aac:	tst	r3, #16
   11ab0:	movne	r3, #2
   11ab4:	strne	r3, [r9, #24]
   11ab8:	beq	11bc8 <__assert_fail@plt+0x4c4>
   11abc:	ldr	r6, [r9]
   11ac0:	cmp	r6, #0
   11ac4:	beq	11b58 <__assert_fail@plt+0x454>
   11ac8:	mov	r7, #0
   11acc:	ldr	fp, [pc, #3032]	; 126ac <__assert_fail@plt+0xfa8>
   11ad0:	mov	sl, r7
   11ad4:	ldr	r4, [r9, #4]
   11ad8:	cmp	r4, #0
   11adc:	beq	11b38 <__assert_fail@plt+0x434>
   11ae0:	ldr	r5, [r6]
   11ae4:	b	11af4 <__assert_fail@plt+0x3f0>
   11ae8:	ldr	r4, [r4, #4]
   11aec:	cmp	r4, #0
   11af0:	beq	11b38 <__assert_fail@plt+0x434>
   11af4:	ldr	r1, [r4]
   11af8:	mov	r0, r5
   11afc:	bl	11320 <strcmp@plt>
   11b00:	subs	r8, r0, #0
   11b04:	bne	11ae8 <__assert_fail@plt+0x3e4>
   11b08:	mov	r2, #5
   11b0c:	mov	r1, fp
   11b10:	bl	113bc <dcgettext@plt>
   11b14:	mov	r7, #1
   11b18:	mov	r4, r0
   11b1c:	ldr	r0, [r6]
   11b20:	bl	19d3c <__assert_fail@plt+0x8638>
   11b24:	mov	r2, r4
   11b28:	mov	r1, sl
   11b2c:	mov	r3, r0
   11b30:	mov	r0, r8
   11b34:	bl	11494 <error@plt>
   11b38:	ldr	r6, [r6, #4]
   11b3c:	cmp	r6, #0
   11b40:	bne	11ad4 <__assert_fail@plt+0x3d0>
   11b44:	cmp	r7, #0
   11b48:	beq	11b58 <__assert_fail@plt+0x454>
   11b4c:	mov	r0, #1
   11b50:	add	sp, sp, #180	; 0xb4
   11b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b58:	ldr	r3, [pc, #2896]	; 126b0 <__assert_fail@plt+0xfac>
   11b5c:	ldr	r0, [r3]
   11b60:	ldr	r3, [sp, #24]
   11b64:	cmp	r3, r0
   11b68:	movle	r3, #0
   11b6c:	strle	r3, [sp, #64]	; 0x40
   11b70:	bgt	11be0 <__assert_fail@plt+0x4dc>
   11b74:	ldr	r3, [r9]
   11b78:	cmp	r3, #0
   11b7c:	beq	12614 <__assert_fail@plt+0xf10>
   11b80:	mov	r0, #1
   11b84:	and	r0, r0, #1
   11b88:	bl	17558 <__assert_fail@plt+0x5e54>
   11b8c:	cmp	r0, #0
   11b90:	str	r0, [r9, #116]	; 0x74
   11b94:	beq	125a0 <__assert_fail@plt+0xe9c>
   11b98:	ldrb	r3, [r9, #113]	; 0x71
   11b9c:	cmp	r3, #0
   11ba0:	bne	11bd8 <__assert_fail@plt+0x4d4>
   11ba4:	ldr	r3, [r9, #24]
   11ba8:	cmp	r3, #4
   11bac:	ldrls	pc, [pc, r3, lsl #2]
   11bb0:	b	1258c <__assert_fail@plt+0xe88>
   11bb4:	andeq	r1, r1, r0, ror #31
   11bb8:	andeq	r1, r1, ip, ror pc
   11bbc:	andeq	r1, r1, r0, ror #25
   11bc0:	andeq	r2, r1, ip, lsr r0
   11bc4:	andeq	r2, r1, r4, lsr #32
   11bc8:	cmp	r8, #0
   11bcc:	movne	r3, #3
   11bd0:	strne	r3, [r9, #24]
   11bd4:	b	11abc <__assert_fail@plt+0x3b8>
   11bd8:	bl	116b0 <sync@plt>
   11bdc:	b	11ba4 <__assert_fail@plt+0x4a0>
   11be0:	sub	r0, r3, r0
   11be4:	mov	r1, #104	; 0x68
   11be8:	bl	1a540 <__assert_fail@plt+0x8e3c>
   11bec:	ldr	r3, [pc, #2748]	; 126b0 <__assert_fail@plt+0xfac>
   11bf0:	mov	sl, #104	; 0x68
   11bf4:	ldr	r5, [r3]
   11bf8:	ldr	r3, [sp, #28]
   11bfc:	add	r6, r3, r5, lsl #2
   11c00:	str	r0, [sp, #64]	; 0x40
   11c04:	b	11c70 <__assert_fail@plt+0x56c>
   11c08:	mov	r2, r4
   11c0c:	mov	r1, fp
   11c10:	mov	r0, #3
   11c14:	bl	1141c <__fxstat64@plt>
   11c18:	cmp	r0, #0
   11c1c:	beq	121e4 <__assert_fail@plt+0xae0>
   11c20:	bl	1156c <__errno_location@plt>
   11c24:	ldr	r7, [r0]
   11c28:	mov	r0, fp
   11c2c:	bl	116ec <close@plt>
   11c30:	cmp	r7, #0
   11c34:	beq	11c6c <__assert_fail@plt+0x568>
   11c38:	ldr	r2, [r6, #-4]
   11c3c:	mov	r1, #3
   11c40:	mov	r0, #0
   11c44:	bl	19bb8 <__assert_fail@plt+0x84b4>
   11c48:	ldr	r2, [pc, #2732]	; 126fc <__assert_fail@plt+0xff8>
   11c4c:	mov	r1, r7
   11c50:	mov	r3, r0
   11c54:	mov	r0, #0
   11c58:	bl	11494 <error@plt>
   11c5c:	mov	r3, #0
   11c60:	mov	r2, #1
   11c64:	str	r2, [r9, #48]	; 0x30
   11c68:	str	r3, [r6, #-4]
   11c6c:	add	r5, r5, #1
   11c70:	ldr	r3, [sp, #24]
   11c74:	cmp	r5, r3
   11c78:	bge	11b74 <__assert_fail@plt+0x470>
   11c7c:	ldr	r3, [pc, #2604]	; 126b0 <__assert_fail@plt+0xfac>
   11c80:	ldr	r8, [r6], #4
   11c84:	mov	r1, #2304	; 0x900
   11c88:	ldr	r4, [r3]
   11c8c:	ldr	r3, [sp, #64]	; 0x40
   11c90:	sub	r4, r5, r4
   11c94:	mov	r0, r8
   11c98:	mla	r4, sl, r4, r3
   11c9c:	bl	114ac <open64@plt>
   11ca0:	subs	fp, r0, #0
   11ca4:	bge	11c08 <__assert_fail@plt+0x504>
   11ca8:	bl	1156c <__errno_location@plt>
   11cac:	ldr	r7, [r0]
   11cb0:	mov	fp, r0
   11cb4:	cmp	r7, #20
   11cb8:	cmpne	r7, #2
   11cbc:	beq	11c30 <__assert_fail@plt+0x52c>
   11cc0:	mov	r2, r4
   11cc4:	mov	r1, r8
   11cc8:	mov	r0, #3
   11ccc:	bl	116bc <__xstat64@plt>
   11cd0:	cmp	r0, #0
   11cd4:	ldrne	r7, [fp]
   11cd8:	bne	11c30 <__assert_fail@plt+0x52c>
   11cdc:	b	11c6c <__assert_fail@plt+0x568>
   11ce0:	mov	r1, #0
   11ce4:	mov	r0, r1
   11ce8:	bl	13198 <__assert_fail@plt+0x1a94>
   11cec:	ldrb	r3, [r9, #112]	; 0x70
   11cf0:	cmp	r3, #0
   11cf4:	beq	11d04 <__assert_fail@plt+0x600>
   11cf8:	mov	r1, #0
   11cfc:	mov	r0, #1
   11d00:	bl	13198 <__assert_fail@plt+0x1a94>
   11d04:	ldr	r1, [pc, #2472]	; 126b4 <__assert_fail@plt+0xfb0>
   11d08:	mov	r0, #2
   11d0c:	bl	13198 <__assert_fail@plt+0x1a94>
   11d10:	mov	r1, #0
   11d14:	mov	r0, #3
   11d18:	bl	13198 <__assert_fail@plt+0x1a94>
   11d1c:	ldr	r1, [pc, #2452]	; 126b8 <__assert_fail@plt+0xfb4>
   11d20:	mov	r0, #4
   11d24:	bl	13198 <__assert_fail@plt+0x1a94>
   11d28:	mov	r1, #0
   11d2c:	mov	r0, #5
   11d30:	bl	13198 <__assert_fail@plt+0x1a94>
   11d34:	mov	r1, #0
   11d38:	mov	r0, #10
   11d3c:	bl	13198 <__assert_fail@plt+0x1a94>
   11d40:	bl	12eb4 <__assert_fail@plt+0x17b0>
   11d44:	ldr	r3, [sp, #64]	; 0x40
   11d48:	cmp	r3, #0
   11d4c:	beq	12650 <__assert_fail@plt+0xf4c>
   11d50:	mov	r3, #1
   11d54:	strb	r3, [r9, #46]	; 0x2e
   11d58:	ldr	r3, [pc, #2384]	; 126b0 <__assert_fail@plt+0xfac>
   11d5c:	ldr	r3, [r3]
   11d60:	str	r3, [sp, #40]	; 0x28
   11d64:	ldr	r3, [sp, #40]	; 0x28
   11d68:	ldr	r2, [sp, #24]
   11d6c:	cmp	r3, r2
   11d70:	bge	12440 <__assert_fail@plt+0xd3c>
   11d74:	ldr	r1, [sp, #28]
   11d78:	ldr	r2, [sp, #40]	; 0x28
   11d7c:	ldr	r3, [r1, r2, lsl #2]
   11d80:	cmp	r3, #0
   11d84:	mov	fp, r3
   11d88:	str	r3, [sp, #48]	; 0x30
   11d8c:	beq	11f6c <__assert_fail@plt+0x868>
   11d90:	ldr	r3, [pc, #2328]	; 126b0 <__assert_fail@plt+0xfac>
   11d94:	ldr	r1, [sp, #64]	; 0x40
   11d98:	ldr	r3, [r3]
   11d9c:	sub	r3, r2, r3
   11da0:	mov	r2, #104	; 0x68
   11da4:	mla	r3, r2, r3, r1
   11da8:	str	r3, [sp, #52]	; 0x34
   11dac:	ldr	r3, [r3, #16]
   11db0:	and	r3, r3, #45056	; 0xb000
   11db4:	cmp	r3, #8192	; 0x2000
   11db8:	bne	120fc <__assert_fail@plt+0x9f8>
   11dbc:	mov	r0, fp
   11dc0:	bl	11680 <canonicalize_file_name@plt>
   11dc4:	subs	r3, r0, #0
   11dc8:	mov	r2, r3
   11dcc:	str	r3, [sp, #68]	; 0x44
   11dd0:	ldreq	fp, [sp, #48]	; 0x30
   11dd4:	beq	11de4 <__assert_fail@plt+0x6e0>
   11dd8:	ldrb	r3, [r3]
   11ddc:	cmp	r3, #47	; 0x2f
   11de0:	moveq	fp, r2
   11de4:	ldr	r5, [r9, #116]	; 0x74
   11de8:	cmp	r5, #0
   11dec:	beq	120f4 <__assert_fail@plt+0x9f0>
   11df0:	mov	r3, #0
   11df4:	str	r3, [sp, #32]
   11df8:	str	r3, [sp, #60]	; 0x3c
   11dfc:	str	r3, [sp, #36]	; 0x24
   11e00:	mvn	r3, #0
   11e04:	str	r3, [sp, #44]	; 0x2c
   11e08:	ldr	r8, [r5]
   11e0c:	mov	r0, r8
   11e10:	bl	11680 <canonicalize_file_name@plt>
   11e14:	subs	r6, r0, #0
   11e18:	beq	11e28 <__assert_fail@plt+0x724>
   11e1c:	ldrb	r3, [r6]
   11e20:	cmp	r3, #47	; 0x2f
   11e24:	moveq	r8, r6
   11e28:	mov	r1, r8
   11e2c:	mov	r0, fp
   11e30:	bl	11320 <strcmp@plt>
   11e34:	subs	sl, r0, #0
   11e38:	bne	11f00 <__assert_fail@plt+0x7fc>
   11e3c:	ldr	r7, [r9, #116]	; 0x74
   11e40:	ldr	r4, [r5, #4]
   11e44:	cmp	r7, #0
   11e48:	beq	121dc <__assert_fail@plt+0xad8>
   11e4c:	ldr	r0, [r7, #4]
   11e50:	mov	r1, r4
   11e54:	bl	11320 <strcmp@plt>
   11e58:	cmp	r0, #0
   11e5c:	moveq	sl, r7
   11e60:	ldr	r7, [r7, #28]
   11e64:	cmp	r7, #0
   11e68:	bne	11e4c <__assert_fail@plt+0x748>
   11e6c:	cmp	sl, #0
   11e70:	beq	121dc <__assert_fail@plt+0xad8>
   11e74:	ldr	r0, [sl]
   11e78:	bl	11680 <canonicalize_file_name@plt>
   11e7c:	subs	r7, r0, #0
   11e80:	beq	11e90 <__assert_fail@plt+0x78c>
   11e84:	ldrb	r3, [r7]
   11e88:	cmp	r3, #47	; 0x2f
   11e8c:	beq	11ea4 <__assert_fail@plt+0x7a0>
   11e90:	mov	r0, r7
   11e94:	bl	14fa4 <__assert_fail@plt+0x38a0>
   11e98:	ldr	r0, [sl]
   11e9c:	bl	1a984 <__assert_fail@plt+0x9280>
   11ea0:	mov	r7, r0
   11ea4:	mov	r1, r8
   11ea8:	mov	r0, r7
   11eac:	bl	11320 <strcmp@plt>
   11eb0:	cmp	r0, #0
   11eb4:	bne	1208c <__assert_fail@plt+0x988>
   11eb8:	ldr	r4, [r5, #4]
   11ebc:	mov	r0, r4
   11ec0:	bl	1153c <strlen@plt>
   11ec4:	ldr	r2, [sp, #36]	; 0x24
   11ec8:	eor	r8, r2, #1
   11ecc:	ldr	r2, [sp, #44]	; 0x2c
   11ed0:	uxtb	r8, r8
   11ed4:	cmp	r0, r2
   11ed8:	movcs	sl, #0
   11edc:	movcc	sl, #1
   11ee0:	orrs	r2, r8, sl
   11ee4:	mov	r3, r0
   11ee8:	str	r2, [sp, #32]
   11eec:	bne	12098 <__assert_fail@plt+0x994>
   11ef0:	mov	r3, #1
   11ef4:	str	r3, [sp, #36]	; 0x24
   11ef8:	mov	r0, r7
   11efc:	bl	14fa4 <__assert_fail@plt+0x38a0>
   11f00:	mov	r0, r6
   11f04:	bl	14fa4 <__assert_fail@plt+0x38a0>
   11f08:	ldr	r5, [r5, #28]
   11f0c:	cmp	r5, #0
   11f10:	bne	11e08 <__assert_fail@plt+0x704>
   11f14:	ldr	r0, [sp, #68]	; 0x44
   11f18:	bl	14fa4 <__assert_fail@plt+0x38a0>
   11f1c:	ldr	r3, [sp, #60]	; 0x3c
   11f20:	cmp	r3, #0
   11f24:	beq	1234c <__assert_fail@plt+0xc48>
   11f28:	ldr	r0, [sp, #60]	; 0x3c
   11f2c:	mov	r3, #0
   11f30:	str	r3, [sp, #16]
   11f34:	str	r3, [sp, #12]
   11f38:	ldrb	r1, [r0, #24]
   11f3c:	ldr	r2, [sp, #48]	; 0x30
   11f40:	lsr	r1, r1, #1
   11f44:	and	r1, r1, #1
   11f48:	str	r1, [sp, #8]
   11f4c:	ldrb	r1, [r0, #24]
   11f50:	and	r1, r1, #1
   11f54:	str	r1, [sp, #4]
   11f58:	ldr	r1, [r0, #12]
   11f5c:	str	r1, [sp]
   11f60:	ldr	r1, [r0, #4]
   11f64:	ldr	r0, [r0]
   11f68:	bl	13300 <__assert_fail@plt+0x1bfc>
   11f6c:	ldr	r3, [sp, #40]	; 0x28
   11f70:	add	r3, r3, #1
   11f74:	str	r3, [sp, #40]	; 0x28
   11f78:	b	11d64 <__assert_fail@plt+0x660>
   11f7c:	mov	r1, #0
   11f80:	mov	r0, r1
   11f84:	bl	13198 <__assert_fail@plt+0x1a94>
   11f88:	ldrb	r3, [r9, #112]	; 0x70
   11f8c:	cmp	r3, #0
   11f90:	beq	11fa0 <__assert_fail@plt+0x89c>
   11f94:	mov	r1, #0
   11f98:	mov	r0, #1
   11f9c:	bl	13198 <__assert_fail@plt+0x1a94>
   11fa0:	mov	r1, #0
   11fa4:	mov	r0, #6
   11fa8:	bl	13198 <__assert_fail@plt+0x1a94>
   11fac:	mov	r1, #0
   11fb0:	mov	r0, #7
   11fb4:	bl	13198 <__assert_fail@plt+0x1a94>
   11fb8:	mov	r1, #0
   11fbc:	mov	r0, #8
   11fc0:	bl	13198 <__assert_fail@plt+0x1a94>
   11fc4:	mov	r1, #0
   11fc8:	mov	r0, #9
   11fcc:	bl	13198 <__assert_fail@plt+0x1a94>
   11fd0:	mov	r1, #0
   11fd4:	mov	r0, #10
   11fd8:	bl	13198 <__assert_fail@plt+0x1a94>
   11fdc:	b	11d40 <__assert_fail@plt+0x63c>
   11fe0:	mov	r1, #0
   11fe4:	mov	r0, r1
   11fe8:	bl	13198 <__assert_fail@plt+0x1a94>
   11fec:	ldrb	r3, [r9, #112]	; 0x70
   11ff0:	cmp	r3, #0
   11ff4:	beq	12004 <__assert_fail@plt+0x900>
   11ff8:	mov	r1, #0
   11ffc:	mov	r0, #1
   12000:	bl	13198 <__assert_fail@plt+0x1a94>
   12004:	mov	r1, #0
   12008:	mov	r0, #2
   1200c:	bl	13198 <__assert_fail@plt+0x1a94>
   12010:	mov	r1, #0
   12014:	mov	r0, #3
   12018:	bl	13198 <__assert_fail@plt+0x1a94>
   1201c:	mov	r1, #0
   12020:	b	11d20 <__assert_fail@plt+0x61c>
   12024:	ldr	r3, [r9, #16]
   12028:	cmp	r3, #0
   1202c:	bne	11d40 <__assert_fail@plt+0x63c>
   12030:	ldr	r0, [pc, #1668]	; 126bc <__assert_fail@plt+0xfb8>
   12034:	bl	14204 <__assert_fail@plt+0x2b00>
   12038:	b	11d40 <__assert_fail@plt+0x63c>
   1203c:	mov	r1, #0
   12040:	mov	r0, r1
   12044:	bl	13198 <__assert_fail@plt+0x1a94>
   12048:	ldrb	r3, [r9, #112]	; 0x70
   1204c:	cmp	r3, #0
   12050:	beq	12060 <__assert_fail@plt+0x95c>
   12054:	mov	r1, #0
   12058:	mov	r0, #1
   1205c:	bl	13198 <__assert_fail@plt+0x1a94>
   12060:	mov	r1, #0
   12064:	mov	r0, #2
   12068:	bl	13198 <__assert_fail@plt+0x1a94>
   1206c:	mov	r1, #0
   12070:	mov	r0, #3
   12074:	bl	13198 <__assert_fail@plt+0x1a94>
   12078:	mov	r1, #0
   1207c:	mov	r0, #4
   12080:	bl	13198 <__assert_fail@plt+0x1a94>
   12084:	ldr	r1, [pc, #1588]	; 126c0 <__assert_fail@plt+0xfbc>
   12088:	b	11d2c <__assert_fail@plt+0x628>
   1208c:	mov	r3, #1
   12090:	str	r3, [sp, #32]
   12094:	b	11ef8 <__assert_fail@plt+0x7f4>
   12098:	mov	r1, r4
   1209c:	add	r2, sp, #72	; 0x48
   120a0:	mov	r0, #3
   120a4:	str	r3, [sp, #56]	; 0x38
   120a8:	bl	116bc <__xstat64@plt>
   120ac:	ldr	r3, [sp, #56]	; 0x38
   120b0:	cmp	r0, #0
   120b4:	beq	120d0 <__assert_fail@plt+0x9cc>
   120b8:	tst	r8, sl
   120bc:	ldreq	r3, [sp, #36]	; 0x24
   120c0:	streq	r3, [sp, #32]
   120c4:	beq	120e0 <__assert_fail@plt+0x9dc>
   120c8:	mov	r2, #0
   120cc:	str	r2, [sp, #32]
   120d0:	cmp	r3, #1
   120d4:	beq	1256c <__assert_fail@plt+0xe68>
   120d8:	str	r3, [sp, #44]	; 0x2c
   120dc:	str	r5, [sp, #60]	; 0x3c
   120e0:	ldr	r3, [sp, #32]
   120e4:	str	r3, [sp, #36]	; 0x24
   120e8:	mov	r3, #0
   120ec:	str	r3, [sp, #32]
   120f0:	b	11ef8 <__assert_fail@plt+0x7f4>
   120f4:	ldr	r0, [sp, #68]	; 0x44
   120f8:	bl	14fa4 <__assert_fail@plt+0x38a0>
   120fc:	ldr	r0, [sp, #48]	; 0x30
   12100:	bl	11680 <canonicalize_file_name@plt>
   12104:	subs	r6, r0, #0
   12108:	beq	12118 <__assert_fail@plt+0xa14>
   1210c:	ldrb	r3, [r6]
   12110:	cmp	r3, #47	; 0x2f
   12114:	beq	121f0 <__assert_fail@plt+0xaec>
   12118:	mov	r0, r6
   1211c:	bl	14fa4 <__assert_fail@plt+0x38a0>
   12120:	ldr	r5, [r9, #116]	; 0x74
   12124:	mov	r4, #0
   12128:	ldr	r6, [sp, #52]	; 0x34
   1212c:	b	12134 <__assert_fail@plt+0xa30>
   12130:	ldr	r5, [r5, #28]
   12134:	cmp	r5, #0
   12138:	beq	12480 <__assert_fail@plt+0xd7c>
   1213c:	ldrd	r0, [r5, #16]
   12140:	mvn	r3, #0
   12144:	mvn	r2, #0
   12148:	cmp	r1, r3
   1214c:	cmpeq	r0, r2
   12150:	beq	12318 <__assert_fail@plt+0xc14>
   12154:	ldrd	r2, [r6]
   12158:	cmp	r3, r1
   1215c:	cmpeq	r2, r0
   12160:	bne	12130 <__assert_fail@plt+0xa2c>
   12164:	ldr	r1, [pc, #1368]	; 126c4 <__assert_fail@plt+0xfc0>
   12168:	ldr	r0, [r5, #12]
   1216c:	bl	11320 <strcmp@plt>
   12170:	cmp	r0, #0
   12174:	beq	12130 <__assert_fail@plt+0xa2c>
   12178:	cmp	r4, #0
   1217c:	beq	12198 <__assert_fail@plt+0xa94>
   12180:	ldrb	r3, [r4, #24]
   12184:	tst	r3, #1
   12188:	bne	12198 <__assert_fail@plt+0xa94>
   1218c:	ldrb	r3, [r5, #24]
   12190:	tst	r3, #1
   12194:	bne	12130 <__assert_fail@plt+0xa2c>
   12198:	add	r2, sp, #72	; 0x48
   1219c:	ldr	r1, [r5, #4]
   121a0:	mov	r0, #3
   121a4:	bl	116bc <__xstat64@plt>
   121a8:	cmp	r0, #0
   121ac:	bne	121c8 <__assert_fail@plt+0xac4>
   121b0:	ldrd	r0, [sp, #72]	; 0x48
   121b4:	ldrd	r2, [r5, #16]
   121b8:	cmp	r1, r3
   121bc:	cmpeq	r0, r2
   121c0:	moveq	r4, r5
   121c4:	beq	12130 <__assert_fail@plt+0xa2c>
   121c8:	mvn	r3, #1
   121cc:	str	r3, [r5, #16]
   121d0:	mvn	r3, #0
   121d4:	str	r3, [r5, #20]
   121d8:	b	12130 <__assert_fail@plt+0xa2c>
   121dc:	mov	r7, #0
   121e0:	b	11ebc <__assert_fail@plt+0x7b8>
   121e4:	mov	r0, fp
   121e8:	bl	116ec <close@plt>
   121ec:	b	11c6c <__assert_fail@plt+0x568>
   121f0:	bl	1153c <strlen@plt>
   121f4:	ldr	r5, [r9, #116]	; 0x74
   121f8:	cmp	r5, #0
   121fc:	beq	12118 <__assert_fail@plt+0xa14>
   12200:	mov	r8, #0
   12204:	ldr	r7, [pc, #1208]	; 126c4 <__assert_fail@plt+0xfc0>
   12208:	mov	r4, r8
   1220c:	mov	fp, r0
   12210:	str	r6, [sp, #32]
   12214:	mov	r1, r7
   12218:	ldr	r0, [r5, #12]
   1221c:	bl	11320 <strcmp@plt>
   12220:	cmp	r0, #0
   12224:	beq	12284 <__assert_fail@plt+0xb80>
   12228:	cmp	r4, #0
   1222c:	beq	12248 <__assert_fail@plt+0xb44>
   12230:	ldrb	r3, [r4, #24]
   12234:	tst	r3, #1
   12238:	bne	12248 <__assert_fail@plt+0xb44>
   1223c:	ldrb	r3, [r5, #24]
   12240:	tst	r3, #1
   12244:	bne	12284 <__assert_fail@plt+0xb80>
   12248:	ldr	r6, [r5, #4]
   1224c:	mov	r0, r6
   12250:	bl	1153c <strlen@plt>
   12254:	cmp	r0, r8
   12258:	cmpcs	fp, r0
   1225c:	mov	sl, r0
   12260:	bcc	12284 <__assert_fail@plt+0xb80>
   12264:	cmp	r0, #1
   12268:	beq	124d4 <__assert_fail@plt+0xdd0>
   1226c:	cmp	fp, r0
   12270:	beq	12460 <__assert_fail@plt+0xd5c>
   12274:	ldr	r3, [sp, #32]
   12278:	ldrb	r2, [r3, r0]
   1227c:	cmp	r2, #47	; 0x2f
   12280:	beq	12460 <__assert_fail@plt+0xd5c>
   12284:	ldr	r5, [r5, #28]
   12288:	cmp	r5, #0
   1228c:	bne	12214 <__assert_fail@plt+0xb10>
   12290:	ldr	r6, [sp, #32]
   12294:	mov	r0, r6
   12298:	bl	14fa4 <__assert_fail@plt+0x38a0>
   1229c:	cmp	r4, #0
   122a0:	beq	12120 <__assert_fail@plt+0xa1c>
   122a4:	add	r2, sp, #72	; 0x48
   122a8:	ldr	r1, [r4, #4]
   122ac:	mov	r0, #3
   122b0:	bl	116bc <__xstat64@plt>
   122b4:	cmp	r0, #0
   122b8:	bne	12120 <__assert_fail@plt+0xa1c>
   122bc:	ldr	r3, [sp, #52]	; 0x34
   122c0:	ldrd	r0, [sp, #72]	; 0x48
   122c4:	ldrd	r2, [r3]
   122c8:	cmp	r1, r3
   122cc:	cmpeq	r0, r2
   122d0:	bne	12120 <__assert_fail@plt+0xa1c>
   122d4:	mov	r3, #0
   122d8:	str	r3, [sp, #16]
   122dc:	str	r3, [sp, #12]
   122e0:	ldrb	r1, [r4, #24]
   122e4:	ldr	r3, [sp, #48]	; 0x30
   122e8:	mov	r2, r3
   122ec:	lsr	r1, r1, #1
   122f0:	and	r1, r1, #1
   122f4:	str	r1, [sp, #8]
   122f8:	ldrb	r1, [r4, #24]
   122fc:	and	r1, r1, #1
   12300:	str	r1, [sp, #4]
   12304:	ldr	r1, [r4, #12]
   12308:	str	r1, [sp]
   1230c:	ldm	r4, {r0, r1}
   12310:	bl	13300 <__assert_fail@plt+0x1bfc>
   12314:	b	11f6c <__assert_fail@plt+0x868>
   12318:	add	r2, sp, #72	; 0x48
   1231c:	ldr	r1, [r5, #4]
   12320:	mov	r0, #3
   12324:	bl	116bc <__xstat64@plt>
   12328:	cmp	r0, #0
   1232c:	bne	12510 <__assert_fail@plt+0xe0c>
   12330:	ldr	r2, [sp, #72]	; 0x48
   12334:	ldr	r3, [sp, #76]	; 0x4c
   12338:	mov	r0, r2
   1233c:	str	r2, [r5, #16]
   12340:	str	r3, [r5, #20]
   12344:	mov	r1, r3
   12348:	b	12154 <__assert_fail@plt+0xa50>
   1234c:	ldr	r3, [sp, #32]
   12350:	cmp	r3, #0
   12354:	beq	120fc <__assert_fail@plt+0x9f8>
   12358:	ldr	r5, [sp, #60]	; 0x3c
   1235c:	mov	r2, #5
   12360:	ldr	r1, [pc, #864]	; 126c8 <__assert_fail@plt+0xfc4>
   12364:	mov	r0, r5
   12368:	bl	113bc <dcgettext@plt>
   1236c:	ldr	r1, [sp, #48]	; 0x30
   12370:	mov	r4, r0
   12374:	mov	r0, #4
   12378:	bl	19afc <__assert_fail@plt+0x83f8>
   1237c:	mov	r2, r4
   12380:	mov	r1, r5
   12384:	mov	r3, r0
   12388:	mov	r0, r5
   1238c:	bl	11494 <error@plt>
   12390:	mov	r3, #1
   12394:	str	r3, [r9, #48]	; 0x30
   12398:	b	11f6c <__assert_fail@plt+0x868>
   1239c:	cmp	r8, #0
   123a0:	mov	r6, r7
   123a4:	streq	r8, [r9, #116]	; 0x74
   123a8:	moveq	r2, #1
   123ac:	beq	123c8 <__assert_fail@plt+0xcc4>
   123b0:	b	123e8 <__assert_fail@plt+0xce4>
   123b4:	ldr	r3, [sl, #8]
   123b8:	mov	r8, r2
   123bc:	ldr	sl, [sl, #12]
   123c0:	str	r6, [r3, #28]
   123c4:	mov	r6, r3
   123c8:	cmp	sl, #0
   123cc:	bne	123b4 <__assert_fail@plt+0xcb0>
   123d0:	cmp	r8, #0
   123d4:	ldr	r0, [r9, #40]	; 0x28
   123d8:	strne	r6, [r9, #116]	; 0x74
   123dc:	bl	15bec <__assert_fail@plt+0x44e8>
   123e0:	mov	r3, #0
   123e4:	str	r3, [r9, #40]	; 0x28
   123e8:	ldr	r4, [r9, #116]	; 0x74
   123ec:	mov	r6, #1
   123f0:	mov	r5, #0
   123f4:	b	12438 <__assert_fail@plt+0xd34>
   123f8:	str	r6, [sp, #16]
   123fc:	str	r5, [sp, #12]
   12400:	ldrb	r1, [r4, #24]
   12404:	mov	r3, #0
   12408:	mov	r2, r3
   1240c:	lsr	r1, r1, #1
   12410:	and	r1, r1, #1
   12414:	str	r1, [sp, #8]
   12418:	ldrb	r1, [r4, #24]
   1241c:	and	r1, r1, #1
   12420:	str	r1, [sp, #4]
   12424:	ldr	r1, [r4, #12]
   12428:	str	r1, [sp]
   1242c:	ldm	r4, {r0, r1}
   12430:	bl	13300 <__assert_fail@plt+0x1bfc>
   12434:	ldr	r4, [r4, #28]
   12438:	cmp	r4, #0
   1243c:	bne	123f8 <__assert_fail@plt+0xcf4>
   12440:	ldrb	r3, [r9, #52]	; 0x34
   12444:	cmp	r3, #0
   12448:	bne	129a4 <__assert_fail@plt+0x12a0>
   1244c:	ldr	r4, [r9, #48]	; 0x30
   12450:	cmp	r4, #0
   12454:	beq	1254c <__assert_fail@plt+0xe48>
   12458:	ldr	r0, [r9, #48]	; 0x30
   1245c:	bl	11530 <exit@plt>
   12460:	mov	r0, r6
   12464:	mov	r2, sl
   12468:	ldr	r1, [sp, #32]
   1246c:	bl	116d4 <strncmp@plt>
   12470:	cmp	r0, #0
   12474:	moveq	r8, sl
   12478:	moveq	r4, r5
   1247c:	b	12284 <__assert_fail@plt+0xb80>
   12480:	cmp	r4, #0
   12484:	bne	122d4 <__assert_fail@plt+0xbd0>
   12488:	ldr	r6, [sp, #48]	; 0x30
   1248c:	ldr	r1, [sp, #52]	; 0x34
   12490:	mov	r0, r6
   12494:	bl	14380 <__assert_fail@plt+0x2c7c>
   12498:	subs	r5, r0, #0
   1249c:	beq	11f6c <__assert_fail@plt+0x868>
   124a0:	mov	r0, r4
   124a4:	str	r4, [sp, #16]
   124a8:	str	r4, [sp, #12]
   124ac:	str	r4, [sp, #8]
   124b0:	str	r4, [sp, #4]
   124b4:	str	r4, [sp]
   124b8:	mov	r2, r6
   124bc:	mov	r3, r4
   124c0:	mov	r1, r5
   124c4:	bl	13300 <__assert_fail@plt+0x1bfc>
   124c8:	mov	r0, r5
   124cc:	bl	14fa4 <__assert_fail@plt+0x38a0>
   124d0:	b	11f6c <__assert_fail@plt+0x868>
   124d4:	mov	r8, #1
   124d8:	mov	r4, r5
   124dc:	b	12284 <__assert_fail@plt+0xb80>
   124e0:	cmp	r8, #0
   124e4:	beq	12534 <__assert_fail@plt+0xe30>
   124e8:	mov	r3, #0
   124ec:	ldr	r0, [pc, #472]	; 126cc <__assert_fail@plt+0xfc8>
   124f0:	str	r3, [r9, #28]
   124f4:	bl	114c4 <getenv@plt>
   124f8:	mov	r3, #0
   124fc:	cmp	r0, #0
   12500:	movne	r2, #512	; 0x200
   12504:	moveq	r2, #1024	; 0x400
   12508:	strd	r2, [r9, #32]
   1250c:	b	11a98 <__assert_fail@plt+0x394>
   12510:	bl	1156c <__errno_location@plt>
   12514:	ldr	r7, [r0]
   12518:	cmp	r7, #5
   1251c:	beq	12960 <__assert_fail@plt+0x125c>
   12520:	mvn	r0, #1
   12524:	mvn	r1, #0
   12528:	str	r0, [r5, #16]
   1252c:	str	r1, [r5, #20]
   12530:	b	12154 <__assert_fail@plt+0xa50>
   12534:	ldr	r0, [pc, #404]	; 126d0 <__assert_fail@plt+0xfcc>
   12538:	bl	114c4 <getenv@plt>
   1253c:	ldr	r2, [pc, #328]	; 1268c <__assert_fail@plt+0xf88>
   12540:	sub	r1, r2, #4
   12544:	bl	16c28 <__assert_fail@plt+0x5524>
   12548:	b	11a98 <__assert_fail@plt+0x394>
   1254c:	mov	r2, #5
   12550:	ldr	r1, [pc, #380]	; 126d4 <__assert_fail@plt+0xfd0>
   12554:	mov	r0, r4
   12558:	bl	113bc <dcgettext@plt>
   1255c:	mov	r1, r4
   12560:	mov	r2, r0
   12564:	mov	r0, #1
   12568:	bl	11494 <error@plt>
   1256c:	mov	r0, r7
   12570:	bl	14fa4 <__assert_fail@plt+0x38a0>
   12574:	mov	r0, r6
   12578:	bl	14fa4 <__assert_fail@plt+0x38a0>
   1257c:	ldr	r0, [sp, #68]	; 0x44
   12580:	bl	14fa4 <__assert_fail@plt+0x38a0>
   12584:	str	r5, [sp, #60]	; 0x3c
   12588:	b	11f28 <__assert_fail@plt+0x824>
   1258c:	ldr	r3, [pc, #324]	; 126d8 <__assert_fail@plt+0xfd4>
   12590:	ldr	r2, [pc, #324]	; 126dc <__assert_fail@plt+0xfd8>
   12594:	ldr	r1, [pc, #324]	; 126e0 <__assert_fail@plt+0xfdc>
   12598:	ldr	r0, [pc, #324]	; 126e4 <__assert_fail@plt+0xfe0>
   1259c:	bl	11704 <__assert_fail@plt>
   125a0:	ldr	r3, [pc, #264]	; 126b0 <__assert_fail@plt+0xfac>
   125a4:	ldr	r2, [sp, #24]
   125a8:	ldr	r3, [r3]
   125ac:	cmp	r2, r3
   125b0:	ble	12644 <__assert_fail@plt+0xf40>
   125b4:	ldrb	r3, [r9, #45]	; 0x2d
   125b8:	cmp	r3, #0
   125bc:	bne	12644 <__assert_fail@plt+0xf40>
   125c0:	ldrb	r3, [r9, #44]	; 0x2c
   125c4:	cmp	r3, #0
   125c8:	bne	12644 <__assert_fail@plt+0xf40>
   125cc:	ldr	r3, [r9]
   125d0:	cmp	r3, #0
   125d4:	movne	r4, #1
   125d8:	ldrne	r5, [pc, #132]	; 12664 <__assert_fail@plt+0xf60>
   125dc:	beq	12b7c <__assert_fail@plt+0x1478>
   125e0:	bl	1156c <__errno_location@plt>
   125e4:	mov	r2, #5
   125e8:	ldr	r1, [pc, #248]	; 126e8 <__assert_fail@plt+0xfe4>
   125ec:	ldr	r6, [r0]
   125f0:	mov	r0, #0
   125f4:	bl	113bc <dcgettext@plt>
   125f8:	mov	r1, r6
   125fc:	mov	r3, r5
   12600:	ldr	r2, [pc, #228]	; 126ec <__assert_fail@plt+0xfe8>
   12604:	str	r0, [sp]
   12608:	mov	r0, r4
   1260c:	bl	11494 <error@plt>
   12610:	b	11b98 <__assert_fail@plt+0x494>
   12614:	ldr	r3, [r9, #4]
   12618:	cmp	r3, #0
   1261c:	bne	11b80 <__assert_fail@plt+0x47c>
   12620:	ldrb	r3, [r9, #112]	; 0x70
   12624:	cmp	r3, #0
   12628:	bne	11b80 <__assert_fail@plt+0x47c>
   1262c:	ldr	r3, [pc, #204]	; 12700 <__assert_fail@plt+0xffc>
   12630:	ldrb	r3, [r3, #56]	; 0x38
   12634:	cmp	r3, #0
   12638:	ldrbeq	r0, [r9, #44]	; 0x2c
   1263c:	beq	11b84 <__assert_fail@plt+0x480>
   12640:	b	11b80 <__assert_fail@plt+0x47c>
   12644:	mov	r4, #1
   12648:	ldr	r5, [pc, #20]	; 12664 <__assert_fail@plt+0xf60>
   1264c:	b	125e0 <__assert_fail@plt+0xedc>
   12650:	ldr	r0, [sp, #64]	; 0x40
   12654:	ldrb	r8, [r9, #45]	; 0x2d
   12658:	ldr	sl, [r9, #116]	; 0x74
   1265c:	b	12730 <__assert_fail@plt+0x102c>
   12660:	andeq	pc, r2, r0, asr #6
   12664:	andeq	lr, r1, r4, ror #6
   12668:	andeq	sp, r1, ip, ror lr
   1266c:	andeq	sp, r1, r4, asr sp
   12670:	andeq	r4, r1, ip, lsr #26
   12674:	muleq	r1, r4, lr
   12678:	andeq	sp, r1, r0, ror r2
   1267c:	andeq	sp, r1, r0, asr #29
   12680:	andeq	pc, r2, r8, lsr r3	; <UNPREDICTABLE>
   12684:	andeq	r0, r0, r2, lsl #2
   12688:	andeq	r0, r0, r1, lsl #2
   1268c:	andeq	pc, r2, r0, ror #6
   12690:	andeq	r0, r0, r3, lsl #2
   12694:	andeq	sp, r1, ip, ror #29
   12698:	strdeq	sp, [r1], -r8
   1269c:	ldrdeq	pc, [r2], -r0
   126a0:	andeq	sp, r1, r8, lsl #30
   126a4:	andeq	sp, r1, r0, asr sp
   126a8:	andeq	sp, r1, r8, lsl #8
   126ac:	andeq	sp, r1, ip, lsr pc
   126b0:	andeq	pc, r2, r8, lsr #6
   126b4:	andeq	sp, r1, ip, lsr #28
   126b8:	andeq	sp, r1, r4, lsr lr
   126bc:	andeq	sp, r1, ip, lsr #31
   126c0:	andeq	sp, r1, r0, lsr #31
   126c4:	andeq	lr, r1, r4, asr #32
   126c8:	andeq	lr, r1, r0, lsl r0
   126cc:	andeq	sp, r1, ip, lsl pc
   126d0:	andeq	sp, r1, ip, lsr #30
   126d4:	andeq	lr, r1, ip, asr #32
   126d8:	andeq	sp, r1, r0, lsl #7
   126dc:	andeq	r0, r0, r5, lsr r2
   126e0:	andeq	sp, r1, r0, lsr #7
   126e4:	strdeq	sp, [r1], -r8
   126e8:	andeq	sp, r1, ip, ror #30
   126ec:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   126f0:	andeq	r2, r1, r0, lsl lr
   126f4:	andeq	r2, r1, ip, lsl #26
   126f8:	andeq	r2, r1, r8, lsr #26
   126fc:	strdeq	lr, [r1], -r4
   12700:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   12704:	andeq	pc, r2, r8, ror r3	; <UNPREDICTABLE>
   12708:	andeq	sp, r1, r4, ror lr
   1270c:			; <UNDEFINED> instruction: 0x0001d3bc
   12710:	andeq	pc, r2, r4, lsr r3	; <UNPREDICTABLE>
   12714:	andeq	sp, r1, r8, ror #29
   12718:	andeq	sp, r1, r4, ror #29
   1271c:	ldrdeq	sp, [r1], -r8
   12720:	ldrdeq	sp, [r1], -r4
   12724:	andeq	lr, r1, r8, rrx
   12728:	ldr	sl, [sl, #28]
   1272c:	add	r0, r0, #1
   12730:	cmp	sl, #0
   12734:	bne	12728 <__assert_fail@plt+0x1024>
   12738:	ldr	r3, [pc, #-80]	; 126f0 <__assert_fail@plt+0xfec>
   1273c:	ldr	r2, [pc, #-80]	; 126f4 <__assert_fail@plt+0xff0>
   12740:	str	r3, [sp]
   12744:	mov	r1, sl
   12748:	ldr	r3, [pc, #-88]	; 126f8 <__assert_fail@plt+0xff4>
   1274c:	bl	159f0 <__assert_fail@plt+0x42ec>
   12750:	cmp	r0, #0
   12754:	str	r0, [r9, #40]	; 0x28
   12758:	ldrne	r6, [r9, #116]	; 0x74
   1275c:	movne	r7, r6
   12760:	beq	129a0 <__assert_fail@plt+0x129c>
   12764:	cmp	r7, #0
   12768:	beq	1239c <__assert_fail@plt+0xc98>
   1276c:	ldrb	r2, [r7, #24]
   12770:	tst	r2, #2
   12774:	beq	12784 <__assert_fail@plt+0x1080>
   12778:	ldrb	r1, [r9, #44]	; 0x2c
   1277c:	cmp	r1, #0
   12780:	bne	127c8 <__assert_fail@plt+0x10c4>
   12784:	tst	r2, #1
   12788:	beq	127a4 <__assert_fail@plt+0x10a0>
   1278c:	ldrb	r2, [r9, #45]	; 0x2d
   12790:	cmp	r2, #0
   12794:	bne	127a4 <__assert_fail@plt+0x10a0>
   12798:	ldrb	r2, [r9, #46]	; 0x2e
   1279c:	cmp	r2, #0
   127a0:	beq	127c8 <__assert_fail@plt+0x10c4>
   127a4:	ldr	r4, [r7, #12]
   127a8:	mov	r0, r4
   127ac:	bl	12d4c <__assert_fail@plt+0x1648>
   127b0:	cmp	r0, #0
   127b4:	beq	127c8 <__assert_fail@plt+0x10c4>
   127b8:	mov	r0, r4
   127bc:	bl	12da8 <__assert_fail@plt+0x16a4>
   127c0:	cmp	r0, #0
   127c4:	beq	12810 <__assert_fail@plt+0x110c>
   127c8:	ldrd	r0, [r7, #16]
   127cc:	strd	r0, [sp, #72]	; 0x48
   127d0:	mov	r0, #24
   127d4:	bl	1a458 <__assert_fail@plt+0x8d54>
   127d8:	ldrd	r2, [sp, #72]	; 0x48
   127dc:	str	r7, [r0, #8]
   127e0:	str	sl, [r0, #12]
   127e4:	mov	r1, r0
   127e8:	strd	r2, [r0]
   127ec:	mov	r4, r0
   127f0:	ldr	r0, [r9, #40]	; 0x28
   127f4:	bl	15fe4 <__assert_fail@plt+0x48e0>
   127f8:	cmp	r0, #0
   127fc:	beq	129a0 <__assert_fail@plt+0x129c>
   12800:	ldr	r7, [r7, #28]
   12804:	mov	sl, r4
   12808:	str	r4, [r0, #16]
   1280c:	b	12764 <__assert_fail@plt+0x1060>
   12810:	add	r2, sp, #72	; 0x48
   12814:	ldr	r1, [r7, #4]
   12818:	mov	r0, #3
   1281c:	bl	116bc <__xstat64@plt>
   12820:	cmn	r0, #1
   12824:	beq	127c8 <__assert_fail@plt+0x10c4>
   12828:	ldrd	r0, [sp, #72]	; 0x48
   1282c:	bl	13140 <__assert_fail@plt+0x1a3c>
   12830:	subs	r3, r0, #0
   12834:	str	r3, [sp, #24]
   12838:	beq	127d0 <__assert_fail@plt+0x10cc>
   1283c:	ldr	r4, [r3, #8]
   12840:	ldr	fp, [r4, #4]
   12844:	mov	r0, fp
   12848:	bl	1153c <strlen@plt>
   1284c:	ldr	r3, [r7, #4]
   12850:	str	r3, [sp, #32]
   12854:	str	r0, [sp, #28]
   12858:	mov	r0, r3
   1285c:	bl	1153c <strlen@plt>
   12860:	str	r0, [sp, #36]	; 0x24
   12864:	ldr	r0, [r4, #8]
   12868:	cmp	r0, #0
   1286c:	beq	12998 <__assert_fail@plt+0x1294>
   12870:	ldr	r6, [r7, #8]
   12874:	cmp	r6, #0
   12878:	beq	12998 <__assert_fail@plt+0x1294>
   1287c:	bl	1153c <strlen@plt>
   12880:	mov	r5, r0
   12884:	mov	r0, r6
   12888:	bl	1153c <strlen@plt>
   1288c:	cmp	r5, r0
   12890:	movcs	r5, #0
   12894:	movcc	r5, #1
   12898:	ldrb	r2, [r9, #53]	; 0x35
   1289c:	cmp	r2, #0
   128a0:	bne	128d0 <__assert_fail@plt+0x11cc>
   128a4:	ldrb	r2, [r7, #24]
   128a8:	tst	r2, #2
   128ac:	beq	128d0 <__assert_fail@plt+0x11cc>
   128b0:	ldrb	r2, [r4, #24]
   128b4:	tst	r2, #2
   128b8:	beq	128d0 <__assert_fail@plt+0x11cc>
   128bc:	ldr	r1, [r7]
   128c0:	ldr	r0, [r4]
   128c4:	bl	11320 <strcmp@plt>
   128c8:	cmp	r0, #0
   128cc:	bne	127d0 <__assert_fail@plt+0x10cc>
   128d0:	ldr	r6, [r7]
   128d4:	mov	r1, #47	; 0x2f
   128d8:	mov	r0, r6
   128dc:	bl	11548 <strchr@plt>
   128e0:	cmp	r0, #0
   128e4:	beq	128fc <__assert_fail@plt+0x11f8>
   128e8:	mov	r1, #47	; 0x2f
   128ec:	ldr	r0, [r4]
   128f0:	bl	11548 <strchr@plt>
   128f4:	cmp	r0, #0
   128f8:	beq	12940 <__assert_fail@plt+0x123c>
   128fc:	ldr	r2, [sp, #36]	; 0x24
   12900:	ldr	r3, [sp, #28]
   12904:	cmp	r3, r2
   12908:	movls	r2, #0
   1290c:	movhi	r2, #1
   12910:	bics	r3, r2, r5
   12914:	bne	12940 <__assert_fail@plt+0x123c>
   12918:	mov	r1, r6
   1291c:	ldr	r0, [r4]
   12920:	bl	11320 <strcmp@plt>
   12924:	cmp	r0, #0
   12928:	beq	12990 <__assert_fail@plt+0x128c>
   1292c:	mov	r1, fp
   12930:	ldr	r0, [sp, #32]
   12934:	bl	11320 <strcmp@plt>
   12938:	cmp	r0, #0
   1293c:	bne	12990 <__assert_fail@plt+0x128c>
   12940:	ldr	r3, [sp, #24]
   12944:	str	r7, [r3, #8]
   12948:	cmp	r8, #0
   1294c:	ldr	r7, [r7, #28]
   12950:	bne	12764 <__assert_fail@plt+0x1060>
   12954:	mov	r0, r4
   12958:	bl	17518 <__assert_fail@plt+0x5e14>
   1295c:	b	12764 <__assert_fail@plt+0x1060>
   12960:	ldr	r2, [r5, #4]
   12964:	mov	r1, #3
   12968:	mov	r0, #0
   1296c:	bl	19bb8 <__assert_fail@plt+0x84b4>
   12970:	mov	r1, r7
   12974:	ldr	r2, [pc, #-640]	; 126fc <__assert_fail@plt+0xff8>
   12978:	mov	r3, r0
   1297c:	mov	r0, #0
   12980:	bl	11494 <error@plt>
   12984:	mov	r3, #1
   12988:	str	r3, [r9, #48]	; 0x30
   1298c:	b	12520 <__assert_fail@plt+0xe1c>
   12990:	mov	r4, r7
   12994:	b	12948 <__assert_fail@plt+0x1244>
   12998:	mov	r5, #0
   1299c:	b	12898 <__assert_fail@plt+0x1194>
   129a0:	bl	1a9a0 <__assert_fail@plt+0x929c>
   129a4:	ldrb	r3, [r9, #53]	; 0x35
   129a8:	cmp	r3, #0
   129ac:	beq	129ec <__assert_fail@plt+0x12e8>
   129b0:	ldr	r3, [pc, #-696]	; 12700 <__assert_fail@plt+0xffc>
   129b4:	ldr	r2, [pc, #-696]	; 12704 <__assert_fail@plt+0x1000>
   129b8:	ldr	r0, [pc, #-696]	; 12708 <__assert_fail@plt+0x1004>
   129bc:	ldrb	ip, [r3, #28]
   129c0:	mov	r3, #0
   129c4:	ldr	r1, [pc, #-704]	; 1270c <__assert_fail@plt+0x1008>
   129c8:	cmp	ip, r3
   129cc:	str	r2, [sp, #12]
   129d0:	moveq	r1, r0
   129d4:	str	r3, [sp, #16]
   129d8:	str	r3, [sp, #8]
   129dc:	str	r3, [sp, #4]
   129e0:	str	r3, [sp]
   129e4:	mov	r2, r3
   129e8:	bl	13300 <__assert_fail@plt+0x1bfc>
   129ec:	ldr	r6, [pc, #-740]	; 12710 <__assert_fail@plt+0x100c>
   129f0:	mov	r5, #0
   129f4:	mov	r7, #32
   129f8:	ldr	r3, [r9, #8]
   129fc:	cmp	r5, r3
   12a00:	bcs	12458 <__assert_fail@plt+0xd54>
   12a04:	lsl	r8, r5, #2
   12a08:	mov	r4, #0
   12a0c:	b	12aa4 <__assert_fail@plt+0x13a0>
   12a10:	ldr	r3, [r9, #12]
   12a14:	cmp	r4, #0
   12a18:	lsl	sl, r4, #2
   12a1c:	ldr	r3, [r3, r8]
   12a20:	ldr	fp, [r3, r4, lsl #2]
   12a24:	beq	12a48 <__assert_fail@plt+0x1344>
   12a28:	ldr	r0, [r6]
   12a2c:	ldr	r3, [r0, #20]
   12a30:	ldr	r2, [r0, #24]
   12a34:	cmp	r3, r2
   12a38:	addcc	r2, r3, #1
   12a3c:	strcc	r2, [r0, #20]
   12a40:	strbcc	r7, [r3]
   12a44:	bcs	12ae4 <__assert_fail@plt+0x13e0>
   12a48:	ldr	r2, [r9, #20]
   12a4c:	ldr	r3, [r9, #16]
   12a50:	mov	r0, fp
   12a54:	ldr	r2, [r2, sl]
   12a58:	sub	r3, r3, #1
   12a5c:	cmp	r4, r3
   12a60:	ldr	ip, [r2, #16]
   12a64:	moveq	r3, #8
   12a68:	movne	r3, #0
   12a6c:	ldr	r2, [r2, #20]
   12a70:	add	r1, sp, #72	; 0x48
   12a74:	str	ip, [sp, #72]	; 0x48
   12a78:	bl	171e8 <__assert_fail@plt+0x5ae4>
   12a7c:	ldr	r1, [r6]
   12a80:	add	r4, r4, #1
   12a84:	subs	fp, r0, #0
   12a88:	movne	r0, fp
   12a8c:	ldreq	r3, [r9, #12]
   12a90:	ldreq	r3, [r3, r8]
   12a94:	ldreq	r0, [r3, sl]
   12a98:	bl	112f0 <fputs_unlocked@plt>
   12a9c:	mov	r0, fp
   12aa0:	bl	14fa4 <__assert_fail@plt+0x38a0>
   12aa4:	ldr	r3, [r9, #16]
   12aa8:	cmp	r4, r3
   12aac:	bcc	12a10 <__assert_fail@plt+0x130c>
   12ab0:	ldr	r0, [r6]
   12ab4:	ldr	r3, [r0, #20]
   12ab8:	ldr	r2, [r0, #24]
   12abc:	cmp	r3, r2
   12ac0:	addcc	r1, r3, #1
   12ac4:	movcc	r2, #10
   12ac8:	strcc	r1, [r0, #20]
   12acc:	strbcc	r2, [r3]
   12ad0:	bcc	12adc <__assert_fail@plt+0x13d8>
   12ad4:	mov	r1, #10
   12ad8:	bl	11608 <__overflow@plt>
   12adc:	add	r5, r5, #1
   12ae0:	b	129f8 <__assert_fail@plt+0x12f4>
   12ae4:	mov	r1, r7
   12ae8:	bl	11608 <__overflow@plt>
   12aec:	b	12a48 <__assert_fail@plt+0x1344>
   12af0:	ldr	r3, [pc, #-988]	; 1271c <__assert_fail@plt+0x1018>
   12af4:	mov	r1, #0
   12af8:	str	r3, [sp]
   12afc:	mov	r0, r1
   12b00:	mov	r2, sl
   12b04:	ldr	r3, [pc, #-1012]	; 12718 <__assert_fail@plt+0x1014>
   12b08:	bl	11494 <error@plt>
   12b0c:	mov	r0, #1
   12b10:	bl	13e34 <__assert_fail@plt+0x2730>
   12b14:	ldr	r3, [pc, #-1024]	; 1271c <__assert_fail@plt+0x1018>
   12b18:	mov	r1, #0
   12b1c:	str	r3, [sp]
   12b20:	mov	r0, r1
   12b24:	mov	r2, sl
   12b28:	ldr	r3, [pc, #-1052]	; 12714 <__assert_fail@plt+0x1010>
   12b2c:	bl	11494 <error@plt>
   12b30:	mov	r0, #1
   12b34:	bl	13e34 <__assert_fail@plt+0x2730>
   12b38:	ldr	r3, [pc, #-1060]	; 1271c <__assert_fail@plt+0x1018>
   12b3c:	mov	r0, r1
   12b40:	str	r3, [sp]
   12b44:	mov	r2, sl
   12b48:	ldr	r3, [pc, #-1080]	; 12718 <__assert_fail@plt+0x1014>
   12b4c:	bl	11494 <error@plt>
   12b50:	mov	r0, #1
   12b54:	bl	13e34 <__assert_fail@plt+0x2730>
   12b58:	ldr	r3, [pc, #-1092]	; 1271c <__assert_fail@plt+0x1018>
   12b5c:	mov	r1, #0
   12b60:	str	r3, [sp]
   12b64:	mov	r0, r1
   12b68:	mov	r2, sl
   12b6c:	ldr	r3, [pc, #-1108]	; 12720 <__assert_fail@plt+0x101c>
   12b70:	bl	11494 <error@plt>
   12b74:	mov	r0, #1
   12b78:	bl	13e34 <__assert_fail@plt+0x2730>
   12b7c:	ldr	r4, [r9, #4]
   12b80:	cmp	r4, #0
   12b84:	bne	12644 <__assert_fail@plt+0xf40>
   12b88:	mov	r2, #5
   12b8c:	ldr	r1, [pc, #-1136]	; 12724 <__assert_fail@plt+0x1020>
   12b90:	bl	113bc <dcgettext@plt>
   12b94:	mov	r5, r0
   12b98:	b	125e0 <__assert_fail@plt+0xedc>
   12b9c:	mov	fp, #0
   12ba0:	mov	lr, #0
   12ba4:	pop	{r1}		; (ldr r1, [sp], #4)
   12ba8:	mov	r2, sp
   12bac:	push	{r2}		; (str r2, [sp, #-4]!)
   12bb0:	push	{r0}		; (str r0, [sp, #-4]!)
   12bb4:	ldr	ip, [pc, #16]	; 12bcc <__assert_fail@plt+0x14c8>
   12bb8:	push	{ip}		; (str ip, [sp, #-4]!)
   12bbc:	ldr	r0, [pc, #12]	; 12bd0 <__assert_fail@plt+0x14cc>
   12bc0:	ldr	r3, [pc, #12]	; 12bd4 <__assert_fail@plt+0x14d0>
   12bc4:	bl	114dc <__libc_start_main@plt>
   12bc8:	bl	116e0 <abort@plt>
   12bcc:	andeq	sp, r1, r8, ror #3
   12bd0:	andeq	r1, r1, r0, lsl r7
   12bd4:	andeq	sp, r1, r8, lsl #3
   12bd8:	ldr	r3, [pc, #20]	; 12bf4 <__assert_fail@plt+0x14f0>
   12bdc:	ldr	r2, [pc, #20]	; 12bf8 <__assert_fail@plt+0x14f4>
   12be0:	add	r3, pc, r3
   12be4:	ldr	r2, [r3, r2]
   12be8:	cmp	r2, #0
   12bec:	bxeq	lr
   12bf0:	b	114f4 <__gmon_start__@plt>
   12bf4:	andeq	ip, r1, r8, lsl r4
   12bf8:	andeq	r0, r0, r0, ror r1
   12bfc:	ldr	r3, [pc, #28]	; 12c20 <__assert_fail@plt+0x151c>
   12c00:	ldr	r0, [pc, #28]	; 12c24 <__assert_fail@plt+0x1520>
   12c04:	sub	r3, r3, r0
   12c08:	cmp	r3, #6
   12c0c:	bxls	lr
   12c10:	ldr	r3, [pc, #16]	; 12c28 <__assert_fail@plt+0x1524>
   12c14:	cmp	r3, #0
   12c18:	bxeq	lr
   12c1c:	bx	r3
   12c20:	andeq	pc, r2, r3, lsr #6
   12c24:	andeq	pc, r2, r0, lsr #6
   12c28:	andeq	r0, r0, r0
   12c2c:	ldr	r1, [pc, #36]	; 12c58 <__assert_fail@plt+0x1554>
   12c30:	ldr	r0, [pc, #36]	; 12c5c <__assert_fail@plt+0x1558>
   12c34:	sub	r1, r1, r0
   12c38:	asr	r1, r1, #2
   12c3c:	add	r1, r1, r1, lsr #31
   12c40:	asrs	r1, r1, #1
   12c44:	bxeq	lr
   12c48:	ldr	r3, [pc, #16]	; 12c60 <__assert_fail@plt+0x155c>
   12c4c:	cmp	r3, #0
   12c50:	bxeq	lr
   12c54:	bx	r3
   12c58:	andeq	pc, r2, r0, lsr #6
   12c5c:	andeq	pc, r2, r0, lsr #6
   12c60:	andeq	r0, r0, r0
   12c64:	push	{r4, lr}
   12c68:	ldr	r4, [pc, #24]	; 12c88 <__assert_fail@plt+0x1584>
   12c6c:	ldrb	r3, [r4]
   12c70:	cmp	r3, #0
   12c74:	popne	{r4, pc}
   12c78:	bl	12bfc <__assert_fail@plt+0x14f8>
   12c7c:	mov	r3, #1
   12c80:	strb	r3, [r4]
   12c84:	pop	{r4, pc}
   12c88:	andeq	pc, r2, ip, lsr r3	; <UNPREDICTABLE>
   12c8c:	ldr	r0, [pc, #40]	; 12cbc <__assert_fail@plt+0x15b8>
   12c90:	ldr	r3, [r0]
   12c94:	cmp	r3, #0
   12c98:	bne	12ca0 <__assert_fail@plt+0x159c>
   12c9c:	b	12c2c <__assert_fail@plt+0x1528>
   12ca0:	ldr	r3, [pc, #24]	; 12cc0 <__assert_fail@plt+0x15bc>
   12ca4:	cmp	r3, #0
   12ca8:	beq	12c9c <__assert_fail@plt+0x1598>
   12cac:	push	{r4, lr}
   12cb0:	blx	r3
   12cb4:	pop	{r4, lr}
   12cb8:	b	12c2c <__assert_fail@plt+0x1528>
   12cbc:	andeq	lr, r2, r4, lsl pc
	...
   12cc8:	ldrb	r3, [r0]
   12ccc:	cmp	r3, #0
   12cd0:	bxeq	lr
   12cd4:	mov	r2, #63	; 0x3f
   12cd8:	b	12cf0 <__assert_fail@plt+0x15ec>
   12cdc:	cmp	r3, #127	; 0x7f
   12ce0:	beq	12cf8 <__assert_fail@plt+0x15f4>
   12ce4:	ldrb	r3, [r0, #1]!
   12ce8:	cmp	r3, #0
   12cec:	beq	12d08 <__assert_fail@plt+0x1604>
   12cf0:	cmp	r3, #31
   12cf4:	bhi	12cdc <__assert_fail@plt+0x15d8>
   12cf8:	strb	r2, [r0]
   12cfc:	ldrb	r3, [r0, #1]!
   12d00:	cmp	r3, #0
   12d04:	bne	12cf0 <__assert_fail@plt+0x15ec>
   12d08:	bx	lr
   12d0c:	push	{r4, lr}
   12d10:	mov	r2, r1
   12d14:	mov	r3, #0
   12d18:	ldrd	r0, [r0]
   12d1c:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   12d20:	mov	r0, r2
   12d24:	pop	{r4, pc}
   12d28:	push	{r4, r5}
   12d2c:	ldrd	r2, [r1]
   12d30:	ldrd	r4, [r0]
   12d34:	cmp	r5, r3
   12d38:	cmpeq	r4, r2
   12d3c:	moveq	r0, #1
   12d40:	movne	r0, #0
   12d44:	pop	{r4, r5}
   12d48:	bx	lr
   12d4c:	ldr	r3, [pc, #80]	; 12da4 <__assert_fail@plt+0x16a0>
   12d50:	push	{r4, r5, r6, lr}
   12d54:	ldr	r4, [r3]
   12d58:	cmp	r4, #0
   12d5c:	cmpne	r0, #0
   12d60:	moveq	r6, #1
   12d64:	movne	r6, #0
   12d68:	beq	12d90 <__assert_fail@plt+0x168c>
   12d6c:	mov	r5, r0
   12d70:	ldr	r1, [r4]
   12d74:	mov	r0, r5
   12d78:	bl	11320 <strcmp@plt>
   12d7c:	cmp	r0, #0
   12d80:	beq	12d98 <__assert_fail@plt+0x1694>
   12d84:	ldr	r4, [r4, #4]
   12d88:	cmp	r4, #0
   12d8c:	bne	12d70 <__assert_fail@plt+0x166c>
   12d90:	mov	r0, r6
   12d94:	pop	{r4, r5, r6, pc}
   12d98:	mov	r6, #1
   12d9c:	mov	r0, r6
   12da0:	pop	{r4, r5, r6, pc}
   12da4:	andeq	pc, r2, r0, asr #6
   12da8:	ldr	r3, [pc, #92]	; 12e0c <__assert_fail@plt+0x1708>
   12dac:	push	{r4, r5, r6, lr}
   12db0:	ldr	r4, [r3, #4]
   12db4:	cmp	r4, #0
   12db8:	cmpne	r0, #0
   12dbc:	moveq	r6, #1
   12dc0:	movne	r6, #0
   12dc4:	beq	12e00 <__assert_fail@plt+0x16fc>
   12dc8:	mov	r5, r0
   12dcc:	ldr	r1, [r4]
   12dd0:	mov	r0, r5
   12dd4:	bl	11320 <strcmp@plt>
   12dd8:	cmp	r0, #0
   12ddc:	beq	12df4 <__assert_fail@plt+0x16f0>
   12de0:	ldr	r4, [r4, #4]
   12de4:	cmp	r4, #0
   12de8:	bne	12dcc <__assert_fail@plt+0x16c8>
   12dec:	mov	r0, r6
   12df0:	pop	{r4, r5, r6, pc}
   12df4:	mov	r6, #1
   12df8:	mov	r0, r6
   12dfc:	pop	{r4, r5, r6, pc}
   12e00:	mov	r6, #0
   12e04:	mov	r0, r6
   12e08:	pop	{r4, r5, r6, pc}
   12e0c:	andeq	pc, r2, r0, asr #6
   12e10:	b	14fa4 <__assert_fail@plt+0x38a0>
   12e14:	push	{r4, r5, r6, lr}
   12e18:	mov	r2, #4
   12e1c:	ldr	r4, [pc, #56]	; 12e5c <__assert_fail@plt+0x1758>
   12e20:	ldr	r3, [r4, #8]
   12e24:	ldr	r0, [r4, #12]
   12e28:	add	r3, r3, #1
   12e2c:	mov	r1, r3
   12e30:	str	r3, [r4, #8]
   12e34:	bl	1a4e4 <__assert_fail@plt+0x8de0>
   12e38:	ldr	r3, [r4, #8]
   12e3c:	mov	r1, #4
   12e40:	mov	r5, r0
   12e44:	ldr	r0, [r4, #16]
   12e48:	str	r5, [r4, #12]
   12e4c:	sub	r4, r3, #-1073741823	; 0xc0000001
   12e50:	bl	1a540 <__assert_fail@plt+0x8e3c>
   12e54:	str	r0, [r5, r4, lsl #2]
   12e58:	pop	{r4, r5, r6, pc}
   12e5c:	andeq	pc, r2, r0, asr #6
   12e60:	push	{r4, r5, r6, lr}
   12e64:	mov	r5, r0
   12e68:	ldr	r4, [pc, #56]	; 12ea8 <__assert_fail@plt+0x17a4>
   12e6c:	ldr	r2, [r4]
   12e70:	cmp	r2, #0
   12e74:	blt	12e94 <__assert_fail@plt+0x1790>
   12e78:	ldr	r1, [pc, #44]	; 12eac <__assert_fail@plt+0x17a8>
   12e7c:	cmp	r2, #0
   12e80:	ldr	r3, [pc, #40]	; 12eb0 <__assert_fail@plt+0x17ac>
   12e84:	mov	r0, r5
   12e88:	movne	r3, r1
   12e8c:	pop	{r4, r5, r6, lr}
   12e90:	bx	r3
   12e94:	mov	r0, #1
   12e98:	bl	116c8 <isatty@plt>
   12e9c:	mov	r2, r0
   12ea0:	str	r0, [r4]
   12ea4:	b	12e78 <__assert_fail@plt+0x1774>
   12ea8:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   12eac:	andeq	r3, r1, r4, asr #4
   12eb0:	andeq	r2, r1, r8, asr #25
   12eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eb8:	sub	sp, sp, #692	; 0x2b4
   12ebc:	ldr	sl, [pc, #620]	; 13130 <__assert_fail@plt+0x1a2c>
   12ec0:	bl	12e14 <__assert_fail@plt+0x1710>
   12ec4:	ldr	r3, [sl, #16]
   12ec8:	cmp	r3, #0
   12ecc:	beq	13128 <__assert_fail@plt+0x1a24>
   12ed0:	mov	r9, #0
   12ed4:	ldr	r5, [sl, #20]
   12ed8:	b	12f40 <__assert_fail@plt+0x183c>
   12edc:	mov	r0, r4
   12ee0:	bl	113c8 <strdup@plt>
   12ee4:	str	r0, [sp, #32]
   12ee8:	cmp	r0, #0
   12eec:	beq	13110 <__assert_fail@plt+0x1a0c>
   12ef0:	bl	12e60 <__assert_fail@plt+0x175c>
   12ef4:	ldr	r3, [sl, #8]
   12ef8:	ldr	r1, [sl, #12]
   12efc:	sub	r3, r3, #-1073741823	; 0xc0000001
   12f00:	ldr	r2, [sp, #32]
   12f04:	ldr	r3, [r1, r3, lsl #2]
   12f08:	mov	r1, #0
   12f0c:	add	r9, r9, #1
   12f10:	str	r2, [r3, fp]
   12f14:	ldr	r0, [sp, #32]
   12f18:	bl	1744c <__assert_fail@plt+0x5d48>
   12f1c:	ldr	r5, [sl, #20]
   12f20:	ldr	r1, [sl, #16]
   12f24:	ldr	r2, [r5, fp]
   12f28:	ldr	r3, [r2, #16]
   12f2c:	cmp	r3, r0
   12f30:	movcs	r0, r3
   12f34:	cmp	r1, r9
   12f38:	str	r0, [r2, #16]
   12f3c:	bls	13128 <__assert_fail@plt+0x1a24>
   12f40:	ldr	r3, [r5, r9, lsl #2]
   12f44:	mov	r0, #0
   12f48:	mov	r2, #5
   12f4c:	ldr	r1, [r3, #12]
   12f50:	str	r0, [sp, #32]
   12f54:	bl	113bc <dcgettext@plt>
   12f58:	ldr	r3, [r5, r9, lsl #2]
   12f5c:	lsl	fp, r9, #2
   12f60:	ldr	r3, [r3]
   12f64:	cmp	r3, #2
   12f68:	mov	r4, r0
   12f6c:	bne	12edc <__assert_fail@plt+0x17d8>
   12f70:	ldr	r3, [sl, #24]
   12f74:	cmp	r3, #0
   12f78:	beq	12fe4 <__assert_fail@plt+0x18e0>
   12f7c:	cmp	r3, #4
   12f80:	beq	12fd8 <__assert_fail@plt+0x18d4>
   12f84:	cmp	r3, #3
   12f88:	bne	12edc <__assert_fail@plt+0x17d8>
   12f8c:	add	r2, sp, #36	; 0x24
   12f90:	ldrd	r0, [sl, #32]
   12f94:	bl	16dc8 <__assert_fail@plt+0x56c4>
   12f98:	mov	r2, #5
   12f9c:	ldr	r1, [pc, #400]	; 13134 <__assert_fail@plt+0x1a30>
   12fa0:	mov	r5, r0
   12fa4:	mov	r0, #0
   12fa8:	bl	113bc <dcgettext@plt>
   12fac:	mov	r3, r5
   12fb0:	str	r4, [sp]
   12fb4:	mov	r1, #1
   12fb8:	mov	r2, r0
   12fbc:	add	r0, sp, #32
   12fc0:	bl	114b8 <__asprintf_chk@plt>
   12fc4:	cmn	r0, #1
   12fc8:	moveq	r3, #0
   12fcc:	streq	r3, [sp, #32]
   12fd0:	ldr	r0, [sp, #32]
   12fd4:	b	12ee8 <__assert_fail@plt+0x17e4>
   12fd8:	ldr	r3, [sl, #28]
   12fdc:	tst	r3, #16
   12fe0:	bne	12edc <__assert_fail@plt+0x17d8>
   12fe4:	ldr	r2, [sl, #36]	; 0x24
   12fe8:	ldr	r3, [sl, #32]
   12fec:	ldr	r1, [sl, #28]
   12ff0:	mov	r6, r2
   12ff4:	mov	r5, r2
   12ff8:	mov	r7, r3
   12ffc:	str	r3, [sp, #16]
   13000:	mov	r4, r3
   13004:	and	r3, r1, #292	; 0x124
   13008:	str	r2, [sp, #20]
   1300c:	str	r1, [sp, #28]
   13010:	str	r3, [sp, #24]
   13014:	mov	r0, r7
   13018:	mov	r1, r6
   1301c:	mov	r2, #1000	; 0x3e8
   13020:	mov	r3, #0
   13024:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   13028:	mov	r0, r7
   1302c:	mov	r1, r6
   13030:	orrs	r3, r2, r3
   13034:	mov	r2, #1000	; 0x3e8
   13038:	mov	r3, #0
   1303c:	moveq	r8, #1
   13040:	movne	r8, #0
   13044:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   13048:	ldr	r2, [pc, #232]	; 13138 <__assert_fail@plt+0x1a34>
   1304c:	mov	r3, #0
   13050:	and	r2, r2, r4
   13054:	and	r3, r3, r5
   13058:	orrs	r3, r2, r3
   1305c:	moveq	r2, #1
   13060:	lsr	r3, r4, #10
   13064:	movne	r2, #0
   13068:	orr	r3, r3, r5, lsl #22
   1306c:	tst	r8, r2
   13070:	mov	r4, r3
   13074:	mov	r6, r1
   13078:	lsr	r1, r5, #10
   1307c:	mov	r7, r0
   13080:	mov	r5, r1
   13084:	bne	13014 <__assert_fail@plt+0x1910>
   13088:	cmp	r8, r2
   1308c:	bge	13114 <__assert_fail@plt+0x1a10>
   13090:	ldr	r3, [sp, #24]
   13094:	orr	r3, r3, #184	; 0xb8
   13098:	mov	r4, #1
   1309c:	mov	r5, #0
   130a0:	tst	r3, #32
   130a4:	orreq	r3, r3, #256	; 0x100
   130a8:	strd	r4, [sp, #8]
   130ac:	strd	r4, [sp]
   130b0:	ldr	r1, [sp, #20]
   130b4:	add	r2, sp, #36	; 0x24
   130b8:	ldr	r0, [sp, #16]
   130bc:	bl	161c8 <__assert_fail@plt+0x4ac4>
   130c0:	mov	r2, #5
   130c4:	ldr	r1, [pc, #112]	; 1313c <__assert_fail@plt+0x1a38>
   130c8:	mov	r4, r0
   130cc:	mov	r0, #0
   130d0:	bl	113bc <dcgettext@plt>
   130d4:	mov	r2, #5
   130d8:	ldr	r1, [pc, #84]	; 13134 <__assert_fail@plt+0x1a30>
   130dc:	mov	r5, r0
   130e0:	mov	r0, #0
   130e4:	bl	113bc <dcgettext@plt>
   130e8:	str	r5, [sp]
   130ec:	mov	r3, r4
   130f0:	mov	r1, #1
   130f4:	mov	r2, r0
   130f8:	add	r0, sp, #32
   130fc:	bl	114b8 <__asprintf_chk@plt>
   13100:	cmn	r0, #1
   13104:	bne	12fd0 <__assert_fail@plt+0x18cc>
   13108:	mov	r3, #0
   1310c:	str	r3, [sp, #32]
   13110:	bl	1a9a0 <__assert_fail@plt+0x929c>
   13114:	ldrgt	r3, [sp, #28]
   13118:	ldrle	r3, [sp, #24]
   1311c:	andgt	r3, r3, #260	; 0x104
   13120:	orr	r3, r3, #152	; 0x98
   13124:	b	13098 <__assert_fail@plt+0x1994>
   13128:	add	sp, sp, #692	; 0x2b4
   1312c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13130:	andeq	pc, r2, r0, asr #6
   13134:	muleq	r1, r8, r3
   13138:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1313c:	muleq	r1, r0, r3
   13140:	ldr	r3, [pc, #76]	; 13194 <__assert_fail@plt+0x1a90>
   13144:	ldr	ip, [r3, #40]	; 0x28
   13148:	cmp	ip, #0
   1314c:	beq	1318c <__assert_fail@plt+0x1a88>
   13150:	push	{lr}		; (str lr, [sp, #-4]!)
   13154:	sub	sp, sp, #28
   13158:	mov	r2, r0
   1315c:	mov	r3, r1
   13160:	add	r1, sp, #24
   13164:	mov	r0, ip
   13168:	strd	r2, [r1, #-24]!	; 0xffffffe8
   1316c:	bl	15750 <__assert_fail@plt+0x404c>
   13170:	cmp	r0, #0
   13174:	beq	13184 <__assert_fail@plt+0x1a80>
   13178:	ldr	r0, [r0, #16]
   1317c:	add	sp, sp, #28
   13180:	pop	{pc}		; (ldr pc, [sp], #4)
   13184:	mov	r0, #0
   13188:	b	1317c <__assert_fail@plt+0x1a78>
   1318c:	mov	r0, #0
   13190:	bx	lr
   13194:	andeq	pc, r2, r0, asr #6
   13198:	push	{r4, r5, r6, lr}
   1319c:	mov	r2, #4
   131a0:	ldr	r4, [pc, #132]	; 1322c <__assert_fail@plt+0x1b28>
   131a4:	mov	r5, r0
   131a8:	mov	r6, r1
   131ac:	ldr	ip, [r4, #16]
   131b0:	ldr	r0, [r4, #20]
   131b4:	add	ip, ip, #1
   131b8:	mov	r1, ip
   131bc:	str	ip, [r4, #16]
   131c0:	bl	1a4e4 <__assert_fail@plt+0x8de0>
   131c4:	lsl	r1, r5, #3
   131c8:	ldr	r3, [pc, #96]	; 13230 <__assert_fail@plt+0x1b2c>
   131cc:	sub	r2, r1, r5
   131d0:	ldr	ip, [r4, #16]
   131d4:	sub	r1, r1, r5
   131d8:	lsl	r2, r2, #2
   131dc:	cmp	r6, #0
   131e0:	add	lr, r3, #4
   131e4:	add	lr, lr, r2
   131e8:	sub	ip, ip, #-1073741823	; 0xc0000001
   131ec:	addne	r2, r3, r2
   131f0:	add	r3, r3, r1, lsl #2
   131f4:	str	lr, [r0, ip, lsl #2]
   131f8:	strne	r6, [r2, #16]
   131fc:	ldrb	r2, [r3, #28]
   13200:	str	r0, [r4, #20]
   13204:	cmp	r2, #0
   13208:	bne	13218 <__assert_fail@plt+0x1b14>
   1320c:	mov	r2, #1
   13210:	strb	r2, [r3, #28]
   13214:	pop	{r4, r5, r6, pc}
   13218:	ldr	r3, [pc, #20]	; 13234 <__assert_fail@plt+0x1b30>
   1321c:	ldr	r2, [pc, #20]	; 13238 <__assert_fail@plt+0x1b34>
   13220:	ldr	r1, [pc, #20]	; 1323c <__assert_fail@plt+0x1b38>
   13224:	ldr	r0, [pc, #20]	; 13240 <__assert_fail@plt+0x1b3c>
   13228:	bl	11704 <__assert_fail@plt>
   1322c:	andeq	pc, r2, r0, asr #6
   13230:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   13234:	andeq	sp, r1, r0, lsl r2
   13238:	andeq	r0, r0, r9, lsr #3
   1323c:	andeq	sp, r1, r0, lsr #7
   13240:	andeq	sp, r1, ip, lsr #7
   13244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13248:	sub	sp, sp, #20
   1324c:	mov	r6, r0
   13250:	bl	1153c <strlen@plt>
   13254:	mov	r9, #0
   13258:	str	r9, [sp, #12]
   1325c:	str	r9, [sp, #8]
   13260:	add	r8, r6, r0
   13264:	cmp	r6, r8
   13268:	beq	132f0 <__assert_fail@plt+0x1bec>
   1326c:	mov	r4, r6
   13270:	mov	fp, #63	; 0x3f
   13274:	mov	sl, #1
   13278:	b	132ac <__assert_fail@plt+0x1ba8>
   1327c:	ldr	r0, [sp, #4]
   13280:	bl	113ec <iswcntrl@plt>
   13284:	mov	r2, r5
   13288:	mov	r1, r4
   1328c:	cmp	r0, #0
   13290:	mov	r0, r6
   13294:	bne	132d4 <__assert_fail@plt+0x1bd0>
   13298:	add	r4, r4, r5
   1329c:	bl	11344 <memmove@plt>
   132a0:	cmp	r8, r4
   132a4:	add	r6, r6, r5
   132a8:	beq	132f0 <__assert_fail@plt+0x1bec>
   132ac:	sub	r7, r8, r4
   132b0:	mov	r2, r7
   132b4:	add	r3, sp, #8
   132b8:	mov	r1, r4
   132bc:	add	r0, sp, #4
   132c0:	bl	16e30 <__assert_fail@plt+0x572c>
   132c4:	cmp	r7, r0
   132c8:	mov	r5, r0
   132cc:	bcs	1327c <__assert_fail@plt+0x1b78>
   132d0:	mov	r5, sl
   132d4:	add	r4, r4, r5
   132d8:	cmp	r8, r4
   132dc:	strb	fp, [r6]
   132e0:	str	r9, [sp, #8]
   132e4:	add	r6, r6, #1
   132e8:	str	r9, [sp, #12]
   132ec:	bne	132ac <__assert_fail@plt+0x1ba8>
   132f0:	mov	r3, #0
   132f4:	strb	r3, [r6]
   132f8:	add	sp, sp, #20
   132fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13304:	vpush	{d8-d11}
   13308:	mov	r8, r3
   1330c:	mov	r6, r0
   13310:	mov	r9, r2
   13314:	sub	sp, sp, #916	; 0x394
   13318:	ldrb	r5, [sp, #992]	; 0x3e0
   1331c:	str	r1, [sp, #16]
   13320:	ldrb	r3, [sp, #988]	; 0x3dc
   13324:	cmp	r5, #0
   13328:	ldrb	r7, [sp, #1000]	; 0x3e8
   1332c:	beq	1334c <__assert_fail@plt+0x1c48>
   13330:	ldr	r4, [pc, #1584]	; 13968 <__assert_fail@plt+0x2264>
   13334:	ldrb	r2, [r4, #44]	; 0x2c
   13338:	cmp	r2, #0
   1333c:	beq	1334c <__assert_fail@plt+0x1c48>
   13340:	add	sp, sp, #916	; 0x394
   13344:	vpop	{d8-d11}
   13348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1334c:	cmp	r3, #0
   13350:	beq	13370 <__assert_fail@plt+0x1c6c>
   13354:	ldr	r4, [pc, #1548]	; 13968 <__assert_fail@plt+0x2264>
   13358:	ldrb	r3, [r4, #45]	; 0x2d
   1335c:	cmp	r3, #0
   13360:	bne	13370 <__assert_fail@plt+0x1c6c>
   13364:	ldrb	r3, [r4, #46]	; 0x2e
   13368:	cmp	r3, #0
   1336c:	beq	13340 <__assert_fail@plt+0x1c3c>
   13370:	ldr	r0, [sp, #984]	; 0x3d8
   13374:	bl	12d4c <__assert_fail@plt+0x1648>
   13378:	cmp	r0, #0
   1337c:	beq	13340 <__assert_fail@plt+0x1c3c>
   13380:	ldr	r0, [sp, #984]	; 0x3d8
   13384:	bl	12da8 <__assert_fail@plt+0x16a4>
   13388:	cmp	r0, #0
   1338c:	bne	13340 <__assert_fail@plt+0x1c3c>
   13390:	ldr	r2, [sp, #16]
   13394:	ldr	r3, [sp, #996]	; 0x3e4
   13398:	clz	r3, r3
   1339c:	lsr	r3, r3, #5
   133a0:	str	r3, [sp, #24]
   133a4:	cmp	r2, #0
   133a8:	moveq	r3, #0
   133ac:	andne	r3, r3, #1
   133b0:	cmp	r3, #0
   133b4:	beq	133c4 <__assert_fail@plt+0x1cc0>
   133b8:	ldrb	r3, [r2]
   133bc:	cmp	r3, #47	; 0x2f
   133c0:	bne	13340 <__assert_fail@plt+0x1c3c>
   133c4:	cmp	r8, #0
   133c8:	beq	138b8 <__assert_fail@plt+0x21b4>
   133cc:	ldr	r3, [sp, #996]	; 0x3e4
   133d0:	cmp	r3, #0
   133d4:	beq	138c8 <__assert_fail@plt+0x21c4>
   133d8:	mov	lr, r3
   133dc:	add	ip, sp, #72	; 0x48
   133e0:	ldm	lr!, {r0, r1, r2, r3}
   133e4:	add	r8, sp, #80	; 0x50
   133e8:	stmia	ip!, {r0, r1, r2, r3}
   133ec:	ldm	lr!, {r0, r1, r2, r3}
   133f0:	ldrd	r4, [r8]
   133f4:	stmia	ip!, {r0, r1, r2, r3}
   133f8:	ldm	lr!, {r0, r1, r2, r3}
   133fc:	stmia	ip!, {r0, r1, r2, r3}
   13400:	orrs	r3, r4, r5
   13404:	ldm	lr, {r0, r1}
   13408:	ldr	r4, [pc, #1368]	; 13968 <__assert_fail@plt+0x2264>
   1340c:	stm	ip, {r0, r1}
   13410:	bne	1342c <__assert_fail@plt+0x1d28>
   13414:	ldrb	r3, [r4, #45]	; 0x2d
   13418:	cmp	r3, #0
   1341c:	bne	1342c <__assert_fail@plt+0x1d28>
   13420:	ldrb	r3, [r4, #46]	; 0x2e
   13424:	cmp	r3, #0
   13428:	beq	13340 <__assert_fail@plt+0x1c3c>
   1342c:	ldr	r3, [sp, #996]	; 0x3e4
   13430:	cmp	r3, #0
   13434:	beq	13940 <__assert_fail@plt+0x223c>
   13438:	bl	12e14 <__assert_fail@plt+0x1710>
   1343c:	ldr	r3, [pc, #1320]	; 1396c <__assert_fail@plt+0x2268>
   13440:	cmp	r6, #0
   13444:	movne	r0, r6
   13448:	moveq	r0, r3
   1344c:	cmp	r9, #0
   13450:	moveq	r9, r3
   13454:	bl	1a984 <__assert_fail@plt+0x9280>
   13458:	cmp	r7, #0
   1345c:	mov	r5, r0
   13460:	str	r0, [sp, #44]	; 0x2c
   13464:	beq	134ac <__assert_fail@plt+0x1da8>
   13468:	bl	1153c <strlen@plt>
   1346c:	cmp	r0, #36	; 0x24
   13470:	bls	134ac <__assert_fail@plt+0x1da8>
   13474:	sub	r0, r0, #36	; 0x24
   13478:	add	r0, r5, r0
   1347c:	ldr	r1, [pc, #1260]	; 13970 <__assert_fail@plt+0x226c>
   13480:	bl	116f8 <strspn@plt>
   13484:	cmp	r0, #36	; 0x24
   13488:	bne	134ac <__assert_fail@plt+0x1da8>
   1348c:	mov	r1, #0
   13490:	ldr	r0, [sp, #44]	; 0x2c
   13494:	bl	14640 <__assert_fail@plt+0x2f3c>
   13498:	subs	r5, r0, #0
   1349c:	beq	134ac <__assert_fail@plt+0x1da8>
   134a0:	ldr	r0, [sp, #44]	; 0x2c
   134a4:	bl	14fa4 <__assert_fail@plt+0x38a0>
   134a8:	str	r5, [sp, #44]	; 0x2c
   134ac:	ldrd	r2, [r8, #32]
   134b0:	ldr	r0, [sp, #984]	; 0x3d8
   134b4:	ldr	r1, [pc, #1200]	; 1396c <__assert_fail@plt+0x2268>
   134b8:	mov	r7, r3
   134bc:	ldrd	sl, [r8, #40]	; 0x28
   134c0:	mvn	r3, #0
   134c4:	cmp	r0, #0
   134c8:	mov	r6, r2
   134cc:	mov	ip, r0
   134d0:	mvn	r2, #2
   134d4:	moveq	r0, r1
   134d8:	cmp	r7, r3
   134dc:	cmpeq	r6, r2
   134e0:	mov	r1, r7
   134e4:	movls	r1, #1
   134e8:	movhi	r1, #0
   134ec:	cmp	fp, r3
   134f0:	cmpeq	sl, r2
   134f4:	andls	r3, r1, #1
   134f8:	movhi	r3, #0
   134fc:	mvn	r1, #0
   13500:	str	r0, [sp, #984]	; 0x3d8
   13504:	mvn	r0, #0
   13508:	mov	r2, #1
   1350c:	cmp	r3, #0
   13510:	mov	r3, #0
   13514:	strd	r0, [sp, #240]	; 0xf0
   13518:	mov	r1, #0
   1351c:	strd	r6, [sp, #48]	; 0x30
   13520:	strd	sl, [sp, #56]	; 0x38
   13524:	strd	r6, [sp, #208]	; 0xd0
   13528:	strd	sl, [sp, #232]	; 0xe8
   1352c:	strd	sl, [sp, #216]	; 0xd8
   13530:	strd	r2, [sp, #200]	; 0xc8
   13534:	strd	r2, [sp, #192]	; 0xc0
   13538:	strb	r1, [sp, #224]	; 0xe0
   1353c:	strb	r1, [sp, #248]	; 0xf8
   13540:	bne	136d8 <__assert_fail@plt+0x1fd4>
   13544:	ldrd	r2, [r8, #16]
   13548:	ldrd	r0, [r8, #8]
   1354c:	ldrb	lr, [sp, #104]	; 0x68
   13550:	strd	r2, [sp, #32]
   13554:	ldrd	r2, [r8]
   13558:	mov	fp, r1
   1355c:	mov	sl, r0
   13560:	ldrd	r0, [sp, #32]
   13564:	mov	r7, r3
   13568:	mvn	r3, #0
   1356c:	cmp	r1, r3
   13570:	mov	r6, r2
   13574:	mvn	r2, #2
   13578:	cmpeq	r0, r2
   1357c:	movhi	lr, #0
   13580:	andls	lr, lr, #1
   13584:	cmp	r7, r3
   13588:	cmpeq	r6, r2
   1358c:	movls	ip, #1
   13590:	movhi	ip, #0
   13594:	cmp	fp, r3
   13598:	cmpeq	sl, r2
   1359c:	mov	r1, fp
   135a0:	andls	r1, ip, #1
   135a4:	movhi	r1, #0
   135a8:	mov	r0, r6
   135ac:	cmp	r1, #0
   135b0:	mov	r1, r7
   135b4:	ldrd	r2, [r4, #32]
   135b8:	strd	r0, [sp, #144]	; 0x90
   135bc:	ldrd	r0, [sp, #32]
   135c0:	strd	r2, [sp, #136]	; 0x88
   135c4:	ldmdb	r8, {r5, ip}
   135c8:	mvn	r3, #0
   135cc:	mvn	r2, #0
   135d0:	strd	r0, [sp, #152]	; 0x98
   135d4:	mov	r0, sl
   135d8:	mov	r1, fp
   135dc:	strd	r2, [sp, #176]	; 0xb0
   135e0:	mov	r3, #0
   135e4:	strb	lr, [sp, #160]	; 0xa0
   135e8:	strd	r0, [sp, #168]	; 0xa8
   135ec:	str	ip, [sp, #132]	; 0x84
   135f0:	str	r5, [sp, #128]	; 0x80
   135f4:	strb	r3, [sp, #184]	; 0xb8
   135f8:	beq	1361c <__assert_fail@plt+0x1f18>
   135fc:	subs	r2, r6, sl
   13600:	sbc	r3, r7, fp
   13604:	cmp	r7, fp
   13608:	cmpeq	r6, sl
   1360c:	movcc	r1, #1
   13610:	movcs	r1, #0
   13614:	strd	r2, [sp, #176]	; 0xb0
   13618:	strb	r1, [sp, #184]	; 0xb8
   1361c:	ldrb	r3, [r4, #53]	; 0x35
   13620:	ldr	r2, [sp, #24]
   13624:	tst	r2, r3
   13628:	bne	13ae0 <__assert_fail@plt+0x23dc>
   1362c:	ldr	r3, [r4, #16]
   13630:	cmp	r3, #0
   13634:	beq	13764 <__assert_fail@plt+0x2060>
   13638:	vldr	d8, [pc, #784]	; 13950 <__assert_fail@plt+0x224c>
   1363c:	vldr	d10, [pc, #788]	; 13958 <__assert_fail@plt+0x2254>
   13640:	vldr	d9, [pc, #792]	; 13960 <__assert_fail@plt+0x225c>
   13644:	ldr	r2, [r4, #20]
   13648:	ldr	fp, [sp, #16]
   1364c:	mov	sl, #0
   13650:	ldr	r3, [r2, sl, lsl #2]
   13654:	lsl	r5, sl, #2
   13658:	ldr	r2, [r3, #8]
   1365c:	cmp	r2, #1
   13660:	beq	136b4 <__assert_fail@plt+0x1fb0>
   13664:	bcc	136d0 <__assert_fail@plt+0x1fcc>
   13668:	cmp	r2, #2
   1366c:	bne	136bc <__assert_fail@plt+0x1fb8>
   13670:	mov	r6, #0
   13674:	ldr	r3, [r3]
   13678:	cmp	r3, #11
   1367c:	ldrls	pc, [pc, r3, lsl #2]
   13680:	b	138a4 <__assert_fail@plt+0x21a0>
   13684:	andeq	r3, r1, r0, ror r7
   13688:	andeq	r3, r1, r8, lsl #14
   1368c:	andeq	r3, r1, r4, asr r8
   13690:	andeq	r3, r1, r0, asr #16
   13694:	ldrdeq	r3, [r1], -r4
   13698:	andeq	r3, r1, r0, lsr #15
   1369c:	andeq	r3, r1, r4, asr r8
   136a0:	andeq	r3, r1, r0, asr #16
   136a4:	ldrdeq	r3, [r1], -r4
   136a8:	andeq	r3, r1, r0, lsr #15
   136ac:	muleq	r1, r0, r7
   136b0:	andeq	r3, r1, r0, lsl #15
   136b4:	add	r6, sp, #192	; 0xc0
   136b8:	b	13674 <__assert_fail@plt+0x1f70>
   136bc:	ldr	r3, [pc, #688]	; 13974 <__assert_fail@plt+0x2270>
   136c0:	ldr	r2, [pc, #688]	; 13978 <__assert_fail@plt+0x2274>
   136c4:	ldr	r1, [pc, #688]	; 1397c <__assert_fail@plt+0x2278>
   136c8:	ldr	r0, [pc, #688]	; 13980 <__assert_fail@plt+0x227c>
   136cc:	bl	11704 <__assert_fail@plt>
   136d0:	add	r6, sp, #128	; 0x80
   136d4:	b	13674 <__assert_fail@plt+0x1f70>
   136d8:	subs	r0, r6, sl
   136dc:	sbc	r1, r7, fp
   136e0:	cmp	r7, fp
   136e4:	mov	r3, r1
   136e8:	cmpeq	r6, sl
   136ec:	mov	r2, r0
   136f0:	mov	r1, fp
   136f4:	movcc	r1, #1
   136f8:	movcs	r1, #0
   136fc:	strd	r2, [sp, #240]	; 0xf0
   13700:	strb	r1, [sp, #248]	; 0xf8
   13704:	b	13544 <__assert_fail@plt+0x1e40>
   13708:	ldr	r0, [sp, #984]	; 0x3d8
   1370c:	bl	1a984 <__assert_fail@plt+0x9280>
   13710:	str	r0, [sp, #68]	; 0x44
   13714:	bl	12e60 <__assert_fail@plt+0x175c>
   13718:	mov	r1, #0
   1371c:	ldr	r0, [sp, #68]	; 0x44
   13720:	bl	1744c <__assert_fail@plt+0x5d48>
   13724:	ldr	r2, [r4, #20]
   13728:	ldr	r1, [r4, #8]
   1372c:	ldr	lr, [r4, #12]
   13730:	ldr	ip, [r2, r5]
   13734:	sub	r1, r1, #-1073741823	; 0xc0000001
   13738:	ldr	r6, [r4, #16]
   1373c:	ldr	r3, [ip, #16]
   13740:	ldr	r1, [lr, r1, lsl #2]
   13744:	add	sl, sl, #1
   13748:	ldr	lr, [sp, #68]	; 0x44
   1374c:	cmp	r3, r0
   13750:	movcs	r0, r3
   13754:	cmp	r6, sl
   13758:	str	r0, [ip, #16]
   1375c:	str	lr, [r1, r5]
   13760:	bhi	13650 <__assert_fail@plt+0x1f4c>
   13764:	ldr	r0, [sp, #44]	; 0x2c
   13768:	bl	14fa4 <__assert_fail@plt+0x38a0>
   1376c:	b	13340 <__assert_fail@plt+0x1c3c>
   13770:	ldr	r0, [sp, #44]	; 0x2c
   13774:	bl	1a984 <__assert_fail@plt+0x9280>
   13778:	str	r0, [sp, #68]	; 0x44
   1377c:	b	13714 <__assert_fail@plt+0x2010>
   13780:	mov	r0, r9
   13784:	bl	1a984 <__assert_fail@plt+0x9280>
   13788:	str	r0, [sp, #68]	; 0x44
   1378c:	b	13714 <__assert_fail@plt+0x2010>
   13790:	mov	r0, fp
   13794:	bl	1a984 <__assert_fail@plt+0x9280>
   13798:	str	r0, [sp, #68]	; 0x44
   1379c:	b	13714 <__assert_fail@plt+0x2010>
   137a0:	ldrd	r0, [r6, #48]	; 0x30
   137a4:	mvn	r3, #0
   137a8:	mvn	r2, #2
   137ac:	cmp	r1, r3
   137b0:	cmpeq	r0, r2
   137b4:	strd	r0, [sp, #16]
   137b8:	bls	1398c <__assert_fail@plt+0x2288>
   137bc:	ldr	r0, [pc, #424]	; 1396c <__assert_fail@plt+0x2268>
   137c0:	bl	113c8 <strdup@plt>
   137c4:	str	r0, [sp, #68]	; 0x44
   137c8:	cmp	r0, #0
   137cc:	bne	13714 <__assert_fail@plt+0x2010>
   137d0:	bl	1a9a0 <__assert_fail@plt+0x929c>
   137d4:	ldrb	ip, [r6, #32]
   137d8:	ldrd	r2, [r6, #24]
   137dc:	mvn	r0, #2
   137e0:	mvn	r1, #0
   137e4:	cmp	r3, r1
   137e8:	cmpeq	r2, r0
   137ec:	ldrd	r0, [r6]
   137f0:	strd	r0, [sp, #16]
   137f4:	ldrd	r0, [r6, #8]
   137f8:	bls	13874 <__assert_fail@plt+0x2170>
   137fc:	cmp	ip, #0
   13800:	beq	1386c <__assert_fail@plt+0x2168>
   13804:	ldr	lr, [r4, #28]
   13808:	strd	r0, [sp, #8]
   1380c:	ldrd	r0, [sp, #16]
   13810:	strd	r0, [sp]
   13814:	rsbs	r0, r2, #0
   13818:	add	r2, sp, #256	; 0x100
   1381c:	rsc	r1, r3, #0
   13820:	add	r2, r2, ip
   13824:	mov	r3, lr
   13828:	bl	161c8 <__assert_fail@plt+0x4ac4>
   1382c:	mov	r2, #45	; 0x2d
   13830:	mov	r3, r0
   13834:	sub	r0, r0, #1
   13838:	strb	r2, [r3, #-1]
   1383c:	b	13784 <__assert_fail@plt+0x2080>
   13840:	ldrd	r2, [r6, #48]	; 0x30
   13844:	mvn	r0, #2
   13848:	mvn	r1, #0
   1384c:	ldrb	ip, [r6, #56]	; 0x38
   13850:	b	137e4 <__assert_fail@plt+0x20e0>
   13854:	ldrd	r0, [r6, #16]
   13858:	mvn	r3, #0
   1385c:	mvn	r2, #2
   13860:	cmp	r1, r3
   13864:	cmpeq	r0, r2
   13868:	bls	13a78 <__assert_fail@plt+0x2374>
   1386c:	ldr	r0, [pc, #248]	; 1396c <__assert_fail@plt+0x2268>
   13870:	b	13784 <__assert_fail@plt+0x2080>
   13874:	cmp	ip, #0
   13878:	bne	13804 <__assert_fail@plt+0x2100>
   1387c:	ldr	ip, [r4, #28]
   13880:	strd	r0, [sp, #8]
   13884:	ldrd	r0, [sp, #16]
   13888:	strd	r0, [sp]
   1388c:	mov	r1, r3
   13890:	mov	r0, r2
   13894:	mov	r3, ip
   13898:	add	r2, sp, #256	; 0x100
   1389c:	bl	161c8 <__assert_fail@plt+0x4ac4>
   138a0:	b	13784 <__assert_fail@plt+0x2080>
   138a4:	ldr	r3, [pc, #200]	; 13974 <__assert_fail@plt+0x2270>
   138a8:	ldr	r2, [pc, #212]	; 13984 <__assert_fail@plt+0x2280>
   138ac:	ldr	r1, [pc, #200]	; 1397c <__assert_fail@plt+0x2278>
   138b0:	ldr	r0, [pc, #208]	; 13988 <__assert_fail@plt+0x2284>
   138b4:	bl	11704 <__assert_fail@plt>
   138b8:	ldr	r8, [sp, #16]
   138bc:	cmp	r8, #0
   138c0:	moveq	r8, r6
   138c4:	b	133cc <__assert_fail@plt+0x1cc8>
   138c8:	add	r2, sp, #72	; 0x48
   138cc:	mov	r1, r6
   138d0:	mov	r0, r8
   138d4:	bl	14ffc <__assert_fail@plt+0x38f8>
   138d8:	cmp	r0, #0
   138dc:	beq	13aa8 <__assert_fail@plt+0x23a4>
   138e0:	cmp	r7, #0
   138e4:	beq	13c6c <__assert_fail@plt+0x2568>
   138e8:	bl	1156c <__errno_location@plt>
   138ec:	ldr	r4, [r0]
   138f0:	cmp	r4, #2
   138f4:	cmpne	r4, #13
   138f8:	bne	13c74 <__assert_fail@plt+0x2570>
   138fc:	ldr	r4, [pc, #100]	; 13968 <__assert_fail@plt+0x2264>
   13900:	ldrb	r3, [r4, #45]	; 0x2d
   13904:	cmp	r3, #0
   13908:	beq	13340 <__assert_fail@plt+0x1c3c>
   1390c:	ldrb	r1, [sp, #996]	; 0x3e4
   13910:	add	r8, sp, #80	; 0x50
   13914:	mvn	r2, #0
   13918:	mvn	r3, #0
   1391c:	strb	r1, [sp, #104]	; 0x68
   13920:	ldr	r1, [pc, #68]	; 1396c <__assert_fail@plt+0x2268>
   13924:	strd	r2, [r8, #40]	; 0x28
   13928:	str	r1, [sp, #984]	; 0x3d8
   1392c:	strd	r2, [r8, #32]
   13930:	strd	r2, [r8, #16]
   13934:	strd	r2, [r8, #8]
   13938:	strd	r2, [r8]
   1393c:	strd	r2, [r8, #-8]
   13940:	mov	r3, #1
   13944:	strb	r3, [r4, #52]	; 0x34
   13948:	b	13438 <__assert_fail@plt+0x1d34>
   1394c:	nop			; (mov r0, r0)
	...
   1395c:	subsmi	r0, r9, r0
   13960:	andeq	r0, r0, r0
   13964:	svccc	0x00f00000	; IMB
   13968:	andeq	pc, r2, r0, asr #6
   1396c:			; <UNDEFINED> instruction: 0x0001d3bc
   13970:	andeq	sp, r1, r0, asr #7
   13974:	andeq	sp, r1, ip, lsl r2
   13978:	andeq	r0, r0, r6, lsl #9
   1397c:	andeq	sp, r1, r0, lsr #7
   13980:	ldrdeq	sp, [r1], -r8
   13984:	andeq	r0, r0, ip, ror #9
   13988:	strdeq	sp, [r1], -r4
   1398c:	ldrd	r0, [r6, #24]
   13990:	cmp	r1, r3
   13994:	cmpeq	r0, r2
   13998:	strd	r0, [sp, #24]
   1399c:	bhi	137bc <__assert_fail@plt+0x20b8>
   139a0:	ldrb	r3, [r6, #56]	; 0x38
   139a4:	cmp	r3, #0
   139a8:	bne	13c4c <__assert_fail@plt+0x2548>
   139ac:	add	r3, pc, #788	; 0x314
   139b0:	ldrd	r2, [r3]
   139b4:	ldrd	r0, [sp, #16]
   139b8:	cmp	r1, r3
   139bc:	cmpeq	r0, r2
   139c0:	bls	13ce0 <__assert_fail@plt+0x25dc>
   139c4:	ldrb	r6, [r6, #32]
   139c8:	ldrd	r0, [sp, #16]
   139cc:	bl	1cf54 <__assert_fail@plt+0xb850>
   139d0:	vmov	d11, r0, r1
   139d4:	cmp	r6, #0
   139d8:	ldrd	r0, [sp, #24]
   139dc:	beq	13c40 <__assert_fail@plt+0x253c>
   139e0:	rsbs	r0, r0, #0
   139e4:	rsc	r1, r1, #0
   139e8:	bl	1cf54 <__assert_fail@plt+0xb850>
   139ec:	vmov	d7, r0, r1
   139f0:	vneg.f64	d6, d7
   139f4:	vadd.f64	d6, d11, d6
   139f8:	vcmp.f64	d6, d8
   139fc:	vmrs	APSR_nzcv, fpscr
   13a00:	beq	137bc <__assert_fail@plt+0x20b8>
   13a04:	vmul.f64	d11, d11, d10
   13a08:	vdiv.f64	d7, d11, d6
   13a0c:	vcvt.s32.f64	s12, d7
   13a10:	vcvt.f64.s32	d6, s12
   13a14:	vsub.f64	d5, d6, d9
   13a18:	vcmpe.f64	d7, d5
   13a1c:	vmrs	APSR_nzcv, fpscr
   13a20:	ble	13a48 <__assert_fail@plt+0x2344>
   13a24:	vadd.f64	d5, d6, d9
   13a28:	vcmpe.f64	d7, d5
   13a2c:	vmrs	APSR_nzcv, fpscr
   13a30:	bhi	13a48 <__assert_fail@plt+0x2344>
   13a34:	vcmpe.f64	d7, d6
   13a38:	vmrs	APSR_nzcv, fpscr
   13a3c:	vmovle.f64	d7, d8
   13a40:	vmovgt.f64	d7, d9
   13a44:	vadd.f64	d7, d7, d6
   13a48:	vcmpe.f64	d7, d8
   13a4c:	vmrs	APSR_nzcv, fpscr
   13a50:	blt	137bc <__assert_fail@plt+0x20b8>
   13a54:	vstr	d7, [sp]
   13a58:	ldr	r2, [pc, #624]	; 13cd0 <__assert_fail@plt+0x25cc>
   13a5c:	mov	r1, #1
   13a60:	add	r0, sp, #68	; 0x44
   13a64:	bl	114b8 <__asprintf_chk@plt>
   13a68:	cmn	r0, #1
   13a6c:	beq	13a9c <__assert_fail@plt+0x2398>
   13a70:	ldr	r0, [sp, #68]	; 0x44
   13a74:	b	137c8 <__assert_fail@plt+0x20c4>
   13a78:	ldrd	r2, [r6, #8]
   13a7c:	ldr	ip, [r4, #28]
   13a80:	strd	r2, [sp, #8]
   13a84:	ldrd	r6, [r6]
   13a88:	mov	r3, ip
   13a8c:	add	r2, sp, #256	; 0x100
   13a90:	strd	r6, [sp]
   13a94:	bl	161c8 <__assert_fail@plt+0x4ac4>
   13a98:	b	13784 <__assert_fail@plt+0x2080>
   13a9c:	mov	r3, #0
   13aa0:	str	r3, [sp, #68]	; 0x44
   13aa4:	b	137d0 <__assert_fail@plt+0x20cc>
   13aa8:	cmp	r7, #0
   13aac:	ldr	r4, [pc, #544]	; 13cd4 <__assert_fail@plt+0x25d0>
   13ab0:	beq	13ca8 <__assert_fail@plt+0x25a4>
   13ab4:	ldrb	r3, [r4, #45]	; 0x2d
   13ab8:	cmp	r3, #0
   13abc:	bne	13d78 <__assert_fail@plt+0x2674>
   13ac0:	add	r8, sp, #80	; 0x50
   13ac4:	ldrd	r2, [r8]
   13ac8:	orrs	r3, r2, r3
   13acc:	bne	13940 <__assert_fail@plt+0x223c>
   13ad0:	ldrb	r3, [r4, #46]	; 0x2e
   13ad4:	cmp	r3, #0
   13ad8:	bne	13940 <__assert_fail@plt+0x223c>
   13adc:	b	13340 <__assert_fail@plt+0x1c3c>
   13ae0:	ldrd	r0, [sp, #48]	; 0x30
   13ae4:	mvn	r3, #0
   13ae8:	mvn	r2, #2
   13aec:	cmp	r1, r3
   13af0:	cmpeq	r0, r2
   13af4:	bhi	13b10 <__assert_fail@plt+0x240c>
   13af8:	ldrd	r2, [r4, #96]	; 0x60
   13afc:	adds	r0, r0, r2
   13b00:	adc	r1, r1, r3
   13b04:	mov	r2, r0
   13b08:	mov	r3, r1
   13b0c:	strd	r2, [r4, #96]	; 0x60
   13b10:	ldrd	r0, [sp, #56]	; 0x38
   13b14:	mvn	r3, #0
   13b18:	mvn	r2, #2
   13b1c:	cmp	r1, r3
   13b20:	cmpeq	r0, r2
   13b24:	bhi	13b38 <__assert_fail@plt+0x2434>
   13b28:	ldrd	r2, [r4, #104]	; 0x68
   13b2c:	adds	r0, r0, r2
   13b30:	adc	r1, r1, r3
   13b34:	strd	r0, [r4, #104]	; 0x68
   13b38:	mvn	r3, #0
   13b3c:	mvn	r2, #2
   13b40:	cmp	r7, r3
   13b44:	cmpeq	r6, r2
   13b48:	bhi	13b70 <__assert_fail@plt+0x246c>
   13b4c:	mul	r1, r5, r7
   13b50:	mov	r2, r6
   13b54:	umull	r6, r7, r5, r6
   13b58:	mla	r1, ip, r2, r1
   13b5c:	ldrd	r2, [r4, #64]	; 0x40
   13b60:	add	r7, r1, r7
   13b64:	adds	r0, r2, r6
   13b68:	adc	r1, r3, r7
   13b6c:	strd	r0, [r4, #64]	; 0x40
   13b70:	mvn	r3, #0
   13b74:	mvn	r2, #2
   13b78:	cmp	fp, r3
   13b7c:	cmpeq	sl, r2
   13b80:	bhi	13ba4 <__assert_fail@plt+0x24a0>
   13b84:	mul	r1, r5, fp
   13b88:	umull	r6, r7, r5, sl
   13b8c:	ldrd	r2, [r4, #72]	; 0x48
   13b90:	mla	r1, ip, sl, r1
   13b94:	adds	r0, r2, r6
   13b98:	add	r7, r1, r7
   13b9c:	adc	r1, r3, r7
   13ba0:	strd	r0, [r4, #72]	; 0x48
   13ba4:	ldrd	r0, [sp, #32]
   13ba8:	mvn	r3, #0
   13bac:	mvn	r2, #2
   13bb0:	cmp	r1, r3
   13bb4:	cmpeq	r0, r2
   13bb8:	bhi	1362c <__assert_fail@plt+0x1f28>
   13bbc:	mul	r3, r5, r1
   13bc0:	mov	r6, r0
   13bc4:	umull	r0, r1, r5, r0
   13bc8:	mla	ip, ip, r6, r3
   13bcc:	ldrb	r3, [r4, #88]	; 0x58
   13bd0:	add	r1, ip, r1
   13bd4:	cmp	r3, lr
   13bd8:	beq	13e20 <__assert_fail@plt+0x271c>
   13bdc:	cmp	r3, #0
   13be0:	beq	13bf4 <__assert_fail@plt+0x24f0>
   13be4:	ldrd	r2, [r4, #80]	; 0x50
   13be8:	rsbs	r6, r2, #0
   13bec:	rsc	r7, r3, #0
   13bf0:	strd	r6, [r4, #80]	; 0x50
   13bf4:	cmp	lr, #0
   13bf8:	beq	13c04 <__assert_fail@plt+0x2500>
   13bfc:	rsbs	r0, r0, #0
   13c00:	rsc	r1, r1, #0
   13c04:	ldrd	r6, [r4, #80]	; 0x50
   13c08:	cmp	r7, r1
   13c0c:	cmpeq	r6, r0
   13c10:	bls	13e0c <__assert_fail@plt+0x2708>
   13c14:	subs	r2, r6, r0
   13c18:	sbc	r3, r7, r1
   13c1c:	strd	r2, [r4, #80]	; 0x50
   13c20:	ldrb	r3, [r4, #88]	; 0x58
   13c24:	cmp	r3, #0
   13c28:	beq	1362c <__assert_fail@plt+0x1f28>
   13c2c:	ldrd	r2, [r4, #80]	; 0x50
   13c30:	rsbs	r0, r2, #0
   13c34:	rsc	r1, r3, #0
   13c38:	strd	r0, [r4, #80]	; 0x50
   13c3c:	b	1362c <__assert_fail@plt+0x1f28>
   13c40:	bl	1cf54 <__assert_fail@plt+0xb850>
   13c44:	vmov	d6, r0, r1
   13c48:	b	139f4 <__assert_fail@plt+0x22f0>
   13c4c:	ldrd	r0, [sp, #16]
   13c50:	rsbs	r0, r0, #0
   13c54:	rsc	r1, r1, #0
   13c58:	bl	1cf54 <__assert_fail@plt+0xb850>
   13c5c:	ldrb	r6, [r6, #32]
   13c60:	vmov	d7, r0, r1
   13c64:	vneg.f64	d11, d7
   13c68:	b	139d4 <__assert_fail@plt+0x22d0>
   13c6c:	bl	1156c <__errno_location@plt>
   13c70:	ldr	r4, [r0]
   13c74:	mov	r2, r8
   13c78:	mov	r1, #3
   13c7c:	mov	r0, #0
   13c80:	bl	19bb8 <__assert_fail@plt+0x84b4>
   13c84:	ldr	r2, [pc, #76]	; 13cd8 <__assert_fail@plt+0x25d4>
   13c88:	mov	r1, r4
   13c8c:	mov	r3, r0
   13c90:	mov	r0, #0
   13c94:	bl	11494 <error@plt>
   13c98:	ldr	r3, [pc, #52]	; 13cd4 <__assert_fail@plt+0x25d0>
   13c9c:	mov	r2, #1
   13ca0:	str	r2, [r3, #48]	; 0x30
   13ca4:	b	13340 <__assert_fail@plt+0x1c3c>
   13ca8:	add	r8, sp, #80	; 0x50
   13cac:	ldrd	r2, [r8]
   13cb0:	orrs	r3, r2, r3
   13cb4:	bne	13940 <__assert_fail@plt+0x223c>
   13cb8:	ldrb	r3, [r4, #45]	; 0x2d
   13cbc:	cmp	r3, #0
   13cc0:	bne	13940 <__assert_fail@plt+0x223c>
   13cc4:	b	13420 <__assert_fail@plt+0x1d1c>
   13cc8:			; <UNDEFINED> instruction: 0xf5c28f5c
   13ccc:	addeq	r5, pc, #40, 24	; 0x2800
   13cd0:	andeq	sp, r1, ip, ror #7
   13cd4:	andeq	pc, r2, r0, asr #6
   13cd8:	strdeq	lr, [r1], -r4
   13cdc:			; <UNDEFINED> instruction: 0x0001d3bc
   13ce0:	ldrd	r2, [sp, #24]
   13ce4:	ldrd	r0, [sp, #16]
   13ce8:	ldrb	r6, [r6, #32]
   13cec:	adds	r0, r0, r2
   13cf0:	adc	r1, r1, r3
   13cf4:	mov	r2, r0
   13cf8:	mov	r3, r1
   13cfc:	strd	r2, [sp, #32]
   13d00:	orrs	r3, r2, r3
   13d04:	beq	139c8 <__assert_fail@plt+0x22c4>
   13d08:	ldrd	r2, [sp, #32]
   13d0c:	ldrd	r0, [sp, #16]
   13d10:	cmp	r1, r3
   13d14:	cmpeq	r0, r2
   13d18:	movhi	r3, #1
   13d1c:	movls	r3, #0
   13d20:	cmp	r3, r6
   13d24:	bne	139c8 <__assert_fail@plt+0x22c4>
   13d28:	mov	ip, #100	; 0x64
   13d2c:	ldrd	r2, [sp, #32]
   13d30:	umull	r6, r7, r0, ip
   13d34:	mla	r7, ip, r1, r7
   13d38:	mov	r0, r6
   13d3c:	mov	r1, r7
   13d40:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   13d44:	mov	r0, r6
   13d48:	mov	r1, r7
   13d4c:	mov	r7, #0
   13d50:	orrs	r3, r2, r3
   13d54:	ldrd	r2, [sp, #32]
   13d58:	movne	r6, #1
   13d5c:	moveq	r6, #0
   13d60:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   13d64:	adds	r0, r0, r6
   13d68:	adc	r1, r1, r7
   13d6c:	bl	1cf54 <__assert_fail@plt+0xb850>
   13d70:	vmov	d7, r0, r1
   13d74:	b	13a48 <__assert_fail@plt+0x2344>
   13d78:	mov	r1, r8
   13d7c:	add	r2, sp, #256	; 0x100
   13d80:	mov	r0, #3
   13d84:	bl	116bc <__xstat64@plt>
   13d88:	cmp	r0, #0
   13d8c:	bne	13ca8 <__assert_fail@plt+0x25a4>
   13d90:	add	r3, sp, #256	; 0x100
   13d94:	ldrd	r0, [r3]
   13d98:	bl	13140 <__assert_fail@plt+0x1a3c>
   13d9c:	cmp	r0, #0
   13da0:	beq	13ca8 <__assert_fail@plt+0x25a4>
   13da4:	ldr	r8, [r0, #8]
   13da8:	cmp	r8, #0
   13dac:	beq	13ca8 <__assert_fail@plt+0x25a4>
   13db0:	mov	r1, r6
   13db4:	ldr	r0, [r8]
   13db8:	bl	11320 <strcmp@plt>
   13dbc:	cmp	r0, #0
   13dc0:	beq	13ca8 <__assert_fail@plt+0x25a4>
   13dc4:	ldrb	r3, [r8, #24]
   13dc8:	add	r8, sp, #80	; 0x50
   13dcc:	and	r5, r5, r3, lsr #1
   13dd0:	tst	r5, #1
   13dd4:	bne	13cac <__assert_fail@plt+0x25a8>
   13dd8:	ldrb	r1, [sp, #996]	; 0x3e4
   13ddc:	mvn	r2, #0
   13de0:	mvn	r3, #0
   13de4:	strb	r1, [sp, #104]	; 0x68
   13de8:	ldr	r1, [pc, #-276]	; 13cdc <__assert_fail@plt+0x25d8>
   13dec:	strd	r2, [r8, #40]	; 0x28
   13df0:	str	r1, [sp, #984]	; 0x3d8
   13df4:	strd	r2, [r8, #32]
   13df8:	strd	r2, [r8, #16]
   13dfc:	strd	r2, [r8, #8]
   13e00:	strd	r2, [r8]
   13e04:	strd	r2, [r8, #-8]
   13e08:	b	13cac <__assert_fail@plt+0x25a8>
   13e0c:	subs	r2, r0, r6
   13e10:	sbc	r3, r1, r7
   13e14:	strb	lr, [r4, #88]	; 0x58
   13e18:	strd	r2, [r4, #80]	; 0x50
   13e1c:	b	13c20 <__assert_fail@plt+0x251c>
   13e20:	ldrd	r2, [r4, #80]	; 0x50
   13e24:	adds	r6, r2, r0
   13e28:	adc	r7, r3, r1
   13e2c:	strd	r6, [r4, #80]	; 0x50
   13e30:	b	1362c <__assert_fail@plt+0x1f28>
   13e34:	subs	r5, r0, #0
   13e38:	push	{r7, lr}
   13e3c:	sub	sp, sp, #56	; 0x38
   13e40:	beq	13e7c <__assert_fail@plt+0x2778>
   13e44:	ldr	r3, [pc, #836]	; 14190 <__assert_fail@plt+0x2a8c>
   13e48:	mov	r2, #5
   13e4c:	ldr	r1, [pc, #832]	; 14194 <__assert_fail@plt+0x2a90>
   13e50:	mov	r0, #0
   13e54:	ldr	r4, [r3]
   13e58:	bl	113bc <dcgettext@plt>
   13e5c:	ldr	r3, [pc, #820]	; 14198 <__assert_fail@plt+0x2a94>
   13e60:	mov	r1, #1
   13e64:	ldr	r3, [r3]
   13e68:	mov	r2, r0
   13e6c:	mov	r0, r4
   13e70:	bl	115c0 <__fprintf_chk@plt>
   13e74:	mov	r0, r5
   13e78:	bl	11530 <exit@plt>
   13e7c:	mov	r2, #5
   13e80:	ldr	r1, [pc, #788]	; 1419c <__assert_fail@plt+0x2a98>
   13e84:	bl	113bc <dcgettext@plt>
   13e88:	ldr	r3, [pc, #776]	; 14198 <__assert_fail@plt+0x2a94>
   13e8c:	ldr	r6, [pc, #780]	; 141a0 <__assert_fail@plt+0x2a9c>
   13e90:	ldr	r4, [pc, #780]	; 141a4 <__assert_fail@plt+0x2aa0>
   13e94:	ldr	r2, [r3]
   13e98:	mov	r1, r0
   13e9c:	mov	r0, #1
   13ea0:	bl	1159c <__printf_chk@plt>
   13ea4:	mov	r2, #5
   13ea8:	ldr	r1, [pc, #760]	; 141a8 <__assert_fail@plt+0x2aa4>
   13eac:	mov	r0, r5
   13eb0:	bl	113bc <dcgettext@plt>
   13eb4:	ldr	r1, [r6]
   13eb8:	bl	112f0 <fputs_unlocked@plt>
   13ebc:	mov	r2, #5
   13ec0:	ldr	r1, [pc, #740]	; 141ac <__assert_fail@plt+0x2aa8>
   13ec4:	mov	r0, r5
   13ec8:	bl	113bc <dcgettext@plt>
   13ecc:	ldr	r1, [r6]
   13ed0:	bl	112f0 <fputs_unlocked@plt>
   13ed4:	mov	r2, #5
   13ed8:	ldr	r1, [pc, #720]	; 141b0 <__assert_fail@plt+0x2aac>
   13edc:	mov	r0, r5
   13ee0:	bl	113bc <dcgettext@plt>
   13ee4:	ldr	r1, [r6]
   13ee8:	bl	112f0 <fputs_unlocked@plt>
   13eec:	mov	r2, #5
   13ef0:	ldr	r1, [pc, #700]	; 141b4 <__assert_fail@plt+0x2ab0>
   13ef4:	mov	r0, r5
   13ef8:	bl	113bc <dcgettext@plt>
   13efc:	ldr	r1, [r6]
   13f00:	bl	112f0 <fputs_unlocked@plt>
   13f04:	mov	r2, #5
   13f08:	ldr	r1, [pc, #680]	; 141b8 <__assert_fail@plt+0x2ab4>
   13f0c:	mov	r0, r5
   13f10:	bl	113bc <dcgettext@plt>
   13f14:	ldr	r1, [r6]
   13f18:	bl	112f0 <fputs_unlocked@plt>
   13f1c:	mov	r2, #5
   13f20:	ldr	r1, [pc, #660]	; 141bc <__assert_fail@plt+0x2ab8>
   13f24:	mov	r0, r5
   13f28:	bl	113bc <dcgettext@plt>
   13f2c:	ldr	r1, [r6]
   13f30:	bl	112f0 <fputs_unlocked@plt>
   13f34:	mov	r2, #5
   13f38:	ldr	r1, [pc, #640]	; 141c0 <__assert_fail@plt+0x2abc>
   13f3c:	mov	r0, r5
   13f40:	bl	113bc <dcgettext@plt>
   13f44:	ldr	r1, [r6]
   13f48:	bl	112f0 <fputs_unlocked@plt>
   13f4c:	mov	r2, #5
   13f50:	ldr	r1, [pc, #620]	; 141c4 <__assert_fail@plt+0x2ac0>
   13f54:	mov	r0, r5
   13f58:	bl	113bc <dcgettext@plt>
   13f5c:	ldr	r1, [r6]
   13f60:	bl	112f0 <fputs_unlocked@plt>
   13f64:	mov	r2, #5
   13f68:	ldr	r1, [pc, #600]	; 141c8 <__assert_fail@plt+0x2ac4>
   13f6c:	mov	r0, r5
   13f70:	bl	113bc <dcgettext@plt>
   13f74:	ldr	r1, [r6]
   13f78:	bl	112f0 <fputs_unlocked@plt>
   13f7c:	mov	r2, #5
   13f80:	ldr	r1, [pc, #580]	; 141cc <__assert_fail@plt+0x2ac8>
   13f84:	mov	r0, r5
   13f88:	bl	113bc <dcgettext@plt>
   13f8c:	ldr	r2, [pc, #572]	; 141d0 <__assert_fail@plt+0x2acc>
   13f90:	mov	r1, r0
   13f94:	mov	r0, #1
   13f98:	bl	1159c <__printf_chk@plt>
   13f9c:	mov	r2, #5
   13fa0:	ldr	r1, [pc, #556]	; 141d4 <__assert_fail@plt+0x2ad0>
   13fa4:	mov	r0, r5
   13fa8:	bl	113bc <dcgettext@plt>
   13fac:	ldr	r1, [r6]
   13fb0:	bl	112f0 <fputs_unlocked@plt>
   13fb4:	mov	r2, #5
   13fb8:	ldr	r1, [pc, #536]	; 141d8 <__assert_fail@plt+0x2ad4>
   13fbc:	mov	r0, r5
   13fc0:	bl	113bc <dcgettext@plt>
   13fc4:	ldr	r1, [r6]
   13fc8:	bl	112f0 <fputs_unlocked@plt>
   13fcc:	ldm	r4!, {r0, r1, r2, r3}
   13fd0:	mov	lr, sp
   13fd4:	stmia	lr!, {r0, r1, r2, r3}
   13fd8:	ldm	r4!, {r0, r1, r2, r3}
   13fdc:	ldr	ip, [sp]
   13fe0:	stmia	lr!, {r0, r1, r2, r3}
   13fe4:	cmp	ip, #0
   13fe8:	ldm	r4!, {r0, r1, r2, r3}
   13fec:	stmia	lr!, {r0, r1, r2, r3}
   13ff0:	ldm	r4, {r0, r1}
   13ff4:	moveq	r4, sp
   13ff8:	stm	lr, {r0, r1}
   13ffc:	beq	1402c <__assert_fail@plt+0x2928>
   14000:	ldr	r7, [pc, #468]	; 141dc <__assert_fail@plt+0x2ad8>
   14004:	mov	r4, sp
   14008:	b	14018 <__assert_fail@plt+0x2914>
   1400c:	ldr	ip, [r4, #8]!
   14010:	cmp	ip, #0
   14014:	beq	1402c <__assert_fail@plt+0x2928>
   14018:	mov	r1, ip
   1401c:	mov	r0, r7
   14020:	bl	11320 <strcmp@plt>
   14024:	cmp	r0, #0
   14028:	bne	1400c <__assert_fail@plt+0x2908>
   1402c:	ldr	r4, [r4, #4]
   14030:	mov	r2, #5
   14034:	cmp	r4, #0
   14038:	ldr	r1, [pc, #416]	; 141e0 <__assert_fail@plt+0x2adc>
   1403c:	beq	140e4 <__assert_fail@plt+0x29e0>
   14040:	mov	r0, #0
   14044:	bl	113bc <dcgettext@plt>
   14048:	ldr	r3, [pc, #404]	; 141e4 <__assert_fail@plt+0x2ae0>
   1404c:	ldr	r2, [pc, #404]	; 141e8 <__assert_fail@plt+0x2ae4>
   14050:	mov	r1, r0
   14054:	mov	r0, #1
   14058:	bl	1159c <__printf_chk@plt>
   1405c:	mov	r1, #0
   14060:	mov	r0, #5
   14064:	bl	11614 <setlocale@plt>
   14068:	cmp	r0, #0
   1406c:	ldreq	r7, [pc, #360]	; 141dc <__assert_fail@plt+0x2ad8>
   14070:	beq	1408c <__assert_fail@plt+0x2988>
   14074:	mov	r2, #3
   14078:	ldr	r1, [pc, #364]	; 141ec <__assert_fail@plt+0x2ae8>
   1407c:	bl	116d4 <strncmp@plt>
   14080:	ldr	r7, [pc, #340]	; 141dc <__assert_fail@plt+0x2ad8>
   14084:	cmp	r0, #0
   14088:	bne	14174 <__assert_fail@plt+0x2a70>
   1408c:	mov	r2, #5
   14090:	ldr	r1, [pc, #344]	; 141f0 <__assert_fail@plt+0x2aec>
   14094:	mov	r0, #0
   14098:	bl	113bc <dcgettext@plt>
   1409c:	ldr	r3, [pc, #312]	; 141dc <__assert_fail@plt+0x2ad8>
   140a0:	ldr	r2, [pc, #316]	; 141e4 <__assert_fail@plt+0x2ae0>
   140a4:	mov	r1, r0
   140a8:	mov	r0, #1
   140ac:	bl	1159c <__printf_chk@plt>
   140b0:	mov	r2, #5
   140b4:	ldr	r1, [pc, #312]	; 141f4 <__assert_fail@plt+0x2af0>
   140b8:	mov	r0, #0
   140bc:	bl	113bc <dcgettext@plt>
   140c0:	ldr	r2, [pc, #304]	; 141f8 <__assert_fail@plt+0x2af4>
   140c4:	cmp	r4, r7
   140c8:	ldr	r3, [pc, #300]	; 141fc <__assert_fail@plt+0x2af8>
   140cc:	movne	r3, r2
   140d0:	mov	r1, r0
   140d4:	mov	r2, r4
   140d8:	mov	r0, #1
   140dc:	bl	1159c <__printf_chk@plt>
   140e0:	b	13e74 <__assert_fail@plt+0x2770>
   140e4:	mov	r0, r4
   140e8:	bl	113bc <dcgettext@plt>
   140ec:	ldr	r3, [pc, #240]	; 141e4 <__assert_fail@plt+0x2ae0>
   140f0:	ldr	r2, [pc, #240]	; 141e8 <__assert_fail@plt+0x2ae4>
   140f4:	mov	r1, r0
   140f8:	mov	r0, #1
   140fc:	bl	1159c <__printf_chk@plt>
   14100:	mov	r1, r4
   14104:	mov	r0, #5
   14108:	bl	11614 <setlocale@plt>
   1410c:	cmp	r0, #0
   14110:	beq	14128 <__assert_fail@plt+0x2a24>
   14114:	mov	r2, #3
   14118:	ldr	r1, [pc, #204]	; 141ec <__assert_fail@plt+0x2ae8>
   1411c:	bl	116d4 <strncmp@plt>
   14120:	cmp	r0, #0
   14124:	bne	1416c <__assert_fail@plt+0x2a68>
   14128:	mov	r2, #5
   1412c:	ldr	r1, [pc, #188]	; 141f0 <__assert_fail@plt+0x2aec>
   14130:	mov	r0, #0
   14134:	bl	113bc <dcgettext@plt>
   14138:	ldr	r3, [pc, #156]	; 141dc <__assert_fail@plt+0x2ad8>
   1413c:	ldr	r2, [pc, #160]	; 141e4 <__assert_fail@plt+0x2ae0>
   14140:	mov	r4, r3
   14144:	mov	r1, r0
   14148:	mov	r0, #1
   1414c:	bl	1159c <__printf_chk@plt>
   14150:	ldr	r1, [pc, #156]	; 141f4 <__assert_fail@plt+0x2af0>
   14154:	mov	r2, #5
   14158:	mov	r0, #0
   1415c:	bl	113bc <dcgettext@plt>
   14160:	ldr	r3, [pc, #148]	; 141fc <__assert_fail@plt+0x2af8>
   14164:	mov	r1, r0
   14168:	b	140d4 <__assert_fail@plt+0x29d0>
   1416c:	ldr	r7, [pc, #104]	; 141dc <__assert_fail@plt+0x2ad8>
   14170:	mov	r4, r7
   14174:	mov	r2, #5
   14178:	ldr	r1, [pc, #128]	; 14200 <__assert_fail@plt+0x2afc>
   1417c:	mov	r0, #0
   14180:	bl	113bc <dcgettext@plt>
   14184:	ldr	r1, [r6]
   14188:	bl	112f0 <fputs_unlocked@plt>
   1418c:	b	1408c <__assert_fail@plt+0x2988>
   14190:	andeq	pc, r2, r0, lsr r3	; <UNPREDICTABLE>
   14194:	andeq	sp, r1, ip, lsl #8
   14198:	andeq	pc, r2, r0, asr #7
   1419c:	andeq	sp, r1, r4, lsr r4
   141a0:	andeq	pc, r2, r4, lsr r3	; <UNPREDICTABLE>
   141a4:	andeq	sp, r1, r4, lsr #4
   141a8:	andeq	sp, r1, r8, asr r4
   141ac:			; <UNDEFINED> instruction: 0x0001d4bc
   141b0:	andeq	sp, r1, r8, lsl #10
   141b4:	andeq	sp, r1, r4, lsr #13
   141b8:	andeq	sp, r1, r4, lsr #15
   141bc:			; <UNDEFINED> instruction: 0x0001d8b0
   141c0:	andeq	sp, r1, r4, lsr r9
   141c4:	andeq	sp, r1, r4, lsl sl
   141c8:	andeq	sp, r1, r4, asr #20
   141cc:	andeq	sp, r1, ip, ror sl
   141d0:	andeq	sp, r1, ip, asr fp
   141d4:	andeq	sp, r1, r0, ror #22
   141d8:	andeq	sp, r1, r4, lsr ip
   141dc:	andeq	sp, r1, r8, lsl #8
   141e0:	andeq	sp, r1, r0, lsl sp
   141e4:	andeq	sp, r1, r8, lsr #26
   141e8:	andeq	sp, r1, r0, asr sp
   141ec:	andeq	sp, r1, r0, ror #26
   141f0:	andeq	sp, r1, ip, lsr #27
   141f4:	andeq	sp, r1, r8, asr #27
   141f8:	andeq	lr, r1, r4, ror #6
   141fc:	andeq	lr, r1, ip, ror r0
   14200:	andeq	sp, r1, r4, ror #26
   14204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14208:	sub	sp, sp, #12
   1420c:	bl	1a984 <__assert_fail@plt+0x9280>
   14210:	ldr	sl, [pc, #320]	; 14358 <__assert_fail@plt+0x2c54>
   14214:	ldr	r9, [pc, #320]	; 1435c <__assert_fail@plt+0x2c58>
   14218:	mov	r7, #0
   1421c:	mov	r4, r0
   14220:	str	r0, [sp, #4]
   14224:	mov	r1, #44	; 0x2c
   14228:	mov	r0, r4
   1422c:	bl	11548 <strchr@plt>
   14230:	ldr	r8, [pc, #296]	; 14360 <__assert_fail@plt+0x2c5c>
   14234:	mov	r6, #0
   14238:	cmp	r0, #0
   1423c:	addne	fp, r0, #1
   14240:	moveq	fp, r7
   14244:	strbne	r7, [r0]
   14248:	mov	r1, r4
   1424c:	ldr	r0, [r8, #4]
   14250:	bl	11320 <strcmp@plt>
   14254:	subs	r5, r0, #0
   14258:	beq	142a4 <__assert_fail@plt+0x2ba0>
   1425c:	add	r6, r6, #1
   14260:	cmp	r6, #12
   14264:	add	r8, r8, #28
   14268:	bne	14248 <__assert_fail@plt+0x2b44>
   1426c:	mov	r2, #5
   14270:	ldr	r1, [pc, #236]	; 14364 <__assert_fail@plt+0x2c60>
   14274:	mov	r0, #0
   14278:	bl	113bc <dcgettext@plt>
   1427c:	mov	r5, r0
   14280:	mov	r0, r4
   14284:	bl	19d3c <__assert_fail@plt+0x8638>
   14288:	mov	r2, r5
   1428c:	mov	r3, r0
   14290:	mov	r1, #0
   14294:	mov	r0, r1
   14298:	bl	11494 <error@plt>
   1429c:	mov	r0, #1
   142a0:	bl	13e34 <__assert_fail@plt+0x2730>
   142a4:	rsb	r4, r6, r6, lsl #3
   142a8:	add	r4, sl, r4, lsl #2
   142ac:	ldrb	r3, [r4, #28]
   142b0:	cmp	r3, #0
   142b4:	bne	14334 <__assert_fail@plt+0x2c30>
   142b8:	mov	r3, #1
   142bc:	lsl	r3, r3, r6
   142c0:	tst	r3, r9
   142c4:	bne	14300 <__assert_fail@plt+0x2bfc>
   142c8:	tst	r3, #16
   142cc:	bne	14310 <__assert_fail@plt+0x2c0c>
   142d0:	tst	r3, #4
   142d4:	beq	14320 <__assert_fail@plt+0x2c1c>
   142d8:	mov	r0, r6
   142dc:	ldr	r1, [pc, #132]	; 14368 <__assert_fail@plt+0x2c64>
   142e0:	bl	13198 <__assert_fail@plt+0x1a94>
   142e4:	cmp	fp, #0
   142e8:	mov	r4, fp
   142ec:	bne	14224 <__assert_fail@plt+0x2b20>
   142f0:	ldr	r0, [sp, #4]
   142f4:	add	sp, sp, #12
   142f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142fc:	b	14fa4 <__assert_fail@plt+0x38a0>
   14300:	mov	r0, r6
   14304:	mov	r1, r7
   14308:	bl	13198 <__assert_fail@plt+0x1a94>
   1430c:	b	142e4 <__assert_fail@plt+0x2be0>
   14310:	mov	r0, r6
   14314:	ldr	r1, [pc, #80]	; 1436c <__assert_fail@plt+0x2c68>
   14318:	bl	13198 <__assert_fail@plt+0x1a94>
   1431c:	b	142e4 <__assert_fail@plt+0x2be0>
   14320:	ldr	r3, [pc, #72]	; 14370 <__assert_fail@plt+0x2c6c>
   14324:	mov	r2, #496	; 0x1f0
   14328:	ldr	r1, [pc, #68]	; 14374 <__assert_fail@plt+0x2c70>
   1432c:	ldr	r0, [pc, #68]	; 14378 <__assert_fail@plt+0x2c74>
   14330:	bl	11704 <__assert_fail@plt>
   14334:	mov	r2, #5
   14338:	ldr	r1, [pc, #60]	; 1437c <__assert_fail@plt+0x2c78>
   1433c:	bl	113bc <dcgettext@plt>
   14340:	mov	r6, r0
   14344:	ldr	r0, [r4, #8]
   14348:	bl	19d3c <__assert_fail@plt+0x8638>
   1434c:	mov	r2, r6
   14350:	mov	r3, r0
   14354:	b	14290 <__assert_fail@plt+0x2b8c>
   14358:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   1435c:	andeq	r0, r0, fp, ror #31
   14360:	andeq	pc, r2, r0, lsl #3
   14364:	andeq	sp, r1, r0, asr lr
   14368:	andeq	sp, r1, ip, lsr #28
   1436c:	andeq	sp, r1, r4, lsr lr
   14370:	andeq	sp, r1, ip, asr r2
   14374:	andeq	sp, r1, r0, lsr #7
   14378:	andeq	sp, r1, ip, lsr lr
   1437c:	strdeq	sp, [r1], -ip
   14380:	push	{r4, r5, r6, r7, r8, fp, lr}
   14384:	add	fp, sp, #24
   14388:	mov	r7, r0
   1438c:	sub	sp, sp, #220	; 0xdc
   14390:	sub	r0, fp, #244	; 0xf4
   14394:	mov	r4, r1
   14398:	bl	19d54 <__assert_fail@plt+0x8650>
   1439c:	subs	r6, r0, #0
   143a0:	bne	145d0 <__assert_fail@plt+0x2ecc>
   143a4:	ldr	r3, [r4, #16]
   143a8:	and	r3, r3, #61440	; 0xf000
   143ac:	cmp	r3, #16384	; 0x4000
   143b0:	beq	1450c <__assert_fail@plt+0x2e08>
   143b4:	mov	r0, r7
   143b8:	bl	14e10 <__assert_fail@plt+0x370c>
   143bc:	mov	r4, r0
   143c0:	bl	1153c <strlen@plt>
   143c4:	mov	r1, r4
   143c8:	add	r3, r0, #15
   143cc:	bic	r3, r3, #7
   143d0:	sub	sp, sp, r3
   143d4:	add	r2, r0, #1
   143d8:	mov	r0, sp
   143dc:	bl	11374 <memcpy@plt>
   143e0:	mov	r7, r0
   143e4:	mov	r0, r4
   143e8:	bl	14fa4 <__assert_fail@plt+0x38a0>
   143ec:	mov	r0, r7
   143f0:	bl	11404 <chdir@plt>
   143f4:	cmp	r0, #0
   143f8:	blt	14530 <__assert_fail@plt+0x2e2c>
   143fc:	sub	r5, fp, #236	; 0xec
   14400:	mov	r2, r5
   14404:	ldr	r1, [pc, #536]	; 14624 <__assert_fail@plt+0x2f20>
   14408:	mov	r0, #3
   1440c:	bl	116bc <__xstat64@plt>
   14410:	cmp	r0, #0
   14414:	blt	14588 <__assert_fail@plt+0x2e84>
   14418:	ldr	r4, [pc, #520]	; 14628 <__assert_fail@plt+0x2f24>
   1441c:	mov	r6, #3
   14420:	mov	r7, #104	; 0x68
   14424:	b	14470 <__assert_fail@plt+0x2d6c>
   14428:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   1442c:	ldrd	r2, [fp, #-236]	; 0xffffff14
   14430:	cmp	r1, r3
   14434:	cmpeq	r0, r2
   14438:	bne	144f8 <__assert_fail@plt+0x2df4>
   1443c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   14440:	ldrd	r2, [fp, #-140]	; 0xffffff74
   14444:	cmp	r1, r3
   14448:	cmpeq	r0, r2
   1444c:	beq	144f8 <__assert_fail@plt+0x2df4>
   14450:	mov	r0, r4
   14454:	bl	11404 <chdir@plt>
   14458:	cmp	r0, #0
   1445c:	blt	14574 <__assert_fail@plt+0x2e70>
   14460:	mov	r2, r7
   14464:	sub	r1, fp, #132	; 0x84
   14468:	mov	r0, r5
   1446c:	bl	11374 <memcpy@plt>
   14470:	sub	r2, fp, #132	; 0x84
   14474:	mov	r1, r4
   14478:	mov	r0, r6
   1447c:	bl	116bc <__xstat64@plt>
   14480:	cmp	r0, #0
   14484:	bge	14428 <__assert_fail@plt+0x2d24>
   14488:	bl	1156c <__errno_location@plt>
   1448c:	ldr	r1, [pc, #408]	; 1462c <__assert_fail@plt+0x2f28>
   14490:	mov	r2, #5
   14494:	mov	r4, r0
   14498:	mov	r0, #0
   1449c:	ldr	r5, [r4]
   144a0:	bl	113bc <dcgettext@plt>
   144a4:	ldr	r1, [pc, #380]	; 14628 <__assert_fail@plt+0x2f24>
   144a8:	mov	r6, r0
   144ac:	mov	r0, #4
   144b0:	bl	19afc <__assert_fail@plt+0x83f8>
   144b4:	mov	r1, r5
   144b8:	mov	r2, r6
   144bc:	mov	r5, #0
   144c0:	mov	r3, r0
   144c4:	mov	r0, #0
   144c8:	bl	11494 <error@plt>
   144cc:	sub	r0, fp, #244	; 0xf4
   144d0:	ldr	r6, [r4]
   144d4:	bl	19da8 <__assert_fail@plt+0x86a4>
   144d8:	cmp	r0, #0
   144dc:	bne	14600 <__assert_fail@plt+0x2efc>
   144e0:	sub	r0, fp, #244	; 0xf4
   144e4:	bl	19dc4 <__assert_fail@plt+0x86c0>
   144e8:	str	r6, [r4]
   144ec:	mov	r0, r5
   144f0:	sub	sp, fp, #24
   144f4:	pop	{r4, r5, r6, r7, r8, fp, pc}
   144f8:	bl	1a9e0 <__assert_fail@plt+0x92dc>
   144fc:	mov	r5, r0
   14500:	bl	1156c <__errno_location@plt>
   14504:	mov	r4, r0
   14508:	b	144cc <__assert_fail@plt+0x2dc8>
   1450c:	sub	r5, fp, #236	; 0xec
   14510:	mov	r1, r4
   14514:	mov	r2, #104	; 0x68
   14518:	mov	r0, r5
   1451c:	bl	11374 <memcpy@plt>
   14520:	mov	r0, r7
   14524:	bl	11404 <chdir@plt>
   14528:	cmp	r0, #0
   1452c:	bge	14418 <__assert_fail@plt+0x2d14>
   14530:	bl	1156c <__errno_location@plt>
   14534:	mov	r2, #5
   14538:	ldr	r1, [pc, #240]	; 14630 <__assert_fail@plt+0x2f2c>
   1453c:	mov	r5, r6
   14540:	ldr	r4, [r0]
   14544:	mov	r0, r6
   14548:	bl	113bc <dcgettext@plt>
   1454c:	mov	r1, r7
   14550:	mov	r8, r0
   14554:	mov	r0, #4
   14558:	bl	19afc <__assert_fail@plt+0x83f8>
   1455c:	mov	r2, r8
   14560:	mov	r1, r4
   14564:	mov	r3, r0
   14568:	mov	r0, r6
   1456c:	bl	11494 <error@plt>
   14570:	b	144ec <__assert_fail@plt+0x2de8>
   14574:	bl	1156c <__errno_location@plt>
   14578:	mov	r2, #5
   1457c:	ldr	r1, [pc, #172]	; 14630 <__assert_fail@plt+0x2f2c>
   14580:	mov	r4, r0
   14584:	b	14498 <__assert_fail@plt+0x2d94>
   14588:	bl	1156c <__errno_location@plt>
   1458c:	mov	r2, #5
   14590:	ldr	r1, [pc, #156]	; 14634 <__assert_fail@plt+0x2f30>
   14594:	mov	r4, r0
   14598:	mov	r0, r6
   1459c:	ldr	r5, [r4]
   145a0:	bl	113bc <dcgettext@plt>
   145a4:	mov	r1, r7
   145a8:	mov	r8, r0
   145ac:	mov	r0, #4
   145b0:	bl	19afc <__assert_fail@plt+0x83f8>
   145b4:	mov	r1, r5
   145b8:	mov	r2, r8
   145bc:	mov	r5, r6
   145c0:	mov	r3, r0
   145c4:	mov	r0, r6
   145c8:	bl	11494 <error@plt>
   145cc:	b	144cc <__assert_fail@plt+0x2dc8>
   145d0:	bl	1156c <__errno_location@plt>
   145d4:	mov	r5, #0
   145d8:	mov	r2, #5
   145dc:	ldr	r1, [pc, #84]	; 14638 <__assert_fail@plt+0x2f34>
   145e0:	ldr	r4, [r0]
   145e4:	mov	r0, r5
   145e8:	bl	113bc <dcgettext@plt>
   145ec:	mov	r1, r4
   145f0:	mov	r2, r0
   145f4:	mov	r0, r5
   145f8:	bl	11494 <error@plt>
   145fc:	b	144ec <__assert_fail@plt+0x2de8>
   14600:	mov	r2, #5
   14604:	ldr	r1, [pc, #48]	; 1463c <__assert_fail@plt+0x2f38>
   14608:	mov	r0, #0
   1460c:	ldr	r4, [r4]
   14610:	bl	113bc <dcgettext@plt>
   14614:	mov	r1, r4
   14618:	mov	r2, r0
   1461c:	mov	r0, #1
   14620:	bl	11494 <error@plt>
   14624:	andeq	lr, r1, r0, ror #4
   14628:	andeq	lr, r1, ip, lsl #5
   1462c:	muleq	r1, r0, r2
   14630:	andeq	lr, r1, r0, asr #4
   14634:	andeq	lr, r1, r4, ror #4
   14638:	andeq	lr, r1, r0, lsr #4
   1463c:	andeq	lr, r1, r0, lsr #5
   14640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14644:	and	r9, r1, #3
   14648:	sub	r3, r9, #1
   1464c:	sub	sp, sp, #3232	; 0xca0
   14650:	tst	r3, r9
   14654:	sub	sp, sp, #12
   14658:	bne	14838 <__assert_fail@plt+0x3134>
   1465c:	cmp	r0, #0
   14660:	mov	r8, r0
   14664:	beq	14838 <__assert_fail@plt+0x3134>
   14668:	ldrb	r6, [r0]
   1466c:	cmp	r6, #0
   14670:	beq	14874 <__assert_fail@plt+0x3170>
   14674:	add	fp, sp, #2208	; 0x8a0
   14678:	mov	r5, r1
   1467c:	add	r3, sp, #1184	; 0x4a0
   14680:	mov	r1, #1024	; 0x400
   14684:	add	fp, fp, #8
   14688:	add	sl, sp, #152	; 0x98
   1468c:	cmp	r6, #47	; 0x2f
   14690:	str	r3, [sp, #1176]	; 0x498
   14694:	str	r1, [sp, #1180]	; 0x49c
   14698:	str	r1, [sp, #2212]	; 0x8a4
   1469c:	str	r1, [sp, #148]	; 0x94
   146a0:	str	fp, [sp, #2208]	; 0x8a0
   146a4:	str	sl, [sp, #144]	; 0x90
   146a8:	beq	14754 <__assert_fail@plt+0x3050>
   146ac:	mov	r4, sl
   146b0:	sub	r6, sl, #8
   146b4:	mov	r0, r4
   146b8:	bl	11524 <getcwd@plt>
   146bc:	cmp	r0, #0
   146c0:	bne	14a20 <__assert_fail@plt+0x331c>
   146c4:	bl	1156c <__errno_location@plt>
   146c8:	ldr	r3, [r0]
   146cc:	cmp	r3, #12
   146d0:	beq	14834 <__assert_fail@plt+0x3130>
   146d4:	cmp	r3, #34	; 0x22
   146d8:	beq	14738 <__assert_fail@plt+0x3034>
   146dc:	mov	r5, r4
   146e0:	mov	r6, #1
   146e4:	ldr	r0, [sp, #1176]	; 0x498
   146e8:	add	r3, sp, #1184	; 0x4a0
   146ec:	cmp	r0, r3
   146f0:	beq	146f8 <__assert_fail@plt+0x2ff4>
   146f4:	bl	14fa4 <__assert_fail@plt+0x38a0>
   146f8:	ldr	r0, [sp, #2208]	; 0x8a0
   146fc:	cmp	r0, fp
   14700:	beq	14708 <__assert_fail@plt+0x3004>
   14704:	bl	14fa4 <__assert_fail@plt+0x38a0>
   14708:	cmp	r6, #0
   1470c:	beq	14858 <__assert_fail@plt+0x3154>
   14710:	ldr	r0, [sp, #144]	; 0x90
   14714:	cmp	r0, sl
   14718:	moveq	r6, #0
   1471c:	beq	14728 <__assert_fail@plt+0x3024>
   14720:	bl	14fa4 <__assert_fail@plt+0x38a0>
   14724:	mov	r6, #0
   14728:	mov	r0, r6
   1472c:	add	sp, sp, #3232	; 0xca0
   14730:	add	sp, sp, #12
   14734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14738:	mov	r0, r6
   1473c:	bl	19e38 <__assert_fail@plt+0x8734>
   14740:	cmp	r0, #0
   14744:	beq	14834 <__assert_fail@plt+0x3130>
   14748:	ldr	r4, [sp, #144]	; 0x90
   1474c:	ldr	r1, [sp, #148]	; 0x94
   14750:	b	146b4 <__assert_fail@plt+0x2fb0>
   14754:	mov	r4, sl
   14758:	add	r0, sl, #1
   1475c:	strb	r6, [sp, #152]	; 0x98
   14760:	mov	r3, #0
   14764:	and	r2, r5, #4
   14768:	str	r3, [sp, #24]
   1476c:	str	r2, [sp, #8]
   14770:	str	r3, [sp, #12]
   14774:	str	r3, [sp, #16]
   14778:	str	r9, [sp, #20]
   1477c:	cmp	r6, #0
   14780:	beq	14b84 <__assert_fail@plt+0x3480>
   14784:	cmp	r6, #47	; 0x2f
   14788:	bne	147a0 <__assert_fail@plt+0x309c>
   1478c:	ldrb	r6, [r8, #1]!
   14790:	cmp	r6, #47	; 0x2f
   14794:	beq	1478c <__assert_fail@plt+0x3088>
   14798:	cmp	r6, #0
   1479c:	beq	14b84 <__assert_fail@plt+0x3480>
   147a0:	mov	r5, r8
   147a4:	ldrb	r3, [r5, #1]!
   147a8:	cmp	r3, #0
   147ac:	cmpne	r3, #47	; 0x2f
   147b0:	bne	147a4 <__assert_fail@plt+0x30a0>
   147b4:	subs	r7, r5, r8
   147b8:	beq	14b84 <__assert_fail@plt+0x3480>
   147bc:	cmp	r7, #1
   147c0:	beq	14944 <__assert_fail@plt+0x3240>
   147c4:	cmp	r7, #2
   147c8:	cmpeq	r6, #46	; 0x2e
   147cc:	beq	14884 <__assert_fail@plt+0x3180>
   147d0:	ldrb	r3, [r0, #-1]
   147d4:	add	r6, r7, #2
   147d8:	cmp	r3, #47	; 0x2f
   147dc:	movne	r3, #47	; 0x2f
   147e0:	strbne	r3, [r0]
   147e4:	ldr	r3, [sp, #148]	; 0x94
   147e8:	addne	r0, r0, #1
   147ec:	add	r3, r4, r3
   147f0:	sub	r3, r3, r0
   147f4:	cmp	r3, r6
   147f8:	bcs	148dc <__assert_fail@plt+0x31d8>
   147fc:	mov	r9, r0
   14800:	b	14820 <__assert_fail@plt+0x311c>
   14804:	ldr	r3, [sp, #148]	; 0x94
   14808:	ldr	r4, [sp, #144]	; 0x90
   1480c:	sub	r3, r3, r9
   14810:	cmp	r3, r6
   14814:	add	r9, r4, r9
   14818:	mov	r0, r9
   1481c:	bcs	148dc <__assert_fail@plt+0x31d8>
   14820:	add	r0, sp, #144	; 0x90
   14824:	bl	19ea4 <__assert_fail@plt+0x87a0>
   14828:	sub	r9, r9, r4
   1482c:	cmp	r0, #0
   14830:	bne	14804 <__assert_fail@plt+0x3100>
   14834:	bl	1a9a0 <__assert_fail@plt+0x929c>
   14838:	bl	1156c <__errno_location@plt>
   1483c:	mov	r6, #0
   14840:	mov	r3, #22
   14844:	str	r3, [r0]
   14848:	mov	r0, r6
   1484c:	add	sp, sp, #3232	; 0xca0
   14850:	add	sp, sp, #12
   14854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14858:	strb	r6, [r4], #1
   1485c:	sub	r0, sl, #8
   14860:	sub	r1, r4, r5
   14864:	bl	19de8 <__assert_fail@plt+0x86e4>
   14868:	subs	r6, r0, #0
   1486c:	bne	14728 <__assert_fail@plt+0x3024>
   14870:	b	14834 <__assert_fail@plt+0x3130>
   14874:	bl	1156c <__errno_location@plt>
   14878:	mov	r3, #2
   1487c:	str	r3, [r0]
   14880:	b	14728 <__assert_fail@plt+0x3024>
   14884:	ldrb	r3, [r8, #1]
   14888:	cmp	r3, #46	; 0x2e
   1488c:	bne	147d0 <__assert_fail@plt+0x30cc>
   14890:	add	r3, r4, #1
   14894:	cmp	r0, r3
   14898:	bls	148d0 <__assert_fail@plt+0x31cc>
   1489c:	sub	r3, r0, #1
   148a0:	cmp	r4, r3
   148a4:	bcs	14ce4 <__assert_fail@plt+0x35e0>
   148a8:	ldrb	r2, [r0, #-2]
   148ac:	cmp	r2, #47	; 0x2f
   148b0:	beq	14ce4 <__assert_fail@plt+0x35e0>
   148b4:	sub	r3, r0, #2
   148b8:	cmp	r3, r4
   148bc:	mov	r0, r3
   148c0:	beq	148d0 <__assert_fail@plt+0x31cc>
   148c4:	ldrb	r2, [r3, #-1]!
   148c8:	cmp	r2, #47	; 0x2f
   148cc:	bne	148b8 <__assert_fail@plt+0x31b4>
   148d0:	ldrb	r6, [r5]
   148d4:	mov	r8, r5
   148d8:	b	1477c <__assert_fail@plt+0x3078>
   148dc:	mov	r2, r7
   148e0:	mov	r1, r8
   148e4:	bl	11500 <mempcpy@plt>
   148e8:	ldr	r3, [sp, #8]
   148ec:	cmp	r3, #0
   148f0:	mov	r3, #0
   148f4:	str	r0, [sp, #28]
   148f8:	strb	r3, [r0]
   148fc:	bne	14950 <__assert_fail@plt+0x324c>
   14900:	sub	r3, fp, #8
   14904:	mov	r9, r3
   14908:	str	r5, [sp, #32]
   1490c:	ldr	r6, [sp, #2212]	; 0x8a4
   14910:	ldr	r5, [sp, #2208]	; 0x8a0
   14914:	sub	r6, r6, #1
   14918:	mov	r2, r6
   1491c:	mov	r1, r5
   14920:	mov	r0, r4
   14924:	bl	11428 <readlink@plt>
   14928:	cmp	r6, r0
   1492c:	bgt	14a34 <__assert_fail@plt+0x3330>
   14930:	mov	r0, r9
   14934:	bl	19e38 <__assert_fail@plt+0x8734>
   14938:	cmp	r0, #0
   1493c:	bne	1490c <__assert_fail@plt+0x3208>
   14940:	b	14834 <__assert_fail@plt+0x3130>
   14944:	cmp	r6, #46	; 0x2e
   14948:	bne	147d0 <__assert_fail@plt+0x30cc>
   1494c:	b	148d0 <__assert_fail@plt+0x31cc>
   14950:	ldr	r3, [sp, #20]
   14954:	cmp	r3, #2
   14958:	beq	14a18 <__assert_fail@plt+0x3314>
   1495c:	ldrb	r2, [r5]
   14960:	mov	r3, r5
   14964:	mov	r1, r2
   14968:	cmp	r1, #47	; 0x2f
   1496c:	beq	14978 <__assert_fail@plt+0x3274>
   14970:	b	149c0 <__assert_fail@plt+0x32bc>
   14974:	mov	r3, r0
   14978:	ldrb	r1, [r3, #1]
   1497c:	add	r0, r3, #1
   14980:	cmp	r1, #47	; 0x2f
   14984:	beq	14974 <__assert_fail@plt+0x3270>
   14988:	cmp	r1, #0
   1498c:	add	r3, r3, #2
   14990:	beq	14c58 <__assert_fail@plt+0x3554>
   14994:	cmp	r1, #46	; 0x2e
   14998:	bne	149c0 <__assert_fail@plt+0x32bc>
   1499c:	ldrb	r1, [r0, #1]
   149a0:	cmp	r1, #0
   149a4:	beq	14c58 <__assert_fail@plt+0x3554>
   149a8:	cmp	r1, #46	; 0x2e
   149ac:	bne	14968 <__assert_fail@plt+0x3264>
   149b0:	ldrb	r3, [r0, #2]
   149b4:	cmp	r3, #47	; 0x2f
   149b8:	cmpne	r3, #0
   149bc:	beq	14c58 <__assert_fail@plt+0x3554>
   149c0:	ldr	r3, [sp, #8]
   149c4:	cmp	r3, #0
   149c8:	bne	14c98 <__assert_fail@plt+0x3594>
   149cc:	bl	1156c <__errno_location@plt>
   149d0:	ldr	r6, [r0]
   149d4:	subs	r6, r6, #22
   149d8:	movne	r6, #1
   149dc:	cmp	r6, #0
   149e0:	beq	14a18 <__assert_fail@plt+0x3314>
   149e4:	ldr	r3, [sp, #20]
   149e8:	cmp	r3, #1
   149ec:	bne	14cec <__assert_fail@plt+0x35e8>
   149f0:	bl	1156c <__errno_location@plt>
   149f4:	ldr	r3, [r0]
   149f8:	cmp	r3, #2
   149fc:	bne	14cec <__assert_fail@plt+0x35e8>
   14a00:	ldr	r1, [pc, #752]	; 14cf8 <__assert_fail@plt+0x35f4>
   14a04:	mov	r0, r5
   14a08:	bl	116f8 <strspn@plt>
   14a0c:	ldrb	r3, [r5, r0]
   14a10:	cmp	r3, #0
   14a14:	bne	14cec <__assert_fail@plt+0x35e8>
   14a18:	ldr	r0, [sp, #28]
   14a1c:	b	148d0 <__assert_fail@plt+0x31cc>
   14a20:	mov	r1, #0
   14a24:	mov	r0, r4
   14a28:	bl	113f8 <rawmemchr@plt>
   14a2c:	ldrb	r6, [r8]
   14a30:	b	14760 <__assert_fail@plt+0x305c>
   14a34:	cmp	r0, #0
   14a38:	mov	r9, r5
   14a3c:	mov	r6, r0
   14a40:	ldr	r5, [sp, #32]
   14a44:	blt	14950 <__assert_fail@plt+0x324c>
   14a48:	ldr	r3, [sp, #16]
   14a4c:	cmp	r3, #19
   14a50:	addle	r3, r3, #1
   14a54:	strle	r3, [sp, #16]
   14a58:	ble	14b1c <__assert_fail@plt+0x3418>
   14a5c:	ldrb	r3, [r8]
   14a60:	cmp	r3, #0
   14a64:	beq	14b1c <__assert_fail@plt+0x3418>
   14a68:	ldr	r2, [sp, #28]
   14a6c:	rsb	r7, r7, #0
   14a70:	mov	r3, #0
   14a74:	strb	r3, [r2, r7]
   14a78:	ldrb	r1, [r4]
   14a7c:	add	r3, sp, #40	; 0x28
   14a80:	mov	r2, r3
   14a84:	cmp	r1, #0
   14a88:	ldr	r3, [pc, #620]	; 14cfc <__assert_fail@plt+0x35f8>
   14a8c:	movne	r3, r4
   14a90:	mov	r1, r3
   14a94:	mov	r0, #3
   14a98:	bl	116bc <__xstat64@plt>
   14a9c:	cmp	r0, #0
   14aa0:	bne	14aec <__assert_fail@plt+0x33e8>
   14aa4:	ldrb	r3, [r8]
   14aa8:	ldr	r1, [sp, #24]
   14aac:	ldr	r2, [sp, #28]
   14ab0:	cmp	r1, #0
   14ab4:	strb	r3, [r2, r7]
   14ab8:	beq	14ca8 <__assert_fail@plt+0x35a4>
   14abc:	add	r2, sp, #40	; 0x28
   14ac0:	mov	r1, r8
   14ac4:	ldr	r0, [sp, #24]
   14ac8:	bl	14f5c <__assert_fail@plt+0x3858>
   14acc:	cmp	r0, #0
   14ad0:	beq	14b0c <__assert_fail@plt+0x3408>
   14ad4:	ldr	r3, [sp, #20]
   14ad8:	cmp	r3, #2
   14adc:	beq	14a18 <__assert_fail@plt+0x3314>
   14ae0:	bl	1156c <__errno_location@plt>
   14ae4:	mov	r3, #40	; 0x28
   14ae8:	str	r3, [r0]
   14aec:	mov	r5, r4
   14af0:	ldr	r4, [sp, #28]
   14af4:	mov	r6, #1
   14af8:	ldr	r0, [sp, #24]
   14afc:	cmp	r0, #0
   14b00:	beq	146e4 <__assert_fail@plt+0x2fe0>
   14b04:	bl	15bec <__assert_fail@plt+0x44e8>
   14b08:	b	146e4 <__assert_fail@plt+0x2fe0>
   14b0c:	add	r2, sp, #40	; 0x28
   14b10:	mov	r1, r8
   14b14:	ldr	r0, [sp, #24]
   14b18:	bl	14ef4 <__assert_fail@plt+0x37f0>
   14b1c:	ldr	r2, [sp, #12]
   14b20:	mov	r3, #0
   14b24:	cmp	r2, r3
   14b28:	strb	r3, [r9, r6]
   14b2c:	ldr	r8, [sp, #1176]	; 0x498
   14b30:	ldreq	r3, [sp, #12]
   14b34:	subne	r3, r5, r8
   14b38:	mov	r0, r5
   14b3c:	str	r3, [sp, #36]	; 0x24
   14b40:	bl	1153c <strlen@plt>
   14b44:	adds	r7, r6, r0
   14b48:	str	r0, [sp, #32]
   14b4c:	bcs	14834 <__assert_fail@plt+0x3130>
   14b50:	ldr	r3, [sp, #1180]	; 0x49c
   14b54:	cmp	r3, r7
   14b58:	bls	14b6c <__assert_fail@plt+0x3468>
   14b5c:	b	14bb0 <__assert_fail@plt+0x34ac>
   14b60:	ldr	r3, [sp, #1180]	; 0x49c
   14b64:	cmp	r7, r3
   14b68:	bcc	14bac <__assert_fail@plt+0x34a8>
   14b6c:	add	r0, sp, #1168	; 0x490
   14b70:	add	r0, r0, #8
   14b74:	bl	19ea4 <__assert_fail@plt+0x87a0>
   14b78:	cmp	r0, #0
   14b7c:	bne	14b60 <__assert_fail@plt+0x345c>
   14b80:	b	14834 <__assert_fail@plt+0x3130>
   14b84:	add	r3, r4, #1
   14b88:	cmp	r0, r3
   14b8c:	bls	14c48 <__assert_fail@plt+0x3544>
   14b90:	ldrb	r3, [r0, #-1]
   14b94:	mov	r5, r4
   14b98:	mov	r6, #0
   14b9c:	cmp	r3, #47	; 0x2f
   14ba0:	subeq	r4, r0, #1
   14ba4:	movne	r4, r0
   14ba8:	b	14af8 <__assert_fail@plt+0x33f4>
   14bac:	ldr	r8, [sp, #1176]	; 0x498
   14bb0:	ldr	r3, [sp, #12]
   14bb4:	add	r0, r8, r6
   14bb8:	cmp	r3, #0
   14bbc:	ldrne	r3, [sp, #36]	; 0x24
   14bc0:	addne	r5, r8, r3
   14bc4:	ldr	r3, [sp, #32]
   14bc8:	mov	r1, r5
   14bcc:	add	r2, r3, #1
   14bd0:	bl	11344 <memmove@plt>
   14bd4:	mov	r2, r6
   14bd8:	mov	r1, r9
   14bdc:	mov	r0, r8
   14be0:	bl	11374 <memcpy@plt>
   14be4:	ldrb	r3, [r9]
   14be8:	cmp	r3, #47	; 0x2f
   14bec:	mov	r5, r0
   14bf0:	beq	14cd0 <__assert_fail@plt+0x35cc>
   14bf4:	ldr	r2, [sp, #28]
   14bf8:	add	r3, r4, #1
   14bfc:	cmp	r2, r3
   14c00:	bls	14c88 <__assert_fail@plt+0x3584>
   14c04:	sub	r0, r2, #1
   14c08:	cmp	r0, r4
   14c0c:	bls	14c3c <__assert_fail@plt+0x3538>
   14c10:	ldrb	r3, [r2, #-2]
   14c14:	cmp	r3, #47	; 0x2f
   14c18:	beq	14c3c <__assert_fail@plt+0x3538>
   14c1c:	sub	r3, r2, #2
   14c20:	cmp	r4, r3
   14c24:	mov	r0, r3
   14c28:	beq	14c3c <__assert_fail@plt+0x3538>
   14c2c:	ldrb	r2, [r3, #-1]
   14c30:	sub	r3, r3, #1
   14c34:	cmp	r2, #47	; 0x2f
   14c38:	bne	14c20 <__assert_fail@plt+0x351c>
   14c3c:	mov	r3, #1
   14c40:	str	r3, [sp, #12]
   14c44:	b	148d0 <__assert_fail@plt+0x31cc>
   14c48:	mov	r5, r4
   14c4c:	mov	r6, #0
   14c50:	mov	r4, r0
   14c54:	b	14af8 <__assert_fail@plt+0x33f4>
   14c58:	ldr	r3, [pc, #152]	; 14cf8 <__assert_fail@plt+0x35f4>
   14c5c:	ldr	r0, [sp, #28]
   14c60:	mov	r2, #0
   14c64:	ldrh	r1, [r3]
   14c68:	mov	r3, #512	; 0x200
   14c6c:	strh	r1, [r0]
   14c70:	mov	r1, r4
   14c74:	mvn	r0, #99	; 0x63
   14c78:	bl	1135c <faccessat@plt>
   14c7c:	adds	r6, r0, #0
   14c80:	movne	r6, #1
   14c84:	b	149dc <__assert_fail@plt+0x32d8>
   14c88:	mov	r3, #1
   14c8c:	ldr	r0, [sp, #28]
   14c90:	str	r3, [sp, #12]
   14c94:	b	148d0 <__assert_fail@plt+0x31cc>
   14c98:	cmp	r2, #0
   14c9c:	bne	14a18 <__assert_fail@plt+0x3314>
   14ca0:	mov	r3, #512	; 0x200
   14ca4:	b	14c70 <__assert_fail@plt+0x356c>
   14ca8:	ldr	r3, [pc, #80]	; 14d00 <__assert_fail@plt+0x35fc>
   14cac:	ldr	r2, [pc, #80]	; 14d04 <__assert_fail@plt+0x3600>
   14cb0:	str	r3, [sp]
   14cb4:	mov	r0, #7
   14cb8:	ldr	r3, [pc, #72]	; 14d08 <__assert_fail@plt+0x3604>
   14cbc:	bl	159f0 <__assert_fail@plt+0x42ec>
   14cc0:	subs	r3, r0, #0
   14cc4:	str	r3, [sp, #24]
   14cc8:	bne	14abc <__assert_fail@plt+0x33b8>
   14ccc:	b	14834 <__assert_fail@plt+0x3130>
   14cd0:	strb	r3, [r4]
   14cd4:	mov	r3, #1
   14cd8:	add	r0, r4, #1
   14cdc:	str	r3, [sp, #12]
   14ce0:	b	148d0 <__assert_fail@plt+0x31cc>
   14ce4:	mov	r0, r3
   14ce8:	b	148d0 <__assert_fail@plt+0x31cc>
   14cec:	mov	r5, r4
   14cf0:	ldr	r4, [sp, #28]
   14cf4:	b	14af8 <__assert_fail@plt+0x33f4>
   14cf8:	andeq	lr, r1, r0, ror #5
   14cfc:	andeq	lr, r1, r0, ror #4
   14d00:	andeq	r6, r1, ip, lsr #3
   14d04:	andeq	r6, r1, r8, lsr #2
   14d08:	andeq	r6, r1, r0, ror #2
   14d0c:	ldr	r3, [pc, #4]	; 14d18 <__assert_fail@plt+0x3614>
   14d10:	str	r0, [r3]
   14d14:	bx	lr
   14d18:			; <UNDEFINED> instruction: 0x0002f3b8
   14d1c:	ldr	r3, [pc, #4]	; 14d28 <__assert_fail@plt+0x3624>
   14d20:	strb	r0, [r3, #4]
   14d24:	bx	lr
   14d28:			; <UNDEFINED> instruction: 0x0002f3b8
   14d2c:	ldr	r3, [pc, #192]	; 14df4 <__assert_fail@plt+0x36f0>
   14d30:	push	{r4, r5, r6, lr}
   14d34:	sub	sp, sp, #8
   14d38:	ldr	r0, [r3]
   14d3c:	bl	1c1a4 <__assert_fail@plt+0xaaa0>
   14d40:	cmp	r0, #0
   14d44:	beq	14d68 <__assert_fail@plt+0x3664>
   14d48:	ldr	r4, [pc, #168]	; 14df8 <__assert_fail@plt+0x36f4>
   14d4c:	ldrb	r3, [r4, #4]
   14d50:	cmp	r3, #0
   14d54:	beq	14d84 <__assert_fail@plt+0x3680>
   14d58:	bl	1156c <__errno_location@plt>
   14d5c:	ldr	r3, [r0]
   14d60:	cmp	r3, #32
   14d64:	bne	14d84 <__assert_fail@plt+0x3680>
   14d68:	ldr	r3, [pc, #140]	; 14dfc <__assert_fail@plt+0x36f8>
   14d6c:	ldr	r0, [r3]
   14d70:	bl	1c1a4 <__assert_fail@plt+0xaaa0>
   14d74:	cmp	r0, #0
   14d78:	bne	14dcc <__assert_fail@plt+0x36c8>
   14d7c:	add	sp, sp, #8
   14d80:	pop	{r4, r5, r6, pc}
   14d84:	mov	r2, #5
   14d88:	ldr	r1, [pc, #112]	; 14e00 <__assert_fail@plt+0x36fc>
   14d8c:	mov	r0, #0
   14d90:	bl	113bc <dcgettext@plt>
   14d94:	ldr	r4, [r4]
   14d98:	cmp	r4, #0
   14d9c:	mov	r5, r0
   14da0:	beq	14dd8 <__assert_fail@plt+0x36d4>
   14da4:	bl	1156c <__errno_location@plt>
   14da8:	ldr	r6, [r0]
   14dac:	mov	r0, r4
   14db0:	bl	19ba4 <__assert_fail@plt+0x84a0>
   14db4:	mov	r1, r6
   14db8:	str	r5, [sp]
   14dbc:	ldr	r2, [pc, #64]	; 14e04 <__assert_fail@plt+0x3700>
   14dc0:	mov	r3, r0
   14dc4:	mov	r0, #0
   14dc8:	bl	11494 <error@plt>
   14dcc:	ldr	r3, [pc, #52]	; 14e08 <__assert_fail@plt+0x3704>
   14dd0:	ldr	r0, [r3]
   14dd4:	bl	11368 <_exit@plt>
   14dd8:	bl	1156c <__errno_location@plt>
   14ddc:	mov	r3, r5
   14de0:	ldr	r2, [pc, #36]	; 14e0c <__assert_fail@plt+0x3708>
   14de4:	ldr	r1, [r0]
   14de8:	mov	r0, r4
   14dec:	bl	11494 <error@plt>
   14df0:	b	14dcc <__assert_fail@plt+0x36c8>
   14df4:	andeq	pc, r2, r4, lsr r3	; <UNPREDICTABLE>
   14df8:			; <UNDEFINED> instruction: 0x0002f3b8
   14dfc:	andeq	pc, r2, r0, lsr r3	; <UNPREDICTABLE>
   14e00:	andeq	lr, r1, r4, ror #5
   14e04:	strdeq	lr, [r1], -r0
   14e08:	ldrdeq	pc, [r2], -r4
   14e0c:	strdeq	lr, [r1], -r4
   14e10:	push	{r4, lr}
   14e14:	bl	14e9c <__assert_fail@plt+0x3798>
   14e18:	cmp	r0, #0
   14e1c:	popne	{r4, pc}
   14e20:	bl	1a9a0 <__assert_fail@plt+0x929c>
   14e24:	push	{r4, r5, r6, lr}
   14e28:	mov	r5, r0
   14e2c:	ldrb	r4, [r0]
   14e30:	bl	1bde8 <__assert_fail@plt+0xa6e4>
   14e34:	sub	r4, r4, #47	; 0x2f
   14e38:	clz	r4, r4
   14e3c:	lsr	r4, r4, #5
   14e40:	sub	r0, r0, r5
   14e44:	cmp	r0, r4
   14e48:	bls	14e94 <__assert_fail@plt+0x3790>
   14e4c:	sub	r3, r0, #1
   14e50:	add	r2, r5, r3
   14e54:	ldrb	r1, [r5, r3]
   14e58:	cmp	r1, #47	; 0x2f
   14e5c:	beq	14e78 <__assert_fail@plt+0x3774>
   14e60:	b	14e94 <__assert_fail@plt+0x3790>
   14e64:	ldrb	r1, [r2, #-1]!
   14e68:	sub	r0, r3, #1
   14e6c:	cmp	r1, #47	; 0x2f
   14e70:	bne	14e88 <__assert_fail@plt+0x3784>
   14e74:	mov	r3, r0
   14e78:	cmp	r4, r3
   14e7c:	bne	14e64 <__assert_fail@plt+0x3760>
   14e80:	mov	r0, r4
   14e84:	pop	{r4, r5, r6, pc}
   14e88:	mov	r4, r3
   14e8c:	mov	r0, r4
   14e90:	pop	{r4, r5, r6, pc}
   14e94:	mov	r4, r0
   14e98:	b	14e80 <__assert_fail@plt+0x377c>
   14e9c:	push	{r4, r5, r6, lr}
   14ea0:	mov	r6, r0
   14ea4:	bl	14e24 <__assert_fail@plt+0x3720>
   14ea8:	add	r3, r0, #1
   14eac:	mov	r4, r0
   14eb0:	cmp	r0, #0
   14eb4:	movne	r0, r3
   14eb8:	addeq	r0, r3, #1
   14ebc:	bl	1b14c <__assert_fail@plt+0x9a48>
   14ec0:	subs	r5, r0, #0
   14ec4:	beq	14eec <__assert_fail@plt+0x37e8>
   14ec8:	mov	r2, r4
   14ecc:	mov	r1, r6
   14ed0:	bl	11374 <memcpy@plt>
   14ed4:	cmp	r4, #0
   14ed8:	moveq	r3, #46	; 0x2e
   14edc:	moveq	r4, #1
   14ee0:	strbeq	r3, [r5]
   14ee4:	mov	r3, #0
   14ee8:	strb	r3, [r5, r4]
   14eec:	mov	r0, r5
   14ef0:	pop	{r4, r5, r6, pc}
   14ef4:	push	{r4, r5, r6, r7, r8, lr}
   14ef8:	subs	r8, r0, #0
   14efc:	popeq	{r4, r5, r6, r7, r8, pc}
   14f00:	mov	r0, #24
   14f04:	mov	r4, r1
   14f08:	mov	r7, r2
   14f0c:	bl	1a458 <__assert_fail@plt+0x8d54>
   14f10:	mov	r6, r0
   14f14:	mov	r0, r4
   14f18:	bl	1a984 <__assert_fail@plt+0x9280>
   14f1c:	ldrd	r4, [r7, #96]	; 0x60
   14f20:	ldrd	r2, [r7]
   14f24:	mov	r1, r6
   14f28:	strd	r4, [r6, #8]
   14f2c:	strd	r2, [r6, #16]
   14f30:	str	r0, [r6]
   14f34:	mov	r0, r8
   14f38:	bl	15fe4 <__assert_fail@plt+0x48e0>
   14f3c:	cmp	r0, #0
   14f40:	beq	14f58 <__assert_fail@plt+0x3854>
   14f44:	cmp	r6, r0
   14f48:	popeq	{r4, r5, r6, r7, r8, pc}
   14f4c:	mov	r0, r6
   14f50:	pop	{r4, r5, r6, r7, r8, lr}
   14f54:	b	161ac <__assert_fail@plt+0x4aa8>
   14f58:	bl	1a9a0 <__assert_fail@plt+0x929c>
   14f5c:	subs	r3, r0, #0
   14f60:	beq	14f9c <__assert_fail@plt+0x3898>
   14f64:	push	{r4, r5, lr}
   14f68:	sub	sp, sp, #28
   14f6c:	ldrd	r4, [r2, #96]	; 0x60
   14f70:	ldrd	r2, [r2]
   14f74:	mov	ip, r1
   14f78:	mov	r1, sp
   14f7c:	str	ip, [sp]
   14f80:	strd	r4, [sp, #8]
   14f84:	strd	r2, [sp, #16]
   14f88:	bl	15750 <__assert_fail@plt+0x404c>
   14f8c:	adds	r0, r0, #0
   14f90:	movne	r0, #1
   14f94:	add	sp, sp, #28
   14f98:	pop	{r4, r5, pc}
   14f9c:	mov	r0, r3
   14fa0:	bx	lr
   14fa4:	push	{r4, r5, lr}
   14fa8:	sub	sp, sp, #12
   14fac:	mov	r5, r0
   14fb0:	bl	1156c <__errno_location@plt>
   14fb4:	mov	r2, #0
   14fb8:	mov	r4, r0
   14fbc:	ldr	r3, [r0]
   14fc0:	str	r2, [r4]
   14fc4:	mov	r0, r5
   14fc8:	str	r3, [sp]
   14fcc:	str	r3, [sp, #4]
   14fd0:	bl	11350 <free@plt>
   14fd4:	ldr	r3, [r4]
   14fd8:	add	r2, sp, #8
   14fdc:	cmp	r3, #0
   14fe0:	moveq	r3, #4
   14fe4:	movne	r3, #0
   14fe8:	add	r3, r2, r3
   14fec:	ldr	r3, [r3, #-8]
   14ff0:	str	r3, [r4]
   14ff4:	add	sp, sp, #12
   14ff8:	pop	{r4, r5, pc}
   14ffc:	push	{r4, r5, r6, r7, r8, r9, lr}
   15000:	sub	sp, sp, #396	; 0x18c
   15004:	ldr	r5, [pc, #344]	; 15164 <__assert_fail@plt+0x3a60>
   15008:	mov	r6, r0
   1500c:	mov	r8, r2
   15010:	ldr	r9, [r5]
   15014:	mov	r4, sp
   15018:	cmp	r9, #0
   1501c:	blt	15134 <__assert_fail@plt+0x3a30>
   15020:	cmp	r9, #0
   15024:	mov	r1, r4
   15028:	mov	r0, r6
   1502c:	beq	150a8 <__assert_fail@plt+0x39a4>
   15030:	bl	115a8 <statvfs64@plt>
   15034:	cmp	r0, #0
   15038:	blt	15124 <__assert_fail@plt+0x3a20>
   1503c:	ldr	r3, [sp, #4]
   15040:	cmp	r3, #0
   15044:	beq	15110 <__assert_fail@plt+0x3a0c>
   15048:	cmn	r3, #1
   1504c:	mov	r2, r3
   15050:	movne	r3, #0
   15054:	beq	1511c <__assert_fail@plt+0x3a18>
   15058:	ldrd	r4, [sp, #8]
   1505c:	str	r2, [r8]
   15060:	ldr	r2, [sp, #28]
   15064:	ldrd	r0, [sp, #16]
   15068:	ldrd	r6, [sp, #32]
   1506c:	strd	r4, [r8, #8]
   15070:	ldrd	r4, [sp, #40]	; 0x28
   15074:	str	r3, [r8, #4]
   15078:	ldr	r3, [sp, #24]
   1507c:	str	r2, [r8, #28]
   15080:	mov	r9, #0
   15084:	lsr	r2, r2, #31
   15088:	strd	r0, [r8, #16]
   1508c:	strb	r2, [r8, #32]
   15090:	mov	r0, r9
   15094:	strd	r6, [r8, #40]	; 0x28
   15098:	strd	r4, [r8, #48]	; 0x30
   1509c:	str	r3, [r8, #24]
   150a0:	add	sp, sp, #396	; 0x18c
   150a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   150a8:	bl	11638 <statfs64@plt>
   150ac:	cmp	r0, #0
   150b0:	blt	15124 <__assert_fail@plt+0x3a20>
   150b4:	ldr	r2, [sp, #60]	; 0x3c
   150b8:	ldr	r1, [sp, #28]
   150bc:	cmn	r2, #1
   150c0:	ldrd	r4, [sp, #8]
   150c4:	asrne	r3, r2, #31
   150c8:	mvneq	r2, #0
   150cc:	mvneq	r3, #0
   150d0:	ldrd	r6, [sp, #32]
   150d4:	strd	r2, [r8]
   150d8:	str	r1, [r8, #28]
   150dc:	ldrd	r2, [sp, #16]
   150e0:	lsr	r1, r1, #31
   150e4:	strd	r4, [r8, #8]
   150e8:	ldrd	r4, [sp, #40]	; 0x28
   150ec:	strb	r1, [r8, #32]
   150f0:	ldr	r1, [sp, #24]
   150f4:	mov	r0, r9
   150f8:	strd	r2, [r8, #16]
   150fc:	strd	r6, [r8, #40]	; 0x28
   15100:	strd	r4, [r8, #48]	; 0x30
   15104:	str	r1, [r8, #24]
   15108:	add	sp, sp, #396	; 0x18c
   1510c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15110:	ldr	r2, [sp]
   15114:	cmn	r2, #1
   15118:	bne	15058 <__assert_fail@plt+0x3954>
   1511c:	mov	r3, r2
   15120:	b	15058 <__assert_fail@plt+0x3954>
   15124:	mvn	r9, #0
   15128:	mov	r0, r9
   1512c:	add	sp, sp, #396	; 0x18c
   15130:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15134:	mov	r0, sp
   15138:	bl	113b0 <uname@plt>
   1513c:	cmp	r0, #0
   15140:	movne	r9, #0
   15144:	bne	1515c <__assert_fail@plt+0x3a58>
   15148:	ldr	r1, [pc, #24]	; 15168 <__assert_fail@plt+0x3a64>
   1514c:	add	r0, sp, #130	; 0x82
   15150:	bl	11308 <strverscmp@plt>
   15154:	mvn	r9, r0
   15158:	lsr	r9, r9, #31
   1515c:	str	r9, [r5]
   15160:	b	15020 <__assert_fail@plt+0x391c>
   15164:	ldrdeq	pc, [r2], -r8
   15168:	strdeq	lr, [r1], -r8
   1516c:	andeq	r0, r0, r0
   15170:	cmp	r0, #10
   15174:	movcc	r0, #10
   15178:	push	{r4, r5, r6, r7, r8, lr}
   1517c:	orr	r7, r0, #1
   15180:	cmn	r7, #1
   15184:	ldrne	r8, [pc, #132]	; 15210 <__assert_fail@plt+0x3b0c>
   15188:	beq	15200 <__assert_fail@plt+0x3afc>
   1518c:	cmp	r7, #9
   15190:	bls	15208 <__assert_fail@plt+0x3b04>
   15194:	umull	r2, r3, r8, r7
   15198:	lsr	r3, r3, #1
   1519c:	add	r3, r3, r3, lsl #1
   151a0:	cmp	r7, r3
   151a4:	beq	151f4 <__assert_fail@plt+0x3af0>
   151a8:	mov	r6, #16
   151ac:	mov	r5, #9
   151b0:	mov	r4, #3
   151b4:	b	151c8 <__assert_fail@plt+0x3ac4>
   151b8:	bl	1c9b0 <__assert_fail@plt+0xb2ac>
   151bc:	add	r6, r6, #8
   151c0:	cmp	r1, #0
   151c4:	beq	151f4 <__assert_fail@plt+0x3af0>
   151c8:	add	r5, r5, r6
   151cc:	add	r4, r4, #2
   151d0:	cmp	r5, r7
   151d4:	mov	r0, r7
   151d8:	mov	r1, r4
   151dc:	bcc	151b8 <__assert_fail@plt+0x3ab4>
   151e0:	mov	r1, r4
   151e4:	mov	r0, r7
   151e8:	bl	1c9b0 <__assert_fail@plt+0xb2ac>
   151ec:	cmp	r1, #0
   151f0:	bne	15200 <__assert_fail@plt+0x3afc>
   151f4:	add	r7, r7, #2
   151f8:	cmn	r7, #1
   151fc:	bne	1518c <__assert_fail@plt+0x3a88>
   15200:	mov	r0, r7
   15204:	pop	{r4, r5, r6, r7, r8, pc}
   15208:	mov	r4, #3
   1520c:	b	151e0 <__assert_fail@plt+0x3adc>
   15210:	bge	feabfcc4 <optarg@@GLIBC_2.4+0xfea9098c>
   15214:	push	{r4, lr}
   15218:	ror	r0, r0, #3
   1521c:	bl	1c9b0 <__assert_fail@plt+0xb2ac>
   15220:	mov	r0, r1
   15224:	pop	{r4, pc}
   15228:	sub	r0, r1, r0
   1522c:	clz	r0, r0
   15230:	lsr	r0, r0, #5
   15234:	bx	lr
   15238:	push	{r4, lr}
   1523c:	mov	r4, r0
   15240:	mov	r0, r1
   15244:	ldr	r3, [r4, #24]
   15248:	ldr	r1, [r4, #8]
   1524c:	blx	r3
   15250:	ldr	r3, [r4, #8]
   15254:	cmp	r0, r3
   15258:	bcs	15268 <__assert_fail@plt+0x3b64>
   1525c:	ldr	r3, [r4]
   15260:	add	r0, r3, r0, lsl #3
   15264:	pop	{r4, pc}
   15268:	bl	116e0 <abort@plt>
   1526c:	push	{r4, r5, r6, r7, r8, lr}
   15270:	mov	r7, r2
   15274:	mov	r8, r3
   15278:	mov	r6, r0
   1527c:	mov	r5, r1
   15280:	bl	15238 <__assert_fail@plt+0x3b34>
   15284:	str	r0, [r7]
   15288:	ldr	r3, [r0]
   1528c:	cmp	r3, #0
   15290:	beq	15328 <__assert_fail@plt+0x3c24>
   15294:	cmp	r5, r3
   15298:	mov	r4, r0
   1529c:	beq	152bc <__assert_fail@plt+0x3bb8>
   152a0:	mov	r1, r3
   152a4:	mov	r0, r5
   152a8:	ldr	r3, [r6, #28]
   152ac:	blx	r3
   152b0:	cmp	r0, #0
   152b4:	beq	1531c <__assert_fail@plt+0x3c18>
   152b8:	ldr	r3, [r4]
   152bc:	cmp	r8, #0
   152c0:	beq	152ec <__assert_fail@plt+0x3be8>
   152c4:	ldr	r2, [r4, #4]
   152c8:	cmp	r2, #0
   152cc:	movne	ip, #0
   152d0:	ldmne	r2, {r0, r1}
   152d4:	streq	r2, [r4]
   152d8:	stmne	r4, {r0, r1}
   152dc:	strne	ip, [r2]
   152e0:	ldrne	r1, [r6, #36]	; 0x24
   152e4:	strne	r1, [r2, #4]
   152e8:	strne	r2, [r6, #36]	; 0x24
   152ec:	mov	r0, r3
   152f0:	pop	{r4, r5, r6, r7, r8, pc}
   152f4:	ldr	r3, [r2]
   152f8:	cmp	r5, r3
   152fc:	beq	1533c <__assert_fail@plt+0x3c38>
   15300:	mov	r1, r3
   15304:	mov	r0, r5
   15308:	ldr	r3, [r6, #28]
   1530c:	blx	r3
   15310:	cmp	r0, #0
   15314:	bne	15334 <__assert_fail@plt+0x3c30>
   15318:	ldr	r4, [r4, #4]
   1531c:	ldr	r2, [r4, #4]
   15320:	cmp	r2, #0
   15324:	bne	152f4 <__assert_fail@plt+0x3bf0>
   15328:	mov	r3, #0
   1532c:	mov	r0, r3
   15330:	pop	{r4, r5, r6, r7, r8, pc}
   15334:	ldr	r2, [r4, #4]
   15338:	ldr	r3, [r2]
   1533c:	cmp	r8, #0
   15340:	beq	152ec <__assert_fail@plt+0x3be8>
   15344:	ldr	r0, [r2, #4]
   15348:	mov	r1, #0
   1534c:	str	r0, [r4, #4]
   15350:	str	r1, [r2]
   15354:	ldr	r1, [r6, #36]	; 0x24
   15358:	mov	r0, r3
   1535c:	str	r1, [r2, #4]
   15360:	str	r2, [r6, #36]	; 0x24
   15364:	pop	{r4, r5, r6, r7, r8, pc}
   15368:	ldr	r2, [pc, #164]	; 15414 <__assert_fail@plt+0x3d10>
   1536c:	ldr	r3, [r0]
   15370:	cmp	r3, r2
   15374:	beq	153fc <__assert_fail@plt+0x3cf8>
   15378:	vldr	s15, [r3, #8]
   1537c:	vldr	s14, [pc, #128]	; 15404 <__assert_fail@plt+0x3d00>
   15380:	vcmpe.f32	s15, s14
   15384:	vmrs	APSR_nzcv, fpscr
   15388:	ble	153f0 <__assert_fail@plt+0x3cec>
   1538c:	vldr	s13, [pc, #116]	; 15408 <__assert_fail@plt+0x3d04>
   15390:	vcmpe.f32	s15, s13
   15394:	vmrs	APSR_nzcv, fpscr
   15398:	bpl	153f0 <__assert_fail@plt+0x3cec>
   1539c:	vldr	s13, [pc, #104]	; 1540c <__assert_fail@plt+0x3d08>
   153a0:	vldr	s12, [r3, #12]
   153a4:	vcmpe.f32	s12, s13
   153a8:	vmrs	APSR_nzcv, fpscr
   153ac:	ble	153f0 <__assert_fail@plt+0x3cec>
   153b0:	vldr	s13, [r3]
   153b4:	vcmpe.f32	s13, #0.0
   153b8:	vmrs	APSR_nzcv, fpscr
   153bc:	blt	153f0 <__assert_fail@plt+0x3cec>
   153c0:	vadd.f32	s14, s13, s14
   153c4:	vldr	s13, [r3, #4]
   153c8:	vcmpe.f32	s14, s13
   153cc:	vmrs	APSR_nzcv, fpscr
   153d0:	bpl	153f0 <__assert_fail@plt+0x3cec>
   153d4:	vldr	s12, [pc, #52]	; 15410 <__assert_fail@plt+0x3d0c>
   153d8:	vcmpe.f32	s13, s12
   153dc:	vmrs	APSR_nzcv, fpscr
   153e0:	bhi	153f0 <__assert_fail@plt+0x3cec>
   153e4:	vcmpe.f32	s15, s14
   153e8:	vmrs	APSR_nzcv, fpscr
   153ec:	bgt	153fc <__assert_fail@plt+0x3cf8>
   153f0:	str	r2, [r0]
   153f4:	mov	r0, #0
   153f8:	bx	lr
   153fc:	mov	r0, #1
   15400:	bx	lr
   15404:	stclcc	12, cr12, [ip, #820]	; 0x334
   15408:	svccc	0x00666666
   1540c:	svccc	0x008ccccd
   15410:	svccc	0x00800000
   15414:	andeq	lr, r1, r0, lsl #6
   15418:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1541c:	ldm	r1, {r6, ip}
   15420:	cmp	r6, ip
   15424:	bcs	154e0 <__assert_fail@plt+0x3ddc>
   15428:	mov	sl, r2
   1542c:	mov	r5, r0
   15430:	mov	r8, r1
   15434:	add	r6, r6, #8
   15438:	mov	r9, #0
   1543c:	ldr	fp, [r6, #-8]
   15440:	mov	r7, r6
   15444:	cmp	fp, #0
   15448:	beq	154d4 <__assert_fail@plt+0x3dd0>
   1544c:	ldr	r4, [r6, #-4]
   15450:	cmp	r4, #0
   15454:	bne	15474 <__assert_fail@plt+0x3d70>
   15458:	b	154c4 <__assert_fail@plt+0x3dc0>
   1545c:	ldr	r3, [r0, #4]
   15460:	cmp	r2, #0
   15464:	str	r3, [r4, #4]
   15468:	str	r4, [r0, #4]
   1546c:	mov	r4, r2
   15470:	beq	154c0 <__assert_fail@plt+0x3dbc>
   15474:	ldr	fp, [r4]
   15478:	mov	r0, r5
   1547c:	mov	r1, fp
   15480:	bl	15238 <__assert_fail@plt+0x3b34>
   15484:	ldr	r2, [r4, #4]
   15488:	ldr	r1, [r0]
   1548c:	cmp	r1, #0
   15490:	bne	1545c <__assert_fail@plt+0x3d58>
   15494:	ldr	ip, [r5, #12]
   15498:	str	fp, [r0]
   1549c:	add	r3, ip, #1
   154a0:	str	r3, [r5, #12]
   154a4:	str	r1, [r4]
   154a8:	ldr	r3, [r5, #36]	; 0x24
   154ac:	cmp	r2, #0
   154b0:	str	r3, [r4, #4]
   154b4:	str	r4, [r5, #36]	; 0x24
   154b8:	mov	r4, r2
   154bc:	bne	15474 <__assert_fail@plt+0x3d70>
   154c0:	ldr	fp, [r6, #-8]
   154c4:	cmp	sl, #0
   154c8:	str	r9, [r6, #-4]
   154cc:	beq	154e8 <__assert_fail@plt+0x3de4>
   154d0:	ldr	ip, [r8, #4]
   154d4:	cmp	ip, r7
   154d8:	add	r6, r6, #8
   154dc:	bhi	1543c <__assert_fail@plt+0x3d38>
   154e0:	mov	r0, #1
   154e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154e8:	mov	r1, fp
   154ec:	mov	r0, r5
   154f0:	bl	15238 <__assert_fail@plt+0x3b34>
   154f4:	ldr	r2, [r0]
   154f8:	mov	r4, r0
   154fc:	cmp	r2, #0
   15500:	beq	1554c <__assert_fail@plt+0x3e48>
   15504:	ldr	r0, [r5, #36]	; 0x24
   15508:	cmp	r0, #0
   1550c:	beq	15560 <__assert_fail@plt+0x3e5c>
   15510:	ldr	r2, [r0, #4]
   15514:	str	r2, [r5, #36]	; 0x24
   15518:	ldr	r2, [r4, #4]
   1551c:	str	fp, [r0]
   15520:	str	r2, [r0, #4]
   15524:	str	r0, [r4, #4]
   15528:	str	r9, [r6, #-8]
   1552c:	ldr	r3, [r8, #12]
   15530:	ldr	ip, [r8, #4]
   15534:	sub	r3, r3, #1
   15538:	cmp	ip, r7
   1553c:	str	r3, [r8, #12]
   15540:	add	r6, r6, #8
   15544:	bhi	1543c <__assert_fail@plt+0x3d38>
   15548:	b	154e0 <__assert_fail@plt+0x3ddc>
   1554c:	ldr	r2, [r5, #12]
   15550:	str	fp, [r0]
   15554:	add	r3, r2, #1
   15558:	str	r3, [r5, #12]
   1555c:	b	15528 <__assert_fail@plt+0x3e24>
   15560:	mov	r0, #8
   15564:	bl	1b14c <__assert_fail@plt+0x9a48>
   15568:	cmp	r0, #0
   1556c:	bne	15518 <__assert_fail@plt+0x3e14>
   15570:	mov	r0, sl
   15574:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15578:	ldr	r0, [r0, #8]
   1557c:	bx	lr
   15580:	ldr	r0, [r0, #12]
   15584:	bx	lr
   15588:	ldr	r0, [r0, #16]
   1558c:	bx	lr
   15590:	ldm	r0, {r1, ip}
   15594:	mov	r0, #0
   15598:	cmp	r1, ip
   1559c:	bcs	155e4 <__assert_fail@plt+0x3ee0>
   155a0:	ldr	r3, [r1]
   155a4:	cmp	r3, #0
   155a8:	beq	155d4 <__assert_fail@plt+0x3ed0>
   155ac:	ldr	r3, [r1, #4]
   155b0:	mov	r2, #1
   155b4:	cmp	r3, #0
   155b8:	beq	155cc <__assert_fail@plt+0x3ec8>
   155bc:	ldr	r3, [r3, #4]
   155c0:	add	r2, r2, #1
   155c4:	cmp	r3, #0
   155c8:	bne	155bc <__assert_fail@plt+0x3eb8>
   155cc:	cmp	r0, r2
   155d0:	movcc	r0, r2
   155d4:	add	r1, r1, #8
   155d8:	cmp	r1, ip
   155dc:	bcc	155a0 <__assert_fail@plt+0x3e9c>
   155e0:	bx	lr
   155e4:	bx	lr
   155e8:	push	{lr}		; (str lr, [sp, #-4]!)
   155ec:	mov	r2, #0
   155f0:	ldm	r0, {r1, lr}
   155f4:	mov	ip, r2
   155f8:	cmp	r1, lr
   155fc:	bcs	1563c <__assert_fail@plt+0x3f38>
   15600:	ldr	r3, [r1]
   15604:	cmp	r3, #0
   15608:	beq	15630 <__assert_fail@plt+0x3f2c>
   1560c:	ldr	r3, [r1, #4]
   15610:	add	ip, ip, #1
   15614:	cmp	r3, #0
   15618:	add	r2, r2, #1
   1561c:	beq	15630 <__assert_fail@plt+0x3f2c>
   15620:	ldr	r3, [r3, #4]
   15624:	add	r2, r2, #1
   15628:	cmp	r3, #0
   1562c:	bne	15620 <__assert_fail@plt+0x3f1c>
   15630:	add	r1, r1, #8
   15634:	cmp	r1, lr
   15638:	bcc	15600 <__assert_fail@plt+0x3efc>
   1563c:	ldr	r3, [r0, #12]
   15640:	cmp	r3, ip
   15644:	ldreq	r0, [r0, #16]
   15648:	subeq	r0, r0, r2
   1564c:	clzeq	r0, r0
   15650:	lsreq	r0, r0, #5
   15654:	movne	r0, #0
   15658:	pop	{pc}		; (ldr pc, [sp], #4)
   1565c:	push	{r4, r5, r6, r7, lr}
   15660:	mov	r5, r1
   15664:	ldm	r0, {ip, lr}
   15668:	sub	sp, sp, #12
   1566c:	ldr	r3, [r0, #16]
   15670:	cmp	ip, lr
   15674:	mov	r4, #0
   15678:	ldr	r6, [r0, #8]
   1567c:	ldr	r7, [r0, #12]
   15680:	bcs	156c4 <__assert_fail@plt+0x3fc0>
   15684:	ldr	r2, [ip]
   15688:	cmp	r2, #0
   1568c:	beq	156b8 <__assert_fail@plt+0x3fb4>
   15690:	ldr	r2, [ip, #4]
   15694:	mov	r1, #1
   15698:	cmp	r2, #0
   1569c:	beq	156b0 <__assert_fail@plt+0x3fac>
   156a0:	ldr	r2, [r2, #4]
   156a4:	add	r1, r1, #1
   156a8:	cmp	r2, #0
   156ac:	bne	156a0 <__assert_fail@plt+0x3f9c>
   156b0:	cmp	r4, r1
   156b4:	movcc	r4, r1
   156b8:	add	ip, ip, #8
   156bc:	cmp	ip, lr
   156c0:	bcc	15684 <__assert_fail@plt+0x3f80>
   156c4:	ldr	r2, [pc, #116]	; 15740 <__assert_fail@plt+0x403c>
   156c8:	mov	r1, #1
   156cc:	mov	r0, r5
   156d0:	bl	115c0 <__fprintf_chk@plt>
   156d4:	mov	r3, r6
   156d8:	ldr	r2, [pc, #100]	; 15744 <__assert_fail@plt+0x4040>
   156dc:	mov	r1, #1
   156e0:	mov	r0, r5
   156e4:	bl	115c0 <__fprintf_chk@plt>
   156e8:	vmov	s15, r7
   156ec:	vldr	d5, [pc, #68]	; 15738 <__assert_fail@plt+0x4034>
   156f0:	mov	r3, r7
   156f4:	ldr	r2, [pc, #76]	; 15748 <__assert_fail@plt+0x4044>
   156f8:	vcvt.f64.u32	d6, s15
   156fc:	vmov	s15, r6
   15700:	mov	r1, #1
   15704:	mov	r0, r5
   15708:	vcvt.f64.u32	d7, s15
   1570c:	vmul.f64	d6, d6, d5
   15710:	vdiv.f64	d5, d6, d7
   15714:	vstr	d5, [sp]
   15718:	bl	115c0 <__fprintf_chk@plt>
   1571c:	mov	r3, r4
   15720:	mov	r0, r5
   15724:	ldr	r2, [pc, #32]	; 1574c <__assert_fail@plt+0x4048>
   15728:	mov	r1, #1
   1572c:	add	sp, sp, #12
   15730:	pop	{r4, r5, r6, r7, lr}
   15734:	b	115c0 <__fprintf_chk@plt>
   15738:	andeq	r0, r0, r0
   1573c:	subsmi	r0, r9, r0
   15740:	andeq	lr, r1, r4, lsl r3
   15744:	andeq	lr, r1, ip, lsr #6
   15748:	andeq	lr, r1, r4, asr #6
   1574c:	andeq	lr, r1, r8, ror #6
   15750:	push	{r4, r5, r6, lr}
   15754:	mov	r6, r0
   15758:	mov	r5, r1
   1575c:	bl	15238 <__assert_fail@plt+0x3b34>
   15760:	ldr	r3, [r0]
   15764:	cmp	r3, #0
   15768:	movne	r4, r0
   1576c:	bne	15778 <__assert_fail@plt+0x4074>
   15770:	b	157a4 <__assert_fail@plt+0x40a0>
   15774:	ldr	r3, [r4]
   15778:	cmp	r5, r3
   1577c:	mov	r1, r3
   15780:	mov	r0, r5
   15784:	beq	157ac <__assert_fail@plt+0x40a8>
   15788:	ldr	r3, [r6, #28]
   1578c:	blx	r3
   15790:	cmp	r0, #0
   15794:	bne	157b4 <__assert_fail@plt+0x40b0>
   15798:	ldr	r4, [r4, #4]
   1579c:	cmp	r4, #0
   157a0:	bne	15774 <__assert_fail@plt+0x4070>
   157a4:	mov	r0, #0
   157a8:	pop	{r4, r5, r6, pc}
   157ac:	mov	r0, r5
   157b0:	pop	{r4, r5, r6, pc}
   157b4:	ldr	r0, [r4]
   157b8:	pop	{r4, r5, r6, pc}
   157bc:	ldr	r3, [r0, #16]
   157c0:	cmp	r3, #0
   157c4:	beq	157f8 <__assert_fail@plt+0x40f4>
   157c8:	ldr	r3, [r0]
   157cc:	ldr	r2, [r0, #4]
   157d0:	cmp	r3, r2
   157d4:	bcc	157e8 <__assert_fail@plt+0x40e4>
   157d8:	b	15800 <__assert_fail@plt+0x40fc>
   157dc:	add	r3, r3, #8
   157e0:	cmp	r3, r2
   157e4:	bcs	15800 <__assert_fail@plt+0x40fc>
   157e8:	ldr	r0, [r3]
   157ec:	cmp	r0, #0
   157f0:	beq	157dc <__assert_fail@plt+0x40d8>
   157f4:	bx	lr
   157f8:	mov	r0, r3
   157fc:	bx	lr
   15800:	push	{r4, lr}
   15804:	bl	116e0 <abort@plt>
   15808:	push	{r4, r5, r6, lr}
   1580c:	mov	r5, r0
   15810:	mov	r4, r1
   15814:	bl	15238 <__assert_fail@plt+0x3b34>
   15818:	mov	r2, r0
   1581c:	mov	r3, r0
   15820:	b	1582c <__assert_fail@plt+0x4128>
   15824:	cmp	r3, #0
   15828:	beq	15840 <__assert_fail@plt+0x413c>
   1582c:	ldm	r3, {r1, r3}
   15830:	cmp	r4, r1
   15834:	bne	15824 <__assert_fail@plt+0x4120>
   15838:	cmp	r3, #0
   1583c:	bne	15868 <__assert_fail@plt+0x4164>
   15840:	ldr	r3, [r5, #4]
   15844:	b	15854 <__assert_fail@plt+0x4150>
   15848:	ldr	r0, [r2]
   1584c:	cmp	r0, #0
   15850:	popne	{r4, r5, r6, pc}
   15854:	add	r2, r2, #8
   15858:	cmp	r2, r3
   1585c:	bcc	15848 <__assert_fail@plt+0x4144>
   15860:	mov	r0, #0
   15864:	pop	{r4, r5, r6, pc}
   15868:	ldr	r0, [r3]
   1586c:	pop	{r4, r5, r6, pc}
   15870:	push	{r4, r5, r6, lr}
   15874:	ldm	r0, {r5, lr}
   15878:	cmp	r5, lr
   1587c:	bcs	15900 <__assert_fail@plt+0x41fc>
   15880:	add	r5, r5, #8
   15884:	mov	ip, #0
   15888:	ldr	r3, [r5, #-8]
   1588c:	mov	r6, r5
   15890:	cmp	r3, #0
   15894:	beq	158e0 <__assert_fail@plt+0x41dc>
   15898:	cmp	r2, ip
   1589c:	bls	158ec <__assert_fail@plt+0x41e8>
   158a0:	str	r3, [r1, ip, lsl #2]
   158a4:	ldr	r3, [r5, #-4]
   158a8:	add	r4, ip, #1
   158ac:	cmp	r3, #0
   158b0:	add	lr, r1, ip, lsl #2
   158b4:	beq	158f4 <__assert_fail@plt+0x41f0>
   158b8:	mov	ip, r4
   158bc:	cmp	r2, ip
   158c0:	beq	158ec <__assert_fail@plt+0x41e8>
   158c4:	ldr	r4, [r3]
   158c8:	add	ip, ip, #1
   158cc:	str	r4, [lr, #4]!
   158d0:	ldr	r3, [r3, #4]
   158d4:	cmp	r3, #0
   158d8:	bne	158bc <__assert_fail@plt+0x41b8>
   158dc:	ldr	lr, [r0, #4]
   158e0:	cmp	lr, r6
   158e4:	add	r5, r5, #8
   158e8:	bhi	15888 <__assert_fail@plt+0x4184>
   158ec:	mov	r0, ip
   158f0:	pop	{r4, r5, r6, pc}
   158f4:	ldr	lr, [r0, #4]
   158f8:	mov	ip, r4
   158fc:	b	158e0 <__assert_fail@plt+0x41dc>
   15900:	mov	ip, #0
   15904:	b	158ec <__assert_fail@plt+0x41e8>
   15908:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1590c:	ldr	r3, [r0, #4]
   15910:	ldr	r8, [r0]
   15914:	cmp	r8, r3
   15918:	bcs	1597c <__assert_fail@plt+0x4278>
   1591c:	mov	r7, r2
   15920:	mov	r6, r1
   15924:	mov	r9, r0
   15928:	mov	r5, #0
   1592c:	ldr	r0, [r8]
   15930:	cmp	r0, #0
   15934:	beq	15968 <__assert_fail@plt+0x4264>
   15938:	mov	r4, r8
   1593c:	b	15944 <__assert_fail@plt+0x4240>
   15940:	ldr	r0, [r4]
   15944:	mov	r1, r7
   15948:	blx	r6
   1594c:	cmp	r0, #0
   15950:	beq	15974 <__assert_fail@plt+0x4270>
   15954:	ldr	r4, [r4, #4]
   15958:	add	r5, r5, #1
   1595c:	cmp	r4, #0
   15960:	bne	15940 <__assert_fail@plt+0x423c>
   15964:	ldr	r3, [r9, #4]
   15968:	add	r8, r8, #8
   1596c:	cmp	r3, r8
   15970:	bhi	1592c <__assert_fail@plt+0x4228>
   15974:	mov	r0, r5
   15978:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1597c:	mov	r5, #0
   15980:	b	15974 <__assert_fail@plt+0x4270>
   15984:	push	{r4, r5, r6, lr}
   15988:	mov	r4, r0
   1598c:	ldrb	r0, [r0]
   15990:	cmp	r0, #0
   15994:	beq	159c4 <__assert_fail@plt+0x42c0>
   15998:	mov	r5, r1
   1599c:	mov	r1, #0
   159a0:	rsb	r1, r1, r1, lsl #5
   159a4:	add	r0, r1, r0
   159a8:	mov	r1, r5
   159ac:	bl	1c9b0 <__assert_fail@plt+0xb2ac>
   159b0:	ldrb	r0, [r4, #1]!
   159b4:	cmp	r0, #0
   159b8:	bne	159a0 <__assert_fail@plt+0x429c>
   159bc:	mov	r0, r1
   159c0:	pop	{r4, r5, r6, pc}
   159c4:	mov	r1, r0
   159c8:	b	159bc <__assert_fail@plt+0x42b8>
   159cc:	push	{lr}		; (str lr, [sp, #-4]!)
   159d0:	mov	ip, r0
   159d4:	ldr	lr, [pc, #16]	; 159ec <__assert_fail@plt+0x42e8>
   159d8:	ldm	lr!, {r0, r1, r2, r3}
   159dc:	ldr	lr, [lr]
   159e0:	stmia	ip!, {r0, r1, r2, r3}
   159e4:	str	lr, [ip]
   159e8:	pop	{pc}		; (ldr pc, [sp], #4)
   159ec:	andeq	lr, r1, r0, lsl #6
   159f0:	push	{r4, r5, r6, r7, lr}
   159f4:	sub	sp, sp, #12
   159f8:	cmp	r2, #0
   159fc:	str	r0, [sp, #4]
   15a00:	ldr	r6, [pc, #304]	; 15b38 <__assert_fail@plt+0x4434>
   15a04:	mov	r0, #40	; 0x28
   15a08:	movne	r6, r2
   15a0c:	cmp	r3, #0
   15a10:	ldr	r7, [pc, #292]	; 15b3c <__assert_fail@plt+0x4438>
   15a14:	mov	r5, r1
   15a18:	movne	r7, r3
   15a1c:	bl	1b14c <__assert_fail@plt+0x9a48>
   15a20:	subs	r4, r0, #0
   15a24:	beq	15abc <__assert_fail@plt+0x43b8>
   15a28:	cmp	r5, #0
   15a2c:	beq	15b10 <__assert_fail@plt+0x440c>
   15a30:	mov	r0, r4
   15a34:	str	r5, [r0, #20]!
   15a38:	bl	15368 <__assert_fail@plt+0x3c64>
   15a3c:	cmp	r0, #0
   15a40:	beq	15af8 <__assert_fail@plt+0x43f4>
   15a44:	ldrb	r3, [r5, #16]
   15a48:	cmp	r3, #0
   15a4c:	beq	15ac8 <__assert_fail@plt+0x43c4>
   15a50:	ldr	r0, [sp, #4]
   15a54:	bl	15170 <__assert_fail@plt+0x3a6c>
   15a58:	lsrs	r2, r0, #30
   15a5c:	movne	r5, #1
   15a60:	moveq	r5, #0
   15a64:	tst	r0, #536870912	; 0x20000000
   15a68:	bne	15af0 <__assert_fail@plt+0x43ec>
   15a6c:	cmp	r5, #0
   15a70:	bne	15af0 <__assert_fail@plt+0x43ec>
   15a74:	cmp	r0, #0
   15a78:	str	r0, [r4, #8]
   15a7c:	beq	15af8 <__assert_fail@plt+0x43f4>
   15a80:	mov	r1, #8
   15a84:	bl	1b104 <__assert_fail@plt+0x9a00>
   15a88:	cmp	r0, #0
   15a8c:	str	r0, [r4]
   15a90:	beq	15af8 <__assert_fail@plt+0x43f4>
   15a94:	ldr	r3, [r4, #8]
   15a98:	str	r5, [r4, #12]
   15a9c:	str	r5, [r4, #16]
   15aa0:	add	r0, r0, r3, lsl #3
   15aa4:	ldr	r3, [sp, #32]
   15aa8:	str	r6, [r4, #24]
   15aac:	str	r7, [r4, #28]
   15ab0:	str	r3, [r4, #32]
   15ab4:	str	r5, [r4, #36]	; 0x24
   15ab8:	str	r0, [r4, #4]
   15abc:	mov	r0, r4
   15ac0:	add	sp, sp, #12
   15ac4:	pop	{r4, r5, r6, r7, pc}
   15ac8:	vldr	s12, [r5, #8]
   15acc:	vldr	s15, [sp, #4]
   15ad0:	vldr	s14, [pc, #88]	; 15b30 <__assert_fail@plt+0x442c>
   15ad4:	vcvt.f32.u32	s13, s15
   15ad8:	vdiv.f32	s15, s13, s12
   15adc:	vcmpe.f32	s15, s14
   15ae0:	vmrs	APSR_nzcv, fpscr
   15ae4:	vcvtlt.u32.f32	s15, s15
   15ae8:	vstrlt	s15, [sp, #4]
   15aec:	blt	15a50 <__assert_fail@plt+0x434c>
   15af0:	mov	r3, #0
   15af4:	str	r3, [r4, #8]
   15af8:	mov	r0, r4
   15afc:	bl	14fa4 <__assert_fail@plt+0x38a0>
   15b00:	mov	r4, #0
   15b04:	mov	r0, r4
   15b08:	add	sp, sp, #12
   15b0c:	pop	{r4, r5, r6, r7, pc}
   15b10:	ldr	r3, [pc, #40]	; 15b40 <__assert_fail@plt+0x443c>
   15b14:	mov	r0, r4
   15b18:	str	r3, [r0, #20]!
   15b1c:	bl	15368 <__assert_fail@plt+0x3c64>
   15b20:	cmp	r0, #0
   15b24:	vldrne	s12, [pc, #8]	; 15b34 <__assert_fail@plt+0x4430>
   15b28:	bne	15acc <__assert_fail@plt+0x43c8>
   15b2c:	b	15af8 <__assert_fail@plt+0x43f4>
   15b30:	svcmi	0x00800000
   15b34:	svccc	0x004ccccd
   15b38:	andeq	r5, r1, r4, lsl r2
   15b3c:	andeq	r5, r1, r8, lsr #4
   15b40:	andeq	lr, r1, r0, lsl #6
   15b44:	push	{r4, r5, r6, r7, r8, lr}
   15b48:	mov	r5, r0
   15b4c:	ldr	r7, [r0]
   15b50:	ldr	r3, [r0, #4]
   15b54:	cmp	r7, r3
   15b58:	addcc	r7, r7, #8
   15b5c:	movcc	r6, #0
   15b60:	bcs	15bdc <__assert_fail@plt+0x44d8>
   15b64:	ldr	r2, [r7, #-8]
   15b68:	mov	r8, r7
   15b6c:	cmp	r2, #0
   15b70:	beq	15bd0 <__assert_fail@plt+0x44cc>
   15b74:	ldr	r4, [r7, #-4]
   15b78:	ldr	r2, [r5, #32]
   15b7c:	cmp	r4, #0
   15b80:	beq	15bb4 <__assert_fail@plt+0x44b0>
   15b84:	cmp	r2, #0
   15b88:	beq	15b98 <__assert_fail@plt+0x4494>
   15b8c:	ldr	r0, [r4]
   15b90:	blx	r2
   15b94:	ldr	r2, [r5, #32]
   15b98:	ldr	r3, [r4, #4]
   15b9c:	ldr	r1, [r5, #36]	; 0x24
   15ba0:	str	r6, [r4]
   15ba4:	str	r1, [r4, #4]
   15ba8:	str	r4, [r5, #36]	; 0x24
   15bac:	subs	r4, r3, #0
   15bb0:	bne	15b84 <__assert_fail@plt+0x4480>
   15bb4:	cmp	r2, #0
   15bb8:	beq	15bc4 <__assert_fail@plt+0x44c0>
   15bbc:	ldr	r0, [r7, #-8]
   15bc0:	blx	r2
   15bc4:	str	r6, [r7, #-8]
   15bc8:	str	r6, [r7, #-4]
   15bcc:	ldr	r3, [r5, #4]
   15bd0:	cmp	r3, r8
   15bd4:	add	r7, r7, #8
   15bd8:	bhi	15b64 <__assert_fail@plt+0x4460>
   15bdc:	mov	r3, #0
   15be0:	str	r3, [r5, #12]
   15be4:	str	r3, [r5, #16]
   15be8:	pop	{r4, r5, r6, r7, r8, pc}
   15bec:	ldr	r3, [r0, #32]
   15bf0:	push	{r4, r5, r6, lr}
   15bf4:	cmp	r3, #0
   15bf8:	mov	r5, r0
   15bfc:	beq	15c5c <__assert_fail@plt+0x4558>
   15c00:	ldr	r3, [r0, #16]
   15c04:	cmp	r3, #0
   15c08:	beq	15c5c <__assert_fail@plt+0x4558>
   15c0c:	ldr	r6, [r0]
   15c10:	ldr	r3, [r0, #4]
   15c14:	cmp	r6, r3
   15c18:	bcs	15c98 <__assert_fail@plt+0x4594>
   15c1c:	ldr	r0, [r6]
   15c20:	cmp	r0, #0
   15c24:	movne	r4, r6
   15c28:	bne	15c34 <__assert_fail@plt+0x4530>
   15c2c:	b	15c4c <__assert_fail@plt+0x4548>
   15c30:	ldr	r0, [r4]
   15c34:	ldr	r3, [r5, #32]
   15c38:	blx	r3
   15c3c:	ldr	r4, [r4, #4]
   15c40:	cmp	r4, #0
   15c44:	bne	15c30 <__assert_fail@plt+0x452c>
   15c48:	ldr	r3, [r5, #4]
   15c4c:	add	r6, r6, #8
   15c50:	cmp	r3, r6
   15c54:	bhi	15c1c <__assert_fail@plt+0x4518>
   15c58:	b	15c60 <__assert_fail@plt+0x455c>
   15c5c:	ldr	r3, [r5, #4]
   15c60:	ldr	r6, [r5]
   15c64:	cmp	r3, r6
   15c68:	bls	15c98 <__assert_fail@plt+0x4594>
   15c6c:	ldr	r0, [r6, #4]
   15c70:	cmp	r0, #0
   15c74:	beq	15c8c <__assert_fail@plt+0x4588>
   15c78:	ldr	r4, [r0, #4]
   15c7c:	bl	14fa4 <__assert_fail@plt+0x38a0>
   15c80:	subs	r0, r4, #0
   15c84:	bne	15c78 <__assert_fail@plt+0x4574>
   15c88:	ldr	r3, [r5, #4]
   15c8c:	add	r6, r6, #8
   15c90:	cmp	r3, r6
   15c94:	bhi	15c6c <__assert_fail@plt+0x4568>
   15c98:	ldr	r0, [r5, #36]	; 0x24
   15c9c:	cmp	r0, #0
   15ca0:	beq	15cb4 <__assert_fail@plt+0x45b0>
   15ca4:	ldr	r4, [r0, #4]
   15ca8:	bl	14fa4 <__assert_fail@plt+0x38a0>
   15cac:	subs	r0, r4, #0
   15cb0:	bne	15ca4 <__assert_fail@plt+0x45a0>
   15cb4:	ldr	r0, [r5]
   15cb8:	bl	14fa4 <__assert_fail@plt+0x38a0>
   15cbc:	mov	r0, r5
   15cc0:	pop	{r4, r5, r6, lr}
   15cc4:	b	14fa4 <__assert_fail@plt+0x38a0>
   15cc8:	ldr	r3, [r0, #20]
   15ccc:	push	{r4, r5, r6, r7, lr}
   15cd0:	sub	sp, sp, #52	; 0x34
   15cd4:	ldrb	r2, [r3, #16]
   15cd8:	mov	r5, r0
   15cdc:	str	r1, [sp, #4]
   15ce0:	cmp	r2, #0
   15ce4:	bne	15d10 <__assert_fail@plt+0x460c>
   15ce8:	vmov	s15, r1
   15cec:	vldr	s13, [r3, #8]
   15cf0:	vldr	s14, [pc, #352]	; 15e58 <__assert_fail@plt+0x4754>
   15cf4:	vcvt.f32.u32	s12, s15
   15cf8:	vdiv.f32	s15, s12, s13
   15cfc:	vcmpe.f32	s15, s14
   15d00:	vmrs	APSR_nzcv, fpscr
   15d04:	bge	15e14 <__assert_fail@plt+0x4710>
   15d08:	vcvt.u32.f32	s15, s15
   15d0c:	vstr	s15, [sp, #4]
   15d10:	ldr	r0, [sp, #4]
   15d14:	bl	15170 <__assert_fail@plt+0x3a6c>
   15d18:	lsrs	r3, r0, #30
   15d1c:	movne	r2, #1
   15d20:	moveq	r2, #0
   15d24:	tst	r0, #536870912	; 0x20000000
   15d28:	movne	r2, #1
   15d2c:	cmp	r0, #0
   15d30:	movne	r4, r2
   15d34:	orreq	r4, r2, #1
   15d38:	cmp	r4, #0
   15d3c:	mov	r6, r0
   15d40:	bne	15e14 <__assert_fail@plt+0x4710>
   15d44:	ldr	r3, [r5, #8]
   15d48:	cmp	r3, r0
   15d4c:	beq	15e04 <__assert_fail@plt+0x4700>
   15d50:	mov	r1, #8
   15d54:	bl	1b104 <__assert_fail@plt+0x9a00>
   15d58:	cmp	r0, #0
   15d5c:	str	r0, [sp, #8]
   15d60:	beq	15e14 <__assert_fail@plt+0x4710>
   15d64:	ldr	r1, [r5, #24]
   15d68:	ldr	r7, [r5, #20]
   15d6c:	ldr	lr, [r5, #28]
   15d70:	ldr	ip, [r5, #32]
   15d74:	add	r0, r0, r6, lsl #3
   15d78:	ldr	r3, [r5, #36]	; 0x24
   15d7c:	str	r0, [sp, #12]
   15d80:	mov	r2, r4
   15d84:	str	r1, [sp, #32]
   15d88:	add	r0, sp, #8
   15d8c:	mov	r1, r5
   15d90:	str	r4, [sp, #20]
   15d94:	str	r4, [sp, #24]
   15d98:	str	r6, [sp, #16]
   15d9c:	str	r7, [sp, #28]
   15da0:	str	lr, [sp, #36]	; 0x24
   15da4:	str	ip, [sp, #40]	; 0x28
   15da8:	str	r3, [sp, #44]	; 0x2c
   15dac:	bl	15418 <__assert_fail@plt+0x3d14>
   15db0:	subs	r4, r0, #0
   15db4:	bne	15e24 <__assert_fail@plt+0x4720>
   15db8:	ldr	r3, [sp, #44]	; 0x2c
   15dbc:	mov	r2, #1
   15dc0:	str	r3, [r5, #36]	; 0x24
   15dc4:	add	r1, sp, #8
   15dc8:	mov	r0, r5
   15dcc:	bl	15418 <__assert_fail@plt+0x3d14>
   15dd0:	cmp	r0, #0
   15dd4:	beq	15e54 <__assert_fail@plt+0x4750>
   15dd8:	add	r1, sp, #8
   15ddc:	mov	r0, r5
   15de0:	mov	r2, r4
   15de4:	bl	15418 <__assert_fail@plt+0x3d14>
   15de8:	cmp	r0, #0
   15dec:	beq	15e54 <__assert_fail@plt+0x4750>
   15df0:	ldr	r0, [sp, #8]
   15df4:	bl	14fa4 <__assert_fail@plt+0x38a0>
   15df8:	mov	r0, r4
   15dfc:	add	sp, sp, #52	; 0x34
   15e00:	pop	{r4, r5, r6, r7, pc}
   15e04:	mov	r4, #1
   15e08:	mov	r0, r4
   15e0c:	add	sp, sp, #52	; 0x34
   15e10:	pop	{r4, r5, r6, r7, pc}
   15e14:	mov	r4, #0
   15e18:	mov	r0, r4
   15e1c:	add	sp, sp, #52	; 0x34
   15e20:	pop	{r4, r5, r6, r7, pc}
   15e24:	ldr	r0, [r5]
   15e28:	bl	14fa4 <__assert_fail@plt+0x38a0>
   15e2c:	add	r0, sp, #12
   15e30:	ldr	ip, [sp, #8]
   15e34:	ldm	r0, {r0, r1, r2}
   15e38:	ldr	r3, [sp, #44]	; 0x2c
   15e3c:	str	ip, [r5]
   15e40:	stmib	r5, {r0, r1, r2}
   15e44:	mov	r0, r4
   15e48:	str	r3, [r5, #36]	; 0x24
   15e4c:	add	sp, sp, #52	; 0x34
   15e50:	pop	{r4, r5, r6, r7, pc}
   15e54:	bl	116e0 <abort@plt>
   15e58:	svcmi	0x00800000
   15e5c:	push	{r4, r5, r6, lr}
   15e60:	subs	r6, r1, #0
   15e64:	sub	sp, sp, #8
   15e68:	beq	15f9c <__assert_fail@plt+0x4898>
   15e6c:	mov	r4, r2
   15e70:	mov	r3, #0
   15e74:	add	r2, sp, #4
   15e78:	mov	r5, r0
   15e7c:	bl	1526c <__assert_fail@plt+0x3b68>
   15e80:	cmp	r0, #0
   15e84:	beq	15ea0 <__assert_fail@plt+0x479c>
   15e88:	cmp	r4, #0
   15e8c:	moveq	r0, r4
   15e90:	strne	r0, [r4]
   15e94:	movne	r0, #0
   15e98:	add	sp, sp, #8
   15e9c:	pop	{r4, r5, r6, pc}
   15ea0:	vldr	s15, [r5, #8]
   15ea4:	ldr	r3, [r5, #20]
   15ea8:	vldr	s14, [r5, #12]
   15eac:	vcvt.f32.u32	s15, s15
   15eb0:	vldr	s13, [r3, #8]
   15eb4:	vcvt.f32.u32	s14, s14
   15eb8:	vmul.f32	s15, s15, s13
   15ebc:	vcmpe.f32	s14, s15
   15ec0:	vmrs	APSR_nzcv, fpscr
   15ec4:	bgt	15f14 <__assert_fail@plt+0x4810>
   15ec8:	ldr	r2, [sp, #4]
   15ecc:	ldr	r3, [r2]
   15ed0:	cmp	r3, #0
   15ed4:	beq	15fa0 <__assert_fail@plt+0x489c>
   15ed8:	ldr	r3, [r5, #36]	; 0x24
   15edc:	cmp	r3, #0
   15ee0:	beq	15fc4 <__assert_fail@plt+0x48c0>
   15ee4:	ldr	r1, [r3, #4]
   15ee8:	str	r1, [r5, #36]	; 0x24
   15eec:	ldr	r1, [r5, #16]
   15ef0:	ldr	r0, [r2, #4]
   15ef4:	add	r1, r1, #1
   15ef8:	str	r0, [r3, #4]
   15efc:	str	r6, [r3]
   15f00:	mov	r0, #1
   15f04:	str	r3, [r2, #4]
   15f08:	str	r1, [r5, #16]
   15f0c:	add	sp, sp, #8
   15f10:	pop	{r4, r5, r6, pc}
   15f14:	add	r0, r5, #20
   15f18:	bl	15368 <__assert_fail@plt+0x3c64>
   15f1c:	vldr	s15, [r5, #8]
   15f20:	ldr	r3, [r5, #20]
   15f24:	vldr	s14, [r5, #12]
   15f28:	vcvt.f32.u32	s15, s15
   15f2c:	vldr	s13, [r3, #8]
   15f30:	vcvt.f32.u32	s14, s14
   15f34:	vmul.f32	s12, s13, s15
   15f38:	vcmpe.f32	s14, s12
   15f3c:	vmrs	APSR_nzcv, fpscr
   15f40:	ble	15ec8 <__assert_fail@plt+0x47c4>
   15f44:	vldr	s14, [r3, #12]
   15f48:	ldrb	r2, [r3, #16]
   15f4c:	vmul.f32	s15, s15, s14
   15f50:	cmp	r2, #0
   15f54:	vldr	s14, [pc, #132]	; 15fe0 <__assert_fail@plt+0x48dc>
   15f58:	vmuleq.f32	s15, s15, s13
   15f5c:	vcmpe.f32	s15, s14
   15f60:	vmrs	APSR_nzcv, fpscr
   15f64:	bge	15fd8 <__assert_fail@plt+0x48d4>
   15f68:	vcvt.u32.f32	s15, s15
   15f6c:	mov	r0, r5
   15f70:	vmov	r1, s15
   15f74:	bl	15cc8 <__assert_fail@plt+0x45c4>
   15f78:	cmp	r0, #0
   15f7c:	beq	15fd8 <__assert_fail@plt+0x48d4>
   15f80:	add	r2, sp, #4
   15f84:	mov	r3, #0
   15f88:	mov	r1, r6
   15f8c:	mov	r0, r5
   15f90:	bl	1526c <__assert_fail@plt+0x3b68>
   15f94:	cmp	r0, #0
   15f98:	beq	15ec8 <__assert_fail@plt+0x47c4>
   15f9c:	bl	116e0 <abort@plt>
   15fa0:	ldr	r1, [r5, #16]
   15fa4:	ldr	r3, [r5, #12]
   15fa8:	add	r1, r1, #1
   15fac:	add	r3, r3, #1
   15fb0:	str	r6, [r2]
   15fb4:	mov	r0, #1
   15fb8:	str	r1, [r5, #16]
   15fbc:	str	r3, [r5, #12]
   15fc0:	b	15e98 <__assert_fail@plt+0x4794>
   15fc4:	mov	r0, #8
   15fc8:	bl	1b14c <__assert_fail@plt+0x9a48>
   15fcc:	subs	r3, r0, #0
   15fd0:	ldrne	r2, [sp, #4]
   15fd4:	bne	15eec <__assert_fail@plt+0x47e8>
   15fd8:	mvn	r0, #0
   15fdc:	b	15e98 <__assert_fail@plt+0x4794>
   15fe0:	svcmi	0x00800000
   15fe4:	push	{r4, lr}
   15fe8:	sub	sp, sp, #8
   15fec:	add	r2, sp, #4
   15ff0:	mov	r4, r1
   15ff4:	bl	15e5c <__assert_fail@plt+0x4758>
   15ff8:	cmn	r0, #1
   15ffc:	beq	16014 <__assert_fail@plt+0x4910>
   16000:	cmp	r0, #0
   16004:	movne	r0, r4
   16008:	ldreq	r0, [sp, #4]
   1600c:	add	sp, sp, #8
   16010:	pop	{r4, pc}
   16014:	mov	r0, #0
   16018:	b	1600c <__assert_fail@plt+0x4908>
   1601c:	push	{r4, r5, r6, lr}
   16020:	sub	sp, sp, #8
   16024:	mov	r3, #1
   16028:	add	r2, sp, #4
   1602c:	mov	r4, r0
   16030:	bl	1526c <__assert_fail@plt+0x3b68>
   16034:	subs	r5, r0, #0
   16038:	beq	16058 <__assert_fail@plt+0x4954>
   1603c:	ldr	r2, [sp, #4]
   16040:	ldr	r3, [r4, #16]
   16044:	ldr	r2, [r2]
   16048:	sub	r3, r3, #1
   1604c:	cmp	r2, #0
   16050:	str	r3, [r4, #16]
   16054:	beq	16064 <__assert_fail@plt+0x4960>
   16058:	mov	r0, r5
   1605c:	add	sp, sp, #8
   16060:	pop	{r4, r5, r6, pc}
   16064:	vldr	s15, [r4, #8]
   16068:	ldr	r3, [r4, #12]
   1606c:	ldr	r2, [r4, #20]
   16070:	sub	r3, r3, #1
   16074:	vcvt.f32.u32	s14, s15
   16078:	vldr	s13, [r2]
   1607c:	vmov	s15, r3
   16080:	str	r3, [r4, #12]
   16084:	vcvt.f32.u32	s15, s15
   16088:	vmul.f32	s14, s14, s13
   1608c:	vcmpe.f32	s15, s14
   16090:	vmrs	APSR_nzcv, fpscr
   16094:	bpl	16058 <__assert_fail@plt+0x4954>
   16098:	add	r0, r4, #20
   1609c:	bl	15368 <__assert_fail@plt+0x3c64>
   160a0:	vldr	s15, [r4, #8]
   160a4:	ldr	r3, [r4, #20]
   160a8:	vldr	s13, [r4, #12]
   160ac:	vcvt.f32.u32	s15, s15
   160b0:	vldr	s14, [r3]
   160b4:	vcvt.f32.u32	s13, s13
   160b8:	vmul.f32	s14, s15, s14
   160bc:	vcmpe.f32	s13, s14
   160c0:	vmrs	APSR_nzcv, fpscr
   160c4:	bpl	16058 <__assert_fail@plt+0x4954>
   160c8:	ldrb	r2, [r3, #16]
   160cc:	mov	r0, r4
   160d0:	cmp	r2, #0
   160d4:	vldreq	s13, [r3, #4]
   160d8:	vldrne	s14, [r3, #4]
   160dc:	vldreq	s14, [r3, #8]
   160e0:	vmuleq.f32	s15, s15, s13
   160e4:	vmul.f32	s15, s15, s14
   160e8:	vcvt.u32.f32	s15, s15
   160ec:	vmov	r1, s15
   160f0:	bl	15cc8 <__assert_fail@plt+0x45c4>
   160f4:	cmp	r0, #0
   160f8:	bne	16058 <__assert_fail@plt+0x4954>
   160fc:	ldr	r0, [r4, #36]	; 0x24
   16100:	cmp	r0, #0
   16104:	beq	16118 <__assert_fail@plt+0x4a14>
   16108:	ldr	r6, [r0, #4]
   1610c:	bl	14fa4 <__assert_fail@plt+0x38a0>
   16110:	subs	r0, r6, #0
   16114:	bne	16108 <__assert_fail@plt+0x4a04>
   16118:	mov	r3, #0
   1611c:	str	r3, [r4, #36]	; 0x24
   16120:	b	16058 <__assert_fail@plt+0x4954>
   16124:	b	1601c <__assert_fail@plt+0x4918>
   16128:	push	{r4, r5, r6, lr}
   1612c:	mov	r4, r0
   16130:	ldr	r0, [r0]
   16134:	mov	r6, r1
   16138:	bl	1c454 <__assert_fail@plt+0xad50>
   1613c:	ldrd	r4, [r4, #8]
   16140:	mov	r2, r6
   16144:	mov	r3, #0
   16148:	eor	r4, r4, r0
   1614c:	mov	r0, r4
   16150:	mov	r1, r5
   16154:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   16158:	mov	r0, r2
   1615c:	pop	{r4, r5, r6, pc}
   16160:	ldrd	r2, [r1, #8]
   16164:	push	{r4, r5, r6, lr}
   16168:	ldrd	r4, [r0, #8]
   1616c:	cmp	r5, r3
   16170:	cmpeq	r4, r2
   16174:	beq	16180 <__assert_fail@plt+0x4a7c>
   16178:	mov	r0, #0
   1617c:	pop	{r4, r5, r6, pc}
   16180:	ldrd	r4, [r0, #16]
   16184:	ldrd	r2, [r1, #16]
   16188:	cmp	r5, r3
   1618c:	cmpeq	r4, r2
   16190:	bne	16178 <__assert_fail@plt+0x4a74>
   16194:	ldr	r1, [r1]
   16198:	ldr	r0, [r0]
   1619c:	bl	11320 <strcmp@plt>
   161a0:	clz	r0, r0
   161a4:	lsr	r0, r0, #5
   161a8:	pop	{r4, r5, r6, pc}
   161ac:	push	{r4, lr}
   161b0:	mov	r4, r0
   161b4:	ldr	r0, [r0]
   161b8:	bl	14fa4 <__assert_fail@plt+0x38a0>
   161bc:	mov	r0, r4
   161c0:	pop	{r4, lr}
   161c4:	b	14fa4 <__assert_fail@plt+0x38a0>
   161c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161cc:	vpush	{d8-d9}
   161d0:	mov	r8, r3
   161d4:	ands	r3, r3, #32
   161d8:	mov	r4, r2
   161dc:	sub	sp, sp, #124	; 0x7c
   161e0:	mov	r7, r1
   161e4:	str	r3, [sp, #20]
   161e8:	moveq	r3, #1000	; 0x3e8
   161ec:	movne	r3, #1024	; 0x400
   161f0:	str	r2, [sp, #12]
   161f4:	str	r3, [sp, #24]
   161f8:	mov	r6, r0
   161fc:	bl	1165c <localeconv@plt>
   16200:	add	r3, r4, #644	; 0x284
   16204:	str	r3, [sp, #36]	; 0x24
   16208:	add	r3, r3, #3
   1620c:	str	r3, [sp, #8]
   16210:	ldr	r9, [r0]
   16214:	mov	r5, r0
   16218:	mov	r0, r9
   1621c:	bl	1153c <strlen@plt>
   16220:	ldr	fp, [r5, #4]
   16224:	ldr	r3, [pc, #1036]	; 16638 <__assert_fail@plt+0x4f34>
   16228:	sub	r2, r0, #1
   1622c:	cmp	r2, #16
   16230:	movcc	r3, r9
   16234:	mov	r4, r0
   16238:	mov	r0, fp
   1623c:	movcs	r4, #1
   16240:	str	r3, [sp, #32]
   16244:	bl	1153c <strlen@plt>
   16248:	ldr	r3, [pc, #1004]	; 1663c <__assert_fail@plt+0x4f38>
   1624c:	and	r2, r8, #3
   16250:	str	r2, [sp, #16]
   16254:	ldr	r9, [r5, #8]
   16258:	cmp	r0, #16
   1625c:	movhi	fp, r3
   16260:	ldrd	r0, [sp, #176]	; 0xb0
   16264:	ldrd	r2, [sp, #184]	; 0xb8
   16268:	str	fp, [sp, #28]
   1626c:	cmp	r3, r1
   16270:	cmpeq	r2, r0
   16274:	bhi	16460 <__assert_fail@plt+0x4d5c>
   16278:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   1627c:	orrs	r3, r2, r3
   16280:	bne	162c0 <__assert_fail@plt+0x4bbc>
   16284:	ldrd	r2, [sp, #184]	; 0xb8
   16288:	ldrd	r0, [sp, #176]	; 0xb0
   1628c:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   16290:	mov	r2, r0
   16294:	mul	r0, r0, r7
   16298:	umull	sl, fp, r2, r6
   1629c:	mla	r0, r6, r1, r0
   162a0:	mov	r3, r1
   162a4:	add	fp, r0, fp
   162a8:	mov	r1, fp
   162ac:	mov	r0, sl
   162b0:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   162b4:	cmp	r7, r1
   162b8:	cmpeq	r6, r0
   162bc:	beq	168cc <__assert_fail@plt+0x51c8>
   162c0:	ldrd	r0, [sp, #176]	; 0xb0
   162c4:	bl	1cf54 <__assert_fail@plt+0xb850>
   162c8:	vmov	d9, r0, r1
   162cc:	ldrd	r0, [sp, #184]	; 0xb8
   162d0:	bl	1cf54 <__assert_fail@plt+0xb850>
   162d4:	vmov	d7, r0, r1
   162d8:	mov	r0, r6
   162dc:	mov	r1, r7
   162e0:	vdiv.f64	d8, d9, d7
   162e4:	bl	1cf54 <__assert_fail@plt+0xb850>
   162e8:	ands	r6, r8, #16
   162ec:	vmov	d7, r0, r1
   162f0:	vmul.f64	d8, d8, d7
   162f4:	beq	16648 <__assert_fail@plt+0x4f44>
   162f8:	vldr	s15, [sp, #24]
   162fc:	mov	r5, #0
   16300:	vcvt.f64.s32	d6, s15
   16304:	vmov.f64	d7, d6
   16308:	vmov.f64	d5, d7
   1630c:	vmul.f64	d7, d7, d6
   16310:	add	r5, r5, #1
   16314:	vcmpe.f64	d8, d7
   16318:	vmrs	APSR_nzcv, fpscr
   1631c:	blt	16328 <__assert_fail@plt+0x4c24>
   16320:	cmp	r5, #8
   16324:	bne	16308 <__assert_fail@plt+0x4c04>
   16328:	ldr	sl, [sp, #16]
   1632c:	vdiv.f64	d9, d8, d5
   16330:	cmp	sl, #1
   16334:	beq	16774 <__assert_fail@plt+0x5070>
   16338:	vldr	d7, [pc, #744]	; 16628 <__assert_fail@plt+0x4f24>
   1633c:	vmov	r0, r1, d9
   16340:	vcmpe.f64	d9, d7
   16344:	vmrs	APSR_nzcv, fpscr
   16348:	bpl	16390 <__assert_fail@plt+0x4c8c>
   1634c:	bl	1d018 <__assert_fail@plt+0xb914>
   16350:	cmp	sl, #0
   16354:	mov	r6, r0
   16358:	mov	r7, r1
   1635c:	movne	r0, #0
   16360:	bne	1637c <__assert_fail@plt+0x4c78>
   16364:	bl	1cf54 <__assert_fail@plt+0xb850>
   16368:	vmov	d7, r0, r1
   1636c:	vcmp.f64	d7, d9
   16370:	vmrs	APSR_nzcv, fpscr
   16374:	movne	r0, #1
   16378:	moveq	r0, #0
   1637c:	adds	r2, r6, r0
   16380:	adc	r3, r7, #0
   16384:	mov	r0, r2
   16388:	mov	r1, r3
   1638c:	bl	1cf54 <__assert_fail@plt+0xb850>
   16390:	ldr	r6, [sp, #12]
   16394:	strd	r0, [sp]
   16398:	ldr	r3, [pc, #672]	; 16640 <__assert_fail@plt+0x4f3c>
   1639c:	mvn	r2, #0
   163a0:	mov	r1, #1
   163a4:	mov	r0, r6
   163a8:	bl	11578 <__sprintf_chk@plt>
   163ac:	mov	r0, r6
   163b0:	bl	1153c <strlen@plt>
   163b4:	ldr	r3, [sp, #20]
   163b8:	add	r6, r4, #1
   163bc:	cmp	r3, #0
   163c0:	movne	r3, #1
   163c4:	moveq	r3, #2
   163c8:	add	r3, r3, r6
   163cc:	cmp	r0, r3
   163d0:	mov	r7, r0
   163d4:	bls	167bc <__assert_fail@plt+0x50b8>
   163d8:	vldr	d7, [pc, #592]	; 16630 <__assert_fail@plt+0x4f2c>
   163dc:	vmul.f64	d9, d9, d7
   163e0:	vldr	d7, [pc, #576]	; 16628 <__assert_fail@plt+0x4f24>
   163e4:	vcmpe.f64	d9, d7
   163e8:	vmrs	APSR_nzcv, fpscr
   163ec:	bpl	16428 <__assert_fail@plt+0x4d24>
   163f0:	vmov	r0, r1, d9
   163f4:	bl	1d018 <__assert_fail@plt+0xb914>
   163f8:	ldr	r3, [sp, #16]
   163fc:	cmp	r3, #0
   16400:	mov	r6, r0
   16404:	mov	r7, r1
   16408:	movne	r0, #0
   1640c:	beq	16a80 <__assert_fail@plt+0x537c>
   16410:	adds	r2, r6, r0
   16414:	adc	r3, r7, #0
   16418:	mov	r0, r2
   1641c:	mov	r1, r3
   16420:	bl	1cf54 <__assert_fail@plt+0xb850>
   16424:	vmov	d9, r0, r1
   16428:	vldr	d6, [pc, #512]	; 16630 <__assert_fail@plt+0x4f2c>
   1642c:	ldr	r4, [sp, #12]
   16430:	ldr	r3, [pc, #524]	; 16644 <__assert_fail@plt+0x4f40>
   16434:	mvn	r2, #0
   16438:	vdiv.f64	d7, d9, d6
   1643c:	mov	r1, #1
   16440:	mov	r0, r4
   16444:	mov	r6, #0
   16448:	vstr	d7, [sp]
   1644c:	bl	11578 <__sprintf_chk@plt>
   16450:	mov	r0, r4
   16454:	bl	1153c <strlen@plt>
   16458:	mov	r7, r0
   1645c:	b	16694 <__assert_fail@plt+0x4f90>
   16460:	ldrd	r2, [sp, #176]	; 0xb0
   16464:	orrs	r3, r2, r3
   16468:	beq	162c0 <__assert_fail@plt+0x4bbc>
   1646c:	ldrd	r2, [sp, #176]	; 0xb0
   16470:	ldrd	r0, [sp, #184]	; 0xb8
   16474:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   16478:	orrs	r3, r2, r3
   1647c:	bne	162c0 <__assert_fail@plt+0x4bbc>
   16480:	ldrd	r2, [sp, #176]	; 0xb0
   16484:	ldrd	r0, [sp, #184]	; 0xb8
   16488:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   1648c:	mov	sl, r0
   16490:	mov	fp, r1
   16494:	mov	r2, r0
   16498:	mov	r3, r1
   1649c:	mov	r0, r6
   164a0:	mov	r1, r7
   164a4:	strd	sl, [sp, #48]	; 0x30
   164a8:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   164ac:	mov	r1, #10
   164b0:	umull	sl, fp, r2, r1
   164b4:	mla	r3, r1, r3, fp
   164b8:	strd	sl, [sp, #40]	; 0x28
   164bc:	ldrd	sl, [sp, #48]	; 0x30
   164c0:	str	r3, [sp, #44]	; 0x2c
   164c4:	ldrd	r0, [sp, #40]	; 0x28
   164c8:	mov	r2, sl
   164cc:	mov	r3, fp
   164d0:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   164d4:	mov	r0, r6
   164d8:	mov	r1, r7
   164dc:	lsls	r6, r2, #1
   164e0:	adc	r7, r3, r3
   164e4:	mov	r2, sl
   164e8:	mov	r3, fp
   164ec:	strd	r6, [sp, #56]	; 0x38
   164f0:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   164f4:	mov	r7, fp
   164f8:	mov	r6, sl
   164fc:	mov	r3, r7
   16500:	mov	r2, r6
   16504:	strd	r6, [sp, #48]	; 0x30
   16508:	mov	sl, r0
   1650c:	mov	fp, r1
   16510:	ldrd	r0, [sp, #40]	; 0x28
   16514:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   16518:	ldrd	r2, [sp, #48]	; 0x30
   1651c:	mov	r7, r0
   16520:	ldrd	r0, [sp, #56]	; 0x38
   16524:	cmp	r3, r1
   16528:	cmpeq	r2, r0
   1652c:	bls	16a5c <__assert_fail@plt+0x5358>
   16530:	mov	r3, r0
   16534:	orrs	r3, r3, r1
   16538:	movne	r3, #1
   1653c:	moveq	r3, #0
   16540:	str	r3, [sp, #48]	; 0x30
   16544:	ands	r3, r8, #16
   16548:	str	r3, [sp, #56]	; 0x38
   1654c:	beq	16928 <__assert_fail@plt+0x5224>
   16550:	ldr	r1, [sp, #24]
   16554:	mov	r3, #0
   16558:	mov	r2, r1
   1655c:	cmp	fp, r3
   16560:	cmpeq	sl, r1
   16564:	strd	r2, [sp, #40]	; 0x28
   16568:	bcc	16a70 <__assert_fail@plt+0x536c>
   1656c:	mov	r5, #0
   16570:	mov	r6, r7
   16574:	str	r9, [sp, #64]	; 0x40
   16578:	str	r8, [sp, #68]	; 0x44
   1657c:	mov	r7, r1
   16580:	mov	r8, r5
   16584:	mov	r9, r4
   16588:	ldr	r5, [sp, #48]	; 0x30
   1658c:	b	165b8 <__assert_fail@plt+0x4eb4>
   16590:	cmn	r5, r4
   16594:	movne	r5, #1
   16598:	moveq	r5, #0
   1659c:	ldrd	r2, [sp, #40]	; 0x28
   165a0:	add	r8, r8, #1
   165a4:	cmp	r3, fp
   165a8:	cmpeq	r2, sl
   165ac:	bhi	16acc <__assert_fail@plt+0x53c8>
   165b0:	cmp	r8, #8
   165b4:	beq	16aa8 <__assert_fail@plt+0x53a4>
   165b8:	mov	r0, sl
   165bc:	mov	r1, fp
   165c0:	ldrd	r2, [sp, #40]	; 0x28
   165c4:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   165c8:	mov	r1, r7
   165cc:	asr	r4, r5, #1
   165d0:	add	r2, r2, r2, lsl #2
   165d4:	add	r6, r6, r2, lsl #1
   165d8:	mov	r0, r6
   165dc:	bl	1c9b0 <__assert_fail@plt+0xb2ac>
   165e0:	ldrd	r2, [sp, #40]	; 0x28
   165e4:	mov	r0, sl
   165e8:	add	r4, r4, r1, lsl #1
   165ec:	mov	r1, fp
   165f0:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   165f4:	mov	sl, r0
   165f8:	mov	fp, r1
   165fc:	mov	r0, r6
   16600:	mov	r1, r7
   16604:	bl	1c7c4 <__assert_fail@plt+0xb0c0>
   16608:	cmp	r7, r4
   1660c:	add	r3, r5, r4
   16610:	mov	r6, r0
   16614:	bhi	16590 <__assert_fail@plt+0x4e8c>
   16618:	cmp	r7, r3
   1661c:	movcs	r5, #2
   16620:	movcc	r5, #3
   16624:	b	1659c <__assert_fail@plt+0x4e98>
   16628:	andeq	r0, r0, r0
   1662c:	mvnsmi	r0, #0
   16630:	andeq	r0, r0, r0
   16634:	eormi	r0, r4, r0
   16638:	andeq	lr, r1, r0, ror #4
   1663c:	andeq	lr, r1, r4, ror #6
   16640:	andeq	lr, r1, r8, lsr #7
   16644:	andeq	lr, r1, r0, lsr #7
   16648:	and	r7, r8, #3
   1664c:	cmp	r7, #1
   16650:	beq	16664 <__assert_fail@plt+0x4f60>
   16654:	vldr	d7, [pc, #996]	; 16a40 <__assert_fail@plt+0x533c>
   16658:	vcmpe.f64	d8, d7
   1665c:	vmrs	APSR_nzcv, fpscr
   16660:	bmi	16888 <__assert_fail@plt+0x5184>
   16664:	ldr	r4, [sp, #12]
   16668:	ldr	r3, [pc, #992]	; 16a50 <__assert_fail@plt+0x534c>
   1666c:	mvn	r2, #0
   16670:	mov	r1, #1
   16674:	vstr	d8, [sp]
   16678:	mov	r0, r4
   1667c:	bl	11578 <__sprintf_chk@plt>
   16680:	mov	r0, r4
   16684:	bl	1153c <strlen@plt>
   16688:	mov	r6, #0
   1668c:	mvn	r5, #0
   16690:	mov	r7, r0
   16694:	ldr	r3, [sp, #8]
   16698:	mov	r2, r7
   1669c:	sub	r4, r3, r7
   166a0:	mov	r0, r4
   166a4:	ldr	r1, [sp, #12]
   166a8:	bl	11344 <memmove@plt>
   166ac:	sub	r7, r7, r6
   166b0:	add	r7, r4, r7
   166b4:	tst	r8, #4
   166b8:	bne	167f0 <__assert_fail@plt+0x50ec>
   166bc:	tst	r8, #128	; 0x80
   166c0:	beq	16758 <__assert_fail@plt+0x5054>
   166c4:	cmn	r5, #1
   166c8:	beq	168dc <__assert_fail@plt+0x51d8>
   166cc:	and	r3, r8, #256	; 0x100
   166d0:	orrs	r2, r5, r3
   166d4:	beq	16758 <__assert_fail@plt+0x5054>
   166d8:	tst	r8, #64	; 0x40
   166dc:	ldrne	r1, [sp, #12]
   166e0:	addne	r2, r1, #648	; 0x288
   166e4:	strne	r2, [sp, #8]
   166e8:	movne	r2, #32
   166ec:	strbne	r2, [r1, #647]	; 0x287
   166f0:	cmp	r5, #0
   166f4:	beq	16c0c <__assert_fail@plt+0x5508>
   166f8:	ldr	r2, [sp, #20]
   166fc:	ldr	r0, [sp, #8]
   16700:	cmp	r2, #0
   16704:	cmpeq	r5, #1
   16708:	ldr	r2, [sp, #8]
   1670c:	ldrne	r1, [pc, #832]	; 16a54 <__assert_fail@plt+0x5350>
   16710:	moveq	r1, #107	; 0x6b
   16714:	add	r2, r2, #1
   16718:	ldrbne	r1, [r1, r5]
   1671c:	cmp	r3, #0
   16720:	streq	r2, [sp, #8]
   16724:	strb	r1, [r0]
   16728:	beq	16758 <__assert_fail@plt+0x5054>
   1672c:	ldr	r3, [sp, #20]
   16730:	cmp	r5, #0
   16734:	cmpne	r3, #0
   16738:	movne	r2, r0
   1673c:	movne	r3, #105	; 0x69
   16740:	strbne	r3, [r2, #1]
   16744:	addne	r2, r2, #2
   16748:	mov	r3, #66	; 0x42
   1674c:	strb	r3, [r2]
   16750:	add	r3, r2, #1
   16754:	str	r3, [sp, #8]
   16758:	ldr	r2, [sp, #8]
   1675c:	mov	r3, #0
   16760:	mov	r0, r4
   16764:	strb	r3, [r2]
   16768:	add	sp, sp, #124	; 0x7c
   1676c:	vpop	{d8-d9}
   16770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16774:	ldr	r6, [sp, #12]
   16778:	ldr	r3, [pc, #728]	; 16a58 <__assert_fail@plt+0x5354>
   1677c:	mvn	r2, #0
   16780:	ldr	r1, [sp, #16]
   16784:	mov	r0, r6
   16788:	vstr	d9, [sp]
   1678c:	bl	11578 <__sprintf_chk@plt>
   16790:	mov	r0, r6
   16794:	bl	1153c <strlen@plt>
   16798:	ldr	r3, [sp, #20]
   1679c:	add	r6, r4, #1
   167a0:	cmp	r3, #0
   167a4:	movne	r3, #1
   167a8:	moveq	r3, #2
   167ac:	add	r3, r3, r6
   167b0:	cmp	r3, r0
   167b4:	mov	r7, r0
   167b8:	bcc	16a9c <__assert_fail@plt+0x5398>
   167bc:	tst	r8, #8
   167c0:	beq	16694 <__assert_fail@plt+0x4f90>
   167c4:	ldr	r3, [sp, #12]
   167c8:	add	r3, r3, r7
   167cc:	ldrb	r3, [r3, #-1]
   167d0:	cmp	r3, #48	; 0x30
   167d4:	bne	16694 <__assert_fail@plt+0x4f90>
   167d8:	vldr	d7, [pc, #616]	; 16a48 <__assert_fail@plt+0x5344>
   167dc:	ldr	r3, [sp, #16]
   167e0:	cmp	r3, #1
   167e4:	vmul.f64	d9, d9, d7
   167e8:	beq	16428 <__assert_fail@plt+0x4d24>
   167ec:	b	163e0 <__assert_fail@plt+0x4cdc>
   167f0:	ldr	r0, [sp, #28]
   167f4:	bl	1153c <strlen@plt>
   167f8:	sub	r6, r7, r4
   167fc:	mov	r1, r4
   16800:	mov	r2, r6
   16804:	mov	r3, #41	; 0x29
   16808:	mvn	sl, #0
   1680c:	mov	fp, r0
   16810:	add	r0, sp, #76	; 0x4c
   16814:	bl	11434 <__memcpy_chk@plt>
   16818:	ldr	r4, [sp, #28]
   1681c:	b	16824 <__assert_fail@plt+0x5120>
   16820:	bl	11374 <memcpy@plt>
   16824:	ldrb	r3, [r9]
   16828:	cmp	r3, #0
   1682c:	beq	16840 <__assert_fail@plt+0x513c>
   16830:	cmp	r3, #255	; 0xff
   16834:	movne	sl, r3
   16838:	moveq	sl, r6
   1683c:	add	r9, r9, #1
   16840:	cmp	sl, r6
   16844:	movcs	sl, r6
   16848:	sub	r3, r7, sl
   1684c:	sub	r6, r6, sl
   16850:	add	r2, sp, #76	; 0x4c
   16854:	add	r1, r2, r6
   16858:	mov	r0, r3
   1685c:	mov	r2, sl
   16860:	sub	r7, r3, fp
   16864:	bl	11374 <memcpy@plt>
   16868:	cmp	r6, #0
   1686c:	mov	r2, fp
   16870:	mov	r1, r4
   16874:	mov	r3, r0
   16878:	mov	r0, r7
   1687c:	bne	16820 <__assert_fail@plt+0x511c>
   16880:	mov	r4, r3
   16884:	b	166bc <__assert_fail@plt+0x4fb8>
   16888:	vmov	r0, r1, d8
   1688c:	bl	1d018 <__assert_fail@plt+0xb914>
   16890:	cmp	r7, #0
   16894:	mov	r4, r0
   16898:	mov	r5, r1
   1689c:	bne	168b8 <__assert_fail@plt+0x51b4>
   168a0:	bl	1cf54 <__assert_fail@plt+0xb850>
   168a4:	vmov	d7, r0, r1
   168a8:	vcmp.f64	d7, d8
   168ac:	vmrs	APSR_nzcv, fpscr
   168b0:	movne	r6, #1
   168b4:	moveq	r6, #0
   168b8:	adds	r0, r4, r6
   168bc:	adc	r1, r5, #0
   168c0:	bl	1cf54 <__assert_fail@plt+0xb850>
   168c4:	vmov	d8, r0, r1
   168c8:	b	16664 <__assert_fail@plt+0x4f60>
   168cc:	mov	r3, #0
   168d0:	str	r3, [sp, #48]	; 0x30
   168d4:	mov	r7, r3
   168d8:	b	16544 <__assert_fail@plt+0x4e40>
   168dc:	ldrd	r2, [sp, #184]	; 0xb8
   168e0:	cmp	r3, #0
   168e4:	cmpeq	r2, #1
   168e8:	bls	16b80 <__assert_fail@plt+0x547c>
   168ec:	ldr	r1, [sp, #24]
   168f0:	ldrd	r6, [sp, #184]	; 0xb8
   168f4:	mov	r5, #1
   168f8:	mov	r2, #1
   168fc:	mov	r3, #0
   16900:	mul	r0, r1, r3
   16904:	umull	r2, r3, r2, r1
   16908:	add	r3, r0, r3
   1690c:	cmp	r7, r3
   16910:	cmpeq	r6, r2
   16914:	bls	166cc <__assert_fail@plt+0x4fc8>
   16918:	add	r5, r5, #1
   1691c:	cmp	r5, #8
   16920:	bne	16900 <__assert_fail@plt+0x51fc>
   16924:	b	166cc <__assert_fail@plt+0x4fc8>
   16928:	ldr	r3, [sp, #8]
   1692c:	mvn	r5, #0
   16930:	str	r3, [sp, #36]	; 0x24
   16934:	ldr	r3, [sp, #16]
   16938:	cmp	r3, #1
   1693c:	beq	169c0 <__assert_fail@plt+0x52bc>
   16940:	ldr	r3, [sp, #16]
   16944:	cmp	r3, #0
   16948:	bne	169e8 <__assert_fail@plt+0x52e4>
   1694c:	ldr	r3, [sp, #48]	; 0x30
   16950:	add	r7, r7, r3
   16954:	cmp	r7, #0
   16958:	ble	169e8 <__assert_fail@plt+0x52e4>
   1695c:	ldr	r3, [sp, #56]	; 0x38
   16960:	adds	sl, sl, #1
   16964:	adc	fp, fp, #0
   16968:	cmp	r3, #0
   1696c:	beq	169e8 <__assert_fail@plt+0x52e4>
   16970:	mov	r3, #0
   16974:	ldr	r2, [sp, #24]
   16978:	cmp	r3, fp
   1697c:	cmpeq	r2, sl
   16980:	moveq	r3, #1
   16984:	movne	r3, #0
   16988:	cmp	r5, #7
   1698c:	movgt	r3, #0
   16990:	andle	r3, r3, #1
   16994:	cmp	r3, #0
   16998:	beq	169e8 <__assert_fail@plt+0x52e4>
   1699c:	tst	r8, #8
   169a0:	add	r5, r5, #1
   169a4:	beq	16be0 <__assert_fail@plt+0x54dc>
   169a8:	ldr	r2, [sp, #36]	; 0x24
   169ac:	mov	r3, #49	; 0x31
   169b0:	sub	r4, r2, #1
   169b4:	strb	r3, [r2, #-1]
   169b8:	mov	r7, r2
   169bc:	b	166b4 <__assert_fail@plt+0x4fb0>
   169c0:	ldr	r1, [sp, #48]	; 0x30
   169c4:	and	r2, sl, #1
   169c8:	adds	r2, r2, r1
   169cc:	mov	r3, #0
   169d0:	adc	r3, r3, r1, asr #31
   169d4:	orr	r2, r2, r3
   169d8:	cmp	r2, #0
   169dc:	addne	r7, r7, #1
   169e0:	cmp	r7, #5
   169e4:	bgt	1695c <__assert_fail@plt+0x5258>
   169e8:	ldr	r4, [sp, #36]	; 0x24
   169ec:	mov	r6, #10
   169f0:	mov	r7, #0
   169f4:	mov	r0, sl
   169f8:	mov	r1, fp
   169fc:	mov	r2, r6
   16a00:	mov	r3, r7
   16a04:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   16a08:	mov	r0, sl
   16a0c:	mov	r1, fp
   16a10:	mov	r3, r7
   16a14:	add	r2, r2, #48	; 0x30
   16a18:	strb	r2, [r4, #-1]!
   16a1c:	mov	r2, r6
   16a20:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   16a24:	mov	sl, r0
   16a28:	mov	fp, r1
   16a2c:	orrs	r3, sl, fp
   16a30:	bne	169f4 <__assert_fail@plt+0x52f0>
   16a34:	ldr	r7, [sp, #36]	; 0x24
   16a38:	b	166b4 <__assert_fail@plt+0x4fb0>
   16a3c:	nop			; (mov r0, r0)
   16a40:	andeq	r0, r0, r0
   16a44:	mvnsmi	r0, #0
   16a48:	andeq	r0, r0, r0
   16a4c:	eormi	r0, r4, r0
   16a50:	andeq	lr, r1, r0, lsr #7
   16a54:	andeq	lr, r1, r0, lsl #7
   16a58:	andeq	lr, r1, r8, lsr #7
   16a5c:	movcc	r3, #3
   16a60:	strcc	r3, [sp, #48]	; 0x30
   16a64:	movcs	r3, #2
   16a68:	strcs	r3, [sp, #48]	; 0x30
   16a6c:	b	16544 <__assert_fail@plt+0x4e40>
   16a70:	ldr	r3, [sp, #8]
   16a74:	mov	r5, #0
   16a78:	str	r3, [sp, #36]	; 0x24
   16a7c:	b	16934 <__assert_fail@plt+0x5230>
   16a80:	bl	1cf54 <__assert_fail@plt+0xb850>
   16a84:	vmov	d7, r0, r1
   16a88:	vcmp.f64	d7, d9
   16a8c:	vmrs	APSR_nzcv, fpscr
   16a90:	movne	r0, #1
   16a94:	moveq	r0, #0
   16a98:	b	16410 <__assert_fail@plt+0x4d0c>
   16a9c:	vldr	d7, [pc, #380]	; 16c20 <__assert_fail@plt+0x551c>
   16aa0:	vmul.f64	d9, d9, d7
   16aa4:	b	16428 <__assert_fail@plt+0x4d24>
   16aa8:	ldr	r3, [sp, #8]
   16aac:	str	r5, [sp, #48]	; 0x30
   16ab0:	mov	r4, r9
   16ab4:	mov	r5, r8
   16ab8:	mov	r7, r6
   16abc:	ldr	r9, [sp, #64]	; 0x40
   16ac0:	ldr	r8, [sp, #68]	; 0x44
   16ac4:	str	r3, [sp, #36]	; 0x24
   16ac8:	b	16934 <__assert_fail@plt+0x5230>
   16acc:	cmp	fp, #0
   16ad0:	cmpeq	sl, #9
   16ad4:	str	r5, [sp, #48]	; 0x30
   16ad8:	mov	r4, r9
   16adc:	mov	r5, r8
   16ae0:	mov	r7, r6
   16ae4:	ldr	r9, [sp, #64]	; 0x40
   16ae8:	ldr	r8, [sp, #68]	; 0x44
   16aec:	bhi	16bd4 <__assert_fail@plt+0x54d0>
   16af0:	ldr	r3, [sp, #16]
   16af4:	cmp	r3, #1
   16af8:	beq	16b88 <__assert_fail@plt+0x5484>
   16afc:	ldr	r2, [sp, #48]	; 0x30
   16b00:	ldr	r3, [sp, #16]
   16b04:	cmp	r2, #0
   16b08:	clz	r3, r3
   16b0c:	lsr	r3, r3, #5
   16b10:	moveq	r3, #0
   16b14:	cmp	r3, #0
   16b18:	beq	16b68 <__assert_fail@plt+0x5464>
   16b1c:	add	r7, r7, #1
   16b20:	cmp	r7, #10
   16b24:	beq	16bb4 <__assert_fail@plt+0x54b0>
   16b28:	add	r7, r7, #48	; 0x30
   16b2c:	uxtb	r3, r7
   16b30:	ldr	r2, [sp, #36]	; 0x24
   16b34:	ldr	r1, [sp, #12]
   16b38:	add	r7, r2, #2
   16b3c:	sub	r2, r7, r4
   16b40:	str	r2, [sp, #36]	; 0x24
   16b44:	strb	r3, [r1, #646]	; 0x286
   16b48:	mov	r0, r2
   16b4c:	mov	r3, #0
   16b50:	mov	r2, r4
   16b54:	ldr	r1, [sp, #32]
   16b58:	mov	r7, r3
   16b5c:	str	r3, [sp, #48]	; 0x30
   16b60:	bl	11374 <memcpy@plt>
   16b64:	b	16934 <__assert_fail@plt+0x5230>
   16b68:	cmp	r7, #0
   16b6c:	bne	16b28 <__assert_fail@plt+0x5424>
   16b70:	tst	r8, #8
   16b74:	bne	16ba4 <__assert_fail@plt+0x54a0>
   16b78:	mov	r3, #48	; 0x30
   16b7c:	b	16b30 <__assert_fail@plt+0x542c>
   16b80:	mov	r5, #0
   16b84:	b	166cc <__assert_fail@plt+0x4fc8>
   16b88:	ldr	r2, [sp, #48]	; 0x30
   16b8c:	and	r3, r6, #1
   16b90:	add	r3, r3, r2
   16b94:	cmp	r3, #2
   16b98:	movle	r3, #0
   16b9c:	movgt	r3, #1
   16ba0:	b	16b14 <__assert_fail@plt+0x5410>
   16ba4:	ldr	r3, [sp, #8]
   16ba8:	mov	r7, #0
   16bac:	str	r3, [sp, #36]	; 0x24
   16bb0:	b	16934 <__assert_fail@plt+0x5230>
   16bb4:	adds	sl, sl, #1
   16bb8:	adc	fp, fp, #0
   16bbc:	cmp	fp, #0
   16bc0:	mov	r3, #0
   16bc4:	cmpeq	sl, #10
   16bc8:	str	r3, [sp, #48]	; 0x30
   16bcc:	moveq	r7, r3
   16bd0:	bne	16b70 <__assert_fail@plt+0x546c>
   16bd4:	ldr	r3, [sp, #8]
   16bd8:	str	r3, [sp, #36]	; 0x24
   16bdc:	b	16934 <__assert_fail@plt+0x5230>
   16be0:	ldr	r1, [sp, #36]	; 0x24
   16be4:	mvn	r3, r4
   16be8:	add	r3, r1, r3
   16bec:	mov	r2, #48	; 0x30
   16bf0:	strb	r2, [r1, #-1]
   16bf4:	mov	r0, r3
   16bf8:	ldr	r1, [sp, #32]
   16bfc:	mov	r2, r4
   16c00:	str	r3, [sp, #36]	; 0x24
   16c04:	bl	11374 <memcpy@plt>
   16c08:	b	169a8 <__assert_fail@plt+0x52a4>
   16c0c:	cmp	r3, #0
   16c10:	ldrne	r2, [sp, #8]
   16c14:	bne	16748 <__assert_fail@plt+0x5044>
   16c18:	b	16758 <__assert_fail@plt+0x5054>
   16c1c:	nop			; (mov r0, r0)
   16c20:	andeq	r0, r0, r0
   16c24:	eormi	r0, r4, r0
   16c28:	push	{r4, r5, r6, r7, r8, lr}
   16c2c:	subs	r4, r0, #0
   16c30:	sub	sp, sp, #16
   16c34:	mov	r8, r1
   16c38:	mov	r7, r2
   16c3c:	beq	16d34 <__assert_fail@plt+0x5630>
   16c40:	ldrb	r3, [r4]
   16c44:	ldr	r5, [pc, #360]	; 16db4 <__assert_fail@plt+0x56b0>
   16c48:	cmp	r3, #39	; 0x27
   16c4c:	addeq	r4, r4, #1
   16c50:	mov	r3, #4
   16c54:	add	r2, r5, #12
   16c58:	add	r1, r5, #20
   16c5c:	mov	r0, r4
   16c60:	moveq	r6, #4
   16c64:	movne	r6, #0
   16c68:	bl	1ba4c <__assert_fail@plt+0xa348>
   16c6c:	cmp	r0, #0
   16c70:	blt	16cd0 <__assert_fail@plt+0x55cc>
   16c74:	add	r5, r5, r0, lsl #2
   16c78:	mov	r1, #0
   16c7c:	ldr	ip, [r5, #12]
   16c80:	mov	r0, #1
   16c84:	mov	r2, r0
   16c88:	orr	r6, r6, ip
   16c8c:	mov	r3, r1
   16c90:	str	r0, [r7]
   16c94:	str	r1, [r7, #4]
   16c98:	mov	r0, #0
   16c9c:	str	r6, [r8]
   16ca0:	orrs	r3, r2, r3
   16ca4:	bne	16cc8 <__assert_fail@plt+0x55c4>
   16ca8:	ldr	r0, [pc, #264]	; 16db8 <__assert_fail@plt+0x56b4>
   16cac:	bl	114c4 <getenv@plt>
   16cb0:	mov	r3, #0
   16cb4:	cmp	r0, #0
   16cb8:	movne	r2, #512	; 0x200
   16cbc:	moveq	r2, #1024	; 0x400
   16cc0:	mov	r0, #4
   16cc4:	strd	r2, [r7]
   16cc8:	add	sp, sp, #16
   16ccc:	pop	{r4, r5, r6, r7, r8, pc}
   16cd0:	ldr	r2, [pc, #228]	; 16dbc <__assert_fail@plt+0x56b8>
   16cd4:	mov	r3, r7
   16cd8:	str	r2, [sp]
   16cdc:	add	r1, sp, #12
   16ce0:	mov	r2, #0
   16ce4:	mov	r0, r4
   16ce8:	bl	1ab5c <__assert_fail@plt+0x9458>
   16cec:	cmp	r0, #0
   16cf0:	bne	16d78 <__assert_fail@plt+0x5674>
   16cf4:	ldrb	r3, [r4]
   16cf8:	sub	r3, r3, #48	; 0x30
   16cfc:	cmp	r3, #9
   16d00:	bls	16d2c <__assert_fail@plt+0x5628>
   16d04:	ldr	r2, [sp, #12]
   16d08:	cmp	r4, r2
   16d0c:	bne	16d1c <__assert_fail@plt+0x5618>
   16d10:	b	16d88 <__assert_fail@plt+0x5684>
   16d14:	cmp	r2, r4
   16d18:	beq	16d88 <__assert_fail@plt+0x5684>
   16d1c:	ldrb	r3, [r4, #1]!
   16d20:	sub	r3, r3, #48	; 0x30
   16d24:	cmp	r3, #9
   16d28:	bhi	16d14 <__assert_fail@plt+0x5610>
   16d2c:	ldrd	r2, [r7]
   16d30:	b	16c98 <__assert_fail@plt+0x5594>
   16d34:	ldr	r0, [pc, #132]	; 16dc0 <__assert_fail@plt+0x56bc>
   16d38:	bl	114c4 <getenv@plt>
   16d3c:	subs	r4, r0, #0
   16d40:	bne	16c40 <__assert_fail@plt+0x553c>
   16d44:	ldr	r0, [pc, #120]	; 16dc4 <__assert_fail@plt+0x56c0>
   16d48:	bl	114c4 <getenv@plt>
   16d4c:	subs	r4, r0, #0
   16d50:	bne	16c40 <__assert_fail@plt+0x553c>
   16d54:	ldr	r0, [pc, #92]	; 16db8 <__assert_fail@plt+0x56b4>
   16d58:	bl	114c4 <getenv@plt>
   16d5c:	mov	r3, #0
   16d60:	mov	r6, #0
   16d64:	cmp	r0, #0
   16d68:	movne	r2, #512	; 0x200
   16d6c:	moveq	r2, #1024	; 0x400
   16d70:	strd	r2, [r7]
   16d74:	b	16c98 <__assert_fail@plt+0x5594>
   16d78:	mov	r3, #0
   16d7c:	str	r3, [r8]
   16d80:	ldrd	r2, [r7]
   16d84:	b	16ca0 <__assert_fail@plt+0x559c>
   16d88:	ldrb	r3, [r2, #-1]
   16d8c:	cmp	r3, #66	; 0x42
   16d90:	orrne	r6, r6, #128	; 0x80
   16d94:	beq	16da0 <__assert_fail@plt+0x569c>
   16d98:	orr	r6, r6, #32
   16d9c:	b	16d2c <__assert_fail@plt+0x5628>
   16da0:	ldrb	r3, [r2, #-2]
   16da4:	orr	r6, r6, #384	; 0x180
   16da8:	cmp	r3, #105	; 0x69
   16dac:	bne	16d2c <__assert_fail@plt+0x5628>
   16db0:	b	16d98 <__assert_fail@plt+0x5694>
   16db4:	andeq	lr, r1, r0, lsl #7
   16db8:	andeq	sp, r1, ip, lsl pc
   16dbc:	andeq	lr, r1, r8, asr #7
   16dc0:			; <UNDEFINED> instruction: 0x0001e3b0
   16dc4:			; <UNDEFINED> instruction: 0x0001e3bc
   16dc8:	push	{r4, r5, r6, r8, r9, lr}
   16dcc:	mov	r4, r0
   16dd0:	mov	r5, r1
   16dd4:	add	r6, r2, #20
   16dd8:	mov	r8, #10
   16ddc:	mov	r9, #0
   16de0:	mov	r3, #0
   16de4:	strb	r3, [r2, #20]
   16de8:	mov	r0, r4
   16dec:	mov	r1, r5
   16df0:	mov	r2, r8
   16df4:	mov	r3, r9
   16df8:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   16dfc:	mov	r0, r4
   16e00:	mov	r1, r5
   16e04:	mov	r3, r9
   16e08:	add	r2, r2, #48	; 0x30
   16e0c:	strb	r2, [r6, #-1]!
   16e10:	mov	r2, r8
   16e14:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   16e18:	mov	r4, r0
   16e1c:	mov	r5, r1
   16e20:	orrs	r3, r4, r5
   16e24:	bne	16de8 <__assert_fail@plt+0x56e4>
   16e28:	mov	r0, r6
   16e2c:	pop	{r4, r5, r6, r8, r9, pc}
   16e30:	push	{r4, r5, r6, r7, lr}
   16e34:	subs	r6, r0, #0
   16e38:	sub	sp, sp, #12
   16e3c:	addeq	r6, sp, #4
   16e40:	mov	r0, r6
   16e44:	mov	r5, r2
   16e48:	mov	r7, r1
   16e4c:	bl	1147c <mbrtowc@plt>
   16e50:	cmp	r5, #0
   16e54:	cmnne	r0, #3
   16e58:	mov	r4, r0
   16e5c:	bls	16e78 <__assert_fail@plt+0x5774>
   16e60:	mov	r0, #0
   16e64:	bl	1c3f8 <__assert_fail@plt+0xacf4>
   16e68:	cmp	r0, #0
   16e6c:	moveq	r4, #1
   16e70:	ldrbeq	r3, [r7]
   16e74:	streq	r3, [r6]
   16e78:	mov	r0, r4
   16e7c:	add	sp, sp, #12
   16e80:	pop	{r4, r5, r6, r7, pc}
   16e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e88:	sub	sp, sp, #12
   16e8c:	mov	r9, r3
   16e90:	mov	r4, r1
   16e94:	str	r2, [sp]
   16e98:	mov	fp, r0
   16e9c:	bl	1153c <strlen@plt>
   16ea0:	ldr	r3, [sp, #52]	; 0x34
   16ea4:	ands	r5, r3, #2
   16ea8:	mov	r7, r0
   16eac:	beq	17030 <__assert_fail@plt+0x592c>
   16eb0:	mov	r8, #0
   16eb4:	mov	sl, r8
   16eb8:	mov	r5, r7
   16ebc:	ldr	r2, [r9]
   16ec0:	cmp	r5, r2
   16ec4:	movhi	r7, r2
   16ec8:	movhi	r6, #0
   16ecc:	bls	16ff0 <__assert_fail@plt+0x58ec>
   16ed0:	ldr	r3, [sp, #48]	; 0x30
   16ed4:	str	r2, [r9]
   16ed8:	cmp	r3, #0
   16edc:	beq	17014 <__assert_fail@plt+0x5910>
   16ee0:	cmp	r3, #1
   16ee4:	moveq	r9, #0
   16ee8:	bne	17020 <__assert_fail@plt+0x591c>
   16eec:	ldr	r3, [sp, #52]	; 0x34
   16ef0:	tst	r3, #4
   16ef4:	movne	r6, #0
   16ef8:	tst	r3, #8
   16efc:	ldr	r3, [sp]
   16f00:	movne	r9, #0
   16f04:	cmp	r3, #0
   16f08:	beq	16fa4 <__assert_fail@plt+0x58a0>
   16f0c:	sub	r5, r3, #1
   16f10:	add	r5, r4, r5
   16f14:	cmp	r6, #0
   16f18:	cmpne	r4, r5
   16f1c:	sub	r3, r6, #1
   16f20:	bcs	16f48 <__assert_fail@plt+0x5844>
   16f24:	mov	r1, #32
   16f28:	strb	r1, [r4], #1
   16f2c:	cmp	r3, #0
   16f30:	cmpne	r5, r4
   16f34:	movhi	r2, #1
   16f38:	movls	r2, #0
   16f3c:	cmp	r2, #0
   16f40:	sub	r3, r3, #1
   16f44:	bne	16f28 <__assert_fail@plt+0x5824>
   16f48:	sub	r2, r5, r4
   16f4c:	cmp	r2, r7
   16f50:	mov	r3, #0
   16f54:	movcs	r2, r7
   16f58:	strb	r3, [r4]
   16f5c:	mov	r1, fp
   16f60:	mov	r0, r4
   16f64:	bl	11500 <mempcpy@plt>
   16f68:	sub	r3, r9, #1
   16f6c:	cmp	r9, #0
   16f70:	cmpne	r5, r0
   16f74:	bls	16f9c <__assert_fail@plt+0x5898>
   16f78:	mov	r1, #32
   16f7c:	strb	r1, [r0], #1
   16f80:	cmp	r3, #0
   16f84:	cmpne	r5, r0
   16f88:	movhi	r2, #1
   16f8c:	movls	r2, #0
   16f90:	cmp	r2, #0
   16f94:	sub	r3, r3, #1
   16f98:	bne	16f7c <__assert_fail@plt+0x5878>
   16f9c:	mov	r3, #0
   16fa0:	strb	r3, [r0]
   16fa4:	add	r6, r6, r7
   16fa8:	add	r9, r6, r9
   16fac:	mov	r0, r8
   16fb0:	bl	14fa4 <__assert_fail@plt+0x38a0>
   16fb4:	mov	r0, sl
   16fb8:	bl	14fa4 <__assert_fail@plt+0x38a0>
   16fbc:	mov	r0, r9
   16fc0:	add	sp, sp, #12
   16fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fc8:	mov	r1, sl
   16fcc:	mov	r0, r8
   16fd0:	bl	11620 <wcswidth@plt>
   16fd4:	mov	r5, r0
   16fd8:	ldr	r2, [r9]
   16fdc:	cmp	r2, r5
   16fe0:	addcc	r3, r7, #1
   16fe4:	strcc	r3, [sp, #4]
   16fe8:	bcc	1711c <__assert_fail@plt+0x5a18>
   16fec:	mov	sl, #0
   16ff0:	ldr	r3, [sp, #48]	; 0x30
   16ff4:	cmp	r5, r2
   16ff8:	movcs	r2, r5
   16ffc:	subcc	r6, r2, r5
   17000:	movcs	r6, #0
   17004:	movcc	r2, r5
   17008:	cmp	r3, #0
   1700c:	str	r2, [r9]
   17010:	bne	16ee0 <__assert_fail@plt+0x57dc>
   17014:	mov	r9, r6
   17018:	ldr	r6, [sp, #48]	; 0x30
   1701c:	b	16eec <__assert_fail@plt+0x57e8>
   17020:	lsr	r9, r6, #1
   17024:	and	r6, r6, #1
   17028:	add	r6, r6, r9
   1702c:	b	16eec <__assert_fail@plt+0x57e8>
   17030:	bl	11458 <__ctype_get_mb_cur_max@plt>
   17034:	cmp	r0, #1
   17038:	bls	16eb0 <__assert_fail@plt+0x57ac>
   1703c:	mov	r2, r5
   17040:	mov	r1, fp
   17044:	mov	r0, r5
   17048:	bl	11668 <mbstowcs@plt>
   1704c:	cmn	r0, #1
   17050:	bne	17070 <__assert_fail@plt+0x596c>
   17054:	ldr	r3, [sp, #52]	; 0x34
   17058:	tst	r3, #1
   1705c:	bne	16eb0 <__assert_fail@plt+0x57ac>
   17060:	mov	r8, #0
   17064:	mov	sl, r8
   17068:	mvn	r9, #0
   1706c:	b	16fac <__assert_fail@plt+0x58a8>
   17070:	add	sl, r0, #1
   17074:	lsl	r6, sl, #2
   17078:	mov	r0, r6
   1707c:	bl	1b14c <__assert_fail@plt+0x9a48>
   17080:	subs	r8, r0, #0
   17084:	beq	171c0 <__assert_fail@plt+0x5abc>
   17088:	mov	r2, sl
   1708c:	mov	r1, fp
   17090:	bl	11668 <mbstowcs@plt>
   17094:	cmp	r0, #0
   17098:	beq	171a0 <__assert_fail@plt+0x5a9c>
   1709c:	add	r6, r8, r6
   170a0:	str	r5, [r6, #-4]
   170a4:	ldr	r6, [r8]
   170a8:	cmp	r6, #0
   170ac:	beq	16fc8 <__assert_fail@plt+0x58c4>
   170b0:	mov	r3, r5
   170b4:	mov	r0, r6
   170b8:	mov	r5, r8
   170bc:	mov	r6, r3
   170c0:	bl	11410 <iswprint@plt>
   170c4:	cmp	r0, #0
   170c8:	moveq	r6, #1
   170cc:	ldreq	r3, [pc, #272]	; 171e4 <__assert_fail@plt+0x5ae0>
   170d0:	streq	r3, [r5]
   170d4:	ldr	r0, [r5, #4]!
   170d8:	cmp	r0, #0
   170dc:	bne	170c0 <__assert_fail@plt+0x59bc>
   170e0:	str	r6, [sp, #4]
   170e4:	mov	r1, sl
   170e8:	mov	r6, r0
   170ec:	mov	r0, r8
   170f0:	bl	11620 <wcswidth@plt>
   170f4:	ldr	r3, [sp, #4]
   170f8:	cmp	r3, #0
   170fc:	mov	r5, r0
   17100:	beq	16fd8 <__assert_fail@plt+0x58d4>
   17104:	mov	r2, r6
   17108:	mov	r0, r6
   1710c:	mov	r1, r8
   17110:	bl	11488 <wcstombs@plt>
   17114:	add	r3, r0, #1
   17118:	str	r3, [sp, #4]
   1711c:	ldr	r0, [sp, #4]
   17120:	bl	1b14c <__assert_fail@plt+0x9a48>
   17124:	subs	sl, r0, #0
   17128:	beq	171ac <__assert_fail@plt+0x5aa8>
   1712c:	ldr	r0, [r8]
   17130:	ldr	r6, [r9]
   17134:	cmp	r0, #0
   17138:	beq	171d8 <__assert_fail@plt+0x5ad4>
   1713c:	mov	r7, r8
   17140:	mov	r5, #0
   17144:	mov	fp, #1
   17148:	b	1715c <__assert_fail@plt+0x5a58>
   1714c:	ldr	r0, [r7, #4]!
   17150:	mov	r5, r3
   17154:	cmp	r0, #0
   17158:	beq	1717c <__assert_fail@plt+0x5a78>
   1715c:	bl	11338 <wcwidth@plt>
   17160:	cmn	r0, #1
   17164:	moveq	r0, fp
   17168:	ldreq	r3, [pc, #116]	; 171e4 <__assert_fail@plt+0x5ae0>
   1716c:	streq	r3, [r7]
   17170:	add	r3, r0, r5
   17174:	cmp	r6, r3
   17178:	bcs	1714c <__assert_fail@plt+0x5a48>
   1717c:	mov	r0, #0
   17180:	str	r0, [r7]
   17184:	ldr	r2, [sp, #4]
   17188:	mov	r1, r8
   1718c:	mov	r0, sl
   17190:	bl	11488 <wcstombs@plt>
   17194:	mov	fp, sl
   17198:	mov	r7, r0
   1719c:	b	16ebc <__assert_fail@plt+0x57b8>
   171a0:	mov	sl, r0
   171a4:	mov	r5, r7
   171a8:	b	16ebc <__assert_fail@plt+0x57b8>
   171ac:	ldr	r3, [sp, #52]	; 0x34
   171b0:	tst	r3, #1
   171b4:	mvneq	r9, #0
   171b8:	beq	16fac <__assert_fail@plt+0x58a8>
   171bc:	b	16ebc <__assert_fail@plt+0x57b8>
   171c0:	ldr	r3, [sp, #52]	; 0x34
   171c4:	tst	r3, #1
   171c8:	beq	17060 <__assert_fail@plt+0x595c>
   171cc:	mov	r5, r7
   171d0:	mov	sl, r8
   171d4:	b	16ebc <__assert_fail@plt+0x57b8>
   171d8:	mov	r5, r0
   171dc:	mov	r7, r8
   171e0:	b	1717c <__assert_fail@plt+0x5a78>
   171e4:	strdeq	pc, [r0], -sp
   171e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171ec:	mov	r9, r0
   171f0:	ldr	r8, [r1]
   171f4:	sub	sp, sp, #12
   171f8:	mov	r6, r1
   171fc:	mov	fp, r2
   17200:	mov	sl, r3
   17204:	mov	r0, r8
   17208:	mov	r7, #0
   1720c:	add	r4, r0, #1
   17210:	mov	r1, r4
   17214:	mov	r0, r7
   17218:	bl	1b178 <__assert_fail@plt+0x9a74>
   1721c:	mov	r3, r6
   17220:	mov	r2, r4
   17224:	subs	r5, r0, #0
   17228:	mov	r1, r5
   1722c:	mov	r0, r9
   17230:	beq	17264 <__assert_fail@plt+0x5b60>
   17234:	str	r8, [r6]
   17238:	str	sl, [sp, #4]
   1723c:	str	fp, [sp]
   17240:	bl	16e84 <__assert_fail@plt+0x5780>
   17244:	cmn	r0, #1
   17248:	beq	17278 <__assert_fail@plt+0x5b74>
   1724c:	cmp	r4, r0
   17250:	mov	r7, r5
   17254:	bls	1720c <__assert_fail@plt+0x5b08>
   17258:	mov	r0, r5
   1725c:	add	sp, sp, #12
   17260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17264:	mov	r0, r7
   17268:	bl	14fa4 <__assert_fail@plt+0x38a0>
   1726c:	mov	r0, r5
   17270:	add	sp, sp, #12
   17274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17278:	mov	r0, r5
   1727c:	bl	14fa4 <__assert_fail@plt+0x38a0>
   17280:	mov	r5, #0
   17284:	mov	r0, r5
   17288:	add	sp, sp, #12
   1728c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17294:	sub	sp, sp, #20
   17298:	mov	r5, r0
   1729c:	add	r7, r0, r1
   172a0:	mov	sl, r2
   172a4:	bl	11458 <__ctype_get_mb_cur_max@plt>
   172a8:	cmp	r0, #1
   172ac:	bls	173ec <__assert_fail@plt+0x5ce8>
   172b0:	cmp	r5, r7
   172b4:	mov	r6, #0
   172b8:	bcs	173b4 <__assert_fail@plt+0x5cb0>
   172bc:	and	r9, sl, #2
   172c0:	mov	fp, r6
   172c4:	and	sl, sl, #1
   172c8:	mvn	r8, #-2147483648	; 0x80000000
   172cc:	b	172f4 <__assert_fail@plt+0x5bf0>
   172d0:	cmp	r3, #37	; 0x25
   172d4:	bcs	172e4 <__assert_fail@plt+0x5be0>
   172d8:	sub	r3, r3, #32
   172dc:	cmp	r3, #3
   172e0:	bhi	1731c <__assert_fail@plt+0x5c18>
   172e4:	add	r5, r5, #1
   172e8:	add	r6, r6, #1
   172ec:	cmp	r7, r5
   172f0:	bls	173b4 <__assert_fail@plt+0x5cb0>
   172f4:	ldrb	r3, [r5]
   172f8:	cmp	r3, #63	; 0x3f
   172fc:	bls	172d0 <__assert_fail@plt+0x5bcc>
   17300:	cmp	r3, #65	; 0x41
   17304:	bcc	1731c <__assert_fail@plt+0x5c18>
   17308:	cmp	r3, #95	; 0x5f
   1730c:	bls	172e4 <__assert_fail@plt+0x5be0>
   17310:	sub	r3, r3, #97	; 0x61
   17314:	cmp	r3, #29
   17318:	bls	172e4 <__assert_fail@plt+0x5be0>
   1731c:	str	fp, [sp, #8]
   17320:	str	fp, [sp, #12]
   17324:	b	17348 <__assert_fail@plt+0x5c44>
   17328:	cmp	r0, r3
   1732c:	bgt	173b0 <__assert_fail@plt+0x5cac>
   17330:	add	r6, r6, r0
   17334:	add	r0, sp, #8
   17338:	bl	1138c <mbsinit@plt>
   1733c:	add	r5, r5, r4
   17340:	cmp	r0, #0
   17344:	bne	172ec <__assert_fail@plt+0x5be8>
   17348:	add	r3, sp, #8
   1734c:	sub	r2, r7, r5
   17350:	mov	r1, r5
   17354:	add	r0, sp, #4
   17358:	bl	16e30 <__assert_fail@plt+0x572c>
   1735c:	cmn	r0, #1
   17360:	mov	r4, r0
   17364:	beq	173c0 <__assert_fail@plt+0x5cbc>
   17368:	cmn	r0, #2
   1736c:	beq	173d8 <__assert_fail@plt+0x5cd4>
   17370:	ldr	r0, [sp, #4]
   17374:	bl	11338 <wcwidth@plt>
   17378:	cmp	r4, #0
   1737c:	moveq	r4, #1
   17380:	sub	r3, r8, r6
   17384:	cmp	r0, #0
   17388:	bge	17328 <__assert_fail@plt+0x5c24>
   1738c:	cmp	r9, #0
   17390:	bne	173c8 <__assert_fail@plt+0x5cc4>
   17394:	ldr	r0, [sp, #4]
   17398:	bl	113ec <iswcntrl@plt>
   1739c:	cmp	r0, #0
   173a0:	bne	17334 <__assert_fail@plt+0x5c30>
   173a4:	cmn	r6, #-2147483647	; 0x80000001
   173a8:	add	r6, r6, #1
   173ac:	bne	17334 <__assert_fail@plt+0x5c30>
   173b0:	mvn	r6, #-2147483648	; 0x80000000
   173b4:	mov	r0, r6
   173b8:	add	sp, sp, #20
   173bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173c0:	cmp	sl, #0
   173c4:	beq	172e4 <__assert_fail@plt+0x5be0>
   173c8:	mvn	r6, #0
   173cc:	mov	r0, r6
   173d0:	add	sp, sp, #20
   173d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173d8:	cmp	sl, #0
   173dc:	bne	173c8 <__assert_fail@plt+0x5cc4>
   173e0:	add	r6, r6, #1
   173e4:	mov	r5, r7
   173e8:	b	172ec <__assert_fail@plt+0x5be8>
   173ec:	cmp	r5, r7
   173f0:	movcs	r6, #0
   173f4:	bcs	173b4 <__assert_fail@plt+0x5cb0>
   173f8:	bl	11518 <__ctype_b_loc@plt>
   173fc:	mov	r6, #0
   17400:	and	r2, sl, #2
   17404:	ldr	r1, [r0]
   17408:	ldrb	r3, [r5], #1
   1740c:	lsl	r3, r3, #1
   17410:	ldrh	r3, [r1, r3]
   17414:	tst	r3, #16384	; 0x4000
   17418:	bne	1742c <__assert_fail@plt+0x5d28>
   1741c:	cmp	r2, #0
   17420:	bne	173c8 <__assert_fail@plt+0x5cc4>
   17424:	tst	r3, #2
   17428:	bne	17438 <__assert_fail@plt+0x5d34>
   1742c:	cmn	r6, #-2147483647	; 0x80000001
   17430:	beq	173b4 <__assert_fail@plt+0x5cb0>
   17434:	add	r6, r6, #1
   17438:	cmp	r7, r5
   1743c:	bne	17408 <__assert_fail@plt+0x5d04>
   17440:	mov	r0, r6
   17444:	add	sp, sp, #20
   17448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1744c:	push	{r4, r5, r6, lr}
   17450:	mov	r5, r1
   17454:	mov	r4, r0
   17458:	bl	1153c <strlen@plt>
   1745c:	mov	r2, r5
   17460:	mov	r1, r0
   17464:	mov	r0, r4
   17468:	pop	{r4, r5, r6, lr}
   1746c:	b	17290 <__assert_fail@plt+0x5b8c>
   17470:	push	{r4, r5, r6, r7, r8, lr}
   17474:	mov	r4, r0
   17478:	bl	1153c <strlen@plt>
   1747c:	adds	r0, r0, #1
   17480:	popeq	{r4, r5, r6, r7, r8, pc}
   17484:	mov	r2, r4
   17488:	mov	r3, #0
   1748c:	b	174a4 <__assert_fail@plt+0x5da0>
   17490:	mov	r3, ip
   17494:	strb	r1, [r2]
   17498:	cmp	r0, r3
   1749c:	add	r2, r2, #1
   174a0:	bls	17514 <__assert_fail@plt+0x5e10>
   174a4:	ldrb	r1, [r4, r3]
   174a8:	add	ip, r3, #1
   174ac:	cmp	r1, #92	; 0x5c
   174b0:	bne	17490 <__assert_fail@plt+0x5d8c>
   174b4:	add	lr, r3, #4
   174b8:	cmp	r0, lr
   174bc:	bls	17490 <__assert_fail@plt+0x5d8c>
   174c0:	ldrb	r5, [r4, ip]
   174c4:	add	r3, r4, r3
   174c8:	sub	r5, r5, #48	; 0x30
   174cc:	uxtb	r6, r5
   174d0:	cmp	r6, #3
   174d4:	bhi	17490 <__assert_fail@plt+0x5d8c>
   174d8:	ldrb	r6, [r3, #2]
   174dc:	sub	r6, r6, #48	; 0x30
   174e0:	uxtb	r7, r6
   174e4:	cmp	r7, #7
   174e8:	bhi	17490 <__assert_fail@plt+0x5d8c>
   174ec:	ldrb	r7, [r3, #3]
   174f0:	mov	r3, lr
   174f4:	add	r5, r6, r5, lsl #3
   174f8:	sub	lr, r7, #48	; 0x30
   174fc:	uxtb	lr, lr
   17500:	cmp	lr, #7
   17504:	add	r5, lr, r5, lsl #3
   17508:	strbls	r5, [r2]
   1750c:	bls	17498 <__assert_fail@plt+0x5d94>
   17510:	b	17490 <__assert_fail@plt+0x5d8c>
   17514:	pop	{r4, r5, r6, r7, r8, pc}
   17518:	push	{r4, lr}
   1751c:	mov	r4, r0
   17520:	ldr	r0, [r0]
   17524:	bl	14fa4 <__assert_fail@plt+0x38a0>
   17528:	ldr	r0, [r4, #4]
   1752c:	bl	14fa4 <__assert_fail@plt+0x38a0>
   17530:	ldr	r0, [r4, #8]
   17534:	bl	14fa4 <__assert_fail@plt+0x38a0>
   17538:	ldrb	r3, [r4, #24]
   1753c:	tst	r3, #4
   17540:	beq	1754c <__assert_fail@plt+0x5e48>
   17544:	ldr	r0, [r4, #12]
   17548:	bl	14fa4 <__assert_fail@plt+0x38a0>
   1754c:	mov	r0, r4
   17550:	pop	{r4, lr}
   17554:	b	14fa4 <__assert_fail@plt+0x38a0>
   17558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1755c:	sub	sp, sp, #68	; 0x44
   17560:	ldr	r1, [pc, #1264]	; 17a58 <__assert_fail@plt+0x6354>
   17564:	ldr	r0, [pc, #1264]	; 17a5c <__assert_fail@plt+0x6358>
   17568:	bl	1168c <fopen64@plt>
   1756c:	subs	r7, r0, #0
   17570:	beq	17ae8 <__assert_fail@plt+0x63e4>
   17574:	add	sl, sp, #40	; 0x28
   17578:	ldr	r9, [pc, #1248]	; 17a60 <__assert_fail@plt+0x635c>
   1757c:	mov	r5, sl
   17580:	mov	r3, #0
   17584:	str	r3, [sp, #44]	; 0x2c
   17588:	str	r3, [sp, #48]	; 0x30
   1758c:	mov	r3, r7
   17590:	mov	r2, #10
   17594:	add	r1, sp, #48	; 0x30
   17598:	add	r0, sp, #44	; 0x2c
   1759c:	bl	11314 <__getdelim@plt>
   175a0:	cmn	r0, #1
   175a4:	beq	177f4 <__assert_fail@plt+0x60f0>
   175a8:	add	r3, sp, #60	; 0x3c
   175ac:	str	r3, [sp]
   175b0:	ldr	r0, [sp, #44]	; 0x2c
   175b4:	add	r3, sp, #56	; 0x38
   175b8:	add	r2, sp, #52	; 0x34
   175bc:	mov	r1, r9
   175c0:	bl	11650 <sscanf@plt>
   175c4:	sub	r0, r0, #2
   175c8:	cmp	r0, #1
   175cc:	bhi	1758c <__assert_fail@plt+0x5e88>
   175d0:	ldr	r3, [sp, #60]	; 0x3c
   175d4:	ldr	sl, [sp, #44]	; 0x2c
   175d8:	mov	r1, #32
   175dc:	add	sl, sl, r3
   175e0:	mov	r0, sl
   175e4:	bl	11548 <strchr@plt>
   175e8:	subs	r6, r0, #0
   175ec:	beq	1758c <__assert_fail@plt+0x5e88>
   175f0:	mov	r8, #0
   175f4:	strb	r8, [r6], #1
   175f8:	mov	r1, #32
   175fc:	mov	r0, r6
   17600:	bl	11548 <strchr@plt>
   17604:	cmp	r0, #0
   17608:	beq	1758c <__assert_fail@plt+0x5e88>
   1760c:	ldr	r1, [pc, #1104]	; 17a64 <__assert_fail@plt+0x6360>
   17610:	strb	r8, [r0], #1
   17614:	bl	1b69c <__assert_fail@plt+0x9f98>
   17618:	cmp	r0, #0
   1761c:	beq	1758c <__assert_fail@plt+0x5e88>
   17620:	add	fp, r0, #3
   17624:	mov	r0, fp
   17628:	mov	r1, #32
   1762c:	bl	11548 <strchr@plt>
   17630:	subs	r3, r0, #0
   17634:	beq	1758c <__assert_fail@plt+0x5e88>
   17638:	strb	r8, [r3], #1
   1763c:	mov	r1, #32
   17640:	mov	r0, r3
   17644:	str	r3, [sp, #32]
   17648:	bl	11548 <strchr@plt>
   1764c:	cmp	r0, #0
   17650:	beq	1758c <__assert_fail@plt+0x5e88>
   17654:	ldr	r3, [sp, #32]
   17658:	strb	r8, [r0]
   1765c:	mov	r0, r3
   17660:	bl	17470 <__assert_fail@plt+0x5d6c>
   17664:	mov	r0, r6
   17668:	bl	17470 <__assert_fail@plt+0x5d6c>
   1766c:	mov	r0, sl
   17670:	bl	17470 <__assert_fail@plt+0x5d6c>
   17674:	mov	r0, fp
   17678:	bl	17470 <__assert_fail@plt+0x5d6c>
   1767c:	mov	r0, #32
   17680:	bl	1a458 <__assert_fail@plt+0x8d54>
   17684:	ldr	r3, [sp, #32]
   17688:	mov	r4, r0
   1768c:	mov	r0, r3
   17690:	bl	1a984 <__assert_fail@plt+0x9280>
   17694:	str	r8, [sp, #12]
   17698:	str	r8, [sp, #20]
   1769c:	str	r0, [r4]
   176a0:	mov	r0, r6
   176a4:	bl	1a984 <__assert_fail@plt+0x9280>
   176a8:	str	r0, [r4, #4]
   176ac:	mov	r0, sl
   176b0:	bl	1a984 <__assert_fail@plt+0x9280>
   176b4:	ldr	sl, [pc, #940]	; 17a68 <__assert_fail@plt+0x6364>
   176b8:	str	r0, [r4, #8]
   176bc:	mov	r0, fp
   176c0:	bl	1a984 <__assert_fail@plt+0x9280>
   176c4:	ldr	r3, [sp, #52]	; 0x34
   176c8:	mov	fp, #0
   176cc:	str	r3, [sp, #28]
   176d0:	lsr	r2, r3, #24
   176d4:	lsl	r3, r3, #8
   176d8:	str	r2, [sp, #12]
   176dc:	str	r3, [sp, #8]
   176e0:	ldrd	r2, [sp, #8]
   176e4:	str	r8, [sp, #24]
   176e8:	ldr	r1, [sp, #56]	; 0x38
   176ec:	and	r2, r2, sl
   176f0:	and	r3, r3, fp
   176f4:	ldr	fp, [pc, #880]	; 17a6c <__assert_fail@plt+0x6368>
   176f8:	strd	r2, [sp, #32]
   176fc:	ldrd	r2, [sp, #24]
   17700:	mov	sl, #0
   17704:	lsr	ip, r1, #20
   17708:	and	sl, sl, r2
   1770c:	and	fp, fp, r3
   17710:	mov	r2, sl
   17714:	mov	r3, fp
   17718:	ldrd	sl, [sp, #32]
   1771c:	str	ip, [sp, #20]
   17720:	ldrb	ip, [r4, #24]
   17724:	orr	sl, sl, r2
   17728:	orr	fp, fp, r3
   1772c:	lsl	r3, r1, #12
   17730:	uxtb	r1, r1
   17734:	orr	sl, sl, r1
   17738:	str	r3, [sp, #16]
   1773c:	strd	sl, [sp, #32]
   17740:	add	r3, pc, #776	; 0x308
   17744:	ldrd	r2, [r3]
   17748:	ldrd	sl, [sp, #16]
   1774c:	orr	ip, ip, #4
   17750:	strb	ip, [r4, #24]
   17754:	and	sl, sl, r2
   17758:	and	fp, fp, r3
   1775c:	mov	r2, sl
   17760:	mov	r3, fp
   17764:	ldrd	sl, [sp, #32]
   17768:	ldr	r1, [pc, #780]	; 17a7c <__assert_fail@plt+0x6378>
   1776c:	str	r0, [r4, #12]
   17770:	orr	sl, sl, r2
   17774:	orr	fp, fp, r3
   17778:	mov	r2, sl
   1777c:	mov	r3, fp
   17780:	mov	r6, r0
   17784:	strd	r2, [r4, #16]
   17788:	bl	11320 <strcmp@plt>
   1778c:	cmp	r0, r8
   17790:	beq	177a8 <__assert_fail@plt+0x60a4>
   17794:	ldr	r1, [pc, #740]	; 17a80 <__assert_fail@plt+0x637c>
   17798:	mov	r0, r6
   1779c:	bl	11320 <strcmp@plt>
   177a0:	cmp	r0, r8
   177a4:	bne	17830 <__assert_fail@plt+0x612c>
   177a8:	mov	r0, #1
   177ac:	ldrb	r3, [r4, #24]
   177b0:	ldr	r8, [r4]
   177b4:	mov	r1, #58	; 0x3a
   177b8:	bic	r3, r3, #1
   177bc:	orr	r3, r0, r3
   177c0:	strb	r3, [r4, #24]
   177c4:	mov	r0, r8
   177c8:	bl	11548 <strchr@plt>
   177cc:	cmp	r0, #0
   177d0:	beq	17924 <__assert_fail@plt+0x6220>
   177d4:	mov	r3, #1
   177d8:	ldrb	r0, [r4, #24]
   177dc:	bic	r0, r0, #2
   177e0:	orr	r0, r0, r3, lsl #1
   177e4:	strb	r0, [r4, #24]
   177e8:	str	r4, [r5]
   177ec:	add	r5, r4, #28
   177f0:	b	1758c <__assert_fail@plt+0x5e88>
   177f4:	ldr	r0, [sp, #44]	; 0x2c
   177f8:	bl	14fa4 <__assert_fail@plt+0x38a0>
   177fc:	ldr	r3, [r7]
   17800:	mov	sl, r5
   17804:	tst	r3, #32
   17808:	bne	179fc <__assert_fail@plt+0x62f8>
   1780c:	mov	r0, r7
   17810:	bl	1c220 <__assert_fail@plt+0xab1c>
   17814:	cmn	r0, #1
   17818:	beq	17dcc <__assert_fail@plt+0x66c8>
   1781c:	mov	r3, #0
   17820:	str	r3, [sl]
   17824:	ldr	r0, [sp, #40]	; 0x28
   17828:	add	sp, sp, #68	; 0x44
   1782c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17830:	ldr	r1, [pc, #588]	; 17a84 <__assert_fail@plt+0x6380>
   17834:	mov	r0, r6
   17838:	bl	11320 <strcmp@plt>
   1783c:	cmp	r0, r8
   17840:	beq	177a8 <__assert_fail@plt+0x60a4>
   17844:	ldr	r1, [pc, #572]	; 17a88 <__assert_fail@plt+0x6384>
   17848:	mov	r0, r6
   1784c:	bl	11320 <strcmp@plt>
   17850:	cmp	r0, r8
   17854:	beq	177a8 <__assert_fail@plt+0x60a4>
   17858:	ldr	r1, [pc, #556]	; 17a8c <__assert_fail@plt+0x6388>
   1785c:	mov	r0, r6
   17860:	bl	11320 <strcmp@plt>
   17864:	cmp	r0, r8
   17868:	beq	177a8 <__assert_fail@plt+0x60a4>
   1786c:	ldr	r1, [pc, #540]	; 17a90 <__assert_fail@plt+0x638c>
   17870:	mov	r0, r6
   17874:	bl	11320 <strcmp@plt>
   17878:	cmp	r0, r8
   1787c:	beq	177a8 <__assert_fail@plt+0x60a4>
   17880:	ldr	r1, [pc, #524]	; 17a94 <__assert_fail@plt+0x6390>
   17884:	mov	r0, r6
   17888:	bl	11320 <strcmp@plt>
   1788c:	cmp	r0, r8
   17890:	beq	177a8 <__assert_fail@plt+0x60a4>
   17894:	ldr	r1, [pc, #508]	; 17a98 <__assert_fail@plt+0x6394>
   17898:	mov	r0, r6
   1789c:	bl	11320 <strcmp@plt>
   178a0:	cmp	r0, r8
   178a4:	beq	177a8 <__assert_fail@plt+0x60a4>
   178a8:	ldr	r1, [pc, #492]	; 17a9c <__assert_fail@plt+0x6398>
   178ac:	mov	r0, r6
   178b0:	bl	11320 <strcmp@plt>
   178b4:	cmp	r0, r8
   178b8:	beq	177a8 <__assert_fail@plt+0x60a4>
   178bc:	ldr	r1, [pc, #476]	; 17aa0 <__assert_fail@plt+0x639c>
   178c0:	mov	r0, r6
   178c4:	bl	11320 <strcmp@plt>
   178c8:	cmp	r0, r8
   178cc:	beq	177a8 <__assert_fail@plt+0x60a4>
   178d0:	ldr	r1, [pc, #460]	; 17aa4 <__assert_fail@plt+0x63a0>
   178d4:	mov	r0, r6
   178d8:	bl	11320 <strcmp@plt>
   178dc:	cmp	r0, r8
   178e0:	beq	177a8 <__assert_fail@plt+0x60a4>
   178e4:	ldr	r1, [pc, #444]	; 17aa8 <__assert_fail@plt+0x63a4>
   178e8:	mov	r0, r6
   178ec:	bl	11320 <strcmp@plt>
   178f0:	cmp	r0, r8
   178f4:	beq	177a8 <__assert_fail@plt+0x60a4>
   178f8:	ldr	r1, [pc, #428]	; 17aac <__assert_fail@plt+0x63a8>
   178fc:	mov	r0, r6
   17900:	bl	11320 <strcmp@plt>
   17904:	cmp	r0, r8
   17908:	beq	177a8 <__assert_fail@plt+0x60a4>
   1790c:	ldr	r1, [pc, #412]	; 17ab0 <__assert_fail@plt+0x63ac>
   17910:	mov	r0, r6
   17914:	bl	11320 <strcmp@plt>
   17918:	clz	r0, r0
   1791c:	lsr	r0, r0, #5
   17920:	b	177ac <__assert_fail@plt+0x60a8>
   17924:	ldrb	r3, [r8]
   17928:	cmp	r3, #47	; 0x2f
   1792c:	beq	17ddc <__assert_fail@plt+0x66d8>
   17930:	ldr	r1, [pc, #380]	; 17ab4 <__assert_fail@plt+0x63b0>
   17934:	mov	r0, r6
   17938:	bl	11320 <strcmp@plt>
   1793c:	cmp	r0, #0
   17940:	beq	177d4 <__assert_fail@plt+0x60d0>
   17944:	ldr	r1, [pc, #364]	; 17ab8 <__assert_fail@plt+0x63b4>
   17948:	mov	r0, r6
   1794c:	bl	11320 <strcmp@plt>
   17950:	cmp	r0, #0
   17954:	beq	177d4 <__assert_fail@plt+0x60d0>
   17958:	ldr	r1, [pc, #348]	; 17abc <__assert_fail@plt+0x63b8>
   1795c:	mov	r0, r6
   17960:	bl	11320 <strcmp@plt>
   17964:	cmp	r0, #0
   17968:	beq	177d4 <__assert_fail@plt+0x60d0>
   1796c:	ldr	r1, [pc, #332]	; 17ac0 <__assert_fail@plt+0x63bc>
   17970:	mov	r0, r6
   17974:	bl	11320 <strcmp@plt>
   17978:	cmp	r0, #0
   1797c:	beq	177d4 <__assert_fail@plt+0x60d0>
   17980:	ldr	r1, [pc, #316]	; 17ac4 <__assert_fail@plt+0x63c0>
   17984:	mov	r0, r6
   17988:	bl	11320 <strcmp@plt>
   1798c:	cmp	r0, #0
   17990:	beq	177d4 <__assert_fail@plt+0x60d0>
   17994:	ldr	r1, [pc, #300]	; 17ac8 <__assert_fail@plt+0x63c4>
   17998:	mov	r0, r6
   1799c:	bl	11320 <strcmp@plt>
   179a0:	cmp	r0, #0
   179a4:	beq	177d4 <__assert_fail@plt+0x60d0>
   179a8:	ldr	r1, [pc, #284]	; 17acc <__assert_fail@plt+0x63c8>
   179ac:	mov	r0, r6
   179b0:	bl	11320 <strcmp@plt>
   179b4:	cmp	r0, #0
   179b8:	beq	177d4 <__assert_fail@plt+0x60d0>
   179bc:	ldr	r1, [pc, #268]	; 17ad0 <__assert_fail@plt+0x63cc>
   179c0:	mov	r0, r6
   179c4:	bl	11320 <strcmp@plt>
   179c8:	cmp	r0, #0
   179cc:	beq	177d4 <__assert_fail@plt+0x60d0>
   179d0:	mov	r0, r6
   179d4:	ldr	r1, [pc, #248]	; 17ad4 <__assert_fail@plt+0x63d0>
   179d8:	bl	11320 <strcmp@plt>
   179dc:	cmp	r0, #0
   179e0:	beq	177d4 <__assert_fail@plt+0x60d0>
   179e4:	mov	r1, r8
   179e8:	ldr	r0, [pc, #232]	; 17ad8 <__assert_fail@plt+0x63d4>
   179ec:	bl	11320 <strcmp@plt>
   179f0:	clz	r3, r0
   179f4:	lsr	r3, r3, #5
   179f8:	b	177d8 <__assert_fail@plt+0x60d4>
   179fc:	bl	1156c <__errno_location@plt>
   17a00:	mov	r5, r0
   17a04:	mov	r0, r7
   17a08:	ldr	r6, [r5]
   17a0c:	bl	1c220 <__assert_fail@plt+0xab1c>
   17a10:	str	r6, [r5]
   17a14:	mov	r3, #0
   17a18:	str	r3, [sl]
   17a1c:	ldr	r0, [sp, #40]	; 0x28
   17a20:	cmp	r0, r3
   17a24:	beq	17a3c <__assert_fail@plt+0x6338>
   17a28:	ldr	r4, [r0, #28]
   17a2c:	bl	17518 <__assert_fail@plt+0x5e14>
   17a30:	subs	r0, r4, #0
   17a34:	str	r4, [sp, #40]	; 0x28
   17a38:	bne	17a28 <__assert_fail@plt+0x6324>
   17a3c:	mov	r0, #0
   17a40:	str	r6, [r5]
   17a44:	add	sp, sp, #68	; 0x44
   17a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a4c:	nop			; (mov r0, r0)
   17a50:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   17a54:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17a58:	andeq	lr, r1, r8, ror r4
   17a5c:	ldrdeq	lr, [r1], -ip
   17a60:	strdeq	lr, [r1], -r4
   17a64:	andeq	lr, r1, r8, lsl #8
   17a68:	andeq	pc, pc, r0, lsl #30
   17a6c:			; <UNDEFINED> instruction: 0xfffff000
   17a70:	andeq	lr, r1, ip, ror #9
   17a74:	strdeq	lr, [r1], -r0
   17a78:	strdeq	lr, [r1], -ip
   17a7c:	andeq	lr, r1, ip, lsl #8
   17a80:	andeq	lr, r1, r4, lsl r4
   17a84:	andeq	lr, r1, ip, lsl r4
   17a88:	andeq	lr, r1, r4, lsr #8
   17a8c:	andeq	lr, r1, ip, lsr #8
   17a90:	andeq	lr, r1, r4, lsr r4
   17a94:	andeq	lr, r1, ip, lsr r4
   17a98:	andeq	lr, r1, r8, asr #8
   17a9c:	andeq	lr, r1, r0, asr r4
   17aa0:	andeq	lr, r1, ip, asr r4
   17aa4:	andeq	lr, r1, r4, ror #8
   17aa8:	andeq	lr, r1, ip, ror #8
   17aac:	andeq	lr, r1, r4, ror r4
   17ab0:	andeq	lr, r1, ip, ror r4
   17ab4:	muleq	r1, ip, r4
   17ab8:	andeq	lr, r1, r4, lsr #9
   17abc:	andeq	lr, r1, r8, lsr #9
   17ac0:			; <UNDEFINED> instruction: 0x0001e4b0
   17ac4:			; <UNDEFINED> instruction: 0x0001e4bc
   17ac8:	andeq	lr, r1, r4, asr #9
   17acc:	andeq	lr, r1, ip, asr #9
   17ad0:	ldrdeq	lr, [r1], -r4
   17ad4:	ldrdeq	lr, [r1], -ip
   17ad8:	andeq	lr, r1, r4, ror #9
   17adc:	andeq	lr, r1, r4, lsl #9
   17ae0:	andeq	lr, r1, ip, lsl #9
   17ae4:	muleq	r1, r4, r4
   17ae8:	ldr	r1, [pc, #-128]	; 17a70 <__assert_fail@plt+0x636c>
   17aec:	ldr	r0, [pc, #-128]	; 17a74 <__assert_fail@plt+0x6370>
   17af0:	bl	11698 <setmntent@plt>
   17af4:	subs	r5, r0, #0
   17af8:	beq	17e74 <__assert_fail@plt+0x6770>
   17afc:	ldr	r8, [pc, #-140]	; 17a78 <__assert_fail@plt+0x6374>
   17b00:	ldr	r7, [pc, #-140]	; 17a7c <__assert_fail@plt+0x6378>
   17b04:	ldr	r9, [pc, #-140]	; 17a80 <__assert_fail@plt+0x637c>
   17b08:	add	sl, sp, #40	; 0x28
   17b0c:	mov	r0, r5
   17b10:	bl	114a0 <getmntent@plt>
   17b14:	subs	r6, r0, #0
   17b18:	beq	17dbc <__assert_fail@plt+0x66b8>
   17b1c:	mov	r1, r8
   17b20:	bl	11464 <hasmntopt@plt>
   17b24:	mov	fp, r0
   17b28:	mov	r0, #32
   17b2c:	bl	1a458 <__assert_fail@plt+0x8d54>
   17b30:	mov	r4, r0
   17b34:	ldr	r0, [r6]
   17b38:	bl	1a984 <__assert_fail@plt+0x9280>
   17b3c:	str	r0, [r4]
   17b40:	ldr	r0, [r6, #4]
   17b44:	bl	1a984 <__assert_fail@plt+0x9280>
   17b48:	mov	r3, #0
   17b4c:	stmib	r4, {r0, r3}
   17b50:	ldr	r0, [r6, #8]
   17b54:	bl	1a984 <__assert_fail@plt+0x9280>
   17b58:	ldrb	r3, [r4, #24]
   17b5c:	mov	r1, r7
   17b60:	orr	r3, r3, #4
   17b64:	strb	r3, [r4, #24]
   17b68:	str	r0, [r4, #12]
   17b6c:	mov	r6, r0
   17b70:	bl	11320 <strcmp@plt>
   17b74:	cmp	r0, #0
   17b78:	beq	17c8c <__assert_fail@plt+0x6588>
   17b7c:	mov	r1, r9
   17b80:	mov	r0, r6
   17b84:	bl	11320 <strcmp@plt>
   17b88:	cmp	r0, #0
   17b8c:	beq	17c8c <__assert_fail@plt+0x6588>
   17b90:	ldr	r1, [pc, #-276]	; 17a84 <__assert_fail@plt+0x6380>
   17b94:	mov	r0, r6
   17b98:	bl	11320 <strcmp@plt>
   17b9c:	cmp	r0, #0
   17ba0:	beq	17c8c <__assert_fail@plt+0x6588>
   17ba4:	ldr	r1, [pc, #-292]	; 17a88 <__assert_fail@plt+0x6384>
   17ba8:	mov	r0, r6
   17bac:	bl	11320 <strcmp@plt>
   17bb0:	cmp	r0, #0
   17bb4:	beq	17c8c <__assert_fail@plt+0x6588>
   17bb8:	ldr	r1, [pc, #-308]	; 17a8c <__assert_fail@plt+0x6388>
   17bbc:	mov	r0, r6
   17bc0:	bl	11320 <strcmp@plt>
   17bc4:	cmp	r0, #0
   17bc8:	beq	17c8c <__assert_fail@plt+0x6588>
   17bcc:	ldr	r1, [pc, #-324]	; 17a90 <__assert_fail@plt+0x638c>
   17bd0:	mov	r0, r6
   17bd4:	bl	11320 <strcmp@plt>
   17bd8:	cmp	r0, #0
   17bdc:	beq	17c8c <__assert_fail@plt+0x6588>
   17be0:	ldr	r1, [pc, #-340]	; 17a94 <__assert_fail@plt+0x6390>
   17be4:	mov	r0, r6
   17be8:	bl	11320 <strcmp@plt>
   17bec:	cmp	r0, #0
   17bf0:	beq	17c8c <__assert_fail@plt+0x6588>
   17bf4:	ldr	r1, [pc, #-356]	; 17a98 <__assert_fail@plt+0x6394>
   17bf8:	mov	r0, r6
   17bfc:	bl	11320 <strcmp@plt>
   17c00:	cmp	r0, #0
   17c04:	beq	17c8c <__assert_fail@plt+0x6588>
   17c08:	ldr	r1, [pc, #-372]	; 17a9c <__assert_fail@plt+0x6398>
   17c0c:	mov	r0, r6
   17c10:	bl	11320 <strcmp@plt>
   17c14:	cmp	r0, #0
   17c18:	beq	17c8c <__assert_fail@plt+0x6588>
   17c1c:	ldr	r1, [pc, #-388]	; 17aa0 <__assert_fail@plt+0x639c>
   17c20:	mov	r0, r6
   17c24:	bl	11320 <strcmp@plt>
   17c28:	cmp	r0, #0
   17c2c:	beq	17c8c <__assert_fail@plt+0x6588>
   17c30:	ldr	r1, [pc, #-404]	; 17aa4 <__assert_fail@plt+0x63a0>
   17c34:	mov	r0, r6
   17c38:	bl	11320 <strcmp@plt>
   17c3c:	cmp	r0, #0
   17c40:	beq	17c8c <__assert_fail@plt+0x6588>
   17c44:	ldr	r1, [pc, #-420]	; 17aa8 <__assert_fail@plt+0x63a4>
   17c48:	mov	r0, r6
   17c4c:	bl	11320 <strcmp@plt>
   17c50:	cmp	r0, #0
   17c54:	beq	17c8c <__assert_fail@plt+0x6588>
   17c58:	ldr	r1, [pc, #-436]	; 17aac <__assert_fail@plt+0x63a8>
   17c5c:	mov	r0, r6
   17c60:	bl	11320 <strcmp@plt>
   17c64:	cmp	r0, #0
   17c68:	beq	17c8c <__assert_fail@plt+0x6588>
   17c6c:	ldr	r1, [pc, #-452]	; 17ab0 <__assert_fail@plt+0x63ac>
   17c70:	mov	r0, r6
   17c74:	bl	11320 <strcmp@plt>
   17c78:	cmp	r0, #0
   17c7c:	cmpeq	fp, #0
   17c80:	moveq	r0, #1
   17c84:	movne	r0, #0
   17c88:	b	17c90 <__assert_fail@plt+0x658c>
   17c8c:	mov	r0, #1
   17c90:	ldrb	r3, [r4, #24]
   17c94:	ldr	fp, [r4]
   17c98:	mov	r1, #58	; 0x3a
   17c9c:	bic	r3, r3, #1
   17ca0:	orr	r3, r0, r3
   17ca4:	strb	r3, [r4, #24]
   17ca8:	mov	r0, fp
   17cac:	bl	11548 <strchr@plt>
   17cb0:	cmp	r0, #0
   17cb4:	beq	17ce4 <__assert_fail@plt+0x65e0>
   17cb8:	mov	r1, #1
   17cbc:	ldrb	r0, [r4, #24]
   17cc0:	mvn	r2, #0
   17cc4:	mvn	r3, #0
   17cc8:	bic	r0, r0, #2
   17ccc:	orr	r0, r0, r1, lsl #1
   17cd0:	strb	r0, [r4, #24]
   17cd4:	strd	r2, [r4, #16]
   17cd8:	str	r4, [sl]
   17cdc:	add	sl, r4, #28
   17ce0:	b	17b0c <__assert_fail@plt+0x6408>
   17ce4:	ldrb	r3, [fp]
   17ce8:	cmp	r3, #47	; 0x2f
   17cec:	beq	17e28 <__assert_fail@plt+0x6724>
   17cf0:	ldr	r1, [pc, #-580]	; 17ab4 <__assert_fail@plt+0x63b0>
   17cf4:	mov	r0, r6
   17cf8:	bl	11320 <strcmp@plt>
   17cfc:	cmp	r0, #0
   17d00:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d04:	ldr	r1, [pc, #-596]	; 17ab8 <__assert_fail@plt+0x63b4>
   17d08:	mov	r0, r6
   17d0c:	bl	11320 <strcmp@plt>
   17d10:	cmp	r0, #0
   17d14:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d18:	ldr	r1, [pc, #-612]	; 17abc <__assert_fail@plt+0x63b8>
   17d1c:	mov	r0, r6
   17d20:	bl	11320 <strcmp@plt>
   17d24:	cmp	r0, #0
   17d28:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d2c:	ldr	r1, [pc, #-628]	; 17ac0 <__assert_fail@plt+0x63bc>
   17d30:	mov	r0, r6
   17d34:	bl	11320 <strcmp@plt>
   17d38:	cmp	r0, #0
   17d3c:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d40:	ldr	r1, [pc, #-644]	; 17ac4 <__assert_fail@plt+0x63c0>
   17d44:	mov	r0, r6
   17d48:	bl	11320 <strcmp@plt>
   17d4c:	cmp	r0, #0
   17d50:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d54:	ldr	r1, [pc, #-660]	; 17ac8 <__assert_fail@plt+0x63c4>
   17d58:	mov	r0, r6
   17d5c:	bl	11320 <strcmp@plt>
   17d60:	cmp	r0, #0
   17d64:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d68:	ldr	r1, [pc, #-676]	; 17acc <__assert_fail@plt+0x63c8>
   17d6c:	mov	r0, r6
   17d70:	bl	11320 <strcmp@plt>
   17d74:	cmp	r0, #0
   17d78:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d7c:	ldr	r1, [pc, #-692]	; 17ad0 <__assert_fail@plt+0x63cc>
   17d80:	mov	r0, r6
   17d84:	bl	11320 <strcmp@plt>
   17d88:	cmp	r0, #0
   17d8c:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17d90:	mov	r0, r6
   17d94:	ldr	r1, [pc, #-712]	; 17ad4 <__assert_fail@plt+0x63d0>
   17d98:	bl	11320 <strcmp@plt>
   17d9c:	cmp	r0, #0
   17da0:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17da4:	mov	r1, fp
   17da8:	ldr	r0, [pc, #-728]	; 17ad8 <__assert_fail@plt+0x63d4>
   17dac:	bl	11320 <strcmp@plt>
   17db0:	clz	r1, r0
   17db4:	lsr	r1, r1, #5
   17db8:	b	17cbc <__assert_fail@plt+0x65b8>
   17dbc:	mov	r0, r5
   17dc0:	bl	115f0 <endmntent@plt>
   17dc4:	cmp	r0, #0
   17dc8:	bne	1781c <__assert_fail@plt+0x6118>
   17dcc:	bl	1156c <__errno_location@plt>
   17dd0:	mov	r5, r0
   17dd4:	ldr	r6, [r0]
   17dd8:	b	17a14 <__assert_fail@plt+0x6310>
   17ddc:	ldrb	r3, [r8, #1]
   17de0:	cmp	r3, #47	; 0x2f
   17de4:	bne	17930 <__assert_fail@plt+0x622c>
   17de8:	ldr	r1, [pc, #-788]	; 17adc <__assert_fail@plt+0x63d8>
   17dec:	mov	r0, r6
   17df0:	bl	11320 <strcmp@plt>
   17df4:	cmp	r0, #0
   17df8:	beq	177d4 <__assert_fail@plt+0x60d0>
   17dfc:	ldr	r1, [pc, #-804]	; 17ae0 <__assert_fail@plt+0x63dc>
   17e00:	mov	r0, r6
   17e04:	bl	11320 <strcmp@plt>
   17e08:	cmp	r0, #0
   17e0c:	beq	177d4 <__assert_fail@plt+0x60d0>
   17e10:	ldr	r1, [pc, #-820]	; 17ae4 <__assert_fail@plt+0x63e0>
   17e14:	mov	r0, r6
   17e18:	bl	11320 <strcmp@plt>
   17e1c:	cmp	r0, #0
   17e20:	beq	177d4 <__assert_fail@plt+0x60d0>
   17e24:	b	17930 <__assert_fail@plt+0x622c>
   17e28:	ldrb	r3, [fp, #1]
   17e2c:	cmp	r3, #47	; 0x2f
   17e30:	bne	17cf0 <__assert_fail@plt+0x65ec>
   17e34:	ldr	r1, [pc, #-864]	; 17adc <__assert_fail@plt+0x63d8>
   17e38:	mov	r0, r6
   17e3c:	bl	11320 <strcmp@plt>
   17e40:	cmp	r0, #0
   17e44:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17e48:	ldr	r1, [pc, #-880]	; 17ae0 <__assert_fail@plt+0x63dc>
   17e4c:	mov	r0, r6
   17e50:	bl	11320 <strcmp@plt>
   17e54:	cmp	r0, #0
   17e58:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17e5c:	ldr	r1, [pc, #-896]	; 17ae4 <__assert_fail@plt+0x63e0>
   17e60:	mov	r0, r6
   17e64:	bl	11320 <strcmp@plt>
   17e68:	cmp	r0, #0
   17e6c:	beq	17cb8 <__assert_fail@plt+0x65b4>
   17e70:	b	17cf0 <__assert_fail@plt+0x65ec>
   17e74:	mov	r0, r5
   17e78:	b	17828 <__assert_fail@plt+0x6124>
   17e7c:	push	{r4, r5, r6, lr}
   17e80:	subs	r4, r0, #0
   17e84:	beq	17ef8 <__assert_fail@plt+0x67f4>
   17e88:	mov	r1, #47	; 0x2f
   17e8c:	bl	1162c <strrchr@plt>
   17e90:	subs	r5, r0, #0
   17e94:	beq	17ee4 <__assert_fail@plt+0x67e0>
   17e98:	add	r6, r5, #1
   17e9c:	sub	r3, r6, r4
   17ea0:	cmp	r3, #6
   17ea4:	ble	17ee4 <__assert_fail@plt+0x67e0>
   17ea8:	mov	r2, #7
   17eac:	ldr	r1, [pc, #96]	; 17f14 <__assert_fail@plt+0x6810>
   17eb0:	sub	r0, r5, #6
   17eb4:	bl	116d4 <strncmp@plt>
   17eb8:	cmp	r0, #0
   17ebc:	bne	17ee4 <__assert_fail@plt+0x67e0>
   17ec0:	mov	r2, #3
   17ec4:	ldr	r1, [pc, #76]	; 17f18 <__assert_fail@plt+0x6814>
   17ec8:	mov	r0, r6
   17ecc:	bl	116d4 <strncmp@plt>
   17ed0:	cmp	r0, #0
   17ed4:	movne	r4, r6
   17ed8:	ldreq	r3, [pc, #60]	; 17f1c <__assert_fail@plt+0x6818>
   17edc:	addeq	r4, r5, #4
   17ee0:	streq	r4, [r3]
   17ee4:	ldr	r2, [pc, #52]	; 17f20 <__assert_fail@plt+0x681c>
   17ee8:	ldr	r3, [pc, #52]	; 17f24 <__assert_fail@plt+0x6820>
   17eec:	str	r4, [r2]
   17ef0:	str	r4, [r3]
   17ef4:	pop	{r4, r5, r6, pc}
   17ef8:	ldr	r3, [pc, #40]	; 17f28 <__assert_fail@plt+0x6824>
   17efc:	mov	r2, #55	; 0x37
   17f00:	mov	r1, #1
   17f04:	ldr	r3, [r3]
   17f08:	ldr	r0, [pc, #28]	; 17f2c <__assert_fail@plt+0x6828>
   17f0c:	bl	11440 <fwrite@plt>
   17f10:	bl	116e0 <abort@plt>
   17f14:	andeq	lr, r1, ip, lsr r5
   17f18:	andeq	lr, r1, r4, asr #10
   17f1c:	andeq	pc, r2, r0, lsr #6
   17f20:	andeq	pc, r2, r0, asr #7
   17f24:	andeq	pc, r2, r4, lsr #6
   17f28:	andeq	pc, r2, r0, lsr r3	; <UNPREDICTABLE>
   17f2c:	andeq	lr, r1, r4, lsl #10
   17f30:	push	{r4, r5, r6, lr}
   17f34:	mov	r2, #48	; 0x30
   17f38:	mov	r4, r1
   17f3c:	mov	r1, #0
   17f40:	mov	r5, r0
   17f44:	bl	11590 <memset@plt>
   17f48:	cmp	r4, #10
   17f4c:	beq	17f5c <__assert_fail@plt+0x6858>
   17f50:	str	r4, [r5]
   17f54:	mov	r0, r5
   17f58:	pop	{r4, r5, r6, pc}
   17f5c:	bl	116e0 <abort@plt>
   17f60:	push	{r4, r5, r6, lr}
   17f64:	mov	r4, r0
   17f68:	mov	r5, r1
   17f6c:	bl	1c490 <__assert_fail@plt+0xad8c>
   17f70:	ldrb	r3, [r0]
   17f74:	bic	r3, r3, #32
   17f78:	cmp	r3, #85	; 0x55
   17f7c:	bne	17fdc <__assert_fail@plt+0x68d8>
   17f80:	ldrb	r3, [r0, #1]
   17f84:	bic	r3, r3, #32
   17f88:	cmp	r3, #84	; 0x54
   17f8c:	bne	18018 <__assert_fail@plt+0x6914>
   17f90:	ldrb	r3, [r0, #2]
   17f94:	bic	r3, r3, #32
   17f98:	cmp	r3, #70	; 0x46
   17f9c:	bne	18018 <__assert_fail@plt+0x6914>
   17fa0:	ldrb	r3, [r0, #3]
   17fa4:	cmp	r3, #45	; 0x2d
   17fa8:	bne	18018 <__assert_fail@plt+0x6914>
   17fac:	ldrb	r3, [r0, #4]
   17fb0:	cmp	r3, #56	; 0x38
   17fb4:	bne	18018 <__assert_fail@plt+0x6914>
   17fb8:	ldrb	r3, [r0, #5]
   17fbc:	cmp	r3, #0
   17fc0:	bne	18018 <__assert_fail@plt+0x6914>
   17fc4:	ldrb	r2, [r4]
   17fc8:	ldr	r3, [pc, #152]	; 18068 <__assert_fail@plt+0x6964>
   17fcc:	ldr	r0, [pc, #152]	; 1806c <__assert_fail@plt+0x6968>
   17fd0:	cmp	r2, #96	; 0x60
   17fd4:	movne	r0, r3
   17fd8:	pop	{r4, r5, r6, pc}
   17fdc:	cmp	r3, #71	; 0x47
   17fe0:	bne	18018 <__assert_fail@plt+0x6914>
   17fe4:	ldrb	r3, [r0, #1]
   17fe8:	bic	r3, r3, #32
   17fec:	cmp	r3, #66	; 0x42
   17ff0:	bne	18018 <__assert_fail@plt+0x6914>
   17ff4:	ldrb	r3, [r0, #2]
   17ff8:	cmp	r3, #49	; 0x31
   17ffc:	bne	18018 <__assert_fail@plt+0x6914>
   18000:	ldrb	r3, [r0, #3]
   18004:	cmp	r3, #56	; 0x38
   18008:	bne	18018 <__assert_fail@plt+0x6914>
   1800c:	ldrb	r3, [r0, #4]
   18010:	cmp	r3, #48	; 0x30
   18014:	beq	1802c <__assert_fail@plt+0x6928>
   18018:	ldr	r3, [pc, #80]	; 18070 <__assert_fail@plt+0x696c>
   1801c:	cmp	r5, #9
   18020:	ldr	r0, [pc, #76]	; 18074 <__assert_fail@plt+0x6970>
   18024:	movne	r0, r3
   18028:	pop	{r4, r5, r6, pc}
   1802c:	ldrb	r3, [r0, #5]
   18030:	cmp	r3, #51	; 0x33
   18034:	bne	18018 <__assert_fail@plt+0x6914>
   18038:	ldrb	r3, [r0, #6]
   1803c:	cmp	r3, #48	; 0x30
   18040:	bne	18018 <__assert_fail@plt+0x6914>
   18044:	ldrb	r3, [r0, #7]
   18048:	cmp	r3, #0
   1804c:	bne	18018 <__assert_fail@plt+0x6914>
   18050:	ldrb	r2, [r4]
   18054:	ldr	r3, [pc, #28]	; 18078 <__assert_fail@plt+0x6974>
   18058:	ldr	r0, [pc, #28]	; 1807c <__assert_fail@plt+0x6978>
   1805c:	cmp	r2, #96	; 0x60
   18060:	movne	r0, r3
   18064:	pop	{r4, r5, r6, pc}
   18068:	andeq	lr, r1, r0, lsr #11
   1806c:	muleq	r1, ip, r5
   18070:	andeq	lr, r1, ip, lsr #11
   18074:			; <UNDEFINED> instruction: 0x0001d3b8
   18078:	andeq	lr, r1, r8, lsr #11
   1807c:	andeq	lr, r1, r4, lsr #11
   18080:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18084:	sub	sp, sp, #116	; 0x74
   18088:	mov	sl, r0
   1808c:	str	r3, [sp, #24]
   18090:	mov	r3, #1
   18094:	mov	r8, r1
   18098:	str	r2, [sp, #56]	; 0x38
   1809c:	str	r3, [sp, #36]	; 0x24
   180a0:	bl	11458 <__ctype_get_mb_cur_max@plt>
   180a4:	ldr	r3, [sp, #156]	; 0x9c
   180a8:	mov	fp, r8
   180ac:	mov	r2, #0
   180b0:	lsr	r3, r3, #1
   180b4:	and	r3, r3, #1
   180b8:	str	r2, [sp, #68]	; 0x44
   180bc:	str	r3, [sp, #28]
   180c0:	str	r2, [sp, #40]	; 0x28
   180c4:	str	r2, [sp, #44]	; 0x2c
   180c8:	str	r2, [sp, #52]	; 0x34
   180cc:	str	r2, [sp, #64]	; 0x40
   180d0:	str	r2, [sp, #72]	; 0x48
   180d4:	str	sl, [sp, #32]
   180d8:	str	r0, [sp, #76]	; 0x4c
   180dc:	ldr	r3, [sp, #152]	; 0x98
   180e0:	cmp	r3, #10
   180e4:	ldrls	pc, [pc, r3, lsl #2]
   180e8:	b	192a8 <__assert_fail@plt+0x7ba4>
   180ec:	andeq	r8, r1, r8, lsl r1
   180f0:	andeq	r8, r1, r0, lsl #8
   180f4:	andeq	r8, r1, r4, lsr #8
   180f8:	andeq	r8, r1, r8, asr #8
   180fc:	andeq	r8, r1, r4, ror r5
   18100:	andeq	r8, r1, r8, asr #10
   18104:	andeq	r8, r1, r0, lsr #10
   18108:	andeq	r8, r1, ip, asr r4
   1810c:	andeq	r8, r1, r4, ror r4
   18110:	andeq	r8, r1, r4, ror r4
   18114:	andeq	r8, r1, r4, ror r4
   18118:	mov	r3, #0
   1811c:	mov	r7, r3
   18120:	str	r3, [sp, #28]
   18124:	ldr	r3, [sp, #44]	; 0x2c
   18128:	mov	sl, #0
   1812c:	eor	r3, r3, #1
   18130:	str	r3, [sp, #60]	; 0x3c
   18134:	ldr	r3, [sp, #24]
   18138:	cmn	r3, #1
   1813c:	beq	186a0 <__assert_fail@plt+0x6f9c>
   18140:	ldr	r3, [sp, #24]
   18144:	subs	r5, r3, sl
   18148:	movne	r5, #1
   1814c:	cmp	r5, #0
   18150:	beq	186b8 <__assert_fail@plt+0x6fb4>
   18154:	ldr	r3, [sp, #152]	; 0x98
   18158:	ldr	r8, [sp, #44]	; 0x2c
   1815c:	cmp	r3, #2
   18160:	moveq	r8, #0
   18164:	andne	r8, r8, #1
   18168:	ldr	r3, [sp, #52]	; 0x34
   1816c:	adds	r9, r3, #0
   18170:	movne	r9, #1
   18174:	ands	r6, r9, r8
   18178:	beq	18b20 <__assert_fail@plt+0x741c>
   1817c:	ldr	r2, [sp, #52]	; 0x34
   18180:	ldr	r1, [sp, #24]
   18184:	cmp	r2, #1
   18188:	mov	r3, r2
   1818c:	movls	r3, #0
   18190:	movhi	r3, #1
   18194:	cmn	r1, #1
   18198:	movne	r3, #0
   1819c:	cmp	r3, #0
   181a0:	add	r4, sl, r2
   181a4:	beq	181b4 <__assert_fail@plt+0x6ab0>
   181a8:	ldr	r0, [sp, #56]	; 0x38
   181ac:	bl	1153c <strlen@plt>
   181b0:	str	r0, [sp, #24]
   181b4:	ldr	r3, [sp, #24]
   181b8:	cmp	r3, r4
   181bc:	ldr	r3, [sp, #56]	; 0x38
   181c0:	add	r3, r3, sl
   181c4:	str	r3, [sp, #48]	; 0x30
   181c8:	bcc	18b2c <__assert_fail@plt+0x7428>
   181cc:	mov	r0, r3
   181d0:	ldr	r2, [sp, #52]	; 0x34
   181d4:	ldr	r1, [sp, #64]	; 0x40
   181d8:	bl	11398 <memcmp@plt>
   181dc:	cmp	r0, #0
   181e0:	bne	18b2c <__assert_fail@plt+0x7428>
   181e4:	ldr	r3, [sp, #28]
   181e8:	cmp	r3, #0
   181ec:	bne	193a8 <__assert_fail@plt+0x7ca4>
   181f0:	ldr	r3, [sp, #48]	; 0x30
   181f4:	ldrb	r4, [r3]
   181f8:	cmp	r4, #126	; 0x7e
   181fc:	ldrls	pc, [pc, r4, lsl #2]
   18200:	b	18ac0 <__assert_fail@plt+0x73bc>
   18204:	andeq	r8, r1, r4, ror #17
   18208:	andeq	r8, r1, r0, asr #21
   1820c:	andeq	r8, r1, r0, asr #21
   18210:	andeq	r8, r1, r0, asr #21
   18214:	andeq	r8, r1, r0, asr #21
   18218:	andeq	r8, r1, r0, asr #21
   1821c:	andeq	r8, r1, r0, asr #21
   18220:	andeq	r8, r1, r8, asr #17
   18224:	andeq	r8, r1, ip, lsr #17
   18228:	andeq	r8, r1, r8, lsr #21
   1822c:	andeq	r8, r1, ip, lsl #16
   18230:	strdeq	r8, [r1], -r0
   18234:	andeq	r8, r1, r4, lsl #21
   18238:	andeq	r8, r1, r0, ror #20
   1823c:	andeq	r8, r1, r0, asr #21
   18240:	andeq	r8, r1, r0, asr #21
   18244:	andeq	r8, r1, r0, asr #21
   18248:	andeq	r8, r1, r0, asr #21
   1824c:	andeq	r8, r1, r0, asr #21
   18250:	andeq	r8, r1, r0, asr #21
   18254:	andeq	r8, r1, r0, asr #21
   18258:	andeq	r8, r1, r0, asr #21
   1825c:	andeq	r8, r1, r0, asr #21
   18260:	andeq	r8, r1, r0, asr #21
   18264:	andeq	r8, r1, r0, asr #21
   18268:	andeq	r8, r1, r0, asr #21
   1826c:	andeq	r8, r1, r0, asr #21
   18270:	andeq	r8, r1, r0, asr #21
   18274:	andeq	r8, r1, r0, asr #21
   18278:	andeq	r8, r1, r0, asr #21
   1827c:	andeq	r8, r1, r0, asr #21
   18280:	andeq	r8, r1, r0, asr #21
   18284:	andeq	r8, r1, r0, lsr #21
   18288:	ldrdeq	r8, [r1], -r4
   1828c:	ldrdeq	r8, [r1], -r4
   18290:	andeq	r8, r1, r4, ror #11
   18294:	ldrdeq	r8, [r1], -r4
   18298:	andeq	r8, r1, ip, ror #20
   1829c:	ldrdeq	r8, [r1], -r4
   182a0:	andeq	r8, r1, r0, asr #20
   182a4:	ldrdeq	r8, [r1], -r4
   182a8:	ldrdeq	r8, [r1], -r4
   182ac:	ldrdeq	r8, [r1], -r4
   182b0:	andeq	r8, r1, ip, ror #20
   182b4:	andeq	r8, r1, ip, ror #20
   182b8:	andeq	r8, r1, ip, ror #20
   182bc:	andeq	r8, r1, ip, ror #20
   182c0:	andeq	r8, r1, ip, ror #20
   182c4:	andeq	r8, r1, ip, ror #20
   182c8:	andeq	r8, r1, ip, ror #20
   182cc:	andeq	r8, r1, ip, ror #20
   182d0:	andeq	r8, r1, ip, ror #20
   182d4:	andeq	r8, r1, ip, ror #20
   182d8:	andeq	r8, r1, ip, ror #20
   182dc:	andeq	r8, r1, ip, ror #20
   182e0:	andeq	r8, r1, ip, ror #20
   182e4:	andeq	r8, r1, ip, ror #20
   182e8:	andeq	r8, r1, ip, ror #20
   182ec:	andeq	r8, r1, ip, ror #20
   182f0:	ldrdeq	r8, [r1], -r4
   182f4:	ldrdeq	r8, [r1], -r4
   182f8:	ldrdeq	r8, [r1], -r4
   182fc:	ldrdeq	r8, [r1], -r4
   18300:	andeq	r8, r1, r0, lsl sl
   18304:	andeq	r8, r1, r0, asr #21
   18308:	andeq	r8, r1, ip, ror #20
   1830c:	andeq	r8, r1, ip, ror #20
   18310:	andeq	r8, r1, ip, ror #20
   18314:	andeq	r8, r1, ip, ror #20
   18318:	andeq	r8, r1, ip, ror #20
   1831c:	andeq	r8, r1, ip, ror #20
   18320:	andeq	r8, r1, ip, ror #20
   18324:	andeq	r8, r1, ip, ror #20
   18328:	andeq	r8, r1, ip, ror #20
   1832c:	andeq	r8, r1, ip, ror #20
   18330:	andeq	r8, r1, ip, ror #20
   18334:	andeq	r8, r1, ip, ror #20
   18338:	andeq	r8, r1, ip, ror #20
   1833c:	andeq	r8, r1, ip, ror #20
   18340:	andeq	r8, r1, ip, ror #20
   18344:	andeq	r8, r1, ip, ror #20
   18348:	andeq	r8, r1, ip, ror #20
   1834c:	andeq	r8, r1, ip, ror #20
   18350:	andeq	r8, r1, ip, ror #20
   18354:	andeq	r8, r1, ip, ror #20
   18358:	andeq	r8, r1, ip, ror #20
   1835c:	andeq	r8, r1, ip, ror #20
   18360:	andeq	r8, r1, ip, ror #20
   18364:	andeq	r8, r1, ip, ror #20
   18368:	andeq	r8, r1, ip, ror #20
   1836c:	andeq	r8, r1, ip, ror #20
   18370:	ldrdeq	r8, [r1], -r4
   18374:	andeq	r8, r1, r0, lsr r7
   18378:	andeq	r8, r1, ip, ror #20
   1837c:	ldrdeq	r8, [r1], -r4
   18380:	andeq	r8, r1, ip, ror #20
   18384:	ldrdeq	r8, [r1], -r4
   18388:	andeq	r8, r1, ip, ror #20
   1838c:	andeq	r8, r1, ip, ror #20
   18390:	andeq	r8, r1, ip, ror #20
   18394:	andeq	r8, r1, ip, ror #20
   18398:	andeq	r8, r1, ip, ror #20
   1839c:	andeq	r8, r1, ip, ror #20
   183a0:	andeq	r8, r1, ip, ror #20
   183a4:	andeq	r8, r1, ip, ror #20
   183a8:	andeq	r8, r1, ip, ror #20
   183ac:	andeq	r8, r1, ip, ror #20
   183b0:	andeq	r8, r1, ip, ror #20
   183b4:	andeq	r8, r1, ip, ror #20
   183b8:	andeq	r8, r1, ip, ror #20
   183bc:	andeq	r8, r1, ip, ror #20
   183c0:	andeq	r8, r1, ip, ror #20
   183c4:	andeq	r8, r1, ip, ror #20
   183c8:	andeq	r8, r1, ip, ror #20
   183cc:	andeq	r8, r1, ip, ror #20
   183d0:	andeq	r8, r1, ip, ror #20
   183d4:	andeq	r8, r1, ip, ror #20
   183d8:	andeq	r8, r1, ip, ror #20
   183dc:	andeq	r8, r1, ip, ror #20
   183e0:	andeq	r8, r1, ip, ror #20
   183e4:	andeq	r8, r1, ip, ror #20
   183e8:	andeq	r8, r1, ip, ror #20
   183ec:	andeq	r8, r1, ip, ror #20
   183f0:	andeq	r8, r1, r4, asr #11
   183f4:	ldrdeq	r8, [r1], -r4
   183f8:	andeq	r8, r1, r4, asr #11
   183fc:	andeq	r8, r1, r4, ror #11
   18400:	mov	r3, #1
   18404:	str	r3, [sp, #28]
   18408:	str	r3, [sp, #52]	; 0x34
   1840c:	ldr	r3, [pc, #4000]	; 193b4 <__assert_fail@plt+0x7cb0>
   18410:	mov	r7, #0
   18414:	str	r3, [sp, #64]	; 0x40
   18418:	mov	r3, #2
   1841c:	str	r3, [sp, #152]	; 0x98
   18420:	b	18124 <__assert_fail@plt+0x6a20>
   18424:	ldr	r3, [sp, #28]
   18428:	cmp	r3, #0
   1842c:	beq	18588 <__assert_fail@plt+0x6e84>
   18430:	mov	r3, #1
   18434:	str	r3, [sp, #52]	; 0x34
   18438:	ldr	r3, [pc, #3956]	; 193b4 <__assert_fail@plt+0x7cb0>
   1843c:	mov	r7, #0
   18440:	str	r3, [sp, #64]	; 0x40
   18444:	b	18124 <__assert_fail@plt+0x6a20>
   18448:	mov	r3, #1
   1844c:	str	r3, [sp, #44]	; 0x2c
   18450:	str	r3, [sp, #52]	; 0x34
   18454:	str	r3, [sp, #28]
   18458:	b	1840c <__assert_fail@plt+0x6d08>
   1845c:	mov	r3, #0
   18460:	str	r3, [sp, #28]
   18464:	mov	r3, #1
   18468:	str	r3, [sp, #44]	; 0x2c
   1846c:	mov	r7, #0
   18470:	b	18124 <__assert_fail@plt+0x6a20>
   18474:	ldr	r3, [sp, #152]	; 0x98
   18478:	cmp	r3, #10
   1847c:	beq	184c0 <__assert_fail@plt+0x6dbc>
   18480:	mov	r2, #5
   18484:	ldr	r1, [pc, #3884]	; 193b8 <__assert_fail@plt+0x7cb4>
   18488:	mov	r0, #0
   1848c:	bl	113bc <dcgettext@plt>
   18490:	ldr	r2, [pc, #3872]	; 193b8 <__assert_fail@plt+0x7cb4>
   18494:	cmp	r0, r2
   18498:	str	r0, [sp, #164]	; 0xa4
   1849c:	beq	194a4 <__assert_fail@plt+0x7da0>
   184a0:	mov	r2, #5
   184a4:	ldr	r1, [pc, #3848]	; 193b4 <__assert_fail@plt+0x7cb0>
   184a8:	mov	r0, #0
   184ac:	bl	113bc <dcgettext@plt>
   184b0:	ldr	r2, [pc, #3836]	; 193b4 <__assert_fail@plt+0x7cb0>
   184b4:	cmp	r0, r2
   184b8:	str	r0, [sp, #168]	; 0xa8
   184bc:	beq	19494 <__assert_fail@plt+0x7d90>
   184c0:	ldr	r7, [sp, #28]
   184c4:	cmp	r7, #0
   184c8:	movne	r7, #0
   184cc:	bne	18500 <__assert_fail@plt+0x6dfc>
   184d0:	ldr	r3, [sp, #164]	; 0xa4
   184d4:	ldrb	r3, [r3]
   184d8:	cmp	r3, #0
   184dc:	beq	194b4 <__assert_fail@plt+0x7db0>
   184e0:	ldr	r2, [sp, #164]	; 0xa4
   184e4:	ldr	r1, [sp, #32]
   184e8:	cmp	fp, r7
   184ec:	strbhi	r3, [r1, r7]
   184f0:	ldrb	r3, [r2, #1]!
   184f4:	add	r7, r7, #1
   184f8:	cmp	r3, #0
   184fc:	bne	184e8 <__assert_fail@plt+0x6de4>
   18500:	ldr	r0, [sp, #168]	; 0xa8
   18504:	bl	1153c <strlen@plt>
   18508:	ldr	r3, [sp, #168]	; 0xa8
   1850c:	str	r3, [sp, #64]	; 0x40
   18510:	mov	r3, #1
   18514:	str	r3, [sp, #44]	; 0x2c
   18518:	str	r0, [sp, #52]	; 0x34
   1851c:	b	18124 <__assert_fail@plt+0x6a20>
   18520:	mov	r3, #1
   18524:	str	r3, [sp, #44]	; 0x2c
   18528:	str	r3, [sp, #52]	; 0x34
   1852c:	str	r3, [sp, #28]
   18530:	ldr	r3, [pc, #3716]	; 193bc <__assert_fail@plt+0x7cb8>
   18534:	mov	r7, #0
   18538:	str	r3, [sp, #64]	; 0x40
   1853c:	mov	r3, #5
   18540:	str	r3, [sp, #152]	; 0x98
   18544:	b	18124 <__assert_fail@plt+0x6a20>
   18548:	ldr	r3, [sp, #28]
   1854c:	cmp	r3, #0
   18550:	beq	19250 <__assert_fail@plt+0x7b4c>
   18554:	ldr	r3, [sp, #28]
   18558:	mov	r7, #0
   1855c:	str	r3, [sp, #44]	; 0x2c
   18560:	mov	r3, #1
   18564:	str	r3, [sp, #52]	; 0x34
   18568:	ldr	r3, [pc, #3660]	; 193bc <__assert_fail@plt+0x7cb8>
   1856c:	str	r3, [sp, #64]	; 0x40
   18570:	b	18124 <__assert_fail@plt+0x6a20>
   18574:	ldr	r3, [sp, #28]
   18578:	cmp	r3, #0
   1857c:	mov	r3, #1
   18580:	streq	r3, [sp, #44]	; 0x2c
   18584:	bne	18408 <__assert_fail@plt+0x6d04>
   18588:	cmp	fp, #0
   1858c:	beq	19280 <__assert_fail@plt+0x7b7c>
   18590:	ldr	r3, [sp, #32]
   18594:	mov	r2, #39	; 0x27
   18598:	mov	r7, #1
   1859c:	strb	r2, [r3]
   185a0:	mov	r3, #0
   185a4:	str	r3, [sp, #28]
   185a8:	mov	r3, #1
   185ac:	str	r3, [sp, #52]	; 0x34
   185b0:	ldr	r3, [pc, #3580]	; 193b4 <__assert_fail@plt+0x7cb0>
   185b4:	str	r3, [sp, #64]	; 0x40
   185b8:	mov	r3, #2
   185bc:	str	r3, [sp, #152]	; 0x98
   185c0:	b	18124 <__assert_fail@plt+0x6a20>
   185c4:	ldr	r3, [sp, #24]
   185c8:	cmn	r3, #1
   185cc:	beq	191e4 <__assert_fail@plt+0x7ae0>
   185d0:	ldr	r3, [sp, #24]
   185d4:	subs	r3, r3, #1
   185d8:	movne	r3, #1
   185dc:	cmp	r3, #0
   185e0:	bne	185ec <__assert_fail@plt+0x6ee8>
   185e4:	cmp	sl, #0
   185e8:	beq	189d8 <__assert_fail@plt+0x72d4>
   185ec:	ldr	r3, [sp, #152]	; 0x98
   185f0:	mov	r5, #0
   185f4:	sub	r2, r3, #2
   185f8:	mov	r8, r5
   185fc:	clz	r2, r2
   18600:	lsr	r2, r2, #5
   18604:	ldr	r3, [sp, #60]	; 0x3c
   18608:	ldr	r1, [sp, #28]
   1860c:	orr	r3, r2, r3
   18610:	eor	r3, r3, #1
   18614:	orr	r3, r1, r3
   18618:	tst	r3, #255	; 0xff
   1861c:	bne	18d48 <__assert_fail@plt+0x7644>
   18620:	cmp	r6, #0
   18624:	bne	18774 <__assert_fail@plt+0x7070>
   18628:	ldr	r3, [sp, #40]	; 0x28
   1862c:	eor	r8, r8, #1
   18630:	and	r8, r8, r3
   18634:	add	sl, sl, #1
   18638:	uxtb	r6, r8
   1863c:	cmp	r6, #0
   18640:	beq	18674 <__assert_fail@plt+0x6f70>
   18644:	cmp	fp, r7
   18648:	movhi	r2, #39	; 0x27
   1864c:	ldrhi	r3, [sp, #32]
   18650:	strbhi	r2, [r3, r7]
   18654:	add	r3, r7, #1
   18658:	cmp	fp, r3
   1865c:	movhi	r1, #39	; 0x27
   18660:	ldrhi	r2, [sp, #32]
   18664:	add	r7, r7, #2
   18668:	strbhi	r1, [r2, r3]
   1866c:	mov	r3, #0
   18670:	str	r3, [sp, #40]	; 0x28
   18674:	cmp	r7, fp
   18678:	ldrcc	r3, [sp, #32]
   1867c:	strbcc	r4, [r3, r7]
   18680:	ldr	r3, [sp, #36]	; 0x24
   18684:	cmp	r5, #0
   18688:	moveq	r3, #0
   1868c:	str	r3, [sp, #36]	; 0x24
   18690:	ldr	r3, [sp, #24]
   18694:	add	r7, r7, #1
   18698:	cmn	r3, #1
   1869c:	bne	18140 <__assert_fail@plt+0x6a3c>
   186a0:	ldr	r3, [sp, #56]	; 0x38
   186a4:	ldrb	r5, [r3, sl]
   186a8:	adds	r5, r5, #0
   186ac:	movne	r5, #1
   186b0:	cmp	r5, #0
   186b4:	bne	18154 <__assert_fail@plt+0x6a50>
   186b8:	ldr	r3, [sp, #152]	; 0x98
   186bc:	ldr	r1, [sp, #28]
   186c0:	sub	r3, r3, #2
   186c4:	clz	r3, r3
   186c8:	lsr	r3, r3, #5
   186cc:	and	r9, r1, r3
   186d0:	cmp	r7, #0
   186d4:	movne	r2, #0
   186d8:	andeq	r2, r9, #1
   186dc:	cmp	r2, #0
   186e0:	bne	190bc <__assert_fail@plt+0x79b8>
   186e4:	eor	r2, r1, #1
   186e8:	ands	r3, r3, r2
   186ec:	beq	19578 <__assert_fail@plt+0x7e74>
   186f0:	ldr	r2, [sp, #68]	; 0x44
   186f4:	cmp	r2, #0
   186f8:	beq	19564 <__assert_fail@plt+0x7e60>
   186fc:	ldr	r3, [sp, #36]	; 0x24
   18700:	cmp	r3, #0
   18704:	bne	1951c <__assert_fail@plt+0x7e18>
   18708:	ldr	r2, [sp, #72]	; 0x48
   1870c:	clz	r3, fp
   18710:	cmp	r2, #0
   18714:	lsr	r3, r3, #5
   18718:	moveq	r3, #0
   1871c:	cmp	r3, #0
   18720:	beq	194bc <__assert_fail@plt+0x7db8>
   18724:	str	r3, [sp, #68]	; 0x44
   18728:	ldr	fp, [sp, #72]	; 0x48
   1872c:	b	180dc <__assert_fail@plt+0x69d8>
   18730:	ldr	r3, [sp, #152]	; 0x98
   18734:	cmp	r3, #2
   18738:	beq	18d8c <__assert_fail@plt+0x7688>
   1873c:	ldr	r3, [sp, #44]	; 0x2c
   18740:	ldr	r2, [sp, #28]
   18744:	and	r2, r3, r2
   18748:	ands	r2, r9, r2
   1874c:	bne	18d98 <__assert_fail@plt+0x7694>
   18750:	mov	r4, #92	; 0x5c
   18754:	mov	r3, r4
   18758:	ldr	r1, [sp, #44]	; 0x2c
   1875c:	cmp	r1, #0
   18760:	moveq	r5, #0
   18764:	moveq	r8, r1
   18768:	beq	18604 <__assert_fail@plt+0x6f00>
   1876c:	mov	r4, r3
   18770:	mov	r5, #0
   18774:	ldr	r3, [sp, #28]
   18778:	cmp	r3, #0
   1877c:	bne	18d80 <__assert_fail@plt+0x767c>
   18780:	ldr	r3, [sp, #40]	; 0x28
   18784:	eor	r9, r3, #1
   18788:	and	r9, r9, r2
   1878c:	ands	r9, r9, #255	; 0xff
   18790:	beq	187d4 <__assert_fail@plt+0x70d0>
   18794:	cmp	fp, r7
   18798:	movhi	r2, #39	; 0x27
   1879c:	ldrhi	r3, [sp, #32]
   187a0:	str	r9, [sp, #40]	; 0x28
   187a4:	strbhi	r2, [r3, r7]
   187a8:	add	r3, r7, #1
   187ac:	cmp	fp, r3
   187b0:	movhi	r1, #36	; 0x24
   187b4:	ldrhi	r2, [sp, #32]
   187b8:	strbhi	r1, [r2, r3]
   187bc:	add	r3, r7, #2
   187c0:	cmp	fp, r3
   187c4:	add	r7, r7, #3
   187c8:	ldrhi	r2, [sp, #32]
   187cc:	movhi	r1, #39	; 0x27
   187d0:	strbhi	r1, [r2, r3]
   187d4:	cmp	fp, r7
   187d8:	movhi	r2, #92	; 0x5c
   187dc:	ldrhi	r3, [sp, #32]
   187e0:	add	sl, sl, #1
   187e4:	strbhi	r2, [r3, r7]
   187e8:	add	r7, r7, #1
   187ec:	b	18674 <__assert_fail@plt+0x6f70>
   187f0:	ldr	r3, [sp, #152]	; 0x98
   187f4:	mov	r4, #11
   187f8:	sub	r2, r3, #2
   187fc:	mov	r3, #118	; 0x76
   18800:	clz	r2, r2
   18804:	lsr	r2, r2, #5
   18808:	b	18758 <__assert_fail@plt+0x7054>
   1880c:	mov	r4, #10
   18810:	mov	r3, #110	; 0x6e
   18814:	ldr	r2, [sp, #152]	; 0x98
   18818:	ldr	r1, [sp, #28]
   1881c:	sub	r2, r2, #2
   18820:	clz	r2, r2
   18824:	lsr	r2, r2, #5
   18828:	ands	r1, r1, r2
   1882c:	beq	18758 <__assert_fail@plt+0x7054>
   18830:	ldr	sl, [sp, #32]
   18834:	mov	r8, fp
   18838:	mov	r2, r1
   1883c:	mov	r3, #2
   18840:	str	r3, [sp, #152]	; 0x98
   18844:	ldr	r9, [sp, #44]	; 0x2c
   18848:	ldr	r3, [sp, #152]	; 0x98
   1884c:	and	r9, r9, r2
   18850:	tst	r9, #255	; 0xff
   18854:	movne	r3, #4
   18858:	str	r3, [sp, #152]	; 0x98
   1885c:	ldr	r3, [sp, #156]	; 0x9c
   18860:	mov	ip, #0
   18864:	bic	r3, r3, #2
   18868:	str	r3, [sp, #4]
   1886c:	ldr	r3, [sp, #168]	; 0xa8
   18870:	ldr	r2, [sp, #56]	; 0x38
   18874:	str	r3, [sp, #16]
   18878:	ldr	r3, [sp, #164]	; 0xa4
   1887c:	mov	r1, r8
   18880:	str	r3, [sp, #12]
   18884:	ldr	r3, [sp, #152]	; 0x98
   18888:	mov	r0, sl
   1888c:	str	r3, [sp]
   18890:	str	ip, [sp, #8]
   18894:	ldr	r3, [sp, #24]
   18898:	bl	18080 <__assert_fail@plt+0x697c>
   1889c:	mov	fp, r0
   188a0:	mov	r0, fp
   188a4:	add	sp, sp, #116	; 0x74
   188a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188ac:	ldr	r3, [sp, #152]	; 0x98
   188b0:	mov	r4, #8
   188b4:	sub	r2, r3, #2
   188b8:	mov	r3, #98	; 0x62
   188bc:	clz	r2, r2
   188c0:	lsr	r2, r2, #5
   188c4:	b	18758 <__assert_fail@plt+0x7054>
   188c8:	ldr	r3, [sp, #152]	; 0x98
   188cc:	mov	r4, #7
   188d0:	sub	r2, r3, #2
   188d4:	mov	r3, #97	; 0x61
   188d8:	clz	r2, r2
   188dc:	lsr	r2, r2, #5
   188e0:	b	18758 <__assert_fail@plt+0x7054>
   188e4:	ldr	r3, [sp, #44]	; 0x2c
   188e8:	cmp	r3, #0
   188ec:	beq	190d0 <__assert_fail@plt+0x79cc>
   188f0:	ldr	r3, [sp, #28]
   188f4:	cmp	r3, #0
   188f8:	bne	193a8 <__assert_fail@plt+0x7ca4>
   188fc:	ldr	r3, [sp, #152]	; 0x98
   18900:	sub	r2, r3, #2
   18904:	ldr	r3, [sp, #40]	; 0x28
   18908:	clz	r2, r2
   1890c:	eor	r3, r3, #1
   18910:	lsr	r2, r2, #5
   18914:	ands	r3, r2, r3
   18918:	moveq	r1, r7
   1891c:	beq	18960 <__assert_fail@plt+0x725c>
   18920:	cmp	fp, r7
   18924:	movhi	r0, #39	; 0x27
   18928:	ldrhi	r1, [sp, #32]
   1892c:	str	r3, [sp, #40]	; 0x28
   18930:	strbhi	r0, [r1, r7]
   18934:	add	r1, r7, #1
   18938:	cmp	fp, r1
   1893c:	movhi	ip, #36	; 0x24
   18940:	ldrhi	r0, [sp, #32]
   18944:	strbhi	ip, [r0, r1]
   18948:	add	r1, r7, #2
   1894c:	cmp	fp, r1
   18950:	movhi	ip, #39	; 0x27
   18954:	ldrhi	r0, [sp, #32]
   18958:	strbhi	ip, [r0, r1]
   1895c:	add	r1, r7, #3
   18960:	cmp	fp, r1
   18964:	movhi	r0, #92	; 0x5c
   18968:	ldrhi	r3, [sp, #32]
   1896c:	add	r7, r1, #1
   18970:	strbhi	r0, [r3, r1]
   18974:	cmp	r8, #0
   18978:	beq	192bc <__assert_fail@plt+0x7bb8>
   1897c:	ldr	r0, [sp, #24]
   18980:	add	r3, sl, #1
   18984:	cmp	r3, r0
   18988:	bcs	191f8 <__assert_fail@plt+0x7af4>
   1898c:	ldr	r0, [sp, #56]	; 0x38
   18990:	ldrb	r3, [r0, r3]
   18994:	sub	r3, r3, #48	; 0x30
   18998:	cmp	r3, #9
   1899c:	bhi	191f8 <__assert_fail@plt+0x7af4>
   189a0:	cmp	fp, r7
   189a4:	movhi	r3, #48	; 0x30
   189a8:	ldrhi	r0, [sp, #32]
   189ac:	ldr	r5, [sp, #28]
   189b0:	mov	r4, #48	; 0x30
   189b4:	strbhi	r3, [r0, r7]
   189b8:	add	r3, r1, #2
   189bc:	cmp	fp, r3
   189c0:	movhi	r0, #48	; 0x30
   189c4:	ldrhi	ip, [sp, #32]
   189c8:	add	r7, r1, #3
   189cc:	strbhi	r0, [ip, r3]
   189d0:	b	18604 <__assert_fail@plt+0x6f00>
   189d4:	mov	r5, #0
   189d8:	ldr	r3, [sp, #152]	; 0x98
   189dc:	sub	r2, r3, #2
   189e0:	ldr	r3, [sp, #28]
   189e4:	clz	r2, r2
   189e8:	lsr	r2, r2, #5
   189ec:	ands	r8, r3, r2
   189f0:	beq	18604 <__assert_fail@plt+0x6f00>
   189f4:	mov	r3, r8
   189f8:	mov	r2, r3
   189fc:	mov	r3, #2
   18a00:	ldr	sl, [sp, #32]
   18a04:	mov	r8, fp
   18a08:	str	r3, [sp, #152]	; 0x98
   18a0c:	b	18844 <__assert_fail@plt+0x7140>
   18a10:	ldr	r3, [sp, #152]	; 0x98
   18a14:	cmp	r3, #2
   18a18:	beq	1913c <__assert_fail@plt+0x7a38>
   18a1c:	cmp	r3, #5
   18a20:	beq	190fc <__assert_fail@plt+0x79f8>
   18a24:	mov	r5, #0
   18a28:	sub	r2, r3, #2
   18a2c:	mov	r8, r5
   18a30:	clz	r2, r2
   18a34:	mov	r4, #63	; 0x3f
   18a38:	lsr	r2, r2, #5
   18a3c:	b	18604 <__assert_fail@plt+0x6f00>
   18a40:	ldr	r3, [sp, #152]	; 0x98
   18a44:	cmp	r3, #2
   18a48:	beq	1915c <__assert_fail@plt+0x7a58>
   18a4c:	mov	r2, #0
   18a50:	str	r5, [sp, #68]	; 0x44
   18a54:	mov	r8, r2
   18a58:	mov	r4, #39	; 0x27
   18a5c:	b	18604 <__assert_fail@plt+0x6f00>
   18a60:	mov	r4, #13
   18a64:	mov	r3, #114	; 0x72
   18a68:	b	18814 <__assert_fail@plt+0x7110>
   18a6c:	ldr	r3, [sp, #152]	; 0x98
   18a70:	mov	r8, #0
   18a74:	sub	r2, r3, #2
   18a78:	clz	r2, r2
   18a7c:	lsr	r2, r2, #5
   18a80:	b	18604 <__assert_fail@plt+0x6f00>
   18a84:	ldr	r3, [sp, #152]	; 0x98
   18a88:	mov	r4, #12
   18a8c:	sub	r2, r3, #2
   18a90:	mov	r3, #102	; 0x66
   18a94:	clz	r2, r2
   18a98:	lsr	r2, r2, #5
   18a9c:	b	18758 <__assert_fail@plt+0x7054>
   18aa0:	mov	r5, r6
   18aa4:	b	189d8 <__assert_fail@plt+0x72d4>
   18aa8:	ldr	r3, [sp, #152]	; 0x98
   18aac:	sub	r2, r3, #2
   18ab0:	mov	r3, #116	; 0x74
   18ab4:	clz	r2, r2
   18ab8:	lsr	r2, r2, #5
   18abc:	b	18758 <__assert_fail@plt+0x7054>
   18ac0:	ldr	r8, [sp, #76]	; 0x4c
   18ac4:	cmp	r8, #1
   18ac8:	bne	18f78 <__assert_fail@plt+0x7874>
   18acc:	bl	11518 <__ctype_b_loc@plt>
   18ad0:	sxth	r3, r4
   18ad4:	mov	ip, r8
   18ad8:	lsl	r3, r3, #1
   18adc:	ldr	r2, [r0]
   18ae0:	ldrh	r3, [r2, r3]
   18ae4:	and	r3, r3, #16384	; 0x4000
   18ae8:	cmp	r3, #0
   18aec:	movne	r5, #1
   18af0:	moveq	r5, #0
   18af4:	moveq	r3, #1
   18af8:	movne	r3, #0
   18afc:	ldr	r2, [sp, #44]	; 0x2c
   18b00:	and	r3, r3, r2
   18b04:	ands	r8, r3, #255	; 0xff
   18b08:	bne	18e0c <__assert_fail@plt+0x7708>
   18b0c:	ldr	r3, [sp, #152]	; 0x98
   18b10:	sub	r2, r3, #2
   18b14:	clz	r2, r2
   18b18:	lsr	r2, r2, #5
   18b1c:	b	18604 <__assert_fail@plt+0x6f00>
   18b20:	ldr	r3, [sp, #56]	; 0x38
   18b24:	add	r3, r3, sl
   18b28:	str	r3, [sp, #48]	; 0x30
   18b2c:	ldr	r3, [sp, #48]	; 0x30
   18b30:	mov	r6, #0
   18b34:	ldrb	r4, [r3]
   18b38:	cmp	r4, #126	; 0x7e
   18b3c:	ldrls	pc, [pc, r4, lsl #2]
   18b40:	b	18ac0 <__assert_fail@plt+0x73bc>
   18b44:	andeq	r8, r1, r4, ror #17
   18b48:	andeq	r8, r1, r0, asr #21
   18b4c:	andeq	r8, r1, r0, asr #21
   18b50:	andeq	r8, r1, r0, asr #21
   18b54:	andeq	r8, r1, r0, asr #21
   18b58:	andeq	r8, r1, r0, asr #21
   18b5c:	andeq	r8, r1, r0, asr #21
   18b60:	andeq	r8, r1, r8, asr #17
   18b64:	andeq	r8, r1, ip, lsr #17
   18b68:	andeq	r8, r1, r0, asr #26
   18b6c:	andeq	r8, r1, ip, lsl #16
   18b70:	strdeq	r8, [r1], -r0
   18b74:	andeq	r8, r1, r4, lsl #21
   18b78:	andeq	r8, r1, r0, ror #20
   18b7c:	andeq	r8, r1, r0, asr #21
   18b80:	andeq	r8, r1, r0, asr #21
   18b84:	andeq	r8, r1, r0, asr #21
   18b88:	andeq	r8, r1, r0, asr #21
   18b8c:	andeq	r8, r1, r0, asr #21
   18b90:	andeq	r8, r1, r0, asr #21
   18b94:	andeq	r8, r1, r0, asr #21
   18b98:	andeq	r8, r1, r0, asr #21
   18b9c:	andeq	r8, r1, r0, asr #21
   18ba0:	andeq	r8, r1, r0, asr #21
   18ba4:	andeq	r8, r1, r0, asr #21
   18ba8:	andeq	r8, r1, r0, asr #21
   18bac:	andeq	r8, r1, r0, asr #21
   18bb0:	andeq	r8, r1, r0, asr #21
   18bb4:	andeq	r8, r1, r0, asr #21
   18bb8:	andeq	r8, r1, r0, asr #21
   18bbc:	andeq	r8, r1, r0, asr #21
   18bc0:	andeq	r8, r1, r0, asr #21
   18bc4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bc8:	ldrdeq	r8, [r1], -r4
   18bcc:	ldrdeq	r8, [r1], -r4
   18bd0:	andeq	r8, r1, r4, ror #11
   18bd4:	ldrdeq	r8, [r1], -r4
   18bd8:	andeq	r8, r1, ip, ror #20
   18bdc:	ldrdeq	r8, [r1], -r4
   18be0:	andeq	r8, r1, r0, asr #20
   18be4:	ldrdeq	r8, [r1], -r4
   18be8:	ldrdeq	r8, [r1], -r4
   18bec:	ldrdeq	r8, [r1], -r4
   18bf0:	andeq	r8, r1, ip, ror #20
   18bf4:	andeq	r8, r1, ip, ror #20
   18bf8:	andeq	r8, r1, ip, ror #20
   18bfc:	andeq	r8, r1, ip, ror #20
   18c00:	andeq	r8, r1, ip, ror #20
   18c04:	andeq	r8, r1, ip, ror #20
   18c08:	andeq	r8, r1, ip, ror #20
   18c0c:	andeq	r8, r1, ip, ror #20
   18c10:	andeq	r8, r1, ip, ror #20
   18c14:	andeq	r8, r1, ip, ror #20
   18c18:	andeq	r8, r1, ip, ror #20
   18c1c:	andeq	r8, r1, ip, ror #20
   18c20:	andeq	r8, r1, ip, ror #20
   18c24:	andeq	r8, r1, ip, ror #20
   18c28:	andeq	r8, r1, ip, ror #20
   18c2c:	andeq	r8, r1, ip, ror #20
   18c30:	ldrdeq	r8, [r1], -r4
   18c34:	ldrdeq	r8, [r1], -r4
   18c38:	ldrdeq	r8, [r1], -r4
   18c3c:	ldrdeq	r8, [r1], -r4
   18c40:	andeq	r8, r1, r0, lsl sl
   18c44:	andeq	r8, r1, r0, asr #21
   18c48:	andeq	r8, r1, ip, ror #20
   18c4c:	andeq	r8, r1, ip, ror #20
   18c50:	andeq	r8, r1, ip, ror #20
   18c54:	andeq	r8, r1, ip, ror #20
   18c58:	andeq	r8, r1, ip, ror #20
   18c5c:	andeq	r8, r1, ip, ror #20
   18c60:	andeq	r8, r1, ip, ror #20
   18c64:	andeq	r8, r1, ip, ror #20
   18c68:	andeq	r8, r1, ip, ror #20
   18c6c:	andeq	r8, r1, ip, ror #20
   18c70:	andeq	r8, r1, ip, ror #20
   18c74:	andeq	r8, r1, ip, ror #20
   18c78:	andeq	r8, r1, ip, ror #20
   18c7c:	andeq	r8, r1, ip, ror #20
   18c80:	andeq	r8, r1, ip, ror #20
   18c84:	andeq	r8, r1, ip, ror #20
   18c88:	andeq	r8, r1, ip, ror #20
   18c8c:	andeq	r8, r1, ip, ror #20
   18c90:	andeq	r8, r1, ip, ror #20
   18c94:	andeq	r8, r1, ip, ror #20
   18c98:	andeq	r8, r1, ip, ror #20
   18c9c:	andeq	r8, r1, ip, ror #20
   18ca0:	andeq	r8, r1, ip, ror #20
   18ca4:	andeq	r8, r1, ip, ror #20
   18ca8:	andeq	r8, r1, ip, ror #20
   18cac:	andeq	r8, r1, ip, ror #20
   18cb0:	ldrdeq	r8, [r1], -r4
   18cb4:	andeq	r8, r1, r0, lsr r7
   18cb8:	andeq	r8, r1, ip, ror #20
   18cbc:	ldrdeq	r8, [r1], -r4
   18cc0:	andeq	r8, r1, ip, ror #20
   18cc4:	ldrdeq	r8, [r1], -r4
   18cc8:	andeq	r8, r1, ip, ror #20
   18ccc:	andeq	r8, r1, ip, ror #20
   18cd0:	andeq	r8, r1, ip, ror #20
   18cd4:	andeq	r8, r1, ip, ror #20
   18cd8:	andeq	r8, r1, ip, ror #20
   18cdc:	andeq	r8, r1, ip, ror #20
   18ce0:	andeq	r8, r1, ip, ror #20
   18ce4:	andeq	r8, r1, ip, ror #20
   18ce8:	andeq	r8, r1, ip, ror #20
   18cec:	andeq	r8, r1, ip, ror #20
   18cf0:	andeq	r8, r1, ip, ror #20
   18cf4:	andeq	r8, r1, ip, ror #20
   18cf8:	andeq	r8, r1, ip, ror #20
   18cfc:	andeq	r8, r1, ip, ror #20
   18d00:	andeq	r8, r1, ip, ror #20
   18d04:	andeq	r8, r1, ip, ror #20
   18d08:	andeq	r8, r1, ip, ror #20
   18d0c:	andeq	r8, r1, ip, ror #20
   18d10:	andeq	r8, r1, ip, ror #20
   18d14:	andeq	r8, r1, ip, ror #20
   18d18:	andeq	r8, r1, ip, ror #20
   18d1c:	andeq	r8, r1, ip, ror #20
   18d20:	andeq	r8, r1, ip, ror #20
   18d24:	andeq	r8, r1, ip, ror #20
   18d28:	andeq	r8, r1, ip, ror #20
   18d2c:	andeq	r8, r1, ip, ror #20
   18d30:	andeq	r8, r1, r4, asr #11
   18d34:	ldrdeq	r8, [r1], -r4
   18d38:	andeq	r8, r1, r4, asr #11
   18d3c:	andeq	r8, r1, r4, ror #11
   18d40:	mov	r3, #116	; 0x74
   18d44:	b	18814 <__assert_fail@plt+0x7110>
   18d48:	ldr	r3, [sp, #160]	; 0xa0
   18d4c:	cmp	r3, #0
   18d50:	beq	18620 <__assert_fail@plt+0x6f1c>
   18d54:	lsr	r3, r4, #5
   18d58:	ldr	r0, [sp, #160]	; 0xa0
   18d5c:	uxtb	r3, r3
   18d60:	and	r1, r4, #31
   18d64:	ldr	r0, [r0, r3, lsl #2]
   18d68:	lsr	r3, r0, r1
   18d6c:	tst	r3, #1
   18d70:	beq	18620 <__assert_fail@plt+0x6f1c>
   18d74:	ldr	r3, [sp, #28]
   18d78:	cmp	r3, #0
   18d7c:	beq	18780 <__assert_fail@plt+0x707c>
   18d80:	ldr	sl, [sp, #32]
   18d84:	mov	r8, fp
   18d88:	b	18844 <__assert_fail@plt+0x7140>
   18d8c:	ldr	r3, [sp, #28]
   18d90:	cmp	r3, #0
   18d94:	bne	192e8 <__assert_fail@plt+0x7be4>
   18d98:	add	sl, sl, #1
   18d9c:	ldr	r6, [sp, #40]	; 0x28
   18da0:	mov	r5, #0
   18da4:	mov	r4, #92	; 0x5c
   18da8:	b	1863c <__assert_fail@plt+0x6f38>
   18dac:	cmp	r9, r8
   18db0:	bne	19020 <__assert_fail@plt+0x791c>
   18db4:	ldr	r0, [sp, #100]	; 0x64
   18db8:	bl	11410 <iswprint@plt>
   18dbc:	add	r5, r5, r4
   18dc0:	cmp	r0, #0
   18dc4:	add	r0, sp, #104	; 0x68
   18dc8:	moveq	r6, #0
   18dcc:	bl	1138c <mbsinit@plt>
   18dd0:	cmp	r0, #0
   18dd4:	beq	18fb4 <__assert_fail@plt+0x78b0>
   18dd8:	mov	r2, r6
   18ddc:	mov	ip, r5
   18de0:	eor	r5, r2, #1
   18de4:	ldr	r4, [sp, #80]	; 0x50
   18de8:	ldr	r6, [sp, #84]	; 0x54
   18dec:	ldr	r7, [sp, #88]	; 0x58
   18df0:	uxtb	r5, r5
   18df4:	cmp	ip, #1
   18df8:	bls	192f8 <__assert_fail@plt+0x7bf4>
   18dfc:	ldr	r3, [sp, #44]	; 0x2c
   18e00:	and	r8, r3, r5
   18e04:	mov	r5, r2
   18e08:	uxtb	r8, r8
   18e0c:	add	r2, sl, ip
   18e10:	ldr	r0, [sp, #48]	; 0x30
   18e14:	mov	r1, #0
   18e18:	str	r5, [sp, #48]	; 0x30
   18e1c:	ldr	r9, [sp, #28]
   18e20:	ldr	ip, [sp, #40]	; 0x28
   18e24:	ldr	r3, [sp, #32]
   18e28:	ldr	r5, [sp, #152]	; 0x98
   18e2c:	b	18ee8 <__assert_fail@plt+0x77e4>
   18e30:	cmp	r9, #0
   18e34:	bne	1920c <__assert_fail@plt+0x7b08>
   18e38:	eor	r1, ip, #1
   18e3c:	cmp	r5, #2
   18e40:	movne	r1, #0
   18e44:	andeq	r1, r1, #1
   18e48:	cmp	r1, #0
   18e4c:	beq	18e84 <__assert_fail@plt+0x7780>
   18e50:	cmp	fp, r7
   18e54:	movhi	ip, #39	; 0x27
   18e58:	strbhi	ip, [r3, r7]
   18e5c:	add	ip, r7, #1
   18e60:	cmp	fp, ip
   18e64:	movhi	lr, #36	; 0x24
   18e68:	strbhi	lr, [r3, ip]
   18e6c:	add	ip, r7, #2
   18e70:	cmp	fp, ip
   18e74:	movhi	lr, #39	; 0x27
   18e78:	strbhi	lr, [r3, ip]
   18e7c:	add	r7, r7, #3
   18e80:	mov	ip, r1
   18e84:	cmp	fp, r7
   18e88:	movhi	r1, #92	; 0x5c
   18e8c:	strbhi	r1, [r3, r7]
   18e90:	add	r1, r7, #1
   18e94:	cmp	fp, r1
   18e98:	lsrhi	lr, r4, #6
   18e9c:	addhi	lr, lr, #48	; 0x30
   18ea0:	strbhi	lr, [r3, r1]
   18ea4:	add	lr, r7, #2
   18ea8:	cmp	fp, lr
   18eac:	lsrhi	r1, r4, #3
   18eb0:	andhi	r1, r1, #7
   18eb4:	addhi	r1, r1, #48	; 0x30
   18eb8:	add	sl, sl, #1
   18ebc:	strbhi	r1, [r3, lr]
   18ec0:	and	r4, r4, #7
   18ec4:	cmp	r2, sl
   18ec8:	add	r4, r4, #48	; 0x30
   18ecc:	add	r7, r7, #3
   18ed0:	bls	19230 <__assert_fail@plt+0x7b2c>
   18ed4:	mov	r1, r8
   18ed8:	cmp	fp, r7
   18edc:	strbhi	r4, [r3, r7]
   18ee0:	ldrb	r4, [r0, #1]!
   18ee4:	add	r7, r7, #1
   18ee8:	cmp	r8, #0
   18eec:	bne	18e30 <__assert_fail@plt+0x772c>
   18ef0:	cmp	r6, #0
   18ef4:	bne	18f44 <__assert_fail@plt+0x7840>
   18ef8:	eor	r6, r1, #1
   18efc:	and	r6, r6, ip
   18f00:	add	sl, sl, #1
   18f04:	cmp	r2, sl
   18f08:	uxtb	r6, r6
   18f0c:	bls	18f6c <__assert_fail@plt+0x7868>
   18f10:	cmp	r6, #0
   18f14:	beq	18ed8 <__assert_fail@plt+0x77d4>
   18f18:	cmp	fp, r7
   18f1c:	movhi	ip, #39	; 0x27
   18f20:	strbhi	ip, [r3, r7]
   18f24:	add	ip, r7, #1
   18f28:	cmp	fp, ip
   18f2c:	movhi	lr, #39	; 0x27
   18f30:	strbhi	lr, [r3, ip]
   18f34:	add	r7, r7, #2
   18f38:	mov	r6, r8
   18f3c:	mov	ip, r8
   18f40:	b	18ed8 <__assert_fail@plt+0x77d4>
   18f44:	cmp	fp, r7
   18f48:	eor	r6, r1, #1
   18f4c:	movhi	lr, #92	; 0x5c
   18f50:	and	r6, r6, ip
   18f54:	add	sl, sl, #1
   18f58:	strbhi	lr, [r3, r7]
   18f5c:	cmp	r2, sl
   18f60:	add	r7, r7, #1
   18f64:	uxtb	r6, r6
   18f68:	bhi	18f10 <__assert_fail@plt+0x780c>
   18f6c:	str	ip, [sp, #40]	; 0x28
   18f70:	ldr	r5, [sp, #48]	; 0x30
   18f74:	b	1863c <__assert_fail@plt+0x6f38>
   18f78:	ldr	r3, [sp, #24]
   18f7c:	cmn	r3, #1
   18f80:	mov	r3, #0
   18f84:	str	r3, [sp, #104]	; 0x68
   18f88:	str	r3, [sp, #108]	; 0x6c
   18f8c:	beq	192ac <__assert_fail@plt+0x7ba8>
   18f90:	mov	r2, r5
   18f94:	mov	r3, #0
   18f98:	str	r7, [sp, #88]	; 0x58
   18f9c:	ldr	r7, [sp, #152]	; 0x98
   18fa0:	str	r5, [sp, #92]	; 0x5c
   18fa4:	str	r6, [sp, #84]	; 0x54
   18fa8:	mov	r5, r3
   18fac:	mov	r6, r2
   18fb0:	str	r4, [sp, #80]	; 0x50
   18fb4:	ldr	r3, [sp, #56]	; 0x38
   18fb8:	add	r9, sl, r5
   18fbc:	add	r8, r3, r9
   18fc0:	ldr	r3, [sp, #24]
   18fc4:	mov	r1, r8
   18fc8:	sub	r2, r3, r9
   18fcc:	add	r0, sp, #100	; 0x64
   18fd0:	add	r3, sp, #104	; 0x68
   18fd4:	bl	16e30 <__assert_fail@plt+0x572c>
   18fd8:	subs	r4, r0, #0
   18fdc:	beq	19384 <__assert_fail@plt+0x7c80>
   18fe0:	cmn	r4, #1
   18fe4:	beq	19364 <__assert_fail@plt+0x7c60>
   18fe8:	cmn	r4, #2
   18fec:	beq	19304 <__assert_fail@plt+0x7c00>
   18ff0:	ldr	r2, [sp, #28]
   18ff4:	cmp	r7, #2
   18ff8:	movne	r2, #0
   18ffc:	andeq	r2, r2, #1
   19000:	cmp	r2, #0
   19004:	beq	18db4 <__assert_fail@plt+0x76b0>
   19008:	cmp	r4, #1
   1900c:	beq	18db4 <__assert_fail@plt+0x76b0>
   19010:	sub	r3, r4, #1
   19014:	add	r9, r3, r9
   19018:	ldr	r3, [sp, #56]	; 0x38
   1901c:	add	r9, r3, r9
   19020:	ldrb	r3, [r8, #1]!
   19024:	sub	r3, r3, #91	; 0x5b
   19028:	cmp	r3, #33	; 0x21
   1902c:	ldrls	pc, [pc, r3, lsl #2]
   19030:	b	18dac <__assert_fail@plt+0x76a8>
   19034:	strheq	r9, [r1], -ip
   19038:	strheq	r9, [r1], -ip
   1903c:	andeq	r8, r1, ip, lsr #27
   19040:	strheq	r9, [r1], -ip
   19044:	andeq	r8, r1, ip, lsr #27
   19048:	strheq	r9, [r1], -ip
   1904c:	andeq	r8, r1, ip, lsr #27
   19050:	andeq	r8, r1, ip, lsr #27
   19054:	andeq	r8, r1, ip, lsr #27
   19058:	andeq	r8, r1, ip, lsr #27
   1905c:	andeq	r8, r1, ip, lsr #27
   19060:	andeq	r8, r1, ip, lsr #27
   19064:	andeq	r8, r1, ip, lsr #27
   19068:	andeq	r8, r1, ip, lsr #27
   1906c:	andeq	r8, r1, ip, lsr #27
   19070:	andeq	r8, r1, ip, lsr #27
   19074:	andeq	r8, r1, ip, lsr #27
   19078:	andeq	r8, r1, ip, lsr #27
   1907c:	andeq	r8, r1, ip, lsr #27
   19080:	andeq	r8, r1, ip, lsr #27
   19084:	andeq	r8, r1, ip, lsr #27
   19088:	andeq	r8, r1, ip, lsr #27
   1908c:	andeq	r8, r1, ip, lsr #27
   19090:	andeq	r8, r1, ip, lsr #27
   19094:	andeq	r8, r1, ip, lsr #27
   19098:	andeq	r8, r1, ip, lsr #27
   1909c:	andeq	r8, r1, ip, lsr #27
   190a0:	andeq	r8, r1, ip, lsr #27
   190a4:	andeq	r8, r1, ip, lsr #27
   190a8:	andeq	r8, r1, ip, lsr #27
   190ac:	andeq	r8, r1, ip, lsr #27
   190b0:	andeq	r8, r1, ip, lsr #27
   190b4:	andeq	r8, r1, ip, lsr #27
   190b8:	strheq	r9, [r1], -ip
   190bc:	mov	r3, #2
   190c0:	ldr	sl, [sp, #32]
   190c4:	mov	r8, fp
   190c8:	str	r3, [sp, #152]	; 0x98
   190cc:	b	18844 <__assert_fail@plt+0x7140>
   190d0:	ldr	r3, [sp, #156]	; 0x9c
   190d4:	tst	r3, #1
   190d8:	bne	19204 <__assert_fail@plt+0x7b00>
   190dc:	ldr	r3, [sp, #152]	; 0x98
   190e0:	ldr	r4, [sp, #44]	; 0x2c
   190e4:	sub	r2, r3, #2
   190e8:	mov	r5, #0
   190ec:	clz	r2, r2
   190f0:	mov	r8, r4
   190f4:	lsr	r2, r2, #5
   190f8:	b	18604 <__assert_fail@plt+0x6f00>
   190fc:	ldr	r3, [sp, #156]	; 0x9c
   19100:	ands	r9, r3, #4
   19104:	beq	1923c <__assert_fail@plt+0x7b38>
   19108:	ldr	r2, [sp, #24]
   1910c:	add	r3, sl, #2
   19110:	cmp	r3, r2
   19114:	bcs	19128 <__assert_fail@plt+0x7a24>
   19118:	ldr	r2, [sp, #48]	; 0x30
   1911c:	ldrb	r4, [r2, #1]
   19120:	cmp	r4, #63	; 0x3f
   19124:	beq	193c4 <__assert_fail@plt+0x7cc0>
   19128:	mov	r2, #0
   1912c:	mov	r8, r2
   19130:	mov	r5, r2
   19134:	mov	r4, #63	; 0x3f
   19138:	b	18604 <__assert_fail@plt+0x6f00>
   1913c:	ldr	r3, [sp, #28]
   19140:	cmp	r3, #0
   19144:	bne	19468 <__assert_fail@plt+0x7d64>
   19148:	mov	r2, r5
   1914c:	mov	r8, r3
   19150:	mov	r5, #0
   19154:	mov	r4, #63	; 0x3f
   19158:	b	18604 <__assert_fail@plt+0x6f00>
   1915c:	ldr	r3, [sp, #28]
   19160:	cmp	r3, #0
   19164:	bne	19468 <__assert_fail@plt+0x7d64>
   19168:	ldr	r2, [sp, #72]	; 0x48
   1916c:	adds	r3, fp, #0
   19170:	movne	r3, #1
   19174:	cmp	r2, #0
   19178:	movne	r3, #0
   1917c:	cmp	r3, #0
   19180:	strne	fp, [sp, #72]	; 0x48
   19184:	movne	fp, #0
   19188:	bne	191c4 <__assert_fail@plt+0x7ac0>
   1918c:	cmp	fp, r7
   19190:	movhi	r2, #39	; 0x27
   19194:	ldrhi	r3, [sp, #32]
   19198:	strbhi	r2, [r3, r7]
   1919c:	add	r3, r7, #1
   191a0:	cmp	fp, r3
   191a4:	movhi	r1, #92	; 0x5c
   191a8:	ldrhi	r2, [sp, #32]
   191ac:	strbhi	r1, [r2, r3]
   191b0:	add	r3, r7, #2
   191b4:	cmp	fp, r3
   191b8:	movhi	r1, #39	; 0x27
   191bc:	ldrhi	r2, [sp, #32]
   191c0:	strbhi	r1, [r2, r3]
   191c4:	ldr	r3, [sp, #28]
   191c8:	add	r7, r7, #3
   191cc:	mov	r2, r5
   191d0:	mov	r8, r3
   191d4:	str	r5, [sp, #68]	; 0x44
   191d8:	str	r3, [sp, #40]	; 0x28
   191dc:	mov	r4, #39	; 0x27
   191e0:	b	18604 <__assert_fail@plt+0x6f00>
   191e4:	ldr	r3, [sp, #56]	; 0x38
   191e8:	ldrb	r3, [r3, #1]
   191ec:	adds	r3, r3, #0
   191f0:	movne	r3, #1
   191f4:	b	185dc <__assert_fail@plt+0x6ed8>
   191f8:	ldr	r5, [sp, #28]
   191fc:	mov	r4, #48	; 0x30
   19200:	b	18604 <__assert_fail@plt+0x6f00>
   19204:	add	sl, sl, #1
   19208:	b	18134 <__assert_fail@plt+0x6a30>
   1920c:	mov	sl, r3
   19210:	ldr	r3, [sp, #28]
   19214:	mov	r8, fp
   19218:	str	r3, [sp, #44]	; 0x2c
   1921c:	ldr	r3, [sp, #152]	; 0x98
   19220:	sub	r2, r3, #2
   19224:	clz	r2, r2
   19228:	lsr	r2, r2, #5
   1922c:	b	18844 <__assert_fail@plt+0x7140>
   19230:	str	ip, [sp, #40]	; 0x28
   19234:	ldr	r5, [sp, #48]	; 0x30
   19238:	b	18674 <__assert_fail@plt+0x6f70>
   1923c:	mov	r2, r9
   19240:	mov	r8, r9
   19244:	mov	r5, #0
   19248:	mov	r4, #63	; 0x3f
   1924c:	b	18604 <__assert_fail@plt+0x6f00>
   19250:	cmp	fp, #0
   19254:	beq	192cc <__assert_fail@plt+0x7bc8>
   19258:	ldr	r1, [sp, #32]
   1925c:	mov	r3, #34	; 0x22
   19260:	mov	r2, #1
   19264:	strb	r3, [r1]
   19268:	ldr	r3, [pc, #332]	; 193bc <__assert_fail@plt+0x7cb8>
   1926c:	str	r2, [sp, #52]	; 0x34
   19270:	mov	r7, r2
   19274:	str	r2, [sp, #44]	; 0x2c
   19278:	str	r3, [sp, #64]	; 0x40
   1927c:	b	18124 <__assert_fail@plt+0x6a20>
   19280:	ldr	r3, [pc, #300]	; 193b4 <__assert_fail@plt+0x7cb0>
   19284:	str	r3, [sp, #64]	; 0x40
   19288:	mov	r3, #0
   1928c:	str	r3, [sp, #28]
   19290:	mov	r3, #1
   19294:	str	r3, [sp, #52]	; 0x34
   19298:	mov	r7, r3
   1929c:	mov	r3, #2
   192a0:	str	r3, [sp, #152]	; 0x98
   192a4:	b	18124 <__assert_fail@plt+0x6a20>
   192a8:	bl	116e0 <abort@plt>
   192ac:	ldr	r0, [sp, #56]	; 0x38
   192b0:	bl	1153c <strlen@plt>
   192b4:	str	r0, [sp, #24]
   192b8:	b	18f90 <__assert_fail@plt+0x788c>
   192bc:	mov	r5, r8
   192c0:	mov	r4, #48	; 0x30
   192c4:	ldr	r8, [sp, #44]	; 0x2c
   192c8:	b	18604 <__assert_fail@plt+0x6f00>
   192cc:	mov	r3, #1
   192d0:	str	r3, [sp, #52]	; 0x34
   192d4:	mov	r7, r3
   192d8:	str	r3, [sp, #44]	; 0x2c
   192dc:	ldr	r3, [pc, #216]	; 193bc <__assert_fail@plt+0x7cb8>
   192e0:	str	r3, [sp, #64]	; 0x40
   192e4:	b	18124 <__assert_fail@plt+0x6a20>
   192e8:	ldr	sl, [sp, #32]
   192ec:	mov	r8, fp
   192f0:	mov	r2, r3
   192f4:	b	18844 <__assert_fail@plt+0x7140>
   192f8:	mov	r3, r5
   192fc:	mov	r5, r2
   19300:	b	18afc <__assert_fail@plt+0x73f8>
   19304:	ldr	r1, [sp, #24]
   19308:	mov	r2, r5
   1930c:	cmp	r1, r9
   19310:	mov	ip, r5
   19314:	ldr	r4, [sp, #80]	; 0x50
   19318:	ldr	r5, [sp, #92]	; 0x5c
   1931c:	ldr	r6, [sp, #84]	; 0x54
   19320:	ldr	r7, [sp, #88]	; 0x58
   19324:	bls	19358 <__assert_fail@plt+0x7c54>
   19328:	ldrb	r3, [r8]
   1932c:	cmp	r3, #0
   19330:	bne	19344 <__assert_fail@plt+0x7c40>
   19334:	b	1935c <__assert_fail@plt+0x7c58>
   19338:	ldrb	r3, [r8, #1]!
   1933c:	cmp	r3, #0
   19340:	beq	1945c <__assert_fail@plt+0x7d58>
   19344:	add	r2, r2, #1
   19348:	add	r3, sl, r2
   1934c:	cmp	r1, r3
   19350:	bhi	19338 <__assert_fail@plt+0x7c34>
   19354:	mov	ip, r2
   19358:	mov	r3, #0
   1935c:	mov	r2, r3
   19360:	b	18df4 <__assert_fail@plt+0x76f0>
   19364:	mov	r3, #0
   19368:	mov	ip, r5
   1936c:	ldr	r4, [sp, #80]	; 0x50
   19370:	ldr	r5, [sp, #92]	; 0x5c
   19374:	ldr	r6, [sp, #84]	; 0x54
   19378:	ldr	r7, [sp, #88]	; 0x58
   1937c:	mov	r2, r3
   19380:	b	18df4 <__assert_fail@plt+0x76f0>
   19384:	mov	r3, r6
   19388:	mov	ip, r5
   1938c:	eor	r5, r3, #1
   19390:	mov	r2, r6
   19394:	ldr	r4, [sp, #80]	; 0x50
   19398:	ldr	r6, [sp, #84]	; 0x54
   1939c:	ldr	r7, [sp, #88]	; 0x58
   193a0:	uxtb	r5, r5
   193a4:	b	18df4 <__assert_fail@plt+0x76f0>
   193a8:	ldr	sl, [sp, #32]
   193ac:	mov	r8, fp
   193b0:	b	19218 <__assert_fail@plt+0x7b14>
   193b4:	andeq	lr, r1, ip, lsr #11
   193b8:			; <UNDEFINED> instruction: 0x0001e5b0
   193bc:			; <UNDEFINED> instruction: 0x0001d3b8
   193c0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   193c4:	ldr	r2, [sp, #56]	; 0x38
   193c8:	ldrb	r1, [r2, r3]
   193cc:	sub	r2, r1, #33	; 0x21
   193d0:	uxtb	r2, r2
   193d4:	cmp	r2, #29
   193d8:	bhi	19478 <__assert_fail@plt+0x7d74>
   193dc:	ldr	r0, [pc, #-36]	; 193c0 <__assert_fail@plt+0x7cbc>
   193e0:	mov	ip, #1
   193e4:	ands	r2, r0, ip, lsl r2
   193e8:	beq	19488 <__assert_fail@plt+0x7d84>
   193ec:	ldr	r2, [sp, #28]
   193f0:	cmp	r2, #0
   193f4:	bne	19588 <__assert_fail@plt+0x7e84>
   193f8:	cmp	fp, r7
   193fc:	ldr	r8, [sp, #28]
   19400:	ldrhi	r2, [sp, #32]
   19404:	mov	sl, r3
   19408:	mov	r5, r8
   1940c:	strbhi	r4, [r2, r7]
   19410:	add	r2, r7, #1
   19414:	cmp	fp, r2
   19418:	movhi	r0, #34	; 0x22
   1941c:	ldrhi	ip, [sp, #32]
   19420:	mov	r4, r1
   19424:	strbhi	r0, [ip, r2]
   19428:	add	r2, r7, #2
   1942c:	cmp	fp, r2
   19430:	movhi	r0, #34	; 0x22
   19434:	ldrhi	ip, [sp, #32]
   19438:	strbhi	r0, [ip, r2]
   1943c:	add	r2, r7, #3
   19440:	cmp	fp, r2
   19444:	movhi	r0, #63	; 0x3f
   19448:	ldrhi	ip, [sp, #32]
   1944c:	add	r7, r7, #4
   19450:	strbhi	r0, [ip, r2]
   19454:	mov	r2, r8
   19458:	b	18604 <__assert_fail@plt+0x6f00>
   1945c:	mov	ip, r2
   19460:	mov	r2, r3
   19464:	b	18df4 <__assert_fail@plt+0x76f0>
   19468:	ldr	sl, [sp, #32]
   1946c:	mov	r8, fp
   19470:	ldr	r2, [sp, #28]
   19474:	b	18844 <__assert_fail@plt+0x7140>
   19478:	mov	r2, #0
   1947c:	mov	r8, r2
   19480:	mov	r5, r2
   19484:	b	18604 <__assert_fail@plt+0x6f00>
   19488:	mov	r8, r2
   1948c:	mov	r5, #0
   19490:	b	18604 <__assert_fail@plt+0x6f00>
   19494:	ldr	r1, [sp, #152]	; 0x98
   19498:	bl	17f60 <__assert_fail@plt+0x685c>
   1949c:	str	r0, [sp, #168]	; 0xa8
   194a0:	b	184c0 <__assert_fail@plt+0x6dbc>
   194a4:	ldr	r1, [sp, #152]	; 0x98
   194a8:	bl	17f60 <__assert_fail@plt+0x685c>
   194ac:	str	r0, [sp, #164]	; 0xa4
   194b0:	b	184a0 <__assert_fail@plt+0x6d9c>
   194b4:	ldr	r7, [sp, #28]
   194b8:	b	18500 <__assert_fail@plt+0x6dfc>
   194bc:	ldr	sl, [sp, #32]
   194c0:	ldr	r2, [sp, #68]	; 0x44
   194c4:	mov	r8, fp
   194c8:	mov	fp, r7
   194cc:	ldr	r3, [sp, #64]	; 0x40
   194d0:	cmp	r3, #0
   194d4:	moveq	r2, #0
   194d8:	andne	r2, r2, #1
   194dc:	cmp	r2, #0
   194e0:	beq	1950c <__assert_fail@plt+0x7e08>
   194e4:	mov	r2, r3
   194e8:	ldrb	r3, [r3]
   194ec:	cmp	r3, #0
   194f0:	beq	1950c <__assert_fail@plt+0x7e08>
   194f4:	cmp	r8, fp
   194f8:	strbhi	r3, [sl, fp]
   194fc:	ldrb	r3, [r2, #1]!
   19500:	add	fp, fp, #1
   19504:	cmp	r3, #0
   19508:	bne	194f4 <__assert_fail@plt+0x7df0>
   1950c:	cmp	r8, fp
   19510:	movhi	r3, #0
   19514:	strbhi	r3, [sl, fp]
   19518:	b	188a0 <__assert_fail@plt+0x719c>
   1951c:	ldr	r3, [sp, #168]	; 0xa8
   19520:	ldr	sl, [sp, #32]
   19524:	str	r3, [sp, #16]
   19528:	ldr	r3, [sp, #164]	; 0xa4
   1952c:	mov	ip, #5
   19530:	str	r3, [sp, #12]
   19534:	ldr	r3, [sp, #160]	; 0xa0
   19538:	ldr	r2, [sp, #56]	; 0x38
   1953c:	str	r3, [sp, #8]
   19540:	ldr	r3, [sp, #156]	; 0x9c
   19544:	ldr	r1, [sp, #72]	; 0x48
   19548:	str	r3, [sp, #4]
   1954c:	mov	r0, sl
   19550:	ldr	r3, [sp, #24]
   19554:	str	ip, [sp]
   19558:	bl	18080 <__assert_fail@plt+0x697c>
   1955c:	mov	fp, r0
   19560:	b	188a0 <__assert_fail@plt+0x719c>
   19564:	mov	r8, fp
   19568:	ldr	sl, [sp, #32]
   1956c:	mov	fp, r7
   19570:	mov	r2, r3
   19574:	b	194cc <__assert_fail@plt+0x7dc8>
   19578:	mov	r8, fp
   1957c:	ldr	sl, [sp, #32]
   19580:	mov	fp, r7
   19584:	b	194cc <__assert_fail@plt+0x7dc8>
   19588:	ldr	sl, [sp, #32]
   1958c:	mov	r8, fp
   19590:	b	1885c <__assert_fail@plt+0x7158>
   19594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19598:	sub	sp, sp, #52	; 0x34
   1959c:	mov	r4, r0
   195a0:	mov	r5, r3
   195a4:	mov	sl, r1
   195a8:	mov	fp, r2
   195ac:	bl	1156c <__errno_location@plt>
   195b0:	ldr	r7, [pc, #412]	; 19754 <__assert_fail@plt+0x8050>
   195b4:	cmn	r4, #-2147483647	; 0x80000001
   195b8:	ldr	r6, [r7]
   195bc:	mov	r8, r0
   195c0:	movne	r0, #0
   195c4:	moveq	r0, #1
   195c8:	ldr	r3, [r8]
   195cc:	orrs	r0, r0, r4, lsr #31
   195d0:	str	r3, [sp, #24]
   195d4:	bne	19750 <__assert_fail@plt+0x804c>
   195d8:	ldr	r2, [r7, #4]
   195dc:	cmp	r4, r2
   195e0:	blt	19640 <__assert_fail@plt+0x7f3c>
   195e4:	add	r9, r7, #8
   195e8:	cmp	r6, r9
   195ec:	str	r2, [sp, #44]	; 0x2c
   195f0:	beq	19720 <__assert_fail@plt+0x801c>
   195f4:	mov	r3, #8
   195f8:	sub	r2, r4, r2
   195fc:	mov	r0, r6
   19600:	str	r3, [sp]
   19604:	add	r2, r2, #1
   19608:	mvn	r3, #-2147483648	; 0x80000000
   1960c:	add	r1, sp, #44	; 0x2c
   19610:	bl	1a5e4 <__assert_fail@plt+0x8ee0>
   19614:	mov	r6, r0
   19618:	str	r0, [r7]
   1961c:	ldr	r0, [r7, #4]
   19620:	ldr	r2, [sp, #44]	; 0x2c
   19624:	mov	r1, #0
   19628:	sub	r2, r2, r0
   1962c:	add	r0, r6, r0, lsl #3
   19630:	lsl	r2, r2, #3
   19634:	bl	11590 <memset@plt>
   19638:	ldr	r3, [sp, #44]	; 0x2c
   1963c:	str	r3, [r7, #4]
   19640:	add	r3, r6, r4, lsl #3
   19644:	ldr	r1, [r5, #4]
   19648:	ldr	r7, [r3, #4]
   1964c:	ldr	r9, [r6, r4, lsl #3]
   19650:	ldr	r2, [r5, #40]	; 0x28
   19654:	ldr	ip, [r5, #44]	; 0x2c
   19658:	add	r0, r5, #8
   1965c:	str	r3, [sp, #28]
   19660:	ldr	r3, [r5]
   19664:	orr	r1, r1, #1
   19668:	mov	lr, r0
   1966c:	str	r1, [sp, #32]
   19670:	str	r0, [sp, #36]	; 0x24
   19674:	str	r1, [sp, #4]
   19678:	str	r2, [sp, #12]
   1967c:	str	r3, [sp]
   19680:	mov	r0, r7
   19684:	mov	r1, r9
   19688:	str	ip, [sp, #16]
   1968c:	str	lr, [sp, #8]
   19690:	mov	r3, fp
   19694:	mov	r2, sl
   19698:	bl	18080 <__assert_fail@plt+0x697c>
   1969c:	cmp	r9, r0
   196a0:	bhi	1970c <__assert_fail@plt+0x8008>
   196a4:	ldr	r3, [pc, #172]	; 19758 <__assert_fail@plt+0x8054>
   196a8:	add	r9, r0, #1
   196ac:	cmp	r7, r3
   196b0:	str	r9, [r6, r4, lsl #3]
   196b4:	beq	196c0 <__assert_fail@plt+0x7fbc>
   196b8:	mov	r0, r7
   196bc:	bl	14fa4 <__assert_fail@plt+0x38a0>
   196c0:	mov	r0, r9
   196c4:	bl	1a480 <__assert_fail@plt+0x8d7c>
   196c8:	ldr	lr, [sp, #28]
   196cc:	ldr	ip, [r5, #44]	; 0x2c
   196d0:	ldr	r4, [r5, #40]	; 0x28
   196d4:	mov	r3, fp
   196d8:	mov	r2, sl
   196dc:	mov	r1, r9
   196e0:	str	r0, [lr, #4]
   196e4:	ldr	lr, [r5]
   196e8:	ldr	r5, [sp, #36]	; 0x24
   196ec:	str	ip, [sp, #16]
   196f0:	str	r5, [sp, #8]
   196f4:	ldr	r5, [sp, #32]
   196f8:	str	r4, [sp, #12]
   196fc:	str	r5, [sp, #4]
   19700:	str	lr, [sp]
   19704:	mov	r7, r0
   19708:	bl	18080 <__assert_fail@plt+0x697c>
   1970c:	ldr	r3, [sp, #24]
   19710:	mov	r0, r7
   19714:	str	r3, [r8]
   19718:	add	sp, sp, #52	; 0x34
   1971c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19720:	mov	r3, #8
   19724:	sub	r2, r4, r2
   19728:	str	r3, [sp]
   1972c:	add	r1, sp, #44	; 0x2c
   19730:	add	r2, r2, #1
   19734:	mvn	r3, #-2147483648	; 0x80000000
   19738:	bl	1a5e4 <__assert_fail@plt+0x8ee0>
   1973c:	mov	r6, r0
   19740:	ldm	r9, {r0, r1}
   19744:	str	r6, [r7]
   19748:	stm	r6, {r0, r1}
   1974c:	b	1961c <__assert_fail@plt+0x7f18>
   19750:	bl	116e0 <abort@plt>
   19754:	ldrdeq	pc, [r2], -ip
   19758:	andeq	pc, r2, r4, asr #7
   1975c:	push	{r4, r5, r6, lr}
   19760:	mov	r5, r0
   19764:	bl	1156c <__errno_location@plt>
   19768:	cmp	r5, #0
   1976c:	mov	r1, #48	; 0x30
   19770:	mov	r4, r0
   19774:	ldr	r0, [pc, #16]	; 1978c <__assert_fail@plt+0x8088>
   19778:	ldr	r6, [r4]
   1977c:	movne	r0, r5
   19780:	bl	1a8e0 <__assert_fail@plt+0x91dc>
   19784:	str	r6, [r4]
   19788:	pop	{r4, r5, r6, pc}
   1978c:	andeq	pc, r2, r4, asr #9
   19790:	ldr	r3, [pc, #12]	; 197a4 <__assert_fail@plt+0x80a0>
   19794:	cmp	r0, #0
   19798:	moveq	r0, r3
   1979c:	ldr	r0, [r0]
   197a0:	bx	lr
   197a4:	andeq	pc, r2, r4, asr #9
   197a8:	ldr	r3, [pc, #12]	; 197bc <__assert_fail@plt+0x80b8>
   197ac:	cmp	r0, #0
   197b0:	moveq	r0, r3
   197b4:	str	r1, [r0]
   197b8:	bx	lr
   197bc:	andeq	pc, r2, r4, asr #9
   197c0:	ldr	r3, [pc, #52]	; 197fc <__assert_fail@plt+0x80f8>
   197c4:	cmp	r0, #0
   197c8:	moveq	r0, r3
   197cc:	add	r3, r0, #8
   197d0:	push	{lr}		; (str lr, [sp, #-4]!)
   197d4:	lsr	lr, r1, #5
   197d8:	and	r1, r1, #31
   197dc:	ldr	ip, [r3, lr, lsl #2]
   197e0:	lsr	r0, ip, r1
   197e4:	eor	r2, r2, r0
   197e8:	and	r2, r2, #1
   197ec:	and	r0, r0, #1
   197f0:	eor	r1, ip, r2, lsl r1
   197f4:	str	r1, [r3, lr, lsl #2]
   197f8:	pop	{pc}		; (ldr pc, [sp], #4)
   197fc:	andeq	pc, r2, r4, asr #9
   19800:	ldr	r3, [pc, #16]	; 19818 <__assert_fail@plt+0x8114>
   19804:	cmp	r0, #0
   19808:	movne	r3, r0
   1980c:	ldr	r0, [r3, #4]
   19810:	str	r1, [r3, #4]
   19814:	bx	lr
   19818:	andeq	pc, r2, r4, asr #9
   1981c:	ldr	r3, [pc, #44]	; 19850 <__assert_fail@plt+0x814c>
   19820:	cmp	r0, #0
   19824:	moveq	r0, r3
   19828:	mov	ip, #10
   1982c:	cmp	r2, #0
   19830:	cmpne	r1, #0
   19834:	str	ip, [r0]
   19838:	beq	19848 <__assert_fail@plt+0x8144>
   1983c:	str	r1, [r0, #40]	; 0x28
   19840:	str	r2, [r0, #44]	; 0x2c
   19844:	bx	lr
   19848:	push	{r4, lr}
   1984c:	bl	116e0 <abort@plt>
   19850:	andeq	pc, r2, r4, asr #9
   19854:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19858:	sub	sp, sp, #24
   1985c:	ldr	ip, [pc, #108]	; 198d0 <__assert_fail@plt+0x81cc>
   19860:	ldr	r4, [sp, #56]	; 0x38
   19864:	mov	r9, r2
   19868:	cmp	r4, #0
   1986c:	moveq	r4, ip
   19870:	mov	sl, r3
   19874:	mov	r7, r0
   19878:	mov	r8, r1
   1987c:	bl	1156c <__errno_location@plt>
   19880:	ldr	r3, [r4, #44]	; 0x2c
   19884:	mov	r1, r8
   19888:	ldr	r6, [r0]
   1988c:	str	r3, [sp, #16]
   19890:	ldr	r2, [r4, #40]	; 0x28
   19894:	add	r3, r4, #8
   19898:	str	r3, [sp, #8]
   1989c:	str	r2, [sp, #12]
   198a0:	ldr	r2, [r4, #4]
   198a4:	mov	r5, r0
   198a8:	str	r2, [sp, #4]
   198ac:	ldr	ip, [r4]
   198b0:	mov	r3, sl
   198b4:	mov	r2, r9
   198b8:	mov	r0, r7
   198bc:	str	ip, [sp]
   198c0:	bl	18080 <__assert_fail@plt+0x697c>
   198c4:	str	r6, [r5]
   198c8:	add	sp, sp, #24
   198cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   198d0:	andeq	pc, r2, r4, asr #9
   198d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198d8:	cmp	r3, #0
   198dc:	sub	sp, sp, #44	; 0x2c
   198e0:	ldr	r4, [pc, #192]	; 199a8 <__assert_fail@plt+0x82a4>
   198e4:	mov	r6, r2
   198e8:	movne	r4, r3
   198ec:	mov	r9, r1
   198f0:	mov	r8, r0
   198f4:	bl	1156c <__errno_location@plt>
   198f8:	ldr	r3, [r4, #44]	; 0x2c
   198fc:	ldr	r5, [r4, #4]
   19900:	add	sl, r4, #8
   19904:	cmp	r6, #0
   19908:	orreq	r5, r5, #1
   1990c:	mov	r1, #0
   19910:	ldr	r2, [r0]
   19914:	str	r3, [sp, #16]
   19918:	ldr	r3, [r4, #40]	; 0x28
   1991c:	stmib	sp, {r5, sl}
   19920:	str	r3, [sp, #12]
   19924:	ldr	r3, [r4]
   19928:	mov	r7, r0
   1992c:	str	r2, [sp, #28]
   19930:	str	r3, [sp]
   19934:	mov	r2, r8
   19938:	mov	r3, r9
   1993c:	mov	r0, r1
   19940:	bl	18080 <__assert_fail@plt+0x697c>
   19944:	add	r1, r0, #1
   19948:	mov	fp, r0
   1994c:	mov	r0, r1
   19950:	str	r1, [sp, #36]	; 0x24
   19954:	bl	1a480 <__assert_fail@plt+0x8d7c>
   19958:	ldr	r3, [r4, #44]	; 0x2c
   1995c:	mov	r2, r8
   19960:	str	r3, [sp, #16]
   19964:	ldr	r3, [r4, #40]	; 0x28
   19968:	str	r5, [sp, #4]
   1996c:	str	r3, [sp, #12]
   19970:	str	sl, [sp, #8]
   19974:	ldr	ip, [r4]
   19978:	ldr	r1, [sp, #36]	; 0x24
   1997c:	mov	r3, r9
   19980:	str	ip, [sp]
   19984:	str	r0, [sp, #32]
   19988:	bl	18080 <__assert_fail@plt+0x697c>
   1998c:	ldr	r2, [sp, #28]
   19990:	cmp	r6, #0
   19994:	str	r2, [r7]
   19998:	ldr	r0, [sp, #32]
   1999c:	strne	fp, [r6]
   199a0:	add	sp, sp, #44	; 0x2c
   199a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199a8:	andeq	pc, r2, r4, asr #9
   199ac:	mov	r3, r2
   199b0:	mov	r2, #0
   199b4:	b	198d4 <__assert_fail@plt+0x81d0>
   199b8:	push	{r4, r5, r6, r7, r8, lr}
   199bc:	ldr	r6, [pc, #116]	; 19a38 <__assert_fail@plt+0x8334>
   199c0:	ldr	r3, [r6, #4]
   199c4:	ldr	r7, [r6]
   199c8:	cmp	r3, #1
   199cc:	movgt	r5, r7
   199d0:	movgt	r4, #1
   199d4:	ble	199f4 <__assert_fail@plt+0x82f0>
   199d8:	ldr	r0, [r5, #12]
   199dc:	bl	14fa4 <__assert_fail@plt+0x38a0>
   199e0:	ldr	r3, [r6, #4]
   199e4:	add	r4, r4, #1
   199e8:	cmp	r3, r4
   199ec:	add	r5, r5, #8
   199f0:	bgt	199d8 <__assert_fail@plt+0x82d4>
   199f4:	ldr	r0, [r7, #4]
   199f8:	ldr	r4, [pc, #60]	; 19a3c <__assert_fail@plt+0x8338>
   199fc:	cmp	r0, r4
   19a00:	beq	19a14 <__assert_fail@plt+0x8310>
   19a04:	bl	14fa4 <__assert_fail@plt+0x38a0>
   19a08:	mov	r3, #256	; 0x100
   19a0c:	str	r4, [r6, #12]
   19a10:	str	r3, [r6, #8]
   19a14:	ldr	r4, [pc, #36]	; 19a40 <__assert_fail@plt+0x833c>
   19a18:	cmp	r7, r4
   19a1c:	beq	19a2c <__assert_fail@plt+0x8328>
   19a20:	mov	r0, r7
   19a24:	bl	14fa4 <__assert_fail@plt+0x38a0>
   19a28:	str	r4, [r6]
   19a2c:	mov	r3, #1
   19a30:	str	r3, [r6, #4]
   19a34:	pop	{r4, r5, r6, r7, r8, pc}
   19a38:	ldrdeq	pc, [r2], -ip
   19a3c:	andeq	pc, r2, r4, asr #7
   19a40:	andeq	pc, r2, r4, ror #5
   19a44:	ldr	r3, [pc, #4]	; 19a50 <__assert_fail@plt+0x834c>
   19a48:	mvn	r2, #0
   19a4c:	b	19594 <__assert_fail@plt+0x7e90>
   19a50:	andeq	pc, r2, r4, asr #9
   19a54:	ldr	r3, [pc]	; 19a5c <__assert_fail@plt+0x8358>
   19a58:	b	19594 <__assert_fail@plt+0x7e90>
   19a5c:	andeq	pc, r2, r4, asr #9
   19a60:	mov	r1, r0
   19a64:	ldr	r3, [pc, #8]	; 19a74 <__assert_fail@plt+0x8370>
   19a68:	mvn	r2, #0
   19a6c:	mov	r0, #0
   19a70:	b	19594 <__assert_fail@plt+0x7e90>
   19a74:	andeq	pc, r2, r4, asr #9
   19a78:	mov	r2, r1
   19a7c:	ldr	r3, [pc, #8]	; 19a8c <__assert_fail@plt+0x8388>
   19a80:	mov	r1, r0
   19a84:	mov	r0, #0
   19a88:	b	19594 <__assert_fail@plt+0x7e90>
   19a8c:	andeq	pc, r2, r4, asr #9
   19a90:	push	{r4, r5, lr}
   19a94:	sub	sp, sp, #52	; 0x34
   19a98:	mov	r5, r2
   19a9c:	mov	r4, r0
   19aa0:	mov	r0, sp
   19aa4:	bl	17f30 <__assert_fail@plt+0x682c>
   19aa8:	mov	r3, sp
   19aac:	mov	r1, r5
   19ab0:	mov	r0, r4
   19ab4:	mvn	r2, #0
   19ab8:	bl	19594 <__assert_fail@plt+0x7e90>
   19abc:	add	sp, sp, #52	; 0x34
   19ac0:	pop	{r4, r5, pc}
   19ac4:	push	{r4, r5, r6, lr}
   19ac8:	sub	sp, sp, #48	; 0x30
   19acc:	mov	r5, r2
   19ad0:	mov	r6, r3
   19ad4:	mov	r4, r0
   19ad8:	mov	r0, sp
   19adc:	bl	17f30 <__assert_fail@plt+0x682c>
   19ae0:	mov	r3, sp
   19ae4:	mov	r2, r6
   19ae8:	mov	r1, r5
   19aec:	mov	r0, r4
   19af0:	bl	19594 <__assert_fail@plt+0x7e90>
   19af4:	add	sp, sp, #48	; 0x30
   19af8:	pop	{r4, r5, r6, pc}
   19afc:	mov	r2, r1
   19b00:	mov	r1, r0
   19b04:	mov	r0, #0
   19b08:	b	19a90 <__assert_fail@plt+0x838c>
   19b0c:	mov	r3, r2
   19b10:	mov	r2, r1
   19b14:	mov	r1, r0
   19b18:	mov	r0, #0
   19b1c:	b	19ac4 <__assert_fail@plt+0x83c0>
   19b20:	push	{r4, r5, r6, r7, r8, lr}
   19b24:	mov	r7, r0
   19b28:	ldr	lr, [pc, #100]	; 19b94 <__assert_fail@plt+0x8490>
   19b2c:	mov	r8, r1
   19b30:	mov	r4, r2
   19b34:	ldm	lr!, {r0, r1, r2, r3}
   19b38:	sub	sp, sp, #48	; 0x30
   19b3c:	mov	ip, sp
   19b40:	lsr	r5, r4, #5
   19b44:	stmia	ip!, {r0, r1, r2, r3}
   19b48:	add	r6, sp, #8
   19b4c:	ldm	lr!, {r0, r1, r2, r3}
   19b50:	and	r4, r4, #31
   19b54:	stmia	ip!, {r0, r1, r2, r3}
   19b58:	ldm	lr, {r0, r1, r2, r3}
   19b5c:	stm	ip, {r0, r1, r2, r3}
   19b60:	mov	r2, r8
   19b64:	ldr	lr, [r6, r5, lsl #2]
   19b68:	mov	r1, r7
   19b6c:	mov	r3, sp
   19b70:	lsr	ip, lr, r4
   19b74:	eor	ip, ip, #1
   19b78:	and	ip, ip, #1
   19b7c:	mov	r0, #0
   19b80:	eor	r4, lr, ip, lsl r4
   19b84:	str	r4, [r6, r5, lsl #2]
   19b88:	bl	19594 <__assert_fail@plt+0x7e90>
   19b8c:	add	sp, sp, #48	; 0x30
   19b90:	pop	{r4, r5, r6, r7, r8, pc}
   19b94:	andeq	pc, r2, r4, asr #9
   19b98:	mov	r2, r1
   19b9c:	mvn	r1, #0
   19ba0:	b	19b20 <__assert_fail@plt+0x841c>
   19ba4:	mov	r2, #58	; 0x3a
   19ba8:	mvn	r1, #0
   19bac:	b	19b20 <__assert_fail@plt+0x841c>
   19bb0:	mov	r2, #58	; 0x3a
   19bb4:	b	19b20 <__assert_fail@plt+0x841c>
   19bb8:	push	{r4, r5, r6, r7, lr}
   19bbc:	sub	sp, sp, #100	; 0x64
   19bc0:	mov	r6, r0
   19bc4:	mov	r0, sp
   19bc8:	mov	r7, r2
   19bcc:	bl	17f30 <__assert_fail@plt+0x682c>
   19bd0:	mov	ip, sp
   19bd4:	add	lr, sp, #48	; 0x30
   19bd8:	ldm	ip!, {r0, r1, r2, r3}
   19bdc:	stmia	lr!, {r0, r1, r2, r3}
   19be0:	ldm	ip!, {r0, r1, r2, r3}
   19be4:	ldr	r5, [sp, #60]	; 0x3c
   19be8:	stmia	lr!, {r0, r1, r2, r3}
   19bec:	mvn	r4, r5
   19bf0:	ldm	ip, {r0, r1, r2, r3}
   19bf4:	and	ip, r4, #67108864	; 0x4000000
   19bf8:	eor	ip, ip, r5
   19bfc:	str	ip, [sp, #60]	; 0x3c
   19c00:	stm	lr, {r0, r1, r2, r3}
   19c04:	mov	r1, r7
   19c08:	mov	r0, r6
   19c0c:	add	r3, sp, #48	; 0x30
   19c10:	mvn	r2, #0
   19c14:	bl	19594 <__assert_fail@plt+0x7e90>
   19c18:	add	sp, sp, #100	; 0x64
   19c1c:	pop	{r4, r5, r6, r7, pc}
   19c20:	push	{r4, r5, r6, r7, r8, lr}
   19c24:	mov	r5, r1
   19c28:	ldr	lr, [pc, #100]	; 19c94 <__assert_fail@plt+0x8590>
   19c2c:	mov	r4, r2
   19c30:	mov	r7, r0
   19c34:	mov	r8, r3
   19c38:	ldm	lr!, {r0, r1, r2, r3}
   19c3c:	sub	sp, sp, #48	; 0x30
   19c40:	mov	ip, sp
   19c44:	mov	r6, #10
   19c48:	stmia	ip!, {r0, r1, r2, r3}
   19c4c:	cmp	r4, #0
   19c50:	cmpne	r5, #0
   19c54:	ldm	lr!, {r0, r1, r2, r3}
   19c58:	str	r6, [sp]
   19c5c:	stmia	ip!, {r0, r1, r2, r3}
   19c60:	ldm	lr, {r0, r1, r2, r3}
   19c64:	stm	ip, {r0, r1, r2, r3}
   19c68:	beq	19c90 <__assert_fail@plt+0x858c>
   19c6c:	mov	r3, sp
   19c70:	mov	r1, r8
   19c74:	mov	r0, r7
   19c78:	ldr	r2, [sp, #72]	; 0x48
   19c7c:	str	r5, [sp, #40]	; 0x28
   19c80:	str	r4, [sp, #44]	; 0x2c
   19c84:	bl	19594 <__assert_fail@plt+0x7e90>
   19c88:	add	sp, sp, #48	; 0x30
   19c8c:	pop	{r4, r5, r6, r7, r8, pc}
   19c90:	bl	116e0 <abort@plt>
   19c94:	andeq	pc, r2, r4, asr #9
   19c98:	push	{lr}		; (str lr, [sp, #-4]!)
   19c9c:	sub	sp, sp, #12
   19ca0:	mvn	ip, #0
   19ca4:	str	ip, [sp]
   19ca8:	bl	19c20 <__assert_fail@plt+0x851c>
   19cac:	add	sp, sp, #12
   19cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   19cb4:	push	{lr}		; (str lr, [sp, #-4]!)
   19cb8:	sub	sp, sp, #12
   19cbc:	mvn	ip, #0
   19cc0:	mov	r3, r2
   19cc4:	str	ip, [sp]
   19cc8:	mov	r2, r1
   19ccc:	mov	r1, r0
   19cd0:	mov	r0, #0
   19cd4:	bl	19c20 <__assert_fail@plt+0x851c>
   19cd8:	add	sp, sp, #12
   19cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   19ce0:	push	{lr}		; (str lr, [sp, #-4]!)
   19ce4:	sub	sp, sp, #12
   19ce8:	str	r3, [sp]
   19cec:	mov	r3, r2
   19cf0:	mov	r2, r1
   19cf4:	mov	r1, r0
   19cf8:	mov	r0, #0
   19cfc:	bl	19c20 <__assert_fail@plt+0x851c>
   19d00:	add	sp, sp, #12
   19d04:	pop	{pc}		; (ldr pc, [sp], #4)
   19d08:	ldr	r3, [pc]	; 19d10 <__assert_fail@plt+0x860c>
   19d0c:	b	19594 <__assert_fail@plt+0x7e90>
   19d10:	andeq	pc, r2, ip, ror #5
   19d14:	mov	r2, r1
   19d18:	ldr	r3, [pc, #8]	; 19d28 <__assert_fail@plt+0x8624>
   19d1c:	mov	r1, r0
   19d20:	mov	r0, #0
   19d24:	b	19594 <__assert_fail@plt+0x7e90>
   19d28:	andeq	pc, r2, ip, ror #5
   19d2c:	ldr	r3, [pc, #4]	; 19d38 <__assert_fail@plt+0x8634>
   19d30:	mvn	r2, #0
   19d34:	b	19594 <__assert_fail@plt+0x7e90>
   19d38:	andeq	pc, r2, ip, ror #5
   19d3c:	mov	r1, r0
   19d40:	ldr	r3, [pc, #8]	; 19d50 <__assert_fail@plt+0x864c>
   19d44:	mvn	r2, #0
   19d48:	mov	r0, #0
   19d4c:	b	19594 <__assert_fail@plt+0x7e90>
   19d50:	andeq	pc, r2, ip, ror #5
   19d54:	push	{r4, r5, r6, lr}
   19d58:	mov	r4, #0
   19d5c:	mov	r5, r0
   19d60:	str	r4, [r0, #4]
   19d64:	mov	r1, #524288	; 0x80000
   19d68:	ldr	r0, [pc, #52]	; 19da4 <__assert_fail@plt+0x86a0>
   19d6c:	bl	1c2c0 <__assert_fail@plt+0xabbc>
   19d70:	cmp	r0, r4
   19d74:	str	r0, [r5]
   19d78:	blt	19d84 <__assert_fail@plt+0x8680>
   19d7c:	mov	r0, r4
   19d80:	pop	{r4, r5, r6, pc}
   19d84:	mov	r1, r4
   19d88:	mov	r0, r4
   19d8c:	bl	11524 <getcwd@plt>
   19d90:	cmp	r0, r4
   19d94:	str	r0, [r5, #4]
   19d98:	movne	r0, #0
   19d9c:	mvneq	r0, #0
   19da0:	pop	{r4, r5, r6, pc}
   19da4:	andeq	lr, r1, r0, ror #4
   19da8:	ldr	r3, [r0]
   19dac:	cmp	r3, #0
   19db0:	blt	19dbc <__assert_fail@plt+0x86b8>
   19db4:	mov	r0, r3
   19db8:	b	11674 <fchdir@plt>
   19dbc:	ldr	r0, [r0, #4]
   19dc0:	b	1bf08 <__assert_fail@plt+0xa804>
   19dc4:	push	{r4, lr}
   19dc8:	mov	r4, r0
   19dcc:	ldr	r0, [r0]
   19dd0:	cmp	r0, #0
   19dd4:	blt	19ddc <__assert_fail@plt+0x86d8>
   19dd8:	bl	116ec <close@plt>
   19ddc:	ldr	r0, [r4, #4]
   19de0:	pop	{r4, lr}
   19de4:	b	14fa4 <__assert_fail@plt+0x38a0>
   19de8:	push	{r4, r5, r6, lr}
   19dec:	ldr	r4, [r0], #8
   19df0:	cmp	r4, r0
   19df4:	beq	19e14 <__assert_fail@plt+0x8710>
   19df8:	mov	r0, r4
   19dfc:	bl	1b178 <__assert_fail@plt+0x9a74>
   19e00:	cmp	r0, #0
   19e04:	movne	r3, r0
   19e08:	moveq	r3, r4
   19e0c:	mov	r0, r3
   19e10:	pop	{r4, r5, r6, pc}
   19e14:	mov	r0, r1
   19e18:	mov	r5, r1
   19e1c:	bl	1b14c <__assert_fail@plt+0x9a48>
   19e20:	subs	r3, r0, #0
   19e24:	beq	19e0c <__assert_fail@plt+0x8708>
   19e28:	mov	r2, r5
   19e2c:	mov	r1, r4
   19e30:	pop	{r4, r5, r6, lr}
   19e34:	b	11374 <memcpy@plt>
   19e38:	push	{r4, r5, r6, lr}
   19e3c:	mov	r5, r0
   19e40:	ldr	r3, [r0, #4]
   19e44:	mov	r4, r0
   19e48:	ldr	r0, [r5], #8
   19e4c:	lsl	r6, r3, #1
   19e50:	cmp	r0, r5
   19e54:	beq	19e60 <__assert_fail@plt+0x875c>
   19e58:	bl	14fa4 <__assert_fail@plt+0x38a0>
   19e5c:	ldr	r3, [r4, #4]
   19e60:	cmp	r6, r3
   19e64:	bcc	19e84 <__assert_fail@plt+0x8780>
   19e68:	mov	r0, r6
   19e6c:	bl	1b14c <__assert_fail@plt+0x9a48>
   19e70:	subs	r3, r0, #0
   19e74:	beq	19e90 <__assert_fail@plt+0x878c>
   19e78:	mov	r0, #1
   19e7c:	stm	r4, {r3, r6}
   19e80:	pop	{r4, r5, r6, pc}
   19e84:	bl	1156c <__errno_location@plt>
   19e88:	mov	r3, #12
   19e8c:	str	r3, [r0]
   19e90:	mov	r3, #1024	; 0x400
   19e94:	str	r5, [r4]
   19e98:	str	r3, [r4, #4]
   19e9c:	mov	r0, #0
   19ea0:	pop	{r4, r5, r6, pc}
   19ea4:	push	{r4, r5, r6, r7, r8, lr}
   19ea8:	mov	r5, r0
   19eac:	ldr	r3, [r0, #4]
   19eb0:	ldr	r8, [r5], #8
   19eb4:	mov	r4, r0
   19eb8:	cmp	r8, r5
   19ebc:	lsl	r7, r3, #1
   19ec0:	beq	19f18 <__assert_fail@plt+0x8814>
   19ec4:	cmp	r3, r7
   19ec8:	bhi	19ef0 <__assert_fail@plt+0x87ec>
   19ecc:	mov	r0, r8
   19ed0:	mov	r1, r7
   19ed4:	bl	1b178 <__assert_fail@plt+0x9a74>
   19ed8:	subs	r6, r0, #0
   19edc:	ldreq	r8, [r4]
   19ee0:	beq	19efc <__assert_fail@plt+0x87f8>
   19ee4:	stm	r4, {r6, r7}
   19ee8:	mov	r0, #1
   19eec:	pop	{r4, r5, r6, r7, r8, pc}
   19ef0:	bl	1156c <__errno_location@plt>
   19ef4:	mov	r3, #12
   19ef8:	str	r3, [r0]
   19efc:	mov	r0, r8
   19f00:	bl	14fa4 <__assert_fail@plt+0x38a0>
   19f04:	mov	r3, #1024	; 0x400
   19f08:	str	r5, [r4]
   19f0c:	str	r3, [r4, #4]
   19f10:	mov	r0, #0
   19f14:	pop	{r4, r5, r6, r7, r8, pc}
   19f18:	mov	r0, r7
   19f1c:	bl	1b14c <__assert_fail@plt+0x9a48>
   19f20:	subs	r6, r0, #0
   19f24:	beq	19f10 <__assert_fail@plt+0x880c>
   19f28:	mov	r1, r8
   19f2c:	ldr	r2, [r4, #4]
   19f30:	bl	11374 <memcpy@plt>
   19f34:	b	19ee4 <__assert_fail@plt+0x87e0>
   19f38:	push	{r4, r5, r6, lr}
   19f3c:	sub	sp, sp, #32
   19f40:	cmp	r1, #0
   19f44:	mov	r4, r0
   19f48:	ldr	r5, [sp, #48]	; 0x30
   19f4c:	ldr	r6, [sp, #52]	; 0x34
   19f50:	beq	1a268 <__assert_fail@plt+0x8b64>
   19f54:	stm	sp, {r2, r3}
   19f58:	mov	r3, r1
   19f5c:	ldr	r2, [pc, #808]	; 1a28c <__assert_fail@plt+0x8b88>
   19f60:	mov	r1, #1
   19f64:	bl	115c0 <__fprintf_chk@plt>
   19f68:	mov	r2, #5
   19f6c:	ldr	r1, [pc, #796]	; 1a290 <__assert_fail@plt+0x8b8c>
   19f70:	mov	r0, #0
   19f74:	bl	113bc <dcgettext@plt>
   19f78:	ldr	r3, [pc, #788]	; 1a294 <__assert_fail@plt+0x8b90>
   19f7c:	ldr	r2, [pc, #788]	; 1a298 <__assert_fail@plt+0x8b94>
   19f80:	str	r3, [sp]
   19f84:	mov	r1, #1
   19f88:	mov	r3, r0
   19f8c:	mov	r0, r4
   19f90:	bl	115c0 <__fprintf_chk@plt>
   19f94:	mov	r1, r4
   19f98:	mov	r0, #10
   19f9c:	bl	113a4 <fputc_unlocked@plt>
   19fa0:	mov	r2, #5
   19fa4:	ldr	r1, [pc, #752]	; 1a29c <__assert_fail@plt+0x8b98>
   19fa8:	mov	r0, #0
   19fac:	bl	113bc <dcgettext@plt>
   19fb0:	mov	r1, #1
   19fb4:	ldr	r3, [pc, #740]	; 1a2a0 <__assert_fail@plt+0x8b9c>
   19fb8:	mov	r2, r0
   19fbc:	mov	r0, r4
   19fc0:	bl	115c0 <__fprintf_chk@plt>
   19fc4:	mov	r1, r4
   19fc8:	mov	r0, #10
   19fcc:	bl	113a4 <fputc_unlocked@plt>
   19fd0:	cmp	r6, #9
   19fd4:	ldrls	pc, [pc, r6, lsl #2]
   19fd8:	b	1a280 <__assert_fail@plt+0x8b7c>
   19fdc:	andeq	sl, r1, r0, rrx
   19fe0:	andeq	sl, r1, r8, rrx
   19fe4:	muleq	r1, r4, r0
   19fe8:	andeq	sl, r1, r8, asr #1
   19fec:	andeq	sl, r1, r4, lsl #2
   19ff0:	andeq	sl, r1, r0, asr #2
   19ff4:	andeq	sl, r1, ip, ror r1
   19ff8:	andeq	sl, r1, r0, asr #3
   19ffc:	andeq	sl, r1, r0, lsl r2
   1a000:	andeq	sl, r1, r4
   1a004:	ldr	r1, [pc, #664]	; 1a2a4 <__assert_fail@plt+0x8ba0>
   1a008:	mov	r2, #5
   1a00c:	mov	r0, #0
   1a010:	bl	113bc <dcgettext@plt>
   1a014:	ldr	ip, [r5, #32]
   1a018:	ldr	r1, [r5, #28]
   1a01c:	ldr	r2, [r5, #24]
   1a020:	ldr	r3, [r5]
   1a024:	ldr	r6, [r5, #20]
   1a028:	str	ip, [sp, #28]
   1a02c:	ldr	lr, [r5, #16]
   1a030:	str	r1, [sp, #24]
   1a034:	ldr	ip, [r5, #12]
   1a038:	str	r2, [sp, #20]
   1a03c:	ldr	r1, [r5, #8]
   1a040:	ldr	r2, [r5, #4]
   1a044:	str	r6, [sp, #16]
   1a048:	stmib	sp, {r1, ip, lr}
   1a04c:	mov	r1, #1
   1a050:	str	r2, [sp]
   1a054:	mov	r2, r0
   1a058:	mov	r0, r4
   1a05c:	bl	115c0 <__fprintf_chk@plt>
   1a060:	add	sp, sp, #32
   1a064:	pop	{r4, r5, r6, pc}
   1a068:	mov	r2, #5
   1a06c:	ldr	r1, [pc, #564]	; 1a2a8 <__assert_fail@plt+0x8ba4>
   1a070:	mov	r0, #0
   1a074:	bl	113bc <dcgettext@plt>
   1a078:	ldr	r3, [r5]
   1a07c:	mov	r1, #1
   1a080:	mov	r2, r0
   1a084:	mov	r0, r4
   1a088:	add	sp, sp, #32
   1a08c:	pop	{r4, r5, r6, lr}
   1a090:	b	115c0 <__fprintf_chk@plt>
   1a094:	mov	r2, #5
   1a098:	ldr	r1, [pc, #524]	; 1a2ac <__assert_fail@plt+0x8ba8>
   1a09c:	mov	r0, #0
   1a0a0:	bl	113bc <dcgettext@plt>
   1a0a4:	ldr	r2, [r5, #4]
   1a0a8:	ldr	r3, [r5]
   1a0ac:	mov	r1, #1
   1a0b0:	str	r2, [sp, #48]	; 0x30
   1a0b4:	mov	r2, r0
   1a0b8:	mov	r0, r4
   1a0bc:	add	sp, sp, #32
   1a0c0:	pop	{r4, r5, r6, lr}
   1a0c4:	b	115c0 <__fprintf_chk@plt>
   1a0c8:	mov	r2, #5
   1a0cc:	ldr	r1, [pc, #476]	; 1a2b0 <__assert_fail@plt+0x8bac>
   1a0d0:	mov	r0, #0
   1a0d4:	bl	113bc <dcgettext@plt>
   1a0d8:	ldr	r1, [r5, #8]
   1a0dc:	ldr	r2, [r5, #4]
   1a0e0:	ldr	r3, [r5]
   1a0e4:	str	r1, [sp, #52]	; 0x34
   1a0e8:	str	r2, [sp, #48]	; 0x30
   1a0ec:	mov	r1, #1
   1a0f0:	mov	r2, r0
   1a0f4:	mov	r0, r4
   1a0f8:	add	sp, sp, #32
   1a0fc:	pop	{r4, r5, r6, lr}
   1a100:	b	115c0 <__fprintf_chk@plt>
   1a104:	mov	r2, #5
   1a108:	ldr	r1, [pc, #420]	; 1a2b4 <__assert_fail@plt+0x8bb0>
   1a10c:	mov	r0, #0
   1a110:	bl	113bc <dcgettext@plt>
   1a114:	ldr	r1, [r5, #8]
   1a118:	ldr	ip, [r5, #12]
   1a11c:	ldr	r2, [r5, #4]
   1a120:	ldr	r3, [r5]
   1a124:	stmib	sp, {r1, ip}
   1a128:	str	r2, [sp]
   1a12c:	mov	r1, #1
   1a130:	mov	r2, r0
   1a134:	mov	r0, r4
   1a138:	bl	115c0 <__fprintf_chk@plt>
   1a13c:	b	1a060 <__assert_fail@plt+0x895c>
   1a140:	mov	r2, #5
   1a144:	ldr	r1, [pc, #364]	; 1a2b8 <__assert_fail@plt+0x8bb4>
   1a148:	mov	r0, #0
   1a14c:	bl	113bc <dcgettext@plt>
   1a150:	add	r1, r5, #8
   1a154:	ldr	r2, [r5, #4]
   1a158:	ldm	r1, {r1, ip, lr}
   1a15c:	ldr	r3, [r5]
   1a160:	str	r2, [sp]
   1a164:	stmib	sp, {r1, ip, lr}
   1a168:	mov	r1, #1
   1a16c:	mov	r2, r0
   1a170:	mov	r0, r4
   1a174:	bl	115c0 <__fprintf_chk@plt>
   1a178:	b	1a060 <__assert_fail@plt+0x895c>
   1a17c:	mov	r2, #5
   1a180:	ldr	r1, [pc, #308]	; 1a2bc <__assert_fail@plt+0x8bb8>
   1a184:	mov	r0, #0
   1a188:	bl	113bc <dcgettext@plt>
   1a18c:	add	r1, r5, #8
   1a190:	ldr	r2, [r5, #4]
   1a194:	ldm	r1, {r1, ip, lr}
   1a198:	ldr	r6, [r5, #20]
   1a19c:	ldr	r3, [r5]
   1a1a0:	stmib	sp, {r1, ip, lr}
   1a1a4:	mov	r1, #1
   1a1a8:	str	r2, [sp]
   1a1ac:	str	r6, [sp, #16]
   1a1b0:	mov	r2, r0
   1a1b4:	mov	r0, r4
   1a1b8:	bl	115c0 <__fprintf_chk@plt>
   1a1bc:	b	1a060 <__assert_fail@plt+0x895c>
   1a1c0:	mov	r2, #5
   1a1c4:	ldr	r1, [pc, #244]	; 1a2c0 <__assert_fail@plt+0x8bbc>
   1a1c8:	mov	r0, #0
   1a1cc:	bl	113bc <dcgettext@plt>
   1a1d0:	ldr	r2, [r5, #24]
   1a1d4:	ldr	r3, [r5]
   1a1d8:	ldr	r6, [r5, #20]
   1a1dc:	ldr	lr, [r5, #16]
   1a1e0:	ldr	ip, [r5, #12]
   1a1e4:	str	r2, [sp, #20]
   1a1e8:	ldr	r1, [r5, #8]
   1a1ec:	ldr	r2, [r5, #4]
   1a1f0:	str	r6, [sp, #16]
   1a1f4:	stmib	sp, {r1, ip, lr}
   1a1f8:	mov	r1, #1
   1a1fc:	str	r2, [sp]
   1a200:	mov	r2, r0
   1a204:	mov	r0, r4
   1a208:	bl	115c0 <__fprintf_chk@plt>
   1a20c:	b	1a060 <__assert_fail@plt+0x895c>
   1a210:	mov	r2, #5
   1a214:	ldr	r1, [pc, #168]	; 1a2c4 <__assert_fail@plt+0x8bc0>
   1a218:	mov	r0, #0
   1a21c:	bl	113bc <dcgettext@plt>
   1a220:	ldr	r1, [r5, #28]
   1a224:	ldr	r2, [r5, #24]
   1a228:	ldr	r3, [r5]
   1a22c:	ldr	r6, [r5, #20]
   1a230:	ldr	lr, [r5, #16]
   1a234:	str	r1, [sp, #24]
   1a238:	ldr	ip, [r5, #12]
   1a23c:	str	r2, [sp, #20]
   1a240:	ldr	r1, [r5, #8]
   1a244:	ldr	r2, [r5, #4]
   1a248:	str	r6, [sp, #16]
   1a24c:	stmib	sp, {r1, ip, lr}
   1a250:	mov	r1, #1
   1a254:	str	r2, [sp]
   1a258:	mov	r2, r0
   1a25c:	mov	r0, r4
   1a260:	bl	115c0 <__fprintf_chk@plt>
   1a264:	b	1a060 <__assert_fail@plt+0x895c>
   1a268:	str	r3, [sp]
   1a26c:	mov	r1, #1
   1a270:	mov	r3, r2
   1a274:	ldr	r2, [pc, #76]	; 1a2c8 <__assert_fail@plt+0x8bc4>
   1a278:	bl	115c0 <__fprintf_chk@plt>
   1a27c:	b	19f68 <__assert_fail@plt+0x8864>
   1a280:	mov	r2, #5
   1a284:	ldr	r1, [pc, #64]	; 1a2cc <__assert_fail@plt+0x8bc8>
   1a288:	b	1a00c <__assert_fail@plt+0x8908>
   1a28c:	andeq	lr, r1, r8, lsl r6
   1a290:	andeq	lr, r1, ip, lsr #12
   1a294:	andeq	r0, r0, r6, ror #15
   1a298:	andeq	lr, r1, r4, lsl #18
   1a29c:	andeq	lr, r1, r0, lsr r6
   1a2a0:	ldrdeq	lr, [r1], -ip
   1a2a4:	andeq	lr, r1, ip, lsl #16
   1a2a8:	andeq	lr, r1, r0, lsl #14
   1a2ac:	andeq	lr, r1, r0, lsl r7
   1a2b0:	andeq	lr, r1, r8, lsr #14
   1a2b4:	andeq	lr, r1, r4, asr #14
   1a2b8:	andeq	lr, r1, r4, ror #14
   1a2bc:	andeq	lr, r1, r8, lsl #15
   1a2c0:			; <UNDEFINED> instruction: 0x0001e7b0
   1a2c4:	ldrdeq	lr, [r1], -ip
   1a2c8:	andeq	lr, r1, r4, lsr #12
   1a2cc:	andeq	lr, r1, r0, asr #16
   1a2d0:	push	{r4, r5, lr}
   1a2d4:	sub	sp, sp, #12
   1a2d8:	ldr	r5, [sp, #24]
   1a2dc:	ldr	ip, [r5]
   1a2e0:	cmp	ip, #0
   1a2e4:	beq	1a300 <__assert_fail@plt+0x8bfc>
   1a2e8:	mov	lr, r5
   1a2ec:	mov	ip, #0
   1a2f0:	ldr	r4, [lr, #4]!
   1a2f4:	add	ip, ip, #1
   1a2f8:	cmp	r4, #0
   1a2fc:	bne	1a2f0 <__assert_fail@plt+0x8bec>
   1a300:	stm	sp, {r5, ip}
   1a304:	bl	19f38 <__assert_fail@plt+0x8834>
   1a308:	add	sp, sp, #12
   1a30c:	pop	{r4, r5, pc}
   1a310:	push	{r4, r5, lr}
   1a314:	sub	sp, sp, #52	; 0x34
   1a318:	add	r5, sp, #4
   1a31c:	ldr	r4, [sp, #64]	; 0x40
   1a320:	mov	ip, #0
   1a324:	sub	r4, r4, #4
   1a328:	ldr	lr, [r4, #4]!
   1a32c:	cmp	lr, #0
   1a330:	str	lr, [r5, #4]!
   1a334:	beq	1a344 <__assert_fail@plt+0x8c40>
   1a338:	add	ip, ip, #1
   1a33c:	cmp	ip, #10
   1a340:	bne	1a328 <__assert_fail@plt+0x8c24>
   1a344:	add	lr, sp, #8
   1a348:	str	ip, [sp, #4]
   1a34c:	str	lr, [sp]
   1a350:	bl	19f38 <__assert_fail@plt+0x8834>
   1a354:	add	sp, sp, #52	; 0x34
   1a358:	pop	{r4, r5, pc}
   1a35c:	push	{r3}		; (str r3, [sp, #-4]!)
   1a360:	push	{r4, lr}
   1a364:	sub	sp, sp, #60	; 0x3c
   1a368:	add	lr, sp, #56	; 0x38
   1a36c:	add	r3, sp, #72	; 0x48
   1a370:	str	r3, [lr, #-44]!	; 0xffffffd4
   1a374:	add	r4, sp, #68	; 0x44
   1a378:	mov	r3, #0
   1a37c:	ldr	ip, [r4, #4]!
   1a380:	cmp	ip, #0
   1a384:	str	ip, [lr, #4]!
   1a388:	beq	1a398 <__assert_fail@plt+0x8c94>
   1a38c:	add	r3, r3, #1
   1a390:	cmp	r3, #10
   1a394:	bne	1a37c <__assert_fail@plt+0x8c78>
   1a398:	add	ip, sp, #16
   1a39c:	str	r3, [sp, #4]
   1a3a0:	str	ip, [sp]
   1a3a4:	ldr	r3, [sp, #68]	; 0x44
   1a3a8:	bl	19f38 <__assert_fail@plt+0x8834>
   1a3ac:	add	sp, sp, #60	; 0x3c
   1a3b0:	pop	{r4, lr}
   1a3b4:	add	sp, sp, #4
   1a3b8:	bx	lr
   1a3bc:	ldr	r3, [pc, #116]	; 1a438 <__assert_fail@plt+0x8d34>
   1a3c0:	push	{r4, lr}
   1a3c4:	mov	r0, #10
   1a3c8:	ldr	r1, [r3]
   1a3cc:	bl	113a4 <fputc_unlocked@plt>
   1a3d0:	mov	r2, #5
   1a3d4:	ldr	r1, [pc, #96]	; 1a43c <__assert_fail@plt+0x8d38>
   1a3d8:	mov	r0, #0
   1a3dc:	bl	113bc <dcgettext@plt>
   1a3e0:	ldr	r2, [pc, #88]	; 1a440 <__assert_fail@plt+0x8d3c>
   1a3e4:	mov	r1, r0
   1a3e8:	mov	r0, #1
   1a3ec:	bl	1159c <__printf_chk@plt>
   1a3f0:	mov	r2, #5
   1a3f4:	ldr	r1, [pc, #72]	; 1a444 <__assert_fail@plt+0x8d40>
   1a3f8:	mov	r0, #0
   1a3fc:	bl	113bc <dcgettext@plt>
   1a400:	ldr	r3, [pc, #64]	; 1a448 <__assert_fail@plt+0x8d44>
   1a404:	ldr	r2, [pc, #64]	; 1a44c <__assert_fail@plt+0x8d48>
   1a408:	mov	r1, r0
   1a40c:	mov	r0, #1
   1a410:	bl	1159c <__printf_chk@plt>
   1a414:	mov	r2, #5
   1a418:	ldr	r1, [pc, #48]	; 1a450 <__assert_fail@plt+0x8d4c>
   1a41c:	mov	r0, #0
   1a420:	bl	113bc <dcgettext@plt>
   1a424:	ldr	r2, [pc, #40]	; 1a454 <__assert_fail@plt+0x8d50>
   1a428:	pop	{r4, lr}
   1a42c:	mov	r1, r0
   1a430:	mov	r0, #1
   1a434:	b	1159c <__printf_chk@plt>
   1a438:	andeq	pc, r2, r4, lsr r3	; <UNPREDICTABLE>
   1a43c:	andeq	lr, r1, ip, ror r8
   1a440:	muleq	r1, r0, r8
   1a444:	andeq	lr, r1, r8, lsr #17
   1a448:	andeq	sp, r1, r8, lsr #26
   1a44c:	andeq	sp, r1, r0, asr sp
   1a450:			; <UNDEFINED> instruction: 0x0001e8bc
   1a454:	andeq	lr, r1, r4, ror #17
   1a458:	push	{r4, lr}
   1a45c:	bl	1b14c <__assert_fail@plt+0x9a48>
   1a460:	cmp	r0, #0
   1a464:	popne	{r4, pc}
   1a468:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a46c:	push	{r4, lr}
   1a470:	bl	1b14c <__assert_fail@plt+0x9a48>
   1a474:	cmp	r0, #0
   1a478:	popne	{r4, pc}
   1a47c:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a480:	push	{r4, lr}
   1a484:	bl	1b14c <__assert_fail@plt+0x9a48>
   1a488:	cmp	r0, #0
   1a48c:	popne	{r4, pc}
   1a490:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a494:	push	{r4, r5, r6, lr}
   1a498:	mov	r5, r0
   1a49c:	mov	r4, r1
   1a4a0:	bl	1b178 <__assert_fail@plt+0x9a74>
   1a4a4:	cmp	r0, #0
   1a4a8:	popne	{r4, r5, r6, pc}
   1a4ac:	adds	r4, r4, #0
   1a4b0:	movne	r4, #1
   1a4b4:	cmp	r5, #0
   1a4b8:	orreq	r4, r4, #1
   1a4bc:	cmp	r4, #0
   1a4c0:	popeq	{r4, r5, r6, pc}
   1a4c4:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a4c8:	push	{r4, lr}
   1a4cc:	cmp	r1, #0
   1a4d0:	orreq	r1, r1, #1
   1a4d4:	bl	1b178 <__assert_fail@plt+0x9a74>
   1a4d8:	cmp	r0, #0
   1a4dc:	popne	{r4, pc}
   1a4e0:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a4e4:	push	{r4, r5, r6, lr}
   1a4e8:	mov	r6, r0
   1a4ec:	mov	r5, r1
   1a4f0:	mov	r4, r2
   1a4f4:	bl	1c4c4 <__assert_fail@plt+0xadc0>
   1a4f8:	cmp	r0, #0
   1a4fc:	popne	{r4, r5, r6, pc}
   1a500:	cmp	r6, #0
   1a504:	beq	1a514 <__assert_fail@plt+0x8e10>
   1a508:	cmp	r5, #0
   1a50c:	cmpne	r4, #0
   1a510:	popeq	{r4, r5, r6, pc}
   1a514:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a518:	b	1a4e4 <__assert_fail@plt+0x8de0>
   1a51c:	cmp	r2, #0
   1a520:	cmpne	r1, #0
   1a524:	moveq	r2, #1
   1a528:	moveq	r1, r2
   1a52c:	push	{r4, lr}
   1a530:	bl	1c4c4 <__assert_fail@plt+0xadc0>
   1a534:	cmp	r0, #0
   1a538:	popne	{r4, pc}
   1a53c:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a540:	mov	r2, r1
   1a544:	mov	r1, r0
   1a548:	mov	r0, #0
   1a54c:	b	1a4e4 <__assert_fail@plt+0x8de0>
   1a550:	mov	r2, r1
   1a554:	mov	r1, r0
   1a558:	mov	r0, #0
   1a55c:	b	1a51c <__assert_fail@plt+0x8e18>
   1a560:	push	{r4, r5, r6, lr}
   1a564:	subs	r6, r0, #0
   1a568:	sub	sp, sp, #8
   1a56c:	mov	r5, r1
   1a570:	ldr	r4, [r1]
   1a574:	beq	1a5b0 <__assert_fail@plt+0x8eac>
   1a578:	lsr	r1, r4, #1
   1a57c:	add	r3, r1, #1
   1a580:	mvn	r3, r3
   1a584:	cmp	r4, r3
   1a588:	bhi	1a5ac <__assert_fail@plt+0x8ea8>
   1a58c:	add	r4, r4, #1
   1a590:	add	r4, r4, r1
   1a594:	mov	r0, r6
   1a598:	mov	r1, r4
   1a59c:	bl	1a4e4 <__assert_fail@plt+0x8de0>
   1a5a0:	str	r4, [r5]
   1a5a4:	add	sp, sp, #8
   1a5a8:	pop	{r4, r5, r6, pc}
   1a5ac:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a5b0:	cmp	r4, #0
   1a5b4:	bne	1a594 <__assert_fail@plt+0x8e90>
   1a5b8:	mov	r1, r2
   1a5bc:	mov	r0, #64	; 0x40
   1a5c0:	str	r2, [sp, #4]
   1a5c4:	bl	1c7c4 <__assert_fail@plt+0xb0c0>
   1a5c8:	ldr	r2, [sp, #4]
   1a5cc:	cmp	r0, #0
   1a5d0:	movne	r4, r0
   1a5d4:	addeq	r4, r0, #1
   1a5d8:	b	1a594 <__assert_fail@plt+0x8e90>
   1a5dc:	mov	r2, #1
   1a5e0:	b	1a560 <__assert_fail@plt+0x8e5c>
   1a5e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5e8:	sub	sp, sp, #12
   1a5ec:	ldr	r6, [r1]
   1a5f0:	mov	sl, r1
   1a5f4:	mov	r9, r0
   1a5f8:	asrs	r4, r6, #1
   1a5fc:	mov	r5, r2
   1a600:	mov	fp, r3
   1a604:	ldr	r7, [sp, #48]	; 0x30
   1a608:	bmi	1a774 <__assert_fail@plt+0x9070>
   1a60c:	mvn	r3, #-2147483648	; 0x80000000
   1a610:	sub	r3, r3, r4
   1a614:	cmp	r6, r3
   1a618:	movle	r3, #0
   1a61c:	movgt	r3, #1
   1a620:	mvn	r8, fp
   1a624:	cmp	r3, #0
   1a628:	addeq	r4, r4, r6
   1a62c:	mvnne	r4, #-2147483648	; 0x80000000
   1a630:	lsr	r8, r8, #31
   1a634:	cmp	fp, r4
   1a638:	movge	r3, #0
   1a63c:	andlt	r3, r8, #1
   1a640:	cmp	r3, #0
   1a644:	beq	1a72c <__assert_fail@plt+0x9028>
   1a648:	cmp	r7, #0
   1a64c:	blt	1a7fc <__assert_fail@plt+0x90f8>
   1a650:	bne	1a7f4 <__assert_fail@plt+0x90f0>
   1a654:	mov	r2, #64	; 0x40
   1a658:	mov	r1, r7
   1a65c:	mov	r0, r2
   1a660:	str	r2, [sp, #4]
   1a664:	bl	1c9d0 <__assert_fail@plt+0xb2cc>
   1a668:	ldr	r2, [sp, #4]
   1a66c:	mov	r1, r7
   1a670:	mov	r4, r0
   1a674:	mov	r0, r2
   1a678:	bl	1cbf0 <__assert_fail@plt+0xb4ec>
   1a67c:	ldr	r2, [sp, #4]
   1a680:	sub	r1, r2, r1
   1a684:	cmp	r9, #0
   1a688:	sub	r3, r4, r6
   1a68c:	streq	r9, [sl]
   1a690:	cmp	r3, r5
   1a694:	bge	1a718 <__assert_fail@plt+0x9014>
   1a698:	cmp	r5, #0
   1a69c:	blt	1a788 <__assert_fail@plt+0x9084>
   1a6a0:	cmp	r6, #0
   1a6a4:	blt	1a6c4 <__assert_fail@plt+0x8fc0>
   1a6a8:	mvn	r3, #-2147483648	; 0x80000000
   1a6ac:	sub	r3, r3, r5
   1a6b0:	cmp	r6, r3
   1a6b4:	movle	r3, #0
   1a6b8:	movgt	r3, #1
   1a6bc:	cmp	r3, #0
   1a6c0:	bne	1a884 <__assert_fail@plt+0x9180>
   1a6c4:	add	r5, r6, r5
   1a6c8:	cmp	fp, r5
   1a6cc:	movge	r8, #0
   1a6d0:	andlt	r8, r8, #1
   1a6d4:	cmp	r8, #0
   1a6d8:	mov	r4, r5
   1a6dc:	bne	1a884 <__assert_fail@plt+0x9180>
   1a6e0:	cmp	r7, #0
   1a6e4:	blt	1a79c <__assert_fail@plt+0x9098>
   1a6e8:	beq	1a714 <__assert_fail@plt+0x9010>
   1a6ec:	cmp	r5, #0
   1a6f0:	blt	1a844 <__assert_fail@plt+0x9140>
   1a6f4:	mov	r1, r7
   1a6f8:	mvn	r0, #-2147483648	; 0x80000000
   1a6fc:	bl	1c9d0 <__assert_fail@plt+0xb2cc>
   1a700:	cmp	r5, r0
   1a704:	movle	r0, #0
   1a708:	movgt	r0, #1
   1a70c:	cmp	r0, #0
   1a710:	bne	1a884 <__assert_fail@plt+0x9180>
   1a714:	mul	r1, r5, r7
   1a718:	mov	r0, r9
   1a71c:	bl	1a494 <__assert_fail@plt+0x8d90>
   1a720:	str	r4, [sl]
   1a724:	add	sp, sp, #12
   1a728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a72c:	cmp	r7, #0
   1a730:	blt	1a7c8 <__assert_fail@plt+0x90c4>
   1a734:	beq	1a654 <__assert_fail@plt+0x8f50>
   1a738:	cmp	r4, #0
   1a73c:	blt	1a804 <__assert_fail@plt+0x9100>
   1a740:	mov	r1, r7
   1a744:	mvn	r0, #-2147483648	; 0x80000000
   1a748:	bl	1c9d0 <__assert_fail@plt+0xb2cc>
   1a74c:	cmp	r0, r4
   1a750:	movge	r0, #0
   1a754:	movlt	r0, #1
   1a758:	cmp	r0, #0
   1a75c:	mvnne	r2, #-2147483648	; 0x80000000
   1a760:	bne	1a658 <__assert_fail@plt+0x8f54>
   1a764:	mul	r1, r7, r4
   1a768:	cmp	r1, #63	; 0x3f
   1a76c:	bgt	1a684 <__assert_fail@plt+0x8f80>
   1a770:	b	1a654 <__assert_fail@plt+0x8f50>
   1a774:	rsb	r3, r4, #-2147483648	; 0x80000000
   1a778:	cmp	r6, r3
   1a77c:	movge	r3, #0
   1a780:	movlt	r3, #1
   1a784:	b	1a620 <__assert_fail@plt+0x8f1c>
   1a788:	rsb	r3, r5, #-2147483648	; 0x80000000
   1a78c:	cmp	r6, r3
   1a790:	movge	r3, #0
   1a794:	movlt	r3, #1
   1a798:	b	1a6bc <__assert_fail@plt+0x8fb8>
   1a79c:	cmp	r5, #0
   1a7a0:	blt	1a828 <__assert_fail@plt+0x9124>
   1a7a4:	cmn	r7, #1
   1a7a8:	beq	1a714 <__assert_fail@plt+0x9010>
   1a7ac:	mov	r1, r7
   1a7b0:	mov	r0, #-2147483648	; 0x80000000
   1a7b4:	bl	1c9d0 <__assert_fail@plt+0xb2cc>
   1a7b8:	cmp	r5, r0
   1a7bc:	movle	r0, #0
   1a7c0:	movgt	r0, #1
   1a7c4:	b	1a70c <__assert_fail@plt+0x9008>
   1a7c8:	cmp	r4, #0
   1a7cc:	blt	1a868 <__assert_fail@plt+0x9164>
   1a7d0:	cmn	r7, #1
   1a7d4:	beq	1a764 <__assert_fail@plt+0x9060>
   1a7d8:	mov	r1, r7
   1a7dc:	mov	r0, #-2147483648	; 0x80000000
   1a7e0:	bl	1c9d0 <__assert_fail@plt+0xb2cc>
   1a7e4:	cmp	r0, r4
   1a7e8:	movge	r0, #0
   1a7ec:	movlt	r0, #1
   1a7f0:	b	1a758 <__assert_fail@plt+0x9054>
   1a7f4:	mov	r4, fp
   1a7f8:	b	1a740 <__assert_fail@plt+0x903c>
   1a7fc:	mov	r4, fp
   1a800:	b	1a7d0 <__assert_fail@plt+0x90cc>
   1a804:	cmn	r4, #1
   1a808:	beq	1a764 <__assert_fail@plt+0x9060>
   1a80c:	mov	r1, r4
   1a810:	mov	r0, #-2147483648	; 0x80000000
   1a814:	bl	1c9d0 <__assert_fail@plt+0xb2cc>
   1a818:	cmp	r7, r0
   1a81c:	movle	r0, #0
   1a820:	movgt	r0, #1
   1a824:	b	1a758 <__assert_fail@plt+0x9054>
   1a828:	mov	r1, r7
   1a82c:	mvn	r0, #-2147483648	; 0x80000000
   1a830:	bl	1c9d0 <__assert_fail@plt+0xb2cc>
   1a834:	cmp	r5, r0
   1a838:	movge	r0, #0
   1a83c:	movlt	r0, #1
   1a840:	b	1a70c <__assert_fail@plt+0x9008>
   1a844:	cmn	r5, #1
   1a848:	beq	1a714 <__assert_fail@plt+0x9010>
   1a84c:	mov	r1, r5
   1a850:	mov	r0, #-2147483648	; 0x80000000
   1a854:	bl	1c9d0 <__assert_fail@plt+0xb2cc>
   1a858:	cmp	r7, r0
   1a85c:	movle	r0, #0
   1a860:	movgt	r0, #1
   1a864:	b	1a70c <__assert_fail@plt+0x9008>
   1a868:	mov	r1, r7
   1a86c:	mvn	r0, #-2147483648	; 0x80000000
   1a870:	bl	1c9d0 <__assert_fail@plt+0xb2cc>
   1a874:	cmp	r0, r4
   1a878:	movle	r0, #0
   1a87c:	movgt	r0, #1
   1a880:	b	1a758 <__assert_fail@plt+0x9054>
   1a884:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a888:	push	{r4, lr}
   1a88c:	mov	r1, #1
   1a890:	bl	1b104 <__assert_fail@plt+0x9a00>
   1a894:	cmp	r0, #0
   1a898:	popne	{r4, pc}
   1a89c:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a8a0:	push	{r4, lr}
   1a8a4:	mov	r1, #1
   1a8a8:	bl	1b104 <__assert_fail@plt+0x9a00>
   1a8ac:	cmp	r0, #0
   1a8b0:	popne	{r4, pc}
   1a8b4:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a8b8:	push	{r4, lr}
   1a8bc:	bl	1b104 <__assert_fail@plt+0x9a00>
   1a8c0:	cmp	r0, #0
   1a8c4:	popne	{r4, pc}
   1a8c8:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a8cc:	push	{r4, lr}
   1a8d0:	bl	1b104 <__assert_fail@plt+0x9a00>
   1a8d4:	cmp	r0, #0
   1a8d8:	popne	{r4, pc}
   1a8dc:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a8e0:	push	{r4, r5, r6, lr}
   1a8e4:	mov	r6, r0
   1a8e8:	mov	r0, r1
   1a8ec:	mov	r4, r1
   1a8f0:	bl	1b14c <__assert_fail@plt+0x9a48>
   1a8f4:	subs	r5, r0, #0
   1a8f8:	beq	1a910 <__assert_fail@plt+0x920c>
   1a8fc:	mov	r2, r4
   1a900:	mov	r1, r6
   1a904:	bl	11374 <memcpy@plt>
   1a908:	mov	r0, r5
   1a90c:	pop	{r4, r5, r6, pc}
   1a910:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a914:	push	{r4, r5, r6, lr}
   1a918:	mov	r6, r0
   1a91c:	mov	r0, r1
   1a920:	mov	r4, r1
   1a924:	bl	1b14c <__assert_fail@plt+0x9a48>
   1a928:	subs	r5, r0, #0
   1a92c:	beq	1a944 <__assert_fail@plt+0x9240>
   1a930:	mov	r2, r4
   1a934:	mov	r1, r6
   1a938:	bl	11374 <memcpy@plt>
   1a93c:	mov	r0, r5
   1a940:	pop	{r4, r5, r6, pc}
   1a944:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a948:	push	{r4, r5, r6, lr}
   1a94c:	mov	r6, r0
   1a950:	add	r0, r1, #1
   1a954:	mov	r4, r1
   1a958:	bl	1b14c <__assert_fail@plt+0x9a48>
   1a95c:	subs	r5, r0, #0
   1a960:	beq	1a980 <__assert_fail@plt+0x927c>
   1a964:	mov	r3, #0
   1a968:	mov	r1, r6
   1a96c:	strb	r3, [r5, r4]
   1a970:	mov	r2, r4
   1a974:	bl	11374 <memcpy@plt>
   1a978:	mov	r0, r5
   1a97c:	pop	{r4, r5, r6, pc}
   1a980:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1a984:	push	{r4, lr}
   1a988:	mov	r4, r0
   1a98c:	bl	1153c <strlen@plt>
   1a990:	add	r1, r0, #1
   1a994:	mov	r0, r4
   1a998:	pop	{r4, lr}
   1a99c:	b	1a8e0 <__assert_fail@plt+0x91dc>
   1a9a0:	ldr	r3, [pc, #44]	; 1a9d4 <__assert_fail@plt+0x92d0>
   1a9a4:	push	{r4, lr}
   1a9a8:	mov	r2, #5
   1a9ac:	ldr	r1, [pc, #36]	; 1a9d8 <__assert_fail@plt+0x92d4>
   1a9b0:	mov	r0, #0
   1a9b4:	ldr	r4, [r3]
   1a9b8:	bl	113bc <dcgettext@plt>
   1a9bc:	ldr	r2, [pc, #24]	; 1a9dc <__assert_fail@plt+0x92d8>
   1a9c0:	mov	r1, #0
   1a9c4:	mov	r3, r0
   1a9c8:	mov	r0, r4
   1a9cc:	bl	11494 <error@plt>
   1a9d0:	bl	116e0 <abort@plt>
   1a9d4:	ldrdeq	pc, [r2], -r4
   1a9d8:	andeq	lr, r1, r4, lsr r9
   1a9dc:	strdeq	lr, [r1], -r4
   1a9e0:	mov	r1, #0
   1a9e4:	push	{r4, lr}
   1a9e8:	mov	r0, r1
   1a9ec:	bl	11524 <getcwd@plt>
   1a9f0:	subs	r4, r0, #0
   1a9f4:	beq	1aa00 <__assert_fail@plt+0x92fc>
   1a9f8:	mov	r0, r4
   1a9fc:	pop	{r4, pc}
   1aa00:	bl	1156c <__errno_location@plt>
   1aa04:	ldr	r3, [r0]
   1aa08:	cmp	r3, #12
   1aa0c:	bne	1a9f8 <__assert_fail@plt+0x92f4>
   1aa10:	bl	1a9a0 <__assert_fail@plt+0x929c>
   1aa14:	ldr	ip, [pc, #148]	; 1aab0 <__assert_fail@plt+0x93ac>
   1aa18:	sub	r0, r0, #1
   1aa1c:	push	{lr}		; (str lr, [sp, #-4]!)
   1aa20:	sub	sp, sp, #20
   1aa24:	ldr	r5, [ip]
   1aa28:	cmp	r0, #3
   1aa2c:	ldrls	pc, [pc, r0, lsl #2]
   1aa30:	b	1aa9c <__assert_fail@plt+0x9398>
   1aa34:	andeq	sl, r1, r8, lsr #21
   1aa38:	andeq	sl, r1, r0, lsr #21
   1aa3c:	andeq	sl, r1, r0, lsr #21
   1aa40:	andeq	sl, r1, r4, asr #20
   1aa44:	ldr	r0, [pc, #104]	; 1aab4 <__assert_fail@plt+0x93b0>
   1aa48:	cmp	r1, #0
   1aa4c:	movlt	r3, #0
   1aa50:	ldrlt	r4, [pc, #96]	; 1aab8 <__assert_fail@plt+0x93b4>
   1aa54:	ldrge	r6, [r3, r1, lsl #4]
   1aa58:	sublt	r4, r4, r1
   1aa5c:	strblt	r2, [sp, #12]
   1aa60:	mov	r1, r0
   1aa64:	mov	r2, #5
   1aa68:	mov	r0, #0
   1aa6c:	strblt	r3, [sp, #13]
   1aa70:	addlt	r6, sp, #12
   1aa74:	ldrge	r4, [pc, #60]	; 1aab8 <__assert_fail@plt+0x93b4>
   1aa78:	bl	113bc <dcgettext@plt>
   1aa7c:	ldr	r3, [sp, #24]
   1aa80:	str	r6, [sp]
   1aa84:	str	r3, [sp, #4]
   1aa88:	mov	r1, #0
   1aa8c:	mov	r3, r4
   1aa90:	mov	r2, r0
   1aa94:	mov	r0, r5
   1aa98:	bl	11494 <error@plt>
   1aa9c:	bl	116e0 <abort@plt>
   1aaa0:	ldr	r0, [pc, #20]	; 1aabc <__assert_fail@plt+0x93b8>
   1aaa4:	b	1aa48 <__assert_fail@plt+0x9344>
   1aaa8:	ldr	r0, [pc, #16]	; 1aac0 <__assert_fail@plt+0x93bc>
   1aaac:	b	1aa48 <__assert_fail@plt+0x9344>
   1aab0:	ldrdeq	pc, [r2], -r4
   1aab4:	andeq	lr, r1, r8, asr #18
   1aab8:	andeq	lr, r1, ip, lsr #19
   1aabc:	andeq	lr, r1, r4, ror #18
   1aac0:	andeq	lr, r1, ip, lsl #19
   1aac4:	push	{r4, r5, r6, r7, r8, lr}
   1aac8:	subs	r5, r1, #0
   1aacc:	mov	r4, r0
   1aad0:	blt	1ab44 <__assert_fail@plt+0x9440>
   1aad4:	moveq	r6, #0
   1aad8:	moveq	r7, #0
   1aadc:	bne	1ab04 <__assert_fail@plt+0x9400>
   1aae0:	ldr	r2, [r4]
   1aae4:	ldr	r1, [r4, #4]
   1aae8:	mov	r0, #0
   1aaec:	mul	ip, r2, r7
   1aaf0:	umull	r2, r3, r2, r5
   1aaf4:	mla	r5, r5, r1, ip
   1aaf8:	add	r3, r5, r3
   1aafc:	strd	r2, [r4]
   1ab00:	pop	{r4, r5, r6, r7, r8, pc}
   1ab04:	asr	r7, r5, #31
   1ab08:	mov	r2, r5
   1ab0c:	mov	r3, r7
   1ab10:	mvn	r0, #0
   1ab14:	mvn	r1, #0
   1ab18:	bl	1cfc8 <__assert_fail@plt+0xb8c4>
   1ab1c:	ldrd	r2, [r4]
   1ab20:	mov	r6, r5
   1ab24:	cmp	r1, r3
   1ab28:	cmpeq	r0, r2
   1ab2c:	bcs	1aae0 <__assert_fail@plt+0x93dc>
   1ab30:	mvn	r2, #0
   1ab34:	mvn	r3, #0
   1ab38:	mov	r0, #1
   1ab3c:	strd	r2, [r4]
   1ab40:	pop	{r4, r5, r6, r7, r8, pc}
   1ab44:	ldrd	r2, [r0]
   1ab48:	orrs	r3, r2, r3
   1ab4c:	moveq	r6, r5
   1ab50:	asreq	r7, r6, #31
   1ab54:	bne	1ab30 <__assert_fail@plt+0x942c>
   1ab58:	b	1aae0 <__assert_fail@plt+0x93dc>
   1ab5c:	cmp	r2, #36	; 0x24
   1ab60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab64:	sub	sp, sp, #20
   1ab68:	bhi	1b0dc <__assert_fail@plt+0x99d8>
   1ab6c:	cmp	r1, #0
   1ab70:	mov	r8, r2
   1ab74:	mov	r7, r0
   1ab78:	mov	r5, r1
   1ab7c:	mov	r6, r3
   1ab80:	addeq	r5, sp, #4
   1ab84:	bl	1156c <__errno_location@plt>
   1ab88:	mov	r3, #0
   1ab8c:	str	r3, [r0]
   1ab90:	mov	r9, r0
   1ab94:	bl	11518 <__ctype_b_loc@plt>
   1ab98:	ldrb	r3, [r7]
   1ab9c:	mov	r2, r7
   1aba0:	ldr	r0, [r0]
   1aba4:	b	1abac <__assert_fail@plt+0x94a8>
   1aba8:	ldrb	r3, [r2, #1]!
   1abac:	lsl	r1, r3, #1
   1abb0:	ldrh	r4, [r0, r1]
   1abb4:	ands	r4, r4, #8192	; 0x2000
   1abb8:	bne	1aba8 <__assert_fail@plt+0x94a4>
   1abbc:	cmp	r3, #45	; 0x2d
   1abc0:	bne	1abd4 <__assert_fail@plt+0x94d0>
   1abc4:	mov	r4, #4
   1abc8:	mov	r0, r4
   1abcc:	add	sp, sp, #20
   1abd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abd4:	mov	r2, r8
   1abd8:	mov	r3, r4
   1abdc:	mov	r1, r5
   1abe0:	mov	r0, r7
   1abe4:	bl	11380 <__strtoull_internal@plt>
   1abe8:	ldr	r8, [r5]
   1abec:	cmp	r7, r8
   1abf0:	mov	r2, r0
   1abf4:	str	r0, [sp, #8]
   1abf8:	str	r1, [sp, #12]
   1abfc:	beq	1ac48 <__assert_fail@plt+0x9544>
   1ac00:	ldr	r4, [r9]
   1ac04:	cmp	r4, #0
   1ac08:	bne	1ac38 <__assert_fail@plt+0x9534>
   1ac0c:	ldr	r3, [sp, #56]	; 0x38
   1ac10:	cmp	r3, #0
   1ac14:	beq	1ac24 <__assert_fail@plt+0x9520>
   1ac18:	ldrb	r9, [r8]
   1ac1c:	cmp	r9, #0
   1ac20:	bne	1ac80 <__assert_fail@plt+0x957c>
   1ac24:	mov	r0, r4
   1ac28:	str	r2, [r6]
   1ac2c:	str	r1, [r6, #4]
   1ac30:	add	sp, sp, #20
   1ac34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac38:	cmp	r4, #34	; 0x22
   1ac3c:	bne	1abc4 <__assert_fail@plt+0x94c0>
   1ac40:	mov	r4, #1
   1ac44:	b	1ac0c <__assert_fail@plt+0x9508>
   1ac48:	ldr	r3, [sp, #56]	; 0x38
   1ac4c:	cmp	r3, #0
   1ac50:	beq	1abc4 <__assert_fail@plt+0x94c0>
   1ac54:	ldrb	r1, [r8]
   1ac58:	cmp	r1, #0
   1ac5c:	beq	1abc4 <__assert_fail@plt+0x94c0>
   1ac60:	mov	r0, r3
   1ac64:	bl	11548 <strchr@plt>
   1ac68:	cmp	r0, #0
   1ac6c:	beq	1abc4 <__assert_fail@plt+0x94c0>
   1ac70:	ldrb	r9, [r8]
   1ac74:	mov	r2, #1
   1ac78:	mov	r3, #0
   1ac7c:	strd	r2, [sp, #8]
   1ac80:	mov	r1, r9
   1ac84:	ldr	r0, [sp, #56]	; 0x38
   1ac88:	bl	11548 <strchr@plt>
   1ac8c:	cmp	r0, #0
   1ac90:	beq	1b098 <__assert_fail@plt+0x9994>
   1ac94:	sub	r3, r9, #69	; 0x45
   1ac98:	cmp	r3, #47	; 0x2f
   1ac9c:	ldrls	pc, [pc, r3, lsl #2]
   1aca0:	b	1ad64 <__assert_fail@plt+0x9660>
   1aca4:	andeq	sl, r1, r4, asr lr
   1aca8:	andeq	sl, r1, r4, ror #26
   1acac:	andeq	sl, r1, r4, asr lr
   1acb0:	andeq	sl, r1, r4, ror #26
   1acb4:	andeq	sl, r1, r4, ror #26
   1acb8:	andeq	sl, r1, r4, ror #26
   1acbc:	andeq	sl, r1, r4, asr lr
   1acc0:	andeq	sl, r1, r4, ror #26
   1acc4:	andeq	sl, r1, r4, asr lr
   1acc8:	andeq	sl, r1, r4, ror #26
   1accc:	andeq	sl, r1, r4, ror #26
   1acd0:	andeq	sl, r1, r4, asr lr
   1acd4:	andeq	sl, r1, r4, ror #26
   1acd8:	andeq	sl, r1, r4, ror #26
   1acdc:	andeq	sl, r1, r4, ror #26
   1ace0:	andeq	sl, r1, r4, asr lr
   1ace4:	andeq	sl, r1, r4, ror #26
   1ace8:	andeq	sl, r1, r4, ror #26
   1acec:	andeq	sl, r1, r4, ror #26
   1acf0:	andeq	sl, r1, r4, ror #26
   1acf4:	andeq	sl, r1, r4, asr lr
   1acf8:	andeq	sl, r1, r4, asr lr
   1acfc:	andeq	sl, r1, r4, ror #26
   1ad00:	andeq	sl, r1, r4, ror #26
   1ad04:	andeq	sl, r1, r4, ror #26
   1ad08:	andeq	sl, r1, r4, ror #26
   1ad0c:	andeq	sl, r1, r4, ror #26
   1ad10:	andeq	sl, r1, r4, ror #26
   1ad14:	andeq	sl, r1, r4, ror #26
   1ad18:	andeq	sl, r1, r4, ror #26
   1ad1c:	andeq	sl, r1, r4, ror #26
   1ad20:	andeq	sl, r1, r4, ror #26
   1ad24:	andeq	sl, r1, r4, ror #26
   1ad28:	andeq	sl, r1, r4, ror #26
   1ad2c:	andeq	sl, r1, r4, asr lr
   1ad30:	andeq	sl, r1, r4, ror #26
   1ad34:	andeq	sl, r1, r4, ror #26
   1ad38:	andeq	sl, r1, r4, ror #26
   1ad3c:	andeq	sl, r1, r4, asr lr
   1ad40:	andeq	sl, r1, r4, ror #26
   1ad44:	andeq	sl, r1, r4, asr lr
   1ad48:	andeq	sl, r1, r4, ror #26
   1ad4c:	andeq	sl, r1, r4, ror #26
   1ad50:	andeq	sl, r1, r4, ror #26
   1ad54:	andeq	sl, r1, r4, ror #26
   1ad58:	andeq	sl, r1, r4, ror #26
   1ad5c:	andeq	sl, r1, r4, ror #26
   1ad60:	andeq	sl, r1, r4, asr lr
   1ad64:	mov	r7, #1
   1ad68:	mov	sl, #1024	; 0x400
   1ad6c:	sub	r9, r9, #66	; 0x42
   1ad70:	cmp	r9, #53	; 0x35
   1ad74:	ldrls	pc, [pc, r9, lsl #2]
   1ad78:	b	1b098 <__assert_fail@plt+0x9994>
   1ad7c:	andeq	sl, r1, r4, ror #31
   1ad80:	muleq	r1, r8, r0
   1ad84:	muleq	r1, r8, r0
   1ad88:			; <UNDEFINED> instruction: 0x0001afbc
   1ad8c:	muleq	r1, r8, r0
   1ad90:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1ad94:	muleq	r1, r8, r0
   1ad98:	muleq	r1, r8, r0
   1ad9c:	muleq	r1, r8, r0
   1ada0:	andeq	sl, r1, r4, ror pc
   1ada4:	muleq	r1, r8, r0
   1ada8:	andeq	fp, r1, r0, asr #32
   1adac:	muleq	r1, r8, r0
   1adb0:	muleq	r1, r8, r0
   1adb4:	andeq	fp, r1, r8, lsl r0
   1adb8:	muleq	r1, r8, r0
   1adbc:	muleq	r1, r8, r0
   1adc0:	muleq	r1, r8, r0
   1adc4:	andeq	fp, r1, r0, ror r0
   1adc8:	muleq	r1, r8, r0
   1adcc:	muleq	r1, r8, r0
   1add0:	muleq	r1, r8, r0
   1add4:	muleq	r1, r8, r0
   1add8:	andeq	sl, r1, ip, asr #30
   1addc:	andeq	sl, r1, r8, lsl pc
   1ade0:	muleq	r1, r8, r0
   1ade4:	muleq	r1, r8, r0
   1ade8:	muleq	r1, r8, r0
   1adec:	muleq	r1, r8, r0
   1adf0:	muleq	r1, r8, r0
   1adf4:	muleq	r1, r8, r0
   1adf8:	muleq	r1, r8, r0
   1adfc:	andeq	sl, r1, r4, ror #29
   1ae00:	ldrdeq	sl, [r1], -r4
   1ae04:	muleq	r1, r8, r0
   1ae08:	muleq	r1, r8, r0
   1ae0c:	muleq	r1, r8, r0
   1ae10:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1ae14:	muleq	r1, r8, r0
   1ae18:	muleq	r1, r8, r0
   1ae1c:	muleq	r1, r8, r0
   1ae20:	andeq	sl, r1, r4, ror pc
   1ae24:	muleq	r1, r8, r0
   1ae28:	andeq	fp, r1, r0, asr #32
   1ae2c:	muleq	r1, r8, r0
   1ae30:	muleq	r1, r8, r0
   1ae34:	muleq	r1, r8, r0
   1ae38:	muleq	r1, r8, r0
   1ae3c:	muleq	r1, r8, r0
   1ae40:	muleq	r1, r8, r0
   1ae44:	andeq	fp, r1, r0, ror r0
   1ae48:	muleq	r1, r8, r0
   1ae4c:	muleq	r1, r8, r0
   1ae50:	muleq	r1, r0, lr
   1ae54:	mov	r1, #48	; 0x30
   1ae58:	ldr	r0, [sp, #56]	; 0x38
   1ae5c:	bl	11548 <strchr@plt>
   1ae60:	cmp	r0, #0
   1ae64:	beq	1ad64 <__assert_fail@plt+0x9660>
   1ae68:	ldrb	r3, [r8, #1]
   1ae6c:	cmp	r3, #68	; 0x44
   1ae70:	beq	1ae84 <__assert_fail@plt+0x9780>
   1ae74:	cmp	r3, #105	; 0x69
   1ae78:	beq	1b0a8 <__assert_fail@plt+0x99a4>
   1ae7c:	cmp	r3, #66	; 0x42
   1ae80:	bne	1ad64 <__assert_fail@plt+0x9660>
   1ae84:	mov	r7, #2
   1ae88:	mov	sl, #1000	; 0x3e8
   1ae8c:	b	1ad6c <__assert_fail@plt+0x9668>
   1ae90:	ldrd	r2, [sp, #8]
   1ae94:	cmp	r2, #0
   1ae98:	sbcs	r1, r3, #0
   1ae9c:	blt	1b0c0 <__assert_fail@plt+0x99bc>
   1aea0:	adds	r2, r2, r2
   1aea4:	adc	r3, r3, r3
   1aea8:	mov	r1, r3
   1aeac:	mov	r9, #0
   1aeb0:	str	r2, [sp, #8]
   1aeb4:	str	r3, [sp, #12]
   1aeb8:	add	r3, r8, r7
   1aebc:	str	r3, [r5]
   1aec0:	ldrb	r3, [r8, r7]
   1aec4:	orr	r4, r4, r9
   1aec8:	cmp	r3, #0
   1aecc:	orrne	r4, r4, #2
   1aed0:	b	1ac24 <__assert_fail@plt+0x9520>
   1aed4:	ldr	r2, [sp, #8]
   1aed8:	ldr	r1, [sp, #12]
   1aedc:	mov	r9, #0
   1aee0:	b	1aeb8 <__assert_fail@plt+0x97b4>
   1aee4:	ldrd	r2, [sp, #8]
   1aee8:	ldr	r1, [pc, #512]	; 1b0f0 <__assert_fail@plt+0x99ec>
   1aeec:	mvn	r0, #0
   1aef0:	cmp	r3, r1
   1aef4:	cmpeq	r2, r0
   1aef8:	bhi	1b0c0 <__assert_fail@plt+0x99bc>
   1aefc:	lsl	r1, r3, #9
   1af00:	orr	r1, r1, r2, lsr #23
   1af04:	lsl	r2, r2, #9
   1af08:	str	r1, [sp, #12]
   1af0c:	str	r2, [sp, #8]
   1af10:	mov	r9, #0
   1af14:	b	1aeb8 <__assert_fail@plt+0x97b4>
   1af18:	mov	fp, #7
   1af1c:	mov	r9, #0
   1af20:	add	r8, sp, #8
   1af24:	mov	r1, sl
   1af28:	mov	r0, r8
   1af2c:	bl	1aac4 <__assert_fail@plt+0x93c0>
   1af30:	subs	fp, fp, #1
   1af34:	orr	r9, r9, r0
   1af38:	bne	1af24 <__assert_fail@plt+0x9820>
   1af3c:	ldr	r8, [r5]
   1af40:	ldr	r2, [sp, #8]
   1af44:	ldr	r1, [sp, #12]
   1af48:	b	1aeb8 <__assert_fail@plt+0x97b4>
   1af4c:	mov	fp, #8
   1af50:	mov	r9, #0
   1af54:	add	r8, sp, fp
   1af58:	mov	r1, sl
   1af5c:	mov	r0, r8
   1af60:	bl	1aac4 <__assert_fail@plt+0x93c0>
   1af64:	subs	fp, fp, #1
   1af68:	orr	r9, r9, r0
   1af6c:	bne	1af58 <__assert_fail@plt+0x9854>
   1af70:	b	1af3c <__assert_fail@plt+0x9838>
   1af74:	mov	r1, sl
   1af78:	add	r0, sp, #8
   1af7c:	bl	1aac4 <__assert_fail@plt+0x93c0>
   1af80:	ldr	r8, [r5]
   1af84:	ldr	r2, [sp, #8]
   1af88:	ldr	r1, [sp, #12]
   1af8c:	mov	r9, r0
   1af90:	b	1aeb8 <__assert_fail@plt+0x97b4>
   1af94:	mov	fp, #3
   1af98:	mov	r9, #0
   1af9c:	add	r8, sp, #8
   1afa0:	mov	r1, sl
   1afa4:	mov	r0, r8
   1afa8:	bl	1aac4 <__assert_fail@plt+0x93c0>
   1afac:	subs	fp, fp, #1
   1afb0:	orr	r9, r9, r0
   1afb4:	bne	1afa0 <__assert_fail@plt+0x989c>
   1afb8:	b	1af3c <__assert_fail@plt+0x9838>
   1afbc:	mov	fp, #6
   1afc0:	mov	r9, #0
   1afc4:	add	r8, sp, #8
   1afc8:	mov	r1, sl
   1afcc:	mov	r0, r8
   1afd0:	bl	1aac4 <__assert_fail@plt+0x93c0>
   1afd4:	subs	fp, fp, #1
   1afd8:	orr	r9, r9, r0
   1afdc:	bne	1afc8 <__assert_fail@plt+0x98c4>
   1afe0:	b	1af3c <__assert_fail@plt+0x9838>
   1afe4:	ldrd	r0, [sp, #8]
   1afe8:	ldr	r3, [pc, #260]	; 1b0f4 <__assert_fail@plt+0x99f0>
   1afec:	mvn	r2, #0
   1aff0:	cmp	r1, r3
   1aff4:	cmpeq	r0, r2
   1aff8:	bhi	1b0c0 <__assert_fail@plt+0x99bc>
   1affc:	lsl	r1, r1, #10
   1b000:	orr	r1, r1, r0, lsr #22
   1b004:	lsl	r2, r0, #10
   1b008:	str	r1, [sp, #12]
   1b00c:	str	r2, [sp, #8]
   1b010:	mov	r9, #0
   1b014:	b	1aeb8 <__assert_fail@plt+0x97b4>
   1b018:	mov	fp, #5
   1b01c:	mov	r9, #0
   1b020:	add	r8, sp, #8
   1b024:	mov	r1, sl
   1b028:	mov	r0, r8
   1b02c:	bl	1aac4 <__assert_fail@plt+0x93c0>
   1b030:	subs	fp, fp, #1
   1b034:	orr	r9, r9, r0
   1b038:	bne	1b024 <__assert_fail@plt+0x9920>
   1b03c:	b	1af3c <__assert_fail@plt+0x9838>
   1b040:	mov	r1, sl
   1b044:	add	r0, sp, #8
   1b048:	bl	1aac4 <__assert_fail@plt+0x93c0>
   1b04c:	mov	r1, sl
   1b050:	mov	r9, r0
   1b054:	add	r0, sp, #8
   1b058:	bl	1aac4 <__assert_fail@plt+0x93c0>
   1b05c:	ldr	r8, [r5]
   1b060:	ldr	r2, [sp, #8]
   1b064:	ldr	r1, [sp, #12]
   1b068:	orr	r9, r9, r0
   1b06c:	b	1aeb8 <__assert_fail@plt+0x97b4>
   1b070:	mov	fp, #4
   1b074:	mov	r9, #0
   1b078:	add	r8, sp, #8
   1b07c:	mov	r1, sl
   1b080:	mov	r0, r8
   1b084:	bl	1aac4 <__assert_fail@plt+0x93c0>
   1b088:	subs	fp, fp, #1
   1b08c:	orr	r9, r9, r0
   1b090:	bne	1b07c <__assert_fail@plt+0x9978>
   1b094:	b	1af3c <__assert_fail@plt+0x9838>
   1b098:	ldrd	r2, [sp, #8]
   1b09c:	orr	r4, r4, #2
   1b0a0:	strd	r2, [r6]
   1b0a4:	b	1abc8 <__assert_fail@plt+0x94c4>
   1b0a8:	ldrb	r7, [r8, #2]
   1b0ac:	mov	sl, #1024	; 0x400
   1b0b0:	cmp	r7, #66	; 0x42
   1b0b4:	movne	r7, #1
   1b0b8:	moveq	r7, #3
   1b0bc:	b	1ad6c <__assert_fail@plt+0x9668>
   1b0c0:	mvn	r1, #0
   1b0c4:	mvn	r0, #0
   1b0c8:	mvn	r2, #0
   1b0cc:	strd	r0, [sp, #8]
   1b0d0:	mov	r9, #1
   1b0d4:	mov	r1, r2
   1b0d8:	b	1aeb8 <__assert_fail@plt+0x97b4>
   1b0dc:	ldr	r3, [pc, #20]	; 1b0f8 <__assert_fail@plt+0x99f4>
   1b0e0:	mov	r2, #85	; 0x55
   1b0e4:	ldr	r1, [pc, #16]	; 1b0fc <__assert_fail@plt+0x99f8>
   1b0e8:	ldr	r0, [pc, #16]	; 1b100 <__assert_fail@plt+0x99fc>
   1b0ec:	bl	11704 <__assert_fail@plt>
   1b0f0:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1b0f4:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1b0f8:			; <UNDEFINED> instruction: 0x0001e9b0
   1b0fc:			; <UNDEFINED> instruction: 0x0001e9bc
   1b100:	andeq	lr, r1, ip, asr #19
   1b104:	cmp	r1, #0
   1b108:	cmpne	r0, #0
   1b10c:	moveq	r1, #1
   1b110:	moveq	r0, r1
   1b114:	umull	r2, r3, r0, r1
   1b118:	adds	r3, r3, #0
   1b11c:	movne	r3, #1
   1b120:	cmp	r2, #0
   1b124:	blt	1b134 <__assert_fail@plt+0x9a30>
   1b128:	cmp	r3, #0
   1b12c:	bne	1b134 <__assert_fail@plt+0x9a30>
   1b130:	b	112e4 <calloc@plt>
   1b134:	push	{r4, lr}
   1b138:	bl	1156c <__errno_location@plt>
   1b13c:	mov	r3, #12
   1b140:	str	r3, [r0]
   1b144:	mov	r0, #0
   1b148:	pop	{r4, pc}
   1b14c:	cmp	r0, #0
   1b150:	moveq	r0, #1
   1b154:	cmp	r0, #0
   1b158:	blt	1b160 <__assert_fail@plt+0x9a5c>
   1b15c:	b	114d0 <malloc@plt>
   1b160:	push	{r4, lr}
   1b164:	bl	1156c <__errno_location@plt>
   1b168:	mov	r3, #12
   1b16c:	str	r3, [r0]
   1b170:	mov	r0, #0
   1b174:	pop	{r4, pc}
   1b178:	cmp	r0, #0
   1b17c:	beq	1b1a0 <__assert_fail@plt+0x9a9c>
   1b180:	cmp	r1, #0
   1b184:	push	{lr}		; (str lr, [sp, #-4]!)
   1b188:	sub	sp, sp, #12
   1b18c:	beq	1b1a8 <__assert_fail@plt+0x9aa4>
   1b190:	blt	1b1c0 <__assert_fail@plt+0x9abc>
   1b194:	add	sp, sp, #12
   1b198:	pop	{lr}		; (ldr lr, [sp], #4)
   1b19c:	b	113d4 <realloc@plt>
   1b1a0:	mov	r0, r1
   1b1a4:	b	1b14c <__assert_fail@plt+0x9a48>
   1b1a8:	str	r1, [sp, #4]
   1b1ac:	bl	14fa4 <__assert_fail@plt+0x38a0>
   1b1b0:	ldr	r3, [sp, #4]
   1b1b4:	mov	r0, r3
   1b1b8:	add	sp, sp, #12
   1b1bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1c0:	bl	1156c <__errno_location@plt>
   1b1c4:	mov	r2, #12
   1b1c8:	mov	r3, #0
   1b1cc:	str	r2, [r0]
   1b1d0:	b	1b1b4 <__assert_fail@plt+0x9ab0>
   1b1d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b1d8:	mov	r6, #1
   1b1dc:	mov	ip, r6
   1b1e0:	mov	r8, r6
   1b1e4:	mov	lr, #0
   1b1e8:	mvn	r4, #0
   1b1ec:	add	r3, ip, lr
   1b1f0:	cmp	r3, r1
   1b1f4:	add	r5, r0, r4
   1b1f8:	bcs	1b228 <__assert_fail@plt+0x9b24>
   1b1fc:	ldrb	r5, [r5, ip]
   1b200:	ldrb	r7, [r0, r3]
   1b204:	cmp	r7, r5
   1b208:	bcs	1b294 <__assert_fail@plt+0x9b90>
   1b20c:	mov	lr, r3
   1b210:	mov	ip, #1
   1b214:	sub	r6, r3, r4
   1b218:	add	r3, ip, lr
   1b21c:	cmp	r3, r1
   1b220:	add	r5, r0, r4
   1b224:	bcc	1b1fc <__assert_fail@plt+0x9af8>
   1b228:	mov	r8, #1
   1b22c:	mov	ip, r8
   1b230:	mov	r9, r8
   1b234:	mov	lr, #0
   1b238:	mvn	r5, #0
   1b23c:	str	r6, [r2]
   1b240:	add	r3, ip, lr
   1b244:	cmp	r1, r3
   1b248:	add	r6, r0, r5
   1b24c:	bls	1b27c <__assert_fail@plt+0x9b78>
   1b250:	ldrb	r6, [r6, ip]
   1b254:	ldrb	r7, [r0, r3]
   1b258:	cmp	r7, r6
   1b25c:	bls	1b2ac <__assert_fail@plt+0x9ba8>
   1b260:	mov	lr, r3
   1b264:	mov	ip, #1
   1b268:	sub	r8, r3, r5
   1b26c:	add	r3, ip, lr
   1b270:	cmp	r1, r3
   1b274:	add	r6, r0, r5
   1b278:	bhi	1b250 <__assert_fail@plt+0x9b4c>
   1b27c:	add	r0, r4, #1
   1b280:	add	r5, r5, #1
   1b284:	cmp	r5, r0
   1b288:	strcs	r8, [r2]
   1b28c:	movcs	r0, r5
   1b290:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b294:	beq	1b2c4 <__assert_fail@plt+0x9bc0>
   1b298:	mov	r4, lr
   1b29c:	mov	r6, r8
   1b2a0:	add	lr, lr, #1
   1b2a4:	mov	ip, #1
   1b2a8:	b	1b1ec <__assert_fail@plt+0x9ae8>
   1b2ac:	beq	1b2d8 <__assert_fail@plt+0x9bd4>
   1b2b0:	mov	r5, lr
   1b2b4:	mov	r8, r9
   1b2b8:	add	lr, lr, #1
   1b2bc:	mov	ip, #1
   1b2c0:	b	1b240 <__assert_fail@plt+0x9b3c>
   1b2c4:	cmp	ip, r6
   1b2c8:	addne	ip, ip, #1
   1b2cc:	moveq	lr, r3
   1b2d0:	moveq	ip, #1
   1b2d4:	b	1b1ec <__assert_fail@plt+0x9ae8>
   1b2d8:	cmp	ip, r8
   1b2dc:	addne	ip, ip, #1
   1b2e0:	moveq	lr, r3
   1b2e4:	moveq	ip, #1
   1b2e8:	b	1b240 <__assert_fail@plt+0x9b3c>
   1b2ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2f0:	cmp	r3, #2
   1b2f4:	sub	sp, sp, #1056	; 0x420
   1b2f8:	sub	sp, sp, #4
   1b2fc:	mov	r4, r3
   1b300:	mov	r5, r0
   1b304:	mov	fp, r1
   1b308:	mov	r8, r2
   1b30c:	bhi	1b670 <__assert_fail@plt+0x9f6c>
   1b310:	sub	r2, r4, #1
   1b314:	mov	r9, r2
   1b318:	add	r6, sp, #32
   1b31c:	mov	r3, #1
   1b320:	str	r3, [sp]
   1b324:	str	r3, [sp, #28]
   1b328:	add	r2, sp, #1040	; 0x410
   1b32c:	sub	r3, r6, #4
   1b330:	add	r2, r2, #12
   1b334:	str	r4, [r3, #4]!
   1b338:	cmp	r2, r3
   1b33c:	bne	1b334 <__assert_fail@plt+0x9c30>
   1b340:	cmp	r4, #0
   1b344:	subne	r3, r4, #1
   1b348:	subne	r1, r8, #1
   1b34c:	beq	1b368 <__assert_fail@plt+0x9c64>
   1b350:	ldrb	r2, [r1, #1]!
   1b354:	add	r0, sp, #1056	; 0x420
   1b358:	add	r2, r0, r2, lsl #2
   1b35c:	str	r3, [r2, #-1024]	; 0xfffffc00
   1b360:	subs	r3, r3, #1
   1b364:	bcs	1b350 <__assert_fail@plt+0x9c4c>
   1b368:	ldr	r7, [sp]
   1b36c:	mov	r2, r9
   1b370:	add	r1, r8, r7
   1b374:	mov	r0, r8
   1b378:	bl	11398 <memcmp@plt>
   1b37c:	mov	r6, r9
   1b380:	subs	sl, r0, #0
   1b384:	bne	1b508 <__assert_fail@plt+0x9e04>
   1b388:	sub	r2, r9, #1
   1b38c:	str	r2, [sp, #4]
   1b390:	add	r2, r8, r2
   1b394:	mov	r3, r9
   1b398:	str	r2, [sp, #16]
   1b39c:	sub	r2, r4, r7
   1b3a0:	str	r2, [sp, #12]
   1b3a4:	rsb	r2, r3, #1
   1b3a8:	str	r8, [sp, #8]
   1b3ac:	mov	r9, sl
   1b3b0:	sub	r6, r4, #1
   1b3b4:	str	r2, [sp, #20]
   1b3b8:	mov	r0, fp
   1b3bc:	mov	r8, r3
   1b3c0:	b	1b3e0 <__assert_fail@plt+0x9cdc>
   1b3c4:	ldr	r3, [sp]
   1b3c8:	cmp	sl, #0
   1b3cc:	cmpne	ip, r3
   1b3d0:	mov	sl, #0
   1b3d4:	ldrcc	ip, [sp, #12]
   1b3d8:	add	r9, r9, ip
   1b3dc:	mov	r0, r7
   1b3e0:	add	r7, r9, r4
   1b3e4:	sub	r2, r7, r0
   1b3e8:	mov	r1, #0
   1b3ec:	add	r0, r5, r0
   1b3f0:	bl	115cc <memchr@plt>
   1b3f4:	adds	r3, r7, #0
   1b3f8:	movne	r3, #1
   1b3fc:	cmp	r0, #0
   1b400:	movne	r3, #0
   1b404:	cmp	r3, #0
   1b408:	mov	r0, r3
   1b40c:	beq	1b644 <__assert_fail@plt+0x9f40>
   1b410:	add	r3, r5, r7
   1b414:	add	r2, sp, #1056	; 0x420
   1b418:	ldrb	r3, [r3, #-1]
   1b41c:	add	r3, r2, r3, lsl #2
   1b420:	ldr	ip, [r3, #-1024]	; 0xfffffc00
   1b424:	cmp	ip, #0
   1b428:	bne	1b3c4 <__assert_fail@plt+0x9cc0>
   1b42c:	cmp	sl, r8
   1b430:	movcs	r3, sl
   1b434:	movcc	r3, r8
   1b438:	cmp	r3, r6
   1b43c:	bcs	1b480 <__assert_fail@plt+0x9d7c>
   1b440:	ldr	r1, [sp, #8]
   1b444:	add	r2, r9, r3
   1b448:	ldrb	r0, [r1, r3]
   1b44c:	ldrb	lr, [r5, r2]
   1b450:	add	r1, r1, r3
   1b454:	add	r2, r5, r2
   1b458:	cmp	lr, r0
   1b45c:	beq	1b474 <__assert_fail@plt+0x9d70>
   1b460:	b	1b4f4 <__assert_fail@plt+0x9df0>
   1b464:	ldrb	lr, [r1, #1]!
   1b468:	ldrb	r0, [r2, #1]!
   1b46c:	cmp	lr, r0
   1b470:	bne	1b4f4 <__assert_fail@plt+0x9df0>
   1b474:	add	r3, r3, #1
   1b478:	cmp	r3, r6
   1b47c:	bcc	1b464 <__assert_fail@plt+0x9d60>
   1b480:	cmp	sl, r8
   1b484:	ldr	r1, [sp, #4]
   1b488:	bcs	1b694 <__assert_fail@plt+0x9f90>
   1b48c:	ldr	r3, [sp, #4]
   1b490:	ldr	ip, [sp, #16]
   1b494:	add	r2, r9, r3
   1b498:	ldrb	r3, [ip]
   1b49c:	ldrb	r0, [r5, r2]
   1b4a0:	add	r2, r5, r2
   1b4a4:	cmp	r3, r0
   1b4a8:	bne	1b694 <__assert_fail@plt+0x9f90>
   1b4ac:	mov	r0, ip
   1b4b0:	sub	fp, sl, #1
   1b4b4:	b	1b4cc <__assert_fail@plt+0x9dc8>
   1b4b8:	ldrb	lr, [r0, #-1]!
   1b4bc:	ldrb	ip, [r2, #-1]!
   1b4c0:	cmp	lr, ip
   1b4c4:	bne	1b4d8 <__assert_fail@plt+0x9dd4>
   1b4c8:	mov	r1, r3
   1b4cc:	sub	r3, r1, #1
   1b4d0:	cmp	r3, fp
   1b4d4:	bne	1b4b8 <__assert_fail@plt+0x9db4>
   1b4d8:	add	sl, sl, #1
   1b4dc:	cmp	sl, r1
   1b4e0:	bhi	1b640 <__assert_fail@plt+0x9f3c>
   1b4e4:	ldr	r3, [sp]
   1b4e8:	ldr	sl, [sp, #12]
   1b4ec:	add	r9, r9, r3
   1b4f0:	b	1b3dc <__assert_fail@plt+0x9cd8>
   1b4f4:	ldr	r2, [sp, #20]
   1b4f8:	mov	sl, ip
   1b4fc:	add	r9, r2, r9
   1b500:	add	r9, r3, r9
   1b504:	b	1b3dc <__assert_fail@plt+0x9cd8>
   1b508:	sub	r3, r4, r9
   1b50c:	cmp	r3, r9
   1b510:	movcc	r3, r9
   1b514:	sub	r1, r6, #1
   1b518:	add	r3, r3, #1
   1b51c:	mov	r2, r9
   1b520:	str	r3, [sp, #8]
   1b524:	mov	r9, #0
   1b528:	add	r3, r8, r1
   1b52c:	str	r3, [sp, #12]
   1b530:	sub	r6, r4, #1
   1b534:	add	r3, r8, r2
   1b538:	mov	r0, fp
   1b53c:	mov	sl, r9
   1b540:	mov	fp, r8
   1b544:	mov	r8, r4
   1b548:	mov	r4, r2
   1b54c:	str	r3, [sp]
   1b550:	rsb	r3, r2, #1
   1b554:	str	r1, [sp, #4]
   1b558:	str	r3, [sp, #16]
   1b55c:	add	r7, r9, r8
   1b560:	sub	r2, r7, r0
   1b564:	mov	r1, sl
   1b568:	add	r0, r5, r0
   1b56c:	bl	115cc <memchr@plt>
   1b570:	cmp	r7, #0
   1b574:	clz	r0, r0
   1b578:	lsr	r0, r0, #5
   1b57c:	moveq	r0, #0
   1b580:	cmp	r0, #0
   1b584:	beq	1b644 <__assert_fail@plt+0x9f40>
   1b588:	add	r2, r5, r7
   1b58c:	add	r3, sp, #1056	; 0x420
   1b590:	ldrb	r2, [r2, #-1]
   1b594:	add	r2, r3, r2, lsl #2
   1b598:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   1b59c:	cmp	r2, #0
   1b5a0:	bne	1b658 <__assert_fail@plt+0x9f54>
   1b5a4:	cmp	r4, r6
   1b5a8:	bcs	1b5f4 <__assert_fail@plt+0x9ef0>
   1b5ac:	ldr	r3, [sp]
   1b5b0:	add	r1, r9, r4
   1b5b4:	ldrb	r0, [r3]
   1b5b8:	ldrb	r2, [r5, r1]
   1b5bc:	add	r1, r5, r1
   1b5c0:	cmp	r0, r2
   1b5c4:	movne	r2, r4
   1b5c8:	bne	1b650 <__assert_fail@plt+0x9f4c>
   1b5cc:	ldr	r0, [sp]
   1b5d0:	mov	r2, r4
   1b5d4:	b	1b5e8 <__assert_fail@plt+0x9ee4>
   1b5d8:	ldrb	ip, [r0, #1]!
   1b5dc:	ldrb	r3, [r1, #1]!
   1b5e0:	cmp	ip, r3
   1b5e4:	bne	1b650 <__assert_fail@plt+0x9f4c>
   1b5e8:	add	r2, r2, #1
   1b5ec:	cmp	r2, r6
   1b5f0:	bcc	1b5d8 <__assert_fail@plt+0x9ed4>
   1b5f4:	ldr	r3, [sp, #4]
   1b5f8:	cmn	r3, #1
   1b5fc:	beq	1b640 <__assert_fail@plt+0x9f3c>
   1b600:	ldr	r3, [sp, #4]
   1b604:	add	r1, r9, r3
   1b608:	ldr	r3, [sp, #12]
   1b60c:	ldrb	r2, [r5, r1]
   1b610:	add	r1, r5, r1
   1b614:	ldrb	r0, [r3]
   1b618:	cmp	r0, r2
   1b61c:	bne	1b664 <__assert_fail@plt+0x9f60>
   1b620:	mov	r2, r3
   1b624:	b	1b638 <__assert_fail@plt+0x9f34>
   1b628:	ldrb	r0, [r2, #-1]!
   1b62c:	ldrb	r3, [r1, #-1]!
   1b630:	cmp	r0, r3
   1b634:	bne	1b664 <__assert_fail@plt+0x9f60>
   1b638:	cmp	fp, r2
   1b63c:	bne	1b628 <__assert_fail@plt+0x9f24>
   1b640:	add	r0, r5, r9
   1b644:	add	sp, sp, #1056	; 0x420
   1b648:	add	sp, sp, #4
   1b64c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b650:	ldr	r3, [sp, #16]
   1b654:	add	r9, r3, r9
   1b658:	add	r9, r9, r2
   1b65c:	mov	r0, r7
   1b660:	b	1b55c <__assert_fail@plt+0x9e58>
   1b664:	ldr	r3, [sp, #8]
   1b668:	add	r9, r9, r3
   1b66c:	b	1b65c <__assert_fail@plt+0x9f58>
   1b670:	add	r6, sp, #32
   1b674:	mov	r1, r3
   1b678:	sub	r2, r6, #4
   1b67c:	mov	r0, r8
   1b680:	bl	1b1d4 <__assert_fail@plt+0x9ad0>
   1b684:	ldr	r3, [sp, #28]
   1b688:	str	r3, [sp]
   1b68c:	mov	r9, r0
   1b690:	b	1b328 <__assert_fail@plt+0x9c24>
   1b694:	mov	r1, r8
   1b698:	b	1b4d8 <__assert_fail@plt+0x9dd4>
   1b69c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6a0:	sub	sp, sp, #36	; 0x24
   1b6a4:	ldrb	r2, [r0]
   1b6a8:	cmp	r2, #0
   1b6ac:	beq	1ba30 <__assert_fail@plt+0xa32c>
   1b6b0:	ldrb	ip, [r1]
   1b6b4:	cmp	ip, #0
   1b6b8:	beq	1b760 <__assert_fail@plt+0xa05c>
   1b6bc:	mov	r8, r0
   1b6c0:	add	lr, r1, #1
   1b6c4:	mov	sl, #1
   1b6c8:	b	1b6d8 <__assert_fail@plt+0x9fd4>
   1b6cc:	ldrb	ip, [lr], #1
   1b6d0:	cmp	ip, #0
   1b6d4:	beq	1b700 <__assert_fail@plt+0x9ffc>
   1b6d8:	cmp	ip, r2
   1b6dc:	movne	sl, #0
   1b6e0:	andeq	sl, sl, #1
   1b6e4:	ldrb	r2, [r8, #1]!
   1b6e8:	mov	r6, lr
   1b6ec:	cmp	r2, #0
   1b6f0:	bne	1b6cc <__assert_fail@plt+0x9fc8>
   1b6f4:	ldrb	r3, [r6]
   1b6f8:	cmp	r3, #0
   1b6fc:	bne	1b768 <__assert_fail@plt+0xa064>
   1b700:	cmp	sl, #0
   1b704:	bne	1b760 <__assert_fail@plt+0xa05c>
   1b708:	mov	r4, r1
   1b70c:	mov	r5, r0
   1b710:	ldrb	r1, [r1]
   1b714:	add	r0, r0, #1
   1b718:	bl	11548 <strchr@plt>
   1b71c:	sub	r4, r6, r4
   1b720:	subs	r7, r0, #0
   1b724:	beq	1b768 <__assert_fail@plt+0xa064>
   1b728:	cmp	r4, #1
   1b72c:	beq	1ba28 <__assert_fail@plt+0xa324>
   1b730:	add	r0, r5, r4
   1b734:	cmp	r7, r0
   1b738:	subls	r1, r0, r7
   1b73c:	movhi	r1, #1
   1b740:	cmp	r4, #31
   1b744:	sub	r6, r6, r4
   1b748:	mov	r8, r1
   1b74c:	bls	1b774 <__assert_fail@plt+0xa070>
   1b750:	mov	r3, r4
   1b754:	mov	r2, r6
   1b758:	mov	r0, r7
   1b75c:	bl	1b2ec <__assert_fail@plt+0x9be8>
   1b760:	add	sp, sp, #36	; 0x24
   1b764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b768:	mov	r0, #0
   1b76c:	add	sp, sp, #36	; 0x24
   1b770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b774:	cmp	r4, #2
   1b778:	bhi	1ba00 <__assert_fail@plt+0xa2fc>
   1b77c:	sub	r9, r4, #1
   1b780:	mov	r3, #1
   1b784:	str	r3, [sp, #8]
   1b788:	str	r3, [sp, #28]
   1b78c:	ldr	r5, [sp, #8]
   1b790:	mov	r2, r9
   1b794:	add	r1, r6, r5
   1b798:	mov	r0, r6
   1b79c:	bl	11398 <memcmp@plt>
   1b7a0:	subs	fp, r0, #0
   1b7a4:	bne	1b8dc <__assert_fail@plt+0xa1d8>
   1b7a8:	sub	r3, r9, #1
   1b7ac:	str	r3, [sp, #4]
   1b7b0:	add	r3, r6, r3
   1b7b4:	str	r3, [sp, #20]
   1b7b8:	mov	sl, fp
   1b7bc:	sub	r3, r4, r5
   1b7c0:	mov	r0, r8
   1b7c4:	str	r3, [sp, #16]
   1b7c8:	rsb	r3, r9, #1
   1b7cc:	str	r3, [sp, #12]
   1b7d0:	add	r5, r4, sl
   1b7d4:	sub	r2, r5, r0
   1b7d8:	mov	r1, #0
   1b7dc:	add	r0, r7, r0
   1b7e0:	bl	115cc <memchr@plt>
   1b7e4:	adds	r3, r5, #0
   1b7e8:	movne	r3, #1
   1b7ec:	cmp	r0, #0
   1b7f0:	movne	r3, #0
   1b7f4:	cmp	r3, #0
   1b7f8:	mov	r0, r3
   1b7fc:	beq	1b760 <__assert_fail@plt+0xa05c>
   1b800:	cmp	r9, fp
   1b804:	movcs	r3, r9
   1b808:	movcc	r3, fp
   1b80c:	cmp	r4, r3
   1b810:	bls	1b850 <__assert_fail@plt+0xa14c>
   1b814:	add	r2, r3, sl
   1b818:	ldrb	r1, [r6, r3]
   1b81c:	ldrb	r0, [r7, r2]
   1b820:	add	ip, r6, r3
   1b824:	add	r2, r7, r2
   1b828:	cmp	r0, r1
   1b82c:	beq	1b844 <__assert_fail@plt+0xa140>
   1b830:	b	1b8c8 <__assert_fail@plt+0xa1c4>
   1b834:	ldrb	r0, [ip, #1]!
   1b838:	ldrb	r1, [r2, #1]!
   1b83c:	cmp	r0, r1
   1b840:	bne	1b8c8 <__assert_fail@plt+0xa1c4>
   1b844:	add	r3, r3, #1
   1b848:	cmp	r4, r3
   1b84c:	bne	1b834 <__assert_fail@plt+0xa130>
   1b850:	cmp	r9, fp
   1b854:	ldr	r1, [sp, #4]
   1b858:	bls	1ba20 <__assert_fail@plt+0xa31c>
   1b85c:	ldr	r3, [sp, #4]
   1b860:	ldr	ip, [sp, #20]
   1b864:	add	r2, sl, r3
   1b868:	ldrb	r3, [ip]
   1b86c:	ldrb	r0, [r7, r2]
   1b870:	add	r2, r7, r2
   1b874:	cmp	r3, r0
   1b878:	bne	1ba20 <__assert_fail@plt+0xa31c>
   1b87c:	mov	r0, ip
   1b880:	sub	r8, fp, #1
   1b884:	b	1b89c <__assert_fail@plt+0xa198>
   1b888:	ldrb	lr, [r0, #-1]!
   1b88c:	ldrb	ip, [r2, #-1]!
   1b890:	cmp	lr, ip
   1b894:	bne	1b8a8 <__assert_fail@plt+0xa1a4>
   1b898:	mov	r1, r3
   1b89c:	sub	r3, r1, #1
   1b8a0:	cmp	r3, r8
   1b8a4:	bne	1b888 <__assert_fail@plt+0xa184>
   1b8a8:	add	fp, fp, #1
   1b8ac:	cmp	fp, r1
   1b8b0:	bhi	1ba3c <__assert_fail@plt+0xa338>
   1b8b4:	ldr	r3, [sp, #8]
   1b8b8:	ldr	fp, [sp, #16]
   1b8bc:	add	sl, sl, r3
   1b8c0:	mov	r0, r5
   1b8c4:	b	1b7d0 <__assert_fail@plt+0xa0cc>
   1b8c8:	ldr	r2, [sp, #12]
   1b8cc:	mov	fp, #0
   1b8d0:	add	sl, r2, sl
   1b8d4:	add	sl, sl, r3
   1b8d8:	b	1b8c0 <__assert_fail@plt+0xa1bc>
   1b8dc:	sub	r3, r4, r9
   1b8e0:	cmp	r3, r9
   1b8e4:	movcc	r3, r9
   1b8e8:	sub	r2, r9, #1
   1b8ec:	add	r3, r3, #1
   1b8f0:	str	r3, [sp, #8]
   1b8f4:	mov	r0, r8
   1b8f8:	add	r3, r6, r2
   1b8fc:	mov	r5, #0
   1b900:	add	sl, r6, r9
   1b904:	mov	r8, r2
   1b908:	str	r3, [sp, #12]
   1b90c:	rsb	r3, r9, #1
   1b910:	str	r3, [sp, #4]
   1b914:	add	fp, r4, r5
   1b918:	sub	r2, fp, r0
   1b91c:	mov	r1, #0
   1b920:	add	r0, r7, r0
   1b924:	bl	115cc <memchr@plt>
   1b928:	adds	r3, fp, #0
   1b92c:	movne	r3, #1
   1b930:	cmp	r0, #0
   1b934:	movne	r3, #0
   1b938:	cmp	r3, #0
   1b93c:	mov	r0, r3
   1b940:	beq	1b760 <__assert_fail@plt+0xa05c>
   1b944:	cmp	r4, r9
   1b948:	bls	1b990 <__assert_fail@plt+0xa28c>
   1b94c:	add	r1, r9, r5
   1b950:	ldrb	r0, [sl]
   1b954:	ldrb	r2, [r7, r1]
   1b958:	add	r1, r7, r1
   1b95c:	cmp	r0, r2
   1b960:	movne	r2, r9
   1b964:	bne	1b9e0 <__assert_fail@plt+0xa2dc>
   1b968:	mov	r0, sl
   1b96c:	mov	r2, r9
   1b970:	b	1b984 <__assert_fail@plt+0xa280>
   1b974:	ldrb	ip, [r0, #1]!
   1b978:	ldrb	r3, [r1, #1]!
   1b97c:	cmp	ip, r3
   1b980:	bne	1b9e0 <__assert_fail@plt+0xa2dc>
   1b984:	add	r2, r2, #1
   1b988:	cmp	r4, r2
   1b98c:	bhi	1b974 <__assert_fail@plt+0xa270>
   1b990:	cmn	r8, #1
   1b994:	beq	1b9d4 <__assert_fail@plt+0xa2d0>
   1b998:	ldr	r3, [sp, #12]
   1b99c:	add	r1, r5, r8
   1b9a0:	ldrb	r0, [r3]
   1b9a4:	ldrb	r2, [r7, r1]
   1b9a8:	add	r1, r7, r1
   1b9ac:	cmp	r0, r2
   1b9b0:	bne	1b9f4 <__assert_fail@plt+0xa2f0>
   1b9b4:	mov	r2, r3
   1b9b8:	b	1b9cc <__assert_fail@plt+0xa2c8>
   1b9bc:	ldrb	r0, [r2, #-1]!
   1b9c0:	ldrb	r3, [r1, #-1]!
   1b9c4:	cmp	r0, r3
   1b9c8:	bne	1b9f4 <__assert_fail@plt+0xa2f0>
   1b9cc:	cmp	r6, r2
   1b9d0:	bne	1b9bc <__assert_fail@plt+0xa2b8>
   1b9d4:	add	r0, r7, r5
   1b9d8:	add	sp, sp, #36	; 0x24
   1b9dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9e0:	ldr	r3, [sp, #4]
   1b9e4:	add	r5, r3, r5
   1b9e8:	add	r5, r5, r2
   1b9ec:	mov	r0, fp
   1b9f0:	b	1b914 <__assert_fail@plt+0xa210>
   1b9f4:	ldr	r3, [sp, #8]
   1b9f8:	add	r5, r5, r3
   1b9fc:	b	1b9ec <__assert_fail@plt+0xa2e8>
   1ba00:	add	r2, sp, #28
   1ba04:	mov	r1, r4
   1ba08:	mov	r0, r6
   1ba0c:	bl	1b1d4 <__assert_fail@plt+0x9ad0>
   1ba10:	ldr	r3, [sp, #28]
   1ba14:	str	r3, [sp, #8]
   1ba18:	mov	r9, r0
   1ba1c:	b	1b78c <__assert_fail@plt+0xa088>
   1ba20:	mov	r1, r9
   1ba24:	b	1b8a8 <__assert_fail@plt+0xa1a4>
   1ba28:	mov	r0, r7
   1ba2c:	b	1b760 <__assert_fail@plt+0xa05c>
   1ba30:	mov	r6, r1
   1ba34:	mov	sl, #1
   1ba38:	b	1b6f4 <__assert_fail@plt+0x9ff0>
   1ba3c:	add	r0, r7, sl
   1ba40:	b	1b760 <__assert_fail@plt+0xa05c>
   1ba44:	mov	r0, #1
   1ba48:	b	13e34 <__assert_fail@plt+0x2730>
   1ba4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba50:	mov	r5, r1
   1ba54:	sub	sp, sp, #12
   1ba58:	mov	r4, r2
   1ba5c:	str	r2, [sp]
   1ba60:	mov	r7, r3
   1ba64:	mov	sl, r0
   1ba68:	bl	1153c <strlen@plt>
   1ba6c:	ldr	fp, [r5]
   1ba70:	cmp	fp, #0
   1ba74:	beq	1bb3c <__assert_fail@plt+0xa438>
   1ba78:	mov	r3, #0
   1ba7c:	mov	r8, r0
   1ba80:	str	r3, [sp, #4]
   1ba84:	mov	r6, r3
   1ba88:	mvn	r9, #0
   1ba8c:	b	1bab8 <__assert_fail@plt+0xa3b4>
   1ba90:	bl	11398 <memcmp@plt>
   1ba94:	ldr	r3, [sp, #4]
   1ba98:	cmp	r0, #0
   1ba9c:	movne	r3, #1
   1baa0:	str	r3, [sp, #4]
   1baa4:	ldr	fp, [r5, #4]!
   1baa8:	add	r6, r6, #1
   1baac:	cmp	fp, #0
   1bab0:	add	r4, r4, r7
   1bab4:	beq	1bb14 <__assert_fail@plt+0xa410>
   1bab8:	mov	r2, r8
   1babc:	mov	r1, sl
   1bac0:	mov	r0, fp
   1bac4:	bl	116d4 <strncmp@plt>
   1bac8:	cmp	r0, #0
   1bacc:	mov	r0, fp
   1bad0:	bne	1baa4 <__assert_fail@plt+0xa3a0>
   1bad4:	bl	1153c <strlen@plt>
   1bad8:	ldr	r3, [sp]
   1badc:	mov	r2, r7
   1bae0:	mov	r1, r4
   1bae4:	cmp	r8, r0
   1bae8:	mla	r0, r7, r9, r3
   1baec:	beq	1bb2c <__assert_fail@plt+0xa428>
   1baf0:	cmn	r9, #1
   1baf4:	moveq	r9, r6
   1baf8:	beq	1baa4 <__assert_fail@plt+0xa3a0>
   1bafc:	ldr	r3, [sp]
   1bb00:	cmp	r3, #0
   1bb04:	bne	1ba90 <__assert_fail@plt+0xa38c>
   1bb08:	mov	r3, #1
   1bb0c:	str	r3, [sp, #4]
   1bb10:	b	1baa4 <__assert_fail@plt+0xa3a0>
   1bb14:	ldr	r3, [sp, #4]
   1bb18:	cmp	r3, #0
   1bb1c:	mvnne	r9, #1
   1bb20:	mov	r0, r9
   1bb24:	add	sp, sp, #12
   1bb28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb2c:	mov	r9, r6
   1bb30:	mov	r0, r9
   1bb34:	add	sp, sp, #12
   1bb38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb3c:	mvn	r9, #0
   1bb40:	b	1bb20 <__assert_fail@plt+0xa41c>
   1bb44:	push	{r4, r5, r6, lr}
   1bb48:	mov	r6, r0
   1bb4c:	ldr	r0, [r1]
   1bb50:	cmp	r0, #0
   1bb54:	beq	1bb8c <__assert_fail@plt+0xa488>
   1bb58:	mov	r4, r1
   1bb5c:	mov	r5, #0
   1bb60:	b	1bb74 <__assert_fail@plt+0xa470>
   1bb64:	ldr	r0, [r4, #4]!
   1bb68:	add	r5, r5, #1
   1bb6c:	cmp	r0, #0
   1bb70:	beq	1bb8c <__assert_fail@plt+0xa488>
   1bb74:	mov	r1, r6
   1bb78:	bl	11320 <strcmp@plt>
   1bb7c:	cmp	r0, #0
   1bb80:	bne	1bb64 <__assert_fail@plt+0xa460>
   1bb84:	mov	r0, r5
   1bb88:	pop	{r4, r5, r6, pc}
   1bb8c:	mvn	r0, #0
   1bb90:	pop	{r4, r5, r6, pc}
   1bb94:	cmn	r2, #1
   1bb98:	push	{r4, r5, r6, lr}
   1bb9c:	mov	r2, #5
   1bba0:	sub	sp, sp, #8
   1bba4:	mov	r4, r1
   1bba8:	mov	r5, r0
   1bbac:	ldreq	r1, [pc, #76]	; 1bc00 <__assert_fail@plt+0xa4fc>
   1bbb0:	ldrne	r1, [pc, #76]	; 1bc04 <__assert_fail@plt+0xa500>
   1bbb4:	mov	r0, #0
   1bbb8:	bl	113bc <dcgettext@plt>
   1bbbc:	mov	r2, r4
   1bbc0:	mov	r1, #8
   1bbc4:	mov	r6, r0
   1bbc8:	mov	r0, #0
   1bbcc:	bl	19a90 <__assert_fail@plt+0x838c>
   1bbd0:	mov	r1, r5
   1bbd4:	mov	r4, r0
   1bbd8:	mov	r0, #1
   1bbdc:	bl	19d2c <__assert_fail@plt+0x8628>
   1bbe0:	mov	r1, #0
   1bbe4:	mov	r3, r4
   1bbe8:	mov	r2, r6
   1bbec:	str	r0, [sp]
   1bbf0:	mov	r0, r1
   1bbf4:	bl	11494 <error@plt>
   1bbf8:	add	sp, sp, #8
   1bbfc:	pop	{r4, r5, r6, pc}
   1bc00:	strdeq	lr, [r1], -r4
   1bc04:	andeq	lr, r1, r0, lsl sl
   1bc08:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc0c:	mov	r6, r0
   1bc10:	ldr	r9, [pc, #232]	; 1bd00 <__assert_fail@plt+0xa5fc>
   1bc14:	mov	r4, r1
   1bc18:	mov	r7, r2
   1bc1c:	ldr	r1, [pc, #224]	; 1bd04 <__assert_fail@plt+0xa600>
   1bc20:	mov	r2, #5
   1bc24:	mov	r0, #0
   1bc28:	bl	113bc <dcgettext@plt>
   1bc2c:	ldr	r1, [r9]
   1bc30:	bl	112f0 <fputs_unlocked@plt>
   1bc34:	ldr	fp, [r6]
   1bc38:	cmp	fp, #0
   1bc3c:	movne	r8, #0
   1bc40:	movne	r5, r8
   1bc44:	movne	sl, #1
   1bc48:	bne	1bc88 <__assert_fail@plt+0xa584>
   1bc4c:	b	1bccc <__assert_fail@plt+0xa5c8>
   1bc50:	mov	r0, fp
   1bc54:	ldr	r8, [r9]
   1bc58:	bl	19d3c <__assert_fail@plt+0x8638>
   1bc5c:	ldr	r2, [pc, #164]	; 1bd08 <__assert_fail@plt+0xa604>
   1bc60:	mov	r1, sl
   1bc64:	mov	r3, r0
   1bc68:	mov	r0, r8
   1bc6c:	bl	115c0 <__fprintf_chk@plt>
   1bc70:	mov	r8, r4
   1bc74:	ldr	fp, [r6, #4]!
   1bc78:	add	r5, r5, #1
   1bc7c:	cmp	fp, #0
   1bc80:	add	r4, r4, r7
   1bc84:	beq	1bccc <__assert_fail@plt+0xa5c8>
   1bc88:	cmp	r5, #0
   1bc8c:	mov	r1, r4
   1bc90:	mov	r2, r7
   1bc94:	mov	r0, r8
   1bc98:	beq	1bc50 <__assert_fail@plt+0xa54c>
   1bc9c:	bl	11398 <memcmp@plt>
   1bca0:	cmp	r0, #0
   1bca4:	bne	1bc50 <__assert_fail@plt+0xa54c>
   1bca8:	mov	r0, fp
   1bcac:	ldr	fp, [r9]
   1bcb0:	bl	19d3c <__assert_fail@plt+0x8638>
   1bcb4:	ldr	r2, [pc, #80]	; 1bd0c <__assert_fail@plt+0xa608>
   1bcb8:	mov	r1, sl
   1bcbc:	mov	r3, r0
   1bcc0:	mov	r0, fp
   1bcc4:	bl	115c0 <__fprintf_chk@plt>
   1bcc8:	b	1bc74 <__assert_fail@plt+0xa570>
   1bccc:	ldr	r0, [r9]
   1bcd0:	ldr	r3, [r0, #20]
   1bcd4:	ldr	r2, [r0, #24]
   1bcd8:	cmp	r3, r2
   1bcdc:	bcs	1bcf4 <__assert_fail@plt+0xa5f0>
   1bce0:	add	r1, r3, #1
   1bce4:	mov	r2, #10
   1bce8:	str	r1, [r0, #20]
   1bcec:	strb	r2, [r3]
   1bcf0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcf4:	mov	r1, #10
   1bcf8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcfc:	b	11608 <__overflow@plt>
   1bd00:	andeq	pc, r2, r0, lsr r3	; <UNPREDICTABLE>
   1bd04:	andeq	lr, r1, r0, lsr sl
   1bd08:	andeq	lr, r1, r8, asr #20
   1bd0c:	andeq	lr, r1, r0, asr sl
   1bd10:	push	{r4, r5, r6, r7, r8, lr}
   1bd14:	mov	r7, r0
   1bd18:	ldrb	ip, [sp, #32]
   1bd1c:	mov	r5, r1
   1bd20:	mov	r4, r2
   1bd24:	cmp	ip, #0
   1bd28:	mov	r6, r3
   1bd2c:	beq	1bd7c <__assert_fail@plt+0xa678>
   1bd30:	ldr	r3, [sp, #24]
   1bd34:	mov	r2, r6
   1bd38:	mov	r1, r4
   1bd3c:	mov	r0, r5
   1bd40:	bl	1ba4c <__assert_fail@plt+0xa348>
   1bd44:	cmp	r0, #0
   1bd48:	popge	{r4, r5, r6, r7, r8, pc}
   1bd4c:	mov	r2, r0
   1bd50:	mov	r1, r5
   1bd54:	mov	r0, r7
   1bd58:	bl	1bb94 <__assert_fail@plt+0xa490>
   1bd5c:	mov	r0, r4
   1bd60:	ldr	r2, [sp, #24]
   1bd64:	mov	r1, r6
   1bd68:	bl	1bc08 <__assert_fail@plt+0xa504>
   1bd6c:	ldr	r3, [sp, #28]
   1bd70:	blx	r3
   1bd74:	mvn	r0, #0
   1bd78:	pop	{r4, r5, r6, r7, r8, pc}
   1bd7c:	mov	r1, r2
   1bd80:	mov	r0, r5
   1bd84:	bl	1bb44 <__assert_fail@plt+0xa440>
   1bd88:	cmp	r0, #0
   1bd8c:	popge	{r4, r5, r6, r7, r8, pc}
   1bd90:	b	1bd4c <__assert_fail@plt+0xa648>
   1bd94:	push	{r4, r5, r6, r7, r8, lr}
   1bd98:	ldr	r7, [r1]
   1bd9c:	cmp	r7, #0
   1bda0:	beq	1bde0 <__assert_fail@plt+0xa6dc>
   1bda4:	mov	r6, r3
   1bda8:	mov	r8, r0
   1bdac:	mov	r4, r2
   1bdb0:	mov	r5, r1
   1bdb4:	b	1bdc4 <__assert_fail@plt+0xa6c0>
   1bdb8:	ldr	r7, [r5, #4]!
   1bdbc:	cmp	r7, #0
   1bdc0:	beq	1bde0 <__assert_fail@plt+0xa6dc>
   1bdc4:	mov	r1, r4
   1bdc8:	mov	r2, r6
   1bdcc:	mov	r0, r8
   1bdd0:	bl	11398 <memcmp@plt>
   1bdd4:	add	r4, r4, r6
   1bdd8:	cmp	r0, #0
   1bddc:	bne	1bdb8 <__assert_fail@plt+0xa6b4>
   1bde0:	mov	r0, r7
   1bde4:	pop	{r4, r5, r6, r7, r8, pc}
   1bde8:	ldrb	r3, [r0]
   1bdec:	cmp	r3, #47	; 0x2f
   1bdf0:	bne	1be00 <__assert_fail@plt+0xa6fc>
   1bdf4:	ldrb	r3, [r0, #1]!
   1bdf8:	cmp	r3, #47	; 0x2f
   1bdfc:	beq	1bdf4 <__assert_fail@plt+0xa6f0>
   1be00:	cmp	r3, #0
   1be04:	bxeq	lr
   1be08:	mov	r2, #0
   1be0c:	push	{lr}		; (str lr, [sp, #-4]!)
   1be10:	mov	ip, r2
   1be14:	mov	r1, r0
   1be18:	mov	lr, #1
   1be1c:	cmp	r3, #47	; 0x2f
   1be20:	moveq	r2, lr
   1be24:	beq	1be34 <__assert_fail@plt+0xa730>
   1be28:	cmp	r2, #0
   1be2c:	movne	r0, r1
   1be30:	movne	r2, ip
   1be34:	ldrb	r3, [r1, #1]!
   1be38:	cmp	r3, #0
   1be3c:	bne	1be1c <__assert_fail@plt+0xa718>
   1be40:	pop	{pc}		; (ldr pc, [sp], #4)
   1be44:	push	{r4, lr}
   1be48:	mov	r4, r0
   1be4c:	bl	1153c <strlen@plt>
   1be50:	cmp	r0, #1
   1be54:	popls	{r4, pc}
   1be58:	sub	r3, r0, #1
   1be5c:	add	r2, r4, r3
   1be60:	ldrb	r1, [r4, r3]
   1be64:	cmp	r1, #47	; 0x2f
   1be68:	popne	{r4, pc}
   1be6c:	cmp	r3, #1
   1be70:	beq	1be84 <__assert_fail@plt+0xa780>
   1be74:	ldrb	r1, [r2, #-1]!
   1be78:	sub	r0, r3, #1
   1be7c:	cmp	r1, #47	; 0x2f
   1be80:	beq	1be8c <__assert_fail@plt+0xa788>
   1be84:	mov	r0, r3
   1be88:	pop	{r4, pc}
   1be8c:	mov	r3, r0
   1be90:	b	1be6c <__assert_fail@plt+0xa768>
   1be94:	ldr	r0, [r0]
   1be98:	cmp	r0, #0
   1be9c:	bxlt	lr
   1bea0:	push	{r4, lr}
   1bea4:	bl	116ec <close@plt>
   1bea8:	cmp	r0, #0
   1beac:	popeq	{r4, pc}
   1beb0:	ldr	r3, [pc, #12]	; 1bec4 <__assert_fail@plt+0xa7c0>
   1beb4:	mov	r2, #64	; 0x40
   1beb8:	ldr	r1, [pc, #8]	; 1bec8 <__assert_fail@plt+0xa7c4>
   1bebc:	ldr	r0, [pc, #8]	; 1becc <__assert_fail@plt+0xa7c8>
   1bec0:	bl	11704 <__assert_fail@plt>
   1bec4:	andeq	lr, r1, r8, asr sl
   1bec8:	andeq	lr, r1, r0, ror sl
   1becc:	andeq	lr, r1, r4, lsl #21
   1bed0:	push	{r4, r5, r6, lr}
   1bed4:	mov	r2, #18688	; 0x4900
   1bed8:	mov	r4, r0
   1bedc:	ldr	r0, [r0]
   1bee0:	bl	11554 <openat64@plt>
   1bee4:	subs	r5, r0, #0
   1bee8:	blt	1bf00 <__assert_fail@plt+0xa7fc>
   1beec:	mov	r0, r4
   1bef0:	bl	1be94 <__assert_fail@plt+0xa790>
   1bef4:	str	r5, [r4]
   1bef8:	mov	r0, #0
   1befc:	pop	{r4, r5, r6, pc}
   1bf00:	mvn	r0, #0
   1bf04:	pop	{r4, r5, r6, pc}
   1bf08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf0c:	sub	sp, sp, #20
   1bf10:	mov	r6, r0
   1bf14:	bl	11404 <chdir@plt>
   1bf18:	subs	r4, r0, #0
   1bf1c:	beq	1bf34 <__assert_fail@plt+0xa830>
   1bf20:	bl	1156c <__errno_location@plt>
   1bf24:	ldr	r5, [r0]
   1bf28:	str	r0, [sp, #4]
   1bf2c:	cmp	r5, #36	; 0x24
   1bf30:	beq	1bf40 <__assert_fail@plt+0xa83c>
   1bf34:	mov	r0, r4
   1bf38:	add	sp, sp, #20
   1bf3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf40:	mov	r0, r6
   1bf44:	bl	1153c <strlen@plt>
   1bf48:	mvn	r3, #99	; 0x63
   1bf4c:	str	r3, [sp, #12]
   1bf50:	subs	r4, r0, #0
   1bf54:	beq	1c158 <__assert_fail@plt+0xaa54>
   1bf58:	cmp	r4, #4096	; 0x1000
   1bf5c:	bcc	1c16c <__assert_fail@plt+0xaa68>
   1bf60:	ldr	r1, [pc, #536]	; 1c180 <__assert_fail@plt+0xaa7c>
   1bf64:	mov	r0, r6
   1bf68:	bl	116f8 <strspn@plt>
   1bf6c:	cmp	r0, #2
   1bf70:	mov	fp, r0
   1bf74:	beq	1c038 <__assert_fail@plt+0xa934>
   1bf78:	cmp	r0, #0
   1bf7c:	moveq	fp, r6
   1bf80:	bne	1c0fc <__assert_fail@plt+0xa9f8>
   1bf84:	ldrb	r2, [fp]
   1bf88:	cmp	r2, #47	; 0x2f
   1bf8c:	beq	1c130 <__assert_fail@plt+0xaa2c>
   1bf90:	add	r6, r6, r4
   1bf94:	cmp	fp, r6
   1bf98:	bhi	1c144 <__assert_fail@plt+0xaa40>
   1bf9c:	ldr	r4, [pc, #480]	; 1c184 <__assert_fail@plt+0xaa80>
   1bfa0:	sub	r2, r6, fp
   1bfa4:	cmp	r2, r4
   1bfa8:	addle	r7, sp, #12
   1bfac:	ble	1c090 <__assert_fail@plt+0xa98c>
   1bfb0:	mov	r8, #4096	; 0x1000
   1bfb4:	mov	r5, #47	; 0x2f
   1bfb8:	mov	r9, #0
   1bfbc:	b	1c00c <__assert_fail@plt+0xa908>
   1bfc0:	sub	r1, sl, fp
   1bfc4:	cmp	r1, r4
   1bfc8:	strb	r9, [sl]
   1bfcc:	bgt	1c11c <__assert_fail@plt+0xaa18>
   1bfd0:	mov	r1, fp
   1bfd4:	add	r0, sp, #12
   1bfd8:	bl	1bed0 <__assert_fail@plt+0xa7cc>
   1bfdc:	add	r7, sp, #12
   1bfe0:	strb	r5, [sl]
   1bfe4:	cmp	r0, #0
   1bfe8:	bne	1c0ac <__assert_fail@plt+0xa9a8>
   1bfec:	add	fp, sl, #1
   1bff0:	mov	r0, fp
   1bff4:	ldr	r1, [pc, #388]	; 1c180 <__assert_fail@plt+0xaa7c>
   1bff8:	bl	116f8 <strspn@plt>
   1bffc:	add	fp, fp, r0
   1c000:	sub	r2, r6, fp
   1c004:	cmp	r2, r4
   1c008:	ble	1c090 <__assert_fail@plt+0xa98c>
   1c00c:	mov	r2, r8
   1c010:	mov	r1, r5
   1c014:	mov	r0, fp
   1c018:	bl	11560 <memrchr@plt>
   1c01c:	subs	sl, r0, #0
   1c020:	bne	1bfc0 <__assert_fail@plt+0xa8bc>
   1c024:	ldr	r2, [sp, #4]
   1c028:	mov	r3, #36	; 0x24
   1c02c:	mvn	r4, #0
   1c030:	str	r3, [r2]
   1c034:	b	1bf34 <__assert_fail@plt+0xa830>
   1c038:	sub	r2, r4, #3
   1c03c:	mov	r1, #47	; 0x2f
   1c040:	add	r0, r6, #3
   1c044:	bl	115cc <memchr@plt>
   1c048:	subs	r8, r0, #0
   1c04c:	beq	1c0ec <__assert_fail@plt+0xa9e8>
   1c050:	mov	r3, #0
   1c054:	add	r7, sp, #12
   1c058:	strb	r3, [r8]
   1c05c:	mov	r0, r7
   1c060:	mov	r1, r6
   1c064:	bl	1bed0 <__assert_fail@plt+0xa7cc>
   1c068:	mov	r3, #47	; 0x2f
   1c06c:	strb	r3, [r8]
   1c070:	cmp	r0, #0
   1c074:	bne	1c0ac <__assert_fail@plt+0xa9a8>
   1c078:	add	r8, r8, #1
   1c07c:	mov	r0, r8
   1c080:	ldr	r1, [pc, #248]	; 1c180 <__assert_fail@plt+0xaa7c>
   1c084:	bl	116f8 <strspn@plt>
   1c088:	add	fp, r8, r0
   1c08c:	b	1bf84 <__assert_fail@plt+0xa880>
   1c090:	cmp	r6, fp
   1c094:	bls	1c0d0 <__assert_fail@plt+0xa9cc>
   1c098:	mov	r1, fp
   1c09c:	mov	r0, r7
   1c0a0:	bl	1bed0 <__assert_fail@plt+0xa7cc>
   1c0a4:	cmp	r0, #0
   1c0a8:	beq	1c0d0 <__assert_fail@plt+0xa9cc>
   1c0ac:	ldr	r6, [sp, #4]
   1c0b0:	mov	r0, r7
   1c0b4:	mvn	r4, #0
   1c0b8:	ldr	r5, [r6]
   1c0bc:	bl	1be94 <__assert_fail@plt+0xa790>
   1c0c0:	mov	r0, r4
   1c0c4:	str	r5, [r6]
   1c0c8:	add	sp, sp, #20
   1c0cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0d0:	ldr	r0, [sp, #12]
   1c0d4:	bl	11674 <fchdir@plt>
   1c0d8:	subs	r4, r0, #0
   1c0dc:	bne	1c0ac <__assert_fail@plt+0xa9a8>
   1c0e0:	mov	r0, r7
   1c0e4:	bl	1be94 <__assert_fail@plt+0xa790>
   1c0e8:	b	1bf34 <__assert_fail@plt+0xa830>
   1c0ec:	ldr	r3, [sp, #4]
   1c0f0:	mvn	r4, #0
   1c0f4:	str	r5, [r3]
   1c0f8:	b	1bf34 <__assert_fail@plt+0xa830>
   1c0fc:	add	r7, sp, #12
   1c100:	mov	r0, r7
   1c104:	ldr	r1, [pc, #116]	; 1c180 <__assert_fail@plt+0xaa7c>
   1c108:	bl	1bed0 <__assert_fail@plt+0xa7cc>
   1c10c:	cmp	r0, #0
   1c110:	addeq	fp, r6, fp
   1c114:	beq	1bf84 <__assert_fail@plt+0xa880>
   1c118:	b	1c0ac <__assert_fail@plt+0xa9a8>
   1c11c:	ldr	r3, [pc, #100]	; 1c188 <__assert_fail@plt+0xaa84>
   1c120:	mov	r2, #179	; 0xb3
   1c124:	ldr	r1, [pc, #96]	; 1c18c <__assert_fail@plt+0xaa88>
   1c128:	ldr	r0, [pc, #96]	; 1c190 <__assert_fail@plt+0xaa8c>
   1c12c:	bl	11704 <__assert_fail@plt>
   1c130:	ldr	r3, [pc, #80]	; 1c188 <__assert_fail@plt+0xaa84>
   1c134:	mov	r2, #162	; 0xa2
   1c138:	ldr	r1, [pc, #76]	; 1c18c <__assert_fail@plt+0xaa88>
   1c13c:	ldr	r0, [pc, #80]	; 1c194 <__assert_fail@plt+0xaa90>
   1c140:	bl	11704 <__assert_fail@plt>
   1c144:	ldr	r3, [pc, #60]	; 1c188 <__assert_fail@plt+0xaa84>
   1c148:	mov	r2, #163	; 0xa3
   1c14c:	ldr	r1, [pc, #56]	; 1c18c <__assert_fail@plt+0xaa88>
   1c150:	ldr	r0, [pc, #64]	; 1c198 <__assert_fail@plt+0xaa94>
   1c154:	bl	11704 <__assert_fail@plt>
   1c158:	ldr	r3, [pc, #40]	; 1c188 <__assert_fail@plt+0xaa84>
   1c15c:	mov	r2, #126	; 0x7e
   1c160:	ldr	r1, [pc, #36]	; 1c18c <__assert_fail@plt+0xaa88>
   1c164:	ldr	r0, [pc, #48]	; 1c19c <__assert_fail@plt+0xaa98>
   1c168:	bl	11704 <__assert_fail@plt>
   1c16c:	ldr	r3, [pc, #20]	; 1c188 <__assert_fail@plt+0xaa84>
   1c170:	mov	r2, #127	; 0x7f
   1c174:	ldr	r1, [pc, #16]	; 1c18c <__assert_fail@plt+0xaa88>
   1c178:	ldr	r0, [pc, #32]	; 1c1a0 <__assert_fail@plt+0xaa9c>
   1c17c:	bl	11704 <__assert_fail@plt>
   1c180:	andeq	lr, r1, r0, ror #5
   1c184:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1c188:	andeq	lr, r1, r4, ror #20
   1c18c:	andeq	lr, r1, r0, ror sl
   1c190:	andeq	lr, r1, r4, asr #21
   1c194:	andeq	lr, r1, r8, lsr #21
   1c198:			; <UNDEFINED> instruction: 0x0001eab4
   1c19c:	muleq	r1, r4, sl
   1c1a0:	muleq	r1, ip, sl
   1c1a4:	push	{r4, r5, r6, lr}
   1c1a8:	mov	r4, r0
   1c1ac:	bl	11470 <__fpending@plt>
   1c1b0:	ldr	r5, [r4]
   1c1b4:	and	r5, r5, #32
   1c1b8:	mov	r6, r0
   1c1bc:	mov	r0, r4
   1c1c0:	bl	1c220 <__assert_fail@plt+0xab1c>
   1c1c4:	cmp	r5, #0
   1c1c8:	mov	r4, r0
   1c1cc:	bne	1c1ec <__assert_fail@plt+0xaae8>
   1c1d0:	cmp	r0, #0
   1c1d4:	beq	1c1e4 <__assert_fail@plt+0xaae0>
   1c1d8:	cmp	r6, #0
   1c1dc:	beq	1c208 <__assert_fail@plt+0xab04>
   1c1e0:	mvn	r4, #0
   1c1e4:	mov	r0, r4
   1c1e8:	pop	{r4, r5, r6, pc}
   1c1ec:	cmp	r0, #0
   1c1f0:	bne	1c1e0 <__assert_fail@plt+0xaadc>
   1c1f4:	bl	1156c <__errno_location@plt>
   1c1f8:	str	r4, [r0]
   1c1fc:	mvn	r4, #0
   1c200:	mov	r0, r4
   1c204:	pop	{r4, r5, r6, pc}
   1c208:	bl	1156c <__errno_location@plt>
   1c20c:	ldr	r4, [r0]
   1c210:	subs	r4, r4, #9
   1c214:	mvnne	r4, #0
   1c218:	mov	r0, r4
   1c21c:	pop	{r4, r5, r6, pc}
   1c220:	push	{r4, r5, lr}
   1c224:	sub	sp, sp, #12
   1c228:	mov	r4, r0
   1c22c:	bl	115b4 <fileno@plt>
   1c230:	cmp	r0, #0
   1c234:	mov	r0, r4
   1c238:	blt	1c2b4 <__assert_fail@plt+0xabb0>
   1c23c:	bl	114e8 <__freading@plt>
   1c240:	cmp	r0, #0
   1c244:	bne	1c280 <__assert_fail@plt+0xab7c>
   1c248:	mov	r0, r4
   1c24c:	bl	1c2f8 <__assert_fail@plt+0xabf4>
   1c250:	cmp	r0, #0
   1c254:	beq	1c2b0 <__assert_fail@plt+0xabac>
   1c258:	bl	1156c <__errno_location@plt>
   1c25c:	mov	r5, r0
   1c260:	mov	r0, r4
   1c264:	ldr	r4, [r5]
   1c268:	bl	115d8 <fclose@plt>
   1c26c:	cmp	r4, #0
   1c270:	mvnne	r0, #0
   1c274:	strne	r4, [r5]
   1c278:	add	sp, sp, #12
   1c27c:	pop	{r4, r5, pc}
   1c280:	mov	r0, r4
   1c284:	bl	115b4 <fileno@plt>
   1c288:	mov	r3, #1
   1c28c:	str	r3, [sp]
   1c290:	mov	r2, #0
   1c294:	mov	r3, #0
   1c298:	bl	1144c <lseek64@plt>
   1c29c:	mvn	r3, #0
   1c2a0:	mvn	r2, #0
   1c2a4:	cmp	r1, r3
   1c2a8:	cmpeq	r0, r2
   1c2ac:	bne	1c248 <__assert_fail@plt+0xab44>
   1c2b0:	mov	r0, r4
   1c2b4:	add	sp, sp, #12
   1c2b8:	pop	{r4, r5, lr}
   1c2bc:	b	115d8 <fclose@plt>
   1c2c0:	push	{r1, r2, r3}
   1c2c4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c2c8:	sub	sp, sp, #8
   1c2cc:	ldr	r1, [sp, #12]
   1c2d0:	ands	r2, r1, #64	; 0x40
   1c2d4:	addne	r3, sp, #16
   1c2d8:	ldrne	r2, [sp, #16]
   1c2dc:	strne	r3, [sp, #4]
   1c2e0:	bl	114ac <open64@plt>
   1c2e4:	bl	1c5a8 <__assert_fail@plt+0xaea4>
   1c2e8:	add	sp, sp, #8
   1c2ec:	pop	{lr}		; (ldr lr, [sp], #4)
   1c2f0:	add	sp, sp, #12
   1c2f4:	bx	lr
   1c2f8:	push	{r4, lr}
   1c2fc:	subs	r4, r0, #0
   1c300:	sub	sp, sp, #8
   1c304:	beq	1c320 <__assert_fail@plt+0xac1c>
   1c308:	bl	114e8 <__freading@plt>
   1c30c:	cmp	r0, #0
   1c310:	beq	1c320 <__assert_fail@plt+0xac1c>
   1c314:	ldr	r3, [r4]
   1c318:	tst	r3, #256	; 0x100
   1c31c:	bne	1c330 <__assert_fail@plt+0xac2c>
   1c320:	mov	r0, r4
   1c324:	add	sp, sp, #8
   1c328:	pop	{r4, lr}
   1c32c:	b	1132c <fflush@plt>
   1c330:	mov	r3, #1
   1c334:	str	r3, [sp]
   1c338:	mov	r2, #0
   1c33c:	mov	r3, #0
   1c340:	mov	r0, r4
   1c344:	bl	1c358 <__assert_fail@plt+0xac54>
   1c348:	mov	r0, r4
   1c34c:	add	sp, sp, #8
   1c350:	pop	{r4, lr}
   1c354:	b	1132c <fflush@plt>
   1c358:	push	{r4, r5, r6, r7, r8, lr}
   1c35c:	sub	sp, sp, #8
   1c360:	ldmib	r0, {ip, lr}
   1c364:	mov	r4, r0
   1c368:	ldr	r5, [sp, #32]
   1c36c:	cmp	lr, ip
   1c370:	beq	1c388 <__assert_fail@plt+0xac84>
   1c374:	str	r5, [sp, #32]
   1c378:	mov	r0, r4
   1c37c:	add	sp, sp, #8
   1c380:	pop	{r4, r5, r6, r7, r8, lr}
   1c384:	b	115e4 <fseeko64@plt>
   1c388:	ldr	lr, [r0, #20]
   1c38c:	ldr	ip, [r0, #16]
   1c390:	cmp	lr, ip
   1c394:	bne	1c374 <__assert_fail@plt+0xac70>
   1c398:	ldr	r8, [r0, #36]	; 0x24
   1c39c:	cmp	r8, #0
   1c3a0:	bne	1c374 <__assert_fail@plt+0xac70>
   1c3a4:	mov	r6, r2
   1c3a8:	mov	r7, r3
   1c3ac:	bl	115b4 <fileno@plt>
   1c3b0:	mov	r2, r6
   1c3b4:	mov	r3, r7
   1c3b8:	str	r5, [sp]
   1c3bc:	bl	1144c <lseek64@plt>
   1c3c0:	mvn	r3, #0
   1c3c4:	mvn	r2, #0
   1c3c8:	cmp	r1, r3
   1c3cc:	cmpeq	r0, r2
   1c3d0:	beq	1c3f0 <__assert_fail@plt+0xacec>
   1c3d4:	ldr	r3, [r4]
   1c3d8:	strd	r0, [r4, #80]	; 0x50
   1c3dc:	mov	r0, r8
   1c3e0:	bic	r3, r3, #16
   1c3e4:	str	r3, [r4]
   1c3e8:	add	sp, sp, #8
   1c3ec:	pop	{r4, r5, r6, r7, r8, pc}
   1c3f0:	mvn	r0, #0
   1c3f4:	b	1c3e8 <__assert_fail@plt+0xace4>
   1c3f8:	push	{lr}		; (str lr, [sp, #-4]!)
   1c3fc:	sub	sp, sp, #268	; 0x10c
   1c400:	add	r1, sp, #4
   1c404:	ldr	r2, [pc, #60]	; 1c448 <__assert_fail@plt+0xad44>
   1c408:	bl	1c510 <__assert_fail@plt+0xae0c>
   1c40c:	cmp	r0, #0
   1c410:	movne	r0, #0
   1c414:	bne	1c440 <__assert_fail@plt+0xad3c>
   1c418:	ldr	r1, [pc, #44]	; 1c44c <__assert_fail@plt+0xad48>
   1c41c:	add	r0, sp, #4
   1c420:	bl	11320 <strcmp@plt>
   1c424:	cmp	r0, #0
   1c428:	beq	1c440 <__assert_fail@plt+0xad3c>
   1c42c:	add	r0, sp, #4
   1c430:	ldr	r1, [pc, #24]	; 1c450 <__assert_fail@plt+0xad4c>
   1c434:	bl	11320 <strcmp@plt>
   1c438:	adds	r0, r0, #0
   1c43c:	movne	r0, #1
   1c440:	add	sp, sp, #268	; 0x10c
   1c444:	pop	{pc}		; (ldr pc, [sp], #4)
   1c448:	andeq	r0, r0, r1, lsl #2
   1c44c:	ldrdeq	lr, [r1], -r8
   1c450:	ldrdeq	lr, [r1], -ip
   1c454:	ldrb	r3, [r0]
   1c458:	cmp	r3, #0
   1c45c:	beq	1c488 <__assert_fail@plt+0xad84>
   1c460:	mov	r2, r0
   1c464:	mov	r0, #0
   1c468:	push	{r4, lr}
   1c46c:	add	r0, r3, r0, ror #23
   1c470:	ldrb	r3, [r2, #1]!
   1c474:	cmp	r3, #0
   1c478:	bne	1c46c <__assert_fail@plt+0xad68>
   1c47c:	bl	1c9b0 <__assert_fail@plt+0xb2ac>
   1c480:	mov	r0, r1
   1c484:	pop	{r4, pc}
   1c488:	mov	r0, r3
   1c48c:	bx	lr
   1c490:	push	{r4, lr}
   1c494:	mov	r0, #14
   1c498:	bl	11644 <nl_langinfo@plt>
   1c49c:	cmp	r0, #0
   1c4a0:	beq	1c4b8 <__assert_fail@plt+0xadb4>
   1c4a4:	ldrb	r2, [r0]
   1c4a8:	ldr	r3, [pc, #16]	; 1c4c0 <__assert_fail@plt+0xadbc>
   1c4ac:	cmp	r2, #0
   1c4b0:	moveq	r0, r3
   1c4b4:	pop	{r4, pc}
   1c4b8:	ldr	r0, [pc]	; 1c4c0 <__assert_fail@plt+0xadbc>
   1c4bc:	pop	{r4, pc}
   1c4c0:	andeq	lr, r1, r4, ror #21
   1c4c4:	push	{r4, r5, r6, lr}
   1c4c8:	subs	r4, r2, #0
   1c4cc:	mov	r6, r0
   1c4d0:	mov	r5, r1
   1c4d4:	beq	1c500 <__assert_fail@plt+0xadfc>
   1c4d8:	mov	r1, r4
   1c4dc:	mvn	r0, #0
   1c4e0:	bl	1c7c4 <__assert_fail@plt+0xb0c0>
   1c4e4:	cmp	r0, r5
   1c4e8:	bcs	1c500 <__assert_fail@plt+0xadfc>
   1c4ec:	bl	1156c <__errno_location@plt>
   1c4f0:	mov	r3, #12
   1c4f4:	str	r3, [r0]
   1c4f8:	mov	r0, #0
   1c4fc:	pop	{r4, r5, r6, pc}
   1c500:	mul	r1, r5, r4
   1c504:	mov	r0, r6
   1c508:	pop	{r4, r5, r6, lr}
   1c50c:	b	1b178 <__assert_fail@plt+0x9a74>
   1c510:	push	{r4, r5, r6, lr}
   1c514:	mov	r5, r1
   1c518:	mov	r1, #0
   1c51c:	mov	r4, r2
   1c520:	bl	11614 <setlocale@plt>
   1c524:	subs	r6, r0, #0
   1c528:	beq	1c584 <__assert_fail@plt+0xae80>
   1c52c:	bl	1153c <strlen@plt>
   1c530:	cmp	r4, r0
   1c534:	bhi	1c56c <__assert_fail@plt+0xae68>
   1c538:	cmp	r4, #0
   1c53c:	bne	1c548 <__assert_fail@plt+0xae44>
   1c540:	mov	r0, #34	; 0x22
   1c544:	pop	{r4, r5, r6, pc}
   1c548:	sub	r4, r4, #1
   1c54c:	mov	r1, r6
   1c550:	mov	r2, r4
   1c554:	mov	r0, r5
   1c558:	bl	11374 <memcpy@plt>
   1c55c:	mov	r3, #0
   1c560:	strb	r3, [r5, r4]
   1c564:	mov	r0, #34	; 0x22
   1c568:	pop	{r4, r5, r6, pc}
   1c56c:	add	r2, r0, #1
   1c570:	mov	r1, r6
   1c574:	mov	r0, r5
   1c578:	bl	11374 <memcpy@plt>
   1c57c:	mov	r0, #0
   1c580:	pop	{r4, r5, r6, pc}
   1c584:	cmp	r4, #0
   1c588:	beq	1c598 <__assert_fail@plt+0xae94>
   1c58c:	strb	r6, [r5]
   1c590:	mov	r0, #22
   1c594:	pop	{r4, r5, r6, pc}
   1c598:	mov	r0, #22
   1c59c:	pop	{r4, r5, r6, pc}
   1c5a0:	mov	r1, #0
   1c5a4:	b	11614 <setlocale@plt>
   1c5a8:	cmp	r0, #2
   1c5ac:	push	{r4, r5, r6, r7, r8, lr}
   1c5b0:	mov	r4, r0
   1c5b4:	bhi	1c5dc <__assert_fail@plt+0xaed8>
   1c5b8:	bl	1c5e4 <__assert_fail@plt+0xaee0>
   1c5bc:	mov	r7, r0
   1c5c0:	bl	1156c <__errno_location@plt>
   1c5c4:	mov	r5, r0
   1c5c8:	mov	r0, r4
   1c5cc:	ldr	r6, [r5]
   1c5d0:	mov	r4, r7
   1c5d4:	bl	116ec <close@plt>
   1c5d8:	str	r6, [r5]
   1c5dc:	mov	r0, r4
   1c5e0:	pop	{r4, r5, r6, r7, r8, pc}
   1c5e4:	mov	r2, #3
   1c5e8:	mov	r1, #0
   1c5ec:	b	1c5f0 <__assert_fail@plt+0xaeec>
   1c5f0:	push	{r1, r2, r3}
   1c5f4:	push	{r4, r5, r6, r7, lr}
   1c5f8:	sub	sp, sp, #8
   1c5fc:	add	r3, sp, #32
   1c600:	ldr	r1, [sp, #28]
   1c604:	str	r3, [sp, #4]
   1c608:	cmp	r1, #0
   1c60c:	beq	1c6a4 <__assert_fail@plt+0xafa0>
   1c610:	ldr	r2, [pc, #412]	; 1c7b4 <__assert_fail@plt+0xb0b0>
   1c614:	mov	r5, r0
   1c618:	cmp	r1, r2
   1c61c:	bne	1c668 <__assert_fail@plt+0xaf64>
   1c620:	ldr	r6, [pc, #400]	; 1c7b8 <__assert_fail@plt+0xb0b4>
   1c624:	ldr	r7, [r3]
   1c628:	add	r2, sp, #36	; 0x24
   1c62c:	ldr	r3, [r6]
   1c630:	str	r2, [sp, #4]
   1c634:	cmp	r3, #0
   1c638:	mov	r2, r7
   1c63c:	blt	1c768 <__assert_fail@plt+0xb064>
   1c640:	bl	115fc <fcntl64@plt>
   1c644:	subs	r4, r0, #0
   1c648:	blt	1c6ec <__assert_fail@plt+0xafe8>
   1c64c:	mov	r3, #1
   1c650:	str	r3, [r6]
   1c654:	mov	r0, r4
   1c658:	add	sp, sp, #8
   1c65c:	pop	{r4, r5, r6, r7, lr}
   1c660:	add	sp, sp, #12
   1c664:	bx	lr
   1c668:	cmp	r1, #11
   1c66c:	beq	1c694 <__assert_fail@plt+0xaf90>
   1c670:	bgt	1c6b4 <__assert_fail@plt+0xafb0>
   1c674:	cmp	r1, #3
   1c678:	beq	1c694 <__assert_fail@plt+0xaf90>
   1c67c:	ble	1c7a8 <__assert_fail@plt+0xb0a4>
   1c680:	cmp	r1, #8
   1c684:	beq	1c6d4 <__assert_fail@plt+0xafd0>
   1c688:	ble	1c6d4 <__assert_fail@plt+0xafd0>
   1c68c:	cmp	r1, #9
   1c690:	bne	1c6d4 <__assert_fail@plt+0xafd0>
   1c694:	mov	r0, r5
   1c698:	bl	115fc <fcntl64@plt>
   1c69c:	mov	r4, r0
   1c6a0:	b	1c654 <__assert_fail@plt+0xaf50>
   1c6a4:	ldr	r2, [sp, #32]
   1c6a8:	bl	115fc <fcntl64@plt>
   1c6ac:	mov	r4, r0
   1c6b0:	b	1c654 <__assert_fail@plt+0xaf50>
   1c6b4:	ldr	r3, [pc, #256]	; 1c7bc <__assert_fail@plt+0xb0b8>
   1c6b8:	cmp	r1, r3
   1c6bc:	bgt	1c788 <__assert_fail@plt+0xb084>
   1c6c0:	cmp	r1, r2
   1c6c4:	bge	1c6d4 <__assert_fail@plt+0xafd0>
   1c6c8:	sub	r3, r3, #6
   1c6cc:	cmp	r1, r3
   1c6d0:	beq	1c694 <__assert_fail@plt+0xaf90>
   1c6d4:	ldr	r3, [sp, #4]
   1c6d8:	mov	r0, r5
   1c6dc:	ldr	r2, [r3]
   1c6e0:	bl	115fc <fcntl64@plt>
   1c6e4:	mov	r4, r0
   1c6e8:	b	1c654 <__assert_fail@plt+0xaf50>
   1c6ec:	bl	1156c <__errno_location@plt>
   1c6f0:	ldr	r3, [r0]
   1c6f4:	cmp	r3, #22
   1c6f8:	bne	1c64c <__assert_fail@plt+0xaf48>
   1c6fc:	mov	r2, r7
   1c700:	mov	r0, r5
   1c704:	mov	r1, #0
   1c708:	bl	115fc <fcntl64@plt>
   1c70c:	subs	r4, r0, #0
   1c710:	blt	1c654 <__assert_fail@plt+0xaf50>
   1c714:	mvn	r3, #0
   1c718:	str	r3, [r6]
   1c71c:	mov	r1, #1
   1c720:	mov	r0, r4
   1c724:	bl	115fc <fcntl64@plt>
   1c728:	subs	r2, r0, #0
   1c72c:	blt	1c748 <__assert_fail@plt+0xb044>
   1c730:	orr	r2, r2, #1
   1c734:	mov	r1, #2
   1c738:	mov	r0, r4
   1c73c:	bl	115fc <fcntl64@plt>
   1c740:	cmn	r0, #1
   1c744:	bne	1c654 <__assert_fail@plt+0xaf50>
   1c748:	bl	1156c <__errno_location@plt>
   1c74c:	mov	r5, r0
   1c750:	mov	r0, r4
   1c754:	ldr	r6, [r5]
   1c758:	mvn	r4, #0
   1c75c:	bl	116ec <close@plt>
   1c760:	str	r6, [r5]
   1c764:	b	1c654 <__assert_fail@plt+0xaf50>
   1c768:	mov	r1, #0
   1c76c:	bl	115fc <fcntl64@plt>
   1c770:	subs	r4, r0, #0
   1c774:	blt	1c654 <__assert_fail@plt+0xaf50>
   1c778:	ldr	r3, [r6]
   1c77c:	cmn	r3, #1
   1c780:	beq	1c71c <__assert_fail@plt+0xb018>
   1c784:	b	1c654 <__assert_fail@plt+0xaf50>
   1c788:	ldr	r3, [pc, #48]	; 1c7c0 <__assert_fail@plt+0xb0bc>
   1c78c:	cmp	r1, r3
   1c790:	beq	1c6d4 <__assert_fail@plt+0xafd0>
   1c794:	blt	1c694 <__assert_fail@plt+0xaf90>
   1c798:	add	r3, r3, #1
   1c79c:	cmp	r1, r3
   1c7a0:	bne	1c6d4 <__assert_fail@plt+0xafd0>
   1c7a4:	b	1c694 <__assert_fail@plt+0xaf90>
   1c7a8:	cmp	r1, #1
   1c7ac:	bne	1c6d4 <__assert_fail@plt+0xafd0>
   1c7b0:	b	1c694 <__assert_fail@plt+0xaf90>
   1c7b4:	andeq	r0, r0, r6, lsl #8
   1c7b8:	strdeq	pc, [r2], -r4
   1c7bc:	andeq	r0, r0, r7, lsl #8
   1c7c0:	andeq	r0, r0, r9, lsl #8
   1c7c4:	subs	r2, r1, #1
   1c7c8:	bxeq	lr
   1c7cc:	bcc	1c9a4 <__assert_fail@plt+0xb2a0>
   1c7d0:	cmp	r0, r1
   1c7d4:	bls	1c988 <__assert_fail@plt+0xb284>
   1c7d8:	tst	r1, r2
   1c7dc:	beq	1c994 <__assert_fail@plt+0xb290>
   1c7e0:	clz	r3, r0
   1c7e4:	clz	r2, r1
   1c7e8:	sub	r3, r2, r3
   1c7ec:	rsbs	r3, r3, #31
   1c7f0:	addne	r3, r3, r3, lsl #1
   1c7f4:	mov	r2, #0
   1c7f8:	addne	pc, pc, r3, lsl #2
   1c7fc:	nop			; (mov r0, r0)
   1c800:	cmp	r0, r1, lsl #31
   1c804:	adc	r2, r2, r2
   1c808:	subcs	r0, r0, r1, lsl #31
   1c80c:	cmp	r0, r1, lsl #30
   1c810:	adc	r2, r2, r2
   1c814:	subcs	r0, r0, r1, lsl #30
   1c818:	cmp	r0, r1, lsl #29
   1c81c:	adc	r2, r2, r2
   1c820:	subcs	r0, r0, r1, lsl #29
   1c824:	cmp	r0, r1, lsl #28
   1c828:	adc	r2, r2, r2
   1c82c:	subcs	r0, r0, r1, lsl #28
   1c830:	cmp	r0, r1, lsl #27
   1c834:	adc	r2, r2, r2
   1c838:	subcs	r0, r0, r1, lsl #27
   1c83c:	cmp	r0, r1, lsl #26
   1c840:	adc	r2, r2, r2
   1c844:	subcs	r0, r0, r1, lsl #26
   1c848:	cmp	r0, r1, lsl #25
   1c84c:	adc	r2, r2, r2
   1c850:	subcs	r0, r0, r1, lsl #25
   1c854:	cmp	r0, r1, lsl #24
   1c858:	adc	r2, r2, r2
   1c85c:	subcs	r0, r0, r1, lsl #24
   1c860:	cmp	r0, r1, lsl #23
   1c864:	adc	r2, r2, r2
   1c868:	subcs	r0, r0, r1, lsl #23
   1c86c:	cmp	r0, r1, lsl #22
   1c870:	adc	r2, r2, r2
   1c874:	subcs	r0, r0, r1, lsl #22
   1c878:	cmp	r0, r1, lsl #21
   1c87c:	adc	r2, r2, r2
   1c880:	subcs	r0, r0, r1, lsl #21
   1c884:	cmp	r0, r1, lsl #20
   1c888:	adc	r2, r2, r2
   1c88c:	subcs	r0, r0, r1, lsl #20
   1c890:	cmp	r0, r1, lsl #19
   1c894:	adc	r2, r2, r2
   1c898:	subcs	r0, r0, r1, lsl #19
   1c89c:	cmp	r0, r1, lsl #18
   1c8a0:	adc	r2, r2, r2
   1c8a4:	subcs	r0, r0, r1, lsl #18
   1c8a8:	cmp	r0, r1, lsl #17
   1c8ac:	adc	r2, r2, r2
   1c8b0:	subcs	r0, r0, r1, lsl #17
   1c8b4:	cmp	r0, r1, lsl #16
   1c8b8:	adc	r2, r2, r2
   1c8bc:	subcs	r0, r0, r1, lsl #16
   1c8c0:	cmp	r0, r1, lsl #15
   1c8c4:	adc	r2, r2, r2
   1c8c8:	subcs	r0, r0, r1, lsl #15
   1c8cc:	cmp	r0, r1, lsl #14
   1c8d0:	adc	r2, r2, r2
   1c8d4:	subcs	r0, r0, r1, lsl #14
   1c8d8:	cmp	r0, r1, lsl #13
   1c8dc:	adc	r2, r2, r2
   1c8e0:	subcs	r0, r0, r1, lsl #13
   1c8e4:	cmp	r0, r1, lsl #12
   1c8e8:	adc	r2, r2, r2
   1c8ec:	subcs	r0, r0, r1, lsl #12
   1c8f0:	cmp	r0, r1, lsl #11
   1c8f4:	adc	r2, r2, r2
   1c8f8:	subcs	r0, r0, r1, lsl #11
   1c8fc:	cmp	r0, r1, lsl #10
   1c900:	adc	r2, r2, r2
   1c904:	subcs	r0, r0, r1, lsl #10
   1c908:	cmp	r0, r1, lsl #9
   1c90c:	adc	r2, r2, r2
   1c910:	subcs	r0, r0, r1, lsl #9
   1c914:	cmp	r0, r1, lsl #8
   1c918:	adc	r2, r2, r2
   1c91c:	subcs	r0, r0, r1, lsl #8
   1c920:	cmp	r0, r1, lsl #7
   1c924:	adc	r2, r2, r2
   1c928:	subcs	r0, r0, r1, lsl #7
   1c92c:	cmp	r0, r1, lsl #6
   1c930:	adc	r2, r2, r2
   1c934:	subcs	r0, r0, r1, lsl #6
   1c938:	cmp	r0, r1, lsl #5
   1c93c:	adc	r2, r2, r2
   1c940:	subcs	r0, r0, r1, lsl #5
   1c944:	cmp	r0, r1, lsl #4
   1c948:	adc	r2, r2, r2
   1c94c:	subcs	r0, r0, r1, lsl #4
   1c950:	cmp	r0, r1, lsl #3
   1c954:	adc	r2, r2, r2
   1c958:	subcs	r0, r0, r1, lsl #3
   1c95c:	cmp	r0, r1, lsl #2
   1c960:	adc	r2, r2, r2
   1c964:	subcs	r0, r0, r1, lsl #2
   1c968:	cmp	r0, r1, lsl #1
   1c96c:	adc	r2, r2, r2
   1c970:	subcs	r0, r0, r1, lsl #1
   1c974:	cmp	r0, r1
   1c978:	adc	r2, r2, r2
   1c97c:	subcs	r0, r0, r1
   1c980:	mov	r0, r2
   1c984:	bx	lr
   1c988:	moveq	r0, #1
   1c98c:	movne	r0, #0
   1c990:	bx	lr
   1c994:	clz	r2, r1
   1c998:	rsb	r2, r2, #31
   1c99c:	lsr	r0, r0, r2
   1c9a0:	bx	lr
   1c9a4:	cmp	r0, #0
   1c9a8:	mvnne	r0, #0
   1c9ac:	b	1d004 <__assert_fail@plt+0xb900>
   1c9b0:	cmp	r1, #0
   1c9b4:	beq	1c9a4 <__assert_fail@plt+0xb2a0>
   1c9b8:	push	{r0, r1, lr}
   1c9bc:	bl	1c7c4 <__assert_fail@plt+0xb0c0>
   1c9c0:	pop	{r1, r2, lr}
   1c9c4:	mul	r3, r2, r0
   1c9c8:	sub	r1, r1, r3
   1c9cc:	bx	lr
   1c9d0:	cmp	r1, #0
   1c9d4:	beq	1cbe0 <__assert_fail@plt+0xb4dc>
   1c9d8:	eor	ip, r0, r1
   1c9dc:	rsbmi	r1, r1, #0
   1c9e0:	subs	r2, r1, #1
   1c9e4:	beq	1cbac <__assert_fail@plt+0xb4a8>
   1c9e8:	movs	r3, r0
   1c9ec:	rsbmi	r3, r0, #0
   1c9f0:	cmp	r3, r1
   1c9f4:	bls	1cbb8 <__assert_fail@plt+0xb4b4>
   1c9f8:	tst	r1, r2
   1c9fc:	beq	1cbc8 <__assert_fail@plt+0xb4c4>
   1ca00:	clz	r2, r3
   1ca04:	clz	r0, r1
   1ca08:	sub	r2, r0, r2
   1ca0c:	rsbs	r2, r2, #31
   1ca10:	addne	r2, r2, r2, lsl #1
   1ca14:	mov	r0, #0
   1ca18:	addne	pc, pc, r2, lsl #2
   1ca1c:	nop			; (mov r0, r0)
   1ca20:	cmp	r3, r1, lsl #31
   1ca24:	adc	r0, r0, r0
   1ca28:	subcs	r3, r3, r1, lsl #31
   1ca2c:	cmp	r3, r1, lsl #30
   1ca30:	adc	r0, r0, r0
   1ca34:	subcs	r3, r3, r1, lsl #30
   1ca38:	cmp	r3, r1, lsl #29
   1ca3c:	adc	r0, r0, r0
   1ca40:	subcs	r3, r3, r1, lsl #29
   1ca44:	cmp	r3, r1, lsl #28
   1ca48:	adc	r0, r0, r0
   1ca4c:	subcs	r3, r3, r1, lsl #28
   1ca50:	cmp	r3, r1, lsl #27
   1ca54:	adc	r0, r0, r0
   1ca58:	subcs	r3, r3, r1, lsl #27
   1ca5c:	cmp	r3, r1, lsl #26
   1ca60:	adc	r0, r0, r0
   1ca64:	subcs	r3, r3, r1, lsl #26
   1ca68:	cmp	r3, r1, lsl #25
   1ca6c:	adc	r0, r0, r0
   1ca70:	subcs	r3, r3, r1, lsl #25
   1ca74:	cmp	r3, r1, lsl #24
   1ca78:	adc	r0, r0, r0
   1ca7c:	subcs	r3, r3, r1, lsl #24
   1ca80:	cmp	r3, r1, lsl #23
   1ca84:	adc	r0, r0, r0
   1ca88:	subcs	r3, r3, r1, lsl #23
   1ca8c:	cmp	r3, r1, lsl #22
   1ca90:	adc	r0, r0, r0
   1ca94:	subcs	r3, r3, r1, lsl #22
   1ca98:	cmp	r3, r1, lsl #21
   1ca9c:	adc	r0, r0, r0
   1caa0:	subcs	r3, r3, r1, lsl #21
   1caa4:	cmp	r3, r1, lsl #20
   1caa8:	adc	r0, r0, r0
   1caac:	subcs	r3, r3, r1, lsl #20
   1cab0:	cmp	r3, r1, lsl #19
   1cab4:	adc	r0, r0, r0
   1cab8:	subcs	r3, r3, r1, lsl #19
   1cabc:	cmp	r3, r1, lsl #18
   1cac0:	adc	r0, r0, r0
   1cac4:	subcs	r3, r3, r1, lsl #18
   1cac8:	cmp	r3, r1, lsl #17
   1cacc:	adc	r0, r0, r0
   1cad0:	subcs	r3, r3, r1, lsl #17
   1cad4:	cmp	r3, r1, lsl #16
   1cad8:	adc	r0, r0, r0
   1cadc:	subcs	r3, r3, r1, lsl #16
   1cae0:	cmp	r3, r1, lsl #15
   1cae4:	adc	r0, r0, r0
   1cae8:	subcs	r3, r3, r1, lsl #15
   1caec:	cmp	r3, r1, lsl #14
   1caf0:	adc	r0, r0, r0
   1caf4:	subcs	r3, r3, r1, lsl #14
   1caf8:	cmp	r3, r1, lsl #13
   1cafc:	adc	r0, r0, r0
   1cb00:	subcs	r3, r3, r1, lsl #13
   1cb04:	cmp	r3, r1, lsl #12
   1cb08:	adc	r0, r0, r0
   1cb0c:	subcs	r3, r3, r1, lsl #12
   1cb10:	cmp	r3, r1, lsl #11
   1cb14:	adc	r0, r0, r0
   1cb18:	subcs	r3, r3, r1, lsl #11
   1cb1c:	cmp	r3, r1, lsl #10
   1cb20:	adc	r0, r0, r0
   1cb24:	subcs	r3, r3, r1, lsl #10
   1cb28:	cmp	r3, r1, lsl #9
   1cb2c:	adc	r0, r0, r0
   1cb30:	subcs	r3, r3, r1, lsl #9
   1cb34:	cmp	r3, r1, lsl #8
   1cb38:	adc	r0, r0, r0
   1cb3c:	subcs	r3, r3, r1, lsl #8
   1cb40:	cmp	r3, r1, lsl #7
   1cb44:	adc	r0, r0, r0
   1cb48:	subcs	r3, r3, r1, lsl #7
   1cb4c:	cmp	r3, r1, lsl #6
   1cb50:	adc	r0, r0, r0
   1cb54:	subcs	r3, r3, r1, lsl #6
   1cb58:	cmp	r3, r1, lsl #5
   1cb5c:	adc	r0, r0, r0
   1cb60:	subcs	r3, r3, r1, lsl #5
   1cb64:	cmp	r3, r1, lsl #4
   1cb68:	adc	r0, r0, r0
   1cb6c:	subcs	r3, r3, r1, lsl #4
   1cb70:	cmp	r3, r1, lsl #3
   1cb74:	adc	r0, r0, r0
   1cb78:	subcs	r3, r3, r1, lsl #3
   1cb7c:	cmp	r3, r1, lsl #2
   1cb80:	adc	r0, r0, r0
   1cb84:	subcs	r3, r3, r1, lsl #2
   1cb88:	cmp	r3, r1, lsl #1
   1cb8c:	adc	r0, r0, r0
   1cb90:	subcs	r3, r3, r1, lsl #1
   1cb94:	cmp	r3, r1
   1cb98:	adc	r0, r0, r0
   1cb9c:	subcs	r3, r3, r1
   1cba0:	cmp	ip, #0
   1cba4:	rsbmi	r0, r0, #0
   1cba8:	bx	lr
   1cbac:	teq	ip, r0
   1cbb0:	rsbmi	r0, r0, #0
   1cbb4:	bx	lr
   1cbb8:	movcc	r0, #0
   1cbbc:	asreq	r0, ip, #31
   1cbc0:	orreq	r0, r0, #1
   1cbc4:	bx	lr
   1cbc8:	clz	r2, r1
   1cbcc:	rsb	r2, r2, #31
   1cbd0:	cmp	ip, #0
   1cbd4:	lsr	r0, r3, r2
   1cbd8:	rsbmi	r0, r0, #0
   1cbdc:	bx	lr
   1cbe0:	cmp	r0, #0
   1cbe4:	mvngt	r0, #-2147483648	; 0x80000000
   1cbe8:	movlt	r0, #-2147483648	; 0x80000000
   1cbec:	b	1d004 <__assert_fail@plt+0xb900>
   1cbf0:	cmp	r1, #0
   1cbf4:	beq	1cbe0 <__assert_fail@plt+0xb4dc>
   1cbf8:	push	{r0, r1, lr}
   1cbfc:	bl	1c9d8 <__assert_fail@plt+0xb2d4>
   1cc00:	pop	{r1, r2, lr}
   1cc04:	mul	r3, r2, r0
   1cc08:	sub	r1, r1, r3
   1cc0c:	bx	lr
   1cc10:	eor	r1, r1, #-2147483648	; 0x80000000
   1cc14:	b	1cc1c <__assert_fail@plt+0xb518>
   1cc18:	eor	r3, r3, #-2147483648	; 0x80000000
   1cc1c:	push	{r4, r5, lr}
   1cc20:	lsl	r4, r1, #1
   1cc24:	lsl	r5, r3, #1
   1cc28:	teq	r4, r5
   1cc2c:	teqeq	r0, r2
   1cc30:	orrsne	ip, r4, r0
   1cc34:	orrsne	ip, r5, r2
   1cc38:	mvnsne	ip, r4, asr #21
   1cc3c:	mvnsne	ip, r5, asr #21
   1cc40:	beq	1ce2c <__assert_fail@plt+0xb728>
   1cc44:	lsr	r4, r4, #21
   1cc48:	rsbs	r5, r4, r5, lsr #21
   1cc4c:	rsblt	r5, r5, #0
   1cc50:	ble	1cc70 <__assert_fail@plt+0xb56c>
   1cc54:	add	r4, r4, r5
   1cc58:	eor	r2, r0, r2
   1cc5c:	eor	r3, r1, r3
   1cc60:	eor	r0, r2, r0
   1cc64:	eor	r1, r3, r1
   1cc68:	eor	r2, r0, r2
   1cc6c:	eor	r3, r1, r3
   1cc70:	cmp	r5, #54	; 0x36
   1cc74:	pophi	{r4, r5, pc}
   1cc78:	tst	r1, #-2147483648	; 0x80000000
   1cc7c:	lsl	r1, r1, #12
   1cc80:	mov	ip, #1048576	; 0x100000
   1cc84:	orr	r1, ip, r1, lsr #12
   1cc88:	beq	1cc94 <__assert_fail@plt+0xb590>
   1cc8c:	rsbs	r0, r0, #0
   1cc90:	rsc	r1, r1, #0
   1cc94:	tst	r3, #-2147483648	; 0x80000000
   1cc98:	lsl	r3, r3, #12
   1cc9c:	orr	r3, ip, r3, lsr #12
   1cca0:	beq	1ccac <__assert_fail@plt+0xb5a8>
   1cca4:	rsbs	r2, r2, #0
   1cca8:	rsc	r3, r3, #0
   1ccac:	teq	r4, r5
   1ccb0:	beq	1ce14 <__assert_fail@plt+0xb710>
   1ccb4:	sub	r4, r4, #1
   1ccb8:	rsbs	lr, r5, #32
   1ccbc:	blt	1ccd8 <__assert_fail@plt+0xb5d4>
   1ccc0:	lsl	ip, r2, lr
   1ccc4:	adds	r0, r0, r2, lsr r5
   1ccc8:	adc	r1, r1, #0
   1cccc:	adds	r0, r0, r3, lsl lr
   1ccd0:	adcs	r1, r1, r3, asr r5
   1ccd4:	b	1ccf4 <__assert_fail@plt+0xb5f0>
   1ccd8:	sub	r5, r5, #32
   1ccdc:	add	lr, lr, #32
   1cce0:	cmp	r2, #1
   1cce4:	lsl	ip, r3, lr
   1cce8:	orrcs	ip, ip, #2
   1ccec:	adds	r0, r0, r3, asr r5
   1ccf0:	adcs	r1, r1, r3, asr #31
   1ccf4:	and	r5, r1, #-2147483648	; 0x80000000
   1ccf8:	bpl	1cd08 <__assert_fail@plt+0xb604>
   1ccfc:	rsbs	ip, ip, #0
   1cd00:	rscs	r0, r0, #0
   1cd04:	rsc	r1, r1, #0
   1cd08:	cmp	r1, #1048576	; 0x100000
   1cd0c:	bcc	1cd4c <__assert_fail@plt+0xb648>
   1cd10:	cmp	r1, #2097152	; 0x200000
   1cd14:	bcc	1cd34 <__assert_fail@plt+0xb630>
   1cd18:	lsrs	r1, r1, #1
   1cd1c:	rrxs	r0, r0
   1cd20:	rrx	ip, ip
   1cd24:	add	r4, r4, #1
   1cd28:	lsl	r2, r4, #21
   1cd2c:	cmn	r2, #4194304	; 0x400000
   1cd30:	bcs	1ce8c <__assert_fail@plt+0xb788>
   1cd34:	cmp	ip, #-2147483648	; 0x80000000
   1cd38:	lsrseq	ip, r0, #1
   1cd3c:	adcs	r0, r0, #0
   1cd40:	adc	r1, r1, r4, lsl #20
   1cd44:	orr	r1, r1, r5
   1cd48:	pop	{r4, r5, pc}
   1cd4c:	lsls	ip, ip, #1
   1cd50:	adcs	r0, r0, r0
   1cd54:	adc	r1, r1, r1
   1cd58:	tst	r1, #1048576	; 0x100000
   1cd5c:	sub	r4, r4, #1
   1cd60:	bne	1cd34 <__assert_fail@plt+0xb630>
   1cd64:	teq	r1, #0
   1cd68:	moveq	r1, r0
   1cd6c:	moveq	r0, #0
   1cd70:	clz	r3, r1
   1cd74:	addeq	r3, r3, #32
   1cd78:	sub	r3, r3, #11
   1cd7c:	subs	r2, r3, #32
   1cd80:	bge	1cda4 <__assert_fail@plt+0xb6a0>
   1cd84:	adds	r2, r2, #12
   1cd88:	ble	1cda0 <__assert_fail@plt+0xb69c>
   1cd8c:	add	ip, r2, #20
   1cd90:	rsb	r2, r2, #12
   1cd94:	lsl	r0, r1, ip
   1cd98:	lsr	r1, r1, r2
   1cd9c:	b	1cdb4 <__assert_fail@plt+0xb6b0>
   1cda0:	add	r2, r2, #20
   1cda4:	rsble	ip, r2, #32
   1cda8:	lsl	r1, r1, r2
   1cdac:	orrle	r1, r1, r0, lsr ip
   1cdb0:	lslle	r0, r0, r2
   1cdb4:	subs	r4, r4, r3
   1cdb8:	addge	r1, r1, r4, lsl #20
   1cdbc:	orrge	r1, r1, r5
   1cdc0:	popge	{r4, r5, pc}
   1cdc4:	mvn	r4, r4
   1cdc8:	subs	r4, r4, #31
   1cdcc:	bge	1ce08 <__assert_fail@plt+0xb704>
   1cdd0:	adds	r4, r4, #12
   1cdd4:	bgt	1cdf0 <__assert_fail@plt+0xb6ec>
   1cdd8:	add	r4, r4, #20
   1cddc:	rsb	r2, r4, #32
   1cde0:	lsr	r0, r0, r4
   1cde4:	orr	r0, r0, r1, lsl r2
   1cde8:	orr	r1, r5, r1, lsr r4
   1cdec:	pop	{r4, r5, pc}
   1cdf0:	rsb	r4, r4, #12
   1cdf4:	rsb	r2, r4, #32
   1cdf8:	lsr	r0, r0, r2
   1cdfc:	orr	r0, r0, r1, lsl r4
   1ce00:	mov	r1, r5
   1ce04:	pop	{r4, r5, pc}
   1ce08:	lsr	r0, r1, r4
   1ce0c:	mov	r1, r5
   1ce10:	pop	{r4, r5, pc}
   1ce14:	teq	r4, #0
   1ce18:	eor	r3, r3, #1048576	; 0x100000
   1ce1c:	eoreq	r1, r1, #1048576	; 0x100000
   1ce20:	addeq	r4, r4, #1
   1ce24:	subne	r5, r5, #1
   1ce28:	b	1ccb4 <__assert_fail@plt+0xb5b0>
   1ce2c:	mvns	ip, r4, asr #21
   1ce30:	mvnsne	ip, r5, asr #21
   1ce34:	beq	1ce9c <__assert_fail@plt+0xb798>
   1ce38:	teq	r4, r5
   1ce3c:	teqeq	r0, r2
   1ce40:	beq	1ce54 <__assert_fail@plt+0xb750>
   1ce44:	orrs	ip, r4, r0
   1ce48:	moveq	r1, r3
   1ce4c:	moveq	r0, r2
   1ce50:	pop	{r4, r5, pc}
   1ce54:	teq	r1, r3
   1ce58:	movne	r1, #0
   1ce5c:	movne	r0, #0
   1ce60:	popne	{r4, r5, pc}
   1ce64:	lsrs	ip, r4, #21
   1ce68:	bne	1ce7c <__assert_fail@plt+0xb778>
   1ce6c:	lsls	r0, r0, #1
   1ce70:	adcs	r1, r1, r1
   1ce74:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1ce78:	pop	{r4, r5, pc}
   1ce7c:	adds	r4, r4, #4194304	; 0x400000
   1ce80:	addcc	r1, r1, #1048576	; 0x100000
   1ce84:	popcc	{r4, r5, pc}
   1ce88:	and	r5, r1, #-2147483648	; 0x80000000
   1ce8c:	orr	r1, r5, #2130706432	; 0x7f000000
   1ce90:	orr	r1, r1, #15728640	; 0xf00000
   1ce94:	mov	r0, #0
   1ce98:	pop	{r4, r5, pc}
   1ce9c:	mvns	ip, r4, asr #21
   1cea0:	movne	r1, r3
   1cea4:	movne	r0, r2
   1cea8:	mvnseq	ip, r5, asr #21
   1ceac:	movne	r3, r1
   1ceb0:	movne	r2, r0
   1ceb4:	orrs	r4, r0, r1, lsl #12
   1ceb8:	orrseq	r5, r2, r3, lsl #12
   1cebc:	teqeq	r1, r3
   1cec0:	orrne	r1, r1, #524288	; 0x80000
   1cec4:	pop	{r4, r5, pc}
   1cec8:	teq	r0, #0
   1cecc:	moveq	r1, #0
   1ced0:	bxeq	lr
   1ced4:	push	{r4, r5, lr}
   1ced8:	mov	r4, #1024	; 0x400
   1cedc:	add	r4, r4, #50	; 0x32
   1cee0:	mov	r5, #0
   1cee4:	mov	r1, #0
   1cee8:	b	1cd64 <__assert_fail@plt+0xb660>
   1ceec:	teq	r0, #0
   1cef0:	moveq	r1, #0
   1cef4:	bxeq	lr
   1cef8:	push	{r4, r5, lr}
   1cefc:	mov	r4, #1024	; 0x400
   1cf00:	add	r4, r4, #50	; 0x32
   1cf04:	ands	r5, r0, #-2147483648	; 0x80000000
   1cf08:	rsbmi	r0, r0, #0
   1cf0c:	mov	r1, #0
   1cf10:	b	1cd64 <__assert_fail@plt+0xb660>
   1cf14:	lsls	r2, r0, #1
   1cf18:	asr	r1, r2, #3
   1cf1c:	rrx	r1, r1
   1cf20:	lsl	r0, r2, #28
   1cf24:	andsne	r3, r2, #-16777216	; 0xff000000
   1cf28:	teqne	r3, #-16777216	; 0xff000000
   1cf2c:	eorne	r1, r1, #939524096	; 0x38000000
   1cf30:	bxne	lr
   1cf34:	teq	r2, #0
   1cf38:	teqne	r3, #-16777216	; 0xff000000
   1cf3c:	bxeq	lr
   1cf40:	push	{r4, r5, lr}
   1cf44:	mov	r4, #896	; 0x380
   1cf48:	and	r5, r1, #-2147483648	; 0x80000000
   1cf4c:	bic	r1, r1, #-2147483648	; 0x80000000
   1cf50:	b	1cd64 <__assert_fail@plt+0xb660>
   1cf54:	orrs	r2, r0, r1
   1cf58:	bxeq	lr
   1cf5c:	push	{r4, r5, lr}
   1cf60:	mov	r5, #0
   1cf64:	b	1cf84 <__assert_fail@plt+0xb880>
   1cf68:	orrs	r2, r0, r1
   1cf6c:	bxeq	lr
   1cf70:	push	{r4, r5, lr}
   1cf74:	ands	r5, r1, #-2147483648	; 0x80000000
   1cf78:	bpl	1cf84 <__assert_fail@plt+0xb880>
   1cf7c:	rsbs	r0, r0, #0
   1cf80:	rsc	r1, r1, #0
   1cf84:	mov	r4, #1024	; 0x400
   1cf88:	add	r4, r4, #50	; 0x32
   1cf8c:	lsrs	ip, r1, #22
   1cf90:	beq	1cd08 <__assert_fail@plt+0xb604>
   1cf94:	mov	r2, #3
   1cf98:	lsrs	ip, ip, #3
   1cf9c:	addne	r2, r2, #3
   1cfa0:	lsrs	ip, ip, #3
   1cfa4:	addne	r2, r2, #3
   1cfa8:	add	r2, r2, ip, lsr #3
   1cfac:	rsb	r3, r2, #32
   1cfb0:	lsl	ip, r0, r3
   1cfb4:	lsr	r0, r0, r2
   1cfb8:	orr	r0, r0, r1, lsl r3
   1cfbc:	lsr	r1, r1, r2
   1cfc0:	add	r4, r4, r2
   1cfc4:	b	1cd08 <__assert_fail@plt+0xb604>
   1cfc8:	cmp	r3, #0
   1cfcc:	cmpeq	r2, #0
   1cfd0:	bne	1cfe8 <__assert_fail@plt+0xb8e4>
   1cfd4:	cmp	r1, #0
   1cfd8:	cmpeq	r0, #0
   1cfdc:	mvnne	r1, #0
   1cfe0:	mvnne	r0, #0
   1cfe4:	b	1d004 <__assert_fail@plt+0xb900>
   1cfe8:	sub	sp, sp, #8
   1cfec:	push	{sp, lr}
   1cff0:	bl	1d060 <__assert_fail@plt+0xb95c>
   1cff4:	ldr	lr, [sp, #4]
   1cff8:	add	sp, sp, #8
   1cffc:	pop	{r2, r3}
   1d000:	bx	lr
   1d004:	push	{r1, lr}
   1d008:	mov	r0, #8
   1d00c:	bl	112fc <raise@plt>
   1d010:	pop	{r1, pc}
   1d014:	andeq	r0, r0, r0
   1d018:	vmov	d7, r0, r1
   1d01c:	vldr	d6, [pc, #44]	; 1d050 <__assert_fail@plt+0xb94c>
   1d020:	vldr	d5, [pc, #48]	; 1d058 <__assert_fail@plt+0xb954>
   1d024:	mov	r0, #0
   1d028:	vmul.f64	d6, d7, d6
   1d02c:	vcvt.u32.f64	s12, d6
   1d030:	vcvt.f64.u32	d4, s12
   1d034:	vmov	r1, s12
   1d038:	vmls.f64	d7, d4, d5
   1d03c:	vcvt.u32.f64	s14, d7
   1d040:	vmov	r3, s14
   1d044:	orr	r0, r0, r3
   1d048:	bx	lr
   1d04c:	nop			; (mov r0, r0)
   1d050:	andeq	r0, r0, r0
   1d054:	ldclcc	0, cr0, [r0]
   1d058:	andeq	r0, r0, r0
   1d05c:	mvnsmi	r0, r0
   1d060:	cmp	r1, r3
   1d064:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d068:	cmpeq	r0, r2
   1d06c:	mov	r4, r0
   1d070:	mov	r5, r1
   1d074:	ldr	r9, [sp, #28]
   1d078:	movcc	r0, #0
   1d07c:	movcc	r1, #0
   1d080:	bcc	1d178 <__assert_fail@plt+0xba74>
   1d084:	cmp	r3, #0
   1d088:	clzeq	ip, r2
   1d08c:	clzne	ip, r3
   1d090:	addeq	ip, ip, #32
   1d094:	cmp	r5, #0
   1d098:	clzeq	r1, r4
   1d09c:	addeq	r1, r1, #32
   1d0a0:	clzne	r1, r5
   1d0a4:	sub	ip, ip, r1
   1d0a8:	sub	lr, ip, #32
   1d0ac:	lsl	r7, r3, ip
   1d0b0:	rsb	r8, ip, #32
   1d0b4:	orr	r7, r7, r2, lsl lr
   1d0b8:	orr	r7, r7, r2, lsr r8
   1d0bc:	lsl	r6, r2, ip
   1d0c0:	cmp	r5, r7
   1d0c4:	cmpeq	r4, r6
   1d0c8:	movcc	r0, #0
   1d0cc:	movcc	r1, #0
   1d0d0:	bcc	1d0ec <__assert_fail@plt+0xb9e8>
   1d0d4:	mov	r3, #1
   1d0d8:	subs	r4, r4, r6
   1d0dc:	lsl	r1, r3, lr
   1d0e0:	lsl	r0, r3, ip
   1d0e4:	orr	r1, r1, r3, lsr r8
   1d0e8:	sbc	r5, r5, r7
   1d0ec:	cmp	ip, #0
   1d0f0:	beq	1d178 <__assert_fail@plt+0xba74>
   1d0f4:	lsrs	r3, r7, #1
   1d0f8:	rrx	r2, r6
   1d0fc:	mov	r6, ip
   1d100:	b	1d124 <__assert_fail@plt+0xba20>
   1d104:	subs	r4, r4, r2
   1d108:	sbc	r5, r5, r3
   1d10c:	adds	r4, r4, r4
   1d110:	adc	r5, r5, r5
   1d114:	adds	r4, r4, #1
   1d118:	adc	r5, r5, #0
   1d11c:	subs	r6, r6, #1
   1d120:	beq	1d140 <__assert_fail@plt+0xba3c>
   1d124:	cmp	r5, r3
   1d128:	cmpeq	r4, r2
   1d12c:	bcs	1d104 <__assert_fail@plt+0xba00>
   1d130:	adds	r4, r4, r4
   1d134:	adc	r5, r5, r5
   1d138:	subs	r6, r6, #1
   1d13c:	bne	1d124 <__assert_fail@plt+0xba20>
   1d140:	lsr	r6, r4, ip
   1d144:	lsr	r7, r5, ip
   1d148:	orr	r6, r6, r5, lsl r8
   1d14c:	adds	r2, r0, r4
   1d150:	orr	r6, r6, r5, lsr lr
   1d154:	adc	r3, r1, r5
   1d158:	lsl	r1, r7, ip
   1d15c:	orr	r1, r1, r6, lsl lr
   1d160:	lsl	r0, r6, ip
   1d164:	orr	r1, r1, r6, lsr r8
   1d168:	subs	r0, r2, r0
   1d16c:	mov	r4, r6
   1d170:	mov	r5, r7
   1d174:	sbc	r1, r3, r1
   1d178:	cmp	r9, #0
   1d17c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1d180:	strd	r4, [r9]
   1d184:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d188:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d18c:	mov	r7, r0
   1d190:	ldr	r6, [pc, #72]	; 1d1e0 <__assert_fail@plt+0xbadc>
   1d194:	ldr	r5, [pc, #72]	; 1d1e4 <__assert_fail@plt+0xbae0>
   1d198:	add	r6, pc, r6
   1d19c:	add	r5, pc, r5
   1d1a0:	sub	r6, r6, r5
   1d1a4:	mov	r8, r1
   1d1a8:	mov	r9, r2
   1d1ac:	bl	112c4 <calloc@plt-0x20>
   1d1b0:	asrs	r6, r6, #2
   1d1b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d1b8:	mov	r4, #0
   1d1bc:	add	r4, r4, #1
   1d1c0:	ldr	r3, [r5], #4
   1d1c4:	mov	r2, r9
   1d1c8:	mov	r1, r8
   1d1cc:	mov	r0, r7
   1d1d0:	blx	r3
   1d1d4:	cmp	r6, r4
   1d1d8:	bne	1d1bc <__assert_fail@plt+0xbab8>
   1d1dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d1e0:	andeq	r1, r1, r0, ror sp
   1d1e4:	andeq	r1, r1, r8, ror #26
   1d1e8:	bx	lr
   1d1ec:	ldr	r3, [pc, #12]	; 1d200 <__assert_fail@plt+0xbafc>
   1d1f0:	mov	r1, #0
   1d1f4:	add	r3, pc, r3
   1d1f8:	ldr	r2, [r3]
   1d1fc:	b	11584 <__cxa_atexit@plt>
   1d200:	andeq	r1, r1, ip, ror pc

Disassembly of section .fini:

0001d204 <.fini>:
   1d204:	push	{r3, lr}
   1d208:	pop	{r3, pc}
