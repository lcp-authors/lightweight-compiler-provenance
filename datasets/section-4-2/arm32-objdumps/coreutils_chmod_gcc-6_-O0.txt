
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

00010ea8 <.init>:
   10ea8:	push	{r3, lr}
   10eac:	bl	11214 <__assert_fail@plt+0x4c>
   10eb0:	pop	{r3, pc}

Disassembly of section .plt:

00010eb4 <fstatfs64@plt-0x14>:
   10eb4:	push	{lr}		; (str lr, [sp, #-4]!)
   10eb8:	ldr	lr, [pc, #4]	; 10ec4 <fstatfs64@plt-0x4>
   10ebc:	add	lr, pc, lr
   10ec0:	ldr	pc, [lr, #8]!
   10ec4:	andeq	pc, r1, ip, lsr r1	; <UNPREDICTABLE>

00010ec8 <fstatfs64@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #126976	; 0x1f000
   10ed0:	ldr	pc, [ip, #316]!	; 0x13c

00010ed4 <calloc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #126976	; 0x1f000
   10edc:	ldr	pc, [ip, #308]!	; 0x134

00010ee0 <fputs_unlocked@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #126976	; 0x1f000
   10ee8:	ldr	pc, [ip, #300]!	; 0x12c

00010eec <raise@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #126976	; 0x1f000
   10ef4:	ldr	pc, [ip, #292]!	; 0x124

00010ef8 <strcmp@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #126976	; 0x1f000
   10f00:	ldr	pc, [ip, #284]!	; 0x11c

00010f04 <printf@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #126976	; 0x1f000
   10f0c:	ldr	pc, [ip, #276]!	; 0x114

00010f10 <fflush@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #126976	; 0x1f000
   10f18:	ldr	pc, [ip, #268]!	; 0x10c

00010f1c <memmove@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #126976	; 0x1f000
   10f24:	ldr	pc, [ip, #260]!	; 0x104

00010f28 <free@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #126976	; 0x1f000
   10f30:	ldr	pc, [ip, #252]!	; 0xfc

00010f34 <_exit@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #126976	; 0x1f000
   10f3c:	ldr	pc, [ip, #244]!	; 0xf4

00010f40 <memcpy@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #126976	; 0x1f000
   10f48:	ldr	pc, [ip, #236]!	; 0xec

00010f4c <mbsinit@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #126976	; 0x1f000
   10f54:	ldr	pc, [ip, #228]!	; 0xe4

00010f58 <memcmp@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #126976	; 0x1f000
   10f60:	ldr	pc, [ip, #220]!	; 0xdc

00010f64 <fputc_unlocked@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #126976	; 0x1f000
   10f6c:	ldr	pc, [ip, #212]!	; 0xd4

00010f70 <realloc@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #126976	; 0x1f000
   10f78:	ldr	pc, [ip, #204]!	; 0xcc

00010f7c <textdomain@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #126976	; 0x1f000
   10f84:	ldr	pc, [ip, #196]!	; 0xc4

00010f88 <__fxstatat64@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #126976	; 0x1f000
   10f90:	ldr	pc, [ip, #188]!	; 0xbc

00010f94 <iswprint@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #126976	; 0x1f000
   10f9c:	ldr	pc, [ip, #180]!	; 0xb4

00010fa0 <__fxstat64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #126976	; 0x1f000
   10fa8:	ldr	pc, [ip, #172]!	; 0xac

00010fac <fwrite@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #126976	; 0x1f000
   10fb4:	ldr	pc, [ip, #164]!	; 0xa4

00010fb8 <lseek64@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #126976	; 0x1f000
   10fc0:	ldr	pc, [ip, #156]!	; 0x9c

00010fc4 <__ctype_get_mb_cur_max@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #126976	; 0x1f000
   10fcc:	ldr	pc, [ip, #148]!	; 0x94

00010fd0 <__fpending@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #126976	; 0x1f000
   10fd8:	ldr	pc, [ip, #140]!	; 0x8c

00010fdc <ferror_unlocked@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #126976	; 0x1f000
   10fe4:	ldr	pc, [ip, #132]!	; 0x84

00010fe8 <mbrtowc@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #126976	; 0x1f000
   10ff0:	ldr	pc, [ip, #124]!	; 0x7c

00010ff4 <error@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #126976	; 0x1f000
   10ffc:	ldr	pc, [ip, #116]!	; 0x74

00011000 <open64@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #126976	; 0x1f000
   11008:	ldr	pc, [ip, #108]!	; 0x6c

0001100c <malloc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #126976	; 0x1f000
   11014:	ldr	pc, [ip, #100]!	; 0x64

00011018 <__libc_start_main@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #126976	; 0x1f000
   11020:	ldr	pc, [ip, #92]!	; 0x5c

00011024 <__freading@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #126976	; 0x1f000
   1102c:	ldr	pc, [ip, #84]!	; 0x54

00011030 <__gmon_start__@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #126976	; 0x1f000
   11038:	ldr	pc, [ip, #76]!	; 0x4c

0001103c <getopt_long@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #126976	; 0x1f000
   11044:	ldr	pc, [ip, #68]!	; 0x44

00011048 <__ctype_b_loc@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #126976	; 0x1f000
   11050:	ldr	pc, [ip, #60]!	; 0x3c

00011054 <exit@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #126976	; 0x1f000
   1105c:	ldr	pc, [ip, #52]!	; 0x34

00011060 <gettext@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #126976	; 0x1f000
   11068:	ldr	pc, [ip, #44]!	; 0x2c

0001106c <strlen@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #126976	; 0x1f000
   11074:	ldr	pc, [ip, #36]!	; 0x24

00011078 <openat64@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #126976	; 0x1f000
   11080:	ldr	pc, [ip, #28]!

00011084 <fprintf@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #126976	; 0x1f000
   1108c:	ldr	pc, [ip, #20]!

00011090 <fchmodat@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #126976	; 0x1f000
   11098:	ldr	pc, [ip, #12]!

0001109c <__errno_location@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #126976	; 0x1f000
   110a4:	ldr	pc, [ip, #4]!

000110a8 <__cxa_atexit@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #122880	; 0x1e000
   110b0:	ldr	pc, [ip, #4092]!	; 0xffc

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #122880	; 0x1e000
   110bc:	ldr	pc, [ip, #4084]!	; 0xff4

000110c0 <fileno@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #122880	; 0x1e000
   110c8:	ldr	pc, [ip, #4076]!	; 0xfec

000110cc <fclose@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #122880	; 0x1e000
   110d4:	ldr	pc, [ip, #4068]!	; 0xfe4

000110d8 <fseeko64@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #122880	; 0x1e000
   110e0:	ldr	pc, [ip, #4060]!	; 0xfdc

000110e4 <fcntl64@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #122880	; 0x1e000
   110ec:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f0 <setlocale@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #122880	; 0x1e000
   110f8:	ldr	pc, [ip, #4044]!	; 0xfcc

000110fc <strrchr@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #122880	; 0x1e000
   11104:	ldr	pc, [ip, #4036]!	; 0xfc4

00011108 <nl_langinfo@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #122880	; 0x1e000
   11110:	ldr	pc, [ip, #4028]!	; 0xfbc

00011114 <sprintf@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #122880	; 0x1e000
   1111c:	ldr	pc, [ip, #4020]!	; 0xfb4

00011120 <readdir64@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #122880	; 0x1e000
   11128:	ldr	pc, [ip, #4012]!	; 0xfac

0001112c <fdopendir@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #122880	; 0x1e000
   11134:	ldr	pc, [ip, #4004]!	; 0xfa4

00011138 <dirfd@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #122880	; 0x1e000
   11140:	ldr	pc, [ip, #3996]!	; 0xf9c

00011144 <fchdir@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #122880	; 0x1e000
   1114c:	ldr	pc, [ip, #3988]!	; 0xf94

00011150 <qsort@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #122880	; 0x1e000
   11158:	ldr	pc, [ip, #3980]!	; 0xf8c

0001115c <bindtextdomain@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #122880	; 0x1e000
   11164:	ldr	pc, [ip, #3972]!	; 0xf84

00011168 <umask@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #122880	; 0x1e000
   11170:	ldr	pc, [ip, #3964]!	; 0xf7c

00011174 <chmod@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #122880	; 0x1e000
   1117c:	ldr	pc, [ip, #3956]!	; 0xf74

00011180 <__xstat64@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #122880	; 0x1e000
   11188:	ldr	pc, [ip, #3948]!	; 0xf6c

0001118c <strncmp@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #122880	; 0x1e000
   11194:	ldr	pc, [ip, #3940]!	; 0xf64

00011198 <abort@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #122880	; 0x1e000
   111a0:	ldr	pc, [ip, #3932]!	; 0xf5c

000111a4 <close@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #122880	; 0x1e000
   111ac:	ldr	pc, [ip, #3924]!	; 0xf54

000111b0 <__lxstat64@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #122880	; 0x1e000
   111b8:	ldr	pc, [ip, #3916]!	; 0xf4c

000111bc <closedir@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #122880	; 0x1e000
   111c4:	ldr	pc, [ip, #3908]!	; 0xf44

000111c8 <__assert_fail@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #122880	; 0x1e000
   111d0:	ldr	pc, [ip, #3900]!	; 0xf3c

Disassembly of section .text:

000111d8 <.text>:
   111d8:	mov	fp, #0
   111dc:	mov	lr, #0
   111e0:	pop	{r1}		; (ldr r1, [sp], #4)
   111e4:	mov	r2, sp
   111e8:	push	{r2}		; (str r2, [sp, #-4]!)
   111ec:	push	{r0}		; (str r0, [sp, #-4]!)
   111f0:	ldr	ip, [pc, #16]	; 11208 <__assert_fail@plt+0x40>
   111f4:	push	{ip}		; (str ip, [sp, #-4]!)
   111f8:	ldr	r0, [pc, #12]	; 1120c <__assert_fail@plt+0x44>
   111fc:	ldr	r3, [pc, #12]	; 11210 <__assert_fail@plt+0x48>
   11200:	bl	11018 <__libc_start_main@plt>
   11204:	bl	11198 <abort@plt>
   11208:	andeq	lr, r1, r4, lsl #10
   1120c:	andeq	r2, r1, r0, ror #1
   11210:	andeq	lr, r1, r4, lsr #9
   11214:	ldr	r3, [pc, #20]	; 11230 <__assert_fail@plt+0x68>
   11218:	ldr	r2, [pc, #20]	; 11234 <__assert_fail@plt+0x6c>
   1121c:	add	r3, pc, r3
   11220:	ldr	r2, [r3, r2]
   11224:	cmp	r2, #0
   11228:	bxeq	lr
   1122c:	b	11030 <__gmon_start__@plt>
   11230:	ldrdeq	lr, [r1], -ip
   11234:	andeq	r0, r0, r0, lsl r1
   11238:	ldr	r3, [pc, #28]	; 1125c <__assert_fail@plt+0x94>
   1123c:	ldr	r0, [pc, #28]	; 11260 <__assert_fail@plt+0x98>
   11240:	sub	r3, r3, r0
   11244:	cmp	r3, #6
   11248:	bxls	lr
   1124c:	ldr	r3, [pc, #16]	; 11264 <__assert_fail@plt+0x9c>
   11250:	cmp	r3, #0
   11254:	bxeq	lr
   11258:	bx	r3
   1125c:	andeq	r0, r3, fp, ror #2
   11260:	andeq	r0, r3, r8, ror #2
   11264:	andeq	r0, r0, r0
   11268:	ldr	r1, [pc, #36]	; 11294 <__assert_fail@plt+0xcc>
   1126c:	ldr	r0, [pc, #36]	; 11298 <__assert_fail@plt+0xd0>
   11270:	sub	r1, r1, r0
   11274:	asr	r1, r1, #2
   11278:	add	r1, r1, r1, lsr #31
   1127c:	asrs	r1, r1, #1
   11280:	bxeq	lr
   11284:	ldr	r3, [pc, #16]	; 1129c <__assert_fail@plt+0xd4>
   11288:	cmp	r3, #0
   1128c:	bxeq	lr
   11290:	bx	r3
   11294:	andeq	r0, r3, r8, ror #2
   11298:	andeq	r0, r3, r8, ror #2
   1129c:	andeq	r0, r0, r0
   112a0:	push	{r4, lr}
   112a4:	ldr	r4, [pc, #24]	; 112c4 <__assert_fail@plt+0xfc>
   112a8:	ldrb	r3, [r4]
   112ac:	cmp	r3, #0
   112b0:	popne	{r4, pc}
   112b4:	bl	11238 <__assert_fail@plt+0x70>
   112b8:	mov	r3, #1
   112bc:	strb	r3, [r4]
   112c0:	pop	{r4, pc}
   112c4:	andeq	r0, r3, r4, lsl #3
   112c8:	ldr	r0, [pc, #40]	; 112f8 <__assert_fail@plt+0x130>
   112cc:	ldr	r3, [r0]
   112d0:	cmp	r3, #0
   112d4:	bne	112dc <__assert_fail@plt+0x114>
   112d8:	b	11268 <__assert_fail@plt+0xa0>
   112dc:	ldr	r3, [pc, #24]	; 112fc <__assert_fail@plt+0x134>
   112e0:	cmp	r3, #0
   112e4:	beq	112d8 <__assert_fail@plt+0x110>
   112e8:	push	{r4, lr}
   112ec:	blx	r3
   112f0:	pop	{r4, lr}
   112f4:	b	11268 <__assert_fail@plt+0xa0>
   112f8:	andeq	pc, r2, r4, lsl pc	; <UNPREDICTABLE>
   112fc:	andeq	r0, r0, r0
   11300:	push	{fp, lr}
   11304:	add	fp, sp, #4
   11308:	sub	sp, sp, #80	; 0x50
   1130c:	str	r0, [fp, #-80]	; 0xffffffb0
   11310:	ldr	r3, [pc, #348]	; 11474 <__assert_fail@plt+0x2ac>
   11314:	sub	ip, fp, #72	; 0x48
   11318:	mov	lr, r3
   1131c:	ldm	lr!, {r0, r1, r2, r3}
   11320:	stmia	ip!, {r0, r1, r2, r3}
   11324:	ldm	lr!, {r0, r1, r2, r3}
   11328:	stmia	ip!, {r0, r1, r2, r3}
   1132c:	ldm	lr!, {r0, r1, r2, r3}
   11330:	stmia	ip!, {r0, r1, r2, r3}
   11334:	ldm	lr, {r0, r1}
   11338:	stm	ip, {r0, r1}
   1133c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11340:	str	r3, [fp, #-8]
   11344:	sub	r3, fp, #72	; 0x48
   11348:	str	r3, [fp, #-12]
   1134c:	b	1135c <__assert_fail@plt+0x194>
   11350:	ldr	r3, [fp, #-12]
   11354:	add	r3, r3, #8
   11358:	str	r3, [fp, #-12]
   1135c:	ldr	r3, [fp, #-12]
   11360:	ldr	r3, [r3]
   11364:	cmp	r3, #0
   11368:	beq	1138c <__assert_fail@plt+0x1c4>
   1136c:	ldr	r3, [fp, #-12]
   11370:	ldr	r3, [r3]
   11374:	mov	r1, r3
   11378:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1137c:	bl	10ef8 <strcmp@plt>
   11380:	mov	r3, r0
   11384:	cmp	r3, #0
   11388:	bne	11350 <__assert_fail@plt+0x188>
   1138c:	ldr	r3, [fp, #-12]
   11390:	ldr	r3, [r3, #4]
   11394:	cmp	r3, #0
   11398:	beq	113a8 <__assert_fail@plt+0x1e0>
   1139c:	ldr	r3, [fp, #-12]
   113a0:	ldr	r3, [r3, #4]
   113a4:	str	r3, [fp, #-8]
   113a8:	ldr	r0, [pc, #200]	; 11478 <__assert_fail@plt+0x2b0>
   113ac:	bl	11060 <gettext@plt>
   113b0:	mov	r3, r0
   113b4:	ldr	r2, [pc, #192]	; 1147c <__assert_fail@plt+0x2b4>
   113b8:	ldr	r1, [pc, #192]	; 11480 <__assert_fail@plt+0x2b8>
   113bc:	mov	r0, r3
   113c0:	bl	10f04 <printf@plt>
   113c4:	mov	r1, #0
   113c8:	mov	r0, #5
   113cc:	bl	110f0 <setlocale@plt>
   113d0:	str	r0, [fp, #-16]
   113d4:	ldr	r3, [fp, #-16]
   113d8:	cmp	r3, #0
   113dc:	beq	1141c <__assert_fail@plt+0x254>
   113e0:	mov	r2, #3
   113e4:	ldr	r1, [pc, #152]	; 11484 <__assert_fail@plt+0x2bc>
   113e8:	ldr	r0, [fp, #-16]
   113ec:	bl	1118c <strncmp@plt>
   113f0:	mov	r3, r0
   113f4:	cmp	r3, #0
   113f8:	beq	1141c <__assert_fail@plt+0x254>
   113fc:	ldr	r0, [pc, #132]	; 11488 <__assert_fail@plt+0x2c0>
   11400:	bl	11060 <gettext@plt>
   11404:	mov	r2, r0
   11408:	ldr	r3, [pc, #124]	; 1148c <__assert_fail@plt+0x2c4>
   1140c:	ldr	r3, [r3]
   11410:	mov	r1, r3
   11414:	mov	r0, r2
   11418:	bl	10ee0 <fputs_unlocked@plt>
   1141c:	ldr	r0, [pc, #108]	; 11490 <__assert_fail@plt+0x2c8>
   11420:	bl	11060 <gettext@plt>
   11424:	mov	r3, r0
   11428:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1142c:	ldr	r1, [pc, #72]	; 1147c <__assert_fail@plt+0x2b4>
   11430:	mov	r0, r3
   11434:	bl	10f04 <printf@plt>
   11438:	ldr	r0, [pc, #84]	; 11494 <__assert_fail@plt+0x2cc>
   1143c:	bl	11060 <gettext@plt>
   11440:	ldr	r2, [fp, #-8]
   11444:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11448:	cmp	r2, r3
   1144c:	bne	11458 <__assert_fail@plt+0x290>
   11450:	ldr	r3, [pc, #64]	; 11498 <__assert_fail@plt+0x2d0>
   11454:	b	1145c <__assert_fail@plt+0x294>
   11458:	ldr	r3, [pc, #60]	; 1149c <__assert_fail@plt+0x2d4>
   1145c:	mov	r2, r3
   11460:	ldr	r1, [fp, #-8]
   11464:	bl	10f04 <printf@plt>
   11468:	nop			; (mov r0, r0)
   1146c:	sub	sp, fp, #4
   11470:	pop	{fp, pc}
   11474:	strdeq	lr, [r1], -r8
   11478:	andeq	lr, r1, r4, lsl #11
   1147c:	muleq	r1, ip, r5
   11480:	andeq	lr, r1, r4, asr #11
   11484:	ldrdeq	lr, [r1], -r4
   11488:	ldrdeq	lr, [r1], -r8
   1148c:	andeq	r0, r3, ip, ror r1
   11490:	andeq	lr, r1, r0, lsr #12
   11494:	andeq	lr, r1, ip, lsr r6
   11498:	andeq	lr, r1, r0, ror r6
   1149c:	andeq	lr, r1, ip, ror r6
   114a0:	push	{r4, r5, fp, lr}
   114a4:	add	fp, sp, #12
   114a8:	sub	sp, sp, #120	; 0x78
   114ac:	str	r0, [fp, #-120]	; 0xffffff88
   114b0:	str	r1, [fp, #-124]	; 0xffffff84
   114b4:	str	r2, [fp, #-128]	; 0xffffff80
   114b8:	str	r3, [fp, #-132]	; 0xffffff7c
   114bc:	ldr	r3, [fp, #4]
   114c0:	and	r3, r3, #3584	; 0xe00
   114c4:	cmp	r3, #0
   114c8:	beq	1154c <__assert_fail@plt+0x384>
   114cc:	sub	r2, fp, #116	; 0x74
   114d0:	mov	r3, #0
   114d4:	ldr	r1, [fp, #-124]	; 0xffffff84
   114d8:	ldr	r0, [fp, #-120]	; 0xffffff88
   114dc:	bl	1e550 <__assert_fail@plt+0xd388>
   114e0:	mov	r3, r0
   114e4:	cmp	r3, #0
   114e8:	beq	11544 <__assert_fail@plt+0x37c>
   114ec:	ldr	r3, [pc, #136]	; 1157c <__assert_fail@plt+0x3b4>
   114f0:	ldrb	r3, [r3]
   114f4:	eor	r3, r3, #1
   114f8:	uxtb	r3, r3
   114fc:	cmp	r3, #0
   11500:	beq	1153c <__assert_fail@plt+0x374>
   11504:	bl	1109c <__errno_location@plt>
   11508:	mov	r3, r0
   1150c:	ldr	r4, [r3]
   11510:	ldr	r0, [pc, #104]	; 11580 <__assert_fail@plt+0x3b8>
   11514:	bl	11060 <gettext@plt>
   11518:	mov	r5, r0
   1151c:	ldr	r1, [fp, #-128]	; 0xffffff80
   11520:	mov	r0, #4
   11524:	bl	1abfc <__assert_fail@plt+0x9a34>
   11528:	mov	r3, r0
   1152c:	mov	r2, r5
   11530:	mov	r1, r4
   11534:	mov	r0, #0
   11538:	bl	10ff4 <error@plt>
   1153c:	mov	r3, #0
   11540:	b	11570 <__assert_fail@plt+0x3a8>
   11544:	ldr	r3, [fp, #-100]	; 0xffffff9c
   11548:	str	r3, [fp, #4]
   1154c:	ldr	r2, [fp, #-132]	; 0xffffff7c
   11550:	ldr	r3, [fp, #4]
   11554:	eor	r3, r3, r2
   11558:	lsl	r3, r3, #20
   1155c:	lsr	r3, r3, #20
   11560:	cmp	r3, #0
   11564:	movne	r3, #1
   11568:	moveq	r3, #0
   1156c:	uxtb	r3, r3
   11570:	mov	r0, r3
   11574:	sub	sp, fp, #12
   11578:	pop	{r4, r5, fp, pc}
   1157c:	muleq	r3, r1, r1
   11580:	andeq	lr, r1, ip, asr #16
   11584:	push	{fp, lr}
   11588:	add	fp, sp, #4
   1158c:	sub	sp, sp, #56	; 0x38
   11590:	str	r0, [fp, #-48]	; 0xffffffd0
   11594:	str	r1, [fp, #-52]	; 0xffffffcc
   11598:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1159c:	mov	r0, #4
   115a0:	bl	1abfc <__assert_fail@plt+0x9a34>
   115a4:	str	r0, [fp, #-12]
   115a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   115ac:	ldr	r3, [r3]
   115b0:	cmp	r3, #0
   115b4:	beq	1165c <__assert_fail@plt+0x494>
   115b8:	cmp	r3, #2
   115bc:	beq	11640 <__assert_fail@plt+0x478>
   115c0:	nop			; (mov r0, r0)
   115c4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   115c8:	ldr	r3, [r3, #4]
   115cc:	lsl	r3, r3, #20
   115d0:	lsr	r3, r3, #20
   115d4:	str	r3, [fp, #-16]
   115d8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   115dc:	ldr	r3, [r3, #8]
   115e0:	lsl	r3, r3, #20
   115e4:	lsr	r3, r3, #20
   115e8:	str	r3, [fp, #-20]	; 0xffffffec
   115ec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   115f0:	ldr	r3, [r3, #8]
   115f4:	sub	r2, fp, #32
   115f8:	mov	r1, r2
   115fc:	mov	r0, r3
   11600:	bl	12c10 <__assert_fail@plt+0x1a48>
   11604:	mov	r3, #0
   11608:	strb	r3, [fp, #-22]	; 0xffffffea
   1160c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11610:	ldr	r3, [r3, #4]
   11614:	sub	r2, fp, #44	; 0x2c
   11618:	mov	r1, r2
   1161c:	mov	r0, r3
   11620:	bl	12c10 <__assert_fail@plt+0x1a48>
   11624:	mov	r3, #0
   11628:	strb	r3, [fp, #-34]	; 0xffffffde
   1162c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11630:	ldr	r3, [r3]
   11634:	cmp	r3, #3
   11638:	beq	116ac <__assert_fail@plt+0x4e4>
   1163c:	b	11678 <__assert_fail@plt+0x4b0>
   11640:	ldr	r0, [pc, #200]	; 11710 <__assert_fail@plt+0x548>
   11644:	bl	11060 <gettext@plt>
   11648:	mov	r3, r0
   1164c:	ldr	r1, [fp, #-12]
   11650:	mov	r0, r3
   11654:	bl	10f04 <printf@plt>
   11658:	b	11708 <__assert_fail@plt+0x540>
   1165c:	ldr	r0, [pc, #176]	; 11714 <__assert_fail@plt+0x54c>
   11660:	bl	11060 <gettext@plt>
   11664:	mov	r3, r0
   11668:	ldr	r1, [fp, #-12]
   1166c:	mov	r0, r3
   11670:	bl	10f04 <printf@plt>
   11674:	b	11708 <__assert_fail@plt+0x540>
   11678:	cmp	r3, #4
   1167c:	beq	1168c <__assert_fail@plt+0x4c4>
   11680:	cmp	r3, #1
   11684:	beq	1169c <__assert_fail@plt+0x4d4>
   11688:	b	116d4 <__assert_fail@plt+0x50c>
   1168c:	ldr	r0, [pc, #132]	; 11718 <__assert_fail@plt+0x550>
   11690:	bl	11060 <gettext@plt>
   11694:	str	r0, [fp, #-8]
   11698:	b	116d8 <__assert_fail@plt+0x510>
   1169c:	ldr	r0, [pc, #120]	; 1171c <__assert_fail@plt+0x554>
   116a0:	bl	11060 <gettext@plt>
   116a4:	str	r0, [fp, #-8]
   116a8:	b	116d8 <__assert_fail@plt+0x510>
   116ac:	ldr	r0, [pc, #108]	; 11720 <__assert_fail@plt+0x558>
   116b0:	bl	11060 <gettext@plt>
   116b4:	str	r0, [fp, #-8]
   116b8:	sub	r3, fp, #32
   116bc:	add	r3, r3, #1
   116c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   116c4:	ldr	r1, [fp, #-12]
   116c8:	ldr	r0, [fp, #-8]
   116cc:	bl	10f04 <printf@plt>
   116d0:	b	11708 <__assert_fail@plt+0x540>
   116d4:	bl	11198 <abort@plt>
   116d8:	sub	r3, fp, #44	; 0x2c
   116dc:	add	r2, r3, #1
   116e0:	sub	r3, fp, #32
   116e4:	add	r3, r3, #1
   116e8:	str	r3, [sp, #4]
   116ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   116f0:	str	r3, [sp]
   116f4:	mov	r3, r2
   116f8:	ldr	r2, [fp, #-16]
   116fc:	ldr	r1, [fp, #-12]
   11700:	ldr	r0, [fp, #-8]
   11704:	bl	10f04 <printf@plt>
   11708:	sub	sp, fp, #4
   1170c:	pop	{fp, pc}
   11710:	andeq	lr, r1, ip, ror #16
   11714:	andeq	lr, r1, r4, lsr #17
   11718:	andeq	lr, r1, r0, asr #17
   1171c:	strdeq	lr, [r1], -r4
   11720:	andeq	lr, r1, r0, lsr r9
   11724:	push	{r4, r5, fp, lr}
   11728:	add	fp, sp, #12
   1172c:	sub	sp, sp, #72	; 0x48
   11730:	str	r0, [fp, #-72]	; 0xffffffb8
   11734:	str	r1, [fp, #-76]	; 0xffffffb4
   11738:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1173c:	ldr	r3, [r3, #28]
   11740:	str	r3, [fp, #-16]
   11744:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11748:	ldr	r3, [r3, #24]
   1174c:	str	r3, [fp, #-20]	; 0xffffffec
   11750:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11754:	add	r3, r3, #64	; 0x40
   11758:	str	r3, [fp, #-24]	; 0xffffffe8
   1175c:	sub	r3, fp, #44	; 0x2c
   11760:	mov	r2, #0
   11764:	str	r2, [r3]
   11768:	str	r2, [r3, #4]
   1176c:	str	r2, [r3, #8]
   11770:	mov	r3, #0
   11774:	str	r3, [fp, #-44]	; 0xffffffd4
   11778:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1177c:	ldrh	r3, [r3, #56]	; 0x38
   11780:	sub	r3, r3, #2
   11784:	cmp	r3, #11
   11788:	ldrls	pc, [pc, r3, lsl #2]
   1178c:	b	1198c <__assert_fail@plt+0x7c4>
   11790:	andeq	r1, r1, ip, lsr r9
   11794:	andeq	r1, r1, ip, lsl #19
   11798:	andeq	r1, r1, r4, lsr #17
   1179c:	andeq	r1, r1, ip, lsl #19
   117a0:	andeq	r1, r1, r0, asr #15
   117a4:	andeq	r1, r1, ip, asr r8
   117a8:	andeq	r1, r1, ip, lsl #19
   117ac:	andeq	r1, r1, ip, lsl #19
   117b0:	andeq	r1, r1, r8, asr #15
   117b4:	andeq	r1, r1, ip, lsl #19
   117b8:	andeq	r1, r1, ip, lsl #19
   117bc:	strdeq	r1, [r1], -r4
   117c0:	mov	r3, #1
   117c4:	b	11d98 <__assert_fail@plt+0xbd0>
   117c8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   117cc:	ldr	r3, [r3, #48]	; 0x30
   117d0:	cmp	r3, #0
   117d4:	bne	1180c <__assert_fail@plt+0x644>
   117d8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   117dc:	ldr	r3, [r3, #16]
   117e0:	cmp	r3, #0
   117e4:	bne	1180c <__assert_fail@plt+0x644>
   117e8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   117ec:	mov	r2, #1
   117f0:	str	r2, [r3, #16]
   117f4:	mov	r2, #1
   117f8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   117fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11800:	bl	147d0 <__assert_fail@plt+0x3608>
   11804:	mov	r3, #1
   11808:	b	11d98 <__assert_fail@plt+0xbd0>
   1180c:	ldr	r3, [pc, #1424]	; 11da4 <__assert_fail@plt+0xbdc>
   11810:	ldrb	r3, [r3]
   11814:	eor	r3, r3, #1
   11818:	uxtb	r3, r3
   1181c:	cmp	r3, #0
   11820:	beq	11998 <__assert_fail@plt+0x7d0>
   11824:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11828:	ldr	r4, [r3, #32]
   1182c:	ldr	r0, [pc, #1396]	; 11da8 <__assert_fail@plt+0xbe0>
   11830:	bl	11060 <gettext@plt>
   11834:	mov	r5, r0
   11838:	ldr	r1, [fp, #-16]
   1183c:	mov	r0, #4
   11840:	bl	1abfc <__assert_fail@plt+0x9a34>
   11844:	mov	r3, r0
   11848:	mov	r2, r5
   1184c:	mov	r1, r4
   11850:	mov	r0, #0
   11854:	bl	10ff4 <error@plt>
   11858:	b	11998 <__assert_fail@plt+0x7d0>
   1185c:	ldr	r3, [pc, #1344]	; 11da4 <__assert_fail@plt+0xbdc>
   11860:	ldrb	r3, [r3]
   11864:	eor	r3, r3, #1
   11868:	uxtb	r3, r3
   1186c:	cmp	r3, #0
   11870:	beq	119a0 <__assert_fail@plt+0x7d8>
   11874:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11878:	ldr	r4, [r3, #32]
   1187c:	ldr	r2, [fp, #-16]
   11880:	mov	r1, #3
   11884:	mov	r0, #0
   11888:	bl	1ad84 <__assert_fail@plt+0x9bbc>
   1188c:	mov	r3, r0
   11890:	ldr	r2, [pc, #1300]	; 11dac <__assert_fail@plt+0xbe4>
   11894:	mov	r1, r4
   11898:	mov	r0, #0
   1189c:	bl	10ff4 <error@plt>
   118a0:	b	119a0 <__assert_fail@plt+0x7d8>
   118a4:	ldr	r3, [pc, #1272]	; 11da4 <__assert_fail@plt+0xbdc>
   118a8:	ldrb	r3, [r3]
   118ac:	eor	r3, r3, #1
   118b0:	uxtb	r3, r3
   118b4:	cmp	r3, #0
   118b8:	beq	119a8 <__assert_fail@plt+0x7e0>
   118bc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   118c0:	ldr	r4, [r3, #32]
   118c4:	ldr	r0, [pc, #1252]	; 11db0 <__assert_fail@plt+0xbe8>
   118c8:	bl	11060 <gettext@plt>
   118cc:	mov	r5, r0
   118d0:	ldr	r1, [fp, #-16]
   118d4:	mov	r0, #4
   118d8:	bl	1abfc <__assert_fail@plt+0x9a34>
   118dc:	mov	r3, r0
   118e0:	mov	r2, r5
   118e4:	mov	r1, r4
   118e8:	mov	r0, #0
   118ec:	bl	10ff4 <error@plt>
   118f0:	b	119a8 <__assert_fail@plt+0x7e0>
   118f4:	ldr	r3, [pc, #1192]	; 11da4 <__assert_fail@plt+0xbdc>
   118f8:	ldrb	r3, [r3]
   118fc:	eor	r3, r3, #1
   11900:	uxtb	r3, r3
   11904:	cmp	r3, #0
   11908:	beq	119b0 <__assert_fail@plt+0x7e8>
   1190c:	ldr	r0, [pc, #1184]	; 11db4 <__assert_fail@plt+0xbec>
   11910:	bl	11060 <gettext@plt>
   11914:	mov	r4, r0
   11918:	ldr	r1, [fp, #-16]
   1191c:	mov	r0, #4
   11920:	bl	1abfc <__assert_fail@plt+0x9a34>
   11924:	mov	r3, r0
   11928:	mov	r2, r4
   1192c:	mov	r1, #0
   11930:	mov	r0, #0
   11934:	bl	10ff4 <error@plt>
   11938:	b	119b0 <__assert_fail@plt+0x7e8>
   1193c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   11940:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11944:	bl	1c4c0 <__assert_fail@plt+0xb2f8>
   11948:	mov	r3, r0
   1194c:	cmp	r3, #0
   11950:	beq	1198c <__assert_fail@plt+0x7c4>
   11954:	ldr	r0, [pc, #1116]	; 11db8 <__assert_fail@plt+0xbf0>
   11958:	bl	11060 <gettext@plt>
   1195c:	mov	r4, r0
   11960:	ldr	r2, [fp, #-16]
   11964:	mov	r1, #3
   11968:	mov	r0, #0
   1196c:	bl	1ad84 <__assert_fail@plt+0x9bbc>
   11970:	mov	r3, r0
   11974:	mov	r2, r4
   11978:	mov	r1, #0
   1197c:	mov	r0, #0
   11980:	bl	10ff4 <error@plt>
   11984:	mov	r3, #0
   11988:	b	11d98 <__assert_fail@plt+0xbd0>
   1198c:	mov	r3, #2
   11990:	str	r3, [fp, #-44]	; 0xffffffd4
   11994:	b	119b4 <__assert_fail@plt+0x7ec>
   11998:	nop			; (mov r0, r0)
   1199c:	b	119b4 <__assert_fail@plt+0x7ec>
   119a0:	nop			; (mov r0, r0)
   119a4:	b	119b4 <__assert_fail@plt+0x7ec>
   119a8:	nop			; (mov r0, r0)
   119ac:	b	119b4 <__assert_fail@plt+0x7ec>
   119b0:	nop			; (mov r0, r0)
   119b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   119b8:	cmp	r3, #2
   119bc:	bne	11ae4 <__assert_fail@plt+0x91c>
   119c0:	ldr	r3, [pc, #1012]	; 11dbc <__assert_fail@plt+0xbf4>
   119c4:	ldr	r3, [r3]
   119c8:	cmp	r3, #0
   119cc:	beq	11ae4 <__assert_fail@plt+0x91c>
   119d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   119d4:	ldrd	r0, [r3, #96]	; 0x60
   119d8:	ldr	r3, [pc, #988]	; 11dbc <__assert_fail@plt+0xbf4>
   119dc:	ldr	r3, [r3]
   119e0:	ldrd	r2, [r3]
   119e4:	cmp	r1, r3
   119e8:	cmpeq	r0, r2
   119ec:	bne	11ae4 <__assert_fail@plt+0x91c>
   119f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   119f4:	ldrd	r0, [r3]
   119f8:	ldr	r3, [pc, #956]	; 11dbc <__assert_fail@plt+0xbf4>
   119fc:	ldr	r3, [r3]
   11a00:	ldrd	r2, [r3, #8]
   11a04:	cmp	r1, r3
   11a08:	cmpeq	r0, r2
   11a0c:	bne	11ae4 <__assert_fail@plt+0x91c>
   11a10:	ldr	r1, [pc, #936]	; 11dc0 <__assert_fail@plt+0xbf8>
   11a14:	ldr	r0, [fp, #-16]
   11a18:	bl	10ef8 <strcmp@plt>
   11a1c:	mov	r3, r0
   11a20:	cmp	r3, #0
   11a24:	bne	11a58 <__assert_fail@plt+0x890>
   11a28:	ldr	r0, [pc, #916]	; 11dc4 <__assert_fail@plt+0xbfc>
   11a2c:	bl	11060 <gettext@plt>
   11a30:	mov	r4, r0
   11a34:	ldr	r1, [fp, #-16]
   11a38:	mov	r0, #4
   11a3c:	bl	1abfc <__assert_fail@plt+0x9a34>
   11a40:	mov	r3, r0
   11a44:	mov	r2, r4
   11a48:	mov	r1, #0
   11a4c:	mov	r0, #0
   11a50:	bl	10ff4 <error@plt>
   11a54:	b	11aa4 <__assert_fail@plt+0x8dc>
   11a58:	ldr	r0, [pc, #872]	; 11dc8 <__assert_fail@plt+0xc00>
   11a5c:	bl	11060 <gettext@plt>
   11a60:	mov	r4, r0
   11a64:	ldr	r2, [fp, #-16]
   11a68:	mov	r1, #4
   11a6c:	mov	r0, #0
   11a70:	bl	1ab60 <__assert_fail@plt+0x9998>
   11a74:	mov	r5, r0
   11a78:	ldr	r2, [pc, #832]	; 11dc0 <__assert_fail@plt+0xbf8>
   11a7c:	mov	r1, #4
   11a80:	mov	r0, #1
   11a84:	bl	1ab60 <__assert_fail@plt+0x9998>
   11a88:	mov	r3, r0
   11a8c:	str	r3, [sp]
   11a90:	mov	r3, r5
   11a94:	mov	r2, r4
   11a98:	mov	r1, #0
   11a9c:	mov	r0, #0
   11aa0:	bl	10ff4 <error@plt>
   11aa4:	ldr	r0, [pc, #800]	; 11dcc <__assert_fail@plt+0xc04>
   11aa8:	bl	11060 <gettext@plt>
   11aac:	mov	r3, r0
   11ab0:	mov	r2, r3
   11ab4:	mov	r1, #0
   11ab8:	mov	r0, #0
   11abc:	bl	10ff4 <error@plt>
   11ac0:	mov	r2, #4
   11ac4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   11ac8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11acc:	bl	147d0 <__assert_fail@plt+0x3608>
   11ad0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11ad4:	bl	1405c <__assert_fail@plt+0x2e94>
   11ad8:	str	r0, [fp, #-28]	; 0xffffffe4
   11adc:	mov	r3, #0
   11ae0:	b	11d98 <__assert_fail@plt+0xbd0>
   11ae4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11ae8:	cmp	r3, #2
   11aec:	bne	11bdc <__assert_fail@plt+0xa14>
   11af0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11af4:	ldr	r3, [r3, #16]
   11af8:	and	r3, r3, #61440	; 0xf000
   11afc:	cmp	r3, #40960	; 0xa000
   11b00:	beq	11bdc <__assert_fail@plt+0xa14>
   11b04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b08:	ldr	r3, [r3, #16]
   11b0c:	str	r3, [fp, #-40]	; 0xffffffd8
   11b10:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11b14:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11b18:	and	r3, r3, #61440	; 0xf000
   11b1c:	cmp	r3, #16384	; 0x4000
   11b20:	moveq	r3, #1
   11b24:	movne	r3, #0
   11b28:	uxtb	r1, r3
   11b2c:	ldr	r3, [pc, #668]	; 11dd0 <__assert_fail@plt+0xc08>
   11b30:	ldr	r2, [r3]
   11b34:	ldr	r3, [pc, #664]	; 11dd4 <__assert_fail@plt+0xc0c>
   11b38:	ldr	ip, [r3]
   11b3c:	mov	r3, #0
   11b40:	str	r3, [sp]
   11b44:	mov	r3, ip
   11b48:	bl	184f8 <__assert_fail@plt+0x7330>
   11b4c:	mov	r3, r0
   11b50:	str	r3, [fp, #-36]	; 0xffffffdc
   11b54:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11b58:	ldr	r3, [r3, #32]
   11b5c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11b60:	ldr	r1, [fp, #-20]	; 0xffffffec
   11b64:	mov	r0, r3
   11b68:	bl	12778 <__assert_fail@plt+0x15b0>
   11b6c:	mov	r3, r0
   11b70:	cmp	r3, #0
   11b74:	bne	11b84 <__assert_fail@plt+0x9bc>
   11b78:	mov	r3, #4
   11b7c:	str	r3, [fp, #-44]	; 0xffffffd4
   11b80:	b	11bdc <__assert_fail@plt+0xa14>
   11b84:	ldr	r3, [pc, #536]	; 11da4 <__assert_fail@plt+0xbdc>
   11b88:	ldrb	r3, [r3]
   11b8c:	eor	r3, r3, #1
   11b90:	uxtb	r3, r3
   11b94:	cmp	r3, #0
   11b98:	beq	11bd4 <__assert_fail@plt+0xa0c>
   11b9c:	bl	1109c <__errno_location@plt>
   11ba0:	mov	r3, r0
   11ba4:	ldr	r4, [r3]
   11ba8:	ldr	r0, [pc, #552]	; 11dd8 <__assert_fail@plt+0xc10>
   11bac:	bl	11060 <gettext@plt>
   11bb0:	mov	r5, r0
   11bb4:	ldr	r1, [fp, #-16]
   11bb8:	mov	r0, #4
   11bbc:	bl	1abfc <__assert_fail@plt+0x9a34>
   11bc0:	mov	r3, r0
   11bc4:	mov	r2, r5
   11bc8:	mov	r1, r4
   11bcc:	mov	r0, #0
   11bd0:	bl	10ff4 <error@plt>
   11bd4:	mov	r3, #1
   11bd8:	str	r3, [fp, #-44]	; 0xffffffd4
   11bdc:	ldr	r3, [pc, #504]	; 11ddc <__assert_fail@plt+0xc14>
   11be0:	ldr	r3, [r3]
   11be4:	cmp	r3, #2
   11be8:	beq	11c64 <__assert_fail@plt+0xa9c>
   11bec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11bf0:	cmp	r3, #4
   11bf4:	bne	11c38 <__assert_fail@plt+0xa70>
   11bf8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11bfc:	ldr	r0, [r3, #32]
   11c00:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11c04:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11c08:	str	r3, [sp]
   11c0c:	mov	r3, r2
   11c10:	ldr	r2, [fp, #-16]
   11c14:	ldr	r1, [fp, #-20]	; 0xffffffec
   11c18:	bl	114a0 <__assert_fail@plt+0x2d8>
   11c1c:	mov	r3, r0
   11c20:	eor	r3, r3, #1
   11c24:	uxtb	r3, r3
   11c28:	cmp	r3, #0
   11c2c:	beq	11c38 <__assert_fail@plt+0xa70>
   11c30:	mov	r3, #3
   11c34:	str	r3, [fp, #-44]	; 0xffffffd4
   11c38:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11c3c:	cmp	r3, #4
   11c40:	beq	11c54 <__assert_fail@plt+0xa8c>
   11c44:	ldr	r3, [pc, #400]	; 11ddc <__assert_fail@plt+0xc14>
   11c48:	ldr	r3, [r3]
   11c4c:	cmp	r3, #0
   11c50:	bne	11c64 <__assert_fail@plt+0xa9c>
   11c54:	sub	r3, fp, #44	; 0x2c
   11c58:	mov	r1, r3
   11c5c:	ldr	r0, [fp, #-16]
   11c60:	bl	11584 <__assert_fail@plt+0x3bc>
   11c64:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11c68:	cmp	r3, #2
   11c6c:	bls	11d5c <__assert_fail@plt+0xb94>
   11c70:	ldr	r3, [pc, #360]	; 11de0 <__assert_fail@plt+0xc18>
   11c74:	ldrb	r3, [r3]
   11c78:	cmp	r3, #0
   11c7c:	beq	11d5c <__assert_fail@plt+0xb94>
   11c80:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c84:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11c88:	and	r3, r3, #61440	; 0xf000
   11c8c:	cmp	r3, #16384	; 0x4000
   11c90:	moveq	r3, #1
   11c94:	movne	r3, #0
   11c98:	uxtb	r1, r3
   11c9c:	ldr	r3, [pc, #304]	; 11dd4 <__assert_fail@plt+0xc0c>
   11ca0:	ldr	r2, [r3]
   11ca4:	mov	r3, #0
   11ca8:	str	r3, [sp]
   11cac:	mov	r3, r2
   11cb0:	mov	r2, #0
   11cb4:	bl	184f8 <__assert_fail@plt+0x7330>
   11cb8:	str	r0, [fp, #-32]	; 0xffffffe0
   11cbc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11cc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11cc4:	mvn	r3, r3
   11cc8:	and	r3, r3, r2
   11ccc:	cmp	r3, #0
   11cd0:	beq	11d5c <__assert_fail@plt+0xb94>
   11cd4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11cd8:	sub	r2, fp, #56	; 0x38
   11cdc:	mov	r1, r2
   11ce0:	mov	r0, r3
   11ce4:	bl	12c10 <__assert_fail@plt+0x1a48>
   11ce8:	sub	r3, fp, #68	; 0x44
   11cec:	mov	r1, r3
   11cf0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11cf4:	bl	12c10 <__assert_fail@plt+0x1a48>
   11cf8:	mov	r3, #0
   11cfc:	strb	r3, [fp, #-58]	; 0xffffffc6
   11d00:	ldrb	r3, [fp, #-58]	; 0xffffffc6
   11d04:	strb	r3, [fp, #-46]	; 0xffffffd2
   11d08:	ldr	r0, [pc, #212]	; 11de4 <__assert_fail@plt+0xc1c>
   11d0c:	bl	11060 <gettext@plt>
   11d10:	mov	r4, r0
   11d14:	ldr	r2, [fp, #-16]
   11d18:	mov	r1, #3
   11d1c:	mov	r0, #0
   11d20:	bl	1ad84 <__assert_fail@plt+0x9bbc>
   11d24:	mov	r1, r0
   11d28:	sub	r3, fp, #56	; 0x38
   11d2c:	add	r3, r3, #1
   11d30:	sub	r2, fp, #68	; 0x44
   11d34:	add	r2, r2, #1
   11d38:	str	r2, [sp, #4]
   11d3c:	str	r3, [sp]
   11d40:	mov	r3, r1
   11d44:	mov	r2, r4
   11d48:	mov	r1, #0
   11d4c:	mov	r0, #0
   11d50:	bl	10ff4 <error@plt>
   11d54:	mov	r3, #1
   11d58:	str	r3, [fp, #-44]	; 0xffffffd4
   11d5c:	ldr	r3, [pc, #132]	; 11de8 <__assert_fail@plt+0xc20>
   11d60:	ldrb	r3, [r3]
   11d64:	eor	r3, r3, #1
   11d68:	uxtb	r3, r3
   11d6c:	cmp	r3, #0
   11d70:	beq	11d84 <__assert_fail@plt+0xbbc>
   11d74:	mov	r2, #4
   11d78:	ldr	r1, [fp, #-76]	; 0xffffffb4
   11d7c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11d80:	bl	147d0 <__assert_fail@plt+0x3608>
   11d84:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11d88:	cmp	r3, #1
   11d8c:	movhi	r3, #1
   11d90:	movls	r3, #0
   11d94:	uxtb	r3, r3
   11d98:	mov	r0, r3
   11d9c:	sub	sp, fp, #12
   11da0:	pop	{r4, r5, fp, pc}
   11da4:	muleq	r3, r1, r1
   11da8:	andeq	lr, r1, r4, asr r9
   11dac:	andeq	lr, r1, r8, ror #18
   11db0:	andeq	lr, r1, ip, ror #18
   11db4:	andeq	lr, r1, r8, lsl #19
   11db8:			; <UNDEFINED> instruction: 0x0001e9b0
   11dbc:	muleq	r3, r4, r1
   11dc0:	andeq	lr, r1, ip, ror #20
   11dc4:	andeq	lr, r1, r0, ror sl
   11dc8:	andeq	lr, r1, r0, lsr #21
   11dcc:	ldrdeq	lr, [r1], -ip
   11dd0:	andeq	r0, r3, ip, lsl #3
   11dd4:	andeq	r0, r3, r8, lsl #3
   11dd8:	andeq	lr, r1, r0, lsl fp
   11ddc:	andeq	r0, r3, ip, lsl r1
   11de0:	muleq	r3, r2, r1
   11de4:	andeq	lr, r1, ip, lsr #22
   11de8:	muleq	r3, r0, r1
   11dec:	push	{r4, fp, lr}
   11df0:	add	fp, sp, #8
   11df4:	sub	sp, sp, #28
   11df8:	str	r0, [fp, #-32]	; 0xffffffe0
   11dfc:	str	r1, [fp, #-36]	; 0xffffffdc
   11e00:	mov	r3, #1
   11e04:	strb	r3, [fp, #-13]
   11e08:	mov	r2, #0
   11e0c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11e10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11e14:	bl	1c438 <__assert_fail@plt+0xb270>
   11e18:	mov	r3, r0
   11e1c:	str	r3, [fp, #-20]	; 0xffffffec
   11e20:	ldr	r0, [fp, #-20]	; 0xffffffec
   11e24:	bl	1405c <__assert_fail@plt+0x2e94>
   11e28:	str	r0, [fp, #-24]	; 0xffffffe8
   11e2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e30:	cmp	r3, #0
   11e34:	bne	11e98 <__assert_fail@plt+0xcd0>
   11e38:	bl	1109c <__errno_location@plt>
   11e3c:	mov	r3, r0
   11e40:	ldr	r3, [r3]
   11e44:	cmp	r3, #0
   11e48:	beq	11ec8 <__assert_fail@plt+0xd00>
   11e4c:	ldr	r3, [pc, #204]	; 11f20 <__assert_fail@plt+0xd58>
   11e50:	ldrb	r3, [r3]
   11e54:	eor	r3, r3, #1
   11e58:	uxtb	r3, r3
   11e5c:	cmp	r3, #0
   11e60:	beq	11e8c <__assert_fail@plt+0xcc4>
   11e64:	bl	1109c <__errno_location@plt>
   11e68:	mov	r3, r0
   11e6c:	ldr	r4, [r3]
   11e70:	ldr	r0, [pc, #172]	; 11f24 <__assert_fail@plt+0xd5c>
   11e74:	bl	11060 <gettext@plt>
   11e78:	mov	r3, r0
   11e7c:	mov	r2, r3
   11e80:	mov	r1, r4
   11e84:	mov	r0, #0
   11e88:	bl	10ff4 <error@plt>
   11e8c:	mov	r3, #0
   11e90:	strb	r3, [fp, #-13]
   11e94:	b	11ec8 <__assert_fail@plt+0xd00>
   11e98:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11e9c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11ea0:	bl	11724 <__assert_fail@plt+0x55c>
   11ea4:	mov	r3, r0
   11ea8:	mov	r2, r3
   11eac:	ldrb	r3, [fp, #-13]
   11eb0:	and	r3, r3, r2
   11eb4:	cmp	r3, #0
   11eb8:	movne	r3, #1
   11ebc:	moveq	r3, #0
   11ec0:	strb	r3, [fp, #-13]
   11ec4:	b	11e20 <__assert_fail@plt+0xc58>
   11ec8:	nop			; (mov r0, r0)
   11ecc:	ldr	r0, [fp, #-20]	; 0xffffffec
   11ed0:	bl	13b30 <__assert_fail@plt+0x2968>
   11ed4:	mov	r3, r0
   11ed8:	cmp	r3, #0
   11edc:	beq	11f10 <__assert_fail@plt+0xd48>
   11ee0:	bl	1109c <__errno_location@plt>
   11ee4:	mov	r3, r0
   11ee8:	ldr	r4, [r3]
   11eec:	ldr	r0, [pc, #52]	; 11f28 <__assert_fail@plt+0xd60>
   11ef0:	bl	11060 <gettext@plt>
   11ef4:	mov	r3, r0
   11ef8:	mov	r2, r3
   11efc:	mov	r1, r4
   11f00:	mov	r0, #0
   11f04:	bl	10ff4 <error@plt>
   11f08:	mov	r3, #0
   11f0c:	strb	r3, [fp, #-13]
   11f10:	ldrb	r3, [fp, #-13]
   11f14:	mov	r0, r3
   11f18:	sub	sp, fp, #8
   11f1c:	pop	{r4, fp, pc}
   11f20:	muleq	r3, r1, r1
   11f24:	andeq	lr, r1, r0, asr fp
   11f28:	andeq	lr, r1, r0, ror #22
   11f2c:	push	{r4, fp, lr}
   11f30:	add	fp, sp, #8
   11f34:	sub	sp, sp, #12
   11f38:	str	r0, [fp, #-16]
   11f3c:	ldr	r3, [fp, #-16]
   11f40:	cmp	r3, #0
   11f44:	beq	11f74 <__assert_fail@plt+0xdac>
   11f48:	ldr	r3, [pc, #344]	; 120a8 <__assert_fail@plt+0xee0>
   11f4c:	ldr	r4, [r3]
   11f50:	ldr	r0, [pc, #340]	; 120ac <__assert_fail@plt+0xee4>
   11f54:	bl	11060 <gettext@plt>
   11f58:	mov	r1, r0
   11f5c:	ldr	r3, [pc, #332]	; 120b0 <__assert_fail@plt+0xee8>
   11f60:	ldr	r3, [r3]
   11f64:	mov	r2, r3
   11f68:	mov	r0, r4
   11f6c:	bl	11084 <fprintf@plt>
   11f70:	b	120a0 <__assert_fail@plt+0xed8>
   11f74:	ldr	r0, [pc, #312]	; 120b4 <__assert_fail@plt+0xeec>
   11f78:	bl	11060 <gettext@plt>
   11f7c:	ldr	r3, [pc, #300]	; 120b0 <__assert_fail@plt+0xee8>
   11f80:	ldr	r1, [r3]
   11f84:	ldr	r3, [pc, #292]	; 120b0 <__assert_fail@plt+0xee8>
   11f88:	ldr	r2, [r3]
   11f8c:	ldr	r3, [pc, #284]	; 120b0 <__assert_fail@plt+0xee8>
   11f90:	ldr	r3, [r3]
   11f94:	bl	10f04 <printf@plt>
   11f98:	ldr	r0, [pc, #280]	; 120b8 <__assert_fail@plt+0xef0>
   11f9c:	bl	11060 <gettext@plt>
   11fa0:	mov	r2, r0
   11fa4:	ldr	r3, [pc, #272]	; 120bc <__assert_fail@plt+0xef4>
   11fa8:	ldr	r3, [r3]
   11fac:	mov	r1, r3
   11fb0:	mov	r0, r2
   11fb4:	bl	10ee0 <fputs_unlocked@plt>
   11fb8:	ldr	r0, [pc, #256]	; 120c0 <__assert_fail@plt+0xef8>
   11fbc:	bl	11060 <gettext@plt>
   11fc0:	mov	r2, r0
   11fc4:	ldr	r3, [pc, #240]	; 120bc <__assert_fail@plt+0xef4>
   11fc8:	ldr	r3, [r3]
   11fcc:	mov	r1, r3
   11fd0:	mov	r0, r2
   11fd4:	bl	10ee0 <fputs_unlocked@plt>
   11fd8:	ldr	r0, [pc, #228]	; 120c4 <__assert_fail@plt+0xefc>
   11fdc:	bl	11060 <gettext@plt>
   11fe0:	mov	r2, r0
   11fe4:	ldr	r3, [pc, #208]	; 120bc <__assert_fail@plt+0xef4>
   11fe8:	ldr	r3, [r3]
   11fec:	mov	r1, r3
   11ff0:	mov	r0, r2
   11ff4:	bl	10ee0 <fputs_unlocked@plt>
   11ff8:	ldr	r0, [pc, #200]	; 120c8 <__assert_fail@plt+0xf00>
   11ffc:	bl	11060 <gettext@plt>
   12000:	mov	r2, r0
   12004:	ldr	r3, [pc, #176]	; 120bc <__assert_fail@plt+0xef4>
   12008:	ldr	r3, [r3]
   1200c:	mov	r1, r3
   12010:	mov	r0, r2
   12014:	bl	10ee0 <fputs_unlocked@plt>
   12018:	ldr	r0, [pc, #172]	; 120cc <__assert_fail@plt+0xf04>
   1201c:	bl	11060 <gettext@plt>
   12020:	mov	r2, r0
   12024:	ldr	r3, [pc, #144]	; 120bc <__assert_fail@plt+0xef4>
   12028:	ldr	r3, [r3]
   1202c:	mov	r1, r3
   12030:	mov	r0, r2
   12034:	bl	10ee0 <fputs_unlocked@plt>
   12038:	ldr	r0, [pc, #144]	; 120d0 <__assert_fail@plt+0xf08>
   1203c:	bl	11060 <gettext@plt>
   12040:	mov	r2, r0
   12044:	ldr	r3, [pc, #112]	; 120bc <__assert_fail@plt+0xef4>
   12048:	ldr	r3, [r3]
   1204c:	mov	r1, r3
   12050:	mov	r0, r2
   12054:	bl	10ee0 <fputs_unlocked@plt>
   12058:	ldr	r0, [pc, #116]	; 120d4 <__assert_fail@plt+0xf0c>
   1205c:	bl	11060 <gettext@plt>
   12060:	mov	r2, r0
   12064:	ldr	r3, [pc, #80]	; 120bc <__assert_fail@plt+0xef4>
   12068:	ldr	r3, [r3]
   1206c:	mov	r1, r3
   12070:	mov	r0, r2
   12074:	bl	10ee0 <fputs_unlocked@plt>
   12078:	ldr	r0, [pc, #88]	; 120d8 <__assert_fail@plt+0xf10>
   1207c:	bl	11060 <gettext@plt>
   12080:	mov	r2, r0
   12084:	ldr	r3, [pc, #48]	; 120bc <__assert_fail@plt+0xef4>
   12088:	ldr	r3, [r3]
   1208c:	mov	r1, r3
   12090:	mov	r0, r2
   12094:	bl	10ee0 <fputs_unlocked@plt>
   12098:	ldr	r0, [pc, #60]	; 120dc <__assert_fail@plt+0xf14>
   1209c:	bl	11300 <__assert_fail@plt+0x138>
   120a0:	ldr	r0, [fp, #-16]
   120a4:	bl	11054 <exit@plt>
   120a8:	andeq	r0, r3, r8, ror r1
   120ac:	andeq	lr, r1, r4, ror fp
   120b0:			; <UNDEFINED> instruction: 0x000301b0
   120b4:	muleq	r1, ip, fp
   120b8:	andeq	lr, r1, r4, lsr #24
   120bc:	andeq	r0, r3, ip, ror r1
   120c0:	muleq	r1, r0, ip
   120c4:	andeq	lr, r1, ip, asr sp
   120c8:	ldrdeq	lr, [r1], -ip
   120cc:	andeq	lr, r1, r0, lsr #28
   120d0:	andeq	lr, r1, r4, ror #28
   120d4:	muleq	r1, r4, lr
   120d8:	andeq	lr, r1, ip, asr #29
   120dc:	andeq	lr, r1, r8, lsl pc
   120e0:	push	{r4, r5, fp, lr}
   120e4:	add	fp, sp, #12
   120e8:	sub	sp, sp, #72	; 0x48
   120ec:	str	r0, [fp, #-64]	; 0xffffffc0
   120f0:	str	r1, [fp, #-68]	; 0xffffffbc
   120f4:	mov	r3, #0
   120f8:	str	r3, [fp, #-16]
   120fc:	mov	r3, #0
   12100:	str	r3, [fp, #-20]	; 0xffffffec
   12104:	mov	r3, #0
   12108:	str	r3, [fp, #-56]	; 0xffffffc8
   1210c:	mov	r3, #0
   12110:	strb	r3, [fp, #-21]	; 0xffffffeb
   12114:	mov	r3, #0
   12118:	str	r3, [fp, #-28]	; 0xffffffe4
   1211c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12120:	ldr	r3, [r3]
   12124:	mov	r0, r3
   12128:	bl	188c4 <__assert_fail@plt+0x76fc>
   1212c:	ldr	r1, [pc, #1480]	; 126fc <__assert_fail@plt+0x1534>
   12130:	mov	r0, #6
   12134:	bl	110f0 <setlocale@plt>
   12138:	ldr	r1, [pc, #1472]	; 12700 <__assert_fail@plt+0x1538>
   1213c:	ldr	r0, [pc, #1472]	; 12704 <__assert_fail@plt+0x153c>
   12140:	bl	1115c <bindtextdomain@plt>
   12144:	ldr	r0, [pc, #1464]	; 12704 <__assert_fail@plt+0x153c>
   12148:	bl	10f7c <textdomain@plt>
   1214c:	ldr	r0, [pc, #1460]	; 12708 <__assert_fail@plt+0x1540>
   12150:	bl	1e508 <__assert_fail@plt+0xd340>
   12154:	ldr	r3, [pc, #1456]	; 1270c <__assert_fail@plt+0x1544>
   12158:	mov	r2, #0
   1215c:	strb	r2, [r3]
   12160:	ldr	r3, [pc, #1444]	; 1270c <__assert_fail@plt+0x1544>
   12164:	ldrb	r2, [r3]
   12168:	ldr	r3, [pc, #1440]	; 12710 <__assert_fail@plt+0x1548>
   1216c:	strb	r2, [r3]
   12170:	ldr	r3, [pc, #1432]	; 12710 <__assert_fail@plt+0x1548>
   12174:	ldrb	r2, [r3]
   12178:	ldr	r3, [pc, #1428]	; 12714 <__assert_fail@plt+0x154c>
   1217c:	strb	r2, [r3]
   12180:	b	12410 <__assert_fail@plt+0x1248>
   12184:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12188:	cmp	r3, #99	; 0x63
   1218c:	beq	12390 <__assert_fail@plt+0x11c8>
   12190:	cmp	r3, #99	; 0x63
   12194:	bgt	12204 <__assert_fail@plt+0x103c>
   12198:	cmp	r3, #55	; 0x37
   1219c:	bgt	121d4 <__assert_fail@plt+0x100c>
   121a0:	cmp	r3, #48	; 0x30
   121a4:	bge	1227c <__assert_fail@plt+0x10b4>
   121a8:	cmn	r3, #2
   121ac:	beq	123c0 <__assert_fail@plt+0x11f8>
   121b0:	cmn	r3, #2
   121b4:	bgt	121c4 <__assert_fail@plt+0xffc>
   121b8:	cmn	r3, #3
   121bc:	beq	123c8 <__assert_fail@plt+0x1200>
   121c0:	b	12408 <__assert_fail@plt+0x1240>
   121c4:	sub	r3, r3, #43	; 0x2b
   121c8:	cmp	r3, #1
   121cc:	bhi	12408 <__assert_fail@plt+0x1240>
   121d0:	b	1227c <__assert_fail@plt+0x10b4>
   121d4:	cmp	r3, #82	; 0x52
   121d8:	beq	12380 <__assert_fail@plt+0x11b8>
   121dc:	cmp	r3, #82	; 0x52
   121e0:	bgt	121f0 <__assert_fail@plt+0x1028>
   121e4:	cmp	r3, #61	; 0x3d
   121e8:	beq	1227c <__assert_fail@plt+0x10b4>
   121ec:	b	12408 <__assert_fail@plt+0x1240>
   121f0:	cmp	r3, #88	; 0x58
   121f4:	beq	1227c <__assert_fail@plt+0x10b4>
   121f8:	cmp	r3, #97	; 0x61
   121fc:	beq	1227c <__assert_fail@plt+0x10b4>
   12200:	b	12408 <__assert_fail@plt+0x1240>
   12204:	cmp	r3, #118	; 0x76
   12208:	beq	123b0 <__assert_fail@plt+0x11e8>
   1220c:	cmp	r3, #118	; 0x76
   12210:	bgt	12244 <__assert_fail@plt+0x107c>
   12214:	cmp	r3, #111	; 0x6f
   12218:	beq	1227c <__assert_fail@plt+0x10b4>
   1221c:	cmp	r3, #111	; 0x6f
   12220:	bgt	12238 <__assert_fail@plt+0x1070>
   12224:	cmp	r3, #102	; 0x66
   12228:	beq	123a0 <__assert_fail@plt+0x11d8>
   1222c:	cmp	r3, #103	; 0x67
   12230:	beq	1227c <__assert_fail@plt+0x10b4>
   12234:	b	12408 <__assert_fail@plt+0x1240>
   12238:	cmp	r3, #114	; 0x72
   1223c:	blt	12408 <__assert_fail@plt+0x1240>
   12240:	b	1227c <__assert_fail@plt+0x10b4>
   12244:	cmp	r3, #256	; 0x100
   12248:	beq	12358 <__assert_fail@plt+0x1190>
   1224c:	cmp	r3, #256	; 0x100
   12250:	bgt	12260 <__assert_fail@plt+0x1098>
   12254:	cmp	r3, #120	; 0x78
   12258:	bgt	12408 <__assert_fail@plt+0x1240>
   1225c:	b	1227c <__assert_fail@plt+0x10b4>
   12260:	ldr	r2, [pc, #1200]	; 12718 <__assert_fail@plt+0x1550>
   12264:	cmp	r3, r2
   12268:	beq	12364 <__assert_fail@plt+0x119c>
   1226c:	ldr	r2, [pc, #1192]	; 1271c <__assert_fail@plt+0x1554>
   12270:	cmp	r3, r2
   12274:	beq	12370 <__assert_fail@plt+0x11a8>
   12278:	b	12408 <__assert_fail@plt+0x1240>
   1227c:	ldr	r3, [pc, #1180]	; 12720 <__assert_fail@plt+0x1558>
   12280:	ldr	r3, [r3]
   12284:	sub	r3, r3, #-1073741823	; 0xc0000001
   12288:	lsl	r3, r3, #2
   1228c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12290:	add	r3, r2, r3
   12294:	ldr	r3, [r3]
   12298:	str	r3, [fp, #-36]	; 0xffffffdc
   1229c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   122a0:	bl	1106c <strlen@plt>
   122a4:	str	r0, [fp, #-40]	; 0xffffffd8
   122a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   122ac:	cmp	r3, #0
   122b0:	movne	r3, #1
   122b4:	moveq	r3, #0
   122b8:	uxtb	r3, r3
   122bc:	mov	r2, r3
   122c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   122c4:	add	r3, r2, r3
   122c8:	str	r3, [fp, #-44]	; 0xffffffd4
   122cc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   122d0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   122d4:	add	r3, r2, r3
   122d8:	str	r3, [fp, #-48]	; 0xffffffd0
   122dc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   122e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   122e4:	cmp	r2, r3
   122e8:	bhi	1230c <__assert_fail@plt+0x1144>
   122ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   122f0:	add	r3, r3, #1
   122f4:	str	r3, [fp, #-56]	; 0xffffffc8
   122f8:	sub	r3, fp, #56	; 0x38
   122fc:	mov	r1, r3
   12300:	ldr	r0, [fp, #-16]
   12304:	bl	1bb24 <__assert_fail@plt+0xa95c>
   12308:	str	r0, [fp, #-16]
   1230c:	ldr	r2, [fp, #-16]
   12310:	ldr	r3, [fp, #-20]	; 0xffffffec
   12314:	add	r3, r2, r3
   12318:	mov	r2, #44	; 0x2c
   1231c:	strb	r2, [r3]
   12320:	ldr	r2, [fp, #-16]
   12324:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12328:	add	r0, r2, r3
   1232c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12330:	add	r3, r3, #1
   12334:	mov	r2, r3
   12338:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1233c:	bl	10f40 <memcpy@plt>
   12340:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12344:	str	r3, [fp, #-20]	; 0xffffffec
   12348:	ldr	r3, [pc, #956]	; 1270c <__assert_fail@plt+0x1544>
   1234c:	mov	r2, #1
   12350:	strb	r2, [r3]
   12354:	b	12410 <__assert_fail@plt+0x1248>
   12358:	mov	r3, #0
   1235c:	strb	r3, [fp, #-21]	; 0xffffffeb
   12360:	b	12410 <__assert_fail@plt+0x1248>
   12364:	mov	r3, #1
   12368:	strb	r3, [fp, #-21]	; 0xffffffeb
   1236c:	b	12410 <__assert_fail@plt+0x1248>
   12370:	ldr	r3, [pc, #940]	; 12724 <__assert_fail@plt+0x155c>
   12374:	ldr	r3, [r3]
   12378:	str	r3, [fp, #-28]	; 0xffffffe4
   1237c:	b	12410 <__assert_fail@plt+0x1248>
   12380:	ldr	r3, [pc, #908]	; 12714 <__assert_fail@plt+0x154c>
   12384:	mov	r2, #1
   12388:	strb	r2, [r3]
   1238c:	b	12410 <__assert_fail@plt+0x1248>
   12390:	ldr	r3, [pc, #912]	; 12728 <__assert_fail@plt+0x1560>
   12394:	mov	r2, #1
   12398:	str	r2, [r3]
   1239c:	b	12410 <__assert_fail@plt+0x1248>
   123a0:	ldr	r3, [pc, #872]	; 12710 <__assert_fail@plt+0x1548>
   123a4:	mov	r2, #1
   123a8:	strb	r2, [r3]
   123ac:	b	12410 <__assert_fail@plt+0x1248>
   123b0:	ldr	r3, [pc, #880]	; 12728 <__assert_fail@plt+0x1560>
   123b4:	mov	r2, #0
   123b8:	str	r2, [r3]
   123bc:	b	12410 <__assert_fail@plt+0x1248>
   123c0:	mov	r0, #0
   123c4:	bl	11f2c <__assert_fail@plt+0xd64>
   123c8:	ldr	r3, [pc, #860]	; 1272c <__assert_fail@plt+0x1564>
   123cc:	ldr	r0, [r3]
   123d0:	ldr	r3, [pc, #856]	; 12730 <__assert_fail@plt+0x1568>
   123d4:	ldr	r2, [r3]
   123d8:	mov	r3, #0
   123dc:	str	r3, [sp, #8]
   123e0:	ldr	r3, [pc, #844]	; 12734 <__assert_fail@plt+0x156c>
   123e4:	str	r3, [sp, #4]
   123e8:	ldr	r3, [pc, #840]	; 12738 <__assert_fail@plt+0x1570>
   123ec:	str	r3, [sp]
   123f0:	mov	r3, r2
   123f4:	ldr	r2, [pc, #832]	; 1273c <__assert_fail@plt+0x1574>
   123f8:	ldr	r1, [pc, #832]	; 12740 <__assert_fail@plt+0x1578>
   123fc:	bl	1b794 <__assert_fail@plt+0xa5cc>
   12400:	mov	r0, #0
   12404:	bl	11054 <exit@plt>
   12408:	mov	r0, #1
   1240c:	bl	11f2c <__assert_fail@plt+0xd64>
   12410:	mov	r3, #0
   12414:	str	r3, [sp]
   12418:	ldr	r3, [pc, #804]	; 12744 <__assert_fail@plt+0x157c>
   1241c:	ldr	r2, [pc, #804]	; 12748 <__assert_fail@plt+0x1580>
   12420:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12424:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12428:	bl	1103c <getopt_long@plt>
   1242c:	str	r0, [fp, #-32]	; 0xffffffe0
   12430:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12434:	cmn	r3, #1
   12438:	bne	12184 <__assert_fail@plt+0xfbc>
   1243c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12440:	cmp	r3, #0
   12444:	beq	12478 <__assert_fail@plt+0x12b0>
   12448:	ldr	r3, [fp, #-16]
   1244c:	cmp	r3, #0
   12450:	beq	124ac <__assert_fail@plt+0x12e4>
   12454:	ldr	r0, [pc, #752]	; 1274c <__assert_fail@plt+0x1584>
   12458:	bl	11060 <gettext@plt>
   1245c:	mov	r3, r0
   12460:	mov	r2, r3
   12464:	mov	r1, #0
   12468:	mov	r0, #0
   1246c:	bl	10ff4 <error@plt>
   12470:	mov	r0, #1
   12474:	bl	11f2c <__assert_fail@plt+0xd64>
   12478:	ldr	r3, [fp, #-16]
   1247c:	cmp	r3, #0
   12480:	bne	124ac <__assert_fail@plt+0x12e4>
   12484:	ldr	r3, [pc, #660]	; 12720 <__assert_fail@plt+0x1558>
   12488:	ldr	r3, [r3]
   1248c:	add	r2, r3, #1
   12490:	ldr	r1, [pc, #648]	; 12720 <__assert_fail@plt+0x1558>
   12494:	str	r2, [r1]
   12498:	lsl	r3, r3, #2
   1249c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   124a0:	add	r3, r2, r3
   124a4:	ldr	r3, [r3]
   124a8:	str	r3, [fp, #-16]
   124ac:	ldr	r3, [pc, #620]	; 12720 <__assert_fail@plt+0x1558>
   124b0:	ldr	r2, [r3]
   124b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   124b8:	cmp	r2, r3
   124bc:	blt	1255c <__assert_fail@plt+0x1394>
   124c0:	ldr	r3, [fp, #-16]
   124c4:	cmp	r3, #0
   124c8:	beq	124f4 <__assert_fail@plt+0x132c>
   124cc:	ldr	r3, [pc, #588]	; 12720 <__assert_fail@plt+0x1558>
   124d0:	ldr	r3, [r3]
   124d4:	sub	r3, r3, #-1073741823	; 0xc0000001
   124d8:	lsl	r3, r3, #2
   124dc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   124e0:	add	r3, r2, r3
   124e4:	ldr	r2, [r3]
   124e8:	ldr	r3, [fp, #-16]
   124ec:	cmp	r2, r3
   124f0:	beq	12514 <__assert_fail@plt+0x134c>
   124f4:	ldr	r0, [pc, #596]	; 12750 <__assert_fail@plt+0x1588>
   124f8:	bl	11060 <gettext@plt>
   124fc:	mov	r3, r0
   12500:	mov	r2, r3
   12504:	mov	r1, #0
   12508:	mov	r0, #0
   1250c:	bl	10ff4 <error@plt>
   12510:	b	12554 <__assert_fail@plt+0x138c>
   12514:	ldr	r0, [pc, #568]	; 12754 <__assert_fail@plt+0x158c>
   12518:	bl	11060 <gettext@plt>
   1251c:	mov	r4, r0
   12520:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12524:	sub	r3, r3, #-1073741823	; 0xc0000001
   12528:	lsl	r3, r3, #2
   1252c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12530:	add	r3, r2, r3
   12534:	ldr	r3, [r3]
   12538:	mov	r0, r3
   1253c:	bl	1aff4 <__assert_fail@plt+0x9e2c>
   12540:	mov	r3, r0
   12544:	mov	r2, r4
   12548:	mov	r1, #0
   1254c:	mov	r0, #0
   12550:	bl	10ff4 <error@plt>
   12554:	mov	r0, #1
   12558:	bl	11f2c <__assert_fail@plt+0xd64>
   1255c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12560:	cmp	r3, #0
   12564:	beq	125c8 <__assert_fail@plt+0x1400>
   12568:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1256c:	bl	184a0 <__assert_fail@plt+0x72d8>
   12570:	mov	r3, r0
   12574:	mov	r2, r3
   12578:	ldr	r3, [pc, #472]	; 12758 <__assert_fail@plt+0x1590>
   1257c:	str	r2, [r3]
   12580:	ldr	r3, [pc, #464]	; 12758 <__assert_fail@plt+0x1590>
   12584:	ldr	r3, [r3]
   12588:	cmp	r3, #0
   1258c:	bne	12634 <__assert_fail@plt+0x146c>
   12590:	bl	1109c <__errno_location@plt>
   12594:	mov	r3, r0
   12598:	ldr	r4, [r3]
   1259c:	ldr	r0, [pc, #440]	; 1275c <__assert_fail@plt+0x1594>
   125a0:	bl	11060 <gettext@plt>
   125a4:	mov	r5, r0
   125a8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   125ac:	mov	r0, #4
   125b0:	bl	1abfc <__assert_fail@plt+0x9a34>
   125b4:	mov	r3, r0
   125b8:	mov	r2, r5
   125bc:	mov	r1, r4
   125c0:	mov	r0, #1
   125c4:	bl	10ff4 <error@plt>
   125c8:	ldr	r0, [fp, #-16]
   125cc:	bl	17eb4 <__assert_fail@plt+0x6cec>
   125d0:	mov	r3, r0
   125d4:	mov	r2, r3
   125d8:	ldr	r3, [pc, #376]	; 12758 <__assert_fail@plt+0x1590>
   125dc:	str	r2, [r3]
   125e0:	ldr	r3, [pc, #368]	; 12758 <__assert_fail@plt+0x1590>
   125e4:	ldr	r3, [r3]
   125e8:	cmp	r3, #0
   125ec:	bne	12620 <__assert_fail@plt+0x1458>
   125f0:	ldr	r0, [pc, #360]	; 12760 <__assert_fail@plt+0x1598>
   125f4:	bl	11060 <gettext@plt>
   125f8:	mov	r4, r0
   125fc:	ldr	r0, [fp, #-16]
   12600:	bl	1aff4 <__assert_fail@plt+0x9e2c>
   12604:	mov	r3, r0
   12608:	mov	r2, r4
   1260c:	mov	r1, #0
   12610:	mov	r0, #0
   12614:	bl	10ff4 <error@plt>
   12618:	mov	r0, #1
   1261c:	bl	11f2c <__assert_fail@plt+0xd64>
   12620:	mov	r0, #0
   12624:	bl	11168 <umask@plt>
   12628:	mov	r2, r0
   1262c:	ldr	r3, [pc, #304]	; 12764 <__assert_fail@plt+0x159c>
   12630:	str	r2, [r3]
   12634:	ldr	r3, [pc, #216]	; 12714 <__assert_fail@plt+0x154c>
   12638:	ldrb	r3, [r3]
   1263c:	cmp	r3, #0
   12640:	beq	126ac <__assert_fail@plt+0x14e4>
   12644:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12648:	cmp	r3, #0
   1264c:	beq	126ac <__assert_fail@plt+0x14e4>
   12650:	ldr	r0, [pc, #272]	; 12768 <__assert_fail@plt+0x15a0>
   12654:	bl	1b020 <__assert_fail@plt+0x9e58>
   12658:	mov	r2, r0
   1265c:	ldr	r3, [pc, #264]	; 1276c <__assert_fail@plt+0x15a4>
   12660:	str	r2, [r3]
   12664:	ldr	r3, [pc, #256]	; 1276c <__assert_fail@plt+0x15a4>
   12668:	ldr	r3, [r3]
   1266c:	cmp	r3, #0
   12670:	bne	126bc <__assert_fail@plt+0x14f4>
   12674:	bl	1109c <__errno_location@plt>
   12678:	mov	r3, r0
   1267c:	ldr	r4, [r3]
   12680:	ldr	r0, [pc, #212]	; 1275c <__assert_fail@plt+0x1594>
   12684:	bl	11060 <gettext@plt>
   12688:	mov	r5, r0
   1268c:	ldr	r1, [pc, #220]	; 12770 <__assert_fail@plt+0x15a8>
   12690:	mov	r0, #4
   12694:	bl	1abfc <__assert_fail@plt+0x9a34>
   12698:	mov	r3, r0
   1269c:	mov	r2, r5
   126a0:	mov	r1, r4
   126a4:	mov	r0, #1
   126a8:	bl	10ff4 <error@plt>
   126ac:	ldr	r3, [pc, #184]	; 1276c <__assert_fail@plt+0x15a4>
   126b0:	mov	r2, #0
   126b4:	str	r2, [r3]
   126b8:	b	126c0 <__assert_fail@plt+0x14f8>
   126bc:	nop			; (mov r0, r0)
   126c0:	ldr	r3, [pc, #88]	; 12720 <__assert_fail@plt+0x1558>
   126c4:	ldr	r3, [r3]
   126c8:	lsl	r3, r3, #2
   126cc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   126d0:	add	r3, r2, r3
   126d4:	ldr	r1, [pc, #152]	; 12774 <__assert_fail@plt+0x15ac>
   126d8:	mov	r0, r3
   126dc:	bl	11dec <__assert_fail@plt+0xc24>
   126e0:	mov	r3, r0
   126e4:	strb	r3, [fp, #-49]	; 0xffffffcf
   126e8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   126ec:	eor	r3, r3, #1
   126f0:	uxtb	r3, r3
   126f4:	mov	r0, r3
   126f8:	bl	11054 <exit@plt>
   126fc:	andeq	lr, r1, ip, ror r6
   12700:	andeq	lr, r1, r0, lsr #30
   12704:	muleq	r1, r4, r6
   12708:	andeq	r2, r1, r4, asr r8
   1270c:	muleq	r3, r2, r1
   12710:	muleq	r3, r1, r1
   12714:	muleq	r3, r0, r1
   12718:	andeq	r0, r0, r1, lsl #2
   1271c:	andeq	r0, r0, r2, lsl #2
   12720:	andeq	r0, r3, r0, ror r1
   12724:	andeq	r0, r3, r0, lsl #3
   12728:	andeq	r0, r3, ip, lsl r1
   1272c:	andeq	r0, r3, ip, ror r1
   12730:	andeq	r0, r3, r0, lsr #2
   12734:	andeq	lr, r1, r8, lsr pc
   12738:	andeq	lr, r1, r8, asr #30
   1273c:	andeq	lr, r1, r4, asr #11
   12740:	andeq	lr, r1, r8, lsl pc
   12744:	muleq	r1, ip, r7
   12748:	andeq	lr, r1, r8, asr pc
   1274c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12750:	andeq	lr, r1, r8, asr #31
   12754:	ldrdeq	lr, [r1], -r8
   12758:	andeq	r0, r3, r8, lsl #3
   1275c:	strdeq	lr, [r1], -r4
   12760:	andeq	pc, r1, r4, lsl r0	; <UNPREDICTABLE>
   12764:	andeq	r0, r3, ip, lsl #3
   12768:	muleq	r3, r8, r1
   1276c:	muleq	r3, r4, r1
   12770:	andeq	lr, r1, ip, ror #20
   12774:	andeq	r0, r0, r1, lsl r4
   12778:	push	{fp, lr}
   1277c:	add	fp, sp, #4
   12780:	sub	sp, sp, #16
   12784:	str	r0, [fp, #-8]
   12788:	str	r1, [fp, #-12]
   1278c:	str	r2, [fp, #-16]
   12790:	mov	r3, #0
   12794:	ldr	r2, [fp, #-16]
   12798:	ldr	r1, [fp, #-12]
   1279c:	ldr	r0, [fp, #-8]
   127a0:	bl	129c8 <__assert_fail@plt+0x1800>
   127a4:	mov	r3, r0
   127a8:	mov	r0, r3
   127ac:	sub	sp, fp, #4
   127b0:	pop	{fp, pc}
   127b4:	push	{fp, lr}
   127b8:	add	fp, sp, #4
   127bc:	sub	sp, sp, #16
   127c0:	str	r0, [fp, #-8]
   127c4:	str	r1, [fp, #-12]
   127c8:	str	r2, [fp, #-16]
   127cc:	mov	r3, #256	; 0x100
   127d0:	ldr	r2, [fp, #-16]
   127d4:	ldr	r1, [fp, #-12]
   127d8:	ldr	r0, [fp, #-8]
   127dc:	bl	129c8 <__assert_fail@plt+0x1800>
   127e0:	mov	r3, r0
   127e4:	mov	r0, r3
   127e8:	sub	sp, fp, #4
   127ec:	pop	{fp, pc}
   127f0:	push	{fp}		; (str fp, [sp, #-4]!)
   127f4:	add	fp, sp, #0
   127f8:	sub	sp, sp, #12
   127fc:	str	r0, [fp, #-8]
   12800:	ldr	r2, [pc, #20]	; 1281c <__assert_fail@plt+0x1654>
   12804:	ldr	r3, [fp, #-8]
   12808:	str	r3, [r2]
   1280c:	nop			; (mov r0, r0)
   12810:	add	sp, fp, #0
   12814:	pop	{fp}		; (ldr fp, [sp], #4)
   12818:	bx	lr
   1281c:	andeq	r0, r3, r8, lsr #3
   12820:	push	{fp}		; (str fp, [sp, #-4]!)
   12824:	add	fp, sp, #0
   12828:	sub	sp, sp, #12
   1282c:	mov	r3, r0
   12830:	strb	r3, [fp, #-5]
   12834:	ldr	r2, [pc, #20]	; 12850 <__assert_fail@plt+0x1688>
   12838:	ldrb	r3, [fp, #-5]
   1283c:	strb	r3, [r2]
   12840:	nop			; (mov r0, r0)
   12844:	add	sp, fp, #0
   12848:	pop	{fp}		; (ldr fp, [sp], #4)
   1284c:	bx	lr
   12850:	andeq	r0, r3, ip, lsr #3
   12854:	push	{r4, fp, lr}
   12858:	add	fp, sp, #8
   1285c:	sub	sp, sp, #20
   12860:	ldr	r3, [pc, #256]	; 12968 <__assert_fail@plt+0x17a0>
   12864:	ldr	r3, [r3]
   12868:	mov	r0, r3
   1286c:	bl	1cb3c <__assert_fail@plt+0xb974>
   12870:	mov	r3, r0
   12874:	cmp	r3, #0
   12878:	beq	12930 <__assert_fail@plt+0x1768>
   1287c:	ldr	r3, [pc, #232]	; 1296c <__assert_fail@plt+0x17a4>
   12880:	ldrb	r3, [r3]
   12884:	eor	r3, r3, #1
   12888:	uxtb	r3, r3
   1288c:	cmp	r3, #0
   12890:	bne	128a8 <__assert_fail@plt+0x16e0>
   12894:	bl	1109c <__errno_location@plt>
   12898:	mov	r3, r0
   1289c:	ldr	r3, [r3]
   128a0:	cmp	r3, #32
   128a4:	beq	12930 <__assert_fail@plt+0x1768>
   128a8:	ldr	r0, [pc, #192]	; 12970 <__assert_fail@plt+0x17a8>
   128ac:	bl	11060 <gettext@plt>
   128b0:	str	r0, [fp, #-16]
   128b4:	ldr	r3, [pc, #184]	; 12974 <__assert_fail@plt+0x17ac>
   128b8:	ldr	r3, [r3]
   128bc:	cmp	r3, #0
   128c0:	beq	12904 <__assert_fail@plt+0x173c>
   128c4:	bl	1109c <__errno_location@plt>
   128c8:	mov	r3, r0
   128cc:	ldr	r4, [r3]
   128d0:	ldr	r3, [pc, #156]	; 12974 <__assert_fail@plt+0x17ac>
   128d4:	ldr	r3, [r3]
   128d8:	mov	r0, r3
   128dc:	bl	1ad24 <__assert_fail@plt+0x9b5c>
   128e0:	mov	r2, r0
   128e4:	ldr	r3, [fp, #-16]
   128e8:	str	r3, [sp]
   128ec:	mov	r3, r2
   128f0:	ldr	r2, [pc, #128]	; 12978 <__assert_fail@plt+0x17b0>
   128f4:	mov	r1, r4
   128f8:	mov	r0, #0
   128fc:	bl	10ff4 <error@plt>
   12900:	b	12920 <__assert_fail@plt+0x1758>
   12904:	bl	1109c <__errno_location@plt>
   12908:	mov	r3, r0
   1290c:	ldr	r1, [r3]
   12910:	ldr	r3, [fp, #-16]
   12914:	ldr	r2, [pc, #96]	; 1297c <__assert_fail@plt+0x17b4>
   12918:	mov	r0, #0
   1291c:	bl	10ff4 <error@plt>
   12920:	ldr	r3, [pc, #88]	; 12980 <__assert_fail@plt+0x17b8>
   12924:	ldr	r3, [r3]
   12928:	mov	r0, r3
   1292c:	bl	10f34 <_exit@plt>
   12930:	ldr	r3, [pc, #76]	; 12984 <__assert_fail@plt+0x17bc>
   12934:	ldr	r3, [r3]
   12938:	mov	r0, r3
   1293c:	bl	1cb3c <__assert_fail@plt+0xb974>
   12940:	mov	r3, r0
   12944:	cmp	r3, #0
   12948:	beq	1295c <__assert_fail@plt+0x1794>
   1294c:	ldr	r3, [pc, #44]	; 12980 <__assert_fail@plt+0x17b8>
   12950:	ldr	r3, [r3]
   12954:	mov	r0, r3
   12958:	bl	10f34 <_exit@plt>
   1295c:	nop			; (mov r0, r0)
   12960:	sub	sp, fp, #8
   12964:	pop	{r4, fp, pc}
   12968:	andeq	r0, r3, ip, ror r1
   1296c:	andeq	r0, r3, ip, lsr #3
   12970:	andeq	pc, r1, r8, lsr r0	; <UNPREDICTABLE>
   12974:	andeq	r0, r3, r8, lsr #3
   12978:	andeq	pc, r1, r4, asr #32
   1297c:	andeq	pc, r1, ip, asr #32
   12980:	andeq	r0, r3, r4, lsr #2
   12984:	andeq	r0, r3, r8, ror r1
   12988:	push	{fp, lr}
   1298c:	add	fp, sp, #4
   12990:	sub	sp, sp, #16
   12994:	str	r0, [fp, #-8]
   12998:	str	r1, [fp, #-12]
   1299c:	str	r2, [fp, #-16]
   129a0:	str	r3, [fp, #-20]	; 0xffffffec
   129a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   129a8:	ldr	r2, [fp, #-16]
   129ac:	ldr	r1, [fp, #-12]
   129b0:	ldr	r0, [fp, #-8]
   129b4:	bl	11090 <fchmodat@plt>
   129b8:	mov	r3, r0
   129bc:	mov	r0, r3
   129c0:	sub	sp, fp, #4
   129c4:	pop	{fp, pc}
   129c8:	push	{fp, lr}
   129cc:	add	fp, sp, #4
   129d0:	sub	sp, sp, #168	; 0xa8
   129d4:	str	r0, [fp, #-160]	; 0xffffff60
   129d8:	str	r1, [fp, #-164]	; 0xffffff5c
   129dc:	str	r2, [fp, #-168]	; 0xffffff58
   129e0:	str	r3, [fp, #-172]	; 0xffffff54
   129e4:	ldr	r3, [fp, #-172]	; 0xffffff54
   129e8:	cmp	r3, #256	; 0x100
   129ec:	bne	12b18 <__assert_fail@plt+0x1950>
   129f0:	mov	r2, #2654208	; 0x288000
   129f4:	ldr	r1, [fp, #-164]	; 0xffffff5c
   129f8:	ldr	r0, [fp, #-160]	; 0xffffff60
   129fc:	bl	11078 <openat64@plt>
   12a00:	str	r0, [fp, #-8]
   12a04:	ldr	r3, [fp, #-8]
   12a08:	cmp	r3, #0
   12a0c:	bge	12a18 <__assert_fail@plt+0x1850>
   12a10:	ldr	r3, [fp, #-8]
   12a14:	b	12b30 <__assert_fail@plt+0x1968>
   12a18:	sub	r2, fp, #156	; 0x9c
   12a1c:	mov	r3, #4096	; 0x1000
   12a20:	ldr	r1, [pc, #276]	; 12b3c <__assert_fail@plt+0x1974>
   12a24:	ldr	r0, [fp, #-8]
   12a28:	bl	1e550 <__assert_fail@plt+0xd388>
   12a2c:	mov	r3, r0
   12a30:	cmp	r3, #0
   12a34:	beq	12a68 <__assert_fail@plt+0x18a0>
   12a38:	bl	1109c <__errno_location@plt>
   12a3c:	mov	r3, r0
   12a40:	ldr	r3, [r3]
   12a44:	str	r3, [fp, #-12]
   12a48:	ldr	r0, [fp, #-8]
   12a4c:	bl	111a4 <close@plt>
   12a50:	bl	1109c <__errno_location@plt>
   12a54:	mov	r2, r0
   12a58:	ldr	r3, [fp, #-12]
   12a5c:	str	r3, [r2]
   12a60:	mvn	r3, #0
   12a64:	b	12b30 <__assert_fail@plt+0x1968>
   12a68:	ldr	r3, [fp, #-140]	; 0xffffff74
   12a6c:	and	r3, r3, #61440	; 0xf000
   12a70:	cmp	r3, #40960	; 0xa000
   12a74:	bne	12a98 <__assert_fail@plt+0x18d0>
   12a78:	ldr	r0, [fp, #-8]
   12a7c:	bl	111a4 <close@plt>
   12a80:	bl	1109c <__errno_location@plt>
   12a84:	mov	r2, r0
   12a88:	mov	r3, #95	; 0x5f
   12a8c:	str	r3, [r2]
   12a90:	mvn	r3, #0
   12a94:	b	12b30 <__assert_fail@plt+0x1968>
   12a98:	sub	r3, fp, #48	; 0x30
   12a9c:	ldr	r2, [fp, #-8]
   12aa0:	ldr	r1, [pc, #152]	; 12b40 <__assert_fail@plt+0x1978>
   12aa4:	mov	r0, r3
   12aa8:	bl	11114 <sprintf@plt>
   12aac:	sub	r3, fp, #48	; 0x30
   12ab0:	ldr	r1, [fp, #-168]	; 0xffffff58
   12ab4:	mov	r0, r3
   12ab8:	bl	11174 <chmod@plt>
   12abc:	str	r0, [fp, #-16]
   12ac0:	bl	1109c <__errno_location@plt>
   12ac4:	mov	r3, r0
   12ac8:	ldr	r3, [r3]
   12acc:	str	r3, [fp, #-20]	; 0xffffffec
   12ad0:	ldr	r0, [fp, #-8]
   12ad4:	bl	111a4 <close@plt>
   12ad8:	ldr	r3, [fp, #-16]
   12adc:	cmp	r3, #0
   12ae0:	bne	12aec <__assert_fail@plt+0x1924>
   12ae4:	ldr	r3, [fp, #-16]
   12ae8:	b	12b30 <__assert_fail@plt+0x1968>
   12aec:	ldr	r3, [fp, #-20]	; 0xffffffec
   12af0:	cmp	r3, #2
   12af4:	beq	12b10 <__assert_fail@plt+0x1948>
   12af8:	bl	1109c <__errno_location@plt>
   12afc:	mov	r2, r0
   12b00:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b04:	str	r3, [r2]
   12b08:	ldr	r3, [fp, #-16]
   12b0c:	b	12b30 <__assert_fail@plt+0x1968>
   12b10:	mov	r3, #0
   12b14:	str	r3, [fp, #-172]	; 0xffffff54
   12b18:	ldr	r3, [fp, #-172]	; 0xffffff54
   12b1c:	ldr	r2, [fp, #-168]	; 0xffffff58
   12b20:	ldr	r1, [fp, #-164]	; 0xffffff5c
   12b24:	ldr	r0, [fp, #-160]	; 0xffffff60
   12b28:	bl	12988 <__assert_fail@plt+0x17c0>
   12b2c:	mov	r3, r0
   12b30:	mov	r0, r3
   12b34:	sub	sp, fp, #4
   12b38:	pop	{fp, pc}
   12b3c:	andeq	pc, r1, r0, asr r0	; <UNPREDICTABLE>
   12b40:	andeq	pc, r1, r4, asr r0	; <UNPREDICTABLE>
   12b44:	push	{fp}		; (str fp, [sp, #-4]!)
   12b48:	add	fp, sp, #0
   12b4c:	sub	sp, sp, #12
   12b50:	str	r0, [fp, #-8]
   12b54:	ldr	r3, [fp, #-8]
   12b58:	and	r3, r3, #61440	; 0xf000
   12b5c:	cmp	r3, #32768	; 0x8000
   12b60:	bne	12b6c <__assert_fail@plt+0x19a4>
   12b64:	mov	r3, #45	; 0x2d
   12b68:	b	12c00 <__assert_fail@plt+0x1a38>
   12b6c:	ldr	r3, [fp, #-8]
   12b70:	and	r3, r3, #61440	; 0xf000
   12b74:	cmp	r3, #16384	; 0x4000
   12b78:	bne	12b84 <__assert_fail@plt+0x19bc>
   12b7c:	mov	r3, #100	; 0x64
   12b80:	b	12c00 <__assert_fail@plt+0x1a38>
   12b84:	ldr	r3, [fp, #-8]
   12b88:	and	r3, r3, #61440	; 0xf000
   12b8c:	cmp	r3, #24576	; 0x6000
   12b90:	bne	12b9c <__assert_fail@plt+0x19d4>
   12b94:	mov	r3, #98	; 0x62
   12b98:	b	12c00 <__assert_fail@plt+0x1a38>
   12b9c:	ldr	r3, [fp, #-8]
   12ba0:	and	r3, r3, #61440	; 0xf000
   12ba4:	cmp	r3, #8192	; 0x2000
   12ba8:	bne	12bb4 <__assert_fail@plt+0x19ec>
   12bac:	mov	r3, #99	; 0x63
   12bb0:	b	12c00 <__assert_fail@plt+0x1a38>
   12bb4:	ldr	r3, [fp, #-8]
   12bb8:	and	r3, r3, #61440	; 0xf000
   12bbc:	cmp	r3, #40960	; 0xa000
   12bc0:	bne	12bcc <__assert_fail@plt+0x1a04>
   12bc4:	mov	r3, #108	; 0x6c
   12bc8:	b	12c00 <__assert_fail@plt+0x1a38>
   12bcc:	ldr	r3, [fp, #-8]
   12bd0:	and	r3, r3, #61440	; 0xf000
   12bd4:	cmp	r3, #4096	; 0x1000
   12bd8:	bne	12be4 <__assert_fail@plt+0x1a1c>
   12bdc:	mov	r3, #112	; 0x70
   12be0:	b	12c00 <__assert_fail@plt+0x1a38>
   12be4:	ldr	r3, [fp, #-8]
   12be8:	and	r3, r3, #61440	; 0xf000
   12bec:	cmp	r3, #49152	; 0xc000
   12bf0:	bne	12bfc <__assert_fail@plt+0x1a34>
   12bf4:	mov	r3, #115	; 0x73
   12bf8:	b	12c00 <__assert_fail@plt+0x1a38>
   12bfc:	mov	r3, #63	; 0x3f
   12c00:	mov	r0, r3
   12c04:	add	sp, fp, #0
   12c08:	pop	{fp}		; (ldr fp, [sp], #4)
   12c0c:	bx	lr
   12c10:	push	{fp, lr}
   12c14:	add	fp, sp, #4
   12c18:	sub	sp, sp, #8
   12c1c:	str	r0, [fp, #-8]
   12c20:	str	r1, [fp, #-12]
   12c24:	ldr	r0, [fp, #-8]
   12c28:	bl	12b44 <__assert_fail@plt+0x197c>
   12c2c:	mov	r3, r0
   12c30:	mov	r2, r3
   12c34:	ldr	r3, [fp, #-12]
   12c38:	strb	r2, [r3]
   12c3c:	ldr	r3, [fp, #-12]
   12c40:	add	r3, r3, #1
   12c44:	ldr	r2, [fp, #-8]
   12c48:	and	r2, r2, #256	; 0x100
   12c4c:	cmp	r2, #0
   12c50:	beq	12c5c <__assert_fail@plt+0x1a94>
   12c54:	mov	r2, #114	; 0x72
   12c58:	b	12c60 <__assert_fail@plt+0x1a98>
   12c5c:	mov	r2, #45	; 0x2d
   12c60:	strb	r2, [r3]
   12c64:	ldr	r3, [fp, #-12]
   12c68:	add	r3, r3, #2
   12c6c:	ldr	r2, [fp, #-8]
   12c70:	and	r2, r2, #128	; 0x80
   12c74:	cmp	r2, #0
   12c78:	beq	12c84 <__assert_fail@plt+0x1abc>
   12c7c:	mov	r2, #119	; 0x77
   12c80:	b	12c88 <__assert_fail@plt+0x1ac0>
   12c84:	mov	r2, #45	; 0x2d
   12c88:	strb	r2, [r3]
   12c8c:	ldr	r3, [fp, #-12]
   12c90:	add	r2, r3, #3
   12c94:	ldr	r3, [fp, #-8]
   12c98:	and	r3, r3, #2048	; 0x800
   12c9c:	cmp	r3, #0
   12ca0:	beq	12cc4 <__assert_fail@plt+0x1afc>
   12ca4:	ldr	r3, [fp, #-8]
   12ca8:	and	r3, r3, #64	; 0x40
   12cac:	cmp	r3, #0
   12cb0:	beq	12cbc <__assert_fail@plt+0x1af4>
   12cb4:	mov	r3, #115	; 0x73
   12cb8:	b	12ce0 <__assert_fail@plt+0x1b18>
   12cbc:	mov	r3, #83	; 0x53
   12cc0:	b	12ce0 <__assert_fail@plt+0x1b18>
   12cc4:	ldr	r3, [fp, #-8]
   12cc8:	and	r3, r3, #64	; 0x40
   12ccc:	cmp	r3, #0
   12cd0:	beq	12cdc <__assert_fail@plt+0x1b14>
   12cd4:	mov	r3, #120	; 0x78
   12cd8:	b	12ce0 <__assert_fail@plt+0x1b18>
   12cdc:	mov	r3, #45	; 0x2d
   12ce0:	strb	r3, [r2]
   12ce4:	ldr	r3, [fp, #-12]
   12ce8:	add	r3, r3, #4
   12cec:	ldr	r2, [fp, #-8]
   12cf0:	and	r2, r2, #32
   12cf4:	cmp	r2, #0
   12cf8:	beq	12d04 <__assert_fail@plt+0x1b3c>
   12cfc:	mov	r2, #114	; 0x72
   12d00:	b	12d08 <__assert_fail@plt+0x1b40>
   12d04:	mov	r2, #45	; 0x2d
   12d08:	strb	r2, [r3]
   12d0c:	ldr	r3, [fp, #-12]
   12d10:	add	r3, r3, #5
   12d14:	ldr	r2, [fp, #-8]
   12d18:	and	r2, r2, #16
   12d1c:	cmp	r2, #0
   12d20:	beq	12d2c <__assert_fail@plt+0x1b64>
   12d24:	mov	r2, #119	; 0x77
   12d28:	b	12d30 <__assert_fail@plt+0x1b68>
   12d2c:	mov	r2, #45	; 0x2d
   12d30:	strb	r2, [r3]
   12d34:	ldr	r3, [fp, #-12]
   12d38:	add	r2, r3, #6
   12d3c:	ldr	r3, [fp, #-8]
   12d40:	and	r3, r3, #1024	; 0x400
   12d44:	cmp	r3, #0
   12d48:	beq	12d6c <__assert_fail@plt+0x1ba4>
   12d4c:	ldr	r3, [fp, #-8]
   12d50:	and	r3, r3, #8
   12d54:	cmp	r3, #0
   12d58:	beq	12d64 <__assert_fail@plt+0x1b9c>
   12d5c:	mov	r3, #115	; 0x73
   12d60:	b	12d88 <__assert_fail@plt+0x1bc0>
   12d64:	mov	r3, #83	; 0x53
   12d68:	b	12d88 <__assert_fail@plt+0x1bc0>
   12d6c:	ldr	r3, [fp, #-8]
   12d70:	and	r3, r3, #8
   12d74:	cmp	r3, #0
   12d78:	beq	12d84 <__assert_fail@plt+0x1bbc>
   12d7c:	mov	r3, #120	; 0x78
   12d80:	b	12d88 <__assert_fail@plt+0x1bc0>
   12d84:	mov	r3, #45	; 0x2d
   12d88:	strb	r3, [r2]
   12d8c:	ldr	r3, [fp, #-12]
   12d90:	add	r3, r3, #7
   12d94:	ldr	r2, [fp, #-8]
   12d98:	and	r2, r2, #4
   12d9c:	cmp	r2, #0
   12da0:	beq	12dac <__assert_fail@plt+0x1be4>
   12da4:	mov	r2, #114	; 0x72
   12da8:	b	12db0 <__assert_fail@plt+0x1be8>
   12dac:	mov	r2, #45	; 0x2d
   12db0:	strb	r2, [r3]
   12db4:	ldr	r3, [fp, #-12]
   12db8:	add	r3, r3, #8
   12dbc:	ldr	r2, [fp, #-8]
   12dc0:	and	r2, r2, #2
   12dc4:	cmp	r2, #0
   12dc8:	beq	12dd4 <__assert_fail@plt+0x1c0c>
   12dcc:	mov	r2, #119	; 0x77
   12dd0:	b	12dd8 <__assert_fail@plt+0x1c10>
   12dd4:	mov	r2, #45	; 0x2d
   12dd8:	strb	r2, [r3]
   12ddc:	ldr	r3, [fp, #-12]
   12de0:	add	r2, r3, #9
   12de4:	ldr	r3, [fp, #-8]
   12de8:	and	r3, r3, #512	; 0x200
   12dec:	cmp	r3, #0
   12df0:	beq	12e14 <__assert_fail@plt+0x1c4c>
   12df4:	ldr	r3, [fp, #-8]
   12df8:	and	r3, r3, #1
   12dfc:	cmp	r3, #0
   12e00:	beq	12e0c <__assert_fail@plt+0x1c44>
   12e04:	mov	r3, #116	; 0x74
   12e08:	b	12e30 <__assert_fail@plt+0x1c68>
   12e0c:	mov	r3, #84	; 0x54
   12e10:	b	12e30 <__assert_fail@plt+0x1c68>
   12e14:	ldr	r3, [fp, #-8]
   12e18:	and	r3, r3, #1
   12e1c:	cmp	r3, #0
   12e20:	beq	12e2c <__assert_fail@plt+0x1c64>
   12e24:	mov	r3, #120	; 0x78
   12e28:	b	12e30 <__assert_fail@plt+0x1c68>
   12e2c:	mov	r3, #45	; 0x2d
   12e30:	strb	r3, [r2]
   12e34:	ldr	r3, [fp, #-12]
   12e38:	add	r3, r3, #10
   12e3c:	mov	r2, #32
   12e40:	strb	r2, [r3]
   12e44:	ldr	r3, [fp, #-12]
   12e48:	add	r3, r3, #11
   12e4c:	mov	r2, #0
   12e50:	strb	r2, [r3]
   12e54:	nop			; (mov r0, r0)
   12e58:	sub	sp, fp, #4
   12e5c:	pop	{fp, pc}
   12e60:	push	{fp, lr}
   12e64:	add	fp, sp, #4
   12e68:	sub	sp, sp, #8
   12e6c:	str	r0, [fp, #-8]
   12e70:	str	r1, [fp, #-12]
   12e74:	ldr	r3, [fp, #-8]
   12e78:	ldr	r3, [r3, #16]
   12e7c:	ldr	r1, [fp, #-12]
   12e80:	mov	r0, r3
   12e84:	bl	12c10 <__assert_fail@plt+0x1a48>
   12e88:	nop			; (mov r0, r0)
   12e8c:	sub	sp, fp, #4
   12e90:	pop	{fp, pc}
   12e94:	push	{fp}		; (str fp, [sp, #-4]!)
   12e98:	add	fp, sp, #0
   12e9c:	sub	sp, sp, #20
   12ea0:	str	r0, [fp, #-16]
   12ea4:	str	r1, [fp, #-20]	; 0xffffffec
   12ea8:	ldr	r3, [fp, #-16]
   12eac:	str	r3, [fp, #-8]
   12eb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12eb4:	str	r3, [fp, #-12]
   12eb8:	ldr	r3, [fp, #-8]
   12ebc:	ldrd	r0, [r3, #8]
   12ec0:	ldr	r3, [fp, #-12]
   12ec4:	ldrd	r2, [r3, #8]
   12ec8:	cmp	r1, r3
   12ecc:	cmpeq	r0, r2
   12ed0:	bne	12ef8 <__assert_fail@plt+0x1d30>
   12ed4:	ldr	r3, [fp, #-8]
   12ed8:	ldrd	r0, [r3]
   12edc:	ldr	r3, [fp, #-12]
   12ee0:	ldrd	r2, [r3]
   12ee4:	cmp	r1, r3
   12ee8:	cmpeq	r0, r2
   12eec:	bne	12ef8 <__assert_fail@plt+0x1d30>
   12ef0:	mov	r3, #1
   12ef4:	b	12efc <__assert_fail@plt+0x1d34>
   12ef8:	mov	r3, #0
   12efc:	and	r3, r3, #1
   12f00:	uxtb	r3, r3
   12f04:	mov	r0, r3
   12f08:	add	sp, fp, #0
   12f0c:	pop	{fp}		; (ldr fp, [sp], #4)
   12f10:	bx	lr
   12f14:	push	{fp, lr}
   12f18:	add	fp, sp, #4
   12f1c:	sub	sp, sp, #16
   12f20:	str	r0, [fp, #-16]
   12f24:	str	r1, [fp, #-20]	; 0xffffffec
   12f28:	ldr	r3, [fp, #-16]
   12f2c:	str	r3, [fp, #-8]
   12f30:	ldr	r3, [fp, #-8]
   12f34:	ldrd	r0, [r3, #8]
   12f38:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f3c:	mov	r2, r3
   12f40:	mov	r3, #0
   12f44:	bl	1e330 <__assert_fail@plt+0xd168>
   12f48:	mov	r3, r2
   12f4c:	mov	r0, r3
   12f50:	sub	sp, fp, #4
   12f54:	pop	{fp, pc}
   12f58:	push	{fp, lr}
   12f5c:	add	fp, sp, #4
   12f60:	sub	sp, sp, #16
   12f64:	str	r0, [fp, #-8]
   12f68:	ldr	r3, [fp, #-8]
   12f6c:	ldr	r2, [r3, #48]	; 0x30
   12f70:	ldr	r3, [pc, #156]	; 13014 <__assert_fail@plt+0x1e4c>
   12f74:	and	r3, r3, r2
   12f78:	cmp	r3, #0
   12f7c:	beq	12fc4 <__assert_fail@plt+0x1dfc>
   12f80:	ldr	r3, [pc, #144]	; 13018 <__assert_fail@plt+0x1e50>
   12f84:	str	r3, [sp]
   12f88:	ldr	r3, [pc, #140]	; 1301c <__assert_fail@plt+0x1e54>
   12f8c:	ldr	r2, [pc, #140]	; 13020 <__assert_fail@plt+0x1e58>
   12f90:	mov	r1, #0
   12f94:	mov	r0, #31
   12f98:	bl	16c40 <__assert_fail@plt+0x5a78>
   12f9c:	mov	r3, r0
   12fa0:	mov	r2, r3
   12fa4:	ldr	r3, [fp, #-8]
   12fa8:	str	r2, [r3, #56]	; 0x38
   12fac:	ldr	r3, [fp, #-8]
   12fb0:	ldr	r3, [r3, #56]	; 0x38
   12fb4:	cmp	r3, #0
   12fb8:	bne	13004 <__assert_fail@plt+0x1e3c>
   12fbc:	mov	r3, #0
   12fc0:	b	13008 <__assert_fail@plt+0x1e40>
   12fc4:	mov	r0, #32
   12fc8:	bl	1c61c <__assert_fail@plt+0xb454>
   12fcc:	mov	r3, r0
   12fd0:	mov	r2, r3
   12fd4:	ldr	r3, [fp, #-8]
   12fd8:	str	r2, [r3, #56]	; 0x38
   12fdc:	ldr	r3, [fp, #-8]
   12fe0:	ldr	r3, [r3, #56]	; 0x38
   12fe4:	cmp	r3, #0
   12fe8:	bne	12ff4 <__assert_fail@plt+0x1e2c>
   12fec:	mov	r3, #0
   12ff0:	b	13008 <__assert_fail@plt+0x1e40>
   12ff4:	ldr	r3, [fp, #-8]
   12ff8:	ldr	r3, [r3, #56]	; 0x38
   12ffc:	mov	r0, r3
   13000:	bl	1cc60 <__assert_fail@plt+0xba98>
   13004:	mov	r3, #1
   13008:	mov	r0, r3
   1300c:	sub	sp, fp, #4
   13010:	pop	{fp, pc}
   13014:	andeq	r0, r0, r2, lsl #2
   13018:	andeq	sp, r1, r8, asr r3
   1301c:	muleq	r1, r4, lr
   13020:	andeq	r2, r1, r4, lsl pc
   13024:	push	{fp, lr}
   13028:	add	fp, sp, #4
   1302c:	sub	sp, sp, #24
   13030:	str	r0, [fp, #-24]	; 0xffffffe8
   13034:	str	r1, [fp, #-28]	; 0xffffffe4
   13038:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1303c:	ldr	r2, [r3, #48]	; 0x30
   13040:	ldr	r3, [pc, #280]	; 13160 <__assert_fail@plt+0x1f98>
   13044:	and	r3, r3, r2
   13048:	cmp	r3, #0
   1304c:	beq	13110 <__assert_fail@plt+0x1f48>
   13050:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13054:	add	r3, r3, #64	; 0x40
   13058:	str	r3, [fp, #-8]
   1305c:	mov	r0, #24
   13060:	bl	1c61c <__assert_fail@plt+0xb454>
   13064:	mov	r3, r0
   13068:	str	r3, [fp, #-12]
   1306c:	ldr	r3, [fp, #-12]
   13070:	cmp	r3, #0
   13074:	bne	13080 <__assert_fail@plt+0x1eb8>
   13078:	mov	r3, #0
   1307c:	b	13154 <__assert_fail@plt+0x1f8c>
   13080:	ldr	r3, [fp, #-8]
   13084:	ldrd	r2, [r3]
   13088:	ldr	r1, [fp, #-12]
   1308c:	strd	r2, [r1]
   13090:	ldr	r3, [fp, #-8]
   13094:	ldrd	r2, [r3, #96]	; 0x60
   13098:	ldr	r1, [fp, #-12]
   1309c:	strd	r2, [r1, #8]
   130a0:	ldr	r3, [fp, #-12]
   130a4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   130a8:	str	r2, [r3, #16]
   130ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130b0:	ldr	r3, [r3, #56]	; 0x38
   130b4:	ldr	r1, [fp, #-12]
   130b8:	mov	r0, r3
   130bc:	bl	17988 <__assert_fail@plt+0x67c0>
   130c0:	str	r0, [fp, #-16]
   130c4:	ldr	r2, [fp, #-16]
   130c8:	ldr	r3, [fp, #-12]
   130cc:	cmp	r2, r3
   130d0:	beq	13150 <__assert_fail@plt+0x1f88>
   130d4:	ldr	r0, [fp, #-12]
   130d8:	bl	1d358 <__assert_fail@plt+0xc190>
   130dc:	ldr	r3, [fp, #-16]
   130e0:	cmp	r3, #0
   130e4:	bne	130f0 <__assert_fail@plt+0x1f28>
   130e8:	mov	r3, #0
   130ec:	b	13154 <__assert_fail@plt+0x1f8c>
   130f0:	ldr	r3, [fp, #-16]
   130f4:	ldr	r2, [r3, #16]
   130f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   130fc:	str	r2, [r3]
   13100:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13104:	mov	r2, #2
   13108:	strh	r2, [r3, #56]	; 0x38
   1310c:	b	13150 <__assert_fail@plt+0x1f88>
   13110:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13114:	ldr	r2, [r3, #56]	; 0x38
   13118:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1311c:	add	r3, r3, #64	; 0x40
   13120:	mov	r1, r3
   13124:	mov	r0, r2
   13128:	bl	1cca0 <__assert_fail@plt+0xbad8>
   1312c:	mov	r3, r0
   13130:	cmp	r3, #0
   13134:	beq	13150 <__assert_fail@plt+0x1f88>
   13138:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1313c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13140:	str	r2, [r3]
   13144:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13148:	mov	r2, #2
   1314c:	strh	r2, [r3, #56]	; 0x38
   13150:	mov	r3, #1
   13154:	mov	r0, r3
   13158:	sub	sp, fp, #4
   1315c:	pop	{fp, pc}
   13160:	andeq	r0, r0, r2, lsl #2
   13164:	push	{fp, lr}
   13168:	add	fp, sp, #4
   1316c:	sub	sp, sp, #48	; 0x30
   13170:	str	r0, [fp, #-48]	; 0xffffffd0
   13174:	str	r1, [fp, #-52]	; 0xffffffcc
   13178:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1317c:	add	r3, r3, #64	; 0x40
   13180:	str	r3, [fp, #-8]
   13184:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13188:	ldr	r2, [r3, #48]	; 0x30
   1318c:	ldr	r3, [pc, #268]	; 132a0 <__assert_fail@plt+0x20d8>
   13190:	and	r3, r3, r2
   13194:	cmp	r3, #0
   13198:	beq	131ec <__assert_fail@plt+0x2024>
   1319c:	ldr	r3, [fp, #-8]
   131a0:	ldrd	r2, [r3]
   131a4:	strd	r2, [fp, #-44]	; 0xffffffd4
   131a8:	ldr	r3, [fp, #-8]
   131ac:	ldrd	r2, [r3, #96]	; 0x60
   131b0:	strd	r2, [fp, #-36]	; 0xffffffdc
   131b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   131b8:	ldr	r3, [r3, #56]	; 0x38
   131bc:	sub	r2, fp, #44	; 0x2c
   131c0:	mov	r1, r2
   131c4:	mov	r0, r3
   131c8:	bl	179ec <__assert_fail@plt+0x6824>
   131cc:	str	r0, [fp, #-12]
   131d0:	ldr	r3, [fp, #-12]
   131d4:	cmp	r3, #0
   131d8:	bne	131e0 <__assert_fail@plt+0x2018>
   131dc:	bl	11198 <abort@plt>
   131e0:	ldr	r0, [fp, #-12]
   131e4:	bl	1d358 <__assert_fail@plt+0xc190>
   131e8:	b	13294 <__assert_fail@plt+0x20cc>
   131ec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   131f0:	ldr	r3, [r3, #4]
   131f4:	str	r3, [fp, #-16]
   131f8:	ldr	r3, [fp, #-16]
   131fc:	cmp	r3, #0
   13200:	beq	13294 <__assert_fail@plt+0x20cc>
   13204:	ldr	r3, [fp, #-16]
   13208:	ldr	r3, [r3, #48]	; 0x30
   1320c:	cmp	r3, #0
   13210:	blt	13294 <__assert_fail@plt+0x20cc>
   13214:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13218:	ldr	r3, [r3, #56]	; 0x38
   1321c:	ldrd	r2, [r3, #16]
   13220:	orrs	r3, r2, r3
   13224:	bne	1322c <__assert_fail@plt+0x2064>
   13228:	bl	11198 <abort@plt>
   1322c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13230:	ldr	r3, [r3, #56]	; 0x38
   13234:	ldrd	r0, [r3]
   13238:	ldr	r3, [fp, #-8]
   1323c:	ldrd	r2, [r3, #96]	; 0x60
   13240:	cmp	r1, r3
   13244:	cmpeq	r0, r2
   13248:	bne	13294 <__assert_fail@plt+0x20cc>
   1324c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13250:	ldr	r3, [r3, #56]	; 0x38
   13254:	ldrd	r0, [r3, #8]
   13258:	ldr	r3, [fp, #-8]
   1325c:	ldrd	r2, [r3]
   13260:	cmp	r1, r3
   13264:	cmpeq	r0, r2
   13268:	bne	13294 <__assert_fail@plt+0x20cc>
   1326c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13270:	ldr	r1, [r3, #56]	; 0x38
   13274:	ldr	r3, [fp, #-16]
   13278:	ldrd	r2, [r3, #64]	; 0x40
   1327c:	strd	r2, [r1, #8]
   13280:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13284:	ldr	r1, [r3, #56]	; 0x38
   13288:	ldr	r3, [fp, #-16]
   1328c:	ldrd	r2, [r3, #160]	; 0xa0
   13290:	strd	r2, [r1]
   13294:	nop			; (mov r0, r0)
   13298:	sub	sp, fp, #4
   1329c:	pop	{fp, pc}
   132a0:	andeq	r0, r0, r2, lsl #2
   132a4:	push	{fp, lr}
   132a8:	add	fp, sp, #4
   132ac:	sub	sp, sp, #8
   132b0:	str	r0, [fp, #-8]
   132b4:	ldr	r3, [fp, #-8]
   132b8:	ldr	r2, [r3, #48]	; 0x30
   132bc:	ldr	r3, [pc, #72]	; 1330c <__assert_fail@plt+0x2144>
   132c0:	and	r3, r3, r2
   132c4:	cmp	r3, #0
   132c8:	beq	132f0 <__assert_fail@plt+0x2128>
   132cc:	ldr	r3, [fp, #-8]
   132d0:	ldr	r3, [r3, #56]	; 0x38
   132d4:	cmp	r3, #0
   132d8:	beq	13300 <__assert_fail@plt+0x2138>
   132dc:	ldr	r3, [fp, #-8]
   132e0:	ldr	r3, [r3, #56]	; 0x38
   132e4:	mov	r0, r3
   132e8:	bl	16f1c <__assert_fail@plt+0x5d54>
   132ec:	b	13300 <__assert_fail@plt+0x2138>
   132f0:	ldr	r3, [fp, #-8]
   132f4:	ldr	r3, [r3, #56]	; 0x38
   132f8:	mov	r0, r3
   132fc:	bl	1d358 <__assert_fail@plt+0xc190>
   13300:	nop			; (mov r0, r0)
   13304:	sub	sp, fp, #4
   13308:	pop	{fp, pc}
   1330c:	andeq	r0, r0, r2, lsl #2
   13310:	push	{fp, lr}
   13314:	add	fp, sp, #4
   13318:	sub	sp, sp, #16
   1331c:	str	r0, [fp, #-16]
   13320:	b	13344 <__assert_fail@plt+0x217c>
   13324:	ldr	r0, [fp, #-16]
   13328:	bl	17d68 <__assert_fail@plt+0x6ba0>
   1332c:	str	r0, [fp, #-8]
   13330:	ldr	r3, [fp, #-8]
   13334:	cmp	r3, #0
   13338:	blt	13344 <__assert_fail@plt+0x217c>
   1333c:	ldr	r0, [fp, #-8]
   13340:	bl	111a4 <close@plt>
   13344:	ldr	r0, [fp, #-16]
   13348:	bl	17c80 <__assert_fail@plt+0x6ab8>
   1334c:	mov	r3, r0
   13350:	eor	r3, r3, #1
   13354:	uxtb	r3, r3
   13358:	cmp	r3, #0
   1335c:	bne	13324 <__assert_fail@plt+0x215c>
   13360:	nop			; (mov r0, r0)
   13364:	sub	sp, fp, #4
   13368:	pop	{fp, pc}
   1336c:	push	{fp, lr}
   13370:	add	fp, sp, #4
   13374:	sub	sp, sp, #8
   13378:	str	r0, [fp, #-8]
   1337c:	mov	r3, r1
   13380:	strb	r3, [fp, #-9]
   13384:	ldr	r3, [fp, #-8]
   13388:	ldrh	r3, [r3, #56]	; 0x38
   1338c:	cmp	r3, #11
   13390:	beq	13398 <__assert_fail@plt+0x21d0>
   13394:	bl	11198 <abort@plt>
   13398:	ldrb	r3, [fp, #-9]
   1339c:	cmp	r3, #0
   133a0:	beq	133b0 <__assert_fail@plt+0x21e8>
   133a4:	mov	r2, #2
   133a8:	mov	r3, #0
   133ac:	b	133b8 <__assert_fail@plt+0x21f0>
   133b0:	mov	r2, #1
   133b4:	mov	r3, #0
   133b8:	ldr	r1, [fp, #-8]
   133bc:	strd	r2, [r1, #112]	; 0x70
   133c0:	nop			; (mov r0, r0)
   133c4:	sub	sp, fp, #4
   133c8:	pop	{fp, pc}
   133cc:	push	{fp, lr}
   133d0:	add	fp, sp, #4
   133d4:	sub	sp, sp, #24
   133d8:	str	r0, [fp, #-16]
   133dc:	str	r1, [fp, #-20]	; 0xffffffec
   133e0:	mov	r3, r2
   133e4:	strb	r3, [fp, #-21]	; 0xffffffeb
   133e8:	ldr	r3, [fp, #-16]
   133ec:	ldr	r3, [r3, #32]
   133f0:	str	r3, [fp, #-8]
   133f4:	ldr	r2, [fp, #-8]
   133f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   133fc:	cmp	r2, r3
   13400:	bne	13414 <__assert_fail@plt+0x224c>
   13404:	ldr	r3, [fp, #-8]
   13408:	cmn	r3, #100	; 0x64
   1340c:	beq	13414 <__assert_fail@plt+0x224c>
   13410:	bl	11198 <abort@plt>
   13414:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13418:	cmp	r3, #0
   1341c:	beq	13450 <__assert_fail@plt+0x2288>
   13420:	ldr	r3, [fp, #-16]
   13424:	add	r3, r3, #60	; 0x3c
   13428:	ldr	r1, [fp, #-8]
   1342c:	mov	r0, r3
   13430:	bl	17ca8 <__assert_fail@plt+0x6ae0>
   13434:	str	r0, [fp, #-12]
   13438:	ldr	r3, [fp, #-12]
   1343c:	cmp	r3, #0
   13440:	blt	13478 <__assert_fail@plt+0x22b0>
   13444:	ldr	r0, [fp, #-12]
   13448:	bl	111a4 <close@plt>
   1344c:	b	13478 <__assert_fail@plt+0x22b0>
   13450:	ldr	r3, [fp, #-16]
   13454:	ldr	r3, [r3, #48]	; 0x30
   13458:	and	r3, r3, #4
   1345c:	cmp	r3, #0
   13460:	bne	13478 <__assert_fail@plt+0x22b0>
   13464:	ldr	r3, [fp, #-8]
   13468:	cmp	r3, #0
   1346c:	blt	13478 <__assert_fail@plt+0x22b0>
   13470:	ldr	r0, [fp, #-8]
   13474:	bl	111a4 <close@plt>
   13478:	ldr	r3, [fp, #-16]
   1347c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13480:	str	r2, [r3, #32]
   13484:	nop			; (mov r0, r0)
   13488:	sub	sp, fp, #4
   1348c:	pop	{fp, pc}
   13490:	push	{fp, lr}
   13494:	add	fp, sp, #4
   13498:	sub	sp, sp, #16
   1349c:	str	r0, [fp, #-16]
   134a0:	ldr	r3, [fp, #-16]
   134a4:	ldr	r3, [r3, #48]	; 0x30
   134a8:	and	r3, r3, #4
   134ac:	cmp	r3, #0
   134b0:	bne	13540 <__assert_fail@plt+0x2378>
   134b4:	ldr	r3, [fp, #-16]
   134b8:	ldr	r3, [r3, #48]	; 0x30
   134bc:	and	r3, r3, #512	; 0x200
   134c0:	cmp	r3, #0
   134c4:	beq	13500 <__assert_fail@plt+0x2338>
   134c8:	ldr	r3, [fp, #-16]
   134cc:	ldr	r3, [r3, #48]	; 0x30
   134d0:	and	r3, r3, #512	; 0x200
   134d4:	cmp	r3, #0
   134d8:	bne	134e8 <__assert_fail@plt+0x2320>
   134dc:	ldr	r3, [fp, #-16]
   134e0:	ldr	r3, [r3, #28]
   134e4:	b	134ec <__assert_fail@plt+0x2324>
   134e8:	mvn	r3, #99	; 0x63
   134ec:	mov	r2, #1
   134f0:	mov	r1, r3
   134f4:	ldr	r0, [fp, #-16]
   134f8:	bl	133cc <__assert_fail@plt+0x2204>
   134fc:	b	13540 <__assert_fail@plt+0x2378>
   13500:	ldr	r3, [fp, #-16]
   13504:	ldr	r3, [r3, #48]	; 0x30
   13508:	and	r3, r3, #512	; 0x200
   1350c:	cmp	r3, #0
   13510:	bne	13520 <__assert_fail@plt+0x2358>
   13514:	ldr	r3, [fp, #-16]
   13518:	ldr	r3, [r3, #28]
   1351c:	b	13524 <__assert_fail@plt+0x235c>
   13520:	mvn	r3, #99	; 0x63
   13524:	mov	r0, r3
   13528:	bl	11144 <fchdir@plt>
   1352c:	mov	r3, r0
   13530:	cmp	r3, #0
   13534:	beq	13540 <__assert_fail@plt+0x2378>
   13538:	mov	r3, #1
   1353c:	b	13544 <__assert_fail@plt+0x237c>
   13540:	mov	r3, #0
   13544:	str	r3, [fp, #-8]
   13548:	ldr	r3, [fp, #-16]
   1354c:	add	r3, r3, #60	; 0x3c
   13550:	mov	r0, r3
   13554:	bl	13310 <__assert_fail@plt+0x2148>
   13558:	ldr	r3, [fp, #-8]
   1355c:	mov	r0, r3
   13560:	sub	sp, fp, #4
   13564:	pop	{fp, pc}
   13568:	push	{fp, lr}
   1356c:	add	fp, sp, #4
   13570:	sub	sp, sp, #16
   13574:	str	r0, [fp, #-16]
   13578:	str	r1, [fp, #-20]	; 0xffffffec
   1357c:	ldr	r3, [fp, #-16]
   13580:	ldr	r3, [r3, #48]	; 0x30
   13584:	and	r3, r3, #16
   13588:	cmp	r3, #0
   1358c:	beq	13598 <__assert_fail@plt+0x23d0>
   13590:	ldr	r3, [pc, #96]	; 135f8 <__assert_fail@plt+0x2430>
   13594:	b	1359c <__assert_fail@plt+0x23d4>
   13598:	ldr	r3, [pc, #92]	; 135fc <__assert_fail@plt+0x2434>
   1359c:	str	r3, [fp, #-8]
   135a0:	ldr	r3, [fp, #-16]
   135a4:	ldr	r3, [r3, #48]	; 0x30
   135a8:	and	r3, r3, #512	; 0x200
   135ac:	cmp	r3, #0
   135b0:	beq	135d4 <__assert_fail@plt+0x240c>
   135b4:	ldr	r3, [fp, #-16]
   135b8:	ldr	r3, [r3, #32]
   135bc:	ldr	r2, [fp, #-8]
   135c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   135c4:	mov	r0, r3
   135c8:	bl	1878c <__assert_fail@plt+0x75c4>
   135cc:	mov	r3, r0
   135d0:	b	135e4 <__assert_fail@plt+0x241c>
   135d4:	ldr	r1, [fp, #-8]
   135d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   135dc:	bl	1d234 <__assert_fail@plt+0xc06c>
   135e0:	mov	r3, r0
   135e4:	str	r3, [fp, #-12]
   135e8:	ldr	r3, [fp, #-12]
   135ec:	mov	r0, r3
   135f0:	sub	sp, fp, #4
   135f4:	pop	{fp, pc}
   135f8:	andeq	ip, r8, r0, lsl #18
   135fc:	andeq	r4, r8, r0, lsl #18
   13600:	push	{r4, r5, r6, r7, r8, fp, lr}
   13604:	add	fp, sp, #24
   13608:	sub	sp, sp, #36	; 0x24
   1360c:	str	r0, [fp, #-56]	; 0xffffffc8
   13610:	mov	r7, r1
   13614:	str	r2, [fp, #-60]	; 0xffffffc4
   13618:	mov	r3, #0
   1361c:	str	r3, [fp, #-32]	; 0xffffffe0
   13620:	mov	r3, #0
   13624:	str	r3, [fp, #-36]	; 0xffffffdc
   13628:	bic	r3, r7, #4080	; 0xff0
   1362c:	bic	r3, r3, #15
   13630:	cmp	r3, #0
   13634:	beq	13650 <__assert_fail@plt+0x2488>
   13638:	bl	1109c <__errno_location@plt>
   1363c:	mov	r2, r0
   13640:	mov	r3, #22
   13644:	str	r3, [r2]
   13648:	mov	r3, #0
   1364c:	b	13a64 <__assert_fail@plt+0x289c>
   13650:	and	r3, r7, #4
   13654:	cmp	r3, #0
   13658:	beq	13680 <__assert_fail@plt+0x24b8>
   1365c:	and	r3, r7, #512	; 0x200
   13660:	cmp	r3, #0
   13664:	beq	13680 <__assert_fail@plt+0x24b8>
   13668:	bl	1109c <__errno_location@plt>
   1366c:	mov	r2, r0
   13670:	mov	r3, #22
   13674:	str	r3, [r2]
   13678:	mov	r3, #0
   1367c:	b	13a64 <__assert_fail@plt+0x289c>
   13680:	and	r3, r7, #18
   13684:	cmp	r3, #0
   13688:	bne	136a4 <__assert_fail@plt+0x24dc>
   1368c:	bl	1109c <__errno_location@plt>
   13690:	mov	r2, r0
   13694:	mov	r3, #22
   13698:	str	r3, [r2]
   1369c:	mov	r3, #0
   136a0:	b	13a64 <__assert_fail@plt+0x289c>
   136a4:	mov	r1, #96	; 0x60
   136a8:	mov	r0, #1
   136ac:	bl	1c558 <__assert_fail@plt+0xb390>
   136b0:	mov	r3, r0
   136b4:	mov	r4, r3
   136b8:	cmp	r4, #0
   136bc:	bne	136c8 <__assert_fail@plt+0x2500>
   136c0:	mov	r3, #0
   136c4:	b	13a64 <__assert_fail@plt+0x289c>
   136c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   136cc:	str	r3, [r4, #44]	; 0x2c
   136d0:	str	r7, [r4, #48]	; 0x30
   136d4:	ldr	r3, [r4, #48]	; 0x30
   136d8:	and	r3, r3, #2
   136dc:	cmp	r3, #0
   136e0:	beq	136fc <__assert_fail@plt+0x2534>
   136e4:	ldr	r3, [r4, #48]	; 0x30
   136e8:	orr	r3, r3, #4
   136ec:	str	r3, [r4, #48]	; 0x30
   136f0:	ldr	r3, [r4, #48]	; 0x30
   136f4:	bic	r3, r3, #512	; 0x200
   136f8:	str	r3, [r4, #48]	; 0x30
   136fc:	mvn	r3, #99	; 0x63
   13700:	str	r3, [r4, #32]
   13704:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13708:	bl	15d74 <__assert_fail@plt+0x4bac>
   1370c:	str	r0, [fp, #-44]	; 0xffffffd4
   13710:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13714:	cmp	r3, #4096	; 0x1000
   13718:	movcs	r3, r3
   1371c:	movcc	r3, #4096	; 0x1000
   13720:	mov	r1, r3
   13724:	mov	r0, r4
   13728:	bl	15b4c <__assert_fail@plt+0x4984>
   1372c:	mov	r3, r0
   13730:	eor	r3, r3, #1
   13734:	uxtb	r3, r3
   13738:	cmp	r3, #0
   1373c:	bne	13a54 <__assert_fail@plt+0x288c>
   13740:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13744:	ldr	r3, [r3]
   13748:	cmp	r3, #0
   1374c:	beq	1377c <__assert_fail@plt+0x25b4>
   13750:	mov	r2, #0
   13754:	ldr	r1, [pc, #788]	; 13a70 <__assert_fail@plt+0x28a8>
   13758:	mov	r0, r4
   1375c:	bl	15a48 <__assert_fail@plt+0x4880>
   13760:	str	r0, [fp, #-32]	; 0xffffffe0
   13764:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13768:	cmp	r3, #0
   1376c:	beq	13a40 <__assert_fail@plt+0x2878>
   13770:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13774:	mvn	r2, #0
   13778:	str	r2, [r3, #48]	; 0x30
   1377c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13780:	cmp	r3, #0
   13784:	beq	13798 <__assert_fail@plt+0x25d0>
   13788:	ldr	r3, [r4, #48]	; 0x30
   1378c:	and	r3, r3, #1024	; 0x400
   13790:	cmp	r3, #0
   13794:	beq	137a0 <__assert_fail@plt+0x25d8>
   13798:	mov	r3, #1
   1379c:	b	137a4 <__assert_fail@plt+0x25dc>
   137a0:	mov	r3, #0
   137a4:	strb	r3, [fp, #-45]	; 0xffffffd3
   137a8:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   137ac:	and	r3, r3, #1
   137b0:	strb	r3, [fp, #-45]	; 0xffffffd3
   137b4:	mov	r6, #0
   137b8:	mov	r8, #0
   137bc:	b	1391c <__assert_fail@plt+0x2754>
   137c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   137c4:	ldr	r3, [r3]
   137c8:	mov	r0, r3
   137cc:	bl	1106c <strlen@plt>
   137d0:	str	r0, [fp, #-40]	; 0xffffffd8
   137d4:	and	r3, r7, #2048	; 0x800
   137d8:	cmp	r3, #0
   137dc:	bne	1384c <__assert_fail@plt+0x2684>
   137e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   137e4:	ldr	r3, [r3]
   137e8:	str	r3, [fp, #-52]	; 0xffffffcc
   137ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   137f0:	cmp	r3, #2
   137f4:	bls	1384c <__assert_fail@plt+0x2684>
   137f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   137fc:	sub	r3, r3, #1
   13800:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13804:	add	r3, r2, r3
   13808:	ldrb	r3, [r3]
   1380c:	cmp	r3, #47	; 0x2f
   13810:	bne	1384c <__assert_fail@plt+0x2684>
   13814:	b	13824 <__assert_fail@plt+0x265c>
   13818:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1381c:	sub	r3, r3, #1
   13820:	str	r3, [fp, #-40]	; 0xffffffd8
   13824:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13828:	cmp	r3, #1
   1382c:	bls	1384c <__assert_fail@plt+0x2684>
   13830:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13834:	sub	r3, r3, #2
   13838:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1383c:	add	r3, r2, r3
   13840:	ldrb	r3, [r3]
   13844:	cmp	r3, #47	; 0x2f
   13848:	beq	13818 <__assert_fail@plt+0x2650>
   1384c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13850:	ldr	r3, [r3]
   13854:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13858:	mov	r1, r3
   1385c:	mov	r0, r4
   13860:	bl	15a48 <__assert_fail@plt+0x4880>
   13864:	mov	r5, r0
   13868:	cmp	r5, #0
   1386c:	beq	13a18 <__assert_fail@plt+0x2850>
   13870:	mov	r3, #0
   13874:	str	r3, [r5, #48]	; 0x30
   13878:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1387c:	str	r3, [r5, #4]
   13880:	add	r3, r5, #168	; 0xa8
   13884:	str	r3, [r5, #24]
   13888:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   1388c:	cmp	r3, #0
   13890:	beq	138b4 <__assert_fail@plt+0x26ec>
   13894:	cmp	r6, #0
   13898:	beq	138b4 <__assert_fail@plt+0x26ec>
   1389c:	mov	r3, #11
   138a0:	strh	r3, [r5, #56]	; 0x38
   138a4:	mov	r1, #1
   138a8:	mov	r0, r5
   138ac:	bl	1336c <__assert_fail@plt+0x21a4>
   138b0:	b	138cc <__assert_fail@plt+0x2704>
   138b4:	mov	r2, #0
   138b8:	mov	r1, r5
   138bc:	mov	r0, r4
   138c0:	bl	156d0 <__assert_fail@plt+0x4508>
   138c4:	mov	r3, r0
   138c8:	strh	r3, [r5, #56]	; 0x38
   138cc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   138d0:	cmp	r3, #0
   138d4:	beq	138e4 <__assert_fail@plt+0x271c>
   138d8:	str	r6, [r5, #8]
   138dc:	mov	r6, r5
   138e0:	b	1390c <__assert_fail@plt+0x2744>
   138e4:	mov	r3, #0
   138e8:	str	r3, [r5, #8]
   138ec:	cmp	r6, #0
   138f0:	bne	13900 <__assert_fail@plt+0x2738>
   138f4:	mov	r6, r5
   138f8:	str	r6, [fp, #-36]	; 0xffffffdc
   138fc:	b	1390c <__assert_fail@plt+0x2744>
   13900:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13904:	str	r5, [r3, #8]
   13908:	str	r5, [fp, #-36]	; 0xffffffdc
   1390c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13910:	add	r3, r3, #4
   13914:	str	r3, [fp, #-56]	; 0xffffffc8
   13918:	add	r8, r8, #1
   1391c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13920:	ldr	r3, [r3]
   13924:	cmp	r3, #0
   13928:	bne	137c0 <__assert_fail@plt+0x25f8>
   1392c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13930:	cmp	r3, #0
   13934:	beq	13954 <__assert_fail@plt+0x278c>
   13938:	cmp	r8, #1
   1393c:	bls	13954 <__assert_fail@plt+0x278c>
   13940:	mov	r2, r8
   13944:	mov	r1, r6
   13948:	mov	r0, r4
   1394c:	bl	15900 <__assert_fail@plt+0x4738>
   13950:	mov	r6, r0
   13954:	mov	r2, #0
   13958:	ldr	r1, [pc, #272]	; 13a70 <__assert_fail@plt+0x28a8>
   1395c:	mov	r0, r4
   13960:	bl	15a48 <__assert_fail@plt+0x4880>
   13964:	mov	r3, r0
   13968:	str	r3, [r4]
   1396c:	ldr	r3, [r4]
   13970:	cmp	r3, #0
   13974:	beq	13a20 <__assert_fail@plt+0x2858>
   13978:	ldr	r3, [r4]
   1397c:	str	r6, [r3, #8]
   13980:	ldr	r3, [r4]
   13984:	mov	r2, #9
   13988:	strh	r2, [r3, #56]	; 0x38
   1398c:	ldr	r3, [r4]
   13990:	mov	r2, #1
   13994:	str	r2, [r3, #48]	; 0x30
   13998:	mov	r0, r4
   1399c:	bl	12f58 <__assert_fail@plt+0x1d90>
   139a0:	mov	r3, r0
   139a4:	eor	r3, r3, #1
   139a8:	uxtb	r3, r3
   139ac:	cmp	r3, #0
   139b0:	bne	13a28 <__assert_fail@plt+0x2860>
   139b4:	ldr	r3, [r4, #48]	; 0x30
   139b8:	and	r3, r3, #4
   139bc:	cmp	r3, #0
   139c0:	bne	13a00 <__assert_fail@plt+0x2838>
   139c4:	ldr	r3, [r4, #48]	; 0x30
   139c8:	and	r3, r3, #512	; 0x200
   139cc:	cmp	r3, #0
   139d0:	bne	13a00 <__assert_fail@plt+0x2838>
   139d4:	ldr	r1, [pc, #152]	; 13a74 <__assert_fail@plt+0x28ac>
   139d8:	mov	r0, r4
   139dc:	bl	13568 <__assert_fail@plt+0x23a0>
   139e0:	mov	r3, r0
   139e4:	str	r3, [r4, #28]
   139e8:	ldr	r3, [r4, #28]
   139ec:	cmp	r3, #0
   139f0:	bge	13a00 <__assert_fail@plt+0x2838>
   139f4:	ldr	r3, [r4, #48]	; 0x30
   139f8:	orr	r3, r3, #4
   139fc:	str	r3, [r4, #48]	; 0x30
   13a00:	add	r3, r4, #60	; 0x3c
   13a04:	mvn	r1, #0
   13a08:	mov	r0, r3
   13a0c:	bl	17bf8 <__assert_fail@plt+0x6a30>
   13a10:	mov	r3, r4
   13a14:	b	13a64 <__assert_fail@plt+0x289c>
   13a18:	nop			; (mov r0, r0)
   13a1c:	b	13a2c <__assert_fail@plt+0x2864>
   13a20:	nop			; (mov r0, r0)
   13a24:	b	13a2c <__assert_fail@plt+0x2864>
   13a28:	nop			; (mov r0, r0)
   13a2c:	mov	r0, r6
   13a30:	bl	15b04 <__assert_fail@plt+0x493c>
   13a34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13a38:	bl	1d358 <__assert_fail@plt+0xc190>
   13a3c:	b	13a44 <__assert_fail@plt+0x287c>
   13a40:	nop			; (mov r0, r0)
   13a44:	ldr	r3, [r4, #24]
   13a48:	mov	r0, r3
   13a4c:	bl	1d358 <__assert_fail@plt+0xc190>
   13a50:	b	13a58 <__assert_fail@plt+0x2890>
   13a54:	nop			; (mov r0, r0)
   13a58:	mov	r0, r4
   13a5c:	bl	1d358 <__assert_fail@plt+0xc190>
   13a60:	mov	r3, #0
   13a64:	mov	r0, r3
   13a68:	sub	sp, fp, #24
   13a6c:	pop	{r4, r5, r6, r7, r8, fp, pc}
   13a70:	andeq	pc, r1, r8, rrx
   13a74:	andeq	pc, r1, ip, rrx
   13a78:	push	{r4, r5, r6, fp, lr}
   13a7c:	add	fp, sp, #16
   13a80:	sub	sp, sp, #12
   13a84:	str	r0, [fp, #-24]	; 0xffffffe8
   13a88:	mov	r4, r1
   13a8c:	ldr	r3, [r4, #52]	; 0x34
   13a90:	str	r3, [r4, #40]	; 0x28
   13a94:	ldr	r6, [r4, #40]	; 0x28
   13a98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a9c:	ldr	r3, [r3, #24]
   13aa0:	add	r1, r4, #168	; 0xa8
   13aa4:	add	r2, r6, #1
   13aa8:	mov	r0, r3
   13aac:	bl	10f1c <memmove@plt>
   13ab0:	add	r3, r4, #168	; 0xa8
   13ab4:	mov	r1, #47	; 0x2f
   13ab8:	mov	r0, r3
   13abc:	bl	110fc <strrchr@plt>
   13ac0:	mov	r5, r0
   13ac4:	cmp	r5, #0
   13ac8:	beq	13b10 <__assert_fail@plt+0x2948>
   13acc:	add	r3, r4, #168	; 0xa8
   13ad0:	cmp	r3, r5
   13ad4:	bne	13ae8 <__assert_fail@plt+0x2920>
   13ad8:	add	r3, r5, #1
   13adc:	ldrb	r3, [r3]
   13ae0:	cmp	r3, #0
   13ae4:	beq	13b10 <__assert_fail@plt+0x2948>
   13ae8:	add	r5, r5, #1
   13aec:	mov	r0, r5
   13af0:	bl	1106c <strlen@plt>
   13af4:	mov	r6, r0
   13af8:	add	r3, r4, #168	; 0xa8
   13afc:	add	r2, r6, #1
   13b00:	mov	r1, r5
   13b04:	mov	r0, r3
   13b08:	bl	10f1c <memmove@plt>
   13b0c:	str	r6, [r4, #52]	; 0x34
   13b10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b14:	ldr	r3, [r3, #24]
   13b18:	str	r3, [r4, #28]
   13b1c:	ldr	r3, [r4, #28]
   13b20:	str	r3, [r4, #24]
   13b24:	nop			; (mov r0, r0)
   13b28:	sub	sp, fp, #16
   13b2c:	pop	{r4, r5, r6, fp, pc}
   13b30:	push	{r4, r5, fp, lr}
   13b34:	add	fp, sp, #12
   13b38:	sub	sp, sp, #16
   13b3c:	str	r0, [fp, #-24]	; 0xffffffe8
   13b40:	mov	r3, #0
   13b44:	str	r3, [fp, #-16]
   13b48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b4c:	ldr	r3, [r3]
   13b50:	cmp	r3, #0
   13b54:	beq	13ba0 <__assert_fail@plt+0x29d8>
   13b58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b5c:	ldr	r4, [r3]
   13b60:	b	13b8c <__assert_fail@plt+0x29c4>
   13b64:	mov	r5, r4
   13b68:	ldr	r3, [r4, #8]
   13b6c:	cmp	r3, #0
   13b70:	beq	13b7c <__assert_fail@plt+0x29b4>
   13b74:	ldr	r3, [r4, #8]
   13b78:	b	13b80 <__assert_fail@plt+0x29b8>
   13b7c:	ldr	r3, [r4, #4]
   13b80:	mov	r4, r3
   13b84:	mov	r0, r5
   13b88:	bl	1d358 <__assert_fail@plt+0xc190>
   13b8c:	ldr	r3, [r4, #48]	; 0x30
   13b90:	cmp	r3, #0
   13b94:	bge	13b64 <__assert_fail@plt+0x299c>
   13b98:	mov	r0, r4
   13b9c:	bl	1d358 <__assert_fail@plt+0xc190>
   13ba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ba4:	ldr	r3, [r3, #4]
   13ba8:	cmp	r3, #0
   13bac:	beq	13bc0 <__assert_fail@plt+0x29f8>
   13bb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13bb4:	ldr	r3, [r3, #4]
   13bb8:	mov	r0, r3
   13bbc:	bl	15b04 <__assert_fail@plt+0x493c>
   13bc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13bc4:	ldr	r3, [r3, #8]
   13bc8:	mov	r0, r3
   13bcc:	bl	1d358 <__assert_fail@plt+0xc190>
   13bd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13bd4:	ldr	r3, [r3, #24]
   13bd8:	mov	r0, r3
   13bdc:	bl	1d358 <__assert_fail@plt+0xc190>
   13be0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13be4:	ldr	r3, [r3, #48]	; 0x30
   13be8:	and	r3, r3, #512	; 0x200
   13bec:	cmp	r3, #0
   13bf0:	beq	13c34 <__assert_fail@plt+0x2a6c>
   13bf4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13bf8:	ldr	r3, [r3, #32]
   13bfc:	cmp	r3, #0
   13c00:	blt	13cac <__assert_fail@plt+0x2ae4>
   13c04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c08:	ldr	r3, [r3, #32]
   13c0c:	mov	r0, r3
   13c10:	bl	111a4 <close@plt>
   13c14:	mov	r3, r0
   13c18:	cmp	r3, #0
   13c1c:	beq	13cac <__assert_fail@plt+0x2ae4>
   13c20:	bl	1109c <__errno_location@plt>
   13c24:	mov	r3, r0
   13c28:	ldr	r3, [r3]
   13c2c:	str	r3, [fp, #-16]
   13c30:	b	13cac <__assert_fail@plt+0x2ae4>
   13c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c38:	ldr	r3, [r3, #48]	; 0x30
   13c3c:	and	r3, r3, #4
   13c40:	cmp	r3, #0
   13c44:	bne	13cac <__assert_fail@plt+0x2ae4>
   13c48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c4c:	ldr	r3, [r3, #28]
   13c50:	mov	r0, r3
   13c54:	bl	11144 <fchdir@plt>
   13c58:	mov	r3, r0
   13c5c:	cmp	r3, #0
   13c60:	beq	13c74 <__assert_fail@plt+0x2aac>
   13c64:	bl	1109c <__errno_location@plt>
   13c68:	mov	r3, r0
   13c6c:	ldr	r3, [r3]
   13c70:	str	r3, [fp, #-16]
   13c74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c78:	ldr	r3, [r3, #28]
   13c7c:	mov	r0, r3
   13c80:	bl	111a4 <close@plt>
   13c84:	mov	r3, r0
   13c88:	cmp	r3, #0
   13c8c:	beq	13cac <__assert_fail@plt+0x2ae4>
   13c90:	ldr	r3, [fp, #-16]
   13c94:	cmp	r3, #0
   13c98:	bne	13cac <__assert_fail@plt+0x2ae4>
   13c9c:	bl	1109c <__errno_location@plt>
   13ca0:	mov	r3, r0
   13ca4:	ldr	r3, [r3]
   13ca8:	str	r3, [fp, #-16]
   13cac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cb0:	add	r3, r3, #60	; 0x3c
   13cb4:	mov	r0, r3
   13cb8:	bl	13310 <__assert_fail@plt+0x2148>
   13cbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cc0:	ldr	r3, [r3, #52]	; 0x34
   13cc4:	cmp	r3, #0
   13cc8:	beq	13cdc <__assert_fail@plt+0x2b14>
   13ccc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cd0:	ldr	r3, [r3, #52]	; 0x34
   13cd4:	mov	r0, r3
   13cd8:	bl	16f1c <__assert_fail@plt+0x5d54>
   13cdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13ce0:	bl	132a4 <__assert_fail@plt+0x20dc>
   13ce4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13ce8:	bl	1d358 <__assert_fail@plt+0xc190>
   13cec:	ldr	r3, [fp, #-16]
   13cf0:	cmp	r3, #0
   13cf4:	beq	13d10 <__assert_fail@plt+0x2b48>
   13cf8:	bl	1109c <__errno_location@plt>
   13cfc:	mov	r2, r0
   13d00:	ldr	r3, [fp, #-16]
   13d04:	str	r3, [r2]
   13d08:	mvn	r3, #0
   13d0c:	b	13d14 <__assert_fail@plt+0x2b4c>
   13d10:	mov	r3, #0
   13d14:	mov	r0, r3
   13d18:	sub	sp, fp, #12
   13d1c:	pop	{r4, r5, fp, pc}
   13d20:	push	{fp, lr}
   13d24:	add	fp, sp, #4
   13d28:	sub	sp, sp, #24
   13d2c:	str	r0, [fp, #-24]	; 0xffffffe8
   13d30:	str	r1, [fp, #-28]	; 0xffffffe4
   13d34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d38:	str	r3, [fp, #-8]
   13d3c:	ldr	r3, [fp, #-8]
   13d40:	ldrd	r2, [r3]
   13d44:	strd	r2, [fp, #-20]	; 0xffffffec
   13d48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13d4c:	mov	r2, r3
   13d50:	mov	r3, #0
   13d54:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13d58:	bl	1e330 <__assert_fail@plt+0xd168>
   13d5c:	mov	r3, r2
   13d60:	mov	r0, r3
   13d64:	sub	sp, fp, #4
   13d68:	pop	{fp, pc}
   13d6c:	push	{fp}		; (str fp, [sp, #-4]!)
   13d70:	add	fp, sp, #0
   13d74:	sub	sp, sp, #20
   13d78:	str	r0, [fp, #-16]
   13d7c:	str	r1, [fp, #-20]	; 0xffffffec
   13d80:	ldr	r3, [fp, #-16]
   13d84:	str	r3, [fp, #-8]
   13d88:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d8c:	str	r3, [fp, #-12]
   13d90:	ldr	r3, [fp, #-8]
   13d94:	ldrd	r0, [r3]
   13d98:	ldr	r3, [fp, #-12]
   13d9c:	ldrd	r2, [r3]
   13da0:	cmp	r1, r3
   13da4:	cmpeq	r0, r2
   13da8:	moveq	r3, #1
   13dac:	movne	r3, #0
   13db0:	uxtb	r3, r3
   13db4:	mov	r0, r3
   13db8:	add	sp, fp, #0
   13dbc:	pop	{fp}		; (ldr fp, [sp], #4)
   13dc0:	bx	lr
   13dc4:	push	{fp, lr}
   13dc8:	add	fp, sp, #4
   13dcc:	sub	sp, sp, #136	; 0x88
   13dd0:	str	r0, [fp, #-128]	; 0xffffff80
   13dd4:	str	r1, [fp, #-132]	; 0xffffff7c
   13dd8:	ldr	r3, [fp, #-128]	; 0xffffff80
   13ddc:	ldr	r3, [r3, #44]	; 0x2c
   13de0:	str	r3, [fp, #-12]
   13de4:	ldr	r3, [fp, #-12]
   13de8:	ldr	r3, [r3, #52]	; 0x34
   13dec:	str	r3, [fp, #-8]
   13df0:	ldr	r3, [fp, #-12]
   13df4:	ldr	r3, [r3, #48]	; 0x30
   13df8:	and	r3, r3, #512	; 0x200
   13dfc:	cmp	r3, #0
   13e00:	bne	13e0c <__assert_fail@plt+0x2c44>
   13e04:	mov	r3, #0
   13e08:	b	13f44 <__assert_fail@plt+0x2d7c>
   13e0c:	ldr	r3, [fp, #-8]
   13e10:	cmp	r3, #0
   13e14:	bne	13e50 <__assert_fail@plt+0x2c88>
   13e18:	ldr	r3, [pc, #304]	; 13f50 <__assert_fail@plt+0x2d88>
   13e1c:	str	r3, [sp]
   13e20:	ldr	r3, [pc, #300]	; 13f54 <__assert_fail@plt+0x2d8c>
   13e24:	ldr	r2, [pc, #300]	; 13f58 <__assert_fail@plt+0x2d90>
   13e28:	mov	r1, #0
   13e2c:	mov	r0, #13
   13e30:	bl	16c40 <__assert_fail@plt+0x5a78>
   13e34:	mov	r3, r0
   13e38:	mov	r2, r3
   13e3c:	ldr	r3, [fp, #-12]
   13e40:	str	r2, [r3, #52]	; 0x34
   13e44:	ldr	r3, [fp, #-12]
   13e48:	ldr	r3, [r3, #52]	; 0x34
   13e4c:	str	r3, [fp, #-8]
   13e50:	ldr	r3, [fp, #-8]
   13e54:	cmp	r3, #0
   13e58:	beq	13e94 <__assert_fail@plt+0x2ccc>
   13e5c:	ldr	r3, [fp, #-128]	; 0xffffff80
   13e60:	ldrd	r2, [r3, #64]	; 0x40
   13e64:	strd	r2, [fp, #-124]	; 0xffffff84
   13e68:	sub	r3, fp, #124	; 0x7c
   13e6c:	mov	r1, r3
   13e70:	ldr	r0, [fp, #-8]
   13e74:	bl	163f4 <__assert_fail@plt+0x522c>
   13e78:	str	r0, [fp, #-16]
   13e7c:	ldr	r3, [fp, #-16]
   13e80:	cmp	r3, #0
   13e84:	beq	13e94 <__assert_fail@plt+0x2ccc>
   13e88:	ldr	r3, [fp, #-16]
   13e8c:	ldr	r3, [r3, #8]
   13e90:	b	13f44 <__assert_fail@plt+0x2d7c>
   13e94:	ldr	r3, [fp, #-132]	; 0xffffff7c
   13e98:	cmp	r3, #0
   13e9c:	blt	13ebc <__assert_fail@plt+0x2cf4>
   13ea0:	sub	r3, fp, #108	; 0x6c
   13ea4:	mov	r1, r3
   13ea8:	ldr	r0, [fp, #-132]	; 0xffffff7c
   13eac:	bl	10ec8 <fstatfs64@plt>
   13eb0:	mov	r3, r0
   13eb4:	cmp	r3, #0
   13eb8:	beq	13ec4 <__assert_fail@plt+0x2cfc>
   13ebc:	mov	r3, #0
   13ec0:	b	13f44 <__assert_fail@plt+0x2d7c>
   13ec4:	ldr	r3, [fp, #-8]
   13ec8:	cmp	r3, #0
   13ecc:	beq	13f40 <__assert_fail@plt+0x2d78>
   13ed0:	mov	r0, #16
   13ed4:	bl	1c61c <__assert_fail@plt+0xb454>
   13ed8:	mov	r3, r0
   13edc:	str	r3, [fp, #-20]	; 0xffffffec
   13ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ee4:	cmp	r3, #0
   13ee8:	beq	13f40 <__assert_fail@plt+0x2d78>
   13eec:	ldr	r3, [fp, #-128]	; 0xffffff80
   13ef0:	ldrd	r2, [r3, #64]	; 0x40
   13ef4:	ldr	r1, [fp, #-20]	; 0xffffffec
   13ef8:	strd	r2, [r1]
   13efc:	ldr	r2, [fp, #-108]	; 0xffffff94
   13f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f04:	str	r2, [r3, #8]
   13f08:	ldr	r1, [fp, #-20]	; 0xffffffec
   13f0c:	ldr	r0, [fp, #-8]
   13f10:	bl	17988 <__assert_fail@plt+0x67c0>
   13f14:	str	r0, [fp, #-16]
   13f18:	ldr	r3, [fp, #-16]
   13f1c:	cmp	r3, #0
   13f20:	beq	13f38 <__assert_fail@plt+0x2d70>
   13f24:	ldr	r2, [fp, #-16]
   13f28:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f2c:	cmp	r2, r3
   13f30:	beq	13f40 <__assert_fail@plt+0x2d78>
   13f34:	bl	11198 <abort@plt>
   13f38:	ldr	r0, [fp, #-20]	; 0xffffffec
   13f3c:	bl	1d358 <__assert_fail@plt+0xc190>
   13f40:	ldr	r3, [fp, #-108]	; 0xffffff94
   13f44:	mov	r0, r3
   13f48:	sub	sp, fp, #4
   13f4c:	pop	{fp, pc}
   13f50:	andeq	sp, r1, r8, asr r3
   13f54:	andeq	r3, r1, ip, ror #26
   13f58:	andeq	r3, r1, r0, lsr #26
   13f5c:	push	{fp, lr}
   13f60:	add	fp, sp, #4
   13f64:	sub	sp, sp, #8
   13f68:	str	r0, [fp, #-8]
   13f6c:	str	r1, [fp, #-12]
   13f70:	ldr	r1, [fp, #-12]
   13f74:	ldr	r0, [fp, #-8]
   13f78:	bl	13dc4 <__assert_fail@plt+0x2bfc>
   13f7c:	mov	r3, r0
   13f80:	ldr	r2, [pc, #52]	; 13fbc <__assert_fail@plt+0x2df4>
   13f84:	cmp	r3, r2
   13f88:	beq	13fa4 <__assert_fail@plt+0x2ddc>
   13f8c:	ldr	r2, [pc, #44]	; 13fc0 <__assert_fail@plt+0x2df8>
   13f90:	cmp	r3, r2
   13f94:	beq	13fa4 <__assert_fail@plt+0x2ddc>
   13f98:	ldr	r2, [pc, #36]	; 13fc4 <__assert_fail@plt+0x2dfc>
   13f9c:	cmp	r3, r2
   13fa0:	bne	13fac <__assert_fail@plt+0x2de4>
   13fa4:	mov	r3, #0
   13fa8:	b	13fb0 <__assert_fail@plt+0x2de8>
   13fac:	mov	r3, #1
   13fb0:	mov	r0, r3
   13fb4:	sub	sp, fp, #4
   13fb8:	pop	{fp, pc}
   13fbc:	andeq	r6, r0, r9, ror #18
   13fc0:			; <UNDEFINED> instruction: 0x01021994
   13fc4:			; <UNDEFINED> instruction: 0xff534d42
   13fc8:	push	{fp, lr}
   13fcc:	add	fp, sp, #4
   13fd0:	sub	sp, sp, #8
   13fd4:	str	r0, [fp, #-8]
   13fd8:	str	r1, [fp, #-12]
   13fdc:	ldr	r1, [fp, #-12]
   13fe0:	ldr	r0, [fp, #-8]
   13fe4:	bl	13dc4 <__assert_fail@plt+0x2bfc>
   13fe8:	mov	r3, r0
   13fec:	ldr	r2, [pc, #88]	; 1404c <__assert_fail@plt+0x2e84>
   13ff0:	cmp	r3, r2
   13ff4:	beq	14034 <__assert_fail@plt+0x2e6c>
   13ff8:	ldr	r2, [pc, #76]	; 1404c <__assert_fail@plt+0x2e84>
   13ffc:	cmp	r3, r2
   14000:	bgt	1401c <__assert_fail@plt+0x2e54>
   14004:	ldr	r2, [pc, #68]	; 14050 <__assert_fail@plt+0x2e88>
   14008:	cmp	r3, r2
   1400c:	beq	14034 <__assert_fail@plt+0x2e6c>
   14010:	cmp	r3, #0
   14014:	beq	14034 <__assert_fail@plt+0x2e6c>
   14018:	b	1403c <__assert_fail@plt+0x2e74>
   1401c:	ldr	r2, [pc, #48]	; 14054 <__assert_fail@plt+0x2e8c>
   14020:	cmp	r3, r2
   14024:	beq	14034 <__assert_fail@plt+0x2e6c>
   14028:	ldr	r2, [pc, #40]	; 14058 <__assert_fail@plt+0x2e90>
   1402c:	cmp	r3, r2
   14030:	bne	1403c <__assert_fail@plt+0x2e74>
   14034:	mov	r3, #0
   14038:	b	14040 <__assert_fail@plt+0x2e78>
   1403c:	mov	r3, #1
   14040:	mov	r0, r3
   14044:	sub	sp, fp, #4
   14048:	pop	{fp, pc}
   1404c:	andeq	r6, r0, r9, ror #18
   14050:			; <UNDEFINED> instruction: 0xff534d42
   14054:	andeq	r9, r0, r0, lsr #31
   14058:	movtpl	r4, #24911	; 0x614f
   1405c:	push	{r4, r5, r6, r7, fp, lr}
   14060:	add	fp, sp, #20
   14064:	mov	r5, r0
   14068:	ldr	r3, [r5]
   1406c:	cmp	r3, #0
   14070:	beq	14084 <__assert_fail@plt+0x2ebc>
   14074:	ldr	r3, [r5, #48]	; 0x30
   14078:	and	r3, r3, #8192	; 0x2000
   1407c:	cmp	r3, #0
   14080:	beq	1408c <__assert_fail@plt+0x2ec4>
   14084:	mov	r3, #0
   14088:	b	147c0 <__assert_fail@plt+0x35f8>
   1408c:	ldr	r4, [r5]
   14090:	ldrh	r6, [r4, #60]	; 0x3c
   14094:	mov	r3, #3
   14098:	strh	r3, [r4, #60]	; 0x3c
   1409c:	cmp	r6, #1
   140a0:	bne	140c4 <__assert_fail@plt+0x2efc>
   140a4:	mov	r2, #0
   140a8:	mov	r1, r4
   140ac:	mov	r0, r5
   140b0:	bl	156d0 <__assert_fail@plt+0x4508>
   140b4:	mov	r3, r0
   140b8:	strh	r3, [r4, #56]	; 0x38
   140bc:	mov	r3, r4
   140c0:	b	147c0 <__assert_fail@plt+0x35f8>
   140c4:	cmp	r6, #2
   140c8:	bne	14168 <__assert_fail@plt+0x2fa0>
   140cc:	ldrh	r3, [r4, #56]	; 0x38
   140d0:	cmp	r3, #12
   140d4:	beq	140e4 <__assert_fail@plt+0x2f1c>
   140d8:	ldrh	r3, [r4, #56]	; 0x38
   140dc:	cmp	r3, #13
   140e0:	bne	14168 <__assert_fail@plt+0x2fa0>
   140e4:	mov	r2, #1
   140e8:	mov	r1, r4
   140ec:	mov	r0, r5
   140f0:	bl	156d0 <__assert_fail@plt+0x4508>
   140f4:	mov	r3, r0
   140f8:	strh	r3, [r4, #56]	; 0x38
   140fc:	ldrh	r3, [r4, #56]	; 0x38
   14100:	cmp	r3, #1
   14104:	bne	14518 <__assert_fail@plt+0x3350>
   14108:	ldr	r3, [r5, #48]	; 0x30
   1410c:	and	r3, r3, #4
   14110:	cmp	r3, #0
   14114:	bne	14518 <__assert_fail@plt+0x3350>
   14118:	ldr	r1, [pc, #1704]	; 147c8 <__assert_fail@plt+0x3600>
   1411c:	mov	r0, r5
   14120:	bl	13568 <__assert_fail@plt+0x23a0>
   14124:	mov	r3, r0
   14128:	str	r3, [r4, #36]	; 0x24
   1412c:	ldr	r3, [r4, #36]	; 0x24
   14130:	cmp	r3, #0
   14134:	bge	14154 <__assert_fail@plt+0x2f8c>
   14138:	bl	1109c <__errno_location@plt>
   1413c:	mov	r3, r0
   14140:	ldr	r3, [r3]
   14144:	str	r3, [r4, #32]
   14148:	mov	r3, #7
   1414c:	strh	r3, [r4, #56]	; 0x38
   14150:	b	14518 <__assert_fail@plt+0x3350>
   14154:	ldrh	r3, [r4, #58]	; 0x3a
   14158:	orr	r3, r3, #2
   1415c:	uxth	r3, r3
   14160:	strh	r3, [r4, #58]	; 0x3a
   14164:	b	14518 <__assert_fail@plt+0x3350>
   14168:	ldrh	r3, [r4, #56]	; 0x38
   1416c:	cmp	r3, #1
   14170:	bne	14320 <__assert_fail@plt+0x3158>
   14174:	cmp	r6, #4
   14178:	beq	141a0 <__assert_fail@plt+0x2fd8>
   1417c:	ldr	r3, [r5, #48]	; 0x30
   14180:	and	r3, r3, #64	; 0x40
   14184:	cmp	r3, #0
   14188:	beq	141f8 <__assert_fail@plt+0x3030>
   1418c:	ldrd	r0, [r4, #64]	; 0x40
   14190:	ldrd	r2, [r5, #16]
   14194:	cmp	r1, r3
   14198:	cmpeq	r0, r2
   1419c:	beq	141f8 <__assert_fail@plt+0x3030>
   141a0:	ldrh	r3, [r4, #58]	; 0x3a
   141a4:	and	r3, r3, #2
   141a8:	cmp	r3, #0
   141ac:	beq	141bc <__assert_fail@plt+0x2ff4>
   141b0:	ldr	r3, [r4, #36]	; 0x24
   141b4:	mov	r0, r3
   141b8:	bl	111a4 <close@plt>
   141bc:	ldr	r3, [r5, #4]
   141c0:	cmp	r3, #0
   141c4:	beq	141dc <__assert_fail@plt+0x3014>
   141c8:	ldr	r3, [r5, #4]
   141cc:	mov	r0, r3
   141d0:	bl	15b04 <__assert_fail@plt+0x493c>
   141d4:	mov	r3, #0
   141d8:	str	r3, [r5, #4]
   141dc:	mov	r3, #6
   141e0:	strh	r3, [r4, #56]	; 0x38
   141e4:	mov	r1, r4
   141e8:	mov	r0, r5
   141ec:	bl	13164 <__assert_fail@plt+0x1f9c>
   141f0:	mov	r3, r4
   141f4:	b	147c0 <__assert_fail@plt+0x35f8>
   141f8:	ldr	r3, [r5, #4]
   141fc:	cmp	r3, #0
   14200:	beq	14234 <__assert_fail@plt+0x306c>
   14204:	ldr	r3, [r5, #48]	; 0x30
   14208:	and	r3, r3, #4096	; 0x1000
   1420c:	cmp	r3, #0
   14210:	beq	14234 <__assert_fail@plt+0x306c>
   14214:	ldr	r3, [r5, #48]	; 0x30
   14218:	bic	r3, r3, #4096	; 0x1000
   1421c:	str	r3, [r5, #48]	; 0x30
   14220:	ldr	r3, [r5, #4]
   14224:	mov	r0, r3
   14228:	bl	15b04 <__assert_fail@plt+0x493c>
   1422c:	mov	r3, #0
   14230:	str	r3, [r5, #4]
   14234:	ldr	r3, [r5, #4]
   14238:	cmp	r3, #0
   1423c:	beq	142a4 <__assert_fail@plt+0x30dc>
   14240:	ldr	r3, [r4, #24]
   14244:	mvn	r2, #0
   14248:	mov	r1, r4
   1424c:	mov	r0, r5
   14250:	bl	15dec <__assert_fail@plt+0x4c24>
   14254:	mov	r3, r0
   14258:	cmp	r3, #0
   1425c:	beq	14310 <__assert_fail@plt+0x3148>
   14260:	bl	1109c <__errno_location@plt>
   14264:	mov	r3, r0
   14268:	ldr	r3, [r3]
   1426c:	str	r3, [r4, #32]
   14270:	ldrh	r3, [r4, #58]	; 0x3a
   14274:	orr	r3, r3, #1
   14278:	uxth	r3, r3
   1427c:	strh	r3, [r4, #58]	; 0x3a
   14280:	ldr	r4, [r5, #4]
   14284:	b	14298 <__assert_fail@plt+0x30d0>
   14288:	ldr	r3, [r4, #4]
   1428c:	ldr	r3, [r3, #24]
   14290:	str	r3, [r4, #24]
   14294:	ldr	r4, [r4, #8]
   14298:	cmp	r4, #0
   1429c:	bne	14288 <__assert_fail@plt+0x30c0>
   142a0:	b	14310 <__assert_fail@plt+0x3148>
   142a4:	mov	r1, #3
   142a8:	mov	r0, r5
   142ac:	bl	14b98 <__assert_fail@plt+0x39d0>
   142b0:	mov	r3, r0
   142b4:	str	r3, [r5, #4]
   142b8:	ldr	r3, [r5, #4]
   142bc:	cmp	r3, #0
   142c0:	bne	14310 <__assert_fail@plt+0x3148>
   142c4:	ldr	r3, [r5, #48]	; 0x30
   142c8:	and	r3, r3, #8192	; 0x2000
   142cc:	cmp	r3, #0
   142d0:	beq	142dc <__assert_fail@plt+0x3114>
   142d4:	mov	r3, #0
   142d8:	b	147c0 <__assert_fail@plt+0x35f8>
   142dc:	ldr	r3, [r4, #32]
   142e0:	cmp	r3, #0
   142e4:	beq	142fc <__assert_fail@plt+0x3134>
   142e8:	ldrh	r3, [r4, #56]	; 0x38
   142ec:	cmp	r3, #4
   142f0:	beq	142fc <__assert_fail@plt+0x3134>
   142f4:	mov	r3, #7
   142f8:	strh	r3, [r4, #56]	; 0x38
   142fc:	mov	r1, r4
   14300:	mov	r0, r5
   14304:	bl	13164 <__assert_fail@plt+0x1f9c>
   14308:	mov	r3, r4
   1430c:	b	147c0 <__assert_fail@plt+0x35f8>
   14310:	ldr	r4, [r5, #4]
   14314:	mov	r3, #0
   14318:	str	r3, [r5, #4]
   1431c:	b	144a8 <__assert_fail@plt+0x32e0>
   14320:	mov	r6, r4
   14324:	ldr	r3, [r4, #8]
   14328:	cmp	r3, #0
   1432c:	bne	14398 <__assert_fail@plt+0x31d0>
   14330:	ldr	r3, [r4, #4]
   14334:	ldr	r3, [r3, #12]
   14338:	cmp	r3, #0
   1433c:	beq	14398 <__assert_fail@plt+0x31d0>
   14340:	ldr	r4, [r6, #4]
   14344:	str	r4, [r5]
   14348:	ldr	r2, [r5, #24]
   1434c:	ldr	r3, [r4, #40]	; 0x28
   14350:	add	r3, r2, r3
   14354:	mov	r2, #0
   14358:	strb	r2, [r3]
   1435c:	mov	r1, #3
   14360:	mov	r0, r5
   14364:	bl	14b98 <__assert_fail@plt+0x39d0>
   14368:	mov	r4, r0
   1436c:	cmp	r4, #0
   14370:	bne	1438c <__assert_fail@plt+0x31c4>
   14374:	ldr	r3, [r5, #48]	; 0x30
   14378:	and	r3, r3, #8192	; 0x2000
   1437c:	cmp	r3, #0
   14380:	beq	145cc <__assert_fail@plt+0x3404>
   14384:	mov	r3, #0
   14388:	b	147c0 <__assert_fail@plt+0x35f8>
   1438c:	mov	r0, r6
   14390:	bl	1d358 <__assert_fail@plt+0xc190>
   14394:	b	144a8 <__assert_fail@plt+0x32e0>
   14398:	ldr	r4, [r4, #8]
   1439c:	cmp	r4, #0
   143a0:	beq	145d0 <__assert_fail@plt+0x3408>
   143a4:	str	r4, [r5]
   143a8:	mov	r0, r6
   143ac:	bl	1d358 <__assert_fail@plt+0xc190>
   143b0:	ldr	r3, [r4, #48]	; 0x30
   143b4:	cmp	r3, #0
   143b8:	bne	14404 <__assert_fail@plt+0x323c>
   143bc:	mov	r0, r5
   143c0:	bl	13490 <__assert_fail@plt+0x22c8>
   143c4:	mov	r3, r0
   143c8:	cmp	r3, #0
   143cc:	beq	143e4 <__assert_fail@plt+0x321c>
   143d0:	ldr	r3, [r5, #48]	; 0x30
   143d4:	orr	r3, r3, #8192	; 0x2000
   143d8:	str	r3, [r5, #48]	; 0x30
   143dc:	mov	r3, #0
   143e0:	b	147c0 <__assert_fail@plt+0x35f8>
   143e4:	mov	r0, r5
   143e8:	bl	132a4 <__assert_fail@plt+0x20dc>
   143ec:	mov	r1, r4
   143f0:	mov	r0, r5
   143f4:	bl	13a78 <__assert_fail@plt+0x28b0>
   143f8:	mov	r0, r5
   143fc:	bl	12f58 <__assert_fail@plt+0x1d90>
   14400:	b	1451c <__assert_fail@plt+0x3354>
   14404:	ldrh	r3, [r4, #60]	; 0x3c
   14408:	cmp	r3, #4
   1440c:	bne	14414 <__assert_fail@plt+0x324c>
   14410:	b	14320 <__assert_fail@plt+0x3158>
   14414:	ldrh	r3, [r4, #60]	; 0x3c
   14418:	cmp	r3, #2
   1441c:	bne	144a8 <__assert_fail@plt+0x32e0>
   14420:	mov	r2, #1
   14424:	mov	r1, r4
   14428:	mov	r0, r5
   1442c:	bl	156d0 <__assert_fail@plt+0x4508>
   14430:	mov	r3, r0
   14434:	strh	r3, [r4, #56]	; 0x38
   14438:	ldrh	r3, [r4, #56]	; 0x38
   1443c:	cmp	r3, #1
   14440:	bne	144a0 <__assert_fail@plt+0x32d8>
   14444:	ldr	r3, [r5, #48]	; 0x30
   14448:	and	r3, r3, #4
   1444c:	cmp	r3, #0
   14450:	bne	144a0 <__assert_fail@plt+0x32d8>
   14454:	ldr	r1, [pc, #876]	; 147c8 <__assert_fail@plt+0x3600>
   14458:	mov	r0, r5
   1445c:	bl	13568 <__assert_fail@plt+0x23a0>
   14460:	mov	r3, r0
   14464:	str	r3, [r4, #36]	; 0x24
   14468:	ldr	r3, [r4, #36]	; 0x24
   1446c:	cmp	r3, #0
   14470:	bge	14490 <__assert_fail@plt+0x32c8>
   14474:	bl	1109c <__errno_location@plt>
   14478:	mov	r3, r0
   1447c:	ldr	r3, [r3]
   14480:	str	r3, [r4, #32]
   14484:	mov	r3, #7
   14488:	strh	r3, [r4, #56]	; 0x38
   1448c:	b	144a0 <__assert_fail@plt+0x32d8>
   14490:	ldrh	r3, [r4, #58]	; 0x3a
   14494:	orr	r3, r3, #2
   14498:	uxth	r3, r3
   1449c:	strh	r3, [r4, #58]	; 0x3a
   144a0:	mov	r3, #3
   144a4:	strh	r3, [r4, #60]	; 0x3c
   144a8:	ldr	r2, [r5, #24]
   144ac:	ldr	r3, [r4, #4]
   144b0:	ldr	r1, [r3, #28]
   144b4:	ldr	r3, [r4, #4]
   144b8:	ldr	r3, [r3, #40]	; 0x28
   144bc:	sub	r3, r3, #1
   144c0:	add	r3, r1, r3
   144c4:	ldrb	r3, [r3]
   144c8:	cmp	r3, #47	; 0x2f
   144cc:	bne	144e0 <__assert_fail@plt+0x3318>
   144d0:	ldr	r3, [r4, #4]
   144d4:	ldr	r3, [r3, #40]	; 0x28
   144d8:	sub	r3, r3, #1
   144dc:	b	144e8 <__assert_fail@plt+0x3320>
   144e0:	ldr	r3, [r4, #4]
   144e4:	ldr	r3, [r3, #40]	; 0x28
   144e8:	add	r6, r2, r3
   144ec:	mov	r3, r6
   144f0:	add	r6, r3, #1
   144f4:	mov	r2, #47	; 0x2f
   144f8:	strb	r2, [r3]
   144fc:	add	r1, r4, #168	; 0xa8
   14500:	ldr	r3, [r4, #52]	; 0x34
   14504:	add	r3, r3, #1
   14508:	mov	r2, r3
   1450c:	mov	r0, r6
   14510:	bl	10f1c <memmove@plt>
   14514:	b	1451c <__assert_fail@plt+0x3354>
   14518:	nop			; (mov r0, r0)
   1451c:	str	r4, [r5]
   14520:	ldrh	r3, [r4, #56]	; 0x38
   14524:	cmp	r3, #11
   14528:	bne	1456c <__assert_fail@plt+0x33a4>
   1452c:	ldrd	r2, [r4, #112]	; 0x70
   14530:	cmp	r3, #0
   14534:	cmpeq	r2, #2
   14538:	bne	14558 <__assert_fail@plt+0x3390>
   1453c:	mov	r2, #0
   14540:	mov	r1, r4
   14544:	mov	r0, r5
   14548:	bl	156d0 <__assert_fail@plt+0x4508>
   1454c:	mov	r3, r0
   14550:	strh	r3, [r4, #56]	; 0x38
   14554:	b	1456c <__assert_fail@plt+0x33a4>
   14558:	ldrd	r2, [r4, #112]	; 0x70
   1455c:	cmp	r3, #0
   14560:	cmpeq	r2, #1
   14564:	beq	1456c <__assert_fail@plt+0x33a4>
   14568:	bl	11198 <abort@plt>
   1456c:	ldrh	r3, [r4, #56]	; 0x38
   14570:	cmp	r3, #1
   14574:	bne	145c4 <__assert_fail@plt+0x33fc>
   14578:	ldr	r3, [r4, #48]	; 0x30
   1457c:	cmp	r3, #0
   14580:	bne	1458c <__assert_fail@plt+0x33c4>
   14584:	ldrd	r2, [r4, #64]	; 0x40
   14588:	strd	r2, [r5, #16]
   1458c:	mov	r1, r4
   14590:	mov	r0, r5
   14594:	bl	13024 <__assert_fail@plt+0x1e5c>
   14598:	mov	r3, r0
   1459c:	eor	r3, r3, #1
   145a0:	uxtb	r3, r3
   145a4:	cmp	r3, #0
   145a8:	beq	145c4 <__assert_fail@plt+0x33fc>
   145ac:	bl	1109c <__errno_location@plt>
   145b0:	mov	r2, r0
   145b4:	mov	r3, #12
   145b8:	str	r3, [r2]
   145bc:	mov	r3, #0
   145c0:	b	147c0 <__assert_fail@plt+0x35f8>
   145c4:	mov	r3, r4
   145c8:	b	147c0 <__assert_fail@plt+0x35f8>
   145cc:	nop			; (mov r0, r0)
   145d0:	ldr	r4, [r6, #4]
   145d4:	str	r4, [r5]
   145d8:	mov	r0, r6
   145dc:	bl	1d358 <__assert_fail@plt+0xc190>
   145e0:	ldr	r3, [r4, #48]	; 0x30
   145e4:	cmn	r3, #1
   145e8:	bne	14614 <__assert_fail@plt+0x344c>
   145ec:	mov	r0, r4
   145f0:	bl	1d358 <__assert_fail@plt+0xc190>
   145f4:	bl	1109c <__errno_location@plt>
   145f8:	mov	r2, r0
   145fc:	mov	r3, #0
   14600:	str	r3, [r2]
   14604:	mov	r3, #0
   14608:	str	r3, [r5]
   1460c:	mov	r3, #0
   14610:	b	147c0 <__assert_fail@plt+0x35f8>
   14614:	ldrh	r3, [r4, #56]	; 0x38
   14618:	cmp	r3, #11
   1461c:	bne	14624 <__assert_fail@plt+0x345c>
   14620:	bl	11198 <abort@plt>
   14624:	ldr	r2, [r5, #24]
   14628:	ldr	r3, [r4, #40]	; 0x28
   1462c:	add	r3, r2, r3
   14630:	mov	r2, #0
   14634:	strb	r2, [r3]
   14638:	ldr	r3, [r4, #48]	; 0x30
   1463c:	cmp	r3, #0
   14640:	bne	14678 <__assert_fail@plt+0x34b0>
   14644:	mov	r0, r5
   14648:	bl	13490 <__assert_fail@plt+0x22c8>
   1464c:	mov	r3, r0
   14650:	cmp	r3, #0
   14654:	beq	14764 <__assert_fail@plt+0x359c>
   14658:	bl	1109c <__errno_location@plt>
   1465c:	mov	r3, r0
   14660:	ldr	r3, [r3]
   14664:	str	r3, [r4, #32]
   14668:	ldr	r3, [r5, #48]	; 0x30
   1466c:	orr	r3, r3, #8192	; 0x2000
   14670:	str	r3, [r5, #48]	; 0x30
   14674:	b	14764 <__assert_fail@plt+0x359c>
   14678:	ldrh	r3, [r4, #58]	; 0x3a
   1467c:	and	r3, r3, #2
   14680:	cmp	r3, #0
   14684:	beq	14718 <__assert_fail@plt+0x3550>
   14688:	ldr	r3, [r5, #48]	; 0x30
   1468c:	and	r3, r3, #4
   14690:	cmp	r3, #0
   14694:	bne	14708 <__assert_fail@plt+0x3540>
   14698:	ldr	r3, [r5, #48]	; 0x30
   1469c:	and	r3, r3, #512	; 0x200
   146a0:	cmp	r3, #0
   146a4:	beq	146c4 <__assert_fail@plt+0x34fc>
   146a8:	ldr	r3, [r4, #36]	; 0x24
   146ac:	mov	r2, #1
   146b0:	mov	r1, r3
   146b4:	mov	r0, r5
   146b8:	bl	133cc <__assert_fail@plt+0x2204>
   146bc:	mov	r3, #0
   146c0:	b	146e4 <__assert_fail@plt+0x351c>
   146c4:	ldr	r3, [r4, #36]	; 0x24
   146c8:	mov	r0, r3
   146cc:	bl	11144 <fchdir@plt>
   146d0:	mov	r3, r0
   146d4:	cmp	r3, #0
   146d8:	movne	r3, #1
   146dc:	moveq	r3, #0
   146e0:	uxtb	r3, r3
   146e4:	cmp	r3, #0
   146e8:	beq	14708 <__assert_fail@plt+0x3540>
   146ec:	bl	1109c <__errno_location@plt>
   146f0:	mov	r3, r0
   146f4:	ldr	r3, [r3]
   146f8:	str	r3, [r4, #32]
   146fc:	ldr	r3, [r5, #48]	; 0x30
   14700:	orr	r3, r3, #8192	; 0x2000
   14704:	str	r3, [r5, #48]	; 0x30
   14708:	ldr	r3, [r4, #36]	; 0x24
   1470c:	mov	r0, r3
   14710:	bl	111a4 <close@plt>
   14714:	b	14764 <__assert_fail@plt+0x359c>
   14718:	ldrh	r3, [r4, #58]	; 0x3a
   1471c:	and	r3, r3, #1
   14720:	cmp	r3, #0
   14724:	bne	14764 <__assert_fail@plt+0x359c>
   14728:	ldr	r1, [r4, #4]
   1472c:	ldr	r3, [pc, #152]	; 147cc <__assert_fail@plt+0x3604>
   14730:	mvn	r2, #0
   14734:	mov	r0, r5
   14738:	bl	15dec <__assert_fail@plt+0x4c24>
   1473c:	mov	r3, r0
   14740:	cmp	r3, #0
   14744:	beq	14764 <__assert_fail@plt+0x359c>
   14748:	bl	1109c <__errno_location@plt>
   1474c:	mov	r3, r0
   14750:	ldr	r3, [r3]
   14754:	str	r3, [r4, #32]
   14758:	ldr	r3, [r5, #48]	; 0x30
   1475c:	orr	r3, r3, #8192	; 0x2000
   14760:	str	r3, [r5, #48]	; 0x30
   14764:	ldrh	r3, [r4, #56]	; 0x38
   14768:	cmp	r3, #2
   1476c:	beq	147a4 <__assert_fail@plt+0x35dc>
   14770:	ldr	r3, [r4, #32]
   14774:	cmp	r3, #0
   14778:	beq	14784 <__assert_fail@plt+0x35bc>
   1477c:	mov	r3, #7
   14780:	b	14788 <__assert_fail@plt+0x35c0>
   14784:	mov	r3, #6
   14788:	strh	r3, [r4, #56]	; 0x38
   1478c:	ldr	r3, [r4, #32]
   14790:	cmp	r3, #0
   14794:	bne	147a4 <__assert_fail@plt+0x35dc>
   14798:	mov	r1, r4
   1479c:	mov	r0, r5
   147a0:	bl	13164 <__assert_fail@plt+0x1f9c>
   147a4:	ldr	r3, [r5, #48]	; 0x30
   147a8:	and	r3, r3, #8192	; 0x2000
   147ac:	cmp	r3, #0
   147b0:	bne	147bc <__assert_fail@plt+0x35f4>
   147b4:	mov	r3, r4
   147b8:	b	147c0 <__assert_fail@plt+0x35f8>
   147bc:	mov	r3, #0
   147c0:	mov	r0, r3
   147c4:	pop	{r4, r5, r6, r7, fp, pc}
   147c8:	andeq	pc, r1, ip, rrx
   147cc:	andeq	pc, r1, r0, ror r0	; <UNPREDICTABLE>
   147d0:	push	{fp, lr}
   147d4:	add	fp, sp, #4
   147d8:	sub	sp, sp, #16
   147dc:	str	r0, [fp, #-8]
   147e0:	str	r1, [fp, #-12]
   147e4:	str	r2, [fp, #-16]
   147e8:	ldr	r3, [fp, #-16]
   147ec:	cmp	r3, #0
   147f0:	beq	1483c <__assert_fail@plt+0x3674>
   147f4:	ldr	r3, [fp, #-16]
   147f8:	cmp	r3, #1
   147fc:	beq	1483c <__assert_fail@plt+0x3674>
   14800:	ldr	r3, [fp, #-16]
   14804:	cmp	r3, #2
   14808:	beq	1483c <__assert_fail@plt+0x3674>
   1480c:	ldr	r3, [fp, #-16]
   14810:	cmp	r3, #3
   14814:	beq	1483c <__assert_fail@plt+0x3674>
   14818:	ldr	r3, [fp, #-16]
   1481c:	cmp	r3, #4
   14820:	beq	1483c <__assert_fail@plt+0x3674>
   14824:	bl	1109c <__errno_location@plt>
   14828:	mov	r2, r0
   1482c:	mov	r3, #22
   14830:	str	r3, [r2]
   14834:	mov	r3, #1
   14838:	b	14850 <__assert_fail@plt+0x3688>
   1483c:	ldr	r3, [fp, #-16]
   14840:	uxth	r2, r3
   14844:	ldr	r3, [fp, #-12]
   14848:	strh	r2, [r3, #60]	; 0x3c
   1484c:	mov	r3, #0
   14850:	mov	r0, r3
   14854:	sub	sp, fp, #4
   14858:	pop	{fp, pc}
   1485c:	push	{r4, r5, fp, lr}
   14860:	add	fp, sp, #12
   14864:	sub	sp, sp, #16
   14868:	mov	r4, r0
   1486c:	str	r1, [fp, #-24]	; 0xffffffe8
   14870:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14874:	cmp	r3, #0
   14878:	beq	148a0 <__assert_fail@plt+0x36d8>
   1487c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14880:	cmp	r3, #4096	; 0x1000
   14884:	beq	148a0 <__assert_fail@plt+0x36d8>
   14888:	bl	1109c <__errno_location@plt>
   1488c:	mov	r2, r0
   14890:	mov	r3, #22
   14894:	str	r3, [r2]
   14898:	mov	r3, #0
   1489c:	b	14a34 <__assert_fail@plt+0x386c>
   148a0:	ldr	r5, [r4]
   148a4:	bl	1109c <__errno_location@plt>
   148a8:	mov	r2, r0
   148ac:	mov	r3, #0
   148b0:	str	r3, [r2]
   148b4:	ldr	r3, [r4, #48]	; 0x30
   148b8:	and	r3, r3, #8192	; 0x2000
   148bc:	cmp	r3, #0
   148c0:	beq	148cc <__assert_fail@plt+0x3704>
   148c4:	mov	r3, #0
   148c8:	b	14a34 <__assert_fail@plt+0x386c>
   148cc:	ldrh	r3, [r5, #56]	; 0x38
   148d0:	cmp	r3, #9
   148d4:	bne	148e0 <__assert_fail@plt+0x3718>
   148d8:	ldr	r3, [r5, #8]
   148dc:	b	14a34 <__assert_fail@plt+0x386c>
   148e0:	ldrh	r3, [r5, #56]	; 0x38
   148e4:	cmp	r3, #1
   148e8:	beq	148f4 <__assert_fail@plt+0x372c>
   148ec:	mov	r3, #0
   148f0:	b	14a34 <__assert_fail@plt+0x386c>
   148f4:	ldr	r3, [r4, #4]
   148f8:	cmp	r3, #0
   148fc:	beq	1490c <__assert_fail@plt+0x3744>
   14900:	ldr	r3, [r4, #4]
   14904:	mov	r0, r3
   14908:	bl	15b04 <__assert_fail@plt+0x493c>
   1490c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14910:	cmp	r3, #4096	; 0x1000
   14914:	bne	14930 <__assert_fail@plt+0x3768>
   14918:	ldr	r3, [r4, #48]	; 0x30
   1491c:	orr	r3, r3, #4096	; 0x1000
   14920:	str	r3, [r4, #48]	; 0x30
   14924:	mov	r3, #2
   14928:	str	r3, [fp, #-24]	; 0xffffffe8
   1492c:	b	14938 <__assert_fail@plt+0x3770>
   14930:	mov	r3, #1
   14934:	str	r3, [fp, #-24]	; 0xffffffe8
   14938:	ldr	r3, [r5, #48]	; 0x30
   1493c:	cmp	r3, #0
   14940:	bne	14964 <__assert_fail@plt+0x379c>
   14944:	ldr	r3, [r5, #24]
   14948:	ldrb	r3, [r3]
   1494c:	cmp	r3, #47	; 0x2f
   14950:	beq	14964 <__assert_fail@plt+0x379c>
   14954:	ldr	r3, [r4, #48]	; 0x30
   14958:	and	r3, r3, #4
   1495c:	cmp	r3, #0
   14960:	beq	14980 <__assert_fail@plt+0x37b8>
   14964:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14968:	mov	r0, r4
   1496c:	bl	14b98 <__assert_fail@plt+0x39d0>
   14970:	mov	r3, r0
   14974:	str	r3, [r4, #4]
   14978:	ldr	r3, [r4, #4]
   1497c:	b	14a34 <__assert_fail@plt+0x386c>
   14980:	ldr	r1, [pc, #184]	; 14a40 <__assert_fail@plt+0x3878>
   14984:	mov	r0, r4
   14988:	bl	13568 <__assert_fail@plt+0x23a0>
   1498c:	str	r0, [fp, #-16]
   14990:	ldr	r3, [fp, #-16]
   14994:	cmp	r3, #0
   14998:	bge	149ac <__assert_fail@plt+0x37e4>
   1499c:	mov	r3, #0
   149a0:	str	r3, [r4, #4]
   149a4:	mov	r3, #0
   149a8:	b	14a34 <__assert_fail@plt+0x386c>
   149ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   149b0:	mov	r0, r4
   149b4:	bl	14b98 <__assert_fail@plt+0x39d0>
   149b8:	mov	r3, r0
   149bc:	str	r3, [r4, #4]
   149c0:	ldr	r3, [r4, #48]	; 0x30
   149c4:	and	r3, r3, #512	; 0x200
   149c8:	cmp	r3, #0
   149cc:	beq	149e4 <__assert_fail@plt+0x381c>
   149d0:	mov	r2, #1
   149d4:	ldr	r1, [fp, #-16]
   149d8:	mov	r0, r4
   149dc:	bl	133cc <__assert_fail@plt+0x2204>
   149e0:	b	14a30 <__assert_fail@plt+0x3868>
   149e4:	ldr	r0, [fp, #-16]
   149e8:	bl	11144 <fchdir@plt>
   149ec:	mov	r3, r0
   149f0:	cmp	r3, #0
   149f4:	beq	14a28 <__assert_fail@plt+0x3860>
   149f8:	bl	1109c <__errno_location@plt>
   149fc:	mov	r3, r0
   14a00:	ldr	r3, [r3]
   14a04:	str	r3, [fp, #-20]	; 0xffffffec
   14a08:	ldr	r0, [fp, #-16]
   14a0c:	bl	111a4 <close@plt>
   14a10:	bl	1109c <__errno_location@plt>
   14a14:	mov	r2, r0
   14a18:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a1c:	str	r3, [r2]
   14a20:	mov	r3, #0
   14a24:	b	14a34 <__assert_fail@plt+0x386c>
   14a28:	ldr	r0, [fp, #-16]
   14a2c:	bl	111a4 <close@plt>
   14a30:	ldr	r3, [r4, #4]
   14a34:	mov	r0, r3
   14a38:	sub	sp, fp, #12
   14a3c:	pop	{r4, r5, fp, pc}
   14a40:	andeq	pc, r1, ip, rrx
   14a44:	push	{fp}		; (str fp, [sp, #-4]!)
   14a48:	add	fp, sp, #0
   14a4c:	sub	sp, sp, #12
   14a50:	str	r0, [fp, #-8]
   14a54:	str	r1, [fp, #-12]
   14a58:	ldr	r3, [fp, #-8]
   14a5c:	ldr	r3, [r3]
   14a60:	ldrd	r0, [r3, #160]	; 0xa0
   14a64:	ldr	r3, [fp, #-12]
   14a68:	ldr	r3, [r3]
   14a6c:	ldrd	r2, [r3, #160]	; 0xa0
   14a70:	cmp	r1, r3
   14a74:	cmpeq	r0, r2
   14a78:	movhi	r3, #1
   14a7c:	movls	r3, #0
   14a80:	uxtb	r3, r3
   14a84:	mov	ip, r3
   14a88:	ldr	r3, [fp, #-8]
   14a8c:	ldr	r3, [r3]
   14a90:	ldrd	r0, [r3, #160]	; 0xa0
   14a94:	ldr	r3, [fp, #-12]
   14a98:	ldr	r3, [r3]
   14a9c:	ldrd	r2, [r3, #160]	; 0xa0
   14aa0:	cmp	r1, r3
   14aa4:	cmpeq	r0, r2
   14aa8:	movcc	r3, #1
   14aac:	movcs	r3, #0
   14ab0:	uxtb	r3, r3
   14ab4:	sub	r3, ip, r3
   14ab8:	mov	r0, r3
   14abc:	add	sp, fp, #0
   14ac0:	pop	{fp}		; (ldr fp, [sp], #4)
   14ac4:	bx	lr
   14ac8:	push	{fp}		; (str fp, [sp, #-4]!)
   14acc:	add	fp, sp, #0
   14ad0:	sub	sp, sp, #20
   14ad4:	str	r0, [fp, #-16]
   14ad8:	str	r1, [fp, #-20]	; 0xffffffec
   14adc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ae0:	sub	r3, r3, #1
   14ae4:	cmp	r3, #11
   14ae8:	ldrls	pc, [pc, r3, lsl #2]
   14aec:	b	14b74 <__assert_fail@plt+0x39ac>
   14af0:	andeq	r4, r1, r4, asr #22
   14af4:	andeq	r4, r1, ip, lsr #22
   14af8:	andeq	r4, r1, r4, ror fp
   14afc:	andeq	r4, r1, r8, lsr fp
   14b00:	andeq	r4, r1, r4, ror fp
   14b04:	andeq	r4, r1, r0, lsr #22
   14b08:	andeq	r4, r1, r4, ror fp
   14b0c:	andeq	r4, r1, ip, asr fp
   14b10:	andeq	r4, r1, r4, ror fp
   14b14:	andeq	r4, r1, r0, asr fp
   14b18:	andeq	r4, r1, r4, ror fp
   14b1c:	andeq	r4, r1, r8, ror #22
   14b20:	mov	r3, #24576	; 0x6000
   14b24:	str	r3, [fp, #-8]
   14b28:	b	14b7c <__assert_fail@plt+0x39b4>
   14b2c:	mov	r3, #8192	; 0x2000
   14b30:	str	r3, [fp, #-8]
   14b34:	b	14b7c <__assert_fail@plt+0x39b4>
   14b38:	mov	r3, #16384	; 0x4000
   14b3c:	str	r3, [fp, #-8]
   14b40:	b	14b7c <__assert_fail@plt+0x39b4>
   14b44:	mov	r3, #4096	; 0x1000
   14b48:	str	r3, [fp, #-8]
   14b4c:	b	14b7c <__assert_fail@plt+0x39b4>
   14b50:	mov	r3, #40960	; 0xa000
   14b54:	str	r3, [fp, #-8]
   14b58:	b	14b7c <__assert_fail@plt+0x39b4>
   14b5c:	mov	r3, #32768	; 0x8000
   14b60:	str	r3, [fp, #-8]
   14b64:	b	14b7c <__assert_fail@plt+0x39b4>
   14b68:	mov	r3, #49152	; 0xc000
   14b6c:	str	r3, [fp, #-8]
   14b70:	b	14b7c <__assert_fail@plt+0x39b4>
   14b74:	mov	r3, #0
   14b78:	str	r3, [fp, #-8]
   14b7c:	ldr	r3, [fp, #-16]
   14b80:	ldr	r2, [fp, #-8]
   14b84:	str	r2, [r3, #16]
   14b88:	nop			; (mov r0, r0)
   14b8c:	add	sp, fp, #0
   14b90:	pop	{fp}		; (ldr fp, [sp], #4)
   14b94:	bx	lr
   14b98:	push	{r4, r5, r6, r7, fp, lr}
   14b9c:	add	fp, sp, #20
   14ba0:	sub	sp, sp, #80	; 0x50
   14ba4:	mov	r4, r0
   14ba8:	str	r1, [fp, #-96]	; 0xffffffa0
   14bac:	ldr	r3, [r4]
   14bb0:	str	r3, [fp, #-44]	; 0xffffffd4
   14bb4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14bb8:	ldr	r3, [r3, #12]
   14bbc:	cmp	r3, #0
   14bc0:	movne	r3, #1
   14bc4:	moveq	r3, #0
   14bc8:	strb	r3, [fp, #-45]	; 0xffffffd3
   14bcc:	mov	r3, #0
   14bd0:	strb	r3, [fp, #-37]	; 0xffffffdb
   14bd4:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   14bd8:	cmp	r3, #0
   14bdc:	beq	14c58 <__assert_fail@plt+0x3a90>
   14be0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14be4:	ldr	r3, [r3, #12]
   14be8:	str	r3, [fp, #-52]	; 0xffffffcc
   14bec:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14bf0:	bl	11138 <dirfd@plt>
   14bf4:	mov	r3, r0
   14bf8:	str	r3, [fp, #-92]	; 0xffffffa4
   14bfc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c00:	cmp	r3, #0
   14c04:	bge	14dbc <__assert_fail@plt+0x3bf4>
   14c08:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14c0c:	ldr	r3, [r3, #12]
   14c10:	mov	r0, r3
   14c14:	bl	111bc <closedir@plt>
   14c18:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14c1c:	mov	r2, #0
   14c20:	str	r2, [r3, #12]
   14c24:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14c28:	cmp	r3, #3
   14c2c:	bne	14c50 <__assert_fail@plt+0x3a88>
   14c30:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14c34:	mov	r2, #4
   14c38:	strh	r2, [r3, #56]	; 0x38
   14c3c:	bl	1109c <__errno_location@plt>
   14c40:	mov	r3, r0
   14c44:	ldr	r2, [r3]
   14c48:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14c4c:	str	r2, [r3, #32]
   14c50:	mov	r3, #0
   14c54:	b	156b0 <__assert_fail@plt+0x44e8>
   14c58:	ldr	r3, [r4, #48]	; 0x30
   14c5c:	and	r3, r3, #4
   14c60:	cmp	r3, #0
   14c64:	bne	14c80 <__assert_fail@plt+0x3ab8>
   14c68:	ldr	r3, [r4, #48]	; 0x30
   14c6c:	and	r3, r3, #512	; 0x200
   14c70:	cmp	r3, #0
   14c74:	beq	14c80 <__assert_fail@plt+0x3ab8>
   14c78:	ldr	r0, [r4, #32]
   14c7c:	b	14c84 <__assert_fail@plt+0x3abc>
   14c80:	mvn	r0, #99	; 0x63
   14c84:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14c88:	ldr	r1, [r3, #24]
   14c8c:	ldr	r3, [r4, #48]	; 0x30
   14c90:	and	r3, r3, #16
   14c94:	cmp	r3, #0
   14c98:	beq	14cc4 <__assert_fail@plt+0x3afc>
   14c9c:	ldr	r3, [r4, #48]	; 0x30
   14ca0:	and	r3, r3, #1
   14ca4:	cmp	r3, #0
   14ca8:	beq	14cbc <__assert_fail@plt+0x3af4>
   14cac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14cb0:	ldr	r3, [r3, #48]	; 0x30
   14cb4:	cmp	r3, #0
   14cb8:	beq	14cc4 <__assert_fail@plt+0x3afc>
   14cbc:	mov	r2, #32768	; 0x8000
   14cc0:	b	14cc8 <__assert_fail@plt+0x3b00>
   14cc4:	mov	r2, #0
   14cc8:	sub	r3, fp, #92	; 0x5c
   14ccc:	bl	18810 <__assert_fail@plt+0x7648>
   14cd0:	mov	r3, r0
   14cd4:	mov	r2, r3
   14cd8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14cdc:	str	r2, [r3, #12]
   14ce0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ce4:	ldr	r3, [r3, #12]
   14ce8:	cmp	r3, #0
   14cec:	bne	14d24 <__assert_fail@plt+0x3b5c>
   14cf0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14cf4:	cmp	r3, #3
   14cf8:	bne	14d1c <__assert_fail@plt+0x3b54>
   14cfc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d00:	mov	r2, #4
   14d04:	strh	r2, [r3, #56]	; 0x38
   14d08:	bl	1109c <__errno_location@plt>
   14d0c:	mov	r3, r0
   14d10:	ldr	r2, [r3]
   14d14:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d18:	str	r2, [r3, #32]
   14d1c:	mov	r3, #0
   14d20:	b	156b0 <__assert_fail@plt+0x44e8>
   14d24:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d28:	ldrh	r3, [r3, #56]	; 0x38
   14d2c:	cmp	r3, #11
   14d30:	bne	14d58 <__assert_fail@plt+0x3b90>
   14d34:	mov	r2, #0
   14d38:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14d3c:	mov	r0, r4
   14d40:	bl	156d0 <__assert_fail@plt+0x4508>
   14d44:	mov	r3, r0
   14d48:	mov	r2, r3
   14d4c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d50:	strh	r2, [r3, #56]	; 0x38
   14d54:	b	14dbc <__assert_fail@plt+0x3bf4>
   14d58:	ldr	r3, [r4, #48]	; 0x30
   14d5c:	and	r3, r3, #256	; 0x100
   14d60:	cmp	r3, #0
   14d64:	beq	14dbc <__assert_fail@plt+0x3bf4>
   14d68:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14d6c:	mov	r0, r4
   14d70:	bl	13164 <__assert_fail@plt+0x1f9c>
   14d74:	mov	r2, #0
   14d78:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14d7c:	mov	r0, r4
   14d80:	bl	156d0 <__assert_fail@plt+0x4508>
   14d84:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14d88:	mov	r0, r4
   14d8c:	bl	13024 <__assert_fail@plt+0x1e5c>
   14d90:	mov	r3, r0
   14d94:	eor	r3, r3, #1
   14d98:	uxtb	r3, r3
   14d9c:	cmp	r3, #0
   14da0:	beq	14dbc <__assert_fail@plt+0x3bf4>
   14da4:	bl	1109c <__errno_location@plt>
   14da8:	mov	r2, r0
   14dac:	mov	r3, #12
   14db0:	str	r3, [r2]
   14db4:	mov	r3, #0
   14db8:	b	156b0 <__assert_fail@plt+0x44e8>
   14dbc:	ldr	r3, [r4, #44]	; 0x2c
   14dc0:	cmp	r3, #0
   14dc4:	beq	14dd0 <__assert_fail@plt+0x3c08>
   14dc8:	mvn	r3, #0
   14dcc:	b	14dd4 <__assert_fail@plt+0x3c0c>
   14dd0:	ldr	r3, [pc, #2276]	; 156bc <__assert_fail@plt+0x44f4>
   14dd4:	str	r3, [fp, #-56]	; 0xffffffc8
   14dd8:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   14ddc:	cmp	r3, #0
   14de0:	beq	14df0 <__assert_fail@plt+0x3c28>
   14de4:	mov	r3, #1
   14de8:	strb	r3, [fp, #-25]	; 0xffffffe7
   14dec:	b	14f8c <__assert_fail@plt+0x3dc4>
   14df0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14df4:	cmp	r3, #2
   14df8:	beq	14e60 <__assert_fail@plt+0x3c98>
   14dfc:	ldr	r3, [r4, #48]	; 0x30
   14e00:	and	r3, r3, #8
   14e04:	cmp	r3, #0
   14e08:	beq	14e58 <__assert_fail@plt+0x3c90>
   14e0c:	ldr	r3, [r4, #48]	; 0x30
   14e10:	and	r3, r3, #16
   14e14:	cmp	r3, #0
   14e18:	beq	14e58 <__assert_fail@plt+0x3c90>
   14e1c:	ldr	r3, [r4, #48]	; 0x30
   14e20:	and	r3, r3, #32
   14e24:	cmp	r3, #0
   14e28:	bne	14e58 <__assert_fail@plt+0x3c90>
   14e2c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14e30:	ldr	r3, [r3, #84]	; 0x54
   14e34:	cmp	r3, #2
   14e38:	bne	14e58 <__assert_fail@plt+0x3c90>
   14e3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e40:	mov	r1, r3
   14e44:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14e48:	bl	13fc8 <__assert_fail@plt+0x2e00>
   14e4c:	mov	r3, r0
   14e50:	cmp	r3, #0
   14e54:	bne	14e60 <__assert_fail@plt+0x3c98>
   14e58:	mov	r3, #1
   14e5c:	b	14e64 <__assert_fail@plt+0x3c9c>
   14e60:	mov	r3, #0
   14e64:	strb	r3, [fp, #-25]	; 0xffffffe7
   14e68:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14e6c:	and	r3, r3, #1
   14e70:	strb	r3, [fp, #-25]	; 0xffffffe7
   14e74:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14e78:	cmp	r3, #0
   14e7c:	bne	14e8c <__assert_fail@plt+0x3cc4>
   14e80:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14e84:	cmp	r3, #3
   14e88:	bne	14f8c <__assert_fail@plt+0x3dc4>
   14e8c:	ldr	r3, [r4, #48]	; 0x30
   14e90:	and	r3, r3, #512	; 0x200
   14e94:	cmp	r3, #0
   14e98:	beq	14eb8 <__assert_fail@plt+0x3cf0>
   14e9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ea0:	mov	r2, #3
   14ea4:	ldr	r1, [pc, #2068]	; 156c0 <__assert_fail@plt+0x44f8>
   14ea8:	mov	r0, r3
   14eac:	bl	1ceb4 <__assert_fail@plt+0xbcec>
   14eb0:	mov	r3, r0
   14eb4:	str	r3, [fp, #-92]	; 0xffffffa4
   14eb8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ebc:	cmp	r3, #0
   14ec0:	blt	14ee4 <__assert_fail@plt+0x3d1c>
   14ec4:	ldr	r2, [fp, #-92]	; 0xffffffa4
   14ec8:	mov	r3, #0
   14ecc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14ed0:	mov	r0, r4
   14ed4:	bl	15dec <__assert_fail@plt+0x4c24>
   14ed8:	mov	r3, r0
   14edc:	cmp	r3, #0
   14ee0:	beq	14f84 <__assert_fail@plt+0x3dbc>
   14ee4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14ee8:	cmp	r3, #0
   14eec:	beq	14f10 <__assert_fail@plt+0x3d48>
   14ef0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14ef4:	cmp	r3, #3
   14ef8:	bne	14f10 <__assert_fail@plt+0x3d48>
   14efc:	bl	1109c <__errno_location@plt>
   14f00:	mov	r3, r0
   14f04:	ldr	r2, [r3]
   14f08:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f0c:	str	r2, [r3, #32]
   14f10:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f14:	ldrh	r3, [r3, #58]	; 0x3a
   14f18:	orr	r3, r3, #1
   14f1c:	uxth	r2, r3
   14f20:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f24:	strh	r2, [r3, #58]	; 0x3a
   14f28:	mov	r3, #0
   14f2c:	strb	r3, [fp, #-25]	; 0xffffffe7
   14f30:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f34:	ldr	r3, [r3, #12]
   14f38:	mov	r0, r3
   14f3c:	bl	111bc <closedir@plt>
   14f40:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f44:	mov	r2, #0
   14f48:	str	r2, [r3, #12]
   14f4c:	ldr	r3, [r4, #48]	; 0x30
   14f50:	and	r3, r3, #512	; 0x200
   14f54:	cmp	r3, #0
   14f58:	beq	14f74 <__assert_fail@plt+0x3dac>
   14f5c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f60:	cmp	r3, #0
   14f64:	blt	14f74 <__assert_fail@plt+0x3dac>
   14f68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f6c:	mov	r0, r3
   14f70:	bl	111a4 <close@plt>
   14f74:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f78:	mov	r2, #0
   14f7c:	str	r2, [r3, #12]
   14f80:	b	14f8c <__assert_fail@plt+0x3dc4>
   14f84:	mov	r3, #1
   14f88:	strb	r3, [fp, #-25]	; 0xffffffe7
   14f8c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f90:	ldr	r2, [r3, #28]
   14f94:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14f98:	ldr	r3, [r3, #40]	; 0x28
   14f9c:	sub	r3, r3, #1
   14fa0:	add	r3, r2, r3
   14fa4:	ldrb	r3, [r3]
   14fa8:	cmp	r3, #47	; 0x2f
   14fac:	bne	14fc0 <__assert_fail@plt+0x3df8>
   14fb0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14fb4:	ldr	r3, [r3, #40]	; 0x28
   14fb8:	sub	r3, r3, #1
   14fbc:	b	14fc8 <__assert_fail@plt+0x3e00>
   14fc0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14fc4:	ldr	r3, [r3, #40]	; 0x28
   14fc8:	str	r3, [fp, #-60]	; 0xffffffc4
   14fcc:	ldr	r3, [r4, #48]	; 0x30
   14fd0:	and	r3, r3, #4
   14fd4:	cmp	r3, #0
   14fd8:	beq	15004 <__assert_fail@plt+0x3e3c>
   14fdc:	ldr	r2, [r4, #24]
   14fe0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14fe4:	add	r3, r2, r3
   14fe8:	str	r3, [fp, #-36]	; 0xffffffdc
   14fec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14ff0:	add	r2, r3, #1
   14ff4:	str	r2, [fp, #-36]	; 0xffffffdc
   14ff8:	mov	r2, #47	; 0x2f
   14ffc:	strb	r2, [r3]
   15000:	b	1500c <__assert_fail@plt+0x3e44>
   15004:	mov	r3, #0
   15008:	str	r3, [fp, #-36]	; 0xffffffdc
   1500c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15010:	add	r3, r3, #1
   15014:	str	r3, [fp, #-60]	; 0xffffffc4
   15018:	ldr	r2, [r4, #36]	; 0x24
   1501c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15020:	sub	r3, r2, r3
   15024:	str	r3, [fp, #-32]	; 0xffffffe0
   15028:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1502c:	ldr	r3, [r3, #48]	; 0x30
   15030:	add	r3, r3, #1
   15034:	str	r3, [fp, #-64]	; 0xffffffc0
   15038:	mov	r3, #0
   1503c:	strb	r3, [fp, #-26]	; 0xffffffe6
   15040:	mov	r7, #0
   15044:	mov	r3, #0
   15048:	str	r3, [fp, #-24]	; 0xffffffe8
   1504c:	mov	r6, #0
   15050:	b	154a0 <__assert_fail@plt+0x42d8>
   15054:	bl	1109c <__errno_location@plt>
   15058:	mov	r2, r0
   1505c:	mov	r3, #0
   15060:	str	r3, [r2]
   15064:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15068:	ldr	r3, [r3, #12]
   1506c:	mov	r0, r3
   15070:	bl	11120 <readdir64@plt>
   15074:	str	r0, [fp, #-68]	; 0xffffffbc
   15078:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1507c:	cmp	r3, #0
   15080:	bne	150d8 <__assert_fail@plt+0x3f10>
   15084:	bl	1109c <__errno_location@plt>
   15088:	mov	r3, r0
   1508c:	ldr	r3, [r3]
   15090:	cmp	r3, #0
   15094:	beq	154b4 <__assert_fail@plt+0x42ec>
   15098:	bl	1109c <__errno_location@plt>
   1509c:	mov	r3, r0
   150a0:	ldr	r2, [r3]
   150a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   150a8:	str	r2, [r3, #32]
   150ac:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   150b0:	cmp	r3, #0
   150b4:	bne	150c0 <__assert_fail@plt+0x3ef8>
   150b8:	cmp	r6, #0
   150bc:	beq	150c8 <__assert_fail@plt+0x3f00>
   150c0:	mov	r2, #7
   150c4:	b	150cc <__assert_fail@plt+0x3f04>
   150c8:	mov	r2, #4
   150cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   150d0:	strh	r2, [r3, #56]	; 0x38
   150d4:	b	154b4 <__assert_fail@plt+0x42ec>
   150d8:	ldr	r3, [r4, #48]	; 0x30
   150dc:	and	r3, r3, #32
   150e0:	cmp	r3, #0
   150e4:	bne	1512c <__assert_fail@plt+0x3f64>
   150e8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   150ec:	ldrb	r3, [r3, #19]
   150f0:	cmp	r3, #46	; 0x2e
   150f4:	bne	1512c <__assert_fail@plt+0x3f64>
   150f8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   150fc:	ldrb	r3, [r3, #20]
   15100:	cmp	r3, #0
   15104:	beq	154a0 <__assert_fail@plt+0x42d8>
   15108:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1510c:	ldrb	r3, [r3, #20]
   15110:	cmp	r3, #46	; 0x2e
   15114:	bne	1512c <__assert_fail@plt+0x3f64>
   15118:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1511c:	ldrb	r3, [r3, #21]
   15120:	cmp	r3, #0
   15124:	bne	1512c <__assert_fail@plt+0x3f64>
   15128:	b	154a0 <__assert_fail@plt+0x42d8>
   1512c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15130:	add	r3, r3, #19
   15134:	mov	r0, r3
   15138:	bl	1106c <strlen@plt>
   1513c:	str	r0, [fp, #-72]	; 0xffffffb8
   15140:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15144:	add	r3, r3, #19
   15148:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1514c:	mov	r1, r3
   15150:	mov	r0, r4
   15154:	bl	15a48 <__assert_fail@plt+0x4880>
   15158:	mov	r5, r0
   1515c:	cmp	r5, #0
   15160:	beq	151b0 <__assert_fail@plt+0x3fe8>
   15164:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15168:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1516c:	cmp	r2, r3
   15170:	bcc	15268 <__assert_fail@plt+0x40a0>
   15174:	ldr	r3, [r4, #24]
   15178:	str	r3, [fp, #-76]	; 0xffffffb4
   1517c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15180:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15184:	add	r3, r2, r3
   15188:	add	r3, r3, #1
   1518c:	mov	r1, r3
   15190:	mov	r0, r4
   15194:	bl	15b4c <__assert_fail@plt+0x4984>
   15198:	mov	r3, r0
   1519c:	eor	r3, r3, #1
   151a0:	uxtb	r3, r3
   151a4:	cmp	r3, #0
   151a8:	beq	15220 <__assert_fail@plt+0x4058>
   151ac:	b	151b4 <__assert_fail@plt+0x3fec>
   151b0:	nop			; (mov r0, r0)
   151b4:	bl	1109c <__errno_location@plt>
   151b8:	mov	r3, r0
   151bc:	ldr	r3, [r3]
   151c0:	str	r3, [fp, #-88]	; 0xffffffa8
   151c4:	mov	r0, r5
   151c8:	bl	1d358 <__assert_fail@plt+0xc190>
   151cc:	mov	r0, r7
   151d0:	bl	15b04 <__assert_fail@plt+0x493c>
   151d4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151d8:	ldr	r3, [r3, #12]
   151dc:	mov	r0, r3
   151e0:	bl	111bc <closedir@plt>
   151e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151e8:	mov	r2, #0
   151ec:	str	r2, [r3, #12]
   151f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   151f4:	mov	r2, #7
   151f8:	strh	r2, [r3, #56]	; 0x38
   151fc:	ldr	r3, [r4, #48]	; 0x30
   15200:	orr	r3, r3, #8192	; 0x2000
   15204:	str	r3, [r4, #48]	; 0x30
   15208:	bl	1109c <__errno_location@plt>
   1520c:	mov	r2, r0
   15210:	ldr	r3, [fp, #-88]	; 0xffffffa8
   15214:	str	r3, [r2]
   15218:	mov	r3, #0
   1521c:	b	156b0 <__assert_fail@plt+0x44e8>
   15220:	ldr	r2, [r4, #24]
   15224:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15228:	cmp	r2, r3
   1522c:	beq	15258 <__assert_fail@plt+0x4090>
   15230:	mov	r3, #1
   15234:	strb	r3, [fp, #-26]	; 0xffffffe6
   15238:	ldr	r3, [r4, #48]	; 0x30
   1523c:	and	r3, r3, #4
   15240:	cmp	r3, #0
   15244:	beq	15258 <__assert_fail@plt+0x4090>
   15248:	ldr	r2, [r4, #24]
   1524c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15250:	add	r3, r2, r3
   15254:	str	r3, [fp, #-36]	; 0xffffffdc
   15258:	ldr	r2, [r4, #36]	; 0x24
   1525c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15260:	sub	r3, r2, r3
   15264:	str	r3, [fp, #-32]	; 0xffffffe0
   15268:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1526c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   15270:	add	r3, r2, r3
   15274:	str	r3, [fp, #-80]	; 0xffffffb0
   15278:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1527c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15280:	cmp	r2, r3
   15284:	bcs	152e4 <__assert_fail@plt+0x411c>
   15288:	mov	r0, r5
   1528c:	bl	1d358 <__assert_fail@plt+0xc190>
   15290:	mov	r0, r7
   15294:	bl	15b04 <__assert_fail@plt+0x493c>
   15298:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1529c:	ldr	r3, [r3, #12]
   152a0:	mov	r0, r3
   152a4:	bl	111bc <closedir@plt>
   152a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   152ac:	mov	r2, #0
   152b0:	str	r2, [r3, #12]
   152b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   152b8:	mov	r2, #7
   152bc:	strh	r2, [r3, #56]	; 0x38
   152c0:	ldr	r3, [r4, #48]	; 0x30
   152c4:	orr	r3, r3, #8192	; 0x2000
   152c8:	str	r3, [r4, #48]	; 0x30
   152cc:	bl	1109c <__errno_location@plt>
   152d0:	mov	r2, r0
   152d4:	mov	r3, #36	; 0x24
   152d8:	str	r3, [r2]
   152dc:	mov	r3, #0
   152e0:	b	156b0 <__assert_fail@plt+0x44e8>
   152e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   152e8:	str	r3, [r5, #48]	; 0x30
   152ec:	ldr	r3, [r4]
   152f0:	str	r3, [r5, #4]
   152f4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   152f8:	str	r3, [r5, #40]	; 0x28
   152fc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15300:	ldrd	r2, [r3]
   15304:	strd	r2, [r5, #160]	; 0xa0
   15308:	ldr	r3, [r4, #48]	; 0x30
   1530c:	and	r3, r3, #4
   15310:	cmp	r3, #0
   15314:	beq	1533c <__assert_fail@plt+0x4174>
   15318:	ldr	r3, [r5, #28]
   1531c:	str	r3, [r5, #24]
   15320:	add	r1, r5, #168	; 0xa8
   15324:	ldr	r3, [r5, #52]	; 0x34
   15328:	add	r3, r3, #1
   1532c:	mov	r2, r3
   15330:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15334:	bl	10f1c <memmove@plt>
   15338:	b	15344 <__assert_fail@plt+0x417c>
   1533c:	add	r3, r5, #168	; 0xa8
   15340:	str	r3, [r5, #24]
   15344:	ldr	r3, [r4, #44]	; 0x2c
   15348:	cmp	r3, #0
   1534c:	beq	15360 <__assert_fail@plt+0x4198>
   15350:	ldr	r3, [r4, #48]	; 0x30
   15354:	and	r3, r3, #1024	; 0x400
   15358:	cmp	r3, #0
   1535c:	beq	15420 <__assert_fail@plt+0x4258>
   15360:	ldr	r3, [r4, #48]	; 0x30
   15364:	and	r3, r3, #8
   15368:	cmp	r3, #0
   1536c:	beq	153b8 <__assert_fail@plt+0x41f0>
   15370:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15374:	ldrb	r3, [r3, #18]
   15378:	cmp	r3, #0
   1537c:	beq	153b8 <__assert_fail@plt+0x41f0>
   15380:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15384:	ldrb	r3, [r3, #18]
   15388:	cmp	r3, #4
   1538c:	beq	153b8 <__assert_fail@plt+0x41f0>
   15390:	ldr	r3, [r4, #48]	; 0x30
   15394:	and	r3, r3, #16
   15398:	cmp	r3, #0
   1539c:	bne	153b0 <__assert_fail@plt+0x41e8>
   153a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   153a4:	ldrb	r3, [r3, #18]
   153a8:	cmp	r3, #10
   153ac:	beq	153b8 <__assert_fail@plt+0x41f0>
   153b0:	mov	r3, #1
   153b4:	b	153bc <__assert_fail@plt+0x41f4>
   153b8:	mov	r3, #0
   153bc:	strb	r3, [fp, #-81]	; 0xffffffaf
   153c0:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   153c4:	and	r3, r3, #1
   153c8:	strb	r3, [fp, #-81]	; 0xffffffaf
   153cc:	mov	r3, #11
   153d0:	strh	r3, [r5, #56]	; 0x38
   153d4:	add	r2, r5, #64	; 0x40
   153d8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   153dc:	ldrb	r3, [r3, #18]
   153e0:	mov	r1, r3
   153e4:	mov	r0, r2
   153e8:	bl	14ac8 <__assert_fail@plt+0x3900>
   153ec:	ldrb	r3, [fp, #-81]	; 0xffffffaf
   153f0:	cmp	r3, #0
   153f4:	movne	r3, #1
   153f8:	moveq	r3, #0
   153fc:	uxtb	r3, r3
   15400:	eor	r3, r3, #1
   15404:	uxtb	r3, r3
   15408:	and	r3, r3, #1
   1540c:	uxtb	r3, r3
   15410:	mov	r1, r3
   15414:	mov	r0, r5
   15418:	bl	1336c <__assert_fail@plt+0x21a4>
   1541c:	b	15438 <__assert_fail@plt+0x4270>
   15420:	mov	r2, #0
   15424:	mov	r1, r5
   15428:	mov	r0, r4
   1542c:	bl	156d0 <__assert_fail@plt+0x4508>
   15430:	mov	r3, r0
   15434:	strh	r3, [r5, #56]	; 0x38
   15438:	mov	r3, #0
   1543c:	str	r3, [r5, #8]
   15440:	cmp	r7, #0
   15444:	bne	15454 <__assert_fail@plt+0x428c>
   15448:	str	r5, [fp, #-24]	; 0xffffffe8
   1544c:	ldr	r7, [fp, #-24]	; 0xffffffe8
   15450:	b	15460 <__assert_fail@plt+0x4298>
   15454:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15458:	str	r5, [r3, #8]
   1545c:	str	r5, [fp, #-24]	; 0xffffffe8
   15460:	ldr	r3, [pc, #604]	; 156c4 <__assert_fail@plt+0x44fc>
   15464:	cmp	r6, r3
   15468:	bne	15490 <__assert_fail@plt+0x42c8>
   1546c:	ldr	r3, [r4, #44]	; 0x2c
   15470:	cmp	r3, #0
   15474:	bne	15490 <__assert_fail@plt+0x42c8>
   15478:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1547c:	mov	r1, r3
   15480:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15484:	bl	13f5c <__assert_fail@plt+0x2d94>
   15488:	mov	r3, r0
   1548c:	strb	r3, [fp, #-37]	; 0xffffffdb
   15490:	add	r6, r6, #1
   15494:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15498:	cmp	r3, r6
   1549c:	bls	154e8 <__assert_fail@plt+0x4320>
   154a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154a4:	ldr	r3, [r3, #12]
   154a8:	cmp	r3, #0
   154ac:	bne	15054 <__assert_fail@plt+0x3e8c>
   154b0:	b	154b8 <__assert_fail@plt+0x42f0>
   154b4:	nop			; (mov r0, r0)
   154b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154bc:	ldr	r3, [r3, #12]
   154c0:	cmp	r3, #0
   154c4:	beq	154ec <__assert_fail@plt+0x4324>
   154c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154cc:	ldr	r3, [r3, #12]
   154d0:	mov	r0, r3
   154d4:	bl	111bc <closedir@plt>
   154d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   154dc:	mov	r2, #0
   154e0:	str	r2, [r3, #12]
   154e4:	b	154ec <__assert_fail@plt+0x4324>
   154e8:	nop			; (mov r0, r0)
   154ec:	ldrb	r3, [fp, #-26]	; 0xffffffe6
   154f0:	cmp	r3, #0
   154f4:	beq	15504 <__assert_fail@plt+0x433c>
   154f8:	mov	r1, r7
   154fc:	mov	r0, r4
   15500:	bl	15c38 <__assert_fail@plt+0x4a70>
   15504:	ldr	r3, [r4, #48]	; 0x30
   15508:	and	r3, r3, #4
   1550c:	cmp	r3, #0
   15510:	beq	15544 <__assert_fail@plt+0x437c>
   15514:	ldr	r2, [r4, #36]	; 0x24
   15518:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1551c:	cmp	r2, r3
   15520:	beq	1552c <__assert_fail@plt+0x4364>
   15524:	cmp	r6, #0
   15528:	bne	15538 <__assert_fail@plt+0x4370>
   1552c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15530:	sub	r3, r3, #1
   15534:	str	r3, [fp, #-36]	; 0xffffffdc
   15538:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1553c:	mov	r2, #0
   15540:	strb	r2, [r3]
   15544:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   15548:	eor	r3, r3, #1
   1554c:	uxtb	r3, r3
   15550:	cmp	r3, #0
   15554:	beq	15604 <__assert_fail@plt+0x443c>
   15558:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1555c:	cmp	r3, #0
   15560:	beq	15604 <__assert_fail@plt+0x443c>
   15564:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15568:	cmp	r3, #1
   1556c:	beq	15578 <__assert_fail@plt+0x43b0>
   15570:	cmp	r6, #0
   15574:	bne	15604 <__assert_fail@plt+0x443c>
   15578:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1557c:	ldr	r3, [r3, #48]	; 0x30
   15580:	cmp	r3, #0
   15584:	bne	155a8 <__assert_fail@plt+0x43e0>
   15588:	mov	r0, r4
   1558c:	bl	13490 <__assert_fail@plt+0x22c8>
   15590:	mov	r3, r0
   15594:	cmp	r3, #0
   15598:	movne	r3, #1
   1559c:	moveq	r3, #0
   155a0:	uxtb	r3, r3
   155a4:	b	155d4 <__assert_fail@plt+0x440c>
   155a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   155ac:	ldr	r1, [r3, #4]
   155b0:	ldr	r3, [pc, #272]	; 156c8 <__assert_fail@plt+0x4500>
   155b4:	mvn	r2, #0
   155b8:	mov	r0, r4
   155bc:	bl	15dec <__assert_fail@plt+0x4c24>
   155c0:	mov	r3, r0
   155c4:	cmp	r3, #0
   155c8:	movne	r3, #1
   155cc:	moveq	r3, #0
   155d0:	uxtb	r3, r3
   155d4:	cmp	r3, #0
   155d8:	beq	15604 <__assert_fail@plt+0x443c>
   155dc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   155e0:	mov	r2, #7
   155e4:	strh	r2, [r3, #56]	; 0x38
   155e8:	ldr	r3, [r4, #48]	; 0x30
   155ec:	orr	r3, r3, #8192	; 0x2000
   155f0:	str	r3, [r4, #48]	; 0x30
   155f4:	mov	r0, r7
   155f8:	bl	15b04 <__assert_fail@plt+0x493c>
   155fc:	mov	r3, #0
   15600:	b	156b0 <__assert_fail@plt+0x44e8>
   15604:	cmp	r6, #0
   15608:	bne	15654 <__assert_fail@plt+0x448c>
   1560c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15610:	cmp	r3, #3
   15614:	bne	15644 <__assert_fail@plt+0x447c>
   15618:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1561c:	ldrh	r3, [r3, #56]	; 0x38
   15620:	cmp	r3, #4
   15624:	beq	15644 <__assert_fail@plt+0x447c>
   15628:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1562c:	ldrh	r3, [r3, #56]	; 0x38
   15630:	cmp	r3, #7
   15634:	beq	15644 <__assert_fail@plt+0x447c>
   15638:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1563c:	mov	r2, #6
   15640:	strh	r2, [r3, #56]	; 0x38
   15644:	mov	r0, r7
   15648:	bl	15b04 <__assert_fail@plt+0x493c>
   1564c:	mov	r3, #0
   15650:	b	156b0 <__assert_fail@plt+0x44e8>
   15654:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   15658:	cmp	r3, #0
   1565c:	beq	15684 <__assert_fail@plt+0x44bc>
   15660:	ldr	r3, [pc, #100]	; 156cc <__assert_fail@plt+0x4504>
   15664:	str	r3, [r4, #44]	; 0x2c
   15668:	mov	r2, r6
   1566c:	mov	r1, r7
   15670:	mov	r0, r4
   15674:	bl	15900 <__assert_fail@plt+0x4738>
   15678:	mov	r7, r0
   1567c:	mov	r3, #0
   15680:	str	r3, [r4, #44]	; 0x2c
   15684:	ldr	r3, [r4, #44]	; 0x2c
   15688:	cmp	r3, #0
   1568c:	beq	156ac <__assert_fail@plt+0x44e4>
   15690:	cmp	r6, #1
   15694:	bls	156ac <__assert_fail@plt+0x44e4>
   15698:	mov	r2, r6
   1569c:	mov	r1, r7
   156a0:	mov	r0, r4
   156a4:	bl	15900 <__assert_fail@plt+0x4738>
   156a8:	mov	r7, r0
   156ac:	mov	r3, r7
   156b0:	mov	r0, r3
   156b4:	sub	sp, fp, #20
   156b8:	pop	{r4, r5, r6, r7, fp, pc}
   156bc:	andeq	r8, r1, r0, lsr #13
   156c0:	andeq	r0, r0, r6, lsl #8
   156c4:	andeq	r2, r0, r0, lsl r7
   156c8:	andeq	pc, r1, r0, ror r0	; <UNPREDICTABLE>
   156cc:	andeq	r4, r1, r4, asr #20
   156d0:	push	{r4, fp, lr}
   156d4:	add	fp, sp, #8
   156d8:	sub	sp, sp, #20
   156dc:	str	r0, [fp, #-24]	; 0xffffffe8
   156e0:	mov	r4, r1
   156e4:	mov	r3, r2
   156e8:	strb	r3, [fp, #-25]	; 0xffffffe7
   156ec:	add	r3, r4, #64	; 0x40
   156f0:	str	r3, [fp, #-16]
   156f4:	ldr	r3, [r4, #48]	; 0x30
   156f8:	cmp	r3, #0
   156fc:	bne	1571c <__assert_fail@plt+0x4554>
   15700:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15704:	ldr	r3, [r3, #48]	; 0x30
   15708:	and	r3, r3, #1
   1570c:	cmp	r3, #0
   15710:	beq	1571c <__assert_fail@plt+0x4554>
   15714:	mov	r3, #1
   15718:	strb	r3, [fp, #-25]	; 0xffffffe7
   1571c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15720:	ldr	r3, [r3, #48]	; 0x30
   15724:	and	r3, r3, #2
   15728:	cmp	r3, #0
   1572c:	bne	1573c <__assert_fail@plt+0x4574>
   15730:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15734:	cmp	r3, #0
   15738:	beq	157b4 <__assert_fail@plt+0x45ec>
   1573c:	ldr	r3, [r4, #24]
   15740:	ldr	r1, [fp, #-16]
   15744:	mov	r0, r3
   15748:	bl	1e520 <__assert_fail@plt+0xd358>
   1574c:	mov	r3, r0
   15750:	cmp	r3, #0
   15754:	beq	15800 <__assert_fail@plt+0x4638>
   15758:	bl	1109c <__errno_location@plt>
   1575c:	mov	r3, r0
   15760:	ldr	r3, [r3]
   15764:	cmp	r3, #2
   15768:	bne	157a0 <__assert_fail@plt+0x45d8>
   1576c:	ldr	r3, [r4, #24]
   15770:	ldr	r1, [fp, #-16]
   15774:	mov	r0, r3
   15778:	bl	1e540 <__assert_fail@plt+0xd378>
   1577c:	mov	r3, r0
   15780:	cmp	r3, #0
   15784:	bne	157a0 <__assert_fail@plt+0x45d8>
   15788:	bl	1109c <__errno_location@plt>
   1578c:	mov	r2, r0
   15790:	mov	r3, #0
   15794:	str	r3, [r2]
   15798:	mov	r3, #13
   1579c:	b	158a4 <__assert_fail@plt+0x46dc>
   157a0:	bl	1109c <__errno_location@plt>
   157a4:	mov	r3, r0
   157a8:	ldr	r3, [r3]
   157ac:	str	r3, [r4, #32]
   157b0:	b	157e8 <__assert_fail@plt+0x4620>
   157b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157b8:	ldr	r0, [r3, #32]
   157bc:	ldr	r1, [r4, #24]
   157c0:	mov	r3, #256	; 0x100
   157c4:	ldr	r2, [fp, #-16]
   157c8:	bl	1e550 <__assert_fail@plt+0xd388>
   157cc:	mov	r3, r0
   157d0:	cmp	r3, #0
   157d4:	beq	15800 <__assert_fail@plt+0x4638>
   157d8:	bl	1109c <__errno_location@plt>
   157dc:	mov	r3, r0
   157e0:	ldr	r3, [r3]
   157e4:	str	r3, [r4, #32]
   157e8:	mov	r2, #104	; 0x68
   157ec:	mov	r1, #0
   157f0:	ldr	r0, [fp, #-16]
   157f4:	bl	110b4 <memset@plt>
   157f8:	mov	r3, #10
   157fc:	b	158a4 <__assert_fail@plt+0x46dc>
   15800:	ldr	r3, [fp, #-16]
   15804:	ldr	r3, [r3, #16]
   15808:	and	r3, r3, #61440	; 0xf000
   1580c:	cmp	r3, #16384	; 0x4000
   15810:	bne	15868 <__assert_fail@plt+0x46a0>
   15814:	ldrb	r3, [r4, #168]	; 0xa8
   15818:	cmp	r3, #46	; 0x2e
   1581c:	bne	15860 <__assert_fail@plt+0x4698>
   15820:	ldrb	r3, [r4, #169]	; 0xa9
   15824:	cmp	r3, #0
   15828:	beq	15844 <__assert_fail@plt+0x467c>
   1582c:	ldrb	r3, [r4, #169]	; 0xa9
   15830:	cmp	r3, #46	; 0x2e
   15834:	bne	15860 <__assert_fail@plt+0x4698>
   15838:	ldrb	r3, [r4, #170]	; 0xaa
   1583c:	cmp	r3, #0
   15840:	bne	15860 <__assert_fail@plt+0x4698>
   15844:	ldr	r3, [r4, #48]	; 0x30
   15848:	cmp	r3, #0
   1584c:	bne	15858 <__assert_fail@plt+0x4690>
   15850:	mov	r3, #1
   15854:	b	158a4 <__assert_fail@plt+0x46dc>
   15858:	mov	r3, #5
   1585c:	b	158a4 <__assert_fail@plt+0x46dc>
   15860:	mov	r3, #1
   15864:	b	158a4 <__assert_fail@plt+0x46dc>
   15868:	ldr	r3, [fp, #-16]
   1586c:	ldr	r3, [r3, #16]
   15870:	and	r3, r3, #61440	; 0xf000
   15874:	cmp	r3, #40960	; 0xa000
   15878:	bne	15884 <__assert_fail@plt+0x46bc>
   1587c:	mov	r3, #12
   15880:	b	158a4 <__assert_fail@plt+0x46dc>
   15884:	ldr	r3, [fp, #-16]
   15888:	ldr	r3, [r3, #16]
   1588c:	and	r3, r3, #61440	; 0xf000
   15890:	cmp	r3, #32768	; 0x8000
   15894:	bne	158a0 <__assert_fail@plt+0x46d8>
   15898:	mov	r3, #8
   1589c:	b	158a4 <__assert_fail@plt+0x46dc>
   158a0:	mov	r3, #3
   158a4:	mov	r0, r3
   158a8:	sub	sp, fp, #8
   158ac:	pop	{r4, fp, pc}
   158b0:	push	{fp, lr}
   158b4:	add	fp, sp, #4
   158b8:	sub	sp, sp, #16
   158bc:	str	r0, [fp, #-16]
   158c0:	str	r1, [fp, #-20]	; 0xffffffec
   158c4:	ldr	r3, [fp, #-16]
   158c8:	str	r3, [fp, #-8]
   158cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   158d0:	str	r3, [fp, #-12]
   158d4:	ldr	r3, [fp, #-8]
   158d8:	ldr	r3, [r3]
   158dc:	ldr	r3, [r3, #44]	; 0x2c
   158e0:	ldr	r3, [r3, #44]	; 0x2c
   158e4:	ldr	r1, [fp, #-12]
   158e8:	ldr	r0, [fp, #-8]
   158ec:	blx	r3
   158f0:	mov	r3, r0
   158f4:	mov	r0, r3
   158f8:	sub	sp, fp, #4
   158fc:	pop	{fp, pc}
   15900:	push	{r4, r5, r6, fp, lr}
   15904:	add	fp, sp, #16
   15908:	sub	sp, sp, #28
   1590c:	str	r0, [fp, #-40]	; 0xffffffd8
   15910:	str	r1, [fp, #-44]	; 0xffffffd4
   15914:	mov	r5, r2
   15918:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1591c:	ldr	r3, [r3, #44]	; 0x2c
   15920:	str	r3, [fp, #-24]	; 0xffffffe8
   15924:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15928:	ldr	r3, [r3, #40]	; 0x28
   1592c:	cmp	r3, r5
   15930:	bcs	159bc <__assert_fail@plt+0x47f4>
   15934:	add	r2, r5, #40	; 0x28
   15938:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1593c:	str	r2, [r3, #40]	; 0x28
   15940:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15944:	ldr	r3, [r3, #40]	; 0x28
   15948:	cmn	r3, #-1073741823	; 0xc0000001
   1594c:	bhi	15980 <__assert_fail@plt+0x47b8>
   15950:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15954:	ldr	r2, [r3, #8]
   15958:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1595c:	ldr	r3, [r3, #40]	; 0x28
   15960:	lsl	r3, r3, #2
   15964:	mov	r1, r3
   15968:	mov	r0, r2
   1596c:	bl	1c6c4 <__assert_fail@plt+0xb4fc>
   15970:	str	r0, [fp, #-28]	; 0xffffffe4
   15974:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15978:	cmp	r3, #0
   1597c:	bne	159b0 <__assert_fail@plt+0x47e8>
   15980:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15984:	ldr	r3, [r3, #8]
   15988:	mov	r0, r3
   1598c:	bl	1d358 <__assert_fail@plt+0xc190>
   15990:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15994:	mov	r2, #0
   15998:	str	r2, [r3, #8]
   1599c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   159a0:	mov	r2, #0
   159a4:	str	r2, [r3, #40]	; 0x28
   159a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   159ac:	b	15a3c <__assert_fail@plt+0x4874>
   159b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   159b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   159b8:	str	r2, [r3, #8]
   159bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   159c0:	ldr	r4, [r3, #8]
   159c4:	ldr	r6, [fp, #-44]	; 0xffffffd4
   159c8:	b	159dc <__assert_fail@plt+0x4814>
   159cc:	mov	r3, r4
   159d0:	add	r4, r3, #4
   159d4:	str	r6, [r3]
   159d8:	ldr	r6, [r6, #8]
   159dc:	cmp	r6, #0
   159e0:	bne	159cc <__assert_fail@plt+0x4804>
   159e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   159e8:	ldr	r0, [r3, #8]
   159ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   159f0:	mov	r2, #4
   159f4:	mov	r1, r5
   159f8:	bl	11150 <qsort@plt>
   159fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a00:	ldr	r4, [r3, #8]
   15a04:	ldr	r3, [r4]
   15a08:	str	r3, [fp, #-44]	; 0xffffffd4
   15a0c:	b	15a20 <__assert_fail@plt+0x4858>
   15a10:	ldr	r3, [r4]
   15a14:	ldr	r2, [r4, #4]
   15a18:	str	r2, [r3, #8]
   15a1c:	add	r4, r4, #4
   15a20:	sub	r5, r5, #1
   15a24:	cmp	r5, #0
   15a28:	bne	15a10 <__assert_fail@plt+0x4848>
   15a2c:	ldr	r3, [r4]
   15a30:	mov	r2, #0
   15a34:	str	r2, [r3, #8]
   15a38:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15a3c:	mov	r0, r3
   15a40:	sub	sp, fp, #16
   15a44:	pop	{r4, r5, r6, fp, pc}
   15a48:	push	{r4, r5, fp, lr}
   15a4c:	add	fp, sp, #12
   15a50:	sub	sp, sp, #16
   15a54:	str	r0, [fp, #-24]	; 0xffffffe8
   15a58:	str	r1, [fp, #-28]	; 0xffffffe4
   15a5c:	mov	r5, r2
   15a60:	add	r3, r5, #176	; 0xb0
   15a64:	bic	r3, r3, #7
   15a68:	str	r3, [fp, #-16]
   15a6c:	ldr	r0, [fp, #-16]
   15a70:	bl	1c61c <__assert_fail@plt+0xb454>
   15a74:	mov	r3, r0
   15a78:	mov	r4, r3
   15a7c:	cmp	r4, #0
   15a80:	bne	15a8c <__assert_fail@plt+0x48c4>
   15a84:	mov	r3, #0
   15a88:	b	15af8 <__assert_fail@plt+0x4930>
   15a8c:	add	r3, r4, #168	; 0xa8
   15a90:	mov	r2, r5
   15a94:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15a98:	mov	r0, r3
   15a9c:	bl	10f40 <memcpy@plt>
   15aa0:	add	r3, r4, r5
   15aa4:	mov	r2, #0
   15aa8:	strb	r2, [r3, #168]	; 0xa8
   15aac:	str	r5, [r4, #52]	; 0x34
   15ab0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ab4:	str	r3, [r4, #44]	; 0x2c
   15ab8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15abc:	ldr	r3, [r3, #24]
   15ac0:	str	r3, [r4, #28]
   15ac4:	mov	r3, #0
   15ac8:	str	r3, [r4, #32]
   15acc:	mov	r3, #0
   15ad0:	str	r3, [r4, #12]
   15ad4:	mov	r3, #0
   15ad8:	strh	r3, [r4, #58]	; 0x3a
   15adc:	mov	r3, #3
   15ae0:	strh	r3, [r4, #60]	; 0x3c
   15ae4:	mov	r3, #0
   15ae8:	str	r3, [r4, #16]
   15aec:	mov	r3, #0
   15af0:	str	r3, [r4, #20]
   15af4:	mov	r3, r4
   15af8:	mov	r0, r3
   15afc:	sub	sp, fp, #12
   15b00:	pop	{r4, r5, fp, pc}
   15b04:	push	{r4, r5, fp, lr}
   15b08:	add	fp, sp, #12
   15b0c:	mov	r5, r0
   15b10:	b	15b38 <__assert_fail@plt+0x4970>
   15b14:	ldr	r5, [r5, #8]
   15b18:	ldr	r3, [r4, #12]
   15b1c:	cmp	r3, #0
   15b20:	beq	15b30 <__assert_fail@plt+0x4968>
   15b24:	ldr	r3, [r4, #12]
   15b28:	mov	r0, r3
   15b2c:	bl	111bc <closedir@plt>
   15b30:	mov	r0, r4
   15b34:	bl	1d358 <__assert_fail@plt+0xc190>
   15b38:	mov	r4, r5
   15b3c:	cmp	r4, #0
   15b40:	bne	15b14 <__assert_fail@plt+0x494c>
   15b44:	nop			; (mov r0, r0)
   15b48:	pop	{r4, r5, fp, pc}
   15b4c:	push	{fp, lr}
   15b50:	add	fp, sp, #4
   15b54:	sub	sp, sp, #16
   15b58:	str	r0, [fp, #-16]
   15b5c:	str	r1, [fp, #-20]	; 0xffffffec
   15b60:	ldr	r3, [fp, #-16]
   15b64:	ldr	r2, [r3, #36]	; 0x24
   15b68:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b6c:	add	r3, r2, r3
   15b70:	add	r3, r3, #256	; 0x100
   15b74:	str	r3, [fp, #-8]
   15b78:	ldr	r3, [fp, #-16]
   15b7c:	ldr	r2, [r3, #36]	; 0x24
   15b80:	ldr	r3, [fp, #-8]
   15b84:	cmp	r2, r3
   15b88:	bls	15bc0 <__assert_fail@plt+0x49f8>
   15b8c:	ldr	r3, [fp, #-16]
   15b90:	ldr	r3, [r3, #24]
   15b94:	mov	r0, r3
   15b98:	bl	1d358 <__assert_fail@plt+0xc190>
   15b9c:	ldr	r3, [fp, #-16]
   15ba0:	mov	r2, #0
   15ba4:	str	r2, [r3, #24]
   15ba8:	bl	1109c <__errno_location@plt>
   15bac:	mov	r2, r0
   15bb0:	mov	r3, #36	; 0x24
   15bb4:	str	r3, [r2]
   15bb8:	mov	r3, #0
   15bbc:	b	15c2c <__assert_fail@plt+0x4a64>
   15bc0:	ldr	r3, [fp, #-16]
   15bc4:	ldr	r2, [fp, #-8]
   15bc8:	str	r2, [r3, #36]	; 0x24
   15bcc:	ldr	r3, [fp, #-16]
   15bd0:	ldr	r2, [r3, #24]
   15bd4:	ldr	r3, [fp, #-16]
   15bd8:	ldr	r3, [r3, #36]	; 0x24
   15bdc:	mov	r1, r3
   15be0:	mov	r0, r2
   15be4:	bl	1c6c4 <__assert_fail@plt+0xb4fc>
   15be8:	str	r0, [fp, #-12]
   15bec:	ldr	r3, [fp, #-12]
   15bf0:	cmp	r3, #0
   15bf4:	bne	15c1c <__assert_fail@plt+0x4a54>
   15bf8:	ldr	r3, [fp, #-16]
   15bfc:	ldr	r3, [r3, #24]
   15c00:	mov	r0, r3
   15c04:	bl	1d358 <__assert_fail@plt+0xc190>
   15c08:	ldr	r3, [fp, #-16]
   15c0c:	mov	r2, #0
   15c10:	str	r2, [r3, #24]
   15c14:	mov	r3, #0
   15c18:	b	15c2c <__assert_fail@plt+0x4a64>
   15c1c:	ldr	r3, [fp, #-16]
   15c20:	ldr	r2, [fp, #-12]
   15c24:	str	r2, [r3, #24]
   15c28:	mov	r3, #1
   15c2c:	mov	r0, r3
   15c30:	sub	sp, fp, #4
   15c34:	pop	{fp, pc}
   15c38:	push	{fp}		; (str fp, [sp, #-4]!)
   15c3c:	add	fp, sp, #0
   15c40:	sub	sp, sp, #20
   15c44:	str	r0, [fp, #-16]
   15c48:	str	r1, [fp, #-20]	; 0xffffffec
   15c4c:	ldr	r3, [fp, #-16]
   15c50:	ldr	r3, [r3, #24]
   15c54:	str	r3, [fp, #-12]
   15c58:	ldr	r3, [fp, #-16]
   15c5c:	ldr	r3, [r3, #4]
   15c60:	str	r3, [fp, #-8]
   15c64:	b	15cc4 <__assert_fail@plt+0x4afc>
   15c68:	ldr	r3, [fp, #-8]
   15c6c:	ldr	r2, [r3, #24]
   15c70:	ldr	r3, [fp, #-8]
   15c74:	add	r3, r3, #168	; 0xa8
   15c78:	cmp	r2, r3
   15c7c:	beq	15cac <__assert_fail@plt+0x4ae4>
   15c80:	ldr	r3, [fp, #-8]
   15c84:	ldr	r3, [r3, #24]
   15c88:	mov	r2, r3
   15c8c:	ldr	r3, [fp, #-8]
   15c90:	ldr	r3, [r3, #28]
   15c94:	sub	r3, r2, r3
   15c98:	mov	r2, r3
   15c9c:	ldr	r3, [fp, #-12]
   15ca0:	add	r2, r3, r2
   15ca4:	ldr	r3, [fp, #-8]
   15ca8:	str	r2, [r3, #24]
   15cac:	ldr	r3, [fp, #-8]
   15cb0:	ldr	r2, [fp, #-12]
   15cb4:	str	r2, [r3, #28]
   15cb8:	ldr	r3, [fp, #-8]
   15cbc:	ldr	r3, [r3, #8]
   15cc0:	str	r3, [fp, #-8]
   15cc4:	ldr	r3, [fp, #-8]
   15cc8:	cmp	r3, #0
   15ccc:	bne	15c68 <__assert_fail@plt+0x4aa0>
   15cd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15cd4:	str	r3, [fp, #-8]
   15cd8:	b	15d54 <__assert_fail@plt+0x4b8c>
   15cdc:	ldr	r3, [fp, #-8]
   15ce0:	ldr	r2, [r3, #24]
   15ce4:	ldr	r3, [fp, #-8]
   15ce8:	add	r3, r3, #168	; 0xa8
   15cec:	cmp	r2, r3
   15cf0:	beq	15d20 <__assert_fail@plt+0x4b58>
   15cf4:	ldr	r3, [fp, #-8]
   15cf8:	ldr	r3, [r3, #24]
   15cfc:	mov	r2, r3
   15d00:	ldr	r3, [fp, #-8]
   15d04:	ldr	r3, [r3, #28]
   15d08:	sub	r3, r2, r3
   15d0c:	mov	r2, r3
   15d10:	ldr	r3, [fp, #-12]
   15d14:	add	r2, r3, r2
   15d18:	ldr	r3, [fp, #-8]
   15d1c:	str	r2, [r3, #24]
   15d20:	ldr	r3, [fp, #-8]
   15d24:	ldr	r2, [fp, #-12]
   15d28:	str	r2, [r3, #28]
   15d2c:	ldr	r3, [fp, #-8]
   15d30:	ldr	r3, [r3, #8]
   15d34:	cmp	r3, #0
   15d38:	beq	15d48 <__assert_fail@plt+0x4b80>
   15d3c:	ldr	r3, [fp, #-8]
   15d40:	ldr	r3, [r3, #8]
   15d44:	b	15d50 <__assert_fail@plt+0x4b88>
   15d48:	ldr	r3, [fp, #-8]
   15d4c:	ldr	r3, [r3, #4]
   15d50:	str	r3, [fp, #-8]
   15d54:	ldr	r3, [fp, #-8]
   15d58:	ldr	r3, [r3, #48]	; 0x30
   15d5c:	cmp	r3, #0
   15d60:	bge	15cdc <__assert_fail@plt+0x4b14>
   15d64:	nop			; (mov r0, r0)
   15d68:	add	sp, fp, #0
   15d6c:	pop	{fp}		; (ldr fp, [sp], #4)
   15d70:	bx	lr
   15d74:	push	{fp, lr}
   15d78:	add	fp, sp, #4
   15d7c:	sub	sp, sp, #16
   15d80:	str	r0, [fp, #-16]
   15d84:	mov	r3, #0
   15d88:	str	r3, [fp, #-8]
   15d8c:	b	15dc8 <__assert_fail@plt+0x4c00>
   15d90:	ldr	r3, [fp, #-16]
   15d94:	ldr	r3, [r3]
   15d98:	mov	r0, r3
   15d9c:	bl	1106c <strlen@plt>
   15da0:	str	r0, [fp, #-12]
   15da4:	ldr	r2, [fp, #-12]
   15da8:	ldr	r3, [fp, #-8]
   15dac:	cmp	r2, r3
   15db0:	bls	15dbc <__assert_fail@plt+0x4bf4>
   15db4:	ldr	r3, [fp, #-12]
   15db8:	str	r3, [fp, #-8]
   15dbc:	ldr	r3, [fp, #-16]
   15dc0:	add	r3, r3, #4
   15dc4:	str	r3, [fp, #-16]
   15dc8:	ldr	r3, [fp, #-16]
   15dcc:	ldr	r3, [r3]
   15dd0:	cmp	r3, #0
   15dd4:	bne	15d90 <__assert_fail@plt+0x4bc8>
   15dd8:	ldr	r3, [fp, #-8]
   15ddc:	add	r3, r3, #1
   15de0:	mov	r0, r3
   15de4:	sub	sp, fp, #4
   15de8:	pop	{fp, pc}
   15dec:	push	{fp, lr}
   15df0:	add	fp, sp, #4
   15df4:	sub	sp, sp, #144	; 0x90
   15df8:	str	r0, [fp, #-136]	; 0xffffff78
   15dfc:	str	r1, [fp, #-140]	; 0xffffff74
   15e00:	str	r2, [fp, #-144]	; 0xffffff70
   15e04:	str	r3, [fp, #-148]	; 0xffffff6c
   15e08:	ldr	r3, [fp, #-148]	; 0xffffff6c
   15e0c:	cmp	r3, #0
   15e10:	beq	15e34 <__assert_fail@plt+0x4c6c>
   15e14:	ldr	r1, [pc, #632]	; 16094 <__assert_fail@plt+0x4ecc>
   15e18:	ldr	r0, [fp, #-148]	; 0xffffff6c
   15e1c:	bl	10ef8 <strcmp@plt>
   15e20:	mov	r3, r0
   15e24:	cmp	r3, #0
   15e28:	bne	15e34 <__assert_fail@plt+0x4c6c>
   15e2c:	mov	r3, #1
   15e30:	b	15e38 <__assert_fail@plt+0x4c70>
   15e34:	mov	r3, #0
   15e38:	strb	r3, [fp, #-13]
   15e3c:	ldrb	r3, [fp, #-13]
   15e40:	and	r3, r3, #1
   15e44:	strb	r3, [fp, #-13]
   15e48:	ldr	r3, [fp, #-136]	; 0xffffff78
   15e4c:	ldr	r3, [r3, #48]	; 0x30
   15e50:	and	r3, r3, #4
   15e54:	cmp	r3, #0
   15e58:	beq	15e8c <__assert_fail@plt+0x4cc4>
   15e5c:	ldr	r3, [fp, #-136]	; 0xffffff78
   15e60:	ldr	r3, [r3, #48]	; 0x30
   15e64:	and	r3, r3, #512	; 0x200
   15e68:	cmp	r3, #0
   15e6c:	beq	15e84 <__assert_fail@plt+0x4cbc>
   15e70:	ldr	r3, [fp, #-144]	; 0xffffff70
   15e74:	cmp	r3, #0
   15e78:	blt	15e84 <__assert_fail@plt+0x4cbc>
   15e7c:	ldr	r0, [fp, #-144]	; 0xffffff70
   15e80:	bl	111a4 <close@plt>
   15e84:	mov	r3, #0
   15e88:	b	16088 <__assert_fail@plt+0x4ec0>
   15e8c:	ldr	r3, [fp, #-144]	; 0xffffff70
   15e90:	cmp	r3, #0
   15e94:	bge	15f0c <__assert_fail@plt+0x4d44>
   15e98:	ldrb	r3, [fp, #-13]
   15e9c:	cmp	r3, #0
   15ea0:	beq	15f0c <__assert_fail@plt+0x4d44>
   15ea4:	ldr	r3, [fp, #-136]	; 0xffffff78
   15ea8:	ldr	r3, [r3, #48]	; 0x30
   15eac:	and	r3, r3, #512	; 0x200
   15eb0:	cmp	r3, #0
   15eb4:	beq	15f0c <__assert_fail@plt+0x4d44>
   15eb8:	ldr	r3, [fp, #-136]	; 0xffffff78
   15ebc:	add	r3, r3, #60	; 0x3c
   15ec0:	mov	r0, r3
   15ec4:	bl	17c80 <__assert_fail@plt+0x6ab8>
   15ec8:	mov	r3, r0
   15ecc:	eor	r3, r3, #1
   15ed0:	uxtb	r3, r3
   15ed4:	cmp	r3, #0
   15ed8:	beq	15f0c <__assert_fail@plt+0x4d44>
   15edc:	ldr	r3, [fp, #-136]	; 0xffffff78
   15ee0:	add	r3, r3, #60	; 0x3c
   15ee4:	mov	r0, r3
   15ee8:	bl	17d68 <__assert_fail@plt+0x6ba0>
   15eec:	str	r0, [fp, #-20]	; 0xffffffec
   15ef0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ef4:	cmp	r3, #0
   15ef8:	blt	15f0c <__assert_fail@plt+0x4d44>
   15efc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f00:	str	r3, [fp, #-144]	; 0xffffff70
   15f04:	mov	r3, #0
   15f08:	str	r3, [fp, #-148]	; 0xffffff6c
   15f0c:	ldr	r3, [fp, #-144]	; 0xffffff70
   15f10:	str	r3, [fp, #-12]
   15f14:	ldr	r3, [fp, #-144]	; 0xffffff70
   15f18:	cmp	r3, #0
   15f1c:	bge	15f44 <__assert_fail@plt+0x4d7c>
   15f20:	ldr	r1, [fp, #-148]	; 0xffffff6c
   15f24:	ldr	r0, [fp, #-136]	; 0xffffff78
   15f28:	bl	13568 <__assert_fail@plt+0x23a0>
   15f2c:	str	r0, [fp, #-12]
   15f30:	ldr	r3, [fp, #-12]
   15f34:	cmp	r3, #0
   15f38:	bge	15f44 <__assert_fail@plt+0x4d7c>
   15f3c:	mvn	r3, #0
   15f40:	b	16088 <__assert_fail@plt+0x4ec0>
   15f44:	ldr	r3, [fp, #-136]	; 0xffffff78
   15f48:	ldr	r3, [r3, #48]	; 0x30
   15f4c:	and	r3, r3, #2
   15f50:	cmp	r3, #0
   15f54:	bne	15f7c <__assert_fail@plt+0x4db4>
   15f58:	ldr	r3, [fp, #-148]	; 0xffffff6c
   15f5c:	cmp	r3, #0
   15f60:	beq	15ff4 <__assert_fail@plt+0x4e2c>
   15f64:	ldr	r1, [pc, #296]	; 16094 <__assert_fail@plt+0x4ecc>
   15f68:	ldr	r0, [fp, #-148]	; 0xffffff6c
   15f6c:	bl	10ef8 <strcmp@plt>
   15f70:	mov	r3, r0
   15f74:	cmp	r3, #0
   15f78:	bne	15ff4 <__assert_fail@plt+0x4e2c>
   15f7c:	sub	r3, fp, #132	; 0x84
   15f80:	mov	r1, r3
   15f84:	ldr	r0, [fp, #-12]
   15f88:	bl	1e530 <__assert_fail@plt+0xd368>
   15f8c:	mov	r3, r0
   15f90:	cmp	r3, #0
   15f94:	beq	15fa4 <__assert_fail@plt+0x4ddc>
   15f98:	mvn	r3, #0
   15f9c:	str	r3, [fp, #-8]
   15fa0:	b	16050 <__assert_fail@plt+0x4e88>
   15fa4:	ldr	r3, [fp, #-140]	; 0xffffff74
   15fa8:	ldrd	r0, [r3, #64]	; 0x40
   15fac:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   15fb0:	cmp	r1, r3
   15fb4:	cmpeq	r0, r2
   15fb8:	bne	15fd4 <__assert_fail@plt+0x4e0c>
   15fbc:	ldr	r3, [fp, #-140]	; 0xffffff74
   15fc0:	ldrd	r0, [r3, #160]	; 0xa0
   15fc4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   15fc8:	cmp	r1, r3
   15fcc:	cmpeq	r0, r2
   15fd0:	beq	15ff4 <__assert_fail@plt+0x4e2c>
   15fd4:	bl	1109c <__errno_location@plt>
   15fd8:	mov	r2, r0
   15fdc:	mov	r3, #2
   15fe0:	str	r3, [r2]
   15fe4:	mvn	r3, #0
   15fe8:	str	r3, [fp, #-8]
   15fec:	nop			; (mov r0, r0)
   15ff0:	b	16050 <__assert_fail@plt+0x4e88>
   15ff4:	ldr	r3, [fp, #-136]	; 0xffffff78
   15ff8:	ldr	r3, [r3, #48]	; 0x30
   15ffc:	and	r3, r3, #512	; 0x200
   16000:	cmp	r3, #0
   16004:	beq	16044 <__assert_fail@plt+0x4e7c>
   16008:	ldrb	r3, [fp, #-13]
   1600c:	cmp	r3, #0
   16010:	movne	r3, #1
   16014:	moveq	r3, #0
   16018:	uxtb	r3, r3
   1601c:	eor	r3, r3, #1
   16020:	uxtb	r3, r3
   16024:	and	r3, r3, #1
   16028:	uxtb	r3, r3
   1602c:	mov	r2, r3
   16030:	ldr	r1, [fp, #-12]
   16034:	ldr	r0, [fp, #-136]	; 0xffffff78
   16038:	bl	133cc <__assert_fail@plt+0x2204>
   1603c:	mov	r3, #0
   16040:	b	16088 <__assert_fail@plt+0x4ec0>
   16044:	ldr	r0, [fp, #-12]
   16048:	bl	11144 <fchdir@plt>
   1604c:	str	r0, [fp, #-8]
   16050:	ldr	r3, [fp, #-144]	; 0xffffff70
   16054:	cmp	r3, #0
   16058:	bge	16084 <__assert_fail@plt+0x4ebc>
   1605c:	bl	1109c <__errno_location@plt>
   16060:	mov	r3, r0
   16064:	ldr	r3, [r3]
   16068:	str	r3, [fp, #-24]	; 0xffffffe8
   1606c:	ldr	r0, [fp, #-12]
   16070:	bl	111a4 <close@plt>
   16074:	bl	1109c <__errno_location@plt>
   16078:	mov	r2, r0
   1607c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16080:	str	r3, [r2]
   16084:	ldr	r3, [fp, #-8]
   16088:	mov	r0, r3
   1608c:	sub	sp, fp, #4
   16090:	pop	{fp, pc}
   16094:	andeq	pc, r1, r0, ror r0	; <UNPREDICTABLE>
   16098:	push	{fp}		; (str fp, [sp, #-4]!)
   1609c:	add	fp, sp, #0
   160a0:	sub	sp, sp, #12
   160a4:	str	r0, [fp, #-8]
   160a8:	ldr	r3, [fp, #-8]
   160ac:	ldr	r3, [r3, #8]
   160b0:	mov	r0, r3
   160b4:	add	sp, fp, #0
   160b8:	pop	{fp}		; (ldr fp, [sp], #4)
   160bc:	bx	lr
   160c0:	push	{fp}		; (str fp, [sp, #-4]!)
   160c4:	add	fp, sp, #0
   160c8:	sub	sp, sp, #12
   160cc:	str	r0, [fp, #-8]
   160d0:	ldr	r3, [fp, #-8]
   160d4:	ldr	r3, [r3, #12]
   160d8:	mov	r0, r3
   160dc:	add	sp, fp, #0
   160e0:	pop	{fp}		; (ldr fp, [sp], #4)
   160e4:	bx	lr
   160e8:	push	{fp}		; (str fp, [sp, #-4]!)
   160ec:	add	fp, sp, #0
   160f0:	sub	sp, sp, #12
   160f4:	str	r0, [fp, #-8]
   160f8:	ldr	r3, [fp, #-8]
   160fc:	ldr	r3, [r3, #16]
   16100:	mov	r0, r3
   16104:	add	sp, fp, #0
   16108:	pop	{fp}		; (ldr fp, [sp], #4)
   1610c:	bx	lr
   16110:	push	{fp}		; (str fp, [sp, #-4]!)
   16114:	add	fp, sp, #0
   16118:	sub	sp, sp, #28
   1611c:	str	r0, [fp, #-24]	; 0xffffffe8
   16120:	mov	r3, #0
   16124:	str	r3, [fp, #-12]
   16128:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1612c:	ldr	r3, [r3]
   16130:	str	r3, [fp, #-8]
   16134:	b	161a4 <__assert_fail@plt+0x4fdc>
   16138:	ldr	r3, [fp, #-8]
   1613c:	ldr	r3, [r3]
   16140:	cmp	r3, #0
   16144:	beq	16198 <__assert_fail@plt+0x4fd0>
   16148:	ldr	r3, [fp, #-8]
   1614c:	str	r3, [fp, #-16]
   16150:	mov	r3, #1
   16154:	str	r3, [fp, #-20]	; 0xffffffec
   16158:	b	16168 <__assert_fail@plt+0x4fa0>
   1615c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16160:	add	r3, r3, #1
   16164:	str	r3, [fp, #-20]	; 0xffffffec
   16168:	ldr	r3, [fp, #-16]
   1616c:	ldr	r3, [r3, #4]
   16170:	str	r3, [fp, #-16]
   16174:	ldr	r3, [fp, #-16]
   16178:	cmp	r3, #0
   1617c:	bne	1615c <__assert_fail@plt+0x4f94>
   16180:	ldr	r2, [fp, #-20]	; 0xffffffec
   16184:	ldr	r3, [fp, #-12]
   16188:	cmp	r2, r3
   1618c:	bls	16198 <__assert_fail@plt+0x4fd0>
   16190:	ldr	r3, [fp, #-20]	; 0xffffffec
   16194:	str	r3, [fp, #-12]
   16198:	ldr	r3, [fp, #-8]
   1619c:	add	r3, r3, #8
   161a0:	str	r3, [fp, #-8]
   161a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   161a8:	ldr	r2, [r3, #4]
   161ac:	ldr	r3, [fp, #-8]
   161b0:	cmp	r2, r3
   161b4:	bhi	16138 <__assert_fail@plt+0x4f70>
   161b8:	ldr	r3, [fp, #-12]
   161bc:	mov	r0, r3
   161c0:	add	sp, fp, #0
   161c4:	pop	{fp}		; (ldr fp, [sp], #4)
   161c8:	bx	lr
   161cc:	push	{fp}		; (str fp, [sp, #-4]!)
   161d0:	add	fp, sp, #0
   161d4:	sub	sp, sp, #28
   161d8:	str	r0, [fp, #-24]	; 0xffffffe8
   161dc:	mov	r3, #0
   161e0:	str	r3, [fp, #-12]
   161e4:	mov	r3, #0
   161e8:	str	r3, [fp, #-16]
   161ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   161f0:	ldr	r3, [r3]
   161f4:	str	r3, [fp, #-8]
   161f8:	b	16260 <__assert_fail@plt+0x5098>
   161fc:	ldr	r3, [fp, #-8]
   16200:	ldr	r3, [r3]
   16204:	cmp	r3, #0
   16208:	beq	16254 <__assert_fail@plt+0x508c>
   1620c:	ldr	r3, [fp, #-8]
   16210:	str	r3, [fp, #-20]	; 0xffffffec
   16214:	ldr	r3, [fp, #-12]
   16218:	add	r3, r3, #1
   1621c:	str	r3, [fp, #-12]
   16220:	ldr	r3, [fp, #-16]
   16224:	add	r3, r3, #1
   16228:	str	r3, [fp, #-16]
   1622c:	b	1623c <__assert_fail@plt+0x5074>
   16230:	ldr	r3, [fp, #-16]
   16234:	add	r3, r3, #1
   16238:	str	r3, [fp, #-16]
   1623c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16240:	ldr	r3, [r3, #4]
   16244:	str	r3, [fp, #-20]	; 0xffffffec
   16248:	ldr	r3, [fp, #-20]	; 0xffffffec
   1624c:	cmp	r3, #0
   16250:	bne	16230 <__assert_fail@plt+0x5068>
   16254:	ldr	r3, [fp, #-8]
   16258:	add	r3, r3, #8
   1625c:	str	r3, [fp, #-8]
   16260:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16264:	ldr	r2, [r3, #4]
   16268:	ldr	r3, [fp, #-8]
   1626c:	cmp	r2, r3
   16270:	bhi	161fc <__assert_fail@plt+0x5034>
   16274:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16278:	ldr	r2, [r3, #12]
   1627c:	ldr	r3, [fp, #-12]
   16280:	cmp	r2, r3
   16284:	bne	162a4 <__assert_fail@plt+0x50dc>
   16288:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1628c:	ldr	r2, [r3, #16]
   16290:	ldr	r3, [fp, #-16]
   16294:	cmp	r2, r3
   16298:	bne	162a4 <__assert_fail@plt+0x50dc>
   1629c:	mov	r3, #1
   162a0:	b	162a8 <__assert_fail@plt+0x50e0>
   162a4:	mov	r3, #0
   162a8:	mov	r0, r3
   162ac:	add	sp, fp, #0
   162b0:	pop	{fp}		; (ldr fp, [sp], #4)
   162b4:	bx	lr
   162b8:	push	{fp, lr}
   162bc:	add	fp, sp, #4
   162c0:	sub	sp, sp, #32
   162c4:	str	r0, [fp, #-24]	; 0xffffffe8
   162c8:	str	r1, [fp, #-28]	; 0xffffffe4
   162cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   162d0:	bl	160e8 <__assert_fail@plt+0x4f20>
   162d4:	str	r0, [fp, #-8]
   162d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   162dc:	bl	16098 <__assert_fail@plt+0x4ed0>
   162e0:	str	r0, [fp, #-12]
   162e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   162e8:	bl	160c0 <__assert_fail@plt+0x4ef8>
   162ec:	str	r0, [fp, #-16]
   162f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   162f4:	bl	16110 <__assert_fail@plt+0x4f48>
   162f8:	str	r0, [fp, #-20]	; 0xffffffec
   162fc:	ldr	r2, [fp, #-8]
   16300:	ldr	r1, [pc, #112]	; 16378 <__assert_fail@plt+0x51b0>
   16304:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16308:	bl	11084 <fprintf@plt>
   1630c:	ldr	r2, [fp, #-12]
   16310:	ldr	r1, [pc, #100]	; 1637c <__assert_fail@plt+0x51b4>
   16314:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16318:	bl	11084 <fprintf@plt>
   1631c:	ldr	r3, [fp, #-16]
   16320:	vmov	s15, r3
   16324:	vcvt.f64.u32	d7, s15
   16328:	vldr	d6, [pc, #64]	; 16370 <__assert_fail@plt+0x51a8>
   1632c:	vmul.f64	d5, d7, d6
   16330:	ldr	r3, [fp, #-12]
   16334:	vmov	s15, r3
   16338:	vcvt.f64.u32	d6, s15
   1633c:	vdiv.f64	d7, d5, d6
   16340:	vstr	d7, [sp]
   16344:	ldr	r2, [fp, #-16]
   16348:	ldr	r1, [pc, #48]	; 16380 <__assert_fail@plt+0x51b8>
   1634c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16350:	bl	11084 <fprintf@plt>
   16354:	ldr	r2, [fp, #-20]	; 0xffffffec
   16358:	ldr	r1, [pc, #36]	; 16384 <__assert_fail@plt+0x51bc>
   1635c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16360:	bl	11084 <fprintf@plt>
   16364:	nop			; (mov r0, r0)
   16368:	sub	sp, fp, #4
   1636c:	pop	{fp, pc}
   16370:	andeq	r0, r0, r0
   16374:	subsmi	r0, r9, r0
   16378:	andeq	pc, r1, r8, lsl #1
   1637c:	andeq	pc, r1, r0, lsr #1
   16380:	strheq	pc, [r1], -r8	; <UNPREDICTABLE>
   16384:	ldrdeq	pc, [r1], -ip
   16388:	push	{fp, lr}
   1638c:	add	fp, sp, #4
   16390:	sub	sp, sp, #16
   16394:	str	r0, [fp, #-16]
   16398:	str	r1, [fp, #-20]	; 0xffffffec
   1639c:	ldr	r3, [fp, #-16]
   163a0:	ldr	r3, [r3, #24]
   163a4:	ldr	r2, [fp, #-16]
   163a8:	ldr	r2, [r2, #8]
   163ac:	mov	r1, r2
   163b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   163b4:	blx	r3
   163b8:	str	r0, [fp, #-8]
   163bc:	ldr	r3, [fp, #-16]
   163c0:	ldr	r2, [r3, #8]
   163c4:	ldr	r3, [fp, #-8]
   163c8:	cmp	r2, r3
   163cc:	bhi	163d4 <__assert_fail@plt+0x520c>
   163d0:	bl	11198 <abort@plt>
   163d4:	ldr	r3, [fp, #-16]
   163d8:	ldr	r2, [r3]
   163dc:	ldr	r3, [fp, #-8]
   163e0:	lsl	r3, r3, #3
   163e4:	add	r3, r2, r3
   163e8:	mov	r0, r3
   163ec:	sub	sp, fp, #4
   163f0:	pop	{fp, pc}
   163f4:	push	{fp, lr}
   163f8:	add	fp, sp, #4
   163fc:	sub	sp, sp, #16
   16400:	str	r0, [fp, #-16]
   16404:	str	r1, [fp, #-20]	; 0xffffffec
   16408:	ldr	r1, [fp, #-20]	; 0xffffffec
   1640c:	ldr	r0, [fp, #-16]
   16410:	bl	16388 <__assert_fail@plt+0x51c0>
   16414:	str	r0, [fp, #-12]
   16418:	ldr	r3, [fp, #-12]
   1641c:	ldr	r3, [r3]
   16420:	cmp	r3, #0
   16424:	bne	16430 <__assert_fail@plt+0x5268>
   16428:	mov	r3, #0
   1642c:	b	164a0 <__assert_fail@plt+0x52d8>
   16430:	ldr	r3, [fp, #-12]
   16434:	str	r3, [fp, #-8]
   16438:	b	16490 <__assert_fail@plt+0x52c8>
   1643c:	ldr	r3, [fp, #-8]
   16440:	ldr	r2, [r3]
   16444:	ldr	r3, [fp, #-20]	; 0xffffffec
   16448:	cmp	r2, r3
   1644c:	beq	16478 <__assert_fail@plt+0x52b0>
   16450:	ldr	r3, [fp, #-16]
   16454:	ldr	r3, [r3, #28]
   16458:	ldr	r2, [fp, #-8]
   1645c:	ldr	r2, [r2]
   16460:	mov	r1, r2
   16464:	ldr	r0, [fp, #-20]	; 0xffffffec
   16468:	blx	r3
   1646c:	mov	r3, r0
   16470:	cmp	r3, #0
   16474:	beq	16484 <__assert_fail@plt+0x52bc>
   16478:	ldr	r3, [fp, #-8]
   1647c:	ldr	r3, [r3]
   16480:	b	164a0 <__assert_fail@plt+0x52d8>
   16484:	ldr	r3, [fp, #-8]
   16488:	ldr	r3, [r3, #4]
   1648c:	str	r3, [fp, #-8]
   16490:	ldr	r3, [fp, #-8]
   16494:	cmp	r3, #0
   16498:	bne	1643c <__assert_fail@plt+0x5274>
   1649c:	mov	r3, #0
   164a0:	mov	r0, r3
   164a4:	sub	sp, fp, #4
   164a8:	pop	{fp, pc}
   164ac:	push	{fp, lr}
   164b0:	add	fp, sp, #4
   164b4:	sub	sp, sp, #16
   164b8:	str	r0, [fp, #-16]
   164bc:	ldr	r3, [fp, #-16]
   164c0:	ldr	r3, [r3, #16]
   164c4:	cmp	r3, #0
   164c8:	bne	164d4 <__assert_fail@plt+0x530c>
   164cc:	mov	r3, #0
   164d0:	b	16524 <__assert_fail@plt+0x535c>
   164d4:	ldr	r3, [fp, #-16]
   164d8:	ldr	r3, [r3]
   164dc:	str	r3, [fp, #-8]
   164e0:	ldr	r3, [fp, #-16]
   164e4:	ldr	r2, [r3, #4]
   164e8:	ldr	r3, [fp, #-8]
   164ec:	cmp	r2, r3
   164f0:	bhi	164f8 <__assert_fail@plt+0x5330>
   164f4:	bl	11198 <abort@plt>
   164f8:	ldr	r3, [fp, #-8]
   164fc:	ldr	r3, [r3]
   16500:	cmp	r3, #0
   16504:	beq	16514 <__assert_fail@plt+0x534c>
   16508:	ldr	r3, [fp, #-8]
   1650c:	ldr	r3, [r3]
   16510:	b	16524 <__assert_fail@plt+0x535c>
   16514:	ldr	r3, [fp, #-8]
   16518:	add	r3, r3, #8
   1651c:	str	r3, [fp, #-8]
   16520:	b	164e0 <__assert_fail@plt+0x5318>
   16524:	mov	r0, r3
   16528:	sub	sp, fp, #4
   1652c:	pop	{fp, pc}
   16530:	push	{fp, lr}
   16534:	add	fp, sp, #4
   16538:	sub	sp, sp, #16
   1653c:	str	r0, [fp, #-16]
   16540:	str	r1, [fp, #-20]	; 0xffffffec
   16544:	ldr	r1, [fp, #-20]	; 0xffffffec
   16548:	ldr	r0, [fp, #-16]
   1654c:	bl	16388 <__assert_fail@plt+0x51c0>
   16550:	str	r0, [fp, #-8]
   16554:	ldr	r3, [fp, #-8]
   16558:	str	r3, [fp, #-12]
   1655c:	ldr	r3, [fp, #-12]
   16560:	ldr	r2, [r3]
   16564:	ldr	r3, [fp, #-20]	; 0xffffffec
   16568:	cmp	r2, r3
   1656c:	bne	16590 <__assert_fail@plt+0x53c8>
   16570:	ldr	r3, [fp, #-12]
   16574:	ldr	r3, [r3, #4]
   16578:	cmp	r3, #0
   1657c:	beq	16590 <__assert_fail@plt+0x53c8>
   16580:	ldr	r3, [fp, #-12]
   16584:	ldr	r3, [r3, #4]
   16588:	ldr	r3, [r3]
   1658c:	b	165ec <__assert_fail@plt+0x5424>
   16590:	ldr	r3, [fp, #-12]
   16594:	ldr	r3, [r3, #4]
   16598:	str	r3, [fp, #-12]
   1659c:	ldr	r3, [fp, #-12]
   165a0:	cmp	r3, #0
   165a4:	bne	1655c <__assert_fail@plt+0x5394>
   165a8:	b	165c8 <__assert_fail@plt+0x5400>
   165ac:	ldr	r3, [fp, #-8]
   165b0:	ldr	r3, [r3]
   165b4:	cmp	r3, #0
   165b8:	beq	165c8 <__assert_fail@plt+0x5400>
   165bc:	ldr	r3, [fp, #-8]
   165c0:	ldr	r3, [r3]
   165c4:	b	165ec <__assert_fail@plt+0x5424>
   165c8:	ldr	r3, [fp, #-8]
   165cc:	add	r3, r3, #8
   165d0:	str	r3, [fp, #-8]
   165d4:	ldr	r3, [fp, #-16]
   165d8:	ldr	r3, [r3, #4]
   165dc:	ldr	r2, [fp, #-8]
   165e0:	cmp	r2, r3
   165e4:	bcc	165ac <__assert_fail@plt+0x53e4>
   165e8:	mov	r3, #0
   165ec:	mov	r0, r3
   165f0:	sub	sp, fp, #4
   165f4:	pop	{fp, pc}
   165f8:	push	{fp}		; (str fp, [sp, #-4]!)
   165fc:	add	fp, sp, #0
   16600:	sub	sp, sp, #36	; 0x24
   16604:	str	r0, [fp, #-24]	; 0xffffffe8
   16608:	str	r1, [fp, #-28]	; 0xffffffe4
   1660c:	str	r2, [fp, #-32]	; 0xffffffe0
   16610:	mov	r3, #0
   16614:	str	r3, [fp, #-8]
   16618:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1661c:	ldr	r3, [r3]
   16620:	str	r3, [fp, #-12]
   16624:	b	166a4 <__assert_fail@plt+0x54dc>
   16628:	ldr	r3, [fp, #-12]
   1662c:	ldr	r3, [r3]
   16630:	cmp	r3, #0
   16634:	beq	16698 <__assert_fail@plt+0x54d0>
   16638:	ldr	r3, [fp, #-12]
   1663c:	str	r3, [fp, #-16]
   16640:	b	1668c <__assert_fail@plt+0x54c4>
   16644:	ldr	r2, [fp, #-8]
   16648:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1664c:	cmp	r2, r3
   16650:	bcc	1665c <__assert_fail@plt+0x5494>
   16654:	ldr	r3, [fp, #-8]
   16658:	b	166bc <__assert_fail@plt+0x54f4>
   1665c:	ldr	r3, [fp, #-8]
   16660:	add	r2, r3, #1
   16664:	str	r2, [fp, #-8]
   16668:	lsl	r3, r3, #2
   1666c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16670:	add	r3, r2, r3
   16674:	ldr	r2, [fp, #-16]
   16678:	ldr	r2, [r2]
   1667c:	str	r2, [r3]
   16680:	ldr	r3, [fp, #-16]
   16684:	ldr	r3, [r3, #4]
   16688:	str	r3, [fp, #-16]
   1668c:	ldr	r3, [fp, #-16]
   16690:	cmp	r3, #0
   16694:	bne	16644 <__assert_fail@plt+0x547c>
   16698:	ldr	r3, [fp, #-12]
   1669c:	add	r3, r3, #8
   166a0:	str	r3, [fp, #-12]
   166a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166a8:	ldr	r2, [r3, #4]
   166ac:	ldr	r3, [fp, #-12]
   166b0:	cmp	r2, r3
   166b4:	bhi	16628 <__assert_fail@plt+0x5460>
   166b8:	ldr	r3, [fp, #-8]
   166bc:	mov	r0, r3
   166c0:	add	sp, fp, #0
   166c4:	pop	{fp}		; (ldr fp, [sp], #4)
   166c8:	bx	lr
   166cc:	push	{fp, lr}
   166d0:	add	fp, sp, #4
   166d4:	sub	sp, sp, #32
   166d8:	str	r0, [fp, #-24]	; 0xffffffe8
   166dc:	str	r1, [fp, #-28]	; 0xffffffe4
   166e0:	str	r2, [fp, #-32]	; 0xffffffe0
   166e4:	mov	r3, #0
   166e8:	str	r3, [fp, #-8]
   166ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166f0:	ldr	r3, [r3]
   166f4:	str	r3, [fp, #-12]
   166f8:	b	1677c <__assert_fail@plt+0x55b4>
   166fc:	ldr	r3, [fp, #-12]
   16700:	ldr	r3, [r3]
   16704:	cmp	r3, #0
   16708:	beq	16770 <__assert_fail@plt+0x55a8>
   1670c:	ldr	r3, [fp, #-12]
   16710:	str	r3, [fp, #-16]
   16714:	b	16764 <__assert_fail@plt+0x559c>
   16718:	ldr	r3, [fp, #-16]
   1671c:	ldr	r2, [r3]
   16720:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16724:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16728:	mov	r0, r2
   1672c:	blx	r3
   16730:	mov	r3, r0
   16734:	eor	r3, r3, #1
   16738:	uxtb	r3, r3
   1673c:	cmp	r3, #0
   16740:	beq	1674c <__assert_fail@plt+0x5584>
   16744:	ldr	r3, [fp, #-8]
   16748:	b	16794 <__assert_fail@plt+0x55cc>
   1674c:	ldr	r3, [fp, #-8]
   16750:	add	r3, r3, #1
   16754:	str	r3, [fp, #-8]
   16758:	ldr	r3, [fp, #-16]
   1675c:	ldr	r3, [r3, #4]
   16760:	str	r3, [fp, #-16]
   16764:	ldr	r3, [fp, #-16]
   16768:	cmp	r3, #0
   1676c:	bne	16718 <__assert_fail@plt+0x5550>
   16770:	ldr	r3, [fp, #-12]
   16774:	add	r3, r3, #8
   16778:	str	r3, [fp, #-12]
   1677c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16780:	ldr	r2, [r3, #4]
   16784:	ldr	r3, [fp, #-12]
   16788:	cmp	r2, r3
   1678c:	bhi	166fc <__assert_fail@plt+0x5534>
   16790:	ldr	r3, [fp, #-8]
   16794:	mov	r0, r3
   16798:	sub	sp, fp, #4
   1679c:	pop	{fp, pc}
   167a0:	push	{fp, lr}
   167a4:	add	fp, sp, #4
   167a8:	sub	sp, sp, #16
   167ac:	str	r0, [fp, #-16]
   167b0:	str	r1, [fp, #-20]	; 0xffffffec
   167b4:	mov	r3, #0
   167b8:	str	r3, [fp, #-8]
   167bc:	b	167f8 <__assert_fail@plt+0x5630>
   167c0:	ldr	r2, [fp, #-8]
   167c4:	mov	r3, r2
   167c8:	lsl	r3, r3, #5
   167cc:	sub	r2, r3, r2
   167d0:	ldrb	r3, [fp, #-9]
   167d4:	add	r3, r2, r3
   167d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   167dc:	mov	r0, r3
   167e0:	bl	1e0d0 <__assert_fail@plt+0xcf08>
   167e4:	mov	r3, r1
   167e8:	str	r3, [fp, #-8]
   167ec:	ldr	r3, [fp, #-16]
   167f0:	add	r3, r3, #1
   167f4:	str	r3, [fp, #-16]
   167f8:	ldr	r3, [fp, #-16]
   167fc:	ldrb	r3, [r3]
   16800:	strb	r3, [fp, #-9]
   16804:	ldrb	r3, [fp, #-9]
   16808:	cmp	r3, #0
   1680c:	bne	167c0 <__assert_fail@plt+0x55f8>
   16810:	ldr	r3, [fp, #-8]
   16814:	mov	r0, r3
   16818:	sub	sp, fp, #4
   1681c:	pop	{fp, pc}
   16820:	push	{fp, lr}
   16824:	add	fp, sp, #4
   16828:	sub	sp, sp, #16
   1682c:	str	r0, [fp, #-16]
   16830:	mov	r3, #3
   16834:	str	r3, [fp, #-8]
   16838:	ldr	r3, [fp, #-8]
   1683c:	ldr	r2, [fp, #-8]
   16840:	mul	r3, r2, r3
   16844:	str	r3, [fp, #-12]
   16848:	b	16878 <__assert_fail@plt+0x56b0>
   1684c:	ldr	r3, [fp, #-8]
   16850:	add	r3, r3, #1
   16854:	str	r3, [fp, #-8]
   16858:	ldr	r3, [fp, #-8]
   1685c:	lsl	r3, r3, #2
   16860:	ldr	r2, [fp, #-12]
   16864:	add	r3, r2, r3
   16868:	str	r3, [fp, #-12]
   1686c:	ldr	r3, [fp, #-8]
   16870:	add	r3, r3, #1
   16874:	str	r3, [fp, #-8]
   16878:	ldr	r2, [fp, #-12]
   1687c:	ldr	r3, [fp, #-16]
   16880:	cmp	r2, r3
   16884:	bcs	168a4 <__assert_fail@plt+0x56dc>
   16888:	ldr	r3, [fp, #-16]
   1688c:	ldr	r1, [fp, #-8]
   16890:	mov	r0, r3
   16894:	bl	1e0d0 <__assert_fail@plt+0xcf08>
   16898:	mov	r3, r1
   1689c:	cmp	r3, #0
   168a0:	bne	1684c <__assert_fail@plt+0x5684>
   168a4:	ldr	r3, [fp, #-16]
   168a8:	ldr	r1, [fp, #-8]
   168ac:	mov	r0, r3
   168b0:	bl	1e0d0 <__assert_fail@plt+0xcf08>
   168b4:	mov	r3, r1
   168b8:	cmp	r3, #0
   168bc:	movne	r3, #1
   168c0:	moveq	r3, #0
   168c4:	uxtb	r3, r3
   168c8:	mov	r0, r3
   168cc:	sub	sp, fp, #4
   168d0:	pop	{fp, pc}
   168d4:	push	{fp, lr}
   168d8:	add	fp, sp, #4
   168dc:	sub	sp, sp, #8
   168e0:	str	r0, [fp, #-8]
   168e4:	ldr	r3, [fp, #-8]
   168e8:	cmp	r3, #9
   168ec:	bhi	168f8 <__assert_fail@plt+0x5730>
   168f0:	mov	r3, #10
   168f4:	str	r3, [fp, #-8]
   168f8:	ldr	r3, [fp, #-8]
   168fc:	orr	r3, r3, #1
   16900:	str	r3, [fp, #-8]
   16904:	b	16914 <__assert_fail@plt+0x574c>
   16908:	ldr	r3, [fp, #-8]
   1690c:	add	r3, r3, #2
   16910:	str	r3, [fp, #-8]
   16914:	ldr	r3, [fp, #-8]
   16918:	cmn	r3, #1
   1691c:	beq	1693c <__assert_fail@plt+0x5774>
   16920:	ldr	r0, [fp, #-8]
   16924:	bl	16820 <__assert_fail@plt+0x5658>
   16928:	mov	r3, r0
   1692c:	eor	r3, r3, #1
   16930:	uxtb	r3, r3
   16934:	cmp	r3, #0
   16938:	bne	16908 <__assert_fail@plt+0x5740>
   1693c:	ldr	r3, [fp, #-8]
   16940:	mov	r0, r3
   16944:	sub	sp, fp, #4
   16948:	pop	{fp, pc}
   1694c:	push	{fp, lr}
   16950:	add	fp, sp, #4
   16954:	sub	sp, sp, #8
   16958:	str	r0, [fp, #-8]
   1695c:	ldr	r3, [fp, #-8]
   16960:	ldr	r2, [pc, #32]	; 16988 <__assert_fail@plt+0x57c0>
   16964:	mov	ip, r3
   16968:	mov	lr, r2
   1696c:	ldm	lr!, {r0, r1, r2, r3}
   16970:	stmia	ip!, {r0, r1, r2, r3}
   16974:	ldr	r3, [lr]
   16978:	str	r3, [ip]
   1697c:	nop			; (mov r0, r0)
   16980:	sub	sp, fp, #4
   16984:	pop	{fp, pc}
   16988:	andeq	pc, r1, r4, ror r0	; <UNPREDICTABLE>
   1698c:	push	{fp, lr}
   16990:	add	fp, sp, #4
   16994:	sub	sp, sp, #16
   16998:	str	r0, [fp, #-16]
   1699c:	str	r1, [fp, #-20]	; 0xffffffec
   169a0:	ldr	r3, [fp, #-16]
   169a4:	mov	r1, #3
   169a8:	mov	r0, r3
   169ac:	bl	1c924 <__assert_fail@plt+0xb75c>
   169b0:	str	r0, [fp, #-8]
   169b4:	ldr	r3, [fp, #-8]
   169b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   169bc:	mov	r0, r3
   169c0:	bl	1e0d0 <__assert_fail@plt+0xcf08>
   169c4:	mov	r3, r1
   169c8:	mov	r0, r3
   169cc:	sub	sp, fp, #4
   169d0:	pop	{fp, pc}
   169d4:	push	{fp}		; (str fp, [sp, #-4]!)
   169d8:	add	fp, sp, #0
   169dc:	sub	sp, sp, #12
   169e0:	str	r0, [fp, #-8]
   169e4:	str	r1, [fp, #-12]
   169e8:	ldr	r2, [fp, #-8]
   169ec:	ldr	r3, [fp, #-12]
   169f0:	cmp	r2, r3
   169f4:	moveq	r3, #1
   169f8:	movne	r3, #0
   169fc:	uxtb	r3, r3
   16a00:	mov	r0, r3
   16a04:	add	sp, fp, #0
   16a08:	pop	{fp}		; (ldr fp, [sp], #4)
   16a0c:	bx	lr
   16a10:	push	{fp}		; (str fp, [sp, #-4]!)
   16a14:	add	fp, sp, #0
   16a18:	sub	sp, sp, #20
   16a1c:	str	r0, [fp, #-16]
   16a20:	ldr	r3, [fp, #-16]
   16a24:	ldr	r3, [r3, #20]
   16a28:	str	r3, [fp, #-8]
   16a2c:	ldr	r3, [fp, #-8]
   16a30:	ldr	r2, [pc, #268]	; 16b44 <__assert_fail@plt+0x597c>
   16a34:	cmp	r3, r2
   16a38:	bne	16a44 <__assert_fail@plt+0x587c>
   16a3c:	mov	r3, #1
   16a40:	b	16b30 <__assert_fail@plt+0x5968>
   16a44:	ldr	r3, [pc, #252]	; 16b48 <__assert_fail@plt+0x5980>
   16a48:	str	r3, [fp, #-12]
   16a4c:	ldr	r3, [fp, #-8]
   16a50:	vldr	s14, [r3, #8]
   16a54:	vldr	s15, [fp, #-12]
   16a58:	vcmpe.f32	s14, s15
   16a5c:	vmrs	APSR_nzcv, fpscr
   16a60:	ble	16b20 <__assert_fail@plt+0x5958>
   16a64:	ldr	r3, [fp, #-8]
   16a68:	vldr	s14, [r3, #8]
   16a6c:	vldr	s13, [pc, #204]	; 16b40 <__assert_fail@plt+0x5978>
   16a70:	vldr	s15, [fp, #-12]
   16a74:	vsub.f32	s15, s13, s15
   16a78:	vcmpe.f32	s14, s15
   16a7c:	vmrs	APSR_nzcv, fpscr
   16a80:	bpl	16b20 <__assert_fail@plt+0x5958>
   16a84:	vldr	s15, [fp, #-12]
   16a88:	vldr	s14, [pc, #176]	; 16b40 <__assert_fail@plt+0x5978>
   16a8c:	vadd.f32	s14, s15, s14
   16a90:	ldr	r3, [fp, #-8]
   16a94:	vldr	s15, [r3, #12]
   16a98:	vcmpe.f32	s14, s15
   16a9c:	vmrs	APSR_nzcv, fpscr
   16aa0:	bpl	16b20 <__assert_fail@plt+0x5958>
   16aa4:	ldr	r3, [fp, #-8]
   16aa8:	vldr	s15, [r3]
   16aac:	vcmpe.f32	s15, #0.0
   16ab0:	vmrs	APSR_nzcv, fpscr
   16ab4:	blt	16b20 <__assert_fail@plt+0x5958>
   16ab8:	ldr	r3, [fp, #-8]
   16abc:	vldr	s14, [r3]
   16ac0:	vldr	s15, [fp, #-12]
   16ac4:	vadd.f32	s14, s14, s15
   16ac8:	ldr	r3, [fp, #-8]
   16acc:	vldr	s15, [r3, #4]
   16ad0:	vcmpe.f32	s14, s15
   16ad4:	vmrs	APSR_nzcv, fpscr
   16ad8:	bpl	16b20 <__assert_fail@plt+0x5958>
   16adc:	ldr	r3, [fp, #-8]
   16ae0:	vldr	s15, [r3, #4]
   16ae4:	vldr	s14, [pc, #84]	; 16b40 <__assert_fail@plt+0x5978>
   16ae8:	vcmpe.f32	s15, s14
   16aec:	vmrs	APSR_nzcv, fpscr
   16af0:	bhi	16b20 <__assert_fail@plt+0x5958>
   16af4:	ldr	r3, [fp, #-8]
   16af8:	vldr	s14, [r3]
   16afc:	vldr	s15, [fp, #-12]
   16b00:	vadd.f32	s14, s14, s15
   16b04:	ldr	r3, [fp, #-8]
   16b08:	vldr	s15, [r3, #8]
   16b0c:	vcmpe.f32	s14, s15
   16b10:	vmrs	APSR_nzcv, fpscr
   16b14:	bpl	16b20 <__assert_fail@plt+0x5958>
   16b18:	mov	r3, #1
   16b1c:	b	16b30 <__assert_fail@plt+0x5968>
   16b20:	ldr	r3, [fp, #-16]
   16b24:	ldr	r2, [pc, #24]	; 16b44 <__assert_fail@plt+0x597c>
   16b28:	str	r2, [r3, #20]
   16b2c:	mov	r3, #0
   16b30:	mov	r0, r3
   16b34:	add	sp, fp, #0
   16b38:	pop	{fp}		; (ldr fp, [sp], #4)
   16b3c:	bx	lr
   16b40:	svccc	0x00800000
   16b44:	andeq	pc, r1, r4, ror r0	; <UNPREDICTABLE>
   16b48:	stclcc	12, cr12, [ip, #820]	; 0x334
   16b4c:	push	{r4, r5, r6, r7, fp, lr}
   16b50:	add	fp, sp, #20
   16b54:	sub	sp, sp, #16
   16b58:	str	r0, [fp, #-32]	; 0xffffffe0
   16b5c:	str	r1, [fp, #-36]	; 0xffffffdc
   16b60:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16b64:	ldrb	r3, [r3, #16]
   16b68:	eor	r3, r3, #1
   16b6c:	uxtb	r3, r3
   16b70:	cmp	r3, #0
   16b74:	beq	16bc0 <__assert_fail@plt+0x59f8>
   16b78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b7c:	vmov	s15, r3
   16b80:	vcvt.f32.u32	s13, s15
   16b84:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16b88:	vldr	s14, [r3, #8]
   16b8c:	vdiv.f32	s15, s13, s14
   16b90:	vstr	s15, [fp, #-24]	; 0xffffffe8
   16b94:	vldr	s15, [fp, #-24]	; 0xffffffe8
   16b98:	vldr	s14, [pc, #156]	; 16c3c <__assert_fail@plt+0x5a74>
   16b9c:	vcmpe.f32	s15, s14
   16ba0:	vmrs	APSR_nzcv, fpscr
   16ba4:	blt	16bb0 <__assert_fail@plt+0x59e8>
   16ba8:	mov	r3, #0
   16bac:	b	16c30 <__assert_fail@plt+0x5a68>
   16bb0:	vldr	s15, [fp, #-24]	; 0xffffffe8
   16bb4:	vcvt.u32.f32	s15, s15
   16bb8:	vmov	r3, s15
   16bbc:	str	r3, [fp, #-32]	; 0xffffffe0
   16bc0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16bc4:	bl	168d4 <__assert_fail@plt+0x570c>
   16bc8:	str	r0, [fp, #-32]	; 0xffffffe0
   16bcc:	mov	r1, #0
   16bd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16bd4:	mov	r2, r3
   16bd8:	mov	r3, #0
   16bdc:	lsl	r5, r3, #2
   16be0:	orr	r5, r5, r2, lsr #30
   16be4:	lsl	r4, r2, #2
   16be8:	mov	r6, r5
   16bec:	mov	r7, #0
   16bf0:	cmp	r6, #0
   16bf4:	beq	16bfc <__assert_fail@plt+0x5a34>
   16bf8:	mov	r1, #1
   16bfc:	cmp	r4, #0
   16c00:	bge	16c08 <__assert_fail@plt+0x5a40>
   16c04:	mov	r1, #1
   16c08:	mov	r3, r4
   16c0c:	str	r3, [fp, #-28]	; 0xffffffe4
   16c10:	mov	r3, r1
   16c14:	and	r3, r3, #1
   16c18:	uxtb	r3, r3
   16c1c:	cmp	r3, #0
   16c20:	beq	16c2c <__assert_fail@plt+0x5a64>
   16c24:	mov	r3, #0
   16c28:	b	16c30 <__assert_fail@plt+0x5a68>
   16c2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16c30:	mov	r0, r3
   16c34:	sub	sp, fp, #20
   16c38:	pop	{r4, r5, r6, r7, fp, pc}
   16c3c:	svcmi	0x00800000
   16c40:	push	{fp, lr}
   16c44:	add	fp, sp, #4
   16c48:	sub	sp, sp, #24
   16c4c:	str	r0, [fp, #-16]
   16c50:	str	r1, [fp, #-20]	; 0xffffffec
   16c54:	str	r2, [fp, #-24]	; 0xffffffe8
   16c58:	str	r3, [fp, #-28]	; 0xffffffe4
   16c5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c60:	cmp	r3, #0
   16c64:	bne	16c70 <__assert_fail@plt+0x5aa8>
   16c68:	ldr	r3, [pc, #364]	; 16ddc <__assert_fail@plt+0x5c14>
   16c6c:	str	r3, [fp, #-24]	; 0xffffffe8
   16c70:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16c74:	cmp	r3, #0
   16c78:	bne	16c84 <__assert_fail@plt+0x5abc>
   16c7c:	ldr	r3, [pc, #348]	; 16de0 <__assert_fail@plt+0x5c18>
   16c80:	str	r3, [fp, #-28]	; 0xffffffe4
   16c84:	mov	r0, #40	; 0x28
   16c88:	bl	1c61c <__assert_fail@plt+0xb454>
   16c8c:	mov	r3, r0
   16c90:	str	r3, [fp, #-8]
   16c94:	ldr	r3, [fp, #-8]
   16c98:	cmp	r3, #0
   16c9c:	bne	16ca8 <__assert_fail@plt+0x5ae0>
   16ca0:	mov	r3, #0
   16ca4:	b	16dd0 <__assert_fail@plt+0x5c08>
   16ca8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cac:	cmp	r3, #0
   16cb0:	bne	16cbc <__assert_fail@plt+0x5af4>
   16cb4:	ldr	r3, [pc, #296]	; 16de4 <__assert_fail@plt+0x5c1c>
   16cb8:	str	r3, [fp, #-20]	; 0xffffffec
   16cbc:	ldr	r3, [fp, #-8]
   16cc0:	ldr	r2, [fp, #-20]	; 0xffffffec
   16cc4:	str	r2, [r3, #20]
   16cc8:	ldr	r0, [fp, #-8]
   16ccc:	bl	16a10 <__assert_fail@plt+0x5848>
   16cd0:	mov	r3, r0
   16cd4:	eor	r3, r3, #1
   16cd8:	uxtb	r3, r3
   16cdc:	cmp	r3, #0
   16ce0:	bne	16db0 <__assert_fail@plt+0x5be8>
   16ce4:	ldr	r1, [fp, #-20]	; 0xffffffec
   16ce8:	ldr	r0, [fp, #-16]
   16cec:	bl	16b4c <__assert_fail@plt+0x5984>
   16cf0:	mov	r2, r0
   16cf4:	ldr	r3, [fp, #-8]
   16cf8:	str	r2, [r3, #8]
   16cfc:	ldr	r3, [fp, #-8]
   16d00:	ldr	r3, [r3, #8]
   16d04:	cmp	r3, #0
   16d08:	beq	16db8 <__assert_fail@plt+0x5bf0>
   16d0c:	ldr	r3, [fp, #-8]
   16d10:	ldr	r3, [r3, #8]
   16d14:	mov	r1, #8
   16d18:	mov	r0, r3
   16d1c:	bl	1c558 <__assert_fail@plt+0xb390>
   16d20:	mov	r3, r0
   16d24:	mov	r2, r3
   16d28:	ldr	r3, [fp, #-8]
   16d2c:	str	r2, [r3]
   16d30:	ldr	r3, [fp, #-8]
   16d34:	ldr	r3, [r3]
   16d38:	cmp	r3, #0
   16d3c:	beq	16dc0 <__assert_fail@plt+0x5bf8>
   16d40:	ldr	r3, [fp, #-8]
   16d44:	ldr	r2, [r3]
   16d48:	ldr	r3, [fp, #-8]
   16d4c:	ldr	r3, [r3, #8]
   16d50:	lsl	r3, r3, #3
   16d54:	add	r2, r2, r3
   16d58:	ldr	r3, [fp, #-8]
   16d5c:	str	r2, [r3, #4]
   16d60:	ldr	r3, [fp, #-8]
   16d64:	mov	r2, #0
   16d68:	str	r2, [r3, #12]
   16d6c:	ldr	r3, [fp, #-8]
   16d70:	mov	r2, #0
   16d74:	str	r2, [r3, #16]
   16d78:	ldr	r3, [fp, #-8]
   16d7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16d80:	str	r2, [r3, #24]
   16d84:	ldr	r3, [fp, #-8]
   16d88:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16d8c:	str	r2, [r3, #28]
   16d90:	ldr	r3, [fp, #-8]
   16d94:	ldr	r2, [fp, #4]
   16d98:	str	r2, [r3, #32]
   16d9c:	ldr	r3, [fp, #-8]
   16da0:	mov	r2, #0
   16da4:	str	r2, [r3, #36]	; 0x24
   16da8:	ldr	r3, [fp, #-8]
   16dac:	b	16dd0 <__assert_fail@plt+0x5c08>
   16db0:	nop			; (mov r0, r0)
   16db4:	b	16dc4 <__assert_fail@plt+0x5bfc>
   16db8:	nop			; (mov r0, r0)
   16dbc:	b	16dc4 <__assert_fail@plt+0x5bfc>
   16dc0:	nop			; (mov r0, r0)
   16dc4:	ldr	r0, [fp, #-8]
   16dc8:	bl	1d358 <__assert_fail@plt+0xc190>
   16dcc:	mov	r3, #0
   16dd0:	mov	r0, r3
   16dd4:	sub	sp, fp, #4
   16dd8:	pop	{fp, pc}
   16ddc:	andeq	r6, r1, ip, lsl #19
   16de0:	ldrdeq	r6, [r1], -r4
   16de4:	andeq	pc, r1, r4, ror r0	; <UNPREDICTABLE>
   16de8:	push	{fp, lr}
   16dec:	add	fp, sp, #4
   16df0:	sub	sp, sp, #24
   16df4:	str	r0, [fp, #-24]	; 0xffffffe8
   16df8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16dfc:	ldr	r3, [r3]
   16e00:	str	r3, [fp, #-8]
   16e04:	b	16ee4 <__assert_fail@plt+0x5d1c>
   16e08:	ldr	r3, [fp, #-8]
   16e0c:	ldr	r3, [r3]
   16e10:	cmp	r3, #0
   16e14:	beq	16ed8 <__assert_fail@plt+0x5d10>
   16e18:	ldr	r3, [fp, #-8]
   16e1c:	ldr	r3, [r3, #4]
   16e20:	str	r3, [fp, #-12]
   16e24:	b	16e8c <__assert_fail@plt+0x5cc4>
   16e28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e2c:	ldr	r3, [r3, #32]
   16e30:	cmp	r3, #0
   16e34:	beq	16e50 <__assert_fail@plt+0x5c88>
   16e38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e3c:	ldr	r3, [r3, #32]
   16e40:	ldr	r2, [fp, #-12]
   16e44:	ldr	r2, [r2]
   16e48:	mov	r0, r2
   16e4c:	blx	r3
   16e50:	ldr	r3, [fp, #-12]
   16e54:	mov	r2, #0
   16e58:	str	r2, [r3]
   16e5c:	ldr	r3, [fp, #-12]
   16e60:	ldr	r3, [r3, #4]
   16e64:	str	r3, [fp, #-16]
   16e68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e6c:	ldr	r2, [r3, #36]	; 0x24
   16e70:	ldr	r3, [fp, #-12]
   16e74:	str	r2, [r3, #4]
   16e78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e7c:	ldr	r2, [fp, #-12]
   16e80:	str	r2, [r3, #36]	; 0x24
   16e84:	ldr	r3, [fp, #-16]
   16e88:	str	r3, [fp, #-12]
   16e8c:	ldr	r3, [fp, #-12]
   16e90:	cmp	r3, #0
   16e94:	bne	16e28 <__assert_fail@plt+0x5c60>
   16e98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e9c:	ldr	r3, [r3, #32]
   16ea0:	cmp	r3, #0
   16ea4:	beq	16ec0 <__assert_fail@plt+0x5cf8>
   16ea8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16eac:	ldr	r3, [r3, #32]
   16eb0:	ldr	r2, [fp, #-8]
   16eb4:	ldr	r2, [r2]
   16eb8:	mov	r0, r2
   16ebc:	blx	r3
   16ec0:	ldr	r3, [fp, #-8]
   16ec4:	mov	r2, #0
   16ec8:	str	r2, [r3]
   16ecc:	ldr	r3, [fp, #-8]
   16ed0:	mov	r2, #0
   16ed4:	str	r2, [r3, #4]
   16ed8:	ldr	r3, [fp, #-8]
   16edc:	add	r3, r3, #8
   16ee0:	str	r3, [fp, #-8]
   16ee4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ee8:	ldr	r2, [r3, #4]
   16eec:	ldr	r3, [fp, #-8]
   16ef0:	cmp	r2, r3
   16ef4:	bhi	16e08 <__assert_fail@plt+0x5c40>
   16ef8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16efc:	mov	r2, #0
   16f00:	str	r2, [r3, #12]
   16f04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f08:	mov	r2, #0
   16f0c:	str	r2, [r3, #16]
   16f10:	nop			; (mov r0, r0)
   16f14:	sub	sp, fp, #4
   16f18:	pop	{fp, pc}
   16f1c:	push	{fp, lr}
   16f20:	add	fp, sp, #4
   16f24:	sub	sp, sp, #24
   16f28:	str	r0, [fp, #-24]	; 0xffffffe8
   16f2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f30:	ldr	r3, [r3, #32]
   16f34:	cmp	r3, #0
   16f38:	beq	16fc8 <__assert_fail@plt+0x5e00>
   16f3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f40:	ldr	r3, [r3, #16]
   16f44:	cmp	r3, #0
   16f48:	beq	16fc8 <__assert_fail@plt+0x5e00>
   16f4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f50:	ldr	r3, [r3]
   16f54:	str	r3, [fp, #-8]
   16f58:	b	16fb4 <__assert_fail@plt+0x5dec>
   16f5c:	ldr	r3, [fp, #-8]
   16f60:	ldr	r3, [r3]
   16f64:	cmp	r3, #0
   16f68:	beq	16fa8 <__assert_fail@plt+0x5de0>
   16f6c:	ldr	r3, [fp, #-8]
   16f70:	str	r3, [fp, #-12]
   16f74:	b	16f9c <__assert_fail@plt+0x5dd4>
   16f78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f7c:	ldr	r3, [r3, #32]
   16f80:	ldr	r2, [fp, #-12]
   16f84:	ldr	r2, [r2]
   16f88:	mov	r0, r2
   16f8c:	blx	r3
   16f90:	ldr	r3, [fp, #-12]
   16f94:	ldr	r3, [r3, #4]
   16f98:	str	r3, [fp, #-12]
   16f9c:	ldr	r3, [fp, #-12]
   16fa0:	cmp	r3, #0
   16fa4:	bne	16f78 <__assert_fail@plt+0x5db0>
   16fa8:	ldr	r3, [fp, #-8]
   16fac:	add	r3, r3, #8
   16fb0:	str	r3, [fp, #-8]
   16fb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16fb8:	ldr	r2, [r3, #4]
   16fbc:	ldr	r3, [fp, #-8]
   16fc0:	cmp	r2, r3
   16fc4:	bhi	16f5c <__assert_fail@plt+0x5d94>
   16fc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16fcc:	ldr	r3, [r3]
   16fd0:	str	r3, [fp, #-8]
   16fd4:	b	1701c <__assert_fail@plt+0x5e54>
   16fd8:	ldr	r3, [fp, #-8]
   16fdc:	ldr	r3, [r3, #4]
   16fe0:	str	r3, [fp, #-12]
   16fe4:	b	17004 <__assert_fail@plt+0x5e3c>
   16fe8:	ldr	r3, [fp, #-12]
   16fec:	ldr	r3, [r3, #4]
   16ff0:	str	r3, [fp, #-16]
   16ff4:	ldr	r0, [fp, #-12]
   16ff8:	bl	1d358 <__assert_fail@plt+0xc190>
   16ffc:	ldr	r3, [fp, #-16]
   17000:	str	r3, [fp, #-12]
   17004:	ldr	r3, [fp, #-12]
   17008:	cmp	r3, #0
   1700c:	bne	16fe8 <__assert_fail@plt+0x5e20>
   17010:	ldr	r3, [fp, #-8]
   17014:	add	r3, r3, #8
   17018:	str	r3, [fp, #-8]
   1701c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17020:	ldr	r2, [r3, #4]
   17024:	ldr	r3, [fp, #-8]
   17028:	cmp	r2, r3
   1702c:	bhi	16fd8 <__assert_fail@plt+0x5e10>
   17030:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17034:	ldr	r3, [r3, #36]	; 0x24
   17038:	str	r3, [fp, #-12]
   1703c:	b	1705c <__assert_fail@plt+0x5e94>
   17040:	ldr	r3, [fp, #-12]
   17044:	ldr	r3, [r3, #4]
   17048:	str	r3, [fp, #-16]
   1704c:	ldr	r0, [fp, #-12]
   17050:	bl	1d358 <__assert_fail@plt+0xc190>
   17054:	ldr	r3, [fp, #-16]
   17058:	str	r3, [fp, #-12]
   1705c:	ldr	r3, [fp, #-12]
   17060:	cmp	r3, #0
   17064:	bne	17040 <__assert_fail@plt+0x5e78>
   17068:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1706c:	ldr	r3, [r3]
   17070:	mov	r0, r3
   17074:	bl	1d358 <__assert_fail@plt+0xc190>
   17078:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1707c:	bl	1d358 <__assert_fail@plt+0xc190>
   17080:	nop			; (mov r0, r0)
   17084:	sub	sp, fp, #4
   17088:	pop	{fp, pc}
   1708c:	push	{fp, lr}
   17090:	add	fp, sp, #4
   17094:	sub	sp, sp, #16
   17098:	str	r0, [fp, #-16]
   1709c:	ldr	r3, [fp, #-16]
   170a0:	ldr	r3, [r3, #36]	; 0x24
   170a4:	cmp	r3, #0
   170a8:	beq	170cc <__assert_fail@plt+0x5f04>
   170ac:	ldr	r3, [fp, #-16]
   170b0:	ldr	r3, [r3, #36]	; 0x24
   170b4:	str	r3, [fp, #-8]
   170b8:	ldr	r3, [fp, #-8]
   170bc:	ldr	r2, [r3, #4]
   170c0:	ldr	r3, [fp, #-16]
   170c4:	str	r2, [r3, #36]	; 0x24
   170c8:	b	170dc <__assert_fail@plt+0x5f14>
   170cc:	mov	r0, #8
   170d0:	bl	1c61c <__assert_fail@plt+0xb454>
   170d4:	mov	r3, r0
   170d8:	str	r3, [fp, #-8]
   170dc:	ldr	r3, [fp, #-8]
   170e0:	mov	r0, r3
   170e4:	sub	sp, fp, #4
   170e8:	pop	{fp, pc}
   170ec:	push	{fp}		; (str fp, [sp, #-4]!)
   170f0:	add	fp, sp, #0
   170f4:	sub	sp, sp, #12
   170f8:	str	r0, [fp, #-8]
   170fc:	str	r1, [fp, #-12]
   17100:	ldr	r3, [fp, #-12]
   17104:	mov	r2, #0
   17108:	str	r2, [r3]
   1710c:	ldr	r3, [fp, #-8]
   17110:	ldr	r2, [r3, #36]	; 0x24
   17114:	ldr	r3, [fp, #-12]
   17118:	str	r2, [r3, #4]
   1711c:	ldr	r3, [fp, #-8]
   17120:	ldr	r2, [fp, #-12]
   17124:	str	r2, [r3, #36]	; 0x24
   17128:	nop			; (mov r0, r0)
   1712c:	add	sp, fp, #0
   17130:	pop	{fp}		; (ldr fp, [sp], #4)
   17134:	bx	lr
   17138:	push	{fp, lr}
   1713c:	add	fp, sp, #4
   17140:	sub	sp, sp, #40	; 0x28
   17144:	str	r0, [fp, #-32]	; 0xffffffe0
   17148:	str	r1, [fp, #-36]	; 0xffffffdc
   1714c:	str	r2, [fp, #-40]	; 0xffffffd8
   17150:	strb	r3, [fp, #-41]	; 0xffffffd7
   17154:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17158:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1715c:	bl	16388 <__assert_fail@plt+0x51c0>
   17160:	str	r0, [fp, #-12]
   17164:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17168:	ldr	r2, [fp, #-12]
   1716c:	str	r2, [r3]
   17170:	ldr	r3, [fp, #-12]
   17174:	ldr	r3, [r3]
   17178:	cmp	r3, #0
   1717c:	bne	17188 <__assert_fail@plt+0x5fc0>
   17180:	mov	r3, #0
   17184:	b	172e8 <__assert_fail@plt+0x6120>
   17188:	ldr	r3, [fp, #-12]
   1718c:	ldr	r2, [r3]
   17190:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17194:	cmp	r2, r3
   17198:	beq	171c4 <__assert_fail@plt+0x5ffc>
   1719c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   171a0:	ldr	r3, [r3, #28]
   171a4:	ldr	r2, [fp, #-12]
   171a8:	ldr	r2, [r2]
   171ac:	mov	r1, r2
   171b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   171b4:	blx	r3
   171b8:	mov	r3, r0
   171bc:	cmp	r3, #0
   171c0:	beq	1722c <__assert_fail@plt+0x6064>
   171c4:	ldr	r3, [fp, #-12]
   171c8:	ldr	r3, [r3]
   171cc:	str	r3, [fp, #-24]	; 0xffffffe8
   171d0:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   171d4:	cmp	r3, #0
   171d8:	beq	17224 <__assert_fail@plt+0x605c>
   171dc:	ldr	r3, [fp, #-12]
   171e0:	ldr	r3, [r3, #4]
   171e4:	cmp	r3, #0
   171e8:	beq	17218 <__assert_fail@plt+0x6050>
   171ec:	ldr	r3, [fp, #-12]
   171f0:	ldr	r3, [r3, #4]
   171f4:	str	r3, [fp, #-28]	; 0xffffffe4
   171f8:	ldr	r3, [fp, #-12]
   171fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17200:	ldm	r2, {r0, r1}
   17204:	stm	r3, {r0, r1}
   17208:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1720c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17210:	bl	170ec <__assert_fail@plt+0x5f24>
   17214:	b	17224 <__assert_fail@plt+0x605c>
   17218:	ldr	r3, [fp, #-12]
   1721c:	mov	r2, #0
   17220:	str	r2, [r3]
   17224:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17228:	b	172e8 <__assert_fail@plt+0x6120>
   1722c:	ldr	r3, [fp, #-12]
   17230:	str	r3, [fp, #-8]
   17234:	b	172d4 <__assert_fail@plt+0x610c>
   17238:	ldr	r3, [fp, #-8]
   1723c:	ldr	r3, [r3, #4]
   17240:	ldr	r2, [r3]
   17244:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17248:	cmp	r2, r3
   1724c:	beq	1727c <__assert_fail@plt+0x60b4>
   17250:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17254:	ldr	r3, [r3, #28]
   17258:	ldr	r2, [fp, #-8]
   1725c:	ldr	r2, [r2, #4]
   17260:	ldr	r2, [r2]
   17264:	mov	r1, r2
   17268:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1726c:	blx	r3
   17270:	mov	r3, r0
   17274:	cmp	r3, #0
   17278:	beq	172c8 <__assert_fail@plt+0x6100>
   1727c:	ldr	r3, [fp, #-8]
   17280:	ldr	r3, [r3, #4]
   17284:	ldr	r3, [r3]
   17288:	str	r3, [fp, #-16]
   1728c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   17290:	cmp	r3, #0
   17294:	beq	172c0 <__assert_fail@plt+0x60f8>
   17298:	ldr	r3, [fp, #-8]
   1729c:	ldr	r3, [r3, #4]
   172a0:	str	r3, [fp, #-20]	; 0xffffffec
   172a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   172a8:	ldr	r2, [r3, #4]
   172ac:	ldr	r3, [fp, #-8]
   172b0:	str	r2, [r3, #4]
   172b4:	ldr	r1, [fp, #-20]	; 0xffffffec
   172b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   172bc:	bl	170ec <__assert_fail@plt+0x5f24>
   172c0:	ldr	r3, [fp, #-16]
   172c4:	b	172e8 <__assert_fail@plt+0x6120>
   172c8:	ldr	r3, [fp, #-8]
   172cc:	ldr	r3, [r3, #4]
   172d0:	str	r3, [fp, #-8]
   172d4:	ldr	r3, [fp, #-8]
   172d8:	ldr	r3, [r3, #4]
   172dc:	cmp	r3, #0
   172e0:	bne	17238 <__assert_fail@plt+0x6070>
   172e4:	mov	r3, #0
   172e8:	mov	r0, r3
   172ec:	sub	sp, fp, #4
   172f0:	pop	{fp, pc}
   172f4:	push	{fp, lr}
   172f8:	add	fp, sp, #4
   172fc:	sub	sp, sp, #40	; 0x28
   17300:	str	r0, [fp, #-32]	; 0xffffffe0
   17304:	str	r1, [fp, #-36]	; 0xffffffdc
   17308:	mov	r3, r2
   1730c:	strb	r3, [fp, #-37]	; 0xffffffdb
   17310:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17314:	ldr	r3, [r3]
   17318:	str	r3, [fp, #-8]
   1731c:	b	174bc <__assert_fail@plt+0x62f4>
   17320:	ldr	r3, [fp, #-8]
   17324:	ldr	r3, [r3]
   17328:	cmp	r3, #0
   1732c:	beq	174b0 <__assert_fail@plt+0x62e8>
   17330:	ldr	r3, [fp, #-8]
   17334:	ldr	r3, [r3, #4]
   17338:	str	r3, [fp, #-12]
   1733c:	b	173cc <__assert_fail@plt+0x6204>
   17340:	ldr	r3, [fp, #-12]
   17344:	ldr	r3, [r3]
   17348:	str	r3, [fp, #-16]
   1734c:	ldr	r1, [fp, #-16]
   17350:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17354:	bl	16388 <__assert_fail@plt+0x51c0>
   17358:	str	r0, [fp, #-20]	; 0xffffffec
   1735c:	ldr	r3, [fp, #-12]
   17360:	ldr	r3, [r3, #4]
   17364:	str	r3, [fp, #-24]	; 0xffffffe8
   17368:	ldr	r3, [fp, #-20]	; 0xffffffec
   1736c:	ldr	r3, [r3]
   17370:	cmp	r3, #0
   17374:	beq	17398 <__assert_fail@plt+0x61d0>
   17378:	ldr	r3, [fp, #-20]	; 0xffffffec
   1737c:	ldr	r2, [r3, #4]
   17380:	ldr	r3, [fp, #-12]
   17384:	str	r2, [r3, #4]
   17388:	ldr	r3, [fp, #-20]	; 0xffffffec
   1738c:	ldr	r2, [fp, #-12]
   17390:	str	r2, [r3, #4]
   17394:	b	173c4 <__assert_fail@plt+0x61fc>
   17398:	ldr	r3, [fp, #-20]	; 0xffffffec
   1739c:	ldr	r2, [fp, #-16]
   173a0:	str	r2, [r3]
   173a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173a8:	ldr	r3, [r3, #12]
   173ac:	add	r2, r3, #1
   173b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173b4:	str	r2, [r3, #12]
   173b8:	ldr	r1, [fp, #-12]
   173bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   173c0:	bl	170ec <__assert_fail@plt+0x5f24>
   173c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173c8:	str	r3, [fp, #-12]
   173cc:	ldr	r3, [fp, #-12]
   173d0:	cmp	r3, #0
   173d4:	bne	17340 <__assert_fail@plt+0x6178>
   173d8:	ldr	r3, [fp, #-8]
   173dc:	ldr	r3, [r3]
   173e0:	str	r3, [fp, #-16]
   173e4:	ldr	r3, [fp, #-8]
   173e8:	mov	r2, #0
   173ec:	str	r2, [r3, #4]
   173f0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   173f4:	cmp	r3, #0
   173f8:	bne	174ac <__assert_fail@plt+0x62e4>
   173fc:	ldr	r1, [fp, #-16]
   17400:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17404:	bl	16388 <__assert_fail@plt+0x51c0>
   17408:	str	r0, [fp, #-20]	; 0xffffffec
   1740c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17410:	ldr	r3, [r3]
   17414:	cmp	r3, #0
   17418:	beq	17468 <__assert_fail@plt+0x62a0>
   1741c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17420:	bl	1708c <__assert_fail@plt+0x5ec4>
   17424:	str	r0, [fp, #-28]	; 0xffffffe4
   17428:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1742c:	cmp	r3, #0
   17430:	bne	1743c <__assert_fail@plt+0x6274>
   17434:	mov	r3, #0
   17438:	b	174d4 <__assert_fail@plt+0x630c>
   1743c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17440:	ldr	r2, [fp, #-16]
   17444:	str	r2, [r3]
   17448:	ldr	r3, [fp, #-20]	; 0xffffffec
   1744c:	ldr	r2, [r3, #4]
   17450:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17454:	str	r2, [r3, #4]
   17458:	ldr	r3, [fp, #-20]	; 0xffffffec
   1745c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17460:	str	r2, [r3, #4]
   17464:	b	17488 <__assert_fail@plt+0x62c0>
   17468:	ldr	r3, [fp, #-20]	; 0xffffffec
   1746c:	ldr	r2, [fp, #-16]
   17470:	str	r2, [r3]
   17474:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17478:	ldr	r3, [r3, #12]
   1747c:	add	r2, r3, #1
   17480:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17484:	str	r2, [r3, #12]
   17488:	ldr	r3, [fp, #-8]
   1748c:	mov	r2, #0
   17490:	str	r2, [r3]
   17494:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17498:	ldr	r3, [r3, #12]
   1749c:	sub	r2, r3, #1
   174a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   174a4:	str	r2, [r3, #12]
   174a8:	b	174b0 <__assert_fail@plt+0x62e8>
   174ac:	nop			; (mov r0, r0)
   174b0:	ldr	r3, [fp, #-8]
   174b4:	add	r3, r3, #8
   174b8:	str	r3, [fp, #-8]
   174bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   174c0:	ldr	r2, [r3, #4]
   174c4:	ldr	r3, [fp, #-8]
   174c8:	cmp	r2, r3
   174cc:	bhi	17320 <__assert_fail@plt+0x6158>
   174d0:	mov	r3, #1
   174d4:	mov	r0, r3
   174d8:	sub	sp, fp, #4
   174dc:	pop	{fp, pc}
   174e0:	push	{fp, lr}
   174e4:	add	fp, sp, #4
   174e8:	sub	sp, sp, #56	; 0x38
   174ec:	str	r0, [fp, #-56]	; 0xffffffc8
   174f0:	str	r1, [fp, #-60]	; 0xffffffc4
   174f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   174f8:	ldr	r3, [r3, #20]
   174fc:	mov	r1, r3
   17500:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17504:	bl	16b4c <__assert_fail@plt+0x5984>
   17508:	str	r0, [fp, #-8]
   1750c:	ldr	r3, [fp, #-8]
   17510:	cmp	r3, #0
   17514:	bne	17520 <__assert_fail@plt+0x6358>
   17518:	mov	r3, #0
   1751c:	b	176fc <__assert_fail@plt+0x6534>
   17520:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17524:	ldr	r2, [r3, #8]
   17528:	ldr	r3, [fp, #-8]
   1752c:	cmp	r2, r3
   17530:	bne	1753c <__assert_fail@plt+0x6374>
   17534:	mov	r3, #1
   17538:	b	176fc <__assert_fail@plt+0x6534>
   1753c:	sub	r3, fp, #52	; 0x34
   17540:	str	r3, [fp, #-12]
   17544:	mov	r1, #8
   17548:	ldr	r0, [fp, #-8]
   1754c:	bl	1c558 <__assert_fail@plt+0xb390>
   17550:	mov	r3, r0
   17554:	mov	r2, r3
   17558:	ldr	r3, [fp, #-12]
   1755c:	str	r2, [r3]
   17560:	ldr	r3, [fp, #-12]
   17564:	ldr	r3, [r3]
   17568:	cmp	r3, #0
   1756c:	bne	17578 <__assert_fail@plt+0x63b0>
   17570:	mov	r3, #0
   17574:	b	176fc <__assert_fail@plt+0x6534>
   17578:	ldr	r3, [fp, #-12]
   1757c:	ldr	r2, [fp, #-8]
   17580:	str	r2, [r3, #8]
   17584:	ldr	r3, [fp, #-12]
   17588:	ldr	r2, [r3]
   1758c:	ldr	r3, [fp, #-8]
   17590:	lsl	r3, r3, #3
   17594:	add	r2, r2, r3
   17598:	ldr	r3, [fp, #-12]
   1759c:	str	r2, [r3, #4]
   175a0:	ldr	r3, [fp, #-12]
   175a4:	mov	r2, #0
   175a8:	str	r2, [r3, #12]
   175ac:	ldr	r3, [fp, #-12]
   175b0:	mov	r2, #0
   175b4:	str	r2, [r3, #16]
   175b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   175bc:	ldr	r2, [r3, #20]
   175c0:	ldr	r3, [fp, #-12]
   175c4:	str	r2, [r3, #20]
   175c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   175cc:	ldr	r2, [r3, #24]
   175d0:	ldr	r3, [fp, #-12]
   175d4:	str	r2, [r3, #24]
   175d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   175dc:	ldr	r2, [r3, #28]
   175e0:	ldr	r3, [fp, #-12]
   175e4:	str	r2, [r3, #28]
   175e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   175ec:	ldr	r2, [r3, #32]
   175f0:	ldr	r3, [fp, #-12]
   175f4:	str	r2, [r3, #32]
   175f8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   175fc:	ldr	r2, [r3, #36]	; 0x24
   17600:	ldr	r3, [fp, #-12]
   17604:	str	r2, [r3, #36]	; 0x24
   17608:	mov	r2, #0
   1760c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17610:	ldr	r0, [fp, #-12]
   17614:	bl	172f4 <__assert_fail@plt+0x612c>
   17618:	mov	r3, r0
   1761c:	cmp	r3, #0
   17620:	beq	1768c <__assert_fail@plt+0x64c4>
   17624:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17628:	ldr	r3, [r3]
   1762c:	mov	r0, r3
   17630:	bl	1d358 <__assert_fail@plt+0xc190>
   17634:	ldr	r3, [fp, #-12]
   17638:	ldr	r2, [r3]
   1763c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17640:	str	r2, [r3]
   17644:	ldr	r3, [fp, #-12]
   17648:	ldr	r2, [r3, #4]
   1764c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17650:	str	r2, [r3, #4]
   17654:	ldr	r3, [fp, #-12]
   17658:	ldr	r2, [r3, #8]
   1765c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17660:	str	r2, [r3, #8]
   17664:	ldr	r3, [fp, #-12]
   17668:	ldr	r2, [r3, #12]
   1766c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17670:	str	r2, [r3, #12]
   17674:	ldr	r3, [fp, #-12]
   17678:	ldr	r2, [r3, #36]	; 0x24
   1767c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17680:	str	r2, [r3, #36]	; 0x24
   17684:	mov	r3, #1
   17688:	b	176fc <__assert_fail@plt+0x6534>
   1768c:	ldr	r3, [fp, #-12]
   17690:	ldr	r2, [r3, #36]	; 0x24
   17694:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17698:	str	r2, [r3, #36]	; 0x24
   1769c:	mov	r2, #1
   176a0:	ldr	r1, [fp, #-12]
   176a4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   176a8:	bl	172f4 <__assert_fail@plt+0x612c>
   176ac:	mov	r3, r0
   176b0:	eor	r3, r3, #1
   176b4:	uxtb	r3, r3
   176b8:	cmp	r3, #0
   176bc:	bne	176e4 <__assert_fail@plt+0x651c>
   176c0:	mov	r2, #0
   176c4:	ldr	r1, [fp, #-12]
   176c8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   176cc:	bl	172f4 <__assert_fail@plt+0x612c>
   176d0:	mov	r3, r0
   176d4:	eor	r3, r3, #1
   176d8:	uxtb	r3, r3
   176dc:	cmp	r3, #0
   176e0:	beq	176e8 <__assert_fail@plt+0x6520>
   176e4:	bl	11198 <abort@plt>
   176e8:	ldr	r3, [fp, #-12]
   176ec:	ldr	r3, [r3]
   176f0:	mov	r0, r3
   176f4:	bl	1d358 <__assert_fail@plt+0xc190>
   176f8:	mov	r3, #0
   176fc:	mov	r0, r3
   17700:	sub	sp, fp, #4
   17704:	pop	{fp, pc}
   17708:	push	{fp, lr}
   1770c:	add	fp, sp, #4
   17710:	sub	sp, sp, #40	; 0x28
   17714:	str	r0, [fp, #-32]	; 0xffffffe0
   17718:	str	r1, [fp, #-36]	; 0xffffffdc
   1771c:	str	r2, [fp, #-40]	; 0xffffffd8
   17720:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17724:	cmp	r3, #0
   17728:	bne	17730 <__assert_fail@plt+0x6568>
   1772c:	bl	11198 <abort@plt>
   17730:	sub	r2, fp, #24
   17734:	mov	r3, #0
   17738:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1773c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17740:	bl	17138 <__assert_fail@plt+0x5f70>
   17744:	str	r0, [fp, #-8]
   17748:	ldr	r3, [fp, #-8]
   1774c:	cmp	r3, #0
   17750:	beq	17774 <__assert_fail@plt+0x65ac>
   17754:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17758:	cmp	r3, #0
   1775c:	beq	1776c <__assert_fail@plt+0x65a4>
   17760:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17764:	ldr	r2, [fp, #-8]
   17768:	str	r2, [r3]
   1776c:	mov	r3, #0
   17770:	b	17978 <__assert_fail@plt+0x67b0>
   17774:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17778:	ldr	r3, [r3, #12]
   1777c:	vmov	s15, r3
   17780:	vcvt.f32.u32	s14, s15
   17784:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17788:	ldr	r3, [r3, #20]
   1778c:	vldr	s13, [r3, #8]
   17790:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17794:	ldr	r3, [r3, #8]
   17798:	vmov	s15, r3
   1779c:	vcvt.f32.u32	s15, s15
   177a0:	vmul.f32	s15, s13, s15
   177a4:	vcmpe.f32	s14, s15
   177a8:	vmrs	APSR_nzcv, fpscr
   177ac:	ble	178cc <__assert_fail@plt+0x6704>
   177b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   177b4:	bl	16a10 <__assert_fail@plt+0x5848>
   177b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177bc:	ldr	r3, [r3, #12]
   177c0:	vmov	s15, r3
   177c4:	vcvt.f32.u32	s14, s15
   177c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177cc:	ldr	r3, [r3, #20]
   177d0:	vldr	s13, [r3, #8]
   177d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177d8:	ldr	r3, [r3, #8]
   177dc:	vmov	s15, r3
   177e0:	vcvt.f32.u32	s15, s15
   177e4:	vmul.f32	s15, s13, s15
   177e8:	vcmpe.f32	s14, s15
   177ec:	vmrs	APSR_nzcv, fpscr
   177f0:	ble	178cc <__assert_fail@plt+0x6704>
   177f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177f8:	ldr	r3, [r3, #20]
   177fc:	str	r3, [fp, #-12]
   17800:	ldr	r3, [fp, #-12]
   17804:	ldrb	r3, [r3, #16]
   17808:	cmp	r3, #0
   1780c:	beq	17830 <__assert_fail@plt+0x6668>
   17810:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17814:	ldr	r3, [r3, #8]
   17818:	vmov	s15, r3
   1781c:	vcvt.f32.u32	s14, s15
   17820:	ldr	r3, [fp, #-12]
   17824:	vldr	s15, [r3, #12]
   17828:	vmul.f32	s15, s14, s15
   1782c:	b	17858 <__assert_fail@plt+0x6690>
   17830:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17834:	ldr	r3, [r3, #8]
   17838:	vmov	s15, r3
   1783c:	vcvt.f32.u32	s14, s15
   17840:	ldr	r3, [fp, #-12]
   17844:	vldr	s15, [r3, #12]
   17848:	vmul.f32	s14, s14, s15
   1784c:	ldr	r3, [fp, #-12]
   17850:	vldr	s15, [r3, #8]
   17854:	vmul.f32	s15, s14, s15
   17858:	vstr	s15, [fp, #-16]
   1785c:	vldr	s15, [fp, #-16]
   17860:	vldr	s14, [pc, #284]	; 17984 <__assert_fail@plt+0x67bc>
   17864:	vcmpe.f32	s15, s14
   17868:	vmrs	APSR_nzcv, fpscr
   1786c:	blt	17878 <__assert_fail@plt+0x66b0>
   17870:	mvn	r3, #0
   17874:	b	17978 <__assert_fail@plt+0x67b0>
   17878:	vldr	s15, [fp, #-16]
   1787c:	vcvt.u32.f32	s15, s15
   17880:	vmov	r1, s15
   17884:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17888:	bl	174e0 <__assert_fail@plt+0x6318>
   1788c:	mov	r3, r0
   17890:	eor	r3, r3, #1
   17894:	uxtb	r3, r3
   17898:	cmp	r3, #0
   1789c:	beq	178a8 <__assert_fail@plt+0x66e0>
   178a0:	mvn	r3, #0
   178a4:	b	17978 <__assert_fail@plt+0x67b0>
   178a8:	sub	r2, fp, #24
   178ac:	mov	r3, #0
   178b0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   178b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   178b8:	bl	17138 <__assert_fail@plt+0x5f70>
   178bc:	mov	r3, r0
   178c0:	cmp	r3, #0
   178c4:	beq	178cc <__assert_fail@plt+0x6704>
   178c8:	bl	11198 <abort@plt>
   178cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178d0:	ldr	r3, [r3]
   178d4:	cmp	r3, #0
   178d8:	beq	17940 <__assert_fail@plt+0x6778>
   178dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   178e0:	bl	1708c <__assert_fail@plt+0x5ec4>
   178e4:	str	r0, [fp, #-20]	; 0xffffffec
   178e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   178ec:	cmp	r3, #0
   178f0:	bne	178fc <__assert_fail@plt+0x6734>
   178f4:	mvn	r3, #0
   178f8:	b	17978 <__assert_fail@plt+0x67b0>
   178fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17900:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17904:	str	r2, [r3]
   17908:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1790c:	ldr	r2, [r3, #4]
   17910:	ldr	r3, [fp, #-20]	; 0xffffffec
   17914:	str	r2, [r3, #4]
   17918:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1791c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17920:	str	r2, [r3, #4]
   17924:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17928:	ldr	r3, [r3, #16]
   1792c:	add	r2, r3, #1
   17930:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17934:	str	r2, [r3, #16]
   17938:	mov	r3, #1
   1793c:	b	17978 <__assert_fail@plt+0x67b0>
   17940:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17944:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17948:	str	r2, [r3]
   1794c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17950:	ldr	r3, [r3, #16]
   17954:	add	r2, r3, #1
   17958:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1795c:	str	r2, [r3, #16]
   17960:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17964:	ldr	r3, [r3, #12]
   17968:	add	r2, r3, #1
   1796c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17970:	str	r2, [r3, #12]
   17974:	mov	r3, #1
   17978:	mov	r0, r3
   1797c:	sub	sp, fp, #4
   17980:	pop	{fp, pc}
   17984:	svcmi	0x00800000
   17988:	push	{fp, lr}
   1798c:	add	fp, sp, #4
   17990:	sub	sp, sp, #16
   17994:	str	r0, [fp, #-16]
   17998:	str	r1, [fp, #-20]	; 0xffffffec
   1799c:	sub	r3, fp, #12
   179a0:	mov	r2, r3
   179a4:	ldr	r1, [fp, #-20]	; 0xffffffec
   179a8:	ldr	r0, [fp, #-16]
   179ac:	bl	17708 <__assert_fail@plt+0x6540>
   179b0:	str	r0, [fp, #-8]
   179b4:	ldr	r3, [fp, #-8]
   179b8:	cmn	r3, #1
   179bc:	beq	179dc <__assert_fail@plt+0x6814>
   179c0:	ldr	r3, [fp, #-8]
   179c4:	cmp	r3, #0
   179c8:	bne	179d4 <__assert_fail@plt+0x680c>
   179cc:	ldr	r3, [fp, #-12]
   179d0:	b	179e0 <__assert_fail@plt+0x6818>
   179d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   179d8:	b	179e0 <__assert_fail@plt+0x6818>
   179dc:	mov	r3, #0
   179e0:	mov	r0, r3
   179e4:	sub	sp, fp, #4
   179e8:	pop	{fp, pc}
   179ec:	push	{fp, lr}
   179f0:	add	fp, sp, #4
   179f4:	sub	sp, sp, #32
   179f8:	str	r0, [fp, #-32]	; 0xffffffe0
   179fc:	str	r1, [fp, #-36]	; 0xffffffdc
   17a00:	sub	r2, fp, #28
   17a04:	mov	r3, #1
   17a08:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17a0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17a10:	bl	17138 <__assert_fail@plt+0x5f70>
   17a14:	str	r0, [fp, #-12]
   17a18:	ldr	r3, [fp, #-12]
   17a1c:	cmp	r3, #0
   17a20:	bne	17a2c <__assert_fail@plt+0x6864>
   17a24:	mov	r3, #0
   17a28:	b	17bbc <__assert_fail@plt+0x69f4>
   17a2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a30:	ldr	r3, [r3, #16]
   17a34:	sub	r2, r3, #1
   17a38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a3c:	str	r2, [r3, #16]
   17a40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17a44:	ldr	r3, [r3]
   17a48:	cmp	r3, #0
   17a4c:	bne	17bb8 <__assert_fail@plt+0x69f0>
   17a50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a54:	ldr	r3, [r3, #12]
   17a58:	sub	r2, r3, #1
   17a5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a60:	str	r2, [r3, #12]
   17a64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a68:	ldr	r3, [r3, #12]
   17a6c:	vmov	s15, r3
   17a70:	vcvt.f32.u32	s14, s15
   17a74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a78:	ldr	r3, [r3, #20]
   17a7c:	vldr	s13, [r3]
   17a80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a84:	ldr	r3, [r3, #8]
   17a88:	vmov	s15, r3
   17a8c:	vcvt.f32.u32	s15, s15
   17a90:	vmul.f32	s15, s13, s15
   17a94:	vcmpe.f32	s14, s15
   17a98:	vmrs	APSR_nzcv, fpscr
   17a9c:	bpl	17bb8 <__assert_fail@plt+0x69f0>
   17aa0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17aa4:	bl	16a10 <__assert_fail@plt+0x5848>
   17aa8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17aac:	ldr	r3, [r3, #12]
   17ab0:	vmov	s15, r3
   17ab4:	vcvt.f32.u32	s14, s15
   17ab8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17abc:	ldr	r3, [r3, #20]
   17ac0:	vldr	s13, [r3]
   17ac4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ac8:	ldr	r3, [r3, #8]
   17acc:	vmov	s15, r3
   17ad0:	vcvt.f32.u32	s15, s15
   17ad4:	vmul.f32	s15, s13, s15
   17ad8:	vcmpe.f32	s14, s15
   17adc:	vmrs	APSR_nzcv, fpscr
   17ae0:	bpl	17bb8 <__assert_fail@plt+0x69f0>
   17ae4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ae8:	ldr	r3, [r3, #20]
   17aec:	str	r3, [fp, #-16]
   17af0:	ldr	r3, [fp, #-16]
   17af4:	ldrb	r3, [r3, #16]
   17af8:	cmp	r3, #0
   17afc:	beq	17b24 <__assert_fail@plt+0x695c>
   17b00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b04:	ldr	r3, [r3, #8]
   17b08:	vmov	s15, r3
   17b0c:	vcvt.f32.u32	s14, s15
   17b10:	ldr	r3, [fp, #-16]
   17b14:	vldr	s15, [r3, #4]
   17b18:	vmul.f32	s15, s14, s15
   17b1c:	vcvt.u32.f32	s15, s15
   17b20:	b	17b50 <__assert_fail@plt+0x6988>
   17b24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b28:	ldr	r3, [r3, #8]
   17b2c:	vmov	s15, r3
   17b30:	vcvt.f32.u32	s14, s15
   17b34:	ldr	r3, [fp, #-16]
   17b38:	vldr	s15, [r3, #4]
   17b3c:	vmul.f32	s14, s14, s15
   17b40:	ldr	r3, [fp, #-16]
   17b44:	vldr	s15, [r3, #8]
   17b48:	vmul.f32	s15, s14, s15
   17b4c:	vcvt.u32.f32	s15, s15
   17b50:	vstr	s15, [fp, #-20]	; 0xffffffec
   17b54:	ldr	r1, [fp, #-20]	; 0xffffffec
   17b58:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17b5c:	bl	174e0 <__assert_fail@plt+0x6318>
   17b60:	mov	r3, r0
   17b64:	eor	r3, r3, #1
   17b68:	uxtb	r3, r3
   17b6c:	cmp	r3, #0
   17b70:	beq	17bb8 <__assert_fail@plt+0x69f0>
   17b74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b78:	ldr	r3, [r3, #36]	; 0x24
   17b7c:	str	r3, [fp, #-8]
   17b80:	b	17ba0 <__assert_fail@plt+0x69d8>
   17b84:	ldr	r3, [fp, #-8]
   17b88:	ldr	r3, [r3, #4]
   17b8c:	str	r3, [fp, #-24]	; 0xffffffe8
   17b90:	ldr	r0, [fp, #-8]
   17b94:	bl	1d358 <__assert_fail@plt+0xc190>
   17b98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b9c:	str	r3, [fp, #-8]
   17ba0:	ldr	r3, [fp, #-8]
   17ba4:	cmp	r3, #0
   17ba8:	bne	17b84 <__assert_fail@plt+0x69bc>
   17bac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17bb0:	mov	r2, #0
   17bb4:	str	r2, [r3, #36]	; 0x24
   17bb8:	ldr	r3, [fp, #-12]
   17bbc:	mov	r0, r3
   17bc0:	sub	sp, fp, #4
   17bc4:	pop	{fp, pc}
   17bc8:	push	{fp, lr}
   17bcc:	add	fp, sp, #4
   17bd0:	sub	sp, sp, #8
   17bd4:	str	r0, [fp, #-8]
   17bd8:	str	r1, [fp, #-12]
   17bdc:	ldr	r1, [fp, #-12]
   17be0:	ldr	r0, [fp, #-8]
   17be4:	bl	179ec <__assert_fail@plt+0x6824>
   17be8:	mov	r3, r0
   17bec:	mov	r0, r3
   17bf0:	sub	sp, fp, #4
   17bf4:	pop	{fp, pc}
   17bf8:	push	{fp}		; (str fp, [sp, #-4]!)
   17bfc:	add	fp, sp, #0
   17c00:	sub	sp, sp, #20
   17c04:	str	r0, [fp, #-16]
   17c08:	str	r1, [fp, #-20]	; 0xffffffec
   17c0c:	ldr	r3, [fp, #-16]
   17c10:	mov	r2, #1
   17c14:	strb	r2, [r3, #28]
   17c18:	ldr	r3, [fp, #-16]
   17c1c:	mov	r2, #0
   17c20:	str	r2, [r3, #20]
   17c24:	ldr	r3, [fp, #-16]
   17c28:	mov	r2, #0
   17c2c:	str	r2, [r3, #24]
   17c30:	mov	r3, #0
   17c34:	str	r3, [fp, #-8]
   17c38:	b	17c58 <__assert_fail@plt+0x6a90>
   17c3c:	ldr	r3, [fp, #-16]
   17c40:	ldr	r2, [fp, #-8]
   17c44:	ldr	r1, [fp, #-20]	; 0xffffffec
   17c48:	str	r1, [r3, r2, lsl #2]
   17c4c:	ldr	r3, [fp, #-8]
   17c50:	add	r3, r3, #1
   17c54:	str	r3, [fp, #-8]
   17c58:	ldr	r3, [fp, #-8]
   17c5c:	cmp	r3, #3
   17c60:	ble	17c3c <__assert_fail@plt+0x6a74>
   17c64:	ldr	r3, [fp, #-16]
   17c68:	ldr	r2, [fp, #-20]	; 0xffffffec
   17c6c:	str	r2, [r3, #16]
   17c70:	nop			; (mov r0, r0)
   17c74:	add	sp, fp, #0
   17c78:	pop	{fp}		; (ldr fp, [sp], #4)
   17c7c:	bx	lr
   17c80:	push	{fp}		; (str fp, [sp, #-4]!)
   17c84:	add	fp, sp, #0
   17c88:	sub	sp, sp, #12
   17c8c:	str	r0, [fp, #-8]
   17c90:	ldr	r3, [fp, #-8]
   17c94:	ldrb	r3, [r3, #28]
   17c98:	mov	r0, r3
   17c9c:	add	sp, fp, #0
   17ca0:	pop	{fp}		; (ldr fp, [sp], #4)
   17ca4:	bx	lr
   17ca8:	push	{fp}		; (str fp, [sp, #-4]!)
   17cac:	add	fp, sp, #0
   17cb0:	sub	sp, sp, #20
   17cb4:	str	r0, [fp, #-16]
   17cb8:	str	r1, [fp, #-20]	; 0xffffffec
   17cbc:	ldr	r3, [fp, #-16]
   17cc0:	ldr	r3, [r3, #20]
   17cc4:	ldr	r2, [fp, #-16]
   17cc8:	ldrb	r2, [r2, #28]
   17ccc:	eor	r2, r2, #1
   17cd0:	uxtb	r2, r2
   17cd4:	add	r3, r3, r2
   17cd8:	and	r3, r3, #3
   17cdc:	str	r3, [fp, #-8]
   17ce0:	ldr	r3, [fp, #-16]
   17ce4:	ldr	r2, [fp, #-8]
   17ce8:	ldr	r3, [r3, r2, lsl #2]
   17cec:	str	r3, [fp, #-12]
   17cf0:	ldr	r3, [fp, #-16]
   17cf4:	ldr	r2, [fp, #-8]
   17cf8:	ldr	r1, [fp, #-20]	; 0xffffffec
   17cfc:	str	r1, [r3, r2, lsl #2]
   17d00:	ldr	r3, [fp, #-16]
   17d04:	ldr	r2, [fp, #-8]
   17d08:	str	r2, [r3, #20]
   17d0c:	ldr	r3, [fp, #-16]
   17d10:	ldr	r2, [r3, #24]
   17d14:	ldr	r3, [fp, #-8]
   17d18:	cmp	r2, r3
   17d1c:	bne	17d48 <__assert_fail@plt+0x6b80>
   17d20:	ldr	r3, [fp, #-16]
   17d24:	ldr	r3, [r3, #24]
   17d28:	ldr	r2, [fp, #-16]
   17d2c:	ldrb	r2, [r2, #28]
   17d30:	eor	r2, r2, #1
   17d34:	uxtb	r2, r2
   17d38:	add	r3, r3, r2
   17d3c:	and	r2, r3, #3
   17d40:	ldr	r3, [fp, #-16]
   17d44:	str	r2, [r3, #24]
   17d48:	ldr	r3, [fp, #-16]
   17d4c:	mov	r2, #0
   17d50:	strb	r2, [r3, #28]
   17d54:	ldr	r3, [fp, #-12]
   17d58:	mov	r0, r3
   17d5c:	add	sp, fp, #0
   17d60:	pop	{fp}		; (ldr fp, [sp], #4)
   17d64:	bx	lr
   17d68:	push	{fp, lr}
   17d6c:	add	fp, sp, #4
   17d70:	sub	sp, sp, #16
   17d74:	str	r0, [fp, #-16]
   17d78:	ldr	r0, [fp, #-16]
   17d7c:	bl	17c80 <__assert_fail@plt+0x6ab8>
   17d80:	mov	r3, r0
   17d84:	cmp	r3, #0
   17d88:	beq	17d90 <__assert_fail@plt+0x6bc8>
   17d8c:	bl	11198 <abort@plt>
   17d90:	ldr	r3, [fp, #-16]
   17d94:	ldr	r2, [r3, #20]
   17d98:	ldr	r3, [fp, #-16]
   17d9c:	ldr	r3, [r3, r2, lsl #2]
   17da0:	str	r3, [fp, #-8]
   17da4:	ldr	r3, [fp, #-16]
   17da8:	ldr	r2, [r3, #20]
   17dac:	ldr	r3, [fp, #-16]
   17db0:	ldr	r1, [r3, #16]
   17db4:	ldr	r3, [fp, #-16]
   17db8:	str	r1, [r3, r2, lsl #2]
   17dbc:	ldr	r3, [fp, #-16]
   17dc0:	ldr	r2, [r3, #20]
   17dc4:	ldr	r3, [fp, #-16]
   17dc8:	ldr	r3, [r3, #24]
   17dcc:	cmp	r2, r3
   17dd0:	bne	17de4 <__assert_fail@plt+0x6c1c>
   17dd4:	ldr	r3, [fp, #-16]
   17dd8:	mov	r2, #1
   17ddc:	strb	r2, [r3, #28]
   17de0:	b	17dfc <__assert_fail@plt+0x6c34>
   17de4:	ldr	r3, [fp, #-16]
   17de8:	ldr	r3, [r3, #20]
   17dec:	add	r3, r3, #3
   17df0:	and	r2, r3, #3
   17df4:	ldr	r3, [fp, #-16]
   17df8:	str	r2, [r3, #20]
   17dfc:	ldr	r3, [fp, #-8]
   17e00:	mov	r0, r3
   17e04:	sub	sp, fp, #4
   17e08:	pop	{fp, pc}
   17e0c:	push	{fp}		; (str fp, [sp, #-4]!)
   17e10:	add	fp, sp, #0
   17e14:	sub	sp, sp, #12
   17e18:	str	r0, [fp, #-8]
   17e1c:	ldr	r3, [fp, #-8]
   17e20:	mov	r0, r3
   17e24:	add	sp, fp, #0
   17e28:	pop	{fp}		; (ldr fp, [sp], #4)
   17e2c:	bx	lr
   17e30:	push	{fp, lr}
   17e34:	add	fp, sp, #4
   17e38:	sub	sp, sp, #16
   17e3c:	str	r0, [fp, #-16]
   17e40:	str	r1, [fp, #-20]	; 0xffffffec
   17e44:	mov	r0, #32
   17e48:	bl	1b8e0 <__assert_fail@plt+0xa718>
   17e4c:	mov	r3, r0
   17e50:	str	r3, [fp, #-8]
   17e54:	ldr	r3, [fp, #-8]
   17e58:	mov	r2, #61	; 0x3d
   17e5c:	strb	r2, [r3]
   17e60:	ldr	r3, [fp, #-8]
   17e64:	mov	r2, #1
   17e68:	strb	r2, [r3, #1]
   17e6c:	ldr	r3, [fp, #-8]
   17e70:	ldr	r2, [pc, #56]	; 17eb0 <__assert_fail@plt+0x6ce8>
   17e74:	str	r2, [r3, #4]
   17e78:	ldr	r3, [fp, #-8]
   17e7c:	ldr	r2, [fp, #-16]
   17e80:	str	r2, [r3, #8]
   17e84:	ldr	r3, [fp, #-8]
   17e88:	ldr	r2, [fp, #-20]	; 0xffffffec
   17e8c:	str	r2, [r3, #12]
   17e90:	ldr	r3, [fp, #-8]
   17e94:	add	r3, r3, #16
   17e98:	mov	r2, #0
   17e9c:	strb	r2, [r3, #1]
   17ea0:	ldr	r3, [fp, #-8]
   17ea4:	mov	r0, r3
   17ea8:	sub	sp, fp, #4
   17eac:	pop	{fp, pc}
   17eb0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17eb4:	push	{fp, lr}
   17eb8:	add	fp, sp, #4
   17ebc:	sub	sp, sp, #64	; 0x40
   17ec0:	str	r0, [fp, #-64]	; 0xffffffc0
   17ec4:	mov	r3, #0
   17ec8:	str	r3, [fp, #-8]
   17ecc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17ed0:	ldrb	r3, [r3]
   17ed4:	cmp	r3, #47	; 0x2f
   17ed8:	bls	17fbc <__assert_fail@plt+0x6df4>
   17edc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17ee0:	ldrb	r3, [r3]
   17ee4:	cmp	r3, #55	; 0x37
   17ee8:	bhi	17fbc <__assert_fail@plt+0x6df4>
   17eec:	mov	r3, #0
   17ef0:	str	r3, [fp, #-16]
   17ef4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17ef8:	str	r3, [fp, #-12]
   17efc:	ldr	r3, [fp, #-16]
   17f00:	lsl	r2, r3, #3
   17f04:	ldr	r3, [fp, #-12]
   17f08:	add	r1, r3, #1
   17f0c:	str	r1, [fp, #-12]
   17f10:	ldrb	r3, [r3]
   17f14:	add	r3, r2, r3
   17f18:	sub	r3, r3, #48	; 0x30
   17f1c:	str	r3, [fp, #-16]
   17f20:	ldr	r3, [fp, #-16]
   17f24:	cmp	r3, #4096	; 0x1000
   17f28:	bcc	17f34 <__assert_fail@plt+0x6d6c>
   17f2c:	mov	r3, #0
   17f30:	b	18490 <__assert_fail@plt+0x72c8>
   17f34:	ldr	r3, [fp, #-12]
   17f38:	ldrb	r3, [r3]
   17f3c:	cmp	r3, #47	; 0x2f
   17f40:	bls	17f54 <__assert_fail@plt+0x6d8c>
   17f44:	ldr	r3, [fp, #-12]
   17f48:	ldrb	r3, [r3]
   17f4c:	cmp	r3, #55	; 0x37
   17f50:	bls	17efc <__assert_fail@plt+0x6d34>
   17f54:	ldr	r3, [fp, #-12]
   17f58:	ldrb	r3, [r3]
   17f5c:	cmp	r3, #0
   17f60:	beq	17f6c <__assert_fail@plt+0x6da4>
   17f64:	mov	r3, #0
   17f68:	b	18490 <__assert_fail@plt+0x72c8>
   17f6c:	ldr	r0, [fp, #-16]
   17f70:	bl	17e0c <__assert_fail@plt+0x6c44>
   17f74:	str	r0, [fp, #-44]	; 0xffffffd4
   17f78:	ldr	r2, [fp, #-12]
   17f7c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17f80:	sub	r3, r2, r3
   17f84:	cmp	r3, #4
   17f88:	bgt	17fa0 <__assert_fail@plt+0x6dd8>
   17f8c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17f90:	and	r3, r3, #3072	; 0xc00
   17f94:	mvn	r3, r3, lsr #10
   17f98:	mvn	r3, r3, lsl #10
   17f9c:	b	17fa4 <__assert_fail@plt+0x6ddc>
   17fa0:	ldr	r3, [pc, #1268]	; 1849c <__assert_fail@plt+0x72d4>
   17fa4:	str	r3, [fp, #-48]	; 0xffffffd0
   17fa8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17fac:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17fb0:	bl	17e30 <__assert_fail@plt+0x6c68>
   17fb4:	mov	r3, r0
   17fb8:	b	18490 <__assert_fail@plt+0x72c8>
   17fbc:	mov	r3, #1
   17fc0:	str	r3, [fp, #-20]	; 0xffffffec
   17fc4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17fc8:	str	r3, [fp, #-12]
   17fcc:	b	18028 <__assert_fail@plt+0x6e60>
   17fd0:	ldr	r3, [fp, #-12]
   17fd4:	ldrb	r3, [r3]
   17fd8:	cmp	r3, #61	; 0x3d
   17fdc:	beq	18000 <__assert_fail@plt+0x6e38>
   17fe0:	ldr	r3, [fp, #-12]
   17fe4:	ldrb	r3, [r3]
   17fe8:	cmp	r3, #43	; 0x2b
   17fec:	beq	18000 <__assert_fail@plt+0x6e38>
   17ff0:	ldr	r3, [fp, #-12]
   17ff4:	ldrb	r3, [r3]
   17ff8:	cmp	r3, #45	; 0x2d
   17ffc:	bne	18008 <__assert_fail@plt+0x6e40>
   18000:	mov	r3, #1
   18004:	b	1800c <__assert_fail@plt+0x6e44>
   18008:	mov	r3, #0
   1800c:	mov	r2, r3
   18010:	ldr	r3, [fp, #-20]	; 0xffffffec
   18014:	add	r3, r3, r2
   18018:	str	r3, [fp, #-20]	; 0xffffffec
   1801c:	ldr	r3, [fp, #-12]
   18020:	add	r3, r3, #1
   18024:	str	r3, [fp, #-12]
   18028:	ldr	r3, [fp, #-12]
   1802c:	ldrb	r3, [r3]
   18030:	cmp	r3, #0
   18034:	bne	17fd0 <__assert_fail@plt+0x6e08>
   18038:	mov	r1, #16
   1803c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18040:	bl	1babc <__assert_fail@plt+0xa8f4>
   18044:	mov	r3, r0
   18048:	str	r3, [fp, #-52]	; 0xffffffcc
   1804c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   18050:	str	r3, [fp, #-12]
   18054:	mov	r3, #0
   18058:	str	r3, [fp, #-24]	; 0xffffffe8
   1805c:	ldr	r3, [fp, #-12]
   18060:	ldrb	r3, [r3]
   18064:	cmp	r3, #97	; 0x61
   18068:	beq	180e4 <__assert_fail@plt+0x6f1c>
   1806c:	cmp	r3, #97	; 0x61
   18070:	bgt	18090 <__assert_fail@plt+0x6ec8>
   18074:	cmp	r3, #45	; 0x2d
   18078:	beq	18104 <__assert_fail@plt+0x6f3c>
   1807c:	cmp	r3, #61	; 0x3d
   18080:	beq	18104 <__assert_fail@plt+0x6f3c>
   18084:	cmp	r3, #43	; 0x2b
   18088:	beq	18104 <__assert_fail@plt+0x6f3c>
   1808c:	b	18484 <__assert_fail@plt+0x72bc>
   18090:	cmp	r3, #111	; 0x6f
   18094:	beq	180d0 <__assert_fail@plt+0x6f08>
   18098:	cmp	r3, #117	; 0x75
   1809c:	beq	180ac <__assert_fail@plt+0x6ee4>
   180a0:	cmp	r3, #103	; 0x67
   180a4:	beq	180bc <__assert_fail@plt+0x6ef4>
   180a8:	b	18484 <__assert_fail@plt+0x72bc>
   180ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180b0:	orr	r3, r3, #2496	; 0x9c0
   180b4:	str	r3, [fp, #-24]	; 0xffffffe8
   180b8:	b	180f4 <__assert_fail@plt+0x6f2c>
   180bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180c0:	orr	r3, r3, #1072	; 0x430
   180c4:	orr	r3, r3, #8
   180c8:	str	r3, [fp, #-24]	; 0xffffffe8
   180cc:	b	180f4 <__assert_fail@plt+0x6f2c>
   180d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180d4:	orr	r3, r3, #516	; 0x204
   180d8:	orr	r3, r3, #3
   180dc:	str	r3, [fp, #-24]	; 0xffffffe8
   180e0:	b	180f4 <__assert_fail@plt+0x6f2c>
   180e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180e8:	mvn	r3, r3, lsr #12
   180ec:	mvn	r3, r3, lsl #12
   180f0:	str	r3, [fp, #-24]	; 0xffffffe8
   180f4:	ldr	r3, [fp, #-12]
   180f8:	add	r3, r3, #1
   180fc:	str	r3, [fp, #-12]
   18100:	b	1805c <__assert_fail@plt+0x6e94>
   18104:	ldr	r3, [fp, #-12]
   18108:	add	r2, r3, #1
   1810c:	str	r2, [fp, #-12]
   18110:	ldrb	r3, [r3]
   18114:	strb	r3, [fp, #-53]	; 0xffffffcb
   18118:	mov	r3, #0
   1811c:	str	r3, [fp, #-32]	; 0xffffffe0
   18120:	mov	r3, #3
   18124:	strb	r3, [fp, #-33]	; 0xffffffdf
   18128:	ldr	r3, [fp, #-12]
   1812c:	ldrb	r3, [r3]
   18130:	cmp	r3, #103	; 0x67
   18134:	beq	18228 <__assert_fail@plt+0x7060>
   18138:	cmp	r3, #103	; 0x67
   1813c:	bgt	18150 <__assert_fail@plt+0x6f88>
   18140:	sub	r3, r3, #48	; 0x30
   18144:	cmp	r3, #7
   18148:	bhi	18258 <__assert_fail@plt+0x7090>
   1814c:	b	18164 <__assert_fail@plt+0x6f9c>
   18150:	cmp	r3, #111	; 0x6f
   18154:	beq	18240 <__assert_fail@plt+0x7078>
   18158:	cmp	r3, #117	; 0x75
   1815c:	beq	18210 <__assert_fail@plt+0x7048>
   18160:	b	18258 <__assert_fail@plt+0x7090>
   18164:	mov	r3, #0
   18168:	str	r3, [fp, #-40]	; 0xffffffd8
   1816c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18170:	lsl	r2, r3, #3
   18174:	ldr	r3, [fp, #-12]
   18178:	add	r1, r3, #1
   1817c:	str	r1, [fp, #-12]
   18180:	ldrb	r3, [r3]
   18184:	add	r3, r2, r3
   18188:	sub	r3, r3, #48	; 0x30
   1818c:	str	r3, [fp, #-40]	; 0xffffffd8
   18190:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18194:	cmp	r3, #4096	; 0x1000
   18198:	bcs	18480 <__assert_fail@plt+0x72b8>
   1819c:	ldr	r3, [fp, #-12]
   181a0:	ldrb	r3, [r3]
   181a4:	cmp	r3, #47	; 0x2f
   181a8:	bls	181bc <__assert_fail@plt+0x6ff4>
   181ac:	ldr	r3, [fp, #-12]
   181b0:	ldrb	r3, [r3]
   181b4:	cmp	r3, #55	; 0x37
   181b8:	bls	1816c <__assert_fail@plt+0x6fa4>
   181bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   181c0:	cmp	r3, #0
   181c4:	bne	18484 <__assert_fail@plt+0x72bc>
   181c8:	ldr	r3, [fp, #-12]
   181cc:	ldrb	r3, [r3]
   181d0:	cmp	r3, #0
   181d4:	beq	181e8 <__assert_fail@plt+0x7020>
   181d8:	ldr	r3, [fp, #-12]
   181dc:	ldrb	r3, [r3]
   181e0:	cmp	r3, #44	; 0x2c
   181e4:	bne	18484 <__assert_fail@plt+0x72bc>
   181e8:	ldr	r3, [pc, #684]	; 1849c <__assert_fail@plt+0x72d4>
   181ec:	str	r3, [fp, #-32]	; 0xffffffe0
   181f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   181f4:	str	r3, [fp, #-24]	; 0xffffffe8
   181f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   181fc:	bl	17e0c <__assert_fail@plt+0x6c44>
   18200:	str	r0, [fp, #-28]	; 0xffffffe4
   18204:	mov	r3, #1
   18208:	strb	r3, [fp, #-33]	; 0xffffffdf
   1820c:	b	18374 <__assert_fail@plt+0x71ac>
   18210:	mov	r3, #448	; 0x1c0
   18214:	str	r3, [fp, #-28]	; 0xffffffe4
   18218:	ldr	r3, [fp, #-12]
   1821c:	add	r3, r3, #1
   18220:	str	r3, [fp, #-12]
   18224:	b	18374 <__assert_fail@plt+0x71ac>
   18228:	mov	r3, #56	; 0x38
   1822c:	str	r3, [fp, #-28]	; 0xffffffe4
   18230:	ldr	r3, [fp, #-12]
   18234:	add	r3, r3, #1
   18238:	str	r3, [fp, #-12]
   1823c:	b	18374 <__assert_fail@plt+0x71ac>
   18240:	mov	r3, #7
   18244:	str	r3, [fp, #-28]	; 0xffffffe4
   18248:	ldr	r3, [fp, #-12]
   1824c:	add	r3, r3, #1
   18250:	str	r3, [fp, #-12]
   18254:	b	18374 <__assert_fail@plt+0x71ac>
   18258:	mov	r3, #0
   1825c:	str	r3, [fp, #-28]	; 0xffffffe4
   18260:	mov	r3, #1
   18264:	strb	r3, [fp, #-33]	; 0xffffffdf
   18268:	ldr	r3, [fp, #-12]
   1826c:	ldrb	r3, [r3]
   18270:	sub	r3, r3, #88	; 0x58
   18274:	cmp	r3, #32
   18278:	ldrls	pc, [pc, r3, lsl #2]
   1827c:	b	18370 <__assert_fail@plt+0x71a8>
   18280:	andeq	r8, r1, r4, lsr r3
   18284:	andeq	r8, r1, r0, ror r3
   18288:	andeq	r8, r1, r0, ror r3
   1828c:	andeq	r8, r1, r0, ror r3
   18290:	andeq	r8, r1, r0, ror r3
   18294:	andeq	r8, r1, r0, ror r3
   18298:	andeq	r8, r1, r0, ror r3
   1829c:	andeq	r8, r1, r0, ror r3
   182a0:	andeq	r8, r1, r0, ror r3
   182a4:	andeq	r8, r1, r0, ror r3
   182a8:	andeq	r8, r1, r0, ror r3
   182ac:	andeq	r8, r1, r0, ror r3
   182b0:	andeq	r8, r1, r0, ror r3
   182b4:	andeq	r8, r1, r0, ror r3
   182b8:	andeq	r8, r1, r0, ror r3
   182bc:	andeq	r8, r1, r0, ror r3
   182c0:	andeq	r8, r1, r0, ror r3
   182c4:	andeq	r8, r1, r0, ror r3
   182c8:	andeq	r8, r1, r0, ror r3
   182cc:	andeq	r8, r1, r0, ror r3
   182d0:	andeq	r8, r1, r0, ror r3
   182d4:	andeq	r8, r1, r0, ror r3
   182d8:	andeq	r8, r1, r0, ror r3
   182dc:	andeq	r8, r1, r0, ror r3
   182e0:	andeq	r8, r1, r0, ror r3
   182e4:	andeq	r8, r1, r0, ror r3
   182e8:	andeq	r8, r1, r4, lsl #6
   182ec:	andeq	r8, r1, r0, asr #6
   182f0:	andeq	r8, r1, r0, asr r3
   182f4:	andeq	r8, r1, r0, ror r3
   182f8:	andeq	r8, r1, r0, ror r3
   182fc:	andeq	r8, r1, r4, lsl r3
   18300:	andeq	r8, r1, r4, lsr #6
   18304:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18308:	orr	r3, r3, #292	; 0x124
   1830c:	str	r3, [fp, #-28]	; 0xffffffe4
   18310:	b	18360 <__assert_fail@plt+0x7198>
   18314:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18318:	orr	r3, r3, #146	; 0x92
   1831c:	str	r3, [fp, #-28]	; 0xffffffe4
   18320:	b	18360 <__assert_fail@plt+0x7198>
   18324:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18328:	orr	r3, r3, #73	; 0x49
   1832c:	str	r3, [fp, #-28]	; 0xffffffe4
   18330:	b	18360 <__assert_fail@plt+0x7198>
   18334:	mov	r3, #2
   18338:	strb	r3, [fp, #-33]	; 0xffffffdf
   1833c:	b	18360 <__assert_fail@plt+0x7198>
   18340:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18344:	orr	r3, r3, #3072	; 0xc00
   18348:	str	r3, [fp, #-28]	; 0xffffffe4
   1834c:	b	18360 <__assert_fail@plt+0x7198>
   18350:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18354:	orr	r3, r3, #512	; 0x200
   18358:	str	r3, [fp, #-28]	; 0xffffffe4
   1835c:	nop			; (mov r0, r0)
   18360:	ldr	r3, [fp, #-12]
   18364:	add	r3, r3, #1
   18368:	str	r3, [fp, #-12]
   1836c:	b	18268 <__assert_fail@plt+0x70a0>
   18370:	nop			; (mov r0, r0)
   18374:	ldr	r3, [fp, #-8]
   18378:	add	r2, r3, #1
   1837c:	str	r2, [fp, #-8]
   18380:	lsl	r3, r3, #4
   18384:	ldr	r2, [fp, #-52]	; 0xffffffcc
   18388:	add	r3, r2, r3
   1838c:	str	r3, [fp, #-60]	; 0xffffffc4
   18390:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18394:	ldrb	r2, [fp, #-53]	; 0xffffffcb
   18398:	strb	r2, [r3]
   1839c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   183a0:	ldrb	r2, [fp, #-33]	; 0xffffffdf
   183a4:	strb	r2, [r3, #1]
   183a8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   183ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   183b0:	str	r2, [r3, #4]
   183b4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   183b8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   183bc:	str	r2, [r3, #8]
   183c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   183c4:	cmp	r3, #0
   183c8:	bne	183f0 <__assert_fail@plt+0x7228>
   183cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   183d0:	cmp	r3, #0
   183d4:	beq	183e8 <__assert_fail@plt+0x7220>
   183d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   183dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   183e0:	and	r3, r3, r2
   183e4:	b	183f4 <__assert_fail@plt+0x722c>
   183e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   183ec:	b	183f4 <__assert_fail@plt+0x722c>
   183f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   183f4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   183f8:	str	r3, [r2, #12]
   183fc:	ldr	r3, [fp, #-12]
   18400:	ldrb	r3, [r3]
   18404:	cmp	r3, #61	; 0x3d
   18408:	beq	18104 <__assert_fail@plt+0x6f3c>
   1840c:	ldr	r3, [fp, #-12]
   18410:	ldrb	r3, [r3]
   18414:	cmp	r3, #43	; 0x2b
   18418:	beq	18104 <__assert_fail@plt+0x6f3c>
   1841c:	ldr	r3, [fp, #-12]
   18420:	ldrb	r3, [r3]
   18424:	cmp	r3, #45	; 0x2d
   18428:	beq	18104 <__assert_fail@plt+0x6f3c>
   1842c:	ldr	r3, [fp, #-12]
   18430:	ldrb	r3, [r3]
   18434:	cmp	r3, #44	; 0x2c
   18438:	bne	1844c <__assert_fail@plt+0x7284>
   1843c:	ldr	r3, [fp, #-12]
   18440:	add	r3, r3, #1
   18444:	str	r3, [fp, #-12]
   18448:	b	18054 <__assert_fail@plt+0x6e8c>
   1844c:	nop			; (mov r0, r0)
   18450:	ldr	r3, [fp, #-12]
   18454:	ldrb	r3, [r3]
   18458:	cmp	r3, #0
   1845c:	bne	18484 <__assert_fail@plt+0x72bc>
   18460:	ldr	r3, [fp, #-8]
   18464:	lsl	r3, r3, #4
   18468:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1846c:	add	r3, r2, r3
   18470:	mov	r2, #0
   18474:	strb	r2, [r3, #1]
   18478:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1847c:	b	18490 <__assert_fail@plt+0x72c8>
   18480:	nop			; (mov r0, r0)
   18484:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18488:	bl	1d358 <__assert_fail@plt+0xc190>
   1848c:	mov	r3, #0
   18490:	mov	r0, r3
   18494:	sub	sp, fp, #4
   18498:	pop	{fp, pc}
   1849c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   184a0:	push	{fp, lr}
   184a4:	add	fp, sp, #4
   184a8:	sub	sp, sp, #112	; 0x70
   184ac:	str	r0, [fp, #-112]	; 0xffffff90
   184b0:	sub	r3, fp, #108	; 0x6c
   184b4:	mov	r1, r3
   184b8:	ldr	r0, [fp, #-112]	; 0xffffff90
   184bc:	bl	1e520 <__assert_fail@plt+0xd358>
   184c0:	mov	r3, r0
   184c4:	cmp	r3, #0
   184c8:	beq	184d4 <__assert_fail@plt+0x730c>
   184cc:	mov	r3, #0
   184d0:	b	184e8 <__assert_fail@plt+0x7320>
   184d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   184d8:	ldr	r1, [pc, #20]	; 184f4 <__assert_fail@plt+0x732c>
   184dc:	mov	r0, r3
   184e0:	bl	17e30 <__assert_fail@plt+0x6c68>
   184e4:	mov	r3, r0
   184e8:	mov	r0, r3
   184ec:	sub	sp, fp, #4
   184f0:	pop	{fp, pc}
   184f4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   184f8:	push	{fp}		; (str fp, [sp, #-4]!)
   184fc:	add	fp, sp, #0
   18500:	sub	sp, sp, #44	; 0x2c
   18504:	str	r0, [fp, #-32]	; 0xffffffe0
   18508:	str	r2, [fp, #-40]	; 0xffffffd8
   1850c:	str	r3, [fp, #-44]	; 0xffffffd4
   18510:	mov	r3, r1
   18514:	strb	r3, [fp, #-33]	; 0xffffffdf
   18518:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1851c:	lsl	r3, r3, #20
   18520:	lsr	r3, r3, #20
   18524:	str	r3, [fp, #-8]
   18528:	mov	r3, #0
   1852c:	str	r3, [fp, #-12]
   18530:	b	18750 <__assert_fail@plt+0x7588>
   18534:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18538:	ldr	r3, [r3, #4]
   1853c:	str	r3, [fp, #-20]	; 0xffffffec
   18540:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18544:	cmp	r3, #0
   18548:	beq	18554 <__assert_fail@plt+0x738c>
   1854c:	mov	r2, #3072	; 0xc00
   18550:	b	18558 <__assert_fail@plt+0x7390>
   18554:	mov	r2, #0
   18558:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1855c:	ldr	r3, [r3, #12]
   18560:	mvn	r3, r3
   18564:	and	r3, r3, r2
   18568:	str	r3, [fp, #-24]	; 0xffffffe8
   1856c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18570:	ldr	r3, [r3, #8]
   18574:	str	r3, [fp, #-16]
   18578:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1857c:	ldrb	r3, [r3, #1]
   18580:	cmp	r3, #2
   18584:	beq	18618 <__assert_fail@plt+0x7450>
   18588:	cmp	r3, #3
   1858c:	beq	18598 <__assert_fail@plt+0x73d0>
   18590:	cmp	r3, #1
   18594:	b	18640 <__assert_fail@plt+0x7478>
   18598:	ldr	r2, [fp, #-16]
   1859c:	ldr	r3, [fp, #-8]
   185a0:	and	r3, r3, r2
   185a4:	str	r3, [fp, #-16]
   185a8:	ldr	r3, [fp, #-16]
   185ac:	and	r3, r3, #292	; 0x124
   185b0:	cmp	r3, #0
   185b4:	beq	185c0 <__assert_fail@plt+0x73f8>
   185b8:	mov	r2, #292	; 0x124
   185bc:	b	185c4 <__assert_fail@plt+0x73fc>
   185c0:	mov	r2, #0
   185c4:	ldr	r3, [fp, #-16]
   185c8:	and	r3, r3, #146	; 0x92
   185cc:	cmp	r3, #0
   185d0:	beq	185dc <__assert_fail@plt+0x7414>
   185d4:	mov	r3, #146	; 0x92
   185d8:	b	185e0 <__assert_fail@plt+0x7418>
   185dc:	mov	r3, #0
   185e0:	orr	r2, r2, r3
   185e4:	ldr	r3, [fp, #-16]
   185e8:	and	r3, r3, #73	; 0x49
   185ec:	cmp	r3, #0
   185f0:	beq	185fc <__assert_fail@plt+0x7434>
   185f4:	mov	r3, #73	; 0x49
   185f8:	b	18600 <__assert_fail@plt+0x7438>
   185fc:	mov	r3, #0
   18600:	orr	r3, r2, r3
   18604:	mov	r2, r3
   18608:	ldr	r3, [fp, #-16]
   1860c:	orr	r3, r3, r2
   18610:	str	r3, [fp, #-16]
   18614:	b	18640 <__assert_fail@plt+0x7478>
   18618:	ldr	r3, [fp, #-8]
   1861c:	and	r2, r3, #73	; 0x49
   18620:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18624:	orr	r3, r2, r3
   18628:	cmp	r3, #0
   1862c:	beq	1863c <__assert_fail@plt+0x7474>
   18630:	ldr	r3, [fp, #-16]
   18634:	orr	r3, r3, #73	; 0x49
   18638:	str	r3, [fp, #-16]
   1863c:	nop			; (mov r0, r0)
   18640:	ldr	r3, [fp, #-20]	; 0xffffffec
   18644:	cmp	r3, #0
   18648:	bne	18658 <__assert_fail@plt+0x7490>
   1864c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18650:	mvn	r3, r3
   18654:	b	1865c <__assert_fail@plt+0x7494>
   18658:	ldr	r3, [fp, #-20]	; 0xffffffec
   1865c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18660:	mvn	r2, r2
   18664:	and	r3, r3, r2
   18668:	ldr	r2, [fp, #-16]
   1866c:	and	r3, r3, r2
   18670:	str	r3, [fp, #-16]
   18674:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18678:	ldrb	r3, [r3]
   1867c:	cmp	r3, #45	; 0x2d
   18680:	beq	1871c <__assert_fail@plt+0x7554>
   18684:	cmp	r3, #61	; 0x3d
   18688:	beq	18698 <__assert_fail@plt+0x74d0>
   1868c:	cmp	r3, #43	; 0x2b
   18690:	beq	186f8 <__assert_fail@plt+0x7530>
   18694:	b	18744 <__assert_fail@plt+0x757c>
   18698:	ldr	r3, [fp, #-20]	; 0xffffffec
   1869c:	cmp	r3, #0
   186a0:	beq	186b0 <__assert_fail@plt+0x74e8>
   186a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   186a8:	mvn	r3, r3
   186ac:	b	186b4 <__assert_fail@plt+0x74ec>
   186b0:	mov	r3, #0
   186b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   186b8:	orr	r3, r3, r2
   186bc:	str	r3, [fp, #-28]	; 0xffffffe4
   186c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   186c4:	mvn	r3, r3
   186c8:	lsl	r3, r3, #20
   186cc:	lsr	r3, r3, #20
   186d0:	ldr	r2, [fp, #-12]
   186d4:	orr	r3, r2, r3
   186d8:	str	r3, [fp, #-12]
   186dc:	ldr	r2, [fp, #-8]
   186e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   186e4:	and	r2, r2, r3
   186e8:	ldr	r3, [fp, #-16]
   186ec:	orr	r3, r2, r3
   186f0:	str	r3, [fp, #-8]
   186f4:	b	18744 <__assert_fail@plt+0x757c>
   186f8:	ldr	r2, [fp, #-12]
   186fc:	ldr	r3, [fp, #-16]
   18700:	orr	r3, r2, r3
   18704:	str	r3, [fp, #-12]
   18708:	ldr	r2, [fp, #-8]
   1870c:	ldr	r3, [fp, #-16]
   18710:	orr	r3, r2, r3
   18714:	str	r3, [fp, #-8]
   18718:	b	18744 <__assert_fail@plt+0x757c>
   1871c:	ldr	r2, [fp, #-12]
   18720:	ldr	r3, [fp, #-16]
   18724:	orr	r3, r2, r3
   18728:	str	r3, [fp, #-12]
   1872c:	ldr	r3, [fp, #-16]
   18730:	mvn	r3, r3
   18734:	ldr	r2, [fp, #-8]
   18738:	and	r3, r3, r2
   1873c:	str	r3, [fp, #-8]
   18740:	nop			; (mov r0, r0)
   18744:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18748:	add	r3, r3, #16
   1874c:	str	r3, [fp, #-44]	; 0xffffffd4
   18750:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18754:	ldrb	r3, [r3, #1]
   18758:	cmp	r3, #0
   1875c:	bne	18534 <__assert_fail@plt+0x736c>
   18760:	ldr	r3, [fp, #4]
   18764:	cmp	r3, #0
   18768:	beq	18778 <__assert_fail@plt+0x75b0>
   1876c:	ldr	r3, [fp, #4]
   18770:	ldr	r2, [fp, #-12]
   18774:	str	r2, [r3]
   18778:	ldr	r3, [fp, #-8]
   1877c:	mov	r0, r3
   18780:	add	sp, fp, #0
   18784:	pop	{fp}		; (ldr fp, [sp], #4)
   18788:	bx	lr
   1878c:	push	{r2, r3}
   18790:	push	{fp, lr}
   18794:	add	fp, sp, #4
   18798:	sub	sp, sp, #16
   1879c:	str	r0, [fp, #-16]
   187a0:	str	r1, [fp, #-20]	; 0xffffffec
   187a4:	mov	r3, #0
   187a8:	str	r3, [fp, #-8]
   187ac:	ldr	r3, [fp, #4]
   187b0:	and	r3, r3, #64	; 0x40
   187b4:	cmp	r3, #0
   187b8:	beq	187d8 <__assert_fail@plt+0x7610>
   187bc:	add	r3, fp, #8
   187c0:	str	r3, [fp, #-12]
   187c4:	ldr	r3, [fp, #-12]
   187c8:	add	r2, r3, #4
   187cc:	str	r2, [fp, #-12]
   187d0:	ldr	r3, [r3]
   187d4:	str	r3, [fp, #-8]
   187d8:	ldr	r3, [fp, #-8]
   187dc:	ldr	r2, [fp, #4]
   187e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   187e4:	ldr	r0, [fp, #-16]
   187e8:	bl	11078 <openat64@plt>
   187ec:	mov	r3, r0
   187f0:	mov	r0, r3
   187f4:	bl	1b080 <__assert_fail@plt+0x9eb8>
   187f8:	mov	r3, r0
   187fc:	mov	r0, r3
   18800:	sub	sp, fp, #4
   18804:	pop	{fp, lr}
   18808:	add	sp, sp, #8
   1880c:	bx	lr
   18810:	push	{fp, lr}
   18814:	add	fp, sp, #4
   18818:	sub	sp, sp, #32
   1881c:	str	r0, [fp, #-24]	; 0xffffffe8
   18820:	str	r1, [fp, #-28]	; 0xffffffe4
   18824:	str	r2, [fp, #-32]	; 0xffffffe0
   18828:	str	r3, [fp, #-36]	; 0xffffffdc
   1882c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18830:	orr	r3, r3, #540672	; 0x84000
   18834:	orr	r3, r3, #2304	; 0x900
   18838:	str	r3, [fp, #-8]
   1883c:	ldr	r2, [fp, #-8]
   18840:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18844:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18848:	bl	1878c <__assert_fail@plt+0x75c4>
   1884c:	str	r0, [fp, #-12]
   18850:	ldr	r3, [fp, #-12]
   18854:	cmp	r3, #0
   18858:	bge	18864 <__assert_fail@plt+0x769c>
   1885c:	mov	r3, #0
   18860:	b	188b8 <__assert_fail@plt+0x76f0>
   18864:	ldr	r0, [fp, #-12]
   18868:	bl	1112c <fdopendir@plt>
   1886c:	str	r0, [fp, #-16]
   18870:	ldr	r3, [fp, #-16]
   18874:	cmp	r3, #0
   18878:	beq	1888c <__assert_fail@plt+0x76c4>
   1887c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18880:	ldr	r2, [fp, #-12]
   18884:	str	r2, [r3]
   18888:	b	188b4 <__assert_fail@plt+0x76ec>
   1888c:	bl	1109c <__errno_location@plt>
   18890:	mov	r3, r0
   18894:	ldr	r3, [r3]
   18898:	str	r3, [fp, #-20]	; 0xffffffec
   1889c:	ldr	r0, [fp, #-12]
   188a0:	bl	111a4 <close@plt>
   188a4:	bl	1109c <__errno_location@plt>
   188a8:	mov	r2, r0
   188ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   188b0:	str	r3, [r2]
   188b4:	ldr	r3, [fp, #-16]
   188b8:	mov	r0, r3
   188bc:	sub	sp, fp, #4
   188c0:	pop	{fp, pc}
   188c4:	push	{fp, lr}
   188c8:	add	fp, sp, #4
   188cc:	sub	sp, sp, #16
   188d0:	str	r0, [fp, #-16]
   188d4:	ldr	r3, [fp, #-16]
   188d8:	cmp	r3, #0
   188dc:	bne	188fc <__assert_fail@plt+0x7734>
   188e0:	ldr	r3, [pc, #220]	; 189c4 <__assert_fail@plt+0x77fc>
   188e4:	ldr	r3, [r3]
   188e8:	mov	r2, #55	; 0x37
   188ec:	mov	r1, #1
   188f0:	ldr	r0, [pc, #208]	; 189c8 <__assert_fail@plt+0x7800>
   188f4:	bl	10fac <fwrite@plt>
   188f8:	bl	11198 <abort@plt>
   188fc:	mov	r1, #47	; 0x2f
   18900:	ldr	r0, [fp, #-16]
   18904:	bl	110fc <strrchr@plt>
   18908:	str	r0, [fp, #-8]
   1890c:	ldr	r3, [fp, #-8]
   18910:	cmp	r3, #0
   18914:	beq	18924 <__assert_fail@plt+0x775c>
   18918:	ldr	r3, [fp, #-8]
   1891c:	add	r3, r3, #1
   18920:	b	18928 <__assert_fail@plt+0x7760>
   18924:	ldr	r3, [fp, #-16]
   18928:	str	r3, [fp, #-12]
   1892c:	ldr	r2, [fp, #-12]
   18930:	ldr	r3, [fp, #-16]
   18934:	sub	r3, r2, r3
   18938:	cmp	r3, #6
   1893c:	ble	189a0 <__assert_fail@plt+0x77d8>
   18940:	ldr	r3, [fp, #-12]
   18944:	sub	r3, r3, #7
   18948:	mov	r2, #7
   1894c:	ldr	r1, [pc, #120]	; 189cc <__assert_fail@plt+0x7804>
   18950:	mov	r0, r3
   18954:	bl	1118c <strncmp@plt>
   18958:	mov	r3, r0
   1895c:	cmp	r3, #0
   18960:	bne	189a0 <__assert_fail@plt+0x77d8>
   18964:	ldr	r3, [fp, #-12]
   18968:	str	r3, [fp, #-16]
   1896c:	mov	r2, #3
   18970:	ldr	r1, [pc, #88]	; 189d0 <__assert_fail@plt+0x7808>
   18974:	ldr	r0, [fp, #-12]
   18978:	bl	1118c <strncmp@plt>
   1897c:	mov	r3, r0
   18980:	cmp	r3, #0
   18984:	bne	189a0 <__assert_fail@plt+0x77d8>
   18988:	ldr	r3, [fp, #-12]
   1898c:	add	r3, r3, #3
   18990:	str	r3, [fp, #-16]
   18994:	ldr	r2, [pc, #56]	; 189d4 <__assert_fail@plt+0x780c>
   18998:	ldr	r3, [fp, #-16]
   1899c:	str	r3, [r2]
   189a0:	ldr	r2, [pc, #48]	; 189d8 <__assert_fail@plt+0x7810>
   189a4:	ldr	r3, [fp, #-16]
   189a8:	str	r3, [r2]
   189ac:	ldr	r2, [pc, #40]	; 189dc <__assert_fail@plt+0x7814>
   189b0:	ldr	r3, [fp, #-16]
   189b4:	str	r3, [r2]
   189b8:	nop			; (mov r0, r0)
   189bc:	sub	sp, fp, #4
   189c0:	pop	{fp, pc}
   189c4:	andeq	r0, r3, r8, ror r1
   189c8:	strdeq	pc, [r1], -r4
   189cc:	andeq	pc, r1, ip, lsr #2
   189d0:	andeq	pc, r1, r4, lsr r1	; <UNPREDICTABLE>
   189d4:	andeq	r0, r3, r8, ror #2
   189d8:			; <UNDEFINED> instruction: 0x000301b0
   189dc:	andeq	r0, r3, ip, ror #2
   189e0:	push	{fp, lr}
   189e4:	add	fp, sp, #4
   189e8:	sub	sp, sp, #16
   189ec:	str	r0, [fp, #-16]
   189f0:	bl	1109c <__errno_location@plt>
   189f4:	mov	r3, r0
   189f8:	ldr	r3, [r3]
   189fc:	str	r3, [fp, #-8]
   18a00:	ldr	r3, [fp, #-16]
   18a04:	cmp	r3, #0
   18a08:	beq	18a14 <__assert_fail@plt+0x784c>
   18a0c:	ldr	r3, [fp, #-16]
   18a10:	b	18a18 <__assert_fail@plt+0x7850>
   18a14:	ldr	r3, [pc, #48]	; 18a4c <__assert_fail@plt+0x7884>
   18a18:	mov	r1, #48	; 0x30
   18a1c:	mov	r0, r3
   18a20:	bl	1c2d8 <__assert_fail@plt+0xb110>
   18a24:	mov	r3, r0
   18a28:	str	r3, [fp, #-12]
   18a2c:	bl	1109c <__errno_location@plt>
   18a30:	mov	r2, r0
   18a34:	ldr	r3, [fp, #-8]
   18a38:	str	r3, [r2]
   18a3c:	ldr	r3, [fp, #-12]
   18a40:	mov	r0, r3
   18a44:	sub	sp, fp, #4
   18a48:	pop	{fp, pc}
   18a4c:			; <UNDEFINED> instruction: 0x000301b4
   18a50:	push	{fp}		; (str fp, [sp, #-4]!)
   18a54:	add	fp, sp, #0
   18a58:	sub	sp, sp, #12
   18a5c:	str	r0, [fp, #-8]
   18a60:	ldr	r3, [fp, #-8]
   18a64:	cmp	r3, #0
   18a68:	beq	18a74 <__assert_fail@plt+0x78ac>
   18a6c:	ldr	r3, [fp, #-8]
   18a70:	b	18a78 <__assert_fail@plt+0x78b0>
   18a74:	ldr	r3, [pc, #16]	; 18a8c <__assert_fail@plt+0x78c4>
   18a78:	ldr	r3, [r3]
   18a7c:	mov	r0, r3
   18a80:	add	sp, fp, #0
   18a84:	pop	{fp}		; (ldr fp, [sp], #4)
   18a88:	bx	lr
   18a8c:			; <UNDEFINED> instruction: 0x000301b4
   18a90:	push	{fp}		; (str fp, [sp, #-4]!)
   18a94:	add	fp, sp, #0
   18a98:	sub	sp, sp, #12
   18a9c:	str	r0, [fp, #-8]
   18aa0:	str	r1, [fp, #-12]
   18aa4:	ldr	r3, [fp, #-8]
   18aa8:	cmp	r3, #0
   18aac:	beq	18ab8 <__assert_fail@plt+0x78f0>
   18ab0:	ldr	r3, [fp, #-8]
   18ab4:	b	18abc <__assert_fail@plt+0x78f4>
   18ab8:	ldr	r3, [pc, #20]	; 18ad4 <__assert_fail@plt+0x790c>
   18abc:	ldr	r2, [fp, #-12]
   18ac0:	str	r2, [r3]
   18ac4:	nop			; (mov r0, r0)
   18ac8:	add	sp, fp, #0
   18acc:	pop	{fp}		; (ldr fp, [sp], #4)
   18ad0:	bx	lr
   18ad4:			; <UNDEFINED> instruction: 0x000301b4
   18ad8:	push	{fp}		; (str fp, [sp, #-4]!)
   18adc:	add	fp, sp, #0
   18ae0:	sub	sp, sp, #36	; 0x24
   18ae4:	str	r0, [fp, #-24]	; 0xffffffe8
   18ae8:	mov	r3, r1
   18aec:	str	r2, [fp, #-32]	; 0xffffffe0
   18af0:	strb	r3, [fp, #-25]	; 0xffffffe7
   18af4:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   18af8:	strb	r3, [fp, #-5]
   18afc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b00:	cmp	r3, #0
   18b04:	beq	18b10 <__assert_fail@plt+0x7948>
   18b08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b0c:	b	18b14 <__assert_fail@plt+0x794c>
   18b10:	ldr	r3, [pc, #124]	; 18b94 <__assert_fail@plt+0x79cc>
   18b14:	add	r2, r3, #8
   18b18:	ldrb	r3, [fp, #-5]
   18b1c:	lsr	r3, r3, #5
   18b20:	uxtb	r3, r3
   18b24:	lsl	r3, r3, #2
   18b28:	add	r3, r2, r3
   18b2c:	str	r3, [fp, #-12]
   18b30:	ldrb	r3, [fp, #-5]
   18b34:	and	r3, r3, #31
   18b38:	str	r3, [fp, #-16]
   18b3c:	ldr	r3, [fp, #-12]
   18b40:	ldr	r2, [r3]
   18b44:	ldr	r3, [fp, #-16]
   18b48:	lsr	r3, r2, r3
   18b4c:	and	r3, r3, #1
   18b50:	str	r3, [fp, #-20]	; 0xffffffec
   18b54:	ldr	r3, [fp, #-12]
   18b58:	ldr	r3, [r3]
   18b5c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18b60:	and	r1, r2, #1
   18b64:	ldr	r2, [fp, #-20]	; 0xffffffec
   18b68:	eor	r1, r1, r2
   18b6c:	ldr	r2, [fp, #-16]
   18b70:	lsl	r2, r1, r2
   18b74:	eor	r2, r2, r3
   18b78:	ldr	r3, [fp, #-12]
   18b7c:	str	r2, [r3]
   18b80:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b84:	mov	r0, r3
   18b88:	add	sp, fp, #0
   18b8c:	pop	{fp}		; (ldr fp, [sp], #4)
   18b90:	bx	lr
   18b94:			; <UNDEFINED> instruction: 0x000301b4
   18b98:	push	{fp}		; (str fp, [sp, #-4]!)
   18b9c:	add	fp, sp, #0
   18ba0:	sub	sp, sp, #20
   18ba4:	str	r0, [fp, #-16]
   18ba8:	str	r1, [fp, #-20]	; 0xffffffec
   18bac:	ldr	r3, [fp, #-16]
   18bb0:	cmp	r3, #0
   18bb4:	bne	18bc0 <__assert_fail@plt+0x79f8>
   18bb8:	ldr	r3, [pc, #44]	; 18bec <__assert_fail@plt+0x7a24>
   18bbc:	str	r3, [fp, #-16]
   18bc0:	ldr	r3, [fp, #-16]
   18bc4:	ldr	r3, [r3, #4]
   18bc8:	str	r3, [fp, #-8]
   18bcc:	ldr	r3, [fp, #-16]
   18bd0:	ldr	r2, [fp, #-20]	; 0xffffffec
   18bd4:	str	r2, [r3, #4]
   18bd8:	ldr	r3, [fp, #-8]
   18bdc:	mov	r0, r3
   18be0:	add	sp, fp, #0
   18be4:	pop	{fp}		; (ldr fp, [sp], #4)
   18be8:	bx	lr
   18bec:			; <UNDEFINED> instruction: 0x000301b4
   18bf0:	push	{fp, lr}
   18bf4:	add	fp, sp, #4
   18bf8:	sub	sp, sp, #16
   18bfc:	str	r0, [fp, #-8]
   18c00:	str	r1, [fp, #-12]
   18c04:	str	r2, [fp, #-16]
   18c08:	ldr	r3, [fp, #-8]
   18c0c:	cmp	r3, #0
   18c10:	bne	18c1c <__assert_fail@plt+0x7a54>
   18c14:	ldr	r3, [pc, #76]	; 18c68 <__assert_fail@plt+0x7aa0>
   18c18:	str	r3, [fp, #-8]
   18c1c:	ldr	r3, [fp, #-8]
   18c20:	mov	r2, #10
   18c24:	str	r2, [r3]
   18c28:	ldr	r3, [fp, #-12]
   18c2c:	cmp	r3, #0
   18c30:	beq	18c40 <__assert_fail@plt+0x7a78>
   18c34:	ldr	r3, [fp, #-16]
   18c38:	cmp	r3, #0
   18c3c:	bne	18c44 <__assert_fail@plt+0x7a7c>
   18c40:	bl	11198 <abort@plt>
   18c44:	ldr	r3, [fp, #-8]
   18c48:	ldr	r2, [fp, #-12]
   18c4c:	str	r2, [r3, #40]	; 0x28
   18c50:	ldr	r3, [fp, #-8]
   18c54:	ldr	r2, [fp, #-16]
   18c58:	str	r2, [r3, #44]	; 0x2c
   18c5c:	nop			; (mov r0, r0)
   18c60:	sub	sp, fp, #4
   18c64:	pop	{fp, pc}
   18c68:			; <UNDEFINED> instruction: 0x000301b4
   18c6c:	push	{fp, lr}
   18c70:	add	fp, sp, #4
   18c74:	sub	sp, sp, #56	; 0x38
   18c78:	str	r0, [fp, #-56]	; 0xffffffc8
   18c7c:	str	r1, [fp, #-60]	; 0xffffffc4
   18c80:	sub	r3, fp, #52	; 0x34
   18c84:	mov	r2, #48	; 0x30
   18c88:	mov	r1, #0
   18c8c:	mov	r0, r3
   18c90:	bl	110b4 <memset@plt>
   18c94:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18c98:	cmp	r3, #10
   18c9c:	bne	18ca4 <__assert_fail@plt+0x7adc>
   18ca0:	bl	11198 <abort@plt>
   18ca4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18ca8:	str	r3, [fp, #-52]	; 0xffffffcc
   18cac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18cb0:	mov	lr, r3
   18cb4:	sub	ip, fp, #52	; 0x34
   18cb8:	ldm	ip!, {r0, r1, r2, r3}
   18cbc:	stmia	lr!, {r0, r1, r2, r3}
   18cc0:	ldm	ip!, {r0, r1, r2, r3}
   18cc4:	stmia	lr!, {r0, r1, r2, r3}
   18cc8:	ldm	ip, {r0, r1, r2, r3}
   18ccc:	stm	lr, {r0, r1, r2, r3}
   18cd0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18cd4:	sub	sp, fp, #4
   18cd8:	pop	{fp, pc}
   18cdc:	push	{fp, lr}
   18ce0:	add	fp, sp, #4
   18ce4:	sub	sp, sp, #16
   18ce8:	str	r0, [fp, #-16]
   18cec:	str	r1, [fp, #-20]	; 0xffffffec
   18cf0:	ldr	r0, [fp, #-16]
   18cf4:	bl	11060 <gettext@plt>
   18cf8:	str	r0, [fp, #-8]
   18cfc:	ldr	r2, [fp, #-8]
   18d00:	ldr	r3, [fp, #-16]
   18d04:	cmp	r2, r3
   18d08:	beq	18d14 <__assert_fail@plt+0x7b4c>
   18d0c:	ldr	r3, [fp, #-8]
   18d10:	b	18da4 <__assert_fail@plt+0x7bdc>
   18d14:	bl	1d604 <__assert_fail@plt+0xc43c>
   18d18:	str	r0, [fp, #-12]
   18d1c:	ldr	r1, [pc, #140]	; 18db0 <__assert_fail@plt+0x7be8>
   18d20:	ldr	r0, [fp, #-12]
   18d24:	bl	1caa4 <__assert_fail@plt+0xb8dc>
   18d28:	mov	r3, r0
   18d2c:	cmp	r3, #0
   18d30:	bne	18d54 <__assert_fail@plt+0x7b8c>
   18d34:	ldr	r3, [fp, #-16]
   18d38:	ldrb	r3, [r3]
   18d3c:	cmp	r3, #96	; 0x60
   18d40:	bne	18d4c <__assert_fail@plt+0x7b84>
   18d44:	ldr	r3, [pc, #104]	; 18db4 <__assert_fail@plt+0x7bec>
   18d48:	b	18da4 <__assert_fail@plt+0x7bdc>
   18d4c:	ldr	r3, [pc, #100]	; 18db8 <__assert_fail@plt+0x7bf0>
   18d50:	b	18da4 <__assert_fail@plt+0x7bdc>
   18d54:	ldr	r1, [pc, #96]	; 18dbc <__assert_fail@plt+0x7bf4>
   18d58:	ldr	r0, [fp, #-12]
   18d5c:	bl	1caa4 <__assert_fail@plt+0xb8dc>
   18d60:	mov	r3, r0
   18d64:	cmp	r3, #0
   18d68:	bne	18d8c <__assert_fail@plt+0x7bc4>
   18d6c:	ldr	r3, [fp, #-16]
   18d70:	ldrb	r3, [r3]
   18d74:	cmp	r3, #96	; 0x60
   18d78:	bne	18d84 <__assert_fail@plt+0x7bbc>
   18d7c:	ldr	r3, [pc, #60]	; 18dc0 <__assert_fail@plt+0x7bf8>
   18d80:	b	18da4 <__assert_fail@plt+0x7bdc>
   18d84:	ldr	r3, [pc, #56]	; 18dc4 <__assert_fail@plt+0x7bfc>
   18d88:	b	18da4 <__assert_fail@plt+0x7bdc>
   18d8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18d90:	cmp	r3, #9
   18d94:	bne	18da0 <__assert_fail@plt+0x7bd8>
   18d98:	ldr	r3, [pc, #40]	; 18dc8 <__assert_fail@plt+0x7c00>
   18d9c:	b	18da4 <__assert_fail@plt+0x7bdc>
   18da0:	ldr	r3, [pc, #36]	; 18dcc <__assert_fail@plt+0x7c04>
   18da4:	mov	r0, r3
   18da8:	sub	sp, fp, #4
   18dac:	pop	{fp, pc}
   18db0:	strdeq	pc, [r1], -r4
   18db4:	strdeq	pc, [r1], -ip
   18db8:	andeq	pc, r1, r0, lsl #4
   18dbc:	andeq	pc, r1, r4, lsl #4
   18dc0:	andeq	pc, r1, ip, lsl #4
   18dc4:	andeq	pc, r1, r0, lsl r2	; <UNPREDICTABLE>
   18dc8:	andeq	pc, r1, r4, lsl r2	; <UNPREDICTABLE>
   18dcc:	andeq	pc, r1, r8, lsl r2	; <UNPREDICTABLE>
   18dd0:	push	{r4, fp, lr}
   18dd4:	add	fp, sp, #8
   18dd8:	sub	sp, sp, #116	; 0x74
   18ddc:	str	r0, [fp, #-88]	; 0xffffffa8
   18de0:	str	r1, [fp, #-92]	; 0xffffffa4
   18de4:	str	r2, [fp, #-96]	; 0xffffffa0
   18de8:	str	r3, [fp, #-100]	; 0xffffff9c
   18dec:	mov	r3, #0
   18df0:	str	r3, [fp, #-20]	; 0xffffffec
   18df4:	mov	r3, #0
   18df8:	str	r3, [fp, #-24]	; 0xffffffe8
   18dfc:	mov	r3, #0
   18e00:	str	r3, [fp, #-28]	; 0xffffffe4
   18e04:	mov	r3, #0
   18e08:	str	r3, [fp, #-32]	; 0xffffffe0
   18e0c:	mov	r3, #0
   18e10:	strb	r3, [fp, #-33]	; 0xffffffdf
   18e14:	bl	10fc4 <__ctype_get_mb_cur_max@plt>
   18e18:	mov	r3, r0
   18e1c:	cmp	r3, #1
   18e20:	moveq	r3, #1
   18e24:	movne	r3, #0
   18e28:	strb	r3, [fp, #-57]	; 0xffffffc7
   18e2c:	ldr	r3, [fp, #8]
   18e30:	and	r3, r3, #2
   18e34:	cmp	r3, #0
   18e38:	movne	r3, #1
   18e3c:	moveq	r3, #0
   18e40:	strb	r3, [fp, #-34]	; 0xffffffde
   18e44:	mov	r3, #0
   18e48:	strb	r3, [fp, #-35]	; 0xffffffdd
   18e4c:	mov	r3, #0
   18e50:	strb	r3, [fp, #-36]	; 0xffffffdc
   18e54:	mov	r3, #1
   18e58:	strb	r3, [fp, #-37]	; 0xffffffdb
   18e5c:	ldr	r3, [fp, #4]
   18e60:	cmp	r3, #10
   18e64:	ldrls	pc, [pc, r3, lsl #2]
   18e68:	b	19070 <__assert_fail@plt+0x7ea8>
   18e6c:	andeq	r9, r1, r4, rrx
   18e70:	andeq	r8, r1, r0, ror #31
   18e74:	andeq	r9, r1, r4
   18e78:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e7c:	andeq	r8, r1, r8, ror #31
   18e80:	andeq	r8, r1, r8, lsr #29
   18e84:	muleq	r1, r8, lr
   18e88:	andeq	r8, r1, r8, lsl #30
   18e8c:	andeq	r8, r1, ip, lsl pc
   18e90:	andeq	r8, r1, ip, lsl pc
   18e94:	andeq	r8, r1, ip, lsl pc
   18e98:	mov	r3, #5
   18e9c:	str	r3, [fp, #4]
   18ea0:	mov	r3, #1
   18ea4:	strb	r3, [fp, #-34]	; 0xffffffde
   18ea8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18eac:	eor	r3, r3, #1
   18eb0:	uxtb	r3, r3
   18eb4:	cmp	r3, #0
   18eb8:	beq	18eec <__assert_fail@plt+0x7d24>
   18ebc:	ldr	r2, [fp, #-20]	; 0xffffffec
   18ec0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18ec4:	cmp	r2, r3
   18ec8:	bcs	18ee0 <__assert_fail@plt+0x7d18>
   18ecc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18ed0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18ed4:	add	r3, r2, r3
   18ed8:	mov	r2, #34	; 0x22
   18edc:	strb	r2, [r3]
   18ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18ee4:	add	r3, r3, #1
   18ee8:	str	r3, [fp, #-20]	; 0xffffffec
   18eec:	mov	r3, #1
   18ef0:	strb	r3, [fp, #-33]	; 0xffffffdf
   18ef4:	ldr	r3, [pc, #3872]	; 19e1c <__assert_fail@plt+0x8c54>
   18ef8:	str	r3, [fp, #-28]	; 0xffffffe4
   18efc:	mov	r3, #1
   18f00:	str	r3, [fp, #-32]	; 0xffffffe0
   18f04:	b	19074 <__assert_fail@plt+0x7eac>
   18f08:	mov	r3, #1
   18f0c:	strb	r3, [fp, #-33]	; 0xffffffdf
   18f10:	mov	r3, #0
   18f14:	strb	r3, [fp, #-34]	; 0xffffffde
   18f18:	b	19074 <__assert_fail@plt+0x7eac>
   18f1c:	ldr	r3, [fp, #4]
   18f20:	cmp	r3, #10
   18f24:	beq	18f48 <__assert_fail@plt+0x7d80>
   18f28:	ldr	r1, [fp, #4]
   18f2c:	ldr	r0, [pc, #3820]	; 19e20 <__assert_fail@plt+0x8c58>
   18f30:	bl	18cdc <__assert_fail@plt+0x7b14>
   18f34:	str	r0, [fp, #16]
   18f38:	ldr	r1, [fp, #4]
   18f3c:	ldr	r0, [pc, #3808]	; 19e24 <__assert_fail@plt+0x8c5c>
   18f40:	bl	18cdc <__assert_fail@plt+0x7b14>
   18f44:	str	r0, [fp, #20]
   18f48:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18f4c:	eor	r3, r3, #1
   18f50:	uxtb	r3, r3
   18f54:	cmp	r3, #0
   18f58:	beq	18fb8 <__assert_fail@plt+0x7df0>
   18f5c:	ldr	r3, [fp, #16]
   18f60:	str	r3, [fp, #-28]	; 0xffffffe4
   18f64:	b	18fa8 <__assert_fail@plt+0x7de0>
   18f68:	ldr	r2, [fp, #-20]	; 0xffffffec
   18f6c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18f70:	cmp	r2, r3
   18f74:	bcs	18f90 <__assert_fail@plt+0x7dc8>
   18f78:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18f7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18f80:	add	r3, r2, r3
   18f84:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18f88:	ldrb	r2, [r2]
   18f8c:	strb	r2, [r3]
   18f90:	ldr	r3, [fp, #-20]	; 0xffffffec
   18f94:	add	r3, r3, #1
   18f98:	str	r3, [fp, #-20]	; 0xffffffec
   18f9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18fa0:	add	r3, r3, #1
   18fa4:	str	r3, [fp, #-28]	; 0xffffffe4
   18fa8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18fac:	ldrb	r3, [r3]
   18fb0:	cmp	r3, #0
   18fb4:	bne	18f68 <__assert_fail@plt+0x7da0>
   18fb8:	mov	r3, #1
   18fbc:	strb	r3, [fp, #-33]	; 0xffffffdf
   18fc0:	ldr	r3, [fp, #20]
   18fc4:	str	r3, [fp, #-28]	; 0xffffffe4
   18fc8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18fcc:	bl	1106c <strlen@plt>
   18fd0:	str	r0, [fp, #-32]	; 0xffffffe0
   18fd4:	b	19074 <__assert_fail@plt+0x7eac>
   18fd8:	mov	r3, #1
   18fdc:	strb	r3, [fp, #-33]	; 0xffffffdf
   18fe0:	mov	r3, #1
   18fe4:	strb	r3, [fp, #-34]	; 0xffffffde
   18fe8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18fec:	eor	r3, r3, #1
   18ff0:	uxtb	r3, r3
   18ff4:	cmp	r3, #0
   18ff8:	beq	19004 <__assert_fail@plt+0x7e3c>
   18ffc:	mov	r3, #1
   19000:	strb	r3, [fp, #-33]	; 0xffffffdf
   19004:	mov	r3, #2
   19008:	str	r3, [fp, #4]
   1900c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19010:	eor	r3, r3, #1
   19014:	uxtb	r3, r3
   19018:	cmp	r3, #0
   1901c:	beq	19050 <__assert_fail@plt+0x7e88>
   19020:	ldr	r2, [fp, #-20]	; 0xffffffec
   19024:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19028:	cmp	r2, r3
   1902c:	bcs	19044 <__assert_fail@plt+0x7e7c>
   19030:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19034:	ldr	r3, [fp, #-20]	; 0xffffffec
   19038:	add	r3, r2, r3
   1903c:	mov	r2, #39	; 0x27
   19040:	strb	r2, [r3]
   19044:	ldr	r3, [fp, #-20]	; 0xffffffec
   19048:	add	r3, r3, #1
   1904c:	str	r3, [fp, #-20]	; 0xffffffec
   19050:	ldr	r3, [pc, #3532]	; 19e24 <__assert_fail@plt+0x8c5c>
   19054:	str	r3, [fp, #-28]	; 0xffffffe4
   19058:	mov	r3, #1
   1905c:	str	r3, [fp, #-32]	; 0xffffffe0
   19060:	b	19074 <__assert_fail@plt+0x7eac>
   19064:	mov	r3, #0
   19068:	strb	r3, [fp, #-34]	; 0xffffffde
   1906c:	b	19074 <__assert_fail@plt+0x7eac>
   19070:	bl	11198 <abort@plt>
   19074:	mov	r3, #0
   19078:	str	r3, [fp, #-16]
   1907c:	b	1a20c <__assert_fail@plt+0x9044>
   19080:	mov	r3, #0
   19084:	strb	r3, [fp, #-40]	; 0xffffffd8
   19088:	mov	r3, #0
   1908c:	strb	r3, [fp, #-41]	; 0xffffffd7
   19090:	mov	r3, #0
   19094:	strb	r3, [fp, #-42]	; 0xffffffd6
   19098:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1909c:	cmp	r3, #0
   190a0:	beq	1913c <__assert_fail@plt+0x7f74>
   190a4:	ldr	r3, [fp, #4]
   190a8:	cmp	r3, #2
   190ac:	beq	1913c <__assert_fail@plt+0x7f74>
   190b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   190b4:	cmp	r3, #0
   190b8:	beq	1913c <__assert_fail@plt+0x7f74>
   190bc:	ldr	r2, [fp, #-16]
   190c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   190c4:	add	r4, r2, r3
   190c8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   190cc:	cmn	r3, #1
   190d0:	bne	190f4 <__assert_fail@plt+0x7f2c>
   190d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   190d8:	cmp	r3, #1
   190dc:	bls	190f4 <__assert_fail@plt+0x7f2c>
   190e0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   190e4:	bl	1106c <strlen@plt>
   190e8:	str	r0, [fp, #-100]	; 0xffffff9c
   190ec:	ldr	r3, [fp, #-100]	; 0xffffff9c
   190f0:	b	190f8 <__assert_fail@plt+0x7f30>
   190f4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   190f8:	cmp	r4, r3
   190fc:	bhi	1913c <__assert_fail@plt+0x7f74>
   19100:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19104:	ldr	r3, [fp, #-16]
   19108:	add	r3, r2, r3
   1910c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19110:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19114:	mov	r0, r3
   19118:	bl	10f58 <memcmp@plt>
   1911c:	mov	r3, r0
   19120:	cmp	r3, #0
   19124:	bne	1913c <__assert_fail@plt+0x7f74>
   19128:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1912c:	cmp	r3, #0
   19130:	bne	1a3c8 <__assert_fail@plt+0x9200>
   19134:	mov	r3, #1
   19138:	strb	r3, [fp, #-40]	; 0xffffffd8
   1913c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19140:	ldr	r3, [fp, #-16]
   19144:	add	r3, r2, r3
   19148:	ldrb	r3, [r3]
   1914c:	strb	r3, [fp, #-38]	; 0xffffffda
   19150:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19154:	cmp	r3, #126	; 0x7e
   19158:	ldrls	pc, [pc, r3, lsl #2]
   1915c:	b	19988 <__assert_fail@plt+0x87c0>
   19160:	andeq	r9, r1, ip, asr r3
   19164:	andeq	r9, r1, r8, lsl #19
   19168:	andeq	r9, r1, r8, lsl #19
   1916c:	andeq	r9, r1, r8, lsl #19
   19170:	andeq	r9, r1, r8, lsl #19
   19174:	andeq	r9, r1, r8, lsl #19
   19178:	andeq	r9, r1, r8, lsl #19
   1917c:	andeq	r9, r1, ip, asr #14
   19180:	andeq	r9, r1, r8, asr r7
   19184:	andeq	r9, r1, r8, lsl #15
   19188:	andeq	r9, r1, r0, ror r7
   1918c:	muleq	r1, r4, r7
   19190:	andeq	r9, r1, r4, ror #14
   19194:	andeq	r9, r1, ip, ror r7
   19198:	andeq	r9, r1, r8, lsl #19
   1919c:	andeq	r9, r1, r8, lsl #19
   191a0:	andeq	r9, r1, r8, lsl #19
   191a4:	andeq	r9, r1, r8, lsl #19
   191a8:	andeq	r9, r1, r8, lsl #19
   191ac:	andeq	r9, r1, r8, lsl #19
   191b0:	andeq	r9, r1, r8, lsl #19
   191b4:	andeq	r9, r1, r8, lsl #19
   191b8:	andeq	r9, r1, r8, lsl #19
   191bc:	andeq	r9, r1, r8, lsl #19
   191c0:	andeq	r9, r1, r8, lsl #19
   191c4:	andeq	r9, r1, r8, lsl #19
   191c8:	andeq	r9, r1, r8, lsl #19
   191cc:	andeq	r9, r1, r8, lsl #19
   191d0:	andeq	r9, r1, r8, lsl #19
   191d4:	andeq	r9, r1, r8, lsl #19
   191d8:	andeq	r9, r1, r8, lsl #19
   191dc:	andeq	r9, r1, r8, lsl #19
   191e0:	andeq	r9, r1, ip, ror #16
   191e4:	andeq	r9, r1, r4, ror r8
   191e8:	andeq	r9, r1, r4, ror r8
   191ec:	andeq	r9, r1, r0, ror #16
   191f0:	andeq	r9, r1, r4, ror r8
   191f4:	andeq	r9, r1, ip, ror r9
   191f8:	andeq	r9, r1, r4, ror r8
   191fc:	muleq	r1, r0, r8
   19200:	andeq	r9, r1, r4, ror r8
   19204:	andeq	r9, r1, r4, ror r8
   19208:	andeq	r9, r1, r4, ror r8
   1920c:	andeq	r9, r1, ip, ror r9
   19210:	andeq	r9, r1, ip, ror r9
   19214:	andeq	r9, r1, ip, ror r9
   19218:	andeq	r9, r1, ip, ror r9
   1921c:	andeq	r9, r1, ip, ror r9
   19220:	andeq	r9, r1, ip, ror r9
   19224:	andeq	r9, r1, ip, ror r9
   19228:	andeq	r9, r1, ip, ror r9
   1922c:	andeq	r9, r1, ip, ror r9
   19230:	andeq	r9, r1, ip, ror r9
   19234:	andeq	r9, r1, ip, ror r9
   19238:	andeq	r9, r1, ip, ror r9
   1923c:	andeq	r9, r1, ip, ror r9
   19240:	andeq	r9, r1, ip, ror r9
   19244:	andeq	r9, r1, ip, ror r9
   19248:	andeq	r9, r1, ip, ror r9
   1924c:	andeq	r9, r1, r4, ror r8
   19250:	andeq	r9, r1, r4, ror r8
   19254:	andeq	r9, r1, r4, ror r8
   19258:	andeq	r9, r1, r4, ror r8
   1925c:	andeq	r9, r1, ip, lsr r5
   19260:	andeq	r9, r1, r8, lsl #19
   19264:	andeq	r9, r1, ip, ror r9
   19268:	andeq	r9, r1, ip, ror r9
   1926c:	andeq	r9, r1, ip, ror r9
   19270:	andeq	r9, r1, ip, ror r9
   19274:	andeq	r9, r1, ip, ror r9
   19278:	andeq	r9, r1, ip, ror r9
   1927c:	andeq	r9, r1, ip, ror r9
   19280:	andeq	r9, r1, ip, ror r9
   19284:	andeq	r9, r1, ip, ror r9
   19288:	andeq	r9, r1, ip, ror r9
   1928c:	andeq	r9, r1, ip, ror r9
   19290:	andeq	r9, r1, ip, ror r9
   19294:	andeq	r9, r1, ip, ror r9
   19298:	andeq	r9, r1, ip, ror r9
   1929c:	andeq	r9, r1, ip, ror r9
   192a0:	andeq	r9, r1, ip, ror r9
   192a4:	andeq	r9, r1, ip, ror r9
   192a8:	andeq	r9, r1, ip, ror r9
   192ac:	andeq	r9, r1, ip, ror r9
   192b0:	andeq	r9, r1, ip, ror r9
   192b4:	andeq	r9, r1, ip, ror r9
   192b8:	andeq	r9, r1, ip, ror r9
   192bc:	andeq	r9, r1, ip, ror r9
   192c0:	andeq	r9, r1, ip, ror r9
   192c4:	andeq	r9, r1, ip, ror r9
   192c8:	andeq	r9, r1, ip, ror r9
   192cc:	andeq	r9, r1, r4, ror r8
   192d0:	andeq	r9, r1, r0, lsr #15
   192d4:	andeq	r9, r1, ip, ror r9
   192d8:	andeq	r9, r1, r4, ror r8
   192dc:	andeq	r9, r1, ip, ror r9
   192e0:	andeq	r9, r1, r4, ror r8
   192e4:	andeq	r9, r1, ip, ror r9
   192e8:	andeq	r9, r1, ip, ror r9
   192ec:	andeq	r9, r1, ip, ror r9
   192f0:	andeq	r9, r1, ip, ror r9
   192f4:	andeq	r9, r1, ip, ror r9
   192f8:	andeq	r9, r1, ip, ror r9
   192fc:	andeq	r9, r1, ip, ror r9
   19300:	andeq	r9, r1, ip, ror r9
   19304:	andeq	r9, r1, ip, ror r9
   19308:	andeq	r9, r1, ip, ror r9
   1930c:	andeq	r9, r1, ip, ror r9
   19310:	andeq	r9, r1, ip, ror r9
   19314:	andeq	r9, r1, ip, ror r9
   19318:	andeq	r9, r1, ip, ror r9
   1931c:	andeq	r9, r1, ip, ror r9
   19320:	andeq	r9, r1, ip, ror r9
   19324:	andeq	r9, r1, ip, ror r9
   19328:	andeq	r9, r1, ip, ror r9
   1932c:	andeq	r9, r1, ip, ror r9
   19330:	andeq	r9, r1, ip, ror r9
   19334:	andeq	r9, r1, ip, ror r9
   19338:	andeq	r9, r1, ip, ror r9
   1933c:	andeq	r9, r1, ip, ror r9
   19340:	andeq	r9, r1, ip, ror r9
   19344:	andeq	r9, r1, ip, ror r9
   19348:	andeq	r9, r1, ip, ror r9
   1934c:	andeq	r9, r1, r8, lsl r8
   19350:	andeq	r9, r1, r4, ror r8
   19354:	andeq	r9, r1, r8, lsl r8
   19358:	andeq	r9, r1, r0, ror #16
   1935c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19360:	cmp	r3, #0
   19364:	beq	19528 <__assert_fail@plt+0x8360>
   19368:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1936c:	cmp	r3, #0
   19370:	bne	1a3d0 <__assert_fail@plt+0x9208>
   19374:	mov	r3, #1
   19378:	strb	r3, [fp, #-41]	; 0xffffffd7
   1937c:	ldr	r3, [fp, #4]
   19380:	cmp	r3, #2
   19384:	bne	19434 <__assert_fail@plt+0x826c>
   19388:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1938c:	eor	r3, r3, #1
   19390:	uxtb	r3, r3
   19394:	cmp	r3, #0
   19398:	beq	19434 <__assert_fail@plt+0x826c>
   1939c:	ldr	r2, [fp, #-20]	; 0xffffffec
   193a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   193a4:	cmp	r2, r3
   193a8:	bcs	193c0 <__assert_fail@plt+0x81f8>
   193ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   193b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   193b4:	add	r3, r2, r3
   193b8:	mov	r2, #39	; 0x27
   193bc:	strb	r2, [r3]
   193c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   193c4:	add	r3, r3, #1
   193c8:	str	r3, [fp, #-20]	; 0xffffffec
   193cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   193d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   193d4:	cmp	r2, r3
   193d8:	bcs	193f0 <__assert_fail@plt+0x8228>
   193dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   193e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   193e4:	add	r3, r2, r3
   193e8:	mov	r2, #36	; 0x24
   193ec:	strb	r2, [r3]
   193f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   193f4:	add	r3, r3, #1
   193f8:	str	r3, [fp, #-20]	; 0xffffffec
   193fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   19400:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19404:	cmp	r2, r3
   19408:	bcs	19420 <__assert_fail@plt+0x8258>
   1940c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19410:	ldr	r3, [fp, #-20]	; 0xffffffec
   19414:	add	r3, r2, r3
   19418:	mov	r2, #39	; 0x27
   1941c:	strb	r2, [r3]
   19420:	ldr	r3, [fp, #-20]	; 0xffffffec
   19424:	add	r3, r3, #1
   19428:	str	r3, [fp, #-20]	; 0xffffffec
   1942c:	mov	r3, #1
   19430:	strb	r3, [fp, #-35]	; 0xffffffdd
   19434:	ldr	r2, [fp, #-20]	; 0xffffffec
   19438:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1943c:	cmp	r2, r3
   19440:	bcs	19458 <__assert_fail@plt+0x8290>
   19444:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19448:	ldr	r3, [fp, #-20]	; 0xffffffec
   1944c:	add	r3, r2, r3
   19450:	mov	r2, #92	; 0x5c
   19454:	strb	r2, [r3]
   19458:	ldr	r3, [fp, #-20]	; 0xffffffec
   1945c:	add	r3, r3, #1
   19460:	str	r3, [fp, #-20]	; 0xffffffec
   19464:	ldr	r3, [fp, #4]
   19468:	cmp	r3, #2
   1946c:	beq	1951c <__assert_fail@plt+0x8354>
   19470:	ldr	r3, [fp, #-16]
   19474:	add	r2, r3, #1
   19478:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1947c:	cmp	r2, r3
   19480:	bcs	1951c <__assert_fail@plt+0x8354>
   19484:	ldr	r3, [fp, #-16]
   19488:	add	r3, r3, #1
   1948c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19490:	add	r3, r2, r3
   19494:	ldrb	r3, [r3]
   19498:	cmp	r3, #47	; 0x2f
   1949c:	bls	1951c <__assert_fail@plt+0x8354>
   194a0:	ldr	r3, [fp, #-16]
   194a4:	add	r3, r3, #1
   194a8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   194ac:	add	r3, r2, r3
   194b0:	ldrb	r3, [r3]
   194b4:	cmp	r3, #57	; 0x39
   194b8:	bhi	1951c <__assert_fail@plt+0x8354>
   194bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   194c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   194c4:	cmp	r2, r3
   194c8:	bcs	194e0 <__assert_fail@plt+0x8318>
   194cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   194d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   194d4:	add	r3, r2, r3
   194d8:	mov	r2, #48	; 0x30
   194dc:	strb	r2, [r3]
   194e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   194e4:	add	r3, r3, #1
   194e8:	str	r3, [fp, #-20]	; 0xffffffec
   194ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   194f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   194f4:	cmp	r2, r3
   194f8:	bcs	19510 <__assert_fail@plt+0x8348>
   194fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19500:	ldr	r3, [fp, #-20]	; 0xffffffec
   19504:	add	r3, r2, r3
   19508:	mov	r2, #48	; 0x30
   1950c:	strb	r2, [r3]
   19510:	ldr	r3, [fp, #-20]	; 0xffffffec
   19514:	add	r3, r3, #1
   19518:	str	r3, [fp, #-20]	; 0xffffffec
   1951c:	mov	r3, #48	; 0x30
   19520:	strb	r3, [fp, #-38]	; 0xffffffda
   19524:	b	19f64 <__assert_fail@plt+0x8d9c>
   19528:	ldr	r3, [fp, #8]
   1952c:	and	r3, r3, #1
   19530:	cmp	r3, #0
   19534:	beq	19f64 <__assert_fail@plt+0x8d9c>
   19538:	b	1a200 <__assert_fail@plt+0x9038>
   1953c:	ldr	r3, [fp, #4]
   19540:	cmp	r3, #2
   19544:	beq	19554 <__assert_fail@plt+0x838c>
   19548:	cmp	r3, #5
   1954c:	beq	19564 <__assert_fail@plt+0x839c>
   19550:	b	19748 <__assert_fail@plt+0x8580>
   19554:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19558:	cmp	r3, #0
   1955c:	beq	1973c <__assert_fail@plt+0x8574>
   19560:	b	1a40c <__assert_fail@plt+0x9244>
   19564:	ldr	r3, [fp, #8]
   19568:	and	r3, r3, #4
   1956c:	cmp	r3, #0
   19570:	beq	19744 <__assert_fail@plt+0x857c>
   19574:	ldr	r3, [fp, #-16]
   19578:	add	r2, r3, #2
   1957c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19580:	cmp	r2, r3
   19584:	bcs	19744 <__assert_fail@plt+0x857c>
   19588:	ldr	r3, [fp, #-16]
   1958c:	add	r3, r3, #1
   19590:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19594:	add	r3, r2, r3
   19598:	ldrb	r3, [r3]
   1959c:	cmp	r3, #63	; 0x3f
   195a0:	bne	19744 <__assert_fail@plt+0x857c>
   195a4:	ldr	r3, [fp, #-16]
   195a8:	add	r3, r3, #2
   195ac:	ldr	r2, [fp, #-96]	; 0xffffffa0
   195b0:	add	r3, r2, r3
   195b4:	ldrb	r3, [r3]
   195b8:	sub	r3, r3, #33	; 0x21
   195bc:	cmp	r3, #29
   195c0:	ldrls	pc, [pc, r3, lsl #2]
   195c4:	b	19734 <__assert_fail@plt+0x856c>
   195c8:	andeq	r9, r1, r0, asr #12
   195cc:	andeq	r9, r1, r4, lsr r7
   195d0:	andeq	r9, r1, r4, lsr r7
   195d4:	andeq	r9, r1, r4, lsr r7
   195d8:	andeq	r9, r1, r4, lsr r7
   195dc:	andeq	r9, r1, r4, lsr r7
   195e0:	andeq	r9, r1, r0, asr #12
   195e4:	andeq	r9, r1, r0, asr #12
   195e8:	andeq	r9, r1, r0, asr #12
   195ec:	andeq	r9, r1, r4, lsr r7
   195f0:	andeq	r9, r1, r4, lsr r7
   195f4:	andeq	r9, r1, r4, lsr r7
   195f8:	andeq	r9, r1, r0, asr #12
   195fc:	andeq	r9, r1, r4, lsr r7
   19600:	andeq	r9, r1, r0, asr #12
   19604:	andeq	r9, r1, r4, lsr r7
   19608:	andeq	r9, r1, r4, lsr r7
   1960c:	andeq	r9, r1, r4, lsr r7
   19610:	andeq	r9, r1, r4, lsr r7
   19614:	andeq	r9, r1, r4, lsr r7
   19618:	andeq	r9, r1, r4, lsr r7
   1961c:	andeq	r9, r1, r4, lsr r7
   19620:	andeq	r9, r1, r4, lsr r7
   19624:	andeq	r9, r1, r4, lsr r7
   19628:	andeq	r9, r1, r4, lsr r7
   1962c:	andeq	r9, r1, r4, lsr r7
   19630:	andeq	r9, r1, r4, lsr r7
   19634:	andeq	r9, r1, r0, asr #12
   19638:	andeq	r9, r1, r0, asr #12
   1963c:	andeq	r9, r1, r0, asr #12
   19640:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19644:	cmp	r3, #0
   19648:	bne	1a3d8 <__assert_fail@plt+0x9210>
   1964c:	ldr	r3, [fp, #-16]
   19650:	add	r3, r3, #2
   19654:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19658:	add	r3, r2, r3
   1965c:	ldrb	r3, [r3]
   19660:	strb	r3, [fp, #-38]	; 0xffffffda
   19664:	ldr	r3, [fp, #-16]
   19668:	add	r3, r3, #2
   1966c:	str	r3, [fp, #-16]
   19670:	ldr	r2, [fp, #-20]	; 0xffffffec
   19674:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19678:	cmp	r2, r3
   1967c:	bcs	19694 <__assert_fail@plt+0x84cc>
   19680:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19684:	ldr	r3, [fp, #-20]	; 0xffffffec
   19688:	add	r3, r2, r3
   1968c:	mov	r2, #63	; 0x3f
   19690:	strb	r2, [r3]
   19694:	ldr	r3, [fp, #-20]	; 0xffffffec
   19698:	add	r3, r3, #1
   1969c:	str	r3, [fp, #-20]	; 0xffffffec
   196a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   196a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   196a8:	cmp	r2, r3
   196ac:	bcs	196c4 <__assert_fail@plt+0x84fc>
   196b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   196b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   196b8:	add	r3, r2, r3
   196bc:	mov	r2, #34	; 0x22
   196c0:	strb	r2, [r3]
   196c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   196c8:	add	r3, r3, #1
   196cc:	str	r3, [fp, #-20]	; 0xffffffec
   196d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   196d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   196d8:	cmp	r2, r3
   196dc:	bcs	196f4 <__assert_fail@plt+0x852c>
   196e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   196e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   196e8:	add	r3, r2, r3
   196ec:	mov	r2, #34	; 0x22
   196f0:	strb	r2, [r3]
   196f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   196f8:	add	r3, r3, #1
   196fc:	str	r3, [fp, #-20]	; 0xffffffec
   19700:	ldr	r2, [fp, #-20]	; 0xffffffec
   19704:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19708:	cmp	r2, r3
   1970c:	bcs	19724 <__assert_fail@plt+0x855c>
   19710:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19714:	ldr	r3, [fp, #-20]	; 0xffffffec
   19718:	add	r3, r2, r3
   1971c:	mov	r2, #63	; 0x3f
   19720:	strb	r2, [r3]
   19724:	ldr	r3, [fp, #-20]	; 0xffffffec
   19728:	add	r3, r3, #1
   1972c:	str	r3, [fp, #-20]	; 0xffffffec
   19730:	b	19738 <__assert_fail@plt+0x8570>
   19734:	nop			; (mov r0, r0)
   19738:	b	19744 <__assert_fail@plt+0x857c>
   1973c:	nop			; (mov r0, r0)
   19740:	b	19f90 <__assert_fail@plt+0x8dc8>
   19744:	nop			; (mov r0, r0)
   19748:	b	19f90 <__assert_fail@plt+0x8dc8>
   1974c:	mov	r3, #97	; 0x61
   19750:	strb	r3, [fp, #-39]	; 0xffffffd9
   19754:	b	19800 <__assert_fail@plt+0x8638>
   19758:	mov	r3, #98	; 0x62
   1975c:	strb	r3, [fp, #-39]	; 0xffffffd9
   19760:	b	19800 <__assert_fail@plt+0x8638>
   19764:	mov	r3, #102	; 0x66
   19768:	strb	r3, [fp, #-39]	; 0xffffffd9
   1976c:	b	19800 <__assert_fail@plt+0x8638>
   19770:	mov	r3, #110	; 0x6e
   19774:	strb	r3, [fp, #-39]	; 0xffffffd9
   19778:	b	197e8 <__assert_fail@plt+0x8620>
   1977c:	mov	r3, #114	; 0x72
   19780:	strb	r3, [fp, #-39]	; 0xffffffd9
   19784:	b	197e8 <__assert_fail@plt+0x8620>
   19788:	mov	r3, #116	; 0x74
   1978c:	strb	r3, [fp, #-39]	; 0xffffffd9
   19790:	b	197e8 <__assert_fail@plt+0x8620>
   19794:	mov	r3, #118	; 0x76
   19798:	strb	r3, [fp, #-39]	; 0xffffffd9
   1979c:	b	19800 <__assert_fail@plt+0x8638>
   197a0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   197a4:	strb	r3, [fp, #-39]	; 0xffffffd9
   197a8:	ldr	r3, [fp, #4]
   197ac:	cmp	r3, #2
   197b0:	bne	197c4 <__assert_fail@plt+0x85fc>
   197b4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   197b8:	cmp	r3, #0
   197bc:	beq	1a118 <__assert_fail@plt+0x8f50>
   197c0:	b	1a40c <__assert_fail@plt+0x9244>
   197c4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   197c8:	cmp	r3, #0
   197cc:	beq	197e8 <__assert_fail@plt+0x8620>
   197d0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   197d4:	cmp	r3, #0
   197d8:	beq	197e8 <__assert_fail@plt+0x8620>
   197dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   197e0:	cmp	r3, #0
   197e4:	bne	1a120 <__assert_fail@plt+0x8f58>
   197e8:	ldr	r3, [fp, #4]
   197ec:	cmp	r3, #2
   197f0:	bne	19800 <__assert_fail@plt+0x8638>
   197f4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   197f8:	cmp	r3, #0
   197fc:	bne	1a3e0 <__assert_fail@plt+0x9218>
   19800:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19804:	cmp	r3, #0
   19808:	beq	19f6c <__assert_fail@plt+0x8da4>
   1980c:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   19810:	strb	r3, [fp, #-38]	; 0xffffffda
   19814:	b	1a018 <__assert_fail@plt+0x8e50>
   19818:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1981c:	cmn	r3, #1
   19820:	bne	19844 <__assert_fail@plt+0x867c>
   19824:	ldr	r3, [fp, #-96]	; 0xffffffa0
   19828:	add	r3, r3, #1
   1982c:	ldrb	r3, [r3]
   19830:	cmp	r3, #0
   19834:	movne	r3, #1
   19838:	moveq	r3, #0
   1983c:	uxtb	r3, r3
   19840:	b	19858 <__assert_fail@plt+0x8690>
   19844:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19848:	cmp	r3, #1
   1984c:	movne	r3, #1
   19850:	moveq	r3, #0
   19854:	uxtb	r3, r3
   19858:	cmp	r3, #0
   1985c:	bne	19f74 <__assert_fail@plt+0x8dac>
   19860:	ldr	r3, [fp, #-16]
   19864:	cmp	r3, #0
   19868:	bne	19f7c <__assert_fail@plt+0x8db4>
   1986c:	mov	r3, #1
   19870:	strb	r3, [fp, #-42]	; 0xffffffd6
   19874:	ldr	r3, [fp, #4]
   19878:	cmp	r3, #2
   1987c:	bne	19f84 <__assert_fail@plt+0x8dbc>
   19880:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19884:	cmp	r3, #0
   19888:	beq	19f84 <__assert_fail@plt+0x8dbc>
   1988c:	b	1a40c <__assert_fail@plt+0x9244>
   19890:	mov	r3, #1
   19894:	strb	r3, [fp, #-36]	; 0xffffffdc
   19898:	mov	r3, #1
   1989c:	strb	r3, [fp, #-42]	; 0xffffffd6
   198a0:	ldr	r3, [fp, #4]
   198a4:	cmp	r3, #2
   198a8:	bne	19f8c <__assert_fail@plt+0x8dc4>
   198ac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   198b0:	cmp	r3, #0
   198b4:	bne	1a3e8 <__assert_fail@plt+0x9220>
   198b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   198bc:	cmp	r3, #0
   198c0:	beq	198e0 <__assert_fail@plt+0x8718>
   198c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   198c8:	cmp	r3, #0
   198cc:	bne	198e0 <__assert_fail@plt+0x8718>
   198d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   198d4:	str	r3, [fp, #-24]	; 0xffffffe8
   198d8:	mov	r3, #0
   198dc:	str	r3, [fp, #-92]	; 0xffffffa4
   198e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   198e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   198e8:	cmp	r2, r3
   198ec:	bcs	19904 <__assert_fail@plt+0x873c>
   198f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   198f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   198f8:	add	r3, r2, r3
   198fc:	mov	r2, #39	; 0x27
   19900:	strb	r2, [r3]
   19904:	ldr	r3, [fp, #-20]	; 0xffffffec
   19908:	add	r3, r3, #1
   1990c:	str	r3, [fp, #-20]	; 0xffffffec
   19910:	ldr	r2, [fp, #-20]	; 0xffffffec
   19914:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19918:	cmp	r2, r3
   1991c:	bcs	19934 <__assert_fail@plt+0x876c>
   19920:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19924:	ldr	r3, [fp, #-20]	; 0xffffffec
   19928:	add	r3, r2, r3
   1992c:	mov	r2, #92	; 0x5c
   19930:	strb	r2, [r3]
   19934:	ldr	r3, [fp, #-20]	; 0xffffffec
   19938:	add	r3, r3, #1
   1993c:	str	r3, [fp, #-20]	; 0xffffffec
   19940:	ldr	r2, [fp, #-20]	; 0xffffffec
   19944:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19948:	cmp	r2, r3
   1994c:	bcs	19964 <__assert_fail@plt+0x879c>
   19950:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19954:	ldr	r3, [fp, #-20]	; 0xffffffec
   19958:	add	r3, r2, r3
   1995c:	mov	r2, #39	; 0x27
   19960:	strb	r2, [r3]
   19964:	ldr	r3, [fp, #-20]	; 0xffffffec
   19968:	add	r3, r3, #1
   1996c:	str	r3, [fp, #-20]	; 0xffffffec
   19970:	mov	r3, #0
   19974:	strb	r3, [fp, #-35]	; 0xffffffdd
   19978:	b	19f8c <__assert_fail@plt+0x8dc4>
   1997c:	mov	r3, #1
   19980:	strb	r3, [fp, #-42]	; 0xffffffd6
   19984:	b	19f90 <__assert_fail@plt+0x8dc8>
   19988:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   1998c:	cmp	r3, #0
   19990:	beq	199d0 <__assert_fail@plt+0x8808>
   19994:	mov	r3, #1
   19998:	str	r3, [fp, #-48]	; 0xffffffd0
   1999c:	bl	11048 <__ctype_b_loc@plt>
   199a0:	mov	r3, r0
   199a4:	ldr	r2, [r3]
   199a8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   199ac:	lsl	r3, r3, #1
   199b0:	add	r3, r2, r3
   199b4:	ldrh	r3, [r3]
   199b8:	and	r3, r3, #16384	; 0x4000
   199bc:	cmp	r3, #0
   199c0:	movne	r3, #1
   199c4:	moveq	r3, #0
   199c8:	strb	r3, [fp, #-49]	; 0xffffffcf
   199cc:	b	19c1c <__assert_fail@plt+0x8a54>
   199d0:	sub	r3, fp, #76	; 0x4c
   199d4:	mov	r2, #8
   199d8:	mov	r1, #0
   199dc:	mov	r0, r3
   199e0:	bl	110b4 <memset@plt>
   199e4:	mov	r3, #0
   199e8:	str	r3, [fp, #-48]	; 0xffffffd0
   199ec:	mov	r3, #1
   199f0:	strb	r3, [fp, #-49]	; 0xffffffcf
   199f4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   199f8:	cmn	r3, #1
   199fc:	bne	19a0c <__assert_fail@plt+0x8844>
   19a00:	ldr	r0, [fp, #-96]	; 0xffffffa0
   19a04:	bl	1106c <strlen@plt>
   19a08:	str	r0, [fp, #-100]	; 0xffffff9c
   19a0c:	ldr	r2, [fp, #-16]
   19a10:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19a14:	add	r3, r2, r3
   19a18:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19a1c:	add	r1, r2, r3
   19a20:	ldr	r2, [fp, #-16]
   19a24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19a28:	add	r3, r2, r3
   19a2c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19a30:	sub	r2, r2, r3
   19a34:	sub	r3, fp, #76	; 0x4c
   19a38:	sub	r0, fp, #80	; 0x50
   19a3c:	bl	1d660 <__assert_fail@plt+0xc498>
   19a40:	str	r0, [fp, #-64]	; 0xffffffc0
   19a44:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19a48:	cmp	r3, #0
   19a4c:	beq	19c10 <__assert_fail@plt+0x8a48>
   19a50:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19a54:	cmn	r3, #1
   19a58:	bne	19a68 <__assert_fail@plt+0x88a0>
   19a5c:	mov	r3, #0
   19a60:	strb	r3, [fp, #-49]	; 0xffffffcf
   19a64:	b	19c1c <__assert_fail@plt+0x8a54>
   19a68:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19a6c:	cmn	r3, #2
   19a70:	bne	19ac8 <__assert_fail@plt+0x8900>
   19a74:	mov	r3, #0
   19a78:	strb	r3, [fp, #-49]	; 0xffffffcf
   19a7c:	b	19a8c <__assert_fail@plt+0x88c4>
   19a80:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19a84:	add	r3, r3, #1
   19a88:	str	r3, [fp, #-48]	; 0xffffffd0
   19a8c:	ldr	r2, [fp, #-16]
   19a90:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19a94:	add	r2, r2, r3
   19a98:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19a9c:	cmp	r2, r3
   19aa0:	bcs	19c18 <__assert_fail@plt+0x8a50>
   19aa4:	ldr	r2, [fp, #-16]
   19aa8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19aac:	add	r3, r2, r3
   19ab0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19ab4:	add	r3, r2, r3
   19ab8:	ldrb	r3, [r3]
   19abc:	cmp	r3, #0
   19ac0:	bne	19a80 <__assert_fail@plt+0x88b8>
   19ac4:	b	19c18 <__assert_fail@plt+0x8a50>
   19ac8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19acc:	cmp	r3, #0
   19ad0:	beq	19bc4 <__assert_fail@plt+0x89fc>
   19ad4:	ldr	r3, [fp, #4]
   19ad8:	cmp	r3, #2
   19adc:	bne	19bc4 <__assert_fail@plt+0x89fc>
   19ae0:	mov	r3, #1
   19ae4:	str	r3, [fp, #-56]	; 0xffffffc8
   19ae8:	b	19bb4 <__assert_fail@plt+0x89ec>
   19aec:	ldr	r2, [fp, #-16]
   19af0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19af4:	add	r2, r2, r3
   19af8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19afc:	add	r3, r2, r3
   19b00:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19b04:	add	r3, r2, r3
   19b08:	ldrb	r3, [r3]
   19b0c:	sub	r3, r3, #91	; 0x5b
   19b10:	cmp	r3, #33	; 0x21
   19b14:	ldrls	pc, [pc, r3, lsl #2]
   19b18:	b	19ba4 <__assert_fail@plt+0x89dc>
   19b1c:	strdeq	sl, [r1], -r0
   19b20:	strdeq	sl, [r1], -r0
   19b24:	andeq	r9, r1, r4, lsr #23
   19b28:	strdeq	sl, [r1], -r0
   19b2c:	andeq	r9, r1, r4, lsr #23
   19b30:	strdeq	sl, [r1], -r0
   19b34:	andeq	r9, r1, r4, lsr #23
   19b38:	andeq	r9, r1, r4, lsr #23
   19b3c:	andeq	r9, r1, r4, lsr #23
   19b40:	andeq	r9, r1, r4, lsr #23
   19b44:	andeq	r9, r1, r4, lsr #23
   19b48:	andeq	r9, r1, r4, lsr #23
   19b4c:	andeq	r9, r1, r4, lsr #23
   19b50:	andeq	r9, r1, r4, lsr #23
   19b54:	andeq	r9, r1, r4, lsr #23
   19b58:	andeq	r9, r1, r4, lsr #23
   19b5c:	andeq	r9, r1, r4, lsr #23
   19b60:	andeq	r9, r1, r4, lsr #23
   19b64:	andeq	r9, r1, r4, lsr #23
   19b68:	andeq	r9, r1, r4, lsr #23
   19b6c:	andeq	r9, r1, r4, lsr #23
   19b70:	andeq	r9, r1, r4, lsr #23
   19b74:	andeq	r9, r1, r4, lsr #23
   19b78:	andeq	r9, r1, r4, lsr #23
   19b7c:	andeq	r9, r1, r4, lsr #23
   19b80:	andeq	r9, r1, r4, lsr #23
   19b84:	andeq	r9, r1, r4, lsr #23
   19b88:	andeq	r9, r1, r4, lsr #23
   19b8c:	andeq	r9, r1, r4, lsr #23
   19b90:	andeq	r9, r1, r4, lsr #23
   19b94:	andeq	r9, r1, r4, lsr #23
   19b98:	andeq	r9, r1, r4, lsr #23
   19b9c:	andeq	r9, r1, r4, lsr #23
   19ba0:	strdeq	sl, [r1], -r0
   19ba4:	nop			; (mov r0, r0)
   19ba8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19bac:	add	r3, r3, #1
   19bb0:	str	r3, [fp, #-56]	; 0xffffffc8
   19bb4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19bb8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19bbc:	cmp	r2, r3
   19bc0:	bcc	19aec <__assert_fail@plt+0x8924>
   19bc4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   19bc8:	mov	r0, r3
   19bcc:	bl	10f94 <iswprint@plt>
   19bd0:	mov	r3, r0
   19bd4:	cmp	r3, #0
   19bd8:	bne	19be4 <__assert_fail@plt+0x8a1c>
   19bdc:	mov	r3, #0
   19be0:	strb	r3, [fp, #-49]	; 0xffffffcf
   19be4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19be8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19bec:	add	r3, r2, r3
   19bf0:	str	r3, [fp, #-48]	; 0xffffffd0
   19bf4:	sub	r3, fp, #76	; 0x4c
   19bf8:	mov	r0, r3
   19bfc:	bl	10f4c <mbsinit@plt>
   19c00:	mov	r3, r0
   19c04:	cmp	r3, #0
   19c08:	beq	19a0c <__assert_fail@plt+0x8844>
   19c0c:	b	19c1c <__assert_fail@plt+0x8a54>
   19c10:	nop			; (mov r0, r0)
   19c14:	b	19c1c <__assert_fail@plt+0x8a54>
   19c18:	nop			; (mov r0, r0)
   19c1c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   19c20:	strb	r3, [fp, #-42]	; 0xffffffd6
   19c24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19c28:	cmp	r3, #1
   19c2c:	bhi	19c50 <__assert_fail@plt+0x8a88>
   19c30:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19c34:	cmp	r3, #0
   19c38:	beq	19f90 <__assert_fail@plt+0x8dc8>
   19c3c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   19c40:	eor	r3, r3, #1
   19c44:	uxtb	r3, r3
   19c48:	cmp	r3, #0
   19c4c:	beq	19f90 <__assert_fail@plt+0x8dc8>
   19c50:	ldr	r2, [fp, #-16]
   19c54:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19c58:	add	r3, r2, r3
   19c5c:	str	r3, [fp, #-68]	; 0xffffffbc
   19c60:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19c64:	cmp	r3, #0
   19c68:	beq	19e28 <__assert_fail@plt+0x8c60>
   19c6c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   19c70:	eor	r3, r3, #1
   19c74:	uxtb	r3, r3
   19c78:	cmp	r3, #0
   19c7c:	beq	19e28 <__assert_fail@plt+0x8c60>
   19c80:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19c84:	cmp	r3, #0
   19c88:	bne	1a3f8 <__assert_fail@plt+0x9230>
   19c8c:	mov	r3, #1
   19c90:	strb	r3, [fp, #-41]	; 0xffffffd7
   19c94:	ldr	r3, [fp, #4]
   19c98:	cmp	r3, #2
   19c9c:	bne	19d4c <__assert_fail@plt+0x8b84>
   19ca0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19ca4:	eor	r3, r3, #1
   19ca8:	uxtb	r3, r3
   19cac:	cmp	r3, #0
   19cb0:	beq	19d4c <__assert_fail@plt+0x8b84>
   19cb4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19cb8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19cbc:	cmp	r2, r3
   19cc0:	bcs	19cd8 <__assert_fail@plt+0x8b10>
   19cc4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ccc:	add	r3, r2, r3
   19cd0:	mov	r2, #39	; 0x27
   19cd4:	strb	r2, [r3]
   19cd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19cdc:	add	r3, r3, #1
   19ce0:	str	r3, [fp, #-20]	; 0xffffffec
   19ce4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ce8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19cec:	cmp	r2, r3
   19cf0:	bcs	19d08 <__assert_fail@plt+0x8b40>
   19cf4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19cf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19cfc:	add	r3, r2, r3
   19d00:	mov	r2, #36	; 0x24
   19d04:	strb	r2, [r3]
   19d08:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d0c:	add	r3, r3, #1
   19d10:	str	r3, [fp, #-20]	; 0xffffffec
   19d14:	ldr	r2, [fp, #-20]	; 0xffffffec
   19d18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19d1c:	cmp	r2, r3
   19d20:	bcs	19d38 <__assert_fail@plt+0x8b70>
   19d24:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19d28:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d2c:	add	r3, r2, r3
   19d30:	mov	r2, #39	; 0x27
   19d34:	strb	r2, [r3]
   19d38:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d3c:	add	r3, r3, #1
   19d40:	str	r3, [fp, #-20]	; 0xffffffec
   19d44:	mov	r3, #1
   19d48:	strb	r3, [fp, #-35]	; 0xffffffdd
   19d4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19d50:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19d54:	cmp	r2, r3
   19d58:	bcs	19d70 <__assert_fail@plt+0x8ba8>
   19d5c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19d60:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d64:	add	r3, r2, r3
   19d68:	mov	r2, #92	; 0x5c
   19d6c:	strb	r2, [r3]
   19d70:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d74:	add	r3, r3, #1
   19d78:	str	r3, [fp, #-20]	; 0xffffffec
   19d7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19d80:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19d84:	cmp	r2, r3
   19d88:	bcs	19db0 <__assert_fail@plt+0x8be8>
   19d8c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19d90:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d94:	add	r3, r2, r3
   19d98:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19d9c:	lsr	r2, r2, #6
   19da0:	uxtb	r2, r2
   19da4:	add	r2, r2, #48	; 0x30
   19da8:	uxtb	r2, r2
   19dac:	strb	r2, [r3]
   19db0:	ldr	r3, [fp, #-20]	; 0xffffffec
   19db4:	add	r3, r3, #1
   19db8:	str	r3, [fp, #-20]	; 0xffffffec
   19dbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   19dc0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19dc4:	cmp	r2, r3
   19dc8:	bcs	19df8 <__assert_fail@plt+0x8c30>
   19dcc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19dd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   19dd4:	add	r3, r2, r3
   19dd8:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19ddc:	lsr	r2, r2, #3
   19de0:	uxtb	r2, r2
   19de4:	and	r2, r2, #7
   19de8:	uxtb	r2, r2
   19dec:	add	r2, r2, #48	; 0x30
   19df0:	uxtb	r2, r2
   19df4:	strb	r2, [r3]
   19df8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19dfc:	add	r3, r3, #1
   19e00:	str	r3, [fp, #-20]	; 0xffffffec
   19e04:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19e08:	and	r3, r3, #7
   19e0c:	uxtb	r3, r3
   19e10:	add	r3, r3, #48	; 0x30
   19e14:	strb	r3, [fp, #-38]	; 0xffffffda
   19e18:	b	19e6c <__assert_fail@plt+0x8ca4>
   19e1c:	andeq	pc, r1, r4, lsl r2	; <UNPREDICTABLE>
   19e20:	andeq	pc, r1, ip, lsl r2	; <UNPREDICTABLE>
   19e24:	andeq	pc, r1, r8, lsl r2	; <UNPREDICTABLE>
   19e28:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   19e2c:	cmp	r3, #0
   19e30:	beq	19e6c <__assert_fail@plt+0x8ca4>
   19e34:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e38:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e3c:	cmp	r2, r3
   19e40:	bcs	19e58 <__assert_fail@plt+0x8c90>
   19e44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e48:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e4c:	add	r3, r2, r3
   19e50:	mov	r2, #92	; 0x5c
   19e54:	strb	r2, [r3]
   19e58:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e5c:	add	r3, r3, #1
   19e60:	str	r3, [fp, #-20]	; 0xffffffec
   19e64:	mov	r3, #0
   19e68:	strb	r3, [fp, #-40]	; 0xffffffd8
   19e6c:	ldr	r3, [fp, #-16]
   19e70:	add	r2, r3, #1
   19e74:	ldr	r3, [fp, #-68]	; 0xffffffbc
   19e78:	cmp	r2, r3
   19e7c:	bcs	19f5c <__assert_fail@plt+0x8d94>
   19e80:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19e84:	cmp	r3, #0
   19e88:	beq	19f08 <__assert_fail@plt+0x8d40>
   19e8c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   19e90:	eor	r3, r3, #1
   19e94:	uxtb	r3, r3
   19e98:	cmp	r3, #0
   19e9c:	beq	19f08 <__assert_fail@plt+0x8d40>
   19ea0:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ea4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19ea8:	cmp	r2, r3
   19eac:	bcs	19ec4 <__assert_fail@plt+0x8cfc>
   19eb0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19eb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19eb8:	add	r3, r2, r3
   19ebc:	mov	r2, #39	; 0x27
   19ec0:	strb	r2, [r3]
   19ec4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ec8:	add	r3, r3, #1
   19ecc:	str	r3, [fp, #-20]	; 0xffffffec
   19ed0:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ed4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19ed8:	cmp	r2, r3
   19edc:	bcs	19ef4 <__assert_fail@plt+0x8d2c>
   19ee0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19ee4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ee8:	add	r3, r2, r3
   19eec:	mov	r2, #39	; 0x27
   19ef0:	strb	r2, [r3]
   19ef4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ef8:	add	r3, r3, #1
   19efc:	str	r3, [fp, #-20]	; 0xffffffec
   19f00:	mov	r3, #0
   19f04:	strb	r3, [fp, #-35]	; 0xffffffdd
   19f08:	ldr	r2, [fp, #-20]	; 0xffffffec
   19f0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19f10:	cmp	r2, r3
   19f14:	bcs	19f2c <__assert_fail@plt+0x8d64>
   19f18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19f1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f20:	add	r3, r2, r3
   19f24:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19f28:	strb	r2, [r3]
   19f2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f30:	add	r3, r3, #1
   19f34:	str	r3, [fp, #-20]	; 0xffffffec
   19f38:	ldr	r3, [fp, #-16]
   19f3c:	add	r3, r3, #1
   19f40:	str	r3, [fp, #-16]
   19f44:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19f48:	ldr	r3, [fp, #-16]
   19f4c:	add	r3, r2, r3
   19f50:	ldrb	r3, [r3]
   19f54:	strb	r3, [fp, #-38]	; 0xffffffda
   19f58:	b	19c60 <__assert_fail@plt+0x8a98>
   19f5c:	nop			; (mov r0, r0)
   19f60:	b	1a12c <__assert_fail@plt+0x8f64>
   19f64:	nop			; (mov r0, r0)
   19f68:	b	19f90 <__assert_fail@plt+0x8dc8>
   19f6c:	nop			; (mov r0, r0)
   19f70:	b	19f90 <__assert_fail@plt+0x8dc8>
   19f74:	nop			; (mov r0, r0)
   19f78:	b	19f90 <__assert_fail@plt+0x8dc8>
   19f7c:	nop			; (mov r0, r0)
   19f80:	b	19f90 <__assert_fail@plt+0x8dc8>
   19f84:	nop			; (mov r0, r0)
   19f88:	b	19f90 <__assert_fail@plt+0x8dc8>
   19f8c:	nop			; (mov r0, r0)
   19f90:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19f94:	eor	r3, r3, #1
   19f98:	uxtb	r3, r3
   19f9c:	cmp	r3, #0
   19fa0:	bne	19fb0 <__assert_fail@plt+0x8de8>
   19fa4:	ldr	r3, [fp, #4]
   19fa8:	cmp	r3, #2
   19fac:	bne	19fc4 <__assert_fail@plt+0x8dfc>
   19fb0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19fb4:	eor	r3, r3, #1
   19fb8:	uxtb	r3, r3
   19fbc:	cmp	r3, #0
   19fc0:	bne	1a004 <__assert_fail@plt+0x8e3c>
   19fc4:	ldr	r3, [fp, #12]
   19fc8:	cmp	r3, #0
   19fcc:	beq	1a004 <__assert_fail@plt+0x8e3c>
   19fd0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19fd4:	lsr	r3, r3, #5
   19fd8:	uxtb	r3, r3
   19fdc:	lsl	r3, r3, #2
   19fe0:	ldr	r2, [fp, #12]
   19fe4:	add	r3, r2, r3
   19fe8:	ldr	r2, [r3]
   19fec:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19ff0:	and	r3, r3, #31
   19ff4:	lsr	r3, r2, r3
   19ff8:	and	r3, r3, #1
   19ffc:	cmp	r3, #0
   1a000:	bne	1a018 <__assert_fail@plt+0x8e50>
   1a004:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1a008:	eor	r3, r3, #1
   1a00c:	uxtb	r3, r3
   1a010:	cmp	r3, #0
   1a014:	bne	1a128 <__assert_fail@plt+0x8f60>
   1a018:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a01c:	cmp	r3, #0
   1a020:	bne	1a400 <__assert_fail@plt+0x9238>
   1a024:	mov	r3, #1
   1a028:	strb	r3, [fp, #-41]	; 0xffffffd7
   1a02c:	ldr	r3, [fp, #4]
   1a030:	cmp	r3, #2
   1a034:	bne	1a0e4 <__assert_fail@plt+0x8f1c>
   1a038:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1a03c:	eor	r3, r3, #1
   1a040:	uxtb	r3, r3
   1a044:	cmp	r3, #0
   1a048:	beq	1a0e4 <__assert_fail@plt+0x8f1c>
   1a04c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a050:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a054:	cmp	r2, r3
   1a058:	bcs	1a070 <__assert_fail@plt+0x8ea8>
   1a05c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a060:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a064:	add	r3, r2, r3
   1a068:	mov	r2, #39	; 0x27
   1a06c:	strb	r2, [r3]
   1a070:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a074:	add	r3, r3, #1
   1a078:	str	r3, [fp, #-20]	; 0xffffffec
   1a07c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a080:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a084:	cmp	r2, r3
   1a088:	bcs	1a0a0 <__assert_fail@plt+0x8ed8>
   1a08c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a090:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a094:	add	r3, r2, r3
   1a098:	mov	r2, #36	; 0x24
   1a09c:	strb	r2, [r3]
   1a0a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0a4:	add	r3, r3, #1
   1a0a8:	str	r3, [fp, #-20]	; 0xffffffec
   1a0ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a0b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a0b4:	cmp	r2, r3
   1a0b8:	bcs	1a0d0 <__assert_fail@plt+0x8f08>
   1a0bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a0c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0c4:	add	r3, r2, r3
   1a0c8:	mov	r2, #39	; 0x27
   1a0cc:	strb	r2, [r3]
   1a0d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0d4:	add	r3, r3, #1
   1a0d8:	str	r3, [fp, #-20]	; 0xffffffec
   1a0dc:	mov	r3, #1
   1a0e0:	strb	r3, [fp, #-35]	; 0xffffffdd
   1a0e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a0e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a0ec:	cmp	r2, r3
   1a0f0:	bcs	1a108 <__assert_fail@plt+0x8f40>
   1a0f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a0f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0fc:	add	r3, r2, r3
   1a100:	mov	r2, #92	; 0x5c
   1a104:	strb	r2, [r3]
   1a108:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a10c:	add	r3, r3, #1
   1a110:	str	r3, [fp, #-20]	; 0xffffffec
   1a114:	b	1a12c <__assert_fail@plt+0x8f64>
   1a118:	nop			; (mov r0, r0)
   1a11c:	b	1a12c <__assert_fail@plt+0x8f64>
   1a120:	nop			; (mov r0, r0)
   1a124:	b	1a12c <__assert_fail@plt+0x8f64>
   1a128:	nop			; (mov r0, r0)
   1a12c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1a130:	cmp	r3, #0
   1a134:	beq	1a1b4 <__assert_fail@plt+0x8fec>
   1a138:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1a13c:	eor	r3, r3, #1
   1a140:	uxtb	r3, r3
   1a144:	cmp	r3, #0
   1a148:	beq	1a1b4 <__assert_fail@plt+0x8fec>
   1a14c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a150:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a154:	cmp	r2, r3
   1a158:	bcs	1a170 <__assert_fail@plt+0x8fa8>
   1a15c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a160:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a164:	add	r3, r2, r3
   1a168:	mov	r2, #39	; 0x27
   1a16c:	strb	r2, [r3]
   1a170:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a174:	add	r3, r3, #1
   1a178:	str	r3, [fp, #-20]	; 0xffffffec
   1a17c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a180:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a184:	cmp	r2, r3
   1a188:	bcs	1a1a0 <__assert_fail@plt+0x8fd8>
   1a18c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a190:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a194:	add	r3, r2, r3
   1a198:	mov	r2, #39	; 0x27
   1a19c:	strb	r2, [r3]
   1a1a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a1a4:	add	r3, r3, #1
   1a1a8:	str	r3, [fp, #-20]	; 0xffffffec
   1a1ac:	mov	r3, #0
   1a1b0:	strb	r3, [fp, #-35]	; 0xffffffdd
   1a1b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a1b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a1bc:	cmp	r2, r3
   1a1c0:	bcs	1a1d8 <__assert_fail@plt+0x9010>
   1a1c4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a1c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a1cc:	add	r3, r2, r3
   1a1d0:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1a1d4:	strb	r2, [r3]
   1a1d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a1dc:	add	r3, r3, #1
   1a1e0:	str	r3, [fp, #-20]	; 0xffffffec
   1a1e4:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1a1e8:	eor	r3, r3, #1
   1a1ec:	uxtb	r3, r3
   1a1f0:	cmp	r3, #0
   1a1f4:	beq	1a200 <__assert_fail@plt+0x9038>
   1a1f8:	mov	r3, #0
   1a1fc:	strb	r3, [fp, #-37]	; 0xffffffdb
   1a200:	ldr	r3, [fp, #-16]
   1a204:	add	r3, r3, #1
   1a208:	str	r3, [fp, #-16]
   1a20c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a210:	cmn	r3, #1
   1a214:	bne	1a23c <__assert_fail@plt+0x9074>
   1a218:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a21c:	ldr	r3, [fp, #-16]
   1a220:	add	r3, r2, r3
   1a224:	ldrb	r3, [r3]
   1a228:	cmp	r3, #0
   1a22c:	movne	r3, #1
   1a230:	moveq	r3, #0
   1a234:	uxtb	r3, r3
   1a238:	b	1a254 <__assert_fail@plt+0x908c>
   1a23c:	ldr	r2, [fp, #-16]
   1a240:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a244:	cmp	r2, r3
   1a248:	movne	r3, #1
   1a24c:	moveq	r3, #0
   1a250:	uxtb	r3, r3
   1a254:	cmp	r3, #0
   1a258:	bne	19080 <__assert_fail@plt+0x7eb8>
   1a25c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a260:	cmp	r3, #0
   1a264:	bne	1a280 <__assert_fail@plt+0x90b8>
   1a268:	ldr	r3, [fp, #4]
   1a26c:	cmp	r3, #2
   1a270:	bne	1a280 <__assert_fail@plt+0x90b8>
   1a274:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a278:	cmp	r3, #0
   1a27c:	bne	1a408 <__assert_fail@plt+0x9240>
   1a280:	ldr	r3, [fp, #4]
   1a284:	cmp	r3, #2
   1a288:	bne	1a328 <__assert_fail@plt+0x9160>
   1a28c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a290:	eor	r3, r3, #1
   1a294:	uxtb	r3, r3
   1a298:	cmp	r3, #0
   1a29c:	beq	1a328 <__assert_fail@plt+0x9160>
   1a2a0:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   1a2a4:	cmp	r3, #0
   1a2a8:	beq	1a328 <__assert_fail@plt+0x9160>
   1a2ac:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1a2b0:	cmp	r3, #0
   1a2b4:	beq	1a2fc <__assert_fail@plt+0x9134>
   1a2b8:	ldr	r3, [fp, #20]
   1a2bc:	str	r3, [sp, #16]
   1a2c0:	ldr	r3, [fp, #16]
   1a2c4:	str	r3, [sp, #12]
   1a2c8:	ldr	r3, [fp, #12]
   1a2cc:	str	r3, [sp, #8]
   1a2d0:	ldr	r3, [fp, #8]
   1a2d4:	str	r3, [sp, #4]
   1a2d8:	mov	r3, #5
   1a2dc:	str	r3, [sp]
   1a2e0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a2e4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a2e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a2ec:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1a2f0:	bl	18dd0 <__assert_fail@plt+0x7c08>
   1a2f4:	mov	r3, r0
   1a2f8:	b	1a470 <__assert_fail@plt+0x92a8>
   1a2fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a300:	cmp	r3, #0
   1a304:	bne	1a328 <__assert_fail@plt+0x9160>
   1a308:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a30c:	cmp	r3, #0
   1a310:	beq	1a328 <__assert_fail@plt+0x9160>
   1a314:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a318:	str	r3, [fp, #-92]	; 0xffffffa4
   1a31c:	mov	r3, #0
   1a320:	str	r3, [fp, #-20]	; 0xffffffec
   1a324:	b	18e5c <__assert_fail@plt+0x7c94>
   1a328:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a32c:	cmp	r3, #0
   1a330:	beq	1a39c <__assert_fail@plt+0x91d4>
   1a334:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a338:	eor	r3, r3, #1
   1a33c:	uxtb	r3, r3
   1a340:	cmp	r3, #0
   1a344:	beq	1a39c <__assert_fail@plt+0x91d4>
   1a348:	b	1a38c <__assert_fail@plt+0x91c4>
   1a34c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a350:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a354:	cmp	r2, r3
   1a358:	bcs	1a374 <__assert_fail@plt+0x91ac>
   1a35c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a360:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a364:	add	r3, r2, r3
   1a368:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a36c:	ldrb	r2, [r2]
   1a370:	strb	r2, [r3]
   1a374:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a378:	add	r3, r3, #1
   1a37c:	str	r3, [fp, #-20]	; 0xffffffec
   1a380:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a384:	add	r3, r3, #1
   1a388:	str	r3, [fp, #-28]	; 0xffffffe4
   1a38c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a390:	ldrb	r3, [r3]
   1a394:	cmp	r3, #0
   1a398:	bne	1a34c <__assert_fail@plt+0x9184>
   1a39c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a3a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a3a4:	cmp	r2, r3
   1a3a8:	bcs	1a3c0 <__assert_fail@plt+0x91f8>
   1a3ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a3b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a3b4:	add	r3, r2, r3
   1a3b8:	mov	r2, #0
   1a3bc:	strb	r2, [r3]
   1a3c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a3c4:	b	1a470 <__assert_fail@plt+0x92a8>
   1a3c8:	nop			; (mov r0, r0)
   1a3cc:	b	1a40c <__assert_fail@plt+0x9244>
   1a3d0:	nop			; (mov r0, r0)
   1a3d4:	b	1a40c <__assert_fail@plt+0x9244>
   1a3d8:	nop			; (mov r0, r0)
   1a3dc:	b	1a40c <__assert_fail@plt+0x9244>
   1a3e0:	nop			; (mov r0, r0)
   1a3e4:	b	1a40c <__assert_fail@plt+0x9244>
   1a3e8:	nop			; (mov r0, r0)
   1a3ec:	b	1a40c <__assert_fail@plt+0x9244>
   1a3f0:	nop			; (mov r0, r0)
   1a3f4:	b	1a40c <__assert_fail@plt+0x9244>
   1a3f8:	nop			; (mov r0, r0)
   1a3fc:	b	1a40c <__assert_fail@plt+0x9244>
   1a400:	nop			; (mov r0, r0)
   1a404:	b	1a40c <__assert_fail@plt+0x9244>
   1a408:	nop			; (mov r0, r0)
   1a40c:	ldr	r3, [fp, #4]
   1a410:	cmp	r3, #2
   1a414:	bne	1a42c <__assert_fail@plt+0x9264>
   1a418:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1a41c:	cmp	r3, #0
   1a420:	beq	1a42c <__assert_fail@plt+0x9264>
   1a424:	mov	r3, #4
   1a428:	str	r3, [fp, #4]
   1a42c:	ldr	r3, [fp, #8]
   1a430:	bic	r3, r3, #2
   1a434:	ldr	r2, [fp, #20]
   1a438:	str	r2, [sp, #16]
   1a43c:	ldr	r2, [fp, #16]
   1a440:	str	r2, [sp, #12]
   1a444:	mov	r2, #0
   1a448:	str	r2, [sp, #8]
   1a44c:	str	r3, [sp, #4]
   1a450:	ldr	r3, [fp, #4]
   1a454:	str	r3, [sp]
   1a458:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a45c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a460:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1a464:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1a468:	bl	18dd0 <__assert_fail@plt+0x7c08>
   1a46c:	mov	r3, r0
   1a470:	mov	r0, r3
   1a474:	sub	sp, fp, #8
   1a478:	pop	{r4, fp, pc}
   1a47c:	push	{fp, lr}
   1a480:	add	fp, sp, #4
   1a484:	sub	sp, sp, #56	; 0x38
   1a488:	str	r0, [fp, #-24]	; 0xffffffe8
   1a48c:	str	r1, [fp, #-28]	; 0xffffffe4
   1a490:	str	r2, [fp, #-32]	; 0xffffffe0
   1a494:	str	r3, [fp, #-36]	; 0xffffffdc
   1a498:	ldr	r3, [fp, #4]
   1a49c:	cmp	r3, #0
   1a4a0:	beq	1a4ac <__assert_fail@plt+0x92e4>
   1a4a4:	ldr	r3, [fp, #4]
   1a4a8:	b	1a4b0 <__assert_fail@plt+0x92e8>
   1a4ac:	ldr	r3, [pc, #132]	; 1a538 <__assert_fail@plt+0x9370>
   1a4b0:	str	r3, [fp, #-8]
   1a4b4:	bl	1109c <__errno_location@plt>
   1a4b8:	mov	r3, r0
   1a4bc:	ldr	r3, [r3]
   1a4c0:	str	r3, [fp, #-12]
   1a4c4:	ldr	r3, [fp, #-8]
   1a4c8:	ldr	r3, [r3]
   1a4cc:	ldr	r2, [fp, #-8]
   1a4d0:	ldr	r2, [r2, #4]
   1a4d4:	ldr	r1, [fp, #-8]
   1a4d8:	add	r1, r1, #8
   1a4dc:	ldr	r0, [fp, #-8]
   1a4e0:	ldr	r0, [r0, #40]	; 0x28
   1a4e4:	ldr	ip, [fp, #-8]
   1a4e8:	ldr	ip, [ip, #44]	; 0x2c
   1a4ec:	str	ip, [sp, #16]
   1a4f0:	str	r0, [sp, #12]
   1a4f4:	str	r1, [sp, #8]
   1a4f8:	str	r2, [sp, #4]
   1a4fc:	str	r3, [sp]
   1a500:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a504:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a508:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1a50c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a510:	bl	18dd0 <__assert_fail@plt+0x7c08>
   1a514:	str	r0, [fp, #-16]
   1a518:	bl	1109c <__errno_location@plt>
   1a51c:	mov	r2, r0
   1a520:	ldr	r3, [fp, #-12]
   1a524:	str	r3, [r2]
   1a528:	ldr	r3, [fp, #-16]
   1a52c:	mov	r0, r3
   1a530:	sub	sp, fp, #4
   1a534:	pop	{fp, pc}
   1a538:			; <UNDEFINED> instruction: 0x000301b4
   1a53c:	push	{fp, lr}
   1a540:	add	fp, sp, #4
   1a544:	sub	sp, sp, #16
   1a548:	str	r0, [fp, #-8]
   1a54c:	str	r1, [fp, #-12]
   1a550:	str	r2, [fp, #-16]
   1a554:	ldr	r3, [fp, #-16]
   1a558:	mov	r2, #0
   1a55c:	ldr	r1, [fp, #-12]
   1a560:	ldr	r0, [fp, #-8]
   1a564:	bl	1a578 <__assert_fail@plt+0x93b0>
   1a568:	mov	r3, r0
   1a56c:	mov	r0, r3
   1a570:	sub	sp, fp, #4
   1a574:	pop	{fp, pc}
   1a578:	push	{fp, lr}
   1a57c:	add	fp, sp, #4
   1a580:	sub	sp, sp, #64	; 0x40
   1a584:	str	r0, [fp, #-32]	; 0xffffffe0
   1a588:	str	r1, [fp, #-36]	; 0xffffffdc
   1a58c:	str	r2, [fp, #-40]	; 0xffffffd8
   1a590:	str	r3, [fp, #-44]	; 0xffffffd4
   1a594:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a598:	cmp	r3, #0
   1a59c:	beq	1a5a8 <__assert_fail@plt+0x93e0>
   1a5a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a5a4:	b	1a5ac <__assert_fail@plt+0x93e4>
   1a5a8:	ldr	r3, [pc, #292]	; 1a6d4 <__assert_fail@plt+0x950c>
   1a5ac:	str	r3, [fp, #-8]
   1a5b0:	bl	1109c <__errno_location@plt>
   1a5b4:	mov	r3, r0
   1a5b8:	ldr	r3, [r3]
   1a5bc:	str	r3, [fp, #-12]
   1a5c0:	ldr	r3, [fp, #-8]
   1a5c4:	ldr	r3, [r3, #4]
   1a5c8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a5cc:	cmp	r2, #0
   1a5d0:	moveq	r2, #1
   1a5d4:	movne	r2, #0
   1a5d8:	uxtb	r2, r2
   1a5dc:	orr	r3, r3, r2
   1a5e0:	str	r3, [fp, #-16]
   1a5e4:	ldr	r3, [fp, #-8]
   1a5e8:	ldr	r3, [r3]
   1a5ec:	ldr	r2, [fp, #-8]
   1a5f0:	add	r2, r2, #8
   1a5f4:	ldr	r1, [fp, #-8]
   1a5f8:	ldr	r1, [r1, #40]	; 0x28
   1a5fc:	ldr	r0, [fp, #-8]
   1a600:	ldr	r0, [r0, #44]	; 0x2c
   1a604:	str	r0, [sp, #16]
   1a608:	str	r1, [sp, #12]
   1a60c:	str	r2, [sp, #8]
   1a610:	ldr	r2, [fp, #-16]
   1a614:	str	r2, [sp, #4]
   1a618:	str	r3, [sp]
   1a61c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a620:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a624:	mov	r1, #0
   1a628:	mov	r0, #0
   1a62c:	bl	18dd0 <__assert_fail@plt+0x7c08>
   1a630:	mov	r3, r0
   1a634:	add	r3, r3, #1
   1a638:	str	r3, [fp, #-20]	; 0xffffffec
   1a63c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a640:	bl	1b948 <__assert_fail@plt+0xa780>
   1a644:	mov	r3, r0
   1a648:	str	r3, [fp, #-24]	; 0xffffffe8
   1a64c:	ldr	r3, [fp, #-8]
   1a650:	ldr	r3, [r3]
   1a654:	ldr	r2, [fp, #-8]
   1a658:	add	r2, r2, #8
   1a65c:	ldr	r1, [fp, #-8]
   1a660:	ldr	r1, [r1, #40]	; 0x28
   1a664:	ldr	r0, [fp, #-8]
   1a668:	ldr	r0, [r0, #44]	; 0x2c
   1a66c:	str	r0, [sp, #16]
   1a670:	str	r1, [sp, #12]
   1a674:	str	r2, [sp, #8]
   1a678:	ldr	r2, [fp, #-16]
   1a67c:	str	r2, [sp, #4]
   1a680:	str	r3, [sp]
   1a684:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a688:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a68c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a690:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a694:	bl	18dd0 <__assert_fail@plt+0x7c08>
   1a698:	bl	1109c <__errno_location@plt>
   1a69c:	mov	r2, r0
   1a6a0:	ldr	r3, [fp, #-12]
   1a6a4:	str	r3, [r2]
   1a6a8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a6ac:	cmp	r3, #0
   1a6b0:	beq	1a6c4 <__assert_fail@plt+0x94fc>
   1a6b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a6b8:	sub	r2, r3, #1
   1a6bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a6c0:	str	r2, [r3]
   1a6c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a6c8:	mov	r0, r3
   1a6cc:	sub	sp, fp, #4
   1a6d0:	pop	{fp, pc}
   1a6d4:			; <UNDEFINED> instruction: 0x000301b4
   1a6d8:	push	{fp, lr}
   1a6dc:	add	fp, sp, #4
   1a6e0:	sub	sp, sp, #8
   1a6e4:	ldr	r3, [pc, #196]	; 1a7b0 <__assert_fail@plt+0x95e8>
   1a6e8:	ldr	r3, [r3]
   1a6ec:	str	r3, [fp, #-12]
   1a6f0:	mov	r3, #1
   1a6f4:	str	r3, [fp, #-8]
   1a6f8:	b	1a724 <__assert_fail@plt+0x955c>
   1a6fc:	ldr	r3, [fp, #-8]
   1a700:	lsl	r3, r3, #3
   1a704:	ldr	r2, [fp, #-12]
   1a708:	add	r3, r2, r3
   1a70c:	ldr	r3, [r3, #4]
   1a710:	mov	r0, r3
   1a714:	bl	1d358 <__assert_fail@plt+0xc190>
   1a718:	ldr	r3, [fp, #-8]
   1a71c:	add	r3, r3, #1
   1a720:	str	r3, [fp, #-8]
   1a724:	ldr	r3, [pc, #136]	; 1a7b4 <__assert_fail@plt+0x95ec>
   1a728:	ldr	r3, [r3]
   1a72c:	ldr	r2, [fp, #-8]
   1a730:	cmp	r2, r3
   1a734:	blt	1a6fc <__assert_fail@plt+0x9534>
   1a738:	ldr	r3, [fp, #-12]
   1a73c:	ldr	r3, [r3, #4]
   1a740:	ldr	r2, [pc, #112]	; 1a7b8 <__assert_fail@plt+0x95f0>
   1a744:	cmp	r3, r2
   1a748:	beq	1a774 <__assert_fail@plt+0x95ac>
   1a74c:	ldr	r3, [fp, #-12]
   1a750:	ldr	r3, [r3, #4]
   1a754:	mov	r0, r3
   1a758:	bl	1d358 <__assert_fail@plt+0xc190>
   1a75c:	ldr	r3, [pc, #88]	; 1a7bc <__assert_fail@plt+0x95f4>
   1a760:	mov	r2, #256	; 0x100
   1a764:	str	r2, [r3]
   1a768:	ldr	r3, [pc, #76]	; 1a7bc <__assert_fail@plt+0x95f4>
   1a76c:	ldr	r2, [pc, #68]	; 1a7b8 <__assert_fail@plt+0x95f0>
   1a770:	str	r2, [r3, #4]
   1a774:	ldr	r3, [fp, #-12]
   1a778:	ldr	r2, [pc, #60]	; 1a7bc <__assert_fail@plt+0x95f4>
   1a77c:	cmp	r3, r2
   1a780:	beq	1a798 <__assert_fail@plt+0x95d0>
   1a784:	ldr	r0, [fp, #-12]
   1a788:	bl	1d358 <__assert_fail@plt+0xc190>
   1a78c:	ldr	r3, [pc, #28]	; 1a7b0 <__assert_fail@plt+0x95e8>
   1a790:	ldr	r2, [pc, #36]	; 1a7bc <__assert_fail@plt+0x95f4>
   1a794:	str	r2, [r3]
   1a798:	ldr	r3, [pc, #20]	; 1a7b4 <__assert_fail@plt+0x95ec>
   1a79c:	mov	r2, #1
   1a7a0:	str	r2, [r3]
   1a7a4:	nop			; (mov r0, r0)
   1a7a8:	sub	sp, fp, #4
   1a7ac:	pop	{fp, pc}
   1a7b0:	andeq	r0, r3, r4, lsr r1
   1a7b4:	andeq	r0, r3, r8, lsr #2
   1a7b8:	andeq	r0, r3, r4, ror #3
   1a7bc:	andeq	r0, r3, ip, lsr #2
   1a7c0:	push	{r4, fp, lr}
   1a7c4:	add	fp, sp, #8
   1a7c8:	sub	sp, sp, #84	; 0x54
   1a7cc:	str	r0, [fp, #-56]	; 0xffffffc8
   1a7d0:	str	r1, [fp, #-60]	; 0xffffffc4
   1a7d4:	str	r2, [fp, #-64]	; 0xffffffc0
   1a7d8:	str	r3, [fp, #-68]	; 0xffffffbc
   1a7dc:	bl	1109c <__errno_location@plt>
   1a7e0:	mov	r3, r0
   1a7e4:	ldr	r3, [r3]
   1a7e8:	str	r3, [fp, #-24]	; 0xffffffe8
   1a7ec:	ldr	r3, [pc, #640]	; 1aa74 <__assert_fail@plt+0x98ac>
   1a7f0:	ldr	r3, [r3]
   1a7f4:	str	r3, [fp, #-16]
   1a7f8:	mvn	r3, #-2147483648	; 0x80000000
   1a7fc:	str	r3, [fp, #-28]	; 0xffffffe4
   1a800:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a804:	cmp	r3, #0
   1a808:	blt	1a81c <__assert_fail@plt+0x9654>
   1a80c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a810:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a814:	cmp	r2, r3
   1a818:	blt	1a820 <__assert_fail@plt+0x9658>
   1a81c:	bl	11198 <abort@plt>
   1a820:	ldr	r3, [pc, #592]	; 1aa78 <__assert_fail@plt+0x98b0>
   1a824:	ldr	r2, [r3]
   1a828:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a82c:	cmp	r2, r3
   1a830:	bgt	1a904 <__assert_fail@plt+0x973c>
   1a834:	ldr	r3, [fp, #-16]
   1a838:	ldr	r2, [pc, #572]	; 1aa7c <__assert_fail@plt+0x98b4>
   1a83c:	cmp	r3, r2
   1a840:	moveq	r3, #1
   1a844:	movne	r3, #0
   1a848:	strb	r3, [fp, #-29]	; 0xffffffe3
   1a84c:	ldr	r3, [pc, #548]	; 1aa78 <__assert_fail@plt+0x98b0>
   1a850:	ldr	r3, [r3]
   1a854:	str	r3, [fp, #-48]	; 0xffffffd0
   1a858:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1a85c:	cmp	r3, #0
   1a860:	beq	1a86c <__assert_fail@plt+0x96a4>
   1a864:	mov	r0, #0
   1a868:	b	1a870 <__assert_fail@plt+0x96a8>
   1a86c:	ldr	r0, [fp, #-16]
   1a870:	ldr	r3, [pc, #512]	; 1aa78 <__assert_fail@plt+0x98b0>
   1a874:	ldr	r3, [r3]
   1a878:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a87c:	sub	r3, r2, r3
   1a880:	add	r2, r3, #1
   1a884:	sub	r1, fp, #48	; 0x30
   1a888:	mov	r3, #8
   1a88c:	str	r3, [sp]
   1a890:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a894:	bl	1bc68 <__assert_fail@plt+0xaaa0>
   1a898:	str	r0, [fp, #-16]
   1a89c:	ldr	r2, [pc, #464]	; 1aa74 <__assert_fail@plt+0x98ac>
   1a8a0:	ldr	r3, [fp, #-16]
   1a8a4:	str	r3, [r2]
   1a8a8:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1a8ac:	cmp	r3, #0
   1a8b0:	beq	1a8c4 <__assert_fail@plt+0x96fc>
   1a8b4:	ldr	r3, [fp, #-16]
   1a8b8:	ldr	r2, [pc, #444]	; 1aa7c <__assert_fail@plt+0x98b4>
   1a8bc:	ldm	r2, {r0, r1}
   1a8c0:	stm	r3, {r0, r1}
   1a8c4:	ldr	r3, [pc, #428]	; 1aa78 <__assert_fail@plt+0x98b0>
   1a8c8:	ldr	r3, [r3]
   1a8cc:	lsl	r3, r3, #3
   1a8d0:	ldr	r2, [fp, #-16]
   1a8d4:	add	r0, r2, r3
   1a8d8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a8dc:	ldr	r3, [pc, #404]	; 1aa78 <__assert_fail@plt+0x98b0>
   1a8e0:	ldr	r3, [r3]
   1a8e4:	sub	r3, r2, r3
   1a8e8:	lsl	r3, r3, #3
   1a8ec:	mov	r2, r3
   1a8f0:	mov	r1, #0
   1a8f4:	bl	110b4 <memset@plt>
   1a8f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a8fc:	ldr	r2, [pc, #372]	; 1aa78 <__assert_fail@plt+0x98b0>
   1a900:	str	r3, [r2]
   1a904:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a908:	lsl	r3, r3, #3
   1a90c:	ldr	r2, [fp, #-16]
   1a910:	add	r3, r2, r3
   1a914:	ldr	r3, [r3]
   1a918:	str	r3, [fp, #-36]	; 0xffffffdc
   1a91c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a920:	lsl	r3, r3, #3
   1a924:	ldr	r2, [fp, #-16]
   1a928:	add	r3, r2, r3
   1a92c:	ldr	r3, [r3, #4]
   1a930:	str	r3, [fp, #-20]	; 0xffffffec
   1a934:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a938:	ldr	r3, [r3, #4]
   1a93c:	orr	r3, r3, #1
   1a940:	str	r3, [fp, #-40]	; 0xffffffd8
   1a944:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a948:	ldr	r3, [r3]
   1a94c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a950:	add	r2, r2, #8
   1a954:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a958:	ldr	r1, [r1, #40]	; 0x28
   1a95c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a960:	ldr	r0, [r0, #44]	; 0x2c
   1a964:	str	r0, [sp, #16]
   1a968:	str	r1, [sp, #12]
   1a96c:	str	r2, [sp, #8]
   1a970:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a974:	str	r2, [sp, #4]
   1a978:	str	r3, [sp]
   1a97c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a980:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1a984:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a988:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a98c:	bl	18dd0 <__assert_fail@plt+0x7c08>
   1a990:	str	r0, [fp, #-44]	; 0xffffffd4
   1a994:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a998:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a99c:	cmp	r2, r3
   1a9a0:	bhi	1aa54 <__assert_fail@plt+0x988c>
   1a9a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a9a8:	lsl	r3, r3, #3
   1a9ac:	ldr	r2, [fp, #-16]
   1a9b0:	add	r3, r2, r3
   1a9b4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1a9b8:	add	r2, r2, #1
   1a9bc:	str	r2, [fp, #-36]	; 0xffffffdc
   1a9c0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a9c4:	str	r2, [r3]
   1a9c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a9cc:	ldr	r2, [pc, #172]	; 1aa80 <__assert_fail@plt+0x98b8>
   1a9d0:	cmp	r3, r2
   1a9d4:	beq	1a9e0 <__assert_fail@plt+0x9818>
   1a9d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a9dc:	bl	1d358 <__assert_fail@plt+0xc190>
   1a9e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a9e4:	lsl	r3, r3, #3
   1a9e8:	ldr	r2, [fp, #-16]
   1a9ec:	add	r4, r2, r3
   1a9f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a9f4:	bl	1b948 <__assert_fail@plt+0xa780>
   1a9f8:	mov	r3, r0
   1a9fc:	str	r3, [fp, #-20]	; 0xffffffec
   1aa00:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa04:	str	r3, [r4, #4]
   1aa08:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1aa0c:	ldr	r3, [r3]
   1aa10:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1aa14:	add	r2, r2, #8
   1aa18:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1aa1c:	ldr	r1, [r1, #40]	; 0x28
   1aa20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1aa24:	ldr	r0, [r0, #44]	; 0x2c
   1aa28:	str	r0, [sp, #16]
   1aa2c:	str	r1, [sp, #12]
   1aa30:	str	r2, [sp, #8]
   1aa34:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1aa38:	str	r2, [sp, #4]
   1aa3c:	str	r3, [sp]
   1aa40:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1aa44:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1aa48:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1aa4c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1aa50:	bl	18dd0 <__assert_fail@plt+0x7c08>
   1aa54:	bl	1109c <__errno_location@plt>
   1aa58:	mov	r2, r0
   1aa5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aa60:	str	r3, [r2]
   1aa64:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa68:	mov	r0, r3
   1aa6c:	sub	sp, fp, #8
   1aa70:	pop	{r4, fp, pc}
   1aa74:	andeq	r0, r3, r4, lsr r1
   1aa78:	andeq	r0, r3, r8, lsr #2
   1aa7c:	andeq	r0, r3, ip, lsr #2
   1aa80:	andeq	r0, r3, r4, ror #3
   1aa84:	push	{fp, lr}
   1aa88:	add	fp, sp, #4
   1aa8c:	sub	sp, sp, #8
   1aa90:	str	r0, [fp, #-8]
   1aa94:	str	r1, [fp, #-12]
   1aa98:	ldr	r3, [pc, #28]	; 1aabc <__assert_fail@plt+0x98f4>
   1aa9c:	mvn	r2, #0
   1aaa0:	ldr	r1, [fp, #-12]
   1aaa4:	ldr	r0, [fp, #-8]
   1aaa8:	bl	1a7c0 <__assert_fail@plt+0x95f8>
   1aaac:	mov	r3, r0
   1aab0:	mov	r0, r3
   1aab4:	sub	sp, fp, #4
   1aab8:	pop	{fp, pc}
   1aabc:			; <UNDEFINED> instruction: 0x000301b4
   1aac0:	push	{fp, lr}
   1aac4:	add	fp, sp, #4
   1aac8:	sub	sp, sp, #16
   1aacc:	str	r0, [fp, #-8]
   1aad0:	str	r1, [fp, #-12]
   1aad4:	str	r2, [fp, #-16]
   1aad8:	ldr	r3, [pc, #28]	; 1aafc <__assert_fail@plt+0x9934>
   1aadc:	ldr	r2, [fp, #-16]
   1aae0:	ldr	r1, [fp, #-12]
   1aae4:	ldr	r0, [fp, #-8]
   1aae8:	bl	1a7c0 <__assert_fail@plt+0x95f8>
   1aaec:	mov	r3, r0
   1aaf0:	mov	r0, r3
   1aaf4:	sub	sp, fp, #4
   1aaf8:	pop	{fp, pc}
   1aafc:			; <UNDEFINED> instruction: 0x000301b4
   1ab00:	push	{fp, lr}
   1ab04:	add	fp, sp, #4
   1ab08:	sub	sp, sp, #8
   1ab0c:	str	r0, [fp, #-8]
   1ab10:	ldr	r1, [fp, #-8]
   1ab14:	mov	r0, #0
   1ab18:	bl	1aa84 <__assert_fail@plt+0x98bc>
   1ab1c:	mov	r3, r0
   1ab20:	mov	r0, r3
   1ab24:	sub	sp, fp, #4
   1ab28:	pop	{fp, pc}
   1ab2c:	push	{fp, lr}
   1ab30:	add	fp, sp, #4
   1ab34:	sub	sp, sp, #8
   1ab38:	str	r0, [fp, #-8]
   1ab3c:	str	r1, [fp, #-12]
   1ab40:	ldr	r2, [fp, #-12]
   1ab44:	ldr	r1, [fp, #-8]
   1ab48:	mov	r0, #0
   1ab4c:	bl	1aac0 <__assert_fail@plt+0x98f8>
   1ab50:	mov	r3, r0
   1ab54:	mov	r0, r3
   1ab58:	sub	sp, fp, #4
   1ab5c:	pop	{fp, pc}
   1ab60:	push	{fp, lr}
   1ab64:	add	fp, sp, #4
   1ab68:	sub	sp, sp, #64	; 0x40
   1ab6c:	str	r0, [fp, #-56]	; 0xffffffc8
   1ab70:	str	r1, [fp, #-60]	; 0xffffffc4
   1ab74:	str	r2, [fp, #-64]	; 0xffffffc0
   1ab78:	sub	r3, fp, #52	; 0x34
   1ab7c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ab80:	mov	r0, r3
   1ab84:	bl	18c6c <__assert_fail@plt+0x7aa4>
   1ab88:	sub	r3, fp, #52	; 0x34
   1ab8c:	mvn	r2, #0
   1ab90:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1ab94:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ab98:	bl	1a7c0 <__assert_fail@plt+0x95f8>
   1ab9c:	mov	r3, r0
   1aba0:	mov	r0, r3
   1aba4:	sub	sp, fp, #4
   1aba8:	pop	{fp, pc}
   1abac:	push	{fp, lr}
   1abb0:	add	fp, sp, #4
   1abb4:	sub	sp, sp, #64	; 0x40
   1abb8:	str	r0, [fp, #-56]	; 0xffffffc8
   1abbc:	str	r1, [fp, #-60]	; 0xffffffc4
   1abc0:	str	r2, [fp, #-64]	; 0xffffffc0
   1abc4:	str	r3, [fp, #-68]	; 0xffffffbc
   1abc8:	sub	r3, fp, #52	; 0x34
   1abcc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1abd0:	mov	r0, r3
   1abd4:	bl	18c6c <__assert_fail@plt+0x7aa4>
   1abd8:	sub	r3, fp, #52	; 0x34
   1abdc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1abe0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1abe4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1abe8:	bl	1a7c0 <__assert_fail@plt+0x95f8>
   1abec:	mov	r3, r0
   1abf0:	mov	r0, r3
   1abf4:	sub	sp, fp, #4
   1abf8:	pop	{fp, pc}
   1abfc:	push	{fp, lr}
   1ac00:	add	fp, sp, #4
   1ac04:	sub	sp, sp, #8
   1ac08:	str	r0, [fp, #-8]
   1ac0c:	str	r1, [fp, #-12]
   1ac10:	ldr	r2, [fp, #-12]
   1ac14:	ldr	r1, [fp, #-8]
   1ac18:	mov	r0, #0
   1ac1c:	bl	1ab60 <__assert_fail@plt+0x9998>
   1ac20:	mov	r3, r0
   1ac24:	mov	r0, r3
   1ac28:	sub	sp, fp, #4
   1ac2c:	pop	{fp, pc}
   1ac30:	push	{fp, lr}
   1ac34:	add	fp, sp, #4
   1ac38:	sub	sp, sp, #16
   1ac3c:	str	r0, [fp, #-8]
   1ac40:	str	r1, [fp, #-12]
   1ac44:	str	r2, [fp, #-16]
   1ac48:	ldr	r3, [fp, #-16]
   1ac4c:	ldr	r2, [fp, #-12]
   1ac50:	ldr	r1, [fp, #-8]
   1ac54:	mov	r0, #0
   1ac58:	bl	1abac <__assert_fail@plt+0x99e4>
   1ac5c:	mov	r3, r0
   1ac60:	mov	r0, r3
   1ac64:	sub	sp, fp, #4
   1ac68:	pop	{fp, pc}
   1ac6c:	push	{fp, lr}
   1ac70:	add	fp, sp, #4
   1ac74:	sub	sp, sp, #64	; 0x40
   1ac78:	str	r0, [fp, #-56]	; 0xffffffc8
   1ac7c:	str	r1, [fp, #-60]	; 0xffffffc4
   1ac80:	mov	r3, r2
   1ac84:	strb	r3, [fp, #-61]	; 0xffffffc3
   1ac88:	ldr	r3, [pc, #84]	; 1ace4 <__assert_fail@plt+0x9b1c>
   1ac8c:	sub	ip, fp, #52	; 0x34
   1ac90:	mov	lr, r3
   1ac94:	ldm	lr!, {r0, r1, r2, r3}
   1ac98:	stmia	ip!, {r0, r1, r2, r3}
   1ac9c:	ldm	lr!, {r0, r1, r2, r3}
   1aca0:	stmia	ip!, {r0, r1, r2, r3}
   1aca4:	ldm	lr, {r0, r1, r2, r3}
   1aca8:	stm	ip, {r0, r1, r2, r3}
   1acac:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   1acb0:	sub	r3, fp, #52	; 0x34
   1acb4:	mov	r2, #1
   1acb8:	mov	r0, r3
   1acbc:	bl	18ad8 <__assert_fail@plt+0x7910>
   1acc0:	sub	r3, fp, #52	; 0x34
   1acc4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1acc8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1accc:	mov	r0, #0
   1acd0:	bl	1a7c0 <__assert_fail@plt+0x95f8>
   1acd4:	mov	r3, r0
   1acd8:	mov	r0, r3
   1acdc:	sub	sp, fp, #4
   1ace0:	pop	{fp, pc}
   1ace4:			; <UNDEFINED> instruction: 0x000301b4
   1ace8:	push	{fp, lr}
   1acec:	add	fp, sp, #4
   1acf0:	sub	sp, sp, #8
   1acf4:	str	r0, [fp, #-8]
   1acf8:	mov	r3, r1
   1acfc:	strb	r3, [fp, #-9]
   1ad00:	ldrb	r3, [fp, #-9]
   1ad04:	mov	r2, r3
   1ad08:	mvn	r1, #0
   1ad0c:	ldr	r0, [fp, #-8]
   1ad10:	bl	1ac6c <__assert_fail@plt+0x9aa4>
   1ad14:	mov	r3, r0
   1ad18:	mov	r0, r3
   1ad1c:	sub	sp, fp, #4
   1ad20:	pop	{fp, pc}
   1ad24:	push	{fp, lr}
   1ad28:	add	fp, sp, #4
   1ad2c:	sub	sp, sp, #8
   1ad30:	str	r0, [fp, #-8]
   1ad34:	mov	r1, #58	; 0x3a
   1ad38:	ldr	r0, [fp, #-8]
   1ad3c:	bl	1ace8 <__assert_fail@plt+0x9b20>
   1ad40:	mov	r3, r0
   1ad44:	mov	r0, r3
   1ad48:	sub	sp, fp, #4
   1ad4c:	pop	{fp, pc}
   1ad50:	push	{fp, lr}
   1ad54:	add	fp, sp, #4
   1ad58:	sub	sp, sp, #8
   1ad5c:	str	r0, [fp, #-8]
   1ad60:	str	r1, [fp, #-12]
   1ad64:	mov	r2, #58	; 0x3a
   1ad68:	ldr	r1, [fp, #-12]
   1ad6c:	ldr	r0, [fp, #-8]
   1ad70:	bl	1ac6c <__assert_fail@plt+0x9aa4>
   1ad74:	mov	r3, r0
   1ad78:	mov	r0, r3
   1ad7c:	sub	sp, fp, #4
   1ad80:	pop	{fp, pc}
   1ad84:	push	{fp, lr}
   1ad88:	add	fp, sp, #4
   1ad8c:	sub	sp, sp, #112	; 0x70
   1ad90:	str	r0, [fp, #-56]	; 0xffffffc8
   1ad94:	str	r1, [fp, #-60]	; 0xffffffc4
   1ad98:	str	r2, [fp, #-64]	; 0xffffffc0
   1ad9c:	sub	r3, fp, #116	; 0x74
   1ada0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ada4:	mov	r0, r3
   1ada8:	bl	18c6c <__assert_fail@plt+0x7aa4>
   1adac:	sub	ip, fp, #52	; 0x34
   1adb0:	sub	lr, fp, #116	; 0x74
   1adb4:	ldm	lr!, {r0, r1, r2, r3}
   1adb8:	stmia	ip!, {r0, r1, r2, r3}
   1adbc:	ldm	lr!, {r0, r1, r2, r3}
   1adc0:	stmia	ip!, {r0, r1, r2, r3}
   1adc4:	ldm	lr, {r0, r1, r2, r3}
   1adc8:	stm	ip, {r0, r1, r2, r3}
   1adcc:	sub	r3, fp, #52	; 0x34
   1add0:	mov	r2, #1
   1add4:	mov	r1, #58	; 0x3a
   1add8:	mov	r0, r3
   1addc:	bl	18ad8 <__assert_fail@plt+0x7910>
   1ade0:	sub	r3, fp, #52	; 0x34
   1ade4:	mvn	r2, #0
   1ade8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1adec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1adf0:	bl	1a7c0 <__assert_fail@plt+0x95f8>
   1adf4:	mov	r3, r0
   1adf8:	mov	r0, r3
   1adfc:	sub	sp, fp, #4
   1ae00:	pop	{fp, pc}
   1ae04:	push	{fp, lr}
   1ae08:	add	fp, sp, #4
   1ae0c:	sub	sp, sp, #24
   1ae10:	str	r0, [fp, #-8]
   1ae14:	str	r1, [fp, #-12]
   1ae18:	str	r2, [fp, #-16]
   1ae1c:	str	r3, [fp, #-20]	; 0xffffffec
   1ae20:	mvn	r3, #0
   1ae24:	str	r3, [sp]
   1ae28:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ae2c:	ldr	r2, [fp, #-16]
   1ae30:	ldr	r1, [fp, #-12]
   1ae34:	ldr	r0, [fp, #-8]
   1ae38:	bl	1ae4c <__assert_fail@plt+0x9c84>
   1ae3c:	mov	r3, r0
   1ae40:	mov	r0, r3
   1ae44:	sub	sp, fp, #4
   1ae48:	pop	{fp, pc}
   1ae4c:	push	{fp, lr}
   1ae50:	add	fp, sp, #4
   1ae54:	sub	sp, sp, #64	; 0x40
   1ae58:	str	r0, [fp, #-56]	; 0xffffffc8
   1ae5c:	str	r1, [fp, #-60]	; 0xffffffc4
   1ae60:	str	r2, [fp, #-64]	; 0xffffffc0
   1ae64:	str	r3, [fp, #-68]	; 0xffffffbc
   1ae68:	ldr	r3, [pc, #84]	; 1aec4 <__assert_fail@plt+0x9cfc>
   1ae6c:	sub	ip, fp, #52	; 0x34
   1ae70:	mov	lr, r3
   1ae74:	ldm	lr!, {r0, r1, r2, r3}
   1ae78:	stmia	ip!, {r0, r1, r2, r3}
   1ae7c:	ldm	lr!, {r0, r1, r2, r3}
   1ae80:	stmia	ip!, {r0, r1, r2, r3}
   1ae84:	ldm	lr, {r0, r1, r2, r3}
   1ae88:	stm	ip, {r0, r1, r2, r3}
   1ae8c:	sub	r3, fp, #52	; 0x34
   1ae90:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1ae94:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1ae98:	mov	r0, r3
   1ae9c:	bl	18bf0 <__assert_fail@plt+0x7a28>
   1aea0:	sub	r3, fp, #52	; 0x34
   1aea4:	ldr	r2, [fp, #4]
   1aea8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1aeac:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1aeb0:	bl	1a7c0 <__assert_fail@plt+0x95f8>
   1aeb4:	mov	r3, r0
   1aeb8:	mov	r0, r3
   1aebc:	sub	sp, fp, #4
   1aec0:	pop	{fp, pc}
   1aec4:			; <UNDEFINED> instruction: 0x000301b4
   1aec8:	push	{fp, lr}
   1aecc:	add	fp, sp, #4
   1aed0:	sub	sp, sp, #16
   1aed4:	str	r0, [fp, #-8]
   1aed8:	str	r1, [fp, #-12]
   1aedc:	str	r2, [fp, #-16]
   1aee0:	ldr	r3, [fp, #-16]
   1aee4:	ldr	r2, [fp, #-12]
   1aee8:	ldr	r1, [fp, #-8]
   1aeec:	mov	r0, #0
   1aef0:	bl	1ae04 <__assert_fail@plt+0x9c3c>
   1aef4:	mov	r3, r0
   1aef8:	mov	r0, r3
   1aefc:	sub	sp, fp, #4
   1af00:	pop	{fp, pc}
   1af04:	push	{fp, lr}
   1af08:	add	fp, sp, #4
   1af0c:	sub	sp, sp, #24
   1af10:	str	r0, [fp, #-8]
   1af14:	str	r1, [fp, #-12]
   1af18:	str	r2, [fp, #-16]
   1af1c:	str	r3, [fp, #-20]	; 0xffffffec
   1af20:	ldr	r3, [fp, #-20]	; 0xffffffec
   1af24:	str	r3, [sp]
   1af28:	ldr	r3, [fp, #-16]
   1af2c:	ldr	r2, [fp, #-12]
   1af30:	ldr	r1, [fp, #-8]
   1af34:	mov	r0, #0
   1af38:	bl	1ae4c <__assert_fail@plt+0x9c84>
   1af3c:	mov	r3, r0
   1af40:	mov	r0, r3
   1af44:	sub	sp, fp, #4
   1af48:	pop	{fp, pc}
   1af4c:	push	{fp, lr}
   1af50:	add	fp, sp, #4
   1af54:	sub	sp, sp, #16
   1af58:	str	r0, [fp, #-8]
   1af5c:	str	r1, [fp, #-12]
   1af60:	str	r2, [fp, #-16]
   1af64:	ldr	r3, [pc, #28]	; 1af88 <__assert_fail@plt+0x9dc0>
   1af68:	ldr	r2, [fp, #-16]
   1af6c:	ldr	r1, [fp, #-12]
   1af70:	ldr	r0, [fp, #-8]
   1af74:	bl	1a7c0 <__assert_fail@plt+0x95f8>
   1af78:	mov	r3, r0
   1af7c:	mov	r0, r3
   1af80:	sub	sp, fp, #4
   1af84:	pop	{fp, pc}
   1af88:	andeq	r0, r3, r8, lsr r1
   1af8c:	push	{fp, lr}
   1af90:	add	fp, sp, #4
   1af94:	sub	sp, sp, #8
   1af98:	str	r0, [fp, #-8]
   1af9c:	str	r1, [fp, #-12]
   1afa0:	ldr	r2, [fp, #-12]
   1afa4:	ldr	r1, [fp, #-8]
   1afa8:	mov	r0, #0
   1afac:	bl	1af4c <__assert_fail@plt+0x9d84>
   1afb0:	mov	r3, r0
   1afb4:	mov	r0, r3
   1afb8:	sub	sp, fp, #4
   1afbc:	pop	{fp, pc}
   1afc0:	push	{fp, lr}
   1afc4:	add	fp, sp, #4
   1afc8:	sub	sp, sp, #8
   1afcc:	str	r0, [fp, #-8]
   1afd0:	str	r1, [fp, #-12]
   1afd4:	mvn	r2, #0
   1afd8:	ldr	r1, [fp, #-12]
   1afdc:	ldr	r0, [fp, #-8]
   1afe0:	bl	1af4c <__assert_fail@plt+0x9d84>
   1afe4:	mov	r3, r0
   1afe8:	mov	r0, r3
   1afec:	sub	sp, fp, #4
   1aff0:	pop	{fp, pc}
   1aff4:	push	{fp, lr}
   1aff8:	add	fp, sp, #4
   1affc:	sub	sp, sp, #8
   1b000:	str	r0, [fp, #-8]
   1b004:	ldr	r1, [fp, #-8]
   1b008:	mov	r0, #0
   1b00c:	bl	1afc0 <__assert_fail@plt+0x9df8>
   1b010:	mov	r3, r0
   1b014:	mov	r0, r3
   1b018:	sub	sp, fp, #4
   1b01c:	pop	{fp, pc}
   1b020:	push	{fp, lr}
   1b024:	add	fp, sp, #4
   1b028:	sub	sp, sp, #112	; 0x70
   1b02c:	str	r0, [fp, #-112]	; 0xffffff90
   1b030:	sub	r3, fp, #108	; 0x6c
   1b034:	mov	r1, r3
   1b038:	ldr	r0, [pc, #60]	; 1b07c <__assert_fail@plt+0x9eb4>
   1b03c:	bl	1e540 <__assert_fail@plt+0xd378>
   1b040:	mov	r3, r0
   1b044:	cmp	r3, #0
   1b048:	beq	1b054 <__assert_fail@plt+0x9e8c>
   1b04c:	mov	r3, #0
   1b050:	b	1b070 <__assert_fail@plt+0x9ea8>
   1b054:	ldrd	r2, [fp, #-12]
   1b058:	ldr	r1, [fp, #-112]	; 0xffffff90
   1b05c:	strd	r2, [r1]
   1b060:	ldrd	r2, [fp, #-108]	; 0xffffff94
   1b064:	ldr	r1, [fp, #-112]	; 0xffffff90
   1b068:	strd	r2, [r1, #8]
   1b06c:	ldr	r3, [fp, #-112]	; 0xffffff90
   1b070:	mov	r0, r3
   1b074:	sub	sp, fp, #4
   1b078:	pop	{fp, pc}
   1b07c:	andeq	pc, r1, r0, lsr #4
   1b080:	push	{fp, lr}
   1b084:	add	fp, sp, #4
   1b088:	sub	sp, sp, #16
   1b08c:	str	r0, [fp, #-16]
   1b090:	ldr	r3, [fp, #-16]
   1b094:	cmp	r3, #0
   1b098:	blt	1b0e4 <__assert_fail@plt+0x9f1c>
   1b09c:	ldr	r3, [fp, #-16]
   1b0a0:	cmp	r3, #2
   1b0a4:	bgt	1b0e4 <__assert_fail@plt+0x9f1c>
   1b0a8:	ldr	r0, [fp, #-16]
   1b0ac:	bl	1d7bc <__assert_fail@plt+0xc5f4>
   1b0b0:	str	r0, [fp, #-8]
   1b0b4:	bl	1109c <__errno_location@plt>
   1b0b8:	mov	r3, r0
   1b0bc:	ldr	r3, [r3]
   1b0c0:	str	r3, [fp, #-12]
   1b0c4:	ldr	r0, [fp, #-16]
   1b0c8:	bl	111a4 <close@plt>
   1b0cc:	bl	1109c <__errno_location@plt>
   1b0d0:	mov	r2, r0
   1b0d4:	ldr	r3, [fp, #-12]
   1b0d8:	str	r3, [r2]
   1b0dc:	ldr	r3, [fp, #-8]
   1b0e0:	str	r3, [fp, #-16]
   1b0e4:	ldr	r3, [fp, #-16]
   1b0e8:	mov	r0, r3
   1b0ec:	sub	sp, fp, #4
   1b0f0:	pop	{fp, pc}
   1b0f4:	push	{r4, r5, r6, r7, fp, lr}
   1b0f8:	add	fp, sp, #20
   1b0fc:	sub	sp, sp, #48	; 0x30
   1b100:	str	r0, [fp, #-24]	; 0xffffffe8
   1b104:	str	r1, [fp, #-28]	; 0xffffffe4
   1b108:	str	r2, [fp, #-32]	; 0xffffffe0
   1b10c:	str	r3, [fp, #-36]	; 0xffffffdc
   1b110:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b114:	cmp	r3, #0
   1b118:	beq	1b13c <__assert_fail@plt+0x9f74>
   1b11c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b120:	str	r3, [sp]
   1b124:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b128:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b12c:	ldr	r1, [pc, #1260]	; 1b620 <__assert_fail@plt+0xa458>
   1b130:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b134:	bl	11084 <fprintf@plt>
   1b138:	b	1b150 <__assert_fail@plt+0x9f88>
   1b13c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b140:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b144:	ldr	r1, [pc, #1240]	; 1b624 <__assert_fail@plt+0xa45c>
   1b148:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b14c:	bl	11084 <fprintf@plt>
   1b150:	ldr	r0, [pc, #1232]	; 1b628 <__assert_fail@plt+0xa460>
   1b154:	bl	11060 <gettext@plt>
   1b158:	mov	r2, r0
   1b15c:	ldr	r3, [pc, #1224]	; 1b62c <__assert_fail@plt+0xa464>
   1b160:	ldr	r1, [pc, #1224]	; 1b630 <__assert_fail@plt+0xa468>
   1b164:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b168:	bl	11084 <fprintf@plt>
   1b16c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b170:	mov	r0, #10
   1b174:	bl	10f64 <fputc_unlocked@plt>
   1b178:	ldr	r0, [pc, #1204]	; 1b634 <__assert_fail@plt+0xa46c>
   1b17c:	bl	11060 <gettext@plt>
   1b180:	mov	r3, r0
   1b184:	ldr	r2, [pc, #1196]	; 1b638 <__assert_fail@plt+0xa470>
   1b188:	mov	r1, r3
   1b18c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b190:	bl	11084 <fprintf@plt>
   1b194:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b198:	mov	r0, #10
   1b19c:	bl	10f64 <fputc_unlocked@plt>
   1b1a0:	ldr	r3, [fp, #8]
   1b1a4:	cmp	r3, #9
   1b1a8:	ldrls	pc, [pc, r3, lsl #2]
   1b1ac:	b	1b568 <__assert_fail@plt+0xa3a0>
   1b1b0:	andeq	fp, r1, r0, lsl r6
   1b1b4:	ldrdeq	fp, [r1], -r8
   1b1b8:	strdeq	fp, [r1], -ip
   1b1bc:	andeq	fp, r1, r8, lsr #4
   1b1c0:	andeq	fp, r1, r8, ror #4
   1b1c4:	andeq	fp, r1, r0, asr #5
   1b1c8:	andeq	fp, r1, r8, lsr #6
   1b1cc:	andeq	fp, r1, r0, lsr #7
   1b1d0:	andeq	fp, r1, r8, lsr #8
   1b1d4:	andeq	fp, r1, r0, asr #9
   1b1d8:	ldr	r0, [pc, #1116]	; 1b63c <__assert_fail@plt+0xa474>
   1b1dc:	bl	11060 <gettext@plt>
   1b1e0:	mov	r1, r0
   1b1e4:	ldr	r3, [fp, #4]
   1b1e8:	ldr	r3, [r3]
   1b1ec:	mov	r2, r3
   1b1f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b1f4:	bl	11084 <fprintf@plt>
   1b1f8:	b	1b614 <__assert_fail@plt+0xa44c>
   1b1fc:	ldr	r0, [pc, #1084]	; 1b640 <__assert_fail@plt+0xa478>
   1b200:	bl	11060 <gettext@plt>
   1b204:	mov	r1, r0
   1b208:	ldr	r3, [fp, #4]
   1b20c:	ldr	r2, [r3]
   1b210:	ldr	r3, [fp, #4]
   1b214:	add	r3, r3, #4
   1b218:	ldr	r3, [r3]
   1b21c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b220:	bl	11084 <fprintf@plt>
   1b224:	b	1b614 <__assert_fail@plt+0xa44c>
   1b228:	ldr	r0, [pc, #1044]	; 1b644 <__assert_fail@plt+0xa47c>
   1b22c:	bl	11060 <gettext@plt>
   1b230:	ldr	r3, [fp, #4]
   1b234:	ldr	r2, [r3]
   1b238:	ldr	r3, [fp, #4]
   1b23c:	add	r3, r3, #4
   1b240:	ldr	r1, [r3]
   1b244:	ldr	r3, [fp, #4]
   1b248:	add	r3, r3, #8
   1b24c:	ldr	r3, [r3]
   1b250:	str	r3, [sp]
   1b254:	mov	r3, r1
   1b258:	mov	r1, r0
   1b25c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b260:	bl	11084 <fprintf@plt>
   1b264:	b	1b614 <__assert_fail@plt+0xa44c>
   1b268:	ldr	r0, [pc, #984]	; 1b648 <__assert_fail@plt+0xa480>
   1b26c:	bl	11060 <gettext@plt>
   1b270:	mov	ip, r0
   1b274:	ldr	r3, [fp, #4]
   1b278:	ldr	r1, [r3]
   1b27c:	ldr	r3, [fp, #4]
   1b280:	add	r3, r3, #4
   1b284:	ldr	r0, [r3]
   1b288:	ldr	r3, [fp, #4]
   1b28c:	add	r3, r3, #8
   1b290:	ldr	r3, [r3]
   1b294:	ldr	r2, [fp, #4]
   1b298:	add	r2, r2, #12
   1b29c:	ldr	r2, [r2]
   1b2a0:	str	r2, [sp, #4]
   1b2a4:	str	r3, [sp]
   1b2a8:	mov	r3, r0
   1b2ac:	mov	r2, r1
   1b2b0:	mov	r1, ip
   1b2b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b2b8:	bl	11084 <fprintf@plt>
   1b2bc:	b	1b614 <__assert_fail@plt+0xa44c>
   1b2c0:	ldr	r0, [pc, #900]	; 1b64c <__assert_fail@plt+0xa484>
   1b2c4:	bl	11060 <gettext@plt>
   1b2c8:	mov	lr, r0
   1b2cc:	ldr	r3, [fp, #4]
   1b2d0:	ldr	r0, [r3]
   1b2d4:	ldr	r3, [fp, #4]
   1b2d8:	add	r3, r3, #4
   1b2dc:	ldr	ip, [r3]
   1b2e0:	ldr	r3, [fp, #4]
   1b2e4:	add	r3, r3, #8
   1b2e8:	ldr	r3, [r3]
   1b2ec:	ldr	r2, [fp, #4]
   1b2f0:	add	r2, r2, #12
   1b2f4:	ldr	r2, [r2]
   1b2f8:	ldr	r1, [fp, #4]
   1b2fc:	add	r1, r1, #16
   1b300:	ldr	r1, [r1]
   1b304:	str	r1, [sp, #8]
   1b308:	str	r2, [sp, #4]
   1b30c:	str	r3, [sp]
   1b310:	mov	r3, ip
   1b314:	mov	r2, r0
   1b318:	mov	r1, lr
   1b31c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b320:	bl	11084 <fprintf@plt>
   1b324:	b	1b614 <__assert_fail@plt+0xa44c>
   1b328:	ldr	r0, [pc, #800]	; 1b650 <__assert_fail@plt+0xa488>
   1b32c:	bl	11060 <gettext@plt>
   1b330:	mov	r4, r0
   1b334:	ldr	r3, [fp, #4]
   1b338:	ldr	ip, [r3]
   1b33c:	ldr	r3, [fp, #4]
   1b340:	add	r3, r3, #4
   1b344:	ldr	lr, [r3]
   1b348:	ldr	r3, [fp, #4]
   1b34c:	add	r3, r3, #8
   1b350:	ldr	r3, [r3]
   1b354:	ldr	r2, [fp, #4]
   1b358:	add	r2, r2, #12
   1b35c:	ldr	r2, [r2]
   1b360:	ldr	r1, [fp, #4]
   1b364:	add	r1, r1, #16
   1b368:	ldr	r1, [r1]
   1b36c:	ldr	r0, [fp, #4]
   1b370:	add	r0, r0, #20
   1b374:	ldr	r0, [r0]
   1b378:	str	r0, [sp, #12]
   1b37c:	str	r1, [sp, #8]
   1b380:	str	r2, [sp, #4]
   1b384:	str	r3, [sp]
   1b388:	mov	r3, lr
   1b38c:	mov	r2, ip
   1b390:	mov	r1, r4
   1b394:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b398:	bl	11084 <fprintf@plt>
   1b39c:	b	1b614 <__assert_fail@plt+0xa44c>
   1b3a0:	ldr	r0, [pc, #684]	; 1b654 <__assert_fail@plt+0xa48c>
   1b3a4:	bl	11060 <gettext@plt>
   1b3a8:	mov	r5, r0
   1b3ac:	ldr	r3, [fp, #4]
   1b3b0:	ldr	lr, [r3]
   1b3b4:	ldr	r3, [fp, #4]
   1b3b8:	add	r3, r3, #4
   1b3bc:	ldr	r4, [r3]
   1b3c0:	ldr	r3, [fp, #4]
   1b3c4:	add	r3, r3, #8
   1b3c8:	ldr	r3, [r3]
   1b3cc:	ldr	r2, [fp, #4]
   1b3d0:	add	r2, r2, #12
   1b3d4:	ldr	r2, [r2]
   1b3d8:	ldr	r1, [fp, #4]
   1b3dc:	add	r1, r1, #16
   1b3e0:	ldr	r1, [r1]
   1b3e4:	ldr	r0, [fp, #4]
   1b3e8:	add	r0, r0, #20
   1b3ec:	ldr	r0, [r0]
   1b3f0:	ldr	ip, [fp, #4]
   1b3f4:	add	ip, ip, #24
   1b3f8:	ldr	ip, [ip]
   1b3fc:	str	ip, [sp, #16]
   1b400:	str	r0, [sp, #12]
   1b404:	str	r1, [sp, #8]
   1b408:	str	r2, [sp, #4]
   1b40c:	str	r3, [sp]
   1b410:	mov	r3, r4
   1b414:	mov	r2, lr
   1b418:	mov	r1, r5
   1b41c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b420:	bl	11084 <fprintf@plt>
   1b424:	b	1b614 <__assert_fail@plt+0xa44c>
   1b428:	ldr	r0, [pc, #552]	; 1b658 <__assert_fail@plt+0xa490>
   1b42c:	bl	11060 <gettext@plt>
   1b430:	mov	r6, r0
   1b434:	ldr	r3, [fp, #4]
   1b438:	ldr	r4, [r3]
   1b43c:	ldr	r3, [fp, #4]
   1b440:	add	r3, r3, #4
   1b444:	ldr	r5, [r3]
   1b448:	ldr	r3, [fp, #4]
   1b44c:	add	r3, r3, #8
   1b450:	ldr	r3, [r3]
   1b454:	ldr	r2, [fp, #4]
   1b458:	add	r2, r2, #12
   1b45c:	ldr	r2, [r2]
   1b460:	ldr	r1, [fp, #4]
   1b464:	add	r1, r1, #16
   1b468:	ldr	r1, [r1]
   1b46c:	ldr	r0, [fp, #4]
   1b470:	add	r0, r0, #20
   1b474:	ldr	r0, [r0]
   1b478:	ldr	ip, [fp, #4]
   1b47c:	add	ip, ip, #24
   1b480:	ldr	ip, [ip]
   1b484:	ldr	lr, [fp, #4]
   1b488:	add	lr, lr, #28
   1b48c:	ldr	lr, [lr]
   1b490:	str	lr, [sp, #20]
   1b494:	str	ip, [sp, #16]
   1b498:	str	r0, [sp, #12]
   1b49c:	str	r1, [sp, #8]
   1b4a0:	str	r2, [sp, #4]
   1b4a4:	str	r3, [sp]
   1b4a8:	mov	r3, r5
   1b4ac:	mov	r2, r4
   1b4b0:	mov	r1, r6
   1b4b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b4b8:	bl	11084 <fprintf@plt>
   1b4bc:	b	1b614 <__assert_fail@plt+0xa44c>
   1b4c0:	ldr	r0, [pc, #404]	; 1b65c <__assert_fail@plt+0xa494>
   1b4c4:	bl	11060 <gettext@plt>
   1b4c8:	mov	r7, r0
   1b4cc:	ldr	r3, [fp, #4]
   1b4d0:	ldr	r5, [r3]
   1b4d4:	ldr	r3, [fp, #4]
   1b4d8:	add	r3, r3, #4
   1b4dc:	ldr	r6, [r3]
   1b4e0:	ldr	r3, [fp, #4]
   1b4e4:	add	r3, r3, #8
   1b4e8:	ldr	r3, [r3]
   1b4ec:	ldr	r2, [fp, #4]
   1b4f0:	add	r2, r2, #12
   1b4f4:	ldr	r2, [r2]
   1b4f8:	ldr	r1, [fp, #4]
   1b4fc:	add	r1, r1, #16
   1b500:	ldr	r1, [r1]
   1b504:	ldr	r0, [fp, #4]
   1b508:	add	r0, r0, #20
   1b50c:	ldr	r0, [r0]
   1b510:	ldr	ip, [fp, #4]
   1b514:	add	ip, ip, #24
   1b518:	ldr	ip, [ip]
   1b51c:	ldr	lr, [fp, #4]
   1b520:	add	lr, lr, #28
   1b524:	ldr	lr, [lr]
   1b528:	ldr	r4, [fp, #4]
   1b52c:	add	r4, r4, #32
   1b530:	ldr	r4, [r4]
   1b534:	str	r4, [sp, #24]
   1b538:	str	lr, [sp, #20]
   1b53c:	str	ip, [sp, #16]
   1b540:	str	r0, [sp, #12]
   1b544:	str	r1, [sp, #8]
   1b548:	str	r2, [sp, #4]
   1b54c:	str	r3, [sp]
   1b550:	mov	r3, r6
   1b554:	mov	r2, r5
   1b558:	mov	r1, r7
   1b55c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b560:	bl	11084 <fprintf@plt>
   1b564:	b	1b614 <__assert_fail@plt+0xa44c>
   1b568:	ldr	r0, [pc, #240]	; 1b660 <__assert_fail@plt+0xa498>
   1b56c:	bl	11060 <gettext@plt>
   1b570:	mov	r7, r0
   1b574:	ldr	r3, [fp, #4]
   1b578:	ldr	r5, [r3]
   1b57c:	ldr	r3, [fp, #4]
   1b580:	add	r3, r3, #4
   1b584:	ldr	r6, [r3]
   1b588:	ldr	r3, [fp, #4]
   1b58c:	add	r3, r3, #8
   1b590:	ldr	r3, [r3]
   1b594:	ldr	r2, [fp, #4]
   1b598:	add	r2, r2, #12
   1b59c:	ldr	r2, [r2]
   1b5a0:	ldr	r1, [fp, #4]
   1b5a4:	add	r1, r1, #16
   1b5a8:	ldr	r1, [r1]
   1b5ac:	ldr	r0, [fp, #4]
   1b5b0:	add	r0, r0, #20
   1b5b4:	ldr	r0, [r0]
   1b5b8:	ldr	ip, [fp, #4]
   1b5bc:	add	ip, ip, #24
   1b5c0:	ldr	ip, [ip]
   1b5c4:	ldr	lr, [fp, #4]
   1b5c8:	add	lr, lr, #28
   1b5cc:	ldr	lr, [lr]
   1b5d0:	ldr	r4, [fp, #4]
   1b5d4:	add	r4, r4, #32
   1b5d8:	ldr	r4, [r4]
   1b5dc:	str	r4, [sp, #24]
   1b5e0:	str	lr, [sp, #20]
   1b5e4:	str	ip, [sp, #16]
   1b5e8:	str	r0, [sp, #12]
   1b5ec:	str	r1, [sp, #8]
   1b5f0:	str	r2, [sp, #4]
   1b5f4:	str	r3, [sp]
   1b5f8:	mov	r3, r6
   1b5fc:	mov	r2, r5
   1b600:	mov	r1, r7
   1b604:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b608:	bl	11084 <fprintf@plt>
   1b60c:	b	1b614 <__assert_fail@plt+0xa44c>
   1b610:	nop			; (mov r0, r0)
   1b614:	nop			; (mov r0, r0)
   1b618:	sub	sp, fp, #20
   1b61c:	pop	{r4, r5, r6, r7, fp, pc}
   1b620:	andeq	pc, r1, r4, lsr #4
   1b624:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   1b628:	andeq	pc, r1, r8, lsr r2	; <UNPREDICTABLE>
   1b62c:	andeq	r0, r0, r6, ror #15
   1b630:	andeq	pc, r1, r8, asr #10
   1b634:	andeq	pc, r1, ip, lsr r2	; <UNPREDICTABLE>
   1b638:	andeq	pc, r1, r8, ror #5
   1b63c:	andeq	pc, r1, ip, lsl #6
   1b640:	andeq	pc, r1, ip, lsl r3	; <UNPREDICTABLE>
   1b644:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1b648:	andeq	pc, r1, r0, asr r3	; <UNPREDICTABLE>
   1b64c:	andeq	pc, r1, r0, ror r3	; <UNPREDICTABLE>
   1b650:	muleq	r1, r4, r3
   1b654:			; <UNDEFINED> instruction: 0x0001f3bc
   1b658:	andeq	pc, r1, r8, ror #7
   1b65c:	andeq	pc, r1, r8, lsl r4	; <UNPREDICTABLE>
   1b660:	andeq	pc, r1, ip, asr #8
   1b664:	push	{fp, lr}
   1b668:	add	fp, sp, #4
   1b66c:	sub	sp, sp, #32
   1b670:	str	r0, [fp, #-16]
   1b674:	str	r1, [fp, #-20]	; 0xffffffec
   1b678:	str	r2, [fp, #-24]	; 0xffffffe8
   1b67c:	str	r3, [fp, #-28]	; 0xffffffe4
   1b680:	mov	r3, #0
   1b684:	str	r3, [fp, #-8]
   1b688:	b	1b698 <__assert_fail@plt+0xa4d0>
   1b68c:	ldr	r3, [fp, #-8]
   1b690:	add	r3, r3, #1
   1b694:	str	r3, [fp, #-8]
   1b698:	ldr	r3, [fp, #-8]
   1b69c:	lsl	r3, r3, #2
   1b6a0:	ldr	r2, [fp, #4]
   1b6a4:	add	r3, r2, r3
   1b6a8:	ldr	r3, [r3]
   1b6ac:	cmp	r3, #0
   1b6b0:	bne	1b68c <__assert_fail@plt+0xa4c4>
   1b6b4:	ldr	r3, [fp, #-8]
   1b6b8:	str	r3, [sp, #4]
   1b6bc:	ldr	r3, [fp, #4]
   1b6c0:	str	r3, [sp]
   1b6c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b6c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b6cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b6d0:	ldr	r0, [fp, #-16]
   1b6d4:	bl	1b0f4 <__assert_fail@plt+0x9f2c>
   1b6d8:	nop			; (mov r0, r0)
   1b6dc:	sub	sp, fp, #4
   1b6e0:	pop	{fp, pc}
   1b6e4:	push	{fp, lr}
   1b6e8:	add	fp, sp, #4
   1b6ec:	sub	sp, sp, #72	; 0x48
   1b6f0:	str	r0, [fp, #-56]	; 0xffffffc8
   1b6f4:	str	r1, [fp, #-60]	; 0xffffffc4
   1b6f8:	str	r2, [fp, #-64]	; 0xffffffc0
   1b6fc:	str	r3, [fp, #-68]	; 0xffffffbc
   1b700:	mov	r3, #0
   1b704:	str	r3, [fp, #-8]
   1b708:	b	1b718 <__assert_fail@plt+0xa550>
   1b70c:	ldr	r3, [fp, #-8]
   1b710:	add	r3, r3, #1
   1b714:	str	r3, [fp, #-8]
   1b718:	ldr	r3, [fp, #-8]
   1b71c:	cmp	r3, #9
   1b720:	bhi	1b764 <__assert_fail@plt+0xa59c>
   1b724:	ldr	r3, [fp, #4]
   1b728:	add	r2, r3, #4
   1b72c:	str	r2, [fp, #4]
   1b730:	ldr	r2, [r3]
   1b734:	ldr	r3, [fp, #-8]
   1b738:	lsl	r3, r3, #2
   1b73c:	sub	r1, fp, #4
   1b740:	add	r3, r1, r3
   1b744:	str	r2, [r3, #-44]	; 0xffffffd4
   1b748:	ldr	r3, [fp, #-8]
   1b74c:	lsl	r3, r3, #2
   1b750:	sub	r2, fp, #4
   1b754:	add	r3, r2, r3
   1b758:	ldr	r3, [r3, #-44]	; 0xffffffd4
   1b75c:	cmp	r3, #0
   1b760:	bne	1b70c <__assert_fail@plt+0xa544>
   1b764:	ldr	r3, [fp, #-8]
   1b768:	str	r3, [sp, #4]
   1b76c:	sub	r3, fp, #48	; 0x30
   1b770:	str	r3, [sp]
   1b774:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1b778:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1b77c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b780:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b784:	bl	1b0f4 <__assert_fail@plt+0x9f2c>
   1b788:	nop			; (mov r0, r0)
   1b78c:	sub	sp, fp, #4
   1b790:	pop	{fp, pc}
   1b794:	push	{r3}		; (str r3, [sp, #-4]!)
   1b798:	push	{fp, lr}
   1b79c:	add	fp, sp, #4
   1b7a0:	sub	sp, sp, #36	; 0x24
   1b7a4:	str	r0, [fp, #-20]	; 0xffffffec
   1b7a8:	str	r1, [fp, #-24]	; 0xffffffe8
   1b7ac:	str	r2, [fp, #-28]	; 0xffffffe4
   1b7b0:	add	r3, fp, #8
   1b7b4:	str	r3, [fp, #-12]
   1b7b8:	ldr	r3, [fp, #-12]
   1b7bc:	str	r3, [sp]
   1b7c0:	ldr	r3, [fp, #4]
   1b7c4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b7c8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b7cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b7d0:	bl	1b6e4 <__assert_fail@plt+0xa51c>
   1b7d4:	nop			; (mov r0, r0)
   1b7d8:	sub	sp, fp, #4
   1b7dc:	pop	{fp, lr}
   1b7e0:	add	sp, sp, #4
   1b7e4:	bx	lr
   1b7e8:	push	{fp, lr}
   1b7ec:	add	fp, sp, #4
   1b7f0:	ldr	r3, [pc, #96]	; 1b858 <__assert_fail@plt+0xa690>
   1b7f4:	ldr	r3, [r3]
   1b7f8:	mov	r1, r3
   1b7fc:	mov	r0, #10
   1b800:	bl	10f64 <fputc_unlocked@plt>
   1b804:	ldr	r0, [pc, #80]	; 1b85c <__assert_fail@plt+0xa694>
   1b808:	bl	11060 <gettext@plt>
   1b80c:	mov	r3, r0
   1b810:	ldr	r1, [pc, #72]	; 1b860 <__assert_fail@plt+0xa698>
   1b814:	mov	r0, r3
   1b818:	bl	10f04 <printf@plt>
   1b81c:	ldr	r0, [pc, #64]	; 1b864 <__assert_fail@plt+0xa69c>
   1b820:	bl	11060 <gettext@plt>
   1b824:	mov	r3, r0
   1b828:	ldr	r2, [pc, #56]	; 1b868 <__assert_fail@plt+0xa6a0>
   1b82c:	ldr	r1, [pc, #56]	; 1b86c <__assert_fail@plt+0xa6a4>
   1b830:	mov	r0, r3
   1b834:	bl	10f04 <printf@plt>
   1b838:	ldr	r0, [pc, #48]	; 1b870 <__assert_fail@plt+0xa6a8>
   1b83c:	bl	11060 <gettext@plt>
   1b840:	mov	r3, r0
   1b844:	ldr	r1, [pc, #40]	; 1b874 <__assert_fail@plt+0xa6ac>
   1b848:	mov	r0, r3
   1b84c:	bl	10f04 <printf@plt>
   1b850:	nop			; (mov r0, r0)
   1b854:	pop	{fp, pc}
   1b858:	andeq	r0, r3, ip, ror r1
   1b85c:	andeq	pc, r1, r8, lsl #9
   1b860:	muleq	r1, ip, r4
   1b864:			; <UNDEFINED> instruction: 0x0001f4b4
   1b868:	andeq	pc, r1, r8, asr #9
   1b86c:	strdeq	pc, [r1], -r0
   1b870:	andeq	pc, r1, r0, lsl #10
   1b874:	andeq	pc, r1, r8, lsr #10
   1b878:	push	{fp, lr}
   1b87c:	add	fp, sp, #4
   1b880:	sub	sp, sp, #16
   1b884:	str	r0, [fp, #-8]
   1b888:	str	r1, [fp, #-12]
   1b88c:	str	r2, [fp, #-16]
   1b890:	ldr	r2, [fp, #-16]
   1b894:	ldr	r1, [fp, #-12]
   1b898:	ldr	r0, [fp, #-8]
   1b89c:	bl	1ba08 <__assert_fail@plt+0xa840>
   1b8a0:	mov	r3, r0
   1b8a4:	mov	r0, r3
   1b8a8:	sub	sp, fp, #4
   1b8ac:	pop	{fp, pc}
   1b8b0:	push	{fp, lr}
   1b8b4:	add	fp, sp, #4
   1b8b8:	sub	sp, sp, #8
   1b8bc:	str	r0, [fp, #-8]
   1b8c0:	ldr	r3, [fp, #-8]
   1b8c4:	cmp	r3, #0
   1b8c8:	bne	1b8d0 <__assert_fail@plt+0xa708>
   1b8cc:	bl	1c3fc <__assert_fail@plt+0xb234>
   1b8d0:	ldr	r3, [fp, #-8]
   1b8d4:	mov	r0, r3
   1b8d8:	sub	sp, fp, #4
   1b8dc:	pop	{fp, pc}
   1b8e0:	push	{fp, lr}
   1b8e4:	add	fp, sp, #4
   1b8e8:	sub	sp, sp, #8
   1b8ec:	str	r0, [fp, #-8]
   1b8f0:	ldr	r0, [fp, #-8]
   1b8f4:	bl	1c61c <__assert_fail@plt+0xb454>
   1b8f8:	mov	r3, r0
   1b8fc:	mov	r0, r3
   1b900:	bl	1b8b0 <__assert_fail@plt+0xa6e8>
   1b904:	mov	r3, r0
   1b908:	mov	r0, r3
   1b90c:	sub	sp, fp, #4
   1b910:	pop	{fp, pc}
   1b914:	push	{fp, lr}
   1b918:	add	fp, sp, #4
   1b91c:	sub	sp, sp, #8
   1b920:	str	r0, [fp, #-8]
   1b924:	ldr	r0, [fp, #-8]
   1b928:	bl	1d4ec <__assert_fail@plt+0xc324>
   1b92c:	mov	r3, r0
   1b930:	mov	r0, r3
   1b934:	bl	1b8b0 <__assert_fail@plt+0xa6e8>
   1b938:	mov	r3, r0
   1b93c:	mov	r0, r3
   1b940:	sub	sp, fp, #4
   1b944:	pop	{fp, pc}
   1b948:	push	{fp, lr}
   1b94c:	add	fp, sp, #4
   1b950:	sub	sp, sp, #8
   1b954:	str	r0, [fp, #-8]
   1b958:	ldr	r0, [fp, #-8]
   1b95c:	bl	1b8e0 <__assert_fail@plt+0xa718>
   1b960:	mov	r3, r0
   1b964:	mov	r0, r3
   1b968:	sub	sp, fp, #4
   1b96c:	pop	{fp, pc}
   1b970:	push	{fp, lr}
   1b974:	add	fp, sp, #4
   1b978:	sub	sp, sp, #16
   1b97c:	str	r0, [fp, #-16]
   1b980:	str	r1, [fp, #-20]	; 0xffffffec
   1b984:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b988:	ldr	r0, [fp, #-16]
   1b98c:	bl	1c6c4 <__assert_fail@plt+0xb4fc>
   1b990:	str	r0, [fp, #-8]
   1b994:	ldr	r3, [fp, #-8]
   1b998:	cmp	r3, #0
   1b99c:	bne	1b9bc <__assert_fail@plt+0xa7f4>
   1b9a0:	ldr	r3, [fp, #-16]
   1b9a4:	cmp	r3, #0
   1b9a8:	beq	1b9b8 <__assert_fail@plt+0xa7f0>
   1b9ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b9b0:	cmp	r3, #0
   1b9b4:	beq	1b9bc <__assert_fail@plt+0xa7f4>
   1b9b8:	bl	1c3fc <__assert_fail@plt+0xb234>
   1b9bc:	ldr	r3, [fp, #-8]
   1b9c0:	mov	r0, r3
   1b9c4:	sub	sp, fp, #4
   1b9c8:	pop	{fp, pc}
   1b9cc:	push	{fp, lr}
   1b9d0:	add	fp, sp, #4
   1b9d4:	sub	sp, sp, #8
   1b9d8:	str	r0, [fp, #-8]
   1b9dc:	str	r1, [fp, #-12]
   1b9e0:	ldr	r1, [fp, #-12]
   1b9e4:	ldr	r0, [fp, #-8]
   1b9e8:	bl	1d518 <__assert_fail@plt+0xc350>
   1b9ec:	mov	r3, r0
   1b9f0:	mov	r0, r3
   1b9f4:	bl	1b8b0 <__assert_fail@plt+0xa6e8>
   1b9f8:	mov	r3, r0
   1b9fc:	mov	r0, r3
   1ba00:	sub	sp, fp, #4
   1ba04:	pop	{fp, pc}
   1ba08:	push	{fp, lr}
   1ba0c:	add	fp, sp, #4
   1ba10:	sub	sp, sp, #24
   1ba14:	str	r0, [fp, #-16]
   1ba18:	str	r1, [fp, #-20]	; 0xffffffec
   1ba1c:	str	r2, [fp, #-24]	; 0xffffffe8
   1ba20:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ba24:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ba28:	ldr	r0, [fp, #-16]
   1ba2c:	bl	1d70c <__assert_fail@plt+0xc544>
   1ba30:	str	r0, [fp, #-8]
   1ba34:	ldr	r3, [fp, #-8]
   1ba38:	cmp	r3, #0
   1ba3c:	bne	1ba68 <__assert_fail@plt+0xa8a0>
   1ba40:	ldr	r3, [fp, #-16]
   1ba44:	cmp	r3, #0
   1ba48:	beq	1ba64 <__assert_fail@plt+0xa89c>
   1ba4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ba50:	cmp	r3, #0
   1ba54:	beq	1ba68 <__assert_fail@plt+0xa8a0>
   1ba58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ba5c:	cmp	r3, #0
   1ba60:	beq	1ba68 <__assert_fail@plt+0xa8a0>
   1ba64:	bl	1c3fc <__assert_fail@plt+0xb234>
   1ba68:	ldr	r3, [fp, #-8]
   1ba6c:	mov	r0, r3
   1ba70:	sub	sp, fp, #4
   1ba74:	pop	{fp, pc}
   1ba78:	push	{fp, lr}
   1ba7c:	add	fp, sp, #4
   1ba80:	sub	sp, sp, #16
   1ba84:	str	r0, [fp, #-8]
   1ba88:	str	r1, [fp, #-12]
   1ba8c:	str	r2, [fp, #-16]
   1ba90:	ldr	r2, [fp, #-16]
   1ba94:	ldr	r1, [fp, #-12]
   1ba98:	ldr	r0, [fp, #-8]
   1ba9c:	bl	1d5a0 <__assert_fail@plt+0xc3d8>
   1baa0:	mov	r3, r0
   1baa4:	mov	r0, r3
   1baa8:	bl	1b8b0 <__assert_fail@plt+0xa6e8>
   1baac:	mov	r3, r0
   1bab0:	mov	r0, r3
   1bab4:	sub	sp, fp, #4
   1bab8:	pop	{fp, pc}
   1babc:	push	{fp, lr}
   1bac0:	add	fp, sp, #4
   1bac4:	sub	sp, sp, #8
   1bac8:	str	r0, [fp, #-8]
   1bacc:	str	r1, [fp, #-12]
   1bad0:	ldr	r2, [fp, #-12]
   1bad4:	ldr	r1, [fp, #-8]
   1bad8:	mov	r0, #0
   1badc:	bl	1ba08 <__assert_fail@plt+0xa840>
   1bae0:	mov	r3, r0
   1bae4:	mov	r0, r3
   1bae8:	sub	sp, fp, #4
   1baec:	pop	{fp, pc}
   1baf0:	push	{fp, lr}
   1baf4:	add	fp, sp, #4
   1baf8:	sub	sp, sp, #8
   1bafc:	str	r0, [fp, #-8]
   1bb00:	str	r1, [fp, #-12]
   1bb04:	ldr	r2, [fp, #-12]
   1bb08:	ldr	r1, [fp, #-8]
   1bb0c:	mov	r0, #0
   1bb10:	bl	1ba78 <__assert_fail@plt+0xa8b0>
   1bb14:	mov	r3, r0
   1bb18:	mov	r0, r3
   1bb1c:	sub	sp, fp, #4
   1bb20:	pop	{fp, pc}
   1bb24:	push	{fp, lr}
   1bb28:	add	fp, sp, #4
   1bb2c:	sub	sp, sp, #8
   1bb30:	str	r0, [fp, #-8]
   1bb34:	str	r1, [fp, #-12]
   1bb38:	mov	r2, #1
   1bb3c:	ldr	r1, [fp, #-12]
   1bb40:	ldr	r0, [fp, #-8]
   1bb44:	bl	1bb58 <__assert_fail@plt+0xa990>
   1bb48:	mov	r3, r0
   1bb4c:	mov	r0, r3
   1bb50:	sub	sp, fp, #4
   1bb54:	pop	{fp, pc}
   1bb58:	push	{fp, lr}
   1bb5c:	add	fp, sp, #4
   1bb60:	sub	sp, sp, #24
   1bb64:	str	r0, [fp, #-16]
   1bb68:	str	r1, [fp, #-20]	; 0xffffffec
   1bb6c:	str	r2, [fp, #-24]	; 0xffffffe8
   1bb70:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bb74:	ldr	r3, [r3]
   1bb78:	str	r3, [fp, #-8]
   1bb7c:	ldr	r3, [fp, #-16]
   1bb80:	cmp	r3, #0
   1bb84:	bne	1bbd0 <__assert_fail@plt+0xaa08>
   1bb88:	ldr	r3, [fp, #-8]
   1bb8c:	cmp	r3, #0
   1bb90:	bne	1bc34 <__assert_fail@plt+0xaa6c>
   1bb94:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bb98:	mov	r0, #64	; 0x40
   1bb9c:	bl	1dee4 <__assert_fail@plt+0xcd1c>
   1bba0:	mov	r3, r0
   1bba4:	str	r3, [fp, #-8]
   1bba8:	ldr	r3, [fp, #-8]
   1bbac:	cmp	r3, #0
   1bbb0:	moveq	r3, #1
   1bbb4:	movne	r3, #0
   1bbb8:	uxtb	r3, r3
   1bbbc:	mov	r2, r3
   1bbc0:	ldr	r3, [fp, #-8]
   1bbc4:	add	r3, r2, r3
   1bbc8:	str	r3, [fp, #-8]
   1bbcc:	b	1bc34 <__assert_fail@plt+0xaa6c>
   1bbd0:	ldr	r3, [fp, #-8]
   1bbd4:	lsr	r3, r3, #1
   1bbd8:	add	r3, r3, #1
   1bbdc:	mvn	r2, r3
   1bbe0:	ldr	r3, [fp, #-8]
   1bbe4:	cmp	r2, r3
   1bbe8:	bcs	1bc0c <__assert_fail@plt+0xaa44>
   1bbec:	ldr	r3, [fp, #-8]
   1bbf0:	lsr	r2, r3, #1
   1bbf4:	ldr	r3, [fp, #-8]
   1bbf8:	add	r3, r2, r3
   1bbfc:	add	r3, r3, #1
   1bc00:	str	r3, [fp, #-8]
   1bc04:	mov	r3, #1
   1bc08:	b	1bc28 <__assert_fail@plt+0xaa60>
   1bc0c:	ldr	r3, [fp, #-8]
   1bc10:	lsr	r2, r3, #1
   1bc14:	ldr	r3, [fp, #-8]
   1bc18:	add	r3, r2, r3
   1bc1c:	add	r3, r3, #1
   1bc20:	str	r3, [fp, #-8]
   1bc24:	mov	r3, #0
   1bc28:	cmp	r3, #0
   1bc2c:	beq	1bc34 <__assert_fail@plt+0xaa6c>
   1bc30:	bl	1c3fc <__assert_fail@plt+0xb234>
   1bc34:	ldr	r3, [fp, #-8]
   1bc38:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bc3c:	mov	r1, r3
   1bc40:	ldr	r0, [fp, #-16]
   1bc44:	bl	1ba08 <__assert_fail@plt+0xa840>
   1bc48:	str	r0, [fp, #-16]
   1bc4c:	ldr	r2, [fp, #-8]
   1bc50:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc54:	str	r2, [r3]
   1bc58:	ldr	r3, [fp, #-16]
   1bc5c:	mov	r0, r3
   1bc60:	sub	sp, fp, #4
   1bc64:	pop	{fp, pc}
   1bc68:	push	{fp, lr}
   1bc6c:	add	fp, sp, #4
   1bc70:	sub	sp, sp, #32
   1bc74:	str	r0, [fp, #-24]	; 0xffffffe8
   1bc78:	str	r1, [fp, #-28]	; 0xffffffe4
   1bc7c:	str	r2, [fp, #-32]	; 0xffffffe0
   1bc80:	str	r3, [fp, #-36]	; 0xffffffdc
   1bc84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bc88:	ldr	r3, [r3]
   1bc8c:	str	r3, [fp, #-8]
   1bc90:	ldr	r3, [fp, #-8]
   1bc94:	asr	r3, r3, #1
   1bc98:	cmp	r3, #0
   1bc9c:	bge	1bcc4 <__assert_fail@plt+0xaafc>
   1bca0:	ldr	r3, [fp, #-8]
   1bca4:	asr	r3, r3, #1
   1bca8:	rsb	r2, r3, #-2147483648	; 0x80000000
   1bcac:	ldr	r3, [fp, #-8]
   1bcb0:	cmp	r2, r3
   1bcb4:	movgt	r3, #1
   1bcb8:	movle	r3, #0
   1bcbc:	uxtb	r3, r3
   1bcc0:	b	1bd18 <__assert_fail@plt+0xab50>
   1bcc4:	ldr	r3, [fp, #-8]
   1bcc8:	cmp	r3, #0
   1bccc:	bge	1bcf4 <__assert_fail@plt+0xab2c>
   1bcd0:	ldr	r3, [fp, #-8]
   1bcd4:	asr	r2, r3, #1
   1bcd8:	ldr	r3, [fp, #-8]
   1bcdc:	rsb	r3, r3, #-2147483648	; 0x80000000
   1bce0:	cmp	r2, r3
   1bce4:	movlt	r3, #1
   1bce8:	movge	r3, #0
   1bcec:	uxtb	r3, r3
   1bcf0:	b	1bd18 <__assert_fail@plt+0xab50>
   1bcf4:	ldr	r3, [fp, #-8]
   1bcf8:	asr	r2, r3, #1
   1bcfc:	mvn	r3, #-2147483648	; 0x80000000
   1bd00:	sub	r3, r3, r2
   1bd04:	ldr	r2, [fp, #-8]
   1bd08:	cmp	r3, r2
   1bd0c:	movlt	r3, #1
   1bd10:	movge	r3, #0
   1bd14:	uxtb	r3, r3
   1bd18:	cmp	r3, #0
   1bd1c:	beq	1bd40 <__assert_fail@plt+0xab78>
   1bd20:	ldr	r3, [fp, #-8]
   1bd24:	asr	r3, r3, #1
   1bd28:	mov	r2, r3
   1bd2c:	ldr	r3, [fp, #-8]
   1bd30:	add	r3, r2, r3
   1bd34:	str	r3, [fp, #-16]
   1bd38:	mov	r3, #1
   1bd3c:	b	1bd5c <__assert_fail@plt+0xab94>
   1bd40:	ldr	r3, [fp, #-8]
   1bd44:	asr	r3, r3, #1
   1bd48:	mov	r2, r3
   1bd4c:	ldr	r3, [fp, #-8]
   1bd50:	add	r3, r2, r3
   1bd54:	str	r3, [fp, #-16]
   1bd58:	mov	r3, #0
   1bd5c:	cmp	r3, #0
   1bd60:	beq	1bd6c <__assert_fail@plt+0xaba4>
   1bd64:	mvn	r3, #-2147483648	; 0x80000000
   1bd68:	str	r3, [fp, #-16]
   1bd6c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bd70:	cmp	r3, #0
   1bd74:	blt	1bd90 <__assert_fail@plt+0xabc8>
   1bd78:	ldr	r3, [fp, #-16]
   1bd7c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1bd80:	cmp	r2, r3
   1bd84:	bge	1bd90 <__assert_fail@plt+0xabc8>
   1bd88:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bd8c:	str	r3, [fp, #-16]
   1bd90:	ldr	r3, [fp, #4]
   1bd94:	cmp	r3, #0
   1bd98:	bge	1be28 <__assert_fail@plt+0xac60>
   1bd9c:	ldr	r3, [fp, #-16]
   1bda0:	cmp	r3, #0
   1bda4:	bge	1bdd4 <__assert_fail@plt+0xac0c>
   1bda8:	ldr	r1, [fp, #4]
   1bdac:	mvn	r0, #-2147483648	; 0x80000000
   1bdb0:	bl	1e0f0 <__assert_fail@plt+0xcf28>
   1bdb4:	mov	r3, r0
   1bdb8:	mov	r2, r3
   1bdbc:	ldr	r3, [fp, #-16]
   1bdc0:	cmp	r2, r3
   1bdc4:	movgt	r3, #1
   1bdc8:	movle	r3, #0
   1bdcc:	uxtb	r3, r3
   1bdd0:	b	1bec8 <__assert_fail@plt+0xad00>
   1bdd4:	ldr	r3, [fp, #4]
   1bdd8:	cmn	r3, #1
   1bddc:	bne	1bdfc <__assert_fail@plt+0xac34>
   1bde0:	ldr	r3, [fp, #-16]
   1bde4:	add	r3, r3, #-2147483648	; 0x80000000
   1bde8:	cmp	r3, #0
   1bdec:	movgt	r3, #1
   1bdf0:	movle	r3, #0
   1bdf4:	uxtb	r3, r3
   1bdf8:	b	1bec8 <__assert_fail@plt+0xad00>
   1bdfc:	ldr	r1, [fp, #4]
   1be00:	mov	r0, #-2147483648	; 0x80000000
   1be04:	bl	1e0f0 <__assert_fail@plt+0xcf28>
   1be08:	mov	r3, r0
   1be0c:	mov	r2, r3
   1be10:	ldr	r3, [fp, #-16]
   1be14:	cmp	r2, r3
   1be18:	movlt	r3, #1
   1be1c:	movge	r3, #0
   1be20:	uxtb	r3, r3
   1be24:	b	1bec8 <__assert_fail@plt+0xad00>
   1be28:	ldr	r3, [fp, #4]
   1be2c:	cmp	r3, #0
   1be30:	beq	1bec4 <__assert_fail@plt+0xacfc>
   1be34:	ldr	r3, [fp, #-16]
   1be38:	cmp	r3, #0
   1be3c:	bge	1be98 <__assert_fail@plt+0xacd0>
   1be40:	ldr	r3, [fp, #-16]
   1be44:	cmn	r3, #1
   1be48:	bne	1be68 <__assert_fail@plt+0xaca0>
   1be4c:	ldr	r3, [fp, #4]
   1be50:	add	r3, r3, #-2147483648	; 0x80000000
   1be54:	cmp	r3, #0
   1be58:	movgt	r3, #1
   1be5c:	movle	r3, #0
   1be60:	uxtb	r3, r3
   1be64:	b	1bec8 <__assert_fail@plt+0xad00>
   1be68:	ldr	r3, [fp, #-16]
   1be6c:	mov	r1, r3
   1be70:	mov	r0, #-2147483648	; 0x80000000
   1be74:	bl	1e0f0 <__assert_fail@plt+0xcf28>
   1be78:	mov	r3, r0
   1be7c:	mov	r2, r3
   1be80:	ldr	r3, [fp, #4]
   1be84:	cmp	r2, r3
   1be88:	movlt	r3, #1
   1be8c:	movge	r3, #0
   1be90:	uxtb	r3, r3
   1be94:	b	1bec8 <__assert_fail@plt+0xad00>
   1be98:	ldr	r1, [fp, #4]
   1be9c:	mvn	r0, #-2147483648	; 0x80000000
   1bea0:	bl	1e0f0 <__assert_fail@plt+0xcf28>
   1bea4:	mov	r3, r0
   1bea8:	mov	r2, r3
   1beac:	ldr	r3, [fp, #-16]
   1beb0:	cmp	r2, r3
   1beb4:	movlt	r3, #1
   1beb8:	movge	r3, #0
   1bebc:	uxtb	r3, r3
   1bec0:	b	1bec8 <__assert_fail@plt+0xad00>
   1bec4:	mov	r3, #0
   1bec8:	cmp	r3, #0
   1becc:	beq	1beec <__assert_fail@plt+0xad24>
   1bed0:	ldr	r3, [fp, #-16]
   1bed4:	mov	r2, r3
   1bed8:	ldr	r3, [fp, #4]
   1bedc:	mul	r3, r3, r2
   1bee0:	str	r3, [fp, #-20]	; 0xffffffec
   1bee4:	mov	r3, #1
   1bee8:	b	1bf04 <__assert_fail@plt+0xad3c>
   1beec:	ldr	r3, [fp, #-16]
   1bef0:	mov	r2, r3
   1bef4:	ldr	r3, [fp, #4]
   1bef8:	mul	r3, r3, r2
   1befc:	str	r3, [fp, #-20]	; 0xffffffec
   1bf00:	mov	r3, #0
   1bf04:	cmp	r3, #0
   1bf08:	beq	1bf14 <__assert_fail@plt+0xad4c>
   1bf0c:	mvn	r3, #-2147483648	; 0x80000000
   1bf10:	b	1bf2c <__assert_fail@plt+0xad64>
   1bf14:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bf18:	cmp	r3, #63	; 0x3f
   1bf1c:	bgt	1bf28 <__assert_fail@plt+0xad60>
   1bf20:	mov	r3, #64	; 0x40
   1bf24:	b	1bf2c <__assert_fail@plt+0xad64>
   1bf28:	mov	r3, #0
   1bf2c:	str	r3, [fp, #-12]
   1bf30:	ldr	r3, [fp, #-12]
   1bf34:	cmp	r3, #0
   1bf38:	beq	1bf74 <__assert_fail@plt+0xadac>
   1bf3c:	ldr	r1, [fp, #4]
   1bf40:	ldr	r0, [fp, #-12]
   1bf44:	bl	1e0f0 <__assert_fail@plt+0xcf28>
   1bf48:	mov	r3, r0
   1bf4c:	str	r3, [fp, #-16]
   1bf50:	ldr	r3, [fp, #-12]
   1bf54:	ldr	r1, [fp, #4]
   1bf58:	mov	r0, r3
   1bf5c:	bl	1e310 <__assert_fail@plt+0xd148>
   1bf60:	mov	r3, r1
   1bf64:	mov	r2, r3
   1bf68:	ldr	r3, [fp, #-12]
   1bf6c:	sub	r3, r3, r2
   1bf70:	str	r3, [fp, #-20]	; 0xffffffec
   1bf74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bf78:	cmp	r3, #0
   1bf7c:	bne	1bf8c <__assert_fail@plt+0xadc4>
   1bf80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bf84:	mov	r2, #0
   1bf88:	str	r2, [r3]
   1bf8c:	ldr	r2, [fp, #-16]
   1bf90:	ldr	r3, [fp, #-8]
   1bf94:	sub	r2, r2, r3
   1bf98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bf9c:	cmp	r2, r3
   1bfa0:	bge	1c1d8 <__assert_fail@plt+0xb010>
   1bfa4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bfa8:	cmp	r3, #0
   1bfac:	bge	1bfd0 <__assert_fail@plt+0xae08>
   1bfb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bfb4:	rsb	r2, r3, #-2147483648	; 0x80000000
   1bfb8:	ldr	r3, [fp, #-8]
   1bfbc:	cmp	r2, r3
   1bfc0:	movgt	r3, #1
   1bfc4:	movle	r3, #0
   1bfc8:	uxtb	r3, r3
   1bfcc:	b	1c01c <__assert_fail@plt+0xae54>
   1bfd0:	ldr	r3, [fp, #-8]
   1bfd4:	cmp	r3, #0
   1bfd8:	bge	1bffc <__assert_fail@plt+0xae34>
   1bfdc:	ldr	r3, [fp, #-8]
   1bfe0:	rsb	r2, r3, #-2147483648	; 0x80000000
   1bfe4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bfe8:	cmp	r2, r3
   1bfec:	movgt	r3, #1
   1bff0:	movle	r3, #0
   1bff4:	uxtb	r3, r3
   1bff8:	b	1c01c <__assert_fail@plt+0xae54>
   1bffc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1c000:	mvn	r3, #-2147483648	; 0x80000000
   1c004:	sub	r3, r3, r2
   1c008:	ldr	r2, [fp, #-8]
   1c00c:	cmp	r3, r2
   1c010:	movlt	r3, #1
   1c014:	movge	r3, #0
   1c018:	uxtb	r3, r3
   1c01c:	cmp	r3, #0
   1c020:	beq	1c038 <__assert_fail@plt+0xae70>
   1c024:	ldr	r2, [fp, #-8]
   1c028:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c02c:	add	r3, r2, r3
   1c030:	str	r3, [fp, #-16]
   1c034:	b	1c1d4 <__assert_fail@plt+0xb00c>
   1c038:	ldr	r2, [fp, #-8]
   1c03c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c040:	add	r3, r2, r3
   1c044:	str	r3, [fp, #-16]
   1c048:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c04c:	cmp	r3, #0
   1c050:	blt	1c064 <__assert_fail@plt+0xae9c>
   1c054:	ldr	r3, [fp, #-16]
   1c058:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c05c:	cmp	r2, r3
   1c060:	blt	1c1d4 <__assert_fail@plt+0xb00c>
   1c064:	ldr	r3, [fp, #4]
   1c068:	cmp	r3, #0
   1c06c:	bge	1c0fc <__assert_fail@plt+0xaf34>
   1c070:	ldr	r3, [fp, #-16]
   1c074:	cmp	r3, #0
   1c078:	bge	1c0a8 <__assert_fail@plt+0xaee0>
   1c07c:	ldr	r1, [fp, #4]
   1c080:	mvn	r0, #-2147483648	; 0x80000000
   1c084:	bl	1e0f0 <__assert_fail@plt+0xcf28>
   1c088:	mov	r3, r0
   1c08c:	mov	r2, r3
   1c090:	ldr	r3, [fp, #-16]
   1c094:	cmp	r2, r3
   1c098:	movgt	r3, #1
   1c09c:	movle	r3, #0
   1c0a0:	uxtb	r3, r3
   1c0a4:	b	1c19c <__assert_fail@plt+0xafd4>
   1c0a8:	ldr	r3, [fp, #4]
   1c0ac:	cmn	r3, #1
   1c0b0:	bne	1c0d0 <__assert_fail@plt+0xaf08>
   1c0b4:	ldr	r3, [fp, #-16]
   1c0b8:	add	r3, r3, #-2147483648	; 0x80000000
   1c0bc:	cmp	r3, #0
   1c0c0:	movgt	r3, #1
   1c0c4:	movle	r3, #0
   1c0c8:	uxtb	r3, r3
   1c0cc:	b	1c19c <__assert_fail@plt+0xafd4>
   1c0d0:	ldr	r1, [fp, #4]
   1c0d4:	mov	r0, #-2147483648	; 0x80000000
   1c0d8:	bl	1e0f0 <__assert_fail@plt+0xcf28>
   1c0dc:	mov	r3, r0
   1c0e0:	mov	r2, r3
   1c0e4:	ldr	r3, [fp, #-16]
   1c0e8:	cmp	r2, r3
   1c0ec:	movlt	r3, #1
   1c0f0:	movge	r3, #0
   1c0f4:	uxtb	r3, r3
   1c0f8:	b	1c19c <__assert_fail@plt+0xafd4>
   1c0fc:	ldr	r3, [fp, #4]
   1c100:	cmp	r3, #0
   1c104:	beq	1c198 <__assert_fail@plt+0xafd0>
   1c108:	ldr	r3, [fp, #-16]
   1c10c:	cmp	r3, #0
   1c110:	bge	1c16c <__assert_fail@plt+0xafa4>
   1c114:	ldr	r3, [fp, #-16]
   1c118:	cmn	r3, #1
   1c11c:	bne	1c13c <__assert_fail@plt+0xaf74>
   1c120:	ldr	r3, [fp, #4]
   1c124:	add	r3, r3, #-2147483648	; 0x80000000
   1c128:	cmp	r3, #0
   1c12c:	movgt	r3, #1
   1c130:	movle	r3, #0
   1c134:	uxtb	r3, r3
   1c138:	b	1c19c <__assert_fail@plt+0xafd4>
   1c13c:	ldr	r3, [fp, #-16]
   1c140:	mov	r1, r3
   1c144:	mov	r0, #-2147483648	; 0x80000000
   1c148:	bl	1e0f0 <__assert_fail@plt+0xcf28>
   1c14c:	mov	r3, r0
   1c150:	mov	r2, r3
   1c154:	ldr	r3, [fp, #4]
   1c158:	cmp	r2, r3
   1c15c:	movlt	r3, #1
   1c160:	movge	r3, #0
   1c164:	uxtb	r3, r3
   1c168:	b	1c19c <__assert_fail@plt+0xafd4>
   1c16c:	ldr	r1, [fp, #4]
   1c170:	mvn	r0, #-2147483648	; 0x80000000
   1c174:	bl	1e0f0 <__assert_fail@plt+0xcf28>
   1c178:	mov	r3, r0
   1c17c:	mov	r2, r3
   1c180:	ldr	r3, [fp, #-16]
   1c184:	cmp	r2, r3
   1c188:	movlt	r3, #1
   1c18c:	movge	r3, #0
   1c190:	uxtb	r3, r3
   1c194:	b	1c19c <__assert_fail@plt+0xafd4>
   1c198:	mov	r3, #0
   1c19c:	cmp	r3, #0
   1c1a0:	beq	1c1bc <__assert_fail@plt+0xaff4>
   1c1a4:	ldr	r3, [fp, #-16]
   1c1a8:	mov	r2, r3
   1c1ac:	ldr	r3, [fp, #4]
   1c1b0:	mul	r3, r3, r2
   1c1b4:	str	r3, [fp, #-20]	; 0xffffffec
   1c1b8:	b	1c1d4 <__assert_fail@plt+0xb00c>
   1c1bc:	ldr	r3, [fp, #-16]
   1c1c0:	mov	r2, r3
   1c1c4:	ldr	r3, [fp, #4]
   1c1c8:	mul	r3, r3, r2
   1c1cc:	str	r3, [fp, #-20]	; 0xffffffec
   1c1d0:	b	1c1d8 <__assert_fail@plt+0xb010>
   1c1d4:	bl	1c3fc <__assert_fail@plt+0xb234>
   1c1d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c1dc:	mov	r1, r3
   1c1e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c1e4:	bl	1b970 <__assert_fail@plt+0xa7a8>
   1c1e8:	str	r0, [fp, #-24]	; 0xffffffe8
   1c1ec:	ldr	r2, [fp, #-16]
   1c1f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c1f4:	str	r2, [r3]
   1c1f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c1fc:	mov	r0, r3
   1c200:	sub	sp, fp, #4
   1c204:	pop	{fp, pc}
   1c208:	push	{fp, lr}
   1c20c:	add	fp, sp, #4
   1c210:	sub	sp, sp, #8
   1c214:	str	r0, [fp, #-8]
   1c218:	mov	r1, #1
   1c21c:	ldr	r0, [fp, #-8]
   1c220:	bl	1c260 <__assert_fail@plt+0xb098>
   1c224:	mov	r3, r0
   1c228:	mov	r0, r3
   1c22c:	sub	sp, fp, #4
   1c230:	pop	{fp, pc}
   1c234:	push	{fp, lr}
   1c238:	add	fp, sp, #4
   1c23c:	sub	sp, sp, #8
   1c240:	str	r0, [fp, #-8]
   1c244:	mov	r1, #1
   1c248:	ldr	r0, [fp, #-8]
   1c24c:	bl	1c29c <__assert_fail@plt+0xb0d4>
   1c250:	mov	r3, r0
   1c254:	mov	r0, r3
   1c258:	sub	sp, fp, #4
   1c25c:	pop	{fp, pc}
   1c260:	push	{fp, lr}
   1c264:	add	fp, sp, #4
   1c268:	sub	sp, sp, #8
   1c26c:	str	r0, [fp, #-8]
   1c270:	str	r1, [fp, #-12]
   1c274:	ldr	r1, [fp, #-12]
   1c278:	ldr	r0, [fp, #-8]
   1c27c:	bl	1c558 <__assert_fail@plt+0xb390>
   1c280:	mov	r3, r0
   1c284:	mov	r0, r3
   1c288:	bl	1b8b0 <__assert_fail@plt+0xa6e8>
   1c28c:	mov	r3, r0
   1c290:	mov	r0, r3
   1c294:	sub	sp, fp, #4
   1c298:	pop	{fp, pc}
   1c29c:	push	{fp, lr}
   1c2a0:	add	fp, sp, #4
   1c2a4:	sub	sp, sp, #8
   1c2a8:	str	r0, [fp, #-8]
   1c2ac:	str	r1, [fp, #-12]
   1c2b0:	ldr	r1, [fp, #-12]
   1c2b4:	ldr	r0, [fp, #-8]
   1c2b8:	bl	1d568 <__assert_fail@plt+0xc3a0>
   1c2bc:	mov	r3, r0
   1c2c0:	mov	r0, r3
   1c2c4:	bl	1b8b0 <__assert_fail@plt+0xa6e8>
   1c2c8:	mov	r3, r0
   1c2cc:	mov	r0, r3
   1c2d0:	sub	sp, fp, #4
   1c2d4:	pop	{fp, pc}
   1c2d8:	push	{fp, lr}
   1c2dc:	add	fp, sp, #4
   1c2e0:	sub	sp, sp, #8
   1c2e4:	str	r0, [fp, #-8]
   1c2e8:	str	r1, [fp, #-12]
   1c2ec:	ldr	r0, [fp, #-12]
   1c2f0:	bl	1b8e0 <__assert_fail@plt+0xa718>
   1c2f4:	mov	r3, r0
   1c2f8:	ldr	r2, [fp, #-12]
   1c2fc:	ldr	r1, [fp, #-8]
   1c300:	mov	r0, r3
   1c304:	bl	10f40 <memcpy@plt>
   1c308:	mov	r3, r0
   1c30c:	mov	r0, r3
   1c310:	sub	sp, fp, #4
   1c314:	pop	{fp, pc}
   1c318:	push	{fp, lr}
   1c31c:	add	fp, sp, #4
   1c320:	sub	sp, sp, #8
   1c324:	str	r0, [fp, #-8]
   1c328:	str	r1, [fp, #-12]
   1c32c:	ldr	r0, [fp, #-12]
   1c330:	bl	1b914 <__assert_fail@plt+0xa74c>
   1c334:	mov	r3, r0
   1c338:	mov	r0, r3
   1c33c:	ldr	r3, [fp, #-12]
   1c340:	mov	r2, r3
   1c344:	ldr	r1, [fp, #-8]
   1c348:	bl	10f40 <memcpy@plt>
   1c34c:	mov	r3, r0
   1c350:	mov	r0, r3
   1c354:	sub	sp, fp, #4
   1c358:	pop	{fp, pc}
   1c35c:	push	{fp, lr}
   1c360:	add	fp, sp, #4
   1c364:	sub	sp, sp, #16
   1c368:	str	r0, [fp, #-16]
   1c36c:	str	r1, [fp, #-20]	; 0xffffffec
   1c370:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c374:	add	r3, r3, #1
   1c378:	mov	r0, r3
   1c37c:	bl	1b914 <__assert_fail@plt+0xa74c>
   1c380:	mov	r3, r0
   1c384:	str	r3, [fp, #-8]
   1c388:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c38c:	ldr	r2, [fp, #-8]
   1c390:	add	r3, r2, r3
   1c394:	mov	r2, #0
   1c398:	strb	r2, [r3]
   1c39c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c3a0:	mov	r2, r3
   1c3a4:	ldr	r1, [fp, #-16]
   1c3a8:	ldr	r0, [fp, #-8]
   1c3ac:	bl	10f40 <memcpy@plt>
   1c3b0:	mov	r3, r0
   1c3b4:	mov	r0, r3
   1c3b8:	sub	sp, fp, #4
   1c3bc:	pop	{fp, pc}
   1c3c0:	push	{fp, lr}
   1c3c4:	add	fp, sp, #4
   1c3c8:	sub	sp, sp, #8
   1c3cc:	str	r0, [fp, #-8]
   1c3d0:	ldr	r0, [fp, #-8]
   1c3d4:	bl	1106c <strlen@plt>
   1c3d8:	mov	r3, r0
   1c3dc:	add	r3, r3, #1
   1c3e0:	mov	r1, r3
   1c3e4:	ldr	r0, [fp, #-8]
   1c3e8:	bl	1c2d8 <__assert_fail@plt+0xb110>
   1c3ec:	mov	r3, r0
   1c3f0:	mov	r0, r3
   1c3f4:	sub	sp, fp, #4
   1c3f8:	pop	{fp, pc}
   1c3fc:	push	{r4, r5, fp, lr}
   1c400:	add	fp, sp, #12
   1c404:	ldr	r3, [pc, #32]	; 1c42c <__assert_fail@plt+0xb264>
   1c408:	ldr	r4, [r3]
   1c40c:	ldr	r0, [pc, #28]	; 1c430 <__assert_fail@plt+0xb268>
   1c410:	bl	11060 <gettext@plt>
   1c414:	mov	r3, r0
   1c418:	ldr	r2, [pc, #20]	; 1c434 <__assert_fail@plt+0xb26c>
   1c41c:	mov	r1, #0
   1c420:	mov	r0, r4
   1c424:	bl	10ff4 <error@plt>
   1c428:	bl	11198 <abort@plt>
   1c42c:	andeq	r0, r3, r4, lsr #2
   1c430:	andeq	pc, r1, r8, ror r5	; <UNPREDICTABLE>
   1c434:	andeq	pc, r1, ip, lsl #11
   1c438:	push	{fp, lr}
   1c43c:	add	fp, sp, #4
   1c440:	sub	sp, sp, #24
   1c444:	str	r0, [fp, #-16]
   1c448:	str	r1, [fp, #-20]	; 0xffffffec
   1c44c:	str	r2, [fp, #-24]	; 0xffffffe8
   1c450:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c454:	orr	r3, r3, #512	; 0x200
   1c458:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c45c:	mov	r1, r3
   1c460:	ldr	r0, [fp, #-16]
   1c464:	bl	13600 <__assert_fail@plt+0x2438>
   1c468:	str	r0, [fp, #-8]
   1c46c:	ldr	r3, [fp, #-8]
   1c470:	cmp	r3, #0
   1c474:	bne	1c4a4 <__assert_fail@plt+0xb2dc>
   1c478:	bl	1109c <__errno_location@plt>
   1c47c:	mov	r3, r0
   1c480:	ldr	r3, [r3]
   1c484:	cmp	r3, #22
   1c488:	bne	1c4a0 <__assert_fail@plt+0xb2d8>
   1c48c:	ldr	r3, [pc, #32]	; 1c4b4 <__assert_fail@plt+0xb2ec>
   1c490:	mov	r2, #41	; 0x29
   1c494:	ldr	r1, [pc, #28]	; 1c4b8 <__assert_fail@plt+0xb2f0>
   1c498:	ldr	r0, [pc, #28]	; 1c4bc <__assert_fail@plt+0xb2f4>
   1c49c:	bl	111c8 <__assert_fail@plt>
   1c4a0:	bl	1c3fc <__assert_fail@plt+0xb234>
   1c4a4:	ldr	r3, [fp, #-8]
   1c4a8:	mov	r0, r3
   1c4ac:	sub	sp, fp, #4
   1c4b0:	pop	{fp, pc}
   1c4b4:	andeq	pc, r1, ip, lsr #11
   1c4b8:	muleq	r1, r0, r5
   1c4bc:	muleq	r1, ip, r5
   1c4c0:	push	{fp}		; (str fp, [sp, #-4]!)
   1c4c4:	add	fp, sp, #0
   1c4c8:	sub	sp, sp, #12
   1c4cc:	str	r0, [fp, #-8]
   1c4d0:	str	r1, [fp, #-12]
   1c4d4:	ldr	r3, [fp, #-8]
   1c4d8:	ldr	r3, [r3, #48]	; 0x30
   1c4dc:	and	r3, r3, #16
   1c4e0:	cmp	r3, #0
   1c4e4:	beq	1c4fc <__assert_fail@plt+0xb334>
   1c4e8:	ldr	r3, [fp, #-8]
   1c4ec:	ldr	r3, [r3, #48]	; 0x30
   1c4f0:	and	r3, r3, #1
   1c4f4:	cmp	r3, #0
   1c4f8:	beq	1c534 <__assert_fail@plt+0xb36c>
   1c4fc:	ldr	r3, [fp, #-8]
   1c500:	ldr	r3, [r3, #48]	; 0x30
   1c504:	and	r3, r3, #16
   1c508:	cmp	r3, #0
   1c50c:	beq	1c53c <__assert_fail@plt+0xb374>
   1c510:	ldr	r3, [fp, #-8]
   1c514:	ldr	r3, [r3, #48]	; 0x30
   1c518:	and	r3, r3, #1
   1c51c:	cmp	r3, #0
   1c520:	beq	1c53c <__assert_fail@plt+0xb374>
   1c524:	ldr	r3, [fp, #-12]
   1c528:	ldr	r3, [r3, #48]	; 0x30
   1c52c:	cmp	r3, #0
   1c530:	beq	1c53c <__assert_fail@plt+0xb374>
   1c534:	mov	r3, #1
   1c538:	b	1c540 <__assert_fail@plt+0xb378>
   1c53c:	mov	r3, #0
   1c540:	and	r3, r3, #1
   1c544:	uxtb	r3, r3
   1c548:	mov	r0, r3
   1c54c:	add	sp, fp, #0
   1c550:	pop	{fp}		; (ldr fp, [sp], #4)
   1c554:	bx	lr
   1c558:	push	{r4, r5, fp, lr}
   1c55c:	add	fp, sp, #12
   1c560:	sub	sp, sp, #16
   1c564:	str	r0, [fp, #-24]	; 0xffffffe8
   1c568:	str	r1, [fp, #-28]	; 0xffffffe4
   1c56c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c570:	cmp	r3, #0
   1c574:	beq	1c584 <__assert_fail@plt+0xb3bc>
   1c578:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c57c:	cmp	r3, #0
   1c580:	bne	1c594 <__assert_fail@plt+0xb3cc>
   1c584:	mov	r3, #1
   1c588:	str	r3, [fp, #-28]	; 0xffffffe4
   1c58c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c590:	str	r3, [fp, #-24]	; 0xffffffe8
   1c594:	mov	r1, #0
   1c598:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c59c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c5a0:	umull	r2, r3, r2, r3
   1c5a4:	mov	r4, r3
   1c5a8:	mov	r5, #0
   1c5ac:	cmp	r4, #0
   1c5b0:	beq	1c5b8 <__assert_fail@plt+0xb3f0>
   1c5b4:	mov	r1, #1
   1c5b8:	cmp	r2, #0
   1c5bc:	bge	1c5c4 <__assert_fail@plt+0xb3fc>
   1c5c0:	mov	r1, #1
   1c5c4:	mov	r3, r2
   1c5c8:	str	r3, [fp, #-20]	; 0xffffffec
   1c5cc:	mov	r3, r1
   1c5d0:	and	r3, r3, #1
   1c5d4:	uxtb	r3, r3
   1c5d8:	cmp	r3, #0
   1c5dc:	beq	1c5f8 <__assert_fail@plt+0xb430>
   1c5e0:	bl	1109c <__errno_location@plt>
   1c5e4:	mov	r2, r0
   1c5e8:	mov	r3, #12
   1c5ec:	str	r3, [r2]
   1c5f0:	mov	r3, #0
   1c5f4:	b	1c610 <__assert_fail@plt+0xb448>
   1c5f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1c5fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c600:	bl	10ed4 <calloc@plt>
   1c604:	mov	r3, r0
   1c608:	str	r3, [fp, #-16]
   1c60c:	ldr	r3, [fp, #-16]
   1c610:	mov	r0, r3
   1c614:	sub	sp, fp, #12
   1c618:	pop	{r4, r5, fp, pc}
   1c61c:	push	{r4, r5, fp, lr}
   1c620:	add	fp, sp, #12
   1c624:	sub	sp, sp, #16
   1c628:	str	r0, [fp, #-24]	; 0xffffffe8
   1c62c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c630:	cmp	r3, #0
   1c634:	bne	1c640 <__assert_fail@plt+0xb478>
   1c638:	mov	r3, #1
   1c63c:	str	r3, [fp, #-24]	; 0xffffffe8
   1c640:	mov	r1, #0
   1c644:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c648:	mov	r2, r3
   1c64c:	mov	r3, #0
   1c650:	mov	r4, r3
   1c654:	mov	r5, #0
   1c658:	cmp	r4, #0
   1c65c:	beq	1c664 <__assert_fail@plt+0xb49c>
   1c660:	mov	r1, #1
   1c664:	cmp	r2, #0
   1c668:	bge	1c670 <__assert_fail@plt+0xb4a8>
   1c66c:	mov	r1, #1
   1c670:	mov	r3, r2
   1c674:	str	r3, [fp, #-20]	; 0xffffffec
   1c678:	mov	r3, r1
   1c67c:	and	r3, r3, #1
   1c680:	uxtb	r3, r3
   1c684:	cmp	r3, #0
   1c688:	beq	1c6a4 <__assert_fail@plt+0xb4dc>
   1c68c:	bl	1109c <__errno_location@plt>
   1c690:	mov	r2, r0
   1c694:	mov	r3, #12
   1c698:	str	r3, [r2]
   1c69c:	mov	r3, #0
   1c6a0:	b	1c6b8 <__assert_fail@plt+0xb4f0>
   1c6a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c6a8:	bl	1100c <malloc@plt>
   1c6ac:	mov	r3, r0
   1c6b0:	str	r3, [fp, #-16]
   1c6b4:	ldr	r3, [fp, #-16]
   1c6b8:	mov	r0, r3
   1c6bc:	sub	sp, fp, #12
   1c6c0:	pop	{r4, r5, fp, pc}
   1c6c4:	push	{r4, r5, fp, lr}
   1c6c8:	add	fp, sp, #12
   1c6cc:	sub	sp, sp, #16
   1c6d0:	str	r0, [fp, #-24]	; 0xffffffe8
   1c6d4:	str	r1, [fp, #-28]	; 0xffffffe4
   1c6d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c6dc:	cmp	r3, #0
   1c6e0:	bne	1c6f4 <__assert_fail@plt+0xb52c>
   1c6e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1c6e8:	bl	1c61c <__assert_fail@plt+0xb454>
   1c6ec:	mov	r3, r0
   1c6f0:	b	1c788 <__assert_fail@plt+0xb5c0>
   1c6f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c6f8:	cmp	r3, #0
   1c6fc:	bne	1c710 <__assert_fail@plt+0xb548>
   1c700:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c704:	bl	1d358 <__assert_fail@plt+0xc190>
   1c708:	mov	r3, #0
   1c70c:	b	1c788 <__assert_fail@plt+0xb5c0>
   1c710:	mov	r1, #0
   1c714:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c718:	mov	r2, r3
   1c71c:	mov	r3, #0
   1c720:	mov	r4, r3
   1c724:	mov	r5, #0
   1c728:	cmp	r4, #0
   1c72c:	beq	1c734 <__assert_fail@plt+0xb56c>
   1c730:	mov	r1, #1
   1c734:	cmp	r2, #0
   1c738:	bge	1c740 <__assert_fail@plt+0xb578>
   1c73c:	mov	r1, #1
   1c740:	mov	r3, r2
   1c744:	str	r3, [fp, #-20]	; 0xffffffec
   1c748:	mov	r3, r1
   1c74c:	and	r3, r3, #1
   1c750:	uxtb	r3, r3
   1c754:	cmp	r3, #0
   1c758:	beq	1c774 <__assert_fail@plt+0xb5ac>
   1c75c:	bl	1109c <__errno_location@plt>
   1c760:	mov	r2, r0
   1c764:	mov	r3, #12
   1c768:	str	r3, [r2]
   1c76c:	mov	r3, #0
   1c770:	b	1c788 <__assert_fail@plt+0xb5c0>
   1c774:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1c778:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c77c:	bl	10f70 <realloc@plt>
   1c780:	str	r0, [fp, #-16]
   1c784:	ldr	r3, [fp, #-16]
   1c788:	mov	r0, r3
   1c78c:	sub	sp, fp, #12
   1c790:	pop	{r4, r5, fp, pc}
   1c794:	push	{r4, r5, r6, r7, fp}
   1c798:	add	fp, sp, #16
   1c79c:	sub	sp, sp, #20
   1c7a0:	strd	r0, [fp, #-28]	; 0xffffffe4
   1c7a4:	str	r2, [fp, #-32]	; 0xffffffe0
   1c7a8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1c7ac:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c7b0:	sub	ip, r1, #32
   1c7b4:	rsb	r0, r1, #32
   1c7b8:	lsl	r7, r3, r1
   1c7bc:	orr	r7, r7, r2, lsl ip
   1c7c0:	orr	r7, r7, r2, lsr r0
   1c7c4:	lsl	r6, r2, r1
   1c7c8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c7cc:	rsb	r1, r1, #0
   1c7d0:	and	r1, r1, #63	; 0x3f
   1c7d4:	rsb	ip, r1, #32
   1c7d8:	sub	r0, r1, #32
   1c7dc:	lsr	r4, r2, r1
   1c7e0:	orr	r4, r4, r3, lsl ip
   1c7e4:	orr	r4, r4, r3, lsr r0
   1c7e8:	lsr	r5, r3, r1
   1c7ec:	orr	r4, r4, r6
   1c7f0:	orr	r5, r5, r7
   1c7f4:	mov	r2, r4
   1c7f8:	mov	r3, r5
   1c7fc:	mov	r0, r2
   1c800:	mov	r1, r3
   1c804:	sub	sp, fp, #16
   1c808:	pop	{r4, r5, r6, r7, fp}
   1c80c:	bx	lr
   1c810:	push	{r4, r5, r6, r7, fp}
   1c814:	add	fp, sp, #16
   1c818:	sub	sp, sp, #20
   1c81c:	strd	r0, [fp, #-28]	; 0xffffffe4
   1c820:	str	r2, [fp, #-32]	; 0xffffffe0
   1c824:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1c828:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c82c:	rsb	ip, r1, #32
   1c830:	sub	r0, r1, #32
   1c834:	lsr	r6, r2, r1
   1c838:	orr	r6, r6, r3, lsl ip
   1c83c:	orr	r6, r6, r3, lsr r0
   1c840:	lsr	r7, r3, r1
   1c844:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c848:	rsb	r1, r1, #0
   1c84c:	and	r1, r1, #63	; 0x3f
   1c850:	sub	ip, r1, #32
   1c854:	rsb	r0, r1, #32
   1c858:	lsl	r5, r3, r1
   1c85c:	orr	r5, r5, r2, lsl ip
   1c860:	orr	r5, r5, r2, lsr r0
   1c864:	lsl	r4, r2, r1
   1c868:	orr	r4, r4, r6
   1c86c:	orr	r5, r5, r7
   1c870:	mov	r2, r4
   1c874:	mov	r3, r5
   1c878:	mov	r0, r2
   1c87c:	mov	r1, r3
   1c880:	sub	sp, fp, #16
   1c884:	pop	{r4, r5, r6, r7, fp}
   1c888:	bx	lr
   1c88c:	push	{fp}		; (str fp, [sp, #-4]!)
   1c890:	add	fp, sp, #0
   1c894:	sub	sp, sp, #12
   1c898:	str	r0, [fp, #-8]
   1c89c:	str	r1, [fp, #-12]
   1c8a0:	ldr	r2, [fp, #-8]
   1c8a4:	ldr	r3, [fp, #-12]
   1c8a8:	rsb	r3, r3, #32
   1c8ac:	ror	r3, r2, r3
   1c8b0:	mov	r0, r3
   1c8b4:	add	sp, fp, #0
   1c8b8:	pop	{fp}		; (ldr fp, [sp], #4)
   1c8bc:	bx	lr
   1c8c0:	push	{fp}		; (str fp, [sp, #-4]!)
   1c8c4:	add	fp, sp, #0
   1c8c8:	sub	sp, sp, #12
   1c8cc:	str	r0, [fp, #-8]
   1c8d0:	str	r1, [fp, #-12]
   1c8d4:	ldr	r2, [fp, #-8]
   1c8d8:	ldr	r3, [fp, #-12]
   1c8dc:	ror	r3, r2, r3
   1c8e0:	mov	r0, r3
   1c8e4:	add	sp, fp, #0
   1c8e8:	pop	{fp}		; (ldr fp, [sp], #4)
   1c8ec:	bx	lr
   1c8f0:	push	{fp}		; (str fp, [sp, #-4]!)
   1c8f4:	add	fp, sp, #0
   1c8f8:	sub	sp, sp, #12
   1c8fc:	str	r0, [fp, #-8]
   1c900:	str	r1, [fp, #-12]
   1c904:	ldr	r2, [fp, #-8]
   1c908:	ldr	r3, [fp, #-12]
   1c90c:	rsb	r3, r3, #32
   1c910:	ror	r3, r2, r3
   1c914:	mov	r0, r3
   1c918:	add	sp, fp, #0
   1c91c:	pop	{fp}		; (ldr fp, [sp], #4)
   1c920:	bx	lr
   1c924:	push	{fp}		; (str fp, [sp, #-4]!)
   1c928:	add	fp, sp, #0
   1c92c:	sub	sp, sp, #12
   1c930:	str	r0, [fp, #-8]
   1c934:	str	r1, [fp, #-12]
   1c938:	ldr	r2, [fp, #-8]
   1c93c:	ldr	r3, [fp, #-12]
   1c940:	ror	r3, r2, r3
   1c944:	mov	r0, r3
   1c948:	add	sp, fp, #0
   1c94c:	pop	{fp}		; (ldr fp, [sp], #4)
   1c950:	bx	lr
   1c954:	push	{fp}		; (str fp, [sp, #-4]!)
   1c958:	add	fp, sp, #0
   1c95c:	sub	sp, sp, #12
   1c960:	mov	r3, r0
   1c964:	str	r1, [fp, #-12]
   1c968:	strh	r3, [fp, #-6]
   1c96c:	ldrh	r2, [fp, #-6]
   1c970:	ldr	r3, [fp, #-12]
   1c974:	lsl	r3, r2, r3
   1c978:	uxth	r2, r3
   1c97c:	ldrh	r1, [fp, #-6]
   1c980:	ldr	r3, [fp, #-12]
   1c984:	rsb	r3, r3, #16
   1c988:	lsr	r3, r1, r3
   1c98c:	uxth	r3, r3
   1c990:	orr	r3, r2, r3
   1c994:	uxth	r3, r3
   1c998:	mov	r0, r3
   1c99c:	add	sp, fp, #0
   1c9a0:	pop	{fp}		; (ldr fp, [sp], #4)
   1c9a4:	bx	lr
   1c9a8:	push	{fp}		; (str fp, [sp, #-4]!)
   1c9ac:	add	fp, sp, #0
   1c9b0:	sub	sp, sp, #12
   1c9b4:	mov	r3, r0
   1c9b8:	str	r1, [fp, #-12]
   1c9bc:	strh	r3, [fp, #-6]
   1c9c0:	ldrh	r2, [fp, #-6]
   1c9c4:	ldr	r3, [fp, #-12]
   1c9c8:	lsr	r3, r2, r3
   1c9cc:	uxth	r2, r3
   1c9d0:	ldrh	r1, [fp, #-6]
   1c9d4:	ldr	r3, [fp, #-12]
   1c9d8:	rsb	r3, r3, #16
   1c9dc:	lsl	r3, r1, r3
   1c9e0:	uxth	r3, r3
   1c9e4:	orr	r3, r2, r3
   1c9e8:	uxth	r3, r3
   1c9ec:	mov	r0, r3
   1c9f0:	add	sp, fp, #0
   1c9f4:	pop	{fp}		; (ldr fp, [sp], #4)
   1c9f8:	bx	lr
   1c9fc:	push	{fp}		; (str fp, [sp, #-4]!)
   1ca00:	add	fp, sp, #0
   1ca04:	sub	sp, sp, #12
   1ca08:	mov	r3, r0
   1ca0c:	str	r1, [fp, #-12]
   1ca10:	strb	r3, [fp, #-5]
   1ca14:	ldrb	r2, [fp, #-5]
   1ca18:	ldr	r3, [fp, #-12]
   1ca1c:	lsl	r3, r2, r3
   1ca20:	uxtb	r2, r3
   1ca24:	ldrb	r1, [fp, #-5]
   1ca28:	ldr	r3, [fp, #-12]
   1ca2c:	rsb	r3, r3, #8
   1ca30:	lsr	r3, r1, r3
   1ca34:	uxtb	r3, r3
   1ca38:	orr	r3, r2, r3
   1ca3c:	uxtb	r3, r3
   1ca40:	mov	r0, r3
   1ca44:	add	sp, fp, #0
   1ca48:	pop	{fp}		; (ldr fp, [sp], #4)
   1ca4c:	bx	lr
   1ca50:	push	{fp}		; (str fp, [sp, #-4]!)
   1ca54:	add	fp, sp, #0
   1ca58:	sub	sp, sp, #12
   1ca5c:	mov	r3, r0
   1ca60:	str	r1, [fp, #-12]
   1ca64:	strb	r3, [fp, #-5]
   1ca68:	ldrb	r2, [fp, #-5]
   1ca6c:	ldr	r3, [fp, #-12]
   1ca70:	lsr	r3, r2, r3
   1ca74:	uxtb	r2, r3
   1ca78:	ldrb	r1, [fp, #-5]
   1ca7c:	ldr	r3, [fp, #-12]
   1ca80:	rsb	r3, r3, #8
   1ca84:	lsl	r3, r1, r3
   1ca88:	uxtb	r3, r3
   1ca8c:	orr	r3, r2, r3
   1ca90:	uxtb	r3, r3
   1ca94:	mov	r0, r3
   1ca98:	add	sp, fp, #0
   1ca9c:	pop	{fp}		; (ldr fp, [sp], #4)
   1caa0:	bx	lr
   1caa4:	push	{r4, r5, fp, lr}
   1caa8:	add	fp, sp, #12
   1caac:	sub	sp, sp, #16
   1cab0:	str	r0, [fp, #-24]	; 0xffffffe8
   1cab4:	str	r1, [fp, #-28]	; 0xffffffe4
   1cab8:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1cabc:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1cac0:	cmp	r5, r4
   1cac4:	bne	1cad0 <__assert_fail@plt+0xb908>
   1cac8:	mov	r3, #0
   1cacc:	b	1cb30 <__assert_fail@plt+0xb968>
   1cad0:	ldrb	r3, [r5]
   1cad4:	mov	r0, r3
   1cad8:	bl	1dc60 <__assert_fail@plt+0xca98>
   1cadc:	mov	r3, r0
   1cae0:	strb	r3, [fp, #-13]
   1cae4:	ldrb	r3, [r4]
   1cae8:	mov	r0, r3
   1caec:	bl	1dc60 <__assert_fail@plt+0xca98>
   1caf0:	mov	r3, r0
   1caf4:	strb	r3, [fp, #-14]
   1caf8:	ldrb	r3, [fp, #-13]
   1cafc:	cmp	r3, #0
   1cb00:	beq	1cb20 <__assert_fail@plt+0xb958>
   1cb04:	add	r5, r5, #1
   1cb08:	add	r4, r4, #1
   1cb0c:	ldrb	r2, [fp, #-13]
   1cb10:	ldrb	r3, [fp, #-14]
   1cb14:	cmp	r2, r3
   1cb18:	beq	1cad0 <__assert_fail@plt+0xb908>
   1cb1c:	b	1cb24 <__assert_fail@plt+0xb95c>
   1cb20:	nop			; (mov r0, r0)
   1cb24:	ldrb	r2, [fp, #-13]
   1cb28:	ldrb	r3, [fp, #-14]
   1cb2c:	sub	r3, r2, r3
   1cb30:	mov	r0, r3
   1cb34:	sub	sp, fp, #12
   1cb38:	pop	{r4, r5, fp, pc}
   1cb3c:	push	{fp, lr}
   1cb40:	add	fp, sp, #4
   1cb44:	sub	sp, sp, #16
   1cb48:	str	r0, [fp, #-16]
   1cb4c:	ldr	r0, [fp, #-16]
   1cb50:	bl	10fd0 <__fpending@plt>
   1cb54:	mov	r3, r0
   1cb58:	cmp	r3, #0
   1cb5c:	movne	r3, #1
   1cb60:	moveq	r3, #0
   1cb64:	strb	r3, [fp, #-5]
   1cb68:	ldr	r0, [fp, #-16]
   1cb6c:	bl	10fdc <ferror_unlocked@plt>
   1cb70:	mov	r3, r0
   1cb74:	cmp	r3, #0
   1cb78:	movne	r3, #1
   1cb7c:	moveq	r3, #0
   1cb80:	strb	r3, [fp, #-6]
   1cb84:	ldr	r0, [fp, #-16]
   1cb88:	bl	1cdbc <__assert_fail@plt+0xbbf4>
   1cb8c:	mov	r3, r0
   1cb90:	cmp	r3, #0
   1cb94:	movne	r3, #1
   1cb98:	moveq	r3, #0
   1cb9c:	strb	r3, [fp, #-7]
   1cba0:	ldrb	r3, [fp, #-6]
   1cba4:	cmp	r3, #0
   1cba8:	bne	1cbd8 <__assert_fail@plt+0xba10>
   1cbac:	ldrb	r3, [fp, #-7]
   1cbb0:	cmp	r3, #0
   1cbb4:	beq	1cc04 <__assert_fail@plt+0xba3c>
   1cbb8:	ldrb	r3, [fp, #-5]
   1cbbc:	cmp	r3, #0
   1cbc0:	bne	1cbd8 <__assert_fail@plt+0xba10>
   1cbc4:	bl	1109c <__errno_location@plt>
   1cbc8:	mov	r3, r0
   1cbcc:	ldr	r3, [r3]
   1cbd0:	cmp	r3, #9
   1cbd4:	beq	1cc04 <__assert_fail@plt+0xba3c>
   1cbd8:	ldrb	r3, [fp, #-7]
   1cbdc:	eor	r3, r3, #1
   1cbe0:	uxtb	r3, r3
   1cbe4:	cmp	r3, #0
   1cbe8:	beq	1cbfc <__assert_fail@plt+0xba34>
   1cbec:	bl	1109c <__errno_location@plt>
   1cbf0:	mov	r2, r0
   1cbf4:	mov	r3, #0
   1cbf8:	str	r3, [r2]
   1cbfc:	mvn	r3, #0
   1cc00:	b	1cc08 <__assert_fail@plt+0xba40>
   1cc04:	mov	r3, #0
   1cc08:	mov	r0, r3
   1cc0c:	sub	sp, fp, #4
   1cc10:	pop	{fp, pc}
   1cc14:	push	{fp}		; (str fp, [sp, #-4]!)
   1cc18:	add	fp, sp, #0
   1cc1c:	sub	sp, sp, #12
   1cc20:	strd	r0, [fp, #-12]
   1cc24:	ldrd	r2, [fp, #-12]
   1cc28:	subs	r0, r2, #1
   1cc2c:	sbc	r1, r3, #0
   1cc30:	ldrd	r2, [fp, #-12]
   1cc34:	and	r2, r2, r0
   1cc38:	and	r3, r3, r1
   1cc3c:	orr	r3, r2, r3
   1cc40:	cmp	r3, #0
   1cc44:	moveq	r3, #1
   1cc48:	movne	r3, #0
   1cc4c:	uxtb	r3, r3
   1cc50:	mov	r0, r3
   1cc54:	add	sp, fp, #0
   1cc58:	pop	{fp}		; (ldr fp, [sp], #4)
   1cc5c:	bx	lr
   1cc60:	push	{fp}		; (str fp, [sp, #-4]!)
   1cc64:	add	fp, sp, #0
   1cc68:	sub	sp, sp, #12
   1cc6c:	str	r0, [fp, #-8]
   1cc70:	ldr	r1, [fp, #-8]
   1cc74:	mov	r2, #0
   1cc78:	mov	r3, #0
   1cc7c:	strd	r2, [r1, #16]
   1cc80:	ldr	r3, [fp, #-8]
   1cc84:	ldr	r2, [pc, #16]	; 1cc9c <__assert_fail@plt+0xbad4>
   1cc88:	str	r2, [r3, #24]
   1cc8c:	nop			; (mov r0, r0)
   1cc90:	add	sp, fp, #0
   1cc94:	pop	{fp}		; (ldr fp, [sp], #4)
   1cc98:	bx	lr
   1cc9c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1cca0:	push	{fp, lr}
   1cca4:	add	fp, sp, #4
   1cca8:	sub	sp, sp, #8
   1ccac:	str	r0, [fp, #-8]
   1ccb0:	str	r1, [fp, #-12]
   1ccb4:	ldr	r3, [fp, #-8]
   1ccb8:	ldr	r3, [r3, #24]
   1ccbc:	ldr	r2, [pc, #232]	; 1cdac <__assert_fail@plt+0xbbe4>
   1ccc0:	cmp	r3, r2
   1ccc4:	beq	1ccdc <__assert_fail@plt+0xbb14>
   1ccc8:	ldr	r3, [pc, #224]	; 1cdb0 <__assert_fail@plt+0xbbe8>
   1cccc:	mov	r2, #60	; 0x3c
   1ccd0:	ldr	r1, [pc, #220]	; 1cdb4 <__assert_fail@plt+0xbbec>
   1ccd4:	ldr	r0, [pc, #220]	; 1cdb8 <__assert_fail@plt+0xbbf0>
   1ccd8:	bl	111c8 <__assert_fail@plt>
   1ccdc:	ldr	r3, [fp, #-8]
   1cce0:	ldrd	r2, [r3, #16]
   1cce4:	orrs	r3, r2, r3
   1cce8:	beq	1cd2c <__assert_fail@plt+0xbb64>
   1ccec:	ldr	r3, [fp, #-12]
   1ccf0:	ldrd	r0, [r3, #96]	; 0x60
   1ccf4:	ldr	r3, [fp, #-8]
   1ccf8:	ldrd	r2, [r3]
   1ccfc:	cmp	r1, r3
   1cd00:	cmpeq	r0, r2
   1cd04:	bne	1cd2c <__assert_fail@plt+0xbb64>
   1cd08:	ldr	r3, [fp, #-12]
   1cd0c:	ldrd	r0, [r3]
   1cd10:	ldr	r3, [fp, #-8]
   1cd14:	ldrd	r2, [r3, #8]
   1cd18:	cmp	r1, r3
   1cd1c:	cmpeq	r0, r2
   1cd20:	bne	1cd2c <__assert_fail@plt+0xbb64>
   1cd24:	mov	r3, #1
   1cd28:	b	1cda0 <__assert_fail@plt+0xbbd8>
   1cd2c:	ldr	r3, [fp, #-8]
   1cd30:	ldrd	r2, [r3, #16]
   1cd34:	adds	r2, r2, #1
   1cd38:	adc	r3, r3, #0
   1cd3c:	ldr	r1, [fp, #-8]
   1cd40:	strd	r2, [r1, #16]
   1cd44:	ldr	r3, [fp, #-8]
   1cd48:	ldrd	r2, [r3, #16]
   1cd4c:	mov	r0, r2
   1cd50:	mov	r1, r3
   1cd54:	bl	1cc14 <__assert_fail@plt+0xba4c>
   1cd58:	mov	r3, r0
   1cd5c:	cmp	r3, #0
   1cd60:	beq	1cd9c <__assert_fail@plt+0xbbd4>
   1cd64:	ldr	r3, [fp, #-8]
   1cd68:	ldrd	r2, [r3, #16]
   1cd6c:	orrs	r3, r2, r3
   1cd70:	bne	1cd7c <__assert_fail@plt+0xbbb4>
   1cd74:	mov	r3, #1
   1cd78:	b	1cda0 <__assert_fail@plt+0xbbd8>
   1cd7c:	ldr	r3, [fp, #-12]
   1cd80:	ldrd	r2, [r3]
   1cd84:	ldr	r1, [fp, #-8]
   1cd88:	strd	r2, [r1, #8]
   1cd8c:	ldr	r3, [fp, #-12]
   1cd90:	ldrd	r2, [r3, #96]	; 0x60
   1cd94:	ldr	r1, [fp, #-8]
   1cd98:	strd	r2, [r1]
   1cd9c:	mov	r3, #0
   1cda0:	mov	r0, r3
   1cda4:	sub	sp, fp, #4
   1cda8:	pop	{fp, pc}
   1cdac:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1cdb0:	andeq	pc, r1, r4, ror #11
   1cdb4:			; <UNDEFINED> instruction: 0x0001f5b8
   1cdb8:	andeq	pc, r1, ip, asr #11
   1cdbc:	push	{fp, lr}
   1cdc0:	add	fp, sp, #4
   1cdc4:	sub	sp, sp, #32
   1cdc8:	str	r0, [fp, #-24]	; 0xffffffe8
   1cdcc:	mov	r3, #0
   1cdd0:	str	r3, [fp, #-8]
   1cdd4:	mov	r3, #0
   1cdd8:	str	r3, [fp, #-12]
   1cddc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cde0:	bl	110c0 <fileno@plt>
   1cde4:	str	r0, [fp, #-16]
   1cde8:	ldr	r3, [fp, #-16]
   1cdec:	cmp	r3, #0
   1cdf0:	bge	1ce04 <__assert_fail@plt+0xbc3c>
   1cdf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cdf8:	bl	110cc <fclose@plt>
   1cdfc:	mov	r3, r0
   1ce00:	b	1cea8 <__assert_fail@plt+0xbce0>
   1ce04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ce08:	bl	11024 <__freading@plt>
   1ce0c:	mov	r3, r0
   1ce10:	cmp	r3, #0
   1ce14:	beq	1ce50 <__assert_fail@plt+0xbc88>
   1ce18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ce1c:	bl	110c0 <fileno@plt>
   1ce20:	mov	r1, r0
   1ce24:	mov	r3, #1
   1ce28:	str	r3, [sp]
   1ce2c:	mov	r2, #0
   1ce30:	mov	r3, #0
   1ce34:	mov	r0, r1
   1ce38:	bl	10fb8 <lseek64@plt>
   1ce3c:	mvn	r2, #0
   1ce40:	mvn	r3, #0
   1ce44:	cmp	r1, r3
   1ce48:	cmpeq	r0, r2
   1ce4c:	beq	1ce74 <__assert_fail@plt+0xbcac>
   1ce50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ce54:	bl	1d2f8 <__assert_fail@plt+0xc130>
   1ce58:	mov	r3, r0
   1ce5c:	cmp	r3, #0
   1ce60:	beq	1ce74 <__assert_fail@plt+0xbcac>
   1ce64:	bl	1109c <__errno_location@plt>
   1ce68:	mov	r3, r0
   1ce6c:	ldr	r3, [r3]
   1ce70:	str	r3, [fp, #-8]
   1ce74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1ce78:	bl	110cc <fclose@plt>
   1ce7c:	str	r0, [fp, #-12]
   1ce80:	ldr	r3, [fp, #-8]
   1ce84:	cmp	r3, #0
   1ce88:	beq	1cea4 <__assert_fail@plt+0xbcdc>
   1ce8c:	bl	1109c <__errno_location@plt>
   1ce90:	mov	r2, r0
   1ce94:	ldr	r3, [fp, #-8]
   1ce98:	str	r3, [r2]
   1ce9c:	mvn	r3, #0
   1cea0:	str	r3, [fp, #-12]
   1cea4:	ldr	r3, [fp, #-12]
   1cea8:	mov	r0, r3
   1ceac:	sub	sp, fp, #4
   1ceb0:	pop	{fp, pc}
   1ceb4:	push	{r1, r2, r3}
   1ceb8:	push	{fp, lr}
   1cebc:	add	fp, sp, #4
   1cec0:	sub	sp, sp, #36	; 0x24
   1cec4:	str	r0, [fp, #-36]	; 0xffffffdc
   1cec8:	mvn	r3, #0
   1cecc:	str	r3, [fp, #-12]
   1ced0:	add	r3, fp, #8
   1ced4:	str	r3, [fp, #-32]	; 0xffffffe0
   1ced8:	ldr	r3, [fp, #4]
   1cedc:	cmp	r3, #0
   1cee0:	beq	1cef4 <__assert_fail@plt+0xbd2c>
   1cee4:	ldr	r2, [pc, #432]	; 1d09c <__assert_fail@plt+0xbed4>
   1cee8:	cmp	r3, r2
   1ceec:	beq	1cf1c <__assert_fail@plt+0xbd54>
   1cef0:	b	1cf44 <__assert_fail@plt+0xbd7c>
   1cef4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cef8:	add	r2, r3, #4
   1cefc:	str	r2, [fp, #-32]	; 0xffffffe0
   1cf00:	ldr	r3, [r3]
   1cf04:	str	r3, [fp, #-16]
   1cf08:	ldr	r1, [fp, #-16]
   1cf0c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1cf10:	bl	1d0b4 <__assert_fail@plt+0xbeec>
   1cf14:	str	r0, [fp, #-12]
   1cf18:	b	1d084 <__assert_fail@plt+0xbebc>
   1cf1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cf20:	add	r2, r3, #4
   1cf24:	str	r2, [fp, #-32]	; 0xffffffe0
   1cf28:	ldr	r3, [r3]
   1cf2c:	str	r3, [fp, #-20]	; 0xffffffec
   1cf30:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cf34:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1cf38:	bl	1d0ec <__assert_fail@plt+0xbf24>
   1cf3c:	str	r0, [fp, #-12]
   1cf40:	b	1d084 <__assert_fail@plt+0xbebc>
   1cf44:	ldr	r3, [fp, #4]
   1cf48:	cmp	r3, #11
   1cf4c:	beq	1d014 <__assert_fail@plt+0xbe4c>
   1cf50:	cmp	r3, #11
   1cf54:	bgt	1cfb4 <__assert_fail@plt+0xbdec>
   1cf58:	cmp	r3, #3
   1cf5c:	beq	1d014 <__assert_fail@plt+0xbe4c>
   1cf60:	cmp	r3, #3
   1cf64:	bgt	1cf84 <__assert_fail@plt+0xbdbc>
   1cf68:	cmp	r3, #1
   1cf6c:	beq	1d014 <__assert_fail@plt+0xbe4c>
   1cf70:	cmp	r3, #1
   1cf74:	bgt	1d028 <__assert_fail@plt+0xbe60>
   1cf78:	cmp	r3, #0
   1cf7c:	beq	1d028 <__assert_fail@plt+0xbe60>
   1cf80:	b	1d054 <__assert_fail@plt+0xbe8c>
   1cf84:	cmp	r3, #8
   1cf88:	beq	1d028 <__assert_fail@plt+0xbe60>
   1cf8c:	cmp	r3, #8
   1cf90:	bgt	1cfa0 <__assert_fail@plt+0xbdd8>
   1cf94:	cmp	r3, #4
   1cf98:	beq	1d028 <__assert_fail@plt+0xbe60>
   1cf9c:	b	1d054 <__assert_fail@plt+0xbe8c>
   1cfa0:	cmp	r3, #9
   1cfa4:	beq	1d014 <__assert_fail@plt+0xbe4c>
   1cfa8:	cmp	r3, #10
   1cfac:	beq	1d028 <__assert_fail@plt+0xbe60>
   1cfb0:	b	1d054 <__assert_fail@plt+0xbe8c>
   1cfb4:	ldr	r2, [pc, #228]	; 1d0a0 <__assert_fail@plt+0xbed8>
   1cfb8:	cmp	r3, r2
   1cfbc:	bgt	1cff0 <__assert_fail@plt+0xbe28>
   1cfc0:	ldr	r2, [pc, #212]	; 1d09c <__assert_fail@plt+0xbed4>
   1cfc4:	cmp	r3, r2
   1cfc8:	bge	1d028 <__assert_fail@plt+0xbe60>
   1cfcc:	ldr	r2, [pc, #208]	; 1d0a4 <__assert_fail@plt+0xbedc>
   1cfd0:	cmp	r3, r2
   1cfd4:	beq	1d014 <__assert_fail@plt+0xbe4c>
   1cfd8:	ldr	r2, [pc, #200]	; 1d0a8 <__assert_fail@plt+0xbee0>
   1cfdc:	cmp	r3, r2
   1cfe0:	beq	1d028 <__assert_fail@plt+0xbe60>
   1cfe4:	cmp	r3, #1024	; 0x400
   1cfe8:	beq	1d028 <__assert_fail@plt+0xbe60>
   1cfec:	b	1d054 <__assert_fail@plt+0xbe8c>
   1cff0:	ldr	r2, [pc, #180]	; 1d0ac <__assert_fail@plt+0xbee4>
   1cff4:	cmp	r3, r2
   1cff8:	beq	1d028 <__assert_fail@plt+0xbe60>
   1cffc:	ldr	r2, [pc, #168]	; 1d0ac <__assert_fail@plt+0xbee4>
   1d000:	cmp	r3, r2
   1d004:	blt	1d014 <__assert_fail@plt+0xbe4c>
   1d008:	ldr	r2, [pc, #160]	; 1d0b0 <__assert_fail@plt+0xbee8>
   1d00c:	cmp	r3, r2
   1d010:	bne	1d054 <__assert_fail@plt+0xbe8c>
   1d014:	ldr	r1, [fp, #4]
   1d018:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d01c:	bl	110e4 <fcntl64@plt>
   1d020:	str	r0, [fp, #-12]
   1d024:	b	1d080 <__assert_fail@plt+0xbeb8>
   1d028:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d02c:	add	r2, r3, #4
   1d030:	str	r2, [fp, #-32]	; 0xffffffe0
   1d034:	ldr	r3, [r3]
   1d038:	str	r3, [fp, #-24]	; 0xffffffe8
   1d03c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d040:	ldr	r1, [fp, #4]
   1d044:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d048:	bl	110e4 <fcntl64@plt>
   1d04c:	str	r0, [fp, #-12]
   1d050:	b	1d080 <__assert_fail@plt+0xbeb8>
   1d054:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d058:	add	r2, r3, #4
   1d05c:	str	r2, [fp, #-32]	; 0xffffffe0
   1d060:	ldr	r3, [r3]
   1d064:	str	r3, [fp, #-28]	; 0xffffffe4
   1d068:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d06c:	ldr	r1, [fp, #4]
   1d070:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d074:	bl	110e4 <fcntl64@plt>
   1d078:	str	r0, [fp, #-12]
   1d07c:	nop			; (mov r0, r0)
   1d080:	nop			; (mov r0, r0)
   1d084:	ldr	r3, [fp, #-12]
   1d088:	mov	r0, r3
   1d08c:	sub	sp, fp, #4
   1d090:	pop	{fp, lr}
   1d094:	add	sp, sp, #12
   1d098:	bx	lr
   1d09c:	andeq	r0, r0, r6, lsl #8
   1d0a0:	andeq	r0, r0, r7, lsl #8
   1d0a4:	andeq	r0, r0, r1, lsl #8
   1d0a8:	andeq	r0, r0, r2, lsl #8
   1d0ac:	andeq	r0, r0, r9, lsl #8
   1d0b0:	andeq	r0, r0, sl, lsl #8
   1d0b4:	push	{fp, lr}
   1d0b8:	add	fp, sp, #4
   1d0bc:	sub	sp, sp, #16
   1d0c0:	str	r0, [fp, #-16]
   1d0c4:	str	r1, [fp, #-20]	; 0xffffffec
   1d0c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d0cc:	mov	r1, #0
   1d0d0:	ldr	r0, [fp, #-16]
   1d0d4:	bl	110e4 <fcntl64@plt>
   1d0d8:	str	r0, [fp, #-8]
   1d0dc:	ldr	r3, [fp, #-8]
   1d0e0:	mov	r0, r3
   1d0e4:	sub	sp, fp, #4
   1d0e8:	pop	{fp, pc}
   1d0ec:	push	{fp, lr}
   1d0f0:	add	fp, sp, #4
   1d0f4:	sub	sp, sp, #24
   1d0f8:	str	r0, [fp, #-24]	; 0xffffffe8
   1d0fc:	str	r1, [fp, #-28]	; 0xffffffe4
   1d100:	ldr	r3, [pc, #292]	; 1d22c <__assert_fail@plt+0xc064>
   1d104:	ldr	r3, [r3]
   1d108:	cmp	r3, #0
   1d10c:	blt	1d180 <__assert_fail@plt+0xbfb8>
   1d110:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1d114:	ldr	r1, [pc, #276]	; 1d230 <__assert_fail@plt+0xc068>
   1d118:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d11c:	bl	110e4 <fcntl64@plt>
   1d120:	str	r0, [fp, #-8]
   1d124:	ldr	r3, [fp, #-8]
   1d128:	cmp	r3, #0
   1d12c:	bge	1d144 <__assert_fail@plt+0xbf7c>
   1d130:	bl	1109c <__errno_location@plt>
   1d134:	mov	r3, r0
   1d138:	ldr	r3, [r3]
   1d13c:	cmp	r3, #22
   1d140:	beq	1d154 <__assert_fail@plt+0xbf8c>
   1d144:	ldr	r3, [pc, #224]	; 1d22c <__assert_fail@plt+0xc064>
   1d148:	mov	r2, #1
   1d14c:	str	r2, [r3]
   1d150:	b	1d190 <__assert_fail@plt+0xbfc8>
   1d154:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d158:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d15c:	bl	1d0b4 <__assert_fail@plt+0xbeec>
   1d160:	str	r0, [fp, #-8]
   1d164:	ldr	r3, [fp, #-8]
   1d168:	cmp	r3, #0
   1d16c:	blt	1d190 <__assert_fail@plt+0xbfc8>
   1d170:	ldr	r3, [pc, #180]	; 1d22c <__assert_fail@plt+0xc064>
   1d174:	mvn	r2, #0
   1d178:	str	r2, [r3]
   1d17c:	b	1d190 <__assert_fail@plt+0xbfc8>
   1d180:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d184:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d188:	bl	1d0b4 <__assert_fail@plt+0xbeec>
   1d18c:	str	r0, [fp, #-8]
   1d190:	ldr	r3, [fp, #-8]
   1d194:	cmp	r3, #0
   1d198:	blt	1d21c <__assert_fail@plt+0xc054>
   1d19c:	ldr	r3, [pc, #136]	; 1d22c <__assert_fail@plt+0xc064>
   1d1a0:	ldr	r3, [r3]
   1d1a4:	cmn	r3, #1
   1d1a8:	bne	1d21c <__assert_fail@plt+0xc054>
   1d1ac:	mov	r1, #1
   1d1b0:	ldr	r0, [fp, #-8]
   1d1b4:	bl	110e4 <fcntl64@plt>
   1d1b8:	str	r0, [fp, #-12]
   1d1bc:	ldr	r3, [fp, #-12]
   1d1c0:	cmp	r3, #0
   1d1c4:	blt	1d1ec <__assert_fail@plt+0xc024>
   1d1c8:	ldr	r3, [fp, #-12]
   1d1cc:	orr	r3, r3, #1
   1d1d0:	mov	r2, r3
   1d1d4:	mov	r1, #2
   1d1d8:	ldr	r0, [fp, #-8]
   1d1dc:	bl	110e4 <fcntl64@plt>
   1d1e0:	mov	r3, r0
   1d1e4:	cmn	r3, #1
   1d1e8:	bne	1d21c <__assert_fail@plt+0xc054>
   1d1ec:	bl	1109c <__errno_location@plt>
   1d1f0:	mov	r3, r0
   1d1f4:	ldr	r3, [r3]
   1d1f8:	str	r3, [fp, #-16]
   1d1fc:	ldr	r0, [fp, #-8]
   1d200:	bl	111a4 <close@plt>
   1d204:	bl	1109c <__errno_location@plt>
   1d208:	mov	r2, r0
   1d20c:	ldr	r3, [fp, #-16]
   1d210:	str	r3, [r2]
   1d214:	mvn	r3, #0
   1d218:	str	r3, [fp, #-8]
   1d21c:	ldr	r3, [fp, #-8]
   1d220:	mov	r0, r3
   1d224:	sub	sp, fp, #4
   1d228:	pop	{fp, pc}
   1d22c:	andeq	r0, r3, r4, ror #5
   1d230:	andeq	r0, r0, r6, lsl #8
   1d234:	push	{r1, r2, r3}
   1d238:	push	{fp, lr}
   1d23c:	add	fp, sp, #4
   1d240:	sub	sp, sp, #20
   1d244:	str	r0, [fp, #-20]	; 0xffffffec
   1d248:	mov	r3, #0
   1d24c:	str	r3, [fp, #-12]
   1d250:	ldr	r3, [fp, #4]
   1d254:	and	r3, r3, #64	; 0x40
   1d258:	cmp	r3, #0
   1d25c:	beq	1d27c <__assert_fail@plt+0xc0b4>
   1d260:	add	r3, fp, #8
   1d264:	str	r3, [fp, #-16]
   1d268:	ldr	r3, [fp, #-16]
   1d26c:	add	r2, r3, #4
   1d270:	str	r2, [fp, #-16]
   1d274:	ldr	r3, [r3]
   1d278:	str	r3, [fp, #-12]
   1d27c:	ldr	r2, [fp, #-12]
   1d280:	ldr	r1, [fp, #4]
   1d284:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d288:	bl	11000 <open64@plt>
   1d28c:	mov	r3, r0
   1d290:	mov	r0, r3
   1d294:	bl	1b080 <__assert_fail@plt+0x9eb8>
   1d298:	mov	r3, r0
   1d29c:	mov	r0, r3
   1d2a0:	sub	sp, fp, #4
   1d2a4:	pop	{fp, lr}
   1d2a8:	add	sp, sp, #12
   1d2ac:	bx	lr
   1d2b0:	push	{fp, lr}
   1d2b4:	add	fp, sp, #4
   1d2b8:	sub	sp, sp, #16
   1d2bc:	str	r0, [fp, #-8]
   1d2c0:	ldr	r3, [fp, #-8]
   1d2c4:	ldr	r3, [r3]
   1d2c8:	and	r3, r3, #256	; 0x100
   1d2cc:	cmp	r3, #0
   1d2d0:	beq	1d2ec <__assert_fail@plt+0xc124>
   1d2d4:	mov	r3, #1
   1d2d8:	str	r3, [sp]
   1d2dc:	mov	r2, #0
   1d2e0:	mov	r3, #0
   1d2e4:	ldr	r0, [fp, #-8]
   1d2e8:	bl	1d3e4 <__assert_fail@plt+0xc21c>
   1d2ec:	nop			; (mov r0, r0)
   1d2f0:	sub	sp, fp, #4
   1d2f4:	pop	{fp, pc}
   1d2f8:	push	{fp, lr}
   1d2fc:	add	fp, sp, #4
   1d300:	sub	sp, sp, #8
   1d304:	str	r0, [fp, #-8]
   1d308:	ldr	r3, [fp, #-8]
   1d30c:	cmp	r3, #0
   1d310:	beq	1d328 <__assert_fail@plt+0xc160>
   1d314:	ldr	r0, [fp, #-8]
   1d318:	bl	11024 <__freading@plt>
   1d31c:	mov	r3, r0
   1d320:	cmp	r3, #0
   1d324:	bne	1d338 <__assert_fail@plt+0xc170>
   1d328:	ldr	r0, [fp, #-8]
   1d32c:	bl	10f10 <fflush@plt>
   1d330:	mov	r3, r0
   1d334:	b	1d34c <__assert_fail@plt+0xc184>
   1d338:	ldr	r0, [fp, #-8]
   1d33c:	bl	1d2b0 <__assert_fail@plt+0xc0e8>
   1d340:	ldr	r0, [fp, #-8]
   1d344:	bl	10f10 <fflush@plt>
   1d348:	mov	r3, r0
   1d34c:	mov	r0, r3
   1d350:	sub	sp, fp, #4
   1d354:	pop	{fp, pc}
   1d358:	push	{r4, fp, lr}
   1d35c:	add	fp, sp, #8
   1d360:	sub	sp, sp, #20
   1d364:	str	r0, [fp, #-24]	; 0xffffffe8
   1d368:	bl	1109c <__errno_location@plt>
   1d36c:	mov	r3, r0
   1d370:	ldr	r3, [r3]
   1d374:	str	r3, [fp, #-20]	; 0xffffffec
   1d378:	bl	1109c <__errno_location@plt>
   1d37c:	mov	r3, r0
   1d380:	ldr	r3, [r3]
   1d384:	str	r3, [fp, #-16]
   1d388:	bl	1109c <__errno_location@plt>
   1d38c:	mov	r2, r0
   1d390:	mov	r3, #0
   1d394:	str	r3, [r2]
   1d398:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d39c:	bl	10f28 <free@plt>
   1d3a0:	bl	1109c <__errno_location@plt>
   1d3a4:	mov	r4, r0
   1d3a8:	bl	1109c <__errno_location@plt>
   1d3ac:	mov	r3, r0
   1d3b0:	ldr	r3, [r3]
   1d3b4:	cmp	r3, #0
   1d3b8:	moveq	r3, #1
   1d3bc:	movne	r3, #0
   1d3c0:	uxtb	r3, r3
   1d3c4:	lsl	r3, r3, #2
   1d3c8:	sub	r2, fp, #12
   1d3cc:	add	r3, r2, r3
   1d3d0:	ldr	r3, [r3, #-8]
   1d3d4:	str	r3, [r4]
   1d3d8:	nop			; (mov r0, r0)
   1d3dc:	sub	sp, fp, #8
   1d3e0:	pop	{r4, fp, pc}
   1d3e4:	push	{fp, lr}
   1d3e8:	add	fp, sp, #4
   1d3ec:	sub	sp, sp, #32
   1d3f0:	str	r0, [fp, #-16]
   1d3f4:	strd	r2, [fp, #-28]	; 0xffffffe4
   1d3f8:	ldr	r3, [fp, #-16]
   1d3fc:	ldr	r2, [r3, #8]
   1d400:	ldr	r3, [fp, #-16]
   1d404:	ldr	r3, [r3, #4]
   1d408:	cmp	r2, r3
   1d40c:	bne	1d4a4 <__assert_fail@plt+0xc2dc>
   1d410:	ldr	r3, [fp, #-16]
   1d414:	ldr	r2, [r3, #20]
   1d418:	ldr	r3, [fp, #-16]
   1d41c:	ldr	r3, [r3, #16]
   1d420:	cmp	r2, r3
   1d424:	bne	1d4a4 <__assert_fail@plt+0xc2dc>
   1d428:	ldr	r3, [fp, #-16]
   1d42c:	ldr	r3, [r3, #36]	; 0x24
   1d430:	cmp	r3, #0
   1d434:	bne	1d4a4 <__assert_fail@plt+0xc2dc>
   1d438:	ldr	r0, [fp, #-16]
   1d43c:	bl	110c0 <fileno@plt>
   1d440:	mov	r1, r0
   1d444:	ldr	r3, [fp, #4]
   1d448:	str	r3, [sp]
   1d44c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d450:	mov	r0, r1
   1d454:	bl	10fb8 <lseek64@plt>
   1d458:	strd	r0, [fp, #-12]
   1d45c:	ldrd	r2, [fp, #-12]
   1d460:	mvn	r0, #0
   1d464:	mvn	r1, #0
   1d468:	cmp	r3, r1
   1d46c:	cmpeq	r2, r0
   1d470:	bne	1d47c <__assert_fail@plt+0xc2b4>
   1d474:	mvn	r3, #0
   1d478:	b	1d4bc <__assert_fail@plt+0xc2f4>
   1d47c:	ldr	r3, [fp, #-16]
   1d480:	ldr	r3, [r3]
   1d484:	bic	r2, r3, #16
   1d488:	ldr	r3, [fp, #-16]
   1d48c:	str	r2, [r3]
   1d490:	ldr	r1, [fp, #-16]
   1d494:	ldrd	r2, [fp, #-12]
   1d498:	strd	r2, [r1, #80]	; 0x50
   1d49c:	mov	r3, #0
   1d4a0:	b	1d4bc <__assert_fail@plt+0xc2f4>
   1d4a4:	ldr	r3, [fp, #4]
   1d4a8:	str	r3, [sp]
   1d4ac:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d4b0:	ldr	r0, [fp, #-16]
   1d4b4:	bl	110d8 <fseeko64@plt>
   1d4b8:	mov	r3, r0
   1d4bc:	mov	r0, r3
   1d4c0:	sub	sp, fp, #4
   1d4c4:	pop	{fp, pc}
   1d4c8:	push	{fp, lr}
   1d4cc:	add	fp, sp, #4
   1d4d0:	bl	1109c <__errno_location@plt>
   1d4d4:	mov	r2, r0
   1d4d8:	mov	r3, #12
   1d4dc:	str	r3, [r2]
   1d4e0:	mov	r3, #0
   1d4e4:	mov	r0, r3
   1d4e8:	pop	{fp, pc}
   1d4ec:	push	{fp, lr}
   1d4f0:	add	fp, sp, #4
   1d4f4:	sub	sp, sp, #8
   1d4f8:	str	r0, [fp, #-8]
   1d4fc:	ldr	r3, [fp, #-8]
   1d500:	mov	r0, r3
   1d504:	bl	1c61c <__assert_fail@plt+0xb454>
   1d508:	mov	r3, r0
   1d50c:	mov	r0, r3
   1d510:	sub	sp, fp, #4
   1d514:	pop	{fp, pc}
   1d518:	push	{fp, lr}
   1d51c:	add	fp, sp, #4
   1d520:	sub	sp, sp, #8
   1d524:	str	r0, [fp, #-8]
   1d528:	str	r1, [fp, #-12]
   1d52c:	ldr	r3, [fp, #-12]
   1d530:	cmp	r3, #0
   1d534:	moveq	r3, #1
   1d538:	movne	r3, #0
   1d53c:	uxtb	r3, r3
   1d540:	mov	r2, r3
   1d544:	ldr	r3, [fp, #-12]
   1d548:	orr	r3, r2, r3
   1d54c:	mov	r1, r3
   1d550:	ldr	r0, [fp, #-8]
   1d554:	bl	1c6c4 <__assert_fail@plt+0xb4fc>
   1d558:	mov	r3, r0
   1d55c:	mov	r0, r3
   1d560:	sub	sp, fp, #4
   1d564:	pop	{fp, pc}
   1d568:	push	{fp, lr}
   1d56c:	add	fp, sp, #4
   1d570:	sub	sp, sp, #8
   1d574:	str	r0, [fp, #-8]
   1d578:	str	r1, [fp, #-12]
   1d57c:	ldr	r3, [fp, #-8]
   1d580:	ldr	r2, [fp, #-12]
   1d584:	mov	r1, r2
   1d588:	mov	r0, r3
   1d58c:	bl	1c558 <__assert_fail@plt+0xb390>
   1d590:	mov	r3, r0
   1d594:	mov	r0, r3
   1d598:	sub	sp, fp, #4
   1d59c:	pop	{fp, pc}
   1d5a0:	push	{fp, lr}
   1d5a4:	add	fp, sp, #4
   1d5a8:	sub	sp, sp, #16
   1d5ac:	str	r0, [fp, #-8]
   1d5b0:	str	r1, [fp, #-12]
   1d5b4:	str	r2, [fp, #-16]
   1d5b8:	ldr	r3, [fp, #-12]
   1d5bc:	cmp	r3, #0
   1d5c0:	beq	1d5d0 <__assert_fail@plt+0xc408>
   1d5c4:	ldr	r3, [fp, #-16]
   1d5c8:	cmp	r3, #0
   1d5cc:	bne	1d5e0 <__assert_fail@plt+0xc418>
   1d5d0:	mov	r3, #1
   1d5d4:	str	r3, [fp, #-16]
   1d5d8:	ldr	r3, [fp, #-16]
   1d5dc:	str	r3, [fp, #-12]
   1d5e0:	ldr	r3, [fp, #-12]
   1d5e4:	ldr	r2, [fp, #-16]
   1d5e8:	mov	r1, r3
   1d5ec:	ldr	r0, [fp, #-8]
   1d5f0:	bl	1d70c <__assert_fail@plt+0xc544>
   1d5f4:	mov	r3, r0
   1d5f8:	mov	r0, r3
   1d5fc:	sub	sp, fp, #4
   1d600:	pop	{fp, pc}
   1d604:	push	{fp, lr}
   1d608:	add	fp, sp, #4
   1d60c:	sub	sp, sp, #8
   1d610:	mov	r0, #14
   1d614:	bl	11108 <nl_langinfo@plt>
   1d618:	str	r0, [fp, #-8]
   1d61c:	ldr	r3, [fp, #-8]
   1d620:	cmp	r3, #0
   1d624:	bne	1d630 <__assert_fail@plt+0xc468>
   1d628:	ldr	r3, [pc, #40]	; 1d658 <__assert_fail@plt+0xc490>
   1d62c:	str	r3, [fp, #-8]
   1d630:	ldr	r3, [fp, #-8]
   1d634:	ldrb	r3, [r3]
   1d638:	cmp	r3, #0
   1d63c:	bne	1d648 <__assert_fail@plt+0xc480>
   1d640:	ldr	r3, [pc, #20]	; 1d65c <__assert_fail@plt+0xc494>
   1d644:	str	r3, [fp, #-8]
   1d648:	ldr	r3, [fp, #-8]
   1d64c:	mov	r0, r3
   1d650:	sub	sp, fp, #4
   1d654:	pop	{fp, pc}
   1d658:	strdeq	pc, [r1], -r0
   1d65c:	strdeq	pc, [r1], -r4
   1d660:	push	{fp, lr}
   1d664:	add	fp, sp, #4
   1d668:	sub	sp, sp, #32
   1d66c:	str	r0, [fp, #-24]	; 0xffffffe8
   1d670:	str	r1, [fp, #-28]	; 0xffffffe4
   1d674:	str	r2, [fp, #-32]	; 0xffffffe0
   1d678:	str	r3, [fp, #-36]	; 0xffffffdc
   1d67c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d680:	cmp	r3, #0
   1d684:	bne	1d690 <__assert_fail@plt+0xc4c8>
   1d688:	sub	r3, fp, #16
   1d68c:	str	r3, [fp, #-24]	; 0xffffffe8
   1d690:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1d694:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1d698:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d69c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d6a0:	bl	10fe8 <mbrtowc@plt>
   1d6a4:	str	r0, [fp, #-8]
   1d6a8:	ldr	r3, [fp, #-8]
   1d6ac:	cmn	r3, #3
   1d6b0:	bls	1d6fc <__assert_fail@plt+0xc534>
   1d6b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d6b8:	cmp	r3, #0
   1d6bc:	beq	1d6fc <__assert_fail@plt+0xc534>
   1d6c0:	mov	r0, #0
   1d6c4:	bl	1dce0 <__assert_fail@plt+0xcb18>
   1d6c8:	mov	r3, r0
   1d6cc:	eor	r3, r3, #1
   1d6d0:	uxtb	r3, r3
   1d6d4:	cmp	r3, #0
   1d6d8:	beq	1d6fc <__assert_fail@plt+0xc534>
   1d6dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d6e0:	ldrb	r3, [r3]
   1d6e4:	strb	r3, [fp, #-9]
   1d6e8:	ldrb	r2, [fp, #-9]
   1d6ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d6f0:	str	r2, [r3]
   1d6f4:	mov	r3, #1
   1d6f8:	b	1d700 <__assert_fail@plt+0xc538>
   1d6fc:	ldr	r3, [fp, #-8]
   1d700:	mov	r0, r3
   1d704:	sub	sp, fp, #4
   1d708:	pop	{fp, pc}
   1d70c:	push	{fp, lr}
   1d710:	add	fp, sp, #4
   1d714:	sub	sp, sp, #24
   1d718:	str	r0, [fp, #-16]
   1d71c:	str	r1, [fp, #-20]	; 0xffffffec
   1d720:	str	r2, [fp, #-24]	; 0xffffffe8
   1d724:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d728:	cmp	r3, #0
   1d72c:	beq	1d768 <__assert_fail@plt+0xc5a0>
   1d730:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d734:	mvn	r0, #0
   1d738:	bl	1dee4 <__assert_fail@plt+0xcd1c>
   1d73c:	mov	r3, r0
   1d740:	mov	r2, r3
   1d744:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d748:	cmp	r2, r3
   1d74c:	bcs	1d768 <__assert_fail@plt+0xc5a0>
   1d750:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d754:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d758:	mul	r3, r2, r3
   1d75c:	str	r3, [fp, #-8]
   1d760:	mov	r3, #1
   1d764:	b	1d77c <__assert_fail@plt+0xc5b4>
   1d768:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d76c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d770:	mul	r3, r2, r3
   1d774:	str	r3, [fp, #-8]
   1d778:	mov	r3, #0
   1d77c:	cmp	r3, #0
   1d780:	beq	1d79c <__assert_fail@plt+0xc5d4>
   1d784:	bl	1109c <__errno_location@plt>
   1d788:	mov	r2, r0
   1d78c:	mov	r3, #12
   1d790:	str	r3, [r2]
   1d794:	mov	r3, #0
   1d798:	b	1d7b0 <__assert_fail@plt+0xc5e8>
   1d79c:	ldr	r3, [fp, #-8]
   1d7a0:	mov	r1, r3
   1d7a4:	ldr	r0, [fp, #-16]
   1d7a8:	bl	1c6c4 <__assert_fail@plt+0xb4fc>
   1d7ac:	mov	r3, r0
   1d7b0:	mov	r0, r3
   1d7b4:	sub	sp, fp, #4
   1d7b8:	pop	{fp, pc}
   1d7bc:	push	{fp, lr}
   1d7c0:	add	fp, sp, #4
   1d7c4:	sub	sp, sp, #8
   1d7c8:	str	r0, [fp, #-8]
   1d7cc:	mov	r2, #3
   1d7d0:	mov	r1, #0
   1d7d4:	ldr	r0, [fp, #-8]
   1d7d8:	bl	1ceb4 <__assert_fail@plt+0xbcec>
   1d7dc:	mov	r3, r0
   1d7e0:	mov	r0, r3
   1d7e4:	sub	sp, fp, #4
   1d7e8:	pop	{fp, pc}
   1d7ec:	push	{fp}		; (str fp, [sp, #-4]!)
   1d7f0:	add	fp, sp, #0
   1d7f4:	sub	sp, sp, #12
   1d7f8:	str	r0, [fp, #-8]
   1d7fc:	ldr	r3, [fp, #-8]
   1d800:	cmp	r3, #90	; 0x5a
   1d804:	bgt	1d820 <__assert_fail@plt+0xc658>
   1d808:	cmp	r3, #65	; 0x41
   1d80c:	bge	1d82c <__assert_fail@plt+0xc664>
   1d810:	sub	r3, r3, #48	; 0x30
   1d814:	cmp	r3, #9
   1d818:	bhi	1d834 <__assert_fail@plt+0xc66c>
   1d81c:	b	1d82c <__assert_fail@plt+0xc664>
   1d820:	sub	r3, r3, #97	; 0x61
   1d824:	cmp	r3, #25
   1d828:	bhi	1d834 <__assert_fail@plt+0xc66c>
   1d82c:	mov	r3, #1
   1d830:	b	1d838 <__assert_fail@plt+0xc670>
   1d834:	mov	r3, #0
   1d838:	mov	r0, r3
   1d83c:	add	sp, fp, #0
   1d840:	pop	{fp}		; (ldr fp, [sp], #4)
   1d844:	bx	lr
   1d848:	push	{fp}		; (str fp, [sp, #-4]!)
   1d84c:	add	fp, sp, #0
   1d850:	sub	sp, sp, #12
   1d854:	str	r0, [fp, #-8]
   1d858:	ldr	r3, [fp, #-8]
   1d85c:	cmp	r3, #65	; 0x41
   1d860:	blt	1d880 <__assert_fail@plt+0xc6b8>
   1d864:	cmp	r3, #90	; 0x5a
   1d868:	ble	1d878 <__assert_fail@plt+0xc6b0>
   1d86c:	sub	r3, r3, #97	; 0x61
   1d870:	cmp	r3, #25
   1d874:	bhi	1d880 <__assert_fail@plt+0xc6b8>
   1d878:	mov	r3, #1
   1d87c:	b	1d884 <__assert_fail@plt+0xc6bc>
   1d880:	mov	r3, #0
   1d884:	mov	r0, r3
   1d888:	add	sp, fp, #0
   1d88c:	pop	{fp}		; (ldr fp, [sp], #4)
   1d890:	bx	lr
   1d894:	push	{fp}		; (str fp, [sp, #-4]!)
   1d898:	add	fp, sp, #0
   1d89c:	sub	sp, sp, #12
   1d8a0:	str	r0, [fp, #-8]
   1d8a4:	ldr	r3, [fp, #-8]
   1d8a8:	add	r3, r3, #0
   1d8ac:	cmp	r3, #127	; 0x7f
   1d8b0:	bhi	1d8bc <__assert_fail@plt+0xc6f4>
   1d8b4:	mov	r3, #1
   1d8b8:	b	1d8c0 <__assert_fail@plt+0xc6f8>
   1d8bc:	mov	r3, #0
   1d8c0:	mov	r0, r3
   1d8c4:	add	sp, fp, #0
   1d8c8:	pop	{fp}		; (ldr fp, [sp], #4)
   1d8cc:	bx	lr
   1d8d0:	push	{fp}		; (str fp, [sp, #-4]!)
   1d8d4:	add	fp, sp, #0
   1d8d8:	sub	sp, sp, #12
   1d8dc:	str	r0, [fp, #-8]
   1d8e0:	ldr	r3, [fp, #-8]
   1d8e4:	cmp	r3, #32
   1d8e8:	beq	1d8f8 <__assert_fail@plt+0xc730>
   1d8ec:	ldr	r3, [fp, #-8]
   1d8f0:	cmp	r3, #9
   1d8f4:	bne	1d900 <__assert_fail@plt+0xc738>
   1d8f8:	mov	r3, #1
   1d8fc:	b	1d904 <__assert_fail@plt+0xc73c>
   1d900:	mov	r3, #0
   1d904:	and	r3, r3, #1
   1d908:	uxtb	r3, r3
   1d90c:	mov	r0, r3
   1d910:	add	sp, fp, #0
   1d914:	pop	{fp}		; (ldr fp, [sp], #4)
   1d918:	bx	lr
   1d91c:	push	{fp}		; (str fp, [sp, #-4]!)
   1d920:	add	fp, sp, #0
   1d924:	sub	sp, sp, #12
   1d928:	str	r0, [fp, #-8]
   1d92c:	ldr	r3, [fp, #-8]
   1d930:	cmp	r3, #0
   1d934:	blt	1d950 <__assert_fail@plt+0xc788>
   1d938:	cmp	r3, #31
   1d93c:	ble	1d948 <__assert_fail@plt+0xc780>
   1d940:	cmp	r3, #127	; 0x7f
   1d944:	bne	1d950 <__assert_fail@plt+0xc788>
   1d948:	mov	r3, #1
   1d94c:	b	1d954 <__assert_fail@plt+0xc78c>
   1d950:	mov	r3, #0
   1d954:	mov	r0, r3
   1d958:	add	sp, fp, #0
   1d95c:	pop	{fp}		; (ldr fp, [sp], #4)
   1d960:	bx	lr
   1d964:	push	{fp}		; (str fp, [sp, #-4]!)
   1d968:	add	fp, sp, #0
   1d96c:	sub	sp, sp, #12
   1d970:	str	r0, [fp, #-8]
   1d974:	ldr	r3, [fp, #-8]
   1d978:	sub	r3, r3, #48	; 0x30
   1d97c:	cmp	r3, #9
   1d980:	bhi	1d98c <__assert_fail@plt+0xc7c4>
   1d984:	mov	r3, #1
   1d988:	b	1d990 <__assert_fail@plt+0xc7c8>
   1d98c:	mov	r3, #0
   1d990:	mov	r0, r3
   1d994:	add	sp, fp, #0
   1d998:	pop	{fp}		; (ldr fp, [sp], #4)
   1d99c:	bx	lr
   1d9a0:	push	{fp}		; (str fp, [sp, #-4]!)
   1d9a4:	add	fp, sp, #0
   1d9a8:	sub	sp, sp, #12
   1d9ac:	str	r0, [fp, #-8]
   1d9b0:	ldr	r3, [fp, #-8]
   1d9b4:	sub	r3, r3, #33	; 0x21
   1d9b8:	cmp	r3, #93	; 0x5d
   1d9bc:	bhi	1d9c8 <__assert_fail@plt+0xc800>
   1d9c0:	mov	r3, #1
   1d9c4:	b	1d9cc <__assert_fail@plt+0xc804>
   1d9c8:	mov	r3, #0
   1d9cc:	mov	r0, r3
   1d9d0:	add	sp, fp, #0
   1d9d4:	pop	{fp}		; (ldr fp, [sp], #4)
   1d9d8:	bx	lr
   1d9dc:	push	{fp}		; (str fp, [sp, #-4]!)
   1d9e0:	add	fp, sp, #0
   1d9e4:	sub	sp, sp, #12
   1d9e8:	str	r0, [fp, #-8]
   1d9ec:	ldr	r3, [fp, #-8]
   1d9f0:	sub	r3, r3, #97	; 0x61
   1d9f4:	cmp	r3, #25
   1d9f8:	bhi	1da04 <__assert_fail@plt+0xc83c>
   1d9fc:	mov	r3, #1
   1da00:	b	1da08 <__assert_fail@plt+0xc840>
   1da04:	mov	r3, #0
   1da08:	mov	r0, r3
   1da0c:	add	sp, fp, #0
   1da10:	pop	{fp}		; (ldr fp, [sp], #4)
   1da14:	bx	lr
   1da18:	push	{fp}		; (str fp, [sp, #-4]!)
   1da1c:	add	fp, sp, #0
   1da20:	sub	sp, sp, #12
   1da24:	str	r0, [fp, #-8]
   1da28:	ldr	r3, [fp, #-8]
   1da2c:	sub	r3, r3, #32
   1da30:	cmp	r3, #94	; 0x5e
   1da34:	bhi	1da40 <__assert_fail@plt+0xc878>
   1da38:	mov	r3, #1
   1da3c:	b	1da44 <__assert_fail@plt+0xc87c>
   1da40:	mov	r3, #0
   1da44:	mov	r0, r3
   1da48:	add	sp, fp, #0
   1da4c:	pop	{fp}		; (ldr fp, [sp], #4)
   1da50:	bx	lr
   1da54:	push	{fp}		; (str fp, [sp, #-4]!)
   1da58:	add	fp, sp, #0
   1da5c:	sub	sp, sp, #12
   1da60:	str	r0, [fp, #-8]
   1da64:	ldr	r3, [fp, #-8]
   1da68:	cmp	r3, #64	; 0x40
   1da6c:	bgt	1da88 <__assert_fail@plt+0xc8c0>
   1da70:	cmp	r3, #58	; 0x3a
   1da74:	bge	1daa4 <__assert_fail@plt+0xc8dc>
   1da78:	sub	r3, r3, #33	; 0x21
   1da7c:	cmp	r3, #14
   1da80:	bhi	1daac <__assert_fail@plt+0xc8e4>
   1da84:	b	1daa4 <__assert_fail@plt+0xc8dc>
   1da88:	cmp	r3, #91	; 0x5b
   1da8c:	blt	1daac <__assert_fail@plt+0xc8e4>
   1da90:	cmp	r3, #96	; 0x60
   1da94:	ble	1daa4 <__assert_fail@plt+0xc8dc>
   1da98:	sub	r3, r3, #123	; 0x7b
   1da9c:	cmp	r3, #3
   1daa0:	bhi	1daac <__assert_fail@plt+0xc8e4>
   1daa4:	mov	r3, #1
   1daa8:	b	1dab0 <__assert_fail@plt+0xc8e8>
   1daac:	mov	r3, #0
   1dab0:	mov	r0, r3
   1dab4:	add	sp, fp, #0
   1dab8:	pop	{fp}		; (ldr fp, [sp], #4)
   1dabc:	bx	lr
   1dac0:	push	{fp}		; (str fp, [sp, #-4]!)
   1dac4:	add	fp, sp, #0
   1dac8:	sub	sp, sp, #12
   1dacc:	str	r0, [fp, #-8]
   1dad0:	ldr	r3, [fp, #-8]
   1dad4:	cmp	r3, #9
   1dad8:	blt	1daf4 <__assert_fail@plt+0xc92c>
   1dadc:	cmp	r3, #13
   1dae0:	ble	1daec <__assert_fail@plt+0xc924>
   1dae4:	cmp	r3, #32
   1dae8:	bne	1daf4 <__assert_fail@plt+0xc92c>
   1daec:	mov	r3, #1
   1daf0:	b	1daf8 <__assert_fail@plt+0xc930>
   1daf4:	mov	r3, #0
   1daf8:	mov	r0, r3
   1dafc:	add	sp, fp, #0
   1db00:	pop	{fp}		; (ldr fp, [sp], #4)
   1db04:	bx	lr
   1db08:	push	{fp}		; (str fp, [sp, #-4]!)
   1db0c:	add	fp, sp, #0
   1db10:	sub	sp, sp, #12
   1db14:	str	r0, [fp, #-8]
   1db18:	ldr	r3, [fp, #-8]
   1db1c:	sub	r3, r3, #65	; 0x41
   1db20:	cmp	r3, #25
   1db24:	bhi	1db30 <__assert_fail@plt+0xc968>
   1db28:	mov	r3, #1
   1db2c:	b	1db34 <__assert_fail@plt+0xc96c>
   1db30:	mov	r3, #0
   1db34:	mov	r0, r3
   1db38:	add	sp, fp, #0
   1db3c:	pop	{fp}		; (ldr fp, [sp], #4)
   1db40:	bx	lr
   1db44:	push	{fp}		; (str fp, [sp, #-4]!)
   1db48:	add	fp, sp, #0
   1db4c:	sub	sp, sp, #12
   1db50:	str	r0, [fp, #-8]
   1db54:	ldr	r3, [fp, #-8]
   1db58:	sub	r3, r3, #48	; 0x30
   1db5c:	cmp	r3, #54	; 0x36
   1db60:	addls	pc, pc, r3, lsl #2
   1db64:	b	1dc4c <__assert_fail@plt+0xca84>
   1db68:	b	1dc44 <__assert_fail@plt+0xca7c>
   1db6c:	b	1dc44 <__assert_fail@plt+0xca7c>
   1db70:	b	1dc44 <__assert_fail@plt+0xca7c>
   1db74:	b	1dc44 <__assert_fail@plt+0xca7c>
   1db78:	b	1dc44 <__assert_fail@plt+0xca7c>
   1db7c:	b	1dc44 <__assert_fail@plt+0xca7c>
   1db80:	b	1dc44 <__assert_fail@plt+0xca7c>
   1db84:	b	1dc44 <__assert_fail@plt+0xca7c>
   1db88:	b	1dc44 <__assert_fail@plt+0xca7c>
   1db8c:	b	1dc44 <__assert_fail@plt+0xca7c>
   1db90:	b	1dc4c <__assert_fail@plt+0xca84>
   1db94:	b	1dc4c <__assert_fail@plt+0xca84>
   1db98:	b	1dc4c <__assert_fail@plt+0xca84>
   1db9c:	b	1dc4c <__assert_fail@plt+0xca84>
   1dba0:	b	1dc4c <__assert_fail@plt+0xca84>
   1dba4:	b	1dc4c <__assert_fail@plt+0xca84>
   1dba8:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbac:	b	1dc44 <__assert_fail@plt+0xca7c>
   1dbb0:	b	1dc44 <__assert_fail@plt+0xca7c>
   1dbb4:	b	1dc44 <__assert_fail@plt+0xca7c>
   1dbb8:	b	1dc44 <__assert_fail@plt+0xca7c>
   1dbbc:	b	1dc44 <__assert_fail@plt+0xca7c>
   1dbc0:	b	1dc44 <__assert_fail@plt+0xca7c>
   1dbc4:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbc8:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbcc:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbd0:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbd4:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbd8:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbdc:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbe0:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbe4:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbe8:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbec:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbf0:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbf4:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbf8:	b	1dc4c <__assert_fail@plt+0xca84>
   1dbfc:	b	1dc4c <__assert_fail@plt+0xca84>
   1dc00:	b	1dc4c <__assert_fail@plt+0xca84>
   1dc04:	b	1dc4c <__assert_fail@plt+0xca84>
   1dc08:	b	1dc4c <__assert_fail@plt+0xca84>
   1dc0c:	b	1dc4c <__assert_fail@plt+0xca84>
   1dc10:	b	1dc4c <__assert_fail@plt+0xca84>
   1dc14:	b	1dc4c <__assert_fail@plt+0xca84>
   1dc18:	b	1dc4c <__assert_fail@plt+0xca84>
   1dc1c:	b	1dc4c <__assert_fail@plt+0xca84>
   1dc20:	b	1dc4c <__assert_fail@plt+0xca84>
   1dc24:	b	1dc4c <__assert_fail@plt+0xca84>
   1dc28:	b	1dc4c <__assert_fail@plt+0xca84>
   1dc2c:	b	1dc44 <__assert_fail@plt+0xca7c>
   1dc30:	b	1dc44 <__assert_fail@plt+0xca7c>
   1dc34:	b	1dc44 <__assert_fail@plt+0xca7c>
   1dc38:	b	1dc44 <__assert_fail@plt+0xca7c>
   1dc3c:	b	1dc44 <__assert_fail@plt+0xca7c>
   1dc40:	b	1dc44 <__assert_fail@plt+0xca7c>
   1dc44:	mov	r3, #1
   1dc48:	b	1dc50 <__assert_fail@plt+0xca88>
   1dc4c:	mov	r3, #0
   1dc50:	mov	r0, r3
   1dc54:	add	sp, fp, #0
   1dc58:	pop	{fp}		; (ldr fp, [sp], #4)
   1dc5c:	bx	lr
   1dc60:	push	{fp}		; (str fp, [sp, #-4]!)
   1dc64:	add	fp, sp, #0
   1dc68:	sub	sp, sp, #12
   1dc6c:	str	r0, [fp, #-8]
   1dc70:	ldr	r3, [fp, #-8]
   1dc74:	sub	r3, r3, #65	; 0x41
   1dc78:	cmp	r3, #25
   1dc7c:	bhi	1dc8c <__assert_fail@plt+0xcac4>
   1dc80:	ldr	r3, [fp, #-8]
   1dc84:	add	r3, r3, #32
   1dc88:	b	1dc90 <__assert_fail@plt+0xcac8>
   1dc8c:	ldr	r3, [fp, #-8]
   1dc90:	mov	r0, r3
   1dc94:	add	sp, fp, #0
   1dc98:	pop	{fp}		; (ldr fp, [sp], #4)
   1dc9c:	bx	lr
   1dca0:	push	{fp}		; (str fp, [sp, #-4]!)
   1dca4:	add	fp, sp, #0
   1dca8:	sub	sp, sp, #12
   1dcac:	str	r0, [fp, #-8]
   1dcb0:	ldr	r3, [fp, #-8]
   1dcb4:	sub	r3, r3, #97	; 0x61
   1dcb8:	cmp	r3, #25
   1dcbc:	bhi	1dccc <__assert_fail@plt+0xcb04>
   1dcc0:	ldr	r3, [fp, #-8]
   1dcc4:	sub	r3, r3, #32
   1dcc8:	b	1dcd0 <__assert_fail@plt+0xcb08>
   1dccc:	ldr	r3, [fp, #-8]
   1dcd0:	mov	r0, r3
   1dcd4:	add	sp, fp, #0
   1dcd8:	pop	{fp}		; (ldr fp, [sp], #4)
   1dcdc:	bx	lr
   1dce0:	push	{fp, lr}
   1dce4:	add	fp, sp, #4
   1dce8:	sub	sp, sp, #272	; 0x110
   1dcec:	str	r0, [fp, #-272]	; 0xfffffef0
   1dcf0:	sub	r3, fp, #264	; 0x108
   1dcf4:	ldr	r2, [pc, #116]	; 1dd70 <__assert_fail@plt+0xcba8>
   1dcf8:	mov	r1, r3
   1dcfc:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1dd00:	bl	1de84 <__assert_fail@plt+0xccbc>
   1dd04:	mov	r3, r0
   1dd08:	cmp	r3, #0
   1dd0c:	beq	1dd18 <__assert_fail@plt+0xcb50>
   1dd10:	mov	r3, #0
   1dd14:	b	1dd64 <__assert_fail@plt+0xcb9c>
   1dd18:	sub	r3, fp, #264	; 0x108
   1dd1c:	ldr	r1, [pc, #80]	; 1dd74 <__assert_fail@plt+0xcbac>
   1dd20:	mov	r0, r3
   1dd24:	bl	10ef8 <strcmp@plt>
   1dd28:	mov	r3, r0
   1dd2c:	cmp	r3, #0
   1dd30:	beq	1dd58 <__assert_fail@plt+0xcb90>
   1dd34:	sub	r3, fp, #264	; 0x108
   1dd38:	ldr	r1, [pc, #56]	; 1dd78 <__assert_fail@plt+0xcbb0>
   1dd3c:	mov	r0, r3
   1dd40:	bl	10ef8 <strcmp@plt>
   1dd44:	mov	r3, r0
   1dd48:	cmp	r3, #0
   1dd4c:	beq	1dd58 <__assert_fail@plt+0xcb90>
   1dd50:	mov	r3, #1
   1dd54:	b	1dd5c <__assert_fail@plt+0xcb94>
   1dd58:	mov	r3, #0
   1dd5c:	and	r3, r3, #1
   1dd60:	uxtb	r3, r3
   1dd64:	mov	r0, r3
   1dd68:	sub	sp, fp, #4
   1dd6c:	pop	{fp, pc}
   1dd70:	andeq	r0, r0, r1, lsl #2
   1dd74:	strdeq	pc, [r1], -ip
   1dd78:	andeq	pc, r1, r0, lsl #12
   1dd7c:	push	{fp, lr}
   1dd80:	add	fp, sp, #4
   1dd84:	sub	sp, sp, #16
   1dd88:	str	r0, [fp, #-16]
   1dd8c:	mov	r1, #0
   1dd90:	ldr	r0, [fp, #-16]
   1dd94:	bl	110f0 <setlocale@plt>
   1dd98:	str	r0, [fp, #-8]
   1dd9c:	ldr	r3, [fp, #-8]
   1dda0:	mov	r0, r3
   1dda4:	sub	sp, fp, #4
   1dda8:	pop	{fp, pc}
   1ddac:	push	{fp, lr}
   1ddb0:	add	fp, sp, #4
   1ddb4:	sub	sp, sp, #24
   1ddb8:	str	r0, [fp, #-16]
   1ddbc:	str	r1, [fp, #-20]	; 0xffffffec
   1ddc0:	str	r2, [fp, #-24]	; 0xffffffe8
   1ddc4:	ldr	r0, [fp, #-16]
   1ddc8:	bl	1dd7c <__assert_fail@plt+0xcbb4>
   1ddcc:	str	r0, [fp, #-8]
   1ddd0:	ldr	r3, [fp, #-8]
   1ddd4:	cmp	r3, #0
   1ddd8:	bne	1ddfc <__assert_fail@plt+0xcc34>
   1dddc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dde0:	cmp	r3, #0
   1dde4:	beq	1ddf4 <__assert_fail@plt+0xcc2c>
   1dde8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ddec:	mov	r2, #0
   1ddf0:	strb	r2, [r3]
   1ddf4:	mov	r3, #22
   1ddf8:	b	1de78 <__assert_fail@plt+0xccb0>
   1ddfc:	ldr	r0, [fp, #-8]
   1de00:	bl	1106c <strlen@plt>
   1de04:	str	r0, [fp, #-12]
   1de08:	ldr	r2, [fp, #-12]
   1de0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1de10:	cmp	r2, r3
   1de14:	bcs	1de38 <__assert_fail@plt+0xcc70>
   1de18:	ldr	r3, [fp, #-12]
   1de1c:	add	r3, r3, #1
   1de20:	mov	r2, r3
   1de24:	ldr	r1, [fp, #-8]
   1de28:	ldr	r0, [fp, #-20]	; 0xffffffec
   1de2c:	bl	10f40 <memcpy@plt>
   1de30:	mov	r3, #0
   1de34:	b	1de78 <__assert_fail@plt+0xccb0>
   1de38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1de3c:	cmp	r3, #0
   1de40:	beq	1de74 <__assert_fail@plt+0xccac>
   1de44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1de48:	sub	r3, r3, #1
   1de4c:	mov	r2, r3
   1de50:	ldr	r1, [fp, #-8]
   1de54:	ldr	r0, [fp, #-20]	; 0xffffffec
   1de58:	bl	10f40 <memcpy@plt>
   1de5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1de60:	sub	r3, r3, #1
   1de64:	ldr	r2, [fp, #-20]	; 0xffffffec
   1de68:	add	r3, r2, r3
   1de6c:	mov	r2, #0
   1de70:	strb	r2, [r3]
   1de74:	mov	r3, #34	; 0x22
   1de78:	mov	r0, r3
   1de7c:	sub	sp, fp, #4
   1de80:	pop	{fp, pc}
   1de84:	push	{fp, lr}
   1de88:	add	fp, sp, #4
   1de8c:	sub	sp, sp, #16
   1de90:	str	r0, [fp, #-8]
   1de94:	str	r1, [fp, #-12]
   1de98:	str	r2, [fp, #-16]
   1de9c:	ldr	r2, [fp, #-16]
   1dea0:	ldr	r1, [fp, #-12]
   1dea4:	ldr	r0, [fp, #-8]
   1dea8:	bl	1ddac <__assert_fail@plt+0xcbe4>
   1deac:	mov	r3, r0
   1deb0:	mov	r0, r3
   1deb4:	sub	sp, fp, #4
   1deb8:	pop	{fp, pc}
   1debc:	push	{fp, lr}
   1dec0:	add	fp, sp, #4
   1dec4:	sub	sp, sp, #8
   1dec8:	str	r0, [fp, #-8]
   1decc:	ldr	r0, [fp, #-8]
   1ded0:	bl	1dd7c <__assert_fail@plt+0xcbb4>
   1ded4:	mov	r3, r0
   1ded8:	mov	r0, r3
   1dedc:	sub	sp, fp, #4
   1dee0:	pop	{fp, pc}
   1dee4:	subs	r2, r1, #1
   1dee8:	bxeq	lr
   1deec:	bcc	1e0c4 <__assert_fail@plt+0xcefc>
   1def0:	cmp	r0, r1
   1def4:	bls	1e0a8 <__assert_fail@plt+0xcee0>
   1def8:	tst	r1, r2
   1defc:	beq	1e0b4 <__assert_fail@plt+0xceec>
   1df00:	clz	r3, r0
   1df04:	clz	r2, r1
   1df08:	sub	r3, r2, r3
   1df0c:	rsbs	r3, r3, #31
   1df10:	addne	r3, r3, r3, lsl #1
   1df14:	mov	r2, #0
   1df18:	addne	pc, pc, r3, lsl #2
   1df1c:	nop			; (mov r0, r0)
   1df20:	cmp	r0, r1, lsl #31
   1df24:	adc	r2, r2, r2
   1df28:	subcs	r0, r0, r1, lsl #31
   1df2c:	cmp	r0, r1, lsl #30
   1df30:	adc	r2, r2, r2
   1df34:	subcs	r0, r0, r1, lsl #30
   1df38:	cmp	r0, r1, lsl #29
   1df3c:	adc	r2, r2, r2
   1df40:	subcs	r0, r0, r1, lsl #29
   1df44:	cmp	r0, r1, lsl #28
   1df48:	adc	r2, r2, r2
   1df4c:	subcs	r0, r0, r1, lsl #28
   1df50:	cmp	r0, r1, lsl #27
   1df54:	adc	r2, r2, r2
   1df58:	subcs	r0, r0, r1, lsl #27
   1df5c:	cmp	r0, r1, lsl #26
   1df60:	adc	r2, r2, r2
   1df64:	subcs	r0, r0, r1, lsl #26
   1df68:	cmp	r0, r1, lsl #25
   1df6c:	adc	r2, r2, r2
   1df70:	subcs	r0, r0, r1, lsl #25
   1df74:	cmp	r0, r1, lsl #24
   1df78:	adc	r2, r2, r2
   1df7c:	subcs	r0, r0, r1, lsl #24
   1df80:	cmp	r0, r1, lsl #23
   1df84:	adc	r2, r2, r2
   1df88:	subcs	r0, r0, r1, lsl #23
   1df8c:	cmp	r0, r1, lsl #22
   1df90:	adc	r2, r2, r2
   1df94:	subcs	r0, r0, r1, lsl #22
   1df98:	cmp	r0, r1, lsl #21
   1df9c:	adc	r2, r2, r2
   1dfa0:	subcs	r0, r0, r1, lsl #21
   1dfa4:	cmp	r0, r1, lsl #20
   1dfa8:	adc	r2, r2, r2
   1dfac:	subcs	r0, r0, r1, lsl #20
   1dfb0:	cmp	r0, r1, lsl #19
   1dfb4:	adc	r2, r2, r2
   1dfb8:	subcs	r0, r0, r1, lsl #19
   1dfbc:	cmp	r0, r1, lsl #18
   1dfc0:	adc	r2, r2, r2
   1dfc4:	subcs	r0, r0, r1, lsl #18
   1dfc8:	cmp	r0, r1, lsl #17
   1dfcc:	adc	r2, r2, r2
   1dfd0:	subcs	r0, r0, r1, lsl #17
   1dfd4:	cmp	r0, r1, lsl #16
   1dfd8:	adc	r2, r2, r2
   1dfdc:	subcs	r0, r0, r1, lsl #16
   1dfe0:	cmp	r0, r1, lsl #15
   1dfe4:	adc	r2, r2, r2
   1dfe8:	subcs	r0, r0, r1, lsl #15
   1dfec:	cmp	r0, r1, lsl #14
   1dff0:	adc	r2, r2, r2
   1dff4:	subcs	r0, r0, r1, lsl #14
   1dff8:	cmp	r0, r1, lsl #13
   1dffc:	adc	r2, r2, r2
   1e000:	subcs	r0, r0, r1, lsl #13
   1e004:	cmp	r0, r1, lsl #12
   1e008:	adc	r2, r2, r2
   1e00c:	subcs	r0, r0, r1, lsl #12
   1e010:	cmp	r0, r1, lsl #11
   1e014:	adc	r2, r2, r2
   1e018:	subcs	r0, r0, r1, lsl #11
   1e01c:	cmp	r0, r1, lsl #10
   1e020:	adc	r2, r2, r2
   1e024:	subcs	r0, r0, r1, lsl #10
   1e028:	cmp	r0, r1, lsl #9
   1e02c:	adc	r2, r2, r2
   1e030:	subcs	r0, r0, r1, lsl #9
   1e034:	cmp	r0, r1, lsl #8
   1e038:	adc	r2, r2, r2
   1e03c:	subcs	r0, r0, r1, lsl #8
   1e040:	cmp	r0, r1, lsl #7
   1e044:	adc	r2, r2, r2
   1e048:	subcs	r0, r0, r1, lsl #7
   1e04c:	cmp	r0, r1, lsl #6
   1e050:	adc	r2, r2, r2
   1e054:	subcs	r0, r0, r1, lsl #6
   1e058:	cmp	r0, r1, lsl #5
   1e05c:	adc	r2, r2, r2
   1e060:	subcs	r0, r0, r1, lsl #5
   1e064:	cmp	r0, r1, lsl #4
   1e068:	adc	r2, r2, r2
   1e06c:	subcs	r0, r0, r1, lsl #4
   1e070:	cmp	r0, r1, lsl #3
   1e074:	adc	r2, r2, r2
   1e078:	subcs	r0, r0, r1, lsl #3
   1e07c:	cmp	r0, r1, lsl #2
   1e080:	adc	r2, r2, r2
   1e084:	subcs	r0, r0, r1, lsl #2
   1e088:	cmp	r0, r1, lsl #1
   1e08c:	adc	r2, r2, r2
   1e090:	subcs	r0, r0, r1, lsl #1
   1e094:	cmp	r0, r1
   1e098:	adc	r2, r2, r2
   1e09c:	subcs	r0, r0, r1
   1e0a0:	mov	r0, r2
   1e0a4:	bx	lr
   1e0a8:	moveq	r0, #1
   1e0ac:	movne	r0, #0
   1e0b0:	bx	lr
   1e0b4:	clz	r2, r1
   1e0b8:	rsb	r2, r2, #31
   1e0bc:	lsr	r0, r0, r2
   1e0c0:	bx	lr
   1e0c4:	cmp	r0, #0
   1e0c8:	mvnne	r0, #0
   1e0cc:	b	1e36c <__assert_fail@plt+0xd1a4>
   1e0d0:	cmp	r1, #0
   1e0d4:	beq	1e0c4 <__assert_fail@plt+0xcefc>
   1e0d8:	push	{r0, r1, lr}
   1e0dc:	bl	1dee4 <__assert_fail@plt+0xcd1c>
   1e0e0:	pop	{r1, r2, lr}
   1e0e4:	mul	r3, r2, r0
   1e0e8:	sub	r1, r1, r3
   1e0ec:	bx	lr
   1e0f0:	cmp	r1, #0
   1e0f4:	beq	1e300 <__assert_fail@plt+0xd138>
   1e0f8:	eor	ip, r0, r1
   1e0fc:	rsbmi	r1, r1, #0
   1e100:	subs	r2, r1, #1
   1e104:	beq	1e2cc <__assert_fail@plt+0xd104>
   1e108:	movs	r3, r0
   1e10c:	rsbmi	r3, r0, #0
   1e110:	cmp	r3, r1
   1e114:	bls	1e2d8 <__assert_fail@plt+0xd110>
   1e118:	tst	r1, r2
   1e11c:	beq	1e2e8 <__assert_fail@plt+0xd120>
   1e120:	clz	r2, r3
   1e124:	clz	r0, r1
   1e128:	sub	r2, r0, r2
   1e12c:	rsbs	r2, r2, #31
   1e130:	addne	r2, r2, r2, lsl #1
   1e134:	mov	r0, #0
   1e138:	addne	pc, pc, r2, lsl #2
   1e13c:	nop			; (mov r0, r0)
   1e140:	cmp	r3, r1, lsl #31
   1e144:	adc	r0, r0, r0
   1e148:	subcs	r3, r3, r1, lsl #31
   1e14c:	cmp	r3, r1, lsl #30
   1e150:	adc	r0, r0, r0
   1e154:	subcs	r3, r3, r1, lsl #30
   1e158:	cmp	r3, r1, lsl #29
   1e15c:	adc	r0, r0, r0
   1e160:	subcs	r3, r3, r1, lsl #29
   1e164:	cmp	r3, r1, lsl #28
   1e168:	adc	r0, r0, r0
   1e16c:	subcs	r3, r3, r1, lsl #28
   1e170:	cmp	r3, r1, lsl #27
   1e174:	adc	r0, r0, r0
   1e178:	subcs	r3, r3, r1, lsl #27
   1e17c:	cmp	r3, r1, lsl #26
   1e180:	adc	r0, r0, r0
   1e184:	subcs	r3, r3, r1, lsl #26
   1e188:	cmp	r3, r1, lsl #25
   1e18c:	adc	r0, r0, r0
   1e190:	subcs	r3, r3, r1, lsl #25
   1e194:	cmp	r3, r1, lsl #24
   1e198:	adc	r0, r0, r0
   1e19c:	subcs	r3, r3, r1, lsl #24
   1e1a0:	cmp	r3, r1, lsl #23
   1e1a4:	adc	r0, r0, r0
   1e1a8:	subcs	r3, r3, r1, lsl #23
   1e1ac:	cmp	r3, r1, lsl #22
   1e1b0:	adc	r0, r0, r0
   1e1b4:	subcs	r3, r3, r1, lsl #22
   1e1b8:	cmp	r3, r1, lsl #21
   1e1bc:	adc	r0, r0, r0
   1e1c0:	subcs	r3, r3, r1, lsl #21
   1e1c4:	cmp	r3, r1, lsl #20
   1e1c8:	adc	r0, r0, r0
   1e1cc:	subcs	r3, r3, r1, lsl #20
   1e1d0:	cmp	r3, r1, lsl #19
   1e1d4:	adc	r0, r0, r0
   1e1d8:	subcs	r3, r3, r1, lsl #19
   1e1dc:	cmp	r3, r1, lsl #18
   1e1e0:	adc	r0, r0, r0
   1e1e4:	subcs	r3, r3, r1, lsl #18
   1e1e8:	cmp	r3, r1, lsl #17
   1e1ec:	adc	r0, r0, r0
   1e1f0:	subcs	r3, r3, r1, lsl #17
   1e1f4:	cmp	r3, r1, lsl #16
   1e1f8:	adc	r0, r0, r0
   1e1fc:	subcs	r3, r3, r1, lsl #16
   1e200:	cmp	r3, r1, lsl #15
   1e204:	adc	r0, r0, r0
   1e208:	subcs	r3, r3, r1, lsl #15
   1e20c:	cmp	r3, r1, lsl #14
   1e210:	adc	r0, r0, r0
   1e214:	subcs	r3, r3, r1, lsl #14
   1e218:	cmp	r3, r1, lsl #13
   1e21c:	adc	r0, r0, r0
   1e220:	subcs	r3, r3, r1, lsl #13
   1e224:	cmp	r3, r1, lsl #12
   1e228:	adc	r0, r0, r0
   1e22c:	subcs	r3, r3, r1, lsl #12
   1e230:	cmp	r3, r1, lsl #11
   1e234:	adc	r0, r0, r0
   1e238:	subcs	r3, r3, r1, lsl #11
   1e23c:	cmp	r3, r1, lsl #10
   1e240:	adc	r0, r0, r0
   1e244:	subcs	r3, r3, r1, lsl #10
   1e248:	cmp	r3, r1, lsl #9
   1e24c:	adc	r0, r0, r0
   1e250:	subcs	r3, r3, r1, lsl #9
   1e254:	cmp	r3, r1, lsl #8
   1e258:	adc	r0, r0, r0
   1e25c:	subcs	r3, r3, r1, lsl #8
   1e260:	cmp	r3, r1, lsl #7
   1e264:	adc	r0, r0, r0
   1e268:	subcs	r3, r3, r1, lsl #7
   1e26c:	cmp	r3, r1, lsl #6
   1e270:	adc	r0, r0, r0
   1e274:	subcs	r3, r3, r1, lsl #6
   1e278:	cmp	r3, r1, lsl #5
   1e27c:	adc	r0, r0, r0
   1e280:	subcs	r3, r3, r1, lsl #5
   1e284:	cmp	r3, r1, lsl #4
   1e288:	adc	r0, r0, r0
   1e28c:	subcs	r3, r3, r1, lsl #4
   1e290:	cmp	r3, r1, lsl #3
   1e294:	adc	r0, r0, r0
   1e298:	subcs	r3, r3, r1, lsl #3
   1e29c:	cmp	r3, r1, lsl #2
   1e2a0:	adc	r0, r0, r0
   1e2a4:	subcs	r3, r3, r1, lsl #2
   1e2a8:	cmp	r3, r1, lsl #1
   1e2ac:	adc	r0, r0, r0
   1e2b0:	subcs	r3, r3, r1, lsl #1
   1e2b4:	cmp	r3, r1
   1e2b8:	adc	r0, r0, r0
   1e2bc:	subcs	r3, r3, r1
   1e2c0:	cmp	ip, #0
   1e2c4:	rsbmi	r0, r0, #0
   1e2c8:	bx	lr
   1e2cc:	teq	ip, r0
   1e2d0:	rsbmi	r0, r0, #0
   1e2d4:	bx	lr
   1e2d8:	movcc	r0, #0
   1e2dc:	asreq	r0, ip, #31
   1e2e0:	orreq	r0, r0, #1
   1e2e4:	bx	lr
   1e2e8:	clz	r2, r1
   1e2ec:	rsb	r2, r2, #31
   1e2f0:	cmp	ip, #0
   1e2f4:	lsr	r0, r3, r2
   1e2f8:	rsbmi	r0, r0, #0
   1e2fc:	bx	lr
   1e300:	cmp	r0, #0
   1e304:	mvngt	r0, #-2147483648	; 0x80000000
   1e308:	movlt	r0, #-2147483648	; 0x80000000
   1e30c:	b	1e36c <__assert_fail@plt+0xd1a4>
   1e310:	cmp	r1, #0
   1e314:	beq	1e300 <__assert_fail@plt+0xd138>
   1e318:	push	{r0, r1, lr}
   1e31c:	bl	1e0f8 <__assert_fail@plt+0xcf30>
   1e320:	pop	{r1, r2, lr}
   1e324:	mul	r3, r2, r0
   1e328:	sub	r1, r1, r3
   1e32c:	bx	lr
   1e330:	cmp	r3, #0
   1e334:	cmpeq	r2, #0
   1e338:	bne	1e350 <__assert_fail@plt+0xd188>
   1e33c:	cmp	r1, #0
   1e340:	cmpeq	r0, #0
   1e344:	mvnne	r1, #0
   1e348:	mvnne	r0, #0
   1e34c:	b	1e36c <__assert_fail@plt+0xd1a4>
   1e350:	sub	sp, sp, #8
   1e354:	push	{sp, lr}
   1e358:	bl	1e37c <__assert_fail@plt+0xd1b4>
   1e35c:	ldr	lr, [sp, #4]
   1e360:	add	sp, sp, #8
   1e364:	pop	{r2, r3}
   1e368:	bx	lr
   1e36c:	push	{r1, lr}
   1e370:	mov	r0, #8
   1e374:	bl	10eec <raise@plt>
   1e378:	pop	{r1, pc}
   1e37c:	cmp	r1, r3
   1e380:	push	{r4, r5, r6, r7, r8, r9, lr}
   1e384:	cmpeq	r0, r2
   1e388:	mov	r4, r0
   1e38c:	mov	r5, r1
   1e390:	ldr	r9, [sp, #28]
   1e394:	movcc	r0, #0
   1e398:	movcc	r1, #0
   1e39c:	bcc	1e494 <__assert_fail@plt+0xd2cc>
   1e3a0:	cmp	r3, #0
   1e3a4:	clzeq	ip, r2
   1e3a8:	clzne	ip, r3
   1e3ac:	addeq	ip, ip, #32
   1e3b0:	cmp	r5, #0
   1e3b4:	clzeq	r1, r4
   1e3b8:	addeq	r1, r1, #32
   1e3bc:	clzne	r1, r5
   1e3c0:	sub	ip, ip, r1
   1e3c4:	sub	lr, ip, #32
   1e3c8:	lsl	r7, r3, ip
   1e3cc:	rsb	r8, ip, #32
   1e3d0:	orr	r7, r7, r2, lsl lr
   1e3d4:	orr	r7, r7, r2, lsr r8
   1e3d8:	lsl	r6, r2, ip
   1e3dc:	cmp	r5, r7
   1e3e0:	cmpeq	r4, r6
   1e3e4:	movcc	r0, #0
   1e3e8:	movcc	r1, #0
   1e3ec:	bcc	1e408 <__assert_fail@plt+0xd240>
   1e3f0:	mov	r3, #1
   1e3f4:	subs	r4, r4, r6
   1e3f8:	lsl	r1, r3, lr
   1e3fc:	lsl	r0, r3, ip
   1e400:	orr	r1, r1, r3, lsr r8
   1e404:	sbc	r5, r5, r7
   1e408:	cmp	ip, #0
   1e40c:	beq	1e494 <__assert_fail@plt+0xd2cc>
   1e410:	lsrs	r3, r7, #1
   1e414:	rrx	r2, r6
   1e418:	mov	r6, ip
   1e41c:	b	1e440 <__assert_fail@plt+0xd278>
   1e420:	subs	r4, r4, r2
   1e424:	sbc	r5, r5, r3
   1e428:	adds	r4, r4, r4
   1e42c:	adc	r5, r5, r5
   1e430:	adds	r4, r4, #1
   1e434:	adc	r5, r5, #0
   1e438:	subs	r6, r6, #1
   1e43c:	beq	1e45c <__assert_fail@plt+0xd294>
   1e440:	cmp	r5, r3
   1e444:	cmpeq	r4, r2
   1e448:	bcs	1e420 <__assert_fail@plt+0xd258>
   1e44c:	adds	r4, r4, r4
   1e450:	adc	r5, r5, r5
   1e454:	subs	r6, r6, #1
   1e458:	bne	1e440 <__assert_fail@plt+0xd278>
   1e45c:	lsr	r6, r4, ip
   1e460:	lsr	r7, r5, ip
   1e464:	orr	r6, r6, r5, lsl r8
   1e468:	adds	r2, r0, r4
   1e46c:	orr	r6, r6, r5, lsr lr
   1e470:	adc	r3, r1, r5
   1e474:	lsl	r1, r7, ip
   1e478:	orr	r1, r1, r6, lsl lr
   1e47c:	lsl	r0, r6, ip
   1e480:	orr	r1, r1, r6, lsr r8
   1e484:	subs	r0, r2, r0
   1e488:	mov	r4, r6
   1e48c:	mov	r5, r7
   1e490:	sbc	r1, r3, r1
   1e494:	cmp	r9, #0
   1e498:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1e49c:	strd	r4, [r9]
   1e4a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e4a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e4a8:	mov	r7, r0
   1e4ac:	ldr	r6, [pc, #72]	; 1e4fc <__assert_fail@plt+0xd334>
   1e4b0:	ldr	r5, [pc, #72]	; 1e500 <__assert_fail@plt+0xd338>
   1e4b4:	add	r6, pc, r6
   1e4b8:	add	r5, pc, r5
   1e4bc:	sub	r6, r6, r5
   1e4c0:	mov	r8, r1
   1e4c4:	mov	r9, r2
   1e4c8:	bl	10ea8 <fstatfs64@plt-0x20>
   1e4cc:	asrs	r6, r6, #2
   1e4d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e4d4:	mov	r4, #0
   1e4d8:	add	r4, r4, #1
   1e4dc:	ldr	r3, [r5], #4
   1e4e0:	mov	r2, r9
   1e4e4:	mov	r1, r8
   1e4e8:	mov	r0, r7
   1e4ec:	blx	r3
   1e4f0:	cmp	r6, r4
   1e4f4:	bne	1e4d8 <__assert_fail@plt+0xd310>
   1e4f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e4fc:	andeq	r1, r1, r4, asr sl
   1e500:	andeq	r1, r1, ip, asr #20
   1e504:	bx	lr
   1e508:	ldr	r3, [pc, #12]	; 1e51c <__assert_fail@plt+0xd354>
   1e50c:	mov	r1, #0
   1e510:	add	r3, pc, r3
   1e514:	ldr	r2, [r3]
   1e518:	b	110a8 <__cxa_atexit@plt>
   1e51c:	andeq	r1, r1, r0, lsl #24
   1e520:	mov	r2, r1
   1e524:	mov	r1, r0
   1e528:	mov	r0, #3
   1e52c:	b	11180 <__xstat64@plt>
   1e530:	mov	r2, r1
   1e534:	mov	r1, r0
   1e538:	mov	r0, #3
   1e53c:	b	10fa0 <__fxstat64@plt>
   1e540:	mov	r2, r1
   1e544:	mov	r1, r0
   1e548:	mov	r0, #3
   1e54c:	b	111b0 <__lxstat64@plt>
   1e550:	push	{lr}		; (str lr, [sp, #-4]!)
   1e554:	sub	sp, sp, #12
   1e558:	str	r3, [sp]
   1e55c:	mov	r3, r2
   1e560:	mov	r2, r1
   1e564:	mov	r1, r0
   1e568:	mov	r0, #3
   1e56c:	bl	10f88 <__fxstatat64@plt>
   1e570:	add	sp, sp, #12
   1e574:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001e578 <.fini>:
   1e578:	push	{r3, lr}
   1e57c:	pop	{r3, pc}
