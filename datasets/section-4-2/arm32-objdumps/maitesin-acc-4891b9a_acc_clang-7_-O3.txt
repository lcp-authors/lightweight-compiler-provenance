
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011e84 <.init>:
   11e84:	push	{r3, lr}
   11e88:	bl	120cc <_start@@Base+0x3c>
   11e8c:	pop	{r3, pc}

Disassembly of section .plt:

00011e90 <fdopen@plt-0x14>:
   11e90:	push	{lr}		; (str lr, [sp, #-4]!)
   11e94:	ldr	lr, [pc, #4]	; 11ea0 <fdopen@plt-0x4>
   11e98:	add	lr, pc, lr
   11e9c:	ldr	pc, [lr, #8]!
   11ea0:	andeq	fp, r1, r0, ror #2

00011ea4 <fdopen@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #110592	; 0x1b000
   11eac:	ldr	pc, [ip, #352]!	; 0x160

00011eb0 <strtol@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #110592	; 0x1b000
   11eb8:	ldr	pc, [ip, #344]!	; 0x158

00011ebc <fopen@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #110592	; 0x1b000
   11ec4:	ldr	pc, [ip, #336]!	; 0x150

00011ec8 <fflush@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #110592	; 0x1b000
   11ed0:	ldr	pc, [ip, #328]!	; 0x148

00011ed4 <free@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #110592	; 0x1b000
   11edc:	ldr	pc, [ip, #320]!	; 0x140

00011ee0 <memcpy@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #110592	; 0x1b000
   11ee8:	ldr	pc, [ip, #312]!	; 0x138

00011eec <mmap64@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #110592	; 0x1b000
   11ef4:	ldr	pc, [ip, #304]!	; 0x130

00011ef8 <ftell@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #110592	; 0x1b000
   11f00:	ldr	pc, [ip, #296]!	; 0x128

00011f04 <uname@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #110592	; 0x1b000
   11f0c:	ldr	pc, [ip, #288]!	; 0x120

00011f10 <strdup@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #110592	; 0x1b000
   11f18:	ldr	pc, [ip, #280]!	; 0x118

00011f1c <realloc@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #110592	; 0x1b000
   11f24:	ldr	pc, [ip, #272]!	; 0x110

00011f28 <fwrite@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #110592	; 0x1b000
   11f30:	ldr	pc, [ip, #264]!	; 0x108

00011f34 <open64@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #110592	; 0x1b000
   11f3c:	ldr	pc, [ip, #256]!	; 0x100

00011f40 <getenv@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #110592	; 0x1b000
   11f48:	ldr	pc, [ip, #248]!	; 0xf8

00011f4c <malloc@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #110592	; 0x1b000
   11f54:	ldr	pc, [ip, #240]!	; 0xf0

00011f58 <__libc_start_main@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #110592	; 0x1b000
   11f60:	ldr	pc, [ip, #232]!	; 0xe8

00011f64 <strerror@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #110592	; 0x1b000
   11f6c:	ldr	pc, [ip, #224]!	; 0xe0

00011f70 <__gmon_start__@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #110592	; 0x1b000
   11f78:	ldr	pc, [ip, #216]!	; 0xd8

00011f7c <getpid@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #110592	; 0x1b000
   11f84:	ldr	pc, [ip, #208]!	; 0xd0

00011f88 <exit@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #110592	; 0x1b000
   11f90:	ldr	pc, [ip, #200]!	; 0xc8

00011f94 <strlen@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #110592	; 0x1b000
   11f9c:	ldr	pc, [ip, #192]!	; 0xc0

00011fa0 <strchr@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #110592	; 0x1b000
   11fa8:	ldr	pc, [ip, #184]!	; 0xb8

00011fac <getopt@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #110592	; 0x1b000
   11fb4:	ldr	pc, [ip, #176]!	; 0xb0

00011fb8 <fprintf@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #110592	; 0x1b000
   11fc0:	ldr	pc, [ip, #168]!	; 0xa8

00011fc4 <__errno_location@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #110592	; 0x1b000
   11fcc:	ldr	pc, [ip, #160]!	; 0xa0

00011fd0 <__cxa_atexit@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #110592	; 0x1b000
   11fd8:	ldr	pc, [ip, #152]!	; 0x98

00011fdc <mkdir@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #110592	; 0x1b000
   11fe4:	ldr	pc, [ip, #144]!	; 0x90

00011fe8 <memset@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #110592	; 0x1b000
   11ff0:	ldr	pc, [ip, #136]!	; 0x88

00011ff4 <strncpy@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #110592	; 0x1b000
   11ffc:	ldr	pc, [ip, #128]!	; 0x80

00012000 <prctl@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #110592	; 0x1b000
   12008:	ldr	pc, [ip, #120]!	; 0x78

0001200c <fclose@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #110592	; 0x1b000
   12014:	ldr	pc, [ip, #112]!	; 0x70

00012018 <strnlen@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #110592	; 0x1b000
   12020:	ldr	pc, [ip, #104]!	; 0x68

00012024 <munmap@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #110592	; 0x1b000
   1202c:	ldr	pc, [ip, #96]!	; 0x60

00012030 <fcntl64@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #110592	; 0x1b000
   12038:	ldr	pc, [ip, #88]!	; 0x58

0001203c <strrchr@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #110592	; 0x1b000
   12044:	ldr	pc, [ip, #80]!	; 0x50

00012048 <fputc@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #110592	; 0x1b000
   12050:	ldr	pc, [ip, #72]!	; 0x48

00012054 <msync@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #110592	; 0x1b000
   1205c:	ldr	pc, [ip, #64]!	; 0x40

00012060 <fread_unlocked@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #110592	; 0x1b000
   12068:	ldr	pc, [ip, #56]!	; 0x38

0001206c <fseek@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #110592	; 0x1b000
   12074:	ldr	pc, [ip, #48]!	; 0x30

00012078 <strncmp@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #110592	; 0x1b000
   12080:	ldr	pc, [ip, #40]!	; 0x28

00012084 <abort@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #110592	; 0x1b000
   1208c:	ldr	pc, [ip, #32]!

Disassembly of section .text:

00012090 <_start@@Base>:
   12090:	mov	fp, #0
   12094:	mov	lr, #0
   12098:	pop	{r1}		; (ldr r1, [sp], #4)
   1209c:	mov	r2, sp
   120a0:	push	{r2}		; (str r2, [sp, #-4]!)
   120a4:	push	{r0}		; (str r0, [sp, #-4]!)
   120a8:	ldr	ip, [pc, #16]	; 120c0 <_start@@Base+0x30>
   120ac:	push	{ip}		; (str ip, [sp, #-4]!)
   120b0:	ldr	r0, [pc, #12]	; 120c4 <_start@@Base+0x34>
   120b4:	ldr	r3, [pc, #12]	; 120c8 <_start@@Base+0x38>
   120b8:	bl	11f58 <__libc_start_main@plt>
   120bc:	bl	12084 <abort@plt>
   120c0:	andeq	sl, r1, r8, asr #29
   120c4:	andeq	r2, r1, r0, ror r4
   120c8:	andeq	sl, r1, r8, ror #28
   120cc:	ldr	r3, [pc, #20]	; 120e8 <_start@@Base+0x58>
   120d0:	ldr	r2, [pc, #20]	; 120ec <_start@@Base+0x5c>
   120d4:	add	r3, pc, r3
   120d8:	ldr	r2, [r3, r2]
   120dc:	cmp	r2, #0
   120e0:	bxeq	lr
   120e4:	b	11f70 <__gmon_start__@plt>
   120e8:	andeq	sl, r1, r4, lsr #30
   120ec:	andeq	r0, r0, r0, asr #1
   120f0:	ldr	r0, [pc, #24]	; 12110 <_start@@Base+0x80>
   120f4:	ldr	r3, [pc, #24]	; 12114 <_start@@Base+0x84>
   120f8:	cmp	r3, r0
   120fc:	bxeq	lr
   12100:	ldr	r3, [pc, #16]	; 12118 <_start@@Base+0x88>
   12104:	cmp	r3, #0
   12108:	bxeq	lr
   1210c:	bx	r3
   12110:	ldrdeq	sp, [r2], -r8
   12114:	ldrdeq	sp, [r2], -r8
   12118:	andeq	r0, r0, r0
   1211c:	ldr	r0, [pc, #36]	; 12148 <_start@@Base+0xb8>
   12120:	ldr	r1, [pc, #36]	; 1214c <_start@@Base+0xbc>
   12124:	sub	r1, r1, r0
   12128:	asr	r1, r1, #2
   1212c:	add	r1, r1, r1, lsr #31
   12130:	asrs	r1, r1, #1
   12134:	bxeq	lr
   12138:	ldr	r3, [pc, #16]	; 12150 <_start@@Base+0xc0>
   1213c:	cmp	r3, #0
   12140:	bxeq	lr
   12144:	bx	r3
   12148:	ldrdeq	sp, [r2], -r8
   1214c:	ldrdeq	sp, [r2], -r8
   12150:	andeq	r0, r0, r0
   12154:	push	{r4, lr}
   12158:	ldr	r4, [pc, #24]	; 12178 <_start@@Base+0xe8>
   1215c:	ldrb	r3, [r4]
   12160:	cmp	r3, #0
   12164:	popne	{r4, pc}
   12168:	bl	120f0 <_start@@Base+0x60>
   1216c:	mov	r3, #1
   12170:	strb	r3, [r4]
   12174:	pop	{r4, pc}
   12178:	strdeq	sp, [r2], -r4
   1217c:	b	1211c <_start@@Base+0x8c>

00012180 <load_file@@Base>:
   12180:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12184:	add	fp, sp, #24
   12188:	movw	r4, #53504	; 0xd100
   1218c:	mov	r8, r0
   12190:	movt	r4, #2
   12194:	ldrd	r0, [r4]
   12198:	adds	r0, r0, #1
   1219c:	adc	r1, r1, #0
   121a0:	strd	r0, [r4]
   121a4:	movw	r1, #46611	; 0xb613
   121a8:	mov	r0, r8
   121ac:	movt	r1, #1
   121b0:	bl	11ebc <fopen@plt>
   121b4:	mov	r5, r0
   121b8:	mov	r0, #16
   121bc:	mov	r1, r4
   121c0:	mov	r6, #0
   121c4:	cmp	r5, #0
   121c8:	movwne	r0, #8
   121cc:	ldr	r0, [r1, r0]!
   121d0:	adds	r0, r0, #1
   121d4:	str	r0, [r1]
   121d8:	ldr	r0, [r1, #4]
   121dc:	adc	r0, r0, #0
   121e0:	cmp	r5, #0
   121e4:	str	r0, [r1, #4]
   121e8:	beq	12328 <load_file@@Base+0x1a8>
   121ec:	mov	r0, r5
   121f0:	mov	r1, #0
   121f4:	mov	r2, #2
   121f8:	bl	1206c <fseek@plt>
   121fc:	mov	r1, #32
   12200:	cmp	r0, #0
   12204:	mov	r2, r4
   12208:	movweq	r1, #24
   1220c:	ldr	r1, [r2, r1]!
   12210:	adds	r1, r1, #1
   12214:	str	r1, [r2]
   12218:	ldr	r1, [r2, #4]
   1221c:	adc	r1, r1, #0
   12220:	cmp	r0, #0
   12224:	str	r1, [r2, #4]
   12228:	bne	12310 <load_file@@Base+0x190>
   1222c:	mov	r0, r5
   12230:	bl	11ef8 <ftell@plt>
   12234:	mov	r7, r0
   12238:	mov	r0, #48	; 0x30
   1223c:	mov	r1, r4
   12240:	cmn	r7, #1
   12244:	movweq	r0, #40	; 0x28
   12248:	ldr	r0, [r1, r0]!
   1224c:	adds	r0, r0, #1
   12250:	str	r0, [r1]
   12254:	ldr	r0, [r1, #4]
   12258:	adc	r0, r0, #0
   1225c:	cmn	r7, #1
   12260:	str	r0, [r1, #4]
   12264:	beq	12340 <load_file@@Base+0x1c0>
   12268:	add	r0, r7, #1
   1226c:	bl	11f4c <malloc@plt>
   12270:	mov	r6, r0
   12274:	mov	r0, r5
   12278:	mov	r1, #0
   1227c:	mov	r2, #0
   12280:	bl	1206c <fseek@plt>
   12284:	mov	r1, #64	; 0x40
   12288:	cmp	r0, #0
   1228c:	mov	r2, r4
   12290:	movwne	r1, #56	; 0x38
   12294:	ldr	r1, [r2, r1]!
   12298:	adds	r1, r1, #1
   1229c:	str	r1, [r2]
   122a0:	ldr	r1, [r2, #4]
   122a4:	adc	r1, r1, #0
   122a8:	cmp	r0, #0
   122ac:	str	r1, [r2, #4]
   122b0:	bne	12368 <load_file@@Base+0x1e8>
   122b4:	mov	r0, r6
   122b8:	mov	r1, #1
   122bc:	mov	r2, r7
   122c0:	mov	r3, r5
   122c4:	bl	12060 <fread_unlocked@plt>
   122c8:	mov	r1, #80	; 0x50
   122cc:	cmp	r0, #0
   122d0:	mov	r2, r4
   122d4:	movweq	r1, #72	; 0x48
   122d8:	ldr	r1, [r2, r1]!
   122dc:	adds	r1, r1, #1
   122e0:	str	r1, [r2]
   122e4:	ldr	r1, [r2, #4]
   122e8:	adc	r1, r1, #0
   122ec:	cmp	r0, #0
   122f0:	str	r1, [r2, #4]
   122f4:	beq	12390 <load_file@@Base+0x210>
   122f8:	ldrd	r2, [r4, #88]	; 0x58
   122fc:	mov	r1, #0
   12300:	strb	r1, [r6, r0]
   12304:	adds	r2, r2, #1
   12308:	adc	r3, r3, #0
   1230c:	strd	r2, [r4, #88]	; 0x58
   12310:	ldrd	r0, [r4, #96]	; 0x60
   12314:	adds	r0, r0, #1
   12318:	adc	r1, r1, #0
   1231c:	strd	r0, [r4, #96]	; 0x60
   12320:	mov	r0, r5
   12324:	bl	1200c <fclose@plt>
   12328:	ldrd	r0, [r4, #104]	; 0x68
   1232c:	adds	r0, r0, #1
   12330:	adc	r1, r1, #0
   12334:	strd	r0, [r4, #104]	; 0x68
   12338:	mov	r0, r6
   1233c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12340:	movw	r0, #53480	; 0xd0e8
   12344:	mov	r1, #51	; 0x33
   12348:	movt	r0, #2
   1234c:	ldr	r3, [r0]
   12350:	movw	r0, #44788	; 0xaef4
   12354:	movt	r0, #1
   12358:	mov	r2, #1
   1235c:	bl	11f28 <fwrite@plt>
   12360:	mov	r0, #1
   12364:	bl	11f88 <exit@plt>
   12368:	movw	r0, #53480	; 0xd0e8
   1236c:	mov	r1, #49	; 0x31
   12370:	movt	r0, #2
   12374:	ldr	r3, [r0]
   12378:	movw	r0, #44840	; 0xaf28
   1237c:	movt	r0, #1
   12380:	mov	r2, #1
   12384:	bl	11f28 <fwrite@plt>
   12388:	mov	r0, #1
   1238c:	bl	11f88 <exit@plt>
   12390:	movw	r0, #53480	; 0xd0e8
   12394:	movw	r1, #44890	; 0xaf5a
   12398:	mov	r2, r8
   1239c:	movt	r0, #2
   123a0:	movt	r1, #1
   123a4:	ldr	r0, [r0]
   123a8:	bl	11fb8 <fprintf@plt>
   123ac:	mov	r0, #1
   123b0:	bl	11f88 <exit@plt>
   123b4:	nop	{0}
   123b8:	nop	{0}
   123bc:	nop	{0}

000123c0 <my_main@@Base>:
   123c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   123c4:	add	fp, sp, #24
   123c8:	sub	sp, sp, #32
   123cc:	mov	r5, r1
   123d0:	movw	r1, #53616	; 0xd170
   123d4:	add	r2, pc, #132	; 0x84
   123d8:	movt	r1, #2
   123dc:	vld1.64	{d16-d17}, [r2 :128]
   123e0:	vld1.64	{d18-d19}, [r1 :128]
   123e4:	vadd.i64	q8, q9, q8
   123e8:	vst1.64	{d16-d17}, [r1 :128]
   123ec:	bl	12180 <load_file@@Base>
   123f0:	mov	r4, r0
   123f4:	add	r8, sp, #20
   123f8:	mov	r0, r8
   123fc:	mov	r1, r4
   12400:	bl	13050 <init_lexer@@Base>
   12404:	add	r7, sp, #16
   12408:	mov	r1, r8
   1240c:	mov	r0, r7
   12410:	bl	15ea0 <init_grammar@@Base>
   12414:	mov	r6, sp
   12418:	mov	r1, r7
   1241c:	mov	r2, r5
   12420:	mov	r0, r6
   12424:	bl	17110 <init_generator@@Base>
   12428:	mov	r0, r6
   1242c:	bl	171b0 <generate_code@@Base>
   12430:	mov	r0, r6
   12434:	bl	17170 <destroy_generator@@Base>
   12438:	mov	r0, r7
   1243c:	bl	15ee0 <destroy_grammar@@Base>
   12440:	mov	r0, r8
   12444:	bl	13090 <destroy_lexer@@Base>
   12448:	mov	r0, r4
   1244c:	bl	11ed4 <free@plt>
   12450:	mov	r0, #0
   12454:	sub	sp, fp, #24
   12458:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1245c:	nop	{0}
   12460:	andeq	r0, r0, r1
   12464:	andeq	r0, r0, r0
   12468:	andeq	r0, r0, r1
   1246c:	andeq	r0, r0, r0

00012470 <main@@Base>:
   12470:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12474:	add	fp, sp, #24
   12478:	sub	sp, sp, #32
   1247c:	movw	r7, #53616	; 0xd170
   12480:	mov	r5, r0
   12484:	add	r0, pc, #500	; 0x1f4
   12488:	movw	r2, #44914	; 0xaf72
   1248c:	mov	r4, r1
   12490:	movt	r7, #2
   12494:	vld1.64	{d16-d17}, [r0 :128]
   12498:	movt	r2, #1
   1249c:	mov	r0, r5
   124a0:	add	r6, r7, #16
   124a4:	vld1.64	{d18-d19}, [r6 :128]
   124a8:	vadd.i64	q8, q9, q8
   124ac:	vst1.64	{d16-d17}, [r6 :128]
   124b0:	bl	11fac <getopt@plt>
   124b4:	mov	r1, #24
   124b8:	cmn	r0, #1
   124bc:	mov	r8, #0
   124c0:	movwne	r1, #16
   124c4:	ldr	r1, [r6, r1]!
   124c8:	adds	r1, r1, #1
   124cc:	str	r1, [r6]
   124d0:	ldr	r1, [r6, #4]
   124d4:	adc	r1, r1, #0
   124d8:	cmn	r0, #1
   124dc:	str	r1, [r6, #4]
   124e0:	beq	12578 <main@@Base+0x108>
   124e4:	movw	r9, #53488	; 0xd0f0
   124e8:	movw	r6, #44914	; 0xaf72
   124ec:	movt	r9, #2
   124f0:	movt	r6, #1
   124f4:	cmp	r0, #111	; 0x6f
   124f8:	mov	r1, #40	; 0x28
   124fc:	movweq	r1, #32
   12500:	add	r1, r7, r1
   12504:	ldrd	r2, [r1, #16]
   12508:	adds	r2, r2, #1
   1250c:	adc	r3, r3, #0
   12510:	cmp	r0, #111	; 0x6f
   12514:	strd	r2, [r1, #16]
   12518:	bne	12530 <main@@Base+0xc0>
   1251c:	ldrd	r0, [r7, #64]	; 0x40
   12520:	ldr	r8, [r9]
   12524:	adds	r0, r0, #1
   12528:	adc	r1, r1, #0
   1252c:	strd	r0, [r7, #64]	; 0x40
   12530:	ldrd	r0, [r7, #72]	; 0x48
   12534:	mov	r2, r6
   12538:	adds	r0, r0, #1
   1253c:	adc	r1, r1, #0
   12540:	strd	r0, [r7, #72]	; 0x48
   12544:	mov	r0, r5
   12548:	mov	r1, r4
   1254c:	bl	11fac <getopt@plt>
   12550:	cmn	r0, #1
   12554:	mov	r1, #24
   12558:	movwne	r1, #16
   1255c:	add	r1, r7, r1
   12560:	ldrd	r2, [r1, #16]
   12564:	adds	r2, r2, #1
   12568:	adc	r3, r3, #0
   1256c:	cmn	r0, #1
   12570:	strd	r2, [r1, #16]
   12574:	bne	124f4 <main@@Base+0x84>
   12578:	movw	r0, #53472	; 0xd0e0
   1257c:	mov	r1, #72	; 0x48
   12580:	movt	r0, #2
   12584:	ldr	r0, [r0]
   12588:	cmp	r0, r5
   1258c:	movwlt	r1, #64	; 0x40
   12590:	add	r1, r7, r1
   12594:	ldrd	r2, [r1, #16]
   12598:	adds	r2, r2, #1
   1259c:	adc	r3, r3, #0
   125a0:	cmp	r0, r5
   125a4:	strd	r2, [r1, #16]
   125a8:	bge	12654 <main@@Base+0x1e4>
   125ac:	mov	r1, r7
   125b0:	vld1.64	{d16-d17}, [r1 :128]!
   125b4:	ldrd	r2, [r1, #80]	; 0x50
   125b8:	add	r6, pc, #192	; 0xc0
   125bc:	vld1.64	{d18-d19}, [r6 :128]
   125c0:	adds	r2, r2, #1
   125c4:	adc	r3, r3, #0
   125c8:	vadd.i64	q8, q8, q9
   125cc:	strd	r2, [r1, #80]	; 0x50
   125d0:	ldr	r0, [r4, r0, lsl #2]
   125d4:	vst1.64	{d16-d17}, [r7 :128]
   125d8:	bl	12180 <load_file@@Base>
   125dc:	mov	r4, r0
   125e0:	add	r5, sp, #20
   125e4:	mov	r0, r5
   125e8:	mov	r1, r4
   125ec:	bl	13050 <init_lexer@@Base>
   125f0:	add	r6, sp, #16
   125f4:	mov	r1, r5
   125f8:	mov	r0, r6
   125fc:	bl	15ea0 <init_grammar@@Base>
   12600:	movw	r2, #44917	; 0xaf75
   12604:	mov	r7, sp
   12608:	cmp	r8, #0
   1260c:	mov	r1, r6
   12610:	movt	r2, #1
   12614:	mov	r0, r7
   12618:	movne	r2, r8
   1261c:	bl	17110 <init_generator@@Base>
   12620:	mov	r0, r7
   12624:	bl	171b0 <generate_code@@Base>
   12628:	mov	r0, r7
   1262c:	bl	17170 <destroy_generator@@Base>
   12630:	mov	r0, r6
   12634:	bl	15ee0 <destroy_grammar@@Base>
   12638:	mov	r0, r5
   1263c:	bl	13090 <destroy_lexer@@Base>
   12640:	mov	r0, r4
   12644:	bl	11ed4 <free@plt>
   12648:	mov	r0, #0
   1264c:	sub	sp, fp, #24
   12650:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12654:	movw	r0, #53480	; 0xd0e8
   12658:	mov	r1, #45	; 0x2d
   1265c:	mov	r2, #1
   12660:	movt	r0, #2
   12664:	ldr	r3, [r0]
   12668:	movw	r0, #44921	; 0xaf79
   1266c:	movt	r0, #1
   12670:	bl	11f28 <fwrite@plt>
   12674:	mov	r0, #1
   12678:	bl	11f88 <exit@plt>
   1267c:	nop	{0}
   12680:	andeq	r0, r0, r1
   12684:	andeq	r0, r0, r0
   12688:	andeq	r0, r0, r1
   1268c:	andeq	r0, r0, r0
   12690:	push	{r4, r5, fp, lr}
   12694:	sub	sp, sp, #8
   12698:	movw	r4, #13547	; 0x34eb
   1269c:	movw	r0, #44992	; 0xafc0
   126a0:	movw	r1, #44967	; 0xafa7
   126a4:	movt	r4, #50461	; 0xc51d
   126a8:	movt	r0, #1
   126ac:	movt	r1, #1
   126b0:	mov	r2, r4
   126b4:	bl	17f68 <__generate_code_for_binary_boolean_expression@@Base+0x518>
   126b8:	movw	r1, #44972	; 0xafac
   126bc:	movw	r2, #56329	; 0xdc09
   126c0:	mov	r0, #0
   126c4:	mov	r3, #0
   126c8:	str	r4, [sp]
   126cc:	movt	r1, #1
   126d0:	movt	r2, #3122	; 0xc32
   126d4:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   126d8:	movw	r1, #53504	; 0xd100
   126dc:	mov	r0, #14
   126e0:	movt	r1, #2
   126e4:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   126e8:	movw	r1, #44982	; 0xafb6
   126ec:	movw	r2, #53840	; 0xd250
   126f0:	mov	r0, #1
   126f4:	mov	r3, #0
   126f8:	str	r4, [sp]
   126fc:	movt	r1, #1
   12700:	movt	r2, #34957	; 0x888d
   12704:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   12708:	movw	r5, #53616	; 0xd170
   1270c:	mov	r0, #2
   12710:	movt	r5, #2
   12714:	mov	r1, r5
   12718:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   1271c:	movw	r1, #44985	; 0xafb9
   12720:	movw	r2, #59238	; 0xe766
   12724:	mov	r0, #2
   12728:	mov	r3, #0
   1272c:	str	r4, [sp]
   12730:	movt	r1, #1
   12734:	movt	r2, #28363	; 0x6ecb
   12738:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   1273c:	add	r1, r5, #16
   12740:	mov	r0, #11
   12744:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   12748:	bl	196fc <__generate_code_for_binary_boolean_expression@@Base+0x1cac>
   1274c:	add	sp, sp, #8
   12750:	pop	{r4, r5, fp, lr}
   12754:	b	1a468 <__generate_code_for_binary_boolean_expression@@Base+0x2a18>
   12758:	push	{fp, lr}
   1275c:	bl	12690 <main@@Base+0x220>
   12760:	movw	r0, #53504	; 0xd100
   12764:	vmov.i32	q8, #0	; 0x00000000
   12768:	movt	r0, #2
   1276c:	add	r1, r0, #80	; 0x50
   12770:	vst1.64	{d16-d17}, [r1 :128]
   12774:	add	r1, r0, #64	; 0x40
   12778:	vst1.64	{d16-d17}, [r1 :128]
   1277c:	add	r1, r0, #48	; 0x30
   12780:	vst1.64	{d16-d17}, [r1 :128]
   12784:	add	r1, r0, #32
   12788:	vst1.64	{d16-d17}, [r1 :128]
   1278c:	add	r1, r0, #16
   12790:	vst1.64	{d16-d17}, [r1 :128]
   12794:	mov	r1, #96	; 0x60
   12798:	vst1.64	{d16-d17}, [r0 :128], r1
   1279c:	mov	r1, #0
   127a0:	vst1.64	{d16-d17}, [r0 :128]
   127a4:	movw	r0, #53616	; 0xd170
   127a8:	movt	r0, #2
   127ac:	vst1.64	{d16-d17}, [r0 :128]!
   127b0:	add	r2, r0, #64	; 0x40
   127b4:	str	r1, [r0, #80]	; 0x50
   127b8:	vst1.64	{d16-d17}, [r2 :128]
   127bc:	add	r2, r0, #48	; 0x30
   127c0:	vst1.64	{d16-d17}, [r2 :128]
   127c4:	add	r2, r0, #32
   127c8:	vst1.64	{d16-d17}, [r2 :128]
   127cc:	add	r2, r0, #16
   127d0:	vst1.64	{d16-d17}, [r2 :128]
   127d4:	mov	r2, #84	; 0x54
   127d8:	vst1.64	{d16-d17}, [r0 :128], r2
   127dc:	str	r1, [r0]
   127e0:	pop	{fp, pc}
   127e4:	movw	r0, #9872	; 0x2690
   127e8:	movw	r1, #10072	; 0x2758
   127ec:	movt	r0, #1
   127f0:	movt	r1, #1
   127f4:	b	1a918 <__gcov_flush@@Base+0xb4>
	...

00012800 <init_token_int_type@@Base>:
   12800:	movw	r1, #53728	; 0xd1e0
   12804:	add	r2, pc, #36	; 0x24
   12808:	movt	r1, #2
   1280c:	vld1.64	{d16-d17}, [r2 :128]
   12810:	vld1.64	{d18-d19}, [r1 :128]
   12814:	vadd.i64	q8, q9, q8
   12818:	vst1.64	{d16-d17}, [r1 :128]
   1281c:	mov	r1, #0
   12820:	str	r1, [r0]
   12824:	bx	lr
   12828:	nop	{0}
   1282c:	nop	{0}
   12830:	andeq	r0, r0, r1
   12834:	andeq	r0, r0, r0
   12838:	andeq	r0, r0, r1
   1283c:	andeq	r0, r0, r0

00012840 <init_token_int_value@@Base>:
   12840:	movw	r2, #53728	; 0xd1e0
   12844:	add	r3, pc, #36	; 0x24
   12848:	movt	r2, #2
   1284c:	vld1.64	{d16-d17}, [r3 :128]
   12850:	add	r2, r2, #16
   12854:	vld1.64	{d18-d19}, [r2 :128]
   12858:	vadd.i64	q8, q9, q8
   1285c:	vst1.64	{d16-d17}, [r2 :128]
   12860:	mov	r2, #1
   12864:	str	r2, [r0]
   12868:	str	r1, [r0, #4]
   1286c:	bx	lr
   12870:	andeq	r0, r0, r1
   12874:	andeq	r0, r0, r0
   12878:	andeq	r0, r0, r1
   1287c:	andeq	r0, r0, r0

00012880 <init_token_function@@Base>:
   12880:	movw	r2, #53728	; 0xd1e0
   12884:	add	r3, pc, #36	; 0x24
   12888:	movt	r2, #2
   1288c:	vld1.64	{d16-d17}, [r3 :128]
   12890:	add	r2, r2, #32
   12894:	vld1.64	{d18-d19}, [r2 :128]
   12898:	vadd.i64	q8, q9, q8
   1289c:	vst1.64	{d16-d17}, [r2 :128]
   128a0:	mov	r2, #2
   128a4:	str	r2, [r0]
   128a8:	str	r1, [r0, #4]
   128ac:	bx	lr
   128b0:	andeq	r0, r0, r1
   128b4:	andeq	r0, r0, r0
   128b8:	andeq	r0, r0, r1
   128bc:	andeq	r0, r0, r0

000128c0 <init_token_opar@@Base>:
   128c0:	movw	r1, #53728	; 0xd1e0
   128c4:	add	r2, pc, #36	; 0x24
   128c8:	movt	r1, #2
   128cc:	vld1.64	{d16-d17}, [r2 :128]
   128d0:	add	r1, r1, #48	; 0x30
   128d4:	vld1.64	{d18-d19}, [r1 :128]
   128d8:	vadd.i64	q8, q9, q8
   128dc:	vst1.64	{d16-d17}, [r1 :128]
   128e0:	mov	r1, #3
   128e4:	str	r1, [r0]
   128e8:	bx	lr
   128ec:	nop	{0}
   128f0:	andeq	r0, r0, r1
   128f4:	andeq	r0, r0, r0
   128f8:	andeq	r0, r0, r1
   128fc:	andeq	r0, r0, r0

00012900 <init_token_cpar@@Base>:
   12900:	movw	r1, #53728	; 0xd1e0
   12904:	add	r2, pc, #36	; 0x24
   12908:	movt	r1, #2
   1290c:	vld1.64	{d16-d17}, [r2 :128]
   12910:	add	r1, r1, #64	; 0x40
   12914:	vld1.64	{d18-d19}, [r1 :128]
   12918:	vadd.i64	q8, q9, q8
   1291c:	vst1.64	{d16-d17}, [r1 :128]
   12920:	mov	r1, #4
   12924:	str	r1, [r0]
   12928:	bx	lr
   1292c:	nop	{0}
   12930:	andeq	r0, r0, r1
   12934:	andeq	r0, r0, r0
   12938:	andeq	r0, r0, r1
   1293c:	andeq	r0, r0, r0

00012940 <init_token_obra@@Base>:
   12940:	movw	r1, #53728	; 0xd1e0
   12944:	add	r2, pc, #36	; 0x24
   12948:	movt	r1, #2
   1294c:	vld1.64	{d16-d17}, [r2 :128]
   12950:	add	r1, r1, #80	; 0x50
   12954:	vld1.64	{d18-d19}, [r1 :128]
   12958:	vadd.i64	q8, q9, q8
   1295c:	vst1.64	{d16-d17}, [r1 :128]
   12960:	mov	r1, #5
   12964:	str	r1, [r0]
   12968:	bx	lr
   1296c:	nop	{0}
   12970:	andeq	r0, r0, r1
   12974:	andeq	r0, r0, r0
   12978:	andeq	r0, r0, r1
   1297c:	andeq	r0, r0, r0

00012980 <init_token_cbra@@Base>:
   12980:	movw	r1, #53728	; 0xd1e0
   12984:	add	r2, pc, #36	; 0x24
   12988:	movt	r1, #2
   1298c:	vld1.64	{d16-d17}, [r2 :128]
   12990:	add	r1, r1, #96	; 0x60
   12994:	vld1.64	{d18-d19}, [r1 :128]
   12998:	vadd.i64	q8, q9, q8
   1299c:	vst1.64	{d16-d17}, [r1 :128]
   129a0:	mov	r1, #6
   129a4:	str	r1, [r0]
   129a8:	bx	lr
   129ac:	nop	{0}
   129b0:	andeq	r0, r0, r1
   129b4:	andeq	r0, r0, r0
   129b8:	andeq	r0, r0, r1
   129bc:	andeq	r0, r0, r0

000129c0 <init_token_return@@Base>:
   129c0:	movw	r1, #53840	; 0xd250
   129c4:	add	r2, pc, #36	; 0x24
   129c8:	movt	r1, #2
   129cc:	vld1.64	{d16-d17}, [r2 :128]
   129d0:	vld1.64	{d18-d19}, [r1 :128]
   129d4:	vadd.i64	q8, q9, q8
   129d8:	vst1.64	{d16-d17}, [r1 :128]
   129dc:	mov	r1, #7
   129e0:	str	r1, [r0]
   129e4:	bx	lr
   129e8:	nop	{0}
   129ec:	nop	{0}
   129f0:	andeq	r0, r0, r1
   129f4:	andeq	r0, r0, r0
   129f8:	andeq	r0, r0, r1
   129fc:	andeq	r0, r0, r0

00012a00 <init_token_semicolon@@Base>:
   12a00:	movw	r1, #53840	; 0xd250
   12a04:	add	r2, pc, #36	; 0x24
   12a08:	movt	r1, #2
   12a0c:	vld1.64	{d16-d17}, [r2 :128]
   12a10:	add	r1, r1, #16
   12a14:	vld1.64	{d18-d19}, [r1 :128]
   12a18:	vadd.i64	q8, q9, q8
   12a1c:	vst1.64	{d16-d17}, [r1 :128]
   12a20:	mov	r1, #8
   12a24:	str	r1, [r0]
   12a28:	bx	lr
   12a2c:	nop	{0}
   12a30:	andeq	r0, r0, r1
   12a34:	andeq	r0, r0, r0
   12a38:	andeq	r0, r0, r1
   12a3c:	andeq	r0, r0, r0

00012a40 <init_token_eof@@Base>:
   12a40:	movw	r1, #53840	; 0xd250
   12a44:	add	r2, pc, #36	; 0x24
   12a48:	movt	r1, #2
   12a4c:	vld1.64	{d16-d17}, [r2 :128]
   12a50:	add	r1, r1, #32
   12a54:	vld1.64	{d18-d19}, [r1 :128]
   12a58:	vadd.i64	q8, q9, q8
   12a5c:	vst1.64	{d16-d17}, [r1 :128]
   12a60:	mov	r1, #9
   12a64:	str	r1, [r0]
   12a68:	bx	lr
   12a6c:	nop	{0}
   12a70:	andeq	r0, r0, r1
   12a74:	andeq	r0, r0, r0
   12a78:	andeq	r0, r0, r1
   12a7c:	andeq	r0, r0, r0

00012a80 <init_token_if@@Base>:
   12a80:	movw	r1, #53840	; 0xd250
   12a84:	add	r2, pc, #36	; 0x24
   12a88:	movt	r1, #2
   12a8c:	vld1.64	{d16-d17}, [r2 :128]
   12a90:	add	r1, r1, #48	; 0x30
   12a94:	vld1.64	{d18-d19}, [r1 :128]
   12a98:	vadd.i64	q8, q9, q8
   12a9c:	vst1.64	{d16-d17}, [r1 :128]
   12aa0:	mov	r1, #10
   12aa4:	str	r1, [r0]
   12aa8:	bx	lr
   12aac:	nop	{0}
   12ab0:	andeq	r0, r0, r1
   12ab4:	andeq	r0, r0, r0
   12ab8:	andeq	r0, r0, r1
   12abc:	andeq	r0, r0, r0

00012ac0 <init_token_else@@Base>:
   12ac0:	movw	r1, #53840	; 0xd250
   12ac4:	add	r2, pc, #36	; 0x24
   12ac8:	movt	r1, #2
   12acc:	vld1.64	{d16-d17}, [r2 :128]
   12ad0:	add	r1, r1, #64	; 0x40
   12ad4:	vld1.64	{d18-d19}, [r1 :128]
   12ad8:	vadd.i64	q8, q9, q8
   12adc:	vst1.64	{d16-d17}, [r1 :128]
   12ae0:	mov	r1, #11
   12ae4:	str	r1, [r0]
   12ae8:	bx	lr
   12aec:	nop	{0}
   12af0:	andeq	r0, r0, r1
   12af4:	andeq	r0, r0, r0
   12af8:	andeq	r0, r0, r1
   12afc:	andeq	r0, r0, r0

00012b00 <init_token_boolean_op@@Base>:
   12b00:	movw	r2, #53840	; 0xd250
   12b04:	add	r3, pc, #36	; 0x24
   12b08:	movt	r2, #2
   12b0c:	vld1.64	{d16-d17}, [r3 :128]
   12b10:	add	r2, r2, #80	; 0x50
   12b14:	vld1.64	{d18-d19}, [r2 :128]
   12b18:	vadd.i64	q8, q9, q8
   12b1c:	vst1.64	{d16-d17}, [r2 :128]
   12b20:	mov	r2, #12
   12b24:	str	r2, [r0]
   12b28:	str	r1, [r0, #4]
   12b2c:	bx	lr
   12b30:	andeq	r0, r0, r1
   12b34:	andeq	r0, r0, r0
   12b38:	andeq	r0, r0, r1
   12b3c:	andeq	r0, r0, r0

00012b40 <free_token_int_type@@Base>:
   12b40:	movw	r1, #53840	; 0xd250
   12b44:	add	r2, pc, #36	; 0x24
   12b48:	movt	r1, #2
   12b4c:	vld1.64	{d16-d17}, [r2 :128]
   12b50:	add	r1, r1, #96	; 0x60
   12b54:	vld1.64	{d18-d19}, [r1 :128]
   12b58:	vadd.i64	q8, q9, q8
   12b5c:	vst1.64	{d16-d17}, [r1 :128]
   12b60:	b	11ed4 <free@plt>
   12b64:	nop	{0}
   12b68:	nop	{0}
   12b6c:	nop	{0}
   12b70:	andeq	r0, r0, r1
   12b74:	andeq	r0, r0, r0
   12b78:	andeq	r0, r0, r1
   12b7c:	andeq	r0, r0, r0

00012b80 <free_token_int_value@@Base>:
   12b80:	movw	r1, #53952	; 0xd2c0
   12b84:	add	r2, pc, #20
   12b88:	movt	r1, #2
   12b8c:	vld1.64	{d16-d17}, [r2 :128]
   12b90:	vld1.64	{d18-d19}, [r1 :128]
   12b94:	vadd.i64	q8, q9, q8
   12b98:	vst1.64	{d16-d17}, [r1 :128]
   12b9c:	b	11ed4 <free@plt>
   12ba0:	andeq	r0, r0, r1
   12ba4:	andeq	r0, r0, r0
   12ba8:	andeq	r0, r0, r1
   12bac:	andeq	r0, r0, r0

00012bb0 <free_token_function@@Base>:
   12bb0:	movw	r1, #53952	; 0xd2c0
   12bb4:	add	r2, pc, #36	; 0x24
   12bb8:	movt	r1, #2
   12bbc:	vld1.64	{d16-d17}, [r2 :128]
   12bc0:	add	r1, r1, #16
   12bc4:	vld1.64	{d18-d19}, [r1 :128]
   12bc8:	vadd.i64	q8, q9, q8
   12bcc:	vst1.64	{d16-d17}, [r1 :128]
   12bd0:	b	11ed4 <free@plt>
   12bd4:	nop	{0}
   12bd8:	nop	{0}
   12bdc:	nop	{0}
   12be0:	andeq	r0, r0, r1
   12be4:	andeq	r0, r0, r0
   12be8:	andeq	r0, r0, r1
   12bec:	andeq	r0, r0, r0

00012bf0 <free_token_opar@@Base>:
   12bf0:	movw	r1, #53952	; 0xd2c0
   12bf4:	add	r2, pc, #36	; 0x24
   12bf8:	movt	r1, #2
   12bfc:	vld1.64	{d16-d17}, [r2 :128]
   12c00:	add	r1, r1, #32
   12c04:	vld1.64	{d18-d19}, [r1 :128]
   12c08:	vadd.i64	q8, q9, q8
   12c0c:	vst1.64	{d16-d17}, [r1 :128]
   12c10:	b	11ed4 <free@plt>
   12c14:	nop	{0}
   12c18:	nop	{0}
   12c1c:	nop	{0}
   12c20:	andeq	r0, r0, r1
   12c24:	andeq	r0, r0, r0
   12c28:	andeq	r0, r0, r1
   12c2c:	andeq	r0, r0, r0

00012c30 <free_token_cpar@@Base>:
   12c30:	movw	r1, #53952	; 0xd2c0
   12c34:	add	r2, pc, #36	; 0x24
   12c38:	movt	r1, #2
   12c3c:	vld1.64	{d16-d17}, [r2 :128]
   12c40:	add	r1, r1, #48	; 0x30
   12c44:	vld1.64	{d18-d19}, [r1 :128]
   12c48:	vadd.i64	q8, q9, q8
   12c4c:	vst1.64	{d16-d17}, [r1 :128]
   12c50:	b	11ed4 <free@plt>
   12c54:	nop	{0}
   12c58:	nop	{0}
   12c5c:	nop	{0}
   12c60:	andeq	r0, r0, r1
   12c64:	andeq	r0, r0, r0
   12c68:	andeq	r0, r0, r1
   12c6c:	andeq	r0, r0, r0

00012c70 <free_token_obra@@Base>:
   12c70:	movw	r1, #53952	; 0xd2c0
   12c74:	add	r2, pc, #36	; 0x24
   12c78:	movt	r1, #2
   12c7c:	vld1.64	{d16-d17}, [r2 :128]
   12c80:	add	r1, r1, #64	; 0x40
   12c84:	vld1.64	{d18-d19}, [r1 :128]
   12c88:	vadd.i64	q8, q9, q8
   12c8c:	vst1.64	{d16-d17}, [r1 :128]
   12c90:	b	11ed4 <free@plt>
   12c94:	nop	{0}
   12c98:	nop	{0}
   12c9c:	nop	{0}
   12ca0:	andeq	r0, r0, r1
   12ca4:	andeq	r0, r0, r0
   12ca8:	andeq	r0, r0, r1
   12cac:	andeq	r0, r0, r0

00012cb0 <free_token_cbra@@Base>:
   12cb0:	movw	r1, #53952	; 0xd2c0
   12cb4:	add	r2, pc, #36	; 0x24
   12cb8:	movt	r1, #2
   12cbc:	vld1.64	{d16-d17}, [r2 :128]
   12cc0:	add	r1, r1, #80	; 0x50
   12cc4:	vld1.64	{d18-d19}, [r1 :128]
   12cc8:	vadd.i64	q8, q9, q8
   12ccc:	vst1.64	{d16-d17}, [r1 :128]
   12cd0:	b	11ed4 <free@plt>
   12cd4:	nop	{0}
   12cd8:	nop	{0}
   12cdc:	nop	{0}
   12ce0:	andeq	r0, r0, r1
   12ce4:	andeq	r0, r0, r0
   12ce8:	andeq	r0, r0, r1
   12cec:	andeq	r0, r0, r0

00012cf0 <free_token_return@@Base>:
   12cf0:	movw	r1, #53952	; 0xd2c0
   12cf4:	add	r2, pc, #36	; 0x24
   12cf8:	movt	r1, #2
   12cfc:	vld1.64	{d16-d17}, [r2 :128]
   12d00:	add	r1, r1, #96	; 0x60
   12d04:	vld1.64	{d18-d19}, [r1 :128]
   12d08:	vadd.i64	q8, q9, q8
   12d0c:	vst1.64	{d16-d17}, [r1 :128]
   12d10:	b	11ed4 <free@plt>
   12d14:	nop	{0}
   12d18:	nop	{0}
   12d1c:	nop	{0}
   12d20:	andeq	r0, r0, r1
   12d24:	andeq	r0, r0, r0
   12d28:	andeq	r0, r0, r1
   12d2c:	andeq	r0, r0, r0

00012d30 <free_token_semicolon@@Base>:
   12d30:	movw	r1, #54064	; 0xd330
   12d34:	add	r2, pc, #20
   12d38:	movt	r1, #2
   12d3c:	vld1.64	{d16-d17}, [r2 :128]
   12d40:	vld1.64	{d18-d19}, [r1 :128]
   12d44:	vadd.i64	q8, q9, q8
   12d48:	vst1.64	{d16-d17}, [r1 :128]
   12d4c:	b	11ed4 <free@plt>
   12d50:	andeq	r0, r0, r1
   12d54:	andeq	r0, r0, r0
   12d58:	andeq	r0, r0, r1
   12d5c:	andeq	r0, r0, r0

00012d60 <free_token_eof@@Base>:
   12d60:	movw	r1, #54064	; 0xd330
   12d64:	add	r2, pc, #36	; 0x24
   12d68:	movt	r1, #2
   12d6c:	vld1.64	{d16-d17}, [r2 :128]
   12d70:	add	r1, r1, #16
   12d74:	vld1.64	{d18-d19}, [r1 :128]
   12d78:	vadd.i64	q8, q9, q8
   12d7c:	vst1.64	{d16-d17}, [r1 :128]
   12d80:	b	11ed4 <free@plt>
   12d84:	nop	{0}
   12d88:	nop	{0}
   12d8c:	nop	{0}
   12d90:	andeq	r0, r0, r1
   12d94:	andeq	r0, r0, r0
   12d98:	andeq	r0, r0, r1
   12d9c:	andeq	r0, r0, r0

00012da0 <free_token_if@@Base>:
   12da0:	movw	r1, #54064	; 0xd330
   12da4:	add	r2, pc, #36	; 0x24
   12da8:	movt	r1, #2
   12dac:	vld1.64	{d16-d17}, [r2 :128]
   12db0:	add	r1, r1, #32
   12db4:	vld1.64	{d18-d19}, [r1 :128]
   12db8:	vadd.i64	q8, q9, q8
   12dbc:	vst1.64	{d16-d17}, [r1 :128]
   12dc0:	b	11ed4 <free@plt>
   12dc4:	nop	{0}
   12dc8:	nop	{0}
   12dcc:	nop	{0}
   12dd0:	andeq	r0, r0, r1
   12dd4:	andeq	r0, r0, r0
   12dd8:	andeq	r0, r0, r1
   12ddc:	andeq	r0, r0, r0

00012de0 <free_token_else@@Base>:
   12de0:	movw	r1, #54064	; 0xd330
   12de4:	add	r2, pc, #36	; 0x24
   12de8:	movt	r1, #2
   12dec:	vld1.64	{d16-d17}, [r2 :128]
   12df0:	add	r1, r1, #48	; 0x30
   12df4:	vld1.64	{d18-d19}, [r1 :128]
   12df8:	vadd.i64	q8, q9, q8
   12dfc:	vst1.64	{d16-d17}, [r1 :128]
   12e00:	b	11ed4 <free@plt>
   12e04:	nop	{0}
   12e08:	nop	{0}
   12e0c:	nop	{0}
   12e10:	andeq	r0, r0, r1
   12e14:	andeq	r0, r0, r0
   12e18:	andeq	r0, r0, r1
   12e1c:	andeq	r0, r0, r0

00012e20 <free_token_boolean_op@@Base>:
   12e20:	push	{r4, r5, fp, lr}
   12e24:	add	fp, sp, #8
   12e28:	movw	r5, #54064	; 0xd330
   12e2c:	mov	r4, r0
   12e30:	mov	r2, #16
   12e34:	movt	r5, #2
   12e38:	mov	r1, r5
   12e3c:	ldr	r0, [r1, #64]!	; 0x40
   12e40:	adds	r0, r0, #1
   12e44:	str	r0, [r1]
   12e48:	ldr	r0, [r1, #4]
   12e4c:	adc	r0, r0, #0
   12e50:	str	r0, [r1, #4]
   12e54:	ldr	r0, [r4, #4]
   12e58:	cmp	r0, #0
   12e5c:	movwne	r2, #8
   12e60:	ldr	r2, [r1, r2]!
   12e64:	adds	r2, r2, #1
   12e68:	str	r2, [r1]
   12e6c:	ldr	r2, [r1, #4]
   12e70:	adc	r2, r2, #0
   12e74:	cmp	r0, #0
   12e78:	str	r2, [r1, #4]
   12e7c:	beq	12e94 <free_token_boolean_op@@Base+0x74>
   12e80:	ldrd	r2, [r5, #88]	; 0x58
   12e84:	adds	r2, r2, #1
   12e88:	adc	r3, r3, #0
   12e8c:	strd	r2, [r5, #88]	; 0x58
   12e90:	bl	11ed4 <free@plt>
   12e94:	ldrd	r0, [r5, #96]	; 0x60
   12e98:	adds	r0, r0, #1
   12e9c:	adc	r1, r1, #0
   12ea0:	strd	r0, [r5, #96]	; 0x60
   12ea4:	mov	r0, r4
   12ea8:	pop	{r4, r5, fp, lr}
   12eac:	b	11ed4 <free@plt>
   12eb0:	push	{r4, r5, r6, lr}
   12eb4:	sub	sp, sp, #8
   12eb8:	movw	r0, #45072	; 0xb010
   12ebc:	movw	r1, #44967	; 0xafa7
   12ec0:	movw	r2, #10327	; 0x2857
   12ec4:	movt	r0, #1
   12ec8:	movt	r1, #1
   12ecc:	movt	r2, #23326	; 0x5b1e
   12ed0:	bl	17f68 <__generate_code_for_binary_boolean_expression@@Base+0x518>
   12ed4:	movw	r0, #46272	; 0xb4c0
   12ed8:	movw	r6, #45744	; 0xb2b0
   12edc:	mov	r5, #0
   12ee0:	movt	r0, #1
   12ee4:	movt	r6, #1
   12ee8:	add	r4, r0, #4
   12eec:	mov	r3, r6
   12ef0:	ldr	r0, [r3, r5]!
   12ef4:	ldr	r1, [r3, #16]
   12ef8:	str	r1, [sp]
   12efc:	ldmib	r3, {r1, r2}
   12f00:	ldrb	r3, [r3, #12]
   12f04:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   12f08:	ldrd	r0, [r4, #-4]
   12f0c:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   12f10:	add	r5, r5, #20
   12f14:	add	r4, r4, #8
   12f18:	cmp	r5, #520	; 0x208
   12f1c:	bne	12eec <free_token_boolean_op@@Base+0xcc>
   12f20:	bl	196fc <__generate_code_for_binary_boolean_expression@@Base+0x1cac>
   12f24:	add	sp, sp, #8
   12f28:	pop	{r4, r5, r6, lr}
   12f2c:	b	1a468 <__generate_code_for_binary_boolean_expression@@Base+0x2a18>
   12f30:	push	{fp, lr}
   12f34:	bl	12eb0 <free_token_boolean_op@@Base+0x90>
   12f38:	movw	r1, #53840	; 0xd250
   12f3c:	vmov.i32	q8, #0	; 0x00000000
   12f40:	mov	r0, #96	; 0x60
   12f44:	movt	r1, #2
   12f48:	mov	r2, r1
   12f4c:	vst1.64	{d16-d17}, [r2 :128], r0
   12f50:	vst1.64	{d16-d17}, [r2 :128]
   12f54:	movw	r2, #53728	; 0xd1e0
   12f58:	movt	r2, #2
   12f5c:	add	r3, r2, #16
   12f60:	vst1.64	{d16-d17}, [r3 :128]
   12f64:	add	r3, r2, #32
   12f68:	vst1.64	{d16-d17}, [r3 :128]
   12f6c:	add	r3, r2, #48	; 0x30
   12f70:	vst1.64	{d16-d17}, [r3 :128]
   12f74:	add	r3, r2, #64	; 0x40
   12f78:	vst1.64	{d16-d17}, [r3 :128]
   12f7c:	add	r3, r2, #80	; 0x50
   12f80:	vst1.64	{d16-d17}, [r3 :128]
   12f84:	add	r3, r1, #16
   12f88:	vst1.64	{d16-d17}, [r2 :128], r0
   12f8c:	vst1.64	{d16-d17}, [r3 :128]
   12f90:	add	r3, r1, #32
   12f94:	vst1.64	{d16-d17}, [r2 :128]
   12f98:	vst1.64	{d16-d17}, [r3 :128]
   12f9c:	add	r3, r1, #48	; 0x30
   12fa0:	vst1.64	{d16-d17}, [r3 :128]
   12fa4:	add	r3, r1, #64	; 0x40
   12fa8:	add	r1, r1, #80	; 0x50
   12fac:	vst1.64	{d16-d17}, [r3 :128]
   12fb0:	vst1.64	{d16-d17}, [r1 :128]
   12fb4:	movw	r1, #53952	; 0xd2c0
   12fb8:	movt	r1, #2
   12fbc:	add	r3, r1, #16
   12fc0:	add	r2, r1, #80	; 0x50
   12fc4:	vst1.64	{d16-d17}, [r3 :128]
   12fc8:	add	r3, r1, #32
   12fcc:	vst1.64	{d16-d17}, [r3 :128]
   12fd0:	add	r3, r1, #48	; 0x30
   12fd4:	vst1.64	{d16-d17}, [r3 :128]
   12fd8:	add	r3, r1, #64	; 0x40
   12fdc:	vst1.64	{d16-d17}, [r3 :128]
   12fe0:	vst1.64	{d16-d17}, [r1 :128], r0
   12fe4:	vst1.64	{d16-d17}, [r2 :128]
   12fe8:	mov	r0, #80	; 0x50
   12fec:	vst1.64	{d16-d17}, [r1 :128]
   12ff0:	movw	r1, #54064	; 0xd330
   12ff4:	movt	r1, #2
   12ff8:	mov	r2, r1
   12ffc:	vst1.64	{d16-d17}, [r2 :128], r0
   13000:	add	r0, r1, #32
   13004:	vst1.64	{d16-d17}, [r0 :128]
   13008:	add	r0, r1, #16
   1300c:	vst1.64	{d16-d17}, [r0 :128]
   13010:	add	r0, r1, #48	; 0x30
   13014:	vst1.64	{d16-d17}, [r0 :128]
   13018:	mov	r0, #0
   1301c:	vst1.64	{d16-d17}, [r2 :128]
   13020:	str	r0, [r1, #96]	; 0x60
   13024:	str	r0, [r1, #100]	; 0x64
   13028:	add	r0, r1, #64	; 0x40
   1302c:	vst1.64	{d16-d17}, [r0 :128]
   13030:	pop	{fp, pc}
   13034:	movw	r0, #11952	; 0x2eb0
   13038:	movw	r1, #12080	; 0x2f30
   1303c:	movt	r0, #1
   13040:	movt	r1, #1
   13044:	b	1a918 <__gcov_flush@@Base+0xb4>
	...

00013050 <init_lexer@@Base>:
   13050:	movw	r2, #55184	; 0xd790
   13054:	add	r3, pc, #36	; 0x24
   13058:	movt	r2, #2
   1305c:	vld1.64	{d16-d17}, [r3 :128]
   13060:	vld1.64	{d18-d19}, [r2 :128]
   13064:	vadd.i64	q8, q9, q8
   13068:	vst1.64	{d16-d17}, [r2 :128]
   1306c:	mov	r2, #0
   13070:	stm	r0, {r1, r2}
   13074:	str	r2, [r0, #8]
   13078:	bx	lr
   1307c:	nop	{0}
   13080:	andeq	r0, r0, r1
   13084:	andeq	r0, r0, r0
   13088:	andeq	r0, r0, r1
   1308c:	andeq	r0, r0, r0

00013090 <destroy_lexer@@Base>:
   13090:	push	{r4, sl, fp, lr}
   13094:	add	fp, sp, #8
   13098:	movw	r4, #55280	; 0xd7f0
   1309c:	movt	r4, #2
   130a0:	mov	r1, r4
   130a4:	ldr	r2, [r1, #32]!
   130a8:	adds	r2, r2, #1
   130ac:	str	r2, [r1]
   130b0:	ldr	r2, [r1, #4]
   130b4:	adc	r2, r2, #0
   130b8:	str	r2, [r1, #4]
   130bc:	mov	r2, #16
   130c0:	ldr	r0, [r0, #4]
   130c4:	cmp	r0, #0
   130c8:	movwne	r2, #8
   130cc:	ldr	r2, [r1, r2]!
   130d0:	adds	r2, r2, #1
   130d4:	str	r2, [r1]
   130d8:	ldr	r2, [r1, #4]
   130dc:	adc	r2, r2, #0
   130e0:	cmp	r0, #0
   130e4:	str	r2, [r1, #4]
   130e8:	beq	13120 <destroy_lexer@@Base+0x90>
   130ec:	movw	r1, #55184	; 0xd790
   130f0:	add	r2, pc, #72	; 0x48
   130f4:	movt	r1, #2
   130f8:	vld1.64	{d16-d17}, [r2 :128]
   130fc:	ldrd	r2, [r4, #56]	; 0x38
   13100:	add	r1, r1, #16
   13104:	vld1.64	{d18-d19}, [r1 :128]
   13108:	adds	r2, r2, #1
   1310c:	adc	r3, r3, #0
   13110:	vadd.i64	q8, q9, q8
   13114:	strd	r2, [r4, #56]	; 0x38
   13118:	vst1.64	{d16-d17}, [r1 :128]
   1311c:	bl	11ed4 <free@plt>
   13120:	ldrd	r0, [r4, #64]	; 0x40
   13124:	adds	r0, r0, #1
   13128:	adc	r1, r1, #0
   1312c:	strd	r0, [r4, #64]	; 0x40
   13130:	pop	{r4, sl, fp, pc}
   13134:	nop	{0}
   13138:	nop	{0}
   1313c:	nop	{0}
   13140:	andeq	r0, r0, r1
   13144:	andeq	r0, r0, r0
   13148:	andeq	r0, r0, r1
   1314c:	andeq	r0, r0, r0

00013150 <free_stack_base@@Base>:
   13150:	movw	r1, #55184	; 0xd790
   13154:	add	r2, pc, #36	; 0x24
   13158:	movt	r1, #2
   1315c:	vld1.64	{d16-d17}, [r2 :128]
   13160:	add	r1, r1, #16
   13164:	vld1.64	{d18-d19}, [r1 :128]
   13168:	vadd.i64	q8, q9, q8
   1316c:	vst1.64	{d16-d17}, [r1 :128]
   13170:	b	11ed4 <free@plt>
   13174:	nop	{0}
   13178:	nop	{0}
   1317c:	nop	{0}
   13180:	andeq	r0, r0, r1
   13184:	andeq	r0, r0, r0
   13188:	andeq	r0, r0, r1
   1318c:	andeq	r0, r0, r0

00013190 <push_back@@Base>:
   13190:	push	{r4, r5, fp, lr}
   13194:	add	fp, sp, #8
   13198:	mov	r5, r0
   1319c:	movw	r0, #55184	; 0xd790
   131a0:	mov	r4, r1
   131a4:	add	r1, pc, #52	; 0x34
   131a8:	movt	r0, #2
   131ac:	vld1.64	{d16-d17}, [r1 :128]
   131b0:	add	r0, r0, #32
   131b4:	vld1.64	{d18-d19}, [r0 :128]
   131b8:	vadd.i64	q8, q9, q8
   131bc:	vst1.64	{d16-d17}, [r0 :128]
   131c0:	mov	r0, #8
   131c4:	bl	11f4c <malloc@plt>
   131c8:	ldr	r1, [r5, #4]
   131cc:	stm	r0, {r1, r4}
   131d0:	str	r0, [r5, #4]
   131d4:	pop	{r4, r5, fp, pc}
   131d8:	nop	{0}
   131dc:	nop	{0}
   131e0:	andeq	r0, r0, r1
   131e4:	andeq	r0, r0, r0
   131e8:	andeq	r0, r0, r1
   131ec:	andeq	r0, r0, r0

000131f0 <get_char@@Base>:
   131f0:	movw	r1, #55184	; 0xd790
   131f4:	add	r2, pc, #52	; 0x34
   131f8:	movt	r1, #2
   131fc:	vld1.64	{d16-d17}, [r2 :128]
   13200:	add	r1, r1, #48	; 0x30
   13204:	vld1.64	{d18-d19}, [r1 :128]
   13208:	vadd.i64	q8, q9, q8
   1320c:	vst1.64	{d16-d17}, [r1 :128]
   13210:	ldr	r2, [r0, #8]
   13214:	ldr	r1, [r0]
   13218:	add	r3, r2, #1
   1321c:	str	r3, [r0, #8]
   13220:	ldrb	r0, [r1, r2]
   13224:	bx	lr
   13228:	nop	{0}
   1322c:	nop	{0}
   13230:	andeq	r0, r0, r1
   13234:	andeq	r0, r0, r0
   13238:	andeq	r0, r0, r1
   1323c:	andeq	r0, r0, r0

00013240 <push_back_chars@@Base>:
   13240:	push	{r4, r5, fp, lr}
   13244:	add	fp, sp, #8
   13248:	movw	ip, #55280	; 0xd7f0
   1324c:	movt	ip, #2
   13250:	ldrd	r4, [ip]
   13254:	mov	r2, ip
   13258:	adds	r4, r4, #1
   1325c:	adc	r5, r5, #0
   13260:	strd	r4, [ip]
   13264:	mov	r5, #16
   13268:	ldr	r3, [r0, #8]
   1326c:	cmp	r3, r1
   13270:	movwcs	r5, #8
   13274:	ldr	r5, [r2, r5]!
   13278:	adds	r5, r5, #1
   1327c:	str	r5, [r2]
   13280:	ldr	r5, [r2, #4]
   13284:	adc	r5, r5, #0
   13288:	cmp	r3, r1
   1328c:	str	r5, [r2, #4]
   13290:	bcc	132b8 <push_back_chars@@Base+0x78>
   13294:	ldr	r2, [ip, #24]
   13298:	ldr	r5, [ip, #28]
   1329c:	sub	r1, r3, r1
   132a0:	adds	r2, r2, #1
   132a4:	adc	r5, r5, #0
   132a8:	str	r2, [ip, #24]
   132ac:	str	r5, [ip, #28]
   132b0:	str	r1, [r0, #8]
   132b4:	pop	{r4, r5, fp, pc}
   132b8:	movw	r0, #53480	; 0xd0e8
   132bc:	mov	r1, #32
   132c0:	mov	r2, #1
   132c4:	movt	r0, #2
   132c8:	ldr	r3, [r0]
   132cc:	movw	r0, #46480	; 0xb590
   132d0:	movt	r0, #1
   132d4:	bl	11f28 <fwrite@plt>
   132d8:	mov	r0, #1
   132dc:	bl	11f88 <exit@plt>

000132e0 <push_back_one_char@@Base>:
   132e0:	push	{r4, r5, fp, lr}
   132e4:	add	fp, sp, #8
   132e8:	movw	r1, #55184	; 0xd790
   132ec:	movw	ip, #55280	; 0xd7f0
   132f0:	add	r3, pc, #168	; 0xa8
   132f4:	movt	r1, #2
   132f8:	movt	ip, #2
   132fc:	vld1.64	{d16-d17}, [r3 :128]
   13300:	mov	r3, #16
   13304:	add	r2, r1, #64	; 0x40
   13308:	ldrd	r4, [ip]
   1330c:	mov	r1, ip
   13310:	vld1.64	{d18-d19}, [r2 :128]
   13314:	adds	r4, r4, #1
   13318:	vadd.i64	q8, q9, q8
   1331c:	adc	r5, r5, #0
   13320:	strd	r4, [ip]
   13324:	vst1.64	{d16-d17}, [r2 :128]
   13328:	ldr	r2, [r0, #8]
   1332c:	cmp	r2, #0
   13330:	movwne	r3, #8
   13334:	ldr	r3, [r1, r3]!
   13338:	adds	r3, r3, #1
   1333c:	str	r3, [r1]
   13340:	ldr	r3, [r1, #4]
   13344:	adc	r3, r3, #0
   13348:	cmp	r2, #0
   1334c:	str	r3, [r1, #4]
   13350:	beq	13370 <push_back_one_char@@Base+0x90>
   13354:	ldrd	r4, [ip, #24]
   13358:	sub	r1, r2, #1
   1335c:	adds	r4, r4, #1
   13360:	adc	r5, r5, #0
   13364:	strd	r4, [ip, #24]
   13368:	str	r1, [r0, #8]
   1336c:	pop	{r4, r5, fp, pc}
   13370:	movw	r0, #53480	; 0xd0e8
   13374:	mov	r1, #32
   13378:	mov	r2, #1
   1337c:	movt	r0, #2
   13380:	ldr	r3, [r0]
   13384:	movw	r0, #46480	; 0xb590
   13388:	movt	r0, #1
   1338c:	bl	11f28 <fwrite@plt>
   13390:	mov	r0, #1
   13394:	bl	11f88 <exit@plt>
   13398:	nop	{0}
   1339c:	nop	{0}
   133a0:	andeq	r0, r0, r1
   133a4:	andeq	r0, r0, r0
   133a8:	andeq	r0, r0, r1
   133ac:	andeq	r0, r0, r0

000133b0 <next@@Base>:
   133b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133b4:	add	fp, sp, #28
   133b8:	sub	sp, sp, #524	; 0x20c
   133bc:	movw	r7, #54176	; 0xd3a0
   133c0:	mov	r4, r0
   133c4:	movt	r7, #2
   133c8:	ldrd	r0, [r7]
   133cc:	mov	r2, r7
   133d0:	adds	r0, r0, #1
   133d4:	adc	r1, r1, #0
   133d8:	strd	r0, [r7]
   133dc:	mov	r1, #16
   133e0:	ldr	r0, [r4, #4]
   133e4:	cmp	r0, #0
   133e8:	movwne	r1, #8
   133ec:	ldr	r1, [r2, r1]!
   133f0:	adds	r1, r1, #1
   133f4:	str	r1, [r2]
   133f8:	ldr	r1, [r2, #4]
   133fc:	adc	r1, r1, #0
   13400:	cmp	r0, #0
   13404:	str	r1, [r2, #4]
   13408:	beq	13458 <next@@Base+0xa8>
   1340c:	ldrd	r2, [r7, #24]
   13410:	adds	r2, r2, #1
   13414:	adc	r3, r3, #0
   13418:	strd	r2, [r7, #24]
   1341c:	ldr	r1, [r0]
   13420:	str	r1, [r4, #4]
   13424:	mov	r1, #0
   13428:	ldr	r6, [r0, #4]
   1342c:	str	r1, [r0, #4]
   13430:	movw	r1, #55184	; 0xd790
   13434:	add	r2, pc, #948	; 0x3b4
   13438:	movt	r1, #2
   1343c:	vld1.64	{d16-d17}, [r2 :128]
   13440:	add	r1, r1, #16
   13444:	vld1.64	{d18-d19}, [r1 :128]
   13448:	vadd.i64	q8, q9, q8
   1344c:	vst1.64	{d16-d17}, [r1 :128]
   13450:	bl	11ed4 <free@plt>
   13454:	b	13a0c <next@@Base+0x65c>
   13458:	movw	r6, #55184	; 0xd790
   1345c:	add	r0, pc, #908	; 0x38c
   13460:	movt	r6, #2
   13464:	vld1.64	{d16-d17}, [r0 :128]
   13468:	ldrd	r0, [r7, #32]
   1346c:	add	r5, r6, #48	; 0x30
   13470:	vld1.64	{d18-d19}, [r5 :128]
   13474:	adds	r0, r0, #1
   13478:	adc	r1, r1, #0
   1347c:	vadd.i64	q8, q9, q8
   13480:	strd	r0, [r7, #32]
   13484:	vst1.64	{d16-d17}, [r5 :128]
   13488:	ldr	r1, [r4, #8]
   1348c:	ldr	r0, [r4]
   13490:	add	r2, r1, #1
   13494:	str	r2, [r4, #8]
   13498:	ldrb	r9, [r0, r1]
   1349c:	mov	r0, #48	; 0x30
   134a0:	mov	r1, r7
   134a4:	cmp	r9, #0
   134a8:	movwne	r0, #40	; 0x28
   134ac:	ldr	r0, [r1, r0]!
   134b0:	adds	r0, r0, #1
   134b4:	str	r0, [r1]
   134b8:	ldr	r0, [r1, #4]
   134bc:	adc	r0, r0, #0
   134c0:	cmp	r9, #0
   134c4:	str	r0, [r1, #4]
   134c8:	beq	139e4 <next@@Base+0x634>
   134cc:	movw	sl, #46640	; 0xb630
   134d0:	mov	r0, #0
   134d4:	mov	r8, #0
   134d8:	movt	sl, #1
   134dc:	str	r0, [sp, #4]
   134e0:	b	1387c <next@@Base+0x4cc>
   134e4:	cmp	r2, #48	; 0x30
   134e8:	mov	r0, #176	; 0xb0
   134ec:	mov	r1, r7
   134f0:	movweq	r0, #168	; 0xa8
   134f4:	ldr	r0, [r1, r0]!
   134f8:	adds	r0, r0, #1
   134fc:	str	r0, [r1]
   13500:	ldr	r0, [r1, #4]
   13504:	adc	r0, r0, #0
   13508:	cmp	r2, #48	; 0x30
   1350c:	str	r0, [r1, #4]
   13510:	beq	14230 <next@@Base+0xe80>
   13514:	mov	r0, #200	; 0xc8
   13518:	mov	r1, r7
   1351c:	movwhi	r0, #192	; 0xc0
   13520:	ldr	r0, [r1, r0]!
   13524:	adds	r0, r0, #1
   13528:	str	r0, [r1]
   1352c:	ldr	r0, [r1, #4]
   13530:	adc	r0, r0, #0
   13534:	cmp	r2, #49	; 0x31
   13538:	str	r0, [r1, #4]
   1353c:	bcc	14258 <next@@Base+0xea8>
   13540:	cmp	r2, #58	; 0x3a
   13544:	mov	r0, #216	; 0xd8
   13548:	mov	r1, r7
   1354c:	movwcc	r0, #208	; 0xd0
   13550:	ldr	r0, [r1, r0]!
   13554:	adds	r0, r0, #1
   13558:	str	r0, [r1]
   1355c:	ldr	r0, [r1, #4]
   13560:	adc	r0, r0, #0
   13564:	cmp	r2, #57	; 0x39
   13568:	str	r0, [r1, #4]
   1356c:	bhi	135b0 <next@@Base+0x200>
   13570:	add	r0, pc, #632	; 0x278
   13574:	ldr	r3, [sp, #4]
   13578:	vld1.64	{d18-d19}, [r5 :128]
   1357c:	mov	r8, #1
   13580:	vld1.64	{d16-d17}, [r0 :128]
   13584:	add	r0, sp, #8
   13588:	strb	r9, [r0, r3]
   1358c:	ldrd	r0, [r7, #224]	; 0xe0
   13590:	add	r3, r3, #1
   13594:	vadd.i64	q8, q9, q8
   13598:	str	r3, [sp, #4]
   1359c:	vst1.64	{d16-d17}, [r5 :128]
   135a0:	adds	r0, r0, #1
   135a4:	adc	r1, r1, #0
   135a8:	strd	r0, [r7, #224]	; 0xe0
   135ac:	b	13978 <next@@Base+0x5c8>
   135b0:	ldrd	r0, [r7, #240]	; 0xf0
   135b4:	ldr	r3, [r7, #264]	; 0x108
   135b8:	ldr	r6, [r7, #268]	; 0x10c
   135bc:	adds	r0, r0, #1
   135c0:	adc	r1, r1, #0
   135c4:	adds	r3, r3, #1
   135c8:	str	r3, [r7, #264]	; 0x108
   135cc:	strd	r0, [r7, #240]	; 0xf0
   135d0:	adc	r0, r6, #0
   135d4:	cmp	r2, #123	; 0x7b
   135d8:	mov	r1, r7
   135dc:	str	r0, [r7, #268]	; 0x10c
   135e0:	mov	r0, #288	; 0x120
   135e4:	movweq	r0, #280	; 0x118
   135e8:	ldr	r0, [r1, r0]!
   135ec:	adds	r0, r0, #1
   135f0:	str	r0, [r1]
   135f4:	ldr	r0, [r1, #4]
   135f8:	adc	r0, r0, #0
   135fc:	cmp	r2, #123	; 0x7b
   13600:	str	r0, [r1, #4]
   13604:	beq	14308 <next@@Base+0xf58>
   13608:	cmp	r2, #125	; 0x7d
   1360c:	mov	r0, #312	; 0x138
   13610:	mov	r1, r7
   13614:	movweq	r0, #304	; 0x130
   13618:	ldr	r0, [r1, r0]!
   1361c:	adds	r0, r0, #1
   13620:	str	r0, [r1]
   13624:	ldr	r0, [r1, #4]
   13628:	adc	r0, r0, #0
   1362c:	cmp	r2, #125	; 0x7d
   13630:	str	r0, [r1, #4]
   13634:	beq	14334 <next@@Base+0xf84>
   13638:	cmp	r2, #59	; 0x3b
   1363c:	mov	r0, #336	; 0x150
   13640:	mov	r1, r7
   13644:	movweq	r0, #328	; 0x148
   13648:	ldr	r0, [r1, r0]!
   1364c:	adds	r0, r0, #1
   13650:	str	r0, [r1]
   13654:	ldr	r0, [r1, #4]
   13658:	adc	r0, r0, #0
   1365c:	cmp	r2, #59	; 0x3b
   13660:	str	r0, [r1, #4]
   13664:	beq	14360 <next@@Base+0xfb0>
   13668:	cmp	r2, #101	; 0x65
   1366c:	mov	r0, #360	; 0x168
   13670:	mov	r1, r7
   13674:	movweq	r0, #352	; 0x160
   13678:	ldr	r0, [r1, r0]!
   1367c:	adds	r0, r0, #1
   13680:	str	r0, [r1]
   13684:	ldr	r0, [r1, #4]
   13688:	adc	r0, r0, #0
   1368c:	cmp	r2, #101	; 0x65
   13690:	str	r0, [r1, #4]
   13694:	bne	136ec <next@@Base+0x33c>
   13698:	add	r0, pc, #336	; 0x150
   1369c:	ldr	r3, [sp, #4]
   136a0:	mov	r1, #101	; 0x65
   136a4:	vld1.64	{d18-d19}, [r5 :128]
   136a8:	movw	r6, #55184	; 0xd790
   136ac:	mov	r8, #5
   136b0:	vld1.64	{d16-d17}, [r0 :128]
   136b4:	add	r0, sp, #8
   136b8:	movt	r6, #2
   136bc:	strb	r1, [r0, r3]
   136c0:	ldr	r0, [r7, #368]	; 0x170
   136c4:	ldr	r1, [r7, #372]	; 0x174
   136c8:	add	r3, r3, #1
   136cc:	vadd.i64	q8, q9, q8
   136d0:	str	r3, [sp, #4]
   136d4:	vst1.64	{d16-d17}, [r5 :128]
   136d8:	adds	r0, r0, #1
   136dc:	adc	r1, r1, #0
   136e0:	str	r0, [r7, #368]	; 0x170
   136e4:	str	r1, [r7, #372]	; 0x174
   136e8:	b	13978 <next@@Base+0x5c8>
   136ec:	cmp	r2, #105	; 0x69
   136f0:	mov	r0, #384	; 0x180
   136f4:	mov	r1, r7
   136f8:	movw	r6, #55184	; 0xd790
   136fc:	movweq	r0, #376	; 0x178
   13700:	movt	r6, #2
   13704:	ldr	r0, [r1, r0]!
   13708:	adds	r0, r0, #1
   1370c:	str	r0, [r1]
   13710:	ldr	r0, [r1, #4]
   13714:	adc	r0, r0, #0
   13718:	cmp	r2, #105	; 0x69
   1371c:	str	r0, [r1, #4]
   13720:	bne	13770 <next@@Base+0x3c0>
   13724:	add	r0, pc, #196	; 0xc4
   13728:	ldr	r3, [sp, #4]
   1372c:	mov	r1, #105	; 0x69
   13730:	vld1.64	{d18-d19}, [r5 :128]
   13734:	mov	r8, #2
   13738:	vld1.64	{d16-d17}, [r0 :128]
   1373c:	add	r0, sp, #8
   13740:	strb	r1, [r0, r3]
   13744:	ldr	r0, [r7, #392]	; 0x188
   13748:	ldr	r1, [r7, #396]	; 0x18c
   1374c:	add	r3, r3, #1
   13750:	vadd.i64	q8, q9, q8
   13754:	str	r3, [sp, #4]
   13758:	vst1.64	{d16-d17}, [r5 :128]
   1375c:	adds	r0, r0, #1
   13760:	adc	r1, r1, #0
   13764:	str	r0, [r7, #392]	; 0x188
   13768:	str	r1, [r7, #396]	; 0x18c
   1376c:	b	13978 <next@@Base+0x5c8>
   13770:	cmp	r2, #109	; 0x6d
   13774:	mov	r0, #408	; 0x198
   13778:	mov	r1, r7
   1377c:	movweq	r0, #400	; 0x190
   13780:	ldr	r0, [r1, r0]!
   13784:	adds	r0, r0, #1
   13788:	str	r0, [r1]
   1378c:	ldr	r0, [r1, #4]
   13790:	adc	r0, r0, #0
   13794:	cmp	r2, #109	; 0x6d
   13798:	str	r0, [r1, #4]
   1379c:	bne	13800 <next@@Base+0x450>
   137a0:	add	r0, pc, #72	; 0x48
   137a4:	ldr	r3, [sp, #4]
   137a8:	mov	r1, #109	; 0x6d
   137ac:	vld1.64	{d18-d19}, [r5 :128]
   137b0:	mov	r8, #3
   137b4:	vld1.64	{d16-d17}, [r0 :128]
   137b8:	add	r0, sp, #8
   137bc:	strb	r1, [r0, r3]
   137c0:	ldr	r0, [r7, #416]	; 0x1a0
   137c4:	ldr	r1, [r7, #420]	; 0x1a4
   137c8:	add	r3, r3, #1
   137cc:	vadd.i64	q8, q9, q8
   137d0:	str	r3, [sp, #4]
   137d4:	vst1.64	{d16-d17}, [r5 :128]
   137d8:	adds	r0, r0, #1
   137dc:	adc	r1, r1, #0
   137e0:	str	r0, [r7, #416]	; 0x1a0
   137e4:	str	r1, [r7, #420]	; 0x1a4
   137e8:	b	13978 <next@@Base+0x5c8>
   137ec:	nop	{0}
   137f0:	andeq	r0, r0, r1
   137f4:	andeq	r0, r0, r0
   137f8:	andeq	r0, r0, r1
   137fc:	andeq	r0, r0, r0
   13800:	cmp	r2, #114	; 0x72
   13804:	mov	r0, #432	; 0x1b0
   13808:	mov	r1, r7
   1380c:	movweq	r0, #424	; 0x1a8
   13810:	ldr	r0, [r1, r0]!
   13814:	adds	r0, r0, #1
   13818:	str	r0, [r1]
   1381c:	ldr	r0, [r1, #4]
   13820:	adc	r0, r0, #0
   13824:	cmp	r2, #114	; 0x72
   13828:	str	r0, [r1, #4]
   1382c:	bne	14730 <next@@Base+0x1380>
   13830:	sub	r0, pc, #72	; 0x48
   13834:	ldr	r3, [sp, #4]
   13838:	mov	r1, #114	; 0x72
   1383c:	vld1.64	{d18-d19}, [r5 :128]
   13840:	mov	r8, #4
   13844:	vld1.64	{d16-d17}, [r0 :128]
   13848:	add	r0, sp, #8
   1384c:	strb	r1, [r0, r3]
   13850:	ldr	r0, [r7, #440]	; 0x1b8
   13854:	ldr	r1, [r7, #444]	; 0x1bc
   13858:	add	r3, r3, #1
   1385c:	vadd.i64	q8, q9, q8
   13860:	str	r3, [sp, #4]
   13864:	vst1.64	{d16-d17}, [r5 :128]
   13868:	adds	r0, r0, #1
   1386c:	adc	r1, r1, #0
   13870:	str	r0, [r7, #440]	; 0x1b8
   13874:	str	r1, [r7, #444]	; 0x1bc
   13878:	b	13978 <next@@Base+0x5c8>
   1387c:	movw	r0, #53452	; 0xd0cc
   13880:	cmp	r8, #5
   13884:	mov	r1, #0
   13888:	movt	r0, #2
   1388c:	str	r1, [r0]
   13890:	bhi	13990 <next@@Base+0x5e0>
   13894:	add	r0, pc, #0
   13898:	ldr	pc, [r0, r8, lsl #2]
   1389c:			; <UNDEFINED> instruction: 0x000138b4
   138a0:	andeq	r3, r1, r0, lsr sl
   138a4:	andeq	r3, r1, r4, asr #29
   138a8:	andeq	r3, r1, r8, lsl #22
   138ac:	andeq	r3, r1, r4, lsl #25
   138b0:	andeq	r3, r1, r0, lsr #31
   138b4:	add	r0, sl, #8
   138b8:	bl	14b30 <next@@Base+0x1780>
   138bc:	uxtb	r2, r9
   138c0:	mov	r0, #120	; 0x78
   138c4:	mov	r1, r7
   138c8:	cmp	r2, #9
   138cc:	movweq	r0, #112	; 0x70
   138d0:	ldr	r0, [r1, r0]!
   138d4:	adds	r0, r0, #1
   138d8:	str	r0, [r1]
   138dc:	ldr	r0, [r1, #4]
   138e0:	adc	r0, r0, #0
   138e4:	cmp	r2, #9
   138e8:	str	r0, [r1, #4]
   138ec:	beq	13950 <next@@Base+0x5a0>
   138f0:	cmp	r2, #32
   138f4:	mov	r0, #136	; 0x88
   138f8:	mov	r1, r7
   138fc:	movweq	r0, #128	; 0x80
   13900:	ldr	r0, [r1, r0]!
   13904:	adds	r0, r0, #1
   13908:	str	r0, [r1]
   1390c:	ldr	r0, [r1, #4]
   13910:	adc	r0, r0, #0
   13914:	cmp	r2, #32
   13918:	str	r0, [r1, #4]
   1391c:	beq	13950 <next@@Base+0x5a0>
   13920:	cmp	r2, #10
   13924:	mov	r0, #152	; 0x98
   13928:	mov	r1, r7
   1392c:	movweq	r0, #144	; 0x90
   13930:	ldr	r0, [r1, r0]!
   13934:	adds	r0, r0, #1
   13938:	str	r0, [r1]
   1393c:	ldr	r0, [r1, #4]
   13940:	adc	r0, r0, #0
   13944:	cmp	r2, #10
   13948:	str	r0, [r1, #4]
   1394c:	bne	134e4 <next@@Base+0x134>
   13950:	sub	r0, pc, #360	; 0x168
   13954:	vld1.64	{d18-d19}, [r5 :128]
   13958:	mov	r8, #0
   1395c:	vld1.64	{d16-d17}, [r0 :128]
   13960:	ldrd	r0, [r7, #160]	; 0xa0
   13964:	adds	r0, r0, #1
   13968:	vadd.i64	q8, q9, q8
   1396c:	adc	r1, r1, #0
   13970:	vst1.64	{d16-d17}, [r5 :128]
   13974:	strd	r0, [r7, #160]	; 0xa0
   13978:	ldr	r1, [r4, #8]
   1397c:	ldr	r0, [r4]
   13980:	add	r2, r1, #1
   13984:	add	r0, r0, r1
   13988:	str	r2, [r4, #8]
   1398c:	ldrb	r9, [r0]
   13990:	mov	r0, sl
   13994:	bl	14b30 <next@@Base+0x1780>
   13998:	ldr	r0, [r7, #984]	; 0x3d8
   1399c:	ldr	r1, [r7, #988]	; 0x3dc
   139a0:	mov	r2, r7
   139a4:	adds	r0, r0, #1
   139a8:	adc	r1, r1, #0
   139ac:	str	r0, [r7, #984]	; 0x3d8
   139b0:	uxtb	r0, r9
   139b4:	str	r1, [r7, #988]	; 0x3dc
   139b8:	cmp	r0, #0
   139bc:	mov	r1, #48	; 0x30
   139c0:	movwne	r1, #40	; 0x28
   139c4:	ldr	r1, [r2, r1]!
   139c8:	adds	r1, r1, #1
   139cc:	str	r1, [r2]
   139d0:	ldr	r1, [r2, #4]
   139d4:	adc	r1, r1, #0
   139d8:	cmp	r0, #0
   139dc:	str	r1, [r2, #4]
   139e0:	bne	1387c <next@@Base+0x4cc>
   139e4:	ldr	r0, [r7, #992]	; 0x3e0
   139e8:	ldr	r1, [r7, #996]	; 0x3e4
   139ec:	adds	r0, r0, #1
   139f0:	adc	r1, r1, #0
   139f4:	str	r0, [r7, #992]	; 0x3e0
   139f8:	mov	r0, #4
   139fc:	str	r1, [r7, #996]	; 0x3e4
   13a00:	bl	11f4c <malloc@plt>
   13a04:	mov	r6, r0
   13a08:	bl	12a40 <init_token_eof@@Base>
   13a0c:	ldr	r0, [r7, #1000]	; 0x3e8
   13a10:	ldr	r1, [r7, #1004]	; 0x3ec
   13a14:	adds	r0, r0, #1
   13a18:	adc	r1, r1, #0
   13a1c:	str	r0, [r7, #1000]	; 0x3e8
   13a20:	mov	r0, r6
   13a24:	str	r1, [r7, #1004]	; 0x3ec
   13a28:	sub	sp, fp, #28
   13a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a30:	add	r6, sl, #16
   13a34:	mov	r0, r6
   13a38:	bl	14b30 <next@@Base+0x1780>
   13a3c:	sub	r0, r9, #48	; 0x30
   13a40:	mov	r1, #704	; 0x2c0
   13a44:	mov	r2, r7
   13a48:	add	sl, sp, #8
   13a4c:	uxtb	r0, r0
   13a50:	cmp	r0, #10
   13a54:	movwcc	r1, #696	; 0x2b8
   13a58:	ldr	r1, [r2, r1]!
   13a5c:	adds	r1, r1, #1
   13a60:	str	r1, [r2]
   13a64:	ldr	r1, [r2, #4]
   13a68:	adc	r1, r1, #0
   13a6c:	cmp	r0, #9
   13a70:	str	r1, [r2, #4]
   13a74:	bhi	140f0 <next@@Base+0xd40>
   13a78:	ldr	r8, [sp, #4]
   13a7c:	sub	r0, pc, #660	; 0x294
   13a80:	vld1.64	{d18-d19}, [r5 :128]
   13a84:	ldr	r1, [r7, #716]	; 0x2cc
   13a88:	strb	r9, [sl, r8]
   13a8c:	vld1.64	{d16-d17}, [r0 :128]
   13a90:	ldr	r0, [r7, #712]	; 0x2c8
   13a94:	adds	r0, r0, #1
   13a98:	vadd.i64	q8, q9, q8
   13a9c:	adc	r1, r1, #0
   13aa0:	str	r0, [r7, #712]	; 0x2c8
   13aa4:	vst1.64	{d16-d17}, [r5 :128]
   13aa8:	str	r1, [r7, #716]	; 0x2cc
   13aac:	ldr	r1, [r4, #8]
   13ab0:	ldr	r0, [r4]
   13ab4:	add	r2, r1, #1
   13ab8:	str	r2, [r4, #8]
   13abc:	ldrb	r9, [r0, r1]
   13ac0:	mov	r0, r6
   13ac4:	bl	14b30 <next@@Base+0x1780>
   13ac8:	sub	r0, r9, #48	; 0x30
   13acc:	mov	r1, #704	; 0x2c0
   13ad0:	mov	r2, r7
   13ad4:	add	r8, r8, #1
   13ad8:	uxtb	r0, r0
   13adc:	cmp	r0, #10
   13ae0:	movwcc	r1, #696	; 0x2b8
   13ae4:	ldr	r1, [r2, r1]!
   13ae8:	adds	r1, r1, #1
   13aec:	str	r1, [r2]
   13af0:	ldr	r1, [r2, #4]
   13af4:	adc	r1, r1, #0
   13af8:	cmp	r0, #10
   13afc:	str	r1, [r2, #4]
   13b00:	bcc	13a7c <next@@Base+0x6cc>
   13b04:	b	140f4 <next@@Base+0xd44>
   13b08:	add	r0, sl, #32
   13b0c:	bl	14b30 <next@@Base+0x1780>
   13b10:	uxtb	r0, r9
   13b14:	mov	r1, #792	; 0x318
   13b18:	mov	r2, r7
   13b1c:	cmp	r0, #97	; 0x61
   13b20:	movwne	r1, #784	; 0x310
   13b24:	ldr	r1, [r2, r1]!
   13b28:	adds	r1, r1, #1
   13b2c:	str	r1, [r2]
   13b30:	ldr	r1, [r2, #4]
   13b34:	adc	r1, r1, #0
   13b38:	cmp	r0, #97	; 0x61
   13b3c:	str	r1, [r2, #4]
   13b40:	bne	14ad0 <next@@Base+0x1720>
   13b44:	sub	r0, pc, #860	; 0x35c
   13b48:	vld1.64	{d16-d17}, [r5 :128]
   13b4c:	ldr	r9, [sp, #4]
   13b50:	add	r8, sp, #8
   13b54:	vld1.64	{d18-d19}, [r0 :128]
   13b58:	mov	r0, #97	; 0x61
   13b5c:	strb	r0, [r8, r9]
   13b60:	vadd.i64	q9, q8, q9
   13b64:	vst1.64	{d18-d19}, [r5 :128]
   13b68:	ldr	r1, [r4, #8]
   13b6c:	ldr	r0, [r4]
   13b70:	add	r2, r1, #1
   13b74:	str	r2, [r4, #8]
   13b78:	mov	r2, r7
   13b7c:	ldrb	r0, [r0, r1]
   13b80:	mov	r1, #808	; 0x328
   13b84:	cmp	r0, #105	; 0x69
   13b88:	movwne	r1, #800	; 0x320
   13b8c:	ldr	r1, [r2, r1]!
   13b90:	adds	r1, r1, #1
   13b94:	str	r1, [r2]
   13b98:	ldr	r1, [r2, #4]
   13b9c:	adc	r1, r1, #0
   13ba0:	cmp	r0, #105	; 0x69
   13ba4:	str	r1, [r2, #4]
   13ba8:	bne	14ad0 <next@@Base+0x1720>
   13bac:	add	r0, r8, r9
   13bb0:	mov	r1, #105	; 0x69
   13bb4:	strb	r1, [r0, #1]
   13bb8:	vmov.32	r1, d16[0]
   13bbc:	adds	r1, r1, #2
   13bc0:	str	r1, [r6, #48]	; 0x30
   13bc4:	vmov.32	r1, d16[1]
   13bc8:	adc	r1, r1, #0
   13bcc:	str	r1, [r6, #52]	; 0x34
   13bd0:	ldrd	r2, [r6, #56]	; 0x38
   13bd4:	adds	r1, r2, #1
   13bd8:	str	r1, [r6, #56]	; 0x38
   13bdc:	adc	r1, r3, #0
   13be0:	str	r1, [r6, #60]	; 0x3c
   13be4:	ldr	r2, [r4, #8]
   13be8:	ldr	r1, [r4]
   13bec:	add	r3, r2, #1
   13bf0:	str	r3, [r4, #8]
   13bf4:	mov	r3, r7
   13bf8:	ldrb	r1, [r1, r2]
   13bfc:	mov	r2, #824	; 0x338
   13c00:	cmp	r1, #110	; 0x6e
   13c04:	movwne	r2, #816	; 0x330
   13c08:	ldr	r2, [r3, r2]!
   13c0c:	adds	r2, r2, #1
   13c10:	str	r2, [r3]
   13c14:	ldr	r2, [r3, #4]
   13c18:	adc	r2, r2, #0
   13c1c:	cmp	r1, #110	; 0x6e
   13c20:	str	r2, [r3, #4]
   13c24:	bne	14ad0 <next@@Base+0x1720>
   13c28:	mov	r1, #110	; 0x6e
   13c2c:	strh	r1, [r0, #2]
   13c30:	ldr	r0, [r7, #832]	; 0x340
   13c34:	ldr	r1, [r7, #836]	; 0x344
   13c38:	adds	r0, r0, #1
   13c3c:	adc	r1, r1, #0
   13c40:	str	r0, [r7, #832]	; 0x340
   13c44:	add	r0, r9, #4
   13c48:	str	r1, [r7, #836]	; 0x344
   13c4c:	bl	11f4c <malloc@plt>
   13c50:	add	r6, r9, #3
   13c54:	mov	r1, r8
   13c58:	mov	r4, r0
   13c5c:	mov	r2, r6
   13c60:	bl	11ff4 <strncpy@plt>
   13c64:	mov	r0, #0
   13c68:	strb	r0, [r4, r6]
   13c6c:	mov	r0, #8
   13c70:	bl	11f4c <malloc@plt>
   13c74:	mov	r1, r4
   13c78:	mov	r6, r0
   13c7c:	bl	12880 <init_token_function@@Base>
   13c80:	b	13a0c <next@@Base+0x65c>
   13c84:	add	r0, sl, #40	; 0x28
   13c88:	bl	14b30 <next@@Base+0x1780>
   13c8c:	uxtb	r0, r9
   13c90:	mov	r1, #848	; 0x350
   13c94:	mov	r2, r7
   13c98:	cmp	r0, #101	; 0x65
   13c9c:	movwne	r1, #840	; 0x348
   13ca0:	ldr	r1, [r2, r1]!
   13ca4:	adds	r1, r1, #1
   13ca8:	str	r1, [r2]
   13cac:	ldr	r1, [r2, #4]
   13cb0:	adc	r1, r1, #0
   13cb4:	cmp	r0, #101	; 0x65
   13cb8:	str	r1, [r2, #4]
   13cbc:	bne	14ad0 <next@@Base+0x1720>
   13cc0:	add	r0, pc, #712	; 0x2c8
   13cc4:	add	r3, sp, #8
   13cc8:	vld1.64	{d16-d17}, [r5 :128]
   13ccc:	vld1.64	{d18-d19}, [r0 :128]
   13cd0:	mov	ip, r3
   13cd4:	ldr	r3, [sp, #4]
   13cd8:	mov	r0, #101	; 0x65
   13cdc:	vadd.i64	q9, q8, q9
   13ce0:	strb	r0, [ip, r3]
   13ce4:	vst1.64	{d18-d19}, [r5 :128]
   13ce8:	ldr	r1, [r4, #8]
   13cec:	ldr	r0, [r4]
   13cf0:	add	r2, r1, #1
   13cf4:	str	r2, [r4, #8]
   13cf8:	mov	r2, r7
   13cfc:	ldrb	r0, [r0, r1]
   13d00:	mov	r1, #864	; 0x360
   13d04:	cmp	r0, #116	; 0x74
   13d08:	movwne	r1, #856	; 0x358
   13d0c:	ldr	r1, [r2, r1]!
   13d10:	adds	r1, r1, #1
   13d14:	str	r1, [r2]
   13d18:	ldr	r1, [r2, #4]
   13d1c:	adc	r1, r1, #0
   13d20:	cmp	r0, #116	; 0x74
   13d24:	str	r1, [r2, #4]
   13d28:	bne	14ad0 <next@@Base+0x1720>
   13d2c:	add	ip, ip, r3
   13d30:	mov	r1, #116	; 0x74
   13d34:	vmov.32	r2, d16[0]
   13d38:	vmov.32	r0, d16[1]
   13d3c:	strb	r1, [ip, #1]
   13d40:	adds	r1, r2, #2
   13d44:	adc	r3, r0, #0
   13d48:	str	r1, [r6, #48]	; 0x30
   13d4c:	mov	r1, r6
   13d50:	str	r3, [r6, #52]	; 0x34
   13d54:	ldr	r3, [r6, #60]	; 0x3c
   13d58:	ldr	r6, [r6, #56]	; 0x38
   13d5c:	adds	r6, r6, #1
   13d60:	adc	r3, r3, #0
   13d64:	str	r6, [r1, #56]	; 0x38
   13d68:	str	r3, [r1, #60]	; 0x3c
   13d6c:	ldr	r6, [r4, #8]
   13d70:	ldr	r3, [r4]
   13d74:	add	r5, r6, #1
   13d78:	str	r5, [r4, #8]
   13d7c:	mov	r5, r7
   13d80:	ldrb	r3, [r3, r6]
   13d84:	mov	r6, #880	; 0x370
   13d88:	cmp	r3, #117	; 0x75
   13d8c:	movwne	r6, #872	; 0x368
   13d90:	ldr	r6, [r5, r6]!
   13d94:	adds	r6, r6, #1
   13d98:	str	r6, [r5]
   13d9c:	ldr	r6, [r5, #4]
   13da0:	adc	r6, r6, #0
   13da4:	cmp	r3, #117	; 0x75
   13da8:	str	r6, [r5, #4]
   13dac:	bne	14ad0 <next@@Base+0x1720>
   13db0:	adds	r3, r2, #3
   13db4:	str	r3, [r1, #48]	; 0x30
   13db8:	mov	r3, #117	; 0x75
   13dbc:	strb	r3, [ip, #2]
   13dc0:	adc	r3, r0, #0
   13dc4:	str	r3, [r1, #52]	; 0x34
   13dc8:	ldr	r6, [r1, #56]	; 0x38
   13dcc:	ldr	r3, [r1, #60]	; 0x3c
   13dd0:	adds	r6, r6, #1
   13dd4:	adc	r3, r3, #0
   13dd8:	str	r6, [r1, #56]	; 0x38
   13ddc:	str	r3, [r1, #60]	; 0x3c
   13de0:	ldr	r6, [r4, #8]
   13de4:	ldr	r3, [r4]
   13de8:	add	r5, r6, #1
   13dec:	str	r5, [r4, #8]
   13df0:	mov	r5, r7
   13df4:	ldrb	r3, [r3, r6]
   13df8:	mov	r6, #896	; 0x380
   13dfc:	cmp	r3, #114	; 0x72
   13e00:	movwne	r6, #888	; 0x378
   13e04:	ldr	r6, [r5, r6]!
   13e08:	adds	r6, r6, #1
   13e0c:	str	r6, [r5]
   13e10:	ldr	r6, [r5, #4]
   13e14:	adc	r6, r6, #0
   13e18:	cmp	r3, #114	; 0x72
   13e1c:	str	r6, [r5, #4]
   13e20:	bne	14ad0 <next@@Base+0x1720>
   13e24:	adds	r2, r2, #4
   13e28:	str	r2, [r1, #48]	; 0x30
   13e2c:	mov	r2, #114	; 0x72
   13e30:	adc	r0, r0, #0
   13e34:	strb	r2, [ip, #3]
   13e38:	str	r0, [r1, #52]	; 0x34
   13e3c:	ldr	r0, [r1, #56]	; 0x38
   13e40:	ldr	r3, [r1, #60]	; 0x3c
   13e44:	adds	r0, r0, #1
   13e48:	str	r0, [r1, #56]	; 0x38
   13e4c:	adc	r0, r3, #0
   13e50:	str	r0, [r1, #60]	; 0x3c
   13e54:	ldr	r1, [r4, #8]
   13e58:	ldr	r0, [r4]
   13e5c:	add	r2, r1, #1
   13e60:	str	r2, [r4, #8]
   13e64:	mov	r2, r7
   13e68:	ldrb	r0, [r0, r1]
   13e6c:	mov	r1, #912	; 0x390
   13e70:	cmp	r0, #110	; 0x6e
   13e74:	movwne	r1, #904	; 0x388
   13e78:	ldr	r1, [r2, r1]!
   13e7c:	adds	r1, r1, #1
   13e80:	str	r1, [r2]
   13e84:	ldr	r1, [r2, #4]
   13e88:	adc	r1, r1, #0
   13e8c:	cmp	r0, #110	; 0x6e
   13e90:	str	r1, [r2, #4]
   13e94:	bne	14ad0 <next@@Base+0x1720>
   13e98:	ldr	r0, [r7, #920]	; 0x398
   13e9c:	ldr	r1, [r7, #924]	; 0x39c
   13ea0:	adds	r0, r0, #1
   13ea4:	adc	r1, r1, #0
   13ea8:	str	r0, [r7, #920]	; 0x398
   13eac:	mov	r0, #4
   13eb0:	str	r1, [r7, #924]	; 0x39c
   13eb4:	bl	11f4c <malloc@plt>
   13eb8:	mov	r6, r0
   13ebc:	bl	129c0 <init_token_return@@Base>
   13ec0:	b	13a0c <next@@Base+0x65c>
   13ec4:	add	r0, sl, #24
   13ec8:	bl	14b30 <next@@Base+0x1780>
   13ecc:	movw	r1, #53452	; 0xd0cc
   13ed0:	mov	r0, #1
   13ed4:	movt	r1, #2
   13ed8:	str	r0, [r1]
   13edc:	uxtb	r0, r9
   13ee0:	cmp	r0, #102	; 0x66
   13ee4:	beq	141e8 <next@@Base+0xe38>
   13ee8:	cmp	r0, #110	; 0x6e
   13eec:	bne	14ad8 <next@@Base+0x1728>
   13ef0:	add	r0, sl, #64	; 0x40
   13ef4:	bl	14b30 <next@@Base+0x1780>
   13ef8:	add	r0, pc, #144	; 0x90
   13efc:	vld1.64	{d18-d19}, [r5 :128]
   13f00:	ldr	r2, [sp, #4]
   13f04:	add	r1, sp, #8
   13f08:	vld1.64	{d16-d17}, [r0 :128]
   13f0c:	mov	r0, #110	; 0x6e
   13f10:	strb	r0, [r1, r2]
   13f14:	vadd.i64	q8, q9, q8
   13f18:	vst1.64	{d16-d17}, [r5 :128]
   13f1c:	ldr	r1, [r4, #8]
   13f20:	ldr	r0, [r4]
   13f24:	add	r2, r1, #1
   13f28:	str	r2, [r4, #8]
   13f2c:	mov	r2, r7
   13f30:	ldrb	r0, [r0, r1]
   13f34:	mov	r1, #760	; 0x2f8
   13f38:	cmp	r0, #116	; 0x74
   13f3c:	movwne	r1, #752	; 0x2f0
   13f40:	ldr	r1, [r2, r1]!
   13f44:	adds	r1, r1, #1
   13f48:	str	r1, [r2]
   13f4c:	ldr	r1, [r2, #4]
   13f50:	adc	r1, r1, #0
   13f54:	cmp	r0, #116	; 0x74
   13f58:	str	r1, [r2, #4]
   13f5c:	bne	14ad0 <next@@Base+0x1720>
   13f60:	ldr	r0, [r7, #768]	; 0x300
   13f64:	ldr	r1, [r7, #772]	; 0x304
   13f68:	adds	r0, r0, #1
   13f6c:	adc	r1, r1, #0
   13f70:	str	r0, [r7, #768]	; 0x300
   13f74:	mov	r0, #4
   13f78:	str	r1, [r7, #772]	; 0x304
   13f7c:	bl	11f4c <malloc@plt>
   13f80:	mov	r6, r0
   13f84:	bl	12800 <init_token_int_type@@Base>
   13f88:	b	13a0c <next@@Base+0x65c>
   13f8c:	nop	{0}
   13f90:	andeq	r0, r0, r1
   13f94:	andeq	r0, r0, r0
   13f98:	andeq	r0, r0, r1
   13f9c:	andeq	r0, r0, r0
   13fa0:	add	r0, sl, #48	; 0x30
   13fa4:	bl	14b30 <next@@Base+0x1780>
   13fa8:	uxtb	r0, r9
   13fac:	mov	r1, #936	; 0x3a8
   13fb0:	mov	r2, r7
   13fb4:	cmp	r0, #108	; 0x6c
   13fb8:	movwne	r1, #928	; 0x3a0
   13fbc:	ldr	r1, [r2, r1]!
   13fc0:	adds	r1, r1, #1
   13fc4:	str	r1, [r2]
   13fc8:	ldr	r1, [r2, #4]
   13fcc:	adc	r1, r1, #0
   13fd0:	cmp	r0, #108	; 0x6c
   13fd4:	str	r1, [r2, #4]
   13fd8:	bne	14ad0 <next@@Base+0x1720>
   13fdc:	sub	r0, pc, #84	; 0x54
   13fe0:	add	r3, sp, #8
   13fe4:	vld1.64	{d16-d17}, [r5 :128]
   13fe8:	vld1.64	{d18-d19}, [r0 :128]
   13fec:	mov	ip, r3
   13ff0:	ldr	r3, [sp, #4]
   13ff4:	mov	r0, #108	; 0x6c
   13ff8:	vadd.i64	q9, q8, q9
   13ffc:	strb	r0, [ip, r3]
   14000:	vst1.64	{d18-d19}, [r5 :128]
   14004:	ldr	r1, [r4, #8]
   14008:	ldr	r0, [r4]
   1400c:	add	r2, r1, #1
   14010:	str	r2, [r4, #8]
   14014:	mov	r2, r7
   14018:	ldrb	r0, [r0, r1]
   1401c:	mov	r1, #952	; 0x3b8
   14020:	cmp	r0, #115	; 0x73
   14024:	movwne	r1, #944	; 0x3b0
   14028:	ldr	r1, [r2, r1]!
   1402c:	adds	r1, r1, #1
   14030:	str	r1, [r2]
   14034:	ldr	r1, [r2, #4]
   14038:	adc	r1, r1, #0
   1403c:	cmp	r0, #115	; 0x73
   14040:	str	r1, [r2, #4]
   14044:	bne	14ad0 <next@@Base+0x1720>
   14048:	add	r0, ip, r3
   1404c:	mov	r1, #115	; 0x73
   14050:	strb	r1, [r0, #1]
   14054:	vmov.32	r0, d16[0]
   14058:	adds	r0, r0, #2
   1405c:	str	r0, [r6, #48]	; 0x30
   14060:	vmov.32	r0, d16[1]
   14064:	adc	r0, r0, #0
   14068:	str	r0, [r6, #52]	; 0x34
   1406c:	ldrd	r0, [r6, #56]	; 0x38
   14070:	adds	r0, r0, #1
   14074:	str	r0, [r6, #56]	; 0x38
   14078:	adc	r0, r1, #0
   1407c:	str	r0, [r6, #60]	; 0x3c
   14080:	ldr	r1, [r4, #8]
   14084:	ldr	r0, [r4]
   14088:	add	r2, r1, #1
   1408c:	str	r2, [r4, #8]
   14090:	mov	r2, r7
   14094:	ldrb	r0, [r0, r1]
   14098:	mov	r1, #968	; 0x3c8
   1409c:	cmp	r0, #101	; 0x65
   140a0:	movwne	r1, #960	; 0x3c0
   140a4:	ldr	r1, [r2, r1]!
   140a8:	adds	r1, r1, #1
   140ac:	str	r1, [r2]
   140b0:	ldr	r1, [r2, #4]
   140b4:	adc	r1, r1, #0
   140b8:	cmp	r0, #101	; 0x65
   140bc:	str	r1, [r2, #4]
   140c0:	bne	14ad0 <next@@Base+0x1720>
   140c4:	ldr	r0, [r7, #976]	; 0x3d0
   140c8:	ldr	r1, [r7, #980]	; 0x3d4
   140cc:	adds	r0, r0, #1
   140d0:	adc	r1, r1, #0
   140d4:	str	r0, [r7, #976]	; 0x3d0
   140d8:	mov	r0, #4
   140dc:	str	r1, [r7, #980]	; 0x3d4
   140e0:	bl	11f4c <malloc@plt>
   140e4:	mov	r6, r0
   140e8:	bl	12ac0 <init_token_else@@Base>
   140ec:	b	13a0c <next@@Base+0x65c>
   140f0:	ldr	r8, [sp, #4]
   140f4:	sub	r0, pc, #364	; 0x16c
   140f8:	mov	r5, r8
   140fc:	movw	r8, #55184	; 0xd790
   14100:	ldr	r2, [r7, #724]	; 0x2d4
   14104:	vld1.64	{d16-d17}, [r0 :128]
   14108:	ldr	r0, [r7, #720]	; 0x2d0
   1410c:	movt	r8, #2
   14110:	add	r1, r8, #64	; 0x40
   14114:	vld1.64	{d18-d19}, [r1 :128]
   14118:	adds	r0, r0, #1
   1411c:	str	r0, [r7, #720]	; 0x2d0
   14120:	movw	r0, #55280	; 0xd7f0
   14124:	adc	r2, r2, #0
   14128:	movt	r0, #2
   1412c:	vadd.i64	q8, q9, q8
   14130:	ldr	r6, [r0]
   14134:	ldr	r3, [r0, #4]
   14138:	str	r2, [r7, #724]	; 0x2d4
   1413c:	mov	r2, #16
   14140:	adds	r6, r6, #1
   14144:	adc	r3, r3, #0
   14148:	str	r6, [r0]
   1414c:	str	r3, [r0, #4]
   14150:	vst1.64	{d16-d17}, [r1 :128]
   14154:	mov	r3, r0
   14158:	ldr	r1, [r4, #8]
   1415c:	cmp	r1, #0
   14160:	movwne	r2, #8
   14164:	ldr	r2, [r3, r2]!
   14168:	adds	r2, r2, #1
   1416c:	str	r2, [r3]
   14170:	ldr	r2, [r3, #4]
   14174:	adc	r2, r2, #0
   14178:	cmp	r1, #0
   1417c:	str	r2, [r3, #4]
   14180:	beq	14ab0 <next@@Base+0x1700>
   14184:	ldrd	r2, [r0, #24]
   14188:	adds	r2, r2, #1
   1418c:	adc	r3, r3, #0
   14190:	strd	r2, [r0, #24]
   14194:	sub	r0, r1, #1
   14198:	str	r0, [r4, #8]
   1419c:	mov	r0, #0
   141a0:	strb	r0, [sl, r5]
   141a4:	mov	r0, #8
   141a8:	bl	11f4c <malloc@plt>
   141ac:	mov	r6, r0
   141b0:	sub	r1, pc, #552	; 0x228
   141b4:	add	r0, r8, #80	; 0x50
   141b8:	mov	r2, #10
   141bc:	vld1.64	{d16-d17}, [r1 :128]
   141c0:	vld1.64	{d18-d19}, [r0 :128]
   141c4:	mov	r1, #0
   141c8:	vadd.i64	q8, q9, q8
   141cc:	vst1.64	{d16-d17}, [r0 :128]
   141d0:	mov	r0, sl
   141d4:	bl	11eb0 <strtol@plt>
   141d8:	mov	r1, r0
   141dc:	mov	r0, r6
   141e0:	bl	12840 <init_token_int_value@@Base>
   141e4:	b	13a0c <next@@Base+0x65c>
   141e8:	add	r0, sl, #72	; 0x48
   141ec:	bl	14b30 <next@@Base+0x1780>
   141f0:	ldr	r1, [sp, #4]
   141f4:	add	r0, sp, #8
   141f8:	add	r0, r0, r1
   141fc:	mov	r1, #102	; 0x66
   14200:	strh	r1, [r0]
   14204:	ldr	r0, [r7, #776]	; 0x308
   14208:	ldr	r1, [r7, #780]	; 0x30c
   1420c:	adds	r0, r0, #1
   14210:	adc	r1, r1, #0
   14214:	str	r0, [r7, #776]	; 0x308
   14218:	mov	r0, #4
   1421c:	str	r1, [r7, #780]	; 0x30c
   14220:	bl	11f4c <malloc@plt>
   14224:	mov	r6, r0
   14228:	bl	12a80 <init_token_if@@Base>
   1422c:	b	13a0c <next@@Base+0x65c>
   14230:	ldrd	r0, [r7, #184]	; 0xb8
   14234:	adds	r0, r0, #1
   14238:	adc	r1, r1, #0
   1423c:	strd	r0, [r7, #184]	; 0xb8
   14240:	mov	r0, #8
   14244:	bl	11f4c <malloc@plt>
   14248:	mov	r1, #0
   1424c:	mov	r6, r0
   14250:	bl	12840 <init_token_int_value@@Base>
   14254:	b	13a0c <next@@Base+0x65c>
   14258:	mov	r0, #240	; 0xf0
   1425c:	cmp	r2, #40	; 0x28
   14260:	mov	r1, r7
   14264:	movweq	r0, #232	; 0xe8
   14268:	ldr	r0, [r1, r0]!
   1426c:	adds	r0, r0, #1
   14270:	str	r0, [r1]
   14274:	ldr	r0, [r1, #4]
   14278:	adc	r0, r0, #0
   1427c:	cmp	r2, #40	; 0x28
   14280:	str	r0, [r1, #4]
   14284:	bne	142ac <next@@Base+0xefc>
   14288:	ldrd	r0, [r7, #248]	; 0xf8
   1428c:	adds	r0, r0, #1
   14290:	adc	r1, r1, #0
   14294:	strd	r0, [r7, #248]	; 0xf8
   14298:	mov	r0, #4
   1429c:	bl	11f4c <malloc@plt>
   142a0:	mov	r6, r0
   142a4:	bl	128c0 <init_token_opar@@Base>
   142a8:	b	13a0c <next@@Base+0x65c>
   142ac:	mov	r0, #264	; 0x108
   142b0:	cmp	r2, #41	; 0x29
   142b4:	mov	r1, r7
   142b8:	movweq	r0, #256	; 0x100
   142bc:	ldr	r0, [r1, r0]!
   142c0:	adds	r0, r0, #1
   142c4:	str	r0, [r1]
   142c8:	ldr	r0, [r1, #4]
   142cc:	adc	r0, r0, #0
   142d0:	cmp	r2, #41	; 0x29
   142d4:	str	r0, [r1, #4]
   142d8:	bne	1438c <next@@Base+0xfdc>
   142dc:	ldr	r0, [r7, #272]	; 0x110
   142e0:	ldr	r1, [r7, #276]	; 0x114
   142e4:	adds	r0, r0, #1
   142e8:	adc	r1, r1, #0
   142ec:	str	r0, [r7, #272]	; 0x110
   142f0:	mov	r0, #4
   142f4:	str	r1, [r7, #276]	; 0x114
   142f8:	bl	11f4c <malloc@plt>
   142fc:	mov	r6, r0
   14300:	bl	12900 <init_token_cpar@@Base>
   14304:	b	13a0c <next@@Base+0x65c>
   14308:	ldr	r0, [r7, #296]	; 0x128
   1430c:	ldr	r1, [r7, #300]	; 0x12c
   14310:	adds	r0, r0, #1
   14314:	adc	r1, r1, #0
   14318:	str	r0, [r7, #296]	; 0x128
   1431c:	mov	r0, #4
   14320:	str	r1, [r7, #300]	; 0x12c
   14324:	bl	11f4c <malloc@plt>
   14328:	mov	r6, r0
   1432c:	bl	12940 <init_token_obra@@Base>
   14330:	b	13a0c <next@@Base+0x65c>
   14334:	ldr	r0, [r7, #320]	; 0x140
   14338:	ldr	r1, [r7, #324]	; 0x144
   1433c:	adds	r0, r0, #1
   14340:	adc	r1, r1, #0
   14344:	str	r0, [r7, #320]	; 0x140
   14348:	mov	r0, #4
   1434c:	str	r1, [r7, #324]	; 0x144
   14350:	bl	11f4c <malloc@plt>
   14354:	mov	r6, r0
   14358:	bl	12980 <init_token_cbra@@Base>
   1435c:	b	13a0c <next@@Base+0x65c>
   14360:	ldr	r0, [r7, #344]	; 0x158
   14364:	ldr	r1, [r7, #348]	; 0x15c
   14368:	adds	r0, r0, #1
   1436c:	adc	r1, r1, #0
   14370:	str	r0, [r7, #344]	; 0x158
   14374:	mov	r0, #4
   14378:	str	r1, [r7, #348]	; 0x15c
   1437c:	bl	11f4c <malloc@plt>
   14380:	mov	r6, r0
   14384:	bl	12a00 <init_token_semicolon@@Base>
   14388:	b	13a0c <next@@Base+0x65c>
   1438c:	ldr	r0, [r7, #408]	; 0x198
   14390:	ldr	r1, [r7, #412]	; 0x19c
   14394:	mov	sl, r6
   14398:	ldr	r6, [r7, #388]	; 0x184
   1439c:	adds	r3, r0, #1
   143a0:	ldr	r0, [r7, #360]	; 0x168
   143a4:	adc	ip, r1, #0
   143a8:	ldr	r1, [r7, #384]	; 0x180
   143ac:	adds	r1, r1, #1
   143b0:	adc	lr, r6, #0
   143b4:	ldr	r6, [r7, #364]	; 0x16c
   143b8:	adds	r0, r0, #1
   143bc:	adc	r8, r6, #0
   143c0:	ldr	r6, [r7, #336]	; 0x150
   143c4:	adds	r6, r6, #1
   143c8:	str	r6, [r7, #336]	; 0x150
   143cc:	str	r0, [r7, #360]	; 0x168
   143d0:	str	r1, [r7, #384]	; 0x180
   143d4:	str	r3, [r7, #408]	; 0x198
   143d8:	ldr	r0, [r7, #340]	; 0x154
   143dc:	ldr	r6, [r7, #312]	; 0x138
   143e0:	ldr	r1, [r7, #288]	; 0x120
   143e4:	ldr	r3, [r7, #292]	; 0x124
   143e8:	adc	r9, r0, #0
   143ec:	adds	r6, r6, #1
   143f0:	ldr	r0, [r7, #316]	; 0x13c
   143f4:	str	r6, [r7, #312]	; 0x138
   143f8:	ldr	r6, [r7, #432]	; 0x1b0
   143fc:	adc	r0, r0, #0
   14400:	adds	r1, r1, #1
   14404:	adc	r3, r3, #0
   14408:	adds	r6, r6, #1
   1440c:	str	r6, [r7, #432]	; 0x1b0
   14410:	str	r1, [r7, #288]	; 0x120
   14414:	str	r3, [r7, #292]	; 0x124
   14418:	str	r0, [r7, #316]	; 0x13c
   1441c:	str	r9, [r7, #340]	; 0x154
   14420:	str	r8, [r7, #364]	; 0x16c
   14424:	str	lr, [r7, #388]	; 0x184
   14428:	str	ip, [r7, #412]	; 0x19c
   1442c:	mov	r1, r7
   14430:	ldr	r0, [r7, #436]	; 0x1b4
   14434:	adc	r0, r0, #0
   14438:	cmp	r2, #33	; 0x21
   1443c:	str	r0, [r7, #436]	; 0x1b4
   14440:	mov	r0, #456	; 0x1c8
   14444:	movweq	r0, #448	; 0x1c0
   14448:	ldr	r0, [r1, r0]!
   1444c:	adds	r0, r0, #1
   14450:	str	r0, [r1]
   14454:	ldr	r0, [r1, #4]
   14458:	adc	r0, r0, #0
   1445c:	cmp	r2, #33	; 0x21
   14460:	str	r0, [r1, #4]
   14464:	bne	14588 <next@@Base+0x11d8>
   14468:	add	r0, pc, #688	; 0x2b0
   1446c:	vld1.64	{d18-d19}, [r5 :128]
   14470:	ldr	r2, [sp, #4]
   14474:	add	r1, sp, #8
   14478:	vld1.64	{d16-d17}, [r0 :128]
   1447c:	mov	r0, #33	; 0x21
   14480:	strb	r0, [r1, r2]
   14484:	vadd.i64	q8, q9, q8
   14488:	vst1.64	{d16-d17}, [r5 :128]
   1448c:	mov	r5, #472	; 0x1d8
   14490:	ldr	r1, [r4, #8]
   14494:	ldr	r0, [r4]
   14498:	add	r2, r1, #1
   1449c:	str	r2, [r4, #8]
   144a0:	ldrb	r8, [r0, r1]
   144a4:	mov	r0, #8
   144a8:	cmp	r8, #61	; 0x3d
   144ac:	movwne	r5, #464	; 0x1d0
   144b0:	bl	11f4c <malloc@plt>
   144b4:	mov	r6, r0
   144b8:	mov	r0, r7
   144bc:	ldr	r1, [r0, r5]!
   144c0:	adds	r1, r1, #1
   144c4:	str	r1, [r0]
   144c8:	ldr	r1, [r0, #4]
   144cc:	adc	r1, r1, #0
   144d0:	cmp	r8, #61	; 0x3d
   144d4:	str	r1, [r0, #4]
   144d8:	beq	146c0 <next@@Base+0x1310>
   144dc:	add	r0, pc, #572	; 0x23c
   144e0:	add	r1, sl, #64	; 0x40
   144e4:	ldr	r2, [r7, #484]	; 0x1e4
   144e8:	vld1.64	{d16-d17}, [r0 :128]
   144ec:	ldr	r0, [r7, #480]	; 0x1e0
   144f0:	vld1.64	{d18-d19}, [r1 :128]
   144f4:	adds	r0, r0, #1
   144f8:	vadd.i64	q8, q9, q8
   144fc:	str	r0, [r7, #480]	; 0x1e0
   14500:	movw	r0, #55280	; 0xd7f0
   14504:	adc	r2, r2, #0
   14508:	vst1.64	{d16-d17}, [r1 :128]
   1450c:	movt	r0, #2
   14510:	str	r2, [r7, #484]	; 0x1e4
   14514:	mov	r2, #16
   14518:	ldrd	r8, [r0]
   1451c:	mov	r3, r0
   14520:	adds	r8, r8, #1
   14524:	adc	r9, r9, #0
   14528:	strd	r8, [r0]
   1452c:	ldr	r1, [r4, #8]
   14530:	cmp	r1, #0
   14534:	movwne	r2, #8
   14538:	ldr	r2, [r3, r2]!
   1453c:	adds	r2, r2, #1
   14540:	str	r2, [r3]
   14544:	ldr	r2, [r3, #4]
   14548:	adc	r2, r2, #0
   1454c:	cmp	r1, #0
   14550:	str	r2, [r3, #4]
   14554:	beq	14ab0 <next@@Base+0x1700>
   14558:	ldrd	r2, [r0, #24]
   1455c:	adds	r2, r2, #1
   14560:	adc	r3, r3, #0
   14564:	strd	r2, [r0, #24]
   14568:	sub	r0, r1, #1
   1456c:	str	r0, [r4, #8]
   14570:	mov	r0, #2
   14574:	bl	11f4c <malloc@plt>
   14578:	ldrb	r2, [sp, #8]
   1457c:	mov	r1, r0
   14580:	strb	r2, [r0], #1
   14584:	b	146f8 <next@@Base+0x1348>
   14588:	ldr	r0, [r7, #584]	; 0x248
   1458c:	ldr	r1, [r7, #588]	; 0x24c
   14590:	ldr	r3, [r7, #512]	; 0x200
   14594:	ldr	r6, [r7, #516]	; 0x204
   14598:	adds	ip, r0, #1
   1459c:	ldr	r0, [r7, #528]	; 0x210
   145a0:	adc	lr, r1, #0
   145a4:	ldr	r1, [r7, #532]	; 0x214
   145a8:	adds	r8, r0, #1
   145ac:	ldr	r0, [r7, #624]	; 0x270
   145b0:	adc	r1, r1, #0
   145b4:	adds	r3, r3, #1
   145b8:	adc	r6, r6, #0
   145bc:	adds	r0, r0, #1
   145c0:	str	r0, [r7, #624]	; 0x270
   145c4:	str	r3, [r7, #512]	; 0x200
   145c8:	str	r6, [r7, #516]	; 0x204
   145cc:	str	r1, [r7, #532]	; 0x214
   145d0:	str	r8, [r7, #528]	; 0x210
   145d4:	str	ip, [r7, #584]	; 0x248
   145d8:	str	lr, [r7, #588]	; 0x24c
   145dc:	mov	r1, r7
   145e0:	ldr	r0, [r7, #628]	; 0x274
   145e4:	adc	r0, r0, #0
   145e8:	cmp	r2, #38	; 0x26
   145ec:	str	r0, [r7, #628]	; 0x274
   145f0:	mov	r0, #664	; 0x298
   145f4:	movweq	r0, #656	; 0x290
   145f8:	ldr	r0, [r1, r0]!
   145fc:	adds	r0, r0, #1
   14600:	str	r0, [r1]
   14604:	ldr	r0, [r1, #4]
   14608:	adc	r0, r0, #0
   1460c:	cmp	r2, #38	; 0x26
   14610:	str	r0, [r1, #4]
   14614:	bne	14b00 <next@@Base+0x1750>
   14618:	add	r0, pc, #256	; 0x100
   1461c:	vld1.64	{d18-d19}, [r5 :128]
   14620:	ldr	r1, [sp, #4]
   14624:	mov	r8, #38	; 0x26
   14628:	vld1.64	{d16-d17}, [r0 :128]
   1462c:	add	r0, sp, #8
   14630:	strb	r8, [r0, r1]
   14634:	vadd.i64	q8, q9, q8
   14638:	vst1.64	{d16-d17}, [r5 :128]
   1463c:	mov	r5, #680	; 0x2a8
   14640:	ldr	r1, [r4, #8]
   14644:	ldr	r0, [r4]
   14648:	add	r2, r1, #1
   1464c:	str	r2, [r4, #8]
   14650:	ldrb	r4, [r0, r1]
   14654:	mov	r0, #8
   14658:	cmp	r4, #38	; 0x26
   1465c:	movwne	r5, #672	; 0x2a0
   14660:	bl	11f4c <malloc@plt>
   14664:	mov	r6, r0
   14668:	mov	r0, r7
   1466c:	ldr	r1, [r0, r5]!
   14670:	adds	r1, r1, #1
   14674:	str	r1, [r0]
   14678:	ldr	r1, [r0, #4]
   1467c:	adc	r1, r1, #0
   14680:	cmp	r4, #38	; 0x26
   14684:	str	r1, [r0, #4]
   14688:	bne	14ad0 <next@@Base+0x1720>
   1468c:	ldr	r0, [r7, #688]	; 0x2b0
   14690:	ldr	r1, [r7, #692]	; 0x2b4
   14694:	adds	r0, r0, #1
   14698:	adc	r1, r1, #0
   1469c:	str	r0, [r7, #688]	; 0x2b0
   146a0:	str	r1, [r7, #692]	; 0x2b4
   146a4:	mov	r0, #3
   146a8:	bl	11f4c <malloc@plt>
   146ac:	mov	r1, r0
   146b0:	ldrb	r0, [sp, #8]
   146b4:	strh	r8, [r1, #1]
   146b8:	strb	r0, [r1]
   146bc:	b	14924 <next@@Base+0x1574>
   146c0:	ldr	r0, [r7, #488]	; 0x1e8
   146c4:	ldr	r1, [r7, #492]	; 0x1ec
   146c8:	adds	r0, r0, #1
   146cc:	adc	r1, r1, #0
   146d0:	str	r0, [r7, #488]	; 0x1e8
   146d4:	mov	r0, #3
   146d8:	str	r1, [r7, #492]	; 0x1ec
   146dc:	bl	11f4c <malloc@plt>
   146e0:	mov	r1, r0
   146e4:	ldrb	r0, [sp, #8]
   146e8:	mov	r2, #61	; 0x3d
   146ec:	strb	r2, [r1, #1]
   146f0:	strb	r0, [r1]
   146f4:	add	r0, r1, #2
   146f8:	mov	r2, #0
   146fc:	strb	r2, [r0]
   14700:	ldr	r0, [r7, #496]	; 0x1f0
   14704:	ldr	r2, [r7, #500]	; 0x1f4
   14708:	adds	r0, r0, #1
   1470c:	adc	r2, r2, #0
   14710:	str	r0, [r7, #496]	; 0x1f0
   14714:	str	r2, [r7, #500]	; 0x1f4
   14718:	b	14924 <next@@Base+0x1574>
   1471c:	nop	{0}
   14720:	andeq	r0, r0, r1
   14724:	andeq	r0, r0, r0
   14728:	andeq	r0, r0, r1
   1472c:	andeq	r0, r0, r0
   14730:	ldr	r0, [r7, #456]	; 0x1c8
   14734:	ldr	r1, [r7, #460]	; 0x1cc
   14738:	adds	r0, r0, #1
   1473c:	adc	r1, r1, #0
   14740:	str	r0, [r7, #456]	; 0x1c8
   14744:	mov	r0, #512	; 0x200
   14748:	cmp	r2, #60	; 0x3c
   1474c:	str	r1, [r7, #460]	; 0x1cc
   14750:	movweq	r0, #504	; 0x1f8
   14754:	mov	r1, r7
   14758:	ldr	r0, [r1, r0]!
   1475c:	adds	r0, r0, #1
   14760:	str	r0, [r1]
   14764:	ldr	r0, [r1, #4]
   14768:	adc	r0, r0, #0
   1476c:	cmp	r2, #60	; 0x3c
   14770:	str	r0, [r1, #4]
   14774:	beq	147a8 <next@@Base+0x13f8>
   14778:	mov	r0, #528	; 0x210
   1477c:	cmp	r2, #62	; 0x3e
   14780:	mov	r1, r7
   14784:	movweq	r0, #520	; 0x208
   14788:	ldr	r0, [r1, r0]!
   1478c:	adds	r0, r0, #1
   14790:	str	r0, [r1]
   14794:	ldr	r0, [r1, #4]
   14798:	adc	r0, r0, #0
   1479c:	cmp	r2, #62	; 0x3e
   147a0:	str	r0, [r1, #4]
   147a4:	bne	14930 <next@@Base+0x1580>
   147a8:	add	r0, pc, #880	; 0x370
   147ac:	vld1.64	{d18-d19}, [r5 :128]
   147b0:	ldr	r1, [sp, #4]
   147b4:	vld1.64	{d16-d17}, [r0 :128]
   147b8:	add	r0, sp, #8
   147bc:	strb	r9, [r0, r1]
   147c0:	vadd.i64	q8, q9, q8
   147c4:	vst1.64	{d16-d17}, [r5 :128]
   147c8:	mov	r5, #544	; 0x220
   147cc:	ldr	r1, [r4, #8]
   147d0:	ldr	r0, [r4]
   147d4:	add	r2, r1, #1
   147d8:	str	r2, [r4, #8]
   147dc:	ldrb	r8, [r0, r1]
   147e0:	mov	r0, #8
   147e4:	cmp	r8, #61	; 0x3d
   147e8:	movwne	r5, #536	; 0x218
   147ec:	bl	11f4c <malloc@plt>
   147f0:	mov	r6, r0
   147f4:	mov	r0, r7
   147f8:	ldr	r1, [r0, r5]!
   147fc:	adds	r1, r1, #1
   14800:	str	r1, [r0]
   14804:	ldr	r1, [r0, #4]
   14808:	adc	r1, r1, #0
   1480c:	cmp	r8, #61	; 0x3d
   14810:	str	r1, [r0, #4]
   14814:	beq	148cc <next@@Base+0x151c>
   14818:	movw	r0, #55184	; 0xd790
   1481c:	movt	r0, #2
   14820:	add	r1, r0, #64	; 0x40
   14824:	add	r0, pc, #756	; 0x2f4
   14828:	ldr	r2, [r7, #556]	; 0x22c
   1482c:	vld1.64	{d16-d17}, [r0 :128]
   14830:	ldr	r0, [r7, #552]	; 0x228
   14834:	vld1.64	{d18-d19}, [r1 :128]
   14838:	adds	r0, r0, #1
   1483c:	vadd.i64	q8, q9, q8
   14840:	str	r0, [r7, #552]	; 0x228
   14844:	movw	r0, #55280	; 0xd7f0
   14848:	adc	r2, r2, #0
   1484c:	vst1.64	{d16-d17}, [r1 :128]
   14850:	movt	r0, #2
   14854:	str	r2, [r7, #556]	; 0x22c
   14858:	mov	r2, #16
   1485c:	ldrd	r8, [r0]
   14860:	mov	r3, r0
   14864:	adds	r8, r8, #1
   14868:	adc	r9, r9, #0
   1486c:	strd	r8, [r0]
   14870:	ldr	r1, [r4, #8]
   14874:	cmp	r1, #0
   14878:	movwne	r2, #8
   1487c:	ldr	r2, [r3, r2]!
   14880:	adds	r2, r2, #1
   14884:	str	r2, [r3]
   14888:	ldr	r2, [r3, #4]
   1488c:	adc	r2, r2, #0
   14890:	cmp	r1, #0
   14894:	str	r2, [r3, #4]
   14898:	beq	14ab0 <next@@Base+0x1700>
   1489c:	ldrd	r2, [r0, #24]
   148a0:	adds	r2, r2, #1
   148a4:	adc	r3, r3, #0
   148a8:	strd	r2, [r0, #24]
   148ac:	sub	r0, r1, #1
   148b0:	str	r0, [r4, #8]
   148b4:	mov	r0, #2
   148b8:	bl	11f4c <malloc@plt>
   148bc:	ldrb	r2, [sp, #8]
   148c0:	mov	r1, r0
   148c4:	strb	r2, [r0], #1
   148c8:	b	14904 <next@@Base+0x1554>
   148cc:	ldr	r0, [r7, #560]	; 0x230
   148d0:	ldr	r1, [r7, #564]	; 0x234
   148d4:	adds	r0, r0, #1
   148d8:	adc	r1, r1, #0
   148dc:	str	r0, [r7, #560]	; 0x230
   148e0:	mov	r0, #3
   148e4:	str	r1, [r7, #564]	; 0x234
   148e8:	bl	11f4c <malloc@plt>
   148ec:	mov	r1, r0
   148f0:	ldrb	r0, [sp, #8]
   148f4:	mov	r2, #61	; 0x3d
   148f8:	strb	r2, [r1, #1]
   148fc:	strb	r0, [r1]
   14900:	add	r0, r1, #2
   14904:	mov	r2, #0
   14908:	strb	r2, [r0]
   1490c:	ldr	r0, [r7, #568]	; 0x238
   14910:	ldr	r2, [r7, #572]	; 0x23c
   14914:	adds	r0, r0, #1
   14918:	adc	r2, r2, #0
   1491c:	str	r0, [r7, #568]	; 0x238
   14920:	str	r2, [r7, #572]	; 0x23c
   14924:	mov	r0, r6
   14928:	bl	12b00 <init_token_boolean_op@@Base>
   1492c:	b	13a0c <next@@Base+0x65c>
   14930:	mov	r0, #584	; 0x248
   14934:	cmp	r2, #61	; 0x3d
   14938:	mov	r1, r7
   1493c:	movweq	r0, #576	; 0x240
   14940:	ldr	r0, [r1, r0]!
   14944:	adds	r0, r0, #1
   14948:	str	r0, [r1]
   1494c:	ldr	r0, [r1, #4]
   14950:	adc	r0, r0, #0
   14954:	cmp	r2, #61	; 0x3d
   14958:	str	r0, [r1, #4]
   1495c:	bne	149f0 <next@@Base+0x1640>
   14960:	add	r0, pc, #440	; 0x1b8
   14964:	vld1.64	{d18-d19}, [r5 :128]
   14968:	ldr	r1, [sp, #4]
   1496c:	mov	r8, #61	; 0x3d
   14970:	vld1.64	{d16-d17}, [r0 :128]
   14974:	add	r0, sp, #8
   14978:	strb	r8, [r0, r1]
   1497c:	vadd.i64	q8, q9, q8
   14980:	vst1.64	{d16-d17}, [r5 :128]
   14984:	mov	r5, #600	; 0x258
   14988:	ldr	r1, [r4, #8]
   1498c:	ldr	r0, [r4]
   14990:	add	r2, r1, #1
   14994:	str	r2, [r4, #8]
   14998:	ldrb	r4, [r0, r1]
   1499c:	mov	r0, #8
   149a0:	cmp	r4, #61	; 0x3d
   149a4:	movwne	r5, #592	; 0x250
   149a8:	bl	11f4c <malloc@plt>
   149ac:	mov	r6, r0
   149b0:	mov	r0, r7
   149b4:	ldr	r1, [r0, r5]!
   149b8:	adds	r1, r1, #1
   149bc:	str	r1, [r0]
   149c0:	ldr	r1, [r0, #4]
   149c4:	adc	r1, r1, #0
   149c8:	cmp	r4, #61	; 0x3d
   149cc:	str	r1, [r0, #4]
   149d0:	bne	14ad0 <next@@Base+0x1720>
   149d4:	ldr	r0, [r7, #608]	; 0x260
   149d8:	ldr	r1, [r7, #612]	; 0x264
   149dc:	adds	r0, r0, #1
   149e0:	adc	r1, r1, #0
   149e4:	str	r0, [r7, #608]	; 0x260
   149e8:	str	r1, [r7, #612]	; 0x264
   149ec:	b	146a4 <next@@Base+0x12f4>
   149f0:	mov	r0, #624	; 0x270
   149f4:	cmp	r2, #124	; 0x7c
   149f8:	mov	r1, r7
   149fc:	movweq	r0, #616	; 0x268
   14a00:	ldr	r0, [r1, r0]!
   14a04:	adds	r0, r0, #1
   14a08:	str	r0, [r1]
   14a0c:	ldr	r0, [r1, #4]
   14a10:	adc	r0, r0, #0
   14a14:	cmp	r2, #124	; 0x7c
   14a18:	str	r0, [r1, #4]
   14a1c:	bne	14ae8 <next@@Base+0x1738>
   14a20:	add	r0, pc, #248	; 0xf8
   14a24:	vld1.64	{d18-d19}, [r5 :128]
   14a28:	ldr	r1, [sp, #4]
   14a2c:	mov	r8, #124	; 0x7c
   14a30:	vld1.64	{d16-d17}, [r0 :128]
   14a34:	add	r0, sp, #8
   14a38:	strb	r8, [r0, r1]
   14a3c:	vadd.i64	q8, q9, q8
   14a40:	vst1.64	{d16-d17}, [r5 :128]
   14a44:	mov	r5, #640	; 0x280
   14a48:	ldr	r1, [r4, #8]
   14a4c:	ldr	r0, [r4]
   14a50:	add	r2, r1, #1
   14a54:	str	r2, [r4, #8]
   14a58:	ldrb	r4, [r0, r1]
   14a5c:	mov	r0, #8
   14a60:	cmp	r4, #124	; 0x7c
   14a64:	movwne	r5, #632	; 0x278
   14a68:	bl	11f4c <malloc@plt>
   14a6c:	mov	r6, r0
   14a70:	mov	r0, r7
   14a74:	ldr	r1, [r0, r5]!
   14a78:	adds	r1, r1, #1
   14a7c:	str	r1, [r0]
   14a80:	ldr	r1, [r0, #4]
   14a84:	adc	r1, r1, #0
   14a88:	cmp	r4, #124	; 0x7c
   14a8c:	str	r1, [r0, #4]
   14a90:	bne	14ad0 <next@@Base+0x1720>
   14a94:	ldr	r0, [r7, #648]	; 0x288
   14a98:	ldr	r1, [r7, #652]	; 0x28c
   14a9c:	adds	r0, r0, #1
   14aa0:	adc	r1, r1, #0
   14aa4:	str	r0, [r7, #648]	; 0x288
   14aa8:	str	r1, [r7, #652]	; 0x28c
   14aac:	b	146a4 <next@@Base+0x12f4>
   14ab0:	movw	r0, #53480	; 0xd0e8
   14ab4:	mov	r1, #32
   14ab8:	mov	r2, #1
   14abc:	movt	r0, #2
   14ac0:	ldr	r3, [r0]
   14ac4:	movw	r0, #46480	; 0xb590
   14ac8:	movt	r0, #1
   14acc:	bl	11f28 <fwrite@plt>
   14ad0:	mov	r0, #1
   14ad4:	bl	11f88 <exit@plt>
   14ad8:	add	r0, sl, #56	; 0x38
   14adc:	bl	14b30 <next@@Base+0x1780>
   14ae0:	mov	r0, #1
   14ae4:	bl	11f88 <exit@plt>
   14ae8:	ldr	r0, [r7, #664]	; 0x298
   14aec:	ldr	r1, [r7, #668]	; 0x29c
   14af0:	adds	r0, r0, #1
   14af4:	adc	r1, r1, #0
   14af8:	str	r0, [r7, #664]	; 0x298
   14afc:	str	r1, [r7, #668]	; 0x29c
   14b00:	movw	r0, #53480	; 0xd0e8
   14b04:	movw	r1, #46513	; 0xb5b1
   14b08:	movt	r0, #2
   14b0c:	movt	r1, #1
   14b10:	ldr	r0, [r0]
   14b14:	bl	11fb8 <fprintf@plt>
   14b18:	mov	r0, #1
   14b1c:	bl	11f88 <exit@plt>
   14b20:	andeq	r0, r0, r1
   14b24:	andeq	r0, r0, r0
   14b28:	andeq	r0, r0, r1
   14b2c:	andeq	r0, r0, r0
   14b30:	movw	r1, #53452	; 0xd0cc
   14b34:	movt	r1, #2
   14b38:	ldr	r1, [r1]
   14b3c:	cmn	r1, #1
   14b40:	ldrne	r0, [r0, r1, lsl #2]
   14b44:	cmpne	r0, #0
   14b48:	bne	14b50 <next@@Base+0x17a0>
   14b4c:	bx	lr
   14b50:	ldrd	r2, [r0]
   14b54:	adds	r2, r2, #1
   14b58:	adc	r3, r3, #0
   14b5c:	strd	r2, [r0]
   14b60:	bx	lr
   14b64:	push	{r4, r5, r6, lr}
   14b68:	sub	sp, sp, #8
   14b6c:	movw	r4, #3328	; 0xd00
   14b70:	movw	r0, #46720	; 0xb680
   14b74:	movw	r1, #44967	; 0xafa7
   14b78:	movt	r4, #1285	; 0x505
   14b7c:	movt	r0, #1
   14b80:	movt	r1, #1
   14b84:	mov	r2, r4
   14b88:	bl	17f68 <__generate_code_for_binary_boolean_expression@@Base+0x518>
   14b8c:	movw	r1, #46553	; 0xb5d9
   14b90:	movw	r2, #55951	; 0xda8f
   14b94:	mov	r0, #0
   14b98:	mov	r3, #0
   14b9c:	str	r4, [sp]
   14ba0:	movt	r1, #1
   14ba4:	movt	r2, #28995	; 0x7143
   14ba8:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   14bac:	movw	r5, #55184	; 0xd790
   14bb0:	mov	r0, #2
   14bb4:	movt	r5, #2
   14bb8:	mov	r1, r5
   14bbc:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   14bc0:	movw	r1, #46564	; 0xb5e4
   14bc4:	movw	r2, #9871	; 0x268f
   14bc8:	mov	r0, #1
   14bcc:	mov	r3, #0
   14bd0:	str	r4, [sp]
   14bd4:	movt	r1, #1
   14bd8:	movt	r2, #57371	; 0xe01b
   14bdc:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   14be0:	movw	r6, #55280	; 0xd7f0
   14be4:	mov	r0, #5
   14be8:	movt	r6, #2
   14bec:	add	r1, r6, #32
   14bf0:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   14bf4:	movw	r1, #46578	; 0xb5f2
   14bf8:	movw	r2, #42880	; 0xa780
   14bfc:	mov	r0, #2
   14c00:	mov	r3, #0
   14c04:	str	r4, [sp]
   14c08:	movt	r1, #1
   14c0c:	movt	r2, #60429	; 0xec0d
   14c10:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   14c14:	add	r1, r5, #16
   14c18:	mov	r0, #2
   14c1c:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   14c20:	movw	r1, #46594	; 0xb602
   14c24:	movw	r2, #43590	; 0xaa46
   14c28:	mov	r0, #3
   14c2c:	mov	r3, #0
   14c30:	str	r4, [sp]
   14c34:	movt	r1, #1
   14c38:	movt	r2, #6450	; 0x1932
   14c3c:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   14c40:	add	r1, r5, #32
   14c44:	mov	r0, #2
   14c48:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   14c4c:	movw	r1, #46604	; 0xb60c
   14c50:	movw	r2, #48479	; 0xbd5f
   14c54:	mov	r0, #4
   14c58:	mov	r3, #0
   14c5c:	str	r4, [sp]
   14c60:	movt	r1, #1
   14c64:	movt	r2, #1881	; 0x759
   14c68:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   14c6c:	add	r1, r5, #48	; 0x30
   14c70:	mov	r0, #2
   14c74:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   14c78:	movw	r1, #46613	; 0xb615
   14c7c:	movw	r2, #6554	; 0x199a
   14c80:	mov	r0, #5
   14c84:	mov	r3, #0
   14c88:	str	r4, [sp]
   14c8c:	movt	r1, #1
   14c90:	movt	r2, #65198	; 0xfeae
   14c94:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   14c98:	mov	r0, #4
   14c9c:	mov	r1, r6
   14ca0:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   14ca4:	movw	r1, #46800	; 0xb6d0
   14ca8:	movw	r2, #8437	; 0x20f5
   14cac:	mov	r0, #6
   14cb0:	mov	r3, #0
   14cb4:	str	r4, [sp]
   14cb8:	movt	r1, #1
   14cbc:	movt	r2, #57385	; 0xe029
   14cc0:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   14cc4:	add	r1, r5, #64	; 0x40
   14cc8:	mov	r0, #2
   14ccc:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   14cd0:	movw	r1, #46629	; 0xb625
   14cd4:	movw	r2, #2560	; 0xa00
   14cd8:	mov	r0, #7
   14cdc:	mov	r3, #0
   14ce0:	str	r4, [sp]
   14ce4:	movt	r1, #1
   14ce8:	movt	r2, #32497	; 0x7ef1
   14cec:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   14cf0:	movw	r1, #54176	; 0xd3a0
   14cf4:	mov	r0, #126	; 0x7e
   14cf8:	movt	r1, #2
   14cfc:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   14d00:	movw	r1, #46634	; 0xb62a
   14d04:	movw	r2, #18632	; 0x48c8
   14d08:	mov	r0, #8
   14d0c:	mov	r3, #0
   14d10:	str	r4, [sp]
   14d14:	movt	r1, #1
   14d18:	movt	r2, #23953	; 0x5d91
   14d1c:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   14d20:	add	r1, r5, #80	; 0x50
   14d24:	mov	r0, #2
   14d28:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   14d2c:	bl	196fc <__generate_code_for_binary_boolean_expression@@Base+0x1cac>
   14d30:	add	sp, sp, #8
   14d34:	pop	{r4, r5, r6, lr}
   14d38:	b	1a468 <__generate_code_for_binary_boolean_expression@@Base+0x2a18>
   14d3c:	push	{r4, lr}
   14d40:	vpush	{d8-d9}
   14d44:	bl	14b64 <next@@Base+0x17b4>
   14d48:	movw	r0, #55280	; 0xd7f0
   14d4c:	vmov.i32	q4, #0	; 0x00000000
   14d50:	movw	r4, #55184	; 0xd790
   14d54:	mov	r2, #1008	; 0x3f0
   14d58:	movt	r0, #2
   14d5c:	movt	r4, #2
   14d60:	add	r1, r0, #48	; 0x30
   14d64:	vst1.64	{d8-d9}, [r1 :128]
   14d68:	add	r1, r0, #32
   14d6c:	vst1.64	{d8-d9}, [r1 :128]
   14d70:	mov	r1, #0
   14d74:	str	r1, [r0, #64]	; 0x40
   14d78:	str	r1, [r0, #68]	; 0x44
   14d7c:	add	r1, r4, #16
   14d80:	vst1.64	{d8-d9}, [r0 :128]!
   14d84:	vst1.64	{d8-d9}, [r1 :128]
   14d88:	add	r1, r4, #32
   14d8c:	vst1.64	{d8-d9}, [r0 :128]
   14d90:	mov	r0, #80	; 0x50
   14d94:	vst1.64	{d8-d9}, [r1 :128]
   14d98:	add	r1, r4, #48	; 0x30
   14d9c:	vst1.64	{d8-d9}, [r1 :128]
   14da0:	add	r1, r4, #64	; 0x40
   14da4:	vst1.64	{d8-d9}, [r1 :128]
   14da8:	vst1.64	{d8-d9}, [r4 :128], r0
   14dac:	movw	r0, #54176	; 0xd3a0
   14db0:	mov	r1, #0
   14db4:	movt	r0, #2
   14db8:	bl	11fe8 <memset@plt>
   14dbc:	vst1.64	{d8-d9}, [r4 :128]
   14dc0:	vpop	{d8-d9}
   14dc4:	pop	{r4, pc}
   14dc8:	movw	r0, #19300	; 0x4b64
   14dcc:	movw	r1, #19772	; 0x4d3c
   14dd0:	movt	r0, #1
   14dd4:	movt	r1, #1
   14dd8:	b	1a918 <__gcov_flush@@Base+0xb4>
   14ddc:	andeq	r0, r0, r0

00014de0 <init_ast_base@@Base>:
   14de0:	movw	ip, #55728	; 0xd9b0
   14de4:	add	r3, pc, #36	; 0x24
   14de8:	movt	ip, #2
   14dec:	vld1.64	{d16-d17}, [r3 :128]
   14df0:	vld1.64	{d18-d19}, [ip :128]
   14df4:	vadd.i64	q8, q9, q8
   14df8:	vst1.64	{d16-d17}, [ip :128]
   14dfc:	stm	r0, {r1, r2}
   14e00:	bx	lr
   14e04:	nop	{0}
   14e08:	nop	{0}
   14e0c:	nop	{0}
   14e10:	andeq	r0, r0, r1
   14e14:	andeq	r0, r0, r0
   14e18:	andeq	r0, r0, r1
   14e1c:	andeq	r0, r0, r0

00014e20 <init_ast_base_single@@Base>:
   14e20:	movw	r2, #55728	; 0xd9b0
   14e24:	add	r3, pc, #52	; 0x34
   14e28:	movt	r2, #2
   14e2c:	vld1.64	{d16-d17}, [r3 :128]
   14e30:	vld1.64	{d18-d19}, [r2 :128]
   14e34:	vadd.i64	q9, q9, q8
   14e38:	vst1.64	{d18-d19}, [r2 :128]!
   14e3c:	vld1.64	{d18-d19}, [r2 :128]
   14e40:	vadd.i64	q8, q9, q8
   14e44:	vst1.64	{d16-d17}, [r2 :128]
   14e48:	mov	r2, #0
   14e4c:	stm	r0, {r1, r2}
   14e50:	bx	lr
   14e54:	nop	{0}
   14e58:	nop	{0}
   14e5c:	nop	{0}
   14e60:	andeq	r0, r0, r1
   14e64:	andeq	r0, r0, r0
   14e68:	andeq	r0, r0, r1
   14e6c:	andeq	r0, r0, r0

00014e70 <init_node_id@@Base>:
   14e70:	push	{fp, lr}
   14e74:	mov	fp, sp
   14e78:	movw	r3, #55728	; 0xd9b0
   14e7c:	mov	ip, #32
   14e80:	movt	r3, #2
   14e84:	mov	lr, r3
   14e88:	vld1.64	{d16-d17}, [lr :128], ip
   14e8c:	add	r2, pc, #60	; 0x3c
   14e90:	vld1.64	{d18-d19}, [r2 :128]
   14e94:	mov	r2, #0
   14e98:	vld1.64	{d20-d21}, [lr :128]
   14e9c:	vadd.i64	q8, q8, q9
   14ea0:	vadd.i64	q10, q10, q9
   14ea4:	vst1.64	{d20-d21}, [lr :128]
   14ea8:	vst1.64	{d16-d17}, [r3 :128]!
   14eac:	vld1.64	{d16-d17}, [r3 :128]
   14eb0:	vadd.i64	q8, q8, q9
   14eb4:	vst1.64	{d16-d17}, [r3 :128]
   14eb8:	str	r2, [r0]
   14ebc:	str	r2, [r0, #4]
   14ec0:	str	r1, [r0, #8]
   14ec4:	pop	{fp, pc}
   14ec8:	nop	{0}
   14ecc:	nop	{0}
   14ed0:	andeq	r0, r0, r1
   14ed4:	andeq	r0, r0, r0
   14ed8:	andeq	r0, r0, r1
   14edc:	andeq	r0, r0, r0

00014ee0 <init_node_int@@Base>:
   14ee0:	push	{fp, lr}
   14ee4:	mov	fp, sp
   14ee8:	movw	r3, #55728	; 0xd9b0
   14eec:	mov	ip, #48	; 0x30
   14ef0:	movt	r3, #2
   14ef4:	mov	lr, r3
   14ef8:	vld1.64	{d16-d17}, [lr :128], ip
   14efc:	add	r2, pc, #60	; 0x3c
   14f00:	vld1.64	{d18-d19}, [r2 :128]
   14f04:	mov	r2, #0
   14f08:	vld1.64	{d20-d21}, [lr :128]
   14f0c:	vadd.i64	q8, q8, q9
   14f10:	vadd.i64	q10, q10, q9
   14f14:	vst1.64	{d20-d21}, [lr :128]
   14f18:	vst1.64	{d16-d17}, [r3 :128]!
   14f1c:	vld1.64	{d16-d17}, [r3 :128]
   14f20:	vadd.i64	q8, q8, q9
   14f24:	vst1.64	{d16-d17}, [r3 :128]
   14f28:	mov	r3, #1
   14f2c:	str	r3, [r0]
   14f30:	str	r2, [r0, #4]
   14f34:	str	r1, [r0, #8]
   14f38:	pop	{fp, pc}
   14f3c:	nop	{0}
   14f40:	andeq	r0, r0, r1
   14f44:	andeq	r0, r0, r0
   14f48:	andeq	r0, r0, r1
   14f4c:	andeq	r0, r0, r0

00014f50 <init_node_function@@Base>:
   14f50:	push	{r4, sl, fp, lr}
   14f54:	add	fp, sp, #8
   14f58:	movw	r4, #55728	; 0xd9b0
   14f5c:	mov	ip, #64	; 0x40
   14f60:	movt	r4, #2
   14f64:	mov	lr, r4
   14f68:	vld1.64	{d16-d17}, [lr :128], ip
   14f6c:	add	r3, pc, #60	; 0x3c
   14f70:	vld1.64	{d18-d19}, [r3 :128]
   14f74:	mov	r3, #0
   14f78:	vld1.64	{d20-d21}, [lr :128]
   14f7c:	vadd.i64	q8, q8, q9
   14f80:	vadd.i64	q10, q10, q9
   14f84:	vst1.64	{d20-d21}, [lr :128]
   14f88:	vst1.64	{d16-d17}, [r4 :128]!
   14f8c:	vld1.64	{d16-d17}, [r4 :128]
   14f90:	vadd.i64	q8, q8, q9
   14f94:	vst1.64	{d16-d17}, [r4 :128]
   14f98:	mov	r4, #2
   14f9c:	str	r4, [r0]
   14fa0:	str	r3, [r0, #4]
   14fa4:	str	r1, [r0, #8]
   14fa8:	str	r2, [r0, #12]
   14fac:	pop	{r4, sl, fp, pc}
   14fb0:	andeq	r0, r0, r1
   14fb4:	andeq	r0, r0, r0
   14fb8:	andeq	r0, r0, r1
   14fbc:	andeq	r0, r0, r0

00014fc0 <init_node_return@@Base>:
   14fc0:	push	{fp, lr}
   14fc4:	mov	fp, sp
   14fc8:	movw	r3, #55728	; 0xd9b0
   14fcc:	mov	ip, #80	; 0x50
   14fd0:	movt	r3, #2
   14fd4:	mov	lr, r3
   14fd8:	vld1.64	{d16-d17}, [lr :128], ip
   14fdc:	add	r2, pc, #60	; 0x3c
   14fe0:	vld1.64	{d18-d19}, [r2 :128]
   14fe4:	mov	r2, #0
   14fe8:	vld1.64	{d20-d21}, [lr :128]
   14fec:	vadd.i64	q8, q8, q9
   14ff0:	vadd.i64	q10, q10, q9
   14ff4:	vst1.64	{d20-d21}, [lr :128]
   14ff8:	vst1.64	{d16-d17}, [r3 :128]!
   14ffc:	vld1.64	{d16-d17}, [r3 :128]
   15000:	vadd.i64	q8, q8, q9
   15004:	vst1.64	{d16-d17}, [r3 :128]
   15008:	mov	r3, #3
   1500c:	str	r3, [r0]
   15010:	str	r2, [r0, #4]
   15014:	str	r1, [r0, #8]
   15018:	pop	{fp, pc}
   1501c:	nop	{0}
   15020:	andeq	r0, r0, r1
   15024:	andeq	r0, r0, r0
   15028:	andeq	r0, r0, r1
   1502c:	andeq	r0, r0, r0

00015030 <init_node_if@@Base>:
   15030:	push	{r4, r5, fp, lr}
   15034:	add	fp, sp, #8
   15038:	movw	lr, #55728	; 0xd9b0
   1503c:	mov	ip, #96	; 0x60
   15040:	movt	lr, #2
   15044:	mov	r5, lr
   15048:	vld1.64	{d16-d17}, [r5 :128], ip
   1504c:	add	r4, pc, #60	; 0x3c
   15050:	vld1.64	{d18-d19}, [r4 :128]
   15054:	mov	r4, #4
   15058:	vld1.64	{d20-d21}, [r5 :128]
   1505c:	vadd.i64	q8, q8, q9
   15060:	vadd.i64	q10, q10, q9
   15064:	vst1.64	{d20-d21}, [r5 :128]
   15068:	vst1.64	{d16-d17}, [lr :128]!
   1506c:	mov	r5, #0
   15070:	vld1.64	{d16-d17}, [lr :128]
   15074:	vadd.i64	q8, q8, q9
   15078:	vst1.64	{d16-d17}, [lr :128]
   1507c:	stmia	r0!, {r4, r5}
   15080:	stm	r0, {r1, r2, r3}
   15084:	pop	{r4, r5, fp, pc}
   15088:	nop	{0}
   1508c:	nop	{0}
   15090:	andeq	r0, r0, r1
   15094:	andeq	r0, r0, r0
   15098:	andeq	r0, r0, r1
   1509c:	andeq	r0, r0, r0

000150a0 <init_node_boolean_operator@@Base>:
   150a0:	push	{r4, sl, fp, lr}
   150a4:	add	fp, sp, #8
   150a8:	movw	ip, #55728	; 0xd9b0
   150ac:	movw	lr, #55840	; 0xda20
   150b0:	add	r4, pc, #72	; 0x48
   150b4:	movt	ip, #2
   150b8:	movt	lr, #2
   150bc:	vld1.64	{d16-d17}, [r4 :128]
   150c0:	mov	r4, #5
   150c4:	vld1.64	{d20-d21}, [ip :128]
   150c8:	vld1.64	{d18-d19}, [lr :128]
   150cc:	vadd.i64	q10, q10, q8
   150d0:	vadd.i64	q9, q9, q8
   150d4:	vst1.64	{d20-d21}, [ip :128]!
   150d8:	vst1.64	{d18-d19}, [lr :128]
   150dc:	vld1.64	{d18-d19}, [ip :128]
   150e0:	vadd.i64	q8, q9, q8
   150e4:	vst1.64	{d16-d17}, [ip :128]
   150e8:	mov	ip, #0
   150ec:	stm	r0, {r4, ip}
   150f0:	str	r2, [r0, #8]
   150f4:	str	r3, [r0, #12]
   150f8:	str	r1, [r0, #16]
   150fc:	pop	{r4, sl, fp, pc}
   15100:	andeq	r0, r0, r1
   15104:	andeq	r0, r0, r0
   15108:	andeq	r0, r0, r1
   1510c:	andeq	r0, r0, r0

00015110 <free_node@@Base>:
   15110:	push	{r4, r5, r6, sl, fp, lr}
   15114:	add	fp, sp, #16
   15118:	movw	r5, #55360	; 0xd840
   1511c:	mov	r4, r0
   15120:	movt	r5, #2
   15124:	ldrd	r0, [r5]
   15128:	adds	r0, r0, #1
   1512c:	adc	r1, r1, #0
   15130:	strd	r0, [r5]
   15134:	ldr	r0, [r4]
   15138:	cmp	r0, #5
   1513c:	bhi	1555c <free_node@@Base+0x44c>
   15140:	add	r1, pc, #0
   15144:	ldr	pc, [r1, r0, lsl #2]
   15148:	andeq	r5, r1, r0, ror #2
   1514c:	andeq	r5, r1, r4, asr r3
   15150:			; <UNDEFINED> instruction: 0x000152b0
   15154:	strdeq	r5, [r1], -r4
   15158:	andeq	r5, r1, r0, lsl #4
   1515c:	muleq	r1, r4, r4
   15160:	movw	r0, #47040	; 0xb7c0
   15164:	movt	r0, #1
   15168:	add	r1, r0, #4
   1516c:	mov	r0, #0
   15170:	bl	15c84 <get_boolean_op_value@@Base+0x370>
   15174:	movw	r6, #55840	; 0xda20
   15178:	ldrd	r0, [r5, #64]	; 0x40
   1517c:	movt	r6, #2
   15180:	mov	r2, r6
   15184:	ldr	r3, [r2, #16]!
   15188:	adds	r0, r0, #1
   1518c:	adc	r1, r1, #0
   15190:	strd	r0, [r5, #64]	; 0x40
   15194:	mov	r1, #16
   15198:	ldr	r0, [r2, #4]
   1519c:	adds	r3, r3, #1
   151a0:	str	r3, [r2]
   151a4:	adc	r0, r0, #0
   151a8:	str	r0, [r2, #4]
   151ac:	ldr	r0, [r4, #4]
   151b0:	cmp	r0, #0
   151b4:	movwne	r1, #8
   151b8:	ldr	r1, [r2, r1]!
   151bc:	adds	r1, r1, #1
   151c0:	str	r1, [r2]
   151c4:	ldr	r1, [r2, #4]
   151c8:	adc	r1, r1, #0
   151cc:	cmp	r0, #0
   151d0:	str	r1, [r2, #4]
   151d4:	beq	151ec <free_node@@Base+0xdc>
   151d8:	ldrd	r2, [r6, #40]	; 0x28
   151dc:	adds	r2, r2, #1
   151e0:	adc	r3, r3, #0
   151e4:	strd	r2, [r6, #40]	; 0x28
   151e8:	bl	15110 <free_node@@Base>
   151ec:	ldrd	r0, [r6, #48]	; 0x30
   151f0:	adds	r0, r0, #1
   151f4:	adc	r1, r1, #0
   151f8:	strd	r0, [r6, #48]	; 0x30
   151fc:	b	15540 <free_node@@Base+0x430>
   15200:	movw	r0, #47040	; 0xb7c0
   15204:	movt	r0, #1
   15208:	add	r1, r0, #20
   1520c:	mov	r0, #0
   15210:	bl	15c84 <get_boolean_op_value@@Base+0x370>
   15214:	movw	r6, #56048	; 0xdaf0
   15218:	ldrd	r0, [r5, #96]	; 0x60
   1521c:	movt	r6, #2
   15220:	ldrd	r2, [r6]
   15224:	adds	r0, r0, #1
   15228:	str	r0, [r5, #96]	; 0x60
   1522c:	adc	r0, r1, #0
   15230:	mov	r1, #16
   15234:	adds	r2, r2, #1
   15238:	str	r0, [r5, #100]	; 0x64
   1523c:	adc	r3, r3, #0
   15240:	strd	r2, [r6]
   15244:	mov	r2, r6
   15248:	ldr	r0, [r4, #4]
   1524c:	cmp	r0, #0
   15250:	movwne	r1, #8
   15254:	ldr	r1, [r2, r1]!
   15258:	adds	r1, r1, #1
   1525c:	str	r1, [r2]
   15260:	ldr	r1, [r2, #4]
   15264:	adc	r1, r1, #0
   15268:	cmp	r0, #0
   1526c:	str	r1, [r2, #4]
   15270:	beq	15288 <free_node@@Base+0x178>
   15274:	ldrd	r2, [r6, #24]
   15278:	adds	r2, r2, #1
   1527c:	adc	r3, r3, #0
   15280:	strd	r2, [r6, #24]
   15284:	bl	15110 <free_node@@Base>
   15288:	ldrd	r0, [r6, #32]
   1528c:	adds	r0, r0, #1
   15290:	adc	r1, r1, #0
   15294:	strd	r0, [r6, #32]
   15298:	ldr	r0, [r4, #8]
   1529c:	bl	15110 <free_node@@Base>
   152a0:	ldr	r0, [r4, #12]
   152a4:	bl	15110 <free_node@@Base>
   152a8:	ldr	r0, [r4, #16]
   152ac:	b	1553c <free_node@@Base+0x42c>
   152b0:	movw	r0, #47040	; 0xb7c0
   152b4:	movt	r0, #1
   152b8:	add	r1, r0, #12
   152bc:	mov	r0, #0
   152c0:	bl	15c84 <get_boolean_op_value@@Base+0x370>
   152c4:	movw	r6, #55952	; 0xda90
   152c8:	ldrd	r0, [r5, #80]	; 0x50
   152cc:	movt	r6, #2
   152d0:	ldrd	r2, [r6]
   152d4:	adds	r0, r0, #1
   152d8:	str	r0, [r5, #80]	; 0x50
   152dc:	adc	r0, r1, #0
   152e0:	mov	r1, #16
   152e4:	adds	r2, r2, #1
   152e8:	str	r0, [r5, #84]	; 0x54
   152ec:	adc	r3, r3, #0
   152f0:	strd	r2, [r6]
   152f4:	mov	r2, r6
   152f8:	ldr	r0, [r4, #4]
   152fc:	cmp	r0, #0
   15300:	movwne	r1, #8
   15304:	ldr	r1, [r2, r1]!
   15308:	adds	r1, r1, #1
   1530c:	str	r1, [r2]
   15310:	ldr	r1, [r2, #4]
   15314:	adc	r1, r1, #0
   15318:	cmp	r0, #0
   1531c:	str	r1, [r2, #4]
   15320:	beq	15338 <free_node@@Base+0x228>
   15324:	ldrd	r2, [r6, #24]
   15328:	adds	r2, r2, #1
   1532c:	adc	r3, r3, #0
   15330:	strd	r2, [r6, #24]
   15334:	bl	15110 <free_node@@Base>
   15338:	ldrd	r0, [r6, #32]
   1533c:	adds	r0, r0, #1
   15340:	adc	r1, r1, #0
   15344:	strd	r0, [r6, #32]
   15348:	ldr	r0, [r4, #8]
   1534c:	bl	11ed4 <free@plt>
   15350:	b	15540 <free_node@@Base+0x430>
   15354:	movw	r0, #47040	; 0xb7c0
   15358:	movt	r0, #1
   1535c:	add	r1, r0, #8
   15360:	mov	r0, #0
   15364:	bl	15c84 <get_boolean_op_value@@Base+0x370>
   15368:	movw	r6, #55840	; 0xda20
   1536c:	ldrd	r0, [r5, #72]	; 0x48
   15370:	movt	r6, #2
   15374:	mov	r2, r6
   15378:	ldr	r3, [r2, #64]!	; 0x40
   1537c:	adds	r0, r0, #1
   15380:	adc	r1, r1, #0
   15384:	strd	r0, [r5, #72]	; 0x48
   15388:	mov	r1, #16
   1538c:	ldr	r0, [r2, #4]
   15390:	adds	r3, r3, #1
   15394:	str	r3, [r2]
   15398:	adc	r0, r0, #0
   1539c:	str	r0, [r2, #4]
   153a0:	ldr	r0, [r4, #4]
   153a4:	cmp	r0, #0
   153a8:	movwne	r1, #8
   153ac:	ldr	r1, [r2, r1]!
   153b0:	adds	r1, r1, #1
   153b4:	str	r1, [r2]
   153b8:	ldr	r1, [r2, #4]
   153bc:	adc	r1, r1, #0
   153c0:	cmp	r0, #0
   153c4:	str	r1, [r2, #4]
   153c8:	beq	153e0 <free_node@@Base+0x2d0>
   153cc:	ldrd	r2, [r6, #88]	; 0x58
   153d0:	adds	r2, r2, #1
   153d4:	adc	r3, r3, #0
   153d8:	strd	r2, [r6, #88]	; 0x58
   153dc:	bl	15110 <free_node@@Base>
   153e0:	ldrd	r0, [r6, #96]	; 0x60
   153e4:	adds	r0, r0, #1
   153e8:	adc	r1, r1, #0
   153ec:	strd	r0, [r6, #96]	; 0x60
   153f0:	b	15540 <free_node@@Base+0x430>
   153f4:	movw	r0, #47040	; 0xb7c0
   153f8:	movt	r0, #1
   153fc:	add	r1, r0, #16
   15400:	mov	r0, #0
   15404:	bl	15c84 <get_boolean_op_value@@Base+0x370>
   15408:	movw	r6, #55952	; 0xda90
   1540c:	ldrd	r0, [r5, #88]	; 0x58
   15410:	movt	r6, #2
   15414:	mov	r2, r6
   15418:	ldr	r3, [r2, #48]!	; 0x30
   1541c:	adds	r0, r0, #1
   15420:	adc	r1, r1, #0
   15424:	strd	r0, [r5, #88]	; 0x58
   15428:	mov	r1, #16
   1542c:	ldr	r0, [r2, #4]
   15430:	adds	r3, r3, #1
   15434:	str	r3, [r2]
   15438:	adc	r0, r0, #0
   1543c:	str	r0, [r2, #4]
   15440:	ldr	r0, [r4, #4]
   15444:	cmp	r0, #0
   15448:	movwne	r1, #8
   1544c:	ldr	r1, [r2, r1]!
   15450:	adds	r1, r1, #1
   15454:	str	r1, [r2]
   15458:	ldr	r1, [r2, #4]
   1545c:	adc	r1, r1, #0
   15460:	cmp	r0, #0
   15464:	str	r1, [r2, #4]
   15468:	beq	15480 <free_node@@Base+0x370>
   1546c:	ldrd	r2, [r6, #72]	; 0x48
   15470:	adds	r2, r2, #1
   15474:	adc	r3, r3, #0
   15478:	strd	r2, [r6, #72]	; 0x48
   1547c:	bl	15110 <free_node@@Base>
   15480:	ldrd	r0, [r6, #80]	; 0x50
   15484:	adds	r0, r0, #1
   15488:	adc	r1, r1, #0
   1548c:	strd	r0, [r6, #80]	; 0x50
   15490:	b	15540 <free_node@@Base+0x430>
   15494:	movw	r0, #47040	; 0xb7c0
   15498:	movt	r0, #1
   1549c:	add	r1, r0, #24
   154a0:	mov	r0, #0
   154a4:	bl	15c84 <get_boolean_op_value@@Base+0x370>
   154a8:	movw	r6, #56048	; 0xdaf0
   154ac:	ldrd	r0, [r5, #104]	; 0x68
   154b0:	movt	r6, #2
   154b4:	mov	r2, r6
   154b8:	ldr	r3, [r2, #48]!	; 0x30
   154bc:	adds	r0, r0, #1
   154c0:	adc	r1, r1, #0
   154c4:	strd	r0, [r5, #104]	; 0x68
   154c8:	mov	r1, #16
   154cc:	ldr	r0, [r2, #4]
   154d0:	adds	r3, r3, #1
   154d4:	str	r3, [r2]
   154d8:	adc	r0, r0, #0
   154dc:	str	r0, [r2, #4]
   154e0:	ldr	r0, [r4, #4]
   154e4:	cmp	r0, #0
   154e8:	movwne	r1, #8
   154ec:	ldr	r1, [r2, r1]!
   154f0:	adds	r1, r1, #1
   154f4:	str	r1, [r2]
   154f8:	ldr	r1, [r2, #4]
   154fc:	adc	r1, r1, #0
   15500:	cmp	r0, #0
   15504:	str	r1, [r2, #4]
   15508:	beq	15520 <free_node@@Base+0x410>
   1550c:	ldrd	r2, [r6, #72]	; 0x48
   15510:	adds	r2, r2, #1
   15514:	adc	r3, r3, #0
   15518:	strd	r2, [r6, #72]	; 0x48
   1551c:	bl	15110 <free_node@@Base>
   15520:	ldrd	r0, [r6, #80]	; 0x50
   15524:	adds	r0, r0, #1
   15528:	adc	r1, r1, #0
   1552c:	strd	r0, [r6, #80]	; 0x50
   15530:	ldr	r0, [r4, #8]
   15534:	bl	15110 <free_node@@Base>
   15538:	ldr	r0, [r4, #12]
   1553c:	bl	15110 <free_node@@Base>
   15540:	mov	r0, r4
   15544:	bl	11ed4 <free@plt>
   15548:	ldrd	r0, [r5, #112]	; 0x70
   1554c:	adds	r0, r0, #1
   15550:	adc	r1, r1, #0
   15554:	strd	r0, [r5, #112]	; 0x70
   15558:	pop	{r4, r5, r6, sl, fp, pc}
   1555c:	movw	r1, #47040	; 0xb7c0
   15560:	mov	r0, #0
   15564:	movt	r1, #1
   15568:	bl	15c84 <get_boolean_op_value@@Base+0x370>
   1556c:	movw	r0, #53480	; 0xd0e8
   15570:	mov	r1, #31
   15574:	mov	r2, #1
   15578:	movt	r0, #2
   1557c:	ldr	r3, [r0]
   15580:	movw	r0, #46819	; 0xb6e3
   15584:	movt	r0, #1
   15588:	bl	11f28 <fwrite@plt>
   1558c:	mov	r0, #1
   15590:	bl	11f88 <exit@plt>

00015594 <free_node_id@@Base>:
   15594:	push	{r4, r5, fp, lr}
   15598:	add	fp, sp, #8
   1559c:	movw	r5, #55840	; 0xda20
   155a0:	mov	r4, r0
   155a4:	mov	r2, #16
   155a8:	movt	r5, #2
   155ac:	mov	r1, r5
   155b0:	ldr	r0, [r1, #16]!
   155b4:	adds	r0, r0, #1
   155b8:	str	r0, [r1]
   155bc:	ldr	r0, [r1, #4]
   155c0:	adc	r0, r0, #0
   155c4:	str	r0, [r1, #4]
   155c8:	ldr	r0, [r4, #4]
   155cc:	cmp	r0, #0
   155d0:	movwne	r2, #8
   155d4:	ldr	r2, [r1, r2]!
   155d8:	adds	r2, r2, #1
   155dc:	str	r2, [r1]
   155e0:	ldr	r2, [r1, #4]
   155e4:	adc	r2, r2, #0
   155e8:	cmp	r0, #0
   155ec:	str	r2, [r1, #4]
   155f0:	beq	15608 <free_node_id@@Base+0x74>
   155f4:	ldrd	r2, [r5, #40]	; 0x28
   155f8:	adds	r2, r2, #1
   155fc:	adc	r3, r3, #0
   15600:	strd	r2, [r5, #40]	; 0x28
   15604:	bl	15110 <free_node@@Base>
   15608:	ldrd	r0, [r5, #48]	; 0x30
   1560c:	adds	r0, r0, #1
   15610:	adc	r1, r1, #0
   15614:	strd	r0, [r5, #48]	; 0x30
   15618:	mov	r0, r4
   1561c:	pop	{r4, r5, fp, lr}
   15620:	b	11ed4 <free@plt>

00015624 <free_node_int@@Base>:
   15624:	push	{r4, r5, fp, lr}
   15628:	add	fp, sp, #8
   1562c:	movw	r5, #55840	; 0xda20
   15630:	mov	r4, r0
   15634:	mov	r2, #16
   15638:	movt	r5, #2
   1563c:	mov	r1, r5
   15640:	ldr	r0, [r1, #64]!	; 0x40
   15644:	adds	r0, r0, #1
   15648:	str	r0, [r1]
   1564c:	ldr	r0, [r1, #4]
   15650:	adc	r0, r0, #0
   15654:	str	r0, [r1, #4]
   15658:	ldr	r0, [r4, #4]
   1565c:	cmp	r0, #0
   15660:	movwne	r2, #8
   15664:	ldr	r2, [r1, r2]!
   15668:	adds	r2, r2, #1
   1566c:	str	r2, [r1]
   15670:	ldr	r2, [r1, #4]
   15674:	adc	r2, r2, #0
   15678:	cmp	r0, #0
   1567c:	str	r2, [r1, #4]
   15680:	beq	15698 <free_node_int@@Base+0x74>
   15684:	ldrd	r2, [r5, #88]	; 0x58
   15688:	adds	r2, r2, #1
   1568c:	adc	r3, r3, #0
   15690:	strd	r2, [r5, #88]	; 0x58
   15694:	bl	15110 <free_node@@Base>
   15698:	ldrd	r0, [r5, #96]	; 0x60
   1569c:	adds	r0, r0, #1
   156a0:	adc	r1, r1, #0
   156a4:	strd	r0, [r5, #96]	; 0x60
   156a8:	mov	r0, r4
   156ac:	pop	{r4, r5, fp, lr}
   156b0:	b	11ed4 <free@plt>

000156b4 <free_node_function@@Base>:
   156b4:	push	{r4, r5, fp, lr}
   156b8:	add	fp, sp, #8
   156bc:	movw	r5, #55952	; 0xda90
   156c0:	mov	r4, r0
   156c4:	movt	r5, #2
   156c8:	ldrd	r0, [r5]
   156cc:	mov	r2, r5
   156d0:	adds	r0, r0, #1
   156d4:	adc	r1, r1, #0
   156d8:	strd	r0, [r5]
   156dc:	mov	r1, #16
   156e0:	ldr	r0, [r4, #4]
   156e4:	cmp	r0, #0
   156e8:	movwne	r1, #8
   156ec:	ldr	r1, [r2, r1]!
   156f0:	adds	r1, r1, #1
   156f4:	str	r1, [r2]
   156f8:	ldr	r1, [r2, #4]
   156fc:	adc	r1, r1, #0
   15700:	cmp	r0, #0
   15704:	str	r1, [r2, #4]
   15708:	beq	15720 <free_node_function@@Base+0x6c>
   1570c:	ldrd	r2, [r5, #24]
   15710:	adds	r2, r2, #1
   15714:	adc	r3, r3, #0
   15718:	strd	r2, [r5, #24]
   1571c:	bl	15110 <free_node@@Base>
   15720:	ldrd	r0, [r5, #32]
   15724:	adds	r0, r0, #1
   15728:	adc	r1, r1, #0
   1572c:	strd	r0, [r5, #32]
   15730:	ldr	r0, [r4, #8]
   15734:	bl	11ed4 <free@plt>
   15738:	mov	r0, r4
   1573c:	pop	{r4, r5, fp, lr}
   15740:	b	11ed4 <free@plt>

00015744 <free_node_return@@Base>:
   15744:	push	{r4, r5, fp, lr}
   15748:	add	fp, sp, #8
   1574c:	movw	r5, #55952	; 0xda90
   15750:	mov	r4, r0
   15754:	mov	r2, #16
   15758:	movt	r5, #2
   1575c:	mov	r1, r5
   15760:	ldr	r0, [r1, #48]!	; 0x30
   15764:	adds	r0, r0, #1
   15768:	str	r0, [r1]
   1576c:	ldr	r0, [r1, #4]
   15770:	adc	r0, r0, #0
   15774:	str	r0, [r1, #4]
   15778:	ldr	r0, [r4, #4]
   1577c:	cmp	r0, #0
   15780:	movwne	r2, #8
   15784:	ldr	r2, [r1, r2]!
   15788:	adds	r2, r2, #1
   1578c:	str	r2, [r1]
   15790:	ldr	r2, [r1, #4]
   15794:	adc	r2, r2, #0
   15798:	cmp	r0, #0
   1579c:	str	r2, [r1, #4]
   157a0:	beq	157b8 <free_node_return@@Base+0x74>
   157a4:	ldrd	r2, [r5, #72]	; 0x48
   157a8:	adds	r2, r2, #1
   157ac:	adc	r3, r3, #0
   157b0:	strd	r2, [r5, #72]	; 0x48
   157b4:	bl	15110 <free_node@@Base>
   157b8:	ldrd	r0, [r5, #80]	; 0x50
   157bc:	adds	r0, r0, #1
   157c0:	adc	r1, r1, #0
   157c4:	strd	r0, [r5, #80]	; 0x50
   157c8:	mov	r0, r4
   157cc:	pop	{r4, r5, fp, lr}
   157d0:	b	11ed4 <free@plt>

000157d4 <free_node_if@@Base>:
   157d4:	push	{r4, r5, fp, lr}
   157d8:	add	fp, sp, #8
   157dc:	movw	r5, #56048	; 0xdaf0
   157e0:	mov	r4, r0
   157e4:	movt	r5, #2
   157e8:	ldrd	r0, [r5]
   157ec:	mov	r2, r5
   157f0:	adds	r0, r0, #1
   157f4:	adc	r1, r1, #0
   157f8:	strd	r0, [r5]
   157fc:	mov	r1, #16
   15800:	ldr	r0, [r4, #4]
   15804:	cmp	r0, #0
   15808:	movwne	r1, #8
   1580c:	ldr	r1, [r2, r1]!
   15810:	adds	r1, r1, #1
   15814:	str	r1, [r2]
   15818:	ldr	r1, [r2, #4]
   1581c:	adc	r1, r1, #0
   15820:	cmp	r0, #0
   15824:	str	r1, [r2, #4]
   15828:	beq	15840 <free_node_if@@Base+0x6c>
   1582c:	ldrd	r2, [r5, #24]
   15830:	adds	r2, r2, #1
   15834:	adc	r3, r3, #0
   15838:	strd	r2, [r5, #24]
   1583c:	bl	15110 <free_node@@Base>
   15840:	ldrd	r0, [r5, #32]
   15844:	adds	r0, r0, #1
   15848:	adc	r1, r1, #0
   1584c:	strd	r0, [r5, #32]
   15850:	ldr	r0, [r4, #8]
   15854:	bl	15110 <free_node@@Base>
   15858:	ldr	r0, [r4, #12]
   1585c:	bl	15110 <free_node@@Base>
   15860:	ldr	r0, [r4, #16]
   15864:	bl	15110 <free_node@@Base>
   15868:	mov	r0, r4
   1586c:	pop	{r4, r5, fp, lr}
   15870:	b	11ed4 <free@plt>

00015874 <free_node_boolean_operator@@Base>:
   15874:	push	{r4, r5, fp, lr}
   15878:	add	fp, sp, #8
   1587c:	movw	r5, #56048	; 0xdaf0
   15880:	mov	r4, r0
   15884:	mov	r2, #16
   15888:	movt	r5, #2
   1588c:	mov	r1, r5
   15890:	ldr	r0, [r1, #48]!	; 0x30
   15894:	adds	r0, r0, #1
   15898:	str	r0, [r1]
   1589c:	ldr	r0, [r1, #4]
   158a0:	adc	r0, r0, #0
   158a4:	str	r0, [r1, #4]
   158a8:	ldr	r0, [r4, #4]
   158ac:	cmp	r0, #0
   158b0:	movwne	r2, #8
   158b4:	ldr	r2, [r1, r2]!
   158b8:	adds	r2, r2, #1
   158bc:	str	r2, [r1]
   158c0:	ldr	r2, [r1, #4]
   158c4:	adc	r2, r2, #0
   158c8:	cmp	r0, #0
   158cc:	str	r2, [r1, #4]
   158d0:	beq	158e8 <free_node_boolean_operator@@Base+0x74>
   158d4:	ldrd	r2, [r5, #72]	; 0x48
   158d8:	adds	r2, r2, #1
   158dc:	adc	r3, r3, #0
   158e0:	strd	r2, [r5, #72]	; 0x48
   158e4:	bl	15110 <free_node@@Base>
   158e8:	ldrd	r0, [r5, #80]	; 0x50
   158ec:	adds	r0, r0, #1
   158f0:	adc	r1, r1, #0
   158f4:	strd	r0, [r5, #80]	; 0x50
   158f8:	ldr	r0, [r4, #8]
   158fc:	bl	15110 <free_node@@Base>
   15900:	ldr	r0, [r4, #12]
   15904:	bl	15110 <free_node@@Base>
   15908:	mov	r0, r4
   1590c:	pop	{r4, r5, fp, lr}
   15910:	b	11ed4 <free@plt>

00015914 <get_boolean_op_value@@Base>:
   15914:	push	{r4, r5, r6, sl, fp, lr}
   15918:	add	fp, sp, #16
   1591c:	movw	r6, #55488	; 0xd8c0
   15920:	mov	r1, #2
   15924:	movt	r6, #2
   15928:	ldrd	r2, [r6]
   1592c:	adds	r2, r2, #1
   15930:	adc	r3, r3, #0
   15934:	strd	r2, [r6]
   15938:	ldr	r4, [r0, #4]
   1593c:	mov	r0, r4
   15940:	bl	12018 <strnlen@plt>
   15944:	mov	r1, #16
   15948:	cmp	r0, #2
   1594c:	mov	r2, r6
   15950:	movweq	r1, #8
   15954:	ldr	r1, [r2, r1]!
   15958:	adds	r1, r1, #1
   1595c:	str	r1, [r2]
   15960:	ldr	r1, [r2, #4]
   15964:	adc	r1, r1, #0
   15968:	cmp	r0, #2
   1596c:	str	r1, [r2, #4]
   15970:	bne	15b28 <get_boolean_op_value@@Base+0x214>
   15974:	movw	r1, #46851	; 0xb703
   15978:	mov	r0, r4
   1597c:	mov	r2, #2
   15980:	movt	r1, #1
   15984:	bl	12078 <strncmp@plt>
   15988:	mov	r1, #32
   1598c:	cmp	r0, #0
   15990:	mov	r2, r6
   15994:	movweq	r1, #24
   15998:	ldr	r1, [r2, r1]!
   1599c:	adds	r1, r1, #1
   159a0:	str	r1, [r2]
   159a4:	ldr	r1, [r2, #4]
   159a8:	adc	r1, r1, #0
   159ac:	cmp	r0, #0
   159b0:	str	r1, [r2, #4]
   159b4:	beq	15b70 <get_boolean_op_value@@Base+0x25c>
   159b8:	movw	r1, #46854	; 0xb706
   159bc:	mov	r0, r4
   159c0:	mov	r2, #2
   159c4:	movt	r1, #1
   159c8:	bl	12078 <strncmp@plt>
   159cc:	mov	r1, #56	; 0x38
   159d0:	cmp	r0, #0
   159d4:	mov	r2, r6
   159d8:	movweq	r1, #48	; 0x30
   159dc:	ldr	r1, [r2, r1]!
   159e0:	adds	r1, r1, #1
   159e4:	str	r1, [r2]
   159e8:	ldr	r1, [r2, #4]
   159ec:	adc	r1, r1, #0
   159f0:	cmp	r0, #0
   159f4:	str	r1, [r2, #4]
   159f8:	beq	15be0 <get_boolean_op_value@@Base+0x2cc>
   159fc:	movw	r1, #46857	; 0xb709
   15a00:	mov	r0, r4
   15a04:	mov	r2, #2
   15a08:	mov	r5, #2
   15a0c:	movt	r1, #1
   15a10:	bl	12078 <strncmp@plt>
   15a14:	mov	r1, #80	; 0x50
   15a18:	cmp	r0, #0
   15a1c:	mov	r2, r6
   15a20:	movweq	r1, #72	; 0x48
   15a24:	ldr	r1, [r2, r1]!
   15a28:	adds	r1, r1, #1
   15a2c:	str	r1, [r2]
   15a30:	ldr	r1, [r2, #4]
   15a34:	adc	r1, r1, #0
   15a38:	cmp	r0, #0
   15a3c:	str	r1, [r2, #4]
   15a40:	beq	15bf8 <get_boolean_op_value@@Base+0x2e4>
   15a44:	movw	r1, #46860	; 0xb70c
   15a48:	mov	r0, r4
   15a4c:	mov	r2, #2
   15a50:	movt	r1, #1
   15a54:	bl	12078 <strncmp@plt>
   15a58:	mov	r1, #104	; 0x68
   15a5c:	cmp	r0, #0
   15a60:	mov	r2, r6
   15a64:	movweq	r1, #96	; 0x60
   15a68:	ldr	r1, [r2, r1]!
   15a6c:	adds	r1, r1, #1
   15a70:	str	r1, [r2]
   15a74:	ldr	r1, [r2, #4]
   15a78:	adc	r1, r1, #0
   15a7c:	cmp	r0, #0
   15a80:	str	r1, [r2, #4]
   15a84:	beq	15c0c <get_boolean_op_value@@Base+0x2f8>
   15a88:	movw	r1, #46863	; 0xb70f
   15a8c:	mov	r0, r4
   15a90:	mov	r2, #2
   15a94:	movt	r1, #1
   15a98:	bl	12078 <strncmp@plt>
   15a9c:	mov	r1, #128	; 0x80
   15aa0:	cmp	r0, #0
   15aa4:	mov	r2, r6
   15aa8:	movweq	r1, #120	; 0x78
   15aac:	ldr	r1, [r2, r1]!
   15ab0:	adds	r1, r1, #1
   15ab4:	str	r1, [r2]
   15ab8:	ldr	r1, [r2, #4]
   15abc:	adc	r1, r1, #0
   15ac0:	cmp	r0, #0
   15ac4:	str	r1, [r2, #4]
   15ac8:	beq	15c24 <get_boolean_op_value@@Base+0x310>
   15acc:	movw	r1, #46866	; 0xb712
   15ad0:	mov	r0, r4
   15ad4:	mov	r2, #2
   15ad8:	movt	r1, #1
   15adc:	bl	12078 <strncmp@plt>
   15ae0:	mov	r1, #152	; 0x98
   15ae4:	cmp	r0, #0
   15ae8:	mov	r2, r6
   15aec:	movweq	r1, #144	; 0x90
   15af0:	ldr	r1, [r2, r1]!
   15af4:	adds	r1, r1, #1
   15af8:	str	r1, [r2]
   15afc:	ldr	r1, [r2, #4]
   15b00:	adc	r1, r1, #0
   15b04:	cmp	r0, #0
   15b08:	str	r1, [r2, #4]
   15b0c:	bne	15c60 <get_boolean_op_value@@Base+0x34c>
   15b10:	ldrd	r0, [r6, #160]	; 0xa0
   15b14:	mov	r5, #5
   15b18:	adds	r0, r0, #1
   15b1c:	adc	r1, r1, #0
   15b20:	strd	r0, [r6, #160]	; 0xa0
   15b24:	b	15c38 <get_boolean_op_value@@Base+0x324>
   15b28:	ldrb	r0, [r4]
   15b2c:	cmp	r0, #62	; 0x3e
   15b30:	beq	15bb4 <get_boolean_op_value@@Base+0x2a0>
   15b34:	cmp	r0, #60	; 0x3c
   15b38:	beq	15b88 <get_boolean_op_value@@Base+0x274>
   15b3c:	cmp	r0, #33	; 0x21
   15b40:	bne	15c50 <get_boolean_op_value@@Base+0x33c>
   15b44:	movw	r0, #47068	; 0xb7dc
   15b48:	movt	r0, #1
   15b4c:	add	r1, r0, #4
   15b50:	mov	r0, #0
   15b54:	bl	15c84 <get_boolean_op_value@@Base+0x370>
   15b58:	ldrd	r0, [r6, #200]	; 0xc8
   15b5c:	mov	r5, #8
   15b60:	adds	r0, r0, #1
   15b64:	adc	r1, r1, #0
   15b68:	strd	r0, [r6, #200]	; 0xc8
   15b6c:	b	15c38 <get_boolean_op_value@@Base+0x324>
   15b70:	ldrd	r0, [r6, #40]	; 0x28
   15b74:	mov	r5, #0
   15b78:	adds	r0, r0, #1
   15b7c:	adc	r1, r1, #0
   15b80:	strd	r0, [r6, #40]	; 0x28
   15b84:	b	15c38 <get_boolean_op_value@@Base+0x324>
   15b88:	movw	r0, #47068	; 0xb7dc
   15b8c:	movt	r0, #1
   15b90:	add	r1, r0, #8
   15b94:	mov	r0, #0
   15b98:	bl	15c84 <get_boolean_op_value@@Base+0x370>
   15b9c:	ldrd	r0, [r6, #208]	; 0xd0
   15ba0:	mov	r5, #6
   15ba4:	adds	r0, r0, #1
   15ba8:	adc	r1, r1, #0
   15bac:	strd	r0, [r6, #208]	; 0xd0
   15bb0:	b	15c38 <get_boolean_op_value@@Base+0x324>
   15bb4:	movw	r0, #47068	; 0xb7dc
   15bb8:	movt	r0, #1
   15bbc:	add	r1, r0, #12
   15bc0:	mov	r0, #0
   15bc4:	bl	15c84 <get_boolean_op_value@@Base+0x370>
   15bc8:	ldrd	r0, [r6, #216]	; 0xd8
   15bcc:	mov	r5, #7
   15bd0:	adds	r0, r0, #1
   15bd4:	adc	r1, r1, #0
   15bd8:	strd	r0, [r6, #216]	; 0xd8
   15bdc:	b	15c38 <get_boolean_op_value@@Base+0x324>
   15be0:	ldrd	r0, [r6, #64]	; 0x40
   15be4:	mov	r5, #1
   15be8:	adds	r0, r0, #1
   15bec:	adc	r1, r1, #0
   15bf0:	strd	r0, [r6, #64]	; 0x40
   15bf4:	b	15c38 <get_boolean_op_value@@Base+0x324>
   15bf8:	ldrd	r0, [r6, #88]	; 0x58
   15bfc:	adds	r0, r0, #1
   15c00:	adc	r1, r1, #0
   15c04:	strd	r0, [r6, #88]	; 0x58
   15c08:	b	15c38 <get_boolean_op_value@@Base+0x324>
   15c0c:	ldrd	r0, [r6, #112]	; 0x70
   15c10:	mov	r5, #3
   15c14:	adds	r0, r0, #1
   15c18:	adc	r1, r1, #0
   15c1c:	strd	r0, [r6, #112]	; 0x70
   15c20:	b	15c38 <get_boolean_op_value@@Base+0x324>
   15c24:	ldrd	r0, [r6, #136]	; 0x88
   15c28:	mov	r5, #4
   15c2c:	adds	r0, r0, #1
   15c30:	adc	r1, r1, #0
   15c34:	strd	r0, [r6, #136]	; 0x88
   15c38:	ldrd	r0, [r6, #224]	; 0xe0
   15c3c:	adds	r0, r0, #1
   15c40:	adc	r1, r1, #0
   15c44:	strd	r0, [r6, #224]	; 0xe0
   15c48:	mov	r0, r5
   15c4c:	pop	{r4, r5, r6, sl, fp, pc}
   15c50:	movw	r1, #47068	; 0xb7dc
   15c54:	mov	r0, #0
   15c58:	movt	r1, #1
   15c5c:	bl	15c84 <get_boolean_op_value@@Base+0x370>
   15c60:	movw	r0, #53480	; 0xd0e8
   15c64:	movw	r1, #46869	; 0xb715
   15c68:	mov	r2, r4
   15c6c:	movt	r0, #2
   15c70:	movt	r1, #1
   15c74:	ldr	r0, [r0]
   15c78:	bl	11fb8 <fprintf@plt>
   15c7c:	mov	r0, #1
   15c80:	bl	11f88 <exit@plt>
   15c84:	cmn	r0, #1
   15c88:	ldrne	r0, [r1, r0, lsl #2]
   15c8c:	cmpne	r0, #0
   15c90:	bne	15c98 <get_boolean_op_value@@Base+0x384>
   15c94:	bx	lr
   15c98:	ldrd	r2, [r0]
   15c9c:	adds	r2, r2, #1
   15ca0:	adc	r3, r3, #0
   15ca4:	strd	r2, [r0]
   15ca8:	bx	lr
   15cac:	push	{r4, r5, r6, lr}
   15cb0:	sub	sp, sp, #8
   15cb4:	movw	r0, #47536	; 0xb9b0
   15cb8:	movw	r1, #44967	; 0xafa7
   15cbc:	movw	r2, #23410	; 0x5b72
   15cc0:	movt	r0, #1
   15cc4:	movt	r1, #1
   15cc8:	movt	r2, #13184	; 0x3380
   15ccc:	bl	17f68 <__generate_code_for_binary_boolean_expression@@Base+0x518>
   15cd0:	movw	r0, #47408	; 0xb930
   15cd4:	movw	r6, #47088	; 0xb7f0
   15cd8:	mov	r5, #0
   15cdc:	movt	r0, #1
   15ce0:	movt	r6, #1
   15ce4:	add	r4, r0, #4
   15ce8:	mov	r3, r6
   15cec:	ldr	r0, [r3, r5]!
   15cf0:	ldr	r1, [r3, #16]
   15cf4:	str	r1, [sp]
   15cf8:	ldmib	r3, {r1, r2}
   15cfc:	ldrb	r3, [r3, #12]
   15d00:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   15d04:	ldrd	r0, [r4, #-4]
   15d08:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   15d0c:	add	r5, r5, #20
   15d10:	add	r4, r4, #8
   15d14:	cmp	r5, #320	; 0x140
   15d18:	bne	15ce8 <get_boolean_op_value@@Base+0x3d4>
   15d1c:	bl	196fc <__generate_code_for_binary_boolean_expression@@Base+0x1cac>
   15d20:	add	sp, sp, #8
   15d24:	pop	{r4, r5, r6, lr}
   15d28:	b	1a468 <__generate_code_for_binary_boolean_expression@@Base+0x2a18>
   15d2c:	push	{fp, lr}
   15d30:	bl	15cac <get_boolean_op_value@@Base+0x398>
   15d34:	movw	r2, #55728	; 0xd9b0
   15d38:	vmov.i32	q8, #0	; 0x00000000
   15d3c:	movw	r0, #55840	; 0xda20
   15d40:	movw	r1, #55360	; 0xd840
   15d44:	mov	ip, #32
   15d48:	mov	lr, #0
   15d4c:	movt	r2, #2
   15d50:	movt	r0, #2
   15d54:	movt	r1, #2
   15d58:	add	r3, r2, #16
   15d5c:	str	lr, [r1, #112]	; 0x70
   15d60:	vst1.64	{d16-d17}, [r3 :128]
   15d64:	add	r3, r2, #32
   15d68:	vst1.64	{d16-d17}, [r3 :128]
   15d6c:	add	r3, r2, #48	; 0x30
   15d70:	vst1.64	{d16-d17}, [r3 :128]
   15d74:	add	r3, r2, #64	; 0x40
   15d78:	vst1.64	{d16-d17}, [r3 :128]
   15d7c:	add	r3, r2, #80	; 0x50
   15d80:	vst1.64	{d16-d17}, [r3 :128]
   15d84:	mov	r3, r0
   15d88:	vst1.64	{d16-d17}, [r3 :128], ip
   15d8c:	str	lr, [r0, #48]	; 0x30
   15d90:	str	lr, [r0, #52]	; 0x34
   15d94:	vst1.64	{d16-d17}, [r3 :128]
   15d98:	add	r3, r1, #96	; 0x60
   15d9c:	vst1.64	{d16-d17}, [r3 :128]
   15da0:	add	r3, r1, #80	; 0x50
   15da4:	vst1.64	{d16-d17}, [r3 :128]
   15da8:	add	r3, r1, #64	; 0x40
   15dac:	vst1.64	{d16-d17}, [r3 :128]
   15db0:	add	r3, r1, #48	; 0x30
   15db4:	vst1.64	{d16-d17}, [r3 :128]
   15db8:	add	r3, r1, #32
   15dbc:	vst1.64	{d16-d17}, [r3 :128]
   15dc0:	add	r3, r1, #16
   15dc4:	vst1.64	{d16-d17}, [r3 :128]
   15dc8:	mov	r3, #96	; 0x60
   15dcc:	vst1.64	{d16-d17}, [r2 :128], r3
   15dd0:	vst1.64	{d16-d17}, [r2 :128]
   15dd4:	mov	r2, #116	; 0x74
   15dd8:	vst1.64	{d16-d17}, [r1 :128], r2
   15ddc:	str	lr, [r1]
   15de0:	add	r1, r0, #16
   15de4:	vst1.64	{d16-d17}, [r1 :128]
   15de8:	add	r1, r0, #80	; 0x50
   15dec:	str	lr, [r0, #96]	; 0x60
   15df0:	str	lr, [r0, #100]	; 0x64
   15df4:	add	r0, r0, #64	; 0x40
   15df8:	vst1.64	{d16-d17}, [r1 :128]
   15dfc:	movw	r1, #55952	; 0xda90
   15e00:	vst1.64	{d16-d17}, [r0 :128]
   15e04:	mov	r0, #36	; 0x24
   15e08:	movt	r1, #2
   15e0c:	mov	r2, r1
   15e10:	str	lr, [r1, #32]
   15e14:	vst1.64	{d16-d17}, [r2 :128], r0
   15e18:	str	lr, [r2]
   15e1c:	add	r2, r1, #16
   15e20:	vst1.64	{d16-d17}, [r2 :128]
   15e24:	add	r2, r1, #64	; 0x40
   15e28:	str	lr, [r1, #80]	; 0x50
   15e2c:	str	lr, [r1, #84]	; 0x54
   15e30:	add	r1, r1, #48	; 0x30
   15e34:	vst1.64	{d16-d17}, [r1 :128]
   15e38:	movw	r1, #56048	; 0xdaf0
   15e3c:	vst1.64	{d16-d17}, [r2 :128]
   15e40:	movt	r1, #2
   15e44:	mov	r2, r1
   15e48:	str	lr, [r1, #32]
   15e4c:	vst1.64	{d16-d17}, [r2 :128], r0
   15e50:	add	r0, r1, #16
   15e54:	vst1.64	{d16-d17}, [r0 :128]
   15e58:	add	r0, r1, #64	; 0x40
   15e5c:	str	lr, [r2]
   15e60:	str	lr, [r1, #80]	; 0x50
   15e64:	str	lr, [r1, #84]	; 0x54
   15e68:	mov	r2, #232	; 0xe8
   15e6c:	vst1.64	{d16-d17}, [r0 :128]
   15e70:	add	r0, r1, #48	; 0x30
   15e74:	mov	r1, #0
   15e78:	vst1.64	{d16-d17}, [r0 :128]
   15e7c:	movw	r0, #55488	; 0xd8c0
   15e80:	movt	r0, #2
   15e84:	bl	11fe8 <memset@plt>
   15e88:	pop	{fp, pc}
   15e8c:	movw	r0, #23724	; 0x5cac
   15e90:	movw	r1, #23852	; 0x5d2c
   15e94:	movt	r0, #1
   15e98:	movt	r1, #1
   15e9c:	b	1a918 <__gcov_flush@@Base+0xb4>

00015ea0 <init_grammar@@Base>:
   15ea0:	movw	r2, #56912	; 0xde50
   15ea4:	add	r3, pc, #36	; 0x24
   15ea8:	movt	r2, #2
   15eac:	vld1.64	{d16-d17}, [r3 :128]
   15eb0:	vld1.64	{d18-d19}, [r2 :128]
   15eb4:	vadd.i64	q8, q9, q8
   15eb8:	vst1.64	{d16-d17}, [r2 :128]
   15ebc:	str	r1, [r0]
   15ec0:	bx	lr
   15ec4:	nop	{0}
   15ec8:	nop	{0}
   15ecc:	nop	{0}
   15ed0:	andeq	r0, r0, r1
   15ed4:	andeq	r0, r0, r0
   15ed8:	andeq	r0, r0, r1
   15edc:	andeq	r0, r0, r0

00015ee0 <destroy_grammar@@Base>:
   15ee0:	movw	r0, #56912	; 0xde50
   15ee4:	add	r1, pc, #36	; 0x24
   15ee8:	movt	r0, #2
   15eec:	vld1.64	{d16-d17}, [r1 :128]
   15ef0:	add	r0, r0, #16
   15ef4:	vld1.64	{d18-d19}, [r0 :128]
   15ef8:	vadd.i64	q8, q9, q8
   15efc:	vst1.64	{d16-d17}, [r0 :128]
   15f00:	bx	lr
   15f04:	nop	{0}
   15f08:	nop	{0}
   15f0c:	nop	{0}
   15f10:	andeq	r0, r0, r1
   15f14:	andeq	r0, r0, r0
   15f18:	andeq	r0, r0, r1
   15f1c:	andeq	r0, r0, r0

00015f20 <build_ast@@Base>:
   15f20:	movw	r1, #56912	; 0xde50
   15f24:	add	r2, pc, #36	; 0x24
   15f28:	movt	r1, #2
   15f2c:	vld1.64	{d16-d17}, [r2 :128]
   15f30:	add	r1, r1, #32
   15f34:	vld1.64	{d18-d19}, [r1 :128]
   15f38:	vadd.i64	q8, q9, q8
   15f3c:	vst1.64	{d16-d17}, [r1 :128]
   15f40:	b	15f60 <read_function_ast_node@@Base>
   15f44:	nop	{0}
   15f48:	nop	{0}
   15f4c:	nop	{0}
   15f50:	andeq	r0, r0, r1
   15f54:	andeq	r0, r0, r0
   15f58:	andeq	r0, r0, r1
   15f5c:	andeq	r0, r0, r0

00015f60 <read_function_ast_node@@Base>:
   15f60:	push	{r4, r5, r6, r7, fp, lr}
   15f64:	add	fp, sp, #16
   15f68:	movw	r7, #56144	; 0xdb50
   15f6c:	mov	r4, r0
   15f70:	movt	r7, #2
   15f74:	ldrd	r0, [r7]
   15f78:	adds	r0, r0, #1
   15f7c:	adc	r1, r1, #0
   15f80:	strd	r0, [r7]
   15f84:	ldr	r0, [r4]
   15f88:	bl	133b0 <next@@Base>
   15f8c:	ldr	r1, [r0]
   15f90:	mov	r2, #16
   15f94:	mov	r3, r7
   15f98:	cmp	r1, #0
   15f9c:	movwne	r2, #8
   15fa0:	ldr	r2, [r3, r2]!
   15fa4:	adds	r2, r2, #1
   15fa8:	str	r2, [r3]
   15fac:	ldr	r2, [r3, #4]
   15fb0:	adc	r2, r2, #0
   15fb4:	cmp	r1, #0
   15fb8:	str	r2, [r3, #4]
   15fbc:	beq	15fd8 <read_function_ast_node@@Base+0x78>
   15fc0:	ldrd	r0, [r7, #24]
   15fc4:	mov	r4, #0
   15fc8:	adds	r0, r0, #1
   15fcc:	adc	r1, r1, #0
   15fd0:	strd	r0, [r7, #24]
   15fd4:	b	16120 <read_function_ast_node@@Base+0x1c0>
   15fd8:	bl	12b40 <free_token_int_type@@Base>
   15fdc:	ldr	r0, [r4]
   15fe0:	bl	133b0 <next@@Base>
   15fe4:	mov	r5, r0
   15fe8:	ldr	r0, [r0]
   15fec:	mov	r1, #40	; 0x28
   15ff0:	mov	r2, r7
   15ff4:	cmp	r0, #2
   15ff8:	movwne	r1, #32
   15ffc:	ldr	r1, [r2, r1]!
   16000:	adds	r1, r1, #1
   16004:	str	r1, [r2]
   16008:	ldr	r1, [r2, #4]
   1600c:	adc	r1, r1, #0
   16010:	cmp	r0, #2
   16014:	str	r1, [r2, #4]
   16018:	beq	16034 <read_function_ast_node@@Base+0xd4>
   1601c:	ldrd	r0, [r7, #48]	; 0x30
   16020:	mov	r4, #0
   16024:	adds	r0, r0, #1
   16028:	adc	r1, r1, #0
   1602c:	strd	r0, [r7, #48]	; 0x30
   16030:	b	16120 <read_function_ast_node@@Base+0x1c0>
   16034:	ldr	r0, [r4]
   16038:	bl	133b0 <next@@Base>
   1603c:	ldr	r1, [r0]
   16040:	mov	r2, #64	; 0x40
   16044:	mov	r3, r7
   16048:	cmp	r1, #3
   1604c:	movwne	r2, #56	; 0x38
   16050:	ldr	r2, [r3, r2]!
   16054:	adds	r2, r2, #1
   16058:	str	r2, [r3]
   1605c:	ldr	r2, [r3, #4]
   16060:	adc	r2, r2, #0
   16064:	cmp	r1, #3
   16068:	str	r2, [r3, #4]
   1606c:	beq	16088 <read_function_ast_node@@Base+0x128>
   16070:	ldrd	r0, [r7, #72]	; 0x48
   16074:	mov	r4, #0
   16078:	adds	r0, r0, #1
   1607c:	adc	r1, r1, #0
   16080:	strd	r0, [r7, #72]	; 0x48
   16084:	b	16120 <read_function_ast_node@@Base+0x1c0>
   16088:	bl	12bf0 <free_token_opar@@Base>
   1608c:	ldr	r0, [r4]
   16090:	bl	133b0 <next@@Base>
   16094:	ldr	r1, [r0]
   16098:	mov	r2, #88	; 0x58
   1609c:	mov	r3, r7
   160a0:	cmp	r1, #4
   160a4:	movwne	r2, #80	; 0x50
   160a8:	ldr	r2, [r3, r2]!
   160ac:	adds	r2, r2, #1
   160b0:	str	r2, [r3]
   160b4:	ldr	r2, [r3, #4]
   160b8:	adc	r2, r2, #0
   160bc:	cmp	r1, #4
   160c0:	str	r2, [r3, #4]
   160c4:	beq	160e0 <read_function_ast_node@@Base+0x180>
   160c8:	ldrd	r0, [r7, #96]	; 0x60
   160cc:	mov	r4, #0
   160d0:	adds	r0, r0, #1
   160d4:	adc	r1, r1, #0
   160d8:	strd	r0, [r7, #96]	; 0x60
   160dc:	b	16120 <read_function_ast_node@@Base+0x1c0>
   160e0:	ldrd	r2, [r7, #104]	; 0x68
   160e4:	adds	r2, r2, #1
   160e8:	adc	r3, r3, #0
   160ec:	strd	r2, [r7, #104]	; 0x68
   160f0:	bl	12c30 <free_token_cpar@@Base>
   160f4:	mov	r0, r4
   160f8:	bl	16138 <read_body@@Base>
   160fc:	mov	r6, r0
   16100:	mov	r0, #16
   16104:	bl	11f4c <malloc@plt>
   16108:	ldr	r1, [r5, #4]
   1610c:	mov	r2, r6
   16110:	mov	r4, r0
   16114:	bl	14f50 <init_node_function@@Base>
   16118:	mov	r0, r5
   1611c:	bl	12bb0 <free_token_function@@Base>
   16120:	ldrd	r0, [r7, #112]	; 0x70
   16124:	adds	r0, r0, #1
   16128:	adc	r1, r1, #0
   1612c:	strd	r0, [r7, #112]	; 0x70
   16130:	mov	r0, r4
   16134:	pop	{r4, r5, r6, r7, fp, pc}

00016138 <read_body@@Base>:
   16138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1613c:	add	fp, sp, #28
   16140:	sub	sp, sp, #4
   16144:	movw	r4, #56272	; 0xdbd0
   16148:	mov	r9, r0
   1614c:	movt	r4, #2
   16150:	ldrd	r0, [r4]
   16154:	adds	r0, r0, #1
   16158:	adc	r1, r1, #0
   1615c:	strd	r0, [r4]
   16160:	ldr	r0, [r9]
   16164:	bl	133b0 <next@@Base>
   16168:	ldr	r1, [r0]
   1616c:	mov	r2, #16
   16170:	mov	r3, r4
   16174:	cmp	r1, #5
   16178:	movwne	r2, #8
   1617c:	ldr	r2, [r3, r2]!
   16180:	adds	r2, r2, #1
   16184:	str	r2, [r3]
   16188:	ldr	r2, [r3, #4]
   1618c:	adc	r2, r2, #0
   16190:	cmp	r1, #5
   16194:	str	r2, [r3, #4]
   16198:	beq	161b4 <read_body@@Base+0x7c>
   1619c:	ldrd	r0, [r4, #24]
   161a0:	mov	r6, #0
   161a4:	adds	r0, r0, #1
   161a8:	adc	r1, r1, #0
   161ac:	strd	r0, [r4, #24]
   161b0:	b	16390 <read_body@@Base+0x258>
   161b4:	ldrd	r2, [r4, #32]
   161b8:	adds	r2, r2, #1
   161bc:	adc	r3, r3, #0
   161c0:	strd	r2, [r4, #32]
   161c4:	bl	12c70 <free_token_obra@@Base>
   161c8:	ldr	r0, [r9]
   161cc:	bl	133b0 <next@@Base>
   161d0:	mov	r7, r0
   161d4:	ldr	r0, [r0]
   161d8:	mov	r1, #48	; 0x30
   161dc:	mov	r2, r4
   161e0:	mov	r6, #0
   161e4:	cmp	r0, #6
   161e8:	movwne	r1, #40	; 0x28
   161ec:	ldr	r1, [r2, r1]!
   161f0:	adds	r1, r1, #1
   161f4:	str	r1, [r2]
   161f8:	ldr	r1, [r2, #4]
   161fc:	adc	r1, r1, #0
   16200:	cmp	r0, #6
   16204:	str	r1, [r2, #4]
   16208:	beq	16348 <read_body@@Base+0x210>
   1620c:	movw	r1, #48000	; 0xbb80
   16210:	mov	sl, #0
   16214:	mov	r6, #0
   16218:	movt	r1, #1
   1621c:	add	r8, r1, #8
   16220:	cmp	r0, #10
   16224:	beq	16268 <read_body@@Base+0x130>
   16228:	cmp	r0, #7
   1622c:	bne	16364 <read_body@@Base+0x22c>
   16230:	movw	r0, #48000	; 0xbb80
   16234:	movt	r0, #1
   16238:	add	r1, r0, #4
   1623c:	mov	r0, #0
   16240:	bl	16cd0 <read_boolean_unary_expression@@Base+0x150>
   16244:	ldrd	r0, [r4, #80]	; 0x50
   16248:	adds	r0, r0, #1
   1624c:	adc	r1, r1, #0
   16250:	strd	r0, [r4, #80]	; 0x50
   16254:	mov	r0, r7
   16258:	bl	12cf0 <free_token_return@@Base>
   1625c:	mov	r0, r9
   16260:	bl	163ac <read_return_expression@@Base>
   16264:	b	16294 <read_body@@Base+0x15c>
   16268:	mov	r0, #0
   1626c:	mov	r1, r8
   16270:	bl	16cd0 <read_boolean_unary_expression@@Base+0x150>
   16274:	ldrd	r0, [r4, #88]	; 0x58
   16278:	adds	r0, r0, #1
   1627c:	adc	r1, r1, #0
   16280:	strd	r0, [r4, #88]	; 0x58
   16284:	mov	r0, r7
   16288:	bl	12da0 <free_token_if@@Base>
   1628c:	mov	r0, r9
   16290:	bl	164d8 <read_if_statement@@Base>
   16294:	mov	r5, r0
   16298:	cmp	r6, #0
   1629c:	mov	r0, #112	; 0x70
   162a0:	mov	r1, r4
   162a4:	movwne	r0, #104	; 0x68
   162a8:	ldr	r0, [r1, r0]!
   162ac:	adds	r0, r0, #1
   162b0:	str	r0, [r1]
   162b4:	ldr	r0, [r1, #4]
   162b8:	adc	r0, r0, #0
   162bc:	cmp	r6, #0
   162c0:	str	r0, [r1, #4]
   162c4:	beq	162e0 <read_body@@Base+0x1a8>
   162c8:	ldrd	r0, [r4, #120]	; 0x78
   162cc:	adds	r0, r0, #1
   162d0:	adc	r1, r1, #0
   162d4:	strd	r0, [r4, #120]	; 0x78
   162d8:	str	r5, [sl, #4]
   162dc:	b	162f4 <read_body@@Base+0x1bc>
   162e0:	ldrd	r0, [r4, #128]	; 0x80
   162e4:	mov	r6, r5
   162e8:	adds	r0, r0, #1
   162ec:	adc	r1, r1, #0
   162f0:	strd	r0, [r4, #128]	; 0x80
   162f4:	ldrd	r0, [r4, #136]	; 0x88
   162f8:	adds	r0, r0, #1
   162fc:	adc	r1, r1, #0
   16300:	strd	r0, [r4, #136]	; 0x88
   16304:	ldr	r0, [r9]
   16308:	bl	133b0 <next@@Base>
   1630c:	mov	r7, r0
   16310:	ldr	r0, [r0]
   16314:	mov	r1, #48	; 0x30
   16318:	mov	r2, r4
   1631c:	mov	sl, r5
   16320:	cmp	r0, #6
   16324:	movwne	r1, #40	; 0x28
   16328:	ldr	r1, [r2, r1]!
   1632c:	adds	r1, r1, #1
   16330:	str	r1, [r2]
   16334:	ldr	r1, [r2, #4]
   16338:	adc	r1, r1, #0
   1633c:	cmp	r0, #6
   16340:	str	r1, [r2, #4]
   16344:	bne	16220 <read_body@@Base+0xe8>
   16348:	ldrd	r0, [r4, #144]	; 0x90
   1634c:	adds	r0, r0, #1
   16350:	adc	r1, r1, #0
   16354:	strd	r0, [r4, #144]	; 0x90
   16358:	mov	r0, r7
   1635c:	bl	12cb0 <free_token_cbra@@Base>
   16360:	b	16390 <read_body@@Base+0x258>
   16364:	movw	r1, #48000	; 0xbb80
   16368:	mov	r0, #0
   1636c:	movt	r1, #1
   16370:	bl	16cd0 <read_boolean_unary_expression@@Base+0x150>
   16374:	ldrd	r0, [r4, #96]	; 0x60
   16378:	adds	r0, r0, #1
   1637c:	adc	r1, r1, #0
   16380:	strd	r0, [r4, #96]	; 0x60
   16384:	mov	r1, r7
   16388:	ldr	r0, [r9]
   1638c:	bl	13190 <push_back@@Base>
   16390:	ldrd	r0, [r4, #152]	; 0x98
   16394:	adds	r0, r0, #1
   16398:	adc	r1, r1, #0
   1639c:	strd	r0, [r4, #152]	; 0x98
   163a0:	mov	r0, r6
   163a4:	sub	sp, fp, #28
   163a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000163ac <read_return_expression@@Base>:
   163ac:	push	{r4, r5, r6, r7, fp, lr}
   163b0:	add	fp, sp, #16
   163b4:	movw	r7, #56432	; 0xdc70
   163b8:	mov	r4, r0
   163bc:	movt	r7, #2
   163c0:	ldrd	r0, [r7]
   163c4:	adds	r0, r0, #1
   163c8:	adc	r1, r1, #0
   163cc:	strd	r0, [r7]
   163d0:	ldr	r0, [r4]
   163d4:	bl	133b0 <next@@Base>
   163d8:	mov	r5, r0
   163dc:	ldr	r0, [r0]
   163e0:	mov	r1, #16
   163e4:	mov	r2, r7
   163e8:	cmp	r0, #1
   163ec:	movwne	r1, #8
   163f0:	ldr	r1, [r2, r1]!
   163f4:	adds	r1, r1, #1
   163f8:	str	r1, [r2]
   163fc:	ldr	r1, [r2, #4]
   16400:	adc	r1, r1, #0
   16404:	cmp	r0, #1
   16408:	str	r1, [r2, #4]
   1640c:	beq	16428 <read_return_expression@@Base+0x7c>
   16410:	ldrd	r0, [r7, #24]
   16414:	mov	r5, #0
   16418:	adds	r0, r0, #1
   1641c:	adc	r1, r1, #0
   16420:	strd	r0, [r7, #24]
   16424:	b	164c0 <read_return_expression@@Base+0x114>
   16428:	mov	r0, #12
   1642c:	bl	11f4c <malloc@plt>
   16430:	ldr	r1, [r5, #4]
   16434:	mov	r6, r0
   16438:	bl	14ee0 <init_node_int@@Base>
   1643c:	mov	r0, r5
   16440:	bl	12b80 <free_token_int_value@@Base>
   16444:	mov	r0, #12
   16448:	bl	11f4c <malloc@plt>
   1644c:	mov	r1, r6
   16450:	mov	r5, r0
   16454:	bl	14fc0 <init_node_return@@Base>
   16458:	ldr	r0, [r4]
   1645c:	bl	133b0 <next@@Base>
   16460:	ldr	r1, [r0]
   16464:	mov	r2, #40	; 0x28
   16468:	mov	r3, r7
   1646c:	cmp	r1, #8
   16470:	movwne	r2, #32
   16474:	ldr	r2, [r3, r2]!
   16478:	adds	r2, r2, #1
   1647c:	str	r2, [r3]
   16480:	ldr	r2, [r3, #4]
   16484:	adc	r2, r2, #0
   16488:	cmp	r1, #8
   1648c:	str	r2, [r3, #4]
   16490:	beq	164ac <read_return_expression@@Base+0x100>
   16494:	ldrd	r0, [r7, #48]	; 0x30
   16498:	mov	r5, #0
   1649c:	adds	r0, r0, #1
   164a0:	adc	r1, r1, #0
   164a4:	strd	r0, [r7, #48]	; 0x30
   164a8:	b	164c0 <read_return_expression@@Base+0x114>
   164ac:	ldrd	r2, [r7, #56]	; 0x38
   164b0:	adds	r2, r2, #1
   164b4:	adc	r3, r3, #0
   164b8:	strd	r2, [r7, #56]	; 0x38
   164bc:	bl	12d30 <free_token_semicolon@@Base>
   164c0:	ldrd	r0, [r7, #64]	; 0x40
   164c4:	adds	r0, r0, #1
   164c8:	adc	r1, r1, #0
   164cc:	strd	r0, [r7, #64]	; 0x40
   164d0:	mov	r0, r5
   164d4:	pop	{r4, r5, r6, r7, fp, pc}

000164d8 <read_if_statement@@Base>:
   164d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   164dc:	add	fp, sp, #24
   164e0:	movw	r5, #56512	; 0xdcc0
   164e4:	mov	r4, r0
   164e8:	movt	r5, #2
   164ec:	ldrd	r0, [r5]
   164f0:	adds	r0, r0, #1
   164f4:	adc	r1, r1, #0
   164f8:	strd	r0, [r5]
   164fc:	ldr	r0, [r4]
   16500:	bl	133b0 <next@@Base>
   16504:	ldr	r1, [r0]
   16508:	mov	r2, #16
   1650c:	mov	r3, r5
   16510:	cmp	r1, #3
   16514:	movwne	r2, #8
   16518:	ldr	r2, [r3, r2]!
   1651c:	adds	r2, r2, #1
   16520:	str	r2, [r3]
   16524:	ldr	r2, [r3, #4]
   16528:	adc	r2, r2, #0
   1652c:	cmp	r1, #3
   16530:	str	r2, [r3, #4]
   16534:	beq	16550 <read_if_statement@@Base+0x78>
   16538:	ldrd	r0, [r5, #24]
   1653c:	mov	r7, #0
   16540:	adds	r0, r0, #1
   16544:	adc	r1, r1, #0
   16548:	strd	r0, [r5, #24]
   1654c:	b	1662c <read_if_statement@@Base+0x154>
   16550:	bl	12bf0 <free_token_opar@@Base>
   16554:	mov	r0, r4
   16558:	bl	16650 <read_boolean_expression@@Base>
   1655c:	mov	r8, r0
   16560:	mov	r0, r4
   16564:	bl	16138 <read_body@@Base>
   16568:	mov	r6, r0
   1656c:	ldr	r0, [r4]
   16570:	bl	133b0 <next@@Base>
   16574:	mov	r1, r0
   16578:	ldr	r0, [r0]
   1657c:	mov	r2, #40	; 0x28
   16580:	mov	r3, r5
   16584:	cmp	r0, #11
   16588:	movweq	r2, #32
   1658c:	ldr	r2, [r3, r2]!
   16590:	adds	r2, r2, #1
   16594:	str	r2, [r3]
   16598:	ldr	r2, [r3, #4]
   1659c:	adc	r2, r2, #0
   165a0:	cmp	r0, #11
   165a4:	str	r2, [r3, #4]
   165a8:	bne	165dc <read_if_statement@@Base+0x104>
   165ac:	ldr	r0, [r5, #48]	; 0x30
   165b0:	ldr	r3, [r5, #52]	; 0x34
   165b4:	adds	r0, r0, #1
   165b8:	str	r0, [r5, #48]	; 0x30
   165bc:	adc	r3, r3, #0
   165c0:	mov	r0, r1
   165c4:	str	r3, [r5, #52]	; 0x34
   165c8:	bl	12de0 <free_token_else@@Base>
   165cc:	mov	r0, r4
   165d0:	bl	16138 <read_body@@Base>
   165d4:	mov	r4, r0
   165d8:	b	16600 <read_if_statement@@Base+0x128>
   165dc:	ldr	r0, [r5, #56]	; 0x38
   165e0:	ldr	r3, [r5, #60]	; 0x3c
   165e4:	adds	r0, r0, #1
   165e8:	adc	r3, r3, #0
   165ec:	str	r0, [r5, #56]	; 0x38
   165f0:	str	r3, [r5, #60]	; 0x3c
   165f4:	ldr	r0, [r4]
   165f8:	bl	13190 <push_back@@Base>
   165fc:	mov	r4, #0
   16600:	ldrd	r0, [r5, #64]	; 0x40
   16604:	adds	r0, r0, #1
   16608:	adc	r1, r1, #0
   1660c:	strd	r0, [r5, #64]	; 0x40
   16610:	mov	r0, #20
   16614:	bl	11f4c <malloc@plt>
   16618:	mov	r1, r8
   1661c:	mov	r2, r6
   16620:	mov	r3, r4
   16624:	mov	r7, r0
   16628:	bl	15030 <init_node_if@@Base>
   1662c:	ldrd	r0, [r5, #72]	; 0x48
   16630:	adds	r0, r0, #1
   16634:	adc	r1, r1, #0
   16638:	strd	r0, [r5, #72]	; 0x48
   1663c:	mov	r0, r7
   16640:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16644:	nop	{0}
   16648:	nop	{0}
   1664c:	nop	{0}

00016650 <read_boolean_expression@@Base>:
   16650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16654:	add	fp, sp, #28
   16658:	sub	sp, sp, #4
   1665c:	movw	r7, #56592	; 0xdd10
   16660:	mov	r4, r0
   16664:	add	r0, pc, #452	; 0x1c4
   16668:	mov	r5, #0
   1666c:	movt	r7, #2
   16670:	vld1.64	{d16-d17}, [r0 :128]
   16674:	str	r5, [sp]
   16678:	vld1.64	{d18-d19}, [r7 :128]
   1667c:	vadd.i64	q8, q9, q8
   16680:	vst1.64	{d16-d17}, [r7 :128]
   16684:	ldr	r0, [r4]
   16688:	bl	133b0 <next@@Base>
   1668c:	mov	r6, r0
   16690:	ldr	r0, [r0]
   16694:	mov	r1, #24
   16698:	mov	r2, r7
   1669c:	cmp	r0, #4
   166a0:	movwne	r1, #16
   166a4:	ldr	r1, [r2, r1]!
   166a8:	adds	r1, r1, #1
   166ac:	str	r1, [r2]
   166b0:	ldr	r1, [r2, #4]
   166b4:	adc	r1, r1, #0
   166b8:	cmp	r0, #4
   166bc:	str	r1, [r2, #4]
   166c0:	beq	167d0 <read_boolean_expression@@Base+0x180>
   166c4:	movw	r8, #48012	; 0xbb8c
   166c8:	mov	r5, #0
   166cc:	movt	r8, #1
   166d0:	add	r9, r8, #8
   166d4:	cmp	r0, #12
   166d8:	beq	16750 <read_boolean_expression@@Base+0x100>
   166dc:	cmp	r0, #3
   166e0:	beq	16718 <read_boolean_expression@@Base+0xc8>
   166e4:	cmp	r0, #1
   166e8:	bne	167f4 <read_boolean_expression@@Base+0x1a4>
   166ec:	add	r1, r8, #4
   166f0:	mov	r0, #0
   166f4:	bl	16cd0 <read_boolean_unary_expression@@Base+0x150>
   166f8:	ldrd	r0, [r7, #64]	; 0x40
   166fc:	adds	r0, r0, #1
   16700:	adc	r1, r1, #0
   16704:	strd	r0, [r7, #64]	; 0x40
   16708:	mov	r1, r6
   1670c:	ldr	r0, [r4]
   16710:	bl	13190 <push_back@@Base>
   16714:	b	16734 <read_boolean_expression@@Base+0xe4>
   16718:	add	r1, r8, #12
   1671c:	mov	r0, #0
   16720:	bl	16cd0 <read_boolean_unary_expression@@Base+0x150>
   16724:	ldrd	r0, [r7, #80]	; 0x50
   16728:	adds	r0, r0, #1
   1672c:	adc	r1, r1, #0
   16730:	strd	r0, [r7, #80]	; 0x50
   16734:	mov	r0, r4
   16738:	mov	r1, r5
   1673c:	mov	r2, sp
   16740:	mov	r3, sl
   16744:	bl	16840 <read_single_boolean_expression@@Base>
   16748:	mov	r5, r0
   1674c:	b	16780 <read_boolean_expression@@Base+0x130>
   16750:	mov	r0, #0
   16754:	mov	r1, r9
   16758:	bl	16cd0 <read_boolean_unary_expression@@Base+0x150>
   1675c:	ldrd	r0, [r7, #72]	; 0x48
   16760:	adds	r0, r0, #1
   16764:	adc	r1, r1, #0
   16768:	strd	r0, [r7, #72]	; 0x48
   1676c:	mov	r0, r6
   16770:	bl	15914 <get_boolean_op_value@@Base>
   16774:	mov	sl, r0
   16778:	mov	r0, #1
   1677c:	str	r0, [sp]
   16780:	ldrd	r0, [r7, #88]	; 0x58
   16784:	adds	r0, r0, #1
   16788:	adc	r1, r1, #0
   1678c:	strd	r0, [r7, #88]	; 0x58
   16790:	ldr	r0, [r4]
   16794:	bl	133b0 <next@@Base>
   16798:	mov	r6, r0
   1679c:	ldr	r0, [r0]
   167a0:	mov	r1, #24
   167a4:	mov	r2, r7
   167a8:	cmp	r0, #4
   167ac:	movwne	r1, #16
   167b0:	ldr	r1, [r2, r1]!
   167b4:	adds	r1, r1, #1
   167b8:	str	r1, [r2]
   167bc:	ldr	r1, [r2, #4]
   167c0:	adc	r1, r1, #0
   167c4:	cmp	r0, #4
   167c8:	str	r1, [r2, #4]
   167cc:	bne	166d4 <read_boolean_expression@@Base+0x84>
   167d0:	ldrd	r0, [r7, #96]	; 0x60
   167d4:	adds	r0, r0, #1
   167d8:	adc	r1, r1, #0
   167dc:	strd	r0, [r7, #96]	; 0x60
   167e0:	mov	r0, r6
   167e4:	bl	12c30 <free_token_cpar@@Base>
   167e8:	mov	r0, r5
   167ec:	sub	sp, fp, #28
   167f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167f4:	movw	r1, #48012	; 0xbb8c
   167f8:	mov	r0, #0
   167fc:	movt	r1, #1
   16800:	bl	16cd0 <read_boolean_unary_expression@@Base+0x150>
   16804:	movw	r0, #53480	; 0xd0e8
   16808:	mov	r1, #33	; 0x21
   1680c:	mov	r2, #1
   16810:	movt	r0, #2
   16814:	ldr	r3, [r0]
   16818:	movw	r0, #47861	; 0xbaf5
   1681c:	movt	r0, #1
   16820:	bl	11f28 <fwrite@plt>
   16824:	mov	r0, #1
   16828:	bl	11f88 <exit@plt>
   1682c:	nop	{0}
   16830:	andeq	r0, r0, r1
   16834:	andeq	r0, r0, r0
   16838:	andeq	r0, r0, r1
   1683c:	andeq	r0, r0, r0

00016840 <read_single_boolean_expression@@Base>:
   16840:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16844:	add	fp, sp, #24
   16848:	movw	r5, #56912	; 0xde50
   1684c:	mov	r4, r2
   16850:	mov	r8, r3
   16854:	movt	r5, #2
   16858:	mov	r2, r5
   1685c:	ldr	r3, [r2, #48]!	; 0x30
   16860:	adds	r3, r3, #1
   16864:	str	r3, [r2]
   16868:	ldr	r3, [r2, #4]
   1686c:	adc	r3, r3, #0
   16870:	cmp	r1, #0
   16874:	str	r3, [r2, #4]
   16878:	mov	r3, #16
   1687c:	movweq	r3, #8
   16880:	ldr	r3, [r2, r3]!
   16884:	adds	r3, r3, #1
   16888:	str	r3, [r2]
   1688c:	ldr	r3, [r2, #4]
   16890:	adc	r3, r3, #0
   16894:	cmp	r1, #0
   16898:	str	r3, [r2, #4]
   1689c:	beq	1690c <read_single_boolean_expression@@Base+0xcc>
   168a0:	ldr	r1, [r4]
   168a4:	mov	r2, #40	; 0x28
   168a8:	cmp	r1, #0
   168ac:	movwne	r2, #32
   168b0:	add	r2, r5, r2
   168b4:	ldrd	r6, [r2, #48]	; 0x30
   168b8:	adds	r6, r6, #1
   168bc:	adc	r7, r7, #0
   168c0:	cmp	r1, #0
   168c4:	strd	r6, [r2, #48]	; 0x30
   168c8:	beq	1693c <read_single_boolean_expression@@Base+0xfc>
   168cc:	ldrd	r2, [r5, #96]	; 0x60
   168d0:	adds	r2, r2, #1
   168d4:	adc	r3, r3, #0
   168d8:	strd	r2, [r5, #96]	; 0x60
   168dc:	bl	16964 <read_boolean_binary_expression@@Base>
   168e0:	mov	r7, r0
   168e4:	mov	r0, #20
   168e8:	bl	11f4c <malloc@plt>
   168ec:	mov	r1, r8
   168f0:	mov	r2, #0
   168f4:	mov	r3, r7
   168f8:	mov	r6, r0
   168fc:	mov	r9, #0
   16900:	bl	150a0 <init_node_boolean_operator@@Base>
   16904:	str	r9, [r4]
   16908:	b	16924 <read_single_boolean_expression@@Base+0xe4>
   1690c:	ldrd	r2, [r5, #72]	; 0x48
   16910:	adds	r2, r2, #1
   16914:	adc	r3, r3, #0
   16918:	strd	r2, [r5, #72]	; 0x48
   1691c:	bl	16964 <read_boolean_binary_expression@@Base>
   16920:	mov	r6, r0
   16924:	ldrd	r0, [r5, #104]	; 0x68
   16928:	adds	r0, r0, #1
   1692c:	adc	r1, r1, #0
   16930:	strd	r0, [r5, #104]	; 0x68
   16934:	mov	r0, r6
   16938:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1693c:	mov	r0, #4
   16940:	movw	r1, #47895	; 0xbb17
   16944:	ldr	r2, [r0]
   16948:	movw	r0, #53480	; 0xd0e8
   1694c:	movt	r1, #1
   16950:	movt	r0, #2
   16954:	ldr	r0, [r0]
   16958:	bl	11fb8 <fprintf@plt>
   1695c:	mov	r0, #1
   16960:	bl	11f88 <exit@plt>

00016964 <read_boolean_binary_expression@@Base>:
   16964:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16968:	add	fp, sp, #24
   1696c:	movw	r4, #56704	; 0xdd80
   16970:	mov	r5, r0
   16974:	movt	r4, #2
   16978:	ldrd	r0, [r4]
   1697c:	adds	r0, r0, #1
   16980:	adc	r1, r1, #0
   16984:	strd	r0, [r4]
   16988:	ldr	r0, [r5]
   1698c:	bl	133b0 <next@@Base>
   16990:	mov	r6, r0
   16994:	ldr	r0, [r0]
   16998:	mov	r1, #16
   1699c:	mov	r2, r4
   169a0:	cmp	r0, #1
   169a4:	movwne	r1, #8
   169a8:	ldr	r1, [r2, r1]!
   169ac:	adds	r1, r1, #1
   169b0:	str	r1, [r2]
   169b4:	ldr	r1, [r2, #4]
   169b8:	adc	r1, r1, #0
   169bc:	cmp	r0, #1
   169c0:	str	r1, [r2, #4]
   169c4:	beq	16a24 <read_boolean_binary_expression@@Base+0xc0>
   169c8:	mov	r1, #32
   169cc:	cmp	r0, #12
   169d0:	mov	r2, r4
   169d4:	movweq	r1, #24
   169d8:	ldr	r1, [r2, r1]!
   169dc:	adds	r1, r1, #1
   169e0:	str	r1, [r2]
   169e4:	ldr	r1, [r2, #4]
   169e8:	adc	r1, r1, #0
   169ec:	cmp	r0, #12
   169f0:	str	r1, [r2, #4]
   169f4:	bne	16a94 <read_boolean_binary_expression@@Base+0x130>
   169f8:	ldrd	r0, [r4, #40]	; 0x28
   169fc:	adds	r0, r0, #1
   16a00:	adc	r1, r1, #0
   16a04:	strd	r0, [r4, #40]	; 0x28
   16a08:	mov	r1, r6
   16a0c:	ldr	r0, [r5]
   16a10:	bl	13190 <push_back@@Base>
   16a14:	mov	r0, r5
   16a18:	bl	16b80 <read_boolean_unary_expression@@Base>
   16a1c:	mov	r5, r0
   16a20:	b	16b68 <read_boolean_binary_expression@@Base+0x204>
   16a24:	mov	r0, #12
   16a28:	bl	11f4c <malloc@plt>
   16a2c:	ldr	r1, [r6, #4]
   16a30:	mov	r8, r0
   16a34:	bl	14ee0 <init_node_int@@Base>
   16a38:	mov	r0, r6
   16a3c:	bl	12b80 <free_token_int_value@@Base>
   16a40:	ldr	r0, [r5]
   16a44:	bl	133b0 <next@@Base>
   16a48:	mov	r7, r0
   16a4c:	ldr	r0, [r0]
   16a50:	mov	r1, #64	; 0x40
   16a54:	mov	r2, r4
   16a58:	cmp	r0, #12
   16a5c:	movwne	r1, #56	; 0x38
   16a60:	ldr	r1, [r2, r1]!
   16a64:	adds	r1, r1, #1
   16a68:	str	r1, [r2]
   16a6c:	ldr	r1, [r2, #4]
   16a70:	adc	r1, r1, #0
   16a74:	cmp	r0, #12
   16a78:	str	r1, [r2, #4]
   16a7c:	beq	16aac <read_boolean_binary_expression@@Base+0x148>
   16a80:	ldrd	r0, [r4, #72]	; 0x48
   16a84:	adds	r0, r0, #1
   16a88:	adc	r1, r1, #0
   16a8c:	strd	r0, [r4, #72]	; 0x48
   16a90:	b	16b10 <read_boolean_binary_expression@@Base+0x1ac>
   16a94:	ldrd	r0, [r4, #48]	; 0x30
   16a98:	mov	r5, #0
   16a9c:	adds	r0, r0, #1
   16aa0:	adc	r1, r1, #0
   16aa4:	strd	r0, [r4, #48]	; 0x30
   16aa8:	b	16b68 <read_boolean_binary_expression@@Base+0x204>
   16aac:	mov	r0, r7
   16ab0:	bl	15914 <get_boolean_op_value@@Base>
   16ab4:	mov	r6, r0
   16ab8:	mov	r0, r7
   16abc:	bl	12e20 <free_token_boolean_op@@Base>
   16ac0:	ldr	r0, [r5]
   16ac4:	bl	133b0 <next@@Base>
   16ac8:	mov	r5, r0
   16acc:	ldr	r0, [r0]
   16ad0:	mov	r1, #88	; 0x58
   16ad4:	mov	r2, r4
   16ad8:	cmp	r0, #1
   16adc:	movwne	r1, #80	; 0x50
   16ae0:	ldr	r1, [r2, r1]!
   16ae4:	adds	r1, r1, #1
   16ae8:	str	r1, [r2]
   16aec:	ldr	r1, [r2, #4]
   16af0:	adc	r1, r1, #0
   16af4:	cmp	r0, #1
   16af8:	str	r1, [r2, #4]
   16afc:	beq	16b20 <read_boolean_binary_expression@@Base+0x1bc>
   16b00:	ldrd	r0, [r4, #96]	; 0x60
   16b04:	adds	r0, r0, #1
   16b08:	adc	r1, r1, #0
   16b0c:	strd	r0, [r4, #96]	; 0x60
   16b10:	mov	r0, r8
   16b14:	bl	15110 <free_node@@Base>
   16b18:	mov	r5, #0
   16b1c:	b	16b68 <read_boolean_binary_expression@@Base+0x204>
   16b20:	ldrd	r0, [r4, #104]	; 0x68
   16b24:	adds	r0, r0, #1
   16b28:	adc	r1, r1, #0
   16b2c:	strd	r0, [r4, #104]	; 0x68
   16b30:	mov	r0, #12
   16b34:	bl	11f4c <malloc@plt>
   16b38:	ldr	r1, [r5, #4]
   16b3c:	mov	r7, r0
   16b40:	bl	14ee0 <init_node_int@@Base>
   16b44:	mov	r0, r5
   16b48:	bl	12b80 <free_token_int_value@@Base>
   16b4c:	mov	r0, #20
   16b50:	bl	11f4c <malloc@plt>
   16b54:	mov	r1, r6
   16b58:	mov	r2, r8
   16b5c:	mov	r3, r7
   16b60:	mov	r5, r0
   16b64:	bl	150a0 <init_node_boolean_operator@@Base>
   16b68:	ldrd	r0, [r4, #112]	; 0x70
   16b6c:	adds	r0, r0, #1
   16b70:	adc	r1, r1, #0
   16b74:	strd	r0, [r4, #112]	; 0x70
   16b78:	mov	r0, r5
   16b7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016b80 <read_boolean_unary_expression@@Base>:
   16b80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16b84:	add	fp, sp, #24
   16b88:	movw	r5, #56832	; 0xde00
   16b8c:	mov	r6, r0
   16b90:	movt	r5, #2
   16b94:	ldrd	r0, [r5]
   16b98:	adds	r0, r0, #1
   16b9c:	adc	r1, r1, #0
   16ba0:	strd	r0, [r5]
   16ba4:	mov	r0, #20
   16ba8:	bl	11f4c <malloc@plt>
   16bac:	mov	r4, r0
   16bb0:	ldr	r0, [r6]
   16bb4:	bl	133b0 <next@@Base>
   16bb8:	mov	r7, r0
   16bbc:	ldr	r0, [r0]
   16bc0:	mov	r1, #16
   16bc4:	mov	r2, r5
   16bc8:	cmp	r0, #12
   16bcc:	movwne	r1, #8
   16bd0:	ldr	r1, [r2, r1]!
   16bd4:	adds	r1, r1, #1
   16bd8:	str	r1, [r2]
   16bdc:	ldr	r1, [r2, #4]
   16be0:	adc	r1, r1, #0
   16be4:	cmp	r0, #12
   16be8:	str	r1, [r2, #4]
   16bec:	beq	16c04 <read_boolean_unary_expression@@Base+0x84>
   16bf0:	ldrd	r0, [r5, #24]
   16bf4:	adds	r0, r0, #1
   16bf8:	adc	r1, r1, #0
   16bfc:	strd	r0, [r5, #24]
   16c00:	b	16c68 <read_boolean_unary_expression@@Base+0xe8>
   16c04:	mov	r0, r7
   16c08:	bl	15914 <get_boolean_op_value@@Base>
   16c0c:	mov	r8, r0
   16c10:	mov	r0, r7
   16c14:	bl	12e20 <free_token_boolean_op@@Base>
   16c18:	ldr	r0, [r6]
   16c1c:	bl	133b0 <next@@Base>
   16c20:	mov	r6, r0
   16c24:	ldr	r0, [r0]
   16c28:	mov	r1, #40	; 0x28
   16c2c:	mov	r2, r5
   16c30:	cmp	r0, #1
   16c34:	movwne	r1, #32
   16c38:	ldr	r1, [r2, r1]!
   16c3c:	adds	r1, r1, #1
   16c40:	str	r1, [r2]
   16c44:	ldr	r1, [r2, #4]
   16c48:	adc	r1, r1, #0
   16c4c:	cmp	r0, #1
   16c50:	str	r1, [r2, #4]
   16c54:	beq	16c78 <read_boolean_unary_expression@@Base+0xf8>
   16c58:	ldrd	r0, [r5, #48]	; 0x30
   16c5c:	adds	r0, r0, #1
   16c60:	adc	r1, r1, #0
   16c64:	strd	r0, [r5, #48]	; 0x30
   16c68:	mov	r0, r4
   16c6c:	bl	15874 <free_node_boolean_operator@@Base>
   16c70:	mov	r4, #0
   16c74:	b	16cb8 <read_boolean_unary_expression@@Base+0x138>
   16c78:	ldrd	r0, [r5, #56]	; 0x38
   16c7c:	adds	r0, r0, #1
   16c80:	adc	r1, r1, #0
   16c84:	strd	r0, [r5, #56]	; 0x38
   16c88:	mov	r0, #12
   16c8c:	bl	11f4c <malloc@plt>
   16c90:	ldr	r1, [r6, #4]
   16c94:	mov	r7, r0
   16c98:	bl	14ee0 <init_node_int@@Base>
   16c9c:	mov	r0, r6
   16ca0:	bl	12b80 <free_token_int_value@@Base>
   16ca4:	mov	r0, r4
   16ca8:	mov	r1, r8
   16cac:	mov	r2, r7
   16cb0:	mov	r3, #0
   16cb4:	bl	150a0 <init_node_boolean_operator@@Base>
   16cb8:	ldrd	r0, [r5, #64]	; 0x40
   16cbc:	adds	r0, r0, #1
   16cc0:	adc	r1, r1, #0
   16cc4:	strd	r0, [r5, #64]	; 0x40
   16cc8:	mov	r0, r4
   16ccc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16cd0:	cmn	r0, #1
   16cd4:	ldrne	r0, [r1, r0, lsl #2]
   16cd8:	cmpne	r0, #0
   16cdc:	bne	16ce4 <read_boolean_unary_expression@@Base+0x164>
   16ce0:	bx	lr
   16ce4:	ldrd	r2, [r0]
   16ce8:	adds	r2, r2, #1
   16cec:	adc	r3, r3, #0
   16cf0:	strd	r2, [r0]
   16cf4:	bx	lr
   16cf8:	push	{r4, r5, fp, lr}
   16cfc:	sub	sp, sp, #8
   16d00:	movw	r4, #27576	; 0x6bb8
   16d04:	movw	r0, #48032	; 0xbba0
   16d08:	movw	r1, #44967	; 0xafa7
   16d0c:	movt	r4, #51930	; 0xcada
   16d10:	movt	r0, #1
   16d14:	movt	r1, #1
   16d18:	mov	r2, r4
   16d1c:	bl	17f68 <__generate_code_for_binary_boolean_expression@@Base+0x518>
   16d20:	movw	r1, #47951	; 0xbb4f
   16d24:	movw	r2, #28921	; 0x70f9
   16d28:	mov	r0, #0
   16d2c:	mov	r3, #0
   16d30:	str	r4, [sp]
   16d34:	movt	r1, #1
   16d38:	movt	r2, #25998	; 0x658e
   16d3c:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   16d40:	movw	r5, #56912	; 0xde50
   16d44:	mov	r0, #2
   16d48:	movt	r5, #2
   16d4c:	mov	r1, r5
   16d50:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   16d54:	movw	r1, #47964	; 0xbb5c
   16d58:	movw	r2, #23612	; 0x5c3c
   16d5c:	mov	r0, #1
   16d60:	mov	r3, #0
   16d64:	str	r4, [sp]
   16d68:	movt	r1, #1
   16d6c:	movt	r2, #45187	; 0xb083
   16d70:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   16d74:	add	r1, r5, #16
   16d78:	mov	r0, #2
   16d7c:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   16d80:	movw	r1, #47980	; 0xbb6c
   16d84:	movw	r2, #17474	; 0x4442
   16d88:	mov	r0, #2
   16d8c:	mov	r3, #0
   16d90:	str	r4, [sp]
   16d94:	movt	r1, #1
   16d98:	movt	r2, #7506	; 0x1d52
   16d9c:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   16da0:	add	r1, r5, #32
   16da4:	mov	r0, #2
   16da8:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   16dac:	movw	r1, #48128	; 0xbc00
   16db0:	movw	r2, #45287	; 0xb0e7
   16db4:	mov	r0, #3
   16db8:	mov	r3, #0
   16dbc:	str	r4, [sp]
   16dc0:	movt	r1, #1
   16dc4:	movt	r2, #16066	; 0x3ec2
   16dc8:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   16dcc:	movw	r1, #56144	; 0xdb50
   16dd0:	mov	r0, #15
   16dd4:	movt	r1, #2
   16dd8:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   16ddc:	movw	r1, #47990	; 0xbb76
   16de0:	movw	r2, #53414	; 0xd0a6
   16de4:	mov	r0, #4
   16de8:	mov	r3, #0
   16dec:	str	r4, [sp]
   16df0:	movt	r1, #1
   16df4:	movt	r2, #50009	; 0xc359
   16df8:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   16dfc:	movw	r1, #56272	; 0xdbd0
   16e00:	mov	r0, #20
   16e04:	movt	r1, #2
   16e08:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   16e0c:	movw	r1, #48160	; 0xbc20
   16e10:	movw	r2, #22695	; 0x58a7
   16e14:	mov	r0, #5
   16e18:	mov	r3, #0
   16e1c:	str	r4, [sp]
   16e20:	movt	r1, #1
   16e24:	movt	r2, #15548	; 0x3cbc
   16e28:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   16e2c:	movw	r1, #56432	; 0xdc70
   16e30:	mov	r0, #9
   16e34:	movt	r1, #2
   16e38:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   16e3c:	movw	r1, #48192	; 0xbc40
   16e40:	movw	r2, #45831	; 0xb307
   16e44:	mov	r0, #6
   16e48:	mov	r3, #0
   16e4c:	str	r4, [sp]
   16e50:	movt	r1, #1
   16e54:	movt	r2, #14394	; 0x383a
   16e58:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   16e5c:	movw	r1, #56512	; 0xdcc0
   16e60:	mov	r0, #10
   16e64:	movt	r1, #2
   16e68:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   16e6c:	movw	r1, #48224	; 0xbc60
   16e70:	movw	r2, #51825	; 0xca71
   16e74:	mov	r0, #7
   16e78:	mov	r3, #0
   16e7c:	str	r4, [sp]
   16e80:	movt	r1, #1
   16e84:	movt	r2, #25259	; 0x62ab
   16e88:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   16e8c:	movw	r1, #56592	; 0xdd10
   16e90:	mov	r0, #13
   16e94:	movt	r1, #2
   16e98:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   16e9c:	movw	r1, #48256	; 0xbc80
   16ea0:	movw	r2, #53843	; 0xd253
   16ea4:	mov	r0, #8
   16ea8:	mov	r3, #0
   16eac:	str	r4, [sp]
   16eb0:	movt	r1, #1
   16eb4:	movt	r2, #32347	; 0x7e5b
   16eb8:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   16ebc:	add	r1, r5, #48	; 0x30
   16ec0:	mov	r0, #8
   16ec4:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   16ec8:	movw	r1, #48288	; 0xbca0
   16ecc:	movw	r2, #3619	; 0xe23
   16ed0:	mov	r0, #9
   16ed4:	mov	r3, #0
   16ed8:	str	r4, [sp]
   16edc:	movt	r1, #1
   16ee0:	movt	r2, #35429	; 0x8a65
   16ee4:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   16ee8:	movw	r1, #56704	; 0xdd80
   16eec:	mov	r0, #15
   16ef0:	movt	r1, #2
   16ef4:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   16ef8:	movw	r1, #48320	; 0xbcc0
   16efc:	movw	r2, #19840	; 0x4d80
   16f00:	mov	r0, #10
   16f04:	mov	r3, #0
   16f08:	str	r4, [sp]
   16f0c:	movt	r1, #1
   16f10:	movt	r2, #45708	; 0xb28c
   16f14:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   16f18:	movw	r1, #56832	; 0xde00
   16f1c:	mov	r0, #9
   16f20:	movt	r1, #2
   16f24:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   16f28:	bl	196fc <__generate_code_for_binary_boolean_expression@@Base+0x1cac>
   16f2c:	add	sp, sp, #8
   16f30:	pop	{r4, r5, fp, lr}
   16f34:	b	1a468 <__generate_code_for_binary_boolean_expression@@Base+0x2a18>
   16f38:	push	{r4, r5, r6, r7, r8, lr}
   16f3c:	vpush	{d8-d9}
   16f40:	bl	16cf8 <read_boolean_unary_expression@@Base+0x178>
   16f44:	movw	r5, #56912	; 0xde50
   16f48:	vmov.i32	q4, #0	; 0x00000000
   16f4c:	mov	r4, #0
   16f50:	mov	r8, #116	; 0x74
   16f54:	mov	r6, #64	; 0x40
   16f58:	mov	r2, #160	; 0xa0
   16f5c:	movt	r5, #2
   16f60:	add	r0, r5, #16
   16f64:	mov	r7, r5
   16f68:	vst1.64	{d8-d9}, [r0 :128]
   16f6c:	add	r0, r5, #32
   16f70:	vst1.64	{d8-d9}, [r0 :128]
   16f74:	movw	r0, #56144	; 0xdb50
   16f78:	vst1.64	{d8-d9}, [r7 :128], r6
   16f7c:	movt	r0, #2
   16f80:	add	r1, r0, #96	; 0x60
   16f84:	str	r4, [r0, #112]	; 0x70
   16f88:	vst1.64	{d8-d9}, [r1 :128]
   16f8c:	add	r1, r0, #80	; 0x50
   16f90:	vst1.64	{d8-d9}, [r1 :128]
   16f94:	add	r1, r0, #64	; 0x40
   16f98:	vst1.64	{d8-d9}, [r1 :128]
   16f9c:	add	r1, r0, #48	; 0x30
   16fa0:	vst1.64	{d8-d9}, [r1 :128]
   16fa4:	add	r1, r0, #32
   16fa8:	vst1.64	{d8-d9}, [r1 :128]
   16fac:	add	r1, r0, #16
   16fb0:	vst1.64	{d8-d9}, [r0 :128], r8
   16fb4:	str	r4, [r0]
   16fb8:	movw	r0, #56272	; 0xdbd0
   16fbc:	vst1.64	{d8-d9}, [r1 :128]
   16fc0:	mov	r1, #0
   16fc4:	movt	r0, #2
   16fc8:	bl	11fe8 <memset@plt>
   16fcc:	movw	r1, #56592	; 0xdd10
   16fd0:	vst1.64	{d8-d9}, [r7 :128]
   16fd4:	movt	r1, #2
   16fd8:	add	r0, r1, #80	; 0x50
   16fdc:	str	r4, [r1, #96]	; 0x60
   16fe0:	vst1.64	{d8-d9}, [r0 :128]
   16fe4:	add	r0, r1, #64	; 0x40
   16fe8:	vst1.64	{d8-d9}, [r0 :128]
   16fec:	add	r0, r1, #48	; 0x30
   16ff0:	vst1.64	{d8-d9}, [r0 :128]
   16ff4:	add	r0, r1, #32
   16ff8:	vst1.64	{d8-d9}, [r0 :128]
   16ffc:	add	r0, r1, #16
   17000:	vst1.64	{d8-d9}, [r0 :128]
   17004:	movw	r0, #56512	; 0xdcc0
   17008:	movt	r0, #2
   1700c:	add	r2, r0, #48	; 0x30
   17010:	vst1.64	{d8-d9}, [r2 :128]
   17014:	add	r2, r0, #32
   17018:	vst1.64	{d8-d9}, [r2 :128]
   1701c:	add	r2, r0, #16
   17020:	vst1.64	{d8-d9}, [r0 :128], r6
   17024:	vst1.64	{d8-d9}, [r2 :128]
   17028:	movw	r2, #56432	; 0xdc70
   1702c:	vst1.64	{d8-d9}, [r0 :128]
   17030:	mov	r0, #68	; 0x44
   17034:	movt	r2, #2
   17038:	add	r3, r2, #48	; 0x30
   1703c:	str	r4, [r2, #64]	; 0x40
   17040:	vst1.64	{d8-d9}, [r3 :128]
   17044:	add	r3, r2, #32
   17048:	vst1.64	{d8-d9}, [r3 :128]
   1704c:	add	r3, r2, #16
   17050:	vst1.64	{d8-d9}, [r2 :128], r0
   17054:	str	r4, [r2]
   17058:	mov	r2, #100	; 0x64
   1705c:	vst1.64	{d8-d9}, [r3 :128]
   17060:	vst1.64	{d8-d9}, [r1 :128], r2
   17064:	str	r4, [r1]
   17068:	add	r1, r5, #96	; 0x60
   1706c:	vst1.64	{d8-d9}, [r1 :128]
   17070:	add	r1, r5, #80	; 0x50
   17074:	vst1.64	{d8-d9}, [r1 :128]
   17078:	add	r1, r5, #48	; 0x30
   1707c:	vst1.64	{d8-d9}, [r1 :128]
   17080:	movw	r1, #56704	; 0xdd80
   17084:	movt	r1, #2
   17088:	add	r2, r1, #96	; 0x60
   1708c:	str	r4, [r1, #112]	; 0x70
   17090:	vst1.64	{d8-d9}, [r2 :128]
   17094:	add	r2, r1, #80	; 0x50
   17098:	vst1.64	{d8-d9}, [r2 :128]
   1709c:	add	r2, r1, #64	; 0x40
   170a0:	vst1.64	{d8-d9}, [r2 :128]
   170a4:	add	r2, r1, #48	; 0x30
   170a8:	vst1.64	{d8-d9}, [r2 :128]
   170ac:	add	r2, r1, #32
   170b0:	vst1.64	{d8-d9}, [r2 :128]
   170b4:	add	r2, r1, #16
   170b8:	vst1.64	{d8-d9}, [r1 :128], r8
   170bc:	str	r4, [r1]
   170c0:	movw	r1, #56832	; 0xde00
   170c4:	vst1.64	{d8-d9}, [r2 :128]
   170c8:	movt	r1, #2
   170cc:	add	r2, r1, #48	; 0x30
   170d0:	str	r4, [r1, #64]	; 0x40
   170d4:	vst1.64	{d8-d9}, [r2 :128]
   170d8:	add	r2, r1, #32
   170dc:	vst1.64	{d8-d9}, [r2 :128]
   170e0:	add	r2, r1, #16
   170e4:	vst1.64	{d8-d9}, [r1 :128], r0
   170e8:	vst1.64	{d8-d9}, [r2 :128]
   170ec:	str	r4, [r1]
   170f0:	vpop	{d8-d9}
   170f4:	pop	{r4, r5, r6, r7, r8, pc}
   170f8:	movw	r0, #27896	; 0x6cf8
   170fc:	movw	r1, #28472	; 0x6f38
   17100:	movt	r0, #1
   17104:	movt	r1, #1
   17108:	b	1a918 <__gcov_flush@@Base+0xb4>
   1710c:	andeq	r0, r0, r0

00017110 <init_generator@@Base>:
   17110:	push	{r4, sl, fp, lr}
   17114:	add	fp, sp, #8
   17118:	mov	r4, r0
   1711c:	movw	r0, #57264	; 0xdfb0
   17120:	add	r3, pc, #56	; 0x38
   17124:	movt	r0, #2
   17128:	vld1.64	{d16-d17}, [r3 :128]
   1712c:	add	r0, r0, #16
   17130:	vld1.64	{d18-d19}, [r0 :128]
   17134:	vadd.i64	q8, q9, q8
   17138:	vst1.64	{d16-d17}, [r0 :128]
   1713c:	str	r1, [r4]
   17140:	movw	r1, #48350	; 0xbcde
   17144:	mov	r0, r2
   17148:	movt	r1, #1
   1714c:	bl	11ebc <fopen@plt>
   17150:	mov	r1, #0
   17154:	stmib	r4, {r0, r1}
   17158:	str	r1, [r4, #12]
   1715c:	pop	{r4, sl, fp, pc}
   17160:	andeq	r0, r0, r1
   17164:	andeq	r0, r0, r0
   17168:	andeq	r0, r0, r1
   1716c:	andeq	r0, r0, r0

00017170 <destroy_generator@@Base>:
   17170:	movw	r1, #57264	; 0xdfb0
   17174:	add	r2, pc, #36	; 0x24
   17178:	movt	r1, #2
   1717c:	vld1.64	{d16-d17}, [r2 :128]
   17180:	add	r1, r1, #32
   17184:	vld1.64	{d18-d19}, [r1 :128]
   17188:	vadd.i64	q8, q9, q8
   1718c:	vst1.64	{d16-d17}, [r1 :128]
   17190:	ldr	r0, [r0, #4]
   17194:	b	1200c <fclose@plt>
   17198:	nop	{0}
   1719c:	nop	{0}
   171a0:	andeq	r0, r0, r1
   171a4:	andeq	r0, r0, r0
   171a8:	andeq	r0, r0, r1
   171ac:	andeq	r0, r0, r0

000171b0 <generate_code@@Base>:
   171b0:	push	{r4, r5, r6, sl, fp, lr}
   171b4:	add	fp, sp, #16
   171b8:	vpush	{d8-d9}
   171bc:	movw	r6, #57264	; 0xdfb0
   171c0:	add	r1, pc, #104	; 0x68
   171c4:	mov	r4, r0
   171c8:	movt	r6, #2
   171cc:	vld1.64	{d8-d9}, [r1 :128]
   171d0:	add	r0, r6, #48	; 0x30
   171d4:	vld1.64	{d16-d17}, [r0 :128]
   171d8:	vadd.i64	q8, q8, q4
   171dc:	vst1.64	{d16-d17}, [r0 :128]
   171e0:	ldr	r0, [r4]
   171e4:	bl	15f20 <build_ast@@Base>
   171e8:	mov	r5, r0
   171ec:	add	r0, r6, #64	; 0x40
   171f0:	mov	r1, #21
   171f4:	mov	r2, #1
   171f8:	vld1.64	{d16-d17}, [r0 :128]
   171fc:	vadd.i64	q8, q8, q4
   17200:	vst1.64	{d16-d17}, [r0 :128]
   17204:	movw	r0, #48352	; 0xbce0
   17208:	ldr	r3, [r4, #4]
   1720c:	movt	r0, #1
   17210:	bl	11f28 <fwrite@plt>
   17214:	mov	r0, r4
   17218:	mov	r1, r5
   1721c:	bl	172b0 <__generate_code_for_main@@Base>
   17220:	mov	r0, r5
   17224:	vpop	{d8-d9}
   17228:	pop	{r4, r5, r6, sl, fp, lr}
   1722c:	b	15110 <free_node@@Base>
   17230:	andeq	r0, r0, r1
   17234:	andeq	r0, r0, r0
   17238:	andeq	r0, r0, r1
   1723c:	andeq	r0, r0, r0

00017240 <__generate_code@@Base>:
   17240:	push	{r4, r5, fp, lr}
   17244:	add	fp, sp, #8
   17248:	mov	r5, r0
   1724c:	movw	r0, #57264	; 0xdfb0
   17250:	mov	r4, r1
   17254:	add	r1, pc, #68	; 0x44
   17258:	mov	r2, #1
   1725c:	movt	r0, #2
   17260:	vld1.64	{d16-d17}, [r1 :128]
   17264:	mov	r1, #21
   17268:	add	r0, r0, #64	; 0x40
   1726c:	vld1.64	{d18-d19}, [r0 :128]
   17270:	vadd.i64	q8, q9, q8
   17274:	vst1.64	{d16-d17}, [r0 :128]
   17278:	movw	r0, #48352	; 0xbce0
   1727c:	ldr	r3, [r5, #4]
   17280:	movt	r0, #1
   17284:	bl	11f28 <fwrite@plt>
   17288:	mov	r0, r5
   1728c:	mov	r1, r4
   17290:	pop	{r4, r5, fp, lr}
   17294:	b	172b0 <__generate_code_for_main@@Base>
   17298:	nop	{0}
   1729c:	nop	{0}
   172a0:	andeq	r0, r0, r1
   172a4:	andeq	r0, r0, r0
   172a8:	andeq	r0, r0, r1
   172ac:	andeq	r0, r0, r0

000172b0 <__generate_code_for_main@@Base>:
   172b0:	push	{r4, r5, fp, lr}
   172b4:	add	fp, sp, #8
   172b8:	mov	r4, r0
   172bc:	movw	r0, #57376	; 0xe020
   172c0:	mov	r5, r1
   172c4:	movt	r0, #2
   172c8:	ldrd	r2, [r0]
   172cc:	adds	r2, r2, #1
   172d0:	adc	r3, r3, #0
   172d4:	strd	r2, [r0]
   172d8:	mov	r2, #16
   172dc:	mov	r3, r0
   172e0:	ldr	r1, [r1]
   172e4:	cmp	r1, #2
   172e8:	movweq	r2, #8
   172ec:	ldr	r2, [r3, r2]!
   172f0:	adds	r2, r2, #1
   172f4:	str	r2, [r3]
   172f8:	ldr	r2, [r3, #4]
   172fc:	adc	r2, r2, #0
   17300:	cmp	r1, #2
   17304:	str	r2, [r3, #4]
   17308:	bne	17360 <__generate_code_for_main@@Base+0xb0>
   1730c:	movw	r1, #57264	; 0xdfb0
   17310:	add	r2, pc, #120	; 0x78
   17314:	movt	r1, #2
   17318:	vld1.64	{d16-d17}, [r2 :128]
   1731c:	ldrd	r2, [r0, #24]
   17320:	add	r1, r1, #80	; 0x50
   17324:	vld1.64	{d18-d19}, [r1 :128]
   17328:	adds	r2, r2, #1
   1732c:	adc	r3, r3, #0
   17330:	vadd.i64	q8, q9, q8
   17334:	strd	r2, [r0, #24]
   17338:	vst1.64	{d16-d17}, [r1 :128]
   1733c:	movw	r1, #48421	; 0xbd25
   17340:	ldr	r2, [r5, #8]
   17344:	ldr	r0, [r4, #4]
   17348:	movt	r1, #1
   1734c:	bl	11fb8 <fprintf@plt>
   17350:	ldr	r1, [r5, #12]
   17354:	mov	r0, r4
   17358:	pop	{r4, r5, fp, lr}
   1735c:	b	17410 <__generate_code_for_body@@Base>
   17360:	movw	r0, #53480	; 0xd0e8
   17364:	mov	r1, #46	; 0x2e
   17368:	mov	r2, #1
   1736c:	movt	r0, #2
   17370:	ldr	r3, [r0]
   17374:	movw	r0, #48374	; 0xbcf6
   17378:	movt	r0, #1
   1737c:	bl	11f28 <fwrite@plt>
   17380:	mov	r0, #1
   17384:	bl	11f88 <exit@plt>
   17388:	nop	{0}
   1738c:	nop	{0}
   17390:	andeq	r0, r0, r1
   17394:	andeq	r0, r0, r0
   17398:	andeq	r0, r0, r1
   1739c:	andeq	r0, r0, r0

000173a0 <__generate_code_for_function@@Base>:
   173a0:	push	{r4, r5, fp, lr}
   173a4:	add	fp, sp, #8
   173a8:	mov	r5, r0
   173ac:	movw	r0, #57264	; 0xdfb0
   173b0:	mov	r4, r1
   173b4:	add	r1, pc, #68	; 0x44
   173b8:	movt	r0, #2
   173bc:	vld1.64	{d16-d17}, [r1 :128]
   173c0:	movw	r1, #48421	; 0xbd25
   173c4:	add	r0, r0, #80	; 0x50
   173c8:	movt	r1, #1
   173cc:	vld1.64	{d18-d19}, [r0 :128]
   173d0:	vadd.i64	q8, q9, q8
   173d4:	vst1.64	{d16-d17}, [r0 :128]
   173d8:	ldr	r2, [r4, #8]
   173dc:	ldr	r0, [r5, #4]
   173e0:	bl	11fb8 <fprintf@plt>
   173e4:	ldr	r1, [r4, #12]
   173e8:	mov	r0, r5
   173ec:	pop	{r4, r5, fp, lr}
   173f0:	b	17410 <__generate_code_for_body@@Base>
   173f4:	nop	{0}
   173f8:	nop	{0}
   173fc:	nop	{0}
   17400:	andeq	r0, r0, r1
   17404:	andeq	r0, r0, r0
   17408:	andeq	r0, r0, r1
   1740c:	andeq	r0, r0, r0

00017410 <__generate_code_for_body@@Base>:
   17410:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17414:	add	fp, sp, #24
   17418:	movw	r5, #57024	; 0xdec0
   1741c:	mov	r4, r0
   17420:	add	r0, pc, #328	; 0x148
   17424:	cmp	r1, #0
   17428:	mov	r6, r1
   1742c:	movt	r5, #2
   17430:	vld1.64	{d16-d17}, [r0 :128]
   17434:	mov	r0, #24
   17438:	vld1.64	{d18-d19}, [r5 :128]
   1743c:	movwne	r0, #16
   17440:	mov	r1, r5
   17444:	vadd.i64	q8, q9, q8
   17448:	vst1.64	{d16-d17}, [r1 :128], r0
   1744c:	ldm	r1, {r0, r3}
   17450:	adds	r0, r0, #1
   17454:	adc	r3, r3, #0
   17458:	cmp	r6, #0
   1745c:	stm	r1, {r0, r3}
   17460:	beq	17520 <__generate_code_for_body@@Base+0x110>
   17464:	movw	r0, #48768	; 0xbe80
   17468:	movt	r0, #1
   1746c:	add	r8, r0, #8
   17470:	add	r9, r0, #4
   17474:	ldm	r6, {r0, r7}
   17478:	cmp	r0, #4
   1747c:	beq	174b4 <__generate_code_for_body@@Base+0xa4>
   17480:	cmp	r0, #3
   17484:	bne	17534 <__generate_code_for_body@@Base+0x124>
   17488:	mov	r0, #0
   1748c:	mov	r1, r9
   17490:	bl	17da0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   17494:	ldrd	r0, [r5, #56]	; 0x38
   17498:	adds	r0, r0, #1
   1749c:	adc	r1, r1, #0
   174a0:	strd	r0, [r5, #56]	; 0x38
   174a4:	mov	r0, r4
   174a8:	mov	r1, r6
   174ac:	bl	177a0 <__generate_code_for_return@@Base>
   174b0:	b	174dc <__generate_code_for_body@@Base+0xcc>
   174b4:	mov	r0, #0
   174b8:	mov	r1, r8
   174bc:	bl	17da0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   174c0:	ldrd	r0, [r5, #64]	; 0x40
   174c4:	adds	r0, r0, #1
   174c8:	adc	r1, r1, #0
   174cc:	strd	r0, [r5, #64]	; 0x40
   174d0:	mov	r0, r4
   174d4:	mov	r1, r6
   174d8:	bl	17580 <__generate_code_for_if@@Base>
   174dc:	ldrd	r0, [r5, #72]	; 0x48
   174e0:	mov	r6, r7
   174e4:	adds	r0, r0, #1
   174e8:	adc	r1, r1, #0
   174ec:	cmp	r7, #0
   174f0:	strd	r0, [r5, #72]	; 0x48
   174f4:	mov	r0, #24
   174f8:	mov	r1, r5
   174fc:	movwne	r0, #16
   17500:	ldr	r0, [r1, r0]!
   17504:	adds	r0, r0, #1
   17508:	str	r0, [r1]
   1750c:	ldr	r0, [r1, #4]
   17510:	adc	r0, r0, #0
   17514:	cmp	r7, #0
   17518:	str	r0, [r1, #4]
   1751c:	bne	17474 <__generate_code_for_body@@Base+0x64>
   17520:	ldrd	r0, [r5, #80]	; 0x50
   17524:	adds	r0, r0, #1
   17528:	adc	r1, r1, #0
   1752c:	strd	r0, [r5, #80]	; 0x50
   17530:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17534:	movw	r1, #48768	; 0xbe80
   17538:	mov	r0, #0
   1753c:	movt	r1, #1
   17540:	bl	17da0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   17544:	movw	r0, #53480	; 0xd0e8
   17548:	mov	r1, #52	; 0x34
   1754c:	mov	r2, #1
   17550:	movt	r0, #2
   17554:	ldr	r3, [r0]
   17558:	movw	r0, #48683	; 0xbe2b
   1755c:	movt	r0, #1
   17560:	bl	11f28 <fwrite@plt>
   17564:	mov	r0, #1
   17568:	bl	11f88 <exit@plt>
   1756c:	nop	{0}
   17570:	andeq	r0, r0, r1
   17574:	andeq	r0, r0, r0
   17578:	andeq	r0, r0, r1
   1757c:	andeq	r0, r0, r0

00017580 <__generate_code_for_if@@Base>:
   17580:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17584:	add	fp, sp, #24
   17588:	movw	r6, #57472	; 0xe080
   1758c:	mov	r5, r1
   17590:	mov	r4, r0
   17594:	movt	r6, #2
   17598:	ldrd	r0, [r6]
   1759c:	adds	r0, r0, #1
   175a0:	adc	r1, r1, #0
   175a4:	strd	r0, [r6]
   175a8:	ldr	r8, [r4, #8]
   175ac:	ldr	r7, [r4, #12]
   175b0:	adds	r0, r8, #1
   175b4:	adc	r1, r7, #0
   175b8:	strd	r0, [r4, #8]
   175bc:	mov	r0, r6
   175c0:	ldr	r2, [r0, #48]!	; 0x30
   175c4:	ldr	r1, [r5, #8]
   175c8:	adds	r2, r2, #1
   175cc:	str	r2, [r0]
   175d0:	ldr	r2, [r0, #4]
   175d4:	adc	r2, r2, #0
   175d8:	str	r2, [r0, #4]
   175dc:	ldr	r2, [r1, #16]
   175e0:	cmp	r2, #8
   175e4:	mov	r3, r2
   175e8:	movwne	r3, #16
   175ec:	ldr	r3, [r0, r3]!
   175f0:	adds	r3, r3, #1
   175f4:	str	r3, [r0]
   175f8:	ldr	r3, [r0, #4]
   175fc:	adc	r3, r3, #0
   17600:	cmp	r2, #8
   17604:	str	r3, [r0, #4]
   17608:	bne	17638 <__generate_code_for_if@@Base+0xb8>
   1760c:	ldr	r0, [r6, #72]	; 0x48
   17610:	ldr	r3, [r6, #76]	; 0x4c
   17614:	mov	r2, r8
   17618:	adds	r0, r0, #1
   1761c:	adc	r3, r3, #0
   17620:	str	r0, [r6, #72]	; 0x48
   17624:	mov	r0, r4
   17628:	str	r3, [r6, #76]	; 0x4c
   1762c:	mov	r3, r7
   17630:	bl	17910 <__generate_code_for_unary_boolean_expression@@Base>
   17634:	b	17660 <__generate_code_for_if@@Base+0xe0>
   17638:	ldr	r0, [r6, #80]	; 0x50
   1763c:	ldr	r3, [r6, #84]	; 0x54
   17640:	mov	r2, r8
   17644:	adds	r0, r0, #1
   17648:	adc	r3, r3, #0
   1764c:	str	r0, [r6, #80]	; 0x50
   17650:	mov	r0, r4
   17654:	str	r3, [r6, #84]	; 0x54
   17658:	mov	r3, r7
   1765c:	bl	17a50 <__generate_code_for_binary_boolean_expression@@Base>
   17660:	ldrd	r0, [r6, #88]	; 0x58
   17664:	adds	r0, r0, #1
   17668:	adc	r1, r1, #0
   1766c:	strd	r0, [r6, #88]	; 0x58
   17670:	mov	r0, r4
   17674:	ldr	r1, [r5, #12]
   17678:	bl	17410 <__generate_code_for_body@@Base>
   1767c:	ldr	r0, [r4, #4]
   17680:	movw	r1, #48426	; 0xbd2a
   17684:	mov	r2, r8
   17688:	mov	r3, r7
   1768c:	movt	r1, #1
   17690:	bl	11fb8 <fprintf@plt>
   17694:	ldr	r1, [r5, #16]
   17698:	mov	r0, #16
   1769c:	mov	r2, r6
   176a0:	cmp	r1, #0
   176a4:	movwne	r0, #8
   176a8:	ldr	r0, [r2, r0]!
   176ac:	adds	r0, r0, #1
   176b0:	str	r0, [r2]
   176b4:	ldr	r0, [r2, #4]
   176b8:	adc	r0, r0, #0
   176bc:	cmp	r1, #0
   176c0:	str	r0, [r2, #4]
   176c4:	beq	176e8 <__generate_code_for_if@@Base+0x168>
   176c8:	ldr	r0, [r6, #24]
   176cc:	ldr	r3, [r6, #28]
   176d0:	adds	r0, r0, #1
   176d4:	str	r0, [r6, #24]
   176d8:	adc	r3, r3, #0
   176dc:	mov	r0, r4
   176e0:	str	r3, [r6, #28]
   176e4:	bl	17410 <__generate_code_for_body@@Base>
   176e8:	ldrd	r0, [r6, #32]
   176ec:	adds	r0, r0, #1
   176f0:	adc	r1, r1, #0
   176f4:	strd	r0, [r6, #32]
   176f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000176fc <__generate_code_for_if_expression@@Base>:
   176fc:	push	{r4, r5, r6, r7, fp, lr}
   17700:	add	fp, sp, #16
   17704:	movw	r7, #57472	; 0xe080
   17708:	movt	r7, #2
   1770c:	mov	r4, r7
   17710:	ldr	r5, [r4, #48]!	; 0x30
   17714:	adds	r5, r5, #1
   17718:	str	r5, [r4]
   1771c:	ldr	r5, [r4, #4]
   17720:	adc	r5, r5, #0
   17724:	str	r5, [r4, #4]
   17728:	ldr	r6, [r1, #16]
   1772c:	cmp	r6, #8
   17730:	mov	r5, r6
   17734:	movwne	r5, #16
   17738:	ldr	r5, [r4, r5]!
   1773c:	adds	r5, r5, #1
   17740:	str	r5, [r4]
   17744:	ldr	r5, [r4, #4]
   17748:	adc	r5, r5, #0
   1774c:	cmp	r6, #8
   17750:	str	r5, [r4, #4]
   17754:	bne	17770 <__generate_code_for_if_expression@@Base+0x74>
   17758:	ldrd	r4, [r7, #72]	; 0x48
   1775c:	adds	r4, r4, #1
   17760:	adc	r5, r5, #0
   17764:	strd	r4, [r7, #72]	; 0x48
   17768:	bl	17910 <__generate_code_for_unary_boolean_expression@@Base>
   1776c:	b	17784 <__generate_code_for_if_expression@@Base+0x88>
   17770:	ldrd	r4, [r7, #80]	; 0x50
   17774:	adds	r4, r4, #1
   17778:	adc	r5, r5, #0
   1777c:	strd	r4, [r7, #80]	; 0x50
   17780:	bl	17a50 <__generate_code_for_binary_boolean_expression@@Base>
   17784:	ldrd	r0, [r7, #88]	; 0x58
   17788:	adds	r0, r0, #1
   1778c:	adc	r1, r1, #0
   17790:	strd	r0, [r7, #88]	; 0x58
   17794:	pop	{r4, r5, r6, r7, fp, pc}
   17798:	nop	{0}
   1779c:	nop	{0}

000177a0 <__generate_code_for_return@@Base>:
   177a0:	push	{r4, r5, r6, r7, fp, lr}
   177a4:	add	fp, sp, #16
   177a8:	movw	r5, #57376	; 0xe020
   177ac:	mov	r4, r0
   177b0:	mov	r2, #1
   177b4:	movt	r5, #2
   177b8:	mov	r7, r5
   177bc:	ldr	r0, [r7, #32]!
   177c0:	adds	r0, r0, #1
   177c4:	str	r0, [r7]
   177c8:	ldr	r0, [r7, #4]
   177cc:	adc	r0, r0, #0
   177d0:	str	r0, [r7, #4]
   177d4:	movw	r0, #48441	; 0xbd39
   177d8:	ldr	r3, [r4, #4]
   177dc:	ldr	r6, [r1, #8]
   177e0:	movt	r0, #1
   177e4:	mov	r1, #9
   177e8:	bl	11f28 <fwrite@plt>
   177ec:	ldr	r0, [r6]
   177f0:	mov	r1, #16
   177f4:	cmp	r0, #1
   177f8:	movweq	r1, #8
   177fc:	ldr	r1, [r7, r1]!
   17800:	adds	r1, r1, #1
   17804:	str	r1, [r7]
   17808:	ldr	r1, [r7, #4]
   1780c:	adc	r1, r1, #0
   17810:	cmp	r0, #1
   17814:	str	r1, [r7, #4]
   17818:	bne	1787c <__generate_code_for_return@@Base+0xdc>
   1781c:	movw	r0, #57264	; 0xdfb0
   17820:	add	r1, pc, #136	; 0x88
   17824:	ldrd	r2, [r5, #56]	; 0x38
   17828:	movt	r0, #2
   1782c:	vld1.64	{d16-d17}, [r1 :128]
   17830:	movw	r1, #48498	; 0xbd72
   17834:	add	r0, r0, #96	; 0x60
   17838:	movt	r1, #1
   1783c:	vld1.64	{d18-d19}, [r0 :128]
   17840:	adds	r2, r2, #1
   17844:	adc	r3, r3, #0
   17848:	strd	r2, [r5, #56]	; 0x38
   1784c:	vadd.i64	q8, q9, q8
   17850:	vst1.64	{d16-d17}, [r0 :128]
   17854:	ldr	r2, [r6, #8]
   17858:	ldr	r0, [r4, #4]
   1785c:	bl	11fb8 <fprintf@plt>
   17860:	ldr	r3, [r4, #4]
   17864:	movw	r0, #48489	; 0xbd69
   17868:	mov	r1, #8
   1786c:	mov	r2, #1
   17870:	movt	r0, #1
   17874:	pop	{r4, r5, r6, r7, fp, lr}
   17878:	b	11f28 <fwrite@plt>
   1787c:	movw	r0, #53480	; 0xd0e8
   17880:	mov	r1, #37	; 0x25
   17884:	mov	r2, #1
   17888:	movt	r0, #2
   1788c:	ldr	r3, [r0]
   17890:	movw	r0, #48451	; 0xbd43
   17894:	movt	r0, #1
   17898:	bl	11f28 <fwrite@plt>
   1789c:	mov	r0, #1
   178a0:	bl	11f88 <exit@plt>
   178a4:	nop	{0}
   178a8:	nop	{0}
   178ac:	nop	{0}
   178b0:	andeq	r0, r0, r1
   178b4:	andeq	r0, r0, r0
   178b8:	andeq	r0, r0, r1
   178bc:	andeq	r0, r0, r0

000178c0 <__generate_code_for_int@@Base>:
   178c0:	movw	r2, #57264	; 0xdfb0
   178c4:	add	r3, pc, #52	; 0x34
   178c8:	movt	r2, #2
   178cc:	vld1.64	{d16-d17}, [r3 :128]
   178d0:	add	r2, r2, #96	; 0x60
   178d4:	vld1.64	{d18-d19}, [r2 :128]
   178d8:	vadd.i64	q8, q9, q8
   178dc:	vst1.64	{d16-d17}, [r2 :128]
   178e0:	ldr	r2, [r1, #8]
   178e4:	ldr	r0, [r0, #4]
   178e8:	movw	r1, #48498	; 0xbd72
   178ec:	movt	r1, #1
   178f0:	b	11fb8 <fprintf@plt>
   178f4:	nop	{0}
   178f8:	nop	{0}
   178fc:	nop	{0}
   17900:	andeq	r0, r0, r1
   17904:	andeq	r0, r0, r0
   17908:	andeq	r0, r0, r1
   1790c:	andeq	r0, r0, r0

00017910 <__generate_code_for_unary_boolean_expression@@Base>:
   17910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17914:	add	fp, sp, #28
   17918:	sub	sp, sp, #4
   1791c:	movw	sl, #57376	; 0xe020
   17920:	mov	r6, r0
   17924:	mov	r8, r3
   17928:	mov	r9, r2
   1792c:	mov	r7, r1
   17930:	mov	r2, #1
   17934:	movt	sl, #2
   17938:	mov	r4, sl
   1793c:	ldr	r0, [r4, #64]!	; 0x40
   17940:	adds	r0, r0, #1
   17944:	str	r0, [r4]
   17948:	ldr	r0, [r4, #4]
   1794c:	adc	r0, r0, #0
   17950:	str	r0, [r4, #4]
   17954:	movw	r0, #48671	; 0xbe1f
   17958:	ldr	r3, [r6, #4]
   1795c:	ldr	r5, [r1, #8]
   17960:	movt	r0, #1
   17964:	mov	r1, #11
   17968:	bl	11f28 <fwrite@plt>
   1796c:	ldr	r3, [r6, #4]
   17970:	movw	r0, #48502	; 0xbd76
   17974:	mov	r1, #9
   17978:	mov	r2, #1
   1797c:	movt	r0, #1
   17980:	bl	11f28 <fwrite@plt>
   17984:	movw	r0, #57264	; 0xdfb0
   17988:	add	r1, pc, #176	; 0xb0
   1798c:	movt	r0, #2
   17990:	vld1.64	{d16-d17}, [r1 :128]
   17994:	movw	r1, #48498	; 0xbd72
   17998:	add	r0, r0, #96	; 0x60
   1799c:	movt	r1, #1
   179a0:	vld1.64	{d18-d19}, [r0 :128]
   179a4:	vadd.i64	q8, q9, q8
   179a8:	vst1.64	{d16-d17}, [r0 :128]
   179ac:	ldr	r2, [r5, #8]
   179b0:	ldr	r0, [r6, #4]
   179b4:	bl	11fb8 <fprintf@plt>
   179b8:	ldr	r0, [r7, #16]
   179bc:	cmp	r0, #8
   179c0:	mov	r1, r0
   179c4:	movwne	r1, #16
   179c8:	ldr	r1, [r4, r1]!
   179cc:	adds	r1, r1, #1
   179d0:	str	r1, [r4]
   179d4:	ldr	r1, [r4, #4]
   179d8:	adc	r1, r1, #0
   179dc:	cmp	r0, #8
   179e0:	str	r1, [r4, #4]
   179e4:	bne	17a18 <__generate_code_for_unary_boolean_expression@@Base+0x108>
   179e8:	ldrd	r0, [sl, #88]	; 0x58
   179ec:	mov	r2, r9
   179f0:	mov	r3, r8
   179f4:	adds	r0, r0, #1
   179f8:	adc	r1, r1, #0
   179fc:	strd	r0, [sl, #88]	; 0x58
   17a00:	movw	r1, #48544	; 0xbda0
   17a04:	ldr	r0, [r6, #4]
   17a08:	movt	r1, #1
   17a0c:	sub	sp, fp, #28
   17a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a14:	b	11fb8 <fprintf@plt>
   17a18:	movw	r0, #53480	; 0xd0e8
   17a1c:	mov	r1, #31
   17a20:	mov	r2, #1
   17a24:	movt	r0, #2
   17a28:	ldr	r3, [r0]
   17a2c:	movw	r0, #48639	; 0xbdff
   17a30:	movt	r0, #1
   17a34:	bl	11f28 <fwrite@plt>
   17a38:	mov	r0, #1
   17a3c:	bl	11f88 <exit@plt>
   17a40:	andeq	r0, r0, r1
   17a44:	andeq	r0, r0, r0
   17a48:	andeq	r0, r0, r1
   17a4c:	andeq	r0, r0, r0

00017a50 <__generate_code_for_binary_boolean_expression@@Base>:
   17a50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a54:	add	fp, sp, #28
   17a58:	sub	sp, sp, #4
   17a5c:	vpush	{d8-d9}
   17a60:	push	{r2, r3}
   17a64:	movw	r5, #57120	; 0xdf20
   17a68:	mov	r7, r1
   17a6c:	mov	r6, r0
   17a70:	movw	sl, #57264	; 0xdfb0
   17a74:	mov	r8, #1
   17a78:	mov	r2, #1
   17a7c:	movt	r5, #2
   17a80:	movt	sl, #2
   17a84:	ldrd	r0, [r5]
   17a88:	strb	r8, [sl], #96	; 0x60
   17a8c:	adds	r0, r0, #1
   17a90:	adc	r1, r1, #0
   17a94:	strd	r0, [r5]
   17a98:	movw	r0, #48441	; 0xbd39
   17a9c:	mov	r1, #9
   17aa0:	ldr	r3, [r6, #4]
   17aa4:	ldr	r4, [r7, #8]
   17aa8:	ldr	r9, [r7, #12]
   17aac:	movt	r0, #1
   17ab0:	bl	11f28 <fwrite@plt>
   17ab4:	add	r0, pc, #724	; 0x2d4
   17ab8:	vld1.64	{d16-d17}, [sl :128]
   17abc:	vld1.64	{d8-d9}, [r0 :128]
   17ac0:	vadd.i64	q8, q8, q4
   17ac4:	vst1.64	{d16-d17}, [sl :128]
   17ac8:	ldr	r2, [r4, #8]
   17acc:	ldr	r0, [r6, #4]
   17ad0:	movw	r4, #48498	; 0xbd72
   17ad4:	movt	r4, #1
   17ad8:	mov	r1, r4
   17adc:	bl	11fb8 <fprintf@plt>
   17ae0:	ldr	r1, [r6, #4]
   17ae4:	mov	r0, #10
   17ae8:	bl	12048 <fputc@plt>
   17aec:	ldr	r3, [r6, #4]
   17af0:	movw	r0, #48502	; 0xbd76
   17af4:	mov	r1, #9
   17af8:	mov	r2, #1
   17afc:	movt	r0, #1
   17b00:	bl	11f28 <fwrite@plt>
   17b04:	vld1.64	{d16-d17}, [sl :128]
   17b08:	mov	r1, r4
   17b0c:	vadd.i64	q8, q8, q4
   17b10:	vst1.64	{d16-d17}, [sl :128]
   17b14:	ldr	r2, [r9, #8]
   17b18:	ldr	r0, [r6, #4]
   17b1c:	bl	11fb8 <fprintf@plt>
   17b20:	ldr	r1, [r6, #4]
   17b24:	mov	r0, #10
   17b28:	bl	12048 <fputc@plt>
   17b2c:	ldr	r3, [r6, #4]
   17b30:	movw	r0, #48512	; 0xbd80
   17b34:	mov	r1, #12
   17b38:	mov	r2, #1
   17b3c:	movt	r0, #1
   17b40:	bl	11f28 <fwrite@plt>
   17b44:	ldr	r0, [r7, #16]
   17b48:	cmp	r0, #7
   17b4c:	bhi	17d44 <__generate_code_for_binary_boolean_expression@@Base+0x2f4>
   17b50:	movw	r4, #57264	; 0xdfb0
   17b54:	add	r1, pc, #4
   17b58:	movt	r4, #2
   17b5c:	ldr	pc, [r1, r0, lsl #2]
   17b60:	andeq	r7, r1, r0, lsl #23
   17b64:	andeq	r7, r1, r0, lsl #24
   17b68:	andeq	r7, r1, r0, asr #23
   17b6c:	andeq	r7, r1, r0, lsl #25
   17b70:	andeq	r7, r1, r4, lsl #26
   17b74:	andeq	r7, r1, r4, lsl #26
   17b78:	andeq	r7, r1, r0, asr #25
   17b7c:	andeq	r7, r1, r0, asr #24
   17b80:	ldrb	r0, [r4]
   17b84:	mov	r1, #1
   17b88:	bic	r0, r1, r0
   17b8c:	movw	r1, #48784	; 0xbe90
   17b90:	movt	r1, #1
   17b94:	rsb	r0, r0, #0
   17b98:	add	r1, r1, #4
   17b9c:	bl	17da0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   17ba0:	ldrd	r0, [r5, #80]	; 0x50
   17ba4:	adds	r0, r0, #1
   17ba8:	adc	r1, r1, #0
   17bac:	strd	r0, [r5, #80]	; 0x50
   17bb0:	movw	r1, #48525	; 0xbd8d
   17bb4:	ldr	r0, [r6, #4]
   17bb8:	movt	r1, #1
   17bbc:	b	17cfc <__generate_code_for_binary_boolean_expression@@Base+0x2ac>
   17bc0:	ldrb	r0, [r4]
   17bc4:	mov	r1, #1
   17bc8:	bic	r0, r1, r0
   17bcc:	movw	r1, #48784	; 0xbe90
   17bd0:	movt	r1, #1
   17bd4:	rsb	r0, r0, #0
   17bd8:	add	r1, r1, #12
   17bdc:	bl	17da0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   17be0:	ldrd	r0, [r5, #96]	; 0x60
   17be4:	adds	r0, r0, #1
   17be8:	adc	r1, r1, #0
   17bec:	strd	r0, [r5, #96]	; 0x60
   17bf0:	movw	r1, #48563	; 0xbdb3
   17bf4:	ldr	r0, [r6, #4]
   17bf8:	movt	r1, #1
   17bfc:	b	17cfc <__generate_code_for_binary_boolean_expression@@Base+0x2ac>
   17c00:	ldrb	r0, [r4]
   17c04:	mov	r1, #1
   17c08:	bic	r0, r1, r0
   17c0c:	movw	r1, #48784	; 0xbe90
   17c10:	movt	r1, #1
   17c14:	rsb	r0, r0, #0
   17c18:	add	r1, r1, #8
   17c1c:	bl	17da0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   17c20:	ldrd	r0, [r5, #88]	; 0x58
   17c24:	adds	r0, r0, #1
   17c28:	adc	r1, r1, #0
   17c2c:	strd	r0, [r5, #88]	; 0x58
   17c30:	movw	r1, #48544	; 0xbda0
   17c34:	ldr	r0, [r6, #4]
   17c38:	movt	r1, #1
   17c3c:	b	17cfc <__generate_code_for_binary_boolean_expression@@Base+0x2ac>
   17c40:	ldrb	r0, [r4]
   17c44:	mov	r1, #1
   17c48:	bic	r0, r1, r0
   17c4c:	movw	r1, #48784	; 0xbe90
   17c50:	movt	r1, #1
   17c54:	rsb	r0, r0, #0
   17c58:	add	r1, r1, #28
   17c5c:	bl	17da0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   17c60:	ldrd	r0, [r5, #120]	; 0x78
   17c64:	adds	r0, r0, #1
   17c68:	adc	r1, r1, #0
   17c6c:	strd	r0, [r5, #120]	; 0x78
   17c70:	movw	r1, #48620	; 0xbdec
   17c74:	ldr	r0, [r6, #4]
   17c78:	movt	r1, #1
   17c7c:	b	17cfc <__generate_code_for_binary_boolean_expression@@Base+0x2ac>
   17c80:	ldrb	r0, [r4]
   17c84:	mov	r1, #1
   17c88:	bic	r0, r1, r0
   17c8c:	movw	r1, #48784	; 0xbe90
   17c90:	movt	r1, #1
   17c94:	rsb	r0, r0, #0
   17c98:	add	r1, r1, #16
   17c9c:	bl	17da0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   17ca0:	ldrd	r0, [r5, #104]	; 0x68
   17ca4:	adds	r0, r0, #1
   17ca8:	adc	r1, r1, #0
   17cac:	strd	r0, [r5, #104]	; 0x68
   17cb0:	movw	r1, #48582	; 0xbdc6
   17cb4:	ldr	r0, [r6, #4]
   17cb8:	movt	r1, #1
   17cbc:	b	17cfc <__generate_code_for_binary_boolean_expression@@Base+0x2ac>
   17cc0:	ldrb	r0, [r4]
   17cc4:	mov	r1, #1
   17cc8:	bic	r0, r1, r0
   17ccc:	movw	r1, #48784	; 0xbe90
   17cd0:	movt	r1, #1
   17cd4:	rsb	r0, r0, #0
   17cd8:	add	r1, r1, #24
   17cdc:	bl	17da0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   17ce0:	ldrd	r0, [r5, #112]	; 0x70
   17ce4:	adds	r0, r0, #1
   17ce8:	adc	r1, r1, #0
   17cec:	strd	r0, [r5, #112]	; 0x70
   17cf0:	movw	r1, #48601	; 0xbdd9
   17cf4:	ldr	r0, [r6, #4]
   17cf8:	movt	r1, #1
   17cfc:	ldm	sp, {r2, r3}
   17d00:	bl	11fb8 <fprintf@plt>
   17d04:	ldrb	r0, [r4]
   17d08:	mov	r1, #1
   17d0c:	bic	r0, r1, r0
   17d10:	movw	r1, #48784	; 0xbe90
   17d14:	movt	r1, #1
   17d18:	rsb	r0, r0, #0
   17d1c:	add	r1, r1, #20
   17d20:	bl	17da0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   17d24:	ldrd	r0, [r5, #128]	; 0x80
   17d28:	adds	r0, r0, #1
   17d2c:	adc	r1, r1, #0
   17d30:	strd	r0, [r5, #128]	; 0x80
   17d34:	sub	sp, fp, #48	; 0x30
   17d38:	vpop	{d8-d9}
   17d3c:	add	sp, sp, #4
   17d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d44:	movw	r0, #57264	; 0xdfb0
   17d48:	movw	r1, #48784	; 0xbe90
   17d4c:	movt	r0, #2
   17d50:	movt	r1, #1
   17d54:	ldrb	r0, [r0]
   17d58:	bic	r0, r8, r0
   17d5c:	rsb	r0, r0, #0
   17d60:	bl	17da0 <__generate_code_for_binary_boolean_expression@@Base+0x350>
   17d64:	movw	r0, #53480	; 0xd0e8
   17d68:	mov	r1, #31
   17d6c:	mov	r2, #1
   17d70:	movt	r0, #2
   17d74:	ldr	r3, [r0]
   17d78:	movw	r0, #48639	; 0xbdff
   17d7c:	movt	r0, #1
   17d80:	bl	11f28 <fwrite@plt>
   17d84:	mov	r0, #1
   17d88:	bl	11f88 <exit@plt>
   17d8c:	nop	{0}
   17d90:	andeq	r0, r0, r1
   17d94:	andeq	r0, r0, r0
   17d98:	andeq	r0, r0, r1
   17d9c:	andeq	r0, r0, r0
   17da0:	cmn	r0, #1
   17da4:	ldrne	r0, [r1, r0, lsl #2]
   17da8:	cmpne	r0, #0
   17dac:	bne	17db4 <__generate_code_for_binary_boolean_expression@@Base+0x364>
   17db0:	bx	lr
   17db4:	ldrd	r2, [r0]
   17db8:	adds	r2, r2, #1
   17dbc:	adc	r3, r3, #0
   17dc0:	strd	r2, [r0]
   17dc4:	bx	lr
   17dc8:	push	{r4, r5, r6, lr}
   17dcc:	sub	sp, sp, #8
   17dd0:	movw	r0, #49200	; 0xc030
   17dd4:	movw	r1, #44967	; 0xafa7
   17dd8:	movw	r2, #11716	; 0x2dc4
   17ddc:	movt	r0, #1
   17de0:	movt	r1, #1
   17de4:	movt	r2, #2155	; 0x86b
   17de8:	bl	17f68 <__generate_code_for_binary_boolean_expression@@Base+0x518>
   17dec:	movw	r0, #49088	; 0xbfc0
   17df0:	movw	r6, #48816	; 0xbeb0
   17df4:	mov	r5, #0
   17df8:	movt	r0, #1
   17dfc:	movt	r6, #1
   17e00:	add	r4, r0, #4
   17e04:	mov	r3, r6
   17e08:	ldr	r0, [r3, r5]!
   17e0c:	ldr	r1, [r3, #16]
   17e10:	str	r1, [sp]
   17e14:	ldmib	r3, {r1, r2}
   17e18:	ldrb	r3, [r3, #12]
   17e1c:	bl	186cc <__generate_code_for_binary_boolean_expression@@Base+0xc7c>
   17e20:	ldrd	r0, [r4, #-4]
   17e24:	bl	18f80 <__generate_code_for_binary_boolean_expression@@Base+0x1530>
   17e28:	add	r5, r5, #20
   17e2c:	add	r4, r4, #8
   17e30:	cmp	r5, #260	; 0x104
   17e34:	bne	17e04 <__generate_code_for_binary_boolean_expression@@Base+0x3b4>
   17e38:	bl	196fc <__generate_code_for_binary_boolean_expression@@Base+0x1cac>
   17e3c:	add	sp, sp, #8
   17e40:	pop	{r4, r5, r6, lr}
   17e44:	b	1a468 <__generate_code_for_binary_boolean_expression@@Base+0x2a18>
   17e48:	push	{r4, r5, fp, lr}
   17e4c:	bl	17dc8 <__generate_code_for_binary_boolean_expression@@Base+0x378>
   17e50:	movw	r5, #57376	; 0xe020
   17e54:	vmov.i32	q8, #0	; 0x00000000
   17e58:	movw	r3, #57024	; 0xdec0
   17e5c:	mov	lr, #36	; 0x24
   17e60:	mov	ip, #0
   17e64:	movt	r5, #2
   17e68:	movt	r3, #2
   17e6c:	add	r2, r5, #16
   17e70:	add	r0, r3, #64	; 0x40
   17e74:	str	ip, [r3, #80]	; 0x50
   17e78:	vst1.64	{d16-d17}, [r2 :128]
   17e7c:	movw	r2, #57264	; 0xdfb0
   17e80:	vst1.64	{d16-d17}, [r0 :128]
   17e84:	add	r0, r3, #48	; 0x30
   17e88:	movt	r2, #2
   17e8c:	vst1.64	{d16-d17}, [r0 :128]
   17e90:	add	r0, r3, #32
   17e94:	add	r1, r2, #32
   17e98:	vst1.64	{d16-d17}, [r0 :128]
   17e9c:	add	r0, r3, #16
   17ea0:	vst1.64	{d16-d17}, [r1 :128]
   17ea4:	add	r1, r2, #16
   17ea8:	vst1.64	{d16-d17}, [r0 :128]
   17eac:	mov	r0, r5
   17eb0:	vst1.64	{d16-d17}, [r1 :128]
   17eb4:	add	r1, r2, #48	; 0x30
   17eb8:	vst1.64	{d16-d17}, [r1 :128]
   17ebc:	add	r1, r2, #64	; 0x40
   17ec0:	vst1.64	{d16-d17}, [r1 :128]
   17ec4:	add	r1, r2, #80	; 0x50
   17ec8:	vst1.64	{d16-d17}, [r1 :128]
   17ecc:	movw	r1, #57472	; 0xe080
   17ed0:	movt	r1, #2
   17ed4:	mov	r4, r1
   17ed8:	str	ip, [r1, #32]
   17edc:	vst1.64	{d16-d17}, [r4 :128], lr
   17ee0:	str	ip, [r4]
   17ee4:	mov	r4, #84	; 0x54
   17ee8:	vst1.64	{d16-d17}, [r3 :128], r4
   17eec:	str	ip, [r3]
   17ef0:	add	r3, r1, #16
   17ef4:	vst1.64	{d16-d17}, [r3 :128]
   17ef8:	mov	r3, #48	; 0x30
   17efc:	vst1.64	{d16-d17}, [r0 :128], r3
   17f00:	add	r3, r1, #80	; 0x50
   17f04:	vst1.64	{d16-d17}, [r0 :128]
   17f08:	add	r0, r5, #32
   17f0c:	vst1.64	{d16-d17}, [r3 :128]
   17f10:	add	r3, r1, #64	; 0x40
   17f14:	add	r1, r1, #48	; 0x30
   17f18:	vst1.64	{d16-d17}, [r0 :128]
   17f1c:	add	r0, r2, #96	; 0x60
   17f20:	vst1.64	{d16-d17}, [r1 :128]
   17f24:	mov	r1, #0
   17f28:	mov	r2, #136	; 0x88
   17f2c:	vst1.64	{d16-d17}, [r3 :128]
   17f30:	vst1.64	{d16-d17}, [r0 :128]
   17f34:	add	r0, r5, #80	; 0x50
   17f38:	vst1.64	{d16-d17}, [r0 :128]
   17f3c:	add	r0, r5, #64	; 0x40
   17f40:	vst1.64	{d16-d17}, [r0 :128]
   17f44:	movw	r0, #57120	; 0xdf20
   17f48:	movt	r0, #2
   17f4c:	bl	11fe8 <memset@plt>
   17f50:	pop	{r4, r5, fp, pc}
   17f54:	movw	r0, #32200	; 0x7dc8
   17f58:	movw	r1, #32328	; 0x7e48
   17f5c:	movt	r0, #1
   17f60:	movt	r1, #1
   17f64:	b	1a918 <__gcov_flush@@Base+0xb4>
   17f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f6c:	add	fp, sp, #28
   17f70:	sub	sp, sp, #36	; 0x24
   17f74:	mov	r9, r1
   17f78:	mov	r6, r0
   17f7c:	add	r0, sp, #28
   17f80:	add	r1, sp, #32
   17f84:	mov	r8, r2
   17f88:	bl	1acc4 <__gcov_flush@@Base+0x460>
   17f8c:	cmp	r0, #0
   17f90:	beq	17fd4 <__generate_code_for_binary_boolean_expression@@Base+0x584>
   17f94:	mov	r4, r0
   17f98:	mov	r0, r6
   17f9c:	ldr	r5, [sp, #32]
   17fa0:	bl	11f94 <strlen@plt>
   17fa4:	add	r0, r5, r0
   17fa8:	add	r0, r0, #2
   17fac:	bl	11f4c <malloc@plt>
   17fb0:	mov	r7, r0
   17fb4:	ldr	r0, [sp, #28]
   17fb8:	mov	r1, r6
   17fbc:	mov	r2, r4
   17fc0:	str	r0, [sp]
   17fc4:	mov	r0, r7
   17fc8:	mov	r3, r5
   17fcc:	bl	1ad58 <__gcov_flush@@Base+0x4f4>
   17fd0:	b	17fe0 <__generate_code_for_binary_boolean_expression@@Base+0x590>
   17fd4:	mov	r0, r6
   17fd8:	bl	11f10 <strdup@plt>
   17fdc:	mov	r7, r0
   17fe0:	ldr	r0, [pc, #1548]	; 185f4 <__generate_code_for_binary_boolean_expression@@Base+0xba4>
   17fe4:	ldr	r6, [pc, #1548]	; 185f8 <__generate_code_for_binary_boolean_expression@@Base+0xba8>
   17fe8:	mov	r1, #2
   17fec:	add	r0, pc, r0
   17ff0:	add	r6, pc, r6
   17ff4:	str	r7, [r0]
   17ff8:	mov	r0, r7
   17ffc:	mov	r4, #0
   18000:	strb	r4, [r6]
   18004:	bl	11f34 <open64@plt>
   18008:	ldr	r5, [pc, #1516]	; 185fc <__generate_code_for_binary_boolean_expression@@Base+0xbac>
   1800c:	cmn	r0, #1
   18010:	add	r5, pc, r5
   18014:	str	r0, [r5]
   18018:	beq	18028 <__generate_code_for_binary_boolean_expression@@Base+0x5d8>
   1801c:	ldr	r6, [pc, #1500]	; 18600 <__generate_code_for_binary_boolean_expression@@Base+0xbb0>
   18020:	add	r6, pc, r6
   18024:	b	18084 <__generate_code_for_binary_boolean_expression@@Base+0x634>
   18028:	mov	r0, #1
   1802c:	strb	r0, [r6]
   18030:	ldr	r0, [pc, #1508]	; 1861c <__generate_code_for_binary_boolean_expression@@Base+0xbcc>
   18034:	mov	r1, #66	; 0x42
   18038:	mov	r2, #420	; 0x1a4
   1803c:	ldr	r0, [pc, r0]
   18040:	bl	11f34 <open64@plt>
   18044:	ldr	r6, [pc, #1492]	; 18620 <__generate_code_for_binary_boolean_expression@@Base+0xbd0>
   18048:	cmn	r0, #1
   1804c:	str	r0, [r5]
   18050:	add	r6, pc, r6
   18054:	bne	18084 <__generate_code_for_binary_boolean_expression@@Base+0x634>
   18058:	ldr	r0, [pc, #1476]	; 18624 <__generate_code_for_binary_boolean_expression@@Base+0xbd4>
   1805c:	ldr	r0, [pc, r0]
   18060:	bl	1aa2c <__gcov_flush@@Base+0x1c8>
   18064:	ldr	r0, [pc, #1468]	; 18628 <__generate_code_for_binary_boolean_expression@@Base+0xbd8>
   18068:	mov	r1, #66	; 0x42
   1806c:	mov	r2, #420	; 0x1a4
   18070:	ldr	r0, [pc, r0]
   18074:	bl	11f34 <open64@plt>
   18078:	cmn	r0, #1
   1807c:	str	r0, [r5]
   18080:	beq	185ac <__generate_code_for_binary_boolean_expression@@Base+0xb5c>
   18084:	str	r9, [sp, #20]
   18088:	bl	1aaf8 <__gcov_flush@@Base+0x294>
   1808c:	ldr	r0, [pc, #1392]	; 18604 <__generate_code_for_binary_boolean_expression@@Base+0xbb4>
   18090:	mov	r1, r6
   18094:	ldr	r0, [pc, r0]
   18098:	bl	11ea4 <fdopen@plt>
   1809c:	ldr	r5, [pc, #1380]	; 18608 <__generate_code_for_binary_boolean_expression@@Base+0xbb8>
   180a0:	ldr	r9, [pc, #1380]	; 1860c <__generate_code_for_binary_boolean_expression@@Base+0xbbc>
   180a4:	ldr	r1, [pc, #1380]	; 18610 <__generate_code_for_binary_boolean_expression@@Base+0xbc0>
   180a8:	ldr	sl, [pc, #1380]	; 18614 <__generate_code_for_binary_boolean_expression@@Base+0xbc4>
   180ac:	add	r5, pc, r5
   180b0:	add	r9, pc, r9
   180b4:	add	r1, pc, r1
   180b8:	add	sl, pc, sl
   180bc:	str	r4, [r5]
   180c0:	str	r4, [r5, #4]
   180c4:	str	r4, [r9]
   180c8:	str	r4, [r9, #4]
   180cc:	str	r0, [r1]
   180d0:	str	r4, [sl]
   180d4:	ldr	r6, [pc, #1340]	; 18618 <__generate_code_for_binary_boolean_expression@@Base+0xbc8>
   180d8:	ldr	r2, [pc, #1292]	; 185ec <__generate_code_for_binary_boolean_expression@@Base+0xb9c>
   180dc:	str	r8, [sp, #24]
   180e0:	add	r6, pc, r6
   180e4:	ldrb	r1, [r6]
   180e8:	mov	r6, r2
   180ec:	cmp	r1, #1
   180f0:	bne	18118 <__generate_code_for_binary_boolean_expression@@Base+0x6c8>
   180f4:	mov	r0, #131072	; 0x20000
   180f8:	mov	r4, #131072	; 0x20000
   180fc:	bl	11f4c <malloc@plt>
   18100:	mov	r1, #0
   18104:	str	r4, [r5]
   18108:	str	r1, [r5, #4]
   1810c:	mov	r8, r0
   18110:	str	r0, [sl]
   18114:	b	182a8 <__generate_code_for_binary_boolean_expression@@Base+0x858>
   18118:	mov	r1, #0
   1811c:	mov	r2, #2
   18120:	mov	r8, #0
   18124:	bl	1206c <fseek@plt>
   18128:	ldr	r0, [pc, #1288]	; 18638 <__generate_code_for_binary_boolean_expression@@Base+0xbe8>
   1812c:	ldr	r0, [pc, r0]
   18130:	bl	11ef8 <ftell@plt>
   18134:	mov	r2, r0
   18138:	ldr	r0, [pc, #1276]	; 1863c <__generate_code_for_binary_boolean_expression@@Base+0xbec>
   1813c:	asr	r3, r2, #31
   18140:	add	r0, pc, r0
   18144:	cmp	r2, #0
   18148:	strd	r2, [r0]
   1814c:	beq	1821c <__generate_code_for_binary_boolean_expression@@Base+0x7cc>
   18150:	ldr	r0, [pc, #1256]	; 18640 <__generate_code_for_binary_boolean_expression@@Base+0xbf0>
   18154:	mov	r1, r2
   18158:	mov	r2, #3
   1815c:	mov	r3, #1
   18160:	ldr	r0, [pc, r0]
   18164:	str	r8, [sp, #8]
   18168:	str	r8, [sp, #12]
   1816c:	str	r0, [sp]
   18170:	mov	r0, #0
   18174:	bl	11eec <mmap64@plt>
   18178:	ldr	r1, [pc, #1220]	; 18644 <__generate_code_for_binary_boolean_expression@@Base+0xbf4>
   1817c:	cmn	r0, #1
   18180:	add	r1, pc, r1
   18184:	str	r0, [r1]
   18188:	beq	181e4 <__generate_code_for_binary_boolean_expression@@Base+0x794>
   1818c:	ldr	r1, [pc, #1232]	; 18664 <__generate_code_for_binary_boolean_expression@@Base+0xc14>
   18190:	add	r1, pc, r1
   18194:	ldrb	r1, [r1]
   18198:	cmp	r1, #0
   1819c:	beq	181a8 <__generate_code_for_binary_boolean_expression@@Base+0x758>
   181a0:	mov	r8, r0
   181a4:	b	182b4 <__generate_code_for_binary_boolean_expression@@Base+0x864>
   181a8:	ldr	ip, [r9, #4]
   181ac:	ldr	r5, [pc, #1236]	; 18688 <__generate_code_for_binary_boolean_expression@@Base+0xc38>
   181b0:	mov	r4, r0
   181b4:	lsr	r2, r6, #16
   181b8:	ldr	r5, [pc, r5]
   181bc:	lsr	r1, r6, #24
   181c0:	lsr	r3, r6, #8
   181c4:	strb	r6, [r4, r5]!
   181c8:	strb	r2, [r4, #2]
   181cc:	adds	r2, r5, #4
   181d0:	adc	ip, ip, #0
   181d4:	strb	r1, [r4, #3]
   181d8:	strb	r3, [r4, #1]
   181dc:	stm	r9, {r2, ip}
   181e0:	b	1837c <__generate_code_for_binary_boolean_expression@@Base+0x92c>
   181e4:	bl	11fc4 <__errno_location@plt>
   181e8:	ldr	r1, [pc, #1112]	; 18648 <__generate_code_for_binary_boolean_expression@@Base+0xbf8>
   181ec:	ldr	r1, [pc, r1]
   181f0:	ldr	r0, [r0]
   181f4:	ldr	r4, [r1]
   181f8:	ldr	r7, [pc, #1100]	; 1864c <__generate_code_for_binary_boolean_expression@@Base+0xbfc>
   181fc:	ldr	r7, [pc, r7]
   18200:	bl	11f64 <strerror@plt>
   18204:	ldr	r1, [pc, #1092]	; 18650 <__generate_code_for_binary_boolean_expression@@Base+0xc00>
   18208:	mov	r3, r0
   1820c:	mov	r0, r4
   18210:	add	r1, pc, r1
   18214:	mov	r2, r7
   18218:	bl	11fb8 <fprintf@plt>
   1821c:	str	r8, [r5]
   18220:	str	r8, [r5, #4]
   18224:	ldr	r0, [pc, #1064]	; 18654 <__generate_code_for_binary_boolean_expression@@Base+0xc04>
   18228:	mov	r2, #16646144	; 0xfe0000
   1822c:	orr	r2, r2, #-16777216	; 0xff000000
   18230:	add	r0, pc, r0
   18234:	mvn	r3, #0
   18238:	str	r8, [r0]
   1823c:	ldr	r1, [pc, #1044]	; 18658 <__generate_code_for_binary_boolean_expression@@Base+0xc08>
   18240:	mov	r0, #1
   18244:	add	r1, pc, r1
   18248:	strb	r0, [r1]
   1824c:	ldr	r0, [r9, #4]
   18250:	ldr	r1, [pc, #1028]	; 1865c <__generate_code_for_binary_boolean_expression@@Base+0xc0c>
   18254:	eor	r3, r0, r3
   18258:	ldr	r1, [pc, r1]
   1825c:	eor	r2, r1, r2
   18260:	orrs	r2, r2, r3
   18264:	beq	182a4 <__generate_code_for_binary_boolean_expression@@Base+0x854>
   18268:	ldr	r2, [pc, #896]	; 185f0 <__generate_code_for_binary_boolean_expression@@Base+0xba0>
   1826c:	adds	r1, r1, r2
   18270:	adc	r0, r0, #0
   18274:	mvn	r2, #0
   18278:	and	r7, r0, r2
   1827c:	mov	r0, #16646144	; 0xfe0000
   18280:	orr	r0, r0, #-16777216	; 0xff000000
   18284:	and	r4, r1, r0
   18288:	mov	r0, r4
   1828c:	bl	11f4c <malloc@plt>
   18290:	stm	r5, {r4, r7}
   18294:	mov	r8, r0
   18298:	ldr	r0, [pc, #960]	; 18660 <__generate_code_for_binary_boolean_expression@@Base+0xc10>
   1829c:	add	r0, pc, r0
   182a0:	str	r8, [r0]
   182a4:	mov	r0, r8
   182a8:	mov	r1, #0
   182ac:	mov	r2, #131072	; 0x20000
   182b0:	bl	11fe8 <memset@plt>
   182b4:	ldr	r0, [r9, #4]
   182b8:	ldr	r1, [pc, #936]	; 18668 <__generate_code_for_binary_boolean_expression@@Base+0xc18>
   182bc:	mov	sl, r5
   182c0:	mov	r7, #7
   182c4:	orr	r7, r7, #131072	; 0x20000
   182c8:	ldr	r1, [pc, r1]
   182cc:	ldr	r4, [r5, #4]
   182d0:	ldr	r5, [pc, #916]	; 1866c <__generate_code_for_binary_boolean_expression@@Base+0xc1c>
   182d4:	adds	r2, r1, #4
   182d8:	adc	r3, r0, #0
   182dc:	ldr	r5, [pc, r5]
   182e0:	subs	r2, r5, r2
   182e4:	sbcs	r2, r4, r3
   182e8:	bcs	183c0 <__generate_code_for_binary_boolean_expression@@Base+0x970>
   182ec:	adds	r1, r1, r7
   182f0:	adc	r0, r0, #0
   182f4:	subs	r1, r1, #4
   182f8:	sbc	r0, r0, #0
   182fc:	mvn	r2, #0
   18300:	and	r5, r0, r2
   18304:	mov	r0, #16646144	; 0xfe0000
   18308:	orr	r0, r0, #-16777216	; 0xff000000
   1830c:	and	r4, r1, r0
   18310:	mov	r0, r8
   18314:	mov	r1, r4
   18318:	bl	11f1c <realloc@plt>
   1831c:	strd	r4, [sl]
   18320:	ldr	r1, [pc, #844]	; 18674 <__generate_code_for_binary_boolean_expression@@Base+0xc24>
   18324:	mov	r7, r6
   18328:	lsr	r2, r6, #24
   1832c:	add	r1, pc, r1
   18330:	mov	r3, r0
   18334:	str	r0, [r1]
   18338:	ldr	r6, [pc, #824]	; 18678 <__generate_code_for_binary_boolean_expression@@Base+0xc28>
   1833c:	ldr	r1, [r9, #4]
   18340:	lsr	r5, r7, #16
   18344:	add	r6, pc, r6
   18348:	ldrb	r6, [r6]
   1834c:	ldr	r4, [pc, #808]	; 1867c <__generate_code_for_binary_boolean_expression@@Base+0xc2c>
   18350:	ldr	r4, [pc, r4]
   18354:	strb	r7, [r3, r4]!
   18358:	strb	r2, [r3, #3]
   1835c:	lsr	r2, r7, #8
   18360:	strb	r2, [r3, #1]
   18364:	adds	r2, r4, #4
   18368:	adc	ip, r1, #0
   1836c:	cmp	r6, #1
   18370:	strb	r5, [r3, #2]
   18374:	stm	r9, {r2, ip}
   18378:	beq	18400 <__generate_code_for_binary_boolean_expression@@Base+0x9b0>
   1837c:	ldr	r4, [sp, #20]
   18380:	mov	r5, r0
   18384:	mov	lr, r9
   18388:	ldrb	r1, [r4]
   1838c:	ldrb	r3, [r4, #1]
   18390:	ldrb	r7, [r4, #2]
   18394:	ldrb	r6, [r4, #3]
   18398:	strb	r1, [r5, r2]!
   1839c:	adds	r4, r2, #4
   183a0:	adc	r1, ip, #0
   183a4:	strb	r6, [r5, #3]
   183a8:	strb	r7, [r5, #2]
   183ac:	strb	r3, [r5, #1]
   183b0:	str	r4, [lr]
   183b4:	str	r1, [lr, #4]
   183b8:	ldr	r6, [sp, #24]
   183bc:	b	1857c <__generate_code_for_binary_boolean_expression@@Base+0xb2c>
   183c0:	ldr	r1, [r9, #4]
   183c4:	ldr	r4, [pc, #676]	; 18670 <__generate_code_for_binary_boolean_expression@@Base+0xc20>
   183c8:	mov	r5, r6
   183cc:	lsr	r0, r6, #24
   183d0:	ldr	r4, [pc, r4]
   183d4:	lsr	r2, r6, #16
   183d8:	lsr	r3, r6, #8
   183dc:	mov	r6, r8
   183e0:	strb	r5, [r6, r4]!
   183e4:	strb	r2, [r6, #2]
   183e8:	adds	r2, r4, #4
   183ec:	adc	ip, r1, #0
   183f0:	strb	r0, [r6, #3]
   183f4:	strb	r3, [r6, #1]
   183f8:	stm	r9, {r2, ip}
   183fc:	mov	r0, r8
   18400:	ldr	r7, [sl, #4]
   18404:	ldr	r3, [pc, #628]	; 18680 <__generate_code_for_binary_boolean_expression@@Base+0xc30>
   18408:	adds	r6, r4, #8
   1840c:	mov	r8, r9
   18410:	adc	r5, r1, #0
   18414:	ldr	r3, [pc, r3]
   18418:	mov	r9, sl
   1841c:	subs	r3, r3, r6
   18420:	sbcs	r3, r7, r5
   18424:	bcs	184c8 <__generate_code_for_binary_boolean_expression@@Base+0xa78>
   18428:	mov	r2, #7
   1842c:	orr	r2, r2, #131072	; 0x20000
   18430:	adds	r2, r4, r2
   18434:	adc	r4, r1, #0
   18438:	mov	r1, #16646144	; 0xfe0000
   1843c:	orr	r1, r1, #-16777216	; 0xff000000
   18440:	and	r6, r2, r1
   18444:	mov	r1, r6
   18448:	bl	11f1c <realloc@plt>
   1844c:	ldr	sl, [pc, #568]	; 1868c <__generate_code_for_binary_boolean_expression@@Base+0xc3c>
   18450:	mvn	r1, #0
   18454:	and	r7, r4, r1
   18458:	add	sl, pc, sl
   1845c:	strd	r6, [r9]
   18460:	str	r0, [sl]
   18464:	ldr	r1, [pc, #548]	; 18690 <__generate_code_for_binary_boolean_expression@@Base+0xc40>
   18468:	ldr	r2, [sp, #20]
   1846c:	ldr	ip, [r8, #4]
   18470:	add	r1, pc, r1
   18474:	mov	lr, r8
   18478:	ldrb	r3, [r1]
   1847c:	ldrb	r1, [r2]
   18480:	ldrb	r7, [r2, #1]
   18484:	ldrb	r6, [r2, #2]
   18488:	ldrb	r5, [r2, #3]
   1848c:	ldr	r2, [pc, #512]	; 18694 <__generate_code_for_binary_boolean_expression@@Base+0xc44>
   18490:	ldr	r2, [pc, r2]
   18494:	adds	r4, r2, #4
   18498:	strb	r1, [r0, r2]
   1849c:	add	r1, r0, r2
   184a0:	strb	r5, [r1, #3]
   184a4:	strb	r6, [r1, #2]
   184a8:	strb	r7, [r1, #1]
   184ac:	adc	r1, ip, #0
   184b0:	str	r4, [lr]
   184b4:	str	r1, [lr, #4]
   184b8:	ldr	r6, [sp, #24]
   184bc:	cmp	r3, #1
   184c0:	beq	18510 <__generate_code_for_binary_boolean_expression@@Base+0xac0>
   184c4:	b	1857c <__generate_code_for_binary_boolean_expression@@Base+0xb2c>
   184c8:	ldr	r6, [sp, #20]
   184cc:	mov	r5, r0
   184d0:	adds	r4, r2, #4
   184d4:	ldrb	r1, [r6]
   184d8:	ldrb	r3, [r6, #1]
   184dc:	ldrb	r7, [r6, #2]
   184e0:	ldrb	r6, [r6, #3]
   184e4:	strb	r1, [r5, r2]!
   184e8:	adc	r1, ip, #0
   184ec:	strb	r3, [r5, #1]
   184f0:	mov	r3, r8
   184f4:	strb	r6, [r5, #3]
   184f8:	strb	r7, [r5, #2]
   184fc:	str	r4, [r3]
   18500:	str	r1, [r3, #4]
   18504:	ldr	r6, [sp, #24]
   18508:	ldr	sl, [pc, #372]	; 18684 <__generate_code_for_binary_boolean_expression@@Base+0xc34>
   1850c:	add	sl, pc, sl
   18510:	ldr	r7, [r9, #4]
   18514:	ldr	r5, [pc, #380]	; 18698 <__generate_code_for_binary_boolean_expression@@Base+0xc48>
   18518:	adds	r3, r2, #8
   1851c:	adc	lr, ip, #0
   18520:	ldr	r5, [pc, r5]
   18524:	subs	r3, r5, r3
   18528:	sbcs	r3, r7, lr
   1852c:	bcs	18578 <__generate_code_for_binary_boolean_expression@@Base+0xb28>
   18530:	mov	r1, #7
   18534:	orr	r1, r1, #131072	; 0x20000
   18538:	adds	r1, r2, r1
   1853c:	adc	r2, ip, #0
   18540:	mvn	r3, #0
   18544:	and	r5, r2, r3
   18548:	mov	r2, #16646144	; 0xfe0000
   1854c:	orr	r2, r2, #-16777216	; 0xff000000
   18550:	and	r4, r1, r2
   18554:	mov	r1, r4
   18558:	bl	11f1c <realloc@plt>
   1855c:	strd	r4, [r9]
   18560:	str	r0, [sl]
   18564:	ldr	r1, [r8, #4]
   18568:	ldr	r4, [pc, #300]	; 1869c <__generate_code_for_binary_boolean_expression@@Base+0xc4c>
   1856c:	mov	lr, r8
   18570:	ldr	r4, [pc, r4]
   18574:	b	1857c <__generate_code_for_binary_boolean_expression@@Base+0xb2c>
   18578:	mov	lr, r8
   1857c:	lsr	r2, r6, #24
   18580:	strb	r6, [r0, r4]!
   18584:	lsr	r3, r6, #16
   18588:	lsr	r7, r6, #8
   1858c:	strb	r2, [r0, #3]
   18590:	strb	r3, [r0, #2]
   18594:	strb	r7, [r0, #1]
   18598:	adds	r0, r4, #4
   1859c:	adc	r1, r1, #0
   185a0:	strd	r0, [lr]
   185a4:	sub	sp, fp, #28
   185a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185ac:	bl	11fc4 <__errno_location@plt>
   185b0:	ldr	r1, [pc, #116]	; 1862c <__generate_code_for_binary_boolean_expression@@Base+0xbdc>
   185b4:	ldr	r1, [pc, r1]
   185b8:	ldr	r0, [r0]
   185bc:	ldr	r4, [r1]
   185c0:	ldr	r5, [pc, #104]	; 18630 <__generate_code_for_binary_boolean_expression@@Base+0xbe0>
   185c4:	ldr	r5, [pc, r5]
   185c8:	bl	11f64 <strerror@plt>
   185cc:	ldr	r1, [pc, #96]	; 18634 <__generate_code_for_binary_boolean_expression@@Base+0xbe4>
   185d0:	mov	r3, r0
   185d4:	mov	r0, r4
   185d8:	add	r1, pc, r1
   185dc:	mov	r2, r5
   185e0:	bl	11fb8 <fprintf@plt>
   185e4:	sub	sp, fp, #28
   185e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185ec:	strbvs	r6, [r3, -r1, ror #8]!
   185f0:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   185f4:	andeq	r6, r1, ip, ror #1
   185f8:	andeq	r6, r1, ip, ror #1
   185fc:	strheq	r5, [r1], -r8
   18600:	ldrdeq	r4, [r0], -r8
   18604:	andeq	r5, r1, r4, lsr r0
   18608:	andeq	r6, r1, ip, lsr r0
   1860c:	andeq	r6, r1, r0, asr #32
   18610:	andeq	r6, r1, ip, lsr #32
   18614:	andeq	r6, r1, ip, lsr #32
   18618:	strdeq	r5, [r1], -ip
   1861c:	muleq	r1, ip, r0
   18620:	andeq	r4, r0, ip, lsr #3
   18624:	andeq	r6, r1, ip, ror r0
   18628:	andeq	r6, r1, r8, rrx
   1862c:	andeq	r4, r1, r0, lsl #22
   18630:	andeq	r5, r1, r4, lsl fp
   18634:	andeq	r3, r0, r8, lsr #24
   18638:			; <UNDEFINED> instruction: 0x00015fb4
   1863c:	andeq	r5, r1, r8, asr #31
   18640:	andeq	r4, r1, r8, ror #30
   18644:	andeq	r5, r1, r4, ror #30
   18648:	andeq	r4, r1, r8, asr #29
   1864c:	ldrdeq	r5, [r1], -ip
   18650:	andeq	r4, r0, sl, asr #2
   18654:			; <UNDEFINED> instruction: 0x00015eb4
   18658:	muleq	r1, r8, lr
   1865c:	muleq	r1, r8, lr
   18660:	andeq	r5, r1, r8, asr #28
   18664:	andeq	r5, r1, ip, asr #30
   18668:	andeq	r5, r1, r8, lsr #28
   1866c:	andeq	r5, r1, ip, lsl #28
   18670:	andeq	r5, r1, r0, lsr #26
   18674:			; <UNDEFINED> instruction: 0x00015db8
   18678:	muleq	r1, r8, sp
   1867c:	andeq	r5, r1, r0, lsr #27
   18680:	ldrdeq	r5, [r1], -r4
   18684:	ldrdeq	r5, [r1], -r8
   18688:	andeq	r5, r1, r8, lsr pc
   1868c:	andeq	r5, r1, ip, lsl #25
   18690:	andeq	r5, r1, ip, ror #24
   18694:	andeq	r5, r1, r0, ror #24
   18698:	andeq	r5, r1, r8, asr #23
   1869c:	andeq	r5, r1, r0, lsl #23
   186a0:	ldr	r0, [r0]
   186a4:	cmn	r0, #1
   186a8:	beq	186c8 <__generate_code_for_binary_boolean_expression@@Base+0xc78>
   186ac:	ldr	r0, [r1, r0, lsl #2]
   186b0:	cmp	r0, #0
   186b4:	bxeq	lr
   186b8:	ldrd	r2, [r0]
   186bc:	adds	r2, r2, #1
   186c0:	adc	r3, r3, #0
   186c4:	strd	r2, [r0]
   186c8:	bx	lr
   186cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186d0:	add	fp, sp, #28
   186d4:	sub	sp, sp, #12
   186d8:	mov	r9, r0
   186dc:	ldr	r0, [pc, #2000]	; 18eb4 <__generate_code_for_binary_boolean_expression@@Base+0x1464>
   186e0:	mov	sl, #2
   186e4:	cmp	r3, #0
   186e8:	movne	sl, #3
   186ec:	ldr	r0, [pc, r0]
   186f0:	cmp	r0, #0
   186f4:	beq	18eac <__generate_code_for_binary_boolean_expression@@Base+0x145c>
   186f8:	stm	sp, {r2, r3}
   186fc:	ldr	r0, [pc, #1972]	; 18eb8 <__generate_code_for_binary_boolean_expression@@Base+0x1468>
   18700:	str	r1, [sp, #8]
   18704:	add	r0, pc, r0
   18708:	ldrb	r0, [r0]
   1870c:	cmp	r0, #1
   18710:	bne	187a0 <__generate_code_for_binary_boolean_expression@@Base+0xd50>
   18714:	ldr	r0, [pc, #1952]	; 18ebc <__generate_code_for_binary_boolean_expression@@Base+0x146c>
   18718:	ldr	r4, [pc, #1952]	; 18ec0 <__generate_code_for_binary_boolean_expression@@Base+0x1470>
   1871c:	add	r0, pc, r0
   18720:	add	r4, pc, r4
   18724:	ldr	r0, [r0, #4]
   18728:	ldr	r5, [pc, #1940]	; 18ec4 <__generate_code_for_binary_boolean_expression@@Base+0x1474>
   1872c:	ldr	r5, [pc, r5]
   18730:	ldr	r7, [r4, #4]
   18734:	ldr	r6, [pc, #1932]	; 18ec8 <__generate_code_for_binary_boolean_expression@@Base+0x1478>
   18738:	adds	r2, r5, #4
   1873c:	adc	r3, r0, #0
   18740:	ldr	r6, [pc, r6]
   18744:	subs	r2, r6, r2
   18748:	sbcs	r2, r7, r3
   1874c:	bcs	187a0 <__generate_code_for_binary_boolean_expression@@Base+0xd50>
   18750:	mov	r2, #7
   18754:	orr	r2, r2, #131072	; 0x20000
   18758:	adds	r1, r5, r2
   1875c:	adc	r0, r0, #0
   18760:	subs	r1, r1, #4
   18764:	sbc	r0, r0, #0
   18768:	mvn	r2, #0
   1876c:	and	r7, r0, r2
   18770:	mov	r0, #16646144	; 0xfe0000
   18774:	orr	r0, r0, #-16777216	; 0xff000000
   18778:	ldr	r8, [pc, #1868]	; 18ecc <__generate_code_for_binary_boolean_expression@@Base+0x147c>
   1877c:	and	r6, r1, r0
   18780:	ldr	r0, [pc, #1864]	; 18ed0 <__generate_code_for_binary_boolean_expression@@Base+0x1480>
   18784:	mov	r1, r6
   18788:	add	r8, pc, r8
   1878c:	ldr	r0, [pc, r0]
   18790:	bl	11f1c <realloc@plt>
   18794:	ldr	r1, [sp, #8]
   18798:	strd	r6, [r4]
   1879c:	str	r0, [r8]
   187a0:	ldr	r3, [pc, #1836]	; 18ed4 <__generate_code_for_binary_boolean_expression@@Base+0x1484>
   187a4:	ldr	r7, [pc, #1836]	; 18ed8 <__generate_code_for_binary_boolean_expression@@Base+0x1488>
   187a8:	mov	r0, #0
   187ac:	add	r3, pc, r3
   187b0:	mov	r2, #1
   187b4:	ldr	r7, [pc, r7]
   187b8:	ldr	r8, [pc, #1820]	; 18edc <__generate_code_for_binary_boolean_expression@@Base+0x148c>
   187bc:	adds	r4, r7, #4
   187c0:	ldr	r8, [pc, r8]
   187c4:	ldr	r6, [r3, #4]
   187c8:	mov	r5, r8
   187cc:	strb	r0, [r5, r7]!
   187d0:	strb	r2, [r5, #3]
   187d4:	strb	r0, [r5, #2]
   187d8:	strb	r0, [r5, #1]
   187dc:	adc	r5, r6, #0
   187e0:	cmp	r1, #0
   187e4:	strd	r4, [r3]
   187e8:	beq	187fc <__generate_code_for_binary_boolean_expression@@Base+0xdac>
   187ec:	mov	r0, r1
   187f0:	bl	11f94 <strlen@plt>
   187f4:	add	r0, sl, r0, lsr #2
   187f8:	add	sl, r0, #2
   187fc:	ldr	r0, [pc, #1756]	; 18ee0 <__generate_code_for_binary_boolean_expression@@Base+0x1490>
   18800:	add	r0, pc, r0
   18804:	ldrb	r0, [r0]
   18808:	cmp	r0, #0
   1880c:	beq	188ec <__generate_code_for_binary_boolean_expression@@Base+0xe9c>
   18810:	ldr	lr, [pc, #1744]	; 18ee8 <__generate_code_for_binary_boolean_expression@@Base+0x1498>
   18814:	adds	r0, r7, #8
   18818:	adc	r1, r6, #0
   1881c:	add	lr, pc, lr
   18820:	ldr	r2, [lr, #4]
   18824:	ldr	r3, [pc, #1728]	; 18eec <__generate_code_for_binary_boolean_expression@@Base+0x149c>
   18828:	ldr	r3, [pc, r3]
   1882c:	subs	r0, r3, r0
   18830:	sbcs	r0, r2, r1
   18834:	bcs	18b3c <__generate_code_for_binary_boolean_expression@@Base+0x10ec>
   18838:	mov	r0, #7
   1883c:	orr	r0, r0, #131072	; 0x20000
   18840:	adds	r0, r7, r0
   18844:	adc	r1, r6, #0
   18848:	mvn	r2, #0
   1884c:	and	r5, r1, r2
   18850:	mov	r1, #16646144	; 0xfe0000
   18854:	orr	r1, r1, #-16777216	; 0xff000000
   18858:	and	r6, r0, r1
   1885c:	ldr	r4, [pc, #1680]	; 18ef4 <__generate_code_for_binary_boolean_expression@@Base+0x14a4>
   18860:	mov	r0, r8
   18864:	mov	r1, r6
   18868:	add	r4, pc, r4
   1886c:	mov	r7, lr
   18870:	bl	11f1c <realloc@plt>
   18874:	mov	lr, r7
   18878:	mov	r8, r0
   1887c:	str	r6, [lr]
   18880:	str	r5, [lr, #4]
   18884:	str	r8, [r4]
   18888:	ldr	r1, [pc, #1640]	; 18ef8 <__generate_code_for_binary_boolean_expression@@Base+0x14a8>
   1888c:	lsr	r0, sl, #24
   18890:	add	r1, pc, r1
   18894:	lsr	r3, sl, #16
   18898:	ldrb	r2, [r1]
   1889c:	ldr	r1, [pc, #1624]	; 18efc <__generate_code_for_binary_boolean_expression@@Base+0x14ac>
   188a0:	add	r1, pc, r1
   188a4:	mov	r7, r1
   188a8:	ldr	r5, [r1, #4]
   188ac:	ldr	r4, [pc, #1612]	; 18f00 <__generate_code_for_binary_boolean_expression@@Base+0x14b0>
   188b0:	mov	r1, r8
   188b4:	ldr	r4, [pc, r4]
   188b8:	strb	sl, [r1, r4]!
   188bc:	ldr	ip, [sp, #8]
   188c0:	strb	r0, [r1, #3]
   188c4:	lsr	r0, sl, #8
   188c8:	strb	r0, [r1, #1]
   188cc:	adds	r0, r4, #4
   188d0:	strb	r3, [r1, #2]
   188d4:	adc	r1, r5, #0
   188d8:	mov	sl, r7
   188dc:	cmp	r2, #1
   188e0:	strd	r0, [sl]
   188e4:	bne	18924 <__generate_code_for_binary_boolean_expression@@Base+0xed4>
   188e8:	b	18b74 <__generate_code_for_binary_boolean_expression@@Base+0x1124>
   188ec:	mov	r3, r8
   188f0:	lsr	r0, sl, #24
   188f4:	strb	sl, [r3, r4]!
   188f8:	lsr	r1, sl, #16
   188fc:	lsr	r2, sl, #8
   18900:	strb	r0, [r3, #3]
   18904:	strb	r1, [r3, #2]
   18908:	strb	r2, [r3, #1]
   1890c:	ldr	sl, [pc, #1488]	; 18ee4 <__generate_code_for_binary_boolean_expression@@Base+0x1494>
   18910:	ldr	ip, [sp, #8]
   18914:	adds	r0, r7, #8
   18918:	adc	r1, r6, #0
   1891c:	add	sl, pc, sl
   18920:	strd	r0, [sl]
   18924:	mov	r6, r8
   18928:	lsr	r2, r9, #24
   1892c:	strb	r9, [r6, r0]!
   18930:	lsr	r3, r9, #16
   18934:	strb	r2, [r6, #3]
   18938:	adds	r2, r0, #4
   1893c:	lsr	r7, r9, #8
   18940:	strb	r3, [r6, #2]
   18944:	adc	r3, r1, #0
   18948:	strb	r7, [r6, #1]
   1894c:	strd	r2, [sl]
   18950:	ldr	r5, [sp]
   18954:	mov	r6, r8
   18958:	adds	r4, r2, #4
   1895c:	lsr	r7, r5, #8
   18960:	strb	r5, [r6, r2]!
   18964:	lsr	r0, r5, #24
   18968:	lsr	r1, r5, #16
   1896c:	strb	r7, [r6, #1]
   18970:	adc	r7, r3, #0
   18974:	strb	r0, [r6, #3]
   18978:	strb	r1, [r6, #2]
   1897c:	stm	sl, {r4, r7}
   18980:	ldr	r0, [sp, #4]
   18984:	cmp	r0, #0
   18988:	beq	18a60 <__generate_code_for_binary_boolean_expression@@Base+0x1010>
   1898c:	ldr	r0, [pc, #1420]	; 18f20 <__generate_code_for_binary_boolean_expression@@Base+0x14d0>
   18990:	ldr	sl, [fp, #8]
   18994:	add	r0, pc, r0
   18998:	ldrb	r0, [r0]
   1899c:	cmp	r0, #1
   189a0:	bne	18a2c <__generate_code_for_binary_boolean_expression@@Base+0xfdc>
   189a4:	ldr	r9, [pc, #1400]	; 18f24 <__generate_code_for_binary_boolean_expression@@Base+0x14d4>
   189a8:	adds	r0, r2, #8
   189ac:	adc	r1, r3, #0
   189b0:	add	r9, pc, r9
   189b4:	ldr	r6, [r9, #4]
   189b8:	ldr	r5, [pc, #1384]	; 18f28 <__generate_code_for_binary_boolean_expression@@Base+0x14d8>
   189bc:	ldr	r5, [pc, r5]
   189c0:	subs	r0, r5, r0
   189c4:	sbcs	r0, r6, r1
   189c8:	bcs	18a2c <__generate_code_for_binary_boolean_expression@@Base+0xfdc>
   189cc:	mov	r0, #7
   189d0:	orr	r0, r0, #131072	; 0x20000
   189d4:	adds	r0, r2, r0
   189d8:	adc	r1, r3, #0
   189dc:	mvn	r2, #0
   189e0:	and	r5, r1, r2
   189e4:	mov	r1, #16646144	; 0xfe0000
   189e8:	orr	r1, r1, #-16777216	; 0xff000000
   189ec:	and	r6, r0, r1
   189f0:	ldr	r4, [pc, #1332]	; 18f2c <__generate_code_for_binary_boolean_expression@@Base+0x14dc>
   189f4:	mov	r0, r8
   189f8:	mov	r1, r6
   189fc:	add	r4, pc, r4
   18a00:	bl	11f1c <realloc@plt>
   18a04:	ldr	ip, [sp, #8]
   18a08:	str	r6, [r9]
   18a0c:	str	r5, [r9, #4]
   18a10:	mov	r8, r0
   18a14:	ldr	r0, [pc, #1300]	; 18f30 <__generate_code_for_binary_boolean_expression@@Base+0x14e0>
   18a18:	str	r8, [r4]
   18a1c:	add	r0, pc, r0
   18a20:	ldr	r7, [r0, #4]
   18a24:	ldr	r4, [pc, #1288]	; 18f34 <__generate_code_for_binary_boolean_expression@@Base+0x14e4>
   18a28:	ldr	r4, [pc, r4]
   18a2c:	mov	r3, r8
   18a30:	lsr	r0, sl, #24
   18a34:	strb	sl, [r3, r4]!
   18a38:	lsr	r1, sl, #16
   18a3c:	lsr	r2, sl, #8
   18a40:	strb	r0, [r3, #3]
   18a44:	strb	r1, [r3, #2]
   18a48:	strb	r2, [r3, #1]
   18a4c:	ldr	sl, [pc, #1252]	; 18f38 <__generate_code_for_binary_boolean_expression@@Base+0x14e8>
   18a50:	adds	r4, r4, #4
   18a54:	adc	r7, r7, #0
   18a58:	add	sl, pc, sl
   18a5c:	stm	sl, {r4, r7}
   18a60:	cmp	ip, #0
   18a64:	beq	18eac <__generate_code_for_binary_boolean_expression@@Base+0x145c>
   18a68:	mov	r0, ip
   18a6c:	bl	11f94 <strlen@plt>
   18a70:	mov	r9, #1
   18a74:	add	r5, r9, r0, lsr #2
   18a78:	ldr	r0, [pc, #1212]	; 18f3c <__generate_code_for_binary_boolean_expression@@Base+0x14ec>
   18a7c:	add	r0, pc, r0
   18a80:	ldrb	r0, [r0]
   18a84:	cmp	r0, #1
   18a88:	bne	18b2c <__generate_code_for_binary_boolean_expression@@Base+0x10dc>
   18a8c:	ldr	sl, [pc, #1196]	; 18f40 <__generate_code_for_binary_boolean_expression@@Base+0x14f0>
   18a90:	adds	r0, r4, #4
   18a94:	adc	r1, r7, #0
   18a98:	add	sl, pc, sl
   18a9c:	ldr	r2, [sl, #4]
   18aa0:	ldr	r3, [pc, #1180]	; 18f44 <__generate_code_for_binary_boolean_expression@@Base+0x14f4>
   18aa4:	ldr	r3, [pc, r3]
   18aa8:	subs	r0, r3, r0
   18aac:	sbcs	r0, r2, r1
   18ab0:	bcs	18ce0 <__generate_code_for_binary_boolean_expression@@Base+0x1290>
   18ab4:	mov	r0, #0
   18ab8:	str	r0, [sp, #4]
   18abc:	mov	r0, #7
   18ac0:	orr	r0, r0, #131072	; 0x20000
   18ac4:	adds	r0, r4, r0
   18ac8:	adc	r1, r7, #0
   18acc:	subs	r0, r0, #4
   18ad0:	sbc	r1, r1, #0
   18ad4:	mvn	r2, #0
   18ad8:	and	r7, r1, r2
   18adc:	mov	r1, #16646144	; 0xfe0000
   18ae0:	orr	r1, r1, #-16777216	; 0xff000000
   18ae4:	and	r4, r0, r1
   18ae8:	ldr	r6, [pc, #1116]	; 18f4c <__generate_code_for_binary_boolean_expression@@Base+0x14fc>
   18aec:	mov	r0, r8
   18af0:	mov	r1, r4
   18af4:	add	r6, pc, r6
   18af8:	bl	11f1c <realloc@plt>
   18afc:	stm	sl, {r4, r7}
   18b00:	str	r0, [r6]
   18b04:	ldr	sl, [pc, #1092]	; 18f50 <__generate_code_for_binary_boolean_expression@@Base+0x1500>
   18b08:	mov	r8, r0
   18b0c:	add	sl, pc, sl
   18b10:	ldr	r7, [sl, #4]
   18b14:	ldr	r0, [pc, #1080]	; 18f54 <__generate_code_for_binary_boolean_expression@@Base+0x1504>
   18b18:	add	r0, pc, r0
   18b1c:	ldrb	r9, [r0]
   18b20:	ldr	r4, [pc, #1072]	; 18f58 <__generate_code_for_binary_boolean_expression@@Base+0x1508>
   18b24:	ldr	r4, [pc, r4]
   18b28:	b	18cf0 <__generate_code_for_binary_boolean_expression@@Base+0x12a0>
   18b2c:	mov	r0, #0
   18b30:	str	r0, [sp, #4]
   18b34:	mov	r9, #0
   18b38:	b	18cf0 <__generate_code_for_binary_boolean_expression@@Base+0x12a0>
   18b3c:	mov	r3, r8
   18b40:	lsr	r0, sl, #24
   18b44:	strb	sl, [r3, r4]!
   18b48:	lsr	r1, sl, #16
   18b4c:	lsr	r2, sl, #8
   18b50:	strb	r0, [r3, #3]
   18b54:	strb	r1, [r3, #2]
   18b58:	strb	r2, [r3, #1]
   18b5c:	ldr	sl, [pc, #908]	; 18ef0 <__generate_code_for_binary_boolean_expression@@Base+0x14a0>
   18b60:	adds	r0, r7, #8
   18b64:	adc	r1, r6, #0
   18b68:	add	sl, pc, sl
   18b6c:	ldr	ip, [sp, #8]
   18b70:	strd	r0, [sl]
   18b74:	ldr	r7, [lr, #4]
   18b78:	ldr	r6, [pc, #900]	; 18f04 <__generate_code_for_binary_boolean_expression@@Base+0x14b4>
   18b7c:	adds	r2, r4, #8
   18b80:	adc	r3, r5, #0
   18b84:	ldr	r6, [pc, r6]
   18b88:	subs	r2, r6, r2
   18b8c:	sbcs	r2, r7, r3
   18b90:	bcs	18c34 <__generate_code_for_binary_boolean_expression@@Base+0x11e4>
   18b94:	mov	r0, #7
   18b98:	orr	r0, r0, #131072	; 0x20000
   18b9c:	adds	r0, r4, r0
   18ba0:	adc	r1, r5, #0
   18ba4:	mvn	r2, #0
   18ba8:	and	r5, r1, r2
   18bac:	mov	r1, #16646144	; 0xfe0000
   18bb0:	orr	r1, r1, #-16777216	; 0xff000000
   18bb4:	and	r4, r0, r1
   18bb8:	ldr	r6, [pc, #840]	; 18f08 <__generate_code_for_binary_boolean_expression@@Base+0x14b8>
   18bbc:	mov	r0, r8
   18bc0:	mov	r1, r4
   18bc4:	add	r6, pc, r6
   18bc8:	mov	r7, lr
   18bcc:	bl	11f1c <realloc@plt>
   18bd0:	mov	lr, r7
   18bd4:	str	r0, [r6]
   18bd8:	strd	r4, [lr]
   18bdc:	mov	r8, r0
   18be0:	ldr	ip, [sp, #8]
   18be4:	ldr	r0, [pc, #800]	; 18f0c <__generate_code_for_binary_boolean_expression@@Base+0x14bc>
   18be8:	ldr	r1, [sl, #4]
   18bec:	mov	r3, r8
   18bf0:	add	r0, pc, r0
   18bf4:	lsr	r2, r9, #24
   18bf8:	ldrb	r7, [r0]
   18bfc:	ldr	r0, [pc, #780]	; 18f10 <__generate_code_for_binary_boolean_expression@@Base+0x14c0>
   18c00:	lsr	r6, r9, #16
   18c04:	ldr	r0, [pc, r0]
   18c08:	strb	r9, [r3, r0]!
   18c0c:	strb	r2, [r3, #3]
   18c10:	lsr	r2, r9, #8
   18c14:	strb	r2, [r3, #1]
   18c18:	adds	r2, r0, #4
   18c1c:	strb	r6, [r3, #2]
   18c20:	adc	r3, r1, #0
   18c24:	cmp	r7, #1
   18c28:	strd	r2, [sl]
   18c2c:	bne	18950 <__generate_code_for_binary_boolean_expression@@Base+0xf00>
   18c30:	b	18c60 <__generate_code_for_binary_boolean_expression@@Base+0x1210>
   18c34:	mov	r6, r8
   18c38:	lsr	r2, r9, #24
   18c3c:	strb	r9, [r6, r0]!
   18c40:	lsr	r3, r9, #16
   18c44:	strb	r2, [r6, #3]
   18c48:	adds	r2, r0, #4
   18c4c:	lsr	r7, r9, #8
   18c50:	strb	r3, [r6, #2]
   18c54:	adc	r3, r1, #0
   18c58:	strb	r7, [r6, #1]
   18c5c:	strd	r2, [sl]
   18c60:	ldr	r5, [lr, #4]
   18c64:	ldr	r4, [pc, #680]	; 18f14 <__generate_code_for_binary_boolean_expression@@Base+0x14c4>
   18c68:	adds	r7, r0, #8
   18c6c:	adc	r6, r1, #0
   18c70:	ldr	r4, [pc, r4]
   18c74:	subs	r7, r4, r7
   18c78:	sbcs	r7, r5, r6
   18c7c:	bcs	18950 <__generate_code_for_binary_boolean_expression@@Base+0xf00>
   18c80:	mov	r2, #7
   18c84:	orr	r2, r2, #131072	; 0x20000
   18c88:	adds	r0, r0, r2
   18c8c:	adc	r1, r1, #0
   18c90:	mvn	r2, #0
   18c94:	and	r5, r1, r2
   18c98:	mov	r1, #16646144	; 0xfe0000
   18c9c:	orr	r1, r1, #-16777216	; 0xff000000
   18ca0:	and	r6, r0, r1
   18ca4:	ldr	r4, [pc, #620]	; 18f18 <__generate_code_for_binary_boolean_expression@@Base+0x14c8>
   18ca8:	mov	r0, r8
   18cac:	mov	r1, r6
   18cb0:	add	r4, pc, r4
   18cb4:	mov	r7, lr
   18cb8:	bl	11f1c <realloc@plt>
   18cbc:	ldr	ip, [sp, #8]
   18cc0:	str	r6, [r7]
   18cc4:	str	r5, [r7, #4]
   18cc8:	str	r0, [r4]
   18ccc:	ldr	r3, [sl, #4]
   18cd0:	ldr	r2, [pc, #580]	; 18f1c <__generate_code_for_binary_boolean_expression@@Base+0x14cc>
   18cd4:	mov	r8, r0
   18cd8:	ldr	r2, [pc, r2]
   18cdc:	b	18950 <__generate_code_for_binary_boolean_expression@@Base+0xf00>
   18ce0:	mov	r0, #0
   18ce4:	str	r0, [sp, #4]
   18ce8:	ldr	sl, [pc, #600]	; 18f48 <__generate_code_for_binary_boolean_expression@@Base+0x14f8>
   18cec:	add	sl, pc, sl
   18cf0:	mov	r3, r8
   18cf4:	ldr	r0, [sp, #8]
   18cf8:	strb	r5, [r3, r4]!
   18cfc:	adds	r4, r4, #4
   18d00:	lsr	r6, r5, #24
   18d04:	lsr	r1, r5, #16
   18d08:	lsr	r2, r5, #8
   18d0c:	adc	r5, r7, #0
   18d10:	strb	r6, [r3, #3]
   18d14:	strb	r1, [r3, #2]
   18d18:	strb	r2, [r3, #1]
   18d1c:	strd	r4, [sl]
   18d20:	bl	11f94 <strlen@plt>
   18d24:	mov	r7, r0
   18d28:	cmp	r9, #0
   18d2c:	beq	18dcc <__generate_code_for_binary_boolean_expression@@Base+0x137c>
   18d30:	ldr	r6, [pc, #548]	; 18f5c <__generate_code_for_binary_boolean_expression@@Base+0x150c>
   18d34:	adds	r0, r4, r7
   18d38:	adc	r1, r5, #0
   18d3c:	add	r6, pc, r6
   18d40:	ldr	r2, [r6, #4]
   18d44:	ldr	r3, [pc, #532]	; 18f60 <__generate_code_for_binary_boolean_expression@@Base+0x1510>
   18d48:	ldr	r3, [pc, r3]
   18d4c:	subs	r3, r3, r0
   18d50:	sbcs	r2, r2, r1
   18d54:	bcs	18dc4 <__generate_code_for_binary_boolean_expression@@Base+0x1374>
   18d58:	mov	r2, #7
   18d5c:	orr	r2, r2, #131072	; 0x20000
   18d60:	adds	r0, r0, r2
   18d64:	adc	r1, r1, #0
   18d68:	subs	r0, r0, #8
   18d6c:	sbc	r1, r1, #0
   18d70:	mvn	r2, #0
   18d74:	and	r5, r1, r2
   18d78:	mov	r1, #16646144	; 0xfe0000
   18d7c:	orr	r1, r1, #-16777216	; 0xff000000
   18d80:	and	r4, r0, r1
   18d84:	ldr	r9, [pc, #472]	; 18f64 <__generate_code_for_binary_boolean_expression@@Base+0x1514>
   18d88:	mov	r0, r8
   18d8c:	mov	r1, r4
   18d90:	add	r9, pc, r9
   18d94:	bl	11f1c <realloc@plt>
   18d98:	strd	r4, [r6]
   18d9c:	str	r0, [r9]
   18da0:	mov	r8, r0
   18da4:	ldr	r5, [sl, #4]
   18da8:	ldr	r0, [pc, #440]	; 18f68 <__generate_code_for_binary_boolean_expression@@Base+0x1518>
   18dac:	add	r0, pc, r0
   18db0:	ldrb	r0, [r0]
   18db4:	str	r0, [sp, #4]
   18db8:	ldr	r4, [pc, #428]	; 18f6c <__generate_code_for_binary_boolean_expression@@Base+0x151c>
   18dbc:	ldr	r4, [pc, r4]
   18dc0:	b	18dcc <__generate_code_for_binary_boolean_expression@@Base+0x137c>
   18dc4:	mov	r0, #1
   18dc8:	str	r0, [sp, #4]
   18dcc:	ldr	r9, [sp, #8]
   18dd0:	add	r0, r8, r4
   18dd4:	mov	r2, r7
   18dd8:	mov	r1, r9
   18ddc:	bl	11ee0 <memcpy@plt>
   18de0:	adds	r6, r4, r7
   18de4:	mov	r0, r9
   18de8:	adc	r5, r5, #0
   18dec:	str	r6, [sl]
   18df0:	str	r5, [sl, #4]
   18df4:	bl	11f94 <strlen@plt>
   18df8:	and	r0, r0, #3
   18dfc:	rsb	r4, r0, #4
   18e00:	ldr	r0, [sp, #4]
   18e04:	cmp	r0, #0
   18e08:	beq	18e90 <__generate_code_for_binary_boolean_expression@@Base+0x1440>
   18e0c:	ldr	r7, [pc, #348]	; 18f70 <__generate_code_for_binary_boolean_expression@@Base+0x1520>
   18e10:	adds	r0, r6, r4
   18e14:	adc	r1, r5, #0
   18e18:	add	r7, pc, r7
   18e1c:	ldr	r2, [r7, #4]
   18e20:	ldr	r3, [pc, #332]	; 18f74 <__generate_code_for_binary_boolean_expression@@Base+0x1524>
   18e24:	ldr	r3, [pc, r3]
   18e28:	subs	r3, r3, r0
   18e2c:	sbcs	r2, r2, r1
   18e30:	bcs	18e90 <__generate_code_for_binary_boolean_expression@@Base+0x1440>
   18e34:	mov	r2, #7
   18e38:	orr	r2, r2, #131072	; 0x20000
   18e3c:	adds	r0, r0, r2
   18e40:	adc	r1, r1, #0
   18e44:	subs	r0, r0, #8
   18e48:	sbc	r1, r1, #0
   18e4c:	mvn	r2, #0
   18e50:	and	r5, r1, r2
   18e54:	mov	r1, #16646144	; 0xfe0000
   18e58:	orr	r1, r1, #-16777216	; 0xff000000
   18e5c:	and	r6, r0, r1
   18e60:	ldr	r9, [pc, #272]	; 18f78 <__generate_code_for_binary_boolean_expression@@Base+0x1528>
   18e64:	mov	r0, r8
   18e68:	mov	r1, r6
   18e6c:	add	r9, pc, r9
   18e70:	bl	11f1c <realloc@plt>
   18e74:	str	r6, [r7]
   18e78:	str	r5, [r7, #4]
   18e7c:	str	r0, [r9]
   18e80:	ldr	r5, [sl, #4]
   18e84:	ldr	r6, [pc, #240]	; 18f7c <__generate_code_for_binary_boolean_expression@@Base+0x152c>
   18e88:	mov	r8, r0
   18e8c:	ldr	r6, [pc, r6]
   18e90:	add	r0, r8, r6
   18e94:	mov	r1, #0
   18e98:	mov	r2, r4
   18e9c:	bl	11fe8 <memset@plt>
   18ea0:	adds	r0, r6, r4
   18ea4:	adc	r1, r5, #0
   18ea8:	strd	r0, [sl]
   18eac:	sub	sp, fp, #28
   18eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18eb4:	strdeq	r5, [r1], -r4
   18eb8:	ldrdeq	r5, [r1], -r8
   18ebc:	ldrdeq	r5, [r1], -r4
   18ec0:	andeq	r5, r1, r8, asr #19
   18ec4:	andeq	r5, r1, r4, asr #19
   18ec8:	andeq	r5, r1, r8, lsr #19
   18ecc:	andeq	r5, r1, ip, asr r9
   18ed0:	andeq	r5, r1, r8, asr r9
   18ed4:	andeq	r5, r1, r4, asr #18
   18ed8:	andeq	r5, r1, ip, lsr r9
   18edc:	andeq	r5, r1, r4, lsr #18
   18ee0:	ldrdeq	r5, [r1], -ip
   18ee4:	ldrdeq	r5, [r1], -r4
   18ee8:	andeq	r5, r1, ip, asr #17
   18eec:	andeq	r5, r1, r0, asr #17
   18ef0:	andeq	r5, r1, r8, lsl #11
   18ef4:	andeq	r5, r1, ip, ror r8
   18ef8:	andeq	r5, r1, ip, asr #16
   18efc:	andeq	r5, r1, r0, asr r8
   18f00:	andeq	r5, r1, ip, lsr r8
   18f04:	andeq	r5, r1, r4, ror #10
   18f08:	andeq	r5, r1, r0, lsr #10
   18f0c:	andeq	r5, r1, ip, ror #9
   18f10:	andeq	r5, r1, ip, ror #9
   18f14:	andeq	r5, r1, r8, ror r4
   18f18:	andeq	r5, r1, r4, lsr r4
   18f1c:	andeq	r5, r1, r8, lsl r4
   18f20:	andeq	r5, r1, r8, asr #14
   18f24:	andeq	r5, r1, r8, lsr r7
   18f28:	andeq	r5, r1, ip, lsr #14
   18f2c:	andeq	r5, r1, r8, ror #13
   18f30:	ldrdeq	r5, [r1], -r4
   18f34:	andeq	r5, r1, r8, asr #13
   18f38:	muleq	r1, r8, r6
   18f3c:	andeq	r5, r1, r0, ror #12
   18f40:	andeq	r5, r1, r0, asr r6
   18f44:	andeq	r5, r1, r4, asr #12
   18f48:	andeq	r5, r1, r4, lsl #8
   18f4c:	strdeq	r5, [r1], -r0
   18f50:	andeq	r5, r1, r4, ror #11
   18f54:	andeq	r5, r1, r4, asr #11
   18f58:	andeq	r5, r1, ip, asr #11
   18f5c:	andeq	r5, r1, ip, lsr #7
   18f60:	andeq	r5, r1, r0, lsr #7
   18f64:	andeq	r5, r1, r4, asr r3
   18f68:	andeq	r5, r1, r0, lsr r3
   18f6c:	andeq	r5, r1, r4, lsr r3
   18f70:	ldrdeq	r5, [r1], -r0
   18f74:	andeq	r5, r1, r4, asr #5
   18f78:	andeq	r5, r1, r8, ror r2
   18f7c:	andeq	r5, r1, r4, ror #4
   18f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f84:	add	fp, sp, #28
   18f88:	sub	sp, sp, #28
   18f8c:	mov	ip, r0
   18f90:	ldr	r0, [pc, #1728]	; 19658 <__generate_code_for_binary_boolean_expression@@Base+0x1c08>
   18f94:	ldr	r0, [pc, r0]
   18f98:	cmp	r0, #0
   18f9c:	beq	190b8 <__generate_code_for_binary_boolean_expression@@Base+0x1668>
   18fa0:	ldr	r2, [pc, #1716]	; 1965c <__generate_code_for_binary_boolean_expression@@Base+0x1c0c>
   18fa4:	mov	sl, r1
   18fa8:	add	r2, pc, r2
   18fac:	ldr	r3, [r2, #4]
   18fb0:	ldr	r4, [pc, #1704]	; 19660 <__generate_code_for_binary_boolean_expression@@Base+0x1c10>
   18fb4:	ldr	r4, [pc, r4]
   18fb8:	ldr	r6, [pc, #1700]	; 19664 <__generate_code_for_binary_boolean_expression@@Base+0x1c14>
   18fbc:	add	r6, pc, r6
   18fc0:	ldrb	r0, [r6]
   18fc4:	cmp	r0, #0
   18fc8:	beq	190c0 <__generate_code_for_binary_boolean_expression@@Base+0x1670>
   18fcc:	ldr	r8, [pc, #1720]	; 1968c <__generate_code_for_binary_boolean_expression@@Base+0x1c3c>
   18fd0:	mov	r5, #10551296	; 0xa10000
   18fd4:	adds	r9, r4, #4
   18fd8:	add	r8, pc, r8
   18fdc:	adc	r2, r3, #0
   18fe0:	ldr	r0, [r8, #4]
   18fe4:	ldr	r1, [pc, #1700]	; 19690 <__generate_code_for_binary_boolean_expression@@Base+0x1c40>
   18fe8:	orr	r5, r5, #16777216	; 0x1000000
   18fec:	ldr	r1, [pc, r1]
   18ff0:	subs	r1, r1, r9
   18ff4:	sbcs	r0, r0, r2
   18ff8:	bcs	191d0 <__generate_code_for_binary_boolean_expression@@Base+0x1780>
   18ffc:	mov	r0, #3
   19000:	orr	r0, r0, #131072	; 0x20000
   19004:	adds	r0, r4, r0
   19008:	adc	r1, r3, #0
   1900c:	mvn	r2, #0
   19010:	and	r9, r1, r2
   19014:	mov	r1, #16646144	; 0xfe0000
   19018:	orr	r1, r1, #-16777216	; 0xff000000
   1901c:	and	r4, r0, r1
   19020:	ldr	r0, [pc, #1652]	; 1969c <__generate_code_for_binary_boolean_expression@@Base+0x1c4c>
   19024:	mov	r1, r4
   19028:	mov	r7, ip
   1902c:	ldr	r0, [pc, r0]
   19030:	bl	11f1c <realloc@plt>
   19034:	ldr	ip, [pc, #1636]	; 196a0 <__generate_code_for_binary_boolean_expression@@Base+0x1c50>
   19038:	ldr	lr, [pc, #1636]	; 196a4 <__generate_code_for_binary_boolean_expression@@Base+0x1c54>
   1903c:	stm	r8, {r4, r9}
   19040:	ldr	r1, [pc, #1632]	; 196a8 <__generate_code_for_binary_boolean_expression@@Base+0x1c58>
   19044:	add	ip, pc, ip
   19048:	add	lr, pc, lr
   1904c:	add	r1, pc, r1
   19050:	mov	r2, r0
   19054:	str	r2, [r1]
   19058:	mov	r6, ip
   1905c:	ldrb	ip, [ip]
   19060:	ldr	r3, [lr, #4]
   19064:	ldr	r4, [pc, #1600]	; 196ac <__generate_code_for_binary_boolean_expression@@Base+0x1c5c>
   19068:	lsr	r0, r5, #24
   1906c:	mov	r1, r8
   19070:	ldr	r4, [pc, r4]
   19074:	str	r2, [sp, #20]
   19078:	lsl	r8, r7, #1
   1907c:	strb	r5, [r2, r4]!
   19080:	adds	r9, r4, #4
   19084:	strb	r0, [r2, #3]
   19088:	lsr	r0, r5, #16
   1908c:	strb	r0, [r2, #2]
   19090:	lsr	r0, r5, #8
   19094:	strb	r0, [r2, #1]
   19098:	adc	r5, r3, #0
   1909c:	mov	r0, #0
   190a0:	cmp	ip, #1
   190a4:	str	r3, [sp, #16]
   190a8:	str	r9, [lr]
   190ac:	str	r5, [lr, #4]
   190b0:	beq	19224 <__generate_code_for_binary_boolean_expression@@Base+0x17d4>
   190b4:	b	19374 <__generate_code_for_binary_boolean_expression@@Base+0x1924>
   190b8:	sub	sp, fp, #28
   190bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190c0:	ldr	r0, [pc, #1440]	; 19668 <__generate_code_for_binary_boolean_expression@@Base+0x1c18>
   190c4:	mov	r7, r3
   190c8:	adds	r9, r4, #4
   190cc:	mov	lr, r2
   190d0:	ldr	r0, [pc, r0]
   190d4:	str	r0, [sp, #20]
   190d8:	ldrb	r1, [r0, r4]!
   190dc:	str	r7, [sp, #16]
   190e0:	ldrb	r5, [r0, #1]
   190e4:	ldrb	r3, [r0, #2]
   190e8:	ldrb	r0, [r0, #3]
   190ec:	orr	r1, r1, r5, lsl #8
   190f0:	orr	r1, r1, r3, lsl #16
   190f4:	orr	r3, r1, r0, lsl #24
   190f8:	adc	r5, r7, #0
   190fc:	mov	r7, #0
   19100:	cmn	r3, #1
   19104:	str	r9, [r2]
   19108:	str	r5, [r2, #4]
   1910c:	beq	192d0 <__generate_code_for_binary_boolean_expression@@Base+0x1880>
   19110:	mov	r0, #10551296	; 0xa10000
   19114:	orr	r0, r0, #16777216	; 0x1000000
   19118:	cmp	r3, r0
   1911c:	bne	192dc <__generate_code_for_binary_boolean_expression@@Base+0x188c>
   19120:	str	r5, [sp, #8]
   19124:	ldr	r0, [sp, #20]
   19128:	str	r4, [sp, #4]
   1912c:	adds	r5, r4, #8
   19130:	ldr	r3, [r0, r9]
   19134:	ldr	r0, [sp, #16]
   19138:	mov	r1, r9
   1913c:	adc	r9, r0, #0
   19140:	cmn	r3, #1
   19144:	stm	lr, {r5, r9}
   19148:	beq	192e8 <__generate_code_for_binary_boolean_expression@@Base+0x1898>
   1914c:	lsr	r0, r3, #1
   19150:	mov	r7, ip
   19154:	cmp	r0, ip
   19158:	bne	192e8 <__generate_code_for_binary_boolean_expression@@Base+0x1898>
   1915c:	lsl	r0, r7, #3
   19160:	mov	r4, r1
   19164:	bl	11f4c <malloc@plt>
   19168:	mov	r1, r0
   1916c:	cmp	r7, #0
   19170:	beq	19310 <__generate_code_for_binary_boolean_expression@@Base+0x18c0>
   19174:	mov	r0, r7
   19178:	str	r7, [sp, #24]
   1917c:	str	r1, [sp, #12]
   19180:	ldr	r2, [sp, #20]
   19184:	ldr	r3, [r2, r5]!
   19188:	adds	r5, r5, #8
   1918c:	ldr	r2, [r2, #4]
   19190:	str	r3, [r1]
   19194:	adc	r9, r9, #0
   19198:	str	r2, [r1, #4]
   1919c:	subs	r0, r0, #1
   191a0:	add	r1, r1, #8
   191a4:	bne	19180 <__generate_code_for_binary_boolean_expression@@Base+0x1730>
   191a8:	ldr	lr, [pc, #1236]	; 19684 <__generate_code_for_binary_boolean_expression@@Base+0x1c34>
   191ac:	add	lr, pc, lr
   191b0:	mov	r0, lr
   191b4:	stm	r0, {r5, r9}
   191b8:	ldr	ip, [pc, #1224]	; 19688 <__generate_code_for_binary_boolean_expression@@Base+0x1c38>
   191bc:	ldr	r0, [sp, #12]
   191c0:	add	ip, pc, ip
   191c4:	mov	r6, ip
   191c8:	ldr	ip, [sp, #24]
   191cc:	b	1932c <__generate_code_for_binary_boolean_expression@@Base+0x18dc>
   191d0:	str	r3, [sp, #16]
   191d4:	ldr	r3, [pc, #1208]	; 19694 <__generate_code_for_binary_boolean_expression@@Base+0x1c44>
   191d8:	mov	lr, r5
   191dc:	mov	r7, ip
   191e0:	lsr	ip, r5, #16
   191e4:	ldr	r3, [pc, r3]
   191e8:	lsr	r1, r5, #8
   191ec:	str	r3, [sp, #20]
   191f0:	strb	lr, [r3, r4]!
   191f4:	lsr	r0, lr, #24
   191f8:	strb	r1, [r3, #1]
   191fc:	strb	r0, [r3, #3]
   19200:	strb	ip, [r3, #2]
   19204:	ldr	lr, [pc, #1164]	; 19698 <__generate_code_for_binary_boolean_expression@@Base+0x1c48>
   19208:	lsl	r5, r7, #1
   1920c:	add	lr, pc, lr
   19210:	mov	r1, r8
   19214:	mov	r8, r5
   19218:	str	r9, [lr]
   1921c:	str	r2, [lr, #4]
   19220:	mov	r5, r2
   19224:	str	r8, [sp, #24]
   19228:	mov	r8, r1
   1922c:	ldr	r0, [sp, #16]
   19230:	ldr	r2, [r8, #4]
   19234:	ldr	r3, [pc, #1140]	; 196b0 <__generate_code_for_binary_boolean_expression@@Base+0x1c60>
   19238:	adds	ip, r4, #8
   1923c:	adc	r1, r0, #0
   19240:	mov	r0, #0
   19244:	ldr	r3, [pc, r3]
   19248:	subs	r3, r3, ip
   1924c:	sbcs	r1, r2, r1
   19250:	bcs	192c8 <__generate_code_for_binary_boolean_expression@@Base+0x1878>
   19254:	ldr	r5, [pc, #1112]	; 196b4 <__generate_code_for_binary_boolean_expression@@Base+0x1c64>
   19258:	mov	r0, #3
   1925c:	ldr	r1, [sp, #16]
   19260:	orr	r0, r0, #131072	; 0x20000
   19264:	adds	r0, r4, r0
   19268:	adc	r1, r1, #0
   1926c:	adds	r0, r0, #4
   19270:	adc	r1, r1, #0
   19274:	mvn	r2, #0
   19278:	and	r9, r1, r2
   1927c:	mov	r1, #16646144	; 0xfe0000
   19280:	orr	r1, r1, #-16777216	; 0xff000000
   19284:	and	r4, r0, r1
   19288:	ldr	r0, [sp, #20]
   1928c:	mov	r1, r4
   19290:	add	r5, pc, r5
   19294:	bl	11f1c <realloc@plt>
   19298:	ldr	ip, [pc, #1048]	; 196b8 <__generate_code_for_binary_boolean_expression@@Base+0x1c68>
   1929c:	ldr	lr, [pc, #1048]	; 196bc <__generate_code_for_binary_boolean_expression@@Base+0x1c6c>
   192a0:	stm	r8, {r4, r9}
   192a4:	add	lr, pc, lr
   192a8:	str	r0, [r5]
   192ac:	str	r0, [sp, #20]
   192b0:	ldr	r5, [lr, #4]
   192b4:	ldr	r9, [pc, #1028]	; 196c0 <__generate_code_for_binary_boolean_expression@@Base+0x1c70>
   192b8:	add	ip, pc, ip
   192bc:	mov	r6, ip
   192c0:	mov	r0, #0
   192c4:	ldr	r9, [pc, r9]
   192c8:	ldr	r8, [sp, #24]
   192cc:	b	19374 <__generate_code_for_binary_boolean_expression@@Base+0x1924>
   192d0:	ldr	r1, [sp, #16]
   192d4:	mov	r0, #0
   192d8:	b	19340 <__generate_code_for_binary_boolean_expression@@Base+0x18f0>
   192dc:	ldr	r1, [pc, #904]	; 1966c <__generate_code_for_binary_boolean_expression@@Base+0x1c1c>
   192e0:	add	r1, pc, r1
   192e4:	b	192f0 <__generate_code_for_binary_boolean_expression@@Base+0x18a0>
   192e8:	ldr	r1, [pc, #904]	; 19678 <__generate_code_for_binary_boolean_expression@@Base+0x1c28>
   192ec:	add	r1, pc, r1
   192f0:	ldr	r0, [pc, #888]	; 19670 <__generate_code_for_binary_boolean_expression@@Base+0x1c20>
   192f4:	ldr	r0, [pc, r0]
   192f8:	ldr	r0, [r0]
   192fc:	ldr	r2, [pc, #880]	; 19674 <__generate_code_for_binary_boolean_expression@@Base+0x1c24>
   19300:	ldr	r2, [pc, r2]
   19304:	sub	sp, fp, #28
   19308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1930c:	b	11fb8 <fprintf@plt>
   19310:	ldr	lr, [pc, #868]	; 1967c <__generate_code_for_binary_boolean_expression@@Base+0x1c2c>
   19314:	ldr	ip, [pc, #868]	; 19680 <__generate_code_for_binary_boolean_expression@@Base+0x1c30>
   19318:	mov	r0, r1
   1931c:	add	lr, pc, lr
   19320:	add	ip, pc, ip
   19324:	mov	r6, ip
   19328:	mov	ip, r7
   1932c:	mov	r9, r4
   19330:	ldr	r5, [sp, #8]
   19334:	ldr	r4, [sp, #4]
   19338:	ldr	r1, [sp, #16]
   1933c:	mov	r7, #0
   19340:	str	r4, [lr]
   19344:	str	r1, [lr, #4]
   19348:	ldr	r2, [sp, #20]
   1934c:	mov	r1, #1
   19350:	lsl	r8, ip, #1
   19354:	strb	r7, [r2, r4]!
   19358:	strb	r1, [r2, #3]
   1935c:	mov	r1, #161	; 0xa1
   19360:	strb	r7, [r2, #1]
   19364:	strb	r1, [r2, #2]
   19368:	str	r9, [lr]
   1936c:	str	r5, [lr, #4]
   19370:	mov	r7, ip
   19374:	ldr	r3, [sp, #20]
   19378:	lsr	r1, r8, #16
   1937c:	mov	ip, r3
   19380:	strb	r8, [r3, r9]!
   19384:	lsr	r4, r8, #24
   19388:	lsr	r2, r8, #8
   1938c:	adds	r8, r9, #4
   19390:	strb	r1, [r3, #2]
   19394:	adc	r1, r5, #0
   19398:	cmp	r7, #0
   1939c:	strb	r4, [r3, #3]
   193a0:	strb	r2, [r3, #1]
   193a4:	str	r8, [lr]
   193a8:	str	r1, [lr, #4]
   193ac:	str	r7, [sp, #24]
   193b0:	beq	1964c <__generate_code_for_binary_boolean_expression@@Base+0x1bfc>
   193b4:	ldr	r7, [pc, #776]	; 196c4 <__generate_code_for_binary_boolean_expression@@Base+0x1c74>
   193b8:	mov	r4, lr
   193bc:	mov	r2, r0
   193c0:	add	r7, pc, r7
   193c4:	str	r0, [sp, #12]
   193c8:	cmp	r0, #0
   193cc:	mov	r0, r4
   193d0:	str	r2, [sp, #16]
   193d4:	beq	193e0 <__generate_code_for_binary_boolean_expression@@Base+0x1990>
   193d8:	ldrd	r2, [r2]
   193dc:	b	193e8 <__generate_code_for_binary_boolean_expression@@Base+0x1998>
   193e0:	mov	r2, #0
   193e4:	mov	r3, #0
   193e8:	ldrd	r4, [sl]
   193ec:	adds	r4, r4, r2
   193f0:	adc	r5, r5, r3
   193f4:	strd	r4, [sl]
   193f8:	ldrb	r2, [r6]
   193fc:	str	sl, [sp, #20]
   19400:	cmp	r2, #0
   19404:	beq	194d0 <__generate_code_for_binary_boolean_expression@@Base+0x1a80>
   19408:	ldr	r3, [r7, #4]
   1940c:	ldr	r6, [pc, #692]	; 196c8 <__generate_code_for_binary_boolean_expression@@Base+0x1c78>
   19410:	adds	r2, r8, #4
   19414:	adc	r9, r1, #0
   19418:	ldr	r6, [pc, r6]
   1941c:	subs	r2, r6, r2
   19420:	sbcs	r2, r3, r9
   19424:	bcs	1950c <__generate_code_for_binary_boolean_expression@@Base+0x1abc>
   19428:	mov	r2, #3
   1942c:	orr	r2, r2, #131072	; 0x20000
   19430:	adds	r0, r8, r2
   19434:	adc	r1, r1, #0
   19438:	mvn	r2, #0
   1943c:	and	r8, r1, r2
   19440:	mov	r1, #16646144	; 0xfe0000
   19444:	orr	r1, r1, #-16777216	; 0xff000000
   19448:	and	r6, r0, r1
   1944c:	mov	r0, ip
   19450:	mov	r1, r6
   19454:	bl	11f1c <realloc@plt>
   19458:	ldr	ip, [pc, #620]	; 196cc <__generate_code_for_binary_boolean_expression@@Base+0x1c7c>
   1945c:	ldr	lr, [pc, #620]	; 196d0 <__generate_code_for_binary_boolean_expression@@Base+0x1c80>
   19460:	stm	r7, {r6, r8}
   19464:	mov	r3, r0
   19468:	ldr	r0, [pc, #612]	; 196d4 <__generate_code_for_binary_boolean_expression@@Base+0x1c84>
   1946c:	add	lr, pc, lr
   19470:	mov	r9, lr
   19474:	add	r0, pc, r0
   19478:	add	ip, pc, ip
   1947c:	str	r3, [r0]
   19480:	mov	lr, ip
   19484:	ldrb	ip, [ip]
   19488:	ldr	r1, [r9, #4]
   1948c:	ldr	r8, [pc, #580]	; 196d8 <__generate_code_for_binary_boolean_expression@@Base+0x1c88>
   19490:	mov	r7, r3
   19494:	lsr	r2, r4, #24
   19498:	ldr	r8, [pc, r8]
   1949c:	lsr	r6, r4, #16
   194a0:	strb	r4, [r7, r8]!
   194a4:	strb	r2, [r7, #3]
   194a8:	lsr	r2, r4, #8
   194ac:	strb	r2, [r7, #1]
   194b0:	adds	r2, r8, #4
   194b4:	mov	r4, r9
   194b8:	adc	r9, r1, #0
   194bc:	cmp	ip, #1
   194c0:	strb	r6, [r7, #2]
   194c4:	stm	r4, {r2, r9}
   194c8:	beq	19540 <__generate_code_for_binary_boolean_expression@@Base+0x1af0>
   194cc:	b	195ec <__generate_code_for_binary_boolean_expression@@Base+0x1b9c>
   194d0:	mov	r7, ip
   194d4:	lsr	r2, r4, #24
   194d8:	strb	r4, [r7, r8]!
   194dc:	lsr	r9, r4, #16
   194e0:	strb	r2, [r7, #3]
   194e4:	adds	r2, r8, #4
   194e8:	mov	lr, r6
   194ec:	lsr	r6, r4, #8
   194f0:	strb	r9, [r7, #2]
   194f4:	adc	r9, r1, #0
   194f8:	mov	r4, r0
   194fc:	strb	r6, [r7, #1]
   19500:	mov	r3, ip
   19504:	stm	r4, {r2, r9}
   19508:	b	195ec <__generate_code_for_binary_boolean_expression@@Base+0x1b9c>
   1950c:	mov	r6, ip
   19510:	lsr	r2, r4, #24
   19514:	strb	r4, [r6, r8]!
   19518:	lsr	r9, r4, #16
   1951c:	strb	r2, [r6, #3]
   19520:	adds	r2, r8, #4
   19524:	lsr	r7, r4, #8
   19528:	strb	r9, [r6, #2]
   1952c:	adc	r9, r1, #0
   19530:	mov	r4, r0
   19534:	strb	r7, [r6, #1]
   19538:	mov	r3, ip
   1953c:	stm	r4, {r2, r9}
   19540:	ldr	lr, [pc, #404]	; 196dc <__generate_code_for_binary_boolean_expression@@Base+0x1c8c>
   19544:	mov	r0, r4
   19548:	adds	r7, r8, #8
   1954c:	add	lr, pc, lr
   19550:	adc	ip, r1, #0
   19554:	ldr	r4, [lr, #4]
   19558:	ldr	r6, [pc, #384]	; 196e0 <__generate_code_for_binary_boolean_expression@@Base+0x1c90>
   1955c:	ldr	r6, [pc, r6]
   19560:	subs	r7, r6, r7
   19564:	sbcs	r7, r4, ip
   19568:	bcs	195e0 <__generate_code_for_binary_boolean_expression@@Base+0x1b90>
   1956c:	mov	r2, #3
   19570:	orr	r2, r2, #131072	; 0x20000
   19574:	adds	r0, r8, r2
   19578:	adc	r1, r1, #0
   1957c:	adds	r0, r0, #4
   19580:	adc	r1, r1, #0
   19584:	mvn	r2, #0
   19588:	and	r7, r1, r2
   1958c:	mov	r1, #16646144	; 0xfe0000
   19590:	orr	r1, r1, #-16777216	; 0xff000000
   19594:	and	r6, r0, r1
   19598:	mov	r0, r3
   1959c:	mov	r1, r6
   195a0:	mov	r8, lr
   195a4:	bl	11f1c <realloc@plt>
   195a8:	ldr	lr, [pc, #312]	; 196e8 <__generate_code_for_binary_boolean_expression@@Base+0x1c98>
   195ac:	strd	r6, [r8]
   195b0:	mov	r3, r0
   195b4:	add	lr, pc, lr
   195b8:	mov	r4, lr
   195bc:	ldr	r9, [lr, #4]
   195c0:	ldr	r0, [pc, #292]	; 196ec <__generate_code_for_binary_boolean_expression@@Base+0x1c9c>
   195c4:	add	r0, pc, r0
   195c8:	str	r3, [r0]
   195cc:	ldr	r2, [pc, #284]	; 196f0 <__generate_code_for_binary_boolean_expression@@Base+0x1ca0>
   195d0:	ldr	r2, [pc, r2]
   195d4:	ldr	lr, [pc, #280]	; 196f4 <__generate_code_for_binary_boolean_expression@@Base+0x1ca4>
   195d8:	add	lr, pc, lr
   195dc:	b	195ec <__generate_code_for_binary_boolean_expression@@Base+0x1b9c>
   195e0:	ldr	lr, [pc, #252]	; 196e4 <__generate_code_for_binary_boolean_expression@@Base+0x1c94>
   195e4:	mov	r4, r0
   195e8:	add	lr, pc, lr
   195ec:	mov	ip, r3
   195f0:	lsr	r1, r5, #16
   195f4:	strb	r5, [r3, r2]!
   195f8:	lsr	r0, r5, #24
   195fc:	lsr	r7, r5, #8
   19600:	adds	r8, r2, #4
   19604:	strb	r1, [r3, #2]
   19608:	adc	r1, r9, #0
   1960c:	strb	r0, [r3, #3]
   19610:	strb	r7, [r3, #1]
   19614:	str	r8, [r4]
   19618:	str	r1, [r4, #4]
   1961c:	ldr	r0, [sp, #24]
   19620:	mov	r6, lr
   19624:	subs	r0, r0, #1
   19628:	str	r0, [sp, #24]
   1962c:	ldr	sl, [sp, #20]
   19630:	ldr	r2, [sp, #16]
   19634:	ldr	r0, [sp, #12]
   19638:	ldr	r7, [pc, #184]	; 196f8 <__generate_code_for_binary_boolean_expression@@Base+0x1ca8>
   1963c:	add	sl, sl, #8
   19640:	add	r2, r2, #8
   19644:	add	r7, pc, r7
   19648:	bne	193c8 <__generate_code_for_binary_boolean_expression@@Base+0x1978>
   1964c:	sub	sp, fp, #28
   19650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19654:	b	11ed4 <free@plt>
   19658:	andeq	r5, r1, ip, asr #2
   1965c:	andeq	r5, r1, r8, asr #2
   19660:	andeq	r5, r1, ip, lsr r1
   19664:	andeq	r5, r1, r0, lsr #2
   19668:	andeq	r5, r1, r4, lsl r0
   1966c:	andeq	r2, r0, r0, asr #30
   19670:	andeq	r3, r1, r0, asr #27
   19674:	ldrdeq	r4, [r1], -r8
   19678:	andeq	r2, r0, lr, ror pc
   1967c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   19680:			; <UNDEFINED> instruction: 0x00014dbc
   19684:	andeq	r4, r1, r4, asr #30
   19688:	andeq	r4, r1, ip, lsl pc
   1968c:	andeq	r5, r1, r0, lsl r1
   19690:	strdeq	r5, [r1], -ip
   19694:	andeq	r4, r1, r0, lsl #30
   19698:	andeq	r4, r1, r4, ror #29
   1969c:	strheq	r5, [r1], -r8
   196a0:	muleq	r1, r8, r0
   196a4:	andeq	r5, r1, r8, lsr #1
   196a8:	muleq	r1, r8, r0
   196ac:	andeq	r5, r1, r0, lsl #1
   196b0:	andeq	r4, r1, r4, lsr #29
   196b4:	andeq	r4, r1, r4, asr lr
   196b8:	andeq	r4, r1, r4, lsr #28
   196bc:	andeq	r4, r1, ip, asr #28
   196c0:	andeq	r4, r1, ip, lsr #28
   196c4:	andeq	r4, r1, r8, lsr #26
   196c8:	ldrdeq	r4, [r1], -r0
   196cc:	andeq	r4, r1, r4, ror #24
   196d0:	andeq	r4, r1, r4, lsl #25
   196d4:	andeq	r4, r1, r0, ror ip
   196d8:	andeq	r4, r1, r8, asr ip
   196dc:	muleq	r1, ip, fp
   196e0:	andeq	r4, r1, ip, lsl #23
   196e4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   196e8:	andeq	r4, r1, ip, lsr fp
   196ec:	andeq	r4, r1, r0, lsr #22
   196f0:	andeq	r4, r1, r0, lsr #22
   196f4:	andeq	r4, r1, r4, lsl #22
   196f8:	andeq	r4, r1, r4, lsr #21
   196fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19700:	add	fp, sp, #28
   19704:	sub	sp, sp, #4
   19708:	ldr	r0, [pc, #3180]	; 1a37c <__generate_code_for_binary_boolean_expression@@Base+0x292c>
   1970c:	ldr	r0, [pc, r0]
   19710:	cmp	r0, #0
   19714:	beq	19d70 <__generate_code_for_binary_boolean_expression@@Base+0x2320>
   19718:	ldr	sl, [pc, #3168]	; 1a380 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   1971c:	add	sl, pc, sl
   19720:	ldr	r6, [sl, #4]
   19724:	ldr	r5, [pc, #3160]	; 1a384 <__generate_code_for_binary_boolean_expression@@Base+0x2934>
   19728:	ldr	r5, [pc, r5]
   1972c:	ldr	r8, [pc, #3156]	; 1a388 <__generate_code_for_binary_boolean_expression@@Base+0x2938>
   19730:	add	r8, pc, r8
   19734:	ldrb	r0, [r8]
   19738:	cmp	r0, #0
   1973c:	beq	19800 <__generate_code_for_binary_boolean_expression@@Base+0x1db0>
   19740:	ldr	r9, [pc, #3164]	; 1a3a4 <__generate_code_for_binary_boolean_expression@@Base+0x2954>
   19744:	adds	r2, r5, #4
   19748:	adc	ip, r6, #0
   1974c:	add	r9, pc, r9
   19750:	ldr	r0, [r9, #4]
   19754:	ldr	r3, [pc, #3148]	; 1a3a8 <__generate_code_for_binary_boolean_expression@@Base+0x2958>
   19758:	ldr	r3, [pc, r3]
   1975c:	subs	r3, r3, r2
   19760:	sbcs	r0, r0, ip
   19764:	bcs	19854 <__generate_code_for_binary_boolean_expression@@Base+0x1e04>
   19768:	mov	r0, #7
   1976c:	orr	r0, r0, #131072	; 0x20000
   19770:	adds	r0, r5, r0
   19774:	adc	r1, r6, #0
   19778:	subs	r0, r0, #4
   1977c:	sbc	r1, r1, #0
   19780:	mvn	r2, #0
   19784:	and	r5, r1, r2
   19788:	mov	r1, #16646144	; 0xfe0000
   1978c:	orr	r1, r1, #-16777216	; 0xff000000
   19790:	ldr	r4, [pc, #3096]	; 1a3b0 <__generate_code_for_binary_boolean_expression@@Base+0x2960>
   19794:	and	r6, r0, r1
   19798:	ldr	r0, [pc, #3092]	; 1a3b4 <__generate_code_for_binary_boolean_expression@@Base+0x2964>
   1979c:	mov	r1, r6
   197a0:	add	r4, pc, r4
   197a4:	ldr	r0, [pc, r0]
   197a8:	bl	11f1c <realloc@plt>
   197ac:	str	r6, [r9]
   197b0:	str	r5, [r9, #4]
   197b4:	str	r0, [r4]
   197b8:	ldrb	r3, [r8]
   197bc:	ldr	r6, [sl, #4]
   197c0:	ldr	r5, [pc, #3056]	; 1a3b8 <__generate_code_for_binary_boolean_expression@@Base+0x2968>
   197c4:	mov	r2, r0
   197c8:	mov	r1, #0
   197cc:	mov	r7, #161	; 0xa1
   197d0:	ldr	r5, [pc, r5]
   197d4:	strb	r1, [r2, r5]!
   197d8:	strb	r7, [r2, #3]
   197dc:	strb	r1, [r2, #2]
   197e0:	strb	r1, [r2, #1]
   197e4:	adds	r2, r5, #4
   197e8:	adc	ip, r6, #0
   197ec:	mov	r7, #1
   197f0:	cmp	r3, #1
   197f4:	stm	sl, {r2, ip}
   197f8:	beq	1987c <__generate_code_for_binary_boolean_expression@@Base+0x1e2c>
   197fc:	b	19a54 <__generate_code_for_binary_boolean_expression@@Base+0x2004>
   19800:	ldr	r0, [pc, #2948]	; 1a38c <__generate_code_for_binary_boolean_expression@@Base+0x293c>
   19804:	ldr	r0, [pc, r0]
   19808:	mov	r1, r0
   1980c:	ldrb	r2, [r1, r5]!
   19810:	ldrb	r3, [r1, #1]
   19814:	ldrb	r7, [r1, #2]
   19818:	ldrb	r1, [r1, #3]
   1981c:	orr	r2, r2, r3, lsl #8
   19820:	orr	r2, r2, r7, lsl #16
   19824:	orr	r3, r2, r1, lsl #24
   19828:	adds	r2, r5, #4
   1982c:	adc	ip, r6, #0
   19830:	cmp	r3, #-1593835520	; 0xa1000000
   19834:	stm	sl, {r2, ip}
   19838:	beq	199f4 <__generate_code_for_binary_boolean_expression@@Base+0x1fa4>
   1983c:	mov	r7, #1
   19840:	cmn	r3, #1
   19844:	beq	19a34 <__generate_code_for_binary_boolean_expression@@Base+0x1fe4>
   19848:	ldr	r1, [pc, #2880]	; 1a390 <__generate_code_for_binary_boolean_expression@@Base+0x2940>
   1984c:	add	r1, pc, r1
   19850:	b	1a134 <__generate_code_for_binary_boolean_expression@@Base+0x26e4>
   19854:	ldr	r0, [pc, #2896]	; 1a3ac <__generate_code_for_binary_boolean_expression@@Base+0x295c>
   19858:	mov	r3, #0
   1985c:	mov	r4, #161	; 0xa1
   19860:	ldr	r0, [pc, r0]
   19864:	mov	r7, r0
   19868:	strb	r3, [r7, r5]!
   1986c:	strb	r4, [r7, #3]
   19870:	strb	r3, [r7, #2]
   19874:	strb	r3, [r7, #1]
   19878:	stm	sl, {r2, ip}
   1987c:	ldr	r4, [r9, #4]
   19880:	ldr	r1, [pc, #2868]	; 1a3bc <__generate_code_for_binary_boolean_expression@@Base+0x296c>
   19884:	adds	r3, r5, #8
   19888:	adc	r7, r6, #0
   1988c:	ldr	r1, [pc, r1]
   19890:	subs	r1, r1, r3
   19894:	sbcs	r1, r4, r7
   19898:	bcs	19924 <__generate_code_for_binary_boolean_expression@@Base+0x1ed4>
   1989c:	mov	r1, #7
   198a0:	orr	r1, r1, #131072	; 0x20000
   198a4:	adds	r1, r5, r1
   198a8:	adc	r2, r6, #0
   198ac:	mvn	r3, #0
   198b0:	and	r5, r2, r3
   198b4:	mov	r2, #16646144	; 0xfe0000
   198b8:	orr	r2, r2, #-16777216	; 0xff000000
   198bc:	ldr	r4, [pc, #2812]	; 1a3c0 <__generate_code_for_binary_boolean_expression@@Base+0x2970>
   198c0:	and	r6, r1, r2
   198c4:	mov	r1, r6
   198c8:	add	r4, pc, r4
   198cc:	bl	11f1c <realloc@plt>
   198d0:	str	r6, [r9]
   198d4:	str	r5, [r9, #4]
   198d8:	str	r0, [r4]
   198dc:	ldrb	r1, [r8]
   198e0:	ldr	ip, [sl, #4]
   198e4:	ldr	r2, [pc, #2776]	; 1a3c4 <__generate_code_for_binary_boolean_expression@@Base+0x2974>
   198e8:	mov	r7, r0
   198ec:	mov	r3, #9
   198f0:	ldr	r2, [pc, r2]
   198f4:	strb	r3, [r7, r2]!
   198f8:	mov	r3, #0
   198fc:	strb	r3, [r7, #3]
   19900:	strb	r3, [r7, #2]
   19904:	strb	r3, [r7, #1]
   19908:	adds	r3, r2, #4
   1990c:	adc	r5, ip, #0
   19910:	mov	r7, #1
   19914:	cmp	r1, #1
   19918:	stm	sl, {r3, r5}
   1991c:	beq	1994c <__generate_code_for_binary_boolean_expression@@Base+0x1efc>
   19920:	b	19a7c <__generate_code_for_binary_boolean_expression@@Base+0x202c>
   19924:	mov	r3, r0
   19928:	mov	r1, #9
   1992c:	strb	r1, [r3, r2]!
   19930:	mov	r1, #0
   19934:	strb	r1, [r3, #3]
   19938:	strb	r1, [r3, #2]
   1993c:	strb	r1, [r3, #1]
   19940:	adds	r3, r2, #4
   19944:	adc	r5, ip, #0
   19948:	stm	sl, {r3, r5}
   1994c:	ldr	r6, [r9, #4]
   19950:	ldr	r4, [pc, #2672]	; 1a3c8 <__generate_code_for_binary_boolean_expression@@Base+0x2978>
   19954:	adds	r1, r2, #8
   19958:	adc	r7, ip, #0
   1995c:	ldr	r4, [pc, r4]
   19960:	subs	r1, r4, r1
   19964:	sbcs	r1, r6, r7
   19968:	bcs	19e40 <__generate_code_for_binary_boolean_expression@@Base+0x23f0>
   1996c:	mov	r1, #7
   19970:	orr	r1, r1, #131072	; 0x20000
   19974:	adds	r1, r2, r1
   19978:	adc	r2, ip, #0
   1997c:	mvn	r3, #0
   19980:	and	r5, r2, r3
   19984:	mov	r2, #16646144	; 0xfe0000
   19988:	orr	r2, r2, #-16777216	; 0xff000000
   1998c:	ldr	r4, [pc, #2616]	; 1a3cc <__generate_code_for_binary_boolean_expression@@Base+0x297c>
   19990:	and	r6, r1, r2
   19994:	mov	r1, r6
   19998:	add	r4, pc, r4
   1999c:	bl	11f1c <realloc@plt>
   199a0:	str	r6, [r9]
   199a4:	str	r5, [r9, #4]
   199a8:	str	r0, [r4]
   199ac:	ldrb	r2, [r8]
   199b0:	ldr	r5, [sl, #4]
   199b4:	ldr	r3, [pc, #2580]	; 1a3d0 <__generate_code_for_binary_boolean_expression@@Base+0x2980>
   199b8:	mov	r7, r0
   199bc:	mov	r1, #0
   199c0:	ldr	r3, [pc, r3]
   199c4:	adds	r6, r3, #4
   199c8:	strb	r1, [r7, r3]!
   199cc:	strb	r1, [r7, #3]
   199d0:	strb	r1, [r7, #2]
   199d4:	strb	r1, [r7, #1]
   199d8:	adc	r1, r5, #0
   199dc:	mov	r7, #1
   199e0:	cmp	r2, #1
   199e4:	str	r6, [sl]
   199e8:	str	r1, [sl, #4]
   199ec:	bne	19aa4 <__generate_code_for_binary_boolean_expression@@Base+0x2054>
   199f0:	b	19e68 <__generate_code_for_binary_boolean_expression@@Base+0x2418>
   199f4:	ldr	r3, [r0, r2]
   199f8:	adds	r4, r5, #8
   199fc:	adc	r7, r6, #0
   19a00:	cmp	r3, #9
   19a04:	stm	sl, {r4, r7}
   19a08:	bne	1a12c <__generate_code_for_binary_boolean_expression@@Base+0x26dc>
   19a0c:	ldr	r3, [pc, #2444]	; 1a3a0 <__generate_code_for_binary_boolean_expression@@Base+0x2950>
   19a10:	adds	r4, r5, #20
   19a14:	adc	r7, r6, #0
   19a18:	add	r3, pc, r3
   19a1c:	add	r6, r0, r5
   19a20:	ldrb	r3, [r3]
   19a24:	ldr	r6, [r6, #16]
   19a28:	stm	sl, {r4, r7}
   19a2c:	eor	r3, r3, #1
   19a30:	add	r7, r6, r3
   19a34:	mov	r6, r0
   19a38:	mov	r3, #0
   19a3c:	strb	r3, [r6, r5]!
   19a40:	mov	r5, #161	; 0xa1
   19a44:	strb	r5, [r6, #3]
   19a48:	strb	r3, [r6, #2]
   19a4c:	strb	r3, [r6, #1]
   19a50:	stm	sl, {r2, ip}
   19a54:	mov	r3, r0
   19a58:	mov	r1, #9
   19a5c:	strb	r1, [r3, r2]!
   19a60:	mov	r1, #0
   19a64:	strb	r1, [r3, #3]
   19a68:	strb	r1, [r3, #2]
   19a6c:	strb	r1, [r3, #1]
   19a70:	adds	r3, r2, #4
   19a74:	adc	r5, ip, #0
   19a78:	stm	sl, {r3, r5}
   19a7c:	mov	r2, r0
   19a80:	mov	r1, #0
   19a84:	strb	r1, [r2, r3]!
   19a88:	adds	r6, r3, #4
   19a8c:	strb	r1, [r2, #3]
   19a90:	strb	r1, [r2, #2]
   19a94:	strb	r1, [r2, #1]
   19a98:	adc	r1, r5, #0
   19a9c:	str	r6, [sl]
   19aa0:	str	r1, [sl, #4]
   19aa4:	mov	r3, r0
   19aa8:	mov	r2, #0
   19aac:	strb	r2, [r3, r6]!
   19ab0:	strb	r2, [r3, #3]
   19ab4:	strb	r2, [r3, #2]
   19ab8:	strb	r2, [r3, #1]
   19abc:	adds	r2, r6, #4
   19ac0:	adc	r3, r1, #0
   19ac4:	strd	r2, [sl]
   19ac8:	lsr	r1, r7, #24
   19acc:	strb	r7, [r0, r2]!
   19ad0:	lsr	r6, r7, #16
   19ad4:	lsr	r5, r7, #8
   19ad8:	strb	r1, [r0, #3]
   19adc:	strb	r6, [r0, #2]
   19ae0:	strb	r5, [r0, #1]
   19ae4:	ldrb	r0, [r8]
   19ae8:	adds	r4, r2, #4
   19aec:	adc	r5, r3, #0
   19af0:	cmp	r0, #0
   19af4:	strd	r4, [sl]
   19af8:	beq	19bac <__generate_code_for_binary_boolean_expression@@Base+0x215c>
   19afc:	ldr	r9, [pc, #2284]	; 1a3f0 <__generate_code_for_binary_boolean_expression@@Base+0x29a0>
   19b00:	adds	r0, r2, #8
   19b04:	adc	r1, r3, #0
   19b08:	add	r9, pc, r9
   19b0c:	ldr	r7, [r9, #4]
   19b10:	ldr	r6, [pc, #2268]	; 1a3f4 <__generate_code_for_binary_boolean_expression@@Base+0x29a4>
   19b14:	ldr	r6, [pc, r6]
   19b18:	subs	r0, r6, r0
   19b1c:	sbcs	r0, r7, r1
   19b20:	bcs	19d78 <__generate_code_for_binary_boolean_expression@@Base+0x2328>
   19b24:	mov	r0, #7
   19b28:	orr	r0, r0, #131072	; 0x20000
   19b2c:	adds	r0, r2, r0
   19b30:	adc	r1, r3, #0
   19b34:	mvn	r2, #0
   19b38:	and	r5, r1, r2
   19b3c:	mov	r1, #16646144	; 0xfe0000
   19b40:	orr	r1, r1, #-16777216	; 0xff000000
   19b44:	ldr	r4, [pc, #2268]	; 1a428 <__generate_code_for_binary_boolean_expression@@Base+0x29d8>
   19b48:	and	r6, r0, r1
   19b4c:	ldr	r0, [pc, #2264]	; 1a42c <__generate_code_for_binary_boolean_expression@@Base+0x29dc>
   19b50:	mov	r1, r6
   19b54:	add	r4, pc, r4
   19b58:	ldr	r0, [pc, r0]
   19b5c:	bl	11f1c <realloc@plt>
   19b60:	str	r6, [r9]
   19b64:	str	r5, [r9, #4]
   19b68:	str	r0, [r4]
   19b6c:	ldrb	r1, [r8]
   19b70:	ldr	r5, [sl, #4]
   19b74:	ldr	r4, [pc, #2228]	; 1a430 <__generate_code_for_binary_boolean_expression@@Base+0x29e0>
   19b78:	mov	r3, r0
   19b7c:	mov	r2, #0
   19b80:	ldr	r4, [pc, r4]
   19b84:	strb	r2, [r3, r4]!
   19b88:	strb	r2, [r3, #3]
   19b8c:	strb	r2, [r3, #2]
   19b90:	strb	r2, [r3, #1]
   19b94:	adds	r2, r4, #4
   19b98:	adc	r3, r5, #0
   19b9c:	cmp	r1, #0
   19ba0:	strd	r2, [sl]
   19ba4:	beq	19bd8 <__generate_code_for_binary_boolean_expression@@Base+0x2188>
   19ba8:	b	19da4 <__generate_code_for_binary_boolean_expression@@Base+0x2354>
   19bac:	ldr	r0, [pc, #2104]	; 1a3ec <__generate_code_for_binary_boolean_expression@@Base+0x299c>
   19bb0:	adds	r2, r2, #8
   19bb4:	mov	r1, #0
   19bb8:	adc	r3, r3, #0
   19bbc:	ldr	r0, [pc, r0]
   19bc0:	mov	r7, r0
   19bc4:	strb	r1, [r7, r4]!
   19bc8:	strb	r1, [r7, #3]
   19bcc:	strb	r1, [r7, #2]
   19bd0:	strb	r1, [r7, #1]
   19bd4:	strd	r2, [sl]
   19bd8:	mov	r7, r0
   19bdc:	mov	r1, #0
   19be0:	strb	r1, [r7, r2]!
   19be4:	strb	r1, [r7, #3]
   19be8:	strb	r1, [r7, #2]
   19bec:	strb	r1, [r7, #1]
   19bf0:	adds	r1, r2, #4
   19bf4:	adc	r5, r3, #0
   19bf8:	stm	sl, {r1, r5}
   19bfc:	mov	r3, r0
   19c00:	mov	r2, #0
   19c04:	strb	r2, [r3, r1]!
   19c08:	strb	r2, [r3, #3]
   19c0c:	strb	r2, [r3, #2]
   19c10:	strb	r2, [r3, #1]
   19c14:	adds	r2, r1, #4
   19c18:	adc	r3, r5, #0
   19c1c:	strd	r2, [sl]
   19c20:	mov	r7, r0
   19c24:	mov	r1, #0
   19c28:	strb	r1, [r7, r2]!
   19c2c:	strb	r1, [r7, #3]
   19c30:	strb	r1, [r7, #2]
   19c34:	strb	r1, [r7, #1]
   19c38:	adds	r1, r2, #4
   19c3c:	adc	r5, r3, #0
   19c40:	stm	sl, {r1, r5}
   19c44:	mov	r3, r0
   19c48:	mov	r2, #0
   19c4c:	strb	r2, [r3, r1]!
   19c50:	adds	r4, r1, #4
   19c54:	strb	r2, [r3, #3]
   19c58:	strb	r2, [r3, #2]
   19c5c:	strb	r2, [r3, #1]
   19c60:	adc	r3, r5, #0
   19c64:	str	r4, [sl]
   19c68:	str	r3, [sl, #4]
   19c6c:	mov	r2, r0
   19c70:	mov	r1, #0
   19c74:	strb	r1, [r2, r4]!
   19c78:	strb	r1, [r2, #3]
   19c7c:	strb	r1, [r2, #2]
   19c80:	strb	r1, [r2, #1]
   19c84:	adds	r2, r4, #4
   19c88:	adc	r1, r3, #0
   19c8c:	str	r2, [sl]
   19c90:	str	r1, [sl, #4]
   19c94:	mov	r3, r0
   19c98:	mov	r4, #0
   19c9c:	strb	r4, [r3, r2]!
   19ca0:	mov	r7, #163	; 0xa3
   19ca4:	strb	r7, [r3, #3]
   19ca8:	strb	r4, [r3, #2]
   19cac:	strb	r4, [r3, #1]
   19cb0:	ldrb	r7, [r8]
   19cb4:	adds	r6, r2, #4
   19cb8:	adc	r3, r1, #0
   19cbc:	cmp	r7, #1
   19cc0:	str	r6, [sl]
   19cc4:	str	r3, [sl, #4]
   19cc8:	bne	19d3c <__generate_code_for_binary_boolean_expression@@Base+0x22ec>
   19ccc:	ldr	r8, [pc, #1852]	; 1a410 <__generate_code_for_binary_boolean_expression@@Base+0x29c0>
   19cd0:	adds	lr, r2, #8
   19cd4:	adc	ip, r1, #0
   19cd8:	add	r8, pc, r8
   19cdc:	ldr	r5, [r8, #4]
   19ce0:	ldr	r7, [pc, #1836]	; 1a414 <__generate_code_for_binary_boolean_expression@@Base+0x29c4>
   19ce4:	ldr	r7, [pc, r7]
   19ce8:	subs	r7, r7, lr
   19cec:	sbcs	r7, r5, ip
   19cf0:	bcs	19d3c <__generate_code_for_binary_boolean_expression@@Base+0x22ec>
   19cf4:	mov	r3, #7
   19cf8:	orr	r3, r3, #131072	; 0x20000
   19cfc:	adds	r2, r2, r3
   19d00:	adc	r1, r1, #0
   19d04:	mvn	r3, #0
   19d08:	and	r7, r1, r3
   19d0c:	mov	r1, #16646144	; 0xfe0000
   19d10:	orr	r1, r1, #-16777216	; 0xff000000
   19d14:	ldr	r5, [pc, #1788]	; 1a418 <__generate_code_for_binary_boolean_expression@@Base+0x29c8>
   19d18:	and	r6, r2, r1
   19d1c:	mov	r1, r6
   19d20:	add	r5, pc, r5
   19d24:	bl	11f1c <realloc@plt>
   19d28:	strd	r6, [r8]
   19d2c:	str	r0, [r5]
   19d30:	ldr	r3, [sl, #4]
   19d34:	ldr	r6, [pc, #1760]	; 1a41c <__generate_code_for_binary_boolean_expression@@Base+0x29cc>
   19d38:	ldr	r6, [pc, r6]
   19d3c:	ldr	r0, [pc, #1756]	; 1a420 <__generate_code_for_binary_boolean_expression@@Base+0x29d0>
   19d40:	ldr	r1, [pc, #1756]	; 1a424 <__generate_code_for_binary_boolean_expression@@Base+0x29d4>
   19d44:	adds	r2, r6, #4
   19d48:	add	r0, pc, r0
   19d4c:	adc	r3, r3, #0
   19d50:	ldr	r1, [pc, r1]
   19d54:	strb	r4, [r1, r6]!
   19d58:	strb	r4, [r1, #3]
   19d5c:	strb	r4, [r1, #2]
   19d60:	strb	r4, [r1, #1]
   19d64:	mov	r1, #1
   19d68:	strd	r2, [sl]
   19d6c:	strb	r1, [r0]
   19d70:	sub	sp, fp, #28
   19d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d78:	ldr	r0, [pc, #1656]	; 1a3f8 <__generate_code_for_binary_boolean_expression@@Base+0x29a8>
   19d7c:	adds	r2, r2, #8
   19d80:	mov	r1, #0
   19d84:	adc	r3, r3, #0
   19d88:	ldr	r0, [pc, r0]
   19d8c:	mov	r7, r0
   19d90:	strb	r1, [r7, r4]!
   19d94:	strb	r1, [r7, #3]
   19d98:	strb	r1, [r7, #2]
   19d9c:	strb	r1, [r7, #1]
   19da0:	strd	r2, [sl]
   19da4:	ldr	r6, [r9, #4]
   19da8:	ldr	r1, [pc, #1668]	; 1a434 <__generate_code_for_binary_boolean_expression@@Base+0x29e4>
   19dac:	adds	ip, r4, #8
   19db0:	adc	r7, r5, #0
   19db4:	ldr	r1, [pc, r1]
   19db8:	subs	r1, r1, ip
   19dbc:	sbcs	r1, r6, r7
   19dc0:	bcs	19f0c <__generate_code_for_binary_boolean_expression@@Base+0x24bc>
   19dc4:	mov	r1, #7
   19dc8:	orr	r1, r1, #131072	; 0x20000
   19dcc:	adds	r1, r4, r1
   19dd0:	adc	r2, r5, #0
   19dd4:	mvn	r3, #0
   19dd8:	and	r5, r2, r3
   19ddc:	mov	r2, #16646144	; 0xfe0000
   19de0:	orr	r2, r2, #-16777216	; 0xff000000
   19de4:	ldr	r6, [pc, #1612]	; 1a438 <__generate_code_for_binary_boolean_expression@@Base+0x29e8>
   19de8:	and	r4, r1, r2
   19dec:	mov	r1, r4
   19df0:	add	r6, pc, r6
   19df4:	bl	11f1c <realloc@plt>
   19df8:	str	r0, [r6]
   19dfc:	strd	r4, [r9]
   19e00:	ldrb	r7, [r8]
   19e04:	ldr	r3, [sl, #4]
   19e08:	ldr	r2, [pc, #1580]	; 1a43c <__generate_code_for_binary_boolean_expression@@Base+0x29ec>
   19e0c:	mov	r6, r0
   19e10:	mov	r1, #0
   19e14:	ldr	r2, [pc, r2]
   19e18:	strb	r1, [r6, r2]!
   19e1c:	strb	r1, [r6, #3]
   19e20:	strb	r1, [r6, #2]
   19e24:	strb	r1, [r6, #1]
   19e28:	adds	r1, r2, #4
   19e2c:	adc	r5, r3, #0
   19e30:	cmp	r7, #1
   19e34:	stm	sl, {r1, r5}
   19e38:	bne	19bfc <__generate_code_for_binary_boolean_expression@@Base+0x21ac>
   19e3c:	b	19f30 <__generate_code_for_binary_boolean_expression@@Base+0x24e0>
   19e40:	mov	r2, r0
   19e44:	mov	r1, #0
   19e48:	strb	r1, [r2, r3]!
   19e4c:	adds	r6, r3, #4
   19e50:	strb	r1, [r2, #3]
   19e54:	strb	r1, [r2, #2]
   19e58:	strb	r1, [r2, #1]
   19e5c:	adc	r1, r5, #0
   19e60:	str	r6, [sl]
   19e64:	str	r1, [sl, #4]
   19e68:	ldr	r4, [r9, #4]
   19e6c:	ldr	r2, [pc, #1376]	; 1a3d4 <__generate_code_for_binary_boolean_expression@@Base+0x2984>
   19e70:	adds	ip, r3, #8
   19e74:	adc	r7, r5, #0
   19e78:	ldr	r2, [pc, r2]
   19e7c:	subs	r2, r2, ip
   19e80:	sbcs	r2, r4, r7
   19e84:	bcs	19fd0 <__generate_code_for_binary_boolean_expression@@Base+0x2580>
   19e88:	mov	r1, #7
   19e8c:	orr	r1, r1, #131072	; 0x20000
   19e90:	adds	r1, r3, r1
   19e94:	adc	r2, r5, #0
   19e98:	mvn	r3, #0
   19e9c:	and	r5, r2, r3
   19ea0:	mov	r2, #16646144	; 0xfe0000
   19ea4:	orr	r2, r2, #-16777216	; 0xff000000
   19ea8:	ldr	r4, [pc, #1320]	; 1a3d8 <__generate_code_for_binary_boolean_expression@@Base+0x2988>
   19eac:	and	r6, r1, r2
   19eb0:	mov	r1, r6
   19eb4:	add	r4, pc, r4
   19eb8:	bl	11f1c <realloc@plt>
   19ebc:	str	r6, [r9]
   19ec0:	str	r5, [r9, #4]
   19ec4:	str	r0, [r4]
   19ec8:	ldrb	r5, [r8]
   19ecc:	ldr	r1, [sl, #4]
   19ed0:	ldr	r6, [pc, #1284]	; 1a3dc <__generate_code_for_binary_boolean_expression@@Base+0x298c>
   19ed4:	mov	r3, r0
   19ed8:	mov	r2, #0
   19edc:	mov	r7, #1
   19ee0:	ldr	r6, [pc, r6]
   19ee4:	strb	r2, [r3, r6]!
   19ee8:	strb	r2, [r3, #3]
   19eec:	strb	r2, [r3, #2]
   19ef0:	strb	r2, [r3, #1]
   19ef4:	adds	r2, r6, #4
   19ef8:	adc	r3, r1, #0
   19efc:	cmp	r5, #1
   19f00:	strd	r2, [sl]
   19f04:	bne	19ac8 <__generate_code_for_binary_boolean_expression@@Base+0x2078>
   19f08:	b	19ff4 <__generate_code_for_binary_boolean_expression@@Base+0x25a4>
   19f0c:	mov	r7, r0
   19f10:	mov	r1, #0
   19f14:	strb	r1, [r7, r2]!
   19f18:	strb	r1, [r7, #3]
   19f1c:	strb	r1, [r7, #2]
   19f20:	strb	r1, [r7, #1]
   19f24:	adds	r1, r2, #4
   19f28:	adc	r5, r3, #0
   19f2c:	stm	sl, {r1, r5}
   19f30:	ldr	r4, [r9, #4]
   19f34:	ldr	r6, [pc, #1284]	; 1a440 <__generate_code_for_binary_boolean_expression@@Base+0x29f0>
   19f38:	adds	r7, r2, #8
   19f3c:	adc	ip, r3, #0
   19f40:	ldr	r6, [pc, r6]
   19f44:	subs	r7, r6, r7
   19f48:	sbcs	r7, r4, ip
   19f4c:	bcs	1a068 <__generate_code_for_binary_boolean_expression@@Base+0x2618>
   19f50:	mov	r1, #7
   19f54:	orr	r1, r1, #131072	; 0x20000
   19f58:	adds	r1, r2, r1
   19f5c:	adc	r2, r3, #0
   19f60:	mvn	r3, #0
   19f64:	and	r5, r2, r3
   19f68:	mov	r2, #16646144	; 0xfe0000
   19f6c:	orr	r2, r2, #-16777216	; 0xff000000
   19f70:	ldr	r4, [pc, #1228]	; 1a444 <__generate_code_for_binary_boolean_expression@@Base+0x29f4>
   19f74:	and	r6, r1, r2
   19f78:	mov	r1, r6
   19f7c:	add	r4, pc, r4
   19f80:	bl	11f1c <realloc@plt>
   19f84:	str	r6, [r9]
   19f88:	str	r5, [r9, #4]
   19f8c:	str	r0, [r4]
   19f90:	ldrb	r7, [r8]
   19f94:	ldr	r5, [sl, #4]
   19f98:	ldr	r1, [pc, #1192]	; 1a448 <__generate_code_for_binary_boolean_expression@@Base+0x29f8>
   19f9c:	mov	r3, r0
   19fa0:	mov	r2, #0
   19fa4:	ldr	r1, [pc, r1]
   19fa8:	strb	r2, [r3, r1]!
   19fac:	strb	r2, [r3, #3]
   19fb0:	strb	r2, [r3, #2]
   19fb4:	strb	r2, [r3, #1]
   19fb8:	adds	r2, r1, #4
   19fbc:	adc	r3, r5, #0
   19fc0:	cmp	r7, #1
   19fc4:	strd	r2, [sl]
   19fc8:	bne	19c20 <__generate_code_for_binary_boolean_expression@@Base+0x21d0>
   19fcc:	b	1a08c <__generate_code_for_binary_boolean_expression@@Base+0x263c>
   19fd0:	mov	r3, r0
   19fd4:	mov	r2, #0
   19fd8:	strb	r2, [r3, r6]!
   19fdc:	strb	r2, [r3, #3]
   19fe0:	strb	r2, [r3, #2]
   19fe4:	strb	r2, [r3, #1]
   19fe8:	adds	r2, r6, #4
   19fec:	adc	r3, r1, #0
   19ff0:	strd	r2, [sl]
   19ff4:	ldr	r4, [r9, #4]
   19ff8:	ldr	r5, [pc, #992]	; 1a3e0 <__generate_code_for_binary_boolean_expression@@Base+0x2990>
   19ffc:	adds	lr, r6, #8
   1a000:	adc	ip, r1, #0
   1a004:	mov	r7, #1
   1a008:	ldr	r5, [pc, r5]
   1a00c:	subs	r5, r5, lr
   1a010:	sbcs	r5, r4, ip
   1a014:	bcs	19ac8 <__generate_code_for_binary_boolean_expression@@Base+0x2078>
   1a018:	mov	r2, #7
   1a01c:	orr	r2, r2, #131072	; 0x20000
   1a020:	adds	r2, r6, r2
   1a024:	adc	r1, r1, #0
   1a028:	mvn	r3, #0
   1a02c:	and	r5, r1, r3
   1a030:	mov	r1, #16646144	; 0xfe0000
   1a034:	orr	r1, r1, #-16777216	; 0xff000000
   1a038:	ldr	r4, [pc, #932]	; 1a3e4 <__generate_code_for_binary_boolean_expression@@Base+0x2994>
   1a03c:	and	r6, r2, r1
   1a040:	mov	r1, r6
   1a044:	add	r4, pc, r4
   1a048:	bl	11f1c <realloc@plt>
   1a04c:	str	r6, [r9]
   1a050:	str	r5, [r9, #4]
   1a054:	str	r0, [r4]
   1a058:	ldr	r3, [sl, #4]
   1a05c:	ldr	r2, [pc, #900]	; 1a3e8 <__generate_code_for_binary_boolean_expression@@Base+0x2998>
   1a060:	ldr	r2, [pc, r2]
   1a064:	b	19ac8 <__generate_code_for_binary_boolean_expression@@Base+0x2078>
   1a068:	mov	r3, r0
   1a06c:	mov	r2, #0
   1a070:	strb	r2, [r3, r1]!
   1a074:	strb	r2, [r3, #3]
   1a078:	strb	r2, [r3, #2]
   1a07c:	strb	r2, [r3, #1]
   1a080:	adds	r2, r1, #4
   1a084:	adc	r3, r5, #0
   1a088:	strd	r2, [sl]
   1a08c:	ldr	r4, [r9, #4]
   1a090:	ldr	r6, [pc, #948]	; 1a44c <__generate_code_for_binary_boolean_expression@@Base+0x29fc>
   1a094:	adds	r7, r1, #8
   1a098:	adc	ip, r5, #0
   1a09c:	ldr	r6, [pc, r6]
   1a0a0:	subs	r7, r6, r7
   1a0a4:	sbcs	r7, r4, ip
   1a0a8:	bcs	1a154 <__generate_code_for_binary_boolean_expression@@Base+0x2704>
   1a0ac:	mov	r2, #7
   1a0b0:	orr	r2, r2, #131072	; 0x20000
   1a0b4:	adds	r1, r1, r2
   1a0b8:	adc	r2, r5, #0
   1a0bc:	mvn	r3, #0
   1a0c0:	and	r5, r2, r3
   1a0c4:	mov	r2, #16646144	; 0xfe0000
   1a0c8:	orr	r2, r2, #-16777216	; 0xff000000
   1a0cc:	ldr	r4, [pc, #892]	; 1a450 <__generate_code_for_binary_boolean_expression@@Base+0x2a00>
   1a0d0:	and	r6, r1, r2
   1a0d4:	mov	r1, r6
   1a0d8:	add	r4, pc, r4
   1a0dc:	bl	11f1c <realloc@plt>
   1a0e0:	str	r6, [r9]
   1a0e4:	str	r5, [r9, #4]
   1a0e8:	str	r0, [r4]
   1a0ec:	ldrb	r7, [r8]
   1a0f0:	ldr	r3, [sl, #4]
   1a0f4:	ldr	r2, [pc, #856]	; 1a454 <__generate_code_for_binary_boolean_expression@@Base+0x2a04>
   1a0f8:	mov	r6, r0
   1a0fc:	mov	r1, #0
   1a100:	ldr	r2, [pc, r2]
   1a104:	strb	r1, [r6, r2]!
   1a108:	strb	r1, [r6, #3]
   1a10c:	strb	r1, [r6, #2]
   1a110:	strb	r1, [r6, #1]
   1a114:	adds	r1, r2, #4
   1a118:	adc	r5, r3, #0
   1a11c:	cmp	r7, #1
   1a120:	stm	sl, {r1, r5}
   1a124:	bne	19c44 <__generate_code_for_binary_boolean_expression@@Base+0x21f4>
   1a128:	b	1a178 <__generate_code_for_binary_boolean_expression@@Base+0x2728>
   1a12c:	ldr	r1, [pc, #616]	; 1a39c <__generate_code_for_binary_boolean_expression@@Base+0x294c>
   1a130:	add	r1, pc, r1
   1a134:	ldr	r0, [pc, #600]	; 1a394 <__generate_code_for_binary_boolean_expression@@Base+0x2944>
   1a138:	ldr	r0, [pc, r0]
   1a13c:	ldr	r0, [r0]
   1a140:	ldr	r2, [pc, #592]	; 1a398 <__generate_code_for_binary_boolean_expression@@Base+0x2948>
   1a144:	ldr	r2, [pc, r2]
   1a148:	sub	sp, fp, #28
   1a14c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a150:	b	11fb8 <fprintf@plt>
   1a154:	mov	r7, r0
   1a158:	mov	r1, #0
   1a15c:	strb	r1, [r7, r2]!
   1a160:	strb	r1, [r7, #3]
   1a164:	strb	r1, [r7, #2]
   1a168:	strb	r1, [r7, #1]
   1a16c:	adds	r1, r2, #4
   1a170:	adc	r5, r3, #0
   1a174:	stm	sl, {r1, r5}
   1a178:	ldr	r4, [r9, #4]
   1a17c:	ldr	r6, [pc, #724]	; 1a458 <__generate_code_for_binary_boolean_expression@@Base+0x2a08>
   1a180:	adds	r7, r2, #8
   1a184:	adc	ip, r3, #0
   1a188:	ldr	r6, [pc, r6]
   1a18c:	subs	r7, r6, r7
   1a190:	sbcs	r7, r4, ip
   1a194:	bcs	1a21c <__generate_code_for_binary_boolean_expression@@Base+0x27cc>
   1a198:	mov	r1, #7
   1a19c:	orr	r1, r1, #131072	; 0x20000
   1a1a0:	adds	r1, r2, r1
   1a1a4:	adc	r2, r3, #0
   1a1a8:	mvn	r3, #0
   1a1ac:	and	r5, r2, r3
   1a1b0:	mov	r2, #16646144	; 0xfe0000
   1a1b4:	orr	r2, r2, #-16777216	; 0xff000000
   1a1b8:	ldr	r4, [pc, #668]	; 1a45c <__generate_code_for_binary_boolean_expression@@Base+0x2a0c>
   1a1bc:	and	r6, r1, r2
   1a1c0:	mov	r1, r6
   1a1c4:	add	r4, pc, r4
   1a1c8:	bl	11f1c <realloc@plt>
   1a1cc:	str	r6, [r9]
   1a1d0:	str	r5, [r9, #4]
   1a1d4:	str	r0, [r4]
   1a1d8:	ldrb	r2, [r8]
   1a1dc:	ldr	r5, [sl, #4]
   1a1e0:	ldr	r1, [pc, #632]	; 1a460 <__generate_code_for_binary_boolean_expression@@Base+0x2a10>
   1a1e4:	mov	r7, r0
   1a1e8:	mov	r3, #0
   1a1ec:	ldr	r1, [pc, r1]
   1a1f0:	adds	r4, r1, #4
   1a1f4:	strb	r3, [r7, r1]!
   1a1f8:	strb	r3, [r7, #3]
   1a1fc:	strb	r3, [r7, #2]
   1a200:	strb	r3, [r7, #1]
   1a204:	adc	r3, r5, #0
   1a208:	cmp	r2, #1
   1a20c:	str	r4, [sl]
   1a210:	str	r3, [sl, #4]
   1a214:	bne	19c6c <__generate_code_for_binary_boolean_expression@@Base+0x221c>
   1a218:	b	1a244 <__generate_code_for_binary_boolean_expression@@Base+0x27f4>
   1a21c:	mov	r3, r0
   1a220:	mov	r2, #0
   1a224:	strb	r2, [r3, r1]!
   1a228:	adds	r4, r1, #4
   1a22c:	strb	r2, [r3, #3]
   1a230:	strb	r2, [r3, #2]
   1a234:	strb	r2, [r3, #1]
   1a238:	adc	r3, r5, #0
   1a23c:	str	r4, [sl]
   1a240:	str	r3, [sl, #4]
   1a244:	ldr	r6, [r9, #4]
   1a248:	ldr	r2, [pc, #532]	; 1a464 <__generate_code_for_binary_boolean_expression@@Base+0x2a14>
   1a24c:	adds	ip, r1, #8
   1a250:	adc	r7, r5, #0
   1a254:	ldr	r2, [pc, r2]
   1a258:	subs	r2, r2, ip
   1a25c:	sbcs	r2, r6, r7
   1a260:	bcs	1a2e8 <__generate_code_for_binary_boolean_expression@@Base+0x2898>
   1a264:	mov	r2, #7
   1a268:	orr	r2, r2, #131072	; 0x20000
   1a26c:	adds	r1, r1, r2
   1a270:	adc	r2, r5, #0
   1a274:	mvn	r3, #0
   1a278:	and	r5, r2, r3
   1a27c:	mov	r2, #16646144	; 0xfe0000
   1a280:	orr	r2, r2, #-16777216	; 0xff000000
   1a284:	ldr	r4, [pc, #368]	; 1a3fc <__generate_code_for_binary_boolean_expression@@Base+0x29ac>
   1a288:	and	r6, r1, r2
   1a28c:	mov	r1, r6
   1a290:	add	r4, pc, r4
   1a294:	bl	11f1c <realloc@plt>
   1a298:	str	r6, [r9]
   1a29c:	str	r5, [r9, #4]
   1a2a0:	str	r0, [r4]
   1a2a4:	ldrb	r7, [r8]
   1a2a8:	ldr	r3, [sl, #4]
   1a2ac:	ldr	r4, [pc, #332]	; 1a400 <__generate_code_for_binary_boolean_expression@@Base+0x29b0>
   1a2b0:	mov	r2, r0
   1a2b4:	mov	r1, #0
   1a2b8:	ldr	r4, [pc, r4]
   1a2bc:	strb	r1, [r2, r4]!
   1a2c0:	strb	r1, [r2, #3]
   1a2c4:	strb	r1, [r2, #2]
   1a2c8:	strb	r1, [r2, #1]
   1a2cc:	adds	r2, r4, #4
   1a2d0:	adc	r1, r3, #0
   1a2d4:	cmp	r7, #0
   1a2d8:	str	r2, [sl]
   1a2dc:	str	r1, [sl, #4]
   1a2e0:	beq	19c94 <__generate_code_for_binary_boolean_expression@@Base+0x2244>
   1a2e4:	b	1a310 <__generate_code_for_binary_boolean_expression@@Base+0x28c0>
   1a2e8:	mov	r2, r0
   1a2ec:	mov	r1, #0
   1a2f0:	strb	r1, [r2, r4]!
   1a2f4:	strb	r1, [r2, #3]
   1a2f8:	strb	r1, [r2, #2]
   1a2fc:	strb	r1, [r2, #1]
   1a300:	adds	r2, r4, #4
   1a304:	adc	r1, r3, #0
   1a308:	str	r2, [sl]
   1a30c:	str	r1, [sl, #4]
   1a310:	ldr	r5, [r9, #4]
   1a314:	ldr	r6, [pc, #232]	; 1a404 <__generate_code_for_binary_boolean_expression@@Base+0x29b4>
   1a318:	adds	r7, r4, #8
   1a31c:	adc	ip, r3, #0
   1a320:	ldr	r6, [pc, r6]
   1a324:	subs	r7, r6, r7
   1a328:	sbcs	r7, r5, ip
   1a32c:	bcs	19c94 <__generate_code_for_binary_boolean_expression@@Base+0x2244>
   1a330:	mov	r1, #7
   1a334:	orr	r1, r1, #131072	; 0x20000
   1a338:	adds	r1, r4, r1
   1a33c:	adc	r2, r3, #0
   1a340:	mvn	r3, #0
   1a344:	and	r7, r2, r3
   1a348:	mov	r2, #16646144	; 0xfe0000
   1a34c:	orr	r2, r2, #-16777216	; 0xff000000
   1a350:	ldr	r5, [pc, #176]	; 1a408 <__generate_code_for_binary_boolean_expression@@Base+0x29b8>
   1a354:	and	r6, r1, r2
   1a358:	mov	r1, r6
   1a35c:	add	r5, pc, r5
   1a360:	bl	11f1c <realloc@plt>
   1a364:	strd	r6, [r9]
   1a368:	str	r0, [r5]
   1a36c:	ldr	r1, [sl, #4]
   1a370:	ldr	r2, [pc, #148]	; 1a40c <__generate_code_for_binary_boolean_expression@@Base+0x29bc>
   1a374:	ldr	r2, [pc, r2]
   1a378:	b	19c94 <__generate_code_for_binary_boolean_expression@@Base+0x2244>
   1a37c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1a380:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1a384:	andeq	r4, r1, r8, asr #19
   1a388:	andeq	r4, r1, ip, lsr #19
   1a38c:	andeq	r4, r1, r0, ror #17
   1a390:	andeq	r2, r0, r2, ror sl
   1a394:	andeq	r2, r1, ip, ror pc
   1a398:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1a39c:	ldrdeq	r2, [r0], -fp
   1a3a0:	andeq	r4, r1, r0, ror #13
   1a3a4:	muleq	r1, ip, r9
   1a3a8:	muleq	r1, r0, r9
   1a3ac:	andeq	r4, r1, r4, lsl #17
   1a3b0:	andeq	r4, r1, r4, asr #18
   1a3b4:	andeq	r4, r1, r0, asr #18
   1a3b8:	andeq	r4, r1, r0, lsr #18
   1a3bc:	andeq	r4, r1, ip, asr r8
   1a3c0:	andeq	r4, r1, ip, lsl r8
   1a3c4:	andeq	r4, r1, r0, lsl #16
   1a3c8:	andeq	r4, r1, ip, lsl #15
   1a3cc:	andeq	r4, r1, ip, asr #14
   1a3d0:	andeq	r4, r1, r0, lsr r7
   1a3d4:	andeq	r4, r1, r0, ror r2
   1a3d8:	andeq	r4, r1, r0, lsr r2
   1a3dc:	andeq	r4, r1, r0, lsl r2
   1a3e0:	andeq	r4, r1, r0, ror #1
   1a3e4:	andeq	r4, r1, r0, lsr #1
   1a3e8:	muleq	r1, r0, r0
   1a3ec:	andeq	r4, r1, r8, lsr #10
   1a3f0:	andeq	r4, r1, r0, ror #11
   1a3f4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1a3f8:	andeq	r4, r1, ip, asr r3
   1a3fc:	andeq	r3, r1, r4, asr lr
   1a400:	andeq	r3, r1, r8, lsr lr
   1a404:	andeq	r3, r1, r8, asr #27
   1a408:	andeq	r3, r1, r8, lsl #27
   1a40c:	andeq	r3, r1, ip, ror sp
   1a410:	andeq	r4, r1, r0, lsl r4
   1a414:	andeq	r4, r1, r4, lsl #8
   1a418:	andeq	r4, r1, r4, asr #7
   1a41c:			; <UNDEFINED> instruction: 0x000143b8
   1a420:			; <UNDEFINED> instruction: 0x000143b0
   1a424:	muleq	r1, r4, r3
   1a428:	muleq	r1, r0, r5
   1a42c:	andeq	r4, r1, ip, lsl #11
   1a430:	andeq	r4, r1, r0, ror r5
   1a434:	andeq	r4, r1, r4, lsr r3
   1a438:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1a43c:	ldrdeq	r4, [r1], -ip
   1a440:	andeq	r4, r1, r8, lsr #3
   1a444:	andeq	r4, r1, r8, ror #2
   1a448:	andeq	r4, r1, ip, asr #2
   1a44c:	andeq	r4, r1, ip, asr #32
   1a450:	andeq	r4, r1, ip
   1a454:	strdeq	r3, [r1], -r0
   1a458:	andeq	r3, r1, r0, ror #30
   1a45c:	andeq	r3, r1, r0, lsr #30
   1a460:	andeq	r3, r1, r4, lsl #30
   1a464:	muleq	r1, r4, lr
   1a468:	ldr	r0, [pc, #508]	; 1a66c <__generate_code_for_binary_boolean_expression@@Base+0x2c1c>
   1a46c:	ldr	r0, [pc, r0]
   1a470:	cmp	r0, #0
   1a474:	beq	1a624 <__generate_code_for_binary_boolean_expression@@Base+0x2bd4>
   1a478:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a47c:	add	fp, sp, #24
   1a480:	ldr	r9, [pc, #488]	; 1a670 <__generate_code_for_binary_boolean_expression@@Base+0x2c20>
   1a484:	mov	r4, #0
   1a488:	mov	r1, #0
   1a48c:	add	r9, pc, r9
   1a490:	ldrb	r0, [r9]
   1a494:	cmp	r0, #1
   1a498:	bne	1a51c <__generate_code_for_binary_boolean_expression@@Base+0x2acc>
   1a49c:	ldr	r0, [pc, #464]	; 1a674 <__generate_code_for_binary_boolean_expression@@Base+0x2c24>
   1a4a0:	ldr	r8, [pc, #464]	; 1a678 <__generate_code_for_binary_boolean_expression@@Base+0x2c28>
   1a4a4:	mov	r1, #1
   1a4a8:	add	r0, pc, r0
   1a4ac:	add	r8, pc, r8
   1a4b0:	ldr	r0, [r0, #4]
   1a4b4:	ldr	r2, [pc, #448]	; 1a67c <__generate_code_for_binary_boolean_expression@@Base+0x2c2c>
   1a4b8:	ldr	r2, [pc, r2]
   1a4bc:	ldr	r7, [r8, #4]
   1a4c0:	ldr	r5, [pc, #440]	; 1a680 <__generate_code_for_binary_boolean_expression@@Base+0x2c30>
   1a4c4:	adds	r3, r2, #8
   1a4c8:	adc	r6, r0, #0
   1a4cc:	ldr	r5, [pc, r5]
   1a4d0:	subs	r3, r5, r3
   1a4d4:	sbcs	r3, r7, r6
   1a4d8:	bcs	1a51c <__generate_code_for_binary_boolean_expression@@Base+0x2acc>
   1a4dc:	mov	r1, #7
   1a4e0:	orr	r1, r1, #131072	; 0x20000
   1a4e4:	adds	r1, r2, r1
   1a4e8:	adc	r7, r0, #0
   1a4ec:	mov	r0, #16646144	; 0xfe0000
   1a4f0:	orr	r0, r0, #-16777216	; 0xff000000
   1a4f4:	ldr	r5, [pc, #392]	; 1a684 <__generate_code_for_binary_boolean_expression@@Base+0x2c34>
   1a4f8:	and	r6, r1, r0
   1a4fc:	ldr	r0, [pc, #388]	; 1a688 <__generate_code_for_binary_boolean_expression@@Base+0x2c38>
   1a500:	mov	r1, r6
   1a504:	add	r5, pc, r5
   1a508:	ldr	r0, [pc, r0]
   1a50c:	bl	11f1c <realloc@plt>
   1a510:	ldrb	r1, [r9]
   1a514:	strd	r6, [r8]
   1a518:	str	r0, [r5]
   1a51c:	ldr	r3, [pc, #360]	; 1a68c <__generate_code_for_binary_boolean_expression@@Base+0x2c3c>
   1a520:	ldr	r2, [pc, #360]	; 1a690 <__generate_code_for_binary_boolean_expression@@Base+0x2c40>
   1a524:	add	r3, pc, r3
   1a528:	ldr	r2, [pc, r2]
   1a52c:	ldr	r0, [pc, #352]	; 1a694 <__generate_code_for_binary_boolean_expression@@Base+0x2c44>
   1a530:	ldr	r0, [pc, r0]
   1a534:	ldr	r7, [r3, #4]
   1a538:	mov	r6, r0
   1a53c:	strb	r4, [r6, r2]!
   1a540:	adds	r2, r2, #8
   1a544:	adc	r5, r7, #0
   1a548:	strb	r4, [r6, #5]
   1a54c:	strb	r4, [r6, #3]
   1a550:	strb	r4, [r6, #2]
   1a554:	strb	r4, [r6, #1]
   1a558:	strb	r4, [r6, #4]!
   1a55c:	cmp	r1, #0
   1a560:	strb	r4, [r6, #3]
   1a564:	strb	r4, [r6, #2]
   1a568:	stm	r3, {r2, r5}
   1a56c:	beq	1a594 <__generate_code_for_binary_boolean_expression@@Base+0x2b44>
   1a570:	ldr	r3, [pc, #288]	; 1a698 <__generate_code_for_binary_boolean_expression@@Base+0x2c48>
   1a574:	mov	r1, r2
   1a578:	mov	r2, #1
   1a57c:	ldr	r3, [pc, r3]
   1a580:	bl	11f28 <fwrite@plt>
   1a584:	ldr	r0, [pc, #272]	; 1a69c <__generate_code_for_binary_boolean_expression@@Base+0x2c4c>
   1a588:	ldr	r0, [pc, r0]
   1a58c:	bl	11ed4 <free@plt>
   1a590:	b	1a5e0 <__generate_code_for_binary_boolean_expression@@Base+0x2b90>
   1a594:	ldr	r1, [pc, #260]	; 1a6a0 <__generate_code_for_binary_boolean_expression@@Base+0x2c50>
   1a598:	mov	r2, #4
   1a59c:	ldr	r1, [pc, r1]
   1a5a0:	bl	12054 <msync@plt>
   1a5a4:	cmn	r0, #1
   1a5a8:	beq	1a630 <__generate_code_for_binary_boolean_expression@@Base+0x2be0>
   1a5ac:	ldr	r1, [pc, #252]	; 1a6b0 <__generate_code_for_binary_boolean_expression@@Base+0x2c60>
   1a5b0:	ldr	r1, [pc, r1]
   1a5b4:	ldr	r0, [pc, #248]	; 1a6b4 <__generate_code_for_binary_boolean_expression@@Base+0x2c64>
   1a5b8:	ldr	r0, [pc, r0]
   1a5bc:	bl	12024 <munmap@plt>
   1a5c0:	ldr	r0, [pc, #240]	; 1a6b8 <__generate_code_for_binary_boolean_expression@@Base+0x2c68>
   1a5c4:	ldr	r1, [pc, #240]	; 1a6bc <__generate_code_for_binary_boolean_expression@@Base+0x2c6c>
   1a5c8:	mov	r2, #0
   1a5cc:	add	r0, pc, r0
   1a5d0:	add	r1, pc, r1
   1a5d4:	str	r2, [r0]
   1a5d8:	str	r2, [r0, #4]
   1a5dc:	str	r2, [r1]
   1a5e0:	ldr	r0, [pc, #216]	; 1a6c0 <__generate_code_for_binary_boolean_expression@@Base+0x2c70>
   1a5e4:	ldr	r0, [pc, r0]
   1a5e8:	bl	11ec8 <fflush@plt>
   1a5ec:	ldr	r0, [pc, #208]	; 1a6c4 <__generate_code_for_binary_boolean_expression@@Base+0x2c74>
   1a5f0:	ldr	r0, [pc, r0]
   1a5f4:	bl	1ab70 <__gcov_flush@@Base+0x30c>
   1a5f8:	ldr	r0, [pc, #200]	; 1a6c8 <__generate_code_for_binary_boolean_expression@@Base+0x2c78>
   1a5fc:	ldr	r0, [pc, r0]
   1a600:	bl	1200c <fclose@plt>
   1a604:	ldr	r0, [pc, #192]	; 1a6cc <__generate_code_for_binary_boolean_expression@@Base+0x2c7c>
   1a608:	ldr	r1, [pc, #192]	; 1a6d0 <__generate_code_for_binary_boolean_expression@@Base+0x2c80>
   1a60c:	mov	r2, #0
   1a610:	add	r0, pc, r0
   1a614:	add	r1, pc, r1
   1a618:	str	r2, [r0]
   1a61c:	str	r2, [r1]
   1a620:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a624:	ldr	r0, [pc, #168]	; 1a6d4 <__generate_code_for_binary_boolean_expression@@Base+0x2c84>
   1a628:	ldr	r0, [pc, r0]
   1a62c:	b	11ed4 <free@plt>
   1a630:	bl	11fc4 <__errno_location@plt>
   1a634:	ldr	r1, [pc, #104]	; 1a6a4 <__generate_code_for_binary_boolean_expression@@Base+0x2c54>
   1a638:	ldr	r1, [pc, r1]
   1a63c:	ldr	r0, [r0]
   1a640:	ldr	r4, [r1]
   1a644:	ldr	r5, [pc, #92]	; 1a6a8 <__generate_code_for_binary_boolean_expression@@Base+0x2c58>
   1a648:	ldr	r5, [pc, r5]
   1a64c:	bl	11f64 <strerror@plt>
   1a650:	ldr	r1, [pc, #84]	; 1a6ac <__generate_code_for_binary_boolean_expression@@Base+0x2c5c>
   1a654:	mov	r3, r0
   1a658:	mov	r0, r4
   1a65c:	add	r1, pc, r1
   1a660:	mov	r2, r5
   1a664:	bl	11fb8 <fprintf@plt>
   1a668:	b	1a5ac <__generate_code_for_binary_boolean_expression@@Base+0x2b5c>
   1a66c:	andeq	r3, r1, r4, ror ip
   1a670:	andeq	r3, r1, r0, asr ip
   1a674:	andeq	r3, r1, r8, asr #24
   1a678:	andeq	r3, r1, ip, lsr ip
   1a67c:	andeq	r3, r1, r8, lsr ip
   1a680:	andeq	r3, r1, ip, lsl ip
   1a684:	andeq	r3, r1, r0, ror #23
   1a688:	ldrdeq	r3, [r1], -ip
   1a68c:	andeq	r3, r1, ip, asr #23
   1a690:	andeq	r3, r1, r8, asr #23
   1a694:			; <UNDEFINED> instruction: 0x00013bb4
   1a698:	andeq	r3, r1, r4, ror #22
   1a69c:	andeq	r3, r1, ip, asr fp
   1a6a0:	andeq	r3, r1, ip, ror #22
   1a6a4:	andeq	r2, r1, ip, ror sl
   1a6a8:	muleq	r1, r0, sl
   1a6ac:	andeq	r1, r0, sp, lsl sp
   1a6b0:	andeq	r3, r1, r8, asr fp
   1a6b4:	andeq	r3, r1, ip, lsr #22
   1a6b8:	andeq	r3, r1, ip, lsr fp
   1a6bc:	andeq	r3, r1, r4, lsl fp
   1a6c0:	strdeq	r3, [r1], -ip
   1a6c4:	ldrdeq	r2, [r1], -r8
   1a6c8:	andeq	r3, r1, r4, ror #21
   1a6cc:	ldrdeq	r3, [r1], -r0
   1a6d0:	ldrdeq	r3, [r1], -r0
   1a6d4:			; <UNDEFINED> instruction: 0x00013ab0
   1a6d8:	push	{r4, sl, fp, lr}
   1a6dc:	add	fp, sp, #8
   1a6e0:	mov	r4, r0
   1a6e4:	mov	r0, #12
   1a6e8:	bl	11f4c <malloc@plt>
   1a6ec:	ldr	r1, [pc, #60]	; 1a730 <__generate_code_for_binary_boolean_expression@@Base+0x2ce0>
   1a6f0:	mov	r2, #0
   1a6f4:	add	r1, pc, r1
   1a6f8:	stm	r0, {r1, r4}
   1a6fc:	str	r2, [r0, #8]
   1a700:	ldr	r1, [pc, #44]	; 1a734 <__generate_code_for_binary_boolean_expression@@Base+0x2ce4>
   1a704:	ldr	r1, [pc, r1]
   1a708:	mov	r2, r1
   1a70c:	ldr	r3, [r2], #4
   1a710:	ldr	r4, [r2]
   1a714:	cmp	r3, #0
   1a718:	mov	r3, r2
   1a71c:	addne	r3, r4, #8
   1a720:	moveq	r2, r1
   1a724:	str	r0, [r3]
   1a728:	str	r0, [r2]
   1a72c:	pop	{r4, sl, fp, pc}
   1a730:	andeq	r3, r1, r8, lsl #20
   1a734:	andeq	r2, r1, ip, lsr #19
   1a738:	push	{r4, r5, fp, lr}
   1a73c:	add	fp, sp, #8
   1a740:	ldr	r0, [pc, #56]	; 1a780 <__generate_code_for_binary_boolean_expression@@Base+0x2d30>
   1a744:	ldr	r0, [pc, r0]
   1a748:	ldr	r4, [r0]
   1a74c:	cmp	r4, #0
   1a750:	beq	1a77c <__generate_code_for_binary_boolean_expression@@Base+0x2d2c>
   1a754:	ldr	r5, [pc, #40]	; 1a784 <__generate_code_for_binary_boolean_expression@@Base+0x2d34>
   1a758:	add	r5, pc, r5
   1a75c:	ldr	r0, [r4]
   1a760:	cmp	r0, r5
   1a764:	bne	1a770 <__generate_code_for_binary_boolean_expression@@Base+0x2d20>
   1a768:	ldr	r0, [r4, #4]
   1a76c:	blx	r0
   1a770:	ldr	r4, [r4, #8]
   1a774:	cmp	r4, #0
   1a778:	bne	1a75c <__generate_code_for_binary_boolean_expression@@Base+0x2d0c>
   1a77c:	pop	{r4, r5, fp, pc}
   1a780:	andeq	r2, r1, ip, ror #18
   1a784:	andeq	r3, r1, r4, lsr #19
   1a788:	push	{r4, r5, r6, r7, fp, lr}
   1a78c:	add	fp, sp, #16
   1a790:	ldr	r4, [pc, #100]	; 1a7fc <__generate_code_for_binary_boolean_expression@@Base+0x2dac>
   1a794:	ldr	r4, [pc, r4]
   1a798:	ldr	r0, [r4]
   1a79c:	cmp	r0, #0
   1a7a0:	beq	1a7f8 <__generate_code_for_binary_boolean_expression@@Base+0x2da8>
   1a7a4:	ldr	r5, [pc, #84]	; 1a800 <__generate_code_for_binary_boolean_expression@@Base+0x2db0>
   1a7a8:	mov	r6, #0
   1a7ac:	add	r5, pc, r5
   1a7b0:	ldr	r1, [r0]
   1a7b4:	ldr	r7, [r0, #8]
   1a7b8:	cmp	r1, r5
   1a7bc:	beq	1a7c8 <__generate_code_for_binary_boolean_expression@@Base+0x2d78>
   1a7c0:	mov	r6, r0
   1a7c4:	b	1a7ec <__generate_code_for_binary_boolean_expression@@Base+0x2d9c>
   1a7c8:	ldr	r1, [r4]
   1a7cc:	cmp	r0, r1
   1a7d0:	streq	r7, [r4]
   1a7d4:	ldr	r1, [r4, #4]
   1a7d8:	cmp	r0, r1
   1a7dc:	streq	r6, [r4, #4]
   1a7e0:	cmp	r6, #0
   1a7e4:	strne	r7, [r6, #8]
   1a7e8:	bl	11ed4 <free@plt>
   1a7ec:	mov	r0, r7
   1a7f0:	cmp	r7, #0
   1a7f4:	bne	1a7b0 <__generate_code_for_binary_boolean_expression@@Base+0x2d60>
   1a7f8:	pop	{r4, r5, r6, r7, fp, pc}
   1a7fc:	andeq	r2, r1, ip, lsl r9
   1a800:	andeq	r3, r1, r0, asr r9
   1a804:	push	{r4, sl, fp, lr}
   1a808:	add	fp, sp, #8
   1a80c:	mov	r4, r0
   1a810:	mov	r0, #12
   1a814:	bl	11f4c <malloc@plt>
   1a818:	ldr	r1, [pc, #60]	; 1a85c <__generate_code_for_binary_boolean_expression@@Base+0x2e0c>
   1a81c:	mov	r2, #0
   1a820:	add	r1, pc, r1
   1a824:	stm	r0, {r1, r4}
   1a828:	str	r2, [r0, #8]
   1a82c:	ldr	r1, [pc, #44]	; 1a860 <__generate_code_for_binary_boolean_expression@@Base+0x2e10>
   1a830:	ldr	r1, [pc, r1]
   1a834:	mov	r2, r1
   1a838:	ldr	r3, [r2], #4
   1a83c:	ldr	r4, [r2]
   1a840:	cmp	r3, #0
   1a844:	mov	r3, r2
   1a848:	addne	r3, r4, #8
   1a84c:	moveq	r2, r1
   1a850:	str	r0, [r3]
   1a854:	str	r0, [r2]
   1a858:	pop	{r4, sl, fp, pc}
   1a85c:	ldrdeq	r3, [r1], -ip
   1a860:	andeq	r2, r1, ip, ror r8

0001a864 <__gcov_flush@@Base>:
   1a864:	push	{r4, sl, fp, lr}
   1a868:	add	fp, sp, #8
   1a86c:	ldr	r0, [pc, #36]	; 1a898 <__gcov_flush@@Base+0x34>
   1a870:	ldr	r0, [pc, r0]
   1a874:	ldr	r4, [r0]
   1a878:	cmp	r4, #0
   1a87c:	beq	1a894 <__gcov_flush@@Base+0x30>
   1a880:	ldr	r0, [r4, #4]
   1a884:	blx	r0
   1a888:	ldr	r4, [r4, #8]
   1a88c:	cmp	r4, #0
   1a890:	bne	1a880 <__gcov_flush@@Base+0x1c>
   1a894:	pop	{r4, sl, fp, pc}
   1a898:	andeq	r2, r1, ip, lsr r8
   1a89c:	push	{r4, r5, r6, r7, fp, lr}
   1a8a0:	add	fp, sp, #16
   1a8a4:	ldr	r4, [pc, #100]	; 1a910 <__gcov_flush@@Base+0xac>
   1a8a8:	ldr	r4, [pc, r4]
   1a8ac:	ldr	r0, [r4]
   1a8b0:	cmp	r0, #0
   1a8b4:	beq	1a90c <__gcov_flush@@Base+0xa8>
   1a8b8:	ldr	r5, [pc, #84]	; 1a914 <__gcov_flush@@Base+0xb0>
   1a8bc:	mov	r6, #0
   1a8c0:	add	r5, pc, r5
   1a8c4:	ldr	r1, [r0]
   1a8c8:	ldr	r7, [r0, #8]
   1a8cc:	cmp	r1, r5
   1a8d0:	beq	1a8dc <__gcov_flush@@Base+0x78>
   1a8d4:	mov	r6, r0
   1a8d8:	b	1a900 <__gcov_flush@@Base+0x9c>
   1a8dc:	ldr	r1, [r4]
   1a8e0:	cmp	r0, r1
   1a8e4:	streq	r7, [r4]
   1a8e8:	ldr	r1, [r4, #4]
   1a8ec:	cmp	r0, r1
   1a8f0:	streq	r6, [r4, #4]
   1a8f4:	cmp	r6, #0
   1a8f8:	strne	r7, [r6, #8]
   1a8fc:	bl	11ed4 <free@plt>
   1a900:	mov	r0, r7
   1a904:	cmp	r7, #0
   1a908:	bne	1a8c4 <__gcov_flush@@Base+0x60>
   1a90c:	pop	{r4, r5, r6, r7, fp, pc}
   1a910:	andeq	r2, r1, r4, lsl #16
   1a914:	andeq	r3, r1, ip, lsr r8
   1a918:	push	{r4, r5, fp, lr}
   1a91c:	add	fp, sp, #8
   1a920:	mov	r4, r1
   1a924:	cmp	r0, #0
   1a928:	beq	1a978 <__gcov_flush@@Base+0x114>
   1a92c:	mov	r5, r0
   1a930:	mov	r0, #12
   1a934:	bl	11f4c <malloc@plt>
   1a938:	ldr	r1, [pc, #204]	; 1aa0c <__gcov_flush@@Base+0x1a8>
   1a93c:	mov	r2, #0
   1a940:	add	r1, pc, r1
   1a944:	stm	r0, {r1, r5}
   1a948:	str	r2, [r0, #8]
   1a94c:	ldr	r1, [pc, #188]	; 1aa10 <__gcov_flush@@Base+0x1ac>
   1a950:	ldr	r1, [pc, r1]
   1a954:	mov	r2, r1
   1a958:	ldr	r3, [r2], #4
   1a95c:	ldr	r5, [r2]
   1a960:	cmp	r3, #0
   1a964:	mov	r3, r2
   1a968:	addne	r3, r5, #8
   1a96c:	moveq	r2, r1
   1a970:	str	r0, [r3]
   1a974:	str	r0, [r2]
   1a978:	cmp	r4, #0
   1a97c:	beq	1a9c8 <__gcov_flush@@Base+0x164>
   1a980:	mov	r0, #12
   1a984:	bl	11f4c <malloc@plt>
   1a988:	ldr	r1, [pc, #132]	; 1aa14 <__gcov_flush@@Base+0x1b0>
   1a98c:	mov	r2, #0
   1a990:	add	r1, pc, r1
   1a994:	stm	r0, {r1, r4}
   1a998:	str	r2, [r0, #8]
   1a99c:	ldr	r1, [pc, #116]	; 1aa18 <__gcov_flush@@Base+0x1b4>
   1a9a0:	ldr	r1, [pc, r1]
   1a9a4:	mov	r2, r1
   1a9a8:	ldr	r3, [r2], #4
   1a9ac:	ldr	r5, [r2]
   1a9b0:	cmp	r3, #0
   1a9b4:	mov	r3, r2
   1a9b8:	addne	r3, r5, #8
   1a9bc:	moveq	r2, r1
   1a9c0:	str	r0, [r3]
   1a9c4:	str	r0, [r2]
   1a9c8:	ldr	r1, [pc, #76]	; 1aa1c <__gcov_flush@@Base+0x1b8>
   1a9cc:	add	r1, pc, r1
   1a9d0:	ldrb	r0, [r1]
   1a9d4:	cmp	r0, #0
   1a9d8:	popne	{r4, r5, fp, pc}
   1a9dc:	ldr	r0, [pc, #60]	; 1aa20 <__gcov_flush@@Base+0x1bc>
   1a9e0:	mov	r2, #1
   1a9e4:	strb	r2, [r1]
   1a9e8:	add	r0, pc, r0
   1a9ec:	bl	1aecc <__libc_csu_fini@@Base+0x4>
   1a9f0:	ldr	r0, [pc, #44]	; 1aa24 <__gcov_flush@@Base+0x1c0>
   1a9f4:	add	r0, pc, r0
   1a9f8:	bl	1aecc <__libc_csu_fini@@Base+0x4>
   1a9fc:	ldr	r0, [pc, #36]	; 1aa28 <__gcov_flush@@Base+0x1c4>
   1aa00:	add	r0, pc, r0
   1aa04:	pop	{r4, r5, fp, lr}
   1aa08:	b	1aecc <__libc_csu_fini@@Base+0x4>
   1aa0c:			; <UNDEFINED> instruction: 0x000137bc
   1aa10:	andeq	r2, r1, r0, ror #14
   1aa14:	andeq	r3, r1, ip, ror #14
   1aa18:	andeq	r2, r1, ip, lsl #14
   1aa1c:	andeq	r3, r1, r4, lsr r7
   1aa20:			; <UNDEFINED> instruction: 0xfffffeac
   1aa24:			; <UNDEFINED> instruction: 0xfffffd8c
   1aa28:			; <UNDEFINED> instruction: 0xfffffd30
   1aa2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1aa30:	add	fp, sp, #24
   1aa34:	ldr	r7, [pc, #76]	; 1aa88 <__gcov_flush@@Base+0x224>
   1aa38:	mov	r4, r0
   1aa3c:	mov	r5, #1
   1aa40:	mov	r8, #0
   1aa44:	ldr	r7, [pc, r7]
   1aa48:	mov	r6, #47	; 0x2f
   1aa4c:	b	1aa54 <__gcov_flush@@Base+0x1f0>
   1aa50:	add	r5, r5, #1
   1aa54:	ldrb	r0, [r4, r5]
   1aa58:	cmp	r0, #47	; 0x2f
   1aa5c:	beq	1aa6c <__gcov_flush@@Base+0x208>
   1aa60:	cmp	r0, #0
   1aa64:	bne	1aa50 <__gcov_flush@@Base+0x1ec>
   1aa68:	b	1aa84 <__gcov_flush@@Base+0x220>
   1aa6c:	strb	r8, [r4, r5]
   1aa70:	ldr	r1, [r7]
   1aa74:	mov	r0, r4
   1aa78:	bl	11fdc <mkdir@plt>
   1aa7c:	strb	r6, [r4, r5]
   1aa80:	b	1aa50 <__gcov_flush@@Base+0x1ec>
   1aa84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aa88:	andeq	r2, r1, r4, ror #12
   1aa8c:	ldr	r0, [pc, #8]	; 1aa9c <__gcov_flush@@Base+0x238>
   1aa90:	ldr	r0, [pc, r0]
   1aa94:	ldr	r0, [r0]
   1aa98:	bx	lr
   1aa9c:	andeq	r2, r1, r8, lsl r6
   1aaa0:	ldr	r1, [pc, #8]	; 1aab0 <__gcov_flush@@Base+0x24c>
   1aaa4:	ldr	r1, [pc, r1]
   1aaa8:	str	r0, [r1]
   1aaac:	bx	lr
   1aab0:	andeq	r2, r1, r4, lsl #12
   1aab4:	push	{r4, r5, r6, sl, fp, lr}
   1aab8:	add	fp, sp, #16
   1aabc:	sub	sp, sp, #392	; 0x188
   1aac0:	mov	r6, sp
   1aac4:	mov	r5, r0
   1aac8:	mov	r0, r6
   1aacc:	mov	r4, r1
   1aad0:	bl	11f04 <uname@plt>
   1aad4:	cmp	r0, #0
   1aad8:	blt	1aaf0 <__gcov_flush@@Base+0x28c>
   1aadc:	add	r1, r6, #65	; 0x41
   1aae0:	mov	r0, r5
   1aae4:	mov	r2, r4
   1aae8:	bl	11ff4 <strncpy@plt>
   1aaec:	mov	r0, #0
   1aaf0:	sub	sp, fp, #16
   1aaf4:	pop	{r4, r5, r6, sl, fp, pc}
   1aaf8:	push	{r4, r5, r6, sl, fp, lr}
   1aafc:	add	fp, sp, #16
   1ab00:	sub	sp, sp, #32
   1ab04:	mov	r4, #0
   1ab08:	mov	r5, r0
   1ab0c:	str	r4, [sp, #20]
   1ab10:	str	r4, [sp, #16]
   1ab14:	str	r4, [sp, #12]
   1ab18:	str	r4, [sp, #8]
   1ab1c:	strh	r4, [sp, #2]
   1ab20:	bl	11f7c <getpid@plt>
   1ab24:	mov	r6, sp
   1ab28:	str	r0, [sp, #24]
   1ab2c:	mov	r0, #1
   1ab30:	strh	r0, [sp]
   1ab34:	mov	r0, r5
   1ab38:	mov	r1, #14
   1ab3c:	mov	r2, r6
   1ab40:	bl	12030 <fcntl64@plt>
   1ab44:	cmn	r0, #1
   1ab48:	bne	1ab64 <__gcov_flush@@Base+0x300>
   1ab4c:	bl	11fc4 <__errno_location@plt>
   1ab50:	ldr	r0, [r0]
   1ab54:	cmp	r0, #4
   1ab58:	beq	1ab34 <__gcov_flush@@Base+0x2d0>
   1ab5c:	cmp	r0, #37	; 0x25
   1ab60:	mvneq	r4, #0
   1ab64:	mov	r0, r4
   1ab68:	sub	sp, fp, #16
   1ab6c:	pop	{r4, r5, r6, sl, fp, pc}
   1ab70:	push	{r4, r5, r6, sl, fp, lr}
   1ab74:	add	fp, sp, #16
   1ab78:	sub	sp, sp, #32
   1ab7c:	mov	r4, #0
   1ab80:	mov	r5, r0
   1ab84:	str	r4, [sp, #20]
   1ab88:	str	r4, [sp, #16]
   1ab8c:	str	r4, [sp, #12]
   1ab90:	str	r4, [sp, #8]
   1ab94:	strh	r4, [sp, #2]
   1ab98:	bl	11f7c <getpid@plt>
   1ab9c:	mov	r6, sp
   1aba0:	str	r0, [sp, #24]
   1aba4:	mov	r0, #2
   1aba8:	strh	r0, [sp]
   1abac:	mov	r0, r5
   1abb0:	mov	r1, #14
   1abb4:	mov	r2, r6
   1abb8:	bl	12030 <fcntl64@plt>
   1abbc:	cmn	r0, #1
   1abc0:	bne	1abdc <__gcov_flush@@Base+0x378>
   1abc4:	bl	11fc4 <__errno_location@plt>
   1abc8:	ldr	r0, [r0]
   1abcc:	cmp	r0, #4
   1abd0:	beq	1abac <__gcov_flush@@Base+0x348>
   1abd4:	cmp	r0, #37	; 0x25
   1abd8:	mvneq	r4, #0
   1abdc:	mov	r0, r4
   1abe0:	sub	sp, fp, #16
   1abe4:	pop	{r4, r5, r6, sl, fp, pc}
   1abe8:	push	{r4, r5, fp, lr}
   1abec:	add	fp, sp, #8
   1abf0:	sub	sp, sp, #32
   1abf4:	mov	r2, #182	; 0xb6
   1abf8:	orr	r2, r2, #256	; 0x100
   1abfc:	mov	r1, #66	; 0x42
   1ac00:	bl	11f34 <open64@plt>
   1ac04:	cmp	r0, #0
   1ac08:	blt	1ac84 <__gcov_flush@@Base+0x420>
   1ac0c:	mov	r4, r0
   1ac10:	mov	r0, #0
   1ac14:	str	r0, [sp, #20]
   1ac18:	str	r0, [sp, #16]
   1ac1c:	str	r0, [sp, #12]
   1ac20:	str	r0, [sp, #8]
   1ac24:	strh	r0, [sp, #2]
   1ac28:	bl	11f7c <getpid@plt>
   1ac2c:	mov	r5, sp
   1ac30:	str	r0, [sp, #24]
   1ac34:	mov	r0, #1
   1ac38:	strh	r0, [sp]
   1ac3c:	mov	r0, r4
   1ac40:	mov	r1, #14
   1ac44:	mov	r2, r5
   1ac48:	bl	12030 <fcntl64@plt>
   1ac4c:	cmn	r0, #1
   1ac50:	bne	1ac6c <__gcov_flush@@Base+0x408>
   1ac54:	bl	11fc4 <__errno_location@plt>
   1ac58:	ldr	r0, [r0]
   1ac5c:	cmp	r0, #4
   1ac60:	beq	1ac3c <__gcov_flush@@Base+0x3d8>
   1ac64:	cmp	r0, #37	; 0x25
   1ac68:	beq	1ac90 <__gcov_flush@@Base+0x42c>
   1ac6c:	ldr	r1, [pc, #76]	; 1acc0 <__gcov_flush@@Base+0x45c>
   1ac70:	mov	r0, r4
   1ac74:	add	r1, pc, r1
   1ac78:	bl	11ea4 <fdopen@plt>
   1ac7c:	sub	sp, fp, #8
   1ac80:	pop	{r4, r5, fp, pc}
   1ac84:	mov	r0, #0
   1ac88:	sub	sp, fp, #8
   1ac8c:	pop	{r4, r5, fp, pc}
   1ac90:	ldr	r1, [pc, #28]	; 1acb4 <__gcov_flush@@Base+0x450>
   1ac94:	ldr	r2, [pc, #28]	; 1acb8 <__gcov_flush@@Base+0x454>
   1ac98:	ldr	r0, [pc, #28]	; 1acbc <__gcov_flush@@Base+0x458>
   1ac9c:	add	r1, pc, r1
   1aca0:	add	r2, pc, r2
   1aca4:	ldr	r0, [pc, r0]
   1aca8:	ldr	r0, [r0]
   1acac:	bl	11fb8 <fprintf@plt>
   1acb0:	b	1ac6c <__gcov_flush@@Base+0x408>
   1acb4:	strdeq	r1, [r0], -lr
   1acb8:	andeq	r1, r0, r3, asr #14
   1acbc:	andeq	r2, r1, r0, lsl r4
   1acc0:	andeq	r1, r0, r4, lsl #11
   1acc4:	push	{r4, r5, r6, sl, fp, lr}
   1acc8:	add	fp, sp, #16
   1accc:	mov	r6, r0
   1acd0:	ldr	r0, [pc, #120]	; 1ad50 <__gcov_flush@@Base+0x4ec>
   1acd4:	mov	r4, r1
   1acd8:	add	r0, pc, r0
   1acdc:	bl	11f40 <getenv@plt>
   1ace0:	mov	r5, r0
   1ace4:	ldr	r0, [pc, #104]	; 1ad54 <__gcov_flush@@Base+0x4f0>
   1ace8:	add	r0, pc, r0
   1acec:	bl	11f40 <getenv@plt>
   1acf0:	mov	r1, #0
   1acf4:	str	r1, [r4]
   1acf8:	str	r1, [r6]
   1acfc:	cmp	r5, #0
   1ad00:	ldrbne	r2, [r5]
   1ad04:	cmpne	r2, #0
   1ad08:	bne	1ad14 <__gcov_flush@@Base+0x4b0>
   1ad0c:	mov	r0, r1
   1ad10:	pop	{r4, r5, r6, sl, fp, pc}
   1ad14:	cmp	r0, #0
   1ad18:	beq	1ad30 <__gcov_flush@@Base+0x4cc>
   1ad1c:	mov	r1, #0
   1ad20:	mov	r2, #10
   1ad24:	bl	11eb0 <strtol@plt>
   1ad28:	bic	r0, r0, r0, asr #31
   1ad2c:	b	1ad34 <__gcov_flush@@Base+0x4d0>
   1ad30:	mov	r0, #0
   1ad34:	str	r0, [r6]
   1ad38:	mov	r0, r5
   1ad3c:	bl	11f94 <strlen@plt>
   1ad40:	mov	r1, r5
   1ad44:	str	r0, [r4]
   1ad48:	mov	r0, r1
   1ad4c:	pop	{r4, r5, r6, sl, fp, pc}
   1ad50:	andeq	r1, r0, r9, lsr r7
   1ad54:	andeq	r1, r0, r5, lsr r7
   1ad58:	push	{r4, r5, r6, r7, fp, lr}
   1ad5c:	add	fp, sp, #16
   1ad60:	mov	r6, r0
   1ad64:	ldr	r0, [fp, #8]
   1ad68:	mov	r5, r3
   1ad6c:	mov	r7, r2
   1ad70:	mov	r4, r1
   1ad74:	cmp	r0, #1
   1ad78:	blt	1adb0 <__gcov_flush@@Base+0x54c>
   1ad7c:	add	r1, r4, #1
   1ad80:	mov	r2, #0
   1ad84:	ldrb	r3, [r1]
   1ad88:	cmp	r3, #47	; 0x2f
   1ad8c:	beq	1ad9c <__gcov_flush@@Base+0x538>
   1ad90:	cmp	r3, #0
   1ad94:	bne	1ada4 <__gcov_flush@@Base+0x540>
   1ad98:	b	1adb0 <__gcov_flush@@Base+0x54c>
   1ad9c:	add	r2, r2, #1
   1ada0:	mov	r4, r1
   1ada4:	add	r1, r1, #1
   1ada8:	cmp	r2, r0
   1adac:	blt	1ad84 <__gcov_flush@@Base+0x520>
   1adb0:	mov	r0, r6
   1adb4:	mov	r1, r7
   1adb8:	mov	r2, r5
   1adbc:	bl	11ee0 <memcpy@plt>
   1adc0:	add	r0, r7, r5
   1adc4:	ldrb	r0, [r0, #-1]
   1adc8:	cmp	r0, #47	; 0x2f
   1adcc:	movne	r0, #47	; 0x2f
   1add0:	strbne	r0, [r6, r5]
   1add4:	mov	r0, r4
   1add8:	addne	r5, r5, #1
   1addc:	add	r5, r6, r5
   1ade0:	bl	11f94 <strlen@plt>
   1ade4:	add	r2, r0, #1
   1ade8:	mov	r0, r5
   1adec:	mov	r1, r4
   1adf0:	pop	{r4, r5, r6, r7, fp, lr}
   1adf4:	b	11ee0 <memcpy@plt>
   1adf8:	mov	r1, #47	; 0x2f
   1adfc:	b	11fa0 <strchr@plt>
   1ae00:	mov	r1, #47	; 0x2f
   1ae04:	b	1203c <strrchr@plt>
   1ae08:	push	{fp, lr}
   1ae0c:	mov	fp, sp
   1ae10:	sub	sp, sp, #8
   1ae14:	mov	r0, #0
   1ae18:	str	r0, [sp, #4]
   1ae1c:	add	r1, sp, #4
   1ae20:	mov	r0, #2
   1ae24:	bl	12000 <prctl@plt>
   1ae28:	ldr	r1, [sp, #4]
   1ae2c:	cmp	r0, #0
   1ae30:	cmpeq	r1, #9
   1ae34:	bne	1ae48 <__gcov_flush@@Base+0x5e4>
   1ae38:	mov	r0, #1
   1ae3c:	mov	r1, #0
   1ae40:	bl	12000 <prctl@plt>
   1ae44:	ldr	r1, [sp, #4]
   1ae48:	sub	r0, r1, #9
   1ae4c:	clz	r0, r0
   1ae50:	lsr	r0, r0, #5
   1ae54:	mov	sp, fp
   1ae58:	pop	{fp, pc}
   1ae5c:	mov	r0, #1
   1ae60:	mov	r1, #9
   1ae64:	b	12000 <prctl@plt>

0001ae68 <__libc_csu_init@@Base>:
   1ae68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ae6c:	mov	r7, r0
   1ae70:	ldr	r6, [pc, #72]	; 1aec0 <__libc_csu_init@@Base+0x58>
   1ae74:	ldr	r5, [pc, #72]	; 1aec4 <__libc_csu_init@@Base+0x5c>
   1ae78:	add	r6, pc, r6
   1ae7c:	add	r5, pc, r5
   1ae80:	sub	r6, r6, r5
   1ae84:	mov	r8, r1
   1ae88:	mov	r9, r2
   1ae8c:	bl	11e84 <fdopen@plt-0x20>
   1ae90:	asrs	r6, r6, #2
   1ae94:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ae98:	mov	r4, #0
   1ae9c:	add	r4, r4, #1
   1aea0:	ldr	r3, [r5], #4
   1aea4:	mov	r2, r9
   1aea8:	mov	r1, r8
   1aeac:	mov	r0, r7
   1aeb0:	blx	r3
   1aeb4:	cmp	r6, r4
   1aeb8:	bne	1ae9c <__libc_csu_init@@Base+0x34>
   1aebc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aec0:	andeq	r2, r1, r4, lsl #1
   1aec4:	andeq	r2, r1, r4, rrx

0001aec8 <__libc_csu_fini@@Base>:
   1aec8:	bx	lr
   1aecc:	ldr	r3, [pc, #12]	; 1aee0 <__libc_csu_fini@@Base+0x18>
   1aed0:	mov	r1, #0
   1aed4:	add	r3, pc, r3
   1aed8:	ldr	r2, [r3]
   1aedc:	b	11fd0 <__cxa_atexit@plt>
   1aee0:	andeq	r2, r1, ip, ror #3

Disassembly of section .fini:

0001aee4 <.fini>:
   1aee4:	push	{r3, lr}
   1aee8:	pop	{r3, pc}
