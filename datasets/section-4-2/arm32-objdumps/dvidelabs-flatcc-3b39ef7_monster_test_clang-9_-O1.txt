
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012e6c <.init>:
   12e6c:	push	{r3, lr}
   12e70:	bl	12fd4 <_start@@Base+0x3c>
   12e74:	pop	{r3, pc}

Disassembly of section .plt:

00012e78 <strcmp@plt-0x14>:
   12e78:	push	{lr}		; (str lr, [sp, #-4]!)
   12e7c:	ldr	lr, [pc, #4]	; 12e88 <strcmp@plt-0x4>
   12e80:	add	lr, pc, lr
   12e84:	ldr	pc, [lr, #8]!
   12e88:	andeq	r6, r2, r8, ror r1

00012e8c <strcmp@plt>:
   12e8c:	add	ip, pc, #0, 12
   12e90:	add	ip, ip, #155648	; 0x26000
   12e94:	ldr	pc, [ip, #376]!	; 0x178

00012e98 <printf@plt>:
   12e98:	add	ip, pc, #0, 12
   12e9c:	add	ip, ip, #155648	; 0x26000
   12ea0:	ldr	pc, [ip, #368]!	; 0x170

00012ea4 <free@plt>:
   12ea4:	add	ip, pc, #0, 12
   12ea8:	add	ip, ip, #155648	; 0x26000
   12eac:	ldr	pc, [ip, #360]!	; 0x168

00012eb0 <memcpy@plt>:
   12eb0:	add	ip, pc, #0, 12
   12eb4:	add	ip, ip, #155648	; 0x26000
   12eb8:	ldr	pc, [ip, #352]!	; 0x160

00012ebc <realloc@plt>:
   12ebc:	add	ip, pc, #0, 12
   12ec0:	add	ip, ip, #155648	; 0x26000
   12ec4:	ldr	pc, [ip, #344]!	; 0x158

00012ec8 <fwrite@plt>:
   12ec8:	add	ip, pc, #0, 12
   12ecc:	add	ip, ip, #155648	; 0x26000
   12ed0:	ldr	pc, [ip, #336]!	; 0x150

00012ed4 <gettimeofday@plt>:
   12ed4:	add	ip, pc, #0, 12
   12ed8:	add	ip, ip, #155648	; 0x26000
   12edc:	ldr	pc, [ip, #328]!	; 0x148

00012ee0 <puts@plt>:
   12ee0:	add	ip, pc, #0, 12
   12ee4:	add	ip, ip, #155648	; 0x26000
   12ee8:	ldr	pc, [ip, #320]!	; 0x140

00012eec <malloc@plt>:
   12eec:	add	ip, pc, #0, 12
   12ef0:	add	ip, ip, #155648	; 0x26000
   12ef4:	ldr	pc, [ip, #312]!	; 0x138

00012ef8 <__libc_start_main@plt>:
   12ef8:	add	ip, pc, #0, 12
   12efc:	add	ip, ip, #155648	; 0x26000
   12f00:	ldr	pc, [ip, #304]!	; 0x130

00012f04 <__gmon_start__@plt>:
   12f04:	add	ip, pc, #0, 12
   12f08:	add	ip, ip, #155648	; 0x26000
   12f0c:	ldr	pc, [ip, #296]!	; 0x128

00012f10 <bcmp@plt>:
   12f10:	add	ip, pc, #0, 12
   12f14:	add	ip, ip, #155648	; 0x26000
   12f18:	ldr	pc, [ip, #288]!	; 0x120

00012f1c <strlen@plt>:
   12f1c:	add	ip, pc, #0, 12
   12f20:	add	ip, ip, #155648	; 0x26000
   12f24:	ldr	pc, [ip, #280]!	; 0x118

00012f28 <fprintf@plt>:
   12f28:	add	ip, pc, #0, 12
   12f2c:	add	ip, ip, #155648	; 0x26000
   12f30:	ldr	pc, [ip, #272]!	; 0x110

00012f34 <posix_memalign@plt>:
   12f34:	add	ip, pc, #0, 12
   12f38:	add	ip, ip, #155648	; 0x26000
   12f3c:	ldr	pc, [ip, #264]!	; 0x108

00012f40 <memset@plt>:
   12f40:	add	ip, pc, #0, 12
   12f44:	add	ip, ip, #155648	; 0x26000
   12f48:	ldr	pc, [ip, #256]!	; 0x100

00012f4c <strncpy@plt>:
   12f4c:	add	ip, pc, #0, 12
   12f50:	add	ip, ip, #155648	; 0x26000
   12f54:	ldr	pc, [ip, #248]!	; 0xf8

00012f58 <memchr@plt>:
   12f58:	add	ip, pc, #0, 12
   12f5c:	add	ip, ip, #155648	; 0x26000
   12f60:	ldr	pc, [ip, #240]!	; 0xf0

00012f64 <fputc@plt>:
   12f64:	add	ip, pc, #0, 12
   12f68:	add	ip, ip, #155648	; 0x26000
   12f6c:	ldr	pc, [ip, #232]!	; 0xe8

00012f70 <strncmp@plt>:
   12f70:	add	ip, pc, #0, 12
   12f74:	add	ip, ip, #155648	; 0x26000
   12f78:	ldr	pc, [ip, #224]!	; 0xe0

00012f7c <abort@plt>:
   12f7c:	add	ip, pc, #0, 12
   12f80:	add	ip, ip, #155648	; 0x26000
   12f84:	ldr	pc, [ip, #216]!	; 0xd8

00012f88 <__assert_fail@plt>:
   12f88:	add	ip, pc, #0, 12
   12f8c:	add	ip, ip, #155648	; 0x26000
   12f90:	ldr	pc, [ip, #208]!	; 0xd0

Disassembly of section .text:

00012f98 <_start@@Base>:
   12f98:	mov	fp, #0
   12f9c:	mov	lr, #0
   12fa0:	pop	{r1}		; (ldr r1, [sp], #4)
   12fa4:	mov	r2, sp
   12fa8:	push	{r2}		; (str r2, [sp, #-4]!)
   12fac:	push	{r0}		; (str r0, [sp, #-4]!)
   12fb0:	ldr	ip, [pc, #16]	; 12fc8 <_start@@Base+0x30>
   12fb4:	push	{ip}		; (str ip, [sp, #-4]!)
   12fb8:	ldr	r0, [pc, #12]	; 12fcc <_start@@Base+0x34>
   12fbc:	ldr	r3, [pc, #12]	; 12fd0 <_start@@Base+0x38>
   12fc0:	bl	12ef8 <__libc_start_main@plt>
   12fc4:	bl	12f7c <abort@plt>
   12fc8:	andeq	r2, r2, r0, lsl #7
   12fcc:	andeq	fp, r1, r0, lsl #7
   12fd0:	andeq	r2, r2, r0, lsr #6
   12fd4:	ldr	r3, [pc, #20]	; 12ff0 <_start@@Base+0x58>
   12fd8:	ldr	r2, [pc, #20]	; 12ff4 <_start@@Base+0x5c>
   12fdc:	add	r3, pc, r3
   12fe0:	ldr	r2, [r3, r2]
   12fe4:	cmp	r2, #0
   12fe8:	bxeq	lr
   12fec:	b	12f04 <__gmon_start__@plt>
   12ff0:	andeq	r6, r2, ip, lsl r0
   12ff4:	andeq	r0, r0, r4, rrx
   12ff8:	ldr	r0, [pc, #24]	; 13018 <_start@@Base+0x80>
   12ffc:	ldr	r3, [pc, #24]	; 1301c <_start@@Base+0x84>
   13000:	cmp	r3, r0
   13004:	bxeq	lr
   13008:	ldr	r3, [pc, #16]	; 13020 <_start@@Base+0x88>
   1300c:	cmp	r3, #0
   13010:	bxeq	lr
   13014:	bx	r3
   13018:	andeq	r9, r3, r0, ror r0
   1301c:	andeq	r9, r3, r0, ror r0
   13020:	andeq	r0, r0, r0
   13024:	ldr	r0, [pc, #36]	; 13050 <_start@@Base+0xb8>
   13028:	ldr	r1, [pc, #36]	; 13054 <_start@@Base+0xbc>
   1302c:	sub	r1, r1, r0
   13030:	asr	r1, r1, #2
   13034:	add	r1, r1, r1, lsr #31
   13038:	asrs	r1, r1, #1
   1303c:	bxeq	lr
   13040:	ldr	r3, [pc, #16]	; 13058 <_start@@Base+0xc0>
   13044:	cmp	r3, #0
   13048:	bxeq	lr
   1304c:	bx	r3
   13050:	andeq	r9, r3, r0, ror r0
   13054:	andeq	r9, r3, r0, ror r0
   13058:	andeq	r0, r0, r0
   1305c:	push	{r4, lr}
   13060:	ldr	r4, [pc, #24]	; 13080 <_start@@Base+0xe8>
   13064:	ldrb	r3, [r4]
   13068:	cmp	r3, #0
   1306c:	popne	{r4, pc}
   13070:	bl	12ff8 <_start@@Base+0x60>
   13074:	mov	r3, #1
   13078:	strb	r3, [r4]
   1307c:	pop	{r4, pc}
   13080:	andeq	r9, r3, r4, ror r0
   13084:	b	13024 <_start@@Base+0x8c>

00013088 <verify_empty_monster@@Base>:
   13088:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1308c:	add	fp, sp, #24
   13090:	mov	r4, r0
   13094:	movw	r1, #9108	; 0x2394
   13098:	movt	r1, #2
   1309c:	bl	131d0 <verify_empty_monster@@Base+0x148>
   130a0:	mov	r8, r0
   130a4:	movw	r1, #9113	; 0x2399
   130a8:	movt	r1, #2
   130ac:	mov	r0, r4
   130b0:	bl	131d0 <verify_empty_monster@@Base+0x148>
   130b4:	mov	r5, r0
   130b8:	mov	r0, r4
   130bc:	mov	r1, #0
   130c0:	bl	131d0 <verify_empty_monster@@Base+0x148>
   130c4:	mov	r6, r0
   130c8:	movw	r1, #9118	; 0x239e
   130cc:	movt	r1, #2
   130d0:	mov	r0, r4
   130d4:	bl	131d0 <verify_empty_monster@@Base+0x148>
   130d8:	mov	r7, r0
   130dc:	mov	r0, r4
   130e0:	bl	13208 <verify_empty_monster@@Base+0x180>
   130e4:	cmp	r8, #0
   130e8:	beq	13100 <verify_empty_monster@@Base+0x78>
   130ec:	cmp	r5, #0
   130f0:	beq	1310c <verify_empty_monster@@Base+0x84>
   130f4:	movw	r0, #21033	; 0x5229
   130f8:	movt	r0, #2
   130fc:	b	1311c <verify_empty_monster@@Base+0x94>
   13100:	movw	r0, #20835	; 0x5163
   13104:	movt	r0, #2
   13108:	b	1311c <verify_empty_monster@@Base+0x94>
   1310c:	cmp	r6, r8
   13110:	beq	13128 <verify_empty_monster@@Base+0xa0>
   13114:	movw	r0, #20979	; 0x51f3
   13118:	movt	r0, #2
   1311c:	bl	12ee0 <puts@plt>
   13120:	mvn	r0, #0
   13124:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13128:	cmp	r7, r8
   1312c:	beq	1313c <verify_empty_monster@@Base+0xb4>
   13130:	movw	r0, #9124	; 0x23a4
   13134:	movt	r0, #2
   13138:	b	1314c <verify_empty_monster@@Base+0xc4>
   1313c:	cmp	r0, r8
   13140:	beq	13158 <verify_empty_monster@@Base+0xd0>
   13144:	movw	r0, #9175	; 0x23d7
   13148:	movt	r0, #2
   1314c:	bl	12e98 <printf@plt>
   13150:	mvn	r0, #0
   13154:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13158:	mov	r0, r8
   1315c:	bl	13248 <verify_empty_monster@@Base+0x1c0>
   13160:	cmp	r0, #100	; 0x64
   13164:	bne	13184 <verify_empty_monster@@Base+0xfc>
   13168:	mov	r0, r8
   1316c:	bl	132b8 <verify_empty_monster@@Base+0x230>
   13170:	cmp	r0, #0
   13174:	beq	13190 <verify_empty_monster@@Base+0x108>
   13178:	movw	r0, #20916	; 0x51b4
   1317c:	movt	r0, #2
   13180:	b	1311c <verify_empty_monster@@Base+0x94>
   13184:	movw	r0, #20945	; 0x51d1
   13188:	movt	r0, #2
   1318c:	b	1311c <verify_empty_monster@@Base+0x94>
   13190:	mov	r0, r8
   13194:	bl	13320 <verify_empty_monster@@Base+0x298>
   13198:	cmp	r0, #0
   1319c:	beq	131ac <verify_empty_monster@@Base+0x124>
   131a0:	movw	r0, #20889	; 0x5199
   131a4:	movt	r0, #2
   131a8:	b	1311c <verify_empty_monster@@Base+0x94>
   131ac:	mov	r0, r8
   131b0:	bl	13388 <verify_empty_monster@@Base+0x300>
   131b4:	cmp	r0, #0
   131b8:	beq	131c8 <verify_empty_monster@@Base+0x140>
   131bc:	movw	r0, #20857	; 0x5179
   131c0:	movt	r0, #2
   131c4:	b	1311c <verify_empty_monster@@Base+0x94>
   131c8:	mov	r0, #0
   131cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131d0:	push	{r4, r5, fp, lr}
   131d4:	add	fp, sp, #8
   131d8:	mov	r5, #0
   131dc:	cmp	r0, #0
   131e0:	beq	13200 <verify_empty_monster@@Base+0x178>
   131e4:	mov	r4, r0
   131e8:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   131ec:	cmp	r0, #0
   131f0:	beq	13200 <verify_empty_monster@@Base+0x178>
   131f4:	mov	r0, r4
   131f8:	bl	1b610 <main@@Base+0x290>
   131fc:	add	r5, r4, r0
   13200:	mov	r0, r5
   13204:	pop	{r4, r5, fp, pc}
   13208:	push	{r4, r5, fp, lr}
   1320c:	add	fp, sp, #8
   13210:	mov	r5, #0
   13214:	cmp	r0, #0
   13218:	beq	13240 <verify_empty_monster@@Base+0x1b8>
   1321c:	mov	r4, r0
   13220:	movw	r1, #9108	; 0x2394
   13224:	movt	r1, #2
   13228:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1322c:	cmp	r0, #0
   13230:	beq	13240 <verify_empty_monster@@Base+0x1b8>
   13234:	mov	r0, r4
   13238:	bl	1b610 <main@@Base+0x290>
   1323c:	add	r5, r4, r0
   13240:	mov	r0, r5
   13244:	pop	{r4, r5, fp, pc}
   13248:	push	{r4, r5, fp, lr}
   1324c:	add	fp, sp, #8
   13250:	cmp	r0, #0
   13254:	beq	13298 <verify_empty_monster@@Base+0x210>
   13258:	mov	r4, r0
   1325c:	bl	1b61c <main@@Base+0x29c>
   13260:	sub	r5, r4, r0
   13264:	mov	r0, r5
   13268:	bl	1b624 <main@@Base+0x2a4>
   1326c:	cmp	r0, #10
   13270:	bcc	13290 <verify_empty_monster@@Base+0x208>
   13274:	add	r0, r5, #8
   13278:	bl	1b624 <main@@Base+0x2a4>
   1327c:	cmp	r0, #0
   13280:	beq	13290 <verify_empty_monster@@Base+0x208>
   13284:	add	r0, r4, r0
   13288:	pop	{r4, r5, fp, lr}
   1328c:	b	1b62c <main@@Base+0x2ac>
   13290:	mov	r0, #100	; 0x64
   13294:	pop	{r4, r5, fp, pc}
   13298:	movw	r0, #12550	; 0x3106
   1329c:	movt	r0, #2
   132a0:	movw	r1, #12588	; 0x312c
   132a4:	movt	r1, #2
   132a8:	movw	r3, #12686	; 0x318e
   132ac:	movt	r3, #2
   132b0:	movw	r2, #697	; 0x2b9
   132b4:	bl	12f88 <__assert_fail@plt>
   132b8:	push	{r4, sl, fp, lr}
   132bc:	add	fp, sp, #8
   132c0:	cmp	r0, #0
   132c4:	beq	13300 <verify_empty_monster@@Base+0x278>
   132c8:	mov	r4, r0
   132cc:	bl	1b61c <main@@Base+0x29c>
   132d0:	sub	r4, r4, r0
   132d4:	mov	r0, r4
   132d8:	bl	1b624 <main@@Base+0x2a4>
   132dc:	mov	r1, r0
   132e0:	mov	r0, #0
   132e4:	cmp	r1, #10
   132e8:	popcc	{r4, sl, fp, pc}
   132ec:	add	r0, r4, #8
   132f0:	bl	1b624 <main@@Base+0x2a4>
   132f4:	cmp	r0, #0
   132f8:	movwne	r0, #1
   132fc:	pop	{r4, sl, fp, pc}
   13300:	movw	r0, #12550	; 0x3106
   13304:	movt	r0, #2
   13308:	movw	r1, #12588	; 0x312c
   1330c:	movt	r1, #2
   13310:	movw	r3, #12752	; 0x31d0
   13314:	movt	r3, #2
   13318:	movw	r2, #697	; 0x2b9
   1331c:	bl	12f88 <__assert_fail@plt>
   13320:	push	{r4, sl, fp, lr}
   13324:	add	fp, sp, #8
   13328:	cmp	r0, #0
   1332c:	beq	13368 <verify_empty_monster@@Base+0x2e0>
   13330:	mov	r4, r0
   13334:	bl	1b61c <main@@Base+0x29c>
   13338:	sub	r4, r4, r0
   1333c:	mov	r0, r4
   13340:	bl	1b624 <main@@Base+0x2a4>
   13344:	mov	r1, r0
   13348:	mov	r0, #0
   1334c:	cmp	r1, #6
   13350:	popcc	{r4, sl, fp, pc}
   13354:	add	r0, r4, #4
   13358:	bl	1b624 <main@@Base+0x2a4>
   1335c:	cmp	r0, #0
   13360:	movwne	r0, #1
   13364:	pop	{r4, sl, fp, pc}
   13368:	movw	r0, #12550	; 0x3106
   1336c:	movt	r0, #2
   13370:	movw	r1, #12588	; 0x312c
   13374:	movt	r1, #2
   13378:	movw	r3, #12825	; 0x3219
   1337c:	movt	r3, #2
   13380:	mov	r2, #696	; 0x2b8
   13384:	bl	12f88 <__assert_fail@plt>
   13388:	push	{r4, r5, fp, lr}
   1338c:	add	fp, sp, #8
   13390:	cmp	r0, #0
   13394:	beq	133d0 <verify_empty_monster@@Base+0x348>
   13398:	mov	r4, r0
   1339c:	bl	1b61c <main@@Base+0x29c>
   133a0:	sub	r5, r4, r0
   133a4:	mov	r0, r5
   133a8:	bl	1b624 <main@@Base+0x2a4>
   133ac:	cmp	r0, #6
   133b0:	bcc	133c8 <verify_empty_monster@@Base+0x340>
   133b4:	add	r0, r5, #4
   133b8:	bl	1b624 <main@@Base+0x2a4>
   133bc:	cmp	r0, #0
   133c0:	addne	r0, r4, r0
   133c4:	popne	{r4, r5, fp, pc}
   133c8:	mov	r0, #0
   133cc:	pop	{r4, r5, fp, pc}
   133d0:	movw	r0, #12550	; 0x3106
   133d4:	movt	r0, #2
   133d8:	movw	r1, #12588	; 0x312c
   133dc:	movt	r1, #2
   133e0:	movw	r3, #12899	; 0x3263
   133e4:	movt	r3, #2
   133e8:	mov	r2, #696	; 0x2b8
   133ec:	bl	12f88 <__assert_fail@plt>

000133f0 <test_enums@@Base>:
   133f0:	mov	r0, #0
   133f4:	bx	lr

000133f8 <test_type_aliases@@Base>:
   133f8:	push	{r4, r5, fp, lr}
   133fc:	add	fp, sp, #8
   13400:	sub	sp, sp, #8
   13404:	mov	r4, r0
   13408:	bl	1db9c <flatcc_builder_reset@@Base>
   1340c:	mov	r0, r4
   13410:	mov	r1, #0
   13414:	mov	r2, #0
   13418:	bl	13594 <test_type_aliases@@Base+0x19c>
   1341c:	mov	r5, r0
   13420:	mov	r0, r4
   13424:	bl	135bc <test_type_aliases@@Base+0x1c4>
   13428:	mov	r2, r0
   1342c:	mov	r0, r4
   13430:	mov	r1, r5
   13434:	bl	135f0 <test_type_aliases@@Base+0x1f8>
   13438:	add	r1, sp, #4
   1343c:	mov	r0, r4
   13440:	bl	209cc <flatcc_builder_finalize_aligned_buffer@@Base>
   13444:	mov	r4, r0
   13448:	ldr	r1, [sp, #4]
   1344c:	bl	13638 <test_type_aliases@@Base+0x240>
   13450:	cmp	r0, #0
   13454:	beq	13498 <test_type_aliases@@Base+0xa0>
   13458:	mov	r5, r0
   1345c:	movw	r0, #36976	; 0x9070
   13460:	movt	r0, #3
   13464:	ldr	r3, [r0]
   13468:	ldr	r2, [sp, #4]
   1346c:	movw	r0, #9218	; 0x2402
   13470:	movt	r0, #2
   13474:	mov	r1, r4
   13478:	bl	1364c <test_type_aliases@@Base+0x254>
   1347c:	mov	r0, r5
   13480:	bl	21280 <flatcc_verify_error_string@@Base>
   13484:	mov	r1, r0
   13488:	movw	r0, #9237	; 0x2415
   1348c:	movt	r0, #2
   13490:	bl	12e98 <printf@plt>
   13494:	b	1356c <test_type_aliases@@Base+0x174>
   13498:	mov	r0, r4
   1349c:	bl	1378c <test_type_aliases@@Base+0x394>
   134a0:	mov	r5, r0
   134a4:	bl	137cc <test_type_aliases@@Base+0x3d4>
   134a8:	cmn	r0, #128	; 0x80
   134ac:	bne	1355c <test_type_aliases@@Base+0x164>
   134b0:	mov	r0, r5
   134b4:	bl	1383c <test_type_aliases@@Base+0x444>
   134b8:	cmn	r0, #32768	; 0x8000
   134bc:	bne	1355c <test_type_aliases@@Base+0x164>
   134c0:	mov	r0, r5
   134c4:	bl	138ac <test_type_aliases@@Base+0x4b4>
   134c8:	cmp	r0, #-2147483648	; 0x80000000
   134cc:	bne	1355c <test_type_aliases@@Base+0x164>
   134d0:	mov	r0, r5
   134d4:	bl	1391c <test_type_aliases@@Base+0x524>
   134d8:	eor	r1, r1, #-2147483648	; 0x80000000
   134dc:	orrs	r0, r0, r1
   134e0:	bne	1355c <test_type_aliases@@Base+0x164>
   134e4:	mov	r0, r5
   134e8:	bl	13990 <test_type_aliases@@Base+0x598>
   134ec:	cmp	r0, #255	; 0xff
   134f0:	bne	1355c <test_type_aliases@@Base+0x164>
   134f4:	mov	r0, r5
   134f8:	bl	13a00 <test_type_aliases@@Base+0x608>
   134fc:	movw	r1, #65535	; 0xffff
   13500:	cmp	r0, r1
   13504:	bne	1355c <test_type_aliases@@Base+0x164>
   13508:	mov	r0, r5
   1350c:	bl	13a70 <test_type_aliases@@Base+0x678>
   13510:	cmn	r0, #1
   13514:	bne	1355c <test_type_aliases@@Base+0x164>
   13518:	mov	r0, r5
   1351c:	bl	13ae0 <test_type_aliases@@Base+0x6e8>
   13520:	and	r0, r0, r1
   13524:	cmn	r0, #1
   13528:	bne	1355c <test_type_aliases@@Base+0x164>
   1352c:	mov	r0, r5
   13530:	bl	13b54 <test_type_aliases@@Base+0x75c>
   13534:	vldr	s2, [pc, #84]	; 13590 <test_type_aliases@@Base+0x198>
   13538:	vcmp.f32	s0, s2
   1353c:	vmrs	APSR_nzcv, fpscr
   13540:	bne	1355c <test_type_aliases@@Base+0x164>
   13544:	mov	r0, r5
   13548:	bl	13bc8 <test_type_aliases@@Base+0x7d0>
   1354c:	vldr	d16, [pc, #52]	; 13588 <test_type_aliases@@Base+0x190>
   13550:	vcmp.f64	d0, d16
   13554:	vmrs	APSR_nzcv, fpscr
   13558:	beq	13580 <test_type_aliases@@Base+0x188>
   1355c:	movw	r0, #21078	; 0x5256
   13560:	movt	r0, #2
   13564:	bl	12ee0 <puts@plt>
   13568:	mvn	r5, #0
   1356c:	mov	r0, r4
   13570:	bl	20aac <flatcc_builder_aligned_free@@Base>
   13574:	mov	r0, r5
   13578:	sub	sp, fp, #8
   1357c:	pop	{r4, r5, fp, pc}
   13580:	mov	r5, #0
   13584:	b	1356c <test_type_aliases@@Base+0x174>
   13588:	strbtvs	r6, [r6], -r6, ror #12
   1358c:	andmi	r6, r2, r6, ror #12
   13590:	andsmi	r3, r3, r3, lsr r3
   13594:	push	{fp, lr}
   13598:	mov	fp, sp
   1359c:	sub	sp, sp, #8
   135a0:	mvn	ip, #0
   135a4:	mov	r3, #1
   135a8:	stm	sp, {r3, ip}
   135ac:	mov	r3, #1
   135b0:	bl	1f884 <flatcc_builder_create_vector@@Base>
   135b4:	mov	sp, fp
   135b8:	pop	{fp, pc}
   135bc:	push	{fp, lr}
   135c0:	mov	fp, sp
   135c4:	sub	sp, sp, #8
   135c8:	mvn	r1, #-536870912	; 0xe0000000
   135cc:	mov	r2, #8
   135d0:	str	r2, [sp]
   135d4:	str	r1, [sp, #4]
   135d8:	mov	r1, #0
   135dc:	mov	r2, #0
   135e0:	mov	r3, #8
   135e4:	bl	1f884 <flatcc_builder_create_vector@@Base>
   135e8:	mov	sp, fp
   135ec:	pop	{fp, pc}
   135f0:	push	{r4, r5, r6, sl, fp, lr}
   135f4:	add	fp, sp, #16
   135f8:	mov	r5, r2
   135fc:	mov	r6, r1
   13600:	mov	r4, r0
   13604:	movw	r1, #9108	; 0x2394
   13608:	movt	r1, #2
   1360c:	bl	13d40 <test_empty_monster@@Base+0x108>
   13610:	cmp	r0, #0
   13614:	popne	{r4, r5, r6, sl, fp, pc}
   13618:	mov	r0, r4
   1361c:	mov	r1, r6
   13620:	mov	r2, r5
   13624:	bl	1b640 <main@@Base+0x2c0>
   13628:	mov	r1, r0
   1362c:	mov	r0, r4
   13630:	pop	{r4, r5, r6, sl, fp, lr}
   13634:	b	13dc4 <test_empty_monster@@Base+0x18c>
   13638:	movw	r2, #9108	; 0x2394
   1363c:	movt	r2, #2
   13640:	movw	r3, #47944	; 0xbb48
   13644:	movt	r3, #1
   13648:	b	21bc8 <flatcc_verify_table_as_root@@Base>
   1364c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13650:	add	fp, sp, #28
   13654:	sub	sp, sp, #20
   13658:	mov	r4, r3
   1365c:	mov	r5, r2
   13660:	mov	r6, r1
   13664:	cmp	r0, #0
   13668:	beq	13680 <test_type_aliases@@Base+0x288>
   1366c:	mov	r2, r0
   13670:	movw	r1, #13349	; 0x3425
   13674:	movt	r1, #2
   13678:	mov	r0, r4
   1367c:	bl	12f28 <fprintf@plt>
   13680:	cmp	r5, #0
   13684:	beq	13770 <test_type_aliases@@Base+0x378>
   13688:	add	r7, sp, #3
   1368c:	movw	sl, #13368	; 0x3438
   13690:	movt	sl, #2
   13694:	mov	r8, #0
   13698:	ands	r9, r8, #15
   1369c:	bne	13700 <test_type_aliases@@Base+0x308>
   136a0:	b	13718 <test_type_aliases@@Base+0x320>
   136a4:	mov	r0, r4
   136a8:	movw	r1, #13360	; 0x3430
   136ac:	movt	r1, #2
   136b0:	mov	r2, r8
   136b4:	bl	12f28 <fprintf@plt>
   136b8:	ldrb	r2, [r6, r8]
   136bc:	mov	r0, r4
   136c0:	mov	r1, sl
   136c4:	bl	12f28 <fprintf@plt>
   136c8:	ldrb	r0, [r6, r8]
   136cc:	sub	r1, r0, #32
   136d0:	uxtb	r1, r1
   136d4:	cmp	r1, #94	; 0x5e
   136d8:	movwhi	r0, #46	; 0x2e
   136dc:	strb	r0, [r7, r9]
   136e0:	add	r0, r7, r9
   136e4:	mov	r1, #0
   136e8:	strb	r1, [r0, #1]
   136ec:	add	r8, r8, #1
   136f0:	cmp	r5, r8
   136f4:	beq	13738 <test_type_aliases@@Base+0x340>
   136f8:	ands	r9, r8, #15
   136fc:	beq	13718 <test_type_aliases@@Base+0x320>
   13700:	tst	r8, #7
   13704:	bne	136b8 <test_type_aliases@@Base+0x2c0>
   13708:	mov	r0, #32
   1370c:	mov	r1, r4
   13710:	bl	12f64 <fputc@plt>
   13714:	b	136b8 <test_type_aliases@@Base+0x2c0>
   13718:	cmp	r8, #0
   1371c:	beq	136a4 <test_type_aliases@@Base+0x2ac>
   13720:	mov	r0, r4
   13724:	movw	r1, #13354	; 0x342a
   13728:	movt	r1, #2
   1372c:	mov	r2, r7
   13730:	bl	12f28 <fprintf@plt>
   13734:	b	136a4 <test_type_aliases@@Base+0x2ac>
   13738:	tst	r5, #15
   1373c:	beq	13770 <test_type_aliases@@Base+0x378>
   13740:	add	r6, r5, #1
   13744:	movw	r5, #13374	; 0x343e
   13748:	movt	r5, #2
   1374c:	mov	r0, r5
   13750:	mov	r1, #3
   13754:	mov	r2, #1
   13758:	mov	r3, r4
   1375c:	bl	12ec8 <fwrite@plt>
   13760:	add	r0, r6, #1
   13764:	tst	r6, #15
   13768:	mov	r6, r0
   1376c:	bne	1374c <test_type_aliases@@Base+0x354>
   13770:	movw	r1, #13354	; 0x342a
   13774:	movt	r1, #2
   13778:	add	r2, sp, #3
   1377c:	mov	r0, r4
   13780:	bl	12f28 <fprintf@plt>
   13784:	sub	sp, fp, #28
   13788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1378c:	push	{r4, r5, fp, lr}
   13790:	add	fp, sp, #8
   13794:	mov	r5, #0
   13798:	cmp	r0, #0
   1379c:	beq	137c4 <test_type_aliases@@Base+0x3cc>
   137a0:	mov	r4, r0
   137a4:	movw	r1, #9108	; 0x2394
   137a8:	movt	r1, #2
   137ac:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   137b0:	cmp	r0, #0
   137b4:	beq	137c4 <test_type_aliases@@Base+0x3cc>
   137b8:	mov	r0, r4
   137bc:	bl	1b610 <main@@Base+0x290>
   137c0:	add	r5, r4, r0
   137c4:	mov	r0, r5
   137c8:	pop	{r4, r5, fp, pc}
   137cc:	push	{r4, r5, fp, lr}
   137d0:	add	fp, sp, #8
   137d4:	cmp	r0, #0
   137d8:	beq	1381c <test_type_aliases@@Base+0x424>
   137dc:	mov	r4, r0
   137e0:	bl	1b61c <main@@Base+0x29c>
   137e4:	sub	r5, r4, r0
   137e8:	mov	r0, r5
   137ec:	bl	1b624 <main@@Base+0x2a4>
   137f0:	cmp	r0, #6
   137f4:	bcc	13814 <test_type_aliases@@Base+0x41c>
   137f8:	add	r0, r5, #4
   137fc:	bl	1b624 <main@@Base+0x2a4>
   13800:	cmp	r0, #0
   13804:	beq	13814 <test_type_aliases@@Base+0x41c>
   13808:	add	r0, r4, r0
   1380c:	pop	{r4, r5, fp, lr}
   13810:	b	1bcc4 <main@@Base+0x944>
   13814:	mov	r0, #0
   13818:	pop	{r4, r5, fp, pc}
   1381c:	movw	r0, #12550	; 0x3106
   13820:	movt	r0, #2
   13824:	movw	r1, #12588	; 0x312c
   13828:	movt	r1, #2
   1382c:	movw	r3, #13378	; 0x3442
   13830:	movt	r3, #2
   13834:	movw	r2, #749	; 0x2ed
   13838:	bl	12f88 <__assert_fail@plt>
   1383c:	push	{r4, r5, fp, lr}
   13840:	add	fp, sp, #8
   13844:	cmp	r0, #0
   13848:	beq	1388c <test_type_aliases@@Base+0x494>
   1384c:	mov	r4, r0
   13850:	bl	1b61c <main@@Base+0x29c>
   13854:	sub	r5, r4, r0
   13858:	mov	r0, r5
   1385c:	bl	1b624 <main@@Base+0x2a4>
   13860:	cmp	r0, #10
   13864:	bcc	13884 <test_type_aliases@@Base+0x48c>
   13868:	add	r0, r5, #8
   1386c:	bl	1b624 <main@@Base+0x2a4>
   13870:	cmp	r0, #0
   13874:	beq	13884 <test_type_aliases@@Base+0x48c>
   13878:	add	r0, r4, r0
   1387c:	pop	{r4, r5, fp, lr}
   13880:	b	1b62c <main@@Base+0x2ac>
   13884:	mov	r0, #0
   13888:	pop	{r4, r5, fp, pc}
   1388c:	movw	r0, #12550	; 0x3106
   13890:	movt	r0, #2
   13894:	movw	r1, #12588	; 0x312c
   13898:	movt	r1, #2
   1389c:	movw	r3, #13451	; 0x348b
   138a0:	movt	r3, #2
   138a4:	movw	r2, #751	; 0x2ef
   138a8:	bl	12f88 <__assert_fail@plt>
   138ac:	push	{r4, r5, fp, lr}
   138b0:	add	fp, sp, #8
   138b4:	cmp	r0, #0
   138b8:	beq	138fc <test_type_aliases@@Base+0x504>
   138bc:	mov	r4, r0
   138c0:	bl	1b61c <main@@Base+0x29c>
   138c4:	sub	r5, r4, r0
   138c8:	mov	r0, r5
   138cc:	bl	1b624 <main@@Base+0x2a4>
   138d0:	cmp	r0, #14
   138d4:	bcc	138f4 <test_type_aliases@@Base+0x4fc>
   138d8:	add	r0, r5, #12
   138dc:	bl	1b624 <main@@Base+0x2a4>
   138e0:	cmp	r0, #0
   138e4:	beq	138f4 <test_type_aliases@@Base+0x4fc>
   138e8:	add	r0, r4, r0
   138ec:	pop	{r4, r5, fp, lr}
   138f0:	b	1bcd0 <main@@Base+0x950>
   138f4:	mov	r0, #0
   138f8:	pop	{r4, r5, fp, pc}
   138fc:	movw	r0, #12550	; 0x3106
   13900:	movt	r0, #2
   13904:	movw	r1, #12588	; 0x312c
   13908:	movt	r1, #2
   1390c:	movw	r3, #13526	; 0x34d6
   13910:	movt	r3, #2
   13914:	movw	r2, #753	; 0x2f1
   13918:	bl	12f88 <__assert_fail@plt>
   1391c:	push	{r4, r5, fp, lr}
   13920:	add	fp, sp, #8
   13924:	cmp	r0, #0
   13928:	beq	13970 <test_type_aliases@@Base+0x578>
   1392c:	mov	r4, r0
   13930:	bl	1b61c <main@@Base+0x29c>
   13934:	sub	r5, r4, r0
   13938:	mov	r0, r5
   1393c:	bl	1b624 <main@@Base+0x2a4>
   13940:	cmp	r0, #18
   13944:	bcc	13964 <test_type_aliases@@Base+0x56c>
   13948:	add	r0, r5, #16
   1394c:	bl	1b624 <main@@Base+0x2a4>
   13950:	cmp	r0, #0
   13954:	beq	13964 <test_type_aliases@@Base+0x56c>
   13958:	add	r0, r4, r0
   1395c:	pop	{r4, r5, fp, lr}
   13960:	b	1bcdc <main@@Base+0x95c>
   13964:	mov	r0, #0
   13968:	mov	r1, #0
   1396c:	pop	{r4, r5, fp, pc}
   13970:	movw	r0, #12550	; 0x3106
   13974:	movt	r0, #2
   13978:	movw	r1, #12588	; 0x312c
   1397c:	movt	r1, #2
   13980:	movw	r3, #13601	; 0x3521
   13984:	movt	r3, #2
   13988:	movw	r2, #755	; 0x2f3
   1398c:	bl	12f88 <__assert_fail@plt>
   13990:	push	{r4, r5, fp, lr}
   13994:	add	fp, sp, #8
   13998:	cmp	r0, #0
   1399c:	beq	139e0 <test_type_aliases@@Base+0x5e8>
   139a0:	mov	r4, r0
   139a4:	bl	1b61c <main@@Base+0x29c>
   139a8:	sub	r5, r4, r0
   139ac:	mov	r0, r5
   139b0:	bl	1b624 <main@@Base+0x2a4>
   139b4:	cmp	r0, #8
   139b8:	bcc	139d8 <test_type_aliases@@Base+0x5e0>
   139bc:	add	r0, r5, #6
   139c0:	bl	1b624 <main@@Base+0x2a4>
   139c4:	cmp	r0, #0
   139c8:	beq	139d8 <test_type_aliases@@Base+0x5e0>
   139cc:	add	r0, r4, r0
   139d0:	pop	{r4, r5, fp, lr}
   139d4:	b	1bce8 <main@@Base+0x968>
   139d8:	mov	r0, #0
   139dc:	pop	{r4, r5, fp, pc}
   139e0:	movw	r0, #12550	; 0x3106
   139e4:	movt	r0, #2
   139e8:	movw	r1, #12588	; 0x312c
   139ec:	movt	r1, #2
   139f0:	movw	r3, #13676	; 0x356c
   139f4:	movt	r3, #2
   139f8:	movw	r2, #750	; 0x2ee
   139fc:	bl	12f88 <__assert_fail@plt>
   13a00:	push	{r4, r5, fp, lr}
   13a04:	add	fp, sp, #8
   13a08:	cmp	r0, #0
   13a0c:	beq	13a50 <test_type_aliases@@Base+0x658>
   13a10:	mov	r4, r0
   13a14:	bl	1b61c <main@@Base+0x29c>
   13a18:	sub	r5, r4, r0
   13a1c:	mov	r0, r5
   13a20:	bl	1b624 <main@@Base+0x2a4>
   13a24:	cmp	r0, #12
   13a28:	bcc	13a48 <test_type_aliases@@Base+0x650>
   13a2c:	add	r0, r5, #10
   13a30:	bl	1b624 <main@@Base+0x2a4>
   13a34:	cmp	r0, #0
   13a38:	beq	13a48 <test_type_aliases@@Base+0x650>
   13a3c:	add	r0, r4, r0
   13a40:	pop	{r4, r5, fp, lr}
   13a44:	b	1bcf4 <main@@Base+0x974>
   13a48:	mov	r0, #0
   13a4c:	pop	{r4, r5, fp, pc}
   13a50:	movw	r0, #12550	; 0x3106
   13a54:	movt	r0, #2
   13a58:	movw	r1, #12588	; 0x312c
   13a5c:	movt	r1, #2
   13a60:	movw	r3, #13750	; 0x35b6
   13a64:	movt	r3, #2
   13a68:	mov	r2, #752	; 0x2f0
   13a6c:	bl	12f88 <__assert_fail@plt>
   13a70:	push	{r4, r5, fp, lr}
   13a74:	add	fp, sp, #8
   13a78:	cmp	r0, #0
   13a7c:	beq	13ac0 <test_type_aliases@@Base+0x6c8>
   13a80:	mov	r4, r0
   13a84:	bl	1b61c <main@@Base+0x29c>
   13a88:	sub	r5, r4, r0
   13a8c:	mov	r0, r5
   13a90:	bl	1b624 <main@@Base+0x2a4>
   13a94:	cmp	r0, #16
   13a98:	bcc	13ab8 <test_type_aliases@@Base+0x6c0>
   13a9c:	add	r0, r5, #14
   13aa0:	bl	1b624 <main@@Base+0x2a4>
   13aa4:	cmp	r0, #0
   13aa8:	beq	13ab8 <test_type_aliases@@Base+0x6c0>
   13aac:	add	r0, r4, r0
   13ab0:	pop	{r4, r5, fp, lr}
   13ab4:	b	1bd00 <main@@Base+0x980>
   13ab8:	mov	r0, #0
   13abc:	pop	{r4, r5, fp, pc}
   13ac0:	movw	r0, #12550	; 0x3106
   13ac4:	movt	r0, #2
   13ac8:	movw	r1, #12588	; 0x312c
   13acc:	movt	r1, #2
   13ad0:	movw	r3, #13826	; 0x3602
   13ad4:	movt	r3, #2
   13ad8:	movw	r2, #754	; 0x2f2
   13adc:	bl	12f88 <__assert_fail@plt>
   13ae0:	push	{r4, r5, fp, lr}
   13ae4:	add	fp, sp, #8
   13ae8:	cmp	r0, #0
   13aec:	beq	13b34 <test_type_aliases@@Base+0x73c>
   13af0:	mov	r4, r0
   13af4:	bl	1b61c <main@@Base+0x29c>
   13af8:	sub	r5, r4, r0
   13afc:	mov	r0, r5
   13b00:	bl	1b624 <main@@Base+0x2a4>
   13b04:	cmp	r0, #20
   13b08:	bcc	13b28 <test_type_aliases@@Base+0x730>
   13b0c:	add	r0, r5, #18
   13b10:	bl	1b624 <main@@Base+0x2a4>
   13b14:	cmp	r0, #0
   13b18:	beq	13b28 <test_type_aliases@@Base+0x730>
   13b1c:	add	r0, r4, r0
   13b20:	pop	{r4, r5, fp, lr}
   13b24:	b	1bd0c <main@@Base+0x98c>
   13b28:	mov	r0, #0
   13b2c:	mov	r1, #0
   13b30:	pop	{r4, r5, fp, pc}
   13b34:	movw	r0, #12550	; 0x3106
   13b38:	movt	r0, #2
   13b3c:	movw	r1, #12588	; 0x312c
   13b40:	movt	r1, #2
   13b44:	movw	r3, #13902	; 0x364e
   13b48:	movt	r3, #2
   13b4c:	mov	r2, #756	; 0x2f4
   13b50:	bl	12f88 <__assert_fail@plt>
   13b54:	push	{r4, r5, fp, lr}
   13b58:	add	fp, sp, #8
   13b5c:	cmp	r0, #0
   13b60:	beq	13ba4 <test_type_aliases@@Base+0x7ac>
   13b64:	mov	r4, r0
   13b68:	bl	1b61c <main@@Base+0x29c>
   13b6c:	sub	r5, r4, r0
   13b70:	mov	r0, r5
   13b74:	bl	1b624 <main@@Base+0x2a4>
   13b78:	cmp	r0, #22
   13b7c:	bcc	13b9c <test_type_aliases@@Base+0x7a4>
   13b80:	add	r0, r5, #20
   13b84:	bl	1b624 <main@@Base+0x2a4>
   13b88:	cmp	r0, #0
   13b8c:	beq	13b9c <test_type_aliases@@Base+0x7a4>
   13b90:	add	r0, r4, r0
   13b94:	pop	{r4, r5, fp, lr}
   13b98:	b	1bd18 <main@@Base+0x998>
   13b9c:	vldr	s0, [pc, #32]	; 13bc4 <test_type_aliases@@Base+0x7cc>
   13ba0:	pop	{r4, r5, fp, pc}
   13ba4:	movw	r0, #12550	; 0x3106
   13ba8:	movt	r0, #2
   13bac:	movw	r1, #12588	; 0x312c
   13bb0:	movt	r1, #2
   13bb4:	movw	r3, #13978	; 0x369a
   13bb8:	movt	r3, #2
   13bbc:	movw	r2, #757	; 0x2f5
   13bc0:	bl	12f88 <__assert_fail@plt>
   13bc4:	andeq	r0, r0, r0
   13bc8:	push	{r4, r5, fp, lr}
   13bcc:	add	fp, sp, #8
   13bd0:	cmp	r0, #0
   13bd4:	beq	13c18 <test_type_aliases@@Base+0x820>
   13bd8:	mov	r4, r0
   13bdc:	bl	1b61c <main@@Base+0x29c>
   13be0:	sub	r5, r4, r0
   13be4:	mov	r0, r5
   13be8:	bl	1b624 <main@@Base+0x2a4>
   13bec:	cmp	r0, #24
   13bf0:	bcc	13c10 <test_type_aliases@@Base+0x818>
   13bf4:	add	r0, r5, #22
   13bf8:	bl	1b624 <main@@Base+0x2a4>
   13bfc:	cmp	r0, #0
   13c00:	beq	13c10 <test_type_aliases@@Base+0x818>
   13c04:	add	r0, r4, r0
   13c08:	pop	{r4, r5, fp, lr}
   13c0c:	b	1bd24 <main@@Base+0x9a4>
   13c10:	vmov.i32	d0, #0	; 0x00000000
   13c14:	pop	{r4, r5, fp, pc}
   13c18:	movw	r0, #12550	; 0x3106
   13c1c:	movt	r0, #2
   13c20:	movw	r1, #12588	; 0x312c
   13c24:	movt	r1, #2
   13c28:	movw	r3, #14051	; 0x36e3
   13c2c:	movt	r3, #2
   13c30:	movw	r2, #758	; 0x2f6
   13c34:	bl	12f88 <__assert_fail@plt>

00013c38 <test_empty_monster@@Base>:
   13c38:	push	{r4, r5, fp, lr}
   13c3c:	add	fp, sp, #8
   13c40:	sub	sp, sp, #8
   13c44:	mov	r4, r0
   13c48:	bl	1db9c <flatcc_builder_reset@@Base>
   13c4c:	movw	r1, #9108	; 0x2394
   13c50:	movt	r1, #2
   13c54:	mov	r0, r4
   13c58:	bl	13d40 <test_empty_monster@@Base+0x108>
   13c5c:	mov	r0, r4
   13c60:	bl	13d4c <test_empty_monster@@Base+0x114>
   13c64:	movw	r1, #9281	; 0x2441
   13c68:	movt	r1, #2
   13c6c:	mov	r0, r4
   13c70:	bl	13d54 <test_empty_monster@@Base+0x11c>
   13c74:	mov	r0, r4
   13c78:	bl	13d74 <test_empty_monster@@Base+0x13c>
   13c7c:	mov	r1, r0
   13c80:	mov	r0, r4
   13c84:	bl	13dc4 <test_empty_monster@@Base+0x18c>
   13c88:	add	r1, sp, #4
   13c8c:	mov	r0, r4
   13c90:	bl	209cc <flatcc_builder_finalize_aligned_buffer@@Base>
   13c94:	mov	r4, r0
   13c98:	movw	r0, #36976	; 0x9070
   13c9c:	movt	r0, #3
   13ca0:	ldr	r3, [r0]
   13ca4:	ldr	r2, [sp, #4]
   13ca8:	movw	r0, #9291	; 0x244b
   13cac:	movt	r0, #2
   13cb0:	mov	r1, r4
   13cb4:	bl	1364c <test_type_aliases@@Base+0x254>
   13cb8:	mov	r0, r4
   13cbc:	bl	13088 <verify_empty_monster@@Base>
   13cc0:	mov	r5, r0
   13cc4:	cmp	r0, #0
   13cc8:	beq	13cd8 <test_empty_monster@@Base+0xa0>
   13ccc:	mov	r0, r4
   13cd0:	bl	20aac <flatcc_builder_aligned_free@@Base>
   13cd4:	b	13d0c <test_empty_monster@@Base+0xd4>
   13cd8:	ldr	r1, [sp, #4]
   13cdc:	movw	r2, #9108	; 0x2394
   13ce0:	movt	r2, #2
   13ce4:	mov	r0, r4
   13ce8:	bl	13dc8 <test_empty_monster@@Base+0x190>
   13cec:	cmp	r0, #0
   13cf0:	beq	13d18 <test_empty_monster@@Base+0xe0>
   13cf4:	bl	21280 <flatcc_verify_error_string@@Base>
   13cf8:	mov	r1, r0
   13cfc:	movw	r0, #9311	; 0x245f
   13d00:	movt	r0, #2
   13d04:	bl	12e98 <printf@plt>
   13d08:	mvn	r5, #0
   13d0c:	mov	r0, r5
   13d10:	sub	sp, fp, #8
   13d14:	pop	{r4, r5, fp, pc}
   13d18:	ldr	r0, [sp, #4]
   13d1c:	sub	r1, r0, #1
   13d20:	mov	r0, r4
   13d24:	bl	13dd4 <test_empty_monster@@Base+0x19c>
   13d28:	cmp	r0, #0
   13d2c:	bne	13ccc <test_empty_monster@@Base+0x94>
   13d30:	movw	r0, #21125	; 0x5285
   13d34:	movt	r0, #2
   13d38:	bl	12ee0 <puts@plt>
   13d3c:	b	13d08 <test_empty_monster@@Base+0xd0>
   13d40:	mov	r2, #0
   13d44:	mov	r3, #0
   13d48:	b	1e340 <flatcc_builder_start_buffer@@Base>
   13d4c:	mov	r1, #36	; 0x24
   13d50:	b	1f02c <flatcc_builder_start_table@@Base>
   13d54:	push	{r4, sl, fp, lr}
   13d58:	add	fp, sp, #8
   13d5c:	mov	r4, r0
   13d60:	bl	20524 <flatcc_builder_create_string_str@@Base>
   13d64:	mov	r1, r0
   13d68:	mov	r0, r4
   13d6c:	pop	{r4, sl, fp, lr}
   13d70:	b	16188 <gen_monster@@Base+0x64c>
   13d74:	push	{r4, sl, fp, lr}
   13d78:	add	fp, sp, #8
   13d7c:	mov	r4, r0
   13d80:	movw	r1, #27548	; 0x6b9c
   13d84:	movt	r1, #2
   13d88:	mov	r2, #1
   13d8c:	bl	1f6b8 <flatcc_builder_check_required@@Base>
   13d90:	cmp	r0, #0
   13d94:	beq	13da4 <test_empty_monster@@Base+0x16c>
   13d98:	mov	r0, r4
   13d9c:	pop	{r4, sl, fp, lr}
   13da0:	b	1f738 <flatcc_builder_end_table@@Base>
   13da4:	movw	r0, #14125	; 0x372d
   13da8:	movt	r0, #2
   13dac:	movw	r1, #13161	; 0x3369
   13db0:	movt	r1, #2
   13db4:	movw	r3, #14287	; 0x37cf
   13db8:	movt	r3, #2
   13dbc:	mov	r2, #235	; 0xeb
   13dc0:	bl	12f88 <__assert_fail@plt>
   13dc4:	b	1e4f4 <flatcc_builder_end_buffer@@Base>
   13dc8:	movw	r3, #48432	; 0xbd30
   13dcc:	movt	r3, #1
   13dd0:	b	21bc8 <flatcc_verify_table_as_root@@Base>
   13dd4:	movw	r2, #9108	; 0x2394
   13dd8:	movt	r2, #2
   13ddc:	movw	r3, #48432	; 0xbd30
   13de0:	movt	r3, #1
   13de4:	b	21bc8 <flatcc_verify_table_as_root@@Base>

00013de8 <test_typed_empty_monster@@Base>:
   13de8:	push	{r4, r5, r6, sl, fp, lr}
   13dec:	add	fp, sp, #16
   13df0:	sub	sp, sp, #8
   13df4:	mov	r4, r0
   13df8:	mov	r0, #0
   13dfc:	str	r0, [sp]
   13e00:	mov	r0, r4
   13e04:	bl	1db9c <flatcc_builder_reset@@Base>
   13e08:	movw	r1, #9351	; 0x2487
   13e0c:	movt	r1, #2
   13e10:	mov	r0, r4
   13e14:	bl	13d40 <test_empty_monster@@Base+0x108>
   13e18:	mov	r0, r4
   13e1c:	bl	13d4c <test_empty_monster@@Base+0x114>
   13e20:	movw	r1, #9281	; 0x2441
   13e24:	movt	r1, #2
   13e28:	mov	r0, r4
   13e2c:	bl	13d54 <test_empty_monster@@Base+0x11c>
   13e30:	mov	r0, r4
   13e34:	bl	13d74 <test_empty_monster@@Base+0x13c>
   13e38:	mov	r1, r0
   13e3c:	mov	r0, r4
   13e40:	bl	13dc4 <test_empty_monster@@Base+0x18c>
   13e44:	add	r1, sp, #4
   13e48:	mov	r0, r4
   13e4c:	bl	209cc <flatcc_builder_finalize_aligned_buffer@@Base>
   13e50:	mov	r4, r0
   13e54:	movw	r0, #36976	; 0x9070
   13e58:	movt	r0, #3
   13e5c:	ldr	r3, [r0]
   13e60:	ldr	r2, [sp, #4]
   13e64:	movw	r0, #9356	; 0x248c
   13e68:	movt	r0, #2
   13e6c:	mov	r1, r4
   13e70:	bl	1364c <test_type_aliases@@Base+0x254>
   13e74:	mov	r0, r4
   13e78:	bl	14004 <test_typed_empty_monster@@Base+0x21c>
   13e7c:	mov	r5, r0
   13e80:	bl	1400c <test_typed_empty_monster@@Base+0x224>
   13e84:	cmp	r5, r0
   13e88:	bne	13f04 <test_typed_empty_monster@@Base+0x11c>
   13e8c:	movw	r6, #62593	; 0xf481
   13e90:	movt	r6, #13070	; 0x330e
   13e94:	mov	r0, r4
   13e98:	mov	r1, r6
   13e9c:	bl	14018 <test_typed_empty_monster@@Base+0x230>
   13ea0:	cmp	r0, #0
   13ea4:	beq	13f18 <test_typed_empty_monster@@Base+0x130>
   13ea8:	mov	r0, r4
   13eac:	bl	13088 <verify_empty_monster@@Base>
   13eb0:	cmp	r0, #0
   13eb4:	beq	13f24 <test_typed_empty_monster@@Base+0x13c>
   13eb8:	ldr	r1, [sp, #4]
   13ebc:	movw	r2, #9351	; 0x2487
   13ec0:	movt	r2, #2
   13ec4:	mov	r0, r4
   13ec8:	bl	13dc8 <test_empty_monster@@Base+0x190>
   13ecc:	cmp	r0, #0
   13ed0:	bne	13ee8 <test_typed_empty_monster@@Base+0x100>
   13ed4:	ldr	r1, [sp, #4]
   13ed8:	mov	r0, r4
   13edc:	bl	14048 <test_typed_empty_monster@@Base+0x260>
   13ee0:	cmp	r0, #0
   13ee4:	beq	13f48 <test_typed_empty_monster@@Base+0x160>
   13ee8:	mov	r5, r0
   13eec:	bl	21280 <flatcc_verify_error_string@@Base>
   13ef0:	mov	r1, r0
   13ef4:	movw	r0, #9432	; 0x24d8
   13ef8:	movt	r0, #2
   13efc:	bl	12e98 <printf@plt>
   13f00:	b	13f34 <test_typed_empty_monster@@Base+0x14c>
   13f04:	movw	r0, #9382	; 0x24a6
   13f08:	movt	r0, #2
   13f0c:	mov	r1, r5
   13f10:	bl	12e98 <printf@plt>
   13f14:	b	13f30 <test_typed_empty_monster@@Base+0x148>
   13f18:	movw	r0, #21170	; 0x52b2
   13f1c:	movt	r0, #2
   13f20:	b	13f2c <test_typed_empty_monster@@Base+0x144>
   13f24:	movw	r0, #21210	; 0x52da
   13f28:	movt	r0, #2
   13f2c:	bl	12ee0 <puts@plt>
   13f30:	mvn	r5, #0
   13f34:	mov	r0, r4
   13f38:	bl	20aac <flatcc_builder_aligned_free@@Base>
   13f3c:	mov	r0, r5
   13f40:	sub	sp, fp, #16
   13f44:	pop	{r4, r5, r6, sl, fp, pc}
   13f48:	ldr	r1, [sp, #4]
   13f4c:	mov	r0, r4
   13f50:	mov	r2, r6
   13f54:	bl	1405c <test_typed_empty_monster@@Base+0x274>
   13f58:	cmp	r0, #0
   13f5c:	beq	13f7c <test_typed_empty_monster@@Base+0x194>
   13f60:	mov	r5, r0
   13f64:	bl	21280 <flatcc_verify_error_string@@Base>
   13f68:	mov	r1, r0
   13f6c:	movw	r0, #9478	; 0x2506
   13f70:	movt	r0, #2
   13f74:	bl	12e98 <printf@plt>
   13f78:	b	13f34 <test_typed_empty_monster@@Base+0x14c>
   13f7c:	ldr	r5, [sp, #4]
   13f80:	bl	1400c <test_typed_empty_monster@@Base+0x224>
   13f84:	mov	r2, r0
   13f88:	mov	r0, r4
   13f8c:	mov	r1, r5
   13f90:	bl	1405c <test_typed_empty_monster@@Base+0x274>
   13f94:	cmp	r0, #0
   13f98:	beq	13fb8 <test_typed_empty_monster@@Base+0x1d0>
   13f9c:	mov	r5, r0
   13fa0:	bl	21280 <flatcc_verify_error_string@@Base>
   13fa4:	mov	r1, r0
   13fa8:	movw	r0, #9533	; 0x253d
   13fac:	movt	r0, #2
   13fb0:	bl	12e98 <printf@plt>
   13fb4:	b	13f34 <test_typed_empty_monster@@Base+0x14c>
   13fb8:	mov	r5, sp
   13fbc:	mov	r0, r5
   13fc0:	bl	14068 <test_typed_empty_monster@@Base+0x280>
   13fc4:	ldr	r1, [sp, #4]
   13fc8:	mov	r0, r4
   13fcc:	mov	r2, r5
   13fd0:	bl	13dc8 <test_empty_monster@@Base+0x190>
   13fd4:	cmp	r0, #0
   13fd8:	bne	13ee8 <test_typed_empty_monster@@Base+0x100>
   13fdc:	ldr	r1, [sp, #4]
   13fe0:	mov	r0, r4
   13fe4:	bl	13dd4 <test_empty_monster@@Base+0x19c>
   13fe8:	mov	r5, #0
   13fec:	cmp	r0, #0
   13ff0:	bne	13f34 <test_typed_empty_monster@@Base+0x14c>
   13ff4:	movw	r0, #21272	; 0x5318
   13ff8:	movt	r0, #2
   13ffc:	bl	12ee0 <puts@plt>
   14000:	b	13f34 <test_typed_empty_monster@@Base+0x14c>
   14004:	add	r0, r0, #4
   14008:	b	1c694 <main@@Base+0x1314>
   1400c:	movw	r0, #62593	; 0xf481
   14010:	movt	r0, #13070	; 0x330e
   14014:	bx	lr
   14018:	cmp	r1, #0
   1401c:	moveq	r0, #1
   14020:	bxeq	lr
   14024:	push	{r4, sl, fp, lr}
   14028:	add	fp, sp, #8
   1402c:	mov	r4, r1
   14030:	add	r0, r0, #4
   14034:	bl	1c694 <main@@Base+0x1314>
   14038:	sub	r0, r0, r4
   1403c:	clz	r0, r0
   14040:	lsr	r0, r0, #5
   14044:	pop	{r4, sl, fp, pc}
   14048:	movw	r2, #9351	; 0x2487
   1404c:	movt	r2, #2
   14050:	movw	r3, #48432	; 0xbd30
   14054:	movt	r3, #1
   14058:	b	21bc8 <flatcc_verify_table_as_root@@Base>
   1405c:	movw	r3, #48432	; 0xbd30
   14060:	movt	r3, #1
   14064:	b	21c38 <flatcc_verify_table_as_typed_root@@Base>
   14068:	movw	r1, #62593	; 0xf481
   1406c:	movt	r1, #13070	; 0x330e
   14070:	str	r1, [r0]
   14074:	bx	lr

00014078 <verify_table_with_emptystruct@@Base>:
   14078:	push	{fp, lr}
   1407c:	mov	fp, sp
   14080:	bl	140c0 <verify_table_with_emptystruct@@Base+0x48>
   14084:	cmp	r0, #0
   14088:	beq	140ac <verify_table_with_emptystruct@@Base+0x34>
   1408c:	bl	14100 <verify_table_with_emptystruct@@Base+0x88>
   14090:	mov	r1, r0
   14094:	mov	r0, #0
   14098:	cmp	r1, #0
   1409c:	popne	{fp, pc}
   140a0:	movw	r0, #21382	; 0x5386
   140a4:	movt	r0, #2
   140a8:	b	140b4 <verify_table_with_emptystruct@@Base+0x3c>
   140ac:	movw	r0, #21345	; 0x5361
   140b0:	movt	r0, #2
   140b4:	bl	12ee0 <puts@plt>
   140b8:	mvn	r0, #0
   140bc:	pop	{fp, pc}
   140c0:	push	{r4, r5, fp, lr}
   140c4:	add	fp, sp, #8
   140c8:	mov	r5, #0
   140cc:	cmp	r0, #0
   140d0:	beq	140f8 <verify_table_with_emptystruct@@Base+0x80>
   140d4:	mov	r4, r0
   140d8:	movw	r1, #9108	; 0x2394
   140dc:	movt	r1, #2
   140e0:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   140e4:	cmp	r0, #0
   140e8:	beq	140f8 <verify_table_with_emptystruct@@Base+0x80>
   140ec:	mov	r0, r4
   140f0:	bl	1b610 <main@@Base+0x290>
   140f4:	add	r5, r4, r0
   140f8:	mov	r0, r5
   140fc:	pop	{r4, r5, fp, pc}
   14100:	push	{r4, r5, fp, lr}
   14104:	add	fp, sp, #8
   14108:	cmp	r0, #0
   1410c:	beq	14148 <verify_table_with_emptystruct@@Base+0xd0>
   14110:	mov	r4, r0
   14114:	bl	1b61c <main@@Base+0x29c>
   14118:	sub	r5, r4, r0
   1411c:	mov	r0, r5
   14120:	bl	1b624 <main@@Base+0x2a4>
   14124:	cmp	r0, #6
   14128:	bcc	14140 <verify_table_with_emptystruct@@Base+0xc8>
   1412c:	add	r0, r5, #4
   14130:	bl	1b624 <main@@Base+0x2a4>
   14134:	cmp	r0, #0
   14138:	addne	r0, r4, r0
   1413c:	popne	{r4, r5, fp, pc}
   14140:	mov	r0, #0
   14144:	pop	{r4, r5, fp, pc}
   14148:	movw	r0, #12550	; 0x3106
   1414c:	movt	r0, #2
   14150:	movw	r1, #12588	; 0x312c
   14154:	movt	r1, #2
   14158:	movw	r3, #14368	; 0x3820
   1415c:	movt	r3, #2
   14160:	movw	r2, #569	; 0x239
   14164:	bl	12f88 <__assert_fail@plt>

00014168 <test_table_with_emptystruct@@Base>:
   14168:	push	{r4, r5, fp, lr}
   1416c:	add	fp, sp, #8
   14170:	sub	sp, sp, #8
   14174:	mov	r4, r0
   14178:	bl	1db9c <flatcc_builder_reset@@Base>
   1417c:	mov	r0, r4
   14180:	bl	141d4 <test_table_with_emptystruct@@Base+0x6c>
   14184:	add	r1, sp, #4
   14188:	mov	r0, r4
   1418c:	bl	209cc <flatcc_builder_finalize_aligned_buffer@@Base>
   14190:	mov	r4, r0
   14194:	movw	r0, #36976	; 0x9070
   14198:	movt	r0, #3
   1419c:	ldr	r3, [r0]
   141a0:	ldr	r2, [sp, #4]
   141a4:	movw	r0, #9603	; 0x2583
   141a8:	movt	r0, #2
   141ac:	mov	r1, r4
   141b0:	bl	1364c <test_type_aliases@@Base+0x254>
   141b4:	mov	r0, r4
   141b8:	bl	14078 <verify_table_with_emptystruct@@Base>
   141bc:	mov	r5, r0
   141c0:	mov	r0, r4
   141c4:	bl	20aac <flatcc_builder_aligned_free@@Base>
   141c8:	mov	r0, r5
   141cc:	sub	sp, fp, #8
   141d0:	pop	{r4, r5, fp, pc}
   141d4:	push	{r4, sl, fp, lr}
   141d8:	add	fp, sp, #8
   141dc:	mov	r4, r0
   141e0:	movw	r1, #9108	; 0x2394
   141e4:	movt	r1, #2
   141e8:	bl	13d40 <test_empty_monster@@Base+0x108>
   141ec:	cmp	r0, #0
   141f0:	popne	{r4, sl, fp, pc}
   141f4:	mov	r0, r4
   141f8:	bl	1c6a0 <main@@Base+0x1320>
   141fc:	mov	r1, r0
   14200:	mov	r0, r4
   14204:	pop	{r4, sl, fp, lr}
   14208:	b	13dc4 <test_empty_monster@@Base+0x18c>

0001420c <test_typed_table_with_emptystruct@@Base>:
   1420c:	push	{r4, r5, fp, lr}
   14210:	add	fp, sp, #8
   14214:	sub	sp, sp, #8
   14218:	mov	r4, r0
   1421c:	bl	1db9c <flatcc_builder_reset@@Base>
   14220:	mov	r0, r4
   14224:	bl	1441c <test_typed_table_with_emptystruct@@Base+0x210>
   14228:	add	r1, sp, #4
   1422c:	mov	r0, r4
   14230:	bl	20898 <flatcc_builder_get_direct_buffer@@Base>
   14234:	mov	r4, r0
   14238:	movw	r0, #36976	; 0x9070
   1423c:	movt	r0, #3
   14240:	ldr	r3, [r0]
   14244:	ldr	r2, [sp, #4]
   14248:	movw	r0, #9597	; 0x257d
   1424c:	movt	r0, #2
   14250:	mov	r1, r4
   14254:	bl	1364c <test_type_aliases@@Base+0x254>
   14258:	ldr	r1, [sp, #4]
   1425c:	mov	r0, r4
   14260:	bl	14454 <test_typed_table_with_emptystruct@@Base+0x248>
   14264:	cmp	r0, #0
   14268:	beq	14278 <test_typed_table_with_emptystruct@@Base+0x6c>
   1426c:	movw	r0, #21811	; 0x5533
   14270:	movt	r0, #2
   14274:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14278:	ldr	r1, [sp, #4]
   1427c:	mov	r0, r4
   14280:	bl	14468 <test_typed_table_with_emptystruct@@Base+0x25c>
   14284:	cmp	r0, #0
   14288:	beq	14298 <test_typed_table_with_emptystruct@@Base+0x8c>
   1428c:	movw	r0, #21783	; 0x5517
   14290:	movt	r0, #2
   14294:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14298:	ldr	r1, [sp, #4]
   1429c:	mov	r0, r4
   142a0:	bl	1447c <test_typed_table_with_emptystruct@@Base+0x270>
   142a4:	cmp	r0, #0
   142a8:	beq	142c8 <test_typed_table_with_emptystruct@@Base+0xbc>
   142ac:	movw	r0, #21746	; 0x54f2
   142b0:	movt	r0, #2
   142b4:	bl	12ee0 <puts@plt>
   142b8:	mvn	r5, #0
   142bc:	mov	r0, r5
   142c0:	sub	sp, fp, #8
   142c4:	pop	{r4, r5, fp, pc}
   142c8:	cmp	r4, #0
   142cc:	beq	1431c <test_typed_table_with_emptystruct@@Base+0x110>
   142d0:	movw	r1, #14262	; 0x37b6
   142d4:	movt	r1, #45277	; 0xb0dd
   142d8:	mov	r0, r4
   142dc:	bl	14018 <test_typed_empty_monster@@Base+0x230>
   142e0:	cmp	r0, #0
   142e4:	beq	14328 <test_typed_table_with_emptystruct@@Base+0x11c>
   142e8:	mov	r0, r4
   142ec:	mov	r1, #0
   142f0:	bl	14018 <test_typed_empty_monster@@Base+0x230>
   142f4:	cmp	r0, #0
   142f8:	beq	14334 <test_typed_table_with_emptystruct@@Base+0x128>
   142fc:	mov	r0, r4
   14300:	mov	r1, #1
   14304:	bl	14018 <test_typed_empty_monster@@Base+0x230>
   14308:	cmp	r0, #0
   1430c:	beq	14340 <test_typed_table_with_emptystruct@@Base+0x134>
   14310:	movw	r0, #21711	; 0x54cf
   14314:	movt	r0, #2
   14318:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   1431c:	movw	r0, #21409	; 0x53a1
   14320:	movt	r0, #2
   14324:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14328:	movw	r0, #21433	; 0x53b9
   1432c:	movt	r0, #2
   14330:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14334:	movw	r0, #21449	; 0x53c9
   14338:	movt	r0, #2
   1433c:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14340:	mov	r0, r4
   14344:	mov	r1, #0
   14348:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1434c:	cmp	r0, #0
   14350:	beq	14388 <test_typed_table_with_emptystruct@@Base+0x17c>
   14354:	movw	r1, #9627	; 0x259b
   14358:	movt	r1, #2
   1435c:	mov	r0, r4
   14360:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   14364:	cmp	r0, #0
   14368:	beq	14394 <test_typed_table_with_emptystruct@@Base+0x188>
   1436c:	mov	r0, r4
   14370:	bl	140c0 <verify_table_with_emptystruct@@Base+0x48>
   14374:	cmp	r0, #0
   14378:	beq	143a0 <test_typed_table_with_emptystruct@@Base+0x194>
   1437c:	movw	r0, #21681	; 0x54b1
   14380:	movt	r0, #2
   14384:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14388:	movw	r0, #21466	; 0x53da
   1438c:	movt	r0, #2
   14390:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14394:	movw	r0, #21500	; 0x53fc
   14398:	movt	r0, #2
   1439c:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   143a0:	mov	r0, r4
   143a4:	mov	r1, #1
   143a8:	bl	14500 <test_typed_table_with_emptystruct@@Base+0x2f4>
   143ac:	cmp	r0, #0
   143b0:	beq	143c0 <test_typed_table_with_emptystruct@@Base+0x1b4>
   143b4:	movw	r0, #21644	; 0x548c
   143b8:	movt	r0, #2
   143bc:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   143c0:	mov	r0, r4
   143c4:	bl	14538 <test_typed_table_with_emptystruct@@Base+0x32c>
   143c8:	cmp	r0, #0
   143cc:	beq	14404 <test_typed_table_with_emptystruct@@Base+0x1f8>
   143d0:	mov	r0, r4
   143d4:	bl	14578 <test_typed_table_with_emptystruct@@Base+0x36c>
   143d8:	cmp	r0, #0
   143dc:	beq	14410 <test_typed_table_with_emptystruct@@Base+0x204>
   143e0:	mov	r5, #0
   143e4:	mov	r0, r4
   143e8:	mov	r1, #0
   143ec:	bl	14500 <test_typed_table_with_emptystruct@@Base+0x2f4>
   143f0:	cmp	r0, #0
   143f4:	bne	142bc <test_typed_table_with_emptystruct@@Base+0xb0>
   143f8:	movw	r0, #21619	; 0x5473
   143fc:	movt	r0, #2
   14400:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14404:	movw	r0, #21542	; 0x5426
   14408:	movt	r0, #2
   1440c:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   14410:	movw	r0, #21598	; 0x545e
   14414:	movt	r0, #2
   14418:	b	142b4 <test_typed_table_with_emptystruct@@Base+0xa8>
   1441c:	push	{r4, sl, fp, lr}
   14420:	add	fp, sp, #8
   14424:	mov	r4, r0
   14428:	movw	r1, #9627	; 0x259b
   1442c:	movt	r1, #2
   14430:	bl	13d40 <test_empty_monster@@Base+0x108>
   14434:	cmp	r0, #0
   14438:	popne	{r4, sl, fp, pc}
   1443c:	mov	r0, r4
   14440:	bl	1c6a0 <main@@Base+0x1320>
   14444:	mov	r1, r0
   14448:	mov	r0, r4
   1444c:	pop	{r4, sl, fp, lr}
   14450:	b	13dc4 <test_empty_monster@@Base+0x18c>
   14454:	movw	r2, #9627	; 0x259b
   14458:	movt	r2, #2
   1445c:	movw	r3, #51044	; 0xc764
   14460:	movt	r3, #1
   14464:	b	21bc8 <flatcc_verify_table_as_root@@Base>
   14468:	movw	r2, #9627	; 0x259b
   1446c:	movt	r2, #2
   14470:	movw	r3, #51044	; 0xc764
   14474:	movt	r3, #1
   14478:	b	21bc8 <flatcc_verify_table_as_root@@Base>
   1447c:	movw	r2, #14262	; 0x37b6
   14480:	movt	r2, #45277	; 0xb0dd
   14484:	movw	r3, #51044	; 0xc764
   14488:	movt	r3, #1
   1448c:	b	21c38 <flatcc_verify_table_as_typed_root@@Base>
   14490:	push	{r4, r5, fp, lr}
   14494:	add	fp, sp, #8
   14498:	sub	sp, sp, #8
   1449c:	mov	r4, r0
   144a0:	mov	r0, #0
   144a4:	str	r0, [sp, #4]
   144a8:	cmp	r1, #0
   144ac:	beq	144f4 <test_typed_table_with_emptystruct@@Base+0x2e8>
   144b0:	add	r0, sp, #4
   144b4:	mov	r2, #4
   144b8:	bl	12f4c <strncpy@plt>
   144bc:	ldr	r5, [sp, #4]
   144c0:	mov	r0, r5
   144c4:	bl	1c774 <main@@Base+0x13f4>
   144c8:	str	r5, [sp, #4]
   144cc:	add	r0, r4, #4
   144d0:	bl	1c694 <main@@Base+0x1314>
   144d4:	sub	r0, r0, r5
   144d8:	clz	r0, r0
   144dc:	lsr	r0, r0, #5
   144e0:	clz	r1, r5
   144e4:	lsr	r1, r1, #5
   144e8:	orr	r0, r1, r0
   144ec:	sub	sp, fp, #8
   144f0:	pop	{r4, r5, fp, pc}
   144f4:	mov	r0, #1
   144f8:	sub	sp, fp, #8
   144fc:	pop	{r4, r5, fp, pc}
   14500:	push	{r4, r5, fp, lr}
   14504:	add	fp, sp, #8
   14508:	mov	r5, #0
   1450c:	cmp	r0, #0
   14510:	beq	14530 <test_typed_table_with_emptystruct@@Base+0x324>
   14514:	mov	r4, r0
   14518:	bl	14018 <test_typed_empty_monster@@Base+0x230>
   1451c:	cmp	r0, #0
   14520:	beq	14530 <test_typed_table_with_emptystruct@@Base+0x324>
   14524:	mov	r0, r4
   14528:	bl	1b610 <main@@Base+0x290>
   1452c:	add	r5, r4, r0
   14530:	mov	r0, r5
   14534:	pop	{r4, r5, fp, pc}
   14538:	push	{r4, r5, fp, lr}
   1453c:	add	fp, sp, #8
   14540:	mov	r5, #0
   14544:	cmp	r0, #0
   14548:	beq	14570 <test_typed_table_with_emptystruct@@Base+0x364>
   1454c:	mov	r4, r0
   14550:	movw	r1, #9627	; 0x259b
   14554:	movt	r1, #2
   14558:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1455c:	cmp	r0, #0
   14560:	beq	14570 <test_typed_table_with_emptystruct@@Base+0x364>
   14564:	mov	r0, r4
   14568:	bl	1b610 <main@@Base+0x290>
   1456c:	add	r5, r4, r0
   14570:	mov	r0, r5
   14574:	pop	{r4, r5, fp, pc}
   14578:	push	{r4, r5, fp, lr}
   1457c:	add	fp, sp, #8
   14580:	mov	r5, #0
   14584:	cmp	r0, #0
   14588:	beq	145b0 <test_typed_table_with_emptystruct@@Base+0x3a4>
   1458c:	mov	r4, r0
   14590:	movw	r1, #14262	; 0x37b6
   14594:	movt	r1, #45277	; 0xb0dd
   14598:	bl	14018 <test_typed_empty_monster@@Base+0x230>
   1459c:	cmp	r0, #0
   145a0:	beq	145b0 <test_typed_table_with_emptystruct@@Base+0x3a4>
   145a4:	mov	r0, r4
   145a8:	bl	1b610 <main@@Base+0x290>
   145ac:	add	r5, r4, r0
   145b0:	mov	r0, r5
   145b4:	pop	{r4, r5, fp, pc}

000145b8 <verify_monster@@Base>:
   145b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145bc:	add	fp, sp, #28
   145c0:	sub	sp, sp, #4
   145c4:	vpush	{d8-d10}
   145c8:	sub	sp, sp, #48	; 0x30
   145cc:	bfc	sp, #0, #4
   145d0:	mov	r4, r0
   145d4:	mov	r1, #0
   145d8:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   145dc:	cmp	r0, #0
   145e0:	beq	14638 <verify_monster@@Base+0x80>
   145e4:	movw	r1, #9108	; 0x2394
   145e8:	movt	r1, #2
   145ec:	mov	r0, r4
   145f0:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   145f4:	cmp	r0, #0
   145f8:	beq	14644 <verify_monster@@Base+0x8c>
   145fc:	movw	r1, #9632	; 0x25a0
   14600:	movt	r1, #2
   14604:	mov	r0, r4
   14608:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1460c:	cmp	r0, #0
   14610:	beq	14650 <verify_monster@@Base+0x98>
   14614:	movw	r1, #9640	; 0x25a8
   14618:	movt	r1, #2
   1461c:	mov	r0, r4
   14620:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   14624:	cmp	r0, #0
   14628:	beq	14670 <verify_monster@@Base+0xb8>
   1462c:	movw	r0, #23336	; 0x5b28
   14630:	movt	r0, #2
   14634:	b	14658 <verify_monster@@Base+0xa0>
   14638:	movw	r0, #21842	; 0x5552
   1463c:	movt	r0, #2
   14640:	b	14658 <verify_monster@@Base+0xa0>
   14644:	movw	r0, #23345	; 0x5b31
   14648:	movt	r0, #2
   1464c:	b	14658 <verify_monster@@Base+0xa0>
   14650:	movw	r0, #21883	; 0x557b
   14654:	movt	r0, #2
   14658:	bl	12ee0 <puts@plt>
   1465c:	mvn	r0, #0
   14660:	sub	sp, fp, #56	; 0x38
   14664:	vpop	{d8-d10}
   14668:	add	sp, sp, #4
   1466c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14670:	movw	r1, #9108	; 0x2394
   14674:	movt	r1, #2
   14678:	mov	r0, r4
   1467c:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   14680:	cmp	r0, #0
   14684:	beq	146f4 <verify_monster@@Base+0x13c>
   14688:	mov	r0, r4
   1468c:	bl	13208 <verify_empty_monster@@Base+0x180>
   14690:	cmp	r0, #0
   14694:	beq	14700 <verify_monster@@Base+0x148>
   14698:	mov	r4, r0
   1469c:	bl	13248 <verify_empty_monster@@Base+0x1c0>
   146a0:	cmp	r0, #80	; 0x50
   146a4:	bne	1470c <verify_monster@@Base+0x154>
   146a8:	mov	r0, r4
   146ac:	bl	13388 <verify_empty_monster@@Base+0x300>
   146b0:	cmp	r0, #0
   146b4:	beq	14718 <verify_monster@@Base+0x160>
   146b8:	mov	r5, r0
   146bc:	tst	r0, #15
   146c0:	beq	146d0 <verify_monster@@Base+0x118>
   146c4:	movw	r0, #23297	; 0x5b01
   146c8:	movt	r0, #2
   146cc:	bl	12ee0 <puts@plt>
   146d0:	mov	r0, r5
   146d4:	bl	14fcc <verify_monster@@Base+0xa14>
   146d8:	vldr	s16, [pc, #1008]	; 14ad0 <verify_monster@@Base+0x518>
   146dc:	vcmp.f32	s0, s16
   146e0:	vmrs	APSR_nzcv, fpscr
   146e4:	beq	14724 <verify_monster@@Base+0x16c>
   146e8:	movw	r0, #23264	; 0x5ae0
   146ec:	movt	r0, #2
   146f0:	b	14658 <verify_monster@@Base+0xa0>
   146f4:	movw	r0, #21932	; 0x55ac
   146f8:	movt	r0, #2
   146fc:	b	14658 <verify_monster@@Base+0xa0>
   14700:	movw	r0, #20835	; 0x5163
   14704:	movt	r0, #2
   14708:	b	14658 <verify_monster@@Base+0xa0>
   1470c:	movw	r0, #20945	; 0x51d1
   14710:	movt	r0, #2
   14714:	b	14658 <verify_monster@@Base+0xa0>
   14718:	movw	r0, #21982	; 0x55de
   1471c:	movt	r0, #2
   14720:	b	14658 <verify_monster@@Base+0xa0>
   14724:	vldr	s0, [r5]
   14728:	vmov.f32	s18, #112	; 0x3f800000  1.0
   1472c:	vcmp.f32	s0, s18
   14730:	vmrs	APSR_nzcv, fpscr
   14734:	bne	1475c <verify_monster@@Base+0x1a4>
   14738:	vldr	s0, [r5, #4]
   1473c:	vmov.f32	s20, #0	; 0x40000000  2.0
   14740:	vcmp.f32	s0, s20
   14744:	vmrs	APSR_nzcv, fpscr
   14748:	bne	1475c <verify_monster@@Base+0x1a4>
   1474c:	vldr	s0, [r5, #8]
   14750:	vcmp.f32	s0, s16
   14754:	vmrs	APSR_nzcv, fpscr
   14758:	beq	14768 <verify_monster@@Base+0x1b0>
   1475c:	movw	r0, #23242	; 0x5aca
   14760:	movt	r0, #2
   14764:	b	14658 <verify_monster@@Base+0xa0>
   14768:	add	r6, sp, #16
   1476c:	mov	r0, r6
   14770:	bl	14fe8 <verify_monster@@Base+0xa30>
   14774:	mov	r0, r6
   14778:	mov	r1, r5
   1477c:	bl	14ff8 <verify_monster@@Base+0xa40>
   14780:	vldr	s0, [sp, #16]
   14784:	vcmp.f32	s0, s18
   14788:	vmrs	APSR_nzcv, fpscr
   1478c:	bne	147b0 <verify_monster@@Base+0x1f8>
   14790:	vldr	s0, [sp, #20]
   14794:	vcmp.f32	s0, s20
   14798:	vmrs	APSR_nzcv, fpscr
   1479c:	bne	147b0 <verify_monster@@Base+0x1f8>
   147a0:	vldr	s0, [sp, #24]
   147a4:	vcmp.f32	s0, s16
   147a8:	vmrs	APSR_nzcv, fpscr
   147ac:	beq	147bc <verify_monster@@Base+0x204>
   147b0:	movw	r0, #23209	; 0x5aa9
   147b4:	movt	r0, #2
   147b8:	b	14658 <verify_monster@@Base+0xa0>
   147bc:	vldr	d16, [r5, #16]
   147c0:	vcmp.f64	d16, #0.0
   147c4:	vmrs	APSR_nzcv, fpscr
   147c8:	bne	147e8 <verify_monster@@Base+0x230>
   147cc:	add	r0, r5, #26
   147d0:	movw	r1, #27388	; 0x6afc
   147d4:	movt	r1, #2
   147d8:	mov	r2, #4
   147dc:	bl	12f10 <bcmp@plt>
   147e0:	cmp	r0, #0
   147e4:	beq	147f4 <verify_monster@@Base+0x23c>
   147e8:	movw	r0, #23173	; 0x5a85
   147ec:	movt	r0, #2
   147f0:	b	14658 <verify_monster@@Base+0xa0>
   147f4:	mov	r0, r4
   147f8:	bl	15048 <verify_monster@@Base+0xa90>
   147fc:	mov	r5, r0
   14800:	movw	r1, #9281	; 0x2441
   14804:	movt	r1, #2
   14808:	bl	12e8c <strcmp@plt>
   1480c:	cmp	r0, #0
   14810:	beq	14820 <verify_monster@@Base+0x268>
   14814:	movw	r0, #22001	; 0x55f1
   14818:	movt	r0, #2
   1481c:	b	14658 <verify_monster@@Base+0xa0>
   14820:	mov	r0, r4
   14824:	bl	15048 <verify_monster@@Base+0xa90>
   14828:	mov	r6, r0
   1482c:	mov	r0, r5
   14830:	bl	150c8 <verify_monster@@Base+0xb10>
   14834:	cmp	r0, #9
   14838:	bne	14898 <verify_monster@@Base+0x2e0>
   1483c:	mov	r0, r6
   14840:	bl	150c8 <verify_monster@@Base+0xb10>
   14844:	cmp	r0, #9
   14848:	bne	14898 <verify_monster@@Base+0x2e0>
   1484c:	mov	r0, r4
   14850:	bl	150dc <verify_monster@@Base+0xb24>
   14854:	cmp	r0, #2
   14858:	bne	148a4 <verify_monster@@Base+0x2ec>
   1485c:	mov	r0, #2
   14860:	bl	1514c <verify_monster@@Base+0xb94>
   14864:	cmp	r0, #0
   14868:	beq	148b0 <verify_monster@@Base+0x2f8>
   1486c:	mov	r0, #1
   14870:	bl	1514c <verify_monster@@Base+0xb94>
   14874:	cmp	r0, #0
   14878:	beq	148bc <verify_monster@@Base+0x304>
   1487c:	mov	r0, #4
   14880:	bl	1514c <verify_monster@@Base+0xb94>
   14884:	cmp	r0, #0
   14888:	beq	148c8 <verify_monster@@Base+0x310>
   1488c:	movw	r0, #23073	; 0x5a21
   14890:	movt	r0, #2
   14894:	b	14658 <verify_monster@@Base+0xa0>
   14898:	movw	r0, #23146	; 0x5a6a
   1489c:	movt	r0, #2
   148a0:	b	14658 <verify_monster@@Base+0xa0>
   148a4:	movw	r0, #23116	; 0x5a4c
   148a8:	movt	r0, #2
   148ac:	b	14658 <verify_monster@@Base+0xa0>
   148b0:	movw	r0, #22021	; 0x5605
   148b4:	movt	r0, #2
   148b8:	b	14658 <verify_monster@@Base+0xa0>
   148bc:	movw	r0, #22079	; 0x563f
   148c0:	movt	r0, #2
   148c4:	b	14658 <verify_monster@@Base+0xa0>
   148c8:	mov	r0, #8
   148cc:	bl	1514c <verify_monster@@Base+0xb94>
   148d0:	cmp	r0, #0
   148d4:	beq	148f4 <verify_monster@@Base+0x33c>
   148d8:	mov	r0, #9
   148dc:	bl	1514c <verify_monster@@Base+0xb94>
   148e0:	cmp	r0, #0
   148e4:	beq	14900 <verify_monster@@Base+0x348>
   148e8:	movw	r0, #23073	; 0x5a21
   148ec:	movt	r0, #2
   148f0:	b	14658 <verify_monster@@Base+0xa0>
   148f4:	movw	r0, #22135	; 0x5677
   148f8:	movt	r0, #2
   148fc:	b	14658 <verify_monster@@Base+0xa0>
   14900:	mov	r0, #1
   14904:	bl	15178 <verify_monster@@Base+0xbc0>
   14908:	cmp	r0, #0
   1490c:	beq	1492c <verify_monster@@Base+0x374>
   14910:	mov	r0, #42	; 0x2a
   14914:	bl	15178 <verify_monster@@Base+0xbc0>
   14918:	cmp	r0, #0
   1491c:	beq	14938 <verify_monster@@Base+0x380>
   14920:	movw	r0, #23037	; 0x59fd
   14924:	movt	r0, #2
   14928:	b	14658 <verify_monster@@Base+0xa0>
   1492c:	movw	r0, #22192	; 0x56b0
   14930:	movt	r0, #2
   14934:	b	14658 <verify_monster@@Base+0xa0>
   14938:	mov	r0, r4
   1493c:	bl	1518c <verify_monster@@Base+0xbd4>
   14940:	mov	r5, r0
   14944:	bl	15208 <verify_monster@@Base+0xc50>
   14948:	cmp	r0, #10
   1494c:	bne	149b8 <verify_monster@@Base+0x400>
   14950:	mov	r0, r5
   14954:	bl	15208 <verify_monster@@Base+0xc50>
   14958:	cmp	r0, #0
   1495c:	beq	1498c <verify_monster@@Base+0x3d4>
   14960:	mov	r6, #0
   14964:	mov	r0, r5
   14968:	mov	r1, r6
   1496c:	bl	1520c <verify_monster@@Base+0xc54>
   14970:	cmp	r6, r0
   14974:	bne	149d0 <verify_monster@@Base+0x418>
   14978:	add	r6, r6, #1
   1497c:	mov	r0, r5
   14980:	bl	15208 <verify_monster@@Base+0xc50>
   14984:	cmp	r6, r0
   14988:	bcc	14964 <verify_monster@@Base+0x3ac>
   1498c:	mov	r0, r4
   14990:	bl	15254 <verify_monster@@Base+0xc9c>
   14994:	cmp	r0, #150	; 0x96
   14998:	bne	149c4 <verify_monster@@Base+0x40c>
   1499c:	mov	r0, r4
   149a0:	bl	152c4 <verify_monster@@Base+0xd0c>
   149a4:	cmp	r0, #0
   149a8:	beq	149e4 <verify_monster@@Base+0x42c>
   149ac:	movw	r0, #22972	; 0x59bc
   149b0:	movt	r0, #2
   149b4:	b	14658 <verify_monster@@Base+0xa0>
   149b8:	movw	r0, #23009	; 0x59e1
   149bc:	movt	r0, #2
   149c0:	b	14658 <verify_monster@@Base+0xa0>
   149c4:	movw	r0, #22992	; 0x59d0
   149c8:	movt	r0, #2
   149cc:	b	14658 <verify_monster@@Base+0xa0>
   149d0:	movw	r0, #9645	; 0x25ad
   149d4:	movt	r0, #2
   149d8:	mov	r1, r6
   149dc:	bl	12e98 <printf@plt>
   149e0:	b	1465c <verify_monster@@Base+0xa4>
   149e4:	mov	r0, r4
   149e8:	bl	132b8 <verify_empty_monster@@Base+0x230>
   149ec:	cmp	r0, #0
   149f0:	beq	14ad4 <verify_monster@@Base+0x51c>
   149f4:	mov	r0, r4
   149f8:	bl	13320 <verify_empty_monster@@Base+0x298>
   149fc:	cmp	r0, #0
   14a00:	beq	14ae0 <verify_monster@@Base+0x528>
   14a04:	mov	r0, r4
   14a08:	bl	1532c <verify_monster@@Base+0xd74>
   14a0c:	mov	r8, r0
   14a10:	bl	153a8 <verify_monster@@Base+0xdf0>
   14a14:	cmp	r0, #5
   14a18:	bne	14aec <verify_monster@@Base+0x534>
   14a1c:	movw	r0, #27368	; 0x6ae8
   14a20:	movt	r0, #2
   14a24:	add	r5, r0, #2
   14a28:	mvn	r6, #4
   14a2c:	add	r9, r6, #5
   14a30:	mov	r0, r8
   14a34:	mov	r1, r9
   14a38:	bl	153bc <verify_monster@@Base+0xe04>
   14a3c:	mov	r7, r0
   14a40:	ldrh	sl, [r5, #-2]
   14a44:	bl	153fc <verify_monster@@Base+0xe44>
   14a48:	uxth	r0, r0
   14a4c:	cmp	sl, r0
   14a50:	bne	14af8 <verify_monster@@Base+0x540>
   14a54:	ldrb	sl, [r5]
   14a58:	mov	r0, r7
   14a5c:	bl	1540c <verify_monster@@Base+0xe54>
   14a60:	uxtb	r0, r0
   14a64:	cmp	sl, r0
   14a68:	bne	14af8 <verify_monster@@Base+0x540>
   14a6c:	add	r5, r5, #4
   14a70:	adds	r6, r6, #1
   14a74:	bcc	14a2c <verify_monster@@Base+0x474>
   14a78:	mov	r0, r4
   14a7c:	bl	15420 <verify_monster@@Base+0xe68>
   14a80:	mov	r5, r0
   14a84:	bl	1549c <verify_monster@@Base+0xee4>
   14a88:	cmp	r0, #8
   14a8c:	bne	14b0c <verify_monster@@Base+0x554>
   14a90:	mov	r0, r5
   14a94:	mov	r1, #5
   14a98:	bl	154b0 <verify_monster@@Base+0xef8>
   14a9c:	cmp	r0, #0
   14aa0:	beq	14e64 <verify_monster@@Base+0x8ac>
   14aa4:	mov	r6, r0
   14aa8:	bl	15048 <verify_monster@@Base+0xa90>
   14aac:	movw	r1, #9842	; 0x2672
   14ab0:	movt	r1, #2
   14ab4:	bl	12e8c <strcmp@plt>
   14ab8:	cmp	r0, #0
   14abc:	beq	14b18 <verify_monster@@Base+0x560>
   14ac0:	movw	r0, #9826	; 0x2662
   14ac4:	movt	r0, #2
   14ac8:	bl	12e98 <printf@plt>
   14acc:	b	1465c <verify_monster@@Base+0xa4>
   14ad0:	subgt	ip, ip, sp, asr #25
   14ad4:	movw	r0, #22225	; 0x56d1
   14ad8:	movt	r0, #2
   14adc:	b	14658 <verify_monster@@Base+0xa0>
   14ae0:	movw	r0, #20889	; 0x5199
   14ae4:	movt	r0, #2
   14ae8:	b	14658 <verify_monster@@Base+0xa0>
   14aec:	movw	r0, #22934	; 0x5996
   14af0:	movt	r0, #2
   14af4:	b	14658 <verify_monster@@Base+0xa0>
   14af8:	movw	r0, #9674	; 0x25ca
   14afc:	movt	r0, #2
   14b00:	mov	r1, r9
   14b04:	bl	12e98 <printf@plt>
   14b08:	b	1465c <verify_monster@@Base+0xa4>
   14b0c:	movw	r0, #22901	; 0x5975
   14b10:	movt	r0, #2
   14b14:	b	14658 <verify_monster@@Base+0xa0>
   14b18:	mov	r0, r5
   14b1c:	mov	r1, #1
   14b20:	bl	154b0 <verify_monster@@Base+0xef8>
   14b24:	cmp	r0, r6
   14b28:	beq	14b38 <verify_monster@@Base+0x580>
   14b2c:	movw	r0, #22848	; 0x5940
   14b30:	movt	r0, #2
   14b34:	b	14658 <verify_monster@@Base+0xa0>
   14b38:	bl	15048 <verify_monster@@Base+0xa90>
   14b3c:	mov	r6, r0
   14b40:	movw	r1, #9842	; 0x2672
   14b44:	movt	r1, #2
   14b48:	bl	12e8c <strcmp@plt>
   14b4c:	cmp	r0, #0
   14b50:	beq	14b60 <verify_monster@@Base+0x5a8>
   14b54:	movw	r0, #9850	; 0x267a
   14b58:	movt	r0, #2
   14b5c:	b	149d8 <verify_monster@@Base+0x420>
   14b60:	mov	r0, r5
   14b64:	mov	r1, #2
   14b68:	bl	154b0 <verify_monster@@Base+0xef8>
   14b6c:	bl	15048 <verify_monster@@Base+0xa90>
   14b70:	mov	r6, r0
   14b74:	movw	r1, #24648	; 0x6048
   14b78:	movt	r1, #2
   14b7c:	bl	12e8c <strcmp@plt>
   14b80:	cmp	r0, #0
   14b84:	beq	14b94 <verify_monster@@Base+0x5dc>
   14b88:	movw	r0, #9884	; 0x269c
   14b8c:	movt	r0, #2
   14b90:	b	149d8 <verify_monster@@Base+0x420>
   14b94:	mov	r0, r5
   14b98:	mov	r1, #0
   14b9c:	bl	154b0 <verify_monster@@Base+0xef8>
   14ba0:	bl	15048 <verify_monster@@Base+0xa90>
   14ba4:	mov	r6, r0
   14ba8:	movw	r1, #24608	; 0x6020
   14bac:	movt	r1, #2
   14bb0:	bl	12e8c <strcmp@plt>
   14bb4:	cmp	r0, #0
   14bb8:	beq	14bc8 <verify_monster@@Base+0x610>
   14bbc:	movw	r0, #9918	; 0x26be
   14bc0:	movt	r0, #2
   14bc4:	b	149d8 <verify_monster@@Base+0x420>
   14bc8:	mov	r0, r5
   14bcc:	mov	r1, #3
   14bd0:	bl	154b0 <verify_monster@@Base+0xef8>
   14bd4:	bl	15048 <verify_monster@@Base+0xa90>
   14bd8:	mov	r6, r0
   14bdc:	movw	r1, #9842	; 0x2672
   14be0:	movt	r1, #2
   14be4:	bl	12e8c <strcmp@plt>
   14be8:	cmp	r0, #0
   14bec:	beq	14bfc <verify_monster@@Base+0x644>
   14bf0:	movw	r0, #9955	; 0x26e3
   14bf4:	movt	r0, #2
   14bf8:	b	149d8 <verify_monster@@Base+0x420>
   14bfc:	mov	r0, r5
   14c00:	mov	r1, #4
   14c04:	bl	154b0 <verify_monster@@Base+0xef8>
   14c08:	bl	15048 <verify_monster@@Base+0xa90>
   14c0c:	mov	r6, r0
   14c10:	movw	r1, #24648	; 0x6048
   14c14:	movt	r1, #2
   14c18:	bl	12e8c <strcmp@plt>
   14c1c:	cmp	r0, #0
   14c20:	beq	14c30 <verify_monster@@Base+0x678>
   14c24:	movw	r0, #9991	; 0x2707
   14c28:	movt	r0, #2
   14c2c:	b	149d8 <verify_monster@@Base+0x420>
   14c30:	mov	r0, r5
   14c34:	mov	r1, #6
   14c38:	bl	154b0 <verify_monster@@Base+0xef8>
   14c3c:	bl	15048 <verify_monster@@Base+0xa90>
   14c40:	mov	r6, r0
   14c44:	movw	r1, #24608	; 0x6020
   14c48:	movt	r1, #2
   14c4c:	bl	12e8c <strcmp@plt>
   14c50:	cmp	r0, #0
   14c54:	beq	14c64 <verify_monster@@Base+0x6ac>
   14c58:	movw	r0, #10025	; 0x2729
   14c5c:	movt	r0, #2
   14c60:	b	149d8 <verify_monster@@Base+0x420>
   14c64:	mov	r0, r5
   14c68:	mov	r1, #7
   14c6c:	bl	154b0 <verify_monster@@Base+0xef8>
   14c70:	bl	15048 <verify_monster@@Base+0xa90>
   14c74:	mov	r5, r0
   14c78:	movw	r1, #24648	; 0x6048
   14c7c:	movt	r1, #2
   14c80:	bl	12e8c <strcmp@plt>
   14c84:	cmp	r0, #0
   14c88:	beq	14ca0 <verify_monster@@Base+0x6e8>
   14c8c:	movw	r0, #10062	; 0x274e
   14c90:	movt	r0, #2
   14c94:	mov	r1, r5
   14c98:	bl	12e98 <printf@plt>
   14c9c:	b	1465c <verify_monster@@Base+0xa4>
   14ca0:	mov	r0, r4
   14ca4:	bl	15500 <verify_monster@@Base+0xf48>
   14ca8:	mov	r5, r0
   14cac:	bl	1557c <verify_monster@@Base+0xfc4>
   14cb0:	cmp	r0, #3
   14cb4:	bne	14ce4 <verify_monster@@Base+0x72c>
   14cb8:	mov	r0, r5
   14cbc:	mov	r1, #0
   14cc0:	bl	15590 <verify_monster@@Base+0xfd8>
   14cc4:	movw	r1, #10099	; 0x2773
   14cc8:	movt	r1, #2
   14ccc:	bl	12e8c <strcmp@plt>
   14cd0:	cmp	r0, #0
   14cd4:	beq	14cf0 <verify_monster@@Base+0x738>
   14cd8:	movw	r0, #22783	; 0x58ff
   14cdc:	movt	r0, #2
   14ce0:	b	14658 <verify_monster@@Base+0xa0>
   14ce4:	movw	r0, #22806	; 0x5916
   14ce8:	movt	r0, #2
   14cec:	b	14658 <verify_monster@@Base+0xa0>
   14cf0:	mov	r0, r5
   14cf4:	mov	r1, #1
   14cf8:	bl	15590 <verify_monster@@Base+0xfd8>
   14cfc:	mov	r6, r0
   14d00:	bl	150c8 <verify_monster@@Base+0xb10>
   14d04:	cmp	r0, #2
   14d08:	bne	14d34 <verify_monster@@Base+0x77c>
   14d0c:	movw	r1, #27488	; 0x6b60
   14d10:	movt	r1, #2
   14d14:	mov	r0, r6
   14d18:	mov	r2, #2
   14d1c:	bl	12f10 <bcmp@plt>
   14d20:	cmp	r0, #0
   14d24:	beq	14d44 <verify_monster@@Base+0x78c>
   14d28:	movw	r0, #22751	; 0x58df
   14d2c:	movt	r0, #2
   14d30:	b	14658 <verify_monster@@Base+0xa0>
   14d34:	movw	r0, #10105	; 0x2779
   14d38:	movt	r0, #2
   14d3c:	bl	12e98 <printf@plt>
   14d40:	b	1465c <verify_monster@@Base+0xa4>
   14d44:	mov	r0, r5
   14d48:	mov	r1, #2
   14d4c:	bl	15590 <verify_monster@@Base+0xfd8>
   14d50:	movw	r1, #10131	; 0x2793
   14d54:	movt	r1, #2
   14d58:	bl	12e8c <strcmp@plt>
   14d5c:	cmp	r0, #0
   14d60:	beq	14d70 <verify_monster@@Base+0x7b8>
   14d64:	movw	r0, #22728	; 0x58c8
   14d68:	movt	r0, #2
   14d6c:	b	14658 <verify_monster@@Base+0xa0>
   14d70:	mov	r0, r4
   14d74:	bl	155e4 <verify_monster@@Base+0x102c>
   14d78:	cmp	r0, #0
   14d7c:	beq	14e04 <verify_monster@@Base+0x84c>
   14d80:	mov	r0, r4
   14d84:	bl	1564c <verify_monster@@Base+0x1094>
   14d88:	mov	r5, r0
   14d8c:	bl	156c8 <verify_monster@@Base+0x1110>
   14d90:	cmp	r0, #4
   14d94:	bne	14e10 <verify_monster@@Base+0x858>
   14d98:	mov	r6, #0
   14d9c:	movw	r7, #27580	; 0x6bbc
   14da0:	movt	r7, #2
   14da4:	mov	r0, r5
   14da8:	mov	r1, r6
   14dac:	bl	156cc <verify_monster@@Base+0x1114>
   14db0:	ldr	r1, [r7, r6, lsl #2]
   14db4:	cmp	r1, r0
   14db8:	bne	14e1c <verify_monster@@Base+0x864>
   14dbc:	add	r6, r6, #1
   14dc0:	cmp	r6, #4
   14dc4:	bne	14da4 <verify_monster@@Base+0x7ec>
   14dc8:	mov	r0, r4
   14dcc:	bl	15714 <verify_monster@@Base+0x115c>
   14dd0:	cmp	r0, #1
   14dd4:	bne	14e28 <verify_monster@@Base+0x870>
   14dd8:	mov	r0, r4
   14ddc:	bl	15784 <verify_monster@@Base+0x11cc>
   14de0:	bl	15048 <verify_monster@@Base+0xa90>
   14de4:	movw	r1, #9842	; 0x2672
   14de8:	movt	r1, #2
   14dec:	bl	12e8c <strcmp@plt>
   14df0:	cmp	r0, #0
   14df4:	beq	14e34 <verify_monster@@Base+0x87c>
   14df8:	movw	r0, #22624	; 0x5860
   14dfc:	movt	r0, #2
   14e00:	b	14658 <verify_monster@@Base+0xa0>
   14e04:	movw	r0, #22257	; 0x56f1
   14e08:	movt	r0, #2
   14e0c:	b	14658 <verify_monster@@Base+0xa0>
   14e10:	movw	r0, #22697	; 0x58a9
   14e14:	movt	r0, #2
   14e18:	b	14658 <verify_monster@@Base+0xa0>
   14e1c:	movw	r0, #10138	; 0x279a
   14e20:	movt	r0, #2
   14e24:	b	149d8 <verify_monster@@Base+0x420>
   14e28:	movw	r0, #22656	; 0x5880
   14e2c:	movt	r0, #2
   14e30:	b	14658 <verify_monster@@Base+0xa0>
   14e34:	mov	r0, r4
   14e38:	bl	157fc <verify_monster@@Base+0x1244>
   14e3c:	mov	r5, r0
   14e40:	bl	15048 <verify_monster@@Base+0xa90>
   14e44:	movw	r1, #22614	; 0x5856
   14e48:	movt	r1, #2
   14e4c:	bl	12e8c <strcmp@plt>
   14e50:	cmp	r0, #0
   14e54:	beq	14e84 <verify_monster@@Base+0x8cc>
   14e58:	movw	r0, #22595	; 0x5843
   14e5c:	movt	r0, #2
   14e60:	b	14658 <verify_monster@@Base+0xa0>
   14e64:	movw	r0, #9714	; 0x25f2
   14e68:	movt	r0, #2
   14e6c:	movw	r1, #9718	; 0x25f6
   14e70:	movt	r1, #2
   14e74:	movw	r3, #9799	; 0x2647
   14e78:	movt	r3, #2
   14e7c:	movw	r2, #662	; 0x296
   14e80:	bl	12f88 <__assert_fail@plt>
   14e84:	mov	r0, r5
   14e88:	bl	15714 <verify_monster@@Base+0x115c>
   14e8c:	cmp	r0, #0
   14e90:	beq	14ea0 <verify_monster@@Base+0x8e8>
   14e94:	movw	r0, #22559	; 0x581f
   14e98:	movt	r0, #2
   14e9c:	b	14658 <verify_monster@@Base+0xa0>
   14ea0:	add	r0, sp, #8
   14ea4:	mov	r1, r4
   14ea8:	bl	15874 <verify_monster@@Base+0x12bc>
   14eac:	ldrb	r0, [sp, #8]
   14eb0:	cmp	r0, #1
   14eb4:	bne	14fac <verify_monster@@Base+0x9f4>
   14eb8:	ldr	r6, [sp, #12]
   14ebc:	mov	r0, r4
   14ec0:	bl	15784 <verify_monster@@Base+0x11cc>
   14ec4:	cmp	r6, r0
   14ec8:	beq	14ed8 <verify_monster@@Base+0x920>
   14ecc:	movw	r0, #22480	; 0x57d0
   14ed0:	movt	r0, #2
   14ed4:	b	14658 <verify_monster@@Base+0xa0>
   14ed8:	mov	r0, r5
   14edc:	bl	15420 <verify_monster@@Base+0xe68>
   14ee0:	mov	r5, r0
   14ee4:	bl	1549c <verify_monster@@Base+0xee4>
   14ee8:	sub	r1, r0, #1
   14eec:	mov	r0, r5
   14ef0:	bl	154b0 <verify_monster@@Base+0xef8>
   14ef4:	mov	r5, r0
   14ef8:	bl	15714 <verify_monster@@Base+0x115c>
   14efc:	cmp	r0, #1
   14f00:	bne	14fb8 <verify_monster@@Base+0xa00>
   14f04:	mov	r0, r5
   14f08:	bl	15784 <verify_monster@@Base+0x11cc>
   14f0c:	bl	15048 <verify_monster@@Base+0xa90>
   14f10:	movw	r1, #9842	; 0x2672
   14f14:	movt	r1, #2
   14f18:	bl	12e8c <strcmp@plt>
   14f1c:	cmp	r0, #0
   14f20:	beq	14f30 <verify_monster@@Base+0x978>
   14f24:	movw	r0, #22357	; 0x5755
   14f28:	movt	r0, #2
   14f2c:	b	14658 <verify_monster@@Base+0xa0>
   14f30:	mov	r0, r4
   14f34:	bl	158b4 <verify_monster@@Base+0x12fc>
   14f38:	cmp	r0, #0
   14f3c:	beq	14f4c <verify_monster@@Base+0x994>
   14f40:	movw	r0, #22337	; 0x5741
   14f44:	movt	r0, #2
   14f48:	b	14658 <verify_monster@@Base+0xa0>
   14f4c:	mov	r0, r4
   14f50:	bl	15924 <verify_monster@@Base+0x136c>
   14f54:	cmp	r0, #0
   14f58:	beq	14fa0 <verify_monster@@Base+0x9e8>
   14f5c:	mov	r0, r4
   14f60:	bl	1598c <verify_monster@@Base+0x13d4>
   14f64:	mov	r4, r0
   14f68:	bl	15a04 <verify_monster@@Base+0x144c>
   14f6c:	cmp	r0, #0
   14f70:	bne	14f94 <verify_monster@@Base+0x9dc>
   14f74:	mov	r0, r4
   14f78:	bl	15a6c <verify_monster@@Base+0x14b4>
   14f7c:	cmp	r0, #0
   14f80:	bne	14f94 <verify_monster@@Base+0x9dc>
   14f84:	mov	r0, r4
   14f88:	bl	15ad4 <verify_monster@@Base+0x151c>
   14f8c:	cmp	r0, #0
   14f90:	beq	14fc4 <verify_monster@@Base+0xa0c>
   14f94:	movw	r0, #22313	; 0x5729
   14f98:	movt	r0, #2
   14f9c:	b	14658 <verify_monster@@Base+0xa0>
   14fa0:	movw	r0, #22283	; 0x570b
   14fa4:	movt	r0, #2
   14fa8:	b	14658 <verify_monster@@Base+0xa0>
   14fac:	movw	r0, #22512	; 0x57f0
   14fb0:	movt	r0, #2
   14fb4:	b	14658 <verify_monster@@Base+0xa0>
   14fb8:	movw	r0, #22414	; 0x578e
   14fbc:	movt	r0, #2
   14fc0:	b	14658 <verify_monster@@Base+0xa0>
   14fc4:	mov	r0, #0
   14fc8:	b	14660 <verify_monster@@Base+0xa8>
   14fcc:	cmp	r0, #0
   14fd0:	beq	14fdc <verify_monster@@Base+0xa24>
   14fd4:	add	r0, r0, #8
   14fd8:	b	1bd18 <main@@Base+0x998>
   14fdc:	vldr	s0, [pc]	; 14fe4 <verify_monster@@Base+0xa2c>
   14fe0:	bx	lr
   14fe4:	andeq	r0, r0, r0
   14fe8:	vmov.i32	q8, #0	; 0x00000000
   14fec:	vst1.64	{d16-d17}, [r0 :128]!
   14ff0:	vst1.64	{d16-d17}, [r0 :128]
   14ff4:	bx	lr
   14ff8:	push	{r4, r5, fp, lr}
   14ffc:	add	fp, sp, #8
   15000:	mov	r4, r1
   15004:	mov	r5, r0
   15008:	bl	1c778 <main@@Base+0x13f8>
   1500c:	add	r0, r5, #4
   15010:	add	r1, r4, #4
   15014:	bl	1c778 <main@@Base+0x13f8>
   15018:	add	r0, r5, #8
   1501c:	add	r1, r4, #8
   15020:	bl	1c778 <main@@Base+0x13f8>
   15024:	add	r0, r5, #16
   15028:	add	r1, r4, #16
   1502c:	bl	1c794 <main@@Base+0x1414>
   15030:	ldrb	r0, [r4, #24]
   15034:	strb	r0, [r5, #24]
   15038:	add	r0, r5, #26
   1503c:	add	r1, r4, #26
   15040:	pop	{r4, r5, fp, lr}
   15044:	b	1c7b0 <main@@Base+0x1430>
   15048:	push	{r4, r5, fp, lr}
   1504c:	add	fp, sp, #8
   15050:	cmp	r0, #0
   15054:	beq	150a8 <verify_monster@@Base+0xaf0>
   15058:	mov	r4, r0
   1505c:	bl	1b61c <main@@Base+0x29c>
   15060:	sub	r5, r4, r0
   15064:	mov	r0, r5
   15068:	bl	1b624 <main@@Base+0x2a4>
   1506c:	cmp	r0, #12
   15070:	bcc	1509c <verify_monster@@Base+0xae4>
   15074:	add	r0, r5, #10
   15078:	bl	1b624 <main@@Base+0x2a4>
   1507c:	cmp	r0, #0
   15080:	beq	1509c <verify_monster@@Base+0xae4>
   15084:	add	r4, r4, r0
   15088:	mov	r0, r4
   1508c:	bl	1b610 <main@@Base+0x290>
   15090:	add	r0, r4, r0
   15094:	add	r0, r0, #4
   15098:	pop	{r4, r5, fp, pc}
   1509c:	movw	r0, #14852	; 0x3a04
   150a0:	movt	r0, #2
   150a4:	b	150b0 <verify_monster@@Base+0xaf8>
   150a8:	movw	r0, #12550	; 0x3106
   150ac:	movt	r0, #2
   150b0:	movw	r1, #12588	; 0x312c
   150b4:	movt	r1, #2
   150b8:	movw	r3, #14771	; 0x39b3
   150bc:	movt	r3, #2
   150c0:	movw	r2, #699	; 0x2bb
   150c4:	bl	12f88 <__assert_fail@plt>
   150c8:	cmp	r0, #0
   150cc:	moveq	r0, #0
   150d0:	bxeq	lr
   150d4:	sub	r0, r0, #4
   150d8:	b	1b610 <main@@Base+0x290>
   150dc:	push	{r4, r5, fp, lr}
   150e0:	add	fp, sp, #8
   150e4:	cmp	r0, #0
   150e8:	beq	1512c <verify_monster@@Base+0xb74>
   150ec:	mov	r4, r0
   150f0:	bl	1b61c <main@@Base+0x29c>
   150f4:	sub	r5, r4, r0
   150f8:	mov	r0, r5
   150fc:	bl	1b624 <main@@Base+0x2a4>
   15100:	cmp	r0, #18
   15104:	bcc	15124 <verify_monster@@Base+0xb6c>
   15108:	add	r0, r5, #16
   1510c:	bl	1b624 <main@@Base+0x2a4>
   15110:	cmp	r0, #0
   15114:	beq	15124 <verify_monster@@Base+0xb6c>
   15118:	add	r0, r4, r0
   1511c:	pop	{r4, r5, fp, lr}
   15120:	b	1c7ec <main@@Base+0x146c>
   15124:	mov	r0, #8
   15128:	pop	{r4, r5, fp, pc}
   1512c:	movw	r0, #12550	; 0x3106
   15130:	movt	r0, #2
   15134:	movw	r1, #12588	; 0x312c
   15138:	movt	r1, #2
   1513c:	movw	r3, #14885	; 0x3a25
   15140:	movt	r3, #2
   15144:	movw	r2, #705	; 0x2c1
   15148:	bl	12f88 <__assert_fail@plt>
   1514c:	cmp	r0, #8
   15150:	bhi	15170 <verify_monster@@Base+0xbb8>
   15154:	mov	r1, r0
   15158:	mov	r0, #1
   1515c:	mov	r2, #1
   15160:	movw	r3, #262	; 0x106
   15164:	tst	r3, r2, lsl r1
   15168:	moveq	r0, #0
   1516c:	bx	lr
   15170:	mov	r0, #0
   15174:	bx	lr
   15178:	mov	r1, #0
   1517c:	cmp	r0, #5
   15180:	movwcc	r1, #1
   15184:	mov	r0, r1
   15188:	bx	lr
   1518c:	push	{r4, r5, r6, sl, fp, lr}
   15190:	add	fp, sp, #16
   15194:	cmp	r0, #0
   15198:	beq	151e8 <verify_monster@@Base+0xc30>
   1519c:	mov	r4, r0
   151a0:	bl	1b61c <main@@Base+0x29c>
   151a4:	sub	r6, r4, r0
   151a8:	mov	r0, r6
   151ac:	bl	1b624 <main@@Base+0x2a4>
   151b0:	mov	r5, #0
   151b4:	cmp	r0, #16
   151b8:	bcc	151e0 <verify_monster@@Base+0xc28>
   151bc:	add	r0, r6, #14
   151c0:	bl	1b624 <main@@Base+0x2a4>
   151c4:	cmp	r0, #0
   151c8:	beq	151e0 <verify_monster@@Base+0xc28>
   151cc:	add	r4, r4, r0
   151d0:	mov	r0, r4
   151d4:	bl	1b610 <main@@Base+0x290>
   151d8:	add	r0, r4, r0
   151dc:	add	r5, r0, #4
   151e0:	mov	r0, r5
   151e4:	pop	{r4, r5, r6, sl, fp, pc}
   151e8:	movw	r0, #12550	; 0x3106
   151ec:	movt	r0, #2
   151f0:	movw	r1, #12588	; 0x312c
   151f4:	movt	r1, #2
   151f8:	movw	r3, #14974	; 0x3a7e
   151fc:	movt	r3, #2
   15200:	movw	r2, #706	; 0x2c2
   15204:	bl	12f88 <__assert_fail@plt>
   15208:	b	1c7f8 <main@@Base+0x1478>
   1520c:	push	{r4, r5, fp, lr}
   15210:	add	fp, sp, #8
   15214:	mov	r4, r1
   15218:	mov	r5, r0
   1521c:	bl	1c7f8 <main@@Base+0x1478>
   15220:	cmp	r0, r4
   15224:	bls	15234 <verify_monster@@Base+0xc7c>
   15228:	add	r0, r5, r4
   1522c:	pop	{r4, r5, fp, lr}
   15230:	b	1bce8 <main@@Base+0x968>
   15234:	movw	r0, #15063	; 0x3ad7
   15238:	movt	r0, #2
   1523c:	movw	r1, #15118	; 0x3b0e
   15240:	movt	r1, #2
   15244:	movw	r3, #15222	; 0x3b76
   15248:	movt	r3, #2
   1524c:	movw	r2, #395	; 0x18b
   15250:	bl	12f88 <__assert_fail@plt>
   15254:	push	{r4, r5, fp, lr}
   15258:	add	fp, sp, #8
   1525c:	cmp	r0, #0
   15260:	beq	152a4 <verify_monster@@Base+0xcec>
   15264:	mov	r4, r0
   15268:	bl	1b61c <main@@Base+0x29c>
   1526c:	sub	r5, r4, r0
   15270:	mov	r0, r5
   15274:	bl	1b624 <main@@Base+0x2a4>
   15278:	cmp	r0, #8
   1527c:	bcc	1529c <verify_monster@@Base+0xce4>
   15280:	add	r0, r5, #6
   15284:	bl	1b624 <main@@Base+0x2a4>
   15288:	cmp	r0, #0
   1528c:	beq	1529c <verify_monster@@Base+0xce4>
   15290:	add	r0, r4, r0
   15294:	pop	{r4, r5, fp, lr}
   15298:	b	1b62c <main@@Base+0x2ac>
   1529c:	mov	r0, #150	; 0x96
   152a0:	pop	{r4, r5, fp, pc}
   152a4:	movw	r0, #12550	; 0x3106
   152a8:	movt	r0, #2
   152ac:	movw	r1, #12588	; 0x312c
   152b0:	movt	r1, #2
   152b4:	movw	r3, #15288	; 0x3bb8
   152b8:	movt	r3, #2
   152bc:	movw	r2, #698	; 0x2ba
   152c0:	bl	12f88 <__assert_fail@plt>
   152c4:	push	{r4, sl, fp, lr}
   152c8:	add	fp, sp, #8
   152cc:	cmp	r0, #0
   152d0:	beq	1530c <verify_monster@@Base+0xd54>
   152d4:	mov	r4, r0
   152d8:	bl	1b61c <main@@Base+0x29c>
   152dc:	sub	r4, r4, r0
   152e0:	mov	r0, r4
   152e4:	bl	1b624 <main@@Base+0x2a4>
   152e8:	mov	r1, r0
   152ec:	mov	r0, #0
   152f0:	cmp	r1, #8
   152f4:	popcc	{r4, sl, fp, pc}
   152f8:	add	r0, r4, #6
   152fc:	bl	1b624 <main@@Base+0x2a4>
   15300:	cmp	r0, #0
   15304:	movwne	r0, #1
   15308:	pop	{r4, sl, fp, pc}
   1530c:	movw	r0, #12550	; 0x3106
   15310:	movt	r0, #2
   15314:	movw	r1, #12588	; 0x312c
   15318:	movt	r1, #2
   1531c:	movw	r3, #15356	; 0x3bfc
   15320:	movt	r3, #2
   15324:	movw	r2, #698	; 0x2ba
   15328:	bl	12f88 <__assert_fail@plt>
   1532c:	push	{r4, r5, r6, sl, fp, lr}
   15330:	add	fp, sp, #16
   15334:	cmp	r0, #0
   15338:	beq	15388 <verify_monster@@Base+0xdd0>
   1533c:	mov	r4, r0
   15340:	bl	1b61c <main@@Base+0x29c>
   15344:	sub	r6, r4, r0
   15348:	mov	r0, r6
   1534c:	bl	1b624 <main@@Base+0x2a4>
   15350:	mov	r5, #0
   15354:	cmp	r0, #24
   15358:	bcc	15380 <verify_monster@@Base+0xdc8>
   1535c:	add	r0, r6, #22
   15360:	bl	1b624 <main@@Base+0x2a4>
   15364:	cmp	r0, #0
   15368:	beq	15380 <verify_monster@@Base+0xdc8>
   1536c:	add	r4, r4, r0
   15370:	mov	r0, r4
   15374:	bl	1b610 <main@@Base+0x290>
   15378:	add	r0, r4, r0
   1537c:	add	r5, r0, #4
   15380:	mov	r0, r5
   15384:	pop	{r4, r5, r6, sl, fp, pc}
   15388:	movw	r0, #12550	; 0x3106
   1538c:	movt	r0, #2
   15390:	movw	r1, #12588	; 0x312c
   15394:	movt	r1, #2
   15398:	movw	r3, #15431	; 0x3c47
   1539c:	movt	r3, #2
   153a0:	movw	r2, #718	; 0x2ce
   153a4:	bl	12f88 <__assert_fail@plt>
   153a8:	cmp	r0, #0
   153ac:	moveq	r0, #0
   153b0:	bxeq	lr
   153b4:	sub	r0, r0, #4
   153b8:	b	1b610 <main@@Base+0x290>
   153bc:	push	{r4, r5, fp, lr}
   153c0:	add	fp, sp, #8
   153c4:	mov	r4, r1
   153c8:	mov	r5, r0
   153cc:	bl	1c7f8 <main@@Base+0x1478>
   153d0:	cmp	r0, r4
   153d4:	addhi	r0, r5, r4, lsl #2
   153d8:	pophi	{r4, r5, fp, pc}
   153dc:	movw	r0, #15063	; 0x3ad7
   153e0:	movt	r0, #2
   153e4:	movw	r1, #12588	; 0x312c
   153e8:	movt	r1, #2
   153ec:	movw	r3, #15518	; 0x3c9e
   153f0:	movt	r3, #2
   153f4:	mov	r2, #380	; 0x17c
   153f8:	bl	12f88 <__assert_fail@plt>
   153fc:	cmp	r0, #0
   15400:	moveq	r0, #0
   15404:	bxeq	lr
   15408:	b	1b62c <main@@Base+0x2ac>
   1540c:	cmp	r0, #0
   15410:	moveq	r0, #0
   15414:	bxeq	lr
   15418:	add	r0, r0, #2
   1541c:	b	1bcc4 <main@@Base+0x944>
   15420:	push	{r4, r5, r6, sl, fp, lr}
   15424:	add	fp, sp, #16
   15428:	cmp	r0, #0
   1542c:	beq	1547c <verify_monster@@Base+0xec4>
   15430:	mov	r4, r0
   15434:	bl	1b61c <main@@Base+0x29c>
   15438:	sub	r6, r4, r0
   1543c:	mov	r0, r6
   15440:	bl	1b624 <main@@Base+0x2a4>
   15444:	mov	r5, #0
   15448:	cmp	r0, #28
   1544c:	bcc	15474 <verify_monster@@Base+0xebc>
   15450:	add	r0, r6, #26
   15454:	bl	1b624 <main@@Base+0x2a4>
   15458:	cmp	r0, #0
   1545c:	beq	15474 <verify_monster@@Base+0xebc>
   15460:	add	r4, r4, r0
   15464:	mov	r0, r4
   15468:	bl	1b610 <main@@Base+0x290>
   1546c:	add	r0, r4, r0
   15470:	add	r5, r0, #4
   15474:	mov	r0, r5
   15478:	pop	{r4, r5, r6, sl, fp, pc}
   1547c:	movw	r0, #12550	; 0x3106
   15480:	movt	r0, #2
   15484:	movw	r1, #12588	; 0x312c
   15488:	movt	r1, #2
   1548c:	movw	r3, #15609	; 0x3cf9
   15490:	movt	r3, #2
   15494:	movw	r2, #711	; 0x2c7
   15498:	bl	12f88 <__assert_fail@plt>
   1549c:	cmp	r0, #0
   154a0:	moveq	r0, #0
   154a4:	bxeq	lr
   154a8:	sub	r0, r0, #4
   154ac:	b	1b610 <main@@Base+0x290>
   154b0:	push	{r4, r5, fp, lr}
   154b4:	add	fp, sp, #8
   154b8:	mov	r4, r1
   154bc:	mov	r5, r0
   154c0:	bl	1c7f8 <main@@Base+0x1478>
   154c4:	cmp	r0, r4
   154c8:	bls	154e0 <verify_monster@@Base+0xf28>
   154cc:	add	r4, r5, r4, lsl #2
   154d0:	mov	r0, r4
   154d4:	bl	1b610 <main@@Base+0x290>
   154d8:	add	r0, r4, r0
   154dc:	pop	{r4, r5, fp, pc}
   154e0:	movw	r0, #15063	; 0x3ad7
   154e4:	movt	r0, #2
   154e8:	movw	r1, #12588	; 0x312c
   154ec:	movt	r1, #2
   154f0:	movw	r3, #15711	; 0x3d5f
   154f4:	movt	r3, #2
   154f8:	movw	r2, #693	; 0x2b5
   154fc:	bl	12f88 <__assert_fail@plt>
   15500:	push	{r4, r5, r6, sl, fp, lr}
   15504:	add	fp, sp, #16
   15508:	cmp	r0, #0
   1550c:	beq	1555c <verify_monster@@Base+0xfa4>
   15510:	mov	r4, r0
   15514:	bl	1b61c <main@@Base+0x29c>
   15518:	sub	r6, r4, r0
   1551c:	mov	r0, r6
   15520:	bl	1b624 <main@@Base+0x2a4>
   15524:	mov	r5, #0
   15528:	cmp	r0, #26
   1552c:	bcc	15554 <verify_monster@@Base+0xf9c>
   15530:	add	r0, r6, #24
   15534:	bl	1b624 <main@@Base+0x2a4>
   15538:	cmp	r0, #0
   1553c:	beq	15554 <verify_monster@@Base+0xf9c>
   15540:	add	r4, r4, r0
   15544:	mov	r0, r4
   15548:	bl	1b610 <main@@Base+0x290>
   1554c:	add	r0, r4, r0
   15550:	add	r5, r0, #4
   15554:	mov	r0, r5
   15558:	pop	{r4, r5, r6, sl, fp, pc}
   1555c:	movw	r0, #12550	; 0x3106
   15560:	movt	r0, #2
   15564:	movw	r1, #12588	; 0x312c
   15568:	movt	r1, #2
   1556c:	movw	r3, #15810	; 0x3dc2
   15570:	movt	r3, #2
   15574:	mov	r2, #712	; 0x2c8
   15578:	bl	12f88 <__assert_fail@plt>
   1557c:	cmp	r0, #0
   15580:	moveq	r0, #0
   15584:	bxeq	lr
   15588:	sub	r0, r0, #4
   1558c:	b	1b610 <main@@Base+0x290>
   15590:	push	{r4, r5, fp, lr}
   15594:	add	fp, sp, #8
   15598:	mov	r4, r1
   1559c:	mov	r5, r0
   155a0:	bl	1c7f8 <main@@Base+0x1478>
   155a4:	cmp	r0, r4
   155a8:	bls	155c4 <verify_monster@@Base+0x100c>
   155ac:	add	r4, r5, r4, lsl #2
   155b0:	mov	r0, r4
   155b4:	bl	1b610 <main@@Base+0x290>
   155b8:	add	r0, r4, r0
   155bc:	add	r0, r0, #4
   155c0:	pop	{r4, r5, fp, pc}
   155c4:	movw	r0, #15063	; 0x3ad7
   155c8:	movt	r0, #2
   155cc:	movw	r1, #15118	; 0x3b0e
   155d0:	movt	r1, #2
   155d4:	movw	r3, #15908	; 0x3e24
   155d8:	movt	r3, #2
   155dc:	mov	r2, #108	; 0x6c
   155e0:	bl	12f88 <__assert_fail@plt>
   155e4:	push	{r4, sl, fp, lr}
   155e8:	add	fp, sp, #8
   155ec:	cmp	r0, #0
   155f0:	beq	1562c <verify_monster@@Base+0x1074>
   155f4:	mov	r4, r0
   155f8:	bl	1b61c <main@@Base+0x29c>
   155fc:	sub	r4, r4, r0
   15600:	mov	r0, r4
   15604:	bl	1b624 <main@@Base+0x2a4>
   15608:	mov	r1, r0
   1560c:	mov	r0, #0
   15610:	cmp	r1, #54	; 0x36
   15614:	popcc	{r4, sl, fp, pc}
   15618:	add	r0, r4, #52	; 0x34
   1561c:	bl	1b624 <main@@Base+0x2a4>
   15620:	cmp	r0, #0
   15624:	movwne	r0, #1
   15628:	pop	{r4, sl, fp, pc}
   1562c:	movw	r0, #12550	; 0x3106
   15630:	movt	r0, #2
   15634:	movw	r1, #12588	; 0x312c
   15638:	movt	r1, #2
   1563c:	movw	r3, #15989	; 0x3e75
   15640:	movt	r3, #2
   15644:	movw	r2, #714	; 0x2ca
   15648:	bl	12f88 <__assert_fail@plt>
   1564c:	push	{r4, r5, r6, sl, fp, lr}
   15650:	add	fp, sp, #16
   15654:	cmp	r0, #0
   15658:	beq	156a8 <verify_monster@@Base+0x10f0>
   1565c:	mov	r4, r0
   15660:	bl	1b61c <main@@Base+0x29c>
   15664:	sub	r6, r4, r0
   15668:	mov	r0, r6
   1566c:	bl	1b624 <main@@Base+0x2a4>
   15670:	mov	r5, #0
   15674:	cmp	r0, #54	; 0x36
   15678:	bcc	156a0 <verify_monster@@Base+0x10e8>
   1567c:	add	r0, r6, #52	; 0x34
   15680:	bl	1b624 <main@@Base+0x2a4>
   15684:	cmp	r0, #0
   15688:	beq	156a0 <verify_monster@@Base+0x10e8>
   1568c:	add	r4, r4, r0
   15690:	mov	r0, r4
   15694:	bl	1b610 <main@@Base+0x290>
   15698:	add	r0, r4, r0
   1569c:	add	r5, r0, #4
   156a0:	mov	r0, r5
   156a4:	pop	{r4, r5, r6, sl, fp, pc}
   156a8:	movw	r0, #12550	; 0x3106
   156ac:	movt	r0, #2
   156b0:	movw	r1, #12588	; 0x312c
   156b4:	movt	r1, #2
   156b8:	movw	r3, #16076	; 0x3ecc
   156bc:	movt	r3, #2
   156c0:	movw	r2, #714	; 0x2ca
   156c4:	bl	12f88 <__assert_fail@plt>
   156c8:	b	1c7f8 <main@@Base+0x1478>
   156cc:	push	{r4, r5, fp, lr}
   156d0:	add	fp, sp, #8
   156d4:	mov	r4, r1
   156d8:	mov	r5, r0
   156dc:	bl	1c7f8 <main@@Base+0x1478>
   156e0:	cmp	r0, r4
   156e4:	bls	156f4 <verify_monster@@Base+0x113c>
   156e8:	add	r0, r5, r4
   156ec:	pop	{r4, r5, fp, lr}
   156f0:	b	1c80c <main@@Base+0x148c>
   156f4:	movw	r0, #15063	; 0x3ad7
   156f8:	movt	r0, #2
   156fc:	movw	r1, #15118	; 0x3b0e
   15700:	movt	r1, #2
   15704:	movw	r3, #16172	; 0x3f2c
   15708:	movt	r3, #2
   1570c:	movw	r2, #394	; 0x18a
   15710:	bl	12f88 <__assert_fail@plt>
   15714:	push	{r4, r5, fp, lr}
   15718:	add	fp, sp, #8
   1571c:	cmp	r0, #0
   15720:	beq	15764 <verify_monster@@Base+0x11ac>
   15724:	mov	r4, r0
   15728:	bl	1b61c <main@@Base+0x29c>
   1572c:	sub	r5, r4, r0
   15730:	mov	r0, r5
   15734:	bl	1b624 <main@@Base+0x2a4>
   15738:	cmp	r0, #20
   1573c:	bcc	1575c <verify_monster@@Base+0x11a4>
   15740:	add	r0, r5, #18
   15744:	bl	1b624 <main@@Base+0x2a4>
   15748:	cmp	r0, #0
   1574c:	beq	1575c <verify_monster@@Base+0x11a4>
   15750:	add	r0, r4, r0
   15754:	pop	{r4, r5, fp, lr}
   15758:	b	1c818 <main@@Base+0x1498>
   1575c:	mov	r0, #0
   15760:	pop	{r4, r5, fp, pc}
   15764:	movw	r0, #12550	; 0x3106
   15768:	movt	r0, #2
   1576c:	movw	r1, #12588	; 0x312c
   15770:	movt	r1, #2
   15774:	movw	r3, #16247	; 0x3f77
   15778:	movt	r3, #2
   1577c:	movw	r2, #717	; 0x2cd
   15780:	bl	12f88 <__assert_fail@plt>
   15784:	push	{r4, r5, r6, sl, fp, lr}
   15788:	add	fp, sp, #16
   1578c:	cmp	r0, #0
   15790:	beq	157dc <verify_monster@@Base+0x1224>
   15794:	mov	r4, r0
   15798:	bl	1b61c <main@@Base+0x29c>
   1579c:	sub	r6, r4, r0
   157a0:	mov	r0, r6
   157a4:	bl	1b624 <main@@Base+0x2a4>
   157a8:	mov	r5, #0
   157ac:	cmp	r0, #22
   157b0:	bcc	157d4 <verify_monster@@Base+0x121c>
   157b4:	add	r0, r6, #20
   157b8:	bl	1b624 <main@@Base+0x2a4>
   157bc:	cmp	r0, #0
   157c0:	beq	157d4 <verify_monster@@Base+0x121c>
   157c4:	add	r4, r4, r0
   157c8:	mov	r0, r4
   157cc:	bl	1b610 <main@@Base+0x290>
   157d0:	add	r5, r4, r0
   157d4:	mov	r0, r5
   157d8:	pop	{r4, r5, r6, sl, fp, pc}
   157dc:	movw	r0, #12550	; 0x3106
   157e0:	movt	r0, #2
   157e4:	movw	r1, #12588	; 0x312c
   157e8:	movt	r1, #2
   157ec:	movw	r3, #16344	; 0x3fd8
   157f0:	movt	r3, #2
   157f4:	movw	r2, #717	; 0x2cd
   157f8:	bl	12f88 <__assert_fail@plt>
   157fc:	push	{r4, r5, r6, sl, fp, lr}
   15800:	add	fp, sp, #16
   15804:	cmp	r0, #0
   15808:	beq	15854 <verify_monster@@Base+0x129c>
   1580c:	mov	r4, r0
   15810:	bl	1b61c <main@@Base+0x29c>
   15814:	sub	r6, r4, r0
   15818:	mov	r0, r6
   1581c:	bl	1b624 <main@@Base+0x2a4>
   15820:	mov	r5, #0
   15824:	cmp	r0, #30
   15828:	bcc	1584c <verify_monster@@Base+0x1294>
   1582c:	add	r0, r6, #28
   15830:	bl	1b624 <main@@Base+0x2a4>
   15834:	cmp	r0, #0
   15838:	beq	1584c <verify_monster@@Base+0x1294>
   1583c:	add	r4, r4, r0
   15840:	mov	r0, r4
   15844:	bl	1b610 <main@@Base+0x290>
   15848:	add	r5, r4, r0
   1584c:	mov	r0, r5
   15850:	pop	{r4, r5, r6, sl, fp, pc}
   15854:	movw	r0, #12550	; 0x3106
   15858:	movt	r0, #2
   1585c:	movw	r1, #12588	; 0x312c
   15860:	movt	r1, #2
   15864:	movw	r3, #16426	; 0x402a
   15868:	movt	r3, #2
   1586c:	mov	r2, #716	; 0x2cc
   15870:	bl	12f88 <__assert_fail@plt>
   15874:	push	{r4, r5, fp, lr}
   15878:	add	fp, sp, #8
   1587c:	mov	r5, r1
   15880:	mov	r4, r0
   15884:	mov	r0, #0
   15888:	str	r0, [r4]
   1588c:	str	r0, [r4, #4]
   15890:	mov	r0, r1
   15894:	bl	15714 <verify_monster@@Base+0x115c>
   15898:	strb	r0, [r4]
   1589c:	cmp	r0, #0
   158a0:	popeq	{r4, r5, fp, pc}
   158a4:	mov	r0, r5
   158a8:	bl	15784 <verify_monster@@Base+0x11cc>
   158ac:	str	r0, [r4, #4]
   158b0:	pop	{r4, r5, fp, pc}
   158b4:	push	{r4, r5, fp, lr}
   158b8:	add	fp, sp, #8
   158bc:	cmp	r0, #0
   158c0:	beq	15904 <verify_monster@@Base+0x134c>
   158c4:	mov	r4, r0
   158c8:	bl	1b61c <main@@Base+0x29c>
   158cc:	sub	r5, r4, r0
   158d0:	mov	r0, r5
   158d4:	bl	1b624 <main@@Base+0x2a4>
   158d8:	cmp	r0, #36	; 0x24
   158dc:	bcc	158fc <verify_monster@@Base+0x1344>
   158e0:	add	r0, r5, #34	; 0x22
   158e4:	bl	1b624 <main@@Base+0x2a4>
   158e8:	cmp	r0, #0
   158ec:	beq	158fc <verify_monster@@Base+0x1344>
   158f0:	add	r0, r4, r0
   158f4:	pop	{r4, r5, fp, lr}
   158f8:	b	1c80c <main@@Base+0x148c>
   158fc:	mov	r0, #1
   15900:	pop	{r4, r5, fp, pc}
   15904:	movw	r0, #12550	; 0x3106
   15908:	movt	r0, #2
   1590c:	movw	r1, #12588	; 0x312c
   15910:	movt	r1, #2
   15914:	movw	r3, #16518	; 0x4086
   15918:	movt	r3, #2
   1591c:	movw	r2, #723	; 0x2d3
   15920:	bl	12f88 <__assert_fail@plt>
   15924:	push	{r4, sl, fp, lr}
   15928:	add	fp, sp, #8
   1592c:	cmp	r0, #0
   15930:	beq	1596c <verify_monster@@Base+0x13b4>
   15934:	mov	r4, r0
   15938:	bl	1b61c <main@@Base+0x29c>
   1593c:	sub	r4, r4, r0
   15940:	mov	r0, r4
   15944:	bl	1b624 <main@@Base+0x2a4>
   15948:	mov	r1, r0
   1594c:	mov	r0, #0
   15950:	cmp	r1, #34	; 0x22
   15954:	popcc	{r4, sl, fp, pc}
   15958:	add	r0, r4, #32
   1595c:	bl	1b624 <main@@Base+0x2a4>
   15960:	cmp	r0, #0
   15964:	movwne	r0, #1
   15968:	pop	{r4, sl, fp, pc}
   1596c:	movw	r0, #12550	; 0x3106
   15970:	movt	r0, #2
   15974:	movw	r1, #12588	; 0x312c
   15978:	movt	r1, #2
   1597c:	movw	r3, #16601	; 0x40d9
   15980:	movt	r3, #2
   15984:	movw	r2, #722	; 0x2d2
   15988:	bl	12f88 <__assert_fail@plt>
   1598c:	push	{r4, r5, r6, sl, fp, lr}
   15990:	add	fp, sp, #16
   15994:	cmp	r0, #0
   15998:	beq	159e4 <verify_monster@@Base+0x142c>
   1599c:	mov	r4, r0
   159a0:	bl	1b61c <main@@Base+0x29c>
   159a4:	sub	r6, r4, r0
   159a8:	mov	r0, r6
   159ac:	bl	1b624 <main@@Base+0x2a4>
   159b0:	mov	r5, #0
   159b4:	cmp	r0, #34	; 0x22
   159b8:	bcc	159dc <verify_monster@@Base+0x1424>
   159bc:	add	r0, r6, #32
   159c0:	bl	1b624 <main@@Base+0x2a4>
   159c4:	cmp	r0, #0
   159c8:	beq	159dc <verify_monster@@Base+0x1424>
   159cc:	add	r4, r4, r0
   159d0:	mov	r0, r4
   159d4:	bl	1b610 <main@@Base+0x290>
   159d8:	add	r5, r4, r0
   159dc:	mov	r0, r5
   159e0:	pop	{r4, r5, r6, sl, fp, pc}
   159e4:	movw	r0, #12550	; 0x3106
   159e8:	movt	r0, #2
   159ec:	movw	r1, #12588	; 0x312c
   159f0:	movt	r1, #2
   159f4:	movw	r3, #16681	; 0x4129
   159f8:	movt	r3, #2
   159fc:	movw	r2, #722	; 0x2d2
   15a00:	bl	12f88 <__assert_fail@plt>
   15a04:	push	{r4, sl, fp, lr}
   15a08:	add	fp, sp, #8
   15a0c:	cmp	r0, #0
   15a10:	beq	15a4c <verify_monster@@Base+0x1494>
   15a14:	mov	r4, r0
   15a18:	bl	1b61c <main@@Base+0x29c>
   15a1c:	sub	r4, r4, r0
   15a20:	mov	r0, r4
   15a24:	bl	1b624 <main@@Base+0x2a4>
   15a28:	mov	r1, r0
   15a2c:	mov	r0, #0
   15a30:	cmp	r1, #6
   15a34:	popcc	{r4, sl, fp, pc}
   15a38:	add	r0, r4, #4
   15a3c:	bl	1b624 <main@@Base+0x2a4>
   15a40:	cmp	r0, #0
   15a44:	movwne	r0, #1
   15a48:	pop	{r4, sl, fp, pc}
   15a4c:	movw	r0, #12550	; 0x3106
   15a50:	movt	r0, #2
   15a54:	movw	r1, #12588	; 0x312c
   15a58:	movt	r1, #2
   15a5c:	movw	r3, #16774	; 0x4186
   15a60:	movt	r3, #2
   15a64:	movw	r2, #607	; 0x25f
   15a68:	bl	12f88 <__assert_fail@plt>
   15a6c:	push	{r4, sl, fp, lr}
   15a70:	add	fp, sp, #8
   15a74:	cmp	r0, #0
   15a78:	beq	15ab4 <verify_monster@@Base+0x14fc>
   15a7c:	mov	r4, r0
   15a80:	bl	1b61c <main@@Base+0x29c>
   15a84:	sub	r4, r4, r0
   15a88:	mov	r0, r4
   15a8c:	bl	1b624 <main@@Base+0x2a4>
   15a90:	mov	r1, r0
   15a94:	mov	r0, #0
   15a98:	cmp	r1, #8
   15a9c:	popcc	{r4, sl, fp, pc}
   15aa0:	add	r0, r4, #6
   15aa4:	bl	1b624 <main@@Base+0x2a4>
   15aa8:	cmp	r0, #0
   15aac:	movwne	r0, #1
   15ab0:	pop	{r4, sl, fp, pc}
   15ab4:	movw	r0, #12550	; 0x3106
   15ab8:	movt	r0, #2
   15abc:	movw	r1, #12588	; 0x312c
   15ac0:	movt	r1, #2
   15ac4:	movw	r3, #16841	; 0x41c9
   15ac8:	movt	r3, #2
   15acc:	mov	r2, #608	; 0x260
   15ad0:	bl	12f88 <__assert_fail@plt>
   15ad4:	push	{r4, sl, fp, lr}
   15ad8:	add	fp, sp, #8
   15adc:	cmp	r0, #0
   15ae0:	beq	15b1c <verify_monster@@Base+0x1564>
   15ae4:	mov	r4, r0
   15ae8:	bl	1b61c <main@@Base+0x29c>
   15aec:	sub	r4, r4, r0
   15af0:	mov	r0, r4
   15af4:	bl	1b624 <main@@Base+0x2a4>
   15af8:	mov	r1, r0
   15afc:	mov	r0, #0
   15b00:	cmp	r1, #10
   15b04:	popcc	{r4, sl, fp, pc}
   15b08:	add	r0, r4, #8
   15b0c:	bl	1b624 <main@@Base+0x2a4>
   15b10:	cmp	r0, #0
   15b14:	movwne	r0, #1
   15b18:	pop	{r4, sl, fp, pc}
   15b1c:	movw	r0, #12550	; 0x3106
   15b20:	movt	r0, #2
   15b24:	movw	r1, #12588	; 0x312c
   15b28:	movt	r1, #2
   15b2c:	movw	r3, #16909	; 0x420d
   15b30:	movt	r3, #2
   15b34:	movw	r2, #609	; 0x261
   15b38:	bl	12f88 <__assert_fail@plt>

00015b3c <gen_monster@@Base>:
   15b3c:	push	{r4, r5, r6, sl, fp, lr}
   15b40:	add	fp, sp, #16
   15b44:	sub	sp, sp, #72	; 0x48
   15b48:	mov	r5, r1
   15b4c:	mov	r4, r0
   15b50:	movw	r0, #27496	; 0x6b68
   15b54:	movt	r0, #2
   15b58:	vldr	d16, [r0]
   15b5c:	movw	r0, #2312	; 0x908
   15b60:	strh	r0, [fp, #-24]	; 0xffffffe8
   15b64:	vstr	d16, [fp, #-32]	; 0xffffffe0
   15b68:	movw	r0, #256	; 0x100
   15b6c:	movt	r0, #1
   15b70:	str	r0, [sp, #28]
   15b74:	mov	r0, r4
   15b78:	bl	1db9c <flatcc_builder_reset@@Base>
   15b7c:	mov	r0, r4
   15b80:	cmp	r5, #0
   15b84:	beq	15b90 <gen_monster@@Base+0x54>
   15b88:	bl	15fec <gen_monster@@Base+0x4b0>
   15b8c:	b	15b94 <gen_monster@@Base+0x58>
   15b90:	bl	16010 <gen_monster@@Base+0x4d4>
   15b94:	mov	r5, #80	; 0x50
   15b98:	mov	r0, r4
   15b9c:	mov	r1, #80	; 0x50
   15ba0:	bl	1603c <gen_monster@@Base+0x500>
   15ba4:	mov	r0, r4
   15ba8:	bl	16078 <gen_monster@@Base+0x53c>
   15bac:	movw	r1, #52429	; 0xcccd
   15bb0:	movt	r1, #49228	; 0xc04c
   15bb4:	mov	r2, #1073741824	; 0x40000000
   15bb8:	mov	r3, #1065353216	; 0x3f800000
   15bbc:	str	r3, [r0]
   15bc0:	str	r2, [r0, #4]
   15bc4:	str	r1, [r0, #8]
   15bc8:	movw	r1, #9281	; 0x2441
   15bcc:	movt	r1, #2
   15bd0:	mov	r0, r4
   15bd4:	bl	13d54 <test_empty_monster@@Base+0x11c>
   15bd8:	mov	r0, r4
   15bdc:	mov	r1, #2
   15be0:	bl	16088 <gen_monster@@Base+0x54c>
   15be4:	sub	r1, fp, #32
   15be8:	mov	r0, r4
   15bec:	mov	r2, #10
   15bf0:	bl	160c4 <gen_monster@@Base+0x588>
   15bf4:	mov	r0, r4
   15bf8:	bl	160e4 <gen_monster@@Base+0x5a8>
   15bfc:	mov	r0, r4
   15c00:	mov	r1, #1
   15c04:	bl	160e8 <gen_monster@@Base+0x5ac>
   15c08:	mov	r1, #32
   15c0c:	strb	r1, [r0, #2]
   15c10:	mov	r1, #16
   15c14:	strh	r1, [r0]
   15c18:	mov	r0, r4
   15c1c:	mov	r1, #2
   15c20:	bl	160e8 <gen_monster@@Base+0x5ac>
   15c24:	mov	r1, #96	; 0x60
   15c28:	strb	r1, [r0, #6]
   15c2c:	strh	r5, [r0, #4]
   15c30:	mov	r1, #64	; 0x40
   15c34:	strb	r1, [r0, #2]
   15c38:	mov	r1, #48	; 0x30
   15c3c:	strh	r1, [r0]
   15c40:	mov	r0, r4
   15c44:	bl	160ec <gen_monster@@Base+0x5b0>
   15c48:	mov	r0, #145	; 0x91
   15c4c:	strb	r0, [fp, #-34]	; 0xffffffde
   15c50:	mov	r0, #400	; 0x190
   15c54:	strh	r0, [fp, #-36]	; 0xffffffdc
   15c58:	sub	r5, fp, #36	; 0x24
   15c5c:	mov	r0, r4
   15c60:	mov	r1, r5
   15c64:	bl	1610c <gen_monster@@Base+0x5d0>
   15c68:	mov	r0, r4
   15c6c:	mov	r1, r5
   15c70:	bl	1610c <gen_monster@@Base+0x5d0>
   15c74:	mov	r0, r4
   15c78:	mov	r1, r5
   15c7c:	bl	16130 <gen_monster@@Base+0x5f4>
   15c80:	mov	r0, r4
   15c84:	bl	16154 <gen_monster@@Base+0x618>
   15c88:	cmp	r0, #7
   15c8c:	bne	15f6c <gen_monster@@Base+0x430>
   15c90:	mov	r0, r4
   15c94:	bl	16158 <gen_monster@@Base+0x61c>
   15c98:	mov	r0, r4
   15c9c:	bl	16154 <gen_monster@@Base+0x618>
   15ca0:	cmp	r0, #5
   15ca4:	bne	15f8c <gen_monster@@Base+0x450>
   15ca8:	mov	r0, r4
   15cac:	bl	16160 <gen_monster@@Base+0x624>
   15cb0:	ldrh	r1, [r0, #16]
   15cb4:	add	r1, r1, #1
   15cb8:	strh	r1, [r0, #16]
   15cbc:	mov	r0, r4
   15cc0:	bl	16164 <gen_monster@@Base+0x628>
   15cc4:	mov	r0, r4
   15cc8:	bl	13d4c <test_empty_monster@@Base+0x114>
   15ccc:	movw	r1, #9842	; 0x2672
   15cd0:	movt	r1, #2
   15cd4:	mov	r0, r4
   15cd8:	mov	r2, #7
   15cdc:	bl	16184 <gen_monster@@Base+0x648>
   15ce0:	mov	r1, r0
   15ce4:	mov	r0, r4
   15ce8:	bl	16188 <gen_monster@@Base+0x64c>
   15cec:	mov	r0, r4
   15cf0:	bl	13d74 <test_empty_monster@@Base+0x13c>
   15cf4:	mov	r5, r0
   15cf8:	mov	r0, r4
   15cfc:	bl	161b0 <gen_monster@@Base+0x674>
   15d00:	mov	r0, r4
   15d04:	mov	r1, #2
   15d08:	bl	161b4 <gen_monster@@Base+0x678>
   15d0c:	str	r5, [r0]
   15d10:	str	r5, [r0, #4]
   15d14:	mov	r0, r4
   15d18:	bl	161b8 <gen_monster@@Base+0x67c>
   15d1c:	movw	r1, #24648	; 0x6048
   15d20:	movt	r1, #2
   15d24:	mov	r0, r4
   15d28:	mov	r2, #30
   15d2c:	bl	161bc <gen_monster@@Base+0x680>
   15d30:	mov	r0, r4
   15d34:	bl	161dc <gen_monster@@Base+0x6a0>
   15d38:	ldr	r6, [r0]
   15d3c:	mov	r0, r4
   15d40:	mov	r1, #3
   15d44:	bl	161b4 <gen_monster@@Base+0x678>
   15d48:	stm	r0, {r5, r6}
   15d4c:	mov	r0, r4
   15d50:	bl	161fc <gen_monster@@Base+0x6c0>
   15d54:	mov	r0, r4
   15d58:	bl	16204 <gen_monster@@Base+0x6c8>
   15d5c:	cmp	r0, #5
   15d60:	bne	15fac <gen_monster@@Base+0x470>
   15d64:	mov	r0, r4
   15d68:	bl	161b8 <gen_monster@@Base+0x67c>
   15d6c:	movw	r1, #10339	; 0x2863
   15d70:	movt	r1, #2
   15d74:	mov	r0, r4
   15d78:	mov	r2, #8
   15d7c:	bl	161bc <gen_monster@@Base+0x680>
   15d80:	mov	r0, r4
   15d84:	bl	161dc <gen_monster@@Base+0x6a0>
   15d88:	ldr	r0, [r0]
   15d8c:	str	r0, [sp, #44]	; 0x2c
   15d90:	mov	r0, r4
   15d94:	bl	16204 <gen_monster@@Base+0x6c8>
   15d98:	cmp	r0, #6
   15d9c:	bne	15fcc <gen_monster@@Base+0x490>
   15da0:	mov	r0, r4
   15da4:	bl	16208 <gen_monster@@Base+0x6cc>
   15da8:	ldr	r1, [r0, #8]
   15dac:	ldr	r2, [r0, #20]
   15db0:	str	r1, [sp, #48]	; 0x30
   15db4:	str	r2, [r0]
   15db8:	str	r5, [r0, #20]
   15dbc:	add	r1, sp, #44	; 0x2c
   15dc0:	mov	r0, r4
   15dc4:	bl	1620c <gen_monster@@Base+0x6d0>
   15dc8:	mov	r0, r4
   15dcc:	bl	16214 <gen_monster@@Base+0x6d8>
   15dd0:	movw	r1, #10099	; 0x2773
   15dd4:	movt	r1, #2
   15dd8:	mov	r0, r4
   15ddc:	bl	16234 <gen_monster@@Base+0x6f8>
   15de0:	str	r0, [sp, #32]
   15de4:	movw	r1, #27488	; 0x6b60
   15de8:	movt	r1, #2
   15dec:	mov	r0, r4
   15df0:	mov	r2, #2
   15df4:	bl	16184 <gen_monster@@Base+0x648>
   15df8:	str	r0, [sp, #36]	; 0x24
   15dfc:	movw	r1, #10131	; 0x2793
   15e00:	movt	r1, #2
   15e04:	mov	r0, r4
   15e08:	bl	16234 <gen_monster@@Base+0x6f8>
   15e0c:	str	r0, [sp, #40]	; 0x28
   15e10:	add	r1, sp, #32
   15e14:	mov	r0, r4
   15e18:	bl	16238 <gen_monster@@Base+0x6fc>
   15e1c:	mov	r0, r4
   15e20:	bl	1625c <gen_monster@@Base+0x720>
   15e24:	add	r6, sp, #28
   15e28:	mov	r0, r4
   15e2c:	mov	r1, r6
   15e30:	mov	r2, #1
   15e34:	bl	16260 <gen_monster@@Base+0x724>
   15e38:	orr	r1, r6, #1
   15e3c:	mov	r0, r4
   15e40:	mov	r2, #3
   15e44:	bl	16260 <gen_monster@@Base+0x724>
   15e48:	mov	r0, r4
   15e4c:	bl	16264 <gen_monster@@Base+0x728>
   15e50:	add	r0, sp, #20
   15e54:	mov	r1, r5
   15e58:	bl	162f4 <gen_monster@@Base+0x7b8>
   15e5c:	ldr	r1, [sp, #20]
   15e60:	ldr	r2, [sp, #24]
   15e64:	mov	r0, r4
   15e68:	bl	16284 <gen_monster@@Base+0x748>
   15e6c:	mov	r0, r4
   15e70:	bl	16304 <gen_monster@@Base+0x7c8>
   15e74:	movw	r1, #22614	; 0x5856
   15e78:	movt	r1, #2
   15e7c:	mov	r0, r4
   15e80:	bl	13d54 <test_empty_monster@@Base+0x11c>
   15e84:	mov	r0, r4
   15e88:	bl	161b0 <gen_monster@@Base+0x674>
   15e8c:	mov	r0, r4
   15e90:	bl	16308 <gen_monster@@Base+0x7cc>
   15e94:	add	r0, sp, #12
   15e98:	mov	r1, r5
   15e9c:	bl	162f4 <gen_monster@@Base+0x7b8>
   15ea0:	ldr	r1, [sp, #12]
   15ea4:	ldr	r2, [sp, #16]
   15ea8:	mov	r0, r4
   15eac:	bl	16284 <gen_monster@@Base+0x748>
   15eb0:	movw	r6, #10418	; 0x28b2
   15eb4:	movt	r6, #2
   15eb8:	mov	r0, r4
   15ebc:	mov	r1, r6
   15ec0:	bl	13d54 <test_empty_monster@@Base+0x11c>
   15ec4:	mov	r0, r4
   15ec8:	bl	161dc <gen_monster@@Base+0x6a0>
   15ecc:	mov	r0, r4
   15ed0:	bl	161b8 <gen_monster@@Base+0x67c>
   15ed4:	mov	r0, r4
   15ed8:	mov	r1, r5
   15edc:	bl	1630c <gen_monster@@Base+0x7d0>
   15ee0:	mov	r0, r4
   15ee4:	mov	r1, r6
   15ee8:	bl	13d54 <test_empty_monster@@Base+0x11c>
   15eec:	mov	r0, r4
   15ef0:	bl	16338 <gen_monster@@Base+0x7fc>
   15ef4:	mov	r0, r4
   15ef8:	bl	161b8 <gen_monster@@Base+0x67c>
   15efc:	add	r0, sp, #4
   15f00:	mov	r1, r5
   15f04:	bl	162f4 <gen_monster@@Base+0x7b8>
   15f08:	ldmib	sp, {r1, r2}
   15f0c:	mov	r0, r4
   15f10:	bl	16358 <gen_monster@@Base+0x81c>
   15f14:	mov	r0, r4
   15f18:	mov	r1, r6
   15f1c:	bl	13d54 <test_empty_monster@@Base+0x11c>
   15f20:	mov	r0, r4
   15f24:	bl	16380 <gen_monster@@Base+0x844>
   15f28:	mov	r0, r4
   15f2c:	bl	161dc <gen_monster@@Base+0x6a0>
   15f30:	mov	r0, r4
   15f34:	bl	16214 <gen_monster@@Base+0x6d8>
   15f38:	mov	r0, r4
   15f3c:	bl	163a8 <gen_monster@@Base+0x86c>
   15f40:	mov	r0, r4
   15f44:	bl	163c8 <gen_monster@@Base+0x88c>
   15f48:	mov	r0, r4
   15f4c:	bl	163f0 <gen_monster@@Base+0x8b4>
   15f50:	mov	r0, r4
   15f54:	bl	163f4 <gen_monster@@Base+0x8b8>
   15f58:	mov	r0, r4
   15f5c:	bl	16414 <gen_monster@@Base+0x8d8>
   15f60:	mov	r0, #0
   15f64:	sub	sp, fp, #16
   15f68:	pop	{r4, r5, r6, sl, fp, pc}
   15f6c:	movw	r0, #10169	; 0x27b9
   15f70:	movt	r0, #2
   15f74:	movw	r1, #9718	; 0x25f6
   15f78:	movt	r1, #2
   15f7c:	movw	r3, #10208	; 0x27e0
   15f80:	movt	r3, #2
   15f84:	movw	r2, #881	; 0x371
   15f88:	bl	12f88 <__assert_fail@plt>
   15f8c:	movw	r0, #10249	; 0x2809
   15f90:	movt	r0, #2
   15f94:	movw	r1, #9718	; 0x25f6
   15f98:	movt	r1, #2
   15f9c:	movw	r3, #10208	; 0x27e0
   15fa0:	movt	r3, #2
   15fa4:	movw	r2, #883	; 0x373
   15fa8:	bl	12f88 <__assert_fail@plt>
   15fac:	movw	r0, #10288	; 0x2830
   15fb0:	movt	r0, #2
   15fb4:	movw	r1, #9718	; 0x25f6
   15fb8:	movt	r1, #2
   15fbc:	movw	r3, #10208	; 0x27e0
   15fc0:	movt	r3, #2
   15fc4:	movw	r2, #923	; 0x39b
   15fc8:	bl	12f88 <__assert_fail@plt>
   15fcc:	movw	r0, #10367	; 0x287f
   15fd0:	movt	r0, #2
   15fd4:	movw	r1, #9718	; 0x25f6
   15fd8:	movt	r1, #2
   15fdc:	movw	r3, #10208	; 0x27e0
   15fe0:	movt	r3, #2
   15fe4:	movw	r2, #929	; 0x3a1
   15fe8:	bl	12f88 <__assert_fail@plt>
   15fec:	push	{r4, sl, fp, lr}
   15ff0:	add	fp, sp, #8
   15ff4:	mov	r4, r0
   15ff8:	bl	1c824 <main@@Base+0x14a4>
   15ffc:	cmp	r0, #0
   16000:	popne	{r4, sl, fp, pc}
   16004:	mov	r0, r4
   16008:	pop	{r4, sl, fp, lr}
   1600c:	b	13d4c <test_empty_monster@@Base+0x114>
   16010:	push	{r4, sl, fp, lr}
   16014:	add	fp, sp, #8
   16018:	mov	r4, r0
   1601c:	movw	r1, #9108	; 0x2394
   16020:	movt	r1, #2
   16024:	bl	13d40 <test_empty_monster@@Base+0x108>
   16028:	cmp	r0, #0
   1602c:	popne	{r4, sl, fp, pc}
   16030:	mov	r0, r4
   16034:	pop	{r4, sl, fp, lr}
   16038:	b	13d4c <test_empty_monster@@Base+0x114>
   1603c:	push	{r4, sl, fp, lr}
   16040:	add	fp, sp, #8
   16044:	cmp	r1, #100	; 0x64
   16048:	popeq	{r4, sl, fp, pc}
   1604c:	mov	r4, r1
   16050:	mov	r1, #2
   16054:	mov	r2, #2
   16058:	mov	r3, #2
   1605c:	bl	1fe28 <flatcc_builder_table_add@@Base>
   16060:	cmp	r0, #0
   16064:	beq	16074 <gen_monster@@Base+0x538>
   16068:	mov	r1, r4
   1606c:	pop	{r4, sl, fp, lr}
   16070:	b	1bae8 <main@@Base+0x768>
   16074:	pop	{r4, sl, fp, pc}
   16078:	mov	r1, #0
   1607c:	mov	r2, #32
   16080:	mov	r3, #16
   16084:	b	1fe28 <flatcc_builder_table_add@@Base>
   16088:	push	{r4, sl, fp, lr}
   1608c:	add	fp, sp, #8
   16090:	cmp	r1, #8
   16094:	popeq	{r4, sl, fp, pc}
   16098:	mov	r4, r1
   1609c:	mov	r1, #6
   160a0:	mov	r2, #1
   160a4:	mov	r3, #1
   160a8:	bl	1fe28 <flatcc_builder_table_add@@Base>
   160ac:	cmp	r0, #0
   160b0:	beq	160c0 <gen_monster@@Base+0x584>
   160b4:	mov	r1, r4
   160b8:	pop	{r4, sl, fp, lr}
   160bc:	b	1c838 <main@@Base+0x14b8>
   160c0:	pop	{r4, sl, fp, pc}
   160c4:	push	{r4, sl, fp, lr}
   160c8:	add	fp, sp, #8
   160cc:	mov	r4, r0
   160d0:	bl	13594 <test_type_aliases@@Base+0x19c>
   160d4:	mov	r1, r0
   160d8:	mov	r0, r4
   160dc:	pop	{r4, sl, fp, lr}
   160e0:	b	1c85c <main@@Base+0x14dc>
   160e4:	b	1c884 <main@@Base+0x1504>
   160e8:	b	1e76c <flatcc_builder_extend_vector@@Base>
   160ec:	push	{fp, lr}
   160f0:	mov	fp, sp
   160f4:	mov	r1, #1
   160f8:	bl	1e76c <flatcc_builder_extend_vector@@Base>
   160fc:	cmp	r0, #0
   16100:	popeq	{fp, pc}
   16104:	pop	{fp, lr}
   16108:	b	1c894 <main@@Base+0x1514>
   1610c:	push	{r4, sl, fp, lr}
   16110:	add	fp, sp, #8
   16114:	mov	r4, r1
   16118:	mov	r1, #1
   1611c:	bl	1e76c <flatcc_builder_extend_vector@@Base>
   16120:	cmp	r0, #0
   16124:	ldrne	r1, [r4]
   16128:	strne	r1, [r0]
   1612c:	pop	{r4, sl, fp, pc}
   16130:	push	{r4, sl, fp, lr}
   16134:	add	fp, sp, #8
   16138:	mov	r4, r1
   1613c:	mov	r1, #1
   16140:	bl	1e76c <flatcc_builder_extend_vector@@Base>
   16144:	cmp	r0, #0
   16148:	ldrne	r1, [r4]
   1614c:	strne	r1, [r0]
   16150:	pop	{r4, sl, fp, pc}
   16154:	b	1fa10 <flatcc_builder_vector_count@@Base>
   16158:	mov	r1, #2
   1615c:	b	1ebb8 <flatcc_builder_truncate_vector@@Base>
   16160:	b	1fa1c <flatcc_builder_vector_edit@@Base>
   16164:	push	{r4, sl, fp, lr}
   16168:	add	fp, sp, #8
   1616c:	mov	r4, r0
   16170:	bl	1c8d0 <main@@Base+0x1550>
   16174:	mov	r1, r0
   16178:	mov	r0, r4
   1617c:	pop	{r4, sl, fp, lr}
   16180:	b	1c8a8 <main@@Base+0x1528>
   16184:	b	2046c <flatcc_builder_create_string@@Base>
   16188:	push	{r4, sl, fp, lr}
   1618c:	add	fp, sp, #8
   16190:	cmp	r1, #0
   16194:	popeq	{r4, sl, fp, pc}
   16198:	mov	r4, r1
   1619c:	mov	r1, #3
   161a0:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   161a4:	cmp	r0, #0
   161a8:	strne	r4, [r0]
   161ac:	pop	{r4, sl, fp, pc}
   161b0:	b	1ede8 <flatcc_builder_start_offset_vector@@Base>
   161b4:	b	1e934 <flatcc_builder_extend_offset_vector@@Base>
   161b8:	b	13d4c <test_empty_monster@@Base+0x114>
   161bc:	push	{r4, sl, fp, lr}
   161c0:	add	fp, sp, #8
   161c4:	mov	r4, r0
   161c8:	bl	20550 <flatcc_builder_create_string_strn@@Base>
   161cc:	mov	r1, r0
   161d0:	mov	r0, r4
   161d4:	pop	{r4, sl, fp, lr}
   161d8:	b	16188 <gen_monster@@Base+0x64c>
   161dc:	push	{r4, sl, fp, lr}
   161e0:	add	fp, sp, #8
   161e4:	mov	r4, r0
   161e8:	bl	13d74 <test_empty_monster@@Base+0x13c>
   161ec:	mov	r1, r0
   161f0:	mov	r0, r4
   161f4:	pop	{r4, sl, fp, lr}
   161f8:	b	1c8d4 <main@@Base+0x1554>
   161fc:	mov	r1, #1
   16200:	b	1ec5c <flatcc_builder_truncate_offset_vector@@Base>
   16204:	b	1fc4c <flatcc_builder_offset_vector_count@@Base>
   16208:	b	1fc44 <flatcc_builder_offset_vector_edit@@Base>
   1620c:	mov	r2, #2
   16210:	b	1e9d8 <flatcc_builder_append_offset_vector@@Base>
   16214:	push	{r4, sl, fp, lr}
   16218:	add	fp, sp, #8
   1621c:	mov	r4, r0
   16220:	bl	1ee9c <flatcc_builder_end_offset_vector@@Base>
   16224:	mov	r1, r0
   16228:	mov	r0, r4
   1622c:	pop	{r4, sl, fp, lr}
   16230:	b	1c8e4 <main@@Base+0x1564>
   16234:	b	20524 <flatcc_builder_create_string_str@@Base>
   16238:	push	{r4, sl, fp, lr}
   1623c:	add	fp, sp, #8
   16240:	mov	r4, r0
   16244:	mov	r2, #3
   16248:	bl	1ee48 <flatcc_builder_create_offset_vector@@Base>
   1624c:	mov	r1, r0
   16250:	mov	r0, r4
   16254:	pop	{r4, sl, fp, lr}
   16258:	b	1c90c <main@@Base+0x158c>
   1625c:	b	1c934 <main@@Base+0x15b4>
   16260:	b	1e8b4 <flatcc_builder_append_vector@@Base>
   16264:	push	{r4, sl, fp, lr}
   16268:	add	fp, sp, #8
   1626c:	mov	r4, r0
   16270:	bl	1c96c <main@@Base+0x15ec>
   16274:	mov	r1, r0
   16278:	mov	r0, r4
   1627c:	pop	{r4, sl, fp, lr}
   16280:	b	1c944 <main@@Base+0x15c4>
   16284:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16288:	add	fp, sp, #24
   1628c:	mov	r4, #0
   16290:	tst	r1, #255	; 0xff
   16294:	movne	r5, r2
   16298:	mvnne	r4, #0
   1629c:	cmpne	r2, #0
   162a0:	bne	162ac <gen_monster@@Base+0x770>
   162a4:	mov	r0, r4
   162a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   162ac:	mov	r6, r1
   162b0:	mov	r7, r0
   162b4:	mov	r1, #7
   162b8:	mov	r2, #1
   162bc:	mov	r3, #1
   162c0:	bl	1fe28 <flatcc_builder_table_add@@Base>
   162c4:	cmp	r0, #0
   162c8:	beq	162a4 <gen_monster@@Base+0x768>
   162cc:	mov	r8, r0
   162d0:	mov	r0, r7
   162d4:	mov	r1, #8
   162d8:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   162dc:	cmp	r0, #0
   162e0:	strbne	r6, [r8]
   162e4:	strne	r5, [r0]
   162e8:	movne	r4, #0
   162ec:	mov	r0, r4
   162f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   162f4:	str	r1, [r0, #4]
   162f8:	mov	r1, #1
   162fc:	strb	r1, [r0]
   16300:	bx	lr
   16304:	b	13d4c <test_empty_monster@@Base+0x114>
   16308:	b	13d4c <test_empty_monster@@Base+0x114>
   1630c:	push	{r4, sl, fp, lr}
   16310:	add	fp, sp, #8
   16314:	sub	sp, sp, #8
   16318:	mov	r4, r0
   1631c:	mov	r0, sp
   16320:	bl	162f4 <gen_monster@@Base+0x7b8>
   16324:	ldm	sp, {r1, r2}
   16328:	mov	r0, r4
   1632c:	sub	sp, fp, #8
   16330:	pop	{r4, sl, fp, lr}
   16334:	b	16284 <gen_monster@@Base+0x748>
   16338:	push	{r4, sl, fp, lr}
   1633c:	add	fp, sp, #8
   16340:	mov	r4, r0
   16344:	bl	13d74 <test_empty_monster@@Base+0x13c>
   16348:	mov	r1, r0
   1634c:	mov	r0, r4
   16350:	pop	{r4, sl, fp, lr}
   16354:	b	1c970 <main@@Base+0x15f0>
   16358:	push	{r4, sl, fp, lr}
   1635c:	add	fp, sp, #8
   16360:	tst	r1, #255	; 0xff
   16364:	popeq	{r4, sl, fp, pc}
   16368:	mov	r4, r2
   1636c:	mov	r1, #8
   16370:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   16374:	cmp	r0, #0
   16378:	strne	r4, [r0]
   1637c:	pop	{r4, sl, fp, pc}
   16380:	push	{r4, sl, fp, lr}
   16384:	add	fp, sp, #8
   16388:	mov	r4, #1
   1638c:	mov	r1, #7
   16390:	mov	r2, #1
   16394:	mov	r3, #1
   16398:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1639c:	cmp	r0, #0
   163a0:	strbne	r4, [r0]
   163a4:	pop	{r4, sl, fp, pc}
   163a8:	push	{r4, sl, fp, lr}
   163ac:	add	fp, sp, #8
   163b0:	mov	r4, r0
   163b4:	bl	13d74 <test_empty_monster@@Base+0x13c>
   163b8:	mov	r1, r0
   163bc:	mov	r0, r4
   163c0:	pop	{r4, sl, fp, lr}
   163c4:	b	18904 <test_create_add_field@@Base+0xf4>
   163c8:	push	{fp, lr}
   163cc:	mov	fp, sp
   163d0:	mov	r1, #15
   163d4:	mov	r2, #1
   163d8:	mov	r3, #1
   163dc:	bl	1fe28 <flatcc_builder_table_add@@Base>
   163e0:	cmp	r0, #0
   163e4:	popeq	{fp, pc}
   163e8:	pop	{fp, lr}
   163ec:	b	1c97c <main@@Base+0x15fc>
   163f0:	b	1c988 <main@@Base+0x1608>
   163f4:	push	{r4, sl, fp, lr}
   163f8:	add	fp, sp, #8
   163fc:	mov	r4, r0
   16400:	bl	1c9b8 <main@@Base+0x1638>
   16404:	mov	r1, r0
   16408:	mov	r0, r4
   1640c:	pop	{r4, sl, fp, lr}
   16410:	b	1c990 <main@@Base+0x1610>
   16414:	push	{r4, sl, fp, lr}
   16418:	add	fp, sp, #8
   1641c:	mov	r4, r0
   16420:	bl	13d74 <test_empty_monster@@Base+0x13c>
   16424:	mov	r1, r0
   16428:	mov	r0, r4
   1642c:	pop	{r4, sl, fp, lr}
   16430:	b	13dc4 <test_empty_monster@@Base+0x18c>

00016434 <test_monster@@Base>:
   16434:	push	{r4, r5, fp, lr}
   16438:	add	fp, sp, #8
   1643c:	sub	sp, sp, #8
   16440:	mov	r4, r0
   16444:	mov	r1, #0
   16448:	bl	15b3c <gen_monster@@Base>
   1644c:	add	r1, sp, #4
   16450:	mov	r0, r4
   16454:	bl	209cc <flatcc_builder_finalize_aligned_buffer@@Base>
   16458:	mov	r4, r0
   1645c:	movw	r0, #36976	; 0x9070
   16460:	movt	r0, #3
   16464:	ldr	r3, [r0]
   16468:	ldr	r2, [sp, #4]
   1646c:	movw	r0, #9368	; 0x2498
   16470:	movt	r0, #2
   16474:	mov	r1, r4
   16478:	bl	1364c <test_type_aliases@@Base+0x254>
   1647c:	ldr	r1, [sp, #4]
   16480:	mov	r0, r4
   16484:	bl	13dd4 <test_empty_monster@@Base+0x19c>
   16488:	cmp	r0, #0
   1648c:	beq	164ac <test_monster@@Base+0x78>
   16490:	bl	21280 <flatcc_verify_error_string@@Base>
   16494:	mov	r1, r0
   16498:	movw	r0, #10427	; 0x28bb
   1649c:	movt	r0, #2
   164a0:	bl	12e98 <printf@plt>
   164a4:	mvn	r5, #0
   164a8:	b	164c0 <test_monster@@Base+0x8c>
   164ac:	mov	r0, r4
   164b0:	bl	145b8 <verify_monster@@Base>
   164b4:	mov	r5, r0
   164b8:	mov	r0, r4
   164bc:	bl	20aac <flatcc_builder_aligned_free@@Base>
   164c0:	mov	r0, r5
   164c4:	sub	sp, fp, #8
   164c8:	pop	{r4, r5, fp, pc}

000164cc <test_monster_with_size@@Base>:
   164cc:	push	{r4, r5, fp, lr}
   164d0:	add	fp, sp, #8
   164d4:	sub	sp, sp, #8
   164d8:	mov	r4, r0
   164dc:	mov	r1, #1
   164e0:	bl	15b3c <gen_monster@@Base>
   164e4:	add	r1, sp, #4
   164e8:	mov	r0, r4
   164ec:	bl	209cc <flatcc_builder_finalize_aligned_buffer@@Base>
   164f0:	mov	r4, r0
   164f4:	movw	r0, #36976	; 0x9070
   164f8:	movt	r0, #3
   164fc:	ldr	r3, [r0]
   16500:	ldr	r2, [sp, #4]
   16504:	movw	r0, #10469	; 0x28e5
   16508:	movt	r0, #2
   1650c:	mov	r1, r4
   16510:	bl	1364c <test_type_aliases@@Base+0x254>
   16514:	tst	r4, #15
   16518:	beq	16540 <test_monster_with_size@@Base+0x74>
   1651c:	movw	r0, #10493	; 0x28fd
   16520:	movt	r0, #2
   16524:	bl	12e98 <printf@plt>
   16528:	movw	r0, #10574	; 0x294e
   1652c:	movt	r0, #2
   16530:	mov	r1, r4
   16534:	bl	12e98 <printf@plt>
   16538:	mvn	r5, #0
   1653c:	b	165b0 <test_monster_with_size@@Base+0xe4>
   16540:	mov	r1, sp
   16544:	mov	r0, r4
   16548:	bl	165bc <test_monster_with_size@@Base+0xf0>
   1654c:	mov	r5, r0
   16550:	ldr	r0, [sp, #4]
   16554:	sub	r2, r0, #4
   16558:	ldr	r1, [sp]
   1655c:	cmp	r1, r2
   16560:	bne	16588 <test_monster_with_size@@Base+0xbc>
   16564:	mov	r0, r5
   16568:	bl	13dd4 <test_empty_monster@@Base+0x19c>
   1656c:	cmp	r0, #0
   16570:	beq	1659c <test_monster_with_size@@Base+0xd0>
   16574:	bl	21280 <flatcc_verify_error_string@@Base>
   16578:	mov	r1, r0
   1657c:	movw	r0, #10648	; 0x2998
   16580:	movt	r0, #2
   16584:	b	16534 <test_monster_with_size@@Base+0x68>
   16588:	movw	r0, #10594	; 0x2962
   1658c:	movt	r0, #2
   16590:	bl	12e98 <printf@plt>
   16594:	mvn	r5, #0
   16598:	b	165b0 <test_monster_with_size@@Base+0xe4>
   1659c:	mov	r0, r5
   165a0:	bl	145b8 <verify_monster@@Base>
   165a4:	mov	r5, r0
   165a8:	mov	r0, r4
   165ac:	bl	20aac <flatcc_builder_aligned_free@@Base>
   165b0:	mov	r0, r5
   165b4:	sub	sp, fp, #8
   165b8:	pop	{r4, r5, fp, pc}
   165bc:	push	{r4, r5, fp, lr}
   165c0:	add	fp, sp, #8
   165c4:	mov	r4, r0
   165c8:	cmp	r1, #0
   165cc:	beq	165e0 <test_monster_with_size@@Base+0x114>
   165d0:	mov	r5, r1
   165d4:	mov	r0, r4
   165d8:	bl	1b610 <main@@Base+0x290>
   165dc:	str	r0, [r5]
   165e0:	add	r0, r4, #4
   165e4:	pop	{r4, r5, fp, pc}

000165e8 <test_string@@Base>:
   165e8:	push	{r4, r5, fp, lr}
   165ec:	add	fp, sp, #8
   165f0:	mov	r4, r0
   165f4:	bl	1db9c <flatcc_builder_reset@@Base>
   165f8:	mov	r0, r4
   165fc:	bl	16010 <gen_monster@@Base+0x4d4>
   16600:	mov	r0, r4
   16604:	bl	1678c <test_string@@Base+0x1a4>
   16608:	mov	r0, r4
   1660c:	bl	16790 <test_string@@Base+0x1a8>
   16610:	mov	r1, #51	; 0x33
   16614:	strb	r1, [r0, #2]
   16618:	movw	r1, #12849	; 0x3231
   1661c:	strh	r1, [r0]
   16620:	mov	r0, r4
   16624:	bl	16798 <test_string@@Base+0x1b0>
   16628:	mov	r0, r4
   1662c:	bl	167a4 <test_string@@Base+0x1bc>
   16630:	cmp	r0, #4
   16634:	bne	166ec <test_string@@Base+0x104>
   16638:	mov	r0, r4
   1663c:	bl	167a8 <test_string@@Base+0x1c0>
   16640:	mov	r0, r4
   16644:	bl	167a4 <test_string@@Base+0x1bc>
   16648:	cmp	r0, #8
   1664c:	bne	1670c <test_string@@Base+0x124>
   16650:	mov	r0, r4
   16654:	bl	167b8 <test_string@@Base+0x1d0>
   16658:	mov	r0, r4
   1665c:	bl	167a4 <test_string@@Base+0x1bc>
   16660:	cmp	r0, #10
   16664:	bne	1672c <test_string@@Base+0x144>
   16668:	mov	r0, r4
   1666c:	bl	167c8 <test_string@@Base+0x1e0>
   16670:	mov	r0, r4
   16674:	bl	167a4 <test_string@@Base+0x1bc>
   16678:	cmp	r0, #7
   1667c:	bne	1674c <test_string@@Base+0x164>
   16680:	mov	r0, r4
   16684:	bl	167d0 <test_string@@Base+0x1e8>
   16688:	mov	r1, #46	; 0x2e
   1668c:	strb	r1, [r0, #4]
   16690:	mov	r0, r4
   16694:	bl	167d4 <test_string@@Base+0x1ec>
   16698:	mov	r0, r4
   1669c:	bl	16414 <gen_monster@@Base+0x8d8>
   166a0:	mov	r5, #0
   166a4:	mov	r0, r4
   166a8:	mov	r1, #0
   166ac:	bl	20898 <flatcc_builder_get_direct_buffer@@Base>
   166b0:	cmp	r0, #0
   166b4:	beq	1676c <test_string@@Base+0x184>
   166b8:	bl	13208 <verify_empty_monster@@Base+0x180>
   166bc:	bl	15048 <verify_monster@@Base+0xa90>
   166c0:	movw	r1, #10904	; 0x2a98
   166c4:	movt	r1, #2
   166c8:	bl	12e8c <strcmp@plt>
   166cc:	cmp	r0, #0
   166d0:	beq	166e4 <test_string@@Base+0xfc>
   166d4:	movw	r0, #23386	; 0x5b5a
   166d8:	movt	r0, #2
   166dc:	bl	12ee0 <puts@plt>
   166e0:	mvn	r5, #0
   166e4:	mov	r0, r5
   166e8:	pop	{r4, r5, fp, pc}
   166ec:	movw	r0, #10707	; 0x29d3
   166f0:	movt	r0, #2
   166f4:	movw	r1, #9718	; 0x25f6
   166f8:	movt	r1, #2
   166fc:	movw	r3, #10745	; 0x29f9
   16700:	movt	r3, #2
   16704:	movw	r2, #1080	; 0x438
   16708:	bl	12f88 <__assert_fail@plt>
   1670c:	movw	r0, #10786	; 0x2a22
   16710:	movt	r0, #2
   16714:	movw	r1, #9718	; 0x25f6
   16718:	movt	r1, #2
   1671c:	movw	r3, #10745	; 0x29f9
   16720:	movt	r3, #2
   16724:	movw	r2, #1082	; 0x43a
   16728:	bl	12f88 <__assert_fail@plt>
   1672c:	movw	r0, #10827	; 0x2a4b
   16730:	movt	r0, #2
   16734:	movw	r1, #9718	; 0x25f6
   16738:	movt	r1, #2
   1673c:	movw	r3, #10745	; 0x29f9
   16740:	movt	r3, #2
   16744:	movw	r2, #1084	; 0x43c
   16748:	bl	12f88 <__assert_fail@plt>
   1674c:	movw	r0, #10866	; 0x2a72
   16750:	movt	r0, #2
   16754:	movw	r1, #9718	; 0x25f6
   16758:	movt	r1, #2
   1675c:	movw	r3, #10745	; 0x29f9
   16760:	movt	r3, #2
   16764:	movw	r2, #1086	; 0x43e
   16768:	bl	12f88 <__assert_fail@plt>
   1676c:	movw	r0, #11181	; 0x2bad
   16770:	movt	r0, #2
   16774:	movw	r1, #9718	; 0x25f6
   16778:	movt	r1, #2
   1677c:	movw	r3, #10745	; 0x29f9
   16780:	movt	r3, #2
   16784:	movw	r2, #1093	; 0x445
   16788:	bl	12f88 <__assert_fail@plt>
   1678c:	b	1ef00 <flatcc_builder_start_string@@Base>
   16790:	mov	r1, #3
   16794:	b	1ea50 <flatcc_builder_extend_string@@Base>
   16798:	movw	r1, #10743	; 0x29f7
   1679c:	movt	r1, #2
   167a0:	b	1eb30 <flatcc_builder_append_string_str@@Base>
   167a4:	b	20618 <flatcc_builder_string_len@@Base>
   167a8:	movw	r1, #10781	; 0x2a1d
   167ac:	movt	r1, #2
   167b0:	mov	r2, #30
   167b4:	b	1eb5c <flatcc_builder_append_string_strn@@Base>
   167b8:	movw	r1, #10824	; 0x2a48
   167bc:	movt	r1, #2
   167c0:	mov	r2, #2
   167c4:	b	1eab8 <flatcc_builder_append_string@@Base>
   167c8:	mov	r1, #3
   167cc:	b	1ece0 <flatcc_builder_truncate_string@@Base>
   167d0:	b	20610 <flatcc_builder_string_edit@@Base>
   167d4:	push	{r4, sl, fp, lr}
   167d8:	add	fp, sp, #8
   167dc:	mov	r4, r0
   167e0:	bl	20580 <flatcc_builder_end_string@@Base>
   167e4:	mov	r1, r0
   167e8:	mov	r0, r4
   167ec:	pop	{r4, sl, fp, lr}
   167f0:	b	16188 <gen_monster@@Base+0x64c>

000167f4 <test_sort_find@@Base>:
   167f4:	push	{r4, r5, r6, sl, fp, lr}
   167f8:	add	fp, sp, #16
   167fc:	sub	sp, sp, #8
   16800:	mov	r4, r0
   16804:	bl	1db9c <flatcc_builder_reset@@Base>
   16808:	mov	r0, r4
   1680c:	bl	16010 <gen_monster@@Base+0x4d4>
   16810:	movw	r1, #9281	; 0x2441
   16814:	movt	r1, #2
   16818:	mov	r0, r4
   1681c:	bl	13d54 <test_empty_monster@@Base+0x11c>
   16820:	mov	r0, r4
   16824:	bl	161b0 <gen_monster@@Base+0x674>
   16828:	mov	r0, r4
   1682c:	bl	161b8 <gen_monster@@Base+0x67c>
   16830:	movw	r1, #9842	; 0x2672
   16834:	movt	r1, #2
   16838:	mov	r0, r4
   1683c:	bl	13d54 <test_empty_monster@@Base+0x11c>
   16840:	mov	r0, r4
   16844:	bl	161dc <gen_monster@@Base+0x6a0>
   16848:	mov	r0, r4
   1684c:	bl	161b8 <gen_monster@@Base+0x67c>
   16850:	movw	r1, #24648	; 0x6048
   16854:	movt	r1, #2
   16858:	mov	r0, r4
   1685c:	bl	13d54 <test_empty_monster@@Base+0x11c>
   16860:	mov	r0, r4
   16864:	bl	161dc <gen_monster@@Base+0x6a0>
   16868:	mov	r0, r4
   1686c:	bl	161b8 <gen_monster@@Base+0x67c>
   16870:	movw	r5, #24608	; 0x6020
   16874:	movt	r5, #2
   16878:	mov	r0, r4
   1687c:	mov	r1, r5
   16880:	bl	13d54 <test_empty_monster@@Base+0x11c>
   16884:	mov	r0, r4
   16888:	bl	161dc <gen_monster@@Base+0x6a0>
   1688c:	mov	r0, r4
   16890:	bl	161b8 <gen_monster@@Base+0x67c>
   16894:	movw	r1, #10912	; 0x2aa0
   16898:	movt	r1, #2
   1689c:	mov	r0, r4
   168a0:	bl	13d54 <test_empty_monster@@Base+0x11c>
   168a4:	mov	r0, r4
   168a8:	bl	161dc <gen_monster@@Base+0x6a0>
   168ac:	mov	r0, r4
   168b0:	bl	161b8 <gen_monster@@Base+0x67c>
   168b4:	mov	r0, r4
   168b8:	mov	r1, r5
   168bc:	bl	13d54 <test_empty_monster@@Base+0x11c>
   168c0:	mov	r0, r4
   168c4:	bl	161dc <gen_monster@@Base+0x6a0>
   168c8:	mov	r0, r4
   168cc:	bl	16214 <gen_monster@@Base+0x6d8>
   168d0:	mov	r0, r4
   168d4:	bl	16414 <gen_monster@@Base+0x8d8>
   168d8:	add	r1, sp, #4
   168dc:	mov	r0, r4
   168e0:	bl	209cc <flatcc_builder_finalize_aligned_buffer@@Base>
   168e4:	mov	r4, r0
   168e8:	movw	r6, #36976	; 0x9070
   168ec:	movt	r6, #3
   168f0:	ldr	r3, [r6]
   168f4:	ldr	r2, [sp, #4]
   168f8:	movw	r0, #10918	; 0x2aa6
   168fc:	movt	r0, #2
   16900:	mov	r1, r4
   16904:	bl	1364c <test_type_aliases@@Base+0x254>
   16908:	mov	r0, r4
   1690c:	bl	13208 <verify_empty_monster@@Base+0x180>
   16910:	bl	15420 <verify_monster@@Base+0xe68>
   16914:	cmp	r0, #0
   16918:	beq	16bcc <test_sort_find@@Base+0x3d8>
   1691c:	mov	r5, r0
   16920:	bl	16bec <test_sort_find@@Base+0x3f8>
   16924:	ldr	r3, [r6]
   16928:	ldr	r2, [sp, #4]
   1692c:	movw	r0, #10920	; 0x2aa8
   16930:	movt	r0, #2
   16934:	mov	r1, r4
   16938:	bl	1364c <test_type_aliases@@Base+0x254>
   1693c:	mov	r0, r5
   16940:	bl	1549c <verify_monster@@Base+0xee4>
   16944:	cmp	r0, #5
   16948:	bne	1697c <test_sort_find@@Base+0x188>
   1694c:	mov	r0, r5
   16950:	mov	r1, #0
   16954:	bl	154b0 <verify_monster@@Base+0xef8>
   16958:	bl	15048 <verify_monster@@Base+0xa90>
   1695c:	movw	r1, #10912	; 0x2aa0
   16960:	movt	r1, #2
   16964:	bl	12e8c <strcmp@plt>
   16968:	cmp	r0, #0
   1696c:	beq	169a0 <test_sort_find@@Base+0x1ac>
   16970:	movw	r0, #23804	; 0x5cfc
   16974:	movt	r0, #2
   16978:	b	16984 <test_sort_find@@Base+0x190>
   1697c:	movw	r0, #23833	; 0x5d19
   16980:	movt	r0, #2
   16984:	bl	12ee0 <puts@plt>
   16988:	mvn	r5, #0
   1698c:	mov	r0, r4
   16990:	bl	20aac <flatcc_builder_aligned_free@@Base>
   16994:	mov	r0, r5
   16998:	sub	sp, fp, #16
   1699c:	pop	{r4, r5, r6, sl, fp, pc}
   169a0:	mov	r0, r5
   169a4:	mov	r1, #1
   169a8:	bl	154b0 <verify_monster@@Base+0xef8>
   169ac:	bl	15048 <verify_monster@@Base+0xa90>
   169b0:	movw	r1, #24608	; 0x6020
   169b4:	movt	r1, #2
   169b8:	bl	12e8c <strcmp@plt>
   169bc:	cmp	r0, #0
   169c0:	beq	169d0 <test_sort_find@@Base+0x1dc>
   169c4:	movw	r0, #23775	; 0x5cdf
   169c8:	movt	r0, #2
   169cc:	b	16984 <test_sort_find@@Base+0x190>
   169d0:	mov	r0, r5
   169d4:	mov	r1, #2
   169d8:	bl	154b0 <verify_monster@@Base+0xef8>
   169dc:	bl	15048 <verify_monster@@Base+0xa90>
   169e0:	movw	r1, #24608	; 0x6020
   169e4:	movt	r1, #2
   169e8:	bl	12e8c <strcmp@plt>
   169ec:	cmp	r0, #0
   169f0:	beq	16a00 <test_sort_find@@Base+0x20c>
   169f4:	movw	r0, #23746	; 0x5cc2
   169f8:	movt	r0, #2
   169fc:	b	16984 <test_sort_find@@Base+0x190>
   16a00:	mov	r0, r5
   16a04:	mov	r1, #3
   16a08:	bl	154b0 <verify_monster@@Base+0xef8>
   16a0c:	bl	15048 <verify_monster@@Base+0xa90>
   16a10:	movw	r1, #24648	; 0x6048
   16a14:	movt	r1, #2
   16a18:	bl	12e8c <strcmp@plt>
   16a1c:	cmp	r0, #0
   16a20:	beq	16a30 <test_sort_find@@Base+0x23c>
   16a24:	movw	r0, #23717	; 0x5ca5
   16a28:	movt	r0, #2
   16a2c:	b	16984 <test_sort_find@@Base+0x190>
   16a30:	mov	r0, r5
   16a34:	mov	r1, #4
   16a38:	bl	154b0 <verify_monster@@Base+0xef8>
   16a3c:	bl	15048 <verify_monster@@Base+0xa90>
   16a40:	movw	r1, #9842	; 0x2672
   16a44:	movt	r1, #2
   16a48:	bl	12e8c <strcmp@plt>
   16a4c:	cmp	r0, #0
   16a50:	beq	16a60 <test_sort_find@@Base+0x26c>
   16a54:	movw	r0, #23688	; 0x5c88
   16a58:	movt	r0, #2
   16a5c:	b	16984 <test_sort_find@@Base+0x190>
   16a60:	mov	r0, r5
   16a64:	mov	r1, #1
   16a68:	bl	154b0 <verify_monster@@Base+0xef8>
   16a6c:	mov	r6, r0
   16a70:	mov	r0, r5
   16a74:	mov	r1, #2
   16a78:	bl	154b0 <verify_monster@@Base+0xef8>
   16a7c:	cmp	r6, r0
   16a80:	beq	16af8 <test_sort_find@@Base+0x304>
   16a84:	mov	r0, r5
   16a88:	bl	16bf0 <test_sort_find@@Base+0x3fc>
   16a8c:	cmp	r0, #3
   16a90:	bne	16b04 <test_sort_find@@Base+0x310>
   16a94:	mov	r0, r5
   16a98:	bl	16bfc <test_sort_find@@Base+0x408>
   16a9c:	cmp	r0, #3
   16aa0:	bne	16b10 <test_sort_find@@Base+0x31c>
   16aa4:	movw	r1, #24648	; 0x6048
   16aa8:	movt	r1, #2
   16aac:	mov	r0, r5
   16ab0:	bl	16c08 <test_sort_find@@Base+0x414>
   16ab4:	cmp	r0, #3
   16ab8:	bne	16b1c <test_sort_find@@Base+0x328>
   16abc:	movw	r1, #10997	; 0x2af5
   16ac0:	movt	r1, #2
   16ac4:	mov	r0, r5
   16ac8:	bl	16ca0 <test_sort_find@@Base+0x4ac>
   16acc:	cmp	r0, #3
   16ad0:	bne	16b28 <test_sort_find@@Base+0x334>
   16ad4:	movw	r1, #11004	; 0x2afc
   16ad8:	movt	r1, #2
   16adc:	mov	r0, r5
   16ae0:	bl	16c08 <test_sort_find@@Base+0x414>
   16ae4:	cmn	r0, #1
   16ae8:	beq	16b34 <test_sort_find@@Base+0x340>
   16aec:	movw	r0, #23439	; 0x5b8f
   16af0:	movt	r0, #2
   16af4:	b	16984 <test_sort_find@@Base+0x190>
   16af8:	movw	r0, #23617	; 0x5c41
   16afc:	movt	r0, #2
   16b00:	b	16984 <test_sort_find@@Base+0x190>
   16b04:	movw	r0, #23574	; 0x5c16
   16b08:	movt	r0, #2
   16b0c:	b	16984 <test_sort_find@@Base+0x190>
   16b10:	movw	r0, #23524	; 0x5be4
   16b14:	movt	r0, #2
   16b18:	b	16984 <test_sort_find@@Base+0x190>
   16b1c:	movw	r0, #23496	; 0x5bc8
   16b20:	movt	r0, #2
   16b24:	b	16984 <test_sort_find@@Base+0x190>
   16b28:	movw	r0, #23461	; 0x5ba5
   16b2c:	movt	r0, #2
   16b30:	b	16984 <test_sort_find@@Base+0x190>
   16b34:	movw	r1, #10912	; 0x2aa0
   16b38:	movt	r1, #2
   16b3c:	mov	r0, r5
   16b40:	bl	16c08 <test_sort_find@@Base+0x414>
   16b44:	cmp	r0, #0
   16b48:	beq	16b58 <test_sort_find@@Base+0x364>
   16b4c:	movw	r0, #23423	; 0x5b7f
   16b50:	movt	r0, #2
   16b54:	b	16984 <test_sort_find@@Base+0x190>
   16b58:	movw	r1, #24608	; 0x6020
   16b5c:	movt	r1, #2
   16b60:	mov	r0, r5
   16b64:	bl	16c08 <test_sort_find@@Base+0x414>
   16b68:	cmp	r0, #1
   16b6c:	bne	16b98 <test_sort_find@@Base+0x3a4>
   16b70:	movw	r1, #9842	; 0x2672
   16b74:	movt	r1, #2
   16b78:	mov	r0, r5
   16b7c:	bl	16c08 <test_sort_find@@Base+0x414>
   16b80:	cmp	r0, #4
   16b84:	bne	16ba8 <test_sort_find@@Base+0x3b4>
   16b88:	mov	r0, r5
   16b8c:	bl	16bec <test_sort_find@@Base+0x3f8>
   16b90:	mov	r5, #0
   16b94:	b	1698c <test_sort_find@@Base+0x198>
   16b98:	mov	r6, r0
   16b9c:	movw	r0, #24861	; 0x611d
   16ba0:	movt	r0, #2
   16ba4:	b	16bb4 <test_sort_find@@Base+0x3c0>
   16ba8:	mov	r6, r0
   16bac:	movw	r0, #23405	; 0x5b6d
   16bb0:	movt	r0, #2
   16bb4:	bl	12ee0 <puts@plt>
   16bb8:	movw	r0, #11011	; 0x2b03
   16bbc:	movt	r0, #2
   16bc0:	mov	r1, r6
   16bc4:	bl	12e98 <printf@plt>
   16bc8:	b	16988 <test_sort_find@@Base+0x194>
   16bcc:	movw	r0, #10942	; 0x2abe
   16bd0:	movt	r0, #2
   16bd4:	movw	r1, #9718	; 0x25f6
   16bd8:	movt	r1, #2
   16bdc:	movw	r3, #10951	; 0x2ac7
   16be0:	movt	r3, #2
   16be4:	movw	r2, #1147	; 0x47b
   16be8:	bl	12f88 <__assert_fail@plt>
   16bec:	b	1ca08 <main@@Base+0x1688>
   16bf0:	movw	r1, #24648	; 0x6048
   16bf4:	movt	r1, #2
   16bf8:	b	16c08 <test_sort_find@@Base+0x414>
   16bfc:	movw	r1, #10990	; 0x2aee
   16c00:	movt	r1, #2
   16c04:	b	16ca0 <test_sort_find@@Base+0x4ac>
   16c08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16c0c:	add	fp, sp, #24
   16c10:	mov	r8, r1
   16c14:	mov	r6, r0
   16c18:	bl	1549c <verify_monster@@Base+0xee4>
   16c1c:	mvn	r4, #0
   16c20:	cmp	r0, #0
   16c24:	beq	16c8c <test_sort_find@@Base+0x498>
   16c28:	mov	r4, #0
   16c2c:	subs	r5, r0, #1
   16c30:	beq	16c6c <test_sort_find@@Base+0x478>
   16c34:	sub	r0, r5, r4
   16c38:	add	r7, r4, r0, lsr #1
   16c3c:	mov	r0, r6
   16c40:	mov	r1, r7
   16c44:	bl	154b0 <verify_monster@@Base+0xef8>
   16c48:	bl	15048 <verify_monster@@Base+0xa90>
   16c4c:	mov	r1, r8
   16c50:	bl	1cc58 <main@@Base+0x18d8>
   16c54:	cmp	r0, #0
   16c58:	movpl	r5, r7
   16c5c:	addmi	r4, r7, #1
   16c60:	cmp	r5, r4
   16c64:	bhi	16c34 <test_sort_find@@Base+0x440>
   16c68:	bne	16c94 <test_sort_find@@Base+0x4a0>
   16c6c:	mov	r0, r6
   16c70:	mov	r1, r4
   16c74:	bl	154b0 <verify_monster@@Base+0xef8>
   16c78:	bl	15048 <verify_monster@@Base+0xa90>
   16c7c:	mov	r1, r8
   16c80:	bl	1cc58 <main@@Base+0x18d8>
   16c84:	cmp	r0, #0
   16c88:	mvnne	r4, #0
   16c8c:	mov	r0, r4
   16c90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16c94:	mvn	r4, #0
   16c98:	mov	r0, r4
   16c9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16ca0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16ca4:	add	fp, sp, #24
   16ca8:	mov	r8, r1
   16cac:	mov	r6, r0
   16cb0:	bl	1549c <verify_monster@@Base+0xee4>
   16cb4:	mvn	r4, #0
   16cb8:	cmp	r0, #0
   16cbc:	beq	16d2c <test_sort_find@@Base+0x538>
   16cc0:	mov	r4, #0
   16cc4:	subs	r5, r0, #1
   16cc8:	beq	16d08 <test_sort_find@@Base+0x514>
   16ccc:	sub	r0, r5, r4
   16cd0:	add	r7, r4, r0, lsr #1
   16cd4:	mov	r0, r6
   16cd8:	mov	r1, r7
   16cdc:	bl	154b0 <verify_monster@@Base+0xef8>
   16ce0:	bl	15048 <verify_monster@@Base+0xa90>
   16ce4:	mov	r1, r8
   16ce8:	mov	r2, #5
   16cec:	bl	1cc00 <main@@Base+0x1880>
   16cf0:	cmp	r0, #0
   16cf4:	movpl	r5, r7
   16cf8:	addmi	r4, r7, #1
   16cfc:	cmp	r5, r4
   16d00:	bhi	16ccc <test_sort_find@@Base+0x4d8>
   16d04:	bne	16d34 <test_sort_find@@Base+0x540>
   16d08:	mov	r0, r6
   16d0c:	mov	r1, r4
   16d10:	bl	154b0 <verify_monster@@Base+0xef8>
   16d14:	bl	15048 <verify_monster@@Base+0xa90>
   16d18:	mov	r1, r8
   16d1c:	mov	r2, #5
   16d20:	bl	1cc00 <main@@Base+0x1880>
   16d24:	cmp	r0, #0
   16d28:	mvnne	r4, #0
   16d2c:	mov	r0, r4
   16d30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16d34:	mvn	r4, #0
   16d38:	mov	r0, r4
   16d3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016d40 <test_scan@@Base>:
   16d40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d44:	add	fp, sp, #24
   16d48:	sub	sp, sp, #16
   16d4c:	mov	r4, r0
   16d50:	movw	r0, #1027	; 0x403
   16d54:	movt	r0, #515	; 0x203
   16d58:	str	r0, [sp, #7]
   16d5c:	movw	r0, #1798	; 0x706
   16d60:	movt	r0, #769	; 0x301
   16d64:	str	r0, [sp, #4]
   16d68:	mov	r0, r4
   16d6c:	bl	1db9c <flatcc_builder_reset@@Base>
   16d70:	mov	r0, r4
   16d74:	bl	16010 <gen_monster@@Base+0x4d4>
   16d78:	movw	r1, #9281	; 0x2441
   16d7c:	movt	r1, #2
   16d80:	mov	r0, r4
   16d84:	bl	13d54 <test_empty_monster@@Base+0x11c>
   16d88:	add	r1, sp, #4
   16d8c:	mov	r0, r4
   16d90:	mov	r2, #7
   16d94:	bl	160c4 <gen_monster@@Base+0x588>
   16d98:	mov	r0, r4
   16d9c:	bl	17734 <test_scan@@Base+0x9f4>
   16da0:	mov	r0, r4
   16da4:	bl	17738 <test_scan@@Base+0x9f8>
   16da8:	mov	r0, r4
   16dac:	bl	161b0 <gen_monster@@Base+0x674>
   16db0:	mov	r0, r4
   16db4:	bl	161b8 <gen_monster@@Base+0x67c>
   16db8:	movw	r1, #9842	; 0x2672
   16dbc:	movt	r1, #2
   16dc0:	mov	r0, r4
   16dc4:	bl	13d54 <test_empty_monster@@Base+0x11c>
   16dc8:	mov	r0, r4
   16dcc:	bl	161dc <gen_monster@@Base+0x6a0>
   16dd0:	mov	r0, r4
   16dd4:	bl	161b8 <gen_monster@@Base+0x67c>
   16dd8:	movw	r1, #24648	; 0x6048
   16ddc:	movt	r1, #2
   16de0:	mov	r0, r4
   16de4:	bl	13d54 <test_empty_monster@@Base+0x11c>
   16de8:	mov	r0, r4
   16dec:	bl	161dc <gen_monster@@Base+0x6a0>
   16df0:	mov	r0, r4
   16df4:	bl	161b8 <gen_monster@@Base+0x67c>
   16df8:	movw	r5, #24608	; 0x6020
   16dfc:	movt	r5, #2
   16e00:	mov	r0, r4
   16e04:	mov	r1, r5
   16e08:	bl	13d54 <test_empty_monster@@Base+0x11c>
   16e0c:	mov	r0, r4
   16e10:	bl	161dc <gen_monster@@Base+0x6a0>
   16e14:	mov	r0, r4
   16e18:	bl	161b8 <gen_monster@@Base+0x67c>
   16e1c:	movw	r1, #10912	; 0x2aa0
   16e20:	movt	r1, #2
   16e24:	mov	r0, r4
   16e28:	bl	13d54 <test_empty_monster@@Base+0x11c>
   16e2c:	mov	r0, r4
   16e30:	bl	161dc <gen_monster@@Base+0x6a0>
   16e34:	mov	r0, r4
   16e38:	bl	161b8 <gen_monster@@Base+0x67c>
   16e3c:	mov	r0, r4
   16e40:	mov	r1, r5
   16e44:	bl	13d54 <test_empty_monster@@Base+0x11c>
   16e48:	mov	r0, r4
   16e4c:	bl	161dc <gen_monster@@Base+0x6a0>
   16e50:	mov	r0, r4
   16e54:	bl	16214 <gen_monster@@Base+0x6d8>
   16e58:	mov	r0, r4
   16e5c:	bl	16414 <gen_monster@@Base+0x8d8>
   16e60:	add	r1, sp, #12
   16e64:	mov	r0, r4
   16e68:	bl	209cc <flatcc_builder_finalize_aligned_buffer@@Base>
   16e6c:	mov	r4, r0
   16e70:	bl	13208 <verify_empty_monster@@Base+0x180>
   16e74:	mov	r7, r0
   16e78:	bl	15420 <verify_monster@@Base+0xe68>
   16e7c:	cmp	r0, #0
   16e80:	beq	17358 <test_scan@@Base+0x618>
   16e84:	mov	r6, r0
   16e88:	mov	r0, r7
   16e8c:	bl	1518c <verify_monster@@Base+0xbd4>
   16e90:	cmp	r0, #0
   16e94:	beq	17378 <test_scan@@Base+0x638>
   16e98:	mov	r5, r0
   16e9c:	mov	r0, r7
   16ea0:	bl	15500 <verify_monster@@Base+0xf48>
   16ea4:	cmp	r0, #0
   16ea8:	beq	17398 <test_scan@@Base+0x658>
   16eac:	mov	r7, r0
   16eb0:	movw	r1, #24648	; 0x6048
   16eb4:	movt	r1, #2
   16eb8:	mov	r0, r6
   16ebc:	bl	17758 <test_scan@@Base+0xa18>
   16ec0:	cmp	r0, #1
   16ec4:	bne	16f2c <test_scan@@Base+0x1ec>
   16ec8:	mov	r0, r6
   16ecc:	bl	1775c <test_scan@@Base+0xa1c>
   16ed0:	cmp	r0, #1
   16ed4:	bne	16f38 <test_scan@@Base+0x1f8>
   16ed8:	mov	r0, r6
   16edc:	bl	17768 <test_scan@@Base+0xa28>
   16ee0:	cmp	r0, #1
   16ee4:	bne	16f44 <test_scan@@Base+0x204>
   16ee8:	mov	r0, r6
   16eec:	bl	1776c <test_scan@@Base+0xa2c>
   16ef0:	cmp	r0, #1
   16ef4:	bne	16f50 <test_scan@@Base+0x210>
   16ef8:	mvn	r8, #0
   16efc:	movw	r3, #24648	; 0x6048
   16f00:	movt	r3, #2
   16f04:	mov	r0, r6
   16f08:	mov	r1, #2
   16f0c:	mvn	r2, #0
   16f10:	bl	1777c <test_scan@@Base+0xa3c>
   16f14:	cmn	r0, #1
   16f18:	beq	16f74 <test_scan@@Base+0x234>
   16f1c:	movw	r0, #24948	; 0x6174
   16f20:	movt	r0, #2
   16f24:	bl	12ee0 <puts@plt>
   16f28:	b	16f60 <test_scan@@Base+0x220>
   16f2c:	movw	r0, #25030	; 0x61c6
   16f30:	movt	r0, #2
   16f34:	b	16f58 <test_scan@@Base+0x218>
   16f38:	movw	r0, #25029	; 0x61c5
   16f3c:	movt	r0, #2
   16f40:	b	16f58 <test_scan@@Base+0x218>
   16f44:	movw	r0, #24991	; 0x619f
   16f48:	movt	r0, #2
   16f4c:	b	16f58 <test_scan@@Base+0x218>
   16f50:	movw	r0, #24991	; 0x619f
   16f54:	movt	r0, #2
   16f58:	bl	12ee0 <puts@plt>
   16f5c:	mvn	r8, #0
   16f60:	mov	r0, r4
   16f64:	bl	20aac <flatcc_builder_aligned_free@@Base>
   16f68:	mov	r0, r8
   16f6c:	sub	sp, fp, #24
   16f70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16f74:	movw	r1, #11004	; 0x2afc
   16f78:	movt	r1, #2
   16f7c:	mov	r0, r6
   16f80:	bl	17758 <test_scan@@Base+0xa18>
   16f84:	cmn	r0, #1
   16f88:	beq	16f9c <test_scan@@Base+0x25c>
   16f8c:	movw	r0, #23439	; 0x5b8f
   16f90:	movt	r0, #2
   16f94:	bl	12ee0 <puts@plt>
   16f98:	b	16f60 <test_scan@@Base+0x220>
   16f9c:	movw	r1, #9842	; 0x2672
   16fa0:	movt	r1, #2
   16fa4:	mov	r0, r6
   16fa8:	bl	17758 <test_scan@@Base+0xa18>
   16fac:	cmp	r0, #0
   16fb0:	beq	16fc4 <test_scan@@Base+0x284>
   16fb4:	movw	r0, #23405	; 0x5b6d
   16fb8:	movt	r0, #2
   16fbc:	bl	12ee0 <puts@plt>
   16fc0:	b	16f60 <test_scan@@Base+0x220>
   16fc4:	movw	r1, #24608	; 0x6020
   16fc8:	movt	r1, #2
   16fcc:	mov	r0, r6
   16fd0:	bl	17780 <test_scan@@Base+0xa40>
   16fd4:	cmp	r0, #2
   16fd8:	bne	170a8 <test_scan@@Base+0x368>
   16fdc:	movw	r1, #24608	; 0x6020
   16fe0:	movt	r1, #2
   16fe4:	mov	r0, r6
   16fe8:	bl	177e8 <test_scan@@Base+0xaa8>
   16fec:	cmp	r0, #4
   16ff0:	bne	170b8 <test_scan@@Base+0x378>
   16ff4:	movw	r1, #11065	; 0x2b39
   16ff8:	movt	r1, #2
   16ffc:	mov	r0, r6
   17000:	mov	r2, #8
   17004:	bl	17838 <test_scan@@Base+0xaf8>
   17008:	cmp	r0, #4
   1700c:	bne	170c8 <test_scan@@Base+0x388>
   17010:	mov	r0, r6
   17014:	bl	17890 <test_scan@@Base+0xb50>
   17018:	cmp	r0, #2
   1701c:	bne	170d8 <test_scan@@Base+0x398>
   17020:	mvn	r8, #0
   17024:	movw	r3, #24608	; 0x6020
   17028:	movt	r3, #2
   1702c:	mov	r0, r6
   17030:	mov	r1, #2
   17034:	mvn	r2, #0
   17038:	bl	178f8 <test_scan@@Base+0xbb8>
   1703c:	cmp	r0, #2
   17040:	bne	170e8 <test_scan@@Base+0x3a8>
   17044:	mov	r0, r6
   17048:	bl	17974 <test_scan@@Base+0xc34>
   1704c:	cmp	r0, #2
   17050:	bne	170f8 <test_scan@@Base+0x3b8>
   17054:	mvn	r8, #0
   17058:	movw	r3, #24608	; 0x6020
   1705c:	movt	r3, #2
   17060:	mov	r0, r6
   17064:	mov	r1, #3
   17068:	mvn	r2, #0
   1706c:	bl	178f8 <test_scan@@Base+0xbb8>
   17070:	cmp	r0, #4
   17074:	bne	17108 <test_scan@@Base+0x3c8>
   17078:	movw	r3, #11004	; 0x2afc
   1707c:	movt	r3, #2
   17080:	mov	r0, r6
   17084:	mov	r1, #1
   17088:	mov	r2, #3
   1708c:	bl	1777c <test_scan@@Base+0xa3c>
   17090:	cmn	r0, #1
   17094:	beq	17118 <test_scan@@Base+0x3d8>
   17098:	movw	r0, #24819	; 0x60f3
   1709c:	movt	r0, #2
   170a0:	bl	12ee0 <puts@plt>
   170a4:	b	16f60 <test_scan@@Base+0x220>
   170a8:	movw	r0, #24861	; 0x611d
   170ac:	movt	r0, #2
   170b0:	bl	12ee0 <puts@plt>
   170b4:	b	16f60 <test_scan@@Base+0x220>
   170b8:	movw	r0, #24861	; 0x611d
   170bc:	movt	r0, #2
   170c0:	bl	12ee0 <puts@plt>
   170c4:	b	16f60 <test_scan@@Base+0x220>
   170c8:	movw	r0, #24922	; 0x615a
   170cc:	movt	r0, #2
   170d0:	bl	12ee0 <puts@plt>
   170d4:	b	16f60 <test_scan@@Base+0x220>
   170d8:	movw	r0, #24922	; 0x615a
   170dc:	movt	r0, #2
   170e0:	bl	12ee0 <puts@plt>
   170e4:	b	16f60 <test_scan@@Base+0x220>
   170e8:	movw	r0, #24880	; 0x6130
   170ec:	movt	r0, #2
   170f0:	bl	12ee0 <puts@plt>
   170f4:	b	16f60 <test_scan@@Base+0x220>
   170f8:	movw	r0, #24880	; 0x6130
   170fc:	movt	r0, #2
   17100:	bl	12ee0 <puts@plt>
   17104:	b	16f60 <test_scan@@Base+0x220>
   17108:	movw	r0, #24853	; 0x6115
   1710c:	movt	r0, #2
   17110:	bl	12ee0 <puts@plt>
   17114:	b	16f60 <test_scan@@Base+0x220>
   17118:	movw	r3, #9842	; 0x2672
   1711c:	movt	r3, #2
   17120:	mov	r0, r6
   17124:	mov	r1, #1
   17128:	mov	r2, #3
   1712c:	bl	1777c <test_scan@@Base+0xa3c>
   17130:	cmn	r0, #1
   17134:	beq	17148 <test_scan@@Base+0x408>
   17138:	movw	r0, #24786	; 0x60d2
   1713c:	movt	r0, #2
   17140:	bl	12ee0 <puts@plt>
   17144:	b	16f60 <test_scan@@Base+0x220>
   17148:	movw	r3, #24648	; 0x6048
   1714c:	movt	r3, #2
   17150:	mov	r0, r6
   17154:	mov	r1, #1
   17158:	mov	r2, #3
   1715c:	bl	1777c <test_scan@@Base+0xa3c>
   17160:	cmp	r0, #1
   17164:	bne	171b8 <test_scan@@Base+0x478>
   17168:	movw	r3, #24608	; 0x6020
   1716c:	movt	r3, #2
   17170:	mov	r0, r6
   17174:	mov	r1, #1
   17178:	mov	r2, #3
   1717c:	bl	178f8 <test_scan@@Base+0xbb8>
   17180:	cmp	r0, #2
   17184:	bne	171c8 <test_scan@@Base+0x488>
   17188:	movw	r3, #10912	; 0x2aa0
   1718c:	movt	r3, #2
   17190:	mov	r0, r6
   17194:	mov	r1, #1
   17198:	mov	r2, #3
   1719c:	bl	178f8 <test_scan@@Base+0xbb8>
   171a0:	cmn	r0, #1
   171a4:	beq	171d8 <test_scan@@Base+0x498>
   171a8:	movw	r0, #24743	; 0x60a7
   171ac:	movt	r0, #2
   171b0:	bl	12ee0 <puts@plt>
   171b4:	b	16f60 <test_scan@@Base+0x220>
   171b8:	movw	r0, #24618	; 0x602a
   171bc:	movt	r0, #2
   171c0:	bl	12ee0 <puts@plt>
   171c4:	b	16f60 <test_scan@@Base+0x220>
   171c8:	movw	r0, #24578	; 0x6002
   171cc:	movt	r0, #2
   171d0:	bl	12ee0 <puts@plt>
   171d4:	b	16f60 <test_scan@@Base+0x220>
   171d8:	movw	r3, #11004	; 0x2afc
   171dc:	movt	r3, #2
   171e0:	mov	r0, r6
   171e4:	mov	r1, #1
   171e8:	mov	r2, #3
   171ec:	bl	179e4 <test_scan@@Base+0xca4>
   171f0:	cmn	r0, #1
   171f4:	beq	17208 <test_scan@@Base+0x4c8>
   171f8:	movw	r0, #24698	; 0x607a
   171fc:	movt	r0, #2
   17200:	bl	12ee0 <puts@plt>
   17204:	b	16f60 <test_scan@@Base+0x220>
   17208:	movw	r3, #9842	; 0x2672
   1720c:	movt	r3, #2
   17210:	mov	r0, r6
   17214:	mov	r1, #1
   17218:	mov	r2, #3
   1721c:	bl	179e4 <test_scan@@Base+0xca4>
   17220:	cmn	r0, #1
   17224:	beq	17238 <test_scan@@Base+0x4f8>
   17228:	movw	r0, #24654	; 0x604e
   1722c:	movt	r0, #2
   17230:	bl	12ee0 <puts@plt>
   17234:	b	16f60 <test_scan@@Base+0x220>
   17238:	movw	r3, #24648	; 0x6048
   1723c:	movt	r3, #2
   17240:	mov	r0, r6
   17244:	mov	r1, #1
   17248:	mov	r2, #3
   1724c:	bl	179e4 <test_scan@@Base+0xca4>
   17250:	cmp	r0, #1
   17254:	bne	172a8 <test_scan@@Base+0x568>
   17258:	movw	r3, #24608	; 0x6020
   1725c:	movt	r3, #2
   17260:	mov	r0, r6
   17264:	mov	r1, #1
   17268:	mov	r2, #3
   1726c:	bl	179e8 <test_scan@@Base+0xca8>
   17270:	cmp	r0, #2
   17274:	bne	172b8 <test_scan@@Base+0x578>
   17278:	movw	r3, #10912	; 0x2aa0
   1727c:	movt	r3, #2
   17280:	mov	r0, r6
   17284:	mov	r1, #1
   17288:	mov	r2, #3
   1728c:	bl	179e8 <test_scan@@Base+0xca8>
   17290:	cmn	r0, #1
   17294:	beq	172c8 <test_scan@@Base+0x588>
   17298:	movw	r0, #24533	; 0x5fd5
   1729c:	movt	r0, #2
   172a0:	bl	12ee0 <puts@plt>
   172a4:	b	16f60 <test_scan@@Base+0x220>
   172a8:	movw	r0, #24617	; 0x6029
   172ac:	movt	r0, #2
   172b0:	bl	12ee0 <puts@plt>
   172b4:	b	16f60 <test_scan@@Base+0x220>
   172b8:	movw	r0, #24577	; 0x6001
   172bc:	movt	r0, #2
   172c0:	bl	12ee0 <puts@plt>
   172c4:	b	16f60 <test_scan@@Base+0x220>
   172c8:	movw	r3, #9842	; 0x2672
   172cc:	movt	r3, #2
   172d0:	mov	r0, r6
   172d4:	mov	r1, #0
   172d8:	mov	r2, #0
   172dc:	bl	1777c <test_scan@@Base+0xa3c>
   172e0:	cmn	r0, #1
   172e4:	beq	172f8 <test_scan@@Base+0x5b8>
   172e8:	movw	r0, #24501	; 0x5fb5
   172ec:	movt	r0, #2
   172f0:	bl	12ee0 <puts@plt>
   172f4:	b	16f60 <test_scan@@Base+0x220>
   172f8:	movw	r3, #24648	; 0x6048
   172fc:	movt	r3, #2
   17300:	mov	r0, r6
   17304:	mov	r1, #0
   17308:	mov	r2, #0
   1730c:	bl	1777c <test_scan@@Base+0xa3c>
   17310:	cmn	r0, #1
   17314:	beq	17328 <test_scan@@Base+0x5e8>
   17318:	movw	r0, #24471	; 0x5f97
   1731c:	movt	r0, #2
   17320:	bl	12ee0 <puts@plt>
   17324:	b	16f60 <test_scan@@Base+0x220>
   17328:	movw	r3, #24648	; 0x6048
   1732c:	movt	r3, #2
   17330:	mov	r0, r6
   17334:	mov	r1, #1
   17338:	mov	r2, #1
   1733c:	bl	1777c <test_scan@@Base+0xa3c>
   17340:	cmn	r0, #1
   17344:	beq	173b8 <test_scan@@Base+0x678>
   17348:	movw	r0, #24433	; 0x5f71
   1734c:	movt	r0, #2
   17350:	bl	12ee0 <puts@plt>
   17354:	b	16f60 <test_scan@@Base+0x220>
   17358:	movw	r0, #10942	; 0x2abe
   1735c:	movt	r0, #2
   17360:	movw	r1, #9718	; 0x25f6
   17364:	movt	r1, #2
   17368:	movw	r3, #11019	; 0x2b0b
   1736c:	movt	r3, #2
   17370:	movw	r2, #1305	; 0x519
   17374:	bl	12f88 <__assert_fail@plt>
   17378:	movw	r0, #11053	; 0x2b2d
   1737c:	movt	r0, #2
   17380:	movw	r1, #9718	; 0x25f6
   17384:	movt	r1, #2
   17388:	movw	r3, #11019	; 0x2b0b
   1738c:	movt	r3, #2
   17390:	movw	r2, #1307	; 0x51b
   17394:	bl	12f88 <__assert_fail@plt>
   17398:	movw	r0, #11057	; 0x2b31
   1739c:	movt	r0, #2
   173a0:	movw	r1, #9718	; 0x25f6
   173a4:	movt	r1, #2
   173a8:	movw	r3, #11019	; 0x2b0b
   173ac:	movt	r3, #2
   173b0:	movw	r2, #1309	; 0x51d
   173b4:	bl	12f88 <__assert_fail@plt>
   173b8:	mov	r0, r6
   173bc:	bl	1549c <verify_monster@@Base+0xee4>
   173c0:	mov	r1, r0
   173c4:	mvn	r8, #0
   173c8:	movw	r3, #9842	; 0x2672
   173cc:	movt	r3, #2
   173d0:	mov	r0, r6
   173d4:	mvn	r2, #0
   173d8:	bl	1777c <test_scan@@Base+0xa3c>
   173dc:	cmn	r0, #1
   173e0:	beq	173f4 <test_scan@@Base+0x6b4>
   173e4:	movw	r0, #24390	; 0x5f46
   173e8:	movt	r0, #2
   173ec:	bl	12ee0 <puts@plt>
   173f0:	b	16f60 <test_scan@@Base+0x220>
   173f4:	movw	r3, #9842	; 0x2672
   173f8:	movt	r3, #2
   173fc:	mov	r0, r6
   17400:	mov	r1, #0
   17404:	mov	r2, #0
   17408:	bl	179e4 <test_scan@@Base+0xca4>
   1740c:	cmn	r0, #1
   17410:	beq	17424 <test_scan@@Base+0x6e4>
   17414:	movw	r0, #24501	; 0x5fb5
   17418:	movt	r0, #2
   1741c:	bl	12ee0 <puts@plt>
   17420:	b	16f60 <test_scan@@Base+0x220>
   17424:	movw	r3, #24648	; 0x6048
   17428:	movt	r3, #2
   1742c:	mov	r0, r6
   17430:	mov	r1, #0
   17434:	mov	r2, #0
   17438:	bl	179e4 <test_scan@@Base+0xca4>
   1743c:	cmn	r0, #1
   17440:	beq	17454 <test_scan@@Base+0x714>
   17444:	movw	r0, #24471	; 0x5f97
   17448:	movt	r0, #2
   1744c:	bl	12ee0 <puts@plt>
   17450:	b	16f60 <test_scan@@Base+0x220>
   17454:	movw	r3, #24648	; 0x6048
   17458:	movt	r3, #2
   1745c:	mov	r0, r6
   17460:	mov	r1, #1
   17464:	mov	r2, #1
   17468:	bl	179e4 <test_scan@@Base+0xca4>
   1746c:	cmn	r0, #1
   17470:	beq	17484 <test_scan@@Base+0x744>
   17474:	movw	r0, #24433	; 0x5f71
   17478:	movt	r0, #2
   1747c:	bl	12ee0 <puts@plt>
   17480:	b	16f60 <test_scan@@Base+0x220>
   17484:	mov	r0, r6
   17488:	bl	1549c <verify_monster@@Base+0xee4>
   1748c:	mov	r1, r0
   17490:	mvn	r8, #0
   17494:	movw	r3, #9842	; 0x2672
   17498:	movt	r3, #2
   1749c:	mov	r0, r6
   174a0:	mvn	r2, #0
   174a4:	bl	179e4 <test_scan@@Base+0xca4>
   174a8:	cmn	r0, #1
   174ac:	beq	174c0 <test_scan@@Base+0x780>
   174b0:	movw	r0, #24390	; 0x5f46
   174b4:	movt	r0, #2
   174b8:	bl	12ee0 <puts@plt>
   174bc:	b	16f60 <test_scan@@Base+0x220>
   174c0:	movw	r1, #24648	; 0x6048
   174c4:	movt	r1, #2
   174c8:	mov	r0, r6
   174cc:	bl	17a50 <test_scan@@Base+0xd10>
   174d0:	cmp	r0, #1
   174d4:	bne	17500 <test_scan@@Base+0x7c0>
   174d8:	movw	r1, #11004	; 0x2afc
   174dc:	movt	r1, #2
   174e0:	mov	r0, r6
   174e4:	bl	17a50 <test_scan@@Base+0xd10>
   174e8:	cmp	r0, #0
   174ec:	beq	17510 <test_scan@@Base+0x7d0>
   174f0:	movw	r0, #24337	; 0x5f11
   174f4:	movt	r0, #2
   174f8:	bl	12ee0 <puts@plt>
   174fc:	b	16f60 <test_scan@@Base+0x220>
   17500:	movw	r0, #24364	; 0x5f2c
   17504:	movt	r0, #2
   17508:	bl	12ee0 <puts@plt>
   1750c:	b	16f60 <test_scan@@Base+0x220>
   17510:	movw	r1, #9842	; 0x2672
   17514:	movt	r1, #2
   17518:	mov	r0, r6
   1751c:	bl	17a50 <test_scan@@Base+0xd10>
   17520:	cmp	r0, #1
   17524:	bne	17564 <test_scan@@Base+0x824>
   17528:	movw	r1, #24608	; 0x6020
   1752c:	movt	r1, #2
   17530:	mov	r0, r6
   17534:	bl	17a50 <test_scan@@Base+0xd10>
   17538:	cmp	r0, #2
   1753c:	bne	17574 <test_scan@@Base+0x834>
   17540:	mov	r0, r5
   17544:	mov	r1, #6
   17548:	bl	17a98 <test_scan@@Base+0xd58>
   1754c:	cmp	r0, #0
   17550:	beq	17584 <test_scan@@Base+0x844>
   17554:	movw	r0, #24237	; 0x5ead
   17558:	movt	r0, #2
   1755c:	bl	12ee0 <puts@plt>
   17560:	b	16f60 <test_scan@@Base+0x220>
   17564:	movw	r0, #24310	; 0x5ef6
   17568:	movt	r0, #2
   1756c:	bl	12ee0 <puts@plt>
   17570:	b	16f60 <test_scan@@Base+0x220>
   17574:	movw	r0, #24281	; 0x5ed9
   17578:	movt	r0, #2
   1757c:	bl	12ee0 <puts@plt>
   17580:	b	16f60 <test_scan@@Base+0x220>
   17584:	mov	r0, r5
   17588:	mov	r1, #1
   1758c:	bl	17a98 <test_scan@@Base+0xd58>
   17590:	cmp	r0, #2
   17594:	bne	175c0 <test_scan@@Base+0x880>
   17598:	mov	r0, r5
   1759c:	mov	r1, #3
   175a0:	mov	r2, #1
   175a4:	bl	17af4 <test_scan@@Base+0xdb4>
   175a8:	cmn	r0, #1
   175ac:	beq	175d0 <test_scan@@Base+0x890>
   175b0:	movw	r0, #24136	; 0x5e48
   175b4:	movt	r0, #2
   175b8:	bl	12ee0 <puts@plt>
   175bc:	b	16f60 <test_scan@@Base+0x220>
   175c0:	movw	r0, #24192	; 0x5e80
   175c4:	movt	r0, #2
   175c8:	bl	12ee0 <puts@plt>
   175cc:	b	16f60 <test_scan@@Base+0x220>
   175d0:	mov	r0, r5
   175d4:	mov	r1, #5
   175d8:	bl	17a98 <test_scan@@Base+0xd58>
   175dc:	cmn	r0, #1
   175e0:	beq	175f4 <test_scan@@Base+0x8b4>
   175e4:	movw	r0, #23926	; 0x5d76
   175e8:	movt	r0, #2
   175ec:	bl	12ee0 <puts@plt>
   175f0:	b	16f60 <test_scan@@Base+0x220>
   175f4:	mov	r0, r5
   175f8:	mov	r1, #2
   175fc:	bl	17a98 <test_scan@@Base+0xd58>
   17600:	cmp	r0, #6
   17604:	bne	176d4 <test_scan@@Base+0x994>
   17608:	mov	r0, r5
   1760c:	mov	r1, #3
   17610:	bl	17a98 <test_scan@@Base+0xd58>
   17614:	cmp	r0, #3
   17618:	bne	176e4 <test_scan@@Base+0x9a4>
   1761c:	mov	r0, r5
   17620:	mov	r1, #3
   17624:	mov	r2, #3
   17628:	bl	17af4 <test_scan@@Base+0xdb4>
   1762c:	cmp	r0, #3
   17630:	bne	176f4 <test_scan@@Base+0x9b4>
   17634:	mov	r0, r5
   17638:	mov	r1, #4
   1763c:	mov	r2, #3
   17640:	bl	17af4 <test_scan@@Base+0xdb4>
   17644:	cmp	r0, #5
   17648:	bne	17704 <test_scan@@Base+0x9c4>
   1764c:	mov	r0, r5
   17650:	bl	17b50 <test_scan@@Base+0xe10>
   17654:	cmp	r0, #5
   17658:	bne	17714 <test_scan@@Base+0x9d4>
   1765c:	mov	r0, r5
   17660:	bl	17b90 <test_scan@@Base+0xe50>
   17664:	cmp	r0, #3
   17668:	bne	17724 <test_scan@@Base+0x9e4>
   1766c:	mov	r0, r7
   17670:	bl	17be0 <test_scan@@Base+0xea0>
   17674:	mov	r0, r7
   17678:	bl	17c38 <test_scan@@Base+0xef8>
   1767c:	mov	r0, r7
   17680:	bl	17c90 <test_scan@@Base+0xf50>
   17684:	mov	r0, r7
   17688:	bl	17cec <test_scan@@Base+0xfac>
   1768c:	mov	r0, r7
   17690:	bl	17d48 <test_scan@@Base+0x1008>
   17694:	mov	r0, r7
   17698:	bl	17d90 <test_scan@@Base+0x1050>
   1769c:	mov	r0, r7
   176a0:	bl	17dd8 <test_scan@@Base+0x1098>
   176a4:	mov	r0, r7
   176a8:	bl	17e24 <test_scan@@Base+0x10e4>
   176ac:	mov	r0, r6
   176b0:	bl	17e70 <test_scan@@Base+0x1130>
   176b4:	mov	r0, r6
   176b8:	bl	17ebc <test_scan@@Base+0x117c>
   176bc:	mov	r0, r6
   176c0:	bl	17f08 <test_scan@@Base+0x11c8>
   176c4:	mov	r0, r6
   176c8:	bl	17f44 <test_scan@@Base+0x1204>
   176cc:	mov	r8, #0
   176d0:	b	16f60 <test_scan@@Base+0x220>
   176d4:	movw	r0, #24093	; 0x5e1d
   176d8:	movt	r0, #2
   176dc:	bl	12ee0 <puts@plt>
   176e0:	b	16f60 <test_scan@@Base+0x220>
   176e4:	movw	r0, #23926	; 0x5d76
   176e8:	movt	r0, #2
   176ec:	bl	12ee0 <puts@plt>
   176f0:	b	16f60 <test_scan@@Base+0x220>
   176f4:	movw	r0, #24035	; 0x5de3
   176f8:	movt	r0, #2
   176fc:	bl	12ee0 <puts@plt>
   17700:	b	16f60 <test_scan@@Base+0x220>
   17704:	movw	r0, #23975	; 0x5da7
   17708:	movt	r0, #2
   1770c:	bl	12ee0 <puts@plt>
   17710:	b	16f60 <test_scan@@Base+0x220>
   17714:	movw	r0, #23925	; 0x5d75
   17718:	movt	r0, #2
   1771c:	bl	12ee0 <puts@plt>
   17720:	b	16f60 <test_scan@@Base+0x220>
   17724:	movw	r0, #23872	; 0x5d40
   17728:	movt	r0, #2
   1772c:	bl	12ee0 <puts@plt>
   17730:	b	16f60 <test_scan@@Base+0x220>
   17734:	b	1ede8 <flatcc_builder_start_offset_vector@@Base>
   17738:	push	{r4, sl, fp, lr}
   1773c:	add	fp, sp, #8
   17740:	mov	r4, r0
   17744:	bl	1ee9c <flatcc_builder_end_offset_vector@@Base>
   17748:	mov	r1, r0
   1774c:	mov	r0, r4
   17750:	pop	{r4, sl, fp, lr}
   17754:	b	1c90c <main@@Base+0x158c>
   17758:	b	17780 <test_scan@@Base+0xa40>
   1775c:	movw	r1, #24648	; 0x6048
   17760:	movt	r1, #2
   17764:	b	177e8 <test_scan@@Base+0xaa8>
   17768:	b	1cc5c <main@@Base+0x18dc>
   1776c:	movw	r1, #10997	; 0x2af5
   17770:	movt	r1, #2
   17774:	mov	r2, #5
   17778:	b	17838 <test_scan@@Base+0xaf8>
   1777c:	b	178f8 <test_scan@@Base+0xbb8>
   17780:	push	{r4, r5, r6, r7, fp, lr}
   17784:	add	fp, sp, #16
   17788:	mov	r5, r1
   1778c:	mov	r6, r0
   17790:	bl	1549c <verify_monster@@Base+0xee4>
   17794:	mvn	r4, #0
   17798:	cmp	r0, #0
   1779c:	beq	177d8 <test_scan@@Base+0xa98>
   177a0:	mov	r7, #0
   177a4:	mov	r0, r6
   177a8:	mov	r1, r7
   177ac:	bl	154b0 <verify_monster@@Base+0xef8>
   177b0:	bl	15048 <verify_monster@@Base+0xa90>
   177b4:	mov	r1, r5
   177b8:	bl	1cc58 <main@@Base+0x18d8>
   177bc:	cmp	r0, #0
   177c0:	beq	177e0 <test_scan@@Base+0xaa0>
   177c4:	add	r7, r7, #1
   177c8:	mov	r0, r6
   177cc:	bl	1549c <verify_monster@@Base+0xee4>
   177d0:	cmp	r7, r0
   177d4:	bcc	177a4 <test_scan@@Base+0xa64>
   177d8:	mov	r0, r4
   177dc:	pop	{r4, r5, r6, r7, fp, pc}
   177e0:	mov	r0, r7
   177e4:	pop	{r4, r5, r6, r7, fp, pc}
   177e8:	push	{r4, r5, r6, sl, fp, lr}
   177ec:	add	fp, sp, #16
   177f0:	mov	r4, r1
   177f4:	mov	r5, r0
   177f8:	bl	1549c <verify_monster@@Base+0xee4>
   177fc:	sub	r1, r0, #1
   17800:	mov	r6, r1
   17804:	cmn	r1, #1
   17808:	beq	17830 <test_scan@@Base+0xaf0>
   1780c:	mov	r0, r5
   17810:	mov	r1, r6
   17814:	bl	154b0 <verify_monster@@Base+0xef8>
   17818:	bl	15048 <verify_monster@@Base+0xa90>
   1781c:	mov	r1, r4
   17820:	bl	1cc58 <main@@Base+0x18d8>
   17824:	sub	r1, r6, #1
   17828:	cmp	r0, #0
   1782c:	bne	17800 <test_scan@@Base+0xac0>
   17830:	mov	r0, r6
   17834:	pop	{r4, r5, r6, sl, fp, pc}
   17838:	push	{r4, r5, r6, r7, fp, lr}
   1783c:	add	fp, sp, #16
   17840:	mov	r4, r2
   17844:	mov	r5, r1
   17848:	mov	r6, r0
   1784c:	bl	1549c <verify_monster@@Base+0xee4>
   17850:	sub	r1, r0, #1
   17854:	mov	r7, r1
   17858:	cmn	r1, #1
   1785c:	beq	17888 <test_scan@@Base+0xb48>
   17860:	mov	r0, r6
   17864:	mov	r1, r7
   17868:	bl	154b0 <verify_monster@@Base+0xef8>
   1786c:	bl	15048 <verify_monster@@Base+0xa90>
   17870:	mov	r1, r5
   17874:	mov	r2, r4
   17878:	bl	1cc00 <main@@Base+0x1880>
   1787c:	sub	r1, r7, #1
   17880:	cmp	r0, #0
   17884:	bne	17854 <test_scan@@Base+0xb14>
   17888:	mov	r0, r7
   1788c:	pop	{r4, r5, r6, r7, fp, pc}
   17890:	push	{r4, r5, r6, sl, fp, lr}
   17894:	add	fp, sp, #16
   17898:	mov	r4, r0
   1789c:	bl	1549c <verify_monster@@Base+0xee4>
   178a0:	mov	r5, r0
   178a4:	cmp	r0, #3
   178a8:	movcs	r5, #3
   178ac:	movw	r6, #11065	; 0x2b39
   178b0:	movt	r6, #2
   178b4:	cmp	r5, #2
   178b8:	bcc	178ec <test_scan@@Base+0xbac>
   178bc:	sub	r5, r5, #1
   178c0:	mov	r0, r4
   178c4:	mov	r1, r5
   178c8:	bl	154b0 <verify_monster@@Base+0xef8>
   178cc:	bl	15048 <verify_monster@@Base+0xa90>
   178d0:	mov	r1, r6
   178d4:	mov	r2, #8
   178d8:	bl	1cc00 <main@@Base+0x1880>
   178dc:	cmp	r0, #0
   178e0:	bne	178b4 <test_scan@@Base+0xb74>
   178e4:	mov	r0, r5
   178e8:	pop	{r4, r5, r6, sl, fp, pc}
   178ec:	mvn	r5, #0
   178f0:	mov	r0, r5
   178f4:	pop	{r4, r5, r6, sl, fp, pc}
   178f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   178fc:	add	fp, sp, #24
   17900:	mov	r4, r3
   17904:	mov	r6, r2
   17908:	mov	r5, r1
   1790c:	mov	r7, r0
   17910:	bl	1549c <verify_monster@@Base+0xee4>
   17914:	cmp	r0, r6
   17918:	movhi	r0, r6
   1791c:	mvn	r8, #0
   17920:	cmp	r0, r5
   17924:	bls	17964 <test_scan@@Base+0xc24>
   17928:	mov	r0, r7
   1792c:	mov	r1, r5
   17930:	bl	154b0 <verify_monster@@Base+0xef8>
   17934:	bl	15048 <verify_monster@@Base+0xa90>
   17938:	mov	r1, r4
   1793c:	bl	1cc58 <main@@Base+0x18d8>
   17940:	cmp	r0, #0
   17944:	beq	1796c <test_scan@@Base+0xc2c>
   17948:	mov	r0, r7
   1794c:	bl	1549c <verify_monster@@Base+0xee4>
   17950:	cmp	r0, r6
   17954:	movhi	r0, r6
   17958:	add	r5, r5, #1
   1795c:	cmp	r5, r0
   17960:	bcc	17928 <test_scan@@Base+0xbe8>
   17964:	mov	r0, r8
   17968:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1796c:	mov	r0, r5
   17970:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17974:	push	{r4, r5, r6, r7, fp, lr}
   17978:	add	fp, sp, #16
   1797c:	mov	r5, r0
   17980:	bl	1549c <verify_monster@@Base+0xee4>
   17984:	mvn	r4, #0
   17988:	cmp	r0, #3
   1798c:	bcc	179d4 <test_scan@@Base+0xc94>
   17990:	mov	r6, #2
   17994:	movw	r7, #11065	; 0x2b39
   17998:	movt	r7, #2
   1799c:	mov	r0, r5
   179a0:	mov	r1, r6
   179a4:	bl	154b0 <verify_monster@@Base+0xef8>
   179a8:	bl	15048 <verify_monster@@Base+0xa90>
   179ac:	mov	r1, r7
   179b0:	mov	r2, #8
   179b4:	bl	1cc00 <main@@Base+0x1880>
   179b8:	cmp	r0, #0
   179bc:	beq	179dc <test_scan@@Base+0xc9c>
   179c0:	add	r6, r6, #1
   179c4:	mov	r0, r5
   179c8:	bl	1549c <verify_monster@@Base+0xee4>
   179cc:	cmp	r6, r0
   179d0:	bcc	1799c <test_scan@@Base+0xc5c>
   179d4:	mov	r0, r4
   179d8:	pop	{r4, r5, r6, r7, fp, pc}
   179dc:	mov	r0, r6
   179e0:	pop	{r4, r5, r6, r7, fp, pc}
   179e4:	b	179e8 <test_scan@@Base+0xca8>
   179e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   179ec:	add	fp, sp, #24
   179f0:	mov	r4, r3
   179f4:	mov	r8, r2
   179f8:	mov	r5, r1
   179fc:	mov	r6, r0
   17a00:	bl	1549c <verify_monster@@Base+0xee4>
   17a04:	mov	r7, r0
   17a08:	cmp	r0, r8
   17a0c:	movhi	r7, r8
   17a10:	cmp	r7, r5
   17a14:	bls	17a44 <test_scan@@Base+0xd04>
   17a18:	sub	r7, r7, #1
   17a1c:	mov	r0, r6
   17a20:	mov	r1, r7
   17a24:	bl	154b0 <verify_monster@@Base+0xef8>
   17a28:	bl	15048 <verify_monster@@Base+0xa90>
   17a2c:	mov	r1, r4
   17a30:	bl	1cc58 <main@@Base+0x18d8>
   17a34:	cmp	r0, #0
   17a38:	bne	17a10 <test_scan@@Base+0xcd0>
   17a3c:	mov	r0, r7
   17a40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a44:	mvn	r7, #0
   17a48:	mov	r0, r7
   17a4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a50:	push	{r4, r5, r6, sl, fp, lr}
   17a54:	add	fp, sp, #16
   17a58:	mov	r4, r1
   17a5c:	mov	r5, r0
   17a60:	bl	17758 <test_scan@@Base+0xa18>
   17a64:	mov	r6, #0
   17a68:	cmn	r0, #1
   17a6c:	beq	17a90 <test_scan@@Base+0xd50>
   17a70:	add	r1, r0, #1
   17a74:	mov	r0, r5
   17a78:	mvn	r2, #0
   17a7c:	mov	r3, r4
   17a80:	bl	1777c <test_scan@@Base+0xa3c>
   17a84:	add	r6, r6, #1
   17a88:	cmn	r0, #1
   17a8c:	bne	17a70 <test_scan@@Base+0xd30>
   17a90:	mov	r0, r6
   17a94:	pop	{r4, r5, r6, sl, fp, pc}
   17a98:	push	{r4, r5, r6, r7, fp, lr}
   17a9c:	add	fp, sp, #16
   17aa0:	mov	r5, r1
   17aa4:	mov	r6, r0
   17aa8:	bl	15208 <verify_monster@@Base+0xc50>
   17aac:	mvn	r4, #0
   17ab0:	cmp	r0, #0
   17ab4:	beq	17ae4 <test_scan@@Base+0xda4>
   17ab8:	mov	r7, #0
   17abc:	mov	r0, r6
   17ac0:	mov	r1, r7
   17ac4:	bl	1520c <verify_monster@@Base+0xc54>
   17ac8:	cmp	r0, r5
   17acc:	beq	17aec <test_scan@@Base+0xdac>
   17ad0:	add	r7, r7, #1
   17ad4:	mov	r0, r6
   17ad8:	bl	15208 <verify_monster@@Base+0xc50>
   17adc:	cmp	r7, r0
   17ae0:	bcc	17abc <test_scan@@Base+0xd7c>
   17ae4:	mov	r0, r4
   17ae8:	pop	{r4, r5, r6, r7, fp, pc}
   17aec:	mov	r0, r7
   17af0:	pop	{r4, r5, r6, r7, fp, pc}
   17af4:	push	{r4, r5, r6, r7, fp, lr}
   17af8:	add	fp, sp, #16
   17afc:	mov	r6, r2
   17b00:	mov	r5, r1
   17b04:	mov	r7, r0
   17b08:	bl	15208 <verify_monster@@Base+0xc50>
   17b0c:	mvn	r4, #0
   17b10:	cmp	r0, r5
   17b14:	bls	17b40 <test_scan@@Base+0xe00>
   17b18:	mov	r0, r7
   17b1c:	mov	r1, r5
   17b20:	bl	1520c <verify_monster@@Base+0xc54>
   17b24:	cmp	r0, r6
   17b28:	beq	17b48 <test_scan@@Base+0xe08>
   17b2c:	add	r5, r5, #1
   17b30:	mov	r0, r7
   17b34:	bl	15208 <verify_monster@@Base+0xc50>
   17b38:	cmp	r5, r0
   17b3c:	bcc	17b18 <test_scan@@Base+0xdd8>
   17b40:	mov	r0, r4
   17b44:	pop	{r4, r5, r6, r7, fp, pc}
   17b48:	mov	r0, r5
   17b4c:	pop	{r4, r5, r6, r7, fp, pc}
   17b50:	push	{r4, r5, fp, lr}
   17b54:	add	fp, sp, #8
   17b58:	mov	r4, r0
   17b5c:	bl	15208 <verify_monster@@Base+0xc50>
   17b60:	sub	r1, r0, #1
   17b64:	mov	r5, r1
   17b68:	cmn	r1, #1
   17b6c:	beq	17b88 <test_scan@@Base+0xe48>
   17b70:	mov	r0, r4
   17b74:	mov	r1, r5
   17b78:	bl	1520c <verify_monster@@Base+0xc54>
   17b7c:	sub	r1, r5, #1
   17b80:	cmp	r0, #3
   17b84:	bne	17b64 <test_scan@@Base+0xe24>
   17b88:	mov	r0, r5
   17b8c:	pop	{r4, r5, fp, pc}
   17b90:	push	{r4, r5, fp, lr}
   17b94:	add	fp, sp, #8
   17b98:	mov	r4, r0
   17b9c:	bl	15208 <verify_monster@@Base+0xc50>
   17ba0:	mov	r5, r0
   17ba4:	cmp	r0, #4
   17ba8:	movcs	r5, #4
   17bac:	cmp	r5, #2
   17bb0:	bcc	17bd4 <test_scan@@Base+0xe94>
   17bb4:	sub	r5, r5, #1
   17bb8:	mov	r0, r4
   17bbc:	mov	r1, r5
   17bc0:	bl	1520c <verify_monster@@Base+0xc54>
   17bc4:	cmp	r0, #3
   17bc8:	bne	17bac <test_scan@@Base+0xe6c>
   17bcc:	mov	r0, r5
   17bd0:	pop	{r4, r5, fp, pc}
   17bd4:	mvn	r5, #0
   17bd8:	mov	r0, r5
   17bdc:	pop	{r4, r5, fp, pc}
   17be0:	push	{r4, r5, r6, sl, fp, lr}
   17be4:	add	fp, sp, #16
   17be8:	mov	r4, r0
   17bec:	bl	1557c <verify_monster@@Base+0xfc4>
   17bf0:	cmp	r0, #0
   17bf4:	beq	17c34 <test_scan@@Base+0xef4>
   17bf8:	mov	r5, #0
   17bfc:	movw	r6, #10099	; 0x2773
   17c00:	movt	r6, #2
   17c04:	mov	r0, r4
   17c08:	mov	r1, r5
   17c0c:	bl	15590 <verify_monster@@Base+0xfd8>
   17c10:	mov	r1, r6
   17c14:	bl	1cc58 <main@@Base+0x18d8>
   17c18:	cmp	r0, #0
   17c1c:	beq	17c34 <test_scan@@Base+0xef4>
   17c20:	add	r5, r5, #1
   17c24:	mov	r0, r4
   17c28:	bl	1557c <verify_monster@@Base+0xfc4>
   17c2c:	cmp	r5, r0
   17c30:	bcc	17c04 <test_scan@@Base+0xec4>
   17c34:	pop	{r4, r5, r6, sl, fp, pc}
   17c38:	push	{r4, r5, r6, sl, fp, lr}
   17c3c:	add	fp, sp, #16
   17c40:	mov	r4, r0
   17c44:	bl	1557c <verify_monster@@Base+0xfc4>
   17c48:	cmp	r0, #0
   17c4c:	beq	17c8c <test_scan@@Base+0xf4c>
   17c50:	mov	r5, #0
   17c54:	movw	r6, #10099	; 0x2773
   17c58:	movt	r6, #2
   17c5c:	mov	r0, r4
   17c60:	mov	r1, r5
   17c64:	bl	15590 <verify_monster@@Base+0xfd8>
   17c68:	mov	r1, r6
   17c6c:	bl	1cc58 <main@@Base+0x18d8>
   17c70:	cmp	r0, #0
   17c74:	beq	17c8c <test_scan@@Base+0xf4c>
   17c78:	add	r5, r5, #1
   17c7c:	mov	r0, r4
   17c80:	bl	1557c <verify_monster@@Base+0xfc4>
   17c84:	cmp	r5, r0
   17c88:	bcc	17c5c <test_scan@@Base+0xf1c>
   17c8c:	pop	{r4, r5, r6, sl, fp, pc}
   17c90:	push	{r4, r5, r6, sl, fp, lr}
   17c94:	add	fp, sp, #16
   17c98:	mov	r4, r0
   17c9c:	bl	1557c <verify_monster@@Base+0xfc4>
   17ca0:	cmp	r0, #0
   17ca4:	beq	17ce8 <test_scan@@Base+0xfa8>
   17ca8:	mov	r5, #0
   17cac:	movw	r6, #10099	; 0x2773
   17cb0:	movt	r6, #2
   17cb4:	mov	r0, r4
   17cb8:	mov	r1, r5
   17cbc:	bl	15590 <verify_monster@@Base+0xfd8>
   17cc0:	mov	r1, r6
   17cc4:	mov	r2, #4
   17cc8:	bl	1cc00 <main@@Base+0x1880>
   17ccc:	cmp	r0, #0
   17cd0:	beq	17ce8 <test_scan@@Base+0xfa8>
   17cd4:	add	r5, r5, #1
   17cd8:	mov	r0, r4
   17cdc:	bl	1557c <verify_monster@@Base+0xfc4>
   17ce0:	cmp	r5, r0
   17ce4:	bcc	17cb4 <test_scan@@Base+0xf74>
   17ce8:	pop	{r4, r5, r6, sl, fp, pc}
   17cec:	push	{r4, r5, r6, sl, fp, lr}
   17cf0:	add	fp, sp, #16
   17cf4:	mov	r4, r0
   17cf8:	bl	1557c <verify_monster@@Base+0xfc4>
   17cfc:	cmp	r0, #0
   17d00:	beq	17d44 <test_scan@@Base+0x1004>
   17d04:	mov	r5, #0
   17d08:	movw	r6, #10099	; 0x2773
   17d0c:	movt	r6, #2
   17d10:	mov	r0, r4
   17d14:	mov	r1, r5
   17d18:	bl	15590 <verify_monster@@Base+0xfd8>
   17d1c:	mov	r1, r6
   17d20:	mov	r2, #4
   17d24:	bl	1cc00 <main@@Base+0x1880>
   17d28:	cmp	r0, #0
   17d2c:	beq	17d44 <test_scan@@Base+0x1004>
   17d30:	add	r5, r5, #1
   17d34:	mov	r0, r4
   17d38:	bl	1557c <verify_monster@@Base+0xfc4>
   17d3c:	cmp	r5, r0
   17d40:	bcc	17d10 <test_scan@@Base+0xfd0>
   17d44:	pop	{r4, r5, r6, sl, fp, pc}
   17d48:	push	{r4, r5, r6, sl, fp, lr}
   17d4c:	add	fp, sp, #16
   17d50:	mov	r4, r0
   17d54:	bl	1557c <verify_monster@@Base+0xfc4>
   17d58:	sub	r5, r0, #1
   17d5c:	movw	r6, #10099	; 0x2773
   17d60:	movt	r6, #2
   17d64:	cmn	r5, #1
   17d68:	beq	17d8c <test_scan@@Base+0x104c>
   17d6c:	mov	r0, r4
   17d70:	mov	r1, r5
   17d74:	bl	15590 <verify_monster@@Base+0xfd8>
   17d78:	mov	r1, r6
   17d7c:	bl	1cc58 <main@@Base+0x18d8>
   17d80:	sub	r5, r5, #1
   17d84:	cmp	r0, #0
   17d88:	bne	17d64 <test_scan@@Base+0x1024>
   17d8c:	pop	{r4, r5, r6, sl, fp, pc}
   17d90:	push	{r4, r5, r6, sl, fp, lr}
   17d94:	add	fp, sp, #16
   17d98:	mov	r4, r0
   17d9c:	bl	1557c <verify_monster@@Base+0xfc4>
   17da0:	sub	r5, r0, #1
   17da4:	movw	r6, #10099	; 0x2773
   17da8:	movt	r6, #2
   17dac:	cmn	r5, #1
   17db0:	beq	17dd4 <test_scan@@Base+0x1094>
   17db4:	mov	r0, r4
   17db8:	mov	r1, r5
   17dbc:	bl	15590 <verify_monster@@Base+0xfd8>
   17dc0:	mov	r1, r6
   17dc4:	bl	1cc58 <main@@Base+0x18d8>
   17dc8:	sub	r5, r5, #1
   17dcc:	cmp	r0, #0
   17dd0:	bne	17dac <test_scan@@Base+0x106c>
   17dd4:	pop	{r4, r5, r6, sl, fp, pc}
   17dd8:	push	{r4, r5, r6, sl, fp, lr}
   17ddc:	add	fp, sp, #16
   17de0:	mov	r4, r0
   17de4:	bl	1557c <verify_monster@@Base+0xfc4>
   17de8:	sub	r5, r0, #1
   17dec:	movw	r6, #10099	; 0x2773
   17df0:	movt	r6, #2
   17df4:	cmn	r5, #1
   17df8:	beq	17e20 <test_scan@@Base+0x10e0>
   17dfc:	mov	r0, r4
   17e00:	mov	r1, r5
   17e04:	bl	15590 <verify_monster@@Base+0xfd8>
   17e08:	mov	r1, r6
   17e0c:	mov	r2, #4
   17e10:	bl	1cc00 <main@@Base+0x1880>
   17e14:	sub	r5, r5, #1
   17e18:	cmp	r0, #0
   17e1c:	bne	17df4 <test_scan@@Base+0x10b4>
   17e20:	pop	{r4, r5, r6, sl, fp, pc}
   17e24:	push	{r4, r5, r6, sl, fp, lr}
   17e28:	add	fp, sp, #16
   17e2c:	mov	r4, r0
   17e30:	bl	1557c <verify_monster@@Base+0xfc4>
   17e34:	sub	r5, r0, #1
   17e38:	movw	r6, #10099	; 0x2773
   17e3c:	movt	r6, #2
   17e40:	cmn	r5, #1
   17e44:	beq	17e6c <test_scan@@Base+0x112c>
   17e48:	mov	r0, r4
   17e4c:	mov	r1, r5
   17e50:	bl	15590 <verify_monster@@Base+0xfd8>
   17e54:	mov	r1, r6
   17e58:	mov	r2, #4
   17e5c:	bl	1cc00 <main@@Base+0x1880>
   17e60:	sub	r5, r5, #1
   17e64:	cmp	r0, #0
   17e68:	bne	17e40 <test_scan@@Base+0x1100>
   17e6c:	pop	{r4, r5, r6, sl, fp, pc}
   17e70:	push	{r4, r5, fp, lr}
   17e74:	add	fp, sp, #8
   17e78:	mov	r4, r0
   17e7c:	bl	1549c <verify_monster@@Base+0xee4>
   17e80:	cmp	r0, #0
   17e84:	popeq	{r4, r5, fp, pc}
   17e88:	mov	r5, #0
   17e8c:	mov	r0, r4
   17e90:	mov	r1, r5
   17e94:	bl	154b0 <verify_monster@@Base+0xef8>
   17e98:	bl	13248 <verify_empty_monster@@Base+0x1c0>
   17e9c:	cmp	r0, #13
   17ea0:	beq	17eb8 <test_scan@@Base+0x1178>
   17ea4:	add	r5, r5, #1
   17ea8:	mov	r0, r4
   17eac:	bl	1549c <verify_monster@@Base+0xee4>
   17eb0:	cmp	r5, r0
   17eb4:	bcc	17e8c <test_scan@@Base+0x114c>
   17eb8:	pop	{r4, r5, fp, pc}
   17ebc:	push	{r4, r5, fp, lr}
   17ec0:	add	fp, sp, #8
   17ec4:	mov	r4, r0
   17ec8:	bl	1549c <verify_monster@@Base+0xee4>
   17ecc:	cmp	r0, #2
   17ed0:	popcc	{r4, r5, fp, pc}
   17ed4:	mov	r5, #1
   17ed8:	mov	r0, r4
   17edc:	mov	r1, r5
   17ee0:	bl	154b0 <verify_monster@@Base+0xef8>
   17ee4:	bl	13248 <verify_empty_monster@@Base+0x1c0>
   17ee8:	cmp	r0, #42	; 0x2a
   17eec:	beq	17f04 <test_scan@@Base+0x11c4>
   17ef0:	add	r5, r5, #1
   17ef4:	mov	r0, r4
   17ef8:	bl	1549c <verify_monster@@Base+0xee4>
   17efc:	cmp	r5, r0
   17f00:	bcc	17ed8 <test_scan@@Base+0x1198>
   17f04:	pop	{r4, r5, fp, pc}
   17f08:	push	{r4, r5, fp, lr}
   17f0c:	add	fp, sp, #8
   17f10:	mov	r4, r0
   17f14:	bl	1549c <verify_monster@@Base+0xee4>
   17f18:	sub	r5, r0, #1
   17f1c:	cmn	r5, #1
   17f20:	beq	17f40 <test_scan@@Base+0x1200>
   17f24:	mov	r0, r4
   17f28:	mov	r1, r5
   17f2c:	bl	154b0 <verify_monster@@Base+0xef8>
   17f30:	bl	13248 <verify_empty_monster@@Base+0x1c0>
   17f34:	sub	r5, r5, #1
   17f38:	cmp	r0, #1
   17f3c:	bne	17f1c <test_scan@@Base+0x11dc>
   17f40:	pop	{r4, r5, fp, pc}
   17f44:	push	{r4, r5, fp, lr}
   17f48:	add	fp, sp, #8
   17f4c:	mov	r4, r0
   17f50:	bl	1549c <verify_monster@@Base+0xee4>
   17f54:	cmp	r0, #2
   17f58:	movcs	r0, #2
   17f5c:	sub	r5, r0, #1
   17f60:	cmn	r5, #1
   17f64:	beq	17f84 <test_scan@@Base+0x1244>
   17f68:	mov	r0, r4
   17f6c:	mov	r1, r5
   17f70:	bl	154b0 <verify_monster@@Base+0xef8>
   17f74:	bl	13248 <verify_empty_monster@@Base+0x1c0>
   17f78:	sub	r5, r5, #1
   17f7c:	cmp	r0, #42	; 0x2a
   17f80:	bne	17f60 <test_scan@@Base+0x1220>
   17f84:	pop	{r4, r5, fp, pc}

00017f88 <test_basic_sort@@Base>:
   17f88:	push	{r4, r5, r6, r7, fp, lr}
   17f8c:	add	fp, sp, #16
   17f90:	sub	sp, sp, #16
   17f94:	mov	r4, r0
   17f98:	movw	r0, #1027	; 0x403
   17f9c:	movt	r0, #515	; 0x203
   17fa0:	str	r0, [sp, #7]
   17fa4:	movw	r0, #1798	; 0x706
   17fa8:	movt	r0, #769	; 0x301
   17fac:	str	r0, [sp, #4]
   17fb0:	mov	r0, r4
   17fb4:	bl	1db9c <flatcc_builder_reset@@Base>
   17fb8:	mov	r0, r4
   17fbc:	bl	16010 <gen_monster@@Base+0x4d4>
   17fc0:	movw	r1, #9281	; 0x2441
   17fc4:	movt	r1, #2
   17fc8:	mov	r0, r4
   17fcc:	bl	13d54 <test_empty_monster@@Base+0x11c>
   17fd0:	add	r1, sp, #4
   17fd4:	mov	r0, r4
   17fd8:	mov	r2, #7
   17fdc:	bl	160c4 <gen_monster@@Base+0x588>
   17fe0:	mov	r0, r4
   17fe4:	bl	16414 <gen_monster@@Base+0x8d8>
   17fe8:	add	r1, sp, #12
   17fec:	mov	r0, r4
   17ff0:	bl	20898 <flatcc_builder_get_direct_buffer@@Base>
   17ff4:	bl	13208 <verify_empty_monster@@Base+0x180>
   17ff8:	bl	1518c <verify_monster@@Base+0xbd4>
   17ffc:	mov	r4, r0
   18000:	bl	180dc <test_basic_sort@@Base+0x154>
   18004:	mov	r0, r4
   18008:	bl	15208 <verify_monster@@Base+0xc50>
   1800c:	cmp	r0, #7
   18010:	bne	180bc <test_basic_sort@@Base+0x134>
   18014:	mov	r0, r4
   18018:	bl	15208 <verify_monster@@Base+0xc50>
   1801c:	cmp	r0, #0
   18020:	beq	1808c <test_basic_sort@@Base+0x104>
   18024:	mov	r5, #0
   18028:	movw	r6, #27520	; 0x6b80
   1802c:	movt	r6, #2
   18030:	mov	r7, #0
   18034:	mov	r0, r4
   18038:	mov	r1, r5
   1803c:	bl	1520c <verify_monster@@Base+0xc54>
   18040:	mov	r1, r0
   18044:	ldrb	r0, [r6, r5]
   18048:	cmp	r1, r0
   1804c:	bne	18098 <test_basic_sort@@Base+0x110>
   18050:	mov	r0, r4
   18054:	bl	180e0 <test_basic_sort@@Base+0x158>
   18058:	uxtb	r1, r7
   1805c:	cmp	r1, #3
   18060:	mov	r1, r7
   18064:	movweq	r1, #2
   18068:	uxtb	r1, r1
   1806c:	cmp	r0, r1
   18070:	bne	180a4 <test_basic_sort@@Base+0x11c>
   18074:	add	r7, r7, #1
   18078:	uxtb	r5, r7
   1807c:	mov	r0, r4
   18080:	bl	15208 <verify_monster@@Base+0xc50>
   18084:	cmp	r0, r5
   18088:	bhi	18034 <test_basic_sort@@Base+0xac>
   1808c:	mov	r0, #0
   18090:	sub	sp, fp, #16
   18094:	pop	{r4, r5, r6, r7, fp, pc}
   18098:	movw	r0, #25091	; 0x6203
   1809c:	movt	r0, #2
   180a0:	b	180ac <test_basic_sort@@Base+0x124>
   180a4:	movw	r0, #25061	; 0x61e5
   180a8:	movt	r0, #2
   180ac:	bl	12ee0 <puts@plt>
   180b0:	mvn	r0, #0
   180b4:	sub	sp, fp, #16
   180b8:	pop	{r4, r5, r6, r7, fp, pc}
   180bc:	movw	r0, #11076	; 0x2b44
   180c0:	movt	r0, #2
   180c4:	movw	r1, #9718	; 0x25f6
   180c8:	movt	r1, #2
   180cc:	movw	r3, #11122	; 0x2b72
   180d0:	movt	r3, #2
   180d4:	mov	r2, #1552	; 0x610
   180d8:	bl	12f88 <__assert_fail@plt>
   180dc:	b	1cccc <main@@Base+0x194c>
   180e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   180e4:	add	fp, sp, #24
   180e8:	mov	r8, r1
   180ec:	mov	r6, r0
   180f0:	bl	15208 <verify_monster@@Base+0xc50>
   180f4:	mvn	r5, #0
   180f8:	cmp	r0, #0
   180fc:	beq	1814c <test_basic_sort@@Base+0x1c4>
   18100:	mov	r5, #0
   18104:	subs	r4, r0, #1
   18108:	beq	18138 <test_basic_sort@@Base+0x1b0>
   1810c:	sub	r0, r4, r5
   18110:	add	r7, r5, r0, lsr #1
   18114:	mov	r0, r6
   18118:	mov	r1, r7
   1811c:	bl	1520c <verify_monster@@Base+0xc54>
   18120:	cmp	r0, r8
   18124:	movcs	r4, r7
   18128:	addcc	r5, r7, #1
   1812c:	cmp	r4, r5
   18130:	bhi	1810c <test_basic_sort@@Base+0x184>
   18134:	bne	18154 <test_basic_sort@@Base+0x1cc>
   18138:	mov	r0, r6
   1813c:	mov	r1, r5
   18140:	bl	1520c <verify_monster@@Base+0xc54>
   18144:	cmp	r0, r8
   18148:	mvnne	r5, #0
   1814c:	mov	r0, r5
   18150:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18154:	mvn	r5, #0
   18158:	mov	r0, r5
   1815c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00018160 <test_clone_slice@@Base>:
   18160:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18164:	add	fp, sp, #28
   18168:	sub	sp, sp, #20
   1816c:	mov	r5, r0
   18170:	mov	r0, #256	; 0x100
   18174:	str	r0, [sp, #11]
   18178:	str	r0, [sp, #8]
   1817c:	mov	r0, r5
   18180:	bl	1db9c <flatcc_builder_reset@@Base>
   18184:	mov	r0, r5
   18188:	bl	16010 <gen_monster@@Base+0x4d4>
   1818c:	movw	r1, #25598	; 0x63fe
   18190:	movt	r1, #2
   18194:	mov	r0, r5
   18198:	bl	13d54 <test_empty_monster@@Base+0x11c>
   1819c:	add	r1, sp, #8
   181a0:	mov	r0, r5
   181a4:	bl	186bc <test_clone_slice@@Base+0x55c>
   181a8:	mov	r0, r5
   181ac:	bl	160e4 <gen_monster@@Base+0x5a8>
   181b0:	mov	r0, r5
   181b4:	mov	r1, #2
   181b8:	bl	160e8 <gen_monster@@Base+0x5ac>
   181bc:	mov	r1, #44	; 0x2c
   181c0:	strh	r1, [r0, #4]
   181c4:	mov	r1, #22
   181c8:	strh	r1, [r0]
   181cc:	mov	r0, r5
   181d0:	bl	16164 <gen_monster@@Base+0x628>
   181d4:	mov	r0, r5
   181d8:	bl	16078 <gen_monster@@Base+0x53c>
   181dc:	movw	r1, #13107	; 0x3333
   181e0:	movt	r1, #49705	; 0xc229
   181e4:	str	r1, [r0]
   181e8:	mov	r0, r5
   181ec:	bl	16414 <gen_monster@@Base+0x8d8>
   181f0:	add	r1, sp, #16
   181f4:	mov	r0, r5
   181f8:	bl	209cc <flatcc_builder_finalize_aligned_buffer@@Base>
   181fc:	mov	r8, r0
   18200:	movw	sl, #36976	; 0x9070
   18204:	movt	sl, #3
   18208:	ldr	r3, [sl]
   1820c:	ldr	r2, [sp, #16]
   18210:	movw	r0, #11162	; 0x2b9a
   18214:	movt	r0, #2
   18218:	mov	r1, r8
   1821c:	bl	1364c <test_type_aliases@@Base+0x254>
   18220:	mov	r0, r8
   18224:	bl	13208 <verify_empty_monster@@Base+0x180>
   18228:	mov	r6, r0
   1822c:	mov	r0, r5
   18230:	bl	1db9c <flatcc_builder_reset@@Base>
   18234:	mov	r0, r5
   18238:	bl	16010 <gen_monster@@Base+0x4d4>
   1823c:	mov	r0, r6
   18240:	bl	15048 <verify_monster@@Base+0xa90>
   18244:	mov	r7, r0
   18248:	mov	r0, r6
   1824c:	bl	1564c <verify_monster@@Base+0x1094>
   18250:	cmp	r0, #0
   18254:	beq	18658 <test_clone_slice@@Base+0x4f8>
   18258:	mov	r4, r0
   1825c:	mov	r0, r6
   18260:	bl	1532c <verify_monster@@Base+0xd74>
   18264:	cmp	r0, #0
   18268:	beq	18678 <test_clone_slice@@Base+0x518>
   1826c:	mov	r9, r0
   18270:	mov	r0, r5
   18274:	mov	r1, r7
   18278:	bl	186dc <test_clone_slice@@Base+0x57c>
   1827c:	mov	r0, r5
   18280:	bl	17734 <test_scan@@Base+0x9f4>
   18284:	mov	r0, r5
   18288:	mov	r1, r7
   1828c:	bl	186fc <test_clone_slice@@Base+0x59c>
   18290:	mov	r0, r5
   18294:	mov	r1, r7
   18298:	mov	r2, #4
   1829c:	mov	r3, #20
   182a0:	bl	1871c <test_clone_slice@@Base+0x5bc>
   182a4:	mov	r0, r5
   182a8:	mov	r1, r7
   182ac:	mov	r2, #0
   182b0:	mov	r3, #3
   182b4:	bl	1871c <test_clone_slice@@Base+0x5bc>
   182b8:	mov	r0, r5
   182bc:	bl	17738 <test_scan@@Base+0x9f8>
   182c0:	mov	r0, r5
   182c4:	bl	13d4c <test_empty_monster@@Base+0x114>
   182c8:	mov	r0, r5
   182cc:	mov	r1, r7
   182d0:	bl	1873c <test_clone_slice@@Base+0x5dc>
   182d4:	mov	r0, r5
   182d8:	mov	r1, r4
   182dc:	bl	18764 <test_clone_slice@@Base+0x604>
   182e0:	mov	r0, r5
   182e4:	mov	r1, r9
   182e8:	bl	18784 <test_clone_slice@@Base+0x624>
   182ec:	mov	r0, r5
   182f0:	bl	13d74 <test_empty_monster@@Base+0x13c>
   182f4:	mov	r1, r0
   182f8:	mov	r0, sp
   182fc:	bl	162f4 <gen_monster@@Base+0x7b8>
   18300:	ldm	sp, {r1, r2}
   18304:	mov	r0, r5
   18308:	bl	16284 <gen_monster@@Base+0x748>
   1830c:	mov	r0, r5
   18310:	mov	r1, r4
   18314:	bl	187a4 <test_clone_slice@@Base+0x644>
   18318:	mov	r0, r6
   1831c:	bl	13388 <verify_empty_monster@@Base+0x300>
   18320:	mov	r1, r0
   18324:	mov	r0, r5
   18328:	bl	187c4 <test_clone_slice@@Base+0x664>
   1832c:	mov	r0, r5
   18330:	mov	r1, r9
   18334:	bl	187f0 <test_clone_slice@@Base+0x690>
   18338:	mov	r0, r5
   1833c:	bl	16414 <gen_monster@@Base+0x8d8>
   18340:	add	r1, sp, #16
   18344:	mov	r0, r5
   18348:	bl	20898 <flatcc_builder_get_direct_buffer@@Base>
   1834c:	mov	r4, r0
   18350:	ldr	r3, [sl]
   18354:	ldr	r2, [sp, #16]
   18358:	movw	r0, #11241	; 0x2be9
   1835c:	movt	r0, #2
   18360:	mov	r1, r4
   18364:	bl	1364c <test_type_aliases@@Base+0x254>
   18368:	mov	r0, r4
   1836c:	bl	13208 <verify_empty_monster@@Base+0x180>
   18370:	mov	r5, r0
   18374:	bl	15048 <verify_monster@@Base+0xa90>
   18378:	movw	r1, #25598	; 0x63fe
   1837c:	movt	r1, #2
   18380:	bl	12e8c <strcmp@plt>
   18384:	cmp	r0, #0
   18388:	beq	18398 <test_clone_slice@@Base+0x238>
   1838c:	movw	r0, #25609	; 0x6409
   18390:	movt	r0, #2
   18394:	b	18418 <test_clone_slice@@Base+0x2b8>
   18398:	mov	r0, r5
   1839c:	bl	15500 <verify_monster@@Base+0xf48>
   183a0:	mov	r4, r0
   183a4:	mov	r1, #0
   183a8:	bl	15590 <verify_monster@@Base+0xfd8>
   183ac:	movw	r1, #25598	; 0x63fe
   183b0:	movt	r1, #2
   183b4:	bl	12e8c <strcmp@plt>
   183b8:	cmp	r0, #0
   183bc:	beq	183cc <test_clone_slice@@Base+0x26c>
   183c0:	movw	r0, #25580	; 0x63ec
   183c4:	movt	r0, #2
   183c8:	b	18418 <test_clone_slice@@Base+0x2b8>
   183cc:	mov	r0, r4
   183d0:	mov	r1, #1
   183d4:	bl	15590 <verify_monster@@Base+0xfd8>
   183d8:	bl	150c8 <verify_monster@@Base+0xb10>
   183dc:	cmp	r0, #6
   183e0:	bne	18410 <test_clone_slice@@Base+0x2b0>
   183e4:	mov	r0, r4
   183e8:	mov	r1, #1
   183ec:	bl	15590 <verify_monster@@Base+0xfd8>
   183f0:	movw	r1, #25537	; 0x63c1
   183f4:	movt	r1, #2
   183f8:	bl	12e8c <strcmp@plt>
   183fc:	cmp	r0, #0
   18400:	beq	18434 <test_clone_slice@@Base+0x2d4>
   18404:	movw	r0, #25519	; 0x63af
   18408:	movt	r0, #2
   1840c:	b	18418 <test_clone_slice@@Base+0x2b8>
   18410:	movw	r0, #25544	; 0x63c8
   18414:	movt	r0, #2
   18418:	bl	12ee0 <puts@plt>
   1841c:	mvn	r4, #0
   18420:	mov	r0, r8
   18424:	bl	20aac <flatcc_builder_aligned_free@@Base>
   18428:	mov	r0, r4
   1842c:	sub	sp, fp, #28
   18430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18434:	mov	r0, r4
   18438:	mov	r1, #2
   1843c:	bl	15590 <verify_monster@@Base+0xfd8>
   18440:	bl	150c8 <verify_monster@@Base+0xb10>
   18444:	cmp	r0, #3
   18448:	bne	18478 <test_clone_slice@@Base+0x318>
   1844c:	mov	r0, r4
   18450:	mov	r1, #2
   18454:	bl	15590 <verify_monster@@Base+0xfd8>
   18458:	movw	r1, #25483	; 0x638b
   1845c:	movt	r1, #2
   18460:	bl	12e8c <strcmp@plt>
   18464:	cmp	r0, #0
   18468:	beq	18484 <test_clone_slice@@Base+0x324>
   1846c:	movw	r0, #25465	; 0x6379
   18470:	movt	r0, #2
   18474:	b	18418 <test_clone_slice@@Base+0x2b8>
   18478:	movw	r0, #25487	; 0x638f
   1847c:	movt	r0, #2
   18480:	b	18418 <test_clone_slice@@Base+0x2b8>
   18484:	mov	r0, r5
   18488:	bl	15784 <verify_monster@@Base+0x11cc>
   1848c:	cmp	r0, #0
   18490:	beq	18698 <test_clone_slice@@Base+0x538>
   18494:	mov	r6, r0
   18498:	bl	15048 <verify_monster@@Base+0xa90>
   1849c:	movw	r1, #25600	; 0x6400
   184a0:	movt	r1, #2
   184a4:	bl	12e8c <strcmp@plt>
   184a8:	cmp	r0, #0
   184ac:	beq	184c0 <test_clone_slice@@Base+0x360>
   184b0:	movw	r0, #11264	; 0x2c00
   184b4:	movt	r0, #2
   184b8:	bl	12e98 <printf@plt>
   184bc:	b	1841c <test_clone_slice@@Base+0x2bc>
   184c0:	mov	r0, r6
   184c4:	bl	1564c <verify_monster@@Base+0x1094>
   184c8:	mov	r7, r0
   184cc:	bl	156c8 <verify_monster@@Base+0x1110>
   184d0:	cmp	r0, #7
   184d4:	bne	18500 <test_clone_slice@@Base+0x3a0>
   184d8:	add	r4, sp, #8
   184dc:	mov	r0, r7
   184e0:	mov	r1, r4
   184e4:	mov	r2, #7
   184e8:	bl	12f10 <bcmp@plt>
   184ec:	cmp	r0, #0
   184f0:	beq	1850c <test_clone_slice@@Base+0x3ac>
   184f4:	movw	r0, #25407	; 0x633f
   184f8:	movt	r0, #2
   184fc:	b	18418 <test_clone_slice@@Base+0x2b8>
   18500:	movw	r0, #25437	; 0x635d
   18504:	movt	r0, #2
   18508:	b	18418 <test_clone_slice@@Base+0x2b8>
   1850c:	mov	r0, r5
   18510:	bl	1564c <verify_monster@@Base+0x1094>
   18514:	mov	r7, r0
   18518:	bl	156c8 <verify_monster@@Base+0x1110>
   1851c:	cmp	r0, #4
   18520:	bne	18548 <test_clone_slice@@Base+0x3e8>
   18524:	orr	r1, r4, #3
   18528:	mov	r0, r7
   1852c:	mov	r2, #4
   18530:	bl	12f10 <bcmp@plt>
   18534:	cmp	r0, #0
   18538:	beq	18554 <test_clone_slice@@Base+0x3f4>
   1853c:	movw	r0, #25349	; 0x6305
   18540:	movt	r0, #2
   18544:	b	18418 <test_clone_slice@@Base+0x2b8>
   18548:	movw	r0, #25379	; 0x6323
   1854c:	movt	r0, #2
   18550:	b	18418 <test_clone_slice@@Base+0x2b8>
   18554:	mov	r0, r5
   18558:	bl	13388 <verify_empty_monster@@Base+0x300>
   1855c:	vldr	s0, [pc, #340]	; 186b8 <test_clone_slice@@Base+0x558>
   18560:	vldr	s2, [r0]
   18564:	vcmp.f32	s2, s0
   18568:	vmrs	APSR_nzcv, fpscr
   1856c:	beq	1857c <test_clone_slice@@Base+0x41c>
   18570:	movw	r0, #25324	; 0x62ec
   18574:	movt	r0, #2
   18578:	b	18418 <test_clone_slice@@Base+0x2b8>
   1857c:	mov	r0, r5
   18580:	bl	1532c <verify_monster@@Base+0xd74>
   18584:	mov	r4, r0
   18588:	bl	153a8 <verify_monster@@Base+0xdf0>
   1858c:	cmp	r0, #2
   18590:	bne	1861c <test_clone_slice@@Base+0x4bc>
   18594:	mov	r0, r4
   18598:	mov	r1, #0
   1859c:	bl	153bc <verify_monster@@Base+0xe04>
   185a0:	bl	153fc <verify_monster@@Base+0xe44>
   185a4:	cmp	r0, #22
   185a8:	bne	18628 <test_clone_slice@@Base+0x4c8>
   185ac:	mov	r0, r4
   185b0:	mov	r1, #0
   185b4:	bl	153bc <verify_monster@@Base+0xe04>
   185b8:	ldrh	r0, [r0]
   185bc:	cmp	r0, #22
   185c0:	bne	18634 <test_clone_slice@@Base+0x4d4>
   185c4:	mov	r0, r4
   185c8:	mov	r1, #1
   185cc:	bl	153bc <verify_monster@@Base+0xe04>
   185d0:	bl	153fc <verify_monster@@Base+0xe44>
   185d4:	cmp	r0, #44	; 0x2c
   185d8:	bne	18640 <test_clone_slice@@Base+0x4e0>
   185dc:	mov	r0, r6
   185e0:	bl	1532c <verify_monster@@Base+0xd74>
   185e4:	mov	r5, r0
   185e8:	bl	153a8 <verify_monster@@Base+0xdf0>
   185ec:	cmp	r0, #1
   185f0:	bne	1864c <test_clone_slice@@Base+0x4ec>
   185f4:	mov	r4, #0
   185f8:	mov	r0, r5
   185fc:	mov	r1, #0
   18600:	bl	153bc <verify_monster@@Base+0xe04>
   18604:	bl	153fc <verify_monster@@Base+0xe44>
   18608:	cmp	r0, #44	; 0x2c
   1860c:	beq	18420 <test_clone_slice@@Base+0x2c0>
   18610:	movw	r0, #25112	; 0x6218
   18614:	movt	r0, #2
   18618:	b	18418 <test_clone_slice@@Base+0x2b8>
   1861c:	movw	r0, #25273	; 0x62b9
   18620:	movt	r0, #2
   18624:	b	18418 <test_clone_slice@@Base+0x2b8>
   18628:	movw	r0, #25246	; 0x629e
   1862c:	movt	r0, #2
   18630:	b	18418 <test_clone_slice@@Base+0x2b8>
   18634:	movw	r0, #25204	; 0x6274
   18638:	movt	r0, #2
   1863c:	b	18418 <test_clone_slice@@Base+0x2b8>
   18640:	movw	r0, #25177	; 0x6259
   18644:	movt	r0, #2
   18648:	b	18418 <test_clone_slice@@Base+0x2b8>
   1864c:	movw	r0, #25148	; 0x623c
   18650:	movt	r0, #2
   18654:	b	18418 <test_clone_slice@@Base+0x2b8>
   18658:	movw	r0, #11229	; 0x2bdd
   1865c:	movt	r0, #2
   18660:	movw	r1, #9718	; 0x25f6
   18664:	movt	r1, #2
   18668:	movw	r3, #11188	; 0x2bb4
   1866c:	movt	r3, #2
   18670:	movw	r2, #1606	; 0x646
   18674:	bl	12f88 <__assert_fail@plt>
   18678:	movw	r0, #11235	; 0x2be3
   1867c:	movt	r0, #2
   18680:	movw	r1, #9718	; 0x25f6
   18684:	movt	r1, #2
   18688:	movw	r3, #11188	; 0x2bb4
   1868c:	movt	r3, #2
   18690:	movw	r2, #1608	; 0x648
   18694:	bl	12f88 <__assert_fail@plt>
   18698:	movw	r0, #9714	; 0x25f2
   1869c:	movt	r0, #2
   186a0:	movw	r1, #9718	; 0x25f6
   186a4:	movt	r1, #2
   186a8:	movw	r3, #11188	; 0x2bb4
   186ac:	movt	r3, #2
   186b0:	mov	r2, #1664	; 0x680
   186b4:	bl	12f88 <__assert_fail@plt>
   186b8:	eorgt	r3, r9, #-872415232	; 0xcc000000
   186bc:	push	{r4, sl, fp, lr}
   186c0:	add	fp, sp, #8
   186c4:	mov	r4, r0
   186c8:	bl	1cdd8 <main@@Base+0x1a58>
   186cc:	mov	r1, r0
   186d0:	mov	r0, r4
   186d4:	pop	{r4, sl, fp, lr}
   186d8:	b	1c944 <main@@Base+0x15c4>
   186dc:	push	{r4, sl, fp, lr}
   186e0:	add	fp, sp, #8
   186e4:	mov	r4, r0
   186e8:	bl	1ce08 <main@@Base+0x1a88>
   186ec:	mov	r1, r0
   186f0:	mov	r0, r4
   186f4:	pop	{r4, sl, fp, lr}
   186f8:	b	16188 <gen_monster@@Base+0x64c>
   186fc:	push	{r4, sl, fp, lr}
   18700:	add	fp, sp, #8
   18704:	mov	r4, r0
   18708:	bl	1ce08 <main@@Base+0x1a88>
   1870c:	mov	r1, r0
   18710:	mov	r0, r4
   18714:	pop	{r4, sl, fp, lr}
   18718:	b	1ce34 <main@@Base+0x1ab4>
   1871c:	push	{r4, sl, fp, lr}
   18720:	add	fp, sp, #8
   18724:	mov	r4, r0
   18728:	bl	1ce40 <main@@Base+0x1ac0>
   1872c:	mov	r1, r0
   18730:	mov	r0, r4
   18734:	pop	{r4, sl, fp, lr}
   18738:	b	1ce34 <main@@Base+0x1ab4>
   1873c:	push	{r4, sl, fp, lr}
   18740:	add	fp, sp, #8
   18744:	mov	r4, r0
   18748:	mov	r2, #2
   1874c:	mov	r3, #20
   18750:	bl	1ce40 <main@@Base+0x1ac0>
   18754:	mov	r1, r0
   18758:	mov	r0, r4
   1875c:	pop	{r4, sl, fp, lr}
   18760:	b	16188 <gen_monster@@Base+0x64c>
   18764:	push	{r4, sl, fp, lr}
   18768:	add	fp, sp, #8
   1876c:	mov	r4, r0
   18770:	bl	1ce84 <main@@Base+0x1b04>
   18774:	mov	r1, r0
   18778:	mov	r0, r4
   1877c:	pop	{r4, sl, fp, lr}
   18780:	b	1c944 <main@@Base+0x15c4>
   18784:	push	{r4, sl, fp, lr}
   18788:	add	fp, sp, #8
   1878c:	mov	r4, r0
   18790:	bl	1cecc <main@@Base+0x1b4c>
   18794:	mov	r1, r0
   18798:	mov	r0, r4
   1879c:	pop	{r4, sl, fp, lr}
   187a0:	b	1c8a8 <main@@Base+0x1528>
   187a4:	push	{r4, sl, fp, lr}
   187a8:	add	fp, sp, #8
   187ac:	mov	r4, r0
   187b0:	bl	1cf40 <main@@Base+0x1bc0>
   187b4:	mov	r1, r0
   187b8:	mov	r0, r4
   187bc:	pop	{r4, sl, fp, lr}
   187c0:	b	1c944 <main@@Base+0x15c4>
   187c4:	push	{fp, lr}
   187c8:	mov	fp, sp
   187cc:	sub	sp, sp, #8
   187d0:	mov	r2, r1
   187d4:	mov	r1, #16
   187d8:	str	r1, [sp]
   187dc:	mov	r1, #0
   187e0:	mov	r3, #32
   187e4:	bl	206f0 <flatcc_builder_table_add_copy@@Base>
   187e8:	mov	sp, fp
   187ec:	pop	{fp, pc}
   187f0:	push	{r4, sl, fp, lr}
   187f4:	add	fp, sp, #8
   187f8:	mov	r4, r0
   187fc:	bl	1cfac <main@@Base+0x1c2c>
   18800:	mov	r1, r0
   18804:	mov	r0, r4
   18808:	pop	{r4, sl, fp, lr}
   1880c:	b	1c8a8 <main@@Base+0x1528>

00018810 <test_create_add_field@@Base>:
   18810:	push	{r4, r5, r6, sl, fp, lr}
   18814:	add	fp, sp, #16
   18818:	sub	sp, sp, #8
   1881c:	mov	r5, r0
   18820:	bl	1db9c <flatcc_builder_reset@@Base>
   18824:	mov	r0, r5
   18828:	bl	16010 <gen_monster@@Base+0x4d4>
   1882c:	movw	r1, #9281	; 0x2441
   18830:	movt	r1, #2
   18834:	mov	r0, r5
   18838:	bl	13d54 <test_empty_monster@@Base+0x11c>
   1883c:	movw	r1, #11312	; 0x2c30
   18840:	movt	r1, #2
   18844:	mov	r0, r5
   18848:	bl	16234 <gen_monster@@Base+0x6f8>
   1884c:	mov	r1, r0
   18850:	mov	r0, r5
   18854:	bl	188e4 <test_create_add_field@@Base+0xd4>
   18858:	mov	r4, #0
   1885c:	mov	r0, r5
   18860:	mov	r1, #0
   18864:	bl	18904 <test_create_add_field@@Base+0xf4>
   18868:	mov	r0, r5
   1886c:	bl	16414 <gen_monster@@Base+0x8d8>
   18870:	add	r1, sp, #4
   18874:	mov	r0, r5
   18878:	bl	209cc <flatcc_builder_finalize_aligned_buffer@@Base>
   1887c:	mov	r5, r0
   18880:	bl	13208 <verify_empty_monster@@Base+0x180>
   18884:	mov	r6, r0
   18888:	bl	1892c <test_create_add_field@@Base+0x11c>
   1888c:	cmp	r0, #0
   18890:	beq	188a0 <test_create_add_field@@Base+0x90>
   18894:	movw	r0, #25654	; 0x6436
   18898:	movt	r0, #2
   1889c:	b	188c8 <test_create_add_field@@Base+0xb8>
   188a0:	mov	r0, r6
   188a4:	bl	1598c <verify_monster@@Base+0x13d4>
   188a8:	bl	18994 <test_create_add_field@@Base+0x184>
   188ac:	mvn	r2, #99	; 0x63
   188b0:	eor	r0, r0, r2
   188b4:	mvn	r1, r1
   188b8:	orrs	r0, r0, r1
   188bc:	beq	188d0 <test_create_add_field@@Base+0xc0>
   188c0:	movw	r0, #25635	; 0x6423
   188c4:	movt	r0, #2
   188c8:	bl	12ee0 <puts@plt>
   188cc:	mvn	r4, #0
   188d0:	mov	r0, r5
   188d4:	bl	20aac <flatcc_builder_aligned_free@@Base>
   188d8:	mov	r0, r4
   188dc:	sub	sp, fp, #16
   188e0:	pop	{r4, r5, r6, sl, fp, pc}
   188e4:	push	{r4, sl, fp, lr}
   188e8:	add	fp, sp, #8
   188ec:	mov	r4, r0
   188f0:	bl	1cff4 <main@@Base+0x1c74>
   188f4:	mov	r1, r0
   188f8:	mov	r0, r4
   188fc:	pop	{r4, sl, fp, lr}
   18900:	b	1c990 <main@@Base+0x1610>
   18904:	push	{r4, sl, fp, lr}
   18908:	add	fp, sp, #8
   1890c:	cmp	r1, #0
   18910:	popeq	{r4, sl, fp, pc}
   18914:	mov	r4, r1
   18918:	mov	r1, #12
   1891c:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   18920:	cmp	r0, #0
   18924:	strne	r4, [r0]
   18928:	pop	{r4, sl, fp, pc}
   1892c:	push	{r4, sl, fp, lr}
   18930:	add	fp, sp, #8
   18934:	cmp	r0, #0
   18938:	beq	18974 <test_create_add_field@@Base+0x164>
   1893c:	mov	r4, r0
   18940:	bl	1b61c <main@@Base+0x29c>
   18944:	sub	r4, r4, r0
   18948:	mov	r0, r4
   1894c:	bl	1b624 <main@@Base+0x2a4>
   18950:	mov	r1, r0
   18954:	mov	r0, #0
   18958:	cmp	r1, #30
   1895c:	popcc	{r4, sl, fp, pc}
   18960:	add	r0, r4, #28
   18964:	bl	1b624 <main@@Base+0x2a4>
   18968:	cmp	r0, #0
   1896c:	movwne	r0, #1
   18970:	pop	{r4, sl, fp, pc}
   18974:	movw	r0, #12550	; 0x3106
   18978:	movt	r0, #2
   1897c:	movw	r1, #12588	; 0x312c
   18980:	movt	r1, #2
   18984:	movw	r3, #17207	; 0x4337
   18988:	movt	r3, #2
   1898c:	mov	r2, #716	; 0x2cc
   18990:	bl	12f88 <__assert_fail@plt>
   18994:	push	{r4, r5, fp, lr}
   18998:	add	fp, sp, #8
   1899c:	cmp	r0, #0
   189a0:	beq	189e8 <test_create_add_field@@Base+0x1d8>
   189a4:	mov	r4, r0
   189a8:	bl	1b61c <main@@Base+0x29c>
   189ac:	sub	r5, r4, r0
   189b0:	mov	r0, r5
   189b4:	bl	1b624 <main@@Base+0x2a4>
   189b8:	cmp	r0, #8
   189bc:	bcc	189dc <test_create_add_field@@Base+0x1cc>
   189c0:	add	r0, r5, #6
   189c4:	bl	1b624 <main@@Base+0x2a4>
   189c8:	cmp	r0, #0
   189cc:	beq	189dc <test_create_add_field@@Base+0x1cc>
   189d0:	add	r0, r4, r0
   189d4:	pop	{r4, r5, fp, lr}
   189d8:	b	1bcdc <main@@Base+0x95c>
   189dc:	mov	r0, #0
   189e0:	mov	r1, #0
   189e4:	pop	{r4, r5, fp, pc}
   189e8:	movw	r0, #12550	; 0x3106
   189ec:	movt	r0, #2
   189f0:	movw	r1, #12588	; 0x312c
   189f4:	movt	r1, #2
   189f8:	movw	r3, #17283	; 0x4383
   189fc:	movt	r3, #2
   18a00:	mov	r2, #608	; 0x260
   18a04:	bl	12f88 <__assert_fail@plt>

00018a08 <test_union_vector@@Base>:
   18a08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a0c:	add	fp, sp, #24
   18a10:	sub	sp, sp, #24
   18a14:	mov	r4, r0
   18a18:	bl	1db9c <flatcc_builder_reset@@Base>
   18a1c:	mov	r0, r4
   18a20:	bl	16010 <gen_monster@@Base+0x4d4>
   18a24:	movw	r1, #11318	; 0x2c36
   18a28:	movt	r1, #2
   18a2c:	mov	r0, r4
   18a30:	bl	13d54 <test_empty_monster@@Base+0x11c>
   18a34:	mov	r0, r4
   18a38:	bl	18c58 <test_union_vector@@Base+0x250>
   18a3c:	mov	r5, r0
   18a40:	mov	r0, r4
   18a44:	bl	18c80 <test_union_vector@@Base+0x278>
   18a48:	add	r0, sp, #12
   18a4c:	mov	r1, r5
   18a50:	bl	18c88 <test_union_vector@@Base+0x280>
   18a54:	ldr	r1, [sp, #12]
   18a58:	ldr	r2, [sp, #16]
   18a5c:	mov	r0, r4
   18a60:	bl	18c84 <test_union_vector@@Base+0x27c>
   18a64:	add	r0, sp, #4
   18a68:	mov	r1, r4
   18a6c:	bl	18c98 <test_union_vector@@Base+0x290>
   18a70:	ldmib	sp, {r5, r6}
   18a74:	mov	r0, r4
   18a78:	bl	18ca8 <test_union_vector@@Base+0x2a0>
   18a7c:	mov	r0, r4
   18a80:	mov	r1, r5
   18a84:	mov	r2, r6
   18a88:	bl	18cac <test_union_vector@@Base+0x2a4>
   18a8c:	mov	r0, r4
   18a90:	bl	18cfc <test_union_vector@@Base+0x2f4>
   18a94:	mov	r0, r4
   18a98:	bl	16414 <gen_monster@@Base+0x8d8>
   18a9c:	add	r1, sp, #20
   18aa0:	mov	r0, r4
   18aa4:	bl	209cc <flatcc_builder_finalize_aligned_buffer@@Base>
   18aa8:	mov	r4, r0
   18aac:	ldr	r1, [sp, #20]
   18ab0:	bl	13dd4 <test_empty_monster@@Base+0x19c>
   18ab4:	cmp	r0, #0
   18ab8:	beq	18adc <test_union_vector@@Base+0xd4>
   18abc:	bl	21280 <flatcc_verify_error_string@@Base>
   18ac0:	mov	r1, r0
   18ac4:	movw	r0, #11325	; 0x2c3d
   18ac8:	movt	r0, #2
   18acc:	bl	12e98 <printf@plt>
   18ad0:	mvn	r0, #0
   18ad4:	sub	sp, fp, #24
   18ad8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18adc:	mov	r0, r4
   18ae0:	bl	13208 <verify_empty_monster@@Base+0x180>
   18ae4:	mov	r5, r0
   18ae8:	bl	15714 <verify_monster@@Base+0x115c>
   18aec:	cmp	r0, #4
   18af0:	bne	18b24 <test_union_vector@@Base+0x11c>
   18af4:	mov	r0, r5
   18af8:	bl	15784 <verify_monster@@Base+0x11cc>
   18afc:	cmp	r0, #0
   18b00:	beq	18b14 <test_union_vector@@Base+0x10c>
   18b04:	mov	r6, r0
   18b08:	bl	18d24 <test_union_vector@@Base+0x31c>
   18b0c:	cmp	r0, #0
   18b10:	beq	18b44 <test_union_vector@@Base+0x13c>
   18b14:	movw	r0, #25699	; 0x6463
   18b18:	movt	r0, #2
   18b1c:	bl	12ee0 <puts@plt>
   18b20:	b	18b30 <test_union_vector@@Base+0x128>
   18b24:	movw	r0, #11385	; 0x2c79
   18b28:	movt	r0, #2
   18b2c:	bl	12e98 <printf@plt>
   18b30:	mov	r0, r4
   18b34:	bl	20aac <flatcc_builder_aligned_free@@Base>
   18b38:	mov	r0, #0
   18b3c:	sub	sp, fp, #24
   18b40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b44:	mov	r0, r6
   18b48:	bl	18d8c <test_union_vector@@Base+0x384>
   18b4c:	mov	r5, r0
   18b50:	mov	r0, r6
   18b54:	bl	18e08 <test_union_vector@@Base+0x400>
   18b58:	mov	r7, r0
   18b5c:	mov	r0, r5
   18b60:	bl	18e84 <test_union_vector@@Base+0x47c>
   18b64:	cmp	r0, #1
   18b68:	bne	18c08 <test_union_vector@@Base+0x200>
   18b6c:	mov	r0, r5
   18b70:	mov	r1, #0
   18b74:	bl	18e88 <test_union_vector@@Base+0x480>
   18b78:	cmp	r0, #2
   18b7c:	bne	18c14 <test_union_vector@@Base+0x20c>
   18b80:	mov	r0, r7
   18b84:	mov	r1, #0
   18b88:	bl	18ed0 <test_union_vector@@Base+0x4c8>
   18b8c:	cmp	r0, #0
   18b90:	beq	18c20 <test_union_vector@@Base+0x218>
   18b94:	mov	r7, r0
   18b98:	bl	18f20 <test_union_vector@@Base+0x518>
   18b9c:	cmp	r0, #2
   18ba0:	bne	18c2c <test_union_vector@@Base+0x224>
   18ba4:	add	r0, sp, #4
   18ba8:	mov	r1, r6
   18bac:	bl	18f90 <test_union_vector@@Base+0x588>
   18bb0:	ldmib	sp, {r6, r8}
   18bb4:	mov	r0, r6
   18bb8:	mov	r1, r8
   18bbc:	bl	18ffc <test_union_vector@@Base+0x5f4>
   18bc0:	cmp	r0, #1
   18bc4:	bne	18c40 <test_union_vector@@Base+0x238>
   18bc8:	add	r0, sp, #4
   18bcc:	mov	r1, r6
   18bd0:	mov	r2, r8
   18bd4:	bl	19000 <test_union_vector@@Base+0x5f8>
   18bd8:	ldr	r8, [sp, #8]
   18bdc:	ldrb	r6, [sp, #4]
   18be0:	mov	r0, r5
   18be4:	mov	r1, #0
   18be8:	bl	18e88 <test_union_vector@@Base+0x480>
   18bec:	cmp	r6, r0
   18bf0:	bne	18c4c <test_union_vector@@Base+0x244>
   18bf4:	cmp	r8, r7
   18bf8:	beq	18b30 <test_union_vector@@Base+0x128>
   18bfc:	movw	r0, #25755	; 0x649b
   18c00:	movt	r0, #2
   18c04:	b	18b1c <test_union_vector@@Base+0x114>
   18c08:	movw	r0, #25915	; 0x653b
   18c0c:	movt	r0, #2
   18c10:	b	18b1c <test_union_vector@@Base+0x114>
   18c14:	movw	r0, #25870	; 0x650e
   18c18:	movt	r0, #2
   18c1c:	b	18b1c <test_union_vector@@Base+0x114>
   18c20:	movw	r0, #25739	; 0x648b
   18c24:	movt	r0, #2
   18c28:	b	18b1c <test_union_vector@@Base+0x114>
   18c2c:	mov	r1, r0
   18c30:	movw	r0, #11419	; 0x2c9b
   18c34:	movt	r0, #2
   18c38:	bl	12e98 <printf@plt>
   18c3c:	b	18b30 <test_union_vector@@Base+0x128>
   18c40:	movw	r0, #25802	; 0x64ca
   18c44:	movt	r0, #2
   18c48:	b	18b1c <test_union_vector@@Base+0x114>
   18c4c:	movw	r0, #25777	; 0x64b1
   18c50:	movt	r0, #2
   18c54:	b	18b1c <test_union_vector@@Base+0x114>
   18c58:	push	{r4, sl, fp, lr}
   18c5c:	add	fp, sp, #8
   18c60:	mov	r4, r0
   18c64:	bl	1d100 <main@@Base+0x1d80>
   18c68:	cmp	r0, #0
   18c6c:	movne	r0, #0
   18c70:	popne	{r4, sl, fp, pc}
   18c74:	mov	r0, r4
   18c78:	pop	{r4, sl, fp, lr}
   18c7c:	b	1d108 <main@@Base+0x1d88>
   18c80:	b	20168 <flatcc_builder_start_union_vector@@Base>
   18c84:	b	2037c <flatcc_builder_union_vector_push@@Base>
   18c88:	str	r1, [r0, #4]
   18c8c:	mov	r1, #2
   18c90:	strb	r1, [r0]
   18c94:	bx	lr
   18c98:	push	{fp, lr}
   18c9c:	mov	fp, sp
   18ca0:	bl	201c8 <flatcc_builder_end_union_vector@@Base>
   18ca4:	pop	{fp, pc}
   18ca8:	b	1d158 <main@@Base+0x1dd8>
   18cac:	push	{r4, r5, r6, sl, fp, lr}
   18cb0:	add	fp, sp, #16
   18cb4:	cmp	r1, #0
   18cb8:	movne	r4, r2
   18cbc:	cmpne	r2, #0
   18cc0:	bne	18cc8 <test_union_vector@@Base+0x2c0>
   18cc4:	pop	{r4, r5, r6, sl, fp, pc}
   18cc8:	mov	r6, r1
   18ccc:	mov	r5, r0
   18cd0:	mov	r1, #2
   18cd4:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   18cd8:	cmp	r0, #0
   18cdc:	beq	18cc4 <test_union_vector@@Base+0x2bc>
   18ce0:	str	r6, [r0]
   18ce4:	mov	r0, r5
   18ce8:	mov	r1, #3
   18cec:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   18cf0:	cmp	r0, #0
   18cf4:	strne	r4, [r0]
   18cf8:	pop	{r4, r5, r6, sl, fp, pc}
   18cfc:	push	{r4, sl, fp, lr}
   18d00:	add	fp, sp, #8
   18d04:	mov	r4, r0
   18d08:	bl	1d160 <main@@Base+0x1de0>
   18d0c:	cmp	r0, #0
   18d10:	popeq	{r4, sl, fp, pc}
   18d14:	mov	r1, r0
   18d18:	mov	r0, r4
   18d1c:	pop	{r4, sl, fp, lr}
   18d20:	b	1d1b0 <main@@Base+0x1e30>
   18d24:	push	{r4, sl, fp, lr}
   18d28:	add	fp, sp, #8
   18d2c:	cmp	r0, #0
   18d30:	beq	18d6c <test_union_vector@@Base+0x364>
   18d34:	mov	r4, r0
   18d38:	bl	1b61c <main@@Base+0x29c>
   18d3c:	sub	r4, r4, r0
   18d40:	mov	r0, r4
   18d44:	bl	1b624 <main@@Base+0x2a4>
   18d48:	mov	r1, r0
   18d4c:	mov	r0, #0
   18d50:	cmp	r1, #12
   18d54:	popcc	{r4, sl, fp, pc}
   18d58:	add	r0, r4, #10
   18d5c:	bl	1b624 <main@@Base+0x2a4>
   18d60:	cmp	r0, #0
   18d64:	movwne	r0, #1
   18d68:	pop	{r4, sl, fp, pc}
   18d6c:	movw	r0, #12550	; 0x3106
   18d70:	movt	r0, #2
   18d74:	movw	r1, #12588	; 0x312c
   18d78:	movt	r1, #2
   18d7c:	movw	r3, #17890	; 0x45e2
   18d80:	movt	r3, #2
   18d84:	movw	r2, #621	; 0x26d
   18d88:	bl	12f88 <__assert_fail@plt>
   18d8c:	push	{r4, r5, r6, sl, fp, lr}
   18d90:	add	fp, sp, #16
   18d94:	cmp	r0, #0
   18d98:	beq	18de8 <test_union_vector@@Base+0x3e0>
   18d9c:	mov	r4, r0
   18da0:	bl	1b61c <main@@Base+0x29c>
   18da4:	sub	r6, r4, r0
   18da8:	mov	r0, r6
   18dac:	bl	1b624 <main@@Base+0x2a4>
   18db0:	mov	r5, #0
   18db4:	cmp	r0, #10
   18db8:	bcc	18de0 <test_union_vector@@Base+0x3d8>
   18dbc:	add	r0, r6, #8
   18dc0:	bl	1b624 <main@@Base+0x2a4>
   18dc4:	cmp	r0, #0
   18dc8:	beq	18de0 <test_union_vector@@Base+0x3d8>
   18dcc:	add	r4, r4, r0
   18dd0:	mov	r0, r4
   18dd4:	bl	1b610 <main@@Base+0x290>
   18dd8:	add	r0, r4, r0
   18ddc:	add	r5, r0, #4
   18de0:	mov	r0, r5
   18de4:	pop	{r4, r5, r6, sl, fp, pc}
   18de8:	movw	r0, #12550	; 0x3106
   18dec:	movt	r0, #2
   18df0:	movw	r1, #12588	; 0x312c
   18df4:	movt	r1, #2
   18df8:	movw	r3, #17960	; 0x4628
   18dfc:	movt	r3, #2
   18e00:	movw	r2, #621	; 0x26d
   18e04:	bl	12f88 <__assert_fail@plt>
   18e08:	push	{r4, r5, r6, sl, fp, lr}
   18e0c:	add	fp, sp, #16
   18e10:	cmp	r0, #0
   18e14:	beq	18e64 <test_union_vector@@Base+0x45c>
   18e18:	mov	r4, r0
   18e1c:	bl	1b61c <main@@Base+0x29c>
   18e20:	sub	r6, r4, r0
   18e24:	mov	r0, r6
   18e28:	bl	1b624 <main@@Base+0x2a4>
   18e2c:	mov	r5, #0
   18e30:	cmp	r0, #12
   18e34:	bcc	18e5c <test_union_vector@@Base+0x454>
   18e38:	add	r0, r6, #10
   18e3c:	bl	1b624 <main@@Base+0x2a4>
   18e40:	cmp	r0, #0
   18e44:	beq	18e5c <test_union_vector@@Base+0x454>
   18e48:	add	r4, r4, r0
   18e4c:	mov	r0, r4
   18e50:	bl	1b610 <main@@Base+0x290>
   18e54:	add	r0, r4, r0
   18e58:	add	r5, r0, #4
   18e5c:	mov	r0, r5
   18e60:	pop	{r4, r5, r6, sl, fp, pc}
   18e64:	movw	r0, #12550	; 0x3106
   18e68:	movt	r0, #2
   18e6c:	movw	r1, #12588	; 0x312c
   18e70:	movt	r1, #2
   18e74:	movw	r3, #18045	; 0x467d
   18e78:	movt	r3, #2
   18e7c:	movw	r2, #621	; 0x26d
   18e80:	bl	12f88 <__assert_fail@plt>
   18e84:	b	1c7f8 <main@@Base+0x1478>
   18e88:	push	{r4, r5, fp, lr}
   18e8c:	add	fp, sp, #8
   18e90:	mov	r4, r1
   18e94:	mov	r5, r0
   18e98:	bl	1c7f8 <main@@Base+0x1478>
   18e9c:	cmp	r0, r4
   18ea0:	bls	18eb0 <test_union_vector@@Base+0x4a8>
   18ea4:	add	r0, r5, r4
   18ea8:	pop	{r4, r5, fp, lr}
   18eac:	b	1d1ec <main@@Base+0x1e6c>
   18eb0:	movw	r0, #15063	; 0x3ad7
   18eb4:	movt	r0, #2
   18eb8:	movw	r1, #15118	; 0x3b0e
   18ebc:	movt	r1, #2
   18ec0:	movw	r3, #18126	; 0x46ce
   18ec4:	movt	r3, #2
   18ec8:	movw	r2, #405	; 0x195
   18ecc:	bl	12f88 <__assert_fail@plt>
   18ed0:	push	{r4, r5, fp, lr}
   18ed4:	add	fp, sp, #8
   18ed8:	mov	r4, r1
   18edc:	mov	r5, r0
   18ee0:	bl	1c7f8 <main@@Base+0x1478>
   18ee4:	cmp	r0, r4
   18ee8:	bls	18f00 <test_union_vector@@Base+0x4f8>
   18eec:	add	r4, r5, r4, lsl #2
   18ef0:	mov	r0, r4
   18ef4:	bl	1b610 <main@@Base+0x290>
   18ef8:	add	r0, r4, r0
   18efc:	pop	{r4, r5, fp, pc}
   18f00:	movw	r0, #15063	; 0x3ad7
   18f04:	movt	r0, #2
   18f08:	movw	r1, #15118	; 0x3b0e
   18f0c:	movt	r1, #2
   18f10:	movw	r3, #18219	; 0x472b
   18f14:	movt	r3, #2
   18f18:	mov	r2, #117	; 0x75
   18f1c:	bl	12f88 <__assert_fail@plt>
   18f20:	push	{r4, r5, fp, lr}
   18f24:	add	fp, sp, #8
   18f28:	cmp	r0, #0
   18f2c:	beq	18f70 <test_union_vector@@Base+0x568>
   18f30:	mov	r4, r0
   18f34:	bl	1b61c <main@@Base+0x29c>
   18f38:	sub	r5, r4, r0
   18f3c:	mov	r0, r5
   18f40:	bl	1b624 <main@@Base+0x2a4>
   18f44:	cmp	r0, #6
   18f48:	bcc	18f68 <test_union_vector@@Base+0x560>
   18f4c:	add	r0, r5, #4
   18f50:	bl	1b624 <main@@Base+0x2a4>
   18f54:	cmp	r0, #0
   18f58:	beq	18f68 <test_union_vector@@Base+0x560>
   18f5c:	add	r0, r4, r0
   18f60:	pop	{r4, r5, fp, lr}
   18f64:	b	1c7ec <main@@Base+0x146c>
   18f68:	mov	r0, #2
   18f6c:	pop	{r4, r5, fp, pc}
   18f70:	movw	r0, #12550	; 0x3106
   18f74:	movt	r0, #2
   18f78:	movw	r1, #12588	; 0x312c
   18f7c:	movt	r1, #2
   18f80:	movw	r3, #18303	; 0x477f
   18f84:	movt	r3, #2
   18f88:	movw	r2, #579	; 0x243
   18f8c:	bl	12f88 <__assert_fail@plt>
   18f90:	push	{r4, r5, r6, sl, fp, lr}
   18f94:	add	fp, sp, #16
   18f98:	mov	r4, r1
   18f9c:	mov	r5, r0
   18fa0:	mov	r0, r1
   18fa4:	bl	18d8c <test_union_vector@@Base+0x384>
   18fa8:	mov	r6, r0
   18fac:	str	r0, [r5]
   18fb0:	mov	r0, r4
   18fb4:	bl	18e08 <test_union_vector@@Base+0x400>
   18fb8:	mov	r4, r0
   18fbc:	str	r0, [r5, #4]
   18fc0:	mov	r0, r6
   18fc4:	bl	1c7f8 <main@@Base+0x1478>
   18fc8:	mov	r5, r0
   18fcc:	mov	r0, r4
   18fd0:	bl	1c7f8 <main@@Base+0x1478>
   18fd4:	cmp	r5, r0
   18fd8:	popeq	{r4, r5, r6, sl, fp, pc}
   18fdc:	movw	r0, #18424	; 0x47f8
   18fe0:	movt	r0, #2
   18fe4:	movw	r1, #12588	; 0x312c
   18fe8:	movt	r1, #2
   18fec:	movw	r3, #18525	; 0x485d
   18ff0:	movt	r3, #2
   18ff4:	movw	r2, #621	; 0x26d
   18ff8:	bl	12f88 <__assert_fail@plt>
   18ffc:	b	1c7f8 <main@@Base+0x1478>
   19000:	push	{r4, r5, r6, sl, fp, lr}
   19004:	add	fp, sp, #16
   19008:	mov	r5, r2
   1900c:	mov	r6, r1
   19010:	mov	r4, r0
   19014:	mov	r0, #0
   19018:	str	r0, [r4]
   1901c:	str	r0, [r4, #4]
   19020:	mov	r0, r1
   19024:	bl	1c7f8 <main@@Base+0x1478>
   19028:	cmp	r0, #0
   1902c:	beq	19054 <test_union_vector@@Base+0x64c>
   19030:	ldrb	r0, [r6]
   19034:	strb	r0, [r4]
   19038:	cmp	r0, #0
   1903c:	beq	19050 <test_union_vector@@Base+0x648>
   19040:	mov	r0, r5
   19044:	mov	r1, #0
   19048:	bl	18ed0 <test_union_vector@@Base+0x4c8>
   1904c:	str	r0, [r4, #4]
   19050:	pop	{r4, r5, r6, sl, fp, pc}
   19054:	movw	r0, #18617	; 0x48b9
   19058:	movt	r0, #2
   1905c:	movw	r1, #12588	; 0x312c
   19060:	movt	r1, #2
   19064:	movw	r3, #18649	; 0x48d9
   19068:	movt	r3, #2
   1906c:	mov	r2, #520	; 0x208
   19070:	bl	12f88 <__assert_fail@plt>

00019074 <test_mixed_type_union@@Base>:
   19074:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19078:	add	fp, sp, #24
   1907c:	sub	sp, sp, #24
   19080:	mov	r4, r0
   19084:	bl	1db9c <flatcc_builder_reset@@Base>
   19088:	mov	r0, r4
   1908c:	bl	19710 <test_mixed_type_union@@Base+0x69c>
   19090:	mov	r0, r4
   19094:	mov	r1, #10
   19098:	bl	1973c <test_mixed_type_union@@Base+0x6c8>
   1909c:	mov	r8, r0
   190a0:	mov	r0, r4
   190a4:	mov	r1, #22
   190a8:	bl	19774 <test_mixed_type_union@@Base+0x700>
   190ac:	mov	r5, r0
   190b0:	add	r0, sp, #12
   190b4:	mov	r1, r5
   190b8:	bl	197ac <test_mixed_type_union@@Base+0x738>
   190bc:	ldr	r6, [sp, #12]
   190c0:	ldr	r7, [sp, #16]
   190c4:	mov	r0, r4
   190c8:	bl	197bc <test_mixed_type_union@@Base+0x748>
   190cc:	mov	r0, r4
   190d0:	mov	r1, r5
   190d4:	bl	19804 <test_mixed_type_union@@Base+0x790>
   190d8:	mov	r0, r4
   190dc:	mov	r1, #42	; 0x2a
   190e0:	bl	19830 <test_mixed_type_union@@Base+0x7bc>
   190e4:	mov	r5, r0
   190e8:	mov	r0, r4
   190ec:	mov	r1, r5
   190f0:	bl	19874 <test_mixed_type_union@@Base+0x800>
   190f4:	mov	r0, r4
   190f8:	bl	198a0 <test_mixed_type_union@@Base+0x82c>
   190fc:	mov	r0, r4
   19100:	bl	198c8 <test_mixed_type_union@@Base+0x854>
   19104:	mov	r0, r4
   19108:	mov	r1, r6
   1910c:	mov	r2, r7
   19110:	bl	198cc <test_mixed_type_union@@Base+0x858>
   19114:	mov	r0, r4
   19118:	mov	r1, r5
   1911c:	bl	198d0 <test_mixed_type_union@@Base+0x85c>
   19120:	mov	r0, r4
   19124:	bl	198fc <test_mixed_type_union@@Base+0x888>
   19128:	movw	r1, #11459	; 0x2cc3
   1912c:	movt	r1, #2
   19130:	mov	r0, r4
   19134:	bl	16234 <gen_monster@@Base+0x6f8>
   19138:	mov	r1, r0
   1913c:	add	r0, sp, #4
   19140:	bl	19938 <test_mixed_type_union@@Base+0x8c4>
   19144:	ldmib	sp, {r1, r2}
   19148:	mov	r0, r4
   1914c:	bl	19934 <test_mixed_type_union@@Base+0x8c0>
   19150:	mov	r0, r4
   19154:	mov	r1, r8
   19158:	bl	19948 <test_mixed_type_union@@Base+0x8d4>
   1915c:	mov	r0, r4
   19160:	bl	19974 <test_mixed_type_union@@Base+0x900>
   19164:	mov	r1, #3
   19168:	str	r1, [r0]
   1916c:	mov	r0, r4
   19170:	bl	19978 <test_mixed_type_union@@Base+0x904>
   19174:	mov	r0, r4
   19178:	mov	r1, #1
   1917c:	bl	1973c <test_mixed_type_union@@Base+0x6c8>
   19180:	mov	r1, r0
   19184:	mov	r0, r4
   19188:	bl	19948 <test_mixed_type_union@@Base+0x8d4>
   1918c:	mov	r0, r4
   19190:	bl	199ac <test_mixed_type_union@@Base+0x938>
   19194:	movw	r1, #11457	; 0x2cc1
   19198:	movt	r1, #2
   1919c:	mov	r0, r4
   191a0:	bl	16234 <gen_monster@@Base+0x6f8>
   191a4:	mov	r1, r0
   191a8:	mov	r0, r4
   191ac:	bl	199e4 <test_mixed_type_union@@Base+0x970>
   191b0:	mov	r0, r4
   191b4:	bl	19a10 <test_mixed_type_union@@Base+0x99c>
   191b8:	mov	r0, r4
   191bc:	bl	19a4c <test_mixed_type_union@@Base+0x9d8>
   191c0:	mov	r0, r4
   191c4:	bl	19a7c <test_mixed_type_union@@Base+0xa08>
   191c8:	add	r1, sp, #20
   191cc:	mov	r0, r4
   191d0:	bl	209cc <flatcc_builder_finalize_aligned_buffer@@Base>
   191d4:	mov	r4, r0
   191d8:	movw	r0, #36976	; 0x9070
   191dc:	movt	r0, #3
   191e0:	ldr	r3, [r0]
   191e4:	ldr	r2, [sp, #20]
   191e8:	movw	r0, #11465	; 0x2cc9
   191ec:	movt	r0, #2
   191f0:	mov	r1, r4
   191f4:	bl	1364c <test_type_aliases@@Base+0x254>
   191f8:	ldr	r1, [sp, #20]
   191fc:	mov	r0, r4
   19200:	bl	19a9c <test_mixed_type_union@@Base+0xa28>
   19204:	cmp	r0, #0
   19208:	beq	19228 <test_mixed_type_union@@Base+0x1b4>
   1920c:	bl	21280 <flatcc_verify_error_string@@Base>
   19210:	mov	r1, r0
   19214:	movw	r0, #11478	; 0x2cd6
   19218:	movt	r0, #2
   1921c:	bl	12e98 <printf@plt>
   19220:	mvn	r5, #0
   19224:	b	192cc <test_mixed_type_union@@Base+0x258>
   19228:	mov	r0, r4
   1922c:	bl	19ab0 <test_mixed_type_union@@Base+0xa3c>
   19230:	mov	r5, r0
   19234:	bl	19af0 <test_mixed_type_union@@Base+0xa7c>
   19238:	cmp	r0, #0
   1923c:	beq	1929c <test_mixed_type_union@@Base+0x228>
   19240:	mov	r0, r5
   19244:	bl	19b58 <test_mixed_type_union@@Base+0xae4>
   19248:	cmp	r0, #0
   1924c:	beq	192a8 <test_mixed_type_union@@Base+0x234>
   19250:	add	r0, sp, #12
   19254:	mov	r1, r5
   19258:	bl	19bc0 <test_mixed_type_union@@Base+0xb4c>
   1925c:	ldrb	r0, [sp, #12]
   19260:	cmp	r0, #8
   19264:	bne	192b4 <test_mixed_type_union@@Base+0x240>
   19268:	ldr	r6, [sp, #16]
   1926c:	cmp	r6, #0
   19270:	bne	19280 <test_mixed_type_union@@Base+0x20c>
   19274:	movw	r0, #26038	; 0x65b6
   19278:	movt	r0, #2
   1927c:	bl	12ee0 <puts@plt>
   19280:	mov	r0, r6
   19284:	bl	19c00 <test_mixed_type_union@@Base+0xb8c>
   19288:	cmp	r0, #20
   1928c:	bcc	192d8 <test_mixed_type_union@@Base+0x264>
   19290:	movw	r0, #26517	; 0x6795
   19294:	movt	r0, #2
   19298:	b	192bc <test_mixed_type_union@@Base+0x248>
   1929c:	movw	r0, #25954	; 0x6562
   192a0:	movt	r0, #2
   192a4:	b	192bc <test_mixed_type_union@@Base+0x248>
   192a8:	movw	r0, #25995	; 0x658b
   192ac:	movt	r0, #2
   192b0:	b	192bc <test_mixed_type_union@@Base+0x248>
   192b4:	movw	r0, #26556	; 0x67bc
   192b8:	movt	r0, #2
   192bc:	bl	12ee0 <puts@plt>
   192c0:	mvn	r5, #0
   192c4:	mov	r0, r4
   192c8:	bl	20aac <flatcc_builder_aligned_free@@Base>
   192cc:	mov	r0, r5
   192d0:	sub	sp, fp, #24
   192d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   192d8:	cmp	r0, #19
   192dc:	bne	19388 <test_mixed_type_union@@Base+0x314>
   192e0:	mov	r0, r5
   192e4:	bl	19c10 <test_mixed_type_union@@Base+0xb9c>
   192e8:	cmp	r0, #8
   192ec:	bne	19394 <test_mixed_type_union@@Base+0x320>
   192f0:	mov	r0, r5
   192f4:	bl	19c80 <test_mixed_type_union@@Base+0xc0c>
   192f8:	cmp	r0, #0
   192fc:	beq	193a0 <test_mixed_type_union@@Base+0x32c>
   19300:	bl	19c00 <test_mixed_type_union@@Base+0xb8c>
   19304:	cmp	r0, #22
   19308:	bne	193ac <test_mixed_type_union@@Base+0x338>
   1930c:	mov	r0, r5
   19310:	bl	19cf8 <test_mixed_type_union@@Base+0xc84>
   19314:	cmp	r0, #2
   19318:	bne	193b8 <test_mixed_type_union@@Base+0x344>
   1931c:	mov	r0, r5
   19320:	bl	19d68 <test_mixed_type_union@@Base+0xcf4>
   19324:	cmp	r0, #0
   19328:	beq	193c4 <test_mixed_type_union@@Base+0x350>
   1932c:	bl	19de0 <test_mixed_type_union@@Base+0xd6c>
   19330:	cmp	r0, #42	; 0x2a
   19334:	bne	193c4 <test_mixed_type_union@@Base+0x350>
   19338:	mov	r0, r5
   1933c:	bl	19e50 <test_mixed_type_union@@Base+0xddc>
   19340:	cmp	r0, #11
   19344:	bne	193d0 <test_mixed_type_union@@Base+0x35c>
   19348:	mov	r0, r5
   1934c:	bl	19ecc <test_mixed_type_union@@Base+0xe58>
   19350:	bl	19ec0 <test_mixed_type_union@@Base+0xe4c>
   19354:	cmp	r0, #0
   19358:	beq	193dc <test_mixed_type_union@@Base+0x368>
   1935c:	mov	r6, r0
   19360:	movw	r1, #11448	; 0x2cb8
   19364:	movt	r1, #2
   19368:	bl	12e8c <strcmp@plt>
   1936c:	cmp	r0, #0
   19370:	beq	193e8 <test_mixed_type_union@@Base+0x374>
   19374:	movw	r0, #11557	; 0x2d25
   19378:	movt	r0, #2
   1937c:	mov	r1, r6
   19380:	bl	12e98 <printf@plt>
   19384:	b	192c0 <test_mixed_type_union@@Base+0x24c>
   19388:	movw	r0, #26471	; 0x6767
   1938c:	movt	r0, #2
   19390:	b	192bc <test_mixed_type_union@@Base+0x248>
   19394:	movw	r0, #26419	; 0x6733
   19398:	movt	r0, #2
   1939c:	b	192bc <test_mixed_type_union@@Base+0x248>
   193a0:	movw	r0, #26061	; 0x65cd
   193a4:	movt	r0, #2
   193a8:	b	192bc <test_mixed_type_union@@Base+0x248>
   193ac:	movw	r0, #26372	; 0x6704
   193b0:	movt	r0, #2
   193b4:	b	192bc <test_mixed_type_union@@Base+0x248>
   193b8:	movw	r0, #26349	; 0x66ed
   193bc:	movt	r0, #2
   193c0:	b	192bc <test_mixed_type_union@@Base+0x248>
   193c4:	movw	r0, #26108	; 0x65fc
   193c8:	movt	r0, #2
   193cc:	b	192bc <test_mixed_type_union@@Base+0x248>
   193d0:	movw	r0, #26327	; 0x66d7
   193d4:	movt	r0, #2
   193d8:	b	192bc <test_mixed_type_union@@Base+0x248>
   193dc:	movw	r0, #26142	; 0x661e
   193e0:	movt	r0, #2
   193e4:	b	192bc <test_mixed_type_union@@Base+0x248>
   193e8:	mov	r0, r5
   193ec:	bl	19f44 <test_mixed_type_union@@Base+0xed0>
   193f0:	cmp	r0, #0
   193f4:	beq	1941c <test_mixed_type_union@@Base+0x3a8>
   193f8:	mov	r6, r0
   193fc:	movw	r1, #11448	; 0x2cb8
   19400:	movt	r1, #2
   19404:	bl	12e8c <strcmp@plt>
   19408:	cmp	r0, #0
   1940c:	beq	19428 <test_mixed_type_union@@Base+0x3b4>
   19410:	movw	r0, #11593	; 0x2d49
   19414:	movt	r0, #2
   19418:	b	1937c <test_mixed_type_union@@Base+0x308>
   1941c:	movw	r0, #26142	; 0x661e
   19420:	movt	r0, #2
   19424:	b	192bc <test_mixed_type_union@@Base+0x248>
   19428:	add	r0, sp, #12
   1942c:	mov	r1, r5
   19430:	bl	19f58 <test_mixed_type_union@@Base+0xee4>
   19434:	ldr	r0, [sp, #12]
   19438:	ldr	r1, [sp, #16]
   1943c:	bl	19f98 <test_mixed_type_union@@Base+0xf24>
   19440:	mov	r6, r0
   19444:	movw	r1, #11448	; 0x2cb8
   19448:	movt	r1, #2
   1944c:	bl	12e8c <strcmp@plt>
   19450:	cmp	r0, #0
   19454:	beq	19464 <test_mixed_type_union@@Base+0x3f0>
   19458:	movw	r0, #11638	; 0x2d76
   1945c:	movt	r0, #2
   19460:	b	1937c <test_mixed_type_union@@Base+0x308>
   19464:	add	r0, sp, #12
   19468:	mov	r1, r5
   1946c:	bl	19fa0 <test_mixed_type_union@@Base+0xf2c>
   19470:	ldr	r6, [sp, #12]
   19474:	ldr	r7, [sp, #16]
   19478:	add	r0, sp, #12
   1947c:	mov	r1, r6
   19480:	mov	r2, r7
   19484:	mov	r3, #0
   19488:	bl	1a00c <test_mixed_type_union@@Base+0xf98>
   1948c:	ldrb	r0, [sp, #12]
   19490:	cmp	r0, #8
   19494:	bne	1953c <test_mixed_type_union@@Base+0x4c8>
   19498:	add	r0, sp, #12
   1949c:	mov	r1, r6
   194a0:	mov	r2, r7
   194a4:	mov	r3, #1
   194a8:	bl	1a00c <test_mixed_type_union@@Base+0xf98>
   194ac:	ldrb	r0, [sp, #12]
   194b0:	cmp	r0, #2
   194b4:	bne	19548 <test_mixed_type_union@@Base+0x4d4>
   194b8:	ldr	r0, [sp, #16]
   194bc:	bl	19de0 <test_mixed_type_union@@Base+0xd6c>
   194c0:	cmp	r0, #42	; 0x2a
   194c4:	bne	19554 <test_mixed_type_union@@Base+0x4e0>
   194c8:	add	r0, sp, #12
   194cc:	mov	r1, r6
   194d0:	mov	r2, r7
   194d4:	mov	r3, #2
   194d8:	bl	1a00c <test_mixed_type_union@@Base+0xf98>
   194dc:	ldrb	r0, [sp, #12]
   194e0:	cmp	r0, #2
   194e4:	bne	19560 <test_mixed_type_union@@Base+0x4ec>
   194e8:	ldr	r0, [sp, #16]
   194ec:	bl	19de0 <test_mixed_type_union@@Base+0xd6c>
   194f0:	cmp	r0, #1
   194f4:	bne	1956c <test_mixed_type_union@@Base+0x4f8>
   194f8:	mov	r0, r5
   194fc:	bl	1a084 <test_mixed_type_union@@Base+0x1010>
   19500:	mov	r1, #3
   19504:	bl	18e88 <test_union_vector@@Base+0x480>
   19508:	cmp	r0, #11
   1950c:	bne	1957c <test_mixed_type_union@@Base+0x508>
   19510:	mov	r0, r6
   19514:	mov	r1, r7
   19518:	bl	1a100 <test_mixed_type_union@@Base+0x108c>
   1951c:	movw	r1, #11459	; 0x2cc3
   19520:	movt	r1, #2
   19524:	bl	12e8c <strcmp@plt>
   19528:	cmp	r0, #0
   1952c:	beq	19588 <test_mixed_type_union@@Base+0x514>
   19530:	movw	r0, #26168	; 0x6638
   19534:	movt	r0, #2
   19538:	b	192bc <test_mixed_type_union@@Base+0x248>
   1953c:	movw	r0, #11683	; 0x2da3
   19540:	movt	r0, #2
   19544:	b	19574 <test_mixed_type_union@@Base+0x500>
   19548:	movw	r0, #11720	; 0x2dc8
   1954c:	movt	r0, #2
   19550:	b	19574 <test_mixed_type_union@@Base+0x500>
   19554:	movw	r0, #11755	; 0x2deb
   19558:	movt	r0, #2
   1955c:	b	19574 <test_mixed_type_union@@Base+0x500>
   19560:	movw	r0, #11805	; 0x2e1d
   19564:	movt	r0, #2
   19568:	b	19574 <test_mixed_type_union@@Base+0x500>
   1956c:	movw	r0, #11839	; 0x2e3f
   19570:	movt	r0, #2
   19574:	bl	12e98 <printf@plt>
   19578:	b	192c0 <test_mixed_type_union@@Base+0x24c>
   1957c:	movw	r0, #26281	; 0x66a9
   19580:	movt	r0, #2
   19584:	b	192bc <test_mixed_type_union@@Base+0x248>
   19588:	add	r0, sp, #12
   1958c:	mov	r1, r6
   19590:	mov	r2, r7
   19594:	mov	r3, #3
   19598:	bl	1a00c <test_mixed_type_union@@Base+0xf98>
   1959c:	ldr	r0, [sp, #12]
   195a0:	uxtb	r1, r0
   195a4:	cmp	r1, #11
   195a8:	bne	195e4 <test_mixed_type_union@@Base+0x570>
   195ac:	ldr	r1, [sp, #16]
   195b0:	mov	r2, #11
   195b4:	bfi	r0, r2, #0, #8
   195b8:	bl	19f98 <test_mixed_type_union@@Base+0xf24>
   195bc:	cmp	r0, #0
   195c0:	beq	195d8 <test_mixed_type_union@@Base+0x564>
   195c4:	movw	r1, #11459	; 0x2cc3
   195c8:	movt	r1, #2
   195cc:	bl	12e8c <strcmp@plt>
   195d0:	cmp	r0, #0
   195d4:	beq	195f0 <test_mixed_type_union@@Base+0x57c>
   195d8:	movw	r0, #26219	; 0x666b
   195dc:	movt	r0, #2
   195e0:	b	192bc <test_mixed_type_union@@Base+0x248>
   195e4:	movw	r0, #11888	; 0x2e70
   195e8:	movt	r0, #2
   195ec:	b	19574 <test_mixed_type_union@@Base+0x500>
   195f0:	add	r0, sp, #12
   195f4:	mov	r1, r6
   195f8:	mov	r2, r7
   195fc:	mov	r3, #4
   19600:	bl	1a00c <test_mixed_type_union@@Base+0xf98>
   19604:	ldrb	r0, [sp, #12]
   19608:	cmp	r0, #9
   1960c:	bne	196d4 <test_mixed_type_union@@Base+0x660>
   19610:	add	r0, sp, #12
   19614:	mov	r1, r6
   19618:	mov	r2, r7
   1961c:	mov	r3, #5
   19620:	bl	1a00c <test_mixed_type_union@@Base+0xf98>
   19624:	ldrb	r0, [sp, #12]
   19628:	cmp	r0, #9
   1962c:	bne	196e0 <test_mixed_type_union@@Base+0x66c>
   19630:	add	r0, sp, #12
   19634:	mov	r1, r6
   19638:	mov	r2, r7
   1963c:	mov	r3, #6
   19640:	bl	1a00c <test_mixed_type_union@@Base+0xf98>
   19644:	ldrb	r0, [sp, #12]
   19648:	cmp	r0, #9
   1964c:	bne	196ec <test_mixed_type_union@@Base+0x678>
   19650:	add	r0, sp, #12
   19654:	mov	r1, r6
   19658:	mov	r2, r7
   1965c:	mov	r3, #7
   19660:	bl	1a00c <test_mixed_type_union@@Base+0xf98>
   19664:	ldrb	r0, [sp, #12]
   19668:	cmp	r0, #9
   1966c:	bne	196f8 <test_mixed_type_union@@Base+0x684>
   19670:	add	r0, sp, #12
   19674:	mov	r1, r6
   19678:	mov	r2, r7
   1967c:	mov	r3, #8
   19680:	bl	1a00c <test_mixed_type_union@@Base+0xf98>
   19684:	ldrb	r0, [sp, #12]
   19688:	cmp	r0, #11
   1968c:	bne	19704 <test_mixed_type_union@@Base+0x690>
   19690:	add	r0, sp, #12
   19694:	mov	r1, r6
   19698:	mov	r2, r7
   1969c:	mov	r3, #9
   196a0:	bl	1a00c <test_mixed_type_union@@Base+0xf98>
   196a4:	ldrb	r0, [sp, #12]
   196a8:	cmp	r0, #11
   196ac:	bne	19704 <test_mixed_type_union@@Base+0x690>
   196b0:	mov	r0, r6
   196b4:	mov	r1, r7
   196b8:	bl	1a108 <test_mixed_type_union@@Base+0x1094>
   196bc:	mov	r5, #0
   196c0:	cmp	r0, #10
   196c4:	beq	192c4 <test_mixed_type_union@@Base+0x250>
   196c8:	movw	r0, #12127	; 0x2f5f
   196cc:	movt	r0, #2
   196d0:	b	19574 <test_mixed_type_union@@Base+0x500>
   196d4:	movw	r0, #11944	; 0x2ea8
   196d8:	movt	r0, #2
   196dc:	b	19574 <test_mixed_type_union@@Base+0x500>
   196e0:	movw	r0, #11978	; 0x2eca
   196e4:	movt	r0, #2
   196e8:	b	19574 <test_mixed_type_union@@Base+0x500>
   196ec:	movw	r0, #12012	; 0x2eec
   196f0:	movt	r0, #2
   196f4:	b	19574 <test_mixed_type_union@@Base+0x500>
   196f8:	movw	r0, #12048	; 0x2f10
   196fc:	movt	r0, #2
   19700:	b	19574 <test_mixed_type_union@@Base+0x500>
   19704:	movw	r0, #12083	; 0x2f33
   19708:	movt	r0, #2
   1970c:	b	19574 <test_mixed_type_union@@Base+0x500>
   19710:	push	{r4, sl, fp, lr}
   19714:	add	fp, sp, #8
   19718:	mov	r4, r0
   1971c:	movw	r1, #9108	; 0x2394
   19720:	movt	r1, #2
   19724:	bl	13d40 <test_empty_monster@@Base+0x108>
   19728:	cmp	r0, #0
   1972c:	popne	{r4, sl, fp, pc}
   19730:	mov	r0, r4
   19734:	pop	{r4, sl, fp, lr}
   19738:	b	1d1f8 <main@@Base+0x1e78>
   1973c:	push	{r4, r5, fp, lr}
   19740:	add	fp, sp, #8
   19744:	mov	r5, r1
   19748:	mov	r4, r0
   1974c:	bl	1d200 <main@@Base+0x1e80>
   19750:	cmp	r0, #0
   19754:	beq	1976c <test_mixed_type_union@@Base+0x6f8>
   19758:	mov	r1, r5
   1975c:	bl	1d20c <main@@Base+0x1e8c>
   19760:	mov	r0, r4
   19764:	pop	{r4, r5, fp, lr}
   19768:	b	1d210 <main@@Base+0x1e90>
   1976c:	mov	r0, #0
   19770:	pop	{r4, r5, fp, pc}
   19774:	push	{r4, r5, fp, lr}
   19778:	add	fp, sp, #8
   1977c:	mov	r5, r1
   19780:	mov	r4, r0
   19784:	bl	1d214 <main@@Base+0x1e94>
   19788:	cmp	r0, #0
   1978c:	beq	197a4 <test_mixed_type_union@@Base+0x730>
   19790:	mov	r1, r5
   19794:	bl	1d220 <main@@Base+0x1ea0>
   19798:	mov	r0, r4
   1979c:	pop	{r4, r5, fp, lr}
   197a0:	b	1d224 <main@@Base+0x1ea4>
   197a4:	mov	r0, #0
   197a8:	pop	{r4, r5, fp, pc}
   197ac:	str	r1, [r0, #4]
   197b0:	mov	r1, #8
   197b4:	strb	r1, [r0]
   197b8:	bx	lr
   197bc:	push	{r4, sl, fp, lr}
   197c0:	add	fp, sp, #8
   197c4:	sub	sp, sp, #8
   197c8:	mov	r4, r0
   197cc:	mov	r1, #19
   197d0:	bl	19774 <test_mixed_type_union@@Base+0x700>
   197d4:	cmp	r0, #0
   197d8:	beq	197fc <test_mixed_type_union@@Base+0x788>
   197dc:	mov	r1, r0
   197e0:	mov	r0, sp
   197e4:	bl	197ac <test_mixed_type_union@@Base+0x738>
   197e8:	ldm	sp, {r1, r2}
   197ec:	mov	r0, r4
   197f0:	sub	sp, fp, #8
   197f4:	pop	{r4, sl, fp, lr}
   197f8:	b	1d228 <main@@Base+0x1ea8>
   197fc:	sub	sp, fp, #8
   19800:	pop	{r4, sl, fp, pc}
   19804:	push	{r4, sl, fp, lr}
   19808:	add	fp, sp, #8
   1980c:	sub	sp, sp, #8
   19810:	mov	r4, r0
   19814:	mov	r0, sp
   19818:	bl	197ac <test_mixed_type_union@@Base+0x738>
   1981c:	ldm	sp, {r1, r2}
   19820:	mov	r0, r4
   19824:	sub	sp, fp, #8
   19828:	pop	{r4, sl, fp, lr}
   1982c:	b	1d294 <main@@Base+0x1f14>
   19830:	push	{r4, r5, fp, lr}
   19834:	add	fp, sp, #8
   19838:	mov	r5, r1
   1983c:	mov	r4, r0
   19840:	bl	1d2f8 <main@@Base+0x1f78>
   19844:	cmp	r0, #0
   19848:	bne	19860 <test_mixed_type_union@@Base+0x7ec>
   1984c:	mov	r0, r4
   19850:	mov	r1, r5
   19854:	bl	1d300 <main@@Base+0x1f80>
   19858:	cmp	r0, #0
   1985c:	beq	19868 <test_mixed_type_union@@Base+0x7f4>
   19860:	mov	r0, #0
   19864:	pop	{r4, r5, fp, pc}
   19868:	mov	r0, r4
   1986c:	pop	{r4, r5, fp, lr}
   19870:	b	1d34c <main@@Base+0x1fcc>
   19874:	push	{r4, sl, fp, lr}
   19878:	add	fp, sp, #8
   1987c:	sub	sp, sp, #8
   19880:	mov	r4, r0
   19884:	mov	r0, sp
   19888:	bl	1d400 <main@@Base+0x2080>
   1988c:	ldm	sp, {r1, r2}
   19890:	mov	r0, r4
   19894:	sub	sp, fp, #8
   19898:	pop	{r4, sl, fp, lr}
   1989c:	b	1d39c <main@@Base+0x201c>
   198a0:	push	{r4, sl, fp, lr}
   198a4:	add	fp, sp, #8
   198a8:	mov	r4, r0
   198ac:	movw	r1, #11448	; 0x2cb8
   198b0:	movt	r1, #2
   198b4:	bl	20524 <flatcc_builder_create_string_str@@Base>
   198b8:	mov	r1, r0
   198bc:	mov	r0, r4
   198c0:	pop	{r4, sl, fp, lr}
   198c4:	b	1d410 <main@@Base+0x2090>
   198c8:	b	20168 <flatcc_builder_start_union_vector@@Base>
   198cc:	b	2037c <flatcc_builder_union_vector_push@@Base>
   198d0:	push	{r4, sl, fp, lr}
   198d4:	add	fp, sp, #8
   198d8:	sub	sp, sp, #8
   198dc:	mov	r4, r0
   198e0:	mov	r0, sp
   198e4:	bl	1d400 <main@@Base+0x2080>
   198e8:	ldm	sp, {r1, r2}
   198ec:	mov	r0, r4
   198f0:	sub	sp, fp, #8
   198f4:	pop	{r4, sl, fp, lr}
   198f8:	b	19934 <test_mixed_type_union@@Base+0x8c0>
   198fc:	push	{r4, sl, fp, lr}
   19900:	add	fp, sp, #8
   19904:	sub	sp, sp, #8
   19908:	mov	r4, r0
   1990c:	mov	r1, #1
   19910:	bl	19830 <test_mixed_type_union@@Base+0x7bc>
   19914:	mov	r1, r0
   19918:	mov	r0, sp
   1991c:	bl	1d400 <main@@Base+0x2080>
   19920:	ldm	sp, {r1, r2}
   19924:	mov	r0, r4
   19928:	sub	sp, fp, #8
   1992c:	pop	{r4, sl, fp, lr}
   19930:	b	19934 <test_mixed_type_union@@Base+0x8c0>
   19934:	b	2037c <flatcc_builder_union_vector_push@@Base>
   19938:	str	r1, [r0, #4]
   1993c:	mov	r1, #11
   19940:	strb	r1, [r0]
   19944:	bx	lr
   19948:	push	{r4, sl, fp, lr}
   1994c:	add	fp, sp, #8
   19950:	sub	sp, sp, #8
   19954:	mov	r4, r0
   19958:	mov	r0, sp
   1995c:	bl	1d4a0 <main@@Base+0x2120>
   19960:	ldm	sp, {r1, r2}
   19964:	mov	r0, r4
   19968:	sub	sp, fp, #8
   1996c:	pop	{r4, sl, fp, lr}
   19970:	b	19934 <test_mixed_type_union@@Base+0x8c0>
   19974:	b	1d200 <main@@Base+0x1e80>
   19978:	push	{r4, sl, fp, lr}
   1997c:	add	fp, sp, #8
   19980:	sub	sp, sp, #8
   19984:	mov	r4, r0
   19988:	bl	1d4b0 <main@@Base+0x2130>
   1998c:	mov	r1, r0
   19990:	mov	r0, sp
   19994:	bl	1d4a0 <main@@Base+0x2120>
   19998:	ldm	sp, {r1, r2}
   1999c:	mov	r0, r4
   199a0:	sub	sp, fp, #8
   199a4:	pop	{r4, sl, fp, lr}
   199a8:	b	19934 <test_mixed_type_union@@Base+0x8c0>
   199ac:	push	{r4, sl, fp, lr}
   199b0:	add	fp, sp, #8
   199b4:	sub	sp, sp, #8
   199b8:	mov	r4, r0
   199bc:	mov	r1, #2
   199c0:	bl	1973c <test_mixed_type_union@@Base+0x6c8>
   199c4:	mov	r1, r0
   199c8:	mov	r0, sp
   199cc:	bl	1d4a0 <main@@Base+0x2120>
   199d0:	ldm	sp, {r1, r2}
   199d4:	mov	r0, r4
   199d8:	sub	sp, fp, #8
   199dc:	pop	{r4, sl, fp, lr}
   199e0:	b	19934 <test_mixed_type_union@@Base+0x8c0>
   199e4:	push	{r4, sl, fp, lr}
   199e8:	add	fp, sp, #8
   199ec:	sub	sp, sp, #8
   199f0:	mov	r4, r0
   199f4:	mov	r0, sp
   199f8:	bl	19938 <test_mixed_type_union@@Base+0x8c4>
   199fc:	ldm	sp, {r1, r2}
   19a00:	mov	r0, r4
   19a04:	sub	sp, fp, #8
   19a08:	pop	{r4, sl, fp, lr}
   19a0c:	b	19934 <test_mixed_type_union@@Base+0x8c0>
   19a10:	push	{r4, sl, fp, lr}
   19a14:	add	fp, sp, #8
   19a18:	sub	sp, sp, #8
   19a1c:	mov	r4, r0
   19a20:	movw	r1, #11453	; 0x2cbd
   19a24:	movt	r1, #2
   19a28:	bl	16234 <gen_monster@@Base+0x6f8>
   19a2c:	mov	r1, r0
   19a30:	mov	r0, sp
   19a34:	bl	19938 <test_mixed_type_union@@Base+0x8c4>
   19a38:	ldm	sp, {r1, r2}
   19a3c:	mov	r0, r4
   19a40:	sub	sp, fp, #8
   19a44:	pop	{r4, sl, fp, lr}
   19a48:	b	19934 <test_mixed_type_union@@Base+0x8c0>
   19a4c:	push	{r4, sl, fp, lr}
   19a50:	add	fp, sp, #8
   19a54:	sub	sp, sp, #8
   19a58:	mov	r4, r0
   19a5c:	mov	r0, sp
   19a60:	mov	r1, r4
   19a64:	bl	201c8 <flatcc_builder_end_union_vector@@Base>
   19a68:	ldm	sp, {r1, r2}
   19a6c:	mov	r0, r4
   19a70:	bl	1d4b4 <main@@Base+0x2134>
   19a74:	sub	sp, fp, #8
   19a78:	pop	{r4, sl, fp, pc}
   19a7c:	push	{r4, sl, fp, lr}
   19a80:	add	fp, sp, #8
   19a84:	mov	r4, r0
   19a88:	bl	1d504 <main@@Base+0x2184>
   19a8c:	mov	r1, r0
   19a90:	mov	r0, r4
   19a94:	pop	{r4, sl, fp, lr}
   19a98:	b	13dc4 <test_empty_monster@@Base+0x18c>
   19a9c:	movw	r2, #9108	; 0x2394
   19aa0:	movt	r2, #2
   19aa4:	movw	r3, #50164	; 0xc3f4
   19aa8:	movt	r3, #1
   19aac:	b	21bc8 <flatcc_verify_table_as_root@@Base>
   19ab0:	push	{r4, r5, fp, lr}
   19ab4:	add	fp, sp, #8
   19ab8:	mov	r5, #0
   19abc:	cmp	r0, #0
   19ac0:	beq	19ae8 <test_mixed_type_union@@Base+0xa74>
   19ac4:	mov	r4, r0
   19ac8:	movw	r1, #9108	; 0x2394
   19acc:	movt	r1, #2
   19ad0:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   19ad4:	cmp	r0, #0
   19ad8:	beq	19ae8 <test_mixed_type_union@@Base+0xa74>
   19adc:	mov	r0, r4
   19ae0:	bl	1b610 <main@@Base+0x290>
   19ae4:	add	r5, r4, r0
   19ae8:	mov	r0, r5
   19aec:	pop	{r4, r5, fp, pc}
   19af0:	push	{r4, sl, fp, lr}
   19af4:	add	fp, sp, #8
   19af8:	cmp	r0, #0
   19afc:	beq	19b38 <test_mixed_type_union@@Base+0xac4>
   19b00:	mov	r4, r0
   19b04:	bl	1b61c <main@@Base+0x29c>
   19b08:	sub	r4, r4, r0
   19b0c:	mov	r0, r4
   19b10:	bl	1b624 <main@@Base+0x2a4>
   19b14:	mov	r1, r0
   19b18:	mov	r0, #0
   19b1c:	cmp	r1, #8
   19b20:	popcc	{r4, sl, fp, pc}
   19b24:	add	r0, r4, #6
   19b28:	bl	1b624 <main@@Base+0x2a4>
   19b2c:	cmp	r0, #0
   19b30:	movwne	r0, #1
   19b34:	pop	{r4, sl, fp, pc}
   19b38:	movw	r0, #12550	; 0x3106
   19b3c:	movt	r0, #2
   19b40:	movw	r1, #12588	; 0x312c
   19b44:	movt	r1, #2
   19b48:	movw	r3, #19159	; 0x4ad7
   19b4c:	movt	r3, #2
   19b50:	movw	r2, #819	; 0x333
   19b54:	bl	12f88 <__assert_fail@plt>
   19b58:	push	{r4, sl, fp, lr}
   19b5c:	add	fp, sp, #8
   19b60:	cmp	r0, #0
   19b64:	beq	19ba0 <test_mixed_type_union@@Base+0xb2c>
   19b68:	mov	r4, r0
   19b6c:	bl	1b61c <main@@Base+0x29c>
   19b70:	sub	r4, r4, r0
   19b74:	mov	r0, r4
   19b78:	bl	1b624 <main@@Base+0x2a4>
   19b7c:	mov	r1, r0
   19b80:	mov	r0, #0
   19b84:	cmp	r1, #24
   19b88:	popcc	{r4, sl, fp, pc}
   19b8c:	add	r0, r4, #22
   19b90:	bl	1b624 <main@@Base+0x2a4>
   19b94:	cmp	r0, #0
   19b98:	movwne	r0, #1
   19b9c:	pop	{r4, sl, fp, pc}
   19ba0:	movw	r0, #12550	; 0x3106
   19ba4:	movt	r0, #2
   19ba8:	movw	r1, #12588	; 0x312c
   19bac:	movt	r1, #2
   19bb0:	movw	r3, #19226	; 0x4b1a
   19bb4:	movt	r3, #2
   19bb8:	movw	r2, #823	; 0x337
   19bbc:	bl	12f88 <__assert_fail@plt>
   19bc0:	push	{r4, r5, fp, lr}
   19bc4:	add	fp, sp, #8
   19bc8:	mov	r5, r1
   19bcc:	mov	r4, r0
   19bd0:	mov	r0, #0
   19bd4:	str	r0, [r4]
   19bd8:	str	r0, [r4, #4]
   19bdc:	mov	r0, r1
   19be0:	bl	1d554 <main@@Base+0x21d4>
   19be4:	strb	r0, [r4]
   19be8:	cmp	r0, #0
   19bec:	popeq	{r4, r5, fp, pc}
   19bf0:	mov	r0, r5
   19bf4:	bl	1d5c4 <main@@Base+0x2244>
   19bf8:	str	r0, [r4, #4]
   19bfc:	pop	{r4, r5, fp, pc}
   19c00:	cmp	r0, #0
   19c04:	moveq	r0, #0
   19c08:	bxeq	lr
   19c0c:	b	1bcf4 <main@@Base+0x974>
   19c10:	push	{r4, r5, fp, lr}
   19c14:	add	fp, sp, #8
   19c18:	cmp	r0, #0
   19c1c:	beq	19c60 <test_mixed_type_union@@Base+0xbec>
   19c20:	mov	r4, r0
   19c24:	bl	1b61c <main@@Base+0x29c>
   19c28:	sub	r5, r4, r0
   19c2c:	mov	r0, r5
   19c30:	bl	1b624 <main@@Base+0x2a4>
   19c34:	cmp	r0, #18
   19c38:	bcc	19c58 <test_mixed_type_union@@Base+0xbe4>
   19c3c:	add	r0, r5, #16
   19c40:	bl	1b624 <main@@Base+0x2a4>
   19c44:	cmp	r0, #0
   19c48:	beq	19c58 <test_mixed_type_union@@Base+0xbe4>
   19c4c:	add	r0, r4, r0
   19c50:	pop	{r4, r5, fp, lr}
   19c54:	b	1c818 <main@@Base+0x1498>
   19c58:	mov	r0, #0
   19c5c:	pop	{r4, r5, fp, pc}
   19c60:	movw	r0, #12550	; 0x3106
   19c64:	movt	r0, #2
   19c68:	movw	r1, #12588	; 0x312c
   19c6c:	movt	r1, #2
   19c70:	movw	r3, #19451	; 0x4bfb
   19c74:	movt	r3, #2
   19c78:	movw	r2, #822	; 0x336
   19c7c:	bl	12f88 <__assert_fail@plt>
   19c80:	push	{r4, r5, r6, sl, fp, lr}
   19c84:	add	fp, sp, #16
   19c88:	cmp	r0, #0
   19c8c:	beq	19cd8 <test_mixed_type_union@@Base+0xc64>
   19c90:	mov	r4, r0
   19c94:	bl	1b61c <main@@Base+0x29c>
   19c98:	sub	r6, r4, r0
   19c9c:	mov	r0, r6
   19ca0:	bl	1b624 <main@@Base+0x2a4>
   19ca4:	mov	r5, #0
   19ca8:	cmp	r0, #20
   19cac:	bcc	19cd0 <test_mixed_type_union@@Base+0xc5c>
   19cb0:	add	r0, r6, #18
   19cb4:	bl	1b624 <main@@Base+0x2a4>
   19cb8:	cmp	r0, #0
   19cbc:	beq	19cd0 <test_mixed_type_union@@Base+0xc5c>
   19cc0:	add	r4, r4, r0
   19cc4:	mov	r0, r4
   19cc8:	bl	1b610 <main@@Base+0x290>
   19ccc:	add	r5, r4, r0
   19cd0:	mov	r0, r5
   19cd4:	pop	{r4, r5, r6, sl, fp, pc}
   19cd8:	movw	r0, #12550	; 0x3106
   19cdc:	movt	r0, #2
   19ce0:	movw	r1, #12588	; 0x312c
   19ce4:	movt	r1, #2
   19ce8:	movw	r3, #19530	; 0x4c4a
   19cec:	movt	r3, #2
   19cf0:	movw	r2, #822	; 0x336
   19cf4:	bl	12f88 <__assert_fail@plt>
   19cf8:	push	{r4, r5, fp, lr}
   19cfc:	add	fp, sp, #8
   19d00:	cmp	r0, #0
   19d04:	beq	19d48 <test_mixed_type_union@@Base+0xcd4>
   19d08:	mov	r4, r0
   19d0c:	bl	1b61c <main@@Base+0x29c>
   19d10:	sub	r5, r4, r0
   19d14:	mov	r0, r5
   19d18:	bl	1b624 <main@@Base+0x2a4>
   19d1c:	cmp	r0, #10
   19d20:	bcc	19d40 <test_mixed_type_union@@Base+0xccc>
   19d24:	add	r0, r5, #8
   19d28:	bl	1b624 <main@@Base+0x2a4>
   19d2c:	cmp	r0, #0
   19d30:	beq	19d40 <test_mixed_type_union@@Base+0xccc>
   19d34:	add	r0, r4, r0
   19d38:	pop	{r4, r5, fp, lr}
   19d3c:	b	1c818 <main@@Base+0x1498>
   19d40:	mov	r0, #0
   19d44:	pop	{r4, r5, fp, pc}
   19d48:	movw	r0, #12550	; 0x3106
   19d4c:	movt	r0, #2
   19d50:	movw	r1, #12588	; 0x312c
   19d54:	movt	r1, #2
   19d58:	movw	r3, #19595	; 0x4c8b
   19d5c:	movt	r3, #2
   19d60:	mov	r2, #820	; 0x334
   19d64:	bl	12f88 <__assert_fail@plt>
   19d68:	push	{r4, r5, r6, sl, fp, lr}
   19d6c:	add	fp, sp, #16
   19d70:	cmp	r0, #0
   19d74:	beq	19dc0 <test_mixed_type_union@@Base+0xd4c>
   19d78:	mov	r4, r0
   19d7c:	bl	1b61c <main@@Base+0x29c>
   19d80:	sub	r6, r4, r0
   19d84:	mov	r0, r6
   19d88:	bl	1b624 <main@@Base+0x2a4>
   19d8c:	mov	r5, #0
   19d90:	cmp	r0, #12
   19d94:	bcc	19db8 <test_mixed_type_union@@Base+0xd44>
   19d98:	add	r0, r6, #10
   19d9c:	bl	1b624 <main@@Base+0x2a4>
   19da0:	cmp	r0, #0
   19da4:	beq	19db8 <test_mixed_type_union@@Base+0xd44>
   19da8:	add	r4, r4, r0
   19dac:	mov	r0, r4
   19db0:	bl	1b610 <main@@Base+0x290>
   19db4:	add	r5, r4, r0
   19db8:	mov	r0, r5
   19dbc:	pop	{r4, r5, r6, sl, fp, pc}
   19dc0:	movw	r0, #12550	; 0x3106
   19dc4:	movt	r0, #2
   19dc8:	movw	r1, #12588	; 0x312c
   19dcc:	movt	r1, #2
   19dd0:	movw	r3, #19679	; 0x4cdf
   19dd4:	movt	r3, #2
   19dd8:	mov	r2, #820	; 0x334
   19ddc:	bl	12f88 <__assert_fail@plt>
   19de0:	push	{r4, r5, fp, lr}
   19de4:	add	fp, sp, #8
   19de8:	cmp	r0, #0
   19dec:	beq	19e30 <test_mixed_type_union@@Base+0xdbc>
   19df0:	mov	r4, r0
   19df4:	bl	1b61c <main@@Base+0x29c>
   19df8:	sub	r5, r4, r0
   19dfc:	mov	r0, r5
   19e00:	bl	1b624 <main@@Base+0x2a4>
   19e04:	cmp	r0, #6
   19e08:	bcc	19e28 <test_mixed_type_union@@Base+0xdb4>
   19e0c:	add	r0, r5, #4
   19e10:	bl	1b624 <main@@Base+0x2a4>
   19e14:	cmp	r0, #0
   19e18:	beq	19e28 <test_mixed_type_union@@Base+0xdb4>
   19e1c:	add	r0, r4, r0
   19e20:	pop	{r4, r5, fp, lr}
   19e24:	b	1bcd0 <main@@Base+0x950>
   19e28:	mov	r0, #0
   19e2c:	pop	{r4, r5, fp, pc}
   19e30:	movw	r0, #12550	; 0x3106
   19e34:	movt	r0, #2
   19e38:	movw	r1, #12588	; 0x312c
   19e3c:	movt	r1, #2
   19e40:	movw	r3, #19749	; 0x4d25
   19e44:	movt	r3, #2
   19e48:	movw	r2, #770	; 0x302
   19e4c:	bl	12f88 <__assert_fail@plt>
   19e50:	push	{r4, r5, fp, lr}
   19e54:	add	fp, sp, #8
   19e58:	cmp	r0, #0
   19e5c:	beq	19ea0 <test_mixed_type_union@@Base+0xe2c>
   19e60:	mov	r4, r0
   19e64:	bl	1b61c <main@@Base+0x29c>
   19e68:	sub	r5, r4, r0
   19e6c:	mov	r0, r5
   19e70:	bl	1b624 <main@@Base+0x2a4>
   19e74:	cmp	r0, #14
   19e78:	bcc	19e98 <test_mixed_type_union@@Base+0xe24>
   19e7c:	add	r0, r5, #12
   19e80:	bl	1b624 <main@@Base+0x2a4>
   19e84:	cmp	r0, #0
   19e88:	beq	19e98 <test_mixed_type_union@@Base+0xe24>
   19e8c:	add	r0, r4, r0
   19e90:	pop	{r4, r5, fp, lr}
   19e94:	b	1c818 <main@@Base+0x1498>
   19e98:	mov	r0, #0
   19e9c:	pop	{r4, r5, fp, pc}
   19ea0:	movw	r0, #12550	; 0x3106
   19ea4:	movt	r0, #2
   19ea8:	movw	r1, #12588	; 0x312c
   19eac:	movt	r1, #2
   19eb0:	movw	r3, #19820	; 0x4d6c
   19eb4:	movt	r3, #2
   19eb8:	movw	r2, #821	; 0x335
   19ebc:	bl	12f88 <__assert_fail@plt>
   19ec0:	cmp	r0, #0
   19ec4:	addne	r0, r0, #4
   19ec8:	bx	lr
   19ecc:	push	{r4, r5, r6, sl, fp, lr}
   19ed0:	add	fp, sp, #16
   19ed4:	cmp	r0, #0
   19ed8:	beq	19f24 <test_mixed_type_union@@Base+0xeb0>
   19edc:	mov	r4, r0
   19ee0:	bl	1b61c <main@@Base+0x29c>
   19ee4:	sub	r6, r4, r0
   19ee8:	mov	r0, r6
   19eec:	bl	1b624 <main@@Base+0x2a4>
   19ef0:	mov	r5, #0
   19ef4:	cmp	r0, #16
   19ef8:	bcc	19f1c <test_mixed_type_union@@Base+0xea8>
   19efc:	add	r0, r6, #14
   19f00:	bl	1b624 <main@@Base+0x2a4>
   19f04:	cmp	r0, #0
   19f08:	beq	19f1c <test_mixed_type_union@@Base+0xea8>
   19f0c:	add	r4, r4, r0
   19f10:	mov	r0, r4
   19f14:	bl	1b610 <main@@Base+0x290>
   19f18:	add	r5, r4, r0
   19f1c:	mov	r0, r5
   19f20:	pop	{r4, r5, r6, sl, fp, pc}
   19f24:	movw	r0, #12550	; 0x3106
   19f28:	movt	r0, #2
   19f2c:	movw	r1, #12588	; 0x312c
   19f30:	movt	r1, #2
   19f34:	movw	r3, #19903	; 0x4dbf
   19f38:	movt	r3, #2
   19f3c:	movw	r2, #821	; 0x335
   19f40:	bl	12f88 <__assert_fail@plt>
   19f44:	push	{fp, lr}
   19f48:	mov	fp, sp
   19f4c:	bl	19ecc <test_mixed_type_union@@Base+0xe58>
   19f50:	pop	{fp, lr}
   19f54:	b	19ec0 <test_mixed_type_union@@Base+0xe4c>
   19f58:	push	{r4, r5, fp, lr}
   19f5c:	add	fp, sp, #8
   19f60:	mov	r5, r1
   19f64:	mov	r4, r0
   19f68:	mov	r0, #0
   19f6c:	str	r0, [r4]
   19f70:	str	r0, [r4, #4]
   19f74:	mov	r0, r1
   19f78:	bl	19e50 <test_mixed_type_union@@Base+0xddc>
   19f7c:	strb	r0, [r4]
   19f80:	cmp	r0, #0
   19f84:	popeq	{r4, r5, fp, pc}
   19f88:	mov	r0, r5
   19f8c:	bl	19ecc <test_mixed_type_union@@Base+0xe58>
   19f90:	str	r0, [r4, #4]
   19f94:	pop	{r4, r5, fp, pc}
   19f98:	mov	r0, r1
   19f9c:	b	19ec0 <test_mixed_type_union@@Base+0xe4c>
   19fa0:	push	{r4, r5, r6, sl, fp, lr}
   19fa4:	add	fp, sp, #16
   19fa8:	mov	r4, r1
   19fac:	mov	r5, r0
   19fb0:	mov	r0, r1
   19fb4:	bl	1a084 <test_mixed_type_union@@Base+0x1010>
   19fb8:	mov	r6, r0
   19fbc:	str	r0, [r5]
   19fc0:	mov	r0, r4
   19fc4:	bl	1d63c <main@@Base+0x22bc>
   19fc8:	mov	r4, r0
   19fcc:	str	r0, [r5, #4]
   19fd0:	mov	r0, r6
   19fd4:	bl	1c7f8 <main@@Base+0x1478>
   19fd8:	mov	r5, r0
   19fdc:	mov	r0, r4
   19fe0:	bl	1c7f8 <main@@Base+0x1478>
   19fe4:	cmp	r5, r0
   19fe8:	popeq	{r4, r5, r6, sl, fp, pc}
   19fec:	movw	r0, #18424	; 0x47f8
   19ff0:	movt	r0, #2
   19ff4:	movw	r1, #12588	; 0x312c
   19ff8:	movt	r1, #2
   19ffc:	movw	r3, #19972	; 0x4e04
   1a000:	movt	r3, #2
   1a004:	movw	r2, #823	; 0x337
   1a008:	bl	12f88 <__assert_fail@plt>
   1a00c:	push	{r4, r5, r6, r7, fp, lr}
   1a010:	add	fp, sp, #16
   1a014:	mov	r5, r3
   1a018:	mov	r6, r2
   1a01c:	mov	r7, r1
   1a020:	mov	r4, r0
   1a024:	mov	r0, #0
   1a028:	str	r0, [r4]
   1a02c:	str	r0, [r4, #4]
   1a030:	mov	r0, r1
   1a034:	bl	1c7f8 <main@@Base+0x1478>
   1a038:	cmp	r0, r5
   1a03c:	bls	1a064 <test_mixed_type_union@@Base+0xff0>
   1a040:	ldrb	r0, [r7, r5]
   1a044:	strb	r0, [r4]
   1a048:	cmp	r0, #0
   1a04c:	beq	1a060 <test_mixed_type_union@@Base+0xfec>
   1a050:	mov	r0, r6
   1a054:	mov	r1, r5
   1a058:	bl	18ed0 <test_union_vector@@Base+0x4c8>
   1a05c:	str	r0, [r4, #4]
   1a060:	pop	{r4, r5, r6, r7, fp, pc}
   1a064:	movw	r0, #18617	; 0x48b9
   1a068:	movt	r0, #2
   1a06c:	movw	r1, #12588	; 0x312c
   1a070:	movt	r1, #2
   1a074:	movw	r3, #20130	; 0x4ea2
   1a078:	movt	r3, #2
   1a07c:	movw	r2, #773	; 0x305
   1a080:	bl	12f88 <__assert_fail@plt>
   1a084:	push	{r4, r5, r6, sl, fp, lr}
   1a088:	add	fp, sp, #16
   1a08c:	cmp	r0, #0
   1a090:	beq	1a0e0 <test_mixed_type_union@@Base+0x106c>
   1a094:	mov	r4, r0
   1a098:	bl	1b61c <main@@Base+0x29c>
   1a09c:	sub	r6, r4, r0
   1a0a0:	mov	r0, r6
   1a0a4:	bl	1b624 <main@@Base+0x2a4>
   1a0a8:	mov	r5, #0
   1a0ac:	cmp	r0, #22
   1a0b0:	bcc	1a0d8 <test_mixed_type_union@@Base+0x1064>
   1a0b4:	add	r0, r6, #20
   1a0b8:	bl	1b624 <main@@Base+0x2a4>
   1a0bc:	cmp	r0, #0
   1a0c0:	beq	1a0d8 <test_mixed_type_union@@Base+0x1064>
   1a0c4:	add	r4, r4, r0
   1a0c8:	mov	r0, r4
   1a0cc:	bl	1b610 <main@@Base+0x290>
   1a0d0:	add	r0, r4, r0
   1a0d4:	add	r5, r0, #4
   1a0d8:	mov	r0, r5
   1a0dc:	pop	{r4, r5, r6, sl, fp, pc}
   1a0e0:	movw	r0, #12550	; 0x3106
   1a0e4:	movt	r0, #2
   1a0e8:	movw	r1, #12588	; 0x312c
   1a0ec:	movt	r1, #2
   1a0f0:	movw	r3, #20226	; 0x4f02
   1a0f4:	movt	r3, #2
   1a0f8:	movw	r2, #823	; 0x337
   1a0fc:	bl	12f88 <__assert_fail@plt>
   1a100:	mov	r0, r1
   1a104:	b	1d6b8 <main@@Base+0x2338>
   1a108:	b	1c7f8 <main@@Base+0x1478>

0001a10c <test_add_set_defaults@@Base>:
   1a10c:	push	{r4, r5, fp, lr}
   1a110:	add	fp, sp, #8
   1a114:	sub	sp, sp, #8
   1a118:	mov	r4, r0
   1a11c:	bl	1db9c <flatcc_builder_reset@@Base>
   1a120:	mov	r0, r4
   1a124:	bl	16010 <gen_monster@@Base+0x4d4>
   1a128:	movw	r1, #9281	; 0x2441
   1a12c:	movt	r1, #2
   1a130:	mov	r0, r4
   1a134:	bl	13d54 <test_empty_monster@@Base+0x11c>
   1a138:	mov	r0, r4
   1a13c:	mov	r1, #100	; 0x64
   1a140:	bl	1603c <gen_monster@@Base+0x500>
   1a144:	mov	r0, r4
   1a148:	mov	r1, #100	; 0x64
   1a14c:	bl	1a280 <test_add_set_defaults@@Base+0x174>
   1a150:	mov	r0, r4
   1a154:	mov	r1, #8
   1a158:	bl	16088 <gen_monster@@Base+0x54c>
   1a15c:	mov	r0, r4
   1a160:	bl	16414 <gen_monster@@Base+0x8d8>
   1a164:	add	r1, sp, #4
   1a168:	mov	r0, r4
   1a16c:	bl	20898 <flatcc_builder_get_direct_buffer@@Base>
   1a170:	bl	13208 <verify_empty_monster@@Base+0x180>
   1a174:	mov	r5, r0
   1a178:	bl	132b8 <verify_empty_monster@@Base+0x230>
   1a17c:	cmp	r0, #0
   1a180:	beq	1a19c <test_add_set_defaults@@Base+0x90>
   1a184:	movw	r0, #26842	; 0x68da
   1a188:	movt	r0, #2
   1a18c:	bl	12ee0 <puts@plt>
   1a190:	mvn	r0, #0
   1a194:	sub	sp, fp, #8
   1a198:	pop	{r4, r5, fp, pc}
   1a19c:	mov	r0, r5
   1a1a0:	bl	152c4 <verify_monster@@Base+0xd0c>
   1a1a4:	cmp	r0, #0
   1a1a8:	beq	1a1c8 <test_add_set_defaults@@Base+0xbc>
   1a1ac:	mov	r0, r5
   1a1b0:	bl	1a2bc <test_add_set_defaults@@Base+0x1b0>
   1a1b4:	cmp	r0, #0
   1a1b8:	beq	1a1d4 <test_add_set_defaults@@Base+0xc8>
   1a1bc:	movw	r0, #26796	; 0x68ac
   1a1c0:	movt	r0, #2
   1a1c4:	b	1a18c <test_add_set_defaults@@Base+0x80>
   1a1c8:	movw	r0, #26583	; 0x67d7
   1a1cc:	movt	r0, #2
   1a1d0:	b	1a18c <test_add_set_defaults@@Base+0x80>
   1a1d4:	mov	r0, r4
   1a1d8:	bl	1db9c <flatcc_builder_reset@@Base>
   1a1dc:	mov	r0, r4
   1a1e0:	bl	16010 <gen_monster@@Base+0x4d4>
   1a1e4:	movw	r1, #9281	; 0x2441
   1a1e8:	movt	r1, #2
   1a1ec:	mov	r0, r4
   1a1f0:	bl	13d54 <test_empty_monster@@Base+0x11c>
   1a1f4:	mov	r0, r4
   1a1f8:	bl	1a324 <test_add_set_defaults@@Base+0x218>
   1a1fc:	mov	r0, r4
   1a200:	bl	1a350 <test_add_set_defaults@@Base+0x244>
   1a204:	mov	r0, r4
   1a208:	bl	1a37c <test_add_set_defaults@@Base+0x270>
   1a20c:	mov	r0, r4
   1a210:	bl	16414 <gen_monster@@Base+0x8d8>
   1a214:	add	r1, sp, #4
   1a218:	mov	r0, r4
   1a21c:	bl	20898 <flatcc_builder_get_direct_buffer@@Base>
   1a220:	bl	13208 <verify_empty_monster@@Base+0x180>
   1a224:	mov	r4, r0
   1a228:	bl	132b8 <verify_empty_monster@@Base+0x230>
   1a22c:	cmp	r0, #0
   1a230:	beq	1a268 <test_add_set_defaults@@Base+0x15c>
   1a234:	mov	r0, r4
   1a238:	bl	152c4 <verify_monster@@Base+0xd0c>
   1a23c:	cmp	r0, #0
   1a240:	beq	1a274 <test_add_set_defaults@@Base+0x168>
   1a244:	mov	r0, r4
   1a248:	bl	1a2bc <test_add_set_defaults@@Base+0x1b0>
   1a24c:	mov	r1, r0
   1a250:	mov	r0, #0
   1a254:	cmp	r1, #0
   1a258:	bne	1a194 <test_add_set_defaults@@Base+0x88>
   1a25c:	movw	r0, #26742	; 0x6876
   1a260:	movt	r0, #2
   1a264:	b	1a18c <test_add_set_defaults@@Base+0x80>
   1a268:	movw	r0, #26628	; 0x6804
   1a26c:	movt	r0, #2
   1a270:	b	1a18c <test_add_set_defaults@@Base+0x80>
   1a274:	movw	r0, #26679	; 0x6837
   1a278:	movt	r0, #2
   1a27c:	b	1a18c <test_add_set_defaults@@Base+0x80>
   1a280:	push	{r4, sl, fp, lr}
   1a284:	add	fp, sp, #8
   1a288:	cmp	r1, #150	; 0x96
   1a28c:	popeq	{r4, sl, fp, pc}
   1a290:	mov	r4, r1
   1a294:	mov	r1, #1
   1a298:	mov	r2, #2
   1a29c:	mov	r3, #2
   1a2a0:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1a2a4:	cmp	r0, #0
   1a2a8:	beq	1a2b8 <test_add_set_defaults@@Base+0x1ac>
   1a2ac:	mov	r1, r4
   1a2b0:	pop	{r4, sl, fp, lr}
   1a2b4:	b	1bae8 <main@@Base+0x768>
   1a2b8:	pop	{r4, sl, fp, pc}
   1a2bc:	push	{r4, sl, fp, lr}
   1a2c0:	add	fp, sp, #8
   1a2c4:	cmp	r0, #0
   1a2c8:	beq	1a304 <test_add_set_defaults@@Base+0x1f8>
   1a2cc:	mov	r4, r0
   1a2d0:	bl	1b61c <main@@Base+0x29c>
   1a2d4:	sub	r4, r4, r0
   1a2d8:	mov	r0, r4
   1a2dc:	bl	1b624 <main@@Base+0x2a4>
   1a2e0:	mov	r1, r0
   1a2e4:	mov	r0, #0
   1a2e8:	cmp	r1, #18
   1a2ec:	popcc	{r4, sl, fp, pc}
   1a2f0:	add	r0, r4, #16
   1a2f4:	bl	1b624 <main@@Base+0x2a4>
   1a2f8:	cmp	r0, #0
   1a2fc:	movwne	r0, #1
   1a300:	pop	{r4, sl, fp, pc}
   1a304:	movw	r0, #12550	; 0x3106
   1a308:	movt	r0, #2
   1a30c:	movw	r1, #12588	; 0x312c
   1a310:	movt	r1, #2
   1a314:	movw	r3, #20397	; 0x4fad
   1a318:	movt	r3, #2
   1a31c:	movw	r2, #705	; 0x2c1
   1a320:	bl	12f88 <__assert_fail@plt>
   1a324:	push	{fp, lr}
   1a328:	mov	fp, sp
   1a32c:	mov	r1, #2
   1a330:	mov	r2, #2
   1a334:	mov	r3, #2
   1a338:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1a33c:	cmp	r0, #0
   1a340:	popeq	{fp, pc}
   1a344:	mov	r1, #100	; 0x64
   1a348:	pop	{fp, lr}
   1a34c:	b	1bae8 <main@@Base+0x768>
   1a350:	push	{fp, lr}
   1a354:	mov	fp, sp
   1a358:	mov	r1, #1
   1a35c:	mov	r2, #2
   1a360:	mov	r3, #2
   1a364:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1a368:	cmp	r0, #0
   1a36c:	popeq	{fp, pc}
   1a370:	mov	r1, #100	; 0x64
   1a374:	pop	{fp, lr}
   1a378:	b	1bae8 <main@@Base+0x768>
   1a37c:	push	{fp, lr}
   1a380:	mov	fp, sp
   1a384:	mov	r1, #6
   1a388:	mov	r2, #1
   1a38c:	mov	r3, #1
   1a390:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1a394:	cmp	r0, #0
   1a398:	popeq	{fp, pc}
   1a39c:	mov	r1, #8
   1a3a0:	pop	{fp, lr}
   1a3a4:	b	1c838 <main@@Base+0x14b8>

0001a3a8 <test_nested_buffer@@Base>:
   1a3a8:	push	{r4, r5, fp, lr}
   1a3ac:	add	fp, sp, #8
   1a3b0:	sub	sp, sp, #8
   1a3b4:	mov	r5, r0
   1a3b8:	bl	1db9c <flatcc_builder_reset@@Base>
   1a3bc:	mov	r0, r5
   1a3c0:	bl	16010 <gen_monster@@Base+0x4d4>
   1a3c4:	movw	r4, #9281	; 0x2441
   1a3c8:	movt	r4, #2
   1a3cc:	mov	r0, r5
   1a3d0:	mov	r1, r4
   1a3d4:	bl	13d54 <test_empty_monster@@Base+0x11c>
   1a3d8:	mov	r0, r5
   1a3dc:	bl	1a4d8 <test_nested_buffer@@Base+0x130>
   1a3e0:	movw	r1, #12165	; 0x2f85
   1a3e4:	movt	r1, #2
   1a3e8:	mov	r0, r5
   1a3ec:	bl	13d54 <test_empty_monster@@Base+0x11c>
   1a3f0:	mov	r0, r5
   1a3f4:	bl	1a504 <test_nested_buffer@@Base+0x15c>
   1a3f8:	mov	r0, r5
   1a3fc:	mov	r1, #10
   1a400:	bl	1603c <gen_monster@@Base+0x500>
   1a404:	mov	r0, r5
   1a408:	bl	16414 <gen_monster@@Base+0x8d8>
   1a40c:	add	r1, sp, #4
   1a410:	mov	r0, r5
   1a414:	bl	20898 <flatcc_builder_get_direct_buffer@@Base>
   1a418:	mov	r5, r0
   1a41c:	movw	r0, #36976	; 0x9070
   1a420:	movt	r0, #3
   1a424:	ldr	r3, [r0]
   1a428:	ldr	r2, [sp, #4]
   1a42c:	movw	r0, #12181	; 0x2f95
   1a430:	movt	r0, #2
   1a434:	mov	r1, r5
   1a438:	bl	1364c <test_type_aliases@@Base+0x254>
   1a43c:	mov	r0, r5
   1a440:	bl	13208 <verify_empty_monster@@Base+0x180>
   1a444:	mov	r5, r0
   1a448:	bl	15048 <verify_monster@@Base+0xa90>
   1a44c:	mov	r1, r4
   1a450:	bl	12e8c <strcmp@plt>
   1a454:	cmp	r0, #0
   1a458:	beq	1a468 <test_nested_buffer@@Base+0xc0>
   1a45c:	movw	r0, #26950	; 0x6946
   1a460:	movt	r0, #2
   1a464:	b	1a4bc <test_nested_buffer@@Base+0x114>
   1a468:	mov	r0, r5
   1a46c:	bl	1a530 <test_nested_buffer@@Base+0x188>
   1a470:	mov	r4, r0
   1a474:	mov	r0, r5
   1a478:	bl	13248 <verify_empty_monster@@Base+0x1c0>
   1a47c:	cmp	r0, #10
   1a480:	bne	1a4b4 <test_nested_buffer@@Base+0x10c>
   1a484:	mov	r0, r4
   1a488:	bl	15048 <verify_monster@@Base+0xa90>
   1a48c:	mov	r0, r4
   1a490:	bl	15048 <verify_monster@@Base+0xa90>
   1a494:	movw	r1, #12165	; 0x2f85
   1a498:	movt	r1, #2
   1a49c:	bl	12e8c <strcmp@plt>
   1a4a0:	cmp	r0, #0
   1a4a4:	beq	1a4cc <test_nested_buffer@@Base+0x124>
   1a4a8:	movw	r0, #26885	; 0x6905
   1a4ac:	movt	r0, #2
   1a4b0:	b	1a4bc <test_nested_buffer@@Base+0x114>
   1a4b4:	movw	r0, #26914	; 0x6922
   1a4b8:	movt	r0, #2
   1a4bc:	bl	12ee0 <puts@plt>
   1a4c0:	mvn	r0, #0
   1a4c4:	sub	sp, fp, #8
   1a4c8:	pop	{r4, r5, fp, pc}
   1a4cc:	mov	r0, #0
   1a4d0:	sub	sp, fp, #8
   1a4d4:	pop	{r4, r5, fp, pc}
   1a4d8:	push	{r4, sl, fp, lr}
   1a4dc:	add	fp, sp, #8
   1a4e0:	mov	r4, r0
   1a4e4:	movw	r1, #9108	; 0x2394
   1a4e8:	movt	r1, #2
   1a4ec:	bl	13d40 <test_empty_monster@@Base+0x108>
   1a4f0:	cmp	r0, #0
   1a4f4:	popne	{r4, sl, fp, pc}
   1a4f8:	mov	r0, r4
   1a4fc:	pop	{r4, sl, fp, lr}
   1a500:	b	13d4c <test_empty_monster@@Base+0x114>
   1a504:	push	{r4, sl, fp, lr}
   1a508:	add	fp, sp, #8
   1a50c:	mov	r4, r0
   1a510:	bl	13d74 <test_empty_monster@@Base+0x13c>
   1a514:	mov	r1, r0
   1a518:	mov	r0, r4
   1a51c:	bl	13dc4 <test_empty_monster@@Base+0x18c>
   1a520:	mov	r1, r0
   1a524:	mov	r0, r4
   1a528:	pop	{r4, sl, fp, lr}
   1a52c:	b	1d708 <main@@Base+0x2388>
   1a530:	push	{r4, r5, fp, lr}
   1a534:	add	fp, sp, #8
   1a538:	bl	1d730 <main@@Base+0x23b0>
   1a53c:	mov	r5, #0
   1a540:	cmp	r0, #0
   1a544:	beq	1a56c <test_nested_buffer@@Base+0x1c4>
   1a548:	mov	r4, r0
   1a54c:	movw	r1, #9108	; 0x2394
   1a550:	movt	r1, #2
   1a554:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1a558:	cmp	r0, #0
   1a55c:	beq	1a56c <test_nested_buffer@@Base+0x1c4>
   1a560:	mov	r0, r4
   1a564:	bl	1b610 <main@@Base+0x290>
   1a568:	add	r5, r4, r0
   1a56c:	mov	r0, r5
   1a570:	pop	{r4, r5, fp, pc}

0001a574 <test_nested_buffer_first@@Base>:
   1a574:	push	{r4, r5, fp, lr}
   1a578:	add	fp, sp, #8
   1a57c:	sub	sp, sp, #8
   1a580:	mov	r4, r0
   1a584:	bl	1db9c <flatcc_builder_reset@@Base>
   1a588:	mov	r0, r4
   1a58c:	bl	16010 <gen_monster@@Base+0x4d4>
   1a590:	mov	r0, r4
   1a594:	bl	1a4d8 <test_nested_buffer@@Base+0x130>
   1a598:	movw	r1, #12165	; 0x2f85
   1a59c:	movt	r1, #2
   1a5a0:	mov	r0, r4
   1a5a4:	bl	13d54 <test_empty_monster@@Base+0x11c>
   1a5a8:	mov	r0, r4
   1a5ac:	bl	1a504 <test_nested_buffer@@Base+0x15c>
   1a5b0:	mov	r0, r4
   1a5b4:	mov	r1, #10
   1a5b8:	bl	1603c <gen_monster@@Base+0x500>
   1a5bc:	movw	r5, #9281	; 0x2441
   1a5c0:	movt	r5, #2
   1a5c4:	mov	r0, r4
   1a5c8:	mov	r1, r5
   1a5cc:	bl	13d54 <test_empty_monster@@Base+0x11c>
   1a5d0:	mov	r0, r4
   1a5d4:	bl	16414 <gen_monster@@Base+0x8d8>
   1a5d8:	add	r1, sp, #4
   1a5dc:	mov	r0, r4
   1a5e0:	bl	20898 <flatcc_builder_get_direct_buffer@@Base>
   1a5e4:	mov	r4, r0
   1a5e8:	movw	r0, #36976	; 0x9070
   1a5ec:	movt	r0, #3
   1a5f0:	ldr	r3, [r0]
   1a5f4:	ldr	r2, [sp, #4]
   1a5f8:	movw	r0, #12181	; 0x2f95
   1a5fc:	movt	r0, #2
   1a600:	mov	r1, r4
   1a604:	bl	1364c <test_type_aliases@@Base+0x254>
   1a608:	mov	r0, r4
   1a60c:	bl	13208 <verify_empty_monster@@Base+0x180>
   1a610:	mov	r4, r0
   1a614:	bl	15048 <verify_monster@@Base+0xa90>
   1a618:	mov	r1, r5
   1a61c:	bl	12e8c <strcmp@plt>
   1a620:	cmp	r0, #0
   1a624:	beq	1a634 <test_nested_buffer_first@@Base+0xc0>
   1a628:	movw	r0, #26950	; 0x6946
   1a62c:	movt	r0, #2
   1a630:	b	1a688 <test_nested_buffer_first@@Base+0x114>
   1a634:	mov	r0, r4
   1a638:	bl	1a530 <test_nested_buffer@@Base+0x188>
   1a63c:	mov	r5, r0
   1a640:	mov	r0, r4
   1a644:	bl	13248 <verify_empty_monster@@Base+0x1c0>
   1a648:	cmp	r0, #10
   1a64c:	bne	1a680 <test_nested_buffer_first@@Base+0x10c>
   1a650:	mov	r0, r5
   1a654:	bl	15048 <verify_monster@@Base+0xa90>
   1a658:	mov	r0, r5
   1a65c:	bl	15048 <verify_monster@@Base+0xa90>
   1a660:	movw	r1, #12165	; 0x2f85
   1a664:	movt	r1, #2
   1a668:	bl	12e8c <strcmp@plt>
   1a66c:	cmp	r0, #0
   1a670:	beq	1a698 <test_nested_buffer_first@@Base+0x124>
   1a674:	movw	r0, #26885	; 0x6905
   1a678:	movt	r0, #2
   1a67c:	b	1a688 <test_nested_buffer_first@@Base+0x114>
   1a680:	movw	r0, #26914	; 0x6922
   1a684:	movt	r0, #2
   1a688:	bl	12ee0 <puts@plt>
   1a68c:	mvn	r0, #0
   1a690:	sub	sp, fp, #8
   1a694:	pop	{r4, r5, fp, pc}
   1a698:	mov	r0, #0
   1a69c:	sub	sp, fp, #8
   1a6a0:	pop	{r4, r5, fp, pc}

0001a6a4 <test_nested_buffer_using_nest@@Base>:
   1a6a4:	push	{r4, r5, r6, sl, fp, lr}
   1a6a8:	add	fp, sp, #16
   1a6ac:	sub	sp, sp, #8
   1a6b0:	sub	sp, sp, #1024	; 0x400
   1a6b4:	mov	r4, r0
   1a6b8:	bl	1db9c <flatcc_builder_reset@@Base>
   1a6bc:	mov	r0, r4
   1a6c0:	bl	16010 <gen_monster@@Base+0x4d4>
   1a6c4:	movw	r1, #12165	; 0x2f85
   1a6c8:	movt	r1, #2
   1a6cc:	mov	r0, r4
   1a6d0:	bl	13d54 <test_empty_monster@@Base+0x11c>
   1a6d4:	mov	r0, r4
   1a6d8:	mov	r1, #42	; 0x2a
   1a6dc:	bl	1a280 <test_add_set_defaults@@Base+0x174>
   1a6e0:	mov	r0, r4
   1a6e4:	bl	16414 <gen_monster@@Base+0x8d8>
   1a6e8:	mov	r0, r4
   1a6ec:	bl	2080c <flatcc_builder_get_buffer_size@@Base>
   1a6f0:	mov	r5, r0
   1a6f4:	add	r1, sp, #8
   1a6f8:	mov	r0, r4
   1a6fc:	mov	r2, #1024	; 0x400
   1a700:	bl	208f0 <flatcc_builder_copy_buffer@@Base>
   1a704:	cmp	r0, #0
   1a708:	beq	1a7b0 <test_nested_buffer_using_nest@@Base+0x10c>
   1a70c:	mov	r0, r4
   1a710:	bl	1db9c <flatcc_builder_reset@@Base>
   1a714:	mov	r0, r4
   1a718:	bl	16010 <gen_monster@@Base+0x4d4>
   1a71c:	add	r1, sp, #8
   1a720:	mov	r0, r4
   1a724:	mov	r2, r5
   1a728:	bl	1a844 <test_nested_buffer_using_nest@@Base+0x1a0>
   1a72c:	mov	r0, r4
   1a730:	mov	r1, #10
   1a734:	bl	1603c <gen_monster@@Base+0x500>
   1a738:	movw	r5, #9281	; 0x2441
   1a73c:	movt	r5, #2
   1a740:	mov	r0, r4
   1a744:	mov	r1, r5
   1a748:	bl	13d54 <test_empty_monster@@Base+0x11c>
   1a74c:	mov	r0, r4
   1a750:	bl	16414 <gen_monster@@Base+0x8d8>
   1a754:	add	r1, sp, #4
   1a758:	mov	r0, r4
   1a75c:	bl	20898 <flatcc_builder_get_direct_buffer@@Base>
   1a760:	mov	r4, r0
   1a764:	movw	r0, #36976	; 0x9070
   1a768:	movt	r0, #3
   1a76c:	ldr	r3, [r0]
   1a770:	ldr	r2, [sp, #4]
   1a774:	movw	r0, #12199	; 0x2fa7
   1a778:	movt	r0, #2
   1a77c:	mov	r1, r4
   1a780:	bl	1364c <test_type_aliases@@Base+0x254>
   1a784:	mov	r0, r4
   1a788:	bl	13208 <verify_empty_monster@@Base+0x180>
   1a78c:	mov	r6, r0
   1a790:	bl	15048 <verify_monster@@Base+0xa90>
   1a794:	mov	r1, r5
   1a798:	bl	12e8c <strcmp@plt>
   1a79c:	cmp	r0, #0
   1a7a0:	beq	1a7bc <test_nested_buffer_using_nest@@Base+0x118>
   1a7a4:	movw	r0, #26950	; 0x6946
   1a7a8:	movt	r0, #2
   1a7ac:	b	1a810 <test_nested_buffer_using_nest@@Base+0x16c>
   1a7b0:	movw	r0, #26977	; 0x6961
   1a7b4:	movt	r0, #2
   1a7b8:	b	1a810 <test_nested_buffer_using_nest@@Base+0x16c>
   1a7bc:	mov	r0, r6
   1a7c0:	bl	1a530 <test_nested_buffer@@Base+0x188>
   1a7c4:	mov	r4, r0
   1a7c8:	mov	r0, r6
   1a7cc:	bl	13248 <verify_empty_monster@@Base+0x1c0>
   1a7d0:	cmp	r0, #10
   1a7d4:	bne	1a808 <test_nested_buffer_using_nest@@Base+0x164>
   1a7d8:	mov	r0, r4
   1a7dc:	bl	15048 <verify_monster@@Base+0xa90>
   1a7e0:	mov	r0, r4
   1a7e4:	bl	15048 <verify_monster@@Base+0xa90>
   1a7e8:	movw	r1, #12165	; 0x2f85
   1a7ec:	movt	r1, #2
   1a7f0:	bl	12e8c <strcmp@plt>
   1a7f4:	cmp	r0, #0
   1a7f8:	beq	1a820 <test_nested_buffer_using_nest@@Base+0x17c>
   1a7fc:	movw	r0, #26885	; 0x6905
   1a800:	movt	r0, #2
   1a804:	b	1a810 <test_nested_buffer_using_nest@@Base+0x16c>
   1a808:	movw	r0, #26914	; 0x6922
   1a80c:	movt	r0, #2
   1a810:	bl	12ee0 <puts@plt>
   1a814:	mvn	r0, #0
   1a818:	sub	sp, fp, #16
   1a81c:	pop	{r4, r5, r6, sl, fp, pc}
   1a820:	mov	r0, r4
   1a824:	bl	15254 <verify_monster@@Base+0xc9c>
   1a828:	mov	r1, r0
   1a82c:	mov	r0, #0
   1a830:	cmp	r1, #42	; 0x2a
   1a834:	beq	1a818 <test_nested_buffer_using_nest@@Base+0x174>
   1a838:	movw	r0, #27003	; 0x697b
   1a83c:	movt	r0, #2
   1a840:	b	1a810 <test_nested_buffer_using_nest@@Base+0x16c>
   1a844:	push	{r4, sl, fp, lr}
   1a848:	add	fp, sp, #8
   1a84c:	sub	sp, sp, #8
   1a850:	mov	r4, r0
   1a854:	mvn	r0, #0
   1a858:	mov	r3, #8
   1a85c:	str	r3, [sp]
   1a860:	str	r0, [sp, #4]
   1a864:	mov	r0, r4
   1a868:	mov	r3, #1
   1a86c:	bl	1f884 <flatcc_builder_create_vector@@Base>
   1a870:	mov	r1, r0
   1a874:	mov	r0, r4
   1a878:	sub	sp, fp, #8
   1a87c:	pop	{r4, sl, fp, lr}
   1a880:	b	1d708 <main@@Base+0x2388>

0001a884 <verify_include@@Base>:
   1a884:	mov	r0, #0
   1a888:	bx	lr
   1a88c:	nop	{0}

0001a890 <test_struct_buffer@@Base>:
   1a890:	push	{r4, sl, fp, lr}
   1a894:	add	fp, sp, #8
   1a898:	sub	sp, sp, #104	; 0x68
   1a89c:	mov	r4, r0
   1a8a0:	bl	1db9c <flatcc_builder_reset@@Base>
   1a8a4:	mov	r0, r4
   1a8a8:	bl	1aa80 <test_struct_buffer@@Base+0x1f0>
   1a8ac:	mov	r0, r4
   1a8b0:	bl	2080c <flatcc_builder_get_buffer_size@@Base>
   1a8b4:	cmp	r0, #48	; 0x30
   1a8b8:	bne	1aa38 <test_struct_buffer@@Base+0x1a8>
   1a8bc:	movw	r0, #12287	; 0x2fff
   1a8c0:	movt	r0, #2
   1a8c4:	mov	r1, #48	; 0x30
   1a8c8:	bl	12e98 <printf@plt>
   1a8cc:	mov	r0, r4
   1a8d0:	bl	20ab0 <flatcc_builder_get_emit_context@@Base>
   1a8d4:	bl	1aac4 <test_struct_buffer@@Base+0x234>
   1a8d8:	cmp	r0, #48	; 0x30
   1a8dc:	bne	1aa58 <test_struct_buffer@@Base+0x1c8>
   1a8e0:	add	r1, sp, #4
   1a8e4:	mov	r0, r4
   1a8e8:	mov	r2, #100	; 0x64
   1a8ec:	bl	208f0 <flatcc_builder_copy_buffer@@Base>
   1a8f0:	cmp	r0, #0
   1a8f4:	beq	1a958 <test_struct_buffer@@Base+0xc8>
   1a8f8:	movw	r0, #36976	; 0x9070
   1a8fc:	movt	r0, #3
   1a900:	ldr	r3, [r0]
   1a904:	movw	r0, #12451	; 0x30a3
   1a908:	movt	r0, #2
   1a90c:	add	r4, sp, #4
   1a910:	mov	r1, r4
   1a914:	mov	r2, #48	; 0x30
   1a918:	bl	1364c <test_type_aliases@@Base+0x254>
   1a91c:	movw	r1, #9108	; 0x2394
   1a920:	movt	r1, #2
   1a924:	mov	r0, r4
   1a928:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1a92c:	cmp	r0, #0
   1a930:	beq	1a964 <test_struct_buffer@@Base+0xd4>
   1a934:	add	r0, sp, #4
   1a938:	movw	r1, #12391	; 0x3067
   1a93c:	movt	r1, #2
   1a940:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1a944:	cmp	r0, #0
   1a948:	beq	1a980 <test_struct_buffer@@Base+0xf0>
   1a94c:	movw	r0, #27110	; 0x69e6
   1a950:	movt	r0, #2
   1a954:	b	1a96c <test_struct_buffer@@Base+0xdc>
   1a958:	movw	r0, #27039	; 0x699f
   1a95c:	movt	r0, #2
   1a960:	b	1a96c <test_struct_buffer@@Base+0xdc>
   1a964:	movw	r0, #27119	; 0x69ef
   1a968:	movt	r0, #2
   1a96c:	bl	12ee0 <puts@plt>
   1a970:	mvn	r1, #0
   1a974:	mov	r0, r1
   1a978:	sub	sp, fp, #8
   1a97c:	pop	{r4, sl, fp, pc}
   1a980:	add	r0, sp, #4
   1a984:	movw	r1, #9108	; 0x2394
   1a988:	movt	r1, #2
   1a98c:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1a990:	cmp	r0, #0
   1a994:	beq	1aa2c <test_struct_buffer@@Base+0x19c>
   1a998:	add	r0, sp, #4
   1a99c:	bl	1aacc <test_struct_buffer@@Base+0x23c>
   1a9a0:	mov	r1, r0
   1a9a4:	movw	r0, #27086	; 0x69ce
   1a9a8:	movt	r0, #2
   1a9ac:	vldr	s0, [r1]
   1a9b0:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1a9b4:	vcmp.f32	s0, s2
   1a9b8:	vmrs	APSR_nzcv, fpscr
   1a9bc:	bne	1a96c <test_struct_buffer@@Base+0xdc>
   1a9c0:	vldr	s0, [r1, #4]
   1a9c4:	vmov.f32	s2, #0	; 0x40000000  2.0
   1a9c8:	vcmp.f32	s0, s2
   1a9cc:	vmrs	APSR_nzcv, fpscr
   1a9d0:	bne	1a96c <test_struct_buffer@@Base+0xdc>
   1a9d4:	vldr	s0, [r1, #8]
   1a9d8:	vmov.f32	s2, #8	; 0x40400000  3.0
   1a9dc:	vcmp.f32	s0, s2
   1a9e0:	vmrs	APSR_nzcv, fpscr
   1a9e4:	bne	1a96c <test_struct_buffer@@Base+0xdc>
   1a9e8:	vldr	d16, [pc, #136]	; 1aa78 <test_struct_buffer@@Base+0x1e8>
   1a9ec:	vldr	d17, [r1, #16]
   1a9f0:	vcmp.f64	d17, d16
   1a9f4:	vmrs	APSR_nzcv, fpscr
   1a9f8:	bne	1a96c <test_struct_buffer@@Base+0xdc>
   1a9fc:	ldrb	r2, [r1, #24]
   1aa00:	cmp	r2, #8
   1aa04:	bne	1a96c <test_struct_buffer@@Base+0xdc>
   1aa08:	ldrh	r2, [r1, #26]
   1aa0c:	movw	r3, #2730	; 0xaaa
   1aa10:	cmp	r2, r3
   1aa14:	bne	1a96c <test_struct_buffer@@Base+0xdc>
   1aa18:	ldrb	r2, [r1, #28]
   1aa1c:	mov	r1, #0
   1aa20:	cmp	r2, #239	; 0xef
   1aa24:	bne	1a96c <test_struct_buffer@@Base+0xdc>
   1aa28:	b	1a974 <test_struct_buffer@@Base+0xe4>
   1aa2c:	movw	r0, #27051	; 0x69ab
   1aa30:	movt	r0, #2
   1aa34:	b	1a96c <test_struct_buffer@@Base+0xdc>
   1aa38:	movw	r0, #12233	; 0x2fc9
   1aa3c:	movt	r0, #2
   1aa40:	movw	r1, #9718	; 0x25f6
   1aa44:	movt	r1, #2
   1aa48:	movw	r3, #12244	; 0x2fd4
   1aa4c:	movt	r3, #2
   1aa50:	movw	r2, #2339	; 0x923
   1aa54:	bl	12f88 <__assert_fail@plt>
   1aa58:	movw	r0, #12316	; 0x301c
   1aa5c:	movt	r0, #2
   1aa60:	movw	r1, #9718	; 0x25f6
   1aa64:	movt	r1, #2
   1aa68:	movw	r3, #12244	; 0x2fd4
   1aa6c:	movt	r3, #2
   1aa70:	movw	r2, #2341	; 0x925
   1aa74:	bl	12f88 <__assert_fail@plt>
   1aa78:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1aa7c:	andsmi	ip, r0, ip, asr #25
   1aa80:	push	{r4, sl, fp, lr}
   1aa84:	add	fp, sp, #8
   1aa88:	sub	sp, sp, #8
   1aa8c:	mov	r4, r0
   1aa90:	bl	1d7ac <main@@Base+0x242c>
   1aa94:	mov	r3, r0
   1aa98:	mov	r0, #0
   1aa9c:	mov	r1, #16
   1aaa0:	str	r1, [sp]
   1aaa4:	str	r0, [sp, #4]
   1aaa8:	movw	r1, #9108	; 0x2394
   1aaac:	movt	r1, #2
   1aab0:	mov	r0, r4
   1aab4:	mov	r2, #0
   1aab8:	bl	1e098 <flatcc_builder_create_buffer@@Base>
   1aabc:	sub	sp, fp, #8
   1aac0:	pop	{r4, sl, fp, pc}
   1aac4:	ldr	r0, [r0, #24]
   1aac8:	bx	lr
   1aacc:	push	{r4, r5, fp, lr}
   1aad0:	add	fp, sp, #8
   1aad4:	mov	r5, #0
   1aad8:	cmp	r0, #0
   1aadc:	beq	1ab04 <test_struct_buffer@@Base+0x274>
   1aae0:	mov	r4, r0
   1aae4:	movw	r1, #9108	; 0x2394
   1aae8:	movt	r1, #2
   1aaec:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1aaf0:	cmp	r0, #0
   1aaf4:	beq	1ab04 <test_struct_buffer@@Base+0x274>
   1aaf8:	mov	r0, r4
   1aafc:	bl	1b610 <main@@Base+0x290>
   1ab00:	add	r5, r4, r0
   1ab04:	mov	r0, r5
   1ab08:	pop	{r4, r5, fp, pc}
   1ab0c:	nop	{0}

0001ab10 <test_typed_struct_buffer@@Base>:
   1ab10:	push	{r4, sl, fp, lr}
   1ab14:	add	fp, sp, #8
   1ab18:	sub	sp, sp, #104	; 0x68
   1ab1c:	mov	r4, r0
   1ab20:	bl	1db9c <flatcc_builder_reset@@Base>
   1ab24:	mov	r0, r4
   1ab28:	bl	1ad68 <test_typed_struct_buffer@@Base+0x258>
   1ab2c:	mov	r0, r4
   1ab30:	bl	2080c <flatcc_builder_get_buffer_size@@Base>
   1ab34:	cmp	r0, #48	; 0x30
   1ab38:	bne	1ad20 <test_typed_struct_buffer@@Base+0x210>
   1ab3c:	movw	r0, #12287	; 0x2fff
   1ab40:	movt	r0, #2
   1ab44:	mov	r1, #48	; 0x30
   1ab48:	bl	12e98 <printf@plt>
   1ab4c:	mov	r0, r4
   1ab50:	bl	20ab0 <flatcc_builder_get_emit_context@@Base>
   1ab54:	bl	1aac4 <test_struct_buffer@@Base+0x234>
   1ab58:	cmp	r0, #48	; 0x30
   1ab5c:	bne	1ad40 <test_typed_struct_buffer@@Base+0x230>
   1ab60:	add	r1, sp, #4
   1ab64:	mov	r0, r4
   1ab68:	mov	r2, #100	; 0x64
   1ab6c:	bl	208f0 <flatcc_builder_copy_buffer@@Base>
   1ab70:	cmp	r0, #0
   1ab74:	beq	1abd8 <test_typed_struct_buffer@@Base+0xc8>
   1ab78:	movw	r0, #36976	; 0x9070
   1ab7c:	movt	r0, #3
   1ab80:	ldr	r3, [r0]
   1ab84:	movw	r0, #12445	; 0x309d
   1ab88:	movt	r0, #2
   1ab8c:	add	r4, sp, #4
   1ab90:	mov	r1, r4
   1ab94:	mov	r2, #48	; 0x30
   1ab98:	bl	1364c <test_type_aliases@@Base+0x254>
   1ab9c:	movw	r1, #12470	; 0x30b6
   1aba0:	movt	r1, #2
   1aba4:	mov	r0, r4
   1aba8:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1abac:	cmp	r0, #0
   1abb0:	beq	1abe4 <test_typed_struct_buffer@@Base+0xd4>
   1abb4:	add	r0, sp, #4
   1abb8:	movw	r1, #12391	; 0x3067
   1abbc:	movt	r1, #2
   1abc0:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1abc4:	cmp	r0, #0
   1abc8:	beq	1ac00 <test_typed_struct_buffer@@Base+0xf0>
   1abcc:	movw	r0, #27110	; 0x69e6
   1abd0:	movt	r0, #2
   1abd4:	b	1abec <test_typed_struct_buffer@@Base+0xdc>
   1abd8:	movw	r0, #27039	; 0x699f
   1abdc:	movt	r0, #2
   1abe0:	b	1abec <test_typed_struct_buffer@@Base+0xdc>
   1abe4:	movw	r0, #27119	; 0x69ef
   1abe8:	movt	r0, #2
   1abec:	bl	12ee0 <puts@plt>
   1abf0:	mvn	r1, #0
   1abf4:	mov	r0, r1
   1abf8:	sub	sp, fp, #8
   1abfc:	pop	{r4, sl, fp, pc}
   1ac00:	add	r0, sp, #4
   1ac04:	movw	r1, #12470	; 0x30b6
   1ac08:	movt	r1, #2
   1ac0c:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1ac10:	cmp	r0, #0
   1ac14:	beq	1ac44 <test_typed_struct_buffer@@Base+0x134>
   1ac18:	add	r0, sp, #4
   1ac1c:	bl	1adac <test_typed_struct_buffer@@Base+0x29c>
   1ac20:	cmp	r0, #0
   1ac24:	beq	1ac50 <test_typed_struct_buffer@@Base+0x140>
   1ac28:	add	r0, sp, #4
   1ac2c:	bl	1adec <test_typed_struct_buffer@@Base+0x2dc>
   1ac30:	cmp	r0, #0
   1ac34:	beq	1ac5c <test_typed_struct_buffer@@Base+0x14c>
   1ac38:	movw	r0, #27259	; 0x6a7b
   1ac3c:	movt	r0, #2
   1ac40:	b	1abec <test_typed_struct_buffer@@Base+0xdc>
   1ac44:	movw	r0, #27051	; 0x69ab
   1ac48:	movt	r0, #2
   1ac4c:	b	1abec <test_typed_struct_buffer@@Base+0xdc>
   1ac50:	movw	r0, #27152	; 0x6a10
   1ac54:	movt	r0, #2
   1ac58:	b	1abec <test_typed_struct_buffer@@Base+0xdc>
   1ac5c:	add	r0, sp, #4
   1ac60:	bl	1ae1c <test_typed_struct_buffer@@Base+0x30c>
   1ac64:	cmp	r0, #0
   1ac68:	beq	1ac8c <test_typed_struct_buffer@@Base+0x17c>
   1ac6c:	mov	r4, r0
   1ac70:	add	r0, sp, #4
   1ac74:	bl	1ae5c <test_typed_struct_buffer@@Base+0x34c>
   1ac78:	cmp	r0, #0
   1ac7c:	beq	1ac98 <test_typed_struct_buffer@@Base+0x188>
   1ac80:	movw	r0, #27221	; 0x6a55
   1ac84:	movt	r0, #2
   1ac88:	b	1abec <test_typed_struct_buffer@@Base+0xdc>
   1ac8c:	movw	r0, #27192	; 0x6a38
   1ac90:	movt	r0, #2
   1ac94:	b	1abec <test_typed_struct_buffer@@Base+0xdc>
   1ac98:	vldr	s0, [r4]
   1ac9c:	movw	r0, #27086	; 0x69ce
   1aca0:	movt	r0, #2
   1aca4:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1aca8:	vcmp.f32	s0, s2
   1acac:	vmrs	APSR_nzcv, fpscr
   1acb0:	bne	1abec <test_typed_struct_buffer@@Base+0xdc>
   1acb4:	vldr	s0, [r4, #4]
   1acb8:	vmov.f32	s2, #0	; 0x40000000  2.0
   1acbc:	vcmp.f32	s0, s2
   1acc0:	vmrs	APSR_nzcv, fpscr
   1acc4:	bne	1abec <test_typed_struct_buffer@@Base+0xdc>
   1acc8:	vldr	s0, [r4, #8]
   1accc:	vmov.f32	s2, #8	; 0x40400000  3.0
   1acd0:	vcmp.f32	s0, s2
   1acd4:	vmrs	APSR_nzcv, fpscr
   1acd8:	bne	1abec <test_typed_struct_buffer@@Base+0xdc>
   1acdc:	vldr	d16, [pc, #124]	; 1ad60 <test_typed_struct_buffer@@Base+0x250>
   1ace0:	vldr	d17, [r4, #16]
   1ace4:	vcmp.f64	d17, d16
   1ace8:	vmrs	APSR_nzcv, fpscr
   1acec:	bne	1abec <test_typed_struct_buffer@@Base+0xdc>
   1acf0:	ldrb	r1, [r4, #24]
   1acf4:	cmp	r1, #8
   1acf8:	bne	1abec <test_typed_struct_buffer@@Base+0xdc>
   1acfc:	ldrh	r1, [r4, #26]
   1ad00:	movw	r2, #2730	; 0xaaa
   1ad04:	cmp	r1, r2
   1ad08:	bne	1abec <test_typed_struct_buffer@@Base+0xdc>
   1ad0c:	ldrb	r2, [r4, #28]
   1ad10:	mov	r1, #0
   1ad14:	cmp	r2, #239	; 0xef
   1ad18:	bne	1abec <test_typed_struct_buffer@@Base+0xdc>
   1ad1c:	b	1abf4 <test_typed_struct_buffer@@Base+0xe4>
   1ad20:	movw	r0, #12233	; 0x2fc9
   1ad24:	movt	r0, #2
   1ad28:	movw	r1, #9718	; 0x25f6
   1ad2c:	movt	r1, #2
   1ad30:	movw	r3, #12396	; 0x306c
   1ad34:	movt	r3, #2
   1ad38:	movw	r2, #2388	; 0x954
   1ad3c:	bl	12f88 <__assert_fail@plt>
   1ad40:	movw	r0, #12316	; 0x301c
   1ad44:	movt	r0, #2
   1ad48:	movw	r1, #9718	; 0x25f6
   1ad4c:	movt	r1, #2
   1ad50:	movw	r3, #12396	; 0x306c
   1ad54:	movt	r3, #2
   1ad58:	movw	r2, #2390	; 0x956
   1ad5c:	bl	12f88 <__assert_fail@plt>
   1ad60:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1ad64:	andsmi	ip, r0, ip, asr #25
   1ad68:	push	{r4, sl, fp, lr}
   1ad6c:	add	fp, sp, #8
   1ad70:	sub	sp, sp, #8
   1ad74:	mov	r4, r0
   1ad78:	bl	1d7ac <main@@Base+0x242c>
   1ad7c:	mov	r3, r0
   1ad80:	mov	r0, #0
   1ad84:	mov	r1, #16
   1ad88:	str	r1, [sp]
   1ad8c:	str	r0, [sp, #4]
   1ad90:	movw	r1, #12470	; 0x30b6
   1ad94:	movt	r1, #2
   1ad98:	mov	r0, r4
   1ad9c:	mov	r2, #0
   1ada0:	bl	1e098 <flatcc_builder_create_buffer@@Base>
   1ada4:	sub	sp, fp, #8
   1ada8:	pop	{r4, sl, fp, pc}
   1adac:	push	{r4, r5, fp, lr}
   1adb0:	add	fp, sp, #8
   1adb4:	mov	r5, #0
   1adb8:	cmp	r0, #0
   1adbc:	beq	1ade4 <test_typed_struct_buffer@@Base+0x2d4>
   1adc0:	mov	r4, r0
   1adc4:	movw	r1, #16082	; 0x3ed2
   1adc8:	movt	r1, #43253	; 0xa8f5
   1adcc:	bl	14018 <test_typed_empty_monster@@Base+0x230>
   1add0:	cmp	r0, #0
   1add4:	beq	1ade4 <test_typed_struct_buffer@@Base+0x2d4>
   1add8:	mov	r0, r4
   1addc:	bl	1b610 <main@@Base+0x290>
   1ade0:	add	r5, r4, r0
   1ade4:	mov	r0, r5
   1ade8:	pop	{r4, r5, fp, pc}
   1adec:	push	{fp, lr}
   1adf0:	mov	fp, sp
   1adf4:	sub	sp, sp, #8
   1adf8:	mov	r1, #16
   1adfc:	str	r1, [sp]
   1ae00:	movw	r2, #16082	; 0x3ed2
   1ae04:	movt	r2, #43253	; 0xa8f5
   1ae08:	mov	r1, #48	; 0x30
   1ae0c:	mov	r3, #32
   1ae10:	bl	21b6c <flatcc_verify_struct_as_typed_root@@Base>
   1ae14:	mov	sp, fp
   1ae18:	pop	{fp, pc}
   1ae1c:	push	{r4, r5, fp, lr}
   1ae20:	add	fp, sp, #8
   1ae24:	mov	r5, #0
   1ae28:	cmp	r0, #0
   1ae2c:	beq	1ae54 <test_typed_struct_buffer@@Base+0x344>
   1ae30:	mov	r4, r0
   1ae34:	movw	r1, #16082	; 0x3ed2
   1ae38:	movt	r1, #43253	; 0xa8f5
   1ae3c:	bl	14018 <test_typed_empty_monster@@Base+0x230>
   1ae40:	cmp	r0, #0
   1ae44:	beq	1ae54 <test_typed_struct_buffer@@Base+0x344>
   1ae48:	mov	r0, r4
   1ae4c:	bl	1b610 <main@@Base+0x290>
   1ae50:	add	r5, r4, r0
   1ae54:	mov	r0, r5
   1ae58:	pop	{r4, r5, fp, pc}
   1ae5c:	push	{fp, lr}
   1ae60:	mov	fp, sp
   1ae64:	sub	sp, sp, #8
   1ae68:	mov	r1, #16
   1ae6c:	str	r1, [sp]
   1ae70:	movw	r2, #16082	; 0x3ed2
   1ae74:	movt	r2, #43253	; 0xa8f5
   1ae78:	mov	r1, #48	; 0x30
   1ae7c:	mov	r3, #32
   1ae80:	bl	21b6c <flatcc_verify_struct_as_typed_root@@Base>
   1ae84:	mov	sp, fp
   1ae88:	pop	{fp, pc}

0001ae8c <gen_monster_benchmark@@Base>:
   1ae8c:	push	{r4, r5, fp, lr}
   1ae90:	add	fp, sp, #8
   1ae94:	sub	sp, sp, #24
   1ae98:	mov	r4, r0
   1ae9c:	movw	r0, #27536	; 0x6b90
   1aea0:	movt	r0, #2
   1aea4:	vldr	d16, [r0]
   1aea8:	movw	r0, #2312	; 0x908
   1aeac:	strh	r0, [sp, #16]
   1aeb0:	vstr	d16, [sp, #8]
   1aeb4:	mov	r0, r4
   1aeb8:	bl	1db9c <flatcc_builder_reset@@Base>
   1aebc:	mov	r0, r4
   1aec0:	bl	16010 <gen_monster@@Base+0x4d4>
   1aec4:	mov	r5, #80	; 0x50
   1aec8:	mov	r0, r4
   1aecc:	mov	r1, #80	; 0x50
   1aed0:	bl	1603c <gen_monster@@Base+0x500>
   1aed4:	mov	r0, r4
   1aed8:	bl	16078 <gen_monster@@Base+0x53c>
   1aedc:	movw	r1, #52429	; 0xcccd
   1aee0:	movt	r1, #49228	; 0xc04c
   1aee4:	mov	r2, #1073741824	; 0x40000000
   1aee8:	mov	r3, #1065353216	; 0x3f800000
   1aeec:	str	r3, [r0]
   1aef0:	str	r2, [r0, #4]
   1aef4:	str	r1, [r0, #8]
   1aef8:	movw	r1, #9281	; 0x2441
   1aefc:	movt	r1, #2
   1af00:	mov	r0, r4
   1af04:	bl	13d54 <test_empty_monster@@Base+0x11c>
   1af08:	add	r1, sp, #8
   1af0c:	mov	r0, r4
   1af10:	mov	r2, #10
   1af14:	bl	160c4 <gen_monster@@Base+0x588>
   1af18:	mov	r0, r4
   1af1c:	bl	160e4 <gen_monster@@Base+0x5a8>
   1af20:	mov	r0, r4
   1af24:	mov	r1, #1
   1af28:	bl	160e8 <gen_monster@@Base+0x5ac>
   1af2c:	mov	r1, #32
   1af30:	strb	r1, [r0, #2]
   1af34:	mov	r1, #16
   1af38:	strh	r1, [r0]
   1af3c:	mov	r0, r4
   1af40:	mov	r1, #2
   1af44:	bl	160e8 <gen_monster@@Base+0x5ac>
   1af48:	mov	r1, #96	; 0x60
   1af4c:	strb	r1, [r0, #6]
   1af50:	strh	r5, [r0, #4]
   1af54:	mov	r1, #64	; 0x40
   1af58:	strb	r1, [r0, #2]
   1af5c:	mov	r1, #48	; 0x30
   1af60:	strh	r1, [r0]
   1af64:	mov	r0, r4
   1af68:	bl	160ec <gen_monster@@Base+0x5b0>
   1af6c:	mov	r0, #145	; 0x91
   1af70:	strb	r0, [sp, #6]
   1af74:	movw	r0, #401	; 0x191
   1af78:	strh	r0, [sp, #4]
   1af7c:	add	r1, sp, #4
   1af80:	mov	r0, r4
   1af84:	bl	1610c <gen_monster@@Base+0x5d0>
   1af88:	mov	r0, r4
   1af8c:	bl	16164 <gen_monster@@Base+0x628>
   1af90:	mov	r0, r4
   1af94:	bl	16414 <gen_monster@@Base+0x8d8>
   1af98:	mov	r0, #0
   1af9c:	sub	sp, fp, #8
   1afa0:	pop	{r4, r5, fp, pc}

0001afa4 <time_monster@@Base>:
   1afa4:	push	{r4, r5, fp, lr}
   1afa8:	add	fp, sp, #8
   1afac:	vpush	{d8}
   1afb0:	mov	r4, r0
   1afb4:	movw	r0, #27293	; 0x6a9d
   1afb8:	movt	r0, #2
   1afbc:	bl	12ee0 <puts@plt>
   1afc0:	movw	r5, #16960	; 0x4240
   1afc4:	movt	r5, #15
   1afc8:	bl	1b018 <time_monster@@Base+0x74>
   1afcc:	vmov.f64	d8, d0
   1afd0:	mov	r0, r4
   1afd4:	bl	1ae8c <gen_monster_benchmark@@Base>
   1afd8:	subs	r5, r5, #1
   1afdc:	bne	1afd0 <time_monster@@Base+0x2c>
   1afe0:	mov	r0, r4
   1afe4:	bl	2080c <flatcc_builder_get_buffer_size@@Base>
   1afe8:	mov	r4, r0
   1afec:	bl	1b018 <time_monster@@Base+0x74>
   1aff0:	vmov.f64	d1, d0
   1aff4:	movw	r0, #12475	; 0x30bb
   1aff8:	movt	r0, #2
   1affc:	vmov.f64	d0, d8
   1b000:	mov	r1, r4
   1b004:	bl	1b088 <time_monster@@Base+0xe4>
   1b008:	mov	r0, #0
   1b00c:	vpop	{d8}
   1b010:	pop	{r4, r5, fp, pc}
   1b014:	nop	{0}
   1b018:	push	{fp, lr}
   1b01c:	mov	fp, sp
   1b020:	sub	sp, sp, #8
   1b024:	mov	r0, sp
   1b028:	mov	r1, #0
   1b02c:	bl	12ed4 <gettimeofday@plt>
   1b030:	movw	r0, #36984	; 0x9078
   1b034:	movt	r0, #3
   1b038:	ldr	r1, [r0]
   1b03c:	cmp	r1, #0
   1b040:	ldmeq	sp, {r2, r3}
   1b044:	strdeq	r2, [r0]
   1b048:	ldrd	r0, [r0]
   1b04c:	ldm	sp, {r2, r3}
   1b050:	vldr	d16, [pc, #40]	; 1b080 <time_monster@@Base+0xdc>
   1b054:	sub	r0, r2, r0
   1b058:	sub	r1, r3, r1
   1b05c:	vmov	s0, r1
   1b060:	vcvt.f64.s32	d17, s0
   1b064:	vmov	s0, r0
   1b068:	vcvt.f64.s32	d18, s0
   1b06c:	vdiv.f64	d16, d17, d16
   1b070:	vadd.f64	d0, d16, d18
   1b074:	mov	sp, fp
   1b078:	pop	{fp, pc}
   1b07c:	nop	{0}
   1b080:	andeq	r0, r0, r0
   1b084:	smlawbmi	lr, r0, r4, r8
   1b088:	push	{r4, sl, fp, lr}
   1b08c:	add	fp, sp, #8
   1b090:	vpush	{d8-d9}
   1b094:	mov	r4, r1
   1b098:	vmov.f64	d8, d1
   1b09c:	vmov.f64	d9, d0
   1b0a0:	mov	r1, r0
   1b0a4:	movw	r0, #20573	; 0x505d
   1b0a8:	movt	r0, #2
   1b0ac:	bl	12e98 <printf@plt>
   1b0b0:	vsub.f64	d9, d8, d9
   1b0b4:	vmov	r2, r3, d9
   1b0b8:	movw	r0, #20588	; 0x506c
   1b0bc:	movt	r0, #2
   1b0c0:	bl	12e98 <printf@plt>
   1b0c4:	movw	r0, #20612	; 0x5084
   1b0c8:	movt	r0, #2
   1b0cc:	movw	r1, #16960	; 0x4240
   1b0d0:	movt	r1, #15
   1b0d4:	bl	12e98 <printf@plt>
   1b0d8:	movw	r0, #20628	; 0x5094
   1b0dc:	movt	r0, #2
   1b0e0:	mov	r1, r4
   1b0e4:	bl	12e98 <printf@plt>
   1b0e8:	vldr	d8, [pc, #224]	; 1b1d0 <time_monster@@Base+0x22c>
   1b0ec:	vmov	s0, r4
   1b0f0:	vcvt.f64.u32	d16, s0
   1b0f4:	vmul.f64	d16, d16, d8
   1b0f8:	vdiv.f64	d16, d16, d8
   1b0fc:	vdiv.f64	d16, d16, d9
   1b100:	vmov	r2, r3, d16
   1b104:	movw	r0, #20647	; 0x50a7
   1b108:	movt	r0, #2
   1b10c:	bl	12e98 <printf@plt>
   1b110:	vdiv.f64	d16, d8, d9
   1b114:	vmov	r2, r3, d16
   1b118:	movw	r0, #20671	; 0x50bf
   1b11c:	movt	r0, #2
   1b120:	bl	12e98 <printf@plt>
   1b124:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1b128:	vdiv.f64	d16, d16, d9
   1b12c:	vmov	r2, r3, d16
   1b130:	movw	r0, #20704	; 0x50e0
   1b134:	movt	r0, #2
   1b138:	movw	r1, #12497	; 0x30d1
   1b13c:	movt	r1, #2
   1b140:	bl	12e98 <printf@plt>
   1b144:	vldr	d17, [pc, #140]	; 1b1d8 <time_monster@@Base+0x234>
   1b148:	vmul.f64	d16, d9, d17
   1b14c:	vldr	d18, [pc, #140]	; 1b1e0 <time_monster@@Base+0x23c>
   1b150:	vdiv.f64	d16, d16, d8
   1b154:	vcmpe.f64	d16, d18
   1b158:	vmrs	APSR_nzcv, fpscr
   1b15c:	bpl	1b170 <time_monster@@Base+0x1cc>
   1b160:	vmov	r2, r3, d16
   1b164:	movw	r0, #20740	; 0x5104
   1b168:	movt	r0, #2
   1b16c:	b	1b1c0 <time_monster@@Base+0x21c>
   1b170:	vcmpe.f64	d16, d8
   1b174:	vmrs	APSR_nzcv, fpscr
   1b178:	bpl	1b190 <time_monster@@Base+0x1ec>
   1b17c:	vdiv.f64	d16, d16, d18
   1b180:	vmov	r2, r3, d16
   1b184:	movw	r0, #20764	; 0x511c
   1b188:	movt	r0, #2
   1b18c:	b	1b1c0 <time_monster@@Base+0x21c>
   1b190:	vcmpe.f64	d16, d17
   1b194:	vmrs	APSR_nzcv, fpscr
   1b198:	bpl	1b1b0 <time_monster@@Base+0x20c>
   1b19c:	vdiv.f64	d16, d16, d8
   1b1a0:	vmov	r2, r3, d16
   1b1a4:	movw	r0, #20788	; 0x5134
   1b1a8:	movt	r0, #2
   1b1ac:	b	1b1c0 <time_monster@@Base+0x21c>
   1b1b0:	vdiv.f64	d16, d16, d17
   1b1b4:	vmov	r2, r3, d16
   1b1b8:	movw	r0, #20812	; 0x514c
   1b1bc:	movt	r0, #2
   1b1c0:	vpop	{d8-d9}
   1b1c4:	pop	{r4, sl, fp, lr}
   1b1c8:	b	12e98 <printf@plt>
   1b1cc:	nop	{0}
   1b1d0:	andeq	r0, r0, r0
   1b1d4:	smlawbmi	lr, r0, r4, r8
   1b1d8:	andeq	r0, r0, r0
   1b1dc:	bicmi	ip, sp, r5, ror #26
   1b1e0:	andeq	r0, r0, r0
   1b1e4:	addmi	r4, pc, r0

0001b1e8 <gen_struct_buffer_benchmark@@Base>:
   1b1e8:	push	{r4, sl, fp, lr}
   1b1ec:	add	fp, sp, #8
   1b1f0:	mov	r4, r0
   1b1f4:	bl	1db9c <flatcc_builder_reset@@Base>
   1b1f8:	mov	r0, r4
   1b1fc:	bl	1aa80 <test_struct_buffer@@Base+0x1f0>
   1b200:	mov	r0, r4
   1b204:	mov	r1, #0
   1b208:	bl	20898 <flatcc_builder_get_direct_buffer@@Base>
   1b20c:	cmp	r0, #0
   1b210:	beq	1b294 <gen_struct_buffer_benchmark@@Base+0xac>
   1b214:	bl	1b2a8 <gen_struct_buffer_benchmark@@Base+0xc0>
   1b218:	vldr	s0, [r0]
   1b21c:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1b220:	vcmp.f32	s0, s2
   1b224:	vmrs	APSR_nzcv, fpscr
   1b228:	bne	1b294 <gen_struct_buffer_benchmark@@Base+0xac>
   1b22c:	vldr	s0, [r0, #4]
   1b230:	vmov.f32	s2, #0	; 0x40000000  2.0
   1b234:	vcmp.f32	s0, s2
   1b238:	vmrs	APSR_nzcv, fpscr
   1b23c:	bne	1b294 <gen_struct_buffer_benchmark@@Base+0xac>
   1b240:	vldr	s0, [r0, #8]
   1b244:	vmov.f32	s2, #8	; 0x40400000  3.0
   1b248:	vcmp.f32	s0, s2
   1b24c:	vmrs	APSR_nzcv, fpscr
   1b250:	bne	1b294 <gen_struct_buffer_benchmark@@Base+0xac>
   1b254:	vldr	d16, [pc, #68]	; 1b2a0 <gen_struct_buffer_benchmark@@Base+0xb8>
   1b258:	vldr	d17, [r0, #16]
   1b25c:	vcmp.f64	d17, d16
   1b260:	vmrs	APSR_nzcv, fpscr
   1b264:	bne	1b294 <gen_struct_buffer_benchmark@@Base+0xac>
   1b268:	ldrb	r1, [r0, #24]
   1b26c:	cmp	r1, #8
   1b270:	bne	1b294 <gen_struct_buffer_benchmark@@Base+0xac>
   1b274:	ldrh	r1, [r0, #26]
   1b278:	movw	r2, #2730	; 0xaaa
   1b27c:	cmp	r1, r2
   1b280:	bne	1b294 <gen_struct_buffer_benchmark@@Base+0xac>
   1b284:	ldrb	r0, [r0, #28]
   1b288:	subs	r0, r0, #239	; 0xef
   1b28c:	mvnne	r0, #0
   1b290:	pop	{r4, sl, fp, pc}
   1b294:	mvn	r0, #0
   1b298:	pop	{r4, sl, fp, pc}
   1b29c:	nop	{0}
   1b2a0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1b2a4:	andsmi	ip, r0, ip, asr #25
   1b2a8:	push	{r4, r5, fp, lr}
   1b2ac:	add	fp, sp, #8
   1b2b0:	cmp	r0, #0
   1b2b4:	beq	1b2e4 <gen_struct_buffer_benchmark@@Base+0xfc>
   1b2b8:	mov	r4, r0
   1b2bc:	mov	r5, #0
   1b2c0:	mov	r1, #0
   1b2c4:	bl	14490 <test_typed_table_with_emptystruct@@Base+0x284>
   1b2c8:	cmp	r0, #0
   1b2cc:	beq	1b2dc <gen_struct_buffer_benchmark@@Base+0xf4>
   1b2d0:	mov	r0, r4
   1b2d4:	bl	1b610 <main@@Base+0x290>
   1b2d8:	add	r5, r4, r0
   1b2dc:	mov	r0, r5
   1b2e0:	pop	{r4, r5, fp, pc}
   1b2e4:	mov	r5, #0
   1b2e8:	mov	r0, r5
   1b2ec:	pop	{r4, r5, fp, pc}

0001b2f0 <time_struct_buffer@@Base>:
   1b2f0:	push	{r4, r5, r6, sl, fp, lr}
   1b2f4:	add	fp, sp, #16
   1b2f8:	vpush	{d8-d9}
   1b2fc:	mov	r5, r0
   1b300:	movw	r0, #27293	; 0x6a9d
   1b304:	movt	r0, #2
   1b308:	bl	12ee0 <puts@plt>
   1b30c:	mov	r4, #0
   1b310:	movw	r6, #16960	; 0x4240
   1b314:	movt	r6, #15
   1b318:	bl	1b018 <time_monster@@Base+0x74>
   1b31c:	vmov.f64	d8, d0
   1b320:	mov	r0, r5
   1b324:	bl	1b1e8 <gen_struct_buffer_benchmark@@Base>
   1b328:	orr	r4, r0, r4
   1b32c:	subs	r6, r6, #1
   1b330:	bne	1b320 <time_struct_buffer@@Base+0x30>
   1b334:	bl	1b018 <time_monster@@Base+0x74>
   1b338:	vmov.f64	d9, d0
   1b33c:	mov	r0, r5
   1b340:	bl	2080c <flatcc_builder_get_buffer_size@@Base>
   1b344:	mov	r5, r0
   1b348:	cmp	r4, #0
   1b34c:	beq	1b35c <time_struct_buffer@@Base+0x6c>
   1b350:	movw	r0, #27310	; 0x6aae
   1b354:	movt	r0, #2
   1b358:	bl	12ee0 <puts@plt>
   1b35c:	movw	r0, #12505	; 0x30d9
   1b360:	movt	r0, #2
   1b364:	vmov.f64	d0, d8
   1b368:	vmov.f64	d1, d9
   1b36c:	mov	r1, r5
   1b370:	bl	1b088 <time_monster@@Base+0xe4>
   1b374:	mov	r0, r4
   1b378:	vpop	{d8-d9}
   1b37c:	pop	{r4, r5, r6, sl, fp, pc}

0001b380 <main@@Base>:
   1b380:	push	{r4, sl, fp, lr}
   1b384:	add	fp, sp, #8
   1b388:	sub	sp, sp, #232	; 0xe8
   1b38c:	mov	r4, sp
   1b390:	mov	r0, r4
   1b394:	bl	1da24 <flatcc_builder_init@@Base>
   1b398:	movw	r0, #27327	; 0x6abf
   1b39c:	movt	r0, #2
   1b3a0:	bl	12ee0 <puts@plt>
   1b3a4:	mov	r0, r4
   1b3a8:	bl	14168 <test_table_with_emptystruct@@Base>
   1b3ac:	cmp	r0, #0
   1b3b0:	beq	1b3c0 <main@@Base+0x40>
   1b3b4:	movw	r0, #27354	; 0x6ada
   1b3b8:	movt	r0, #2
   1b3bc:	b	1b5ec <main@@Base+0x26c>
   1b3c0:	mov	r0, sp
   1b3c4:	bl	13c38 <test_empty_monster@@Base>
   1b3c8:	cmp	r0, #0
   1b3cc:	beq	1b3dc <main@@Base+0x5c>
   1b3d0:	movw	r0, #27354	; 0x6ada
   1b3d4:	movt	r0, #2
   1b3d8:	b	1b5ec <main@@Base+0x26c>
   1b3dc:	mov	r0, sp
   1b3e0:	bl	16434 <test_monster@@Base>
   1b3e4:	cmp	r0, #0
   1b3e8:	beq	1b3f8 <main@@Base+0x78>
   1b3ec:	movw	r0, #27354	; 0x6ada
   1b3f0:	movt	r0, #2
   1b3f4:	b	1b5ec <main@@Base+0x26c>
   1b3f8:	mov	r0, sp
   1b3fc:	bl	164cc <test_monster_with_size@@Base>
   1b400:	cmp	r0, #0
   1b404:	beq	1b414 <main@@Base+0x94>
   1b408:	movw	r0, #27354	; 0x6ada
   1b40c:	movt	r0, #2
   1b410:	b	1b5ec <main@@Base+0x26c>
   1b414:	mov	r0, sp
   1b418:	bl	165e8 <test_string@@Base>
   1b41c:	cmp	r0, #0
   1b420:	beq	1b430 <main@@Base+0xb0>
   1b424:	movw	r0, #27354	; 0x6ada
   1b428:	movt	r0, #2
   1b42c:	b	1b5ec <main@@Base+0x26c>
   1b430:	mov	r0, sp
   1b434:	bl	1a890 <test_struct_buffer@@Base>
   1b438:	cmp	r0, #0
   1b43c:	beq	1b44c <main@@Base+0xcc>
   1b440:	movw	r0, #27354	; 0x6ada
   1b444:	movt	r0, #2
   1b448:	b	1b5ec <main@@Base+0x26c>
   1b44c:	mov	r0, sp
   1b450:	bl	13de8 <test_typed_empty_monster@@Base>
   1b454:	cmp	r0, #0
   1b458:	beq	1b468 <main@@Base+0xe8>
   1b45c:	movw	r0, #27354	; 0x6ada
   1b460:	movt	r0, #2
   1b464:	b	1b5ec <main@@Base+0x26c>
   1b468:	mov	r0, sp
   1b46c:	bl	1420c <test_typed_table_with_emptystruct@@Base>
   1b470:	cmp	r0, #0
   1b474:	beq	1b484 <main@@Base+0x104>
   1b478:	movw	r0, #27354	; 0x6ada
   1b47c:	movt	r0, #2
   1b480:	b	1b5ec <main@@Base+0x26c>
   1b484:	mov	r0, sp
   1b488:	bl	1ab10 <test_typed_struct_buffer@@Base>
   1b48c:	cmp	r0, #0
   1b490:	beq	1b4a0 <main@@Base+0x120>
   1b494:	movw	r0, #27354	; 0x6ada
   1b498:	movt	r0, #2
   1b49c:	b	1b5ec <main@@Base+0x26c>
   1b4a0:	mov	r0, sp
   1b4a4:	bl	18160 <test_clone_slice@@Base>
   1b4a8:	cmp	r0, #0
   1b4ac:	beq	1b4bc <main@@Base+0x13c>
   1b4b0:	movw	r0, #27354	; 0x6ada
   1b4b4:	movt	r0, #2
   1b4b8:	b	1b5ec <main@@Base+0x26c>
   1b4bc:	mov	r0, sp
   1b4c0:	bl	1a10c <test_add_set_defaults@@Base>
   1b4c4:	cmp	r0, #0
   1b4c8:	beq	1b4d8 <main@@Base+0x158>
   1b4cc:	movw	r0, #27354	; 0x6ada
   1b4d0:	movt	r0, #2
   1b4d4:	b	1b5ec <main@@Base+0x26c>
   1b4d8:	mov	r0, sp
   1b4dc:	bl	18810 <test_create_add_field@@Base>
   1b4e0:	cmp	r0, #0
   1b4e4:	beq	1b4f4 <main@@Base+0x174>
   1b4e8:	movw	r0, #27354	; 0x6ada
   1b4ec:	movt	r0, #2
   1b4f0:	b	1b5ec <main@@Base+0x26c>
   1b4f4:	mov	r0, sp
   1b4f8:	bl	18a08 <test_union_vector@@Base>
   1b4fc:	cmp	r0, #0
   1b500:	beq	1b510 <main@@Base+0x190>
   1b504:	movw	r0, #27354	; 0x6ada
   1b508:	movt	r0, #2
   1b50c:	b	1b5ec <main@@Base+0x26c>
   1b510:	mov	r0, sp
   1b514:	bl	17f88 <test_basic_sort@@Base>
   1b518:	cmp	r0, #0
   1b51c:	beq	1b52c <main@@Base+0x1ac>
   1b520:	movw	r0, #27354	; 0x6ada
   1b524:	movt	r0, #2
   1b528:	b	1b5ec <main@@Base+0x26c>
   1b52c:	mov	r0, sp
   1b530:	bl	167f4 <test_sort_find@@Base>
   1b534:	cmp	r0, #0
   1b538:	beq	1b548 <main@@Base+0x1c8>
   1b53c:	movw	r0, #27354	; 0x6ada
   1b540:	movt	r0, #2
   1b544:	b	1b5ec <main@@Base+0x26c>
   1b548:	mov	r0, sp
   1b54c:	bl	16d40 <test_scan@@Base>
   1b550:	cmp	r0, #0
   1b554:	beq	1b564 <main@@Base+0x1e4>
   1b558:	movw	r0, #27354	; 0x6ada
   1b55c:	movt	r0, #2
   1b560:	b	1b5ec <main@@Base+0x26c>
   1b564:	mov	r0, sp
   1b568:	bl	1a3a8 <test_nested_buffer@@Base>
   1b56c:	cmp	r0, #0
   1b570:	beq	1b580 <main@@Base+0x200>
   1b574:	movw	r0, #27354	; 0x6ada
   1b578:	movt	r0, #2
   1b57c:	b	1b5ec <main@@Base+0x26c>
   1b580:	mov	r0, sp
   1b584:	bl	1a574 <test_nested_buffer_first@@Base>
   1b588:	cmp	r0, #0
   1b58c:	beq	1b59c <main@@Base+0x21c>
   1b590:	movw	r0, #27354	; 0x6ada
   1b594:	movt	r0, #2
   1b598:	b	1b5ec <main@@Base+0x26c>
   1b59c:	mov	r0, sp
   1b5a0:	bl	1a6a4 <test_nested_buffer_using_nest@@Base>
   1b5a4:	cmp	r0, #0
   1b5a8:	beq	1b5b8 <main@@Base+0x238>
   1b5ac:	movw	r0, #27354	; 0x6ada
   1b5b0:	movt	r0, #2
   1b5b4:	b	1b5ec <main@@Base+0x26c>
   1b5b8:	mov	r0, sp
   1b5bc:	bl	133f8 <test_type_aliases@@Base>
   1b5c0:	cmp	r0, #0
   1b5c4:	beq	1b5d4 <main@@Base+0x254>
   1b5c8:	movw	r0, #27354	; 0x6ada
   1b5cc:	movt	r0, #2
   1b5d0:	b	1b5ec <main@@Base+0x26c>
   1b5d4:	mov	r0, sp
   1b5d8:	bl	19074 <test_mixed_type_union@@Base>
   1b5dc:	cmp	r0, #0
   1b5e0:	beq	1b5fc <main@@Base+0x27c>
   1b5e4:	movw	r0, #27354	; 0x6ada
   1b5e8:	movt	r0, #2
   1b5ec:	bl	12ee0 <puts@plt>
   1b5f0:	mvn	r0, #0
   1b5f4:	sub	sp, fp, #8
   1b5f8:	pop	{r4, sl, fp, pc}
   1b5fc:	mov	r0, sp
   1b600:	bl	1dba8 <flatcc_builder_clear@@Base>
   1b604:	mov	r0, #0
   1b608:	sub	sp, fp, #8
   1b60c:	pop	{r4, sl, fp, pc}
   1b610:	ldr	r0, [r0]
   1b614:	b	1b618 <main@@Base+0x298>
   1b618:	bx	lr
   1b61c:	ldr	r0, [r0]
   1b620:	b	1b634 <main@@Base+0x2b4>
   1b624:	ldrh	r0, [r0]
   1b628:	b	1b638 <main@@Base+0x2b8>
   1b62c:	ldrsh	r0, [r0]
   1b630:	b	1b63c <main@@Base+0x2bc>
   1b634:	bx	lr
   1b638:	bx	lr
   1b63c:	bx	lr
   1b640:	push	{r4, r5, r6, sl, fp, lr}
   1b644:	add	fp, sp, #16
   1b648:	mov	r5, r2
   1b64c:	mov	r6, r1
   1b650:	mov	r4, r0
   1b654:	bl	1b73c <main@@Base+0x3bc>
   1b658:	cmp	r0, #0
   1b65c:	bne	1b728 <main@@Base+0x3a8>
   1b660:	mov	r0, r4
   1b664:	bl	1b744 <main@@Base+0x3c4>
   1b668:	cmp	r0, #0
   1b66c:	bne	1b728 <main@@Base+0x3a8>
   1b670:	mov	r0, r4
   1b674:	bl	1b788 <main@@Base+0x408>
   1b678:	cmp	r0, #0
   1b67c:	bne	1b728 <main@@Base+0x3a8>
   1b680:	mov	r0, r4
   1b684:	bl	1b7c0 <main@@Base+0x440>
   1b688:	cmp	r0, #0
   1b68c:	bne	1b728 <main@@Base+0x3a8>
   1b690:	mov	r0, r4
   1b694:	bl	1b800 <main@@Base+0x480>
   1b698:	cmp	r0, #0
   1b69c:	bne	1b728 <main@@Base+0x3a8>
   1b6a0:	mov	r0, r4
   1b6a4:	bl	1b838 <main@@Base+0x4b8>
   1b6a8:	cmp	r0, #0
   1b6ac:	bne	1b728 <main@@Base+0x3a8>
   1b6b0:	mov	r0, r4
   1b6b4:	bl	1b86c <main@@Base+0x4ec>
   1b6b8:	cmp	r0, #0
   1b6bc:	bne	1b728 <main@@Base+0x3a8>
   1b6c0:	mov	r0, r4
   1b6c4:	mov	r1, r6
   1b6c8:	bl	1b8a8 <main@@Base+0x528>
   1b6cc:	cmp	r0, #0
   1b6d0:	bne	1b728 <main@@Base+0x3a8>
   1b6d4:	mov	r0, r4
   1b6d8:	mov	r1, r5
   1b6dc:	bl	1b8dc <main@@Base+0x55c>
   1b6e0:	cmp	r0, #0
   1b6e4:	bne	1b728 <main@@Base+0x3a8>
   1b6e8:	mov	r0, r4
   1b6ec:	bl	1b910 <main@@Base+0x590>
   1b6f0:	cmp	r0, #0
   1b6f4:	bne	1b728 <main@@Base+0x3a8>
   1b6f8:	mov	r0, r4
   1b6fc:	bl	1b94c <main@@Base+0x5cc>
   1b700:	cmp	r0, #0
   1b704:	bne	1b728 <main@@Base+0x3a8>
   1b708:	mov	r0, r4
   1b70c:	bl	1b984 <main@@Base+0x604>
   1b710:	cmp	r0, #0
   1b714:	bne	1b728 <main@@Base+0x3a8>
   1b718:	mov	r0, r4
   1b71c:	bl	1b9c0 <main@@Base+0x640>
   1b720:	cmp	r0, #0
   1b724:	beq	1b730 <main@@Base+0x3b0>
   1b728:	mov	r0, #0
   1b72c:	pop	{r4, r5, r6, sl, fp, pc}
   1b730:	mov	r0, r4
   1b734:	pop	{r4, r5, r6, sl, fp, lr}
   1b738:	b	1b9f4 <main@@Base+0x674>
   1b73c:	mov	r1, #12
   1b740:	b	1f02c <flatcc_builder_start_table@@Base>
   1b744:	push	{r4, sl, fp, lr}
   1b748:	add	fp, sp, #8
   1b74c:	mov	r1, #6
   1b750:	mov	r2, #8
   1b754:	mov	r3, #8
   1b758:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1b75c:	cmp	r0, #0
   1b760:	beq	1b77c <main@@Base+0x3fc>
   1b764:	mov	r4, #0
   1b768:	mov	r2, #0
   1b76c:	mov	r3, #-2147483648	; 0x80000000
   1b770:	bl	1ba44 <main@@Base+0x6c4>
   1b774:	mov	r0, r4
   1b778:	pop	{r4, sl, fp, pc}
   1b77c:	mvn	r4, #0
   1b780:	mov	r0, r4
   1b784:	pop	{r4, sl, fp, pc}
   1b788:	push	{fp, lr}
   1b78c:	mov	fp, sp
   1b790:	mov	r1, #7
   1b794:	mov	r2, #8
   1b798:	mov	r3, #8
   1b79c:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1b7a0:	cmp	r0, #0
   1b7a4:	beq	1b7b4 <main@@Base+0x434>
   1b7a8:	bl	1ba70 <main@@Base+0x6f0>
   1b7ac:	mov	r0, #0
   1b7b0:	pop	{fp, pc}
   1b7b4:	mvn	r0, #0
   1b7b8:	pop	{fp, pc}
   1b7bc:	nop	{0}
   1b7c0:	push	{fp, lr}
   1b7c4:	mov	fp, sp
   1b7c8:	mov	r1, #9
   1b7cc:	mov	r2, #8
   1b7d0:	mov	r3, #8
   1b7d4:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1b7d8:	cmp	r0, #0
   1b7dc:	beq	1b7f0 <main@@Base+0x470>
   1b7e0:	vldr	d0, [pc, #16]	; 1b7f8 <main@@Base+0x478>
   1b7e4:	bl	1ba80 <main@@Base+0x700>
   1b7e8:	mov	r0, #0
   1b7ec:	pop	{fp, pc}
   1b7f0:	mvn	r0, #0
   1b7f4:	pop	{fp, pc}
   1b7f8:	strbtvs	r6, [r6], -r6, ror #12
   1b7fc:	andmi	r6, r2, r6, ror #12
   1b800:	push	{fp, lr}
   1b804:	mov	fp, sp
   1b808:	mov	r1, #4
   1b80c:	mov	r2, #4
   1b810:	mov	r3, #4
   1b814:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1b818:	cmp	r0, #0
   1b81c:	beq	1b830 <main@@Base+0x4b0>
   1b820:	mov	r1, #-2147483648	; 0x80000000
   1b824:	bl	1ba9c <main@@Base+0x71c>
   1b828:	mov	r0, #0
   1b82c:	pop	{fp, pc}
   1b830:	mvn	r0, #0
   1b834:	pop	{fp, pc}
   1b838:	push	{fp, lr}
   1b83c:	mov	fp, sp
   1b840:	mov	r1, #5
   1b844:	mov	r2, #4
   1b848:	mov	r3, #4
   1b84c:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1b850:	cmp	r0, #0
   1b854:	beq	1b864 <main@@Base+0x4e4>
   1b858:	bl	1bac0 <main@@Base+0x740>
   1b85c:	mov	r0, #0
   1b860:	pop	{fp, pc}
   1b864:	mvn	r0, #0
   1b868:	pop	{fp, pc}
   1b86c:	push	{fp, lr}
   1b870:	mov	fp, sp
   1b874:	mov	r1, #8
   1b878:	mov	r2, #4
   1b87c:	mov	r3, #4
   1b880:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1b884:	cmp	r0, #0
   1b888:	beq	1b89c <main@@Base+0x51c>
   1b88c:	vldr	s0, [pc, #16]	; 1b8a4 <main@@Base+0x524>
   1b890:	bl	1bacc <main@@Base+0x74c>
   1b894:	mov	r0, #0
   1b898:	pop	{fp, pc}
   1b89c:	mvn	r0, #0
   1b8a0:	pop	{fp, pc}
   1b8a4:	andsmi	r3, r3, r3, lsr r3
   1b8a8:	push	{r4, r5, fp, lr}
   1b8ac:	add	fp, sp, #8
   1b8b0:	mvn	r4, #0
   1b8b4:	cmp	r1, #0
   1b8b8:	beq	1b8d4 <main@@Base+0x554>
   1b8bc:	mov	r5, r1
   1b8c0:	mov	r1, #10
   1b8c4:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1b8c8:	cmp	r0, #0
   1b8cc:	strne	r5, [r0]
   1b8d0:	movne	r4, #0
   1b8d4:	mov	r0, r4
   1b8d8:	pop	{r4, r5, fp, pc}
   1b8dc:	push	{r4, r5, fp, lr}
   1b8e0:	add	fp, sp, #8
   1b8e4:	mvn	r4, #0
   1b8e8:	cmp	r1, #0
   1b8ec:	beq	1b908 <main@@Base+0x588>
   1b8f0:	mov	r5, r1
   1b8f4:	mov	r1, #11
   1b8f8:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1b8fc:	cmp	r0, #0
   1b900:	strne	r5, [r0]
   1b904:	movne	r4, #0
   1b908:	mov	r0, r4
   1b90c:	pop	{r4, r5, fp, pc}
   1b910:	push	{fp, lr}
   1b914:	mov	fp, sp
   1b918:	mov	r1, #2
   1b91c:	mov	r2, #2
   1b920:	mov	r3, #2
   1b924:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1b928:	cmp	r0, #0
   1b92c:	beq	1b944 <main@@Base+0x5c4>
   1b930:	movw	r1, #32768	; 0x8000
   1b934:	movt	r1, #65535	; 0xffff
   1b938:	bl	1bae8 <main@@Base+0x768>
   1b93c:	mov	r0, #0
   1b940:	pop	{fp, pc}
   1b944:	mvn	r0, #0
   1b948:	pop	{fp, pc}
   1b94c:	push	{fp, lr}
   1b950:	mov	fp, sp
   1b954:	mov	r1, #3
   1b958:	mov	r2, #2
   1b95c:	mov	r3, #2
   1b960:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1b964:	cmp	r0, #0
   1b968:	beq	1b97c <main@@Base+0x5fc>
   1b96c:	movw	r1, #65535	; 0xffff
   1b970:	bl	1bb0c <main@@Base+0x78c>
   1b974:	mov	r0, #0
   1b978:	pop	{fp, pc}
   1b97c:	mvn	r0, #0
   1b980:	pop	{fp, pc}
   1b984:	push	{r4, sl, fp, lr}
   1b988:	add	fp, sp, #8
   1b98c:	mov	r4, #0
   1b990:	mov	r1, #0
   1b994:	mov	r2, #1
   1b998:	mov	r3, #1
   1b99c:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1b9a0:	cmp	r0, #0
   1b9a4:	beq	1b9b4 <main@@Base+0x634>
   1b9a8:	bl	1bb30 <main@@Base+0x7b0>
   1b9ac:	mov	r0, r4
   1b9b0:	pop	{r4, sl, fp, pc}
   1b9b4:	mvn	r4, #0
   1b9b8:	mov	r0, r4
   1b9bc:	pop	{r4, sl, fp, pc}
   1b9c0:	push	{fp, lr}
   1b9c4:	mov	fp, sp
   1b9c8:	mov	r1, #1
   1b9cc:	mov	r2, #1
   1b9d0:	mov	r3, #1
   1b9d4:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1b9d8:	cmp	r0, #0
   1b9dc:	beq	1b9ec <main@@Base+0x66c>
   1b9e0:	bl	1bb3c <main@@Base+0x7bc>
   1b9e4:	mov	r0, #0
   1b9e8:	pop	{fp, pc}
   1b9ec:	mvn	r0, #0
   1b9f0:	pop	{fp, pc}
   1b9f4:	push	{r4, sl, fp, lr}
   1b9f8:	add	fp, sp, #8
   1b9fc:	mov	r4, r0
   1ba00:	movw	r1, #27546	; 0x6b9a
   1ba04:	movt	r1, #2
   1ba08:	mov	r2, #0
   1ba0c:	bl	1f6b8 <flatcc_builder_check_required@@Base>
   1ba10:	cmp	r0, #0
   1ba14:	beq	1ba24 <main@@Base+0x6a4>
   1ba18:	mov	r0, r4
   1ba1c:	pop	{r4, sl, fp, lr}
   1ba20:	b	1f738 <flatcc_builder_end_table@@Base>
   1ba24:	movw	r0, #12987	; 0x32bb
   1ba28:	movt	r0, #2
   1ba2c:	movw	r1, #13161	; 0x3369
   1ba30:	movt	r1, #2
   1ba34:	movw	r3, #13260	; 0x33cc
   1ba38:	movt	r3, #2
   1ba3c:	mov	r2, #237	; 0xed
   1ba40:	bl	12f88 <__assert_fail@plt>
   1ba44:	push	{r4, r6, r7, sl, fp, lr}
   1ba48:	add	fp, sp, #16
   1ba4c:	mov	r1, r3
   1ba50:	mov	r6, r2
   1ba54:	mov	r4, r0
   1ba58:	mov	r0, r2
   1ba5c:	bl	1ba6c <main@@Base+0x6ec>
   1ba60:	mov	r7, r1
   1ba64:	strd	r6, [r4]
   1ba68:	pop	{r4, r6, r7, sl, fp, pc}
   1ba6c:	bx	lr
   1ba70:	mvn	r1, #0
   1ba74:	str	r1, [r0]
   1ba78:	str	r1, [r0, #4]
   1ba7c:	bx	lr
   1ba80:	push	{r4, sl, fp, lr}
   1ba84:	add	fp, sp, #8
   1ba88:	mov	r4, r0
   1ba8c:	bl	1ba98 <main@@Base+0x718>
   1ba90:	vstr	d0, [r4]
   1ba94:	pop	{r4, sl, fp, pc}
   1ba98:	bx	lr
   1ba9c:	push	{r4, r5, fp, lr}
   1baa0:	add	fp, sp, #8
   1baa4:	mov	r4, r1
   1baa8:	mov	r5, r0
   1baac:	mov	r0, r1
   1bab0:	bl	1babc <main@@Base+0x73c>
   1bab4:	str	r4, [r5]
   1bab8:	pop	{r4, r5, fp, pc}
   1babc:	bx	lr
   1bac0:	mvn	r1, #0
   1bac4:	str	r1, [r0]
   1bac8:	bx	lr
   1bacc:	push	{r4, sl, fp, lr}
   1bad0:	add	fp, sp, #8
   1bad4:	mov	r4, r0
   1bad8:	bl	1bae4 <main@@Base+0x764>
   1badc:	vstr	s0, [r4]
   1bae0:	pop	{r4, sl, fp, pc}
   1bae4:	bx	lr
   1bae8:	push	{r4, r5, fp, lr}
   1baec:	add	fp, sp, #8
   1baf0:	mov	r4, r1
   1baf4:	mov	r5, r0
   1baf8:	mov	r0, r1
   1bafc:	bl	1bb08 <main@@Base+0x788>
   1bb00:	strh	r4, [r5]
   1bb04:	pop	{r4, r5, fp, pc}
   1bb08:	bx	lr
   1bb0c:	push	{r4, r5, fp, lr}
   1bb10:	add	fp, sp, #8
   1bb14:	mov	r4, r1
   1bb18:	mov	r5, r0
   1bb1c:	mov	r0, r1
   1bb20:	bl	1bb2c <main@@Base+0x7ac>
   1bb24:	strh	r4, [r5]
   1bb28:	pop	{r4, r5, fp, pc}
   1bb2c:	bx	lr
   1bb30:	mov	r1, #128	; 0x80
   1bb34:	strb	r1, [r0]
   1bb38:	bx	lr
   1bb3c:	mov	r1, #255	; 0xff
   1bb40:	strb	r1, [r0]
   1bb44:	bx	lr
   1bb48:	push	{r4, sl, fp, lr}
   1bb4c:	add	fp, sp, #8
   1bb50:	sub	sp, sp, #8
   1bb54:	mov	r4, r0
   1bb58:	mov	r1, #0
   1bb5c:	mov	r2, #1
   1bb60:	mov	r3, #1
   1bb64:	bl	212a0 <flatcc_verify_field@@Base>
   1bb68:	cmp	r0, #0
   1bb6c:	bne	1bcbc <main@@Base+0x93c>
   1bb70:	mov	r0, r4
   1bb74:	mov	r1, #1
   1bb78:	mov	r2, #1
   1bb7c:	mov	r3, #1
   1bb80:	bl	212a0 <flatcc_verify_field@@Base>
   1bb84:	cmp	r0, #0
   1bb88:	bne	1bcbc <main@@Base+0x93c>
   1bb8c:	mov	r0, r4
   1bb90:	mov	r1, #2
   1bb94:	mov	r2, #2
   1bb98:	mov	r3, #2
   1bb9c:	bl	212a0 <flatcc_verify_field@@Base>
   1bba0:	cmp	r0, #0
   1bba4:	bne	1bcbc <main@@Base+0x93c>
   1bba8:	mov	r0, r4
   1bbac:	mov	r1, #3
   1bbb0:	mov	r2, #2
   1bbb4:	mov	r3, #2
   1bbb8:	bl	212a0 <flatcc_verify_field@@Base>
   1bbbc:	cmp	r0, #0
   1bbc0:	bne	1bcbc <main@@Base+0x93c>
   1bbc4:	mov	r0, r4
   1bbc8:	mov	r1, #4
   1bbcc:	mov	r2, #4
   1bbd0:	mov	r3, #4
   1bbd4:	bl	212a0 <flatcc_verify_field@@Base>
   1bbd8:	cmp	r0, #0
   1bbdc:	bne	1bcbc <main@@Base+0x93c>
   1bbe0:	mov	r0, r4
   1bbe4:	mov	r1, #5
   1bbe8:	mov	r2, #4
   1bbec:	mov	r3, #4
   1bbf0:	bl	212a0 <flatcc_verify_field@@Base>
   1bbf4:	cmp	r0, #0
   1bbf8:	bne	1bcbc <main@@Base+0x93c>
   1bbfc:	mov	r0, r4
   1bc00:	mov	r1, #6
   1bc04:	mov	r2, #8
   1bc08:	mov	r3, #8
   1bc0c:	bl	212a0 <flatcc_verify_field@@Base>
   1bc10:	cmp	r0, #0
   1bc14:	bne	1bcbc <main@@Base+0x93c>
   1bc18:	mov	r0, r4
   1bc1c:	mov	r1, #7
   1bc20:	mov	r2, #8
   1bc24:	mov	r3, #8
   1bc28:	bl	212a0 <flatcc_verify_field@@Base>
   1bc2c:	cmp	r0, #0
   1bc30:	bne	1bcbc <main@@Base+0x93c>
   1bc34:	mov	r0, r4
   1bc38:	mov	r1, #8
   1bc3c:	mov	r2, #4
   1bc40:	mov	r3, #4
   1bc44:	bl	212a0 <flatcc_verify_field@@Base>
   1bc48:	cmp	r0, #0
   1bc4c:	bne	1bcbc <main@@Base+0x93c>
   1bc50:	mov	r0, r4
   1bc54:	mov	r1, #9
   1bc58:	mov	r2, #8
   1bc5c:	mov	r3, #8
   1bc60:	bl	212a0 <flatcc_verify_field@@Base>
   1bc64:	cmp	r0, #0
   1bc68:	bne	1bcbc <main@@Base+0x93c>
   1bc6c:	mvn	r0, #0
   1bc70:	mov	r1, #1
   1bc74:	str	r1, [sp]
   1bc78:	str	r0, [sp, #4]
   1bc7c:	mov	r0, r4
   1bc80:	mov	r1, #10
   1bc84:	mov	r2, #0
   1bc88:	mov	r3, #1
   1bc8c:	bl	21460 <flatcc_verify_vector_field@@Base>
   1bc90:	cmp	r0, #0
   1bc94:	bne	1bcbc <main@@Base+0x93c>
   1bc98:	mvn	r0, #-536870912	; 0xe0000000
   1bc9c:	mov	r1, #8
   1bca0:	str	r1, [sp]
   1bca4:	str	r0, [sp, #4]
   1bca8:	mov	r0, r4
   1bcac:	mov	r1, #11
   1bcb0:	mov	r2, #0
   1bcb4:	mov	r3, #8
   1bcb8:	bl	21460 <flatcc_verify_vector_field@@Base>
   1bcbc:	sub	sp, fp, #8
   1bcc0:	pop	{r4, sl, fp, pc}
   1bcc4:	ldrsb	r0, [r0]
   1bcc8:	b	1bccc <main@@Base+0x94c>
   1bccc:	bx	lr
   1bcd0:	ldr	r0, [r0]
   1bcd4:	b	1bcd8 <main@@Base+0x958>
   1bcd8:	bx	lr
   1bcdc:	ldrd	r0, [r0]
   1bce0:	b	1bce4 <main@@Base+0x964>
   1bce4:	bx	lr
   1bce8:	ldrb	r0, [r0]
   1bcec:	b	1bcf0 <main@@Base+0x970>
   1bcf0:	bx	lr
   1bcf4:	ldrh	r0, [r0]
   1bcf8:	b	1bcfc <main@@Base+0x97c>
   1bcfc:	bx	lr
   1bd00:	ldr	r0, [r0]
   1bd04:	b	1bd08 <main@@Base+0x988>
   1bd08:	bx	lr
   1bd0c:	ldrd	r0, [r0]
   1bd10:	b	1bd14 <main@@Base+0x994>
   1bd14:	bx	lr
   1bd18:	vldr	s0, [r0]
   1bd1c:	b	1bd20 <main@@Base+0x9a0>
   1bd20:	bx	lr
   1bd24:	vldr	d0, [r0]
   1bd28:	b	1bd2c <main@@Base+0x9ac>
   1bd2c:	bx	lr
   1bd30:	push	{r4, r5, r6, r7, fp, lr}
   1bd34:	add	fp, sp, #16
   1bd38:	sub	sp, sp, #8
   1bd3c:	mov	r4, r0
   1bd40:	mov	r1, #0
   1bd44:	mov	r2, #32
   1bd48:	mov	r3, #16
   1bd4c:	bl	212a0 <flatcc_verify_field@@Base>
   1bd50:	cmp	r0, #0
   1bd54:	bne	1c15c <main@@Base+0xddc>
   1bd58:	mov	r0, r4
   1bd5c:	mov	r1, #2
   1bd60:	mov	r2, #2
   1bd64:	mov	r3, #2
   1bd68:	bl	212a0 <flatcc_verify_field@@Base>
   1bd6c:	cmp	r0, #0
   1bd70:	bne	1c15c <main@@Base+0xddc>
   1bd74:	mov	r0, r4
   1bd78:	mov	r1, #1
   1bd7c:	mov	r2, #2
   1bd80:	mov	r3, #2
   1bd84:	bl	212a0 <flatcc_verify_field@@Base>
   1bd88:	cmp	r0, #0
   1bd8c:	bne	1c15c <main@@Base+0xddc>
   1bd90:	mov	r0, r4
   1bd94:	mov	r1, #3
   1bd98:	mov	r2, #1
   1bd9c:	bl	2130c <flatcc_verify_string_field@@Base>
   1bda0:	cmp	r0, #0
   1bda4:	bne	1c15c <main@@Base+0xddc>
   1bda8:	mov	r5, #1
   1bdac:	mov	r0, r4
   1bdb0:	mov	r1, #6
   1bdb4:	mov	r2, #1
   1bdb8:	mov	r3, #1
   1bdbc:	bl	212a0 <flatcc_verify_field@@Base>
   1bdc0:	cmp	r0, #0
   1bdc4:	bne	1c15c <main@@Base+0xddc>
   1bdc8:	mvn	r0, #0
   1bdcc:	str	r5, [sp]
   1bdd0:	str	r0, [sp, #4]
   1bdd4:	mov	r0, r4
   1bdd8:	mov	r1, #5
   1bddc:	mov	r2, #0
   1bde0:	mov	r3, #1
   1bde4:	bl	21460 <flatcc_verify_vector_field@@Base>
   1bde8:	cmp	r0, #0
   1bdec:	bne	1c15c <main@@Base+0xddc>
   1bdf0:	movw	r3, #48432	; 0xbd30
   1bdf4:	movt	r3, #1
   1bdf8:	mov	r0, r4
   1bdfc:	mov	r1, #11
   1be00:	mov	r2, #0
   1be04:	bl	217cc <flatcc_verify_table_vector_field@@Base>
   1be08:	cmp	r0, #0
   1be0c:	bne	1c15c <main@@Base+0xddc>
   1be10:	mov	r0, r4
   1be14:	mov	r1, #10
   1be18:	mov	r2, #0
   1be1c:	bl	21550 <flatcc_verify_string_vector_field@@Base>
   1be20:	cmp	r0, #0
   1be24:	bne	1c15c <main@@Base+0xddc>
   1be28:	mov	r0, r4
   1be2c:	mov	r1, #28
   1be30:	mov	r2, #0
   1be34:	bl	21550 <flatcc_verify_string_vector_field@@Base>
   1be38:	cmp	r0, #0
   1be3c:	bne	1c15c <main@@Base+0xddc>
   1be40:	mvn	r0, #0
   1be44:	mov	r1, #1
   1be48:	str	r1, [sp]
   1be4c:	str	r0, [sp, #4]
   1be50:	mov	r0, r4
   1be54:	mov	r1, #24
   1be58:	mov	r2, #0
   1be5c:	mov	r3, #1
   1be60:	bl	21460 <flatcc_verify_vector_field@@Base>
   1be64:	cmp	r0, #0
   1be68:	bne	1c15c <main@@Base+0xddc>
   1be6c:	mvn	r0, #-536870912	; 0xe0000000
   1be70:	mov	r1, #4
   1be74:	str	r1, [sp]
   1be78:	str	r0, [sp, #4]
   1be7c:	mov	r0, r4
   1be80:	mov	r1, #29
   1be84:	mov	r2, #0
   1be88:	mov	r3, #8
   1be8c:	bl	21460 <flatcc_verify_vector_field@@Base>
   1be90:	cmp	r0, #0
   1be94:	bne	1c15c <main@@Base+0xddc>
   1be98:	movw	r5, #48432	; 0xbd30
   1be9c:	movt	r5, #1
   1bea0:	mov	r0, r4
   1bea4:	mov	r1, #12
   1bea8:	mov	r2, #0
   1beac:	mov	r3, r5
   1beb0:	bl	21658 <flatcc_verify_table_field@@Base>
   1beb4:	cmp	r0, #0
   1beb8:	bne	1c15c <main@@Base+0xddc>
   1bebc:	movw	r3, #49540	; 0xc184
   1bec0:	movt	r3, #1
   1bec4:	mov	r0, r4
   1bec8:	mov	r1, #8
   1becc:	mov	r2, #0
   1bed0:	bl	21e94 <flatcc_verify_union_field@@Base>
   1bed4:	cmp	r0, #0
   1bed8:	bne	1c15c <main@@Base+0xddc>
   1bedc:	mvn	r6, #-1073741824	; 0xc0000000
   1bee0:	mov	r7, #2
   1bee4:	str	r7, [sp]
   1bee8:	str	r6, [sp, #4]
   1beec:	mov	r0, r4
   1bef0:	mov	r1, #9
   1bef4:	mov	r2, #0
   1bef8:	mov	r3, #4
   1befc:	bl	21460 <flatcc_verify_vector_field@@Base>
   1bf00:	cmp	r0, #0
   1bf04:	bne	1c15c <main@@Base+0xddc>
   1bf08:	str	r7, [sp]
   1bf0c:	str	r6, [sp, #4]
   1bf10:	mov	r0, r4
   1bf14:	mov	r1, #31
   1bf18:	mov	r2, #0
   1bf1c:	mov	r3, #4
   1bf20:	bl	21460 <flatcc_verify_vector_field@@Base>
   1bf24:	cmp	r0, #0
   1bf28:	bne	1c15c <main@@Base+0xddc>
   1bf2c:	mov	r0, #1
   1bf30:	stm	sp, {r0, r5}
   1bf34:	mov	r0, r4
   1bf38:	mov	r1, #13
   1bf3c:	mov	r2, #0
   1bf40:	mov	r3, #0
   1bf44:	bl	21d88 <flatcc_verify_table_as_nested_root@@Base>
   1bf48:	cmp	r0, #0
   1bf4c:	bne	1c15c <main@@Base+0xddc>
   1bf50:	movw	r3, #49584	; 0xc1b0
   1bf54:	movt	r3, #1
   1bf58:	mov	r0, r4
   1bf5c:	mov	r1, #14
   1bf60:	mov	r2, #0
   1bf64:	bl	21658 <flatcc_verify_table_field@@Base>
   1bf68:	cmp	r0, #0
   1bf6c:	bne	1c15c <main@@Base+0xddc>
   1bf70:	mov	r0, r4
   1bf74:	mov	r1, #15
   1bf78:	mov	r2, #1
   1bf7c:	mov	r3, #1
   1bf80:	bl	212a0 <flatcc_verify_field@@Base>
   1bf84:	cmp	r0, #0
   1bf88:	bne	1c15c <main@@Base+0xddc>
   1bf8c:	mov	r0, r4
   1bf90:	mov	r1, #16
   1bf94:	mov	r2, #4
   1bf98:	mov	r3, #4
   1bf9c:	bl	212a0 <flatcc_verify_field@@Base>
   1bfa0:	cmp	r0, #0
   1bfa4:	bne	1c15c <main@@Base+0xddc>
   1bfa8:	mov	r0, r4
   1bfac:	mov	r1, #17
   1bfb0:	mov	r2, #4
   1bfb4:	mov	r3, #4
   1bfb8:	bl	212a0 <flatcc_verify_field@@Base>
   1bfbc:	cmp	r0, #0
   1bfc0:	bne	1c15c <main@@Base+0xddc>
   1bfc4:	mov	r0, r4
   1bfc8:	mov	r1, #18
   1bfcc:	mov	r2, #8
   1bfd0:	mov	r3, #8
   1bfd4:	bl	212a0 <flatcc_verify_field@@Base>
   1bfd8:	cmp	r0, #0
   1bfdc:	bne	1c15c <main@@Base+0xddc>
   1bfe0:	mov	r0, r4
   1bfe4:	mov	r1, #19
   1bfe8:	mov	r2, #8
   1bfec:	mov	r3, #8
   1bff0:	bl	212a0 <flatcc_verify_field@@Base>
   1bff4:	cmp	r0, #0
   1bff8:	bne	1c15c <main@@Base+0xddc>
   1bffc:	mov	r0, r4
   1c000:	mov	r1, #20
   1c004:	mov	r2, #4
   1c008:	mov	r3, #4
   1c00c:	bl	212a0 <flatcc_verify_field@@Base>
   1c010:	cmp	r0, #0
   1c014:	bne	1c15c <main@@Base+0xddc>
   1c018:	mov	r0, r4
   1c01c:	mov	r1, #21
   1c020:	mov	r2, #4
   1c024:	mov	r3, #4
   1c028:	bl	212a0 <flatcc_verify_field@@Base>
   1c02c:	cmp	r0, #0
   1c030:	bne	1c15c <main@@Base+0xddc>
   1c034:	mov	r0, r4
   1c038:	mov	r1, #22
   1c03c:	mov	r2, #8
   1c040:	mov	r3, #8
   1c044:	bl	212a0 <flatcc_verify_field@@Base>
   1c048:	cmp	r0, #0
   1c04c:	bne	1c15c <main@@Base+0xddc>
   1c050:	mov	r0, r4
   1c054:	mov	r1, #23
   1c058:	mov	r2, #8
   1c05c:	mov	r3, #8
   1c060:	bl	212a0 <flatcc_verify_field@@Base>
   1c064:	cmp	r0, #0
   1c068:	bne	1c15c <main@@Base+0xddc>
   1c06c:	mov	r0, r4
   1c070:	mov	r1, #25
   1c074:	mov	r2, #4
   1c078:	mov	r3, #4
   1c07c:	bl	212a0 <flatcc_verify_field@@Base>
   1c080:	cmp	r0, #0
   1c084:	bne	1c15c <main@@Base+0xddc>
   1c088:	mov	r0, r4
   1c08c:	mov	r1, #26
   1c090:	mov	r2, #4
   1c094:	mov	r3, #4
   1c098:	bl	212a0 <flatcc_verify_field@@Base>
   1c09c:	cmp	r0, #0
   1c0a0:	bne	1c15c <main@@Base+0xddc>
   1c0a4:	mov	r0, r4
   1c0a8:	mov	r1, #27
   1c0ac:	mov	r2, #4
   1c0b0:	mov	r3, #4
   1c0b4:	bl	212a0 <flatcc_verify_field@@Base>
   1c0b8:	cmp	r0, #0
   1c0bc:	bne	1c15c <main@@Base+0xddc>
   1c0c0:	mvn	r0, #0
   1c0c4:	mov	r1, #1
   1c0c8:	str	r1, [sp]
   1c0cc:	str	r0, [sp, #4]
   1c0d0:	mov	r0, r4
   1c0d4:	mov	r1, #30
   1c0d8:	mov	r2, #0
   1c0dc:	mov	r3, #1
   1c0e0:	bl	21460 <flatcc_verify_vector_field@@Base>
   1c0e4:	cmp	r0, #0
   1c0e8:	bne	1c15c <main@@Base+0xddc>
   1c0ec:	mvn	r5, #-536870912	; 0xe0000000
   1c0f0:	mov	r6, #8
   1c0f4:	str	r6, [sp]
   1c0f8:	str	r5, [sp, #4]
   1c0fc:	mov	r0, r4
   1c100:	mov	r1, #32
   1c104:	mov	r2, #0
   1c108:	mov	r3, #8
   1c10c:	bl	21460 <flatcc_verify_vector_field@@Base>
   1c110:	cmp	r0, #0
   1c114:	bne	1c15c <main@@Base+0xddc>
   1c118:	str	r6, [sp]
   1c11c:	str	r5, [sp, #4]
   1c120:	mov	r0, r4
   1c124:	mov	r1, #33	; 0x21
   1c128:	mov	r2, #0
   1c12c:	mov	r3, #8
   1c130:	bl	21460 <flatcc_verify_vector_field@@Base>
   1c134:	cmp	r0, #0
   1c138:	bne	1c15c <main@@Base+0xddc>
   1c13c:	movw	r3, #49672	; 0xc208
   1c140:	movt	r3, #1
   1c144:	mov	r0, r4
   1c148:	mov	r1, #34	; 0x22
   1c14c:	mov	r2, #0
   1c150:	bl	21658 <flatcc_verify_table_field@@Base>
   1c154:	cmp	r0, #0
   1c158:	beq	1c164 <main@@Base+0xde4>
   1c15c:	sub	sp, fp, #16
   1c160:	pop	{r4, r5, r6, r7, fp, pc}
   1c164:	movw	r3, #49680	; 0xc210
   1c168:	movt	r3, #1
   1c16c:	mov	r0, r4
   1c170:	mov	r1, #35	; 0x23
   1c174:	mov	r2, #0
   1c178:	sub	sp, fp, #16
   1c17c:	pop	{r4, r5, r6, r7, fp, lr}
   1c180:	b	21658 <flatcc_verify_table_field@@Base>
   1c184:	ldrb	r1, [r0, #12]
   1c188:	sub	r1, r1, #1
   1c18c:	uxtb	r2, r1
   1c190:	cmp	r2, #3
   1c194:	movhi	r0, #0
   1c198:	bxhi	lr
   1c19c:	sxtb	r1, r1
   1c1a0:	movw	r2, #27564	; 0x6bac
   1c1a4:	movt	r2, #2
   1c1a8:	ldr	r1, [r2, r1, lsl #2]
   1c1ac:	b	2192c <flatcc_verify_union_table@@Base>
   1c1b0:	push	{r4, sl, fp, lr}
   1c1b4:	add	fp, sp, #8
   1c1b8:	mov	r4, r0
   1c1bc:	mov	r1, #0
   1c1c0:	mov	r2, #0
   1c1c4:	bl	2130c <flatcc_verify_string_field@@Base>
   1c1c8:	cmp	r0, #0
   1c1cc:	popne	{r4, sl, fp, pc}
   1c1d0:	mov	r0, r4
   1c1d4:	mov	r1, #1
   1c1d8:	mov	r2, #8
   1c1dc:	mov	r3, #8
   1c1e0:	bl	212a0 <flatcc_verify_field@@Base>
   1c1e4:	cmp	r0, #0
   1c1e8:	beq	1c1f0 <main@@Base+0xe70>
   1c1ec:	pop	{r4, sl, fp, pc}
   1c1f0:	mov	r0, r4
   1c1f4:	mov	r1, #2
   1c1f8:	mov	r2, #2
   1c1fc:	mov	r3, #2
   1c200:	pop	{r4, sl, fp, lr}
   1c204:	b	212a0 <flatcc_verify_field@@Base>
   1c208:	mov	r0, #0
   1c20c:	bx	lr
   1c210:	push	{r4, r5, r6, sl, fp, lr}
   1c214:	add	fp, sp, #16
   1c218:	sub	sp, sp, #8
   1c21c:	mov	r4, r0
   1c220:	mvn	r5, #0
   1c224:	mov	r6, #1
   1c228:	str	r6, [sp]
   1c22c:	str	r5, [sp, #4]
   1c230:	mov	r1, #0
   1c234:	mov	r2, #0
   1c238:	mov	r3, #1
   1c23c:	bl	21460 <flatcc_verify_vector_field@@Base>
   1c240:	cmp	r0, #0
   1c244:	bne	1c26c <main@@Base+0xeec>
   1c248:	str	r6, [sp]
   1c24c:	str	r5, [sp, #4]
   1c250:	mov	r0, r4
   1c254:	mov	r1, #1
   1c258:	mov	r2, #0
   1c25c:	mov	r3, #1
   1c260:	bl	21460 <flatcc_verify_vector_field@@Base>
   1c264:	cmp	r0, #0
   1c268:	beq	1c274 <main@@Base+0xef4>
   1c26c:	sub	sp, fp, #16
   1c270:	pop	{r4, r5, r6, sl, fp, pc}
   1c274:	movw	r0, #48432	; 0xbd30
   1c278:	movt	r0, #1
   1c27c:	mov	r1, #1
   1c280:	str	r1, [sp]
   1c284:	str	r0, [sp, #4]
   1c288:	mov	r0, r4
   1c28c:	mov	r1, #2
   1c290:	mov	r2, #0
   1c294:	mov	r3, #0
   1c298:	bl	21d88 <flatcc_verify_table_as_nested_root@@Base>
   1c29c:	sub	sp, fp, #16
   1c2a0:	pop	{r4, r5, r6, sl, fp, pc}
   1c2a4:	push	{r4, sl, fp, lr}
   1c2a8:	add	fp, sp, #8
   1c2ac:	mov	r4, r0
   1c2b0:	mov	r1, #0
   1c2b4:	mov	r2, #1
   1c2b8:	mov	r3, #1
   1c2bc:	bl	212a0 <flatcc_verify_field@@Base>
   1c2c0:	cmp	r0, #0
   1c2c4:	bne	1c300 <main@@Base+0xf80>
   1c2c8:	mov	r0, r4
   1c2cc:	mov	r1, #1
   1c2d0:	mov	r2, #1
   1c2d4:	mov	r3, #1
   1c2d8:	bl	212a0 <flatcc_verify_field@@Base>
   1c2dc:	cmp	r0, #0
   1c2e0:	popne	{r4, sl, fp, pc}
   1c2e4:	mov	r0, r4
   1c2e8:	mov	r1, #2
   1c2ec:	mov	r2, #1
   1c2f0:	mov	r3, #1
   1c2f4:	bl	212a0 <flatcc_verify_field@@Base>
   1c2f8:	cmp	r0, #0
   1c2fc:	beq	1c304 <main@@Base+0xf84>
   1c300:	pop	{r4, sl, fp, pc}
   1c304:	mov	r0, r4
   1c308:	mov	r1, #3
   1c30c:	mov	r2, #1
   1c310:	mov	r3, #1
   1c314:	pop	{r4, sl, fp, lr}
   1c318:	b	212a0 <flatcc_verify_field@@Base>
   1c31c:	mov	r0, #0
   1c320:	bx	lr
   1c324:	push	{r4, sl, fp, lr}
   1c328:	add	fp, sp, #8
   1c32c:	mov	r4, r0
   1c330:	movw	r3, #50060	; 0xc38c
   1c334:	movt	r3, #1
   1c338:	mov	r1, #0
   1c33c:	mov	r2, #0
   1c340:	bl	21658 <flatcc_verify_table_field@@Base>
   1c344:	cmp	r0, #0
   1c348:	popne	{r4, sl, fp, pc}
   1c34c:	movw	r3, #50164	; 0xc3f4
   1c350:	movt	r3, #1
   1c354:	mov	r0, r4
   1c358:	mov	r1, #1
   1c35c:	mov	r2, #0
   1c360:	bl	21658 <flatcc_verify_table_field@@Base>
   1c364:	cmp	r0, #0
   1c368:	beq	1c370 <main@@Base+0xff0>
   1c36c:	pop	{r4, sl, fp, pc}
   1c370:	movw	r3, #49540	; 0xc184
   1c374:	movt	r3, #1
   1c378:	mov	r0, r4
   1c37c:	mov	r1, #3
   1c380:	mov	r2, #0
   1c384:	pop	{r4, sl, fp, lr}
   1c388:	b	22000 <flatcc_verify_union_vector_field@@Base>
   1c38c:	push	{r4, sl, fp, lr}
   1c390:	add	fp, sp, #8
   1c394:	mov	r4, r0
   1c398:	movw	r3, #50332	; 0xc49c
   1c39c:	movt	r3, #1
   1c3a0:	mov	r1, #0
   1c3a4:	mov	r2, #0
   1c3a8:	bl	21658 <flatcc_verify_table_field@@Base>
   1c3ac:	cmp	r0, #0
   1c3b0:	popne	{r4, sl, fp, pc}
   1c3b4:	movw	r3, #50580	; 0xc594
   1c3b8:	movt	r3, #1
   1c3bc:	mov	r0, r4
   1c3c0:	mov	r1, #1
   1c3c4:	mov	r2, #0
   1c3c8:	bl	21658 <flatcc_verify_table_field@@Base>
   1c3cc:	cmp	r0, #0
   1c3d0:	beq	1c3d8 <main@@Base+0x1058>
   1c3d4:	pop	{r4, sl, fp, pc}
   1c3d8:	movw	r3, #50640	; 0xc5d0
   1c3dc:	movt	r3, #1
   1c3e0:	mov	r0, r4
   1c3e4:	mov	r1, #2
   1c3e8:	mov	r2, #0
   1c3ec:	pop	{r4, sl, fp, lr}
   1c3f0:	b	21658 <flatcc_verify_table_field@@Base>
   1c3f4:	push	{r4, sl, fp, lr}
   1c3f8:	add	fp, sp, #8
   1c3fc:	mov	r4, r0
   1c400:	movw	r3, #50700	; 0xc60c
   1c404:	movt	r3, #1
   1c408:	mov	r1, #1
   1c40c:	mov	r2, #0
   1c410:	bl	21e94 <flatcc_verify_union_field@@Base>
   1c414:	cmp	r0, #0
   1c418:	bne	1c47c <main@@Base+0x10fc>
   1c41c:	movw	r3, #50700	; 0xc60c
   1c420:	movt	r3, #1
   1c424:	mov	r0, r4
   1c428:	mov	r1, #3
   1c42c:	mov	r2, #0
   1c430:	bl	21e94 <flatcc_verify_union_field@@Base>
   1c434:	cmp	r0, #0
   1c438:	bne	1c47c <main@@Base+0x10fc>
   1c43c:	movw	r3, #50700	; 0xc60c
   1c440:	movt	r3, #1
   1c444:	mov	r0, r4
   1c448:	mov	r1, #5
   1c44c:	mov	r2, #0
   1c450:	bl	21e94 <flatcc_verify_union_field@@Base>
   1c454:	cmp	r0, #0
   1c458:	popne	{r4, sl, fp, pc}
   1c45c:	movw	r3, #50700	; 0xc60c
   1c460:	movt	r3, #1
   1c464:	mov	r0, r4
   1c468:	mov	r1, #7
   1c46c:	mov	r2, #0
   1c470:	bl	21e94 <flatcc_verify_union_field@@Base>
   1c474:	cmp	r0, #0
   1c478:	beq	1c480 <main@@Base+0x1100>
   1c47c:	pop	{r4, sl, fp, pc}
   1c480:	movw	r3, #50700	; 0xc60c
   1c484:	movt	r3, #1
   1c488:	mov	r0, r4
   1c48c:	mov	r1, #9
   1c490:	mov	r2, #0
   1c494:	pop	{r4, sl, fp, lr}
   1c498:	b	22000 <flatcc_verify_union_vector_field@@Base>
   1c49c:	push	{r4, sl, fp, lr}
   1c4a0:	add	fp, sp, #8
   1c4a4:	mov	r4, r0
   1c4a8:	mov	r1, #0
   1c4ac:	mov	r2, #0
   1c4b0:	bl	2130c <flatcc_verify_string_field@@Base>
   1c4b4:	cmp	r0, #0
   1c4b8:	bne	1c578 <main@@Base+0x11f8>
   1c4bc:	mov	r0, r4
   1c4c0:	mov	r1, #1
   1c4c4:	mov	r2, #4
   1c4c8:	mov	r3, #4
   1c4cc:	bl	212a0 <flatcc_verify_field@@Base>
   1c4d0:	cmp	r0, #0
   1c4d4:	bne	1c578 <main@@Base+0x11f8>
   1c4d8:	mov	r0, r4
   1c4dc:	mov	r1, #2
   1c4e0:	mov	r2, #0
   1c4e4:	bl	2130c <flatcc_verify_string_field@@Base>
   1c4e8:	cmp	r0, #0
   1c4ec:	bne	1c578 <main@@Base+0x11f8>
   1c4f0:	mov	r0, r4
   1c4f4:	mov	r1, #3
   1c4f8:	mov	r2, #8
   1c4fc:	mov	r3, #8
   1c500:	bl	212a0 <flatcc_verify_field@@Base>
   1c504:	cmp	r0, #0
   1c508:	bne	1c578 <main@@Base+0x11f8>
   1c50c:	mov	r0, r4
   1c510:	mov	r1, #4
   1c514:	mov	r2, #0
   1c518:	bl	2130c <flatcc_verify_string_field@@Base>
   1c51c:	cmp	r0, #0
   1c520:	bne	1c578 <main@@Base+0x11f8>
   1c524:	mov	r0, r4
   1c528:	mov	r1, #5
   1c52c:	mov	r2, #8
   1c530:	mov	r3, #8
   1c534:	bl	212a0 <flatcc_verify_field@@Base>
   1c538:	cmp	r0, #0
   1c53c:	bne	1c578 <main@@Base+0x11f8>
   1c540:	mov	r0, r4
   1c544:	mov	r1, #6
   1c548:	mov	r2, #4
   1c54c:	mov	r3, #4
   1c550:	bl	212a0 <flatcc_verify_field@@Base>
   1c554:	cmp	r0, #0
   1c558:	popne	{r4, sl, fp, pc}
   1c55c:	mov	r0, r4
   1c560:	mov	r1, #7
   1c564:	mov	r2, #8
   1c568:	mov	r3, #8
   1c56c:	bl	212a0 <flatcc_verify_field@@Base>
   1c570:	cmp	r0, #0
   1c574:	beq	1c57c <main@@Base+0x11fc>
   1c578:	pop	{r4, sl, fp, pc}
   1c57c:	mov	r0, r4
   1c580:	mov	r1, #8
   1c584:	mov	r2, #4
   1c588:	mov	r3, #4
   1c58c:	pop	{r4, sl, fp, lr}
   1c590:	b	212a0 <flatcc_verify_field@@Base>
   1c594:	push	{r4, sl, fp, lr}
   1c598:	add	fp, sp, #8
   1c59c:	mov	r4, r0
   1c5a0:	mov	r1, #0
   1c5a4:	mov	r2, #8
   1c5a8:	mov	r3, #8
   1c5ac:	bl	212a0 <flatcc_verify_field@@Base>
   1c5b0:	cmp	r0, #0
   1c5b4:	popne	{r4, sl, fp, pc}
   1c5b8:	mov	r0, r4
   1c5bc:	mov	r1, #1
   1c5c0:	mov	r2, #4
   1c5c4:	mov	r3, #4
   1c5c8:	pop	{r4, sl, fp, lr}
   1c5cc:	b	212a0 <flatcc_verify_field@@Base>
   1c5d0:	push	{r4, sl, fp, lr}
   1c5d4:	add	fp, sp, #8
   1c5d8:	mov	r4, r0
   1c5dc:	mov	r1, #0
   1c5e0:	mov	r2, #8
   1c5e4:	mov	r3, #8
   1c5e8:	bl	212a0 <flatcc_verify_field@@Base>
   1c5ec:	cmp	r0, #0
   1c5f0:	popne	{r4, sl, fp, pc}
   1c5f4:	mov	r0, r4
   1c5f8:	mov	r1, #1
   1c5fc:	mov	r2, #4
   1c600:	mov	r3, #4
   1c604:	pop	{r4, sl, fp, lr}
   1c608:	b	212a0 <flatcc_verify_field@@Base>
   1c60c:	ldrb	r2, [r0, #12]
   1c610:	sub	r1, r2, #2
   1c614:	cmp	r1, #9
   1c618:	bhi	1c658 <main@@Base+0x12d8>
   1c61c:	add	r2, pc, #0
   1c620:	ldr	pc, [r2, r1, lsl #2]
   1c624:	andeq	ip, r1, ip, ror #12
   1c628:	andeq	ip, r1, r4, ror #12
   1c62c:	andeq	ip, r1, r4, ror #12
   1c630:	andeq	ip, r1, r4, ror #12
   1c634:	andeq	ip, r1, r4, ror #12
   1c638:	andeq	ip, r1, r4, ror #12
   1c63c:	andeq	ip, r1, r8, ror r6
   1c640:	andeq	ip, r1, ip, asr #12
   1c644:	andeq	ip, r1, ip, asr #12
   1c648:	andeq	ip, r1, r0, ror #12
   1c64c:	mov	r1, #4
   1c650:	mov	r2, #4
   1c654:	b	21960 <flatcc_verify_union_struct@@Base>
   1c658:	cmp	r2, #255	; 0xff
   1c65c:	bne	1c664 <main@@Base+0x12e4>
   1c660:	b	219e0 <flatcc_verify_union_string@@Base>
   1c664:	mov	r0, #0
   1c668:	bx	lr
   1c66c:	movw	r1, #50820	; 0xc684
   1c670:	movt	r1, #1
   1c674:	b	2192c <flatcc_verify_union_table@@Base>
   1c678:	mov	r1, #2
   1c67c:	mov	r2, #2
   1c680:	b	21960 <flatcc_verify_union_struct@@Base>
   1c684:	mov	r1, #0
   1c688:	mov	r2, #4
   1c68c:	mov	r3, #4
   1c690:	b	212a0 <flatcc_verify_field@@Base>
   1c694:	ldr	r0, [r0]
   1c698:	b	1c69c <main@@Base+0x131c>
   1c69c:	bx	lr
   1c6a0:	push	{r4, sl, fp, lr}
   1c6a4:	add	fp, sp, #8
   1c6a8:	mov	r4, r0
   1c6ac:	bl	1c6dc <main@@Base+0x135c>
   1c6b0:	cmp	r0, #0
   1c6b4:	bne	1c6c8 <main@@Base+0x1348>
   1c6b8:	mov	r0, r4
   1c6bc:	bl	1c6e4 <main@@Base+0x1364>
   1c6c0:	cmp	r0, #0
   1c6c4:	beq	1c6d0 <main@@Base+0x1350>
   1c6c8:	mov	r0, #0
   1c6cc:	pop	{r4, sl, fp, pc}
   1c6d0:	mov	r0, r4
   1c6d4:	pop	{r4, sl, fp, lr}
   1c6d8:	b	1c704 <main@@Base+0x1384>
   1c6dc:	mov	r1, #1
   1c6e0:	b	1f02c <flatcc_builder_start_table@@Base>
   1c6e4:	push	{fp, lr}
   1c6e8:	mov	fp, sp
   1c6ec:	bl	1c754 <main@@Base+0x13d4>
   1c6f0:	mov	r1, #0
   1c6f4:	cmp	r0, #0
   1c6f8:	mvneq	r1, #0
   1c6fc:	mov	r0, r1
   1c700:	pop	{fp, pc}
   1c704:	push	{r4, sl, fp, lr}
   1c708:	add	fp, sp, #8
   1c70c:	mov	r4, r0
   1c710:	movw	r1, #27552	; 0x6ba0
   1c714:	movt	r1, #2
   1c718:	mov	r2, #0
   1c71c:	bl	1f6b8 <flatcc_builder_check_required@@Base>
   1c720:	cmp	r0, #0
   1c724:	beq	1c734 <main@@Base+0x13b4>
   1c728:	mov	r0, r4
   1c72c:	pop	{r4, sl, fp, lr}
   1c730:	b	1f738 <flatcc_builder_end_table@@Base>
   1c734:	movw	r0, #14483	; 0x3893
   1c738:	movt	r0, #2
   1c73c:	movw	r1, #13161	; 0x3369
   1c740:	movt	r1, #2
   1c744:	movw	r3, #14672	; 0x3950
   1c748:	movt	r3, #2
   1c74c:	mov	r2, #215	; 0xd7
   1c750:	bl	12f88 <__assert_fail@plt>
   1c754:	mov	r1, #0
   1c758:	mov	r2, #0
   1c75c:	mov	r3, #1
   1c760:	b	1fe28 <flatcc_builder_table_add@@Base>
   1c764:	mov	r1, #0
   1c768:	mov	r2, #0
   1c76c:	mov	r3, #1
   1c770:	b	212a0 <flatcc_verify_field@@Base>
   1c774:	bx	lr
   1c778:	push	{r4, sl, fp, lr}
   1c77c:	add	fp, sp, #8
   1c780:	mov	r4, r0
   1c784:	vldr	s0, [r1]
   1c788:	bl	1bd20 <main@@Base+0x9a0>
   1c78c:	vstr	s0, [r4]
   1c790:	pop	{r4, sl, fp, pc}
   1c794:	push	{r4, sl, fp, lr}
   1c798:	add	fp, sp, #8
   1c79c:	mov	r4, r0
   1c7a0:	vldr	d0, [r1]
   1c7a4:	bl	1bd2c <main@@Base+0x9ac>
   1c7a8:	vstr	d0, [r4]
   1c7ac:	pop	{r4, sl, fp, pc}
   1c7b0:	push	{r4, r5, fp, lr}
   1c7b4:	add	fp, sp, #8
   1c7b8:	mov	r4, r1
   1c7bc:	mov	r5, r0
   1c7c0:	bl	1c7d0 <main@@Base+0x1450>
   1c7c4:	ldrb	r0, [r4, #2]
   1c7c8:	strb	r0, [r5, #2]
   1c7cc:	pop	{r4, r5, fp, pc}
   1c7d0:	push	{r4, sl, fp, lr}
   1c7d4:	add	fp, sp, #8
   1c7d8:	mov	r4, r0
   1c7dc:	ldrsh	r0, [r1]
   1c7e0:	bl	1b63c <main@@Base+0x2bc>
   1c7e4:	strh	r0, [r4]
   1c7e8:	pop	{r4, sl, fp, pc}
   1c7ec:	ldrsb	r0, [r0]
   1c7f0:	b	1c7f4 <main@@Base+0x1474>
   1c7f4:	bx	lr
   1c7f8:	cmp	r0, #0
   1c7fc:	moveq	r0, #0
   1c800:	bxeq	lr
   1c804:	sub	r0, r0, #4
   1c808:	b	1b610 <main@@Base+0x290>
   1c80c:	ldrb	r0, [r0]
   1c810:	b	1c814 <main@@Base+0x1494>
   1c814:	bx	lr
   1c818:	ldrb	r0, [r0]
   1c81c:	b	1c820 <main@@Base+0x14a0>
   1c820:	bx	lr
   1c824:	movw	r1, #9108	; 0x2394
   1c828:	movt	r1, #2
   1c82c:	mov	r2, #0
   1c830:	mov	r3, #2
   1c834:	b	1e340 <flatcc_builder_start_buffer@@Base>
   1c838:	push	{r4, r5, fp, lr}
   1c83c:	add	fp, sp, #8
   1c840:	mov	r4, r1
   1c844:	mov	r5, r0
   1c848:	mov	r0, r1
   1c84c:	bl	1c858 <main@@Base+0x14d8>
   1c850:	strb	r4, [r5]
   1c854:	pop	{r4, r5, fp, pc}
   1c858:	bx	lr
   1c85c:	push	{r4, sl, fp, lr}
   1c860:	add	fp, sp, #8
   1c864:	cmp	r1, #0
   1c868:	popeq	{r4, sl, fp, pc}
   1c86c:	mov	r4, r1
   1c870:	mov	r1, #5
   1c874:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1c878:	cmp	r0, #0
   1c87c:	strne	r4, [r0]
   1c880:	pop	{r4, sl, fp, pc}
   1c884:	mov	r1, #4
   1c888:	mov	r2, #2
   1c88c:	mvn	r3, #-1073741824	; 0xc0000000
   1c890:	b	1ed58 <flatcc_builder_start_vector@@Base>
   1c894:	mov	r1, #128	; 0x80
   1c898:	strb	r1, [r0, #2]
   1c89c:	mov	r1, #112	; 0x70
   1c8a0:	strh	r1, [r0]
   1c8a4:	bx	lr
   1c8a8:	push	{r4, sl, fp, lr}
   1c8ac:	add	fp, sp, #8
   1c8b0:	cmp	r1, #0
   1c8b4:	popeq	{r4, sl, fp, pc}
   1c8b8:	mov	r4, r1
   1c8bc:	mov	r1, #9
   1c8c0:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1c8c4:	cmp	r0, #0
   1c8c8:	strne	r4, [r0]
   1c8cc:	pop	{r4, sl, fp, pc}
   1c8d0:	b	1f990 <flatcc_builder_end_vector@@Base>
   1c8d4:	cmp	r1, #0
   1c8d8:	moveq	r0, #0
   1c8dc:	bxeq	lr
   1c8e0:	b	1e968 <flatcc_builder_offset_vector_push@@Base>
   1c8e4:	push	{r4, sl, fp, lr}
   1c8e8:	add	fp, sp, #8
   1c8ec:	cmp	r1, #0
   1c8f0:	popeq	{r4, sl, fp, pc}
   1c8f4:	mov	r4, r1
   1c8f8:	mov	r1, #11
   1c8fc:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1c900:	cmp	r0, #0
   1c904:	strne	r4, [r0]
   1c908:	pop	{r4, sl, fp, pc}
   1c90c:	push	{r4, sl, fp, lr}
   1c910:	add	fp, sp, #8
   1c914:	cmp	r1, #0
   1c918:	popeq	{r4, sl, fp, pc}
   1c91c:	mov	r4, r1
   1c920:	mov	r1, #10
   1c924:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1c928:	cmp	r0, #0
   1c92c:	strne	r4, [r0]
   1c930:	pop	{r4, sl, fp, pc}
   1c934:	mov	r1, #1
   1c938:	mov	r2, #1
   1c93c:	mvn	r3, #0
   1c940:	b	1ed58 <flatcc_builder_start_vector@@Base>
   1c944:	push	{r4, sl, fp, lr}
   1c948:	add	fp, sp, #8
   1c94c:	cmp	r1, #0
   1c950:	popeq	{r4, sl, fp, pc}
   1c954:	mov	r4, r1
   1c958:	mov	r1, #24
   1c95c:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1c960:	cmp	r0, #0
   1c964:	strne	r4, [r0]
   1c968:	pop	{r4, sl, fp, pc}
   1c96c:	b	1f990 <flatcc_builder_end_vector@@Base>
   1c970:	cmp	r1, #0
   1c974:	bxeq	lr
   1c978:	b	1e968 <flatcc_builder_offset_vector_push@@Base>
   1c97c:	mov	r1, #0
   1c980:	strb	r1, [r0]
   1c984:	bx	lr
   1c988:	mov	r1, #3
   1c98c:	b	1f02c <flatcc_builder_start_table@@Base>
   1c990:	push	{r4, sl, fp, lr}
   1c994:	add	fp, sp, #8
   1c998:	cmp	r1, #0
   1c99c:	popeq	{r4, sl, fp, pc}
   1c9a0:	mov	r4, r1
   1c9a4:	mov	r1, #14
   1c9a8:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1c9ac:	cmp	r0, #0
   1c9b0:	strne	r4, [r0]
   1c9b4:	pop	{r4, sl, fp, pc}
   1c9b8:	push	{r4, sl, fp, lr}
   1c9bc:	add	fp, sp, #8
   1c9c0:	mov	r4, r0
   1c9c4:	movw	r1, #27554	; 0x6ba2
   1c9c8:	movt	r1, #2
   1c9cc:	mov	r2, #0
   1c9d0:	bl	1f6b8 <flatcc_builder_check_required@@Base>
   1c9d4:	cmp	r0, #0
   1c9d8:	beq	1c9e8 <main@@Base+0x1668>
   1c9dc:	mov	r0, r4
   1c9e0:	pop	{r4, sl, fp, lr}
   1c9e4:	b	1f738 <flatcc_builder_end_table@@Base>
   1c9e8:	movw	r0, #16979	; 0x4253
   1c9ec:	movt	r0, #2
   1c9f0:	movw	r1, #13161	; 0x3369
   1c9f4:	movt	r1, #2
   1c9f8:	movw	r3, #17132	; 0x42ec
   1c9fc:	movt	r3, #2
   1ca00:	mov	r2, #221	; 0xdd
   1ca04:	bl	12f88 <__assert_fail@plt>
   1ca08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca0c:	add	fp, sp, #28
   1ca10:	sub	sp, sp, #4
   1ca14:	mov	r8, r0
   1ca18:	bl	1549c <verify_monster@@Base+0xee4>
   1ca1c:	cmp	r0, #0
   1ca20:	beq	1cac0 <main@@Base+0x1740>
   1ca24:	mov	r5, r0
   1ca28:	lsr	r7, r0, #1
   1ca2c:	sub	r6, r0, #1
   1ca30:	mov	r0, r8
   1ca34:	mov	r1, r7
   1ca38:	mov	r2, r6
   1ca3c:	bl	1cac8 <main@@Base+0x1748>
   1ca40:	sub	r7, r7, #1
   1ca44:	cmn	r7, #1
   1ca48:	bne	1ca30 <main@@Base+0x16b0>
   1ca4c:	cmp	r6, #0
   1ca50:	beq	1cac0 <main@@Base+0x1740>
   1ca54:	mov	r0, #4
   1ca58:	sub	r7, r0, r5, lsl #2
   1ca5c:	mvn	r0, #3
   1ca60:	add	r4, r0, r5, lsl #2
   1ca64:	sub	r5, r5, #2
   1ca68:	add	r6, r8, r4
   1ca6c:	mov	r0, r6
   1ca70:	bl	1b610 <main@@Base+0x290>
   1ca74:	add	r9, r0, r4
   1ca78:	mov	r0, r8
   1ca7c:	bl	1b610 <main@@Base+0x290>
   1ca80:	mov	sl, r0
   1ca84:	mov	r0, r8
   1ca88:	mov	r1, r9
   1ca8c:	bl	1cbe0 <main@@Base+0x1860>
   1ca90:	add	r1, sl, r7
   1ca94:	mov	r0, r6
   1ca98:	bl	1cbe0 <main@@Base+0x1860>
   1ca9c:	mov	r0, r8
   1caa0:	mov	r1, #0
   1caa4:	mov	r2, r5
   1caa8:	bl	1cac8 <main@@Base+0x1748>
   1caac:	add	r7, r7, #4
   1cab0:	sub	r4, r4, #4
   1cab4:	sub	r5, r5, #1
   1cab8:	cmn	r5, #1
   1cabc:	bne	1ca68 <main@@Base+0x16e8>
   1cac0:	sub	sp, fp, #28
   1cac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cacc:	add	fp, sp, #28
   1cad0:	sub	sp, sp, #4
   1cad4:	cmp	r2, r1, lsl #1
   1cad8:	bcc	1cbd8 <main@@Base+0x1858>
   1cadc:	mov	r4, r2
   1cae0:	mov	sl, r1
   1cae4:	mov	r8, r0
   1cae8:	lsl	r7, r1, #1
   1caec:	str	r2, [sp]
   1caf0:	cmp	r7, r4
   1caf4:	bcs	1cb40 <main@@Base+0x17c0>
   1caf8:	mov	r0, r8
   1cafc:	mov	r1, r7
   1cb00:	bl	154b0 <verify_monster@@Base+0xef8>
   1cb04:	bl	15048 <verify_monster@@Base+0xa90>
   1cb08:	mov	r9, r0
   1cb0c:	orr	r4, r7, #1
   1cb10:	mov	r0, r8
   1cb14:	mov	r1, r4
   1cb18:	bl	154b0 <verify_monster@@Base+0xef8>
   1cb1c:	bl	15048 <verify_monster@@Base+0xa90>
   1cb20:	mov	r6, r0
   1cb24:	bl	150c8 <verify_monster@@Base+0xb10>
   1cb28:	mov	r2, r0
   1cb2c:	mov	r0, r9
   1cb30:	mov	r1, r6
   1cb34:	bl	1cc00 <main@@Base+0x1880>
   1cb38:	cmp	r0, #0
   1cb3c:	movmi	r7, r4
   1cb40:	mov	r6, r7
   1cb44:	mov	r0, r8
   1cb48:	mov	r1, sl
   1cb4c:	bl	154b0 <verify_monster@@Base+0xef8>
   1cb50:	bl	15048 <verify_monster@@Base+0xa90>
   1cb54:	mov	r7, r0
   1cb58:	mov	r0, r8
   1cb5c:	mov	r1, r6
   1cb60:	bl	154b0 <verify_monster@@Base+0xef8>
   1cb64:	bl	15048 <verify_monster@@Base+0xa90>
   1cb68:	mov	r5, r0
   1cb6c:	bl	150c8 <verify_monster@@Base+0xb10>
   1cb70:	mov	r2, r0
   1cb74:	mov	r0, r7
   1cb78:	mov	r1, r5
   1cb7c:	bl	1cc00 <main@@Base+0x1880>
   1cb80:	cmn	r0, #1
   1cb84:	bgt	1cbd8 <main@@Base+0x1858>
   1cb88:	sub	r7, sl, r6
   1cb8c:	add	r5, r8, r6, lsl #2
   1cb90:	mov	r0, r5
   1cb94:	bl	1b610 <main@@Base+0x290>
   1cb98:	sub	r9, r0, r7, lsl #2
   1cb9c:	add	r4, r8, sl, lsl #2
   1cba0:	mov	r0, r4
   1cba4:	bl	1b610 <main@@Base+0x290>
   1cba8:	mov	sl, r0
   1cbac:	mov	r0, r4
   1cbb0:	mov	r1, r9
   1cbb4:	ldr	r4, [sp]
   1cbb8:	bl	1cbe0 <main@@Base+0x1860>
   1cbbc:	add	r1, sl, r7, lsl #2
   1cbc0:	mov	r0, r5
   1cbc4:	bl	1cbe0 <main@@Base+0x1860>
   1cbc8:	lsl	r7, r6, #1
   1cbcc:	cmp	r4, r6, lsl #1
   1cbd0:	mov	sl, r6
   1cbd4:	bcs	1caf0 <main@@Base+0x1770>
   1cbd8:	sub	sp, fp, #28
   1cbdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbe0:	push	{r4, r5, fp, lr}
   1cbe4:	add	fp, sp, #8
   1cbe8:	mov	r4, r1
   1cbec:	mov	r5, r0
   1cbf0:	mov	r0, r1
   1cbf4:	bl	1cc54 <main@@Base+0x18d4>
   1cbf8:	str	r4, [r5]
   1cbfc:	pop	{r4, r5, fp, pc}
   1cc00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cc04:	add	fp, sp, #24
   1cc08:	mov	r4, r2
   1cc0c:	mov	r8, r1
   1cc10:	mov	r6, r0
   1cc14:	bl	150c8 <verify_monster@@Base+0xb10>
   1cc18:	mov	r7, r0
   1cc1c:	mov	r5, #0
   1cc20:	cmp	r0, r4
   1cc24:	movwhi	r5, #1
   1cc28:	mov	r2, r4
   1cc2c:	movcc	r2, r0
   1cc30:	mov	r0, r6
   1cc34:	mov	r1, r8
   1cc38:	bl	12f70 <strncmp@plt>
   1cc3c:	cmp	r0, #0
   1cc40:	mvneq	r0, #0
   1cc44:	movne	r5, r0
   1cc48:	cmp	r7, r4
   1cc4c:	movcs	r0, r5
   1cc50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cc54:	bx	lr
   1cc58:	b	12e8c <strcmp@plt>
   1cc5c:	push	{r4, r5, r6, r7, fp, lr}
   1cc60:	add	fp, sp, #16
   1cc64:	mov	r5, r0
   1cc68:	bl	1549c <verify_monster@@Base+0xee4>
   1cc6c:	mvn	r4, #0
   1cc70:	cmp	r0, #0
   1cc74:	beq	1ccbc <main@@Base+0x193c>
   1cc78:	mov	r6, #0
   1cc7c:	movw	r7, #10997	; 0x2af5
   1cc80:	movt	r7, #2
   1cc84:	mov	r0, r5
   1cc88:	mov	r1, r6
   1cc8c:	bl	154b0 <verify_monster@@Base+0xef8>
   1cc90:	bl	15048 <verify_monster@@Base+0xa90>
   1cc94:	mov	r1, r7
   1cc98:	mov	r2, #5
   1cc9c:	bl	1cc00 <main@@Base+0x1880>
   1cca0:	cmp	r0, #0
   1cca4:	beq	1ccc4 <main@@Base+0x1944>
   1cca8:	add	r6, r6, #1
   1ccac:	mov	r0, r5
   1ccb0:	bl	1549c <verify_monster@@Base+0xee4>
   1ccb4:	cmp	r6, r0
   1ccb8:	bcc	1cc84 <main@@Base+0x1904>
   1ccbc:	mov	r0, r4
   1ccc0:	pop	{r4, r5, r6, r7, fp, pc}
   1ccc4:	mov	r0, r6
   1ccc8:	pop	{r4, r5, r6, r7, fp, pc}
   1cccc:	push	{r4, r5, r6, sl, fp, lr}
   1ccd0:	add	fp, sp, #16
   1ccd4:	mov	r4, r0
   1ccd8:	bl	15208 <verify_monster@@Base+0xc50>
   1ccdc:	cmp	r0, #0
   1cce0:	beq	1cd38 <main@@Base+0x19b8>
   1cce4:	lsr	r6, r0, #1
   1cce8:	sub	r5, r0, #1
   1ccec:	mov	r0, r4
   1ccf0:	mov	r1, r6
   1ccf4:	mov	r2, r5
   1ccf8:	bl	1cd3c <main@@Base+0x19bc>
   1ccfc:	sub	r6, r6, #1
   1cd00:	cmn	r6, #1
   1cd04:	bne	1ccec <main@@Base+0x196c>
   1cd08:	b	1cd30 <main@@Base+0x19b0>
   1cd0c:	ldrb	r0, [r4, r5]
   1cd10:	ldrb	r1, [r4]
   1cd14:	strb	r1, [r4, r5]
   1cd18:	strb	r0, [r4]
   1cd1c:	sub	r5, r5, #1
   1cd20:	mov	r0, r4
   1cd24:	mov	r1, #0
   1cd28:	mov	r2, r5
   1cd2c:	bl	1cd3c <main@@Base+0x19bc>
   1cd30:	cmp	r5, #0
   1cd34:	bne	1cd0c <main@@Base+0x198c>
   1cd38:	pop	{r4, r5, r6, sl, fp, pc}
   1cd3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1cd40:	add	fp, sp, #24
   1cd44:	cmp	r2, r1, lsl #1
   1cd48:	bcc	1cdd4 <main@@Base+0x1a54>
   1cd4c:	mov	r8, r2
   1cd50:	mov	r6, r1
   1cd54:	mov	r5, r0
   1cd58:	lsl	r4, r1, #1
   1cd5c:	cmp	r4, r8
   1cd60:	bcs	1cd8c <main@@Base+0x1a0c>
   1cd64:	mov	r0, r5
   1cd68:	mov	r1, r4
   1cd6c:	bl	1520c <verify_monster@@Base+0xc54>
   1cd70:	mov	r9, r0
   1cd74:	orr	r7, r4, #1
   1cd78:	mov	r0, r5
   1cd7c:	mov	r1, r7
   1cd80:	bl	1520c <verify_monster@@Base+0xc54>
   1cd84:	cmp	r9, r0
   1cd88:	movcc	r4, r7
   1cd8c:	mov	r7, r4
   1cd90:	mov	r0, r5
   1cd94:	mov	r1, r6
   1cd98:	bl	1520c <verify_monster@@Base+0xc54>
   1cd9c:	mov	r4, r0
   1cda0:	mov	r0, r5
   1cda4:	mov	r1, r7
   1cda8:	bl	1520c <verify_monster@@Base+0xc54>
   1cdac:	cmp	r4, r0
   1cdb0:	bcs	1cdd4 <main@@Base+0x1a54>
   1cdb4:	ldrb	r0, [r5, r7]
   1cdb8:	ldrb	r1, [r5, r6]
   1cdbc:	strb	r1, [r5, r7]
   1cdc0:	strb	r0, [r5, r6]
   1cdc4:	lsl	r4, r7, #1
   1cdc8:	cmp	r8, r7, lsl #1
   1cdcc:	mov	r6, r7
   1cdd0:	bcs	1cd5c <main@@Base+0x19dc>
   1cdd4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cdd8:	push	{fp, lr}
   1cddc:	mov	fp, sp
   1cde0:	sub	sp, sp, #8
   1cde4:	mvn	r2, #0
   1cde8:	mov	r3, #1
   1cdec:	str	r3, [sp]
   1cdf0:	str	r2, [sp, #4]
   1cdf4:	mov	r2, #7
   1cdf8:	mov	r3, #1
   1cdfc:	bl	1f884 <flatcc_builder_create_vector@@Base>
   1ce00:	mov	sp, fp
   1ce04:	pop	{fp, pc}
   1ce08:	push	{r4, r5, fp, lr}
   1ce0c:	add	fp, sp, #8
   1ce10:	mov	r4, r1
   1ce14:	mov	r5, r0
   1ce18:	mov	r0, r1
   1ce1c:	bl	150c8 <verify_monster@@Base+0xb10>
   1ce20:	mov	r2, r0
   1ce24:	mov	r0, r5
   1ce28:	mov	r1, r4
   1ce2c:	pop	{r4, r5, fp, lr}
   1ce30:	b	2046c <flatcc_builder_create_string@@Base>
   1ce34:	cmp	r1, #0
   1ce38:	bxeq	lr
   1ce3c:	b	1e968 <flatcc_builder_offset_vector_push@@Base>
   1ce40:	push	{r4, r5, r6, r7, fp, lr}
   1ce44:	add	fp, sp, #16
   1ce48:	mov	r4, r3
   1ce4c:	mov	r5, r2
   1ce50:	mov	r6, r1
   1ce54:	mov	r7, r0
   1ce58:	mov	r0, r1
   1ce5c:	bl	150c8 <verify_monster@@Base+0xb10>
   1ce60:	cmp	r0, r5
   1ce64:	movls	r5, r0
   1ce68:	add	r1, r6, r5
   1ce6c:	sub	r2, r0, r5
   1ce70:	cmp	r2, r4
   1ce74:	movcs	r2, r4
   1ce78:	mov	r0, r7
   1ce7c:	pop	{r4, r5, r6, r7, fp, lr}
   1ce80:	b	2046c <flatcc_builder_create_string@@Base>
   1ce84:	push	{r4, r5, fp, lr}
   1ce88:	add	fp, sp, #8
   1ce8c:	sub	sp, sp, #8
   1ce90:	mov	r4, r1
   1ce94:	mov	r5, r0
   1ce98:	mov	r0, r1
   1ce9c:	bl	156c8 <verify_monster@@Base+0x1110>
   1cea0:	mov	r2, r0
   1cea4:	mvn	r0, #0
   1cea8:	mov	r1, #1
   1ceac:	str	r1, [sp]
   1ceb0:	str	r0, [sp, #4]
   1ceb4:	mov	r0, r5
   1ceb8:	mov	r1, r4
   1cebc:	mov	r3, #1
   1cec0:	bl	1f884 <flatcc_builder_create_vector@@Base>
   1cec4:	sub	sp, fp, #8
   1cec8:	pop	{r4, r5, fp, pc}
   1cecc:	push	{r4, r5, r6, r7, fp, lr}
   1ced0:	add	fp, sp, #16
   1ced4:	sub	sp, sp, #8
   1ced8:	mov	r4, r1
   1cedc:	mov	r5, r0
   1cee0:	mov	r0, r1
   1cee4:	bl	153a8 <verify_monster@@Base+0xdf0>
   1cee8:	mov	r6, r0
   1ceec:	cmp	r0, #0
   1cef0:	mov	r7, r0
   1cef4:	movwne	r7, #1
   1cef8:	mov	r0, r4
   1cefc:	mov	r1, r7
   1cf00:	bl	1cf38 <main@@Base+0x1bb8>
   1cf04:	mov	r1, r0
   1cf08:	mvn	r0, #-1073741824	; 0xc0000000
   1cf0c:	mov	r2, #2
   1cf10:	str	r2, [sp]
   1cf14:	str	r0, [sp, #4]
   1cf18:	sub	r0, r6, r7
   1cf1c:	cmp	r0, #2
   1cf20:	movcc	r2, r0
   1cf24:	mov	r0, r5
   1cf28:	mov	r3, #4
   1cf2c:	bl	1f884 <flatcc_builder_create_vector@@Base>
   1cf30:	sub	sp, fp, #16
   1cf34:	pop	{r4, r5, r6, r7, fp, pc}
   1cf38:	add	r0, r0, r1, lsl #2
   1cf3c:	bx	lr
   1cf40:	push	{r4, r5, r6, r7, fp, lr}
   1cf44:	add	fp, sp, #16
   1cf48:	sub	sp, sp, #8
   1cf4c:	mov	r4, r1
   1cf50:	mov	r5, r0
   1cf54:	mov	r0, r1
   1cf58:	bl	156c8 <verify_monster@@Base+0x1110>
   1cf5c:	mov	r6, r0
   1cf60:	cmp	r0, #3
   1cf64:	mov	r7, r0
   1cf68:	movcs	r7, #3
   1cf6c:	mov	r0, r4
   1cf70:	mov	r1, r7
   1cf74:	bl	1cfa4 <main@@Base+0x1c24>
   1cf78:	mov	r1, r0
   1cf7c:	mvn	r0, #0
   1cf80:	mov	r2, #1
   1cf84:	str	r2, [sp]
   1cf88:	str	r0, [sp, #4]
   1cf8c:	sub	r2, r6, r7
   1cf90:	mov	r0, r5
   1cf94:	mov	r3, #1
   1cf98:	bl	1f884 <flatcc_builder_create_vector@@Base>
   1cf9c:	sub	sp, fp, #16
   1cfa0:	pop	{r4, r5, r6, r7, fp, pc}
   1cfa4:	add	r0, r0, r1
   1cfa8:	bx	lr
   1cfac:	push	{r4, r5, fp, lr}
   1cfb0:	add	fp, sp, #8
   1cfb4:	sub	sp, sp, #8
   1cfb8:	mov	r4, r1
   1cfbc:	mov	r5, r0
   1cfc0:	mov	r0, r1
   1cfc4:	bl	153a8 <verify_monster@@Base+0xdf0>
   1cfc8:	mov	r2, r0
   1cfcc:	mvn	r0, #-1073741824	; 0xc0000000
   1cfd0:	mov	r1, #2
   1cfd4:	str	r1, [sp]
   1cfd8:	str	r0, [sp, #4]
   1cfdc:	mov	r0, r5
   1cfe0:	mov	r1, r4
   1cfe4:	mov	r3, #4
   1cfe8:	bl	1f884 <flatcc_builder_create_vector@@Base>
   1cfec:	sub	sp, fp, #8
   1cff0:	pop	{r4, r5, fp, pc}
   1cff4:	push	{r4, r5, fp, lr}
   1cff8:	add	fp, sp, #8
   1cffc:	mov	r5, r1
   1d000:	mov	r4, r0
   1d004:	bl	1c988 <main@@Base+0x1608>
   1d008:	cmp	r0, #0
   1d00c:	bne	1d044 <main@@Base+0x1cc4>
   1d010:	mov	r0, r4
   1d014:	bl	1d058 <main@@Base+0x1cd8>
   1d018:	cmp	r0, #0
   1d01c:	bne	1d044 <main@@Base+0x1cc4>
   1d020:	mov	r0, r4
   1d024:	mov	r1, r5
   1d028:	bl	1d094 <main@@Base+0x1d14>
   1d02c:	cmp	r0, #0
   1d030:	bne	1d044 <main@@Base+0x1cc4>
   1d034:	mov	r0, r4
   1d038:	bl	1d0c8 <main@@Base+0x1d48>
   1d03c:	cmp	r0, #0
   1d040:	beq	1d04c <main@@Base+0x1ccc>
   1d044:	mov	r0, #0
   1d048:	pop	{r4, r5, fp, pc}
   1d04c:	mov	r0, r4
   1d050:	pop	{r4, r5, fp, lr}
   1d054:	b	1c9b8 <main@@Base+0x1638>
   1d058:	push	{fp, lr}
   1d05c:	mov	fp, sp
   1d060:	mov	r1, #1
   1d064:	mov	r2, #8
   1d068:	mov	r3, #8
   1d06c:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1d070:	cmp	r0, #0
   1d074:	beq	1d08c <main@@Base+0x1d0c>
   1d078:	mvn	r2, #99	; 0x63
   1d07c:	mvn	r3, #0
   1d080:	bl	1ba44 <main@@Base+0x6c4>
   1d084:	mov	r0, #0
   1d088:	pop	{fp, pc}
   1d08c:	mvn	r0, #0
   1d090:	pop	{fp, pc}
   1d094:	push	{r4, r5, fp, lr}
   1d098:	add	fp, sp, #8
   1d09c:	mvn	r4, #0
   1d0a0:	cmp	r1, #0
   1d0a4:	beq	1d0c0 <main@@Base+0x1d40>
   1d0a8:	mov	r5, r1
   1d0ac:	mov	r1, #0
   1d0b0:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1d0b4:	cmp	r0, #0
   1d0b8:	strne	r5, [r0]
   1d0bc:	movne	r4, #0
   1d0c0:	mov	r0, r4
   1d0c4:	pop	{r4, r5, fp, pc}
   1d0c8:	push	{fp, lr}
   1d0cc:	mov	fp, sp
   1d0d0:	mov	r1, #2
   1d0d4:	mov	r2, #2
   1d0d8:	mov	r3, #2
   1d0dc:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1d0e0:	cmp	r0, #0
   1d0e4:	beq	1d0f8 <main@@Base+0x1d78>
   1d0e8:	mov	r1, #2
   1d0ec:	bl	1bb0c <main@@Base+0x78c>
   1d0f0:	mov	r0, #0
   1d0f4:	pop	{fp, pc}
   1d0f8:	mvn	r0, #0
   1d0fc:	pop	{fp, pc}
   1d100:	mov	r1, #4
   1d104:	b	1f02c <flatcc_builder_start_table@@Base>
   1d108:	push	{r4, sl, fp, lr}
   1d10c:	add	fp, sp, #8
   1d110:	mov	r4, r0
   1d114:	movw	r1, #27556	; 0x6ba4
   1d118:	movt	r1, #2
   1d11c:	mov	r2, #0
   1d120:	bl	1f6b8 <flatcc_builder_check_required@@Base>
   1d124:	cmp	r0, #0
   1d128:	beq	1d138 <main@@Base+0x1db8>
   1d12c:	mov	r0, r4
   1d130:	pop	{r4, sl, fp, lr}
   1d134:	b	1f738 <flatcc_builder_end_table@@Base>
   1d138:	movw	r0, #17344	; 0x43c0
   1d13c:	movt	r0, #2
   1d140:	movw	r1, #13161	; 0x3369
   1d144:	movt	r1, #2
   1d148:	movw	r3, #17554	; 0x4492
   1d14c:	movt	r3, #2
   1d150:	mov	r2, #217	; 0xd9
   1d154:	bl	12f88 <__assert_fail@plt>
   1d158:	mov	r1, #4
   1d15c:	b	1f02c <flatcc_builder_start_table@@Base>
   1d160:	push	{r4, sl, fp, lr}
   1d164:	add	fp, sp, #8
   1d168:	mov	r4, r0
   1d16c:	movw	r1, #27558	; 0x6ba6
   1d170:	movt	r1, #2
   1d174:	mov	r2, #0
   1d178:	bl	1f6b8 <flatcc_builder_check_required@@Base>
   1d17c:	cmp	r0, #0
   1d180:	beq	1d190 <main@@Base+0x1e10>
   1d184:	mov	r0, r4
   1d188:	pop	{r4, sl, fp, lr}
   1d18c:	b	1f738 <flatcc_builder_end_table@@Base>
   1d190:	movw	r0, #17667	; 0x4503
   1d194:	movt	r0, #2
   1d198:	movw	r1, #13161	; 0x3369
   1d19c:	movt	r1, #2
   1d1a0:	movw	r3, #17817	; 0x4599
   1d1a4:	movt	r3, #2
   1d1a8:	mov	r2, #223	; 0xdf
   1d1ac:	bl	12f88 <__assert_fail@plt>
   1d1b0:	push	{r4, sl, fp, lr}
   1d1b4:	add	fp, sp, #8
   1d1b8:	sub	sp, sp, #8
   1d1bc:	mov	r4, r0
   1d1c0:	mov	r0, sp
   1d1c4:	bl	1d1dc <main@@Base+0x1e5c>
   1d1c8:	ldm	sp, {r1, r2}
   1d1cc:	mov	r0, r4
   1d1d0:	sub	sp, fp, #8
   1d1d4:	pop	{r4, sl, fp, lr}
   1d1d8:	b	16284 <gen_monster@@Base+0x748>
   1d1dc:	str	r1, [r0, #4]
   1d1e0:	mov	r1, #4
   1d1e4:	strb	r1, [r0]
   1d1e8:	bx	lr
   1d1ec:	ldrb	r0, [r0]
   1d1f0:	b	1d1f4 <main@@Base+0x1e74>
   1d1f4:	bx	lr
   1d1f8:	mov	r1, #10
   1d1fc:	b	1f02c <flatcc_builder_start_table@@Base>
   1d200:	mov	r1, #4
   1d204:	mov	r2, #4
   1d208:	b	1e628 <flatcc_builder_start_struct@@Base>
   1d20c:	b	1ba9c <main@@Base+0x71c>
   1d210:	b	1e704 <flatcc_builder_end_struct@@Base>
   1d214:	mov	r1, #2
   1d218:	mov	r2, #2
   1d21c:	b	1e628 <flatcc_builder_start_struct@@Base>
   1d220:	b	1bb0c <main@@Base+0x78c>
   1d224:	b	1e704 <flatcc_builder_end_struct@@Base>
   1d228:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d22c:	add	fp, sp, #24
   1d230:	tst	r1, #255	; 0xff
   1d234:	beq	1d288 <main@@Base+0x1f08>
   1d238:	mov	r5, r2
   1d23c:	mvn	r4, #0
   1d240:	cmp	r2, #0
   1d244:	beq	1d28c <main@@Base+0x1f0c>
   1d248:	mov	r6, r1
   1d24c:	mov	r7, r0
   1d250:	mov	r1, #0
   1d254:	mov	r2, #1
   1d258:	mov	r3, #1
   1d25c:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1d260:	cmp	r0, #0
   1d264:	beq	1d28c <main@@Base+0x1f0c>
   1d268:	mov	r8, r0
   1d26c:	mov	r0, r7
   1d270:	mov	r1, #1
   1d274:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1d278:	cmp	r0, #0
   1d27c:	beq	1d28c <main@@Base+0x1f0c>
   1d280:	strb	r6, [r8]
   1d284:	str	r5, [r0]
   1d288:	mov	r4, #0
   1d28c:	mov	r0, r4
   1d290:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d294:	push	{r4, r5, r6, r7, fp, lr}
   1d298:	add	fp, sp, #16
   1d29c:	cmp	r2, #0
   1d2a0:	movne	r5, r1
   1d2a4:	movne	r6, r0
   1d2a8:	uxtbne	r0, r1
   1d2ac:	cmpne	r0, #0
   1d2b0:	bne	1d2b8 <main@@Base+0x1f38>
   1d2b4:	pop	{r4, r5, r6, r7, fp, pc}
   1d2b8:	mov	r4, r2
   1d2bc:	mov	r0, r6
   1d2c0:	mov	r1, #6
   1d2c4:	mov	r2, #1
   1d2c8:	mov	r3, #1
   1d2cc:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1d2d0:	cmp	r0, #0
   1d2d4:	beq	1d2b4 <main@@Base+0x1f34>
   1d2d8:	mov	r7, r0
   1d2dc:	mov	r0, r6
   1d2e0:	mov	r1, #7
   1d2e4:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1d2e8:	cmp	r0, #0
   1d2ec:	strbne	r5, [r7]
   1d2f0:	strne	r4, [r0]
   1d2f4:	pop	{r4, r5, r6, r7, fp, pc}
   1d2f8:	mov	r1, #1
   1d2fc:	b	1f02c <flatcc_builder_start_table@@Base>
   1d300:	push	{r4, r5, fp, lr}
   1d304:	add	fp, sp, #8
   1d308:	cmp	r1, #0
   1d30c:	beq	1d340 <main@@Base+0x1fc0>
   1d310:	mov	r5, r1
   1d314:	mov	r4, #0
   1d318:	mov	r1, #0
   1d31c:	mov	r2, #4
   1d320:	mov	r3, #4
   1d324:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1d328:	cmp	r0, #0
   1d32c:	mvneq	r4, #0
   1d330:	movne	r1, r5
   1d334:	blne	1ba9c <main@@Base+0x71c>
   1d338:	mov	r0, r4
   1d33c:	pop	{r4, r5, fp, pc}
   1d340:	mov	r4, #0
   1d344:	mov	r0, r4
   1d348:	pop	{r4, r5, fp, pc}
   1d34c:	push	{r4, sl, fp, lr}
   1d350:	add	fp, sp, #8
   1d354:	mov	r4, r0
   1d358:	movw	r1, #27560	; 0x6ba8
   1d35c:	movt	r1, #2
   1d360:	mov	r2, #0
   1d364:	bl	1f6b8 <flatcc_builder_check_required@@Base>
   1d368:	cmp	r0, #0
   1d36c:	beq	1d37c <main@@Base+0x1ffc>
   1d370:	mov	r0, r4
   1d374:	pop	{r4, sl, fp, lr}
   1d378:	b	1f738 <flatcc_builder_end_table@@Base>
   1d37c:	movw	r0, #18748	; 0x493c
   1d380:	movt	r0, #2
   1d384:	movw	r1, #13161	; 0x3369
   1d388:	movt	r1, #2
   1d38c:	movw	r3, #18892	; 0x49cc
   1d390:	movt	r3, #2
   1d394:	mov	r2, #239	; 0xef
   1d398:	bl	12f88 <__assert_fail@plt>
   1d39c:	push	{r4, r5, r6, r7, fp, lr}
   1d3a0:	add	fp, sp, #16
   1d3a4:	cmp	r2, #0
   1d3a8:	movne	r5, r1
   1d3ac:	movne	r6, r0
   1d3b0:	uxtbne	r0, r1
   1d3b4:	cmpne	r0, #0
   1d3b8:	bne	1d3c0 <main@@Base+0x2040>
   1d3bc:	pop	{r4, r5, r6, r7, fp, pc}
   1d3c0:	mov	r4, r2
   1d3c4:	mov	r0, r6
   1d3c8:	mov	r1, #2
   1d3cc:	mov	r2, #1
   1d3d0:	mov	r3, #1
   1d3d4:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1d3d8:	cmp	r0, #0
   1d3dc:	beq	1d3bc <main@@Base+0x203c>
   1d3e0:	mov	r7, r0
   1d3e4:	mov	r0, r6
   1d3e8:	mov	r1, #3
   1d3ec:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1d3f0:	cmp	r0, #0
   1d3f4:	strbne	r5, [r7]
   1d3f8:	strne	r4, [r0]
   1d3fc:	pop	{r4, r5, r6, r7, fp, pc}
   1d400:	str	r1, [r0, #4]
   1d404:	mov	r1, #2
   1d408:	strb	r1, [r0]
   1d40c:	bx	lr
   1d410:	push	{r4, sl, fp, lr}
   1d414:	add	fp, sp, #8
   1d418:	sub	sp, sp, #8
   1d41c:	mov	r4, r0
   1d420:	mov	r0, sp
   1d424:	bl	19938 <test_mixed_type_union@@Base+0x8c4>
   1d428:	ldm	sp, {r1, r2}
   1d42c:	mov	r0, r4
   1d430:	sub	sp, fp, #8
   1d434:	pop	{r4, sl, fp, lr}
   1d438:	b	1d43c <main@@Base+0x20bc>
   1d43c:	push	{r4, r5, r6, r7, fp, lr}
   1d440:	add	fp, sp, #16
   1d444:	cmp	r2, #0
   1d448:	movne	r5, r1
   1d44c:	movne	r6, r0
   1d450:	uxtbne	r0, r1
   1d454:	cmpne	r0, #0
   1d458:	bne	1d460 <main@@Base+0x20e0>
   1d45c:	pop	{r4, r5, r6, r7, fp, pc}
   1d460:	mov	r4, r2
   1d464:	mov	r0, r6
   1d468:	mov	r1, #4
   1d46c:	mov	r2, #1
   1d470:	mov	r3, #1
   1d474:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1d478:	cmp	r0, #0
   1d47c:	beq	1d45c <main@@Base+0x20dc>
   1d480:	mov	r7, r0
   1d484:	mov	r0, r6
   1d488:	mov	r1, #5
   1d48c:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1d490:	cmp	r0, #0
   1d494:	strbne	r5, [r7]
   1d498:	strne	r4, [r0]
   1d49c:	pop	{r4, r5, r6, r7, fp, pc}
   1d4a0:	str	r1, [r0, #4]
   1d4a4:	mov	r1, #9
   1d4a8:	strb	r1, [r0]
   1d4ac:	bx	lr
   1d4b0:	b	1e704 <flatcc_builder_end_struct@@Base>
   1d4b4:	push	{r4, r5, r6, sl, fp, lr}
   1d4b8:	add	fp, sp, #16
   1d4bc:	cmp	r1, #0
   1d4c0:	movne	r4, r2
   1d4c4:	cmpne	r2, #0
   1d4c8:	bne	1d4d0 <main@@Base+0x2150>
   1d4cc:	pop	{r4, r5, r6, sl, fp, pc}
   1d4d0:	mov	r6, r1
   1d4d4:	mov	r5, r0
   1d4d8:	mov	r1, #8
   1d4dc:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1d4e0:	cmp	r0, #0
   1d4e4:	beq	1d4cc <main@@Base+0x214c>
   1d4e8:	str	r6, [r0]
   1d4ec:	mov	r0, r5
   1d4f0:	mov	r1, #9
   1d4f4:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1d4f8:	cmp	r0, #0
   1d4fc:	strne	r4, [r0]
   1d500:	pop	{r4, r5, r6, sl, fp, pc}
   1d504:	push	{r4, sl, fp, lr}
   1d508:	add	fp, sp, #8
   1d50c:	mov	r4, r0
   1d510:	movw	r1, #27562	; 0x6baa
   1d514:	movt	r1, #2
   1d518:	mov	r2, #0
   1d51c:	bl	1f6b8 <flatcc_builder_check_required@@Base>
   1d520:	cmp	r0, #0
   1d524:	beq	1d534 <main@@Base+0x21b4>
   1d528:	mov	r0, r4
   1d52c:	pop	{r4, sl, fp, lr}
   1d530:	b	1f738 <flatcc_builder_end_table@@Base>
   1d534:	movw	r0, #18961	; 0x4a11
   1d538:	movt	r0, #2
   1d53c:	movw	r1, #13161	; 0x3369
   1d540:	movt	r1, #2
   1d544:	movw	r3, #19096	; 0x4a98
   1d548:	movt	r3, #2
   1d54c:	mov	r2, #241	; 0xf1
   1d550:	bl	12f88 <__assert_fail@plt>
   1d554:	push	{r4, r5, fp, lr}
   1d558:	add	fp, sp, #8
   1d55c:	cmp	r0, #0
   1d560:	beq	1d5a4 <main@@Base+0x2224>
   1d564:	mov	r4, r0
   1d568:	bl	1b61c <main@@Base+0x29c>
   1d56c:	sub	r5, r4, r0
   1d570:	mov	r0, r5
   1d574:	bl	1b624 <main@@Base+0x2a4>
   1d578:	cmp	r0, #6
   1d57c:	bcc	1d59c <main@@Base+0x221c>
   1d580:	add	r0, r5, #4
   1d584:	bl	1b624 <main@@Base+0x2a4>
   1d588:	cmp	r0, #0
   1d58c:	beq	1d59c <main@@Base+0x221c>
   1d590:	add	r0, r4, r0
   1d594:	pop	{r4, r5, fp, lr}
   1d598:	b	1c818 <main@@Base+0x1498>
   1d59c:	mov	r0, #0
   1d5a0:	pop	{r4, r5, fp, pc}
   1d5a4:	movw	r0, #12550	; 0x3106
   1d5a8:	movt	r0, #2
   1d5ac:	movw	r1, #12588	; 0x312c
   1d5b0:	movt	r1, #2
   1d5b4:	movw	r3, #19289	; 0x4b59
   1d5b8:	movt	r3, #2
   1d5bc:	movw	r2, #819	; 0x333
   1d5c0:	bl	12f88 <__assert_fail@plt>
   1d5c4:	push	{r4, r5, r6, sl, fp, lr}
   1d5c8:	add	fp, sp, #16
   1d5cc:	cmp	r0, #0
   1d5d0:	beq	1d61c <main@@Base+0x229c>
   1d5d4:	mov	r4, r0
   1d5d8:	bl	1b61c <main@@Base+0x29c>
   1d5dc:	sub	r6, r4, r0
   1d5e0:	mov	r0, r6
   1d5e4:	bl	1b624 <main@@Base+0x2a4>
   1d5e8:	mov	r5, #0
   1d5ec:	cmp	r0, #8
   1d5f0:	bcc	1d614 <main@@Base+0x2294>
   1d5f4:	add	r0, r6, #6
   1d5f8:	bl	1b624 <main@@Base+0x2a4>
   1d5fc:	cmp	r0, #0
   1d600:	beq	1d614 <main@@Base+0x2294>
   1d604:	add	r4, r4, r0
   1d608:	mov	r0, r4
   1d60c:	bl	1b610 <main@@Base+0x290>
   1d610:	add	r5, r4, r0
   1d614:	mov	r0, r5
   1d618:	pop	{r4, r5, r6, sl, fp, pc}
   1d61c:	movw	r0, #12550	; 0x3106
   1d620:	movt	r0, #2
   1d624:	movw	r1, #12588	; 0x312c
   1d628:	movt	r1, #2
   1d62c:	movw	r3, #19377	; 0x4bb1
   1d630:	movt	r3, #2
   1d634:	movw	r2, #819	; 0x333
   1d638:	bl	12f88 <__assert_fail@plt>
   1d63c:	push	{r4, r5, r6, sl, fp, lr}
   1d640:	add	fp, sp, #16
   1d644:	cmp	r0, #0
   1d648:	beq	1d698 <main@@Base+0x2318>
   1d64c:	mov	r4, r0
   1d650:	bl	1b61c <main@@Base+0x29c>
   1d654:	sub	r6, r4, r0
   1d658:	mov	r0, r6
   1d65c:	bl	1b624 <main@@Base+0x2a4>
   1d660:	mov	r5, #0
   1d664:	cmp	r0, #24
   1d668:	bcc	1d690 <main@@Base+0x2310>
   1d66c:	add	r0, r6, #22
   1d670:	bl	1b624 <main@@Base+0x2a4>
   1d674:	cmp	r0, #0
   1d678:	beq	1d690 <main@@Base+0x2310>
   1d67c:	add	r4, r4, r0
   1d680:	mov	r0, r4
   1d684:	bl	1b610 <main@@Base+0x290>
   1d688:	add	r0, r4, r0
   1d68c:	add	r5, r0, #4
   1d690:	mov	r0, r5
   1d694:	pop	{r4, r5, r6, sl, fp, pc}
   1d698:	movw	r0, #12550	; 0x3106
   1d69c:	movt	r0, #2
   1d6a0:	movw	r1, #12588	; 0x312c
   1d6a4:	movt	r1, #2
   1d6a8:	movw	r3, #20056	; 0x4e58
   1d6ac:	movt	r3, #2
   1d6b0:	movw	r2, #823	; 0x337
   1d6b4:	bl	12f88 <__assert_fail@plt>
   1d6b8:	push	{r4, sl, fp, lr}
   1d6bc:	add	fp, sp, #8
   1d6c0:	mov	r4, r0
   1d6c4:	bl	1c7f8 <main@@Base+0x1478>
   1d6c8:	cmp	r0, #3
   1d6cc:	bls	1d6e8 <main@@Base+0x2368>
   1d6d0:	add	r4, r4, #12
   1d6d4:	mov	r0, r4
   1d6d8:	bl	1b610 <main@@Base+0x290>
   1d6dc:	add	r0, r4, r0
   1d6e0:	add	r0, r0, #4
   1d6e4:	pop	{r4, sl, fp, pc}
   1d6e8:	movw	r0, #15063	; 0x3ad7
   1d6ec:	movt	r0, #2
   1d6f0:	movw	r1, #15118	; 0x3b0e
   1d6f4:	movt	r1, #2
   1d6f8:	movw	r3, #20303	; 0x4f4f
   1d6fc:	movt	r3, #2
   1d700:	mov	r2, #119	; 0x77
   1d704:	bl	12f88 <__assert_fail@plt>
   1d708:	push	{r4, sl, fp, lr}
   1d70c:	add	fp, sp, #8
   1d710:	cmp	r1, #0
   1d714:	popeq	{r4, sl, fp, pc}
   1d718:	mov	r4, r1
   1d71c:	mov	r1, #13
   1d720:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1d724:	cmp	r0, #0
   1d728:	strne	r4, [r0]
   1d72c:	pop	{r4, sl, fp, pc}
   1d730:	push	{r4, r5, r6, sl, fp, lr}
   1d734:	add	fp, sp, #16
   1d738:	cmp	r0, #0
   1d73c:	beq	1d78c <main@@Base+0x240c>
   1d740:	mov	r4, r0
   1d744:	bl	1b61c <main@@Base+0x29c>
   1d748:	sub	r6, r4, r0
   1d74c:	mov	r0, r6
   1d750:	bl	1b624 <main@@Base+0x2a4>
   1d754:	mov	r5, #0
   1d758:	cmp	r0, #32
   1d75c:	bcc	1d784 <main@@Base+0x2404>
   1d760:	add	r0, r6, #30
   1d764:	bl	1b624 <main@@Base+0x2a4>
   1d768:	cmp	r0, #0
   1d76c:	beq	1d784 <main@@Base+0x2404>
   1d770:	add	r4, r4, r0
   1d774:	mov	r0, r4
   1d778:	bl	1b610 <main@@Base+0x290>
   1d77c:	add	r0, r4, r0
   1d780:	add	r5, r0, #4
   1d784:	mov	r0, r5
   1d788:	pop	{r4, r5, r6, sl, fp, pc}
   1d78c:	movw	r0, #12550	; 0x3106
   1d790:	movt	r0, #2
   1d794:	movw	r1, #12588	; 0x312c
   1d798:	movt	r1, #2
   1d79c:	movw	r3, #20473	; 0x4ff9
   1d7a0:	movt	r3, #2
   1d7a4:	mov	r2, #720	; 0x2d0
   1d7a8:	bl	12f88 <__assert_fail@plt>
   1d7ac:	push	{r4, sl, fp, lr}
   1d7b0:	add	fp, sp, #8
   1d7b4:	mov	r4, r0
   1d7b8:	bl	1d7dc <main@@Base+0x245c>
   1d7bc:	cmp	r0, #0
   1d7c0:	beq	1d7d4 <main@@Base+0x2454>
   1d7c4:	bl	1d7e8 <main@@Base+0x2468>
   1d7c8:	mov	r0, r4
   1d7cc:	pop	{r4, sl, fp, lr}
   1d7d0:	b	1d840 <main@@Base+0x24c0>
   1d7d4:	mov	r0, #0
   1d7d8:	pop	{r4, sl, fp, pc}
   1d7dc:	mov	r1, #32
   1d7e0:	mov	r2, #16
   1d7e4:	b	1e628 <flatcc_builder_start_struct@@Base>
   1d7e8:	push	{r4, sl, fp, lr}
   1d7ec:	add	fp, sp, #8
   1d7f0:	mov	r4, r0
   1d7f4:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1d7f8:	bl	1bacc <main@@Base+0x74c>
   1d7fc:	vmov.f32	s0, #0	; 0x40000000  2.0
   1d800:	add	r0, r4, #4
   1d804:	bl	1bacc <main@@Base+0x74c>
   1d808:	vmov.f32	s0, #8	; 0x40400000  3.0
   1d80c:	add	r0, r4, #8
   1d810:	bl	1bacc <main@@Base+0x74c>
   1d814:	vldr	d0, [pc, #28]	; 1d838 <main@@Base+0x24b8>
   1d818:	add	r0, r4, #16
   1d81c:	bl	1ba80 <main@@Base+0x700>
   1d820:	mov	r0, #8
   1d824:	strb	r0, [r4, #24]
   1d828:	add	r0, r4, #26
   1d82c:	pop	{r4, sl, fp, lr}
   1d830:	b	1d844 <main@@Base+0x24c4>
   1d834:	nop	{0}
   1d838:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d83c:	andsmi	ip, r0, ip, asr #25
   1d840:	b	1e704 <flatcc_builder_end_struct@@Base>
   1d844:	push	{r4, sl, fp, lr}
   1d848:	add	fp, sp, #8
   1d84c:	mov	r4, r0
   1d850:	movw	r1, #2730	; 0xaaa
   1d854:	bl	1bae8 <main@@Base+0x768>
   1d858:	mov	r0, #239	; 0xef
   1d85c:	strb	r0, [r4, #2]
   1d860:	pop	{r4, sl, fp, pc}

0001d864 <flatcc_builder_default_alloc@@Base>:
   1d864:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d868:	add	fp, sp, #24
   1d86c:	mov	r4, r1
   1d870:	cmp	r2, #0
   1d874:	beq	1d8bc <flatcc_builder_default_alloc@@Base+0x58>
   1d878:	mov	r8, r3
   1d87c:	ldr	r0, [fp, #8]
   1d880:	sub	r1, r0, #1
   1d884:	cmp	r1, #6
   1d888:	bhi	1d8ec <flatcc_builder_default_alloc@@Base+0x88>
   1d88c:	mov	r0, #256	; 0x100
   1d890:	add	r3, pc, #0
   1d894:	ldr	pc, [r3, r1, lsl #2]
   1d898:	andeq	sp, r1, r0, lsl #18
   1d89c:	andeq	sp, r1, ip, ror #17
   1d8a0:	andeq	sp, r1, ip, ror #17
   1d8a4:			; <UNDEFINED> instruction: 0x0001d8b4
   1d8a8:	strdeq	sp, [r1], -r4
   1d8ac:	andeq	sp, r1, ip, ror #17
   1d8b0:	strdeq	sp, [r1], -ip
   1d8b4:	mov	r0, #288	; 0x120
   1d8b8:	b	1d900 <flatcc_builder_default_alloc@@Base+0x9c>
   1d8bc:	ldr	r0, [r4]
   1d8c0:	cmp	r0, #0
   1d8c4:	beq	1d8e0 <flatcc_builder_default_alloc@@Base+0x7c>
   1d8c8:	bl	12ea4 <free@plt>
   1d8cc:	mov	r6, #0
   1d8d0:	str	r6, [r4]
   1d8d4:	str	r6, [r4, #4]
   1d8d8:	mov	r0, r6
   1d8dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d8e0:	mov	r6, #0
   1d8e4:	mov	r0, r6
   1d8e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d8ec:	mov	r0, #32
   1d8f0:	b	1d900 <flatcc_builder_default_alloc@@Base+0x9c>
   1d8f4:	mov	r0, r2
   1d8f8:	b	1d900 <flatcc_builder_default_alloc@@Base+0x9c>
   1d8fc:	mov	r0, #64	; 0x40
   1d900:	mov	r7, r0
   1d904:	lsl	r0, r0, #1
   1d908:	cmp	r7, r2
   1d90c:	bcc	1d900 <flatcc_builder_default_alloc@@Base+0x9c>
   1d910:	ldr	r0, [r4, #4]
   1d914:	mov	r6, #0
   1d918:	cmp	r0, r2
   1d91c:	lsrcs	r0, r0, #1
   1d920:	cmpcs	r0, r7
   1d924:	bcs	1d968 <flatcc_builder_default_alloc@@Base+0x104>
   1d928:	ldr	r0, [r4]
   1d92c:	mov	r1, r7
   1d930:	bl	12ebc <realloc@plt>
   1d934:	cmp	r0, #0
   1d938:	beq	1d970 <flatcc_builder_default_alloc@@Base+0x10c>
   1d93c:	mov	r5, r0
   1d940:	cmp	r8, #0
   1d944:	beq	1d964 <flatcc_builder_default_alloc@@Base+0x100>
   1d948:	ldr	r1, [r4, #4]
   1d94c:	cmp	r7, r1
   1d950:	bls	1d964 <flatcc_builder_default_alloc@@Base+0x100>
   1d954:	add	r0, r5, r1
   1d958:	sub	r2, r7, r1
   1d95c:	mov	r1, #0
   1d960:	bl	12f40 <memset@plt>
   1d964:	stm	r4, {r5, r7}
   1d968:	mov	r0, r6
   1d96c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d970:	mvn	r6, #0
   1d974:	mov	r0, r6
   1d978:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001d97c <flatcc_builder_flush_vtable_cache@@Base>:
   1d97c:	push	{r4, r5, fp, lr}
   1d980:	add	fp, sp, #8
   1d984:	mov	r4, r0
   1d988:	ldr	r0, [r0, #116]	; 0x74
   1d98c:	cmp	r0, #0
   1d990:	popeq	{r4, r5, fp, pc}
   1d994:	ldr	r0, [r4, #92]	; 0x5c
   1d998:	ldr	r2, [r4, #96]	; 0x60
   1d99c:	mov	r5, #0
   1d9a0:	mov	r1, #0
   1d9a4:	bl	12f40 <memset@plt>
   1d9a8:	mov	r0, #16
   1d9ac:	str	r5, [r4, #120]	; 0x78
   1d9b0:	str	r0, [r4, #124]	; 0x7c
   1d9b4:	pop	{r4, r5, fp, pc}

0001d9b8 <flatcc_builder_custom_init@@Base>:
   1d9b8:	push	{r4, r5, r6, r7, fp, lr}
   1d9bc:	add	fp, sp, #16
   1d9c0:	mov	r5, r3
   1d9c4:	mov	r6, r2
   1d9c8:	mov	r7, r1
   1d9cc:	mov	r4, r0
   1d9d0:	mov	r1, #0
   1d9d4:	mov	r2, #232	; 0xe8
   1d9d8:	bl	12f40 <memset@plt>
   1d9dc:	ldr	r0, [fp, #8]
   1d9e0:	cmp	r7, #0
   1d9e4:	bne	1d9fc <flatcc_builder_custom_init@@Base+0x44>
   1d9e8:	mov	r1, #1
   1d9ec:	str	r1, [r4, #184]	; 0xb8
   1d9f0:	add	r6, r4, #188	; 0xbc
   1d9f4:	movw	r7, #3464	; 0xd88
   1d9f8:	movt	r7, #2
   1d9fc:	movw	r1, #55396	; 0xd864
   1da00:	movt	r1, #1
   1da04:	cmp	r5, #0
   1da08:	movne	r1, r5
   1da0c:	str	r6, [r4, #36]	; 0x24
   1da10:	str	r0, [r4, #40]	; 0x28
   1da14:	str	r7, [r4, #44]	; 0x2c
   1da18:	str	r1, [r4, #48]	; 0x30
   1da1c:	mov	r0, #0
   1da20:	pop	{r4, r5, r6, r7, fp, pc}

0001da24 <flatcc_builder_init@@Base>:
   1da24:	push	{fp, lr}
   1da28:	mov	fp, sp
   1da2c:	sub	sp, sp, #8
   1da30:	mov	r1, #0
   1da34:	str	r1, [sp]
   1da38:	mov	r1, #0
   1da3c:	mov	r2, #0
   1da40:	mov	r3, #0
   1da44:	bl	1d9b8 <flatcc_builder_custom_init@@Base>
   1da48:	mov	r0, #0
   1da4c:	mov	sp, fp
   1da50:	pop	{fp, pc}

0001da54 <flatcc_builder_custom_reset@@Base>:
   1da54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da58:	add	fp, sp, #28
   1da5c:	sub	sp, sp, #4
   1da60:	mov	r9, r2
   1da64:	mov	r8, r1
   1da68:	mov	sl, r0
   1da6c:	add	r7, r0, #52	; 0x34
   1da70:	mov	r5, #0
   1da74:	b	1da94 <flatcc_builder_custom_reset@@Base+0x40>
   1da78:	ldr	r0, [r6, #56]	; 0x38
   1da7c:	cmp	r0, #0
   1da80:	bne	1db7c <flatcc_builder_custom_reset@@Base+0x128>
   1da84:	add	r7, r7, #8
   1da88:	add	r5, r5, #1
   1da8c:	cmp	r5, #8
   1da90:	beq	1dae8 <flatcc_builder_custom_reset@@Base+0x94>
   1da94:	add	r6, sl, r5, lsl #3
   1da98:	ldr	r0, [r6, #52]	; 0x34
   1da9c:	cmp	r0, #0
   1daa0:	beq	1da78 <flatcc_builder_custom_reset@@Base+0x24>
   1daa4:	cmp	r9, #0
   1daa8:	cmpne	r5, #5
   1daac:	beq	1dad4 <flatcc_builder_custom_reset@@Base+0x80>
   1dab0:	ldr	r0, [sl, #40]	; 0x28
   1dab4:	ldr	r4, [sl, #48]	; 0x30
   1dab8:	str	r5, [sp]
   1dabc:	mov	r1, r7
   1dac0:	mov	r2, #1
   1dac4:	mov	r3, #1
   1dac8:	blx	r4
   1dacc:	cmp	r0, #0
   1dad0:	bne	1db6c <flatcc_builder_custom_reset@@Base+0x118>
   1dad4:	ldr	r0, [r6, #52]	; 0x34
   1dad8:	ldr	r2, [r6, #56]	; 0x38
   1dadc:	mov	r1, #0
   1dae0:	bl	12f40 <memset@plt>
   1dae4:	b	1da84 <flatcc_builder_custom_reset@@Base+0x30>
   1dae8:	mov	r0, #0
   1daec:	str	r0, [sl, #120]	; 0x78
   1daf0:	ldr	r1, [sl, #124]	; 0x7c
   1daf4:	cmp	r1, #0
   1daf8:	movne	r1, #16
   1dafc:	strne	r1, [sl, #124]	; 0x7c
   1db00:	vmov.i32	q8, #0	; 0x00000000
   1db04:	str	r0, [sl, #136]	; 0x88
   1db08:	str	r0, [sl, #140]	; 0x8c
   1db0c:	strh	r0, [sl, #128]	; 0x80
   1db10:	str	r0, [sl, #32]
   1db14:	add	r1, sl, #148	; 0x94
   1db18:	vst1.32	{d16-d17}, [r1]
   1db1c:	ldr	r1, [sl, #52]	; 0x34
   1db20:	ldr	r2, [sl, #60]	; 0x3c
   1db24:	ldr	r3, [sl, #76]	; 0x4c
   1db28:	str	r2, [sl, #16]
   1db2c:	str	r0, [sl, #20]
   1db30:	str	r0, [sl, #24]
   1db34:	str	r3, [sl]
   1db38:	str	r1, [sl, #4]
   1db3c:	cmp	r8, #0
   1db40:	movne	r0, #0
   1db44:	strne	r0, [sl, #172]	; 0xac
   1db48:	strne	r0, [sl, #176]	; 0xb0
   1db4c:	strne	r0, [sl, #180]	; 0xb4
   1db50:	ldr	r0, [sl, #184]	; 0xb8
   1db54:	mov	r5, #0
   1db58:	cmp	r0, #0
   1db5c:	beq	1db70 <flatcc_builder_custom_reset@@Base+0x11c>
   1db60:	add	r0, sl, #188	; 0xbc
   1db64:	bl	20c64 <flatcc_emitter_reset@@Base>
   1db68:	b	1db70 <flatcc_builder_custom_reset@@Base+0x11c>
   1db6c:	mvn	r5, #0
   1db70:	mov	r0, r5
   1db74:	sub	sp, fp, #28
   1db78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db7c:	movw	r0, #28108	; 0x6dcc
   1db80:	movt	r0, #2
   1db84:	movw	r1, #28126	; 0x6dde
   1db88:	movt	r1, #2
   1db8c:	movw	r3, #28196	; 0x6e24
   1db90:	movt	r3, #2
   1db94:	movw	r2, #434	; 0x1b2
   1db98:	bl	12f88 <__assert_fail@plt>

0001db9c <flatcc_builder_reset@@Base>:
   1db9c:	mov	r1, #0
   1dba0:	mov	r2, #0
   1dba4:	b	1da54 <flatcc_builder_custom_reset@@Base>

0001dba8 <flatcc_builder_clear@@Base>:
   1dba8:	push	{r4, r5, r6, r7, fp, lr}
   1dbac:	add	fp, sp, #16
   1dbb0:	sub	sp, sp, #8
   1dbb4:	mov	r7, r0
   1dbb8:	add	r5, r0, #52	; 0x34
   1dbbc:	mov	r6, #0
   1dbc0:	ldr	r0, [r7, #40]	; 0x28
   1dbc4:	ldr	r4, [r7, #48]	; 0x30
   1dbc8:	str	r6, [sp]
   1dbcc:	mov	r1, r5
   1dbd0:	mov	r2, #0
   1dbd4:	mov	r3, #0
   1dbd8:	blx	r4
   1dbdc:	add	r5, r5, #8
   1dbe0:	add	r6, r6, #1
   1dbe4:	cmp	r6, #8
   1dbe8:	bne	1dbc0 <flatcc_builder_clear@@Base+0x18>
   1dbec:	ldr	r0, [r7, #184]	; 0xb8
   1dbf0:	cmp	r0, #0
   1dbf4:	beq	1dc00 <flatcc_builder_clear@@Base+0x58>
   1dbf8:	add	r0, r7, #188	; 0xbc
   1dbfc:	bl	20d24 <flatcc_emitter_clear@@Base>
   1dc00:	mov	r0, r7
   1dc04:	mov	r1, #0
   1dc08:	mov	r2, #232	; 0xe8
   1dc0c:	sub	sp, fp, #16
   1dc10:	pop	{r4, r5, r6, r7, fp, lr}
   1dc14:	b	12f40 <memset@plt>

0001dc18 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1dc18:	push	{r4, r5, r6, r7, fp, lr}
   1dc1c:	add	fp, sp, #16
   1dc20:	sub	sp, sp, #8
   1dc24:	mov	r4, r0
   1dc28:	ldr	r2, [r0, #228]	; 0xe4
   1dc2c:	mov	r7, #0
   1dc30:	str	r7, [sp]
   1dc34:	add	r0, r1, #7
   1dc38:	bic	r5, r0, #3
   1dc3c:	mov	r0, r4
   1dc40:	mov	r1, #7
   1dc44:	mov	r3, r5
   1dc48:	bl	1dc90 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1dc4c:	cmp	r0, #0
   1dc50:	beq	1dc84 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   1dc54:	mov	r6, r0
   1dc58:	mov	r1, #0
   1dc5c:	mov	r2, r5
   1dc60:	bl	12f40 <memset@plt>
   1dc64:	ldr	r0, [r4, #224]	; 0xe0
   1dc68:	str	r0, [r6], #4
   1dc6c:	ldr	r0, [r4, #228]	; 0xe4
   1dc70:	add	r1, r0, #4
   1dc74:	add	r0, r0, r5
   1dc78:	str	r1, [r4, #224]	; 0xe0
   1dc7c:	str	r0, [r4, #228]	; 0xe4
   1dc80:	mov	r7, r6
   1dc84:	mov	r0, r7
   1dc88:	sub	sp, fp, #16
   1dc8c:	pop	{r4, r5, r6, r7, fp, pc}
   1dc90:	push	{r4, r5, fp, lr}
   1dc94:	add	fp, sp, #8
   1dc98:	sub	sp, sp, #8
   1dc9c:	mov	r4, r2
   1dca0:	add	r2, r3, r2
   1dca4:	add	r3, r0, r1, lsl #3
   1dca8:	add	r5, r3, #52	; 0x34
   1dcac:	ldr	r3, [r3, #56]	; 0x38
   1dcb0:	cmp	r2, r3
   1dcb4:	bls	1dcdc <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   1dcb8:	ldr	r3, [fp, #8]
   1dcbc:	ldr	ip, [r0, #40]	; 0x28
   1dcc0:	ldr	lr, [r0, #48]	; 0x30
   1dcc4:	str	r1, [sp]
   1dcc8:	mov	r0, ip
   1dccc:	mov	r1, r5
   1dcd0:	blx	lr
   1dcd4:	cmp	r0, #0
   1dcd8:	bne	1dcec <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1dcdc:	ldr	r0, [r5]
   1dce0:	add	r0, r0, r4
   1dce4:	sub	sp, fp, #8
   1dce8:	pop	{r4, r5, fp, pc}
   1dcec:	movw	r0, #32644	; 0x7f84
   1dcf0:	movt	r0, #2
   1dcf4:	movw	r1, #28126	; 0x6dde
   1dcf8:	movt	r1, #2
   1dcfc:	movw	r3, #32190	; 0x7dbe
   1dd00:	movt	r3, #2
   1dd04:	mov	r2, #308	; 0x134
   1dd08:	bl	12f88 <__assert_fail@plt>

0001dd0c <flatcc_builder_enter_user_frame@@Base>:
   1dd0c:	push	{r4, r5, r6, r7, fp, lr}
   1dd10:	add	fp, sp, #16
   1dd14:	sub	sp, sp, #8
   1dd18:	mov	r4, r0
   1dd1c:	ldr	r2, [r0, #228]	; 0xe4
   1dd20:	mov	r6, #0
   1dd24:	str	r6, [sp]
   1dd28:	add	r0, r1, #7
   1dd2c:	bic	r5, r0, #3
   1dd30:	mov	r0, r4
   1dd34:	mov	r1, #7
   1dd38:	mov	r3, r5
   1dd3c:	bl	1dc90 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1dd40:	cmp	r0, #0
   1dd44:	beq	1dd74 <flatcc_builder_enter_user_frame@@Base+0x68>
   1dd48:	mov	r7, r0
   1dd4c:	mov	r1, #0
   1dd50:	mov	r2, r5
   1dd54:	bl	12f40 <memset@plt>
   1dd58:	ldr	r0, [r4, #224]	; 0xe0
   1dd5c:	str	r0, [r7]
   1dd60:	ldr	r0, [r4, #228]	; 0xe4
   1dd64:	add	r6, r0, #4
   1dd68:	add	r0, r0, r5
   1dd6c:	str	r6, [r4, #224]	; 0xe0
   1dd70:	str	r0, [r4, #228]	; 0xe4
   1dd74:	mov	r0, r6
   1dd78:	sub	sp, fp, #16
   1dd7c:	pop	{r4, r5, r6, r7, fp, pc}

0001dd80 <flatcc_builder_exit_user_frame@@Base>:
   1dd80:	push	{fp, lr}
   1dd84:	mov	fp, sp
   1dd88:	ldr	r1, [r0, #224]	; 0xe0
   1dd8c:	cmp	r1, #0
   1dd90:	subne	r2, r1, #4
   1dd94:	strne	r2, [r0, #228]	; 0xe4
   1dd98:	ldrne	r2, [r0, #108]	; 0x6c
   1dd9c:	addne	r1, r2, r1
   1dda0:	ldrne	r1, [r1, #-4]
   1dda4:	strne	r1, [r0, #224]	; 0xe0
   1dda8:	movne	r0, r1
   1ddac:	popne	{fp, pc}
   1ddb0:	movw	r0, #28258	; 0x6e62
   1ddb4:	movt	r0, #2
   1ddb8:	movw	r1, #28126	; 0x6dde
   1ddbc:	movt	r1, #2
   1ddc0:	movw	r3, #28283	; 0x6e7b
   1ddc4:	movt	r3, #2
   1ddc8:	movw	r2, #542	; 0x21e
   1ddcc:	bl	12f88 <__assert_fail@plt>

0001ddd0 <flatcc_builder_exit_user_frame_at@@Base>:
   1ddd0:	push	{fp, lr}
   1ddd4:	mov	fp, sp
   1ddd8:	ldr	r2, [r0, #224]	; 0xe0
   1dddc:	cmp	r2, r1
   1dde0:	bcc	1ddf0 <flatcc_builder_exit_user_frame_at@@Base+0x20>
   1dde4:	str	r1, [r0, #224]	; 0xe0
   1dde8:	pop	{fp, lr}
   1ddec:	b	1dd80 <flatcc_builder_exit_user_frame@@Base>
   1ddf0:	movw	r0, #28341	; 0x6eb5
   1ddf4:	movt	r0, #2
   1ddf8:	movw	r1, #28126	; 0x6dde
   1ddfc:	movt	r1, #2
   1de00:	movw	r3, #28372	; 0x6ed4
   1de04:	movt	r3, #2
   1de08:	movw	r2, #551	; 0x227
   1de0c:	bl	12f88 <__assert_fail@plt>

0001de10 <flatcc_builder_get_current_user_frame@@Base>:
   1de10:	ldr	r0, [r0, #224]	; 0xe0
   1de14:	bx	lr

0001de18 <flatcc_builder_get_user_frame_ptr@@Base>:
   1de18:	ldr	r0, [r0, #108]	; 0x6c
   1de1c:	add	r0, r0, r1
   1de20:	bx	lr

0001de24 <flatcc_builder_embed_buffer@@Base>:
   1de24:	push	{r4, r5, r6, r7, fp, lr}
   1de28:	add	fp, sp, #16
   1de2c:	sub	sp, sp, #80	; 0x50
   1de30:	mov	r5, r3
   1de34:	mov	r6, r2
   1de38:	mov	r2, r1
   1de3c:	mov	r4, r0
   1de40:	ldr	r0, [fp, #8]
   1de44:	strh	r0, [fp, #-18]	; 0xffffffee
   1de48:	ldr	r3, [r4, #152]	; 0x98
   1de4c:	cmp	r3, #0
   1de50:	movwne	r3, #1
   1de54:	sub	r1, fp, #18
   1de58:	mov	r0, r4
   1de5c:	bl	1df30 <flatcc_builder_embed_buffer@@Base+0x10c>
   1de60:	ldr	r0, [fp, #12]
   1de64:	and	r0, r0, #2
   1de68:	add	r1, r5, r0, lsl #1
   1de6c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1de70:	mov	r0, r4
   1de74:	bl	1dfec <flatcc_builder_embed_buffer@@Base+0x1c8>
   1de78:	mov	r7, r0
   1de7c:	add	r0, r0, r5
   1de80:	bl	1e000 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1de84:	mov	r1, #0
   1de88:	str	r1, [sp, #4]
   1de8c:	str	r1, [sp]
   1de90:	str	r0, [fp, #-24]	; 0xffffffe8
   1de94:	ldr	r0, [r4, #152]	; 0x98
   1de98:	cmp	r0, #0
   1de9c:	beq	1debc <flatcc_builder_embed_buffer@@Base+0x98>
   1dea0:	mov	r0, #4
   1dea4:	str	r0, [sp, #12]
   1dea8:	sub	r1, fp, #24
   1deac:	str	r1, [sp, #8]
   1deb0:	str	r0, [sp]
   1deb4:	mov	r0, #1
   1deb8:	str	r0, [sp, #4]
   1debc:	cmp	r5, #0
   1dec0:	beq	1dee8 <flatcc_builder_embed_buffer@@Base+0xc4>
   1dec4:	ldm	sp, {r0, r1}
   1dec8:	add	r0, r0, r5
   1decc:	str	r0, [sp]
   1ded0:	mov	r0, sp
   1ded4:	add	r0, r0, r1, lsl #3
   1ded8:	str	r6, [r0, #8]
   1dedc:	str	r5, [r0, #12]
   1dee0:	add	r0, r1, #1
   1dee4:	str	r0, [sp, #4]
   1dee8:	cmp	r7, #0
   1deec:	beq	1df1c <flatcc_builder_embed_buffer@@Base+0xf8>
   1def0:	ldm	sp, {r0, r1}
   1def4:	add	r0, r0, r7
   1def8:	str	r0, [sp]
   1defc:	mov	r0, sp
   1df00:	add	r0, r0, r1, lsl #3
   1df04:	movw	r2, #27596	; 0x6bcc
   1df08:	movt	r2, #2
   1df0c:	str	r2, [r0, #8]
   1df10:	str	r7, [r0, #12]
   1df14:	add	r0, r1, #1
   1df18:	str	r0, [sp, #4]
   1df1c:	mov	r1, sp
   1df20:	mov	r0, r4
   1df24:	bl	1e004 <flatcc_builder_embed_buffer@@Base+0x1e0>
   1df28:	sub	sp, fp, #16
   1df2c:	pop	{r4, r5, r6, r7, fp, pc}
   1df30:	push	{r4, r5, r6, r7, fp, lr}
   1df34:	add	fp, sp, #16
   1df38:	sub	sp, sp, #72	; 0x48
   1df3c:	mov	r6, r3
   1df40:	mov	r5, r2
   1df44:	mov	r7, r1
   1df48:	mov	r4, r0
   1df4c:	cmp	r2, #0
   1df50:	bne	1df60 <flatcc_builder_embed_buffer@@Base+0x13c>
   1df54:	ldrh	r5, [r4, #132]	; 0x84
   1df58:	cmp	r5, #0
   1df5c:	movweq	r5, #1
   1df60:	mov	r0, r7
   1df64:	mov	r1, #4
   1df68:	bl	1edd8 <flatcc_builder_start_vector@@Base+0x80>
   1df6c:	mov	r0, r7
   1df70:	mov	r1, r5
   1df74:	bl	1edd8 <flatcc_builder_start_vector@@Base+0x80>
   1df78:	cmp	r6, #0
   1df7c:	bne	1dfc4 <flatcc_builder_embed_buffer@@Base+0x1a0>
   1df80:	mov	r0, r4
   1df84:	mov	r1, r5
   1df88:	bl	20ab8 <flatcc_builder_get_emit_context@@Base+0x8>
   1df8c:	cmp	r0, #0
   1df90:	beq	1dfc4 <flatcc_builder_embed_buffer@@Base+0x1a0>
   1df94:	str	r0, [sp, #12]
   1df98:	movw	r1, #27596	; 0x6bcc
   1df9c:	movt	r1, #2
   1dfa0:	str	r1, [sp, #8]
   1dfa4:	str	r0, [sp]
   1dfa8:	mov	r0, #1
   1dfac:	str	r0, [sp, #4]
   1dfb0:	mov	r1, sp
   1dfb4:	mov	r0, r4
   1dfb8:	bl	1f164 <flatcc_builder_create_vtable@@Base+0x80>
   1dfbc:	cmp	r0, #0
   1dfc0:	beq	1dfcc <flatcc_builder_embed_buffer@@Base+0x1a8>
   1dfc4:	sub	sp, fp, #16
   1dfc8:	pop	{r4, r5, r6, r7, fp, pc}
   1dfcc:	movw	r0, #32644	; 0x7f84
   1dfd0:	movt	r0, #2
   1dfd4:	movw	r1, #28126	; 0x6dde
   1dfd8:	movt	r1, #2
   1dfdc:	movw	r3, #32257	; 0x7e01
   1dfe0:	movt	r3, #2
   1dfe4:	movw	r2, #702	; 0x2be
   1dfe8:	bl	12f88 <__assert_fail@plt>
   1dfec:	ldr	r0, [r0, #136]	; 0x88
   1dff0:	sub	r0, r0, r1
   1dff4:	sub	r1, r2, #1
   1dff8:	and	r0, r0, r1
   1dffc:	bx	lr
   1e000:	bx	lr
   1e004:	push	{r4, r5, fp, lr}
   1e008:	add	fp, sp, #8
   1e00c:	sub	sp, sp, #8
   1e010:	ldr	r3, [r1]
   1e014:	cmp	r3, #0
   1e018:	ble	1e078 <flatcc_builder_embed_buffer@@Base+0x254>
   1e01c:	mov	r4, r0
   1e020:	ldr	r0, [r0, #136]	; 0x88
   1e024:	sub	r5, r0, r3
   1e028:	ldr	r2, [r1, #4]
   1e02c:	ldr	r0, [r4, #36]	; 0x24
   1e030:	ldr	ip, [r4, #44]	; 0x2c
   1e034:	str	r3, [sp]
   1e038:	add	r1, r1, #8
   1e03c:	mov	r3, r5
   1e040:	blx	ip
   1e044:	cmp	r0, #0
   1e048:	streq	r5, [r4, #136]	; 0x88
   1e04c:	moveq	r0, r5
   1e050:	subeq	sp, fp, #8
   1e054:	popeq	{r4, r5, fp, pc}
   1e058:	movw	r0, #32644	; 0x7f84
   1e05c:	movt	r0, #2
   1e060:	movw	r1, #28126	; 0x6dde
   1e064:	movt	r1, #2
   1e068:	movw	r3, #32323	; 0x7e43
   1e06c:	movt	r3, #2
   1e070:	movw	r2, #651	; 0x28b
   1e074:	bl	12f88 <__assert_fail@plt>
   1e078:	movw	r0, #32644	; 0x7f84
   1e07c:	movt	r0, #2
   1e080:	movw	r1, #28126	; 0x6dde
   1e084:	movt	r1, #2
   1e088:	movw	r3, #32323	; 0x7e43
   1e08c:	movt	r3, #2
   1e090:	movw	r2, #647	; 0x287
   1e094:	bl	12f88 <__assert_fail@plt>

0001e098 <flatcc_builder_create_buffer@@Base>:
   1e098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e09c:	add	fp, sp, #28
   1e0a0:	sub	sp, sp, #92	; 0x5c
   1e0a4:	mov	r6, r3
   1e0a8:	mov	r7, r1
   1e0ac:	mov	r4, r0
   1e0b0:	ldr	r0, [fp, #8]
   1e0b4:	strh	r0, [fp, #-30]	; 0xffffffe2
   1e0b8:	mov	r0, #0
   1e0bc:	str	r0, [sp, #4]
   1e0c0:	ldr	sl, [fp, #12]
   1e0c4:	and	r9, sl, #1
   1e0c8:	sub	r1, fp, #30
   1e0cc:	mov	r0, r4
   1e0d0:	mov	r3, r9
   1e0d4:	bl	1df30 <flatcc_builder_embed_buffer@@Base+0x10c>
   1e0d8:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   1e0dc:	mov	r0, r4
   1e0e0:	mov	r1, r5
   1e0e4:	bl	1e264 <flatcc_builder_create_buffer@@Base+0x1cc>
   1e0e8:	cmp	r7, #0
   1e0ec:	str	r6, [sp]
   1e0f0:	beq	1e10c <flatcc_builder_create_buffer@@Base+0x74>
   1e0f4:	ldr	r7, [r7]
   1e0f8:	mov	r0, r7
   1e0fc:	bl	1e274 <flatcc_builder_create_buffer@@Base+0x1dc>
   1e100:	bl	1e000 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1e104:	str	r7, [sp, #4]
   1e108:	b	1e110 <flatcc_builder_create_buffer@@Base+0x78>
   1e10c:	ldr	r7, [sp, #4]
   1e110:	mov	r8, #4
   1e114:	and	r0, r8, sl, lsl #1
   1e118:	cmp	r7, #0
   1e11c:	mov	r6, r7
   1e120:	movwne	r6, #1
   1e124:	add	r0, r0, r6, lsl #2
   1e128:	add	r1, r0, #4
   1e12c:	mov	r0, r4
   1e130:	mov	r2, r5
   1e134:	bl	1dfec <flatcc_builder_embed_buffer@@Base+0x1c8>
   1e138:	mov	r1, #0
   1e13c:	str	r1, [sp, #12]
   1e140:	str	r1, [sp, #8]
   1e144:	ands	ip, sl, #3
   1e148:	strne	r8, [sp, #20]
   1e14c:	subne	r1, fp, #40	; 0x28
   1e150:	strne	r1, [sp, #16]
   1e154:	strne	r8, [sp, #8]
   1e158:	movne	r1, #1
   1e15c:	strne	r1, [sp, #12]
   1e160:	ldr	r1, [sp, #8]
   1e164:	ldr	r3, [sp, #12]
   1e168:	add	r5, r1, #4
   1e16c:	str	r5, [sp, #8]
   1e170:	add	lr, sp, #8
   1e174:	add	r1, lr, r3, lsl #3
   1e178:	sub	r2, fp, #36	; 0x24
   1e17c:	str	r2, [r1, #8]
   1e180:	str	r8, [r1, #12]
   1e184:	add	r1, r3, #1
   1e188:	str	r1, [sp, #12]
   1e18c:	cmp	r7, #0
   1e190:	beq	1e1b8 <flatcc_builder_create_buffer@@Base+0x120>
   1e194:	lsl	r2, r6, #2
   1e198:	add	r5, r5, r2
   1e19c:	str	r5, [sp, #8]
   1e1a0:	add	r1, lr, r1, lsl #3
   1e1a4:	add	r5, sp, #4
   1e1a8:	str	r5, [r1, #8]
   1e1ac:	str	r2, [r1, #12]
   1e1b0:	add	r1, r3, #2
   1e1b4:	str	r1, [sp, #12]
   1e1b8:	cmp	r0, #0
   1e1bc:	beq	1e1ec <flatcc_builder_create_buffer@@Base+0x154>
   1e1c0:	ldr	r1, [sp, #8]
   1e1c4:	ldr	r2, [sp, #12]
   1e1c8:	add	r1, r1, r0
   1e1cc:	str	r1, [sp, #8]
   1e1d0:	add	r1, lr, r2, lsl #3
   1e1d4:	movw	r3, #27596	; 0x6bcc
   1e1d8:	movt	r3, #2
   1e1dc:	str	r3, [r1, #8]
   1e1e0:	str	r0, [r1, #12]
   1e1e4:	add	r0, r2, #1
   1e1e8:	str	r0, [sp, #12]
   1e1ec:	ldr	r0, [r4, #136]	; 0x88
   1e1f0:	ldr	r1, [sp, #8]
   1e1f4:	sub	r5, r0, r1
   1e1f8:	cmp	ip, #0
   1e1fc:	addne	r5, r5, #4
   1e200:	mov	r0, #144	; 0x90
   1e204:	cmp	r9, #0
   1e208:	movweq	r0, #140	; 0x8c
   1e20c:	ldr	r0, [r4, r0]
   1e210:	sub	r0, r0, r5
   1e214:	bl	1e000 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1e218:	str	r0, [fp, #-40]	; 0xffffffd8
   1e21c:	ldr	r0, [sp]
   1e220:	sub	r0, r0, r5
   1e224:	bl	1e000 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1e228:	str	r0, [fp, #-36]	; 0xffffffdc
   1e22c:	add	r1, sp, #8
   1e230:	mov	r0, r4
   1e234:	bl	1e004 <flatcc_builder_embed_buffer@@Base+0x1e0>
   1e238:	cmp	r0, #0
   1e23c:	subne	sp, fp, #28
   1e240:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e244:	movw	r0, #32644	; 0x7f84
   1e248:	movt	r0, #2
   1e24c:	movw	r1, #28126	; 0x6dde
   1e250:	movt	r1, #2
   1e254:	movw	r3, #28441	; 0x6f19
   1e258:	movt	r3, #2
   1e25c:	mov	r2, #772	; 0x304
   1e260:	bl	12f88 <__assert_fail@plt>
   1e264:	ldrh	r2, [r0, #128]	; 0x80
   1e268:	cmp	r2, r1
   1e26c:	strhcc	r1, [r0, #128]	; 0x80
   1e270:	bx	lr
   1e274:	bx	lr

0001e278 <flatcc_builder_create_struct@@Base>:
   1e278:	push	{r4, r5, r6, r7, fp, lr}
   1e27c:	add	fp, sp, #16
   1e280:	sub	sp, sp, #72	; 0x48
   1e284:	cmp	r3, #0
   1e288:	beq	1e320 <flatcc_builder_create_struct@@Base+0xa8>
   1e28c:	mov	r7, r3
   1e290:	mov	r5, r2
   1e294:	mov	r6, r1
   1e298:	mov	r4, r0
   1e29c:	mov	r1, r3
   1e2a0:	bl	1e264 <flatcc_builder_create_buffer@@Base+0x1cc>
   1e2a4:	mov	r0, r4
   1e2a8:	mov	r1, r5
   1e2ac:	mov	r2, r7
   1e2b0:	bl	1dfec <flatcc_builder_embed_buffer@@Base+0x1c8>
   1e2b4:	mov	r1, #0
   1e2b8:	str	r1, [sp, #4]
   1e2bc:	str	r1, [sp]
   1e2c0:	cmp	r5, #0
   1e2c4:	strne	r5, [sp, #12]
   1e2c8:	strne	r6, [sp, #8]
   1e2cc:	strne	r5, [sp]
   1e2d0:	movne	r1, #1
   1e2d4:	strne	r1, [sp, #4]
   1e2d8:	cmp	r0, #0
   1e2dc:	beq	1e30c <flatcc_builder_create_struct@@Base+0x94>
   1e2e0:	ldm	sp, {r1, r2}
   1e2e4:	add	r1, r1, r0
   1e2e8:	str	r1, [sp]
   1e2ec:	mov	r1, sp
   1e2f0:	add	r1, r1, r2, lsl #3
   1e2f4:	movw	r3, #27596	; 0x6bcc
   1e2f8:	movt	r3, #2
   1e2fc:	str	r3, [r1, #8]
   1e300:	str	r0, [r1, #12]
   1e304:	add	r0, r2, #1
   1e308:	str	r0, [sp, #4]
   1e30c:	mov	r1, sp
   1e310:	mov	r0, r4
   1e314:	bl	1e004 <flatcc_builder_embed_buffer@@Base+0x1e0>
   1e318:	sub	sp, fp, #16
   1e31c:	pop	{r4, r5, r6, r7, fp, pc}
   1e320:	movw	r0, #28572	; 0x6f9c
   1e324:	movt	r0, #2
   1e328:	movw	r1, #28126	; 0x6dde
   1e32c:	movt	r1, #2
   1e330:	movw	r3, #28583	; 0x6fa7
   1e334:	movt	r3, #2
   1e338:	movw	r2, #783	; 0x30f
   1e33c:	bl	12f88 <__assert_fail@plt>

0001e340 <flatcc_builder_start_buffer@@Base>:
   1e340:	push	{r4, r5, r6, r7, fp, lr}
   1e344:	add	fp, sp, #16
   1e348:	mov	r6, r3
   1e34c:	mov	r7, r2
   1e350:	mov	r5, r1
   1e354:	mov	r4, r0
   1e358:	ldrh	r1, [r0, #128]	; 0x80
   1e35c:	bl	1e3fc <flatcc_builder_start_buffer@@Base+0xbc>
   1e360:	mov	r1, r0
   1e364:	mvn	r0, #0
   1e368:	cmp	r1, #0
   1e36c:	popne	{r4, r5, r6, r7, fp, pc}
   1e370:	mov	r0, #1
   1e374:	strh	r0, [r4, #128]	; 0x80
   1e378:	ldrh	r1, [r4, #132]	; 0x84
   1e37c:	ldr	r2, [r4, #32]
   1e380:	strh	r1, [r2, #34]	; 0x22
   1e384:	strh	r7, [r4, #132]	; 0x84
   1e388:	ldrh	r1, [r4, #164]	; 0xa4
   1e38c:	ldr	r2, [r4, #32]
   1e390:	strh	r1, [r2, #32]
   1e394:	strh	r6, [r4, #164]	; 0xa4
   1e398:	ldr	r1, [r4, #32]
   1e39c:	ldr	r2, [r4, #144]	; 0x90
   1e3a0:	str	r2, [r1, #20]
   1e3a4:	ldr	r1, [r4, #32]
   1e3a8:	ldr	r2, [r4, #152]	; 0x98
   1e3ac:	str	r2, [r1, #28]
   1e3b0:	ldr	r1, [r4, #32]
   1e3b4:	ldr	r2, [r4, #136]	; 0x88
   1e3b8:	ldr	r3, [r4, #148]	; 0x94
   1e3bc:	ldr	r7, [r4, #168]	; 0xa8
   1e3c0:	add	r6, r3, #1
   1e3c4:	str	r2, [r4, #144]	; 0x90
   1e3c8:	str	r6, [r4, #148]	; 0x94
   1e3cc:	str	r3, [r4, #152]	; 0x98
   1e3d0:	str	r7, [r1, #16]
   1e3d4:	movw	r1, #27596	; 0x6bcc
   1e3d8:	movt	r1, #2
   1e3dc:	cmp	r5, #0
   1e3e0:	movne	r1, r5
   1e3e4:	ldr	r1, [r1]
   1e3e8:	str	r1, [r4, #168]	; 0xa8
   1e3ec:	ldr	r1, [r4, #32]
   1e3f0:	strh	r0, [r1, #14]
   1e3f4:	mov	r0, #0
   1e3f8:	pop	{r4, r5, r6, r7, fp, pc}
   1e3fc:	push	{r4, r5, r6, sl, fp, lr}
   1e400:	add	fp, sp, #16
   1e404:	sub	sp, sp, #8
   1e408:	mov	r5, r1
   1e40c:	mov	r4, r0
   1e410:	ldr	r1, [r0, #156]	; 0x9c
   1e414:	ldr	r2, [r0, #160]	; 0xa0
   1e418:	add	r0, r1, #1
   1e41c:	str	r0, [r4, #156]	; 0x9c
   1e420:	cmp	r1, r2
   1e424:	bge	1e438 <flatcc_builder_start_buffer@@Base+0xf8>
   1e428:	ldr	r0, [r4, #32]
   1e42c:	add	r0, r0, #36	; 0x24
   1e430:	str	r0, [r4, #32]
   1e434:	b	1e4ac <flatcc_builder_start_buffer@@Base+0x16c>
   1e438:	ldr	r2, [r4, #176]	; 0xb0
   1e43c:	mvn	r6, #0
   1e440:	cmp	r2, #1
   1e444:	cmpge	r1, r2
   1e448:	bge	1e4e8 <flatcc_builder_start_buffer@@Base+0x1a8>
   1e44c:	mov	r1, #0
   1e450:	str	r1, [sp]
   1e454:	add	r0, r0, r0, lsl #3
   1e458:	mvn	r1, #35	; 0x23
   1e45c:	add	r2, r1, r0, lsl #2
   1e460:	mov	r0, r4
   1e464:	mov	r1, #4
   1e468:	mov	r3, #36	; 0x24
   1e46c:	bl	1dc90 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1e470:	str	r0, [r4, #32]
   1e474:	cmp	r0, #0
   1e478:	beq	1e4e8 <flatcc_builder_start_buffer@@Base+0x1a8>
   1e47c:	ldr	r0, [r4, #88]	; 0x58
   1e480:	ldr	r1, [r4, #176]	; 0xb0
   1e484:	movw	r2, #36409	; 0x8e39
   1e488:	movt	r2, #14563	; 0x38e3
   1e48c:	umull	r0, r2, r0, r2
   1e490:	lsr	r0, r2, #3
   1e494:	cmp	r1, r2, lsr #3
   1e498:	mov	r2, r0
   1e49c:	movlt	r2, r1
   1e4a0:	cmp	r1, #0
   1e4a4:	movle	r2, r0
   1e4a8:	str	r2, [r4, #160]	; 0xa0
   1e4ac:	ldr	r0, [r4, #20]
   1e4b0:	ldr	r1, [r4, #32]
   1e4b4:	str	r0, [r1, #8]
   1e4b8:	ldrh	r2, [r4, #130]	; 0x82
   1e4bc:	strh	r2, [r1, #12]
   1e4c0:	strh	r5, [r4, #130]	; 0x82
   1e4c4:	ldr	r2, [r4, #28]
   1e4c8:	mvn	r3, #3
   1e4cc:	stm	r1, {r2, r3}
   1e4d0:	mov	r6, #0
   1e4d4:	str	r6, [r4, #20]
   1e4d8:	add	r0, r0, r2
   1e4dc:	add	r0, r0, #7
   1e4e0:	bic	r0, r0, #7
   1e4e4:	str	r0, [r4, #28]
   1e4e8:	mov	r0, r6
   1e4ec:	sub	sp, fp, #16
   1e4f0:	pop	{r4, r5, r6, sl, fp, pc}

0001e4f4 <flatcc_builder_end_buffer@@Base>:
   1e4f4:	push	{r4, r5, r6, r7, fp, lr}
   1e4f8:	add	fp, sp, #16
   1e4fc:	sub	sp, sp, #8
   1e500:	mov	r4, r0
   1e504:	ldr	r0, [r0, #32]
   1e508:	ldrh	r0, [r0, #14]
   1e50c:	cmp	r0, #1
   1e510:	bne	1e59c <flatcc_builder_end_buffer@@Base+0xa8>
   1e514:	mov	r5, r1
   1e518:	ldr	r6, [r4, #152]	; 0x98
   1e51c:	ldrh	r7, [r4, #164]	; 0xa4
   1e520:	ldrh	r1, [r4, #132]	; 0x84
   1e524:	mov	r0, r4
   1e528:	bl	1e264 <flatcc_builder_create_buffer@@Base+0x1cc>
   1e52c:	and	r0, r7, #2
   1e530:	cmp	r6, #0
   1e534:	orrne	r0, r0, #1
   1e538:	ldrh	r2, [r4, #132]	; 0x84
   1e53c:	ldrh	r1, [r4, #128]	; 0x80
   1e540:	str	r1, [sp]
   1e544:	str	r0, [sp, #4]
   1e548:	add	r1, r4, #168	; 0xa8
   1e54c:	mov	r0, r4
   1e550:	mov	r3, r5
   1e554:	bl	1e098 <flatcc_builder_create_buffer@@Base>
   1e558:	mov	r5, r0
   1e55c:	cmp	r0, #0
   1e560:	beq	1e590 <flatcc_builder_end_buffer@@Base+0x9c>
   1e564:	ldr	r0, [r4, #32]
   1e568:	ldr	r1, [r0, #20]
   1e56c:	str	r1, [r4, #144]	; 0x90
   1e570:	ldr	r1, [r0, #28]
   1e574:	str	r1, [r4, #152]	; 0x98
   1e578:	ldr	r1, [r0, #16]
   1e57c:	str	r1, [r4, #168]	; 0xa8
   1e580:	ldrh	r0, [r0, #32]
   1e584:	strh	r0, [r4, #164]	; 0xa4
   1e588:	mov	r0, r4
   1e58c:	bl	1e5bc <flatcc_builder_end_buffer@@Base+0xc8>
   1e590:	mov	r0, r5
   1e594:	sub	sp, fp, #16
   1e598:	pop	{r4, r5, r6, r7, fp, pc}
   1e59c:	movw	r0, #28685	; 0x700d
   1e5a0:	movt	r0, #2
   1e5a4:	movw	r1, #28126	; 0x6dde
   1e5a8:	movt	r1, #2
   1e5ac:	movw	r3, #28729	; 0x7039
   1e5b0:	movt	r3, #2
   1e5b4:	movw	r2, #838	; 0x346
   1e5b8:	bl	12f88 <__assert_fail@plt>
   1e5bc:	push	{r4, sl, fp, lr}
   1e5c0:	add	fp, sp, #8
   1e5c4:	mov	r4, r0
   1e5c8:	ldr	r0, [r0, #16]
   1e5cc:	ldr	r2, [r4, #20]
   1e5d0:	mov	r1, #0
   1e5d4:	bl	12f40 <memset@plt>
   1e5d8:	ldr	r0, [r4, #32]
   1e5dc:	ldr	r1, [r0, #8]
   1e5e0:	str	r1, [r4, #20]
   1e5e4:	ldr	r1, [r0]
   1e5e8:	str	r1, [r4, #28]
   1e5ec:	ldr	r1, [r0, #4]
   1e5f0:	mov	r0, r4
   1e5f4:	bl	1e674 <flatcc_builder_start_struct@@Base+0x4c>
   1e5f8:	ldrh	r1, [r4, #130]	; 0x82
   1e5fc:	mov	r0, r4
   1e600:	bl	1e264 <flatcc_builder_create_buffer@@Base+0x1cc>
   1e604:	ldr	r0, [r4, #32]
   1e608:	ldr	r1, [r4, #156]	; 0x9c
   1e60c:	ldrh	r2, [r0, #12]
   1e610:	sub	r0, r0, #36	; 0x24
   1e614:	str	r0, [r4, #32]
   1e618:	sub	r0, r1, #1
   1e61c:	str	r0, [r4, #156]	; 0x9c
   1e620:	strh	r2, [r4, #130]	; 0x82
   1e624:	pop	{r4, sl, fp, pc}

0001e628 <flatcc_builder_start_struct@@Base>:
   1e628:	push	{r4, r5, fp, lr}
   1e62c:	add	fp, sp, #8
   1e630:	mov	r4, r1
   1e634:	mov	r5, r0
   1e638:	mov	r1, r2
   1e63c:	bl	1e3fc <flatcc_builder_start_buffer@@Base+0xbc>
   1e640:	cmp	r0, #0
   1e644:	movne	r0, #0
   1e648:	popne	{r4, r5, fp, pc}
   1e64c:	ldr	r0, [r5, #32]
   1e650:	mov	r1, #2
   1e654:	strh	r1, [r0, #14]
   1e658:	mov	r0, r5
   1e65c:	mvn	r1, #3
   1e660:	bl	1e674 <flatcc_builder_start_struct@@Base+0x4c>
   1e664:	mov	r0, r5
   1e668:	mov	r1, r4
   1e66c:	pop	{r4, r5, fp, lr}
   1e670:	b	1e6ac <flatcc_builder_start_struct@@Base+0x84>
   1e674:	push	{fp, lr}
   1e678:	mov	fp, sp
   1e67c:	ldr	r2, [r0, #28]
   1e680:	ldr	ip, [r0, #32]
   1e684:	ldr	r3, [r0, #60]	; 0x3c
   1e688:	ldr	lr, [r0, #64]	; 0x40
   1e68c:	add	r3, r3, r2
   1e690:	str	r3, [r0, #16]
   1e694:	sub	r2, lr, r2
   1e698:	cmp	r2, r1
   1e69c:	movhi	r2, r1
   1e6a0:	str	r2, [r0, #24]
   1e6a4:	str	r1, [ip, #4]
   1e6a8:	pop	{fp, pc}
   1e6ac:	push	{r4, r5, fp, lr}
   1e6b0:	add	fp, sp, #8
   1e6b4:	mov	r4, r0
   1e6b8:	ldr	r5, [r0, #20]
   1e6bc:	ldr	r2, [r0, #24]
   1e6c0:	add	r0, r5, r1
   1e6c4:	str	r0, [r4, #20]
   1e6c8:	cmp	r0, r2
   1e6cc:	bcc	1e6f0 <flatcc_builder_start_struct@@Base+0xc8>
   1e6d0:	add	r1, r0, #1
   1e6d4:	mov	r0, r4
   1e6d8:	mvn	r2, #3
   1e6dc:	bl	20ac8 <flatcc_builder_get_emit_context@@Base+0x18>
   1e6e0:	mov	r1, r0
   1e6e4:	mov	r0, #0
   1e6e8:	cmp	r1, #0
   1e6ec:	popne	{r4, r5, fp, pc}
   1e6f0:	ldr	r0, [r4, #16]
   1e6f4:	add	r0, r0, r5
   1e6f8:	pop	{r4, r5, fp, pc}

0001e6fc <flatcc_builder_struct_edit@@Base>:
   1e6fc:	ldr	r0, [r0, #16]
   1e700:	bx	lr

0001e704 <flatcc_builder_end_struct@@Base>:
   1e704:	push	{r4, r5, fp, lr}
   1e708:	add	fp, sp, #8
   1e70c:	mov	r4, r0
   1e710:	ldr	r0, [r0, #32]
   1e714:	ldrh	r0, [r0, #14]
   1e718:	cmp	r0, #2
   1e71c:	bne	1e74c <flatcc_builder_end_struct@@Base+0x48>
   1e720:	ldrh	r3, [r4, #130]	; 0x82
   1e724:	ldr	r1, [r4, #16]
   1e728:	ldr	r2, [r4, #20]
   1e72c:	mov	r0, r4
   1e730:	bl	1e278 <flatcc_builder_create_struct@@Base>
   1e734:	mov	r5, r0
   1e738:	cmp	r0, #0
   1e73c:	movne	r0, r4
   1e740:	blne	1e5bc <flatcc_builder_end_buffer@@Base+0xc8>
   1e744:	mov	r0, r5
   1e748:	pop	{r4, r5, fp, pc}
   1e74c:	movw	r0, #28818	; 0x7092
   1e750:	movt	r0, #2
   1e754:	movw	r1, #28126	; 0x6dde
   1e758:	movt	r1, #2
   1e75c:	movw	r3, #28862	; 0x70be
   1e760:	movt	r3, #2
   1e764:	mov	r2, #872	; 0x368
   1e768:	bl	12f88 <__assert_fail@plt>

0001e76c <flatcc_builder_extend_vector@@Base>:
   1e76c:	push	{r4, r5, fp, lr}
   1e770:	add	fp, sp, #8
   1e774:	mov	r5, r1
   1e778:	mov	r4, r0
   1e77c:	ldr	r0, [r0, #32]
   1e780:	ldr	r2, [r0, #24]
   1e784:	mov	r0, r4
   1e788:	bl	1e7b0 <flatcc_builder_extend_vector@@Base+0x44>
   1e78c:	cmp	r0, #0
   1e790:	movne	r0, #0
   1e794:	popne	{r4, r5, fp, pc}
   1e798:	ldr	r0, [r4, #32]
   1e79c:	ldr	r0, [r0, #16]
   1e7a0:	mul	r1, r0, r5
   1e7a4:	mov	r0, r4
   1e7a8:	pop	{r4, r5, fp, lr}
   1e7ac:	b	1e6ac <flatcc_builder_start_struct@@Base+0x84>
   1e7b0:	push	{fp, lr}
   1e7b4:	mov	fp, sp
   1e7b8:	ldr	r0, [r0, #32]
   1e7bc:	ldr	r3, [r0, #20]
   1e7c0:	adds	r1, r3, r1
   1e7c4:	bcs	1e7d8 <flatcc_builder_extend_vector@@Base+0x6c>
   1e7c8:	cmp	r1, r2
   1e7cc:	strls	r1, [r0, #20]
   1e7d0:	movls	r0, #0
   1e7d4:	popls	{fp, pc}
   1e7d8:	movw	r0, #32397	; 0x7e8d
   1e7dc:	movt	r0, #2
   1e7e0:	movw	r1, #28126	; 0x6dde
   1e7e4:	movt	r1, #2
   1e7e8:	movw	r3, #32424	; 0x7ea8
   1e7ec:	movt	r3, #2
   1e7f0:	mov	r2, #892	; 0x37c
   1e7f4:	bl	12f88 <__assert_fail@plt>

0001e7f8 <flatcc_builder_vector_push@@Base>:
   1e7f8:	push	{fp, lr}
   1e7fc:	mov	fp, sp
   1e800:	ldr	r2, [r0, #32]
   1e804:	ldrh	r3, [r2, #14]
   1e808:	cmp	r3, #4
   1e80c:	bne	1e838 <flatcc_builder_vector_push@@Base+0x40>
   1e810:	ldr	ip, [r2, #20]
   1e814:	ldr	r3, [r2, #24]
   1e818:	cmp	ip, r3
   1e81c:	bhi	1e858 <flatcc_builder_vector_push@@Base+0x60>
   1e820:	add	r3, ip, #1
   1e824:	str	r3, [r2, #20]
   1e828:	ldr	r2, [r0, #32]
   1e82c:	ldr	r2, [r2, #16]
   1e830:	pop	{fp, lr}
   1e834:	b	1e878 <flatcc_builder_vector_push@@Base+0x80>
   1e838:	movw	r0, #28929	; 0x7101
   1e83c:	movt	r0, #2
   1e840:	movw	r1, #28126	; 0x6dde
   1e844:	movt	r1, #2
   1e848:	movw	r3, #28973	; 0x712d
   1e84c:	movt	r3, #2
   1e850:	movw	r2, #907	; 0x38b
   1e854:	bl	12f88 <__assert_fail@plt>
   1e858:	movw	r0, #29040	; 0x7170
   1e85c:	movt	r0, #2
   1e860:	movw	r1, #28126	; 0x6dde
   1e864:	movt	r1, #2
   1e868:	movw	r3, #28973	; 0x712d
   1e86c:	movt	r3, #2
   1e870:	mov	r2, #908	; 0x38c
   1e874:	bl	12f88 <__assert_fail@plt>
   1e878:	push	{r4, r5, r6, sl, fp, lr}
   1e87c:	add	fp, sp, #16
   1e880:	mov	r4, r2
   1e884:	mov	r5, r1
   1e888:	mov	r1, r2
   1e88c:	bl	1e6ac <flatcc_builder_start_struct@@Base+0x84>
   1e890:	mov	r6, r0
   1e894:	cmp	r0, #0
   1e898:	beq	1e8ac <flatcc_builder_vector_push@@Base+0xb4>
   1e89c:	mov	r0, r6
   1e8a0:	mov	r1, r5
   1e8a4:	mov	r2, r4
   1e8a8:	bl	12eb0 <memcpy@plt>
   1e8ac:	mov	r0, r6
   1e8b0:	pop	{r4, r5, r6, sl, fp, pc}

0001e8b4 <flatcc_builder_append_vector@@Base>:
   1e8b4:	push	{r4, r5, r6, sl, fp, lr}
   1e8b8:	add	fp, sp, #16
   1e8bc:	mov	r4, r1
   1e8c0:	mov	r6, r0
   1e8c4:	ldr	r0, [r0, #32]
   1e8c8:	ldrh	r1, [r0, #14]
   1e8cc:	cmp	r1, #4
   1e8d0:	bne	1e914 <flatcc_builder_append_vector@@Base+0x60>
   1e8d4:	mov	r5, r2
   1e8d8:	ldr	r2, [r0, #24]
   1e8dc:	mov	r0, r6
   1e8e0:	mov	r1, r5
   1e8e4:	bl	1e7b0 <flatcc_builder_extend_vector@@Base+0x44>
   1e8e8:	cmp	r0, #0
   1e8ec:	beq	1e8f8 <flatcc_builder_append_vector@@Base+0x44>
   1e8f0:	mov	r0, #0
   1e8f4:	pop	{r4, r5, r6, sl, fp, pc}
   1e8f8:	ldr	r0, [r6, #32]
   1e8fc:	ldr	r0, [r0, #16]
   1e900:	mul	r2, r0, r5
   1e904:	mov	r0, r6
   1e908:	mov	r1, r4
   1e90c:	pop	{r4, r5, r6, sl, fp, lr}
   1e910:	b	1e878 <flatcc_builder_vector_push@@Base+0x80>
   1e914:	movw	r0, #28929	; 0x7101
   1e918:	movt	r0, #2
   1e91c:	movw	r1, #28126	; 0x6dde
   1e920:	movt	r1, #2
   1e924:	movw	r3, #29101	; 0x71ad
   1e928:	movt	r3, #2
   1e92c:	movw	r2, #915	; 0x393
   1e930:	bl	12f88 <__assert_fail@plt>

0001e934 <flatcc_builder_extend_offset_vector@@Base>:
   1e934:	push	{r4, r5, fp, lr}
   1e938:	add	fp, sp, #8
   1e93c:	mov	r5, r1
   1e940:	mov	r4, r0
   1e944:	mvn	r2, #-1073741824	; 0xc0000000
   1e948:	bl	1e7b0 <flatcc_builder_extend_vector@@Base+0x44>
   1e94c:	cmp	r0, #0
   1e950:	movne	r0, #0
   1e954:	popne	{r4, r5, fp, pc}
   1e958:	lsl	r1, r5, #2
   1e95c:	mov	r0, r4
   1e960:	pop	{r4, r5, fp, lr}
   1e964:	b	1e6ac <flatcc_builder_start_struct@@Base+0x84>

0001e968 <flatcc_builder_offset_vector_push@@Base>:
   1e968:	push	{r4, r5, fp, lr}
   1e96c:	add	fp, sp, #8
   1e970:	mov	r4, r1
   1e974:	ldr	r1, [r0, #32]
   1e978:	ldrh	r2, [r1, #14]
   1e97c:	cmp	r2, #5
   1e980:	bne	1e9b8 <flatcc_builder_offset_vector_push@@Base+0x50>
   1e984:	ldr	r2, [r1, #20]
   1e988:	mov	r5, #0
   1e98c:	cmn	r2, #-1073741823	; 0xc0000001
   1e990:	beq	1e9b0 <flatcc_builder_offset_vector_push@@Base+0x48>
   1e994:	add	r2, r2, #1
   1e998:	str	r2, [r1, #20]
   1e99c:	mov	r1, #4
   1e9a0:	bl	1e6ac <flatcc_builder_start_struct@@Base+0x84>
   1e9a4:	cmp	r0, #0
   1e9a8:	strne	r4, [r0]
   1e9ac:	movne	r5, r0
   1e9b0:	mov	r0, r5
   1e9b4:	pop	{r4, r5, fp, pc}
   1e9b8:	movw	r0, #29178	; 0x71fa
   1e9bc:	movt	r0, #2
   1e9c0:	movw	r1, #28126	; 0x6dde
   1e9c4:	movt	r1, #2
   1e9c8:	movw	r3, #29229	; 0x722d
   1e9cc:	movt	r3, #2
   1e9d0:	movw	r2, #934	; 0x3a6
   1e9d4:	bl	12f88 <__assert_fail@plt>

0001e9d8 <flatcc_builder_append_offset_vector@@Base>:
   1e9d8:	push	{r4, r5, r6, sl, fp, lr}
   1e9dc:	add	fp, sp, #16
   1e9e0:	mov	r6, r0
   1e9e4:	ldr	r0, [r0, #32]
   1e9e8:	ldrh	r0, [r0, #14]
   1e9ec:	cmp	r0, #5
   1e9f0:	bne	1ea30 <flatcc_builder_append_offset_vector@@Base+0x58>
   1e9f4:	mov	r5, r2
   1e9f8:	mov	r4, r1
   1e9fc:	mov	r0, r6
   1ea00:	mov	r1, r2
   1ea04:	mvn	r2, #-1073741824	; 0xc0000000
   1ea08:	bl	1e7b0 <flatcc_builder_extend_vector@@Base+0x44>
   1ea0c:	cmp	r0, #0
   1ea10:	beq	1ea1c <flatcc_builder_append_offset_vector@@Base+0x44>
   1ea14:	mov	r0, #0
   1ea18:	pop	{r4, r5, r6, sl, fp, pc}
   1ea1c:	lsl	r2, r5, #2
   1ea20:	mov	r0, r6
   1ea24:	mov	r1, r4
   1ea28:	pop	{r4, r5, r6, sl, fp, lr}
   1ea2c:	b	1e878 <flatcc_builder_vector_push@@Base+0x80>
   1ea30:	movw	r0, #29178	; 0x71fa
   1ea34:	movt	r0, #2
   1ea38:	movw	r1, #28126	; 0x6dde
   1ea3c:	movt	r1, #2
   1ea40:	movw	r3, #29327	; 0x728f
   1ea44:	movt	r3, #2
   1ea48:	mov	r2, #948	; 0x3b4
   1ea4c:	bl	12f88 <__assert_fail@plt>

0001ea50 <flatcc_builder_extend_string@@Base>:
   1ea50:	push	{r4, r5, fp, lr}
   1ea54:	add	fp, sp, #8
   1ea58:	mov	r5, r0
   1ea5c:	ldr	r0, [r0, #32]
   1ea60:	ldrh	r0, [r0, #14]
   1ea64:	cmp	r0, #6
   1ea68:	bne	1ea98 <flatcc_builder_extend_string@@Base+0x48>
   1ea6c:	mov	r4, r1
   1ea70:	mov	r0, r5
   1ea74:	mvn	r2, #0
   1ea78:	bl	1e7b0 <flatcc_builder_extend_vector@@Base+0x44>
   1ea7c:	cmp	r0, #0
   1ea80:	movne	r0, #0
   1ea84:	popne	{r4, r5, fp, pc}
   1ea88:	mov	r0, r5
   1ea8c:	mov	r1, r4
   1ea90:	pop	{r4, r5, fp, lr}
   1ea94:	b	1e6ac <flatcc_builder_start_struct@@Base+0x84>
   1ea98:	movw	r0, #29443	; 0x7303
   1ea9c:	movt	r0, #2
   1eaa0:	movw	r1, #28126	; 0x6dde
   1eaa4:	movt	r1, #2
   1eaa8:	movw	r3, #29487	; 0x732f
   1eaac:	movt	r3, #2
   1eab0:	movw	r2, #957	; 0x3bd
   1eab4:	bl	12f88 <__assert_fail@plt>

0001eab8 <flatcc_builder_append_string@@Base>:
   1eab8:	push	{r4, r5, r6, sl, fp, lr}
   1eabc:	add	fp, sp, #16
   1eac0:	mov	r6, r0
   1eac4:	ldr	r0, [r0, #32]
   1eac8:	ldrh	r0, [r0, #14]
   1eacc:	cmp	r0, #6
   1ead0:	bne	1eb10 <flatcc_builder_append_string@@Base+0x58>
   1ead4:	mov	r4, r2
   1ead8:	mov	r5, r1
   1eadc:	mov	r0, r6
   1eae0:	mov	r1, r2
   1eae4:	mvn	r2, #0
   1eae8:	bl	1e7b0 <flatcc_builder_extend_vector@@Base+0x44>
   1eaec:	cmp	r0, #0
   1eaf0:	beq	1eafc <flatcc_builder_append_string@@Base+0x44>
   1eaf4:	mov	r0, #0
   1eaf8:	pop	{r4, r5, r6, sl, fp, pc}
   1eafc:	mov	r0, r6
   1eb00:	mov	r1, r5
   1eb04:	mov	r2, r4
   1eb08:	pop	{r4, r5, r6, sl, fp, lr}
   1eb0c:	b	1e878 <flatcc_builder_vector_push@@Base+0x80>
   1eb10:	movw	r0, #29443	; 0x7303
   1eb14:	movt	r0, #2
   1eb18:	movw	r1, #28126	; 0x6dde
   1eb1c:	movt	r1, #2
   1eb20:	movw	r3, #29550	; 0x736e
   1eb24:	movt	r3, #2
   1eb28:	movw	r2, #966	; 0x3c6
   1eb2c:	bl	12f88 <__assert_fail@plt>

0001eb30 <flatcc_builder_append_string_str@@Base>:
   1eb30:	push	{r4, r5, fp, lr}
   1eb34:	add	fp, sp, #8
   1eb38:	mov	r4, r1
   1eb3c:	mov	r5, r0
   1eb40:	mov	r0, r1
   1eb44:	bl	12f1c <strlen@plt>
   1eb48:	mov	r2, r0
   1eb4c:	mov	r0, r5
   1eb50:	mov	r1, r4
   1eb54:	pop	{r4, r5, fp, lr}
   1eb58:	b	1eab8 <flatcc_builder_append_string@@Base>

0001eb5c <flatcc_builder_append_string_strn@@Base>:
   1eb5c:	push	{r4, r5, fp, lr}
   1eb60:	add	fp, sp, #8
   1eb64:	mov	r4, r1
   1eb68:	mov	r5, r0
   1eb6c:	mov	r0, r1
   1eb70:	mov	r1, r2
   1eb74:	bl	1eb8c <flatcc_builder_append_string_strn@@Base+0x30>
   1eb78:	mov	r2, r0
   1eb7c:	mov	r0, r5
   1eb80:	mov	r1, r4
   1eb84:	pop	{r4, r5, fp, lr}
   1eb88:	b	1eab8 <flatcc_builder_append_string@@Base>
   1eb8c:	push	{r4, r5, fp, lr}
   1eb90:	add	fp, sp, #8
   1eb94:	mov	r4, r1
   1eb98:	mov	r5, r0
   1eb9c:	mov	r1, #0
   1eba0:	mov	r2, r4
   1eba4:	bl	12f58 <memchr@plt>
   1eba8:	cmp	r0, #0
   1ebac:	subne	r4, r0, r5
   1ebb0:	mov	r0, r4
   1ebb4:	pop	{r4, r5, fp, pc}

0001ebb8 <flatcc_builder_truncate_vector@@Base>:
   1ebb8:	push	{fp, lr}
   1ebbc:	mov	fp, sp
   1ebc0:	ldr	r2, [r0, #32]
   1ebc4:	ldrh	r3, [r2, #14]
   1ebc8:	cmp	r3, #4
   1ebcc:	bne	1ebfc <flatcc_builder_truncate_vector@@Base+0x44>
   1ebd0:	ldr	r3, [r2, #20]
   1ebd4:	cmp	r3, r1
   1ebd8:	bcc	1ec1c <flatcc_builder_truncate_vector@@Base+0x64>
   1ebdc:	sub	r3, r3, r1
   1ebe0:	str	r3, [r2, #20]
   1ebe4:	ldr	r2, [r0, #32]
   1ebe8:	ldr	r2, [r2, #16]
   1ebec:	mul	r1, r2, r1
   1ebf0:	bl	1ec3c <flatcc_builder_truncate_vector@@Base+0x84>
   1ebf4:	mov	r0, #0
   1ebf8:	pop	{fp, pc}
   1ebfc:	movw	r0, #28929	; 0x7101
   1ec00:	movt	r0, #2
   1ec04:	movw	r1, #28126	; 0x6dde
   1ec08:	movt	r1, #2
   1ec0c:	movw	r3, #29627	; 0x73bb
   1ec10:	movt	r3, #2
   1ec14:	movw	r2, #985	; 0x3d9
   1ec18:	bl	12f88 <__assert_fail@plt>
   1ec1c:	movw	r0, #29690	; 0x73fa
   1ec20:	movt	r0, #2
   1ec24:	movw	r1, #28126	; 0x6dde
   1ec28:	movt	r1, #2
   1ec2c:	movw	r3, #29627	; 0x73bb
   1ec30:	movt	r3, #2
   1ec34:	movw	r2, #986	; 0x3da
   1ec38:	bl	12f88 <__assert_fail@plt>
   1ec3c:	mov	r2, r1
   1ec40:	ldr	r1, [r0, #16]
   1ec44:	ldr	r3, [r0, #20]
   1ec48:	sub	r3, r3, r2
   1ec4c:	str	r3, [r0, #20]
   1ec50:	add	r0, r1, r3
   1ec54:	mov	r1, #0
   1ec58:	b	12f40 <memset@plt>

0001ec5c <flatcc_builder_truncate_offset_vector@@Base>:
   1ec5c:	push	{fp, lr}
   1ec60:	mov	fp, sp
   1ec64:	ldr	r2, [r0, #32]
   1ec68:	ldrh	r3, [r2, #14]
   1ec6c:	cmp	r3, #5
   1ec70:	bne	1eca0 <flatcc_builder_truncate_offset_vector@@Base+0x44>
   1ec74:	ldr	r3, [r2, #20]
   1ec78:	cmp	r3, r1
   1ec7c:	bcc	1ecc0 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   1ec80:	sub	r3, r3, r1
   1ec84:	str	r3, [r2, #20]
   1ec88:	ldr	r2, [r0, #32]
   1ec8c:	ldr	r2, [r2, #16]
   1ec90:	mul	r1, r2, r1
   1ec94:	bl	1ec3c <flatcc_builder_truncate_vector@@Base+0x84>
   1ec98:	mov	r0, #0
   1ec9c:	pop	{fp, pc}
   1eca0:	movw	r0, #29178	; 0x71fa
   1eca4:	movt	r0, #2
   1eca8:	movw	r1, #28126	; 0x6dde
   1ecac:	movt	r1, #2
   1ecb0:	movw	r3, #29726	; 0x741e
   1ecb4:	movt	r3, #2
   1ecb8:	movw	r2, #994	; 0x3e2
   1ecbc:	bl	12f88 <__assert_fail@plt>
   1ecc0:	movw	r0, #29796	; 0x7464
   1ecc4:	movt	r0, #2
   1ecc8:	movw	r1, #28126	; 0x6dde
   1eccc:	movt	r1, #2
   1ecd0:	movw	r3, #29726	; 0x741e
   1ecd4:	movt	r3, #2
   1ecd8:	movw	r2, #995	; 0x3e3
   1ecdc:	bl	12f88 <__assert_fail@plt>

0001ece0 <flatcc_builder_truncate_string@@Base>:
   1ece0:	push	{fp, lr}
   1ece4:	mov	fp, sp
   1ece8:	ldr	r2, [r0, #32]
   1ecec:	ldrh	r3, [r2, #14]
   1ecf0:	cmp	r3, #6
   1ecf4:	bne	1ed18 <flatcc_builder_truncate_string@@Base+0x38>
   1ecf8:	ldr	r3, [r2, #20]
   1ecfc:	cmp	r3, r1
   1ed00:	bcc	1ed38 <flatcc_builder_truncate_string@@Base+0x58>
   1ed04:	sub	r3, r3, r1
   1ed08:	str	r3, [r2, #20]
   1ed0c:	bl	1ec3c <flatcc_builder_truncate_vector@@Base+0x84>
   1ed10:	mov	r0, #0
   1ed14:	pop	{fp, pc}
   1ed18:	movw	r0, #29443	; 0x7303
   1ed1c:	movt	r0, #2
   1ed20:	movw	r1, #28126	; 0x6dde
   1ed24:	movt	r1, #2
   1ed28:	movw	r3, #29855	; 0x749f
   1ed2c:	movt	r3, #2
   1ed30:	movw	r2, #1003	; 0x3eb
   1ed34:	bl	12f88 <__assert_fail@plt>
   1ed38:	movw	r0, #29918	; 0x74de
   1ed3c:	movt	r0, #2
   1ed40:	movw	r1, #28126	; 0x6dde
   1ed44:	movt	r1, #2
   1ed48:	movw	r3, #29855	; 0x749f
   1ed4c:	movt	r3, #2
   1ed50:	mov	r2, #1004	; 0x3ec
   1ed54:	bl	12f88 <__assert_fail@plt>

0001ed58 <flatcc_builder_start_vector@@Base>:
   1ed58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ed5c:	add	fp, sp, #24
   1ed60:	sub	sp, sp, #8
   1ed64:	mov	r5, r3
   1ed68:	mov	r6, r1
   1ed6c:	mov	r4, r0
   1ed70:	strh	r2, [sp, #6]
   1ed74:	add	r0, sp, #6
   1ed78:	mov	r8, #4
   1ed7c:	mov	r1, #4
   1ed80:	bl	1edd8 <flatcc_builder_start_vector@@Base+0x80>
   1ed84:	ldrh	r1, [sp, #6]
   1ed88:	mov	r0, r4
   1ed8c:	bl	1e3fc <flatcc_builder_start_buffer@@Base+0xbc>
   1ed90:	mvn	r7, #0
   1ed94:	cmp	r0, #0
   1ed98:	bne	1edcc <flatcc_builder_start_vector@@Base+0x74>
   1ed9c:	ldr	r0, [r4, #32]
   1eda0:	str	r6, [r0, #16]
   1eda4:	ldr	r0, [r4, #32]
   1eda8:	mov	r7, #0
   1edac:	str	r7, [r0, #20]
   1edb0:	ldr	r0, [r4, #32]
   1edb4:	str	r5, [r0, #24]
   1edb8:	ldr	r0, [r4, #32]
   1edbc:	strh	r8, [r0, #14]
   1edc0:	mov	r0, r4
   1edc4:	mvn	r1, #3
   1edc8:	bl	1e674 <flatcc_builder_start_struct@@Base+0x4c>
   1edcc:	mov	r0, r7
   1edd0:	sub	sp, fp, #24
   1edd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1edd8:	ldrh	r2, [r0]
   1eddc:	cmp	r2, r1
   1ede0:	strhcc	r1, [r0]
   1ede4:	bx	lr

0001ede8 <flatcc_builder_start_offset_vector@@Base>:
   1ede8:	push	{r4, r5, r6, sl, fp, lr}
   1edec:	add	fp, sp, #16
   1edf0:	mov	r4, r0
   1edf4:	mov	r6, #4
   1edf8:	mov	r1, #4
   1edfc:	bl	1e3fc <flatcc_builder_start_buffer@@Base+0xbc>
   1ee00:	mvn	r5, #0
   1ee04:	cmp	r0, #0
   1ee08:	beq	1ee14 <flatcc_builder_start_offset_vector@@Base+0x2c>
   1ee0c:	mov	r0, r5
   1ee10:	pop	{r4, r5, r6, sl, fp, pc}
   1ee14:	ldr	r0, [r4, #32]
   1ee18:	str	r6, [r0, #16]
   1ee1c:	ldr	r0, [r4, #32]
   1ee20:	mov	r5, #0
   1ee24:	str	r5, [r0, #20]
   1ee28:	ldr	r0, [r4, #32]
   1ee2c:	mov	r1, #5
   1ee30:	strh	r1, [r0, #14]
   1ee34:	mov	r0, r4
   1ee38:	mvn	r1, #3
   1ee3c:	bl	1e674 <flatcc_builder_start_struct@@Base+0x4c>
   1ee40:	mov	r0, r5
   1ee44:	pop	{r4, r5, r6, sl, fp, pc}

0001ee48 <flatcc_builder_create_offset_vector@@Base>:
   1ee48:	push	{r4, r5, r6, sl, fp, lr}
   1ee4c:	add	fp, sp, #16
   1ee50:	mov	r6, r2
   1ee54:	mov	r5, r1
   1ee58:	mov	r4, r0
   1ee5c:	bl	1ede8 <flatcc_builder_start_offset_vector@@Base>
   1ee60:	cmp	r0, #0
   1ee64:	beq	1ee70 <flatcc_builder_create_offset_vector@@Base+0x28>
   1ee68:	mov	r0, #0
   1ee6c:	pop	{r4, r5, r6, sl, fp, pc}
   1ee70:	mov	r0, r4
   1ee74:	mov	r1, r6
   1ee78:	bl	1e934 <flatcc_builder_extend_offset_vector@@Base>
   1ee7c:	cmp	r0, #0
   1ee80:	beq	1ee68 <flatcc_builder_create_offset_vector@@Base+0x20>
   1ee84:	lsl	r2, r6, #2
   1ee88:	mov	r1, r5
   1ee8c:	bl	12eb0 <memcpy@plt>
   1ee90:	mov	r0, r4
   1ee94:	pop	{r4, r5, r6, sl, fp, lr}
   1ee98:	b	1ee9c <flatcc_builder_end_offset_vector@@Base>

0001ee9c <flatcc_builder_end_offset_vector@@Base>:
   1ee9c:	push	{r4, r5, fp, lr}
   1eea0:	add	fp, sp, #8
   1eea4:	mov	r4, r0
   1eea8:	ldr	r0, [r0, #32]
   1eeac:	ldrh	r1, [r0, #14]
   1eeb0:	cmp	r1, #5
   1eeb4:	bne	1eee0 <flatcc_builder_end_offset_vector@@Base+0x44>
   1eeb8:	ldr	r2, [r0, #20]
   1eebc:	ldr	r1, [r4, #16]
   1eec0:	mov	r0, r4
   1eec4:	bl	1fa24 <flatcc_builder_create_offset_vector_direct@@Base>
   1eec8:	mov	r5, r0
   1eecc:	cmp	r0, #0
   1eed0:	movne	r0, r4
   1eed4:	blne	1e5bc <flatcc_builder_end_buffer@@Base+0xc8>
   1eed8:	mov	r0, r5
   1eedc:	pop	{r4, r5, fp, pc}
   1eee0:	movw	r0, #29178	; 0x71fa
   1eee4:	movt	r0, #2
   1eee8:	movw	r1, #28126	; 0x6dde
   1eeec:	movt	r1, #2
   1eef0:	movw	r3, #30761	; 0x7829
   1eef4:	movt	r3, #2
   1eef8:	movw	r2, #1480	; 0x5c8
   1eefc:	bl	12f88 <__assert_fail@plt>

0001ef00 <flatcc_builder_start_string@@Base>:
   1ef00:	push	{r4, r5, r6, sl, fp, lr}
   1ef04:	add	fp, sp, #16
   1ef08:	mov	r4, r0
   1ef0c:	mov	r6, #1
   1ef10:	mov	r1, #1
   1ef14:	bl	1e3fc <flatcc_builder_start_buffer@@Base+0xbc>
   1ef18:	mvn	r5, #0
   1ef1c:	cmp	r0, #0
   1ef20:	beq	1ef2c <flatcc_builder_start_string@@Base+0x2c>
   1ef24:	mov	r0, r5
   1ef28:	pop	{r4, r5, r6, sl, fp, pc}
   1ef2c:	ldr	r0, [r4, #32]
   1ef30:	str	r6, [r0, #16]
   1ef34:	ldr	r0, [r4, #32]
   1ef38:	mov	r5, #0
   1ef3c:	str	r5, [r0, #20]
   1ef40:	ldr	r0, [r4, #32]
   1ef44:	mov	r1, #6
   1ef48:	strh	r1, [r0, #14]
   1ef4c:	mov	r0, r4
   1ef50:	mvn	r1, #3
   1ef54:	bl	1e674 <flatcc_builder_start_struct@@Base+0x4c>
   1ef58:	mov	r0, r5
   1ef5c:	pop	{r4, r5, r6, sl, fp, pc}

0001ef60 <flatcc_builder_reserve_table@@Base>:
   1ef60:	cmn	r1, #1
   1ef64:	ble	1ef6c <flatcc_builder_reserve_table@@Base+0xc>
   1ef68:	b	1ef94 <flatcc_builder_reserve_table@@Base+0x34>
   1ef6c:	push	{fp, lr}
   1ef70:	mov	fp, sp
   1ef74:	movw	r0, #30017	; 0x7541
   1ef78:	movt	r0, #2
   1ef7c:	movw	r1, #28126	; 0x6dde
   1ef80:	movt	r1, #2
   1ef84:	movw	r3, #29952	; 0x7500
   1ef88:	movt	r3, #2
   1ef8c:	movw	r2, #1065	; 0x429
   1ef90:	bl	12f88 <__assert_fail@plt>
   1ef94:	push	{r4, r5, r6, sl, fp, lr}
   1ef98:	add	fp, sp, #16
   1ef9c:	sub	sp, sp, #8
   1efa0:	mov	r6, r1
   1efa4:	mov	r4, r0
   1efa8:	ldr	r0, [r0, #32]
   1efac:	ldrh	r1, [r0, #28]
   1efb0:	ldr	r0, [r0, #16]
   1efb4:	mov	r2, #1
   1efb8:	str	r2, [sp]
   1efbc:	mov	r2, #4
   1efc0:	add	r3, r2, r6, lsl #1
   1efc4:	add	r2, r0, r1, lsl #1
   1efc8:	mov	r5, #0
   1efcc:	mov	r0, r4
   1efd0:	mov	r1, #0
   1efd4:	bl	1dc90 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1efd8:	str	r0, [r4, #4]
   1efdc:	cmp	r0, #0
   1efe0:	beq	1f01c <flatcc_builder_reserve_table@@Base+0xbc>
   1efe4:	lsl	r1, r6, #1
   1efe8:	add	r0, r0, #4
   1efec:	str	r0, [r4, #4]
   1eff0:	ldr	r0, [r4, #32]
   1eff4:	ldr	r2, [r0, #20]
   1eff8:	str	r5, [sp]
   1effc:	orr	r3, r1, #1
   1f000:	mov	r0, r4
   1f004:	mov	r1, #3
   1f008:	bl	1dc90 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1f00c:	str	r0, [r4]
   1f010:	cmp	r0, #0
   1f014:	mvneq	r5, #0
   1f018:	b	1f020 <flatcc_builder_reserve_table@@Base+0xc0>
   1f01c:	mvn	r5, #0
   1f020:	mov	r0, r5
   1f024:	sub	sp, fp, #16
   1f028:	pop	{r4, r5, r6, sl, fp, pc}

0001f02c <flatcc_builder_start_table@@Base>:
   1f02c:	push	{r4, r5, r6, sl, fp, lr}
   1f030:	add	fp, sp, #16
   1f034:	mov	r6, r1
   1f038:	mov	r4, r0
   1f03c:	mov	r1, #4
   1f040:	bl	1e3fc <flatcc_builder_start_buffer@@Base+0xbc>
   1f044:	mvn	r5, #0
   1f048:	cmp	r0, #0
   1f04c:	bne	1f0c4 <flatcc_builder_start_table@@Base+0x98>
   1f050:	ldr	r0, [r4, #4]
   1f054:	ldr	r1, [r4, #32]
   1f058:	ldr	r2, [r4, #52]	; 0x34
   1f05c:	sub	r0, r0, r2
   1f060:	str	r0, [r1, #16]
   1f064:	ldr	r0, [r4]
   1f068:	ldr	r1, [r4, #32]
   1f06c:	ldr	r2, [r4, #76]	; 0x4c
   1f070:	sub	r0, r0, r2
   1f074:	str	r0, [r1, #20]
   1f078:	ldr	r0, [r4, #12]
   1f07c:	ldr	r1, [r4, #32]
   1f080:	str	r0, [r1, #24]
   1f084:	ldr	r0, [r4, #32]
   1f088:	ldrh	r1, [r4, #8]
   1f08c:	strh	r1, [r0, #28]
   1f090:	mov	r0, #0
   1f094:	strh	r0, [r4, #8]
   1f098:	movw	r0, #15186	; 0x3b52
   1f09c:	movt	r0, #12137	; 0x2f69
   1f0a0:	str	r0, [r4, #12]
   1f0a4:	ldr	r0, [r4, #32]
   1f0a8:	mov	r1, #3
   1f0ac:	strh	r1, [r0, #14]
   1f0b0:	mov	r0, r4
   1f0b4:	mov	r1, r6
   1f0b8:	bl	1ef94 <flatcc_builder_reserve_table@@Base+0x34>
   1f0bc:	cmp	r0, #0
   1f0c0:	beq	1f0cc <flatcc_builder_start_table@@Base+0xa0>
   1f0c4:	mov	r0, r5
   1f0c8:	pop	{r4, r5, r6, sl, fp, pc}
   1f0cc:	mov	r0, r4
   1f0d0:	movw	r1, #65532	; 0xfffc
   1f0d4:	bl	1e674 <flatcc_builder_start_struct@@Base+0x4c>
   1f0d8:	mov	r5, #0
   1f0dc:	mov	r0, r5
   1f0e0:	pop	{r4, r5, r6, sl, fp, pc}

0001f0e4 <flatcc_builder_create_vtable@@Base>:
   1f0e4:	push	{fp, lr}
   1f0e8:	mov	fp, sp
   1f0ec:	sub	sp, sp, #72	; 0x48
   1f0f0:	mov	r3, #0
   1f0f4:	str	r3, [sp, #4]
   1f0f8:	str	r3, [sp]
   1f0fc:	cmp	r2, #0
   1f100:	strne	r2, [sp, #12]
   1f104:	strne	r1, [sp, #8]
   1f108:	strne	r2, [sp]
   1f10c:	movne	r1, #1
   1f110:	strne	r1, [sp, #4]
   1f114:	ldr	r1, [r0, #152]	; 0x98
   1f118:	cmp	r1, #0
   1f11c:	bne	1f12c <flatcc_builder_create_vtable@@Base+0x48>
   1f120:	ldr	r1, [r0, #180]	; 0xb4
   1f124:	cmp	r1, #0
   1f128:	beq	1f148 <flatcc_builder_create_vtable@@Base+0x64>
   1f12c:	mov	r1, sp
   1f130:	bl	1e004 <flatcc_builder_embed_buffer@@Base+0x1e0>
   1f134:	cmp	r0, #0
   1f138:	beq	1f158 <flatcc_builder_create_vtable@@Base+0x74>
   1f13c:	add	r0, r0, #1
   1f140:	mov	sp, fp
   1f144:	pop	{fp, pc}
   1f148:	mov	r1, sp
   1f14c:	bl	1f164 <flatcc_builder_create_vtable@@Base+0x80>
   1f150:	cmp	r0, #0
   1f154:	bne	1f140 <flatcc_builder_create_vtable@@Base+0x5c>
   1f158:	mov	r0, #0
   1f15c:	mov	sp, fp
   1f160:	pop	{fp, pc}
   1f164:	push	{r4, sl, fp, lr}
   1f168:	add	fp, sp, #8
   1f16c:	sub	sp, sp, #8
   1f170:	ldr	r4, [r0, #140]	; 0x8c
   1f174:	ldr	r3, [r1]
   1f178:	add	r2, r3, r4
   1f17c:	str	r2, [r0, #140]	; 0x8c
   1f180:	cmn	r3, #1
   1f184:	ble	1f1d8 <flatcc_builder_create_vtable@@Base+0xf4>
   1f188:	ldr	r2, [r1, #4]
   1f18c:	ldr	ip, [r0, #36]	; 0x24
   1f190:	ldr	lr, [r0, #44]	; 0x2c
   1f194:	str	r3, [sp]
   1f198:	add	r1, r1, #8
   1f19c:	mov	r0, ip
   1f1a0:	mov	r3, r4
   1f1a4:	blx	lr
   1f1a8:	cmp	r0, #0
   1f1ac:	addeq	r0, r4, #1
   1f1b0:	subeq	sp, fp, #8
   1f1b4:	popeq	{r4, sl, fp, pc}
   1f1b8:	movw	r0, #32644	; 0x7f84
   1f1bc:	movt	r0, #2
   1f1c0:	movw	r1, #28126	; 0x6dde
   1f1c4:	movt	r1, #2
   1f1c8:	movw	r3, #32511	; 0x7eff
   1f1cc:	movt	r3, #2
   1f1d0:	movw	r2, #677	; 0x2a5
   1f1d4:	bl	12f88 <__assert_fail@plt>
   1f1d8:	movw	r0, #32644	; 0x7f84
   1f1dc:	movt	r0, #2
   1f1e0:	movw	r1, #28126	; 0x6dde
   1f1e4:	movt	r1, #2
   1f1e8:	movw	r3, #32511	; 0x7eff
   1f1ec:	movt	r3, #2
   1f1f0:	movw	r2, #673	; 0x2a1
   1f1f4:	bl	12f88 <__assert_fail@plt>

0001f1f8 <flatcc_builder_create_cached_vtable@@Base>:
   1f1f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1fc:	add	fp, sp, #28
   1f200:	sub	sp, sp, #20
   1f204:	mov	r4, r2
   1f208:	mov	r9, r1
   1f20c:	mov	sl, r0
   1f210:	mov	r1, r3
   1f214:	bl	1f3f0 <flatcc_builder_create_cached_vtable@@Base+0x1f8>
   1f218:	cmp	r0, #0
   1f21c:	beq	1f340 <flatcc_builder_create_cached_vtable@@Base+0x148>
   1f220:	mov	r7, r0
   1f224:	ldr	r6, [r0]
   1f228:	mov	r5, #0
   1f22c:	cmp	r6, #0
   1f230:	mov	r8, #0
   1f234:	beq	1f2cc <flatcc_builder_create_cached_vtable@@Base+0xd4>
   1f238:	ldr	r5, [sl, #68]	; 0x44
   1f23c:	str	sl, [sp, #16]
   1f240:	ldr	sl, [sl, #100]	; 0x64
   1f244:	mov	r0, #0
   1f248:	str	r7, [sp, #8]
   1f24c:	str	r0, [sp, #12]
   1f250:	b	1f264 <flatcc_builder_create_cached_vtable@@Base+0x6c>
   1f254:	ldr	r6, [r8, #12]!
   1f258:	cmp	r6, #0
   1f25c:	mov	r7, r8
   1f260:	beq	1f2bc <flatcc_builder_create_cached_vtable@@Base+0xc4>
   1f264:	add	r8, sl, r6
   1f268:	ldr	r0, [r8, #8]
   1f26c:	mov	r1, r5
   1f270:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   1f274:	cmp	r0, r4
   1f278:	bne	1f254 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   1f27c:	mov	r0, r9
   1f280:	mov	r2, r4
   1f284:	bl	12f10 <bcmp@plt>
   1f288:	cmp	r0, #0
   1f28c:	bne	1f254 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   1f290:	ldr	r0, [sp, #16]
   1f294:	ldr	r0, [r0, #152]	; 0x98
   1f298:	ldr	r1, [r8, #4]
   1f29c:	cmp	r1, r0
   1f2a0:	beq	1f3c8 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   1f2a4:	mov	r7, r8
   1f2a8:	ldr	r6, [r7, #12]!
   1f2ac:	cmp	r6, #0
   1f2b0:	mov	r0, r8
   1f2b4:	bne	1f24c <flatcc_builder_create_cached_vtable@@Base+0x54>
   1f2b8:	b	1f2c0 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   1f2bc:	ldr	r8, [sp, #12]
   1f2c0:	ldr	sl, [sp, #16]
   1f2c4:	mov	r5, #0
   1f2c8:	ldr	r7, [sp, #8]
   1f2cc:	ldr	r2, [sl, #124]	; 0x7c
   1f2d0:	str	r5, [sp]
   1f2d4:	mov	r0, sl
   1f2d8:	mov	r1, #6
   1f2dc:	mov	r3, #16
   1f2e0:	bl	1dc90 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1f2e4:	cmp	r0, #0
   1f2e8:	beq	1f3b4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1f2ec:	mov	r6, r0
   1f2f0:	ldr	r0, [sl, #124]	; 0x7c
   1f2f4:	ldr	r1, [sl, #152]	; 0x98
   1f2f8:	add	r2, r0, #16
   1f2fc:	str	r2, [sl, #124]	; 0x7c
   1f300:	str	r1, [r6, #4]
   1f304:	ldr	r1, [r7]
   1f308:	str	r1, [r6, #12]
   1f30c:	str	r0, [r7]
   1f310:	mov	r0, sl
   1f314:	mov	r1, r9
   1f318:	mov	r2, r4
   1f31c:	bl	1f0e4 <flatcc_builder_create_vtable@@Base>
   1f320:	str	r0, [r6]
   1f324:	cmp	r0, #0
   1f328:	beq	1f3b4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1f32c:	cmp	r8, #0
   1f330:	beq	1f348 <flatcc_builder_create_cached_vtable@@Base+0x150>
   1f334:	ldr	r0, [r8, #8]
   1f338:	str	r0, [r6, #8]
   1f33c:	b	1f3b0 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   1f340:	mov	r5, #0
   1f344:	b	1f3b4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1f348:	ldr	r0, [sl, #172]	; 0xac
   1f34c:	cmp	r0, #0
   1f350:	beq	1f370 <flatcc_builder_create_cached_vtable@@Base+0x178>
   1f354:	ldr	r1, [sl, #120]	; 0x78
   1f358:	add	r1, r1, r4
   1f35c:	cmp	r0, r1
   1f360:	bcs	1f370 <flatcc_builder_create_cached_vtable@@Base+0x178>
   1f364:	mov	r0, sl
   1f368:	bl	1d97c <flatcc_builder_flush_vtable_cache@@Base>
   1f36c:	b	1f3b0 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   1f370:	ldr	r2, [sl, #120]	; 0x78
   1f374:	mov	r0, #0
   1f378:	str	r0, [sp]
   1f37c:	mov	r0, sl
   1f380:	mov	r1, #2
   1f384:	mov	r3, r4
   1f388:	bl	1dc90 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1f38c:	cmp	r0, #0
   1f390:	beq	1f3c0 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   1f394:	ldr	r1, [sl, #120]	; 0x78
   1f398:	str	r1, [r6, #8]
   1f39c:	add	r1, r1, r4
   1f3a0:	str	r1, [sl, #120]	; 0x78
   1f3a4:	mov	r1, r9
   1f3a8:	mov	r2, r4
   1f3ac:	bl	12eb0 <memcpy@plt>
   1f3b0:	ldr	r5, [r6]
   1f3b4:	mov	r0, r5
   1f3b8:	sub	sp, fp, #28
   1f3bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3c0:	mvn	r5, #0
   1f3c4:	b	1f3b4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1f3c8:	ldr	r1, [sp, #8]
   1f3cc:	cmp	r7, r1
   1f3d0:	beq	1f3e8 <flatcc_builder_create_cached_vtable@@Base+0x1f0>
   1f3d4:	ldr	r0, [r8, #12]
   1f3d8:	str	r0, [r7]
   1f3dc:	ldr	r0, [r1]
   1f3e0:	str	r0, [r8, #12]
   1f3e4:	str	r6, [r1]
   1f3e8:	ldr	r5, [r8]
   1f3ec:	b	1f3b4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1f3f0:	push	{r4, r5, fp, lr}
   1f3f4:	add	fp, sp, #8
   1f3f8:	mov	r4, r1
   1f3fc:	mov	r5, r0
   1f400:	ldr	r0, [r0, #116]	; 0x74
   1f404:	cmp	r0, #0
   1f408:	bne	1f424 <flatcc_builder_create_cached_vtable@@Base+0x22c>
   1f40c:	mov	r0, r5
   1f410:	bl	20b30 <flatcc_builder_get_emit_context@@Base+0x80>
   1f414:	mov	r1, r0
   1f418:	mov	r0, #0
   1f41c:	cmp	r1, #0
   1f420:	popne	{r4, r5, fp, pc}
   1f424:	ldr	r0, [r5, #92]	; 0x5c
   1f428:	ldr	r1, [r5, #116]	; 0x74
   1f42c:	rsb	r1, r1, #32
   1f430:	lsr	r1, r4, r1
   1f434:	add	r0, r0, r1, lsl #2
   1f438:	pop	{r4, r5, fp, pc}

0001f43c <flatcc_builder_create_table@@Base>:
   1f43c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f440:	add	fp, sp, #28
   1f444:	sub	sp, sp, #84	; 0x54
   1f448:	strh	r3, [fp, #-30]	; 0xffffffe2
   1f44c:	ldr	r4, [fp, #12]
   1f450:	cmn	r4, #1
   1f454:	ble	1f57c <flatcc_builder_create_table@@Base+0x140>
   1f458:	ldr	r8, [fp, #16]
   1f45c:	tst	r8, #1
   1f460:	beq	1f59c <flatcc_builder_create_table@@Base+0x160>
   1f464:	mov	sl, r2
   1f468:	mov	r6, r1
   1f46c:	mov	r5, r0
   1f470:	sub	r0, fp, #30
   1f474:	mov	r1, #4
   1f478:	bl	1edd8 <flatcc_builder_start_vector@@Base+0x80>
   1f47c:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   1f480:	mov	r0, r5
   1f484:	mov	r1, r7
   1f488:	bl	1e264 <flatcc_builder_create_buffer@@Base+0x1cc>
   1f48c:	mov	r0, r5
   1f490:	mov	r1, sl
   1f494:	mov	r2, r7
   1f498:	bl	1dfec <flatcc_builder_embed_buffer@@Base+0x1c8>
   1f49c:	mov	r9, r0
   1f4a0:	add	r0, sl, r0
   1f4a4:	str	r5, [sp]
   1f4a8:	ldr	r1, [r5, #136]	; 0x88
   1f4ac:	sub	r0, r1, r0
   1f4b0:	sub	r5, r0, #4
   1f4b4:	sub	r0, r5, r8
   1f4b8:	add	r0, r0, #1
   1f4bc:	bl	1e000 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1f4c0:	str	r0, [fp, #-36]	; 0xffffffdc
   1f4c4:	cmp	r4, #1
   1f4c8:	blt	1f4f8 <flatcc_builder_create_table@@Base+0xbc>
   1f4cc:	ldr	r7, [fp, #8]
   1f4d0:	mvn	r0, #3
   1f4d4:	sub	r5, r0, r5
   1f4d8:	ldrh	r8, [r7], #2
   1f4dc:	ldr	r0, [r8, r6]
   1f4e0:	add	r0, r5, r0
   1f4e4:	sub	r0, r0, r8
   1f4e8:	bl	1e000 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1f4ec:	str	r0, [r8, r6]
   1f4f0:	subs	r4, r4, #1
   1f4f4:	bne	1f4d8 <flatcc_builder_create_table@@Base+0x9c>
   1f4f8:	mov	r1, #4
   1f4fc:	str	r1, [sp, #16]
   1f500:	sub	r0, fp, #36	; 0x24
   1f504:	str	r0, [sp, #12]
   1f508:	str	r1, [sp, #4]
   1f50c:	mov	r0, #1
   1f510:	str	r0, [sp, #8]
   1f514:	cmp	sl, #0
   1f518:	strne	sl, [sp, #24]
   1f51c:	strne	r6, [sp, #20]
   1f520:	movne	r0, #2
   1f524:	strne	r0, [sp, #8]
   1f528:	addne	r0, sl, #4
   1f52c:	strne	r0, [sp, #4]
   1f530:	cmp	r9, #0
   1f534:	ldr	r0, [sp]
   1f538:	beq	1f56c <flatcc_builder_create_table@@Base+0x130>
   1f53c:	ldr	r2, [sp, #4]
   1f540:	ldr	r1, [sp, #8]
   1f544:	add	r2, r2, r9
   1f548:	str	r2, [sp, #4]
   1f54c:	add	r2, sp, #4
   1f550:	add	r3, r2, r1, lsl #3
   1f554:	movw	r2, #27596	; 0x6bcc
   1f558:	movt	r2, #2
   1f55c:	str	r2, [r3, #8]
   1f560:	str	r9, [r3, #12]
   1f564:	add	r1, r1, #1
   1f568:	str	r1, [sp, #8]
   1f56c:	add	r1, sp, #4
   1f570:	bl	1e004 <flatcc_builder_embed_buffer@@Base+0x1e0>
   1f574:	sub	sp, fp, #28
   1f578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f57c:	movw	r0, #30010	; 0x753a
   1f580:	movt	r0, #2
   1f584:	movw	r1, #28126	; 0x6dde
   1f588:	movt	r1, #2
   1f58c:	movw	r3, #30028	; 0x754c
   1f590:	movt	r3, #2
   1f594:	movw	r2, #1237	; 0x4d5
   1f598:	bl	12f88 <__assert_fail@plt>
   1f59c:	movw	r0, #30184	; 0x75e8
   1f5a0:	movt	r0, #2
   1f5a4:	movw	r1, #28126	; 0x6dde
   1f5a8:	movt	r1, #2
   1f5ac:	movw	r3, #30028	; 0x754c
   1f5b0:	movt	r3, #2
   1f5b4:	movw	r2, #1243	; 0x4db
   1f5b8:	bl	12f88 <__assert_fail@plt>

0001f5bc <flatcc_builder_check_required_field@@Base>:
   1f5bc:	push	{fp, lr}
   1f5c0:	mov	fp, sp
   1f5c4:	ldr	r2, [r0, #32]
   1f5c8:	ldrh	r2, [r2, #14]
   1f5cc:	cmp	r2, #3
   1f5d0:	bne	1f600 <flatcc_builder_check_required_field@@Base+0x44>
   1f5d4:	ldrh	r3, [r0, #8]
   1f5d8:	mov	r2, #0
   1f5dc:	cmp	r3, r1
   1f5e0:	bls	1f5f8 <flatcc_builder_check_required_field@@Base+0x3c>
   1f5e4:	ldr	r0, [r0, #4]
   1f5e8:	add	r0, r0, r1, lsl #1
   1f5ec:	ldrh	r2, [r0]
   1f5f0:	cmp	r2, #0
   1f5f4:	movwne	r2, #1
   1f5f8:	mov	r0, r2
   1f5fc:	pop	{fp, pc}
   1f600:	movw	r0, #30195	; 0x75f3
   1f604:	movt	r0, #2
   1f608:	movw	r1, #28126	; 0x6dde
   1f60c:	movt	r1, #2
   1f610:	movw	r3, #30238	; 0x761e
   1f614:	movt	r3, #2
   1f618:	movw	r2, #1272	; 0x4f8
   1f61c:	bl	12f88 <__assert_fail@plt>

0001f620 <flatcc_builder_check_union_field@@Base>:
   1f620:	push	{fp, lr}
   1f624:	mov	fp, sp
   1f628:	mov	r2, r0
   1f62c:	ldr	r0, [r0, #32]
   1f630:	ldrh	r0, [r0, #14]
   1f634:	cmp	r0, #3
   1f638:	bne	1f698 <flatcc_builder_check_union_field@@Base+0x78>
   1f63c:	mov	r0, #0
   1f640:	cmp	r1, #0
   1f644:	beq	1f684 <flatcc_builder_check_union_field@@Base+0x64>
   1f648:	ldrh	r3, [r2, #8]
   1f64c:	cmp	r3, r1
   1f650:	popls	{fp, pc}
   1f654:	ldr	r0, [r2, #4]
   1f658:	add	r0, r0, r1, lsl #1
   1f65c:	ldrh	r1, [r0, #-2]
   1f660:	cmp	r1, #0
   1f664:	beq	1f688 <flatcc_builder_check_union_field@@Base+0x68>
   1f668:	ldr	r2, [r2, #16]
   1f66c:	ldrb	r1, [r2, r1]
   1f670:	ldrh	r0, [r0]
   1f674:	cmp	r1, #0
   1f678:	beq	1f68c <flatcc_builder_check_union_field@@Base+0x6c>
   1f67c:	cmp	r0, #0
   1f680:	movwne	r0, #1
   1f684:	pop	{fp, pc}
   1f688:	ldrh	r0, [r0]
   1f68c:	clz	r0, r0
   1f690:	lsr	r0, r0, #5
   1f694:	pop	{fp, pc}
   1f698:	movw	r0, #30195	; 0x75f3
   1f69c:	movt	r0, #2
   1f6a0:	movw	r1, #28126	; 0x6dde
   1f6a4:	movt	r1, #2
   1f6a8:	movw	r3, #30321	; 0x7671
   1f6ac:	movt	r3, #2
   1f6b0:	movw	r2, #1279	; 0x4ff
   1f6b4:	bl	12f88 <__assert_fail@plt>

0001f6b8 <flatcc_builder_check_required@@Base>:
   1f6b8:	push	{fp, lr}
   1f6bc:	mov	fp, sp
   1f6c0:	mov	r3, r0
   1f6c4:	ldr	r0, [r0, #32]
   1f6c8:	ldrh	r0, [r0, #14]
   1f6cc:	cmp	r0, #3
   1f6d0:	bne	1f718 <flatcc_builder_check_required@@Base+0x60>
   1f6d4:	ldrh	ip, [r3, #8]
   1f6d8:	mov	r0, #0
   1f6dc:	cmp	ip, r2
   1f6e0:	poplt	{fp, pc}
   1f6e4:	cmp	r2, #1
   1f6e8:	blt	1f710 <flatcc_builder_check_required@@Base+0x58>
   1f6ec:	ldr	ip, [r3, #4]
   1f6f0:	ldrh	r3, [r1]
   1f6f4:	add	r3, ip, r3, lsl #1
   1f6f8:	ldrh	r3, [r3]
   1f6fc:	cmp	r3, #0
   1f700:	beq	1f714 <flatcc_builder_check_required@@Base+0x5c>
   1f704:	add	r1, r1, #2
   1f708:	subs	r2, r2, #1
   1f70c:	bne	1f6f0 <flatcc_builder_check_required@@Base+0x38>
   1f710:	mov	r0, #1
   1f714:	pop	{fp, pc}
   1f718:	movw	r0, #30195	; 0x75f3
   1f71c:	movt	r0, #2
   1f720:	movw	r1, #28126	; 0x6dde
   1f724:	movt	r1, #2
   1f728:	movw	r3, #30401	; 0x76c1
   1f72c:	movt	r3, #2
   1f730:	movw	r2, #1297	; 0x511
   1f734:	bl	12f88 <__assert_fail@plt>

0001f738 <flatcc_builder_end_table@@Base>:
   1f738:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f73c:	add	fp, sp, #24
   1f740:	sub	sp, sp, #16
   1f744:	mov	r4, r0
   1f748:	ldr	r0, [r0, #32]
   1f74c:	ldrh	r0, [r0, #14]
   1f750:	cmp	r0, #3
   1f754:	bne	1f864 <flatcc_builder_end_table@@Base+0x12c>
   1f758:	ldrh	r0, [r4, #8]
   1f75c:	mov	r1, #4
   1f760:	add	r0, r1, r0, lsl #1
   1f764:	ldr	r6, [r4, #4]
   1f768:	strh	r0, [r6, #-4]!
   1f76c:	ldrh	r1, [r4, #20]
   1f770:	add	r1, r1, #4
   1f774:	strh	r1, [r6, #2]
   1f778:	uxth	r5, r0
   1f77c:	ldr	r0, [r4, #12]
   1f780:	eor	r0, r0, r5
   1f784:	movw	r2, #31153	; 0x79b1
   1f788:	movt	r2, #40503	; 0x9e37
   1f78c:	mul	r0, r0, r2
   1f790:	uxth	r1, r1
   1f794:	eor	r0, r0, r1
   1f798:	mul	r3, r0, r2
   1f79c:	str	r3, [r4, #12]
   1f7a0:	mov	r0, r4
   1f7a4:	mov	r1, r6
   1f7a8:	mov	r2, r5
   1f7ac:	bl	1f1f8 <flatcc_builder_create_cached_vtable@@Base>
   1f7b0:	cmp	r0, #0
   1f7b4:	beq	1f854 <flatcc_builder_end_table@@Base+0x11c>
   1f7b8:	mov	r7, r0
   1f7bc:	mov	r8, #0
   1f7c0:	mov	r0, r6
   1f7c4:	mov	r1, #0
   1f7c8:	mov	r2, r5
   1f7cc:	bl	12f40 <memset@plt>
   1f7d0:	ldrh	r3, [r4, #130]	; 0x82
   1f7d4:	ldr	r0, [r4, #76]	; 0x4c
   1f7d8:	ldr	r6, [r4]
   1f7dc:	ldr	r1, [r4, #16]
   1f7e0:	ldr	r2, [r4, #20]
   1f7e4:	ldr	r5, [r4, #32]
   1f7e8:	ldr	r5, [r5, #20]
   1f7ec:	add	r0, r0, r5
   1f7f0:	sub	r6, r6, r0
   1f7f4:	asr	r6, r6, #1
   1f7f8:	stm	sp, {r0, r6, r7}
   1f7fc:	mov	r0, r4
   1f800:	bl	1f43c <flatcc_builder_create_table@@Base>
   1f804:	cmp	r0, #0
   1f808:	beq	1f858 <flatcc_builder_end_table@@Base+0x120>
   1f80c:	mov	r5, r0
   1f810:	ldr	r0, [r4, #32]
   1f814:	ldr	r1, [r4, #52]	; 0x34
   1f818:	ldr	r2, [r4, #76]	; 0x4c
   1f81c:	ldr	r3, [r0, #24]
   1f820:	str	r3, [r4, #12]
   1f824:	ldrh	r3, [r0, #28]
   1f828:	strh	r3, [r4, #8]
   1f82c:	ldr	r3, [r0, #16]
   1f830:	add	r1, r1, r3
   1f834:	str	r1, [r4, #4]
   1f838:	ldr	r0, [r0, #20]
   1f83c:	add	r0, r2, r0
   1f840:	str	r0, [r4]
   1f844:	mov	r0, r4
   1f848:	bl	1e5bc <flatcc_builder_end_buffer@@Base+0xc8>
   1f84c:	mov	r8, r5
   1f850:	b	1f858 <flatcc_builder_end_table@@Base+0x120>
   1f854:	mov	r8, #0
   1f858:	mov	r0, r8
   1f85c:	sub	sp, fp, #24
   1f860:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f864:	movw	r0, #30195	; 0x75f3
   1f868:	movt	r0, #2
   1f86c:	movw	r1, #28126	; 0x6dde
   1f870:	movt	r1, #2
   1f874:	movw	r3, #30491	; 0x771b
   1f878:	movt	r3, #2
   1f87c:	movw	r2, #1317	; 0x525
   1f880:	bl	12f88 <__assert_fail@plt>

0001f884 <flatcc_builder_create_vector@@Base>:
   1f884:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f888:	add	fp, sp, #24
   1f88c:	sub	sp, sp, #80	; 0x50
   1f890:	mov	r4, r0
   1f894:	ldr	r0, [fp, #8]
   1f898:	strh	r0, [fp, #-26]	; 0xffffffe6
   1f89c:	ldr	r0, [fp, #12]
   1f8a0:	cmp	r2, r0
   1f8a4:	bhi	1f970 <flatcc_builder_create_vector@@Base+0xec>
   1f8a8:	mov	r6, r3
   1f8ac:	mov	r7, r2
   1f8b0:	mov	r8, r1
   1f8b4:	sub	r0, fp, #26
   1f8b8:	mov	r9, #4
   1f8bc:	mov	r1, #4
   1f8c0:	bl	1edd8 <flatcc_builder_start_vector@@Base+0x80>
   1f8c4:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   1f8c8:	mov	r0, r4
   1f8cc:	mov	r1, r5
   1f8d0:	bl	1e264 <flatcc_builder_create_buffer@@Base+0x1cc>
   1f8d4:	mov	r0, r7
   1f8d8:	bl	1e000 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1f8dc:	str	r7, [fp, #-32]	; 0xffffffe0
   1f8e0:	mul	r6, r6, r7
   1f8e4:	mov	r0, r4
   1f8e8:	mov	r1, r6
   1f8ec:	mov	r2, r5
   1f8f0:	bl	1dfec <flatcc_builder_embed_buffer@@Base+0x1c8>
   1f8f4:	str	r9, [sp, #12]
   1f8f8:	sub	r1, fp, #32
   1f8fc:	str	r1, [sp, #8]
   1f900:	str	r9, [sp]
   1f904:	mov	r1, #1
   1f908:	str	r1, [sp, #4]
   1f90c:	cmp	r6, #0
   1f910:	strne	r6, [sp, #20]
   1f914:	strne	r8, [sp, #16]
   1f918:	movne	r1, #2
   1f91c:	strne	r1, [sp, #4]
   1f920:	addne	r1, r6, #4
   1f924:	strne	r1, [sp]
   1f928:	cmp	r0, #0
   1f92c:	beq	1f95c <flatcc_builder_create_vector@@Base+0xd8>
   1f930:	ldm	sp, {r1, r2}
   1f934:	add	r1, r1, r0
   1f938:	str	r1, [sp]
   1f93c:	mov	r1, sp
   1f940:	add	r1, r1, r2, lsl #3
   1f944:	movw	r3, #27596	; 0x6bcc
   1f948:	movt	r3, #2
   1f94c:	str	r3, [r1, #8]
   1f950:	str	r0, [r1, #12]
   1f954:	add	r0, r2, #1
   1f958:	str	r0, [sp, #4]
   1f95c:	mov	r1, sp
   1f960:	mov	r0, r4
   1f964:	bl	1e004 <flatcc_builder_embed_buffer@@Base+0x1e0>
   1f968:	sub	sp, fp, #24
   1f96c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f970:	movw	r0, #30557	; 0x775d
   1f974:	movt	r0, #2
   1f978:	movw	r1, #28126	; 0x6dde
   1f97c:	movt	r1, #2
   1f980:	movw	r3, #30576	; 0x7770
   1f984:	movt	r3, #2
   1f988:	movw	r2, #1365	; 0x555
   1f98c:	bl	12f88 <__assert_fail@plt>

0001f990 <flatcc_builder_end_vector@@Base>:
   1f990:	push	{r4, r5, fp, lr}
   1f994:	add	fp, sp, #8
   1f998:	sub	sp, sp, #8
   1f99c:	mov	r4, r0
   1f9a0:	ldr	r0, [r0, #32]
   1f9a4:	ldrh	r1, [r0, #14]
   1f9a8:	cmp	r1, #4
   1f9ac:	bne	1f9f0 <flatcc_builder_end_vector@@Base+0x60>
   1f9b0:	ldr	r1, [r4, #16]
   1f9b4:	ldrh	r5, [r4, #130]	; 0x82
   1f9b8:	ldr	r3, [r0, #16]
   1f9bc:	ldr	r2, [r0, #20]
   1f9c0:	ldr	r0, [r0, #24]
   1f9c4:	str	r5, [sp]
   1f9c8:	str	r0, [sp, #4]
   1f9cc:	mov	r0, r4
   1f9d0:	bl	1f884 <flatcc_builder_create_vector@@Base>
   1f9d4:	mov	r5, r0
   1f9d8:	cmp	r0, #0
   1f9dc:	movne	r0, r4
   1f9e0:	blne	1e5bc <flatcc_builder_end_buffer@@Base+0xc8>
   1f9e4:	mov	r0, r5
   1f9e8:	sub	sp, fp, #8
   1f9ec:	pop	{r4, r5, fp, pc}
   1f9f0:	movw	r0, #28929	; 0x7101
   1f9f4:	movt	r0, #2
   1f9f8:	movw	r1, #28126	; 0x6dde
   1f9fc:	movt	r1, #2
   1fa00:	movw	r3, #30694	; 0x77e6
   1fa04:	movt	r3, #2
   1fa08:	movw	r2, #1400	; 0x578
   1fa0c:	bl	12f88 <__assert_fail@plt>

0001fa10 <flatcc_builder_vector_count@@Base>:
   1fa10:	ldr	r0, [r0, #32]
   1fa14:	ldr	r0, [r0, #20]
   1fa18:	bx	lr

0001fa1c <flatcc_builder_vector_edit@@Base>:
   1fa1c:	ldr	r0, [r0, #16]
   1fa20:	bx	lr

0001fa24 <flatcc_builder_create_offset_vector_direct@@Base>:
   1fa24:	mov	r3, #0
   1fa28:	b	1fa2c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1fa2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fa30:	add	fp, sp, #24
   1fa34:	sub	sp, sp, #80	; 0x50
   1fa38:	mov	r8, r0
   1fa3c:	mov	r0, #0
   1fa40:	cmn	r2, #-1073741823	; 0xc0000001
   1fa44:	bhi	1fb94 <flatcc_builder_create_offset_vector_direct@@Base+0x170>
   1fa48:	mov	r9, r3
   1fa4c:	mov	r6, r2
   1fa50:	mov	r7, r1
   1fa54:	mov	r5, #4
   1fa58:	mov	r0, r8
   1fa5c:	mov	r1, #4
   1fa60:	bl	1e264 <flatcc_builder_create_buffer@@Base+0x1cc>
   1fa64:	mov	r0, r6
   1fa68:	bl	1e000 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1fa6c:	str	r6, [fp, #-28]	; 0xffffffe4
   1fa70:	lsl	r4, r6, #2
   1fa74:	mov	r0, r8
   1fa78:	mov	r1, r4
   1fa7c:	mov	r2, #4
   1fa80:	bl	1dfec <flatcc_builder_embed_buffer@@Base+0x1c8>
   1fa84:	str	r5, [sp, #16]
   1fa88:	sub	r1, fp, #28
   1fa8c:	str	r1, [sp, #12]
   1fa90:	str	r5, [sp, #4]
   1fa94:	mov	r1, #1
   1fa98:	str	r1, [sp, #8]
   1fa9c:	mov	r1, #0
   1faa0:	cmp	r1, r6, lsl #2
   1faa4:	strne	r4, [sp, #24]
   1faa8:	strne	r7, [sp, #20]
   1faac:	movne	r1, #2
   1fab0:	strne	r1, [sp, #8]
   1fab4:	addne	r1, r4, #4
   1fab8:	strne	r1, [sp, #4]
   1fabc:	cmp	r0, #0
   1fac0:	beq	1faf0 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   1fac4:	ldmib	sp, {r1, r2}
   1fac8:	add	r1, r1, r0
   1facc:	str	r1, [sp, #4]
   1fad0:	add	r1, sp, #4
   1fad4:	add	r1, r1, r2, lsl #3
   1fad8:	movw	r3, #27596	; 0x6bcc
   1fadc:	movt	r3, #2
   1fae0:	str	r3, [r1, #8]
   1fae4:	str	r0, [r1, #12]
   1fae8:	add	r0, r2, #1
   1faec:	str	r0, [sp, #8]
   1faf0:	cmp	r6, #0
   1faf4:	beq	1fb88 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   1faf8:	ldr	r0, [r8, #136]	; 0x88
   1fafc:	ldr	r1, [sp, #4]
   1fb00:	sub	r0, r1, r0
   1fb04:	sub	r4, r0, #4
   1fb08:	mov	r5, r9
   1fb0c:	b	1fb24 <flatcc_builder_create_offset_vector_direct@@Base+0x100>
   1fb10:	sub	r4, r4, #4
   1fb14:	add	r7, r7, #4
   1fb18:	add	r5, r5, #1
   1fb1c:	subs	r6, r6, #1
   1fb20:	beq	1fb88 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   1fb24:	ldr	r0, [r7]
   1fb28:	cmp	r0, #0
   1fb2c:	beq	1fb54 <flatcc_builder_create_offset_vector_direct@@Base+0x130>
   1fb30:	add	r0, r4, r0
   1fb34:	bl	1e000 <flatcc_builder_embed_buffer@@Base+0x1dc>
   1fb38:	str	r0, [r7]
   1fb3c:	cmp	r9, #0
   1fb40:	beq	1fb10 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   1fb44:	ldrb	r0, [r5]
   1fb48:	cmp	r0, #0
   1fb4c:	bne	1fb10 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   1fb50:	b	1fb9c <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   1fb54:	cmp	r9, #0
   1fb58:	beq	1fbbc <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   1fb5c:	ldrb	r0, [r5]
   1fb60:	cmp	r0, #0
   1fb64:	beq	1fb10 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   1fb68:	movw	r0, #32777	; 0x8009
   1fb6c:	movt	r0, #2
   1fb70:	movw	r1, #28126	; 0x6dde
   1fb74:	movt	r1, #2
   1fb78:	movw	r3, #32646	; 0x7f86
   1fb7c:	movt	r3, #2
   1fb80:	movw	r2, #1461	; 0x5b5
   1fb84:	bl	12f88 <__assert_fail@plt>
   1fb88:	add	r1, sp, #4
   1fb8c:	mov	r0, r8
   1fb90:	bl	1e004 <flatcc_builder_embed_buffer@@Base+0x1e0>
   1fb94:	sub	sp, fp, #24
   1fb98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fb9c:	movw	r0, #32632	; 0x7f78
   1fba0:	movt	r0, #2
   1fba4:	movw	r1, #28126	; 0x6dde
   1fba8:	movt	r1, #2
   1fbac:	movw	r3, #32646	; 0x7f86
   1fbb0:	movt	r3, #2
   1fbb4:	movw	r2, #1457	; 0x5b1
   1fbb8:	bl	12f88 <__assert_fail@plt>
   1fbbc:	movw	r0, #32644	; 0x7f84
   1fbc0:	movt	r0, #2
   1fbc4:	movw	r1, #28126	; 0x6dde
   1fbc8:	movt	r1, #2
   1fbcc:	movw	r3, #32646	; 0x7f86
   1fbd0:	movt	r3, #2
   1fbd4:	movw	r2, #1463	; 0x5b7
   1fbd8:	bl	12f88 <__assert_fail@plt>

0001fbdc <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1fbdc:	push	{r4, r5, fp, lr}
   1fbe0:	add	fp, sp, #8
   1fbe4:	mov	r3, r1
   1fbe8:	mov	r4, r0
   1fbec:	ldr	r0, [r0, #32]
   1fbf0:	ldrh	r1, [r0, #14]
   1fbf4:	cmp	r1, #5
   1fbf8:	bne	1fc24 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   1fbfc:	ldr	r2, [r0, #20]
   1fc00:	ldr	r1, [r4, #16]
   1fc04:	mov	r0, r4
   1fc08:	bl	1fa2c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1fc0c:	mov	r5, r0
   1fc10:	cmp	r0, #0
   1fc14:	movne	r0, r4
   1fc18:	blne	1e5bc <flatcc_builder_end_buffer@@Base+0xc8>
   1fc1c:	mov	r0, r5
   1fc20:	pop	{r4, r5, fp, pc}
   1fc24:	movw	r0, #29178	; 0x71fa
   1fc28:	movt	r0, #2
   1fc2c:	movw	r1, #28126	; 0x6dde
   1fc30:	movt	r1, #2
   1fc34:	movw	r3, #30835	; 0x7873
   1fc38:	movt	r3, #2
   1fc3c:	movw	r2, #1493	; 0x5d5
   1fc40:	bl	12f88 <__assert_fail@plt>

0001fc44 <flatcc_builder_offset_vector_edit@@Base>:
   1fc44:	ldr	r0, [r0, #16]
   1fc48:	bx	lr

0001fc4c <flatcc_builder_offset_vector_count@@Base>:
   1fc4c:	ldr	r0, [r0, #32]
   1fc50:	ldr	r0, [r0, #20]
   1fc54:	bx	lr

0001fc58 <flatcc_builder_table_add_union@@Base>:
   1fc58:	push	{r4, r5, r6, r7, fp, lr}
   1fc5c:	add	fp, sp, #16
   1fc60:	mov	r5, r0
   1fc64:	ldr	r0, [r0, #32]
   1fc68:	ldrh	r0, [r0, #14]
   1fc6c:	cmp	r0, #3
   1fc70:	bne	1fce4 <flatcc_builder_table_add_union@@Base+0x8c>
   1fc74:	mov	r7, r3
   1fc78:	mov	r6, r1
   1fc7c:	uxtb	r4, r2
   1fc80:	cmp	r3, #0
   1fc84:	beq	1fc90 <flatcc_builder_table_add_union@@Base+0x38>
   1fc88:	cmp	r4, #0
   1fc8c:	beq	1fd04 <flatcc_builder_table_add_union@@Base+0xac>
   1fc90:	cmp	r7, #0
   1fc94:	beq	1fcb0 <flatcc_builder_table_add_union@@Base+0x58>
   1fc98:	mov	r0, r5
   1fc9c:	mov	r1, r6
   1fca0:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1fca4:	cmp	r0, #0
   1fca8:	beq	1fd44 <flatcc_builder_table_add_union@@Base+0xec>
   1fcac:	str	r7, [r0]
   1fcb0:	sub	r1, r6, #1
   1fcb4:	mov	r0, r5
   1fcb8:	mov	r2, #1
   1fcbc:	mov	r3, #1
   1fcc0:	bl	1fe28 <flatcc_builder_table_add@@Base>
   1fcc4:	cmp	r0, #0
   1fcc8:	beq	1fd24 <flatcc_builder_table_add_union@@Base+0xcc>
   1fccc:	mov	r5, r0
   1fcd0:	mov	r0, r4
   1fcd4:	bl	1ff08 <flatcc_builder_table_add@@Base+0xe0>
   1fcd8:	strb	r4, [r5]
   1fcdc:	mov	r0, #0
   1fce0:	pop	{r4, r5, r6, r7, fp, pc}
   1fce4:	movw	r0, #30195	; 0x75f3
   1fce8:	movt	r0, #2
   1fcec:	movw	r1, #28126	; 0x6dde
   1fcf0:	movt	r1, #2
   1fcf4:	movw	r3, #30949	; 0x78e5
   1fcf8:	movt	r3, #2
   1fcfc:	movw	r2, #1518	; 0x5ee
   1fd00:	bl	12f88 <__assert_fail@plt>
   1fd04:	movw	r0, #31037	; 0x793d
   1fd08:	movt	r0, #2
   1fd0c:	movw	r1, #28126	; 0x6dde
   1fd10:	movt	r1, #2
   1fd14:	movw	r3, #30949	; 0x78e5
   1fd18:	movt	r3, #2
   1fd1c:	movw	r2, #1519	; 0x5ef
   1fd20:	bl	12f88 <__assert_fail@plt>
   1fd24:	movw	r0, #31081	; 0x7969
   1fd28:	movt	r0, #2
   1fd2c:	movw	r1, #28126	; 0x6dde
   1fd30:	movt	r1, #2
   1fd34:	movw	r3, #30949	; 0x78e5
   1fd38:	movt	r3, #2
   1fd3c:	movw	r2, #1526	; 0x5f6
   1fd40:	bl	12f88 <__assert_fail@plt>
   1fd44:	movw	r0, #31071	; 0x795f
   1fd48:	movt	r0, #2
   1fd4c:	movw	r1, #28126	; 0x6dde
   1fd50:	movt	r1, #2
   1fd54:	movw	r3, #30949	; 0x78e5
   1fd58:	movt	r3, #2
   1fd5c:	movw	r2, #1522	; 0x5f2
   1fd60:	bl	12f88 <__assert_fail@plt>

0001fd64 <flatcc_builder_table_add_offset@@Base>:
   1fd64:	push	{fp, lr}
   1fd68:	mov	fp, sp
   1fd6c:	ldr	r2, [r0, #32]
   1fd70:	ldrh	r2, [r2, #14]
   1fd74:	cmp	r2, #3
   1fd78:	bne	1fdc8 <flatcc_builder_table_add_offset@@Base+0x64>
   1fd7c:	movw	r2, #32765	; 0x7ffd
   1fd80:	cmp	r1, r2
   1fd84:	bcs	1fde8 <flatcc_builder_table_add_offset@@Base+0x84>
   1fd88:	ldr	r2, [r0, #4]
   1fd8c:	add	r2, r2, r1, lsl #1
   1fd90:	ldrh	r2, [r2]
   1fd94:	cmp	r2, #0
   1fd98:	bne	1fe08 <flatcc_builder_table_add_offset@@Base+0xa4>
   1fd9c:	ldr	r2, [r0, #12]
   1fda0:	eor	r2, r2, r1
   1fda4:	movw	r3, #31153	; 0x79b1
   1fda8:	movt	r3, #40503	; 0x9e37
   1fdac:	mul	r2, r2, r3
   1fdb0:	eor	r2, r2, #4
   1fdb4:	mul	r2, r2, r3
   1fdb8:	str	r2, [r0, #12]
   1fdbc:	uxth	r1, r1
   1fdc0:	pop	{fp, lr}
   1fdc4:	b	20730 <flatcc_builder_table_add_copy@@Base+0x40>
   1fdc8:	movw	r0, #30195	; 0x75f3
   1fdcc:	movt	r0, #2
   1fdd0:	movw	r1, #28126	; 0x6dde
   1fdd4:	movt	r1, #2
   1fdd8:	movw	r3, #31975	; 0x7ce7
   1fddc:	movt	r3, #2
   1fde0:	movw	r2, #1811	; 0x713
   1fde4:	bl	12f88 <__assert_fail@plt>
   1fde8:	movw	r0, #31847	; 0x7c67
   1fdec:	movt	r0, #2
   1fdf0:	movw	r1, #28126	; 0x6dde
   1fdf4:	movt	r1, #2
   1fdf8:	movw	r3, #31975	; 0x7ce7
   1fdfc:	movt	r3, #2
   1fe00:	movw	r2, #1812	; 0x714
   1fe04:	bl	12f88 <__assert_fail@plt>
   1fe08:	movw	r0, #32644	; 0x7f84
   1fe0c:	movt	r0, #2
   1fe10:	movw	r1, #28126	; 0x6dde
   1fe14:	movt	r1, #2
   1fe18:	movw	r3, #31975	; 0x7ce7
   1fe1c:	movt	r3, #2
   1fe20:	movw	r2, #1819	; 0x71b
   1fe24:	bl	12f88 <__assert_fail@plt>

0001fe28 <flatcc_builder_table_add@@Base>:
   1fe28:	push	{fp, lr}
   1fe2c:	mov	fp, sp
   1fe30:	mov	ip, r3
   1fe34:	ldr	r3, [r0, #32]
   1fe38:	ldrh	r3, [r3, #14]
   1fe3c:	cmp	r3, #3
   1fe40:	bne	1fea8 <flatcc_builder_table_add@@Base+0x80>
   1fe44:	movw	r3, #32765	; 0x7ffd
   1fe48:	cmp	r1, r3
   1fe4c:	bcs	1fec8 <flatcc_builder_table_add@@Base+0xa0>
   1fe50:	mov	lr, r2
   1fe54:	ldrh	r3, [r0, #130]	; 0x82
   1fe58:	cmp	r3, ip
   1fe5c:	strhcc	ip, [r0, #130]	; 0x82
   1fe60:	ldr	r3, [r0, #4]
   1fe64:	add	r3, r3, r1, lsl #1
   1fe68:	ldrh	r3, [r3]
   1fe6c:	cmp	r3, #0
   1fe70:	bne	1fee8 <flatcc_builder_table_add@@Base+0xc0>
   1fe74:	ldr	r3, [r0, #12]
   1fe78:	eor	r3, r3, r1
   1fe7c:	movw	r2, #31153	; 0x79b1
   1fe80:	movt	r2, #40503	; 0x9e37
   1fe84:	mul	r3, r3, r2
   1fe88:	eor	r3, r3, lr
   1fe8c:	mul	r2, r3, r2
   1fe90:	str	r2, [r0, #12]
   1fe94:	uxth	r3, r1
   1fe98:	mov	r1, lr
   1fe9c:	mov	r2, ip
   1fea0:	pop	{fp, lr}
   1fea4:	b	20624 <flatcc_builder_string_len@@Base+0xc>
   1fea8:	movw	r0, #30195	; 0x75f3
   1feac:	movt	r0, #2
   1feb0:	movw	r1, #28126	; 0x6dde
   1feb4:	movt	r1, #2
   1feb8:	movw	r3, #31773	; 0x7c1d
   1febc:	movt	r3, #2
   1fec0:	movw	r2, #1773	; 0x6ed
   1fec4:	bl	12f88 <__assert_fail@plt>
   1fec8:	movw	r0, #31847	; 0x7c67
   1fecc:	movt	r0, #2
   1fed0:	movw	r1, #28126	; 0x6dde
   1fed4:	movt	r1, #2
   1fed8:	movw	r3, #31773	; 0x7c1d
   1fedc:	movt	r3, #2
   1fee0:	movw	r2, #1774	; 0x6ee
   1fee4:	bl	12f88 <__assert_fail@plt>
   1fee8:	movw	r0, #32644	; 0x7f84
   1feec:	movt	r0, #2
   1fef0:	movw	r1, #28126	; 0x6dde
   1fef4:	movt	r1, #2
   1fef8:	movw	r3, #31773	; 0x7c1d
   1fefc:	movt	r3, #2
   1ff00:	movw	r2, #1784	; 0x6f8
   1ff04:	bl	12f88 <__assert_fail@plt>
   1ff08:	bx	lr

0001ff0c <flatcc_builder_table_add_union_vector@@Base>:
   1ff0c:	push	{r4, r5, r6, r7, fp, lr}
   1ff10:	add	fp, sp, #16
   1ff14:	mov	r6, r0
   1ff18:	ldr	r0, [r0, #32]
   1ff1c:	ldrh	r0, [r0, #14]
   1ff20:	cmp	r0, #3
   1ff24:	bne	1ff90 <flatcc_builder_table_add_union_vector@@Base+0x84>
   1ff28:	mov	r4, r3
   1ff2c:	mov	r7, r2
   1ff30:	mov	r5, r1
   1ff34:	cmp	r2, #0
   1ff38:	mov	r0, r2
   1ff3c:	movwne	r0, #1
   1ff40:	clz	r1, r3
   1ff44:	lsr	r1, r1, #5
   1ff48:	teq	r1, r0
   1ff4c:	beq	1ffb0 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   1ff50:	cmp	r7, #0
   1ff54:	beq	1ff88 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   1ff58:	sub	r1, r5, #1
   1ff5c:	mov	r0, r6
   1ff60:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1ff64:	cmp	r0, #0
   1ff68:	beq	1ffd0 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   1ff6c:	str	r7, [r0]
   1ff70:	mov	r0, r6
   1ff74:	mov	r1, r5
   1ff78:	bl	1fd64 <flatcc_builder_table_add_offset@@Base>
   1ff7c:	cmp	r0, #0
   1ff80:	beq	1fff0 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   1ff84:	str	r4, [r0]
   1ff88:	mov	r0, #0
   1ff8c:	pop	{r4, r5, r6, r7, fp, pc}
   1ff90:	movw	r0, #30195	; 0x75f3
   1ff94:	movt	r0, #2
   1ff98:	movw	r1, #28126	; 0x6dde
   1ff9c:	movt	r1, #2
   1ffa0:	movw	r3, #31093	; 0x7975
   1ffa4:	movt	r3, #2
   1ffa8:	mov	r2, #1536	; 0x600
   1ffac:	bl	12f88 <__assert_fail@plt>
   1ffb0:	movw	r0, #31192	; 0x79d8
   1ffb4:	movt	r0, #2
   1ffb8:	movw	r1, #28126	; 0x6dde
   1ffbc:	movt	r1, #2
   1ffc0:	movw	r3, #31093	; 0x7975
   1ffc4:	movt	r3, #2
   1ffc8:	movw	r2, #1537	; 0x601
   1ffcc:	bl	12f88 <__assert_fail@plt>
   1ffd0:	movw	r0, #31071	; 0x795f
   1ffd4:	movt	r0, #2
   1ffd8:	movw	r1, #28126	; 0x6dde
   1ffdc:	movt	r1, #2
   1ffe0:	movw	r3, #31093	; 0x7975
   1ffe4:	movt	r3, #2
   1ffe8:	movw	r2, #1540	; 0x604
   1ffec:	bl	12f88 <__assert_fail@plt>
   1fff0:	movw	r0, #31071	; 0x795f
   1fff4:	movt	r0, #2
   1fff8:	movw	r1, #28126	; 0x6dde
   1fffc:	movt	r1, #2
   20000:	movw	r3, #31093	; 0x7975
   20004:	movt	r3, #2
   20008:	movw	r2, #1544	; 0x608
   2000c:	bl	12f88 <__assert_fail@plt>

00020010 <flatcc_builder_create_union_vector@@Base>:
   20010:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20014:	add	fp, sp, #24
   20018:	sub	sp, sp, #16
   2001c:	mov	r7, r3
   20020:	mov	r6, r2
   20024:	mov	r4, r1
   20028:	mov	r5, r0
   2002c:	mov	r0, #0
   20030:	str	r0, [r5]
   20034:	str	r0, [r5, #4]
   20038:	mov	r0, r1
   2003c:	bl	1ede8 <flatcc_builder_start_offset_vector@@Base>
   20040:	cmp	r0, #0
   20044:	beq	20050 <flatcc_builder_create_union_vector@@Base+0x40>
   20048:	sub	sp, fp, #24
   2004c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20050:	mov	r0, r4
   20054:	mov	r1, r7
   20058:	bl	1e934 <flatcc_builder_extend_offset_vector@@Base>
   2005c:	cmp	r0, #0
   20060:	beq	20048 <flatcc_builder_create_union_vector@@Base+0x38>
   20064:	mov	r0, r4
   20068:	mov	r1, r7
   2006c:	bl	1e6ac <flatcc_builder_start_struct@@Base+0x84>
   20070:	cmp	r0, #0
   20074:	beq	20048 <flatcc_builder_create_union_vector@@Base+0x38>
   20078:	mov	r8, r0
   2007c:	mov	r0, r4
   20080:	bl	1fc44 <flatcc_builder_offset_vector_edit@@Base>
   20084:	mov	ip, r0
   20088:	cmp	r7, #0
   2008c:	beq	200bc <flatcc_builder_create_union_vector@@Base+0xac>
   20090:	add	r0, r6, #4
   20094:	mov	r1, r8
   20098:	mov	r2, ip
   2009c:	mov	r6, r7
   200a0:	ldrb	r3, [r0, #-4]
   200a4:	strb	r3, [r1], #1
   200a8:	ldr	r3, [r0]
   200ac:	str	r3, [r2], #4
   200b0:	add	r0, r0, #8
   200b4:	subs	r6, r6, #1
   200b8:	bne	200a0 <flatcc_builder_create_union_vector@@Base+0x90>
   200bc:	str	r7, [sp]
   200c0:	add	r0, sp, #8
   200c4:	mov	r1, r4
   200c8:	mov	r2, r8
   200cc:	mov	r3, ip
   200d0:	bl	200f0 <flatcc_builder_create_union_vector_direct@@Base>
   200d4:	ldr	r0, [sp, #8]
   200d8:	ldr	r1, [sp, #12]
   200dc:	stm	r5, {r0, r1}
   200e0:	mov	r0, r4
   200e4:	bl	1e5bc <flatcc_builder_end_buffer@@Base+0xc8>
   200e8:	sub	sp, fp, #24
   200ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000200f0 <flatcc_builder_create_union_vector_direct@@Base>:
   200f0:	push	{r4, r5, r6, r7, fp, lr}
   200f4:	add	fp, sp, #16
   200f8:	sub	sp, sp, #8
   200fc:	mov	r5, r2
   20100:	mov	r6, r1
   20104:	mov	r4, r0
   20108:	mov	r0, #0
   2010c:	str	r0, [r4]
   20110:	str	r0, [r4, #4]
   20114:	ldr	r7, [fp, #8]
   20118:	mov	r0, r1
   2011c:	mov	r1, r3
   20120:	mov	r2, r7
   20124:	mov	r3, r5
   20128:	bl	1fa2c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   2012c:	str	r0, [r4, #4]
   20130:	cmp	r0, #0
   20134:	beq	20160 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   20138:	mvn	r0, #0
   2013c:	mov	r1, #1
   20140:	str	r1, [sp]
   20144:	str	r0, [sp, #4]
   20148:	mov	r0, r6
   2014c:	mov	r1, r5
   20150:	mov	r2, r7
   20154:	mov	r3, #1
   20158:	bl	1f884 <flatcc_builder_create_vector@@Base>
   2015c:	str	r0, [r4]
   20160:	sub	sp, fp, #16
   20164:	pop	{r4, r5, r6, r7, fp, pc}

00020168 <flatcc_builder_start_union_vector@@Base>:
   20168:	push	{r4, r5, fp, lr}
   2016c:	add	fp, sp, #8
   20170:	mov	r4, r0
   20174:	mov	r1, #4
   20178:	bl	1e3fc <flatcc_builder_start_buffer@@Base+0xbc>
   2017c:	mvn	r5, #0
   20180:	cmp	r0, #0
   20184:	beq	20190 <flatcc_builder_start_union_vector@@Base+0x28>
   20188:	mov	r0, r5
   2018c:	pop	{r4, r5, fp, pc}
   20190:	ldr	r0, [r4, #32]
   20194:	mov	r1, #8
   20198:	str	r1, [r0, #16]
   2019c:	ldr	r0, [r4, #32]
   201a0:	mov	r5, #0
   201a4:	str	r5, [r0, #20]
   201a8:	ldr	r0, [r4, #32]
   201ac:	mov	r1, #7
   201b0:	strh	r1, [r0, #14]
   201b4:	mov	r0, r4
   201b8:	mvn	r1, #3
   201bc:	bl	1e674 <flatcc_builder_start_struct@@Base+0x4c>
   201c0:	mov	r0, r5
   201c4:	pop	{r4, r5, fp, pc}

000201c8 <flatcc_builder_end_union_vector@@Base>:
   201c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   201cc:	add	fp, sp, #24
   201d0:	sub	sp, sp, #16
   201d4:	mov	r9, r0
   201d8:	mov	r0, #0
   201dc:	str	r0, [r9]
   201e0:	str	r0, [r9, #4]
   201e4:	ldr	r0, [r1, #32]
   201e8:	ldrh	r0, [r0, #14]
   201ec:	cmp	r0, #7
   201f0:	bne	20290 <flatcc_builder_end_union_vector@@Base+0xc8>
   201f4:	mov	r4, r1
   201f8:	mov	r0, r1
   201fc:	bl	202b0 <flatcc_builder_union_vector_count@@Base>
   20200:	mov	r6, r0
   20204:	add	r1, r0, r0, lsl #2
   20208:	mov	r0, r4
   2020c:	bl	1e6ac <flatcc_builder_start_struct@@Base+0x84>
   20210:	cmp	r0, #0
   20214:	beq	20288 <flatcc_builder_end_union_vector@@Base+0xc0>
   20218:	mov	r7, r0
   2021c:	add	r8, r0, r6, lsl #2
   20220:	mov	r0, r4
   20224:	bl	202bc <flatcc_builder_union_vector_edit@@Base>
   20228:	cmp	r6, #0
   2022c:	beq	2025c <flatcc_builder_end_union_vector@@Base+0x94>
   20230:	add	r0, r0, #4
   20234:	mov	r1, r8
   20238:	mov	r2, r7
   2023c:	mov	r3, r6
   20240:	ldrb	r5, [r0, #-4]
   20244:	strb	r5, [r1], #1
   20248:	ldr	r5, [r0]
   2024c:	str	r5, [r2], #4
   20250:	add	r0, r0, #8
   20254:	subs	r3, r3, #1
   20258:	bne	20240 <flatcc_builder_end_union_vector@@Base+0x78>
   2025c:	str	r6, [sp]
   20260:	add	r0, sp, #8
   20264:	mov	r1, r4
   20268:	mov	r2, r8
   2026c:	mov	r3, r7
   20270:	bl	200f0 <flatcc_builder_create_union_vector_direct@@Base>
   20274:	ldr	r0, [sp, #8]
   20278:	ldr	r1, [sp, #12]
   2027c:	stm	r9, {r0, r1}
   20280:	mov	r0, r4
   20284:	bl	1e5bc <flatcc_builder_end_buffer@@Base+0xc8>
   20288:	sub	sp, fp, #24
   2028c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20290:	movw	r0, #31232	; 0x7a00
   20294:	movt	r0, #2
   20298:	movw	r1, #28126	; 0x6dde
   2029c:	movt	r1, #2
   202a0:	movw	r3, #31282	; 0x7a32
   202a4:	movt	r3, #2
   202a8:	movw	r2, #1617	; 0x651
   202ac:	bl	12f88 <__assert_fail@plt>

000202b0 <flatcc_builder_union_vector_count@@Base>:
   202b0:	ldr	r0, [r0, #32]
   202b4:	ldr	r0, [r0, #20]
   202b8:	bx	lr

000202bc <flatcc_builder_union_vector_edit@@Base>:
   202bc:	ldr	r0, [r0, #16]
   202c0:	bx	lr

000202c4 <flatcc_builder_extend_union_vector@@Base>:
   202c4:	push	{r4, r5, fp, lr}
   202c8:	add	fp, sp, #8
   202cc:	mov	r5, r1
   202d0:	mov	r4, r0
   202d4:	mvn	r2, #-536870912	; 0xe0000000
   202d8:	bl	1e7b0 <flatcc_builder_extend_vector@@Base+0x44>
   202dc:	cmp	r0, #0
   202e0:	movne	r0, #0
   202e4:	popne	{r4, r5, fp, pc}
   202e8:	lsl	r1, r5, #3
   202ec:	mov	r0, r4
   202f0:	pop	{r4, r5, fp, lr}
   202f4:	b	1e6ac <flatcc_builder_start_struct@@Base+0x84>

000202f8 <flatcc_builder_truncate_union_vector@@Base>:
   202f8:	push	{fp, lr}
   202fc:	mov	fp, sp
   20300:	ldr	r2, [r0, #32]
   20304:	ldrh	r3, [r2, #14]
   20308:	cmp	r3, #7
   2030c:	bne	2033c <flatcc_builder_truncate_union_vector@@Base+0x44>
   20310:	ldr	r3, [r2, #20]
   20314:	cmp	r3, r1
   20318:	bcc	2035c <flatcc_builder_truncate_union_vector@@Base+0x64>
   2031c:	sub	r3, r3, r1
   20320:	str	r3, [r2, #20]
   20324:	ldr	r2, [r0, #32]
   20328:	ldr	r2, [r2, #16]
   2032c:	mul	r1, r2, r1
   20330:	bl	1ec3c <flatcc_builder_truncate_vector@@Base+0x84>
   20334:	mov	r0, #0
   20338:	pop	{fp, pc}
   2033c:	movw	r0, #31232	; 0x7a00
   20340:	movt	r0, #2
   20344:	movw	r1, #28126	; 0x6dde
   20348:	movt	r1, #2
   2034c:	movw	r3, #31365	; 0x7a85
   20350:	movt	r3, #2
   20354:	movw	r2, #1665	; 0x681
   20358:	bl	12f88 <__assert_fail@plt>
   2035c:	movw	r0, #29796	; 0x7464
   20360:	movt	r0, #2
   20364:	movw	r1, #28126	; 0x6dde
   20368:	movt	r1, #2
   2036c:	movw	r3, #31365	; 0x7a85
   20370:	movt	r3, #2
   20374:	movw	r2, #1666	; 0x682
   20378:	bl	12f88 <__assert_fail@plt>

0002037c <flatcc_builder_union_vector_push@@Base>:
   2037c:	push	{r4, r5, r6, sl, fp, lr}
   20380:	add	fp, sp, #16
   20384:	mov	r4, r2
   20388:	mov	r5, r1
   2038c:	ldr	r1, [r0, #32]
   20390:	ldrh	r2, [r1, #14]
   20394:	cmp	r2, #7
   20398:	bne	203d4 <flatcc_builder_union_vector_push@@Base+0x58>
   2039c:	ldr	r2, [r1, #20]
   203a0:	mov	r6, #0
   203a4:	cmn	r2, #-536870911	; 0xe0000001
   203a8:	beq	203cc <flatcc_builder_union_vector_push@@Base+0x50>
   203ac:	add	r2, r2, #1
   203b0:	str	r2, [r1, #20]
   203b4:	mov	r1, #8
   203b8:	bl	1e6ac <flatcc_builder_start_struct@@Base+0x84>
   203bc:	cmp	r0, #0
   203c0:	strne	r5, [r0]
   203c4:	strne	r4, [r0, #4]
   203c8:	movne	r6, r0
   203cc:	mov	r0, r6
   203d0:	pop	{r4, r5, r6, sl, fp, pc}
   203d4:	movw	r0, #31232	; 0x7a00
   203d8:	movt	r0, #2
   203dc:	movw	r1, #28126	; 0x6dde
   203e0:	movt	r1, #2
   203e4:	movw	r3, #31434	; 0x7aca
   203e8:	movt	r3, #2
   203ec:	movw	r2, #1677	; 0x68d
   203f0:	bl	12f88 <__assert_fail@plt>

000203f4 <flatcc_builder_append_union_vector@@Base>:
   203f4:	push	{r4, r5, r6, sl, fp, lr}
   203f8:	add	fp, sp, #16
   203fc:	mov	r6, r0
   20400:	ldr	r0, [r0, #32]
   20404:	ldrh	r0, [r0, #14]
   20408:	cmp	r0, #7
   2040c:	bne	2044c <flatcc_builder_append_union_vector@@Base+0x58>
   20410:	mov	r5, r2
   20414:	mov	r4, r1
   20418:	mov	r0, r6
   2041c:	mov	r1, r2
   20420:	mvn	r2, #-536870912	; 0xe0000000
   20424:	bl	1e7b0 <flatcc_builder_extend_vector@@Base+0x44>
   20428:	cmp	r0, #0
   2042c:	beq	20438 <flatcc_builder_append_union_vector@@Base+0x44>
   20430:	mov	r0, #0
   20434:	pop	{r4, r5, r6, sl, fp, pc}
   20438:	lsl	r2, r5, #3
   2043c:	mov	r0, r6
   20440:	mov	r1, r4
   20444:	pop	{r4, r5, r6, sl, fp, lr}
   20448:	b	1e878 <flatcc_builder_vector_push@@Base+0x80>
   2044c:	movw	r0, #31232	; 0x7a00
   20450:	movt	r0, #2
   20454:	movw	r1, #28126	; 0x6dde
   20458:	movt	r1, #2
   2045c:	movw	r3, #31543	; 0x7b37
   20460:	movt	r3, #2
   20464:	movw	r2, #1692	; 0x69c
   20468:	bl	12f88 <__assert_fail@plt>

0002046c <flatcc_builder_create_string@@Base>:
   2046c:	push	{r4, r5, r6, r7, fp, lr}
   20470:	add	fp, sp, #16
   20474:	sub	sp, sp, #80	; 0x50
   20478:	mov	r5, r2
   2047c:	mov	r6, r1
   20480:	mov	r4, r0
   20484:	mov	r0, r2
   20488:	bl	1e000 <flatcc_builder_embed_buffer@@Base+0x1dc>
   2048c:	str	r5, [fp, #-20]	; 0xffffffec
   20490:	add	r1, r5, #1
   20494:	mov	r7, #4
   20498:	mov	r0, r4
   2049c:	mov	r2, #4
   204a0:	bl	1dfec <flatcc_builder_embed_buffer@@Base+0x1c8>
   204a4:	str	r7, [sp, #16]
   204a8:	sub	r1, fp, #20
   204ac:	str	r1, [sp, #12]
   204b0:	str	r7, [sp, #4]
   204b4:	mov	r1, #1
   204b8:	str	r1, [sp, #8]
   204bc:	add	r0, r0, #1
   204c0:	cmp	r5, #0
   204c4:	strne	r5, [sp, #24]
   204c8:	strne	r6, [sp, #20]
   204cc:	movne	r1, #2
   204d0:	strne	r1, [sp, #8]
   204d4:	addne	r1, r5, #4
   204d8:	strne	r1, [sp, #4]
   204dc:	cmp	r0, #0
   204e0:	beq	20510 <flatcc_builder_create_string@@Base+0xa4>
   204e4:	ldmib	sp, {r1, r2}
   204e8:	add	r1, r1, r0
   204ec:	str	r1, [sp, #4]
   204f0:	add	r1, sp, #4
   204f4:	add	r1, r1, r2, lsl #3
   204f8:	movw	r3, #27596	; 0x6bcc
   204fc:	movt	r3, #2
   20500:	str	r3, [r1, #8]
   20504:	str	r0, [r1, #12]
   20508:	add	r0, r2, #1
   2050c:	str	r0, [sp, #8]
   20510:	add	r1, sp, #4
   20514:	mov	r0, r4
   20518:	bl	1e004 <flatcc_builder_embed_buffer@@Base+0x1e0>
   2051c:	sub	sp, fp, #16
   20520:	pop	{r4, r5, r6, r7, fp, pc}

00020524 <flatcc_builder_create_string_str@@Base>:
   20524:	push	{r4, r5, fp, lr}
   20528:	add	fp, sp, #8
   2052c:	mov	r4, r1
   20530:	mov	r5, r0
   20534:	mov	r0, r1
   20538:	bl	12f1c <strlen@plt>
   2053c:	mov	r2, r0
   20540:	mov	r0, r5
   20544:	mov	r1, r4
   20548:	pop	{r4, r5, fp, lr}
   2054c:	b	2046c <flatcc_builder_create_string@@Base>

00020550 <flatcc_builder_create_string_strn@@Base>:
   20550:	push	{r4, r5, fp, lr}
   20554:	add	fp, sp, #8
   20558:	mov	r4, r1
   2055c:	mov	r5, r0
   20560:	mov	r0, r1
   20564:	mov	r1, r2
   20568:	bl	1eb8c <flatcc_builder_append_string_strn@@Base+0x30>
   2056c:	mov	r2, r0
   20570:	mov	r0, r5
   20574:	mov	r1, r4
   20578:	pop	{r4, r5, fp, lr}
   2057c:	b	2046c <flatcc_builder_create_string@@Base>

00020580 <flatcc_builder_end_string@@Base>:
   20580:	push	{r4, r5, fp, lr}
   20584:	add	fp, sp, #8
   20588:	mov	r4, r0
   2058c:	ldr	r0, [r0, #32]
   20590:	ldrh	r1, [r0, #14]
   20594:	cmp	r1, #6
   20598:	bne	205d0 <flatcc_builder_end_string@@Base+0x50>
   2059c:	ldr	r2, [r4, #20]
   205a0:	ldr	r0, [r0, #20]
   205a4:	cmp	r0, r2
   205a8:	bne	205f0 <flatcc_builder_end_string@@Base+0x70>
   205ac:	ldr	r1, [r4, #16]
   205b0:	mov	r0, r4
   205b4:	bl	2046c <flatcc_builder_create_string@@Base>
   205b8:	mov	r5, r0
   205bc:	cmp	r0, #0
   205c0:	movne	r0, r4
   205c4:	blne	1e5bc <flatcc_builder_end_buffer@@Base+0xc8>
   205c8:	mov	r0, r5
   205cc:	pop	{r4, r5, fp, pc}
   205d0:	movw	r0, #29443	; 0x7303
   205d4:	movt	r0, #2
   205d8:	movw	r1, #28126	; 0x6dde
   205dc:	movt	r1, #2
   205e0:	movw	r3, #31670	; 0x7bb6
   205e4:	movt	r3, #2
   205e8:	movw	r2, #1732	; 0x6c4
   205ec:	bl	12f88 <__assert_fail@plt>
   205f0:	movw	r0, #31737	; 0x7bf9
   205f4:	movt	r0, #2
   205f8:	movw	r1, #28126	; 0x6dde
   205fc:	movt	r1, #2
   20600:	movw	r3, #31670	; 0x7bb6
   20604:	movt	r3, #2
   20608:	movw	r2, #1733	; 0x6c5
   2060c:	bl	12f88 <__assert_fail@plt>

00020610 <flatcc_builder_string_edit@@Base>:
   20610:	ldr	r0, [r0, #16]
   20614:	bx	lr

00020618 <flatcc_builder_string_len@@Base>:
   20618:	ldr	r0, [r0, #32]
   2061c:	ldr	r0, [r0, #20]
   20620:	bx	lr
   20624:	push	{r4, r5, r6, sl, fp, lr}
   20628:	add	fp, sp, #16
   2062c:	mov	r5, r3
   20630:	mov	r4, r0
   20634:	ldr	r0, [r0, #20]
   20638:	ldr	r3, [r4, #24]
   2063c:	add	r0, r2, r0
   20640:	sub	r0, r0, #1
   20644:	rsb	r2, r2, #0
   20648:	and	r6, r0, r2
   2064c:	add	r0, r6, r1
   20650:	str	r0, [r4, #20]
   20654:	cmp	r0, r3
   20658:	bcc	2067c <flatcc_builder_string_len@@Base+0x64>
   2065c:	add	r1, r0, #1
   20660:	mov	r0, r4
   20664:	movw	r2, #65532	; 0xfffc
   20668:	bl	20ac8 <flatcc_builder_get_emit_context@@Base+0x18>
   2066c:	mov	r1, r0
   20670:	mov	r0, #0
   20674:	cmp	r1, #0
   20678:	popne	{r4, r5, r6, sl, fp, pc}
   2067c:	ldr	r0, [r4, #4]
   20680:	add	r0, r0, r5, lsl #1
   20684:	add	r1, r6, #4
   20688:	strh	r1, [r0]
   2068c:	ldrh	r0, [r4, #8]
   20690:	cmp	r0, r5
   20694:	addls	r0, r5, #1
   20698:	strhls	r0, [r4, #8]
   2069c:	ldr	r0, [r4, #16]
   206a0:	add	r0, r0, r6
   206a4:	pop	{r4, r5, r6, sl, fp, pc}

000206a8 <flatcc_builder_table_edit@@Base>:
   206a8:	push	{fp, lr}
   206ac:	mov	fp, sp
   206b0:	ldr	r2, [r0, #32]
   206b4:	ldrh	r2, [r2, #14]
   206b8:	cmp	r2, #3
   206bc:	ldreq	r2, [r0, #16]
   206c0:	ldreq	r0, [r0, #20]
   206c4:	addeq	r0, r2, r0
   206c8:	subeq	r0, r0, r1
   206cc:	popeq	{fp, pc}
   206d0:	movw	r0, #30195	; 0x75f3
   206d4:	movt	r0, #2
   206d8:	movw	r1, #28126	; 0x6dde
   206dc:	movt	r1, #2
   206e0:	movw	r3, #31915	; 0x7cab
   206e4:	movt	r3, #2
   206e8:	movw	r2, #1794	; 0x702
   206ec:	bl	12f88 <__assert_fail@plt>

000206f0 <flatcc_builder_table_add_copy@@Base>:
   206f0:	push	{r4, r5, r6, sl, fp, lr}
   206f4:	add	fp, sp, #16
   206f8:	mov	r4, r3
   206fc:	mov	r5, r2
   20700:	ldr	r3, [fp, #8]
   20704:	mov	r2, r4
   20708:	bl	1fe28 <flatcc_builder_table_add@@Base>
   2070c:	mov	r6, r0
   20710:	cmp	r0, #0
   20714:	beq	20728 <flatcc_builder_table_add_copy@@Base+0x38>
   20718:	mov	r0, r6
   2071c:	mov	r1, r5
   20720:	mov	r2, r4
   20724:	bl	12eb0 <memcpy@plt>
   20728:	mov	r0, r6
   2072c:	pop	{r4, r5, r6, sl, fp, pc}
   20730:	push	{r4, r5, r6, r7, fp, lr}
   20734:	add	fp, sp, #16
   20738:	mov	r5, r1
   2073c:	mov	r4, r0
   20740:	ldr	r0, [r0, #20]
   20744:	ldr	r1, [r4, #24]
   20748:	add	r0, r0, #3
   2074c:	bic	r7, r0, #3
   20750:	add	r6, r7, #4
   20754:	str	r6, [r4, #20]
   20758:	cmp	r6, r1
   2075c:	bls	20780 <flatcc_builder_table_add_copy@@Base+0x90>
   20760:	mov	r0, r4
   20764:	mov	r1, r6
   20768:	movw	r2, #65532	; 0xfffc
   2076c:	bl	20ac8 <flatcc_builder_get_emit_context@@Base+0x18>
   20770:	mov	r1, r0
   20774:	mov	r0, #0
   20778:	cmp	r1, #0
   2077c:	popne	{r4, r5, r6, r7, fp, pc}
   20780:	ldr	r0, [r4, #4]
   20784:	add	r0, r0, r5, lsl #1
   20788:	strh	r6, [r0]
   2078c:	ldrh	r0, [r4, #8]
   20790:	cmp	r0, r5
   20794:	addls	r0, r5, #1
   20798:	strhls	r0, [r4, #8]
   2079c:	ldr	r0, [r4]
   207a0:	add	r1, r0, #2
   207a4:	str	r1, [r4]
   207a8:	strh	r7, [r0]
   207ac:	ldr	r0, [r4, #16]
   207b0:	add	r0, r0, r7
   207b4:	pop	{r4, r5, r6, r7, fp, pc}

000207b8 <flatcc_builder_push_buffer_alignment@@Base>:
   207b8:	ldrh	r1, [r0, #128]	; 0x80
   207bc:	mov	r2, #4
   207c0:	strh	r2, [r0, #128]	; 0x80
   207c4:	mov	r0, r1
   207c8:	bx	lr

000207cc <flatcc_builder_pop_buffer_alignment@@Base>:
   207cc:	b	1e264 <flatcc_builder_create_buffer@@Base+0x1cc>

000207d0 <flatcc_builder_get_buffer_alignment@@Base>:
   207d0:	ldrh	r0, [r0, #128]	; 0x80
   207d4:	bx	lr

000207d8 <flatcc_builder_set_vtable_clustering@@Base>:
   207d8:	clz	r1, r1
   207dc:	lsr	r1, r1, #5
   207e0:	str	r1, [r0, #180]	; 0xb4
   207e4:	bx	lr

000207e8 <flatcc_builder_set_block_align@@Base>:
   207e8:	strh	r1, [r0, #132]	; 0x84
   207ec:	bx	lr

000207f0 <flatcc_builder_get_level@@Base>:
   207f0:	ldr	r0, [r0, #156]	; 0x9c
   207f4:	bx	lr

000207f8 <flatcc_builder_set_max_level@@Base>:
   207f8:	str	r1, [r0, #176]	; 0xb0
   207fc:	ldr	r2, [r0, #160]	; 0xa0
   20800:	cmp	r2, r1
   20804:	strlt	r1, [r0, #160]	; 0xa0
   20808:	bx	lr

0002080c <flatcc_builder_get_buffer_size@@Base>:
   2080c:	ldr	r1, [r0, #136]	; 0x88
   20810:	ldr	r0, [r0, #140]	; 0x8c
   20814:	sub	r0, r0, r1
   20818:	bx	lr

0002081c <flatcc_builder_get_buffer_start@@Base>:
   2081c:	ldr	r0, [r0, #136]	; 0x88
   20820:	bx	lr

00020824 <flatcc_builder_get_buffer_end@@Base>:
   20824:	ldr	r0, [r0, #140]	; 0x8c
   20828:	bx	lr

0002082c <flatcc_builder_set_vtable_cache_limit@@Base>:
   2082c:	str	r1, [r0, #172]	; 0xac
   20830:	bx	lr

00020834 <flatcc_builder_set_identifier@@Base>:
   20834:	movw	r2, #27596	; 0x6bcc
   20838:	movt	r2, #2
   2083c:	cmp	r1, #0
   20840:	movne	r2, r1
   20844:	ldr	r1, [r2]
   20848:	str	r1, [r0, #168]	; 0xa8
   2084c:	bx	lr

00020850 <flatcc_builder_get_type@@Base>:
   20850:	ldr	r0, [r0, #32]
   20854:	cmp	r0, #0
   20858:	ldrhne	r0, [r0, #14]
   2085c:	moveq	r0, #0
   20860:	bx	lr

00020864 <flatcc_builder_get_type_at@@Base>:
   20864:	mov	r2, r0
   20868:	mov	r0, #0
   2086c:	cmp	r1, #1
   20870:	blt	20894 <flatcc_builder_get_type_at@@Base+0x30>
   20874:	ldr	r3, [r2, #156]	; 0x9c
   20878:	cmp	r3, r1
   2087c:	bxlt	lr
   20880:	sub	r0, r1, r3
   20884:	add	r0, r0, r0, lsl #3
   20888:	ldr	r1, [r2, #32]
   2088c:	add	r0, r1, r0, lsl #2
   20890:	ldrh	r0, [r0, #14]
   20894:	bx	lr

00020898 <flatcc_builder_get_direct_buffer@@Base>:
   20898:	ldr	r2, [r0, #184]	; 0xb8
   2089c:	cmp	r2, #0
   208a0:	beq	208ac <flatcc_builder_get_direct_buffer@@Base+0x14>
   208a4:	add	r0, r0, #188	; 0xbc
   208a8:	b	208c0 <flatcc_builder_get_direct_buffer@@Base+0x28>
   208ac:	cmp	r1, #0
   208b0:	movne	r0, #0
   208b4:	strne	r0, [r1]
   208b8:	mov	r0, #0
   208bc:	bx	lr
   208c0:	ldm	r0, {r2, r3}
   208c4:	cmp	r2, r3
   208c8:	beq	208dc <flatcc_builder_get_direct_buffer@@Base+0x44>
   208cc:	mov	r0, #0
   208d0:	cmp	r1, #0
   208d4:	strne	r0, [r1]
   208d8:	bx	lr
   208dc:	cmp	r1, #0
   208e0:	ldrne	r2, [r0, #24]
   208e4:	strne	r2, [r1]
   208e8:	ldr	r0, [r0, #8]
   208ec:	bx	lr

000208f0 <flatcc_builder_copy_buffer@@Base>:
   208f0:	push	{fp, lr}
   208f4:	mov	fp, sp
   208f8:	ldr	r3, [r0, #184]	; 0xb8
   208fc:	cmp	r3, #0
   20900:	beq	20934 <flatcc_builder_copy_buffer@@Base+0x44>
   20904:	add	r0, r0, #188	; 0xbc
   20908:	bl	21000 <flatcc_emitter_copy_buffer@@Base>
   2090c:	cmp	r0, #0
   20910:	popne	{fp, pc}
   20914:	movw	r0, #11181	; 0x2bad
   20918:	movt	r0, #2
   2091c:	movw	r1, #28126	; 0x6dde
   20920:	movt	r1, #2
   20924:	movw	r3, #32054	; 0x7d36
   20928:	movt	r3, #2
   2092c:	movw	r2, #1926	; 0x786
   20930:	bl	12f88 <__assert_fail@plt>
   20934:	mov	r0, #0
   20938:	pop	{fp, pc}

0002093c <flatcc_builder_finalize_buffer@@Base>:
   2093c:	push	{r4, r5, r6, sl, fp, lr}
   20940:	add	fp, sp, #16
   20944:	mov	r6, r1
   20948:	mov	r4, r0
   2094c:	bl	2080c <flatcc_builder_get_buffer_size@@Base>
   20950:	mov	r5, r0
   20954:	cmp	r6, #0
   20958:	strne	r5, [r6]
   2095c:	mov	r0, r5
   20960:	bl	12eec <malloc@plt>
   20964:	cmp	r0, #0
   20968:	beq	209ac <flatcc_builder_finalize_buffer@@Base+0x70>
   2096c:	mov	r6, r0
   20970:	mov	r0, r4
   20974:	mov	r1, r6
   20978:	mov	r2, r5
   2097c:	bl	208f0 <flatcc_builder_copy_buffer@@Base>
   20980:	cmp	r0, #0
   20984:	movne	r0, r6
   20988:	popne	{r4, r5, r6, sl, fp, pc}
   2098c:	movw	r0, #32644	; 0x7f84
   20990:	movt	r0, #2
   20994:	movw	r1, #28126	; 0x6dde
   20998:	movt	r1, #2
   2099c:	movw	r3, #32123	; 0x7d7b
   209a0:	movt	r3, #2
   209a4:	movw	r2, #1948	; 0x79c
   209a8:	bl	12f88 <__assert_fail@plt>
   209ac:	movw	r0, #32644	; 0x7f84
   209b0:	movt	r0, #2
   209b4:	movw	r1, #28126	; 0x6dde
   209b8:	movt	r1, #2
   209bc:	movw	r3, #32123	; 0x7d7b
   209c0:	movt	r3, #2
   209c4:	movw	r2, #1944	; 0x798
   209c8:	bl	12f88 <__assert_fail@plt>

000209cc <flatcc_builder_finalize_aligned_buffer@@Base>:
   209cc:	push	{r4, r5, r6, r7, fp, lr}
   209d0:	add	fp, sp, #16
   209d4:	mov	r4, r1
   209d8:	mov	r5, r0
   209dc:	bl	2080c <flatcc_builder_get_buffer_size@@Base>
   209e0:	mov	r6, r0
   209e4:	cmp	r4, #0
   209e8:	strne	r6, [r4]
   209ec:	mov	r0, r5
   209f0:	bl	207d0 <flatcc_builder_get_buffer_alignment@@Base>
   209f4:	add	r1, r6, r0
   209f8:	sub	r1, r1, #1
   209fc:	rsb	r2, r0, #0
   20a00:	and	r7, r1, r2
   20a04:	mov	r1, r7
   20a08:	bl	20a54 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   20a0c:	cmp	r0, #0
   20a10:	beq	20a40 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   20a14:	mov	r6, r0
   20a18:	mov	r0, r5
   20a1c:	mov	r1, r6
   20a20:	mov	r2, r7
   20a24:	bl	208f0 <flatcc_builder_copy_buffer@@Base>
   20a28:	cmp	r0, #0
   20a2c:	beq	20a38 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   20a30:	mov	r0, r6
   20a34:	pop	{r4, r5, r6, r7, fp, pc}
   20a38:	mov	r0, r6
   20a3c:	bl	12ea4 <free@plt>
   20a40:	mov	r6, #0
   20a44:	cmp	r4, #0
   20a48:	strne	r6, [r4]
   20a4c:	mov	r0, r6
   20a50:	pop	{r4, r5, r6, r7, fp, pc}
   20a54:	push	{fp, lr}
   20a58:	mov	fp, sp
   20a5c:	sub	sp, sp, #8
   20a60:	mov	r2, r1
   20a64:	mov	r1, r0
   20a68:	mov	r0, #0
   20a6c:	str	r0, [sp, #4]
   20a70:	cmp	r1, #4
   20a74:	movls	r1, #4
   20a78:	add	r0, sp, #4
   20a7c:	bl	12f34 <posix_memalign@plt>
   20a80:	cmp	r0, #0
   20a84:	ldrne	r0, [sp, #4]
   20a88:	cmpne	r0, #0
   20a8c:	beq	20a9c <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   20a90:	bl	12ea4 <free@plt>
   20a94:	mov	r0, #0
   20a98:	str	r0, [sp, #4]
   20a9c:	ldr	r0, [sp, #4]
   20aa0:	mov	sp, fp
   20aa4:	pop	{fp, pc}

00020aa8 <flatcc_builder_aligned_alloc@@Base>:
   20aa8:	b	20a54 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

00020aac <flatcc_builder_aligned_free@@Base>:
   20aac:	b	12ea4 <free@plt>

00020ab0 <flatcc_builder_get_emit_context@@Base>:
   20ab0:	ldr	r0, [r0, #36]	; 0x24
   20ab4:	bx	lr
   20ab8:	ldr	r0, [r0, #140]	; 0x8c
   20abc:	sub	r1, r1, #1
   20ac0:	and	r0, r0, r1
   20ac4:	bx	lr
   20ac8:	push	{r4, r5, r6, sl, fp, lr}
   20acc:	add	fp, sp, #16
   20ad0:	sub	sp, sp, #8
   20ad4:	mov	r6, r2
   20ad8:	mov	r5, r0
   20adc:	ldr	r2, [r0, #28]
   20ae0:	ldr	r0, [r0, #40]	; 0x28
   20ae4:	ldr	r4, [r5, #48]	; 0x30
   20ae8:	mov	r3, #1
   20aec:	str	r3, [sp]
   20af0:	add	r2, r2, r1
   20af4:	add	r1, r5, #60	; 0x3c
   20af8:	mov	r3, #1
   20afc:	blx	r4
   20b00:	mov	r1, r0
   20b04:	mvn	r0, #0
   20b08:	cmp	r1, #0
   20b0c:	beq	20b18 <flatcc_builder_get_emit_context@@Base+0x68>
   20b10:	sub	sp, fp, #16
   20b14:	pop	{r4, r5, r6, sl, fp, pc}
   20b18:	mov	r0, r5
   20b1c:	mov	r1, r6
   20b20:	bl	1e674 <flatcc_builder_start_struct@@Base+0x4c>
   20b24:	mov	r0, #0
   20b28:	sub	sp, fp, #16
   20b2c:	pop	{r4, r5, r6, sl, fp, pc}
   20b30:	push	{r4, r5, r6, sl, fp, lr}
   20b34:	add	fp, sp, #16
   20b38:	sub	sp, sp, #8
   20b3c:	mov	r4, r0
   20b40:	ldr	r0, [r0, #124]	; 0x7c
   20b44:	cmp	r0, #0
   20b48:	bne	20be8 <flatcc_builder_get_emit_context@@Base+0x138>
   20b4c:	mov	r0, #0
   20b50:	str	r0, [sp]
   20b54:	mov	r6, #16
   20b58:	mov	r0, r4
   20b5c:	mov	r1, #6
   20b60:	mov	r2, #0
   20b64:	mov	r3, #16
   20b68:	bl	1dc90 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   20b6c:	mvn	r5, #0
   20b70:	cmp	r0, #0
   20b74:	beq	20bdc <flatcc_builder_get_emit_context@@Base+0x12c>
   20b78:	add	r1, r4, #92	; 0x5c
   20b7c:	str	r6, [r4, #124]	; 0x7c
   20b80:	ldr	r0, [r4, #40]	; 0x28
   20b84:	ldr	ip, [r4, #48]	; 0x30
   20b88:	mov	r2, #5
   20b8c:	str	r2, [sp]
   20b90:	mov	r6, #256	; 0x100
   20b94:	mov	r2, #256	; 0x100
   20b98:	mov	r3, #1
   20b9c:	blx	ip
   20ba0:	cmp	r0, #0
   20ba4:	bne	20bdc <flatcc_builder_get_emit_context@@Base+0x12c>
   20ba8:	ldr	r0, [r4, #96]	; 0x60
   20bac:	mov	r1, r6
   20bb0:	lsl	r6, r6, #1
   20bb4:	cmp	r0, r1, lsl #1
   20bb8:	bcs	20bac <flatcc_builder_get_emit_context@@Base+0xfc>
   20bbc:	lsr	r1, r1, #2
   20bc0:	mvn	r0, #0
   20bc4:	mov	r2, #1
   20bc8:	add	r0, r0, #1
   20bcc:	cmp	r1, r2, lsl r0
   20bd0:	bhi	20bc8 <flatcc_builder_get_emit_context@@Base+0x118>
   20bd4:	str	r0, [r4, #116]	; 0x74
   20bd8:	mov	r5, #0
   20bdc:	mov	r0, r5
   20be0:	sub	sp, fp, #16
   20be4:	pop	{r4, r5, r6, sl, fp, pc}
   20be8:	movw	r0, #32584	; 0x7f48
   20bec:	movt	r0, #2
   20bf0:	movw	r1, #28126	; 0x6dde
   20bf4:	movt	r1, #2
   20bf8:	movw	r3, #32599	; 0x7f57
   20bfc:	movt	r3, #2
   20c00:	movw	r2, #342	; 0x156
   20c04:	bl	12f88 <__assert_fail@plt>

00020c08 <flatcc_emitter_recycle_page@@Base>:
   20c08:	ldr	ip, [r0]
   20c0c:	mvn	r2, #0
   20c10:	cmp	ip, r1
   20c14:	beq	20c5c <flatcc_emitter_recycle_page@@Base+0x54>
   20c18:	ldr	r3, [r0, #4]
   20c1c:	cmp	r3, r1
   20c20:	beq	20c5c <flatcc_emitter_recycle_page@@Base+0x54>
   20c24:	ldr	r2, [r1, #2944]	; 0xb80
   20c28:	ldr	r3, [r1, #2948]	; 0xb84
   20c2c:	str	r3, [r2, #2948]	; 0xb84
   20c30:	ldr	r2, [r1, #2944]	; 0xb80
   20c34:	ldr	r3, [r1, #2948]	; 0xb84
   20c38:	str	r2, [r3, #2944]	; 0xb80
   20c3c:	ldr	r2, [ip, #2948]	; 0xb84
   20c40:	str	r2, [r1, #2948]	; 0xb84
   20c44:	ldr	r0, [r0]
   20c48:	str	r0, [r1, #2944]	; 0xb80
   20c4c:	str	r1, [r2, #2944]	; 0xb80
   20c50:	ldr	r0, [r1, #2944]	; 0xb80
   20c54:	str	r1, [r0, #2948]	; 0xb84
   20c58:	mov	r2, #0
   20c5c:	mov	r0, r2
   20c60:	bx	lr

00020c64 <flatcc_emitter_reset@@Base>:
   20c64:	push	{r4, sl, fp, lr}
   20c68:	add	fp, sp, #8
   20c6c:	mov	r4, r0
   20c70:	ldr	r0, [r0]
   20c74:	cmp	r0, #0
   20c78:	beq	20d20 <flatcc_emitter_reset@@Base+0xbc>
   20c7c:	mov	r1, #1472	; 0x5c0
   20c80:	add	r2, r0, #1472	; 0x5c0
   20c84:	stmib	r4, {r0, r2}
   20c88:	str	r1, [r4, #12]
   20c8c:	str	r2, [r4, #16]
   20c90:	str	r1, [r4, #20]
   20c94:	movw	r1, #64064	; 0xfa40
   20c98:	movt	r1, #65535	; 0xffff
   20c9c:	str	r1, [r0, #2952]	; 0xb88
   20ca0:	ldr	r0, [r4, #32]
   20ca4:	cmp	r0, #0
   20ca8:	bne	20cb4 <flatcc_emitter_reset@@Base+0x50>
   20cac:	ldr	r0, [r4, #24]
   20cb0:	str	r0, [r4, #32]
   20cb4:	add	r2, r4, #24
   20cb8:	ldm	r2, {r0, r1, r2}
   20cbc:	mov	r3, #0
   20cc0:	str	r3, [r4, #24]
   20cc4:	add	r2, r2, r2, lsl #1
   20cc8:	lsr	r2, r2, #2
   20ccc:	add	r0, r2, r0, lsr #2
   20cd0:	str	r0, [r4, #32]
   20cd4:	cmp	r1, r0, lsl #1
   20cd8:	popls	{r4, sl, fp, pc}
   20cdc:	ldr	r2, [r4]
   20ce0:	ldr	r1, [r4, #4]
   20ce4:	ldr	r0, [r1, #2944]	; 0xb80
   20ce8:	cmp	r0, r2
   20cec:	beq	20d20 <flatcc_emitter_reset@@Base+0xbc>
   20cf0:	ldr	r2, [r0, #2944]	; 0xb80
   20cf4:	str	r2, [r1, #2944]	; 0xb80
   20cf8:	ldr	r1, [r0, #2944]	; 0xb80
   20cfc:	ldr	r2, [r4, #4]
   20d00:	str	r2, [r1, #2948]	; 0xb84
   20d04:	bl	12ea4 <free@plt>
   20d08:	ldr	r0, [r4, #28]
   20d0c:	ldr	r1, [r4, #32]
   20d10:	sub	r0, r0, #2944	; 0xb80
   20d14:	str	r0, [r4, #28]
   20d18:	cmp	r0, r1, lsl #1
   20d1c:	bhi	20cdc <flatcc_emitter_reset@@Base+0x78>
   20d20:	pop	{r4, sl, fp, pc}

00020d24 <flatcc_emitter_clear@@Base>:
   20d24:	push	{r4, r5, r6, sl, fp, lr}
   20d28:	add	fp, sp, #16
   20d2c:	ldr	r5, [r0]
   20d30:	cmp	r5, #0
   20d34:	beq	20d84 <flatcc_emitter_clear@@Base+0x60>
   20d38:	mov	r4, r0
   20d3c:	ldr	r0, [r5, #2948]	; 0xb84
   20d40:	mov	r6, #0
   20d44:	str	r6, [r0, #2944]	; 0xb80
   20d48:	ldr	r0, [r5, #2944]	; 0xb80
   20d4c:	cmp	r0, #0
   20d50:	beq	20d64 <flatcc_emitter_clear@@Base+0x40>
   20d54:	mov	r5, r0
   20d58:	ldr	r0, [r0, #2948]	; 0xb84
   20d5c:	bl	12ea4 <free@plt>
   20d60:	b	20d48 <flatcc_emitter_clear@@Base+0x24>
   20d64:	mov	r0, r5
   20d68:	bl	12ea4 <free@plt>
   20d6c:	vmov.i32	q8, #0	; 0x00000000
   20d70:	add	r0, r4, #16
   20d74:	vst1.32	{d16-d17}, [r0]
   20d78:	mov	r0, #32
   20d7c:	vst1.32	{d16-d17}, [r4], r0
   20d80:	str	r6, [r4]
   20d84:	pop	{r4, r5, r6, sl, fp, pc}

00020d88 <flatcc_emitter@@Base>:
   20d88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20d8c:	add	fp, sp, #24
   20d90:	mov	r4, r2
   20d94:	mov	r5, r1
   20d98:	mov	r6, r0
   20d9c:	ldr	r1, [r0, #24]
   20da0:	ldr	r0, [fp, #8]
   20da4:	add	r1, r1, r0
   20da8:	str	r1, [r6, #24]
   20dac:	mov	r1, r6
   20db0:	cmn	r3, #1
   20db4:	ble	20df4 <flatcc_emitter@@Base+0x6c>
   20db8:	ldr	r2, [r1, #20]!
   20dbc:	cmp	r2, r0
   20dc0:	bcs	20e3c <flatcc_emitter@@Base+0xb4>
   20dc4:	mov	r8, #0
   20dc8:	cmp	r4, #0
   20dcc:	beq	20e8c <flatcc_emitter@@Base+0x104>
   20dd0:	ldm	r5, {r1, r2}
   20dd4:	mov	r0, r6
   20dd8:	bl	20f50 <flatcc_emitter@@Base+0x1c8>
   20ddc:	cmp	r0, #0
   20de0:	bne	20e30 <flatcc_emitter@@Base+0xa8>
   20de4:	subs	r4, r4, #1
   20de8:	add	r5, r5, #8
   20dec:	bne	20dd0 <flatcc_emitter@@Base+0x48>
   20df0:	b	20e8c <flatcc_emitter@@Base+0x104>
   20df4:	ldr	r2, [r1, #12]!
   20df8:	cmp	r2, r0
   20dfc:	bcs	20e4c <flatcc_emitter@@Base+0xc4>
   20e00:	add	r0, r5, r4, lsl #3
   20e04:	sub	r5, r0, #4
   20e08:	rsb	r4, r4, #1
   20e0c:	cmp	r4, #1
   20e10:	beq	20e94 <flatcc_emitter@@Base+0x10c>
   20e14:	ldmda	r5, {r1, r2}
   20e18:	mov	r0, r6
   20e1c:	bl	20ea0 <flatcc_emitter@@Base+0x118>
   20e20:	sub	r5, r5, #8
   20e24:	add	r4, r4, #1
   20e28:	cmp	r0, #0
   20e2c:	beq	20e0c <flatcc_emitter@@Base+0x84>
   20e30:	mvn	r8, #0
   20e34:	mov	r0, r8
   20e38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20e3c:	ldr	r7, [r6, #16]
   20e40:	add	r3, r7, r0
   20e44:	str	r3, [r6, #16]
   20e48:	b	20e58 <flatcc_emitter@@Base+0xd0>
   20e4c:	ldr	r3, [r6, #8]
   20e50:	sub	r7, r3, r0
   20e54:	str	r7, [r6, #8]
   20e58:	sub	r0, r2, r0
   20e5c:	str	r0, [r1]
   20e60:	mov	r8, #0
   20e64:	cmp	r4, #0
   20e68:	beq	20e8c <flatcc_emitter@@Base+0x104>
   20e6c:	ldm	r5, {r1, r2}
   20e70:	mov	r0, r7
   20e74:	bl	12eb0 <memcpy@plt>
   20e78:	ldr	r0, [r5, #4]
   20e7c:	add	r7, r7, r0
   20e80:	add	r5, r5, #8
   20e84:	subs	r4, r4, #1
   20e88:	bne	20e6c <flatcc_emitter@@Base+0xe4>
   20e8c:	mov	r0, r8
   20e90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20e94:	mov	r8, #0
   20e98:	mov	r0, r8
   20e9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20ea0:	push	{r4, r5, r6, r7, fp, lr}
   20ea4:	add	fp, sp, #16
   20ea8:	cmp	r2, #0
   20eac:	beq	20f3c <flatcc_emitter@@Base+0x1b4>
   20eb0:	mov	r4, r2
   20eb4:	mov	r5, r0
   20eb8:	clz	r0, r2
   20ebc:	lsr	r7, r0, #5
   20ec0:	add	r6, r1, r2
   20ec4:	ldr	r0, [r5, #12]
   20ec8:	cmp	r4, r0
   20ecc:	bls	20efc <flatcc_emitter@@Base+0x174>
   20ed0:	cmp	r0, #0
   20ed4:	bne	20f04 <flatcc_emitter@@Base+0x17c>
   20ed8:	mov	r0, r5
   20edc:	bl	210bc <flatcc_emitter_copy_buffer@@Base+0xbc>
   20ee0:	cmp	r0, #0
   20ee4:	mov	r1, r0
   20ee8:	movwne	r1, #1
   20eec:	orr	r1, r1, r7
   20ef0:	tst	r1, #1
   20ef4:	beq	20ec4 <flatcc_emitter@@Base+0x13c>
   20ef8:	b	20f44 <flatcc_emitter@@Base+0x1bc>
   20efc:	mov	r7, r4
   20f00:	b	20f08 <flatcc_emitter@@Base+0x180>
   20f04:	mov	r7, r0
   20f08:	sub	r0, r0, r7
   20f0c:	str	r0, [r5, #12]
   20f10:	ldr	r0, [r5, #8]
   20f14:	sub	r0, r0, r7
   20f18:	str	r0, [r5, #8]
   20f1c:	sub	r6, r6, r7
   20f20:	mov	r1, r6
   20f24:	mov	r2, r7
   20f28:	bl	12eb0 <memcpy@plt>
   20f2c:	subs	r4, r4, r7
   20f30:	clz	r0, r4
   20f34:	lsr	r7, r0, #5
   20f38:	bne	20ec4 <flatcc_emitter@@Base+0x13c>
   20f3c:	mov	r0, #0
   20f40:	pop	{r4, r5, r6, r7, fp, pc}
   20f44:	cmp	r0, #0
   20f48:	mvnne	r0, #0
   20f4c:	pop	{r4, r5, r6, r7, fp, pc}
   20f50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20f54:	add	fp, sp, #24
   20f58:	cmp	r2, #0
   20f5c:	beq	20fec <flatcc_emitter@@Base+0x264>
   20f60:	mov	r4, r2
   20f64:	mov	r8, r1
   20f68:	mov	r6, r0
   20f6c:	clz	r0, r2
   20f70:	lsr	r5, r0, #5
   20f74:	ldr	r7, [r6, #20]
   20f78:	cmp	r4, r7
   20f7c:	bls	20fac <flatcc_emitter@@Base+0x224>
   20f80:	cmp	r7, #0
   20f84:	bne	20fb0 <flatcc_emitter@@Base+0x228>
   20f88:	mov	r0, r6
   20f8c:	bl	211ac <flatcc_emitter_copy_buffer@@Base+0x1ac>
   20f90:	cmp	r0, #0
   20f94:	mov	r1, r0
   20f98:	movwne	r1, #1
   20f9c:	orr	r1, r1, r5
   20fa0:	tst	r1, #1
   20fa4:	beq	20f74 <flatcc_emitter@@Base+0x1ec>
   20fa8:	b	20ff4 <flatcc_emitter@@Base+0x26c>
   20fac:	mov	r7, r4
   20fb0:	ldr	r0, [r6, #16]
   20fb4:	mov	r1, r8
   20fb8:	mov	r2, r7
   20fbc:	bl	12eb0 <memcpy@plt>
   20fc0:	ldr	r0, [r6, #16]
   20fc4:	ldr	r1, [r6, #20]
   20fc8:	add	r0, r0, r7
   20fcc:	sub	r1, r1, r7
   20fd0:	str	r0, [r6, #16]
   20fd4:	str	r1, [r6, #20]
   20fd8:	add	r8, r8, r7
   20fdc:	subs	r4, r4, r7
   20fe0:	clz	r0, r4
   20fe4:	lsr	r5, r0, #5
   20fe8:	bne	20f74 <flatcc_emitter@@Base+0x1ec>
   20fec:	mov	r0, #0
   20ff0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20ff4:	cmp	r0, #0
   20ff8:	mvnne	r0, #0
   20ffc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00021000 <flatcc_emitter_copy_buffer@@Base>:
   21000:	push	{r4, r5, r6, sl, fp, lr}
   21004:	add	fp, sp, #16
   21008:	mov	r3, r2
   2100c:	ldr	r2, [r0, #24]
   21010:	mov	r5, #0
   21014:	cmp	r2, r3
   21018:	bhi	210a0 <flatcc_emitter_copy_buffer@@Base+0xa0>
   2101c:	mov	r4, r0
   21020:	ldr	r0, [r0]
   21024:	cmp	r0, #0
   21028:	beq	210a0 <flatcc_emitter_copy_buffer@@Base+0xa0>
   2102c:	mov	r6, r1
   21030:	ldr	r1, [r4, #4]
   21034:	cmp	r0, r1
   21038:	beq	210a8 <flatcc_emitter_copy_buffer@@Base+0xa8>
   2103c:	ldr	r1, [r4, #8]
   21040:	ldr	r0, [r4, #12]
   21044:	rsb	r5, r0, #2944	; 0xb80
   21048:	mov	r0, r6
   2104c:	mov	r2, r5
   21050:	bl	12eb0 <memcpy@plt>
   21054:	add	r5, r6, r5
   21058:	ldm	r4, {r0, r1}
   2105c:	ldr	r6, [r0, #2944]	; 0xb80
   21060:	cmp	r6, r1
   21064:	beq	2108c <flatcc_emitter_copy_buffer@@Base+0x8c>
   21068:	mov	r0, r5
   2106c:	mov	r1, r6
   21070:	mov	r2, #2944	; 0xb80
   21074:	bl	12eb0 <memcpy@plt>
   21078:	add	r5, r5, #2944	; 0xb80
   2107c:	ldr	r6, [r6, #2944]	; 0xb80
   21080:	ldr	r0, [r4, #4]
   21084:	cmp	r6, r0
   21088:	bne	21068 <flatcc_emitter_copy_buffer@@Base+0x68>
   2108c:	ldr	r0, [r4, #20]
   21090:	rsb	r2, r0, #2944	; 0xb80
   21094:	mov	r0, r5
   21098:	mov	r1, r6
   2109c:	bl	12eb0 <memcpy@plt>
   210a0:	mov	r0, r5
   210a4:	pop	{r4, r5, r6, sl, fp, pc}
   210a8:	ldr	r1, [r4, #8]
   210ac:	mov	r0, r6
   210b0:	bl	12eb0 <memcpy@plt>
   210b4:	mov	r0, r6
   210b8:	pop	{r4, r5, r6, sl, fp, pc}
   210bc:	push	{r4, r5, fp, lr}
   210c0:	add	fp, sp, #8
   210c4:	mov	r4, r0
   210c8:	ldr	r5, [r0]
   210cc:	cmp	r5, #0
   210d0:	beq	210f8 <flatcc_emitter_copy_buffer@@Base+0xf8>
   210d4:	ldr	r0, [r5, #2948]	; 0xb84
   210d8:	ldr	r1, [r4, #4]
   210dc:	cmp	r0, r1
   210e0:	beq	210f8 <flatcc_emitter_copy_buffer@@Base+0xf8>
   210e4:	ldr	r1, [r5, #2952]	; 0xb88
   210e8:	sub	r1, r1, #2944	; 0xb80
   210ec:	str	r1, [r0, #2952]	; 0xb88
   210f0:	ldr	r0, [r5, #2948]	; 0xb84
   210f4:	b	21134 <flatcc_emitter_copy_buffer@@Base+0x134>
   210f8:	movw	r0, #2956	; 0xb8c
   210fc:	bl	12eec <malloc@plt>
   21100:	cmp	r0, #0
   21104:	beq	21164 <flatcc_emitter_copy_buffer@@Base+0x164>
   21108:	ldr	r1, [r4, #28]
   2110c:	add	r1, r1, #2944	; 0xb80
   21110:	str	r1, [r4, #28]
   21114:	cmp	r5, #0
   21118:	beq	2116c <flatcc_emitter_copy_buffer@@Base+0x16c>
   2111c:	ldm	r4, {r1, r2}
   21120:	str	r1, [r0, #2944]	; 0xb80
   21124:	str	r2, [r0, #2948]	; 0xb84
   21128:	str	r0, [r1, #2948]	; 0xb84
   2112c:	ldr	r1, [r4, #4]
   21130:	str	r0, [r1, #2944]	; 0xb80
   21134:	str	r0, [r4]
   21138:	mov	r0, #2944	; 0xb80
   2113c:	ldr	r1, [r4]
   21140:	add	r2, r1, #2944	; 0xb80
   21144:	str	r2, [r4, #8]
   21148:	str	r0, [r4, #12]
   2114c:	ldr	r0, [r1, #2944]	; 0xb80
   21150:	ldr	r0, [r0, #2952]	; 0xb88
   21154:	sub	r0, r0, #2944	; 0xb80
   21158:	str	r0, [r1, #2952]	; 0xb88
   2115c:	mov	r0, #0
   21160:	pop	{r4, r5, fp, pc}
   21164:	mvn	r0, #0
   21168:	pop	{r4, r5, fp, pc}
   2116c:	str	r0, [r4, #4]
   21170:	str	r0, [r4]
   21174:	mov	r1, #1472	; 0x5c0
   21178:	str	r1, [r4, #20]
   2117c:	str	r1, [r4, #12]
   21180:	ldr	r1, [r4]
   21184:	add	r1, r1, #1472	; 0x5c0
   21188:	str	r1, [r4, #16]
   2118c:	str	r1, [r4, #8]
   21190:	movw	r1, #64064	; 0xfa40
   21194:	movt	r1, #65535	; 0xffff
   21198:	str	r0, [r0, #2944]	; 0xb80
   2119c:	str	r0, [r0, #2948]	; 0xb84
   211a0:	str	r1, [r0, #2952]	; 0xb88
   211a4:	mov	r0, #0
   211a8:	pop	{r4, r5, fp, pc}
   211ac:	push	{r4, r5, fp, lr}
   211b0:	add	fp, sp, #8
   211b4:	mov	r4, r0
   211b8:	ldr	r5, [r0, #4]
   211bc:	cmp	r5, #0
   211c0:	beq	211d4 <flatcc_emitter_copy_buffer@@Base+0x1d4>
   211c4:	ldr	r0, [r5, #2944]	; 0xb80
   211c8:	ldr	r1, [r4]
   211cc:	cmp	r0, r1
   211d0:	bne	2120c <flatcc_emitter_copy_buffer@@Base+0x20c>
   211d4:	movw	r0, #2956	; 0xb8c
   211d8:	bl	12eec <malloc@plt>
   211dc:	cmp	r0, #0
   211e0:	beq	21238 <flatcc_emitter_copy_buffer@@Base+0x238>
   211e4:	ldr	r1, [r4, #28]
   211e8:	add	r1, r1, #2944	; 0xb80
   211ec:	str	r1, [r4, #28]
   211f0:	cmp	r5, #0
   211f4:	beq	21240 <flatcc_emitter_copy_buffer@@Base+0x240>
   211f8:	ldr	r1, [r4]
   211fc:	str	r1, [r0, #2944]	; 0xb80
   21200:	str	r5, [r0, #2948]	; 0xb84
   21204:	str	r0, [r1, #2948]	; 0xb84
   21208:	str	r0, [r5, #2944]	; 0xb80
   2120c:	str	r0, [r4, #4]
   21210:	mov	r0, #2944	; 0xb80
   21214:	ldr	r1, [r4, #4]
   21218:	str	r1, [r4, #16]
   2121c:	str	r0, [r4, #20]
   21220:	ldr	r0, [r1, #2948]	; 0xb84
   21224:	ldr	r0, [r0, #2952]	; 0xb88
   21228:	add	r0, r0, #2944	; 0xb80
   2122c:	str	r0, [r1, #2952]	; 0xb88
   21230:	mov	r0, #0
   21234:	pop	{r4, r5, fp, pc}
   21238:	mvn	r0, #0
   2123c:	pop	{r4, r5, fp, pc}
   21240:	str	r0, [r4, #4]
   21244:	str	r0, [r4]
   21248:	mov	r1, #1472	; 0x5c0
   2124c:	str	r1, [r4, #20]
   21250:	str	r1, [r4, #12]
   21254:	ldr	r1, [r4]
   21258:	add	r1, r1, #1472	; 0x5c0
   2125c:	str	r1, [r4, #16]
   21260:	str	r1, [r4, #8]
   21264:	movw	r1, #64064	; 0xfa40
   21268:	movt	r1, #65535	; 0xffff
   2126c:	str	r0, [r0, #2944]	; 0xb80
   21270:	str	r0, [r0, #2948]	; 0xb84
   21274:	str	r1, [r0, #2952]	; 0xb88
   21278:	mov	r0, #0
   2127c:	pop	{r4, r5, fp, pc}

00021280 <flatcc_verify_error_string@@Base>:
   21280:	cmp	r0, #36	; 0x24
   21284:	movwhi	r0, #33858	; 0x8442
   21288:	movthi	r0, #2
   2128c:	bxhi	lr
   21290:	movw	r1, #33868	; 0x844c
   21294:	movt	r1, #2
   21298:	ldr	r0, [r1, r0, lsl #2]
   2129c:	bx	lr

000212a0 <flatcc_verify_field@@Base>:
   212a0:	b	212a4 <flatcc_verify_field@@Base+0x4>
   212a4:	push	{r4, r5, r6, r7, fp, lr}
   212a8:	add	fp, sp, #16
   212ac:	mov	r4, r3
   212b0:	mov	r6, r2
   212b4:	mov	r5, r0
   212b8:	ldr	r7, [r0]
   212bc:	bl	21fc8 <flatcc_verify_union_field@@Base+0x134>
   212c0:	movw	r1, #65535	; 0xffff
   212c4:	tst	r0, r1
   212c8:	beq	21300 <flatcc_verify_field@@Base+0x60>
   212cc:	uxtah	r2, r6, r0
   212d0:	ldrh	r3, [r5, #20]
   212d4:	mov	r1, #13
   212d8:	cmp	r2, r3
   212dc:	bhi	21304 <flatcc_verify_field@@Base+0x64>
   212e0:	uxth	r0, r0
   212e4:	add	r0, r0, r7
   212e8:	ldr	r1, [r5, #16]
   212ec:	add	r0, r0, r1
   212f0:	sub	r1, r4, #1
   212f4:	ands	r0, r0, r1
   212f8:	movwne	r0, #12
   212fc:	pop	{r4, r5, r6, r7, fp, pc}
   21300:	mov	r1, #0
   21304:	mov	r0, r1
   21308:	pop	{r4, r5, r6, r7, fp, pc}

0002130c <flatcc_verify_string_field@@Base>:
   2130c:	push	{r4, r5, r6, sl, fp, lr}
   21310:	add	fp, sp, #16
   21314:	sub	sp, sp, #8
   21318:	mov	r4, r0
   2131c:	add	r3, sp, #4
   21320:	bl	21368 <flatcc_verify_string_field@@Base+0x5c>
   21324:	cmp	r0, #0
   21328:	bne	21360 <flatcc_verify_string_field@@Base+0x54>
   2132c:	ldr	r5, [sp, #4]
   21330:	cmp	r5, #0
   21334:	beq	21360 <flatcc_verify_string_field@@Base+0x54>
   21338:	ldr	r6, [r4]
   2133c:	ldr	r4, [r4, #4]
   21340:	mov	r0, r6
   21344:	mov	r1, r5
   21348:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   2134c:	mov	r3, r0
   21350:	mov	r0, r6
   21354:	mov	r1, r4
   21358:	mov	r2, r5
   2135c:	bl	213e0 <flatcc_verify_string_field@@Base+0xd4>
   21360:	sub	sp, fp, #16
   21364:	pop	{r4, r5, r6, sl, fp, pc}
   21368:	push	{r4, r5, r6, sl, fp, lr}
   2136c:	add	fp, sp, #16
   21370:	mov	r4, r3
   21374:	mov	r6, r2
   21378:	mov	r5, r0
   2137c:	bl	21fc8 <flatcc_verify_union_field@@Base+0x134>
   21380:	mov	r1, r0
   21384:	movw	r0, #65535	; 0xffff
   21388:	tst	r1, r0
   2138c:	beq	213c8 <flatcc_verify_string_field@@Base+0xbc>
   21390:	mov	r0, #4
   21394:	uxtah	r2, r0, r1
   21398:	ldrh	r3, [r5, #20]
   2139c:	mov	r0, #13
   213a0:	cmp	r2, r3
   213a4:	bhi	213c4 <flatcc_verify_string_field@@Base+0xb8>
   213a8:	uxth	r0, r1
   213ac:	ldr	r1, [r5, #16]
   213b0:	add	r1, r1, r0
   213b4:	mov	r0, #12
   213b8:	tst	r1, #3
   213bc:	streq	r1, [r4]
   213c0:	moveq	r0, #0
   213c4:	pop	{r4, r5, r6, sl, fp, pc}
   213c8:	mov	r0, #0
   213cc:	str	r0, [r4]
   213d0:	cmp	r6, #0
   213d4:	movwne	r6, #1
   213d8:	lsl	r0, r6, #2
   213dc:	pop	{r4, r5, r6, sl, fp, pc}
   213e0:	push	{r4, r5, r6, r7, fp, lr}
   213e4:	add	fp, sp, #16
   213e8:	mov	r6, r3
   213ec:	mov	r7, r2
   213f0:	mov	r5, r1
   213f4:	mov	r4, r0
   213f8:	mov	r0, r1
   213fc:	mov	r1, r2
   21400:	mov	r2, r3
   21404:	bl	22288 <flatcc_verify_union_vector_field@@Base+0x288>
   21408:	cmp	r0, #0
   2140c:	beq	2144c <flatcc_verify_string_field@@Base+0x140>
   21410:	add	r6, r6, r7
   21414:	mov	r0, r4
   21418:	mov	r1, r6
   2141c:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21420:	add	r2, r6, #4
   21424:	sub	r3, r5, r2
   21428:	add	r7, r0, #1
   2142c:	mov	r1, #8
   21430:	cmp	r3, r7
   21434:	bcc	21450 <flatcc_verify_string_field@@Base+0x144>
   21438:	add	r1, r4, r2
   2143c:	ldrb	r0, [r1, r0]
   21440:	cmp	r0, #0
   21444:	movwne	r0, #7
   21448:	pop	{r4, r5, r6, r7, fp, pc}
   2144c:	mov	r1, #17
   21450:	mov	r0, r1
   21454:	pop	{r4, r5, r6, r7, fp, pc}
   21458:	add	r0, r0, r1
   2145c:	b	222b4 <flatcc_verify_union_vector_field@@Base+0x2b4>

00021460 <flatcc_verify_vector_field@@Base>:
   21460:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21464:	add	fp, sp, #24
   21468:	sub	sp, sp, #16
   2146c:	mov	r4, r3
   21470:	mov	r6, r0
   21474:	add	r3, sp, #12
   21478:	bl	21368 <flatcc_verify_string_field@@Base+0x5c>
   2147c:	cmp	r0, #0
   21480:	bne	214c8 <flatcc_verify_vector_field@@Base+0x68>
   21484:	ldr	r5, [sp, #12]
   21488:	cmp	r5, #0
   2148c:	beq	214c8 <flatcc_verify_vector_field@@Base+0x68>
   21490:	ldr	r8, [fp, #12]
   21494:	ldr	r9, [fp, #8]
   21498:	ldr	r7, [r6]
   2149c:	ldr	r6, [r6, #4]
   214a0:	mov	r0, r7
   214a4:	mov	r1, r5
   214a8:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   214ac:	mov	r3, r0
   214b0:	stm	sp, {r4, r9}
   214b4:	str	r8, [sp, #8]
   214b8:	mov	r0, r7
   214bc:	mov	r1, r6
   214c0:	mov	r2, r5
   214c4:	bl	214d0 <flatcc_verify_vector_field@@Base+0x70>
   214c8:	sub	sp, fp, #24
   214cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   214d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   214d4:	add	fp, sp, #24
   214d8:	mov	r5, r3
   214dc:	mov	r7, r2
   214e0:	mov	r4, r1
   214e4:	mov	r6, r0
   214e8:	ldr	r3, [fp, #12]
   214ec:	mov	r0, r1
   214f0:	mov	r1, r2
   214f4:	mov	r2, r5
   214f8:	bl	222c0 <flatcc_verify_union_vector_field@@Base+0x2c0>
   214fc:	cmp	r0, #0
   21500:	beq	21548 <flatcc_verify_vector_field@@Base+0xe8>
   21504:	ldr	r8, [fp, #16]
   21508:	add	r5, r5, r7
   2150c:	mov	r0, r6
   21510:	mov	r1, r5
   21514:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21518:	mov	r1, r0
   2151c:	mov	r0, #25
   21520:	cmp	r1, r8
   21524:	bhi	21544 <flatcc_verify_vector_field@@Base+0xe4>
   21528:	ldr	r0, [fp, #8]
   2152c:	mul	r1, r1, r0
   21530:	sub	r0, r4, r5
   21534:	sub	r2, r0, #4
   21538:	mov	r0, #0
   2153c:	cmp	r2, r1
   21540:	movwcc	r0, #26
   21544:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21548:	mov	r0, #16
   2154c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00021550 <flatcc_verify_string_vector_field@@Base>:
   21550:	push	{r4, r5, r6, sl, fp, lr}
   21554:	add	fp, sp, #16
   21558:	sub	sp, sp, #8
   2155c:	mov	r4, r0
   21560:	add	r3, sp, #4
   21564:	bl	21368 <flatcc_verify_string_field@@Base+0x5c>
   21568:	cmp	r0, #0
   2156c:	bne	215a4 <flatcc_verify_string_vector_field@@Base+0x54>
   21570:	ldr	r5, [sp, #4]
   21574:	cmp	r5, #0
   21578:	beq	215a4 <flatcc_verify_string_vector_field@@Base+0x54>
   2157c:	ldr	r6, [r4]
   21580:	ldr	r4, [r4, #4]
   21584:	mov	r0, r6
   21588:	mov	r1, r5
   2158c:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21590:	mov	r3, r0
   21594:	mov	r0, r6
   21598:	mov	r1, r4
   2159c:	mov	r2, r5
   215a0:	bl	215ac <flatcc_verify_string_vector_field@@Base+0x5c>
   215a4:	sub	sp, fp, #16
   215a8:	pop	{r4, r5, r6, sl, fp, pc}
   215ac:	push	{r4, r5, r6, r7, fp, lr}
   215b0:	add	fp, sp, #16
   215b4:	sub	sp, sp, #16
   215b8:	mov	r6, r3
   215bc:	mov	r7, r2
   215c0:	mov	r4, r1
   215c4:	mov	r5, r0
   215c8:	mvn	r0, #-1073741824	; 0xc0000000
   215cc:	mov	r1, #4
   215d0:	str	r1, [sp]
   215d4:	str	r1, [sp, #4]
   215d8:	str	r0, [sp, #8]
   215dc:	mov	r0, r5
   215e0:	mov	r1, r4
   215e4:	bl	214d0 <flatcc_verify_vector_field@@Base+0x70>
   215e8:	cmp	r0, #0
   215ec:	beq	215f8 <flatcc_verify_string_vector_field@@Base+0xa8>
   215f0:	sub	sp, fp, #16
   215f4:	pop	{r4, r5, r6, r7, fp, pc}
   215f8:	add	r7, r6, r7
   215fc:	mov	r0, r5
   21600:	mov	r1, r7
   21604:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21608:	cmp	r0, #0
   2160c:	beq	2164c <flatcc_verify_string_vector_field@@Base+0xfc>
   21610:	mov	r6, r0
   21614:	add	r7, r7, #4
   21618:	mov	r0, r5
   2161c:	mov	r1, r7
   21620:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21624:	mov	r3, r0
   21628:	mov	r0, r5
   2162c:	mov	r1, r4
   21630:	mov	r2, r7
   21634:	bl	213e0 <flatcc_verify_string_field@@Base+0xd4>
   21638:	cmp	r0, #0
   2163c:	bne	215f0 <flatcc_verify_string_vector_field@@Base+0xa0>
   21640:	subs	r6, r6, #1
   21644:	add	r7, r7, #4
   21648:	bne	21618 <flatcc_verify_string_vector_field@@Base+0xc8>
   2164c:	mov	r0, #0
   21650:	sub	sp, fp, #16
   21654:	pop	{r4, r5, r6, r7, fp, pc}

00021658 <flatcc_verify_table_field@@Base>:
   21658:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2165c:	add	fp, sp, #24
   21660:	sub	sp, sp, #16
   21664:	mov	r8, r3
   21668:	mov	r5, r0
   2166c:	add	r3, sp, #12
   21670:	bl	21368 <flatcc_verify_string_field@@Base+0x5c>
   21674:	cmp	r0, #0
   21678:	bne	216b8 <flatcc_verify_table_field@@Base+0x60>
   2167c:	ldr	r6, [sp, #12]
   21680:	cmp	r6, #0
   21684:	beq	216b8 <flatcc_verify_table_field@@Base+0x60>
   21688:	ldr	r7, [r5]
   2168c:	ldr	r4, [r5, #4]
   21690:	mov	r0, r7
   21694:	mov	r1, r6
   21698:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   2169c:	mov	r3, r0
   216a0:	ldr	r0, [r5, #8]
   216a4:	stm	sp, {r0, r8}
   216a8:	mov	r0, r7
   216ac:	mov	r1, r4
   216b0:	mov	r2, r6
   216b4:	bl	216c0 <flatcc_verify_table_field@@Base+0x68>
   216b8:	sub	sp, fp, #24
   216bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   216c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   216c4:	add	fp, sp, #24
   216c8:	sub	sp, sp, #24
   216cc:	mov	r4, r0
   216d0:	ldr	r0, [fp, #8]
   216d4:	subs	r0, r0, #1
   216d8:	str	r0, [sp, #8]
   216dc:	beq	217b4 <flatcc_verify_table_field@@Base+0x15c>
   216e0:	mov	r6, r3
   216e4:	mov	r7, r2
   216e8:	mov	r5, r1
   216ec:	mov	r0, r1
   216f0:	mov	r1, r2
   216f4:	mov	r2, r3
   216f8:	bl	22288 <flatcc_verify_union_vector_field@@Base+0x288>
   216fc:	cmp	r0, #0
   21700:	beq	217c0 <flatcc_verify_table_field@@Base+0x168>
   21704:	add	r7, r6, r7
   21708:	str	r7, [sp, #16]
   2170c:	mov	r0, r4
   21710:	mov	r1, r7
   21714:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21718:	sub	r6, r7, r0
   2171c:	mov	r0, #29
   21720:	tst	r6, #-2147483647	; 0x80000001
   21724:	bne	217ac <flatcc_verify_table_field@@Base+0x154>
   21728:	add	r8, r6, #2
   2172c:	mov	r0, #27
   21730:	cmp	r8, r5
   21734:	bhi	217ac <flatcc_verify_table_field@@Base+0x154>
   21738:	mov	r0, r4
   2173c:	mov	r1, r6
   21740:	bl	222fc <flatcc_verify_union_vector_field@@Base+0x2fc>
   21744:	mov	r1, r0
   21748:	strh	r0, [sp, #22]
   2174c:	mov	r0, #30
   21750:	tst	r1, #1
   21754:	bne	217ac <flatcc_verify_table_field@@Base+0x154>
   21758:	add	r2, r6, r1
   2175c:	cmp	r2, r5
   21760:	bhi	217ac <flatcc_verify_table_field@@Base+0x154>
   21764:	mov	r0, #28
   21768:	cmp	r1, #4
   2176c:	bcc	217ac <flatcc_verify_table_field@@Base+0x154>
   21770:	mov	r0, r4
   21774:	mov	r1, r8
   21778:	bl	222fc <flatcc_verify_union_vector_field@@Base+0x2fc>
   2177c:	mov	r1, r0
   21780:	strh	r0, [sp, #20]
   21784:	sub	r2, r5, r7
   21788:	mov	r0, #20
   2178c:	cmp	r2, r1
   21790:	bcc	217ac <flatcc_verify_table_field@@Base+0x154>
   21794:	ldr	r1, [fp, #12]
   21798:	stm	sp, {r4, r5}
   2179c:	add	r0, r4, r6
   217a0:	str	r0, [sp, #12]
   217a4:	mov	r0, sp
   217a8:	blx	r1
   217ac:	sub	sp, fp, #24
   217b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   217b4:	mov	r0, #3
   217b8:	sub	sp, fp, #24
   217bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   217c0:	mov	r0, #15
   217c4:	sub	sp, fp, #24
   217c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000217cc <flatcc_verify_table_vector_field@@Base>:
   217cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   217d0:	add	fp, sp, #24
   217d4:	sub	sp, sp, #16
   217d8:	mov	r8, r3
   217dc:	mov	r5, r0
   217e0:	add	r3, sp, #12
   217e4:	bl	21368 <flatcc_verify_string_field@@Base+0x5c>
   217e8:	cmp	r0, #0
   217ec:	bne	2182c <flatcc_verify_table_vector_field@@Base+0x60>
   217f0:	ldr	r6, [sp, #12]
   217f4:	cmp	r6, #0
   217f8:	beq	2182c <flatcc_verify_table_vector_field@@Base+0x60>
   217fc:	ldr	r7, [r5]
   21800:	ldr	r4, [r5, #4]
   21804:	mov	r0, r7
   21808:	mov	r1, r6
   2180c:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21810:	mov	r3, r0
   21814:	ldr	r0, [r5, #8]
   21818:	stm	sp, {r0, r8}
   2181c:	mov	r0, r7
   21820:	mov	r1, r4
   21824:	mov	r2, r6
   21828:	bl	21834 <flatcc_verify_table_vector_field@@Base+0x68>
   2182c:	sub	sp, fp, #24
   21830:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21838:	add	fp, sp, #28
   2183c:	sub	sp, sp, #12
   21840:	ldr	r9, [fp, #8]
   21844:	cmp	r9, #1
   21848:	blt	218f0 <flatcc_verify_table_vector_field@@Base+0x124>
   2184c:	mov	r6, r3
   21850:	mov	r7, r2
   21854:	mov	r4, r1
   21858:	mov	r5, r0
   2185c:	mvn	r0, #-1073741824	; 0xc0000000
   21860:	mov	r1, #4
   21864:	str	r1, [sp]
   21868:	str	r1, [sp, #4]
   2186c:	str	r0, [sp, #8]
   21870:	mov	r0, r5
   21874:	mov	r1, r4
   21878:	bl	214d0 <flatcc_verify_vector_field@@Base+0x70>
   2187c:	mov	r8, r0
   21880:	cmp	r0, #0
   21884:	bne	218f4 <flatcc_verify_table_vector_field@@Base+0x128>
   21888:	add	r7, r6, r7
   2188c:	mov	r0, r5
   21890:	mov	r1, r7
   21894:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21898:	mov	r8, #0
   2189c:	cmp	r0, #0
   218a0:	beq	218f4 <flatcc_verify_table_vector_field@@Base+0x128>
   218a4:	mov	r6, r0
   218a8:	sub	r9, r9, #1
   218ac:	ldr	sl, [fp, #12]
   218b0:	add	r7, r7, #4
   218b4:	mov	r0, r5
   218b8:	mov	r1, r7
   218bc:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   218c0:	mov	r3, r0
   218c4:	stm	sp, {r9, sl}
   218c8:	mov	r0, r5
   218cc:	mov	r1, r4
   218d0:	mov	r2, r7
   218d4:	bl	216c0 <flatcc_verify_table_field@@Base+0x68>
   218d8:	cmp	r0, #0
   218dc:	bne	21900 <flatcc_verify_table_vector_field@@Base+0x134>
   218e0:	subs	r6, r6, #1
   218e4:	add	r7, r7, #4
   218e8:	bne	218b4 <flatcc_verify_table_vector_field@@Base+0xe8>
   218ec:	b	218f4 <flatcc_verify_table_vector_field@@Base+0x128>
   218f0:	mov	r8, #3
   218f4:	mov	r0, r8
   218f8:	sub	sp, fp, #28
   218fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21900:	mov	r0, r5
   21904:	mov	r1, r7
   21908:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   2190c:	mov	r3, r0
   21910:	stm	sp, {r9, sl}
   21914:	mov	r0, r5
   21918:	mov	r1, r4
   2191c:	mov	r2, r7
   21920:	bl	216c0 <flatcc_verify_table_field@@Base+0x68>
   21924:	sub	sp, fp, #28
   21928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002192c <flatcc_verify_union_table@@Base>:
   2192c:	push	{fp, lr}
   21930:	mov	fp, sp
   21934:	sub	sp, sp, #8
   21938:	ldr	r2, [r0, #16]
   2193c:	ldr	r3, [r0, #20]
   21940:	ldm	r0, {ip, lr}
   21944:	ldr	r0, [r0, #8]
   21948:	stm	sp, {r0, r1}
   2194c:	mov	r0, ip
   21950:	mov	r1, lr
   21954:	bl	216c0 <flatcc_verify_table_field@@Base+0x68>
   21958:	mov	sp, fp
   2195c:	pop	{fp, pc}

00021960 <flatcc_verify_union_struct@@Base>:
   21960:	push	{fp, lr}
   21964:	mov	fp, sp
   21968:	sub	sp, sp, #8
   2196c:	mov	ip, r1
   21970:	ldr	r3, [r0, #4]
   21974:	ldr	r1, [r0, #16]
   21978:	ldr	lr, [r0, #20]
   2197c:	str	r2, [sp]
   21980:	mov	r0, r3
   21984:	mov	r2, lr
   21988:	mov	r3, ip
   2198c:	bl	21998 <flatcc_verify_union_struct@@Base+0x38>
   21990:	mov	sp, fp
   21994:	pop	{fp, pc}
   21998:	mov	ip, r0
   2199c:	mov	r0, #18
   219a0:	cmp	r2, #0
   219a4:	beq	219dc <flatcc_verify_union_struct@@Base+0x7c>
   219a8:	add	r1, r2, r1
   219ac:	cmp	r1, ip
   219b0:	bhi	219dc <flatcc_verify_union_struct@@Base+0x7c>
   219b4:	adds	r2, r1, r3
   219b8:	mov	r0, #10
   219bc:	bcs	219dc <flatcc_verify_union_struct@@Base+0x7c>
   219c0:	mov	r0, #9
   219c4:	cmp	r2, ip
   219c8:	bxhi	lr
   219cc:	ldr	r0, [sp]
   219d0:	sub	r0, r0, #1
   219d4:	ands	r0, r0, r1
   219d8:	movwne	r0, #11
   219dc:	bx	lr

000219e0 <flatcc_verify_union_string@@Base>:
   219e0:	ldr	ip, [r0]
   219e4:	ldr	r1, [r0, #4]
   219e8:	ldr	r2, [r0, #16]
   219ec:	ldr	r3, [r0, #20]
   219f0:	mov	r0, ip
   219f4:	b	213e0 <flatcc_verify_string_field@@Base+0xd4>

000219f8 <flatcc_verify_buffer_header@@Base>:
   219f8:	push	{r4, r5, fp, lr}
   219fc:	add	fp, sp, #8
   21a00:	mov	r4, r0
   21a04:	mov	r0, #5
   21a08:	tst	r4, #3
   21a0c:	bne	21a58 <flatcc_verify_buffer_header@@Base+0x60>
   21a10:	mov	r0, #6
   21a14:	cmn	r1, #9
   21a18:	bhi	21a58 <flatcc_verify_buffer_header@@Base+0x60>
   21a1c:	mov	r0, #1
   21a20:	cmp	r1, #8
   21a24:	popcc	{r4, r5, fp, pc}
   21a28:	cmp	r2, #0
   21a2c:	beq	21a5c <flatcc_verify_buffer_header@@Base+0x64>
   21a30:	mov	r0, r2
   21a34:	bl	21a64 <flatcc_verify_buffer_header@@Base+0x6c>
   21a38:	mov	r5, r0
   21a3c:	mov	r0, r4
   21a40:	bl	21a98 <flatcc_verify_buffer_header@@Base+0xa0>
   21a44:	cmp	r5, #0
   21a48:	movne	r1, r0
   21a4c:	movne	r0, #2
   21a50:	cmpne	r1, r5
   21a54:	moveq	r0, #0
   21a58:	pop	{r4, r5, fp, pc}
   21a5c:	mov	r0, #0
   21a60:	pop	{r4, r5, fp, pc}
   21a64:	push	{fp, lr}
   21a68:	mov	fp, sp
   21a6c:	sub	sp, sp, #8
   21a70:	mov	r1, r0
   21a74:	mov	r0, #0
   21a78:	str	r0, [sp, #4]
   21a7c:	add	r0, sp, #4
   21a80:	mov	r2, #4
   21a84:	bl	12f4c <strncpy@plt>
   21a88:	ldr	r0, [sp, #4]
   21a8c:	bl	22310 <flatcc_verify_union_vector_field@@Base+0x310>
   21a90:	mov	sp, fp
   21a94:	pop	{fp, pc}
   21a98:	add	r0, r0, #4
   21a9c:	b	22314 <flatcc_verify_union_vector_field@@Base+0x314>

00021aa0 <flatcc_verify_typed_buffer_header@@Base>:
   21aa0:	push	{r4, sl, fp, lr}
   21aa4:	add	fp, sp, #8
   21aa8:	mov	r4, r2
   21aac:	mov	r2, #5
   21ab0:	tst	r0, #3
   21ab4:	bne	21ae8 <flatcc_verify_typed_buffer_header@@Base+0x48>
   21ab8:	mov	r2, #6
   21abc:	cmn	r1, #9
   21ac0:	bhi	21ae8 <flatcc_verify_typed_buffer_header@@Base+0x48>
   21ac4:	mov	r2, #1
   21ac8:	cmp	r1, #8
   21acc:	bcc	21ae8 <flatcc_verify_typed_buffer_header@@Base+0x48>
   21ad0:	cmp	r4, #0
   21ad4:	beq	21af0 <flatcc_verify_typed_buffer_header@@Base+0x50>
   21ad8:	bl	21a98 <flatcc_verify_buffer_header@@Base+0xa0>
   21adc:	mov	r2, #2
   21ae0:	cmp	r0, r4
   21ae4:	moveq	r2, #0
   21ae8:	mov	r0, r2
   21aec:	pop	{r4, sl, fp, pc}
   21af0:	mov	r2, #0
   21af4:	mov	r0, r2
   21af8:	pop	{r4, sl, fp, pc}

00021afc <flatcc_verify_struct_as_root@@Base>:
   21afc:	push	{r4, r5, r6, r7, fp, lr}
   21b00:	add	fp, sp, #16
   21b04:	sub	sp, sp, #8
   21b08:	mov	r4, r3
   21b0c:	mov	r7, r2
   21b10:	mov	r5, r1
   21b14:	mov	r6, r0
   21b18:	bl	219f8 <flatcc_verify_buffer_header@@Base>
   21b1c:	cmp	r0, #0
   21b20:	beq	21b3c <flatcc_verify_struct_as_root@@Base+0x40>
   21b24:	mov	r0, r6
   21b28:	mov	r1, r5
   21b2c:	mov	r2, r7
   21b30:	sub	sp, fp, #16
   21b34:	pop	{r4, r5, r6, r7, fp, lr}
   21b38:	b	219f8 <flatcc_verify_buffer_header@@Base>
   21b3c:	ldr	r7, [fp, #8]
   21b40:	mov	r0, r6
   21b44:	mov	r1, #0
   21b48:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21b4c:	mov	r2, r0
   21b50:	str	r7, [sp]
   21b54:	mov	r0, r5
   21b58:	mov	r1, #0
   21b5c:	mov	r3, r4
   21b60:	bl	21998 <flatcc_verify_union_struct@@Base+0x38>
   21b64:	sub	sp, fp, #16
   21b68:	pop	{r4, r5, r6, r7, fp, pc}

00021b6c <flatcc_verify_struct_as_typed_root@@Base>:
   21b6c:	push	{r4, r5, r6, r7, fp, lr}
   21b70:	add	fp, sp, #16
   21b74:	sub	sp, sp, #8
   21b78:	mov	r4, r3
   21b7c:	mov	r5, r1
   21b80:	mov	r6, r0
   21b84:	bl	21aa0 <flatcc_verify_typed_buffer_header@@Base>
   21b88:	cmp	r0, #0
   21b8c:	beq	21b98 <flatcc_verify_struct_as_typed_root@@Base+0x2c>
   21b90:	sub	sp, fp, #16
   21b94:	pop	{r4, r5, r6, r7, fp, pc}
   21b98:	ldr	r7, [fp, #8]
   21b9c:	mov	r0, r6
   21ba0:	mov	r1, #0
   21ba4:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21ba8:	mov	r2, r0
   21bac:	str	r7, [sp]
   21bb0:	mov	r0, r5
   21bb4:	mov	r1, #0
   21bb8:	mov	r3, r4
   21bbc:	bl	21998 <flatcc_verify_union_struct@@Base+0x38>
   21bc0:	sub	sp, fp, #16
   21bc4:	pop	{r4, r5, r6, r7, fp, pc}

00021bc8 <flatcc_verify_table_as_root@@Base>:
   21bc8:	push	{r4, r5, r6, r7, fp, lr}
   21bcc:	add	fp, sp, #16
   21bd0:	sub	sp, sp, #8
   21bd4:	mov	r5, r3
   21bd8:	mov	r7, r2
   21bdc:	mov	r4, r1
   21be0:	mov	r6, r0
   21be4:	bl	219f8 <flatcc_verify_buffer_header@@Base>
   21be8:	cmp	r0, #0
   21bec:	beq	21c08 <flatcc_verify_table_as_root@@Base+0x40>
   21bf0:	mov	r0, r6
   21bf4:	mov	r1, r4
   21bf8:	mov	r2, r7
   21bfc:	sub	sp, fp, #16
   21c00:	pop	{r4, r5, r6, r7, fp, lr}
   21c04:	b	219f8 <flatcc_verify_buffer_header@@Base>
   21c08:	mov	r0, r6
   21c0c:	mov	r1, #0
   21c10:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21c14:	mov	r3, r0
   21c18:	mov	r0, #100	; 0x64
   21c1c:	stm	sp, {r0, r5}
   21c20:	mov	r0, r6
   21c24:	mov	r1, r4
   21c28:	mov	r2, #0
   21c2c:	bl	216c0 <flatcc_verify_table_field@@Base+0x68>
   21c30:	sub	sp, fp, #16
   21c34:	pop	{r4, r5, r6, r7, fp, pc}

00021c38 <flatcc_verify_table_as_typed_root@@Base>:
   21c38:	push	{r4, r5, r6, sl, fp, lr}
   21c3c:	add	fp, sp, #16
   21c40:	sub	sp, sp, #8
   21c44:	mov	r5, r3
   21c48:	mov	r4, r1
   21c4c:	mov	r6, r0
   21c50:	bl	21aa0 <flatcc_verify_typed_buffer_header@@Base>
   21c54:	cmp	r0, #0
   21c58:	beq	21c64 <flatcc_verify_table_as_typed_root@@Base+0x2c>
   21c5c:	sub	sp, fp, #16
   21c60:	pop	{r4, r5, r6, sl, fp, pc}
   21c64:	mov	r0, r6
   21c68:	mov	r1, #0
   21c6c:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21c70:	mov	r3, r0
   21c74:	mov	r0, #100	; 0x64
   21c78:	stm	sp, {r0, r5}
   21c7c:	mov	r0, r6
   21c80:	mov	r1, r4
   21c84:	mov	r2, #0
   21c88:	bl	216c0 <flatcc_verify_table_field@@Base+0x68>
   21c8c:	sub	sp, fp, #16
   21c90:	pop	{r4, r5, r6, sl, fp, pc}

00021c94 <flatcc_verify_struct_as_nested_root@@Base>:
   21c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c98:	add	fp, sp, #28
   21c9c:	sub	sp, sp, #12
   21ca0:	mov	r8, r3
   21ca4:	mov	r7, r2
   21ca8:	mov	r6, r1
   21cac:	mov	r4, r0
   21cb0:	mvn	sl, #0
   21cb4:	mov	r5, #1
   21cb8:	stm	sp, {r5, sl}
   21cbc:	ldr	r9, [fp, #12]
   21cc0:	mov	r3, r9
   21cc4:	bl	21460 <flatcc_verify_vector_field@@Base>
   21cc8:	cmp	r0, #0
   21ccc:	beq	21cf0 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   21cd0:	stm	sp, {r5, sl}
   21cd4:	mov	r0, r4
   21cd8:	mov	r1, r6
   21cdc:	mov	r2, r7
   21ce0:	mov	r3, r9
   21ce4:	bl	21460 <flatcc_verify_vector_field@@Base>
   21ce8:	sub	sp, fp, #28
   21cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21cf0:	mov	r0, r4
   21cf4:	mov	r1, r6
   21cf8:	bl	21d50 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   21cfc:	cmp	r0, #0
   21d00:	beq	21d44 <flatcc_verify_struct_as_nested_root@@Base+0xb0>
   21d04:	mov	r4, r0
   21d08:	ldr	r6, [fp, #8]
   21d0c:	mov	r1, #0
   21d10:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21d14:	add	r4, r0, r4
   21d18:	mov	r0, r4
   21d1c:	mov	r1, #0
   21d20:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21d24:	mov	r1, r0
   21d28:	str	r9, [sp]
   21d2c:	add	r0, r4, #4
   21d30:	mov	r2, r8
   21d34:	mov	r3, r6
   21d38:	bl	21afc <flatcc_verify_struct_as_root@@Base>
   21d3c:	sub	sp, fp, #28
   21d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d44:	mov	r0, #0
   21d48:	sub	sp, fp, #28
   21d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d50:	push	{r4, sl, fp, lr}
   21d54:	add	fp, sp, #8
   21d58:	mov	r4, r0
   21d5c:	bl	21fc8 <flatcc_verify_union_field@@Base+0x134>
   21d60:	uxth	r0, r0
   21d64:	cmp	r0, #0
   21d68:	beq	21d80 <flatcc_verify_struct_as_nested_root@@Base+0xec>
   21d6c:	ldr	r1, [r4]
   21d70:	ldr	r2, [r4, #16]
   21d74:	add	r1, r1, r2
   21d78:	add	r0, r1, r0
   21d7c:	pop	{r4, sl, fp, pc}
   21d80:	mov	r0, #0
   21d84:	pop	{r4, sl, fp, pc}

00021d88 <flatcc_verify_table_as_nested_root@@Base>:
   21d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d8c:	add	fp, sp, #28
   21d90:	sub	sp, sp, #12
   21d94:	mov	r8, r3
   21d98:	mov	r7, r2
   21d9c:	mov	r6, r1
   21da0:	mov	r4, r0
   21da4:	mvn	r9, #0
   21da8:	mov	sl, #1
   21dac:	str	sl, [sp]
   21db0:	str	r9, [sp, #4]
   21db4:	ldr	r5, [fp, #8]
   21db8:	mov	r3, r5
   21dbc:	bl	21460 <flatcc_verify_vector_field@@Base>
   21dc0:	cmp	r0, #0
   21dc4:	beq	21dec <flatcc_verify_table_as_nested_root@@Base+0x64>
   21dc8:	str	sl, [sp]
   21dcc:	str	r9, [sp, #4]
   21dd0:	mov	r0, r4
   21dd4:	mov	r1, r6
   21dd8:	mov	r2, r7
   21ddc:	mov	r3, r5
   21de0:	bl	21460 <flatcc_verify_vector_field@@Base>
   21de4:	sub	sp, fp, #28
   21de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21dec:	ldr	r9, [fp, #12]
   21df0:	mov	r0, r4
   21df4:	mov	r1, r6
   21df8:	bl	21d50 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   21dfc:	cmp	r0, #0
   21e00:	beq	21e58 <flatcc_verify_table_as_nested_root@@Base+0xd0>
   21e04:	mov	r5, r0
   21e08:	mov	r1, #0
   21e0c:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21e10:	add	r5, r0, r5
   21e14:	mov	r0, r5
   21e18:	mov	r1, #0
   21e1c:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21e20:	mov	r6, r0
   21e24:	add	r7, r5, #4
   21e28:	mov	r0, r7
   21e2c:	mov	r1, r6
   21e30:	mov	r2, r8
   21e34:	bl	219f8 <flatcc_verify_buffer_header@@Base>
   21e38:	cmp	r0, #0
   21e3c:	beq	21e64 <flatcc_verify_table_as_nested_root@@Base+0xdc>
   21e40:	mov	r0, r7
   21e44:	mov	r1, r6
   21e48:	mov	r2, r8
   21e4c:	sub	sp, fp, #28
   21e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e54:	b	219f8 <flatcc_verify_buffer_header@@Base>
   21e58:	mov	r0, #0
   21e5c:	sub	sp, fp, #28
   21e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e64:	mov	r0, r7
   21e68:	mov	r1, #0
   21e6c:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21e70:	mov	r3, r0
   21e74:	ldr	r0, [r4, #8]
   21e78:	stm	sp, {r0, r9}
   21e7c:	mov	r0, r7
   21e80:	mov	r1, r6
   21e84:	mov	r2, #0
   21e88:	bl	216c0 <flatcc_verify_table_field@@Base+0x68>
   21e8c:	sub	sp, fp, #28
   21e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021e94 <flatcc_verify_union_field@@Base>:
   21e94:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21e98:	add	fp, sp, #24
   21e9c:	sub	sp, sp, #32
   21ea0:	mov	r8, r3
   21ea4:	mov	r9, r2
   21ea8:	mov	r7, r1
   21eac:	mov	r5, r0
   21eb0:	sub	r0, r1, #1
   21eb4:	uxth	r4, r0
   21eb8:	mov	r0, r5
   21ebc:	mov	r1, r4
   21ec0:	bl	21fc8 <flatcc_verify_union_field@@Base+0x134>
   21ec4:	uxth	r6, r0
   21ec8:	cmp	r6, #0
   21ecc:	beq	21f80 <flatcc_verify_union_field@@Base+0xec>
   21ed0:	mov	r0, r5
   21ed4:	mov	r1, r4
   21ed8:	mov	r2, #1
   21edc:	mov	r3, #1
   21ee0:	bl	212a4 <flatcc_verify_field@@Base+0x4>
   21ee4:	cmp	r0, #0
   21ee8:	bne	21fa0 <flatcc_verify_union_field@@Base+0x10c>
   21eec:	mov	r0, r5
   21ef0:	mov	r1, r7
   21ef4:	bl	21fc8 <flatcc_verify_union_field@@Base+0x134>
   21ef8:	ldr	r1, [r5]
   21efc:	ldr	r2, [r5, #16]
   21f00:	add	r4, r1, r2
   21f04:	ldrb	r1, [r4, r6]
   21f08:	movw	r2, #65535	; 0xffff
   21f0c:	tst	r0, r2
   21f10:	beq	21f20 <flatcc_verify_union_field@@Base+0x8c>
   21f14:	mov	r0, #24
   21f18:	cmp	r1, #0
   21f1c:	beq	21fa0 <flatcc_verify_union_field@@Base+0x10c>
   21f20:	cmp	r1, #0
   21f24:	beq	21fbc <flatcc_verify_union_field@@Base+0x128>
   21f28:	add	r3, sp, #28
   21f2c:	mov	r0, r5
   21f30:	mov	r1, r7
   21f34:	mov	r2, r9
   21f38:	bl	21368 <flatcc_verify_string_field@@Base+0x5c>
   21f3c:	cmp	r0, #0
   21f40:	bne	21fa0 <flatcc_verify_union_field@@Base+0x10c>
   21f44:	ldr	r1, [sp, #28]
   21f48:	cmp	r1, #0
   21f4c:	beq	21fa0 <flatcc_verify_union_field@@Base+0x10c>
   21f50:	ldm	r5, {r0, r2, r3}
   21f54:	str	r1, [sp, #20]
   21f58:	stmib	sp, {r0, r2, r3}
   21f5c:	ldr	r0, [r5]
   21f60:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   21f64:	str	r0, [sp, #24]
   21f68:	ldrb	r0, [r4, r6]
   21f6c:	strb	r0, [sp, #16]
   21f70:	add	r0, sp, #4
   21f74:	blx	r8
   21f78:	sub	sp, fp, #24
   21f7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21f80:	mov	r0, r5
   21f84:	mov	r1, r7
   21f88:	bl	21fc8 <flatcc_verify_union_field@@Base+0x134>
   21f8c:	mov	r1, r0
   21f90:	mov	r0, #23
   21f94:	movw	r2, #65535	; 0xffff
   21f98:	tst	r1, r2
   21f9c:	beq	21fa8 <flatcc_verify_union_field@@Base+0x114>
   21fa0:	sub	sp, fp, #24
   21fa4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21fa8:	cmp	r9, #0
   21fac:	movwne	r9, #21
   21fb0:	mov	r0, r9
   21fb4:	sub	sp, fp, #24
   21fb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21fbc:	mov	r0, #0
   21fc0:	sub	sp, fp, #24
   21fc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21fc8:	push	{fp, lr}
   21fcc:	mov	fp, sp
   21fd0:	mov	r2, #4
   21fd4:	add	r1, r2, r1, lsl #1
   21fd8:	uxth	r1, r1
   21fdc:	ldrh	r3, [r0, #22]
   21fe0:	mov	r2, #0
   21fe4:	cmp	r1, r3
   21fe8:	bcs	21ff8 <flatcc_verify_union_field@@Base+0x164>
   21fec:	ldr	r0, [r0, #12]
   21ff0:	bl	222fc <flatcc_verify_union_vector_field@@Base+0x2fc>
   21ff4:	mov	r2, r0
   21ff8:	mov	r0, r2
   21ffc:	pop	{fp, pc}

00022000 <flatcc_verify_union_vector_field@@Base>:
   22000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22004:	add	fp, sp, #28
   22008:	sub	sp, sp, #20
   2200c:	mov	r8, r3
   22010:	mov	r6, r2
   22014:	mov	sl, r1
   22018:	mov	r5, r0
   2201c:	sub	r0, r1, #1
   22020:	uxth	r4, r0
   22024:	mov	r0, r5
   22028:	mov	r1, r4
   2202c:	bl	21fc8 <flatcc_verify_union_field@@Base+0x134>
   22030:	movw	r1, #65535	; 0xffff
   22034:	tst	r0, r1
   22038:	beq	22084 <flatcc_verify_union_vector_field@@Base+0x84>
   2203c:	mvn	r9, #0
   22040:	mov	r7, #1
   22044:	stm	sp, {r7, r9}
   22048:	mov	r0, r5
   2204c:	mov	r1, r4
   22050:	mov	r2, r6
   22054:	mov	r3, #1
   22058:	bl	21460 <flatcc_verify_vector_field@@Base>
   2205c:	cmp	r0, #0
   22060:	beq	220ac <flatcc_verify_union_vector_field@@Base+0xac>
   22064:	stm	sp, {r7, r9}
   22068:	mov	r0, r5
   2206c:	mov	r1, r4
   22070:	mov	r2, r6
   22074:	mov	r3, #1
   22078:	bl	21460 <flatcc_verify_vector_field@@Base>
   2207c:	sub	sp, fp, #28
   22080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22084:	mov	r0, r5
   22088:	mov	r1, sl
   2208c:	bl	21fc8 <flatcc_verify_union_field@@Base+0x134>
   22090:	cmp	r6, #0
   22094:	beq	2203c <flatcc_verify_union_vector_field@@Base+0x3c>
   22098:	uxth	r1, r0
   2209c:	mov	r0, #22
   220a0:	cmp	r1, #0
   220a4:	beq	22144 <flatcc_verify_union_vector_field@@Base+0x144>
   220a8:	b	2203c <flatcc_verify_union_vector_field@@Base+0x3c>
   220ac:	mov	r0, r5
   220b0:	mov	r1, r4
   220b4:	bl	21d50 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   220b8:	cmp	r0, #0
   220bc:	beq	2214c <flatcc_verify_union_vector_field@@Base+0x14c>
   220c0:	mov	r4, r0
   220c4:	mov	r1, #0
   220c8:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   220cc:	add	r4, r0, r4
   220d0:	mov	r0, r4
   220d4:	mov	r1, #0
   220d8:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   220dc:	mov	r9, r0
   220e0:	add	r3, sp, #16
   220e4:	mov	r0, r5
   220e8:	mov	r1, sl
   220ec:	mov	r2, r6
   220f0:	bl	21368 <flatcc_verify_string_field@@Base+0x5c>
   220f4:	cmp	r0, #0
   220f8:	bne	22144 <flatcc_verify_union_vector_field@@Base+0x144>
   220fc:	ldr	r6, [sp, #16]
   22100:	cmp	r6, #0
   22104:	beq	22144 <flatcc_verify_union_vector_field@@Base+0x144>
   22108:	ldm	r5, {r7, sl}
   2210c:	mov	r0, r7
   22110:	mov	r1, r6
   22114:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   22118:	mov	r3, r0
   2211c:	ldr	r0, [r5, #8]
   22120:	add	r1, r4, #4
   22124:	str	r9, [sp]
   22128:	str	r1, [sp, #4]
   2212c:	str	r0, [sp, #8]
   22130:	str	r8, [sp, #12]
   22134:	mov	r0, r7
   22138:	mov	r1, sl
   2213c:	mov	r2, r6
   22140:	bl	22158 <flatcc_verify_union_vector_field@@Base+0x158>
   22144:	sub	sp, fp, #28
   22148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2214c:	mov	r0, #0
   22150:	sub	sp, fp, #28
   22154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2215c:	add	fp, sp, #28
   22160:	sub	sp, sp, #36	; 0x24
   22164:	ldr	r8, [fp, #16]
   22168:	cmp	r8, #1
   2216c:	blt	22204 <flatcc_verify_union_vector_field@@Base+0x204>
   22170:	mov	r6, r3
   22174:	mov	r4, r2
   22178:	mov	r7, r1
   2217c:	mov	r9, r0
   22180:	mvn	r0, #-1073741824	; 0xc0000000
   22184:	mov	r1, #4
   22188:	str	r1, [sp]
   2218c:	str	r1, [sp, #4]
   22190:	str	r0, [sp, #8]
   22194:	mov	r0, r9
   22198:	mov	r1, r7
   2219c:	bl	214d0 <flatcc_verify_vector_field@@Base+0x70>
   221a0:	mov	r5, r0
   221a4:	cmp	r0, #0
   221a8:	bne	22208 <flatcc_verify_union_vector_field@@Base+0x208>
   221ac:	ldr	sl, [fp, #8]
   221b0:	add	r4, r6, r4
   221b4:	mov	r0, r9
   221b8:	mov	r1, r4
   221bc:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   221c0:	mov	r5, #34	; 0x22
   221c4:	cmp	r0, sl
   221c8:	bne	22208 <flatcc_verify_union_vector_field@@Base+0x208>
   221cc:	mov	r6, r0
   221d0:	sub	r0, r8, #1
   221d4:	str	r0, [sp, #20]
   221d8:	str	r7, [sp, #16]
   221dc:	str	r9, [sp, #12]
   221e0:	mov	r5, #0
   221e4:	cmp	r6, #0
   221e8:	beq	22208 <flatcc_verify_union_vector_field@@Base+0x208>
   221ec:	ldr	r0, [fp, #20]
   221f0:	ldr	sl, [fp, #12]
   221f4:	add	r7, r4, #4
   221f8:	mov	r4, r0
   221fc:	add	r8, sp, #12
   22200:	b	2222c <flatcc_verify_union_vector_field@@Base+0x22c>
   22204:	mov	r5, #3
   22208:	mov	r0, r5
   2220c:	sub	sp, fp, #28
   22210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22214:	cmp	r1, #0
   22218:	bne	22280 <flatcc_verify_union_vector_field@@Base+0x280>
   2221c:	add	sl, sl, #1
   22220:	subs	r6, r6, #1
   22224:	add	r7, r7, #4
   22228:	beq	22208 <flatcc_verify_union_vector_field@@Base+0x208>
   2222c:	mov	r0, r9
   22230:	mov	r1, r7
   22234:	bl	21458 <flatcc_verify_string_field@@Base+0x14c>
   22238:	ldrb	r1, [sl]
   2223c:	cmp	r0, #0
   22240:	beq	22214 <flatcc_verify_union_vector_field@@Base+0x214>
   22244:	cmp	r1, #0
   22248:	beq	22278 <flatcc_verify_union_vector_field@@Base+0x278>
   2224c:	str	r0, [sp, #32]
   22250:	str	r7, [sp, #28]
   22254:	strb	r1, [sp, #24]
   22258:	mov	r0, r8
   2225c:	blx	r4
   22260:	cmp	r0, #0
   22264:	beq	2221c <flatcc_verify_union_vector_field@@Base+0x21c>
   22268:	add	r0, sp, #12
   2226c:	blx	r4
   22270:	mov	r5, r0
   22274:	b	22208 <flatcc_verify_union_vector_field@@Base+0x208>
   22278:	mov	r5, #33	; 0x21
   2227c:	b	22208 <flatcc_verify_union_vector_field@@Base+0x208>
   22280:	mov	r5, #32
   22284:	b	22208 <flatcc_verify_union_vector_field@@Base+0x208>
   22288:	mov	r3, r0
   2228c:	add	r2, r2, r1
   22290:	mov	r0, #0
   22294:	cmp	r2, r1
   22298:	bxls	lr
   2229c:	add	r1, r2, #4
   222a0:	cmp	r1, r3
   222a4:	andls	r0, r2, #3
   222a8:	clzls	r0, r0
   222ac:	lsrls	r0, r0, #5
   222b0:	bx	lr
   222b4:	ldr	r0, [r0]
   222b8:	b	222bc <flatcc_verify_union_vector_field@@Base+0x2bc>
   222bc:	bx	lr
   222c0:	mov	ip, r0
   222c4:	cmp	r3, #4
   222c8:	movls	r3, #4
   222cc:	add	r2, r2, r1
   222d0:	mov	r0, #0
   222d4:	cmp	r2, r1
   222d8:	bxls	lr
   222dc:	add	r1, r2, #4
   222e0:	cmp	r1, ip
   222e4:	subls	r0, r3, #1
   222e8:	orrls	r0, r0, #3
   222ec:	andls	r0, r0, r1
   222f0:	clzls	r0, r0
   222f4:	lsrls	r0, r0, #5
   222f8:	bx	lr
   222fc:	add	r0, r0, r1
   22300:	b	22304 <flatcc_verify_union_vector_field@@Base+0x304>
   22304:	ldrh	r0, [r0]
   22308:	b	2230c <flatcc_verify_union_vector_field@@Base+0x30c>
   2230c:	bx	lr
   22310:	bx	lr
   22314:	ldr	r0, [r0]
   22318:	b	2231c <flatcc_verify_union_vector_field@@Base+0x31c>
   2231c:	bx	lr

00022320 <__libc_csu_init@@Base>:
   22320:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22324:	mov	r7, r0
   22328:	ldr	r6, [pc, #72]	; 22378 <__libc_csu_init@@Base+0x58>
   2232c:	ldr	r5, [pc, #72]	; 2237c <__libc_csu_init@@Base+0x5c>
   22330:	add	r6, pc, r6
   22334:	add	r5, pc, r5
   22338:	sub	r6, r6, r5
   2233c:	mov	r8, r1
   22340:	mov	r9, r2
   22344:	bl	12e6c <strcmp@plt-0x20>
   22348:	asrs	r6, r6, #2
   2234c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   22350:	mov	r4, #0
   22354:	add	r4, r4, #1
   22358:	ldr	r3, [r5], #4
   2235c:	mov	r2, r9
   22360:	mov	r1, r8
   22364:	mov	r0, r7
   22368:	blx	r3
   2236c:	cmp	r6, r4
   22370:	bne	22354 <__libc_csu_init@@Base+0x34>
   22374:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22378:	ldrdeq	r6, [r1], -r4
   2237c:	andeq	r6, r1, ip, asr #23

00022380 <__libc_csu_fini@@Base>:
   22380:	bx	lr

Disassembly of section .fini:

00022384 <.fini>:
   22384:	push	{r3, lr}
   22388:	pop	{r3, pc}
