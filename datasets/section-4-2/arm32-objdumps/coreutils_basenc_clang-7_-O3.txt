
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	110d0 <__assert_fail@plt+0x48>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <calloc@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <calloc@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	sl, r1, r0, ror #3

00010e24 <calloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #106496	; 0x1a000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <fputs_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #106496	; 0x1a000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <raise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #106496	; 0x1a000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <strcmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #106496	; 0x1a000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <posix_fadvise64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #106496	; 0x1a000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #106496	; 0x1a000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <memmove@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #106496	; 0x1a000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #106496	; 0x1a000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <_exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #106496	; 0x1a000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <memcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #106496	; 0x1a000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <mbsinit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #106496	; 0x1a000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <fwrite_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #106496	; 0x1a000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <memcmp@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #106496	; 0x1a000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <dcgettext@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #106496	; 0x1a000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <realloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #106496	; 0x1a000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <textdomain@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #106496	; 0x1a000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <iswprint@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #106496	; 0x1a000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <fwrite@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #106496	; 0x1a000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <lseek64@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #106496	; 0x1a000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <__ctype_get_mb_cur_max@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #106496	; 0x1a000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <__fpending@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #106496	; 0x1a000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <mbrtowc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #106496	; 0x1a000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <error@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #106496	; 0x1a000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <malloc@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #106496	; 0x1a000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <__libc_start_main@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #106496	; 0x1a000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <__freading@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #106496	; 0x1a000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <__gmon_start__@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #106496	; 0x1a000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <getopt_long@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #106496	; 0x1a000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <__ctype_b_loc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #106496	; 0x1a000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <exit@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #106496	; 0x1a000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <strlen@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #106496	; 0x1a000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <strchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #106496	; 0x1a000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <__errno_location@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #106496	; 0x1a000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <__cxa_atexit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #106496	; 0x1a000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <memset@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #106496	; 0x1a000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <__printf_chk@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #106496	; 0x1a000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <fileno@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #106496	; 0x1a000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__fprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #106496	; 0x1a000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

00010fec <memchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #106496	; 0x1a000
   10ff4:	ldr	pc, [ip, #176]!	; 0xb0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #106496	; 0x1a000
   11000:	ldr	pc, [ip, #168]!	; 0xa8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #106496	; 0x1a000
   1100c:	ldr	pc, [ip, #160]!	; 0xa0

00011010 <__overflow@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #106496	; 0x1a000
   11018:	ldr	pc, [ip, #152]!	; 0x98

0001101c <setlocale@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #106496	; 0x1a000
   11024:	ldr	pc, [ip, #144]!	; 0x90

00011028 <strrchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #106496	; 0x1a000
   11030:	ldr	pc, [ip, #136]!	; 0x88

00011034 <nl_langinfo@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #106496	; 0x1a000
   1103c:	ldr	pc, [ip, #128]!	; 0x80

00011040 <__strtoll_internal@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #106496	; 0x1a000
   11048:	ldr	pc, [ip, #120]!	; 0x78

0001104c <fopen64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #106496	; 0x1a000
   11054:	ldr	pc, [ip, #112]!	; 0x70

00011058 <bindtextdomain@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #106496	; 0x1a000
   11060:	ldr	pc, [ip, #104]!	; 0x68

00011064 <fread_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #106496	; 0x1a000
   1106c:	ldr	pc, [ip, #96]!	; 0x60

00011070 <strncmp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #106496	; 0x1a000
   11078:	ldr	pc, [ip, #88]!	; 0x58

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #106496	; 0x1a000
   11084:	ldr	pc, [ip, #80]!	; 0x50

00011088 <__assert_fail@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #106496	; 0x1a000
   11090:	ldr	pc, [ip, #72]!	; 0x48

Disassembly of section .text:

00011094 <.text>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <__assert_fail@plt+0x3c>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <__assert_fail@plt+0x40>
   110b8:	ldr	r3, [pc, #12]	; 110cc <__assert_fail@plt+0x44>
   110bc:	bl	10f44 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	andeq	r8, r1, r0, lsr #31
   110c8:	andeq	r1, r1, r8, lsl r5
   110cc:	andeq	r8, r1, r0, asr #30
   110d0:	ldr	r3, [pc, #20]	; 110ec <__assert_fail@plt+0x64>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <__assert_fail@plt+0x68>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10f5c <__gmon_start__@plt>
   110ec:	andeq	r9, r1, r0, lsr #30
   110f0:	ldrdeq	r0, [r0], -ip
   110f4:	ldr	r0, [pc, #24]	; 11114 <__assert_fail@plt+0x8c>
   110f8:	ldr	r3, [pc, #24]	; 11118 <__assert_fail@plt+0x90>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__assert_fail@plt+0x94>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	fp, r2, r0, lsr r1
   11118:	andeq	fp, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <__assert_fail@plt+0xc4>
   11124:	ldr	r1, [pc, #36]	; 11150 <__assert_fail@plt+0xc8>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0xcc>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	fp, r2, r0, lsr r1
   11150:	andeq	fp, r2, r0, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <__assert_fail@plt+0xf4>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <__assert_fail@plt+0x6c>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	fp, r2, r4, asr r1
   11180:	b	11120 <__assert_fail@plt+0x98>
   11184:	push	{fp, lr}
   11188:	mov	fp, sp
   1118c:	sub	sp, sp, #56	; 0x38
   11190:	mov	r4, r0
   11194:	cmp	r0, #0
   11198:	bne	114d4 <__assert_fail@plt+0x44c>
   1119c:	movw	r1, #36859	; 0x8ffb
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10ec0 <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	movw	r0, #45428	; 0xb174
   111b8:	movt	r0, #2
   111bc:	ldr	r2, [r0]
   111c0:	mov	r0, #1
   111c4:	bl	10fc8 <__printf_chk@plt>
   111c8:	movw	r1, #36889	; 0x9019
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10ec0 <dcgettext@plt>
   111dc:	movw	r7, #45388	; 0xb14c
   111e0:	movt	r7, #2
   111e4:	ldr	r1, [r7]
   111e8:	bl	10e30 <fputs_unlocked@plt>
   111ec:	movw	r1, #38358	; 0x95d6
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10ec0 <dcgettext@plt>
   11200:	ldr	r1, [r7]
   11204:	bl	10e30 <fputs_unlocked@plt>
   11208:	movw	r1, #38414	; 0x960e
   1120c:	mov	r0, #0
   11210:	mov	r2, #5
   11214:	movt	r1, #1
   11218:	bl	10ec0 <dcgettext@plt>
   1121c:	ldr	r1, [r7]
   11220:	bl	10e30 <fputs_unlocked@plt>
   11224:	movw	r1, #36959	; 0x905f
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	movt	r1, #1
   11234:	bl	10ec0 <dcgettext@plt>
   11238:	ldr	r1, [r7]
   1123c:	bl	10e30 <fputs_unlocked@plt>
   11240:	movw	r1, #37029	; 0x90a5
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10ec0 <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e30 <fputs_unlocked@plt>
   1125c:	movw	r1, #37100	; 0x90ec
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10ec0 <dcgettext@plt>
   11270:	ldr	r1, [r7]
   11274:	bl	10e30 <fputs_unlocked@plt>
   11278:	movw	r1, #37170	; 0x9132
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10ec0 <dcgettext@plt>
   1128c:	ldr	r1, [r7]
   11290:	bl	10e30 <fputs_unlocked@plt>
   11294:	movw	r1, #37244	; 0x917c
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10ec0 <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10e30 <fputs_unlocked@plt>
   112b0:	movw	r1, #37302	; 0x91b6
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10ec0 <dcgettext@plt>
   112c4:	ldr	r1, [r7]
   112c8:	bl	10e30 <fputs_unlocked@plt>
   112cc:	movw	r1, #37376	; 0x9200
   112d0:	mov	r0, #0
   112d4:	mov	r2, #5
   112d8:	movt	r1, #1
   112dc:	bl	10ec0 <dcgettext@plt>
   112e0:	ldr	r1, [r7]
   112e4:	bl	10e30 <fputs_unlocked@plt>
   112e8:	movw	r1, #37451	; 0x924b
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10ec0 <dcgettext@plt>
   112fc:	ldr	r1, [r7]
   11300:	bl	10e30 <fputs_unlocked@plt>
   11304:	movw	r1, #37693	; 0x933d
   11308:	mov	r0, #0
   1130c:	mov	r2, #5
   11310:	movt	r1, #1
   11314:	bl	10ec0 <dcgettext@plt>
   11318:	ldr	r1, [r7]
   1131c:	bl	10e30 <fputs_unlocked@plt>
   11320:	movw	r1, #37915	; 0x941b
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10ec0 <dcgettext@plt>
   11334:	ldr	r1, [r7]
   11338:	bl	10e30 <fputs_unlocked@plt>
   1133c:	movw	r1, #37960	; 0x9448
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10ec0 <dcgettext@plt>
   11350:	ldr	r1, [r7]
   11354:	bl	10e30 <fputs_unlocked@plt>
   11358:	movw	r1, #38014	; 0x947e
   1135c:	mov	r0, #0
   11360:	mov	r2, #5
   11364:	movt	r1, #1
   11368:	bl	10ec0 <dcgettext@plt>
   1136c:	ldr	r1, [r7]
   11370:	bl	10e30 <fputs_unlocked@plt>
   11374:	movw	r0, #39392	; 0x99e0
   11378:	mov	r2, #48	; 0x30
   1137c:	mov	r6, sp
   11380:	movw	r5, #38212	; 0x9544
   11384:	movt	r0, #1
   11388:	movt	r5, #1
   1138c:	add	r1, r0, #32
   11390:	add	r3, r0, #16
   11394:	vld1.64	{d18-d19}, [r0], r2
   11398:	vld1.64	{d16-d17}, [r1]
   1139c:	vld1.64	{d20-d21}, [r3]
   113a0:	add	r1, r6, #32
   113a4:	vldr	d22, [r0]
   113a8:	add	r0, r6, #16
   113ac:	vst1.64	{d16-d17}, [r1]
   113b0:	movw	r1, #38489	; 0x9659
   113b4:	vst1.64	{d20-d21}, [r0]
   113b8:	mov	r0, r6
   113bc:	vst1.64	{d18-d19}, [r0], r2
   113c0:	movt	r1, #1
   113c4:	vstr	d22, [r0]
   113c8:	mov	r0, r5
   113cc:	bl	10e48 <strcmp@plt>
   113d0:	cmp	r0, #0
   113d4:	ldrne	r1, [r6, #8]!
   113d8:	cmpne	r1, #0
   113dc:	bne	113c8 <__assert_fail@plt+0x340>
   113e0:	ldr	r6, [r6, #4]
   113e4:	movw	r1, #38584	; 0x96b8
   113e8:	mov	r0, #0
   113ec:	mov	r2, #5
   113f0:	movt	r1, #1
   113f4:	bl	10ec0 <dcgettext@plt>
   113f8:	movw	r2, #38273	; 0x9581
   113fc:	movw	r3, #38607	; 0x96cf
   11400:	mov	r1, r0
   11404:	mov	r0, #1
   11408:	movt	r2, #1
   1140c:	movt	r3, #1
   11410:	bl	10fc8 <__printf_chk@plt>
   11414:	cmp	r6, #0
   11418:	mov	r0, #5
   1141c:	mov	r1, #0
   11420:	moveq	r6, r5
   11424:	bl	1101c <setlocale@plt>
   11428:	cmp	r0, #0
   1142c:	beq	11464 <__assert_fail@plt+0x3dc>
   11430:	movw	r1, #38647	; 0x96f7
   11434:	mov	r2, #3
   11438:	movt	r1, #1
   1143c:	bl	11070 <strncmp@plt>
   11440:	cmp	r0, #0
   11444:	beq	11464 <__assert_fail@plt+0x3dc>
   11448:	movw	r1, #38651	; 0x96fb
   1144c:	mov	r0, #0
   11450:	mov	r2, #5
   11454:	movt	r1, #1
   11458:	bl	10ec0 <dcgettext@plt>
   1145c:	ldr	r1, [r7]
   11460:	bl	10e30 <fputs_unlocked@plt>
   11464:	movw	r1, #38722	; 0x9742
   11468:	mov	r0, #0
   1146c:	mov	r2, #5
   11470:	movt	r1, #1
   11474:	bl	10ec0 <dcgettext@plt>
   11478:	movw	r2, #38607	; 0x96cf
   1147c:	mov	r1, r0
   11480:	mov	r0, #1
   11484:	mov	r3, r5
   11488:	movt	r2, #1
   1148c:	bl	10fc8 <__printf_chk@plt>
   11490:	movw	r1, #38749	; 0x975d
   11494:	mov	r0, #0
   11498:	mov	r2, #5
   1149c:	movt	r1, #1
   114a0:	bl	10ec0 <dcgettext@plt>
   114a4:	movw	r3, #38799	; 0x978f
   114a8:	mov	r1, r0
   114ac:	movw	r0, #38517	; 0x9675
   114b0:	cmp	r6, r5
   114b4:	mov	r2, r6
   114b8:	movt	r0, #1
   114bc:	movt	r3, #1
   114c0:	moveq	r3, r0
   114c4:	mov	r0, #1
   114c8:	bl	10fc8 <__printf_chk@plt>
   114cc:	mov	r0, r4
   114d0:	bl	10f80 <exit@plt>
   114d4:	movw	r0, #45376	; 0xb140
   114d8:	movw	r1, #36820	; 0x8fd4
   114dc:	mov	r2, #5
   114e0:	movt	r0, #2
   114e4:	movt	r1, #1
   114e8:	ldr	r5, [r0]
   114ec:	mov	r0, #0
   114f0:	bl	10ec0 <dcgettext@plt>
   114f4:	mov	r2, r0
   114f8:	movw	r0, #45428	; 0xb174
   114fc:	mov	r1, #1
   11500:	movt	r0, #2
   11504:	ldr	r3, [r0]
   11508:	mov	r0, r5
   1150c:	bl	10fe0 <__fprintf_chk@plt>
   11510:	mov	r0, r4
   11514:	bl	10f80 <exit@plt>
   11518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1151c:	add	fp, sp, #28
   11520:	sub	sp, sp, #36	; 0x24
   11524:	mov	r5, r0
   11528:	ldr	r0, [r1]
   1152c:	mov	r4, r1
   11530:	bl	14468 <__assert_fail@plt+0x33e0>
   11534:	movw	r1, #38799	; 0x978f
   11538:	mov	r0, #6
   1153c:	movt	r1, #1
   11540:	bl	1101c <setlocale@plt>
   11544:	movw	r6, #38277	; 0x9585
   11548:	movw	r1, #38219	; 0x954b
   1154c:	movt	r6, #1
   11550:	movt	r1, #1
   11554:	mov	r0, r6
   11558:	bl	11058 <bindtextdomain@plt>
   1155c:	mov	r0, r6
   11560:	bl	10ed8 <textdomain@plt>
   11564:	movw	r0, #16748	; 0x416c
   11568:	movt	r0, #1
   1156c:	bl	18fa4 <__assert_fail@plt+0x7f1c>
   11570:	mov	r0, #0
   11574:	movw	r7, #38243	; 0x9563
   11578:	movw	r6, #39168	; 0x9900
   1157c:	mov	sl, #0
   11580:	mov	r9, #76	; 0x4c
   11584:	str	r0, [sp, #20]
   11588:	mov	r0, #0
   1158c:	movt	r7, #1
   11590:	movt	r6, #1
   11594:	str	r0, [sp, #16]
   11598:	mov	r0, #0
   1159c:	b	115a4 <__assert_fail@plt+0x51c>
   115a0:	mov	r0, r8
   115a4:	mov	r8, r0
   115a8:	mov	r0, r5
   115ac:	mov	r1, r4
   115b0:	mov	r2, r7
   115b4:	mov	r3, r6
   115b8:	str	sl, [sp]
   115bc:	bl	10f68 <getopt_long@plt>
   115c0:	sub	r1, r0, #256	; 0x100
   115c4:	cmp	r1, #8
   115c8:	bcc	115a4 <__assert_fail@plt+0x51c>
   115cc:	cmp	r0, #99	; 0x63
   115d0:	ble	11660 <__assert_fail@plt+0x5d8>
   115d4:	cmp	r0, #100	; 0x64
   115d8:	beq	11648 <__assert_fail@plt+0x5c0>
   115dc:	cmp	r0, #105	; 0x69
   115e0:	beq	11654 <__assert_fail@plt+0x5cc>
   115e4:	cmp	r0, #119	; 0x77
   115e8:	bne	11790 <__assert_fail@plt+0x708>
   115ec:	movw	r0, #45392	; 0xb150
   115f0:	movw	r1, #38799	; 0x978f
   115f4:	mov	r2, #10
   115f8:	add	r3, sp, #24
   115fc:	movt	r0, #2
   11600:	movt	r1, #1
   11604:	ldr	r0, [r0]
   11608:	str	r1, [sp]
   1160c:	mov	r1, #0
   11610:	bl	17060 <__assert_fail@plt+0x5fd8>
   11614:	cmp	r0, #1
   11618:	bhi	11890 <__assert_fail@plt+0x808>
   1161c:	ldr	r1, [sp, #28]
   11620:	cmn	r1, #1
   11624:	ble	11890 <__assert_fail@plt+0x808>
   11628:	ldr	r2, [sp, #24]
   1162c:	mvn	r3, #-2147483648	; 0x80000000
   11630:	subs	r3, r3, r2
   11634:	rscs	r1, r1, #0
   11638:	movwlt	r2, #0
   1163c:	subs	r9, r0, #1
   11640:	movne	r9, r2
   11644:	b	115a0 <__assert_fail@plt+0x518>
   11648:	mov	r0, #1
   1164c:	str	r0, [sp, #20]
   11650:	b	115a0 <__assert_fail@plt+0x518>
   11654:	mov	r0, #1
   11658:	str	r0, [sp, #16]
   1165c:	b	115a0 <__assert_fail@plt+0x518>
   11660:	cmn	r0, #3
   11664:	beq	11734 <__assert_fail@plt+0x6ac>
   11668:	cmn	r0, #2
   1166c:	beq	11788 <__assert_fail@plt+0x700>
   11670:	cmn	r0, #1
   11674:	bne	11790 <__assert_fail@plt+0x708>
   11678:	sub	r0, r8, #256	; 0x100
   1167c:	cmp	r0, #8
   11680:	bcs	11798 <__assert_fail@plt+0x710>
   11684:	movw	r1, #39744	; 0x9b40
   11688:	movw	r3, #39712	; 0x9b20
   1168c:	movw	r7, #39776	; 0x9b60
   11690:	movw	r6, #39808	; 0x9b80
   11694:	movw	r2, #45400	; 0xb158
   11698:	movt	r3, #1
   1169c:	movt	r7, #1
   116a0:	movt	r6, #1
   116a4:	movt	r1, #1
   116a8:	movt	r2, #2
   116ac:	ldr	ip, [r1, r0, lsl #2]
   116b0:	movw	r1, #39840	; 0x9ba0
   116b4:	ldr	r3, [r3, r0, lsl #2]
   116b8:	ldr	r7, [r7, r0, lsl #2]
   116bc:	ldr	r6, [r6, r0, lsl #2]
   116c0:	movt	r1, #1
   116c4:	ldr	r0, [r1, r0, lsl #2]
   116c8:	stm	r2, {r3, ip}
   116cc:	str	r7, [r2, #8]
   116d0:	str	r6, [r2, #12]
   116d4:	movw	r6, #45368	; 0xb138
   116d8:	movt	r6, #2
   116dc:	str	r0, [r2, #16]
   116e0:	ldr	r0, [r6]
   116e4:	sub	r1, r5, r0
   116e8:	cmp	r1, #2
   116ec:	blt	117c4 <__assert_fail@plt+0x73c>
   116f0:	movw	r1, #38338	; 0x95c2
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	movt	r1, #1
   11700:	bl	10ec0 <dcgettext@plt>
   11704:	mov	r5, r0
   11708:	ldr	r0, [r6]
   1170c:	add	r0, r4, r0, lsl #2
   11710:	ldr	r0, [r0, #4]
   11714:	bl	163e4 <__assert_fail@plt+0x535c>
   11718:	mov	r3, r0
   1171c:	mov	r0, #0
   11720:	mov	r1, #0
   11724:	mov	r2, r5
   11728:	bl	10f2c <error@plt>
   1172c:	mov	r0, #1
   11730:	bl	11184 <__assert_fail@plt+0xfc>
   11734:	movw	r0, #45288	; 0xb0e8
   11738:	movw	r2, #38303	; 0x959f
   1173c:	mov	r1, #0
   11740:	movw	r7, #38287	; 0x958f
   11744:	movt	r0, #2
   11748:	movt	r2, #1
   1174c:	str	r1, [sp, #8]
   11750:	movw	r1, #38212	; 0x9544
   11754:	movt	r7, #1
   11758:	ldr	r3, [r0]
   1175c:	movw	r0, #45388	; 0xb14c
   11760:	str	r2, [sp, #4]
   11764:	movw	r2, #38273	; 0x9581
   11768:	movt	r1, #1
   1176c:	str	r7, [sp]
   11770:	movt	r0, #2
   11774:	movt	r2, #1
   11778:	ldr	r0, [r0]
   1177c:	bl	16888 <__assert_fail@plt+0x5800>
   11780:	mov	r0, #0
   11784:	bl	10f80 <exit@plt>
   11788:	mov	r0, #0
   1178c:	bl	11184 <__assert_fail@plt+0xfc>
   11790:	mov	r0, #1
   11794:	bl	11184 <__assert_fail@plt+0xfc>
   11798:	movw	r1, #38316	; 0x95ac
   1179c:	mov	r0, #0
   117a0:	mov	r2, #5
   117a4:	movt	r1, #1
   117a8:	bl	10ec0 <dcgettext@plt>
   117ac:	mov	r2, r0
   117b0:	mov	r0, #0
   117b4:	mov	r1, #0
   117b8:	bl	10f2c <error@plt>
   117bc:	mov	r0, #1
   117c0:	bl	11184 <__assert_fail@plt+0xfc>
   117c4:	cmp	r0, r5
   117c8:	movw	r1, #40577	; 0x9e81
   117cc:	ldrlt	r4, [r4, r0, lsl #2]
   117d0:	movt	r1, #1
   117d4:	movwge	r4, #40577	; 0x9e81
   117d8:	movtge	r4, #1
   117dc:	mov	r0, r4
   117e0:	bl	10e48 <strcmp@plt>
   117e4:	cmp	r0, #0
   117e8:	bne	117fc <__assert_fail@plt+0x774>
   117ec:	movw	r0, #45384	; 0xb148
   117f0:	movt	r0, #2
   117f4:	ldr	r5, [r0]
   117f8:	b	11848 <__assert_fail@plt+0x7c0>
   117fc:	movw	r1, #38355	; 0x95d3
   11800:	mov	r0, r4
   11804:	movt	r1, #1
   11808:	bl	1104c <fopen64@plt>
   1180c:	mov	r5, r0
   11810:	cmp	r0, #0
   11814:	bne	11848 <__assert_fail@plt+0x7c0>
   11818:	bl	10fa4 <__errno_location@plt>
   1181c:	ldr	r5, [r0]
   11820:	mov	r0, #0
   11824:	mov	r1, #3
   11828:	mov	r2, r4
   1182c:	bl	16138 <__assert_fail@plt+0x50b0>
   11830:	movw	r2, #38252	; 0x956c
   11834:	mov	r3, r0
   11838:	mov	r0, #1
   1183c:	mov	r1, r5
   11840:	movt	r2, #1
   11844:	bl	10f2c <error@plt>
   11848:	mov	r0, r5
   1184c:	mov	r1, #2
   11850:	bl	1425c <__assert_fail@plt+0x31d4>
   11854:	movw	r0, #45388	; 0xb14c
   11858:	movt	r0, #2
   1185c:	ldr	r2, [r0]
   11860:	ldr	r0, [sp, #20]
   11864:	tst	r0, #1
   11868:	beq	11880 <__assert_fail@plt+0x7f8>
   1186c:	ldr	r0, [sp, #16]
   11870:	mov	r1, r4
   11874:	and	r3, r0, #1
   11878:	mov	r0, r5
   1187c:	bl	12520 <__assert_fail@plt+0x1498>
   11880:	mov	r0, r5
   11884:	mov	r1, r4
   11888:	mov	r3, r9
   1188c:	bl	127cc <__assert_fail@plt+0x1744>
   11890:	movw	r1, #38255	; 0x956f
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	movt	r1, #1
   118a0:	bl	10ec0 <dcgettext@plt>
   118a4:	mov	r4, r0
   118a8:	movw	r0, #45392	; 0xb150
   118ac:	movt	r0, #2
   118b0:	ldr	r0, [r0]
   118b4:	bl	163e4 <__assert_fail@plt+0x535c>
   118b8:	movw	r2, #38248	; 0x9568
   118bc:	str	r0, [sp]
   118c0:	mov	r0, #1
   118c4:	mov	r1, #0
   118c8:	mov	r3, r4
   118cc:	movt	r2, #1
   118d0:	bl	10f2c <error@plt>
   118d4:	movw	r1, #21846	; 0x5556
   118d8:	add	r0, r0, #2
   118dc:	movt	r1, #21845	; 0x5555
   118e0:	smmul	r0, r0, r1
   118e4:	add	r0, r0, r0, lsr #31
   118e8:	lsl	r0, r0, #2
   118ec:	bx	lr
   118f0:	add	r0, r0, #4
   118f4:	b	13780 <__assert_fail@plt+0x26f8>
   118f8:	push	{r4, sl, fp, lr}
   118fc:	add	fp, sp, #8
   11900:	sub	sp, sp, #8
   11904:	mov	r4, r0
   11908:	ldr	r0, [fp, #8]
   1190c:	str	r0, [sp]
   11910:	add	r0, r4, #4
   11914:	bl	1378c <__assert_fail@plt+0x2704>
   11918:	ldr	r1, [r4, #4]
   1191c:	str	r1, [r4]
   11920:	sub	sp, fp, #8
   11924:	pop	{r4, sl, fp, pc}
   11928:	mov	r1, r0
   1192c:	mov	r0, #1
   11930:	cmp	r1, #46	; 0x2e
   11934:	bgt	1194c <__assert_fail@plt+0x8c4>
   11938:	cmp	r1, #43	; 0x2b
   1193c:	beq	11964 <__assert_fail@plt+0x8dc>
   11940:	cmp	r1, #45	; 0x2d
   11944:	bne	1195c <__assert_fail@plt+0x8d4>
   11948:	bx	lr
   1194c:	cmp	r1, #47	; 0x2f
   11950:	beq	11964 <__assert_fail@plt+0x8dc>
   11954:	cmp	r1, #95	; 0x5f
   11958:	bxeq	lr
   1195c:	mov	r0, r1
   11960:	b	13760 <__assert_fail@plt+0x26d8>
   11964:	mov	r0, #0
   11968:	bx	lr
   1196c:	push	{r4, r5, fp, lr}
   11970:	add	fp, sp, #8
   11974:	mov	r4, r3
   11978:	mov	r5, r2
   1197c:	bl	13514 <__assert_fail@plt+0x248c>
   11980:	b	11988 <__assert_fail@plt+0x900>
   11984:	add	r5, r5, #1
   11988:	cmp	r4, #0
   1198c:	popeq	{r4, r5, fp, pc}
   11990:	ldrb	r0, [r5]
   11994:	sub	r4, r4, #1
   11998:	cmp	r0, #43	; 0x2b
   1199c:	beq	119b0 <__assert_fail@plt+0x928>
   119a0:	cmp	r0, #47	; 0x2f
   119a4:	bne	11984 <__assert_fail@plt+0x8fc>
   119a8:	mov	r0, #95	; 0x5f
   119ac:	b	119b4 <__assert_fail@plt+0x92c>
   119b0:	mov	r0, #45	; 0x2d
   119b4:	strb	r0, [r5]
   119b8:	b	11984 <__assert_fail@plt+0x8fc>
   119bc:	push	{r4, sl, fp, lr}
   119c0:	add	fp, sp, #8
   119c4:	mov	r4, r0
   119c8:	add	r0, r0, #4
   119cc:	bl	13780 <__assert_fail@plt+0x26f8>
   119d0:	movw	r0, #4200	; 0x1068
   119d4:	str	r0, [r4, #20]
   119d8:	movw	r0, #4200	; 0x1068
   119dc:	bl	16aec <__assert_fail@plt+0x5a64>
   119e0:	str	r0, [r4, #16]
   119e4:	pop	{r4, sl, fp, pc}
   119e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   119ec:	add	fp, sp, #24
   119f0:	sub	sp, sp, #8
   119f4:	mov	r5, r0
   119f8:	ldr	r0, [r0, #20]
   119fc:	mov	r8, r3
   11a00:	mov	r6, r2
   11a04:	mov	r7, r1
   11a08:	mov	r4, r5
   11a0c:	cmp	r0, r2
   11a10:	bge	11a30 <__assert_fail@plt+0x9a8>
   11a14:	ldr	r0, [r4, #16]!
   11a18:	lsl	r1, r6, #1
   11a1c:	mov	r2, #1
   11a20:	str	r1, [r4, #4]
   11a24:	bl	16a80 <__assert_fail@plt+0x59f8>
   11a28:	str	r0, [r4]
   11a2c:	b	11a34 <__assert_fail@plt+0x9ac>
   11a30:	ldr	r0, [r4, #16]!
   11a34:	ldr	r9, [fp, #8]
   11a38:	mov	r1, r7
   11a3c:	mov	r2, r6
   11a40:	bl	10e90 <memcpy@plt>
   11a44:	ldr	r1, [r4]
   11a48:	cmp	r6, #0
   11a4c:	beq	11ac4 <__assert_fail@plt+0xa3c>
   11a50:	mov	r0, r6
   11a54:	ldrb	r2, [r1]
   11a58:	cmp	r2, #46	; 0x2e
   11a5c:	bgt	11a84 <__assert_fail@plt+0x9fc>
   11a60:	mov	r3, #43	; 0x2b
   11a64:	cmp	r2, #45	; 0x2d
   11a68:	beq	11a90 <__assert_fail@plt+0xa08>
   11a6c:	cmp	r2, #43	; 0x2b
   11a70:	beq	11aac <__assert_fail@plt+0xa24>
   11a74:	subs	r0, r0, #1
   11a78:	add	r1, r1, #1
   11a7c:	bne	11a54 <__assert_fail@plt+0x9cc>
   11a80:	b	11ac0 <__assert_fail@plt+0xa38>
   11a84:	cmp	r2, #95	; 0x5f
   11a88:	bne	11aa4 <__assert_fail@plt+0xa1c>
   11a8c:	mov	r3, #47	; 0x2f
   11a90:	strb	r3, [r1]
   11a94:	subs	r0, r0, #1
   11a98:	add	r1, r1, #1
   11a9c:	bne	11a54 <__assert_fail@plt+0x9cc>
   11aa0:	b	11ac0 <__assert_fail@plt+0xa38>
   11aa4:	cmp	r2, #47	; 0x2f
   11aa8:	bne	11a74 <__assert_fail@plt+0x9ec>
   11aac:	mov	r0, #0
   11ab0:	str	r0, [r9]
   11ab4:	mov	r0, #0
   11ab8:	sub	sp, fp, #24
   11abc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ac0:	ldr	r1, [r4]
   11ac4:	add	r0, r5, #4
   11ac8:	mov	r2, r6
   11acc:	mov	r3, r8
   11ad0:	str	r9, [sp]
   11ad4:	bl	1378c <__assert_fail@plt+0x2704>
   11ad8:	ldr	r1, [r5, #4]
   11adc:	str	r1, [r5]
   11ae0:	sub	sp, fp, #24
   11ae4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ae8:	movw	r1, #26215	; 0x6667
   11aec:	add	r0, r0, #4
   11af0:	movt	r1, #26214	; 0x6666
   11af4:	smmul	r0, r0, r1
   11af8:	lsr	r1, r0, #1
   11afc:	add	r0, r1, r0, lsr #31
   11b00:	lsl	r0, r0, #3
   11b04:	bx	lr
   11b08:	add	r0, r0, #4
   11b0c:	b	12e5c <__assert_fail@plt+0x1dd4>
   11b10:	push	{r4, sl, fp, lr}
   11b14:	add	fp, sp, #8
   11b18:	sub	sp, sp, #8
   11b1c:	mov	r4, r0
   11b20:	ldr	r0, [fp, #8]
   11b24:	str	r0, [sp]
   11b28:	add	r0, r4, #4
   11b2c:	bl	12e68 <__assert_fail@plt+0x1de0>
   11b30:	ldr	r1, [r4, #4]
   11b34:	str	r1, [r4]
   11b38:	sub	sp, fp, #8
   11b3c:	pop	{r4, sl, fp, pc}
   11b40:	sub	r1, r0, #65	; 0x41
   11b44:	sub	r0, r0, #48	; 0x30
   11b48:	mov	r2, #0
   11b4c:	uxtb	r1, r1
   11b50:	uxtb	r0, r0
   11b54:	cmp	r1, #22
   11b58:	mov	r1, #0
   11b5c:	movwcc	r1, #1
   11b60:	cmp	r0, #10
   11b64:	movwcc	r2, #1
   11b68:	orr	r0, r2, r1
   11b6c:	bx	lr
   11b70:	push	{r4, r5, fp, lr}
   11b74:	add	fp, sp, #8
   11b78:	mov	r4, r3
   11b7c:	mov	r5, r2
   11b80:	bl	12b64 <__assert_fail@plt+0x1adc>
   11b84:	cmp	r4, #0
   11b88:	popeq	{r4, r5, fp, pc}
   11b8c:	movw	r0, #39448	; 0x9a18
   11b90:	movt	r0, #1
   11b94:	ldrb	r1, [r5]
   11b98:	sub	r2, r1, #50	; 0x32
   11b9c:	uxtb	r2, r2
   11ba0:	cmp	r2, #41	; 0x29
   11ba4:	bcs	11bc0 <__assert_fail@plt+0xb38>
   11ba8:	add	r1, r0, r1
   11bac:	subs	r4, r4, #1
   11bb0:	ldrb	r1, [r1, #-50]	; 0xffffffce
   11bb4:	strb	r1, [r5], #1
   11bb8:	bne	11b94 <__assert_fail@plt+0xb0c>
   11bbc:	pop	{r4, r5, fp, pc}
   11bc0:	movw	r0, #38905	; 0x97f9
   11bc4:	movw	r1, #38930	; 0x9812
   11bc8:	movw	r3, #38943	; 0x981f
   11bcc:	mov	r2, #452	; 0x1c4
   11bd0:	movt	r0, #1
   11bd4:	movt	r1, #1
   11bd8:	movt	r3, #1
   11bdc:	bl	11088 <__assert_fail@plt>
   11be0:	push	{r4, sl, fp, lr}
   11be4:	add	fp, sp, #8
   11be8:	mov	r4, r0
   11bec:	add	r0, r0, #4
   11bf0:	bl	12e5c <__assert_fail@plt+0x1dd4>
   11bf4:	movw	r0, #4200	; 0x1068
   11bf8:	str	r0, [r4, #20]
   11bfc:	movw	r0, #4200	; 0x1068
   11c00:	bl	16aec <__assert_fail@plt+0x5a64>
   11c04:	str	r0, [r4, #16]
   11c08:	pop	{r4, sl, fp, pc}
   11c0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11c10:	add	fp, sp, #24
   11c14:	sub	sp, sp, #8
   11c18:	mov	r4, r0
   11c1c:	ldr	r0, [r0, #20]
   11c20:	mov	r8, r3
   11c24:	mov	r9, r2
   11c28:	mov	r7, r1
   11c2c:	mov	r5, r4
   11c30:	cmp	r0, r2
   11c34:	bge	11c64 <__assert_fail@plt+0xbdc>
   11c38:	ldr	r0, [r5, #16]!
   11c3c:	lsl	r1, r9, #1
   11c40:	mov	r2, #1
   11c44:	str	r1, [r5, #4]
   11c48:	bl	16a80 <__assert_fail@plt+0x59f8>
   11c4c:	mov	r1, r0
   11c50:	str	r0, [r5]
   11c54:	ldr	ip, [fp, #8]
   11c58:	cmp	r9, #0
   11c5c:	bne	11c74 <__assert_fail@plt+0xbec>
   11c60:	b	11cc0 <__assert_fail@plt+0xc38>
   11c64:	ldr	r1, [r5, #16]!
   11c68:	ldr	ip, [fp, #8]
   11c6c:	cmp	r9, #0
   11c70:	beq	11cc0 <__assert_fail@plt+0xc38>
   11c74:	movw	r2, #39489	; 0x9a41
   11c78:	mov	r3, r9
   11c7c:	movt	r2, #1
   11c80:	ldrb	r0, [r7]
   11c84:	sub	r3, r3, #1
   11c88:	sub	r6, r0, #48	; 0x30
   11c8c:	uxtb	r6, r6
   11c90:	cmp	r6, #10
   11c94:	subcs	r6, r0, #65	; 0x41
   11c98:	uxtbcs	r6, r6
   11c9c:	cmpcs	r6, #21
   11ca0:	bhi	11cac <__assert_fail@plt+0xc24>
   11ca4:	add	r0, r2, r0
   11ca8:	ldrb	r0, [r0, #-48]	; 0xffffffd0
   11cac:	strb	r0, [r1], #1
   11cb0:	add	r7, r7, #1
   11cb4:	cmp	r3, #0
   11cb8:	bne	11c80 <__assert_fail@plt+0xbf8>
   11cbc:	ldr	r1, [r5]
   11cc0:	add	r0, r4, #4
   11cc4:	mov	r2, r9
   11cc8:	mov	r3, r8
   11ccc:	str	ip, [sp]
   11cd0:	bl	12e68 <__assert_fail@plt+0x1de0>
   11cd4:	ldr	r1, [r4, #4]
   11cd8:	str	r1, [r4]
   11cdc:	sub	sp, fp, #24
   11ce0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ce4:	lsl	r0, r0, #1
   11ce8:	bx	lr
   11cec:	sub	r1, r0, #65	; 0x41
   11cf0:	sub	r0, r0, #48	; 0x30
   11cf4:	mov	r2, #0
   11cf8:	uxtb	r1, r1
   11cfc:	uxtb	r0, r0
   11d00:	cmp	r1, #6
   11d04:	mov	r1, #0
   11d08:	movwcc	r1, #1
   11d0c:	cmp	r0, #10
   11d10:	movwcc	r2, #1
   11d14:	orr	r0, r2, r1
   11d18:	bx	lr
   11d1c:	push	{fp, lr}
   11d20:	mov	fp, sp
   11d24:	cmp	r1, #0
   11d28:	popeq	{fp, pc}
   11d2c:	movw	ip, #39872	; 0x9bc0
   11d30:	movt	ip, #1
   11d34:	ldrb	lr, [r0], #1
   11d38:	subs	r1, r1, #1
   11d3c:	ldrb	r3, [ip, lr, lsr #4]
   11d40:	strb	r3, [r2]
   11d44:	and	r3, lr, #15
   11d48:	ldrb	r3, [ip, r3]
   11d4c:	strb	r3, [r2, #1]
   11d50:	add	r2, r2, #2
   11d54:	bne	11d34 <__assert_fail@plt+0xcac>
   11d58:	pop	{fp, pc}
   11d5c:	push	{r4, sl, fp, lr}
   11d60:	add	fp, sp, #8
   11d64:	mov	r4, r0
   11d68:	movw	r0, #4200	; 0x1068
   11d6c:	str	r0, [r4, #20]
   11d70:	movw	r0, #4200	; 0x1068
   11d74:	bl	16aec <__assert_fail@plt+0x5a64>
   11d78:	str	r0, [r4, #16]
   11d7c:	mov	r0, #0
   11d80:	strb	r0, [r4, #5]
   11d84:	mov	r0, #1
   11d88:	str	r0, [r4]
   11d8c:	pop	{r4, sl, fp, pc}
   11d90:	push	{r4, r5, fp, lr}
   11d94:	add	fp, sp, #8
   11d98:	ldr	ip, [fp, #8]
   11d9c:	mov	r4, #0
   11da0:	cmp	r2, #0
   11da4:	str	r4, [ip]
   11da8:	bne	11dc4 <__assert_fail@plt+0xd3c>
   11dac:	ldrb	r0, [r0, #5]
   11db0:	clz	r0, r0
   11db4:	lsr	r0, r0, #5
   11db8:	pop	{r4, r5, fp, pc}
   11dbc:	eor	r5, r4, #1
   11dc0:	strb	r5, [r0, #5]
   11dc4:	cmp	r2, #0
   11dc8:	moveq	r0, #1
   11dcc:	popeq	{r4, r5, fp, pc}
   11dd0:	ldrb	lr, [r1], #1
   11dd4:	sub	r2, r2, #1
   11dd8:	cmp	lr, #10
   11ddc:	beq	11dc4 <__assert_fail@plt+0xd3c>
   11de0:	sub	r4, lr, #48	; 0x30
   11de4:	uxtb	r5, r4
   11de8:	mvn	r4, #47	; 0x2f
   11dec:	cmp	r5, #10
   11df0:	bcc	11e0c <__assert_fail@plt+0xd84>
   11df4:	sub	r4, lr, #65	; 0x41
   11df8:	uxtb	r5, r4
   11dfc:	mvn	r4, #54	; 0x36
   11e00:	cmp	r5, #5
   11e04:	movhi	r0, #0
   11e08:	pophi	{r4, r5, fp, pc}
   11e0c:	ldrb	r5, [r0, #5]
   11e10:	add	r4, r4, lr
   11e14:	cmp	r5, #0
   11e18:	beq	11e3c <__assert_fail@plt+0xdb4>
   11e1c:	ldrb	r5, [r0, #4]
   11e20:	add	r5, r4, r5, lsl #4
   11e24:	strb	r5, [r3], #1
   11e28:	ldr	r5, [ip]
   11e2c:	add	r5, r5, #1
   11e30:	str	r5, [ip]
   11e34:	ldrb	r4, [r0, #5]
   11e38:	b	11dbc <__assert_fail@plt+0xd34>
   11e3c:	strb	r4, [r0, #4]
   11e40:	mov	r4, #0
   11e44:	b	11dbc <__assert_fail@plt+0xd34>
   11e48:	lsl	r0, r0, #3
   11e4c:	bx	lr
   11e50:	orr	r0, r0, #1
   11e54:	sub	r0, r0, #49	; 0x31
   11e58:	clz	r0, r0
   11e5c:	lsr	r0, r0, #5
   11e60:	bx	lr
   11e64:	push	{fp, lr}
   11e68:	mov	fp, sp
   11e6c:	cmp	r1, #0
   11e70:	popeq	{fp, pc}
   11e74:	mov	ip, #24
   11e78:	ldrb	lr, [r0], #1
   11e7c:	mov	r3, #49	; 0x31
   11e80:	tst	lr, #64	; 0x40
   11e84:	movweq	r3, #48	; 0x30
   11e88:	tst	lr, #32
   11e8c:	strb	r3, [r2, #1]
   11e90:	mov	r3, #49	; 0x31
   11e94:	movweq	r3, #48	; 0x30
   11e98:	tst	lr, #16
   11e9c:	strb	r3, [r2, #2]
   11ea0:	mov	r3, #49	; 0x31
   11ea4:	movweq	r3, #48	; 0x30
   11ea8:	tst	lr, #8
   11eac:	strb	r3, [r2, #3]
   11eb0:	mov	r3, #49	; 0x31
   11eb4:	movweq	r3, #48	; 0x30
   11eb8:	tst	lr, #4
   11ebc:	strb	r3, [r2, #4]
   11ec0:	mov	r3, #49	; 0x31
   11ec4:	movweq	r3, #48	; 0x30
   11ec8:	tst	lr, #2
   11ecc:	strb	r3, [r2, #5]
   11ed0:	mov	r3, #49	; 0x31
   11ed4:	movweq	r3, #48	; 0x30
   11ed8:	strb	r3, [r2, #6]
   11edc:	sxtb	r3, lr
   11ee0:	bfi	lr, ip, #1, #31
   11ee4:	cmn	r3, #1
   11ee8:	mov	r3, #49	; 0x31
   11eec:	strb	lr, [r2, #7]
   11ef0:	movwgt	r3, #48	; 0x30
   11ef4:	subs	r1, r1, #1
   11ef8:	strb	r3, [r2]
   11efc:	add	r2, r2, #8
   11f00:	bne	11e78 <__assert_fail@plt+0xdf0>
   11f04:	pop	{fp, pc}
   11f08:	push	{r4, sl, fp, lr}
   11f0c:	add	fp, sp, #8
   11f10:	mov	r4, r0
   11f14:	movw	r0, #4200	; 0x1068
   11f18:	str	r0, [r4, #20]
   11f1c:	movw	r0, #4200	; 0x1068
   11f20:	bl	16aec <__assert_fail@plt+0x5a64>
   11f24:	str	r0, [r4, #16]
   11f28:	mov	r0, #0
   11f2c:	strb	r0, [r4, #4]
   11f30:	str	r0, [r4]
   11f34:	pop	{r4, sl, fp, pc}
   11f38:	push	{r4, r5, r6, sl, fp, lr}
   11f3c:	add	fp, sp, #16
   11f40:	ldr	ip, [fp, #8]
   11f44:	mov	lr, #0
   11f48:	cmp	r2, #0
   11f4c:	str	lr, [ip]
   11f50:	beq	11ffc <__assert_fail@plt+0xf74>
   11f54:	add	r1, r1, #1
   11f58:	rsb	r4, r2, #1
   11f5c:	ldrb	r2, [r1, #-1]
   11f60:	cmp	r2, #10
   11f64:	bne	11f7c <__assert_fail@plt+0xef4>
   11f68:	add	r4, r4, #1
   11f6c:	add	r1, r1, #1
   11f70:	cmp	r4, #1
   11f74:	bne	11f5c <__assert_fail@plt+0xed4>
   11f78:	b	11ff4 <__assert_fail@plt+0xf6c>
   11f7c:	orr	r5, r2, #1
   11f80:	cmp	r5, #49	; 0x31
   11f84:	movne	r0, #0
   11f88:	popne	{r4, r5, r6, sl, fp, pc}
   11f8c:	ldr	r5, [r0]
   11f90:	sub	r2, r2, #49	; 0x31
   11f94:	clz	r2, r2
   11f98:	lsr	r2, r2, #5
   11f9c:	cmp	r5, #0
   11fa0:	moveq	r5, #8
   11fa4:	streq	r5, [r0]
   11fa8:	subs	r5, r5, #1
   11fac:	str	r5, [r0]
   11fb0:	ldrb	r6, [r0, #4]
   11fb4:	orr	r2, r6, r2, lsl r5
   11fb8:	strb	r2, [r0, #4]
   11fbc:	beq	11fd0 <__assert_fail@plt+0xf48>
   11fc0:	rsb	r2, r4, #0
   11fc4:	cmp	r4, #0
   11fc8:	bne	11f54 <__assert_fail@plt+0xecc>
   11fcc:	b	11ff4 <__assert_fail@plt+0xf6c>
   11fd0:	strb	r2, [r3], #1
   11fd4:	strb	lr, [r0, #4]
   11fd8:	ldr	r2, [ip]
   11fdc:	add	r2, r2, #1
   11fe0:	str	r2, [ip]
   11fe4:	str	lr, [r0]
   11fe8:	rsb	r2, r4, #0
   11fec:	cmp	r4, #0
   11ff0:	bne	11f54 <__assert_fail@plt+0xecc>
   11ff4:	mov	r0, #1
   11ff8:	pop	{r4, r5, r6, sl, fp, pc}
   11ffc:	ldr	r0, [r0]
   12000:	clz	r0, r0
   12004:	lsr	r0, r0, #5
   12008:	pop	{r4, r5, r6, sl, fp, pc}
   1200c:	push	{r4, sl, fp, lr}
   12010:	add	fp, sp, #8
   12014:	cmp	r1, #0
   12018:	popeq	{r4, sl, fp, pc}
   1201c:	mov	lr, #24
   12020:	mov	ip, #48	; 0x30
   12024:	ldrb	r3, [r0], #1
   12028:	subs	r1, r1, #1
   1202c:	mov	r4, r3
   12030:	bfi	r4, lr, #1, #31
   12034:	strb	r4, [r2]
   12038:	orr	r4, ip, r3, lsr #7
   1203c:	strb	r4, [r2, #7]
   12040:	lsr	r4, r3, #1
   12044:	bfi	r4, lr, #1, #31
   12048:	strb	r4, [r2, #1]
   1204c:	lsr	r4, r3, #2
   12050:	bfi	r4, lr, #1, #31
   12054:	strb	r4, [r2, #2]
   12058:	lsr	r4, r3, #3
   1205c:	bfi	r4, lr, #1, #31
   12060:	strb	r4, [r2, #3]
   12064:	lsr	r4, r3, #4
   12068:	bfi	r4, lr, #1, #31
   1206c:	strb	r4, [r2, #4]
   12070:	lsr	r4, r3, #5
   12074:	lsr	r3, r3, #6
   12078:	bfi	r4, lr, #1, #31
   1207c:	bfi	r3, lr, #1, #31
   12080:	strb	r4, [r2, #5]
   12084:	strb	r3, [r2, #6]
   12088:	add	r2, r2, #8
   1208c:	bne	12024 <__assert_fail@plt+0xf9c>
   12090:	pop	{r4, sl, fp, pc}
   12094:	push	{r4, r5, r6, sl, fp, lr}
   12098:	add	fp, sp, #16
   1209c:	ldr	ip, [fp, #8]
   120a0:	mov	lr, #0
   120a4:	cmp	r2, #0
   120a8:	str	lr, [ip]
   120ac:	beq	12140 <__assert_fail@plt+0x10b8>
   120b0:	add	r1, r1, #1
   120b4:	rsb	r4, r2, #1
   120b8:	ldrb	r2, [r1, #-1]
   120bc:	cmp	r2, #10
   120c0:	bne	120d8 <__assert_fail@plt+0x1050>
   120c4:	add	r4, r4, #1
   120c8:	add	r1, r1, #1
   120cc:	cmp	r4, #1
   120d0:	bne	120b8 <__assert_fail@plt+0x1030>
   120d4:	b	12138 <__assert_fail@plt+0x10b0>
   120d8:	orr	r5, r2, #1
   120dc:	cmp	r5, #49	; 0x31
   120e0:	movne	r0, #0
   120e4:	popne	{r4, r5, r6, sl, fp, pc}
   120e8:	ldr	r5, [r0]
   120ec:	ldrb	r6, [r0, #4]
   120f0:	sub	r2, r2, #49	; 0x31
   120f4:	clz	r2, r2
   120f8:	lsr	r2, r2, #5
   120fc:	orr	r2, r6, r2, lsl r5
   12100:	add	r5, r5, #1
   12104:	cmp	r5, #8
   12108:	strb	r2, [r0, #4]
   1210c:	str	r5, [r0]
   12110:	bne	1212c <__assert_fail@plt+0x10a4>
   12114:	strb	r2, [r3], #1
   12118:	strb	lr, [r0, #4]
   1211c:	ldr	r2, [ip]
   12120:	add	r2, r2, #1
   12124:	str	r2, [ip]
   12128:	str	lr, [r0]
   1212c:	rsb	r2, r4, #0
   12130:	cmp	r4, #0
   12134:	bne	120b0 <__assert_fail@plt+0x1028>
   12138:	mov	r0, #1
   1213c:	pop	{r4, r5, r6, sl, fp, pc}
   12140:	ldr	r0, [r0]
   12144:	clz	r0, r0
   12148:	lsr	r0, r0, #5
   1214c:	pop	{r4, r5, r6, sl, fp, pc}
   12150:	add	r0, r0, r0, lsl #2
   12154:	asr	r1, r0, #31
   12158:	add	r0, r0, r1, lsr #30
   1215c:	asr	r0, r0, #2
   12160:	bx	lr
   12164:	push	{r4, sl, fp, lr}
   12168:	add	fp, sp, #8
   1216c:	mov	r4, r0
   12170:	bl	13e28 <__assert_fail@plt+0x2da0>
   12174:	mov	r1, r0
   12178:	mov	r0, #1
   1217c:	cmp	r1, #0
   12180:	popne	{r4, sl, fp, pc}
   12184:	movw	r0, #39017	; 0x9869
   12188:	mov	r1, r4
   1218c:	mov	r2, #24
   12190:	movt	r0, #1
   12194:	bl	10fec <memchr@plt>
   12198:	cmp	r0, #0
   1219c:	movwne	r0, #1
   121a0:	pop	{r4, sl, fp, pc}
   121a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121a8:	add	fp, sp, #28
   121ac:	sub	sp, sp, #20
   121b0:	cmp	r1, #0
   121b4:	beq	12370 <__assert_fail@plt+0x12e8>
   121b8:	mov	r8, r3
   121bc:	mov	r4, r2
   121c0:	mov	r6, r1
   121c4:	mov	r9, #0
   121c8:	add	r3, sp, #16
   121cc:	mov	r2, #0
   121d0:	ldrb	r1, [r0], #1
   121d4:	sub	r6, r6, #1
   121d8:	strb	r1, [r3, r2]
   121dc:	add	r2, r2, #1
   121e0:	cmp	r2, #4
   121e4:	bne	12360 <__assert_fail@plt+0x12d8>
   121e8:	str	r0, [sp, #12]
   121ec:	ldr	r0, [sp, #16]
   121f0:	mov	r1, #0
   121f4:	mov	r2, #85	; 0x55
   121f8:	mov	r3, #0
   121fc:	rev	r7, r0
   12200:	mov	r0, r7
   12204:	bl	18dcc <__assert_fail@plt+0x7d44>
   12208:	mov	r5, r0
   1220c:	add	r0, r9, #4
   12210:	mov	sl, r1
   12214:	cmp	r0, r8
   12218:	bge	12234 <__assert_fail@plt+0x11ac>
   1221c:	mov	r0, #85	; 0x55
   12220:	movw	r1, #39530	; 0x9a6a
   12224:	mls	r0, r5, r0, r7
   12228:	movt	r1, #1
   1222c:	ldrb	r0, [r1, r0]
   12230:	strb	r0, [r4, #4]
   12234:	mov	r0, r7
   12238:	mov	r1, #0
   1223c:	movw	r2, #7225	; 0x1c39
   12240:	mov	r3, #0
   12244:	bl	18dcc <__assert_fail@plt+0x7d44>
   12248:	str	r0, [sp, #4]
   1224c:	add	r0, r9, #3
   12250:	str	r1, [sp]
   12254:	cmp	r0, r8
   12258:	bge	12280 <__assert_fail@plt+0x11f8>
   1225c:	mov	r0, r5
   12260:	mov	r1, sl
   12264:	mov	r2, #85	; 0x55
   12268:	mov	r3, #0
   1226c:	bl	18dcc <__assert_fail@plt+0x7d44>
   12270:	movw	r0, #39530	; 0x9a6a
   12274:	movt	r0, #1
   12278:	ldrb	r0, [r0, r2]
   1227c:	strb	r0, [r4, #3]
   12280:	movw	r2, #24301	; 0x5eed
   12284:	mov	r0, r7
   12288:	mov	r1, #0
   1228c:	mov	r3, #0
   12290:	movt	r2, #9
   12294:	bl	18dcc <__assert_fail@plt+0x7d44>
   12298:	mov	sl, r0
   1229c:	add	r0, r9, #2
   122a0:	str	r1, [sp, #8]
   122a4:	cmp	r0, r8
   122a8:	bge	122d0 <__assert_fail@plt+0x1248>
   122ac:	ldr	r0, [sp, #4]
   122b0:	ldr	r1, [sp]
   122b4:	mov	r2, #85	; 0x55
   122b8:	mov	r3, #0
   122bc:	bl	18dcc <__assert_fail@plt+0x7d44>
   122c0:	movw	r0, #39530	; 0x9a6a
   122c4:	movt	r0, #1
   122c8:	ldrb	r0, [r0, r2]
   122cc:	strb	r0, [r4, #2]
   122d0:	movw	r2, #33969	; 0x84b1
   122d4:	mov	r0, r7
   122d8:	mov	r1, #0
   122dc:	mov	r3, #0
   122e0:	movt	r2, #796	; 0x31c
   122e4:	bl	18dcc <__assert_fail@plt+0x7d44>
   122e8:	mov	r5, r0
   122ec:	add	r0, r9, #1
   122f0:	mov	r7, r1
   122f4:	cmp	r0, r8
   122f8:	bge	12320 <__assert_fail@plt+0x1298>
   122fc:	ldr	r1, [sp, #8]
   12300:	mov	r0, sl
   12304:	mov	r2, #85	; 0x55
   12308:	mov	r3, #0
   1230c:	bl	18dcc <__assert_fail@plt+0x7d44>
   12310:	movw	r0, #39530	; 0x9a6a
   12314:	movt	r0, #1
   12318:	ldrb	r0, [r0, r2]
   1231c:	strb	r0, [r4, #1]
   12320:	cmp	r9, r8
   12324:	bge	1234c <__assert_fail@plt+0x12c4>
   12328:	mov	r0, r5
   1232c:	mov	r1, r7
   12330:	mov	r2, #85	; 0x55
   12334:	mov	r3, #0
   12338:	bl	18dcc <__assert_fail@plt+0x7d44>
   1233c:	movw	r0, #39530	; 0x9a6a
   12340:	movt	r0, #1
   12344:	ldrb	r0, [r0, r2]
   12348:	strb	r0, [r4]
   1234c:	ldr	r0, [sp, #12]
   12350:	add	r9, r9, #5
   12354:	add	r4, r4, #5
   12358:	mov	r2, #0
   1235c:	add	r3, sp, #16
   12360:	cmp	r6, #0
   12364:	bne	121d0 <__assert_fail@plt+0x1148>
   12368:	cmp	r2, #0
   1236c:	bne	12378 <__assert_fail@plt+0x12f0>
   12370:	sub	sp, fp, #28
   12374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12378:	movw	r1, #39041	; 0x9881
   1237c:	mov	r0, #0
   12380:	mov	r2, #5
   12384:	movt	r1, #1
   12388:	bl	10ec0 <dcgettext@plt>
   1238c:	mov	r2, r0
   12390:	mov	r0, #1
   12394:	mov	r1, #0
   12398:	bl	10f2c <error@plt>
   1239c:	push	{r4, sl, fp, lr}
   123a0:	add	fp, sp, #8
   123a4:	mov	r4, r0
   123a8:	movw	r0, #4200	; 0x1068
   123ac:	str	r0, [r4, #20]
   123b0:	movw	r0, #4200	; 0x1068
   123b4:	bl	16aec <__assert_fail@plt+0x5a64>
   123b8:	str	r0, [r4, #16]
   123bc:	mov	r1, #1
   123c0:	mov	r0, #0
   123c4:	str	r1, [r4]
   123c8:	str	r0, [r4, #4]
   123cc:	pop	{r4, sl, fp, pc}
   123d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123d4:	add	fp, sp, #28
   123d8:	ldr	lr, [fp, #8]
   123dc:	mov	ip, #0
   123e0:	cmp	r2, #0
   123e4:	str	ip, [lr]
   123e8:	beq	1250c <__assert_fail@plt+0x1484>
   123ec:	movw	r9, #39615	; 0x9abf
   123f0:	movw	r8, #33969	; 0x84b1
   123f4:	movt	r9, #1
   123f8:	movt	r8, #796	; 0x31c
   123fc:	add	r1, r1, #1
   12400:	rsb	r6, r2, #1
   12404:	ldrb	r2, [r1, #-1]
   12408:	cmp	r2, #10
   1240c:	bne	12424 <__assert_fail@plt+0x139c>
   12410:	add	r6, r6, #1
   12414:	add	r1, r1, #1
   12418:	cmp	r6, #1
   1241c:	bne	12404 <__assert_fail@plt+0x137c>
   12420:	b	124f8 <__assert_fail@plt+0x1470>
   12424:	sub	r7, r2, #33	; 0x21
   12428:	mov	ip, #0
   1242c:	uxtb	r7, r7
   12430:	cmp	r7, #92	; 0x5c
   12434:	bhi	12504 <__assert_fail@plt+0x147c>
   12438:	add	r2, r9, r2
   1243c:	ldrsb	r2, [r2, #-33]	; 0xffffffdf
   12440:	cmp	r2, #0
   12444:	blt	12504 <__assert_fail@plt+0x147c>
   12448:	mov	r4, r0
   1244c:	ldr	r5, [r4, #4]!
   12450:	add	ip, r5, #1
   12454:	mov	r7, r4
   12458:	str	ip, [r7], r5
   1245c:	strb	r2, [r7, #4]
   12460:	ldr	r7, [r4]
   12464:	cmp	r7, #5
   12468:	bne	124e8 <__assert_fail@plt+0x1460>
   1246c:	ldrb	r2, [r0, #9]
   12470:	ldrb	r7, [r0, #10]
   12474:	movw	r4, #24301	; 0x5eed
   12478:	ldrb	r5, [r0, #11]
   1247c:	ldrb	sl, [r0, #8]
   12480:	mov	ip, #0
   12484:	movt	r4, #9
   12488:	mul	r2, r2, r4
   1248c:	movw	r4, #7225	; 0x1c39
   12490:	smlabb	r2, r7, r4, r2
   12494:	mov	r7, #85	; 0x55
   12498:	smlabb	r2, r5, r7, r2
   1249c:	ldrb	r7, [r0, #12]
   124a0:	mov	r5, #0
   124a4:	add	r2, r2, r7
   124a8:	umlal	r2, r5, sl, r8
   124ac:	tst	r5, #7
   124b0:	bne	12504 <__assert_fail@plt+0x147c>
   124b4:	lsr	r7, r2, #16
   124b8:	strb	r2, [r3, #3]
   124bc:	strb	r7, [r3, #1]
   124c0:	lsr	r7, r2, #24
   124c4:	lsr	r2, r2, #8
   124c8:	strb	r7, [r3]
   124cc:	strb	r2, [r3, #2]
   124d0:	mov	r7, #0
   124d4:	add	r3, r3, #4
   124d8:	ldr	r2, [lr]
   124dc:	add	r2, r2, #4
   124e0:	str	r2, [lr]
   124e4:	str	r7, [r0, #4]
   124e8:	rsb	r2, r6, #0
   124ec:	cmp	r6, #0
   124f0:	bne	123fc <__assert_fail@plt+0x1374>
   124f4:	b	124fc <__assert_fail@plt+0x1474>
   124f8:	ldr	r7, [r0, #4]
   124fc:	mov	ip, #1
   12500:	str	r7, [r0]
   12504:	mov	r0, ip
   12508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1250c:	ldr	r0, [r0, #4]
   12510:	cmp	r0, #1
   12514:	movwlt	ip, #1
   12518:	mov	r0, ip
   1251c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12520:	push	{fp, lr}
   12524:	mov	fp, sp
   12528:	sub	sp, sp, #56	; 0x38
   1252c:	movw	r7, #45400	; 0xb158
   12530:	str	r1, [sp, #8]
   12534:	mov	r4, r0
   12538:	movw	r0, #4200	; 0x1068
   1253c:	str	r3, [sp, #12]
   12540:	str	r2, [sp, #24]
   12544:	movt	r7, #2
   12548:	ldr	r1, [r7]
   1254c:	blx	r1
   12550:	bl	16abc <__assert_fail@plt+0x5a34>
   12554:	mov	sl, r0
   12558:	movw	r0, #4200	; 0x1068
   1255c:	bl	16abc <__assert_fail@plt+0x5a34>
   12560:	ldr	r1, [r7, #12]
   12564:	str	r0, [sp, #20]
   12568:	mov	r0, #0
   1256c:	str	r0, [fp, #-8]
   12570:	sub	r0, fp, #24
   12574:	blx	r1
   12578:	str	r4, [sp, #16]
   1257c:	ldr	r0, [sp, #12]
   12580:	mov	r5, #0
   12584:	cmp	r0, #0
   12588:	beq	12658 <__assert_fail@plt+0x15d0>
   1258c:	ldr	r1, [r7]
   12590:	movw	r0, #4200	; 0x1068
   12594:	mov	r9, r7
   12598:	blx	r1
   1259c:	add	r7, sl, r5
   125a0:	sub	r2, r0, r5
   125a4:	mov	r1, #1
   125a8:	mov	r3, r4
   125ac:	mov	r0, r7
   125b0:	bl	11064 <fread_unlocked@plt>
   125b4:	mov	r8, r0
   125b8:	cmp	r0, #1
   125bc:	blt	1261c <__assert_fail@plt+0x1594>
   125c0:	mov	r6, #0
   125c4:	add	r4, r6, r5
   125c8:	ldr	r1, [r9, #4]
   125cc:	ldrb	r0, [sl, r4]
   125d0:	blx	r1
   125d4:	cmp	r0, #0
   125d8:	bne	125e8 <__assert_fail@plt+0x1560>
   125dc:	ldrb	r0, [sl, r4]
   125e0:	cmp	r0, #61	; 0x3d
   125e4:	bne	12600 <__assert_fail@plt+0x1578>
   125e8:	add	r6, r6, #1
   125ec:	cmp	r8, #1
   125f0:	blt	1261c <__assert_fail@plt+0x1594>
   125f4:	cmp	r6, r8
   125f8:	blt	125c4 <__assert_fail@plt+0x153c>
   125fc:	b	1261c <__assert_fail@plt+0x1594>
   12600:	sub	r8, r8, #1
   12604:	add	r0, r7, r6
   12608:	sub	r2, r8, r6
   1260c:	add	r1, r0, #1
   12610:	bl	10e6c <memmove@plt>
   12614:	cmp	r8, #1
   12618:	bge	125f4 <__assert_fail@plt+0x156c>
   1261c:	ldr	r4, [sp, #16]
   12620:	ldrb	r0, [r4]
   12624:	tst	r0, #32
   12628:	bne	12768 <__assert_fail@plt+0x16e0>
   1262c:	ldr	r1, [r9]
   12630:	movw	r0, #4200	; 0x1068
   12634:	mov	r7, r9
   12638:	add	r5, r8, r5
   1263c:	blx	r1
   12640:	cmp	r5, r0
   12644:	bge	126ac <__assert_fail@plt+0x1624>
   12648:	ldrb	r0, [r4]
   1264c:	tst	r0, #16
   12650:	beq	1258c <__assert_fail@plt+0x1504>
   12654:	b	126ac <__assert_fail@plt+0x1624>
   12658:	ldr	r1, [r7]
   1265c:	movw	r0, #4200	; 0x1068
   12660:	blx	r1
   12664:	add	r1, sl, r5
   12668:	sub	r2, r0, r5
   1266c:	mov	r3, r4
   12670:	mov	r0, r1
   12674:	mov	r1, #1
   12678:	bl	11064 <fread_unlocked@plt>
   1267c:	ldrb	r1, [r4]
   12680:	tst	r1, #32
   12684:	bne	12768 <__assert_fail@plt+0x16e0>
   12688:	ldr	r1, [r7]
   1268c:	add	r5, r0, r5
   12690:	movw	r0, #4200	; 0x1068
   12694:	blx	r1
   12698:	cmp	r5, r0
   1269c:	bge	126ac <__assert_fail@plt+0x1624>
   126a0:	ldrb	r0, [r4]
   126a4:	tst	r0, #16
   126a8:	beq	12658 <__assert_fail@plt+0x15d0>
   126ac:	mov	r6, #0
   126b0:	mov	r8, #0
   126b4:	mov	r9, r4
   126b8:	ldr	r4, [sp, #20]
   126bc:	ldr	r7, [r7, #16]
   126c0:	movw	r0, #4200	; 0x1068
   126c4:	cmp	r6, #0
   126c8:	mov	r2, #0
   126cc:	mov	r1, sl
   126d0:	str	r0, [sp, #28]
   126d4:	add	r0, sp, #28
   126d8:	moveq	r2, r5
   126dc:	str	r0, [sp]
   126e0:	sub	r0, fp, #24
   126e4:	mov	r3, r4
   126e8:	blx	r7
   126ec:	ldr	r2, [sp, #28]
   126f0:	ldr	r3, [sp, #24]
   126f4:	mov	r7, r0
   126f8:	mov	r0, r4
   126fc:	mov	r1, #1
   12700:	bl	10ea8 <fwrite_unlocked@plt>
   12704:	ldr	r1, [sp, #28]
   12708:	cmp	r0, r1
   1270c:	bcc	1277c <__assert_fail@plt+0x16f4>
   12710:	cmp	r7, #0
   12714:	beq	127a8 <__assert_fail@plt+0x1720>
   12718:	ldr	r0, [r9]
   1271c:	mov	r2, #2
   12720:	movw	r7, #45400	; 0xb158
   12724:	add	r1, r8, #1
   12728:	mov	r4, r9
   1272c:	movt	r7, #2
   12730:	ands	r0, r0, #16
   12734:	movweq	r2, #1
   12738:	cmp	r1, r2
   1273c:	bcs	12754 <__assert_fail@plt+0x16cc>
   12740:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12744:	sub	r6, r6, #1
   12748:	orrs	r2, r8, r2
   1274c:	mov	r8, r1
   12750:	bne	126b4 <__assert_fail@plt+0x162c>
   12754:	cmp	r0, #0
   12758:	beq	1257c <__assert_fail@plt+0x14f4>
   1275c:	ldr	r1, [sp, #8]
   12760:	mov	r0, r4
   12764:	bl	12ad4 <__assert_fail@plt+0x1a4c>
   12768:	bl	10fa4 <__errno_location@plt>
   1276c:	ldr	r4, [r0]
   12770:	movw	r1, #39097	; 0x98b9
   12774:	movt	r1, #1
   12778:	b	1278c <__assert_fail@plt+0x1704>
   1277c:	bl	10fa4 <__errno_location@plt>
   12780:	ldr	r4, [r0]
   12784:	movw	r1, #39108	; 0x98c4
   12788:	movt	r1, #1
   1278c:	mov	r0, #0
   12790:	mov	r2, #5
   12794:	bl	10ec0 <dcgettext@plt>
   12798:	mov	r2, r0
   1279c:	mov	r0, #1
   127a0:	mov	r1, r4
   127a4:	bl	10f2c <error@plt>
   127a8:	movw	r1, #39120	; 0x98d0
   127ac:	mov	r0, #0
   127b0:	mov	r2, #5
   127b4:	movt	r1, #1
   127b8:	bl	10ec0 <dcgettext@plt>
   127bc:	mov	r2, r0
   127c0:	mov	r0, #1
   127c4:	mov	r1, #0
   127c8:	bl	10f2c <error@plt>
   127cc:	push	{fp, lr}
   127d0:	mov	fp, sp
   127d4:	sub	sp, sp, #16
   127d8:	mov	r5, r0
   127dc:	mov	r0, #30720	; 0x7800
   127e0:	mov	r7, r3
   127e4:	mov	r4, r2
   127e8:	str	r1, [sp]
   127ec:	bl	16abc <__assert_fail@plt+0x5a34>
   127f0:	movw	r9, #45400	; 0xb158
   127f4:	mov	r6, r0
   127f8:	mov	r0, #30720	; 0x7800
   127fc:	movt	r9, #2
   12800:	ldr	r1, [r9]
   12804:	blx	r1
   12808:	bl	16abc <__assert_fail@plt+0x5a34>
   1280c:	cmp	r7, #0
   12810:	str	r0, [sp, #8]
   12814:	str	r7, [fp, #-4]
   12818:	beq	129a8 <__assert_fail@plt+0x1920>
   1281c:	mov	sl, #0
   12820:	str	r4, [sp, #4]
   12824:	mov	r7, #0
   12828:	add	r0, r6, r7
   1282c:	rsb	r2, r7, #30720	; 0x7800
   12830:	mov	r1, #1
   12834:	mov	r3, r5
   12838:	bl	11064 <fread_unlocked@plt>
   1283c:	add	r7, r0, r7
   12840:	ldr	r0, [r5]
   12844:	tst	r0, #16
   12848:	bne	1285c <__assert_fail@plt+0x17d4>
   1284c:	cmp	r7, #30720	; 0x7800
   12850:	bge	1285c <__assert_fail@plt+0x17d4>
   12854:	ands	r0, r0, #32
   12858:	beq	12828 <__assert_fail@plt+0x17a0>
   1285c:	cmp	r7, #1
   12860:	blt	12954 <__assert_fail@plt+0x18cc>
   12864:	movw	r0, #45400	; 0xb158
   12868:	movt	r0, #2
   1286c:	ldr	r1, [r0]
   12870:	ldr	r4, [r0, #8]
   12874:	mov	r8, r0
   12878:	mov	r0, r7
   1287c:	blx	r1
   12880:	ldr	r2, [sp, #8]
   12884:	mov	r3, r0
   12888:	mov	r0, r6
   1288c:	mov	r1, r7
   12890:	blx	r4
   12894:	ldr	r1, [r8]
   12898:	mov	r0, r7
   1289c:	blx	r1
   128a0:	cmp	r0, #1
   128a4:	blt	12954 <__assert_fail@plt+0x18cc>
   128a8:	mov	r8, r0
   128ac:	mov	r4, #0
   128b0:	ldr	r0, [fp, #-4]
   128b4:	sub	r9, r8, r4
   128b8:	sub	r0, r0, sl
   128bc:	cmp	r0, r9
   128c0:	movlt	r9, r0
   128c4:	cmp	r9, #0
   128c8:	beq	12908 <__assert_fail@plt+0x1880>
   128cc:	movw	r1, #45388	; 0xb14c
   128d0:	ldr	r0, [sp, #8]
   128d4:	mov	r2, r9
   128d8:	movt	r1, #2
   128dc:	ldr	r3, [r1]
   128e0:	mov	r1, #1
   128e4:	add	r0, r0, r4
   128e8:	bl	10ea8 <fwrite_unlocked@plt>
   128ec:	cmp	r0, r9
   128f0:	bcc	12a7c <__assert_fail@plt+0x19f4>
   128f4:	add	r4, r9, r4
   128f8:	add	sl, r9, sl
   128fc:	cmp	r4, r8
   12900:	blt	128b0 <__assert_fail@plt+0x1828>
   12904:	b	12954 <__assert_fail@plt+0x18cc>
   12908:	ldr	r0, [sp, #4]
   1290c:	ldr	r2, [r0, #20]
   12910:	ldr	r1, [r0, #24]
   12914:	cmp	r2, r1
   12918:	bcs	1293c <__assert_fail@plt+0x18b4>
   1291c:	add	r1, r2, #1
   12920:	mov	sl, #0
   12924:	str	r1, [r0, #20]
   12928:	mov	r0, #10
   1292c:	strb	r0, [r2]
   12930:	cmp	r4, r8
   12934:	blt	128b0 <__assert_fail@plt+0x1828>
   12938:	b	12954 <__assert_fail@plt+0x18cc>
   1293c:	mov	r1, #10
   12940:	bl	11010 <__overflow@plt>
   12944:	mov	sl, #0
   12948:	cmn	r0, #1
   1294c:	bne	12930 <__assert_fail@plt+0x18a8>
   12950:	b	12a7c <__assert_fail@plt+0x19f4>
   12954:	ldr	r0, [r5]
   12958:	tst	r0, #16
   1295c:	cmpeq	r7, #30720	; 0x7800
   12960:	bne	1296c <__assert_fail@plt+0x18e4>
   12964:	ands	r0, r0, #32
   12968:	beq	12824 <__assert_fail@plt+0x179c>
   1296c:	ldr	r0, [fp, #-4]
   12970:	cmp	r0, #0
   12974:	beq	12a90 <__assert_fail@plt+0x1a08>
   12978:	cmp	sl, #1
   1297c:	blt	12a90 <__assert_fail@plt+0x1a08>
   12980:	ldr	r0, [sp, #4]
   12984:	ldr	r2, [r0, #20]
   12988:	ldr	r1, [r0, #24]
   1298c:	cmp	r2, r1
   12990:	bcs	12a6c <__assert_fail@plt+0x19e4>
   12994:	add	r1, r2, #1
   12998:	str	r1, [r0, #20]
   1299c:	mov	r1, #10
   129a0:	strb	r1, [r2]
   129a4:	b	12a90 <__assert_fail@plt+0x1a08>
   129a8:	movw	r8, #45388	; 0xb14c
   129ac:	mov	r4, #0
   129b0:	movt	r8, #2
   129b4:	add	r0, r6, r4
   129b8:	rsb	r2, r4, #30720	; 0x7800
   129bc:	mov	r1, #1
   129c0:	mov	r3, r5
   129c4:	bl	11064 <fread_unlocked@plt>
   129c8:	add	r4, r0, r4
   129cc:	ldr	r0, [r5]
   129d0:	tst	r0, #16
   129d4:	bne	129e8 <__assert_fail@plt+0x1960>
   129d8:	cmp	r4, #30720	; 0x7800
   129dc:	bge	129e8 <__assert_fail@plt+0x1960>
   129e0:	ands	r1, r0, #32
   129e4:	beq	129b4 <__assert_fail@plt+0x192c>
   129e8:	cmp	r4, #1
   129ec:	blt	12a50 <__assert_fail@plt+0x19c8>
   129f0:	ldr	r1, [r9]
   129f4:	ldr	r7, [r9, #8]
   129f8:	mov	r0, r4
   129fc:	blx	r1
   12a00:	mov	r3, r0
   12a04:	mov	sl, r6
   12a08:	mov	r0, r6
   12a0c:	ldr	r6, [sp, #8]
   12a10:	mov	r1, r4
   12a14:	mov	r2, r6
   12a18:	blx	r7
   12a1c:	ldr	r1, [r9]
   12a20:	mov	r0, r4
   12a24:	blx	r1
   12a28:	ldr	r3, [r8]
   12a2c:	mov	r7, r0
   12a30:	mov	r0, r6
   12a34:	mov	r1, #1
   12a38:	mov	r2, r7
   12a3c:	bl	10ea8 <fwrite_unlocked@plt>
   12a40:	cmp	r0, r7
   12a44:	bcc	12a7c <__assert_fail@plt+0x19f4>
   12a48:	ldr	r0, [r5]
   12a4c:	mov	r6, sl
   12a50:	tst	r0, #16
   12a54:	cmpeq	r4, #30720	; 0x7800
   12a58:	bne	12a90 <__assert_fail@plt+0x1a08>
   12a5c:	ands	r0, r0, #32
   12a60:	mov	r4, #0
   12a64:	beq	129b4 <__assert_fail@plt+0x192c>
   12a68:	b	12a90 <__assert_fail@plt+0x1a08>
   12a6c:	mov	r1, #10
   12a70:	bl	11010 <__overflow@plt>
   12a74:	cmn	r0, #1
   12a78:	bne	12a90 <__assert_fail@plt+0x1a08>
   12a7c:	bl	10fa4 <__errno_location@plt>
   12a80:	ldr	r4, [r0]
   12a84:	movw	r1, #39108	; 0x98c4
   12a88:	movt	r1, #1
   12a8c:	b	12ab8 <__assert_fail@plt+0x1a30>
   12a90:	ldrb	r0, [r5]
   12a94:	tst	r0, #32
   12a98:	bne	12aa8 <__assert_fail@plt+0x1a20>
   12a9c:	ldr	r1, [sp]
   12aa0:	mov	r0, r5
   12aa4:	bl	12ad4 <__assert_fail@plt+0x1a4c>
   12aa8:	bl	10fa4 <__errno_location@plt>
   12aac:	ldr	r4, [r0]
   12ab0:	movw	r1, #39097	; 0x98b9
   12ab4:	movt	r1, #1
   12ab8:	mov	r0, #0
   12abc:	mov	r2, #5
   12ac0:	bl	10ec0 <dcgettext@plt>
   12ac4:	mov	r2, r0
   12ac8:	mov	r0, #1
   12acc:	mov	r1, r4
   12ad0:	bl	10f2c <error@plt>
   12ad4:	push	{fp, lr}
   12ad8:	mov	fp, sp
   12adc:	mov	r5, r1
   12ae0:	bl	14298 <__assert_fail@plt+0x3210>
   12ae4:	cmp	r0, #0
   12ae8:	bne	12af4 <__assert_fail@plt+0x1a6c>
   12aec:	mov	r0, #0
   12af0:	bl	10f80 <exit@plt>
   12af4:	movw	r1, #40577	; 0x9e81
   12af8:	mov	r0, r5
   12afc:	movt	r1, #1
   12b00:	bl	10e48 <strcmp@plt>
   12b04:	mov	r6, r0
   12b08:	bl	10fa4 <__errno_location@plt>
   12b0c:	ldr	r4, [r0]
   12b10:	cmp	r6, #0
   12b14:	bne	12b3c <__assert_fail@plt+0x1ab4>
   12b18:	movw	r1, #39134	; 0x98de
   12b1c:	mov	r0, #0
   12b20:	mov	r2, #5
   12b24:	movt	r1, #1
   12b28:	bl	10ec0 <dcgettext@plt>
   12b2c:	mov	r2, r0
   12b30:	mov	r0, #1
   12b34:	mov	r1, r4
   12b38:	bl	10f2c <error@plt>
   12b3c:	mov	r0, #0
   12b40:	mov	r1, #3
   12b44:	mov	r2, r5
   12b48:	bl	16138 <__assert_fail@plt+0x50b0>
   12b4c:	movw	r2, #38252	; 0x956c
   12b50:	mov	r3, r0
   12b54:	mov	r0, #1
   12b58:	mov	r1, r4
   12b5c:	movt	r2, #1
   12b60:	bl	10f2c <error@plt>
   12b64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b68:	add	fp, sp, #24
   12b6c:	cmp	r1, #0
   12b70:	cmpne	r3, #0
   12b74:	bne	12b8c <__assert_fail@plt+0x1b04>
   12b78:	cmp	r3, #0
   12b7c:	beq	12b88 <__assert_fail@plt+0x1b00>
   12b80:	mov	r0, #0
   12b84:	strb	r0, [r2]
   12b88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12b8c:	movw	lr, #39903	; 0x9bdf
   12b90:	add	r0, r0, #2
   12b94:	rsb	ip, r3, #0
   12b98:	mov	r8, #0
   12b9c:	movt	lr, #1
   12ba0:	ldrb	r3, [r0, #-2]
   12ba4:	add	r5, ip, r8
   12ba8:	mov	r4, r2
   12bac:	cmn	r5, #1
   12bb0:	ldrb	r3, [lr, r3, lsr #3]
   12bb4:	strb	r3, [r4, r8]!
   12bb8:	beq	12b88 <__assert_fail@plt+0x1b00>
   12bbc:	ldrb	r3, [r0, #-2]
   12bc0:	cmp	r1, #1
   12bc4:	add	r6, r5, #2
   12bc8:	lsl	r7, r3, #2
   12bcc:	mov	r3, #0
   12bd0:	ldrbne	r3, [r0, #-1]
   12bd4:	lsrne	r3, r3, #6
   12bd8:	cmp	r6, #0
   12bdc:	add	r3, r3, r7
   12be0:	and	r3, r3, #31
   12be4:	ldrb	r3, [lr, r3]
   12be8:	strb	r3, [r4, #1]
   12bec:	beq	12b88 <__assert_fail@plt+0x1b00>
   12bf0:	cmp	r1, #1
   12bf4:	mov	r7, #61	; 0x3d
   12bf8:	add	r6, r5, #3
   12bfc:	ldrbne	r3, [r0, #-1]
   12c00:	ubfxne	r3, r3, #1, #5
   12c04:	ldrbne	r7, [lr, r3]
   12c08:	cmp	r6, #0
   12c0c:	strb	r7, [r4, #2]
   12c10:	beq	12b88 <__assert_fail@plt+0x1b00>
   12c14:	add	r6, r5, #4
   12c18:	cmp	r1, #1
   12c1c:	beq	12ce4 <__assert_fail@plt+0x1c5c>
   12c20:	ldrb	r3, [r0, #-1]
   12c24:	subs	r1, r1, #2
   12c28:	lsl	r7, r3, #4
   12c2c:	ldrbne	r3, [r0]
   12c30:	lsrne	r3, r3, #4
   12c34:	moveq	r3, #0
   12c38:	add	r3, r3, r7
   12c3c:	and	r3, r3, #31
   12c40:	ldrb	r7, [lr, r3]
   12c44:	cmp	r6, #0
   12c48:	strb	r7, [r4, #3]
   12c4c:	beq	12b88 <__assert_fail@plt+0x1b00>
   12c50:	add	r6, r5, #5
   12c54:	cmp	r1, #0
   12c58:	beq	12cfc <__assert_fail@plt+0x1c74>
   12c5c:	ldrb	r3, [r0]
   12c60:	subs	r1, r1, #1
   12c64:	lsl	r7, r3, #1
   12c68:	ldrbne	r3, [r0, #1]
   12c6c:	lsrne	r3, r3, #7
   12c70:	moveq	r3, #0
   12c74:	add	r3, r3, r7
   12c78:	and	r3, r3, #31
   12c7c:	ldrb	r7, [lr, r3]
   12c80:	cmp	r6, #0
   12c84:	strb	r7, [r4, #4]
   12c88:	beq	12b88 <__assert_fail@plt+0x1b00>
   12c8c:	add	r6, r5, #6
   12c90:	cmp	r1, #0
   12c94:	beq	12d14 <__assert_fail@plt+0x1c8c>
   12c98:	ldrb	r3, [r0, #1]
   12c9c:	ubfx	r3, r3, #2, #5
   12ca0:	ldrb	r3, [lr, r3]
   12ca4:	cmp	r6, #0
   12ca8:	strb	r3, [r4, #5]
   12cac:	beq	12b88 <__assert_fail@plt+0x1b00>
   12cb0:	add	r7, r5, #7
   12cb4:	cmp	r1, #0
   12cb8:	beq	12d28 <__assert_fail@plt+0x1ca0>
   12cbc:	subs	r6, r1, #1
   12cc0:	ldrb	r1, [r0, #1]
   12cc4:	ldrbne	r3, [r0, #2]
   12cc8:	lsl	r1, r1, #3
   12ccc:	lsrne	r3, r3, #5
   12cd0:	moveq	r3, #0
   12cd4:	add	r1, r3, r1
   12cd8:	and	r1, r1, #31
   12cdc:	ldrb	r1, [lr, r1]
   12ce0:	b	12d30 <__assert_fail@plt+0x1ca8>
   12ce4:	mov	r7, #61	; 0x3d
   12ce8:	mov	r1, #0
   12cec:	cmp	r6, #0
   12cf0:	strb	r7, [r4, #3]
   12cf4:	bne	12c50 <__assert_fail@plt+0x1bc8>
   12cf8:	b	12b88 <__assert_fail@plt+0x1b00>
   12cfc:	mov	r7, #61	; 0x3d
   12d00:	mov	r1, #0
   12d04:	cmp	r6, #0
   12d08:	strb	r7, [r4, #4]
   12d0c:	bne	12c8c <__assert_fail@plt+0x1c04>
   12d10:	b	12b88 <__assert_fail@plt+0x1b00>
   12d14:	mov	r3, #61	; 0x3d
   12d18:	cmp	r6, #0
   12d1c:	strb	r3, [r4, #5]
   12d20:	bne	12cb0 <__assert_fail@plt+0x1c28>
   12d24:	b	12b88 <__assert_fail@plt+0x1b00>
   12d28:	mov	r1, #61	; 0x3d
   12d2c:	mov	r6, #0
   12d30:	cmp	r7, #0
   12d34:	strb	r1, [r4, #6]
   12d38:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d3c:	cmp	r6, #0
   12d40:	beq	12d60 <__assert_fail@plt+0x1cd8>
   12d44:	ldrb	r1, [r0, #2]
   12d48:	and	r1, r1, #31
   12d4c:	ldrb	r1, [lr, r1]
   12d50:	cmn	r5, #8
   12d54:	strb	r1, [r4, #7]
   12d58:	bne	12d70 <__assert_fail@plt+0x1ce8>
   12d5c:	b	12b88 <__assert_fail@plt+0x1b00>
   12d60:	mov	r1, #61	; 0x3d
   12d64:	cmn	r5, #8
   12d68:	strb	r1, [r4, #7]
   12d6c:	beq	12b88 <__assert_fail@plt+0x1b00>
   12d70:	subs	r1, r6, #1
   12d74:	add	r8, r8, #8
   12d78:	addne	r0, r0, #5
   12d7c:	cmpne	r6, #0
   12d80:	bne	12ba0 <__assert_fail@plt+0x1b18>
   12d84:	add	r2, r2, r8
   12d88:	b	12b80 <__assert_fail@plt+0x1af8>
   12d8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12d90:	add	fp, sp, #24
   12d94:	mov	r8, r0
   12d98:	movw	r0, #26215	; 0x6667
   12d9c:	mov	r4, r1
   12da0:	mov	r6, r2
   12da4:	movt	r0, #26214	; 0x6666
   12da8:	smmul	r0, r1, r0
   12dac:	asr	r1, r0, #1
   12db0:	add	r0, r1, r0, lsr #31
   12db4:	add	r1, r0, r0, lsl #2
   12db8:	subs	r1, r4, r1
   12dbc:	addne	r0, r0, #1
   12dc0:	cmn	r0, #1
   12dc4:	ble	12dd4 <__assert_fail@plt+0x1d4c>
   12dc8:	cmn	r0, #-268435455	; 0xf0000001
   12dcc:	ble	12de8 <__assert_fail@plt+0x1d60>
   12dd0:	b	12e2c <__assert_fail@plt+0x1da4>
   12dd4:	beq	12de8 <__assert_fail@plt+0x1d60>
   12dd8:	mov	r1, #-2147483648	; 0x80000000
   12ddc:	sdiv	r1, r1, r0
   12de0:	cmp	r1, #8
   12de4:	blt	12e2c <__assert_fail@plt+0x1da4>
   12de8:	cmn	r4, #1
   12dec:	ble	12e2c <__assert_fail@plt+0x1da4>
   12df0:	lsl	r7, r0, #3
   12df4:	orr	r5, r7, #1
   12df8:	mov	r0, r5
   12dfc:	bl	18a14 <__assert_fail@plt+0x798c>
   12e00:	cmp	r0, #0
   12e04:	str	r0, [r6]
   12e08:	moveq	r0, r5
   12e0c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e10:	mov	r2, r0
   12e14:	mov	r0, r8
   12e18:	mov	r1, r4
   12e1c:	mov	r3, r5
   12e20:	bl	12b64 <__assert_fail@plt+0x1adc>
   12e24:	mov	r0, r7
   12e28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e2c:	mov	r7, #0
   12e30:	mov	r0, r7
   12e34:	str	r7, [r6]
   12e38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e3c:	movw	r1, #39935	; 0x9bff
   12e40:	movt	r1, #1
   12e44:	add	r0, r1, r0
   12e48:	ldrsb	r1, [r0]
   12e4c:	mov	r0, #0
   12e50:	cmn	r1, #1
   12e54:	movwgt	r0, #1
   12e58:	bx	lr
   12e5c:	mov	r1, #0
   12e60:	str	r1, [r0]
   12e64:	bx	lr
   12e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e6c:	add	fp, sp, #28
   12e70:	sub	sp, sp, #20
   12e74:	mov	r5, r1
   12e78:	ldr	r1, [fp, #8]
   12e7c:	str	r3, [sp, #16]
   12e80:	mov	r6, r2
   12e84:	cmp	r0, #0
   12e88:	ldr	sl, [r1]
   12e8c:	str	sl, [sp, #12]
   12e90:	beq	12eac <__assert_fail@plt+0x1e24>
   12e94:	ldr	r2, [r0]
   12e98:	clz	r1, r6
   12e9c:	lsr	r9, r1, #5
   12ea0:	cmp	r2, #0
   12ea4:	movwne	r2, #1
   12ea8:	b	12eb4 <__assert_fail@plt+0x1e2c>
   12eac:	mov	r2, #0
   12eb0:	mov	r9, #0
   12eb4:	add	r1, r0, #4
   12eb8:	cmp	r2, #0
   12ebc:	str	r0, [sp, #4]
   12ec0:	str	r1, [sp]
   12ec4:	clz	r1, r0
   12ec8:	cmpeq	r9, #0
   12ecc:	lsr	r0, r1, #5
   12ed0:	str	r0, [sp, #8]
   12ed4:	beq	12f04 <__assert_fail@plt+0x1e7c>
   12ed8:	cmp	r6, #0
   12edc:	mov	r0, r6
   12ee0:	movwne	r0, #1
   12ee4:	orr	r0, r9, r0
   12ee8:	cmp	r0, #1
   12eec:	bne	1309c <__assert_fail@plt+0x2014>
   12ef0:	ldr	r4, [sp, #4]
   12ef4:	clz	r0, r6
   12ef8:	mov	r8, r6
   12efc:	lsr	r0, r0, #5
   12f00:	b	130b8 <__assert_fail@plt+0x2030>
   12f04:	add	r9, sp, #16
   12f08:	add	r4, sp, #12
   12f0c:	b	12f1c <__assert_fail@plt+0x1e94>
   12f10:	ldr	sl, [sp, #12]
   12f14:	add	r5, r5, #8
   12f18:	sub	r6, r6, #8
   12f1c:	mov	r0, r5
   12f20:	mov	r1, r6
   12f24:	mov	r2, r9
   12f28:	mov	r3, r4
   12f2c:	bl	13240 <__assert_fail@plt+0x21b8>
   12f30:	cmp	r0, #0
   12f34:	bne	12f10 <__assert_fail@plt+0x1e88>
   12f38:	cmp	r6, #0
   12f3c:	beq	13214 <__assert_fail@plt+0x218c>
   12f40:	ldrb	r0, [r5]
   12f44:	ldr	r1, [sp, #8]
   12f48:	subs	r0, r0, #10
   12f4c:	movwne	r0, #1
   12f50:	orrs	r0, r0, r1
   12f54:	beq	1301c <__assert_fail@plt+0x1f94>
   12f58:	ldr	r0, [sp, #12]
   12f5c:	str	sl, [sp, #12]
   12f60:	ldr	r1, [sp, #16]
   12f64:	add	r7, r5, r6
   12f68:	sub	r0, r0, sl
   12f6c:	ldr	sl, [sp, #4]
   12f70:	add	r0, r1, r0
   12f74:	str	r0, [sp, #16]
   12f78:	cmp	sl, #0
   12f7c:	beq	1302c <__assert_fail@plt+0x1fa4>
   12f80:	ldr	r8, [sl]
   12f84:	cmp	r8, #0
   12f88:	beq	12f9c <__assert_fail@plt+0x1f14>
   12f8c:	cmp	r8, #8
   12f90:	bne	12fc4 <__assert_fail@plt+0x1f3c>
   12f94:	mov	r0, #0
   12f98:	str	r0, [sl]
   12f9c:	sub	r0, r7, r5
   12fa0:	mov	r8, #0
   12fa4:	cmp	r0, #8
   12fa8:	blt	12fc4 <__assert_fail@plt+0x1f3c>
   12fac:	mov	r0, r5
   12fb0:	mov	r1, #10
   12fb4:	mov	r2, #8
   12fb8:	bl	10fec <memchr@plt>
   12fbc:	cmp	r0, #0
   12fc0:	beq	13088 <__assert_fail@plt+0x2000>
   12fc4:	cmp	r6, #1
   12fc8:	blt	13034 <__assert_fail@plt+0x1fac>
   12fcc:	mov	r6, r8
   12fd0:	mov	r0, r5
   12fd4:	ldrb	r1, [r5], #1
   12fd8:	cmp	r1, #10
   12fdc:	bne	12fec <__assert_fail@plt+0x1f64>
   12fe0:	cmp	r5, r7
   12fe4:	bcc	12fd0 <__assert_fail@plt+0x1f48>
   12fe8:	b	13014 <__assert_fail@plt+0x1f8c>
   12fec:	add	r2, r6, #1
   12ff0:	mov	r3, sl
   12ff4:	add	r5, r0, #1
   12ff8:	str	r2, [r3], r6
   12ffc:	cmp	r5, r7
   13000:	strb	r1, [r3, #4]
   13004:	ldr	r6, [sl]
   13008:	bcs	13014 <__assert_fail@plt+0x1f8c>
   1300c:	cmp	r6, #8
   13010:	bne	12fd0 <__assert_fail@plt+0x1f48>
   13014:	add	r5, r0, #1
   13018:	b	13038 <__assert_fail@plt+0x1fb0>
   1301c:	ldr	sl, [sp, #12]
   13020:	sub	r6, r6, #1
   13024:	add	r5, r5, #1
   13028:	b	12f1c <__assert_fail@plt+0x1e94>
   1302c:	mov	r0, r5
   13030:	b	13060 <__assert_fail@plt+0x1fd8>
   13034:	mov	r6, r8
   13038:	cmp	r6, #7
   1303c:	mov	r0, #0
   13040:	mov	r8, #0
   13044:	movwgt	r0, #1
   13048:	cmp	r6, #0
   1304c:	beq	13218 <__assert_fail@plt+0x2190>
   13050:	ldr	r1, [sp, #8]
   13054:	orrs	r0, r0, r1
   13058:	ldr	r0, [sp]
   1305c:	beq	13218 <__assert_fail@plt+0x2190>
   13060:	mov	r1, r6
   13064:	mov	r2, r9
   13068:	mov	r3, r4
   1306c:	bl	13240 <__assert_fail@plt+0x21b8>
   13070:	cmp	r0, #0
   13074:	mov	r8, r6
   13078:	beq	13218 <__assert_fail@plt+0x2190>
   1307c:	ldr	sl, [sp, #12]
   13080:	sub	r6, r7, r5
   13084:	b	12f1c <__assert_fail@plt+0x1e94>
   13088:	add	r1, r5, #8
   1308c:	mov	r0, r5
   13090:	mov	r6, #8
   13094:	mov	r5, r1
   13098:	b	13060 <__assert_fail@plt+0x1fd8>
   1309c:	mov	r8, r6
   130a0:	b	13218 <__assert_fail@plt+0x2190>
   130a4:	add	r1, r5, #8
   130a8:	mov	r0, r5
   130ac:	mov	r6, #8
   130b0:	mov	r5, r1
   130b4:	b	131c4 <__assert_fail@plt+0x213c>
   130b8:	tst	r0, #1
   130bc:	bne	130d8 <__assert_fail@plt+0x2050>
   130c0:	ldrb	r0, [r5]
   130c4:	ldr	r1, [sp, #8]
   130c8:	subs	r0, r0, #10
   130cc:	movwne	r0, #1
   130d0:	orrs	r0, r0, r1
   130d4:	beq	131e8 <__assert_fail@plt+0x2160>
   130d8:	add	r7, r5, r8
   130dc:	cmp	r4, #0
   130e0:	str	sl, [sp, #12]
   130e4:	beq	13190 <__assert_fail@plt+0x2108>
   130e8:	ldr	r6, [r4]
   130ec:	cmp	r6, #0
   130f0:	beq	13104 <__assert_fail@plt+0x207c>
   130f4:	cmp	r6, #8
   130f8:	bne	1312c <__assert_fail@plt+0x20a4>
   130fc:	mov	r0, #0
   13100:	str	r0, [r4]
   13104:	sub	r0, r7, r5
   13108:	mov	r6, #0
   1310c:	cmp	r0, #8
   13110:	blt	1312c <__assert_fail@plt+0x20a4>
   13114:	mov	r0, r5
   13118:	mov	r1, #10
   1311c:	mov	r2, #8
   13120:	bl	10fec <memchr@plt>
   13124:	cmp	r0, #0
   13128:	beq	130a4 <__assert_fail@plt+0x201c>
   1312c:	cmp	r8, #1
   13130:	blt	1317c <__assert_fail@plt+0x20f4>
   13134:	mov	r0, r5
   13138:	ldrb	r1, [r5], #1
   1313c:	cmp	r1, #10
   13140:	bne	13150 <__assert_fail@plt+0x20c8>
   13144:	cmp	r5, r7
   13148:	bcc	13134 <__assert_fail@plt+0x20ac>
   1314c:	b	13178 <__assert_fail@plt+0x20f0>
   13150:	add	r2, r6, #1
   13154:	mov	r3, r4
   13158:	add	r5, r0, #1
   1315c:	str	r2, [r3], r6
   13160:	cmp	r5, r7
   13164:	strb	r1, [r3, #4]
   13168:	ldr	r6, [r4]
   1316c:	bcs	13178 <__assert_fail@plt+0x20f0>
   13170:	cmp	r6, #8
   13174:	bne	13134 <__assert_fail@plt+0x20ac>
   13178:	add	r5, r0, #1
   1317c:	ldr	r0, [sp]
   13180:	mov	r8, #0
   13184:	cmp	r6, #0
   13188:	bne	131a4 <__assert_fail@plt+0x211c>
   1318c:	b	13218 <__assert_fail@plt+0x2190>
   13190:	mov	r6, r8
   13194:	mov	r0, r5
   13198:	mov	r8, #0
   1319c:	cmp	r6, #0
   131a0:	beq	13218 <__assert_fail@plt+0x2190>
   131a4:	ldr	r2, [sp, #8]
   131a8:	cmp	r6, #7
   131ac:	mov	r1, #0
   131b0:	movwgt	r1, #1
   131b4:	orr	r1, r9, r1
   131b8:	orr	r1, r1, r2
   131bc:	cmp	r1, #1
   131c0:	bne	13218 <__assert_fail@plt+0x2190>
   131c4:	mov	r1, r6
   131c8:	add	r2, sp, #16
   131cc:	add	r3, sp, #12
   131d0:	bl	13240 <__assert_fail@plt+0x21b8>
   131d4:	cmp	r0, #0
   131d8:	mov	r8, r6
   131dc:	beq	13218 <__assert_fail@plt+0x2190>
   131e0:	sub	r8, r7, r5
   131e4:	b	131f0 <__assert_fail@plt+0x2168>
   131e8:	sub	r8, r8, #1
   131ec:	add	r5, r5, #1
   131f0:	cmp	r8, #0
   131f4:	mov	r0, r8
   131f8:	ldr	sl, [sp, #12]
   131fc:	movwne	r0, #1
   13200:	orrs	r0, r9, r0
   13204:	clz	r0, r8
   13208:	lsr	r0, r0, #5
   1320c:	bne	130b8 <__assert_fail@plt+0x2030>
   13210:	b	13218 <__assert_fail@plt+0x2190>
   13214:	mov	r8, #0
   13218:	ldr	r0, [fp, #8]
   1321c:	ldr	r1, [sp, #12]
   13220:	mov	r2, r0
   13224:	ldr	r0, [r0]
   13228:	sub	r0, r0, r1
   1322c:	str	r0, [r2]
   13230:	clz	r0, r8
   13234:	lsr	r0, r0, #5
   13238:	sub	sp, fp, #28
   1323c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13240:	push	{r4, r5, r6, sl, fp, lr}
   13244:	add	fp, sp, #16
   13248:	mov	ip, #0
   1324c:	cmp	r1, #8
   13250:	blt	13470 <__assert_fail@plt+0x23e8>
   13254:	ldrb	r1, [r0]
   13258:	movw	lr, #39935	; 0x9bff
   1325c:	movt	lr, #1
   13260:	add	r1, lr, r1
   13264:	ldrsb	r4, [r1]
   13268:	cmp	r4, #0
   1326c:	blt	13470 <__assert_fail@plt+0x23e8>
   13270:	ldrb	r1, [r0, #1]
   13274:	add	r1, lr, r1
   13278:	ldrsb	r1, [r1]
   1327c:	cmp	r1, #0
   13280:	blt	13470 <__assert_fail@plt+0x23e8>
   13284:	ldr	r5, [r3]
   13288:	ldr	ip, [r2]
   1328c:	cmp	r5, #0
   13290:	beq	132d0 <__assert_fail@plt+0x2248>
   13294:	ubfx	r5, r1, #2, #6
   13298:	orr	r4, r5, r4, lsl #3
   1329c:	strb	r4, [ip], #1
   132a0:	ldr	r4, [r3]
   132a4:	sub	r5, r4, #1
   132a8:	str	r5, [r3]
   132ac:	ldrb	r4, [r0, #2]
   132b0:	cmp	r4, #61	; 0x3d
   132b4:	bne	132e0 <__assert_fail@plt+0x2258>
   132b8:	ldrb	r1, [r0, #3]
   132bc:	cmp	r1, #61	; 0x3d
   132c0:	ldrbeq	r1, [r0, #4]
   132c4:	cmpeq	r1, #61	; 0x3d
   132c8:	bne	133bc <__assert_fail@plt+0x2334>
   132cc:	b	13338 <__assert_fail@plt+0x22b0>
   132d0:	mov	r5, #0
   132d4:	ldrb	r4, [r0, #2]
   132d8:	cmp	r4, #61	; 0x3d
   132dc:	beq	132b8 <__assert_fail@plt+0x2230>
   132e0:	add	r4, lr, r4
   132e4:	ldrsb	r6, [r4]
   132e8:	cmp	r6, #0
   132ec:	blt	133bc <__assert_fail@plt+0x2334>
   132f0:	ldrb	r4, [r0, #3]
   132f4:	add	r4, lr, r4
   132f8:	ldrsb	r4, [r4]
   132fc:	cmn	r4, #1
   13300:	ble	133bc <__assert_fail@plt+0x2334>
   13304:	cmp	r5, #0
   13308:	beq	13348 <__assert_fail@plt+0x22c0>
   1330c:	lsl	r5, r6, #1
   13310:	orr	r1, r5, r1, lsl #6
   13314:	and	r5, r4, #240	; 0xf0
   13318:	orr	r1, r1, r5, lsr #4
   1331c:	strb	r1, [ip], #1
   13320:	ldr	r1, [r3]
   13324:	sub	r5, r1, #1
   13328:	str	r5, [r3]
   1332c:	ldrb	r1, [r0, #4]
   13330:	cmp	r1, #61	; 0x3d
   13334:	bne	13358 <__assert_fail@plt+0x22d0>
   13338:	ldrb	r1, [r0, #5]
   1333c:	cmp	r1, #61	; 0x3d
   13340:	beq	133a8 <__assert_fail@plt+0x2320>
   13344:	b	133bc <__assert_fail@plt+0x2334>
   13348:	mov	r5, #0
   1334c:	ldrb	r1, [r0, #4]
   13350:	cmp	r1, #61	; 0x3d
   13354:	beq	13338 <__assert_fail@plt+0x22b0>
   13358:	add	r1, lr, r1
   1335c:	ldrsb	r1, [r1]
   13360:	cmn	r1, #1
   13364:	ble	133bc <__assert_fail@plt+0x2334>
   13368:	cmp	r5, #0
   1336c:	beq	13398 <__assert_fail@plt+0x2310>
   13370:	ubfx	r5, r1, #1, #7
   13374:	orr	r4, r5, r4, lsl #4
   13378:	strb	r4, [ip], #1
   1337c:	ldr	r4, [r3]
   13380:	sub	r4, r4, #1
   13384:	str	r4, [r3]
   13388:	ldrb	r5, [r0, #5]
   1338c:	cmp	r5, #61	; 0x3d
   13390:	beq	133a8 <__assert_fail@plt+0x2320>
   13394:	b	133cc <__assert_fail@plt+0x2344>
   13398:	mov	r4, #0
   1339c:	ldrb	r5, [r0, #5]
   133a0:	cmp	r5, #61	; 0x3d
   133a4:	bne	133cc <__assert_fail@plt+0x2344>
   133a8:	ldrb	r1, [r0, #6]
   133ac:	cmp	r1, #61	; 0x3d
   133b0:	ldrbeq	r0, [r0, #7]
   133b4:	cmpeq	r0, #61	; 0x3d
   133b8:	beq	13468 <__assert_fail@plt+0x23e0>
   133bc:	str	ip, [r2]
   133c0:	mov	ip, #0
   133c4:	mov	r0, ip
   133c8:	pop	{r4, r5, r6, sl, fp, pc}
   133cc:	add	r5, lr, r5
   133d0:	ldrsb	r5, [r5]
   133d4:	cmp	r5, #0
   133d8:	blt	133bc <__assert_fail@plt+0x2334>
   133dc:	ldrb	r6, [r0, #6]
   133e0:	add	r6, lr, r6
   133e4:	ldrsb	r6, [r6]
   133e8:	cmn	r6, #1
   133ec:	ble	133bc <__assert_fail@plt+0x2334>
   133f0:	cmp	r4, #0
   133f4:	beq	13424 <__assert_fail@plt+0x239c>
   133f8:	ubfx	r4, r6, #3, #5
   133fc:	orr	r4, r4, r5, lsl #2
   13400:	orr	r1, r4, r1, lsl #7
   13404:	strb	r1, [ip], #1
   13408:	ldr	r1, [r3]
   1340c:	sub	r1, r1, #1
   13410:	str	r1, [r3]
   13414:	ldrb	r4, [r0, #7]
   13418:	cmp	r4, #61	; 0x3d
   1341c:	bne	13434 <__assert_fail@plt+0x23ac>
   13420:	b	13468 <__assert_fail@plt+0x23e0>
   13424:	mov	r1, #0
   13428:	ldrb	r4, [r0, #7]
   1342c:	cmp	r4, #61	; 0x3d
   13430:	beq	13468 <__assert_fail@plt+0x23e0>
   13434:	add	r4, lr, r4
   13438:	ldrsb	r4, [r4]
   1343c:	cmn	r4, #1
   13440:	ble	133bc <__assert_fail@plt+0x2334>
   13444:	cmp	r1, #0
   13448:	beq	13468 <__assert_fail@plt+0x23e0>
   1344c:	ldrb	r0, [r0, #6]
   13450:	ldrb	r0, [lr, r0]
   13454:	orr	r0, r4, r0, lsl #5
   13458:	strb	r0, [ip], #1
   1345c:	ldr	r0, [r3]
   13460:	sub	r0, r0, #1
   13464:	str	r0, [r3]
   13468:	str	ip, [r2]
   1346c:	mov	ip, #1
   13470:	mov	r0, ip
   13474:	pop	{r4, r5, r6, sl, fp, pc}
   13478:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1347c:	add	fp, sp, #24
   13480:	sub	sp, sp, #8
   13484:	mov	r7, r0
   13488:	asr	r0, r2, #3
   1348c:	mov	r4, r3
   13490:	mov	r6, r2
   13494:	mov	r8, r1
   13498:	add	r0, r0, r0, lsl #2
   1349c:	add	r0, r0, #5
   134a0:	str	r0, [sp, #4]
   134a4:	bl	18a14 <__assert_fail@plt+0x798c>
   134a8:	mov	r5, #1
   134ac:	cmp	r0, #0
   134b0:	str	r0, [r4]
   134b4:	beq	134ec <__assert_fail@plt+0x2464>
   134b8:	mov	r3, r0
   134bc:	add	r0, sp, #4
   134c0:	mov	r1, r8
   134c4:	mov	r2, r6
   134c8:	str	r0, [sp]
   134cc:	mov	r0, r7
   134d0:	bl	12e68 <__assert_fail@plt+0x1de0>
   134d4:	cmp	r0, #0
   134d8:	beq	134f8 <__assert_fail@plt+0x2470>
   134dc:	ldr	r0, [fp, #8]
   134e0:	cmp	r0, #0
   134e4:	ldrne	r1, [sp, #4]
   134e8:	strne	r1, [r0]
   134ec:	mov	r0, r5
   134f0:	sub	sp, fp, #24
   134f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   134f8:	ldr	r0, [r4]
   134fc:	bl	1439c <__assert_fail@plt+0x3314>
   13500:	mov	r5, #0
   13504:	str	r5, [r4]
   13508:	mov	r0, r5
   1350c:	sub	sp, fp, #24
   13510:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13514:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13518:	add	fp, sp, #24
   1351c:	tst	r3, #3
   13520:	bne	13598 <__assert_fail@plt+0x2510>
   13524:	asr	r7, r3, #2
   13528:	add	r7, r7, r7, lsl #1
   1352c:	cmp	r7, r1
   13530:	bne	13598 <__assert_fail@plt+0x2510>
   13534:	cmp	r1, #0
   13538:	beq	135b4 <__assert_fail@plt+0x252c>
   1353c:	movw	r3, #40191	; 0x9cff
   13540:	movt	r3, #1
   13544:	ldrb	r7, [r0]
   13548:	subs	r1, r1, #3
   1354c:	ldrb	r6, [r3, r7, lsr #2]
   13550:	strb	r6, [r2]
   13554:	ldrb	r6, [r0, #1]
   13558:	lsr	r5, r6, #4
   1355c:	bfi	r5, r7, #4, #2
   13560:	ldrb	r7, [r3, r5]
   13564:	strb	r7, [r2, #1]
   13568:	ldrb	r7, [r0, #2]
   1356c:	add	r0, r0, #3
   13570:	and	r5, r7, #63	; 0x3f
   13574:	lsr	r7, r7, #6
   13578:	bfi	r7, r6, #2, #4
   1357c:	ldrb	r5, [r3, r5]
   13580:	ldrb	r7, [r3, r7]
   13584:	strb	r5, [r2, #3]
   13588:	strb	r7, [r2, #2]
   1358c:	add	r2, r2, #4
   13590:	bne	13544 <__assert_fail@plt+0x24bc>
   13594:	b	135b4 <__assert_fail@plt+0x252c>
   13598:	cmp	r1, #0
   1359c:	cmpne	r3, #0
   135a0:	bne	135b8 <__assert_fail@plt+0x2530>
   135a4:	cmp	r3, #0
   135a8:	beq	135b4 <__assert_fail@plt+0x252c>
   135ac:	mov	r0, #0
   135b0:	strb	r0, [r2]
   135b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135b8:	movw	r6, #40191	; 0x9cff
   135bc:	add	r0, r0, #1
   135c0:	sub	ip, r3, #3
   135c4:	sub	lr, r3, #2
   135c8:	sub	r9, r3, #1
   135cc:	sub	r8, r3, #4
   135d0:	mov	r3, #0
   135d4:	movt	r6, #1
   135d8:	ldrb	r4, [r0, #-1]
   135dc:	mov	r7, r2
   135e0:	cmp	r9, r3
   135e4:	ldrb	r4, [r6, r4, lsr #2]
   135e8:	strb	r4, [r7, r3]!
   135ec:	beq	135b4 <__assert_fail@plt+0x252c>
   135f0:	ldrb	r4, [r0, #-1]
   135f4:	cmp	r1, #1
   135f8:	lsl	r5, r4, #4
   135fc:	mov	r4, #0
   13600:	ldrbne	r4, [r0]
   13604:	lsrne	r4, r4, #4
   13608:	cmp	lr, r3
   1360c:	add	r4, r4, r5
   13610:	and	r4, r4, #63	; 0x3f
   13614:	ldrb	r4, [r6, r4]
   13618:	strb	r4, [r7, #1]
   1361c:	beq	135b4 <__assert_fail@plt+0x252c>
   13620:	cmp	r1, #1
   13624:	beq	13650 <__assert_fail@plt+0x25c8>
   13628:	subs	r5, r1, #2
   1362c:	ldrb	r1, [r0]
   13630:	ldrbne	r4, [r0, #1]
   13634:	lsl	r1, r1, #2
   13638:	lsrne	r4, r4, #6
   1363c:	moveq	r4, #0
   13640:	add	r1, r4, r1
   13644:	and	r1, r1, #63	; 0x3f
   13648:	ldrb	r1, [r6, r1]
   1364c:	b	13658 <__assert_fail@plt+0x25d0>
   13650:	mov	r1, #61	; 0x3d
   13654:	mov	r5, #0
   13658:	cmp	ip, r3
   1365c:	strb	r1, [r7, #2]
   13660:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   13664:	cmp	r5, #0
   13668:	beq	13688 <__assert_fail@plt+0x2600>
   1366c:	ldrb	r1, [r0, #1]
   13670:	and	r1, r1, #63	; 0x3f
   13674:	ldrb	r1, [r6, r1]
   13678:	cmp	r8, r3
   1367c:	strb	r1, [r7, #3]
   13680:	bne	13698 <__assert_fail@plt+0x2610>
   13684:	b	135b4 <__assert_fail@plt+0x252c>
   13688:	mov	r1, #61	; 0x3d
   1368c:	cmp	r8, r3
   13690:	strb	r1, [r7, #3]
   13694:	beq	135b4 <__assert_fail@plt+0x252c>
   13698:	subs	r1, r5, #1
   1369c:	add	r3, r3, #4
   136a0:	addne	r0, r0, #3
   136a4:	cmpne	r5, #0
   136a8:	bne	135d8 <__assert_fail@plt+0x2550>
   136ac:	add	r2, r2, r3
   136b0:	b	135ac <__assert_fail@plt+0x2524>
   136b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   136b8:	add	fp, sp, #24
   136bc:	mov	r8, r0
   136c0:	movw	r0, #21846	; 0x5556
   136c4:	mov	r4, r1
   136c8:	mov	r6, r2
   136cc:	movt	r0, #21845	; 0x5555
   136d0:	smmul	r0, r1, r0
   136d4:	add	r0, r0, r0, lsr #31
   136d8:	add	r1, r0, r0, lsl #1
   136dc:	subs	r1, r4, r1
   136e0:	addne	r0, r0, #1
   136e4:	cmn	r0, #1
   136e8:	ble	136f8 <__assert_fail@plt+0x2670>
   136ec:	cmn	r0, #-536870911	; 0xe0000001
   136f0:	ble	1370c <__assert_fail@plt+0x2684>
   136f4:	b	13750 <__assert_fail@plt+0x26c8>
   136f8:	beq	1370c <__assert_fail@plt+0x2684>
   136fc:	mov	r1, #-2147483648	; 0x80000000
   13700:	sdiv	r1, r1, r0
   13704:	cmp	r1, #4
   13708:	blt	13750 <__assert_fail@plt+0x26c8>
   1370c:	cmn	r4, #1
   13710:	ble	13750 <__assert_fail@plt+0x26c8>
   13714:	lsl	r7, r0, #2
   13718:	orr	r5, r7, #1
   1371c:	mov	r0, r5
   13720:	bl	18a14 <__assert_fail@plt+0x798c>
   13724:	cmp	r0, #0
   13728:	str	r0, [r6]
   1372c:	moveq	r0, r5
   13730:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13734:	mov	r2, r0
   13738:	mov	r0, r8
   1373c:	mov	r1, r4
   13740:	mov	r3, r5
   13744:	bl	13514 <__assert_fail@plt+0x248c>
   13748:	mov	r0, r7
   1374c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13750:	mov	r7, #0
   13754:	mov	r0, r7
   13758:	str	r7, [r6]
   1375c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13760:	movw	r1, #40255	; 0x9d3f
   13764:	movt	r1, #1
   13768:	add	r0, r1, r0
   1376c:	ldrsb	r1, [r0]
   13770:	mov	r0, #0
   13774:	cmn	r1, #1
   13778:	movwgt	r0, #1
   1377c:	bx	lr
   13780:	mov	r1, #0
   13784:	str	r1, [r0]
   13788:	bx	lr
   1378c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13790:	add	fp, sp, #28
   13794:	sub	sp, sp, #36	; 0x24
   13798:	mov	r4, r0
   1379c:	ldr	r0, [fp, #8]
   137a0:	mov	r7, r3
   137a4:	mov	sl, r2
   137a8:	mov	lr, #0
   137ac:	str	r1, [sp, #32]
   137b0:	cmp	r4, #0
   137b4:	ldr	r3, [r0]
   137b8:	mov	r0, #0
   137bc:	beq	137d4 <__assert_fail@plt+0x274c>
   137c0:	clz	r0, sl
   137c4:	lsr	lr, r0, #5
   137c8:	ldr	r0, [r4]
   137cc:	cmp	r0, #0
   137d0:	movwne	r0, #1
   137d4:	orr	r0, r0, lr
   137d8:	movw	r2, #40255	; 0x9d3f
   137dc:	str	r4, [sp, #20]
   137e0:	str	lr, [sp, #8]
   137e4:	str	r0, [sp, #16]
   137e8:	add	r0, r4, #4
   137ec:	movt	r2, #1
   137f0:	str	r0, [sp, #4]
   137f4:	clz	r0, r4
   137f8:	lsr	ip, r0, #5
   137fc:	str	ip, [sp, #12]
   13800:	b	13818 <__assert_fail@plt+0x2790>
   13804:	ldr	r0, [sp, #32]
   13808:	ldr	r4, [sp, #20]
   1380c:	movw	r2, #40255	; 0x9d3f
   13810:	movt	r2, #1
   13814:	sub	sl, r5, r0
   13818:	ldr	r1, [sp, #16]
   1381c:	cmp	sl, #2
   13820:	mov	r0, #0
   13824:	movwlt	r0, #1
   13828:	orrs	r0, r1, r0
   1382c:	beq	13864 <__assert_fail@plt+0x27dc>
   13830:	ldr	r6, [sp, #32]
   13834:	str	r3, [sp, #24]
   13838:	cmp	sl, #0
   1383c:	mov	r0, sl
   13840:	movwne	r0, #1
   13844:	orr	r0, lr, r0
   13848:	cmp	r0, #1
   1384c:	bne	13d64 <__assert_fail@plt+0x2cdc>
   13850:	mov	r1, lr
   13854:	cmp	sl, #0
   13858:	beq	139d8 <__assert_fail@plt+0x2950>
   1385c:	ldr	r3, [sp, #24]
   13860:	b	13ac8 <__assert_fail@plt+0x2a40>
   13864:	ldr	r6, [sp, #32]
   13868:	mov	lr, #0
   1386c:	mov	r8, #3
   13870:	mov	r1, sl
   13874:	mov	ip, sl
   13878:	ldr	r0, [sp, #32]
   1387c:	add	r4, r0, r8
   13880:	ldrb	r0, [r4, #-3]!
   13884:	add	r0, r2, r0
   13888:	ldrsb	r5, [r0]
   1388c:	cmp	r5, #0
   13890:	blt	13a0c <__assert_fail@plt+0x2984>
   13894:	ldrb	r0, [r4, #1]
   13898:	mov	r9, r7
   1389c:	add	sl, ip, lr
   138a0:	add	r0, r2, r0
   138a4:	ldrsb	r7, [r0]
   138a8:	cmp	r7, #0
   138ac:	blt	13a18 <__assert_fail@plt+0x2990>
   138b0:	sub	r0, sl, #2
   138b4:	cmp	r3, #0
   138b8:	str	r1, [sp, #28]
   138bc:	beq	13970 <__assert_fail@plt+0x28e8>
   138c0:	mov	r1, ip
   138c4:	mov	ip, r3
   138c8:	ubfx	r3, r7, #4, #4
   138cc:	orr	r3, r3, r5, lsl #2
   138d0:	strb	r3, [r9], #1
   138d4:	mov	r3, ip
   138d8:	mov	ip, r1
   138dc:	sub	r1, r3, #1
   138e0:	cmp	r0, #0
   138e4:	beq	13a20 <__assert_fail@plt+0x2998>
   138e8:	ldrb	r0, [r4, #2]
   138ec:	cmp	r0, #61	; 0x3d
   138f0:	beq	13a2c <__assert_fail@plt+0x29a4>
   138f4:	add	r0, r2, r0
   138f8:	ldrsb	r5, [r0]
   138fc:	cmp	r5, #0
   13900:	blt	13a64 <__assert_fail@plt+0x29dc>
   13904:	sub	r0, sl, #3
   13908:	cmp	r1, #0
   1390c:	beq	13980 <__assert_fail@plt+0x28f8>
   13910:	mov	r2, r3
   13914:	ubfx	r3, r5, #2, #6
   13918:	sub	r1, r1, #1
   1391c:	orr	r3, r3, r7, lsl #4
   13920:	mov	r7, r9
   13924:	strb	r3, [r7], #1
   13928:	mov	r3, r2
   1392c:	movw	r2, #40255	; 0x9d3f
   13930:	movt	r2, #1
   13934:	cmp	r0, #0
   13938:	beq	13a74 <__assert_fail@plt+0x29ec>
   1393c:	ldrb	r0, [r4, #3]
   13940:	cmp	r0, #61	; 0x3d
   13944:	beq	13a80 <__assert_fail@plt+0x29f8>
   13948:	add	r0, r2, r0
   1394c:	ldrsb	r0, [r0]
   13950:	cmp	r0, #0
   13954:	blt	13ab4 <__assert_fail@plt+0x2a2c>
   13958:	cmp	r1, #0
   1395c:	beq	13994 <__assert_fail@plt+0x290c>
   13960:	orr	r0, r0, r5, lsl #6
   13964:	sub	r3, r1, #1
   13968:	strb	r0, [r7], #1
   1396c:	b	13998 <__assert_fail@plt+0x2910>
   13970:	mov	r1, #0
   13974:	cmp	r0, #0
   13978:	bne	138e8 <__assert_fail@plt+0x2860>
   1397c:	b	13a20 <__assert_fail@plt+0x2998>
   13980:	mov	r1, #0
   13984:	mov	r7, r9
   13988:	cmp	r0, #0
   1398c:	bne	1393c <__assert_fail@plt+0x28b4>
   13990:	b	13a74 <__assert_fail@plt+0x29ec>
   13994:	mov	r3, r1
   13998:	ldr	r1, [sp, #28]
   1399c:	sub	lr, lr, #4
   139a0:	add	r8, r8, #4
   139a4:	add	r6, r4, #4
   139a8:	add	sl, ip, lr
   139ac:	add	r0, sl, #4
   139b0:	cmp	r0, #5
   139b4:	sub	r1, r1, #4
   139b8:	bgt	13878 <__assert_fail@plt+0x27f0>
   139bc:	ldr	r0, [sp, #32]
   139c0:	ldr	r4, [sp, #20]
   139c4:	ldr	ip, [sp, #12]
   139c8:	str	r3, [sp, #24]
   139cc:	sub	r6, r0, lr
   139d0:	ldr	lr, [sp, #8]
   139d4:	b	13838 <__assert_fail@plt+0x27b0>
   139d8:	ldr	r3, [sp, #24]
   139dc:	mov	sl, #0
   139e0:	add	r5, r6, sl
   139e4:	cmp	r4, #0
   139e8:	mov	r9, r3
   139ec:	bne	13aec <__assert_fail@plt+0x2a64>
   139f0:	str	r6, [sp, #32]
   139f4:	mov	r8, sl
   139f8:	mov	lr, r1
   139fc:	mov	sl, #0
   13a00:	cmp	r8, #0
   13a04:	bne	13bf4 <__assert_fail@plt+0x2b6c>
   13a08:	b	13d68 <__assert_fail@plt+0x2ce0>
   13a0c:	mov	sl, r1
   13a10:	str	r3, [sp, #24]
   13a14:	b	13abc <__assert_fail@plt+0x2a34>
   13a18:	str	r3, [sp, #24]
   13a1c:	b	13a6c <__assert_fail@plt+0x29e4>
   13a20:	str	r1, [sp, #24]
   13a24:	mov	sl, #2
   13a28:	b	13a6c <__assert_fail@plt+0x29e4>
   13a2c:	add	sl, ip, lr
   13a30:	str	r1, [sp, #24]
   13a34:	ldr	r4, [sp, #20]
   13a38:	ldr	r1, [sp, #8]
   13a3c:	ldr	ip, [sp, #12]
   13a40:	mov	r7, r9
   13a44:	cmp	sl, #4
   13a48:	bne	13ac8 <__assert_fail@plt+0x2a40>
   13a4c:	ldr	r0, [sp, #32]
   13a50:	mov	sl, #4
   13a54:	ldrb	r0, [r0, r8]
   13a58:	cmp	r0, #61	; 0x3d
   13a5c:	beq	13a9c <__assert_fail@plt+0x2a14>
   13a60:	b	13ac8 <__assert_fail@plt+0x2a40>
   13a64:	ldr	sl, [sp, #28]
   13a68:	str	r1, [sp, #24]
   13a6c:	mov	r7, r9
   13a70:	b	13abc <__assert_fail@plt+0x2a34>
   13a74:	str	r1, [sp, #24]
   13a78:	mov	sl, #3
   13a7c:	b	13abc <__assert_fail@plt+0x2a34>
   13a80:	add	sl, ip, lr
   13a84:	str	r1, [sp, #24]
   13a88:	ldr	r4, [sp, #20]
   13a8c:	ldr	r1, [sp, #8]
   13a90:	ldr	ip, [sp, #12]
   13a94:	cmp	sl, #4
   13a98:	bne	13ac8 <__assert_fail@plt+0x2a40>
   13a9c:	ldr	r0, [sp, #32]
   13aa0:	mov	sl, #0
   13aa4:	sub	r0, r0, lr
   13aa8:	mov	lr, r1
   13aac:	add	r6, r0, #4
   13ab0:	b	13838 <__assert_fail@plt+0x27b0>
   13ab4:	ldr	sl, [sp, #28]
   13ab8:	str	r1, [sp, #24]
   13abc:	ldr	r4, [sp, #20]
   13ac0:	ldr	r1, [sp, #8]
   13ac4:	ldr	ip, [sp, #12]
   13ac8:	ldrb	r0, [r6]
   13acc:	subs	r0, r0, #10
   13ad0:	movwne	r0, #1
   13ad4:	orrs	r0, r0, ip
   13ad8:	beq	13bc8 <__assert_fail@plt+0x2b40>
   13adc:	add	r5, r6, sl
   13ae0:	cmp	r4, #0
   13ae4:	mov	r9, r3
   13ae8:	beq	139f0 <__assert_fail@plt+0x2968>
   13aec:	ldr	r8, [r4]
   13af0:	mov	lr, r1
   13af4:	cmp	r8, #0
   13af8:	beq	13b10 <__assert_fail@plt+0x2a88>
   13afc:	cmp	r8, #4
   13b00:	bne	13b50 <__assert_fail@plt+0x2ac8>
   13b04:	ldr	r1, [sp, #20]
   13b08:	mov	r0, #0
   13b0c:	str	r0, [r1]
   13b10:	sub	r0, r5, r6
   13b14:	mov	r8, #0
   13b18:	cmp	r0, #4
   13b1c:	blt	13b50 <__assert_fail@plt+0x2ac8>
   13b20:	mov	r0, r6
   13b24:	mov	r1, #10
   13b28:	mov	r2, #4
   13b2c:	mov	r4, lr
   13b30:	bl	10fec <memchr@plt>
   13b34:	ldr	ip, [sp, #12]
   13b38:	movw	r2, #40255	; 0x9d3f
   13b3c:	mov	r3, r9
   13b40:	mov	lr, r4
   13b44:	cmp	r0, #0
   13b48:	movt	r2, #1
   13b4c:	beq	13d4c <__assert_fail@plt+0x2cc4>
   13b50:	cmp	sl, #1
   13b54:	blt	13be0 <__assert_fail@plt+0x2b58>
   13b58:	mov	r0, r6
   13b5c:	ldrb	r1, [r6], #1
   13b60:	cmp	r1, #10
   13b64:	bne	13b74 <__assert_fail@plt+0x2aec>
   13b68:	cmp	r6, r5
   13b6c:	bcc	13b58 <__assert_fail@plt+0x2ad0>
   13b70:	b	13bac <__assert_fail@plt+0x2b24>
   13b74:	ldr	r4, [sp, #20]
   13b78:	add	r2, r8, #1
   13b7c:	add	r6, r0, #1
   13b80:	cmp	r6, r5
   13b84:	mov	r3, r4
   13b88:	str	r2, [r3], r8
   13b8c:	movw	r2, #40255	; 0x9d3f
   13b90:	strb	r1, [r3, #4]
   13b94:	movt	r2, #1
   13b98:	mov	r3, r9
   13b9c:	ldr	r8, [r4]
   13ba0:	bcs	13bac <__assert_fail@plt+0x2b24>
   13ba4:	cmp	r8, #4
   13ba8:	bne	13b58 <__assert_fail@plt+0x2ad0>
   13bac:	add	r0, r0, #1
   13bb0:	str	r0, [sp, #32]
   13bb4:	ldr	r6, [sp, #4]
   13bb8:	mov	sl, #0
   13bbc:	cmp	r8, #0
   13bc0:	bne	13bf4 <__assert_fail@plt+0x2b6c>
   13bc4:	b	13d68 <__assert_fail@plt+0x2ce0>
   13bc8:	ldr	r3, [sp, #24]
   13bcc:	add	r0, r6, #1
   13bd0:	sub	sl, sl, #1
   13bd4:	mov	lr, r1
   13bd8:	str	r0, [sp, #32]
   13bdc:	b	13818 <__assert_fail@plt+0x2790>
   13be0:	str	r6, [sp, #32]
   13be4:	ldr	r6, [sp, #4]
   13be8:	mov	sl, #0
   13bec:	cmp	r8, #0
   13bf0:	beq	13d68 <__assert_fail@plt+0x2ce0>
   13bf4:	cmp	r8, #3
   13bf8:	mov	r0, #0
   13bfc:	movwgt	r0, #1
   13c00:	orr	r0, lr, r0
   13c04:	orr	r0, r0, ip
   13c08:	cmp	r0, #1
   13c0c:	bne	13d68 <__assert_fail@plt+0x2ce0>
   13c10:	cmp	r8, #2
   13c14:	blt	13d5c <__assert_fail@plt+0x2cd4>
   13c18:	ldrb	r0, [r6]
   13c1c:	mov	r1, r2
   13c20:	add	r0, r2, r0
   13c24:	ldrsb	r2, [r0]
   13c28:	cmp	r2, #0
   13c2c:	blt	13d5c <__assert_fail@plt+0x2cd4>
   13c30:	ldrb	r0, [r6, #1]
   13c34:	add	r0, r1, r0
   13c38:	ldrsb	r0, [r0]
   13c3c:	cmp	r0, #0
   13c40:	blt	13d5c <__assert_fail@plt+0x2cd4>
   13c44:	ldr	r1, [sp, #24]
   13c48:	cmp	r9, #0
   13c4c:	sub	r3, r1, r9
   13c50:	mov	r1, r9
   13c54:	add	r7, r7, r3
   13c58:	beq	13cfc <__assert_fail@plt+0x2c74>
   13c5c:	ubfx	r3, r0, #4, #4
   13c60:	orr	r2, r3, r2, lsl #2
   13c64:	mov	r3, r9
   13c68:	strb	r2, [r7], #1
   13c6c:	sub	r3, r9, #1
   13c70:	mov	sl, #2
   13c74:	cmp	r8, #2
   13c78:	beq	13d68 <__assert_fail@plt+0x2ce0>
   13c7c:	ldrb	r2, [r6, #2]
   13c80:	cmp	r2, #61	; 0x3d
   13c84:	bne	13ca0 <__assert_fail@plt+0x2c18>
   13c88:	cmp	r8, #4
   13c8c:	bne	13d5c <__assert_fail@plt+0x2cd4>
   13c90:	ldrb	r0, [r6, #3]
   13c94:	cmp	r0, #61	; 0x3d
   13c98:	beq	13804 <__assert_fail@plt+0x277c>
   13c9c:	b	13d68 <__assert_fail@plt+0x2ce0>
   13ca0:	movw	r1, #40255	; 0x9d3f
   13ca4:	movt	r1, #1
   13ca8:	add	r2, r1, r2
   13cac:	ldrsb	r2, [r2]
   13cb0:	cmp	r2, #0
   13cb4:	blt	13d5c <__assert_fail@plt+0x2cd4>
   13cb8:	cmp	r3, #0
   13cbc:	beq	13d3c <__assert_fail@plt+0x2cb4>
   13cc0:	mov	r1, r3
   13cc4:	ubfx	r3, r2, #2, #6
   13cc8:	orr	r0, r3, r0, lsl #4
   13ccc:	mov	r3, r1
   13cd0:	strb	r0, [r7], #1
   13cd4:	sub	r3, r1, #1
   13cd8:	cmp	r8, #3
   13cdc:	beq	13d68 <__assert_fail@plt+0x2ce0>
   13ce0:	ldrb	r0, [r6, #3]
   13ce4:	cmp	r0, #61	; 0x3d
   13ce8:	bne	13d10 <__assert_fail@plt+0x2c88>
   13cec:	cmp	r8, #4
   13cf0:	mov	sl, r8
   13cf4:	beq	13804 <__assert_fail@plt+0x277c>
   13cf8:	b	13d68 <__assert_fail@plt+0x2ce0>
   13cfc:	mov	r3, #0
   13d00:	mov	sl, #2
   13d04:	cmp	r8, #2
   13d08:	bne	13c7c <__assert_fail@plt+0x2bf4>
   13d0c:	b	13d68 <__assert_fail@plt+0x2ce0>
   13d10:	movw	r1, #40255	; 0x9d3f
   13d14:	movt	r1, #1
   13d18:	add	r0, r1, r0
   13d1c:	ldrsb	r0, [r0]
   13d20:	cmp	r0, #0
   13d24:	blt	13d5c <__assert_fail@plt+0x2cd4>
   13d28:	cmp	r3, #0
   13d2c:	orrne	r0, r0, r2, lsl #6
   13d30:	subne	r3, r3, #1
   13d34:	strbne	r0, [r7], #1
   13d38:	b	13804 <__assert_fail@plt+0x277c>
   13d3c:	mov	r3, #0
   13d40:	cmp	r8, #3
   13d44:	bne	13ce0 <__assert_fail@plt+0x2c58>
   13d48:	b	13d68 <__assert_fail@plt+0x2ce0>
   13d4c:	add	r0, r6, #4
   13d50:	mov	r8, #4
   13d54:	str	r0, [sp, #32]
   13d58:	b	13c18 <__assert_fail@plt+0x2b90>
   13d5c:	mov	sl, r8
   13d60:	b	13d68 <__assert_fail@plt+0x2ce0>
   13d64:	ldr	r3, [sp, #24]
   13d68:	ldr	r0, [fp, #8]
   13d6c:	mov	r1, r0
   13d70:	ldr	r0, [r0]
   13d74:	sub	r0, r0, r3
   13d78:	str	r0, [r1]
   13d7c:	clz	r0, sl
   13d80:	lsr	r0, r0, #5
   13d84:	sub	sp, fp, #28
   13d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d90:	add	fp, sp, #24
   13d94:	sub	sp, sp, #8
   13d98:	mov	r7, r0
   13d9c:	asr	r0, r2, #2
   13da0:	mov	r4, r3
   13da4:	mov	r6, r2
   13da8:	mov	r8, r1
   13dac:	add	r0, r0, r0, lsl #1
   13db0:	add	r0, r0, #3
   13db4:	str	r0, [sp, #4]
   13db8:	bl	18a14 <__assert_fail@plt+0x798c>
   13dbc:	mov	r5, #1
   13dc0:	cmp	r0, #0
   13dc4:	str	r0, [r4]
   13dc8:	beq	13e00 <__assert_fail@plt+0x2d78>
   13dcc:	mov	r3, r0
   13dd0:	add	r0, sp, #4
   13dd4:	mov	r1, r8
   13dd8:	mov	r2, r6
   13ddc:	str	r0, [sp]
   13de0:	mov	r0, r7
   13de4:	bl	1378c <__assert_fail@plt+0x2704>
   13de8:	cmp	r0, #0
   13dec:	beq	13e0c <__assert_fail@plt+0x2d84>
   13df0:	ldr	r0, [fp, #8]
   13df4:	cmp	r0, #0
   13df8:	ldrne	r1, [sp, #4]
   13dfc:	strne	r1, [r0]
   13e00:	mov	r0, r5
   13e04:	sub	sp, fp, #24
   13e08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e0c:	ldr	r0, [r4]
   13e10:	bl	1439c <__assert_fail@plt+0x3314>
   13e14:	mov	r5, #0
   13e18:	str	r5, [r4]
   13e1c:	mov	r0, r5
   13e20:	sub	sp, fp, #24
   13e24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e28:	sub	r2, r0, #65	; 0x41
   13e2c:	mov	r1, r0
   13e30:	mov	r0, #1
   13e34:	cmp	r2, #26
   13e38:	subcs	r2, r1, #97	; 0x61
   13e3c:	cmpcs	r2, #26
   13e40:	bcs	13e48 <__assert_fail@plt+0x2dc0>
   13e44:	bx	lr
   13e48:	sub	r1, r1, #48	; 0x30
   13e4c:	cmp	r1, #10
   13e50:	movcs	r0, #0
   13e54:	bx	lr
   13e58:	sub	r2, r0, #65	; 0x41
   13e5c:	mov	r1, r0
   13e60:	mov	r0, #1
   13e64:	cmp	r2, #26
   13e68:	subcs	r1, r1, #97	; 0x61
   13e6c:	cmpcs	r1, #26
   13e70:	movcs	r0, #0
   13e74:	bx	lr
   13e78:	mov	r1, #0
   13e7c:	cmp	r0, #128	; 0x80
   13e80:	movwcc	r1, #1
   13e84:	mov	r0, r1
   13e88:	bx	lr
   13e8c:	sub	r1, r0, #9
   13e90:	sub	r0, r0, #32
   13e94:	clz	r1, r1
   13e98:	clz	r0, r0
   13e9c:	lsr	r1, r1, #5
   13ea0:	lsr	r0, r0, #5
   13ea4:	orr	r0, r0, r1
   13ea8:	bx	lr
   13eac:	mov	r1, r0
   13eb0:	mov	r0, #1
   13eb4:	cmp	r1, #32
   13eb8:	bxcc	lr
   13ebc:	cmp	r1, #127	; 0x7f
   13ec0:	movne	r0, #0
   13ec4:	bx	lr
   13ec8:	sub	r1, r0, #48	; 0x30
   13ecc:	mov	r0, #0
   13ed0:	cmp	r1, #10
   13ed4:	movwcc	r0, #1
   13ed8:	bx	lr
   13edc:	sub	r1, r0, #33	; 0x21
   13ee0:	mov	r0, #0
   13ee4:	cmp	r1, #94	; 0x5e
   13ee8:	movwcc	r0, #1
   13eec:	bx	lr
   13ef0:	sub	r1, r0, #97	; 0x61
   13ef4:	mov	r0, #0
   13ef8:	cmp	r1, #26
   13efc:	movwcc	r0, #1
   13f00:	bx	lr
   13f04:	sub	r1, r0, #32
   13f08:	mov	r0, #0
   13f0c:	cmp	r1, #95	; 0x5f
   13f10:	movwcc	r0, #1
   13f14:	bx	lr
   13f18:	sub	r1, r0, #33	; 0x21
   13f1c:	cmp	r1, #93	; 0x5d
   13f20:	bhi	140ac <__assert_fail@plt+0x3024>
   13f24:	add	r2, pc, #4
   13f28:	mov	r0, #1
   13f2c:	ldr	pc, [r2, r1, lsl #2]
   13f30:	andeq	r4, r1, r8, lsr #1
   13f34:	andeq	r4, r1, r8, lsr #1
   13f38:	andeq	r4, r1, r8, lsr #1
   13f3c:	andeq	r4, r1, r8, lsr #1
   13f40:	andeq	r4, r1, r8, lsr #1
   13f44:	andeq	r4, r1, r8, lsr #1
   13f48:	andeq	r4, r1, r8, lsr #1
   13f4c:	andeq	r4, r1, r8, lsr #1
   13f50:	andeq	r4, r1, r8, lsr #1
   13f54:	andeq	r4, r1, r8, lsr #1
   13f58:	andeq	r4, r1, r8, lsr #1
   13f5c:	andeq	r4, r1, r8, lsr #1
   13f60:	andeq	r4, r1, r8, lsr #1
   13f64:	andeq	r4, r1, r8, lsr #1
   13f68:	andeq	r4, r1, r8, lsr #1
   13f6c:	andeq	r4, r1, ip, lsr #1
   13f70:	andeq	r4, r1, ip, lsr #1
   13f74:	andeq	r4, r1, ip, lsr #1
   13f78:	andeq	r4, r1, ip, lsr #1
   13f7c:	andeq	r4, r1, ip, lsr #1
   13f80:	andeq	r4, r1, ip, lsr #1
   13f84:	andeq	r4, r1, ip, lsr #1
   13f88:	andeq	r4, r1, ip, lsr #1
   13f8c:	andeq	r4, r1, ip, lsr #1
   13f90:	andeq	r4, r1, ip, lsr #1
   13f94:	andeq	r4, r1, r8, lsr #1
   13f98:	andeq	r4, r1, r8, lsr #1
   13f9c:	andeq	r4, r1, r8, lsr #1
   13fa0:	andeq	r4, r1, r8, lsr #1
   13fa4:	andeq	r4, r1, r8, lsr #1
   13fa8:	andeq	r4, r1, r8, lsr #1
   13fac:	andeq	r4, r1, r8, lsr #1
   13fb0:	andeq	r4, r1, ip, lsr #1
   13fb4:	andeq	r4, r1, ip, lsr #1
   13fb8:	andeq	r4, r1, ip, lsr #1
   13fbc:	andeq	r4, r1, ip, lsr #1
   13fc0:	andeq	r4, r1, ip, lsr #1
   13fc4:	andeq	r4, r1, ip, lsr #1
   13fc8:	andeq	r4, r1, ip, lsr #1
   13fcc:	andeq	r4, r1, ip, lsr #1
   13fd0:	andeq	r4, r1, ip, lsr #1
   13fd4:	andeq	r4, r1, ip, lsr #1
   13fd8:	andeq	r4, r1, ip, lsr #1
   13fdc:	andeq	r4, r1, ip, lsr #1
   13fe0:	andeq	r4, r1, ip, lsr #1
   13fe4:	andeq	r4, r1, ip, lsr #1
   13fe8:	andeq	r4, r1, ip, lsr #1
   13fec:	andeq	r4, r1, ip, lsr #1
   13ff0:	andeq	r4, r1, ip, lsr #1
   13ff4:	andeq	r4, r1, ip, lsr #1
   13ff8:	andeq	r4, r1, ip, lsr #1
   13ffc:	andeq	r4, r1, ip, lsr #1
   14000:	andeq	r4, r1, ip, lsr #1
   14004:	andeq	r4, r1, ip, lsr #1
   14008:	andeq	r4, r1, ip, lsr #1
   1400c:	andeq	r4, r1, ip, lsr #1
   14010:	andeq	r4, r1, ip, lsr #1
   14014:	andeq	r4, r1, ip, lsr #1
   14018:	andeq	r4, r1, r8, lsr #1
   1401c:	andeq	r4, r1, r8, lsr #1
   14020:	andeq	r4, r1, r8, lsr #1
   14024:	andeq	r4, r1, r8, lsr #1
   14028:	andeq	r4, r1, r8, lsr #1
   1402c:	andeq	r4, r1, r8, lsr #1
   14030:	andeq	r4, r1, ip, lsr #1
   14034:	andeq	r4, r1, ip, lsr #1
   14038:	andeq	r4, r1, ip, lsr #1
   1403c:	andeq	r4, r1, ip, lsr #1
   14040:	andeq	r4, r1, ip, lsr #1
   14044:	andeq	r4, r1, ip, lsr #1
   14048:	andeq	r4, r1, ip, lsr #1
   1404c:	andeq	r4, r1, ip, lsr #1
   14050:	andeq	r4, r1, ip, lsr #1
   14054:	andeq	r4, r1, ip, lsr #1
   14058:	andeq	r4, r1, ip, lsr #1
   1405c:	andeq	r4, r1, ip, lsr #1
   14060:	andeq	r4, r1, ip, lsr #1
   14064:	andeq	r4, r1, ip, lsr #1
   14068:	andeq	r4, r1, ip, lsr #1
   1406c:	andeq	r4, r1, ip, lsr #1
   14070:	andeq	r4, r1, ip, lsr #1
   14074:	andeq	r4, r1, ip, lsr #1
   14078:	andeq	r4, r1, ip, lsr #1
   1407c:	andeq	r4, r1, ip, lsr #1
   14080:	andeq	r4, r1, ip, lsr #1
   14084:	andeq	r4, r1, ip, lsr #1
   14088:	andeq	r4, r1, ip, lsr #1
   1408c:	andeq	r4, r1, ip, lsr #1
   14090:	andeq	r4, r1, ip, lsr #1
   14094:	andeq	r4, r1, ip, lsr #1
   14098:	andeq	r4, r1, r8, lsr #1
   1409c:	andeq	r4, r1, r8, lsr #1
   140a0:	andeq	r4, r1, r8, lsr #1
   140a4:	andeq	r4, r1, r8, lsr #1
   140a8:	bx	lr
   140ac:	mov	r0, #0
   140b0:	bx	lr
   140b4:	sub	r0, r0, #9
   140b8:	cmp	r0, #23
   140bc:	movhi	r0, #0
   140c0:	bxhi	lr
   140c4:	movw	r1, #31
   140c8:	bic	r0, r0, #-16777216	; 0xff000000
   140cc:	mov	r2, #1
   140d0:	movt	r1, #128	; 0x80
   140d4:	and	r0, r2, r1, lsr r0
   140d8:	bx	lr
   140dc:	sub	r1, r0, #65	; 0x41
   140e0:	mov	r0, #0
   140e4:	cmp	r1, #26
   140e8:	movwcc	r0, #1
   140ec:	bx	lr
   140f0:	sub	r2, r0, #48	; 0x30
   140f4:	mov	r1, r0
   140f8:	mov	r0, #1
   140fc:	cmp	r2, #22
   14100:	bhi	14118 <__assert_fail@plt+0x3090>
   14104:	movw	r3, #1023	; 0x3ff
   14108:	mov	ip, #1
   1410c:	movt	r3, #126	; 0x7e
   14110:	tst	r3, ip, lsl r2
   14114:	bxne	lr
   14118:	sub	r1, r1, #97	; 0x61
   1411c:	cmp	r1, #6
   14120:	movcs	r0, #0
   14124:	bxcs	lr
   14128:	bx	lr
   1412c:	sub	r1, r0, #65	; 0x41
   14130:	cmp	r1, #26
   14134:	addcc	r0, r0, #32
   14138:	bx	lr
   1413c:	sub	r1, r0, #97	; 0x61
   14140:	cmp	r1, #26
   14144:	subcc	r0, r0, #32
   14148:	bx	lr
   1414c:	movw	r1, #45420	; 0xb16c
   14150:	movt	r1, #2
   14154:	str	r0, [r1, #4]
   14158:	bx	lr
   1415c:	movw	r1, #45420	; 0xb16c
   14160:	movt	r1, #2
   14164:	strb	r0, [r1]
   14168:	bx	lr
   1416c:	push	{r4, r5, r6, sl, fp, lr}
   14170:	add	fp, sp, #16
   14174:	sub	sp, sp, #8
   14178:	movw	r0, #45388	; 0xb14c
   1417c:	movt	r0, #2
   14180:	ldr	r0, [r0]
   14184:	bl	18a98 <__assert_fail@plt+0x7a10>
   14188:	cmp	r0, #0
   1418c:	beq	141b4 <__assert_fail@plt+0x312c>
   14190:	movw	r5, #45420	; 0xb16c
   14194:	movt	r5, #2
   14198:	ldrb	r0, [r5]
   1419c:	cmp	r0, #0
   141a0:	beq	141e0 <__assert_fail@plt+0x3158>
   141a4:	bl	10fa4 <__errno_location@plt>
   141a8:	ldr	r0, [r0]
   141ac:	cmp	r0, #32
   141b0:	bne	141e0 <__assert_fail@plt+0x3158>
   141b4:	movw	r0, #45376	; 0xb140
   141b8:	movt	r0, #2
   141bc:	ldr	r0, [r0]
   141c0:	bl	18a98 <__assert_fail@plt+0x7a10>
   141c4:	cmp	r0, #0
   141c8:	subeq	sp, fp, #16
   141cc:	popeq	{r4, r5, r6, sl, fp, pc}
   141d0:	movw	r0, #45292	; 0xb0ec
   141d4:	movt	r0, #2
   141d8:	ldr	r0, [r0]
   141dc:	bl	10e84 <_exit@plt>
   141e0:	movw	r1, #39108	; 0x98c4
   141e4:	mov	r0, #0
   141e8:	mov	r2, #5
   141ec:	movt	r1, #1
   141f0:	bl	10ec0 <dcgettext@plt>
   141f4:	ldr	r6, [r5, #4]
   141f8:	mov	r4, r0
   141fc:	bl	10fa4 <__errno_location@plt>
   14200:	ldr	r5, [r0]
   14204:	cmp	r6, #0
   14208:	bne	14224 <__assert_fail@plt+0x319c>
   1420c:	movw	r2, #38252	; 0x956c
   14210:	mov	r0, #0
   14214:	mov	r1, r5
   14218:	mov	r3, r4
   1421c:	movt	r2, #1
   14220:	b	14244 <__assert_fail@plt+0x31bc>
   14224:	mov	r0, r6
   14228:	bl	1605c <__assert_fail@plt+0x4fd4>
   1422c:	movw	r2, #38248	; 0x9568
   14230:	mov	r3, r0
   14234:	str	r4, [sp]
   14238:	mov	r0, #0
   1423c:	mov	r1, r5
   14240:	movt	r2, #1
   14244:	bl	10f2c <error@plt>
   14248:	movw	r0, #45292	; 0xb0ec
   1424c:	movt	r0, #2
   14250:	ldr	r0, [r0]
   14254:	bl	10e84 <_exit@plt>
   14258:	b	10e54 <posix_fadvise64@plt>
   1425c:	cmp	r0, #0
   14260:	bxeq	lr
   14264:	push	{r4, sl, fp, lr}
   14268:	add	fp, sp, #8
   1426c:	sub	sp, sp, #16
   14270:	mov	r4, r1
   14274:	bl	10fd4 <fileno@plt>
   14278:	mov	r1, #0
   1427c:	mov	r2, #0
   14280:	mov	r3, #0
   14284:	str	r1, [sp]
   14288:	stmib	sp, {r1, r4}
   1428c:	bl	10e54 <posix_fadvise64@plt>
   14290:	sub	sp, fp, #8
   14294:	pop	{r4, sl, fp, pc}
   14298:	push	{r4, r5, r6, sl, fp, lr}
   1429c:	add	fp, sp, #16
   142a0:	sub	sp, sp, #8
   142a4:	mov	r4, r0
   142a8:	bl	10fd4 <fileno@plt>
   142ac:	cmn	r0, #1
   142b0:	ble	14324 <__assert_fail@plt+0x329c>
   142b4:	mov	r0, r4
   142b8:	bl	10f50 <__freading@plt>
   142bc:	cmp	r0, #0
   142c0:	beq	142ec <__assert_fail@plt+0x3264>
   142c4:	mov	r0, r4
   142c8:	bl	10fd4 <fileno@plt>
   142cc:	mov	r1, #1
   142d0:	mov	r2, #0
   142d4:	mov	r3, #0
   142d8:	str	r1, [sp]
   142dc:	bl	10efc <lseek64@plt>
   142e0:	and	r0, r0, r1
   142e4:	cmn	r0, #1
   142e8:	beq	14324 <__assert_fail@plt+0x329c>
   142ec:	mov	r0, r4
   142f0:	bl	14334 <__assert_fail@plt+0x32ac>
   142f4:	cmp	r0, #0
   142f8:	beq	14324 <__assert_fail@plt+0x329c>
   142fc:	bl	10fa4 <__errno_location@plt>
   14300:	ldr	r6, [r0]
   14304:	mov	r5, r0
   14308:	mov	r0, r4
   1430c:	bl	10ff8 <fclose@plt>
   14310:	cmp	r6, #0
   14314:	strne	r6, [r5]
   14318:	mvnne	r0, #0
   1431c:	sub	sp, fp, #16
   14320:	pop	{r4, r5, r6, sl, fp, pc}
   14324:	mov	r0, r4
   14328:	sub	sp, fp, #16
   1432c:	pop	{r4, r5, r6, sl, fp, lr}
   14330:	b	10ff8 <fclose@plt>
   14334:	push	{r4, sl, fp, lr}
   14338:	add	fp, sp, #8
   1433c:	sub	sp, sp, #8
   14340:	mov	r4, r0
   14344:	cmp	r0, #0
   14348:	beq	14364 <__assert_fail@plt+0x32dc>
   1434c:	mov	r0, r4
   14350:	bl	10f50 <__freading@plt>
   14354:	cmp	r0, #0
   14358:	ldrbne	r0, [r4, #1]
   1435c:	tstne	r0, #1
   14360:	bne	14374 <__assert_fail@plt+0x32ec>
   14364:	mov	r0, r4
   14368:	sub	sp, fp, #8
   1436c:	pop	{r4, sl, fp, lr}
   14370:	b	10e60 <fflush@plt>
   14374:	mov	r0, #1
   14378:	mov	r2, #0
   1437c:	mov	r3, #0
   14380:	str	r0, [sp]
   14384:	mov	r0, r4
   14388:	bl	143c4 <__assert_fail@plt+0x333c>
   1438c:	mov	r0, r4
   14390:	sub	sp, fp, #8
   14394:	pop	{r4, sl, fp, lr}
   14398:	b	10e60 <fflush@plt>
   1439c:	push	{r4, r5, r6, sl, fp, lr}
   143a0:	add	fp, sp, #16
   143a4:	mov	r4, r0
   143a8:	bl	10fa4 <__errno_location@plt>
   143ac:	ldr	r6, [r0]
   143b0:	mov	r5, r0
   143b4:	mov	r0, r4
   143b8:	bl	10e78 <free@plt>
   143bc:	str	r6, [r5]
   143c0:	pop	{r4, r5, r6, sl, fp, pc}
   143c4:	push	{r4, r5, r6, r7, fp, lr}
   143c8:	add	fp, sp, #16
   143cc:	sub	sp, sp, #8
   143d0:	mov	r4, r0
   143d4:	ldr	r0, [r0, #4]
   143d8:	mov	r5, r3
   143dc:	mov	r6, r2
   143e0:	ldr	r1, [r4, #8]
   143e4:	cmp	r1, r0
   143e8:	bne	14404 <__assert_fail@plt+0x337c>
   143ec:	ldrd	r0, [r4, #16]
   143f0:	cmp	r1, r0
   143f4:	bne	14404 <__assert_fail@plt+0x337c>
   143f8:	ldr	r0, [r4, #36]	; 0x24
   143fc:	cmp	r0, #0
   14400:	beq	1441c <__assert_fail@plt+0x3394>
   14404:	mov	r0, r4
   14408:	mov	r2, r6
   1440c:	mov	r3, r5
   14410:	sub	sp, fp, #16
   14414:	pop	{r4, r5, r6, r7, fp, lr}
   14418:	b	11004 <fseeko64@plt>
   1441c:	ldr	r7, [fp, #8]
   14420:	mov	r0, r4
   14424:	bl	10fd4 <fileno@plt>
   14428:	mov	r2, r6
   1442c:	mov	r3, r5
   14430:	str	r7, [sp]
   14434:	bl	10efc <lseek64@plt>
   14438:	and	r2, r0, r1
   1443c:	cmn	r2, #1
   14440:	mvneq	r0, #0
   14444:	subeq	sp, fp, #16
   14448:	popeq	{r4, r5, r6, r7, fp, pc}
   1444c:	strd	r0, [r4, #80]	; 0x50
   14450:	ldr	r0, [r4]
   14454:	bic	r0, r0, #16
   14458:	str	r0, [r4]
   1445c:	mov	r0, #0
   14460:	sub	sp, fp, #16
   14464:	pop	{r4, r5, r6, r7, fp, pc}
   14468:	push	{r4, r5, fp, lr}
   1446c:	add	fp, sp, #8
   14470:	cmp	r0, #0
   14474:	beq	14508 <__assert_fail@plt+0x3480>
   14478:	mov	r1, #47	; 0x2f
   1447c:	mov	r4, r0
   14480:	bl	11028 <strrchr@plt>
   14484:	cmp	r0, #0
   14488:	mov	r5, r4
   1448c:	addne	r5, r0, #1
   14490:	sub	r0, r5, r4
   14494:	cmp	r0, #7
   14498:	blt	144ec <__assert_fail@plt+0x3464>
   1449c:	movw	r1, #40567	; 0x9e77
   144a0:	sub	r0, r5, #7
   144a4:	mov	r2, #7
   144a8:	movt	r1, #1
   144ac:	bl	11070 <strncmp@plt>
   144b0:	cmp	r0, #0
   144b4:	bne	144ec <__assert_fail@plt+0x3464>
   144b8:	movw	r1, #40575	; 0x9e7f
   144bc:	mov	r0, r5
   144c0:	mov	r2, #3
   144c4:	movt	r1, #1
   144c8:	bl	11070 <strncmp@plt>
   144cc:	cmp	r0, #0
   144d0:	beq	144dc <__assert_fail@plt+0x3454>
   144d4:	mov	r4, r5
   144d8:	b	144ec <__assert_fail@plt+0x3464>
   144dc:	movw	r0, #45360	; 0xb130
   144e0:	add	r4, r5, #3
   144e4:	movt	r0, #2
   144e8:	str	r4, [r0]
   144ec:	movw	r0, #45364	; 0xb134
   144f0:	movt	r0, #2
   144f4:	str	r4, [r0]
   144f8:	movw	r0, #45428	; 0xb174
   144fc:	movt	r0, #2
   14500:	str	r4, [r0]
   14504:	pop	{r4, r5, fp, pc}
   14508:	movw	r0, #45376	; 0xb140
   1450c:	mov	r1, #55	; 0x37
   14510:	mov	r2, #1
   14514:	movt	r0, #2
   14518:	ldr	r3, [r0]
   1451c:	movw	r0, #40511	; 0x9e3f
   14520:	movt	r0, #1
   14524:	bl	10ef0 <fwrite@plt>
   14528:	bl	1107c <abort@plt>
   1452c:	push	{r4, r5, r6, sl, fp, lr}
   14530:	add	fp, sp, #16
   14534:	mov	r4, r0
   14538:	movw	r0, #45432	; 0xb178
   1453c:	movt	r0, #2
   14540:	cmp	r4, #0
   14544:	moveq	r4, r0
   14548:	bl	10fa4 <__errno_location@plt>
   1454c:	ldr	r6, [r0]
   14550:	mov	r5, r0
   14554:	mov	r0, r4
   14558:	mov	r1, #48	; 0x30
   1455c:	bl	16f1c <__assert_fail@plt+0x5e94>
   14560:	str	r6, [r5]
   14564:	pop	{r4, r5, r6, sl, fp, pc}
   14568:	movw	r1, #45432	; 0xb178
   1456c:	cmp	r0, #0
   14570:	movt	r1, #2
   14574:	movne	r1, r0
   14578:	ldr	r0, [r1]
   1457c:	bx	lr
   14580:	movw	r2, #45432	; 0xb178
   14584:	cmp	r0, #0
   14588:	movt	r2, #2
   1458c:	movne	r2, r0
   14590:	str	r1, [r2]
   14594:	bx	lr
   14598:	movw	r3, #45432	; 0xb178
   1459c:	cmp	r0, #0
   145a0:	movt	r3, #2
   145a4:	movne	r3, r0
   145a8:	ubfx	r0, r1, #5, #3
   145ac:	and	r1, r1, #31
   145b0:	add	r0, r3, r0, lsl #2
   145b4:	ldr	r3, [r0, #8]
   145b8:	eor	r2, r2, r3, lsr r1
   145bc:	and	r2, r2, #1
   145c0:	eor	r2, r3, r2, lsl r1
   145c4:	str	r2, [r0, #8]
   145c8:	mov	r0, #1
   145cc:	and	r0, r0, r3, lsr r1
   145d0:	bx	lr
   145d4:	movw	r2, #45432	; 0xb178
   145d8:	cmp	r0, #0
   145dc:	movt	r2, #2
   145e0:	movne	r2, r0
   145e4:	ldr	r0, [r2, #4]
   145e8:	str	r1, [r2, #4]
   145ec:	bx	lr
   145f0:	movw	r3, #45432	; 0xb178
   145f4:	cmp	r0, #0
   145f8:	movt	r3, #2
   145fc:	movne	r3, r0
   14600:	cmp	r1, #0
   14604:	mov	r0, #10
   14608:	cmpne	r2, #0
   1460c:	str	r0, [r3]
   14610:	bne	14620 <__assert_fail@plt+0x3598>
   14614:	push	{fp, lr}
   14618:	mov	fp, sp
   1461c:	bl	1107c <abort@plt>
   14620:	str	r1, [r3, #40]	; 0x28
   14624:	str	r2, [r3, #44]	; 0x2c
   14628:	bx	lr
   1462c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14630:	add	fp, sp, #28
   14634:	sub	sp, sp, #20
   14638:	mov	r7, r0
   1463c:	ldr	r0, [fp, #8]
   14640:	movw	r5, #45432	; 0xb178
   14644:	mov	r8, r3
   14648:	mov	r9, r2
   1464c:	mov	sl, r1
   14650:	movt	r5, #2
   14654:	cmp	r0, #0
   14658:	movne	r5, r0
   1465c:	bl	10fa4 <__errno_location@plt>
   14660:	mov	r4, r0
   14664:	ldm	r5, {r0, r1}
   14668:	ldr	r2, [r5, #40]	; 0x28
   1466c:	ldr	r3, [r5, #44]	; 0x2c
   14670:	add	r5, r5, #8
   14674:	ldr	r6, [r4]
   14678:	stm	sp, {r0, r1, r5}
   1467c:	str	r2, [sp, #12]
   14680:	str	r3, [sp, #16]
   14684:	mov	r0, r7
   14688:	mov	r1, sl
   1468c:	mov	r2, r9
   14690:	mov	r3, r8
   14694:	bl	146a4 <__assert_fail@plt+0x361c>
   14698:	str	r6, [r4]
   1469c:	sub	sp, fp, #28
   146a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146a8:	add	fp, sp, #28
   146ac:	sub	sp, sp, #156	; 0x9c
   146b0:	str	r0, [sp, #76]	; 0x4c
   146b4:	ldr	r0, [fp, #12]
   146b8:	mov	r6, r1
   146bc:	str	r3, [sp, #84]	; 0x54
   146c0:	str	r2, [fp, #-84]	; 0xffffffac
   146c4:	and	r1, r0, #4
   146c8:	str	r1, [sp, #24]
   146cc:	and	r1, r0, #1
   146d0:	str	r1, [sp, #28]
   146d4:	ubfx	r8, r0, #1, #1
   146d8:	bl	10f08 <__ctype_get_mb_cur_max@plt>
   146dc:	str	r0, [sp, #32]
   146e0:	ldr	r0, [fp, #24]
   146e4:	ldr	r7, [fp, #8]
   146e8:	mov	r1, #0
   146ec:	mov	r2, #0
   146f0:	mov	r4, #1
   146f4:	str	r1, [sp, #52]	; 0x34
   146f8:	str	r0, [sp, #72]	; 0x48
   146fc:	ldr	r0, [fp, #20]
   14700:	str	r0, [sp, #68]	; 0x44
   14704:	mov	r0, #0
   14708:	str	r0, [sp, #48]	; 0x30
   1470c:	mov	r0, #0
   14710:	str	r0, [sp, #92]	; 0x5c
   14714:	mov	r0, #0
   14718:	str	r0, [fp, #-76]	; 0xffffffb4
   1471c:	mov	r0, #0
   14720:	cmp	r7, #10
   14724:	bhi	15a0c <__assert_fail@plt+0x4984>
   14728:	add	r1, pc, #28
   1472c:	mov	sl, r6
   14730:	ldr	r6, [sp, #76]	; 0x4c
   14734:	ldr	ip, [fp, #-84]	; 0xffffffac
   14738:	ldr	lr, [sp, #84]	; 0x54
   1473c:	mov	r9, #0
   14740:	mov	r3, #1
   14744:	mov	r5, #0
   14748:	ldr	pc, [r1, r7, lsl #2]
   1474c:	andeq	r4, r1, ip, lsl r8
   14750:	andeq	r4, r1, r8, asr r8
   14754:	andeq	r4, r1, ip, lsr #16
   14758:	andeq	r4, r1, r4, lsl r8
   1475c:	andeq	r4, r1, ip, asr #16
   14760:	andeq	r4, r1, r0, lsl #17
   14764:	andeq	r4, r1, ip, lsr r8
   14768:	andeq	r4, r1, ip, lsl #21
   1476c:	andeq	r4, r1, r8, ror r7
   14770:	andeq	r4, r1, r8, ror r7
   14774:	andeq	r4, r1, r0, lsr #20
   14778:	mov	r9, r4
   1477c:	movw	r4, #40657	; 0x9ed1
   14780:	mov	r5, r8
   14784:	mov	r8, r2
   14788:	mov	r0, #0
   1478c:	mov	r2, #5
   14790:	movt	r4, #1
   14794:	mov	r1, r4
   14798:	bl	10ec0 <dcgettext@plt>
   1479c:	cmp	r0, r4
   147a0:	str	r0, [sp, #68]	; 0x44
   147a4:	bne	14934 <__assert_fail@plt+0x38ac>
   147a8:	bl	18b1c <__assert_fail@plt+0x7a94>
   147ac:	ldrb	r1, [r0]
   147b0:	and	r1, r1, #223	; 0xdf
   147b4:	cmp	r1, #71	; 0x47
   147b8:	beq	14900 <__assert_fail@plt+0x3878>
   147bc:	cmp	r1, #85	; 0x55
   147c0:	bne	14918 <__assert_fail@plt+0x3890>
   147c4:	ldrb	r1, [r0, #1]
   147c8:	and	r1, r1, #223	; 0xdf
   147cc:	cmp	r1, #84	; 0x54
   147d0:	bne	14918 <__assert_fail@plt+0x3890>
   147d4:	ldrb	r1, [r0, #2]
   147d8:	and	r1, r1, #223	; 0xdf
   147dc:	cmp	r1, #70	; 0x46
   147e0:	bne	14918 <__assert_fail@plt+0x3890>
   147e4:	ldrb	r1, [r0, #3]
   147e8:	cmp	r1, #45	; 0x2d
   147ec:	ldrbeq	r1, [r0, #4]
   147f0:	cmpeq	r1, #56	; 0x38
   147f4:	bne	14918 <__assert_fail@plt+0x3890>
   147f8:	ldrb	r0, [r0, #5]
   147fc:	cmp	r0, #0
   14800:	movw	r0, #40661	; 0x9ed5
   14804:	movt	r0, #1
   14808:	str	r0, [sp, #68]	; 0x44
   1480c:	bne	14918 <__assert_fail@plt+0x3890>
   14810:	b	14934 <__assert_fail@plt+0x38ac>
   14814:	mov	r0, #1
   14818:	b	14858 <__assert_fail@plt+0x37d0>
   1481c:	mov	r7, #0
   14820:	mov	r9, #0
   14824:	mov	r3, r0
   14828:	b	148f8 <__assert_fail@plt+0x3870>
   1482c:	tst	r8, #1
   14830:	bne	14858 <__assert_fail@plt+0x37d0>
   14834:	mov	r3, r0
   14838:	b	148b0 <__assert_fail@plt+0x3828>
   1483c:	mov	r0, #1
   14840:	mov	r9, #0
   14844:	mov	r7, #5
   14848:	b	14894 <__assert_fail@plt+0x380c>
   1484c:	mov	r3, #1
   14850:	tst	r8, #1
   14854:	beq	148b0 <__assert_fail@plt+0x3828>
   14858:	mov	r1, #1
   1485c:	mov	r9, #0
   14860:	mov	r7, #2
   14864:	mov	r3, r0
   14868:	mov	r5, #1
   1486c:	str	r1, [fp, #-76]	; 0xffffffb4
   14870:	movw	r1, #40659	; 0x9ed3
   14874:	movt	r1, #1
   14878:	str	r1, [sp, #92]	; 0x5c
   1487c:	b	14a8c <__assert_fail@plt+0x3a04>
   14880:	mov	r7, #5
   14884:	tst	r8, #1
   14888:	beq	148d0 <__assert_fail@plt+0x3848>
   1488c:	mov	r0, #1
   14890:	mov	r9, #0
   14894:	str	r0, [fp, #-76]	; 0xffffffb4
   14898:	movw	r0, #40655	; 0x9ecf
   1489c:	mov	r3, #1
   148a0:	mov	r5, #1
   148a4:	movt	r0, #1
   148a8:	str	r0, [sp, #92]	; 0x5c
   148ac:	b	14a8c <__assert_fail@plt+0x3a04>
   148b0:	cmp	sl, #0
   148b4:	mov	r9, #1
   148b8:	mov	r7, #2
   148bc:	movne	r0, #39	; 0x27
   148c0:	strbne	r0, [r6]
   148c4:	movw	r0, #40659	; 0x9ed3
   148c8:	movt	r0, #1
   148cc:	b	148ec <__assert_fail@plt+0x3864>
   148d0:	cmp	sl, #0
   148d4:	mov	r9, #1
   148d8:	mov	r3, #1
   148dc:	movne	r0, #34	; 0x22
   148e0:	strbne	r0, [r6]
   148e4:	movw	r0, #40655	; 0x9ecf
   148e8:	movt	r0, #1
   148ec:	str	r0, [sp, #92]	; 0x5c
   148f0:	mov	r0, #1
   148f4:	str	r0, [fp, #-76]	; 0xffffffb4
   148f8:	mov	r5, #0
   148fc:	b	14a8c <__assert_fail@plt+0x3a04>
   14900:	ldrb	r1, [r0, #1]
   14904:	and	r1, r1, #223	; 0xdf
   14908:	cmp	r1, #66	; 0x42
   1490c:	ldrbeq	r1, [r0, #2]
   14910:	cmpeq	r1, #49	; 0x31
   14914:	beq	15834 <__assert_fail@plt+0x47ac>
   14918:	movw	r0, #40659	; 0x9ed3
   1491c:	movw	r1, #40655	; 0x9ecf
   14920:	cmp	r7, #9
   14924:	movt	r0, #1
   14928:	movt	r1, #1
   1492c:	moveq	r0, r1
   14930:	str	r0, [sp, #68]	; 0x44
   14934:	movw	r4, #40659	; 0x9ed3
   14938:	mov	r0, #0
   1493c:	mov	r2, #5
   14940:	movt	r4, #1
   14944:	mov	r1, r4
   14948:	bl	10ec0 <dcgettext@plt>
   1494c:	cmp	r0, r4
   14950:	str	r0, [sp, #72]	; 0x48
   14954:	beq	14964 <__assert_fail@plt+0x38dc>
   14958:	mov	r4, r9
   1495c:	mov	r2, r8
   14960:	b	14a1c <__assert_fail@plt+0x3994>
   14964:	bl	18b1c <__assert_fail@plt+0x7a94>
   14968:	ldrb	r1, [r0]
   1496c:	mov	r4, r9
   14970:	and	r1, r1, #223	; 0xdf
   14974:	cmp	r1, #71	; 0x47
   14978:	beq	149d4 <__assert_fail@plt+0x394c>
   1497c:	cmp	r1, #85	; 0x55
   14980:	mov	r2, r8
   14984:	bne	149fc <__assert_fail@plt+0x3974>
   14988:	ldrb	r1, [r0, #1]
   1498c:	and	r1, r1, #223	; 0xdf
   14990:	cmp	r1, #84	; 0x54
   14994:	bne	149fc <__assert_fail@plt+0x3974>
   14998:	ldrb	r1, [r0, #2]
   1499c:	and	r1, r1, #223	; 0xdf
   149a0:	cmp	r1, #70	; 0x46
   149a4:	ldrbeq	r1, [r0, #3]
   149a8:	cmpeq	r1, #45	; 0x2d
   149ac:	bne	149fc <__assert_fail@plt+0x3974>
   149b0:	ldrb	r1, [r0, #4]
   149b4:	cmp	r1, #56	; 0x38
   149b8:	ldrbeq	r0, [r0, #5]
   149bc:	cmpeq	r0, #0
   149c0:	bne	149fc <__assert_fail@plt+0x3974>
   149c4:	movw	r0, #40665	; 0x9ed9
   149c8:	movt	r0, #1
   149cc:	str	r0, [sp, #72]	; 0x48
   149d0:	b	14a1c <__assert_fail@plt+0x3994>
   149d4:	ldrb	r1, [r0, #1]
   149d8:	mov	r2, r8
   149dc:	and	r1, r1, #223	; 0xdf
   149e0:	cmp	r1, #66	; 0x42
   149e4:	bne	149fc <__assert_fail@plt+0x3974>
   149e8:	ldrb	r1, [r0, #2]
   149ec:	cmp	r1, #49	; 0x31
   149f0:	ldrbeq	r1, [r0, #3]
   149f4:	cmpeq	r1, #56	; 0x38
   149f8:	beq	15878 <__assert_fail@plt+0x47f0>
   149fc:	movw	r0, #40659	; 0x9ed3
   14a00:	cmp	r7, #9
   14a04:	movt	r0, #1
   14a08:	mov	r1, r0
   14a0c:	movw	r0, #40655	; 0x9ecf
   14a10:	movt	r0, #1
   14a14:	moveq	r1, r0
   14a18:	str	r1, [sp, #72]	; 0x48
   14a1c:	mov	r8, r5
   14a20:	mov	r9, #0
   14a24:	tst	r8, #1
   14a28:	mov	r5, r8
   14a2c:	str	r2, [fp, #-48]	; 0xffffffd0
   14a30:	bne	14a68 <__assert_fail@plt+0x39e0>
   14a34:	ldr	r0, [sp, #68]	; 0x44
   14a38:	ldrb	r0, [r0]
   14a3c:	cmp	r0, #0
   14a40:	beq	14a68 <__assert_fail@plt+0x39e0>
   14a44:	ldr	r1, [sp, #68]	; 0x44
   14a48:	mov	r9, #0
   14a4c:	add	r1, r1, #1
   14a50:	cmp	r9, sl
   14a54:	strbcc	r0, [r6, r9]
   14a58:	ldrb	r0, [r1, r9]
   14a5c:	add	r9, r9, #1
   14a60:	cmp	r0, #0
   14a64:	bne	14a50 <__assert_fail@plt+0x39c8>
   14a68:	ldr	r8, [sp, #72]	; 0x48
   14a6c:	mov	r0, r8
   14a70:	bl	10f8c <strlen@plt>
   14a74:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a78:	ldr	lr, [sp, #84]	; 0x54
   14a7c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14a80:	str	r0, [fp, #-76]	; 0xffffffb4
   14a84:	str	r8, [sp, #92]	; 0x5c
   14a88:	mov	r3, #1
   14a8c:	ldr	r0, [fp, #16]
   14a90:	str	r7, [fp, #-64]	; 0xffffffc0
   14a94:	str	r5, [fp, #-72]	; 0xffffffb8
   14a98:	str	r3, [sp, #80]	; 0x50
   14a9c:	cmp	r0, #0
   14aa0:	movwne	r0, #1
   14aa4:	and	r0, r0, r5
   14aa8:	str	r0, [fp, #-88]	; 0xffffffa8
   14aac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14ab0:	cmp	r0, #0
   14ab4:	movwne	r0, #1
   14ab8:	subs	r7, r7, #2
   14abc:	and	r1, r0, r5
   14ac0:	str	r7, [fp, #-80]	; 0xffffffb0
   14ac4:	and	r1, r3, r1
   14ac8:	str	r1, [sp, #40]	; 0x28
   14acc:	clz	r1, r7
   14ad0:	lsr	r1, r1, #5
   14ad4:	and	r1, r1, r5
   14ad8:	eor	r5, r5, #1
   14adc:	str	r1, [sp, #36]	; 0x24
   14ae0:	mov	r1, r7
   14ae4:	str	r5, [sp, #88]	; 0x58
   14ae8:	mov	r7, #0
   14aec:	movwne	r1, #1
   14af0:	orr	r5, r1, r5
   14af4:	and	r1, r1, r3
   14af8:	and	r0, r0, r1
   14afc:	str	r5, [sp, #60]	; 0x3c
   14b00:	str	r1, [fp, #-68]	; 0xffffffbc
   14b04:	str	r0, [fp, #-60]	; 0xffffffc4
   14b08:	eor	r0, r3, #1
   14b0c:	str	r0, [sp, #44]	; 0x2c
   14b10:	cmn	lr, #1
   14b14:	beq	14b24 <__assert_fail@plt+0x3a9c>
   14b18:	cmp	r7, lr
   14b1c:	bne	14b30 <__assert_fail@plt+0x3aa8>
   14b20:	b	157a8 <__assert_fail@plt+0x4720>
   14b24:	ldrb	r0, [ip, r7]
   14b28:	cmp	r0, #0
   14b2c:	beq	157b0 <__assert_fail@plt+0x4728>
   14b30:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14b34:	mov	r8, #0
   14b38:	str	r4, [fp, #-52]	; 0xffffffcc
   14b3c:	str	r2, [fp, #-48]	; 0xffffffd0
   14b40:	cmp	r0, #0
   14b44:	beq	14b78 <__assert_fail@plt+0x3af0>
   14b48:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14b4c:	add	r4, r7, r0
   14b50:	cmp	r0, #2
   14b54:	bcc	14b70 <__assert_fail@plt+0x3ae8>
   14b58:	cmn	lr, #1
   14b5c:	bne	14b70 <__assert_fail@plt+0x3ae8>
   14b60:	mov	r0, ip
   14b64:	bl	10f8c <strlen@plt>
   14b68:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b6c:	mov	lr, r0
   14b70:	cmp	r4, lr
   14b74:	bls	14b90 <__assert_fail@plt+0x3b08>
   14b78:	mov	r0, #0
   14b7c:	str	r0, [fp, #-56]	; 0xffffffc8
   14b80:	ldrb	r5, [ip, r7]
   14b84:	cmp	r5, #126	; 0x7e
   14b88:	bls	14be0 <__assert_fail@plt+0x3b58>
   14b8c:	b	14fe8 <__assert_fail@plt+0x3f60>
   14b90:	ldr	r1, [sp, #92]	; 0x5c
   14b94:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14b98:	add	r0, ip, r7
   14b9c:	mov	r4, lr
   14ba0:	bl	10eb4 <memcmp@plt>
   14ba4:	ldr	r2, [sp, #88]	; 0x58
   14ba8:	cmp	r0, #0
   14bac:	mov	r1, r0
   14bb0:	movwne	r1, #1
   14bb4:	orr	r1, r1, r2
   14bb8:	tst	r1, #1
   14bbc:	beq	158bc <__assert_fail@plt+0x4834>
   14bc0:	ldr	ip, [fp, #-84]	; 0xffffffac
   14bc4:	clz	r0, r0
   14bc8:	mov	lr, r4
   14bcc:	lsr	r0, r0, #5
   14bd0:	str	r0, [fp, #-56]	; 0xffffffc8
   14bd4:	ldrb	r5, [ip, r7]
   14bd8:	cmp	r5, #126	; 0x7e
   14bdc:	bhi	14fe8 <__assert_fail@plt+0x3f60>
   14be0:	add	r3, pc, #16
   14be4:	mov	r4, #1
   14be8:	mov	r2, #110	; 0x6e
   14bec:	mov	r0, #97	; 0x61
   14bf0:	mov	r1, #0
   14bf4:	ldr	pc, [r3, r5, lsl #2]
   14bf8:	andeq	r4, r1, r8, asr #29
   14bfc:	andeq	r4, r1, r8, ror #31
   14c00:	andeq	r4, r1, r8, ror #31
   14c04:	andeq	r4, r1, r8, ror #31
   14c08:	andeq	r4, r1, r8, ror #31
   14c0c:	andeq	r4, r1, r8, ror #31
   14c10:	andeq	r4, r1, r8, ror #31
   14c14:	andeq	r5, r1, r4, asr #1
   14c18:	andeq	r4, r1, r8, lsr #29
   14c1c:	muleq	r1, r0, lr
   14c20:			; <UNDEFINED> instruction: 0x00014eb4
   14c24:	andeq	r4, r1, r4, asr #30
   14c28:	andeq	r4, r1, r8, lsl #29
   14c2c:			; <UNDEFINED> instruction: 0x00014eb0
   14c30:	andeq	r4, r1, r8, ror #31
   14c34:	andeq	r4, r1, r8, ror #31
   14c38:	andeq	r4, r1, r8, ror #31
   14c3c:	andeq	r4, r1, r8, ror #31
   14c40:	andeq	r4, r1, r8, ror #31
   14c44:	andeq	r4, r1, r8, ror #31
   14c48:	andeq	r4, r1, r8, ror #31
   14c4c:	andeq	r4, r1, r8, ror #31
   14c50:	andeq	r4, r1, r8, ror #31
   14c54:	andeq	r4, r1, r8, ror #31
   14c58:	andeq	r4, r1, r8, ror #31
   14c5c:	andeq	r4, r1, r8, ror #31
   14c60:	andeq	r4, r1, r8, ror #31
   14c64:	andeq	r4, r1, r8, ror #31
   14c68:	andeq	r4, r1, r8, ror #31
   14c6c:	andeq	r4, r1, r8, ror #31
   14c70:	andeq	r4, r1, r8, ror #31
   14c74:	andeq	r4, r1, r8, ror #31
   14c78:	andeq	r5, r1, r0, asr #32
   14c7c:	andeq	r5, r1, r4, asr #32
   14c80:	andeq	r5, r1, r4, asr #32
   14c84:	andeq	r4, r1, r4, lsl lr
   14c88:	andeq	r5, r1, r4, asr #32
   14c8c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c90:	andeq	r5, r1, r4, asr #32
   14c94:	andeq	r4, r1, ip, asr #30
   14c98:	andeq	r5, r1, r4, asr #32
   14c9c:	andeq	r5, r1, r4, asr #32
   14ca0:	andeq	r5, r1, r4, asr #32
   14ca4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ca8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cb0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cb4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cb8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cbc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cc0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cc4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cc8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ccc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cd0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cd4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cd8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14cdc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ce0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ce4:	andeq	r5, r1, r4, asr #32
   14ce8:	andeq	r5, r1, r4, asr #32
   14cec:	andeq	r5, r1, r4, asr #32
   14cf0:	andeq	r5, r1, r4, asr #32
   14cf4:	andeq	r4, r1, r8, lsl #30
   14cf8:	andeq	r4, r1, r8, ror #31
   14cfc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d00:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d04:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d08:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d0c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d10:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d14:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d18:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d1c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d20:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d24:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d28:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d2c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d30:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d34:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d38:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d3c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d40:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d44:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d48:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d4c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d50:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d54:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d58:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d5c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d60:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d64:	andeq	r5, r1, r4, asr #32
   14d68:	andeq	r4, r1, r4, asr lr
   14d6c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d70:	andeq	r5, r1, r4, asr #32
   14d74:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d78:	andeq	r5, r1, r4, asr #32
   14d7c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d80:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d84:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d88:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d8c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d90:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d94:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d98:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d9c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14da0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14da4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14da8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14db0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14db4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14db8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dbc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dc0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dc4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dc8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dcc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dd0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dd4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dd8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ddc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14de0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14de4:	andeq	r4, r1, r4, lsr lr
   14de8:	andeq	r5, r1, r4, asr #32
   14dec:	andeq	r4, r1, r4, lsr lr
   14df0:	andeq	r4, r1, r4, lsl lr
   14df4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14df8:	cmp	r0, #0
   14dfc:	beq	150d8 <__assert_fail@plt+0x4050>
   14e00:	ldr	r0, [fp, #16]
   14e04:	cmp	r0, #0
   14e08:	mov	r0, r5
   14e0c:	bne	150e8 <__assert_fail@plt+0x4060>
   14e10:	b	15108 <__assert_fail@plt+0x4080>
   14e14:	mov	r4, #0
   14e18:	cmp	r7, #0
   14e1c:	beq	15040 <__assert_fail@plt+0x3fb8>
   14e20:	mov	r8, #0
   14e24:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14e28:	cmp	r0, #0
   14e2c:	bne	14e00 <__assert_fail@plt+0x3d78>
   14e30:	b	150d8 <__assert_fail@plt+0x4050>
   14e34:	mov	r4, #0
   14e38:	cmn	lr, #1
   14e3c:	beq	15018 <__assert_fail@plt+0x3f90>
   14e40:	cmp	r7, #0
   14e44:	bne	14e20 <__assert_fail@plt+0x3d98>
   14e48:	cmp	lr, #1
   14e4c:	beq	15040 <__assert_fail@plt+0x3fb8>
   14e50:	b	14e20 <__assert_fail@plt+0x3d98>
   14e54:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14e58:	cmp	r0, #2
   14e5c:	bne	15070 <__assert_fail@plt+0x3fe8>
   14e60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14e64:	tst	r0, #1
   14e68:	bne	158d0 <__assert_fail@plt+0x4848>
   14e6c:	mov	r8, #0
   14e70:	mov	r0, #92	; 0x5c
   14e74:	mov	r4, #0
   14e78:	cmp	r8, #0
   14e7c:	beq	15090 <__assert_fail@plt+0x4008>
   14e80:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14e84:	b	15184 <__assert_fail@plt+0x40fc>
   14e88:	mov	r0, #102	; 0x66
   14e8c:	b	150c4 <__assert_fail@plt+0x403c>
   14e90:	mov	r2, #116	; 0x74
   14e94:	ldr	r0, [sp, #60]	; 0x3c
   14e98:	tst	r0, #1
   14e9c:	mov	r0, r2
   14ea0:	bne	150c4 <__assert_fail@plt+0x403c>
   14ea4:	b	158d0 <__assert_fail@plt+0x4848>
   14ea8:	mov	r0, #98	; 0x62
   14eac:	b	150c4 <__assert_fail@plt+0x403c>
   14eb0:	mov	r2, #114	; 0x72
   14eb4:	ldr	r0, [sp, #60]	; 0x3c
   14eb8:	tst	r0, #1
   14ebc:	mov	r0, r2
   14ec0:	bne	150c4 <__assert_fail@plt+0x403c>
   14ec4:	b	158d0 <__assert_fail@plt+0x4848>
   14ec8:	ldr	r0, [sp, #80]	; 0x50
   14ecc:	tst	r0, #1
   14ed0:	beq	151ac <__assert_fail@plt+0x4124>
   14ed4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14ed8:	tst	r0, #1
   14edc:	bne	159f8 <__assert_fail@plt+0x4970>
   14ee0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14ee4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14ee8:	cmp	r0, #2
   14eec:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14ef0:	movwne	r0, #1
   14ef4:	orr	r0, r0, r2
   14ef8:	tst	r0, #1
   14efc:	beq	154a4 <__assert_fail@plt+0x441c>
   14f00:	mov	r0, r9
   14f04:	b	154d8 <__assert_fail@plt+0x4450>
   14f08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14f0c:	mov	r8, #0
   14f10:	mov	r5, #63	; 0x3f
   14f14:	cmp	r0, #5
   14f18:	beq	15360 <__assert_fail@plt+0x42d8>
   14f1c:	cmp	r0, #2
   14f20:	bne	15410 <__assert_fail@plt+0x4388>
   14f24:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14f28:	tst	r0, #1
   14f2c:	bne	158d0 <__assert_fail@plt+0x4848>
   14f30:	mov	r4, #0
   14f34:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14f38:	cmp	r0, #0
   14f3c:	bne	14e00 <__assert_fail@plt+0x3d78>
   14f40:	b	150d8 <__assert_fail@plt+0x4050>
   14f44:	mov	r0, #118	; 0x76
   14f48:	b	150c4 <__assert_fail@plt+0x403c>
   14f4c:	mov	r0, #1
   14f50:	mov	r5, #39	; 0x27
   14f54:	str	r0, [sp, #52]	; 0x34
   14f58:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14f5c:	cmp	r0, #2
   14f60:	bne	14fd4 <__assert_fail@plt+0x3f4c>
   14f64:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14f68:	tst	r0, #1
   14f6c:	bne	158d0 <__assert_fail@plt+0x4848>
   14f70:	ldr	r2, [sp, #48]	; 0x30
   14f74:	clz	r1, sl
   14f78:	mov	r8, #0
   14f7c:	lsr	r1, r1, #5
   14f80:	cmp	r2, #0
   14f84:	mov	r0, r2
   14f88:	movwne	r0, #1
   14f8c:	orrs	r0, r0, r1
   14f90:	moveq	r2, sl
   14f94:	moveq	sl, r0
   14f98:	cmp	r9, sl
   14f9c:	str	r2, [sp, #48]	; 0x30
   14fa0:	movcc	r0, #39	; 0x27
   14fa4:	strbcc	r0, [r6, r9]
   14fa8:	add	r0, r9, #1
   14fac:	cmp	r0, sl
   14fb0:	movcc	r1, #92	; 0x5c
   14fb4:	strbcc	r1, [r6, r0]
   14fb8:	add	r0, r9, #2
   14fbc:	add	r9, r9, #3
   14fc0:	cmp	r0, sl
   14fc4:	movcc	r1, #39	; 0x27
   14fc8:	strbcc	r1, [r6, r0]
   14fcc:	mov	r0, #0
   14fd0:	str	r0, [fp, #-48]	; 0xffffffd0
   14fd4:	mov	r4, #1
   14fd8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14fdc:	cmp	r0, #0
   14fe0:	bne	14e00 <__assert_fail@plt+0x3d78>
   14fe4:	b	150d8 <__assert_fail@plt+0x4050>
   14fe8:	ldr	r0, [sp, #32]
   14fec:	cmp	r0, #1
   14ff0:	bne	151dc <__assert_fail@plt+0x4154>
   14ff4:	str	lr, [sp, #84]	; 0x54
   14ff8:	bl	10f74 <__ctype_b_loc@plt>
   14ffc:	ldr	r0, [r0]
   15000:	ldr	ip, [fp, #-84]	; 0xffffffac
   15004:	mov	r1, #1
   15008:	add	r0, r0, r5, lsl #1
   1500c:	ldrb	r0, [r0, #1]
   15010:	ubfx	r4, r0, #6, #1
   15014:	b	155d4 <__assert_fail@plt+0x454c>
   15018:	cmp	r7, #0
   1501c:	ldrbeq	r0, [ip, #1]
   15020:	cmpeq	r0, #0
   15024:	beq	15040 <__assert_fail@plt+0x3fb8>
   15028:	mvn	lr, #0
   1502c:	mov	r8, #0
   15030:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15034:	cmp	r0, #0
   15038:	bne	14e00 <__assert_fail@plt+0x3d78>
   1503c:	b	150d8 <__assert_fail@plt+0x4050>
   15040:	mov	r1, #1
   15044:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15048:	cmp	r0, #2
   1504c:	bne	1505c <__assert_fail@plt+0x3fd4>
   15050:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15054:	tst	r0, #1
   15058:	bne	158d0 <__assert_fail@plt+0x4848>
   1505c:	mov	r4, r1
   15060:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15064:	cmp	r0, #0
   15068:	bne	14e00 <__assert_fail@plt+0x3d78>
   1506c:	b	150d8 <__assert_fail@plt+0x4050>
   15070:	ldr	r1, [sp, #40]	; 0x28
   15074:	mov	r8, #0
   15078:	mov	r0, #92	; 0x5c
   1507c:	cmp	r1, #0
   15080:	beq	150c4 <__assert_fail@plt+0x403c>
   15084:	mov	r4, #0
   15088:	cmp	r8, #0
   1508c:	bne	14e80 <__assert_fail@plt+0x3df8>
   15090:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15094:	tst	r2, #1
   15098:	beq	15184 <__assert_fail@plt+0x40fc>
   1509c:	cmp	r9, sl
   150a0:	movcc	r1, #39	; 0x27
   150a4:	strbcc	r1, [r6, r9]
   150a8:	add	r1, r9, #1
   150ac:	add	r9, r9, #2
   150b0:	cmp	r1, sl
   150b4:	movcc	r2, #39	; 0x27
   150b8:	strbcc	r2, [r6, r1]
   150bc:	mov	r2, #0
   150c0:	b	15184 <__assert_fail@plt+0x40fc>
   150c4:	ldr	r1, [sp, #80]	; 0x50
   150c8:	mov	r4, #0
   150cc:	mov	r8, #0
   150d0:	tst	r1, #1
   150d4:	bne	15114 <__assert_fail@plt+0x408c>
   150d8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   150dc:	cmp	r0, #0
   150e0:	mov	r0, r5
   150e4:	beq	15108 <__assert_fail@plt+0x4080>
   150e8:	ldr	r1, [fp, #16]
   150ec:	ubfx	r0, r5, #5, #3
   150f0:	mov	r2, #1
   150f4:	ldr	r0, [r1, r0, lsl #2]
   150f8:	and	r1, r5, #31
   150fc:	tst	r0, r2, lsl r1
   15100:	mov	r0, r5
   15104:	bne	15114 <__assert_fail@plt+0x408c>
   15108:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1510c:	cmp	r1, #0
   15110:	beq	1556c <__assert_fail@plt+0x44e4>
   15114:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15118:	tst	r1, #1
   1511c:	bne	158b0 <__assert_fail@plt+0x4828>
   15120:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15124:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15128:	cmp	r1, #2
   1512c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   15130:	movwne	r1, #1
   15134:	orr	r1, r1, r2
   15138:	tst	r1, #1
   1513c:	bne	15174 <__assert_fail@plt+0x40ec>
   15140:	cmp	r9, sl
   15144:	movcc	r1, #39	; 0x27
   15148:	strbcc	r1, [r6, r9]
   1514c:	add	r1, r9, #1
   15150:	cmp	r1, sl
   15154:	movcc	r2, #36	; 0x24
   15158:	strbcc	r2, [r6, r1]
   1515c:	add	r1, r9, #2
   15160:	add	r9, r9, #3
   15164:	cmp	r1, sl
   15168:	movcc	r2, #39	; 0x27
   1516c:	strbcc	r2, [r6, r1]
   15170:	mov	r2, #1
   15174:	cmp	r9, sl
   15178:	movcc	r1, #92	; 0x5c
   1517c:	strbcc	r1, [r6, r9]
   15180:	add	r9, r9, #1
   15184:	cmp	r9, sl
   15188:	add	r7, r7, #1
   1518c:	strbcc	r0, [r6, r9]
   15190:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15194:	add	r9, r9, #1
   15198:	and	r0, r0, r4
   1519c:	mov	r4, r0
   151a0:	cmn	lr, #1
   151a4:	bne	14b18 <__assert_fail@plt+0x3a90>
   151a8:	b	14b24 <__assert_fail@plt+0x3a9c>
   151ac:	ldr	r0, [sp, #28]
   151b0:	mov	r4, #0
   151b4:	mov	r8, #0
   151b8:	mov	r5, #0
   151bc:	cmp	r0, #0
   151c0:	beq	150d8 <__assert_fail@plt+0x4050>
   151c4:	ldr	r4, [fp, #-52]	; 0xffffffcc
   151c8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   151cc:	add	r7, r7, #1
   151d0:	cmn	lr, #1
   151d4:	bne	14b18 <__assert_fail@plt+0x3a90>
   151d8:	b	14b24 <__assert_fail@plt+0x3a9c>
   151dc:	mov	r0, #0
   151e0:	cmn	lr, #1
   151e4:	str	r0, [fp, #-36]	; 0xffffffdc
   151e8:	str	r0, [fp, #-40]	; 0xffffffd8
   151ec:	bne	15200 <__assert_fail@plt+0x4178>
   151f0:	mov	r0, ip
   151f4:	bl	10f8c <strlen@plt>
   151f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   151fc:	mov	lr, r0
   15200:	ldr	r0, [sp, #36]	; 0x24
   15204:	str	sl, [sp, #56]	; 0x38
   15208:	str	lr, [sp, #84]	; 0x54
   1520c:	cmp	r0, #0
   15210:	beq	15428 <__assert_fail@plt+0x43a0>
   15214:	add	r0, ip, r7
   15218:	mov	r4, #1
   1521c:	mov	r6, #0
   15220:	sub	sl, fp, #40	; 0x28
   15224:	str	r0, [sp, #20]
   15228:	str	r6, [sp, #64]	; 0x40
   1522c:	add	r6, r6, r7
   15230:	sub	r0, fp, #44	; 0x2c
   15234:	mov	r3, sl
   15238:	add	r1, ip, r6
   1523c:	sub	r2, lr, r6
   15240:	bl	18b54 <__assert_fail@plt+0x7acc>
   15244:	cmn	r0, #2
   15248:	beq	15584 <__assert_fail@plt+0x44fc>
   1524c:	ldr	sl, [sp, #56]	; 0x38
   15250:	cmn	r0, #1
   15254:	beq	15578 <__assert_fail@plt+0x44f0>
   15258:	cmp	r0, #0
   1525c:	beq	1557c <__assert_fail@plt+0x44f4>
   15260:	cmp	r0, #2
   15264:	bcc	15324 <__assert_fail@plt+0x429c>
   15268:	ldr	r1, [sp, #64]	; 0x40
   1526c:	ldr	r2, [sp, #20]
   15270:	add	r1, r2, r1
   15274:	mov	r2, #1
   15278:	ldrb	r3, [r1, r2]
   1527c:	sub	r3, r3, #91	; 0x5b
   15280:	cmp	r3, #33	; 0x21
   15284:	bhi	15318 <__assert_fail@plt+0x4290>
   15288:	add	r6, pc, #0
   1528c:	ldr	pc, [r6, r3, lsl #2]
   15290:	ldrdeq	r5, [r1], -ip
   15294:	ldrdeq	r5, [r1], -ip
   15298:	andeq	r5, r1, r8, lsl r3
   1529c:	ldrdeq	r5, [r1], -ip
   152a0:	andeq	r5, r1, r8, lsl r3
   152a4:	ldrdeq	r5, [r1], -ip
   152a8:	andeq	r5, r1, r8, lsl r3
   152ac:	andeq	r5, r1, r8, lsl r3
   152b0:	andeq	r5, r1, r8, lsl r3
   152b4:	andeq	r5, r1, r8, lsl r3
   152b8:	andeq	r5, r1, r8, lsl r3
   152bc:	andeq	r5, r1, r8, lsl r3
   152c0:	andeq	r5, r1, r8, lsl r3
   152c4:	andeq	r5, r1, r8, lsl r3
   152c8:	andeq	r5, r1, r8, lsl r3
   152cc:	andeq	r5, r1, r8, lsl r3
   152d0:	andeq	r5, r1, r8, lsl r3
   152d4:	andeq	r5, r1, r8, lsl r3
   152d8:	andeq	r5, r1, r8, lsl r3
   152dc:	andeq	r5, r1, r8, lsl r3
   152e0:	andeq	r5, r1, r8, lsl r3
   152e4:	andeq	r5, r1, r8, lsl r3
   152e8:	andeq	r5, r1, r8, lsl r3
   152ec:	andeq	r5, r1, r8, lsl r3
   152f0:	andeq	r5, r1, r8, lsl r3
   152f4:	andeq	r5, r1, r8, lsl r3
   152f8:	andeq	r5, r1, r8, lsl r3
   152fc:	andeq	r5, r1, r8, lsl r3
   15300:	andeq	r5, r1, r8, lsl r3
   15304:	andeq	r5, r1, r8, lsl r3
   15308:	andeq	r5, r1, r8, lsl r3
   1530c:	andeq	r5, r1, r8, lsl r3
   15310:	andeq	r5, r1, r8, lsl r3
   15314:	ldrdeq	r5, [r1], -ip
   15318:	add	r2, r2, #1
   1531c:	cmp	r2, r0
   15320:	bcc	15278 <__assert_fail@plt+0x41f0>
   15324:	ldr	r6, [sp, #64]	; 0x40
   15328:	add	r6, r0, r6
   1532c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15330:	bl	10ee4 <iswprint@plt>
   15334:	cmp	r0, #0
   15338:	sub	sl, fp, #40	; 0x28
   1533c:	movwne	r0, #1
   15340:	and	r4, r4, r0
   15344:	mov	r0, sl
   15348:	bl	10e9c <mbsinit@plt>
   1534c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15350:	ldr	lr, [sp, #84]	; 0x54
   15354:	cmp	r0, #0
   15358:	beq	15228 <__assert_fail@plt+0x41a0>
   1535c:	b	155c8 <__assert_fail@plt+0x4540>
   15360:	ldr	r0, [sp, #24]
   15364:	cmp	r0, #0
   15368:	beq	15410 <__assert_fail@plt+0x4388>
   1536c:	add	r0, r7, #2
   15370:	cmp	r0, lr
   15374:	bcs	15410 <__assert_fail@plt+0x4388>
   15378:	add	r1, ip, r7
   1537c:	ldrb	r1, [r1, #1]
   15380:	cmp	r1, #63	; 0x3f
   15384:	bne	15410 <__assert_fail@plt+0x4388>
   15388:	ldrb	r5, [ip, r0]
   1538c:	sub	r1, r5, #33	; 0x21
   15390:	cmp	r1, #29
   15394:	bhi	15410 <__assert_fail@plt+0x4388>
   15398:	movw	r3, #20929	; 0x51c1
   1539c:	mov	r2, #1
   153a0:	movt	r3, #14336	; 0x3800
   153a4:	tst	r3, r2, lsl r1
   153a8:	beq	15410 <__assert_fail@plt+0x4388>
   153ac:	ldr	r1, [fp, #-72]	; 0xffffffb8
   153b0:	tst	r1, #1
   153b4:	bne	15a00 <__assert_fail@plt+0x4978>
   153b8:	cmp	r9, sl
   153bc:	mov	r7, r0
   153c0:	mov	r4, #0
   153c4:	movcc	r1, #63	; 0x3f
   153c8:	strbcc	r1, [r6, r9]
   153cc:	add	r1, r9, #1
   153d0:	cmp	r1, sl
   153d4:	movcc	r2, #34	; 0x22
   153d8:	strbcc	r2, [r6, r1]
   153dc:	add	r1, r9, #2
   153e0:	cmp	r1, sl
   153e4:	movcc	r2, #34	; 0x22
   153e8:	strbcc	r2, [r6, r1]
   153ec:	add	r1, r9, #3
   153f0:	add	r9, r9, #4
   153f4:	cmp	r1, sl
   153f8:	movcc	r2, #63	; 0x3f
   153fc:	strbcc	r2, [r6, r1]
   15400:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15404:	cmp	r0, #0
   15408:	bne	14e00 <__assert_fail@plt+0x3d78>
   1540c:	b	150d8 <__assert_fail@plt+0x4050>
   15410:	mov	r5, #63	; 0x3f
   15414:	mov	r4, #0
   15418:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1541c:	cmp	r0, #0
   15420:	bne	14e00 <__assert_fail@plt+0x3d78>
   15424:	b	150d8 <__assert_fail@plt+0x4050>
   15428:	mov	r4, #1
   1542c:	mov	r6, #0
   15430:	sub	sl, fp, #40	; 0x28
   15434:	str	r6, [sp, #64]	; 0x40
   15438:	add	r6, r6, r7
   1543c:	sub	r0, fp, #44	; 0x2c
   15440:	mov	r3, sl
   15444:	add	r1, ip, r6
   15448:	sub	r2, lr, r6
   1544c:	bl	18b54 <__assert_fail@plt+0x7acc>
   15450:	cmn	r0, #2
   15454:	beq	15584 <__assert_fail@plt+0x44fc>
   15458:	cmn	r0, #1
   1545c:	beq	15578 <__assert_fail@plt+0x44f0>
   15460:	ldr	r6, [sp, #64]	; 0x40
   15464:	cmp	r0, #0
   15468:	beq	155c4 <__assert_fail@plt+0x453c>
   1546c:	add	r6, r0, r6
   15470:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15474:	bl	10ee4 <iswprint@plt>
   15478:	cmp	r0, #0
   1547c:	sub	sl, fp, #40	; 0x28
   15480:	movwne	r0, #1
   15484:	and	r4, r4, r0
   15488:	mov	r0, sl
   1548c:	bl	10e9c <mbsinit@plt>
   15490:	ldr	ip, [fp, #-84]	; 0xffffffac
   15494:	ldr	lr, [sp, #84]	; 0x54
   15498:	cmp	r0, #0
   1549c:	beq	15434 <__assert_fail@plt+0x43ac>
   154a0:	b	155c8 <__assert_fail@plt+0x4540>
   154a4:	cmp	r9, sl
   154a8:	mov	r2, #1
   154ac:	movcc	r0, #39	; 0x27
   154b0:	strbcc	r0, [r6, r9]
   154b4:	add	r0, r9, #1
   154b8:	cmp	r0, sl
   154bc:	movcc	r1, #36	; 0x24
   154c0:	strbcc	r1, [r6, r0]
   154c4:	add	r0, r9, #2
   154c8:	cmp	r0, sl
   154cc:	movcc	r1, #39	; 0x27
   154d0:	strbcc	r1, [r6, r0]
   154d4:	add	r0, r9, #3
   154d8:	cmp	r0, sl
   154dc:	add	r9, r0, #1
   154e0:	str	r2, [fp, #-48]	; 0xffffffd0
   154e4:	movcc	r1, #92	; 0x5c
   154e8:	strbcc	r1, [r6, r0]
   154ec:	ldr	r1, [fp, #-64]	; 0xffffffc0
   154f0:	cmp	r1, #2
   154f4:	beq	15554 <__assert_fail@plt+0x44cc>
   154f8:	add	r1, r7, #1
   154fc:	mov	r4, #0
   15500:	mov	r8, #1
   15504:	mov	r5, #48	; 0x30
   15508:	cmp	r1, lr
   1550c:	bcs	14df4 <__assert_fail@plt+0x3d6c>
   15510:	ldrb	r1, [ip, r1]
   15514:	sub	r1, r1, #48	; 0x30
   15518:	uxtb	r1, r1
   1551c:	cmp	r1, #9
   15520:	bhi	14df4 <__assert_fail@plt+0x3d6c>
   15524:	cmp	r9, sl
   15528:	movcc	r1, #48	; 0x30
   1552c:	strbcc	r1, [r6, r9]
   15530:	add	r1, r0, #2
   15534:	add	r9, r0, #3
   15538:	cmp	r1, sl
   1553c:	movcc	r2, #48	; 0x30
   15540:	strbcc	r2, [r6, r1]
   15544:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15548:	cmp	r0, #0
   1554c:	bne	14e00 <__assert_fail@plt+0x3d78>
   15550:	b	150d8 <__assert_fail@plt+0x4050>
   15554:	mov	r0, #48	; 0x30
   15558:	mov	r8, #1
   1555c:	mov	r4, #0
   15560:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15564:	cmp	r1, #0
   15568:	bne	15114 <__assert_fail@plt+0x408c>
   1556c:	cmp	r8, #0
   15570:	beq	15090 <__assert_fail@plt+0x4008>
   15574:	b	14e80 <__assert_fail@plt+0x3df8>
   15578:	mov	r4, #0
   1557c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15580:	b	155bc <__assert_fail@plt+0x4534>
   15584:	ldr	r1, [sp, #84]	; 0x54
   15588:	ldr	ip, [fp, #-84]	; 0xffffffac
   1558c:	mov	r4, #0
   15590:	cmp	r6, r1
   15594:	bcs	155bc <__assert_fail@plt+0x4534>
   15598:	ldrb	r0, [ip, r6]
   1559c:	cmp	r0, #0
   155a0:	beq	155bc <__assert_fail@plt+0x4534>
   155a4:	ldr	r0, [sp, #64]	; 0x40
   155a8:	add	r0, r0, #1
   155ac:	add	r6, r0, r7
   155b0:	str	r0, [sp, #64]	; 0x40
   155b4:	cmp	r6, r1
   155b8:	bcc	15598 <__assert_fail@plt+0x4510>
   155bc:	ldr	r6, [sp, #64]	; 0x40
   155c0:	b	155c8 <__assert_fail@plt+0x4540>
   155c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   155c8:	mov	r1, r6
   155cc:	ldr	r6, [sp, #76]	; 0x4c
   155d0:	ldr	sl, [sp, #56]	; 0x38
   155d4:	ldr	r0, [sp, #44]	; 0x2c
   155d8:	cmp	r1, #1
   155dc:	orr	r2, r4, r0
   155e0:	mov	r0, r1
   155e4:	bhi	15604 <__assert_fail@plt+0x457c>
   155e8:	tst	r2, #1
   155ec:	beq	15604 <__assert_fail@plt+0x457c>
   155f0:	ldr	lr, [sp, #84]	; 0x54
   155f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   155f8:	cmp	r0, #0
   155fc:	bne	14e00 <__assert_fail@plt+0x3d78>
   15600:	b	150d8 <__assert_fail@plt+0x4050>
   15604:	str	r2, [sp, #64]	; 0x40
   15608:	add	r0, r0, r7
   1560c:	add	r1, r7, #1
   15610:	ldr	lr, [sp, #84]	; 0x54
   15614:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15618:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1561c:	mov	r3, #0
   15620:	str	r0, [sp, #56]	; 0x38
   15624:	ldr	r0, [sp, #64]	; 0x40
   15628:	tst	r0, #1
   1562c:	bne	15714 <__assert_fail@plt+0x468c>
   15630:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15634:	tst	r0, #1
   15638:	bne	158b4 <__assert_fail@plt+0x482c>
   1563c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15640:	cmp	r7, #2
   15644:	movwne	r3, #1
   15648:	orr	r3, r3, r2
   1564c:	tst	r3, #1
   15650:	bne	15688 <__assert_fail@plt+0x4600>
   15654:	cmp	r9, sl
   15658:	add	r3, r9, #1
   1565c:	movcc	r2, #39	; 0x27
   15660:	strbcc	r2, [r6, r9]
   15664:	cmp	r3, sl
   15668:	movcc	r2, #36	; 0x24
   1566c:	strbcc	r2, [r6, r3]
   15670:	add	r3, r9, #2
   15674:	add	r9, r9, #3
   15678:	cmp	r3, sl
   1567c:	movcc	r2, #39	; 0x27
   15680:	strbcc	r2, [r6, r3]
   15684:	mov	r2, #1
   15688:	cmp	r9, sl
   1568c:	mov	r0, r2
   15690:	movcc	r3, #92	; 0x5c
   15694:	strbcc	r3, [r6, r9]
   15698:	add	r3, r9, #1
   1569c:	cmp	r3, sl
   156a0:	andcc	r7, r5, #192	; 0xc0
   156a4:	movcc	r2, #48	; 0x30
   156a8:	orrcc	r7, r2, r7, lsr #6
   156ac:	strbcc	r7, [r6, r3]
   156b0:	add	r3, r9, #2
   156b4:	add	r9, r9, #3
   156b8:	cmp	r3, sl
   156bc:	lsrcc	r7, r5, #3
   156c0:	movcc	r2, #6
   156c4:	bficc	r7, r2, #3, #29
   156c8:	mov	r2, #6
   156cc:	strbcc	r7, [r6, r3]
   156d0:	bfi	r5, r2, #3, #29
   156d4:	mov	r3, #1
   156d8:	mov	r2, r0
   156dc:	ldr	r0, [sp, #56]	; 0x38
   156e0:	and	r8, r3, #1
   156e4:	cmp	r0, r1
   156e8:	bhi	15748 <__assert_fail@plt+0x46c0>
   156ec:	b	15788 <__assert_fail@plt+0x4700>
   156f0:	cmp	r9, sl
   156f4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   156f8:	strbcc	r5, [r6, r9]
   156fc:	add	r9, r9, #1
   15700:	ldrb	r5, [ip, r1]
   15704:	add	r1, r1, #1
   15708:	ldr	r0, [sp, #64]	; 0x40
   1570c:	tst	r0, #1
   15710:	beq	15630 <__assert_fail@plt+0x45a8>
   15714:	ldr	r7, [fp, #-56]	; 0xffffffc8
   15718:	tst	r7, #1
   1571c:	beq	15730 <__assert_fail@plt+0x46a8>
   15720:	cmp	r9, sl
   15724:	movcc	r7, #92	; 0x5c
   15728:	strbcc	r7, [r6, r9]
   1572c:	add	r9, r9, #1
   15730:	mov	r7, #0
   15734:	str	r7, [fp, #-56]	; 0xffffffc8
   15738:	ldr	r0, [sp, #56]	; 0x38
   1573c:	and	r8, r3, #1
   15740:	cmp	r0, r1
   15744:	bls	15788 <__assert_fail@plt+0x4700>
   15748:	cmp	r8, #0
   1574c:	mvn	r7, r2
   15750:	movwne	r8, #1
   15754:	orr	r7, r7, r8
   15758:	tst	r7, #1
   1575c:	bne	156f0 <__assert_fail@plt+0x4668>
   15760:	cmp	r9, sl
   15764:	movcc	r7, #39	; 0x27
   15768:	strbcc	r7, [r6, r9]
   1576c:	add	r7, r9, #1
   15770:	add	r9, r9, #2
   15774:	cmp	r7, sl
   15778:	movcc	r2, #39	; 0x27
   1577c:	strbcc	r2, [r6, r7]
   15780:	mov	r2, #0
   15784:	b	156f0 <__assert_fail@plt+0x4668>
   15788:	cmp	r8, #0
   1578c:	sub	r7, r1, #1
   15790:	mov	r0, r5
   15794:	str	r2, [fp, #-48]	; 0xffffffd0
   15798:	movwne	r8, #1
   1579c:	cmp	r8, #0
   157a0:	beq	15090 <__assert_fail@plt+0x4008>
   157a4:	b	14e80 <__assert_fail@plt+0x3df8>
   157a8:	mov	lr, r7
   157ac:	b	157b4 <__assert_fail@plt+0x472c>
   157b0:	mvn	lr, #0
   157b4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   157b8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   157bc:	eor	r0, r7, #2
   157c0:	orr	r0, r0, r9
   157c4:	clz	r0, r0
   157c8:	lsr	r0, r0, #5
   157cc:	tst	r1, r0
   157d0:	bne	158d0 <__assert_fail@plt+0x4848>
   157d4:	mov	r0, r1
   157d8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   157dc:	cmp	r7, #2
   157e0:	movwne	r1, #1
   157e4:	orr	r0, r0, r1
   157e8:	tst	r0, #1
   157ec:	ldreq	r0, [sp, #52]	; 0x34
   157f0:	streq	lr, [sp, #84]	; 0x54
   157f4:	eoreq	r0, r0, #1
   157f8:	tsteq	r0, #1
   157fc:	bne	15994 <__assert_fail@plt+0x490c>
   15800:	tst	r4, #1
   15804:	bne	15950 <__assert_fail@plt+0x48c8>
   15808:	ldr	r6, [sp, #48]	; 0x30
   1580c:	mov	r8, #0
   15810:	cmp	r6, #0
   15814:	beq	1598c <__assert_fail@plt+0x4904>
   15818:	ldr	r0, [sp, #80]	; 0x50
   1581c:	mov	r1, #0
   15820:	cmp	sl, #0
   15824:	mov	r4, #0
   15828:	str	r1, [fp, #-72]	; 0xffffffb8
   1582c:	beq	14720 <__assert_fail@plt+0x3698>
   15830:	b	15994 <__assert_fail@plt+0x490c>
   15834:	ldrb	r1, [r0, #3]
   15838:	cmp	r1, #56	; 0x38
   1583c:	ldrbeq	r1, [r0, #4]
   15840:	cmpeq	r1, #48	; 0x30
   15844:	bne	14918 <__assert_fail@plt+0x3890>
   15848:	ldrb	r1, [r0, #5]
   1584c:	cmp	r1, #51	; 0x33
   15850:	ldrbeq	r1, [r0, #6]
   15854:	cmpeq	r1, #48	; 0x30
   15858:	bne	14918 <__assert_fail@plt+0x3890>
   1585c:	ldrb	r0, [r0, #7]
   15860:	cmp	r0, #0
   15864:	movw	r0, #40669	; 0x9edd
   15868:	movt	r0, #1
   1586c:	str	r0, [sp, #68]	; 0x44
   15870:	bne	14918 <__assert_fail@plt+0x3890>
   15874:	b	14934 <__assert_fail@plt+0x38ac>
   15878:	ldrb	r1, [r0, #4]
   1587c:	cmp	r1, #48	; 0x30
   15880:	ldrbeq	r1, [r0, #5]
   15884:	cmpeq	r1, #51	; 0x33
   15888:	bne	149fc <__assert_fail@plt+0x3974>
   1588c:	ldrb	r1, [r0, #6]
   15890:	cmp	r1, #48	; 0x30
   15894:	ldrbeq	r0, [r0, #7]
   15898:	cmpeq	r0, #0
   1589c:	bne	149fc <__assert_fail@plt+0x3974>
   158a0:	movw	r0, #40673	; 0x9ee1
   158a4:	movt	r0, #1
   158a8:	str	r0, [sp, #72]	; 0x48
   158ac:	b	14a1c <__assert_fail@plt+0x3994>
   158b0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   158b4:	ldr	r2, [sp, #80]	; 0x50
   158b8:	b	158f0 <__assert_fail@plt+0x4868>
   158bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   158c0:	mov	r2, #1
   158c4:	mov	lr, r4
   158c8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   158cc:	b	158f0 <__assert_fail@plt+0x4868>
   158d0:	ldr	r2, [sp, #80]	; 0x50
   158d4:	mov	r7, #2
   158d8:	b	158f0 <__assert_fail@plt+0x4868>
   158dc:	ldr	r6, [sp, #76]	; 0x4c
   158e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   158e4:	ldr	lr, [sp, #84]	; 0x54
   158e8:	ldr	r2, [sp, #80]	; 0x50
   158ec:	mov	r7, #2
   158f0:	mov	r0, #0
   158f4:	ldr	r1, [fp, #12]
   158f8:	tst	r2, #1
   158fc:	mov	r2, r7
   15900:	mov	r3, lr
   15904:	str	r0, [sp, #8]
   15908:	ldr	r0, [sp, #68]	; 0x44
   1590c:	movwne	r2, #4
   15910:	cmp	r7, #2
   15914:	movne	r2, r7
   15918:	str	r2, [sp]
   1591c:	mov	r2, ip
   15920:	bic	r1, r1, #2
   15924:	str	r0, [sp, #12]
   15928:	ldr	r0, [sp, #72]	; 0x48
   1592c:	str	r1, [sp, #4]
   15930:	mov	r1, sl
   15934:	str	r0, [sp, #16]
   15938:	mov	r0, r6
   1593c:	bl	146a4 <__assert_fail@plt+0x361c>
   15940:	mov	r9, r0
   15944:	mov	r0, r9
   15948:	sub	sp, fp, #28
   1594c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15950:	mov	r0, #5
   15954:	ldr	r1, [sp, #48]	; 0x30
   15958:	ldr	r2, [fp, #-84]	; 0xffffffac
   1595c:	ldr	r3, [sp, #84]	; 0x54
   15960:	str	r0, [sp]
   15964:	ldr	r0, [fp, #12]
   15968:	str	r0, [sp, #4]
   1596c:	ldr	r0, [fp, #16]
   15970:	str	r0, [sp, #8]
   15974:	ldr	r0, [sp, #68]	; 0x44
   15978:	str	r0, [sp, #12]
   1597c:	ldr	r0, [sp, #72]	; 0x48
   15980:	str	r0, [sp, #16]
   15984:	ldr	r0, [sp, #76]	; 0x4c
   15988:	b	1593c <__assert_fail@plt+0x48b4>
   1598c:	mov	r0, #0
   15990:	str	r0, [fp, #-72]	; 0xffffffb8
   15994:	ldr	r1, [sp, #92]	; 0x5c
   15998:	cmp	r1, #0
   1599c:	beq	159dc <__assert_fail@plt+0x4954>
   159a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   159a4:	ldr	r2, [sp, #76]	; 0x4c
   159a8:	tst	r0, #1
   159ac:	bne	159e0 <__assert_fail@plt+0x4958>
   159b0:	ldrb	r0, [r1]
   159b4:	cmp	r0, #0
   159b8:	beq	159e0 <__assert_fail@plt+0x4958>
   159bc:	add	r1, r1, #1
   159c0:	cmp	r9, sl
   159c4:	strbcc	r0, [r2, r9]
   159c8:	add	r9, r9, #1
   159cc:	ldrb	r0, [r1], #1
   159d0:	cmp	r0, #0
   159d4:	bne	159c0 <__assert_fail@plt+0x4938>
   159d8:	b	159e0 <__assert_fail@plt+0x4958>
   159dc:	ldr	r2, [sp, #76]	; 0x4c
   159e0:	cmp	r9, sl
   159e4:	movcc	r0, #0
   159e8:	strbcc	r0, [r2, r9]
   159ec:	mov	r0, r9
   159f0:	sub	sp, fp, #28
   159f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159f8:	mov	r2, #1
   159fc:	b	158c8 <__assert_fail@plt+0x4840>
   15a00:	ldr	r2, [sp, #80]	; 0x50
   15a04:	mov	r7, #5
   15a08:	b	158f0 <__assert_fail@plt+0x4868>
   15a0c:	bl	1107c <abort@plt>
   15a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a14:	add	fp, sp, #28
   15a18:	sub	sp, sp, #28
   15a1c:	movw	r5, #45432	; 0xb178
   15a20:	cmp	r2, #0
   15a24:	mov	r4, r1
   15a28:	mov	r7, r0
   15a2c:	str	r0, [sp, #20]
   15a30:	movt	r5, #2
   15a34:	movne	r5, r2
   15a38:	bl	10fa4 <__errno_location@plt>
   15a3c:	mov	sl, r0
   15a40:	ldm	r5, {r0, r1}
   15a44:	ldr	r2, [r5, #40]	; 0x28
   15a48:	ldr	r3, [r5, #44]	; 0x2c
   15a4c:	add	r9, r5, #8
   15a50:	ldr	r6, [sl]
   15a54:	orr	r8, r1, #1
   15a58:	mov	r1, #0
   15a5c:	str	r6, [sp, #24]
   15a60:	stm	sp, {r0, r8, r9}
   15a64:	str	r2, [sp, #12]
   15a68:	str	r3, [sp, #16]
   15a6c:	mov	r0, #0
   15a70:	mov	r2, r7
   15a74:	mov	r3, r4
   15a78:	mov	r6, r4
   15a7c:	bl	146a4 <__assert_fail@plt+0x361c>
   15a80:	add	r7, r0, #1
   15a84:	mov	r0, r7
   15a88:	bl	16aec <__assert_fail@plt+0x5a64>
   15a8c:	mov	r4, r0
   15a90:	ldr	r0, [r5]
   15a94:	ldr	r2, [r5, #44]	; 0x2c
   15a98:	ldr	r1, [r5, #40]	; 0x28
   15a9c:	mov	r3, r6
   15aa0:	stm	sp, {r0, r8, r9}
   15aa4:	str	r2, [sp, #16]
   15aa8:	str	r1, [sp, #12]
   15aac:	mov	r0, r4
   15ab0:	mov	r1, r7
   15ab4:	ldr	r2, [sp, #20]
   15ab8:	bl	146a4 <__assert_fail@plt+0x361c>
   15abc:	ldr	r0, [sp, #24]
   15ac0:	str	r0, [sl]
   15ac4:	mov	r0, r4
   15ac8:	sub	sp, fp, #28
   15acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ad4:	add	fp, sp, #28
   15ad8:	sub	sp, sp, #36	; 0x24
   15adc:	movw	r8, #45432	; 0xb178
   15ae0:	cmp	r3, #0
   15ae4:	mov	r4, r2
   15ae8:	str	r2, [sp, #24]
   15aec:	mov	r5, r1
   15af0:	mov	r6, r0
   15af4:	str	r0, [sp, #20]
   15af8:	movt	r8, #2
   15afc:	movne	r8, r3
   15b00:	bl	10fa4 <__errno_location@plt>
   15b04:	str	r0, [sp, #28]
   15b08:	cmp	r4, #0
   15b0c:	add	sl, r8, #8
   15b10:	ldm	r8, {r3, r9}
   15b14:	ldr	r7, [r0]
   15b18:	ldr	r1, [r8, #40]	; 0x28
   15b1c:	ldr	r2, [r8, #44]	; 0x2c
   15b20:	mov	r0, #0
   15b24:	orreq	r9, r9, #1
   15b28:	str	r7, [sp, #32]
   15b2c:	mov	r7, r5
   15b30:	stm	sp, {r3, r9, sl}
   15b34:	str	r1, [sp, #12]
   15b38:	str	r2, [sp, #16]
   15b3c:	mov	r1, #0
   15b40:	mov	r2, r6
   15b44:	mov	r3, r5
   15b48:	bl	146a4 <__assert_fail@plt+0x361c>
   15b4c:	add	r4, r0, #1
   15b50:	mov	r5, r0
   15b54:	mov	r0, r4
   15b58:	bl	16aec <__assert_fail@plt+0x5a64>
   15b5c:	mov	r6, r0
   15b60:	ldr	r0, [r8]
   15b64:	ldr	r2, [r8, #44]	; 0x2c
   15b68:	ldr	r1, [r8, #40]	; 0x28
   15b6c:	mov	r3, r7
   15b70:	stm	sp, {r0, r9, sl}
   15b74:	str	r2, [sp, #16]
   15b78:	str	r1, [sp, #12]
   15b7c:	mov	r0, r6
   15b80:	mov	r1, r4
   15b84:	ldr	r2, [sp, #20]
   15b88:	bl	146a4 <__assert_fail@plt+0x361c>
   15b8c:	ldr	r0, [sp, #24]
   15b90:	ldr	r1, [sp, #32]
   15b94:	ldr	r2, [sp, #28]
   15b98:	cmp	r0, #0
   15b9c:	str	r1, [r2]
   15ba0:	strne	r5, [r0]
   15ba4:	mov	r0, r6
   15ba8:	sub	sp, fp, #28
   15bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bb0:	push	{r4, r5, r6, r7, fp, lr}
   15bb4:	add	fp, sp, #16
   15bb8:	movw	r4, #45344	; 0xb120
   15bbc:	movt	r4, #2
   15bc0:	ldrd	r6, [r4]
   15bc4:	cmp	r7, #2
   15bc8:	blt	15bf4 <__assert_fail@plt+0x4b6c>
   15bcc:	add	r5, r6, #12
   15bd0:	mov	r7, #0
   15bd4:	ldr	r0, [r5, r7, lsl #3]
   15bd8:	bl	1439c <__assert_fail@plt+0x3314>
   15bdc:	ldr	r1, [r4, #4]
   15be0:	add	r2, r7, #2
   15be4:	add	r0, r7, #1
   15be8:	mov	r7, r0
   15bec:	cmp	r2, r1
   15bf0:	blt	15bd4 <__assert_fail@plt+0x4b4c>
   15bf4:	ldr	r0, [r6, #4]
   15bf8:	movw	r5, #45480	; 0xb1a8
   15bfc:	movt	r5, #2
   15c00:	cmp	r0, r5
   15c04:	beq	15c18 <__assert_fail@plt+0x4b90>
   15c08:	bl	1439c <__assert_fail@plt+0x3314>
   15c0c:	mov	r0, #256	; 0x100
   15c10:	str	r0, [r4, #8]
   15c14:	str	r5, [r4, #12]
   15c18:	add	r5, r4, #8
   15c1c:	cmp	r6, r5
   15c20:	beq	15c30 <__assert_fail@plt+0x4ba8>
   15c24:	mov	r0, r6
   15c28:	bl	1439c <__assert_fail@plt+0x3314>
   15c2c:	str	r5, [r4]
   15c30:	mov	r0, #1
   15c34:	str	r0, [r4, #4]
   15c38:	pop	{r4, r5, r6, r7, fp, pc}
   15c3c:	movw	r3, #45432	; 0xb178
   15c40:	mvn	r2, #0
   15c44:	movt	r3, #2
   15c48:	b	15c4c <__assert_fail@plt+0x4bc4>
   15c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c50:	add	fp, sp, #28
   15c54:	sub	sp, sp, #44	; 0x2c
   15c58:	mov	r7, r3
   15c5c:	str	r2, [sp, #36]	; 0x24
   15c60:	str	r1, [sp, #32]
   15c64:	mov	r5, r0
   15c68:	bl	10fa4 <__errno_location@plt>
   15c6c:	cmp	r5, #0
   15c70:	blt	15dd4 <__assert_fail@plt+0x4d4c>
   15c74:	cmn	r5, #-2147483647	; 0x80000001
   15c78:	beq	15dd4 <__assert_fail@plt+0x4d4c>
   15c7c:	movw	r8, #45344	; 0xb120
   15c80:	mov	r4, r0
   15c84:	movt	r8, #2
   15c88:	ldr	r6, [r8]
   15c8c:	ldr	r1, [r8, #4]
   15c90:	ldr	r0, [r0]
   15c94:	str	r4, [sp, #28]
   15c98:	cmp	r1, r5
   15c9c:	str	r0, [sp, #24]
   15ca0:	ble	15cac <__assert_fail@plt+0x4c24>
   15ca4:	mov	sl, r6
   15ca8:	b	15d10 <__assert_fail@plt+0x4c88>
   15cac:	mov	r0, #8
   15cb0:	add	r9, r8, #8
   15cb4:	add	r2, r5, #1
   15cb8:	str	r1, [fp, #-32]	; 0xffffffe0
   15cbc:	mvn	r3, #-2147483648	; 0x80000000
   15cc0:	str	r0, [sp]
   15cc4:	subs	r0, r6, r9
   15cc8:	sub	r2, r2, r1
   15ccc:	sub	r1, fp, #32
   15cd0:	movne	r0, r6
   15cd4:	bl	16cec <__assert_fail@plt+0x5c64>
   15cd8:	str	r0, [r8]
   15cdc:	cmp	r6, r9
   15ce0:	mov	sl, r0
   15ce4:	ldrdeq	r0, [r8, #8]
   15ce8:	stmeq	sl, {r0, r1}
   15cec:	ldr	r1, [r8, #4]
   15cf0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15cf4:	add	r0, sl, r1, lsl #3
   15cf8:	sub	r1, r2, r1
   15cfc:	lsl	r2, r1, #3
   15d00:	mov	r1, #0
   15d04:	bl	10fbc <memset@plt>
   15d08:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15d0c:	str	r0, [r8, #4]
   15d10:	mov	r9, sl
   15d14:	ldr	r6, [r9, r5, lsl #3]!
   15d18:	ldr	r4, [r9, #4]!
   15d1c:	ldm	r7, {r0, r1}
   15d20:	ldr	r2, [r7, #40]	; 0x28
   15d24:	ldr	r3, [r7, #44]	; 0x2c
   15d28:	orr	r8, r1, #1
   15d2c:	add	r1, r7, #8
   15d30:	stm	sp, {r0, r8}
   15d34:	add	r0, sp, #8
   15d38:	str	r1, [sp, #20]
   15d3c:	stm	r0, {r1, r2, r3}
   15d40:	mov	r0, r4
   15d44:	mov	r1, r6
   15d48:	ldr	r2, [sp, #32]
   15d4c:	ldr	r3, [sp, #36]	; 0x24
   15d50:	bl	146a4 <__assert_fail@plt+0x361c>
   15d54:	cmp	r6, r0
   15d58:	bhi	15dbc <__assert_fail@plt+0x4d34>
   15d5c:	add	r6, r0, #1
   15d60:	movw	r0, #45480	; 0xb1a8
   15d64:	movt	r0, #2
   15d68:	str	r6, [sl, r5, lsl #3]
   15d6c:	cmp	r4, r0
   15d70:	beq	15d7c <__assert_fail@plt+0x4cf4>
   15d74:	mov	r0, r4
   15d78:	bl	1439c <__assert_fail@plt+0x3314>
   15d7c:	mov	r0, r6
   15d80:	bl	16aec <__assert_fail@plt+0x5a64>
   15d84:	str	r0, [r9]
   15d88:	mov	r4, r0
   15d8c:	add	r3, sp, #8
   15d90:	ldr	r0, [r7]
   15d94:	ldr	r1, [r7, #40]	; 0x28
   15d98:	ldr	r2, [r7, #44]	; 0x2c
   15d9c:	stm	sp, {r0, r8}
   15da0:	ldr	r0, [sp, #20]
   15da4:	stm	r3, {r0, r1, r2}
   15da8:	mov	r0, r4
   15dac:	mov	r1, r6
   15db0:	ldr	r2, [sp, #32]
   15db4:	ldr	r3, [sp, #36]	; 0x24
   15db8:	bl	146a4 <__assert_fail@plt+0x361c>
   15dbc:	ldr	r1, [sp, #24]
   15dc0:	ldr	r0, [sp, #28]
   15dc4:	str	r1, [r0]
   15dc8:	mov	r0, r4
   15dcc:	sub	sp, fp, #28
   15dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dd4:	bl	1107c <abort@plt>
   15dd8:	movw	r3, #45432	; 0xb178
   15ddc:	movt	r3, #2
   15de0:	b	15c4c <__assert_fail@plt+0x4bc4>
   15de4:	movw	r3, #45432	; 0xb178
   15de8:	mov	r1, r0
   15dec:	mov	r0, #0
   15df0:	mvn	r2, #0
   15df4:	movt	r3, #2
   15df8:	b	15c4c <__assert_fail@plt+0x4bc4>
   15dfc:	movw	r3, #45432	; 0xb178
   15e00:	mov	r2, r1
   15e04:	mov	r1, r0
   15e08:	mov	r0, #0
   15e0c:	movt	r3, #2
   15e10:	b	15c4c <__assert_fail@plt+0x4bc4>
   15e14:	push	{fp, lr}
   15e18:	mov	fp, sp
   15e1c:	sub	sp, sp, #48	; 0x30
   15e20:	vmov.i32	q8, #0	; 0x00000000
   15e24:	mov	ip, #32
   15e28:	mov	r3, sp
   15e2c:	mov	lr, r2
   15e30:	cmp	r1, #10
   15e34:	add	r2, r3, #16
   15e38:	vst1.64	{d16-d17}, [r3], ip
   15e3c:	vst1.64	{d16-d17}, [r3]
   15e40:	vst1.64	{d16-d17}, [r2]
   15e44:	beq	15e64 <__assert_fail@plt+0x4ddc>
   15e48:	str	r1, [sp]
   15e4c:	mov	r3, sp
   15e50:	mov	r1, lr
   15e54:	mvn	r2, #0
   15e58:	bl	15c4c <__assert_fail@plt+0x4bc4>
   15e5c:	mov	sp, fp
   15e60:	pop	{fp, pc}
   15e64:	bl	1107c <abort@plt>
   15e68:	push	{r4, sl, fp, lr}
   15e6c:	add	fp, sp, #8
   15e70:	sub	sp, sp, #48	; 0x30
   15e74:	mov	ip, r3
   15e78:	mov	r3, sp
   15e7c:	vmov.i32	q8, #0	; 0x00000000
   15e80:	mov	lr, #32
   15e84:	cmp	r1, #10
   15e88:	add	r4, r3, #16
   15e8c:	vst1.64	{d16-d17}, [r3], lr
   15e90:	vst1.64	{d16-d17}, [r3]
   15e94:	vst1.64	{d16-d17}, [r4]
   15e98:	beq	15eb8 <__assert_fail@plt+0x4e30>
   15e9c:	str	r1, [sp]
   15ea0:	mov	r1, r2
   15ea4:	mov	r3, sp
   15ea8:	mov	r2, ip
   15eac:	bl	15c4c <__assert_fail@plt+0x4bc4>
   15eb0:	sub	sp, fp, #8
   15eb4:	pop	{r4, sl, fp, pc}
   15eb8:	bl	1107c <abort@plt>
   15ebc:	push	{fp, lr}
   15ec0:	mov	fp, sp
   15ec4:	sub	sp, sp, #48	; 0x30
   15ec8:	mov	r3, sp
   15ecc:	vmov.i32	q8, #0	; 0x00000000
   15ed0:	mov	ip, #32
   15ed4:	cmp	r0, #10
   15ed8:	add	r2, r3, #16
   15edc:	vst1.64	{d16-d17}, [r3], ip
   15ee0:	vst1.64	{d16-d17}, [r3]
   15ee4:	vst1.64	{d16-d17}, [r2]
   15ee8:	beq	15f08 <__assert_fail@plt+0x4e80>
   15eec:	str	r0, [sp]
   15ef0:	mov	r3, sp
   15ef4:	mov	r0, #0
   15ef8:	mvn	r2, #0
   15efc:	bl	15c4c <__assert_fail@plt+0x4bc4>
   15f00:	mov	sp, fp
   15f04:	pop	{fp, pc}
   15f08:	bl	1107c <abort@plt>
   15f0c:	push	{fp, lr}
   15f10:	mov	fp, sp
   15f14:	sub	sp, sp, #48	; 0x30
   15f18:	mov	r3, sp
   15f1c:	vmov.i32	q8, #0	; 0x00000000
   15f20:	mov	ip, #32
   15f24:	cmp	r0, #10
   15f28:	add	lr, r3, #16
   15f2c:	vst1.64	{d16-d17}, [r3], ip
   15f30:	vst1.64	{d16-d17}, [r3]
   15f34:	vst1.64	{d16-d17}, [lr]
   15f38:	beq	15f54 <__assert_fail@plt+0x4ecc>
   15f3c:	str	r0, [sp]
   15f40:	mov	r3, sp
   15f44:	mov	r0, #0
   15f48:	bl	15c4c <__assert_fail@plt+0x4bc4>
   15f4c:	mov	sp, fp
   15f50:	pop	{fp, pc}
   15f54:	bl	1107c <abort@plt>
   15f58:	push	{r4, sl, fp, lr}
   15f5c:	add	fp, sp, #8
   15f60:	sub	sp, sp, #48	; 0x30
   15f64:	mov	lr, r0
   15f68:	movw	r0, #45432	; 0xb178
   15f6c:	mov	r3, #32
   15f70:	mov	ip, r1
   15f74:	mov	r4, #1
   15f78:	movt	r0, #2
   15f7c:	add	r1, r0, #16
   15f80:	vld1.64	{d16-d17}, [r0], r3
   15f84:	mov	r3, sp
   15f88:	vld1.64	{d18-d19}, [r1]
   15f8c:	add	r1, r3, #16
   15f90:	vld1.64	{d20-d21}, [r0]
   15f94:	add	r0, r3, #32
   15f98:	vst1.64	{d18-d19}, [r1]
   15f9c:	mov	r1, r3
   15fa0:	vst1.64	{d20-d21}, [r0]
   15fa4:	mov	r0, #28
   15fa8:	and	r0, r0, r2, lsr #3
   15fac:	and	r2, r2, #31
   15fb0:	vst1.64	{d16-d17}, [r1], r0
   15fb4:	ldr	r0, [r1, #8]
   15fb8:	bic	r4, r4, r0, lsr r2
   15fbc:	eor	r0, r0, r4, lsl r2
   15fc0:	mov	r2, ip
   15fc4:	str	r0, [r1, #8]
   15fc8:	mov	r0, #0
   15fcc:	mov	r1, lr
   15fd0:	bl	15c4c <__assert_fail@plt+0x4bc4>
   15fd4:	sub	sp, fp, #8
   15fd8:	pop	{r4, sl, fp, pc}
   15fdc:	push	{fp, lr}
   15fe0:	mov	fp, sp
   15fe4:	sub	sp, sp, #48	; 0x30
   15fe8:	mov	ip, r0
   15fec:	movw	r0, #45432	; 0xb178
   15ff0:	mov	r3, #32
   15ff4:	movt	r0, #2
   15ff8:	add	r2, r0, #16
   15ffc:	vld1.64	{d16-d17}, [r0], r3
   16000:	mov	r3, sp
   16004:	vld1.64	{d18-d19}, [r2]
   16008:	add	r2, r3, #16
   1600c:	vld1.64	{d20-d21}, [r0]
   16010:	add	r0, r3, #32
   16014:	vst1.64	{d18-d19}, [r2]
   16018:	mov	r2, r3
   1601c:	vst1.64	{d20-d21}, [r0]
   16020:	mov	r0, #28
   16024:	and	r0, r0, r1, lsr #3
   16028:	and	r1, r1, #31
   1602c:	vst1.64	{d16-d17}, [r2], r0
   16030:	mov	r0, #1
   16034:	ldr	lr, [r2, #8]
   16038:	bic	r0, r0, lr, lsr r1
   1603c:	eor	r0, lr, r0, lsl r1
   16040:	mov	r1, ip
   16044:	str	r0, [r2, #8]
   16048:	mov	r0, #0
   1604c:	mvn	r2, #0
   16050:	bl	15c4c <__assert_fail@plt+0x4bc4>
   16054:	mov	sp, fp
   16058:	pop	{fp, pc}
   1605c:	push	{fp, lr}
   16060:	mov	fp, sp
   16064:	sub	sp, sp, #48	; 0x30
   16068:	movw	r2, #45432	; 0xb178
   1606c:	mov	r3, #32
   16070:	mov	r1, r0
   16074:	movt	r2, #2
   16078:	add	r0, r2, #16
   1607c:	vld1.64	{d16-d17}, [r2], r3
   16080:	mov	r3, sp
   16084:	vld1.64	{d18-d19}, [r0]
   16088:	add	r0, r3, #16
   1608c:	vld1.64	{d20-d21}, [r2]
   16090:	mov	r2, r3
   16094:	vst1.64	{d18-d19}, [r0]
   16098:	add	r0, r3, #32
   1609c:	vst1.64	{d20-d21}, [r0]
   160a0:	mov	r0, #12
   160a4:	vst1.64	{d16-d17}, [r2], r0
   160a8:	ldr	r0, [r2]
   160ac:	orr	r0, r0, #67108864	; 0x4000000
   160b0:	str	r0, [r2]
   160b4:	mov	r0, #0
   160b8:	mvn	r2, #0
   160bc:	bl	15c4c <__assert_fail@plt+0x4bc4>
   160c0:	mov	sp, fp
   160c4:	pop	{fp, pc}
   160c8:	push	{fp, lr}
   160cc:	mov	fp, sp
   160d0:	sub	sp, sp, #48	; 0x30
   160d4:	mov	ip, r1
   160d8:	mov	r1, r0
   160dc:	movw	r0, #45432	; 0xb178
   160e0:	mov	r3, #32
   160e4:	movt	r0, #2
   160e8:	add	r2, r0, #16
   160ec:	vld1.64	{d16-d17}, [r0], r3
   160f0:	mov	r3, sp
   160f4:	vld1.64	{d18-d19}, [r2]
   160f8:	add	r2, r3, #16
   160fc:	vld1.64	{d20-d21}, [r0]
   16100:	add	r0, r3, #32
   16104:	vst1.64	{d18-d19}, [r2]
   16108:	mov	r2, r3
   1610c:	vst1.64	{d20-d21}, [r0]
   16110:	mov	r0, #12
   16114:	vst1.64	{d16-d17}, [r2], r0
   16118:	ldr	r0, [r2]
   1611c:	orr	r0, r0, #67108864	; 0x4000000
   16120:	str	r0, [r2]
   16124:	mov	r0, #0
   16128:	mov	r2, ip
   1612c:	bl	15c4c <__assert_fail@plt+0x4bc4>
   16130:	mov	sp, fp
   16134:	pop	{fp, pc}
   16138:	push	{r4, sl, fp, lr}
   1613c:	add	fp, sp, #8
   16140:	sub	sp, sp, #96	; 0x60
   16144:	mov	ip, r2
   16148:	mov	r2, sp
   1614c:	vmov.i32	q8, #0	; 0x00000000
   16150:	mov	r4, #28
   16154:	cmp	r1, #10
   16158:	mov	r3, r2
   1615c:	add	lr, r2, #16
   16160:	vst1.64	{d16-d17}, [r3], r4
   16164:	vst1.64	{d16-d17}, [lr]
   16168:	vst1.32	{d16-d17}, [r3]
   1616c:	beq	161bc <__assert_fail@plt+0x5134>
   16170:	vld1.64	{d16-d17}, [r2], r4
   16174:	vld1.64	{d18-d19}, [lr]
   16178:	add	r3, sp, #48	; 0x30
   1617c:	add	r4, r3, #4
   16180:	vld1.32	{d20-d21}, [r2]
   16184:	add	r2, r3, #20
   16188:	vst1.32	{d16-d17}, [r4]
   1618c:	vst1.32	{d18-d19}, [r2]
   16190:	add	r2, r3, #32
   16194:	vst1.32	{d20-d21}, [r2]
   16198:	str	r1, [sp, #48]	; 0x30
   1619c:	mvn	r2, #0
   161a0:	ldr	r1, [sp, #60]	; 0x3c
   161a4:	orr	r1, r1, #67108864	; 0x4000000
   161a8:	str	r1, [sp, #60]	; 0x3c
   161ac:	mov	r1, ip
   161b0:	bl	15c4c <__assert_fail@plt+0x4bc4>
   161b4:	sub	sp, fp, #8
   161b8:	pop	{r4, sl, fp, pc}
   161bc:	bl	1107c <abort@plt>
   161c0:	push	{r4, r5, fp, lr}
   161c4:	add	fp, sp, #8
   161c8:	sub	sp, sp, #48	; 0x30
   161cc:	mov	ip, r3
   161d0:	movw	r3, #45432	; 0xb178
   161d4:	mov	lr, #32
   161d8:	cmp	r1, #0
   161dc:	mov	r5, sp
   161e0:	movt	r3, #2
   161e4:	cmpne	r2, #0
   161e8:	add	r4, r3, #16
   161ec:	vld1.64	{d16-d17}, [r3], lr
   161f0:	vld1.64	{d18-d19}, [r4]
   161f4:	add	r4, r5, #16
   161f8:	vld1.64	{d20-d21}, [r3]
   161fc:	vst1.64	{d16-d17}, [r5], lr
   16200:	mov	r3, #10
   16204:	vst1.64	{d18-d19}, [r4]
   16208:	vst1.64	{d20-d21}, [r5]
   1620c:	str	r3, [sp]
   16210:	bne	16218 <__assert_fail@plt+0x5190>
   16214:	bl	1107c <abort@plt>
   16218:	str	r2, [sp, #44]	; 0x2c
   1621c:	str	r1, [sp, #40]	; 0x28
   16220:	mov	r3, sp
   16224:	mov	r1, ip
   16228:	mvn	r2, #0
   1622c:	bl	15c4c <__assert_fail@plt+0x4bc4>
   16230:	sub	sp, fp, #8
   16234:	pop	{r4, r5, fp, pc}
   16238:	push	{r4, r5, fp, lr}
   1623c:	add	fp, sp, #8
   16240:	sub	sp, sp, #48	; 0x30
   16244:	mov	lr, r3
   16248:	movw	r3, #45432	; 0xb178
   1624c:	mov	ip, #32
   16250:	cmp	r1, #0
   16254:	mov	r5, sp
   16258:	movt	r3, #2
   1625c:	cmpne	r2, #0
   16260:	add	r4, r3, #16
   16264:	vld1.64	{d16-d17}, [r3], ip
   16268:	vld1.64	{d18-d19}, [r4]
   1626c:	add	r4, r5, #16
   16270:	vld1.64	{d20-d21}, [r3]
   16274:	vst1.64	{d16-d17}, [r5], ip
   16278:	mov	r3, #10
   1627c:	vst1.64	{d18-d19}, [r4]
   16280:	vst1.64	{d20-d21}, [r5]
   16284:	str	r3, [sp]
   16288:	bne	16290 <__assert_fail@plt+0x5208>
   1628c:	bl	1107c <abort@plt>
   16290:	ldr	ip, [fp, #8]
   16294:	str	r2, [sp, #44]	; 0x2c
   16298:	str	r1, [sp, #40]	; 0x28
   1629c:	mov	r3, sp
   162a0:	mov	r1, lr
   162a4:	mov	r2, ip
   162a8:	bl	15c4c <__assert_fail@plt+0x4bc4>
   162ac:	sub	sp, fp, #8
   162b0:	pop	{r4, r5, fp, pc}
   162b4:	push	{r4, sl, fp, lr}
   162b8:	add	fp, sp, #8
   162bc:	sub	sp, sp, #48	; 0x30
   162c0:	mov	ip, r2
   162c4:	movw	r2, #45432	; 0xb178
   162c8:	mov	lr, #32
   162cc:	cmp	r0, #0
   162d0:	mov	r4, sp
   162d4:	movt	r2, #2
   162d8:	cmpne	r1, #0
   162dc:	add	r3, r2, #16
   162e0:	vld1.64	{d16-d17}, [r2], lr
   162e4:	vld1.64	{d18-d19}, [r3]
   162e8:	add	r3, r4, #16
   162ec:	vld1.64	{d20-d21}, [r2]
   162f0:	vst1.64	{d16-d17}, [r4], lr
   162f4:	mov	r2, #10
   162f8:	vst1.64	{d18-d19}, [r3]
   162fc:	vst1.64	{d20-d21}, [r4]
   16300:	str	r2, [sp]
   16304:	bne	1630c <__assert_fail@plt+0x5284>
   16308:	bl	1107c <abort@plt>
   1630c:	str	r1, [sp, #44]	; 0x2c
   16310:	str	r0, [sp, #40]	; 0x28
   16314:	mov	r3, sp
   16318:	mov	r0, #0
   1631c:	mov	r1, ip
   16320:	mvn	r2, #0
   16324:	bl	15c4c <__assert_fail@plt+0x4bc4>
   16328:	sub	sp, fp, #8
   1632c:	pop	{r4, sl, fp, pc}
   16330:	push	{r4, r5, fp, lr}
   16334:	add	fp, sp, #8
   16338:	sub	sp, sp, #48	; 0x30
   1633c:	mov	lr, r2
   16340:	movw	r2, #45432	; 0xb178
   16344:	mov	ip, r3
   16348:	mov	r3, #32
   1634c:	cmp	r0, #0
   16350:	mov	r5, sp
   16354:	movt	r2, #2
   16358:	cmpne	r1, #0
   1635c:	add	r4, r2, #16
   16360:	vld1.64	{d16-d17}, [r2], r3
   16364:	vld1.64	{d18-d19}, [r4]
   16368:	add	r4, r5, #16
   1636c:	vld1.64	{d20-d21}, [r2]
   16370:	vst1.64	{d16-d17}, [r5], r3
   16374:	mov	r2, #10
   16378:	vst1.64	{d18-d19}, [r4]
   1637c:	vst1.64	{d20-d21}, [r5]
   16380:	str	r2, [sp]
   16384:	bne	1638c <__assert_fail@plt+0x5304>
   16388:	bl	1107c <abort@plt>
   1638c:	str	r1, [sp, #44]	; 0x2c
   16390:	str	r0, [sp, #40]	; 0x28
   16394:	mov	r3, sp
   16398:	mov	r0, #0
   1639c:	mov	r1, lr
   163a0:	mov	r2, ip
   163a4:	bl	15c4c <__assert_fail@plt+0x4bc4>
   163a8:	sub	sp, fp, #8
   163ac:	pop	{r4, r5, fp, pc}
   163b0:	movw	r3, #45296	; 0xb0f0
   163b4:	movt	r3, #2
   163b8:	b	15c4c <__assert_fail@plt+0x4bc4>
   163bc:	movw	r3, #45296	; 0xb0f0
   163c0:	mov	r2, r1
   163c4:	mov	r1, r0
   163c8:	mov	r0, #0
   163cc:	movt	r3, #2
   163d0:	b	15c4c <__assert_fail@plt+0x4bc4>
   163d4:	movw	r3, #45296	; 0xb0f0
   163d8:	mvn	r2, #0
   163dc:	movt	r3, #2
   163e0:	b	15c4c <__assert_fail@plt+0x4bc4>
   163e4:	movw	r3, #45296	; 0xb0f0
   163e8:	mov	r1, r0
   163ec:	mov	r0, #0
   163f0:	mvn	r2, #0
   163f4:	movt	r3, #2
   163f8:	b	15c4c <__assert_fail@plt+0x4bc4>
   163fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16400:	add	fp, sp, #24
   16404:	sub	sp, sp, #32
   16408:	ldr	r6, [fp, #12]
   1640c:	ldr	r7, [fp, #8]
   16410:	mov	r4, r2
   16414:	mov	r8, r0
   16418:	cmp	r1, #0
   1641c:	beq	16444 <__assert_fail@plt+0x53bc>
   16420:	movw	r2, #40760	; 0x9f38
   16424:	mov	r5, r1
   16428:	str	r3, [sp, #4]
   1642c:	str	r4, [sp]
   16430:	mov	r0, r8
   16434:	mov	r1, #1
   16438:	movt	r2, #1
   1643c:	mov	r3, r5
   16440:	b	1645c <__assert_fail@plt+0x53d4>
   16444:	movw	r2, #40772	; 0x9f44
   16448:	str	r3, [sp]
   1644c:	mov	r0, r8
   16450:	mov	r1, #1
   16454:	mov	r3, r4
   16458:	movt	r2, #1
   1645c:	bl	10fe0 <__fprintf_chk@plt>
   16460:	movw	r1, #40779	; 0x9f4b
   16464:	mov	r0, #0
   16468:	mov	r2, #5
   1646c:	movt	r1, #1
   16470:	bl	10ec0 <dcgettext@plt>
   16474:	movw	r2, #41497	; 0xa219
   16478:	mov	r3, r0
   1647c:	movw	r0, #2022	; 0x7e6
   16480:	mov	r1, #1
   16484:	str	r0, [sp]
   16488:	movt	r2, #1
   1648c:	mov	r0, r8
   16490:	bl	10fe0 <__fprintf_chk@plt>
   16494:	movw	r4, #38798	; 0x978e
   16498:	mov	r1, r8
   1649c:	movt	r4, #1
   164a0:	mov	r0, r4
   164a4:	bl	10e30 <fputs_unlocked@plt>
   164a8:	movw	r1, #40783	; 0x9f4f
   164ac:	mov	r0, #0
   164b0:	mov	r2, #5
   164b4:	movt	r1, #1
   164b8:	bl	10ec0 <dcgettext@plt>
   164bc:	movw	r3, #40954	; 0x9ffa
   164c0:	mov	r2, r0
   164c4:	mov	r0, r8
   164c8:	mov	r1, #1
   164cc:	movt	r3, #1
   164d0:	bl	10fe0 <__fprintf_chk@plt>
   164d4:	mov	r0, r4
   164d8:	mov	r1, r8
   164dc:	bl	10e30 <fputs_unlocked@plt>
   164e0:	cmp	r6, #9
   164e4:	bhi	16520 <__assert_fail@plt+0x5498>
   164e8:	add	r0, pc, #0
   164ec:	ldr	pc, [r0, r6, lsl #2]
   164f0:	andeq	r6, r1, r8, lsl r5
   164f4:	andeq	r6, r1, ip, lsr #10
   164f8:	andeq	r6, r1, ip, asr r5
   164fc:	andeq	r6, r1, r4, lsl #11
   16500:	andeq	r6, r1, ip, lsr #11
   16504:	ldrdeq	r6, [r1], -r4
   16508:	strdeq	r6, [r1], -ip
   1650c:	andeq	r6, r1, r4, lsr r6
   16510:	ldrdeq	r6, [r1], -ip
   16514:	andeq	r6, r1, r4, lsl #13
   16518:	sub	sp, fp, #24
   1651c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16520:	movw	r1, #41307	; 0xa15b
   16524:	movt	r1, #1
   16528:	b	1668c <__assert_fail@plt+0x5604>
   1652c:	movw	r1, #40988	; 0xa01c
   16530:	mov	r0, #0
   16534:	mov	r2, #5
   16538:	movt	r1, #1
   1653c:	bl	10ec0 <dcgettext@plt>
   16540:	ldr	r3, [r7]
   16544:	mov	r2, r0
   16548:	mov	r0, r8
   1654c:	mov	r1, #1
   16550:	sub	sp, fp, #24
   16554:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16558:	b	10fe0 <__fprintf_chk@plt>
   1655c:	movw	r1, #41004	; 0xa02c
   16560:	mov	r0, #0
   16564:	mov	r2, #5
   16568:	movt	r1, #1
   1656c:	bl	10ec0 <dcgettext@plt>
   16570:	mov	r2, r0
   16574:	ldr	r3, [r7]
   16578:	ldr	r0, [r7, #4]
   1657c:	str	r0, [sp]
   16580:	b	16670 <__assert_fail@plt+0x55e8>
   16584:	movw	r1, #41027	; 0xa043
   16588:	mov	r0, #0
   1658c:	mov	r2, #5
   16590:	movt	r1, #1
   16594:	bl	10ec0 <dcgettext@plt>
   16598:	ldr	r3, [r7]
   1659c:	mov	r2, r0
   165a0:	ldmib	r7, {r0, r1}
   165a4:	stm	sp, {r0, r1}
   165a8:	b	16670 <__assert_fail@plt+0x55e8>
   165ac:	movw	r1, #41055	; 0xa05f
   165b0:	mov	r0, #0
   165b4:	mov	r2, #5
   165b8:	movt	r1, #1
   165bc:	bl	10ec0 <dcgettext@plt>
   165c0:	ldr	r3, [r7]
   165c4:	mov	r2, r0
   165c8:	ldmib	r7, {r0, r1, r7}
   165cc:	stm	sp, {r0, r1, r7}
   165d0:	b	16670 <__assert_fail@plt+0x55e8>
   165d4:	movw	r1, #41087	; 0xa07f
   165d8:	mov	r0, #0
   165dc:	mov	r2, #5
   165e0:	movt	r1, #1
   165e4:	bl	10ec0 <dcgettext@plt>
   165e8:	ldr	r3, [r7]
   165ec:	mov	r2, r0
   165f0:	ldmib	r7, {r0, r1, r6, r7}
   165f4:	stm	sp, {r0, r1, r6, r7}
   165f8:	b	16670 <__assert_fail@plt+0x55e8>
   165fc:	movw	r1, #41123	; 0xa0a3
   16600:	mov	r0, #0
   16604:	mov	r2, #5
   16608:	movt	r1, #1
   1660c:	bl	10ec0 <dcgettext@plt>
   16610:	ldr	r3, [r7]
   16614:	mov	r2, r0
   16618:	ldmib	r7, {r0, r1, r6}
   1661c:	ldr	r5, [r7, #16]
   16620:	ldr	r7, [r7, #20]
   16624:	stm	sp, {r0, r1, r6}
   16628:	str	r5, [sp, #12]
   1662c:	str	r7, [sp, #16]
   16630:	b	16670 <__assert_fail@plt+0x55e8>
   16634:	movw	r1, #41163	; 0xa0cb
   16638:	mov	r0, #0
   1663c:	mov	r2, #5
   16640:	movt	r1, #1
   16644:	bl	10ec0 <dcgettext@plt>
   16648:	ldr	r3, [r7]
   1664c:	mov	r2, r0
   16650:	ldmib	r7, {r0, r1, r6}
   16654:	ldr	r5, [r7, #16]
   16658:	ldr	r4, [r7, #20]
   1665c:	ldr	r7, [r7, #24]
   16660:	stm	sp, {r0, r1, r6}
   16664:	str	r5, [sp, #12]
   16668:	str	r4, [sp, #16]
   1666c:	str	r7, [sp, #20]
   16670:	mov	r0, r8
   16674:	mov	r1, #1
   16678:	bl	10fe0 <__fprintf_chk@plt>
   1667c:	sub	sp, fp, #24
   16680:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16684:	movw	r1, #41255	; 0xa127
   16688:	movt	r1, #1
   1668c:	mov	r0, #0
   16690:	mov	r2, #5
   16694:	bl	10ec0 <dcgettext@plt>
   16698:	mov	ip, r0
   1669c:	ldr	r3, [r7]
   166a0:	ldr	r0, [r7, #4]
   166a4:	ldr	r1, [r7, #8]
   166a8:	ldr	r6, [r7, #12]
   166ac:	ldr	r5, [r7, #16]
   166b0:	ldr	r4, [r7, #20]
   166b4:	ldr	r2, [r7, #24]
   166b8:	ldr	lr, [r7, #28]
   166bc:	ldr	r7, [r7, #32]
   166c0:	stm	sp, {r0, r1, r6}
   166c4:	str	r5, [sp, #12]
   166c8:	str	r4, [sp, #16]
   166cc:	str	r2, [sp, #20]
   166d0:	str	lr, [sp, #24]
   166d4:	str	r7, [sp, #28]
   166d8:	b	16720 <__assert_fail@plt+0x5698>
   166dc:	movw	r1, #41207	; 0xa0f7
   166e0:	mov	r0, #0
   166e4:	mov	r2, #5
   166e8:	movt	r1, #1
   166ec:	bl	10ec0 <dcgettext@plt>
   166f0:	mov	ip, r0
   166f4:	ldr	r3, [r7]
   166f8:	ldmib	r7, {r0, r1, r6}
   166fc:	ldr	r5, [r7, #16]
   16700:	ldr	r4, [r7, #20]
   16704:	ldr	r2, [r7, #24]
   16708:	ldr	r7, [r7, #28]
   1670c:	stm	sp, {r0, r1, r6}
   16710:	str	r5, [sp, #12]
   16714:	str	r4, [sp, #16]
   16718:	str	r2, [sp, #20]
   1671c:	str	r7, [sp, #24]
   16720:	mov	r0, r8
   16724:	mov	r1, #1
   16728:	mov	r2, ip
   1672c:	bl	10fe0 <__fprintf_chk@plt>
   16730:	sub	sp, fp, #24
   16734:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16738:	push	{r4, sl, fp, lr}
   1673c:	add	fp, sp, #8
   16740:	sub	sp, sp, #8
   16744:	ldr	ip, [fp, #8]
   16748:	mov	lr, #0
   1674c:	ldr	r4, [ip, lr, lsl #2]
   16750:	add	lr, lr, #1
   16754:	cmp	r4, #0
   16758:	bne	1674c <__assert_fail@plt+0x56c4>
   1675c:	sub	r4, lr, #1
   16760:	str	ip, [sp]
   16764:	str	r4, [sp, #4]
   16768:	bl	163fc <__assert_fail@plt+0x5374>
   1676c:	sub	sp, fp, #8
   16770:	pop	{r4, sl, fp, pc}
   16774:	push	{fp, lr}
   16778:	mov	fp, sp
   1677c:	sub	sp, sp, #48	; 0x30
   16780:	ldr	ip, [fp, #8]
   16784:	ldr	lr, [ip]
   16788:	cmp	lr, #0
   1678c:	str	lr, [sp, #8]
   16790:	beq	1682c <__assert_fail@plt+0x57a4>
   16794:	ldr	lr, [ip, #4]
   16798:	cmp	lr, #0
   1679c:	str	lr, [sp, #12]
   167a0:	beq	16834 <__assert_fail@plt+0x57ac>
   167a4:	ldr	lr, [ip, #8]
   167a8:	cmp	lr, #0
   167ac:	str	lr, [sp, #16]
   167b0:	beq	1683c <__assert_fail@plt+0x57b4>
   167b4:	ldr	lr, [ip, #12]
   167b8:	cmp	lr, #0
   167bc:	str	lr, [sp, #20]
   167c0:	beq	16844 <__assert_fail@plt+0x57bc>
   167c4:	ldr	lr, [ip, #16]
   167c8:	cmp	lr, #0
   167cc:	str	lr, [sp, #24]
   167d0:	beq	1684c <__assert_fail@plt+0x57c4>
   167d4:	ldr	lr, [ip, #20]
   167d8:	cmp	lr, #0
   167dc:	str	lr, [sp, #28]
   167e0:	beq	16854 <__assert_fail@plt+0x57cc>
   167e4:	ldr	lr, [ip, #24]
   167e8:	cmp	lr, #0
   167ec:	str	lr, [sp, #32]
   167f0:	beq	1685c <__assert_fail@plt+0x57d4>
   167f4:	ldr	lr, [ip, #28]
   167f8:	cmp	lr, #0
   167fc:	str	lr, [sp, #36]	; 0x24
   16800:	beq	16864 <__assert_fail@plt+0x57dc>
   16804:	ldr	lr, [ip, #32]
   16808:	cmp	lr, #0
   1680c:	str	lr, [sp, #40]	; 0x28
   16810:	beq	1686c <__assert_fail@plt+0x57e4>
   16814:	ldr	lr, [ip, #36]	; 0x24
   16818:	mov	ip, #10
   1681c:	cmp	lr, #0
   16820:	str	lr, [sp, #44]	; 0x2c
   16824:	movweq	ip, #9
   16828:	b	16870 <__assert_fail@plt+0x57e8>
   1682c:	mov	ip, #0
   16830:	b	16870 <__assert_fail@plt+0x57e8>
   16834:	mov	ip, #1
   16838:	b	16870 <__assert_fail@plt+0x57e8>
   1683c:	mov	ip, #2
   16840:	b	16870 <__assert_fail@plt+0x57e8>
   16844:	mov	ip, #3
   16848:	b	16870 <__assert_fail@plt+0x57e8>
   1684c:	mov	ip, #4
   16850:	b	16870 <__assert_fail@plt+0x57e8>
   16854:	mov	ip, #5
   16858:	b	16870 <__assert_fail@plt+0x57e8>
   1685c:	mov	ip, #6
   16860:	b	16870 <__assert_fail@plt+0x57e8>
   16864:	mov	ip, #7
   16868:	b	16870 <__assert_fail@plt+0x57e8>
   1686c:	mov	ip, #8
   16870:	add	lr, sp, #8
   16874:	str	ip, [sp, #4]
   16878:	str	lr, [sp]
   1687c:	bl	163fc <__assert_fail@plt+0x5374>
   16880:	mov	sp, fp
   16884:	pop	{fp, pc}
   16888:	push	{fp, lr}
   1688c:	mov	fp, sp
   16890:	sub	sp, sp, #56	; 0x38
   16894:	add	ip, fp, #8
   16898:	str	ip, [sp, #12]
   1689c:	ldr	lr, [fp, #8]
   168a0:	cmp	lr, #0
   168a4:	str	lr, [sp, #16]
   168a8:	beq	16944 <__assert_fail@plt+0x58bc>
   168ac:	ldr	lr, [ip, #4]
   168b0:	cmp	lr, #0
   168b4:	str	lr, [sp, #20]
   168b8:	beq	1694c <__assert_fail@plt+0x58c4>
   168bc:	ldr	lr, [ip, #8]
   168c0:	cmp	lr, #0
   168c4:	str	lr, [sp, #24]
   168c8:	beq	16954 <__assert_fail@plt+0x58cc>
   168cc:	ldr	lr, [ip, #12]
   168d0:	cmp	lr, #0
   168d4:	str	lr, [sp, #28]
   168d8:	beq	1695c <__assert_fail@plt+0x58d4>
   168dc:	ldr	lr, [ip, #16]
   168e0:	cmp	lr, #0
   168e4:	str	lr, [sp, #32]
   168e8:	beq	16964 <__assert_fail@plt+0x58dc>
   168ec:	ldr	lr, [ip, #20]
   168f0:	cmp	lr, #0
   168f4:	str	lr, [sp, #36]	; 0x24
   168f8:	beq	1696c <__assert_fail@plt+0x58e4>
   168fc:	ldr	lr, [ip, #24]
   16900:	cmp	lr, #0
   16904:	str	lr, [sp, #40]	; 0x28
   16908:	beq	16974 <__assert_fail@plt+0x58ec>
   1690c:	ldr	lr, [ip, #28]
   16910:	cmp	lr, #0
   16914:	str	lr, [sp, #44]	; 0x2c
   16918:	beq	1697c <__assert_fail@plt+0x58f4>
   1691c:	ldr	lr, [ip, #32]
   16920:	cmp	lr, #0
   16924:	str	lr, [sp, #48]	; 0x30
   16928:	beq	16984 <__assert_fail@plt+0x58fc>
   1692c:	ldr	lr, [ip, #36]	; 0x24
   16930:	mov	ip, #10
   16934:	cmp	lr, #0
   16938:	str	lr, [sp, #52]	; 0x34
   1693c:	movweq	ip, #9
   16940:	b	16988 <__assert_fail@plt+0x5900>
   16944:	mov	ip, #0
   16948:	b	16988 <__assert_fail@plt+0x5900>
   1694c:	mov	ip, #1
   16950:	b	16988 <__assert_fail@plt+0x5900>
   16954:	mov	ip, #2
   16958:	b	16988 <__assert_fail@plt+0x5900>
   1695c:	mov	ip, #3
   16960:	b	16988 <__assert_fail@plt+0x5900>
   16964:	mov	ip, #4
   16968:	b	16988 <__assert_fail@plt+0x5900>
   1696c:	mov	ip, #5
   16970:	b	16988 <__assert_fail@plt+0x5900>
   16974:	mov	ip, #6
   16978:	b	16988 <__assert_fail@plt+0x5900>
   1697c:	mov	ip, #7
   16980:	b	16988 <__assert_fail@plt+0x5900>
   16984:	mov	ip, #8
   16988:	add	lr, sp, #16
   1698c:	str	ip, [sp, #4]
   16990:	str	lr, [sp]
   16994:	bl	163fc <__assert_fail@plt+0x5374>
   16998:	mov	sp, fp
   1699c:	pop	{fp, pc}
   169a0:	push	{fp, lr}
   169a4:	mov	fp, sp
   169a8:	movw	r0, #45388	; 0xb14c
   169ac:	movt	r0, #2
   169b0:	ldr	r1, [r0]
   169b4:	movw	r0, #38798	; 0x978e
   169b8:	movt	r0, #1
   169bc:	bl	10e30 <fputs_unlocked@plt>
   169c0:	movw	r1, #41367	; 0xa197
   169c4:	mov	r0, #0
   169c8:	mov	r2, #5
   169cc:	movt	r1, #1
   169d0:	bl	10ec0 <dcgettext@plt>
   169d4:	movw	r2, #41387	; 0xa1ab
   169d8:	mov	r1, r0
   169dc:	mov	r0, #1
   169e0:	movt	r2, #1
   169e4:	bl	10fc8 <__printf_chk@plt>
   169e8:	movw	r1, #41409	; 0xa1c1
   169ec:	mov	r0, #0
   169f0:	mov	r2, #5
   169f4:	movt	r1, #1
   169f8:	bl	10ec0 <dcgettext@plt>
   169fc:	movw	r2, #38273	; 0x9581
   16a00:	movw	r3, #38607	; 0x96cf
   16a04:	mov	r1, r0
   16a08:	mov	r0, #1
   16a0c:	movt	r2, #1
   16a10:	movt	r3, #1
   16a14:	bl	10fc8 <__printf_chk@plt>
   16a18:	movw	r1, #41429	; 0xa1d5
   16a1c:	mov	r0, #0
   16a20:	mov	r2, #5
   16a24:	movt	r1, #1
   16a28:	bl	10ec0 <dcgettext@plt>
   16a2c:	movw	r2, #41468	; 0xa1fc
   16a30:	mov	r1, r0
   16a34:	mov	r0, #1
   16a38:	movt	r2, #1
   16a3c:	pop	{fp, lr}
   16a40:	b	10fc8 <__printf_chk@plt>
   16a44:	push	{r4, r5, r6, sl, fp, lr}
   16a48:	add	fp, sp, #16
   16a4c:	mov	r4, r2
   16a50:	mov	r5, r1
   16a54:	mov	r6, r0
   16a58:	bl	18bb4 <__assert_fail@plt+0x7b2c>
   16a5c:	cmp	r0, #0
   16a60:	popne	{r4, r5, r6, sl, fp, pc}
   16a64:	cmp	r6, #0
   16a68:	beq	16a7c <__assert_fail@plt+0x59f4>
   16a6c:	cmp	r5, #0
   16a70:	cmpne	r4, #0
   16a74:	bne	16a7c <__assert_fail@plt+0x59f4>
   16a78:	pop	{r4, r5, r6, sl, fp, pc}
   16a7c:	bl	1701c <__assert_fail@plt+0x5f94>
   16a80:	push	{r4, r5, r6, sl, fp, lr}
   16a84:	add	fp, sp, #16
   16a88:	mov	r4, r2
   16a8c:	mov	r5, r1
   16a90:	mov	r6, r0
   16a94:	bl	18bb4 <__assert_fail@plt+0x7b2c>
   16a98:	cmp	r0, #0
   16a9c:	popne	{r4, r5, r6, sl, fp, pc}
   16aa0:	cmp	r6, #0
   16aa4:	beq	16ab8 <__assert_fail@plt+0x5a30>
   16aa8:	cmp	r5, #0
   16aac:	cmpne	r4, #0
   16ab0:	bne	16ab8 <__assert_fail@plt+0x5a30>
   16ab4:	pop	{r4, r5, r6, sl, fp, pc}
   16ab8:	bl	1701c <__assert_fail@plt+0x5f94>
   16abc:	push	{fp, lr}
   16ac0:	mov	fp, sp
   16ac4:	bl	18a14 <__assert_fail@plt+0x798c>
   16ac8:	cmp	r0, #0
   16acc:	popne	{fp, pc}
   16ad0:	bl	1701c <__assert_fail@plt+0x5f94>
   16ad4:	push	{fp, lr}
   16ad8:	mov	fp, sp
   16adc:	bl	18a14 <__assert_fail@plt+0x798c>
   16ae0:	cmp	r0, #0
   16ae4:	popne	{fp, pc}
   16ae8:	bl	1701c <__assert_fail@plt+0x5f94>
   16aec:	push	{fp, lr}
   16af0:	mov	fp, sp
   16af4:	bl	18a14 <__assert_fail@plt+0x798c>
   16af8:	cmp	r0, #0
   16afc:	popne	{fp, pc}
   16b00:	bl	1701c <__assert_fail@plt+0x5f94>
   16b04:	push	{r4, r5, fp, lr}
   16b08:	add	fp, sp, #8
   16b0c:	mov	r4, r1
   16b10:	mov	r5, r0
   16b14:	bl	18a44 <__assert_fail@plt+0x79bc>
   16b18:	cmp	r0, #0
   16b1c:	popne	{r4, r5, fp, pc}
   16b20:	cmp	r5, #0
   16b24:	beq	16b34 <__assert_fail@plt+0x5aac>
   16b28:	cmp	r4, #0
   16b2c:	bne	16b34 <__assert_fail@plt+0x5aac>
   16b30:	pop	{r4, r5, fp, pc}
   16b34:	bl	1701c <__assert_fail@plt+0x5f94>
   16b38:	push	{fp, lr}
   16b3c:	mov	fp, sp
   16b40:	cmp	r1, #0
   16b44:	orreq	r1, r1, #1
   16b48:	bl	18a44 <__assert_fail@plt+0x79bc>
   16b4c:	cmp	r0, #0
   16b50:	popne	{fp, pc}
   16b54:	bl	1701c <__assert_fail@plt+0x5f94>
   16b58:	push	{fp, lr}
   16b5c:	mov	fp, sp
   16b60:	clz	r3, r2
   16b64:	lsr	ip, r3, #5
   16b68:	clz	r3, r1
   16b6c:	lsr	r3, r3, #5
   16b70:	orrs	r3, r3, ip
   16b74:	movwne	r1, #1
   16b78:	movwne	r2, #1
   16b7c:	bl	18bb4 <__assert_fail@plt+0x7b2c>
   16b80:	cmp	r0, #0
   16b84:	popne	{fp, pc}
   16b88:	bl	1701c <__assert_fail@plt+0x5f94>
   16b8c:	push	{fp, lr}
   16b90:	mov	fp, sp
   16b94:	mov	r2, r1
   16b98:	mov	r1, r0
   16b9c:	mov	r0, #0
   16ba0:	bl	18bb4 <__assert_fail@plt+0x7b2c>
   16ba4:	cmp	r0, #0
   16ba8:	popne	{fp, pc}
   16bac:	bl	1701c <__assert_fail@plt+0x5f94>
   16bb0:	push	{fp, lr}
   16bb4:	mov	fp, sp
   16bb8:	mov	r2, r1
   16bbc:	mov	r1, r0
   16bc0:	clz	r0, r2
   16bc4:	clz	r3, r1
   16bc8:	lsr	r0, r0, #5
   16bcc:	lsr	r3, r3, #5
   16bd0:	orrs	r0, r3, r0
   16bd4:	movwne	r1, #1
   16bd8:	movwne	r2, #1
   16bdc:	mov	r0, #0
   16be0:	bl	18bb4 <__assert_fail@plt+0x7b2c>
   16be4:	cmp	r0, #0
   16be8:	popne	{fp, pc}
   16bec:	bl	1701c <__assert_fail@plt+0x5f94>
   16bf0:	push	{r4, r5, r6, sl, fp, lr}
   16bf4:	add	fp, sp, #16
   16bf8:	ldr	r5, [r1]
   16bfc:	mov	r4, r1
   16c00:	mov	r6, r0
   16c04:	cmp	r0, #0
   16c08:	beq	16c20 <__assert_fail@plt+0x5b98>
   16c0c:	mov	r0, #1
   16c10:	add	r0, r0, r5, lsr #1
   16c14:	adds	r5, r5, r0
   16c18:	bcc	16c28 <__assert_fail@plt+0x5ba0>
   16c1c:	b	16c64 <__assert_fail@plt+0x5bdc>
   16c20:	cmp	r5, #0
   16c24:	movweq	r5, #64	; 0x40
   16c28:	mov	r0, r6
   16c2c:	mov	r1, r5
   16c30:	mov	r2, #1
   16c34:	bl	18bb4 <__assert_fail@plt+0x7b2c>
   16c38:	cmp	r5, #0
   16c3c:	mov	r1, r5
   16c40:	movwne	r1, #1
   16c44:	cmp	r0, #0
   16c48:	bne	16c5c <__assert_fail@plt+0x5bd4>
   16c4c:	clz	r2, r6
   16c50:	lsr	r2, r2, #5
   16c54:	orrs	r1, r2, r1
   16c58:	bne	16c64 <__assert_fail@plt+0x5bdc>
   16c5c:	str	r5, [r4]
   16c60:	pop	{r4, r5, r6, sl, fp, pc}
   16c64:	bl	1701c <__assert_fail@plt+0x5f94>
   16c68:	push	{r4, r5, r6, r7, fp, lr}
   16c6c:	add	fp, sp, #16
   16c70:	ldr	r5, [r1]
   16c74:	mov	r6, r2
   16c78:	mov	r4, r1
   16c7c:	mov	r7, r0
   16c80:	cmp	r0, #0
   16c84:	beq	16c9c <__assert_fail@plt+0x5c14>
   16c88:	mov	r0, #1
   16c8c:	add	r0, r0, r5, lsr #1
   16c90:	adds	r5, r5, r0
   16c94:	bcc	16cb4 <__assert_fail@plt+0x5c2c>
   16c98:	b	16ce8 <__assert_fail@plt+0x5c60>
   16c9c:	cmp	r5, #0
   16ca0:	bne	16cb4 <__assert_fail@plt+0x5c2c>
   16ca4:	mov	r0, #64	; 0x40
   16ca8:	cmp	r6, #64	; 0x40
   16cac:	udiv	r5, r0, r6
   16cb0:	addhi	r5, r5, #1
   16cb4:	mov	r0, r7
   16cb8:	mov	r1, r5
   16cbc:	mov	r2, r6
   16cc0:	bl	18bb4 <__assert_fail@plt+0x7b2c>
   16cc4:	cmp	r0, #0
   16cc8:	bne	16ce0 <__assert_fail@plt+0x5c58>
   16ccc:	cmp	r7, #0
   16cd0:	beq	16ce8 <__assert_fail@plt+0x5c60>
   16cd4:	cmp	r6, #0
   16cd8:	cmpne	r5, #0
   16cdc:	bne	16ce8 <__assert_fail@plt+0x5c60>
   16ce0:	str	r5, [r4]
   16ce4:	pop	{r4, r5, r6, r7, fp, pc}
   16ce8:	bl	1701c <__assert_fail@plt+0x5f94>
   16cec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16cf0:	add	fp, sp, #24
   16cf4:	mov	r8, r1
   16cf8:	ldr	r1, [r1]
   16cfc:	mov	r5, r0
   16d00:	add	r0, r1, r1, asr #1
   16d04:	cmp	r0, r1
   16d08:	mvnvs	r0, #-2147483648	; 0x80000000
   16d0c:	cmp	r0, r3
   16d10:	mov	r7, r0
   16d14:	movgt	r7, r3
   16d18:	cmn	r3, #1
   16d1c:	movle	r7, r0
   16d20:	ldr	r0, [fp, #8]
   16d24:	cmn	r0, #1
   16d28:	ble	16d50 <__assert_fail@plt+0x5cc8>
   16d2c:	cmp	r0, #0
   16d30:	beq	16da4 <__assert_fail@plt+0x5d1c>
   16d34:	cmn	r7, #1
   16d38:	ble	16d78 <__assert_fail@plt+0x5cf0>
   16d3c:	mvn	r4, #-2147483648	; 0x80000000
   16d40:	udiv	r6, r4, r0
   16d44:	cmp	r6, r7
   16d48:	bge	16da4 <__assert_fail@plt+0x5d1c>
   16d4c:	b	16db4 <__assert_fail@plt+0x5d2c>
   16d50:	cmn	r7, #1
   16d54:	ble	16d94 <__assert_fail@plt+0x5d0c>
   16d58:	cmn	r0, #1
   16d5c:	beq	16da4 <__assert_fail@plt+0x5d1c>
   16d60:	mov	r6, #-2147483648	; 0x80000000
   16d64:	mvn	r4, #-2147483648	; 0x80000000
   16d68:	sdiv	r6, r6, r0
   16d6c:	cmp	r6, r7
   16d70:	bge	16da4 <__assert_fail@plt+0x5d1c>
   16d74:	b	16db4 <__assert_fail@plt+0x5d2c>
   16d78:	beq	16da4 <__assert_fail@plt+0x5d1c>
   16d7c:	mov	r6, #-2147483648	; 0x80000000
   16d80:	mvn	r4, #-2147483648	; 0x80000000
   16d84:	sdiv	r6, r6, r7
   16d88:	cmp	r6, r0
   16d8c:	bge	16da4 <__assert_fail@plt+0x5d1c>
   16d90:	b	16db4 <__assert_fail@plt+0x5d2c>
   16d94:	mvn	r4, #-2147483648	; 0x80000000
   16d98:	sdiv	r6, r4, r0
   16d9c:	cmp	r7, r6
   16da0:	blt	16db4 <__assert_fail@plt+0x5d2c>
   16da4:	mul	r6, r7, r0
   16da8:	mov	r4, #64	; 0x40
   16dac:	cmp	r6, #63	; 0x3f
   16db0:	bgt	16dbc <__assert_fail@plt+0x5d34>
   16db4:	sdiv	r7, r4, r0
   16db8:	mul	r6, r7, r0
   16dbc:	cmp	r5, #0
   16dc0:	moveq	r4, #0
   16dc4:	streq	r4, [r8]
   16dc8:	sub	r4, r7, r1
   16dcc:	cmp	r4, r2
   16dd0:	bge	16e7c <__assert_fail@plt+0x5df4>
   16dd4:	add	r7, r1, r2
   16dd8:	mov	r6, #0
   16ddc:	mov	r2, #0
   16de0:	cmp	r7, r3
   16de4:	movwgt	r6, #1
   16de8:	cmn	r3, #1
   16dec:	movwgt	r2, #1
   16df0:	cmp	r7, r1
   16df4:	bvs	16eb0 <__assert_fail@plt+0x5e28>
   16df8:	ands	r1, r2, r6
   16dfc:	bne	16eb0 <__assert_fail@plt+0x5e28>
   16e00:	cmn	r0, #1
   16e04:	ble	16e2c <__assert_fail@plt+0x5da4>
   16e08:	cmp	r0, #0
   16e0c:	beq	16e78 <__assert_fail@plt+0x5df0>
   16e10:	cmn	r7, #1
   16e14:	ble	16e50 <__assert_fail@plt+0x5dc8>
   16e18:	mvn	r1, #-2147483648	; 0x80000000
   16e1c:	udiv	r1, r1, r0
   16e20:	cmp	r1, r7
   16e24:	bge	16e78 <__assert_fail@plt+0x5df0>
   16e28:	b	16eb0 <__assert_fail@plt+0x5e28>
   16e2c:	cmn	r7, #1
   16e30:	ble	16e68 <__assert_fail@plt+0x5de0>
   16e34:	cmn	r0, #1
   16e38:	beq	16e78 <__assert_fail@plt+0x5df0>
   16e3c:	mov	r1, #-2147483648	; 0x80000000
   16e40:	sdiv	r1, r1, r0
   16e44:	cmp	r1, r7
   16e48:	bge	16e78 <__assert_fail@plt+0x5df0>
   16e4c:	b	16eb0 <__assert_fail@plt+0x5e28>
   16e50:	beq	16e78 <__assert_fail@plt+0x5df0>
   16e54:	mov	r1, #-2147483648	; 0x80000000
   16e58:	sdiv	r1, r1, r7
   16e5c:	cmp	r1, r0
   16e60:	bge	16e78 <__assert_fail@plt+0x5df0>
   16e64:	b	16eb0 <__assert_fail@plt+0x5e28>
   16e68:	mvn	r1, #-2147483648	; 0x80000000
   16e6c:	sdiv	r1, r1, r0
   16e70:	cmp	r7, r1
   16e74:	blt	16eb0 <__assert_fail@plt+0x5e28>
   16e78:	mul	r6, r7, r0
   16e7c:	mov	r0, r5
   16e80:	mov	r1, r6
   16e84:	bl	18a44 <__assert_fail@plt+0x79bc>
   16e88:	cmp	r6, #0
   16e8c:	movwne	r6, #1
   16e90:	cmp	r0, #0
   16e94:	bne	16ea8 <__assert_fail@plt+0x5e20>
   16e98:	clz	r1, r5
   16e9c:	lsr	r1, r1, #5
   16ea0:	orrs	r1, r1, r6
   16ea4:	bne	16eb0 <__assert_fail@plt+0x5e28>
   16ea8:	str	r7, [r8]
   16eac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16eb0:	bl	1701c <__assert_fail@plt+0x5f94>
   16eb4:	push	{fp, lr}
   16eb8:	mov	fp, sp
   16ebc:	mov	r1, #1
   16ec0:	bl	189c0 <__assert_fail@plt+0x7938>
   16ec4:	cmp	r0, #0
   16ec8:	popne	{fp, pc}
   16ecc:	bl	1701c <__assert_fail@plt+0x5f94>
   16ed0:	push	{fp, lr}
   16ed4:	mov	fp, sp
   16ed8:	bl	189c0 <__assert_fail@plt+0x7938>
   16edc:	cmp	r0, #0
   16ee0:	popne	{fp, pc}
   16ee4:	bl	1701c <__assert_fail@plt+0x5f94>
   16ee8:	push	{fp, lr}
   16eec:	mov	fp, sp
   16ef0:	mov	r1, #1
   16ef4:	bl	189c0 <__assert_fail@plt+0x7938>
   16ef8:	cmp	r0, #0
   16efc:	popne	{fp, pc}
   16f00:	bl	1701c <__assert_fail@plt+0x5f94>
   16f04:	push	{fp, lr}
   16f08:	mov	fp, sp
   16f0c:	bl	189c0 <__assert_fail@plt+0x7938>
   16f10:	cmp	r0, #0
   16f14:	popne	{fp, pc}
   16f18:	bl	1701c <__assert_fail@plt+0x5f94>
   16f1c:	push	{r4, r5, r6, sl, fp, lr}
   16f20:	add	fp, sp, #16
   16f24:	mov	r5, r0
   16f28:	mov	r0, r1
   16f2c:	mov	r4, r1
   16f30:	bl	18a14 <__assert_fail@plt+0x798c>
   16f34:	cmp	r0, #0
   16f38:	beq	16f54 <__assert_fail@plt+0x5ecc>
   16f3c:	mov	r1, r5
   16f40:	mov	r2, r4
   16f44:	mov	r6, r0
   16f48:	bl	10e90 <memcpy@plt>
   16f4c:	mov	r0, r6
   16f50:	pop	{r4, r5, r6, sl, fp, pc}
   16f54:	bl	1701c <__assert_fail@plt+0x5f94>
   16f58:	push	{r4, r5, r6, sl, fp, lr}
   16f5c:	add	fp, sp, #16
   16f60:	mov	r5, r0
   16f64:	mov	r0, r1
   16f68:	mov	r4, r1
   16f6c:	bl	18a14 <__assert_fail@plt+0x798c>
   16f70:	cmp	r0, #0
   16f74:	beq	16f90 <__assert_fail@plt+0x5f08>
   16f78:	mov	r1, r5
   16f7c:	mov	r2, r4
   16f80:	mov	r6, r0
   16f84:	bl	10e90 <memcpy@plt>
   16f88:	mov	r0, r6
   16f8c:	pop	{r4, r5, r6, sl, fp, pc}
   16f90:	bl	1701c <__assert_fail@plt+0x5f94>
   16f94:	push	{r4, r5, r6, sl, fp, lr}
   16f98:	add	fp, sp, #16
   16f9c:	mov	r5, r0
   16fa0:	add	r0, r1, #1
   16fa4:	mov	r4, r1
   16fa8:	bl	18a14 <__assert_fail@plt+0x798c>
   16fac:	cmp	r0, #0
   16fb0:	beq	16fd8 <__assert_fail@plt+0x5f50>
   16fb4:	mov	r6, r0
   16fb8:	mov	r0, #0
   16fbc:	mov	r1, r5
   16fc0:	mov	r2, r4
   16fc4:	strb	r0, [r6, r4]
   16fc8:	mov	r0, r6
   16fcc:	bl	10e90 <memcpy@plt>
   16fd0:	mov	r0, r6
   16fd4:	pop	{r4, r5, r6, sl, fp, pc}
   16fd8:	bl	1701c <__assert_fail@plt+0x5f94>
   16fdc:	push	{r4, r5, r6, sl, fp, lr}
   16fe0:	add	fp, sp, #16
   16fe4:	mov	r4, r0
   16fe8:	bl	10f8c <strlen@plt>
   16fec:	add	r5, r0, #1
   16ff0:	mov	r0, r5
   16ff4:	bl	18a14 <__assert_fail@plt+0x798c>
   16ff8:	cmp	r0, #0
   16ffc:	beq	17018 <__assert_fail@plt+0x5f90>
   17000:	mov	r1, r4
   17004:	mov	r2, r5
   17008:	mov	r6, r0
   1700c:	bl	10e90 <memcpy@plt>
   17010:	mov	r0, r6
   17014:	pop	{r4, r5, r6, sl, fp, pc}
   17018:	bl	1701c <__assert_fail@plt+0x5f94>
   1701c:	push	{fp, lr}
   17020:	mov	fp, sp
   17024:	movw	r0, #45292	; 0xb0ec
   17028:	movw	r1, #41544	; 0xa248
   1702c:	mov	r2, #5
   17030:	movt	r0, #2
   17034:	movt	r1, #1
   17038:	ldr	r4, [r0]
   1703c:	mov	r0, #0
   17040:	bl	10ec0 <dcgettext@plt>
   17044:	movw	r2, #38252	; 0x956c
   17048:	mov	r3, r0
   1704c:	mov	r0, r4
   17050:	mov	r1, #0
   17054:	movt	r2, #1
   17058:	bl	10f2c <error@plt>
   1705c:	bl	1107c <abort@plt>
   17060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17064:	add	fp, sp, #28
   17068:	sub	sp, sp, #36	; 0x24
   1706c:	cmp	r2, #37	; 0x25
   17070:	bcs	189a0 <__assert_fail@plt+0x7918>
   17074:	ldr	r8, [fp, #8]
   17078:	mov	r9, r3
   1707c:	mov	r6, r2
   17080:	mov	r7, r1
   17084:	mov	r4, r0
   17088:	bl	10fa4 <__errno_location@plt>
   1708c:	add	sl, sp, #32
   17090:	cmp	r7, #0
   17094:	mov	r5, r0
   17098:	mov	r0, #0
   1709c:	mov	r2, r6
   170a0:	mov	r3, #0
   170a4:	movne	sl, r7
   170a8:	str	r0, [r5]
   170ac:	mov	r0, r4
   170b0:	mov	r1, sl
   170b4:	bl	11040 <__strtoll_internal@plt>
   170b8:	mov	r7, r1
   170bc:	ldr	r1, [sl]
   170c0:	cmp	r1, r4
   170c4:	beq	17100 <__assert_fail@plt+0x6078>
   170c8:	mov	r6, r0
   170cc:	ldr	r0, [r5]
   170d0:	cmp	r0, #0
   170d4:	beq	1728c <__assert_fail@plt+0x6204>
   170d8:	mov	r5, #4
   170dc:	cmp	r0, #34	; 0x22
   170e0:	bne	174e4 <__assert_fail@plt+0x645c>
   170e4:	mov	r5, #1
   170e8:	cmp	r8, #0
   170ec:	beq	17298 <__assert_fail@plt+0x6210>
   170f0:	ldrb	r4, [r1]
   170f4:	cmp	r4, #0
   170f8:	bne	17148 <__assert_fail@plt+0x60c0>
   170fc:	b	17298 <__assert_fail@plt+0x6210>
   17100:	mov	r5, #4
   17104:	cmp	r8, #0
   17108:	beq	174e4 <__assert_fail@plt+0x645c>
   1710c:	mov	r6, r1
   17110:	ldrb	r1, [r4]
   17114:	cmp	r1, #0
   17118:	beq	174e4 <__assert_fail@plt+0x645c>
   1711c:	mov	r0, r8
   17120:	bl	10f98 <strchr@plt>
   17124:	cmp	r0, #0
   17128:	beq	174e4 <__assert_fail@plt+0x645c>
   1712c:	mov	r1, r6
   17130:	mov	r5, #0
   17134:	mov	r6, #1
   17138:	mov	r7, #0
   1713c:	ldrb	r4, [r1]
   17140:	cmp	r4, #0
   17144:	beq	17298 <__assert_fail@plt+0x6210>
   17148:	str	r1, [sp, #20]
   1714c:	mov	r0, r8
   17150:	mov	r1, r4
   17154:	bl	10f98 <strchr@plt>
   17158:	cmp	r0, #0
   1715c:	beq	174dc <__assert_fail@plt+0x6454>
   17160:	sub	r0, r4, #69	; 0x45
   17164:	mov	r1, #1
   17168:	mov	r3, #0
   1716c:	mov	r2, #1024	; 0x400
   17170:	cmp	r0, #47	; 0x2f
   17174:	str	r1, [sp, #16]
   17178:	bhi	172b0 <__assert_fail@plt+0x6228>
   1717c:	add	r1, pc, #0
   17180:	ldr	pc, [r1, r0, lsl #2]
   17184:	andeq	r7, r1, r4, asr #4
   17188:			; <UNDEFINED> instruction: 0x000172b0
   1718c:	andeq	r7, r1, r4, asr #4
   17190:			; <UNDEFINED> instruction: 0x000172b0
   17194:			; <UNDEFINED> instruction: 0x000172b0
   17198:			; <UNDEFINED> instruction: 0x000172b0
   1719c:	andeq	r7, r1, r4, asr #4
   171a0:			; <UNDEFINED> instruction: 0x000172b0
   171a4:	andeq	r7, r1, r4, asr #4
   171a8:			; <UNDEFINED> instruction: 0x000172b0
   171ac:			; <UNDEFINED> instruction: 0x000172b0
   171b0:	andeq	r7, r1, r4, asr #4
   171b4:			; <UNDEFINED> instruction: 0x000172b0
   171b8:			; <UNDEFINED> instruction: 0x000172b0
   171bc:			; <UNDEFINED> instruction: 0x000172b0
   171c0:	andeq	r7, r1, r4, asr #4
   171c4:			; <UNDEFINED> instruction: 0x000172b0
   171c8:			; <UNDEFINED> instruction: 0x000172b0
   171cc:			; <UNDEFINED> instruction: 0x000172b0
   171d0:			; <UNDEFINED> instruction: 0x000172b0
   171d4:	andeq	r7, r1, r4, asr #4
   171d8:	andeq	r7, r1, r4, asr #4
   171dc:			; <UNDEFINED> instruction: 0x000172b0
   171e0:			; <UNDEFINED> instruction: 0x000172b0
   171e4:			; <UNDEFINED> instruction: 0x000172b0
   171e8:			; <UNDEFINED> instruction: 0x000172b0
   171ec:			; <UNDEFINED> instruction: 0x000172b0
   171f0:			; <UNDEFINED> instruction: 0x000172b0
   171f4:			; <UNDEFINED> instruction: 0x000172b0
   171f8:			; <UNDEFINED> instruction: 0x000172b0
   171fc:			; <UNDEFINED> instruction: 0x000172b0
   17200:			; <UNDEFINED> instruction: 0x000172b0
   17204:			; <UNDEFINED> instruction: 0x000172b0
   17208:			; <UNDEFINED> instruction: 0x000172b0
   1720c:	andeq	r7, r1, r4, asr #4
   17210:			; <UNDEFINED> instruction: 0x000172b0
   17214:			; <UNDEFINED> instruction: 0x000172b0
   17218:			; <UNDEFINED> instruction: 0x000172b0
   1721c:	andeq	r7, r1, r4, asr #4
   17220:			; <UNDEFINED> instruction: 0x000172b0
   17224:	andeq	r7, r1, r4, asr #4
   17228:			; <UNDEFINED> instruction: 0x000172b0
   1722c:			; <UNDEFINED> instruction: 0x000172b0
   17230:			; <UNDEFINED> instruction: 0x000172b0
   17234:			; <UNDEFINED> instruction: 0x000172b0
   17238:			; <UNDEFINED> instruction: 0x000172b0
   1723c:			; <UNDEFINED> instruction: 0x000172b0
   17240:	andeq	r7, r1, r4, asr #4
   17244:	mov	r0, r8
   17248:	mov	r1, #48	; 0x30
   1724c:	bl	10f98 <strchr@plt>
   17250:	cmp	r0, #0
   17254:	beq	172a8 <__assert_fail@plt+0x6220>
   17258:	ldr	r1, [sp, #20]
   1725c:	ldrb	r0, [r1, #1]
   17260:	cmp	r0, #66	; 0x42
   17264:	cmpne	r0, #68	; 0x44
   17268:	bne	173e4 <__assert_fail@plt+0x635c>
   1726c:	mov	r0, #2
   17270:	mov	r2, #1000	; 0x3e8
   17274:	mov	r3, #0
   17278:	str	r0, [sp, #16]
   1727c:	sub	r0, r4, #66	; 0x42
   17280:	cmp	r0, #53	; 0x35
   17284:	bls	172bc <__assert_fail@plt+0x6234>
   17288:	b	174dc <__assert_fail@plt+0x6454>
   1728c:	mov	r5, r0
   17290:	cmp	r8, #0
   17294:	bne	170f0 <__assert_fail@plt+0x6068>
   17298:	strd	r6, [r9]
   1729c:	mov	r0, r5
   172a0:	sub	sp, fp, #28
   172a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172a8:	mov	r3, #0
   172ac:	mov	r2, #1024	; 0x400
   172b0:	sub	r0, r4, #66	; 0x42
   172b4:	cmp	r0, #53	; 0x35
   172b8:	bhi	174dc <__assert_fail@plt+0x6454>
   172bc:	add	r1, pc, #8
   172c0:	str	r3, [sp, #28]
   172c4:	str	r2, [sp, #24]
   172c8:	ldr	pc, [r1, r0, lsl #2]
   172cc:	andeq	r7, r1, r4, lsr r5
   172d0:	ldrdeq	r7, [r1], -ip
   172d4:	ldrdeq	r7, [r1], -ip
   172d8:	andeq	r7, r1, r8, asr #10
   172dc:	ldrdeq	r7, [r1], -ip
   172e0:	andeq	r7, r1, r4, lsr #7
   172e4:	ldrdeq	r7, [r1], -ip
   172e8:	ldrdeq	r7, [r1], -ip
   172ec:	ldrdeq	r7, [r1], -ip
   172f0:	andeq	r7, r1, r8, lsl r4
   172f4:	ldrdeq	r7, [r1], -ip
   172f8:	andeq	r7, r1, r8, asr #8
   172fc:	ldrdeq	r7, [r1], -ip
   17300:	ldrdeq	r7, [r1], -ip
   17304:	andeq	r7, r1, ip, lsl #11
   17308:	ldrdeq	r7, [r1], -ip
   1730c:	ldrdeq	r7, [r1], -ip
   17310:	ldrdeq	r7, [r1], -ip
   17314:	andeq	r7, r1, r8, lsl #9
   17318:	ldrdeq	r7, [r1], -ip
   1731c:	ldrdeq	r7, [r1], -ip
   17320:	ldrdeq	r7, [r1], -ip
   17324:	ldrdeq	r7, [r1], -ip
   17328:	ldrdeq	r7, [r1], -r0
   1732c:	strdeq	r7, [r1], -r0
   17330:	ldrdeq	r7, [r1], -ip
   17334:	ldrdeq	r7, [r1], -ip
   17338:	ldrdeq	r7, [r1], -ip
   1733c:	ldrdeq	r7, [r1], -ip
   17340:	ldrdeq	r7, [r1], -ip
   17344:	ldrdeq	r7, [r1], -ip
   17348:	ldrdeq	r7, [r1], -ip
   1734c:	andeq	r7, r1, r4, lsl r6
   17350:	andeq	r8, r1, ip, lsl #11
   17354:	ldrdeq	r7, [r1], -ip
   17358:	ldrdeq	r7, [r1], -ip
   1735c:	ldrdeq	r7, [r1], -ip
   17360:	andeq	r7, r1, r4, lsr #7
   17364:	ldrdeq	r7, [r1], -ip
   17368:	ldrdeq	r7, [r1], -ip
   1736c:	ldrdeq	r7, [r1], -ip
   17370:	andeq	r7, r1, r8, lsl r4
   17374:	ldrdeq	r7, [r1], -ip
   17378:	andeq	r7, r1, r8, asr #8
   1737c:	ldrdeq	r7, [r1], -ip
   17380:	ldrdeq	r7, [r1], -ip
   17384:	ldrdeq	r7, [r1], -ip
   17388:	ldrdeq	r7, [r1], -ip
   1738c:	ldrdeq	r7, [r1], -ip
   17390:	ldrdeq	r7, [r1], -ip
   17394:	andeq	r7, r1, r8, lsl #9
   17398:	ldrdeq	r7, [r1], -ip
   1739c:	ldrdeq	r7, [r1], -ip
   173a0:	andeq	r7, r1, r8, lsr #12
   173a4:	cmn	r7, #1
   173a8:	str	r9, [sp, #12]
   173ac:	ble	1763c <__assert_fail@plt+0x65b4>
   173b0:	ldr	r3, [sp, #28]
   173b4:	mvn	r0, #0
   173b8:	mvn	r1, #-2147483648	; 0x80000000
   173bc:	mvn	r8, #0
   173c0:	mvn	r9, #-2147483648	; 0x80000000
   173c4:	bl	18dcc <__assert_fail@plt+0x7d44>
   173c8:	ldr	r2, [sp, #24]
   173cc:	ldr	r3, [sp, #28]
   173d0:	subs	r0, r0, r6
   173d4:	mov	r4, #1
   173d8:	sbcs	r0, r1, r7
   173dc:	bge	1767c <__assert_fail@plt+0x65f4>
   173e0:	b	17694 <__assert_fail@plt+0x660c>
   173e4:	cmp	r0, #105	; 0x69
   173e8:	mov	r3, #0
   173ec:	bne	174cc <__assert_fail@plt+0x6444>
   173f0:	ldrb	r0, [r1, #2]
   173f4:	mov	r1, #1
   173f8:	mov	r2, #1024	; 0x400
   173fc:	cmp	r0, #66	; 0x42
   17400:	movweq	r1, #3
   17404:	str	r1, [sp, #16]
   17408:	sub	r0, r4, #66	; 0x42
   1740c:	cmp	r0, #53	; 0x35
   17410:	bls	172bc <__assert_fail@plt+0x6234>
   17414:	b	174dc <__assert_fail@plt+0x6454>
   17418:	cmn	r7, #1
   1741c:	ble	176d0 <__assert_fail@plt+0x6648>
   17420:	ldr	r3, [sp, #28]
   17424:	mvn	r0, #0
   17428:	mvn	r1, #-2147483648	; 0x80000000
   1742c:	bl	18dcc <__assert_fail@plt+0x7d44>
   17430:	ldr	r2, [sp, #24]
   17434:	ldr	r3, [sp, #28]
   17438:	subs	r0, r0, r6
   1743c:	sbcs	r0, r1, r7
   17440:	bge	17704 <__assert_fail@plt+0x667c>
   17444:	b	17e14 <__assert_fail@plt+0x6d8c>
   17448:	cmn	r7, #1
   1744c:	str	r9, [sp, #12]
   17450:	ble	17718 <__assert_fail@plt+0x6690>
   17454:	ldr	r3, [sp, #28]
   17458:	mvn	r0, #0
   1745c:	mvn	r1, #-2147483648	; 0x80000000
   17460:	mvn	r8, #0
   17464:	mvn	r9, #-2147483648	; 0x80000000
   17468:	bl	18dcc <__assert_fail@plt+0x7d44>
   1746c:	ldr	r2, [sp, #24]
   17470:	ldr	r3, [sp, #28]
   17474:	subs	r0, r0, r6
   17478:	mov	r4, #1
   1747c:	sbcs	r0, r1, r7
   17480:	bge	17758 <__assert_fail@plt+0x66d0>
   17484:	b	17770 <__assert_fail@plt+0x66e8>
   17488:	cmn	r7, #1
   1748c:	str	r9, [sp, #12]
   17490:	ble	177a8 <__assert_fail@plt+0x6720>
   17494:	ldr	r3, [sp, #28]
   17498:	mvn	r0, #0
   1749c:	mvn	r1, #-2147483648	; 0x80000000
   174a0:	mvn	r9, #-2147483648	; 0x80000000
   174a4:	str	r0, [sp, #8]
   174a8:	mvn	r0, #0
   174ac:	bl	18dcc <__assert_fail@plt+0x7d44>
   174b0:	ldr	r2, [sp, #24]
   174b4:	ldr	r3, [sp, #28]
   174b8:	subs	r0, r0, r6
   174bc:	mov	r4, #1
   174c0:	sbcs	r0, r1, r7
   174c4:	bge	177ec <__assert_fail@plt+0x6764>
   174c8:	b	17808 <__assert_fail@plt+0x6780>
   174cc:	mov	r2, #1024	; 0x400
   174d0:	sub	r0, r4, #66	; 0x42
   174d4:	cmp	r0, #53	; 0x35
   174d8:	bls	172bc <__assert_fail@plt+0x6234>
   174dc:	orr	r5, r5, #2
   174e0:	strd	r6, [r9]
   174e4:	mov	r0, r5
   174e8:	sub	sp, fp, #28
   174ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174f0:	cmp	r7, #0
   174f4:	str	r9, [sp, #12]
   174f8:	blt	17af0 <__assert_fail@plt+0x6a68>
   174fc:	ldr	r3, [sp, #28]
   17500:	mvn	r0, #0
   17504:	mvn	r1, #-2147483648	; 0x80000000
   17508:	mvn	r9, #-2147483648	; 0x80000000
   1750c:	str	r0, [sp, #8]
   17510:	mvn	r0, #0
   17514:	bl	18dcc <__assert_fail@plt+0x7d44>
   17518:	ldr	r2, [sp, #24]
   1751c:	ldr	r3, [sp, #28]
   17520:	subs	r0, r0, r6
   17524:	mov	r4, #1
   17528:	sbcs	r0, r1, r7
   1752c:	bge	17b34 <__assert_fail@plt+0x6aac>
   17530:	b	17b50 <__assert_fail@plt+0x6ac8>
   17534:	cmn	r7, #1
   17538:	ble	17b8c <__assert_fail@plt+0x6b04>
   1753c:	cmp	r7, #2097152	; 0x200000
   17540:	blt	17bbc <__assert_fail@plt+0x6b34>
   17544:	b	17e14 <__assert_fail@plt+0x6d8c>
   17548:	cmp	r7, #0
   1754c:	str	r9, [sp, #12]
   17550:	blt	17bcc <__assert_fail@plt+0x6b44>
   17554:	ldr	r3, [sp, #28]
   17558:	mvn	r0, #0
   1755c:	mvn	r1, #-2147483648	; 0x80000000
   17560:	mvn	r9, #-2147483648	; 0x80000000
   17564:	str	r0, [sp, #8]
   17568:	mvn	r0, #0
   1756c:	bl	18dcc <__assert_fail@plt+0x7d44>
   17570:	ldr	r2, [sp, #24]
   17574:	ldr	r3, [sp, #28]
   17578:	subs	r0, r0, r6
   1757c:	mov	r4, #1
   17580:	sbcs	r0, r1, r7
   17584:	bge	17c10 <__assert_fail@plt+0x6b88>
   17588:	b	17c2c <__assert_fail@plt+0x6ba4>
   1758c:	cmp	r7, #0
   17590:	str	r9, [sp, #12]
   17594:	blt	17c68 <__assert_fail@plt+0x6be0>
   17598:	ldr	r3, [sp, #28]
   1759c:	mvn	r0, #0
   175a0:	mvn	r1, #-2147483648	; 0x80000000
   175a4:	mvn	r8, #-2147483648	; 0x80000000
   175a8:	str	r0, [sp, #8]
   175ac:	mvn	r0, #0
   175b0:	bl	18dcc <__assert_fail@plt+0x7d44>
   175b4:	ldr	r2, [sp, #24]
   175b8:	ldr	r3, [sp, #28]
   175bc:	subs	r0, r0, r6
   175c0:	mov	r4, #1
   175c4:	sbcs	r0, r1, r7
   175c8:	bge	17cac <__assert_fail@plt+0x6c24>
   175cc:	b	17cc8 <__assert_fail@plt+0x6c40>
   175d0:	cmp	r7, #0
   175d4:	str	r9, [sp, #12]
   175d8:	blt	17d04 <__assert_fail@plt+0x6c7c>
   175dc:	ldr	r3, [sp, #28]
   175e0:	mvn	r0, #0
   175e4:	mvn	r1, #-2147483648	; 0x80000000
   175e8:	mvn	r9, #-2147483648	; 0x80000000
   175ec:	str	r0, [sp, #8]
   175f0:	mvn	r0, #0
   175f4:	bl	18dcc <__assert_fail@plt+0x7d44>
   175f8:	ldr	r2, [sp, #24]
   175fc:	ldr	r3, [sp, #28]
   17600:	subs	r0, r0, r6
   17604:	mov	r4, #1
   17608:	sbcs	r0, r1, r7
   1760c:	bge	17d48 <__assert_fail@plt+0x6cc0>
   17610:	b	17d64 <__assert_fail@plt+0x6cdc>
   17614:	cmn	r7, #1
   17618:	ble	17da4 <__assert_fail@plt+0x6d1c>
   1761c:	cmp	r7, #4194304	; 0x400000
   17620:	blt	17dd4 <__assert_fail@plt+0x6d4c>
   17624:	b	17e14 <__assert_fail@plt+0x6d8c>
   17628:	cmn	r7, #1
   1762c:	ble	17de4 <__assert_fail@plt+0x6d5c>
   17630:	cmp	r7, #1073741824	; 0x40000000
   17634:	bge	17e14 <__assert_fail@plt+0x6d8c>
   17638:	b	17e34 <__assert_fail@plt+0x6dac>
   1763c:	and	r0, r6, r7
   17640:	cmn	r0, #1
   17644:	beq	1767c <__assert_fail@plt+0x65f4>
   17648:	mov	r0, #0
   1764c:	mov	r1, #-2147483648	; 0x80000000
   17650:	mov	r2, r6
   17654:	mov	r3, r7
   17658:	mov	r8, #0
   1765c:	mov	r9, #-2147483648	; 0x80000000
   17660:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17664:	ldr	r2, [sp, #24]
   17668:	ldr	r3, [sp, #28]
   1766c:	mov	r4, #1
   17670:	subs	r0, r0, r2
   17674:	sbcs	r0, r1, r3
   17678:	blt	17844 <__assert_fail@plt+0x67bc>
   1767c:	umull	r8, r0, r6, r2
   17680:	mov	r4, #0
   17684:	mla	r0, r6, r3, r0
   17688:	mla	r9, r7, r2, r0
   1768c:	cmp	r9, #0
   17690:	blt	17844 <__assert_fail@plt+0x67bc>
   17694:	ldr	r3, [sp, #28]
   17698:	mvn	r0, #-2147483648	; 0x80000000
   1769c:	mvn	r1, #-2147483648	; 0x80000000
   176a0:	mov	r6, r4
   176a4:	mvn	r4, #0
   176a8:	str	r0, [sp, #8]
   176ac:	mvn	r0, #0
   176b0:	bl	18dcc <__assert_fail@plt+0x7d44>
   176b4:	ldr	r2, [sp, #24]
   176b8:	ldr	r3, [sp, #28]
   176bc:	subs	r0, r0, r8
   176c0:	mov	r7, #1
   176c4:	sbcs	r0, r1, r9
   176c8:	bge	17880 <__assert_fail@plt+0x67f8>
   176cc:	b	1789c <__assert_fail@plt+0x6814>
   176d0:	and	r0, r6, r7
   176d4:	cmn	r0, #1
   176d8:	beq	17704 <__assert_fail@plt+0x667c>
   176dc:	mov	r0, #0
   176e0:	mov	r1, #-2147483648	; 0x80000000
   176e4:	mov	r2, r6
   176e8:	mov	r3, r7
   176ec:	bl	18cf8 <__assert_fail@plt+0x7c70>
   176f0:	ldr	r2, [sp, #24]
   176f4:	ldr	r3, [sp, #28]
   176f8:	subs	r0, r0, r2
   176fc:	sbcs	r0, r1, r3
   17700:	blt	17e14 <__assert_fail@plt+0x6d8c>
   17704:	umull	r0, r1, r6, r2
   17708:	mla	r1, r6, r3, r1
   1770c:	mov	r6, r0
   17710:	mla	r7, r7, r2, r1
   17714:	b	1858c <__assert_fail@plt+0x7504>
   17718:	and	r0, r6, r7
   1771c:	cmn	r0, #1
   17720:	beq	17758 <__assert_fail@plt+0x66d0>
   17724:	mov	r0, #0
   17728:	mov	r1, #-2147483648	; 0x80000000
   1772c:	mov	r2, r6
   17730:	mov	r3, r7
   17734:	mov	r8, #0
   17738:	mov	r9, #-2147483648	; 0x80000000
   1773c:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17740:	ldr	r2, [sp, #24]
   17744:	ldr	r3, [sp, #28]
   17748:	mov	r4, #1
   1774c:	subs	r0, r0, r2
   17750:	sbcs	r0, r1, r3
   17754:	blt	17930 <__assert_fail@plt+0x68a8>
   17758:	umull	r8, r0, r6, r2
   1775c:	mov	r4, #0
   17760:	mla	r0, r6, r3, r0
   17764:	mla	r9, r7, r2, r0
   17768:	cmp	r9, #0
   1776c:	blt	17930 <__assert_fail@plt+0x68a8>
   17770:	ldr	r3, [sp, #28]
   17774:	mvn	r0, #0
   17778:	mvn	r1, #-2147483648	; 0x80000000
   1777c:	str	r4, [sp, #8]
   17780:	mvn	r6, #0
   17784:	mvn	r7, #-2147483648	; 0x80000000
   17788:	bl	18dcc <__assert_fail@plt+0x7d44>
   1778c:	ldr	r4, [sp, #24]
   17790:	ldr	r3, [sp, #28]
   17794:	subs	r0, r0, r8
   17798:	mov	r2, #1
   1779c:	sbcs	r0, r1, r9
   177a0:	bge	17968 <__assert_fail@plt+0x68e0>
   177a4:	b	17aa0 <__assert_fail@plt+0x6a18>
   177a8:	and	r0, r6, r7
   177ac:	cmn	r0, #1
   177b0:	beq	177ec <__assert_fail@plt+0x6764>
   177b4:	mov	r0, #0
   177b8:	mov	r1, #-2147483648	; 0x80000000
   177bc:	mov	r2, r6
   177c0:	mov	r3, r7
   177c4:	bl	18cf8 <__assert_fail@plt+0x7c70>
   177c8:	ldr	r2, [sp, #24]
   177cc:	ldr	r3, [sp, #28]
   177d0:	mov	r4, #1
   177d4:	mov	r9, #-2147483648	; 0x80000000
   177d8:	subs	r0, r0, r2
   177dc:	sbcs	r0, r1, r3
   177e0:	mov	r0, #0
   177e4:	str	r0, [sp, #8]
   177e8:	blt	1797c <__assert_fail@plt+0x68f4>
   177ec:	umull	r1, r0, r6, r2
   177f0:	mov	r4, #0
   177f4:	mla	r0, r6, r3, r0
   177f8:	str	r1, [sp, #8]
   177fc:	mla	r9, r7, r2, r0
   17800:	cmp	r9, #0
   17804:	blt	1797c <__assert_fail@plt+0x68f4>
   17808:	ldr	r3, [sp, #28]
   1780c:	mvn	r0, #0
   17810:	mvn	r1, #-2147483648	; 0x80000000
   17814:	str	r4, [sp, #4]
   17818:	mvn	r6, #0
   1781c:	mvn	r8, #-2147483648	; 0x80000000
   17820:	bl	18dcc <__assert_fail@plt+0x7d44>
   17824:	ldr	r4, [sp, #8]
   17828:	ldr	r2, [sp, #24]
   1782c:	ldr	r3, [sp, #28]
   17830:	mov	r7, #1
   17834:	subs	r0, r0, r4
   17838:	sbcs	r0, r1, r9
   1783c:	bge	179b8 <__assert_fail@plt+0x6930>
   17840:	b	179d0 <__assert_fail@plt+0x6948>
   17844:	mov	r0, #-2147483648	; 0x80000000
   17848:	mov	r1, #-2147483648	; 0x80000000
   1784c:	mov	r2, r8
   17850:	mov	r3, r9
   17854:	mov	r6, r4
   17858:	mov	r4, #0
   1785c:	str	r0, [sp, #8]
   17860:	mov	r0, #0
   17864:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17868:	ldr	r2, [sp, #24]
   1786c:	ldr	r3, [sp, #28]
   17870:	mov	r7, #1
   17874:	subs	r0, r0, r2
   17878:	sbcs	r0, r1, r3
   1787c:	blt	178f0 <__assert_fail@plt+0x6868>
   17880:	umull	r4, r0, r8, r2
   17884:	mov	r7, r6
   17888:	mla	r0, r8, r3, r0
   1788c:	mla	r0, r9, r2, r0
   17890:	cmp	r0, #0
   17894:	str	r0, [sp, #8]
   17898:	blt	178f0 <__assert_fail@plt+0x6868>
   1789c:	ldr	r3, [sp, #28]
   178a0:	mvn	r0, #0
   178a4:	mvn	r1, #-2147483648	; 0x80000000
   178a8:	mov	r9, r7
   178ac:	mvn	r6, #0
   178b0:	mvn	r7, #-2147483648	; 0x80000000
   178b4:	bl	18dcc <__assert_fail@plt+0x7d44>
   178b8:	ldr	r8, [sp, #8]
   178bc:	ldr	r3, [sp, #24]
   178c0:	ldr	ip, [sp, #28]
   178c4:	subs	r0, r0, r4
   178c8:	mov	r2, #1
   178cc:	sbcs	r0, r1, r8
   178d0:	blt	178e4 <__assert_fail@plt+0x685c>
   178d4:	umull	r6, r0, r4, r3
   178d8:	mov	r2, #0
   178dc:	mla	r0, r4, ip, r0
   178e0:	mla	r7, r8, r3, r0
   178e4:	orr	r3, r2, r9
   178e8:	ldr	r9, [sp, #12]
   178ec:	b	1858c <__assert_fail@plt+0x7504>
   178f0:	ldr	r8, [sp, #8]
   178f4:	mov	r0, #0
   178f8:	mov	r1, #-2147483648	; 0x80000000
   178fc:	mov	r2, r4
   17900:	mov	r9, r7
   17904:	mov	r6, #0
   17908:	mov	r7, #-2147483648	; 0x80000000
   1790c:	mov	r3, r8
   17910:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17914:	ldr	r3, [sp, #24]
   17918:	ldr	ip, [sp, #28]
   1791c:	mov	r2, #1
   17920:	subs	r0, r0, r3
   17924:	sbcs	r0, r1, ip
   17928:	bge	178d4 <__assert_fail@plt+0x684c>
   1792c:	b	178e4 <__assert_fail@plt+0x685c>
   17930:	mov	r0, #0
   17934:	mov	r1, #-2147483648	; 0x80000000
   17938:	mov	r2, r8
   1793c:	mov	r3, r9
   17940:	str	r4, [sp, #8]
   17944:	mov	r6, #0
   17948:	mov	r7, #-2147483648	; 0x80000000
   1794c:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17950:	ldr	r4, [sp, #24]
   17954:	ldr	r3, [sp, #28]
   17958:	mov	r2, #1
   1795c:	subs	r0, r0, r4
   17960:	sbcs	r0, r1, r3
   17964:	blt	17aa0 <__assert_fail@plt+0x6a18>
   17968:	umull	r6, r0, r8, r4
   1796c:	mov	r2, #0
   17970:	mla	r0, r8, r3, r0
   17974:	mla	r7, r9, r4, r0
   17978:	b	17aa0 <__assert_fail@plt+0x6a18>
   1797c:	str	r4, [sp, #4]
   17980:	ldr	r4, [sp, #8]
   17984:	mov	r0, #0
   17988:	mov	r1, #-2147483648	; 0x80000000
   1798c:	mov	r3, r9
   17990:	mov	r2, r4
   17994:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17998:	ldr	r2, [sp, #24]
   1799c:	ldr	r3, [sp, #28]
   179a0:	mov	r7, #1
   179a4:	mov	r6, #0
   179a8:	mov	r8, #-2147483648	; 0x80000000
   179ac:	subs	r0, r0, r2
   179b0:	sbcs	r0, r1, r3
   179b4:	blt	17a08 <__assert_fail@plt+0x6980>
   179b8:	umull	r6, r0, r4, r2
   179bc:	ldr	r7, [sp, #4]
   179c0:	mla	r0, r4, r3, r0
   179c4:	mla	r8, r9, r2, r0
   179c8:	cmp	r8, #0
   179cc:	blt	17a08 <__assert_fail@plt+0x6980>
   179d0:	ldr	r3, [sp, #28]
   179d4:	mvn	r0, #0
   179d8:	mvn	r1, #-2147483648	; 0x80000000
   179dc:	str	r7, [sp, #8]
   179e0:	mvn	r4, #0
   179e4:	mvn	r9, #-2147483648	; 0x80000000
   179e8:	bl	18dcc <__assert_fail@plt+0x7d44>
   179ec:	ldr	r2, [sp, #24]
   179f0:	ldr	r3, [sp, #28]
   179f4:	subs	r0, r0, r6
   179f8:	mov	r7, #1
   179fc:	sbcs	r0, r1, r8
   17a00:	bge	17a40 <__assert_fail@plt+0x69b8>
   17a04:	b	17a58 <__assert_fail@plt+0x69d0>
   17a08:	mov	r0, #0
   17a0c:	mov	r1, #-2147483648	; 0x80000000
   17a10:	mov	r2, r6
   17a14:	mov	r3, r8
   17a18:	str	r7, [sp, #8]
   17a1c:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17a20:	ldr	r2, [sp, #24]
   17a24:	ldr	r3, [sp, #28]
   17a28:	mov	r7, #1
   17a2c:	mov	r4, #0
   17a30:	mov	r9, #-2147483648	; 0x80000000
   17a34:	subs	r0, r0, r2
   17a38:	sbcs	r0, r1, r3
   17a3c:	blt	17ab0 <__assert_fail@plt+0x6a28>
   17a40:	umull	r4, r0, r6, r2
   17a44:	ldr	r7, [sp, #8]
   17a48:	mla	r0, r6, r3, r0
   17a4c:	mla	r9, r8, r2, r0
   17a50:	cmp	r9, #0
   17a54:	blt	17ab0 <__assert_fail@plt+0x6a28>
   17a58:	ldr	r3, [sp, #28]
   17a5c:	mvn	r0, #0
   17a60:	mvn	r1, #-2147483648	; 0x80000000
   17a64:	str	r7, [sp, #8]
   17a68:	mvn	r6, #0
   17a6c:	mvn	r7, #-2147483648	; 0x80000000
   17a70:	bl	18dcc <__assert_fail@plt+0x7d44>
   17a74:	ldr	r3, [sp, #24]
   17a78:	ldr	ip, [sp, #28]
   17a7c:	subs	r0, r0, r4
   17a80:	mov	r2, #1
   17a84:	mov	r8, r4
   17a88:	sbcs	r0, r1, r9
   17a8c:	blt	17aa0 <__assert_fail@plt+0x6a18>
   17a90:	umull	r6, r0, r8, r3
   17a94:	mov	r2, #0
   17a98:	mla	r0, r8, ip, r0
   17a9c:	mla	r7, r9, r3, r0
   17aa0:	ldr	r0, [sp, #8]
   17aa4:	ldr	r9, [sp, #12]
   17aa8:	orr	r3, r2, r0
   17aac:	b	1858c <__assert_fail@plt+0x7504>
   17ab0:	mov	r0, #0
   17ab4:	mov	r1, #-2147483648	; 0x80000000
   17ab8:	mov	r2, r4
   17abc:	mov	r3, r9
   17ac0:	str	r7, [sp, #8]
   17ac4:	mov	r8, r4
   17ac8:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17acc:	ldr	r3, [sp, #24]
   17ad0:	ldr	ip, [sp, #28]
   17ad4:	mov	r2, #1
   17ad8:	mov	r6, #0
   17adc:	mov	r7, #-2147483648	; 0x80000000
   17ae0:	subs	r0, r0, r3
   17ae4:	sbcs	r0, r1, ip
   17ae8:	bge	17a90 <__assert_fail@plt+0x6a08>
   17aec:	b	17aa0 <__assert_fail@plt+0x6a18>
   17af0:	and	r0, r6, r7
   17af4:	cmn	r0, #1
   17af8:	beq	17b34 <__assert_fail@plt+0x6aac>
   17afc:	mov	r0, #0
   17b00:	mov	r1, #-2147483648	; 0x80000000
   17b04:	mov	r2, r6
   17b08:	mov	r3, r7
   17b0c:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17b10:	ldr	r2, [sp, #24]
   17b14:	ldr	r3, [sp, #28]
   17b18:	mov	r4, #1
   17b1c:	mov	r9, #-2147483648	; 0x80000000
   17b20:	subs	r0, r0, r2
   17b24:	sbcs	r0, r1, r3
   17b28:	mov	r0, #0
   17b2c:	str	r0, [sp, #8]
   17b30:	blt	17e44 <__assert_fail@plt+0x6dbc>
   17b34:	umull	r1, r0, r6, r2
   17b38:	mov	r4, #0
   17b3c:	mla	r0, r6, r3, r0
   17b40:	str	r1, [sp, #8]
   17b44:	mla	r9, r7, r2, r0
   17b48:	cmp	r9, #0
   17b4c:	blt	17e44 <__assert_fail@plt+0x6dbc>
   17b50:	ldr	r3, [sp, #28]
   17b54:	mvn	r0, #0
   17b58:	mvn	r1, #-2147483648	; 0x80000000
   17b5c:	str	r4, [sp, #4]
   17b60:	mvn	r8, #0
   17b64:	mvn	r4, #-2147483648	; 0x80000000
   17b68:	bl	18dcc <__assert_fail@plt+0x7d44>
   17b6c:	ldr	r6, [sp, #8]
   17b70:	ldr	r2, [sp, #24]
   17b74:	ldr	r3, [sp, #28]
   17b78:	mov	r7, #1
   17b7c:	subs	r0, r0, r6
   17b80:	sbcs	r0, r1, r9
   17b84:	bge	17e80 <__assert_fail@plt+0x6df8>
   17b88:	b	17e98 <__assert_fail@plt+0x6e10>
   17b8c:	and	r0, r6, r7
   17b90:	cmn	r0, #1
   17b94:	beq	17bbc <__assert_fail@plt+0x6b34>
   17b98:	mov	r0, #0
   17b9c:	mov	r1, #-2147483648	; 0x80000000
   17ba0:	mov	r2, r6
   17ba4:	mov	r3, r7
   17ba8:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17bac:	ldr	r3, [sp, #28]
   17bb0:	subs	r0, r0, #1024	; 0x400
   17bb4:	sbcs	r0, r1, #0
   17bb8:	blt	17e14 <__assert_fail@plt+0x6d8c>
   17bbc:	lsl	r0, r7, #10
   17bc0:	orr	r7, r0, r6, lsr #22
   17bc4:	lsl	r6, r6, #10
   17bc8:	b	1858c <__assert_fail@plt+0x7504>
   17bcc:	and	r0, r6, r7
   17bd0:	cmn	r0, #1
   17bd4:	beq	17c10 <__assert_fail@plt+0x6b88>
   17bd8:	mov	r0, #0
   17bdc:	mov	r1, #-2147483648	; 0x80000000
   17be0:	mov	r2, r6
   17be4:	mov	r3, r7
   17be8:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17bec:	ldr	r2, [sp, #24]
   17bf0:	ldr	r3, [sp, #28]
   17bf4:	mov	r4, #1
   17bf8:	mov	r9, #-2147483648	; 0x80000000
   17bfc:	subs	r0, r0, r2
   17c00:	sbcs	r0, r1, r3
   17c04:	mov	r0, #0
   17c08:	str	r0, [sp, #8]
   17c0c:	blt	1815c <__assert_fail@plt+0x70d4>
   17c10:	umull	r1, r0, r6, r2
   17c14:	mov	r4, #0
   17c18:	mla	r0, r6, r3, r0
   17c1c:	str	r1, [sp, #8]
   17c20:	mla	r9, r7, r2, r0
   17c24:	cmp	r9, #0
   17c28:	blt	1815c <__assert_fail@plt+0x70d4>
   17c2c:	ldr	r3, [sp, #28]
   17c30:	mvn	r0, #0
   17c34:	mvn	r1, #-2147483648	; 0x80000000
   17c38:	str	r4, [sp, #4]
   17c3c:	mvn	r8, #0
   17c40:	mvn	r4, #-2147483648	; 0x80000000
   17c44:	bl	18dcc <__assert_fail@plt+0x7d44>
   17c48:	ldr	r6, [sp, #8]
   17c4c:	ldr	r2, [sp, #24]
   17c50:	ldr	r3, [sp, #28]
   17c54:	mov	r7, #1
   17c58:	subs	r0, r0, r6
   17c5c:	sbcs	r0, r1, r9
   17c60:	bge	18198 <__assert_fail@plt+0x7110>
   17c64:	b	181b0 <__assert_fail@plt+0x7128>
   17c68:	and	r0, r6, r7
   17c6c:	cmn	r0, #1
   17c70:	beq	17cac <__assert_fail@plt+0x6c24>
   17c74:	mov	r0, #0
   17c78:	mov	r1, #-2147483648	; 0x80000000
   17c7c:	mov	r2, r6
   17c80:	mov	r3, r7
   17c84:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17c88:	ldr	r2, [sp, #24]
   17c8c:	ldr	r3, [sp, #28]
   17c90:	mov	r4, #1
   17c94:	mov	r8, #-2147483648	; 0x80000000
   17c98:	subs	r0, r0, r2
   17c9c:	sbcs	r0, r1, r3
   17ca0:	mov	r0, #0
   17ca4:	str	r0, [sp, #8]
   17ca8:	blt	183d8 <__assert_fail@plt+0x7350>
   17cac:	umull	r1, r0, r6, r2
   17cb0:	mov	r4, #0
   17cb4:	mla	r0, r6, r3, r0
   17cb8:	str	r1, [sp, #8]
   17cbc:	mla	r8, r7, r2, r0
   17cc0:	cmp	r8, #0
   17cc4:	blt	183d8 <__assert_fail@plt+0x7350>
   17cc8:	ldr	r3, [sp, #28]
   17ccc:	mvn	r0, #0
   17cd0:	mvn	r1, #-2147483648	; 0x80000000
   17cd4:	str	r4, [sp, #4]
   17cd8:	mvn	r9, #0
   17cdc:	mvn	r4, #-2147483648	; 0x80000000
   17ce0:	bl	18dcc <__assert_fail@plt+0x7d44>
   17ce4:	ldr	r6, [sp, #8]
   17ce8:	ldr	r2, [sp, #24]
   17cec:	ldr	r3, [sp, #28]
   17cf0:	mov	r7, #1
   17cf4:	subs	r0, r0, r6
   17cf8:	sbcs	r0, r1, r8
   17cfc:	bge	18414 <__assert_fail@plt+0x738c>
   17d00:	b	1842c <__assert_fail@plt+0x73a4>
   17d04:	and	r0, r6, r7
   17d08:	cmn	r0, #1
   17d0c:	beq	17d48 <__assert_fail@plt+0x6cc0>
   17d10:	mov	r0, #0
   17d14:	mov	r1, #-2147483648	; 0x80000000
   17d18:	mov	r2, r6
   17d1c:	mov	r3, r7
   17d20:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17d24:	ldr	r2, [sp, #24]
   17d28:	ldr	r3, [sp, #28]
   17d2c:	mov	r4, #1
   17d30:	mov	r9, #-2147483648	; 0x80000000
   17d34:	subs	r0, r0, r2
   17d38:	sbcs	r0, r1, r3
   17d3c:	mov	r0, #0
   17d40:	str	r0, [sp, #8]
   17d44:	blt	185f4 <__assert_fail@plt+0x756c>
   17d48:	umull	r1, r0, r6, r2
   17d4c:	mov	r4, #0
   17d50:	mla	r0, r6, r3, r0
   17d54:	str	r1, [sp, #8]
   17d58:	mla	r9, r7, r2, r0
   17d5c:	cmp	r9, #0
   17d60:	blt	185f4 <__assert_fail@plt+0x756c>
   17d64:	ldr	r3, [sp, #28]
   17d68:	mvn	r0, #0
   17d6c:	mvn	r1, #-2147483648	; 0x80000000
   17d70:	str	r4, [sp]
   17d74:	mvn	r8, #-2147483648	; 0x80000000
   17d78:	str	r0, [sp, #4]
   17d7c:	mvn	r0, #0
   17d80:	bl	18dcc <__assert_fail@plt+0x7d44>
   17d84:	ldr	r6, [sp, #8]
   17d88:	ldr	r2, [sp, #24]
   17d8c:	ldr	r3, [sp, #28]
   17d90:	mov	r7, #1
   17d94:	subs	r0, r0, r6
   17d98:	sbcs	r0, r1, r9
   17d9c:	bge	18634 <__assert_fail@plt+0x75ac>
   17da0:	b	18650 <__assert_fail@plt+0x75c8>
   17da4:	and	r0, r6, r7
   17da8:	cmn	r0, #1
   17dac:	beq	17dd4 <__assert_fail@plt+0x6d4c>
   17db0:	mov	r0, #0
   17db4:	mov	r1, #-2147483648	; 0x80000000
   17db8:	mov	r2, r6
   17dbc:	mov	r3, r7
   17dc0:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17dc4:	ldr	r3, [sp, #28]
   17dc8:	subs	r0, r0, #512	; 0x200
   17dcc:	sbcs	r0, r1, #0
   17dd0:	blt	17e14 <__assert_fail@plt+0x6d8c>
   17dd4:	lsl	r0, r7, #9
   17dd8:	orr	r7, r0, r6, lsr #23
   17ddc:	lsl	r6, r6, #9
   17de0:	b	1858c <__assert_fail@plt+0x7504>
   17de4:	and	r0, r6, r7
   17de8:	cmn	r0, #1
   17dec:	beq	17e34 <__assert_fail@plt+0x6dac>
   17df0:	mov	r0, #0
   17df4:	mov	r1, #-2147483648	; 0x80000000
   17df8:	mov	r2, r6
   17dfc:	mov	r3, r7
   17e00:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17e04:	ldr	r3, [sp, #28]
   17e08:	subs	r0, r0, #2
   17e0c:	sbcs	r0, r1, #0
   17e10:	bge	17e34 <__assert_fail@plt+0x6dac>
   17e14:	mvn	r0, #-2147483648	; 0x80000000
   17e18:	cmp	r7, #0
   17e1c:	mvn	r6, #0
   17e20:	mov	r3, #1
   17e24:	movlt	r0, #-2147483648	; 0x80000000
   17e28:	movwlt	r6, #0
   17e2c:	mov	r7, r0
   17e30:	b	1858c <__assert_fail@plt+0x7504>
   17e34:	lsl	r0, r7, #1
   17e38:	orr	r7, r0, r6, lsr #31
   17e3c:	lsl	r6, r6, #1
   17e40:	b	1858c <__assert_fail@plt+0x7504>
   17e44:	ldr	r6, [sp, #8]
   17e48:	mov	r0, #0
   17e4c:	mov	r1, #-2147483648	; 0x80000000
   17e50:	mov	r3, r9
   17e54:	str	r4, [sp, #4]
   17e58:	mov	r2, r6
   17e5c:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17e60:	ldr	r2, [sp, #24]
   17e64:	ldr	r3, [sp, #28]
   17e68:	mov	r7, #1
   17e6c:	mov	r8, #0
   17e70:	mov	r4, #-2147483648	; 0x80000000
   17e74:	subs	r0, r0, r2
   17e78:	sbcs	r0, r1, r3
   17e7c:	blt	17ed0 <__assert_fail@plt+0x6e48>
   17e80:	umull	r8, r0, r6, r2
   17e84:	ldr	r7, [sp, #4]
   17e88:	mla	r0, r6, r3, r0
   17e8c:	mla	r4, r9, r2, r0
   17e90:	cmp	r4, #0
   17e94:	blt	17ed0 <__assert_fail@plt+0x6e48>
   17e98:	ldr	r3, [sp, #28]
   17e9c:	mvn	r0, #0
   17ea0:	mvn	r1, #-2147483648	; 0x80000000
   17ea4:	str	r7, [sp, #8]
   17ea8:	mvn	r7, #0
   17eac:	mvn	r9, #-2147483648	; 0x80000000
   17eb0:	bl	18dcc <__assert_fail@plt+0x7d44>
   17eb4:	ldr	r2, [sp, #24]
   17eb8:	ldr	r3, [sp, #28]
   17ebc:	subs	r0, r0, r8
   17ec0:	mov	r6, #1
   17ec4:	sbcs	r0, r1, r4
   17ec8:	bge	17f08 <__assert_fail@plt+0x6e80>
   17ecc:	b	17f20 <__assert_fail@plt+0x6e98>
   17ed0:	mov	r0, #0
   17ed4:	mov	r1, #-2147483648	; 0x80000000
   17ed8:	mov	r2, r8
   17edc:	mov	r3, r4
   17ee0:	str	r7, [sp, #8]
   17ee4:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17ee8:	ldr	r2, [sp, #24]
   17eec:	ldr	r3, [sp, #28]
   17ef0:	mov	r6, #1
   17ef4:	mov	r7, #0
   17ef8:	mov	r9, #-2147483648	; 0x80000000
   17efc:	subs	r0, r0, r2
   17f00:	sbcs	r0, r1, r3
   17f04:	blt	17f60 <__assert_fail@plt+0x6ed8>
   17f08:	umull	r7, r0, r8, r2
   17f0c:	ldr	r6, [sp, #8]
   17f10:	mla	r0, r8, r3, r0
   17f14:	mla	r9, r4, r2, r0
   17f18:	cmp	r9, #0
   17f1c:	blt	17f60 <__assert_fail@plt+0x6ed8>
   17f20:	ldr	r3, [sp, #28]
   17f24:	mvn	r0, #0
   17f28:	mvn	r1, #-2147483648	; 0x80000000
   17f2c:	str	r6, [sp, #8]
   17f30:	mvn	r8, #0
   17f34:	mvn	r4, #-2147483648	; 0x80000000
   17f38:	bl	18dcc <__assert_fail@plt+0x7d44>
   17f3c:	ldr	r2, [sp, #24]
   17f40:	ldr	r3, [sp, #28]
   17f44:	subs	r0, r0, r7
   17f48:	sbcs	r0, r1, r9
   17f4c:	bge	17fa4 <__assert_fail@plt+0x6f1c>
   17f50:	mov	r0, #1
   17f54:	mov	r6, #0
   17f58:	str	r0, [sp, #8]
   17f5c:	b	17fbc <__assert_fail@plt+0x6f34>
   17f60:	mov	r0, #0
   17f64:	mov	r1, #-2147483648	; 0x80000000
   17f68:	mov	r2, r7
   17f6c:	mov	r3, r9
   17f70:	str	r6, [sp, #8]
   17f74:	bl	18cf8 <__assert_fail@plt+0x7c70>
   17f78:	ldr	r2, [sp, #24]
   17f7c:	ldr	r3, [sp, #28]
   17f80:	subs	r0, r0, r2
   17f84:	sbcs	r0, r1, r3
   17f88:	bge	17fa4 <__assert_fail@plt+0x6f1c>
   17f8c:	mov	r0, #1
   17f90:	mov	r8, #0
   17f94:	mov	r4, #-2147483648	; 0x80000000
   17f98:	mov	r6, #0
   17f9c:	str	r0, [sp, #8]
   17fa0:	b	17ff4 <__assert_fail@plt+0x6f6c>
   17fa4:	umull	r8, r0, r7, r2
   17fa8:	mov	r6, #0
   17fac:	mla	r0, r7, r3, r0
   17fb0:	mla	r4, r9, r2, r0
   17fb4:	cmp	r4, #0
   17fb8:	blt	17ff4 <__assert_fail@plt+0x6f6c>
   17fbc:	ldr	r3, [sp, #28]
   17fc0:	mvn	r0, #0
   17fc4:	mvn	r1, #-2147483648	; 0x80000000
   17fc8:	mvn	r9, #0
   17fcc:	mvn	r7, #-2147483648	; 0x80000000
   17fd0:	bl	18dcc <__assert_fail@plt+0x7d44>
   17fd4:	ldr	r2, [sp, #24]
   17fd8:	ldr	r3, [sp, #28]
   17fdc:	subs	r0, r0, r8
   17fe0:	sbcs	r0, r1, r4
   17fe4:	bge	18030 <__assert_fail@plt+0x6fa8>
   17fe8:	mov	r0, #1
   17fec:	str	r0, [sp, #8]
   17ff0:	b	18044 <__assert_fail@plt+0x6fbc>
   17ff4:	mov	r0, #0
   17ff8:	mov	r1, #-2147483648	; 0x80000000
   17ffc:	mov	r2, r8
   18000:	mov	r3, r4
   18004:	bl	18cf8 <__assert_fail@plt+0x7c70>
   18008:	ldr	r2, [sp, #24]
   1800c:	ldr	r3, [sp, #28]
   18010:	subs	r0, r0, r2
   18014:	sbcs	r0, r1, r3
   18018:	bge	18030 <__assert_fail@plt+0x6fa8>
   1801c:	mov	r0, #1
   18020:	mov	r9, #0
   18024:	mov	r7, #-2147483648	; 0x80000000
   18028:	str	r0, [sp, #8]
   1802c:	b	18080 <__assert_fail@plt+0x6ff8>
   18030:	umull	r9, r0, r8, r2
   18034:	mla	r0, r8, r3, r0
   18038:	mla	r7, r4, r2, r0
   1803c:	cmp	r7, #0
   18040:	blt	18080 <__assert_fail@plt+0x6ff8>
   18044:	ldr	r3, [sp, #28]
   18048:	mvn	r0, #0
   1804c:	mvn	r1, #-2147483648	; 0x80000000
   18050:	mvn	r8, #0
   18054:	mvn	r4, #-2147483648	; 0x80000000
   18058:	bl	18dcc <__assert_fail@plt+0x7d44>
   1805c:	ldr	r2, [sp, #24]
   18060:	ldr	r3, [sp, #28]
   18064:	subs	r0, r0, r9
   18068:	sbcs	r0, r1, r7
   1806c:	bge	180c0 <__assert_fail@plt+0x7038>
   18070:	ldr	r9, [sp, #12]
   18074:	mov	r0, #1
   18078:	str	r0, [sp, #8]
   1807c:	b	180d8 <__assert_fail@plt+0x7050>
   18080:	mov	r0, #0
   18084:	mov	r1, #-2147483648	; 0x80000000
   18088:	mov	r2, r9
   1808c:	mov	r3, r7
   18090:	bl	18cf8 <__assert_fail@plt+0x7c70>
   18094:	ldr	r2, [sp, #24]
   18098:	ldr	r3, [sp, #28]
   1809c:	subs	r0, r0, r2
   180a0:	sbcs	r0, r1, r3
   180a4:	bge	180c0 <__assert_fail@plt+0x7038>
   180a8:	ldr	r9, [sp, #12]
   180ac:	mov	r0, #1
   180b0:	mov	r8, #0
   180b4:	mov	r4, #-2147483648	; 0x80000000
   180b8:	str	r0, [sp, #8]
   180bc:	b	18128 <__assert_fail@plt+0x70a0>
   180c0:	umull	r8, r0, r9, r2
   180c4:	mla	r0, r9, r3, r0
   180c8:	ldr	r9, [sp, #12]
   180cc:	mla	r4, r7, r2, r0
   180d0:	cmp	r4, #0
   180d4:	blt	18128 <__assert_fail@plt+0x70a0>
   180d8:	ldr	r3, [sp, #28]
   180dc:	mvn	r0, #0
   180e0:	mvn	r1, #-2147483648	; 0x80000000
   180e4:	mvn	r6, #0
   180e8:	bl	18dcc <__assert_fail@plt+0x7d44>
   180ec:	ldr	r7, [sp, #24]
   180f0:	ldr	r3, [sp, #28]
   180f4:	subs	r0, r0, r8
   180f8:	mov	r2, #1
   180fc:	sbcs	r0, r1, r4
   18100:	mvn	r0, #-2147483648	; 0x80000000
   18104:	blt	18118 <__assert_fail@plt+0x7090>
   18108:	umull	r6, r0, r8, r7
   1810c:	mov	r2, #0
   18110:	mla	r0, r8, r3, r0
   18114:	mla	r0, r4, r7, r0
   18118:	ldr	r1, [sp, #8]
   1811c:	mov	r7, r0
   18120:	orr	r3, r2, r1
   18124:	b	1858c <__assert_fail@plt+0x7504>
   18128:	mov	r0, #0
   1812c:	mov	r1, #-2147483648	; 0x80000000
   18130:	mov	r2, r8
   18134:	mov	r3, r4
   18138:	bl	18cf8 <__assert_fail@plt+0x7c70>
   1813c:	ldr	r7, [sp, #24]
   18140:	ldr	r3, [sp, #28]
   18144:	mov	r2, #1
   18148:	subs	r0, r0, r7
   1814c:	sbcs	r0, r1, r3
   18150:	mov	r0, #-2147483648	; 0x80000000
   18154:	bge	18108 <__assert_fail@plt+0x7080>
   18158:	b	18118 <__assert_fail@plt+0x7090>
   1815c:	ldr	r6, [sp, #8]
   18160:	mov	r0, #0
   18164:	mov	r1, #-2147483648	; 0x80000000
   18168:	mov	r3, r9
   1816c:	str	r4, [sp, #4]
   18170:	mov	r2, r6
   18174:	bl	18cf8 <__assert_fail@plt+0x7c70>
   18178:	ldr	r2, [sp, #24]
   1817c:	ldr	r3, [sp, #28]
   18180:	mov	r7, #1
   18184:	mov	r8, #0
   18188:	mov	r4, #-2147483648	; 0x80000000
   1818c:	subs	r0, r0, r2
   18190:	sbcs	r0, r1, r3
   18194:	blt	181ec <__assert_fail@plt+0x7164>
   18198:	umull	r8, r0, r6, r2
   1819c:	ldr	r7, [sp, #4]
   181a0:	mla	r0, r6, r3, r0
   181a4:	mla	r4, r9, r2, r0
   181a8:	cmp	r4, #0
   181ac:	blt	181ec <__assert_fail@plt+0x7164>
   181b0:	ldr	r3, [sp, #28]
   181b4:	mvn	r0, #0
   181b8:	mvn	r1, #-2147483648	; 0x80000000
   181bc:	str	r7, [sp, #4]
   181c0:	mvn	r7, #0
   181c4:	mvn	r9, #-2147483648	; 0x80000000
   181c8:	bl	18dcc <__assert_fail@plt+0x7d44>
   181cc:	ldr	r2, [sp, #24]
   181d0:	ldr	r3, [sp, #28]
   181d4:	subs	r0, r0, r8
   181d8:	mov	r6, #1
   181dc:	sbcs	r0, r1, r4
   181e0:	str	r6, [sp, #8]
   181e4:	bge	18228 <__assert_fail@plt+0x71a0>
   181e8:	b	18244 <__assert_fail@plt+0x71bc>
   181ec:	mov	r0, #0
   181f0:	mov	r1, #-2147483648	; 0x80000000
   181f4:	mov	r2, r8
   181f8:	mov	r3, r4
   181fc:	str	r7, [sp, #4]
   18200:	bl	18cf8 <__assert_fail@plt+0x7c70>
   18204:	ldr	r2, [sp, #24]
   18208:	ldr	r3, [sp, #28]
   1820c:	mov	r7, #1
   18210:	mov	r9, #-2147483648	; 0x80000000
   18214:	str	r7, [sp, #8]
   18218:	mov	r7, #0
   1821c:	subs	r0, r0, r2
   18220:	sbcs	r0, r1, r3
   18224:	blt	1827c <__assert_fail@plt+0x71f4>
   18228:	umull	r7, r0, r8, r2
   1822c:	mla	r0, r8, r3, r0
   18230:	mla	r9, r4, r2, r0
   18234:	ldr	r0, [sp, #4]
   18238:	cmp	r9, #0
   1823c:	str	r0, [sp, #8]
   18240:	blt	1827c <__assert_fail@plt+0x71f4>
   18244:	ldr	r3, [sp, #28]
   18248:	mvn	r0, #0
   1824c:	mvn	r1, #-2147483648	; 0x80000000
   18250:	mvn	r4, #0
   18254:	mvn	r8, #-2147483648	; 0x80000000
   18258:	bl	18dcc <__assert_fail@plt+0x7d44>
   1825c:	ldr	r2, [sp, #24]
   18260:	ldr	r3, [sp, #28]
   18264:	subs	r0, r0, r7
   18268:	sbcs	r0, r1, r9
   1826c:	bge	182b8 <__assert_fail@plt+0x7230>
   18270:	mov	r0, #1
   18274:	str	r0, [sp, #8]
   18278:	b	182cc <__assert_fail@plt+0x7244>
   1827c:	mov	r0, #0
   18280:	mov	r1, #-2147483648	; 0x80000000
   18284:	mov	r2, r7
   18288:	mov	r3, r9
   1828c:	bl	18cf8 <__assert_fail@plt+0x7c70>
   18290:	ldr	r2, [sp, #24]
   18294:	ldr	r3, [sp, #28]
   18298:	subs	r0, r0, r2
   1829c:	sbcs	r0, r1, r3
   182a0:	bge	182b8 <__assert_fail@plt+0x7230>
   182a4:	mov	r0, #1
   182a8:	mov	r4, #0
   182ac:	mov	r8, #-2147483648	; 0x80000000
   182b0:	str	r0, [sp, #8]
   182b4:	b	18300 <__assert_fail@plt+0x7278>
   182b8:	umull	r4, r0, r7, r2
   182bc:	mla	r0, r7, r3, r0
   182c0:	mla	r8, r9, r2, r0
   182c4:	cmp	r8, #0
   182c8:	blt	18300 <__assert_fail@plt+0x7278>
   182cc:	ldr	r3, [sp, #28]
   182d0:	mvn	r0, #0
   182d4:	mvn	r1, #-2147483648	; 0x80000000
   182d8:	mvn	r6, #0
   182dc:	mvn	r9, #-2147483648	; 0x80000000
   182e0:	bl	18dcc <__assert_fail@plt+0x7d44>
   182e4:	ldr	r2, [sp, #24]
   182e8:	ldr	r3, [sp, #28]
   182ec:	subs	r0, r0, r4
   182f0:	sbcs	r0, r1, r8
   182f4:	bge	18338 <__assert_fail@plt+0x72b0>
   182f8:	mov	r8, #1
   182fc:	b	18350 <__assert_fail@plt+0x72c8>
   18300:	mov	r0, #0
   18304:	mov	r1, #-2147483648	; 0x80000000
   18308:	mov	r2, r4
   1830c:	mov	r3, r8
   18310:	bl	18cf8 <__assert_fail@plt+0x7c70>
   18314:	ldr	r2, [sp, #24]
   18318:	ldr	r3, [sp, #28]
   1831c:	subs	r0, r0, r2
   18320:	sbcs	r0, r1, r3
   18324:	bge	18338 <__assert_fail@plt+0x72b0>
   18328:	mov	r8, #1
   1832c:	mov	r6, #0
   18330:	mov	r9, #-2147483648	; 0x80000000
   18334:	b	183a0 <__assert_fail@plt+0x7318>
   18338:	umull	r6, r0, r4, r2
   1833c:	mla	r0, r4, r3, r0
   18340:	mla	r9, r8, r2, r0
   18344:	ldr	r8, [sp, #8]
   18348:	cmp	r9, #0
   1834c:	blt	183a0 <__assert_fail@plt+0x7318>
   18350:	ldr	r3, [sp, #28]
   18354:	mvn	r0, #0
   18358:	mvn	r1, #-2147483648	; 0x80000000
   1835c:	mvn	r4, #0
   18360:	mvn	r7, #-2147483648	; 0x80000000
   18364:	bl	18dcc <__assert_fail@plt+0x7d44>
   18368:	ldr	r3, [sp, #24]
   1836c:	ldr	ip, [sp, #28]
   18370:	subs	r0, r0, r6
   18374:	mov	r2, #1
   18378:	sbcs	r0, r1, r9
   1837c:	blt	18390 <__assert_fail@plt+0x7308>
   18380:	umull	r4, r0, r6, r3
   18384:	mov	r2, #0
   18388:	mla	r0, r6, ip, r0
   1838c:	mla	r7, r9, r3, r0
   18390:	ldr	r9, [sp, #12]
   18394:	orr	r3, r2, r8
   18398:	mov	r6, r4
   1839c:	b	1858c <__assert_fail@plt+0x7504>
   183a0:	mov	r0, #0
   183a4:	mov	r1, #-2147483648	; 0x80000000
   183a8:	mov	r2, r6
   183ac:	mov	r3, r9
   183b0:	bl	18cf8 <__assert_fail@plt+0x7c70>
   183b4:	ldr	r3, [sp, #24]
   183b8:	ldr	ip, [sp, #28]
   183bc:	mov	r2, #1
   183c0:	mov	r4, #0
   183c4:	mov	r7, #-2147483648	; 0x80000000
   183c8:	subs	r0, r0, r3
   183cc:	sbcs	r0, r1, ip
   183d0:	bge	18380 <__assert_fail@plt+0x72f8>
   183d4:	b	18390 <__assert_fail@plt+0x7308>
   183d8:	ldr	r6, [sp, #8]
   183dc:	mov	r0, #0
   183e0:	mov	r1, #-2147483648	; 0x80000000
   183e4:	mov	r3, r8
   183e8:	str	r4, [sp, #4]
   183ec:	mov	r2, r6
   183f0:	bl	18cf8 <__assert_fail@plt+0x7c70>
   183f4:	ldr	r2, [sp, #24]
   183f8:	ldr	r3, [sp, #28]
   183fc:	mov	r7, #1
   18400:	mov	r9, #0
   18404:	mov	r4, #-2147483648	; 0x80000000
   18408:	subs	r0, r0, r2
   1840c:	sbcs	r0, r1, r3
   18410:	blt	18468 <__assert_fail@plt+0x73e0>
   18414:	umull	r9, r0, r6, r2
   18418:	ldr	r7, [sp, #4]
   1841c:	mla	r0, r6, r3, r0
   18420:	mla	r4, r8, r2, r0
   18424:	cmp	r4, #0
   18428:	blt	18468 <__assert_fail@plt+0x73e0>
   1842c:	ldr	r3, [sp, #28]
   18430:	mvn	r0, #0
   18434:	mvn	r1, #-2147483648	; 0x80000000
   18438:	str	r7, [sp, #4]
   1843c:	mvn	r8, #0
   18440:	mvn	r7, #-2147483648	; 0x80000000
   18444:	bl	18dcc <__assert_fail@plt+0x7d44>
   18448:	ldr	r2, [sp, #24]
   1844c:	ldr	r3, [sp, #28]
   18450:	subs	r0, r0, r9
   18454:	mov	r6, #1
   18458:	sbcs	r0, r1, r4
   1845c:	str	r6, [sp, #8]
   18460:	bge	184a4 <__assert_fail@plt+0x741c>
   18464:	b	184c0 <__assert_fail@plt+0x7438>
   18468:	mov	r0, #0
   1846c:	mov	r1, #-2147483648	; 0x80000000
   18470:	mov	r2, r9
   18474:	mov	r3, r4
   18478:	str	r7, [sp, #4]
   1847c:	bl	18cf8 <__assert_fail@plt+0x7c70>
   18480:	ldr	r2, [sp, #24]
   18484:	ldr	r3, [sp, #28]
   18488:	mov	r7, #1
   1848c:	mov	r8, #0
   18490:	str	r7, [sp, #8]
   18494:	mov	r7, #-2147483648	; 0x80000000
   18498:	subs	r0, r0, r2
   1849c:	sbcs	r0, r1, r3
   184a0:	blt	184f4 <__assert_fail@plt+0x746c>
   184a4:	umull	r8, r0, r9, r2
   184a8:	mla	r0, r9, r3, r0
   184ac:	mla	r7, r4, r2, r0
   184b0:	ldr	r0, [sp, #4]
   184b4:	cmp	r7, #0
   184b8:	str	r0, [sp, #8]
   184bc:	blt	184f4 <__assert_fail@plt+0x746c>
   184c0:	ldr	r3, [sp, #28]
   184c4:	mvn	r0, #0
   184c8:	mvn	r1, #-2147483648	; 0x80000000
   184cc:	mvn	r4, #0
   184d0:	mvn	r9, #-2147483648	; 0x80000000
   184d4:	bl	18dcc <__assert_fail@plt+0x7d44>
   184d8:	ldr	r2, [sp, #24]
   184dc:	ldr	r3, [sp, #28]
   184e0:	subs	r0, r0, r8
   184e4:	sbcs	r0, r1, r7
   184e8:	bge	1852c <__assert_fail@plt+0x74a4>
   184ec:	mov	r8, #1
   184f0:	b	18544 <__assert_fail@plt+0x74bc>
   184f4:	mov	r0, #0
   184f8:	mov	r1, #-2147483648	; 0x80000000
   184fc:	mov	r2, r8
   18500:	mov	r3, r7
   18504:	bl	18cf8 <__assert_fail@plt+0x7c70>
   18508:	ldr	r2, [sp, #24]
   1850c:	ldr	r3, [sp, #28]
   18510:	subs	r0, r0, r2
   18514:	sbcs	r0, r1, r3
   18518:	bge	1852c <__assert_fail@plt+0x74a4>
   1851c:	mov	r8, #1
   18520:	mov	r4, #0
   18524:	mov	r9, #-2147483648	; 0x80000000
   18528:	b	185bc <__assert_fail@plt+0x7534>
   1852c:	umull	r4, r0, r8, r2
   18530:	mla	r0, r8, r3, r0
   18534:	ldr	r8, [sp, #8]
   18538:	mla	r9, r7, r2, r0
   1853c:	cmp	r9, #0
   18540:	blt	185bc <__assert_fail@plt+0x7534>
   18544:	ldr	r3, [sp, #28]
   18548:	mvn	r0, #0
   1854c:	mvn	r1, #-2147483648	; 0x80000000
   18550:	mvn	r6, #0
   18554:	mvn	r7, #-2147483648	; 0x80000000
   18558:	bl	18dcc <__assert_fail@plt+0x7d44>
   1855c:	ldr	r3, [sp, #24]
   18560:	ldr	ip, [sp, #28]
   18564:	subs	r0, r0, r4
   18568:	mov	r2, #1
   1856c:	sbcs	r0, r1, r9
   18570:	blt	18584 <__assert_fail@plt+0x74fc>
   18574:	umull	r6, r0, r4, r3
   18578:	mov	r2, #0
   1857c:	mla	r0, r4, ip, r0
   18580:	mla	r7, r9, r3, r0
   18584:	ldr	r9, [sp, #12]
   18588:	orr	r3, r2, r8
   1858c:	ldr	r1, [sp, #20]
   18590:	ldr	r2, [sp, #16]
   18594:	orr	r5, r3, r5
   18598:	add	r0, r1, r2
   1859c:	str	r0, [sl]
   185a0:	ldrb	r0, [r1, r2]
   185a4:	cmp	r0, #0
   185a8:	orrne	r5, r5, #2
   185ac:	strd	r6, [r9]
   185b0:	mov	r0, r5
   185b4:	sub	sp, fp, #28
   185b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185bc:	mov	r0, #0
   185c0:	mov	r1, #-2147483648	; 0x80000000
   185c4:	mov	r2, r4
   185c8:	mov	r3, r9
   185cc:	bl	18cf8 <__assert_fail@plt+0x7c70>
   185d0:	ldr	r3, [sp, #24]
   185d4:	ldr	ip, [sp, #28]
   185d8:	mov	r2, #1
   185dc:	mov	r6, #0
   185e0:	mov	r7, #-2147483648	; 0x80000000
   185e4:	subs	r0, r0, r3
   185e8:	sbcs	r0, r1, ip
   185ec:	bge	18574 <__assert_fail@plt+0x74ec>
   185f0:	b	18584 <__assert_fail@plt+0x74fc>
   185f4:	ldr	r6, [sp, #8]
   185f8:	mov	r0, #0
   185fc:	mov	r1, #-2147483648	; 0x80000000
   18600:	mov	r3, r9
   18604:	str	r4, [sp]
   18608:	mov	r2, r6
   1860c:	bl	18cf8 <__assert_fail@plt+0x7c70>
   18610:	ldr	r2, [sp, #24]
   18614:	ldr	r3, [sp, #28]
   18618:	mov	r7, #1
   1861c:	mov	r8, #-2147483648	; 0x80000000
   18620:	subs	r0, r0, r2
   18624:	sbcs	r0, r1, r3
   18628:	mov	r0, #0
   1862c:	str	r0, [sp, #4]
   18630:	blt	18690 <__assert_fail@plt+0x7608>
   18634:	umull	r1, r0, r6, r2
   18638:	ldr	r7, [sp]
   1863c:	mla	r0, r6, r3, r0
   18640:	str	r1, [sp, #4]
   18644:	mla	r8, r9, r2, r0
   18648:	cmp	r8, #0
   1864c:	blt	18690 <__assert_fail@plt+0x7608>
   18650:	ldr	r3, [sp, #28]
   18654:	mvn	r0, #0
   18658:	mvn	r1, #-2147483648	; 0x80000000
   1865c:	str	r7, [sp]
   18660:	mvn	r7, #0
   18664:	mvn	r4, #-2147483648	; 0x80000000
   18668:	bl	18dcc <__assert_fail@plt+0x7d44>
   1866c:	mov	r6, #1
   18670:	ldr	r2, [sp, #24]
   18674:	ldr	r3, [sp, #28]
   18678:	str	r6, [sp, #8]
   1867c:	ldr	r6, [sp, #4]
   18680:	subs	r0, r0, r6
   18684:	sbcs	r0, r1, r8
   18688:	bge	186d0 <__assert_fail@plt+0x7648>
   1868c:	b	186ec <__assert_fail@plt+0x7664>
   18690:	ldr	r6, [sp, #4]
   18694:	mov	r0, #0
   18698:	mov	r1, #-2147483648	; 0x80000000
   1869c:	mov	r3, r8
   186a0:	str	r7, [sp]
   186a4:	mov	r2, r6
   186a8:	bl	18cf8 <__assert_fail@plt+0x7c70>
   186ac:	ldr	r2, [sp, #24]
   186b0:	ldr	r3, [sp, #28]
   186b4:	mov	r7, #1
   186b8:	mov	r4, #-2147483648	; 0x80000000
   186bc:	str	r7, [sp, #8]
   186c0:	mov	r7, #0
   186c4:	subs	r0, r0, r2
   186c8:	sbcs	r0, r1, r3
   186cc:	blt	18724 <__assert_fail@plt+0x769c>
   186d0:	umull	r7, r0, r6, r2
   186d4:	mla	r0, r6, r3, r0
   186d8:	mla	r4, r8, r2, r0
   186dc:	ldr	r0, [sp]
   186e0:	cmp	r4, #0
   186e4:	str	r0, [sp, #8]
   186e8:	blt	18724 <__assert_fail@plt+0x769c>
   186ec:	ldr	r3, [sp, #28]
   186f0:	mvn	r0, #0
   186f4:	mvn	r1, #-2147483648	; 0x80000000
   186f8:	mvn	r9, #0
   186fc:	mvn	r8, #-2147483648	; 0x80000000
   18700:	bl	18dcc <__assert_fail@plt+0x7d44>
   18704:	ldr	r2, [sp, #24]
   18708:	ldr	r3, [sp, #28]
   1870c:	subs	r0, r0, r7
   18710:	sbcs	r0, r1, r4
   18714:	bge	18760 <__assert_fail@plt+0x76d8>
   18718:	mov	r0, #1
   1871c:	str	r0, [sp, #8]
   18720:	b	18774 <__assert_fail@plt+0x76ec>
   18724:	mov	r0, #0
   18728:	mov	r1, #-2147483648	; 0x80000000
   1872c:	mov	r2, r7
   18730:	mov	r3, r4
   18734:	bl	18cf8 <__assert_fail@plt+0x7c70>
   18738:	ldr	r2, [sp, #24]
   1873c:	ldr	r3, [sp, #28]
   18740:	subs	r0, r0, r2
   18744:	sbcs	r0, r1, r3
   18748:	bge	18760 <__assert_fail@plt+0x76d8>
   1874c:	mov	r0, #1
   18750:	mov	r9, #0
   18754:	mov	r8, #-2147483648	; 0x80000000
   18758:	str	r0, [sp, #8]
   1875c:	b	187ac <__assert_fail@plt+0x7724>
   18760:	umull	r9, r0, r7, r2
   18764:	mla	r0, r7, r3, r0
   18768:	mla	r8, r4, r2, r0
   1876c:	cmp	r8, #0
   18770:	blt	187ac <__assert_fail@plt+0x7724>
   18774:	ldr	r3, [sp, #28]
   18778:	mvn	r0, #0
   1877c:	mvn	r1, #-2147483648	; 0x80000000
   18780:	mvn	r4, #0
   18784:	mvn	r7, #-2147483648	; 0x80000000
   18788:	bl	18dcc <__assert_fail@plt+0x7d44>
   1878c:	ldr	r2, [sp, #24]
   18790:	ldr	r3, [sp, #28]
   18794:	subs	r0, r0, r9
   18798:	sbcs	r0, r1, r8
   1879c:	bge	187e8 <__assert_fail@plt+0x7760>
   187a0:	mov	r0, #1
   187a4:	str	r0, [sp, #8]
   187a8:	b	187fc <__assert_fail@plt+0x7774>
   187ac:	mov	r0, #0
   187b0:	mov	r1, #-2147483648	; 0x80000000
   187b4:	mov	r2, r9
   187b8:	mov	r3, r8
   187bc:	bl	18cf8 <__assert_fail@plt+0x7c70>
   187c0:	ldr	r2, [sp, #24]
   187c4:	ldr	r3, [sp, #28]
   187c8:	subs	r0, r0, r2
   187cc:	sbcs	r0, r1, r3
   187d0:	bge	187e8 <__assert_fail@plt+0x7760>
   187d4:	mov	r0, #1
   187d8:	mov	r4, #0
   187dc:	mov	r7, #-2147483648	; 0x80000000
   187e0:	str	r0, [sp, #8]
   187e4:	b	18834 <__assert_fail@plt+0x77ac>
   187e8:	umull	r4, r0, r9, r2
   187ec:	mla	r0, r9, r3, r0
   187f0:	mla	r7, r8, r2, r0
   187f4:	cmp	r7, #0
   187f8:	blt	18834 <__assert_fail@plt+0x77ac>
   187fc:	ldr	r3, [sp, #28]
   18800:	mvn	r0, #0
   18804:	mvn	r1, #-2147483648	; 0x80000000
   18808:	mvn	r8, #0
   1880c:	mvn	r9, #-2147483648	; 0x80000000
   18810:	bl	18dcc <__assert_fail@plt+0x7d44>
   18814:	ldr	r2, [sp, #24]
   18818:	ldr	r3, [sp, #28]
   1881c:	subs	r0, r0, r4
   18820:	sbcs	r0, r1, r7
   18824:	bge	18870 <__assert_fail@plt+0x77e8>
   18828:	mov	r0, #1
   1882c:	str	r0, [sp, #8]
   18830:	b	18884 <__assert_fail@plt+0x77fc>
   18834:	mov	r0, #0
   18838:	mov	r1, #-2147483648	; 0x80000000
   1883c:	mov	r2, r4
   18840:	mov	r3, r7
   18844:	bl	18cf8 <__assert_fail@plt+0x7c70>
   18848:	ldr	r2, [sp, #24]
   1884c:	ldr	r3, [sp, #28]
   18850:	subs	r0, r0, r2
   18854:	sbcs	r0, r1, r3
   18858:	bge	18870 <__assert_fail@plt+0x77e8>
   1885c:	mov	r0, #1
   18860:	mov	r8, #0
   18864:	mov	r9, #-2147483648	; 0x80000000
   18868:	str	r0, [sp, #8]
   1886c:	b	188c0 <__assert_fail@plt+0x7838>
   18870:	umull	r8, r0, r4, r2
   18874:	mla	r0, r4, r3, r0
   18878:	mla	r9, r7, r2, r0
   1887c:	cmp	r9, #0
   18880:	blt	188c0 <__assert_fail@plt+0x7838>
   18884:	ldr	r3, [sp, #28]
   18888:	mvn	r0, #0
   1888c:	mvn	r1, #-2147483648	; 0x80000000
   18890:	mvn	r4, #0
   18894:	mvn	r6, #-2147483648	; 0x80000000
   18898:	bl	18dcc <__assert_fail@plt+0x7d44>
   1889c:	ldr	r2, [sp, #24]
   188a0:	ldr	r3, [sp, #28]
   188a4:	subs	r0, r0, r8
   188a8:	sbcs	r0, r1, r9
   188ac:	bge	18900 <__assert_fail@plt+0x7878>
   188b0:	ldr	r9, [sp, #12]
   188b4:	mov	r0, #1
   188b8:	str	r0, [sp, #8]
   188bc:	b	18918 <__assert_fail@plt+0x7890>
   188c0:	mov	r0, #0
   188c4:	mov	r1, #-2147483648	; 0x80000000
   188c8:	mov	r2, r8
   188cc:	mov	r3, r9
   188d0:	bl	18cf8 <__assert_fail@plt+0x7c70>
   188d4:	ldr	r2, [sp, #24]
   188d8:	ldr	r3, [sp, #28]
   188dc:	subs	r0, r0, r2
   188e0:	sbcs	r0, r1, r3
   188e4:	bge	18900 <__assert_fail@plt+0x7878>
   188e8:	ldr	r9, [sp, #12]
   188ec:	mov	r0, #1
   188f0:	mov	r4, #0
   188f4:	mov	r6, #-2147483648	; 0x80000000
   188f8:	str	r0, [sp, #8]
   188fc:	b	18964 <__assert_fail@plt+0x78dc>
   18900:	umull	r4, r0, r8, r2
   18904:	mla	r0, r8, r3, r0
   18908:	mla	r6, r9, r2, r0
   1890c:	ldr	r9, [sp, #12]
   18910:	cmp	r6, #0
   18914:	blt	18964 <__assert_fail@plt+0x78dc>
   18918:	ldr	r3, [sp, #28]
   1891c:	mvn	r0, #0
   18920:	mvn	r1, #-2147483648	; 0x80000000
   18924:	mov	r8, r6
   18928:	mvn	r6, #0
   1892c:	mvn	r7, #-2147483648	; 0x80000000
   18930:	bl	18dcc <__assert_fail@plt+0x7d44>
   18934:	ldr	r3, [sp, #24]
   18938:	ldr	ip, [sp, #28]
   1893c:	subs	r0, r0, r4
   18940:	mov	r2, #1
   18944:	sbcs	r0, r1, r8
   18948:	blt	1895c <__assert_fail@plt+0x78d4>
   1894c:	umull	r6, r0, r4, r3
   18950:	mov	r2, #0
   18954:	mla	r0, r4, ip, r0
   18958:	mla	r7, r8, r3, r0
   1895c:	ldr	r0, [sp, #8]
   18960:	b	17aa8 <__assert_fail@plt+0x6a20>
   18964:	mov	r0, #0
   18968:	mov	r1, #-2147483648	; 0x80000000
   1896c:	mov	r2, r4
   18970:	mov	r3, r6
   18974:	bl	18cf8 <__assert_fail@plt+0x7c70>
   18978:	ldr	r3, [sp, #24]
   1897c:	ldr	ip, [sp, #28]
   18980:	mov	r8, r6
   18984:	mov	r2, #1
   18988:	mov	r6, #0
   1898c:	mov	r7, #-2147483648	; 0x80000000
   18990:	subs	r0, r0, r3
   18994:	sbcs	r0, r1, ip
   18998:	bge	1894c <__assert_fail@plt+0x78c4>
   1899c:	b	1895c <__assert_fail@plt+0x78d4>
   189a0:	movw	r0, #41561	; 0xa259
   189a4:	movw	r1, #41599	; 0xa27f
   189a8:	movw	r3, #41615	; 0xa28f
   189ac:	mov	r2, #85	; 0x55
   189b0:	movt	r0, #1
   189b4:	movt	r1, #1
   189b8:	movt	r3, #1
   189bc:	bl	11088 <__assert_fail@plt>
   189c0:	clz	r2, r1
   189c4:	clz	r3, r0
   189c8:	lsr	r2, r2, #5
   189cc:	lsr	r3, r3, #5
   189d0:	orrs	r2, r3, r2
   189d4:	movwne	r1, #1
   189d8:	movwne	r0, #1
   189dc:	cmp	r1, #0
   189e0:	beq	18a10 <__assert_fail@plt+0x7988>
   189e4:	mvn	r2, #-2147483648	; 0x80000000
   189e8:	udiv	r2, r2, r1
   189ec:	cmp	r2, r0
   189f0:	bcs	18a10 <__assert_fail@plt+0x7988>
   189f4:	push	{fp, lr}
   189f8:	mov	fp, sp
   189fc:	bl	10fa4 <__errno_location@plt>
   18a00:	mov	r1, #12
   18a04:	str	r1, [r0]
   18a08:	mov	r0, #0
   18a0c:	pop	{fp, pc}
   18a10:	b	10e24 <calloc@plt>
   18a14:	cmp	r0, #0
   18a18:	movweq	r0, #1
   18a1c:	cmn	r0, #1
   18a20:	ble	18a28 <__assert_fail@plt+0x79a0>
   18a24:	b	10f38 <malloc@plt>
   18a28:	push	{fp, lr}
   18a2c:	mov	fp, sp
   18a30:	bl	10fa4 <__errno_location@plt>
   18a34:	mov	r1, #12
   18a38:	str	r1, [r0]
   18a3c:	mov	r0, #0
   18a40:	pop	{fp, pc}
   18a44:	push	{fp, lr}
   18a48:	mov	fp, sp
   18a4c:	cmp	r0, #0
   18a50:	beq	18a6c <__assert_fail@plt+0x79e4>
   18a54:	cmp	r1, #0
   18a58:	beq	18a78 <__assert_fail@plt+0x79f0>
   18a5c:	cmn	r1, #1
   18a60:	ble	18a84 <__assert_fail@plt+0x79fc>
   18a64:	pop	{fp, lr}
   18a68:	b	10ecc <realloc@plt>
   18a6c:	mov	r0, r1
   18a70:	pop	{fp, lr}
   18a74:	b	18a14 <__assert_fail@plt+0x798c>
   18a78:	bl	1439c <__assert_fail@plt+0x3314>
   18a7c:	mov	r0, #0
   18a80:	pop	{fp, pc}
   18a84:	bl	10fa4 <__errno_location@plt>
   18a88:	mov	r1, #12
   18a8c:	str	r1, [r0]
   18a90:	mov	r0, #0
   18a94:	pop	{fp, pc}
   18a98:	push	{r4, r5, r6, sl, fp, lr}
   18a9c:	add	fp, sp, #16
   18aa0:	mov	r4, r0
   18aa4:	bl	10f14 <__fpending@plt>
   18aa8:	ldr	r6, [r4]
   18aac:	mov	r5, r0
   18ab0:	mov	r0, r4
   18ab4:	bl	14298 <__assert_fail@plt+0x3210>
   18ab8:	tst	r6, #32
   18abc:	bne	18af4 <__assert_fail@plt+0x7a6c>
   18ac0:	cmp	r0, #0
   18ac4:	mov	r4, r0
   18ac8:	mvnne	r4, #0
   18acc:	cmp	r5, #0
   18ad0:	bne	18b00 <__assert_fail@plt+0x7a78>
   18ad4:	cmp	r0, #0
   18ad8:	beq	18b00 <__assert_fail@plt+0x7a78>
   18adc:	bl	10fa4 <__errno_location@plt>
   18ae0:	ldr	r0, [r0]
   18ae4:	subs	r4, r0, #9
   18ae8:	mvnne	r4, #0
   18aec:	mov	r0, r4
   18af0:	pop	{r4, r5, r6, sl, fp, pc}
   18af4:	mvn	r4, #0
   18af8:	cmp	r0, #0
   18afc:	beq	18b08 <__assert_fail@plt+0x7a80>
   18b00:	mov	r0, r4
   18b04:	pop	{r4, r5, r6, sl, fp, pc}
   18b08:	bl	10fa4 <__errno_location@plt>
   18b0c:	mov	r1, #0
   18b10:	str	r1, [r0]
   18b14:	mov	r0, r4
   18b18:	pop	{r4, r5, r6, sl, fp, pc}
   18b1c:	push	{fp, lr}
   18b20:	mov	fp, sp
   18b24:	mov	r0, #14
   18b28:	bl	11034 <nl_langinfo@plt>
   18b2c:	movw	r1, #38799	; 0x978f
   18b30:	cmp	r0, #0
   18b34:	movt	r1, #1
   18b38:	movne	r1, r0
   18b3c:	movw	r0, #41693	; 0xa2dd
   18b40:	ldrb	r2, [r1]
   18b44:	movt	r0, #1
   18b48:	cmp	r2, #0
   18b4c:	movne	r0, r1
   18b50:	pop	{fp, pc}
   18b54:	push	{r4, r5, r6, r7, fp, lr}
   18b58:	add	fp, sp, #16
   18b5c:	sub	sp, sp, #8
   18b60:	add	r5, sp, #4
   18b64:	cmp	r0, #0
   18b68:	mov	r7, r2
   18b6c:	mov	r4, r1
   18b70:	movne	r5, r0
   18b74:	mov	r0, r5
   18b78:	bl	10f20 <mbrtowc@plt>
   18b7c:	mov	r6, r0
   18b80:	cmp	r7, #0
   18b84:	beq	18ba8 <__assert_fail@plt+0x7b20>
   18b88:	cmn	r6, #2
   18b8c:	bcc	18ba8 <__assert_fail@plt+0x7b20>
   18b90:	mov	r0, #0
   18b94:	bl	18bf0 <__assert_fail@plt+0x7b68>
   18b98:	cmp	r0, #0
   18b9c:	ldrbeq	r0, [r4]
   18ba0:	moveq	r6, #1
   18ba4:	streq	r0, [r5]
   18ba8:	mov	r0, r6
   18bac:	sub	sp, fp, #16
   18bb0:	pop	{r4, r5, r6, r7, fp, pc}
   18bb4:	cmp	r2, #0
   18bb8:	beq	18be8 <__assert_fail@plt+0x7b60>
   18bbc:	mvn	r3, #0
   18bc0:	udiv	r3, r3, r2
   18bc4:	cmp	r3, r1
   18bc8:	bcs	18be8 <__assert_fail@plt+0x7b60>
   18bcc:	push	{fp, lr}
   18bd0:	mov	fp, sp
   18bd4:	bl	10fa4 <__errno_location@plt>
   18bd8:	mov	r1, #12
   18bdc:	str	r1, [r0]
   18be0:	mov	r0, #0
   18be4:	pop	{fp, pc}
   18be8:	mul	r1, r2, r1
   18bec:	b	18a44 <__assert_fail@plt+0x79bc>
   18bf0:	push	{r4, sl, fp, lr}
   18bf4:	add	fp, sp, #8
   18bf8:	sub	sp, sp, #264	; 0x108
   18bfc:	add	r1, sp, #7
   18c00:	movw	r2, #257	; 0x101
   18c04:	bl	18c54 <__assert_fail@plt+0x7bcc>
   18c08:	mov	r4, #0
   18c0c:	cmp	r0, #0
   18c10:	bne	18c48 <__assert_fail@plt+0x7bc0>
   18c14:	movw	r1, #41699	; 0xa2e3
   18c18:	add	r0, sp, #7
   18c1c:	movt	r1, #1
   18c20:	bl	10e48 <strcmp@plt>
   18c24:	cmp	r0, #0
   18c28:	beq	18c48 <__assert_fail@plt+0x7bc0>
   18c2c:	movw	r1, #41701	; 0xa2e5
   18c30:	add	r0, sp, #7
   18c34:	movt	r1, #1
   18c38:	bl	10e48 <strcmp@plt>
   18c3c:	mov	r4, r0
   18c40:	cmp	r0, #0
   18c44:	movwne	r4, #1
   18c48:	mov	r0, r4
   18c4c:	sub	sp, fp, #8
   18c50:	pop	{r4, sl, fp, pc}
   18c54:	push	{r4, r5, r6, r7, fp, lr}
   18c58:	add	fp, sp, #16
   18c5c:	mov	r4, r1
   18c60:	mov	r1, #0
   18c64:	mov	r6, r2
   18c68:	bl	1101c <setlocale@plt>
   18c6c:	cmp	r0, #0
   18c70:	beq	18ca0 <__assert_fail@plt+0x7c18>
   18c74:	mov	r7, r0
   18c78:	bl	10f8c <strlen@plt>
   18c7c:	cmp	r0, r6
   18c80:	bcs	18cc0 <__assert_fail@plt+0x7c38>
   18c84:	add	r2, r0, #1
   18c88:	mov	r0, r4
   18c8c:	mov	r1, r7
   18c90:	bl	10e90 <memcpy@plt>
   18c94:	mov	r5, #0
   18c98:	mov	r0, r5
   18c9c:	pop	{r4, r5, r6, r7, fp, pc}
   18ca0:	cmp	r6, #0
   18ca4:	mov	r5, #22
   18ca8:	movne	r0, #0
   18cac:	strbne	r0, [r4]
   18cb0:	movne	r0, r5
   18cb4:	popne	{r4, r5, r6, r7, fp, pc}
   18cb8:	mov	r0, r5
   18cbc:	pop	{r4, r5, r6, r7, fp, pc}
   18cc0:	mov	r5, #34	; 0x22
   18cc4:	cmp	r6, #0
   18cc8:	beq	18ce8 <__assert_fail@plt+0x7c60>
   18ccc:	sub	r6, r6, #1
   18cd0:	mov	r0, r4
   18cd4:	mov	r1, r7
   18cd8:	mov	r2, r6
   18cdc:	bl	10e90 <memcpy@plt>
   18ce0:	mov	r0, #0
   18ce4:	strb	r0, [r4, r6]
   18ce8:	mov	r0, r5
   18cec:	pop	{r4, r5, r6, r7, fp, pc}
   18cf0:	mov	r1, #0
   18cf4:	b	1101c <setlocale@plt>
   18cf8:	cmp	r3, #0
   18cfc:	cmpeq	r2, #0
   18d00:	bne	18d24 <__assert_fail@plt+0x7c9c>
   18d04:	cmp	r1, #0
   18d08:	movlt	r1, #-2147483648	; 0x80000000
   18d0c:	movlt	r0, #0
   18d10:	blt	18d20 <__assert_fail@plt+0x7c98>
   18d14:	cmpeq	r0, #0
   18d18:	mvnne	r1, #-2147483648	; 0x80000000
   18d1c:	mvnne	r0, #0
   18d20:	b	18e08 <__assert_fail@plt+0x7d80>
   18d24:	sub	sp, sp, #8
   18d28:	push	{sp, lr}
   18d2c:	cmp	r1, #0
   18d30:	blt	18d50 <__assert_fail@plt+0x7cc8>
   18d34:	cmp	r3, #0
   18d38:	blt	18d84 <__assert_fail@plt+0x7cfc>
   18d3c:	bl	18e18 <__assert_fail@plt+0x7d90>
   18d40:	ldr	lr, [sp, #4]
   18d44:	add	sp, sp, #8
   18d48:	pop	{r2, r3}
   18d4c:	bx	lr
   18d50:	rsbs	r0, r0, #0
   18d54:	sbc	r1, r1, r1, lsl #1
   18d58:	cmp	r3, #0
   18d5c:	blt	18da8 <__assert_fail@plt+0x7d20>
   18d60:	bl	18e18 <__assert_fail@plt+0x7d90>
   18d64:	ldr	lr, [sp, #4]
   18d68:	add	sp, sp, #8
   18d6c:	pop	{r2, r3}
   18d70:	rsbs	r0, r0, #0
   18d74:	sbc	r1, r1, r1, lsl #1
   18d78:	rsbs	r2, r2, #0
   18d7c:	sbc	r3, r3, r3, lsl #1
   18d80:	bx	lr
   18d84:	rsbs	r2, r2, #0
   18d88:	sbc	r3, r3, r3, lsl #1
   18d8c:	bl	18e18 <__assert_fail@plt+0x7d90>
   18d90:	ldr	lr, [sp, #4]
   18d94:	add	sp, sp, #8
   18d98:	pop	{r2, r3}
   18d9c:	rsbs	r0, r0, #0
   18da0:	sbc	r1, r1, r1, lsl #1
   18da4:	bx	lr
   18da8:	rsbs	r2, r2, #0
   18dac:	sbc	r3, r3, r3, lsl #1
   18db0:	bl	18e18 <__assert_fail@plt+0x7d90>
   18db4:	ldr	lr, [sp, #4]
   18db8:	add	sp, sp, #8
   18dbc:	pop	{r2, r3}
   18dc0:	rsbs	r2, r2, #0
   18dc4:	sbc	r3, r3, r3, lsl #1
   18dc8:	bx	lr
   18dcc:	cmp	r3, #0
   18dd0:	cmpeq	r2, #0
   18dd4:	bne	18dec <__assert_fail@plt+0x7d64>
   18dd8:	cmp	r1, #0
   18ddc:	cmpeq	r0, #0
   18de0:	mvnne	r1, #0
   18de4:	mvnne	r0, #0
   18de8:	b	18e08 <__assert_fail@plt+0x7d80>
   18dec:	sub	sp, sp, #8
   18df0:	push	{sp, lr}
   18df4:	bl	18e18 <__assert_fail@plt+0x7d90>
   18df8:	ldr	lr, [sp, #4]
   18dfc:	add	sp, sp, #8
   18e00:	pop	{r2, r3}
   18e04:	bx	lr
   18e08:	push	{r1, lr}
   18e0c:	mov	r0, #8
   18e10:	bl	10e3c <raise@plt>
   18e14:	pop	{r1, pc}
   18e18:	cmp	r1, r3
   18e1c:	cmpeq	r0, r2
   18e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e24:	mov	r4, r0
   18e28:	movcc	r0, #0
   18e2c:	mov	r5, r1
   18e30:	ldr	lr, [sp, #36]	; 0x24
   18e34:	movcc	r1, r0
   18e38:	bcc	18f34 <__assert_fail@plt+0x7eac>
   18e3c:	cmp	r3, #0
   18e40:	clzeq	ip, r2
   18e44:	clzne	ip, r3
   18e48:	addeq	ip, ip, #32
   18e4c:	cmp	r5, #0
   18e50:	clzeq	r1, r4
   18e54:	addeq	r1, r1, #32
   18e58:	clzne	r1, r5
   18e5c:	sub	ip, ip, r1
   18e60:	sub	sl, ip, #32
   18e64:	lsl	r9, r3, ip
   18e68:	rsb	fp, ip, #32
   18e6c:	orr	r9, r9, r2, lsl sl
   18e70:	orr	r9, r9, r2, lsr fp
   18e74:	lsl	r8, r2, ip
   18e78:	cmp	r5, r9
   18e7c:	cmpeq	r4, r8
   18e80:	movcc	r0, #0
   18e84:	movcc	r1, r0
   18e88:	bcc	18ea4 <__assert_fail@plt+0x7e1c>
   18e8c:	mov	r0, #1
   18e90:	subs	r4, r4, r8
   18e94:	lsl	r1, r0, sl
   18e98:	orr	r1, r1, r0, lsr fp
   18e9c:	lsl	r0, r0, ip
   18ea0:	sbc	r5, r5, r9
   18ea4:	cmp	ip, #0
   18ea8:	beq	18f34 <__assert_fail@plt+0x7eac>
   18eac:	lsr	r6, r8, #1
   18eb0:	orr	r6, r6, r9, lsl #31
   18eb4:	lsr	r7, r9, #1
   18eb8:	mov	r2, ip
   18ebc:	b	18ee0 <__assert_fail@plt+0x7e58>
   18ec0:	subs	r3, r4, r6
   18ec4:	sbc	r8, r5, r7
   18ec8:	adds	r3, r3, r3
   18ecc:	adc	r8, r8, r8
   18ed0:	adds	r4, r3, #1
   18ed4:	adc	r5, r8, #0
   18ed8:	subs	r2, r2, #1
   18edc:	beq	18efc <__assert_fail@plt+0x7e74>
   18ee0:	cmp	r5, r7
   18ee4:	cmpeq	r4, r6
   18ee8:	bcs	18ec0 <__assert_fail@plt+0x7e38>
   18eec:	adds	r4, r4, r4
   18ef0:	adc	r5, r5, r5
   18ef4:	subs	r2, r2, #1
   18ef8:	bne	18ee0 <__assert_fail@plt+0x7e58>
   18efc:	lsr	r3, r4, ip
   18f00:	orr	r3, r3, r5, lsl fp
   18f04:	lsr	r2, r5, ip
   18f08:	orr	r3, r3, r5, lsr sl
   18f0c:	adds	r0, r0, r4
   18f10:	mov	r4, r3
   18f14:	lsl	r3, r2, ip
   18f18:	orr	r3, r3, r4, lsl sl
   18f1c:	lsl	ip, r4, ip
   18f20:	orr	r3, r3, r4, lsr fp
   18f24:	adc	r1, r1, r5
   18f28:	subs	r0, r0, ip
   18f2c:	mov	r5, r2
   18f30:	sbc	r1, r1, r3
   18f34:	cmp	lr, #0
   18f38:	strdne	r4, [lr]
   18f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f44:	mov	r7, r0
   18f48:	ldr	r6, [pc, #72]	; 18f98 <__assert_fail@plt+0x7f10>
   18f4c:	ldr	r5, [pc, #72]	; 18f9c <__assert_fail@plt+0x7f14>
   18f50:	add	r6, pc, r6
   18f54:	add	r5, pc, r5
   18f58:	sub	r6, r6, r5
   18f5c:	mov	r8, r1
   18f60:	mov	r9, r2
   18f64:	bl	10e04 <calloc@plt-0x20>
   18f68:	asrs	r6, r6, #2
   18f6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f70:	mov	r4, #0
   18f74:	add	r4, r4, #1
   18f78:	ldr	r3, [r5], #4
   18f7c:	mov	r2, r9
   18f80:	mov	r1, r8
   18f84:	mov	r0, r7
   18f88:	blx	r3
   18f8c:	cmp	r6, r4
   18f90:	bne	18f74 <__assert_fail@plt+0x7eec>
   18f94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f98:			; <UNDEFINED> instruction: 0x00011fb4
   18f9c:	andeq	r1, r1, ip, lsr #31
   18fa0:	bx	lr
   18fa4:	ldr	r3, [pc, #12]	; 18fb8 <__assert_fail@plt+0x7f30>
   18fa8:	mov	r1, #0
   18fac:	add	r3, pc, r3
   18fb0:	ldr	r2, [r3]
   18fb4:	b	10fb0 <__cxa_atexit@plt>
   18fb8:	andeq	r2, r1, r0, lsr r1

Disassembly of section .fini:

00018fbc <.fini>:
   18fbc:	push	{r3, lr}
   18fc0:	pop	{r3, pc}
