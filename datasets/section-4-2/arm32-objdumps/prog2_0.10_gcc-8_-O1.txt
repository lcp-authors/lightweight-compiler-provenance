
../repos/prog2/0.10:     file format elf32-littlearm


Disassembly of section .init:

00010608 <.init>:
   10608:	push	{r3, lr}
   1060c:	bl	106ac <_start@@Base+0x3c>
   10610:	pop	{r3, pc}

Disassembly of section .plt:

00010614 <printf@plt-0x14>:
   10614:	push	{lr}		; (str lr, [sp, #-4]!)
   10618:	ldr	lr, [pc, #4]	; 10624 <printf@plt-0x4>
   1061c:	add	lr, pc, lr
   10620:	ldr	pc, [lr, #8]!
   10624:	ldrdeq	r0, [r1], -ip

00010628 <printf@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2524]!	; 0x9dc

00010634 <memcpy@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #16, 20	; 0x10000
   1063c:	ldr	pc, [ip, #2516]!	; 0x9d4

00010640 <__libc_start_main@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #16, 20	; 0x10000
   10648:	ldr	pc, [ip, #2508]!	; 0x9cc

0001064c <__gmon_start__@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #16, 20	; 0x10000
   10654:	ldr	pc, [ip, #2500]!	; 0x9c4

00010658 <__isoc99_scanf@plt>:
   10658:	add	ip, pc, #0, 12
   1065c:	add	ip, ip, #16, 20	; 0x10000
   10660:	ldr	pc, [ip, #2492]!	; 0x9bc

00010664 <abort@plt>:
   10664:	add	ip, pc, #0, 12
   10668:	add	ip, ip, #16, 20	; 0x10000
   1066c:	ldr	pc, [ip, #2484]!	; 0x9b4

Disassembly of section .text:

00010670 <_start@@Base>:
   10670:	mov	fp, #0
   10674:	mov	lr, #0
   10678:	pop	{r1}		; (ldr r1, [sp], #4)
   1067c:	mov	r2, sp
   10680:	push	{r2}		; (str r2, [sp, #-4]!)
   10684:	push	{r0}		; (str r0, [sp, #-4]!)
   10688:	ldr	ip, [pc, #16]	; 106a0 <_start@@Base+0x30>
   1068c:	push	{ip}		; (str ip, [sp, #-4]!)
   10690:	ldr	r0, [pc, #12]	; 106a4 <_start@@Base+0x34>
   10694:	ldr	r3, [pc, #12]	; 106a8 <_start@@Base+0x38>
   10698:	bl	10640 <__libc_start_main@plt>
   1069c:	bl	10664 <abort@plt>
   106a0:	andeq	r0, r1, r4, ror #19
   106a4:	andeq	r0, r1, r0, lsl #18
   106a8:	andeq	r0, r1, r4, lsl #19
   106ac:	ldr	r3, [pc, #20]	; 106c8 <_start@@Base+0x58>
   106b0:	ldr	r2, [pc, #20]	; 106cc <_start@@Base+0x5c>
   106b4:	add	r3, pc, r3
   106b8:	ldr	r2, [r3, r2]
   106bc:	cmp	r2, #0
   106c0:	bxeq	lr
   106c4:	b	1064c <__gmon_start__@plt>
   106c8:	andeq	r0, r1, r4, asr #18
   106cc:	andeq	r0, r0, r4, lsr #32
   106d0:	ldr	r0, [pc, #24]	; 106f0 <_start@@Base+0x80>
   106d4:	ldr	r3, [pc, #24]	; 106f4 <_start@@Base+0x84>
   106d8:	cmp	r3, r0
   106dc:	bxeq	lr
   106e0:	ldr	r3, [pc, #16]	; 106f8 <_start@@Base+0x88>
   106e4:	cmp	r3, #0
   106e8:	bxeq	lr
   106ec:	bx	r3
   106f0:	andeq	r1, r2, r0, lsr r0
   106f4:	andeq	r1, r2, r0, lsr r0
   106f8:	andeq	r0, r0, r0
   106fc:	ldr	r0, [pc, #36]	; 10728 <_start@@Base+0xb8>
   10700:	ldr	r1, [pc, #36]	; 1072c <_start@@Base+0xbc>
   10704:	sub	r1, r1, r0
   10708:	asr	r1, r1, #2
   1070c:	add	r1, r1, r1, lsr #31
   10710:	asrs	r1, r1, #1
   10714:	bxeq	lr
   10718:	ldr	r3, [pc, #16]	; 10730 <_start@@Base+0xc0>
   1071c:	cmp	r3, #0
   10720:	bxeq	lr
   10724:	bx	r3
   10728:	andeq	r1, r2, r0, lsr r0
   1072c:	andeq	r1, r2, r0, lsr r0
   10730:	andeq	r0, r0, r0
   10734:	push	{r4, lr}
   10738:	ldr	r4, [pc, #24]	; 10758 <_start@@Base+0xe8>
   1073c:	ldrb	r3, [r4]
   10740:	cmp	r3, #0
   10744:	popne	{r4, pc}
   10748:	bl	106d0 <_start@@Base+0x60>
   1074c:	mov	r3, #1
   10750:	strb	r3, [r4]
   10754:	pop	{r4, pc}
   10758:	andeq	r1, r2, r0, lsr r0
   1075c:	b	106fc <_start@@Base+0x8c>

00010760 <nova_tarefa@@Base>:
   10760:	push	{lr}		; (str lr, [sp, #-4]!)
   10764:	sub	sp, sp, #12
   10768:	mov	r1, r0
   1076c:	add	r3, r0, #64	; 0x40
   10770:	str	r3, [sp]
   10774:	add	r3, r0, #60	; 0x3c
   10778:	add	r2, r0, #30
   1077c:	movw	r0, #2548	; 0x9f4
   10780:	movt	r0, #1
   10784:	bl	10658 <__isoc99_scanf@plt>
   10788:	cmp	r0, #4
   1078c:	movne	r0, #0
   10790:	moveq	r0, #1
   10794:	add	sp, sp, #12
   10798:	pop	{pc}		; (ldr pc, [sp], #4)

0001079c <ler_tarefas@@Base>:
   1079c:	strd	r4, [sp, #-16]!
   107a0:	str	r6, [sp, #8]
   107a4:	str	lr, [sp, #12]
   107a8:	mov	r4, r0
   107ac:	mov	r5, #0
   107b0:	mov	r0, r4
   107b4:	bl	10760 <nova_tarefa@@Base>
   107b8:	add	r4, r4, #68	; 0x44
   107bc:	cmp	r5, #99	; 0x63
   107c0:	movgt	r3, #0
   107c4:	movle	r3, #1
   107c8:	cmp	r0, #0
   107cc:	moveq	r3, #0
   107d0:	cmp	r3, #0
   107d4:	beq	107e0 <ler_tarefas@@Base+0x44>
   107d8:	add	r5, r5, #1
   107dc:	b	107b0 <ler_tarefas@@Base+0x14>
   107e0:	mov	r0, r5
   107e4:	ldrd	r4, [sp]
   107e8:	ldr	r6, [sp, #8]
   107ec:	add	sp, sp, #12
   107f0:	pop	{pc}		; (ldr pc, [sp], #4)

000107f4 <lista_tarefas@@Base>:
   107f4:	cmp	r1, #0
   107f8:	bxle	lr
   107fc:	strd	r4, [sp, #-16]!
   10800:	str	r6, [sp, #8]
   10804:	str	lr, [sp, #12]
   10808:	sub	sp, sp, #8
   1080c:	mov	r4, r0
   10810:	add	r1, r1, r1, lsl #4
   10814:	add	r5, r0, r1, lsl #2
   10818:	movw	r6, #2560	; 0xa00
   1081c:	movt	r6, #1
   10820:	ldr	r3, [r4, #60]	; 0x3c
   10824:	ldr	r2, [r4, #64]	; 0x40
   10828:	str	r2, [sp]
   1082c:	add	r2, r4, #30
   10830:	mov	r1, r4
   10834:	mov	r0, r6
   10838:	bl	10628 <printf@plt>
   1083c:	add	r4, r4, #68	; 0x44
   10840:	cmp	r4, r5
   10844:	bne	10820 <lista_tarefas@@Base+0x2c>
   10848:	add	sp, sp, #8
   1084c:	ldrd	r4, [sp]
   10850:	ldr	r6, [sp, #8]
   10854:	add	sp, sp, #12
   10858:	pop	{pc}		; (ldr pc, [sp], #4)

0001085c <analisa_tarefas@@Base>:
   1085c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10860:	strd	r6, [sp, #8]
   10864:	strd	r8, [sp, #16]
   10868:	str	sl, [sp, #24]
   1086c:	str	lr, [sp, #28]
   10870:	subs	r8, r1, #0
   10874:	ble	108cc <analisa_tarefas@@Base+0x70>
   10878:	mov	r9, r2
   1087c:	mov	r4, r0
   10880:	add	r7, r8, r8, lsl #4
   10884:	add	r7, r0, r7, lsl #2
   10888:	mov	r3, #0
   1088c:	mov	r6, r3
   10890:	mov	sl, #68	; 0x44
   10894:	b	108a4 <analisa_tarefas@@Base+0x48>
   10898:	add	r4, r4, #68	; 0x44
   1089c:	cmp	r4, r7
   108a0:	beq	108d4 <analisa_tarefas@@Base+0x78>
   108a4:	ldr	r5, [r4, #60]	; 0x3c
   108a8:	add	r6, r6, r5
   108ac:	cmp	r5, r3
   108b0:	ble	10898 <analisa_tarefas@@Base+0x3c>
   108b4:	mov	r2, sl
   108b8:	mov	r1, r4
   108bc:	mov	r0, r9
   108c0:	bl	10634 <memcpy@plt>
   108c4:	mov	r3, r5
   108c8:	b	10898 <analisa_tarefas@@Base+0x3c>
   108cc:	mov	r6, #0
   108d0:	mov	r8, r6
   108d4:	vmov	s15, r6
   108d8:	vcvt.f32.s32	s15, s15
   108dc:	vmov	s14, r8
   108e0:	vcvt.f32.s32	s0, s14
   108e4:	vdiv.f32	s0, s15, s0
   108e8:	ldrd	r4, [sp]
   108ec:	ldrd	r6, [sp, #8]
   108f0:	ldrd	r8, [sp, #16]
   108f4:	ldr	sl, [sp, #24]
   108f8:	add	sp, sp, #28
   108fc:	pop	{pc}		; (ldr pc, [sp], #4)

00010900 <main@@Base>:
   10900:	str	r4, [sp, #-8]!
   10904:	str	lr, [sp, #4]
   10908:	sub	sp, sp, #6848	; 0x1ac0
   1090c:	sub	sp, sp, #24
   10910:	add	r0, sp, #72	; 0x48
   10914:	bl	1079c <ler_tarefas@@Base>
   10918:	mov	r4, r0
   1091c:	mov	r1, r0
   10920:	add	r0, sp, #72	; 0x48
   10924:	bl	107f4 <lista_tarefas@@Base>
   10928:	mov	r1, r4
   1092c:	movw	r0, #2576	; 0xa10
   10930:	movt	r0, #1
   10934:	bl	10628 <printf@plt>
   10938:	add	r2, sp, #4
   1093c:	mov	r1, r4
   10940:	add	r0, sp, #72	; 0x48
   10944:	bl	1085c <analisa_tarefas@@Base>
   10948:	vcvt.f64.f32	d7, s0
   1094c:	vmov	r2, r3, d7
   10950:	movw	r0, #2608	; 0xa30
   10954:	movt	r0, #1
   10958:	bl	10628 <printf@plt>
   1095c:	add	r1, sp, #4
   10960:	movw	r0, #2644	; 0xa54
   10964:	movt	r0, #1
   10968:	bl	10628 <printf@plt>
   1096c:	mov	r0, #0
   10970:	add	sp, sp, #6848	; 0x1ac0
   10974:	add	sp, sp, #24
   10978:	ldr	r4, [sp]
   1097c:	add	sp, sp, #4
   10980:	pop	{pc}		; (ldr pc, [sp], #4)

00010984 <__libc_csu_init@@Base>:
   10984:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10988:	mov	r7, r0
   1098c:	ldr	r6, [pc, #72]	; 109dc <__libc_csu_init@@Base+0x58>
   10990:	ldr	r5, [pc, #72]	; 109e0 <__libc_csu_init@@Base+0x5c>
   10994:	add	r6, pc, r6
   10998:	add	r5, pc, r5
   1099c:	sub	r6, r6, r5
   109a0:	mov	r8, r1
   109a4:	mov	r9, r2
   109a8:	bl	10608 <printf@plt-0x20>
   109ac:	asrs	r6, r6, #2
   109b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109b4:	mov	r4, #0
   109b8:	add	r4, r4, #1
   109bc:	ldr	r3, [r5], #4
   109c0:	mov	r2, r9
   109c4:	mov	r1, r8
   109c8:	mov	r0, r7
   109cc:	blx	r3
   109d0:	cmp	r6, r4
   109d4:	bne	109b8 <__libc_csu_init@@Base+0x34>
   109d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109dc:	andeq	r0, r1, r8, ror r5
   109e0:	andeq	r0, r1, r0, ror r5

000109e4 <__libc_csu_fini@@Base>:
   109e4:	bx	lr

Disassembly of section .fini:

000109e8 <.fini>:
   109e8:	push	{r3, lr}
   109ec:	pop	{r3, pc}
