
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

000104ac <.init>:
   104ac:	push	{r3, lr}
   104b0:	bl	10750 <strcmp@plt+0x20c>
   104b4:	pop	{r3, pc}

Disassembly of section .plt:

000104b8 <abort@plt-0x14>:
   104b8:	push	{lr}		; (str lr, [sp, #-4]!)
   104bc:	ldr	lr, [pc, #4]	; 104c8 <abort@plt-0x4>
   104c0:	add	lr, pc, lr
   104c4:	ldr	pc, [lr, #8]!
   104c8:	andeq	r0, r1, r8, lsr fp

000104cc <abort@plt>:
   104cc:	add	ip, pc, #0, 12
   104d0:	add	ip, ip, #16, 20	; 0x10000
   104d4:	ldr	pc, [ip, #2872]!	; 0xb38

000104d8 <__libc_start_main@plt>:
   104d8:	add	ip, pc, #0, 12
   104dc:	add	ip, ip, #16, 20	; 0x10000
   104e0:	ldr	pc, [ip, #2864]!	; 0xb30

000104e4 <__gmon_start__@plt>:
   104e4:	add	ip, pc, #0, 12
   104e8:	add	ip, ip, #16, 20	; 0x10000
   104ec:	ldr	pc, [ip, #2856]!	; 0xb28

000104f0 <putchar@plt>:
   104f0:	add	ip, pc, #0, 12
   104f4:	add	ip, ip, #16, 20	; 0x10000
   104f8:	ldr	pc, [ip, #2848]!	; 0xb20

000104fc <memset@plt>:
   104fc:	add	ip, pc, #0, 12
   10500:	add	ip, ip, #16, 20	; 0x10000
   10504:	ldr	pc, [ip, #2840]!	; 0xb18

00010508 <perror@plt>:
   10508:	add	ip, pc, #0, 12
   1050c:	add	ip, ip, #16, 20	; 0x10000
   10510:	ldr	pc, [ip, #2832]!	; 0xb10

00010514 <printf@plt>:
   10514:	add	ip, pc, #0, 12
   10518:	add	ip, ip, #16, 20	; 0x10000
   1051c:	ldr	pc, [ip, #2824]!	; 0xb08

00010520 <fwrite@plt>:
   10520:	add	ip, pc, #0, 12
   10524:	add	ip, ip, #16, 20	; 0x10000
   10528:	ldr	pc, [ip, #2816]!	; 0xb00

0001052c <puts@plt>:
   1052c:	add	ip, pc, #0, 12
   10530:	add	ip, ip, #16, 20	; 0x10000
   10534:	ldr	pc, [ip, #2808]!	; 0xaf8

00010538 <rb_get_ssl_certfp_file@plt>:
   10538:	add	ip, pc, #0, 12
   1053c:	add	ip, ip, #16, 20	; 0x10000
   10540:	ldr	pc, [ip, #2800]!	; 0xaf0

00010544 <strcmp@plt>:
   10544:	add	ip, pc, #0, 12
   10548:	add	ip, ip, #16, 20	; 0x10000
   1054c:	ldr	pc, [ip, #2792]!	; 0xae8

Disassembly of section .text:

00010550 <.text>:
   10550:	push	{r4, r5, r6, r7, lr}
   10554:	sub	sp, sp, #76	; 0x4c
   10558:	mov	r5, r0
   1055c:	mov	r4, r1
   10560:	add	r0, sp, #4
   10564:	mov	r2, #65	; 0x41
   10568:	mov	r1, #0
   1056c:	bl	104fc <memset@plt>
   10570:	cmp	r5, #3
   10574:	bne	105f0 <strcmp@plt+0xac>
   10578:	ldr	r5, [r4, #4]
   1057c:	ldr	r1, [pc, #332]	; 106d0 <strcmp@plt+0x18c>
   10580:	mov	r0, r5
   10584:	bl	10544 <strcmp@plt>
   10588:	ldr	r4, [r4, #8]
   1058c:	subs	r2, r0, #0
   10590:	beq	1068c <strcmp@plt+0x148>
   10594:	ldr	r1, [pc, #312]	; 106d4 <strcmp@plt+0x190>
   10598:	mov	r0, r5
   1059c:	bl	10544 <strcmp@plt>
   105a0:	cmp	r0, #0
   105a4:	beq	1060c <strcmp@plt+0xc8>
   105a8:	ldr	r1, [pc, #296]	; 106d8 <strcmp@plt+0x194>
   105ac:	mov	r0, r5
   105b0:	bl	10544 <strcmp@plt>
   105b4:	cmp	r0, #0
   105b8:	beq	10694 <strcmp@plt+0x150>
   105bc:	ldr	r1, [pc, #280]	; 106dc <strcmp@plt+0x198>
   105c0:	mov	r0, r5
   105c4:	bl	10544 <strcmp@plt>
   105c8:	cmp	r0, #0
   105cc:	beq	106a0 <strcmp@plt+0x15c>
   105d0:	ldr	r1, [pc, #264]	; 106e0 <strcmp@plt+0x19c>
   105d4:	mov	r0, r5
   105d8:	bl	10544 <strcmp@plt>
   105dc:	cmp	r0, #0
   105e0:	bne	106bc <strcmp@plt+0x178>
   105e4:	ldr	r5, [pc, #248]	; 106e4 <strcmp@plt+0x1a0>
   105e8:	ldr	r2, [pc, #248]	; 106e8 <strcmp@plt+0x1a4>
   105ec:	b	10614 <strcmp@plt+0xd0>
   105f0:	ldr	r0, [pc, #244]	; 106ec <strcmp@plt+0x1a8>
   105f4:	bl	1052c <puts@plt>
   105f8:	ldr	r0, [pc, #240]	; 106f0 <strcmp@plt+0x1ac>
   105fc:	bl	1052c <puts@plt>
   10600:	mov	r0, #1
   10604:	add	sp, sp, #76	; 0x4c
   10608:	pop	{r4, r5, r6, r7, pc}
   1060c:	ldr	r5, [pc, #224]	; 106f4 <strcmp@plt+0x1b0>
   10610:	mov	r2, #1
   10614:	add	r1, sp, #4
   10618:	mov	r0, r4
   1061c:	bl	10538 <rb_get_ssl_certfp_file@plt>
   10620:	subs	r6, r0, #0
   10624:	blt	106ac <strcmp@plt+0x168>
   10628:	beq	1066c <strcmp@plt+0x128>
   1062c:	mov	r1, r5
   10630:	ldr	r0, [pc, #192]	; 106f8 <strcmp@plt+0x1b4>
   10634:	bl	10514 <printf@plt>
   10638:	ldr	r7, [pc, #188]	; 106fc <strcmp@plt+0x1b8>
   1063c:	add	r5, sp, #3
   10640:	mov	r4, #0
   10644:	add	r4, r4, #1
   10648:	ldrb	r1, [r5, #1]!
   1064c:	mov	r0, r7
   10650:	bl	10514 <printf@plt>
   10654:	cmp	r6, r4
   10658:	bgt	10644 <strcmp@plt+0x100>
   1065c:	mov	r0, #10
   10660:	bl	104f0 <putchar@plt>
   10664:	mov	r0, #0
   10668:	b	10604 <strcmp@plt+0xc0>
   1066c:	ldr	r3, [pc, #140]	; 10700 <strcmp@plt+0x1bc>
   10670:	mov	r2, #14
   10674:	mov	r1, #1
   10678:	ldr	r3, [r3]
   1067c:	ldr	r0, [pc, #128]	; 10704 <strcmp@plt+0x1c0>
   10680:	bl	10520 <fwrite@plt>
   10684:	mov	r0, #1
   10688:	b	10604 <strcmp@plt+0xc0>
   1068c:	ldr	r5, [pc, #96]	; 106f4 <strcmp@plt+0x1b0>
   10690:	b	10614 <strcmp@plt+0xd0>
   10694:	ldr	r5, [pc, #88]	; 106f4 <strcmp@plt+0x1b0>
   10698:	mov	r2, #2
   1069c:	b	10614 <strcmp@plt+0xd0>
   106a0:	ldr	r5, [pc, #96]	; 10708 <strcmp@plt+0x1c4>
   106a4:	ldr	r2, [pc, #96]	; 1070c <strcmp@plt+0x1c8>
   106a8:	b	10614 <strcmp@plt+0xd0>
   106ac:	mov	r0, r4
   106b0:	bl	10508 <perror@plt>
   106b4:	mov	r0, #1
   106b8:	b	10604 <strcmp@plt+0xc0>
   106bc:	mov	r1, r5
   106c0:	ldr	r0, [pc, #72]	; 10710 <strcmp@plt+0x1cc>
   106c4:	bl	10514 <printf@plt>
   106c8:	mov	r0, #1
   106cc:	b	10604 <strcmp@plt+0xc0>
   106d0:	andeq	r0, r1, r0, lsr r9
   106d4:	andeq	r0, r1, r8, lsr r9
   106d8:	andeq	r0, r1, r0, asr #18
   106dc:	andeq	r0, r1, r8, asr #18
   106e0:	andeq	r0, r1, r4, lsr #18
   106e4:			; <UNDEFINED> instruction: 0x000108bc
   106e8:	andeq	r1, r0, r2
   106ec:	andeq	r0, r1, ip, asr #17
   106f0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   106f4:	andeq	r0, r1, r4, lsr r9
   106f8:	andeq	r0, r1, r8, ror r9
   106fc:	andeq	r0, r1, ip, ror r9
   10700:	andeq	r1, r2, r8, asr #32
   10704:	andeq	r0, r1, r8, ror #18
   10708:	andeq	r0, r1, ip, lsr #17
   1070c:	andeq	r1, r0, r1
   10710:	andeq	r0, r1, r4, asr r9
   10714:	mov	fp, #0
   10718:	mov	lr, #0
   1071c:	pop	{r1}		; (ldr r1, [sp], #4)
   10720:	mov	r2, sp
   10724:	push	{r2}		; (str r2, [sp, #-4]!)
   10728:	push	{r0}		; (str r0, [sp, #-4]!)
   1072c:	ldr	ip, [pc, #16]	; 10744 <strcmp@plt+0x200>
   10730:	push	{ip}		; (str ip, [sp, #-4]!)
   10734:	ldr	r0, [pc, #12]	; 10748 <strcmp@plt+0x204>
   10738:	ldr	r3, [pc, #12]	; 1074c <strcmp@plt+0x208>
   1073c:	bl	104d8 <__libc_start_main@plt>
   10740:	bl	104cc <abort@plt>
   10744:	muleq	r1, ip, r8
   10748:	andeq	r0, r1, r0, asr r5
   1074c:	andeq	r0, r1, ip, lsr r8
   10750:	ldr	r3, [pc, #20]	; 1076c <strcmp@plt+0x228>
   10754:	ldr	r2, [pc, #20]	; 10770 <strcmp@plt+0x22c>
   10758:	add	r3, pc, r3
   1075c:	ldr	r2, [r3, r2]
   10760:	cmp	r2, #0
   10764:	bxeq	lr
   10768:	b	104e4 <__gmon_start__@plt>
   1076c:	andeq	r0, r1, r0, lsr #17
   10770:	andeq	r0, r0, r8, lsr r0
   10774:	ldr	r3, [pc, #28]	; 10798 <strcmp@plt+0x254>
   10778:	ldr	r0, [pc, #28]	; 1079c <strcmp@plt+0x258>
   1077c:	sub	r3, r3, r0
   10780:	cmp	r3, #6
   10784:	bxls	lr
   10788:	ldr	r3, [pc, #16]	; 107a0 <strcmp@plt+0x25c>
   1078c:	cmp	r3, #0
   10790:	bxeq	lr
   10794:	bx	r3
   10798:	andeq	r1, r2, r7, asr #32
   1079c:	andeq	r1, r2, r4, asr #32
   107a0:	andeq	r0, r0, r0
   107a4:	ldr	r1, [pc, #36]	; 107d0 <strcmp@plt+0x28c>
   107a8:	ldr	r0, [pc, #36]	; 107d4 <strcmp@plt+0x290>
   107ac:	sub	r1, r1, r0
   107b0:	asr	r1, r1, #2
   107b4:	add	r1, r1, r1, lsr #31
   107b8:	asrs	r1, r1, #1
   107bc:	bxeq	lr
   107c0:	ldr	r3, [pc, #16]	; 107d8 <strcmp@plt+0x294>
   107c4:	cmp	r3, #0
   107c8:	bxeq	lr
   107cc:	bx	r3
   107d0:	andeq	r1, r2, r4, asr #32
   107d4:	andeq	r1, r2, r4, asr #32
   107d8:	andeq	r0, r0, r0
   107dc:	push	{r4, lr}
   107e0:	ldr	r4, [pc, #24]	; 10800 <strcmp@plt+0x2bc>
   107e4:	ldrb	r3, [r4]
   107e8:	cmp	r3, #0
   107ec:	popne	{r4, pc}
   107f0:	bl	10774 <strcmp@plt+0x230>
   107f4:	mov	r3, #1
   107f8:	strb	r3, [r4]
   107fc:	pop	{r4, pc}
   10800:	andeq	r1, r2, ip, asr #32
   10804:	ldr	r0, [pc, #40]	; 10834 <strcmp@plt+0x2f0>
   10808:	ldr	r3, [r0]
   1080c:	cmp	r3, #0
   10810:	bne	10818 <strcmp@plt+0x2d4>
   10814:	b	107a4 <strcmp@plt+0x260>
   10818:	ldr	r3, [pc, #24]	; 10838 <strcmp@plt+0x2f4>
   1081c:	cmp	r3, #0
   10820:	beq	10814 <strcmp@plt+0x2d0>
   10824:	push	{r4, lr}
   10828:	blx	r3
   1082c:	pop	{r4, lr}
   10830:	b	107a4 <strcmp@plt+0x260>
   10834:	strdeq	r0, [r2], -ip
   10838:	andeq	r0, r0, r0
   1083c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10840:	mov	r7, r0
   10844:	ldr	r6, [pc, #72]	; 10894 <strcmp@plt+0x350>
   10848:	ldr	r5, [pc, #72]	; 10898 <strcmp@plt+0x354>
   1084c:	add	r6, pc, r6
   10850:	add	r5, pc, r5
   10854:	sub	r6, r6, r5
   10858:	mov	r8, r1
   1085c:	mov	r9, r2
   10860:	bl	104ac <abort@plt-0x20>
   10864:	asrs	r6, r6, #2
   10868:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1086c:	mov	r4, #0
   10870:	add	r4, r4, #1
   10874:	ldr	r3, [r5], #4
   10878:	mov	r2, r9
   1087c:	mov	r1, r8
   10880:	mov	r0, r7
   10884:	blx	r3
   10888:	cmp	r6, r4
   1088c:	bne	10870 <strcmp@plt+0x32c>
   10890:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10894:	andeq	r0, r1, r4, lsr #13
   10898:	muleq	r1, ip, r6
   1089c:	bx	lr

Disassembly of section .fini:

000108a0 <.fini>:
   108a0:	push	{r3, lr}
   108a4:	pop	{r3, pc}
