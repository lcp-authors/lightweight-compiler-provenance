
../repos/prog2/9:     file format elf32-littlearm


Disassembly of section .init:

000109c0 <.init>:
   109c0:	push	{r3, lr}
   109c4:	bl	10e34 <_start@@Base+0x3c>
   109c8:	pop	{r3, pc}

Disassembly of section .plt:

000109cc <calloc@plt-0x14>:
   109cc:	push	{lr}		; (str lr, [sp, #-4]!)
   109d0:	ldr	lr, [pc, #4]	; 109dc <calloc@plt-0x4>
   109d4:	add	lr, pc, lr
   109d8:	ldr	pc, [lr, #8]!
   109dc:	andeq	r1, r1, r4, lsr #12

000109e0 <calloc@plt>:
   109e0:	add	ip, pc, #0, 12
   109e4:	add	ip, ip, #69632	; 0x11000
   109e8:	ldr	pc, [ip, #1572]!	; 0x624

000109ec <strcmp@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #69632	; 0x11000
   109f4:	ldr	pc, [ip, #1564]!	; 0x61c

000109f8 <printf@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #69632	; 0x11000
   10a00:	ldr	pc, [ip, #1556]!	; 0x614

00010a04 <__isoc99_fscanf@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #69632	; 0x11000
   10a0c:	ldr	pc, [ip, #1548]!	; 0x60c

00010a10 <fopen@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #69632	; 0x11000
   10a18:	ldr	pc, [ip, #1540]!	; 0x604

00010a1c <fflush@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #69632	; 0x11000
   10a24:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a28 <free@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #69632	; 0x11000
   10a30:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a34 <fgets@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #69632	; 0x11000
   10a3c:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a40 <strdup@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #69632	; 0x11000
   10a48:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a4c <puts@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #69632	; 0x11000
   10a54:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a58 <malloc@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #69632	; 0x11000
   10a60:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a64 <__libc_start_main@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #69632	; 0x11000
   10a6c:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a70 <__gmon_start__@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #69632	; 0x11000
   10a78:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a7c <feof@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #69632	; 0x11000
   10a84:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a88 <strlen@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #69632	; 0x11000
   10a90:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a94 <putchar@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #69632	; 0x11000
   10a9c:	ldr	pc, [ip, #1452]!	; 0x5ac

00010aa0 <fclose@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #69632	; 0x11000
   10aa8:	ldr	pc, [ip, #1444]!	; 0x5a4

00010aac <abort@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #69632	; 0x11000
   10ab4:	ldr	pc, [ip, #1436]!	; 0x59c

Disassembly of section .text:

00010ab8 <main@@Base>:
   10ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10abc:	mov	r0, #42	; 0x2a
   10ac0:	sub	sp, sp, #12
   10ac4:	bl	11284 <vetor_cria@@Base>
   10ac8:	ldr	r8, [pc, #724]	; 10da4 <main@@Base+0x2ec>
   10acc:	ldr	r6, [pc, #724]	; 10da8 <main@@Base+0x2f0>
   10ad0:	add	r8, pc, r8
   10ad4:	add	r6, pc, r6
   10ad8:	mov	r4, r0
   10adc:	ldr	r0, [pc, #712]	; 10dac <main@@Base+0x2f4>
   10ae0:	add	r0, pc, r0
   10ae4:	bl	10a4c <puts@plt>
   10ae8:	mov	r0, r4
   10aec:	mov	r1, r8
   10af0:	bl	11030 <fp_carrega@@Base>
   10af4:	ldr	r3, [pc, #692]	; 10db0 <main@@Base+0x2f8>
   10af8:	ldr	r0, [pc, #692]	; 10db4 <main@@Base+0x2fc>
   10afc:	ldr	r5, [r6, r3]
   10b00:	add	r0, pc, r0
   10b04:	ldr	r1, [r5]
   10b08:	bl	109f8 <printf@plt>
   10b0c:	mov	r0, r4
   10b10:	bl	11464 <vetor_imprime@@Base>
   10b14:	ldr	r9, [r4]
   10b18:	cmp	r9, #42	; 0x2a
   10b1c:	beq	10b3c <main@@Base+0x84>
   10b20:	ldr	r0, [pc, #656]	; 10db8 <main@@Base+0x300>
   10b24:	mov	r7, #1
   10b28:	add	r0, pc, r0
   10b2c:	bl	10a4c <puts@plt>
   10b30:	mov	r0, r7
   10b34:	add	sp, sp, #12
   10b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b3c:	mov	r0, r4
   10b40:	bl	10fe0 <fp_remove@@Base>
   10b44:	ldr	r7, [pc, #624]	; 10dbc <main@@Base+0x304>
   10b48:	add	r7, pc, r7
   10b4c:	mov	r1, r0
   10b50:	mov	r0, r7
   10b54:	bl	109ec <strcmp@plt>
   10b58:	subs	fp, r0, #0
   10b5c:	bne	10d90 <main@@Base+0x2d8>
   10b60:	mov	r0, r4
   10b64:	str	fp, [r5]
   10b68:	ldr	sl, [pc, #592]	; 10dc0 <main@@Base+0x308>
   10b6c:	bl	10fe0 <fp_remove@@Base>
   10b70:	ldr	r0, [pc, #588]	; 10dc4 <main@@Base+0x30c>
   10b74:	add	sl, pc, sl
   10b78:	ldr	r1, [r5]
   10b7c:	add	r0, pc, r0
   10b80:	bl	109f8 <printf@plt>
   10b84:	mov	r2, #99	; 0x63
   10b88:	mov	r1, sl
   10b8c:	mov	r0, r4
   10b90:	str	fp, [r5]
   10b94:	bl	10f20 <fp_insere@@Base>
   10b98:	ldr	r0, [pc, #552]	; 10dc8 <main@@Base+0x310>
   10b9c:	ldr	r1, [r5]
   10ba0:	add	r0, pc, r0
   10ba4:	bl	109f8 <printf@plt>
   10ba8:	mov	r0, r4
   10bac:	bl	10fe0 <fp_remove@@Base>
   10bb0:	mov	r2, fp
   10bb4:	mov	r1, sl
   10bb8:	mov	r0, r4
   10bbc:	str	fp, [r5]
   10bc0:	bl	10f20 <fp_insere@@Base>
   10bc4:	ldr	r0, [pc, #512]	; 10dcc <main@@Base+0x314>
   10bc8:	ldr	r1, [r5]
   10bcc:	add	r0, pc, r0
   10bd0:	bl	109f8 <printf@plt>
   10bd4:	ldr	r3, [pc, #500]	; 10dd0 <main@@Base+0x318>
   10bd8:	mov	r0, r4
   10bdc:	add	r3, pc, r3
   10be0:	str	r3, [sp]
   10be4:	bl	10fe0 <fp_remove@@Base>
   10be8:	mov	r2, r9
   10bec:	mov	r0, r4
   10bf0:	mov	r1, sl
   10bf4:	str	fp, [r5]
   10bf8:	bl	10f20 <fp_insere@@Base>
   10bfc:	ldr	r1, [r5]
   10c00:	ldr	r0, [sp]
   10c04:	bl	109f8 <printf@plt>
   10c08:	ldr	r0, [pc, #452]	; 10dd4 <main@@Base+0x31c>
   10c0c:	add	r0, pc, r0
   10c10:	bl	10a4c <puts@plt>
   10c14:	mov	r0, r9
   10c18:	bl	112dc <vetor_criaHeap@@Base>
   10c1c:	ldr	r3, [pc, #436]	; 10dd8 <main@@Base+0x320>
   10c20:	ldr	r2, [pc, #436]	; 10ddc <main@@Base+0x324>
   10c24:	add	r2, pc, r2
   10c28:	str	r2, [sp, #4]
   10c2c:	ldr	r3, [r6, r3]
   10c30:	mov	r4, r2
   10c34:	mov	r1, r3
   10c38:	mov	r2, r8
   10c3c:	mov	fp, r3
   10c40:	mov	r9, r0
   10c44:	bl	111c4 <heap_carrega@@Base>
   10c48:	mov	r0, r4
   10c4c:	ldr	r1, [r5]
   10c50:	bl	109f8 <printf@plt>
   10c54:	mov	r0, r9
   10c58:	bl	114f8 <vetor_imprimeHeap@@Base>
   10c5c:	ldr	r4, [r9]
   10c60:	cmp	r4, #42	; 0x2a
   10c64:	beq	10c7c <main@@Base+0x1c4>
   10c68:	ldr	r0, [pc, #368]	; 10de0 <main@@Base+0x328>
   10c6c:	mov	r7, #1
   10c70:	add	r0, pc, r0
   10c74:	bl	10a4c <puts@plt>
   10c78:	b	10b30 <main@@Base+0x78>
   10c7c:	mov	r1, fp
   10c80:	mov	r0, r9
   10c84:	bl	111bc <heap_remove@@Base>
   10c88:	mov	r1, r0
   10c8c:	mov	r0, r7
   10c90:	bl	109ec <strcmp@plt>
   10c94:	subs	r7, r0, #0
   10c98:	bne	10d90 <main@@Base+0x2d8>
   10c9c:	mov	r1, fp
   10ca0:	mov	r0, r9
   10ca4:	str	r7, [r5]
   10ca8:	bl	111bc <heap_remove@@Base>
   10cac:	ldr	r0, [pc, #304]	; 10de4 <main@@Base+0x32c>
   10cb0:	ldr	r1, [r5]
   10cb4:	add	r0, pc, r0
   10cb8:	bl	109f8 <printf@plt>
   10cbc:	mov	r3, #99	; 0x63
   10cc0:	mov	r2, sl
   10cc4:	mov	r1, fp
   10cc8:	mov	r0, r9
   10ccc:	str	r7, [r5]
   10cd0:	bl	110ec <heap_insere@@Base>
   10cd4:	ldr	r0, [pc, #268]	; 10de8 <main@@Base+0x330>
   10cd8:	ldr	r1, [r5]
   10cdc:	add	r0, pc, r0
   10ce0:	bl	109f8 <printf@plt>
   10ce4:	mov	r1, fp
   10ce8:	mov	r0, r9
   10cec:	bl	111bc <heap_remove@@Base>
   10cf0:	mov	r3, r7
   10cf4:	mov	r2, sl
   10cf8:	mov	r1, fp
   10cfc:	mov	r0, r9
   10d00:	str	r7, [r5]
   10d04:	bl	110ec <heap_insere@@Base>
   10d08:	ldr	r0, [pc, #220]	; 10dec <main@@Base+0x334>
   10d0c:	ldr	r1, [r5]
   10d10:	add	r0, pc, r0
   10d14:	bl	109f8 <printf@plt>
   10d18:	mov	r1, fp
   10d1c:	mov	r0, r9
   10d20:	bl	111bc <heap_remove@@Base>
   10d24:	mov	r2, sl
   10d28:	mov	r3, r4
   10d2c:	mov	r1, fp
   10d30:	mov	r0, r9
   10d34:	str	r7, [r5]
   10d38:	bl	110ec <heap_insere@@Base>
   10d3c:	ldr	r1, [r5]
   10d40:	ldr	r0, [sp]
   10d44:	bl	109f8 <printf@plt>
   10d48:	mov	r0, r4
   10d4c:	bl	112dc <vetor_criaHeap@@Base>
   10d50:	ldr	r3, [pc, #152]	; 10df0 <main@@Base+0x338>
   10d54:	mov	r2, r8
   10d58:	ldr	r6, [r6, r3]
   10d5c:	mov	r1, r6
   10d60:	mov	r9, r0
   10d64:	bl	111c4 <heap_carrega@@Base>
   10d68:	ldr	r1, [r5]
   10d6c:	ldr	r0, [sp, #4]
   10d70:	bl	109f8 <printf@plt>
   10d74:	mov	r1, r6
   10d78:	mov	r0, r9
   10d7c:	bl	111bc <heap_remove@@Base>
   10d80:	bl	10a4c <puts@plt>
   10d84:	subs	r4, r4, #1
   10d88:	bne	10d74 <main@@Base+0x2bc>
   10d8c:	b	10b30 <main@@Base+0x78>
   10d90:	ldr	r0, [pc, #92]	; 10df4 <main@@Base+0x33c>
   10d94:	mov	r7, #1
   10d98:	add	r0, pc, r0
   10d9c:	bl	10a4c <puts@plt>
   10da0:	b	10b30 <main@@Base+0x78>
   10da4:	andeq	r0, r0, r8, lsl #23
   10da8:	andeq	r1, r1, r4, lsr #10
   10dac:	andeq	r0, r0, r0, asr #22
   10db0:	andeq	r0, r0, r8, asr r0
   10db4:	andeq	r0, r0, r4, ror #22
   10db8:	andeq	r0, r0, r4, ror fp
   10dbc:	andeq	r0, r0, ip, ror fp
   10dc0:	ldrdeq	r0, [r0], -ip
   10dc4:	andeq	r0, r0, r0, lsr #23
   10dc8:	andeq	r0, r0, r0, asr #23
   10dcc:	ldrdeq	r0, [r0], -ip
   10dd0:	andeq	r0, r0, r4, lsl ip
   10dd4:	andeq	r0, r0, ip, lsr #24
   10dd8:	andeq	r0, r0, r4, asr r0
   10ddc:	andeq	r0, r0, ip, asr #24
   10de0:	andeq	r0, r0, r8, lsr ip
   10de4:	andeq	r0, r0, ip, lsl ip
   10de8:	andeq	r0, r0, r8, lsr #24
   10dec:	andeq	r0, r0, ip, lsr ip
   10df0:	andeq	r0, r0, r0, rrx
   10df4:	andeq	r0, r0, r0, asr #18

00010df8 <_start@@Base>:
   10df8:	mov	fp, #0
   10dfc:	mov	lr, #0
   10e00:	pop	{r1}		; (ldr r1, [sp], #4)
   10e04:	mov	r2, sp
   10e08:	push	{r2}		; (str r2, [sp, #-4]!)
   10e0c:	push	{r0}		; (str r0, [sp, #-4]!)
   10e10:	ldr	ip, [pc, #16]	; 10e28 <_start@@Base+0x30>
   10e14:	push	{ip}		; (str ip, [sp, #-4]!)
   10e18:	ldr	r0, [pc, #12]	; 10e2c <_start@@Base+0x34>
   10e1c:	ldr	r3, [pc, #12]	; 10e30 <_start@@Base+0x38>
   10e20:	bl	10a64 <__libc_start_main@plt>
   10e24:	bl	10aac <abort@plt>
   10e28:	andeq	r1, r1, ip, ror #11
   10e2c:			; <UNDEFINED> instruction: 0x00010ab8
   10e30:	andeq	r1, r1, ip, lsl #11
   10e34:	ldr	r3, [pc, #20]	; 10e50 <_start@@Base+0x58>
   10e38:	ldr	r2, [pc, #20]	; 10e54 <_start@@Base+0x5c>
   10e3c:	add	r3, pc, r3
   10e40:	ldr	r2, [r3, r2]
   10e44:	cmp	r2, #0
   10e48:	bxeq	lr
   10e4c:	b	10a70 <__gmon_start__@plt>
   10e50:			; <UNDEFINED> instruction: 0x000111bc
   10e54:	andeq	r0, r0, ip, asr r0
   10e58:	ldr	r3, [pc, #28]	; 10e7c <_start@@Base+0x84>
   10e5c:	ldr	r0, [pc, #28]	; 10e80 <_start@@Base+0x88>
   10e60:	sub	r3, r3, r0
   10e64:	cmp	r3, #6
   10e68:	bxls	lr
   10e6c:	ldr	r3, [pc, #16]	; 10e84 <_start@@Base+0x8c>
   10e70:	cmp	r3, #0
   10e74:	bxeq	lr
   10e78:	bx	r3
   10e7c:	andeq	r2, r2, r3, ror r0
   10e80:	andeq	r2, r2, r0, ror r0
   10e84:	andeq	r0, r0, r0
   10e88:	ldr	r1, [pc, #36]	; 10eb4 <_start@@Base+0xbc>
   10e8c:	ldr	r0, [pc, #36]	; 10eb8 <_start@@Base+0xc0>
   10e90:	sub	r1, r1, r0
   10e94:	asr	r1, r1, #2
   10e98:	add	r1, r1, r1, lsr #31
   10e9c:	asrs	r1, r1, #1
   10ea0:	bxeq	lr
   10ea4:	ldr	r3, [pc, #16]	; 10ebc <_start@@Base+0xc4>
   10ea8:	cmp	r3, #0
   10eac:	bxeq	lr
   10eb0:	bx	r3
   10eb4:	andeq	r2, r2, r0, ror r0
   10eb8:	andeq	r2, r2, r0, ror r0
   10ebc:	andeq	r0, r0, r0
   10ec0:	push	{r4, lr}
   10ec4:	ldr	r4, [pc, #24]	; 10ee4 <_start@@Base+0xec>
   10ec8:	ldrb	r3, [r4]
   10ecc:	cmp	r3, #0
   10ed0:	popne	{r4, pc}
   10ed4:	bl	10e58 <_start@@Base+0x60>
   10ed8:	mov	r3, #1
   10edc:	strb	r3, [r4]
   10ee0:	pop	{r4, pc}
   10ee4:	andeq	r2, r2, r0, ror r0
   10ee8:	ldr	r0, [pc, #40]	; 10f18 <_start@@Base+0x120>
   10eec:	ldr	r3, [r0]
   10ef0:	cmp	r3, #0
   10ef4:	bne	10efc <_start@@Base+0x104>
   10ef8:	b	10e88 <_start@@Base+0x90>
   10efc:	ldr	r3, [pc, #24]	; 10f1c <_start@@Base+0x124>
   10f00:	cmp	r3, #0
   10f04:	beq	10ef8 <_start@@Base+0x100>
   10f08:	push	{r4, lr}
   10f0c:	blx	r3
   10f10:	pop	{r4, lr}
   10f14:	b	10e88 <_start@@Base+0x90>
   10f18:	andeq	r1, r2, r4, lsl pc
   10f1c:	andeq	r0, r0, r0

00010f20 <fp_insere@@Base>:
   10f20:	push	{r4, r5, r6, r7, r8, lr}
   10f24:	subs	r5, r0, #0
   10f28:	beq	10fd8 <fp_insere@@Base+0xb8>
   10f2c:	ldm	r5, {r0, r3}
   10f30:	cmp	r0, r3
   10f34:	beq	10fbc <fp_insere@@Base+0x9c>
   10f38:	mov	r0, r2
   10f3c:	bl	11334 <elemento_cria@@Base>
   10f40:	ldr	r3, [r5]
   10f44:	cmp	r3, #0
   10f48:	mov	r6, r0
   10f4c:	ble	10fcc <fp_insere@@Base+0xac>
   10f50:	mov	r4, #0
   10f54:	b	10f64 <fp_insere@@Base+0x44>
   10f58:	add	r4, r4, #1
   10f5c:	cmp	r4, r3
   10f60:	bge	10fc4 <fp_insere@@Base+0xa4>
   10f64:	ldr	r3, [r5, #8]
   10f68:	mov	r1, r6
   10f6c:	lsl	r7, r4, #2
   10f70:	ldr	r0, [r3, r4, lsl #2]
   10f74:	bl	11368 <maior_que@@Base>
   10f78:	ldr	r3, [r5]
   10f7c:	cmp	r0, #0
   10f80:	bne	10f58 <fp_insere@@Base+0x38>
   10f84:	cmp	r4, r3
   10f88:	add	r2, r3, #1
   10f8c:	ldr	r0, [r5, #8]
   10f90:	bgt	10fac <fp_insere@@Base+0x8c>
   10f94:	add	r4, r0, r4, lsl #2
   10f98:	add	r3, r0, r2, lsl #2
   10f9c:	ldr	r1, [r3, #-4]!
   10fa0:	cmp	r3, r4
   10fa4:	str	r1, [r3, #4]
   10fa8:	bne	10f9c <fp_insere@@Base+0x7c>
   10fac:	str	r6, [r0, r7]
   10fb0:	mov	r0, #1
   10fb4:	str	r2, [r5]
   10fb8:	pop	{r4, r5, r6, r7, r8, pc}
   10fbc:	mov	r0, #0
   10fc0:	pop	{r4, r5, r6, r7, r8, pc}
   10fc4:	lsl	r7, r4, #2
   10fc8:	b	10f84 <fp_insere@@Base+0x64>
   10fcc:	mov	r7, #0
   10fd0:	mov	r4, r7
   10fd4:	b	10f84 <fp_insere@@Base+0x64>
   10fd8:	mvn	r0, #0
   10fdc:	pop	{r4, r5, r6, r7, r8, pc}

00010fe0 <fp_remove@@Base>:
   10fe0:	cmp	r0, #0
   10fe4:	bxeq	lr
   10fe8:	ldr	ip, [r0]
   10fec:	cmp	ip, #0
   10ff0:	beq	11028 <fp_remove@@Base+0x48>
   10ff4:	ldr	r3, [r0, #8]
   10ff8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ffc:	addgt	r1, r3, ip, lsl #2
   11000:	ldr	lr, [r3]
   11004:	ble	11018 <fp_remove@@Base+0x38>
   11008:	ldr	r2, [r3, #4]
   1100c:	str	r2, [r3], #4
   11010:	cmp	r3, r1
   11014:	bne	11008 <fp_remove@@Base+0x28>
   11018:	sub	ip, ip, #1
   1101c:	str	ip, [r0]
   11020:	ldr	r0, [lr, #4]
   11024:	pop	{pc}		; (ldr pc, [sp], #4)
   11028:	mov	r0, ip
   1102c:	bx	lr

00011030 <fp_carrega@@Base>:
   11030:	mov	r3, r1
   11034:	ldr	r1, [pc, #164]	; 110e0 <fp_carrega@@Base+0xb0>
   11038:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1103c:	add	r1, pc, r1
   11040:	sub	sp, sp, #264	; 0x108
   11044:	mov	r9, r0
   11048:	mov	r0, r3
   1104c:	bl	10a10 <fopen@plt>
   11050:	subs	r4, r0, #0
   11054:	beq	110d0 <fp_carrega@@Base+0xa0>
   11058:	ldr	r8, [pc, #132]	; 110e4 <fp_carrega@@Base+0xb4>
   1105c:	add	r7, sp, #4
   11060:	add	r8, pc, r8
   11064:	add	r5, sp, #8
   11068:	mov	sl, #256	; 0x100
   1106c:	b	110a8 <fp_carrega@@Base+0x78>
   11070:	bl	10a04 <__isoc99_fscanf@plt>
   11074:	mov	r2, r4
   11078:	mov	r1, sl
   1107c:	mov	r0, r5
   11080:	bl	10a34 <fgets@plt>
   11084:	mov	r0, r5
   11088:	bl	10a88 <strlen@plt>
   1108c:	add	r3, sp, #264	; 0x108
   11090:	ldr	r2, [sp, #4]
   11094:	mov	r1, r5
   11098:	add	r3, r3, r0
   1109c:	mov	r0, r9
   110a0:	strb	r6, [r3, #-257]	; 0xfffffeff
   110a4:	bl	10f20 <fp_insere@@Base>
   110a8:	mov	r0, r4
   110ac:	bl	10a7c <feof@plt>
   110b0:	mov	r2, r7
   110b4:	mov	r1, r8
   110b8:	subs	r6, r0, #0
   110bc:	mov	r0, r4
   110c0:	beq	11070 <fp_carrega@@Base+0x40>
   110c4:	bl	10aa0 <fclose@plt>
   110c8:	add	sp, sp, #264	; 0x108
   110cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   110d0:	ldr	r0, [pc, #16]	; 110e8 <fp_carrega@@Base+0xb8>
   110d4:	add	r0, pc, r0
   110d8:	bl	10a4c <puts@plt>
   110dc:	b	110c8 <fp_carrega@@Base+0x98>
   110e0:			; <UNDEFINED> instruction: 0x000005b8
   110e4:			; <UNDEFINED> instruction: 0x000005bc
   110e8:	andeq	r0, r0, r4, lsr #10

000110ec <heap_insere@@Base>:
   110ec:	push	{r4, r5, r6, r7, r8, lr}
   110f0:	ldr	ip, [r0, #4]
   110f4:	ldr	lr, [r0]
   110f8:	cmp	lr, ip
   110fc:	moveq	r4, #0
   11100:	beq	11194 <heap_insere@@Base+0xa8>
   11104:	mov	r5, r0
   11108:	mov	r8, r1
   1110c:	mov	r0, r3
   11110:	mov	r1, r2
   11114:	bl	11334 <elemento_cria@@Base>
   11118:	ldr	r2, [r5]
   1111c:	cmp	r2, #0
   11120:	movgt	r4, #0
   11124:	mov	r6, r0
   11128:	bgt	11140 <heap_insere@@Base+0x54>
   1112c:	b	111ac <heap_insere@@Base+0xc0>
   11130:	ldr	r2, [r5]
   11134:	add	r4, r4, #1
   11138:	cmp	r4, r2
   1113c:	bge	1119c <heap_insere@@Base+0xb0>
   11140:	ldr	r3, [r5, #8]
   11144:	mov	r1, r6
   11148:	lsl	r7, r4, #2
   1114c:	ldr	r0, [r3, r4, lsl #2]
   11150:	blx	r8
   11154:	cmp	r0, #1
   11158:	bne	11130 <heap_insere@@Base+0x44>
   1115c:	cmp	r4, #0
   11160:	ldr	r2, [r5]
   11164:	ble	111a4 <heap_insere@@Base+0xb8>
   11168:	ldr	ip, [r5, #8]
   1116c:	add	r3, r4, #1
   11170:	add	r0, ip, #4
   11174:	add	r3, ip, r3, lsl #2
   11178:	ldr	r1, [r3, #-4]!
   1117c:	cmp	r0, r3
   11180:	str	r1, [r3, #4]
   11184:	bne	11178 <heap_insere@@Base+0x8c>
   11188:	add	r2, r2, #1
   1118c:	str	r6, [ip, r7]
   11190:	str	r2, [r5]
   11194:	mov	r0, r4
   11198:	pop	{r4, r5, r6, r7, r8, pc}
   1119c:	lsl	r7, r4, #2
   111a0:	b	11168 <heap_insere@@Base+0x7c>
   111a4:	ldr	ip, [r5, #8]
   111a8:	b	11188 <heap_insere@@Base+0x9c>
   111ac:	mov	r7, #0
   111b0:	mov	r4, r7
   111b4:	ldr	ip, [r5, #8]
   111b8:	b	11188 <heap_insere@@Base+0x9c>

000111bc <heap_remove@@Base>:
   111bc:	mov	r0, #0
   111c0:	bx	lr

000111c4 <heap_carrega@@Base>:
   111c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111c8:	mov	sl, r1
   111cc:	ldr	r1, [pc, #164]	; 11278 <heap_carrega@@Base+0xb4>
   111d0:	sub	sp, sp, #268	; 0x10c
   111d4:	mov	r9, r0
   111d8:	add	r1, pc, r1
   111dc:	mov	r0, r2
   111e0:	bl	10a10 <fopen@plt>
   111e4:	subs	r4, r0, #0
   111e8:	beq	11268 <heap_carrega@@Base+0xa4>
   111ec:	ldr	r8, [pc, #136]	; 1127c <heap_carrega@@Base+0xb8>
   111f0:	add	r7, sp, #4
   111f4:	add	r8, pc, r8
   111f8:	add	r5, sp, #8
   111fc:	mov	fp, #256	; 0x100
   11200:	b	11240 <heap_carrega@@Base+0x7c>
   11204:	bl	10a04 <__isoc99_fscanf@plt>
   11208:	mov	r2, r4
   1120c:	mov	r1, fp
   11210:	mov	r0, r5
   11214:	bl	10a34 <fgets@plt>
   11218:	mov	r0, r5
   1121c:	bl	10a88 <strlen@plt>
   11220:	add	ip, sp, #264	; 0x108
   11224:	ldr	r3, [sp, #4]
   11228:	mov	r2, r5
   1122c:	mov	r1, sl
   11230:	add	ip, ip, r0
   11234:	mov	r0, r9
   11238:	strb	r6, [ip, #-257]	; 0xfffffeff
   1123c:	bl	110ec <heap_insere@@Base>
   11240:	mov	r0, r4
   11244:	bl	10a7c <feof@plt>
   11248:	mov	r2, r7
   1124c:	mov	r1, r8
   11250:	subs	r6, r0, #0
   11254:	mov	r0, r4
   11258:	beq	11204 <heap_carrega@@Base+0x40>
   1125c:	bl	10aa0 <fclose@plt>
   11260:	add	sp, sp, #268	; 0x10c
   11264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11268:	ldr	r0, [pc, #16]	; 11280 <heap_carrega@@Base+0xbc>
   1126c:	add	r0, pc, r0
   11270:	bl	10a4c <puts@plt>
   11274:	b	11260 <heap_carrega@@Base+0x9c>
   11278:	andeq	r0, r0, ip, lsl r4
   1127c:	andeq	r0, r0, r8, lsr #8
   11280:	andeq	r0, r0, ip, lsl #7

00011284 <vetor_cria@@Base>:
   11284:	push	{r4, r5, r6, lr}
   11288:	mov	r5, r0
   1128c:	mov	r0, #12
   11290:	bl	10a58 <malloc@plt>
   11294:	subs	r4, r0, #0
   11298:	beq	112c4 <vetor_cria@@Base+0x40>
   1129c:	mov	r3, #0
   112a0:	str	r5, [r4, #4]
   112a4:	mov	r0, r5
   112a8:	str	r3, [r4]
   112ac:	mov	r1, #4
   112b0:	bl	109e0 <calloc@plt>
   112b4:	cmp	r0, #0
   112b8:	mov	r5, r0
   112bc:	str	r0, [r4, #8]
   112c0:	beq	112cc <vetor_cria@@Base+0x48>
   112c4:	mov	r0, r4
   112c8:	pop	{r4, r5, r6, pc}
   112cc:	mov	r0, r4
   112d0:	bl	10a28 <free@plt>
   112d4:	mov	r4, r5
   112d8:	b	112c4 <vetor_cria@@Base+0x40>

000112dc <vetor_criaHeap@@Base>:
   112dc:	push	{r4, r5, r6, lr}
   112e0:	mov	r5, r0
   112e4:	mov	r0, #12
   112e8:	bl	10a58 <malloc@plt>
   112ec:	subs	r4, r0, #0
   112f0:	beq	1131c <vetor_criaHeap@@Base+0x40>
   112f4:	mov	r3, #0
   112f8:	str	r5, [r4, #4]
   112fc:	add	r0, r5, #1
   11300:	str	r3, [r4]
   11304:	mov	r1, #4
   11308:	bl	109e0 <calloc@plt>
   1130c:	cmp	r0, #0
   11310:	mov	r5, r0
   11314:	str	r0, [r4, #8]
   11318:	beq	11324 <vetor_criaHeap@@Base+0x48>
   1131c:	mov	r0, r4
   11320:	pop	{r4, r5, r6, pc}
   11324:	mov	r0, r4
   11328:	bl	10a28 <free@plt>
   1132c:	mov	r4, r5
   11330:	b	1131c <vetor_criaHeap@@Base+0x40>

00011334 <elemento_cria@@Base>:
   11334:	push	{r4, r5, r6, lr}
   11338:	mov	r5, r0
   1133c:	mov	r0, #8
   11340:	mov	r6, r1
   11344:	bl	10a58 <malloc@plt>
   11348:	subs	r4, r0, #0
   1134c:	beq	11360 <elemento_cria@@Base+0x2c>
   11350:	mov	r0, r6
   11354:	bl	10a40 <strdup@plt>
   11358:	str	r5, [r4]
   1135c:	str	r0, [r4, #4]
   11360:	mov	r0, r4
   11364:	pop	{r4, r5, r6, pc}

00011368 <maior_que@@Base>:
   11368:	push	{r4, r5, r6, lr}
   1136c:	cmp	r1, #0
   11370:	cmpne	r0, #0
   11374:	ldr	r4, [pc, #92]	; 113d8 <maior_que@@Base+0x70>
   11378:	add	r4, pc, r4
   1137c:	beq	113c4 <maior_que@@Base+0x5c>
   11380:	ldr	r3, [pc, #84]	; 113dc <maior_que@@Base+0x74>
   11384:	mov	r6, r0
   11388:	mov	r5, r1
   1138c:	ldr	r3, [r4, r3]
   11390:	ldr	r0, [r3]
   11394:	bl	10a1c <fflush@plt>
   11398:	ldr	r3, [pc, #64]	; 113e0 <maior_que@@Base+0x78>
   1139c:	ldr	r0, [r6]
   113a0:	ldr	r1, [r5]
   113a4:	ldr	r2, [r4, r3]
   113a8:	cmp	r0, r1
   113ac:	movle	r0, #0
   113b0:	ldr	r3, [r2]
   113b4:	movgt	r0, #1
   113b8:	add	r3, r3, #1
   113bc:	str	r3, [r2]
   113c0:	pop	{r4, r5, r6, pc}
   113c4:	ldr	r0, [pc, #24]	; 113e4 <maior_que@@Base+0x7c>
   113c8:	add	r0, pc, r0
   113cc:	bl	10a4c <puts@plt>
   113d0:	mov	r0, #0
   113d4:	pop	{r4, r5, r6, pc}
   113d8:	andeq	r0, r1, r0, lsl #25
   113dc:	andeq	r0, r0, r4, rrx
   113e0:	andeq	r0, r0, r8, asr r0
   113e4:	andeq	r0, r0, ip, asr #11

000113e8 <maior_que_HeapSort@@Base>:
   113e8:	push	{r4, r5, r6, lr}
   113ec:	cmp	r1, #0
   113f0:	cmpne	r0, #0
   113f4:	ldr	r4, [pc, #88]	; 11454 <maior_que_HeapSort@@Base+0x6c>
   113f8:	add	r4, pc, r4
   113fc:	beq	11440 <maior_que_HeapSort@@Base+0x58>
   11400:	ldr	r3, [pc, #80]	; 11458 <maior_que_HeapSort@@Base+0x70>
   11404:	mov	r5, r0
   11408:	mov	r6, r1
   1140c:	ldr	r3, [r4, r3]
   11410:	ldr	r0, [r3]
   11414:	bl	10a1c <fflush@plt>
   11418:	ldr	r3, [pc, #60]	; 1145c <maior_que_HeapSort@@Base+0x74>
   1141c:	ldr	r1, [r6, #4]
   11420:	ldr	r0, [r5, #4]
   11424:	ldr	r2, [r4, r3]
   11428:	ldr	r3, [r2]
   1142c:	add	r3, r3, #1
   11430:	str	r3, [r2]
   11434:	bl	109ec <strcmp@plt>
   11438:	lsr	r0, r0, #31
   1143c:	pop	{r4, r5, r6, pc}
   11440:	ldr	r0, [pc, #24]	; 11460 <maior_que_HeapSort@@Base+0x78>
   11444:	add	r0, pc, r0
   11448:	bl	10a4c <puts@plt>
   1144c:	mov	r0, #0
   11450:	pop	{r4, r5, r6, pc}
   11454:	andeq	r0, r1, r0, lsl #24
   11458:	andeq	r0, r0, r4, rrx
   1145c:	andeq	r0, r0, r8, asr r0
   11460:	andeq	r0, r0, r0, asr r5

00011464 <vetor_imprime@@Base>:
   11464:	ldr	r3, [r0]
   11468:	cmp	r3, #0
   1146c:	ble	114e0 <vetor_imprime@@Base+0x7c>
   11470:	ldr	r3, [r0, #8]
   11474:	push	{r4, r5, r6, lr}
   11478:	mov	r5, r0
   1147c:	ldr	r3, [r3]
   11480:	ldr	r0, [pc, #100]	; 114ec <vetor_imprime@@Base+0x88>
   11484:	ldr	r6, [pc, #100]	; 114f0 <vetor_imprime@@Base+0x8c>
   11488:	ldr	r2, [r3]
   1148c:	ldr	r1, [r3, #4]
   11490:	add	r0, pc, r0
   11494:	bl	109f8 <printf@plt>
   11498:	ldr	r3, [r5]
   1149c:	add	r6, pc, r6
   114a0:	cmp	r3, #1
   114a4:	mov	r4, #1
   114a8:	ble	114d4 <vetor_imprime@@Base+0x70>
   114ac:	ldr	r3, [r5, #8]
   114b0:	mov	r0, r6
   114b4:	ldr	r3, [r3, r4, lsl #2]
   114b8:	add	r4, r4, #1
   114bc:	ldr	r2, [r3]
   114c0:	ldr	r1, [r3, #4]
   114c4:	bl	109f8 <printf@plt>
   114c8:	ldr	r3, [r5]
   114cc:	cmp	r3, r4
   114d0:	bgt	114ac <vetor_imprime@@Base+0x48>
   114d4:	mov	r0, #10
   114d8:	pop	{r4, r5, r6, lr}
   114dc:	b	10a94 <putchar@plt>
   114e0:	ldr	r0, [pc, #12]	; 114f4 <vetor_imprime@@Base+0x90>
   114e4:	add	r0, pc, r0
   114e8:	b	10a4c <puts@plt>
   114ec:	andeq	r0, r0, r0, lsl r5
   114f0:	andeq	r0, r0, ip, lsr r5
   114f4:	ldrdeq	r0, [r0], -ip

000114f8 <vetor_imprimeHeap@@Base>:
   114f8:	ldr	r3, [r0]
   114fc:	cmp	r3, #0
   11500:	ble	11574 <vetor_imprimeHeap@@Base+0x7c>
   11504:	ldr	r3, [r0, #8]
   11508:	push	{r4, r5, r6, lr}
   1150c:	mov	r5, r0
   11510:	ldr	r3, [r3, #4]
   11514:	ldr	r0, [pc, #100]	; 11580 <vetor_imprimeHeap@@Base+0x88>
   11518:	ldr	r6, [pc, #100]	; 11584 <vetor_imprimeHeap@@Base+0x8c>
   1151c:	ldr	r2, [r3]
   11520:	ldr	r1, [r3, #4]
   11524:	add	r0, pc, r0
   11528:	bl	109f8 <printf@plt>
   1152c:	ldr	r3, [r5]
   11530:	add	r6, pc, r6
   11534:	cmp	r3, #2
   11538:	mov	r4, #2
   1153c:	ble	11568 <vetor_imprimeHeap@@Base+0x70>
   11540:	ldr	r3, [r5, #8]
   11544:	mov	r0, r6
   11548:	ldr	r3, [r3, r4, lsl #2]
   1154c:	add	r4, r4, #1
   11550:	ldr	r2, [r3]
   11554:	ldr	r1, [r3, #4]
   11558:	bl	109f8 <printf@plt>
   1155c:	ldr	r3, [r5]
   11560:	cmp	r3, r4
   11564:	bgt	11540 <vetor_imprimeHeap@@Base+0x48>
   11568:	mov	r0, #10
   1156c:	pop	{r4, r5, r6, lr}
   11570:	b	10a94 <putchar@plt>
   11574:	ldr	r0, [pc, #12]	; 11588 <vetor_imprimeHeap@@Base+0x90>
   11578:	add	r0, pc, r0
   1157c:	b	10a4c <puts@plt>
   11580:	andeq	r0, r0, ip, ror r4
   11584:	andeq	r0, r0, r8, lsr #9
   11588:	andeq	r0, r0, r8, asr #8

0001158c <__libc_csu_init@@Base>:
   1158c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11590:	mov	r7, r0
   11594:	ldr	r6, [pc, #72]	; 115e4 <__libc_csu_init@@Base+0x58>
   11598:	ldr	r5, [pc, #72]	; 115e8 <__libc_csu_init@@Base+0x5c>
   1159c:	add	r6, pc, r6
   115a0:	add	r5, pc, r5
   115a4:	sub	r6, r6, r5
   115a8:	mov	r8, r1
   115ac:	mov	r9, r2
   115b0:	bl	109c0 <calloc@plt-0x20>
   115b4:	asrs	r6, r6, #2
   115b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   115bc:	mov	r4, #0
   115c0:	add	r4, r4, #1
   115c4:	ldr	r3, [r5], #4
   115c8:	mov	r2, r9
   115cc:	mov	r1, r8
   115d0:	mov	r0, r7
   115d4:	blx	r3
   115d8:	cmp	r6, r4
   115dc:	bne	115c0 <__libc_csu_init@@Base+0x34>
   115e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   115e4:	andeq	r0, r1, ip, ror #18
   115e8:	andeq	r0, r1, r4, ror #18

000115ec <__libc_csu_fini@@Base>:
   115ec:	bx	lr

Disassembly of section .fini:

000115f0 <.fini>:
   115f0:	push	{r3, lr}
   115f4:	pop	{r3, pc}
