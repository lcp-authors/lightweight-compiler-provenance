
../repos/babelouest-orcania-3c014d0/liborcania.so.2.1.0:     file format elf32-littlearm


Disassembly of section .init:

00000ff8 <.init>:
     ff8:	push	{r3, lr}
     ffc:	bl	1150 <o_strchr@plt+0xc>
    1000:	pop	{r3, pc}

Disassembly of section .plt:

00001004 <strstr@plt-0x14>:
    1004:	push	{lr}		; (str lr, [sp, #-4]!)
    1008:	ldr	lr, [pc, #4]	; 1014 <strstr@plt-0x4>
    100c:	add	lr, pc, lr
    1010:	ldr	pc, [lr, #8]!
    1014:	andeq	r2, r1, ip, ror #31

00001018 <strstr@plt>:
    1018:	add	ip, pc, #0, 12
    101c:	add	ip, ip, #73728	; 0x12000
    1020:	ldr	pc, [ip, #4076]!	; 0xfec

00001024 <strcasestr@plt>:
    1024:	add	ip, pc, #0, 12
    1028:	add	ip, ip, #73728	; 0x12000
    102c:	ldr	pc, [ip, #4068]!	; 0xfe4

00001030 <strcmp@plt>:
    1030:	add	ip, pc, #0, 12
    1034:	add	ip, ip, #73728	; 0x12000
    1038:	ldr	pc, [ip, #4060]!	; 0xfdc

0000103c <__cxa_finalize@plt>:
    103c:	add	ip, pc, #0, 12
    1040:	add	ip, ip, #73728	; 0x12000
    1044:	ldr	pc, [ip, #4052]!	; 0xfd4

00001048 <o_free@plt>:
    1048:	add	ip, pc, #0, 12
    104c:	add	ip, ip, #73728	; 0x12000
    1050:	ldr	pc, [ip, #4044]!	; 0xfcc

00001054 <memcpy@plt>:
    1054:	add	ip, pc, #0, 12
    1058:	add	ip, ip, #73728	; 0x12000
    105c:	ldr	pc, [ip, #4036]!	; 0xfc4

00001060 <o_base64_encode@plt>:
    1060:	add	ip, pc, #0, 12
    1064:	add	ip, ip, #73728	; 0x12000
    1068:	ldr	pc, [ip, #4028]!	; 0xfbc

0000106c <strcasecmp@plt>:
    106c:	add	ip, pc, #0, 12
    1070:	add	ip, ip, #73728	; 0x12000
    1074:	ldr	pc, [ip, #4020]!	; 0xfb4

00001078 <strcpy@plt>:
    1078:	add	ip, pc, #0, 12
    107c:	add	ip, ip, #73728	; 0x12000
    1080:	ldr	pc, [ip, #4012]!	; 0xfac

00001084 <o_realloc@plt>:
    1084:	add	ip, pc, #0, 12
    1088:	add	ip, ip, #73728	; 0x12000
    108c:	ldr	pc, [ip, #4004]!	; 0xfa4

00001090 <str_replace@plt>:
    1090:	add	ip, pc, #0, 12
    1094:	add	ip, ip, #73728	; 0x12000
    1098:	ldr	pc, [ip, #3996]!	; 0xf9c

0000109c <__gmon_start__@plt>:
    109c:	add	ip, pc, #0, 12
    10a0:	add	ip, ip, #73728	; 0x12000
    10a4:	ldr	pc, [ip, #3988]!	; 0xf94

000010a8 <__ctype_b_loc@plt>:
    10a8:	add	ip, pc, #0, 12
    10ac:	add	ip, ip, #73728	; 0x12000
    10b0:	ldr	pc, [ip, #3980]!	; 0xf8c

000010b4 <strlen@plt>:
    10b4:	add	ip, pc, #0, 12
    10b8:	add	ip, ip, #73728	; 0x12000
    10bc:	ldr	pc, [ip, #3972]!	; 0xf84

000010c0 <strchr@plt>:
    10c0:	add	ip, pc, #0, 12
    10c4:	add	ip, ip, #73728	; 0x12000
    10c8:	ldr	pc, [ip, #3964]!	; 0xf7c

000010cc <strncasecmp@plt>:
    10cc:	add	ip, pc, #0, 12
    10d0:	add	ip, ip, #73728	; 0x12000
    10d4:	ldr	pc, [ip, #3956]!	; 0xf74

000010d8 <snprintf@plt>:
    10d8:	add	ip, pc, #0, 12
    10dc:	add	ip, ip, #73728	; 0x12000
    10e0:	ldr	pc, [ip, #3948]!	; 0xf6c

000010e4 <o_malloc@plt>:
    10e4:	add	ip, pc, #0, 12
    10e8:	add	ip, ip, #73728	; 0x12000
    10ec:	ldr	pc, [ip, #3940]!	; 0xf64

000010f0 <memset@plt>:
    10f0:	add	ip, pc, #0, 12
    10f4:	add	ip, ip, #73728	; 0x12000
    10f8:	ldr	pc, [ip, #3932]!	; 0xf5c

000010fc <strncpy@plt>:
    10fc:	add	ip, pc, #0, 12
    1100:	add	ip, ip, #73728	; 0x12000
    1104:	ldr	pc, [ip, #3924]!	; 0xf54

00001108 <msprintf@plt>:
    1108:	add	ip, pc, #0, 12
    110c:	add	ip, ip, #73728	; 0x12000
    1110:	ldr	pc, [ip, #3916]!	; 0xf4c

00001114 <strrchr@plt>:
    1114:	add	ip, pc, #0, 12
    1118:	add	ip, ip, #73728	; 0x12000
    111c:	ldr	pc, [ip, #3908]!	; 0xf44

00001120 <o_base64_decode@plt>:
    1120:	add	ip, pc, #0, 12
    1124:	add	ip, ip, #73728	; 0x12000
    1128:	ldr	pc, [ip, #3900]!	; 0xf3c

0000112c <vsnprintf@plt>:
    112c:	add	ip, pc, #0, 12
    1130:	add	ip, ip, #73728	; 0x12000
    1134:	ldr	pc, [ip, #3892]!	; 0xf34

00001138 <strncmp@plt>:
    1138:	add	ip, pc, #0, 12
    113c:	add	ip, ip, #73728	; 0x12000
    1140:	ldr	pc, [ip, #3884]!	; 0xf2c

00001144 <o_strchr@plt>:
    1144:	add	ip, pc, #0, 12
    1148:	add	ip, ip, #73728	; 0x12000
    114c:	ldr	pc, [ip, #3876]!	; 0xf24

Disassembly of section .text:

00001150 <o_base64_encode@@Base-0x124>:
    1150:	ldr	r3, [pc, #20]	; 116c <o_strchr@plt+0x28>
    1154:	ldr	r2, [pc, #20]	; 1170 <o_strchr@plt+0x2c>
    1158:	add	r3, pc, r3
    115c:	ldr	r2, [r3, r2]
    1160:	cmp	r2, #0
    1164:	bxeq	lr
    1168:	b	109c <__gmon_start__@plt>
    116c:	andeq	r2, r1, r0, lsr #29
    1170:	andeq	r0, r0, ip, ror r0
    1174:	ldr	r0, [pc, #44]	; 11a8 <o_strchr@plt+0x64>
    1178:	ldr	r3, [pc, #44]	; 11ac <o_strchr@plt+0x68>
    117c:	add	r0, pc, r0
    1180:	add	r3, pc, r3
    1184:	cmp	r3, r0
    1188:	ldr	r3, [pc, #32]	; 11b0 <o_strchr@plt+0x6c>
    118c:	add	r3, pc, r3
    1190:	bxeq	lr
    1194:	ldr	r2, [pc, #24]	; 11b4 <o_strchr@plt+0x70>
    1198:	ldr	r3, [r3, r2]
    119c:	cmp	r3, #0
    11a0:	bxeq	lr
    11a4:	bx	r3
    11a8:	andeq	r2, r1, r0, lsl pc
    11ac:	andeq	r2, r1, ip, lsl #30
    11b0:	andeq	r2, r1, ip, ror #28
    11b4:	andeq	r0, r0, r8, ror r0
    11b8:	ldr	r0, [pc, #56]	; 11f8 <o_strchr@plt+0xb4>
    11bc:	ldr	r3, [pc, #56]	; 11fc <o_strchr@plt+0xb8>
    11c0:	add	r0, pc, r0
    11c4:	add	r3, pc, r3
    11c8:	sub	r1, r3, r0
    11cc:	ldr	r3, [pc, #44]	; 1200 <o_strchr@plt+0xbc>
    11d0:	asr	r1, r1, #2
    11d4:	add	r3, pc, r3
    11d8:	add	r1, r1, r1, lsr #31
    11dc:	asrs	r1, r1, #1
    11e0:	bxeq	lr
    11e4:	ldr	r2, [pc, #24]	; 1204 <o_strchr@plt+0xc0>
    11e8:	ldr	r3, [r3, r2]
    11ec:	cmp	r3, #0
    11f0:	bxeq	lr
    11f4:	bx	r3
    11f8:	andeq	r2, r1, ip, asr #29
    11fc:	andeq	r2, r1, r8, asr #29
    1200:	andeq	r2, r1, r4, lsr #28
    1204:	andeq	r0, r0, r0, lsl #1
    1208:	ldr	r3, [pc, #76]	; 125c <o_strchr@plt+0x118>
    120c:	ldr	r2, [pc, #76]	; 1260 <o_strchr@plt+0x11c>
    1210:	add	r3, pc, r3
    1214:	add	r2, pc, r2
    1218:	ldrb	r3, [r3]
    121c:	cmp	r3, #0
    1220:	bxne	lr
    1224:	ldr	r3, [pc, #56]	; 1264 <o_strchr@plt+0x120>
    1228:	push	{r4, lr}
    122c:	ldr	r3, [r2, r3]
    1230:	cmp	r3, #0
    1234:	beq	1244 <o_strchr@plt+0x100>
    1238:	ldr	r3, [pc, #40]	; 1268 <o_strchr@plt+0x124>
    123c:	ldr	r0, [pc, r3]
    1240:	bl	103c <__cxa_finalize@plt>
    1244:	bl	1174 <o_strchr@plt+0x30>
    1248:	ldr	r3, [pc, #28]	; 126c <o_strchr@plt+0x128>
    124c:	mov	r2, #1
    1250:	add	r3, pc, r3
    1254:	strb	r2, [r3]
    1258:	pop	{r4, pc}
    125c:	andeq	r2, r1, ip, ror lr
    1260:	andeq	r2, r1, r4, ror #27
    1264:	andeq	r0, r0, r4, ror r0
    1268:	andeq	r2, r1, r0, asr #28
    126c:	andeq	r2, r1, ip, lsr lr
    1270:	b	11b8 <o_strchr@plt+0x74>

00001274 <o_base64_encode@@Base>:
    1274:	push	{r4, r5, r6, sl, fp, lr}
    1278:	add	fp, sp, #16
    127c:	cmp	r3, #0
    1280:	mov	ip, #0
    1284:	cmpne	r0, #0
    1288:	beq	1454 <o_base64_encode@@Base+0x1e0>
    128c:	movw	r4, #43691	; 0xaaab
    1290:	lsl	r5, r1, #2
    1294:	movt	r4, #43690	; 0xaaaa
    1298:	umull	r5, r4, r5, r4
    129c:	mov	r5, #4
    12a0:	add	lr, r5, r4, lsr #1
    12a4:	movw	r5, #36409	; 0x8e39
    12a8:	lsr	r4, r4, #1
    12ac:	movt	r5, #14563	; 0x38e3
    12b0:	umull	r5, lr, lr, r5
    12b4:	add	r5, r4, lr, lsr #4
    12b8:	add	r5, r5, #5
    12bc:	cmp	r5, r1
    12c0:	bcc	1454 <o_base64_encode@@Base+0x1e0>
    12c4:	mov	ip, #0
    12c8:	cmp	r1, #3
    12cc:	str	ip, [r3]
    12d0:	blt	1368 <o_base64_encode@@Base+0xf4>
    12d4:	ldr	r5, [pc, #384]	; 145c <o_base64_encode@@Base+0x1e8>
    12d8:	add	r6, r0, r1
    12dc:	mov	ip, #0
    12e0:	add	r5, pc, r5
    12e4:	b	1304 <o_base64_encode@@Base+0x90>
    12e8:	add	r0, r0, #3
    12ec:	add	ip, ip, #4
    12f0:	mov	r2, lr
    12f4:	sub	r1, r6, r0
    12f8:	str	ip, [r3]
    12fc:	cmp	r1, #2
    1300:	ble	136c <o_base64_encode@@Base+0xf8>
    1304:	cmp	r2, #0
    1308:	mov	lr, #0
    130c:	beq	12e8 <o_base64_encode@@Base+0x74>
    1310:	ldrb	r1, [r0]
    1314:	add	lr, r2, #4
    1318:	ldrb	r1, [r5, r1, lsr #2]
    131c:	strb	r1, [r2]
    1320:	ldrb	r4, [r0, #1]
    1324:	ldrb	r1, [r0]
    1328:	lsr	r4, r4, #4
    132c:	bfi	r4, r1, #4, #2
    1330:	ldrb	r1, [r5, r4]
    1334:	strb	r1, [r2, #1]
    1338:	ldrb	r4, [r0, #2]
    133c:	ldrb	r1, [r0, #1]
    1340:	lsr	r4, r4, #6
    1344:	bfi	r4, r1, #2, #4
    1348:	ldrb	r1, [r5, r4]
    134c:	strb	r1, [r2, #2]
    1350:	ldrb	r1, [r0, #2]
    1354:	and	r1, r1, #63	; 0x3f
    1358:	ldrb	r1, [r5, r1]
    135c:	strb	r1, [r2, #3]
    1360:	ldr	ip, [r3]
    1364:	b	12e8 <o_base64_encode@@Base+0x74>
    1368:	mov	lr, r2
    136c:	cmp	r1, #0
    1370:	beq	1444 <o_base64_encode@@Base+0x1d0>
    1374:	cmp	lr, #0
    1378:	beq	1398 <o_base64_encode@@Base+0x124>
    137c:	ldrb	r2, [r0]
    1380:	ldr	r6, [pc, #216]	; 1460 <o_base64_encode@@Base+0x1ec>
    1384:	add	r6, pc, r6
    1388:	ldrb	r2, [r6, r2, lsr #2]
    138c:	strb	r2, [lr], #1
    1390:	ldr	ip, [r3]
    1394:	b	139c <o_base64_encode@@Base+0x128>
    1398:	mov	lr, #0
    139c:	add	r2, ip, #1
    13a0:	cmp	r1, #1
    13a4:	str	r2, [r3]
    13a8:	bne	13d8 <o_base64_encode@@Base+0x164>
    13ac:	cmp	lr, #0
    13b0:	beq	1430 <o_base64_encode@@Base+0x1bc>
    13b4:	mov	r1, #61	; 0x3d
    13b8:	ldrb	r0, [r0]
    13bc:	strb	r1, [lr, #1]
    13c0:	ldr	r1, [pc, #156]	; 1464 <o_base64_encode@@Base+0x1f0>
    13c4:	and	r0, r0, #3
    13c8:	add	r1, pc, r1
    13cc:	ldrb	r0, [r1, r0, lsl #4]
    13d0:	strb	r0, [lr]
    13d4:	b	1410 <o_base64_encode@@Base+0x19c>
    13d8:	cmp	lr, #0
    13dc:	beq	1430 <o_base64_encode@@Base+0x1bc>
    13e0:	ldrb	r2, [r0, #1]
    13e4:	ldrb	r1, [r0]
    13e8:	lsr	r2, r2, #4
    13ec:	bfi	r2, r1, #4, #2
    13f0:	ldr	r1, [pc, #112]	; 1468 <o_base64_encode@@Base+0x1f4>
    13f4:	add	r1, pc, r1
    13f8:	ldrb	r2, [r1, r2]
    13fc:	strb	r2, [lr]
    1400:	ldrb	r0, [r0, #1]
    1404:	and	r0, r0, #15
    1408:	ldrb	r0, [r1, r0, lsl #2]
    140c:	strb	r0, [lr, #1]
    1410:	ldr	r0, [r3]
    1414:	add	r0, r0, #2
    1418:	str	r0, [r3]
    141c:	mov	r0, #61	; 0x3d
    1420:	strb	r0, [lr, #2]
    1424:	add	lr, lr, #3
    1428:	ldr	r0, [r3]
    142c:	b	143c <o_base64_encode@@Base+0x1c8>
    1430:	add	r0, ip, #3
    1434:	mov	lr, #0
    1438:	str	r0, [r3]
    143c:	add	r0, r0, #1
    1440:	str	r0, [r3]
    1444:	cmp	lr, #0
    1448:	mov	ip, #1
    144c:	movne	r0, #0
    1450:	strbne	r0, [lr]
    1454:	mov	r0, ip
    1458:	pop	{r4, r5, r6, sl, fp, pc}
    145c:	andeq	r1, r0, ip, lsr pc
    1460:	muleq	r0, r8, lr
    1464:	andeq	r1, r0, r4, asr lr
    1468:	andeq	r1, r0, r8, lsr #28

0000146c <o_base64_decode@@Base>:
    146c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1470:	add	fp, sp, #28
    1474:	sub	sp, sp, #268	; 0x10c
    1478:	mov	r9, r0
    147c:	mov	r0, #0
    1480:	cmp	r9, #0
    1484:	beq	149c <o_base64_decode@@Base+0x30>
    1488:	cmp	r1, #0
    148c:	mov	r5, r1
    1490:	movne	r8, r3
    1494:	cmpne	r3, #0
    1498:	bne	14a4 <o_base64_decode@@Base+0x38>
    149c:	sub	sp, fp, #28
    14a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14a4:	add	r4, sp, #8
    14a8:	mov	sl, r2
    14ac:	mov	r1, #128	; 0x80
    14b0:	mov	r2, #256	; 0x100
    14b4:	mov	r0, r4
    14b8:	bl	10f0 <memset@plt>
    14bc:	ldr	r1, [pc, #476]	; 16a0 <o_base64_decode@@Base+0x234>
    14c0:	mov	r0, #0
    14c4:	add	r1, pc, r1
    14c8:	mov	r2, r1
    14cc:	ldrb	r3, [r2, r0]!
    14d0:	ldrb	r2, [r2, #1]
    14d4:	strb	r0, [r4, r3]
    14d8:	add	r3, r0, #1
    14dc:	add	r0, r0, #2
    14e0:	cmp	r0, #64	; 0x40
    14e4:	strb	r3, [r4, r2]
    14e8:	bne	14c8 <o_base64_decode@@Base+0x5c>
    14ec:	mov	r1, #0
    14f0:	and	r0, r5, #1
    14f4:	cmp	r5, #1
    14f8:	mov	r2, #0
    14fc:	strb	r1, [sp, #69]	; 0x45
    1500:	beq	1540 <o_base64_decode@@Base+0xd4>
    1504:	sub	r3, r5, r0
    1508:	mov	r1, #0
    150c:	mov	r2, #0
    1510:	mov	r6, r9
    1514:	ldrb	r7, [r6, r2]!
    1518:	add	r2, r2, #2
    151c:	ldrb	r6, [r6, #1]
    1520:	ldrb	r7, [r4, r7]
    1524:	ldrb	r6, [r4, r6]
    1528:	cmp	r7, #128	; 0x80
    152c:	addne	r1, r1, #1
    1530:	cmp	r6, #128	; 0x80
    1534:	addne	r1, r1, #1
    1538:	cmp	r3, r2
    153c:	bne	1510 <o_base64_decode@@Base+0xa4>
    1540:	cmp	r0, #0
    1544:	beq	1558 <o_base64_decode@@Base+0xec>
    1548:	ldrb	r0, [r9, r2]
    154c:	ldrb	r0, [r4, r0]
    1550:	cmp	r0, #128	; 0x80
    1554:	addne	r1, r1, #1
    1558:	mov	r0, #0
    155c:	cmp	r1, #0
    1560:	beq	149c <o_base64_decode@@Base+0x30>
    1564:	ands	r1, r1, #3
    1568:	bne	149c <o_base64_decode@@Base+0x30>
    156c:	mov	r0, r8
    1570:	mov	r8, #0
    1574:	mov	r7, #0
    1578:	str	r0, [sp]
    157c:	str	r8, [r0]
    1580:	ldr	r6, [pc, #284]	; 16a4 <o_base64_decode@@Base+0x238>
    1584:	add	r6, pc, r6
    1588:	b	1598 <o_base64_decode@@Base+0x12c>
    158c:	add	r9, r9, #1
    1590:	subs	r5, r5, #1
    1594:	beq	1694 <o_base64_decode@@Base+0x228>
    1598:	ldrb	r1, [r9]
    159c:	mov	r0, r6
    15a0:	bl	1144 <o_strchr@plt>
    15a4:	ldrb	r1, [r9]
    15a8:	cmp	r0, #0
    15ac:	bne	15c8 <o_base64_decode@@Base+0x15c>
    15b0:	sub	r0, r1, #9
    15b4:	cmp	r0, #2
    15b8:	bcc	15c8 <o_base64_decode@@Base+0x15c>
    15bc:	cmp	r1, #61	; 0x3d
    15c0:	cmpne	r1, #32
    15c4:	bne	165c <o_base64_decode@@Base+0x1f0>
    15c8:	ldrb	r0, [r4, r1]
    15cc:	cmp	r0, #128	; 0x80
    15d0:	beq	158c <o_base64_decode@@Base+0x120>
    15d4:	add	r2, sp, #4
    15d8:	cmp	r1, #61	; 0x3d
    15dc:	strb	r0, [r2, r7]
    15e0:	add	r7, r7, #1
    15e4:	addeq	r8, r8, #1
    15e8:	cmp	r7, #4
    15ec:	bne	158c <o_base64_decode@@Base+0x120>
    15f0:	mov	r0, #0
    15f4:	cmp	sl, #0
    15f8:	mov	r2, #0
    15fc:	beq	1638 <o_base64_decode@@Base+0x1cc>
    1600:	ldrb	r2, [sp, #5]
    1604:	ldrb	r1, [sp, #4]
    1608:	lsr	r3, r2, #4
    160c:	orr	r1, r3, r1, lsl #2
    1610:	strb	r1, [sl]
    1614:	ldrb	r1, [sp, #6]
    1618:	lsr	r1, r1, #2
    161c:	orr	r1, r1, r2, lsl #4
    1620:	strb	r1, [sl, #1]
    1624:	ldrb	r1, [sp, #6]
    1628:	ldrb	r2, [sp, #7]
    162c:	orr	r1, r2, r1, lsl #6
    1630:	add	r2, sl, #3
    1634:	strb	r1, [sl, #2]
    1638:	ldr	r7, [sp]
    163c:	cmp	r8, #0
    1640:	ldr	r1, [r7]
    1644:	add	r3, r1, #3
    1648:	str	r3, [r7]
    164c:	bne	1668 <o_base64_decode@@Base+0x1fc>
    1650:	mov	sl, r2
    1654:	mov	r7, r8
    1658:	b	158c <o_base64_decode@@Base+0x120>
    165c:	mov	r0, #0
    1660:	sub	sp, fp, #28
    1664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1668:	cmp	r8, #2
    166c:	beq	1688 <o_base64_decode@@Base+0x21c>
    1670:	ldr	r2, [sp]
    1674:	cmp	r8, #1
    1678:	bne	149c <o_base64_decode@@Base+0x30>
    167c:	add	r0, r1, #2
    1680:	str	r0, [r2]
    1684:	b	1694 <o_base64_decode@@Base+0x228>
    1688:	add	r0, r1, #1
    168c:	ldr	r1, [sp]
    1690:	str	r0, [r1]
    1694:	mov	r0, #1
    1698:	sub	sp, fp, #28
    169c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16a0:	andeq	r1, r0, r8, asr sp
    16a4:	muleq	r0, r8, ip

000016a8 <o_base64url_encode@@Base>:
    16a8:	push	{r4, r5, fp, lr}
    16ac:	add	fp, sp, #8
    16b0:	mov	r4, r3
    16b4:	cmp	r2, #0
    16b8:	beq	16f4 <o_base64url_encode@@Base+0x4c>
    16bc:	mov	r3, r4
    16c0:	mov	r5, r2
    16c4:	bl	1060 <o_base64_encode@plt>
    16c8:	cmp	r0, #0
    16cc:	beq	1744 <o_base64url_encode@@Base+0x9c>
    16d0:	ldr	r2, [r4]
    16d4:	cmp	r2, #2
    16d8:	bcc	174c <o_base64url_encode@@Base+0xa4>
    16dc:	add	r1, r2, r5
    16e0:	mvn	r3, #1
    16e4:	ldrb	ip, [r1, #-2]!
    16e8:	cmp	ip, #61	; 0x3d
    16ec:	bne	1754 <o_base64url_encode@@Base+0xac>
    16f0:	b	1768 <o_base64url_encode@@Base+0xc0>
    16f4:	cmp	r1, #0
    16f8:	mov	r0, #0
    16fc:	cmpne	r4, #0
    1700:	beq	17bc <o_base64url_encode@@Base+0x114>
    1704:	vmov	s0, r1
    1708:	vmov.f64	d16, #16	; 0x40800000  4.0
    170c:	vmov.f64	d18, #8	; 0x40400000  3.0
    1710:	mov	r0, #1
    1714:	vcvt.f64.u32	d17, s0
    1718:	vmul.f64	d16, d17, d16
    171c:	vmov.f64	d17, #112	; 0x3f800000  1.0
    1720:	vdiv.f64	d16, d16, d18
    1724:	vrintm.f64	d18, d16
    1728:	vadd.f64	d17, d18, d17
    172c:	vcmp.f64	d16, d18
    1730:	vmrs	APSR_nzcv, fpscr
    1734:	vseleq.f64	d16, d16, d17
    1738:	vcvt.u32.f64	s0, d16
    173c:	vstr	s0, [r4]
    1740:	b	17bc <o_base64url_encode@@Base+0x114>
    1744:	mov	r0, #0
    1748:	pop	{r4, r5, fp, pc}
    174c:	cmp	r2, #0
    1750:	beq	17bc <o_base64url_encode@@Base+0x114>
    1754:	add	r1, r2, r5
    1758:	mvn	r3, #0
    175c:	ldrb	r2, [r1, #-1]!
    1760:	cmp	r2, #61	; 0x3d
    1764:	bne	1780 <o_base64url_encode@@Base+0xd8>
    1768:	mov	r2, #0
    176c:	strb	r2, [r1]
    1770:	ldr	r1, [r4]
    1774:	adds	r1, r1, r3
    1778:	str	r1, [r4]
    177c:	beq	17bc <o_base64url_encode@@Base+0x114>
    1780:	mov	r1, #0
    1784:	b	17a0 <o_base64url_encode@@Base+0xf8>
    1788:	mov	r2, #45	; 0x2d
    178c:	strb	r2, [r5, r1]
    1790:	ldr	r2, [r4]
    1794:	add	r1, r1, #1
    1798:	cmp	r1, r2
    179c:	bcs	17bc <o_base64url_encode@@Base+0x114>
    17a0:	ldrb	r2, [r5, r1]
    17a4:	cmp	r2, #43	; 0x2b
    17a8:	beq	1788 <o_base64url_encode@@Base+0xe0>
    17ac:	cmp	r2, #47	; 0x2f
    17b0:	bne	1790 <o_base64url_encode@@Base+0xe8>
    17b4:	mov	r2, #95	; 0x5f
    17b8:	b	178c <o_base64url_encode@@Base+0xe4>
    17bc:	pop	{r4, r5, fp, pc}

000017c0 <o_base64url_decode@@Base>:
    17c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    17c4:	add	fp, sp, #24
    17c8:	cmp	r0, #0
    17cc:	beq	187c <o_base64url_decode@@Base+0xbc>
    17d0:	mov	r4, r0
    17d4:	add	r0, r1, #3
    17d8:	mov	r8, r3
    17dc:	mov	r5, r2
    17e0:	mov	r6, r1
    17e4:	bl	10e4 <o_malloc@plt>
    17e8:	cmp	r0, #0
    17ec:	beq	187c <o_base64url_decode@@Base+0xbc>
    17f0:	mov	r1, r4
    17f4:	mov	r2, r6
    17f8:	mov	r7, r0
    17fc:	bl	1054 <memcpy@plt>
    1800:	cmp	r6, #0
    1804:	beq	18a8 <o_base64url_decode@@Base+0xe8>
    1808:	and	r1, r6, #1
    180c:	mov	r0, #0
    1810:	cmp	r6, #1
    1814:	beq	1884 <o_base64url_decode@@Base+0xc4>
    1818:	sub	r2, r6, r1
    181c:	mov	r0, #0
    1820:	b	1838 <o_base64url_decode@@Base+0x78>
    1824:	mov	r4, #43	; 0x2b
    1828:	strb	r4, [r3, #1]
    182c:	add	r0, r0, #2
    1830:	cmp	r2, r0
    1834:	beq	1884 <o_base64url_decode@@Base+0xc4>
    1838:	ldrb	r3, [r7, r0]
    183c:	cmp	r3, #45	; 0x2d
    1840:	beq	1854 <o_base64url_decode@@Base+0x94>
    1844:	cmp	r3, #95	; 0x5f
    1848:	bne	185c <o_base64url_decode@@Base+0x9c>
    184c:	mov	r3, #47	; 0x2f
    1850:	b	1858 <o_base64url_decode@@Base+0x98>
    1854:	mov	r3, #43	; 0x2b
    1858:	strb	r3, [r7, r0]
    185c:	add	r3, r7, r0
    1860:	ldrb	r4, [r3, #1]
    1864:	cmp	r4, #45	; 0x2d
    1868:	beq	1824 <o_base64url_decode@@Base+0x64>
    186c:	cmp	r4, #95	; 0x5f
    1870:	bne	182c <o_base64url_decode@@Base+0x6c>
    1874:	mov	r4, #47	; 0x2f
    1878:	b	1828 <o_base64url_decode@@Base+0x68>
    187c:	mov	r0, #0
    1880:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1884:	cmp	r1, #0
    1888:	beq	18b8 <o_base64url_decode@@Base+0xf8>
    188c:	ldrb	r1, [r7, r0]
    1890:	cmp	r1, #45	; 0x2d
    1894:	beq	18b0 <o_base64url_decode@@Base+0xf0>
    1898:	cmp	r1, #95	; 0x5f
    189c:	bne	18b8 <o_base64url_decode@@Base+0xf8>
    18a0:	mov	r1, #47	; 0x2f
    18a4:	b	18b4 <o_base64url_decode@@Base+0xf4>
    18a8:	mov	r6, #0
    18ac:	b	18e8 <o_base64url_decode@@Base+0x128>
    18b0:	mov	r1, #43	; 0x2b
    18b4:	strb	r1, [r7, r0]
    18b8:	and	r0, r6, #3
    18bc:	cmp	r0, #3
    18c0:	beq	18dc <o_base64url_decode@@Base+0x11c>
    18c4:	cmp	r0, #2
    18c8:	addeq	r0, r7, r6
    18cc:	movweq	r1, #15677	; 0x3d3d
    18d0:	addeq	r6, r6, #2
    18d4:	strheq	r1, [r0]
    18d8:	b	18e8 <o_base64url_decode@@Base+0x128>
    18dc:	mov	r0, #61	; 0x3d
    18e0:	strb	r0, [r7, r6]
    18e4:	add	r6, r6, #1
    18e8:	mov	r0, r7
    18ec:	mov	r1, r6
    18f0:	mov	r2, r5
    18f4:	mov	r3, r8
    18f8:	bl	1120 <o_base64_decode@plt>
    18fc:	mov	r4, r0
    1900:	mov	r0, r7
    1904:	bl	1048 <o_free@plt>
    1908:	mov	r0, r4
    190c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00001910 <o_base64url_2_base64@@Base>:
    1910:	push	{r4, r5, r6, r7, fp, lr}
    1914:	add	fp, sp, #16
    1918:	cmp	r0, #0
    191c:	beq	19e4 <o_base64url_2_base64@@Base+0xd4>
    1920:	mov	r6, r1
    1924:	mov	r1, r0
    1928:	mov	r5, r2
    192c:	mov	r0, r2
    1930:	mov	r7, r3
    1934:	mov	r2, r6
    1938:	bl	1054 <memcpy@plt>
    193c:	mov	r0, #1
    1940:	cmp	r6, #0
    1944:	str	r6, [r7]
    1948:	beq	1a34 <o_base64url_2_base64@@Base+0x124>
    194c:	and	ip, r6, #1
    1950:	mov	r1, #0
    1954:	cmp	r6, #1
    1958:	beq	19c0 <o_base64url_2_base64@@Base+0xb0>
    195c:	sub	r3, r6, ip
    1960:	mov	r1, #0
    1964:	b	197c <o_base64url_2_base64@@Base+0x6c>
    1968:	mov	r4, #43	; 0x2b
    196c:	strb	r4, [r2, #1]
    1970:	add	r1, r1, #2
    1974:	cmp	r3, r1
    1978:	beq	19c0 <o_base64url_2_base64@@Base+0xb0>
    197c:	ldrb	r2, [r5, r1]
    1980:	cmp	r2, #45	; 0x2d
    1984:	beq	1998 <o_base64url_2_base64@@Base+0x88>
    1988:	cmp	r2, #95	; 0x5f
    198c:	bne	19a0 <o_base64url_2_base64@@Base+0x90>
    1990:	mov	r2, #47	; 0x2f
    1994:	b	199c <o_base64url_2_base64@@Base+0x8c>
    1998:	mov	r2, #43	; 0x2b
    199c:	strb	r2, [r5, r1]
    19a0:	add	r2, r5, r1
    19a4:	ldrb	r4, [r2, #1]
    19a8:	cmp	r4, #45	; 0x2d
    19ac:	beq	1968 <o_base64url_2_base64@@Base+0x58>
    19b0:	cmp	r4, #95	; 0x5f
    19b4:	bne	1970 <o_base64url_2_base64@@Base+0x60>
    19b8:	mov	r4, #47	; 0x2f
    19bc:	b	196c <o_base64url_2_base64@@Base+0x5c>
    19c0:	cmp	ip, #0
    19c4:	beq	19f4 <o_base64url_2_base64@@Base+0xe4>
    19c8:	ldrb	r2, [r5, r1]
    19cc:	cmp	r2, #45	; 0x2d
    19d0:	beq	19ec <o_base64url_2_base64@@Base+0xdc>
    19d4:	cmp	r2, #95	; 0x5f
    19d8:	bne	19f4 <o_base64url_2_base64@@Base+0xe4>
    19dc:	mov	r2, #47	; 0x2f
    19e0:	b	19f0 <o_base64url_2_base64@@Base+0xe0>
    19e4:	mov	r0, #0
    19e8:	pop	{r4, r5, r6, r7, fp, pc}
    19ec:	mov	r2, #43	; 0x2b
    19f0:	strb	r2, [r5, r1]
    19f4:	and	r1, r6, #3
    19f8:	cmp	r1, #3
    19fc:	beq	1a20 <o_base64url_2_base64@@Base+0x110>
    1a00:	cmp	r1, #2
    1a04:	bne	1a34 <o_base64url_2_base64@@Base+0x124>
    1a08:	add	r1, r5, r6
    1a0c:	movw	r2, #15677	; 0x3d3d
    1a10:	strh	r2, [r1]
    1a14:	ldr	r1, [r7]
    1a18:	add	r1, r1, #2
    1a1c:	b	1a30 <o_base64url_2_base64@@Base+0x120>
    1a20:	mov	r1, #61	; 0x3d
    1a24:	strb	r1, [r5, r6]
    1a28:	ldr	r1, [r7]
    1a2c:	add	r1, r1, #1
    1a30:	str	r1, [r7]
    1a34:	pop	{r4, r5, r6, r7, fp, pc}

00001a38 <o_base64_2_base64url@@Base>:
    1a38:	push	{r4, r5, r6, sl, fp, lr}
    1a3c:	add	fp, sp, #16
    1a40:	cmp	r0, #0
    1a44:	beq	1b08 <o_base64_2_base64url@@Base+0xd0>
    1a48:	mov	r6, r1
    1a4c:	mov	r1, r0
    1a50:	mov	r5, r2
    1a54:	mov	r0, r2
    1a58:	mov	r4, r3
    1a5c:	mov	r2, r6
    1a60:	bl	1054 <memcpy@plt>
    1a64:	cmp	r6, #0
    1a68:	str	r6, [r4]
    1a6c:	beq	1b10 <o_base64_2_base64url@@Base+0xd8>
    1a70:	and	r1, r6, #1
    1a74:	mov	r0, #0
    1a78:	cmp	r6, #1
    1a7c:	beq	1ae4 <o_base64_2_base64url@@Base+0xac>
    1a80:	sub	r2, r6, r1
    1a84:	mov	r0, #0
    1a88:	b	1aa0 <o_base64_2_base64url@@Base+0x68>
    1a8c:	mov	r6, #45	; 0x2d
    1a90:	strb	r6, [r3, #1]
    1a94:	add	r0, r0, #2
    1a98:	cmp	r2, r0
    1a9c:	beq	1ae4 <o_base64_2_base64url@@Base+0xac>
    1aa0:	ldrb	r3, [r5, r0]
    1aa4:	cmp	r3, #43	; 0x2b
    1aa8:	beq	1abc <o_base64_2_base64url@@Base+0x84>
    1aac:	cmp	r3, #47	; 0x2f
    1ab0:	bne	1ac4 <o_base64_2_base64url@@Base+0x8c>
    1ab4:	mov	r3, #95	; 0x5f
    1ab8:	b	1ac0 <o_base64_2_base64url@@Base+0x88>
    1abc:	mov	r3, #45	; 0x2d
    1ac0:	strb	r3, [r5, r0]
    1ac4:	add	r3, r5, r0
    1ac8:	ldrb	r6, [r3, #1]
    1acc:	cmp	r6, #43	; 0x2b
    1ad0:	beq	1a8c <o_base64_2_base64url@@Base+0x54>
    1ad4:	cmp	r6, #47	; 0x2f
    1ad8:	bne	1a94 <o_base64_2_base64url@@Base+0x5c>
    1adc:	mov	r6, #95	; 0x5f
    1ae0:	b	1a90 <o_base64_2_base64url@@Base+0x58>
    1ae4:	cmp	r1, #0
    1ae8:	beq	1b20 <o_base64_2_base64url@@Base+0xe8>
    1aec:	ldrb	r1, [r5, r0]
    1af0:	cmp	r1, #43	; 0x2b
    1af4:	beq	1b18 <o_base64_2_base64url@@Base+0xe0>
    1af8:	cmp	r1, #47	; 0x2f
    1afc:	bne	1b20 <o_base64_2_base64url@@Base+0xe8>
    1b00:	mov	r1, #95	; 0x5f
    1b04:	b	1b1c <o_base64_2_base64url@@Base+0xe4>
    1b08:	mov	r0, #0
    1b0c:	pop	{r4, r5, r6, sl, fp, pc}
    1b10:	mvn	r1, #0
    1b14:	b	1b28 <o_base64_2_base64url@@Base+0xf0>
    1b18:	mov	r1, #45	; 0x2d
    1b1c:	strb	r1, [r5, r0]
    1b20:	ldr	r0, [r4]
    1b24:	sub	r1, r0, #1
    1b28:	ldrb	r2, [r5, r1]
    1b2c:	mov	r0, #1
    1b30:	cmp	r2, #61	; 0x3d
    1b34:	bne	1b50 <o_base64_2_base64url@@Base+0x118>
    1b38:	sub	r2, r5, #1
    1b3c:	str	r1, [r4]
    1b40:	ldrb	r3, [r2, r1]
    1b44:	sub	r1, r1, #1
    1b48:	cmp	r3, #61	; 0x3d
    1b4c:	beq	1b3c <o_base64_2_base64url@@Base+0x104>
    1b50:	pop	{r4, r5, r6, sl, fp, pc}

00001b54 <o_malloc@@Base>:
    1b54:	cmp	r0, #0
    1b58:	moveq	r0, #0
    1b5c:	bxeq	lr
    1b60:	ldr	r1, [pc, #4]	; 1b6c <o_malloc@@Base+0x18>
    1b64:	ldr	r1, [pc, r1]
    1b68:	bx	r1
    1b6c:	andeq	r2, r1, ip, lsl r5

00001b70 <o_realloc@@Base>:
    1b70:	cmp	r1, #0
    1b74:	moveq	r0, #0
    1b78:	bxeq	lr
    1b7c:	ldr	r2, [pc, #4]	; 1b88 <o_realloc@@Base+0x18>
    1b80:	ldr	r2, [pc, r2]
    1b84:	bx	r2
    1b88:	andeq	r2, r1, r4, lsl #10

00001b8c <o_free@@Base>:
    1b8c:	cmp	r0, #0
    1b90:	bxeq	lr
    1b94:	ldr	r1, [pc, #4]	; 1ba0 <o_free@@Base+0x14>
    1b98:	ldr	r1, [pc, r1]
    1b9c:	bx	r1
    1ba0:	strdeq	r2, [r1], -r0

00001ba4 <o_set_alloc_funcs@@Base>:
    1ba4:	ldr	r3, [pc, #32]	; 1bcc <o_set_alloc_funcs@@Base+0x28>
    1ba8:	add	r3, pc, r3
    1bac:	str	r1, [r3]
    1bb0:	ldr	r1, [pc, #24]	; 1bd0 <o_set_alloc_funcs@@Base+0x2c>
    1bb4:	add	r1, pc, r1
    1bb8:	str	r0, [r1]
    1bbc:	ldr	r0, [pc, #16]	; 1bd4 <o_set_alloc_funcs@@Base+0x30>
    1bc0:	add	r0, pc, r0
    1bc4:	str	r2, [r0]
    1bc8:	bx	lr
    1bcc:	ldrdeq	r2, [r1], -ip
    1bd0:	andeq	r2, r1, ip, asr #9
    1bd4:	andeq	r2, r1, r8, asr #9

00001bd8 <o_get_alloc_funcs@@Base>:
    1bd8:	cmp	r0, #0
    1bdc:	beq	1bec <o_get_alloc_funcs@@Base+0x14>
    1be0:	ldr	r3, [pc, #48]	; 1c18 <o_get_alloc_funcs@@Base+0x40>
    1be4:	ldr	r3, [pc, r3]
    1be8:	str	r3, [r0]
    1bec:	cmp	r1, #0
    1bf0:	beq	1c00 <o_get_alloc_funcs@@Base+0x28>
    1bf4:	ldr	r0, [pc, #32]	; 1c1c <o_get_alloc_funcs@@Base+0x44>
    1bf8:	ldr	r0, [pc, r0]
    1bfc:	str	r0, [r1]
    1c00:	cmp	r2, #0
    1c04:	bxeq	lr
    1c08:	ldr	r0, [pc, #16]	; 1c20 <o_get_alloc_funcs@@Base+0x48>
    1c0c:	ldr	r0, [pc, r0]
    1c10:	str	r0, [r2]
    1c14:	bx	lr
    1c18:	muleq	r1, ip, r4
    1c1c:	andeq	r2, r1, ip, lsl #9
    1c20:	andeq	r2, r1, ip, ror r4

00001c24 <str_replace@@Base>:
    1c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c28:	add	fp, sp, #28
    1c2c:	sub	sp, sp, #12
    1c30:	mov	r4, #0
    1c34:	cmp	r0, #0
    1c38:	beq	1c50 <str_replace@@Base+0x2c>
    1c3c:	cmp	r1, #0
    1c40:	mov	r6, r1
    1c44:	movne	sl, r2
    1c48:	cmpne	r2, #0
    1c4c:	bne	1c5c <str_replace@@Base+0x38>
    1c50:	mov	r0, r4
    1c54:	sub	sp, fp, #28
    1c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c5c:	mov	r1, r6
    1c60:	mov	r7, r0
    1c64:	bl	1018 <strstr@plt>
    1c68:	cmp	r0, #0
    1c6c:	beq	1d3c <str_replace@@Base+0x118>
    1c70:	sub	r5, r0, r7
    1c74:	add	r9, r5, #1
    1c78:	mov	r0, r9
    1c7c:	bl	10e4 <o_malloc@plt>
    1c80:	cmp	r0, #0
    1c84:	beq	1c50 <str_replace@@Base+0x2c>
    1c88:	mov	r1, r7
    1c8c:	mov	r2, r5
    1c90:	mov	r8, r0
    1c94:	bl	1054 <memcpy@plt>
    1c98:	mov	r4, #0
    1c9c:	mov	r0, r8
    1ca0:	strb	r4, [r8, r5]
    1ca4:	bl	10b4 <strlen@plt>
    1ca8:	add	r5, r7, r0
    1cac:	mov	r0, r6
    1cb0:	bl	10b4 <strlen@plt>
    1cb4:	add	r0, r5, r0
    1cb8:	mov	r1, r6
    1cbc:	mov	r2, sl
    1cc0:	bl	1090 <str_replace@plt>
    1cc4:	cmp	r0, #0
    1cc8:	beq	1d78 <str_replace@@Base+0x154>
    1ccc:	mov	r6, r0
    1cd0:	mov	r0, sl
    1cd4:	bl	10b4 <strlen@plt>
    1cd8:	add	r4, r9, r0
    1cdc:	mov	r0, r6
    1ce0:	bl	10b4 <strlen@plt>
    1ce4:	add	r5, r4, r0
    1ce8:	mov	r0, r5
    1cec:	bl	10e4 <o_malloc@plt>
    1cf0:	cmp	r0, #0
    1cf4:	beq	1d84 <str_replace@@Base+0x160>
    1cf8:	str	sl, [sp]
    1cfc:	str	r6, [sp, #4]
    1d00:	mov	r1, r5
    1d04:	mov	r3, r8
    1d08:	mov	r4, r0
    1d0c:	ldr	r2, [pc, #136]	; 1d9c <str_replace@@Base+0x178>
    1d10:	add	r2, pc, r2
    1d14:	bl	10d8 <snprintf@plt>
    1d18:	mov	r5, r0
    1d1c:	mov	r0, r8
    1d20:	bl	1048 <o_free@plt>
    1d24:	mov	r0, r6
    1d28:	bl	1048 <o_free@plt>
    1d2c:	cmn	r5, #1
    1d30:	bgt	1c50 <str_replace@@Base+0x2c>
    1d34:	mov	r0, r4
    1d38:	b	1d90 <str_replace@@Base+0x16c>
    1d3c:	mov	r0, r7
    1d40:	bl	10b4 <strlen@plt>
    1d44:	mov	r5, r0
    1d48:	add	r0, r0, #1
    1d4c:	bl	10e4 <o_malloc@plt>
    1d50:	cmp	r0, #0
    1d54:	beq	1c50 <str_replace@@Base+0x2c>
    1d58:	mov	r1, r7
    1d5c:	mov	r2, r5
    1d60:	mov	r6, r0
    1d64:	bl	1054 <memcpy@plt>
    1d68:	mov	r0, #0
    1d6c:	mov	r4, r6
    1d70:	strb	r0, [r6, r5]
    1d74:	b	1c50 <str_replace@@Base+0x2c>
    1d78:	mov	r0, r8
    1d7c:	bl	1048 <o_free@plt>
    1d80:	b	1c50 <str_replace@@Base+0x2c>
    1d84:	mov	r0, r8
    1d88:	bl	1048 <o_free@plt>
    1d8c:	mov	r0, r6
    1d90:	bl	1048 <o_free@plt>
    1d94:	mov	r4, #0
    1d98:	b	1c50 <str_replace@@Base+0x2c>
    1d9c:	andeq	r1, r0, sp, asr #10

00001da0 <o_strdup@@Base>:
    1da0:	push	{r4, r5, r6, r7, fp, lr}
    1da4:	add	fp, sp, #16
    1da8:	mov	r5, #0
    1dac:	cmp	r0, #0
    1db0:	beq	1dec <o_strdup@@Base+0x4c>
    1db4:	mov	r4, r0
    1db8:	bl	10b4 <strlen@plt>
    1dbc:	mov	r6, r0
    1dc0:	add	r0, r0, #1
    1dc4:	bl	10e4 <o_malloc@plt>
    1dc8:	cmp	r0, #0
    1dcc:	beq	1dec <o_strdup@@Base+0x4c>
    1dd0:	mov	r1, r4
    1dd4:	mov	r2, r6
    1dd8:	mov	r7, r0
    1ddc:	bl	1054 <memcpy@plt>
    1de0:	mov	r0, #0
    1de4:	mov	r5, r7
    1de8:	strb	r0, [r7, r6]
    1dec:	mov	r0, r5
    1df0:	pop	{r4, r5, r6, r7, fp, pc}

00001df4 <msprintf@@Base>:
    1df4:	sub	sp, sp, #12
    1df8:	push	{r4, r5, r6, r7, fp, lr}
    1dfc:	add	fp, sp, #16
    1e00:	sub	sp, sp, #12
    1e04:	add	ip, fp, #8
    1e08:	cmp	r0, #0
    1e0c:	stm	ip, {r1, r2, r3}
    1e10:	beq	1e68 <msprintf@@Base+0x74>
    1e14:	mov	r4, r0
    1e18:	add	r3, fp, #8
    1e1c:	mov	r0, #0
    1e20:	mov	r1, #0
    1e24:	mov	r5, #0
    1e28:	mov	r2, r4
    1e2c:	str	r3, [sp, #4]
    1e30:	str	r3, [sp, #8]
    1e34:	bl	112c <vsnprintf@plt>
    1e38:	add	r6, r0, #1
    1e3c:	mov	r0, r6
    1e40:	bl	10e4 <o_malloc@plt>
    1e44:	cmp	r0, #0
    1e48:	beq	1e6c <msprintf@@Base+0x78>
    1e4c:	ldr	r3, [sp, #4]
    1e50:	mov	r1, r6
    1e54:	mov	r2, r4
    1e58:	mov	r7, r0
    1e5c:	bl	112c <vsnprintf@plt>
    1e60:	mov	r5, r7
    1e64:	b	1e6c <msprintf@@Base+0x78>
    1e68:	mov	r5, #0
    1e6c:	mov	r0, r5
    1e70:	sub	sp, fp, #16
    1e74:	pop	{r4, r5, r6, r7, fp, lr}
    1e78:	add	sp, sp, #12
    1e7c:	bx	lr

00001e80 <mstrcatf@@Base>:
    1e80:	sub	sp, sp, #8
    1e84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1e88:	add	fp, sp, #24
    1e8c:	sub	sp, sp, #8
    1e90:	cmp	r1, #0
    1e94:	str	r2, [fp, #8]
    1e98:	str	r3, [fp, #12]
    1e9c:	beq	1f28 <mstrcatf@@Base+0xa8>
    1ea0:	mov	r5, r1
    1ea4:	add	r3, fp, #8
    1ea8:	mov	r8, r0
    1eac:	mov	r0, #0
    1eb0:	mov	r1, #0
    1eb4:	mov	r6, #0
    1eb8:	mov	r2, r5
    1ebc:	str	r3, [sp]
    1ec0:	str	r3, [sp, #4]
    1ec4:	bl	112c <vsnprintf@plt>
    1ec8:	add	r4, r0, #1
    1ecc:	mov	r0, r4
    1ed0:	bl	10e4 <o_malloc@plt>
    1ed4:	mov	r7, r0
    1ed8:	cmp	r8, #0
    1edc:	beq	1f30 <mstrcatf@@Base+0xb0>
    1ee0:	cmp	r7, #0
    1ee4:	beq	1f50 <mstrcatf@@Base+0xd0>
    1ee8:	ldr	r3, [sp]
    1eec:	mov	r0, r7
    1ef0:	mov	r1, r4
    1ef4:	mov	r2, r5
    1ef8:	bl	112c <vsnprintf@plt>
    1efc:	ldr	r0, [pc, #96]	; 1f64 <mstrcatf@@Base+0xe4>
    1f00:	mov	r1, r8
    1f04:	mov	r2, r7
    1f08:	add	r0, pc, r0
    1f0c:	bl	1108 <msprintf@plt>
    1f10:	mov	r6, r0
    1f14:	mov	r0, r7
    1f18:	bl	1048 <o_free@plt>
    1f1c:	mov	r0, r8
    1f20:	bl	1048 <o_free@plt>
    1f24:	b	1f50 <mstrcatf@@Base+0xd0>
    1f28:	mov	r6, #0
    1f2c:	b	1f50 <mstrcatf@@Base+0xd0>
    1f30:	cmp	r7, #0
    1f34:	beq	1f4c <mstrcatf@@Base+0xcc>
    1f38:	ldr	r3, [sp]
    1f3c:	mov	r0, r7
    1f40:	mov	r1, r4
    1f44:	mov	r2, r5
    1f48:	bl	112c <vsnprintf@plt>
    1f4c:	mov	r6, r7
    1f50:	mov	r0, r6
    1f54:	sub	sp, fp, #24
    1f58:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    1f5c:	add	sp, sp, #8
    1f60:	bx	lr
    1f64:	andeq	r1, r0, r7, asr r3

00001f68 <o_strndup@@Base>:
    1f68:	push	{r4, r5, r6, r7, fp, lr}
    1f6c:	add	fp, sp, #16
    1f70:	mov	r5, #0
    1f74:	cmp	r0, #0
    1f78:	beq	1fb0 <o_strndup@@Base+0x48>
    1f7c:	mov	r6, r0
    1f80:	add	r0, r1, #1
    1f84:	mov	r4, r1
    1f88:	bl	10e4 <o_malloc@plt>
    1f8c:	cmp	r0, #0
    1f90:	beq	1fb0 <o_strndup@@Base+0x48>
    1f94:	mov	r1, r6
    1f98:	mov	r2, r4
    1f9c:	mov	r7, r0
    1fa0:	bl	1054 <memcpy@plt>
    1fa4:	mov	r0, #0
    1fa8:	mov	r5, r7
    1fac:	strb	r0, [r7, r4]
    1fb0:	mov	r0, r5
    1fb4:	pop	{r4, r5, r6, r7, fp, pc}

00001fb8 <o_strcmp@@Base>:
    1fb8:	orrs	r2, r0, r1
    1fbc:	mov	r2, #0
    1fc0:	beq	1fe4 <o_strcmp@@Base+0x2c>
    1fc4:	cmp	r1, #0
    1fc8:	mov	r2, #1
    1fcc:	mov	r3, #1
    1fd0:	mvneq	r2, #0
    1fd4:	cmp	r0, #0
    1fd8:	moveq	r2, r3
    1fdc:	cmpne	r1, #0
    1fe0:	bne	1fec <o_strcmp@@Base+0x34>
    1fe4:	mov	r0, r2
    1fe8:	bx	lr
    1fec:	b	1030 <strcmp@plt>

00001ff0 <o_strncmp@@Base>:
    1ff0:	mov	r3, r0
    1ff4:	orrs	r0, r0, r1
    1ff8:	mov	r0, #0
    1ffc:	cmpne	r2, #0
    2000:	bne	2008 <o_strncmp@@Base+0x18>
    2004:	bx	lr
    2008:	cmp	r1, #0
    200c:	mov	r0, #1
    2010:	mov	ip, #1
    2014:	mvneq	r0, #0
    2018:	cmp	r3, #0
    201c:	moveq	r0, ip
    2020:	cmpne	r1, #0
    2024:	bxeq	lr
    2028:	mov	r0, r3
    202c:	b	1138 <strncmp@plt>

00002030 <o_strcpy@@Base>:
    2030:	cmp	r0, #0
    2034:	mov	r2, #0
    2038:	cmpne	r1, #0
    203c:	bne	2048 <o_strcpy@@Base+0x18>
    2040:	mov	r0, r2
    2044:	bx	lr
    2048:	push	{fp, lr}
    204c:	mov	fp, sp
    2050:	bl	1078 <strcpy@plt>
    2054:	mov	r2, r0
    2058:	pop	{fp, lr}
    205c:	mov	r0, r2
    2060:	bx	lr

00002064 <o_strncpy@@Base>:
    2064:	cmp	r0, #0
    2068:	mov	r3, #0
    206c:	cmpne	r1, #0
    2070:	bne	207c <o_strncpy@@Base+0x18>
    2074:	mov	r0, r3
    2078:	bx	lr
    207c:	push	{fp, lr}
    2080:	mov	fp, sp
    2084:	bl	10fc <strncpy@plt>
    2088:	mov	r3, r0
    208c:	pop	{fp, lr}
    2090:	mov	r0, r3
    2094:	bx	lr

00002098 <o_strcasecmp@@Base>:
    2098:	orrs	r2, r0, r1
    209c:	mov	r2, #0
    20a0:	beq	20cc <o_strcasecmp@@Base+0x34>
    20a4:	cmp	r0, #0
    20a8:	beq	20b8 <o_strcasecmp@@Base+0x20>
    20ac:	mvn	r2, #0
    20b0:	cmp	r1, #0
    20b4:	beq	20cc <o_strcasecmp@@Base+0x34>
    20b8:	cmp	r0, #0
    20bc:	bne	20d4 <o_strcasecmp@@Base+0x3c>
    20c0:	mov	r2, #1
    20c4:	cmp	r1, #0
    20c8:	beq	20d4 <o_strcasecmp@@Base+0x3c>
    20cc:	mov	r0, r2
    20d0:	bx	lr
    20d4:	b	106c <strcasecmp@plt>

000020d8 <o_strncasecmp@@Base>:
    20d8:	orrs	r3, r0, r1
    20dc:	mov	r3, #0
    20e0:	cmpne	r2, #0
    20e4:	bne	20f0 <o_strncasecmp@@Base+0x18>
    20e8:	mov	r0, r3
    20ec:	bx	lr
    20f0:	cmp	r0, #0
    20f4:	beq	2104 <o_strncasecmp@@Base+0x2c>
    20f8:	mvn	r3, #0
    20fc:	cmp	r1, #0
    2100:	beq	20e8 <o_strncasecmp@@Base+0x10>
    2104:	cmp	r0, #0
    2108:	bne	2118 <o_strncasecmp@@Base+0x40>
    210c:	mov	r3, #1
    2110:	cmp	r1, #0
    2114:	bne	20e8 <o_strncasecmp@@Base+0x10>
    2118:	b	10cc <strncasecmp@plt>

0000211c <o_strstr@@Base>:
    211c:	cmp	r0, #0
    2120:	cmpne	r1, #0
    2124:	bne	2130 <o_strstr@@Base+0x14>
    2128:	mov	r0, #0
    212c:	bx	lr
    2130:	b	1018 <strstr@plt>

00002134 <o_strchr@@Base>:
    2134:	cmp	r0, #0
    2138:	moveq	r0, #0
    213c:	bxeq	lr
    2140:	b	10c0 <strchr@plt>

00002144 <o_strnchr@@Base>:
    2144:	push	{r4, r5, r6, r7, fp, lr}
    2148:	add	fp, sp, #16
    214c:	cmp	r0, #0
    2150:	mov	r4, #0
    2154:	movne	r7, r1
    2158:	cmpne	r1, #0
    215c:	bne	2168 <o_strnchr@@Base+0x24>
    2160:	mov	r0, r4
    2164:	pop	{r4, r5, r6, r7, fp, pc}
    2168:	mov	r5, r2
    216c:	mov	r6, r0
    2170:	bl	10b4 <strlen@plt>
    2174:	cmp	r0, #0
    2178:	beq	2160 <o_strnchr@@Base+0x1c>
    217c:	ldrb	r1, [r6]
    2180:	cmp	r1, r5
    2184:	beq	219c <o_strnchr@@Base+0x58>
    2188:	subs	r7, r7, #1
    218c:	sub	r0, r0, #1
    2190:	add	r6, r6, #1
    2194:	bne	2174 <o_strnchr@@Base+0x30>
    2198:	b	2160 <o_strnchr@@Base+0x1c>
    219c:	mov	r4, r6
    21a0:	mov	r0, r4
    21a4:	pop	{r4, r5, r6, r7, fp, pc}

000021a8 <o_strlen@@Base>:
    21a8:	cmp	r0, #0
    21ac:	moveq	r0, #0
    21b0:	bxeq	lr
    21b4:	b	10b4 <strlen@plt>

000021b8 <o_strrchr@@Base>:
    21b8:	cmp	r0, #0
    21bc:	moveq	r0, #0
    21c0:	bxeq	lr
    21c4:	b	1114 <strrchr@plt>

000021c8 <o_strrnchr@@Base>:
    21c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    21cc:	add	fp, sp, #24
    21d0:	cmp	r0, #0
    21d4:	mov	r8, #0
    21d8:	movne	r7, r1
    21dc:	cmpne	r1, #0
    21e0:	bne	21ec <o_strrnchr@@Base+0x24>
    21e4:	mov	r0, r8
    21e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    21ec:	mov	r9, r2
    21f0:	mov	r6, r0
    21f4:	bl	10b4 <strlen@plt>
    21f8:	sub	r5, r0, #1
    21fc:	rsb	r4, r0, #0
    2200:	cmp	r5, #0
    2204:	bmi	21e4 <o_strrnchr@@Base+0x1c>
    2208:	mov	r0, r6
    220c:	bl	10b4 <strlen@plt>
    2210:	add	r0, r0, r4
    2214:	cmp	r0, r7
    2218:	bcs	21e4 <o_strrnchr@@Base+0x1c>
    221c:	ldrb	r0, [r6, r5]
    2220:	sub	r5, r5, #1
    2224:	add	r4, r4, #1
    2228:	cmp	r0, r9
    222c:	bne	2200 <o_strrnchr@@Base+0x38>
    2230:	sub	r8, r6, r4
    2234:	mov	r0, r8
    2238:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000223c <o_strnstr@@Base>:
    223c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2240:	add	fp, sp, #24
    2244:	cmp	r0, #0
    2248:	mov	r8, #0
    224c:	movne	r9, r1
    2250:	cmpne	r1, #0
    2254:	bne	2260 <o_strnstr@@Base+0x24>
    2258:	mov	r0, r8
    225c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2260:	mov	r5, r0
    2264:	mov	r0, r9
    2268:	mov	r4, r2
    226c:	bl	10b4 <strlen@plt>
    2270:	cmp	r0, #0
    2274:	beq	22c4 <o_strnstr@@Base+0x88>
    2278:	mov	r7, r0
    227c:	subs	r0, r4, r0
    2280:	bmi	2258 <o_strnstr@@Base+0x1c>
    2284:	ldrb	r6, [r9]
    2288:	add	r4, r4, #1
    228c:	b	22a0 <o_strnstr@@Base+0x64>
    2290:	sub	r4, r4, #1
    2294:	add	r5, r5, #1
    2298:	cmp	r7, r4
    229c:	beq	2258 <o_strnstr@@Base+0x1c>
    22a0:	ldrb	r0, [r5]
    22a4:	cmp	r0, r6
    22a8:	bne	2290 <o_strnstr@@Base+0x54>
    22ac:	mov	r0, r5
    22b0:	mov	r1, r9
    22b4:	mov	r2, r7
    22b8:	bl	1138 <strncmp@plt>
    22bc:	cmp	r0, #0
    22c0:	bne	2290 <o_strnstr@@Base+0x54>
    22c4:	mov	r0, r5
    22c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000022cc <o_strcasestr@@Base>:
    22cc:	cmp	r0, #0
    22d0:	cmpne	r1, #0
    22d4:	bne	22e0 <o_strcasestr@@Base+0x14>
    22d8:	mov	r0, #0
    22dc:	bx	lr
    22e0:	b	1024 <strcasestr@plt>

000022e4 <split_string@@Base>:
    22e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22e8:	add	fp, sp, #28
    22ec:	sub	sp, sp, #4
    22f0:	cmp	r0, #0
    22f4:	mov	r5, #0
    22f8:	movne	r8, r1
    22fc:	cmpne	r1, #0
    2300:	bne	2310 <split_string@@Base+0x2c>
    2304:	mov	r0, r5
    2308:	sub	sp, fp, #28
    230c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2310:	cmp	r2, #0
    2314:	mov	r6, r0
    2318:	mov	r9, r2
    231c:	mov	r1, r8
    2320:	movne	r0, #0
    2324:	strne	r0, [r9]
    2328:	mov	r0, r6
    232c:	bl	1018 <strstr@plt>
    2330:	cmp	r0, #0
    2334:	beq	23e4 <split_string@@Base+0x100>
    2338:	mov	r7, r0
    233c:	mov	r5, #1
    2340:	cmp	r9, #0
    2344:	bne	2390 <split_string@@Base+0xac>
    2348:	b	2360 <split_string@@Base+0x7c>
    234c:	ldr	r0, [r9]
    2350:	add	r0, r0, r5, lsl #2
    2354:	str	r4, [r0, #-4]
    2358:	ldr	r0, [r9]
    235c:	str	r1, [r0, r5, lsl #2]
    2360:	mov	r0, r8
    2364:	bl	10b4 <strlen@plt>
    2368:	add	r6, r7, r0
    236c:	mov	r1, r8
    2370:	mov	r0, r6
    2374:	bl	1018 <strstr@plt>
    2378:	mov	r7, r0
    237c:	add	r5, r5, #1
    2380:	cmp	r0, #0
    2384:	beq	23e8 <split_string@@Base+0x104>
    2388:	cmp	r9, #0
    238c:	beq	2360 <split_string@@Base+0x7c>
    2390:	mov	r0, #4
    2394:	add	r1, r0, r5, lsl #2
    2398:	ldr	r0, [r9]
    239c:	bl	1084 <o_realloc@plt>
    23a0:	cmp	r0, #0
    23a4:	str	r0, [r9]
    23a8:	beq	2360 <split_string@@Base+0x7c>
    23ac:	sub	sl, r7, r6
    23b0:	add	r0, sl, #1
    23b4:	bl	10e4 <o_malloc@plt>
    23b8:	mov	r1, #0
    23bc:	mov	r4, r0
    23c0:	cmp	r0, #0
    23c4:	beq	234c <split_string@@Base+0x68>
    23c8:	mov	r0, r4
    23cc:	mov	r1, r6
    23d0:	mov	r2, sl
    23d4:	bl	1054 <memcpy@plt>
    23d8:	mov	r1, #0
    23dc:	strb	r1, [r4, sl]
    23e0:	b	234c <split_string@@Base+0x68>
    23e4:	mov	r5, #1
    23e8:	cmp	r9, #0
    23ec:	beq	2304 <split_string@@Base+0x20>
    23f0:	mov	r0, #4
    23f4:	add	r1, r0, r5, lsl #2
    23f8:	ldr	r0, [r9]
    23fc:	bl	1084 <o_realloc@plt>
    2400:	cmp	r0, #0
    2404:	str	r0, [r9]
    2408:	beq	2304 <split_string@@Base+0x20>
    240c:	mov	r8, #0
    2410:	cmp	r6, #0
    2414:	mov	r0, #0
    2418:	beq	245c <split_string@@Base+0x178>
    241c:	mov	r0, r6
    2420:	bl	10b4 <strlen@plt>
    2424:	mov	r7, r0
    2428:	add	r0, r0, #1
    242c:	bl	10e4 <o_malloc@plt>
    2430:	mov	r4, r0
    2434:	cmp	r0, #0
    2438:	mov	r0, #0
    243c:	beq	245c <split_string@@Base+0x178>
    2440:	mov	r0, r4
    2444:	mov	r1, r6
    2448:	mov	r2, r7
    244c:	bl	1054 <memcpy@plt>
    2450:	mov	r0, #0
    2454:	strb	r0, [r4, r7]
    2458:	mov	r0, r4
    245c:	ldr	r1, [r9]
    2460:	add	r1, r1, r5, lsl #2
    2464:	str	r0, [r1, #-4]
    2468:	ldr	r0, [r9]
    246c:	str	r8, [r0, r5, lsl #2]
    2470:	b	2304 <split_string@@Base+0x20>

00002474 <free_string_array@@Base>:
    2474:	cmp	r0, #0
    2478:	bxeq	lr
    247c:	push	{r4, r5, r6, sl, fp, lr}
    2480:	add	fp, sp, #16
    2484:	mov	r4, r0
    2488:	ldr	r0, [r0]
    248c:	cmp	r0, #0
    2490:	beq	24b0 <free_string_array@@Base+0x3c>
    2494:	add	r5, r4, #4
    2498:	mov	r6, #0
    249c:	bl	1048 <o_free@plt>
    24a0:	str	r6, [r5, #-4]
    24a4:	ldr	r0, [r5], #4
    24a8:	cmp	r0, #0
    24ac:	bne	249c <free_string_array@@Base+0x28>
    24b0:	mov	r0, r4
    24b4:	pop	{r4, r5, r6, sl, fp, lr}
    24b8:	b	1048 <o_free@plt>

000024bc <string_array_size@@Base>:
    24bc:	cmp	r0, #0
    24c0:	moveq	r0, #0
    24c4:	bxeq	lr
    24c8:	mov	r1, #0
    24cc:	ldr	r2, [r0, r1, lsl #2]
    24d0:	add	r1, r1, #1
    24d4:	cmp	r2, #0
    24d8:	bne	24cc <string_array_size@@Base+0x10>
    24dc:	sub	r0, r1, #1
    24e0:	bx	lr

000024e4 <string_array_join@@Base>:
    24e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24e8:	add	fp, sp, #28
    24ec:	sub	sp, sp, #4
    24f0:	cmp	r0, #0
    24f4:	mov	r5, #0
    24f8:	movne	r9, r1
    24fc:	cmpne	r1, #0
    2500:	bne	2510 <string_array_join@@Base+0x2c>
    2504:	mov	r0, r5
    2508:	sub	sp, fp, #28
    250c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2510:	ldr	r7, [r0]
    2514:	cmp	r7, #0
    2518:	beq	2504 <string_array_join@@Base+0x20>
    251c:	ldr	r8, [pc, #136]	; 25ac <string_array_join@@Base+0xc8>
    2520:	add	r4, r0, #4
    2524:	mov	sl, #0
    2528:	mov	r5, #0
    252c:	add	r8, pc, r8
    2530:	cmp	r5, #0
    2534:	beq	2570 <string_array_join@@Base+0x8c>
    2538:	mov	r0, r8
    253c:	mov	r1, r5
    2540:	mov	r2, r9
    2544:	mov	r3, r7
    2548:	bl	1108 <msprintf@plt>
    254c:	mov	r6, r0
    2550:	mov	r0, r5
    2554:	bl	1048 <o_free@plt>
    2558:	mov	r5, r6
    255c:	ldr	r7, [r4], #4
    2560:	cmp	r7, #0
    2564:	beq	2504 <string_array_join@@Base+0x20>
    2568:	cmp	r5, #0
    256c:	bne	2538 <string_array_join@@Base+0x54>
    2570:	mov	r0, r7
    2574:	bl	10b4 <strlen@plt>
    2578:	mov	r6, r0
    257c:	add	r0, r0, #1
    2580:	bl	10e4 <o_malloc@plt>
    2584:	cmp	r0, #0
    2588:	beq	25a4 <string_array_join@@Base+0xc0>
    258c:	mov	r1, r7
    2590:	mov	r2, r6
    2594:	mov	r5, r0
    2598:	bl	1054 <memcpy@plt>
    259c:	strb	sl, [r5, r6]
    25a0:	b	255c <string_array_join@@Base+0x78>
    25a4:	mov	r5, #0
    25a8:	b	255c <string_array_join@@Base+0x78>
    25ac:	andeq	r0, r0, r1, lsr sp

000025b0 <trimwhitespace@@Base>:
    25b0:	push	{r4, r5, r6, sl, fp, lr}
    25b4:	add	fp, sp, #16
    25b8:	cmp	r0, #0
    25bc:	beq	25f4 <trimwhitespace@@Base+0x44>
    25c0:	ldrb	r6, [r0]
    25c4:	mov	r4, r0
    25c8:	cmp	r6, #0
    25cc:	beq	263c <trimwhitespace@@Base+0x8c>
    25d0:	bl	10a8 <__ctype_b_loc@plt>
    25d4:	ldr	r5, [r0]
    25d8:	add	r0, r5, r6, lsl #1
    25dc:	ldrb	r0, [r0, #1]
    25e0:	tst	r0, #32
    25e4:	beq	2600 <trimwhitespace@@Base+0x50>
    25e8:	ldrb	r0, [r4, #1]!
    25ec:	add	r0, r5, r0, lsl #1
    25f0:	b	25dc <trimwhitespace@@Base+0x2c>
    25f4:	mov	r4, #0
    25f8:	mov	r0, r4
    25fc:	pop	{r4, r5, r6, sl, fp, pc}
    2600:	mov	r0, r4
    2604:	bl	10b4 <strlen@plt>
    2608:	add	r0, r0, r4
    260c:	sub	r1, r0, #1
    2610:	mov	r0, r1
    2614:	cmp	r1, r4
    2618:	bls	2634 <trimwhitespace@@Base+0x84>
    261c:	mov	r1, r0
    2620:	ldrb	r2, [r1], #-1
    2624:	add	r2, r5, r2, lsl #1
    2628:	ldrb	r2, [r2, #1]
    262c:	tst	r2, #32
    2630:	bne	2610 <trimwhitespace@@Base+0x60>
    2634:	mov	r1, #0
    2638:	strb	r1, [r0, #1]
    263c:	mov	r0, r4
    2640:	pop	{r4, r5, r6, sl, fp, pc}

00002644 <trimcharacter@@Base>:
    2644:	push	{r4, r5, fp, lr}
    2648:	add	fp, sp, #8
    264c:	cmp	r0, #0
    2650:	beq	26b8 <trimcharacter@@Base+0x74>
    2654:	mov	r4, r0
    2658:	ldrb	r0, [r0]
    265c:	cmp	r0, #0
    2660:	beq	26b0 <trimcharacter@@Base+0x6c>
    2664:	mov	r5, r1
    2668:	cmp	r0, r5
    266c:	bne	267c <trimcharacter@@Base+0x38>
    2670:	ldrb	r0, [r4, #1]!
    2674:	cmp	r0, r5
    2678:	beq	2670 <trimcharacter@@Base+0x2c>
    267c:	mov	r0, r4
    2680:	bl	10b4 <strlen@plt>
    2684:	add	r0, r0, r4
    2688:	sub	r1, r0, #1
    268c:	mov	r0, r1
    2690:	cmp	r1, r4
    2694:	bls	26a8 <trimcharacter@@Base+0x64>
    2698:	mov	r1, r0
    269c:	ldrb	r2, [r1], #-1
    26a0:	cmp	r2, r5
    26a4:	beq	268c <trimcharacter@@Base+0x48>
    26a8:	mov	r1, #0
    26ac:	strb	r1, [r0, #1]
    26b0:	mov	r0, r4
    26b4:	pop	{r4, r5, fp, pc}
    26b8:	mov	r4, #0
    26bc:	mov	r0, r4
    26c0:	pop	{r4, r5, fp, pc}

000026c4 <string_array_has_value@@Base>:
    26c4:	push	{r4, r5, r6, sl, fp, lr}
    26c8:	add	fp, sp, #16
    26cc:	cmp	r0, #0
    26d0:	mov	r4, #0
    26d4:	movne	r5, r1
    26d8:	cmpne	r1, #0
    26dc:	bne	26e8 <string_array_has_value@@Base+0x24>
    26e0:	mov	r0, r4
    26e4:	pop	{r4, r5, r6, sl, fp, pc}
    26e8:	mov	r1, r0
    26ec:	ldr	r0, [r0]
    26f0:	cmp	r0, #0
    26f4:	beq	26e0 <string_array_has_value@@Base+0x1c>
    26f8:	add	r6, r1, #4
    26fc:	mov	r1, r5
    2700:	bl	1030 <strcmp@plt>
    2704:	cmp	r0, #0
    2708:	beq	271c <string_array_has_value@@Base+0x58>
    270c:	ldr	r0, [r6], #4
    2710:	cmp	r0, #0
    2714:	bne	26fc <string_array_has_value@@Base+0x38>
    2718:	b	26e0 <string_array_has_value@@Base+0x1c>
    271c:	mov	r4, #1
    2720:	mov	r0, r4
    2724:	pop	{r4, r5, r6, sl, fp, pc}

00002728 <string_array_has_value_case@@Base>:
    2728:	push	{r4, r5, r6, sl, fp, lr}
    272c:	add	fp, sp, #16
    2730:	cmp	r0, #0
    2734:	mov	r4, #0
    2738:	movne	r5, r1
    273c:	cmpne	r1, #0
    2740:	bne	274c <string_array_has_value_case@@Base+0x24>
    2744:	mov	r0, r4
    2748:	pop	{r4, r5, r6, sl, fp, pc}
    274c:	mov	r1, r0
    2750:	ldr	r0, [r0]
    2754:	cmp	r0, #0
    2758:	beq	2744 <string_array_has_value_case@@Base+0x1c>
    275c:	add	r6, r1, #4
    2760:	mov	r1, r5
    2764:	bl	106c <strcasecmp@plt>
    2768:	cmp	r0, #0
    276c:	beq	2780 <string_array_has_value_case@@Base+0x58>
    2770:	ldr	r0, [r6], #4
    2774:	cmp	r0, #0
    2778:	bne	2760 <string_array_has_value_case@@Base+0x38>
    277c:	b	2744 <string_array_has_value_case@@Base+0x1c>
    2780:	mov	r4, #1
    2784:	mov	r0, r4
    2788:	pop	{r4, r5, r6, sl, fp, pc}

0000278c <string_array_has_value_n@@Base>:
    278c:	push	{r4, r5, r6, r7, fp, lr}
    2790:	add	fp, sp, #16
    2794:	cmp	r0, #0
    2798:	movne	r5, r1
    279c:	cmpne	r1, #0
    27a0:	bne	27b0 <string_array_has_value_n@@Base+0x24>
    27a4:	mov	r6, #0
    27a8:	mov	r0, r6
    27ac:	pop	{r4, r5, r6, r7, fp, pc}
    27b0:	mov	r1, r0
    27b4:	ldr	r0, [r0]
    27b8:	cmp	r0, #0
    27bc:	beq	27a4 <string_array_has_value_n@@Base+0x18>
    27c0:	mov	r4, r2
    27c4:	add	r7, r1, #4
    27c8:	mov	r6, #1
    27cc:	cmp	r4, #0
    27d0:	beq	27f8 <string_array_has_value_n@@Base+0x6c>
    27d4:	mov	r1, r5
    27d8:	mov	r2, r4
    27dc:	bl	1138 <strncmp@plt>
    27e0:	cmp	r0, #0
    27e4:	beq	27f8 <string_array_has_value_n@@Base+0x6c>
    27e8:	ldr	r0, [r7], #4
    27ec:	cmp	r0, #0
    27f0:	bne	27cc <string_array_has_value_n@@Base+0x40>
    27f4:	b	27a4 <string_array_has_value_n@@Base+0x18>
    27f8:	mov	r0, r6
    27fc:	pop	{r4, r5, r6, r7, fp, pc}

00002800 <string_array_has_value_ncase@@Base>:
    2800:	push	{r4, r5, r6, r7, fp, lr}
    2804:	add	fp, sp, #16
    2808:	cmp	r0, #0
    280c:	movne	r5, r1
    2810:	cmpne	r1, #0
    2814:	bne	2824 <string_array_has_value_ncase@@Base+0x24>
    2818:	mov	r6, #0
    281c:	mov	r0, r6
    2820:	pop	{r4, r5, r6, r7, fp, pc}
    2824:	mov	r1, r0
    2828:	ldr	r0, [r0]
    282c:	cmp	r0, #0
    2830:	beq	2818 <string_array_has_value_ncase@@Base+0x18>
    2834:	mov	r4, r2
    2838:	add	r7, r1, #4
    283c:	mov	r6, #1
    2840:	cmp	r4, #0
    2844:	beq	286c <string_array_has_value_ncase@@Base+0x6c>
    2848:	mov	r1, r5
    284c:	mov	r2, r4
    2850:	bl	10cc <strncasecmp@plt>
    2854:	cmp	r0, #0
    2858:	beq	286c <string_array_has_value_ncase@@Base+0x6c>
    285c:	ldr	r0, [r7], #4
    2860:	cmp	r0, #0
    2864:	bne	2840 <string_array_has_value_ncase@@Base+0x40>
    2868:	b	2818 <string_array_has_value_ncase@@Base+0x18>
    286c:	mov	r0, r6
    2870:	pop	{r4, r5, r6, r7, fp, pc}

00002874 <string_array_has_trimmed_value@@Base>:
    2874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2878:	add	fp, sp, #28
    287c:	sub	sp, sp, #12
    2880:	cmp	r0, #0
    2884:	mov	sl, #0
    2888:	str	r0, [sp, #8]
    288c:	movne	r4, r1
    2890:	cmpne	r1, #0
    2894:	beq	2a6c <string_array_has_trimmed_value@@Base+0x1f8>
    2898:	mov	r0, r4
    289c:	bl	10b4 <strlen@plt>
    28a0:	mov	r6, r0
    28a4:	add	r0, r0, #1
    28a8:	bl	10e4 <o_malloc@plt>
    28ac:	mov	r5, r0
    28b0:	cmp	r0, #0
    28b4:	beq	2a50 <string_array_has_trimmed_value@@Base+0x1dc>
    28b8:	mov	r0, r5
    28bc:	mov	r1, r4
    28c0:	mov	r2, r6
    28c4:	bl	1054 <memcpy@plt>
    28c8:	mov	sl, #0
    28cc:	mov	r7, r5
    28d0:	strb	sl, [r5, r6]
    28d4:	ldrb	r6, [r5]
    28d8:	cmp	r6, #0
    28dc:	beq	2950 <string_array_has_trimmed_value@@Base+0xdc>
    28e0:	bl	10a8 <__ctype_b_loc@plt>
    28e4:	ldr	r4, [r0]
    28e8:	mov	r7, r5
    28ec:	add	r0, r4, r6, lsl #1
    28f0:	ldrb	r0, [r0, #1]
    28f4:	tst	r0, #32
    28f8:	beq	2914 <string_array_has_trimmed_value@@Base+0xa0>
    28fc:	mov	r7, r5
    2900:	ldrb	r0, [r7, #1]!
    2904:	add	r0, r4, r0, lsl #1
    2908:	ldrb	r0, [r0, #1]
    290c:	tst	r0, #32
    2910:	bne	2900 <string_array_has_trimmed_value@@Base+0x8c>
    2914:	mov	r0, r7
    2918:	bl	10b4 <strlen@plt>
    291c:	add	r0, r0, r7
    2920:	sub	r1, r0, #1
    2924:	mov	r0, r1
    2928:	cmp	r1, r7
    292c:	bls	2948 <string_array_has_trimmed_value@@Base+0xd4>
    2930:	mov	r1, r0
    2934:	ldrb	r2, [r1], #-1
    2938:	add	r2, r4, r2, lsl #1
    293c:	ldrb	r2, [r2, #1]
    2940:	tst	r2, #32
    2944:	bne	2924 <string_array_has_trimmed_value@@Base+0xb0>
    2948:	mov	r1, #0
    294c:	strb	r1, [r0, #1]
    2950:	ldr	r0, [sp, #8]
    2954:	ldr	r6, [r0]
    2958:	cmp	r6, #0
    295c:	beq	2a64 <string_array_has_trimmed_value@@Base+0x1f0>
    2960:	mov	sl, #0
    2964:	mov	r8, #0
    2968:	str	r5, [sp, #4]
    296c:	b	29a4 <string_array_has_trimmed_value@@Base+0x130>
    2970:	strb	sl, [r0, #1]
    2974:	mov	r0, r6
    2978:	mov	r1, r7
    297c:	bl	1030 <strcmp@plt>
    2980:	mov	r5, r0
    2984:	mov	r0, r4
    2988:	bl	1048 <o_free@plt>
    298c:	ldr	r0, [sp, #8]
    2990:	add	r8, r8, #1
    2994:	ldr	r6, [r0, r8, lsl #2]
    2998:	cmp	r6, #0
    299c:	cmpne	r5, #0
    29a0:	beq	2a58 <string_array_has_trimmed_value@@Base+0x1e4>
    29a4:	mov	r0, r6
    29a8:	bl	10b4 <strlen@plt>
    29ac:	mov	r5, r0
    29b0:	add	r0, r0, #1
    29b4:	bl	10e4 <o_malloc@plt>
    29b8:	cmp	r0, #0
    29bc:	beq	2a60 <string_array_has_trimmed_value@@Base+0x1ec>
    29c0:	mov	r1, r6
    29c4:	mov	r2, r5
    29c8:	mov	r4, r0
    29cc:	bl	1054 <memcpy@plt>
    29d0:	strb	sl, [r4, r5]
    29d4:	mov	r6, r4
    29d8:	ldrb	r9, [r4]
    29dc:	cmp	r9, #0
    29e0:	beq	2974 <string_array_has_trimmed_value@@Base+0x100>
    29e4:	bl	10a8 <__ctype_b_loc@plt>
    29e8:	ldr	r5, [r0]
    29ec:	mov	r6, r4
    29f0:	add	r0, r5, r9, lsl #1
    29f4:	ldrb	r0, [r0, #1]
    29f8:	tst	r0, #32
    29fc:	beq	2a18 <string_array_has_trimmed_value@@Base+0x1a4>
    2a00:	mov	r6, r4
    2a04:	ldrb	r0, [r6, #1]!
    2a08:	add	r0, r5, r0, lsl #1
    2a0c:	ldrb	r0, [r0, #1]
    2a10:	tst	r0, #32
    2a14:	bne	2a04 <string_array_has_trimmed_value@@Base+0x190>
    2a18:	mov	r0, r6
    2a1c:	bl	10b4 <strlen@plt>
    2a20:	add	r0, r6, r0
    2a24:	sub	r1, r0, #1
    2a28:	mov	r0, r1
    2a2c:	cmp	r1, r6
    2a30:	bls	2970 <string_array_has_trimmed_value@@Base+0xfc>
    2a34:	mov	r1, r0
    2a38:	ldrb	r2, [r1], #-1
    2a3c:	add	r2, r5, r2, lsl #1
    2a40:	ldrb	r2, [r2, #1]
    2a44:	tst	r2, #32
    2a48:	bne	2a28 <string_array_has_trimmed_value@@Base+0x1b4>
    2a4c:	b	2970 <string_array_has_trimmed_value@@Base+0xfc>
    2a50:	mov	sl, #0
    2a54:	b	2a64 <string_array_has_trimmed_value@@Base+0x1f0>
    2a58:	clz	r0, r5
    2a5c:	lsr	sl, r0, #5
    2a60:	ldr	r5, [sp, #4]
    2a64:	mov	r0, r5
    2a68:	bl	1048 <o_free@plt>
    2a6c:	mov	r0, sl
    2a70:	sub	sp, fp, #28
    2a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002a78 <pointer_list_init@@Base>:
    2a78:	cmp	r0, #0
    2a7c:	movne	r1, #0
    2a80:	strne	r1, [r0]
    2a84:	strne	r1, [r0, #4]
    2a88:	bx	lr

00002a8c <pointer_list_clean@@Base>:
    2a8c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2a90:	add	fp, sp, #24
    2a94:	cmp	r0, #0
    2a98:	beq	2b80 <pointer_list_clean@@Base+0xf4>
    2a9c:	ldr	r9, [r0]
    2aa0:	mov	r4, r0
    2aa4:	cmp	r9, #0
    2aa8:	beq	2b80 <pointer_list_clean@@Base+0xf4>
    2aac:	mvn	r8, r9
    2ab0:	mov	r7, #0
    2ab4:	mov	r1, r9
    2ab8:	mov	r0, r9
    2abc:	b	2ae8 <pointer_list_clean@@Base+0x5c>
    2ac0:	bl	1048 <o_free@plt>
    2ac4:	mov	r0, #0
    2ac8:	str	r0, [r4, #4]
    2acc:	ldr	r0, [r4]
    2ad0:	sub	r1, r0, #1
    2ad4:	str	r1, [r4]
    2ad8:	add	r7, r7, #1
    2adc:	cmp	r6, #0
    2ae0:	mov	r0, r6
    2ae4:	beq	2b80 <pointer_list_clean@@Base+0xf4>
    2ae8:	sub	r6, r0, #1
    2aec:	cmp	r1, r6
    2af0:	bls	2ad8 <pointer_list_clean@@Base+0x4c>
    2af4:	sub	lr, r1, #1
    2af8:	cmp	lr, r6
    2afc:	bls	2b68 <pointer_list_clean@@Base+0xdc>
    2b00:	sub	r5, r7, r9
    2b04:	add	ip, r7, r8
    2b08:	add	r5, r1, r5
    2b0c:	tst	r5, #1
    2b10:	mov	r5, r6
    2b14:	beq	2b28 <pointer_list_clean@@Base+0x9c>
    2b18:	ldr	r5, [r4, #4]
    2b1c:	ldr	r3, [r5, r0, lsl #2]
    2b20:	str	r3, [r5, r6, lsl #2]
    2b24:	mov	r5, r0
    2b28:	cmn	r1, ip
    2b2c:	beq	2b68 <pointer_list_clean@@Base+0xdc>
    2b30:	mvn	r0, r5
    2b34:	lsl	r3, r5, #2
    2b38:	add	r0, r0, r1
    2b3c:	ldr	r5, [r4, #4]
    2b40:	subs	r0, r0, #2
    2b44:	add	r2, r5, r3
    2b48:	ldr	r2, [r2, #4]
    2b4c:	str	r2, [r5, r3]
    2b50:	ldr	r2, [r4, #4]
    2b54:	add	r2, r2, r3
    2b58:	add	r3, r3, #8
    2b5c:	ldr	r5, [r2, #8]
    2b60:	str	r5, [r2, #4]
    2b64:	bne	2b3c <pointer_list_clean@@Base+0xb0>
    2b68:	ldr	r0, [r4, #4]
    2b6c:	cmp	r1, #2
    2b70:	bcc	2ac0 <pointer_list_clean@@Base+0x34>
    2b74:	lsl	r1, lr, #2
    2b78:	bl	1084 <o_realloc@plt>
    2b7c:	b	2ac8 <pointer_list_clean@@Base+0x3c>
    2b80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00002b84 <pointer_list_size@@Base>:
    2b84:	cmp	r0, #0
    2b88:	ldrne	r0, [r0]
    2b8c:	moveq	r0, #0
    2b90:	bx	lr

00002b94 <pointer_list_remove_at@@Base>:
    2b94:	push	{r4, r5, fp, lr}
    2b98:	add	fp, sp, #8
    2b9c:	mov	r4, r0
    2ba0:	mov	r0, #0
    2ba4:	cmp	r4, #0
    2ba8:	beq	2c60 <pointer_list_remove_at@@Base+0xcc>
    2bac:	ldr	r2, [r4]
    2bb0:	cmp	r2, r1
    2bb4:	popls	{r4, r5, fp, pc}
    2bb8:	sub	ip, r2, #1
    2bbc:	cmp	ip, r1
    2bc0:	bls	2c2c <pointer_list_remove_at@@Base+0x98>
    2bc4:	mvn	r0, r1
    2bc8:	sub	lr, r2, #2
    2bcc:	add	r3, r2, r0
    2bd0:	tst	r3, #1
    2bd4:	mov	r3, r1
    2bd8:	beq	2bec <pointer_list_remove_at@@Base+0x58>
    2bdc:	ldr	r0, [r4, #4]
    2be0:	add	r3, r1, #1
    2be4:	ldr	r5, [r0, r3, lsl #2]
    2be8:	str	r5, [r0, r1, lsl #2]
    2bec:	cmp	lr, r1
    2bf0:	beq	2c2c <pointer_list_remove_at@@Base+0x98>
    2bf4:	mvn	r0, r3
    2bf8:	lsl	r1, r3, #2
    2bfc:	add	r0, r0, r2
    2c00:	ldr	r3, [r4, #4]
    2c04:	subs	r0, r0, #2
    2c08:	add	r5, r3, r1
    2c0c:	ldr	r5, [r5, #4]
    2c10:	str	r5, [r3, r1]
    2c14:	ldr	r3, [r4, #4]
    2c18:	add	r3, r3, r1
    2c1c:	add	r1, r1, #8
    2c20:	ldr	r5, [r3, #8]
    2c24:	str	r5, [r3, #4]
    2c28:	bne	2c00 <pointer_list_remove_at@@Base+0x6c>
    2c2c:	ldr	r0, [r4, #4]
    2c30:	cmp	r2, #2
    2c34:	bcc	2c44 <pointer_list_remove_at@@Base+0xb0>
    2c38:	lsl	r1, ip, #2
    2c3c:	bl	1084 <o_realloc@plt>
    2c40:	b	2c4c <pointer_list_remove_at@@Base+0xb8>
    2c44:	bl	1048 <o_free@plt>
    2c48:	mov	r0, #0
    2c4c:	str	r0, [r4, #4]
    2c50:	ldr	r0, [r4]
    2c54:	sub	r0, r0, #1
    2c58:	str	r0, [r4]
    2c5c:	mov	r0, #1
    2c60:	pop	{r4, r5, fp, pc}

00002c64 <pointer_list_clean_free@@Base>:
    2c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c68:	add	fp, sp, #28
    2c6c:	sub	sp, sp, #4
    2c70:	cmp	r0, #0
    2c74:	beq	2d7c <pointer_list_clean_free@@Base+0x118>
    2c78:	ldr	r9, [r0]
    2c7c:	mov	r5, r0
    2c80:	cmp	r9, #0
    2c84:	beq	2d7c <pointer_list_clean_free@@Base+0x118>
    2c88:	mov	sl, r1
    2c8c:	mvn	r8, r9
    2c90:	mov	r7, #0
    2c94:	mov	r1, r9
    2c98:	mov	r6, r9
    2c9c:	b	2cc8 <pointer_list_clean_free@@Base+0x64>
    2ca0:	bl	1048 <o_free@plt>
    2ca4:	mov	r0, #0
    2ca8:	str	r0, [r5, #4]
    2cac:	ldr	r0, [r5]
    2cb0:	sub	r1, r0, #1
    2cb4:	str	r1, [r5]
    2cb8:	add	r7, r7, #1
    2cbc:	cmp	r4, #0
    2cc0:	mov	r6, r4
    2cc4:	beq	2d7c <pointer_list_clean_free@@Base+0x118>
    2cc8:	sub	r4, r6, #1
    2ccc:	mov	r0, #0
    2cd0:	cmp	r1, r4
    2cd4:	bls	2ce0 <pointer_list_clean_free@@Base+0x7c>
    2cd8:	ldr	r0, [r5, #4]
    2cdc:	ldr	r0, [r0, r4, lsl #2]
    2ce0:	blx	sl
    2ce4:	ldr	r1, [r5]
    2ce8:	cmp	r1, r4
    2cec:	bls	2cb8 <pointer_list_clean_free@@Base+0x54>
    2cf0:	sub	lr, r1, #1
    2cf4:	cmp	lr, r4
    2cf8:	bls	2d64 <pointer_list_clean_free@@Base+0x100>
    2cfc:	sub	r3, r7, r9
    2d00:	add	ip, r7, r8
    2d04:	add	r3, r1, r3
    2d08:	tst	r3, #1
    2d0c:	mov	r3, r4
    2d10:	beq	2d24 <pointer_list_clean_free@@Base+0xc0>
    2d14:	ldr	r3, [r5, #4]
    2d18:	ldr	r0, [r3, r6, lsl #2]
    2d1c:	str	r0, [r3, r4, lsl #2]
    2d20:	mov	r3, r6
    2d24:	cmn	r1, ip
    2d28:	beq	2d64 <pointer_list_clean_free@@Base+0x100>
    2d2c:	mvn	r0, r3
    2d30:	lsl	r3, r3, #2
    2d34:	add	r0, r0, r1
    2d38:	ldr	r6, [r5, #4]
    2d3c:	subs	r0, r0, #2
    2d40:	add	r2, r6, r3
    2d44:	ldr	r2, [r2, #4]
    2d48:	str	r2, [r6, r3]
    2d4c:	ldr	r2, [r5, #4]
    2d50:	add	r2, r2, r3
    2d54:	add	r3, r3, #8
    2d58:	ldr	r6, [r2, #8]
    2d5c:	str	r6, [r2, #4]
    2d60:	bne	2d38 <pointer_list_clean_free@@Base+0xd4>
    2d64:	ldr	r0, [r5, #4]
    2d68:	cmp	r1, #2
    2d6c:	bcc	2ca0 <pointer_list_clean_free@@Base+0x3c>
    2d70:	lsl	r1, lr, #2
    2d74:	bl	1084 <o_realloc@plt>
    2d78:	b	2ca8 <pointer_list_clean_free@@Base+0x44>
    2d7c:	sub	sp, fp, #28
    2d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002d84 <pointer_list_get_at@@Base>:
    2d84:	mov	r2, r0
    2d88:	mov	r0, #0
    2d8c:	cmp	r2, #0
    2d90:	beq	2da8 <pointer_list_get_at@@Base+0x24>
    2d94:	ldr	r3, [r2]
    2d98:	cmp	r3, r1
    2d9c:	bxls	lr
    2da0:	ldr	r0, [r2, #4]
    2da4:	ldr	r0, [r0, r1, lsl #2]
    2da8:	bx	lr

00002dac <pointer_list_append@@Base>:
    2dac:	push	{r4, r5, fp, lr}
    2db0:	add	fp, sp, #8
    2db4:	cmp	r0, #0
    2db8:	beq	2e00 <pointer_list_append@@Base+0x54>
    2dbc:	mov	r5, r1
    2dc0:	ldr	r1, [r0]
    2dc4:	mov	r4, r0
    2dc8:	ldr	r0, [r0, #4]
    2dcc:	mov	r2, #4
    2dd0:	add	r1, r2, r1, lsl #2
    2dd4:	bl	1084 <o_realloc@plt>
    2dd8:	cmp	r0, #0
    2ddc:	str	r0, [r4, #4]
    2de0:	beq	2e0c <pointer_list_append@@Base+0x60>
    2de4:	ldr	r1, [r4]
    2de8:	str	r5, [r0, r1, lsl #2]
    2dec:	add	r0, r1, #1
    2df0:	mov	r5, #1
    2df4:	str	r0, [r4]
    2df8:	mov	r0, r5
    2dfc:	pop	{r4, r5, fp, pc}
    2e00:	mov	r5, #0
    2e04:	mov	r0, r5
    2e08:	pop	{r4, r5, fp, pc}
    2e0c:	mov	r0, #0
    2e10:	mov	r5, #0
    2e14:	bl	1048 <o_free@plt>
    2e18:	mov	r0, r5
    2e1c:	str	r5, [r4, #4]
    2e20:	pop	{r4, r5, fp, pc}

00002e24 <pointer_list_remove_at_free@@Base>:
    2e24:	push	{r4, r5, r6, sl, fp, lr}
    2e28:	add	fp, sp, #16
    2e2c:	mov	r6, #0
    2e30:	cmp	r0, #0
    2e34:	beq	2f0c <pointer_list_remove_at_free@@Base+0xe8>
    2e38:	mov	r4, r0
    2e3c:	ldr	r0, [r0]
    2e40:	mov	r5, r1
    2e44:	cmp	r0, r1
    2e48:	bls	2f0c <pointer_list_remove_at_free@@Base+0xe8>
    2e4c:	ldr	r0, [r4, #4]
    2e50:	ldr	r0, [r0, r5, lsl #2]
    2e54:	blx	r2
    2e58:	ldr	r1, [r4]
    2e5c:	cmp	r1, r5
    2e60:	bls	2f0c <pointer_list_remove_at_free@@Base+0xe8>
    2e64:	sub	r2, r1, #1
    2e68:	cmp	r2, r5
    2e6c:	bls	2ed8 <pointer_list_remove_at_free@@Base+0xb4>
    2e70:	mvn	r0, r5
    2e74:	sub	ip, r1, #2
    2e78:	add	r3, r1, r0
    2e7c:	tst	r3, #1
    2e80:	mov	r3, r5
    2e84:	beq	2e98 <pointer_list_remove_at_free@@Base+0x74>
    2e88:	ldr	r6, [r4, #4]
    2e8c:	add	r3, r5, #1
    2e90:	ldr	r0, [r6, r3, lsl #2]
    2e94:	str	r0, [r6, r5, lsl #2]
    2e98:	cmp	ip, r5
    2e9c:	beq	2ed8 <pointer_list_remove_at_free@@Base+0xb4>
    2ea0:	mvn	r0, r3
    2ea4:	lsl	r3, r3, #2
    2ea8:	add	r0, r0, r1
    2eac:	ldr	r6, [r4, #4]
    2eb0:	subs	r0, r0, #2
    2eb4:	add	r5, r6, r3
    2eb8:	ldr	r5, [r5, #4]
    2ebc:	str	r5, [r6, r3]
    2ec0:	ldr	r6, [r4, #4]
    2ec4:	add	r6, r6, r3
    2ec8:	add	r3, r3, #8
    2ecc:	ldr	r5, [r6, #8]
    2ed0:	str	r5, [r6, #4]
    2ed4:	bne	2eac <pointer_list_remove_at_free@@Base+0x88>
    2ed8:	ldr	r0, [r4, #4]
    2edc:	cmp	r1, #2
    2ee0:	bcc	2ef0 <pointer_list_remove_at_free@@Base+0xcc>
    2ee4:	lsl	r1, r2, #2
    2ee8:	bl	1084 <o_realloc@plt>
    2eec:	b	2ef8 <pointer_list_remove_at_free@@Base+0xd4>
    2ef0:	bl	1048 <o_free@plt>
    2ef4:	mov	r0, #0
    2ef8:	str	r0, [r4, #4]
    2efc:	mov	r6, #1
    2f00:	ldr	r0, [r4]
    2f04:	sub	r0, r0, #1
    2f08:	str	r0, [r4]
    2f0c:	mov	r0, r6
    2f10:	pop	{r4, r5, r6, sl, fp, pc}

00002f14 <pointer_list_insert_at@@Base>:
    2f14:	push	{r4, r5, r6, r7, fp, lr}
    2f18:	add	fp, sp, #16
    2f1c:	mov	r7, #0
    2f20:	cmp	r0, #0
    2f24:	beq	2fe4 <pointer_list_insert_at@@Base+0xd0>
    2f28:	mov	r4, r0
    2f2c:	ldr	r0, [r0]
    2f30:	mov	r5, r2
    2f34:	cmp	r0, r2
    2f38:	bcc	2fe4 <pointer_list_insert_at@@Base+0xd0>
    2f3c:	mov	r6, r1
    2f40:	mov	r1, #4
    2f44:	add	r1, r1, r0, lsl #2
    2f48:	ldr	r0, [r4, #4]
    2f4c:	bl	1084 <o_realloc@plt>
    2f50:	cmp	r0, #0
    2f54:	str	r0, [r4, #4]
    2f58:	beq	2fe4 <pointer_list_insert_at@@Base+0xd0>
    2f5c:	ldr	r1, [r4]
    2f60:	cmp	r1, r5
    2f64:	bls	2fd4 <pointer_list_insert_at@@Base+0xc0>
    2f68:	sub	r2, r1, r5
    2f6c:	tst	r2, #1
    2f70:	bne	2f7c <pointer_list_insert_at@@Base+0x68>
    2f74:	mov	r3, r1
    2f78:	b	2f8c <pointer_list_insert_at@@Base+0x78>
    2f7c:	sub	r3, r1, #1
    2f80:	ldr	r2, [r0, r3, lsl #2]
    2f84:	str	r2, [r0, r1, lsl #2]
    2f88:	ldr	r0, [r4, #4]
    2f8c:	add	r2, r5, #1
    2f90:	cmp	r1, r2
    2f94:	beq	2fd4 <pointer_list_insert_at@@Base+0xc0>
    2f98:	lsl	r2, r3, #2
    2f9c:	sub	r3, r3, #1
    2fa0:	ldr	r7, [r0, r3, lsl #2]
    2fa4:	str	r7, [r0, r2]
    2fa8:	ldr	r0, [r4, #4]
    2fac:	add	r7, r0, r2
    2fb0:	sub	r2, r2, #8
    2fb4:	ldr	r7, [r7, #-8]
    2fb8:	str	r7, [r0, r3, lsl #2]
    2fbc:	sub	r7, r3, #2
    2fc0:	sub	r3, r3, #1
    2fc4:	ldr	r0, [r4, #4]
    2fc8:	cmp	r3, r5
    2fcc:	mov	r3, r7
    2fd0:	bhi	2fa0 <pointer_list_insert_at@@Base+0x8c>
    2fd4:	str	r6, [r0, r5, lsl #2]
    2fd8:	add	r0, r1, #1
    2fdc:	mov	r7, #1
    2fe0:	str	r0, [r4]
    2fe4:	mov	r0, r7
    2fe8:	pop	{r4, r5, r6, r7, fp, pc}

00002fec <pointer_list_remove_pointer@@Base>:
    2fec:	push	{r4, r5, fp, lr}
    2ff0:	add	fp, sp, #8
    2ff4:	mov	r5, r0
    2ff8:	mov	r0, #0
    2ffc:	cmp	r5, #0
    3000:	beq	3034 <pointer_list_remove_pointer@@Base+0x48>
    3004:	ldr	r2, [r5]
    3008:	cmp	r2, #0
    300c:	beq	3034 <pointer_list_remove_pointer@@Base+0x48>
    3010:	ldr	r0, [r5, #4]
    3014:	mov	r3, #0
    3018:	ldr	r4, [r0, r3, lsl #2]
    301c:	cmp	r4, r1
    3020:	beq	3038 <pointer_list_remove_pointer@@Base+0x4c>
    3024:	add	r3, r3, #1
    3028:	cmp	r3, r2
    302c:	bcc	3018 <pointer_list_remove_pointer@@Base+0x2c>
    3030:	mov	r0, #0
    3034:	pop	{r4, r5, fp, pc}
    3038:	sub	lr, r2, #1
    303c:	cmp	lr, r3
    3040:	bls	30d0 <pointer_list_remove_pointer@@Base+0xe4>
    3044:	add	r4, r0, r3, lsl #2
    3048:	ldr	r4, [r4, #4]
    304c:	str	r4, [r0, r3, lsl #2]
    3050:	sub	r0, r3, r2
    3054:	cmn	r0, #2
    3058:	beq	30cc <pointer_list_remove_pointer@@Base+0xe0>
    305c:	sub	r4, r2, r3
    3060:	tst	r4, #1
    3064:	bne	3078 <pointer_list_remove_pointer@@Base+0x8c>
    3068:	add	r3, r3, #1
    306c:	cmn	r0, #3
    3070:	bne	3094 <pointer_list_remove_pointer@@Base+0xa8>
    3074:	b	30cc <pointer_list_remove_pointer@@Base+0xe0>
    3078:	ldr	r4, [r5, #4]
    307c:	add	ip, r4, r3, lsl #2
    3080:	add	r3, r3, #2
    3084:	ldr	r4, [ip, #8]
    3088:	str	r4, [ip, #4]
    308c:	cmn	r0, #3
    3090:	beq	30cc <pointer_list_remove_pointer@@Base+0xe0>
    3094:	mvn	r0, r3
    3098:	lsl	r3, r3, #2
    309c:	add	r0, r0, r2
    30a0:	ldr	r4, [r5, #4]
    30a4:	subs	r0, r0, #2
    30a8:	add	r1, r4, r3
    30ac:	ldr	r1, [r1, #4]
    30b0:	str	r1, [r4, r3]
    30b4:	ldr	r1, [r5, #4]
    30b8:	add	r1, r1, r3
    30bc:	add	r3, r3, #8
    30c0:	ldr	r4, [r1, #8]
    30c4:	str	r4, [r1, #4]
    30c8:	bne	30a0 <pointer_list_remove_pointer@@Base+0xb4>
    30cc:	ldr	r0, [r5, #4]
    30d0:	cmp	r2, #2
    30d4:	bcc	30e4 <pointer_list_remove_pointer@@Base+0xf8>
    30d8:	lsl	r1, lr, #2
    30dc:	bl	1084 <o_realloc@plt>
    30e0:	b	30ec <pointer_list_remove_pointer@@Base+0x100>
    30e4:	bl	1048 <o_free@plt>
    30e8:	mov	r0, #0
    30ec:	str	r0, [r5, #4]
    30f0:	ldr	r0, [r5]
    30f4:	sub	r0, r0, #1
    30f8:	str	r0, [r5]
    30fc:	mov	r0, #1
    3100:	pop	{r4, r5, fp, pc}

00003104 <pointer_list_remove_pointer_free@@Base>:
    3104:	push	{r4, r5, r6, sl, fp, lr}
    3108:	add	fp, sp, #16
    310c:	mov	r6, r0
    3110:	mov	r0, #0
    3114:	cmp	r6, #0
    3118:	beq	31f8 <pointer_list_remove_pointer_free@@Base+0xf4>
    311c:	ldr	r3, [r6]
    3120:	cmp	r3, #0
    3124:	beq	31f8 <pointer_list_remove_pointer_free@@Base+0xf4>
    3128:	ldr	r0, [r6, #4]
    312c:	mov	r5, #0
    3130:	ldr	r4, [r0, r5, lsl #2]
    3134:	cmp	r4, r1
    3138:	beq	3150 <pointer_list_remove_pointer_free@@Base+0x4c>
    313c:	add	r5, r5, #1
    3140:	cmp	r5, r3
    3144:	bcc	3130 <pointer_list_remove_pointer_free@@Base+0x2c>
    3148:	mov	r0, #0
    314c:	b	31f8 <pointer_list_remove_pointer_free@@Base+0xf4>
    3150:	mov	r0, r1
    3154:	blx	r2
    3158:	ldr	r1, [r6]
    315c:	mov	r0, #0
    3160:	cmp	r1, r5
    3164:	bls	31f8 <pointer_list_remove_pointer_free@@Base+0xf4>
    3168:	sub	r2, r1, #1
    316c:	cmp	r2, r5
    3170:	bls	31e0 <pointer_list_remove_pointer_free@@Base+0xdc>
    3174:	mvn	r0, r5
    3178:	add	r3, r1, r0
    317c:	sub	r0, r1, #2
    3180:	tst	r3, #1
    3184:	mov	r3, r5
    3188:	beq	31a0 <pointer_list_remove_pointer_free@@Base+0x9c>
    318c:	ldr	r3, [r6, #4]
    3190:	add	r4, r3, r5, lsl #2
    3194:	ldr	r4, [r4, #4]
    3198:	str	r4, [r3, r5, lsl #2]
    319c:	add	r3, r5, #1
    31a0:	cmp	r0, r5
    31a4:	beq	31e0 <pointer_list_remove_pointer_free@@Base+0xdc>
    31a8:	mvn	r0, r3
    31ac:	lsl	r3, r3, #2
    31b0:	add	r0, r0, r1
    31b4:	ldr	r5, [r6, #4]
    31b8:	subs	r0, r0, #2
    31bc:	add	r4, r5, r3
    31c0:	ldr	r4, [r4, #4]
    31c4:	str	r4, [r5, r3]
    31c8:	ldr	r5, [r6, #4]
    31cc:	add	r5, r5, r3
    31d0:	add	r3, r3, #8
    31d4:	ldr	r4, [r5, #8]
    31d8:	str	r4, [r5, #4]
    31dc:	bne	31b4 <pointer_list_remove_pointer_free@@Base+0xb0>
    31e0:	ldr	r0, [r6, #4]
    31e4:	cmp	r1, #2
    31e8:	bcc	31fc <pointer_list_remove_pointer_free@@Base+0xf8>
    31ec:	lsl	r1, r2, #2
    31f0:	bl	1084 <o_realloc@plt>
    31f4:	b	3204 <pointer_list_remove_pointer_free@@Base+0x100>
    31f8:	pop	{r4, r5, r6, sl, fp, pc}
    31fc:	bl	1048 <o_free@plt>
    3200:	mov	r0, #0
    3204:	str	r0, [r6, #4]
    3208:	ldr	r0, [r6]
    320c:	sub	r0, r0, #1
    3210:	str	r0, [r6]
    3214:	mov	r0, #1
    3218:	pop	{r4, r5, r6, sl, fp, pc}

Disassembly of section .fini:

0000321c <.fini>:
    321c:	push	{r3, lr}
    3220:	pop	{r3, pc}
