
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010c4c <.init>:
   10c4c:	push	{r3, lr}
   10c50:	bl	114cc <__assert_fail@plt+0x608>
   10c54:	pop	{r3, pc}

Disassembly of section .plt:

00010c58 <calloc@plt-0x14>:
   10c58:	push	{lr}		; (str lr, [sp, #-4]!)
   10c5c:	ldr	lr, [pc, #4]	; 10c68 <calloc@plt-0x4>
   10c60:	add	lr, pc, lr
   10c64:	ldr	pc, [lr, #8]!
   10c68:	muleq	r1, r8, r3

00010c6c <calloc@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #90112	; 0x16000
   10c74:	ldr	pc, [ip, #920]!	; 0x398

00010c78 <fputs_unlocked@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #90112	; 0x16000
   10c80:	ldr	pc, [ip, #912]!	; 0x390

00010c84 <raise@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #90112	; 0x16000
   10c8c:	ldr	pc, [ip, #904]!	; 0x388

00010c90 <strcmp@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #90112	; 0x16000
   10c98:	ldr	pc, [ip, #896]!	; 0x380

00010c9c <posix_fadvise64@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #888]!	; 0x378

00010ca8 <fflush@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #880]!	; 0x370

00010cb4 <free@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #872]!	; 0x368

00010cc0 <_exit@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #864]!	; 0x360

00010ccc <memcpy@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #856]!	; 0x358

00010cd8 <mbsinit@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #848]!	; 0x350

00010ce4 <fwrite_unlocked@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #840]!	; 0x348

00010cf0 <memcmp@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #832]!	; 0x340

00010cfc <fputc_unlocked@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #824]!	; 0x338

00010d08 <dcgettext@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #816]!	; 0x330

00010d14 <realloc@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #808]!	; 0x328

00010d20 <textdomain@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #800]!	; 0x320

00010d2c <iswprint@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #792]!	; 0x318

00010d38 <fwrite@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #784]!	; 0x310

00010d44 <lseek64@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #776]!	; 0x308

00010d50 <__ctype_get_mb_cur_max@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #768]!	; 0x300

00010d5c <__fpending@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #760]!	; 0x2f8

00010d68 <mbrtowc@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #752]!	; 0x2f0

00010d74 <error@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d80 <malloc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #736]!	; 0x2e0

00010d8c <__libc_start_main@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #728]!	; 0x2d8

00010d98 <__freading@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #720]!	; 0x2d0

00010da4 <__gmon_start__@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #712]!	; 0x2c8

00010db0 <getopt_long@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #704]!	; 0x2c0

00010dbc <__ctype_b_loc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #696]!	; 0x2b8

00010dc8 <exit@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #688]!	; 0x2b0

00010dd4 <strlen@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #680]!	; 0x2a8

00010de0 <__errno_location@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #672]!	; 0x2a0

00010dec <__cxa_atexit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #664]!	; 0x298

00010df8 <memset@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #656]!	; 0x290

00010e04 <__printf_chk@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #648]!	; 0x288

00010e10 <fileno@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #640]!	; 0x280

00010e1c <__fprintf_chk@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #632]!	; 0x278

00010e28 <fclose@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #624]!	; 0x270

00010e34 <fseeko64@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #616]!	; 0x268

00010e40 <__uflow@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #608]!	; 0x260

00010e4c <__overflow@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #600]!	; 0x258

00010e58 <setlocale@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #592]!	; 0x250

00010e64 <strrchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #584]!	; 0x248

00010e70 <nl_langinfo@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #576]!	; 0x240

00010e7c <clearerr_unlocked@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #568]!	; 0x238

00010e88 <fopen64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #560]!	; 0x230

00010e94 <bindtextdomain@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #552]!	; 0x228

00010ea0 <strncmp@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #544]!	; 0x220

00010eac <abort@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #536]!	; 0x218

00010eb8 <strspn@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #528]!	; 0x210

00010ec4 <__assert_fail@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #520]!	; 0x208

Disassembly of section .text:

00010ed0 <.text>:
   10ed0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10ed4:	movw	r5, #24128	; 0x5e40
   10ed8:	movt	r5, #1
   10edc:	strd	r6, [sp, #8]
   10ee0:	mov	r7, r0
   10ee4:	mov	r6, r1
   10ee8:	strd	r8, [sp, #16]
   10eec:	mov	r9, #0
   10ef0:	strd	sl, [sp, #24]
   10ef4:	mov	sl, #0
   10ef8:	mov	fp, #0
   10efc:	str	lr, [sp, #32]
   10f00:	sub	sp, sp, #36	; 0x24
   10f04:	ldr	r8, [pc, #1140]	; 11380 <__assert_fail@plt+0x4bc>
   10f08:	str	r9, [sp, #12]
   10f0c:	ldr	r0, [r1]
   10f10:	bl	1271c <__assert_fail@plt+0x1858>
   10f14:	movw	r1, #23716	; 0x5ca4
   10f18:	movt	r1, #1
   10f1c:	mov	r0, #6
   10f20:	bl	10e58 <setlocale@plt>
   10f24:	movw	r1, #24060	; 0x5dfc
   10f28:	movt	r1, #1
   10f2c:	movw	r0, #23892	; 0x5d54
   10f30:	movt	r0, #1
   10f34:	bl	10e94 <bindtextdomain@plt>
   10f38:	movw	r0, #23892	; 0x5d54
   10f3c:	movt	r0, #1
   10f40:	bl	10d20 <textdomain@plt>
   10f44:	movw	r0, #9112	; 0x2398
   10f48:	movt	r0, #1
   10f4c:	bl	159ec <__assert_fail@plt+0x4b28>
   10f50:	str	r5, [sp, #8]
   10f54:	ldr	r5, [sp, #8]
   10f58:	mov	r4, #0
   10f5c:	mov	r3, r8
   10f60:	mov	r2, r5
   10f64:	str	r4, [sp]
   10f68:	mov	r1, r6
   10f6c:	mov	r0, r7
   10f70:	bl	10db0 <getopt_long@plt>
   10f74:	cmn	r0, #1
   10f78:	beq	110d0 <__assert_fail@plt+0x20c>
   10f7c:	cmp	r0, #63	; 0x3f
   10f80:	beq	1144c <__assert_fail@plt+0x588>
   10f84:	ble	10ff8 <__assert_fail@plt+0x134>
   10f88:	cmp	r0, #116	; 0x74
   10f8c:	beq	1106c <__assert_fail@plt+0x1a8>
   10f90:	cmp	r0, #256	; 0x100
   10f94:	mov	r3, #1
   10f98:	beq	11054 <__assert_fail@plt+0x190>
   10f9c:	cmp	r0, #97	; 0x61
   10fa0:	str	r5, [sp, #8]
   10fa4:	beq	1105c <__assert_fail@plt+0x198>
   10fa8:	ldr	r3, [sp, #12]
   10fac:	cmp	r3, #0
   10fb0:	beq	110b8 <__assert_fail@plt+0x1f4>
   10fb4:	add	r3, pc, #956	; 0x3bc
   10fb8:	ldrd	r2, [r3]
   10fbc:	cmp	fp, r3
   10fc0:	cmpeq	sl, r2
   10fc4:	bhi	11478 <__assert_fail@plt+0x5b4>
   10fc8:	mov	r1, #10
   10fcc:	sub	r0, r0, #48	; 0x30
   10fd0:	umull	r2, r3, sl, r1
   10fd4:	mla	r3, r1, fp, r3
   10fd8:	adds	r4, r2, r0
   10fdc:	adc	r5, r3, r0, asr #31
   10fe0:	cmp	fp, r5
   10fe4:	cmpeq	sl, r4
   10fe8:	bhi	11478 <__assert_fail@plt+0x5b4>
   10fec:	mov	sl, r4
   10ff0:	mov	fp, r5
   10ff4:	b	10f54 <__assert_fail@plt+0x90>
   10ff8:	cmn	r0, #2
   10ffc:	str	r5, [sp, #8]
   11000:	beq	11444 <__assert_fail@plt+0x580>
   11004:	cmp	r0, #44	; 0x2c
   11008:	beq	11094 <__assert_fail@plt+0x1d0>
   1100c:	cmn	r0, #3
   11010:	bne	10fa8 <__assert_fail@plt+0xe4>
   11014:	movw	r2, #24084	; 0x5e14
   11018:	movt	r2, #1
   1101c:	movw	r3, #28908	; 0x70ec
   11020:	movt	r3, #2
   11024:	movw	r0, #29012	; 0x7154
   11028:	movt	r0, #2
   1102c:	stm	sp, {r2, r4}
   11030:	movw	r1, #23208	; 0x5aa8
   11034:	movt	r1, #1
   11038:	ldr	r0, [r0]
   1103c:	movw	r2, #23888	; 0x5d50
   11040:	movt	r2, #1
   11044:	ldr	r3, [r3]
   11048:	bl	14ea8 <__assert_fail@plt+0x3fe4>
   1104c:	mov	r0, #0
   11050:	bl	10dc8 <exit@plt>
   11054:	mov	r9, r3
   11058:	b	10f5c <__assert_fail@plt+0x98>
   1105c:	movw	r2, #29080	; 0x7198
   11060:	movt	r2, #2
   11064:	strb	r3, [r2]
   11068:	b	10f54 <__assert_fail@plt+0x90>
   1106c:	mov	r1, #1
   11070:	movw	r3, #29080	; 0x7198
   11074:	movt	r3, #2
   11078:	movw	r2, #29016	; 0x7158
   1107c:	movt	r2, #2
   11080:	str	r5, [sp, #8]
   11084:	ldr	r0, [r2]
   11088:	strb	r1, [r3]
   1108c:	bl	11ae4 <__assert_fail@plt+0xc20>
   11090:	b	10f54 <__assert_fail@plt+0x90>
   11094:	ldr	r3, [sp, #12]
   11098:	cmp	r3, #0
   1109c:	beq	10f54 <__assert_fail@plt+0x90>
   110a0:	mov	r3, #0
   110a4:	mov	r0, sl
   110a8:	mov	r1, fp
   110ac:	str	r3, [sp, #12]
   110b0:	bl	119c8 <__assert_fail@plt+0xb04>
   110b4:	b	10f54 <__assert_fail@plt+0x90>
   110b8:	mov	r3, #1
   110bc:	sub	r0, r0, #48	; 0x30
   110c0:	mov	sl, r0
   110c4:	asr	fp, r0, #31
   110c8:	str	r3, [sp, #12]
   110cc:	b	10f54 <__assert_fail@plt+0x90>
   110d0:	cmp	r9, #0
   110d4:	beq	110e4 <__assert_fail@plt+0x220>
   110d8:	movw	r3, #29080	; 0x7198
   110dc:	movt	r3, #2
   110e0:	strb	r4, [r3]
   110e4:	ldr	r3, [sp, #12]
   110e8:	cmp	r3, #0
   110ec:	bne	11434 <__assert_fail@plt+0x570>
   110f0:	bl	11e30 <__assert_fail@plt+0xf6c>
   110f4:	movw	r3, #28992	; 0x7140
   110f8:	movt	r3, #2
   110fc:	ldr	r0, [r3]
   11100:	cmp	r0, r7
   11104:	addlt	r0, r6, r0, lsl #2
   11108:	movge	r0, #0
   1110c:	bl	120dc <__assert_fail@plt+0x1218>
   11110:	mov	r0, #0
   11114:	bl	12104 <__assert_fail@plt+0x1240>
   11118:	subs	sl, r0, #0
   1111c:	beq	113d0 <__assert_fail@plt+0x50c>
   11120:	movw	r3, #29052	; 0x717c
   11124:	movt	r3, #2
   11128:	ldr	r0, [r3]
   1112c:	movw	r3, #29080	; 0x7198
   11130:	movt	r3, #2
   11134:	movw	fp, #29012	; 0x7154
   11138:	movt	fp, #2
   1113c:	str	r3, [sp, #16]
   11140:	bl	14fb8 <__assert_fail@plt+0x40f4>
   11144:	str	r0, [sp, #20]
   11148:	mov	r7, #0
   1114c:	mov	r6, #1
   11150:	mov	r8, #0
   11154:	mov	r9, #0
   11158:	str	r7, [sp, #8]
   1115c:	str	r6, [sp, #12]
   11160:	str	r7, [sp, #28]
   11164:	b	1121c <__assert_fail@plt+0x358>
   11168:	cmp	r4, #8
   1116c:	beq	11334 <__assert_fail@plt+0x470>
   11170:	adds	r8, r8, #1
   11174:	adc	r9, r9, #0
   11178:	orrs	r3, r8, r9
   1117c:	beq	11454 <__assert_fail@plt+0x590>
   11180:	mov	r6, #1
   11184:	cmp	r7, #0
   11188:	str	r5, [sp, #12]
   1118c:	beq	111d8 <__assert_fail@plt+0x314>
   11190:	ldr	r3, [sp, #8]
   11194:	cmp	r7, #1
   11198:	movls	r3, #0
   1119c:	andhi	r3, r3, #1
   111a0:	cmp	r3, #0
   111a4:	beq	111b4 <__assert_fail@plt+0x2f0>
   111a8:	ldr	r2, [sp, #20]
   111ac:	mov	r3, #9
   111b0:	strb	r3, [r2]
   111b4:	mov	r2, r7
   111b8:	mov	r1, #1
   111bc:	ldr	r3, [fp]
   111c0:	ldr	r0, [sp, #20]
   111c4:	bl	10ce4 <fwrite_unlocked@plt>
   111c8:	cmp	r0, r7
   111cc:	bne	11394 <__assert_fail@plt+0x4d0>
   111d0:	mov	r3, #0
   111d4:	str	r3, [sp, #8]
   111d8:	ldr	r3, [sp, #16]
   111dc:	cmp	r4, #0
   111e0:	ldrb	r3, [r3]
   111e4:	orr	r3, r5, r3
   111e8:	and	r6, r6, r3
   111ec:	blt	113c8 <__assert_fail@plt+0x504>
   111f0:	mov	r7, #0
   111f4:	ldr	r0, [fp]
   111f8:	ldr	r3, [r0, #20]
   111fc:	ldr	r2, [r0, #24]
   11200:	cmp	r3, r2
   11204:	addcc	r2, r3, #1
   11208:	strcc	r2, [r0, #20]
   1120c:	strbcc	r4, [r3]
   11210:	bcs	11384 <__assert_fail@plt+0x4c0>
   11214:	cmp	r4, #10
   11218:	beq	11148 <__assert_fail@plt+0x284>
   1121c:	ldr	r3, [sl, #4]
   11220:	ldr	r2, [sl, #8]
   11224:	cmp	r3, r2
   11228:	bcs	112e8 <__assert_fail@plt+0x424>
   1122c:	add	r2, r3, #1
   11230:	str	r2, [sl, #4]
   11234:	ldrb	r4, [r3]
   11238:	cmp	r6, #0
   1123c:	beq	111f4 <__assert_fail@plt+0x330>
   11240:	bl	10dbc <__ctype_b_loc@plt>
   11244:	ldr	r2, [r0]
   11248:	lsl	r3, r4, #1
   1124c:	ldrh	r3, [r2, r3]
   11250:	and	r3, r3, #1
   11254:	uxth	r2, r3
   11258:	uxtb	r5, r3
   1125c:	cmp	r2, #0
   11260:	beq	11168 <__assert_fail@plt+0x2a4>
   11264:	add	r3, sp, #27
   11268:	add	r2, sp, #28
   1126c:	mov	r0, r8
   11270:	mov	r1, r9
   11274:	bl	11f80 <__assert_fail@plt+0x10bc>
   11278:	ldrb	r3, [sp, #27]
   1127c:	cmp	r3, #0
   11280:	bne	113c0 <__assert_fail@plt+0x4fc>
   11284:	cmp	r9, r1
   11288:	cmpeq	r8, r0
   1128c:	bhi	11484 <__assert_fail@plt+0x5c0>
   11290:	cmp	r4, #9
   11294:	beq	113fc <__assert_fail@plt+0x538>
   11298:	ldr	r3, [sp, #12]
   1129c:	adds	r8, r8, #1
   112a0:	adc	r9, r9, #0
   112a4:	cmp	r1, r9
   112a8:	cmpeq	r0, r8
   112ac:	eor	r6, r3, #1
   112b0:	orrne	r6, r6, #1
   112b4:	ands	r6, r6, #255	; 0xff
   112b8:	bne	1140c <__assert_fail@plt+0x548>
   112bc:	ldr	r2, [sp, #20]
   112c0:	mov	r3, #9
   112c4:	mov	r0, r8
   112c8:	mov	r1, r9
   112cc:	strb	r3, [r2]
   112d0:	mov	r8, r0
   112d4:	mov	r9, r1
   112d8:	ldr	r7, [sp, #8]
   112dc:	mov	r6, #1
   112e0:	mov	r4, #9
   112e4:	b	11184 <__assert_fail@plt+0x2c0>
   112e8:	mov	r0, sl
   112ec:	bl	10e40 <__uflow@plt>
   112f0:	subs	r4, r0, #0
   112f4:	bge	11238 <__assert_fail@plt+0x374>
   112f8:	mov	r0, sl
   112fc:	bl	12104 <__assert_fail@plt+0x1240>
   11300:	subs	sl, r0, #0
   11304:	bne	1121c <__assert_fail@plt+0x358>
   11308:	cmp	r6, #0
   1130c:	beq	113c8 <__assert_fail@plt+0x504>
   11310:	bl	10dbc <__ctype_b_loc@plt>
   11314:	ldr	r2, [r0]
   11318:	lsl	r3, r4, #1
   1131c:	ldrh	r3, [r2, r3]
   11320:	and	r3, r3, #1
   11324:	cmp	r3, #0
   11328:	uxtb	r5, r3
   1132c:	beq	11170 <__assert_fail@plt+0x2ac>
   11330:	b	11264 <__assert_fail@plt+0x3a0>
   11334:	ldr	r3, [sp, #28]
   11338:	orrs	r1, r8, r9
   1133c:	movne	r1, #1
   11340:	moveq	r1, #0
   11344:	subs	r8, r8, r1
   11348:	sbc	r9, r9, r2
   1134c:	cmp	r3, #0
   11350:	subne	r3, r3, #1
   11354:	cmp	r7, #0
   11358:	strne	r5, [sp, #12]
   1135c:	str	r3, [sp, #28]
   11360:	bne	11190 <__assert_fail@plt+0x2cc>
   11364:	ldr	r3, [sp, #16]
   11368:	str	r5, [sp, #12]
   1136c:	ldrb	r6, [r3]
   11370:	orr	r6, r5, r6
   11374:	b	111f4 <__assert_fail@plt+0x330>
   11378:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1137c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11380:	andeq	r5, r1, r8, asr #20
   11384:	uxtb	r1, r4
   11388:	bl	10e4c <__overflow@plt>
   1138c:	cmp	r0, #0
   11390:	bge	11214 <__assert_fail@plt+0x350>
   11394:	bl	10de0 <__errno_location@plt>
   11398:	ldr	r4, [r0]
   1139c:	mov	r2, #5
   113a0:	movw	r1, #24168	; 0x5e68
   113a4:	movt	r1, #1
   113a8:	mov	r0, #0
   113ac:	bl	10d08 <dcgettext@plt>
   113b0:	mov	r2, r0
   113b4:	mov	r0, #1
   113b8:	mov	r1, r4
   113bc:	bl	10d74 <error@plt>
   113c0:	mov	r6, #0
   113c4:	b	11184 <__assert_fail@plt+0x2c0>
   113c8:	ldr	r0, [sp, #20]
   113cc:	bl	125ec <__assert_fail@plt+0x1728>
   113d0:	bl	122cc <__assert_fail@plt+0x1408>
   113d4:	movw	r3, #29076	; 0x7194
   113d8:	movt	r3, #2
   113dc:	ldr	r0, [r3]
   113e0:	add	sp, sp, #36	; 0x24
   113e4:	ldrd	r4, [sp]
   113e8:	ldrd	r6, [sp, #8]
   113ec:	ldrd	r8, [sp, #16]
   113f0:	ldrd	sl, [sp, #24]
   113f4:	add	sp, sp, #32
   113f8:	pop	{pc}		; (ldr pc, [sp], #4)
   113fc:	cmp	r7, #0
   11400:	ldrne	r3, [sp, #20]
   11404:	strbne	r4, [r3]
   11408:	b	112d0 <__assert_fail@plt+0x40c>
   1140c:	ldr	r3, [sp, #20]
   11410:	cmp	r1, r9
   11414:	cmpeq	r0, r8
   11418:	str	r6, [sp, #12]
   1141c:	strb	r4, [r3, r7]
   11420:	add	r7, r7, #1
   11424:	ldr	r3, [sp, #8]
   11428:	moveq	r3, r6
   1142c:	str	r3, [sp, #8]
   11430:	b	11214 <__assert_fail@plt+0x350>
   11434:	mov	r0, sl
   11438:	mov	r1, fp
   1143c:	bl	119c8 <__assert_fail@plt+0xb04>
   11440:	b	110f0 <__assert_fail@plt+0x22c>
   11444:	mov	r0, #0
   11448:	bl	11580 <__assert_fail@plt+0x6bc>
   1144c:	mov	r0, #1
   11450:	bl	11580 <__assert_fail@plt+0x6bc>
   11454:	movw	r1, #24144	; 0x5e50
   11458:	movt	r1, #1
   1145c:	mov	r2, #5
   11460:	mov	r0, #0
   11464:	bl	10d08 <dcgettext@plt>
   11468:	mov	r2, r0
   1146c:	mov	r1, #0
   11470:	mov	r0, #1
   11474:	bl	10d74 <error@plt>
   11478:	movw	r1, #24100	; 0x5e24
   1147c:	movt	r1, #1
   11480:	b	1145c <__assert_fail@plt+0x598>
   11484:	movw	r1, #24144	; 0x5e50
   11488:	movt	r1, #1
   1148c:	b	1145c <__assert_fail@plt+0x598>
   11490:	mov	fp, #0
   11494:	mov	lr, #0
   11498:	pop	{r1}		; (ldr r1, [sp], #4)
   1149c:	mov	r2, sp
   114a0:	push	{r2}		; (str r2, [sp, #-4]!)
   114a4:	push	{r0}		; (str r0, [sp, #-4]!)
   114a8:	ldr	ip, [pc, #16]	; 114c0 <__assert_fail@plt+0x5fc>
   114ac:	push	{ip}		; (str ip, [sp, #-4]!)
   114b0:	ldr	r0, [pc, #12]	; 114c4 <__assert_fail@plt+0x600>
   114b4:	ldr	r3, [pc, #12]	; 114c8 <__assert_fail@plt+0x604>
   114b8:	bl	10d8c <__libc_start_main@plt>
   114bc:	bl	10eac <abort@plt>
   114c0:	andeq	r5, r1, r8, ror #19
   114c4:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   114c8:	andeq	r5, r1, r8, lsl #19
   114cc:	ldr	r3, [pc, #20]	; 114e8 <__assert_fail@plt+0x624>
   114d0:	ldr	r2, [pc, #20]	; 114ec <__assert_fail@plt+0x628>
   114d4:	add	r3, pc, r3
   114d8:	ldr	r2, [r3, r2]
   114dc:	cmp	r2, #0
   114e0:	bxeq	lr
   114e4:	b	10da4 <__gmon_start__@plt>
   114e8:	andeq	r5, r1, r4, lsr #22
   114ec:	ldrdeq	r0, [r0], -r8
   114f0:	ldr	r0, [pc, #24]	; 11510 <__assert_fail@plt+0x64c>
   114f4:	ldr	r3, [pc, #24]	; 11514 <__assert_fail@plt+0x650>
   114f8:	cmp	r3, r0
   114fc:	bxeq	lr
   11500:	ldr	r3, [pc, #16]	; 11518 <__assert_fail@plt+0x654>
   11504:	cmp	r3, #0
   11508:	bxeq	lr
   1150c:	bx	r3
   11510:	andeq	r7, r2, r4, lsr r1
   11514:	andeq	r7, r2, r4, lsr r1
   11518:	andeq	r0, r0, r0
   1151c:	ldr	r0, [pc, #36]	; 11548 <__assert_fail@plt+0x684>
   11520:	ldr	r1, [pc, #36]	; 1154c <__assert_fail@plt+0x688>
   11524:	sub	r1, r1, r0
   11528:	asr	r1, r1, #2
   1152c:	add	r1, r1, r1, lsr #31
   11530:	asrs	r1, r1, #1
   11534:	bxeq	lr
   11538:	ldr	r3, [pc, #16]	; 11550 <__assert_fail@plt+0x68c>
   1153c:	cmp	r3, #0
   11540:	bxeq	lr
   11544:	bx	r3
   11548:	andeq	r7, r2, r4, lsr r1
   1154c:	andeq	r7, r2, r4, lsr r1
   11550:	andeq	r0, r0, r0
   11554:	push	{r4, lr}
   11558:	ldr	r4, [pc, #24]	; 11578 <__assert_fail@plt+0x6b4>
   1155c:	ldrb	r3, [r4]
   11560:	cmp	r3, #0
   11564:	popne	{r4, pc}
   11568:	bl	114f0 <__assert_fail@plt+0x62c>
   1156c:	mov	r3, #1
   11570:	strb	r3, [r4]
   11574:	pop	{r4, pc}
   11578:	andeq	r7, r2, ip, asr r1
   1157c:	b	1151c <__assert_fail@plt+0x658>
   11580:	subs	r6, r0, #0
   11584:	str	r7, [sp, #-8]!
   11588:	str	lr, [sp, #4]
   1158c:	sub	sp, sp, #56	; 0x38
   11590:	beq	115d8 <__assert_fail@plt+0x714>
   11594:	movw	r3, #29000	; 0x7148
   11598:	movt	r3, #2
   1159c:	ldr	r4, [r3]
   115a0:	mov	r2, #5
   115a4:	movw	r1, #23220	; 0x5ab4
   115a8:	movt	r1, #1
   115ac:	mov	r0, #0
   115b0:	bl	10d08 <dcgettext@plt>
   115b4:	movw	r3, #29092	; 0x71a4
   115b8:	movt	r3, #2
   115bc:	mov	r2, r0
   115c0:	mov	r1, #1
   115c4:	ldr	r3, [r3]
   115c8:	mov	r0, r4
   115cc:	bl	10e1c <__fprintf_chk@plt>
   115d0:	mov	r0, r6
   115d4:	bl	10dc8 <exit@plt>
   115d8:	mov	r2, #5
   115dc:	movw	r1, #23260	; 0x5adc
   115e0:	movt	r1, #1
   115e4:	movw	r7, #29012	; 0x7154
   115e8:	movt	r7, #2
   115ec:	bl	10d08 <dcgettext@plt>
   115f0:	movw	r3, #29092	; 0x71a4
   115f4:	movt	r3, #2
   115f8:	mov	r1, r0
   115fc:	mov	r0, #1
   11600:	ldr	r2, [r3]
   11604:	bl	10e04 <__printf_chk@plt>
   11608:	mov	r2, #5
   1160c:	movw	r1, #23296	; 0x5b00
   11610:	movt	r1, #1
   11614:	mov	r0, r6
   11618:	bl	10d08 <dcgettext@plt>
   1161c:	ldr	r1, [r7]
   11620:	bl	10c78 <fputs_unlocked@plt>
   11624:	mov	r2, #5
   11628:	movw	r1, #23364	; 0x5b44
   1162c:	movt	r1, #1
   11630:	mov	r0, r6
   11634:	bl	10d08 <dcgettext@plt>
   11638:	ldr	r1, [r7]
   1163c:	bl	10c78 <fputs_unlocked@plt>
   11640:	mov	r2, #5
   11644:	movw	r1, #23420	; 0x5b7c
   11648:	movt	r1, #1
   1164c:	mov	r0, r6
   11650:	bl	10d08 <dcgettext@plt>
   11654:	ldr	r1, [r7]
   11658:	bl	10c78 <fputs_unlocked@plt>
   1165c:	mov	r2, #5
   11660:	movw	r1, #23496	; 0x5bc8
   11664:	movt	r1, #1
   11668:	mov	r0, r6
   1166c:	bl	10d08 <dcgettext@plt>
   11670:	ldr	r1, [r7]
   11674:	bl	10c78 <fputs_unlocked@plt>
   11678:	bl	12324 <__assert_fail@plt+0x1460>
   1167c:	mov	r2, #5
   11680:	movw	r1, #23720	; 0x5ca8
   11684:	movt	r1, #1
   11688:	mov	r0, r6
   1168c:	bl	10d08 <dcgettext@plt>
   11690:	ldr	r1, [r7]
   11694:	bl	10c78 <fputs_unlocked@plt>
   11698:	mov	r2, #5
   1169c:	movw	r1, #23768	; 0x5cd8
   116a0:	movt	r1, #1
   116a4:	mov	r0, r6
   116a8:	bl	10d08 <dcgettext@plt>
   116ac:	ldr	r1, [r7]
   116b0:	bl	10c78 <fputs_unlocked@plt>
   116b4:	movw	lr, #23056	; 0x5a10
   116b8:	movt	lr, #1
   116bc:	ldr	ip, [lr]
   116c0:	ldr	r4, [lr, #4]
   116c4:	ldrd	r8, [lr, #8]
   116c8:	subs	r1, ip, #0
   116cc:	str	ip, [sp]
   116d0:	ldrd	r2, [lr, #16]
   116d4:	str	r4, [sp, #4]
   116d8:	ldrd	r4, [lr, #24]
   116dc:	strd	r8, [sp, #8]
   116e0:	ldrd	r8, [lr, #32]
   116e4:	strd	r2, [sp, #16]
   116e8:	ldrd	r2, [lr, #40]	; 0x28
   116ec:	strd	r4, [sp, #24]
   116f0:	ldrd	r4, [lr, #48]	; 0x30
   116f4:	strd	r8, [sp, #32]
   116f8:	strd	r2, [sp, #40]	; 0x28
   116fc:	strd	r4, [sp, #48]	; 0x30
   11700:	movwne	r5, #23208	; 0x5aa8
   11704:	mov	r4, sp
   11708:	movtne	r5, #1
   1170c:	bne	11804 <__assert_fail@plt+0x940>
   11710:	ldr	r4, [r4, #4]
   11714:	movw	r1, #23824	; 0x5d10
   11718:	movt	r1, #1
   1171c:	mov	r2, #5
   11720:	cmp	r4, #0
   11724:	beq	11818 <__assert_fail@plt+0x954>
   11728:	mov	r0, #0
   1172c:	bl	10d08 <dcgettext@plt>
   11730:	mov	r1, r0
   11734:	movw	r3, #23848	; 0x5d28
   11738:	movt	r3, #1
   1173c:	movw	r2, #23888	; 0x5d50
   11740:	movt	r2, #1
   11744:	mov	r0, #1
   11748:	bl	10e04 <__printf_chk@plt>
   1174c:	mov	r1, #0
   11750:	mov	r0, #5
   11754:	bl	10e58 <setlocale@plt>
   11758:	cmp	r0, #0
   1175c:	movweq	r5, #23208	; 0x5aa8
   11760:	movteq	r5, #1
   11764:	beq	11788 <__assert_fail@plt+0x8c4>
   11768:	movw	r1, #23904	; 0x5d60
   1176c:	movt	r1, #1
   11770:	mov	r2, #3
   11774:	movw	r5, #23208	; 0x5aa8
   11778:	movt	r5, #1
   1177c:	bl	10ea0 <strncmp@plt>
   11780:	cmp	r0, #0
   11784:	bne	118d0 <__assert_fail@plt+0xa0c>
   11788:	mov	r2, #5
   1178c:	movw	r1, #23980	; 0x5dac
   11790:	movt	r1, #1
   11794:	mov	r0, #0
   11798:	bl	10d08 <dcgettext@plt>
   1179c:	mov	r1, r0
   117a0:	movw	r3, #23208	; 0x5aa8
   117a4:	movt	r3, #1
   117a8:	movw	r2, #23848	; 0x5d28
   117ac:	movt	r2, #1
   117b0:	mov	r0, #1
   117b4:	bl	10e04 <__printf_chk@plt>
   117b8:	mov	r2, #5
   117bc:	movw	r1, #24008	; 0x5dc8
   117c0:	movt	r1, #1
   117c4:	mov	r0, #0
   117c8:	bl	10d08 <dcgettext@plt>
   117cc:	movw	r2, #24188	; 0x5e7c
   117d0:	movt	r2, #1
   117d4:	cmp	r4, r5
   117d8:	movw	r3, #23716	; 0x5ca4
   117dc:	movt	r3, #1
   117e0:	mov	r1, r0
   117e4:	moveq	r3, r2
   117e8:	mov	r2, r4
   117ec:	mov	r0, #1
   117f0:	bl	10e04 <__printf_chk@plt>
   117f4:	b	115d0 <__assert_fail@plt+0x70c>
   117f8:	ldr	r1, [r4, #8]!
   117fc:	cmp	r1, #0
   11800:	beq	11710 <__assert_fail@plt+0x84c>
   11804:	mov	r0, r5
   11808:	bl	10c90 <strcmp@plt>
   1180c:	cmp	r0, #0
   11810:	bne	117f8 <__assert_fail@plt+0x934>
   11814:	b	11710 <__assert_fail@plt+0x84c>
   11818:	mov	r0, r4
   1181c:	bl	10d08 <dcgettext@plt>
   11820:	mov	r1, r0
   11824:	movw	r3, #23848	; 0x5d28
   11828:	movt	r3, #1
   1182c:	movw	r2, #23888	; 0x5d50
   11830:	movt	r2, #1
   11834:	mov	r0, #1
   11838:	bl	10e04 <__printf_chk@plt>
   1183c:	mov	r1, r4
   11840:	mov	r0, #5
   11844:	bl	10e58 <setlocale@plt>
   11848:	cmp	r0, #0
   1184c:	beq	11868 <__assert_fail@plt+0x9a4>
   11850:	movw	r1, #23904	; 0x5d60
   11854:	movt	r1, #1
   11858:	mov	r2, #3
   1185c:	bl	10ea0 <strncmp@plt>
   11860:	cmp	r0, #0
   11864:	bne	118c4 <__assert_fail@plt+0xa00>
   11868:	mov	r2, #5
   1186c:	movw	r1, #23980	; 0x5dac
   11870:	movt	r1, #1
   11874:	mov	r0, #0
   11878:	bl	10d08 <dcgettext@plt>
   1187c:	mov	r1, r0
   11880:	movw	r3, #23208	; 0x5aa8
   11884:	movt	r3, #1
   11888:	movw	r2, #23848	; 0x5d28
   1188c:	movt	r2, #1
   11890:	mov	r0, #1
   11894:	bl	10e04 <__printf_chk@plt>
   11898:	movw	r1, #24008	; 0x5dc8
   1189c:	movt	r1, #1
   118a0:	mov	r2, #5
   118a4:	mov	r0, #0
   118a8:	bl	10d08 <dcgettext@plt>
   118ac:	movw	r4, #23208	; 0x5aa8
   118b0:	movt	r4, #1
   118b4:	movw	r3, #24188	; 0x5e7c
   118b8:	movt	r3, #1
   118bc:	mov	r1, r0
   118c0:	b	117e8 <__assert_fail@plt+0x924>
   118c4:	movw	r5, #23208	; 0x5aa8
   118c8:	movt	r5, #1
   118cc:	mov	r4, r5
   118d0:	mov	r2, #5
   118d4:	movw	r1, #23908	; 0x5d64
   118d8:	movt	r1, #1
   118dc:	mov	r0, #0
   118e0:	bl	10d08 <dcgettext@plt>
   118e4:	ldr	r1, [r7]
   118e8:	bl	10c78 <fputs_unlocked@plt>
   118ec:	b	11788 <__assert_fail@plt+0x8c4>
   118f0:	str	r4, [sp, #-16]!
   118f4:	movw	r4, #29024	; 0x7160
   118f8:	movt	r4, #2
   118fc:	ldrd	r2, [r4]
   11900:	strd	r6, [sp, #4]
   11904:	mov	r6, r0
   11908:	mov	r7, r1
   1190c:	str	lr, [sp, #12]
   11910:	orrs	r3, r2, r3
   11914:	moveq	r0, #1
   11918:	bne	11930 <__assert_fail@plt+0xa6c>
   1191c:	strd	r6, [r4]
   11920:	ldr	r4, [sp]
   11924:	ldrd	r6, [sp, #4]
   11928:	add	sp, sp, #12
   1192c:	pop	{pc}		; (ldr pc, [sp], #4)
   11930:	mov	r2, #5
   11934:	movw	r1, #24340	; 0x5f14
   11938:	movt	r1, #1
   1193c:	mov	r0, #0
   11940:	bl	10d08 <dcgettext@plt>
   11944:	mov	r1, #0
   11948:	mov	r2, r0
   1194c:	mov	r0, r1
   11950:	bl	10d74 <error@plt>
   11954:	mov	r0, #0
   11958:	b	1191c <__assert_fail@plt+0xa58>
   1195c:	str	r4, [sp, #-16]!
   11960:	movw	r4, #29024	; 0x7160
   11964:	movt	r4, #2
   11968:	ldrd	r2, [r4, #8]
   1196c:	strd	r6, [sp, #4]
   11970:	mov	r6, r0
   11974:	mov	r7, r1
   11978:	str	lr, [sp, #12]
   1197c:	orrs	r3, r2, r3
   11980:	moveq	r0, #1
   11984:	bne	1199c <__assert_fail@plt+0xad8>
   11988:	strd	r6, [r4, #8]
   1198c:	ldr	r4, [sp]
   11990:	ldrd	r6, [sp, #4]
   11994:	add	sp, sp, #12
   11998:	pop	{pc}		; (ldr pc, [sp], #4)
   1199c:	mov	r2, #5
   119a0:	movw	r1, #24388	; 0x5f44
   119a4:	movt	r1, #1
   119a8:	mov	r0, #0
   119ac:	bl	10d08 <dcgettext@plt>
   119b0:	mov	r1, #0
   119b4:	mov	r2, r0
   119b8:	mov	r0, r1
   119bc:	bl	10d74 <error@plt>
   119c0:	mov	r0, #0
   119c4:	b	11988 <__assert_fail@plt+0xac4>
   119c8:	str	r4, [sp, #-32]!	; 0xffffffe0
   119cc:	movw	r4, #29024	; 0x7160
   119d0:	movt	r4, #2
   119d4:	ldr	r3, [r4, #16]
   119d8:	strd	r6, [sp, #4]
   119dc:	mov	r6, r0
   119e0:	mov	r7, r1
   119e4:	strd	r8, [sp, #12]
   119e8:	strd	sl, [sp, #20]
   119ec:	str	lr, [sp, #28]
   119f0:	cmp	r3, #0
   119f4:	ldrd	r0, [r4, #20]
   119f8:	beq	11a44 <__assert_fail@plt+0xb80>
   119fc:	sub	r2, r3, #-536870911	; 0xe0000001
   11a00:	lsl	r2, r2, #3
   11a04:	ldrd	sl, [r0, r2]
   11a08:	cmp	fp, r7
   11a0c:	cmpeq	sl, r6
   11a10:	bls	11ad4 <__assert_fail@plt+0xc10>
   11a14:	cmp	r3, r1
   11a18:	beq	11ab4 <__assert_fail@plt+0xbf0>
   11a1c:	add	r3, r3, #1
   11a20:	add	r2, r0, r2
   11a24:	strd	r6, [r2, #8]
   11a28:	str	r3, [r4, #16]
   11a2c:	ldr	r4, [sp]
   11a30:	ldrd	r6, [sp, #4]
   11a34:	ldrd	r8, [sp, #12]
   11a38:	ldrd	sl, [sp, #20]
   11a3c:	add	sp, sp, #28
   11a40:	pop	{pc}		; (ldr pc, [sp], #4)
   11a44:	mov	r8, r6
   11a48:	mov	r9, r7
   11a4c:	cmp	r3, r1
   11a50:	beq	11abc <__assert_fail@plt+0xbf8>
   11a54:	ldr	r2, [r4, #28]
   11a58:	lsl	r1, r3, #3
   11a5c:	add	r3, r3, #1
   11a60:	str	r3, [r4, #16]
   11a64:	mov	r3, #0
   11a68:	cmp	r3, r9
   11a6c:	strd	r6, [r0, r1]
   11a70:	cmpeq	r2, r8
   11a74:	bcs	11a2c <__assert_fail@plt+0xb68>
   11a78:	mov	r3, #0
   11a7c:	mvn	r2, #0
   11a80:	cmp	r9, r3
   11a84:	cmpeq	r8, r2
   11a88:	strls	r8, [r4, #28]
   11a8c:	bls	11a2c <__assert_fail@plt+0xb68>
   11a90:	mov	r2, #5
   11a94:	movw	r1, #24436	; 0x5f74
   11a98:	movt	r1, #1
   11a9c:	mov	r0, #0
   11aa0:	bl	10d08 <dcgettext@plt>
   11aa4:	mov	r2, r0
   11aa8:	mov	r1, #0
   11aac:	mov	r0, #1
   11ab0:	bl	10d74 <error@plt>
   11ab4:	mov	r8, #0
   11ab8:	mov	r9, #0
   11abc:	mov	r2, #8
   11ac0:	ldr	r1, [pc, #24]	; 11ae0 <__assert_fail@plt+0xc1c>
   11ac4:	bl	15140 <__assert_fail@plt+0x427c>
   11ac8:	str	r0, [r4, #20]
   11acc:	ldr	r3, [r4, #16]
   11ad0:	b	11a54 <__assert_fail@plt+0xb90>
   11ad4:	subs	r8, r6, sl
   11ad8:	sbc	r9, r7, fp
   11adc:	b	11a4c <__assert_fail@plt+0xb88>
   11ae0:	andeq	r7, r2, r8, ror r1
   11ae4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11ae8:	strd	r6, [sp, #8]
   11aec:	strd	r8, [sp, #16]
   11af0:	strd	sl, [sp, #24]
   11af4:	str	lr, [sp, #32]
   11af8:	sub	sp, sp, #20
   11afc:	ldrb	fp, [r0]
   11b00:	cmp	fp, #0
   11b04:	beq	11c00 <__assert_fail@plt+0xd3c>
   11b08:	mov	r2, #0
   11b0c:	mov	r3, #0
   11b10:	mov	r9, #0
   11b14:	mov	r4, r0
   11b18:	mov	r8, r9
   11b1c:	mov	r7, r9
   11b20:	strd	r2, [sp]
   11b24:	mov	r6, r9
   11b28:	mov	sl, #1
   11b2c:	b	11b90 <__assert_fail@plt+0xccc>
   11b30:	bl	10dbc <__ctype_b_loc@plt>
   11b34:	ldr	r2, [r0]
   11b38:	lsl	r3, fp, #1
   11b3c:	ldrh	r5, [r2, r3]
   11b40:	ands	r5, r5, #1
   11b44:	bne	11b98 <__assert_fail@plt+0xcd4>
   11b48:	cmp	fp, #47	; 0x2f
   11b4c:	beq	11c1c <__assert_fail@plt+0xd58>
   11b50:	cmp	fp, #43	; 0x2b
   11b54:	beq	11c90 <__assert_fail@plt+0xdcc>
   11b58:	sub	fp, fp, #48	; 0x30
   11b5c:	cmp	fp, #9
   11b60:	bhi	11dec <__assert_fail@plt+0xf28>
   11b64:	cmp	r6, #0
   11b68:	bne	11ce4 <__assert_fail@plt+0xe20>
   11b6c:	asr	r3, fp, #31
   11b70:	mov	r2, fp
   11b74:	mov	r9, r4
   11b78:	mov	r6, #1
   11b7c:	strd	r2, [sp]
   11b80:	ldrb	fp, [r4, #1]
   11b84:	add	r4, r4, #1
   11b88:	cmp	fp, #0
   11b8c:	beq	11bd4 <__assert_fail@plt+0xd10>
   11b90:	cmp	fp, #44	; 0x2c
   11b94:	bne	11b30 <__assert_fail@plt+0xc6c>
   11b98:	cmp	r6, #0
   11b9c:	beq	11b80 <__assert_fail@plt+0xcbc>
   11ba0:	cmp	r7, #0
   11ba4:	ldrd	r0, [sp]
   11ba8:	bne	11c80 <__assert_fail@plt+0xdbc>
   11bac:	cmp	r8, #0
   11bb0:	beq	11c70 <__assert_fail@plt+0xdac>
   11bb4:	bl	1195c <__assert_fail@plt+0xa98>
   11bb8:	subs	r8, r0, #0
   11bbc:	beq	11e20 <__assert_fail@plt+0xf5c>
   11bc0:	ldrb	fp, [r4, #1]
   11bc4:	mov	r6, #0
   11bc8:	add	r4, r4, #1
   11bcc:	cmp	fp, #0
   11bd0:	bne	11b90 <__assert_fail@plt+0xccc>
   11bd4:	tst	r6, sl
   11bd8:	beq	11bf8 <__assert_fail@plt+0xd34>
   11bdc:	cmp	r7, #0
   11be0:	ldrd	r0, [sp]
   11be4:	bne	11dd8 <__assert_fail@plt+0xf14>
   11be8:	cmp	r8, #0
   11bec:	beq	11db8 <__assert_fail@plt+0xef4>
   11bf0:	bl	1195c <__assert_fail@plt+0xa98>
   11bf4:	mov	sl, r0
   11bf8:	cmp	sl, #0
   11bfc:	beq	11e20 <__assert_fail@plt+0xf5c>
   11c00:	add	sp, sp, #20
   11c04:	ldrd	r4, [sp]
   11c08:	ldrd	r6, [sp, #8]
   11c0c:	ldrd	r8, [sp, #16]
   11c10:	ldrd	sl, [sp, #24]
   11c14:	add	sp, sp, #32
   11c18:	pop	{pc}		; (ldr pc, [sp], #4)
   11c1c:	cmp	r6, #0
   11c20:	moveq	r8, r6
   11c24:	moveq	r7, #1
   11c28:	beq	11b80 <__assert_fail@plt+0xcbc>
   11c2c:	mov	r2, #5
   11c30:	movw	r1, #24460	; 0x5f8c
   11c34:	movt	r1, #1
   11c38:	mov	r0, r5
   11c3c:	bl	10d08 <dcgettext@plt>
   11c40:	mov	r7, r0
   11c44:	mov	r0, r4
   11c48:	bl	14a0c <__assert_fail@plt+0x3b48>
   11c4c:	mov	r3, r0
   11c50:	mov	r2, r7
   11c54:	mov	r1, r5
   11c58:	mov	r0, r5
   11c5c:	mov	sl, r5
   11c60:	mov	r7, r6
   11c64:	bl	10d74 <error@plt>
   11c68:	mov	r8, r5
   11c6c:	b	11b80 <__assert_fail@plt+0xcbc>
   11c70:	mov	r7, r8
   11c74:	mov	r6, r8
   11c78:	bl	119c8 <__assert_fail@plt+0xb04>
   11c7c:	b	11b80 <__assert_fail@plt+0xcbc>
   11c80:	bl	118f0 <__assert_fail@plt+0xa2c>
   11c84:	subs	r7, r0, #0
   11c88:	bne	11bc0 <__assert_fail@plt+0xcfc>
   11c8c:	b	11e20 <__assert_fail@plt+0xf5c>
   11c90:	cmp	r6, #0
   11c94:	moveq	r7, r6
   11c98:	moveq	r8, #1
   11c9c:	beq	11b80 <__assert_fail@plt+0xcbc>
   11ca0:	mov	r2, #5
   11ca4:	movw	r1, #24504	; 0x5fb8
   11ca8:	movt	r1, #1
   11cac:	mov	r0, r5
   11cb0:	bl	10d08 <dcgettext@plt>
   11cb4:	mov	r7, r0
   11cb8:	mov	r0, r4
   11cbc:	bl	14a0c <__assert_fail@plt+0x3b48>
   11cc0:	mov	r3, r0
   11cc4:	mov	r2, r7
   11cc8:	mov	r1, r5
   11ccc:	mov	r0, r5
   11cd0:	mov	sl, r5
   11cd4:	mov	r8, r6
   11cd8:	bl	10d74 <error@plt>
   11cdc:	mov	r7, r5
   11ce0:	b	11b80 <__assert_fail@plt+0xcbc>
   11ce4:	add	r1, pc, #316	; 0x13c
   11ce8:	ldrd	r0, [r1]
   11cec:	ldrd	r2, [sp]
   11cf0:	cmp	r3, r1
   11cf4:	cmpeq	r2, r0
   11cf8:	bls	11d6c <__assert_fail@plt+0xea8>
   11cfc:	movw	r1, #24548	; 0x5fe4
   11d00:	movt	r1, #1
   11d04:	mov	r0, r9
   11d08:	mov	sl, #0
   11d0c:	bl	10eb8 <strspn@plt>
   11d10:	mov	r1, r0
   11d14:	mov	r4, r0
   11d18:	mov	r0, r9
   11d1c:	sub	r4, r4, #1
   11d20:	bl	153b8 <__assert_fail@plt+0x44f4>
   11d24:	mov	r5, r0
   11d28:	mov	r2, #5
   11d2c:	movw	r1, #24560	; 0x5ff0
   11d30:	movt	r1, #1
   11d34:	mov	r0, sl
   11d38:	add	r4, r9, r4
   11d3c:	bl	10d08 <dcgettext@plt>
   11d40:	mov	fp, r0
   11d44:	mov	r0, r5
   11d48:	bl	14a0c <__assert_fail@plt+0x3b48>
   11d4c:	mov	r3, r0
   11d50:	mov	r2, fp
   11d54:	mov	r1, sl
   11d58:	mov	r0, sl
   11d5c:	bl	10d74 <error@plt>
   11d60:	mov	r0, r5
   11d64:	bl	125ec <__assert_fail@plt+0x1728>
   11d68:	b	11b80 <__assert_fail@plt+0xcbc>
   11d6c:	mov	r0, r2
   11d70:	lsl	r2, r3, #2
   11d74:	mov	r1, r3
   11d78:	lsl	r3, r0, #2
   11d7c:	orr	r2, r2, r0, lsr #30
   11d80:	adds	r3, r3, r0
   11d84:	adc	r2, r2, r1
   11d88:	adds	r3, r3, r3
   11d8c:	str	r3, [sp, #8]
   11d90:	adc	r3, r2, r2
   11d94:	str	r3, [sp, #12]
   11d98:	ldrd	r2, [sp, #8]
   11d9c:	adds	r2, r2, fp
   11da0:	adc	r3, r3, fp, asr #31
   11da4:	cmp	r3, r1
   11da8:	cmpeq	r2, r0
   11dac:	bcc	11cfc <__assert_fail@plt+0xe38>
   11db0:	strd	r2, [sp]
   11db4:	b	11b80 <__assert_fail@plt+0xcbc>
   11db8:	add	sp, sp, #20
   11dbc:	ldrd	r4, [sp]
   11dc0:	ldrd	r6, [sp, #8]
   11dc4:	ldrd	r8, [sp, #16]
   11dc8:	ldrd	sl, [sp, #24]
   11dcc:	ldr	lr, [sp, #32]
   11dd0:	add	sp, sp, #36	; 0x24
   11dd4:	b	119c8 <__assert_fail@plt+0xb04>
   11dd8:	bl	118f0 <__assert_fail@plt+0xa2c>
   11ddc:	mov	sl, r0
   11de0:	cmp	sl, #0
   11de4:	bne	11c00 <__assert_fail@plt+0xd3c>
   11de8:	b	11e20 <__assert_fail@plt+0xf5c>
   11dec:	mov	r2, #5
   11df0:	movw	r1, #24588	; 0x600c
   11df4:	movt	r1, #1
   11df8:	mov	r0, r5
   11dfc:	bl	10d08 <dcgettext@plt>
   11e00:	mov	r6, r0
   11e04:	mov	r0, r4
   11e08:	bl	14a0c <__assert_fail@plt+0x3b48>
   11e0c:	mov	r3, r0
   11e10:	mov	r2, r6
   11e14:	mov	r1, r5
   11e18:	mov	r0, r5
   11e1c:	bl	10d74 <error@plt>
   11e20:	mov	r0, #1
   11e24:	bl	10dc8 <exit@plt>
   11e28:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11e2c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11e30:	movw	r3, #29024	; 0x7160
   11e34:	movt	r3, #2
   11e38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11e3c:	ldr	ip, [r3, #16]
   11e40:	ldr	r2, [r3, #20]
   11e44:	strd	r6, [sp, #8]
   11e48:	str	r8, [sp, #16]
   11e4c:	cmp	ip, #0
   11e50:	str	lr, [sp, #20]
   11e54:	beq	11f34 <__assert_fail@plt+0x1070>
   11e58:	ldrd	r4, [r2]
   11e5c:	orrs	r1, r4, r5
   11e60:	mov	r0, r4
   11e64:	mov	r1, r5
   11e68:	movne	lr, #0
   11e6c:	bne	11e94 <__assert_fail@plt+0xfd0>
   11e70:	b	11f74 <__assert_fail@plt+0x10b0>
   11e74:	ldrd	r6, [r2, #8]!
   11e78:	orrs	r8, r6, r7
   11e7c:	beq	11f74 <__assert_fail@plt+0x10b0>
   11e80:	cmp	r1, r7
   11e84:	cmpeq	r0, r6
   11e88:	bcs	11f68 <__assert_fail@plt+0x10a4>
   11e8c:	mov	r0, r6
   11e90:	mov	r1, r7
   11e94:	add	lr, lr, #1
   11e98:	cmp	ip, lr
   11e9c:	bne	11e74 <__assert_fail@plt+0xfb0>
   11ea0:	ldrd	r6, [r3, #8]
   11ea4:	orrs	r2, r6, r7
   11ea8:	beq	11eb8 <__assert_fail@plt+0xff4>
   11eac:	ldrd	r0, [r3]
   11eb0:	orrs	r2, r0, r1
   11eb4:	bne	11f10 <__assert_fail@plt+0x104c>
   11eb8:	cmp	ip, #1
   11ebc:	beq	11ee0 <__assert_fail@plt+0x101c>
   11ec0:	mov	r0, #0
   11ec4:	mov	r1, #0
   11ec8:	strd	r0, [r3, #32]
   11ecc:	ldrd	r4, [sp]
   11ed0:	ldrd	r6, [sp, #8]
   11ed4:	ldr	r8, [sp, #16]
   11ed8:	add	sp, sp, #20
   11edc:	pop	{pc}		; (ldr pc, [sp], #4)
   11ee0:	ldr	ip, [r3]
   11ee4:	ldr	r2, [r3, #4]
   11ee8:	orr	r0, r6, ip
   11eec:	orr	r1, r7, r2
   11ef0:	orrs	r2, r0, r1
   11ef4:	strdeq	r4, [r3, #32]
   11ef8:	bne	11ec0 <__assert_fail@plt+0xffc>
   11efc:	b	11ecc <__assert_fail@plt+0x1008>
   11f00:	orrs	r2, r0, r1
   11f04:	moveq	r2, r4
   11f08:	moveq	r0, r4
   11f0c:	beq	11f50 <__assert_fail@plt+0x108c>
   11f10:	movw	r1, #24684	; 0x606c
   11f14:	movt	r1, #1
   11f18:	mov	r2, #5
   11f1c:	mov	r0, #0
   11f20:	bl	10d08 <dcgettext@plt>
   11f24:	mov	r2, r0
   11f28:	mov	r1, #0
   11f2c:	mov	r0, #1
   11f30:	bl	10d74 <error@plt>
   11f34:	ldrd	r0, [r3]
   11f38:	ldrd	r4, [r3, #8]
   11f3c:	orrs	r2, r4, r5
   11f40:	bne	11f00 <__assert_fail@plt+0x103c>
   11f44:	orrs	r2, r0, r1
   11f48:	beq	11f60 <__assert_fail@plt+0x109c>
   11f4c:	mov	r2, r0
   11f50:	str	r2, [r3, #28]
   11f54:	str	r0, [r3, #32]
   11f58:	str	ip, [r3, #36]	; 0x24
   11f5c:	b	11ecc <__assert_fail@plt+0x1008>
   11f60:	mov	r0, #8
   11f64:	b	11f4c <__assert_fail@plt+0x1088>
   11f68:	movw	r1, #24656	; 0x6050
   11f6c:	movt	r1, #1
   11f70:	b	11f18 <__assert_fail@plt+0x1054>
   11f74:	movw	r1, #24632	; 0x6038
   11f78:	movt	r1, #1
   11f7c:	b	11f18 <__assert_fail@plt+0x1054>
   11f80:	movw	ip, #29024	; 0x7160
   11f84:	movt	ip, #2
   11f88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11f8c:	strd	r6, [sp, #8]
   11f90:	strd	r8, [sp, #16]
   11f94:	ldrd	r8, [ip, #32]
   11f98:	str	lr, [sp, #32]
   11f9c:	mov	lr, #0
   11fa0:	strd	sl, [sp, #24]
   11fa4:	sub	sp, sp, #4
   11fa8:	mov	sl, r0
   11fac:	strb	lr, [r3]
   11fb0:	mov	fp, r1
   11fb4:	orrs	lr, r8, r9
   11fb8:	bne	12058 <__assert_fail@plt+0x1194>
   11fbc:	ldr	r1, [r2]
   11fc0:	ldr	lr, [ip, #16]
   11fc4:	cmp	lr, r1
   11fc8:	bls	12014 <__assert_fail@plt+0x1150>
   11fcc:	ldr	r0, [ip, #20]
   11fd0:	lsl	r8, r1, #3
   11fd4:	ldrd	r4, [r0, r8]
   11fd8:	add	r0, r0, r8
   11fdc:	cmp	fp, r5
   11fe0:	cmpeq	sl, r4
   11fe4:	addcs	r1, r1, #1
   11fe8:	bcs	12004 <__assert_fail@plt+0x1140>
   11fec:	b	12034 <__assert_fail@plt+0x1170>
   11ff0:	ldrd	r4, [r0, #8]!
   11ff4:	cmp	fp, r5
   11ff8:	cmpeq	sl, r4
   11ffc:	bcc	12078 <__assert_fail@plt+0x11b4>
   12000:	mov	r1, r8
   12004:	cmp	lr, r1
   12008:	add	r8, r1, #1
   1200c:	bne	11ff0 <__assert_fail@plt+0x112c>
   12010:	str	lr, [r2]
   12014:	ldrd	r0, [ip]
   12018:	orrs	r2, r0, r1
   1201c:	bne	120b4 <__assert_fail@plt+0x11f0>
   12020:	ldrd	r4, [ip, #8]
   12024:	orrs	r2, r4, r5
   12028:	moveq	r2, #1
   1202c:	strbeq	r2, [r3]
   12030:	bne	12080 <__assert_fail@plt+0x11bc>
   12034:	mov	r0, r4
   12038:	mov	r1, r5
   1203c:	add	sp, sp, #4
   12040:	ldrd	r4, [sp]
   12044:	ldrd	r6, [sp, #8]
   12048:	ldrd	r8, [sp, #16]
   1204c:	ldrd	sl, [sp, #24]
   12050:	add	sp, sp, #32
   12054:	pop	{pc}		; (ldr pc, [sp], #4)
   12058:	adds	r6, r8, r0
   1205c:	mov	r2, r8
   12060:	mov	r3, r9
   12064:	adc	r7, r9, r1
   12068:	bl	15814 <__assert_fail@plt+0x4950>
   1206c:	subs	r4, r6, r2
   12070:	sbc	r5, r7, r3
   12074:	b	12034 <__assert_fail@plt+0x1170>
   12078:	str	r1, [r2]
   1207c:	b	12034 <__assert_fail@plt+0x1170>
   12080:	ldr	r1, [ip, #20]
   12084:	adds	r8, r4, sl
   12088:	mov	r2, r4
   1208c:	adc	r9, r5, fp
   12090:	mov	r3, r5
   12094:	add	lr, r1, lr, lsl #3
   12098:	ldrd	r0, [lr, #-8]
   1209c:	subs	r0, sl, r0
   120a0:	sbc	r1, fp, r1
   120a4:	bl	15814 <__assert_fail@plt+0x4950>
   120a8:	subs	r4, r8, r2
   120ac:	sbc	r5, r9, r3
   120b0:	b	12034 <__assert_fail@plt+0x1170>
   120b4:	adds	r8, r0, sl
   120b8:	mov	r2, r0
   120bc:	adc	r9, r1, fp
   120c0:	mov	r3, r1
   120c4:	mov	r0, sl
   120c8:	mov	r1, fp
   120cc:	bl	15814 <__assert_fail@plt+0x4950>
   120d0:	subs	r4, r8, r2
   120d4:	sbc	r5, r9, r3
   120d8:	b	12034 <__assert_fail@plt+0x1170>
   120dc:	movw	r3, #28900	; 0x70e4
   120e0:	movt	r3, #2
   120e4:	cmp	r0, #0
   120e8:	mov	r2, #0
   120ec:	moveq	r0, r3
   120f0:	movw	r3, #29024	; 0x7160
   120f4:	movt	r3, #2
   120f8:	strb	r2, [r3, #40]	; 0x28
   120fc:	str	r0, [r3, #44]	; 0x2c
   12100:	bx	lr
   12104:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12108:	movw	r5, #29024	; 0x7160
   1210c:	movt	r5, #2
   12110:	strd	r6, [sp, #8]
   12114:	subs	r6, r0, #0
   12118:	strd	r8, [sp, #16]
   1211c:	str	sl, [sp, #24]
   12120:	str	lr, [sp, #28]
   12124:	beq	121ac <__assert_fail@plt+0x12e8>
   12128:	ldr	r4, [r5, #48]	; 0x30
   1212c:	cmp	r4, #0
   12130:	beq	122ac <__assert_fail@plt+0x13e8>
   12134:	bl	10de0 <__errno_location@plt>
   12138:	ldr	r3, [r6]
   1213c:	mov	r7, r0
   12140:	movw	r1, #24764	; 0x60bc
   12144:	movt	r1, #1
   12148:	mov	r0, r4
   1214c:	ldr	r4, [r7]
   12150:	tst	r3, #32
   12154:	moveq	r4, #0
   12158:	bl	10c90 <strcmp@plt>
   1215c:	cmp	r0, #0
   12160:	mov	r0, r6
   12164:	beq	122a4 <__assert_fail@plt+0x13e0>
   12168:	bl	124d8 <__assert_fail@plt+0x1614>
   1216c:	cmp	r0, #0
   12170:	ldrne	r4, [r7]
   12174:	cmp	r4, #0
   12178:	beq	121ac <__assert_fail@plt+0x12e8>
   1217c:	mov	r1, #3
   12180:	mov	r0, #0
   12184:	ldr	r2, [r5, #48]	; 0x30
   12188:	bl	14834 <__assert_fail@plt+0x3970>
   1218c:	mov	r3, r0
   12190:	mov	r1, r4
   12194:	movw	r2, #24628	; 0x6034
   12198:	movt	r2, #1
   1219c:	mov	r0, #0
   121a0:	bl	10d74 <error@plt>
   121a4:	mov	r3, #1
   121a8:	str	r3, [r5, #52]	; 0x34
   121ac:	ldr	r3, [r5, #44]	; 0x2c
   121b0:	ldr	r4, [r3]
   121b4:	add	r3, r3, #4
   121b8:	str	r3, [r5, #44]	; 0x2c
   121bc:	cmp	r4, #0
   121c0:	beq	12284 <__assert_fail@plt+0x13c0>
   121c4:	movw	r7, #24764	; 0x60bc
   121c8:	movt	r7, #1
   121cc:	movw	r9, #24768	; 0x60c0
   121d0:	movt	r9, #1
   121d4:	movw	r8, #29008	; 0x7150
   121d8:	movt	r8, #2
   121dc:	b	12244 <__assert_fail@plt+0x1380>
   121e0:	ldr	r6, [r8]
   121e4:	mov	r3, #1
   121e8:	strb	r3, [r5, #40]	; 0x28
   121ec:	cmp	r6, #0
   121f0:	bne	12270 <__assert_fail@plt+0x13ac>
   121f4:	bl	10de0 <__errno_location@plt>
   121f8:	ldr	sl, [r0]
   121fc:	mov	r2, r4
   12200:	mov	r1, #3
   12204:	mov	r0, r6
   12208:	bl	14834 <__assert_fail@plt+0x3970>
   1220c:	mov	r3, r0
   12210:	movw	r2, #24628	; 0x6034
   12214:	movt	r2, #1
   12218:	mov	r0, r6
   1221c:	mov	r1, sl
   12220:	bl	10d74 <error@plt>
   12224:	ldr	r3, [r5, #44]	; 0x2c
   12228:	mov	r2, #1
   1222c:	ldr	r4, [r3]
   12230:	add	r3, r3, #4
   12234:	str	r3, [r5, #44]	; 0x2c
   12238:	str	r2, [r5, #52]	; 0x34
   1223c:	cmp	r4, #0
   12240:	beq	12284 <__assert_fail@plt+0x13c0>
   12244:	mov	r1, r7
   12248:	mov	r0, r4
   1224c:	bl	10c90 <strcmp@plt>
   12250:	cmp	r0, #0
   12254:	beq	121e0 <__assert_fail@plt+0x131c>
   12258:	mov	r1, r9
   1225c:	mov	r0, r4
   12260:	bl	10e88 <fopen64@plt>
   12264:	mov	r6, r0
   12268:	cmp	r6, #0
   1226c:	beq	121f4 <__assert_fail@plt+0x1330>
   12270:	mov	r1, #2
   12274:	mov	r0, r6
   12278:	str	r4, [r5, #48]	; 0x30
   1227c:	bl	12488 <__assert_fail@plt+0x15c4>
   12280:	b	12288 <__assert_fail@plt+0x13c4>
   12284:	mov	r6, #0
   12288:	mov	r0, r6
   1228c:	ldrd	r4, [sp]
   12290:	ldrd	r6, [sp, #8]
   12294:	ldrd	r8, [sp, #16]
   12298:	ldr	sl, [sp, #24]
   1229c:	add	sp, sp, #28
   122a0:	pop	{pc}		; (ldr pc, [sp], #4)
   122a4:	bl	10e7c <clearerr_unlocked@plt>
   122a8:	b	12174 <__assert_fail@plt+0x12b0>
   122ac:	movw	r3, #24328	; 0x5f08
   122b0:	movt	r3, #1
   122b4:	movw	r1, #24732	; 0x609c
   122b8:	movt	r1, #1
   122bc:	movw	r0, #24752	; 0x60b0
   122c0:	movt	r0, #1
   122c4:	mov	r2, #340	; 0x154
   122c8:	bl	10ec4 <__assert_fail@plt>
   122cc:	movw	r3, #29024	; 0x7160
   122d0:	movt	r3, #2
   122d4:	ldrb	r3, [r3, #40]	; 0x28
   122d8:	cmp	r3, #0
   122dc:	bxeq	lr
   122e0:	movw	r3, #29008	; 0x7150
   122e4:	movt	r3, #2
   122e8:	str	r4, [sp, #-8]!
   122ec:	ldr	r0, [r3]
   122f0:	str	lr, [sp, #4]
   122f4:	bl	124d8 <__assert_fail@plt+0x1614>
   122f8:	cmp	r0, #0
   122fc:	bne	1230c <__assert_fail@plt+0x1448>
   12300:	ldr	r4, [sp]
   12304:	add	sp, sp, #4
   12308:	pop	{pc}		; (ldr pc, [sp], #4)
   1230c:	bl	10de0 <__errno_location@plt>
   12310:	movw	r2, #24764	; 0x60bc
   12314:	movt	r2, #1
   12318:	ldr	r1, [r0]
   1231c:	mov	r0, #1
   12320:	bl	10d74 <error@plt>
   12324:	mov	r2, #5
   12328:	movw	r1, #24772	; 0x60c4
   1232c:	movt	r1, #1
   12330:	mov	r0, #0
   12334:	str	r4, [sp, #-8]!
   12338:	movw	r4, #29012	; 0x7154
   1233c:	movt	r4, #2
   12340:	str	lr, [sp, #4]
   12344:	bl	10d08 <dcgettext@plt>
   12348:	ldr	r1, [r4]
   1234c:	bl	10c78 <fputs_unlocked@plt>
   12350:	movw	r1, #24836	; 0x6104
   12354:	movt	r1, #1
   12358:	mov	r2, #5
   1235c:	mov	r0, #0
   12360:	bl	10d08 <dcgettext@plt>
   12364:	ldr	r1, [r4]
   12368:	ldr	r4, [sp]
   1236c:	ldr	lr, [sp, #4]
   12370:	add	sp, sp, #8
   12374:	b	10c78 <fputs_unlocked@plt>
   12378:	movw	r3, #29084	; 0x719c
   1237c:	movt	r3, #2
   12380:	str	r0, [r3]
   12384:	bx	lr
   12388:	movw	r3, #29084	; 0x719c
   1238c:	movt	r3, #2
   12390:	strb	r0, [r3, #4]
   12394:	bx	lr
   12398:	movw	r3, #29012	; 0x7154
   1239c:	movt	r3, #2
   123a0:	strd	r4, [sp, #-16]!
   123a4:	ldr	r0, [r3]
   123a8:	str	r6, [sp, #8]
   123ac:	str	lr, [sp, #12]
   123b0:	sub	sp, sp, #8
   123b4:	bl	1557c <__assert_fail@plt+0x46b8>
   123b8:	cmp	r0, #0
   123bc:	beq	123e8 <__assert_fail@plt+0x1524>
   123c0:	movw	r4, #29084	; 0x719c
   123c4:	movt	r4, #2
   123c8:	ldrb	r6, [r4, #4]
   123cc:	bl	10de0 <__errno_location@plt>
   123d0:	mov	r5, r0
   123d4:	cmp	r6, #0
   123d8:	beq	12414 <__assert_fail@plt+0x1550>
   123dc:	ldr	r3, [r0]
   123e0:	cmp	r3, #32
   123e4:	bne	12414 <__assert_fail@plt+0x1550>
   123e8:	movw	r3, #29000	; 0x7148
   123ec:	movt	r3, #2
   123f0:	ldr	r0, [r3]
   123f4:	bl	1557c <__assert_fail@plt+0x46b8>
   123f8:	cmp	r0, #0
   123fc:	bne	1245c <__assert_fail@plt+0x1598>
   12400:	add	sp, sp, #8
   12404:	ldrd	r4, [sp]
   12408:	ldr	r6, [sp, #8]
   1240c:	add	sp, sp, #12
   12410:	pop	{pc}		; (ldr pc, [sp], #4)
   12414:	movw	r1, #24168	; 0x5e68
   12418:	movt	r1, #1
   1241c:	mov	r2, #5
   12420:	mov	r0, #0
   12424:	bl	10d08 <dcgettext@plt>
   12428:	mov	r6, r0
   1242c:	ldr	r0, [r4]
   12430:	cmp	r0, #0
   12434:	beq	1246c <__assert_fail@plt+0x15a8>
   12438:	ldr	r4, [r5]
   1243c:	bl	14820 <__assert_fail@plt+0x395c>
   12440:	mov	r3, r0
   12444:	movw	r2, #25220	; 0x6284
   12448:	movt	r2, #1
   1244c:	mov	r0, #0
   12450:	str	r6, [sp]
   12454:	mov	r1, r4
   12458:	bl	10d74 <error@plt>
   1245c:	movw	r3, #28912	; 0x70f0
   12460:	movt	r3, #2
   12464:	ldr	r0, [r3]
   12468:	bl	10cc0 <_exit@plt>
   1246c:	mov	r3, r6
   12470:	movw	r2, #24628	; 0x6034
   12474:	movt	r2, #1
   12478:	ldr	r1, [r5]
   1247c:	bl	10d74 <error@plt>
   12480:	b	1245c <__assert_fail@plt+0x1598>
   12484:	b	10c9c <posix_fadvise64@plt>
   12488:	cmp	r0, #0
   1248c:	bxeq	lr
   12490:	str	r4, [sp, #-16]!
   12494:	mov	r4, r1
   12498:	strd	r6, [sp, #4]
   1249c:	mov	r6, #0
   124a0:	mov	r7, #0
   124a4:	str	lr, [sp, #12]
   124a8:	sub	sp, sp, #16
   124ac:	bl	10e10 <fileno@plt>
   124b0:	mov	r2, r6
   124b4:	mov	r3, r7
   124b8:	strd	r6, [sp]
   124bc:	str	r4, [sp, #8]
   124c0:	bl	10c9c <posix_fadvise64@plt>
   124c4:	add	sp, sp, #16
   124c8:	ldr	r4, [sp]
   124cc:	ldrd	r6, [sp, #4]
   124d0:	add	sp, sp, #12
   124d4:	pop	{pc}		; (ldr pc, [sp], #4)
   124d8:	strd	r4, [sp, #-12]!
   124dc:	mov	r4, r0
   124e0:	str	lr, [sp, #8]
   124e4:	sub	sp, sp, #12
   124e8:	bl	10e10 <fileno@plt>
   124ec:	cmp	r0, #0
   124f0:	mov	r0, r4
   124f4:	blt	12578 <__assert_fail@plt+0x16b4>
   124f8:	bl	10d98 <__freading@plt>
   124fc:	cmp	r0, #0
   12500:	bne	12544 <__assert_fail@plt+0x1680>
   12504:	mov	r0, r4
   12508:	bl	1258c <__assert_fail@plt+0x16c8>
   1250c:	cmp	r0, #0
   12510:	beq	12574 <__assert_fail@plt+0x16b0>
   12514:	bl	10de0 <__errno_location@plt>
   12518:	mov	r5, r0
   1251c:	mov	r0, r4
   12520:	ldr	r4, [r5]
   12524:	bl	10e28 <fclose@plt>
   12528:	cmp	r4, #0
   1252c:	mvnne	r0, #0
   12530:	strne	r4, [r5]
   12534:	add	sp, sp, #12
   12538:	ldrd	r4, [sp]
   1253c:	add	sp, sp, #8
   12540:	pop	{pc}		; (ldr pc, [sp], #4)
   12544:	mov	r0, r4
   12548:	bl	10e10 <fileno@plt>
   1254c:	mov	r1, #1
   12550:	mov	r2, #0
   12554:	mov	r3, #0
   12558:	str	r1, [sp]
   1255c:	bl	10d44 <lseek64@plt>
   12560:	mvn	r3, #0
   12564:	mvn	r2, #0
   12568:	cmp	r1, r3
   1256c:	cmpeq	r0, r2
   12570:	bne	12504 <__assert_fail@plt+0x1640>
   12574:	mov	r0, r4
   12578:	add	sp, sp, #12
   1257c:	ldrd	r4, [sp]
   12580:	ldr	lr, [sp, #8]
   12584:	add	sp, sp, #12
   12588:	b	10e28 <fclose@plt>
   1258c:	str	r4, [sp, #-8]!
   12590:	subs	r4, r0, #0
   12594:	str	lr, [sp, #4]
   12598:	sub	sp, sp, #8
   1259c:	beq	125b8 <__assert_fail@plt+0x16f4>
   125a0:	bl	10d98 <__freading@plt>
   125a4:	cmp	r0, #0
   125a8:	beq	125b8 <__assert_fail@plt+0x16f4>
   125ac:	ldr	r3, [r4]
   125b0:	tst	r3, #256	; 0x100
   125b4:	bne	125d0 <__assert_fail@plt+0x170c>
   125b8:	mov	r0, r4
   125bc:	add	sp, sp, #8
   125c0:	ldr	r4, [sp]
   125c4:	ldr	lr, [sp, #4]
   125c8:	add	sp, sp, #8
   125cc:	b	10ca8 <fflush@plt>
   125d0:	mov	r1, #1
   125d4:	mov	r2, #0
   125d8:	mov	r3, #0
   125dc:	mov	r0, r4
   125e0:	str	r1, [sp]
   125e4:	bl	1264c <__assert_fail@plt+0x1788>
   125e8:	b	125b8 <__assert_fail@plt+0x16f4>
   125ec:	strd	r4, [sp, #-12]!
   125f0:	mov	r5, r0
   125f4:	str	lr, [sp, #8]
   125f8:	sub	sp, sp, #12
   125fc:	bl	10de0 <__errno_location@plt>
   12600:	mov	r4, r0
   12604:	mov	r2, #0
   12608:	ldr	r3, [r4]
   1260c:	mov	r0, r5
   12610:	str	r2, [r4]
   12614:	str	r3, [sp]
   12618:	str	r3, [sp, #4]
   1261c:	bl	10cb4 <free@plt>
   12620:	ldr	r3, [r4]
   12624:	add	r2, sp, #8
   12628:	clz	r3, r3
   1262c:	lsr	r3, r3, #5
   12630:	add	r3, r2, r3, lsl #2
   12634:	ldr	r3, [r3, #-8]
   12638:	str	r3, [r4]
   1263c:	add	sp, sp, #12
   12640:	ldrd	r4, [sp]
   12644:	add	sp, sp, #8
   12648:	pop	{pc}		; (ldr pc, [sp], #4)
   1264c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12650:	mov	r4, r0
   12654:	ldr	ip, [r0, #4]
   12658:	strd	r6, [sp, #8]
   1265c:	str	lr, [sp, #20]
   12660:	ldr	lr, [r0, #8]
   12664:	str	r8, [sp, #16]
   12668:	sub	sp, sp, #8
   1266c:	ldr	r5, [sp, #32]
   12670:	cmp	lr, ip
   12674:	beq	1269c <__assert_fail@plt+0x17d8>
   12678:	mov	r0, r4
   1267c:	str	r5, [sp, #32]
   12680:	add	sp, sp, #8
   12684:	ldrd	r4, [sp]
   12688:	ldrd	r6, [sp, #8]
   1268c:	ldr	r8, [sp, #16]
   12690:	ldr	lr, [sp, #20]
   12694:	add	sp, sp, #24
   12698:	b	10e34 <fseeko64@plt>
   1269c:	ldr	ip, [r0, #16]
   126a0:	ldr	lr, [r0, #20]
   126a4:	cmp	lr, ip
   126a8:	bne	12678 <__assert_fail@plt+0x17b4>
   126ac:	ldr	r8, [r0, #36]	; 0x24
   126b0:	cmp	r8, #0
   126b4:	bne	12678 <__assert_fail@plt+0x17b4>
   126b8:	mov	r6, r2
   126bc:	mov	r7, r3
   126c0:	bl	10e10 <fileno@plt>
   126c4:	mov	r2, r6
   126c8:	mov	r3, r7
   126cc:	str	r5, [sp]
   126d0:	bl	10d44 <lseek64@plt>
   126d4:	mvn	r3, #0
   126d8:	mvn	r2, #0
   126dc:	cmp	r1, r3
   126e0:	cmpeq	r0, r2
   126e4:	beq	12714 <__assert_fail@plt+0x1850>
   126e8:	ldr	r3, [r4]
   126ec:	strd	r0, [r4, #80]	; 0x50
   126f0:	bic	r3, r3, #16
   126f4:	str	r3, [r4]
   126f8:	mov	r0, r8
   126fc:	add	sp, sp, #8
   12700:	ldrd	r4, [sp]
   12704:	ldrd	r6, [sp, #8]
   12708:	ldr	r8, [sp, #16]
   1270c:	add	sp, sp, #20
   12710:	pop	{pc}		; (ldr pc, [sp], #4)
   12714:	mvn	r8, #0
   12718:	b	126f8 <__assert_fail@plt+0x1834>
   1271c:	strd	r4, [sp, #-16]!
   12720:	subs	r4, r0, #0
   12724:	str	r6, [sp, #8]
   12728:	str	lr, [sp, #12]
   1272c:	beq	127c4 <__assert_fail@plt+0x1900>
   12730:	mov	r1, #47	; 0x2f
   12734:	bl	10e64 <strrchr@plt>
   12738:	subs	r5, r0, #0
   1273c:	beq	1279c <__assert_fail@plt+0x18d8>
   12740:	add	r6, r5, #1
   12744:	sub	r3, r6, r4
   12748:	cmp	r3, #6
   1274c:	ble	1279c <__assert_fail@plt+0x18d8>
   12750:	movw	r1, #25284	; 0x62c4
   12754:	movt	r1, #1
   12758:	mov	r2, #7
   1275c:	sub	r0, r5, #6
   12760:	bl	10ea0 <strncmp@plt>
   12764:	cmp	r0, #0
   12768:	bne	1279c <__assert_fail@plt+0x18d8>
   1276c:	movw	r1, #25292	; 0x62cc
   12770:	movt	r1, #1
   12774:	mov	r2, #3
   12778:	mov	r0, r6
   1277c:	bl	10ea0 <strncmp@plt>
   12780:	cmp	r0, #0
   12784:	movne	r4, r6
   12788:	bne	1279c <__assert_fail@plt+0x18d8>
   1278c:	add	r4, r5, #4
   12790:	movw	r3, #28984	; 0x7138
   12794:	movt	r3, #2
   12798:	str	r4, [r3]
   1279c:	movw	r2, #29092	; 0x71a4
   127a0:	movt	r2, #2
   127a4:	ldr	r6, [sp, #8]
   127a8:	movw	r3, #28988	; 0x713c
   127ac:	movt	r3, #2
   127b0:	str	r4, [r2]
   127b4:	str	r4, [r3]
   127b8:	ldrd	r4, [sp]
   127bc:	add	sp, sp, #12
   127c0:	pop	{pc}		; (ldr pc, [sp], #4)
   127c4:	movw	r3, #29000	; 0x7148
   127c8:	movt	r3, #2
   127cc:	movw	r0, #25228	; 0x628c
   127d0:	movt	r0, #1
   127d4:	ldr	r3, [r3]
   127d8:	mov	r2, #55	; 0x37
   127dc:	mov	r1, #1
   127e0:	bl	10d38 <fwrite@plt>
   127e4:	bl	10eac <abort@plt>
   127e8:	strd	r4, [sp, #-16]!
   127ec:	mov	r4, #0
   127f0:	mov	r5, #0
   127f4:	cmp	r1, #10
   127f8:	str	r6, [sp, #8]
   127fc:	strd	r4, [r0]
   12800:	strd	r4, [r0, #8]
   12804:	str	lr, [sp, #12]
   12808:	strd	r4, [r0, #16]
   1280c:	strd	r4, [r0, #24]
   12810:	strd	r4, [r0, #32]
   12814:	strd	r4, [r0, #40]	; 0x28
   12818:	beq	12830 <__assert_fail@plt+0x196c>
   1281c:	ldrd	r4, [sp]
   12820:	str	r1, [r0]
   12824:	ldr	r6, [sp, #8]
   12828:	add	sp, sp, #12
   1282c:	pop	{pc}		; (ldr pc, [sp], #4)
   12830:	bl	10eac <abort@plt>
   12834:	mov	r2, #5
   12838:	strd	r4, [sp, #-16]!
   1283c:	mov	r5, r0
   12840:	str	r6, [sp, #8]
   12844:	mov	r6, r1
   12848:	mov	r1, r0
   1284c:	mov	r0, #0
   12850:	str	lr, [sp, #12]
   12854:	bl	10d08 <dcgettext@plt>
   12858:	cmp	r5, r0
   1285c:	mov	r4, r0
   12860:	beq	12878 <__assert_fail@plt+0x19b4>
   12864:	mov	r0, r4
   12868:	ldrd	r4, [sp]
   1286c:	ldr	r6, [sp, #8]
   12870:	add	sp, sp, #12
   12874:	pop	{pc}		; (ldr pc, [sp], #4)
   12878:	bl	15604 <__assert_fail@plt+0x4740>
   1287c:	ldrb	r3, [r0]
   12880:	bic	r3, r3, #32
   12884:	cmp	r3, #85	; 0x55
   12888:	bne	128f0 <__assert_fail@plt+0x1a2c>
   1288c:	ldrb	r3, [r0, #1]
   12890:	bic	r3, r3, #32
   12894:	cmp	r3, #84	; 0x54
   12898:	bne	12970 <__assert_fail@plt+0x1aac>
   1289c:	ldrb	r3, [r0, #2]
   128a0:	bic	r3, r3, #32
   128a4:	cmp	r3, #70	; 0x46
   128a8:	bne	12970 <__assert_fail@plt+0x1aac>
   128ac:	ldrb	r3, [r0, #3]
   128b0:	cmp	r3, #45	; 0x2d
   128b4:	bne	12970 <__assert_fail@plt+0x1aac>
   128b8:	ldrb	r3, [r0, #4]
   128bc:	cmp	r3, #56	; 0x38
   128c0:	bne	12970 <__assert_fail@plt+0x1aac>
   128c4:	ldrb	r3, [r0, #5]
   128c8:	cmp	r3, #0
   128cc:	bne	12970 <__assert_fail@plt+0x1aac>
   128d0:	ldrb	r2, [r4]
   128d4:	movw	r3, #25384	; 0x6328
   128d8:	movt	r3, #1
   128dc:	movw	r4, #25396	; 0x6334
   128e0:	movt	r4, #1
   128e4:	cmp	r2, #96	; 0x60
   128e8:	movne	r4, r3
   128ec:	b	12864 <__assert_fail@plt+0x19a0>
   128f0:	cmp	r3, #71	; 0x47
   128f4:	bne	12970 <__assert_fail@plt+0x1aac>
   128f8:	ldrb	r3, [r0, #1]
   128fc:	bic	r3, r3, #32
   12900:	cmp	r3, #66	; 0x42
   12904:	bne	12970 <__assert_fail@plt+0x1aac>
   12908:	ldrb	r3, [r0, #2]
   1290c:	cmp	r3, #49	; 0x31
   12910:	bne	12970 <__assert_fail@plt+0x1aac>
   12914:	ldrb	r3, [r0, #3]
   12918:	cmp	r3, #56	; 0x38
   1291c:	bne	12970 <__assert_fail@plt+0x1aac>
   12920:	ldrb	r3, [r0, #4]
   12924:	cmp	r3, #48	; 0x30
   12928:	bne	12970 <__assert_fail@plt+0x1aac>
   1292c:	ldrb	r3, [r0, #5]
   12930:	cmp	r3, #51	; 0x33
   12934:	bne	12970 <__assert_fail@plt+0x1aac>
   12938:	ldrb	r3, [r0, #6]
   1293c:	cmp	r3, #48	; 0x30
   12940:	bne	12970 <__assert_fail@plt+0x1aac>
   12944:	ldrb	r3, [r0, #7]
   12948:	cmp	r3, #0
   1294c:	bne	12970 <__assert_fail@plt+0x1aac>
   12950:	ldrb	r2, [r4]
   12954:	movw	r3, #25388	; 0x632c
   12958:	movt	r3, #1
   1295c:	movw	r4, #25392	; 0x6330
   12960:	movt	r4, #1
   12964:	cmp	r2, #96	; 0x60
   12968:	movne	r4, r3
   1296c:	b	12864 <__assert_fail@plt+0x19a0>
   12970:	movw	r3, #25400	; 0x6338
   12974:	movt	r3, #1
   12978:	cmp	r6, #9
   1297c:	movw	r4, #25380	; 0x6324
   12980:	movt	r4, #1
   12984:	movne	r4, r3
   12988:	b	12864 <__assert_fail@plt+0x19a0>
   1298c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12990:	strd	r6, [sp, #8]
   12994:	strd	r8, [sp, #16]
   12998:	strd	sl, [sp, #24]
   1299c:	mov	fp, r0
   129a0:	mov	sl, r1
   129a4:	str	lr, [sp, #32]
   129a8:	sub	sp, sp, #116	; 0x74
   129ac:	ldr	r8, [sp, #152]	; 0x98
   129b0:	str	r3, [sp, #28]
   129b4:	ldr	r3, [sp, #156]	; 0x9c
   129b8:	str	r2, [sp, #32]
   129bc:	and	r4, r3, #2
   129c0:	ubfx	r3, r3, #1, #1
   129c4:	str	r3, [sp, #44]	; 0x2c
   129c8:	bl	10d50 <__ctype_get_mb_cur_max@plt>
   129cc:	str	r0, [sp, #64]	; 0x40
   129d0:	cmp	r8, #10
   129d4:	ldrls	pc, [pc, r8, lsl #2]
   129d8:	b	14148 <__assert_fail@plt+0x3284>
   129dc:	andeq	r2, r1, r0, ror #27
   129e0:	andeq	r2, r1, ip, ror lr
   129e4:	andeq	r3, r1, r8, asr r4
   129e8:	muleq	r1, ip, lr
   129ec:	andeq	r2, r1, r4, asr #26
   129f0:	muleq	r1, r0, sp
   129f4:	andeq	r2, r1, r0, lsl lr
   129f8:	andeq	r2, r1, ip, asr #28
   129fc:	andeq	r2, r1, r8, lsl #20
   12a00:	andeq	r2, r1, r8, lsl #20
   12a04:	andeq	r2, r1, r8, lsl #20
   12a08:	cmp	r8, #10
   12a0c:	beq	12a38 <__assert_fail@plt+0x1b74>
   12a10:	mov	r1, r8
   12a14:	movw	r0, #25404	; 0x633c
   12a18:	movt	r0, #1
   12a1c:	bl	12834 <__assert_fail@plt+0x1970>
   12a20:	mov	r1, r8
   12a24:	str	r0, [sp, #164]	; 0xa4
   12a28:	movw	r0, #25400	; 0x6338
   12a2c:	movt	r0, #1
   12a30:	bl	12834 <__assert_fail@plt+0x1970>
   12a34:	str	r0, [sp, #168]	; 0xa8
   12a38:	cmp	r4, #0
   12a3c:	movne	r4, #0
   12a40:	beq	13e24 <__assert_fail@plt+0x2f60>
   12a44:	mov	r3, #1
   12a48:	mov	r5, #0
   12a4c:	ldr	r0, [sp, #168]	; 0xa8
   12a50:	str	r3, [sp, #36]	; 0x24
   12a54:	str	r3, [sp, #40]	; 0x28
   12a58:	str	r5, [sp, #68]	; 0x44
   12a5c:	bl	10dd4 <strlen@plt>
   12a60:	ldr	r3, [sp, #168]	; 0xa8
   12a64:	str	r5, [sp, #48]	; 0x30
   12a68:	str	r0, [sp, #56]	; 0x38
   12a6c:	str	r3, [sp, #60]	; 0x3c
   12a70:	str	r5, [sp, #72]	; 0x48
   12a74:	str	r8, [sp, #152]	; 0x98
   12a78:	mov	r8, fp
   12a7c:	mov	r9, #0
   12a80:	ldr	fp, [sp, #152]	; 0x98
   12a84:	ldr	r3, [sp, #28]
   12a88:	cmn	r3, #1
   12a8c:	beq	12fec <__assert_fail@plt+0x2128>
   12a90:	ldr	r3, [sp, #28]
   12a94:	subs	r6, r3, r9
   12a98:	movne	r6, #1
   12a9c:	cmp	r6, #0
   12aa0:	beq	13004 <__assert_fail@plt+0x2140>
   12aa4:	ldr	r0, [sp, #32]
   12aa8:	ldr	r7, [sp, #40]	; 0x28
   12aac:	add	r3, r0, r9
   12ab0:	cmp	fp, #2
   12ab4:	moveq	r7, #0
   12ab8:	andne	r7, r7, #1
   12abc:	str	r3, [sp, #52]	; 0x34
   12ac0:	cmp	r7, #0
   12ac4:	beq	134a0 <__assert_fail@plt+0x25dc>
   12ac8:	ldr	r2, [sp, #56]	; 0x38
   12acc:	cmp	r2, #0
   12ad0:	beq	1373c <__assert_fail@plt+0x2878>
   12ad4:	ldr	r1, [sp, #28]
   12ad8:	cmp	r2, #1
   12adc:	mov	r3, r2
   12ae0:	movls	r3, #0
   12ae4:	movhi	r3, #1
   12ae8:	add	r5, r9, r2
   12aec:	cmn	r1, #1
   12af0:	movne	r3, #0
   12af4:	cmp	r3, #0
   12af8:	beq	12b04 <__assert_fail@plt+0x1c40>
   12afc:	bl	10dd4 <strlen@plt>
   12b00:	str	r0, [sp, #28]
   12b04:	ldr	r3, [sp, #28]
   12b08:	cmp	r5, r3
   12b0c:	bhi	1373c <__assert_fail@plt+0x2878>
   12b10:	ldr	r0, [sp, #52]	; 0x34
   12b14:	ldr	r2, [sp, #56]	; 0x38
   12b18:	ldr	r1, [sp, #60]	; 0x3c
   12b1c:	bl	10cf0 <memcmp@plt>
   12b20:	cmp	r0, #0
   12b24:	bne	1373c <__assert_fail@plt+0x2878>
   12b28:	ldr	r3, [sp, #44]	; 0x2c
   12b2c:	cmp	r3, #0
   12b30:	bne	1406c <__assert_fail@plt+0x31a8>
   12b34:	ldr	r3, [sp, #52]	; 0x34
   12b38:	ldrb	r5, [r3]
   12b3c:	cmp	r5, #126	; 0x7e
   12b40:	ldrls	pc, [pc, r5, lsl #2]
   12b44:	b	133fc <__assert_fail@plt+0x2538>
   12b48:	andeq	r3, r1, r0, lsl #6
   12b4c:	strdeq	r3, [r1], -ip
   12b50:	strdeq	r3, [r1], -ip
   12b54:	strdeq	r3, [r1], -ip
   12b58:	strdeq	r3, [r1], -ip
   12b5c:	strdeq	r3, [r1], -ip
   12b60:	strdeq	r3, [r1], -ip
   12b64:	ldrdeq	r3, [r1], -r4
   12b68:	andeq	r3, r1, ip, asr #5
   12b6c:	andeq	r3, r1, r4, lsl r2
   12b70:	andeq	r3, r1, r0, asr #5
   12b74:	andeq	r3, r1, ip, lsl #4
   12b78:	muleq	r1, ip, r2
   12b7c:	andeq	r3, r1, r8, ror #5
   12b80:	strdeq	r3, [r1], -ip
   12b84:	strdeq	r3, [r1], -ip
   12b88:	strdeq	r3, [r1], -ip
   12b8c:	strdeq	r3, [r1], -ip
   12b90:	strdeq	r3, [r1], -ip
   12b94:	strdeq	r3, [r1], -ip
   12b98:	strdeq	r3, [r1], -ip
   12b9c:	strdeq	r3, [r1], -ip
   12ba0:	strdeq	r3, [r1], -ip
   12ba4:	strdeq	r3, [r1], -ip
   12ba8:	strdeq	r3, [r1], -ip
   12bac:	strdeq	r3, [r1], -ip
   12bb0:	strdeq	r3, [r1], -ip
   12bb4:	strdeq	r3, [r1], -ip
   12bb8:	strdeq	r3, [r1], -ip
   12bbc:	strdeq	r3, [r1], -ip
   12bc0:	strdeq	r3, [r1], -ip
   12bc4:	strdeq	r3, [r1], -ip
   12bc8:	ldrdeq	r3, [r1], -r8
   12bcc:	andeq	r3, r1, r0, ror #5
   12bd0:	andeq	r3, r1, r0, ror #5
   12bd4:			; <UNDEFINED> instruction: 0x000133bc
   12bd8:	andeq	r3, r1, r0, ror #5
   12bdc:	strdeq	r3, [r1], -r0
   12be0:	andeq	r3, r1, r0, ror #5
   12be4:	andeq	r3, r1, ip, lsr r1
   12be8:	andeq	r3, r1, r0, ror #5
   12bec:	andeq	r3, r1, r0, ror #5
   12bf0:	andeq	r3, r1, r0, ror #5
   12bf4:	strdeq	r3, [r1], -r0
   12bf8:	strdeq	r3, [r1], -r0
   12bfc:	strdeq	r3, [r1], -r0
   12c00:	strdeq	r3, [r1], -r0
   12c04:	strdeq	r3, [r1], -r0
   12c08:	strdeq	r3, [r1], -r0
   12c0c:	strdeq	r3, [r1], -r0
   12c10:	strdeq	r3, [r1], -r0
   12c14:	strdeq	r3, [r1], -r0
   12c18:	strdeq	r3, [r1], -r0
   12c1c:	strdeq	r3, [r1], -r0
   12c20:	strdeq	r3, [r1], -r0
   12c24:	strdeq	r3, [r1], -r0
   12c28:	strdeq	r3, [r1], -r0
   12c2c:	strdeq	r3, [r1], -r0
   12c30:	strdeq	r3, [r1], -r0
   12c34:	andeq	r3, r1, r0, ror #5
   12c38:	andeq	r3, r1, r0, ror #5
   12c3c:	andeq	r3, r1, r0, ror #5
   12c40:	andeq	r3, r1, r0, ror #5
   12c44:	andeq	r3, r1, r0, lsl r1
   12c48:	strdeq	r3, [r1], -ip
   12c4c:	strdeq	r3, [r1], -r0
   12c50:	strdeq	r3, [r1], -r0
   12c54:	strdeq	r3, [r1], -r0
   12c58:	strdeq	r3, [r1], -r0
   12c5c:	strdeq	r3, [r1], -r0
   12c60:	strdeq	r3, [r1], -r0
   12c64:	strdeq	r3, [r1], -r0
   12c68:	strdeq	r3, [r1], -r0
   12c6c:	strdeq	r3, [r1], -r0
   12c70:	strdeq	r3, [r1], -r0
   12c74:	strdeq	r3, [r1], -r0
   12c78:	strdeq	r3, [r1], -r0
   12c7c:	strdeq	r3, [r1], -r0
   12c80:	strdeq	r3, [r1], -r0
   12c84:	strdeq	r3, [r1], -r0
   12c88:	strdeq	r3, [r1], -r0
   12c8c:	strdeq	r3, [r1], -r0
   12c90:	strdeq	r3, [r1], -r0
   12c94:	strdeq	r3, [r1], -r0
   12c98:	strdeq	r3, [r1], -r0
   12c9c:	strdeq	r3, [r1], -r0
   12ca0:	strdeq	r3, [r1], -r0
   12ca4:	strdeq	r3, [r1], -r0
   12ca8:	strdeq	r3, [r1], -r0
   12cac:	strdeq	r3, [r1], -r0
   12cb0:	strdeq	r3, [r1], -r0
   12cb4:	andeq	r3, r1, r0, ror #5
   12cb8:	strheq	r3, [r1], -r8
   12cbc:	strdeq	r3, [r1], -r0
   12cc0:	andeq	r3, r1, r0, ror #5
   12cc4:	strdeq	r3, [r1], -r0
   12cc8:	andeq	r3, r1, r0, ror #5
   12ccc:	strdeq	r3, [r1], -r0
   12cd0:	strdeq	r3, [r1], -r0
   12cd4:	strdeq	r3, [r1], -r0
   12cd8:	strdeq	r3, [r1], -r0
   12cdc:	strdeq	r3, [r1], -r0
   12ce0:	strdeq	r3, [r1], -r0
   12ce4:	strdeq	r3, [r1], -r0
   12ce8:	strdeq	r3, [r1], -r0
   12cec:	strdeq	r3, [r1], -r0
   12cf0:	strdeq	r3, [r1], -r0
   12cf4:	strdeq	r3, [r1], -r0
   12cf8:	strdeq	r3, [r1], -r0
   12cfc:	strdeq	r3, [r1], -r0
   12d00:	strdeq	r3, [r1], -r0
   12d04:	strdeq	r3, [r1], -r0
   12d08:	strdeq	r3, [r1], -r0
   12d0c:	strdeq	r3, [r1], -r0
   12d10:	strdeq	r3, [r1], -r0
   12d14:	strdeq	r3, [r1], -r0
   12d18:	strdeq	r3, [r1], -r0
   12d1c:	strdeq	r3, [r1], -r0
   12d20:	strdeq	r3, [r1], -r0
   12d24:	strdeq	r3, [r1], -r0
   12d28:	strdeq	r3, [r1], -r0
   12d2c:	strdeq	r3, [r1], -r0
   12d30:	strdeq	r3, [r1], -r0
   12d34:	ldrdeq	r2, [r1], -ip
   12d38:	andeq	r3, r1, r0, ror #5
   12d3c:	ldrdeq	r2, [r1], -ip
   12d40:			; <UNDEFINED> instruction: 0x000133bc
   12d44:	cmp	r4, #0
   12d48:	moveq	r3, #1
   12d4c:	streq	r3, [sp, #40]	; 0x28
   12d50:	beq	13464 <__assert_fail@plt+0x25a0>
   12d54:	mov	r3, #0
   12d58:	mov	r2, #1
   12d5c:	mov	r4, r3
   12d60:	str	r2, [sp, #36]	; 0x24
   12d64:	str	r2, [sp, #44]	; 0x2c
   12d68:	str	r2, [sp, #56]	; 0x38
   12d6c:	str	r3, [sp, #68]	; 0x44
   12d70:	movw	r3, #25400	; 0x6338
   12d74:	movt	r3, #1
   12d78:	str	r4, [sp, #40]	; 0x28
   12d7c:	mov	r8, #2
   12d80:	str	r4, [sp, #48]	; 0x30
   12d84:	str	r3, [sp, #60]	; 0x3c
   12d88:	str	r4, [sp, #72]	; 0x48
   12d8c:	b	12a74 <__assert_fail@plt+0x1bb0>
   12d90:	cmp	r4, #0
   12d94:	bne	13fe0 <__assert_fail@plt+0x311c>
   12d98:	cmp	sl, #0
   12d9c:	beq	13da0 <__assert_fail@plt+0x2edc>
   12da0:	mov	r3, #34	; 0x22
   12da4:	mov	r1, r4
   12da8:	mov	r2, #1
   12dac:	strb	r3, [fp]
   12db0:	movw	r3, #25380	; 0x6324
   12db4:	movt	r3, #1
   12db8:	mov	r4, r2
   12dbc:	str	r2, [sp, #36]	; 0x24
   12dc0:	str	r2, [sp, #40]	; 0x28
   12dc4:	str	r1, [sp, #44]	; 0x2c
   12dc8:	str	r1, [sp, #48]	; 0x30
   12dcc:	str	r2, [sp, #56]	; 0x38
   12dd0:	str	r3, [sp, #60]	; 0x3c
   12dd4:	str	r1, [sp, #68]	; 0x44
   12dd8:	str	r1, [sp, #72]	; 0x48
   12ddc:	b	12a74 <__assert_fail@plt+0x1bb0>
   12de0:	mov	r3, #0
   12de4:	mov	r4, r8
   12de8:	str	r3, [sp, #40]	; 0x28
   12dec:	str	r3, [sp, #44]	; 0x2c
   12df0:	str	r3, [sp, #48]	; 0x30
   12df4:	str	r8, [sp, #56]	; 0x38
   12df8:	str	r3, [sp, #60]	; 0x3c
   12dfc:	str	r3, [sp, #68]	; 0x44
   12e00:	mov	r3, #1
   12e04:	str	r3, [sp, #36]	; 0x24
   12e08:	str	r8, [sp, #72]	; 0x48
   12e0c:	b	12a74 <__assert_fail@plt+0x1bb0>
   12e10:	mov	r3, #1
   12e14:	mov	r2, #0
   12e18:	mov	r4, r2
   12e1c:	mov	r8, #5
   12e20:	str	r3, [sp, #36]	; 0x24
   12e24:	str	r3, [sp, #40]	; 0x28
   12e28:	str	r3, [sp, #44]	; 0x2c
   12e2c:	str	r2, [sp, #48]	; 0x30
   12e30:	str	r3, [sp, #56]	; 0x38
   12e34:	movw	r3, #25380	; 0x6324
   12e38:	movt	r3, #1
   12e3c:	str	r3, [sp, #60]	; 0x3c
   12e40:	str	r2, [sp, #68]	; 0x44
   12e44:	str	r2, [sp, #72]	; 0x48
   12e48:	b	12a74 <__assert_fail@plt+0x1bb0>
   12e4c:	mov	r3, #0
   12e50:	mov	r2, #1
   12e54:	mov	r4, r3
   12e58:	str	r2, [sp, #36]	; 0x24
   12e5c:	str	r2, [sp, #40]	; 0x28
   12e60:	str	r3, [sp, #44]	; 0x2c
   12e64:	str	r3, [sp, #48]	; 0x30
   12e68:	str	r3, [sp, #56]	; 0x38
   12e6c:	str	r3, [sp, #60]	; 0x3c
   12e70:	str	r3, [sp, #68]	; 0x44
   12e74:	str	r3, [sp, #72]	; 0x48
   12e78:	b	12a74 <__assert_fail@plt+0x1bb0>
   12e7c:	mov	r2, #1
   12e80:	mov	r3, #0
   12e84:	mov	r4, r3
   12e88:	str	r2, [sp, #36]	; 0x24
   12e8c:	str	r2, [sp, #44]	; 0x2c
   12e90:	str	r8, [sp, #56]	; 0x38
   12e94:	str	r3, [sp, #68]	; 0x44
   12e98:	b	12d70 <__assert_fail@plt+0x1eac>
   12e9c:	mov	r3, #1
   12ea0:	mov	r2, #0
   12ea4:	mov	r4, r2
   12ea8:	mov	r8, #2
   12eac:	str	r3, [sp, #36]	; 0x24
   12eb0:	str	r3, [sp, #40]	; 0x28
   12eb4:	str	r3, [sp, #44]	; 0x2c
   12eb8:	str	r2, [sp, #48]	; 0x30
   12ebc:	str	r3, [sp, #56]	; 0x38
   12ec0:	movw	r3, #25400	; 0x6338
   12ec4:	movt	r3, #1
   12ec8:	str	r3, [sp, #60]	; 0x3c
   12ecc:	str	r2, [sp, #68]	; 0x44
   12ed0:	str	r2, [sp, #72]	; 0x48
   12ed4:	b	12a74 <__assert_fail@plt+0x1bb0>
   12ed8:	mov	r7, #0
   12edc:	ldr	r3, [sp, #28]
   12ee0:	cmn	r3, #1
   12ee4:	beq	139bc <__assert_fail@plt+0x2af8>
   12ee8:	ldr	r3, [sp, #28]
   12eec:	subs	r2, r3, #1
   12ef0:	movne	r2, #1
   12ef4:	sub	r3, fp, #2
   12ef8:	cmp	r2, #0
   12efc:	clz	r3, r3
   12f00:	lsr	r3, r3, #5
   12f04:	bne	12f10 <__assert_fail@plt+0x204c>
   12f08:	cmp	r9, #0
   12f0c:	beq	1371c <__assert_fail@plt+0x2858>
   12f10:	mov	r6, #0
   12f14:	ldr	r2, [sp, #40]	; 0x28
   12f18:	eor	r2, r2, #1
   12f1c:	orrs	r3, r3, r2
   12f20:	bne	130f8 <__assert_fail@plt+0x2234>
   12f24:	ldr	r2, [sp, #160]	; 0xa0
   12f28:	cmp	r2, #0
   12f2c:	beq	12f4c <__assert_fail@plt+0x2088>
   12f30:	ldr	r0, [sp, #160]	; 0xa0
   12f34:	ubfx	r1, r5, #5, #8
   12f38:	and	r2, r5, #31
   12f3c:	ldr	r1, [r0, r1, lsl #2]
   12f40:	lsr	r2, r1, r2
   12f44:	tst	r2, #1
   12f48:	bne	12f54 <__assert_fail@plt+0x2090>
   12f4c:	cmp	r7, #0
   12f50:	beq	131c4 <__assert_fail@plt+0x2300>
   12f54:	ldr	r2, [sp, #44]	; 0x2c
   12f58:	sub	r3, fp, #2
   12f5c:	clz	r3, r3
   12f60:	lsr	r3, r3, #5
   12f64:	cmp	r2, #0
   12f68:	bne	13d10 <__assert_fail@plt+0x2e4c>
   12f6c:	ldr	r2, [sp, #48]	; 0x30
   12f70:	eor	r2, r2, #1
   12f74:	ands	r3, r3, r2
   12f78:	beq	12fb0 <__assert_fail@plt+0x20ec>
   12f7c:	cmp	sl, r4
   12f80:	str	r3, [sp, #48]	; 0x30
   12f84:	movhi	r2, #39	; 0x27
   12f88:	strbhi	r2, [r8, r4]
   12f8c:	add	r2, r4, #1
   12f90:	cmp	sl, r2
   12f94:	movhi	r1, #36	; 0x24
   12f98:	strbhi	r1, [r8, r2]
   12f9c:	add	r2, r4, #2
   12fa0:	add	r4, r4, #3
   12fa4:	cmp	sl, r2
   12fa8:	movhi	r1, #39	; 0x27
   12fac:	strbhi	r1, [r8, r2]
   12fb0:	cmp	r4, sl
   12fb4:	add	r9, r9, #1
   12fb8:	movcc	r3, #92	; 0x5c
   12fbc:	strbcc	r3, [r8, r4]
   12fc0:	add	r4, r4, #1
   12fc4:	cmp	r4, sl
   12fc8:	ldr	r3, [sp, #36]	; 0x24
   12fcc:	strbcc	r5, [r8, r4]
   12fd0:	cmp	r6, #0
   12fd4:	add	r4, r4, #1
   12fd8:	moveq	r3, #0
   12fdc:	str	r3, [sp, #36]	; 0x24
   12fe0:	ldr	r3, [sp, #28]
   12fe4:	cmn	r3, #1
   12fe8:	bne	12a90 <__assert_fail@plt+0x1bcc>
   12fec:	ldr	r3, [sp, #32]
   12ff0:	ldrb	r6, [r3, r9]
   12ff4:	adds	r6, r6, #0
   12ff8:	movne	r6, #1
   12ffc:	cmp	r6, #0
   13000:	bne	12aa4 <__assert_fail@plt+0x1be0>
   13004:	str	fp, [sp, #152]	; 0x98
   13008:	mov	fp, r8
   1300c:	cmp	r4, #0
   13010:	ldr	r1, [sp, #44]	; 0x2c
   13014:	movne	r3, #0
   13018:	ldr	r8, [sp, #152]	; 0x98
   1301c:	sub	r2, r8, #2
   13020:	clz	r2, r2
   13024:	lsr	r2, r2, #5
   13028:	andeq	r3, r2, r1
   1302c:	cmp	r3, #0
   13030:	bne	140ec <__assert_fail@plt+0x3228>
   13034:	eor	r3, r1, #1
   13038:	ands	r2, r2, r3
   1303c:	beq	14018 <__assert_fail@plt+0x3154>
   13040:	ldr	r3, [sp, #68]	; 0x44
   13044:	cmp	r3, #0
   13048:	beq	1401c <__assert_fail@plt+0x3158>
   1304c:	ldr	r3, [sp, #36]	; 0x24
   13050:	cmp	r3, #0
   13054:	bne	140a8 <__assert_fail@plt+0x31e4>
   13058:	ldr	r3, [sp, #72]	; 0x48
   1305c:	adds	r3, r3, #0
   13060:	movne	r3, #1
   13064:	cmp	sl, #0
   13068:	movne	r3, #0
   1306c:	cmp	r3, #0
   13070:	ldreq	r2, [sp, #68]	; 0x44
   13074:	beq	1401c <__assert_fail@plt+0x3158>
   13078:	ldr	r2, [sp, #72]	; 0x48
   1307c:	str	r3, [sp, #68]	; 0x44
   13080:	movw	r3, #25400	; 0x6338
   13084:	movt	r3, #1
   13088:	mov	r1, #39	; 0x27
   1308c:	mov	r4, #1
   13090:	ldr	sl, [sp, #72]	; 0x48
   13094:	mov	r8, #2
   13098:	str	r3, [sp, #60]	; 0x3c
   1309c:	mov	r3, #0
   130a0:	strb	r1, [fp]
   130a4:	str	r3, [sp, #44]	; 0x2c
   130a8:	str	r4, [sp, #56]	; 0x38
   130ac:	str	r2, [sp, #72]	; 0x48
   130b0:	b	12a74 <__assert_fail@plt+0x1bb0>
   130b4:	mov	r7, #0
   130b8:	cmp	fp, #2
   130bc:	beq	1399c <__assert_fail@plt+0x2ad8>
   130c0:	ldr	r2, [sp, #40]	; 0x28
   130c4:	ldr	r3, [sp, #56]	; 0x38
   130c8:	ldr	r1, [sp, #44]	; 0x2c
   130cc:	cmp	r3, #0
   130d0:	moveq	r3, #0
   130d4:	andne	r3, r2, r1
   130d8:	cmp	r3, #0
   130dc:	moveq	r5, #92	; 0x5c
   130e0:	moveq	r3, r5
   130e4:	bne	139a8 <__assert_fail@plt+0x2ae4>
   130e8:	ldr	r2, [sp, #40]	; 0x28
   130ec:	cmp	r2, #0
   130f0:	bne	13de4 <__assert_fail@plt+0x2f20>
   130f4:	mov	r6, #0
   130f8:	ldr	r3, [sp, #44]	; 0x2c
   130fc:	cmp	r3, #0
   13100:	beq	13994 <__assert_fail@plt+0x2ad0>
   13104:	mov	r3, #0
   13108:	b	12f24 <__assert_fail@plt+0x2060>
   1310c:	mov	r7, #0
   13110:	cmp	fp, #2
   13114:	beq	13a0c <__assert_fail@plt+0x2b48>
   13118:	cmp	fp, #5
   1311c:	beq	139d0 <__assert_fail@plt+0x2b0c>
   13120:	sub	r3, fp, #2
   13124:	mov	r6, #0
   13128:	clz	r3, r3
   1312c:	mov	r5, #63	; 0x3f
   13130:	lsr	r3, r3, #5
   13134:	b	12f14 <__assert_fail@plt+0x2050>
   13138:	mov	r7, #0
   1313c:	cmp	fp, #2
   13140:	movne	r3, #0
   13144:	movne	r5, #39	; 0x27
   13148:	strne	r6, [sp, #68]	; 0x44
   1314c:	bne	12f14 <__assert_fail@plt+0x2050>
   13150:	ldr	r3, [sp, #44]	; 0x2c
   13154:	cmp	r3, #0
   13158:	bne	13e14 <__assert_fail@plt+0x2f50>
   1315c:	ldr	r3, [sp, #72]	; 0x48
   13160:	cmp	sl, #0
   13164:	clz	r3, r3
   13168:	lsr	r3, r3, #5
   1316c:	moveq	r3, #0
   13170:	cmp	r3, #0
   13174:	bne	13d40 <__assert_fail@plt+0x2e7c>
   13178:	cmp	sl, r4
   1317c:	movhi	r3, #39	; 0x27
   13180:	strbhi	r3, [r8, r4]
   13184:	add	r3, r4, #1
   13188:	cmp	sl, r3
   1318c:	movhi	r2, #92	; 0x5c
   13190:	strbhi	r2, [r8, r3]
   13194:	add	r3, r4, #2
   13198:	cmp	sl, r3
   1319c:	bls	131a8 <__assert_fail@plt+0x22e4>
   131a0:	mov	r2, #39	; 0x27
   131a4:	strb	r2, [r8, r3]
   131a8:	mov	r3, #0
   131ac:	cmp	r7, #0
   131b0:	add	r4, r4, #3
   131b4:	mov	r5, #39	; 0x27
   131b8:	str	r3, [sp, #48]	; 0x30
   131bc:	str	r6, [sp, #68]	; 0x44
   131c0:	bne	12f54 <__assert_fail@plt+0x2090>
   131c4:	ldr	r2, [sp, #48]	; 0x30
   131c8:	eor	r3, r3, #1
   131cc:	add	r9, r9, #1
   131d0:	and	r3, r3, r2
   131d4:	uxtb	r3, r3
   131d8:	cmp	r3, #0
   131dc:	beq	12fc4 <__assert_fail@plt+0x2100>
   131e0:	cmp	sl, r4
   131e4:	movhi	r3, #39	; 0x27
   131e8:	strbhi	r3, [r8, r4]
   131ec:	add	r3, r4, #1
   131f0:	add	r4, r4, #2
   131f4:	cmp	sl, r3
   131f8:	movhi	r2, #39	; 0x27
   131fc:	strbhi	r2, [r8, r3]
   13200:	mov	r3, #0
   13204:	str	r3, [sp, #48]	; 0x30
   13208:	b	12fc4 <__assert_fail@plt+0x2100>
   1320c:	mov	r3, #118	; 0x76
   13210:	b	130e8 <__assert_fail@plt+0x2224>
   13214:	mov	r3, #116	; 0x74
   13218:	ldr	r2, [sp, #44]	; 0x2c
   1321c:	cmp	fp, #2
   13220:	movne	r2, #0
   13224:	andeq	r2, r2, #1
   13228:	cmp	r2, #0
   1322c:	beq	130e8 <__assert_fail@plt+0x2224>
   13230:	mov	fp, r8
   13234:	mov	r8, #2
   13238:	ldr	r3, [sp, #40]	; 0x28
   1323c:	cmp	r3, #0
   13240:	movne	r8, #4
   13244:	mov	lr, #0
   13248:	mov	r0, fp
   1324c:	ldr	r2, [sp, #32]
   13250:	ldr	r3, [sp, #156]	; 0x9c
   13254:	ldr	r1, [sp, #164]	; 0xa4
   13258:	bic	ip, r3, #2
   1325c:	ldr	r3, [sp, #28]
   13260:	stm	sp, {r8, ip, lr}
   13264:	ldr	ip, [sp, #168]	; 0xa8
   13268:	str	r1, [sp, #12]
   1326c:	mov	r1, sl
   13270:	str	ip, [sp, #16]
   13274:	bl	1298c <__assert_fail@plt+0x1ac8>
   13278:	mov	r4, r0
   1327c:	mov	r0, r4
   13280:	add	sp, sp, #116	; 0x74
   13284:	ldrd	r4, [sp]
   13288:	ldrd	r6, [sp, #8]
   1328c:	ldrd	r8, [sp, #16]
   13290:	ldrd	sl, [sp, #24]
   13294:	add	sp, sp, #32
   13298:	pop	{pc}		; (ldr pc, [sp], #4)
   1329c:	mov	r5, #102	; 0x66
   132a0:	ldr	r2, [sp, #44]	; 0x2c
   132a4:	sub	r3, fp, #2
   132a8:	clz	r3, r3
   132ac:	lsr	r3, r3, #5
   132b0:	cmp	r2, #0
   132b4:	bne	13d10 <__assert_fail@plt+0x2e4c>
   132b8:	mov	r6, r2
   132bc:	b	12fb0 <__assert_fail@plt+0x20ec>
   132c0:	mov	r5, #110	; 0x6e
   132c4:	mov	r6, #0
   132c8:	b	12f54 <__assert_fail@plt+0x2090>
   132cc:	mov	r5, #98	; 0x62
   132d0:	b	132a0 <__assert_fail@plt+0x23dc>
   132d4:	mov	r5, #97	; 0x61
   132d8:	b	132a0 <__assert_fail@plt+0x23dc>
   132dc:	mov	r7, #0
   132e0:	mov	r6, #0
   132e4:	b	13104 <__assert_fail@plt+0x2240>
   132e8:	mov	r5, #114	; 0x72
   132ec:	b	132c4 <__assert_fail@plt+0x2400>
   132f0:	ldr	r3, [sp, #44]	; 0x2c
   132f4:	cmp	r3, #0
   132f8:	bne	14088 <__assert_fail@plt+0x31c4>
   132fc:	mov	r7, r3
   13300:	ldr	r3, [sp, #48]	; 0x30
   13304:	sub	r2, fp, #2
   13308:	clz	r2, r2
   1330c:	lsr	r2, r2, #5
   13310:	eor	r3, r3, #1
   13314:	ands	r3, r2, r3
   13318:	beq	13d2c <__assert_fail@plt+0x2e68>
   1331c:	cmp	sl, r4
   13320:	movhi	r1, #39	; 0x27
   13324:	strbhi	r1, [r8, r4]
   13328:	add	r1, r4, #1
   1332c:	cmp	sl, r1
   13330:	movhi	r0, #36	; 0x24
   13334:	strbhi	r0, [r8, r1]
   13338:	add	r1, r4, #2
   1333c:	cmp	sl, r1
   13340:	movhi	r0, #39	; 0x27
   13344:	strbhi	r0, [r8, r1]
   13348:	add	r1, r4, #3
   1334c:	cmp	sl, r1
   13350:	bls	13d84 <__assert_fail@plt+0x2ec0>
   13354:	mov	r4, r1
   13358:	mov	r1, #92	; 0x5c
   1335c:	mov	r0, r4
   13360:	str	r3, [sp, #48]	; 0x30
   13364:	strb	r1, [r8, r4]
   13368:	cmp	fp, #2
   1336c:	add	r4, r4, #1
   13370:	beq	13dd4 <__assert_fail@plt+0x2f10>
   13374:	ldr	r1, [sp, #28]
   13378:	add	r3, r9, #1
   1337c:	cmp	r3, r1
   13380:	bcs	13398 <__assert_fail@plt+0x24d4>
   13384:	ldr	r1, [sp, #32]
   13388:	ldrb	r3, [r1, r3]
   1338c:	sub	r3, r3, #48	; 0x30
   13390:	cmp	r3, #9
   13394:	bls	13dec <__assert_fail@plt+0x2f28>
   13398:	mov	r5, #48	; 0x30
   1339c:	ldr	r3, [sp, #40]	; 0x28
   133a0:	eor	r3, r3, #1
   133a4:	orrs	r2, r2, r3
   133a8:	mov	r3, r6
   133ac:	moveq	r6, r2
   133b0:	beq	12f24 <__assert_fail@plt+0x2060>
   133b4:	mov	r6, #0
   133b8:	b	12f4c <__assert_fail@plt+0x2088>
   133bc:	cmp	r9, #0
   133c0:	mov	r2, r7
   133c4:	bne	13964 <__assert_fail@plt+0x2aa0>
   133c8:	mov	r6, r7
   133cc:	mov	r3, r9
   133d0:	mov	r7, r2
   133d4:	b	12f14 <__assert_fail@plt+0x2050>
   133d8:	mov	r2, r7
   133dc:	mov	r6, r7
   133e0:	mov	r3, #0
   133e4:	mov	r7, r2
   133e8:	mov	r5, #32
   133ec:	b	12f14 <__assert_fail@plt+0x2050>
   133f0:	mov	r6, r7
   133f4:	b	13104 <__assert_fail@plt+0x2240>
   133f8:	mov	r7, #0
   133fc:	ldr	r3, [sp, #64]	; 0x40
   13400:	cmp	r3, #1
   13404:	bne	13a24 <__assert_fail@plt+0x2b60>
   13408:	bl	10dbc <__ctype_b_loc@plt>
   1340c:	ldr	r2, [r0]
   13410:	sxth	r3, r5
   13414:	lsl	r3, r3, #1
   13418:	ldr	r1, [sp, #64]	; 0x40
   1341c:	ldrh	r3, [r2, r3]
   13420:	mov	ip, r1
   13424:	and	r3, r3, #16384	; 0x4000
   13428:	cmp	r3, #0
   1342c:	ldr	r3, [sp, #40]	; 0x28
   13430:	movne	r6, #1
   13434:	moveq	r6, #0
   13438:	movne	r2, #0
   1343c:	andeq	r2, r3, #1
   13440:	cmp	r2, #0
   13444:	bne	13d6c <__assert_fail@plt+0x2ea8>
   13448:	sub	r3, fp, #2
   1344c:	clz	r3, r3
   13450:	lsr	r3, r3, #5
   13454:	b	12f14 <__assert_fail@plt+0x2050>
   13458:	cmp	r4, #0
   1345c:	bne	140fc <__assert_fail@plt+0x3238>
   13460:	str	r4, [sp, #40]	; 0x28
   13464:	cmp	sl, #0
   13468:	bne	1412c <__assert_fail@plt+0x3268>
   1346c:	mov	r3, #1
   13470:	movw	r2, #25400	; 0x6338
   13474:	movt	r2, #1
   13478:	mov	r4, r3
   1347c:	mov	r8, #2
   13480:	str	r3, [sp, #36]	; 0x24
   13484:	str	sl, [sp, #44]	; 0x2c
   13488:	str	sl, [sp, #48]	; 0x30
   1348c:	str	r3, [sp, #56]	; 0x38
   13490:	str	r2, [sp, #60]	; 0x3c
   13494:	str	sl, [sp, #68]	; 0x44
   13498:	str	sl, [sp, #72]	; 0x48
   1349c:	b	12a74 <__assert_fail@plt+0x1bb0>
   134a0:	ldr	r3, [sp, #32]
   134a4:	ldrb	r5, [r3, r9]
   134a8:	cmp	r5, #126	; 0x7e
   134ac:	ldrls	pc, [pc, r5, lsl #2]
   134b0:	b	133fc <__assert_fail@plt+0x2538>
   134b4:	ldrdeq	r3, [r1], -r8
   134b8:	strdeq	r3, [r1], -ip
   134bc:	strdeq	r3, [r1], -ip
   134c0:	strdeq	r3, [r1], -ip
   134c4:	strdeq	r3, [r1], -ip
   134c8:	strdeq	r3, [r1], -ip
   134cc:	strdeq	r3, [r1], -ip
   134d0:	ldrdeq	r3, [r1], -r0
   134d4:	andeq	r3, r1, r8, asr #13
   134d8:	andeq	r3, r1, r4, lsl r2
   134dc:	andeq	r3, r1, r0, asr #13
   134e0:	andeq	r3, r1, ip, lsl #4
   134e4:			; <UNDEFINED> instruction: 0x000136b8
   134e8:			; <UNDEFINED> instruction: 0x000136b0
   134ec:	strdeq	r3, [r1], -ip
   134f0:	strdeq	r3, [r1], -ip
   134f4:	strdeq	r3, [r1], -ip
   134f8:	strdeq	r3, [r1], -ip
   134fc:	strdeq	r3, [r1], -ip
   13500:	strdeq	r3, [r1], -ip
   13504:	strdeq	r3, [r1], -ip
   13508:	strdeq	r3, [r1], -ip
   1350c:	strdeq	r3, [r1], -ip
   13510:	strdeq	r3, [r1], -ip
   13514:	strdeq	r3, [r1], -ip
   13518:	strdeq	r3, [r1], -ip
   1351c:	strdeq	r3, [r1], -ip
   13520:	strdeq	r3, [r1], -ip
   13524:	strdeq	r3, [r1], -ip
   13528:	strdeq	r3, [r1], -ip
   1352c:	strdeq	r3, [r1], -ip
   13530:	strdeq	r3, [r1], -ip
   13534:	andeq	r3, r1, ip, lsr #14
   13538:	andeq	r3, r1, ip, lsl #14
   1353c:	andeq	r3, r1, ip, lsl #14
   13540:	strdeq	r3, [r1], -ip
   13544:	andeq	r3, r1, ip, lsl #14
   13548:	andeq	r3, r1, r8, asr #8
   1354c:	andeq	r3, r1, ip, lsl #14
   13550:	andeq	r3, r1, ip, lsr r1
   13554:	andeq	r3, r1, ip, lsl #14
   13558:	andeq	r3, r1, ip, lsl #14
   1355c:	andeq	r3, r1, ip, lsl #14
   13560:	andeq	r3, r1, r8, asr #8
   13564:	andeq	r3, r1, r8, asr #8
   13568:	andeq	r3, r1, r8, asr #8
   1356c:	andeq	r3, r1, r8, asr #8
   13570:	andeq	r3, r1, r8, asr #8
   13574:	andeq	r3, r1, r8, asr #8
   13578:	andeq	r3, r1, r8, asr #8
   1357c:	andeq	r3, r1, r8, asr #8
   13580:	andeq	r3, r1, r8, asr #8
   13584:	andeq	r3, r1, r8, asr #8
   13588:	andeq	r3, r1, r8, asr #8
   1358c:	andeq	r3, r1, r8, asr #8
   13590:	andeq	r3, r1, r8, asr #8
   13594:	andeq	r3, r1, r8, asr #8
   13598:	andeq	r3, r1, r8, asr #8
   1359c:	andeq	r3, r1, r8, asr #8
   135a0:	andeq	r3, r1, ip, lsl #14
   135a4:	andeq	r3, r1, ip, lsl #14
   135a8:	andeq	r3, r1, ip, lsl #14
   135ac:	andeq	r3, r1, ip, lsl #14
   135b0:	andeq	r3, r1, r0, lsl r1
   135b4:	strdeq	r3, [r1], -ip
   135b8:	andeq	r3, r1, r8, asr #8
   135bc:	andeq	r3, r1, r8, asr #8
   135c0:	andeq	r3, r1, r8, asr #8
   135c4:	andeq	r3, r1, r8, asr #8
   135c8:	andeq	r3, r1, r8, asr #8
   135cc:	andeq	r3, r1, r8, asr #8
   135d0:	andeq	r3, r1, r8, asr #8
   135d4:	andeq	r3, r1, r8, asr #8
   135d8:	andeq	r3, r1, r8, asr #8
   135dc:	andeq	r3, r1, r8, asr #8
   135e0:	andeq	r3, r1, r8, asr #8
   135e4:	andeq	r3, r1, r8, asr #8
   135e8:	andeq	r3, r1, r8, asr #8
   135ec:	andeq	r3, r1, r8, asr #8
   135f0:	andeq	r3, r1, r8, asr #8
   135f4:	andeq	r3, r1, r8, asr #8
   135f8:	andeq	r3, r1, r8, asr #8
   135fc:	andeq	r3, r1, r8, asr #8
   13600:	andeq	r3, r1, r8, asr #8
   13604:	andeq	r3, r1, r8, asr #8
   13608:	andeq	r3, r1, r8, asr #8
   1360c:	andeq	r3, r1, r8, asr #8
   13610:	andeq	r3, r1, r8, asr #8
   13614:	andeq	r3, r1, r8, asr #8
   13618:	andeq	r3, r1, r8, asr #8
   1361c:	andeq	r3, r1, r8, asr #8
   13620:	andeq	r3, r1, ip, lsl #14
   13624:	strheq	r3, [r1], -r8
   13628:	andeq	r3, r1, r8, asr #8
   1362c:	andeq	r3, r1, ip, lsl #14
   13630:	andeq	r3, r1, r8, asr #8
   13634:	andeq	r3, r1, ip, lsl #14
   13638:	andeq	r3, r1, r8, asr #8
   1363c:	andeq	r3, r1, r8, asr #8
   13640:	andeq	r3, r1, r8, asr #8
   13644:	andeq	r3, r1, r8, asr #8
   13648:	andeq	r3, r1, r8, asr #8
   1364c:	andeq	r3, r1, r8, asr #8
   13650:	andeq	r3, r1, r8, asr #8
   13654:	andeq	r3, r1, r8, asr #8
   13658:	andeq	r3, r1, r8, asr #8
   1365c:	andeq	r3, r1, r8, asr #8
   13660:	andeq	r3, r1, r8, asr #8
   13664:	andeq	r3, r1, r8, asr #8
   13668:	andeq	r3, r1, r8, asr #8
   1366c:	andeq	r3, r1, r8, asr #8
   13670:	andeq	r3, r1, r8, asr #8
   13674:	andeq	r3, r1, r8, asr #8
   13678:	andeq	r3, r1, r8, asr #8
   1367c:	andeq	r3, r1, r8, asr #8
   13680:	andeq	r3, r1, r8, asr #8
   13684:	andeq	r3, r1, r8, asr #8
   13688:	andeq	r3, r1, r8, asr #8
   1368c:	andeq	r3, r1, r8, asr #8
   13690:	andeq	r3, r1, r8, asr #8
   13694:	andeq	r3, r1, r8, asr #8
   13698:	andeq	r3, r1, r8, asr #8
   1369c:	andeq	r3, r1, r8, asr #8
   136a0:	ldrdeq	r2, [r1], -ip
   136a4:	andeq	r3, r1, ip, lsl #14
   136a8:	ldrdeq	r2, [r1], -ip
   136ac:	strdeq	r3, [r1], -ip
   136b0:	mov	r3, #114	; 0x72
   136b4:	b	13218 <__assert_fail@plt+0x2354>
   136b8:	mov	r3, #102	; 0x66
   136bc:	b	130e8 <__assert_fail@plt+0x2224>
   136c0:	mov	r3, #110	; 0x6e
   136c4:	b	13218 <__assert_fail@plt+0x2354>
   136c8:	mov	r3, #98	; 0x62
   136cc:	b	130e8 <__assert_fail@plt+0x2224>
   136d0:	mov	r3, #97	; 0x61
   136d4:	b	130e8 <__assert_fail@plt+0x2224>
   136d8:	ldr	r3, [sp, #40]	; 0x28
   136dc:	cmp	r3, #0
   136e0:	bne	132f0 <__assert_fail@plt+0x242c>
   136e4:	ldr	r3, [sp, #156]	; 0x9c
   136e8:	tst	r3, #1
   136ec:	addne	r9, r9, #1
   136f0:	bne	12a84 <__assert_fail@plt+0x1bc0>
   136f4:	ldr	r7, [sp, #40]	; 0x28
   136f8:	b	130f4 <__assert_fail@plt+0x2230>
   136fc:	sub	r3, fp, #2
   13700:	clz	r3, r3
   13704:	lsr	r3, r3, #5
   13708:	b	12f08 <__assert_fail@plt+0x2044>
   1370c:	sub	r3, fp, #2
   13710:	mov	r6, #0
   13714:	clz	r3, r3
   13718:	lsr	r3, r3, #5
   1371c:	ldr	r2, [sp, #44]	; 0x2c
   13720:	tst	r2, r3
   13724:	beq	12f14 <__assert_fail@plt+0x2050>
   13728:	b	13230 <__assert_fail@plt+0x236c>
   1372c:	sub	r3, fp, #2
   13730:	clz	r3, r3
   13734:	lsr	r3, r3, #5
   13738:	b	1371c <__assert_fail@plt+0x2858>
   1373c:	ldr	r3, [sp, #52]	; 0x34
   13740:	ldrb	r5, [r3]
   13744:	cmp	r5, #126	; 0x7e
   13748:	ldrls	pc, [pc, r5, lsl #2]
   1374c:	b	133f8 <__assert_fail@plt+0x2534>
   13750:	strdeq	r3, [r1], -r0
   13754:	strdeq	r3, [r1], -r8
   13758:	strdeq	r3, [r1], -r8
   1375c:	strdeq	r3, [r1], -r8
   13760:	strdeq	r3, [r1], -r8
   13764:	strdeq	r3, [r1], -r8
   13768:	strdeq	r3, [r1], -r8
   1376c:	ldrdeq	r3, [r1], -r4
   13770:	andeq	r3, r1, ip, asr #5
   13774:	andeq	r3, r1, r8, lsl #19
   13778:	andeq	r3, r1, r0, asr #5
   1377c:	andeq	r3, r1, ip, ror r9
   13780:	muleq	r1, ip, r2
   13784:	andeq	r3, r1, r8, ror #5
   13788:	strdeq	r3, [r1], -r8
   1378c:	strdeq	r3, [r1], -r8
   13790:	strdeq	r3, [r1], -r8
   13794:	strdeq	r3, [r1], -r8
   13798:	strdeq	r3, [r1], -r8
   1379c:	strdeq	r3, [r1], -r8
   137a0:	strdeq	r3, [r1], -r8
   137a4:	strdeq	r3, [r1], -r8
   137a8:	strdeq	r3, [r1], -r8
   137ac:	strdeq	r3, [r1], -r8
   137b0:	strdeq	r3, [r1], -r8
   137b4:	strdeq	r3, [r1], -r8
   137b8:	strdeq	r3, [r1], -r8
   137bc:	strdeq	r3, [r1], -r8
   137c0:	strdeq	r3, [r1], -r8
   137c4:	strdeq	r3, [r1], -r8
   137c8:	strdeq	r3, [r1], -r8
   137cc:	strdeq	r3, [r1], -r8
   137d0:	andeq	r3, r1, r4, ror r9
   137d4:	ldrdeq	r3, [r1], -ip
   137d8:	ldrdeq	r3, [r1], -ip
   137dc:	andeq	r3, r1, r8, asr r9
   137e0:	ldrdeq	r3, [r1], -ip
   137e4:	andeq	r3, r1, ip, asr #18
   137e8:	ldrdeq	r3, [r1], -ip
   137ec:	andeq	r3, r1, r8, lsr r1
   137f0:	ldrdeq	r3, [r1], -ip
   137f4:	ldrdeq	r3, [r1], -ip
   137f8:	ldrdeq	r3, [r1], -ip
   137fc:	andeq	r3, r1, ip, asr #18
   13800:	andeq	r3, r1, ip, asr #18
   13804:	andeq	r3, r1, ip, asr #18
   13808:	andeq	r3, r1, ip, asr #18
   1380c:	andeq	r3, r1, ip, asr #18
   13810:	andeq	r3, r1, ip, asr #18
   13814:	andeq	r3, r1, ip, asr #18
   13818:	andeq	r3, r1, ip, asr #18
   1381c:	andeq	r3, r1, ip, asr #18
   13820:	andeq	r3, r1, ip, asr #18
   13824:	andeq	r3, r1, ip, asr #18
   13828:	andeq	r3, r1, ip, asr #18
   1382c:	andeq	r3, r1, ip, asr #18
   13830:	andeq	r3, r1, ip, asr #18
   13834:	andeq	r3, r1, ip, asr #18
   13838:	andeq	r3, r1, ip, asr #18
   1383c:	ldrdeq	r3, [r1], -ip
   13840:	ldrdeq	r3, [r1], -ip
   13844:	ldrdeq	r3, [r1], -ip
   13848:	ldrdeq	r3, [r1], -ip
   1384c:	andeq	r3, r1, ip, lsl #2
   13850:	strdeq	r3, [r1], -r8
   13854:	andeq	r3, r1, ip, asr #18
   13858:	andeq	r3, r1, ip, asr #18
   1385c:	andeq	r3, r1, ip, asr #18
   13860:	andeq	r3, r1, ip, asr #18
   13864:	andeq	r3, r1, ip, asr #18
   13868:	andeq	r3, r1, ip, asr #18
   1386c:	andeq	r3, r1, ip, asr #18
   13870:	andeq	r3, r1, ip, asr #18
   13874:	andeq	r3, r1, ip, asr #18
   13878:	andeq	r3, r1, ip, asr #18
   1387c:	andeq	r3, r1, ip, asr #18
   13880:	andeq	r3, r1, ip, asr #18
   13884:	andeq	r3, r1, ip, asr #18
   13888:	andeq	r3, r1, ip, asr #18
   1388c:	andeq	r3, r1, ip, asr #18
   13890:	andeq	r3, r1, ip, asr #18
   13894:	andeq	r3, r1, ip, asr #18
   13898:	andeq	r3, r1, ip, asr #18
   1389c:	andeq	r3, r1, ip, asr #18
   138a0:	andeq	r3, r1, ip, asr #18
   138a4:	andeq	r3, r1, ip, asr #18
   138a8:	andeq	r3, r1, ip, asr #18
   138ac:	andeq	r3, r1, ip, asr #18
   138b0:	andeq	r3, r1, ip, asr #18
   138b4:	andeq	r3, r1, ip, asr #18
   138b8:	andeq	r3, r1, ip, asr #18
   138bc:	ldrdeq	r3, [r1], -ip
   138c0:	strheq	r3, [r1], -r4
   138c4:	andeq	r3, r1, ip, asr #18
   138c8:	ldrdeq	r3, [r1], -ip
   138cc:	andeq	r3, r1, ip, asr #18
   138d0:	ldrdeq	r3, [r1], -ip
   138d4:	andeq	r3, r1, ip, asr #18
   138d8:	andeq	r3, r1, ip, asr #18
   138dc:	andeq	r3, r1, ip, asr #18
   138e0:	andeq	r3, r1, ip, asr #18
   138e4:	andeq	r3, r1, ip, asr #18
   138e8:	andeq	r3, r1, ip, asr #18
   138ec:	andeq	r3, r1, ip, asr #18
   138f0:	andeq	r3, r1, ip, asr #18
   138f4:	andeq	r3, r1, ip, asr #18
   138f8:	andeq	r3, r1, ip, asr #18
   138fc:	andeq	r3, r1, ip, asr #18
   13900:	andeq	r3, r1, ip, asr #18
   13904:	andeq	r3, r1, ip, asr #18
   13908:	andeq	r3, r1, ip, asr #18
   1390c:	andeq	r3, r1, ip, asr #18
   13910:	andeq	r3, r1, ip, asr #18
   13914:	andeq	r3, r1, ip, asr #18
   13918:	andeq	r3, r1, ip, asr #18
   1391c:	andeq	r3, r1, ip, asr #18
   13920:	andeq	r3, r1, ip, asr #18
   13924:	andeq	r3, r1, ip, asr #18
   13928:	andeq	r3, r1, ip, asr #18
   1392c:	andeq	r3, r1, ip, asr #18
   13930:	andeq	r3, r1, ip, asr #18
   13934:	andeq	r3, r1, ip, asr #18
   13938:	andeq	r3, r1, ip, asr #18
   1393c:	ldrdeq	r2, [r1], -r8
   13940:	ldrdeq	r3, [r1], -ip
   13944:	ldrdeq	r2, [r1], -r8
   13948:	andeq	r3, r1, r8, asr r9
   1394c:	mov	r6, r7
   13950:	mov	r7, #0
   13954:	b	13104 <__assert_fail@plt+0x2240>
   13958:	cmp	r9, #0
   1395c:	mov	r2, #0
   13960:	beq	133c8 <__assert_fail@plt+0x2504>
   13964:	mov	r6, #0
   13968:	mov	r7, r2
   1396c:	mov	r3, r6
   13970:	b	12f24 <__assert_fail@plt+0x2060>
   13974:	mov	r2, #0
   13978:	b	133dc <__assert_fail@plt+0x2518>
   1397c:	mov	r7, #0
   13980:	mov	r3, #118	; 0x76
   13984:	b	130e8 <__assert_fail@plt+0x2224>
   13988:	mov	r7, #0
   1398c:	mov	r3, #116	; 0x74
   13990:	b	13218 <__assert_fail@plt+0x2354>
   13994:	ldr	r3, [sp, #44]	; 0x2c
   13998:	b	12f4c <__assert_fail@plt+0x2088>
   1399c:	ldr	r3, [sp, #44]	; 0x2c
   139a0:	cmp	r3, #0
   139a4:	bne	13e14 <__assert_fail@plt+0x2f50>
   139a8:	add	r9, r9, #1
   139ac:	mov	r6, #0
   139b0:	ldr	r3, [sp, #48]	; 0x30
   139b4:	mov	r5, #92	; 0x5c
   139b8:	b	131d8 <__assert_fail@plt+0x2314>
   139bc:	ldr	r3, [sp, #32]
   139c0:	ldrb	r2, [r3, #1]
   139c4:	adds	r2, r2, #0
   139c8:	movne	r2, #1
   139cc:	b	12ef4 <__assert_fail@plt+0x2030>
   139d0:	ldr	r3, [sp, #156]	; 0x9c
   139d4:	ands	r3, r3, #4
   139d8:	beq	13a00 <__assert_fail@plt+0x2b3c>
   139dc:	ldr	r2, [sp, #28]
   139e0:	add	r3, r9, #2
   139e4:	cmp	r3, r2
   139e8:	bcs	139fc <__assert_fail@plt+0x2b38>
   139ec:	ldr	r2, [sp, #52]	; 0x34
   139f0:	ldrb	r5, [r2, #1]
   139f4:	cmp	r5, #63	; 0x3f
   139f8:	beq	13e78 <__assert_fail@plt+0x2fb4>
   139fc:	mov	r3, #0
   13a00:	mov	r5, #63	; 0x3f
   13a04:	mov	r6, r3
   13a08:	b	12f14 <__assert_fail@plt+0x2050>
   13a0c:	ldr	r3, [sp, #44]	; 0x2c
   13a10:	cmp	r3, #0
   13a14:	bne	13e14 <__assert_fail@plt+0x2f50>
   13a18:	mov	r6, r3
   13a1c:	mov	r5, #63	; 0x3f
   13a20:	b	12f4c <__assert_fail@plt+0x2088>
   13a24:	ldr	r1, [sp, #28]
   13a28:	mov	r2, #0
   13a2c:	mov	r3, #0
   13a30:	strd	r2, [sp, #104]	; 0x68
   13a34:	cmn	r1, #1
   13a38:	bne	13a48 <__assert_fail@plt+0x2b84>
   13a3c:	ldr	r0, [sp, #32]
   13a40:	bl	10dd4 <strlen@plt>
   13a44:	str	r0, [sp, #28]
   13a48:	str	r8, [sp, #76]	; 0x4c
   13a4c:	mov	r3, #0
   13a50:	str	sl, [sp, #80]	; 0x50
   13a54:	ldr	sl, [sp, #32]
   13a58:	str	r5, [sp, #84]	; 0x54
   13a5c:	mov	r5, r3
   13a60:	ldr	r8, [sp, #44]	; 0x2c
   13a64:	str	r7, [sp, #88]	; 0x58
   13a68:	str	r4, [sp, #92]	; 0x5c
   13a6c:	ldr	r2, [sp, #28]
   13a70:	add	r4, r9, r5
   13a74:	add	r3, sp, #104	; 0x68
   13a78:	add	r7, sl, r4
   13a7c:	add	r0, sp, #100	; 0x64
   13a80:	mov	r1, r7
   13a84:	sub	r2, r2, r4
   13a88:	bl	15650 <__assert_fail@plt+0x478c>
   13a8c:	subs	r1, r0, #0
   13a90:	beq	13adc <__assert_fail@plt+0x2c18>
   13a94:	cmn	r1, #1
   13a98:	beq	13e54 <__assert_fail@plt+0x2f90>
   13a9c:	cmn	r1, #2
   13aa0:	beq	13f74 <__assert_fail@plt+0x30b0>
   13aa4:	cmp	fp, #2
   13aa8:	movne	r3, #0
   13aac:	andeq	r3, r8, #1
   13ab0:	cmp	r3, #0
   13ab4:	bne	13c40 <__assert_fail@plt+0x2d7c>
   13ab8:	ldr	r0, [sp, #100]	; 0x64
   13abc:	add	r5, r5, r1
   13ac0:	bl	10d2c <iswprint@plt>
   13ac4:	cmp	r0, #0
   13ac8:	add	r0, sp, #104	; 0x68
   13acc:	moveq	r6, #0
   13ad0:	bl	10cd8 <mbsinit@plt>
   13ad4:	cmp	r0, #0
   13ad8:	beq	13a6c <__assert_fail@plt+0x2ba8>
   13adc:	ldr	r3, [sp, #40]	; 0x28
   13ae0:	mov	ip, r5
   13ae4:	eor	r2, r6, #1
   13ae8:	ldr	r8, [sp, #76]	; 0x4c
   13aec:	ldr	sl, [sp, #80]	; 0x50
   13af0:	and	r2, r2, r3
   13af4:	ldr	r5, [sp, #84]	; 0x54
   13af8:	ldr	r7, [sp, #88]	; 0x58
   13afc:	ldr	r4, [sp, #92]	; 0x5c
   13b00:	cmp	ip, #1
   13b04:	bls	13440 <__assert_fail@plt+0x257c>
   13b08:	add	r1, ip, r9
   13b0c:	mov	r0, #39	; 0x27
   13b10:	ldr	lr, [sp, #52]	; 0x34
   13b14:	mov	ip, #0
   13b18:	str	r6, [sp, #52]	; 0x34
   13b1c:	ldr	r6, [sp, #48]	; 0x30
   13b20:	b	13bdc <__assert_fail@plt+0x2d18>
   13b24:	ldr	ip, [sp, #44]	; 0x2c
   13b28:	sub	r3, fp, #2
   13b2c:	clz	r3, r3
   13b30:	lsr	r3, r3, #5
   13b34:	cmp	ip, #0
   13b38:	bne	13d4c <__assert_fail@plt+0x2e88>
   13b3c:	eor	ip, r6, #1
   13b40:	ands	r3, r3, ip
   13b44:	beq	13b74 <__assert_fail@plt+0x2cb0>
   13b48:	cmp	sl, r4
   13b4c:	add	ip, r4, #1
   13b50:	strbhi	r0, [r8, r4]
   13b54:	cmp	sl, ip
   13b58:	movhi	r6, #36	; 0x24
   13b5c:	strbhi	r6, [r8, ip]
   13b60:	add	ip, r4, #2
   13b64:	mov	r6, r3
   13b68:	cmp	sl, ip
   13b6c:	add	r4, r4, #3
   13b70:	strbhi	r0, [r8, ip]
   13b74:	cmp	sl, r4
   13b78:	movhi	r3, #92	; 0x5c
   13b7c:	strbhi	r3, [r8, r4]
   13b80:	add	r3, r4, #1
   13b84:	cmp	sl, r3
   13b88:	bls	13b98 <__assert_fail@plt+0x2cd4>
   13b8c:	lsr	ip, r5, #6
   13b90:	add	ip, ip, #48	; 0x30
   13b94:	strb	ip, [r8, r3]
   13b98:	add	r3, r4, #2
   13b9c:	cmp	sl, r3
   13ba0:	bls	13bb0 <__assert_fail@plt+0x2cec>
   13ba4:	ubfx	ip, r5, #3, #3
   13ba8:	add	ip, ip, #48	; 0x30
   13bac:	strb	ip, [r8, r3]
   13bb0:	add	r9, r9, #1
   13bb4:	and	r5, r5, #7
   13bb8:	cmp	r9, r1
   13bbc:	add	r5, r5, #48	; 0x30
   13bc0:	add	r4, r4, #3
   13bc4:	bcs	13d78 <__assert_fail@plt+0x2eb4>
   13bc8:	mov	ip, r2
   13bcc:	cmp	sl, r4
   13bd0:	strbhi	r5, [r8, r4]
   13bd4:	add	r4, r4, #1
   13bd8:	ldrb	r5, [lr, #1]!
   13bdc:	cmp	r2, #0
   13be0:	bne	13b24 <__assert_fail@plt+0x2c60>
   13be4:	eor	r3, ip, #1
   13be8:	cmp	r7, #0
   13bec:	and	r3, r3, r6
   13bf0:	uxtb	r3, r3
   13bf4:	beq	13c08 <__assert_fail@plt+0x2d44>
   13bf8:	cmp	sl, r4
   13bfc:	movhi	r7, #92	; 0x5c
   13c00:	strbhi	r7, [r8, r4]
   13c04:	add	r4, r4, #1
   13c08:	add	r9, r9, #1
   13c0c:	cmp	r9, r1
   13c10:	bcs	13d60 <__assert_fail@plt+0x2e9c>
   13c14:	cmp	r3, #0
   13c18:	beq	13d98 <__assert_fail@plt+0x2ed4>
   13c1c:	cmp	sl, r4
   13c20:	add	r3, r4, #1
   13c24:	mov	r7, #0
   13c28:	strbhi	r0, [r8, r4]
   13c2c:	cmp	sl, r3
   13c30:	add	r4, r4, #2
   13c34:	mov	r6, r7
   13c38:	strbhi	r0, [r8, r3]
   13c3c:	b	13bcc <__assert_fail@plt+0x2d08>
   13c40:	cmp	r1, #1
   13c44:	beq	13ab8 <__assert_fail@plt+0x2bf4>
   13c48:	add	r2, r4, #1
   13c4c:	add	r3, sl, r1
   13c50:	add	r2, sl, r2
   13c54:	add	r4, r3, r4
   13c58:	ldrb	r3, [r2], #1
   13c5c:	sub	r3, r3, #91	; 0x5b
   13c60:	cmp	r3, #33	; 0x21
   13c64:	ldrls	pc, [pc, r3, lsl #2]
   13c68:	b	13cf4 <__assert_fail@plt+0x2e30>
   13c6c:	andeq	r3, r1, r0, lsl #26
   13c70:	andeq	r3, r1, r0, lsl #26
   13c74:	strdeq	r3, [r1], -r4
   13c78:	andeq	r3, r1, r0, lsl #26
   13c7c:	strdeq	r3, [r1], -r4
   13c80:	andeq	r3, r1, r0, lsl #26
   13c84:	strdeq	r3, [r1], -r4
   13c88:	strdeq	r3, [r1], -r4
   13c8c:	strdeq	r3, [r1], -r4
   13c90:	strdeq	r3, [r1], -r4
   13c94:	strdeq	r3, [r1], -r4
   13c98:	strdeq	r3, [r1], -r4
   13c9c:	strdeq	r3, [r1], -r4
   13ca0:	strdeq	r3, [r1], -r4
   13ca4:	strdeq	r3, [r1], -r4
   13ca8:	strdeq	r3, [r1], -r4
   13cac:	strdeq	r3, [r1], -r4
   13cb0:	strdeq	r3, [r1], -r4
   13cb4:	strdeq	r3, [r1], -r4
   13cb8:	strdeq	r3, [r1], -r4
   13cbc:	strdeq	r3, [r1], -r4
   13cc0:	strdeq	r3, [r1], -r4
   13cc4:	strdeq	r3, [r1], -r4
   13cc8:	strdeq	r3, [r1], -r4
   13ccc:	strdeq	r3, [r1], -r4
   13cd0:	strdeq	r3, [r1], -r4
   13cd4:	strdeq	r3, [r1], -r4
   13cd8:	strdeq	r3, [r1], -r4
   13cdc:	strdeq	r3, [r1], -r4
   13ce0:	strdeq	r3, [r1], -r4
   13ce4:	strdeq	r3, [r1], -r4
   13ce8:	strdeq	r3, [r1], -r4
   13cec:	strdeq	r3, [r1], -r4
   13cf0:	andeq	r3, r1, r0, lsl #26
   13cf4:	cmp	r4, r2
   13cf8:	bne	13c58 <__assert_fail@plt+0x2d94>
   13cfc:	b	13ab8 <__assert_fail@plt+0x2bf4>
   13d00:	mov	r8, #2
   13d04:	ldr	fp, [sp, #76]	; 0x4c
   13d08:	ldr	sl, [sp, #80]	; 0x50
   13d0c:	b	13238 <__assert_fail@plt+0x2374>
   13d10:	ldr	r2, [sp, #40]	; 0x28
   13d14:	str	fp, [sp, #152]	; 0x98
   13d18:	mov	fp, r8
   13d1c:	ldr	r8, [sp, #152]	; 0x98
   13d20:	and	r2, r2, r3
   13d24:	str	r2, [sp, #40]	; 0x28
   13d28:	b	13238 <__assert_fail@plt+0x2374>
   13d2c:	cmp	sl, r4
   13d30:	movls	r0, r4
   13d34:	bls	13368 <__assert_fail@plt+0x24a4>
   13d38:	ldr	r3, [sp, #48]	; 0x30
   13d3c:	b	13358 <__assert_fail@plt+0x2494>
   13d40:	str	sl, [sp, #72]	; 0x48
   13d44:	ldr	sl, [sp, #44]	; 0x2c
   13d48:	b	131a8 <__assert_fail@plt+0x22e4>
   13d4c:	str	r3, [sp, #40]	; 0x28
   13d50:	str	fp, [sp, #152]	; 0x98
   13d54:	mov	fp, r8
   13d58:	ldr	r8, [sp, #152]	; 0x98
   13d5c:	b	13238 <__assert_fail@plt+0x2374>
   13d60:	str	r6, [sp, #48]	; 0x30
   13d64:	ldr	r6, [sp, #52]	; 0x34
   13d68:	b	131d8 <__assert_fail@plt+0x2314>
   13d6c:	mov	r6, #0
   13d70:	ldr	r2, [sp, #40]	; 0x28
   13d74:	b	13b08 <__assert_fail@plt+0x2c44>
   13d78:	str	r6, [sp, #48]	; 0x30
   13d7c:	ldr	r6, [sp, #52]	; 0x34
   13d80:	b	12fc4 <__assert_fail@plt+0x2100>
   13d84:	add	r4, r4, #4
   13d88:	mov	r6, #0
   13d8c:	str	r3, [sp, #48]	; 0x30
   13d90:	mov	r5, #48	; 0x30
   13d94:	b	12f4c <__assert_fail@plt+0x2088>
   13d98:	mov	r7, r3
   13d9c:	b	13bcc <__assert_fail@plt+0x2d08>
   13da0:	mov	r3, #1
   13da4:	movw	r2, #25380	; 0x6324
   13da8:	movt	r2, #1
   13dac:	mov	r4, r3
   13db0:	str	r3, [sp, #36]	; 0x24
   13db4:	str	r3, [sp, #40]	; 0x28
   13db8:	str	sl, [sp, #44]	; 0x2c
   13dbc:	str	sl, [sp, #48]	; 0x30
   13dc0:	str	r3, [sp, #56]	; 0x38
   13dc4:	str	r2, [sp, #60]	; 0x3c
   13dc8:	str	sl, [sp, #68]	; 0x44
   13dcc:	str	sl, [sp, #72]	; 0x48
   13dd0:	b	12a74 <__assert_fail@plt+0x1bb0>
   13dd4:	mov	r3, r6
   13dd8:	mov	r5, #48	; 0x30
   13ddc:	mov	r6, #0
   13de0:	b	12f4c <__assert_fail@plt+0x2088>
   13de4:	mov	r5, r3
   13de8:	b	132c4 <__assert_fail@plt+0x2400>
   13dec:	cmp	sl, r4
   13df0:	mov	r5, #48	; 0x30
   13df4:	movhi	r3, #48	; 0x30
   13df8:	strbhi	r3, [r8, r4]
   13dfc:	add	r3, r0, #2
   13e00:	add	r4, r0, #3
   13e04:	cmp	sl, r3
   13e08:	movhi	r1, #48	; 0x30
   13e0c:	strbhi	r1, [r8, r3]
   13e10:	b	1339c <__assert_fail@plt+0x24d8>
   13e14:	str	fp, [sp, #152]	; 0x98
   13e18:	mov	fp, r8
   13e1c:	ldr	r8, [sp, #152]	; 0x98
   13e20:	b	13238 <__assert_fail@plt+0x2374>
   13e24:	ldr	r3, [sp, #164]	; 0xa4
   13e28:	ldrb	r3, [r3]
   13e2c:	cmp	r3, #0
   13e30:	beq	12a44 <__assert_fail@plt+0x1b80>
   13e34:	ldr	r2, [sp, #164]	; 0xa4
   13e38:	cmp	sl, r4
   13e3c:	strbhi	r3, [fp, r4]
   13e40:	add	r4, r4, #1
   13e44:	ldrb	r3, [r2, #1]!
   13e48:	cmp	r3, #0
   13e4c:	bne	13e38 <__assert_fail@plt+0x2f74>
   13e50:	b	12a44 <__assert_fail@plt+0x1b80>
   13e54:	mov	ip, r5
   13e58:	mov	r6, #0
   13e5c:	ldr	r2, [sp, #40]	; 0x28
   13e60:	ldr	r8, [sp, #76]	; 0x4c
   13e64:	ldr	sl, [sp, #80]	; 0x50
   13e68:	ldr	r5, [sp, #84]	; 0x54
   13e6c:	ldr	r7, [sp, #88]	; 0x58
   13e70:	ldr	r4, [sp, #92]	; 0x5c
   13e74:	b	13b00 <__assert_fail@plt+0x2c3c>
   13e78:	ldr	r2, [sp, #32]
   13e7c:	ldrb	r1, [r2, r3]
   13e80:	sub	r2, r1, #33	; 0x21
   13e84:	cmp	r2, #29
   13e88:	ldrls	pc, [pc, r2, lsl #2]
   13e8c:	b	13f68 <__assert_fail@plt+0x30a4>
   13e90:	andeq	r3, r1, r8, lsl #30
   13e94:	andeq	r3, r1, r8, ror #30
   13e98:	andeq	r3, r1, r8, ror #30
   13e9c:	andeq	r3, r1, r8, ror #30
   13ea0:	andeq	r3, r1, r8, ror #30
   13ea4:	andeq	r3, r1, r8, ror #30
   13ea8:	andeq	r3, r1, r8, lsl #30
   13eac:	andeq	r3, r1, r8, lsl #30
   13eb0:	andeq	r3, r1, r8, lsl #30
   13eb4:	andeq	r3, r1, r8, ror #30
   13eb8:	andeq	r3, r1, r8, ror #30
   13ebc:	andeq	r3, r1, r8, ror #30
   13ec0:	andeq	r3, r1, r8, lsl #30
   13ec4:	andeq	r3, r1, r8, ror #30
   13ec8:	andeq	r3, r1, r8, lsl #30
   13ecc:	andeq	r3, r1, r8, ror #30
   13ed0:	andeq	r3, r1, r8, ror #30
   13ed4:	andeq	r3, r1, r8, ror #30
   13ed8:	andeq	r3, r1, r8, ror #30
   13edc:	andeq	r3, r1, r8, ror #30
   13ee0:	andeq	r3, r1, r8, ror #30
   13ee4:	andeq	r3, r1, r8, ror #30
   13ee8:	andeq	r3, r1, r8, ror #30
   13eec:	andeq	r3, r1, r8, ror #30
   13ef0:	andeq	r3, r1, r8, ror #30
   13ef4:	andeq	r3, r1, r8, ror #30
   13ef8:	andeq	r3, r1, r8, ror #30
   13efc:	andeq	r3, r1, r8, lsl #30
   13f00:	andeq	r3, r1, r8, lsl #30
   13f04:	andeq	r3, r1, r8, lsl #30
   13f08:	ldr	r2, [sp, #44]	; 0x2c
   13f0c:	cmp	r2, #0
   13f10:	bne	1406c <__assert_fail@plt+0x31a8>
   13f14:	cmp	sl, r4
   13f18:	mov	r5, r1
   13f1c:	movhi	r2, #63	; 0x3f
   13f20:	mov	r9, r3
   13f24:	strbhi	r2, [r8, r4]
   13f28:	add	r2, r4, #1
   13f2c:	cmp	sl, r2
   13f30:	movhi	r0, #34	; 0x22
   13f34:	strbhi	r0, [r8, r2]
   13f38:	add	r2, r4, #2
   13f3c:	cmp	sl, r2
   13f40:	movhi	r0, #34	; 0x22
   13f44:	strbhi	r0, [r8, r2]
   13f48:	add	r2, r4, #3
   13f4c:	add	r4, r4, #4
   13f50:	cmp	sl, r2
   13f54:	movhi	r0, #63	; 0x3f
   13f58:	strbhi	r0, [r8, r2]
   13f5c:	mov	r2, #0
   13f60:	mov	r6, r2
   13f64:	b	1339c <__assert_fail@plt+0x24d8>
   13f68:	mov	r3, #0
   13f6c:	mov	r6, r3
   13f70:	b	12f14 <__assert_fail@plt+0x2050>
   13f74:	ldr	r0, [sp, #28]
   13f78:	mov	r1, r4
   13f7c:	mov	r2, r7
   13f80:	mov	r3, r5
   13f84:	mov	ip, r5
   13f88:	ldr	r8, [sp, #76]	; 0x4c
   13f8c:	ldr	sl, [sp, #80]	; 0x50
   13f90:	cmp	r1, r0
   13f94:	ldr	r5, [sp, #84]	; 0x54
   13f98:	ldr	r7, [sp, #88]	; 0x58
   13f9c:	ldr	r4, [sp, #92]	; 0x5c
   13fa0:	bcs	13fd4 <__assert_fail@plt+0x3110>
   13fa4:	ldrb	r6, [r2]
   13fa8:	cmp	r6, #0
   13fac:	bne	13fc0 <__assert_fail@plt+0x30fc>
   13fb0:	b	140f4 <__assert_fail@plt+0x3230>
   13fb4:	ldrb	r6, [r2, #1]!
   13fb8:	cmp	r6, #0
   13fbc:	beq	1407c <__assert_fail@plt+0x31b8>
   13fc0:	add	r3, r3, #1
   13fc4:	add	r1, r9, r3
   13fc8:	cmp	r1, r0
   13fcc:	bcc	13fb4 <__assert_fail@plt+0x30f0>
   13fd0:	mov	ip, r3
   13fd4:	mov	r6, #0
   13fd8:	ldr	r2, [sp, #40]	; 0x28
   13fdc:	b	13b00 <__assert_fail@plt+0x2c3c>
   13fe0:	mov	r3, #1
   13fe4:	mov	r2, #0
   13fe8:	mov	r4, r2
   13fec:	str	r3, [sp, #36]	; 0x24
   13ff0:	str	r3, [sp, #40]	; 0x28
   13ff4:	str	r3, [sp, #44]	; 0x2c
   13ff8:	str	r2, [sp, #48]	; 0x30
   13ffc:	str	r3, [sp, #56]	; 0x38
   14000:	movw	r3, #25380	; 0x6324
   14004:	movt	r3, #1
   14008:	str	r3, [sp, #60]	; 0x3c
   1400c:	str	r2, [sp, #68]	; 0x44
   14010:	str	r2, [sp, #72]	; 0x48
   14014:	b	12a74 <__assert_fail@plt+0x1bb0>
   14018:	mov	r2, r3
   1401c:	ldr	r3, [sp, #60]	; 0x3c
   14020:	cmp	r3, #0
   14024:	moveq	r2, #0
   14028:	andne	r2, r2, #1
   1402c:	cmp	r2, #0
   14030:	beq	1405c <__assert_fail@plt+0x3198>
   14034:	mov	r2, r3
   14038:	ldrb	r3, [r3]
   1403c:	cmp	r3, #0
   14040:	beq	1405c <__assert_fail@plt+0x3198>
   14044:	cmp	sl, r4
   14048:	strbhi	r3, [fp, r4]
   1404c:	add	r4, r4, #1
   14050:	ldrb	r3, [r2, #1]!
   14054:	cmp	r3, #0
   14058:	bne	14044 <__assert_fail@plt+0x3180>
   1405c:	cmp	sl, r4
   14060:	movhi	r3, #0
   14064:	strbhi	r3, [fp, r4]
   14068:	b	1327c <__assert_fail@plt+0x23b8>
   1406c:	str	fp, [sp, #152]	; 0x98
   14070:	mov	fp, r8
   14074:	ldr	r8, [sp, #152]	; 0x98
   14078:	b	13244 <__assert_fail@plt+0x2380>
   1407c:	mov	ip, r3
   14080:	ldr	r2, [sp, #40]	; 0x28
   14084:	b	13b00 <__assert_fail@plt+0x2c3c>
   14088:	str	fp, [sp, #152]	; 0x98
   1408c:	mov	fp, r8
   14090:	ldr	r8, [sp, #152]	; 0x98
   14094:	sub	r3, r8, #2
   14098:	clz	r3, r3
   1409c:	lsr	r3, r3, #5
   140a0:	str	r3, [sp, #40]	; 0x28
   140a4:	b	13238 <__assert_fail@plt+0x2374>
   140a8:	mov	ip, #5
   140ac:	ldr	r3, [sp, #28]
   140b0:	str	ip, [sp]
   140b4:	ldr	r2, [sp, #156]	; 0x9c
   140b8:	ldr	ip, [sp, #164]	; 0xa4
   140bc:	ldr	r0, [sp, #160]	; 0xa0
   140c0:	str	r2, [sp, #4]
   140c4:	ldr	r2, [sp, #32]
   140c8:	ldr	r1, [sp, #72]	; 0x48
   140cc:	str	ip, [sp, #12]
   140d0:	ldr	ip, [sp, #168]	; 0xa8
   140d4:	str	r0, [sp, #8]
   140d8:	mov	r0, fp
   140dc:	str	ip, [sp, #16]
   140e0:	bl	1298c <__assert_fail@plt+0x1ac8>
   140e4:	mov	r4, r0
   140e8:	b	1327c <__assert_fail@plt+0x23b8>
   140ec:	mov	r8, #2
   140f0:	b	13238 <__assert_fail@plt+0x2374>
   140f4:	ldr	r2, [sp, #40]	; 0x28
   140f8:	b	13b00 <__assert_fail@plt+0x2c3c>
   140fc:	mov	r3, #0
   14100:	mov	r2, #1
   14104:	mov	r4, r3
   14108:	strd	r2, [sp, #36]	; 0x24
   1410c:	strd	r2, [sp, #44]	; 0x2c
   14110:	str	r2, [sp, #56]	; 0x38
   14114:	str	r3, [sp, #68]	; 0x44
   14118:	str	r3, [sp, #72]	; 0x48
   1411c:	movw	r3, #25400	; 0x6338
   14120:	movt	r3, #1
   14124:	str	r3, [sp, #60]	; 0x3c
   14128:	b	12a74 <__assert_fail@plt+0x1bb0>
   1412c:	mov	r3, #0
   14130:	mov	r1, #1
   14134:	mov	r2, r3
   14138:	str	r1, [sp, #36]	; 0x24
   1413c:	str	r3, [sp, #48]	; 0x30
   14140:	str	sl, [sp, #72]	; 0x48
   14144:	b	1307c <__assert_fail@plt+0x21b8>
   14148:	bl	10eac <abort@plt>
   1414c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14150:	mov	r4, r0
   14154:	mov	r5, r3
   14158:	strd	r6, [sp, #8]
   1415c:	movw	r7, #28916	; 0x70f4
   14160:	movt	r7, #2
   14164:	strd	r8, [sp, #16]
   14168:	strd	sl, [sp, #24]
   1416c:	mov	sl, r1
   14170:	mov	fp, r2
   14174:	str	lr, [sp, #32]
   14178:	sub	sp, sp, #60	; 0x3c
   1417c:	bl	10de0 <__errno_location@plt>
   14180:	mov	r8, r0
   14184:	cmn	r4, #-2147483647	; 0x80000001
   14188:	ldr	r6, [r7]
   1418c:	movne	r0, #0
   14190:	moveq	r0, #1
   14194:	ldr	r3, [r8]
   14198:	orrs	r0, r0, r4, lsr #31
   1419c:	str	r3, [sp, #28]
   141a0:	bne	14330 <__assert_fail@plt+0x346c>
   141a4:	ldr	r3, [r7, #4]
   141a8:	cmp	r3, r4
   141ac:	bgt	1420c <__assert_fail@plt+0x3348>
   141b0:	add	r1, r7, #8
   141b4:	sub	r2, r4, r3
   141b8:	str	r3, [sp, #52]	; 0x34
   141bc:	cmp	r6, r1
   141c0:	add	r2, r2, #1
   141c4:	beq	14308 <__assert_fail@plt+0x3444>
   141c8:	mov	r1, #8
   141cc:	mov	r0, r6
   141d0:	mvn	r3, #-2147483648	; 0x80000000
   141d4:	str	r1, [sp]
   141d8:	add	r1, sp, #52	; 0x34
   141dc:	bl	151b0 <__assert_fail@plt+0x42ec>
   141e0:	mov	r6, r0
   141e4:	str	r0, [r7]
   141e8:	ldr	r0, [r7, #4]
   141ec:	mov	r1, #0
   141f0:	ldr	r2, [sp, #52]	; 0x34
   141f4:	sub	r2, r2, r0
   141f8:	add	r0, r6, r0, lsl #3
   141fc:	lsl	r2, r2, #3
   14200:	bl	10df8 <memset@plt>
   14204:	ldr	r3, [sp, #52]	; 0x34
   14208:	str	r3, [r7, #4]
   1420c:	ldr	r1, [r5, #4]
   14210:	add	r0, r6, r4, lsl #3
   14214:	add	ip, r5, #8
   14218:	mov	r3, fp
   1421c:	mov	r2, sl
   14220:	ldr	r7, [r0, #4]
   14224:	str	r0, [sp, #36]	; 0x24
   14228:	str	ip, [sp, #40]	; 0x28
   1422c:	orr	r0, r1, #1
   14230:	ldr	r9, [r6, r4, lsl #3]
   14234:	str	ip, [sp, #8]
   14238:	ldr	lr, [r5, #44]	; 0x2c
   1423c:	str	r0, [sp, #4]
   14240:	ldr	ip, [r5]
   14244:	mov	r1, r9
   14248:	str	ip, [sp, #32]
   1424c:	ldr	ip, [r5, #40]	; 0x28
   14250:	str	ip, [sp, #12]
   14254:	ldr	ip, [sp, #32]
   14258:	str	lr, [sp, #16]
   1425c:	str	r0, [sp, #44]	; 0x2c
   14260:	mov	r0, r7
   14264:	str	ip, [sp]
   14268:	bl	1298c <__assert_fail@plt+0x1ac8>
   1426c:	cmp	r9, r0
   14270:	bhi	142e0 <__assert_fail@plt+0x341c>
   14274:	add	r9, r0, #1
   14278:	movw	r3, #29096	; 0x71a8
   1427c:	movt	r3, #2
   14280:	cmp	r7, r3
   14284:	str	r9, [r6, r4, lsl #3]
   14288:	beq	14294 <__assert_fail@plt+0x33d0>
   1428c:	mov	r0, r7
   14290:	bl	125ec <__assert_fail@plt+0x1728>
   14294:	mov	r0, r9
   14298:	bl	15000 <__assert_fail@plt+0x413c>
   1429c:	ldr	ip, [r5]
   142a0:	mov	r3, fp
   142a4:	mov	r2, sl
   142a8:	mov	r1, r9
   142ac:	mov	r7, r0
   142b0:	ldr	lr, [sp, #36]	; 0x24
   142b4:	ldr	r4, [r5, #40]	; 0x28
   142b8:	str	r0, [lr, #4]
   142bc:	ldr	lr, [r5, #44]	; 0x2c
   142c0:	str	ip, [sp]
   142c4:	ldr	ip, [sp, #44]	; 0x2c
   142c8:	str	ip, [sp, #4]
   142cc:	ldr	ip, [sp, #40]	; 0x28
   142d0:	str	r4, [sp, #12]
   142d4:	str	lr, [sp, #16]
   142d8:	str	ip, [sp, #8]
   142dc:	bl	1298c <__assert_fail@plt+0x1ac8>
   142e0:	ldr	r3, [sp, #28]
   142e4:	mov	r0, r7
   142e8:	str	r3, [r8]
   142ec:	add	sp, sp, #60	; 0x3c
   142f0:	ldrd	r4, [sp]
   142f4:	ldrd	r6, [sp, #8]
   142f8:	ldrd	r8, [sp, #16]
   142fc:	ldrd	sl, [sp, #24]
   14300:	add	sp, sp, #32
   14304:	pop	{pc}		; (ldr pc, [sp], #4)
   14308:	mov	r1, #8
   1430c:	mvn	r3, #-2147483648	; 0x80000000
   14310:	str	r1, [sp]
   14314:	add	r1, sp, #52	; 0x34
   14318:	bl	151b0 <__assert_fail@plt+0x42ec>
   1431c:	ldrd	r2, [r7, #8]
   14320:	mov	r6, r0
   14324:	str	r0, [r7]
   14328:	strd	r2, [r0]
   1432c:	b	141e8 <__assert_fail@plt+0x3324>
   14330:	bl	10eac <abort@plt>
   14334:	strd	r4, [sp, #-16]!
   14338:	mov	r5, r0
   1433c:	str	r6, [sp, #8]
   14340:	str	lr, [sp, #12]
   14344:	bl	10de0 <__errno_location@plt>
   14348:	mov	r4, r0
   1434c:	cmp	r5, #0
   14350:	ldr	r0, [pc, #32]	; 14378 <__assert_fail@plt+0x34b4>
   14354:	mov	r1, #48	; 0x30
   14358:	movne	r0, r5
   1435c:	ldr	r6, [r4]
   14360:	bl	15328 <__assert_fail@plt+0x4464>
   14364:	str	r6, [r4]
   14368:	ldrd	r4, [sp]
   1436c:	ldr	r6, [sp, #8]
   14370:	add	sp, sp, #12
   14374:	pop	{pc}		; (ldr pc, [sp], #4)
   14378:	andeq	r7, r2, r8, lsr #5
   1437c:	ldr	r3, [pc, #12]	; 14390 <__assert_fail@plt+0x34cc>
   14380:	cmp	r0, #0
   14384:	moveq	r0, r3
   14388:	ldr	r0, [r0]
   1438c:	bx	lr
   14390:	andeq	r7, r2, r8, lsr #5
   14394:	ldr	r3, [pc, #12]	; 143a8 <__assert_fail@plt+0x34e4>
   14398:	cmp	r0, #0
   1439c:	moveq	r0, r3
   143a0:	str	r1, [r0]
   143a4:	bx	lr
   143a8:	andeq	r7, r2, r8, lsr #5
   143ac:	ldr	r3, [pc, #52]	; 143e8 <__assert_fail@plt+0x3524>
   143b0:	cmp	r0, #0
   143b4:	push	{lr}		; (str lr, [sp, #-4]!)
   143b8:	lsr	lr, r1, #5
   143bc:	and	r1, r1, #31
   143c0:	moveq	r0, r3
   143c4:	add	r3, r0, #8
   143c8:	ldr	ip, [r3, lr, lsl #2]
   143cc:	lsr	r0, ip, r1
   143d0:	eor	r2, r2, r0
   143d4:	and	r0, r0, #1
   143d8:	and	r2, r2, #1
   143dc:	eor	r1, ip, r2, lsl r1
   143e0:	str	r1, [r3, lr, lsl #2]
   143e4:	pop	{pc}		; (ldr pc, [sp], #4)
   143e8:	andeq	r7, r2, r8, lsr #5
   143ec:	ldr	r3, [pc, #16]	; 14404 <__assert_fail@plt+0x3540>
   143f0:	cmp	r0, #0
   143f4:	movne	r3, r0
   143f8:	ldr	r0, [r3, #4]
   143fc:	str	r1, [r3, #4]
   14400:	bx	lr
   14404:	andeq	r7, r2, r8, lsr #5
   14408:	ldr	r3, [pc, #48]	; 14440 <__assert_fail@plt+0x357c>
   1440c:	cmp	r0, #0
   14410:	mov	ip, #10
   14414:	moveq	r0, r3
   14418:	cmp	r2, #0
   1441c:	cmpne	r1, #0
   14420:	str	ip, [r0]
   14424:	beq	14434 <__assert_fail@plt+0x3570>
   14428:	str	r1, [r0, #40]	; 0x28
   1442c:	str	r2, [r0, #44]	; 0x2c
   14430:	bx	lr
   14434:	str	r4, [sp, #-8]!
   14438:	str	lr, [sp, #4]
   1443c:	bl	10eac <abort@plt>
   14440:	andeq	r7, r2, r8, lsr #5
   14444:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14448:	strd	r6, [sp, #8]
   1444c:	mov	r7, r0
   14450:	mov	r6, r1
   14454:	strd	r8, [sp, #16]
   14458:	mov	r8, r2
   1445c:	mov	r9, r3
   14460:	str	lr, [sp, #24]
   14464:	sub	sp, sp, #28
   14468:	ldr	r4, [sp, #56]	; 0x38
   1446c:	ldr	ip, [pc, #104]	; 144dc <__assert_fail@plt+0x3618>
   14470:	cmp	r4, #0
   14474:	moveq	r4, ip
   14478:	bl	10de0 <__errno_location@plt>
   1447c:	ldr	ip, [r4, #44]	; 0x2c
   14480:	mov	r5, r0
   14484:	mov	r1, r6
   14488:	add	lr, r4, #8
   1448c:	mov	r3, r9
   14490:	ldr	r6, [r5]
   14494:	mov	r2, r8
   14498:	mov	r0, r7
   1449c:	str	ip, [sp, #16]
   144a0:	ldr	ip, [r4, #40]	; 0x28
   144a4:	str	lr, [sp, #8]
   144a8:	str	ip, [sp, #12]
   144ac:	ldr	ip, [r4, #4]
   144b0:	str	ip, [sp, #4]
   144b4:	ldr	ip, [r4]
   144b8:	str	ip, [sp]
   144bc:	bl	1298c <__assert_fail@plt+0x1ac8>
   144c0:	str	r6, [r5]
   144c4:	add	sp, sp, #28
   144c8:	ldrd	r4, [sp]
   144cc:	ldrd	r6, [sp, #8]
   144d0:	ldrd	r8, [sp, #16]
   144d4:	add	sp, sp, #24
   144d8:	pop	{pc}		; (ldr pc, [sp], #4)
   144dc:	andeq	r7, r2, r8, lsr #5
   144e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   144e4:	cmp	r3, #0
   144e8:	ldr	r4, [pc, #220]	; 145cc <__assert_fail@plt+0x3708>
   144ec:	movne	r4, r3
   144f0:	strd	r6, [sp, #8]
   144f4:	mov	r6, r2
   144f8:	strd	r8, [sp, #16]
   144fc:	mov	r9, r0
   14500:	strd	sl, [sp, #24]
   14504:	mov	sl, r1
   14508:	str	lr, [sp, #32]
   1450c:	sub	sp, sp, #44	; 0x2c
   14510:	bl	10de0 <__errno_location@plt>
   14514:	ldr	r5, [r4, #4]
   14518:	mov	r7, r0
   1451c:	mov	r1, #0
   14520:	add	r8, r4, #8
   14524:	mov	r3, sl
   14528:	ldr	ip, [r4, #44]	; 0x2c
   1452c:	mov	r2, r9
   14530:	mov	r0, r1
   14534:	ldr	lr, [r7]
   14538:	cmp	r6, r1
   1453c:	orreq	r5, r5, #1
   14540:	str	ip, [sp, #16]
   14544:	ldr	ip, [r4, #40]	; 0x28
   14548:	stmib	sp, {r5, r8, ip}
   1454c:	ldr	ip, [r4]
   14550:	str	lr, [sp, #28]
   14554:	str	ip, [sp]
   14558:	bl	1298c <__assert_fail@plt+0x1ac8>
   1455c:	add	r1, r0, #1
   14560:	mov	fp, r0
   14564:	mov	r0, r1
   14568:	str	r1, [sp, #36]	; 0x24
   1456c:	bl	15000 <__assert_fail@plt+0x413c>
   14570:	ldr	ip, [r4, #44]	; 0x2c
   14574:	mov	r3, sl
   14578:	mov	r2, r9
   1457c:	ldr	r1, [sp, #36]	; 0x24
   14580:	str	ip, [sp, #16]
   14584:	ldr	ip, [r4, #40]	; 0x28
   14588:	str	r0, [sp, #32]
   1458c:	stmib	sp, {r5, r8, ip}
   14590:	ldr	ip, [r4]
   14594:	str	ip, [sp]
   14598:	bl	1298c <__assert_fail@plt+0x1ac8>
   1459c:	ldr	lr, [sp, #28]
   145a0:	cmp	r6, #0
   145a4:	ldr	r0, [sp, #32]
   145a8:	str	lr, [r7]
   145ac:	strne	fp, [r6]
   145b0:	add	sp, sp, #44	; 0x2c
   145b4:	ldrd	r4, [sp]
   145b8:	ldrd	r6, [sp, #8]
   145bc:	ldrd	r8, [sp, #16]
   145c0:	ldrd	sl, [sp, #24]
   145c4:	add	sp, sp, #32
   145c8:	pop	{pc}		; (ldr pc, [sp], #4)
   145cc:	andeq	r7, r2, r8, lsr #5
   145d0:	mov	r3, r2
   145d4:	mov	r2, #0
   145d8:	b	144e0 <__assert_fail@plt+0x361c>
   145dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   145e0:	movw	r5, #28916	; 0x70f4
   145e4:	movt	r5, #2
   145e8:	ldr	r3, [r5, #4]
   145ec:	strd	r6, [sp, #8]
   145f0:	str	r8, [sp, #16]
   145f4:	str	lr, [sp, #20]
   145f8:	ldr	r7, [r5]
   145fc:	cmp	r3, #1
   14600:	ble	14624 <__assert_fail@plt+0x3760>
   14604:	mov	r4, #1
   14608:	add	r6, r7, #4
   1460c:	ldr	r0, [r6, r4, lsl #3]
   14610:	add	r4, r4, #1
   14614:	bl	125ec <__assert_fail@plt+0x1728>
   14618:	ldr	r3, [r5, #4]
   1461c:	cmp	r3, r4
   14620:	bgt	1460c <__assert_fail@plt+0x3748>
   14624:	ldr	r0, [r7, #4]
   14628:	movw	r4, #29096	; 0x71a8
   1462c:	movt	r4, #2
   14630:	cmp	r0, r4
   14634:	beq	14648 <__assert_fail@plt+0x3784>
   14638:	bl	125ec <__assert_fail@plt+0x1728>
   1463c:	mov	r3, #256	; 0x100
   14640:	str	r3, [r5, #8]
   14644:	str	r4, [r5, #12]
   14648:	ldr	r4, [pc, #44]	; 1467c <__assert_fail@plt+0x37b8>
   1464c:	cmp	r7, r4
   14650:	beq	14660 <__assert_fail@plt+0x379c>
   14654:	mov	r0, r7
   14658:	bl	125ec <__assert_fail@plt+0x1728>
   1465c:	str	r4, [r5]
   14660:	mov	r3, #1
   14664:	ldrd	r6, [sp, #8]
   14668:	str	r3, [r5, #4]
   1466c:	ldrd	r4, [sp]
   14670:	ldr	r8, [sp, #16]
   14674:	add	sp, sp, #20
   14678:	pop	{pc}		; (ldr pc, [sp], #4)
   1467c:	strdeq	r7, [r2], -ip
   14680:	ldr	r3, [pc, #4]	; 1468c <__assert_fail@plt+0x37c8>
   14684:	mvn	r2, #0
   14688:	b	1414c <__assert_fail@plt+0x3288>
   1468c:	andeq	r7, r2, r8, lsr #5
   14690:	ldr	r3, [pc]	; 14698 <__assert_fail@plt+0x37d4>
   14694:	b	1414c <__assert_fail@plt+0x3288>
   14698:	andeq	r7, r2, r8, lsr #5
   1469c:	mov	r1, r0
   146a0:	ldr	r3, [pc, #8]	; 146b0 <__assert_fail@plt+0x37ec>
   146a4:	mvn	r2, #0
   146a8:	mov	r0, #0
   146ac:	b	1414c <__assert_fail@plt+0x3288>
   146b0:	andeq	r7, r2, r8, lsr #5
   146b4:	mov	r2, r1
   146b8:	ldr	r3, [pc, #8]	; 146c8 <__assert_fail@plt+0x3804>
   146bc:	mov	r1, r0
   146c0:	mov	r0, #0
   146c4:	b	1414c <__assert_fail@plt+0x3288>
   146c8:	andeq	r7, r2, r8, lsr #5
   146cc:	strd	r4, [sp, #-12]!
   146d0:	mov	r5, r2
   146d4:	mov	r4, r0
   146d8:	str	lr, [sp, #8]
   146dc:	sub	sp, sp, #52	; 0x34
   146e0:	mov	r0, sp
   146e4:	bl	127e8 <__assert_fail@plt+0x1924>
   146e8:	mov	r3, sp
   146ec:	mov	r1, r5
   146f0:	mov	r0, r4
   146f4:	mvn	r2, #0
   146f8:	bl	1414c <__assert_fail@plt+0x3288>
   146fc:	add	sp, sp, #52	; 0x34
   14700:	ldrd	r4, [sp]
   14704:	add	sp, sp, #8
   14708:	pop	{pc}		; (ldr pc, [sp], #4)
   1470c:	strd	r4, [sp, #-16]!
   14710:	mov	r5, r2
   14714:	mov	r4, r0
   14718:	str	r6, [sp, #8]
   1471c:	mov	r6, r3
   14720:	str	lr, [sp, #12]
   14724:	sub	sp, sp, #48	; 0x30
   14728:	mov	r0, sp
   1472c:	bl	127e8 <__assert_fail@plt+0x1924>
   14730:	mov	r3, sp
   14734:	mov	r2, r6
   14738:	mov	r1, r5
   1473c:	mov	r0, r4
   14740:	bl	1414c <__assert_fail@plt+0x3288>
   14744:	add	sp, sp, #48	; 0x30
   14748:	ldrd	r4, [sp]
   1474c:	ldr	r6, [sp, #8]
   14750:	add	sp, sp, #12
   14754:	pop	{pc}		; (ldr pc, [sp], #4)
   14758:	mov	r2, r1
   1475c:	mov	r1, r0
   14760:	mov	r0, #0
   14764:	b	146cc <__assert_fail@plt+0x3808>
   14768:	mov	r3, r2
   1476c:	mov	r2, r1
   14770:	mov	r1, r0
   14774:	mov	r0, #0
   14778:	b	1470c <__assert_fail@plt+0x3848>
   1477c:	ldr	ip, [pc, #140]	; 14810 <__assert_fail@plt+0x394c>
   14780:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14784:	ldrd	r4, [ip]
   14788:	strd	r6, [sp, #8]
   1478c:	ldrd	r6, [ip, #8]
   14790:	strd	r8, [sp, #16]
   14794:	lsr	r9, r2, #5
   14798:	str	lr, [sp, #24]
   1479c:	sub	sp, sp, #52	; 0x34
   147a0:	and	lr, r2, #31
   147a4:	add	r8, sp, #8
   147a8:	mov	r2, r1
   147ac:	strd	r4, [sp]
   147b0:	mov	r1, r0
   147b4:	mov	r3, sp
   147b8:	strd	r6, [sp, #8]
   147bc:	mov	r0, #0
   147c0:	ldrd	r4, [ip, #16]
   147c4:	ldrd	r6, [ip, #24]
   147c8:	strd	r4, [sp, #16]
   147cc:	ldrd	r4, [ip, #32]
   147d0:	strd	r6, [sp, #24]
   147d4:	ldrd	r6, [ip, #40]	; 0x28
   147d8:	strd	r4, [sp, #32]
   147dc:	strd	r6, [sp, #40]	; 0x28
   147e0:	ldr	ip, [r8, r9, lsl #2]
   147e4:	mvn	r4, ip, lsr lr
   147e8:	and	r4, r4, #1
   147ec:	eor	lr, ip, r4, lsl lr
   147f0:	str	lr, [r8, r9, lsl #2]
   147f4:	bl	1414c <__assert_fail@plt+0x3288>
   147f8:	add	sp, sp, #52	; 0x34
   147fc:	ldrd	r4, [sp]
   14800:	ldrd	r6, [sp, #8]
   14804:	ldrd	r8, [sp, #16]
   14808:	add	sp, sp, #24
   1480c:	pop	{pc}		; (ldr pc, [sp], #4)
   14810:	andeq	r7, r2, r8, lsr #5
   14814:	mov	r2, r1
   14818:	mvn	r1, #0
   1481c:	b	1477c <__assert_fail@plt+0x38b8>
   14820:	mov	r2, #58	; 0x3a
   14824:	mvn	r1, #0
   14828:	b	1477c <__assert_fail@plt+0x38b8>
   1482c:	mov	r2, #58	; 0x3a
   14830:	b	1477c <__assert_fail@plt+0x38b8>
   14834:	strd	r4, [sp, #-20]!	; 0xffffffec
   14838:	strd	r6, [sp, #8]
   1483c:	mov	r6, r0
   14840:	mov	r7, r2
   14844:	str	lr, [sp, #16]
   14848:	sub	sp, sp, #100	; 0x64
   1484c:	mov	r0, sp
   14850:	bl	127e8 <__assert_fail@plt+0x1924>
   14854:	ldrd	r4, [sp, #8]
   14858:	mov	r1, r7
   1485c:	mov	r0, r6
   14860:	add	r3, sp, #48	; 0x30
   14864:	mvn	r2, #0
   14868:	ldrd	r6, [sp]
   1486c:	strd	r4, [sp, #56]	; 0x38
   14870:	ldrd	r4, [sp, #16]
   14874:	strd	r6, [sp, #48]	; 0x30
   14878:	ldrd	r6, [sp, #32]
   1487c:	ldr	lr, [sp, #60]	; 0x3c
   14880:	strd	r4, [sp, #64]	; 0x40
   14884:	ldrd	r4, [sp, #24]
   14888:	mvn	ip, lr
   1488c:	and	ip, ip, #67108864	; 0x4000000
   14890:	strd	r4, [sp, #72]	; 0x48
   14894:	eor	ip, ip, lr
   14898:	ldrd	r4, [sp, #40]	; 0x28
   1489c:	str	ip, [sp, #60]	; 0x3c
   148a0:	strd	r6, [sp, #80]	; 0x50
   148a4:	strd	r4, [sp, #88]	; 0x58
   148a8:	bl	1414c <__assert_fail@plt+0x3288>
   148ac:	add	sp, sp, #100	; 0x64
   148b0:	ldrd	r4, [sp]
   148b4:	ldrd	r6, [sp, #8]
   148b8:	add	sp, sp, #16
   148bc:	pop	{pc}		; (ldr pc, [sp], #4)
   148c0:	ldr	ip, [pc, #156]	; 14964 <__assert_fail@plt+0x3aa0>
   148c4:	cmp	r2, #0
   148c8:	cmpne	r1, #0
   148cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   148d0:	strd	r6, [sp, #8]
   148d4:	mov	r6, r2
   148d8:	str	r8, [sp, #16]
   148dc:	mov	r8, r3
   148e0:	strd	sl, [sp, #20]
   148e4:	ldrd	r4, [ip]
   148e8:	str	lr, [sp, #28]
   148ec:	sub	sp, sp, #48	; 0x30
   148f0:	mov	lr, #10
   148f4:	ldrd	r2, [ip, #8]
   148f8:	ldrd	sl, [ip, #16]
   148fc:	strd	r4, [sp]
   14900:	ldrd	r4, [ip, #32]
   14904:	str	lr, [sp]
   14908:	strd	r2, [sp, #8]
   1490c:	strd	sl, [sp, #16]
   14910:	ldrd	r2, [ip, #24]
   14914:	ldrd	sl, [ip, #40]	; 0x28
   14918:	strd	r2, [sp, #24]
   1491c:	strd	r4, [sp, #32]
   14920:	strd	sl, [sp, #40]	; 0x28
   14924:	beq	14960 <__assert_fail@plt+0x3a9c>
   14928:	ldr	r2, [sp, #80]	; 0x50
   1492c:	mov	r7, r1
   14930:	mov	r3, sp
   14934:	mov	r1, r8
   14938:	str	r7, [sp, #40]	; 0x28
   1493c:	str	r6, [sp, #44]	; 0x2c
   14940:	bl	1414c <__assert_fail@plt+0x3288>
   14944:	add	sp, sp, #48	; 0x30
   14948:	ldrd	r4, [sp]
   1494c:	ldrd	r6, [sp, #8]
   14950:	ldr	r8, [sp, #16]
   14954:	ldrd	sl, [sp, #20]
   14958:	add	sp, sp, #28
   1495c:	pop	{pc}		; (ldr pc, [sp], #4)
   14960:	bl	10eac <abort@plt>
   14964:	andeq	r7, r2, r8, lsr #5
   14968:	mvn	ip, #0
   1496c:	push	{lr}		; (str lr, [sp, #-4]!)
   14970:	sub	sp, sp, #12
   14974:	str	ip, [sp]
   14978:	bl	148c0 <__assert_fail@plt+0x39fc>
   1497c:	add	sp, sp, #12
   14980:	pop	{pc}		; (ldr pc, [sp], #4)
   14984:	mvn	ip, #0
   14988:	push	{lr}		; (str lr, [sp, #-4]!)
   1498c:	sub	sp, sp, #12
   14990:	mov	r3, r2
   14994:	mov	r2, r1
   14998:	mov	r1, r0
   1499c:	mov	r0, #0
   149a0:	str	ip, [sp]
   149a4:	bl	148c0 <__assert_fail@plt+0x39fc>
   149a8:	add	sp, sp, #12
   149ac:	pop	{pc}		; (ldr pc, [sp], #4)
   149b0:	push	{lr}		; (str lr, [sp, #-4]!)
   149b4:	sub	sp, sp, #12
   149b8:	str	r3, [sp]
   149bc:	mov	r3, r2
   149c0:	mov	r2, r1
   149c4:	mov	r1, r0
   149c8:	mov	r0, #0
   149cc:	bl	148c0 <__assert_fail@plt+0x39fc>
   149d0:	add	sp, sp, #12
   149d4:	pop	{pc}		; (ldr pc, [sp], #4)
   149d8:	ldr	r3, [pc]	; 149e0 <__assert_fail@plt+0x3b1c>
   149dc:	b	1414c <__assert_fail@plt+0x3288>
   149e0:	andeq	r7, r2, r4, lsl #2
   149e4:	mov	r2, r1
   149e8:	ldr	r3, [pc, #8]	; 149f8 <__assert_fail@plt+0x3b34>
   149ec:	mov	r1, r0
   149f0:	mov	r0, #0
   149f4:	b	1414c <__assert_fail@plt+0x3288>
   149f8:	andeq	r7, r2, r4, lsl #2
   149fc:	ldr	r3, [pc, #4]	; 14a08 <__assert_fail@plt+0x3b44>
   14a00:	mvn	r2, #0
   14a04:	b	1414c <__assert_fail@plt+0x3288>
   14a08:	andeq	r7, r2, r4, lsl #2
   14a0c:	mov	r1, r0
   14a10:	ldr	r3, [pc, #8]	; 14a20 <__assert_fail@plt+0x3b5c>
   14a14:	mvn	r2, #0
   14a18:	mov	r0, #0
   14a1c:	b	1414c <__assert_fail@plt+0x3288>
   14a20:	andeq	r7, r2, r4, lsl #2
   14a24:	cmp	r1, #0
   14a28:	strd	r4, [sp, #-16]!
   14a2c:	mov	ip, r3
   14a30:	str	r6, [sp, #8]
   14a34:	mov	r4, r0
   14a38:	str	lr, [sp, #12]
   14a3c:	sub	sp, sp, #32
   14a40:	ldr	r5, [sp, #48]	; 0x30
   14a44:	ldr	r6, [sp, #52]	; 0x34
   14a48:	beq	14b8c <__assert_fail@plt+0x3cc8>
   14a4c:	mov	r3, r1
   14a50:	mov	r1, #1
   14a54:	stm	sp, {r2, ip}
   14a58:	movw	r2, #25512	; 0x63a8
   14a5c:	movt	r2, #1
   14a60:	bl	10e1c <__fprintf_chk@plt>
   14a64:	mov	r2, #5
   14a68:	movw	r1, #25532	; 0x63bc
   14a6c:	movt	r1, #1
   14a70:	mov	r0, #0
   14a74:	bl	10d08 <dcgettext@plt>
   14a78:	movw	ip, #2022	; 0x7e6
   14a7c:	mov	r3, r0
   14a80:	mov	r1, #1
   14a84:	movw	r2, #26260	; 0x6694
   14a88:	movt	r2, #1
   14a8c:	mov	r0, r4
   14a90:	str	ip, [sp]
   14a94:	bl	10e1c <__fprintf_chk@plt>
   14a98:	mov	r1, r4
   14a9c:	mov	r0, #10
   14aa0:	bl	10cfc <fputc_unlocked@plt>
   14aa4:	mov	r2, #5
   14aa8:	movw	r1, #25536	; 0x63c0
   14aac:	movt	r1, #1
   14ab0:	mov	r0, #0
   14ab4:	bl	10d08 <dcgettext@plt>
   14ab8:	mov	r2, r0
   14abc:	mov	r1, #1
   14ac0:	movw	r3, #25708	; 0x646c
   14ac4:	movt	r3, #1
   14ac8:	mov	r0, r4
   14acc:	bl	10e1c <__fprintf_chk@plt>
   14ad0:	mov	r1, r4
   14ad4:	mov	r0, #10
   14ad8:	bl	10cfc <fputc_unlocked@plt>
   14adc:	cmp	r6, #9
   14ae0:	ldrls	pc, [pc, r6, lsl #2]
   14ae4:	b	14df8 <__assert_fail@plt+0x3f34>
   14ae8:	andeq	r4, r1, r8, ror fp
   14aec:	andeq	r4, r1, r8, lsr #23
   14af0:	andeq	r4, r1, r4, ror #23
   14af4:	andeq	r4, r1, r4, lsr #24
   14af8:	andeq	r4, r1, ip, ror #24
   14afc:	andeq	r4, r1, r4, lsr #25
   14b00:	andeq	r4, r1, ip, ror #25
   14b04:	andeq	r4, r1, r0, asr #26
   14b08:	muleq	r1, r8, sp
   14b0c:	andeq	r4, r1, r0, lsl fp
   14b10:	movw	r1, #26012	; 0x659c
   14b14:	movt	r1, #1
   14b18:	mov	r2, #5
   14b1c:	mov	r0, #0
   14b20:	bl	10d08 <dcgettext@plt>
   14b24:	ldr	lr, [r5, #4]
   14b28:	mov	r2, r0
   14b2c:	mov	r1, #1
   14b30:	mov	r0, r4
   14b34:	ldr	r3, [r5, #8]
   14b38:	ldr	ip, [r5, #32]
   14b3c:	str	lr, [sp]
   14b40:	ldr	lr, [r5, #12]
   14b44:	str	ip, [sp, #28]
   14b48:	ldr	ip, [r5, #28]
   14b4c:	str	r3, [sp, #4]
   14b50:	ldr	r3, [r5, #16]
   14b54:	str	lr, [sp, #8]
   14b58:	ldr	lr, [r5, #20]
   14b5c:	str	ip, [sp, #24]
   14b60:	ldr	ip, [r5, #24]
   14b64:	str	r3, [sp, #12]
   14b68:	ldr	r3, [r5]
   14b6c:	str	lr, [sp, #16]
   14b70:	str	ip, [sp, #20]
   14b74:	bl	10e1c <__fprintf_chk@plt>
   14b78:	add	sp, sp, #32
   14b7c:	ldrd	r4, [sp]
   14b80:	ldr	r6, [sp, #8]
   14b84:	add	sp, sp, #12
   14b88:	pop	{pc}		; (ldr pc, [sp], #4)
   14b8c:	mov	r3, r2
   14b90:	mov	r1, #1
   14b94:	str	ip, [sp]
   14b98:	movw	r2, #25524	; 0x63b4
   14b9c:	movt	r2, #1
   14ba0:	bl	10e1c <__fprintf_chk@plt>
   14ba4:	b	14a64 <__assert_fail@plt+0x3ba0>
   14ba8:	mov	r2, #5
   14bac:	movw	r1, #25744	; 0x6490
   14bb0:	movt	r1, #1
   14bb4:	mov	r0, #0
   14bb8:	bl	10d08 <dcgettext@plt>
   14bbc:	ldr	r3, [r5]
   14bc0:	mov	r2, r0
   14bc4:	mov	r1, #1
   14bc8:	mov	r0, r4
   14bcc:	add	sp, sp, #32
   14bd0:	ldrd	r4, [sp]
   14bd4:	ldr	r6, [sp, #8]
   14bd8:	ldr	lr, [sp, #12]
   14bdc:	add	sp, sp, #16
   14be0:	b	10e1c <__fprintf_chk@plt>
   14be4:	mov	r2, #5
   14be8:	movw	r1, #25760	; 0x64a0
   14bec:	movt	r1, #1
   14bf0:	mov	r0, #0
   14bf4:	bl	10d08 <dcgettext@plt>
   14bf8:	ldm	r5, {r3, ip}
   14bfc:	mov	r2, r0
   14c00:	mov	r1, #1
   14c04:	mov	r0, r4
   14c08:	str	ip, [sp, #48]	; 0x30
   14c0c:	add	sp, sp, #32
   14c10:	ldrd	r4, [sp]
   14c14:	ldr	r6, [sp, #8]
   14c18:	ldr	lr, [sp, #12]
   14c1c:	add	sp, sp, #16
   14c20:	b	10e1c <__fprintf_chk@plt>
   14c24:	mov	r2, #5
   14c28:	movw	r1, #25784	; 0x64b8
   14c2c:	movt	r1, #1
   14c30:	mov	r0, #0
   14c34:	bl	10d08 <dcgettext@plt>
   14c38:	ldm	r5, {r3, lr}
   14c3c:	mov	r2, r0
   14c40:	mov	r1, #1
   14c44:	mov	r0, r4
   14c48:	ldr	ip, [r5, #8]
   14c4c:	str	lr, [sp, #48]	; 0x30
   14c50:	str	ip, [sp, #52]	; 0x34
   14c54:	add	sp, sp, #32
   14c58:	ldrd	r4, [sp]
   14c5c:	ldr	r6, [sp, #8]
   14c60:	ldr	lr, [sp, #12]
   14c64:	add	sp, sp, #16
   14c68:	b	10e1c <__fprintf_chk@plt>
   14c6c:	mov	r2, #5
   14c70:	movw	r1, #25812	; 0x64d4
   14c74:	movt	r1, #1
   14c78:	mov	r0, #0
   14c7c:	bl	10d08 <dcgettext@plt>
   14c80:	ldmib	r5, {r3, ip, lr}
   14c84:	mov	r2, r0
   14c88:	mov	r1, #1
   14c8c:	mov	r0, r4
   14c90:	str	r3, [sp]
   14c94:	ldr	r3, [r5]
   14c98:	stmib	sp, {ip, lr}
   14c9c:	bl	10e1c <__fprintf_chk@plt>
   14ca0:	b	14b78 <__assert_fail@plt+0x3cb4>
   14ca4:	mov	r2, #5
   14ca8:	movw	r1, #25844	; 0x64f4
   14cac:	movt	r1, #1
   14cb0:	mov	r0, #0
   14cb4:	bl	10d08 <dcgettext@plt>
   14cb8:	ldmib	r5, {ip, lr}
   14cbc:	mov	r2, r0
   14cc0:	mov	r1, #1
   14cc4:	mov	r0, r4
   14cc8:	ldr	r3, [r5, #16]
   14ccc:	str	ip, [sp]
   14cd0:	ldr	ip, [r5, #12]
   14cd4:	str	r3, [sp, #12]
   14cd8:	ldr	r3, [r5]
   14cdc:	str	lr, [sp, #4]
   14ce0:	str	ip, [sp, #8]
   14ce4:	bl	10e1c <__fprintf_chk@plt>
   14ce8:	b	14b78 <__assert_fail@plt+0x3cb4>
   14cec:	mov	r2, #5
   14cf0:	movw	r1, #25880	; 0x6518
   14cf4:	movt	r1, #1
   14cf8:	mov	r0, #0
   14cfc:	bl	10d08 <dcgettext@plt>
   14d00:	ldr	lr, [r5, #4]
   14d04:	mov	r2, r0
   14d08:	mov	r1, #1
   14d0c:	mov	r0, r4
   14d10:	ldr	r3, [r5, #8]
   14d14:	ldr	ip, [r5, #20]
   14d18:	str	lr, [sp]
   14d1c:	ldr	lr, [r5, #12]
   14d20:	str	ip, [sp, #16]
   14d24:	ldr	ip, [r5, #16]
   14d28:	str	r3, [sp, #4]
   14d2c:	ldr	r3, [r5]
   14d30:	str	lr, [sp, #8]
   14d34:	str	ip, [sp, #12]
   14d38:	bl	10e1c <__fprintf_chk@plt>
   14d3c:	b	14b78 <__assert_fail@plt+0x3cb4>
   14d40:	mov	r2, #5
   14d44:	movw	r1, #25920	; 0x6540
   14d48:	movt	r1, #1
   14d4c:	mov	r0, #0
   14d50:	bl	10d08 <dcgettext@plt>
   14d54:	ldmib	r5, {r3, ip}
   14d58:	mov	r2, r0
   14d5c:	mov	r1, #1
   14d60:	mov	r0, r4
   14d64:	ldr	lr, [r5, #24]
   14d68:	str	r3, [sp]
   14d6c:	ldr	r3, [r5, #12]
   14d70:	str	lr, [sp, #20]
   14d74:	ldr	lr, [r5, #20]
   14d78:	str	ip, [sp, #4]
   14d7c:	ldr	ip, [r5, #16]
   14d80:	str	r3, [sp, #8]
   14d84:	ldr	r3, [r5]
   14d88:	str	ip, [sp, #12]
   14d8c:	str	lr, [sp, #16]
   14d90:	bl	10e1c <__fprintf_chk@plt>
   14d94:	b	14b78 <__assert_fail@plt+0x3cb4>
   14d98:	mov	r2, #5
   14d9c:	movw	r1, #25964	; 0x656c
   14da0:	movt	r1, #1
   14da4:	mov	r0, #0
   14da8:	bl	10d08 <dcgettext@plt>
   14dac:	ldmib	r5, {ip, lr}
   14db0:	mov	r2, r0
   14db4:	mov	r1, #1
   14db8:	mov	r0, r4
   14dbc:	ldr	r3, [r5, #28]
   14dc0:	str	ip, [sp]
   14dc4:	ldr	ip, [r5, #12]
   14dc8:	str	r3, [sp, #24]
   14dcc:	ldr	r3, [r5, #24]
   14dd0:	str	lr, [sp, #4]
   14dd4:	ldr	lr, [r5, #16]
   14dd8:	str	ip, [sp, #8]
   14ddc:	ldr	ip, [r5, #20]
   14de0:	str	r3, [sp, #20]
   14de4:	ldr	r3, [r5]
   14de8:	str	lr, [sp, #12]
   14dec:	str	ip, [sp, #16]
   14df0:	bl	10e1c <__fprintf_chk@plt>
   14df4:	b	14b78 <__assert_fail@plt+0x3cb4>
   14df8:	movw	r1, #26064	; 0x65d0
   14dfc:	movt	r1, #1
   14e00:	b	14b18 <__assert_fail@plt+0x3c54>
   14e04:	strd	r4, [sp, #-12]!
   14e08:	str	lr, [sp, #8]
   14e0c:	sub	sp, sp, #12
   14e10:	ldr	r5, [sp, #24]
   14e14:	ldr	ip, [r5]
   14e18:	cmp	ip, #0
   14e1c:	beq	14e38 <__assert_fail@plt+0x3f74>
   14e20:	mov	lr, r5
   14e24:	mov	ip, #0
   14e28:	ldr	r4, [lr, #4]!
   14e2c:	add	ip, ip, #1
   14e30:	cmp	r4, #0
   14e34:	bne	14e28 <__assert_fail@plt+0x3f64>
   14e38:	stm	sp, {r5, ip}
   14e3c:	bl	14a24 <__assert_fail@plt+0x3b60>
   14e40:	add	sp, sp, #12
   14e44:	ldrd	r4, [sp]
   14e48:	add	sp, sp, #8
   14e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e50:	strd	r4, [sp, #-16]!
   14e54:	mov	ip, #0
   14e58:	str	r6, [sp, #8]
   14e5c:	str	lr, [sp, #12]
   14e60:	sub	sp, sp, #48	; 0x30
   14e64:	ldr	r5, [sp, #64]	; 0x40
   14e68:	add	r6, sp, #8
   14e6c:	mov	r4, r6
   14e70:	ldr	lr, [r5], #4
   14e74:	cmp	lr, #0
   14e78:	str	lr, [r4], #4
   14e7c:	beq	14e8c <__assert_fail@plt+0x3fc8>
   14e80:	add	ip, ip, #1
   14e84:	cmp	ip, #10
   14e88:	bne	14e70 <__assert_fail@plt+0x3fac>
   14e8c:	stm	sp, {r6, ip}
   14e90:	bl	14a24 <__assert_fail@plt+0x3b60>
   14e94:	add	sp, sp, #48	; 0x30
   14e98:	ldrd	r4, [sp]
   14e9c:	ldr	r6, [sp, #8]
   14ea0:	add	sp, sp, #12
   14ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ea8:	push	{r3}		; (str r3, [sp, #-4]!)
   14eac:	mov	ip, #0
   14eb0:	strd	r4, [sp, #-12]!
   14eb4:	str	lr, [sp, #8]
   14eb8:	sub	sp, sp, #56	; 0x38
   14ebc:	add	r3, sp, #72	; 0x48
   14ec0:	add	r5, sp, #16
   14ec4:	mov	r4, r3
   14ec8:	mov	lr, r5
   14ecc:	str	r3, [sp, #12]
   14ed0:	ldr	r3, [r4], #4
   14ed4:	cmp	r3, #0
   14ed8:	str	r3, [lr], #4
   14edc:	beq	14eec <__assert_fail@plt+0x4028>
   14ee0:	add	ip, ip, #1
   14ee4:	cmp	ip, #10
   14ee8:	bne	14ed0 <__assert_fail@plt+0x400c>
   14eec:	ldr	r3, [sp, #68]	; 0x44
   14ef0:	stm	sp, {r5, ip}
   14ef4:	bl	14a24 <__assert_fail@plt+0x3b60>
   14ef8:	add	sp, sp, #56	; 0x38
   14efc:	ldrd	r4, [sp]
   14f00:	ldr	lr, [sp, #8]
   14f04:	add	sp, sp, #12
   14f08:	add	sp, sp, #4
   14f0c:	bx	lr
   14f10:	movw	r3, #29012	; 0x7154
   14f14:	movt	r3, #2
   14f18:	str	r4, [sp, #-8]!
   14f1c:	mov	r0, #10
   14f20:	ldr	r1, [r3]
   14f24:	str	lr, [sp, #4]
   14f28:	bl	10cfc <fputc_unlocked@plt>
   14f2c:	mov	r2, #5
   14f30:	movw	r1, #26124	; 0x660c
   14f34:	movt	r1, #1
   14f38:	mov	r0, #0
   14f3c:	bl	10d08 <dcgettext@plt>
   14f40:	mov	r1, r0
   14f44:	movw	r2, #26144	; 0x6620
   14f48:	movt	r2, #1
   14f4c:	mov	r0, #1
   14f50:	bl	10e04 <__printf_chk@plt>
   14f54:	mov	r2, #5
   14f58:	movw	r1, #26168	; 0x6638
   14f5c:	movt	r1, #1
   14f60:	mov	r0, #0
   14f64:	bl	10d08 <dcgettext@plt>
   14f68:	mov	r1, r0
   14f6c:	movw	r3, #23848	; 0x5d28
   14f70:	movt	r3, #1
   14f74:	movw	r2, #23888	; 0x5d50
   14f78:	movt	r2, #1
   14f7c:	mov	r0, #1
   14f80:	bl	10e04 <__printf_chk@plt>
   14f84:	mov	r2, #5
   14f88:	movw	r1, #26188	; 0x664c
   14f8c:	movt	r1, #1
   14f90:	mov	r0, #0
   14f94:	bl	10d08 <dcgettext@plt>
   14f98:	mov	r1, r0
   14f9c:	movw	r2, #26228	; 0x6674
   14fa0:	movt	r2, #1
   14fa4:	mov	r0, #1
   14fa8:	ldr	r4, [sp]
   14fac:	ldr	lr, [sp, #4]
   14fb0:	add	sp, sp, #8
   14fb4:	b	10e04 <__printf_chk@plt>
   14fb8:	str	r4, [sp, #-8]!
   14fbc:	str	lr, [sp, #4]
   14fc0:	bl	154e8 <__assert_fail@plt+0x4624>
   14fc4:	cmp	r0, #0
   14fc8:	beq	14fd8 <__assert_fail@plt+0x4114>
   14fcc:	ldr	r4, [sp]
   14fd0:	add	sp, sp, #4
   14fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd8:	bl	15430 <__assert_fail@plt+0x456c>
   14fdc:	str	r4, [sp, #-8]!
   14fe0:	str	lr, [sp, #4]
   14fe4:	bl	154e8 <__assert_fail@plt+0x4624>
   14fe8:	cmp	r0, #0
   14fec:	beq	14ffc <__assert_fail@plt+0x4138>
   14ff0:	ldr	r4, [sp]
   14ff4:	add	sp, sp, #4
   14ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ffc:	bl	15430 <__assert_fail@plt+0x456c>
   15000:	str	r4, [sp, #-8]!
   15004:	str	lr, [sp, #4]
   15008:	bl	154e8 <__assert_fail@plt+0x4624>
   1500c:	cmp	r0, #0
   15010:	beq	15020 <__assert_fail@plt+0x415c>
   15014:	ldr	r4, [sp]
   15018:	add	sp, sp, #4
   1501c:	pop	{pc}		; (ldr pc, [sp], #4)
   15020:	bl	15430 <__assert_fail@plt+0x456c>
   15024:	strd	r4, [sp, #-16]!
   15028:	mov	r5, r0
   1502c:	mov	r4, r1
   15030:	str	r6, [sp, #8]
   15034:	str	lr, [sp, #12]
   15038:	bl	15524 <__assert_fail@plt+0x4660>
   1503c:	cmp	r0, #0
   15040:	beq	15054 <__assert_fail@plt+0x4190>
   15044:	ldrd	r4, [sp]
   15048:	ldr	r6, [sp, #8]
   1504c:	add	sp, sp, #12
   15050:	pop	{pc}		; (ldr pc, [sp], #4)
   15054:	adds	r4, r4, #0
   15058:	movne	r4, #1
   1505c:	cmp	r5, #0
   15060:	moveq	r4, #1
   15064:	cmp	r4, #0
   15068:	beq	15044 <__assert_fail@plt+0x4180>
   1506c:	bl	15430 <__assert_fail@plt+0x456c>
   15070:	cmp	r1, #0
   15074:	orreq	r1, r1, #1
   15078:	str	r4, [sp, #-8]!
   1507c:	str	lr, [sp, #4]
   15080:	bl	15524 <__assert_fail@plt+0x4660>
   15084:	cmp	r0, #0
   15088:	beq	15098 <__assert_fail@plt+0x41d4>
   1508c:	ldr	r4, [sp]
   15090:	add	sp, sp, #4
   15094:	pop	{pc}		; (ldr pc, [sp], #4)
   15098:	bl	15430 <__assert_fail@plt+0x456c>
   1509c:	strd	r4, [sp, #-16]!
   150a0:	mov	r4, r0
   150a4:	mov	r5, r2
   150a8:	str	r6, [sp, #8]
   150ac:	mov	r6, r1
   150b0:	str	lr, [sp, #12]
   150b4:	bl	156c0 <__assert_fail@plt+0x47fc>
   150b8:	cmp	r0, #0
   150bc:	beq	150d0 <__assert_fail@plt+0x420c>
   150c0:	ldrd	r4, [sp]
   150c4:	ldr	r6, [sp, #8]
   150c8:	add	sp, sp, #12
   150cc:	pop	{pc}		; (ldr pc, [sp], #4)
   150d0:	cmp	r4, #0
   150d4:	beq	150e4 <__assert_fail@plt+0x4220>
   150d8:	cmp	r6, #0
   150dc:	cmpne	r5, #0
   150e0:	beq	150c0 <__assert_fail@plt+0x41fc>
   150e4:	bl	15430 <__assert_fail@plt+0x456c>
   150e8:	b	1509c <__assert_fail@plt+0x41d8>
   150ec:	cmp	r2, #0
   150f0:	cmpne	r1, #0
   150f4:	str	r4, [sp, #-8]!
   150f8:	moveq	r2, #1
   150fc:	str	lr, [sp, #4]
   15100:	moveq	r1, r2
   15104:	bl	156c0 <__assert_fail@plt+0x47fc>
   15108:	cmp	r0, #0
   1510c:	beq	1511c <__assert_fail@plt+0x4258>
   15110:	ldr	r4, [sp]
   15114:	add	sp, sp, #4
   15118:	pop	{pc}		; (ldr pc, [sp], #4)
   1511c:	bl	15430 <__assert_fail@plt+0x456c>
   15120:	mov	r2, r1
   15124:	mov	r1, r0
   15128:	mov	r0, #0
   1512c:	b	1509c <__assert_fail@plt+0x41d8>
   15130:	mov	r2, r1
   15134:	mov	r1, r0
   15138:	mov	r0, #0
   1513c:	b	150ec <__assert_fail@plt+0x4228>
   15140:	cmp	r0, #0
   15144:	strd	r4, [sp, #-16]!
   15148:	mov	r5, r1
   1514c:	ldr	r4, [r1]
   15150:	str	r6, [sp, #8]
   15154:	str	lr, [sp, #12]
   15158:	beq	15188 <__assert_fail@plt+0x42c4>
   1515c:	lsr	r3, r4, #1
   15160:	add	r3, r3, #1
   15164:	adds	r4, r4, r3
   15168:	bcs	151a4 <__assert_fail@plt+0x42e0>
   1516c:	mov	r1, r4
   15170:	bl	1509c <__assert_fail@plt+0x41d8>
   15174:	ldr	r6, [sp, #8]
   15178:	str	r4, [r5]
   1517c:	ldrd	r4, [sp]
   15180:	add	sp, sp, #12
   15184:	pop	{pc}		; (ldr pc, [sp], #4)
   15188:	cmp	r4, #0
   1518c:	bne	1516c <__assert_fail@plt+0x42a8>
   15190:	mov	r4, #64	; 0x40
   15194:	udiv	r4, r4, r2
   15198:	cmp	r2, #64	; 0x40
   1519c:	addhi	r4, r4, #1
   151a0:	b	1516c <__assert_fail@plt+0x42a8>
   151a4:	bl	15430 <__assert_fail@plt+0x456c>
   151a8:	mov	r2, #1
   151ac:	b	15140 <__assert_fail@plt+0x427c>
   151b0:	ldr	ip, [r1]
   151b4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   151b8:	mov	r5, r1
   151bc:	strd	r6, [sp, #8]
   151c0:	str	lr, [sp, #28]
   151c4:	strd	r8, [sp, #16]
   151c8:	asr	lr, ip, #1
   151cc:	ldr	r8, [sp, #32]
   151d0:	str	sl, [sp, #24]
   151d4:	adds	r4, ip, lr
   151d8:	mvn	lr, r3
   151dc:	lsr	lr, lr, #31
   151e0:	mvnvs	r4, #-2147483648	; 0x80000000
   151e4:	cmp	r3, r4
   151e8:	movge	r1, #0
   151ec:	andlt	r1, lr, #1
   151f0:	cmp	r1, #0
   151f4:	movne	r4, r3
   151f8:	smull	r6, r7, r4, r8
   151fc:	cmp	r7, r6, asr #31
   15200:	bne	15288 <__assert_fail@plt+0x43c4>
   15204:	cmp	r6, #63	; 0x3f
   15208:	mov	r1, r6
   1520c:	ble	15270 <__assert_fail@plt+0x43ac>
   15210:	cmp	r0, #0
   15214:	sub	r6, r4, ip
   15218:	streq	r0, [r5]
   1521c:	cmp	r6, r2
   15220:	bge	15250 <__assert_fail@plt+0x438c>
   15224:	adds	r4, ip, r2
   15228:	bvs	15284 <__assert_fail@plt+0x43c0>
   1522c:	cmp	r4, r3
   15230:	movle	r3, #0
   15234:	andgt	r3, lr, #1
   15238:	cmp	r3, #0
   1523c:	bne	15284 <__assert_fail@plt+0x43c0>
   15240:	smull	r8, r9, r4, r8
   15244:	cmp	r9, r8, asr #31
   15248:	mov	r1, r8
   1524c:	bne	15284 <__assert_fail@plt+0x43c0>
   15250:	bl	15024 <__assert_fail@plt+0x4160>
   15254:	ldrd	r6, [sp, #8]
   15258:	ldrd	r8, [sp, #16]
   1525c:	ldr	sl, [sp, #24]
   15260:	str	r4, [r5]
   15264:	ldrd	r4, [sp]
   15268:	add	sp, sp, #28
   1526c:	pop	{pc}		; (ldr pc, [sp], #4)
   15270:	mov	r6, #64	; 0x40
   15274:	sdiv	r4, r6, r8
   15278:	mls	r1, r8, r4, r6
   1527c:	sub	r1, r6, r1
   15280:	b	15210 <__assert_fail@plt+0x434c>
   15284:	bl	15430 <__assert_fail@plt+0x456c>
   15288:	mvn	r6, #-2147483648	; 0x80000000
   1528c:	b	15274 <__assert_fail@plt+0x43b0>
   15290:	mov	r1, #1
   15294:	str	r4, [sp, #-8]!
   15298:	str	lr, [sp, #4]
   1529c:	bl	15474 <__assert_fail@plt+0x45b0>
   152a0:	cmp	r0, #0
   152a4:	beq	152b4 <__assert_fail@plt+0x43f0>
   152a8:	ldr	r4, [sp]
   152ac:	add	sp, sp, #4
   152b0:	pop	{pc}		; (ldr pc, [sp], #4)
   152b4:	bl	15430 <__assert_fail@plt+0x456c>
   152b8:	mov	r1, #1
   152bc:	str	r4, [sp, #-8]!
   152c0:	str	lr, [sp, #4]
   152c4:	bl	15474 <__assert_fail@plt+0x45b0>
   152c8:	cmp	r0, #0
   152cc:	beq	152dc <__assert_fail@plt+0x4418>
   152d0:	ldr	r4, [sp]
   152d4:	add	sp, sp, #4
   152d8:	pop	{pc}		; (ldr pc, [sp], #4)
   152dc:	bl	15430 <__assert_fail@plt+0x456c>
   152e0:	str	r4, [sp, #-8]!
   152e4:	str	lr, [sp, #4]
   152e8:	bl	15474 <__assert_fail@plt+0x45b0>
   152ec:	cmp	r0, #0
   152f0:	beq	15300 <__assert_fail@plt+0x443c>
   152f4:	ldr	r4, [sp]
   152f8:	add	sp, sp, #4
   152fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15300:	bl	15430 <__assert_fail@plt+0x456c>
   15304:	str	r4, [sp, #-8]!
   15308:	str	lr, [sp, #4]
   1530c:	bl	15474 <__assert_fail@plt+0x45b0>
   15310:	cmp	r0, #0
   15314:	beq	15324 <__assert_fail@plt+0x4460>
   15318:	ldr	r4, [sp]
   1531c:	add	sp, sp, #4
   15320:	pop	{pc}		; (ldr pc, [sp], #4)
   15324:	bl	15430 <__assert_fail@plt+0x456c>
   15328:	strd	r4, [sp, #-16]!
   1532c:	mov	r4, r1
   15330:	str	r6, [sp, #8]
   15334:	mov	r6, r0
   15338:	mov	r0, r1
   1533c:	str	lr, [sp, #12]
   15340:	bl	154e8 <__assert_fail@plt+0x4624>
   15344:	subs	r5, r0, #0
   15348:	beq	1536c <__assert_fail@plt+0x44a8>
   1534c:	mov	r2, r4
   15350:	mov	r1, r6
   15354:	bl	10ccc <memcpy@plt>
   15358:	mov	r0, r5
   1535c:	ldrd	r4, [sp]
   15360:	ldr	r6, [sp, #8]
   15364:	add	sp, sp, #12
   15368:	pop	{pc}		; (ldr pc, [sp], #4)
   1536c:	bl	15430 <__assert_fail@plt+0x456c>
   15370:	strd	r4, [sp, #-16]!
   15374:	mov	r4, r1
   15378:	str	r6, [sp, #8]
   1537c:	mov	r6, r0
   15380:	mov	r0, r1
   15384:	str	lr, [sp, #12]
   15388:	bl	154e8 <__assert_fail@plt+0x4624>
   1538c:	subs	r5, r0, #0
   15390:	beq	153b4 <__assert_fail@plt+0x44f0>
   15394:	mov	r2, r4
   15398:	mov	r1, r6
   1539c:	bl	10ccc <memcpy@plt>
   153a0:	mov	r0, r5
   153a4:	ldrd	r4, [sp]
   153a8:	ldr	r6, [sp, #8]
   153ac:	add	sp, sp, #12
   153b0:	pop	{pc}		; (ldr pc, [sp], #4)
   153b4:	bl	15430 <__assert_fail@plt+0x456c>
   153b8:	strd	r4, [sp, #-16]!
   153bc:	mov	r4, r1
   153c0:	str	r6, [sp, #8]
   153c4:	mov	r6, r0
   153c8:	add	r0, r1, #1
   153cc:	str	lr, [sp, #12]
   153d0:	bl	154e8 <__assert_fail@plt+0x4624>
   153d4:	subs	r5, r0, #0
   153d8:	beq	15404 <__assert_fail@plt+0x4540>
   153dc:	mov	r3, #0
   153e0:	mov	r1, r6
   153e4:	mov	r2, r4
   153e8:	strb	r3, [r5, r4]
   153ec:	bl	10ccc <memcpy@plt>
   153f0:	mov	r0, r5
   153f4:	ldrd	r4, [sp]
   153f8:	ldr	r6, [sp, #8]
   153fc:	add	sp, sp, #12
   15400:	pop	{pc}		; (ldr pc, [sp], #4)
   15404:	bl	15430 <__assert_fail@plt+0x456c>
   15408:	str	r4, [sp, #-8]!
   1540c:	mov	r4, r0
   15410:	str	lr, [sp, #4]
   15414:	bl	10dd4 <strlen@plt>
   15418:	add	r1, r0, #1
   1541c:	mov	r0, r4
   15420:	ldr	r4, [sp]
   15424:	ldr	lr, [sp, #4]
   15428:	add	sp, sp, #8
   1542c:	b	15328 <__assert_fail@plt+0x4464>
   15430:	movw	r3, #28912	; 0x70f0
   15434:	movt	r3, #2
   15438:	str	r4, [sp, #-8]!
   1543c:	ldr	r4, [r3]
   15440:	mov	r2, #5
   15444:	movw	r1, #26308	; 0x66c4
   15448:	movt	r1, #1
   1544c:	mov	r0, #0
   15450:	str	lr, [sp, #4]
   15454:	bl	10d08 <dcgettext@plt>
   15458:	mov	r3, r0
   1545c:	movw	r2, #24628	; 0x6034
   15460:	movt	r2, #1
   15464:	mov	r1, #0
   15468:	mov	r0, r4
   1546c:	bl	10d74 <error@plt>
   15470:	bl	10eac <abort@plt>
   15474:	cmp	r1, #0
   15478:	cmpne	r0, #0
   1547c:	beq	154c8 <__assert_fail@plt+0x4604>
   15480:	strd	r4, [sp, #-16]!
   15484:	umull	r4, r5, r0, r1
   15488:	str	r6, [sp, #8]
   1548c:	str	lr, [sp, #12]
   15490:	adds	r3, r5, #0
   15494:	movne	r3, #1
   15498:	cmp	r4, #0
   1549c:	blt	154a8 <__assert_fail@plt+0x45e4>
   154a0:	cmp	r3, #0
   154a4:	beq	154d4 <__assert_fail@plt+0x4610>
   154a8:	bl	10de0 <__errno_location@plt>
   154ac:	mov	r3, #12
   154b0:	ldrd	r4, [sp]
   154b4:	ldr	r6, [sp, #8]
   154b8:	add	sp, sp, #12
   154bc:	str	r3, [r0]
   154c0:	mov	r0, #0
   154c4:	pop	{pc}		; (ldr pc, [sp], #4)
   154c8:	mov	r1, #1
   154cc:	mov	r0, r1
   154d0:	b	10c6c <calloc@plt>
   154d4:	ldrd	r4, [sp]
   154d8:	ldr	r6, [sp, #8]
   154dc:	ldr	lr, [sp, #12]
   154e0:	add	sp, sp, #16
   154e4:	b	10c6c <calloc@plt>
   154e8:	cmp	r0, #0
   154ec:	beq	154f8 <__assert_fail@plt+0x4634>
   154f0:	blt	15500 <__assert_fail@plt+0x463c>
   154f4:	b	10d80 <malloc@plt>
   154f8:	mov	r0, #1
   154fc:	b	10d80 <malloc@plt>
   15500:	str	r4, [sp, #-8]!
   15504:	str	lr, [sp, #4]
   15508:	bl	10de0 <__errno_location@plt>
   1550c:	mov	r3, #12
   15510:	ldr	r4, [sp]
   15514:	add	sp, sp, #4
   15518:	str	r3, [r0]
   1551c:	mov	r0, #0
   15520:	pop	{pc}		; (ldr pc, [sp], #4)
   15524:	cmp	r0, #0
   15528:	beq	15550 <__assert_fail@plt+0x468c>
   1552c:	cmp	r1, #0
   15530:	str	r4, [sp, #-8]!
   15534:	str	lr, [sp, #4]
   15538:	beq	15558 <__assert_fail@plt+0x4694>
   1553c:	blt	1556c <__assert_fail@plt+0x46a8>
   15540:	ldr	r4, [sp]
   15544:	ldr	lr, [sp, #4]
   15548:	add	sp, sp, #8
   1554c:	b	10d14 <realloc@plt>
   15550:	mov	r0, r1
   15554:	b	154e8 <__assert_fail@plt+0x4624>
   15558:	bl	125ec <__assert_fail@plt+0x1728>
   1555c:	ldr	r4, [sp]
   15560:	add	sp, sp, #4
   15564:	mov	r0, #0
   15568:	pop	{pc}		; (ldr pc, [sp], #4)
   1556c:	bl	10de0 <__errno_location@plt>
   15570:	mov	r3, #12
   15574:	str	r3, [r0]
   15578:	b	1555c <__assert_fail@plt+0x4698>
   1557c:	strd	r4, [sp, #-16]!
   15580:	mov	r4, r0
   15584:	str	r6, [sp, #8]
   15588:	str	lr, [sp, #12]
   1558c:	bl	10d5c <__fpending@plt>
   15590:	ldr	r5, [r4]
   15594:	mov	r6, r0
   15598:	mov	r0, r4
   1559c:	bl	124d8 <__assert_fail@plt+0x1614>
   155a0:	mov	r4, r0
   155a4:	and	r5, r5, #32
   155a8:	cmp	r5, #0
   155ac:	bne	155e4 <__assert_fail@plt+0x4720>
   155b0:	cmp	r0, #0
   155b4:	beq	155d0 <__assert_fail@plt+0x470c>
   155b8:	cmp	r6, #0
   155bc:	bne	155fc <__assert_fail@plt+0x4738>
   155c0:	bl	10de0 <__errno_location@plt>
   155c4:	ldr	r4, [r0]
   155c8:	subs	r4, r4, #9
   155cc:	mvnne	r4, #0
   155d0:	mov	r0, r4
   155d4:	ldrd	r4, [sp]
   155d8:	ldr	r6, [sp, #8]
   155dc:	add	sp, sp, #12
   155e0:	pop	{pc}		; (ldr pc, [sp], #4)
   155e4:	cmp	r0, #0
   155e8:	bne	155fc <__assert_fail@plt+0x4738>
   155ec:	bl	10de0 <__errno_location@plt>
   155f0:	str	r4, [r0]
   155f4:	mvn	r4, #0
   155f8:	b	155d0 <__assert_fail@plt+0x470c>
   155fc:	mvn	r4, #0
   15600:	b	155d0 <__assert_fail@plt+0x470c>
   15604:	mov	r0, #14
   15608:	str	r4, [sp, #-8]!
   1560c:	str	lr, [sp, #4]
   15610:	bl	10e70 <nl_langinfo@plt>
   15614:	cmp	r0, #0
   15618:	beq	1563c <__assert_fail@plt+0x4778>
   1561c:	ldrb	r2, [r0]
   15620:	movw	r3, #26328	; 0x66d8
   15624:	movt	r3, #1
   15628:	ldr	r4, [sp]
   1562c:	add	sp, sp, #4
   15630:	cmp	r2, #0
   15634:	moveq	r0, r3
   15638:	pop	{pc}		; (ldr pc, [sp], #4)
   1563c:	ldr	r4, [sp]
   15640:	add	sp, sp, #4
   15644:	movw	r0, #26328	; 0x66d8
   15648:	movt	r0, #1
   1564c:	pop	{pc}		; (ldr pc, [sp], #4)
   15650:	strd	r4, [sp, #-20]!	; 0xffffffec
   15654:	mov	r5, r2
   15658:	strd	r6, [sp, #8]
   1565c:	subs	r6, r0, #0
   15660:	mov	r7, r1
   15664:	str	lr, [sp, #16]
   15668:	sub	sp, sp, #12
   1566c:	addeq	r6, sp, #4
   15670:	mov	r0, r6
   15674:	bl	10d68 <mbrtowc@plt>
   15678:	cmp	r5, #0
   1567c:	cmnne	r0, #3
   15680:	mov	r4, r0
   15684:	bhi	156a0 <__assert_fail@plt+0x47dc>
   15688:	mov	r0, r4
   1568c:	add	sp, sp, #12
   15690:	ldrd	r4, [sp]
   15694:	ldrd	r6, [sp, #8]
   15698:	add	sp, sp, #16
   1569c:	pop	{pc}		; (ldr pc, [sp], #4)
   156a0:	mov	r0, #0
   156a4:	bl	156f8 <__assert_fail@plt+0x4834>
   156a8:	cmp	r0, #0
   156ac:	bne	15688 <__assert_fail@plt+0x47c4>
   156b0:	ldrb	r3, [r7]
   156b4:	mov	r4, #1
   156b8:	str	r3, [r6]
   156bc:	b	15688 <__assert_fail@plt+0x47c4>
   156c0:	umull	r2, r3, r1, r2
   156c4:	cmp	r3, #0
   156c8:	bne	156d4 <__assert_fail@plt+0x4810>
   156cc:	mov	r1, r2
   156d0:	b	15524 <__assert_fail@plt+0x4660>
   156d4:	str	r4, [sp, #-8]!
   156d8:	str	lr, [sp, #4]
   156dc:	bl	10de0 <__errno_location@plt>
   156e0:	mov	r3, #12
   156e4:	ldr	r4, [sp]
   156e8:	add	sp, sp, #4
   156ec:	str	r3, [r0]
   156f0:	mov	r0, #0
   156f4:	pop	{pc}		; (ldr pc, [sp], #4)
   156f8:	push	{lr}		; (str lr, [sp, #-4]!)
   156fc:	sub	sp, sp, #268	; 0x10c
   15700:	movw	r2, #257	; 0x101
   15704:	add	r1, sp, #4
   15708:	bl	15750 <__assert_fail@plt+0x488c>
   1570c:	cmp	r0, #0
   15710:	movne	r0, #0
   15714:	bne	15748 <__assert_fail@plt+0x4884>
   15718:	movw	r1, #26336	; 0x66e0
   1571c:	movt	r1, #1
   15720:	add	r0, sp, #4
   15724:	bl	10c90 <strcmp@plt>
   15728:	cmp	r0, #0
   1572c:	beq	15748 <__assert_fail@plt+0x4884>
   15730:	add	r0, sp, #4
   15734:	movw	r1, #26340	; 0x66e4
   15738:	movt	r1, #1
   1573c:	bl	10c90 <strcmp@plt>
   15740:	adds	r0, r0, #0
   15744:	movne	r0, #1
   15748:	add	sp, sp, #268	; 0x10c
   1574c:	pop	{pc}		; (ldr pc, [sp], #4)
   15750:	strd	r4, [sp, #-16]!
   15754:	mov	r5, r1
   15758:	mov	r1, #0
   1575c:	mov	r4, r2
   15760:	str	r6, [sp, #8]
   15764:	str	lr, [sp, #12]
   15768:	bl	10e58 <setlocale@plt>
   1576c:	subs	r6, r0, #0
   15770:	beq	157f0 <__assert_fail@plt+0x492c>
   15774:	bl	10dd4 <strlen@plt>
   15778:	cmp	r4, r0
   1577c:	bhi	1579c <__assert_fail@plt+0x48d8>
   15780:	cmp	r4, #0
   15784:	moveq	r0, #34	; 0x22
   15788:	bne	157c0 <__assert_fail@plt+0x48fc>
   1578c:	ldrd	r4, [sp]
   15790:	ldr	r6, [sp, #8]
   15794:	add	sp, sp, #12
   15798:	pop	{pc}		; (ldr pc, [sp], #4)
   1579c:	add	r2, r0, #1
   157a0:	mov	r1, r6
   157a4:	mov	r0, r5
   157a8:	bl	10ccc <memcpy@plt>
   157ac:	ldrd	r4, [sp]
   157b0:	mov	r0, #0
   157b4:	ldr	r6, [sp, #8]
   157b8:	add	sp, sp, #12
   157bc:	pop	{pc}		; (ldr pc, [sp], #4)
   157c0:	sub	r4, r4, #1
   157c4:	mov	r1, r6
   157c8:	mov	r2, r4
   157cc:	mov	r0, r5
   157d0:	bl	10ccc <memcpy@plt>
   157d4:	mov	r3, #0
   157d8:	mov	r0, #34	; 0x22
   157dc:	strb	r3, [r5, r4]
   157e0:	ldrd	r4, [sp]
   157e4:	ldr	r6, [sp, #8]
   157e8:	add	sp, sp, #12
   157ec:	pop	{pc}		; (ldr pc, [sp], #4)
   157f0:	cmp	r4, #0
   157f4:	mov	r0, #22
   157f8:	strbne	r6, [r5]
   157fc:	ldrd	r4, [sp]
   15800:	ldr	r6, [sp, #8]
   15804:	add	sp, sp, #12
   15808:	pop	{pc}		; (ldr pc, [sp], #4)
   1580c:	mov	r1, #0
   15810:	b	10e58 <setlocale@plt>
   15814:	cmp	r3, #0
   15818:	cmpeq	r2, #0
   1581c:	bne	15834 <__assert_fail@plt+0x4970>
   15820:	cmp	r1, #0
   15824:	cmpeq	r0, #0
   15828:	mvnne	r1, #0
   1582c:	mvnne	r0, #0
   15830:	b	15850 <__assert_fail@plt+0x498c>
   15834:	sub	sp, sp, #8
   15838:	push	{sp, lr}
   1583c:	bl	15860 <__assert_fail@plt+0x499c>
   15840:	ldr	lr, [sp, #4]
   15844:	add	sp, sp, #8
   15848:	pop	{r2, r3}
   1584c:	bx	lr
   15850:	push	{r1, lr}
   15854:	mov	r0, #8
   15858:	bl	10c84 <raise@plt>
   1585c:	pop	{r1, pc}
   15860:	cmp	r1, r3
   15864:	cmpeq	r0, r2
   15868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1586c:	mov	r4, r0
   15870:	movcc	r0, #0
   15874:	mov	r5, r1
   15878:	ldr	lr, [sp, #36]	; 0x24
   1587c:	movcc	r1, r0
   15880:	bcc	1597c <__assert_fail@plt+0x4ab8>
   15884:	cmp	r3, #0
   15888:	clzeq	ip, r2
   1588c:	clzne	ip, r3
   15890:	addeq	ip, ip, #32
   15894:	cmp	r5, #0
   15898:	clzeq	r1, r4
   1589c:	addeq	r1, r1, #32
   158a0:	clzne	r1, r5
   158a4:	sub	ip, ip, r1
   158a8:	sub	sl, ip, #32
   158ac:	lsl	r9, r3, ip
   158b0:	rsb	fp, ip, #32
   158b4:	orr	r9, r9, r2, lsl sl
   158b8:	orr	r9, r9, r2, lsr fp
   158bc:	lsl	r8, r2, ip
   158c0:	cmp	r5, r9
   158c4:	cmpeq	r4, r8
   158c8:	movcc	r0, #0
   158cc:	movcc	r1, r0
   158d0:	bcc	158ec <__assert_fail@plt+0x4a28>
   158d4:	mov	r0, #1
   158d8:	subs	r4, r4, r8
   158dc:	lsl	r1, r0, sl
   158e0:	orr	r1, r1, r0, lsr fp
   158e4:	lsl	r0, r0, ip
   158e8:	sbc	r5, r5, r9
   158ec:	cmp	ip, #0
   158f0:	beq	1597c <__assert_fail@plt+0x4ab8>
   158f4:	lsr	r6, r8, #1
   158f8:	orr	r6, r6, r9, lsl #31
   158fc:	lsr	r7, r9, #1
   15900:	mov	r2, ip
   15904:	b	15928 <__assert_fail@plt+0x4a64>
   15908:	subs	r3, r4, r6
   1590c:	sbc	r8, r5, r7
   15910:	adds	r3, r3, r3
   15914:	adc	r8, r8, r8
   15918:	adds	r4, r3, #1
   1591c:	adc	r5, r8, #0
   15920:	subs	r2, r2, #1
   15924:	beq	15944 <__assert_fail@plt+0x4a80>
   15928:	cmp	r5, r7
   1592c:	cmpeq	r4, r6
   15930:	bcs	15908 <__assert_fail@plt+0x4a44>
   15934:	adds	r4, r4, r4
   15938:	adc	r5, r5, r5
   1593c:	subs	r2, r2, #1
   15940:	bne	15928 <__assert_fail@plt+0x4a64>
   15944:	lsr	r3, r4, ip
   15948:	orr	r3, r3, r5, lsl fp
   1594c:	lsr	r2, r5, ip
   15950:	orr	r3, r3, r5, lsr sl
   15954:	adds	r0, r0, r4
   15958:	mov	r4, r3
   1595c:	lsl	r3, r2, ip
   15960:	orr	r3, r3, r4, lsl sl
   15964:	lsl	ip, r4, ip
   15968:	orr	r3, r3, r4, lsr fp
   1596c:	adc	r1, r1, r5
   15970:	subs	r0, r0, ip
   15974:	mov	r5, r2
   15978:	sbc	r1, r1, r3
   1597c:	cmp	lr, #0
   15980:	strdne	r4, [lr]
   15984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15988:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1598c:	mov	r7, r0
   15990:	ldr	r6, [pc, #72]	; 159e0 <__assert_fail@plt+0x4b1c>
   15994:	ldr	r5, [pc, #72]	; 159e4 <__assert_fail@plt+0x4b20>
   15998:	add	r6, pc, r6
   1599c:	add	r5, pc, r5
   159a0:	sub	r6, r6, r5
   159a4:	mov	r8, r1
   159a8:	mov	r9, r2
   159ac:	bl	10c4c <calloc@plt-0x20>
   159b0:	asrs	r6, r6, #2
   159b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   159b8:	mov	r4, #0
   159bc:	add	r4, r4, #1
   159c0:	ldr	r3, [r5], #4
   159c4:	mov	r2, r9
   159c8:	mov	r1, r8
   159cc:	mov	r0, r7
   159d0:	blx	r3
   159d4:	cmp	r6, r4
   159d8:	bne	159bc <__assert_fail@plt+0x4af8>
   159dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   159e0:	andeq	r1, r1, r4, ror r5
   159e4:	andeq	r1, r1, ip, ror #10
   159e8:	bx	lr
   159ec:	ldr	r3, [pc, #12]	; 15a00 <__assert_fail@plt+0x4b3c>
   159f0:	mov	r1, #0
   159f4:	add	r3, pc, r3
   159f8:	ldr	r2, [r3]
   159fc:	b	10dec <__cxa_atexit@plt>
   15a00:	andeq	r1, r1, r4, ror #13

Disassembly of section .fini:

00015a04 <.fini>:
   15a04:	push	{r3, lr}
   15a08:	pop	{r3, pc}
