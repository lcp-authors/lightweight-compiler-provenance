
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000114d0 <.init>:
   114d0:	push	{r3, lr}
   114d4:	bl	12808 <__assert_fail@plt+0xe68>
   114d8:	pop	{r3, pc}

Disassembly of section .plt:

000114dc <pthread_mutex_unlock@plt-0x14>:
   114dc:	push	{lr}		; (str lr, [sp, #-4]!)
   114e0:	ldr	lr, [pc, #4]	; 114ec <pthread_mutex_unlock@plt-0x4>
   114e4:	add	lr, pc, lr
   114e8:	ldr	pc, [lr, #8]!
   114ec:	andeq	ip, r2, r4, lsl fp

000114f0 <pthread_mutex_unlock@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #44, 20	; 0x2c000
   114f8:	ldr	pc, [ip, #2836]!	; 0xb14

000114fc <fdopen@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #44, 20	; 0x2c000
   11504:	ldr	pc, [ip, #2828]!	; 0xb0c

00011508 <calloc@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #44, 20	; 0x2c000
   11510:	ldr	pc, [ip, #2820]!	; 0xb04

00011514 <wctype@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #44, 20	; 0x2c000
   1151c:	ldr	pc, [ip, #2812]!	; 0xafc

00011520 <raise@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #44, 20	; 0x2c000
   11528:	ldr	pc, [ip, #2804]!	; 0xaf4

0001152c <wcrtomb@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #44, 20	; 0x2c000
   11534:	ldr	pc, [ip, #2796]!	; 0xaec

00011538 <iswctype@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #44, 20	; 0x2c000
   11540:	ldr	pc, [ip, #2788]!	; 0xae4

00011544 <strcmp@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #44, 20	; 0x2c000
   1154c:	ldr	pc, [ip, #2780]!	; 0xadc

00011550 <printf@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #44, 20	; 0x2c000
   11558:	ldr	pc, [ip, #2772]!	; 0xad4

0001155c <pthread_mutex_destroy@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #44, 20	; 0x2c000
   11564:	ldr	pc, [ip, #2764]!	; 0xacc

00011568 <fflush@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #44, 20	; 0x2c000
   11570:	ldr	pc, [ip, #2756]!	; 0xac4

00011574 <wcwidth@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #44, 20	; 0x2c000
   1157c:	ldr	pc, [ip, #2748]!	; 0xabc

00011580 <getuid@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #44, 20	; 0x2c000
   11588:	ldr	pc, [ip, #2740]!	; 0xab4

0001158c <memmove@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #44, 20	; 0x2c000
   11594:	ldr	pc, [ip, #2732]!	; 0xaac

00011598 <free@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #44, 20	; 0x2c000
   115a0:	ldr	pc, [ip, #2724]!	; 0xaa4

000115a4 <pthread_mutex_lock@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #44, 20	; 0x2c000
   115ac:	ldr	pc, [ip, #2716]!	; 0xa9c

000115b0 <ferror@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #44, 20	; 0x2c000
   115b8:	ldr	pc, [ip, #2708]!	; 0xa94

000115bc <strndup@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #44, 20	; 0x2c000
   115c4:	ldr	pc, [ip, #2700]!	; 0xa8c

000115c8 <_exit@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #44, 20	; 0x2c000
   115d0:	ldr	pc, [ip, #2692]!	; 0xa84

000115d4 <memcpy@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #44, 20	; 0x2c000
   115dc:	ldr	pc, [ip, #2684]!	; 0xa7c

000115e0 <pthread_mutex_init@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #44, 20	; 0x2c000
   115e8:	ldr	pc, [ip, #2676]!	; 0xa74

000115ec <__strtoull_internal@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #44, 20	; 0x2c000
   115f4:	ldr	pc, [ip, #2668]!	; 0xa6c

000115f8 <towlower@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #44, 20	; 0x2c000
   11600:	ldr	pc, [ip, #2660]!	; 0xa64

00011604 <mbsinit@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #44, 20	; 0x2c000
   1160c:	ldr	pc, [ip, #2652]!	; 0xa5c

00011610 <time@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #44, 20	; 0x2c000
   11618:	ldr	pc, [ip, #2644]!	; 0xa54

0001161c <memcmp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #44, 20	; 0x2c000
   11624:	ldr	pc, [ip, #2636]!	; 0xa4c

00011628 <dcgettext@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #44, 20	; 0x2c000
   11630:	ldr	pc, [ip, #2628]!	; 0xa44

00011634 <realloc@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #44, 20	; 0x2c000
   1163c:	ldr	pc, [ip, #2620]!	; 0xa3c

00011640 <textdomain@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #44, 20	; 0x2c000
   11648:	ldr	pc, [ip, #2612]!	; 0xa34

0001164c <iswcntrl@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #44, 20	; 0x2c000
   11654:	ldr	pc, [ip, #2604]!	; 0xa2c

00011658 <geteuid@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #44, 20	; 0x2c000
   11660:	ldr	pc, [ip, #2596]!	; 0xa24

00011664 <iswprint@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #44, 20	; 0x2c000
   1166c:	ldr	pc, [ip, #2588]!	; 0xa1c

00011670 <setgroups@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #44, 20	; 0x2c000
   11678:	ldr	pc, [ip, #2580]!	; 0xa14

0001167c <__fxstat64@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #44, 20	; 0x2c000
   11684:	ldr	pc, [ip, #2572]!	; 0xa0c

00011688 <fwrite@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #44, 20	; 0x2c000
   11690:	ldr	pc, [ip, #2564]!	; 0xa04

00011694 <lseek64@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #44, 20	; 0x2c000
   1169c:	ldr	pc, [ip, #2556]!	; 0x9fc

000116a0 <__ctype_get_mb_cur_max@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #44, 20	; 0x2c000
   116a8:	ldr	pc, [ip, #2548]!	; 0x9f4

000116ac <fread@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #44, 20	; 0x2c000
   116b4:	ldr	pc, [ip, #2540]!	; 0x9ec

000116b8 <__fpending@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #44, 20	; 0x2c000
   116c0:	ldr	pc, [ip, #2532]!	; 0x9e4

000116c4 <mbrtowc@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #44, 20	; 0x2c000
   116cc:	ldr	pc, [ip, #2524]!	; 0x9dc

000116d0 <error@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #44, 20	; 0x2c000
   116d8:	ldr	pc, [ip, #2516]!	; 0x9d4

000116dc <fnmatch@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #44, 20	; 0x2c000
   116e4:	ldr	pc, [ip, #2508]!	; 0x9cc

000116e8 <open64@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #44, 20	; 0x2c000
   116f0:	ldr	pc, [ip, #2500]!	; 0x9c4

000116f4 <getenv@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #44, 20	; 0x2c000
   116fc:	ldr	pc, [ip, #2492]!	; 0x9bc

00011700 <setgid@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #44, 20	; 0x2c000
   11708:	ldr	pc, [ip, #2484]!	; 0x9b4

0001170c <malloc@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #44, 20	; 0x2c000
   11714:	ldr	pc, [ip, #2476]!	; 0x9ac

00011718 <__libc_start_main@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #44, 20	; 0x2c000
   11720:	ldr	pc, [ip, #2468]!	; 0x9a4

00011724 <strftime@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #44, 20	; 0x2c000
   1172c:	ldr	pc, [ip, #2460]!	; 0x99c

00011730 <__freading@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #44, 20	; 0x2c000
   11738:	ldr	pc, [ip, #2452]!	; 0x994

0001173c <localtime@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #44, 20	; 0x2c000
   11744:	ldr	pc, [ip, #2444]!	; 0x98c

00011748 <__ctype_tolower_loc@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #44, 20	; 0x2c000
   11750:	ldr	pc, [ip, #2436]!	; 0x984

00011754 <__ctype_toupper_loc@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #44, 20	; 0x2c000
   1175c:	ldr	pc, [ip, #2428]!	; 0x97c

00011760 <__gmon_start__@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #44, 20	; 0x2c000
   11768:	ldr	pc, [ip, #2420]!	; 0x974

0001176c <getopt_long@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #44, 20	; 0x2c000
   11774:	ldr	pc, [ip, #2412]!	; 0x96c

00011778 <__ctype_b_loc@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #44, 20	; 0x2c000
   11780:	ldr	pc, [ip, #2404]!	; 0x964

00011784 <exit@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #44, 20	; 0x2c000
   1178c:	ldr	pc, [ip, #2396]!	; 0x95c

00011790 <feof@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #44, 20	; 0x2c000
   11798:	ldr	pc, [ip, #2388]!	; 0x954

0001179c <strtoul@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #44, 20	; 0x2c000
   117a4:	ldr	pc, [ip, #2380]!	; 0x94c

000117a8 <strlen@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #44, 20	; 0x2c000
   117b0:	ldr	pc, [ip, #2372]!	; 0x944

000117b4 <strchr@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #44, 20	; 0x2c000
   117bc:	ldr	pc, [ip, #2364]!	; 0x93c

000117c0 <fprintf@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #44, 20	; 0x2c000
   117c8:	ldr	pc, [ip, #2356]!	; 0x934

000117cc <ungetc@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #44, 20	; 0x2c000
   117d4:	ldr	pc, [ip, #2348]!	; 0x92c

000117d8 <__errno_location@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #44, 20	; 0x2c000
   117e0:	ldr	pc, [ip, #2340]!	; 0x924

000117e4 <iswalnum@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #44, 20	; 0x2c000
   117ec:	ldr	pc, [ip, #2332]!	; 0x91c

000117f0 <strncasecmp@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #44, 20	; 0x2c000
   117f8:	ldr	pc, [ip, #2324]!	; 0x914

000117fc <__cxa_atexit@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #44, 20	; 0x2c000
   11804:	ldr	pc, [ip, #2316]!	; 0x90c

00011808 <getgid@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #44, 20	; 0x2c000
   11810:	ldr	pc, [ip, #2308]!	; 0x904

00011814 <memset@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #44, 20	; 0x2c000
   1181c:	ldr	pc, [ip, #2300]!	; 0x8fc

00011820 <putchar@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #44, 20	; 0x2c000
   11828:	ldr	pc, [ip, #2292]!	; 0x8f4

0001182c <btowc@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #44, 20	; 0x2c000
   11834:	ldr	pc, [ip, #2284]!	; 0x8ec

00011838 <fgetc@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #44, 20	; 0x2c000
   11840:	ldr	pc, [ip, #2276]!	; 0x8e4

00011844 <fileno@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #44, 20	; 0x2c000
   1184c:	ldr	pc, [ip, #2268]!	; 0x8dc

00011850 <difftime@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #44, 20	; 0x2c000
   11858:	ldr	pc, [ip, #2260]!	; 0x8d4

0001185c <memchr@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #44, 20	; 0x2c000
   11864:	ldr	pc, [ip, #2252]!	; 0x8cc

00011868 <fclose@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #44, 20	; 0x2c000
   11870:	ldr	pc, [ip, #2244]!	; 0x8c4

00011874 <strnlen@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #44, 20	; 0x2c000
   1187c:	ldr	pc, [ip, #2236]!	; 0x8bc

00011880 <fseeko64@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #44, 20	; 0x2c000
   11888:	ldr	pc, [ip, #2228]!	; 0x8b4

0001188c <fcntl64@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #44, 20	; 0x2c000
   11894:	ldr	pc, [ip, #2220]!	; 0x8ac

00011898 <setlocale@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #44, 20	; 0x2c000
   118a0:	ldr	pc, [ip, #2212]!	; 0x8a4

000118a4 <strrchr@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #44, 20	; 0x2c000
   118ac:	ldr	pc, [ip, #2204]!	; 0x89c

000118b0 <nl_langinfo@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #44, 20	; 0x2c000
   118b8:	ldr	pc, [ip, #2196]!	; 0x894

000118bc <fputc@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #44, 20	; 0x2c000
   118c4:	ldr	pc, [ip, #2188]!	; 0x88c

000118c8 <setuid@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #44, 20	; 0x2c000
   118d0:	ldr	pc, [ip, #2180]!	; 0x884

000118d4 <localeconv@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #44, 20	; 0x2c000
   118dc:	ldr	pc, [ip, #2172]!	; 0x87c

000118e0 <clearerr@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #44, 20	; 0x2c000
   118e8:	ldr	pc, [ip, #2164]!	; 0x874

000118ec <sprintf@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #44, 20	; 0x2c000
   118f4:	ldr	pc, [ip, #2156]!	; 0x86c

000118f8 <putc@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #44, 20	; 0x2c000
   11900:	ldr	pc, [ip, #2148]!	; 0x864

00011904 <strpbrk@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #44, 20	; 0x2c000
   1190c:	ldr	pc, [ip, #2140]!	; 0x85c

00011910 <bindtextdomain@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #44, 20	; 0x2c000
   11918:	ldr	pc, [ip, #2132]!	; 0x854

0001191c <getdelim@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #44, 20	; 0x2c000
   11924:	ldr	pc, [ip, #2124]!	; 0x84c

00011928 <__xstat64@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #44, 20	; 0x2c000
   11930:	ldr	pc, [ip, #2116]!	; 0x844

00011934 <isatty@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #44, 20	; 0x2c000
   1193c:	ldr	pc, [ip, #2108]!	; 0x83c

00011940 <towupper@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #44, 20	; 0x2c000
   11948:	ldr	pc, [ip, #2100]!	; 0x834

0001194c <fputs@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #44, 20	; 0x2c000
   11954:	ldr	pc, [ip, #2092]!	; 0x82c

00011958 <strncmp@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #44, 20	; 0x2c000
   11960:	ldr	pc, [ip, #2084]!	; 0x824

00011964 <abort@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #44, 20	; 0x2c000
   1196c:	ldr	pc, [ip, #2076]!	; 0x81c

00011970 <getc@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #44, 20	; 0x2c000
   11978:	ldr	pc, [ip, #2068]!	; 0x814

0001197c <close@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #44, 20	; 0x2c000
   11984:	ldr	pc, [ip, #2060]!	; 0x80c

00011988 <__lxstat64@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #44, 20	; 0x2c000
   11990:	ldr	pc, [ip, #2052]!	; 0x804

00011994 <dcngettext@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #44, 20	; 0x2c000
   1199c:	ldr	pc, [ip, #2044]!	; 0x7fc

000119a0 <__assert_fail@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #44, 20	; 0x2c000
   119a8:	ldr	pc, [ip, #2036]!	; 0x7f4

Disassembly of section .text:

000119b0 <.text>:
   119b0:	ldr	r3, [pc, #3072]	; 125b8 <__assert_fail@plt+0xc18>
   119b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119b8:	vpush	{d8-d9}
   119bc:	mov	sl, r0
   119c0:	mov	r8, r1
   119c4:	ldm	r3, {r0, r1, r2}
   119c8:	sub	sp, sp, #268	; 0x10c
   119cc:	add	r3, sp, #160	; 0xa0
   119d0:	cmp	r0, #0
   119d4:	stm	r3, {r0, r1, r2}
   119d8:	movne	r4, r0
   119dc:	addne	r5, sp, #164	; 0xa4
   119e0:	bne	119f4 <__assert_fail@plt+0x54>
   119e4:	b	11a14 <__assert_fail@plt+0x74>
   119e8:	ldr	r4, [r5], #4
   119ec:	cmp	r4, #0
   119f0:	beq	11a14 <__assert_fail@plt+0x74>
   119f4:	mov	r0, r4
   119f8:	bl	12998 <__assert_fail@plt+0xff8>
   119fc:	cmp	r0, #0
   11a00:	blt	119e8 <__assert_fail@plt+0x48>
   11a04:	ldr	r3, [pc, #2992]	; 125bc <__assert_fail@plt+0xc1c>
   11a08:	mov	r9, r0
   11a0c:	str	r4, [r3, #108]	; 0x6c
   11a10:	b	11a18 <__assert_fail@plt+0x78>
   11a14:	mvn	r9, #0
   11a18:	bl	11658 <geteuid@plt>
   11a1c:	mov	r6, r0
   11a20:	bl	11580 <getuid@plt>
   11a24:	mov	r4, r0
   11a28:	bl	11808 <getgid@plt>
   11a2c:	cmp	r6, #0
   11a30:	mov	r5, r0
   11a34:	beq	1209c <__assert_fail@plt+0x6fc>
   11a38:	cmp	r6, r4
   11a3c:	cmpne	r4, #0
   11a40:	moveq	r4, #1
   11a44:	movne	r4, #0
   11a48:	bne	120cc <__assert_fail@plt+0x72c>
   11a4c:	bl	117d8 <__errno_location@plt>
   11a50:	mov	r4, #0
   11a54:	mov	r3, r0
   11a58:	str	r0, [sp, #88]	; 0x58
   11a5c:	str	r4, [r3]
   11a60:	mov	r0, r5
   11a64:	bl	11700 <setgid@plt>
   11a68:	cmp	r0, r4
   11a6c:	bne	127b4 <__assert_fail@plt+0xe14>
   11a70:	ldr	r0, [r8]
   11a74:	cmp	r0, #0
   11a78:	beq	12134 <__assert_fail@plt+0x794>
   11a7c:	bl	184a0 <__assert_fail@plt+0x6b00>
   11a80:	ldr	r1, [pc, #2872]	; 125c0 <__assert_fail@plt+0xc20>
   11a84:	mov	r0, #6
   11a88:	bl	11898 <setlocale@plt>
   11a8c:	ldr	r1, [pc, #2864]	; 125c4 <__assert_fail@plt+0xc24>
   11a90:	ldr	r0, [pc, #2864]	; 125c8 <__assert_fail@plt+0xc28>
   11a94:	bl	11910 <bindtextdomain@plt>
   11a98:	ldr	r0, [pc, #2856]	; 125c8 <__assert_fail@plt+0xc28>
   11a9c:	bl	11640 <textdomain@plt>
   11aa0:	mov	r0, #0
   11aa4:	bl	19d80 <__assert_fail@plt+0x83e0>
   11aa8:	ldr	r6, [pc, #2828]	; 125bc <__assert_fail@plt+0xc1c>
   11aac:	str	r0, [r6, #4]
   11ab0:	ldr	r0, [pc, #2836]	; 125cc <__assert_fail@plt+0xc2c>
   11ab4:	bl	2b6e4 <__assert_fail@plt+0x19d44>
   11ab8:	cmp	r0, #0
   11abc:	bne	126fc <__assert_fail@plt+0xd5c>
   11ac0:	ldr	r0, [pc, #2824]	; 125d0 <__assert_fail@plt+0xc30>
   11ac4:	bl	2b6e4 <__assert_fail@plt+0x19d44>
   11ac8:	subs	fp, r0, #0
   11acc:	bne	126fc <__assert_fail@plt+0xd5c>
   11ad0:	mov	r2, #0
   11ad4:	mov	r3, #0
   11ad8:	mov	r1, #1
   11adc:	ldr	r0, [pc, #2800]	; 125d4 <__assert_fail@plt+0xc34>
   11ae0:	strd	r2, [r6, #88]	; 0x58
   11ae4:	strd	r2, [r6, #96]	; 0x60
   11ae8:	strb	r1, [r6, #80]	; 0x50
   11aec:	str	r1, [sp, #48]	; 0x30
   11af0:	bl	116f4 <getenv@plt>
   11af4:	ldr	r5, [pc, #2884]	; 12640 <__assert_fail@plt+0xca0>
   11af8:	ldr	r4, [pc, #2776]	; 125d8 <__assert_fail@plt+0xc38>
   11afc:	str	fp, [sp, #72]	; 0x48
   11b00:	str	fp, [sp, #64]	; 0x40
   11b04:	str	fp, [sp, #84]	; 0x54
   11b08:	str	fp, [sp, #80]	; 0x50
   11b0c:	str	fp, [sp, #96]	; 0x60
   11b10:	str	fp, [sp, #60]	; 0x3c
   11b14:	str	fp, [sp, #100]	; 0x64
   11b18:	str	fp, [sp, #68]	; 0x44
   11b1c:	str	fp, [sp, #76]	; 0x4c
   11b20:	str	fp, [r6, #20]
   11b24:	str	r0, [sp, #92]	; 0x5c
   11b28:	add	r3, sp, #152	; 0x98
   11b2c:	str	r3, [sp]
   11b30:	mvn	ip, #0
   11b34:	mov	r3, r5
   11b38:	mov	r2, r4
   11b3c:	mov	r1, r8
   11b40:	mov	r0, sl
   11b44:	str	ip, [sp, #152]	; 0x98
   11b48:	bl	1176c <getopt_long@plt>
   11b4c:	cmn	r0, #1
   11b50:	beq	1213c <__assert_fail@plt+0x79c>
   11b54:	sub	r0, r0, #48	; 0x30
   11b58:	cmp	r0, #209	; 0xd1
   11b5c:	ldrls	pc, [pc, r0, lsl #2]
   11b60:	b	12094 <__assert_fail@plt+0x6f4>
   11b64:	andeq	r2, r1, r4, asr #32
   11b68:	muleq	r1, r4, r0
   11b6c:	muleq	r1, r4, r0
   11b70:	muleq	r1, r4, r0
   11b74:	muleq	r1, r4, r0
   11b78:	muleq	r1, r4, r0
   11b7c:	muleq	r1, r4, r0
   11b80:	muleq	r1, r4, r0
   11b84:	muleq	r1, r4, r0
   11b88:	muleq	r1, r4, r0
   11b8c:	muleq	r1, r4, r0
   11b90:	muleq	r1, r4, r0
   11b94:	muleq	r1, r4, r0
   11b98:	muleq	r1, r4, r0
   11b9c:	muleq	r1, r4, r0
   11ba0:	muleq	r1, r4, r0
   11ba4:	muleq	r1, r4, r0
   11ba8:	andeq	r1, r1, ip, lsr #29
   11bac:	muleq	r1, r4, r0
   11bb0:	muleq	r1, r4, r0
   11bb4:	muleq	r1, r4, r0
   11bb8:			; <UNDEFINED> instruction: 0x00011eb8
   11bbc:	muleq	r1, r4, r0
   11bc0:	muleq	r1, r4, r0
   11bc4:	andeq	r1, r1, r8, ror #31
   11bc8:	muleq	r1, r4, r0
   11bcc:	muleq	r1, r4, r0
   11bd0:	muleq	r1, r4, r0
   11bd4:	ldrdeq	r1, [r1], -r8
   11bd8:	muleq	r1, r4, r0
   11bdc:	muleq	r1, r4, r0
   11be0:	muleq	r1, r4, r0
   11be4:	andeq	r1, r1, r8, ror #31
   11be8:	muleq	r1, r4, r0
   11bec:	muleq	r1, r4, r0
   11bf0:	andeq	r2, r1, r8, lsr r0
   11bf4:	muleq	r1, r4, r0
   11bf8:	muleq	r1, r4, r0
   11bfc:	muleq	r1, r4, r0
   11c00:	muleq	r1, r4, r0
   11c04:	muleq	r1, r4, r0
   11c08:	muleq	r1, r4, r0
   11c0c:	muleq	r1, r4, r0
   11c10:	muleq	r1, r4, r0
   11c14:	muleq	r1, r4, r0
   11c18:	muleq	r1, r4, r0
   11c1c:	muleq	r1, r4, r0
   11c20:	muleq	r1, r4, r0
   11c24:	muleq	r1, r4, r0
   11c28:	muleq	r1, r4, r0
   11c2c:	andeq	r2, r1, ip, lsr #32
   11c30:	andeq	r2, r1, r0, lsr #32
   11c34:	strdeq	r1, [r1], -r8
   11c38:	andeq	r1, r1, ip, asr #30
   11c3c:	muleq	r1, r4, r0
   11c40:	muleq	r1, r4, r0
   11c44:	andeq	r1, r1, r4, asr #30
   11c48:	andeq	r1, r1, r8, lsr pc
   11c4c:	muleq	r1, r4, r0
   11c50:	muleq	r1, r4, r0
   11c54:	strdeq	r1, [r1], -ip
   11c58:	andeq	r1, r1, r8, lsr #22
   11c5c:	muleq	r1, r4, r0
   11c60:	muleq	r1, r4, r0
   11c64:	strdeq	r1, [r1], -r0
   11c68:	muleq	r1, r4, r0
   11c6c:	andeq	r1, r1, r4, ror #29
   11c70:	andeq	r1, r1, r8, lsr #22
   11c74:	muleq	r1, r4, r0
   11c78:	muleq	r1, r4, r0
   11c7c:	andeq	r1, r1, ip, asr #29
   11c80:	andeq	r1, r1, r4, asr #29
   11c84:	muleq	r1, r4, r0
   11c88:	muleq	r1, r4, r0
   11c8c:	muleq	r1, r4, r0
   11c90:	muleq	r1, r4, r0
   11c94:	muleq	r1, r4, r0
   11c98:	muleq	r1, r4, r0
   11c9c:	muleq	r1, r4, r0
   11ca0:	muleq	r1, r4, r0
   11ca4:	muleq	r1, r4, r0
   11ca8:	muleq	r1, r4, r0
   11cac:	muleq	r1, r4, r0
   11cb0:	muleq	r1, r4, r0
   11cb4:	muleq	r1, r4, r0
   11cb8:	muleq	r1, r4, r0
   11cbc:	muleq	r1, r4, r0
   11cc0:	muleq	r1, r4, r0
   11cc4:	muleq	r1, r4, r0
   11cc8:	muleq	r1, r4, r0
   11ccc:	muleq	r1, r4, r0
   11cd0:	muleq	r1, r4, r0
   11cd4:	muleq	r1, r4, r0
   11cd8:	muleq	r1, r4, r0
   11cdc:	muleq	r1, r4, r0
   11ce0:	muleq	r1, r4, r0
   11ce4:	muleq	r1, r4, r0
   11ce8:	muleq	r1, r4, r0
   11cec:	muleq	r1, r4, r0
   11cf0:	muleq	r1, r4, r0
   11cf4:	muleq	r1, r4, r0
   11cf8:	muleq	r1, r4, r0
   11cfc:	muleq	r1, r4, r0
   11d00:	muleq	r1, r4, r0
   11d04:	muleq	r1, r4, r0
   11d08:	muleq	r1, r4, r0
   11d0c:	muleq	r1, r4, r0
   11d10:	muleq	r1, r4, r0
   11d14:	muleq	r1, r4, r0
   11d18:	muleq	r1, r4, r0
   11d1c:	muleq	r1, r4, r0
   11d20:	muleq	r1, r4, r0
   11d24:	muleq	r1, r4, r0
   11d28:	muleq	r1, r4, r0
   11d2c:	muleq	r1, r4, r0
   11d30:	muleq	r1, r4, r0
   11d34:	muleq	r1, r4, r0
   11d38:	muleq	r1, r4, r0
   11d3c:	muleq	r1, r4, r0
   11d40:	muleq	r1, r4, r0
   11d44:	muleq	r1, r4, r0
   11d48:	muleq	r1, r4, r0
   11d4c:	muleq	r1, r4, r0
   11d50:	muleq	r1, r4, r0
   11d54:	muleq	r1, r4, r0
   11d58:	muleq	r1, r4, r0
   11d5c:	muleq	r1, r4, r0
   11d60:	muleq	r1, r4, r0
   11d64:	muleq	r1, r4, r0
   11d68:	muleq	r1, r4, r0
   11d6c:	muleq	r1, r4, r0
   11d70:	muleq	r1, r4, r0
   11d74:	muleq	r1, r4, r0
   11d78:	muleq	r1, r4, r0
   11d7c:	muleq	r1, r4, r0
   11d80:	muleq	r1, r4, r0
   11d84:	muleq	r1, r4, r0
   11d88:	muleq	r1, r4, r0
   11d8c:	muleq	r1, r4, r0
   11d90:	muleq	r1, r4, r0
   11d94:	muleq	r1, r4, r0
   11d98:	muleq	r1, r4, r0
   11d9c:	muleq	r1, r4, r0
   11da0:	muleq	r1, r4, r0
   11da4:	muleq	r1, r4, r0
   11da8:	muleq	r1, r4, r0
   11dac:	muleq	r1, r4, r0
   11db0:	muleq	r1, r4, r0
   11db4:	muleq	r1, r4, r0
   11db8:	muleq	r1, r4, r0
   11dbc:	muleq	r1, r4, r0
   11dc0:	muleq	r1, r4, r0
   11dc4:	muleq	r1, r4, r0
   11dc8:	muleq	r1, r4, r0
   11dcc:	muleq	r1, r4, r0
   11dd0:	muleq	r1, r4, r0
   11dd4:	muleq	r1, r4, r0
   11dd8:	muleq	r1, r4, r0
   11ddc:	muleq	r1, r4, r0
   11de0:	muleq	r1, r4, r0
   11de4:	muleq	r1, r4, r0
   11de8:	muleq	r1, r4, r0
   11dec:	muleq	r1, r4, r0
   11df0:	muleq	r1, r4, r0
   11df4:	muleq	r1, r4, r0
   11df8:	muleq	r1, r4, r0
   11dfc:	muleq	r1, r4, r0
   11e00:	muleq	r1, r4, r0
   11e04:	muleq	r1, r4, r0
   11e08:	muleq	r1, r4, r0
   11e0c:	muleq	r1, r4, r0
   11e10:	muleq	r1, r4, r0
   11e14:	muleq	r1, r4, r0
   11e18:	muleq	r1, r4, r0
   11e1c:	muleq	r1, r4, r0
   11e20:	muleq	r1, r4, r0
   11e24:	muleq	r1, r4, r0
   11e28:	muleq	r1, r4, r0
   11e2c:	muleq	r1, r4, r0
   11e30:	muleq	r1, r4, r0
   11e34:	muleq	r1, r4, r0
   11e38:	muleq	r1, r4, r0
   11e3c:	muleq	r1, r4, r0
   11e40:	muleq	r1, r4, r0
   11e44:	muleq	r1, r4, r0
   11e48:	muleq	r1, r4, r0
   11e4c:	muleq	r1, r4, r0
   11e50:	muleq	r1, r4, r0
   11e54:	muleq	r1, r4, r0
   11e58:	muleq	r1, r4, r0
   11e5c:	muleq	r1, r4, r0
   11e60:	muleq	r1, r4, r0
   11e64:	muleq	r1, r4, r0
   11e68:	muleq	r1, r4, r0
   11e6c:	muleq	r1, r4, r0
   11e70:	muleq	r1, r4, r0
   11e74:	muleq	r1, r4, r0
   11e78:	muleq	r1, r4, r0
   11e7c:	muleq	r1, r4, r0
   11e80:	muleq	r1, r4, r0
   11e84:	muleq	r1, r4, r0
   11e88:	muleq	r1, r4, r0
   11e8c:	muleq	r1, r4, r0
   11e90:	muleq	r1, r4, r0
   11e94:	muleq	r1, r4, r0
   11e98:	muleq	r1, r4, r0
   11e9c:	muleq	r1, r4, r0
   11ea0:	muleq	r1, r4, r0
   11ea4:	andeq	r1, r1, r4, asr #31
   11ea8:	andeq	r1, r1, r8, asr pc
   11eac:	ldr	r3, [sp, #48]	; 0x30
   11eb0:	str	r3, [sp, #72]	; 0x48
   11eb4:	b	11b28 <__assert_fail@plt+0x188>
   11eb8:	mov	r3, #2
   11ebc:	str	r3, [r6, #20]
   11ec0:	b	11b28 <__assert_fail@plt+0x188>
   11ec4:	str	fp, [sp, #60]	; 0x3c
   11ec8:	b	11b28 <__assert_fail@plt+0x188>
   11ecc:	ldr	r0, [pc, #1800]	; 125dc <__assert_fail@plt+0xc3c>
   11ed0:	bl	140b4 <__assert_fail@plt+0x2714>
   11ed4:	mov	r0, fp
   11ed8:	add	sp, sp, #268	; 0x10c
   11edc:	vpop	{d8-d9}
   11ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ee4:	ldr	r3, [sp, #48]	; 0x30
   11ee8:	str	r3, [sp, #80]	; 0x50
   11eec:	b	11b28 <__assert_fail@plt+0x188>
   11ef0:	ldr	r3, [sp, #48]	; 0x30
   11ef4:	str	r3, [sp, #68]	; 0x44
   11ef8:	b	11b28 <__assert_fail@plt+0x188>
   11efc:	ldr	r3, [pc, #1848]	; 1263c <__assert_fail@plt+0xc9c>
   11f00:	mov	r2, #10
   11f04:	add	r1, sp, #160	; 0xa0
   11f08:	ldr	ip, [r3]
   11f0c:	mov	r3, #0
   11f10:	str	r3, [sp]
   11f14:	mov	r0, ip
   11f18:	ldr	r3, [pc, #1728]	; 125e0 <__assert_fail@plt+0xc40>
   11f1c:	str	ip, [sp, #160]	; 0xa0
   11f20:	bl	1aea8 <__assert_fail@plt+0x9508>
   11f24:	cmp	r0, #0
   11f28:	bne	12748 <__assert_fail@plt+0xda8>
   11f2c:	mov	r3, #1
   11f30:	str	r3, [sp, #96]	; 0x60
   11f34:	b	11b28 <__assert_fail@plt+0x188>
   11f38:	ldr	r3, [sp, #48]	; 0x30
   11f3c:	str	r3, [sp, #76]	; 0x4c
   11f40:	b	11b28 <__assert_fail@plt+0x188>
   11f44:	mov	r0, #0
   11f48:	bl	129e8 <__assert_fail@plt+0x1048>
   11f4c:	ldr	r3, [sp, #48]	; 0x30
   11f50:	str	r3, [r6, #20]
   11f54:	b	11b28 <__assert_fail@plt+0x188>
   11f58:	ldr	r3, [pc, #1756]	; 1263c <__assert_fail@plt+0xc9c>
   11f5c:	ldr	r7, [r3]
   11f60:	ldrb	r3, [r7]
   11f64:	cmp	r3, #0
   11f68:	beq	12724 <__assert_fail@plt+0xd84>
   11f6c:	ldr	r3, [sp, #88]	; 0x58
   11f70:	mov	r2, #0
   11f74:	add	r1, sp, #160	; 0xa0
   11f78:	str	r2, [r3]
   11f7c:	mov	r0, r7
   11f80:	mov	r2, #10
   11f84:	bl	1179c <strtoul@plt>
   11f88:	cmn	r0, #1
   11f8c:	beq	12508 <__assert_fail@plt+0xb68>
   11f90:	cmp	r0, #0
   11f94:	bne	11fa8 <__assert_fail@plt+0x608>
   11f98:	ldr	r3, [sp, #88]	; 0x58
   11f9c:	ldr	r3, [r3]
   11fa0:	cmp	r3, #22
   11fa4:	beq	12518 <__assert_fail@plt+0xb78>
   11fa8:	ldr	r3, [sp, #160]	; 0xa0
   11fac:	ldrb	r3, [r3]
   11fb0:	cmp	r3, #0
   11fb4:	bne	12764 <__assert_fail@plt+0xdc4>
   11fb8:	ldr	r3, [pc, #1572]	; 125e4 <__assert_fail@plt+0xc44>
   11fbc:	str	r0, [r3, #8]
   11fc0:	b	11b28 <__assert_fail@plt+0x188>
   11fc4:	ldr	r3, [pc, #1648]	; 1263c <__assert_fail@plt+0xc9c>
   11fc8:	ldr	r0, [r3]
   11fcc:	bl	1441c <__assert_fail@plt+0x2a7c>
   11fd0:	str	r0, [sp, #84]	; 0x54
   11fd4:	b	11b28 <__assert_fail@plt+0x188>
   11fd8:	ldr	r3, [pc, #1540]	; 125e4 <__assert_fail@plt+0xc44>
   11fdc:	ldr	r2, [sp, #48]	; 0x30
   11fe0:	str	r2, [r3, #4]
   11fe4:	b	11b28 <__assert_fail@plt+0x188>
   11fe8:	ldr	r3, [pc, #1524]	; 125e4 <__assert_fail@plt+0xc44>
   11fec:	mov	r2, #0
   11ff0:	str	r2, [r3, #4]
   11ff4:	b	11b28 <__assert_fail@plt+0x188>
   11ff8:	ldr	r3, [pc, #1596]	; 1263c <__assert_fail@plt+0xc9c>
   11ffc:	ldr	r3, [r3]
   12000:	cmp	r3, #0
   12004:	str	r3, [sp, #92]	; 0x5c
   12008:	bne	11b28 <__assert_fail@plt+0x188>
   1200c:	ldr	r3, [pc, #1492]	; 125e8 <__assert_fail@plt+0xc48>
   12010:	ldr	r2, [pc, #1492]	; 125ec <__assert_fail@plt+0xc4c>
   12014:	ldr	r1, [pc, #1492]	; 125f0 <__assert_fail@plt+0xc50>
   12018:	ldr	r0, [pc, #1492]	; 125f4 <__assert_fail@plt+0xc54>
   1201c:	bl	119a0 <__assert_fail@plt>
   12020:	ldr	r3, [sp, #48]	; 0x30
   12024:	str	r3, [sp, #100]	; 0x64
   12028:	b	11b28 <__assert_fail@plt+0x188>
   1202c:	ldr	r3, [sp, #48]	; 0x30
   12030:	str	r3, [sp, #60]	; 0x3c
   12034:	b	11b28 <__assert_fail@plt+0x188>
   12038:	ldr	r3, [sp, #48]	; 0x30
   1203c:	str	r3, [sp, #64]	; 0x40
   12040:	b	11b28 <__assert_fail@plt+0x188>
   12044:	ldr	r3, [pc, #1432]	; 125e4 <__assert_fail@plt+0xc44>
   12048:	mov	r2, #0
   1204c:	str	r2, [r3]
   12050:	mov	r3, #0
   12054:	strb	r3, [r6, #80]	; 0x50
   12058:	b	11b28 <__assert_fail@plt+0x188>
   1205c:	ldr	r3, [pc, #1428]	; 125f8 <__assert_fail@plt+0xc58>
   12060:	ldr	r3, [r3]
   12064:	cmp	sl, r3
   12068:	movne	r3, #1
   1206c:	strne	r3, [sp, #68]	; 0x44
   12070:	bne	12194 <__assert_fail@plt+0x7f4>
   12074:	mov	r2, #5
   12078:	ldr	r1, [pc, #1404]	; 125fc <__assert_fail@plt+0xc5c>
   1207c:	mov	r0, r4
   12080:	bl	11628 <dcgettext@plt>
   12084:	mov	r1, r4
   12088:	mov	r2, r0
   1208c:	mov	r0, r4
   12090:	bl	116d0 <error@plt>
   12094:	mov	r0, #1
   12098:	bl	129e8 <__assert_fail@plt+0x1048>
   1209c:	add	r1, sp, #160	; 0xa0
   120a0:	mov	r0, #1
   120a4:	str	r5, [sp, #160]	; 0xa0
   120a8:	bl	11670 <setgroups@plt>
   120ac:	cmp	r0, #0
   120b0:	beq	11a38 <__assert_fail@plt+0x98>
   120b4:	mov	r0, r6
   120b8:	mov	r2, #5
   120bc:	ldr	r1, [pc, #1340]	; 12600 <__assert_fail@plt+0xc60>
   120c0:	bl	11628 <dcgettext@plt>
   120c4:	mov	r5, r0
   120c8:	b	12108 <__assert_fail@plt+0x768>
   120cc:	bl	117d8 <__errno_location@plt>
   120d0:	str	r4, [r0]
   120d4:	mov	r6, r0
   120d8:	bl	11580 <getuid@plt>
   120dc:	bl	118c8 <setuid@plt>
   120e0:	cmp	r0, #0
   120e4:	bne	1279c <__assert_fail@plt+0xdfc>
   120e8:	bl	118c8 <setuid@plt>
   120ec:	subs	r4, r0, #0
   120f0:	bne	11a4c <__assert_fail@plt+0xac>
   120f4:	mov	r2, #5
   120f8:	ldr	r1, [pc, #1284]	; 12604 <__assert_fail@plt+0xc64>
   120fc:	bl	11628 <dcgettext@plt>
   12100:	str	r4, [r6]
   12104:	mov	r5, r0
   12108:	bl	117d8 <__errno_location@plt>
   1210c:	mov	r2, r5
   12110:	mov	r1, #8
   12114:	ldr	r4, [r0]
   12118:	mov	r0, #0
   1211c:	bl	1a0b4 <__assert_fail@plt+0x8714>
   12120:	mov	r1, r4
   12124:	ldr	r2, [pc, #1276]	; 12628 <__assert_fail@plt+0xc88>
   12128:	mov	r3, r0
   1212c:	mov	r0, #1
   12130:	bl	116d0 <error@plt>
   12134:	ldr	r0, [pc, #1184]	; 125dc <__assert_fail@plt+0xc3c>
   12138:	b	11a7c <__assert_fail@plt+0xdc>
   1213c:	ldr	r3, [sp, #92]	; 0x5c
   12140:	mov	r7, r0
   12144:	cmp	r3, #0
   12148:	beq	12160 <__assert_fail@plt+0x7c0>
   1214c:	cmn	r9, #1
   12150:	beq	12160 <__assert_fail@plt+0x7c0>
   12154:	mov	r0, r9
   12158:	bl	1197c <close@plt>
   1215c:	mov	r9, r7
   12160:	ldr	r3, [sp, #100]	; 0x64
   12164:	ldr	r2, [sp, #64]	; 0x40
   12168:	orrs	r4, r3, r2
   1216c:	beq	1205c <__assert_fail@plt+0x6bc>
   12170:	ldr	r3, [sp, #64]	; 0x40
   12174:	cmp	r3, #0
   12178:	beq	12194 <__assert_fail@plt+0x7f4>
   1217c:	ldr	r3, [pc, #1140]	; 125f8 <__assert_fail@plt+0xc58>
   12180:	ldr	r2, [sp, #96]	; 0x60
   12184:	ldr	r3, [r3]
   12188:	cmp	sl, r3
   1218c:	moveq	r2, #0
   12190:	str	r2, [sp, #96]	; 0x60
   12194:	mov	r0, #1
   12198:	bl	11934 <isatty@plt>
   1219c:	cmp	r0, #1
   121a0:	strbeq	r0, [r6, #12]
   121a4:	ldr	r0, [sp, #92]	; 0x5c
   121a8:	movne	r3, #0
   121ac:	strbne	r3, [r6, #12]
   121b0:	cmp	r0, #0
   121b4:	beq	121d0 <__assert_fail@plt+0x830>
   121b8:	add	r3, sp, #144	; 0x90
   121bc:	str	r3, [sp]
   121c0:	mov	r2, #1
   121c4:	add	r3, sp, #140	; 0x8c
   121c8:	ldr	r1, [pc, #1080]	; 12608 <__assert_fail@plt+0xc68>
   121cc:	bl	14638 <__assert_fail@plt+0x2c98>
   121d0:	mov	r3, #0
   121d4:	str	r7, [sp, #112]	; 0x70
   121d8:	str	fp, [sp, #108]	; 0x6c
   121dc:	ldr	r7, [sp, #92]	; 0x5c
   121e0:	mov	fp, sl
   121e4:	str	r8, [sp, #92]	; 0x5c
   121e8:	str	r3, [sp, #132]	; 0x84
   121ec:	vldr	d9, [pc, #956]	; 125b0 <__assert_fail@plt+0xc10>
   121f0:	str	r9, [sp, #104]	; 0x68
   121f4:	ldr	sl, [sp, #96]	; 0x60
   121f8:	mov	r8, r3
   121fc:	b	12308 <__assert_fail@plt+0x968>
   12200:	ldr	r3, [sp, #88]	; 0x58
   12204:	mov	r2, r4
   12208:	mov	r1, #8
   1220c:	mov	r0, #0
   12210:	ldr	r9, [r3]
   12214:	bl	1a0b4 <__assert_fail@plt+0x8714>
   12218:	mov	r1, r9
   1221c:	ldr	r2, [pc, #1028]	; 12628 <__assert_fail@plt+0xc88>
   12220:	mov	r3, r0
   12224:	mov	r0, #0
   12228:	bl	116d0 <error@plt>
   1222c:	mov	r0, r8
   12230:	ldr	r1, [pc, #980]	; 1260c <__assert_fail@plt+0xc6c>
   12234:	bl	114fc <fdopen@plt>
   12238:	subs	r9, r0, #0
   1223c:	beq	12650 <__assert_fail@plt+0xcb0>
   12240:	ldr	r3, [pc, #944]	; 125f8 <__assert_fail@plt+0xc58>
   12244:	mov	r2, #0
   12248:	ldr	r1, [r3]
   1224c:	mov	r3, #0
   12250:	sub	r0, fp, r1
   12254:	strd	r2, [sp, #48]	; 0x30
   12258:	ldr	r3, [sp, #92]	; 0x5c
   1225c:	add	r1, r3, r1, lsl #2
   12260:	mov	r3, #0
   12264:	ldr	r2, [sp, #84]	; 0x54
   12268:	str	r3, [sp, #8]
   1226c:	str	r2, [sp, #40]	; 0x28
   12270:	ldr	r2, [sp, #80]	; 0x50
   12274:	str	sl, [sp, #24]
   12278:	str	r2, [sp, #36]	; 0x24
   1227c:	ldr	r2, [sp, #72]	; 0x48
   12280:	str	r2, [sp, #32]
   12284:	ldr	r2, [sp, #64]	; 0x40
   12288:	str	r2, [sp, #28]
   1228c:	ldr	r2, [sp, #60]	; 0x3c
   12290:	str	r2, [sp, #20]
   12294:	ldr	r2, [sp, #68]	; 0x44
   12298:	str	r2, [sp, #16]
   1229c:	ldr	r2, [sp, #76]	; 0x4c
   122a0:	str	r2, [sp, #12]
   122a4:	ldrd	r2, [sp, #48]	; 0x30
   122a8:	strd	r2, [sp]
   122ac:	mov	r3, r9
   122b0:	mov	r2, r4
   122b4:	bl	131d4 <__assert_fail@plt+0x1834>
   122b8:	mov	r8, r0
   122bc:	mov	r0, r9
   122c0:	bl	11868 <fclose@plt>
   122c4:	cmn	r0, #1
   122c8:	beq	12650 <__assert_fail@plt+0xcb0>
   122cc:	cmp	r5, #0
   122d0:	beq	122dc <__assert_fail@plt+0x93c>
   122d4:	mov	r0, r5
   122d8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   122dc:	cmp	r7, #0
   122e0:	beq	12684 <__assert_fail@plt+0xce4>
   122e4:	add	r3, sp, #144	; 0x90
   122e8:	str	r3, [sp]
   122ec:	mov	r2, #0
   122f0:	add	r3, sp, #140	; 0x8c
   122f4:	ldr	r1, [pc, #780]	; 12608 <__assert_fail@plt+0xc68>
   122f8:	mov	r0, r7
   122fc:	bl	14638 <__assert_fail@plt+0x2c98>
   12300:	cmp	r0, #0
   12304:	beq	12684 <__assert_fail@plt+0xce4>
   12308:	cmp	sl, #0
   1230c:	beq	12324 <__assert_fail@plt+0x984>
   12310:	ldrd	r0, [r6, #88]	; 0x58
   12314:	ldrd	r2, [r6, #96]	; 0x60
   12318:	cmp	r1, r3
   1231c:	cmpeq	r0, r2
   12320:	bls	12684 <__assert_fail@plt+0xce4>
   12324:	mov	r2, #0
   12328:	mov	r3, #0
   1232c:	cmp	r7, #0
   12330:	strd	r2, [r6, #72]	; 0x48
   12334:	strd	r2, [r6, #64]	; 0x40
   12338:	strd	r2, [r6, #56]	; 0x38
   1233c:	strd	r2, [r6, #48]	; 0x30
   12340:	strd	r2, [r6, #40]	; 0x28
   12344:	strd	r2, [r6, #32]
   12348:	beq	12458 <__assert_fail@plt+0xab8>
   1234c:	ldr	r1, [sp, #144]	; 0x90
   12350:	cmp	r1, #1
   12354:	beq	12434 <__assert_fail@plt+0xa94>
   12358:	cmp	r1, #0
   1235c:	ldrne	r0, [sp, #140]	; 0x8c
   12360:	bne	12420 <__assert_fail@plt+0xa80>
   12364:	ldr	r4, [pc, #676]	; 12610 <__assert_fail@plt+0xc70>
   12368:	mov	r5, r1
   1236c:	mov	r0, r4
   12370:	bl	12998 <__assert_fail@plt+0xff8>
   12374:	subs	r8, r0, #0
   12378:	blt	12650 <__assert_fail@plt+0xcb0>
   1237c:	add	r2, sp, #160	; 0xa0
   12380:	mov	r1, r8
   12384:	mov	r0, #3
   12388:	bl	1167c <__fxstat64@plt>
   1238c:	subs	r9, r0, #0
   12390:	bne	12200 <__assert_fail@plt+0x860>
   12394:	ldr	r2, [sp, #244]	; 0xf4
   12398:	ldr	r3, [sp, #240]	; 0xf0
   1239c:	str	r2, [sp, #156]	; 0x9c
   123a0:	str	r3, [sp, #152]	; 0x98
   123a4:	ldrd	r2, [sp, #208]	; 0xd0
   123a8:	add	r0, sp, #148	; 0x94
   123ac:	strd	r2, [sp, #48]	; 0x30
   123b0:	bl	11610 <time@plt>
   123b4:	cmn	r0, #1
   123b8:	beq	12578 <__assert_fail@plt+0xbd8>
   123bc:	ldr	r1, [sp, #240]	; 0xf0
   123c0:	ldr	r0, [sp, #148]	; 0x94
   123c4:	bl	11850 <difftime@plt>
   123c8:	ldr	r3, [pc, #532]	; 125e4 <__assert_fail@plt+0xc44>
   123cc:	ldr	r2, [r3, #8]
   123d0:	ldr	r3, [pc, #572]	; 12614 <__assert_fail@plt+0xc74>
   123d4:	mul	r3, r3, r2
   123d8:	vmov	s15, r3
   123dc:	vcvt.f64.u32	d7, s15
   123e0:	vcmpe.f64	d0, d7
   123e4:	vmov.f64	d8, d0
   123e8:	vmrs	APSR_nzcv, fpscr
   123ec:	bgt	1247c <__assert_fail@plt+0xadc>
   123f0:	mov	r0, r8
   123f4:	ldr	r1, [pc, #528]	; 1260c <__assert_fail@plt+0xc6c>
   123f8:	bl	114fc <fdopen@plt>
   123fc:	subs	r9, r0, #0
   12400:	beq	12650 <__assert_fail@plt+0xcb0>
   12404:	ldr	r3, [pc, #492]	; 125f8 <__assert_fail@plt+0xc58>
   12408:	ldr	r2, [sp, #92]	; 0x5c
   1240c:	ldr	r1, [r3]
   12410:	add	r3, sp, #152	; 0x98
   12414:	sub	r0, fp, r1
   12418:	add	r1, r2, r1, lsl #2
   1241c:	b	12264 <__assert_fail@plt+0x8c4>
   12420:	add	r0, r7, r0
   12424:	bl	115bc <strndup@plt>
   12428:	mov	r5, r0
   1242c:	mov	r4, r0
   12430:	b	1236c <__assert_fail@plt+0x9cc>
   12434:	ldr	r0, [sp, #140]	; 0x8c
   12438:	ldrb	r3, [r7, r0]
   1243c:	cmp	r3, #45	; 0x2d
   12440:	beq	12558 <__assert_fail@plt+0xbb8>
   12444:	cmp	r3, #46	; 0x2e
   12448:	bne	12420 <__assert_fail@plt+0xa80>
   1244c:	ldr	r4, [pc, #444]	; 12610 <__assert_fail@plt+0xc70>
   12450:	mov	r5, #0
   12454:	b	1236c <__assert_fail@plt+0x9cc>
   12458:	ldr	r3, [sp, #104]	; 0x68
   1245c:	cmn	r3, #1
   12460:	beq	12684 <__assert_fail@plt+0xce4>
   12464:	mov	r8, r3
   12468:	ldr	r3, [sp, #112]	; 0x70
   1246c:	ldr	r4, [r6, #108]	; 0x6c
   12470:	str	r3, [sp, #104]	; 0x68
   12474:	mov	r5, r7
   12478:	b	1237c <__assert_fail@plt+0x9dc>
   1247c:	mov	r2, #5
   12480:	ldr	r1, [pc, #400]	; 12618 <__assert_fail@plt+0xc78>
   12484:	mov	r0, r9
   12488:	bl	11628 <dcgettext@plt>
   1248c:	mov	r2, r4
   12490:	mov	r1, #8
   12494:	str	r0, [sp, #116]	; 0x74
   12498:	mov	r0, r9
   1249c:	bl	1a0b4 <__assert_fail@plt+0x8714>
   124a0:	ldr	r3, [pc, #316]	; 125e4 <__assert_fail@plt+0xc44>
   124a4:	mov	r2, #5
   124a8:	ldr	r1, [pc, #364]	; 1261c <__assert_fail@plt+0xc7c>
   124ac:	ldr	r3, [r3, #8]
   124b0:	str	r3, [sp, #120]	; 0x78
   124b4:	str	r0, [sp, #128]	; 0x80
   124b8:	mov	r0, r9
   124bc:	bl	11628 <dcgettext@plt>
   124c0:	mov	r2, #5
   124c4:	ldr	r1, [pc, #336]	; 1261c <__assert_fail@plt+0xc7c>
   124c8:	str	r0, [sp, #124]	; 0x7c
   124cc:	mov	r0, r9
   124d0:	bl	11628 <dcgettext@plt>
   124d4:	vdiv.f64	d7, d8, d9
   124d8:	ldr	r1, [sp, #124]	; 0x7c
   124dc:	ldr	r3, [sp, #120]	; 0x78
   124e0:	str	r1, [sp, #4]
   124e4:	str	r3, [sp]
   124e8:	ldr	r2, [sp, #116]	; 0x74
   124ec:	ldr	r3, [sp, #128]	; 0x80
   124f0:	mov	r1, r9
   124f4:	str	r0, [sp, #16]
   124f8:	mov	r0, r9
   124fc:	vstr	d7, [sp, #8]
   12500:	bl	116d0 <error@plt>
   12504:	b	123f0 <__assert_fail@plt+0xa50>
   12508:	ldr	r3, [sp, #88]	; 0x58
   1250c:	ldr	r3, [r3]
   12510:	cmp	r3, #34	; 0x22
   12514:	bne	11fa8 <__assert_fail@plt+0x608>
   12518:	mov	r2, #5
   1251c:	ldr	r1, [pc, #288]	; 12644 <__assert_fail@plt+0xca4>
   12520:	mov	r0, #0
   12524:	mov	r5, r7
   12528:	mov	r7, r3
   1252c:	bl	11628 <dcgettext@plt>
   12530:	mov	r2, r5
   12534:	mov	r1, #8
   12538:	mov	r4, r0
   1253c:	mov	r0, #0
   12540:	bl	1a0b4 <__assert_fail@plt+0x8714>
   12544:	mov	r2, r4
   12548:	mov	r1, r7
   1254c:	mov	r3, r0
   12550:	mov	r0, #1
   12554:	bl	116d0 <error@plt>
   12558:	ldr	r3, [sp, #132]	; 0x84
   1255c:	cmp	r3, #0
   12560:	bne	126d4 <__assert_fail@plt+0xd34>
   12564:	str	r1, [sp, #132]	; 0x84
   12568:	ldr	r8, [sp, #108]	; 0x6c
   1256c:	ldr	r4, [pc, #172]	; 12620 <__assert_fail@plt+0xc80>
   12570:	mov	r5, #0
   12574:	b	1237c <__assert_fail@plt+0x9dc>
   12578:	ldr	r3, [sp, #88]	; 0x58
   1257c:	mov	r2, #5
   12580:	ldr	r1, [pc, #156]	; 12624 <__assert_fail@plt+0xc84>
   12584:	ldr	r3, [r3]
   12588:	mov	r0, r9
   1258c:	str	r3, [sp, #116]	; 0x74
   12590:	bl	11628 <dcgettext@plt>
   12594:	ldr	r3, [sp, #116]	; 0x74
   12598:	mov	r1, r3
   1259c:	mov	r2, r0
   125a0:	mov	r0, r9
   125a4:	bl	116d0 <error@plt>
   125a8:	b	123f0 <__assert_fail@plt+0xa50>
   125ac:	nop			; (mov r0, r0)
   125b0:	andeq	r0, r0, r0
   125b4:	rscsmi	r1, r5, r0, lsl #16
   125b8:	andeq	fp, r2, r8, asr #15
   125bc:	andeq	lr, r3, r8, lsr #4
   125c0:	andeq	fp, r2, ip, asr #30
   125c4:	andeq	ip, r2, r0, lsr r2
   125c8:	andeq	ip, r2, ip, ror r5
   125cc:	andeq	r4, r1, r0, lsl #16
   125d0:	ldrdeq	r2, [r1], -r8
   125d4:	andeq	ip, r2, ip, ror #4
   125d8:	andeq	ip, r2, r8, ror r2
   125dc:	andeq	ip, r2, r8, lsr #4
   125e0:	andeq	lr, r3, r0, lsl #5
   125e4:	andeq	lr, r3, ip, lsr #3
   125e8:	andeq	fp, r2, r4, asr #18
   125ec:	andeq	r0, r0, sp, asr #12
   125f0:	andeq	fp, r2, r8, ror #22
   125f4:	muleq	r2, r0, r2
   125f8:	andeq	lr, r3, r0, lsl r2
   125fc:	andeq	ip, r2, r4, lsl r3
   12600:	andeq	ip, r2, r0, lsr #3
   12604:	andeq	ip, r2, r4, ror #3
   12608:	andeq	ip, r2, r0, lsr r3
   1260c:	andeq	ip, r2, r4, asr #10
   12610:	andeq	ip, r2, r0, lsl #3
   12614:	andeq	r5, r1, r0, lsl #3
   12618:	andeq	ip, r2, ip, lsl #7
   1261c:	andeq	fp, r2, r0, asr r9
   12620:	muleq	r2, r8, r1
   12624:	andeq	ip, r2, r4, ror r3
   12628:	andeq	ip, r2, r0, asr #16
   1262c:	ldrdeq	ip, [r2], -r0
   12630:	andeq	ip, r2, r4, lsr r3
   12634:	andeq	ip, r2, r8, asr #4
   12638:	andeq	ip, r2, r0, lsr #5
   1263c:	andeq	lr, r3, r0, lsr #4
   12640:	ldrdeq	fp, [r2], -r4
   12644:	andeq	ip, r2, r0, ror #5
   12648:	andeq	ip, r2, r0, asr #3
   1264c:	andeq	ip, r2, r4, lsl #4
   12650:	ldr	r3, [sp, #88]	; 0x58
   12654:	mov	r2, r4
   12658:	mov	r1, #8
   1265c:	mov	r0, #0
   12660:	ldr	r5, [r3]
   12664:	ldr	fp, [sp, #108]	; 0x6c
   12668:	bl	1a0b4 <__assert_fail@plt+0x8714>
   1266c:	mov	r1, r5
   12670:	ldr	r2, [pc, #-80]	; 12628 <__assert_fail@plt+0xc88>
   12674:	mov	r3, r0
   12678:	mov	r0, #0
   1267c:	bl	116d0 <error@plt>
   12680:	b	11ed4 <__assert_fail@plt+0x534>
   12684:	ldr	r3, [sp, #100]	; 0x64
   12688:	mov	r4, r8
   1268c:	cmp	r3, #0
   12690:	ldr	fp, [sp, #108]	; 0x6c
   12694:	bne	126c4 <__assert_fail@plt+0xd24>
   12698:	cmp	r4, #0
   1269c:	bne	11ed4 <__assert_fail@plt+0x534>
   126a0:	ldr	r3, [sp, #96]	; 0x60
   126a4:	cmp	r3, #0
   126a8:	beq	126b8 <__assert_fail@plt+0xd18>
   126ac:	ldrd	r2, [r6, #88]	; 0x58
   126b0:	orrs	r3, r2, r3
   126b4:	beq	11ed4 <__assert_fail@plt+0x534>
   126b8:	ldr	r3, [sp, #64]	; 0x40
   126bc:	eor	fp, r3, #1
   126c0:	b	11ed4 <__assert_fail@plt+0x534>
   126c4:	mov	r1, r8
   126c8:	ldr	r0, [pc, #-164]	; 1262c <__assert_fail@plt+0xc8c>
   126cc:	bl	11550 <printf@plt>
   126d0:	b	12698 <__assert_fail@plt+0xcf8>
   126d4:	mov	r2, #5
   126d8:	ldr	r1, [pc, #-176]	; 12630 <__assert_fail@plt+0xc90>
   126dc:	mov	r0, #0
   126e0:	ldr	fp, [sp, #108]	; 0x6c
   126e4:	bl	11628 <dcgettext@plt>
   126e8:	mov	r1, #0
   126ec:	mov	r2, r0
   126f0:	mov	r0, r1
   126f4:	bl	116d0 <error@plt>
   126f8:	b	11ed4 <__assert_fail@plt+0x534>
   126fc:	ldr	r3, [sp, #88]	; 0x58
   12700:	mov	r2, #5
   12704:	ldr	r1, [pc, #-216]	; 12634 <__assert_fail@plt+0xc94>
   12708:	mov	r0, #0
   1270c:	ldr	r4, [r3]
   12710:	bl	11628 <dcgettext@plt>
   12714:	mov	r1, r4
   12718:	mov	r2, r0
   1271c:	mov	r0, #1
   12720:	bl	116d0 <error@plt>
   12724:	mov	r2, #5
   12728:	ldr	r1, [pc, #-248]	; 12638 <__assert_fail@plt+0xc98>
   1272c:	mov	r0, r3
   12730:	mov	r7, r3
   12734:	bl	11628 <dcgettext@plt>
   12738:	mov	r1, r7
   1273c:	mov	r2, r0
   12740:	mov	r0, #1
   12744:	bl	116d0 <error@plt>
   12748:	ldr	r3, [pc, #-276]	; 1263c <__assert_fail@plt+0xc9c>
   1274c:	ldr	r1, [sp, #152]	; 0x98
   12750:	ldr	r2, [r3]
   12754:	ldr	r3, [pc, #-284]	; 12640 <__assert_fail@plt+0xca0>
   12758:	str	r2, [sp]
   1275c:	mov	r2, #108	; 0x6c
   12760:	bl	1adf8 <__assert_fail@plt+0x9458>
   12764:	mov	r2, #5
   12768:	ldr	r1, [pc, #-300]	; 12644 <__assert_fail@plt+0xca4>
   1276c:	mov	r0, #0
   12770:	bl	11628 <dcgettext@plt>
   12774:	mov	r2, r7
   12778:	mov	r1, #8
   1277c:	mov	r4, r0
   12780:	mov	r0, #0
   12784:	bl	1a0b4 <__assert_fail@plt+0x8714>
   12788:	mov	r2, r4
   1278c:	mov	r1, #0
   12790:	mov	r3, r0
   12794:	mov	r0, #1
   12798:	bl	116d0 <error@plt>
   1279c:	mov	r0, r4
   127a0:	mov	r2, #5
   127a4:	ldr	r1, [pc, #-356]	; 12648 <__assert_fail@plt+0xca8>
   127a8:	bl	11628 <dcgettext@plt>
   127ac:	mov	r5, r0
   127b0:	b	12108 <__assert_fail@plt+0x768>
   127b4:	mov	r0, r4
   127b8:	mov	r2, #5
   127bc:	ldr	r1, [pc, #-376]	; 1264c <__assert_fail@plt+0xcac>
   127c0:	bl	11628 <dcgettext@plt>
   127c4:	mov	r5, r0
   127c8:	b	12108 <__assert_fail@plt+0x768>
   127cc:	mov	fp, #0
   127d0:	mov	lr, #0
   127d4:	pop	{r1}		; (ldr r1, [sp], #4)
   127d8:	mov	r2, sp
   127dc:	push	{r2}		; (str r2, [sp, #-4]!)
   127e0:	push	{r0}		; (str r0, [sp, #-4]!)
   127e4:	ldr	ip, [pc, #16]	; 127fc <__assert_fail@plt+0xe5c>
   127e8:	push	{ip}		; (str ip, [sp, #-4]!)
   127ec:	ldr	r0, [pc, #12]	; 12800 <__assert_fail@plt+0xe60>
   127f0:	ldr	r3, [pc, #12]	; 12804 <__assert_fail@plt+0xe64>
   127f4:	bl	11718 <__libc_start_main@plt>
   127f8:	bl	11964 <abort@plt>
   127fc:	andeq	fp, r2, r0, ror #13
   12800:			; <UNDEFINED> instruction: 0x000119b0
   12804:	andeq	fp, r2, r0, lsl #13
   12808:	ldr	r3, [pc, #20]	; 12824 <__assert_fail@plt+0xe84>
   1280c:	ldr	r2, [pc, #20]	; 12828 <__assert_fail@plt+0xe88>
   12810:	add	r3, pc, r3
   12814:	ldr	r2, [r3, r2]
   12818:	cmp	r2, #0
   1281c:	bxeq	lr
   12820:	b	11760 <__gmon_start__@plt>
   12824:	andeq	fp, r2, r8, ror #15
   12828:	andeq	r0, r0, r0, lsr #3
   1282c:	ldr	r3, [pc, #28]	; 12850 <__assert_fail@plt+0xeb0>
   12830:	ldr	r0, [pc, #28]	; 12854 <__assert_fail@plt+0xeb4>
   12834:	sub	r3, r3, r0
   12838:	cmp	r3, #6
   1283c:	bxls	lr
   12840:	ldr	r3, [pc, #16]	; 12858 <__assert_fail@plt+0xeb8>
   12844:	cmp	r3, #0
   12848:	bxeq	lr
   1284c:	bx	r3
   12850:	andeq	lr, r3, r7, lsl #4
   12854:	andeq	lr, r3, r4, lsl #4
   12858:	andeq	r0, r0, r0
   1285c:	ldr	r1, [pc, #36]	; 12888 <__assert_fail@plt+0xee8>
   12860:	ldr	r0, [pc, #36]	; 1288c <__assert_fail@plt+0xeec>
   12864:	sub	r1, r1, r0
   12868:	asr	r1, r1, #2
   1286c:	add	r1, r1, r1, lsr #31
   12870:	asrs	r1, r1, #1
   12874:	bxeq	lr
   12878:	ldr	r3, [pc, #16]	; 12890 <__assert_fail@plt+0xef0>
   1287c:	cmp	r3, #0
   12880:	bxeq	lr
   12884:	bx	r3
   12888:	andeq	lr, r3, r4, lsl #4
   1288c:	andeq	lr, r3, r4, lsl #4
   12890:	andeq	r0, r0, r0
   12894:	push	{r4, lr}
   12898:	ldr	r4, [pc, #24]	; 128b8 <__assert_fail@plt+0xf18>
   1289c:	ldrb	r3, [r4]
   128a0:	cmp	r3, #0
   128a4:	popne	{r4, pc}
   128a8:	bl	1282c <__assert_fail@plt+0xe8c>
   128ac:	mov	r3, #1
   128b0:	strb	r3, [r4]
   128b4:	pop	{r4, pc}
   128b8:	andeq	lr, r3, r4, lsr #4
   128bc:	ldr	r0, [pc, #40]	; 128ec <__assert_fail@plt+0xf4c>
   128c0:	ldr	r3, [r0]
   128c4:	cmp	r3, #0
   128c8:	bne	128d0 <__assert_fail@plt+0xf30>
   128cc:	b	1285c <__assert_fail@plt+0xebc>
   128d0:	ldr	r3, [pc, #24]	; 128f0 <__assert_fail@plt+0xf50>
   128d4:	cmp	r3, #0
   128d8:	beq	128cc <__assert_fail@plt+0xf2c>
   128dc:	push	{r4, lr}
   128e0:	blx	r3
   128e4:	pop	{r4, lr}
   128e8:	b	1285c <__assert_fail@plt+0xebc>
   128ec:	andeq	sp, r3, r4, lsl pc
	...
   128f8:	ldr	r3, [pc, #76]	; 1294c <__assert_fail@plt+0xfac>
   128fc:	push	{r4, r5, r6, lr}
   12900:	ldr	r4, [r3]
   12904:	cmp	r4, #0
   12908:	beq	12944 <__assert_fail@plt+0xfa4>
   1290c:	mov	r5, r0
   12910:	ldr	r3, [r4]
   12914:	ldr	r1, [r4, #4]
   12918:	mov	r0, r5
   1291c:	blx	r3
   12920:	ldr	r4, [r4, #8]
   12924:	ands	r3, r0, #3
   12928:	movne	r3, #1
   1292c:	cmp	r4, #0
   12930:	moveq	r3, #0
   12934:	andne	r3, r3, #1
   12938:	cmp	r3, #0
   1293c:	bne	12910 <__assert_fail@plt+0xf70>
   12940:	pop	{r4, r5, r6, pc}
   12944:	mov	r0, #3
   12948:	pop	{r4, r5, r6, pc}
   1294c:	andeq	lr, r3, r8, lsr #4
   12950:	ldrd	r2, [r1, #8]
   12954:	push	{r4, r5}
   12958:	ldrd	r4, [r1]
   1295c:	adds	r2, r2, #1
   12960:	adc	r3, r3, #0
   12964:	cmp	r3, r5
   12968:	cmpeq	r2, r4
   1296c:	movcs	r0, #8
   12970:	movcc	r0, #1
   12974:	strd	r2, [r1, #8]
   12978:	pop	{r4, r5}
   1297c:	bx	lr
   12980:	ldrd	r2, [r1, #8]
   12984:	mov	r0, #1
   12988:	adds	r2, r2, #1
   1298c:	adc	r3, r3, #0
   12990:	strd	r2, [r1, #8]
   12994:	bx	lr
   12998:	push	{r4, lr}
   1299c:	mov	r1, #131072	; 0x20000
   129a0:	bl	148e4 <__assert_fail@plt+0x2f44>
   129a4:	subs	r4, r0, #0
   129a8:	blt	129c0 <__assert_fail@plt+0x1020>
   129ac:	mov	r2, #1
   129b0:	mov	r1, #2
   129b4:	bl	1b710 <__assert_fail@plt+0x9d70>
   129b8:	cmp	r0, #0
   129bc:	bne	129c8 <__assert_fail@plt+0x1028>
   129c0:	mov	r0, r4
   129c4:	pop	{r4, pc}
   129c8:	mov	r0, r4
   129cc:	bl	1197c <close@plt>
   129d0:	mvn	r4, #0
   129d4:	b	129c0 <__assert_fail@plt+0x1020>
   129d8:	ldr	r3, [pc, #4]	; 129e4 <__assert_fail@plt+0x1044>
   129dc:	ldr	r0, [r3, #4]
   129e0:	b	1b944 <__assert_fail@plt+0x9fa4>
   129e4:	andeq	lr, r3, r8, lsr #4
   129e8:	subs	r4, r0, #0
   129ec:	push	{r7, lr}
   129f0:	beq	12a28 <__assert_fail@plt+0x1088>
   129f4:	ldr	r3, [pc, #104]	; 12a64 <__assert_fail@plt+0x10c4>
   129f8:	mov	r2, #5
   129fc:	ldr	r1, [pc, #100]	; 12a68 <__assert_fail@plt+0x10c8>
   12a00:	mov	r0, #0
   12a04:	ldr	r5, [r3]
   12a08:	bl	11628 <dcgettext@plt>
   12a0c:	ldr	r3, [pc, #88]	; 12a6c <__assert_fail@plt+0x10cc>
   12a10:	ldr	r2, [r3]
   12a14:	mov	r1, r0
   12a18:	mov	r0, r5
   12a1c:	bl	117c0 <fprintf@plt>
   12a20:	mov	r0, r4
   12a24:	bl	11784 <exit@plt>
   12a28:	ldr	r5, [pc, #64]	; 12a70 <__assert_fail@plt+0x10d0>
   12a2c:	mov	r2, #5
   12a30:	ldr	r1, [pc, #60]	; 12a74 <__assert_fail@plt+0x10d4>
   12a34:	ldr	r7, [r5]
   12a38:	bl	11628 <dcgettext@plt>
   12a3c:	ldr	r6, [pc, #40]	; 12a6c <__assert_fail@plt+0x10cc>
   12a40:	ldr	r2, [r6]
   12a44:	mov	r1, r0
   12a48:	mov	r0, r7
   12a4c:	bl	117c0 <fprintf@plt>
   12a50:	ldr	r1, [r6]
   12a54:	ldr	r0, [r5]
   12a58:	bl	146d0 <__assert_fail@plt+0x2d30>
   12a5c:	mov	r0, r4
   12a60:	bl	11784 <exit@plt>
   12a64:	andeq	lr, r3, r8, lsl r2
   12a68:	andeq	fp, r2, r8, asr r9
   12a6c:	andeq	lr, r3, r0, lsr #5
   12a70:	andeq	lr, r3, ip, lsl r2
   12a74:	andeq	fp, r2, r0, lsl #19
   12a78:	push	{r4, r5, r6, lr}
   12a7c:	mov	r5, r0
   12a80:	mov	r0, #12
   12a84:	mov	r4, r1
   12a88:	bl	1a870 <__assert_fail@plt+0x8ed0>
   12a8c:	ldr	r3, [pc, #36]	; 12ab8 <__assert_fail@plt+0x1118>
   12a90:	mov	ip, #0
   12a94:	ldr	r2, [r3, #8]
   12a98:	cmp	r2, ip
   12a9c:	str	r5, [r0]
   12aa0:	str	r4, [r0, #4]
   12aa4:	str	ip, [r0, #8]
   12aa8:	streq	r0, [r3]
   12aac:	strne	r0, [r2, #8]
   12ab0:	str	r0, [r3, #8]
   12ab4:	pop	{r4, r5, r6, pc}
   12ab8:	andeq	lr, r3, r8, lsr #4
   12abc:	push	{r4, lr}
   12ac0:	ldr	r4, [pc, #32]	; 12ae8 <__assert_fail@plt+0x1148>
   12ac4:	ldr	r0, [r0, #12]
   12ac8:	ldr	r1, [r4]
   12acc:	bl	1194c <fputs@plt>
   12ad0:	ldr	r3, [pc, #20]	; 12aec <__assert_fail@plt+0x114c>
   12ad4:	ldr	r1, [r4]
   12ad8:	ldr	r0, [r3]
   12adc:	bl	118f8 <putc@plt>
   12ae0:	mov	r0, #1
   12ae4:	pop	{r4, pc}
   12ae8:	andeq	lr, r3, ip, lsl r2
   12aec:	andeq	lr, r3, ip, lsr #3
   12af0:	push	{r4, lr}
   12af4:	sub	sp, sp, #8
   12af8:	ldr	r3, [pc, #56]	; 12b38 <__assert_fail@plt+0x1198>
   12afc:	ldr	r4, [pc, #56]	; 12b3c <__assert_fail@plt+0x119c>
   12b00:	ldr	ip, [r0, #12]
   12b04:	ldrb	r2, [r3, #12]
   12b08:	ldr	r1, [r3, #4]
   12b0c:	ldr	r0, [r4]
   12b10:	str	ip, [sp]
   12b14:	ldr	r3, [pc, #36]	; 12b40 <__assert_fail@plt+0x11a0>
   12b18:	bl	14160 <__assert_fail@plt+0x27c0>
   12b1c:	ldr	r3, [pc, #32]	; 12b44 <__assert_fail@plt+0x11a4>
   12b20:	ldr	r1, [r4]
   12b24:	ldr	r0, [r3]
   12b28:	bl	118f8 <putc@plt>
   12b2c:	mov	r0, #1
   12b30:	add	sp, sp, #8
   12b34:	pop	{r4, pc}
   12b38:	andeq	lr, r3, r8, lsr #4
   12b3c:	andeq	lr, r3, ip, lsl r2
   12b40:	andeq	ip, r2, r0, asr #16
   12b44:	andeq	lr, r3, ip, lsr #3
   12b48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b4c:	mov	r6, r1
   12b50:	ldr	r7, [r0, #12]
   12b54:	mov	r0, r7
   12b58:	bl	117a8 <strlen@plt>
   12b5c:	ldrd	r4, [r6, #8]
   12b60:	ldrd	r2, [r6, #16]
   12b64:	adds	r4, r4, #1
   12b68:	adc	r5, r5, #0
   12b6c:	strd	r4, [r6, #8]
   12b70:	adds	r4, r2, r0
   12b74:	adc	r5, r3, #0
   12b78:	mov	r0, r4
   12b7c:	mov	r1, r5
   12b80:	strd	r0, [r6, #16]
   12b84:	ldrb	r4, [r7]
   12b88:	cmp	r4, #0
   12b8c:	beq	12c38 <__assert_fail@plt+0x1298>
   12b90:	mov	r9, #0
   12b94:	mov	r5, r7
   12b98:	mov	sl, r9
   12b9c:	mov	r7, r9
   12ba0:	mov	r8, #1
   12ba4:	b	12bcc <__assert_fail@plt+0x122c>
   12ba8:	bl	11778 <__ctype_b_loc@plt>
   12bac:	lsl	r4, r4, #1
   12bb0:	ldr	r3, [r0]
   12bb4:	ldrh	r3, [r3, r4]
   12bb8:	ldrb	r4, [r5, #1]!
   12bbc:	tst	r3, #8192	; 0x2000
   12bc0:	movne	r7, #1
   12bc4:	cmp	r4, #0
   12bc8:	beq	12bf0 <__assert_fail@plt+0x1250>
   12bcc:	tst	r4, #128	; 0x80
   12bd0:	bne	12c40 <__assert_fail@plt+0x12a0>
   12bd4:	cmp	r4, #10
   12bd8:	bne	12ba8 <__assert_fail@plt+0x1208>
   12bdc:	ldrb	r4, [r5, #1]!
   12be0:	mov	r9, r8
   12be4:	mov	r7, #1
   12be8:	cmp	r4, #0
   12bec:	bne	12bcc <__assert_fail@plt+0x122c>
   12bf0:	cmp	sl, #0
   12bf4:	beq	12c08 <__assert_fail@plt+0x1268>
   12bf8:	ldrd	r2, [r6, #40]	; 0x28
   12bfc:	adds	r2, r2, #1
   12c00:	adc	r3, r3, #0
   12c04:	strd	r2, [r6, #40]	; 0x28
   12c08:	cmp	r7, #0
   12c0c:	beq	12c20 <__assert_fail@plt+0x1280>
   12c10:	ldrd	r2, [r6, #24]
   12c14:	adds	r2, r2, #1
   12c18:	adc	r3, r3, #0
   12c1c:	strd	r2, [r6, #24]
   12c20:	cmp	r9, #0
   12c24:	beq	12c38 <__assert_fail@plt+0x1298>
   12c28:	ldrd	r2, [r6, #32]
   12c2c:	adds	r2, r2, #1
   12c30:	adc	r3, r3, #0
   12c34:	strd	r2, [r6, #32]
   12c38:	mov	r0, #1
   12c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c40:	mov	sl, r8
   12c44:	b	12ba8 <__assert_fail@plt+0x1208>
   12c48:	push	{lr}		; (str lr, [sp, #-4]!)
   12c4c:	sub	sp, sp, #108	; 0x6c
   12c50:	ldr	r1, [r0, #12]
   12c54:	mov	r2, sp
   12c58:	mov	r0, #3
   12c5c:	bl	11988 <__lxstat64@plt>
   12c60:	cmp	r0, #0
   12c64:	movne	r0, #4
   12c68:	moveq	r0, #1
   12c6c:	add	sp, sp, #108	; 0x6c
   12c70:	pop	{pc}		; (ldr pc, [sp], #4)
   12c74:	push	{lr}		; (str lr, [sp, #-4]!)
   12c78:	sub	sp, sp, #108	; 0x6c
   12c7c:	ldr	r1, [r0, #12]
   12c80:	mov	r2, sp
   12c84:	mov	r0, #3
   12c88:	bl	11988 <__lxstat64@plt>
   12c8c:	cmp	r0, #0
   12c90:	moveq	r0, #4
   12c94:	movne	r0, #1
   12c98:	add	sp, sp, #108	; 0x6c
   12c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   12ca0:	push	{lr}		; (str lr, [sp, #-4]!)
   12ca4:	sub	sp, sp, #108	; 0x6c
   12ca8:	ldr	r1, [r0, #12]
   12cac:	mov	r2, sp
   12cb0:	mov	r0, #3
   12cb4:	bl	11928 <__xstat64@plt>
   12cb8:	cmp	r0, #0
   12cbc:	movne	r0, #4
   12cc0:	moveq	r0, #1
   12cc4:	add	sp, sp, #108	; 0x6c
   12cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ccc:	push	{lr}		; (str lr, [sp, #-4]!)
   12cd0:	sub	sp, sp, #108	; 0x6c
   12cd4:	ldr	r1, [r0, #12]
   12cd8:	mov	r2, sp
   12cdc:	mov	r0, #3
   12ce0:	bl	11928 <__xstat64@plt>
   12ce4:	cmp	r0, #0
   12ce8:	moveq	r0, #4
   12cec:	movne	r0, #1
   12cf0:	add	sp, sp, #108	; 0x6c
   12cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   12cf8:	push	{r4, lr}
   12cfc:	ldr	r0, [r0, #20]
   12d00:	bl	1788c <__assert_fail@plt+0x5eec>
   12d04:	cmp	r0, #0
   12d08:	movne	r0, #2
   12d0c:	moveq	r0, #4
   12d10:	pop	{r4, pc}
   12d14:	push	{r4, lr}
   12d18:	ldr	r0, [r0, #20]
   12d1c:	bl	15fcc <__assert_fail@plt+0x462c>
   12d20:	cmp	r0, #0
   12d24:	movne	r0, #2
   12d28:	moveq	r0, #4
   12d2c:	pop	{r4, pc}
   12d30:	mov	r3, r1
   12d34:	push	{r4, lr}
   12d38:	mov	r2, #0
   12d3c:	ldr	r1, [r0, #20]
   12d40:	mov	r0, r3
   12d44:	bl	116dc <fnmatch@plt>
   12d48:	cmp	r0, #0
   12d4c:	movne	r0, #4
   12d50:	moveq	r0, #2
   12d54:	pop	{r4, pc}
   12d58:	mov	r3, r1
   12d5c:	push	{r4, lr}
   12d60:	mov	r2, #16
   12d64:	ldr	r1, [r0, #20]
   12d68:	mov	r0, r3
   12d6c:	bl	116dc <fnmatch@plt>
   12d70:	cmp	r0, #0
   12d74:	movne	r0, #4
   12d78:	moveq	r0, #2
   12d7c:	pop	{r4, pc}
   12d80:	push	{r4, r5, lr}
   12d84:	sub	sp, sp, #12
   12d88:	ldr	r4, [r0, #20]
   12d8c:	mov	r5, r1
   12d90:	mov	r0, r4
   12d94:	bl	117a8 <strlen@plt>
   12d98:	mov	r3, #0
   12d9c:	mov	r1, r4
   12da0:	str	r3, [sp, #4]
   12da4:	mov	r2, r0
   12da8:	str	r0, [sp]
   12dac:	mov	r0, r5
   12db0:	bl	28f58 <__assert_fail@plt+0x175b8>
   12db4:	cmp	r0, #0
   12db8:	movlt	r0, #4
   12dbc:	movge	r0, #2
   12dc0:	add	sp, sp, #12
   12dc4:	pop	{r4, r5, pc}
   12dc8:	push	{r4, lr}
   12dcc:	mov	r4, r0
   12dd0:	ldr	r0, [r0, #12]
   12dd4:	bl	14734 <__assert_fail@plt+0x2d94>
   12dd8:	str	r0, [r4, #20]
   12ddc:	mov	r0, #1
   12de0:	pop	{r4, pc}
   12de4:	ldr	r3, [pc, #72]	; 12e34 <__assert_fail@plt+0x1494>
   12de8:	push	{r4, r5, r6, lr}
   12dec:	ldr	r4, [r3, #16]
   12df0:	cmp	r4, #0
   12df4:	beq	12e2c <__assert_fail@plt+0x148c>
   12df8:	mov	r5, r0
   12dfc:	ldr	r3, [r4]
   12e00:	ldr	r1, [r4, #4]
   12e04:	mov	r0, r5
   12e08:	blx	r3
   12e0c:	ldr	r4, [r4, #8]
   12e10:	cmp	r4, #0
   12e14:	moveq	r3, #0
   12e18:	andne	r3, r0, #1
   12e1c:	cmp	r3, #0
   12e20:	bne	12dfc <__assert_fail@plt+0x145c>
   12e24:	cmp	r0, #1
   12e28:	popne	{r4, r5, r6, pc}
   12e2c:	mov	r0, #2
   12e30:	pop	{r4, r5, r6, pc}
   12e34:	andeq	lr, r3, r8, lsr #4
   12e38:	ldr	r3, [pc, #100]	; 12ea4 <__assert_fail@plt+0x1504>
   12e3c:	push	{r4, r5, r6, lr}
   12e40:	ldr	r4, [r3]
   12e44:	ldr	r6, [r3, #16]
   12e48:	cmp	r4, r6
   12e4c:	beq	12e9c <__assert_fail@plt+0x14fc>
   12e50:	mov	r5, r0
   12e54:	ldr	r3, [r4]
   12e58:	ldr	r1, [r4, #4]
   12e5c:	mov	r0, r5
   12e60:	blx	r3
   12e64:	ldr	r4, [r4, #8]
   12e68:	and	r3, r0, #5
   12e6c:	cmp	r6, r4
   12e70:	cmpne	r3, #0
   12e74:	bne	12e54 <__assert_fail@plt+0x14b4>
   12e78:	cmp	r0, #1
   12e7c:	beq	12e94 <__assert_fail@plt+0x14f4>
   12e80:	tst	r0, #12
   12e84:	popne	{r4, r5, r6, pc}
   12e88:	mov	r0, r5
   12e8c:	pop	{r4, r5, r6, lr}
   12e90:	b	12de4 <__assert_fail@plt+0x1444>
   12e94:	mov	r0, #4
   12e98:	pop	{r4, r5, r6, pc}
   12e9c:	mov	r0, #5
   12ea0:	pop	{r4, r5, r6, pc}
   12ea4:	andeq	lr, r3, r8, lsr #4
   12ea8:	ldr	r3, [pc, #104]	; 12f18 <__assert_fail@plt+0x1578>
   12eac:	push	{r4, r5, r6, lr}
   12eb0:	mov	r6, r0
   12eb4:	ldr	r4, [r3]
   12eb8:	ldr	r5, [r3, #16]
   12ebc:	cmp	r4, r5
   12ec0:	beq	12f04 <__assert_fail@plt+0x1564>
   12ec4:	ldr	r3, [r4]
   12ec8:	ldr	r1, [r4, #4]
   12ecc:	mov	r0, r6
   12ed0:	blx	r3
   12ed4:	ldr	r4, [r4, #8]
   12ed8:	ands	r3, r0, #3
   12edc:	movne	r3, #1
   12ee0:	cmp	r5, r4
   12ee4:	moveq	r3, #0
   12ee8:	andne	r3, r3, #1
   12eec:	cmp	r3, #0
   12ef0:	bne	12ec4 <__assert_fail@plt+0x1524>
   12ef4:	cmp	r0, #1
   12ef8:	beq	12f10 <__assert_fail@plt+0x1570>
   12efc:	tst	r0, #12
   12f00:	popne	{r4, r5, r6, pc}
   12f04:	mov	r0, r6
   12f08:	pop	{r4, r5, r6, lr}
   12f0c:	b	12de4 <__assert_fail@plt+0x1444>
   12f10:	mov	r0, #4
   12f14:	pop	{r4, r5, r6, pc}
   12f18:	andeq	lr, r3, r8, lsr #4
   12f1c:	mvn	r3, r1
   12f20:	cmp	r3, r2
   12f24:	push	{r4, lr}
   12f28:	mov	r4, r0
   12f2c:	bcc	12f5c <__assert_fail@plt+0x15bc>
   12f30:	ldr	r0, [r0, #16]
   12f34:	add	r3, r1, r2
   12f38:	cmp	r0, r3
   12f3c:	popcs	{r4, pc}
   12f40:	mov	r1, r4
   12f44:	mov	r2, #1
   12f48:	str	r3, [r1, #16]!
   12f4c:	ldr	r0, [r4, #12]
   12f50:	bl	1a978 <__assert_fail@plt+0x8fd8>
   12f54:	str	r0, [r4, #12]
   12f58:	pop	{r4, pc}
   12f5c:	mov	r2, #5
   12f60:	ldr	r1, [pc, #24]	; 12f80 <__assert_fail@plt+0x15e0>
   12f64:	mov	r0, #0
   12f68:	bl	11628 <dcgettext@plt>
   12f6c:	ldr	r3, [r4, #28]
   12f70:	mov	r1, #0
   12f74:	mov	r2, r0
   12f78:	mov	r0, #1
   12f7c:	bl	116d0 <error@plt>
   12f80:	andeq	fp, r2, r0, lsr #22
   12f84:	ldr	r3, [r0]
   12f88:	cmn	r3, #1
   12f8c:	beq	1307c <__assert_fail@plt+0x16dc>
   12f90:	cmp	r3, #30
   12f94:	push	{r4, r5, r6, r7, r8, lr}
   12f98:	mov	r4, r0
   12f9c:	beq	13084 <__assert_fail@plt+0x16e4>
   12fa0:	ldr	r0, [r0, #4]
   12fa4:	sub	r5, r3, #14
   12fa8:	add	r5, r5, r0
   12fac:	cmp	r5, #0
   12fb0:	str	r5, [r4, #4]
   12fb4:	blt	130f8 <__assert_fail@plt+0x1758>
   12fb8:	mov	r7, #2
   12fbc:	mov	r6, #1
   12fc0:	ldr	r0, [r4, #24]
   12fc4:	bl	11970 <getc@plt>
   12fc8:	cmp	r0, #30
   12fcc:	str	r0, [r4]
   12fd0:	ble	1304c <__assert_fail@plt+0x16ac>
   12fd4:	cmp	r0, #127	; 0x7f
   12fd8:	bgt	13000 <__assert_fail@plt+0x1660>
   12fdc:	mov	r2, r6
   12fe0:	mov	r1, r5
   12fe4:	mov	r0, r4
   12fe8:	bl	12f1c <__assert_fail@plt+0x157c>
   12fec:	ldr	r3, [r4, #12]
   12ff0:	ldr	r2, [r4]
   12ff4:	strb	r2, [r3, r5]
   12ff8:	add	r5, r5, #1
   12ffc:	b	12fc0 <__assert_fail@plt+0x1620>
   13000:	mov	r1, r5
   13004:	mov	r2, r7
   13008:	mov	r0, r4
   1300c:	bl	12f1c <__assert_fail@plt+0x157c>
   13010:	ldr	r2, [r4]
   13014:	mov	r3, r4
   13018:	and	r2, r2, #127	; 0x7f
   1301c:	ldr	r1, [r4, #12]
   13020:	str	r2, [r3], r2
   13024:	ldrb	r2, [r3, #36]	; 0x24
   13028:	add	r3, r5, #1
   1302c:	strb	r2, [r1, r5]
   13030:	ldr	r2, [r4]
   13034:	ldr	r1, [r4, #12]
   13038:	add	r2, r4, r2
   1303c:	add	r5, r5, #2
   13040:	ldrb	r2, [r2, #164]	; 0xa4
   13044:	strb	r2, [r1, r3]
   13048:	b	12fc0 <__assert_fail@plt+0x1620>
   1304c:	mov	r0, r4
   13050:	mov	r2, #1
   13054:	mov	r1, r5
   13058:	bl	12f1c <__assert_fail@plt+0x157c>
   1305c:	ldr	r3, [r4, #12]
   13060:	mov	r2, #0
   13064:	mov	r0, #1
   13068:	strb	r2, [r3, r5]
   1306c:	ldr	r3, [r4, #12]
   13070:	str	r5, [r4, #8]
   13074:	str	r3, [r4, #20]
   13078:	pop	{r4, r5, r6, r7, r8, pc}
   1307c:	mov	r0, #8
   13080:	bx	lr
   13084:	ldr	r3, [r0, #4]
   13088:	ldr	r1, [r0, #28]
   1308c:	sub	r2, r3, #14
   13090:	cmp	r2, #0
   13094:	rsb	r5, r3, #14
   13098:	ldrge	r3, [r0, #8]
   1309c:	str	r2, [r0, #4]
   130a0:	subge	r2, r3, r2
   130a4:	ldrlt	r2, [r0, #8]
   130a8:	add	r3, r0, #32
   130ac:	ldr	r0, [r0, #24]
   130b0:	bl	13f70 <__assert_fail@plt+0x25d0>
   130b4:	cmp	r5, r0
   130b8:	bgt	130e4 <__assert_fail@plt+0x1744>
   130bc:	ldr	r5, [r4, #4]
   130c0:	add	r5, r0, r5
   130c4:	cmp	r5, #0
   130c8:	str	r5, [r4, #4]
   130cc:	bge	12fb8 <__assert_fail@plt+0x1618>
   130d0:	ldr	r3, [pc, #52]	; 1310c <__assert_fail@plt+0x176c>
   130d4:	mov	r2, #480	; 0x1e0
   130d8:	ldr	r1, [pc, #48]	; 13110 <__assert_fail@plt+0x1770>
   130dc:	ldr	r0, [pc, #48]	; 13114 <__assert_fail@plt+0x1774>
   130e0:	bl	119a0 <__assert_fail@plt>
   130e4:	ldr	r3, [pc, #32]	; 1310c <__assert_fail@plt+0x176c>
   130e8:	ldr	r2, [pc, #40]	; 13118 <__assert_fail@plt+0x1778>
   130ec:	ldr	r1, [pc, #28]	; 13110 <__assert_fail@plt+0x1770>
   130f0:	ldr	r0, [pc, #36]	; 1311c <__assert_fail@plt+0x177c>
   130f4:	bl	119a0 <__assert_fail@plt>
   130f8:	ldr	r3, [pc, #12]	; 1310c <__assert_fail@plt+0x176c>
   130fc:	ldr	r2, [pc, #28]	; 13120 <__assert_fail@plt+0x1780>
   13100:	ldr	r1, [pc, #8]	; 13110 <__assert_fail@plt+0x1770>
   13104:	ldr	r0, [pc, #8]	; 13114 <__assert_fail@plt+0x1774>
   13108:	bl	119a0 <__assert_fail@plt>
   1310c:	andeq	fp, r2, r8, lsl #14
   13110:	andeq	fp, r2, r8, ror #22
   13114:	andeq	fp, r2, r4, lsl #23
   13118:	ldrdeq	r0, [r0], -lr
   1311c:	andeq	fp, r2, r4, ror fp
   13120:	andeq	r0, r0, r5, ror #3
   13124:	push	{r4, r5, r6, lr}
   13128:	mov	r4, r0
   1312c:	mov	r5, r1
   13130:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   13134:	cmp	r0, #1
   13138:	bne	13158 <__assert_fail@plt+0x17b8>
   1313c:	mov	r1, r5
   13140:	ldr	r0, [r4, #20]
   13144:	bl	2a274 <__assert_fail@plt+0x188d4>
   13148:	cmp	r0, #0
   1314c:	movne	r0, #2
   13150:	moveq	r0, #4
   13154:	pop	{r4, r5, r6, pc}
   13158:	ldr	r3, [pc, #12]	; 1316c <__assert_fail@plt+0x17cc>
   1315c:	ldr	r2, [pc, #12]	; 13170 <__assert_fail@plt+0x17d0>
   13160:	ldr	r1, [pc, #12]	; 13174 <__assert_fail@plt+0x17d4>
   13164:	ldr	r0, [pc, #12]	; 13178 <__assert_fail@plt+0x17d8>
   13168:	bl	119a0 <__assert_fail@plt>
   1316c:	andeq	fp, r2, ip, lsl r7
   13170:			; <UNDEFINED> instruction: 0x000002b2
   13174:	andeq	fp, r2, r8, ror #22
   13178:	muleq	r2, ip, fp
   1317c:	push	{r4, r5, r6, lr}
   13180:	mov	r4, r0
   13184:	mov	r5, r1
   13188:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1318c:	cmp	r0, #1
   13190:	bne	131b0 <__assert_fail@plt+0x1810>
   13194:	mov	r1, r5
   13198:	ldr	r0, [r4, #20]
   1319c:	bl	29834 <__assert_fail@plt+0x17e94>
   131a0:	cmp	r0, #0
   131a4:	movne	r0, #2
   131a8:	moveq	r0, #4
   131ac:	pop	{r4, r5, r6, pc}
   131b0:	ldr	r3, [pc, #12]	; 131c4 <__assert_fail@plt+0x1824>
   131b4:	ldr	r2, [pc, #12]	; 131c8 <__assert_fail@plt+0x1828>
   131b8:	ldr	r1, [pc, #12]	; 131cc <__assert_fail@plt+0x182c>
   131bc:	ldr	r0, [pc, #12]	; 131d0 <__assert_fail@plt+0x1830>
   131c0:	bl	119a0 <__assert_fail@plt>
   131c4:	andeq	fp, r2, r4, asr #14
   131c8:	andeq	r0, r0, sl, asr #5
   131cc:	andeq	fp, r2, r8, ror #22
   131d0:	muleq	r2, ip, fp
   131d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131d8:	sub	sp, sp, #2944	; 0xb80
   131dc:	ldr	r4, [pc, #2604]	; 13c10 <__assert_fail@plt+0x2270>
   131e0:	sub	sp, sp, #4
   131e4:	mov	r7, r2
   131e8:	ldr	r2, [r4, #20]
   131ec:	ldr	ip, [sp, #2996]	; 0xbb4
   131f0:	str	r2, [sp, #16]
   131f4:	ldr	r2, [sp, #2984]	; 0xba8
   131f8:	cmp	ip, #0
   131fc:	str	r2, [sp, #20]
   13200:	ldr	r2, [sp, #2988]	; 0xbac
   13204:	mov	r8, r1
   13208:	str	r2, [sp, #24]
   1320c:	ldrne	r2, [sp, #3024]	; 0xbd0
   13210:	mov	r1, #128	; 0x80
   13214:	orrne	r2, r2, #4194304	; 0x400000
   13218:	strne	r2, [sp, #3024]	; 0xbd0
   1321c:	mov	sl, r0
   13220:	mov	r2, #0
   13224:	mov	r0, r1
   13228:	str	r3, [sp, #68]	; 0x44
   1322c:	str	r1, [sp, #60]	; 0x3c
   13230:	str	r2, [sp, #76]	; 0x4c
   13234:	str	r2, [sp, #48]	; 0x30
   13238:	str	r2, [sp, #52]	; 0x34
   1323c:	str	r2, [r4]
   13240:	str	r2, [r4, #8]
   13244:	str	r2, [r4, #16]
   13248:	strb	r2, [r4, #24]
   1324c:	ldr	fp, [sp, #3020]	; 0xbcc
   13250:	str	r7, [sp, #72]	; 0x48
   13254:	bl	1a870 <__assert_fail@plt+0x8ed0>
   13258:	ldr	r3, [sp, #68]	; 0x44
   1325c:	mov	r2, #2
   13260:	mov	r1, #1
   13264:	str	r0, [sp, #56]	; 0x38
   13268:	bl	116ac <fread@plt>
   1326c:	cmp	r0, #2
   13270:	mov	r6, r0
   13274:	bhi	13b6c <__assert_fail@plt+0x21cc>
   13278:	bne	13344 <__assert_fail@plt+0x19a4>
   1327c:	ldr	r9, [sp, #56]	; 0x38
   13280:	ldrb	r5, [r9, #1]
   13284:	cmp	r5, #0
   13288:	bne	13344 <__assert_fail@plt+0x19a4>
   1328c:	bl	11778 <__ctype_b_loc@plt>
   13290:	ldrb	r3, [r9]
   13294:	lsl	r2, r3, #1
   13298:	ldr	r1, [r0]
   1329c:	ldrh	r2, [r1, r2]
   132a0:	tst	r2, #2048	; 0x800
   132a4:	beq	13344 <__assert_fail@plt+0x19a4>
   132a8:	sub	r6, r3, #48	; 0x30
   132ac:	cmp	r6, #1
   132b0:	ble	1341c <__assert_fail@plt+0x1a7c>
   132b4:	mov	r2, #5
   132b8:	ldr	r1, [pc, #2388]	; 13c14 <__assert_fail@plt+0x2274>
   132bc:	mov	r0, r5
   132c0:	ldr	r7, [sp, #72]	; 0x48
   132c4:	bl	11628 <dcgettext@plt>
   132c8:	mov	r2, r7
   132cc:	mov	r1, #8
   132d0:	mov	r4, r0
   132d4:	mov	r0, r5
   132d8:	bl	1a0b4 <__assert_fail@plt+0x8714>
   132dc:	ldrb	r3, [r9, #1]
   132e0:	mov	r2, r4
   132e4:	mov	r1, r5
   132e8:	str	r3, [sp]
   132ec:	mov	r3, r0
   132f0:	mov	r0, r5
   132f4:	bl	116d0 <error@plt>
   132f8:	mov	r2, #5
   132fc:	ldr	r1, [pc, #2324]	; 13c18 <__assert_fail@plt+0x2278>
   13300:	mov	r0, r5
   13304:	bl	11628 <dcgettext@plt>
   13308:	ldr	r2, [sp, #72]	; 0x48
   1330c:	mov	r1, #8
   13310:	mov	r4, r0
   13314:	mov	r0, r5
   13318:	bl	1a0b4 <__assert_fail@plt+0x8714>
   1331c:	mov	r2, r4
   13320:	str	r6, [sp]
   13324:	mov	r1, r5
   13328:	mov	r3, r0
   1332c:	mov	r0, r5
   13330:	bl	116d0 <error@plt>
   13334:	mov	r0, r5
   13338:	add	sp, sp, #2944	; 0xb80
   1333c:	add	sp, sp, #4
   13340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13344:	add	r0, sp, #44	; 0x2c
   13348:	mov	r2, #0
   1334c:	mov	r1, #10
   13350:	bl	12f1c <__assert_fail@plt+0x157c>
   13354:	ldr	r0, [sp, #56]	; 0x38
   13358:	rsb	r2, r6, #10
   1335c:	add	r0, r0, r6
   13360:	ldr	r3, [sp, #68]	; 0x44
   13364:	mov	r1, #1
   13368:	bl	116ac <fread@plt>
   1336c:	add	r6, r6, r0
   13370:	cmp	r6, #9
   13374:	bhi	13788 <__assert_fail@plt+0x1de8>
   13378:	add	r0, sp, #44	; 0x2c
   1337c:	mov	r2, #0
   13380:	mov	r1, #256	; 0x100
   13384:	bl	12f1c <__assert_fail@plt+0x157c>
   13388:	ldr	r0, [sp, #56]	; 0x38
   1338c:	rsb	r2, r6, #256	; 0x100
   13390:	add	r0, r0, r6
   13394:	ldr	r3, [sp, #68]	; 0x44
   13398:	mov	r1, #1
   1339c:	bl	116ac <fread@plt>
   133a0:	add	r6, r0, r6
   133a4:	cmp	r6, #256	; 0x100
   133a8:	bne	13b80 <__assert_fail@plt+0x21e0>
   133ac:	ldr	r3, [sp, #56]	; 0x38
   133b0:	add	r2, sp, #48	; 0x30
   133b4:	add	ip, sp, #207	; 0xcf
   133b8:	add	r3, r3, #1
   133bc:	add	r2, r2, #31
   133c0:	mov	r1, ip
   133c4:	ldrb	r0, [r3, #-1]
   133c8:	strb	r0, [r2, #1]!
   133cc:	ldrb	r0, [r3], #2
   133d0:	cmp	ip, r2
   133d4:	strb	r0, [r1, #1]!
   133d8:	bne	133c4 <__assert_fail@plt+0x1a24>
   133dc:	mov	r1, #0
   133e0:	ldr	r0, [pc, #2100]	; 13c1c <__assert_fail@plt+0x227c>
   133e4:	bl	12a78 <__assert_fail@plt+0x10d8>
   133e8:	ldr	r3, [pc, #2096]	; 13c20 <__assert_fail@plt+0x2280>
   133ec:	str	r3, [sp, #36]	; 0x24
   133f0:	mov	r3, #0
   133f4:	str	r3, [sp, #28]
   133f8:	mov	r3, #1
   133fc:	str	r3, [sp, #32]
   13400:	ldr	r3, [sp, #3004]	; 0xbbc
   13404:	cmp	r3, #0
   13408:	beq	1347c <__assert_fail@plt+0x1adc>
   1340c:	mov	r1, #0
   13410:	ldr	r0, [pc, #2060]	; 13c24 <__assert_fail@plt+0x2284>
   13414:	bl	12a78 <__assert_fail@plt+0x10d8>
   13418:	b	1347c <__assert_fail@plt+0x1adc>
   1341c:	bne	1344c <__assert_fail@plt+0x1aac>
   13420:	ldr	r3, [r4, #20]
   13424:	cmp	r3, #2
   13428:	beq	13ae0 <__assert_fail@plt+0x2140>
   1342c:	ldr	r3, [sp, #16]
   13430:	cmp	r3, #1
   13434:	beq	1344c <__assert_fail@plt+0x1aac>
   13438:	ldr	r3, [sp, #3000]	; 0xbb8
   1343c:	ldr	r2, [sp, #3012]	; 0xbc4
   13440:	orrs	r3, r3, r2
   13444:	streq	r6, [sp, #16]
   13448:	bne	137c0 <__assert_fail@plt+0x1e20>
   1344c:	mov	r1, #0
   13450:	ldr	r0, [pc, #2000]	; 13c28 <__assert_fail@plt+0x2288>
   13454:	bl	12a78 <__assert_fail@plt+0x10d8>
   13458:	ldr	r3, [pc, #1996]	; 13c2c <__assert_fail@plt+0x228c>
   1345c:	str	r3, [sp, #36]	; 0x24
   13460:	mov	r3, #1
   13464:	str	r3, [sp, #28]
   13468:	mov	r3, #0
   1346c:	str	r3, [sp, #32]
   13470:	ldr	r3, [sp, #3004]	; 0xbbc
   13474:	cmp	r3, #0
   13478:	bne	1340c <__assert_fail@plt+0x1a6c>
   1347c:	cmp	sl, #0
   13480:	subgt	r7, r8, #4
   13484:	movgt	r5, #0
   13488:	bgt	134a8 <__assert_fail@plt+0x1b08>
   1348c:	b	134f4 <__assert_fail@plt+0x1b54>
   13490:	mov	r1, r9
   13494:	ldr	r0, [pc, #1940]	; 13c30 <__assert_fail@plt+0x2290>
   13498:	bl	12a78 <__assert_fail@plt+0x10d8>
   1349c:	add	r5, r5, #1
   134a0:	cmp	r5, sl
   134a4:	beq	134f4 <__assert_fail@plt+0x1b54>
   134a8:	mov	r8, #1
   134ac:	cmp	fp, #0
   134b0:	strb	r8, [r4, #24]
   134b4:	ldr	r9, [r7, #4]!
   134b8:	bne	1368c <__assert_fail@plt+0x1cec>
   134bc:	ldr	r1, [pc, #1904]	; 13c34 <__assert_fail@plt+0x2294>
   134c0:	mov	r0, r9
   134c4:	bl	11904 <strpbrk@plt>
   134c8:	cmp	r0, #0
   134cc:	beq	13704 <__assert_fail@plt+0x1d64>
   134d0:	ldr	r3, [sp, #2996]	; 0xbb4
   134d4:	cmp	r3, #0
   134d8:	bne	13490 <__assert_fail@plt+0x1af0>
   134dc:	mov	r1, r9
   134e0:	ldr	r0, [pc, #1872]	; 13c38 <__assert_fail@plt+0x2298>
   134e4:	add	r5, r5, #1
   134e8:	bl	12a78 <__assert_fail@plt+0x10d8>
   134ec:	cmp	r5, sl
   134f0:	bne	134a8 <__assert_fail@plt+0x1b08>
   134f4:	ldr	r3, [sp, #16]
   134f8:	ldr	r5, [r4, #8]
   134fc:	cmp	r3, #1
   13500:	beq	13748 <__assert_fail@plt+0x1da8>
   13504:	cmp	r3, #2
   13508:	bne	13530 <__assert_fail@plt+0x1b90>
   1350c:	ldr	r3, [pc, #1832]	; 13c3c <__assert_fail@plt+0x229c>
   13510:	mov	r2, #1
   13514:	strb	r2, [r4, #24]
   13518:	ldr	r1, [r3, #4]
   1351c:	cmp	r1, #0
   13520:	movne	r1, #0
   13524:	ldrne	r0, [pc, #1812]	; 13c40 <__assert_fail@plt+0x22a0>
   13528:	ldreq	r0, [pc, #1812]	; 13c44 <__assert_fail@plt+0x22a4>
   1352c:	bl	12a78 <__assert_fail@plt+0x10d8>
   13530:	ldr	r3, [sp, #3012]	; 0xbc4
   13534:	cmp	r3, #0
   13538:	bne	13778 <__assert_fail@plt+0x1dd8>
   1353c:	ldr	r3, [sp, #3000]	; 0xbb8
   13540:	cmp	r3, #0
   13544:	beq	13560 <__assert_fail@plt+0x1bc0>
   13548:	ldrb	r1, [r4, #80]	; 0x50
   1354c:	cmp	r1, #0
   13550:	movne	r1, #0
   13554:	ldrne	r0, [pc, #1772]	; 13c48 <__assert_fail@plt+0x22a8>
   13558:	ldreq	r0, [pc, #1772]	; 13c4c <__assert_fail@plt+0x22ac>
   1355c:	bl	12a78 <__assert_fail@plt+0x10d8>
   13560:	ldr	r3, [sp, #3008]	; 0xbc0
   13564:	ldr	r1, [pc, #1764]	; 13c50 <__assert_fail@plt+0x22b0>
   13568:	cmp	r3, #0
   1356c:	ldrne	r0, [pc, #1760]	; 13c54 <__assert_fail@plt+0x22b4>
   13570:	ldreq	r0, [pc, #1760]	; 13c58 <__assert_fail@plt+0x22b8>
   13574:	bl	12a78 <__assert_fail@plt+0x10d8>
   13578:	cmp	sl, #1
   1357c:	ble	13820 <__assert_fail@plt+0x1e80>
   13580:	ldr	r2, [sp, #3016]	; 0xbc8
   13584:	ldr	r3, [r5, #8]
   13588:	cmp	r2, #0
   1358c:	str	r3, [r4, #16]
   13590:	ldrne	r3, [pc, #1732]	; 13c5c <__assert_fail@plt+0x22bc>
   13594:	ldreq	r3, [pc, #1732]	; 13c60 <__assert_fail@plt+0x22c0>
   13598:	str	r3, [r4, #104]	; 0x68
   1359c:	ldr	r3, [sp, #3012]	; 0xbc4
   135a0:	cmp	r3, #0
   135a4:	bne	13800 <__assert_fail@plt+0x1e60>
   135a8:	ldr	r0, [sp, #68]	; 0x44
   135ac:	bl	11970 <getc@plt>
   135b0:	ldr	r1, [sp, #28]
   135b4:	adds	r2, r0, #1
   135b8:	movne	r2, #1
   135bc:	tst	r2, r1
   135c0:	mov	r3, r0
   135c4:	str	r0, [sp, #44]	; 0x2c
   135c8:	beq	135e0 <__assert_fail@plt+0x1c40>
   135cc:	ldr	r1, [sp, #68]	; 0x44
   135d0:	bl	117cc <ungetc@plt>
   135d4:	mov	r2, #0
   135d8:	mov	r3, r2
   135dc:	str	r2, [sp, #44]	; 0x2c
   135e0:	add	r5, sp, #44	; 0x2c
   135e4:	b	13600 <__assert_fail@plt+0x1c60>
   135e8:	ldr	r3, [r4, #104]	; 0x68
   135ec:	mov	r0, r5
   135f0:	blx	r3
   135f4:	cmp	r0, #8
   135f8:	beq	13608 <__assert_fail@plt+0x1c68>
   135fc:	ldr	r3, [sp, #44]	; 0x2c
   13600:	cmn	r3, #1
   13604:	bne	135e8 <__assert_fail@plt+0x1c48>
   13608:	ldr	r3, [sp, #3012]	; 0xbc4
   1360c:	cmp	r3, #0
   13610:	beq	1363c <__assert_fail@plt+0x1c9c>
   13614:	ldr	r3, [sp, #32]
   13618:	cmp	r3, #0
   1361c:	bne	1384c <__assert_fail@plt+0x1eac>
   13620:	ldr	r2, [sp, #24]
   13624:	ldr	r3, [sp, #20]
   13628:	orr	r3, r3, r2
   1362c:	ldr	r2, [sp, #2992]	; 0xbb0
   13630:	cmp	r3, #0
   13634:	cmpeq	r2, #0
   13638:	bne	1389c <__assert_fail@plt+0x1efc>
   1363c:	ldr	r0, [sp, #68]	; 0x44
   13640:	bl	115b0 <ferror@plt>
   13644:	cmp	r0, #0
   13648:	ldreq	r0, [r4, #96]	; 0x60
   1364c:	beq	13338 <__assert_fail@plt+0x1998>
   13650:	bl	117d8 <__errno_location@plt>
   13654:	ldr	r2, [sp, #72]	; 0x48
   13658:	mov	r1, #8
   1365c:	ldr	r4, [r0]
   13660:	mov	r0, #0
   13664:	bl	1a0b4 <__assert_fail@plt+0x8714>
   13668:	mov	r1, r4
   1366c:	ldr	r2, [pc, #1520]	; 13c64 <__assert_fail@plt+0x22c4>
   13670:	mov	r3, r0
   13674:	mov	r0, #0
   13678:	bl	116d0 <error@plt>
   1367c:	mov	r0, #0
   13680:	add	sp, sp, #2944	; 0xb80
   13684:	add	sp, sp, #4
   13688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1368c:	mov	r0, #32
   13690:	bl	1a870 <__assert_fail@plt+0x8ed0>
   13694:	mov	r1, #0
   13698:	mov	r2, #32
   1369c:	mov	r6, r0
   136a0:	bl	11814 <memset@plt>
   136a4:	ldr	r0, [sp, #3024]	; 0xbd0
   136a8:	bl	286bc <__assert_fail@plt+0x16d1c>
   136ac:	mov	r2, #100	; 0x64
   136b0:	mov	r0, r2
   136b4:	str	r2, [r6, #4]
   136b8:	bl	1a870 <__assert_fail@plt+0x8ed0>
   136bc:	ldr	r3, [sp, #3024]	; 0xbd0
   136c0:	str	r3, [r6, #12]
   136c4:	mov	r3, #0
   136c8:	str	r3, [r6, #16]
   136cc:	str	r3, [r6, #20]
   136d0:	str	r0, [r6]
   136d4:	mov	r0, r9
   136d8:	bl	117a8 <strlen@plt>
   136dc:	mov	r2, r6
   136e0:	mov	r1, r0
   136e4:	mov	r0, r9
   136e8:	bl	2864c <__assert_fail@plt+0x16cac>
   136ec:	cmp	r0, #0
   136f0:	bne	13b58 <__assert_fail@plt+0x21b8>
   136f4:	mov	r1, r6
   136f8:	ldr	r0, [pc, #1384]	; 13c68 <__assert_fail@plt+0x22c8>
   136fc:	bl	12a78 <__assert_fail@plt+0x10d8>
   13700:	b	1349c <__assert_fail@plt+0x1afc>
   13704:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   13708:	cmp	r0, #1
   1370c:	beq	13730 <__assert_fail@plt+0x1d90>
   13710:	ldr	r2, [sp, #2996]	; 0xbb4
   13714:	ldr	r3, [pc, #1360]	; 13c6c <__assert_fail@plt+0x22cc>
   13718:	cmp	r2, #0
   1371c:	ldr	r0, [pc, #1356]	; 13c70 <__assert_fail@plt+0x22d0>
   13720:	movne	r0, r3
   13724:	mov	r1, r9
   13728:	bl	12a78 <__assert_fail@plt+0x10d8>
   1372c:	b	1349c <__assert_fail@plt+0x1afc>
   13730:	ldr	r2, [sp, #2996]	; 0xbb4
   13734:	ldr	r3, [pc, #1336]	; 13c74 <__assert_fail@plt+0x22d4>
   13738:	cmp	r2, #0
   1373c:	ldr	r0, [pc, #1332]	; 13c78 <__assert_fail@plt+0x22d8>
   13740:	movne	r0, r3
   13744:	b	13724 <__assert_fail@plt+0x1d84>
   13748:	ldr	r3, [pc, #1260]	; 13c3c <__assert_fail@plt+0x229c>
   1374c:	ldrb	r2, [sp, #16]
   13750:	ldr	r1, [r3, #4]
   13754:	strb	r2, [r4, #24]
   13758:	cmp	r1, #0
   1375c:	movne	r1, #0
   13760:	ldrne	r0, [pc, #1300]	; 13c7c <__assert_fail@plt+0x22dc>
   13764:	ldreq	r0, [pc, #1300]	; 13c80 <__assert_fail@plt+0x22e0>
   13768:	bl	12a78 <__assert_fail@plt+0x10d8>
   1376c:	ldr	r3, [sp, #3012]	; 0xbc4
   13770:	cmp	r3, #0
   13774:	beq	1353c <__assert_fail@plt+0x1b9c>
   13778:	ldr	r1, [pc, #1284]	; 13c84 <__assert_fail@plt+0x22e4>
   1377c:	ldr	r0, [pc, #1284]	; 13c88 <__assert_fail@plt+0x22e8>
   13780:	bl	12a78 <__assert_fail@plt+0x10d8>
   13784:	b	1353c <__assert_fail@plt+0x1b9c>
   13788:	mov	r2, #10
   1378c:	ldr	r1, [pc, #1272]	; 13c8c <__assert_fail@plt+0x22ec>
   13790:	ldr	r0, [sp, #56]	; 0x38
   13794:	bl	1161c <memcmp@plt>
   13798:	subs	r3, r0, #0
   1379c:	str	r3, [sp, #32]
   137a0:	beq	1382c <__assert_fail@plt+0x1e8c>
   137a4:	add	r0, sp, #44	; 0x2c
   137a8:	mov	r2, #0
   137ac:	mov	r1, #256	; 0x100
   137b0:	bl	12f1c <__assert_fail@plt+0x157c>
   137b4:	cmp	r6, #255	; 0xff
   137b8:	bgt	133ac <__assert_fail@plt+0x1a0c>
   137bc:	b	13388 <__assert_fail@plt+0x19e8>
   137c0:	mov	r2, #5
   137c4:	ldr	r1, [pc, #1220]	; 13c90 <__assert_fail@plt+0x22f0>
   137c8:	mov	r0, r5
   137cc:	bl	11628 <dcgettext@plt>
   137d0:	ldr	r2, [sp, #72]	; 0x48
   137d4:	mov	r1, #8
   137d8:	mov	r7, r0
   137dc:	mov	r0, r5
   137e0:	bl	1a0b4 <__assert_fail@plt+0x8714>
   137e4:	mov	r2, r7
   137e8:	mov	r1, r5
   137ec:	str	r6, [sp, #16]
   137f0:	mov	r3, r0
   137f4:	mov	r0, r5
   137f8:	bl	116d0 <error@plt>
   137fc:	b	1344c <__assert_fail@plt+0x1aac>
   13800:	mov	r2, #5
   13804:	ldr	r1, [pc, #1160]	; 13c94 <__assert_fail@plt+0x22f4>
   13808:	mov	r0, #0
   1380c:	bl	11628 <dcgettext@plt>
   13810:	ldr	r2, [sp, #36]	; 0x24
   13814:	ldr	r1, [sp, #72]	; 0x48
   13818:	bl	11550 <printf@plt>
   1381c:	b	135a8 <__assert_fail@plt+0x1c08>
   13820:	ldr	r3, [pc, #1136]	; 13c98 <__assert_fail@plt+0x22f8>
   13824:	str	r3, [r4, #104]	; 0x68
   13828:	b	1359c <__assert_fail@plt+0x1bfc>
   1382c:	ldr	r5, [sp, #32]
   13830:	ldr	r0, [pc, #1008]	; 13c28 <__assert_fail@plt+0x2288>
   13834:	mov	r1, r5
   13838:	bl	12a78 <__assert_fail@plt+0x10d8>
   1383c:	ldr	r3, [pc, #1112]	; 13c9c <__assert_fail@plt+0x22fc>
   13840:	str	r5, [sp, #28]
   13844:	str	r3, [sp, #36]	; 0x24
   13848:	b	13470 <__assert_fail@plt+0x1ad0>
   1384c:	mov	r2, #5
   13850:	ldr	r1, [pc, #1096]	; 13ca0 <__assert_fail@plt+0x2300>
   13854:	mov	r0, #0
   13858:	bl	11628 <dcgettext@plt>
   1385c:	mov	r2, #5
   13860:	ldr	r1, [pc, #1084]	; 13ca4 <__assert_fail@plt+0x2304>
   13864:	mov	r5, r0
   13868:	mov	r0, #0
   1386c:	bl	11628 <dcgettext@plt>
   13870:	ldr	r3, [sp, #76]	; 0x4c
   13874:	cmp	r3, #1
   13878:	beq	13b08 <__assert_fail@plt+0x2168>
   1387c:	cmp	r3, #2
   13880:	beq	13ab8 <__assert_fail@plt+0x2118>
   13884:	mov	r2, #5
   13888:	ldr	r1, [pc, #1048]	; 13ca8 <__assert_fail@plt+0x2308>
   1388c:	mov	r0, #0
   13890:	bl	11628 <dcgettext@plt>
   13894:	bl	11550 <printf@plt>
   13898:	b	13620 <__assert_fail@plt+0x1c80>
   1389c:	cmp	r2, #0
   138a0:	addeq	r5, sp, #2288	; 0x8f0
   138a4:	addeq	r5, r5, #4
   138a8:	beq	1393c <__assert_fail@plt+0x1f9c>
   138ac:	ldr	r0, [sp, #2992]	; 0xbb0
   138b0:	bl	1173c <localtime@plt>
   138b4:	add	r5, sp, #2288	; 0x8f0
   138b8:	add	r5, r5, #4
   138bc:	subs	r6, r0, #0
   138c0:	beq	1393c <__assert_fail@plt+0x1f9c>
   138c4:	mov	r0, r5
   138c8:	mov	r3, r6
   138cc:	ldr	r2, [pc, #984]	; 13cac <__assert_fail@plt+0x230c>
   138d0:	mov	r1, #20
   138d4:	bl	11724 <strftime@plt>
   138d8:	cmp	r0, #19
   138dc:	bne	13bb8 <__assert_fail@plt+0x2218>
   138e0:	ldrb	r0, [sp, #2311]	; 0x907
   138e4:	cmp	r0, #0
   138e8:	bne	13bf4 <__assert_fail@plt+0x2254>
   138ec:	ldrb	r3, [sp, #2310]	; 0x906
   138f0:	cmp	r3, #0
   138f4:	beq	13be0 <__assert_fail@plt+0x2240>
   138f8:	mov	r2, #5
   138fc:	ldr	r1, [pc, #940]	; 13cb0 <__assert_fail@plt+0x2310>
   13900:	bl	11628 <dcgettext@plt>
   13904:	ldr	r3, [sp, #2992]	; 0xbb0
   13908:	mov	r1, r5
   1390c:	ldr	r2, [r3, #4]
   13910:	bl	11550 <printf@plt>
   13914:	mov	r3, r6
   13918:	ldr	r2, [pc, #916]	; 13cb4 <__assert_fail@plt+0x2314>
   1391c:	mov	r1, #20
   13920:	mov	r0, r5
   13924:	bl	11724 <strftime@plt>
   13928:	cmp	r0, #5
   1392c:	bne	13bcc <__assert_fail@plt+0x222c>
   13930:	mov	r1, r5
   13934:	ldr	r0, [pc, #892]	; 13cb8 <__assert_fail@plt+0x2318>
   13938:	bl	11550 <printf@plt>
   1393c:	ldr	r8, [sp, #20]
   13940:	mov	r6, #5
   13944:	mov	r3, r8
   13948:	str	r6, [sp]
   1394c:	ldr	r2, [pc, #872]	; 13cbc <__assert_fail@plt+0x231c>
   13950:	ldr	r1, [pc, #872]	; 13cc0 <__assert_fail@plt+0x2320>
   13954:	mov	r0, #0
   13958:	bl	11994 <dcngettext@plt>
   1395c:	mov	r2, #1
   13960:	mov	r3, #0
   13964:	mov	r1, #0
   13968:	strd	r2, [sp, #8]
   1396c:	strd	r2, [sp]
   13970:	mov	r3, #0
   13974:	add	r2, sp, #336	; 0x150
   13978:	mov	r7, r0
   1397c:	mov	r0, r8
   13980:	bl	14920 <__assert_fail@plt+0x2f80>
   13984:	mov	r1, r0
   13988:	mov	r0, r7
   1398c:	bl	11550 <printf@plt>
   13990:	ldrb	r0, [r4, #24]
   13994:	mov	r2, r6
   13998:	mov	r7, #0
   1399c:	cmp	r0, #0
   139a0:	movne	r0, #0
   139a4:	ldrne	r1, [pc, #792]	; 13cc4 <__assert_fail@plt+0x2324>
   139a8:	ldreq	r1, [pc, #792]	; 13cc8 <__assert_fail@plt+0x2328>
   139ac:	bl	11628 <dcgettext@plt>
   139b0:	mov	r6, #1
   139b4:	mov	r3, #0
   139b8:	add	r2, sp, #336	; 0x150
   139bc:	mov	r8, r0
   139c0:	ldrd	r0, [r4, #40]	; 0x28
   139c4:	strd	r6, [sp, #8]
   139c8:	strd	r6, [sp]
   139cc:	bl	14920 <__assert_fail@plt+0x2f80>
   139d0:	mov	r1, r0
   139d4:	mov	r0, r8
   139d8:	bl	11550 <printf@plt>
   139dc:	mov	r2, #5
   139e0:	ldr	r1, [pc, #740]	; 13ccc <__assert_fail@plt+0x232c>
   139e4:	mov	r0, #0
   139e8:	bl	11628 <dcgettext@plt>
   139ec:	add	r2, sp, #336	; 0x150
   139f0:	mov	r3, #0
   139f4:	mov	r8, r0
   139f8:	ldrd	r0, [r4, #48]	; 0x30
   139fc:	strd	r6, [sp, #8]
   13a00:	strd	r6, [sp]
   13a04:	bl	14920 <__assert_fail@plt+0x2f80>
   13a08:	add	r2, sp, #988	; 0x3dc
   13a0c:	mov	r3, #0
   13a10:	mov	r9, r0
   13a14:	ldrd	r0, [r4, #56]	; 0x38
   13a18:	strd	r6, [sp, #8]
   13a1c:	strd	r6, [sp]
   13a20:	bl	14920 <__assert_fail@plt+0x2f80>
   13a24:	add	r3, sp, #1648	; 0x670
   13a28:	sub	r2, r3, #8
   13a2c:	mov	r3, #0
   13a30:	str	r0, [sp, #16]
   13a34:	ldrd	r0, [r4, #64]	; 0x40
   13a38:	strd	r6, [sp, #8]
   13a3c:	strd	r6, [sp]
   13a40:	bl	14920 <__assert_fail@plt+0x2f80>
   13a44:	mov	r2, r5
   13a48:	mov	r3, #0
   13a4c:	mov	fp, r0
   13a50:	ldrd	r0, [r4, #72]	; 0x48
   13a54:	strd	r6, [sp, #8]
   13a58:	strd	r6, [sp]
   13a5c:	bl	14920 <__assert_fail@plt+0x2f80>
   13a60:	mov	r3, fp
   13a64:	ldr	r2, [sp, #16]
   13a68:	mov	r1, r9
   13a6c:	str	r0, [sp]
   13a70:	mov	r0, r8
   13a74:	bl	11550 <printf@plt>
   13a78:	cmp	sl, #0
   13a7c:	bne	13aac <__assert_fail@plt+0x210c>
   13a80:	ldrb	r3, [r4, #24]
   13a84:	cmp	r3, #0
   13a88:	bne	13ac8 <__assert_fail@plt+0x2128>
   13a8c:	ldrd	r2, [r4, #48]	; 0x30
   13a90:	mov	r0, sl
   13a94:	orrs	r3, r2, r3
   13a98:	mov	r2, #5
   13a9c:	bne	13b18 <__assert_fail@plt+0x2178>
   13aa0:	ldr	r1, [pc, #552]	; 13cd0 <__assert_fail@plt+0x2330>
   13aa4:	bl	11628 <dcgettext@plt>
   13aa8:	bl	11550 <printf@plt>
   13aac:	mov	r0, #10
   13ab0:	bl	11820 <putchar@plt>
   13ab4:	b	1363c <__assert_fail@plt+0x1c9c>
   13ab8:	mov	r1, r0
   13abc:	ldr	r0, [pc, #416]	; 13c64 <__assert_fail@plt+0x22c4>
   13ac0:	bl	11550 <printf@plt>
   13ac4:	b	13620 <__assert_fail@plt+0x1c80>
   13ac8:	mov	r2, #5
   13acc:	ldr	r1, [pc, #512]	; 13cd4 <__assert_fail@plt+0x2334>
   13ad0:	mov	r0, sl
   13ad4:	bl	11628 <dcgettext@plt>
   13ad8:	bl	11550 <printf@plt>
   13adc:	b	13aac <__assert_fail@plt+0x210c>
   13ae0:	mov	r2, #5
   13ae4:	ldr	r1, [pc, #492]	; 13cd8 <__assert_fail@plt+0x2338>
   13ae8:	mov	r0, r5
   13aec:	bl	11628 <dcgettext@plt>
   13af0:	mov	r1, r5
   13af4:	mov	r2, r0
   13af8:	mov	r0, r5
   13afc:	bl	116d0 <error@plt>
   13b00:	mov	r0, r5
   13b04:	b	13338 <__assert_fail@plt+0x1998>
   13b08:	mov	r1, r5
   13b0c:	ldr	r0, [pc, #336]	; 13c64 <__assert_fail@plt+0x22c4>
   13b10:	bl	11550 <printf@plt>
   13b14:	b	13620 <__assert_fail@plt+0x1c80>
   13b18:	ldr	r1, [pc, #444]	; 13cdc <__assert_fail@plt+0x233c>
   13b1c:	bl	11628 <dcgettext@plt>
   13b20:	mov	r5, r0
   13b24:	ldrd	r0, [r4, #48]	; 0x30
   13b28:	bl	2b44c <__assert_fail@plt+0x19aac>
   13b2c:	vldr	s15, [sp, #20]
   13b30:	vldr	d5, [pc, #208]	; 13c08 <__assert_fail@plt+0x2268>
   13b34:	vcvt.f64.u32	d7, s15
   13b38:	vmov	d6, r0, r1
   13b3c:	mov	r0, r5
   13b40:	vsub.f64	d7, d6, d7
   13b44:	vmul.f64	d7, d7, d5
   13b48:	vdiv.f64	d5, d7, d6
   13b4c:	vmov	r2, r3, d5
   13b50:	bl	11550 <printf@plt>
   13b54:	b	13aac <__assert_fail@plt+0x210c>
   13b58:	mov	r3, r0
   13b5c:	mov	r1, #0
   13b60:	mov	r0, r8
   13b64:	ldr	r2, [pc, #248]	; 13c64 <__assert_fail@plt+0x22c4>
   13b68:	bl	116d0 <error@plt>
   13b6c:	ldr	r3, [pc, #364]	; 13ce0 <__assert_fail@plt+0x2340>
   13b70:	ldr	r2, [pc, #364]	; 13ce4 <__assert_fail@plt+0x2344>
   13b74:	ldr	r1, [pc, #364]	; 13ce8 <__assert_fail@plt+0x2348>
   13b78:	ldr	r0, [pc, #364]	; 13cec <__assert_fail@plt+0x234c>
   13b7c:	bl	119a0 <__assert_fail@plt>
   13b80:	mov	r2, #5
   13b84:	ldr	r1, [pc, #356]	; 13cf0 <__assert_fail@plt+0x2350>
   13b88:	mov	r0, #0
   13b8c:	bl	11628 <dcgettext@plt>
   13b90:	mov	r2, r7
   13b94:	mov	r1, #8
   13b98:	mov	r4, r0
   13b9c:	mov	r0, #0
   13ba0:	bl	1a0b4 <__assert_fail@plt+0x8714>
   13ba4:	mov	r2, r4
   13ba8:	mov	r1, #0
   13bac:	mov	r3, r0
   13bb0:	mov	r0, #1
   13bb4:	bl	116d0 <error@plt>
   13bb8:	ldr	r3, [pc, #308]	; 13cf4 <__assert_fail@plt+0x2354>
   13bbc:	ldr	r2, [pc, #308]	; 13cf8 <__assert_fail@plt+0x2358>
   13bc0:	ldr	r1, [pc, #288]	; 13ce8 <__assert_fail@plt+0x2348>
   13bc4:	ldr	r0, [pc, #304]	; 13cfc <__assert_fail@plt+0x235c>
   13bc8:	bl	119a0 <__assert_fail@plt>
   13bcc:	ldr	r3, [pc, #288]	; 13cf4 <__assert_fail@plt+0x2354>
   13bd0:	ldr	r2, [pc, #296]	; 13d00 <__assert_fail@plt+0x2360>
   13bd4:	ldr	r1, [pc, #268]	; 13ce8 <__assert_fail@plt+0x2348>
   13bd8:	ldr	r0, [pc, #292]	; 13d04 <__assert_fail@plt+0x2364>
   13bdc:	bl	119a0 <__assert_fail@plt>
   13be0:	ldr	r3, [pc, #268]	; 13cf4 <__assert_fail@plt+0x2354>
   13be4:	ldr	r2, [pc, #284]	; 13d08 <__assert_fail@plt+0x2368>
   13be8:	ldr	r1, [pc, #248]	; 13ce8 <__assert_fail@plt+0x2348>
   13bec:	ldr	r0, [pc, #280]	; 13d0c <__assert_fail@plt+0x236c>
   13bf0:	bl	119a0 <__assert_fail@plt>
   13bf4:	ldr	r3, [pc, #248]	; 13cf4 <__assert_fail@plt+0x2354>
   13bf8:	ldr	r2, [pc, #272]	; 13d10 <__assert_fail@plt+0x2370>
   13bfc:	ldr	r1, [pc, #228]	; 13ce8 <__assert_fail@plt+0x2348>
   13c00:	ldr	r0, [pc, #268]	; 13d14 <__assert_fail@plt+0x2374>
   13c04:	bl	119a0 <__assert_fail@plt>
   13c08:	andeq	r0, r0, r0
   13c0c:	subsmi	r0, r9, r0
   13c10:	andeq	lr, r3, r8, lsr #4
   13c14:	ldrdeq	fp, [r2], -r4
   13c18:	andeq	fp, r2, r0, ror #24
   13c1c:	andeq	r2, r1, r4, lsl #31
   13c20:	andeq	fp, r2, r4, asr #23
   13c24:	andeq	r2, r1, r8, asr #27
   13c28:	andeq	r3, r1, r8, lsl sp
   13c2c:	andeq	fp, r2, ip, lsr #23
   13c30:	andeq	r2, r1, r8, asr sp
   13c34:	andeq	fp, r2, r8, asr #27
   13c38:	andeq	r2, r1, r0, lsr sp
   13c3c:	andeq	lr, r3, ip, lsr #3
   13c40:	andeq	r2, r1, ip, asr #25
   13c44:	andeq	r2, r1, r4, ror ip
   13c48:	strdeq	r2, [r1], -r0
   13c4c:			; <UNDEFINED> instruction: 0x00012abc
   13c50:	andeq	lr, r3, r0, lsl #5
   13c54:	andeq	r2, r1, r0, asr r9
   13c58:	andeq	r2, r1, r0, lsl #19
   13c5c:	andeq	r2, r1, r8, lsr #29
   13c60:	andeq	r2, r1, r8, lsr lr
   13c64:	andeq	ip, r2, r0, asr #16
   13c68:	andeq	r2, r1, r0, lsl #27
   13c6c:	andeq	r2, r1, r4, lsl sp
   13c70:	strdeq	r2, [r1], -r8
   13c74:	andeq	r3, r1, ip, ror r1
   13c78:	andeq	r3, r1, r4, lsr #2
   13c7c:	andeq	r2, r1, r0, lsr #25
   13c80:	andeq	r2, r1, r8, asr #24
   13c84:	andeq	lr, r3, r8, asr #4
   13c88:	andeq	r2, r1, r8, asr #22
   13c8c:	andeq	fp, r2, r8, lsl #15
   13c90:	andeq	fp, r2, r8, asr sp
   13c94:	ldrdeq	fp, [r2], -r0
   13c98:	strdeq	r2, [r1], -r8
   13c9c:			; <UNDEFINED> instruction: 0x0002bbb4
   13ca0:	strdeq	fp, [r2], -r4
   13ca4:	andeq	fp, r2, ip, lsr #28
   13ca8:	andeq	fp, r2, r0, ror #28
   13cac:	muleq	r2, ip, lr
   13cb0:	andeq	fp, r2, ip, lsl #30
   13cb4:	andeq	fp, r2, r4, lsr pc
   13cb8:	andeq	fp, r2, r8, asr #30
   13cbc:	andeq	fp, r2, r0, asr pc
   13cc0:	andeq	fp, r2, r0, ror pc
   13cc4:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   13cc8:	andeq	fp, r2, r8, lsr #31
   13ccc:			; <UNDEFINED> instruction: 0x0002bfbc
   13cd0:	strdeq	ip, [r2], -r8
   13cd4:	andeq	ip, r2, r0, ror r0
   13cd8:	andeq	fp, r2, ip, lsr #25
   13cdc:	andeq	ip, r2, r8, asr #1
   13ce0:	andeq	fp, r2, ip, ror #14
   13ce4:	andeq	r0, r0, r7, lsr #7
   13ce8:	andeq	fp, r2, r8, ror #22
   13cec:	andeq	fp, r2, r8, asr #23
   13cf0:	muleq	r2, r0, sp
   13cf4:	muleq	r2, r4, r7
   13cf8:	andeq	r0, r0, sp, asr #6
   13cfc:			; <UNDEFINED> instruction: 0x0002beb0
   13d00:	andeq	r0, r0, r3, asr r3
   13d04:	andeq	fp, r2, r8, lsr pc
   13d08:	andeq	r0, r0, pc, asr #6
   13d0c:	andeq	fp, r2, ip, ror #29
   13d10:	andeq	r0, r0, lr, asr #6
   13d14:	andeq	fp, r2, ip, asr #29
   13d18:	push	{r4, r5, r6, r7, lr}
   13d1c:	mov	r5, r0
   13d20:	ldr	r4, [r0]
   13d24:	sub	sp, sp, #12
   13d28:	cmp	r4, #128	; 0x80
   13d2c:	beq	13e60 <__assert_fail@plt+0x24c0>
   13d30:	ldr	r0, [r0, #4]
   13d34:	cmp	r4, #127	; 0x7f
   13d38:	subgt	r4, r4, #256	; 0x100
   13d3c:	add	r4, r4, r0
   13d40:	str	r4, [r5, #4]
   13d44:	ldr	r3, [r5, #8]
   13d48:	lsr	ip, r4, #31
   13d4c:	cmp	r3, r4
   13d50:	orrlt	ip, ip, #1
   13d54:	cmp	ip, #0
   13d58:	bne	13ed4 <__assert_fail@plt+0x2534>
   13d5c:	add	r1, sp, #8
   13d60:	ldr	r3, [r5, #24]
   13d64:	str	ip, [r1, #-4]!
   13d68:	mov	r2, ip
   13d6c:	mov	r0, sp
   13d70:	str	ip, [sp]
   13d74:	bl	1191c <getdelim@plt>
   13d78:	subs	r6, r0, #0
   13d7c:	blt	13e30 <__assert_fail@plt+0x2490>
   13d80:	ldr	r1, [sp]
   13d84:	cmp	r1, #0
   13d88:	beq	13f0c <__assert_fail@plt+0x256c>
   13d8c:	add	r7, r4, r6
   13d90:	ldr	r3, [r5, #16]
   13d94:	add	r7, r7, #1
   13d98:	cmp	r7, r3
   13d9c:	bhi	13e3c <__assert_fail@plt+0x249c>
   13da0:	ldr	r0, [r5, #12]
   13da4:	add	r2, r6, #1
   13da8:	add	r0, r0, r4
   13dac:	bl	115d4 <memcpy@plt>
   13db0:	ldr	r0, [sp]
   13db4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   13db8:	cmp	r6, #0
   13dbc:	beq	13e30 <__assert_fail@plt+0x2490>
   13dc0:	ldr	r0, [r5, #24]
   13dc4:	bl	11970 <getc@plt>
   13dc8:	ldr	r3, [r5, #4]
   13dcc:	add	r6, r6, r3
   13dd0:	sub	r6, r6, #1
   13dd4:	cmp	r6, #0
   13dd8:	str	r6, [r5, #8]
   13ddc:	str	r0, [r5]
   13de0:	ble	13e94 <__assert_fail@plt+0x24f4>
   13de4:	ldr	r3, [r5, #12]
   13de8:	sub	r6, r6, #1
   13dec:	add	r2, r3, r6
   13df0:	ldrb	r1, [r3, r6]
   13df4:	cmp	r1, #0
   13df8:	beq	13f20 <__assert_fail@plt+0x2580>
   13dfc:	ldrb	r1, [r2, #1]
   13e00:	cmp	r1, #0
   13e04:	bne	13f34 <__assert_fail@plt+0x2594>
   13e08:	ldrb	r2, [r2, #2]
   13e0c:	cmp	r2, #0
   13e10:	streq	r3, [r5, #20]
   13e14:	moveq	r0, #1
   13e18:	beq	13e34 <__assert_fail@plt+0x2494>
   13e1c:	ldr	r3, [pc, #292]	; 13f48 <__assert_fail@plt+0x25a8>
   13e20:	ldr	r2, [pc, #292]	; 13f4c <__assert_fail@plt+0x25ac>
   13e24:	ldr	r1, [pc, #292]	; 13f50 <__assert_fail@plt+0x25b0>
   13e28:	ldr	r0, [pc, #292]	; 13f54 <__assert_fail@plt+0x25b4>
   13e2c:	bl	119a0 <__assert_fail@plt>
   13e30:	mov	r0, #8
   13e34:	add	sp, sp, #12
   13e38:	pop	{r4, r5, r6, r7, pc}
   13e3c:	mov	r1, r7
   13e40:	ldr	r0, [r5, #12]
   13e44:	bl	1babc <__assert_fail@plt+0xa11c>
   13e48:	cmp	r0, #0
   13e4c:	beq	13e30 <__assert_fail@plt+0x2490>
   13e50:	ldr	r1, [sp]
   13e54:	str	r7, [r5, #16]
   13e58:	str	r0, [r5, #12]
   13e5c:	b	13da4 <__assert_fail@plt+0x2404>
   13e60:	ldr	r4, [r0, #24]
   13e64:	mov	r0, r4
   13e68:	bl	11838 <fgetc@plt>
   13e6c:	sxtb	r6, r0
   13e70:	mov	r0, r4
   13e74:	bl	11838 <fgetc@plt>
   13e78:	lsl	r6, r6, #8
   13e7c:	ldr	r3, [r5, #4]
   13e80:	uxtb	r4, r0
   13e84:	orr	r4, r6, r4
   13e88:	add	r4, r4, r3
   13e8c:	str	r4, [r5, #4]
   13e90:	b	13d44 <__assert_fail@plt+0x23a4>
   13e94:	mov	r2, #5
   13e98:	ldr	r1, [pc, #184]	; 13f58 <__assert_fail@plt+0x25b8>
   13e9c:	mov	r0, #0
   13ea0:	bl	11628 <dcgettext@plt>
   13ea4:	ldr	r2, [r5, #28]
   13ea8:	mov	r1, #8
   13eac:	mov	r4, r0
   13eb0:	mov	r0, #0
   13eb4:	bl	1a0b4 <__assert_fail@plt+0x8714>
   13eb8:	mov	r2, r4
   13ebc:	mov	r1, #0
   13ec0:	mov	r3, r0
   13ec4:	mov	r0, #1
   13ec8:	bl	116d0 <error@plt>
   13ecc:	ldr	r6, [r5, #8]
   13ed0:	b	13de4 <__assert_fail@plt+0x2444>
   13ed4:	mov	r2, #5
   13ed8:	ldr	r1, [pc, #120]	; 13f58 <__assert_fail@plt+0x25b8>
   13edc:	mov	r0, #0
   13ee0:	bl	11628 <dcgettext@plt>
   13ee4:	ldr	r2, [r5, #28]
   13ee8:	mov	r1, #8
   13eec:	mov	r4, r0
   13ef0:	mov	r0, #0
   13ef4:	bl	1a0b4 <__assert_fail@plt+0x8714>
   13ef8:	mov	r2, r4
   13efc:	mov	r1, #0
   13f00:	mov	r3, r0
   13f04:	mov	r0, #1
   13f08:	bl	116d0 <error@plt>
   13f0c:	ldr	r3, [pc, #72]	; 13f5c <__assert_fail@plt+0x25bc>
   13f10:	mov	r2, #245	; 0xf5
   13f14:	ldr	r1, [pc, #52]	; 13f50 <__assert_fail@plt+0x25b0>
   13f18:	ldr	r0, [pc, #64]	; 13f60 <__assert_fail@plt+0x25c0>
   13f1c:	bl	119a0 <__assert_fail@plt>
   13f20:	ldr	r3, [pc, #32]	; 13f48 <__assert_fail@plt+0x25a8>
   13f24:	mov	r2, #568	; 0x238
   13f28:	ldr	r1, [pc, #32]	; 13f50 <__assert_fail@plt+0x25b0>
   13f2c:	ldr	r0, [pc, #48]	; 13f64 <__assert_fail@plt+0x25c4>
   13f30:	bl	119a0 <__assert_fail@plt>
   13f34:	ldr	r3, [pc, #12]	; 13f48 <__assert_fail@plt+0x25a8>
   13f38:	ldr	r2, [pc, #40]	; 13f68 <__assert_fail@plt+0x25c8>
   13f3c:	ldr	r1, [pc, #12]	; 13f50 <__assert_fail@plt+0x25b0>
   13f40:	ldr	r0, [pc, #36]	; 13f6c <__assert_fail@plt+0x25cc>
   13f44:	bl	119a0 <__assert_fail@plt>
   13f48:			; <UNDEFINED> instruction: 0x0002b7b0
   13f4c:	andeq	r0, r0, sl, lsr r2
   13f50:	andeq	fp, r2, r8, ror #22
   13f54:	andeq	ip, r2, r0, ror r1
   13f58:	andeq	ip, r2, r8, lsl r1
   13f5c:	andeq	fp, r2, r0, lsr #15
   13f60:	andeq	ip, r2, r4, asr #2
   13f64:	andeq	ip, r2, r0, asr r1
   13f68:	andeq	r0, r0, r9, lsr r2
   13f6c:	andeq	ip, r2, r0, ror #2
   13f70:	push	{r4, r5, r6, r7, r8, lr}
   13f74:	sub	sp, sp, #8
   13f78:	mov	r4, r0
   13f7c:	mov	r5, r1
   13f80:	mov	r7, r2
   13f84:	mov	r6, r3
   13f88:	bl	118e0 <clearerr@plt>
   13f8c:	mov	r1, #4
   13f90:	mov	r3, r4
   13f94:	mov	r2, #1
   13f98:	add	r0, sp, r1
   13f9c:	bl	116ac <fread@plt>
   13fa0:	cmp	r0, #1
   13fa4:	beq	1401c <__assert_fail@plt+0x267c>
   13fa8:	mov	r2, r5
   13fac:	mov	r1, #8
   13fb0:	mov	r0, #0
   13fb4:	bl	1a0b4 <__assert_fail@plt+0x8714>
   13fb8:	mov	r5, r0
   13fbc:	mov	r0, r4
   13fc0:	bl	11790 <feof@plt>
   13fc4:	subs	r4, r0, #0
   13fc8:	beq	13ff0 <__assert_fail@plt+0x2650>
   13fcc:	mov	r2, #5
   13fd0:	ldr	r1, [pc, #208]	; 140a8 <__assert_fail@plt+0x2708>
   13fd4:	mov	r0, #0
   13fd8:	bl	11628 <dcgettext@plt>
   13fdc:	mov	r3, r5
   13fe0:	mov	r1, #0
   13fe4:	mov	r2, r0
   13fe8:	mov	r0, #1
   13fec:	bl	116d0 <error@plt>
   13ff0:	bl	117d8 <__errno_location@plt>
   13ff4:	mov	r2, #5
   13ff8:	ldr	r1, [pc, #172]	; 140ac <__assert_fail@plt+0x270c>
   13ffc:	ldr	r6, [r0]
   14000:	mov	r0, r4
   14004:	bl	11628 <dcgettext@plt>
   14008:	mov	r3, r5
   1400c:	mov	r1, r6
   14010:	mov	r2, r0
   14014:	mov	r0, #1
   14018:	bl	116d0 <error@plt>
   1401c:	ldr	r4, [r6]
   14020:	mov	r3, r0
   14024:	ldr	r0, [sp, #4]
   14028:	cmp	r4, #0
   1402c:	rev	r8, r0
   14030:	bne	1408c <__assert_fail@plt+0x26ec>
   14034:	cmp	r7, r0
   14038:	bge	1409c <__assert_fail@plt+0x26fc>
   1403c:	cmp	r7, r8
   14040:	blt	14094 <__assert_fail@plt+0x26f4>
   14044:	mov	r2, #5
   14048:	ldr	r1, [pc, #96]	; 140b0 <__assert_fail@plt+0x2710>
   1404c:	mov	r0, r4
   14050:	bl	11628 <dcgettext@plt>
   14054:	mov	r2, r5
   14058:	mov	r1, #8
   1405c:	mov	r7, r0
   14060:	mov	r0, r4
   14064:	bl	1a0b4 <__assert_fail@plt+0x8714>
   14068:	mov	r2, r7
   1406c:	mov	r1, r4
   14070:	mov	r3, r0
   14074:	mov	r0, r4
   14078:	bl	116d0 <error@plt>
   1407c:	mov	r3, #2
   14080:	mov	r0, r8
   14084:	str	r3, [r6]
   14088:	b	14094 <__assert_fail@plt+0x26f4>
   1408c:	cmp	r4, #2
   14090:	moveq	r0, r8
   14094:	add	sp, sp, #8
   14098:	pop	{r4, r5, r6, r7, r8, pc}
   1409c:	cmp	r7, r8
   140a0:	bge	14094 <__assert_fail@plt+0x26f4>
   140a4:	b	14084 <__assert_fail@plt+0x26e4>
   140a8:	andeq	ip, r2, ip, asr #9
   140ac:	andeq	ip, r2, r4, ror #9
   140b0:	andeq	ip, r2, r4, lsl #10
   140b4:	ldr	r3, [pc, #136]	; 14144 <__assert_fail@plt+0x27a4>
   140b8:	push	{r4, r5, r6, r7, r8, lr}
   140bc:	mov	r5, r0
   140c0:	sub	sp, sp, #16
   140c4:	ldr	r0, [r3]
   140c8:	bl	1b8e4 <__assert_fail@plt+0x9f44>
   140cc:	ldr	ip, [pc, #116]	; 14148 <__assert_fail@plt+0x27a8>
   140d0:	ldr	r3, [pc, #116]	; 1414c <__assert_fail@plt+0x27ac>
   140d4:	mov	r2, #5
   140d8:	ldr	r1, [pc, #112]	; 14150 <__assert_fail@plt+0x27b0>
   140dc:	mov	r0, #0
   140e0:	ldr	r4, [ip]
   140e4:	ldr	r7, [r3]
   140e8:	bl	11628 <dcgettext@plt>
   140ec:	mov	r2, #5
   140f0:	ldr	r1, [pc, #92]	; 14154 <__assert_fail@plt+0x27b4>
   140f4:	mov	r8, r0
   140f8:	mov	r0, #0
   140fc:	bl	11628 <dcgettext@plt>
   14100:	mov	r2, #5
   14104:	ldr	r1, [pc, #76]	; 14158 <__assert_fail@plt+0x27b8>
   14108:	mov	r6, r0
   1410c:	mov	r0, #0
   14110:	bl	11628 <dcgettext@plt>
   14114:	mov	r2, #0
   14118:	str	r2, [sp, #12]
   1411c:	str	r8, [sp]
   14120:	mov	r3, r7
   14124:	str	r6, [sp, #4]
   14128:	mov	r1, r5
   1412c:	ldr	r2, [pc, #40]	; 1415c <__assert_fail@plt+0x27bc>
   14130:	str	r0, [sp, #8]
   14134:	mov	r0, r4
   14138:	bl	1a78c <__assert_fail@plt+0x8dec>
   1413c:	add	sp, sp, #16
   14140:	pop	{r4, r5, r6, r7, r8, pc}
   14144:	andeq	lr, r3, r8, lsl r2
   14148:	andeq	lr, r3, ip, lsl r2
   1414c:			; <UNDEFINED> instruction: 0x0003e1b8
   14150:	andeq	ip, r2, r8, asr #10
   14154:	andeq	ip, r2, r8, asr r5
   14158:	andeq	ip, r2, r8, ror #10
   1415c:	andeq	ip, r2, r8, ror r5
   14160:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14164:	cmp	r2, #0
   14168:	sub	sp, sp, #8192	; 0x2000
   1416c:	sub	sp, sp, #8
   14170:	mov	r5, r3
   14174:	beq	141ec <__assert_fail@plt+0x284c>
   14178:	add	r2, sp, #8192	; 0x2000
   1417c:	add	r2, r2, #40	; 0x28
   14180:	add	r4, sp, #8
   14184:	str	r1, [sp]
   14188:	mov	r7, r1
   1418c:	mov	r8, r0
   14190:	mvn	r3, #0
   14194:	mov	r0, r4
   14198:	ldr	r2, [r2]
   1419c:	mov	r1, #8192	; 0x2000
   141a0:	bl	19e78 <__assert_fail@plt+0x84d8>
   141a4:	cmp	r0, #8192	; 0x2000
   141a8:	mov	r6, r0
   141ac:	bcs	14214 <__assert_fail@plt+0x2874>
   141b0:	mov	r1, r0
   141b4:	mov	r0, r4
   141b8:	bl	1428c <__assert_fail@plt+0x28ec>
   141bc:	mov	r1, r5
   141c0:	mov	ip, #0
   141c4:	mov	r2, r4
   141c8:	mov	r3, r0
   141cc:	mov	r0, r8
   141d0:	strb	ip, [r4, r3]
   141d4:	bl	117c0 <fprintf@plt>
   141d8:	mov	r5, r0
   141dc:	mov	r0, r5
   141e0:	add	sp, sp, #8192	; 0x2000
   141e4:	add	sp, sp, #8
   141e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   141ec:	mov	r1, r3
   141f0:	add	r3, sp, #8192	; 0x2000
   141f4:	add	r3, r3, #40	; 0x28
   141f8:	ldr	r2, [r3]
   141fc:	bl	117c0 <fprintf@plt>
   14200:	mov	r5, r0
   14204:	mov	r0, r5
   14208:	add	sp, sp, #8192	; 0x2000
   1420c:	add	sp, sp, #8
   14210:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14214:	add	sl, r0, #1
   14218:	mov	r0, sl
   1421c:	bl	1a870 <__assert_fail@plt+0x8ed0>
   14220:	add	r2, sp, #8192	; 0x2000
   14224:	add	r2, r2, #40	; 0x28
   14228:	mvn	r3, #0
   1422c:	mov	r1, sl
   14230:	str	r7, [sp]
   14234:	ldr	r2, [r2]
   14238:	mov	r9, r0
   1423c:	bl	19e78 <__assert_fail@plt+0x84d8>
   14240:	mov	r1, r6
   14244:	mov	r0, r9
   14248:	bl	1428c <__assert_fail@plt+0x28ec>
   1424c:	mov	r1, r5
   14250:	mov	ip, #0
   14254:	mov	r2, r9
   14258:	mov	r3, r0
   1425c:	mov	r0, r8
   14260:	strb	ip, [r9, r3]
   14264:	bl	117c0 <fprintf@plt>
   14268:	cmp	r9, r4
   1426c:	mov	r5, r0
   14270:	beq	14204 <__assert_fail@plt+0x2864>
   14274:	mov	r0, r9
   14278:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1427c:	mov	r0, r5
   14280:	add	sp, sp, #8192	; 0x2000
   14284:	add	sp, sp, #8
   14288:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1428c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14290:	sub	sp, sp, #16
   14294:	mov	r8, r0
   14298:	mov	r6, r1
   1429c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   142a0:	cmp	r0, #1
   142a4:	bls	143d0 <__assert_fail@plt+0x2a30>
   142a8:	add	r6, r8, r6
   142ac:	cmp	r8, r6
   142b0:	bcs	14410 <__assert_fail@plt+0x2a70>
   142b4:	mov	r5, r8
   142b8:	mov	r4, r8
   142bc:	mov	r9, #0
   142c0:	mov	r7, #63	; 0x3f
   142c4:	b	142f0 <__assert_fail@plt+0x2950>
   142c8:	cmp	r3, #37	; 0x25
   142cc:	bcs	142dc <__assert_fail@plt+0x293c>
   142d0:	sub	r2, r3, #32
   142d4:	cmp	r2, #3
   142d8:	bhi	14318 <__assert_fail@plt+0x2978>
   142dc:	strb	r3, [r5]
   142e0:	add	r4, r4, #1
   142e4:	add	r5, r5, #1
   142e8:	cmp	r4, r6
   142ec:	bcs	143b4 <__assert_fail@plt+0x2a14>
   142f0:	ldrb	r3, [r4]
   142f4:	cmp	r3, #63	; 0x3f
   142f8:	bls	142c8 <__assert_fail@plt+0x2928>
   142fc:	cmp	r3, #65	; 0x41
   14300:	bcc	14318 <__assert_fail@plt+0x2978>
   14304:	cmp	r3, #95	; 0x5f
   14308:	bls	142dc <__assert_fail@plt+0x293c>
   1430c:	sub	r2, r3, #97	; 0x61
   14310:	cmp	r2, #29
   14314:	bls	142dc <__assert_fail@plt+0x293c>
   14318:	str	r9, [sp, #8]
   1431c:	str	r9, [sp, #12]
   14320:	add	r3, sp, #8
   14324:	sub	r2, r6, r4
   14328:	mov	r1, r4
   1432c:	add	r0, sp, #4
   14330:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   14334:	cmn	r0, #1
   14338:	mov	sl, r0
   1433c:	beq	143a0 <__assert_fail@plt+0x2a00>
   14340:	cmn	r0, #2
   14344:	beq	143c0 <__assert_fail@plt+0x2a20>
   14348:	ldr	r0, [sp, #4]
   1434c:	bl	11574 <wcwidth@plt>
   14350:	cmp	sl, #0
   14354:	moveq	sl, #1
   14358:	cmp	r0, #0
   1435c:	blt	14390 <__assert_fail@plt+0x29f0>
   14360:	sub	r3, r5, #1
   14364:	add	r1, r4, sl
   14368:	ldrb	r2, [r4], #1
   1436c:	cmp	r4, r1
   14370:	strb	r2, [r3, #1]!
   14374:	bne	14368 <__assert_fail@plt+0x29c8>
   14378:	add	r5, r5, sl
   1437c:	add	r0, sp, #8
   14380:	bl	11604 <mbsinit@plt>
   14384:	cmp	r0, #0
   14388:	beq	14320 <__assert_fail@plt+0x2980>
   1438c:	b	142e8 <__assert_fail@plt+0x2948>
   14390:	strb	r7, [r5]
   14394:	add	r4, r4, sl
   14398:	add	r5, r5, #1
   1439c:	b	1437c <__assert_fail@plt+0x29dc>
   143a0:	add	r4, r4, #1
   143a4:	cmp	r4, r6
   143a8:	strb	r7, [r5]
   143ac:	add	r5, r5, #1
   143b0:	bcc	142f0 <__assert_fail@plt+0x2950>
   143b4:	sub	r0, r5, r8
   143b8:	add	sp, sp, #16
   143bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   143c0:	strb	r7, [r5]
   143c4:	mov	r4, r6
   143c8:	add	r5, r5, #1
   143cc:	b	142e8 <__assert_fail@plt+0x2948>
   143d0:	add	r4, r8, r6
   143d4:	cmp	r8, r4
   143d8:	bcs	14408 <__assert_fail@plt+0x2a68>
   143dc:	bl	11778 <__ctype_b_loc@plt>
   143e0:	mov	r1, #63	; 0x3f
   143e4:	ldrb	r3, [r8]
   143e8:	ldr	r2, [r0]
   143ec:	add	r8, r8, #1
   143f0:	lsl	r3, r3, #1
   143f4:	ldrh	r3, [r2, r3]
   143f8:	tst	r3, #16384	; 0x4000
   143fc:	strbeq	r1, [r8, #-1]
   14400:	cmp	r4, r8
   14404:	bne	143e4 <__assert_fail@plt+0x2a44>
   14408:	mov	r0, r6
   1440c:	b	143b8 <__assert_fail@plt+0x2a18>
   14410:	mov	r0, #0
   14414:	add	sp, sp, #16
   14418:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1441c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14420:	mov	r8, #0
   14424:	sub	sp, sp, #12
   14428:	ldr	r7, [pc, #288]	; 14550 <__assert_fail@plt+0x2bb0>
   1442c:	ldr	r5, [pc, #288]	; 14554 <__assert_fail@plt+0x2bb4>
   14430:	mov	r6, r0
   14434:	mov	r4, r8
   14438:	b	14440 <__assert_fail@plt+0x2aa0>
   1443c:	ldr	r5, [r7, #-12]
   14440:	mov	r1, r6
   14444:	mov	r0, r5
   14448:	bl	11544 <strcmp@plt>
   1444c:	cmp	r0, #0
   14450:	beq	1451c <__assert_fail@plt+0x2b7c>
   14454:	mov	r0, r5
   14458:	bl	1a360 <__assert_fail@plt+0x89c0>
   1445c:	bl	117a8 <strlen@plt>
   14460:	add	r4, r4, #1
   14464:	cmp	r4, #13
   14468:	add	r7, r7, #12
   1446c:	add	r0, r0, #2
   14470:	add	r8, r8, r0
   14474:	bne	1443c <__assert_fail@plt+0x2a9c>
   14478:	add	r0, r8, #1
   1447c:	bl	1a870 <__assert_fail@plt+0x8ed0>
   14480:	mov	r4, #1
   14484:	ldr	sl, [pc, #204]	; 14558 <__assert_fail@plt+0x2bb8>
   14488:	ldr	r7, [pc, #204]	; 1455c <__assert_fail@plt+0x2bbc>
   1448c:	ldr	r8, [pc, #204]	; 14560 <__assert_fail@plt+0x2bc0>
   14490:	mov	r9, r0
   14494:	mov	fp, r0
   14498:	ldr	r0, [pc, #180]	; 14554 <__assert_fail@plt+0x2bb4>
   1449c:	b	144ac <__assert_fail@plt+0x2b0c>
   144a0:	add	r3, r4, r4, lsl #1
   144a4:	add	r4, r4, #1
   144a8:	ldr	r0, [r8, r3, lsl #2]
   144ac:	cmp	r4, #1
   144b0:	beq	14534 <__assert_fail@plt+0x2b94>
   144b4:	ldrh	r2, [sl]
   144b8:	ldrb	r3, [sl, #2]
   144bc:	mov	r5, fp
   144c0:	strh	r2, [fp]
   144c4:	strb	r3, [r5, #2]!
   144c8:	bl	1a360 <__assert_fail@plt+0x89c0>
   144cc:	mov	r1, r7
   144d0:	mov	r2, r0
   144d4:	mov	r0, r5
   144d8:	bl	118ec <sprintf@plt>
   144dc:	cmp	r4, #13
   144e0:	add	fp, r5, r0
   144e4:	bne	144a0 <__assert_fail@plt+0x2b00>
   144e8:	mov	r2, #5
   144ec:	ldr	r1, [pc, #112]	; 14564 <__assert_fail@plt+0x2bc4>
   144f0:	mov	r0, #0
   144f4:	bl	11628 <dcgettext@plt>
   144f8:	mov	r4, r0
   144fc:	mov	r0, r6
   14500:	bl	1a360 <__assert_fail@plt+0x89c0>
   14504:	mov	r2, r4
   14508:	str	r9, [sp]
   1450c:	mov	r1, #0
   14510:	mov	r3, r0
   14514:	mov	r0, #1
   14518:	bl	116d0 <error@plt>
   1451c:	ldr	r3, [pc, #60]	; 14560 <__assert_fail@plt+0x2bc0>
   14520:	add	r4, r4, r4, lsl #1
   14524:	add	r4, r3, r4, lsl #2
   14528:	ldr	r0, [r4, #8]
   1452c:	add	sp, sp, #12
   14530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14534:	bl	1a360 <__assert_fail@plt+0x89c0>
   14538:	mov	r1, r7
   1453c:	mov	r2, r0
   14540:	mov	r0, fp
   14544:	bl	118ec <sprintf@plt>
   14548:	add	fp, fp, r0
   1454c:	b	144a0 <__assert_fail@plt+0x2b00>
   14550:	andeq	ip, r2, r4, lsr #11
   14554:	andeq	ip, r2, r4, lsr r6
   14558:	andeq	ip, r2, r8, asr #12
   1455c:	andeq	ip, r2, r0, asr #16
   14560:	muleq	r2, r8, r5
   14564:	andeq	ip, r2, ip, asr #12
   14568:	cmp	r0, #12
   1456c:	addls	r0, r0, r0, lsl #1
   14570:	ldrls	r3, [pc, #8]	; 14580 <__assert_fail@plt+0x2be0>
   14574:	ldrls	r0, [r3, r0, lsl #2]
   14578:	movhi	r0, #0
   1457c:	bx	lr
   14580:	muleq	r2, r8, r5
   14584:	cmp	r0, #12
   14588:	addls	r0, r0, r0, lsl #1
   1458c:	ldrls	r3, [pc, #12]	; 145a0 <__assert_fail@plt+0x2c00>
   14590:	addls	r0, r3, r0, lsl #2
   14594:	ldrls	r0, [r0, #8]
   14598:	mvnhi	r0, #0
   1459c:	bx	lr
   145a0:	muleq	r2, r8, r5
   145a4:	cmp	r0, #12
   145a8:	addls	r0, r0, r0, lsl #1
   145ac:	ldrls	r3, [pc, #12]	; 145c0 <__assert_fail@plt+0x2c20>
   145b0:	addls	r0, r3, r0, lsl #2
   145b4:	ldrls	r0, [r0, #4]
   145b8:	movhi	r0, #0
   145bc:	bx	lr
   145c0:	muleq	r2, r8, r5
   145c4:	cmp	r0, #12
   145c8:	bhi	1462c <__assert_fail@plt+0x2c8c>
   145cc:	ldr	r3, [pc, #96]	; 14634 <__assert_fail@plt+0x2c94>
   145d0:	add	r2, r0, r0, lsl #1
   145d4:	cmp	r0, #0
   145d8:	add	r2, r3, r2, lsl #2
   145dc:	push	{lr}		; (str lr, [sp, #-4]!)
   145e0:	ldr	lr, [r2, #8]
   145e4:	beq	1461c <__assert_fail@plt+0x2c7c>
   145e8:	mov	ip, #1
   145ec:	mov	r2, #0
   145f0:	b	145f8 <__assert_fail@plt+0x2c58>
   145f4:	ldr	ip, [r3, #4]
   145f8:	tst	ip, r1
   145fc:	beq	1460c <__assert_fail@plt+0x2c6c>
   14600:	ldr	ip, [r3, #8]
   14604:	cmp	lr, ip
   14608:	beq	14624 <__assert_fail@plt+0x2c84>
   1460c:	add	r2, r2, #1
   14610:	cmp	r0, r2
   14614:	add	r3, r3, #12
   14618:	bne	145f4 <__assert_fail@plt+0x2c54>
   1461c:	mvn	r0, #0
   14620:	pop	{pc}		; (ldr pc, [sp], #4)
   14624:	mov	r0, r2
   14628:	pop	{pc}		; (ldr pc, [sp], #4)
   1462c:	mvn	r0, #0
   14630:	bx	lr
   14634:	muleq	r2, r8, r5
   14638:	push	{r4, r5, r6, lr}
   1463c:	cmp	r2, #0
   14640:	ldr	r5, [sp, #16]
   14644:	beq	14680 <__assert_fail@plt+0x2ce0>
   14648:	mov	r2, #0
   1464c:	str	r2, [r3]
   14650:	str	r2, [r5]
   14654:	ldr	r4, [r3]
   14658:	ldrb	r3, [r1]
   1465c:	add	r4, r0, r4
   14660:	cmp	r3, #0
   14664:	beq	146b4 <__assert_fail@plt+0x2d14>
   14668:	mov	r0, r4
   1466c:	bl	11904 <strpbrk@plt>
   14670:	cmp	r0, #0
   14674:	beq	146b4 <__assert_fail@plt+0x2d14>
   14678:	sub	r0, r0, r4
   1467c:	b	146bc <__assert_fail@plt+0x2d1c>
   14680:	ldr	r2, [r5]
   14684:	ldr	r4, [r3]
   14688:	add	r4, r4, r2
   1468c:	str	r4, [r3]
   14690:	ldrb	r2, [r0, r4]
   14694:	cmp	r2, #0
   14698:	beq	146c8 <__assert_fail@plt+0x2d28>
   1469c:	add	r4, r4, #1
   146a0:	str	r4, [r3]
   146a4:	ldrb	r3, [r1]
   146a8:	add	r4, r0, r4
   146ac:	cmp	r3, #0
   146b0:	bne	14668 <__assert_fail@plt+0x2cc8>
   146b4:	mov	r0, r4
   146b8:	bl	117a8 <strlen@plt>
   146bc:	str	r0, [r5]
   146c0:	mov	r0, #1
   146c4:	pop	{r4, r5, r6, pc}
   146c8:	mov	r0, r2
   146cc:	pop	{r4, r5, r6, pc}
   146d0:	push	{r4, r5, lr}
   146d4:	mov	r2, #5
   146d8:	sub	sp, sp, #20
   146dc:	mov	r4, r0
   146e0:	mov	r5, r1
   146e4:	mov	r0, #0
   146e8:	ldr	r1, [pc, #48]	; 14720 <__assert_fail@plt+0x2d80>
   146ec:	bl	11628 <dcgettext@plt>
   146f0:	ldr	ip, [pc, #44]	; 14724 <__assert_fail@plt+0x2d84>
   146f4:	ldr	r1, [pc, #44]	; 14728 <__assert_fail@plt+0x2d88>
   146f8:	ldr	r2, [pc, #44]	; 1472c <__assert_fail@plt+0x2d8c>
   146fc:	mov	r3, r5
   14700:	stmib	sp, {r1, ip}
   14704:	str	r2, [sp]
   14708:	ldr	r2, [pc, #32]	; 14730 <__assert_fail@plt+0x2d90>
   1470c:	mov	r1, r0
   14710:	mov	r0, r4
   14714:	bl	117c0 <fprintf@plt>
   14718:	add	sp, sp, #20
   1471c:	pop	{r4, r5, pc}
   14720:	strdeq	ip, [r2], -r0
   14724:	andeq	ip, r2, r8, ror #15
   14728:	andeq	ip, r2, r0, lsl #16
   1472c:	andeq	ip, r2, r8, ror r5
   14730:	andeq	ip, r2, r0, asr #15
   14734:	ldrb	r3, [r0]
   14738:	cmp	r3, #47	; 0x2f
   1473c:	bne	1474c <__assert_fail@plt+0x2dac>
   14740:	ldrb	r3, [r0, #1]!
   14744:	cmp	r3, #47	; 0x2f
   14748:	beq	14740 <__assert_fail@plt+0x2da0>
   1474c:	cmp	r3, #0
   14750:	bxeq	lr
   14754:	mov	r2, #0
   14758:	push	{lr}		; (str lr, [sp, #-4]!)
   1475c:	mov	ip, r2
   14760:	mov	r1, r0
   14764:	mov	lr, #1
   14768:	cmp	r3, #47	; 0x2f
   1476c:	moveq	r2, lr
   14770:	beq	14780 <__assert_fail@plt+0x2de0>
   14774:	cmp	r2, #0
   14778:	movne	r0, r1
   1477c:	movne	r2, ip
   14780:	ldrb	r3, [r1, #1]!
   14784:	cmp	r3, #0
   14788:	bne	14768 <__assert_fail@plt+0x2dc8>
   1478c:	pop	{pc}		; (ldr pc, [sp], #4)
   14790:	push	{r4, lr}
   14794:	mov	r4, r0
   14798:	bl	117a8 <strlen@plt>
   1479c:	cmp	r0, #1
   147a0:	popls	{r4, pc}
   147a4:	sub	r3, r0, #1
   147a8:	add	r2, r4, r3
   147ac:	ldrb	r1, [r4, r3]
   147b0:	cmp	r1, #47	; 0x2f
   147b4:	popne	{r4, pc}
   147b8:	cmp	r3, #1
   147bc:	beq	147d0 <__assert_fail@plt+0x2e30>
   147c0:	ldrb	r1, [r2, #-1]!
   147c4:	sub	r0, r3, #1
   147c8:	cmp	r1, #47	; 0x2f
   147cc:	beq	147d8 <__assert_fail@plt+0x2e38>
   147d0:	mov	r0, r3
   147d4:	pop	{r4, pc}
   147d8:	mov	r3, r0
   147dc:	b	147b8 <__assert_fail@plt+0x2e18>
   147e0:	ldr	r3, [pc, #4]	; 147ec <__assert_fail@plt+0x2e4c>
   147e4:	str	r0, [r3]
   147e8:	bx	lr
   147ec:	muleq	r3, r8, r2
   147f0:	ldr	r3, [pc, #4]	; 147fc <__assert_fail@plt+0x2e5c>
   147f4:	strb	r0, [r3, #4]
   147f8:	bx	lr
   147fc:	muleq	r3, r8, r2
   14800:	ldr	r3, [pc, #192]	; 148c8 <__assert_fail@plt+0x2f28>
   14804:	push	{r4, r5, r6, lr}
   14808:	sub	sp, sp, #8
   1480c:	ldr	r0, [r3]
   14810:	bl	2a92c <__assert_fail@plt+0x18f8c>
   14814:	cmp	r0, #0
   14818:	beq	1483c <__assert_fail@plt+0x2e9c>
   1481c:	ldr	r4, [pc, #168]	; 148cc <__assert_fail@plt+0x2f2c>
   14820:	ldrb	r3, [r4, #4]
   14824:	cmp	r3, #0
   14828:	beq	14858 <__assert_fail@plt+0x2eb8>
   1482c:	bl	117d8 <__errno_location@plt>
   14830:	ldr	r3, [r0]
   14834:	cmp	r3, #32
   14838:	bne	14858 <__assert_fail@plt+0x2eb8>
   1483c:	ldr	r3, [pc, #140]	; 148d0 <__assert_fail@plt+0x2f30>
   14840:	ldr	r0, [r3]
   14844:	bl	2a92c <__assert_fail@plt+0x18f8c>
   14848:	cmp	r0, #0
   1484c:	bne	148a0 <__assert_fail@plt+0x2f00>
   14850:	add	sp, sp, #8
   14854:	pop	{r4, r5, r6, pc}
   14858:	mov	r2, #5
   1485c:	ldr	r1, [pc, #112]	; 148d4 <__assert_fail@plt+0x2f34>
   14860:	mov	r0, #0
   14864:	bl	11628 <dcgettext@plt>
   14868:	ldr	r4, [r4]
   1486c:	cmp	r4, #0
   14870:	mov	r5, r0
   14874:	beq	148ac <__assert_fail@plt+0x2f0c>
   14878:	bl	117d8 <__errno_location@plt>
   1487c:	ldr	r6, [r0]
   14880:	mov	r0, r4
   14884:	bl	1a1c8 <__assert_fail@plt+0x8828>
   14888:	mov	r1, r6
   1488c:	str	r5, [sp]
   14890:	ldr	r2, [pc, #64]	; 148d8 <__assert_fail@plt+0x2f38>
   14894:	mov	r3, r0
   14898:	mov	r0, #0
   1489c:	bl	116d0 <error@plt>
   148a0:	ldr	r3, [pc, #52]	; 148dc <__assert_fail@plt+0x2f3c>
   148a4:	ldr	r0, [r3]
   148a8:	bl	115c8 <_exit@plt>
   148ac:	bl	117d8 <__errno_location@plt>
   148b0:	mov	r3, r5
   148b4:	ldr	r2, [pc, #36]	; 148e0 <__assert_fail@plt+0x2f40>
   148b8:	ldr	r1, [r0]
   148bc:	mov	r0, r4
   148c0:	bl	116d0 <error@plt>
   148c4:	b	148a0 <__assert_fail@plt+0x2f00>
   148c8:	andeq	lr, r3, ip, lsl r2
   148cc:	muleq	r3, r8, r2
   148d0:	andeq	lr, r3, r8, lsl r2
   148d4:	andeq	ip, r2, r0, lsr r8
   148d8:	andeq	ip, r2, ip, lsr r8
   148dc:			; <UNDEFINED> instruction: 0x0003e1bc
   148e0:	andeq	ip, r2, r0, asr #16
   148e4:	push	{r1, r2, r3}
   148e8:	push	{lr}		; (str lr, [sp, #-4]!)
   148ec:	sub	sp, sp, #8
   148f0:	ldr	r1, [sp, #12]
   148f4:	ands	r2, r1, #64	; 0x40
   148f8:	addne	r3, sp, #16
   148fc:	ldrne	r2, [sp, #16]
   14900:	strne	r3, [sp, #4]
   14904:	bl	116e8 <open64@plt>
   14908:	bl	1a3a4 <__assert_fail@plt+0x8a04>
   1490c:	add	sp, sp, #8
   14910:	pop	{lr}		; (ldr lr, [sp], #4)
   14914:	add	sp, sp, #12
   14918:	bx	lr
   1491c:	andeq	r0, r0, r0
   14920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14924:	vpush	{d8-d9}
   14928:	mov	r8, r3
   1492c:	ands	r3, r3, #32
   14930:	mov	r4, r2
   14934:	sub	sp, sp, #116	; 0x74
   14938:	mov	r7, r1
   1493c:	str	r3, [sp, #8]
   14940:	moveq	r3, #1000	; 0x3e8
   14944:	movne	r3, #1024	; 0x400
   14948:	str	r2, [sp, #4]
   1494c:	str	r3, [sp, #16]
   14950:	mov	r6, r0
   14954:	bl	118d4 <localeconv@plt>
   14958:	add	r3, r4, #644	; 0x284
   1495c:	str	r3, [sp, #28]
   14960:	add	r3, r3, #3
   14964:	str	r3, [sp]
   14968:	ldr	r9, [r0]
   1496c:	mov	r5, r0
   14970:	mov	r0, r9
   14974:	bl	117a8 <strlen@plt>
   14978:	ldr	fp, [r5, #4]
   1497c:	ldr	r3, [pc, #1028]	; 14d88 <__assert_fail@plt+0x33e8>
   14980:	sub	r2, r0, #1
   14984:	cmp	r2, #16
   14988:	movcc	r3, r9
   1498c:	mov	r4, r0
   14990:	mov	r0, fp
   14994:	movcs	r4, #1
   14998:	str	r3, [sp, #24]
   1499c:	bl	117a8 <strlen@plt>
   149a0:	ldr	r3, [pc, #996]	; 14d8c <__assert_fail@plt+0x33ec>
   149a4:	and	r2, r8, #3
   149a8:	str	r2, [sp, #12]
   149ac:	ldr	r9, [r5, #8]
   149b0:	cmp	r0, #16
   149b4:	movhi	fp, r3
   149b8:	ldrd	r0, [sp, #168]	; 0xa8
   149bc:	ldrd	r2, [sp, #176]	; 0xb0
   149c0:	str	fp, [sp, #20]
   149c4:	cmp	r3, r1
   149c8:	cmpeq	r2, r0
   149cc:	bhi	14bb0 <__assert_fail@plt+0x3210>
   149d0:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   149d4:	orrs	r3, r2, r3
   149d8:	bne	14a18 <__assert_fail@plt+0x3078>
   149dc:	ldrd	r2, [sp, #176]	; 0xb0
   149e0:	ldrd	r0, [sp, #168]	; 0xa8
   149e4:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   149e8:	mov	r2, r0
   149ec:	mul	r0, r0, r7
   149f0:	umull	sl, fp, r2, r6
   149f4:	mla	r0, r6, r1, r0
   149f8:	mov	r3, r1
   149fc:	add	fp, r0, fp
   14a00:	mov	r1, fp
   14a04:	mov	r0, sl
   14a08:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   14a0c:	cmp	r7, r1
   14a10:	cmpeq	r6, r0
   14a14:	beq	15008 <__assert_fail@plt+0x3668>
   14a18:	ldrd	r0, [sp, #168]	; 0xa8
   14a1c:	bl	2b44c <__assert_fail@plt+0x19aac>
   14a20:	vmov	d9, r0, r1
   14a24:	ldrd	r0, [sp, #176]	; 0xb0
   14a28:	bl	2b44c <__assert_fail@plt+0x19aac>
   14a2c:	vmov	d7, r0, r1
   14a30:	mov	r0, r6
   14a34:	mov	r1, r7
   14a38:	vdiv.f64	d8, d9, d7
   14a3c:	bl	2b44c <__assert_fail@plt+0x19aac>
   14a40:	ands	r6, r8, #16
   14a44:	vmov	d7, r0, r1
   14a48:	vmul.f64	d8, d8, d7
   14a4c:	beq	14d98 <__assert_fail@plt+0x33f8>
   14a50:	vldr	s15, [sp, #16]
   14a54:	mov	r5, #0
   14a58:	vcvt.f64.s32	d6, s15
   14a5c:	vmov.f64	d7, d6
   14a60:	vmov.f64	d5, d7
   14a64:	vmul.f64	d7, d7, d6
   14a68:	add	r5, r5, #1
   14a6c:	vcmpe.f64	d8, d7
   14a70:	vmrs	APSR_nzcv, fpscr
   14a74:	blt	14a80 <__assert_fail@plt+0x30e0>
   14a78:	cmp	r5, #8
   14a7c:	bne	14a60 <__assert_fail@plt+0x30c0>
   14a80:	ldr	sl, [sp, #12]
   14a84:	vdiv.f64	d9, d8, d5
   14a88:	cmp	sl, #1
   14a8c:	beq	14ebc <__assert_fail@plt+0x351c>
   14a90:	vldr	d7, [pc, #736]	; 14d78 <__assert_fail@plt+0x33d8>
   14a94:	vcmpe.f64	d9, d7
   14a98:	vmrs	APSR_nzcv, fpscr
   14a9c:	vmovpl	r2, r3, d9
   14aa0:	bpl	14af4 <__assert_fail@plt+0x3154>
   14aa4:	vmov	r0, r1, d9
   14aa8:	bl	2b510 <__assert_fail@plt+0x19b70>
   14aac:	cmp	sl, #0
   14ab0:	mov	r6, r0
   14ab4:	mov	r7, r1
   14ab8:	movne	r0, #0
   14abc:	bne	14ad8 <__assert_fail@plt+0x3138>
   14ac0:	bl	2b44c <__assert_fail@plt+0x19aac>
   14ac4:	vmov	d7, r0, r1
   14ac8:	vcmp.f64	d7, d9
   14acc:	vmrs	APSR_nzcv, fpscr
   14ad0:	movne	r0, #1
   14ad4:	moveq	r0, #0
   14ad8:	adds	r2, r6, r0
   14adc:	adc	r3, r7, #0
   14ae0:	mov	r0, r2
   14ae4:	mov	r1, r3
   14ae8:	bl	2b44c <__assert_fail@plt+0x19aac>
   14aec:	mov	r2, r0
   14af0:	mov	r3, r1
   14af4:	ldr	r6, [sp, #4]
   14af8:	ldr	r1, [pc, #656]	; 14d90 <__assert_fail@plt+0x33f0>
   14afc:	mov	r0, r6
   14b00:	bl	118ec <sprintf@plt>
   14b04:	mov	r0, r6
   14b08:	bl	117a8 <strlen@plt>
   14b0c:	ldr	r3, [sp, #8]
   14b10:	add	r6, r4, #1
   14b14:	cmp	r3, #0
   14b18:	movne	r3, #1
   14b1c:	moveq	r3, #2
   14b20:	add	r3, r3, r6
   14b24:	cmp	r0, r3
   14b28:	mov	r7, r0
   14b2c:	bls	14efc <__assert_fail@plt+0x355c>
   14b30:	vldr	d7, [pc, #584]	; 14d80 <__assert_fail@plt+0x33e0>
   14b34:	vmul.f64	d9, d9, d7
   14b38:	vldr	d7, [pc, #568]	; 14d78 <__assert_fail@plt+0x33d8>
   14b3c:	vcmpe.f64	d9, d7
   14b40:	vmrs	APSR_nzcv, fpscr
   14b44:	bpl	14b80 <__assert_fail@plt+0x31e0>
   14b48:	vmov	r0, r1, d9
   14b4c:	bl	2b510 <__assert_fail@plt+0x19b70>
   14b50:	ldr	r3, [sp, #12]
   14b54:	cmp	r3, #0
   14b58:	mov	r6, r0
   14b5c:	mov	r7, r1
   14b60:	movne	r0, #0
   14b64:	beq	151b8 <__assert_fail@plt+0x3818>
   14b68:	adds	r2, r6, r0
   14b6c:	adc	r3, r7, #0
   14b70:	mov	r0, r2
   14b74:	mov	r1, r3
   14b78:	bl	2b44c <__assert_fail@plt+0x19aac>
   14b7c:	vmov	d9, r0, r1
   14b80:	vldr	d7, [pc, #504]	; 14d80 <__assert_fail@plt+0x33e0>
   14b84:	ldr	r4, [sp, #4]
   14b88:	ldr	r1, [pc, #516]	; 14d94 <__assert_fail@plt+0x33f4>
   14b8c:	mov	r0, r4
   14b90:	vdiv.f64	d6, d9, d7
   14b94:	mov	r6, #0
   14b98:	vmov	r2, r3, d6
   14b9c:	bl	118ec <sprintf@plt>
   14ba0:	mov	r0, r4
   14ba4:	bl	117a8 <strlen@plt>
   14ba8:	mov	r7, r0
   14bac:	b	14ddc <__assert_fail@plt+0x343c>
   14bb0:	ldrd	r2, [sp, #168]	; 0xa8
   14bb4:	orrs	r3, r2, r3
   14bb8:	beq	14a18 <__assert_fail@plt+0x3078>
   14bbc:	ldrd	r2, [sp, #168]	; 0xa8
   14bc0:	ldrd	r0, [sp, #176]	; 0xb0
   14bc4:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   14bc8:	orrs	r3, r2, r3
   14bcc:	bne	14a18 <__assert_fail@plt+0x3078>
   14bd0:	ldrd	r2, [sp, #168]	; 0xa8
   14bd4:	ldrd	r0, [sp, #176]	; 0xb0
   14bd8:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   14bdc:	mov	sl, r0
   14be0:	mov	fp, r1
   14be4:	mov	r2, r0
   14be8:	mov	r3, r1
   14bec:	mov	r0, r6
   14bf0:	mov	r1, r7
   14bf4:	strd	sl, [sp, #40]	; 0x28
   14bf8:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   14bfc:	mov	r1, #10
   14c00:	umull	sl, fp, r2, r1
   14c04:	mla	r3, r1, r3, fp
   14c08:	strd	sl, [sp, #32]
   14c0c:	ldrd	sl, [sp, #40]	; 0x28
   14c10:	str	r3, [sp, #36]	; 0x24
   14c14:	ldrd	r0, [sp, #32]
   14c18:	mov	r2, sl
   14c1c:	mov	r3, fp
   14c20:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   14c24:	mov	r0, r6
   14c28:	mov	r1, r7
   14c2c:	lsls	r6, r2, #1
   14c30:	adc	r7, r3, r3
   14c34:	mov	r2, sl
   14c38:	mov	r3, fp
   14c3c:	strd	r6, [sp, #48]	; 0x30
   14c40:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   14c44:	mov	r7, fp
   14c48:	mov	r6, sl
   14c4c:	mov	r3, r7
   14c50:	mov	r2, r6
   14c54:	strd	r6, [sp, #40]	; 0x28
   14c58:	mov	sl, r0
   14c5c:	mov	fp, r1
   14c60:	ldrd	r0, [sp, #32]
   14c64:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   14c68:	ldrd	r2, [sp, #40]	; 0x28
   14c6c:	mov	r7, r0
   14c70:	ldrd	r0, [sp, #48]	; 0x30
   14c74:	cmp	r3, r1
   14c78:	cmpeq	r2, r0
   14c7c:	bls	15194 <__assert_fail@plt+0x37f4>
   14c80:	mov	r3, r0
   14c84:	orrs	r3, r3, r1
   14c88:	movne	r3, #1
   14c8c:	moveq	r3, #0
   14c90:	str	r3, [sp, #40]	; 0x28
   14c94:	ands	r3, r8, #16
   14c98:	str	r3, [sp, #48]	; 0x30
   14c9c:	beq	15064 <__assert_fail@plt+0x36c4>
   14ca0:	ldr	r1, [sp, #16]
   14ca4:	mov	r3, #0
   14ca8:	mov	r2, r1
   14cac:	cmp	fp, r3
   14cb0:	cmpeq	sl, r1
   14cb4:	strd	r2, [sp, #32]
   14cb8:	bcc	151a8 <__assert_fail@plt+0x3808>
   14cbc:	mov	r5, #0
   14cc0:	mov	r6, r7
   14cc4:	str	r9, [sp, #56]	; 0x38
   14cc8:	str	r8, [sp, #60]	; 0x3c
   14ccc:	mov	r7, r1
   14cd0:	mov	r8, r5
   14cd4:	mov	r9, r4
   14cd8:	ldr	r5, [sp, #40]	; 0x28
   14cdc:	b	14d08 <__assert_fail@plt+0x3368>
   14ce0:	cmn	r5, r4
   14ce4:	movne	r5, #1
   14ce8:	moveq	r5, #0
   14cec:	ldrd	r2, [sp, #32]
   14cf0:	add	r8, r8, #1
   14cf4:	cmp	r3, fp
   14cf8:	cmpeq	r2, sl
   14cfc:	bhi	15204 <__assert_fail@plt+0x3864>
   14d00:	cmp	r8, #8
   14d04:	beq	151e0 <__assert_fail@plt+0x3840>
   14d08:	mov	r0, sl
   14d0c:	mov	r1, fp
   14d10:	ldrd	r2, [sp, #32]
   14d14:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   14d18:	mov	r1, r7
   14d1c:	asr	r4, r5, #1
   14d20:	add	r2, r2, r2, lsl #2
   14d24:	add	r6, r6, r2, lsl #1
   14d28:	mov	r0, r6
   14d2c:	bl	2aea8 <__assert_fail@plt+0x19508>
   14d30:	ldrd	r2, [sp, #32]
   14d34:	mov	r0, sl
   14d38:	add	r4, r4, r1, lsl #1
   14d3c:	mov	r1, fp
   14d40:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   14d44:	mov	sl, r0
   14d48:	mov	fp, r1
   14d4c:	mov	r0, r6
   14d50:	mov	r1, r7
   14d54:	bl	2acbc <__assert_fail@plt+0x1931c>
   14d58:	cmp	r7, r4
   14d5c:	add	r3, r5, r4
   14d60:	mov	r6, r0
   14d64:	bhi	14ce0 <__assert_fail@plt+0x3340>
   14d68:	cmp	r7, r3
   14d6c:	movcs	r5, #2
   14d70:	movcc	r5, #3
   14d74:	b	14cec <__assert_fail@plt+0x334c>
   14d78:	andeq	r0, r0, r0
   14d7c:	mvnsmi	r0, #0
   14d80:	andeq	r0, r0, r0
   14d84:	eormi	r0, r4, r0
   14d88:	andeq	ip, r2, r4, ror #16
   14d8c:	andeq	fp, r2, ip, asr #30
   14d90:	andeq	ip, r2, r0, ror r8
   14d94:	andeq	ip, r2, r8, ror #16
   14d98:	and	r7, r8, #3
   14d9c:	cmp	r7, #1
   14da0:	beq	14db4 <__assert_fail@plt+0x3414>
   14da4:	vldr	d7, [pc, #972]	; 15178 <__assert_fail@plt+0x37d8>
   14da8:	vcmpe.f64	d8, d7
   14dac:	vmrs	APSR_nzcv, fpscr
   14db0:	bmi	14fc4 <__assert_fail@plt+0x3624>
   14db4:	ldr	r4, [sp, #4]
   14db8:	vmov	r2, r3, d8
   14dbc:	ldr	r1, [pc, #964]	; 15188 <__assert_fail@plt+0x37e8>
   14dc0:	mov	r0, r4
   14dc4:	bl	118ec <sprintf@plt>
   14dc8:	mov	r0, r4
   14dcc:	bl	117a8 <strlen@plt>
   14dd0:	mov	r6, #0
   14dd4:	mvn	r5, #0
   14dd8:	mov	r7, r0
   14ddc:	ldr	r3, [sp]
   14de0:	mov	r2, r7
   14de4:	sub	r4, r3, r7
   14de8:	mov	r0, r4
   14dec:	ldr	r1, [sp, #4]
   14df0:	bl	1158c <memmove@plt>
   14df4:	sub	r7, r7, r6
   14df8:	add	r7, r4, r7
   14dfc:	tst	r8, #4
   14e00:	bne	14f30 <__assert_fail@plt+0x3590>
   14e04:	tst	r8, #128	; 0x80
   14e08:	beq	14ea0 <__assert_fail@plt+0x3500>
   14e0c:	cmn	r5, #1
   14e10:	beq	15018 <__assert_fail@plt+0x3678>
   14e14:	and	r3, r8, #256	; 0x100
   14e18:	orrs	r2, r5, r3
   14e1c:	beq	14ea0 <__assert_fail@plt+0x3500>
   14e20:	tst	r8, #64	; 0x40
   14e24:	ldrne	r1, [sp, #4]
   14e28:	addne	r2, r1, #648	; 0x288
   14e2c:	strne	r2, [sp]
   14e30:	movne	r2, #32
   14e34:	strbne	r2, [r1, #647]	; 0x287
   14e38:	cmp	r5, #0
   14e3c:	beq	15344 <__assert_fail@plt+0x39a4>
   14e40:	ldr	r2, [sp, #8]
   14e44:	ldr	r0, [sp]
   14e48:	cmp	r2, #0
   14e4c:	cmpeq	r5, #1
   14e50:	ldr	r2, [sp]
   14e54:	ldrne	r1, [pc, #816]	; 1518c <__assert_fail@plt+0x37ec>
   14e58:	moveq	r1, #107	; 0x6b
   14e5c:	add	r2, r2, #1
   14e60:	ldrbne	r1, [r1, r5]
   14e64:	cmp	r3, #0
   14e68:	streq	r2, [sp]
   14e6c:	strb	r1, [r0]
   14e70:	beq	14ea0 <__assert_fail@plt+0x3500>
   14e74:	ldr	r3, [sp, #8]
   14e78:	cmp	r5, #0
   14e7c:	cmpne	r3, #0
   14e80:	movne	r2, r0
   14e84:	movne	r3, #105	; 0x69
   14e88:	strbne	r3, [r2, #1]
   14e8c:	addne	r2, r2, #2
   14e90:	mov	r3, #66	; 0x42
   14e94:	strb	r3, [r2]
   14e98:	add	r3, r2, #1
   14e9c:	str	r3, [sp]
   14ea0:	ldr	r2, [sp]
   14ea4:	mov	r3, #0
   14ea8:	mov	r0, r4
   14eac:	strb	r3, [r2]
   14eb0:	add	sp, sp, #116	; 0x74
   14eb4:	vpop	{d8-d9}
   14eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ebc:	ldr	r6, [sp, #4]
   14ec0:	vmov	r2, r3, d9
   14ec4:	ldr	r1, [pc, #708]	; 15190 <__assert_fail@plt+0x37f0>
   14ec8:	mov	r0, r6
   14ecc:	bl	118ec <sprintf@plt>
   14ed0:	mov	r0, r6
   14ed4:	bl	117a8 <strlen@plt>
   14ed8:	ldr	r3, [sp, #8]
   14edc:	add	r6, r4, #1
   14ee0:	cmp	r3, #0
   14ee4:	movne	r3, #1
   14ee8:	moveq	r3, #2
   14eec:	add	r3, r3, r6
   14ef0:	cmp	r3, r0
   14ef4:	mov	r7, r0
   14ef8:	bcc	151d4 <__assert_fail@plt+0x3834>
   14efc:	tst	r8, #8
   14f00:	beq	14ddc <__assert_fail@plt+0x343c>
   14f04:	ldr	r3, [sp, #4]
   14f08:	add	r3, r3, r7
   14f0c:	ldrb	r3, [r3, #-1]
   14f10:	cmp	r3, #48	; 0x30
   14f14:	bne	14ddc <__assert_fail@plt+0x343c>
   14f18:	vldr	d7, [pc, #608]	; 15180 <__assert_fail@plt+0x37e0>
   14f1c:	ldr	r3, [sp, #12]
   14f20:	cmp	r3, #1
   14f24:	vmul.f64	d9, d9, d7
   14f28:	beq	14b80 <__assert_fail@plt+0x31e0>
   14f2c:	b	14b38 <__assert_fail@plt+0x3198>
   14f30:	ldr	r0, [sp, #20]
   14f34:	bl	117a8 <strlen@plt>
   14f38:	sub	r6, r7, r4
   14f3c:	mov	r1, r4
   14f40:	mov	r2, r6
   14f44:	mvn	sl, #0
   14f48:	mov	fp, r0
   14f4c:	add	r0, sp, #68	; 0x44
   14f50:	bl	115d4 <memcpy@plt>
   14f54:	ldr	r4, [sp, #20]
   14f58:	b	14f60 <__assert_fail@plt+0x35c0>
   14f5c:	bl	115d4 <memcpy@plt>
   14f60:	ldrb	r3, [r9]
   14f64:	cmp	r3, #0
   14f68:	beq	14f7c <__assert_fail@plt+0x35dc>
   14f6c:	cmp	r3, #255	; 0xff
   14f70:	movne	sl, r3
   14f74:	moveq	sl, r6
   14f78:	add	r9, r9, #1
   14f7c:	cmp	sl, r6
   14f80:	movcs	sl, r6
   14f84:	sub	r3, r7, sl
   14f88:	sub	r6, r6, sl
   14f8c:	add	r2, sp, #68	; 0x44
   14f90:	add	r1, r2, r6
   14f94:	mov	r0, r3
   14f98:	mov	r2, sl
   14f9c:	sub	r7, r3, fp
   14fa0:	bl	115d4 <memcpy@plt>
   14fa4:	cmp	r6, #0
   14fa8:	mov	r2, fp
   14fac:	mov	r1, r4
   14fb0:	mov	r3, r0
   14fb4:	mov	r0, r7
   14fb8:	bne	14f5c <__assert_fail@plt+0x35bc>
   14fbc:	mov	r4, r3
   14fc0:	b	14e04 <__assert_fail@plt+0x3464>
   14fc4:	vmov	r0, r1, d8
   14fc8:	bl	2b510 <__assert_fail@plt+0x19b70>
   14fcc:	cmp	r7, #0
   14fd0:	mov	r4, r0
   14fd4:	mov	r5, r1
   14fd8:	bne	14ff4 <__assert_fail@plt+0x3654>
   14fdc:	bl	2b44c <__assert_fail@plt+0x19aac>
   14fe0:	vmov	d7, r0, r1
   14fe4:	vcmp.f64	d7, d8
   14fe8:	vmrs	APSR_nzcv, fpscr
   14fec:	movne	r6, #1
   14ff0:	moveq	r6, #0
   14ff4:	adds	r0, r4, r6
   14ff8:	adc	r1, r5, #0
   14ffc:	bl	2b44c <__assert_fail@plt+0x19aac>
   15000:	vmov	d8, r0, r1
   15004:	b	14db4 <__assert_fail@plt+0x3414>
   15008:	mov	r3, #0
   1500c:	str	r3, [sp, #40]	; 0x28
   15010:	mov	r7, r3
   15014:	b	14c94 <__assert_fail@plt+0x32f4>
   15018:	ldrd	r2, [sp, #176]	; 0xb0
   1501c:	cmp	r3, #0
   15020:	cmpeq	r2, #1
   15024:	bls	152b8 <__assert_fail@plt+0x3918>
   15028:	ldr	r1, [sp, #16]
   1502c:	ldrd	r6, [sp, #176]	; 0xb0
   15030:	mov	r5, #1
   15034:	mov	r2, #1
   15038:	mov	r3, #0
   1503c:	mul	r0, r1, r3
   15040:	umull	r2, r3, r2, r1
   15044:	add	r3, r0, r3
   15048:	cmp	r7, r3
   1504c:	cmpeq	r6, r2
   15050:	bls	14e14 <__assert_fail@plt+0x3474>
   15054:	add	r5, r5, #1
   15058:	cmp	r5, #8
   1505c:	bne	1503c <__assert_fail@plt+0x369c>
   15060:	b	14e14 <__assert_fail@plt+0x3474>
   15064:	ldr	r3, [sp]
   15068:	mvn	r5, #0
   1506c:	str	r3, [sp, #28]
   15070:	ldr	r3, [sp, #12]
   15074:	cmp	r3, #1
   15078:	beq	150fc <__assert_fail@plt+0x375c>
   1507c:	ldr	r3, [sp, #12]
   15080:	cmp	r3, #0
   15084:	bne	15124 <__assert_fail@plt+0x3784>
   15088:	ldr	r3, [sp, #40]	; 0x28
   1508c:	add	r7, r7, r3
   15090:	cmp	r7, #0
   15094:	ble	15124 <__assert_fail@plt+0x3784>
   15098:	ldr	r3, [sp, #48]	; 0x30
   1509c:	adds	sl, sl, #1
   150a0:	adc	fp, fp, #0
   150a4:	cmp	r3, #0
   150a8:	beq	15124 <__assert_fail@plt+0x3784>
   150ac:	mov	r3, #0
   150b0:	ldr	r2, [sp, #16]
   150b4:	cmp	r3, fp
   150b8:	cmpeq	r2, sl
   150bc:	moveq	r3, #1
   150c0:	movne	r3, #0
   150c4:	cmp	r5, #7
   150c8:	movgt	r3, #0
   150cc:	andle	r3, r3, #1
   150d0:	cmp	r3, #0
   150d4:	beq	15124 <__assert_fail@plt+0x3784>
   150d8:	tst	r8, #8
   150dc:	add	r5, r5, #1
   150e0:	beq	15318 <__assert_fail@plt+0x3978>
   150e4:	ldr	r2, [sp, #28]
   150e8:	mov	r3, #49	; 0x31
   150ec:	sub	r4, r2, #1
   150f0:	strb	r3, [r2, #-1]
   150f4:	mov	r7, r2
   150f8:	b	14dfc <__assert_fail@plt+0x345c>
   150fc:	ldr	r1, [sp, #40]	; 0x28
   15100:	and	r2, sl, #1
   15104:	adds	r2, r2, r1
   15108:	mov	r3, #0
   1510c:	adc	r3, r3, r1, asr #31
   15110:	orr	r2, r2, r3
   15114:	cmp	r2, #0
   15118:	addne	r7, r7, #1
   1511c:	cmp	r7, #5
   15120:	bgt	15098 <__assert_fail@plt+0x36f8>
   15124:	ldr	r4, [sp, #28]
   15128:	mov	r6, #10
   1512c:	mov	r7, #0
   15130:	mov	r0, sl
   15134:	mov	r1, fp
   15138:	mov	r2, r6
   1513c:	mov	r3, r7
   15140:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   15144:	mov	r0, sl
   15148:	mov	r1, fp
   1514c:	mov	r3, r7
   15150:	add	r2, r2, #48	; 0x30
   15154:	strb	r2, [r4, #-1]!
   15158:	mov	r2, r6
   1515c:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   15160:	mov	sl, r0
   15164:	mov	fp, r1
   15168:	orrs	r3, sl, fp
   1516c:	bne	15130 <__assert_fail@plt+0x3790>
   15170:	ldr	r7, [sp, #28]
   15174:	b	14dfc <__assert_fail@plt+0x345c>
   15178:	andeq	r0, r0, r0
   1517c:	mvnsmi	r0, #0
   15180:	andeq	r0, r0, r0
   15184:	eormi	r0, r4, r0
   15188:	andeq	ip, r2, r8, ror #16
   1518c:	andeq	ip, r2, r4, asr #16
   15190:	andeq	ip, r2, r0, ror r8
   15194:	movcc	r3, #3
   15198:	strcc	r3, [sp, #40]	; 0x28
   1519c:	movcs	r3, #2
   151a0:	strcs	r3, [sp, #40]	; 0x28
   151a4:	b	14c94 <__assert_fail@plt+0x32f4>
   151a8:	ldr	r3, [sp]
   151ac:	mov	r5, #0
   151b0:	str	r3, [sp, #28]
   151b4:	b	15070 <__assert_fail@plt+0x36d0>
   151b8:	bl	2b44c <__assert_fail@plt+0x19aac>
   151bc:	vmov	d7, r0, r1
   151c0:	vcmp.f64	d7, d9
   151c4:	vmrs	APSR_nzcv, fpscr
   151c8:	movne	r0, #1
   151cc:	moveq	r0, #0
   151d0:	b	14b68 <__assert_fail@plt+0x31c8>
   151d4:	vldr	d7, [pc, #380]	; 15358 <__assert_fail@plt+0x39b8>
   151d8:	vmul.f64	d9, d9, d7
   151dc:	b	14b80 <__assert_fail@plt+0x31e0>
   151e0:	ldr	r3, [sp]
   151e4:	str	r5, [sp, #40]	; 0x28
   151e8:	mov	r4, r9
   151ec:	mov	r5, r8
   151f0:	mov	r7, r6
   151f4:	ldr	r9, [sp, #56]	; 0x38
   151f8:	ldr	r8, [sp, #60]	; 0x3c
   151fc:	str	r3, [sp, #28]
   15200:	b	15070 <__assert_fail@plt+0x36d0>
   15204:	cmp	fp, #0
   15208:	cmpeq	sl, #9
   1520c:	str	r5, [sp, #40]	; 0x28
   15210:	mov	r4, r9
   15214:	mov	r5, r8
   15218:	mov	r7, r6
   1521c:	ldr	r9, [sp, #56]	; 0x38
   15220:	ldr	r8, [sp, #60]	; 0x3c
   15224:	bhi	1530c <__assert_fail@plt+0x396c>
   15228:	ldr	r3, [sp, #12]
   1522c:	cmp	r3, #1
   15230:	beq	152c0 <__assert_fail@plt+0x3920>
   15234:	ldr	r2, [sp, #40]	; 0x28
   15238:	ldr	r3, [sp, #12]
   1523c:	cmp	r2, #0
   15240:	clz	r3, r3
   15244:	lsr	r3, r3, #5
   15248:	moveq	r3, #0
   1524c:	cmp	r3, #0
   15250:	beq	152a0 <__assert_fail@plt+0x3900>
   15254:	add	r7, r7, #1
   15258:	cmp	r7, #10
   1525c:	beq	152ec <__assert_fail@plt+0x394c>
   15260:	add	r7, r7, #48	; 0x30
   15264:	uxtb	r3, r7
   15268:	ldr	r2, [sp, #28]
   1526c:	ldr	r1, [sp, #4]
   15270:	add	r7, r2, #2
   15274:	sub	r2, r7, r4
   15278:	str	r2, [sp, #28]
   1527c:	strb	r3, [r1, #646]	; 0x286
   15280:	mov	r0, r2
   15284:	mov	r3, #0
   15288:	mov	r2, r4
   1528c:	ldr	r1, [sp, #24]
   15290:	mov	r7, r3
   15294:	str	r3, [sp, #40]	; 0x28
   15298:	bl	115d4 <memcpy@plt>
   1529c:	b	15070 <__assert_fail@plt+0x36d0>
   152a0:	cmp	r7, #0
   152a4:	bne	15260 <__assert_fail@plt+0x38c0>
   152a8:	tst	r8, #8
   152ac:	bne	152dc <__assert_fail@plt+0x393c>
   152b0:	mov	r3, #48	; 0x30
   152b4:	b	15268 <__assert_fail@plt+0x38c8>
   152b8:	mov	r5, #0
   152bc:	b	14e14 <__assert_fail@plt+0x3474>
   152c0:	ldr	r2, [sp, #40]	; 0x28
   152c4:	and	r3, r6, #1
   152c8:	add	r3, r3, r2
   152cc:	cmp	r3, #2
   152d0:	movle	r3, #0
   152d4:	movgt	r3, #1
   152d8:	b	1524c <__assert_fail@plt+0x38ac>
   152dc:	ldr	r3, [sp]
   152e0:	mov	r7, #0
   152e4:	str	r3, [sp, #28]
   152e8:	b	15070 <__assert_fail@plt+0x36d0>
   152ec:	adds	sl, sl, #1
   152f0:	adc	fp, fp, #0
   152f4:	cmp	fp, #0
   152f8:	mov	r3, #0
   152fc:	cmpeq	sl, #10
   15300:	str	r3, [sp, #40]	; 0x28
   15304:	moveq	r7, r3
   15308:	bne	152a8 <__assert_fail@plt+0x3908>
   1530c:	ldr	r3, [sp]
   15310:	str	r3, [sp, #28]
   15314:	b	15070 <__assert_fail@plt+0x36d0>
   15318:	ldr	r1, [sp, #28]
   1531c:	mvn	r3, r4
   15320:	add	r3, r1, r3
   15324:	mov	r2, #48	; 0x30
   15328:	strb	r2, [r1, #-1]
   1532c:	mov	r0, r3
   15330:	ldr	r1, [sp, #24]
   15334:	mov	r2, r4
   15338:	str	r3, [sp, #28]
   1533c:	bl	115d4 <memcpy@plt>
   15340:	b	150e4 <__assert_fail@plt+0x3744>
   15344:	cmp	r3, #0
   15348:	ldrne	r2, [sp]
   1534c:	bne	14e90 <__assert_fail@plt+0x34f0>
   15350:	b	14ea0 <__assert_fail@plt+0x3500>
   15354:	nop			; (mov r0, r0)
   15358:	andeq	r0, r0, r0
   1535c:	eormi	r0, r4, r0
   15360:	push	{r4, r5, r6, r7, r8, lr}
   15364:	subs	r4, r0, #0
   15368:	sub	sp, sp, #16
   1536c:	mov	r8, r1
   15370:	mov	r7, r2
   15374:	beq	1546c <__assert_fail@plt+0x3acc>
   15378:	ldrb	r3, [r4]
   1537c:	ldr	r5, [pc, #360]	; 154ec <__assert_fail@plt+0x3b4c>
   15380:	cmp	r3, #39	; 0x27
   15384:	addeq	r4, r4, #1
   15388:	mov	r3, #4
   1538c:	add	r2, r5, #12
   15390:	add	r1, r5, #20
   15394:	mov	r0, r4
   15398:	moveq	r6, #4
   1539c:	movne	r6, #0
   153a0:	bl	2a630 <__assert_fail@plt+0x18c90>
   153a4:	cmp	r0, #0
   153a8:	blt	15408 <__assert_fail@plt+0x3a68>
   153ac:	add	r5, r5, r0, lsl #2
   153b0:	mov	r1, #0
   153b4:	ldr	ip, [r5, #12]
   153b8:	mov	r0, #1
   153bc:	mov	r2, r0
   153c0:	orr	r6, r6, ip
   153c4:	mov	r3, r1
   153c8:	str	r0, [r7]
   153cc:	str	r1, [r7, #4]
   153d0:	mov	r0, #0
   153d4:	str	r6, [r8]
   153d8:	orrs	r3, r2, r3
   153dc:	bne	15400 <__assert_fail@plt+0x3a60>
   153e0:	ldr	r0, [pc, #264]	; 154f0 <__assert_fail@plt+0x3b50>
   153e4:	bl	116f4 <getenv@plt>
   153e8:	mov	r3, #0
   153ec:	cmp	r0, #0
   153f0:	movne	r2, #512	; 0x200
   153f4:	moveq	r2, #1024	; 0x400
   153f8:	mov	r0, #4
   153fc:	strd	r2, [r7]
   15400:	add	sp, sp, #16
   15404:	pop	{r4, r5, r6, r7, r8, pc}
   15408:	ldr	r2, [pc, #228]	; 154f4 <__assert_fail@plt+0x3b54>
   1540c:	mov	r3, r7
   15410:	str	r2, [sp]
   15414:	add	r1, sp, #12
   15418:	mov	r2, #0
   1541c:	mov	r0, r4
   15420:	bl	1aea8 <__assert_fail@plt+0x9508>
   15424:	cmp	r0, #0
   15428:	bne	154b0 <__assert_fail@plt+0x3b10>
   1542c:	ldrb	r3, [r4]
   15430:	sub	r3, r3, #48	; 0x30
   15434:	cmp	r3, #9
   15438:	bls	15464 <__assert_fail@plt+0x3ac4>
   1543c:	ldr	r2, [sp, #12]
   15440:	cmp	r4, r2
   15444:	bne	15454 <__assert_fail@plt+0x3ab4>
   15448:	b	154c0 <__assert_fail@plt+0x3b20>
   1544c:	cmp	r2, r4
   15450:	beq	154c0 <__assert_fail@plt+0x3b20>
   15454:	ldrb	r3, [r4, #1]!
   15458:	sub	r3, r3, #48	; 0x30
   1545c:	cmp	r3, #9
   15460:	bhi	1544c <__assert_fail@plt+0x3aac>
   15464:	ldrd	r2, [r7]
   15468:	b	153d0 <__assert_fail@plt+0x3a30>
   1546c:	ldr	r0, [pc, #132]	; 154f8 <__assert_fail@plt+0x3b58>
   15470:	bl	116f4 <getenv@plt>
   15474:	subs	r4, r0, #0
   15478:	bne	15378 <__assert_fail@plt+0x39d8>
   1547c:	ldr	r0, [pc, #120]	; 154fc <__assert_fail@plt+0x3b5c>
   15480:	bl	116f4 <getenv@plt>
   15484:	subs	r4, r0, #0
   15488:	bne	15378 <__assert_fail@plt+0x39d8>
   1548c:	ldr	r0, [pc, #92]	; 154f0 <__assert_fail@plt+0x3b50>
   15490:	bl	116f4 <getenv@plt>
   15494:	mov	r3, #0
   15498:	mov	r6, #0
   1549c:	cmp	r0, #0
   154a0:	movne	r2, #512	; 0x200
   154a4:	moveq	r2, #1024	; 0x400
   154a8:	strd	r2, [r7]
   154ac:	b	153d0 <__assert_fail@plt+0x3a30>
   154b0:	mov	r3, #0
   154b4:	str	r3, [r8]
   154b8:	ldrd	r2, [r7]
   154bc:	b	153d8 <__assert_fail@plt+0x3a38>
   154c0:	ldrb	r3, [r2, #-1]
   154c4:	cmp	r3, #66	; 0x42
   154c8:	orrne	r6, r6, #128	; 0x80
   154cc:	beq	154d8 <__assert_fail@plt+0x3b38>
   154d0:	orr	r6, r6, #32
   154d4:	b	15464 <__assert_fail@plt+0x3ac4>
   154d8:	ldrb	r3, [r2, #-2]
   154dc:	orr	r6, r6, #384	; 0x180
   154e0:	cmp	r3, #105	; 0x69
   154e4:	bne	15464 <__assert_fail@plt+0x3ac4>
   154e8:	b	154d0 <__assert_fail@plt+0x3b30>
   154ec:	andeq	ip, r2, r4, asr #16
   154f0:	muleq	r2, r0, r8
   154f4:	andeq	ip, r2, r0, lsr #17
   154f8:	andeq	ip, r2, r8, ror r8
   154fc:	andeq	ip, r2, r4, lsl #17
   15500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15504:	add	fp, sp, #32
   15508:	lsrs	ip, r2, #30
   1550c:	sub	sp, sp, #28
   15510:	movne	ip, #1
   15514:	moveq	ip, #0
   15518:	str	r2, [fp, #-52]	; 0xffffffcc
   1551c:	lsls	r2, r2, #2
   15520:	str	r0, [fp, #-44]	; 0xffffffd4
   15524:	str	r3, [fp, #-60]	; 0xffffffc4
   15528:	bmi	15534 <__assert_fail@plt+0x3b94>
   1552c:	cmp	ip, #0
   15530:	beq	15540 <__assert_fail@plt+0x3ba0>
   15534:	mov	r0, #0
   15538:	sub	sp, fp, #32
   1553c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15540:	cmp	r2, #4016	; 0xfb0
   15544:	mov	r6, r1
   15548:	bls	1570c <__assert_fail@plt+0x3d6c>
   1554c:	mov	r0, r2
   15550:	bl	2ab04 <__assert_fail@plt+0x19164>
   15554:	mov	r9, r0
   15558:	cmp	r9, #0
   1555c:	beq	15534 <__assert_fail@plt+0x3b94>
   15560:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15564:	cmp	r3, #2
   15568:	mov	r3, #1
   1556c:	str	r3, [r9, #4]
   15570:	bls	15640 <__assert_fail@plt+0x3ca0>
   15574:	bl	11778 <__ctype_b_loc@plt>
   15578:	mov	r5, #0
   1557c:	mov	r7, #2
   15580:	add	r3, r9, #8
   15584:	str	r6, [fp, #-48]	; 0xffffffd0
   15588:	str	r3, [fp, #-40]	; 0xffffffd8
   1558c:	ldr	sl, [r0]
   15590:	mov	r8, sl
   15594:	mov	sl, r9
   15598:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1559c:	ldrb	r9, [r3, #1]!
   155a0:	str	r3, [fp, #-48]	; 0xffffffd0
   155a4:	sxth	r3, r9
   155a8:	str	r3, [fp, #-56]	; 0xffffffc8
   155ac:	lsl	r0, r3, #1
   155b0:	ldrh	r0, [r8, r0]
   155b4:	tst	r0, #256	; 0x100
   155b8:	beq	155e0 <__assert_fail@plt+0x3c40>
   155bc:	bl	11748 <__ctype_tolower_loc@plt>
   155c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   155c4:	ldr	r0, [r0]
   155c8:	ldrb	r9, [r0, r3, lsl #2]
   155cc:	b	155e0 <__assert_fail@plt+0x3c40>
   155d0:	cmp	r5, #0
   155d4:	beq	15724 <__assert_fail@plt+0x3d84>
   155d8:	ldr	r3, [sl, r5, lsl #2]
   155dc:	sub	r5, r5, r3
   155e0:	ldrb	r3, [r6, r5]
   155e4:	mov	r2, r3
   155e8:	sxth	r4, r3
   155ec:	lsl	r3, r4, #1
   155f0:	ldrh	r3, [r8, r3]
   155f4:	tst	r3, #256	; 0x100
   155f8:	beq	15608 <__assert_fail@plt+0x3c68>
   155fc:	bl	11748 <__ctype_tolower_loc@plt>
   15600:	ldr	r3, [r0]
   15604:	ldr	r2, [r3, r4, lsl #2]
   15608:	cmp	r2, r9
   1560c:	bne	155d0 <__assert_fail@plt+0x3c30>
   15610:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15614:	add	r5, r5, #1
   15618:	sub	r3, r7, r5
   1561c:	str	r3, [r2]
   15620:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15624:	add	r7, r7, #1
   15628:	cmp	r3, r7
   1562c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15630:	add	r3, r3, #4
   15634:	str	r3, [fp, #-40]	; 0xffffffd8
   15638:	bne	15598 <__assert_fail@plt+0x3bf8>
   1563c:	mov	r9, sl
   15640:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15644:	mov	r8, #0
   15648:	str	r8, [r3]
   1564c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15650:	mov	r7, r3
   15654:	ldrb	r5, [r3]
   15658:	cmp	r5, #0
   1565c:	beq	156f8 <__assert_fail@plt+0x3d58>
   15660:	bl	11778 <__ctype_b_loc@plt>
   15664:	ldrb	r3, [r6, r8]
   15668:	sxth	r4, r3
   1566c:	lsl	r1, r4, #1
   15670:	ldr	r2, [r0]
   15674:	ldrh	r1, [r2, r1]
   15678:	tst	r1, #256	; 0x100
   1567c:	moveq	r4, r3
   15680:	beq	15698 <__assert_fail@plt+0x3cf8>
   15684:	str	r2, [fp, #-40]	; 0xffffffd8
   15688:	bl	11748 <__ctype_tolower_loc@plt>
   1568c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15690:	ldr	r3, [r0]
   15694:	ldr	r4, [r3, r4, lsl #2]
   15698:	sxth	sl, r5
   1569c:	lsl	r1, sl, #1
   156a0:	ldrh	r2, [r2, r1]
   156a4:	tst	r2, #256	; 0x100
   156a8:	moveq	r3, r5
   156ac:	beq	156bc <__assert_fail@plt+0x3d1c>
   156b0:	bl	11748 <__ctype_tolower_loc@plt>
   156b4:	ldr	r2, [r0]
   156b8:	ldr	r3, [r2, sl, lsl #2]
   156bc:	cmp	r4, r3
   156c0:	beq	15730 <__assert_fail@plt+0x3d90>
   156c4:	cmp	r8, #0
   156c8:	ldrne	r3, [r9, r8, lsl #2]
   156cc:	ldrne	r2, [fp, #-44]	; 0xffffffd4
   156d0:	ldreq	r3, [fp, #-44]	; 0xffffffd4
   156d4:	ldrbeq	r5, [r7, #1]
   156d8:	addne	r2, r2, r3
   156dc:	addeq	r3, r3, #1
   156e0:	strne	r2, [fp, #-44]	; 0xffffffd4
   156e4:	subne	r8, r8, r3
   156e8:	streq	r3, [fp, #-44]	; 0xffffffd4
   156ec:	addeq	r7, r7, #1
   156f0:	cmp	r5, #0
   156f4:	bne	15660 <__assert_fail@plt+0x3cc0>
   156f8:	mov	r0, r9
   156fc:	bl	2ab54 <__assert_fail@plt+0x191b4>
   15700:	mov	r0, #1
   15704:	sub	sp, fp, #32
   15708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1570c:	add	r3, r2, #29
   15710:	bic	r3, r3, #7
   15714:	sub	sp, sp, r3
   15718:	add	r1, sp, #15
   1571c:	bic	r9, r1, #15
   15720:	b	15558 <__assert_fail@plt+0x3bb8>
   15724:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15728:	str	r7, [r3]
   1572c:	b	15620 <__assert_fail@plt+0x3c80>
   15730:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15734:	add	r8, r8, #1
   15738:	cmp	r3, r8
   1573c:	add	r3, r7, #1
   15740:	ldrbne	r5, [r7, #1]
   15744:	movne	r7, r3
   15748:	bne	15658 <__assert_fail@plt+0x3cb8>
   1574c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15750:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15754:	mov	r0, r9
   15758:	str	r2, [r3]
   1575c:	bl	2ab54 <__assert_fail@plt+0x191b4>
   15760:	mov	r0, #1
   15764:	b	15704 <__assert_fail@plt+0x3d64>
   15768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1576c:	add	fp, sp, #32
   15770:	sub	sp, sp, #228	; 0xe4
   15774:	str	r0, [fp, #-252]	; 0xffffff04
   15778:	mov	r0, r1
   1577c:	mov	r4, r1
   15780:	str	r2, [fp, #-260]	; 0xfffffefc
   15784:	bl	16d4c <__assert_fail@plt+0x53ac>
   15788:	mov	r3, #44	; 0x2c
   1578c:	str	r0, [fp, #-248]	; 0xffffff08
   15790:	umull	r0, r1, r0, r3
   15794:	adds	r2, r1, #0
   15798:	movne	r2, #1
   1579c:	cmp	r0, #0
   157a0:	blt	157ac <__assert_fail@plt+0x3e0c>
   157a4:	cmp	r2, #0
   157a8:	beq	157b8 <__assert_fail@plt+0x3e18>
   157ac:	mov	r0, #0
   157b0:	sub	sp, fp, #32
   157b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157b8:	ldr	r2, [fp, #-248]	; 0xffffff08
   157bc:	mul	r0, r3, r2
   157c0:	cmp	r0, #4016	; 0xfb0
   157c4:	bls	15ab4 <__assert_fail@plt+0x4114>
   157c8:	bl	2ab04 <__assert_fail@plt+0x19164>
   157cc:	str	r0, [fp, #-256]	; 0xffffff00
   157d0:	ldr	r3, [fp, #-256]	; 0xffffff00
   157d4:	cmp	r3, #0
   157d8:	beq	157ac <__assert_fail@plt+0x3e0c>
   157dc:	ldr	r2, [fp, #-248]	; 0xffffff08
   157e0:	add	r6, r3, #16
   157e4:	mov	r7, #1
   157e8:	add	sl, r2, r2, lsl #2
   157ec:	mov	r8, #0
   157f0:	add	sl, r3, sl, lsl #3
   157f4:	str	r4, [fp, #-188]	; 0xffffff44
   157f8:	str	r8, [fp, #-196]	; 0xffffff3c
   157fc:	strb	r8, [fp, #-204]	; 0xffffff34
   15800:	str	r8, [fp, #-200]	; 0xffffff38
   15804:	strb	r8, [fp, #-192]	; 0xffffff40
   15808:	ldrb	r3, [fp, #-204]	; 0xffffff34
   1580c:	ldr	r4, [fp, #-188]	; 0xffffff44
   15810:	cmp	r3, #0
   15814:	bne	15c88 <__assert_fail@plt+0x42e8>
   15818:	ldrb	r3, [r4]
   1581c:	ldr	r1, [pc, #1936]	; 15fb4 <__assert_fail@plt+0x4614>
   15820:	and	r2, r3, #31
   15824:	lsr	r3, r3, #5
   15828:	ldr	r3, [r1, r3, lsl #2]
   1582c:	lsr	r3, r3, r2
   15830:	tst	r3, #1
   15834:	beq	15c74 <__assert_fail@plt+0x42d4>
   15838:	str	r7, [fp, #-184]	; 0xffffff48
   1583c:	ldrb	r4, [r4]
   15840:	strb	r7, [fp, #-180]	; 0xffffff4c
   15844:	strb	r7, [fp, #-192]	; 0xffffff40
   15848:	cmp	r4, #0
   1584c:	str	r4, [fp, #-176]	; 0xffffff50
   15850:	bne	15cf4 <__assert_fail@plt+0x4354>
   15854:	ldr	r3, [fp, #-248]	; 0xffffff08
   15858:	str	r7, [sl, #4]
   1585c:	cmp	r3, #2
   15860:	bls	15900 <__assert_fail@plt+0x3f60>
   15864:	ldr	r9, [fp, #-256]	; 0xffffff00
   15868:	add	r7, sl, #8
   1586c:	mov	r5, r9
   15870:	mov	r6, #2
   15874:	ldrb	r8, [r5, #48]	; 0x30
   15878:	b	158a8 <__assert_fail@plt+0x3f08>
   1587c:	ldrb	r2, [r3, #8]
   15880:	cmp	r2, #0
   15884:	beq	158b8 <__assert_fail@plt+0x3f18>
   15888:	ldr	r3, [r3, #12]
   1588c:	ldr	r2, [r5, #52]	; 0x34
   15890:	cmp	r2, r3
   15894:	beq	158dc <__assert_fail@plt+0x3f3c>
   15898:	cmp	r4, #0
   1589c:	beq	15df4 <__assert_fail@plt+0x4454>
   158a0:	ldr	r3, [sl, r4, lsl #2]
   158a4:	sub	r4, r4, r3
   158a8:	add	r3, r4, r4, lsl #2
   158ac:	cmp	r8, #0
   158b0:	add	r3, r9, r3, lsl #3
   158b4:	bne	1587c <__assert_fail@plt+0x3edc>
   158b8:	ldr	r2, [r5, #44]	; 0x2c
   158bc:	ldr	r1, [r3, #4]
   158c0:	cmp	r2, r1
   158c4:	bne	15898 <__assert_fail@plt+0x3ef8>
   158c8:	ldr	r1, [r3]
   158cc:	ldr	r0, [r5, #40]	; 0x28
   158d0:	bl	1161c <memcmp@plt>
   158d4:	cmp	r0, #0
   158d8:	bne	15898 <__assert_fail@plt+0x3ef8>
   158dc:	add	r4, r4, #1
   158e0:	sub	r2, r6, r4
   158e4:	str	r2, [r7]
   158e8:	ldr	r3, [fp, #-248]	; 0xffffff08
   158ec:	add	r6, r6, #1
   158f0:	cmp	r3, r6
   158f4:	add	r5, r5, #40	; 0x28
   158f8:	add	r7, r7, #4
   158fc:	bne	15874 <__assert_fail@plt+0x3ed4>
   15900:	ldr	r1, [fp, #-252]	; 0xffffff04
   15904:	mov	r2, #0
   15908:	str	r1, [fp, #-132]	; 0xffffff7c
   1590c:	str	r1, [fp, #-76]	; 0xffffffb4
   15910:	ldr	r1, [fp, #-260]	; 0xfffffefc
   15914:	mov	r3, r2
   15918:	cmp	r3, #0
   1591c:	str	sl, [fp, #-252]	; 0xffffff04
   15920:	str	r2, [r1]
   15924:	strb	r2, [fp, #-148]	; 0xffffff6c
   15928:	str	r2, [fp, #-144]	; 0xffffff70
   1592c:	strb	r2, [fp, #-136]	; 0xffffff78
   15930:	strb	r2, [fp, #-92]	; 0xffffffa4
   15934:	str	r2, [fp, #-88]	; 0xffffffa8
   15938:	strb	r2, [fp, #-80]	; 0xffffffb0
   1593c:	mov	r8, r2
   15940:	mov	r7, r2
   15944:	str	r2, [fp, #-140]	; 0xffffff74
   15948:	str	r2, [fp, #-84]	; 0xffffffac
   1594c:	mov	r6, #1
   15950:	ldr	r9, [pc, #1628]	; 15fb4 <__assert_fail@plt+0x4614>
   15954:	ldr	sl, [fp, #-256]	; 0xffffff00
   15958:	bne	15be4 <__assert_fail@plt+0x4244>
   1595c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15960:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   15964:	cmp	r3, #0
   15968:	bne	1599c <__assert_fail@plt+0x3ffc>
   1596c:	ldrb	r3, [r5]
   15970:	and	r2, r3, #31
   15974:	lsr	r3, r3, #5
   15978:	ldr	r3, [r9, r3, lsl #2]
   1597c:	lsr	r3, r3, r2
   15980:	tst	r3, #1
   15984:	bne	15d44 <__assert_fail@plt+0x43a4>
   15988:	sub	r0, fp, #88	; 0x58
   1598c:	bl	11604 <mbsinit@plt>
   15990:	cmp	r0, #0
   15994:	beq	15f8c <__assert_fail@plt+0x45ec>
   15998:	strb	r6, [fp, #-92]	; 0xffffffa4
   1599c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   159a0:	mov	r1, r0
   159a4:	mov	r0, r5
   159a8:	bl	1a378 <__assert_fail@plt+0x89d8>
   159ac:	sub	r3, fp, #88	; 0x58
   159b0:	mov	r1, r5
   159b4:	mov	r2, r0
   159b8:	sub	r0, fp, #64	; 0x40
   159bc:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   159c0:	cmn	r0, #1
   159c4:	str	r0, [fp, #-72]	; 0xffffffb8
   159c8:	beq	15de0 <__assert_fail@plt+0x4440>
   159cc:	cmn	r0, #2
   159d0:	beq	15a18 <__assert_fail@plt+0x4078>
   159d4:	cmp	r0, #0
   159d8:	beq	15f00 <__assert_fail@plt+0x4560>
   159dc:	ldr	r4, [fp, #-64]	; 0xffffffc0
   159e0:	sub	r0, fp, #88	; 0x58
   159e4:	strb	r6, [fp, #-68]	; 0xffffffbc
   159e8:	bl	11604 <mbsinit@plt>
   159ec:	strb	r6, [fp, #-80]	; 0xffffffb0
   159f0:	cmp	r0, #0
   159f4:	strbne	r7, [fp, #-92]	; 0xffffffa4
   159f8:	cmp	r4, #0
   159fc:	mov	r5, r6
   15a00:	bne	15a30 <__assert_fail@plt+0x4090>
   15a04:	ldr	r0, [fp, #-256]	; 0xffffff00
   15a08:	bl	2ab54 <__assert_fail@plt+0x191b4>
   15a0c:	mov	r0, #1
   15a10:	sub	sp, fp, #32
   15a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a18:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15a1c:	bl	117a8 <strlen@plt>
   15a20:	mov	r5, #0
   15a24:	strb	r7, [fp, #-68]	; 0xffffffbc
   15a28:	strb	r6, [fp, #-80]	; 0xffffffb0
   15a2c:	str	r0, [fp, #-72]	; 0xffffffb8
   15a30:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15a34:	sub	r2, fp, #60	; 0x3c
   15a38:	cmp	r3, r2
   15a3c:	strne	r3, [fp, #-244]	; 0xffffff0c
   15a40:	ldrne	r4, [fp, #-72]	; 0xffffffb8
   15a44:	beq	15f24 <__assert_fail@plt+0x4584>
   15a48:	cmp	r5, #0
   15a4c:	str	r4, [fp, #-240]	; 0xffffff10
   15a50:	strb	r5, [fp, #-236]	; 0xffffff14
   15a54:	beq	15ad0 <__assert_fail@plt+0x4130>
   15a58:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15a5c:	bl	115f8 <towlower@plt>
   15a60:	add	r3, r8, r8, lsl #2
   15a64:	add	r3, sl, r3, lsl #3
   15a68:	ldrb	r2, [r3, #8]
   15a6c:	cmp	r2, #0
   15a70:	str	r0, [fp, #-232]	; 0xffffff18
   15a74:	beq	15ad8 <__assert_fail@plt+0x4138>
   15a78:	ldr	r3, [r3, #12]
   15a7c:	cmp	r0, r3
   15a80:	bne	15ae4 <__assert_fail@plt+0x4144>
   15a84:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15a88:	ldr	r3, [fp, #-248]	; 0xffffff08
   15a8c:	add	r8, r8, #1
   15a90:	add	r5, r5, r4
   15a94:	cmp	r3, r8
   15a98:	strb	r7, [fp, #-80]	; 0xffffffb0
   15a9c:	str	r5, [fp, #-76]	; 0xffffffb4
   15aa0:	bne	15960 <__assert_fail@plt+0x3fc0>
   15aa4:	ldr	r2, [fp, #-260]	; 0xfffffefc
   15aa8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15aac:	str	r3, [r2]
   15ab0:	b	15a04 <__assert_fail@plt+0x4064>
   15ab4:	add	r3, r0, #29
   15ab8:	bic	r3, r3, #7
   15abc:	sub	sp, sp, r3
   15ac0:	add	r3, sp, #15
   15ac4:	bic	r3, r3, #15
   15ac8:	str	r3, [fp, #-256]	; 0xffffff00
   15acc:	b	157d0 <__assert_fail@plt+0x3e30>
   15ad0:	add	r3, r8, r8, lsl #2
   15ad4:	add	r3, sl, r3, lsl #3
   15ad8:	ldr	r2, [r3, #4]
   15adc:	cmp	r2, r4
   15ae0:	beq	15dc4 <__assert_fail@plt+0x4424>
   15ae4:	cmp	r8, #0
   15ae8:	beq	15d7c <__assert_fail@plt+0x43dc>
   15aec:	ldr	r3, [fp, #-252]	; 0xffffff04
   15af0:	ldr	r5, [r3, r8, lsl #2]
   15af4:	cmp	r5, #0
   15af8:	sub	r8, r8, r5
   15afc:	beq	15bd8 <__assert_fail@plt+0x4238>
   15b00:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15b04:	cmp	r3, #0
   15b08:	bne	15bf8 <__assert_fail@plt+0x4258>
   15b0c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15b10:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15b14:	cmp	r3, #0
   15b18:	bne	15b4c <__assert_fail@plt+0x41ac>
   15b1c:	ldrb	r3, [r4]
   15b20:	and	r2, r3, #31
   15b24:	lsr	r3, r3, #5
   15b28:	ldr	r3, [r9, r3, lsl #2]
   15b2c:	lsr	r3, r3, r2
   15b30:	tst	r3, #1
   15b34:	bne	15c0c <__assert_fail@plt+0x426c>
   15b38:	sub	r0, fp, #144	; 0x90
   15b3c:	bl	11604 <mbsinit@plt>
   15b40:	cmp	r0, #0
   15b44:	beq	15f8c <__assert_fail@plt+0x45ec>
   15b48:	strb	r6, [fp, #-148]	; 0xffffff6c
   15b4c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   15b50:	mov	r1, r0
   15b54:	mov	r0, r4
   15b58:	bl	1a378 <__assert_fail@plt+0x89d8>
   15b5c:	sub	r3, fp, #144	; 0x90
   15b60:	mov	r1, r4
   15b64:	mov	r2, r0
   15b68:	sub	r0, fp, #120	; 0x78
   15b6c:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   15b70:	cmn	r0, #1
   15b74:	str	r0, [fp, #-128]	; 0xffffff80
   15b78:	beq	15bb4 <__assert_fail@plt+0x4214>
   15b7c:	cmn	r0, #2
   15b80:	beq	15c28 <__assert_fail@plt+0x4288>
   15b84:	cmp	r0, #0
   15b88:	beq	15c40 <__assert_fail@plt+0x42a0>
   15b8c:	ldr	r4, [fp, #-120]	; 0xffffff88
   15b90:	sub	r0, fp, #144	; 0x90
   15b94:	strb	r6, [fp, #-124]	; 0xffffff84
   15b98:	bl	11604 <mbsinit@plt>
   15b9c:	strb	r6, [fp, #-136]	; 0xffffff78
   15ba0:	cmp	r0, #0
   15ba4:	strbne	r7, [fp, #-148]	; 0xffffff6c
   15ba8:	cmp	r4, #0
   15bac:	bne	15bbc <__assert_fail@plt+0x421c>
   15bb0:	bl	11964 <abort@plt>
   15bb4:	str	r6, [fp, #-128]	; 0xffffff80
   15bb8:	strb	r7, [fp, #-124]	; 0xffffff84
   15bbc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15bc0:	ldr	r3, [fp, #-128]	; 0xffffff80
   15bc4:	subs	r5, r5, #1
   15bc8:	add	r4, r4, r3
   15bcc:	strb	r7, [fp, #-136]	; 0xffffff78
   15bd0:	str	r4, [fp, #-132]	; 0xffffff7c
   15bd4:	bne	15b10 <__assert_fail@plt+0x4170>
   15bd8:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   15bdc:	cmp	r3, #0
   15be0:	beq	1595c <__assert_fail@plt+0x3fbc>
   15be4:	ldrb	r5, [fp, #-68]	; 0xffffffbc
   15be8:	cmp	r5, #0
   15bec:	ldrne	r4, [fp, #-64]	; 0xffffffc0
   15bf0:	beq	15a30 <__assert_fail@plt+0x4090>
   15bf4:	b	159f8 <__assert_fail@plt+0x4058>
   15bf8:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15bfc:	cmp	r3, #0
   15c00:	ldrne	r4, [fp, #-120]	; 0xffffff88
   15c04:	beq	15bbc <__assert_fail@plt+0x421c>
   15c08:	b	15ba8 <__assert_fail@plt+0x4208>
   15c0c:	str	r6, [fp, #-128]	; 0xffffff80
   15c10:	ldrb	r3, [r4]
   15c14:	strb	r6, [fp, #-124]	; 0xffffff84
   15c18:	strb	r6, [fp, #-136]	; 0xffffff78
   15c1c:	str	r3, [fp, #-120]	; 0xffffff88
   15c20:	mov	r4, r3
   15c24:	b	15ba8 <__assert_fail@plt+0x4208>
   15c28:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15c2c:	mov	r0, r4
   15c30:	bl	117a8 <strlen@plt>
   15c34:	strb	r7, [fp, #-124]	; 0xffffff84
   15c38:	str	r0, [fp, #-128]	; 0xffffff80
   15c3c:	b	15bc0 <__assert_fail@plt+0x4220>
   15c40:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15c44:	str	r6, [fp, #-128]	; 0xffffff80
   15c48:	ldrb	r3, [r4]
   15c4c:	cmp	r3, #0
   15c50:	bne	15fa0 <__assert_fail@plt+0x4600>
   15c54:	ldr	r4, [fp, #-120]	; 0xffffff88
   15c58:	cmp	r4, #0
   15c5c:	beq	15b90 <__assert_fail@plt+0x41f0>
   15c60:	ldr	r3, [pc, #848]	; 15fb8 <__assert_fail@plt+0x4618>
   15c64:	mov	r2, #172	; 0xac
   15c68:	ldr	r1, [pc, #844]	; 15fbc <__assert_fail@plt+0x461c>
   15c6c:	ldr	r0, [pc, #844]	; 15fc0 <__assert_fail@plt+0x4620>
   15c70:	bl	119a0 <__assert_fail@plt>
   15c74:	sub	r0, fp, #200	; 0xc8
   15c78:	bl	11604 <mbsinit@plt>
   15c7c:	cmp	r0, #0
   15c80:	beq	15f8c <__assert_fail@plt+0x45ec>
   15c84:	strb	r7, [fp, #-204]	; 0xffffff34
   15c88:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   15c8c:	mov	r1, r0
   15c90:	mov	r0, r4
   15c94:	bl	1a378 <__assert_fail@plt+0x89d8>
   15c98:	sub	r3, fp, #200	; 0xc8
   15c9c:	mov	r1, r4
   15ca0:	mov	r2, r0
   15ca4:	sub	r0, fp, #176	; 0xb0
   15ca8:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   15cac:	cmn	r0, #1
   15cb0:	str	r0, [fp, #-184]	; 0xffffff48
   15cb4:	strbeq	r8, [fp, #-180]	; 0xffffff4c
   15cb8:	streq	r7, [fp, #-184]	; 0xffffff48
   15cbc:	beq	15d70 <__assert_fail@plt+0x43d0>
   15cc0:	cmn	r0, #2
   15cc4:	beq	15d60 <__assert_fail@plt+0x43c0>
   15cc8:	cmp	r0, #0
   15ccc:	beq	15dfc <__assert_fail@plt+0x445c>
   15cd0:	ldr	r4, [fp, #-176]	; 0xffffff50
   15cd4:	sub	r0, fp, #200	; 0xc8
   15cd8:	strb	r7, [fp, #-180]	; 0xffffff4c
   15cdc:	bl	11604 <mbsinit@plt>
   15ce0:	strb	r7, [fp, #-192]	; 0xffffff40
   15ce4:	cmp	r0, #0
   15ce8:	strbne	r8, [fp, #-204]	; 0xffffff34
   15cec:	cmp	r4, #0
   15cf0:	beq	15854 <__assert_fail@plt+0x3eb4>
   15cf4:	mov	r9, r7
   15cf8:	ldr	r4, [fp, #-188]	; 0xffffff44
   15cfc:	sub	r3, fp, #172	; 0xac
   15d00:	cmp	r4, r3
   15d04:	strne	r4, [r6, #-16]
   15d08:	ldrne	r5, [fp, #-184]	; 0xffffff48
   15d0c:	beq	15ec8 <__assert_fail@plt+0x4528>
   15d10:	cmp	r9, #0
   15d14:	str	r5, [r6, #-12]
   15d18:	strb	r9, [r6, #-8]
   15d1c:	beq	15d30 <__assert_fail@plt+0x4390>
   15d20:	ldr	r0, [fp, #-176]	; 0xffffff50
   15d24:	str	r0, [r6, #-4]
   15d28:	bl	115f8 <towlower@plt>
   15d2c:	str	r0, [r6, #-4]
   15d30:	add	r4, r4, r5
   15d34:	add	r6, r6, #40	; 0x28
   15d38:	str	r4, [fp, #-188]	; 0xffffff44
   15d3c:	strb	r8, [fp, #-192]	; 0xffffff40
   15d40:	b	15808 <__assert_fail@plt+0x3e68>
   15d44:	str	r6, [fp, #-72]	; 0xffffffb8
   15d48:	ldrb	r3, [r5]
   15d4c:	strb	r6, [fp, #-68]	; 0xffffffbc
   15d50:	strb	r6, [fp, #-80]	; 0xffffffb0
   15d54:	str	r3, [fp, #-64]	; 0xffffffc0
   15d58:	mov	r4, r3
   15d5c:	b	159f8 <__assert_fail@plt+0x4058>
   15d60:	ldr	r0, [fp, #-188]	; 0xffffff44
   15d64:	bl	117a8 <strlen@plt>
   15d68:	strb	r8, [fp, #-180]	; 0xffffff4c
   15d6c:	str	r0, [fp, #-184]	; 0xffffff48
   15d70:	strb	r7, [fp, #-192]	; 0xffffff40
   15d74:	mov	r9, r8
   15d78:	b	15cf8 <__assert_fail@plt+0x4358>
   15d7c:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15d80:	cmp	r3, #0
   15d84:	beq	15e20 <__assert_fail@plt+0x4480>
   15d88:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15d8c:	cmp	r3, #0
   15d90:	ldrne	r4, [fp, #-120]	; 0xffffff88
   15d94:	bne	15ebc <__assert_fail@plt+0x451c>
   15d98:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15d9c:	ldr	r3, [fp, #-128]	; 0xffffff80
   15da0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15da4:	add	r4, r4, r3
   15da8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   15dac:	strb	r7, [fp, #-136]	; 0xffffff78
   15db0:	add	r5, r5, r3
   15db4:	strb	r7, [fp, #-80]	; 0xffffffb0
   15db8:	str	r4, [fp, #-132]	; 0xffffff7c
   15dbc:	str	r5, [fp, #-76]	; 0xffffffb4
   15dc0:	b	15960 <__assert_fail@plt+0x3fc0>
   15dc4:	ldr	r0, [r3]
   15dc8:	mov	r2, r4
   15dcc:	ldr	r1, [fp, #-244]	; 0xffffff0c
   15dd0:	bl	1161c <memcmp@plt>
   15dd4:	cmp	r0, #0
   15dd8:	bne	15ae4 <__assert_fail@plt+0x4144>
   15ddc:	b	15a84 <__assert_fail@plt+0x40e4>
   15de0:	str	r6, [fp, #-72]	; 0xffffffb8
   15de4:	strb	r7, [fp, #-68]	; 0xffffffbc
   15de8:	strb	r6, [fp, #-80]	; 0xffffffb0
   15dec:	mov	r5, #0
   15df0:	b	15a30 <__assert_fail@plt+0x4090>
   15df4:	str	r6, [r7]
   15df8:	b	158e8 <__assert_fail@plt+0x3f48>
   15dfc:	ldr	r3, [fp, #-188]	; 0xffffff44
   15e00:	str	r7, [fp, #-184]	; 0xffffff48
   15e04:	ldrb	r3, [r3]
   15e08:	cmp	r3, #0
   15e0c:	bne	15fa0 <__assert_fail@plt+0x4600>
   15e10:	ldr	r4, [fp, #-176]	; 0xffffff50
   15e14:	cmp	r4, #0
   15e18:	beq	15cd4 <__assert_fail@plt+0x4334>
   15e1c:	b	15c60 <__assert_fail@plt+0x42c0>
   15e20:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15e24:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15e28:	cmp	r3, #0
   15e2c:	bne	15e60 <__assert_fail@plt+0x44c0>
   15e30:	ldrb	r3, [r4]
   15e34:	and	r2, r3, #31
   15e38:	lsr	r3, r3, #5
   15e3c:	ldr	r3, [r9, r3, lsl #2]
   15e40:	lsr	r3, r3, r2
   15e44:	tst	r3, #1
   15e48:	bne	15ee4 <__assert_fail@plt+0x4544>
   15e4c:	sub	r0, fp, #144	; 0x90
   15e50:	bl	11604 <mbsinit@plt>
   15e54:	cmp	r0, #0
   15e58:	beq	15f8c <__assert_fail@plt+0x45ec>
   15e5c:	strb	r6, [fp, #-148]	; 0xffffff6c
   15e60:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   15e64:	mov	r1, r0
   15e68:	mov	r0, r4
   15e6c:	bl	1a378 <__assert_fail@plt+0x89d8>
   15e70:	sub	r3, fp, #144	; 0x90
   15e74:	mov	r1, r4
   15e78:	mov	r2, r0
   15e7c:	sub	r0, fp, #120	; 0x78
   15e80:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   15e84:	cmn	r0, #1
   15e88:	str	r0, [fp, #-128]	; 0xffffff80
   15e8c:	beq	15f44 <__assert_fail@plt+0x45a4>
   15e90:	cmn	r0, #2
   15e94:	beq	15f50 <__assert_fail@plt+0x45b0>
   15e98:	cmp	r0, #0
   15e9c:	beq	15f68 <__assert_fail@plt+0x45c8>
   15ea0:	ldr	r4, [fp, #-120]	; 0xffffff88
   15ea4:	sub	r0, fp, #144	; 0x90
   15ea8:	strb	r6, [fp, #-124]	; 0xffffff84
   15eac:	bl	11604 <mbsinit@plt>
   15eb0:	strb	r6, [fp, #-136]	; 0xffffff78
   15eb4:	cmp	r0, #0
   15eb8:	strbne	r7, [fp, #-148]	; 0xffffff6c
   15ebc:	cmp	r4, #0
   15ec0:	beq	15bb0 <__assert_fail@plt+0x4210>
   15ec4:	b	15d98 <__assert_fail@plt+0x43f8>
   15ec8:	ldr	r5, [fp, #-184]	; 0xffffff48
   15ecc:	sub	r1, fp, #172	; 0xac
   15ed0:	mov	r2, r5
   15ed4:	mov	r0, r6
   15ed8:	bl	115d4 <memcpy@plt>
   15edc:	str	r6, [r6, #-16]
   15ee0:	b	15d10 <__assert_fail@plt+0x4370>
   15ee4:	str	r6, [fp, #-128]	; 0xffffff80
   15ee8:	ldrb	r3, [r4]
   15eec:	strb	r6, [fp, #-124]	; 0xffffff84
   15ef0:	strb	r6, [fp, #-136]	; 0xffffff78
   15ef4:	str	r3, [fp, #-120]	; 0xffffff88
   15ef8:	mov	r4, r3
   15efc:	b	15ebc <__assert_fail@plt+0x451c>
   15f00:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15f04:	str	r6, [fp, #-72]	; 0xffffffb8
   15f08:	ldrb	r3, [r5]
   15f0c:	cmp	r3, #0
   15f10:	bne	15fa0 <__assert_fail@plt+0x4600>
   15f14:	ldr	r4, [fp, #-64]	; 0xffffffc0
   15f18:	cmp	r4, #0
   15f1c:	beq	159e0 <__assert_fail@plt+0x4040>
   15f20:	b	15c60 <__assert_fail@plt+0x42c0>
   15f24:	ldr	r4, [fp, #-72]	; 0xffffffb8
   15f28:	sub	r1, fp, #60	; 0x3c
   15f2c:	mov	r2, r4
   15f30:	sub	r0, fp, #228	; 0xe4
   15f34:	bl	115d4 <memcpy@plt>
   15f38:	sub	r3, fp, #228	; 0xe4
   15f3c:	str	r3, [fp, #-244]	; 0xffffff0c
   15f40:	b	15a48 <__assert_fail@plt+0x40a8>
   15f44:	str	r6, [fp, #-128]	; 0xffffff80
   15f48:	strb	r7, [fp, #-124]	; 0xffffff84
   15f4c:	b	15d98 <__assert_fail@plt+0x43f8>
   15f50:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15f54:	mov	r0, r4
   15f58:	bl	117a8 <strlen@plt>
   15f5c:	strb	r7, [fp, #-124]	; 0xffffff84
   15f60:	str	r0, [fp, #-128]	; 0xffffff80
   15f64:	b	15d9c <__assert_fail@plt+0x43fc>
   15f68:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15f6c:	str	r6, [fp, #-128]	; 0xffffff80
   15f70:	ldrb	r3, [r4]
   15f74:	cmp	r3, #0
   15f78:	bne	15fa0 <__assert_fail@plt+0x4600>
   15f7c:	ldr	r4, [fp, #-120]	; 0xffffff88
   15f80:	cmp	r4, #0
   15f84:	beq	15ea4 <__assert_fail@plt+0x4504>
   15f88:	b	15c60 <__assert_fail@plt+0x42c0>
   15f8c:	ldr	r3, [pc, #36]	; 15fb8 <__assert_fail@plt+0x4618>
   15f90:	mov	r2, #143	; 0x8f
   15f94:	ldr	r1, [pc, #32]	; 15fbc <__assert_fail@plt+0x461c>
   15f98:	ldr	r0, [pc, #36]	; 15fc4 <__assert_fail@plt+0x4624>
   15f9c:	bl	119a0 <__assert_fail@plt>
   15fa0:	ldr	r3, [pc, #16]	; 15fb8 <__assert_fail@plt+0x4618>
   15fa4:	mov	r2, #171	; 0xab
   15fa8:	ldr	r1, [pc, #12]	; 15fbc <__assert_fail@plt+0x461c>
   15fac:	ldr	r0, [pc, #20]	; 15fc8 <__assert_fail@plt+0x4628>
   15fb0:	bl	119a0 <__assert_fail@plt>
   15fb4:	andeq	sp, r2, r8, ror #1
   15fb8:	andeq	ip, r2, r8, asr #17
   15fbc:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   15fc0:	andeq	ip, r2, r8, lsl r9
   15fc4:	andeq	ip, r2, r8, ror #17
   15fc8:	andeq	ip, r2, r0, lsl #18
   15fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fd0:	sub	sp, sp, #396	; 0x18c
   15fd4:	mov	r8, r1
   15fd8:	str	r0, [sp]
   15fdc:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   15fe0:	cmp	r0, #1
   15fe4:	bls	163b0 <__assert_fail@plt+0x4a10>
   15fe8:	ldrb	r2, [r8]
   15fec:	ldr	r9, [pc, #3392]	; 16d34 <__assert_fail@plt+0x5394>
   15ff0:	mov	r1, #0
   15ff4:	and	r0, r2, #31
   15ff8:	lsr	r3, r2, #5
   15ffc:	str	r8, [sp, #128]	; 0x80
   16000:	ldr	r3, [r9, r3, lsl #2]
   16004:	str	r1, [sp, #120]	; 0x78
   16008:	strb	r1, [sp, #112]	; 0x70
   1600c:	lsr	r3, r3, r0
   16010:	ands	r4, r3, #1
   16014:	str	r1, [sp, #116]	; 0x74
   16018:	strb	r1, [sp, #124]	; 0x7c
   1601c:	beq	16314 <__assert_fail@plt+0x4974>
   16020:	mov	r3, #1
   16024:	mov	r4, r2
   16028:	str	r3, [sp, #132]	; 0x84
   1602c:	strb	r3, [sp, #136]	; 0x88
   16030:	cmp	r4, #0
   16034:	mov	r3, #1
   16038:	str	r2, [sp, #140]	; 0x8c
   1603c:	strb	r3, [sp, #124]	; 0x7c
   16040:	beq	163a4 <__assert_fail@plt+0x4a04>
   16044:	mov	r4, r3
   16048:	ldr	r1, [sp, #128]	; 0x80
   1604c:	add	r3, sp, #144	; 0x90
   16050:	cmp	r1, r3
   16054:	mov	r3, #0
   16058:	str	r8, [sp, #184]	; 0xb8
   1605c:	str	r3, [sp, #176]	; 0xb0
   16060:	strb	r3, [sp, #168]	; 0xa8
   16064:	str	r3, [sp, #172]	; 0xac
   16068:	strb	r3, [sp, #180]	; 0xb4
   1606c:	ldrne	r5, [sp, #132]	; 0x84
   16070:	strne	r1, [sp, #32]
   16074:	beq	16cc0 <__assert_fail@plt+0x5320>
   16078:	cmp	r4, #0
   1607c:	str	r5, [sp, #36]	; 0x24
   16080:	strb	r4, [sp, #40]	; 0x28
   16084:	beq	16094 <__assert_fail@plt+0x46f4>
   16088:	ldr	r0, [sp, #140]	; 0x8c
   1608c:	bl	115f8 <towlower@plt>
   16090:	str	r0, [sp, #44]	; 0x2c
   16094:	mov	r3, #0
   16098:	mov	sl, #1
   1609c:	mov	r7, r3
   160a0:	str	r3, [sp, #12]
   160a4:	mov	fp, r3
   160a8:	mov	r5, sl
   160ac:	strb	r3, [sp, #224]	; 0xe0
   160b0:	str	r3, [sp, #228]	; 0xe4
   160b4:	strb	r3, [sp, #236]	; 0xec
   160b8:	str	r3, [sp, #232]	; 0xe8
   160bc:	mov	r6, sl
   160c0:	mov	sl, r3
   160c4:	ldrb	r3, [sp, #224]	; 0xe0
   160c8:	ldr	r1, [sp]
   160cc:	str	r8, [sp, #8]
   160d0:	cmp	r3, #0
   160d4:	mov	r4, r1
   160d8:	str	r1, [sp, #240]	; 0xf0
   160dc:	bne	1629c <__assert_fail@plt+0x48fc>
   160e0:	ldrb	r3, [r4]
   160e4:	and	r2, r3, #31
   160e8:	lsr	r3, r3, #5
   160ec:	ldr	r3, [r9, r3, lsl #2]
   160f0:	lsr	r3, r3, r2
   160f4:	tst	r3, #1
   160f8:	beq	167ac <__assert_fail@plt+0x4e0c>
   160fc:	str	r5, [sp, #244]	; 0xf4
   16100:	ldrb	r4, [r4]
   16104:	strb	r5, [sp, #248]	; 0xf8
   16108:	strb	r5, [sp, #236]	; 0xec
   1610c:	cmp	r4, #0
   16110:	str	r4, [sp, #252]	; 0xfc
   16114:	beq	16308 <__assert_fail@plt+0x4968>
   16118:	cmp	fp, #9
   1611c:	movls	r3, #0
   16120:	andhi	r3, r6, #1
   16124:	cmp	r3, #0
   16128:	str	r3, [sp, #4]
   1612c:	beq	16220 <__assert_fail@plt+0x4880>
   16130:	add	r3, fp, fp, lsl #2
   16134:	cmp	sl, r3
   16138:	bcc	167a4 <__assert_fail@plt+0x4e04>
   1613c:	ldr	r3, [sp, #12]
   16140:	subs	r6, sl, r3
   16144:	beq	16d00 <__assert_fail@plt+0x5360>
   16148:	ldrb	r3, [sp, #180]	; 0xb4
   1614c:	cmp	r3, #0
   16150:	bne	16684 <__assert_fail@plt+0x4ce4>
   16154:	ldr	r4, [sp, #184]	; 0xb8
   16158:	ldrb	r3, [sp, #168]	; 0xa8
   1615c:	cmp	r3, #0
   16160:	bne	16194 <__assert_fail@plt+0x47f4>
   16164:	ldrb	r3, [r4]
   16168:	and	r2, r3, #31
   1616c:	lsr	r3, r3, #5
   16170:	ldr	r3, [r9, r3, lsl #2]
   16174:	lsr	r3, r3, r2
   16178:	tst	r3, #1
   1617c:	bne	16698 <__assert_fail@plt+0x4cf8>
   16180:	add	r0, sp, #172	; 0xac
   16184:	bl	11604 <mbsinit@plt>
   16188:	cmp	r0, #0
   1618c:	beq	16cec <__assert_fail@plt+0x534c>
   16190:	strb	r5, [sp, #168]	; 0xa8
   16194:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16198:	mov	r1, r0
   1619c:	mov	r0, r4
   161a0:	bl	1a378 <__assert_fail@plt+0x89d8>
   161a4:	add	r3, sp, #172	; 0xac
   161a8:	mov	r1, r4
   161ac:	mov	r2, r0
   161b0:	add	r0, sp, #196	; 0xc4
   161b4:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   161b8:	cmn	r0, #1
   161bc:	str	r0, [sp, #188]	; 0xbc
   161c0:	beq	165d8 <__assert_fail@plt+0x4c38>
   161c4:	cmn	r0, #2
   161c8:	beq	166b4 <__assert_fail@plt+0x4d14>
   161cc:	cmp	r0, #0
   161d0:	beq	16780 <__assert_fail@plt+0x4de0>
   161d4:	ldr	r4, [sp, #196]	; 0xc4
   161d8:	add	r0, sp, #172	; 0xac
   161dc:	strb	r5, [sp, #192]	; 0xc0
   161e0:	bl	11604 <mbsinit@plt>
   161e4:	strb	r5, [sp, #180]	; 0xb4
   161e8:	cmp	r0, #0
   161ec:	strbne	r7, [sp, #168]	; 0xa8
   161f0:	cmp	r4, #0
   161f4:	bne	165e0 <__assert_fail@plt+0x4c40>
   161f8:	ldrb	r3, [sp, #180]	; 0xb4
   161fc:	cmp	r3, #0
   16200:	beq	16cdc <__assert_fail@plt+0x533c>
   16204:	add	r2, sp, #336	; 0x150
   16208:	ldr	r1, [sp, #8]
   1620c:	ldr	r0, [sp]
   16210:	bl	15768 <__assert_fail@plt+0x3dc8>
   16214:	subs	r6, r0, #0
   16218:	bne	16ce4 <__assert_fail@plt+0x5344>
   1621c:	str	sl, [sp, #12]
   16220:	ldr	r3, [sp, #240]	; 0xf0
   16224:	add	r2, sp, #256	; 0x100
   16228:	cmp	r3, r2
   1622c:	add	fp, fp, #1
   16230:	ldr	r4, [sp, #244]	; 0xf4
   16234:	add	r8, sl, #1
   16238:	strne	r3, [sp, #72]	; 0x48
   1623c:	beq	16c04 <__assert_fail@plt+0x5264>
   16240:	ldrb	r3, [sp, #248]	; 0xf8
   16244:	str	r4, [sp, #76]	; 0x4c
   16248:	cmp	r3, #0
   1624c:	strb	r3, [sp, #80]	; 0x50
   16250:	beq	166cc <__assert_fail@plt+0x4d2c>
   16254:	ldr	r0, [sp, #252]	; 0xfc
   16258:	bl	115f8 <towlower@plt>
   1625c:	ldrb	r3, [sp, #40]	; 0x28
   16260:	cmp	r3, #0
   16264:	str	r0, [sp, #84]	; 0x54
   16268:	beq	166cc <__assert_fail@plt+0x4d2c>
   1626c:	ldr	r3, [sp, #44]	; 0x2c
   16270:	cmp	r0, r3
   16274:	beq	166f0 <__assert_fail@plt+0x4d50>
   16278:	ldr	r4, [sp, #240]	; 0xf0
   1627c:	ldr	r3, [sp, #244]	; 0xf4
   16280:	strb	r7, [sp, #236]	; 0xec
   16284:	add	r4, r4, r3
   16288:	ldrb	r3, [sp, #224]	; 0xe0
   1628c:	mov	sl, r8
   16290:	str	r4, [sp, #240]	; 0xf0
   16294:	cmp	r3, #0
   16298:	beq	160e0 <__assert_fail@plt+0x4740>
   1629c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   162a0:	mov	r1, r0
   162a4:	mov	r0, r4
   162a8:	bl	1a378 <__assert_fail@plt+0x89d8>
   162ac:	add	r3, sp, #228	; 0xe4
   162b0:	mov	r1, r4
   162b4:	mov	r2, r0
   162b8:	add	r0, sp, #252	; 0xfc
   162bc:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   162c0:	cmn	r0, #1
   162c4:	str	r0, [sp, #244]	; 0xf4
   162c8:	strbeq	r7, [sp, #248]	; 0xf8
   162cc:	streq	r5, [sp, #244]	; 0xf4
   162d0:	beq	167d4 <__assert_fail@plt+0x4e34>
   162d4:	cmn	r0, #2
   162d8:	beq	167c4 <__assert_fail@plt+0x4e24>
   162dc:	cmp	r0, #0
   162e0:	beq	16b48 <__assert_fail@plt+0x51a8>
   162e4:	ldr	r4, [sp, #252]	; 0xfc
   162e8:	add	r0, sp, #228	; 0xe4
   162ec:	strb	r5, [sp, #248]	; 0xf8
   162f0:	bl	11604 <mbsinit@plt>
   162f4:	strb	r5, [sp, #236]	; 0xec
   162f8:	cmp	r0, #0
   162fc:	strbne	r7, [sp, #224]	; 0xe0
   16300:	cmp	r4, #0
   16304:	bne	16118 <__assert_fail@plt+0x4778>
   16308:	mov	r0, #0
   1630c:	add	sp, sp, #396	; 0x18c
   16310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16314:	add	r0, sp, #116	; 0x74
   16318:	bl	11604 <mbsinit@plt>
   1631c:	cmp	r0, #0
   16320:	beq	16cec <__assert_fail@plt+0x534c>
   16324:	mov	r5, #1
   16328:	strb	r5, [sp, #112]	; 0x70
   1632c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16330:	mov	r1, r0
   16334:	mov	r0, r8
   16338:	bl	1a378 <__assert_fail@plt+0x89d8>
   1633c:	add	r3, sp, #116	; 0x74
   16340:	mov	r1, r8
   16344:	mov	r2, r0
   16348:	add	r0, sp, #140	; 0x8c
   1634c:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   16350:	cmn	r0, #1
   16354:	str	r0, [sp, #132]	; 0x84
   16358:	strbeq	r4, [sp, #136]	; 0x88
   1635c:	streq	r5, [sp, #132]	; 0x84
   16360:	beq	16674 <__assert_fail@plt+0x4cd4>
   16364:	cmn	r0, #2
   16368:	beq	16664 <__assert_fail@plt+0x4cc4>
   1636c:	cmp	r0, #0
   16370:	beq	16be0 <__assert_fail@plt+0x5240>
   16374:	ldr	r4, [sp, #140]	; 0x8c
   16378:	mov	r3, #1
   1637c:	add	r0, sp, #116	; 0x74
   16380:	strb	r3, [sp, #136]	; 0x88
   16384:	bl	11604 <mbsinit@plt>
   16388:	cmp	r0, #0
   1638c:	movne	r3, #0
   16390:	strbne	r3, [sp, #112]	; 0x70
   16394:	mov	r3, #1
   16398:	cmp	r4, #0
   1639c:	strb	r3, [sp, #124]	; 0x7c
   163a0:	bne	16044 <__assert_fail@plt+0x46a4>
   163a4:	ldr	r0, [sp]
   163a8:	add	sp, sp, #396	; 0x18c
   163ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163b0:	ldrb	r4, [r8]
   163b4:	cmp	r4, #0
   163b8:	beq	163a4 <__assert_fail@plt+0x4a04>
   163bc:	bl	11778 <__ctype_b_loc@plt>
   163c0:	sxth	r5, r4
   163c4:	lsl	r3, r5, #1
   163c8:	ldr	r6, [r0]
   163cc:	str	r0, [sp, #28]
   163d0:	ldrh	r3, [r6, r3]
   163d4:	tst	r3, #256	; 0x100
   163d8:	streq	r4, [sp, #12]
   163dc:	bne	16650 <__assert_fail@plt+0x4cb0>
   163e0:	ldr	r2, [sp]
   163e4:	ldrb	r3, [r2]
   163e8:	cmp	r3, #0
   163ec:	beq	16308 <__assert_fail@plt+0x4968>
   163f0:	mov	sl, #0
   163f4:	add	r2, r2, #1
   163f8:	mov	r9, sl
   163fc:	str	r2, [sp, #4]
   16400:	mov	r2, #1
   16404:	str	sl, [sp, #20]
   16408:	str	r8, [sp, #16]
   1640c:	str	r2, [sp, #8]
   16410:	sxth	r4, r3
   16414:	ldr	r1, [sp, #4]
   16418:	lsl	r2, r4, #1
   1641c:	add	sl, sl, #1
   16420:	ldrh	r2, [r6, r2]
   16424:	sub	r5, r1, #1
   16428:	add	r7, r9, #1
   1642c:	tst	r2, #256	; 0x100
   16430:	beq	16440 <__assert_fail@plt+0x4aa0>
   16434:	bl	11748 <__ctype_tolower_loc@plt>
   16438:	ldr	r3, [r0]
   1643c:	ldr	r3, [r3, r4, lsl #2]
   16440:	ldr	r2, [sp, #12]
   16444:	cmp	r2, r3
   16448:	beq	16508 <__assert_fail@plt+0x4b68>
   1644c:	ldr	r3, [sp, #4]
   16450:	ldrb	r3, [r3]
   16454:	cmp	r3, #0
   16458:	beq	16308 <__assert_fail@plt+0x4968>
   1645c:	ldr	r4, [sp, #8]
   16460:	cmp	sl, #9
   16464:	movls	r4, #0
   16468:	andhi	r4, r4, #1
   1646c:	cmp	r4, #0
   16470:	beq	164f4 <__assert_fail@plt+0x4b54>
   16474:	add	r3, sl, sl, lsl #2
   16478:	cmp	r3, r7
   1647c:	bhi	165c0 <__assert_fail@plt+0x4c20>
   16480:	ldr	r5, [sp, #16]
   16484:	cmp	r5, #0
   16488:	beq	164bc <__assert_fail@plt+0x4b1c>
   1648c:	ldr	r2, [sp, #20]
   16490:	mov	r0, r5
   16494:	sub	r1, r7, r2
   16498:	bl	11874 <strnlen@plt>
   1649c:	mov	r2, r5
   164a0:	ldrb	r3, [r2, r0]!
   164a4:	cmp	r3, #0
   164a8:	str	r2, [sp, #16]
   164ac:	strne	r4, [sp, #8]
   164b0:	strne	r7, [sp, #20]
   164b4:	bne	164f4 <__assert_fail@plt+0x4b54>
   164b8:	str	r7, [sp, #20]
   164bc:	mov	r0, r8
   164c0:	bl	117a8 <strlen@plt>
   164c4:	add	r3, sp, #336	; 0x150
   164c8:	mov	r1, r8
   164cc:	mov	r2, r0
   164d0:	ldr	r0, [sp, #4]
   164d4:	bl	15500 <__assert_fail@plt+0x3b60>
   164d8:	subs	r3, r0, #0
   164dc:	str	r3, [sp, #8]
   164e0:	bne	16ce4 <__assert_fail@plt+0x5344>
   164e4:	ldr	r3, [sp, #28]
   164e8:	ldr	r6, [r3]
   164ec:	ldr	r3, [sp, #8]
   164f0:	str	r3, [sp, #16]
   164f4:	ldr	r2, [sp, #4]
   164f8:	mov	r9, r7
   164fc:	ldrb	r3, [r2], #1
   16500:	str	r2, [sp, #4]
   16504:	b	16410 <__assert_fail@plt+0x4a70>
   16508:	ldrb	r4, [r8, #1]
   1650c:	cmp	r4, #0
   16510:	beq	16868 <__assert_fail@plt+0x4ec8>
   16514:	ldr	r3, [sp, #4]
   16518:	ldrb	r3, [r3]
   1651c:	cmp	r3, #0
   16520:	beq	16308 <__assert_fail@plt+0x4968>
   16524:	mov	fp, #2
   16528:	str	sl, [sp, #24]
   1652c:	mov	sl, r6
   16530:	mov	r6, fp
   16534:	b	16558 <__assert_fail@plt+0x4bb8>
   16538:	ldrb	r4, [r8, r6]
   1653c:	cmp	r4, #0
   16540:	beq	16868 <__assert_fail@plt+0x4ec8>
   16544:	add	r6, r6, #1
   16548:	add	r3, r5, r6
   1654c:	ldrb	r3, [r3, #-1]
   16550:	cmp	r3, #0
   16554:	beq	16308 <__assert_fail@plt+0x4968>
   16558:	sxth	r7, r3
   1655c:	add	fp, r9, r6
   16560:	lsl	r1, r7, #1
   16564:	ldrh	r1, [sl, r1]
   16568:	tst	r1, #256	; 0x100
   1656c:	moveq	r7, r3
   16570:	beq	16580 <__assert_fail@plt+0x4be0>
   16574:	bl	11748 <__ctype_tolower_loc@plt>
   16578:	ldr	r3, [r0]
   1657c:	ldr	r7, [r3, r7, lsl #2]
   16580:	sxth	r3, r4
   16584:	str	r3, [sp]
   16588:	lsl	r1, r3, #1
   1658c:	ldrh	r1, [sl, r1]
   16590:	tst	r1, #256	; 0x100
   16594:	beq	165a8 <__assert_fail@plt+0x4c08>
   16598:	bl	11748 <__ctype_tolower_loc@plt>
   1659c:	ldr	r3, [sp]
   165a0:	ldr	r1, [r0]
   165a4:	ldr	r4, [r1, r3, lsl #2]
   165a8:	cmp	r7, r4
   165ac:	beq	16538 <__assert_fail@plt+0x4b98>
   165b0:	mov	r6, sl
   165b4:	mov	r7, fp
   165b8:	ldr	sl, [sp, #24]
   165bc:	b	1645c <__assert_fail@plt+0x4abc>
   165c0:	ldr	r2, [sp, #4]
   165c4:	str	r4, [sp, #8]
   165c8:	mov	r9, r7
   165cc:	ldrb	r3, [r2], #1
   165d0:	str	r2, [sp, #4]
   165d4:	b	16410 <__assert_fail@plt+0x4a70>
   165d8:	str	r5, [sp, #188]	; 0xbc
   165dc:	strb	r7, [sp, #192]	; 0xc0
   165e0:	ldr	r4, [sp, #184]	; 0xb8
   165e4:	ldr	r3, [sp, #188]	; 0xbc
   165e8:	subs	r6, r6, #1
   165ec:	add	r4, r4, r3
   165f0:	strb	r7, [sp, #180]	; 0xb4
   165f4:	str	r4, [sp, #184]	; 0xb8
   165f8:	mov	r8, r4
   165fc:	bne	16158 <__assert_fail@plt+0x47b8>
   16600:	ldrb	r3, [sp, #168]	; 0xa8
   16604:	cmp	r3, #0
   16608:	bne	16b80 <__assert_fail@plt+0x51e0>
   1660c:	ldrb	r3, [r8]
   16610:	and	r2, r3, #31
   16614:	lsr	r3, r3, #5
   16618:	ldr	r3, [r9, r3, lsl #2]
   1661c:	lsr	r3, r3, r2
   16620:	tst	r3, #1
   16624:	beq	16b6c <__assert_fail@plt+0x51cc>
   16628:	str	r5, [sp, #188]	; 0xbc
   1662c:	ldrb	r3, [r8]
   16630:	strb	r5, [sp, #192]	; 0xc0
   16634:	strb	r5, [sp, #180]	; 0xb4
   16638:	mov	r4, r3
   1663c:	str	r3, [sp, #196]	; 0xc4
   16640:	cmp	r4, #0
   16644:	beq	16204 <__assert_fail@plt+0x4864>
   16648:	ldr	r6, [sp, #4]
   1664c:	b	1621c <__assert_fail@plt+0x487c>
   16650:	bl	11748 <__ctype_tolower_loc@plt>
   16654:	ldr	r3, [r0]
   16658:	ldrb	r3, [r3, r5, lsl #2]
   1665c:	str	r3, [sp, #12]
   16660:	b	163e0 <__assert_fail@plt+0x4a40>
   16664:	ldr	r0, [sp, #128]	; 0x80
   16668:	bl	117a8 <strlen@plt>
   1666c:	strb	r4, [sp, #136]	; 0x88
   16670:	str	r0, [sp, #132]	; 0x84
   16674:	mov	r3, #1
   16678:	strb	r3, [sp, #124]	; 0x7c
   1667c:	mov	r4, #0
   16680:	b	16048 <__assert_fail@plt+0x46a8>
   16684:	ldrb	r3, [sp, #192]	; 0xc0
   16688:	cmp	r3, #0
   1668c:	ldrne	r4, [sp, #196]	; 0xc4
   16690:	beq	165e0 <__assert_fail@plt+0x4c40>
   16694:	b	161f0 <__assert_fail@plt+0x4850>
   16698:	str	r5, [sp, #188]	; 0xbc
   1669c:	ldrb	r3, [r4]
   166a0:	strb	r5, [sp, #192]	; 0xc0
   166a4:	strb	r5, [sp, #180]	; 0xb4
   166a8:	str	r3, [sp, #196]	; 0xc4
   166ac:	mov	r4, r3
   166b0:	b	161f0 <__assert_fail@plt+0x4850>
   166b4:	ldr	r4, [sp, #184]	; 0xb8
   166b8:	mov	r0, r4
   166bc:	bl	117a8 <strlen@plt>
   166c0:	strb	r7, [sp, #192]	; 0xc0
   166c4:	str	r0, [sp, #188]	; 0xbc
   166c8:	b	165e4 <__assert_fail@plt+0x4c44>
   166cc:	ldr	r3, [sp, #36]	; 0x24
   166d0:	cmp	r3, r4
   166d4:	bne	16278 <__assert_fail@plt+0x48d8>
   166d8:	mov	r2, r4
   166dc:	ldr	r1, [sp, #32]
   166e0:	ldr	r0, [sp, #72]	; 0x48
   166e4:	bl	1161c <memcmp@plt>
   166e8:	cmp	r0, #0
   166ec:	bne	16278 <__assert_fail@plt+0x48d8>
   166f0:	add	lr, sp, #224	; 0xe0
   166f4:	add	ip, sp, #280	; 0x118
   166f8:	ldm	lr!, {r0, r1, r2, r3}
   166fc:	ldr	r8, [sp, #8]
   16700:	stmia	ip!, {r0, r1, r2, r3}
   16704:	ldm	lr!, {r0, r1, r2, r3}
   16708:	str	r8, [sp, #352]	; 0x160
   1670c:	strb	r7, [sp, #292]	; 0x124
   16710:	stmia	ip!, {r0, r1, r2, r3}
   16714:	ldm	lr!, {r0, r1, r2, r3}
   16718:	ldr	r8, [sp, #296]	; 0x128
   1671c:	stmia	ip!, {r0, r1, r2, r3}
   16720:	add	r4, r8, r4
   16724:	ldm	lr, {r0, r1}
   16728:	str	r4, [sp, #296]	; 0x128
   1672c:	stm	ip, {r0, r1}
   16730:	ldr	r8, [sp, #8]
   16734:	strb	r7, [sp, #336]	; 0x150
   16738:	str	r7, [sp, #340]	; 0x154
   1673c:	ldrb	r3, [r8]
   16740:	strb	r7, [sp, #348]	; 0x15c
   16744:	str	r7, [sp, #344]	; 0x158
   16748:	and	r2, r3, #31
   1674c:	lsr	r1, r3, #5
   16750:	ldr	r8, [r9, r1, lsl #2]
   16754:	lsr	r8, r8, r2
   16758:	ands	r8, r8, #1
   1675c:	beq	167dc <__assert_fail@plt+0x4e3c>
   16760:	mov	r4, r3
   16764:	str	r5, [sp, #356]	; 0x164
   16768:	str	r3, [sp, #364]	; 0x16c
   1676c:	strb	r5, [sp, #360]	; 0x168
   16770:	cmp	r4, #0
   16774:	strb	r5, [sp, #348]	; 0x15c
   16778:	bne	16874 <__assert_fail@plt+0x4ed4>
   1677c:	bl	11964 <abort@plt>
   16780:	ldr	r4, [sp, #184]	; 0xb8
   16784:	str	r5, [sp, #188]	; 0xbc
   16788:	ldrb	r3, [r4]
   1678c:	cmp	r3, #0
   16790:	bne	16d20 <__assert_fail@plt+0x5380>
   16794:	ldr	r4, [sp, #196]	; 0xc4
   16798:	cmp	r4, #0
   1679c:	beq	161d8 <__assert_fail@plt+0x4838>
   167a0:	b	16854 <__assert_fail@plt+0x4eb4>
   167a4:	ldr	r6, [sp, #4]
   167a8:	b	16220 <__assert_fail@plt+0x4880>
   167ac:	add	r0, sp, #228	; 0xe4
   167b0:	bl	11604 <mbsinit@plt>
   167b4:	cmp	r0, #0
   167b8:	beq	16cec <__assert_fail@plt+0x534c>
   167bc:	strb	r5, [sp, #224]	; 0xe0
   167c0:	b	1629c <__assert_fail@plt+0x48fc>
   167c4:	ldr	r0, [sp, #240]	; 0xf0
   167c8:	bl	117a8 <strlen@plt>
   167cc:	strb	r7, [sp, #248]	; 0xf8
   167d0:	str	r0, [sp, #244]	; 0xf4
   167d4:	strb	r5, [sp, #236]	; 0xec
   167d8:	b	16118 <__assert_fail@plt+0x4778>
   167dc:	add	r0, sp, #340	; 0x154
   167e0:	bl	11604 <mbsinit@plt>
   167e4:	cmp	r0, #0
   167e8:	beq	16cec <__assert_fail@plt+0x534c>
   167ec:	strb	r5, [sp, #336]	; 0x150
   167f0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   167f4:	ldr	r4, [sp, #8]
   167f8:	mov	r1, r0
   167fc:	mov	r0, r4
   16800:	bl	1a378 <__assert_fail@plt+0x89d8>
   16804:	add	r3, sp, #340	; 0x154
   16808:	mov	r1, r4
   1680c:	mov	r2, r0
   16810:	add	r0, sp, #364	; 0x16c
   16814:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   16818:	cmn	r0, #1
   1681c:	str	r0, [sp, #356]	; 0x164
   16820:	beq	16c5c <__assert_fail@plt+0x52bc>
   16824:	cmn	r0, #2
   16828:	beq	16c6c <__assert_fail@plt+0x52cc>
   1682c:	cmp	r0, #0
   16830:	bne	16c20 <__assert_fail@plt+0x5280>
   16834:	ldr	r4, [sp, #352]	; 0x160
   16838:	str	r5, [sp, #356]	; 0x164
   1683c:	ldrb	r3, [r4]
   16840:	cmp	r3, #0
   16844:	bne	16d20 <__assert_fail@plt+0x5380>
   16848:	ldr	r4, [sp, #364]	; 0x16c
   1684c:	cmp	r4, #0
   16850:	beq	16c24 <__assert_fail@plt+0x5284>
   16854:	ldr	r3, [pc, #1244]	; 16d38 <__assert_fail@plt+0x5398>
   16858:	mov	r2, #172	; 0xac
   1685c:	ldr	r1, [pc, #1240]	; 16d3c <__assert_fail@plt+0x539c>
   16860:	ldr	r0, [pc, #1240]	; 16d40 <__assert_fail@plt+0x53a0>
   16864:	bl	119a0 <__assert_fail@plt>
   16868:	mov	r0, r5
   1686c:	add	sp, sp, #396	; 0x18c
   16870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16874:	ldr	r4, [sp, #352]	; 0x160
   16878:	ldr	r3, [sp, #356]	; 0x164
   1687c:	strb	r7, [sp, #348]	; 0x15c
   16880:	add	r4, r4, r3
   16884:	ldrb	r3, [sp, #336]	; 0x150
   16888:	add	r8, sl, #2
   1688c:	str	r4, [sp, #352]	; 0x160
   16890:	cmp	r3, #0
   16894:	bne	16974 <__assert_fail@plt+0x4fd4>
   16898:	ldrb	r3, [r4]
   1689c:	and	r2, r3, #31
   168a0:	lsr	r3, r3, #5
   168a4:	ldr	r3, [r9, r3, lsl #2]
   168a8:	lsr	r3, r3, r2
   168ac:	tst	r3, #1
   168b0:	beq	16ad0 <__assert_fail@plt+0x5130>
   168b4:	str	r5, [sp, #356]	; 0x164
   168b8:	ldrb	r4, [r4]
   168bc:	strb	r5, [sp, #360]	; 0x168
   168c0:	str	r4, [sp, #364]	; 0x16c
   168c4:	cmp	r4, #0
   168c8:	strb	r5, [sp, #348]	; 0x15c
   168cc:	bne	168f0 <__assert_fail@plt+0x4f50>
   168d0:	ldr	r0, [sp, #240]	; 0xf0
   168d4:	add	sp, sp, #396	; 0x18c
   168d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168dc:	ldr	r0, [sp, #352]	; 0x160
   168e0:	bl	117a8 <strlen@plt>
   168e4:	strb	r7, [sp, #360]	; 0x168
   168e8:	str	r0, [sp, #356]	; 0x164
   168ec:	strb	r5, [sp, #348]	; 0x15c
   168f0:	ldrb	r3, [sp, #292]	; 0x124
   168f4:	cmp	r3, #0
   168f8:	beq	169d8 <__assert_fail@plt+0x5038>
   168fc:	ldrb	r3, [sp, #304]	; 0x130
   16900:	cmp	r3, #0
   16904:	ldrne	r4, [sp, #308]	; 0x134
   16908:	bne	16a80 <__assert_fail@plt+0x50e0>
   1690c:	ldr	r2, [sp, #300]	; 0x12c
   16910:	ldr	r3, [sp, #356]	; 0x164
   16914:	cmp	r2, r3
   16918:	bne	16278 <__assert_fail@plt+0x48d8>
   1691c:	ldr	r1, [sp, #352]	; 0x160
   16920:	ldr	r0, [sp, #296]	; 0x128
   16924:	bl	1161c <memcmp@plt>
   16928:	adds	r0, r0, #0
   1692c:	movne	r0, #1
   16930:	cmp	r0, #0
   16934:	add	r1, r8, #1
   16938:	bne	16278 <__assert_fail@plt+0x48d8>
   1693c:	ldr	r3, [sp, #296]	; 0x128
   16940:	ldr	r2, [sp, #300]	; 0x12c
   16944:	ldr	r4, [sp, #352]	; 0x160
   16948:	add	r3, r3, r2
   1694c:	str	r3, [sp, #296]	; 0x128
   16950:	ldrb	r3, [sp, #336]	; 0x150
   16954:	ldr	r2, [sp, #356]	; 0x164
   16958:	strb	r0, [sp, #292]	; 0x124
   1695c:	add	r4, r4, r2
   16960:	cmp	r3, #0
   16964:	strb	r0, [sp, #348]	; 0x15c
   16968:	mov	r8, r1
   1696c:	str	r4, [sp, #352]	; 0x160
   16970:	beq	16898 <__assert_fail@plt+0x4ef8>
   16974:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16978:	mov	r1, r0
   1697c:	mov	r0, r4
   16980:	bl	1a378 <__assert_fail@plt+0x89d8>
   16984:	add	r3, sp, #340	; 0x154
   16988:	mov	r1, r4
   1698c:	mov	r2, r0
   16990:	add	r0, sp, #364	; 0x16c
   16994:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   16998:	cmn	r0, #1
   1699c:	str	r0, [sp, #356]	; 0x164
   169a0:	strbeq	r7, [sp, #360]	; 0x168
   169a4:	streq	r5, [sp, #356]	; 0x164
   169a8:	beq	168ec <__assert_fail@plt+0x4f4c>
   169ac:	cmn	r0, #2
   169b0:	beq	168dc <__assert_fail@plt+0x4f3c>
   169b4:	cmp	r0, #0
   169b8:	beq	16b00 <__assert_fail@plt+0x5160>
   169bc:	ldr	r4, [sp, #364]	; 0x16c
   169c0:	add	r0, sp, #340	; 0x154
   169c4:	strb	r5, [sp, #360]	; 0x168
   169c8:	bl	11604 <mbsinit@plt>
   169cc:	cmp	r0, #0
   169d0:	strbne	r7, [sp, #336]	; 0x150
   169d4:	b	168c4 <__assert_fail@plt+0x4f24>
   169d8:	ldrb	r3, [sp, #280]	; 0x118
   169dc:	ldr	r4, [sp, #296]	; 0x128
   169e0:	cmp	r3, #0
   169e4:	bne	16a18 <__assert_fail@plt+0x5078>
   169e8:	ldrb	r3, [r4]
   169ec:	and	r2, r3, #31
   169f0:	lsr	r3, r3, #5
   169f4:	ldr	r3, [r9, r3, lsl #2]
   169f8:	lsr	r3, r3, r2
   169fc:	tst	r3, #1
   16a00:	bne	16ab4 <__assert_fail@plt+0x5114>
   16a04:	add	r0, sp, #284	; 0x11c
   16a08:	bl	11604 <mbsinit@plt>
   16a0c:	cmp	r0, #0
   16a10:	beq	16cec <__assert_fail@plt+0x534c>
   16a14:	strb	r5, [sp, #280]	; 0x118
   16a18:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16a1c:	mov	r1, r0
   16a20:	mov	r0, r4
   16a24:	bl	1a378 <__assert_fail@plt+0x89d8>
   16a28:	add	r3, sp, #284	; 0x11c
   16a2c:	mov	r1, r4
   16a30:	mov	r2, r0
   16a34:	add	r0, sp, #308	; 0x134
   16a38:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   16a3c:	cmn	r0, #1
   16a40:	str	r0, [sp, #300]	; 0x12c
   16a44:	strbeq	r7, [sp, #304]	; 0x130
   16a48:	streq	r5, [sp, #300]	; 0x12c
   16a4c:	strbeq	r5, [sp, #292]	; 0x124
   16a50:	beq	1690c <__assert_fail@plt+0x4f6c>
   16a54:	cmn	r0, #2
   16a58:	beq	16ae8 <__assert_fail@plt+0x5148>
   16a5c:	cmp	r0, #0
   16a60:	beq	16b24 <__assert_fail@plt+0x5184>
   16a64:	ldr	r4, [sp, #308]	; 0x134
   16a68:	add	r0, sp, #284	; 0x11c
   16a6c:	strb	r5, [sp, #304]	; 0x130
   16a70:	bl	11604 <mbsinit@plt>
   16a74:	strb	r5, [sp, #292]	; 0x124
   16a78:	cmp	r0, #0
   16a7c:	strbne	r7, [sp, #280]	; 0x118
   16a80:	cmp	r4, #0
   16a84:	beq	16308 <__assert_fail@plt+0x4968>
   16a88:	ldrb	r3, [sp, #360]	; 0x168
   16a8c:	cmp	r3, #0
   16a90:	beq	1690c <__assert_fail@plt+0x4f6c>
   16a94:	mov	r0, r4
   16a98:	bl	115f8 <towlower@plt>
   16a9c:	mov	r4, r0
   16aa0:	ldr	r0, [sp, #364]	; 0x16c
   16aa4:	bl	115f8 <towlower@plt>
   16aa8:	subs	r0, r4, r0
   16aac:	movne	r0, #1
   16ab0:	b	16930 <__assert_fail@plt+0x4f90>
   16ab4:	str	r5, [sp, #300]	; 0x12c
   16ab8:	ldrb	r0, [r4]
   16abc:	strb	r5, [sp, #304]	; 0x130
   16ac0:	strb	r5, [sp, #292]	; 0x124
   16ac4:	str	r0, [sp, #308]	; 0x134
   16ac8:	mov	r4, r0
   16acc:	b	16a80 <__assert_fail@plt+0x50e0>
   16ad0:	add	r0, sp, #340	; 0x154
   16ad4:	bl	11604 <mbsinit@plt>
   16ad8:	cmp	r0, #0
   16adc:	beq	16cec <__assert_fail@plt+0x534c>
   16ae0:	strb	r5, [sp, #336]	; 0x150
   16ae4:	b	16974 <__assert_fail@plt+0x4fd4>
   16ae8:	ldr	r0, [sp, #296]	; 0x128
   16aec:	bl	117a8 <strlen@plt>
   16af0:	strb	r7, [sp, #304]	; 0x130
   16af4:	strb	r5, [sp, #292]	; 0x124
   16af8:	str	r0, [sp, #300]	; 0x12c
   16afc:	b	1690c <__assert_fail@plt+0x4f6c>
   16b00:	ldr	r3, [sp, #352]	; 0x160
   16b04:	str	r5, [sp, #356]	; 0x164
   16b08:	ldrb	r3, [r3]
   16b0c:	cmp	r3, #0
   16b10:	bne	16d20 <__assert_fail@plt+0x5380>
   16b14:	ldr	r4, [sp, #364]	; 0x16c
   16b18:	cmp	r4, #0
   16b1c:	beq	169c0 <__assert_fail@plt+0x5020>
   16b20:	b	16854 <__assert_fail@plt+0x4eb4>
   16b24:	ldr	r3, [sp, #296]	; 0x128
   16b28:	str	r5, [sp, #300]	; 0x12c
   16b2c:	ldrb	r3, [r3]
   16b30:	cmp	r3, #0
   16b34:	bne	16d20 <__assert_fail@plt+0x5380>
   16b38:	ldr	r4, [sp, #308]	; 0x134
   16b3c:	cmp	r4, #0
   16b40:	beq	16a68 <__assert_fail@plt+0x50c8>
   16b44:	b	16854 <__assert_fail@plt+0x4eb4>
   16b48:	ldr	r3, [sp, #240]	; 0xf0
   16b4c:	str	r5, [sp, #244]	; 0xf4
   16b50:	ldrb	r3, [r3]
   16b54:	cmp	r3, #0
   16b58:	bne	16d20 <__assert_fail@plt+0x5380>
   16b5c:	ldr	r4, [sp, #252]	; 0xfc
   16b60:	cmp	r4, #0
   16b64:	beq	162e8 <__assert_fail@plt+0x4948>
   16b68:	b	16854 <__assert_fail@plt+0x4eb4>
   16b6c:	add	r0, sp, #172	; 0xac
   16b70:	bl	11604 <mbsinit@plt>
   16b74:	cmp	r0, #0
   16b78:	beq	16cec <__assert_fail@plt+0x534c>
   16b7c:	strb	r5, [sp, #168]	; 0xa8
   16b80:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16b84:	mov	r1, r0
   16b88:	mov	r0, r8
   16b8c:	bl	1a378 <__assert_fail@plt+0x89d8>
   16b90:	add	r3, sp, #172	; 0xac
   16b94:	mov	r1, r8
   16b98:	mov	r2, r0
   16b9c:	add	r0, sp, #196	; 0xc4
   16ba0:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   16ba4:	cmn	r0, #1
   16ba8:	str	r0, [sp, #188]	; 0xbc
   16bac:	beq	16c84 <__assert_fail@plt+0x52e4>
   16bb0:	cmn	r0, #2
   16bb4:	beq	16c3c <__assert_fail@plt+0x529c>
   16bb8:	cmp	r0, #0
   16bbc:	beq	16c9c <__assert_fail@plt+0x52fc>
   16bc0:	ldr	r4, [sp, #196]	; 0xc4
   16bc4:	add	r0, sp, #172	; 0xac
   16bc8:	strb	r5, [sp, #192]	; 0xc0
   16bcc:	bl	11604 <mbsinit@plt>
   16bd0:	strb	r5, [sp, #180]	; 0xb4
   16bd4:	cmp	r0, #0
   16bd8:	strbne	r7, [sp, #168]	; 0xa8
   16bdc:	b	16640 <__assert_fail@plt+0x4ca0>
   16be0:	ldr	r3, [sp, #128]	; 0x80
   16be4:	str	r5, [sp, #132]	; 0x84
   16be8:	ldrb	r3, [r3]
   16bec:	cmp	r3, #0
   16bf0:	bne	16d20 <__assert_fail@plt+0x5380>
   16bf4:	ldr	r4, [sp, #140]	; 0x8c
   16bf8:	cmp	r4, #0
   16bfc:	beq	16378 <__assert_fail@plt+0x49d8>
   16c00:	b	16854 <__assert_fail@plt+0x4eb4>
   16c04:	add	r3, sp, #88	; 0x58
   16c08:	mov	r2, r4
   16c0c:	mov	r0, r3
   16c10:	add	r1, sp, #256	; 0x100
   16c14:	bl	115d4 <memcpy@plt>
   16c18:	str	r0, [sp, #72]	; 0x48
   16c1c:	b	16240 <__assert_fail@plt+0x48a0>
   16c20:	ldr	r4, [sp, #364]	; 0x16c
   16c24:	add	r0, sp, #340	; 0x154
   16c28:	strb	r5, [sp, #360]	; 0x168
   16c2c:	bl	11604 <mbsinit@plt>
   16c30:	cmp	r0, #0
   16c34:	strbne	r7, [sp, #336]	; 0x150
   16c38:	b	16770 <__assert_fail@plt+0x4dd0>
   16c3c:	ldr	r0, [sp, #184]	; 0xb8
   16c40:	bl	117a8 <strlen@plt>
   16c44:	ldr	r6, [sp, #4]
   16c48:	strb	r7, [sp, #192]	; 0xc0
   16c4c:	strb	r5, [sp, #180]	; 0xb4
   16c50:	str	sl, [sp, #12]
   16c54:	str	r0, [sp, #188]	; 0xbc
   16c58:	b	16220 <__assert_fail@plt+0x4880>
   16c5c:	str	r5, [sp, #356]	; 0x164
   16c60:	strb	r8, [sp, #360]	; 0x168
   16c64:	ldr	r4, [sp, #352]	; 0x160
   16c68:	b	16878 <__assert_fail@plt+0x4ed8>
   16c6c:	ldr	r4, [sp, #352]	; 0x160
   16c70:	mov	r0, r4
   16c74:	bl	117a8 <strlen@plt>
   16c78:	strb	r8, [sp, #360]	; 0x168
   16c7c:	str	r0, [sp, #356]	; 0x164
   16c80:	b	16878 <__assert_fail@plt+0x4ed8>
   16c84:	str	r5, [sp, #188]	; 0xbc
   16c88:	strb	r7, [sp, #192]	; 0xc0
   16c8c:	strb	r5, [sp, #180]	; 0xb4
   16c90:	ldr	r6, [sp, #4]
   16c94:	str	sl, [sp, #12]
   16c98:	b	16220 <__assert_fail@plt+0x4880>
   16c9c:	ldr	r4, [sp, #184]	; 0xb8
   16ca0:	str	r5, [sp, #188]	; 0xbc
   16ca4:	ldrb	r3, [r4]
   16ca8:	cmp	r3, #0
   16cac:	bne	16d20 <__assert_fail@plt+0x5380>
   16cb0:	ldr	r4, [sp, #196]	; 0xc4
   16cb4:	cmp	r4, #0
   16cb8:	beq	16bc4 <__assert_fail@plt+0x5224>
   16cbc:	b	16854 <__assert_fail@plt+0x4eb4>
   16cc0:	ldr	r5, [sp, #132]	; 0x84
   16cc4:	add	r3, sp, #48	; 0x30
   16cc8:	mov	r2, r5
   16ccc:	mov	r0, r3
   16cd0:	bl	115d4 <memcpy@plt>
   16cd4:	str	r0, [sp, #32]
   16cd8:	b	16078 <__assert_fail@plt+0x46d8>
   16cdc:	ldr	r8, [sp, #184]	; 0xb8
   16ce0:	b	16600 <__assert_fail@plt+0x4c60>
   16ce4:	ldr	r0, [sp, #336]	; 0x150
   16ce8:	b	163a8 <__assert_fail@plt+0x4a08>
   16cec:	ldr	r3, [pc, #68]	; 16d38 <__assert_fail@plt+0x5398>
   16cf0:	mov	r2, #143	; 0x8f
   16cf4:	ldr	r1, [pc, #64]	; 16d3c <__assert_fail@plt+0x539c>
   16cf8:	ldr	r0, [pc, #68]	; 16d44 <__assert_fail@plt+0x53a4>
   16cfc:	bl	119a0 <__assert_fail@plt>
   16d00:	ldrb	r6, [sp, #180]	; 0xb4
   16d04:	cmp	r6, #0
   16d08:	beq	16cdc <__assert_fail@plt+0x533c>
   16d0c:	ldrb	r3, [sp, #192]	; 0xc0
   16d10:	cmp	r3, #0
   16d14:	ldrne	r4, [sp, #196]	; 0xc4
   16d18:	beq	1621c <__assert_fail@plt+0x487c>
   16d1c:	b	16640 <__assert_fail@plt+0x4ca0>
   16d20:	ldr	r3, [pc, #16]	; 16d38 <__assert_fail@plt+0x5398>
   16d24:	mov	r2, #171	; 0xab
   16d28:	ldr	r1, [pc, #12]	; 16d3c <__assert_fail@plt+0x539c>
   16d2c:	ldr	r0, [pc, #20]	; 16d48 <__assert_fail@plt+0x53a8>
   16d30:	bl	119a0 <__assert_fail@plt>
   16d34:	andeq	sp, r2, r8, ror #1
   16d38:	andeq	ip, r2, r8, asr #17
   16d3c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   16d40:	andeq	ip, r2, r8, lsl r9
   16d44:	andeq	ip, r2, r8, ror #17
   16d48:	andeq	ip, r2, r0, lsl #18
   16d4c:	push	{r4, r5, r6, r7, r8, r9, lr}
   16d50:	sub	sp, sp, #60	; 0x3c
   16d54:	mov	r9, r0
   16d58:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16d5c:	cmp	r0, #1
   16d60:	bls	16ec8 <__assert_fail@plt+0x5528>
   16d64:	mov	r3, #0
   16d68:	ldr	r8, [pc, #408]	; 16f08 <__assert_fail@plt+0x5568>
   16d6c:	mov	r5, r3
   16d70:	mov	r4, r9
   16d74:	mov	r6, r3
   16d78:	mov	r7, #1
   16d7c:	str	r9, [sp, #16]
   16d80:	strb	r3, [sp]
   16d84:	str	r3, [sp, #4]
   16d88:	strb	r3, [sp, #12]
   16d8c:	str	r3, [sp, #8]
   16d90:	ldrb	r3, [sp]
   16d94:	cmp	r3, #0
   16d98:	bne	16df0 <__assert_fail@plt+0x5450>
   16d9c:	ldrb	r3, [r4]
   16da0:	and	r2, r3, #31
   16da4:	lsr	r3, r3, #5
   16da8:	ldr	r3, [r8, r3, lsl #2]
   16dac:	lsr	r3, r3, r2
   16db0:	tst	r3, #1
   16db4:	beq	16ddc <__assert_fail@plt+0x543c>
   16db8:	str	r7, [sp, #20]
   16dbc:	ldrb	r4, [r4]
   16dc0:	strb	r7, [sp, #24]
   16dc4:	cmp	r4, #0
   16dc8:	str	r4, [sp, #28]
   16dcc:	bne	16e50 <__assert_fail@plt+0x54b0>
   16dd0:	mov	r0, r5
   16dd4:	add	sp, sp, #60	; 0x3c
   16dd8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ddc:	add	r0, sp, #4
   16de0:	bl	11604 <mbsinit@plt>
   16de4:	cmp	r0, #0
   16de8:	beq	16ee0 <__assert_fail@plt+0x5540>
   16dec:	strb	r7, [sp]
   16df0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16df4:	mov	r1, r0
   16df8:	mov	r0, r4
   16dfc:	bl	1a378 <__assert_fail@plt+0x89d8>
   16e00:	add	r3, sp, #4
   16e04:	mov	r1, r4
   16e08:	mov	r2, r0
   16e0c:	add	r0, sp, #28
   16e10:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   16e14:	cmn	r0, #1
   16e18:	str	r0, [sp, #20]
   16e1c:	beq	16e6c <__assert_fail@plt+0x54cc>
   16e20:	cmn	r0, #2
   16e24:	beq	16eb0 <__assert_fail@plt+0x5510>
   16e28:	cmp	r0, #0
   16e2c:	beq	16e7c <__assert_fail@plt+0x54dc>
   16e30:	ldr	r4, [sp, #28]
   16e34:	add	r0, sp, #4
   16e38:	strb	r7, [sp, #24]
   16e3c:	bl	11604 <mbsinit@plt>
   16e40:	cmp	r0, #0
   16e44:	strbne	r6, [sp]
   16e48:	cmp	r4, #0
   16e4c:	beq	16dd0 <__assert_fail@plt+0x5430>
   16e50:	ldr	r4, [sp, #16]
   16e54:	ldr	r3, [sp, #20]
   16e58:	add	r5, r5, #1
   16e5c:	add	r4, r4, r3
   16e60:	strb	r6, [sp, #12]
   16e64:	str	r4, [sp, #16]
   16e68:	b	16d90 <__assert_fail@plt+0x53f0>
   16e6c:	str	r7, [sp, #20]
   16e70:	strb	r6, [sp, #24]
   16e74:	ldr	r4, [sp, #16]
   16e78:	b	16e54 <__assert_fail@plt+0x54b4>
   16e7c:	ldr	r4, [sp, #16]
   16e80:	str	r7, [sp, #20]
   16e84:	ldrb	r3, [r4]
   16e88:	cmp	r3, #0
   16e8c:	bne	16ef4 <__assert_fail@plt+0x5554>
   16e90:	ldr	r4, [sp, #28]
   16e94:	cmp	r4, #0
   16e98:	beq	16e34 <__assert_fail@plt+0x5494>
   16e9c:	ldr	r3, [pc, #104]	; 16f0c <__assert_fail@plt+0x556c>
   16ea0:	mov	r2, #172	; 0xac
   16ea4:	ldr	r1, [pc, #100]	; 16f10 <__assert_fail@plt+0x5570>
   16ea8:	ldr	r0, [pc, #100]	; 16f14 <__assert_fail@plt+0x5574>
   16eac:	bl	119a0 <__assert_fail@plt>
   16eb0:	ldr	r4, [sp, #16]
   16eb4:	mov	r0, r4
   16eb8:	bl	117a8 <strlen@plt>
   16ebc:	strb	r6, [sp, #24]
   16ec0:	str	r0, [sp, #20]
   16ec4:	b	16e54 <__assert_fail@plt+0x54b4>
   16ec8:	mov	r0, r9
   16ecc:	bl	117a8 <strlen@plt>
   16ed0:	mov	r5, r0
   16ed4:	mov	r0, r5
   16ed8:	add	sp, sp, #60	; 0x3c
   16edc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ee0:	ldr	r3, [pc, #36]	; 16f0c <__assert_fail@plt+0x556c>
   16ee4:	mov	r2, #143	; 0x8f
   16ee8:	ldr	r1, [pc, #32]	; 16f10 <__assert_fail@plt+0x5570>
   16eec:	ldr	r0, [pc, #36]	; 16f18 <__assert_fail@plt+0x5578>
   16ef0:	bl	119a0 <__assert_fail@plt>
   16ef4:	ldr	r3, [pc, #16]	; 16f0c <__assert_fail@plt+0x556c>
   16ef8:	mov	r2, #171	; 0xab
   16efc:	ldr	r1, [pc, #12]	; 16f10 <__assert_fail@plt+0x5570>
   16f00:	ldr	r0, [pc, #20]	; 16f1c <__assert_fail@plt+0x557c>
   16f04:	bl	119a0 <__assert_fail@plt>
   16f08:	andeq	sp, r2, r8, ror #1
   16f0c:	andeq	ip, r2, ip, lsr #18
   16f10:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   16f14:	andeq	ip, r2, r8, lsl r9
   16f18:	andeq	ip, r2, r8, ror #17
   16f1c:	andeq	ip, r2, r0, lsl #18
   16f20:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16f24:	mov	r6, r2
   16f28:	lsrs	r2, r6, #30
   16f2c:	movne	ip, #1
   16f30:	moveq	ip, #0
   16f34:	lsls	r2, r6, #2
   16f38:	add	fp, sp, #28
   16f3c:	bmi	16f48 <__assert_fail@plt+0x55a8>
   16f40:	cmp	ip, #0
   16f44:	beq	16f54 <__assert_fail@plt+0x55b4>
   16f48:	mov	r0, #0
   16f4c:	sub	sp, fp, #28
   16f50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16f54:	cmp	r2, #4016	; 0xfb0
   16f58:	mov	r5, r0
   16f5c:	mov	r4, r1
   16f60:	mov	r7, r3
   16f64:	bls	17038 <__assert_fail@plt+0x5698>
   16f68:	mov	r0, r2
   16f6c:	bl	2ab04 <__assert_fail@plt+0x19164>
   16f70:	cmp	r0, #0
   16f74:	beq	16f48 <__assert_fail@plt+0x55a8>
   16f78:	cmp	r6, #2
   16f7c:	mov	r3, #1
   16f80:	str	r3, [r0, #4]
   16f84:	movhi	r8, r4
   16f88:	addhi	r2, r0, #8
   16f8c:	movhi	ip, #0
   16f90:	movhi	r3, #2
   16f94:	bls	16fe0 <__assert_fail@plt+0x5640>
   16f98:	ldrb	r1, [r8, #1]!
   16f9c:	ldrb	lr, [r4, ip]
   16fa0:	cmp	lr, r1
   16fa4:	bne	16fc0 <__assert_fail@plt+0x5620>
   16fa8:	b	17050 <__assert_fail@plt+0x56b0>
   16fac:	ldr	lr, [r0, ip, lsl #2]
   16fb0:	sub	ip, ip, lr
   16fb4:	ldrb	lr, [r4, ip]
   16fb8:	cmp	lr, r1
   16fbc:	beq	17050 <__assert_fail@plt+0x56b0>
   16fc0:	cmp	ip, #0
   16fc4:	bne	16fac <__assert_fail@plt+0x560c>
   16fc8:	mov	ip, #0
   16fcc:	str	r3, [r2]
   16fd0:	add	r3, r3, #1
   16fd4:	cmp	r6, r3
   16fd8:	add	r2, r2, #4
   16fdc:	bne	16f98 <__assert_fail@plt+0x55f8>
   16fe0:	mov	r2, #0
   16fe4:	str	r2, [r7]
   16fe8:	ldrb	r3, [r5]
   16fec:	mov	ip, r5
   16ff0:	cmp	r3, #0
   16ff4:	beq	17028 <__assert_fail@plt+0x5688>
   16ff8:	ldrb	r1, [r4, r2]
   16ffc:	cmp	r1, r3
   17000:	beq	17060 <__assert_fail@plt+0x56c0>
   17004:	cmp	r2, #0
   17008:	addeq	r5, r5, #1
   1700c:	ldrbeq	r3, [ip, #1]
   17010:	ldrne	r1, [r0, r2, lsl #2]
   17014:	addeq	ip, ip, #1
   17018:	addne	r5, r5, r1
   1701c:	subne	r2, r2, r1
   17020:	cmp	r3, #0
   17024:	bne	16ff8 <__assert_fail@plt+0x5658>
   17028:	bl	2ab54 <__assert_fail@plt+0x191b4>
   1702c:	mov	r0, #1
   17030:	sub	sp, fp, #28
   17034:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17038:	add	r3, r2, #29
   1703c:	bic	r3, r3, #7
   17040:	sub	sp, sp, r3
   17044:	add	r0, sp, #15
   17048:	bic	r0, r0, #15
   1704c:	b	16f70 <__assert_fail@plt+0x55d0>
   17050:	add	ip, ip, #1
   17054:	sub	r1, r3, ip
   17058:	str	r1, [r2]
   1705c:	b	16fd0 <__assert_fail@plt+0x5630>
   17060:	add	r2, r2, #1
   17064:	cmp	r6, r2
   17068:	add	r1, ip, #1
   1706c:	ldrbne	r3, [ip, #1]
   17070:	movne	ip, r1
   17074:	bne	16ff0 <__assert_fail@plt+0x5650>
   17078:	str	r5, [r7]
   1707c:	bl	2ab54 <__assert_fail@plt+0x191b4>
   17080:	mov	r0, #1
   17084:	b	17030 <__assert_fail@plt+0x5690>
   17088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1708c:	add	fp, sp, #32
   17090:	sub	sp, sp, #188	; 0xbc
   17094:	str	r0, [fp, #-212]	; 0xffffff2c
   17098:	mov	r0, r1
   1709c:	mov	r4, r1
   170a0:	str	r2, [fp, #-220]	; 0xffffff24
   170a4:	bl	16d4c <__assert_fail@plt+0x53ac>
   170a8:	mov	r3, #44	; 0x2c
   170ac:	str	r0, [fp, #-208]	; 0xffffff30
   170b0:	umull	r0, r1, r0, r3
   170b4:	adds	r2, r1, #0
   170b8:	movne	r2, #1
   170bc:	cmp	r0, #0
   170c0:	blt	170cc <__assert_fail@plt+0x572c>
   170c4:	cmp	r2, #0
   170c8:	beq	170d8 <__assert_fail@plt+0x5738>
   170cc:	mov	r0, #0
   170d0:	sub	sp, fp, #32
   170d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170d8:	ldr	r2, [fp, #-208]	; 0xffffff30
   170dc:	mul	r0, r3, r2
   170e0:	cmp	r0, #4016	; 0xfb0
   170e4:	bls	17340 <__assert_fail@plt+0x59a0>
   170e8:	bl	2ab04 <__assert_fail@plt+0x19164>
   170ec:	str	r0, [fp, #-216]	; 0xffffff28
   170f0:	ldr	r3, [fp, #-216]	; 0xffffff28
   170f4:	cmp	r3, #0
   170f8:	beq	170cc <__assert_fail@plt+0x572c>
   170fc:	ldr	r2, [fp, #-208]	; 0xffffff30
   17100:	add	r6, r3, #16
   17104:	mov	r7, #1
   17108:	add	sl, r2, r2, lsl #2
   1710c:	mov	r8, #0
   17110:	add	sl, r3, sl, lsl #3
   17114:	str	r4, [fp, #-188]	; 0xffffff44
   17118:	str	r8, [fp, #-196]	; 0xffffff3c
   1711c:	strb	r8, [fp, #-204]	; 0xffffff34
   17120:	str	r8, [fp, #-200]	; 0xffffff38
   17124:	strb	r8, [fp, #-192]	; 0xffffff40
   17128:	ldrb	r3, [fp, #-204]	; 0xffffff34
   1712c:	ldr	r4, [fp, #-188]	; 0xffffff44
   17130:	cmp	r3, #0
   17134:	bne	1755c <__assert_fail@plt+0x5bbc>
   17138:	ldrb	r3, [r4]
   1713c:	ldr	r1, [pc, #1840]	; 17874 <__assert_fail@plt+0x5ed4>
   17140:	and	r2, r3, #31
   17144:	lsr	r3, r3, #5
   17148:	ldr	r3, [r1, r3, lsl #2]
   1714c:	lsr	r3, r3, r2
   17150:	tst	r3, #1
   17154:	beq	17548 <__assert_fail@plt+0x5ba8>
   17158:	str	r7, [fp, #-184]	; 0xffffff48
   1715c:	ldrb	r4, [r4]
   17160:	strb	r7, [fp, #-180]	; 0xffffff4c
   17164:	strb	r7, [fp, #-192]	; 0xffffff40
   17168:	cmp	r4, #0
   1716c:	str	r4, [fp, #-176]	; 0xffffff50
   17170:	bne	175c8 <__assert_fail@plt+0x5c28>
   17174:	ldr	r3, [fp, #-208]	; 0xffffff30
   17178:	str	r7, [sl, #4]
   1717c:	cmp	r3, #2
   17180:	bls	17220 <__assert_fail@plt+0x5880>
   17184:	ldr	r9, [fp, #-216]	; 0xffffff28
   17188:	add	r7, sl, #8
   1718c:	mov	r5, r9
   17190:	mov	r6, #2
   17194:	ldrb	r8, [r5, #48]	; 0x30
   17198:	b	171c8 <__assert_fail@plt+0x5828>
   1719c:	ldrb	r2, [r3, #8]
   171a0:	cmp	r2, #0
   171a4:	beq	171d8 <__assert_fail@plt+0x5838>
   171a8:	ldr	r3, [r3, #12]
   171ac:	ldr	r2, [r5, #52]	; 0x34
   171b0:	cmp	r2, r3
   171b4:	beq	171fc <__assert_fail@plt+0x585c>
   171b8:	cmp	r4, #0
   171bc:	beq	176d4 <__assert_fail@plt+0x5d34>
   171c0:	ldr	r3, [sl, r4, lsl #2]
   171c4:	sub	r4, r4, r3
   171c8:	add	r3, r4, r4, lsl #2
   171cc:	cmp	r8, #0
   171d0:	add	r3, r9, r3, lsl #3
   171d4:	bne	1719c <__assert_fail@plt+0x57fc>
   171d8:	ldr	r2, [r5, #44]	; 0x2c
   171dc:	ldr	r1, [r3, #4]
   171e0:	cmp	r2, r1
   171e4:	bne	171b8 <__assert_fail@plt+0x5818>
   171e8:	ldr	r1, [r3]
   171ec:	ldr	r0, [r5, #40]	; 0x28
   171f0:	bl	1161c <memcmp@plt>
   171f4:	cmp	r0, #0
   171f8:	bne	171b8 <__assert_fail@plt+0x5818>
   171fc:	add	r4, r4, #1
   17200:	sub	r2, r6, r4
   17204:	str	r2, [r7]
   17208:	ldr	r3, [fp, #-208]	; 0xffffff30
   1720c:	add	r6, r6, #1
   17210:	cmp	r3, r6
   17214:	add	r5, r5, #40	; 0x28
   17218:	add	r7, r7, #4
   1721c:	bne	17194 <__assert_fail@plt+0x57f4>
   17220:	ldr	r1, [fp, #-212]	; 0xffffff2c
   17224:	mov	r2, #0
   17228:	str	r1, [fp, #-132]	; 0xffffff7c
   1722c:	str	r1, [fp, #-76]	; 0xffffffb4
   17230:	ldr	r1, [fp, #-220]	; 0xffffff24
   17234:	mov	r3, r2
   17238:	cmp	r3, #0
   1723c:	str	sl, [fp, #-212]	; 0xffffff2c
   17240:	str	r2, [r1]
   17244:	strb	r2, [fp, #-148]	; 0xffffff6c
   17248:	str	r2, [fp, #-144]	; 0xffffff70
   1724c:	strb	r2, [fp, #-136]	; 0xffffff78
   17250:	strb	r2, [fp, #-92]	; 0xffffffa4
   17254:	str	r2, [fp, #-88]	; 0xffffffa8
   17258:	strb	r2, [fp, #-80]	; 0xffffffb0
   1725c:	mov	r8, r2
   17260:	mov	r7, r2
   17264:	str	r2, [fp, #-140]	; 0xffffff74
   17268:	str	r2, [fp, #-84]	; 0xffffffac
   1726c:	mov	r6, #1
   17270:	ldr	r9, [pc, #1532]	; 17874 <__assert_fail@plt+0x5ed4>
   17274:	ldr	sl, [fp, #-216]	; 0xffffff28
   17278:	bne	17488 <__assert_fail@plt+0x5ae8>
   1727c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   17280:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   17284:	cmp	r3, #0
   17288:	bne	172bc <__assert_fail@plt+0x591c>
   1728c:	ldrb	r3, [r5]
   17290:	and	r2, r3, #31
   17294:	lsr	r3, r3, #5
   17298:	ldr	r3, [r9, r3, lsl #2]
   1729c:	lsr	r3, r3, r2
   172a0:	tst	r3, #1
   172a4:	bne	1760c <__assert_fail@plt+0x5c6c>
   172a8:	sub	r0, fp, #88	; 0x58
   172ac:	bl	11604 <mbsinit@plt>
   172b0:	cmp	r0, #0
   172b4:	beq	1784c <__assert_fail@plt+0x5eac>
   172b8:	strb	r6, [fp, #-92]	; 0xffffffa4
   172bc:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   172c0:	mov	r1, r0
   172c4:	mov	r0, r5
   172c8:	bl	1a378 <__assert_fail@plt+0x89d8>
   172cc:	sub	r3, fp, #88	; 0x58
   172d0:	mov	r1, r5
   172d4:	mov	r2, r0
   172d8:	sub	r0, fp, #64	; 0x40
   172dc:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   172e0:	cmn	r0, #1
   172e4:	str	r0, [fp, #-72]	; 0xffffffb8
   172e8:	strbeq	r7, [fp, #-68]	; 0xffffffbc
   172ec:	streq	r6, [fp, #-72]	; 0xffffffb8
   172f0:	strbeq	r6, [fp, #-80]	; 0xffffffb0
   172f4:	beq	17370 <__assert_fail@plt+0x59d0>
   172f8:	cmn	r0, #2
   172fc:	beq	1735c <__assert_fail@plt+0x59bc>
   17300:	cmp	r0, #0
   17304:	beq	177e0 <__assert_fail@plt+0x5e40>
   17308:	ldr	r4, [fp, #-64]	; 0xffffffc0
   1730c:	sub	r0, fp, #88	; 0x58
   17310:	strb	r6, [fp, #-68]	; 0xffffffbc
   17314:	bl	11604 <mbsinit@plt>
   17318:	strb	r6, [fp, #-80]	; 0xffffffb0
   1731c:	cmp	r0, #0
   17320:	strbne	r7, [fp, #-92]	; 0xffffffa4
   17324:	cmp	r4, #0
   17328:	bne	174a0 <__assert_fail@plt+0x5b00>
   1732c:	ldr	r0, [fp, #-216]	; 0xffffff28
   17330:	bl	2ab54 <__assert_fail@plt+0x191b4>
   17334:	mov	r0, #1
   17338:	sub	sp, fp, #32
   1733c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17340:	add	r3, r0, #29
   17344:	bic	r3, r3, #7
   17348:	sub	sp, sp, r3
   1734c:	add	r3, sp, #15
   17350:	bic	r3, r3, #15
   17354:	str	r3, [fp, #-216]	; 0xffffff28
   17358:	b	170f0 <__assert_fail@plt+0x5750>
   1735c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17360:	bl	117a8 <strlen@plt>
   17364:	strb	r7, [fp, #-68]	; 0xffffffbc
   17368:	strb	r6, [fp, #-80]	; 0xffffffb0
   1736c:	str	r0, [fp, #-72]	; 0xffffffb8
   17370:	add	r3, r8, r8, lsl #2
   17374:	add	r3, sl, r3, lsl #3
   17378:	ldr	r2, [r3, #4]
   1737c:	ldr	r4, [fp, #-72]	; 0xffffffb8
   17380:	cmp	r2, r4
   17384:	beq	1768c <__assert_fail@plt+0x5cec>
   17388:	cmp	r8, #0
   1738c:	beq	17644 <__assert_fail@plt+0x5ca4>
   17390:	ldr	r3, [fp, #-212]	; 0xffffff2c
   17394:	ldr	r5, [r3, r8, lsl #2]
   17398:	cmp	r5, #0
   1739c:	sub	r8, r8, r5
   173a0:	beq	1747c <__assert_fail@plt+0x5adc>
   173a4:	ldrb	r3, [fp, #-136]	; 0xffffff78
   173a8:	cmp	r3, #0
   173ac:	bne	174cc <__assert_fail@plt+0x5b2c>
   173b0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   173b4:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   173b8:	cmp	r3, #0
   173bc:	bne	173f0 <__assert_fail@plt+0x5a50>
   173c0:	ldrb	r3, [r4]
   173c4:	and	r2, r3, #31
   173c8:	lsr	r3, r3, #5
   173cc:	ldr	r3, [r9, r3, lsl #2]
   173d0:	lsr	r3, r3, r2
   173d4:	tst	r3, #1
   173d8:	bne	174e0 <__assert_fail@plt+0x5b40>
   173dc:	sub	r0, fp, #144	; 0x90
   173e0:	bl	11604 <mbsinit@plt>
   173e4:	cmp	r0, #0
   173e8:	beq	1784c <__assert_fail@plt+0x5eac>
   173ec:	strb	r6, [fp, #-148]	; 0xffffff6c
   173f0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   173f4:	mov	r1, r0
   173f8:	mov	r0, r4
   173fc:	bl	1a378 <__assert_fail@plt+0x89d8>
   17400:	sub	r3, fp, #144	; 0x90
   17404:	mov	r1, r4
   17408:	mov	r2, r0
   1740c:	sub	r0, fp, #120	; 0x78
   17410:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   17414:	cmn	r0, #1
   17418:	str	r0, [fp, #-128]	; 0xffffff80
   1741c:	beq	17458 <__assert_fail@plt+0x5ab8>
   17420:	cmn	r0, #2
   17424:	beq	174fc <__assert_fail@plt+0x5b5c>
   17428:	cmp	r0, #0
   1742c:	beq	17514 <__assert_fail@plt+0x5b74>
   17430:	ldr	r4, [fp, #-120]	; 0xffffff88
   17434:	sub	r0, fp, #144	; 0x90
   17438:	strb	r6, [fp, #-124]	; 0xffffff84
   1743c:	bl	11604 <mbsinit@plt>
   17440:	strb	r6, [fp, #-136]	; 0xffffff78
   17444:	cmp	r0, #0
   17448:	strbne	r7, [fp, #-148]	; 0xffffff6c
   1744c:	cmp	r4, #0
   17450:	bne	17460 <__assert_fail@plt+0x5ac0>
   17454:	bl	11964 <abort@plt>
   17458:	str	r6, [fp, #-128]	; 0xffffff80
   1745c:	strb	r7, [fp, #-124]	; 0xffffff84
   17460:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17464:	ldr	r3, [fp, #-128]	; 0xffffff80
   17468:	subs	r5, r5, #1
   1746c:	add	r4, r4, r3
   17470:	strb	r7, [fp, #-136]	; 0xffffff78
   17474:	str	r4, [fp, #-132]	; 0xffffff7c
   17478:	bne	173b4 <__assert_fail@plt+0x5a14>
   1747c:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   17480:	cmp	r3, #0
   17484:	beq	1727c <__assert_fail@plt+0x58dc>
   17488:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   1748c:	cmp	r3, #0
   17490:	ldrne	r4, [fp, #-64]	; 0xffffffc0
   17494:	beq	17370 <__assert_fail@plt+0x59d0>
   17498:	cmp	r4, #0
   1749c:	beq	1732c <__assert_fail@plt+0x598c>
   174a0:	add	r3, r8, r8, lsl #2
   174a4:	add	r3, sl, r3, lsl #3
   174a8:	ldrb	r2, [r3, #8]
   174ac:	cmp	r2, #0
   174b0:	beq	17378 <__assert_fail@plt+0x59d8>
   174b4:	ldr	r3, [r3, #12]
   174b8:	cmp	r4, r3
   174bc:	bne	17388 <__assert_fail@plt+0x59e8>
   174c0:	ldr	r4, [fp, #-72]	; 0xffffffb8
   174c4:	ldr	r5, [fp, #-76]	; 0xffffffb4
   174c8:	b	176a8 <__assert_fail@plt+0x5d08>
   174cc:	ldrb	r3, [fp, #-124]	; 0xffffff84
   174d0:	cmp	r3, #0
   174d4:	ldrne	r4, [fp, #-120]	; 0xffffff88
   174d8:	beq	17460 <__assert_fail@plt+0x5ac0>
   174dc:	b	1744c <__assert_fail@plt+0x5aac>
   174e0:	str	r6, [fp, #-128]	; 0xffffff80
   174e4:	ldrb	r3, [r4]
   174e8:	strb	r6, [fp, #-124]	; 0xffffff84
   174ec:	strb	r6, [fp, #-136]	; 0xffffff78
   174f0:	str	r3, [fp, #-120]	; 0xffffff88
   174f4:	mov	r4, r3
   174f8:	b	1744c <__assert_fail@plt+0x5aac>
   174fc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17500:	mov	r0, r4
   17504:	bl	117a8 <strlen@plt>
   17508:	strb	r7, [fp, #-124]	; 0xffffff84
   1750c:	str	r0, [fp, #-128]	; 0xffffff80
   17510:	b	17464 <__assert_fail@plt+0x5ac4>
   17514:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17518:	str	r6, [fp, #-128]	; 0xffffff80
   1751c:	ldrb	r3, [r4]
   17520:	cmp	r3, #0
   17524:	bne	17860 <__assert_fail@plt+0x5ec0>
   17528:	ldr	r4, [fp, #-120]	; 0xffffff88
   1752c:	cmp	r4, #0
   17530:	beq	17434 <__assert_fail@plt+0x5a94>
   17534:	ldr	r3, [pc, #828]	; 17878 <__assert_fail@plt+0x5ed8>
   17538:	mov	r2, #172	; 0xac
   1753c:	ldr	r1, [pc, #824]	; 1787c <__assert_fail@plt+0x5edc>
   17540:	ldr	r0, [pc, #824]	; 17880 <__assert_fail@plt+0x5ee0>
   17544:	bl	119a0 <__assert_fail@plt>
   17548:	sub	r0, fp, #200	; 0xc8
   1754c:	bl	11604 <mbsinit@plt>
   17550:	cmp	r0, #0
   17554:	beq	1784c <__assert_fail@plt+0x5eac>
   17558:	strb	r7, [fp, #-204]	; 0xffffff34
   1755c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17560:	mov	r1, r0
   17564:	mov	r0, r4
   17568:	bl	1a378 <__assert_fail@plt+0x89d8>
   1756c:	sub	r3, fp, #200	; 0xc8
   17570:	mov	r1, r4
   17574:	mov	r2, r0
   17578:	sub	r0, fp, #176	; 0xb0
   1757c:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   17580:	cmn	r0, #1
   17584:	str	r0, [fp, #-184]	; 0xffffff48
   17588:	strbeq	r8, [fp, #-180]	; 0xffffff4c
   1758c:	streq	r7, [fp, #-184]	; 0xffffff48
   17590:	beq	17638 <__assert_fail@plt+0x5c98>
   17594:	cmn	r0, #2
   17598:	beq	17628 <__assert_fail@plt+0x5c88>
   1759c:	cmp	r0, #0
   175a0:	beq	176dc <__assert_fail@plt+0x5d3c>
   175a4:	ldr	r4, [fp, #-176]	; 0xffffff50
   175a8:	sub	r0, fp, #200	; 0xc8
   175ac:	strb	r7, [fp, #-180]	; 0xffffff4c
   175b0:	bl	11604 <mbsinit@plt>
   175b4:	strb	r7, [fp, #-192]	; 0xffffff40
   175b8:	cmp	r0, #0
   175bc:	strbne	r8, [fp, #-204]	; 0xffffff34
   175c0:	cmp	r4, #0
   175c4:	beq	17174 <__assert_fail@plt+0x57d4>
   175c8:	mov	r9, r7
   175cc:	ldr	r4, [fp, #-188]	; 0xffffff44
   175d0:	sub	r3, fp, #172	; 0xac
   175d4:	cmp	r4, r3
   175d8:	strne	r4, [r6, #-16]
   175dc:	ldrne	r5, [fp, #-184]	; 0xffffff48
   175e0:	beq	177a8 <__assert_fail@plt+0x5e08>
   175e4:	cmp	r9, #0
   175e8:	add	r4, r4, r5
   175ec:	ldrne	r3, [fp, #-176]	; 0xffffff50
   175f0:	str	r5, [r6, #-12]
   175f4:	strb	r9, [r6, #-8]
   175f8:	strne	r3, [r6, #-4]
   175fc:	str	r4, [fp, #-188]	; 0xffffff44
   17600:	add	r6, r6, #40	; 0x28
   17604:	strb	r8, [fp, #-192]	; 0xffffff40
   17608:	b	17128 <__assert_fail@plt+0x5788>
   1760c:	str	r6, [fp, #-72]	; 0xffffffb8
   17610:	ldrb	r3, [r5]
   17614:	strb	r6, [fp, #-68]	; 0xffffffbc
   17618:	strb	r6, [fp, #-80]	; 0xffffffb0
   1761c:	str	r3, [fp, #-64]	; 0xffffffc0
   17620:	mov	r4, r3
   17624:	b	17324 <__assert_fail@plt+0x5984>
   17628:	ldr	r0, [fp, #-188]	; 0xffffff44
   1762c:	bl	117a8 <strlen@plt>
   17630:	strb	r8, [fp, #-180]	; 0xffffff4c
   17634:	str	r0, [fp, #-184]	; 0xffffff48
   17638:	strb	r7, [fp, #-192]	; 0xffffff40
   1763c:	mov	r9, r8
   17640:	b	175cc <__assert_fail@plt+0x5c2c>
   17644:	ldrb	r3, [fp, #-136]	; 0xffffff78
   17648:	cmp	r3, #0
   1764c:	beq	17700 <__assert_fail@plt+0x5d60>
   17650:	ldrb	r3, [fp, #-124]	; 0xffffff84
   17654:	cmp	r3, #0
   17658:	ldrne	r4, [fp, #-120]	; 0xffffff88
   1765c:	bne	1779c <__assert_fail@plt+0x5dfc>
   17660:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17664:	ldr	r3, [fp, #-128]	; 0xffffff80
   17668:	ldr	r5, [fp, #-76]	; 0xffffffb4
   1766c:	add	r4, r4, r3
   17670:	ldr	r3, [fp, #-72]	; 0xffffffb8
   17674:	strb	r7, [fp, #-136]	; 0xffffff78
   17678:	add	r5, r5, r3
   1767c:	strb	r7, [fp, #-80]	; 0xffffffb0
   17680:	str	r4, [fp, #-132]	; 0xffffff7c
   17684:	str	r5, [fp, #-76]	; 0xffffffb4
   17688:	b	17280 <__assert_fail@plt+0x58e0>
   1768c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   17690:	ldr	r0, [r3]
   17694:	mov	r1, r5
   17698:	mov	r2, r4
   1769c:	bl	1161c <memcmp@plt>
   176a0:	cmp	r0, #0
   176a4:	bne	17388 <__assert_fail@plt+0x59e8>
   176a8:	ldr	r3, [fp, #-208]	; 0xffffff30
   176ac:	add	r8, r8, #1
   176b0:	add	r5, r5, r4
   176b4:	cmp	r3, r8
   176b8:	str	r5, [fp, #-76]	; 0xffffffb4
   176bc:	strb	r7, [fp, #-80]	; 0xffffffb0
   176c0:	bne	17280 <__assert_fail@plt+0x58e0>
   176c4:	ldr	r2, [fp, #-220]	; 0xffffff24
   176c8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   176cc:	str	r3, [r2]
   176d0:	b	1732c <__assert_fail@plt+0x598c>
   176d4:	str	r6, [r7]
   176d8:	b	17208 <__assert_fail@plt+0x5868>
   176dc:	ldr	r3, [fp, #-188]	; 0xffffff44
   176e0:	str	r7, [fp, #-184]	; 0xffffff48
   176e4:	ldrb	r3, [r3]
   176e8:	cmp	r3, #0
   176ec:	bne	17860 <__assert_fail@plt+0x5ec0>
   176f0:	ldr	r4, [fp, #-176]	; 0xffffff50
   176f4:	cmp	r4, #0
   176f8:	beq	175a8 <__assert_fail@plt+0x5c08>
   176fc:	b	17534 <__assert_fail@plt+0x5b94>
   17700:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   17704:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17708:	cmp	r3, #0
   1770c:	bne	17740 <__assert_fail@plt+0x5da0>
   17710:	ldrb	r3, [r4]
   17714:	and	r2, r3, #31
   17718:	lsr	r3, r3, #5
   1771c:	ldr	r3, [r9, r3, lsl #2]
   17720:	lsr	r3, r3, r2
   17724:	tst	r3, #1
   17728:	bne	177c4 <__assert_fail@plt+0x5e24>
   1772c:	sub	r0, fp, #144	; 0x90
   17730:	bl	11604 <mbsinit@plt>
   17734:	cmp	r0, #0
   17738:	beq	1784c <__assert_fail@plt+0x5eac>
   1773c:	strb	r6, [fp, #-148]	; 0xffffff6c
   17740:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17744:	mov	r1, r0
   17748:	mov	r0, r4
   1774c:	bl	1a378 <__assert_fail@plt+0x89d8>
   17750:	sub	r3, fp, #144	; 0x90
   17754:	mov	r1, r4
   17758:	mov	r2, r0
   1775c:	sub	r0, fp, #120	; 0x78
   17760:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   17764:	cmn	r0, #1
   17768:	str	r0, [fp, #-128]	; 0xffffff80
   1776c:	beq	17804 <__assert_fail@plt+0x5e64>
   17770:	cmn	r0, #2
   17774:	beq	17810 <__assert_fail@plt+0x5e70>
   17778:	cmp	r0, #0
   1777c:	beq	17828 <__assert_fail@plt+0x5e88>
   17780:	ldr	r4, [fp, #-120]	; 0xffffff88
   17784:	sub	r0, fp, #144	; 0x90
   17788:	strb	r6, [fp, #-124]	; 0xffffff84
   1778c:	bl	11604 <mbsinit@plt>
   17790:	strb	r6, [fp, #-136]	; 0xffffff78
   17794:	cmp	r0, #0
   17798:	strbne	r7, [fp, #-148]	; 0xffffff6c
   1779c:	cmp	r4, #0
   177a0:	beq	17454 <__assert_fail@plt+0x5ab4>
   177a4:	b	17660 <__assert_fail@plt+0x5cc0>
   177a8:	ldr	r5, [fp, #-184]	; 0xffffff48
   177ac:	sub	r1, fp, #172	; 0xac
   177b0:	mov	r2, r5
   177b4:	mov	r0, r6
   177b8:	bl	115d4 <memcpy@plt>
   177bc:	str	r6, [r6, #-16]
   177c0:	b	175e4 <__assert_fail@plt+0x5c44>
   177c4:	str	r6, [fp, #-128]	; 0xffffff80
   177c8:	ldrb	r3, [r4]
   177cc:	strb	r6, [fp, #-124]	; 0xffffff84
   177d0:	strb	r6, [fp, #-136]	; 0xffffff78
   177d4:	str	r3, [fp, #-120]	; 0xffffff88
   177d8:	mov	r4, r3
   177dc:	b	1779c <__assert_fail@plt+0x5dfc>
   177e0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   177e4:	str	r6, [fp, #-72]	; 0xffffffb8
   177e8:	ldrb	r3, [r5]
   177ec:	cmp	r3, #0
   177f0:	bne	17860 <__assert_fail@plt+0x5ec0>
   177f4:	ldr	r4, [fp, #-64]	; 0xffffffc0
   177f8:	cmp	r4, #0
   177fc:	beq	1730c <__assert_fail@plt+0x596c>
   17800:	b	17534 <__assert_fail@plt+0x5b94>
   17804:	str	r6, [fp, #-128]	; 0xffffff80
   17808:	strb	r7, [fp, #-124]	; 0xffffff84
   1780c:	b	17660 <__assert_fail@plt+0x5cc0>
   17810:	ldr	r4, [fp, #-132]	; 0xffffff7c
   17814:	mov	r0, r4
   17818:	bl	117a8 <strlen@plt>
   1781c:	strb	r7, [fp, #-124]	; 0xffffff84
   17820:	str	r0, [fp, #-128]	; 0xffffff80
   17824:	b	17664 <__assert_fail@plt+0x5cc4>
   17828:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1782c:	str	r6, [fp, #-128]	; 0xffffff80
   17830:	ldrb	r3, [r4]
   17834:	cmp	r3, #0
   17838:	bne	17860 <__assert_fail@plt+0x5ec0>
   1783c:	ldr	r4, [fp, #-120]	; 0xffffff88
   17840:	cmp	r4, #0
   17844:	beq	17784 <__assert_fail@plt+0x5de4>
   17848:	b	17534 <__assert_fail@plt+0x5b94>
   1784c:	ldr	r3, [pc, #36]	; 17878 <__assert_fail@plt+0x5ed8>
   17850:	mov	r2, #143	; 0x8f
   17854:	ldr	r1, [pc, #32]	; 1787c <__assert_fail@plt+0x5edc>
   17858:	ldr	r0, [pc, #36]	; 17884 <__assert_fail@plt+0x5ee4>
   1785c:	bl	119a0 <__assert_fail@plt>
   17860:	ldr	r3, [pc, #16]	; 17878 <__assert_fail@plt+0x5ed8>
   17864:	mov	r2, #171	; 0xab
   17868:	ldr	r1, [pc, #12]	; 1787c <__assert_fail@plt+0x5edc>
   1786c:	ldr	r0, [pc, #20]	; 17888 <__assert_fail@plt+0x5ee8>
   17870:	bl	119a0 <__assert_fail@plt>
   17874:	andeq	sp, r2, r8, ror #1
   17878:	andeq	ip, r2, r0, asr #18
   1787c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   17880:	andeq	ip, r2, r8, lsl r9
   17884:	andeq	ip, r2, r8, ror #17
   17888:	andeq	ip, r2, r0, lsl #18
   1788c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17890:	sub	sp, sp, #300	; 0x12c
   17894:	mov	fp, r1
   17898:	str	r0, [sp, #4]
   1789c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   178a0:	cmp	r0, #1
   178a4:	bls	17a64 <__assert_fail@plt+0x60c4>
   178a8:	ldrb	r2, [fp]
   178ac:	ldr	r9, [pc, #3028]	; 18488 <__assert_fail@plt+0x6ae8>
   178b0:	mov	r1, #0
   178b4:	and	r0, r2, #31
   178b8:	lsr	r3, r2, #5
   178bc:	str	fp, [sp, #32]
   178c0:	ldr	r3, [r9, r3, lsl #2]
   178c4:	str	r1, [sp, #24]
   178c8:	strb	r1, [sp, #16]
   178cc:	lsr	r3, r3, r0
   178d0:	ands	r4, r3, #1
   178d4:	str	r1, [sp, #20]
   178d8:	strb	r1, [sp, #28]
   178dc:	beq	179c8 <__assert_fail@plt+0x6028>
   178e0:	mov	r3, #1
   178e4:	mov	r4, r2
   178e8:	str	r3, [sp, #36]	; 0x24
   178ec:	strb	r3, [sp, #40]	; 0x28
   178f0:	cmp	r4, #0
   178f4:	mov	r3, #1
   178f8:	str	r2, [sp, #44]	; 0x2c
   178fc:	strb	r3, [sp, #28]
   17900:	beq	17a58 <__assert_fail@plt+0x60b8>
   17904:	ldr	r1, [sp, #4]
   17908:	mov	r3, #0
   1790c:	mov	sl, #1
   17910:	str	fp, [sp, #88]	; 0x58
   17914:	str	fp, [sp, #12]
   17918:	mov	r8, r3
   1791c:	mov	r7, r3
   17920:	mov	r5, sl
   17924:	mov	r4, r1
   17928:	mov	fp, r3
   1792c:	str	r1, [sp, #144]	; 0x90
   17930:	strb	r3, [sp, #72]	; 0x48
   17934:	str	r3, [sp, #76]	; 0x4c
   17938:	strb	r3, [sp, #84]	; 0x54
   1793c:	strb	r3, [sp, #128]	; 0x80
   17940:	str	r3, [sp, #132]	; 0x84
   17944:	strb	r3, [sp, #140]	; 0x8c
   17948:	str	r3, [sp, #8]
   1794c:	str	r3, [sp, #80]	; 0x50
   17950:	str	r3, [sp, #136]	; 0x88
   17954:	ldrb	r3, [sp, #128]	; 0x80
   17958:	cmp	r3, #0
   1795c:	bne	17bc0 <__assert_fail@plt+0x6220>
   17960:	ldrb	r3, [r4]
   17964:	and	r2, r3, #31
   17968:	lsr	r3, r3, #5
   1796c:	ldr	r3, [r9, r3, lsl #2]
   17970:	lsr	r3, r3, r2
   17974:	tst	r3, #1
   17978:	beq	17bac <__assert_fail@plt+0x620c>
   1797c:	str	r5, [sp, #148]	; 0x94
   17980:	ldrb	r4, [r4]
   17984:	strb	r5, [sp, #152]	; 0x98
   17988:	str	r4, [sp, #156]	; 0x9c
   1798c:	cmp	r4, #0
   17990:	strb	r5, [sp, #140]	; 0x8c
   17994:	beq	17b94 <__assert_fail@plt+0x61f4>
   17998:	cmp	fp, #9
   1799c:	movls	r2, #0
   179a0:	andhi	r2, sl, #1
   179a4:	cmp	r2, #0
   179a8:	beq	183e0 <__assert_fail@plt+0x6a40>
   179ac:	add	r3, fp, fp, lsl #2
   179b0:	cmp	r8, r3
   179b4:	bcs	17c84 <__assert_fail@plt+0x62e4>
   179b8:	add	r3, r8, #1
   179bc:	mov	sl, r2
   179c0:	ldr	r8, [sp, #8]
   179c4:	b	17da0 <__assert_fail@plt+0x6400>
   179c8:	add	r0, sp, #20
   179cc:	bl	11604 <mbsinit@plt>
   179d0:	cmp	r0, #0
   179d4:	beq	18438 <__assert_fail@plt+0x6a98>
   179d8:	mov	r5, #1
   179dc:	strb	r5, [sp, #16]
   179e0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   179e4:	mov	r1, r0
   179e8:	mov	r0, fp
   179ec:	bl	1a378 <__assert_fail@plt+0x89d8>
   179f0:	add	r3, sp, #20
   179f4:	mov	r1, fp
   179f8:	mov	r2, r0
   179fc:	add	r0, sp, #44	; 0x2c
   17a00:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   17a04:	cmn	r0, #1
   17a08:	str	r0, [sp, #36]	; 0x24
   17a0c:	strbeq	r4, [sp, #40]	; 0x28
   17a10:	streq	r5, [sp, #36]	; 0x24
   17a14:	beq	17e60 <__assert_fail@plt+0x64c0>
   17a18:	cmn	r0, #2
   17a1c:	beq	17e50 <__assert_fail@plt+0x64b0>
   17a20:	cmp	r0, #0
   17a24:	beq	18380 <__assert_fail@plt+0x69e0>
   17a28:	ldr	r4, [sp, #44]	; 0x2c
   17a2c:	mov	r3, #1
   17a30:	add	r0, sp, #20
   17a34:	strb	r3, [sp, #40]	; 0x28
   17a38:	bl	11604 <mbsinit@plt>
   17a3c:	cmp	r0, #0
   17a40:	movne	r3, #0
   17a44:	strbne	r3, [sp, #16]
   17a48:	mov	r3, #1
   17a4c:	cmp	r4, #0
   17a50:	strb	r3, [sp, #28]
   17a54:	bne	17904 <__assert_fail@plt+0x5f64>
   17a58:	ldr	r0, [sp, #4]
   17a5c:	add	sp, sp, #300	; 0x12c
   17a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a64:	ldrb	r7, [fp]
   17a68:	cmp	r7, #0
   17a6c:	beq	17a58 <__assert_fail@plt+0x60b8>
   17a70:	ldr	r2, [sp, #4]
   17a74:	add	r8, fp, #1
   17a78:	ldrb	r3, [r2]
   17a7c:	cmp	r3, #0
   17a80:	beq	17b94 <__assert_fail@plt+0x61f4>
   17a84:	mov	r5, #0
   17a88:	add	r6, r2, #1
   17a8c:	cmp	r7, r3
   17a90:	mov	r4, r5
   17a94:	mov	r9, r5
   17a98:	mov	sl, fp
   17a9c:	mov	lr, #1
   17aa0:	add	r5, r5, #1
   17aa4:	sub	r0, r6, #1
   17aa8:	beq	17b40 <__assert_fail@plt+0x61a0>
   17aac:	ldrb	r3, [r6]
   17ab0:	cmp	r3, #0
   17ab4:	beq	17b94 <__assert_fail@plt+0x61f4>
   17ab8:	add	r4, r4, #1
   17abc:	cmp	r5, #9
   17ac0:	movls	r3, #0
   17ac4:	andhi	r3, lr, #1
   17ac8:	cmp	r3, #0
   17acc:	beq	17b2c <__assert_fail@plt+0x618c>
   17ad0:	add	r2, r5, r5, lsl #2
   17ad4:	cmp	r4, r2
   17ad8:	bcc	17ba0 <__assert_fail@plt+0x6200>
   17adc:	cmp	sl, #0
   17ae0:	str	r3, [sp, #4]
   17ae4:	beq	17b04 <__assert_fail@plt+0x6164>
   17ae8:	mov	r0, sl
   17aec:	sub	r1, r4, r9
   17af0:	bl	11874 <strnlen@plt>
   17af4:	ldrb	r2, [sl, r0]!
   17af8:	cmp	r2, #0
   17afc:	bne	17e34 <__assert_fail@plt+0x6494>
   17b00:	mov	r9, r4
   17b04:	mov	r0, fp
   17b08:	bl	117a8 <strlen@plt>
   17b0c:	add	r3, sp, #240	; 0xf0
   17b10:	mov	r1, fp
   17b14:	mov	r2, r0
   17b18:	mov	r0, r6
   17b1c:	bl	16f20 <__assert_fail@plt+0x5580>
   17b20:	subs	lr, r0, #0
   17b24:	bne	183d8 <__assert_fail@plt+0x6a38>
   17b28:	mov	sl, lr
   17b2c:	ldrb	r3, [r6], #1
   17b30:	cmp	r7, r3
   17b34:	add	r5, r5, #1
   17b38:	sub	r0, r6, #1
   17b3c:	bne	17aac <__assert_fail@plt+0x610c>
   17b40:	ldrb	r3, [fp, #1]
   17b44:	cmp	r3, #0
   17b48:	beq	17a5c <__assert_fail@plt+0x60bc>
   17b4c:	ldrb	r2, [r6]
   17b50:	cmp	r2, #0
   17b54:	beq	17b94 <__assert_fail@plt+0x61f4>
   17b58:	cmp	r2, r3
   17b5c:	add	r4, r4, #2
   17b60:	bne	17abc <__assert_fail@plt+0x611c>
   17b64:	mov	ip, r6
   17b68:	mov	r1, r8
   17b6c:	b	17b7c <__assert_fail@plt+0x61dc>
   17b70:	cmp	r3, r2
   17b74:	add	r4, r4, #1
   17b78:	bne	17abc <__assert_fail@plt+0x611c>
   17b7c:	ldrb	r3, [r1, #1]!
   17b80:	cmp	r3, #0
   17b84:	beq	17a5c <__assert_fail@plt+0x60bc>
   17b88:	ldrb	r2, [ip, #1]!
   17b8c:	cmp	r2, #0
   17b90:	bne	17b70 <__assert_fail@plt+0x61d0>
   17b94:	mov	r0, #0
   17b98:	add	sp, sp, #300	; 0x12c
   17b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ba0:	mov	lr, r3
   17ba4:	ldrb	r3, [r6], #1
   17ba8:	b	17b30 <__assert_fail@plt+0x6190>
   17bac:	add	r0, sp, #132	; 0x84
   17bb0:	bl	11604 <mbsinit@plt>
   17bb4:	cmp	r0, #0
   17bb8:	beq	18438 <__assert_fail@plt+0x6a98>
   17bbc:	strb	r5, [sp, #128]	; 0x80
   17bc0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17bc4:	mov	r1, r0
   17bc8:	mov	r0, r4
   17bcc:	bl	1a378 <__assert_fail@plt+0x89d8>
   17bd0:	add	r3, sp, #132	; 0x84
   17bd4:	mov	r1, r4
   17bd8:	mov	r2, r0
   17bdc:	add	r0, sp, #156	; 0x9c
   17be0:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   17be4:	cmn	r0, #1
   17be8:	str	r0, [sp, #148]	; 0x94
   17bec:	strbeq	r7, [sp, #152]	; 0x98
   17bf0:	streq	r5, [sp, #148]	; 0x94
   17bf4:	beq	17c34 <__assert_fail@plt+0x6294>
   17bf8:	cmn	r0, #2
   17bfc:	beq	17c24 <__assert_fail@plt+0x6284>
   17c00:	cmp	r0, #0
   17c04:	beq	182d4 <__assert_fail@plt+0x6934>
   17c08:	ldr	r4, [sp, #156]	; 0x9c
   17c0c:	add	r0, sp, #132	; 0x84
   17c10:	strb	r5, [sp, #152]	; 0x98
   17c14:	bl	11604 <mbsinit@plt>
   17c18:	cmp	r0, #0
   17c1c:	strbne	r7, [sp, #128]	; 0x80
   17c20:	b	1798c <__assert_fail@plt+0x5fec>
   17c24:	ldr	r0, [sp, #144]	; 0x90
   17c28:	bl	117a8 <strlen@plt>
   17c2c:	strb	r7, [sp, #152]	; 0x98
   17c30:	str	r0, [sp, #148]	; 0x94
   17c34:	cmp	fp, #9
   17c38:	movls	r3, #0
   17c3c:	andhi	r3, sl, #1
   17c40:	cmp	r3, #0
   17c44:	strb	r5, [sp, #140]	; 0x8c
   17c48:	addeq	r8, r8, #1
   17c4c:	bne	17c78 <__assert_fail@plt+0x62d8>
   17c50:	ldr	r6, [sp, #148]	; 0x94
   17c54:	ldr	r3, [sp, #36]	; 0x24
   17c58:	ldr	r4, [sp, #144]	; 0x90
   17c5c:	cmp	r6, r3
   17c60:	beq	17e78 <__assert_fail@plt+0x64d8>
   17c64:	add	r4, r4, r6
   17c68:	str	r4, [sp, #144]	; 0x90
   17c6c:	strb	r7, [sp, #140]	; 0x8c
   17c70:	add	fp, fp, #1
   17c74:	b	17954 <__assert_fail@plt+0x5fb4>
   17c78:	add	r2, fp, fp, lsl #2
   17c7c:	cmp	r8, r2
   17c80:	bcc	18460 <__assert_fail@plt+0x6ac0>
   17c84:	ldr	r3, [sp, #8]
   17c88:	subs	r6, r8, r3
   17c8c:	ldrb	r3, [sp, #84]	; 0x54
   17c90:	beq	1846c <__assert_fail@plt+0x6acc>
   17c94:	cmp	r3, #0
   17c98:	beq	17e48 <__assert_fail@plt+0x64a8>
   17c9c:	ldrb	r3, [sp, #96]	; 0x60
   17ca0:	cmp	r3, #0
   17ca4:	ldrne	r4, [sp, #100]	; 0x64
   17ca8:	bne	17d64 <__assert_fail@plt+0x63c4>
   17cac:	ldr	r4, [sp, #88]	; 0x58
   17cb0:	ldr	r3, [sp, #92]	; 0x5c
   17cb4:	subs	r6, r6, #1
   17cb8:	add	r4, r4, r3
   17cbc:	strb	r7, [sp, #84]	; 0x54
   17cc0:	str	r4, [sp, #88]	; 0x58
   17cc4:	mov	sl, r4
   17cc8:	beq	17fb0 <__assert_fail@plt+0x6610>
   17ccc:	ldrb	r3, [sp, #72]	; 0x48
   17cd0:	cmp	r3, #0
   17cd4:	bne	17d08 <__assert_fail@plt+0x6368>
   17cd8:	ldrb	r3, [r4]
   17cdc:	and	r2, r3, #31
   17ce0:	lsr	r3, r3, #5
   17ce4:	ldr	r3, [r9, r3, lsl #2]
   17ce8:	lsr	r3, r3, r2
   17cec:	tst	r3, #1
   17cf0:	bne	17dd0 <__assert_fail@plt+0x6430>
   17cf4:	add	r0, sp, #76	; 0x4c
   17cf8:	bl	11604 <mbsinit@plt>
   17cfc:	cmp	r0, #0
   17d00:	beq	18438 <__assert_fail@plt+0x6a98>
   17d04:	strb	r5, [sp, #72]	; 0x48
   17d08:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17d0c:	mov	r1, r0
   17d10:	mov	r0, r4
   17d14:	bl	1a378 <__assert_fail@plt+0x89d8>
   17d18:	add	r3, sp, #76	; 0x4c
   17d1c:	mov	r1, r4
   17d20:	mov	r2, r0
   17d24:	add	r0, sp, #100	; 0x64
   17d28:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   17d2c:	cmn	r0, #1
   17d30:	str	r0, [sp, #92]	; 0x5c
   17d34:	beq	17dec <__assert_fail@plt+0x644c>
   17d38:	cmn	r0, #2
   17d3c:	beq	17df8 <__assert_fail@plt+0x6458>
   17d40:	cmp	r0, #0
   17d44:	beq	17e10 <__assert_fail@plt+0x6470>
   17d48:	ldr	r4, [sp, #100]	; 0x64
   17d4c:	add	r0, sp, #76	; 0x4c
   17d50:	strb	r5, [sp, #96]	; 0x60
   17d54:	bl	11604 <mbsinit@plt>
   17d58:	strb	r5, [sp, #84]	; 0x54
   17d5c:	cmp	r0, #0
   17d60:	strbne	r7, [sp, #72]	; 0x48
   17d64:	cmp	r4, #0
   17d68:	bne	17cac <__assert_fail@plt+0x630c>
   17d6c:	ldrb	r3, [sp, #84]	; 0x54
   17d70:	cmp	r3, #0
   17d74:	beq	17fac <__assert_fail@plt+0x660c>
   17d78:	add	r2, sp, #240	; 0xf0
   17d7c:	ldr	r1, [sp, #12]
   17d80:	ldr	r0, [sp, #4]
   17d84:	bl	17088 <__assert_fail@plt+0x56e8>
   17d88:	subs	sl, r0, #0
   17d8c:	bne	183d8 <__assert_fail@plt+0x6a38>
   17d90:	ldrb	r3, [sp, #152]	; 0x98
   17d94:	cmp	r3, #0
   17d98:	add	r3, r8, #1
   17d9c:	beq	17e6c <__assert_fail@plt+0x64cc>
   17da0:	ldrb	r2, [sp, #40]	; 0x28
   17da4:	cmp	r2, #0
   17da8:	beq	17e6c <__assert_fail@plt+0x64cc>
   17dac:	ldr	r1, [sp, #156]	; 0x9c
   17db0:	ldr	r2, [sp, #44]	; 0x2c
   17db4:	str	r8, [sp, #8]
   17db8:	cmp	r1, r2
   17dbc:	beq	18378 <__assert_fail@plt+0x69d8>
   17dc0:	ldr	r4, [sp, #144]	; 0x90
   17dc4:	mov	r8, r3
   17dc8:	ldr	r6, [sp, #148]	; 0x94
   17dcc:	b	17c64 <__assert_fail@plt+0x62c4>
   17dd0:	str	r5, [sp, #92]	; 0x5c
   17dd4:	ldrb	r3, [r4]
   17dd8:	strb	r5, [sp, #96]	; 0x60
   17ddc:	strb	r5, [sp, #84]	; 0x54
   17de0:	str	r3, [sp, #100]	; 0x64
   17de4:	mov	r4, r3
   17de8:	b	17d64 <__assert_fail@plt+0x63c4>
   17dec:	str	r5, [sp, #92]	; 0x5c
   17df0:	strb	r7, [sp, #96]	; 0x60
   17df4:	b	17cac <__assert_fail@plt+0x630c>
   17df8:	ldr	r4, [sp, #88]	; 0x58
   17dfc:	mov	r0, r4
   17e00:	bl	117a8 <strlen@plt>
   17e04:	strb	r7, [sp, #96]	; 0x60
   17e08:	str	r0, [sp, #92]	; 0x5c
   17e0c:	b	17cb0 <__assert_fail@plt+0x6310>
   17e10:	ldr	r4, [sp, #88]	; 0x58
   17e14:	str	r5, [sp, #92]	; 0x5c
   17e18:	ldrb	r3, [r4]
   17e1c:	cmp	r3, #0
   17e20:	bne	1844c <__assert_fail@plt+0x6aac>
   17e24:	ldr	r4, [sp, #100]	; 0x64
   17e28:	cmp	r4, #0
   17e2c:	beq	17d4c <__assert_fail@plt+0x63ac>
   17e30:	b	17f98 <__assert_fail@plt+0x65f8>
   17e34:	ldr	r3, [sp, #4]
   17e38:	mov	r9, r4
   17e3c:	mov	lr, r3
   17e40:	ldrb	r3, [r6], #1
   17e44:	b	17b30 <__assert_fail@plt+0x6190>
   17e48:	ldr	r4, [sp, #88]	; 0x58
   17e4c:	b	17ccc <__assert_fail@plt+0x632c>
   17e50:	ldr	r0, [sp, #32]
   17e54:	bl	117a8 <strlen@plt>
   17e58:	strb	r4, [sp, #40]	; 0x28
   17e5c:	str	r0, [sp, #36]	; 0x24
   17e60:	mov	r3, #1
   17e64:	strb	r3, [sp, #28]
   17e68:	b	17904 <__assert_fail@plt+0x5f64>
   17e6c:	str	r8, [sp, #8]
   17e70:	mov	r8, r3
   17e74:	b	17c50 <__assert_fail@plt+0x62b0>
   17e78:	mov	r2, r6
   17e7c:	mov	r0, r4
   17e80:	ldr	r1, [sp, #32]
   17e84:	bl	1161c <memcmp@plt>
   17e88:	cmp	r0, #0
   17e8c:	bne	17c64 <__assert_fail@plt+0x62c4>
   17e90:	add	lr, sp, #128	; 0x80
   17e94:	add	ip, sp, #184	; 0xb8
   17e98:	ldm	lr!, {r0, r1, r2, r3}
   17e9c:	stmia	ip!, {r0, r1, r2, r3}
   17ea0:	ldm	lr!, {r0, r1, r2, r3}
   17ea4:	strb	r7, [sp, #196]	; 0xc4
   17ea8:	stmia	ip!, {r0, r1, r2, r3}
   17eac:	ldm	lr!, {r0, r1, r2, r3}
   17eb0:	ldr	r4, [sp, #200]	; 0xc8
   17eb4:	stmia	ip!, {r0, r1, r2, r3}
   17eb8:	ldm	lr, {r0, r1}
   17ebc:	ldr	r3, [sp, #204]	; 0xcc
   17ec0:	add	r4, r4, r3
   17ec4:	stm	ip, {r0, r1}
   17ec8:	str	r4, [sp, #200]	; 0xc8
   17ecc:	ldr	r3, [sp, #12]
   17ed0:	strb	r7, [sp, #240]	; 0xf0
   17ed4:	str	r3, [sp, #256]	; 0x100
   17ed8:	ldrb	r3, [r3]
   17edc:	str	r7, [sp, #244]	; 0xf4
   17ee0:	str	r7, [sp, #248]	; 0xf8
   17ee4:	and	r2, r3, #31
   17ee8:	lsr	r1, r3, #5
   17eec:	strb	r7, [sp, #252]	; 0xfc
   17ef0:	ldr	r6, [r9, r1, lsl #2]
   17ef4:	lsr	r6, r6, r2
   17ef8:	ands	r6, r6, #1
   17efc:	beq	17f20 <__assert_fail@plt+0x6580>
   17f00:	mov	r4, r3
   17f04:	str	r5, [sp, #260]	; 0x104
   17f08:	str	r3, [sp, #268]	; 0x10c
   17f0c:	strb	r5, [sp, #264]	; 0x108
   17f10:	cmp	r4, #0
   17f14:	strb	r5, [sp, #252]	; 0xfc
   17f18:	bne	18004 <__assert_fail@plt+0x6664>
   17f1c:	bl	11964 <abort@plt>
   17f20:	add	r0, sp, #244	; 0xf4
   17f24:	bl	11604 <mbsinit@plt>
   17f28:	cmp	r0, #0
   17f2c:	beq	18438 <__assert_fail@plt+0x6a98>
   17f30:	strb	r5, [sp, #240]	; 0xf0
   17f34:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17f38:	ldr	r4, [sp, #12]
   17f3c:	mov	r1, r0
   17f40:	mov	r0, r4
   17f44:	bl	1a378 <__assert_fail@plt+0x89d8>
   17f48:	add	r3, sp, #244	; 0xf4
   17f4c:	mov	r1, r4
   17f50:	mov	r2, r0
   17f54:	add	r0, sp, #268	; 0x10c
   17f58:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   17f5c:	cmn	r0, #1
   17f60:	str	r0, [sp, #260]	; 0x104
   17f64:	beq	183ec <__assert_fail@plt+0x6a4c>
   17f68:	cmn	r0, #2
   17f6c:	beq	183fc <__assert_fail@plt+0x6a5c>
   17f70:	cmp	r0, #0
   17f74:	bne	183a4 <__assert_fail@plt+0x6a04>
   17f78:	ldr	r4, [sp, #256]	; 0x100
   17f7c:	str	r5, [sp, #260]	; 0x104
   17f80:	ldrb	r3, [r4]
   17f84:	cmp	r3, #0
   17f88:	bne	1844c <__assert_fail@plt+0x6aac>
   17f8c:	ldr	r4, [sp, #268]	; 0x10c
   17f90:	cmp	r4, #0
   17f94:	beq	183a8 <__assert_fail@plt+0x6a08>
   17f98:	ldr	r3, [pc, #1260]	; 1848c <__assert_fail@plt+0x6aec>
   17f9c:	mov	r2, #172	; 0xac
   17fa0:	ldr	r1, [pc, #1256]	; 18490 <__assert_fail@plt+0x6af0>
   17fa4:	ldr	r0, [pc, #1256]	; 18494 <__assert_fail@plt+0x6af4>
   17fa8:	bl	119a0 <__assert_fail@plt>
   17fac:	ldr	sl, [sp, #88]	; 0x58
   17fb0:	ldrb	r3, [sp, #72]	; 0x48
   17fb4:	cmp	r3, #0
   17fb8:	bne	1830c <__assert_fail@plt+0x696c>
   17fbc:	ldrb	r3, [sl]
   17fc0:	and	r2, r3, #31
   17fc4:	lsr	r3, r3, #5
   17fc8:	ldr	r3, [r9, r3, lsl #2]
   17fcc:	lsr	r3, r3, r2
   17fd0:	tst	r3, #1
   17fd4:	beq	182f8 <__assert_fail@plt+0x6958>
   17fd8:	str	r5, [sp, #92]	; 0x5c
   17fdc:	ldrb	r3, [sl]
   17fe0:	strb	r5, [sp, #96]	; 0x60
   17fe4:	strb	r5, [sp, #84]	; 0x54
   17fe8:	mov	r4, r3
   17fec:	str	r3, [sp, #100]	; 0x64
   17ff0:	cmp	r4, #0
   17ff4:	beq	17d78 <__assert_fail@plt+0x63d8>
   17ff8:	ldrb	r3, [sp, #152]	; 0x98
   17ffc:	mov	sl, r5
   18000:	b	17d94 <__assert_fail@plt+0x63f4>
   18004:	ldr	r4, [sp, #256]	; 0x100
   18008:	ldr	r3, [sp, #260]	; 0x104
   1800c:	strb	r7, [sp, #252]	; 0xfc
   18010:	add	r4, r4, r3
   18014:	ldrb	r3, [sp, #240]	; 0xf0
   18018:	add	r8, r8, #1
   1801c:	str	r4, [sp, #256]	; 0x100
   18020:	cmp	r3, #0
   18024:	bne	181c4 <__assert_fail@plt+0x6824>
   18028:	ldrb	r3, [r4]
   1802c:	and	r2, r3, #31
   18030:	lsr	r3, r3, #5
   18034:	ldr	r3, [r9, r3, lsl #2]
   18038:	lsr	r3, r3, r2
   1803c:	tst	r3, #1
   18040:	beq	1825c <__assert_fail@plt+0x68bc>
   18044:	str	r5, [sp, #260]	; 0x104
   18048:	ldrb	r4, [r4]
   1804c:	strb	r5, [sp, #264]	; 0x108
   18050:	str	r4, [sp, #268]	; 0x10c
   18054:	cmp	r4, #0
   18058:	strb	r5, [sp, #252]	; 0xfc
   1805c:	bne	18080 <__assert_fail@plt+0x66e0>
   18060:	ldr	r0, [sp, #144]	; 0x90
   18064:	add	sp, sp, #300	; 0x12c
   18068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1806c:	ldr	r0, [sp, #256]	; 0x100
   18070:	bl	117a8 <strlen@plt>
   18074:	strb	r7, [sp, #264]	; 0x108
   18078:	str	r0, [sp, #260]	; 0x104
   1807c:	strb	r5, [sp, #252]	; 0xfc
   18080:	ldrb	r3, [sp, #196]	; 0xc4
   18084:	cmp	r3, #0
   18088:	beq	180b8 <__assert_fail@plt+0x6718>
   1808c:	ldrb	r3, [sp, #208]	; 0xd0
   18090:	cmp	r3, #0
   18094:	ldrne	r4, [sp, #212]	; 0xd4
   18098:	bne	18160 <__assert_fail@plt+0x67c0>
   1809c:	ldr	r2, [sp, #204]	; 0xcc
   180a0:	ldr	r3, [sp, #260]	; 0x104
   180a4:	cmp	r2, r3
   180a8:	beq	18244 <__assert_fail@plt+0x68a4>
   180ac:	ldr	r4, [sp, #144]	; 0x90
   180b0:	ldr	r6, [sp, #148]	; 0x94
   180b4:	b	17c64 <__assert_fail@plt+0x62c4>
   180b8:	ldrb	r3, [sp, #184]	; 0xb8
   180bc:	ldr	r4, [sp, #200]	; 0xc8
   180c0:	cmp	r3, #0
   180c4:	bne	180f8 <__assert_fail@plt+0x6758>
   180c8:	ldrb	r3, [r4]
   180cc:	and	r2, r3, #31
   180d0:	lsr	r3, r3, #5
   180d4:	ldr	r3, [r9, r3, lsl #2]
   180d8:	lsr	r3, r3, r2
   180dc:	tst	r3, #1
   180e0:	bne	18228 <__assert_fail@plt+0x6888>
   180e4:	add	r0, sp, #188	; 0xbc
   180e8:	bl	11604 <mbsinit@plt>
   180ec:	cmp	r0, #0
   180f0:	beq	18438 <__assert_fail@plt+0x6a98>
   180f4:	strb	r5, [sp, #184]	; 0xb8
   180f8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   180fc:	mov	r1, r0
   18100:	mov	r0, r4
   18104:	bl	1a378 <__assert_fail@plt+0x89d8>
   18108:	add	r3, sp, #188	; 0xbc
   1810c:	mov	r1, r4
   18110:	mov	r2, r0
   18114:	add	r0, sp, #212	; 0xd4
   18118:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   1811c:	cmn	r0, #1
   18120:	str	r0, [sp, #204]	; 0xcc
   18124:	strbeq	r7, [sp, #208]	; 0xd0
   18128:	streq	r5, [sp, #204]	; 0xcc
   1812c:	strbeq	r5, [sp, #196]	; 0xc4
   18130:	beq	1809c <__assert_fail@plt+0x66fc>
   18134:	cmn	r0, #2
   18138:	beq	18274 <__assert_fail@plt+0x68d4>
   1813c:	cmp	r0, #0
   18140:	beq	182b0 <__assert_fail@plt+0x6910>
   18144:	ldr	r4, [sp, #212]	; 0xd4
   18148:	add	r0, sp, #188	; 0xbc
   1814c:	strb	r5, [sp, #208]	; 0xd0
   18150:	bl	11604 <mbsinit@plt>
   18154:	strb	r5, [sp, #196]	; 0xc4
   18158:	cmp	r0, #0
   1815c:	strbne	r7, [sp, #184]	; 0xb8
   18160:	cmp	r4, #0
   18164:	beq	17b94 <__assert_fail@plt+0x61f4>
   18168:	ldrb	r3, [sp, #264]	; 0x108
   1816c:	cmp	r3, #0
   18170:	beq	1809c <__assert_fail@plt+0x66fc>
   18174:	ldr	r0, [sp, #268]	; 0x10c
   18178:	subs	r0, r0, r4
   1817c:	movne	r0, #1
   18180:	cmp	r0, #0
   18184:	add	r1, r8, #1
   18188:	bne	180ac <__assert_fail@plt+0x670c>
   1818c:	ldr	r3, [sp, #200]	; 0xc8
   18190:	ldr	r2, [sp, #204]	; 0xcc
   18194:	ldr	r4, [sp, #256]	; 0x100
   18198:	add	r3, r3, r2
   1819c:	str	r3, [sp, #200]	; 0xc8
   181a0:	ldrb	r3, [sp, #240]	; 0xf0
   181a4:	ldr	r2, [sp, #260]	; 0x104
   181a8:	strb	r0, [sp, #196]	; 0xc4
   181ac:	add	r4, r4, r2
   181b0:	cmp	r3, #0
   181b4:	strb	r0, [sp, #252]	; 0xfc
   181b8:	mov	r8, r1
   181bc:	str	r4, [sp, #256]	; 0x100
   181c0:	beq	18028 <__assert_fail@plt+0x6688>
   181c4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   181c8:	mov	r1, r0
   181cc:	mov	r0, r4
   181d0:	bl	1a378 <__assert_fail@plt+0x89d8>
   181d4:	add	r3, sp, #244	; 0xf4
   181d8:	mov	r1, r4
   181dc:	mov	r2, r0
   181e0:	add	r0, sp, #268	; 0x10c
   181e4:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   181e8:	cmn	r0, #1
   181ec:	str	r0, [sp, #260]	; 0x104
   181f0:	strbeq	r7, [sp, #264]	; 0x108
   181f4:	streq	r5, [sp, #260]	; 0x104
   181f8:	beq	1807c <__assert_fail@plt+0x66dc>
   181fc:	cmn	r0, #2
   18200:	beq	1806c <__assert_fail@plt+0x66cc>
   18204:	cmp	r0, #0
   18208:	beq	1828c <__assert_fail@plt+0x68ec>
   1820c:	ldr	r4, [sp, #268]	; 0x10c
   18210:	add	r0, sp, #244	; 0xf4
   18214:	strb	r5, [sp, #264]	; 0x108
   18218:	bl	11604 <mbsinit@plt>
   1821c:	cmp	r0, #0
   18220:	strbne	r7, [sp, #240]	; 0xf0
   18224:	b	18054 <__assert_fail@plt+0x66b4>
   18228:	str	r5, [sp, #204]	; 0xcc
   1822c:	ldrb	r0, [r4]
   18230:	strb	r5, [sp, #208]	; 0xd0
   18234:	strb	r5, [sp, #196]	; 0xc4
   18238:	str	r0, [sp, #212]	; 0xd4
   1823c:	mov	r4, r0
   18240:	b	18160 <__assert_fail@plt+0x67c0>
   18244:	ldr	r1, [sp, #256]	; 0x100
   18248:	ldr	r0, [sp, #200]	; 0xc8
   1824c:	bl	1161c <memcmp@plt>
   18250:	adds	r0, r0, #0
   18254:	movne	r0, #1
   18258:	b	18180 <__assert_fail@plt+0x67e0>
   1825c:	add	r0, sp, #244	; 0xf4
   18260:	bl	11604 <mbsinit@plt>
   18264:	cmp	r0, #0
   18268:	beq	18438 <__assert_fail@plt+0x6a98>
   1826c:	strb	r5, [sp, #240]	; 0xf0
   18270:	b	181c4 <__assert_fail@plt+0x6824>
   18274:	ldr	r0, [sp, #200]	; 0xc8
   18278:	bl	117a8 <strlen@plt>
   1827c:	strb	r7, [sp, #208]	; 0xd0
   18280:	strb	r5, [sp, #196]	; 0xc4
   18284:	str	r0, [sp, #204]	; 0xcc
   18288:	b	1809c <__assert_fail@plt+0x66fc>
   1828c:	ldr	r3, [sp, #256]	; 0x100
   18290:	str	r5, [sp, #260]	; 0x104
   18294:	ldrb	r3, [r3]
   18298:	cmp	r3, #0
   1829c:	bne	1844c <__assert_fail@plt+0x6aac>
   182a0:	ldr	r4, [sp, #268]	; 0x10c
   182a4:	cmp	r4, #0
   182a8:	beq	18210 <__assert_fail@plt+0x6870>
   182ac:	b	17f98 <__assert_fail@plt+0x65f8>
   182b0:	ldr	r3, [sp, #200]	; 0xc8
   182b4:	str	r5, [sp, #204]	; 0xcc
   182b8:	ldrb	r3, [r3]
   182bc:	cmp	r3, #0
   182c0:	bne	1844c <__assert_fail@plt+0x6aac>
   182c4:	ldr	r4, [sp, #212]	; 0xd4
   182c8:	cmp	r4, #0
   182cc:	beq	18148 <__assert_fail@plt+0x67a8>
   182d0:	b	17f98 <__assert_fail@plt+0x65f8>
   182d4:	ldr	r4, [sp, #144]	; 0x90
   182d8:	str	r5, [sp, #148]	; 0x94
   182dc:	ldrb	r3, [r4]
   182e0:	cmp	r3, #0
   182e4:	bne	1844c <__assert_fail@plt+0x6aac>
   182e8:	ldr	r4, [sp, #156]	; 0x9c
   182ec:	cmp	r4, #0
   182f0:	beq	17c0c <__assert_fail@plt+0x626c>
   182f4:	b	17f98 <__assert_fail@plt+0x65f8>
   182f8:	add	r0, sp, #76	; 0x4c
   182fc:	bl	11604 <mbsinit@plt>
   18300:	cmp	r0, #0
   18304:	beq	18438 <__assert_fail@plt+0x6a98>
   18308:	strb	r5, [sp, #72]	; 0x48
   1830c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18310:	mov	r1, r0
   18314:	mov	r0, sl
   18318:	bl	1a378 <__assert_fail@plt+0x89d8>
   1831c:	add	r3, sp, #76	; 0x4c
   18320:	mov	r1, sl
   18324:	mov	r2, r0
   18328:	add	r0, sp, #100	; 0x64
   1832c:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   18330:	cmn	r0, #1
   18334:	str	r0, [sp, #92]	; 0x5c
   18338:	strbeq	r7, [sp, #96]	; 0x60
   1833c:	streq	r5, [sp, #92]	; 0x5c
   18340:	strbeq	r5, [sp, #84]	; 0x54
   18344:	beq	17ff8 <__assert_fail@plt+0x6658>
   18348:	cmn	r0, #2
   1834c:	beq	183c0 <__assert_fail@plt+0x6a20>
   18350:	cmp	r0, #0
   18354:	beq	18414 <__assert_fail@plt+0x6a74>
   18358:	ldr	r4, [sp, #100]	; 0x64
   1835c:	add	r0, sp, #76	; 0x4c
   18360:	strb	r5, [sp, #96]	; 0x60
   18364:	bl	11604 <mbsinit@plt>
   18368:	strb	r5, [sp, #84]	; 0x54
   1836c:	cmp	r0, #0
   18370:	strbne	r7, [sp, #72]	; 0x48
   18374:	b	17ff0 <__assert_fail@plt+0x6650>
   18378:	mov	r8, r3
   1837c:	b	17e90 <__assert_fail@plt+0x64f0>
   18380:	ldr	r3, [sp, #32]
   18384:	str	r5, [sp, #36]	; 0x24
   18388:	ldrb	r3, [r3]
   1838c:	cmp	r3, #0
   18390:	bne	1844c <__assert_fail@plt+0x6aac>
   18394:	ldr	r4, [sp, #44]	; 0x2c
   18398:	cmp	r4, #0
   1839c:	beq	17a2c <__assert_fail@plt+0x608c>
   183a0:	b	17f98 <__assert_fail@plt+0x65f8>
   183a4:	ldr	r4, [sp, #268]	; 0x10c
   183a8:	add	r0, sp, #244	; 0xf4
   183ac:	strb	r5, [sp, #264]	; 0x108
   183b0:	bl	11604 <mbsinit@plt>
   183b4:	cmp	r0, #0
   183b8:	strbne	r7, [sp, #240]	; 0xf0
   183bc:	b	17f10 <__assert_fail@plt+0x6570>
   183c0:	ldr	r0, [sp, #88]	; 0x58
   183c4:	bl	117a8 <strlen@plt>
   183c8:	strb	r7, [sp, #96]	; 0x60
   183cc:	strb	r5, [sp, #84]	; 0x54
   183d0:	str	r0, [sp, #92]	; 0x5c
   183d4:	b	17ff8 <__assert_fail@plt+0x6658>
   183d8:	ldr	r0, [sp, #240]	; 0xf0
   183dc:	b	17a5c <__assert_fail@plt+0x60bc>
   183e0:	add	r3, r8, #1
   183e4:	ldr	r8, [sp, #8]
   183e8:	b	17da0 <__assert_fail@plt+0x6400>
   183ec:	str	r5, [sp, #260]	; 0x104
   183f0:	strb	r6, [sp, #264]	; 0x108
   183f4:	ldr	r4, [sp, #256]	; 0x100
   183f8:	b	18008 <__assert_fail@plt+0x6668>
   183fc:	ldr	r4, [sp, #256]	; 0x100
   18400:	mov	r0, r4
   18404:	bl	117a8 <strlen@plt>
   18408:	strb	r6, [sp, #264]	; 0x108
   1840c:	str	r0, [sp, #260]	; 0x104
   18410:	b	18008 <__assert_fail@plt+0x6668>
   18414:	ldr	r4, [sp, #88]	; 0x58
   18418:	str	r5, [sp, #92]	; 0x5c
   1841c:	ldrb	r3, [r4]
   18420:	cmp	r3, #0
   18424:	bne	1844c <__assert_fail@plt+0x6aac>
   18428:	ldr	r4, [sp, #100]	; 0x64
   1842c:	cmp	r4, #0
   18430:	beq	1835c <__assert_fail@plt+0x69bc>
   18434:	b	17f98 <__assert_fail@plt+0x65f8>
   18438:	ldr	r3, [pc, #76]	; 1848c <__assert_fail@plt+0x6aec>
   1843c:	mov	r2, #143	; 0x8f
   18440:	ldr	r1, [pc, #72]	; 18490 <__assert_fail@plt+0x6af0>
   18444:	ldr	r0, [pc, #76]	; 18498 <__assert_fail@plt+0x6af8>
   18448:	bl	119a0 <__assert_fail@plt>
   1844c:	ldr	r3, [pc, #56]	; 1848c <__assert_fail@plt+0x6aec>
   18450:	mov	r2, #171	; 0xab
   18454:	ldr	r1, [pc, #52]	; 18490 <__assert_fail@plt+0x6af0>
   18458:	ldr	r0, [pc, #60]	; 1849c <__assert_fail@plt+0x6afc>
   1845c:	bl	119a0 <__assert_fail@plt>
   18460:	add	r8, r8, #1
   18464:	mov	sl, r3
   18468:	b	17c50 <__assert_fail@plt+0x62b0>
   1846c:	cmp	r3, #0
   18470:	beq	17fac <__assert_fail@plt+0x660c>
   18474:	ldrb	r3, [sp, #96]	; 0x60
   18478:	cmp	r3, #0
   1847c:	ldrne	r4, [sp, #100]	; 0x64
   18480:	beq	17ff8 <__assert_fail@plt+0x6658>
   18484:	b	17ff0 <__assert_fail@plt+0x6650>
   18488:	andeq	sp, r2, r8, ror #1
   1848c:	andeq	ip, r2, r0, asr #18
   18490:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18494:	andeq	ip, r2, r8, lsl r9
   18498:	andeq	ip, r2, r8, ror #17
   1849c:	andeq	ip, r2, r0, lsl #18
   184a0:	push	{r4, r5, r6, lr}
   184a4:	subs	r4, r0, #0
   184a8:	beq	1851c <__assert_fail@plt+0x6b7c>
   184ac:	mov	r1, #47	; 0x2f
   184b0:	bl	118a4 <strrchr@plt>
   184b4:	subs	r5, r0, #0
   184b8:	beq	18508 <__assert_fail@plt+0x6b68>
   184bc:	add	r6, r5, #1
   184c0:	sub	r3, r6, r4
   184c4:	cmp	r3, #6
   184c8:	ble	18508 <__assert_fail@plt+0x6b68>
   184cc:	mov	r2, #7
   184d0:	ldr	r1, [pc, #96]	; 18538 <__assert_fail@plt+0x6b98>
   184d4:	sub	r0, r5, #6
   184d8:	bl	11958 <strncmp@plt>
   184dc:	cmp	r0, #0
   184e0:	bne	18508 <__assert_fail@plt+0x6b68>
   184e4:	mov	r2, #3
   184e8:	ldr	r1, [pc, #76]	; 1853c <__assert_fail@plt+0x6b9c>
   184ec:	mov	r0, r6
   184f0:	bl	11958 <strncmp@plt>
   184f4:	cmp	r0, #0
   184f8:	movne	r4, r6
   184fc:	ldreq	r3, [pc, #60]	; 18540 <__assert_fail@plt+0x6ba0>
   18500:	addeq	r4, r5, #4
   18504:	streq	r4, [r3]
   18508:	ldr	r2, [pc, #52]	; 18544 <__assert_fail@plt+0x6ba4>
   1850c:	ldr	r3, [pc, #52]	; 18548 <__assert_fail@plt+0x6ba8>
   18510:	str	r4, [r2]
   18514:	str	r4, [r3]
   18518:	pop	{r4, r5, r6, pc}
   1851c:	ldr	r3, [pc, #40]	; 1854c <__assert_fail@plt+0x6bac>
   18520:	mov	r2, #55	; 0x37
   18524:	mov	r1, #1
   18528:	ldr	r3, [r3]
   1852c:	ldr	r0, [pc, #28]	; 18550 <__assert_fail@plt+0x6bb0>
   18530:	bl	11688 <fwrite@plt>
   18534:	bl	11964 <abort@plt>
   18538:	andeq	ip, r2, ip, lsl #19
   1853c:	muleq	r2, r4, r9
   18540:	andeq	lr, r3, r8, lsl #4
   18544:	andeq	lr, r3, r0, lsr #5
   18548:	andeq	lr, r3, ip, lsl #4
   1854c:	andeq	lr, r3, r8, lsl r2
   18550:	andeq	ip, r2, r4, asr r9
   18554:	push	{r4, r5, r6, lr}
   18558:	mov	r2, #48	; 0x30
   1855c:	mov	r4, r1
   18560:	mov	r1, #0
   18564:	mov	r5, r0
   18568:	bl	11814 <memset@plt>
   1856c:	cmp	r4, #10
   18570:	beq	18580 <__assert_fail@plt+0x6be0>
   18574:	str	r4, [r5]
   18578:	mov	r0, r5
   1857c:	pop	{r4, r5, r6, pc}
   18580:	bl	11964 <abort@plt>
   18584:	push	{r4, r5, r6, lr}
   18588:	mov	r4, r0
   1858c:	mov	r5, r1
   18590:	bl	2aad0 <__assert_fail@plt+0x19130>
   18594:	ldrb	r3, [r0]
   18598:	bic	r3, r3, #32
   1859c:	cmp	r3, #85	; 0x55
   185a0:	bne	18600 <__assert_fail@plt+0x6c60>
   185a4:	ldrb	r3, [r0, #1]
   185a8:	bic	r3, r3, #32
   185ac:	cmp	r3, #84	; 0x54
   185b0:	bne	1863c <__assert_fail@plt+0x6c9c>
   185b4:	ldrb	r3, [r0, #2]
   185b8:	bic	r3, r3, #32
   185bc:	cmp	r3, #70	; 0x46
   185c0:	bne	1863c <__assert_fail@plt+0x6c9c>
   185c4:	ldrb	r3, [r0, #3]
   185c8:	cmp	r3, #45	; 0x2d
   185cc:	bne	1863c <__assert_fail@plt+0x6c9c>
   185d0:	ldrb	r3, [r0, #4]
   185d4:	cmp	r3, #56	; 0x38
   185d8:	bne	1863c <__assert_fail@plt+0x6c9c>
   185dc:	ldrb	r3, [r0, #5]
   185e0:	cmp	r3, #0
   185e4:	bne	1863c <__assert_fail@plt+0x6c9c>
   185e8:	ldrb	r2, [r4]
   185ec:	ldr	r3, [pc, #152]	; 1868c <__assert_fail@plt+0x6cec>
   185f0:	ldr	r0, [pc, #152]	; 18690 <__assert_fail@plt+0x6cf0>
   185f4:	cmp	r2, #96	; 0x60
   185f8:	movne	r0, r3
   185fc:	pop	{r4, r5, r6, pc}
   18600:	cmp	r3, #71	; 0x47
   18604:	bne	1863c <__assert_fail@plt+0x6c9c>
   18608:	ldrb	r3, [r0, #1]
   1860c:	bic	r3, r3, #32
   18610:	cmp	r3, #66	; 0x42
   18614:	bne	1863c <__assert_fail@plt+0x6c9c>
   18618:	ldrb	r3, [r0, #2]
   1861c:	cmp	r3, #49	; 0x31
   18620:	bne	1863c <__assert_fail@plt+0x6c9c>
   18624:	ldrb	r3, [r0, #3]
   18628:	cmp	r3, #56	; 0x38
   1862c:	bne	1863c <__assert_fail@plt+0x6c9c>
   18630:	ldrb	r3, [r0, #4]
   18634:	cmp	r3, #48	; 0x30
   18638:	beq	18650 <__assert_fail@plt+0x6cb0>
   1863c:	ldr	r3, [pc, #80]	; 18694 <__assert_fail@plt+0x6cf4>
   18640:	cmp	r5, #9
   18644:	ldr	r0, [pc, #76]	; 18698 <__assert_fail@plt+0x6cf8>
   18648:	movne	r0, r3
   1864c:	pop	{r4, r5, r6, pc}
   18650:	ldrb	r3, [r0, #5]
   18654:	cmp	r3, #51	; 0x33
   18658:	bne	1863c <__assert_fail@plt+0x6c9c>
   1865c:	ldrb	r3, [r0, #6]
   18660:	cmp	r3, #48	; 0x30
   18664:	bne	1863c <__assert_fail@plt+0x6c9c>
   18668:	ldrb	r3, [r0, #7]
   1866c:	cmp	r3, #0
   18670:	bne	1863c <__assert_fail@plt+0x6c9c>
   18674:	ldrb	r2, [r4]
   18678:	ldr	r3, [pc, #28]	; 1869c <__assert_fail@plt+0x6cfc>
   1867c:	ldr	r0, [pc, #28]	; 186a0 <__assert_fail@plt+0x6d00>
   18680:	cmp	r2, #96	; 0x60
   18684:	movne	r0, r3
   18688:	pop	{r4, r5, r6, pc}
   1868c:	strdeq	ip, [r2], -r0
   18690:	andeq	ip, r2, ip, ror #19
   18694:	andeq	ip, r2, r0, lsl #20
   18698:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1869c:	strdeq	ip, [r2], -r8
   186a0:	strdeq	ip, [r2], -r4
   186a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186a8:	sub	sp, sp, #116	; 0x74
   186ac:	mov	sl, r0
   186b0:	str	r3, [sp, #24]
   186b4:	mov	r3, #1
   186b8:	mov	r8, r1
   186bc:	str	r2, [sp, #56]	; 0x38
   186c0:	str	r3, [sp, #36]	; 0x24
   186c4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   186c8:	ldr	r3, [sp, #156]	; 0x9c
   186cc:	mov	fp, r8
   186d0:	mov	r2, #0
   186d4:	lsr	r3, r3, #1
   186d8:	and	r3, r3, #1
   186dc:	str	r2, [sp, #68]	; 0x44
   186e0:	str	r3, [sp, #28]
   186e4:	str	r2, [sp, #40]	; 0x28
   186e8:	str	r2, [sp, #44]	; 0x2c
   186ec:	str	r2, [sp, #52]	; 0x34
   186f0:	str	r2, [sp, #64]	; 0x40
   186f4:	str	r2, [sp, #72]	; 0x48
   186f8:	str	sl, [sp, #32]
   186fc:	str	r0, [sp, #76]	; 0x4c
   18700:	ldr	r3, [sp, #152]	; 0x98
   18704:	cmp	r3, #10
   18708:	ldrls	pc, [pc, r3, lsl #2]
   1870c:	b	198cc <__assert_fail@plt+0x7f2c>
   18710:	andeq	r8, r1, ip, lsr r7
   18714:	andeq	r8, r1, r4, lsr #20
   18718:	andeq	r8, r1, r8, asr #20
   1871c:	andeq	r8, r1, ip, ror #20
   18720:	muleq	r1, r8, fp
   18724:	andeq	r8, r1, ip, ror #22
   18728:	andeq	r8, r1, r4, asr #22
   1872c:	andeq	r8, r1, r0, lsl #21
   18730:	muleq	r1, r8, sl
   18734:	muleq	r1, r8, sl
   18738:	muleq	r1, r8, sl
   1873c:	mov	r3, #0
   18740:	mov	r7, r3
   18744:	str	r3, [sp, #28]
   18748:	ldr	r3, [sp, #44]	; 0x2c
   1874c:	mov	sl, #0
   18750:	eor	r3, r3, #1
   18754:	str	r3, [sp, #60]	; 0x3c
   18758:	ldr	r3, [sp, #24]
   1875c:	cmn	r3, #1
   18760:	beq	18cc4 <__assert_fail@plt+0x7324>
   18764:	ldr	r3, [sp, #24]
   18768:	subs	r5, r3, sl
   1876c:	movne	r5, #1
   18770:	cmp	r5, #0
   18774:	beq	18cdc <__assert_fail@plt+0x733c>
   18778:	ldr	r3, [sp, #152]	; 0x98
   1877c:	ldr	r8, [sp, #44]	; 0x2c
   18780:	cmp	r3, #2
   18784:	moveq	r8, #0
   18788:	andne	r8, r8, #1
   1878c:	ldr	r3, [sp, #52]	; 0x34
   18790:	adds	r9, r3, #0
   18794:	movne	r9, #1
   18798:	ands	r6, r9, r8
   1879c:	beq	19144 <__assert_fail@plt+0x77a4>
   187a0:	ldr	r2, [sp, #52]	; 0x34
   187a4:	ldr	r1, [sp, #24]
   187a8:	cmp	r2, #1
   187ac:	mov	r3, r2
   187b0:	movls	r3, #0
   187b4:	movhi	r3, #1
   187b8:	cmn	r1, #1
   187bc:	movne	r3, #0
   187c0:	cmp	r3, #0
   187c4:	add	r4, sl, r2
   187c8:	beq	187d8 <__assert_fail@plt+0x6e38>
   187cc:	ldr	r0, [sp, #56]	; 0x38
   187d0:	bl	117a8 <strlen@plt>
   187d4:	str	r0, [sp, #24]
   187d8:	ldr	r3, [sp, #24]
   187dc:	cmp	r3, r4
   187e0:	ldr	r3, [sp, #56]	; 0x38
   187e4:	add	r3, r3, sl
   187e8:	str	r3, [sp, #48]	; 0x30
   187ec:	bcc	19150 <__assert_fail@plt+0x77b0>
   187f0:	mov	r0, r3
   187f4:	ldr	r2, [sp, #52]	; 0x34
   187f8:	ldr	r1, [sp, #64]	; 0x40
   187fc:	bl	1161c <memcmp@plt>
   18800:	cmp	r0, #0
   18804:	bne	19150 <__assert_fail@plt+0x77b0>
   18808:	ldr	r3, [sp, #28]
   1880c:	cmp	r3, #0
   18810:	bne	199cc <__assert_fail@plt+0x802c>
   18814:	ldr	r3, [sp, #48]	; 0x30
   18818:	ldrb	r4, [r3]
   1881c:	cmp	r4, #126	; 0x7e
   18820:	ldrls	pc, [pc, r4, lsl #2]
   18824:	b	190e4 <__assert_fail@plt+0x7744>
   18828:	andeq	r8, r1, r8, lsl #30
   1882c:	andeq	r9, r1, r4, ror #1
   18830:	andeq	r9, r1, r4, ror #1
   18834:	andeq	r9, r1, r4, ror #1
   18838:	andeq	r9, r1, r4, ror #1
   1883c:	andeq	r9, r1, r4, ror #1
   18840:	andeq	r9, r1, r4, ror #1
   18844:	andeq	r8, r1, ip, ror #29
   18848:	ldrdeq	r8, [r1], -r0
   1884c:	andeq	r9, r1, ip, asr #1
   18850:	andeq	r8, r1, r0, lsr lr
   18854:	andeq	r8, r1, r4, lsl lr
   18858:	andeq	r9, r1, r8, lsr #1
   1885c:	andeq	r9, r1, r4, lsl #1
   18860:	andeq	r9, r1, r4, ror #1
   18864:	andeq	r9, r1, r4, ror #1
   18868:	andeq	r9, r1, r4, ror #1
   1886c:	andeq	r9, r1, r4, ror #1
   18870:	andeq	r9, r1, r4, ror #1
   18874:	andeq	r9, r1, r4, ror #1
   18878:	andeq	r9, r1, r4, ror #1
   1887c:	andeq	r9, r1, r4, ror #1
   18880:	andeq	r9, r1, r4, ror #1
   18884:	andeq	r9, r1, r4, ror #1
   18888:	andeq	r9, r1, r4, ror #1
   1888c:	andeq	r9, r1, r4, ror #1
   18890:	andeq	r9, r1, r4, ror #1
   18894:	andeq	r9, r1, r4, ror #1
   18898:	andeq	r9, r1, r4, ror #1
   1889c:	andeq	r9, r1, r4, ror #1
   188a0:	andeq	r9, r1, r4, ror #1
   188a4:	andeq	r9, r1, r4, ror #1
   188a8:	andeq	r9, r1, r4, asr #1
   188ac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188b0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188b4:	andeq	r8, r1, r8, lsl #24
   188b8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188bc:	muleq	r1, r0, r0
   188c0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188c4:	andeq	r9, r1, r4, rrx
   188c8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188cc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188d0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188d4:	muleq	r1, r0, r0
   188d8:	muleq	r1, r0, r0
   188dc:	muleq	r1, r0, r0
   188e0:	muleq	r1, r0, r0
   188e4:	muleq	r1, r0, r0
   188e8:	muleq	r1, r0, r0
   188ec:	muleq	r1, r0, r0
   188f0:	muleq	r1, r0, r0
   188f4:	muleq	r1, r0, r0
   188f8:	muleq	r1, r0, r0
   188fc:	muleq	r1, r0, r0
   18900:	muleq	r1, r0, r0
   18904:	muleq	r1, r0, r0
   18908:	muleq	r1, r0, r0
   1890c:	muleq	r1, r0, r0
   18910:	muleq	r1, r0, r0
   18914:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18918:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1891c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18920:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18924:	andeq	r9, r1, r4, lsr r0
   18928:	andeq	r9, r1, r4, ror #1
   1892c:	muleq	r1, r0, r0
   18930:	muleq	r1, r0, r0
   18934:	muleq	r1, r0, r0
   18938:	muleq	r1, r0, r0
   1893c:	muleq	r1, r0, r0
   18940:	muleq	r1, r0, r0
   18944:	muleq	r1, r0, r0
   18948:	muleq	r1, r0, r0
   1894c:	muleq	r1, r0, r0
   18950:	muleq	r1, r0, r0
   18954:	muleq	r1, r0, r0
   18958:	muleq	r1, r0, r0
   1895c:	muleq	r1, r0, r0
   18960:	muleq	r1, r0, r0
   18964:	muleq	r1, r0, r0
   18968:	muleq	r1, r0, r0
   1896c:	muleq	r1, r0, r0
   18970:	muleq	r1, r0, r0
   18974:	muleq	r1, r0, r0
   18978:	muleq	r1, r0, r0
   1897c:	muleq	r1, r0, r0
   18980:	muleq	r1, r0, r0
   18984:	muleq	r1, r0, r0
   18988:	muleq	r1, r0, r0
   1898c:	muleq	r1, r0, r0
   18990:	muleq	r1, r0, r0
   18994:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18998:	andeq	r8, r1, r4, asr sp
   1899c:	muleq	r1, r0, r0
   189a0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189a4:	muleq	r1, r0, r0
   189a8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189ac:	muleq	r1, r0, r0
   189b0:	muleq	r1, r0, r0
   189b4:	muleq	r1, r0, r0
   189b8:	muleq	r1, r0, r0
   189bc:	muleq	r1, r0, r0
   189c0:	muleq	r1, r0, r0
   189c4:	muleq	r1, r0, r0
   189c8:	muleq	r1, r0, r0
   189cc:	muleq	r1, r0, r0
   189d0:	muleq	r1, r0, r0
   189d4:	muleq	r1, r0, r0
   189d8:	muleq	r1, r0, r0
   189dc:	muleq	r1, r0, r0
   189e0:	muleq	r1, r0, r0
   189e4:	muleq	r1, r0, r0
   189e8:	muleq	r1, r0, r0
   189ec:	muleq	r1, r0, r0
   189f0:	muleq	r1, r0, r0
   189f4:	muleq	r1, r0, r0
   189f8:	muleq	r1, r0, r0
   189fc:	muleq	r1, r0, r0
   18a00:	muleq	r1, r0, r0
   18a04:	muleq	r1, r0, r0
   18a08:	muleq	r1, r0, r0
   18a0c:	muleq	r1, r0, r0
   18a10:	muleq	r1, r0, r0
   18a14:	andeq	r8, r1, r8, ror #23
   18a18:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18a1c:	andeq	r8, r1, r8, ror #23
   18a20:	andeq	r8, r1, r8, lsl #24
   18a24:	mov	r3, #1
   18a28:	str	r3, [sp, #28]
   18a2c:	str	r3, [sp, #52]	; 0x34
   18a30:	ldr	r3, [pc, #4000]	; 199d8 <__assert_fail@plt+0x8038>
   18a34:	mov	r7, #0
   18a38:	str	r3, [sp, #64]	; 0x40
   18a3c:	mov	r3, #2
   18a40:	str	r3, [sp, #152]	; 0x98
   18a44:	b	18748 <__assert_fail@plt+0x6da8>
   18a48:	ldr	r3, [sp, #28]
   18a4c:	cmp	r3, #0
   18a50:	beq	18bac <__assert_fail@plt+0x720c>
   18a54:	mov	r3, #1
   18a58:	str	r3, [sp, #52]	; 0x34
   18a5c:	ldr	r3, [pc, #3956]	; 199d8 <__assert_fail@plt+0x8038>
   18a60:	mov	r7, #0
   18a64:	str	r3, [sp, #64]	; 0x40
   18a68:	b	18748 <__assert_fail@plt+0x6da8>
   18a6c:	mov	r3, #1
   18a70:	str	r3, [sp, #44]	; 0x2c
   18a74:	str	r3, [sp, #52]	; 0x34
   18a78:	str	r3, [sp, #28]
   18a7c:	b	18a30 <__assert_fail@plt+0x7090>
   18a80:	mov	r3, #0
   18a84:	str	r3, [sp, #28]
   18a88:	mov	r3, #1
   18a8c:	str	r3, [sp, #44]	; 0x2c
   18a90:	mov	r7, #0
   18a94:	b	18748 <__assert_fail@plt+0x6da8>
   18a98:	ldr	r3, [sp, #152]	; 0x98
   18a9c:	cmp	r3, #10
   18aa0:	beq	18ae4 <__assert_fail@plt+0x7144>
   18aa4:	mov	r2, #5
   18aa8:	ldr	r1, [pc, #3884]	; 199dc <__assert_fail@plt+0x803c>
   18aac:	mov	r0, #0
   18ab0:	bl	11628 <dcgettext@plt>
   18ab4:	ldr	r2, [pc, #3872]	; 199dc <__assert_fail@plt+0x803c>
   18ab8:	cmp	r0, r2
   18abc:	str	r0, [sp, #164]	; 0xa4
   18ac0:	beq	19ac8 <__assert_fail@plt+0x8128>
   18ac4:	mov	r2, #5
   18ac8:	ldr	r1, [pc, #3848]	; 199d8 <__assert_fail@plt+0x8038>
   18acc:	mov	r0, #0
   18ad0:	bl	11628 <dcgettext@plt>
   18ad4:	ldr	r2, [pc, #3836]	; 199d8 <__assert_fail@plt+0x8038>
   18ad8:	cmp	r0, r2
   18adc:	str	r0, [sp, #168]	; 0xa8
   18ae0:	beq	19ab8 <__assert_fail@plt+0x8118>
   18ae4:	ldr	r7, [sp, #28]
   18ae8:	cmp	r7, #0
   18aec:	movne	r7, #0
   18af0:	bne	18b24 <__assert_fail@plt+0x7184>
   18af4:	ldr	r3, [sp, #164]	; 0xa4
   18af8:	ldrb	r3, [r3]
   18afc:	cmp	r3, #0
   18b00:	beq	19ad8 <__assert_fail@plt+0x8138>
   18b04:	ldr	r2, [sp, #164]	; 0xa4
   18b08:	ldr	r1, [sp, #32]
   18b0c:	cmp	fp, r7
   18b10:	strbhi	r3, [r1, r7]
   18b14:	ldrb	r3, [r2, #1]!
   18b18:	add	r7, r7, #1
   18b1c:	cmp	r3, #0
   18b20:	bne	18b0c <__assert_fail@plt+0x716c>
   18b24:	ldr	r0, [sp, #168]	; 0xa8
   18b28:	bl	117a8 <strlen@plt>
   18b2c:	ldr	r3, [sp, #168]	; 0xa8
   18b30:	str	r3, [sp, #64]	; 0x40
   18b34:	mov	r3, #1
   18b38:	str	r3, [sp, #44]	; 0x2c
   18b3c:	str	r0, [sp, #52]	; 0x34
   18b40:	b	18748 <__assert_fail@plt+0x6da8>
   18b44:	mov	r3, #1
   18b48:	str	r3, [sp, #44]	; 0x2c
   18b4c:	str	r3, [sp, #52]	; 0x34
   18b50:	str	r3, [sp, #28]
   18b54:	ldr	r3, [pc, #3716]	; 199e0 <__assert_fail@plt+0x8040>
   18b58:	mov	r7, #0
   18b5c:	str	r3, [sp, #64]	; 0x40
   18b60:	mov	r3, #5
   18b64:	str	r3, [sp, #152]	; 0x98
   18b68:	b	18748 <__assert_fail@plt+0x6da8>
   18b6c:	ldr	r3, [sp, #28]
   18b70:	cmp	r3, #0
   18b74:	beq	19874 <__assert_fail@plt+0x7ed4>
   18b78:	ldr	r3, [sp, #28]
   18b7c:	mov	r7, #0
   18b80:	str	r3, [sp, #44]	; 0x2c
   18b84:	mov	r3, #1
   18b88:	str	r3, [sp, #52]	; 0x34
   18b8c:	ldr	r3, [pc, #3660]	; 199e0 <__assert_fail@plt+0x8040>
   18b90:	str	r3, [sp, #64]	; 0x40
   18b94:	b	18748 <__assert_fail@plt+0x6da8>
   18b98:	ldr	r3, [sp, #28]
   18b9c:	cmp	r3, #0
   18ba0:	mov	r3, #1
   18ba4:	streq	r3, [sp, #44]	; 0x2c
   18ba8:	bne	18a2c <__assert_fail@plt+0x708c>
   18bac:	cmp	fp, #0
   18bb0:	beq	198a4 <__assert_fail@plt+0x7f04>
   18bb4:	ldr	r3, [sp, #32]
   18bb8:	mov	r2, #39	; 0x27
   18bbc:	mov	r7, #1
   18bc0:	strb	r2, [r3]
   18bc4:	mov	r3, #0
   18bc8:	str	r3, [sp, #28]
   18bcc:	mov	r3, #1
   18bd0:	str	r3, [sp, #52]	; 0x34
   18bd4:	ldr	r3, [pc, #3580]	; 199d8 <__assert_fail@plt+0x8038>
   18bd8:	str	r3, [sp, #64]	; 0x40
   18bdc:	mov	r3, #2
   18be0:	str	r3, [sp, #152]	; 0x98
   18be4:	b	18748 <__assert_fail@plt+0x6da8>
   18be8:	ldr	r3, [sp, #24]
   18bec:	cmn	r3, #1
   18bf0:	beq	19808 <__assert_fail@plt+0x7e68>
   18bf4:	ldr	r3, [sp, #24]
   18bf8:	subs	r3, r3, #1
   18bfc:	movne	r3, #1
   18c00:	cmp	r3, #0
   18c04:	bne	18c10 <__assert_fail@plt+0x7270>
   18c08:	cmp	sl, #0
   18c0c:	beq	18ffc <__assert_fail@plt+0x765c>
   18c10:	ldr	r3, [sp, #152]	; 0x98
   18c14:	mov	r5, #0
   18c18:	sub	r2, r3, #2
   18c1c:	mov	r8, r5
   18c20:	clz	r2, r2
   18c24:	lsr	r2, r2, #5
   18c28:	ldr	r3, [sp, #60]	; 0x3c
   18c2c:	ldr	r1, [sp, #28]
   18c30:	orr	r3, r2, r3
   18c34:	eor	r3, r3, #1
   18c38:	orr	r3, r1, r3
   18c3c:	tst	r3, #255	; 0xff
   18c40:	bne	1936c <__assert_fail@plt+0x79cc>
   18c44:	cmp	r6, #0
   18c48:	bne	18d98 <__assert_fail@plt+0x73f8>
   18c4c:	ldr	r3, [sp, #40]	; 0x28
   18c50:	eor	r8, r8, #1
   18c54:	and	r8, r8, r3
   18c58:	add	sl, sl, #1
   18c5c:	uxtb	r6, r8
   18c60:	cmp	r6, #0
   18c64:	beq	18c98 <__assert_fail@plt+0x72f8>
   18c68:	cmp	fp, r7
   18c6c:	movhi	r2, #39	; 0x27
   18c70:	ldrhi	r3, [sp, #32]
   18c74:	strbhi	r2, [r3, r7]
   18c78:	add	r3, r7, #1
   18c7c:	cmp	fp, r3
   18c80:	movhi	r1, #39	; 0x27
   18c84:	ldrhi	r2, [sp, #32]
   18c88:	add	r7, r7, #2
   18c8c:	strbhi	r1, [r2, r3]
   18c90:	mov	r3, #0
   18c94:	str	r3, [sp, #40]	; 0x28
   18c98:	cmp	r7, fp
   18c9c:	ldrcc	r3, [sp, #32]
   18ca0:	strbcc	r4, [r3, r7]
   18ca4:	ldr	r3, [sp, #36]	; 0x24
   18ca8:	cmp	r5, #0
   18cac:	moveq	r3, #0
   18cb0:	str	r3, [sp, #36]	; 0x24
   18cb4:	ldr	r3, [sp, #24]
   18cb8:	add	r7, r7, #1
   18cbc:	cmn	r3, #1
   18cc0:	bne	18764 <__assert_fail@plt+0x6dc4>
   18cc4:	ldr	r3, [sp, #56]	; 0x38
   18cc8:	ldrb	r5, [r3, sl]
   18ccc:	adds	r5, r5, #0
   18cd0:	movne	r5, #1
   18cd4:	cmp	r5, #0
   18cd8:	bne	18778 <__assert_fail@plt+0x6dd8>
   18cdc:	ldr	r3, [sp, #152]	; 0x98
   18ce0:	ldr	r1, [sp, #28]
   18ce4:	sub	r3, r3, #2
   18ce8:	clz	r3, r3
   18cec:	lsr	r3, r3, #5
   18cf0:	and	r9, r1, r3
   18cf4:	cmp	r7, #0
   18cf8:	movne	r2, #0
   18cfc:	andeq	r2, r9, #1
   18d00:	cmp	r2, #0
   18d04:	bne	196e0 <__assert_fail@plt+0x7d40>
   18d08:	eor	r2, r1, #1
   18d0c:	ands	r3, r3, r2
   18d10:	beq	19b9c <__assert_fail@plt+0x81fc>
   18d14:	ldr	r2, [sp, #68]	; 0x44
   18d18:	cmp	r2, #0
   18d1c:	beq	19b88 <__assert_fail@plt+0x81e8>
   18d20:	ldr	r3, [sp, #36]	; 0x24
   18d24:	cmp	r3, #0
   18d28:	bne	19b40 <__assert_fail@plt+0x81a0>
   18d2c:	ldr	r2, [sp, #72]	; 0x48
   18d30:	clz	r3, fp
   18d34:	cmp	r2, #0
   18d38:	lsr	r3, r3, #5
   18d3c:	moveq	r3, #0
   18d40:	cmp	r3, #0
   18d44:	beq	19ae0 <__assert_fail@plt+0x8140>
   18d48:	str	r3, [sp, #68]	; 0x44
   18d4c:	ldr	fp, [sp, #72]	; 0x48
   18d50:	b	18700 <__assert_fail@plt+0x6d60>
   18d54:	ldr	r3, [sp, #152]	; 0x98
   18d58:	cmp	r3, #2
   18d5c:	beq	193b0 <__assert_fail@plt+0x7a10>
   18d60:	ldr	r3, [sp, #44]	; 0x2c
   18d64:	ldr	r2, [sp, #28]
   18d68:	and	r2, r3, r2
   18d6c:	ands	r2, r9, r2
   18d70:	bne	193bc <__assert_fail@plt+0x7a1c>
   18d74:	mov	r4, #92	; 0x5c
   18d78:	mov	r3, r4
   18d7c:	ldr	r1, [sp, #44]	; 0x2c
   18d80:	cmp	r1, #0
   18d84:	moveq	r5, #0
   18d88:	moveq	r8, r1
   18d8c:	beq	18c28 <__assert_fail@plt+0x7288>
   18d90:	mov	r4, r3
   18d94:	mov	r5, #0
   18d98:	ldr	r3, [sp, #28]
   18d9c:	cmp	r3, #0
   18da0:	bne	193a4 <__assert_fail@plt+0x7a04>
   18da4:	ldr	r3, [sp, #40]	; 0x28
   18da8:	eor	r9, r3, #1
   18dac:	and	r9, r9, r2
   18db0:	ands	r9, r9, #255	; 0xff
   18db4:	beq	18df8 <__assert_fail@plt+0x7458>
   18db8:	cmp	fp, r7
   18dbc:	movhi	r2, #39	; 0x27
   18dc0:	ldrhi	r3, [sp, #32]
   18dc4:	str	r9, [sp, #40]	; 0x28
   18dc8:	strbhi	r2, [r3, r7]
   18dcc:	add	r3, r7, #1
   18dd0:	cmp	fp, r3
   18dd4:	movhi	r1, #36	; 0x24
   18dd8:	ldrhi	r2, [sp, #32]
   18ddc:	strbhi	r1, [r2, r3]
   18de0:	add	r3, r7, #2
   18de4:	cmp	fp, r3
   18de8:	add	r7, r7, #3
   18dec:	ldrhi	r2, [sp, #32]
   18df0:	movhi	r1, #39	; 0x27
   18df4:	strbhi	r1, [r2, r3]
   18df8:	cmp	fp, r7
   18dfc:	movhi	r2, #92	; 0x5c
   18e00:	ldrhi	r3, [sp, #32]
   18e04:	add	sl, sl, #1
   18e08:	strbhi	r2, [r3, r7]
   18e0c:	add	r7, r7, #1
   18e10:	b	18c98 <__assert_fail@plt+0x72f8>
   18e14:	ldr	r3, [sp, #152]	; 0x98
   18e18:	mov	r4, #11
   18e1c:	sub	r2, r3, #2
   18e20:	mov	r3, #118	; 0x76
   18e24:	clz	r2, r2
   18e28:	lsr	r2, r2, #5
   18e2c:	b	18d7c <__assert_fail@plt+0x73dc>
   18e30:	mov	r4, #10
   18e34:	mov	r3, #110	; 0x6e
   18e38:	ldr	r2, [sp, #152]	; 0x98
   18e3c:	ldr	r1, [sp, #28]
   18e40:	sub	r2, r2, #2
   18e44:	clz	r2, r2
   18e48:	lsr	r2, r2, #5
   18e4c:	ands	r1, r1, r2
   18e50:	beq	18d7c <__assert_fail@plt+0x73dc>
   18e54:	ldr	sl, [sp, #32]
   18e58:	mov	r8, fp
   18e5c:	mov	r2, r1
   18e60:	mov	r3, #2
   18e64:	str	r3, [sp, #152]	; 0x98
   18e68:	ldr	r9, [sp, #44]	; 0x2c
   18e6c:	ldr	r3, [sp, #152]	; 0x98
   18e70:	and	r9, r9, r2
   18e74:	tst	r9, #255	; 0xff
   18e78:	movne	r3, #4
   18e7c:	str	r3, [sp, #152]	; 0x98
   18e80:	ldr	r3, [sp, #156]	; 0x9c
   18e84:	mov	ip, #0
   18e88:	bic	r3, r3, #2
   18e8c:	str	r3, [sp, #4]
   18e90:	ldr	r3, [sp, #168]	; 0xa8
   18e94:	ldr	r2, [sp, #56]	; 0x38
   18e98:	str	r3, [sp, #16]
   18e9c:	ldr	r3, [sp, #164]	; 0xa4
   18ea0:	mov	r1, r8
   18ea4:	str	r3, [sp, #12]
   18ea8:	ldr	r3, [sp, #152]	; 0x98
   18eac:	mov	r0, sl
   18eb0:	str	r3, [sp]
   18eb4:	str	ip, [sp, #8]
   18eb8:	ldr	r3, [sp, #24]
   18ebc:	bl	186a4 <__assert_fail@plt+0x6d04>
   18ec0:	mov	fp, r0
   18ec4:	mov	r0, fp
   18ec8:	add	sp, sp, #116	; 0x74
   18ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ed0:	ldr	r3, [sp, #152]	; 0x98
   18ed4:	mov	r4, #8
   18ed8:	sub	r2, r3, #2
   18edc:	mov	r3, #98	; 0x62
   18ee0:	clz	r2, r2
   18ee4:	lsr	r2, r2, #5
   18ee8:	b	18d7c <__assert_fail@plt+0x73dc>
   18eec:	ldr	r3, [sp, #152]	; 0x98
   18ef0:	mov	r4, #7
   18ef4:	sub	r2, r3, #2
   18ef8:	mov	r3, #97	; 0x61
   18efc:	clz	r2, r2
   18f00:	lsr	r2, r2, #5
   18f04:	b	18d7c <__assert_fail@plt+0x73dc>
   18f08:	ldr	r3, [sp, #44]	; 0x2c
   18f0c:	cmp	r3, #0
   18f10:	beq	196f4 <__assert_fail@plt+0x7d54>
   18f14:	ldr	r3, [sp, #28]
   18f18:	cmp	r3, #0
   18f1c:	bne	199cc <__assert_fail@plt+0x802c>
   18f20:	ldr	r3, [sp, #152]	; 0x98
   18f24:	sub	r2, r3, #2
   18f28:	ldr	r3, [sp, #40]	; 0x28
   18f2c:	clz	r2, r2
   18f30:	eor	r3, r3, #1
   18f34:	lsr	r2, r2, #5
   18f38:	ands	r3, r2, r3
   18f3c:	moveq	r1, r7
   18f40:	beq	18f84 <__assert_fail@plt+0x75e4>
   18f44:	cmp	fp, r7
   18f48:	movhi	r0, #39	; 0x27
   18f4c:	ldrhi	r1, [sp, #32]
   18f50:	str	r3, [sp, #40]	; 0x28
   18f54:	strbhi	r0, [r1, r7]
   18f58:	add	r1, r7, #1
   18f5c:	cmp	fp, r1
   18f60:	movhi	ip, #36	; 0x24
   18f64:	ldrhi	r0, [sp, #32]
   18f68:	strbhi	ip, [r0, r1]
   18f6c:	add	r1, r7, #2
   18f70:	cmp	fp, r1
   18f74:	movhi	ip, #39	; 0x27
   18f78:	ldrhi	r0, [sp, #32]
   18f7c:	strbhi	ip, [r0, r1]
   18f80:	add	r1, r7, #3
   18f84:	cmp	fp, r1
   18f88:	movhi	r0, #92	; 0x5c
   18f8c:	ldrhi	r3, [sp, #32]
   18f90:	add	r7, r1, #1
   18f94:	strbhi	r0, [r3, r1]
   18f98:	cmp	r8, #0
   18f9c:	beq	198e0 <__assert_fail@plt+0x7f40>
   18fa0:	ldr	r0, [sp, #24]
   18fa4:	add	r3, sl, #1
   18fa8:	cmp	r3, r0
   18fac:	bcs	1981c <__assert_fail@plt+0x7e7c>
   18fb0:	ldr	r0, [sp, #56]	; 0x38
   18fb4:	ldrb	r3, [r0, r3]
   18fb8:	sub	r3, r3, #48	; 0x30
   18fbc:	cmp	r3, #9
   18fc0:	bhi	1981c <__assert_fail@plt+0x7e7c>
   18fc4:	cmp	fp, r7
   18fc8:	movhi	r3, #48	; 0x30
   18fcc:	ldrhi	r0, [sp, #32]
   18fd0:	ldr	r5, [sp, #28]
   18fd4:	mov	r4, #48	; 0x30
   18fd8:	strbhi	r3, [r0, r7]
   18fdc:	add	r3, r1, #2
   18fe0:	cmp	fp, r3
   18fe4:	movhi	r0, #48	; 0x30
   18fe8:	ldrhi	ip, [sp, #32]
   18fec:	add	r7, r1, #3
   18ff0:	strbhi	r0, [ip, r3]
   18ff4:	b	18c28 <__assert_fail@plt+0x7288>
   18ff8:	mov	r5, #0
   18ffc:	ldr	r3, [sp, #152]	; 0x98
   19000:	sub	r2, r3, #2
   19004:	ldr	r3, [sp, #28]
   19008:	clz	r2, r2
   1900c:	lsr	r2, r2, #5
   19010:	ands	r8, r3, r2
   19014:	beq	18c28 <__assert_fail@plt+0x7288>
   19018:	mov	r3, r8
   1901c:	mov	r2, r3
   19020:	mov	r3, #2
   19024:	ldr	sl, [sp, #32]
   19028:	mov	r8, fp
   1902c:	str	r3, [sp, #152]	; 0x98
   19030:	b	18e68 <__assert_fail@plt+0x74c8>
   19034:	ldr	r3, [sp, #152]	; 0x98
   19038:	cmp	r3, #2
   1903c:	beq	19760 <__assert_fail@plt+0x7dc0>
   19040:	cmp	r3, #5
   19044:	beq	19720 <__assert_fail@plt+0x7d80>
   19048:	mov	r5, #0
   1904c:	sub	r2, r3, #2
   19050:	mov	r8, r5
   19054:	clz	r2, r2
   19058:	mov	r4, #63	; 0x3f
   1905c:	lsr	r2, r2, #5
   19060:	b	18c28 <__assert_fail@plt+0x7288>
   19064:	ldr	r3, [sp, #152]	; 0x98
   19068:	cmp	r3, #2
   1906c:	beq	19780 <__assert_fail@plt+0x7de0>
   19070:	mov	r2, #0
   19074:	str	r5, [sp, #68]	; 0x44
   19078:	mov	r8, r2
   1907c:	mov	r4, #39	; 0x27
   19080:	b	18c28 <__assert_fail@plt+0x7288>
   19084:	mov	r4, #13
   19088:	mov	r3, #114	; 0x72
   1908c:	b	18e38 <__assert_fail@plt+0x7498>
   19090:	ldr	r3, [sp, #152]	; 0x98
   19094:	mov	r8, #0
   19098:	sub	r2, r3, #2
   1909c:	clz	r2, r2
   190a0:	lsr	r2, r2, #5
   190a4:	b	18c28 <__assert_fail@plt+0x7288>
   190a8:	ldr	r3, [sp, #152]	; 0x98
   190ac:	mov	r4, #12
   190b0:	sub	r2, r3, #2
   190b4:	mov	r3, #102	; 0x66
   190b8:	clz	r2, r2
   190bc:	lsr	r2, r2, #5
   190c0:	b	18d7c <__assert_fail@plt+0x73dc>
   190c4:	mov	r5, r6
   190c8:	b	18ffc <__assert_fail@plt+0x765c>
   190cc:	ldr	r3, [sp, #152]	; 0x98
   190d0:	sub	r2, r3, #2
   190d4:	mov	r3, #116	; 0x74
   190d8:	clz	r2, r2
   190dc:	lsr	r2, r2, #5
   190e0:	b	18d7c <__assert_fail@plt+0x73dc>
   190e4:	ldr	r8, [sp, #76]	; 0x4c
   190e8:	cmp	r8, #1
   190ec:	bne	1959c <__assert_fail@plt+0x7bfc>
   190f0:	bl	11778 <__ctype_b_loc@plt>
   190f4:	sxth	r3, r4
   190f8:	mov	ip, r8
   190fc:	lsl	r3, r3, #1
   19100:	ldr	r2, [r0]
   19104:	ldrh	r3, [r2, r3]
   19108:	and	r3, r3, #16384	; 0x4000
   1910c:	cmp	r3, #0
   19110:	movne	r5, #1
   19114:	moveq	r5, #0
   19118:	moveq	r3, #1
   1911c:	movne	r3, #0
   19120:	ldr	r2, [sp, #44]	; 0x2c
   19124:	and	r3, r3, r2
   19128:	ands	r8, r3, #255	; 0xff
   1912c:	bne	19430 <__assert_fail@plt+0x7a90>
   19130:	ldr	r3, [sp, #152]	; 0x98
   19134:	sub	r2, r3, #2
   19138:	clz	r2, r2
   1913c:	lsr	r2, r2, #5
   19140:	b	18c28 <__assert_fail@plt+0x7288>
   19144:	ldr	r3, [sp, #56]	; 0x38
   19148:	add	r3, r3, sl
   1914c:	str	r3, [sp, #48]	; 0x30
   19150:	ldr	r3, [sp, #48]	; 0x30
   19154:	mov	r6, #0
   19158:	ldrb	r4, [r3]
   1915c:	cmp	r4, #126	; 0x7e
   19160:	ldrls	pc, [pc, r4, lsl #2]
   19164:	b	190e4 <__assert_fail@plt+0x7744>
   19168:	andeq	r8, r1, r8, lsl #30
   1916c:	andeq	r9, r1, r4, ror #1
   19170:	andeq	r9, r1, r4, ror #1
   19174:	andeq	r9, r1, r4, ror #1
   19178:	andeq	r9, r1, r4, ror #1
   1917c:	andeq	r9, r1, r4, ror #1
   19180:	andeq	r9, r1, r4, ror #1
   19184:	andeq	r8, r1, ip, ror #29
   19188:	ldrdeq	r8, [r1], -r0
   1918c:	andeq	r9, r1, r4, ror #6
   19190:	andeq	r8, r1, r0, lsr lr
   19194:	andeq	r8, r1, r4, lsl lr
   19198:	andeq	r9, r1, r8, lsr #1
   1919c:	andeq	r9, r1, r4, lsl #1
   191a0:	andeq	r9, r1, r4, ror #1
   191a4:	andeq	r9, r1, r4, ror #1
   191a8:	andeq	r9, r1, r4, ror #1
   191ac:	andeq	r9, r1, r4, ror #1
   191b0:	andeq	r9, r1, r4, ror #1
   191b4:	andeq	r9, r1, r4, ror #1
   191b8:	andeq	r9, r1, r4, ror #1
   191bc:	andeq	r9, r1, r4, ror #1
   191c0:	andeq	r9, r1, r4, ror #1
   191c4:	andeq	r9, r1, r4, ror #1
   191c8:	andeq	r9, r1, r4, ror #1
   191cc:	andeq	r9, r1, r4, ror #1
   191d0:	andeq	r9, r1, r4, ror #1
   191d4:	andeq	r9, r1, r4, ror #1
   191d8:	andeq	r9, r1, r4, ror #1
   191dc:	andeq	r9, r1, r4, ror #1
   191e0:	andeq	r9, r1, r4, ror #1
   191e4:	andeq	r9, r1, r4, ror #1
   191e8:	strdeq	r8, [r1], -ip
   191ec:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   191f0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   191f4:	andeq	r8, r1, r8, lsl #24
   191f8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   191fc:	muleq	r1, r0, r0
   19200:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   19204:	andeq	r9, r1, r4, rrx
   19208:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1920c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   19210:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   19214:	muleq	r1, r0, r0
   19218:	muleq	r1, r0, r0
   1921c:	muleq	r1, r0, r0
   19220:	muleq	r1, r0, r0
   19224:	muleq	r1, r0, r0
   19228:	muleq	r1, r0, r0
   1922c:	muleq	r1, r0, r0
   19230:	muleq	r1, r0, r0
   19234:	muleq	r1, r0, r0
   19238:	muleq	r1, r0, r0
   1923c:	muleq	r1, r0, r0
   19240:	muleq	r1, r0, r0
   19244:	muleq	r1, r0, r0
   19248:	muleq	r1, r0, r0
   1924c:	muleq	r1, r0, r0
   19250:	muleq	r1, r0, r0
   19254:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   19258:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1925c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   19260:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   19264:	andeq	r9, r1, r4, lsr r0
   19268:	andeq	r9, r1, r4, ror #1
   1926c:	muleq	r1, r0, r0
   19270:	muleq	r1, r0, r0
   19274:	muleq	r1, r0, r0
   19278:	muleq	r1, r0, r0
   1927c:	muleq	r1, r0, r0
   19280:	muleq	r1, r0, r0
   19284:	muleq	r1, r0, r0
   19288:	muleq	r1, r0, r0
   1928c:	muleq	r1, r0, r0
   19290:	muleq	r1, r0, r0
   19294:	muleq	r1, r0, r0
   19298:	muleq	r1, r0, r0
   1929c:	muleq	r1, r0, r0
   192a0:	muleq	r1, r0, r0
   192a4:	muleq	r1, r0, r0
   192a8:	muleq	r1, r0, r0
   192ac:	muleq	r1, r0, r0
   192b0:	muleq	r1, r0, r0
   192b4:	muleq	r1, r0, r0
   192b8:	muleq	r1, r0, r0
   192bc:	muleq	r1, r0, r0
   192c0:	muleq	r1, r0, r0
   192c4:	muleq	r1, r0, r0
   192c8:	muleq	r1, r0, r0
   192cc:	muleq	r1, r0, r0
   192d0:	muleq	r1, r0, r0
   192d4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   192d8:	andeq	r8, r1, r4, asr sp
   192dc:	muleq	r1, r0, r0
   192e0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   192e4:	muleq	r1, r0, r0
   192e8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   192ec:	muleq	r1, r0, r0
   192f0:	muleq	r1, r0, r0
   192f4:	muleq	r1, r0, r0
   192f8:	muleq	r1, r0, r0
   192fc:	muleq	r1, r0, r0
   19300:	muleq	r1, r0, r0
   19304:	muleq	r1, r0, r0
   19308:	muleq	r1, r0, r0
   1930c:	muleq	r1, r0, r0
   19310:	muleq	r1, r0, r0
   19314:	muleq	r1, r0, r0
   19318:	muleq	r1, r0, r0
   1931c:	muleq	r1, r0, r0
   19320:	muleq	r1, r0, r0
   19324:	muleq	r1, r0, r0
   19328:	muleq	r1, r0, r0
   1932c:	muleq	r1, r0, r0
   19330:	muleq	r1, r0, r0
   19334:	muleq	r1, r0, r0
   19338:	muleq	r1, r0, r0
   1933c:	muleq	r1, r0, r0
   19340:	muleq	r1, r0, r0
   19344:	muleq	r1, r0, r0
   19348:	muleq	r1, r0, r0
   1934c:	muleq	r1, r0, r0
   19350:	muleq	r1, r0, r0
   19354:	andeq	r8, r1, r8, ror #23
   19358:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1935c:	andeq	r8, r1, r8, ror #23
   19360:	andeq	r8, r1, r8, lsl #24
   19364:	mov	r3, #116	; 0x74
   19368:	b	18e38 <__assert_fail@plt+0x7498>
   1936c:	ldr	r3, [sp, #160]	; 0xa0
   19370:	cmp	r3, #0
   19374:	beq	18c44 <__assert_fail@plt+0x72a4>
   19378:	lsr	r3, r4, #5
   1937c:	ldr	r0, [sp, #160]	; 0xa0
   19380:	uxtb	r3, r3
   19384:	and	r1, r4, #31
   19388:	ldr	r0, [r0, r3, lsl #2]
   1938c:	lsr	r3, r0, r1
   19390:	tst	r3, #1
   19394:	beq	18c44 <__assert_fail@plt+0x72a4>
   19398:	ldr	r3, [sp, #28]
   1939c:	cmp	r3, #0
   193a0:	beq	18da4 <__assert_fail@plt+0x7404>
   193a4:	ldr	sl, [sp, #32]
   193a8:	mov	r8, fp
   193ac:	b	18e68 <__assert_fail@plt+0x74c8>
   193b0:	ldr	r3, [sp, #28]
   193b4:	cmp	r3, #0
   193b8:	bne	1990c <__assert_fail@plt+0x7f6c>
   193bc:	add	sl, sl, #1
   193c0:	ldr	r6, [sp, #40]	; 0x28
   193c4:	mov	r5, #0
   193c8:	mov	r4, #92	; 0x5c
   193cc:	b	18c60 <__assert_fail@plt+0x72c0>
   193d0:	cmp	r9, r8
   193d4:	bne	19644 <__assert_fail@plt+0x7ca4>
   193d8:	ldr	r0, [sp, #100]	; 0x64
   193dc:	bl	11664 <iswprint@plt>
   193e0:	add	r5, r5, r4
   193e4:	cmp	r0, #0
   193e8:	add	r0, sp, #104	; 0x68
   193ec:	moveq	r6, #0
   193f0:	bl	11604 <mbsinit@plt>
   193f4:	cmp	r0, #0
   193f8:	beq	195d8 <__assert_fail@plt+0x7c38>
   193fc:	mov	r2, r6
   19400:	mov	ip, r5
   19404:	eor	r5, r2, #1
   19408:	ldr	r4, [sp, #80]	; 0x50
   1940c:	ldr	r6, [sp, #84]	; 0x54
   19410:	ldr	r7, [sp, #88]	; 0x58
   19414:	uxtb	r5, r5
   19418:	cmp	ip, #1
   1941c:	bls	1991c <__assert_fail@plt+0x7f7c>
   19420:	ldr	r3, [sp, #44]	; 0x2c
   19424:	and	r8, r3, r5
   19428:	mov	r5, r2
   1942c:	uxtb	r8, r8
   19430:	add	r2, sl, ip
   19434:	ldr	r0, [sp, #48]	; 0x30
   19438:	mov	r1, #0
   1943c:	str	r5, [sp, #48]	; 0x30
   19440:	ldr	r9, [sp, #28]
   19444:	ldr	ip, [sp, #40]	; 0x28
   19448:	ldr	r3, [sp, #32]
   1944c:	ldr	r5, [sp, #152]	; 0x98
   19450:	b	1950c <__assert_fail@plt+0x7b6c>
   19454:	cmp	r9, #0
   19458:	bne	19830 <__assert_fail@plt+0x7e90>
   1945c:	eor	r1, ip, #1
   19460:	cmp	r5, #2
   19464:	movne	r1, #0
   19468:	andeq	r1, r1, #1
   1946c:	cmp	r1, #0
   19470:	beq	194a8 <__assert_fail@plt+0x7b08>
   19474:	cmp	fp, r7
   19478:	movhi	ip, #39	; 0x27
   1947c:	strbhi	ip, [r3, r7]
   19480:	add	ip, r7, #1
   19484:	cmp	fp, ip
   19488:	movhi	lr, #36	; 0x24
   1948c:	strbhi	lr, [r3, ip]
   19490:	add	ip, r7, #2
   19494:	cmp	fp, ip
   19498:	movhi	lr, #39	; 0x27
   1949c:	strbhi	lr, [r3, ip]
   194a0:	add	r7, r7, #3
   194a4:	mov	ip, r1
   194a8:	cmp	fp, r7
   194ac:	movhi	r1, #92	; 0x5c
   194b0:	strbhi	r1, [r3, r7]
   194b4:	add	r1, r7, #1
   194b8:	cmp	fp, r1
   194bc:	lsrhi	lr, r4, #6
   194c0:	addhi	lr, lr, #48	; 0x30
   194c4:	strbhi	lr, [r3, r1]
   194c8:	add	lr, r7, #2
   194cc:	cmp	fp, lr
   194d0:	lsrhi	r1, r4, #3
   194d4:	andhi	r1, r1, #7
   194d8:	addhi	r1, r1, #48	; 0x30
   194dc:	add	sl, sl, #1
   194e0:	strbhi	r1, [r3, lr]
   194e4:	and	r4, r4, #7
   194e8:	cmp	r2, sl
   194ec:	add	r4, r4, #48	; 0x30
   194f0:	add	r7, r7, #3
   194f4:	bls	19854 <__assert_fail@plt+0x7eb4>
   194f8:	mov	r1, r8
   194fc:	cmp	fp, r7
   19500:	strbhi	r4, [r3, r7]
   19504:	ldrb	r4, [r0, #1]!
   19508:	add	r7, r7, #1
   1950c:	cmp	r8, #0
   19510:	bne	19454 <__assert_fail@plt+0x7ab4>
   19514:	cmp	r6, #0
   19518:	bne	19568 <__assert_fail@plt+0x7bc8>
   1951c:	eor	r6, r1, #1
   19520:	and	r6, r6, ip
   19524:	add	sl, sl, #1
   19528:	cmp	r2, sl
   1952c:	uxtb	r6, r6
   19530:	bls	19590 <__assert_fail@plt+0x7bf0>
   19534:	cmp	r6, #0
   19538:	beq	194fc <__assert_fail@plt+0x7b5c>
   1953c:	cmp	fp, r7
   19540:	movhi	ip, #39	; 0x27
   19544:	strbhi	ip, [r3, r7]
   19548:	add	ip, r7, #1
   1954c:	cmp	fp, ip
   19550:	movhi	lr, #39	; 0x27
   19554:	strbhi	lr, [r3, ip]
   19558:	add	r7, r7, #2
   1955c:	mov	r6, r8
   19560:	mov	ip, r8
   19564:	b	194fc <__assert_fail@plt+0x7b5c>
   19568:	cmp	fp, r7
   1956c:	eor	r6, r1, #1
   19570:	movhi	lr, #92	; 0x5c
   19574:	and	r6, r6, ip
   19578:	add	sl, sl, #1
   1957c:	strbhi	lr, [r3, r7]
   19580:	cmp	r2, sl
   19584:	add	r7, r7, #1
   19588:	uxtb	r6, r6
   1958c:	bhi	19534 <__assert_fail@plt+0x7b94>
   19590:	str	ip, [sp, #40]	; 0x28
   19594:	ldr	r5, [sp, #48]	; 0x30
   19598:	b	18c60 <__assert_fail@plt+0x72c0>
   1959c:	ldr	r3, [sp, #24]
   195a0:	cmn	r3, #1
   195a4:	mov	r3, #0
   195a8:	str	r3, [sp, #104]	; 0x68
   195ac:	str	r3, [sp, #108]	; 0x6c
   195b0:	beq	198d0 <__assert_fail@plt+0x7f30>
   195b4:	mov	r2, r5
   195b8:	mov	r3, #0
   195bc:	str	r7, [sp, #88]	; 0x58
   195c0:	ldr	r7, [sp, #152]	; 0x98
   195c4:	str	r5, [sp, #92]	; 0x5c
   195c8:	str	r6, [sp, #84]	; 0x54
   195cc:	mov	r5, r3
   195d0:	mov	r6, r2
   195d4:	str	r4, [sp, #80]	; 0x50
   195d8:	ldr	r3, [sp, #56]	; 0x38
   195dc:	add	r9, sl, r5
   195e0:	add	r8, r3, r9
   195e4:	ldr	r3, [sp, #24]
   195e8:	mov	r1, r8
   195ec:	sub	r2, r3, r9
   195f0:	add	r0, sp, #100	; 0x64
   195f4:	add	r3, sp, #104	; 0x68
   195f8:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   195fc:	subs	r4, r0, #0
   19600:	beq	199a8 <__assert_fail@plt+0x8008>
   19604:	cmn	r4, #1
   19608:	beq	19988 <__assert_fail@plt+0x7fe8>
   1960c:	cmn	r4, #2
   19610:	beq	19928 <__assert_fail@plt+0x7f88>
   19614:	ldr	r2, [sp, #28]
   19618:	cmp	r7, #2
   1961c:	movne	r2, #0
   19620:	andeq	r2, r2, #1
   19624:	cmp	r2, #0
   19628:	beq	193d8 <__assert_fail@plt+0x7a38>
   1962c:	cmp	r4, #1
   19630:	beq	193d8 <__assert_fail@plt+0x7a38>
   19634:	sub	r3, r4, #1
   19638:	add	r9, r3, r9
   1963c:	ldr	r3, [sp, #56]	; 0x38
   19640:	add	r9, r3, r9
   19644:	ldrb	r3, [r8, #1]!
   19648:	sub	r3, r3, #91	; 0x5b
   1964c:	cmp	r3, #33	; 0x21
   19650:	ldrls	pc, [pc, r3, lsl #2]
   19654:	b	193d0 <__assert_fail@plt+0x7a30>
   19658:	andeq	r9, r1, r0, ror #13
   1965c:	andeq	r9, r1, r0, ror #13
   19660:	ldrdeq	r9, [r1], -r0
   19664:	andeq	r9, r1, r0, ror #13
   19668:	ldrdeq	r9, [r1], -r0
   1966c:	andeq	r9, r1, r0, ror #13
   19670:	ldrdeq	r9, [r1], -r0
   19674:	ldrdeq	r9, [r1], -r0
   19678:	ldrdeq	r9, [r1], -r0
   1967c:	ldrdeq	r9, [r1], -r0
   19680:	ldrdeq	r9, [r1], -r0
   19684:	ldrdeq	r9, [r1], -r0
   19688:	ldrdeq	r9, [r1], -r0
   1968c:	ldrdeq	r9, [r1], -r0
   19690:	ldrdeq	r9, [r1], -r0
   19694:	ldrdeq	r9, [r1], -r0
   19698:	ldrdeq	r9, [r1], -r0
   1969c:	ldrdeq	r9, [r1], -r0
   196a0:	ldrdeq	r9, [r1], -r0
   196a4:	ldrdeq	r9, [r1], -r0
   196a8:	ldrdeq	r9, [r1], -r0
   196ac:	ldrdeq	r9, [r1], -r0
   196b0:	ldrdeq	r9, [r1], -r0
   196b4:	ldrdeq	r9, [r1], -r0
   196b8:	ldrdeq	r9, [r1], -r0
   196bc:	ldrdeq	r9, [r1], -r0
   196c0:	ldrdeq	r9, [r1], -r0
   196c4:	ldrdeq	r9, [r1], -r0
   196c8:	ldrdeq	r9, [r1], -r0
   196cc:	ldrdeq	r9, [r1], -r0
   196d0:	ldrdeq	r9, [r1], -r0
   196d4:	ldrdeq	r9, [r1], -r0
   196d8:	ldrdeq	r9, [r1], -r0
   196dc:	andeq	r9, r1, r0, ror #13
   196e0:	mov	r3, #2
   196e4:	ldr	sl, [sp, #32]
   196e8:	mov	r8, fp
   196ec:	str	r3, [sp, #152]	; 0x98
   196f0:	b	18e68 <__assert_fail@plt+0x74c8>
   196f4:	ldr	r3, [sp, #156]	; 0x9c
   196f8:	tst	r3, #1
   196fc:	bne	19828 <__assert_fail@plt+0x7e88>
   19700:	ldr	r3, [sp, #152]	; 0x98
   19704:	ldr	r4, [sp, #44]	; 0x2c
   19708:	sub	r2, r3, #2
   1970c:	mov	r5, #0
   19710:	clz	r2, r2
   19714:	mov	r8, r4
   19718:	lsr	r2, r2, #5
   1971c:	b	18c28 <__assert_fail@plt+0x7288>
   19720:	ldr	r3, [sp, #156]	; 0x9c
   19724:	ands	r9, r3, #4
   19728:	beq	19860 <__assert_fail@plt+0x7ec0>
   1972c:	ldr	r2, [sp, #24]
   19730:	add	r3, sl, #2
   19734:	cmp	r3, r2
   19738:	bcs	1974c <__assert_fail@plt+0x7dac>
   1973c:	ldr	r2, [sp, #48]	; 0x30
   19740:	ldrb	r4, [r2, #1]
   19744:	cmp	r4, #63	; 0x3f
   19748:	beq	199e8 <__assert_fail@plt+0x8048>
   1974c:	mov	r2, #0
   19750:	mov	r8, r2
   19754:	mov	r5, r2
   19758:	mov	r4, #63	; 0x3f
   1975c:	b	18c28 <__assert_fail@plt+0x7288>
   19760:	ldr	r3, [sp, #28]
   19764:	cmp	r3, #0
   19768:	bne	19a8c <__assert_fail@plt+0x80ec>
   1976c:	mov	r2, r5
   19770:	mov	r8, r3
   19774:	mov	r5, #0
   19778:	mov	r4, #63	; 0x3f
   1977c:	b	18c28 <__assert_fail@plt+0x7288>
   19780:	ldr	r3, [sp, #28]
   19784:	cmp	r3, #0
   19788:	bne	19a8c <__assert_fail@plt+0x80ec>
   1978c:	ldr	r2, [sp, #72]	; 0x48
   19790:	adds	r3, fp, #0
   19794:	movne	r3, #1
   19798:	cmp	r2, #0
   1979c:	movne	r3, #0
   197a0:	cmp	r3, #0
   197a4:	strne	fp, [sp, #72]	; 0x48
   197a8:	movne	fp, #0
   197ac:	bne	197e8 <__assert_fail@plt+0x7e48>
   197b0:	cmp	fp, r7
   197b4:	movhi	r2, #39	; 0x27
   197b8:	ldrhi	r3, [sp, #32]
   197bc:	strbhi	r2, [r3, r7]
   197c0:	add	r3, r7, #1
   197c4:	cmp	fp, r3
   197c8:	movhi	r1, #92	; 0x5c
   197cc:	ldrhi	r2, [sp, #32]
   197d0:	strbhi	r1, [r2, r3]
   197d4:	add	r3, r7, #2
   197d8:	cmp	fp, r3
   197dc:	movhi	r1, #39	; 0x27
   197e0:	ldrhi	r2, [sp, #32]
   197e4:	strbhi	r1, [r2, r3]
   197e8:	ldr	r3, [sp, #28]
   197ec:	add	r7, r7, #3
   197f0:	mov	r2, r5
   197f4:	mov	r8, r3
   197f8:	str	r5, [sp, #68]	; 0x44
   197fc:	str	r3, [sp, #40]	; 0x28
   19800:	mov	r4, #39	; 0x27
   19804:	b	18c28 <__assert_fail@plt+0x7288>
   19808:	ldr	r3, [sp, #56]	; 0x38
   1980c:	ldrb	r3, [r3, #1]
   19810:	adds	r3, r3, #0
   19814:	movne	r3, #1
   19818:	b	18c00 <__assert_fail@plt+0x7260>
   1981c:	ldr	r5, [sp, #28]
   19820:	mov	r4, #48	; 0x30
   19824:	b	18c28 <__assert_fail@plt+0x7288>
   19828:	add	sl, sl, #1
   1982c:	b	18758 <__assert_fail@plt+0x6db8>
   19830:	mov	sl, r3
   19834:	ldr	r3, [sp, #28]
   19838:	mov	r8, fp
   1983c:	str	r3, [sp, #44]	; 0x2c
   19840:	ldr	r3, [sp, #152]	; 0x98
   19844:	sub	r2, r3, #2
   19848:	clz	r2, r2
   1984c:	lsr	r2, r2, #5
   19850:	b	18e68 <__assert_fail@plt+0x74c8>
   19854:	str	ip, [sp, #40]	; 0x28
   19858:	ldr	r5, [sp, #48]	; 0x30
   1985c:	b	18c98 <__assert_fail@plt+0x72f8>
   19860:	mov	r2, r9
   19864:	mov	r8, r9
   19868:	mov	r5, #0
   1986c:	mov	r4, #63	; 0x3f
   19870:	b	18c28 <__assert_fail@plt+0x7288>
   19874:	cmp	fp, #0
   19878:	beq	198f0 <__assert_fail@plt+0x7f50>
   1987c:	ldr	r1, [sp, #32]
   19880:	mov	r3, #34	; 0x22
   19884:	mov	r2, #1
   19888:	strb	r3, [r1]
   1988c:	ldr	r3, [pc, #332]	; 199e0 <__assert_fail@plt+0x8040>
   19890:	str	r2, [sp, #52]	; 0x34
   19894:	mov	r7, r2
   19898:	str	r2, [sp, #44]	; 0x2c
   1989c:	str	r3, [sp, #64]	; 0x40
   198a0:	b	18748 <__assert_fail@plt+0x6da8>
   198a4:	ldr	r3, [pc, #300]	; 199d8 <__assert_fail@plt+0x8038>
   198a8:	str	r3, [sp, #64]	; 0x40
   198ac:	mov	r3, #0
   198b0:	str	r3, [sp, #28]
   198b4:	mov	r3, #1
   198b8:	str	r3, [sp, #52]	; 0x34
   198bc:	mov	r7, r3
   198c0:	mov	r3, #2
   198c4:	str	r3, [sp, #152]	; 0x98
   198c8:	b	18748 <__assert_fail@plt+0x6da8>
   198cc:	bl	11964 <abort@plt>
   198d0:	ldr	r0, [sp, #56]	; 0x38
   198d4:	bl	117a8 <strlen@plt>
   198d8:	str	r0, [sp, #24]
   198dc:	b	195b4 <__assert_fail@plt+0x7c14>
   198e0:	mov	r5, r8
   198e4:	mov	r4, #48	; 0x30
   198e8:	ldr	r8, [sp, #44]	; 0x2c
   198ec:	b	18c28 <__assert_fail@plt+0x7288>
   198f0:	mov	r3, #1
   198f4:	str	r3, [sp, #52]	; 0x34
   198f8:	mov	r7, r3
   198fc:	str	r3, [sp, #44]	; 0x2c
   19900:	ldr	r3, [pc, #216]	; 199e0 <__assert_fail@plt+0x8040>
   19904:	str	r3, [sp, #64]	; 0x40
   19908:	b	18748 <__assert_fail@plt+0x6da8>
   1990c:	ldr	sl, [sp, #32]
   19910:	mov	r8, fp
   19914:	mov	r2, r3
   19918:	b	18e68 <__assert_fail@plt+0x74c8>
   1991c:	mov	r3, r5
   19920:	mov	r5, r2
   19924:	b	19120 <__assert_fail@plt+0x7780>
   19928:	ldr	r1, [sp, #24]
   1992c:	mov	r2, r5
   19930:	cmp	r1, r9
   19934:	mov	ip, r5
   19938:	ldr	r4, [sp, #80]	; 0x50
   1993c:	ldr	r5, [sp, #92]	; 0x5c
   19940:	ldr	r6, [sp, #84]	; 0x54
   19944:	ldr	r7, [sp, #88]	; 0x58
   19948:	bls	1997c <__assert_fail@plt+0x7fdc>
   1994c:	ldrb	r3, [r8]
   19950:	cmp	r3, #0
   19954:	bne	19968 <__assert_fail@plt+0x7fc8>
   19958:	b	19980 <__assert_fail@plt+0x7fe0>
   1995c:	ldrb	r3, [r8, #1]!
   19960:	cmp	r3, #0
   19964:	beq	19a80 <__assert_fail@plt+0x80e0>
   19968:	add	r2, r2, #1
   1996c:	add	r3, sl, r2
   19970:	cmp	r1, r3
   19974:	bhi	1995c <__assert_fail@plt+0x7fbc>
   19978:	mov	ip, r2
   1997c:	mov	r3, #0
   19980:	mov	r2, r3
   19984:	b	19418 <__assert_fail@plt+0x7a78>
   19988:	mov	r3, #0
   1998c:	mov	ip, r5
   19990:	ldr	r4, [sp, #80]	; 0x50
   19994:	ldr	r5, [sp, #92]	; 0x5c
   19998:	ldr	r6, [sp, #84]	; 0x54
   1999c:	ldr	r7, [sp, #88]	; 0x58
   199a0:	mov	r2, r3
   199a4:	b	19418 <__assert_fail@plt+0x7a78>
   199a8:	mov	r3, r6
   199ac:	mov	ip, r5
   199b0:	eor	r5, r3, #1
   199b4:	mov	r2, r6
   199b8:	ldr	r4, [sp, #80]	; 0x50
   199bc:	ldr	r6, [sp, #84]	; 0x54
   199c0:	ldr	r7, [sp, #88]	; 0x58
   199c4:	uxtb	r5, r5
   199c8:	b	19418 <__assert_fail@plt+0x7a78>
   199cc:	ldr	sl, [sp, #32]
   199d0:	mov	r8, fp
   199d4:	b	1983c <__assert_fail@plt+0x7e9c>
   199d8:	andeq	ip, r2, r0, lsl #20
   199dc:	andeq	ip, r2, r4, lsl #20
   199e0:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   199e4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   199e8:	ldr	r2, [sp, #56]	; 0x38
   199ec:	ldrb	r1, [r2, r3]
   199f0:	sub	r2, r1, #33	; 0x21
   199f4:	uxtb	r2, r2
   199f8:	cmp	r2, #29
   199fc:	bhi	19a9c <__assert_fail@plt+0x80fc>
   19a00:	ldr	r0, [pc, #-36]	; 199e4 <__assert_fail@plt+0x8044>
   19a04:	mov	ip, #1
   19a08:	ands	r2, r0, ip, lsl r2
   19a0c:	beq	19aac <__assert_fail@plt+0x810c>
   19a10:	ldr	r2, [sp, #28]
   19a14:	cmp	r2, #0
   19a18:	bne	19bac <__assert_fail@plt+0x820c>
   19a1c:	cmp	fp, r7
   19a20:	ldr	r8, [sp, #28]
   19a24:	ldrhi	r2, [sp, #32]
   19a28:	mov	sl, r3
   19a2c:	mov	r5, r8
   19a30:	strbhi	r4, [r2, r7]
   19a34:	add	r2, r7, #1
   19a38:	cmp	fp, r2
   19a3c:	movhi	r0, #34	; 0x22
   19a40:	ldrhi	ip, [sp, #32]
   19a44:	mov	r4, r1
   19a48:	strbhi	r0, [ip, r2]
   19a4c:	add	r2, r7, #2
   19a50:	cmp	fp, r2
   19a54:	movhi	r0, #34	; 0x22
   19a58:	ldrhi	ip, [sp, #32]
   19a5c:	strbhi	r0, [ip, r2]
   19a60:	add	r2, r7, #3
   19a64:	cmp	fp, r2
   19a68:	movhi	r0, #63	; 0x3f
   19a6c:	ldrhi	ip, [sp, #32]
   19a70:	add	r7, r7, #4
   19a74:	strbhi	r0, [ip, r2]
   19a78:	mov	r2, r8
   19a7c:	b	18c28 <__assert_fail@plt+0x7288>
   19a80:	mov	ip, r2
   19a84:	mov	r2, r3
   19a88:	b	19418 <__assert_fail@plt+0x7a78>
   19a8c:	ldr	sl, [sp, #32]
   19a90:	mov	r8, fp
   19a94:	ldr	r2, [sp, #28]
   19a98:	b	18e68 <__assert_fail@plt+0x74c8>
   19a9c:	mov	r2, #0
   19aa0:	mov	r8, r2
   19aa4:	mov	r5, r2
   19aa8:	b	18c28 <__assert_fail@plt+0x7288>
   19aac:	mov	r8, r2
   19ab0:	mov	r5, #0
   19ab4:	b	18c28 <__assert_fail@plt+0x7288>
   19ab8:	ldr	r1, [sp, #152]	; 0x98
   19abc:	bl	18584 <__assert_fail@plt+0x6be4>
   19ac0:	str	r0, [sp, #168]	; 0xa8
   19ac4:	b	18ae4 <__assert_fail@plt+0x7144>
   19ac8:	ldr	r1, [sp, #152]	; 0x98
   19acc:	bl	18584 <__assert_fail@plt+0x6be4>
   19ad0:	str	r0, [sp, #164]	; 0xa4
   19ad4:	b	18ac4 <__assert_fail@plt+0x7124>
   19ad8:	ldr	r7, [sp, #28]
   19adc:	b	18b24 <__assert_fail@plt+0x7184>
   19ae0:	ldr	sl, [sp, #32]
   19ae4:	ldr	r2, [sp, #68]	; 0x44
   19ae8:	mov	r8, fp
   19aec:	mov	fp, r7
   19af0:	ldr	r3, [sp, #64]	; 0x40
   19af4:	cmp	r3, #0
   19af8:	moveq	r2, #0
   19afc:	andne	r2, r2, #1
   19b00:	cmp	r2, #0
   19b04:	beq	19b30 <__assert_fail@plt+0x8190>
   19b08:	mov	r2, r3
   19b0c:	ldrb	r3, [r3]
   19b10:	cmp	r3, #0
   19b14:	beq	19b30 <__assert_fail@plt+0x8190>
   19b18:	cmp	r8, fp
   19b1c:	strbhi	r3, [sl, fp]
   19b20:	ldrb	r3, [r2, #1]!
   19b24:	add	fp, fp, #1
   19b28:	cmp	r3, #0
   19b2c:	bne	19b18 <__assert_fail@plt+0x8178>
   19b30:	cmp	r8, fp
   19b34:	movhi	r3, #0
   19b38:	strbhi	r3, [sl, fp]
   19b3c:	b	18ec4 <__assert_fail@plt+0x7524>
   19b40:	ldr	r3, [sp, #168]	; 0xa8
   19b44:	ldr	sl, [sp, #32]
   19b48:	str	r3, [sp, #16]
   19b4c:	ldr	r3, [sp, #164]	; 0xa4
   19b50:	mov	ip, #5
   19b54:	str	r3, [sp, #12]
   19b58:	ldr	r3, [sp, #160]	; 0xa0
   19b5c:	ldr	r2, [sp, #56]	; 0x38
   19b60:	str	r3, [sp, #8]
   19b64:	ldr	r3, [sp, #156]	; 0x9c
   19b68:	ldr	r1, [sp, #72]	; 0x48
   19b6c:	str	r3, [sp, #4]
   19b70:	mov	r0, sl
   19b74:	ldr	r3, [sp, #24]
   19b78:	str	ip, [sp]
   19b7c:	bl	186a4 <__assert_fail@plt+0x6d04>
   19b80:	mov	fp, r0
   19b84:	b	18ec4 <__assert_fail@plt+0x7524>
   19b88:	mov	r8, fp
   19b8c:	ldr	sl, [sp, #32]
   19b90:	mov	fp, r7
   19b94:	mov	r2, r3
   19b98:	b	19af0 <__assert_fail@plt+0x8150>
   19b9c:	mov	r8, fp
   19ba0:	ldr	sl, [sp, #32]
   19ba4:	mov	fp, r7
   19ba8:	b	19af0 <__assert_fail@plt+0x8150>
   19bac:	ldr	sl, [sp, #32]
   19bb0:	mov	r8, fp
   19bb4:	b	18e80 <__assert_fail@plt+0x74e0>
   19bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bbc:	sub	sp, sp, #52	; 0x34
   19bc0:	mov	r4, r0
   19bc4:	mov	r5, r3
   19bc8:	mov	sl, r1
   19bcc:	mov	fp, r2
   19bd0:	bl	117d8 <__errno_location@plt>
   19bd4:	ldr	r7, [pc, #412]	; 19d78 <__assert_fail@plt+0x83d8>
   19bd8:	cmn	r4, #-2147483647	; 0x80000001
   19bdc:	ldr	r6, [r7]
   19be0:	mov	r8, r0
   19be4:	movne	r0, #0
   19be8:	moveq	r0, #1
   19bec:	ldr	r3, [r8]
   19bf0:	orrs	r0, r0, r4, lsr #31
   19bf4:	str	r3, [sp, #24]
   19bf8:	bne	19d74 <__assert_fail@plt+0x83d4>
   19bfc:	ldr	r2, [r7, #4]
   19c00:	cmp	r4, r2
   19c04:	blt	19c64 <__assert_fail@plt+0x82c4>
   19c08:	add	r9, r7, #8
   19c0c:	cmp	r6, r9
   19c10:	str	r2, [sp, #44]	; 0x2c
   19c14:	beq	19d44 <__assert_fail@plt+0x83a4>
   19c18:	mov	r3, #8
   19c1c:	sub	r2, r4, r2
   19c20:	mov	r0, r6
   19c24:	str	r3, [sp]
   19c28:	add	r2, r2, #1
   19c2c:	mvn	r3, #-2147483648	; 0x80000000
   19c30:	add	r1, sp, #44	; 0x2c
   19c34:	bl	1a9fc <__assert_fail@plt+0x905c>
   19c38:	mov	r6, r0
   19c3c:	str	r0, [r7]
   19c40:	ldr	r0, [r7, #4]
   19c44:	ldr	r2, [sp, #44]	; 0x2c
   19c48:	mov	r1, #0
   19c4c:	sub	r2, r2, r0
   19c50:	add	r0, r6, r0, lsl #3
   19c54:	lsl	r2, r2, #3
   19c58:	bl	11814 <memset@plt>
   19c5c:	ldr	r3, [sp, #44]	; 0x2c
   19c60:	str	r3, [r7, #4]
   19c64:	add	r3, r6, r4, lsl #3
   19c68:	ldr	r1, [r5, #4]
   19c6c:	ldr	r7, [r3, #4]
   19c70:	ldr	r9, [r6, r4, lsl #3]
   19c74:	ldr	r2, [r5, #40]	; 0x28
   19c78:	ldr	ip, [r5, #44]	; 0x2c
   19c7c:	add	r0, r5, #8
   19c80:	str	r3, [sp, #28]
   19c84:	ldr	r3, [r5]
   19c88:	orr	r1, r1, #1
   19c8c:	mov	lr, r0
   19c90:	str	r1, [sp, #32]
   19c94:	str	r0, [sp, #36]	; 0x24
   19c98:	str	r1, [sp, #4]
   19c9c:	str	r2, [sp, #12]
   19ca0:	str	r3, [sp]
   19ca4:	mov	r0, r7
   19ca8:	mov	r1, r9
   19cac:	str	ip, [sp, #16]
   19cb0:	str	lr, [sp, #8]
   19cb4:	mov	r3, fp
   19cb8:	mov	r2, sl
   19cbc:	bl	186a4 <__assert_fail@plt+0x6d04>
   19cc0:	cmp	r9, r0
   19cc4:	bhi	19d30 <__assert_fail@plt+0x8390>
   19cc8:	ldr	r3, [pc, #172]	; 19d7c <__assert_fail@plt+0x83dc>
   19ccc:	add	r9, r0, #1
   19cd0:	cmp	r7, r3
   19cd4:	str	r9, [r6, r4, lsl #3]
   19cd8:	beq	19ce4 <__assert_fail@plt+0x8344>
   19cdc:	mov	r0, r7
   19ce0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   19ce4:	mov	r0, r9
   19ce8:	bl	1a898 <__assert_fail@plt+0x8ef8>
   19cec:	ldr	lr, [sp, #28]
   19cf0:	ldr	ip, [r5, #44]	; 0x2c
   19cf4:	ldr	r4, [r5, #40]	; 0x28
   19cf8:	mov	r3, fp
   19cfc:	mov	r2, sl
   19d00:	mov	r1, r9
   19d04:	str	r0, [lr, #4]
   19d08:	ldr	lr, [r5]
   19d0c:	ldr	r5, [sp, #36]	; 0x24
   19d10:	str	ip, [sp, #16]
   19d14:	str	r5, [sp, #8]
   19d18:	ldr	r5, [sp, #32]
   19d1c:	str	r4, [sp, #12]
   19d20:	str	r5, [sp, #4]
   19d24:	str	lr, [sp]
   19d28:	mov	r7, r0
   19d2c:	bl	186a4 <__assert_fail@plt+0x6d04>
   19d30:	ldr	r3, [sp, #24]
   19d34:	mov	r0, r7
   19d38:	str	r3, [r8]
   19d3c:	add	sp, sp, #52	; 0x34
   19d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d44:	mov	r3, #8
   19d48:	sub	r2, r4, r2
   19d4c:	str	r3, [sp]
   19d50:	add	r1, sp, #44	; 0x2c
   19d54:	add	r2, r2, #1
   19d58:	mvn	r3, #-2147483648	; 0x80000000
   19d5c:	bl	1a9fc <__assert_fail@plt+0x905c>
   19d60:	mov	r6, r0
   19d64:	ldm	r9, {r0, r1}
   19d68:	str	r6, [r7]
   19d6c:	stm	r6, {r0, r1}
   19d70:	b	19c40 <__assert_fail@plt+0x82a0>
   19d74:	bl	11964 <abort@plt>
   19d78:	andeq	lr, r3, r0, asr #3
   19d7c:	andeq	lr, r3, r4, lsr #5
   19d80:	push	{r4, r5, r6, lr}
   19d84:	mov	r5, r0
   19d88:	bl	117d8 <__errno_location@plt>
   19d8c:	cmp	r5, #0
   19d90:	mov	r1, #48	; 0x30
   19d94:	mov	r4, r0
   19d98:	ldr	r0, [pc, #16]	; 19db0 <__assert_fail@plt+0x8410>
   19d9c:	ldr	r6, [r4]
   19da0:	movne	r0, r5
   19da4:	bl	1acf8 <__assert_fail@plt+0x9358>
   19da8:	str	r6, [r4]
   19dac:	pop	{r4, r5, r6, pc}
   19db0:	andeq	lr, r3, r4, lsr #7
   19db4:	ldr	r3, [pc, #12]	; 19dc8 <__assert_fail@plt+0x8428>
   19db8:	cmp	r0, #0
   19dbc:	moveq	r0, r3
   19dc0:	ldr	r0, [r0]
   19dc4:	bx	lr
   19dc8:	andeq	lr, r3, r4, lsr #7
   19dcc:	ldr	r3, [pc, #12]	; 19de0 <__assert_fail@plt+0x8440>
   19dd0:	cmp	r0, #0
   19dd4:	moveq	r0, r3
   19dd8:	str	r1, [r0]
   19ddc:	bx	lr
   19de0:	andeq	lr, r3, r4, lsr #7
   19de4:	ldr	r3, [pc, #52]	; 19e20 <__assert_fail@plt+0x8480>
   19de8:	cmp	r0, #0
   19dec:	moveq	r0, r3
   19df0:	add	r3, r0, #8
   19df4:	push	{lr}		; (str lr, [sp, #-4]!)
   19df8:	lsr	lr, r1, #5
   19dfc:	and	r1, r1, #31
   19e00:	ldr	ip, [r3, lr, lsl #2]
   19e04:	lsr	r0, ip, r1
   19e08:	eor	r2, r2, r0
   19e0c:	and	r2, r2, #1
   19e10:	and	r0, r0, #1
   19e14:	eor	r1, ip, r2, lsl r1
   19e18:	str	r1, [r3, lr, lsl #2]
   19e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   19e20:	andeq	lr, r3, r4, lsr #7
   19e24:	ldr	r3, [pc, #16]	; 19e3c <__assert_fail@plt+0x849c>
   19e28:	cmp	r0, #0
   19e2c:	movne	r3, r0
   19e30:	ldr	r0, [r3, #4]
   19e34:	str	r1, [r3, #4]
   19e38:	bx	lr
   19e3c:	andeq	lr, r3, r4, lsr #7
   19e40:	ldr	r3, [pc, #44]	; 19e74 <__assert_fail@plt+0x84d4>
   19e44:	cmp	r0, #0
   19e48:	moveq	r0, r3
   19e4c:	mov	ip, #10
   19e50:	cmp	r2, #0
   19e54:	cmpne	r1, #0
   19e58:	str	ip, [r0]
   19e5c:	beq	19e6c <__assert_fail@plt+0x84cc>
   19e60:	str	r1, [r0, #40]	; 0x28
   19e64:	str	r2, [r0, #44]	; 0x2c
   19e68:	bx	lr
   19e6c:	push	{r4, lr}
   19e70:	bl	11964 <abort@plt>
   19e74:	andeq	lr, r3, r4, lsr #7
   19e78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e7c:	sub	sp, sp, #24
   19e80:	ldr	ip, [pc, #108]	; 19ef4 <__assert_fail@plt+0x8554>
   19e84:	ldr	r4, [sp, #56]	; 0x38
   19e88:	mov	r9, r2
   19e8c:	cmp	r4, #0
   19e90:	moveq	r4, ip
   19e94:	mov	sl, r3
   19e98:	mov	r7, r0
   19e9c:	mov	r8, r1
   19ea0:	bl	117d8 <__errno_location@plt>
   19ea4:	ldr	r3, [r4, #44]	; 0x2c
   19ea8:	mov	r1, r8
   19eac:	ldr	r6, [r0]
   19eb0:	str	r3, [sp, #16]
   19eb4:	ldr	r2, [r4, #40]	; 0x28
   19eb8:	add	r3, r4, #8
   19ebc:	str	r3, [sp, #8]
   19ec0:	str	r2, [sp, #12]
   19ec4:	ldr	r2, [r4, #4]
   19ec8:	mov	r5, r0
   19ecc:	str	r2, [sp, #4]
   19ed0:	ldr	ip, [r4]
   19ed4:	mov	r3, sl
   19ed8:	mov	r2, r9
   19edc:	mov	r0, r7
   19ee0:	str	ip, [sp]
   19ee4:	bl	186a4 <__assert_fail@plt+0x6d04>
   19ee8:	str	r6, [r5]
   19eec:	add	sp, sp, #24
   19ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ef4:	andeq	lr, r3, r4, lsr #7
   19ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19efc:	cmp	r3, #0
   19f00:	sub	sp, sp, #44	; 0x2c
   19f04:	ldr	r4, [pc, #192]	; 19fcc <__assert_fail@plt+0x862c>
   19f08:	mov	r6, r2
   19f0c:	movne	r4, r3
   19f10:	mov	r9, r1
   19f14:	mov	r8, r0
   19f18:	bl	117d8 <__errno_location@plt>
   19f1c:	ldr	r3, [r4, #44]	; 0x2c
   19f20:	ldr	r5, [r4, #4]
   19f24:	add	sl, r4, #8
   19f28:	cmp	r6, #0
   19f2c:	orreq	r5, r5, #1
   19f30:	mov	r1, #0
   19f34:	ldr	r2, [r0]
   19f38:	str	r3, [sp, #16]
   19f3c:	ldr	r3, [r4, #40]	; 0x28
   19f40:	stmib	sp, {r5, sl}
   19f44:	str	r3, [sp, #12]
   19f48:	ldr	r3, [r4]
   19f4c:	mov	r7, r0
   19f50:	str	r2, [sp, #28]
   19f54:	str	r3, [sp]
   19f58:	mov	r2, r8
   19f5c:	mov	r3, r9
   19f60:	mov	r0, r1
   19f64:	bl	186a4 <__assert_fail@plt+0x6d04>
   19f68:	add	r1, r0, #1
   19f6c:	mov	fp, r0
   19f70:	mov	r0, r1
   19f74:	str	r1, [sp, #36]	; 0x24
   19f78:	bl	1a898 <__assert_fail@plt+0x8ef8>
   19f7c:	ldr	r3, [r4, #44]	; 0x2c
   19f80:	mov	r2, r8
   19f84:	str	r3, [sp, #16]
   19f88:	ldr	r3, [r4, #40]	; 0x28
   19f8c:	str	r5, [sp, #4]
   19f90:	str	r3, [sp, #12]
   19f94:	str	sl, [sp, #8]
   19f98:	ldr	ip, [r4]
   19f9c:	ldr	r1, [sp, #36]	; 0x24
   19fa0:	mov	r3, r9
   19fa4:	str	ip, [sp]
   19fa8:	str	r0, [sp, #32]
   19fac:	bl	186a4 <__assert_fail@plt+0x6d04>
   19fb0:	ldr	r2, [sp, #28]
   19fb4:	cmp	r6, #0
   19fb8:	str	r2, [r7]
   19fbc:	ldr	r0, [sp, #32]
   19fc0:	strne	fp, [r6]
   19fc4:	add	sp, sp, #44	; 0x2c
   19fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fcc:	andeq	lr, r3, r4, lsr #7
   19fd0:	mov	r3, r2
   19fd4:	mov	r2, #0
   19fd8:	b	19ef8 <__assert_fail@plt+0x8558>
   19fdc:	push	{r4, r5, r6, r7, r8, lr}
   19fe0:	ldr	r6, [pc, #116]	; 1a05c <__assert_fail@plt+0x86bc>
   19fe4:	ldr	r3, [r6, #4]
   19fe8:	ldr	r7, [r6]
   19fec:	cmp	r3, #1
   19ff0:	movgt	r5, r7
   19ff4:	movgt	r4, #1
   19ff8:	ble	1a018 <__assert_fail@plt+0x8678>
   19ffc:	ldr	r0, [r5, #12]
   1a000:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1a004:	ldr	r3, [r6, #4]
   1a008:	add	r4, r4, #1
   1a00c:	cmp	r3, r4
   1a010:	add	r5, r5, #8
   1a014:	bgt	19ffc <__assert_fail@plt+0x865c>
   1a018:	ldr	r0, [r7, #4]
   1a01c:	ldr	r4, [pc, #60]	; 1a060 <__assert_fail@plt+0x86c0>
   1a020:	cmp	r0, r4
   1a024:	beq	1a038 <__assert_fail@plt+0x8698>
   1a028:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1a02c:	mov	r3, #256	; 0x100
   1a030:	str	r4, [r6, #12]
   1a034:	str	r3, [r6, #8]
   1a038:	ldr	r4, [pc, #36]	; 1a064 <__assert_fail@plt+0x86c4>
   1a03c:	cmp	r7, r4
   1a040:	beq	1a050 <__assert_fail@plt+0x86b0>
   1a044:	mov	r0, r7
   1a048:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1a04c:	str	r4, [r6]
   1a050:	mov	r3, #1
   1a054:	str	r3, [r6, #4]
   1a058:	pop	{r4, r5, r6, r7, r8, pc}
   1a05c:	andeq	lr, r3, r0, asr #3
   1a060:	andeq	lr, r3, r4, lsr #5
   1a064:	andeq	lr, r3, r8, asr #3
   1a068:	ldr	r3, [pc, #4]	; 1a074 <__assert_fail@plt+0x86d4>
   1a06c:	mvn	r2, #0
   1a070:	b	19bb8 <__assert_fail@plt+0x8218>
   1a074:	andeq	lr, r3, r4, lsr #7
   1a078:	ldr	r3, [pc]	; 1a080 <__assert_fail@plt+0x86e0>
   1a07c:	b	19bb8 <__assert_fail@plt+0x8218>
   1a080:	andeq	lr, r3, r4, lsr #7
   1a084:	mov	r1, r0
   1a088:	ldr	r3, [pc, #8]	; 1a098 <__assert_fail@plt+0x86f8>
   1a08c:	mvn	r2, #0
   1a090:	mov	r0, #0
   1a094:	b	19bb8 <__assert_fail@plt+0x8218>
   1a098:	andeq	lr, r3, r4, lsr #7
   1a09c:	mov	r2, r1
   1a0a0:	ldr	r3, [pc, #8]	; 1a0b0 <__assert_fail@plt+0x8710>
   1a0a4:	mov	r1, r0
   1a0a8:	mov	r0, #0
   1a0ac:	b	19bb8 <__assert_fail@plt+0x8218>
   1a0b0:	andeq	lr, r3, r4, lsr #7
   1a0b4:	push	{r4, r5, lr}
   1a0b8:	sub	sp, sp, #52	; 0x34
   1a0bc:	mov	r5, r2
   1a0c0:	mov	r4, r0
   1a0c4:	mov	r0, sp
   1a0c8:	bl	18554 <__assert_fail@plt+0x6bb4>
   1a0cc:	mov	r3, sp
   1a0d0:	mov	r1, r5
   1a0d4:	mov	r0, r4
   1a0d8:	mvn	r2, #0
   1a0dc:	bl	19bb8 <__assert_fail@plt+0x8218>
   1a0e0:	add	sp, sp, #52	; 0x34
   1a0e4:	pop	{r4, r5, pc}
   1a0e8:	push	{r4, r5, r6, lr}
   1a0ec:	sub	sp, sp, #48	; 0x30
   1a0f0:	mov	r5, r2
   1a0f4:	mov	r6, r3
   1a0f8:	mov	r4, r0
   1a0fc:	mov	r0, sp
   1a100:	bl	18554 <__assert_fail@plt+0x6bb4>
   1a104:	mov	r3, sp
   1a108:	mov	r2, r6
   1a10c:	mov	r1, r5
   1a110:	mov	r0, r4
   1a114:	bl	19bb8 <__assert_fail@plt+0x8218>
   1a118:	add	sp, sp, #48	; 0x30
   1a11c:	pop	{r4, r5, r6, pc}
   1a120:	mov	r2, r1
   1a124:	mov	r1, r0
   1a128:	mov	r0, #0
   1a12c:	b	1a0b4 <__assert_fail@plt+0x8714>
   1a130:	mov	r3, r2
   1a134:	mov	r2, r1
   1a138:	mov	r1, r0
   1a13c:	mov	r0, #0
   1a140:	b	1a0e8 <__assert_fail@plt+0x8748>
   1a144:	push	{r4, r5, r6, r7, r8, lr}
   1a148:	mov	r7, r0
   1a14c:	ldr	lr, [pc, #100]	; 1a1b8 <__assert_fail@plt+0x8818>
   1a150:	mov	r8, r1
   1a154:	mov	r4, r2
   1a158:	ldm	lr!, {r0, r1, r2, r3}
   1a15c:	sub	sp, sp, #48	; 0x30
   1a160:	mov	ip, sp
   1a164:	lsr	r5, r4, #5
   1a168:	stmia	ip!, {r0, r1, r2, r3}
   1a16c:	add	r6, sp, #8
   1a170:	ldm	lr!, {r0, r1, r2, r3}
   1a174:	and	r4, r4, #31
   1a178:	stmia	ip!, {r0, r1, r2, r3}
   1a17c:	ldm	lr, {r0, r1, r2, r3}
   1a180:	stm	ip, {r0, r1, r2, r3}
   1a184:	mov	r2, r8
   1a188:	ldr	lr, [r6, r5, lsl #2]
   1a18c:	mov	r1, r7
   1a190:	mov	r3, sp
   1a194:	lsr	ip, lr, r4
   1a198:	eor	ip, ip, #1
   1a19c:	and	ip, ip, #1
   1a1a0:	mov	r0, #0
   1a1a4:	eor	r4, lr, ip, lsl r4
   1a1a8:	str	r4, [r6, r5, lsl #2]
   1a1ac:	bl	19bb8 <__assert_fail@plt+0x8218>
   1a1b0:	add	sp, sp, #48	; 0x30
   1a1b4:	pop	{r4, r5, r6, r7, r8, pc}
   1a1b8:	andeq	lr, r3, r4, lsr #7
   1a1bc:	mov	r2, r1
   1a1c0:	mvn	r1, #0
   1a1c4:	b	1a144 <__assert_fail@plt+0x87a4>
   1a1c8:	mov	r2, #58	; 0x3a
   1a1cc:	mvn	r1, #0
   1a1d0:	b	1a144 <__assert_fail@plt+0x87a4>
   1a1d4:	mov	r2, #58	; 0x3a
   1a1d8:	b	1a144 <__assert_fail@plt+0x87a4>
   1a1dc:	push	{r4, r5, r6, r7, lr}
   1a1e0:	sub	sp, sp, #100	; 0x64
   1a1e4:	mov	r6, r0
   1a1e8:	mov	r0, sp
   1a1ec:	mov	r7, r2
   1a1f0:	bl	18554 <__assert_fail@plt+0x6bb4>
   1a1f4:	mov	ip, sp
   1a1f8:	add	lr, sp, #48	; 0x30
   1a1fc:	ldm	ip!, {r0, r1, r2, r3}
   1a200:	stmia	lr!, {r0, r1, r2, r3}
   1a204:	ldm	ip!, {r0, r1, r2, r3}
   1a208:	ldr	r5, [sp, #60]	; 0x3c
   1a20c:	stmia	lr!, {r0, r1, r2, r3}
   1a210:	mvn	r4, r5
   1a214:	ldm	ip, {r0, r1, r2, r3}
   1a218:	and	ip, r4, #67108864	; 0x4000000
   1a21c:	eor	ip, ip, r5
   1a220:	str	ip, [sp, #60]	; 0x3c
   1a224:	stm	lr, {r0, r1, r2, r3}
   1a228:	mov	r1, r7
   1a22c:	mov	r0, r6
   1a230:	add	r3, sp, #48	; 0x30
   1a234:	mvn	r2, #0
   1a238:	bl	19bb8 <__assert_fail@plt+0x8218>
   1a23c:	add	sp, sp, #100	; 0x64
   1a240:	pop	{r4, r5, r6, r7, pc}
   1a244:	push	{r4, r5, r6, r7, r8, lr}
   1a248:	mov	r5, r1
   1a24c:	ldr	lr, [pc, #100]	; 1a2b8 <__assert_fail@plt+0x8918>
   1a250:	mov	r4, r2
   1a254:	mov	r7, r0
   1a258:	mov	r8, r3
   1a25c:	ldm	lr!, {r0, r1, r2, r3}
   1a260:	sub	sp, sp, #48	; 0x30
   1a264:	mov	ip, sp
   1a268:	mov	r6, #10
   1a26c:	stmia	ip!, {r0, r1, r2, r3}
   1a270:	cmp	r4, #0
   1a274:	cmpne	r5, #0
   1a278:	ldm	lr!, {r0, r1, r2, r3}
   1a27c:	str	r6, [sp]
   1a280:	stmia	ip!, {r0, r1, r2, r3}
   1a284:	ldm	lr, {r0, r1, r2, r3}
   1a288:	stm	ip, {r0, r1, r2, r3}
   1a28c:	beq	1a2b4 <__assert_fail@plt+0x8914>
   1a290:	mov	r3, sp
   1a294:	mov	r1, r8
   1a298:	mov	r0, r7
   1a29c:	ldr	r2, [sp, #72]	; 0x48
   1a2a0:	str	r5, [sp, #40]	; 0x28
   1a2a4:	str	r4, [sp, #44]	; 0x2c
   1a2a8:	bl	19bb8 <__assert_fail@plt+0x8218>
   1a2ac:	add	sp, sp, #48	; 0x30
   1a2b0:	pop	{r4, r5, r6, r7, r8, pc}
   1a2b4:	bl	11964 <abort@plt>
   1a2b8:	andeq	lr, r3, r4, lsr #7
   1a2bc:	push	{lr}		; (str lr, [sp, #-4]!)
   1a2c0:	sub	sp, sp, #12
   1a2c4:	mvn	ip, #0
   1a2c8:	str	ip, [sp]
   1a2cc:	bl	1a244 <__assert_fail@plt+0x88a4>
   1a2d0:	add	sp, sp, #12
   1a2d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2d8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a2dc:	sub	sp, sp, #12
   1a2e0:	mvn	ip, #0
   1a2e4:	mov	r3, r2
   1a2e8:	str	ip, [sp]
   1a2ec:	mov	r2, r1
   1a2f0:	mov	r1, r0
   1a2f4:	mov	r0, #0
   1a2f8:	bl	1a244 <__assert_fail@plt+0x88a4>
   1a2fc:	add	sp, sp, #12
   1a300:	pop	{pc}		; (ldr pc, [sp], #4)
   1a304:	push	{lr}		; (str lr, [sp, #-4]!)
   1a308:	sub	sp, sp, #12
   1a30c:	str	r3, [sp]
   1a310:	mov	r3, r2
   1a314:	mov	r2, r1
   1a318:	mov	r1, r0
   1a31c:	mov	r0, #0
   1a320:	bl	1a244 <__assert_fail@plt+0x88a4>
   1a324:	add	sp, sp, #12
   1a328:	pop	{pc}		; (ldr pc, [sp], #4)
   1a32c:	ldr	r3, [pc]	; 1a334 <__assert_fail@plt+0x8994>
   1a330:	b	19bb8 <__assert_fail@plt+0x8218>
   1a334:	ldrdeq	lr, [r3], -r0
   1a338:	mov	r2, r1
   1a33c:	ldr	r3, [pc, #8]	; 1a34c <__assert_fail@plt+0x89ac>
   1a340:	mov	r1, r0
   1a344:	mov	r0, #0
   1a348:	b	19bb8 <__assert_fail@plt+0x8218>
   1a34c:	ldrdeq	lr, [r3], -r0
   1a350:	ldr	r3, [pc, #4]	; 1a35c <__assert_fail@plt+0x89bc>
   1a354:	mvn	r2, #0
   1a358:	b	19bb8 <__assert_fail@plt+0x8218>
   1a35c:	ldrdeq	lr, [r3], -r0
   1a360:	mov	r1, r0
   1a364:	ldr	r3, [pc, #8]	; 1a374 <__assert_fail@plt+0x89d4>
   1a368:	mvn	r2, #0
   1a36c:	mov	r0, #0
   1a370:	b	19bb8 <__assert_fail@plt+0x8218>
   1a374:	ldrdeq	lr, [r3], -r0
   1a378:	push	{r4, r5, r6, lr}
   1a37c:	mov	r2, r1
   1a380:	mov	r4, r1
   1a384:	mov	r1, #0
   1a388:	mov	r5, r0
   1a38c:	bl	1185c <memchr@plt>
   1a390:	cmp	r0, #0
   1a394:	subne	r0, r0, r5
   1a398:	addne	r0, r0, #1
   1a39c:	moveq	r0, r4
   1a3a0:	pop	{r4, r5, r6, pc}
   1a3a4:	cmp	r0, #2
   1a3a8:	push	{r4, r5, r6, r7, r8, lr}
   1a3ac:	mov	r4, r0
   1a3b0:	bhi	1a3d8 <__assert_fail@plt+0x8a38>
   1a3b4:	bl	2acb0 <__assert_fail@plt+0x19310>
   1a3b8:	mov	r7, r0
   1a3bc:	bl	117d8 <__errno_location@plt>
   1a3c0:	mov	r5, r0
   1a3c4:	mov	r0, r4
   1a3c8:	ldr	r6, [r5]
   1a3cc:	mov	r4, r7
   1a3d0:	bl	1197c <close@plt>
   1a3d4:	str	r6, [r5]
   1a3d8:	mov	r0, r4
   1a3dc:	pop	{r4, r5, r6, r7, r8, pc}
   1a3e0:	push	{r4, r5, r6, lr}
   1a3e4:	sub	sp, sp, #32
   1a3e8:	cmp	r1, #0
   1a3ec:	mov	r4, r0
   1a3f0:	ldr	r5, [sp, #48]	; 0x30
   1a3f4:	ldr	r6, [sp, #52]	; 0x34
   1a3f8:	beq	1a6a4 <__assert_fail@plt+0x8d04>
   1a3fc:	str	r3, [sp]
   1a400:	mov	r3, r2
   1a404:	mov	r2, r1
   1a408:	ldr	r1, [pc, #684]	; 1a6bc <__assert_fail@plt+0x8d1c>
   1a40c:	bl	117c0 <fprintf@plt>
   1a410:	mov	r2, #5
   1a414:	ldr	r1, [pc, #676]	; 1a6c0 <__assert_fail@plt+0x8d20>
   1a418:	mov	r0, #0
   1a41c:	bl	11628 <dcgettext@plt>
   1a420:	ldr	r3, [pc, #668]	; 1a6c4 <__assert_fail@plt+0x8d24>
   1a424:	ldr	r1, [pc, #668]	; 1a6c8 <__assert_fail@plt+0x8d28>
   1a428:	mov	r2, r0
   1a42c:	mov	r0, r4
   1a430:	bl	117c0 <fprintf@plt>
   1a434:	mov	r1, r4
   1a438:	mov	r0, #10
   1a43c:	bl	118bc <fputc@plt>
   1a440:	mov	r2, #5
   1a444:	ldr	r1, [pc, #640]	; 1a6cc <__assert_fail@plt+0x8d2c>
   1a448:	mov	r0, #0
   1a44c:	bl	11628 <dcgettext@plt>
   1a450:	ldr	r2, [pc, #632]	; 1a6d0 <__assert_fail@plt+0x8d30>
   1a454:	mov	r1, r0
   1a458:	mov	r0, r4
   1a45c:	bl	117c0 <fprintf@plt>
   1a460:	mov	r1, r4
   1a464:	mov	r0, #10
   1a468:	bl	118bc <fputc@plt>
   1a46c:	cmp	r6, #9
   1a470:	ldrls	pc, [pc, r6, lsl #2]
   1a474:	b	1a6b0 <__assert_fail@plt+0x8d10>
   1a478:	andeq	sl, r1, ip, ror #9
   1a47c:	strdeq	sl, [r1], -r4
   1a480:	andeq	sl, r1, ip, lsl r5
   1a484:	andeq	sl, r1, r4, asr #10
   1a488:	andeq	sl, r1, r4, ror r5
   1a48c:	andeq	sl, r1, ip, lsr #11
   1a490:	ldrdeq	sl, [r1], -ip
   1a494:	andeq	sl, r1, r4, lsl r6
   1a498:	andeq	sl, r1, r8, asr r6
   1a49c:	andeq	sl, r1, r0, lsr #9
   1a4a0:	ldr	r1, [pc, #556]	; 1a6d4 <__assert_fail@plt+0x8d34>
   1a4a4:	mov	r2, #5
   1a4a8:	mov	r0, #0
   1a4ac:	bl	11628 <dcgettext@plt>
   1a4b0:	add	r1, r5, #24
   1a4b4:	ldm	r5, {r2, r3}
   1a4b8:	ldm	r1, {r1, ip, lr}
   1a4bc:	str	lr, [sp, #24]
   1a4c0:	ldr	r6, [r5, #20]
   1a4c4:	str	ip, [sp, #20]
   1a4c8:	ldr	lr, [r5, #16]
   1a4cc:	str	r1, [sp, #16]
   1a4d0:	ldr	r1, [r5, #8]
   1a4d4:	ldr	ip, [r5, #12]
   1a4d8:	str	r6, [sp, #12]
   1a4dc:	stm	sp, {r1, ip, lr}
   1a4e0:	mov	r1, r0
   1a4e4:	mov	r0, r4
   1a4e8:	bl	117c0 <fprintf@plt>
   1a4ec:	add	sp, sp, #32
   1a4f0:	pop	{r4, r5, r6, pc}
   1a4f4:	mov	r2, #5
   1a4f8:	ldr	r1, [pc, #472]	; 1a6d8 <__assert_fail@plt+0x8d38>
   1a4fc:	mov	r0, #0
   1a500:	bl	11628 <dcgettext@plt>
   1a504:	ldr	r2, [r5]
   1a508:	mov	r1, r0
   1a50c:	mov	r0, r4
   1a510:	add	sp, sp, #32
   1a514:	pop	{r4, r5, r6, lr}
   1a518:	b	117c0 <fprintf@plt>
   1a51c:	mov	r2, #5
   1a520:	ldr	r1, [pc, #436]	; 1a6dc <__assert_fail@plt+0x8d3c>
   1a524:	mov	r0, #0
   1a528:	bl	11628 <dcgettext@plt>
   1a52c:	ldm	r5, {r2, r3}
   1a530:	mov	r1, r0
   1a534:	mov	r0, r4
   1a538:	add	sp, sp, #32
   1a53c:	pop	{r4, r5, r6, lr}
   1a540:	b	117c0 <fprintf@plt>
   1a544:	mov	r2, #5
   1a548:	ldr	r1, [pc, #400]	; 1a6e0 <__assert_fail@plt+0x8d40>
   1a54c:	mov	r0, #0
   1a550:	bl	11628 <dcgettext@plt>
   1a554:	ldr	r1, [r5, #8]
   1a558:	ldm	r5, {r2, r3}
   1a55c:	str	r1, [sp, #48]	; 0x30
   1a560:	mov	r1, r0
   1a564:	mov	r0, r4
   1a568:	add	sp, sp, #32
   1a56c:	pop	{r4, r5, r6, lr}
   1a570:	b	117c0 <fprintf@plt>
   1a574:	mov	r2, #5
   1a578:	ldr	r1, [pc, #356]	; 1a6e4 <__assert_fail@plt+0x8d44>
   1a57c:	mov	r0, #0
   1a580:	bl	11628 <dcgettext@plt>
   1a584:	ldr	r1, [r5, #8]
   1a588:	ldr	ip, [r5, #12]
   1a58c:	ldm	r5, {r2, r3}
   1a590:	str	r1, [sp, #48]	; 0x30
   1a594:	str	ip, [sp, #52]	; 0x34
   1a598:	mov	r1, r0
   1a59c:	mov	r0, r4
   1a5a0:	add	sp, sp, #32
   1a5a4:	pop	{r4, r5, r6, lr}
   1a5a8:	b	117c0 <fprintf@plt>
   1a5ac:	mov	r2, #5
   1a5b0:	ldr	r1, [pc, #304]	; 1a6e8 <__assert_fail@plt+0x8d48>
   1a5b4:	mov	r0, #0
   1a5b8:	bl	11628 <dcgettext@plt>
   1a5bc:	add	r1, r5, #8
   1a5c0:	ldm	r5, {r2, r3}
   1a5c4:	ldm	r1, {r1, ip, lr}
   1a5c8:	stm	sp, {r1, ip, lr}
   1a5cc:	mov	r1, r0
   1a5d0:	mov	r0, r4
   1a5d4:	bl	117c0 <fprintf@plt>
   1a5d8:	b	1a4ec <__assert_fail@plt+0x8b4c>
   1a5dc:	mov	r2, #5
   1a5e0:	ldr	r1, [pc, #260]	; 1a6ec <__assert_fail@plt+0x8d4c>
   1a5e4:	mov	r0, #0
   1a5e8:	bl	11628 <dcgettext@plt>
   1a5ec:	add	r1, r5, #8
   1a5f0:	ldr	r6, [r5, #20]
   1a5f4:	ldm	r1, {r1, ip, lr}
   1a5f8:	ldm	r5, {r2, r3}
   1a5fc:	str	r6, [sp, #12]
   1a600:	stm	sp, {r1, ip, lr}
   1a604:	mov	r1, r0
   1a608:	mov	r0, r4
   1a60c:	bl	117c0 <fprintf@plt>
   1a610:	b	1a4ec <__assert_fail@plt+0x8b4c>
   1a614:	mov	r2, #5
   1a618:	ldr	r1, [pc, #208]	; 1a6f0 <__assert_fail@plt+0x8d50>
   1a61c:	mov	r0, #0
   1a620:	bl	11628 <dcgettext@plt>
   1a624:	ldr	r1, [r5, #24]
   1a628:	ldm	r5, {r2, r3}
   1a62c:	ldr	r6, [r5, #20]
   1a630:	ldr	lr, [r5, #16]
   1a634:	str	r1, [sp, #16]
   1a638:	ldr	r1, [r5, #8]
   1a63c:	ldr	ip, [r5, #12]
   1a640:	str	r6, [sp, #12]
   1a644:	stm	sp, {r1, ip, lr}
   1a648:	mov	r1, r0
   1a64c:	mov	r0, r4
   1a650:	bl	117c0 <fprintf@plt>
   1a654:	b	1a4ec <__assert_fail@plt+0x8b4c>
   1a658:	mov	r2, #5
   1a65c:	ldr	r1, [pc, #144]	; 1a6f4 <__assert_fail@plt+0x8d54>
   1a660:	mov	r0, #0
   1a664:	bl	11628 <dcgettext@plt>
   1a668:	ldr	ip, [r5, #28]
   1a66c:	ldr	r1, [r5, #24]
   1a670:	ldm	r5, {r2, r3}
   1a674:	ldr	r6, [r5, #20]
   1a678:	str	ip, [sp, #20]
   1a67c:	ldr	lr, [r5, #16]
   1a680:	str	r1, [sp, #16]
   1a684:	ldr	r1, [r5, #8]
   1a688:	ldr	ip, [r5, #12]
   1a68c:	str	r6, [sp, #12]
   1a690:	stm	sp, {r1, ip, lr}
   1a694:	mov	r1, r0
   1a698:	mov	r0, r4
   1a69c:	bl	117c0 <fprintf@plt>
   1a6a0:	b	1a4ec <__assert_fail@plt+0x8b4c>
   1a6a4:	ldr	r1, [pc, #76]	; 1a6f8 <__assert_fail@plt+0x8d58>
   1a6a8:	bl	117c0 <fprintf@plt>
   1a6ac:	b	1a410 <__assert_fail@plt+0x8a70>
   1a6b0:	mov	r2, #5
   1a6b4:	ldr	r1, [pc, #64]	; 1a6fc <__assert_fail@plt+0x8d5c>
   1a6b8:	b	1a4a8 <__assert_fail@plt+0x8b08>
   1a6bc:	andeq	ip, r2, ip, ror #20
   1a6c0:	andeq	ip, r2, r0, lsl #21
   1a6c4:	andeq	r0, r0, r6, ror #15
   1a6c8:	andeq	ip, r2, r0, asr #26
   1a6cc:	andeq	ip, r2, r4, lsl #21
   1a6d0:	andeq	ip, r2, r0, lsr fp
   1a6d4:	andeq	ip, r2, r0, ror #24
   1a6d8:	andeq	ip, r2, r4, asr fp
   1a6dc:	andeq	ip, r2, r4, ror #22
   1a6e0:	andeq	ip, r2, ip, ror fp
   1a6e4:	muleq	r2, r8, fp
   1a6e8:			; <UNDEFINED> instruction: 0x0002cbb8
   1a6ec:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1a6f0:	andeq	ip, r2, r4, lsl #24
   1a6f4:	andeq	ip, r2, r0, lsr ip
   1a6f8:	andeq	ip, r2, r8, ror sl
   1a6fc:	muleq	r2, r4, ip
   1a700:	push	{r4, r5, lr}
   1a704:	sub	sp, sp, #12
   1a708:	ldr	r5, [sp, #24]
   1a70c:	ldr	ip, [r5]
   1a710:	cmp	ip, #0
   1a714:	beq	1a730 <__assert_fail@plt+0x8d90>
   1a718:	mov	lr, r5
   1a71c:	mov	ip, #0
   1a720:	ldr	r4, [lr, #4]!
   1a724:	add	ip, ip, #1
   1a728:	cmp	r4, #0
   1a72c:	bne	1a720 <__assert_fail@plt+0x8d80>
   1a730:	stm	sp, {r5, ip}
   1a734:	bl	1a3e0 <__assert_fail@plt+0x8a40>
   1a738:	add	sp, sp, #12
   1a73c:	pop	{r4, r5, pc}
   1a740:	push	{r4, r5, lr}
   1a744:	sub	sp, sp, #52	; 0x34
   1a748:	add	r5, sp, #4
   1a74c:	ldr	r4, [sp, #64]	; 0x40
   1a750:	mov	ip, #0
   1a754:	sub	r4, r4, #4
   1a758:	ldr	lr, [r4, #4]!
   1a75c:	cmp	lr, #0
   1a760:	str	lr, [r5, #4]!
   1a764:	beq	1a774 <__assert_fail@plt+0x8dd4>
   1a768:	add	ip, ip, #1
   1a76c:	cmp	ip, #10
   1a770:	bne	1a758 <__assert_fail@plt+0x8db8>
   1a774:	add	lr, sp, #8
   1a778:	str	ip, [sp, #4]
   1a77c:	str	lr, [sp]
   1a780:	bl	1a3e0 <__assert_fail@plt+0x8a40>
   1a784:	add	sp, sp, #52	; 0x34
   1a788:	pop	{r4, r5, pc}
   1a78c:	push	{r3}		; (str r3, [sp, #-4]!)
   1a790:	push	{r4, lr}
   1a794:	sub	sp, sp, #60	; 0x3c
   1a798:	add	lr, sp, #56	; 0x38
   1a79c:	add	r3, sp, #72	; 0x48
   1a7a0:	str	r3, [lr, #-44]!	; 0xffffffd4
   1a7a4:	add	r4, sp, #68	; 0x44
   1a7a8:	mov	r3, #0
   1a7ac:	ldr	ip, [r4, #4]!
   1a7b0:	cmp	ip, #0
   1a7b4:	str	ip, [lr, #4]!
   1a7b8:	beq	1a7c8 <__assert_fail@plt+0x8e28>
   1a7bc:	add	r3, r3, #1
   1a7c0:	cmp	r3, #10
   1a7c4:	bne	1a7ac <__assert_fail@plt+0x8e0c>
   1a7c8:	add	ip, sp, #16
   1a7cc:	str	r3, [sp, #4]
   1a7d0:	str	ip, [sp]
   1a7d4:	ldr	r3, [sp, #68]	; 0x44
   1a7d8:	bl	1a3e0 <__assert_fail@plt+0x8a40>
   1a7dc:	add	sp, sp, #60	; 0x3c
   1a7e0:	pop	{r4, lr}
   1a7e4:	add	sp, sp, #4
   1a7e8:	bx	lr
   1a7ec:	ldr	r3, [pc, #92]	; 1a850 <__assert_fail@plt+0x8eb0>
   1a7f0:	push	{r4, lr}
   1a7f4:	mov	r0, #10
   1a7f8:	ldr	r1, [r3]
   1a7fc:	bl	118bc <fputc@plt>
   1a800:	mov	r2, #5
   1a804:	ldr	r1, [pc, #72]	; 1a854 <__assert_fail@plt+0x8eb4>
   1a808:	mov	r0, #0
   1a80c:	bl	11628 <dcgettext@plt>
   1a810:	ldr	r1, [pc, #64]	; 1a858 <__assert_fail@plt+0x8eb8>
   1a814:	bl	11550 <printf@plt>
   1a818:	mov	r2, #5
   1a81c:	ldr	r1, [pc, #56]	; 1a85c <__assert_fail@plt+0x8ebc>
   1a820:	mov	r0, #0
   1a824:	bl	11628 <dcgettext@plt>
   1a828:	ldr	r2, [pc, #48]	; 1a860 <__assert_fail@plt+0x8ec0>
   1a82c:	ldr	r1, [pc, #48]	; 1a864 <__assert_fail@plt+0x8ec4>
   1a830:	bl	11550 <printf@plt>
   1a834:	ldr	r1, [pc, #44]	; 1a868 <__assert_fail@plt+0x8ec8>
   1a838:	mov	r2, #5
   1a83c:	mov	r0, #0
   1a840:	bl	11628 <dcgettext@plt>
   1a844:	ldr	r1, [pc, #32]	; 1a86c <__assert_fail@plt+0x8ecc>
   1a848:	pop	{r4, lr}
   1a84c:	b	11550 <printf@plt>
   1a850:	andeq	lr, r3, ip, lsl r2
   1a854:	ldrdeq	ip, [r2], -r0
   1a858:	andeq	ip, r2, r8, ror #15
   1a85c:	andeq	ip, r2, r4, ror #25
   1a860:	andeq	ip, r2, r0, asr #15
   1a864:	andeq	ip, r2, r8, ror r5
   1a868:	strdeq	ip, [r2], -r8
   1a86c:	andeq	ip, r2, r0, lsr #26
   1a870:	push	{r4, lr}
   1a874:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1a878:	cmp	r0, #0
   1a87c:	popne	{r4, pc}
   1a880:	bl	1adb8 <__assert_fail@plt+0x9418>
   1a884:	push	{r4, lr}
   1a888:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1a88c:	cmp	r0, #0
   1a890:	popne	{r4, pc}
   1a894:	bl	1adb8 <__assert_fail@plt+0x9418>
   1a898:	push	{r4, lr}
   1a89c:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1a8a0:	cmp	r0, #0
   1a8a4:	popne	{r4, pc}
   1a8a8:	bl	1adb8 <__assert_fail@plt+0x9418>
   1a8ac:	push	{r4, r5, r6, lr}
   1a8b0:	mov	r5, r0
   1a8b4:	mov	r4, r1
   1a8b8:	bl	1babc <__assert_fail@plt+0xa11c>
   1a8bc:	cmp	r0, #0
   1a8c0:	popne	{r4, r5, r6, pc}
   1a8c4:	adds	r4, r4, #0
   1a8c8:	movne	r4, #1
   1a8cc:	cmp	r5, #0
   1a8d0:	orreq	r4, r4, #1
   1a8d4:	cmp	r4, #0
   1a8d8:	popeq	{r4, r5, r6, pc}
   1a8dc:	bl	1adb8 <__assert_fail@plt+0x9418>
   1a8e0:	push	{r4, lr}
   1a8e4:	cmp	r1, #0
   1a8e8:	orreq	r1, r1, #1
   1a8ec:	bl	1babc <__assert_fail@plt+0xa11c>
   1a8f0:	cmp	r0, #0
   1a8f4:	popne	{r4, pc}
   1a8f8:	bl	1adb8 <__assert_fail@plt+0x9418>
   1a8fc:	push	{r4, r5, r6, lr}
   1a900:	mov	r6, r0
   1a904:	mov	r5, r1
   1a908:	mov	r4, r2
   1a90c:	bl	1bb18 <__assert_fail@plt+0xa178>
   1a910:	cmp	r0, #0
   1a914:	popne	{r4, r5, r6, pc}
   1a918:	cmp	r6, #0
   1a91c:	beq	1a92c <__assert_fail@plt+0x8f8c>
   1a920:	cmp	r5, #0
   1a924:	cmpne	r4, #0
   1a928:	popeq	{r4, r5, r6, pc}
   1a92c:	bl	1adb8 <__assert_fail@plt+0x9418>
   1a930:	b	1a8fc <__assert_fail@plt+0x8f5c>
   1a934:	cmp	r2, #0
   1a938:	cmpne	r1, #0
   1a93c:	moveq	r2, #1
   1a940:	moveq	r1, r2
   1a944:	push	{r4, lr}
   1a948:	bl	1bb18 <__assert_fail@plt+0xa178>
   1a94c:	cmp	r0, #0
   1a950:	popne	{r4, pc}
   1a954:	bl	1adb8 <__assert_fail@plt+0x9418>
   1a958:	mov	r2, r1
   1a95c:	mov	r1, r0
   1a960:	mov	r0, #0
   1a964:	b	1a8fc <__assert_fail@plt+0x8f5c>
   1a968:	mov	r2, r1
   1a96c:	mov	r1, r0
   1a970:	mov	r0, #0
   1a974:	b	1a934 <__assert_fail@plt+0x8f94>
   1a978:	push	{r4, r5, r6, lr}
   1a97c:	subs	r6, r0, #0
   1a980:	sub	sp, sp, #8
   1a984:	mov	r5, r1
   1a988:	ldr	r4, [r1]
   1a98c:	beq	1a9c8 <__assert_fail@plt+0x9028>
   1a990:	lsr	r1, r4, #1
   1a994:	add	r3, r1, #1
   1a998:	mvn	r3, r3
   1a99c:	cmp	r4, r3
   1a9a0:	bhi	1a9c4 <__assert_fail@plt+0x9024>
   1a9a4:	add	r4, r4, #1
   1a9a8:	add	r4, r4, r1
   1a9ac:	mov	r0, r6
   1a9b0:	mov	r1, r4
   1a9b4:	bl	1a8fc <__assert_fail@plt+0x8f5c>
   1a9b8:	str	r4, [r5]
   1a9bc:	add	sp, sp, #8
   1a9c0:	pop	{r4, r5, r6, pc}
   1a9c4:	bl	1adb8 <__assert_fail@plt+0x9418>
   1a9c8:	cmp	r4, #0
   1a9cc:	bne	1a9ac <__assert_fail@plt+0x900c>
   1a9d0:	mov	r1, r2
   1a9d4:	mov	r0, #64	; 0x40
   1a9d8:	str	r2, [sp, #4]
   1a9dc:	bl	2acbc <__assert_fail@plt+0x1931c>
   1a9e0:	ldr	r2, [sp, #4]
   1a9e4:	cmp	r0, #0
   1a9e8:	movne	r4, r0
   1a9ec:	addeq	r4, r0, #1
   1a9f0:	b	1a9ac <__assert_fail@plt+0x900c>
   1a9f4:	mov	r2, #1
   1a9f8:	b	1a978 <__assert_fail@plt+0x8fd8>
   1a9fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa00:	sub	sp, sp, #12
   1aa04:	ldr	r6, [r1]
   1aa08:	mov	sl, r1
   1aa0c:	mov	r9, r0
   1aa10:	asrs	r4, r6, #1
   1aa14:	mov	r5, r2
   1aa18:	mov	fp, r3
   1aa1c:	ldr	r7, [sp, #48]	; 0x30
   1aa20:	bmi	1ab8c <__assert_fail@plt+0x91ec>
   1aa24:	mvn	r3, #-2147483648	; 0x80000000
   1aa28:	sub	r3, r3, r4
   1aa2c:	cmp	r6, r3
   1aa30:	movle	r3, #0
   1aa34:	movgt	r3, #1
   1aa38:	mvn	r8, fp
   1aa3c:	cmp	r3, #0
   1aa40:	addeq	r4, r4, r6
   1aa44:	mvnne	r4, #-2147483648	; 0x80000000
   1aa48:	lsr	r8, r8, #31
   1aa4c:	cmp	fp, r4
   1aa50:	movge	r3, #0
   1aa54:	andlt	r3, r8, #1
   1aa58:	cmp	r3, #0
   1aa5c:	beq	1ab44 <__assert_fail@plt+0x91a4>
   1aa60:	cmp	r7, #0
   1aa64:	blt	1ac14 <__assert_fail@plt+0x9274>
   1aa68:	bne	1ac0c <__assert_fail@plt+0x926c>
   1aa6c:	mov	r2, #64	; 0x40
   1aa70:	mov	r1, r7
   1aa74:	mov	r0, r2
   1aa78:	str	r2, [sp, #4]
   1aa7c:	bl	2aec8 <__assert_fail@plt+0x19528>
   1aa80:	ldr	r2, [sp, #4]
   1aa84:	mov	r1, r7
   1aa88:	mov	r4, r0
   1aa8c:	mov	r0, r2
   1aa90:	bl	2b0e8 <__assert_fail@plt+0x19748>
   1aa94:	ldr	r2, [sp, #4]
   1aa98:	sub	r1, r2, r1
   1aa9c:	cmp	r9, #0
   1aaa0:	sub	r3, r4, r6
   1aaa4:	streq	r9, [sl]
   1aaa8:	cmp	r3, r5
   1aaac:	bge	1ab30 <__assert_fail@plt+0x9190>
   1aab0:	cmp	r5, #0
   1aab4:	blt	1aba0 <__assert_fail@plt+0x9200>
   1aab8:	cmp	r6, #0
   1aabc:	blt	1aadc <__assert_fail@plt+0x913c>
   1aac0:	mvn	r3, #-2147483648	; 0x80000000
   1aac4:	sub	r3, r3, r5
   1aac8:	cmp	r6, r3
   1aacc:	movle	r3, #0
   1aad0:	movgt	r3, #1
   1aad4:	cmp	r3, #0
   1aad8:	bne	1ac9c <__assert_fail@plt+0x92fc>
   1aadc:	add	r5, r6, r5
   1aae0:	cmp	fp, r5
   1aae4:	movge	r8, #0
   1aae8:	andlt	r8, r8, #1
   1aaec:	cmp	r8, #0
   1aaf0:	mov	r4, r5
   1aaf4:	bne	1ac9c <__assert_fail@plt+0x92fc>
   1aaf8:	cmp	r7, #0
   1aafc:	blt	1abb4 <__assert_fail@plt+0x9214>
   1ab00:	beq	1ab2c <__assert_fail@plt+0x918c>
   1ab04:	cmp	r5, #0
   1ab08:	blt	1ac5c <__assert_fail@plt+0x92bc>
   1ab0c:	mov	r1, r7
   1ab10:	mvn	r0, #-2147483648	; 0x80000000
   1ab14:	bl	2aec8 <__assert_fail@plt+0x19528>
   1ab18:	cmp	r5, r0
   1ab1c:	movle	r0, #0
   1ab20:	movgt	r0, #1
   1ab24:	cmp	r0, #0
   1ab28:	bne	1ac9c <__assert_fail@plt+0x92fc>
   1ab2c:	mul	r1, r5, r7
   1ab30:	mov	r0, r9
   1ab34:	bl	1a8ac <__assert_fail@plt+0x8f0c>
   1ab38:	str	r4, [sl]
   1ab3c:	add	sp, sp, #12
   1ab40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab44:	cmp	r7, #0
   1ab48:	blt	1abe0 <__assert_fail@plt+0x9240>
   1ab4c:	beq	1aa6c <__assert_fail@plt+0x90cc>
   1ab50:	cmp	r4, #0
   1ab54:	blt	1ac1c <__assert_fail@plt+0x927c>
   1ab58:	mov	r1, r7
   1ab5c:	mvn	r0, #-2147483648	; 0x80000000
   1ab60:	bl	2aec8 <__assert_fail@plt+0x19528>
   1ab64:	cmp	r0, r4
   1ab68:	movge	r0, #0
   1ab6c:	movlt	r0, #1
   1ab70:	cmp	r0, #0
   1ab74:	mvnne	r2, #-2147483648	; 0x80000000
   1ab78:	bne	1aa70 <__assert_fail@plt+0x90d0>
   1ab7c:	mul	r1, r7, r4
   1ab80:	cmp	r1, #63	; 0x3f
   1ab84:	bgt	1aa9c <__assert_fail@plt+0x90fc>
   1ab88:	b	1aa6c <__assert_fail@plt+0x90cc>
   1ab8c:	rsb	r3, r4, #-2147483648	; 0x80000000
   1ab90:	cmp	r6, r3
   1ab94:	movge	r3, #0
   1ab98:	movlt	r3, #1
   1ab9c:	b	1aa38 <__assert_fail@plt+0x9098>
   1aba0:	rsb	r3, r5, #-2147483648	; 0x80000000
   1aba4:	cmp	r6, r3
   1aba8:	movge	r3, #0
   1abac:	movlt	r3, #1
   1abb0:	b	1aad4 <__assert_fail@plt+0x9134>
   1abb4:	cmp	r5, #0
   1abb8:	blt	1ac40 <__assert_fail@plt+0x92a0>
   1abbc:	cmn	r7, #1
   1abc0:	beq	1ab2c <__assert_fail@plt+0x918c>
   1abc4:	mov	r1, r7
   1abc8:	mov	r0, #-2147483648	; 0x80000000
   1abcc:	bl	2aec8 <__assert_fail@plt+0x19528>
   1abd0:	cmp	r5, r0
   1abd4:	movle	r0, #0
   1abd8:	movgt	r0, #1
   1abdc:	b	1ab24 <__assert_fail@plt+0x9184>
   1abe0:	cmp	r4, #0
   1abe4:	blt	1ac80 <__assert_fail@plt+0x92e0>
   1abe8:	cmn	r7, #1
   1abec:	beq	1ab7c <__assert_fail@plt+0x91dc>
   1abf0:	mov	r1, r7
   1abf4:	mov	r0, #-2147483648	; 0x80000000
   1abf8:	bl	2aec8 <__assert_fail@plt+0x19528>
   1abfc:	cmp	r0, r4
   1ac00:	movge	r0, #0
   1ac04:	movlt	r0, #1
   1ac08:	b	1ab70 <__assert_fail@plt+0x91d0>
   1ac0c:	mov	r4, fp
   1ac10:	b	1ab58 <__assert_fail@plt+0x91b8>
   1ac14:	mov	r4, fp
   1ac18:	b	1abe8 <__assert_fail@plt+0x9248>
   1ac1c:	cmn	r4, #1
   1ac20:	beq	1ab7c <__assert_fail@plt+0x91dc>
   1ac24:	mov	r1, r4
   1ac28:	mov	r0, #-2147483648	; 0x80000000
   1ac2c:	bl	2aec8 <__assert_fail@plt+0x19528>
   1ac30:	cmp	r7, r0
   1ac34:	movle	r0, #0
   1ac38:	movgt	r0, #1
   1ac3c:	b	1ab70 <__assert_fail@plt+0x91d0>
   1ac40:	mov	r1, r7
   1ac44:	mvn	r0, #-2147483648	; 0x80000000
   1ac48:	bl	2aec8 <__assert_fail@plt+0x19528>
   1ac4c:	cmp	r5, r0
   1ac50:	movge	r0, #0
   1ac54:	movlt	r0, #1
   1ac58:	b	1ab24 <__assert_fail@plt+0x9184>
   1ac5c:	cmn	r5, #1
   1ac60:	beq	1ab2c <__assert_fail@plt+0x918c>
   1ac64:	mov	r1, r5
   1ac68:	mov	r0, #-2147483648	; 0x80000000
   1ac6c:	bl	2aec8 <__assert_fail@plt+0x19528>
   1ac70:	cmp	r7, r0
   1ac74:	movle	r0, #0
   1ac78:	movgt	r0, #1
   1ac7c:	b	1ab24 <__assert_fail@plt+0x9184>
   1ac80:	mov	r1, r7
   1ac84:	mvn	r0, #-2147483648	; 0x80000000
   1ac88:	bl	2aec8 <__assert_fail@plt+0x19528>
   1ac8c:	cmp	r0, r4
   1ac90:	movle	r0, #0
   1ac94:	movgt	r0, #1
   1ac98:	b	1ab70 <__assert_fail@plt+0x91d0>
   1ac9c:	bl	1adb8 <__assert_fail@plt+0x9418>
   1aca0:	push	{r4, lr}
   1aca4:	mov	r1, #1
   1aca8:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   1acac:	cmp	r0, #0
   1acb0:	popne	{r4, pc}
   1acb4:	bl	1adb8 <__assert_fail@plt+0x9418>
   1acb8:	push	{r4, lr}
   1acbc:	mov	r1, #1
   1acc0:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   1acc4:	cmp	r0, #0
   1acc8:	popne	{r4, pc}
   1accc:	bl	1adb8 <__assert_fail@plt+0x9418>
   1acd0:	push	{r4, lr}
   1acd4:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   1acd8:	cmp	r0, #0
   1acdc:	popne	{r4, pc}
   1ace0:	bl	1adb8 <__assert_fail@plt+0x9418>
   1ace4:	push	{r4, lr}
   1ace8:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   1acec:	cmp	r0, #0
   1acf0:	popne	{r4, pc}
   1acf4:	bl	1adb8 <__assert_fail@plt+0x9418>
   1acf8:	push	{r4, r5, r6, lr}
   1acfc:	mov	r6, r0
   1ad00:	mov	r0, r1
   1ad04:	mov	r4, r1
   1ad08:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1ad0c:	subs	r5, r0, #0
   1ad10:	beq	1ad28 <__assert_fail@plt+0x9388>
   1ad14:	mov	r2, r4
   1ad18:	mov	r1, r6
   1ad1c:	bl	115d4 <memcpy@plt>
   1ad20:	mov	r0, r5
   1ad24:	pop	{r4, r5, r6, pc}
   1ad28:	bl	1adb8 <__assert_fail@plt+0x9418>
   1ad2c:	push	{r4, r5, r6, lr}
   1ad30:	mov	r6, r0
   1ad34:	mov	r0, r1
   1ad38:	mov	r4, r1
   1ad3c:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1ad40:	subs	r5, r0, #0
   1ad44:	beq	1ad5c <__assert_fail@plt+0x93bc>
   1ad48:	mov	r2, r4
   1ad4c:	mov	r1, r6
   1ad50:	bl	115d4 <memcpy@plt>
   1ad54:	mov	r0, r5
   1ad58:	pop	{r4, r5, r6, pc}
   1ad5c:	bl	1adb8 <__assert_fail@plt+0x9418>
   1ad60:	push	{r4, r5, r6, lr}
   1ad64:	mov	r6, r0
   1ad68:	add	r0, r1, #1
   1ad6c:	mov	r4, r1
   1ad70:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1ad74:	subs	r5, r0, #0
   1ad78:	beq	1ad98 <__assert_fail@plt+0x93f8>
   1ad7c:	mov	r3, #0
   1ad80:	mov	r1, r6
   1ad84:	strb	r3, [r5, r4]
   1ad88:	mov	r2, r4
   1ad8c:	bl	115d4 <memcpy@plt>
   1ad90:	mov	r0, r5
   1ad94:	pop	{r4, r5, r6, pc}
   1ad98:	bl	1adb8 <__assert_fail@plt+0x9418>
   1ad9c:	push	{r4, lr}
   1ada0:	mov	r4, r0
   1ada4:	bl	117a8 <strlen@plt>
   1ada8:	add	r1, r0, #1
   1adac:	mov	r0, r4
   1adb0:	pop	{r4, lr}
   1adb4:	b	1acf8 <__assert_fail@plt+0x9358>
   1adb8:	ldr	r3, [pc, #44]	; 1adec <__assert_fail@plt+0x944c>
   1adbc:	push	{r4, lr}
   1adc0:	mov	r2, #5
   1adc4:	ldr	r1, [pc, #36]	; 1adf0 <__assert_fail@plt+0x9450>
   1adc8:	mov	r0, #0
   1adcc:	ldr	r4, [r3]
   1add0:	bl	11628 <dcgettext@plt>
   1add4:	ldr	r2, [pc, #24]	; 1adf4 <__assert_fail@plt+0x9454>
   1add8:	mov	r1, #0
   1addc:	mov	r3, r0
   1ade0:	mov	r0, r4
   1ade4:	bl	116d0 <error@plt>
   1ade8:	bl	11964 <abort@plt>
   1adec:			; <UNDEFINED> instruction: 0x0003e1bc
   1adf0:	andeq	ip, r2, r0, ror sp
   1adf4:	andeq	ip, r2, r0, asr #16
   1adf8:	ldr	ip, [pc, #148]	; 1ae94 <__assert_fail@plt+0x94f4>
   1adfc:	sub	r0, r0, #1
   1ae00:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae04:	sub	sp, sp, #20
   1ae08:	ldr	r5, [ip]
   1ae0c:	cmp	r0, #3
   1ae10:	ldrls	pc, [pc, r0, lsl #2]
   1ae14:	b	1ae80 <__assert_fail@plt+0x94e0>
   1ae18:	andeq	sl, r1, ip, lsl #29
   1ae1c:	andeq	sl, r1, r4, lsl #29
   1ae20:	andeq	sl, r1, r4, lsl #29
   1ae24:	andeq	sl, r1, r8, lsr #28
   1ae28:	ldr	r0, [pc, #104]	; 1ae98 <__assert_fail@plt+0x94f8>
   1ae2c:	cmp	r1, #0
   1ae30:	movlt	r3, #0
   1ae34:	ldrlt	r4, [pc, #96]	; 1ae9c <__assert_fail@plt+0x94fc>
   1ae38:	ldrge	r6, [r3, r1, lsl #4]
   1ae3c:	sublt	r4, r4, r1
   1ae40:	strblt	r2, [sp, #12]
   1ae44:	mov	r1, r0
   1ae48:	mov	r2, #5
   1ae4c:	mov	r0, #0
   1ae50:	strblt	r3, [sp, #13]
   1ae54:	addlt	r6, sp, #12
   1ae58:	ldrge	r4, [pc, #60]	; 1ae9c <__assert_fail@plt+0x94fc>
   1ae5c:	bl	11628 <dcgettext@plt>
   1ae60:	ldr	r3, [sp, #24]
   1ae64:	str	r6, [sp]
   1ae68:	str	r3, [sp, #4]
   1ae6c:	mov	r1, #0
   1ae70:	mov	r3, r4
   1ae74:	mov	r2, r0
   1ae78:	mov	r0, r5
   1ae7c:	bl	116d0 <error@plt>
   1ae80:	bl	11964 <abort@plt>
   1ae84:	ldr	r0, [pc, #20]	; 1aea0 <__assert_fail@plt+0x9500>
   1ae88:	b	1ae2c <__assert_fail@plt+0x948c>
   1ae8c:	ldr	r0, [pc, #16]	; 1aea4 <__assert_fail@plt+0x9504>
   1ae90:	b	1ae2c <__assert_fail@plt+0x948c>
   1ae94:			; <UNDEFINED> instruction: 0x0003e1bc
   1ae98:	andeq	ip, r2, r4, lsl #27
   1ae9c:	andeq	ip, r2, r8, ror #27
   1aea0:	andeq	ip, r2, r0, lsr #27
   1aea4:	andeq	ip, r2, r8, asr #27
   1aea8:	cmp	r2, #36	; 0x24
   1aeac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aeb0:	sub	sp, sp, #36	; 0x24
   1aeb4:	bhi	1b6a0 <__assert_fail@plt+0x9d00>
   1aeb8:	cmp	r1, #0
   1aebc:	mov	r9, r2
   1aec0:	mov	r7, r0
   1aec4:	mov	r5, r1
   1aec8:	mov	r6, r3
   1aecc:	addeq	r5, sp, #28
   1aed0:	bl	117d8 <__errno_location@plt>
   1aed4:	mov	r3, #0
   1aed8:	str	r3, [r0]
   1aedc:	mov	r8, r0
   1aee0:	bl	11778 <__ctype_b_loc@plt>
   1aee4:	ldrb	r3, [r7]
   1aee8:	mov	r2, r7
   1aeec:	ldr	r0, [r0]
   1aef0:	b	1aef8 <__assert_fail@plt+0x9558>
   1aef4:	ldrb	r3, [r2, #1]!
   1aef8:	lsl	r1, r3, #1
   1aefc:	ldrh	r4, [r0, r1]
   1af00:	ands	r4, r4, #8192	; 0x2000
   1af04:	bne	1aef4 <__assert_fail@plt+0x9554>
   1af08:	cmp	r3, #45	; 0x2d
   1af0c:	bne	1af20 <__assert_fail@plt+0x9580>
   1af10:	mov	r4, #4
   1af14:	mov	r0, r4
   1af18:	add	sp, sp, #36	; 0x24
   1af1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af20:	mov	r2, r9
   1af24:	mov	r3, r4
   1af28:	mov	r1, r5
   1af2c:	mov	r0, r7
   1af30:	bl	115ec <__strtoull_internal@plt>
   1af34:	ldr	r9, [r5]
   1af38:	cmp	r7, r9
   1af3c:	mov	sl, r0
   1af40:	mov	fp, r1
   1af44:	beq	1af8c <__assert_fail@plt+0x95ec>
   1af48:	ldr	r4, [r8]
   1af4c:	cmp	r4, #0
   1af50:	bne	1af7c <__assert_fail@plt+0x95dc>
   1af54:	ldr	r3, [sp, #72]	; 0x48
   1af58:	cmp	r3, #0
   1af5c:	beq	1af6c <__assert_fail@plt+0x95cc>
   1af60:	ldrb	r8, [r9]
   1af64:	cmp	r8, #0
   1af68:	bne	1afc0 <__assert_fail@plt+0x9620>
   1af6c:	mov	r0, r4
   1af70:	strd	sl, [r6]
   1af74:	add	sp, sp, #36	; 0x24
   1af78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af7c:	cmp	r4, #34	; 0x22
   1af80:	bne	1af10 <__assert_fail@plt+0x9570>
   1af84:	mov	r4, #1
   1af88:	b	1af54 <__assert_fail@plt+0x95b4>
   1af8c:	ldr	r3, [sp, #72]	; 0x48
   1af90:	cmp	r3, #0
   1af94:	beq	1af10 <__assert_fail@plt+0x9570>
   1af98:	ldrb	r8, [r9]
   1af9c:	cmp	r8, #0
   1afa0:	beq	1af10 <__assert_fail@plt+0x9570>
   1afa4:	mov	r1, r8
   1afa8:	mov	r0, r3
   1afac:	bl	117b4 <strchr@plt>
   1afb0:	cmp	r0, #0
   1afb4:	movne	sl, #1
   1afb8:	movne	fp, #0
   1afbc:	beq	1af10 <__assert_fail@plt+0x9570>
   1afc0:	mov	r1, r8
   1afc4:	ldr	r0, [sp, #72]	; 0x48
   1afc8:	bl	117b4 <strchr@plt>
   1afcc:	cmp	r0, #0
   1afd0:	beq	1b638 <__assert_fail@plt+0x9c98>
   1afd4:	sub	r3, r8, #69	; 0x45
   1afd8:	cmp	r3, #47	; 0x2f
   1afdc:	ldrls	pc, [pc, r3, lsl #2]
   1afe0:	b	1b0a4 <__assert_fail@plt+0x9704>
   1afe4:	muleq	r1, r8, r1
   1afe8:	andeq	fp, r1, r4, lsr #1
   1afec:	muleq	r1, r8, r1
   1aff0:	andeq	fp, r1, r4, lsr #1
   1aff4:	andeq	fp, r1, r4, lsr #1
   1aff8:	andeq	fp, r1, r4, lsr #1
   1affc:	muleq	r1, r8, r1
   1b000:	andeq	fp, r1, r4, lsr #1
   1b004:	muleq	r1, r8, r1
   1b008:	andeq	fp, r1, r4, lsr #1
   1b00c:	andeq	fp, r1, r4, lsr #1
   1b010:	muleq	r1, r8, r1
   1b014:	andeq	fp, r1, r4, lsr #1
   1b018:	andeq	fp, r1, r4, lsr #1
   1b01c:	andeq	fp, r1, r4, lsr #1
   1b020:	muleq	r1, r8, r1
   1b024:	andeq	fp, r1, r4, lsr #1
   1b028:	andeq	fp, r1, r4, lsr #1
   1b02c:	andeq	fp, r1, r4, lsr #1
   1b030:	andeq	fp, r1, r4, lsr #1
   1b034:	muleq	r1, r8, r1
   1b038:	muleq	r1, r8, r1
   1b03c:	andeq	fp, r1, r4, lsr #1
   1b040:	andeq	fp, r1, r4, lsr #1
   1b044:	andeq	fp, r1, r4, lsr #1
   1b048:	andeq	fp, r1, r4, lsr #1
   1b04c:	andeq	fp, r1, r4, lsr #1
   1b050:	andeq	fp, r1, r4, lsr #1
   1b054:	andeq	fp, r1, r4, lsr #1
   1b058:	andeq	fp, r1, r4, lsr #1
   1b05c:	andeq	fp, r1, r4, lsr #1
   1b060:	andeq	fp, r1, r4, lsr #1
   1b064:	andeq	fp, r1, r4, lsr #1
   1b068:	andeq	fp, r1, r4, lsr #1
   1b06c:	muleq	r1, r8, r1
   1b070:	andeq	fp, r1, r4, lsr #1
   1b074:	andeq	fp, r1, r4, lsr #1
   1b078:	andeq	fp, r1, r4, lsr #1
   1b07c:	muleq	r1, r8, r1
   1b080:	andeq	fp, r1, r4, lsr #1
   1b084:	muleq	r1, r8, r1
   1b088:	andeq	fp, r1, r4, lsr #1
   1b08c:	andeq	fp, r1, r4, lsr #1
   1b090:	andeq	fp, r1, r4, lsr #1
   1b094:	andeq	fp, r1, r4, lsr #1
   1b098:	andeq	fp, r1, r4, lsr #1
   1b09c:	andeq	fp, r1, r4, lsr #1
   1b0a0:	muleq	r1, r8, r1
   1b0a4:	mov	r7, #1024	; 0x400
   1b0a8:	mov	r3, #1
   1b0ac:	str	r3, [sp, #16]
   1b0b0:	sub	r8, r8, #66	; 0x42
   1b0b4:	cmp	r8, #53	; 0x35
   1b0b8:	ldrls	pc, [pc, r8, lsl #2]
   1b0bc:	b	1b638 <__assert_fail@plt+0x9c98>
   1b0c0:	andeq	fp, r1, r0, lsr #11
   1b0c4:	andeq	fp, r1, r8, lsr r6
   1b0c8:	andeq	fp, r1, r8, lsr r6
   1b0cc:	andeq	fp, r1, r8, lsl r5
   1b0d0:	andeq	fp, r1, r8, lsr r6
   1b0d4:	andeq	fp, r1, ip, lsl #8
   1b0d8:	andeq	fp, r1, r8, lsr r6
   1b0dc:	andeq	fp, r1, r8, lsr r6
   1b0e0:	andeq	fp, r1, r8, lsr r6
   1b0e4:	andeq	fp, r1, ip, asr #7
   1b0e8:	andeq	fp, r1, r8, lsr r6
   1b0ec:	ldrdeq	fp, [r1], -r0
   1b0f0:	andeq	fp, r1, r8, lsr r6
   1b0f4:	andeq	fp, r1, r8, lsr r6
   1b0f8:	muleq	r1, r0, r4
   1b0fc:	andeq	fp, r1, r8, lsr r6
   1b100:	andeq	fp, r1, r8, lsr r6
   1b104:	andeq	fp, r1, r8, lsr r6
   1b108:	andeq	fp, r1, r4, asr #6
   1b10c:	andeq	fp, r1, r8, lsr r6
   1b110:	andeq	fp, r1, r8, lsr r6
   1b114:	andeq	fp, r1, r8, lsr r6
   1b118:	andeq	fp, r1, r8, lsr r6
   1b11c:	ldrdeq	fp, [r1], -r0
   1b120:	andeq	fp, r1, r8, asr #4
   1b124:	andeq	fp, r1, r8, lsr r6
   1b128:	andeq	fp, r1, r8, lsr r6
   1b12c:	andeq	fp, r1, r8, lsr r6
   1b130:	andeq	fp, r1, r8, lsr r6
   1b134:	andeq	fp, r1, r8, lsr r6
   1b138:	andeq	fp, r1, r8, lsr r6
   1b13c:	andeq	fp, r1, r8, lsr r6
   1b140:	andeq	fp, r1, r8, lsl r2
   1b144:	andeq	fp, r1, r0, lsl r2
   1b148:	andeq	fp, r1, r8, lsr r6
   1b14c:	andeq	fp, r1, r8, lsr r6
   1b150:	andeq	fp, r1, r8, lsr r6
   1b154:	andeq	fp, r1, ip, lsl #8
   1b158:	andeq	fp, r1, r8, lsr r6
   1b15c:	andeq	fp, r1, r8, lsr r6
   1b160:	andeq	fp, r1, r8, lsr r6
   1b164:	andeq	fp, r1, ip, asr #7
   1b168:	andeq	fp, r1, r8, lsr r6
   1b16c:	ldrdeq	fp, [r1], -r0
   1b170:	andeq	fp, r1, r8, lsr r6
   1b174:	andeq	fp, r1, r8, lsr r6
   1b178:	andeq	fp, r1, r8, lsr r6
   1b17c:	andeq	fp, r1, r8, lsr r6
   1b180:	andeq	fp, r1, r8, lsr r6
   1b184:	andeq	fp, r1, r8, lsr r6
   1b188:	andeq	fp, r1, r4, asr #6
   1b18c:	andeq	fp, r1, r8, lsr r6
   1b190:	andeq	fp, r1, r8, lsr r6
   1b194:	ldrdeq	fp, [r1], -r8
   1b198:	mov	r1, #48	; 0x30
   1b19c:	ldr	r0, [sp, #72]	; 0x48
   1b1a0:	bl	117b4 <strchr@plt>
   1b1a4:	cmp	r0, #0
   1b1a8:	beq	1b0a4 <__assert_fail@plt+0x9704>
   1b1ac:	ldrb	r3, [r9, #1]
   1b1b0:	cmp	r3, #68	; 0x44
   1b1b4:	beq	1b1c8 <__assert_fail@plt+0x9828>
   1b1b8:	cmp	r3, #105	; 0x69
   1b1bc:	beq	1b664 <__assert_fail@plt+0x9cc4>
   1b1c0:	cmp	r3, #66	; 0x42
   1b1c4:	bne	1b0a4 <__assert_fail@plt+0x9704>
   1b1c8:	mov	r3, #2
   1b1cc:	str	r3, [sp, #16]
   1b1d0:	mov	r7, #1000	; 0x3e8
   1b1d4:	b	1b0b0 <__assert_fail@plt+0x9710>
   1b1d8:	cmp	sl, #0
   1b1dc:	sbcs	r3, fp, #0
   1b1e0:	blt	1b654 <__assert_fail@plt+0x9cb4>
   1b1e4:	adds	sl, sl, sl
   1b1e8:	adc	fp, fp, fp
   1b1ec:	mov	r3, #0
   1b1f0:	ldr	r1, [sp, #16]
   1b1f4:	orr	r4, r4, r3
   1b1f8:	add	r2, r9, r1
   1b1fc:	str	r2, [r5]
   1b200:	ldrb	r2, [r9, r1]
   1b204:	cmp	r2, #0
   1b208:	orrne	r4, r4, #2
   1b20c:	b	1af6c <__assert_fail@plt+0x95cc>
   1b210:	mov	r3, #0
   1b214:	b	1b1f0 <__assert_fail@plt+0x9850>
   1b218:	ldr	r3, [pc, #1172]	; 1b6b4 <__assert_fail@plt+0x9d14>
   1b21c:	mvn	r2, #0
   1b220:	cmp	fp, r3
   1b224:	cmpeq	sl, r2
   1b228:	bhi	1b654 <__assert_fail@plt+0x9cb4>
   1b22c:	lsl	r3, fp, #9
   1b230:	orr	r3, r3, sl, lsr #23
   1b234:	lsl	r2, sl, #9
   1b238:	mov	fp, r3
   1b23c:	mov	sl, r2
   1b240:	mov	r3, #0
   1b244:	b	1b1f0 <__assert_fail@plt+0x9850>
   1b248:	mov	r2, r7
   1b24c:	asr	r3, r7, #31
   1b250:	mvn	r0, #0
   1b254:	mvn	r1, #0
   1b258:	strd	r2, [sp]
   1b25c:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   1b260:	mov	r3, #0
   1b264:	mov	r7, r3
   1b268:	mov	r2, #7
   1b26c:	mov	r8, #1
   1b270:	strd	r0, [sp, #8]
   1b274:	mov	r1, r6
   1b278:	mov	r6, r4
   1b27c:	mov	r4, r5
   1b280:	mov	r5, r1
   1b284:	b	1b2b0 <__assert_fail@plt+0x9910>
   1b288:	ldrd	r0, [sp]
   1b28c:	mov	ip, r7
   1b290:	mul	lr, sl, r1
   1b294:	ldr	r1, [sp]
   1b298:	mla	lr, r0, fp, lr
   1b29c:	umull	sl, fp, sl, r1
   1b2a0:	add	fp, lr, fp
   1b2a4:	subs	r2, r2, #1
   1b2a8:	orr	r3, r3, ip
   1b2ac:	beq	1b3b8 <__assert_fail@plt+0x9a18>
   1b2b0:	ldrd	r0, [sp, #8]
   1b2b4:	cmp	r1, fp
   1b2b8:	cmpeq	r0, sl
   1b2bc:	bcs	1b288 <__assert_fail@plt+0x98e8>
   1b2c0:	mvn	sl, #0
   1b2c4:	mvn	fp, #0
   1b2c8:	mov	ip, r8
   1b2cc:	b	1b2a4 <__assert_fail@plt+0x9904>
   1b2d0:	mov	r2, r7
   1b2d4:	asr	r3, r7, #31
   1b2d8:	mvn	r0, #0
   1b2dc:	mvn	r1, #0
   1b2e0:	strd	r2, [sp, #8]
   1b2e4:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   1b2e8:	mov	r7, r9
   1b2ec:	mov	r3, #0
   1b2f0:	ldrd	r8, [sp, #8]
   1b2f4:	mov	lr, r3
   1b2f8:	mov	r2, #8
   1b2fc:	mov	ip, #1
   1b300:	strd	r0, [sp]
   1b304:	ldrd	r0, [sp]
   1b308:	cmp	r1, fp
   1b30c:	cmpeq	r0, sl
   1b310:	movcs	r1, lr
   1b314:	mulcs	r0, sl, r9
   1b318:	movcc	r1, ip
   1b31c:	mlacs	r0, r8, fp, r0
   1b320:	umullcs	sl, fp, sl, r8
   1b324:	mvncc	sl, #0
   1b328:	addcs	fp, r0, fp
   1b32c:	mvncc	fp, #0
   1b330:	subs	r2, r2, #1
   1b334:	orr	r3, r3, r1
   1b338:	bne	1b304 <__assert_fail@plt+0x9964>
   1b33c:	mov	r9, r7
   1b340:	b	1b1f0 <__assert_fail@plt+0x9850>
   1b344:	mov	r2, r7
   1b348:	asr	r3, r7, #31
   1b34c:	mvn	r0, #0
   1b350:	mvn	r1, #0
   1b354:	strd	r2, [sp]
   1b358:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   1b35c:	mov	r3, #0
   1b360:	mov	r7, r3
   1b364:	mov	r2, #4
   1b368:	mov	r8, #1
   1b36c:	strd	r0, [sp, #8]
   1b370:	mov	r1, r6
   1b374:	mov	r6, r4
   1b378:	mov	r4, r5
   1b37c:	mov	r5, r1
   1b380:	ldrd	r0, [sp, #8]
   1b384:	cmp	r1, fp
   1b388:	cmpeq	r0, sl
   1b38c:	bcc	1b644 <__assert_fail@plt+0x9ca4>
   1b390:	ldrd	r0, [sp]
   1b394:	mov	ip, r7
   1b398:	mul	lr, sl, r1
   1b39c:	ldr	r1, [sp]
   1b3a0:	mla	lr, r0, fp, lr
   1b3a4:	umull	sl, fp, sl, r1
   1b3a8:	add	fp, lr, fp
   1b3ac:	subs	r2, r2, #1
   1b3b0:	orr	r3, r3, ip
   1b3b4:	bne	1b380 <__assert_fail@plt+0x99e0>
   1b3b8:	mov	r2, r5
   1b3bc:	mov	r5, r4
   1b3c0:	mov	r4, r6
   1b3c4:	mov	r6, r2
   1b3c8:	b	1b1f0 <__assert_fail@plt+0x9850>
   1b3cc:	mov	r2, r7
   1b3d0:	asr	r3, r7, #31
   1b3d4:	mvn	r0, #0
   1b3d8:	mvn	r1, #0
   1b3dc:	strd	r2, [sp]
   1b3e0:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   1b3e4:	cmp	fp, r1
   1b3e8:	cmpeq	sl, r0
   1b3ec:	bhi	1b654 <__assert_fail@plt+0x9cb4>
   1b3f0:	ldr	r3, [sp, #4]
   1b3f4:	mul	r2, sl, r3
   1b3f8:	mov	r3, #0
   1b3fc:	mla	r2, r7, fp, r2
   1b400:	umull	sl, fp, sl, r7
   1b404:	add	fp, r2, fp
   1b408:	b	1b1f0 <__assert_fail@plt+0x9850>
   1b40c:	mov	r2, r7
   1b410:	asr	r3, r7, #31
   1b414:	mvn	r0, #0
   1b418:	mvn	r1, #0
   1b41c:	strd	r2, [sp]
   1b420:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   1b424:	mov	r3, #0
   1b428:	mov	r7, r3
   1b42c:	mov	r2, #3
   1b430:	mov	r8, #1
   1b434:	str	r5, [sp, #20]
   1b438:	strd	r0, [sp, #8]
   1b43c:	mov	r1, r6
   1b440:	mov	r6, r4
   1b444:	mov	r4, r1
   1b448:	ldrd	r0, [sp, #8]
   1b44c:	cmp	fp, r1
   1b450:	cmpeq	sl, r0
   1b454:	bhi	1b680 <__assert_fail@plt+0x9ce0>
   1b458:	ldrd	r0, [sp]
   1b45c:	mov	lr, r7
   1b460:	mul	ip, sl, r1
   1b464:	mla	ip, r0, fp, ip
   1b468:	umull	sl, fp, sl, r0
   1b46c:	add	fp, ip, fp
   1b470:	subs	r2, r2, #1
   1b474:	orr	r3, r3, lr
   1b478:	bne	1b448 <__assert_fail@plt+0x9aa8>
   1b47c:	mov	r2, r4
   1b480:	ldr	r5, [sp, #20]
   1b484:	mov	r4, r6
   1b488:	mov	r6, r2
   1b48c:	b	1b1f0 <__assert_fail@plt+0x9850>
   1b490:	mov	r2, r7
   1b494:	asr	r3, r7, #31
   1b498:	mvn	r0, #0
   1b49c:	mvn	r1, #0
   1b4a0:	strd	r2, [sp]
   1b4a4:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   1b4a8:	mov	r3, #0
   1b4ac:	mov	r7, r3
   1b4b0:	mov	r2, #5
   1b4b4:	mov	r8, #1
   1b4b8:	strd	r0, [sp, #8]
   1b4bc:	mov	r1, r6
   1b4c0:	mov	r6, r4
   1b4c4:	mov	r4, r5
   1b4c8:	mov	r5, r1
   1b4cc:	b	1b4f8 <__assert_fail@plt+0x9b58>
   1b4d0:	ldrd	r0, [sp]
   1b4d4:	mov	ip, r7
   1b4d8:	mul	lr, sl, r1
   1b4dc:	ldr	r1, [sp]
   1b4e0:	mla	lr, r0, fp, lr
   1b4e4:	umull	sl, fp, sl, r1
   1b4e8:	add	fp, lr, fp
   1b4ec:	subs	r2, r2, #1
   1b4f0:	orr	r3, r3, ip
   1b4f4:	beq	1b3b8 <__assert_fail@plt+0x9a18>
   1b4f8:	ldrd	r0, [sp, #8]
   1b4fc:	cmp	fp, r1
   1b500:	cmpeq	sl, r0
   1b504:	bls	1b4d0 <__assert_fail@plt+0x9b30>
   1b508:	mvn	sl, #0
   1b50c:	mvn	fp, #0
   1b510:	mov	ip, r8
   1b514:	b	1b4ec <__assert_fail@plt+0x9b4c>
   1b518:	mov	r2, r7
   1b51c:	asr	r3, r7, #31
   1b520:	mvn	r0, #0
   1b524:	mvn	r1, #0
   1b528:	strd	r2, [sp]
   1b52c:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   1b530:	mov	r3, #0
   1b534:	mov	r7, r3
   1b538:	mov	r2, #6
   1b53c:	mov	r8, #1
   1b540:	strd	r0, [sp, #8]
   1b544:	mov	r1, r6
   1b548:	mov	r6, r4
   1b54c:	mov	r4, r5
   1b550:	mov	r5, r1
   1b554:	b	1b580 <__assert_fail@plt+0x9be0>
   1b558:	ldrd	r0, [sp]
   1b55c:	mov	ip, r7
   1b560:	mul	lr, sl, r1
   1b564:	ldr	r1, [sp]
   1b568:	mla	lr, r0, fp, lr
   1b56c:	umull	sl, fp, sl, r1
   1b570:	add	fp, lr, fp
   1b574:	subs	r2, r2, #1
   1b578:	orr	r3, r3, ip
   1b57c:	beq	1b3b8 <__assert_fail@plt+0x9a18>
   1b580:	ldrd	r0, [sp, #8]
   1b584:	cmp	fp, r1
   1b588:	cmpeq	sl, r0
   1b58c:	bls	1b558 <__assert_fail@plt+0x9bb8>
   1b590:	mvn	sl, #0
   1b594:	mvn	fp, #0
   1b598:	mov	ip, r8
   1b59c:	b	1b574 <__assert_fail@plt+0x9bd4>
   1b5a0:	ldr	r3, [pc, #272]	; 1b6b8 <__assert_fail@plt+0x9d18>
   1b5a4:	mvn	r2, #0
   1b5a8:	cmp	fp, r3
   1b5ac:	cmpeq	sl, r2
   1b5b0:	bhi	1b654 <__assert_fail@plt+0x9cb4>
   1b5b4:	lsl	r3, fp, #10
   1b5b8:	orr	r3, r3, sl, lsr #22
   1b5bc:	lsl	r2, sl, #10
   1b5c0:	mov	fp, r3
   1b5c4:	mov	sl, r2
   1b5c8:	mov	r3, #0
   1b5cc:	b	1b1f0 <__assert_fail@plt+0x9850>
   1b5d0:	asr	r3, r7, #31
   1b5d4:	mov	r1, r3
   1b5d8:	mov	r0, r7
   1b5dc:	mov	r2, r7
   1b5e0:	strd	r0, [sp]
   1b5e4:	mvn	r0, #0
   1b5e8:	mvn	r1, #0
   1b5ec:	bl	2b4c0 <__assert_fail@plt+0x19b20>
   1b5f0:	cmp	fp, r1
   1b5f4:	cmpeq	sl, r0
   1b5f8:	bhi	1b690 <__assert_fail@plt+0x9cf0>
   1b5fc:	ldr	r3, [sp, #4]
   1b600:	mul	ip, sl, r3
   1b604:	umull	r2, r3, sl, r7
   1b608:	mla	r7, r7, fp, ip
   1b60c:	add	r3, r7, r3
   1b610:	cmp	r1, r3
   1b614:	cmpeq	r0, r2
   1b618:	bcc	1b690 <__assert_fail@plt+0x9cf0>
   1b61c:	ldrd	r0, [sp]
   1b620:	mul	r3, r0, r3
   1b624:	umull	sl, fp, r0, r2
   1b628:	mla	r2, r2, r1, r3
   1b62c:	mov	r3, #0
   1b630:	add	fp, r2, fp
   1b634:	b	1b1f0 <__assert_fail@plt+0x9850>
   1b638:	strd	sl, [r6]
   1b63c:	orr	r4, r4, #2
   1b640:	b	1af14 <__assert_fail@plt+0x9574>
   1b644:	mvn	sl, #0
   1b648:	mvn	fp, #0
   1b64c:	mov	ip, r8
   1b650:	b	1b3ac <__assert_fail@plt+0x9a0c>
   1b654:	mvn	sl, #0
   1b658:	mvn	fp, #0
   1b65c:	mov	r3, #1
   1b660:	b	1b1f0 <__assert_fail@plt+0x9850>
   1b664:	ldrb	r3, [r9, #2]
   1b668:	mov	r7, #1024	; 0x400
   1b66c:	cmp	r3, #66	; 0x42
   1b670:	movne	r3, #1
   1b674:	moveq	r3, #3
   1b678:	str	r3, [sp, #16]
   1b67c:	b	1b0b0 <__assert_fail@plt+0x9710>
   1b680:	mvn	sl, #0
   1b684:	mvn	fp, #0
   1b688:	mov	lr, r8
   1b68c:	b	1b470 <__assert_fail@plt+0x9ad0>
   1b690:	mov	r3, #1
   1b694:	mvn	sl, #0
   1b698:	mvn	fp, #0
   1b69c:	b	1b1f0 <__assert_fail@plt+0x9850>
   1b6a0:	ldr	r3, [pc, #20]	; 1b6bc <__assert_fail@plt+0x9d1c>
   1b6a4:	mov	r2, #84	; 0x54
   1b6a8:	ldr	r1, [pc, #16]	; 1b6c0 <__assert_fail@plt+0x9d20>
   1b6ac:	ldr	r0, [pc, #16]	; 1b6c4 <__assert_fail@plt+0x9d24>
   1b6b0:	bl	119a0 <__assert_fail@plt>
   1b6b4:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1b6b8:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1b6bc:	andeq	ip, r2, ip, ror #27
   1b6c0:	strdeq	ip, [r2], -r8
   1b6c4:	andeq	ip, r2, r4, lsl #28
   1b6c8:	cmp	r1, #0
   1b6cc:	cmpne	r0, #0
   1b6d0:	moveq	r1, #1
   1b6d4:	moveq	r0, r1
   1b6d8:	umull	r2, r3, r0, r1
   1b6dc:	adds	r3, r3, #0
   1b6e0:	movne	r3, #1
   1b6e4:	cmp	r2, #0
   1b6e8:	blt	1b6f8 <__assert_fail@plt+0x9d58>
   1b6ec:	cmp	r3, #0
   1b6f0:	bne	1b6f8 <__assert_fail@plt+0x9d58>
   1b6f4:	b	11508 <calloc@plt>
   1b6f8:	push	{r4, lr}
   1b6fc:	bl	117d8 <__errno_location@plt>
   1b700:	mov	r3, #12
   1b704:	str	r3, [r0]
   1b708:	mov	r0, #0
   1b70c:	pop	{r4, pc}
   1b710:	push	{r1, r2, r3}
   1b714:	push	{r4, r5, r6, r7, lr}
   1b718:	sub	sp, sp, #8
   1b71c:	add	r3, sp, #32
   1b720:	ldr	r1, [sp, #28]
   1b724:	str	r3, [sp, #4]
   1b728:	cmp	r1, #0
   1b72c:	beq	1b7c4 <__assert_fail@plt+0x9e24>
   1b730:	ldr	r2, [pc, #412]	; 1b8d4 <__assert_fail@plt+0x9f34>
   1b734:	mov	r5, r0
   1b738:	cmp	r1, r2
   1b73c:	bne	1b788 <__assert_fail@plt+0x9de8>
   1b740:	ldr	r6, [pc, #400]	; 1b8d8 <__assert_fail@plt+0x9f38>
   1b744:	ldr	r7, [r3]
   1b748:	add	r2, sp, #36	; 0x24
   1b74c:	ldr	r3, [r6]
   1b750:	str	r2, [sp, #4]
   1b754:	cmp	r3, #0
   1b758:	mov	r2, r7
   1b75c:	blt	1b888 <__assert_fail@plt+0x9ee8>
   1b760:	bl	1188c <fcntl64@plt>
   1b764:	subs	r4, r0, #0
   1b768:	blt	1b80c <__assert_fail@plt+0x9e6c>
   1b76c:	mov	r3, #1
   1b770:	str	r3, [r6]
   1b774:	mov	r0, r4
   1b778:	add	sp, sp, #8
   1b77c:	pop	{r4, r5, r6, r7, lr}
   1b780:	add	sp, sp, #12
   1b784:	bx	lr
   1b788:	cmp	r1, #11
   1b78c:	beq	1b7b4 <__assert_fail@plt+0x9e14>
   1b790:	bgt	1b7d4 <__assert_fail@plt+0x9e34>
   1b794:	cmp	r1, #3
   1b798:	beq	1b7b4 <__assert_fail@plt+0x9e14>
   1b79c:	ble	1b8c8 <__assert_fail@plt+0x9f28>
   1b7a0:	cmp	r1, #8
   1b7a4:	beq	1b7f4 <__assert_fail@plt+0x9e54>
   1b7a8:	ble	1b7f4 <__assert_fail@plt+0x9e54>
   1b7ac:	cmp	r1, #9
   1b7b0:	bne	1b7f4 <__assert_fail@plt+0x9e54>
   1b7b4:	mov	r0, r5
   1b7b8:	bl	1188c <fcntl64@plt>
   1b7bc:	mov	r4, r0
   1b7c0:	b	1b774 <__assert_fail@plt+0x9dd4>
   1b7c4:	ldr	r2, [sp, #32]
   1b7c8:	bl	1188c <fcntl64@plt>
   1b7cc:	mov	r4, r0
   1b7d0:	b	1b774 <__assert_fail@plt+0x9dd4>
   1b7d4:	ldr	r3, [pc, #256]	; 1b8dc <__assert_fail@plt+0x9f3c>
   1b7d8:	cmp	r1, r3
   1b7dc:	bgt	1b8a8 <__assert_fail@plt+0x9f08>
   1b7e0:	cmp	r1, r2
   1b7e4:	bge	1b7f4 <__assert_fail@plt+0x9e54>
   1b7e8:	sub	r3, r3, #6
   1b7ec:	cmp	r1, r3
   1b7f0:	beq	1b7b4 <__assert_fail@plt+0x9e14>
   1b7f4:	ldr	r3, [sp, #4]
   1b7f8:	mov	r0, r5
   1b7fc:	ldr	r2, [r3]
   1b800:	bl	1188c <fcntl64@plt>
   1b804:	mov	r4, r0
   1b808:	b	1b774 <__assert_fail@plt+0x9dd4>
   1b80c:	bl	117d8 <__errno_location@plt>
   1b810:	ldr	r3, [r0]
   1b814:	cmp	r3, #22
   1b818:	bne	1b76c <__assert_fail@plt+0x9dcc>
   1b81c:	mov	r2, r7
   1b820:	mov	r0, r5
   1b824:	mov	r1, #0
   1b828:	bl	1188c <fcntl64@plt>
   1b82c:	subs	r4, r0, #0
   1b830:	blt	1b774 <__assert_fail@plt+0x9dd4>
   1b834:	mvn	r3, #0
   1b838:	str	r3, [r6]
   1b83c:	mov	r1, #1
   1b840:	mov	r0, r4
   1b844:	bl	1188c <fcntl64@plt>
   1b848:	subs	r2, r0, #0
   1b84c:	blt	1b868 <__assert_fail@plt+0x9ec8>
   1b850:	orr	r2, r2, #1
   1b854:	mov	r1, #2
   1b858:	mov	r0, r4
   1b85c:	bl	1188c <fcntl64@plt>
   1b860:	cmn	r0, #1
   1b864:	bne	1b774 <__assert_fail@plt+0x9dd4>
   1b868:	bl	117d8 <__errno_location@plt>
   1b86c:	mov	r5, r0
   1b870:	mov	r0, r4
   1b874:	ldr	r6, [r5]
   1b878:	mvn	r4, #0
   1b87c:	bl	1197c <close@plt>
   1b880:	str	r6, [r5]
   1b884:	b	1b774 <__assert_fail@plt+0x9dd4>
   1b888:	mov	r1, #0
   1b88c:	bl	1188c <fcntl64@plt>
   1b890:	subs	r4, r0, #0
   1b894:	blt	1b774 <__assert_fail@plt+0x9dd4>
   1b898:	ldr	r3, [r6]
   1b89c:	cmn	r3, #1
   1b8a0:	beq	1b83c <__assert_fail@plt+0x9e9c>
   1b8a4:	b	1b774 <__assert_fail@plt+0x9dd4>
   1b8a8:	ldr	r3, [pc, #48]	; 1b8e0 <__assert_fail@plt+0x9f40>
   1b8ac:	cmp	r1, r3
   1b8b0:	beq	1b7f4 <__assert_fail@plt+0x9e54>
   1b8b4:	blt	1b7b4 <__assert_fail@plt+0x9e14>
   1b8b8:	add	r3, r3, #1
   1b8bc:	cmp	r1, r3
   1b8c0:	bne	1b7f4 <__assert_fail@plt+0x9e54>
   1b8c4:	b	1b7b4 <__assert_fail@plt+0x9e14>
   1b8c8:	cmp	r1, #1
   1b8cc:	bne	1b7f4 <__assert_fail@plt+0x9e54>
   1b8d0:	b	1b7b4 <__assert_fail@plt+0x9e14>
   1b8d4:	andeq	r0, r0, r6, lsl #8
   1b8d8:	ldrdeq	lr, [r3], -r4
   1b8dc:	andeq	r0, r0, r7, lsl #8
   1b8e0:	andeq	r0, r0, r9, lsl #8
   1b8e4:	push	{r4, lr}
   1b8e8:	subs	r4, r0, #0
   1b8ec:	sub	sp, sp, #8
   1b8f0:	beq	1b90c <__assert_fail@plt+0x9f6c>
   1b8f4:	bl	11730 <__freading@plt>
   1b8f8:	cmp	r0, #0
   1b8fc:	beq	1b90c <__assert_fail@plt+0x9f6c>
   1b900:	ldr	r3, [r4]
   1b904:	tst	r3, #256	; 0x100
   1b908:	bne	1b91c <__assert_fail@plt+0x9f7c>
   1b90c:	mov	r0, r4
   1b910:	add	sp, sp, #8
   1b914:	pop	{r4, lr}
   1b918:	b	11568 <fflush@plt>
   1b91c:	mov	r3, #1
   1b920:	str	r3, [sp]
   1b924:	mov	r2, #0
   1b928:	mov	r3, #0
   1b92c:	mov	r0, r4
   1b930:	bl	1b99c <__assert_fail@plt+0x9ffc>
   1b934:	mov	r0, r4
   1b938:	add	sp, sp, #8
   1b93c:	pop	{r4, lr}
   1b940:	b	11568 <fflush@plt>
   1b944:	push	{r4, r5, lr}
   1b948:	sub	sp, sp, #12
   1b94c:	mov	r5, r0
   1b950:	bl	117d8 <__errno_location@plt>
   1b954:	mov	r2, #0
   1b958:	mov	r4, r0
   1b95c:	ldr	r3, [r0]
   1b960:	str	r2, [r4]
   1b964:	mov	r0, r5
   1b968:	str	r3, [sp]
   1b96c:	str	r3, [sp, #4]
   1b970:	bl	11598 <free@plt>
   1b974:	ldr	r3, [r4]
   1b978:	add	r2, sp, #8
   1b97c:	cmp	r3, #0
   1b980:	moveq	r3, #4
   1b984:	movne	r3, #0
   1b988:	add	r3, r2, r3
   1b98c:	ldr	r3, [r3, #-8]
   1b990:	str	r3, [r4]
   1b994:	add	sp, sp, #12
   1b998:	pop	{r4, r5, pc}
   1b99c:	push	{r4, r5, r6, r7, r8, lr}
   1b9a0:	sub	sp, sp, #8
   1b9a4:	ldmib	r0, {ip, lr}
   1b9a8:	mov	r4, r0
   1b9ac:	ldr	r5, [sp, #32]
   1b9b0:	cmp	lr, ip
   1b9b4:	beq	1b9cc <__assert_fail@plt+0xa02c>
   1b9b8:	str	r5, [sp, #32]
   1b9bc:	mov	r0, r4
   1b9c0:	add	sp, sp, #8
   1b9c4:	pop	{r4, r5, r6, r7, r8, lr}
   1b9c8:	b	11880 <fseeko64@plt>
   1b9cc:	ldr	lr, [r0, #20]
   1b9d0:	ldr	ip, [r0, #16]
   1b9d4:	cmp	lr, ip
   1b9d8:	bne	1b9b8 <__assert_fail@plt+0xa018>
   1b9dc:	ldr	r8, [r0, #36]	; 0x24
   1b9e0:	cmp	r8, #0
   1b9e4:	bne	1b9b8 <__assert_fail@plt+0xa018>
   1b9e8:	mov	r6, r2
   1b9ec:	mov	r7, r3
   1b9f0:	bl	11844 <fileno@plt>
   1b9f4:	mov	r2, r6
   1b9f8:	mov	r3, r7
   1b9fc:	str	r5, [sp]
   1ba00:	bl	11694 <lseek64@plt>
   1ba04:	mvn	r3, #0
   1ba08:	mvn	r2, #0
   1ba0c:	cmp	r1, r3
   1ba10:	cmpeq	r0, r2
   1ba14:	beq	1ba34 <__assert_fail@plt+0xa094>
   1ba18:	ldr	r3, [r4]
   1ba1c:	strd	r0, [r4, #80]	; 0x50
   1ba20:	mov	r0, r8
   1ba24:	bic	r3, r3, #16
   1ba28:	str	r3, [r4]
   1ba2c:	add	sp, sp, #8
   1ba30:	pop	{r4, r5, r6, r7, r8, pc}
   1ba34:	mvn	r0, #0
   1ba38:	b	1ba2c <__assert_fail@plt+0xa08c>
   1ba3c:	cmp	r0, #0
   1ba40:	moveq	r0, #1
   1ba44:	cmp	r0, #0
   1ba48:	blt	1ba50 <__assert_fail@plt+0xa0b0>
   1ba4c:	b	1170c <malloc@plt>
   1ba50:	push	{r4, lr}
   1ba54:	bl	117d8 <__errno_location@plt>
   1ba58:	mov	r3, #12
   1ba5c:	str	r3, [r0]
   1ba60:	mov	r0, #0
   1ba64:	pop	{r4, pc}
   1ba68:	push	{r4, r5, r6, r7, lr}
   1ba6c:	subs	r6, r0, #0
   1ba70:	sub	sp, sp, #12
   1ba74:	addeq	r6, sp, #4
   1ba78:	mov	r0, r6
   1ba7c:	mov	r5, r2
   1ba80:	mov	r7, r1
   1ba84:	bl	116c4 <mbrtowc@plt>
   1ba88:	cmp	r5, #0
   1ba8c:	cmnne	r0, #3
   1ba90:	mov	r4, r0
   1ba94:	bls	1bab0 <__assert_fail@plt+0xa110>
   1ba98:	mov	r0, #0
   1ba9c:	bl	2aa74 <__assert_fail@plt+0x190d4>
   1baa0:	cmp	r0, #0
   1baa4:	moveq	r4, #1
   1baa8:	ldrbeq	r3, [r7]
   1baac:	streq	r3, [r6]
   1bab0:	mov	r0, r4
   1bab4:	add	sp, sp, #12
   1bab8:	pop	{r4, r5, r6, r7, pc}
   1babc:	cmp	r0, #0
   1bac0:	beq	1bae4 <__assert_fail@plt+0xa144>
   1bac4:	cmp	r1, #0
   1bac8:	push	{lr}		; (str lr, [sp, #-4]!)
   1bacc:	sub	sp, sp, #12
   1bad0:	beq	1baec <__assert_fail@plt+0xa14c>
   1bad4:	blt	1bb04 <__assert_fail@plt+0xa164>
   1bad8:	add	sp, sp, #12
   1badc:	pop	{lr}		; (ldr lr, [sp], #4)
   1bae0:	b	11634 <realloc@plt>
   1bae4:	mov	r0, r1
   1bae8:	b	1ba3c <__assert_fail@plt+0xa09c>
   1baec:	str	r1, [sp, #4]
   1baf0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1baf4:	ldr	r3, [sp, #4]
   1baf8:	mov	r0, r3
   1bafc:	add	sp, sp, #12
   1bb00:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb04:	bl	117d8 <__errno_location@plt>
   1bb08:	mov	r2, #12
   1bb0c:	mov	r3, #0
   1bb10:	str	r2, [r0]
   1bb14:	b	1baf8 <__assert_fail@plt+0xa158>
   1bb18:	push	{r4, r5, r6, lr}
   1bb1c:	subs	r4, r2, #0
   1bb20:	mov	r6, r0
   1bb24:	mov	r5, r1
   1bb28:	beq	1bb54 <__assert_fail@plt+0xa1b4>
   1bb2c:	mov	r1, r4
   1bb30:	mvn	r0, #0
   1bb34:	bl	2acbc <__assert_fail@plt+0x1931c>
   1bb38:	cmp	r0, r5
   1bb3c:	bcs	1bb54 <__assert_fail@plt+0xa1b4>
   1bb40:	bl	117d8 <__errno_location@plt>
   1bb44:	mov	r3, #12
   1bb48:	str	r3, [r0]
   1bb4c:	mov	r0, #0
   1bb50:	pop	{r4, r5, r6, pc}
   1bb54:	mul	r1, r5, r4
   1bb58:	mov	r0, r6
   1bb5c:	pop	{r4, r5, r6, lr}
   1bb60:	b	1babc <__assert_fail@plt+0xa11c>
   1bb64:	mov	ip, r0
   1bb68:	ldr	r3, [r1, #40]	; 0x28
   1bb6c:	ldr	r0, [r1, #56]	; 0x38
   1bb70:	cmp	r0, r3
   1bb74:	ble	1bbe8 <__assert_fail@plt+0xa248>
   1bb78:	push	{r4, lr}
   1bb7c:	ldr	lr, [r1, #4]
   1bb80:	ldrb	r0, [lr, r3]
   1bb84:	strb	r0, [ip]
   1bb88:	ldr	r4, [r1, #80]	; 0x50
   1bb8c:	cmp	r4, #1
   1bb90:	ble	1bbb0 <__assert_fail@plt+0xa210>
   1bb94:	ldr	r4, [r1, #28]
   1bb98:	cmp	r3, r4
   1bb9c:	beq	1bbb0 <__assert_fail@plt+0xa210>
   1bba0:	ldr	r4, [r1, #8]
   1bba4:	ldr	r4, [r4, r3, lsl #2]
   1bba8:	cmn	r4, #1
   1bbac:	beq	1bc30 <__assert_fail@plt+0xa290>
   1bbb0:	cmp	r0, #92	; 0x5c
   1bbb4:	beq	1bbf8 <__assert_fail@plt+0xa258>
   1bbb8:	cmp	r0, #91	; 0x5b
   1bbbc:	beq	1bc3c <__assert_fail@plt+0xa29c>
   1bbc0:	cmp	r0, #93	; 0x5d
   1bbc4:	beq	1bc20 <__assert_fail@plt+0xa280>
   1bbc8:	cmp	r0, #94	; 0x5e
   1bbcc:	beq	1bc60 <__assert_fail@plt+0xa2c0>
   1bbd0:	cmp	r0, #45	; 0x2d
   1bbd4:	bne	1bc10 <__assert_fail@plt+0xa270>
   1bbd8:	mov	r3, #22
   1bbdc:	strb	r3, [ip, #4]
   1bbe0:	mov	r0, #1
   1bbe4:	pop	{r4, pc}
   1bbe8:	mov	r3, #2
   1bbec:	strb	r3, [ip, #4]
   1bbf0:	mov	r0, #0
   1bbf4:	bx	lr
   1bbf8:	tst	r2, #1
   1bbfc:	beq	1bc10 <__assert_fail@plt+0xa270>
   1bc00:	ldr	r2, [r1, #48]	; 0x30
   1bc04:	add	r3, r3, #1
   1bc08:	cmp	r3, r2
   1bc0c:	blt	1bca4 <__assert_fail@plt+0xa304>
   1bc10:	mov	r3, #1
   1bc14:	mov	r0, r3
   1bc18:	strb	r3, [ip, #4]
   1bc1c:	pop	{r4, pc}
   1bc20:	mov	r3, #21
   1bc24:	strb	r3, [ip, #4]
   1bc28:	mov	r0, #1
   1bc2c:	pop	{r4, pc}
   1bc30:	mov	r0, #1
   1bc34:	strb	r0, [ip, #4]
   1bc38:	pop	{r4, pc}
   1bc3c:	ldr	r1, [r1, #48]	; 0x30
   1bc40:	add	r0, r3, #1
   1bc44:	cmp	r0, r1
   1bc48:	blt	1bc70 <__assert_fail@plt+0xa2d0>
   1bc4c:	mov	r0, #1
   1bc50:	mov	r3, #91	; 0x5b
   1bc54:	strb	r0, [ip, #4]
   1bc58:	strb	r3, [ip]
   1bc5c:	pop	{r4, pc}
   1bc60:	mov	r3, #25
   1bc64:	strb	r3, [ip, #4]
   1bc68:	mov	r0, #1
   1bc6c:	pop	{r4, pc}
   1bc70:	add	r3, lr, r3
   1bc74:	ldrb	r3, [r3, #1]
   1bc78:	cmp	r3, #58	; 0x3a
   1bc7c:	strb	r3, [ip]
   1bc80:	beq	1bcbc <__assert_fail@plt+0xa31c>
   1bc84:	cmp	r3, #61	; 0x3d
   1bc88:	beq	1bcd4 <__assert_fail@plt+0xa334>
   1bc8c:	cmp	r3, #46	; 0x2e
   1bc90:	bne	1bc4c <__assert_fail@plt+0xa2ac>
   1bc94:	mov	r3, #26
   1bc98:	strb	r3, [ip, #4]
   1bc9c:	mov	r0, #2
   1bca0:	pop	{r4, pc}
   1bca4:	str	r3, [r1, #40]	; 0x28
   1bca8:	ldrb	r3, [lr, r3]
   1bcac:	mov	r0, #1
   1bcb0:	strb	r0, [ip, #4]
   1bcb4:	strb	r3, [ip]
   1bcb8:	pop	{r4, pc}
   1bcbc:	tst	r2, #4
   1bcc0:	beq	1bc4c <__assert_fail@plt+0xa2ac>
   1bcc4:	mov	r3, #30
   1bcc8:	strb	r3, [ip, #4]
   1bccc:	mov	r0, #2
   1bcd0:	pop	{r4, pc}
   1bcd4:	mov	r3, #28
   1bcd8:	strb	r3, [ip, #4]
   1bcdc:	mov	r0, #2
   1bce0:	pop	{r4, pc}
   1bce4:	ldrb	r3, [r1, #24]
   1bce8:	cmp	r3, #17
   1bcec:	bne	1bd04 <__assert_fail@plt+0xa364>
   1bcf0:	ldr	r3, [r1, #20]
   1bcf4:	cmp	r0, r3
   1bcf8:	ldrbeq	r3, [r1, #26]
   1bcfc:	orreq	r3, r3, #8
   1bd00:	strbeq	r3, [r1, #26]
   1bd04:	mov	r0, #0
   1bd08:	bx	lr
   1bd0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd10:	sub	sp, sp, #52	; 0x34
   1bd14:	ldr	r8, [r0, #84]	; 0x54
   1bd18:	str	r3, [sp, #40]	; 0x28
   1bd1c:	add	r3, r3, r3, lsl #1
   1bd20:	ldr	fp, [r8, #24]
   1bd24:	str	r1, [sp, #24]
   1bd28:	add	fp, fp, r3, lsl #2
   1bd2c:	ldr	r1, [fp, #4]
   1bd30:	cmp	r1, #0
   1bd34:	ble	1bed4 <__assert_fail@plt+0xa534>
   1bd38:	ldr	r3, [sp, #88]	; 0x58
   1bd3c:	mov	r6, r2
   1bd40:	mov	r2, #1
   1bd44:	mov	sl, r0
   1bd48:	add	r3, r3, r3, lsl r2
   1bd4c:	lsl	r2, r2, r6
   1bd50:	lsl	r3, r3, #3
   1bd54:	add	r3, r3, #24
   1bd58:	str	r3, [sp, #44]	; 0x2c
   1bd5c:	ldr	r3, [sp, #24]
   1bd60:	str	r2, [sp, #16]
   1bd64:	mvn	r2, r2
   1bd68:	str	r2, [sp, #20]
   1bd6c:	and	r2, r3, #1
   1bd70:	and	r3, r3, #2
   1bd74:	mov	r7, #0
   1bd78:	str	r2, [sp, #28]
   1bd7c:	str	r3, [sp, #12]
   1bd80:	b	1bda0 <__assert_fail@plt+0xa400>
   1bd84:	cmp	r3, #9
   1bd88:	beq	1bee8 <__assert_fail@plt+0xa548>
   1bd8c:	cmp	r3, #4
   1bd90:	beq	1bde0 <__assert_fail@plt+0xa440>
   1bd94:	add	r7, r7, #1
   1bd98:	cmp	r1, r7
   1bd9c:	ble	1bed4 <__assert_fail@plt+0xa534>
   1bda0:	ldr	r3, [fp, #8]
   1bda4:	ldr	r2, [r8]
   1bda8:	ldr	r5, [r3, r7, lsl #2]
   1bdac:	add	r3, r2, r5, lsl #3
   1bdb0:	ldrb	r3, [r3, #4]
   1bdb4:	cmp	r3, #8
   1bdb8:	bne	1bd84 <__assert_fail@plt+0xa3e4>
   1bdbc:	ldr	r3, [sp, #28]
   1bdc0:	cmp	r3, #0
   1bdc4:	beq	1bd94 <__assert_fail@plt+0xa3f4>
   1bdc8:	ldr	r3, [r2, r5, lsl #3]
   1bdcc:	cmp	r3, r6
   1bdd0:	bne	1bd94 <__assert_fail@plt+0xa3f4>
   1bdd4:	mvn	r0, #0
   1bdd8:	add	sp, sp, #52	; 0x34
   1bddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bde0:	ldr	r3, [sp, #88]	; 0x58
   1bde4:	cmn	r3, #1
   1bde8:	beq	1bd94 <__assert_fail@plt+0xa3f4>
   1bdec:	add	r9, r5, r5, lsl #1
   1bdf0:	ldr	r4, [sl, #116]	; 0x74
   1bdf4:	ldr	r3, [sp, #44]	; 0x2c
   1bdf8:	str	fp, [sp, #32]
   1bdfc:	str	r7, [sp, #36]	; 0x24
   1be00:	lsl	r9, r9, #2
   1be04:	add	r4, r4, r3
   1be08:	ldr	fp, [sp, #24]
   1be0c:	ldr	r7, [sp, #40]	; 0x28
   1be10:	b	1be24 <__assert_fail@plt+0xa484>
   1be14:	add	r4, r4, #24
   1be18:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1be1c:	cmp	r3, #0
   1be20:	beq	1bebc <__assert_fail@plt+0xa51c>
   1be24:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1be28:	cmp	r5, r3
   1be2c:	bne	1be14 <__assert_fail@plt+0xa474>
   1be30:	cmp	r6, #31
   1be34:	mov	r2, r6
   1be38:	mov	r1, fp
   1be3c:	mov	r0, sl
   1be40:	bgt	1be54 <__assert_fail@plt+0xa4b4>
   1be44:	ldr	r3, [r4, #-8]
   1be48:	ldr	ip, [sp, #16]
   1be4c:	tst	ip, r3
   1be50:	beq	1be14 <__assert_fail@plt+0xa474>
   1be54:	ldr	r3, [r8, #20]
   1be58:	add	r3, r3, r9
   1be5c:	ldr	r3, [r3, #8]
   1be60:	ldr	ip, [r3]
   1be64:	cmp	r7, ip
   1be68:	mov	r3, ip
   1be6c:	beq	1bf0c <__assert_fail@plt+0xa56c>
   1be70:	ldr	ip, [sp, #88]	; 0x58
   1be74:	str	ip, [sp]
   1be78:	bl	1bd0c <__assert_fail@plt+0xa36c>
   1be7c:	cmn	r0, #1
   1be80:	beq	1bdd4 <__assert_fail@plt+0xa434>
   1be84:	cmp	r0, #0
   1be88:	bne	1be98 <__assert_fail@plt+0xa4f8>
   1be8c:	ldr	r3, [sp, #12]
   1be90:	cmp	r3, #0
   1be94:	bne	1bf00 <__assert_fail@plt+0xa560>
   1be98:	cmp	r6, #31
   1be9c:	add	r4, r4, #24
   1bea0:	ldrle	r3, [r4, #-32]	; 0xffffffe0
   1bea4:	ldrle	r2, [sp, #20]
   1bea8:	andle	r3, r3, r2
   1beac:	strle	r3, [r4, #-32]	; 0xffffffe0
   1beb0:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1beb4:	cmp	r3, #0
   1beb8:	bne	1be24 <__assert_fail@plt+0xa484>
   1bebc:	ldr	fp, [sp, #32]
   1bec0:	ldr	r7, [sp, #36]	; 0x24
   1bec4:	ldr	r1, [fp, #4]
   1bec8:	add	r7, r7, #1
   1becc:	cmp	r1, r7
   1bed0:	bgt	1bda0 <__assert_fail@plt+0xa400>
   1bed4:	ldr	r3, [sp, #24]
   1bed8:	lsr	r0, r3, #1
   1bedc:	and	r0, r0, #1
   1bee0:	add	sp, sp, #52	; 0x34
   1bee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bee8:	ldr	r3, [sp, #12]
   1beec:	cmp	r3, #0
   1bef0:	beq	1bd94 <__assert_fail@plt+0xa3f4>
   1bef4:	ldr	r3, [r2, r5, lsl #3]
   1bef8:	cmp	r6, r3
   1befc:	bne	1bd94 <__assert_fail@plt+0xa3f4>
   1bf00:	mov	r0, #0
   1bf04:	add	sp, sp, #52	; 0x34
   1bf08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf0c:	ldr	r3, [sp, #24]
   1bf10:	ands	r0, r3, #1
   1bf14:	mvnne	r0, #0
   1bf18:	add	sp, sp, #52	; 0x34
   1bf1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf20:	add	r1, r1, r1, lsl #1
   1bf24:	ldr	ip, [r0, #116]	; 0x74
   1bf28:	push	{r4, lr}
   1bf2c:	add	ip, ip, r1, lsl #3
   1bf30:	ldr	lr, [sp, #8]
   1bf34:	ldr	r1, [ip, #8]
   1bf38:	ldr	r4, [sp, #12]
   1bf3c:	cmp	r1, lr
   1bf40:	bgt	1bf90 <__assert_fail@plt+0xa5f0>
   1bf44:	ldr	ip, [ip, #12]
   1bf48:	cmp	lr, ip
   1bf4c:	bgt	1bf84 <__assert_fail@plt+0xa5e4>
   1bf50:	cmp	lr, ip
   1bf54:	moveq	ip, #2
   1bf58:	movne	ip, #0
   1bf5c:	cmp	r1, lr
   1bf60:	movne	r1, ip
   1bf64:	orreq	r1, ip, #1
   1bf68:	cmp	r1, #0
   1bf6c:	bne	1bf78 <__assert_fail@plt+0xa5d8>
   1bf70:	mov	r0, r1
   1bf74:	pop	{r4, pc}
   1bf78:	str	r4, [sp, #8]
   1bf7c:	pop	{r4, lr}
   1bf80:	b	1bd0c <__assert_fail@plt+0xa36c>
   1bf84:	mov	r1, #1
   1bf88:	mov	r0, r1
   1bf8c:	pop	{r4, pc}
   1bf90:	mvn	r1, #0
   1bf94:	b	1bf70 <__assert_fail@plt+0xa5d0>
   1bf98:	push	{r4, r5, r6, lr}
   1bf9c:	mov	r4, r0
   1bfa0:	mov	r6, r1
   1bfa4:	mov	r5, r2
   1bfa8:	b	1bfb0 <__assert_fail@plt+0xa610>
   1bfac:	mov	r4, r3
   1bfb0:	ldr	r3, [r4, #4]
   1bfb4:	cmp	r3, #0
   1bfb8:	bne	1bfac <__assert_fail@plt+0xa60c>
   1bfbc:	ldr	r3, [r4, #8]
   1bfc0:	cmp	r3, #0
   1bfc4:	bne	1bfac <__assert_fail@plt+0xa60c>
   1bfc8:	mov	r1, r4
   1bfcc:	mov	r0, r5
   1bfd0:	blx	r6
   1bfd4:	cmp	r0, #0
   1bfd8:	popne	{r4, r5, r6, pc}
   1bfdc:	ldr	r2, [r4]
   1bfe0:	cmp	r2, #0
   1bfe4:	popeq	{r4, r5, r6, pc}
   1bfe8:	ldr	r3, [r2, #8]
   1bfec:	cmp	r4, r3
   1bff0:	cmpne	r3, #0
   1bff4:	moveq	r4, #1
   1bff8:	movne	r4, #0
   1bffc:	cmp	r4, #0
   1c000:	mov	r4, r2
   1c004:	bne	1bfc8 <__assert_fail@plt+0xa628>
   1c008:	b	1bfac <__assert_fail@plt+0xa60c>
   1c00c:	push	{r4, r5, r6, r7, r8, lr}
   1c010:	mov	r4, r0
   1c014:	mov	r6, r1
   1c018:	mov	r5, r2
   1c01c:	mov	r7, #0
   1c020:	b	1c028 <__assert_fail@plt+0xa688>
   1c024:	mov	r4, r3
   1c028:	mov	r1, r4
   1c02c:	mov	r0, r5
   1c030:	blx	r6
   1c034:	cmp	r0, #0
   1c038:	popne	{r4, r5, r6, r7, r8, pc}
   1c03c:	ldr	r3, [r4, #4]
   1c040:	cmp	r3, #0
   1c044:	moveq	r2, r7
   1c048:	bne	1c024 <__assert_fail@plt+0xa684>
   1c04c:	ldr	r3, [r4, #8]
   1c050:	cmp	r3, #0
   1c054:	cmpne	r2, r3
   1c058:	bne	1c024 <__assert_fail@plt+0xa684>
   1c05c:	ldr	r3, [r4]
   1c060:	mov	r2, r4
   1c064:	subs	r4, r3, #0
   1c068:	popeq	{r4, r5, r6, r7, r8, pc}
   1c06c:	ldr	r3, [r4, #8]
   1c070:	cmp	r3, #0
   1c074:	cmpne	r2, r3
   1c078:	beq	1c05c <__assert_fail@plt+0xa6bc>
   1c07c:	b	1c024 <__assert_fail@plt+0xa684>
   1c080:	ldr	r3, [r0, #80]	; 0x50
   1c084:	push	{r4, r5, r6, lr}
   1c088:	cmp	r3, #1
   1c08c:	mov	r4, r0
   1c090:	mov	r5, r1
   1c094:	ble	1c0dc <__assert_fail@plt+0xa73c>
   1c098:	cmn	r1, #-1073741823	; 0xc0000001
   1c09c:	bhi	1c10c <__assert_fail@plt+0xa76c>
   1c0a0:	lsl	r6, r1, #2
   1c0a4:	mov	r1, r6
   1c0a8:	ldr	r0, [r0, #8]
   1c0ac:	bl	1babc <__assert_fail@plt+0xa11c>
   1c0b0:	subs	r3, r0, #0
   1c0b4:	beq	1c10c <__assert_fail@plt+0xa76c>
   1c0b8:	ldr	r0, [r4, #12]
   1c0bc:	str	r3, [r4, #8]
   1c0c0:	cmp	r0, #0
   1c0c4:	beq	1c0dc <__assert_fail@plt+0xa73c>
   1c0c8:	mov	r1, r6
   1c0cc:	bl	1babc <__assert_fail@plt+0xa11c>
   1c0d0:	cmp	r0, #0
   1c0d4:	beq	1c10c <__assert_fail@plt+0xa76c>
   1c0d8:	str	r0, [r4, #12]
   1c0dc:	ldrb	r3, [r4, #75]	; 0x4b
   1c0e0:	cmp	r3, #0
   1c0e4:	bne	1c0f4 <__assert_fail@plt+0xa754>
   1c0e8:	mov	r0, #0
   1c0ec:	str	r5, [r4, #36]	; 0x24
   1c0f0:	pop	{r4, r5, r6, pc}
   1c0f4:	mov	r1, r5
   1c0f8:	ldr	r0, [r4, #4]
   1c0fc:	bl	1babc <__assert_fail@plt+0xa11c>
   1c100:	cmp	r0, #0
   1c104:	strne	r0, [r4, #4]
   1c108:	bne	1c0e8 <__assert_fail@plt+0xa748>
   1c10c:	mov	r0, #12
   1c110:	pop	{r4, r5, r6, pc}
   1c114:	push	{r4, r5, r6, lr}
   1c118:	mov	r5, r1
   1c11c:	ldr	r3, [r0]
   1c120:	ldr	r1, [r0, #4]
   1c124:	mov	r4, r0
   1c128:	cmp	r3, r1
   1c12c:	beq	1c148 <__assert_fail@plt+0xa7a8>
   1c130:	ldr	r3, [r0, #8]
   1c134:	add	r2, r1, #1
   1c138:	str	r2, [r4, #4]
   1c13c:	mov	r0, #1
   1c140:	str	r5, [r3, r1, lsl #2]
   1c144:	pop	{r4, r5, r6, pc}
   1c148:	add	r1, r1, #1
   1c14c:	ldr	r0, [r0, #8]
   1c150:	lsl	r3, r1, #1
   1c154:	str	r3, [r4]
   1c158:	lsl	r1, r1, #3
   1c15c:	bl	1babc <__assert_fail@plt+0xa11c>
   1c160:	subs	r3, r0, #0
   1c164:	ldrne	r1, [r4, #4]
   1c168:	strne	r3, [r4, #8]
   1c16c:	bne	1c134 <__assert_fail@plt+0xa794>
   1c170:	mov	r0, r3
   1c174:	pop	{r4, r5, r6, pc}
   1c178:	ldr	r3, [r1, #8]
   1c17c:	push	{r4, r5, r6, r7, r8, lr}
   1c180:	mov	r5, r1
   1c184:	mov	r4, #0
   1c188:	str	r2, [r5], #16
   1c18c:	mov	r8, r0
   1c190:	str	r3, [r1, #16]
   1c194:	lsl	r0, r3, #2
   1c198:	str	r4, [r1, #20]
   1c19c:	mov	r7, r1
   1c1a0:	mov	r6, r2
   1c1a4:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1c1a8:	cmp	r0, r4
   1c1ac:	str	r0, [r7, #24]
   1c1b0:	beq	1c24c <__assert_fail@plt+0xa8ac>
   1c1b4:	ldr	r0, [r7, #8]
   1c1b8:	cmp	r0, #0
   1c1bc:	bgt	1c1d0 <__assert_fail@plt+0xa830>
   1c1c0:	b	1c20c <__assert_fail@plt+0xa86c>
   1c1c4:	add	r4, r4, #1
   1c1c8:	cmp	r0, r4
   1c1cc:	ble	1c20c <__assert_fail@plt+0xa86c>
   1c1d0:	ldr	r2, [r7, #12]
   1c1d4:	ldr	r3, [r8]
   1c1d8:	ldr	r1, [r2, r4, lsl #2]
   1c1dc:	add	r3, r3, r1, lsl #3
   1c1e0:	ldrb	r3, [r3, #4]
   1c1e4:	tst	r3, #8
   1c1e8:	bne	1c1c4 <__assert_fail@plt+0xa824>
   1c1ec:	mov	r0, r5
   1c1f0:	bl	1c114 <__assert_fail@plt+0xa774>
   1c1f4:	cmp	r0, #0
   1c1f8:	beq	1c24c <__assert_fail@plt+0xa8ac>
   1c1fc:	ldr	r0, [r7, #8]
   1c200:	add	r4, r4, #1
   1c204:	cmp	r0, r4
   1c208:	bgt	1c1d0 <__assert_fail@plt+0xa830>
   1c20c:	ldr	r4, [r8, #68]	; 0x44
   1c210:	ldr	r5, [r8, #32]
   1c214:	and	r6, r6, r4
   1c218:	add	r6, r6, r6, lsl #1
   1c21c:	lsl	r4, r6, #2
   1c220:	add	r6, r5, r4
   1c224:	ldr	r3, [r5, r4]
   1c228:	ldr	r2, [r6, #4]
   1c22c:	cmp	r2, r3
   1c230:	ldrgt	r2, [r6, #8]
   1c234:	ble	1c254 <__assert_fail@plt+0xa8b4>
   1c238:	add	r1, r3, #1
   1c23c:	str	r1, [r5, r4]
   1c240:	mov	r0, #0
   1c244:	str	r7, [r2, r3, lsl #2]
   1c248:	pop	{r4, r5, r6, r7, r8, pc}
   1c24c:	mov	r0, #12
   1c250:	pop	{r4, r5, r6, r7, r8, pc}
   1c254:	add	r3, r3, #1
   1c258:	ldr	r0, [r6, #8]
   1c25c:	lsl	r1, r3, #3
   1c260:	lsl	r8, r3, #1
   1c264:	bl	1babc <__assert_fail@plt+0xa11c>
   1c268:	subs	r2, r0, #0
   1c26c:	beq	1c24c <__assert_fail@plt+0xa8ac>
   1c270:	ldr	r3, [r5, r4]
   1c274:	str	r2, [r6, #8]
   1c278:	str	r8, [r6, #4]
   1c27c:	b	1c238 <__assert_fail@plt+0xa898>
   1c280:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c284:	mov	r5, r0
   1c288:	ldr	r9, [r0, #36]	; 0x24
   1c28c:	ldr	r3, [r0, #48]	; 0x30
   1c290:	ldr	r4, [r0, #28]
   1c294:	cmp	r9, r3
   1c298:	movge	r9, r3
   1c29c:	cmp	r9, r4
   1c2a0:	sub	sp, sp, #84	; 0x54
   1c2a4:	ble	1c344 <__assert_fail@plt+0xa9a4>
   1c2a8:	add	r7, r0, #16
   1c2ac:	add	r8, sp, #8
   1c2b0:	mov	sl, #1
   1c2b4:	mvn	r6, #0
   1c2b8:	ldm	r7, {r0, r1}
   1c2bc:	ldr	ip, [r5, #64]	; 0x40
   1c2c0:	sub	r2, r9, r4
   1c2c4:	cmp	ip, #0
   1c2c8:	stm	r8, {r0, r1}
   1c2cc:	bne	1c388 <__assert_fail@plt+0xa9e8>
   1c2d0:	ldr	r3, [r5, #24]
   1c2d4:	ldr	r1, [r5]
   1c2d8:	add	r3, r4, r3
   1c2dc:	add	r1, r1, r3
   1c2e0:	mov	r3, r7
   1c2e4:	add	r0, sp, #4
   1c2e8:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   1c2ec:	sub	r2, r0, #1
   1c2f0:	cmn	r2, #3
   1c2f4:	mov	r3, r0
   1c2f8:	bhi	1c354 <__assert_fail@plt+0xa9b4>
   1c2fc:	cmn	r0, #2
   1c300:	ldrne	r2, [sp, #4]
   1c304:	beq	1c3e8 <__assert_fail@plt+0xaa48>
   1c308:	ldr	r1, [r5, #8]
   1c30c:	add	r0, r4, r3
   1c310:	add	ip, r4, #1
   1c314:	cmp	ip, r0
   1c318:	str	r2, [r1, r4, lsl #2]
   1c31c:	add	r3, r1, r4, lsl #2
   1c320:	bge	1c410 <__assert_fail@plt+0xaa70>
   1c324:	sub	r2, r0, #-1073741823	; 0xc0000001
   1c328:	add	r2, r1, r2, lsl #2
   1c32c:	str	r6, [r3, #4]!
   1c330:	cmp	r2, r3
   1c334:	bne	1c32c <__assert_fail@plt+0xa98c>
   1c338:	mov	r4, r0
   1c33c:	cmp	r9, r4
   1c340:	bgt	1c2b8 <__assert_fail@plt+0xa918>
   1c344:	str	r4, [r5, #28]
   1c348:	str	r4, [r5, #32]
   1c34c:	add	sp, sp, #84	; 0x54
   1c350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c354:	ldr	r3, [r5]
   1c358:	ldr	r2, [r5, #24]
   1c35c:	add	r3, r3, r4
   1c360:	ldr	r1, [r5, #64]	; 0x40
   1c364:	ldrb	r2, [r3, r2]
   1c368:	cmp	r1, #0
   1c36c:	mov	r3, sl
   1c370:	str	r2, [sp, #4]
   1c374:	ldrbne	r2, [r1, r2]
   1c378:	ldm	r8, {r0, r1}
   1c37c:	strne	r2, [sp, #4]
   1c380:	stm	r7, {r0, r1}
   1c384:	b	1c308 <__assert_fail@plt+0xa968>
   1c388:	ldr	r3, [r5, #80]	; 0x50
   1c38c:	cmp	r3, #0
   1c390:	ble	1c3e0 <__assert_fail@plt+0xaa40>
   1c394:	add	r0, sp, #15
   1c398:	mov	r3, #0
   1c39c:	b	1c3a4 <__assert_fail@plt+0xaa04>
   1c3a0:	ldr	ip, [r5, #64]	; 0x40
   1c3a4:	ldr	r1, [r5]
   1c3a8:	ldr	lr, [r5, #24]
   1c3ac:	add	r1, r1, r4
   1c3b0:	add	r1, r1, r3
   1c3b4:	ldr	fp, [r5, #4]
   1c3b8:	ldrb	lr, [r1, lr]
   1c3bc:	add	r1, fp, r4
   1c3c0:	ldrb	ip, [ip, lr]
   1c3c4:	strb	ip, [r1, r3]
   1c3c8:	ldr	r1, [r5, #80]	; 0x50
   1c3cc:	add	r3, r3, #1
   1c3d0:	cmp	r1, r3
   1c3d4:	cmpgt	r2, r3
   1c3d8:	strb	ip, [r0, #1]!
   1c3dc:	bgt	1c3a0 <__assert_fail@plt+0xaa00>
   1c3e0:	add	r1, sp, #16
   1c3e4:	b	1c2e0 <__assert_fail@plt+0xa940>
   1c3e8:	ldr	r2, [r5, #36]	; 0x24
   1c3ec:	ldr	r3, [r5, #48]	; 0x30
   1c3f0:	cmp	r2, r3
   1c3f4:	bge	1c354 <__assert_fail@plt+0xa9b4>
   1c3f8:	ldm	r8, {r0, r1}
   1c3fc:	stm	r7, {r0, r1}
   1c400:	str	r4, [r5, #28]
   1c404:	str	r4, [r5, #32]
   1c408:	add	sp, sp, #84	; 0x54
   1c40c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c410:	mov	r4, ip
   1c414:	b	1c33c <__assert_fail@plt+0xa99c>
   1c418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c41c:	mov	r5, r0
   1c420:	ldr	r7, [r0, #36]	; 0x24
   1c424:	ldr	r3, [r0, #48]	; 0x30
   1c428:	ldrb	r2, [r0, #74]	; 0x4a
   1c42c:	cmp	r7, r3
   1c430:	movge	r7, r3
   1c434:	cmp	r2, #0
   1c438:	sub	sp, sp, #100	; 0x64
   1c43c:	ldr	r6, [r0, #28]
   1c440:	bne	1c450 <__assert_fail@plt+0xaab0>
   1c444:	ldr	r3, [r0, #64]	; 0x40
   1c448:	cmp	r3, #0
   1c44c:	beq	1c584 <__assert_fail@plt+0xabe4>
   1c450:	ldr	r4, [r5, #32]
   1c454:	cmp	r6, r7
   1c458:	bge	1c570 <__assert_fail@plt+0xabd0>
   1c45c:	sub	r3, r7, r6
   1c460:	str	r3, [sp, #4]
   1c464:	add	sl, r5, #16
   1c468:	add	r3, sp, #24
   1c46c:	str	r3, [sp]
   1c470:	add	r3, sp, #20
   1c474:	str	r3, [sp, #8]
   1c478:	ldm	sl, {r0, r1}
   1c47c:	ldr	r2, [r5, #64]	; 0x40
   1c480:	ldr	r3, [sp]
   1c484:	cmp	r2, #0
   1c488:	stm	r3, {r0, r1}
   1c48c:	bne	1c6d0 <__assert_fail@plt+0xad30>
   1c490:	ldr	r3, [r5, #24]
   1c494:	ldr	r2, [r5]
   1c498:	add	r3, r4, r3
   1c49c:	add	r3, r2, r3
   1c4a0:	str	r3, [sp, #12]
   1c4a4:	mov	r3, sl
   1c4a8:	ldr	r2, [sp, #4]
   1c4ac:	ldr	r0, [sp, #8]
   1c4b0:	ldr	r1, [sp, #12]
   1c4b4:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   1c4b8:	sub	r3, r0, #1
   1c4bc:	cmn	r3, #4
   1c4c0:	mov	r8, r0
   1c4c4:	str	r3, [sp, #4]
   1c4c8:	bhi	1c7e0 <__assert_fail@plt+0xae40>
   1c4cc:	ldr	fp, [sp, #20]
   1c4d0:	mov	r0, fp
   1c4d4:	bl	11940 <towupper@plt>
   1c4d8:	cmp	fp, r0
   1c4dc:	mov	r9, r0
   1c4e0:	beq	1c7c8 <__assert_fail@plt+0xae28>
   1c4e4:	add	r0, sp, #32
   1c4e8:	ldr	r2, [sp]
   1c4ec:	mov	r1, r9
   1c4f0:	bl	1152c <wcrtomb@plt>
   1c4f4:	cmp	r8, r0
   1c4f8:	mov	fp, r0
   1c4fc:	bne	1c880 <__assert_fail@plt+0xaee0>
   1c500:	ldr	r0, [r5, #4]
   1c504:	add	r1, sp, #32
   1c508:	add	r0, r0, r6
   1c50c:	mov	r2, r8
   1c510:	bl	115d4 <memcpy@plt>
   1c514:	ldrb	r3, [r5, #76]	; 0x4c
   1c518:	cmp	r3, #0
   1c51c:	bne	1c858 <__assert_fail@plt+0xaeb8>
   1c520:	add	r2, r8, r4
   1c524:	ldr	r3, [r5, #8]
   1c528:	add	r8, r6, r8
   1c52c:	add	r1, r6, #1
   1c530:	cmp	r1, r8
   1c534:	mov	r4, r2
   1c538:	str	r9, [r3, r6, lsl #2]
   1c53c:	bge	1c878 <__assert_fail@plt+0xaed8>
   1c540:	sub	r2, r8, #-1073741823	; 0xc0000001
   1c544:	add	r6, r3, r6, lsl #2
   1c548:	add	r3, r3, r2, lsl #2
   1c54c:	mvn	r2, #0
   1c550:	str	r2, [r6, #4]!
   1c554:	cmp	r3, r6
   1c558:	bne	1c550 <__assert_fail@plt+0xabb0>
   1c55c:	mov	r6, r8
   1c560:	b	1c454 <__assert_fail@plt+0xaab4>
   1c564:	ldr	r3, [sp]
   1c568:	ldm	r3, {r0, r1}
   1c56c:	stm	sl, {r0, r1}
   1c570:	mov	r0, #0
   1c574:	str	r6, [r5, #28]
   1c578:	str	r4, [r5, #32]
   1c57c:	add	sp, sp, #100	; 0x64
   1c580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c584:	ldrb	r3, [r0, #76]	; 0x4c
   1c588:	cmp	r3, #0
   1c58c:	bne	1c450 <__assert_fail@plt+0xaab0>
   1c590:	cmp	r6, r7
   1c594:	bge	1c7b8 <__assert_fail@plt+0xae18>
   1c598:	add	sl, r0, #16
   1c59c:	mvn	r9, #0
   1c5a0:	b	1c5d0 <__assert_fail@plt+0xac30>
   1c5a4:	mov	r0, fp
   1c5a8:	bl	11940 <towupper@plt>
   1c5ac:	bics	r3, r0, #127	; 0x7f
   1c5b0:	bne	1c5f8 <__assert_fail@plt+0xac58>
   1c5b4:	ldr	r3, [r5, #4]
   1c5b8:	strb	r0, [r3, r6]
   1c5bc:	ldr	r3, [r5, #8]
   1c5c0:	str	r0, [r3, r6, lsl #2]
   1c5c4:	add	r6, r6, #1
   1c5c8:	cmp	r7, r6
   1c5cc:	ble	1c7b8 <__assert_fail@plt+0xae18>
   1c5d0:	ldr	r8, [r5]
   1c5d4:	ldr	r4, [r5, #24]
   1c5d8:	add	r3, r8, r4
   1c5dc:	ldrb	fp, [r3, r6]
   1c5e0:	tst	fp, #128	; 0x80
   1c5e4:	bne	1c5f8 <__assert_fail@plt+0xac58>
   1c5e8:	mov	r0, sl
   1c5ec:	bl	11604 <mbsinit@plt>
   1c5f0:	cmp	r0, #0
   1c5f4:	bne	1c5a4 <__assert_fail@plt+0xac04>
   1c5f8:	ldm	sl, {r0, r1}
   1c5fc:	add	r2, sp, #24
   1c600:	sub	r3, r7, r6
   1c604:	add	r4, r4, r6
   1c608:	stm	r2, {r0, r1}
   1c60c:	str	r3, [sp, #4]
   1c610:	mov	r2, r3
   1c614:	add	r1, r8, r4
   1c618:	mov	r3, sl
   1c61c:	add	r0, sp, #20
   1c620:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   1c624:	add	r2, sp, #24
   1c628:	str	r2, [sp]
   1c62c:	add	r2, sp, #20
   1c630:	mov	r4, r6
   1c634:	str	r2, [sp, #8]
   1c638:	sub	r3, r0, #1
   1c63c:	cmn	r3, #4
   1c640:	mov	r8, r0
   1c644:	bhi	1c74c <__assert_fail@plt+0xadac>
   1c648:	ldr	r3, [sp, #20]
   1c64c:	mov	r0, r3
   1c650:	str	r3, [sp, #12]
   1c654:	bl	11940 <towupper@plt>
   1c658:	ldr	r3, [sp, #12]
   1c65c:	cmp	r3, r0
   1c660:	mov	fp, r0
   1c664:	beq	1c728 <__assert_fail@plt+0xad88>
   1c668:	mov	r1, r0
   1c66c:	add	r2, sp, #24
   1c670:	add	r0, sp, #32
   1c674:	bl	1152c <wcrtomb@plt>
   1c678:	cmp	r8, r0
   1c67c:	bne	1c77c <__assert_fail@plt+0xaddc>
   1c680:	ldr	r0, [r5, #4]
   1c684:	mov	r2, r8
   1c688:	add	r0, r0, r6
   1c68c:	add	r1, sp, #32
   1c690:	bl	115d4 <memcpy@plt>
   1c694:	add	r6, r6, #1
   1c698:	ldr	r2, [r5, #8]
   1c69c:	sub	r3, r6, #1
   1c6a0:	add	r8, r3, r8
   1c6a4:	cmp	r6, r8
   1c6a8:	str	fp, [r2, r4, lsl #2]
   1c6ac:	add	r4, r2, r4, lsl #2
   1c6b0:	bge	1c5c8 <__assert_fail@plt+0xac28>
   1c6b4:	sub	r3, r8, #-1073741823	; 0xc0000001
   1c6b8:	add	r3, r2, r3, lsl #2
   1c6bc:	str	r9, [r4, #4]!
   1c6c0:	cmp	r4, r3
   1c6c4:	bne	1c6bc <__assert_fail@plt+0xad1c>
   1c6c8:	mov	r6, r8
   1c6cc:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c6d0:	ldr	lr, [r5, #80]	; 0x50
   1c6d4:	cmp	lr, #0
   1c6d8:	ble	1c71c <__assert_fail@plt+0xad7c>
   1c6dc:	ldr	r3, [r5, #24]
   1c6e0:	ldr	r0, [sp, #4]
   1c6e4:	ldr	r1, [r5]
   1c6e8:	add	r3, r4, r3
   1c6ec:	cmp	lr, r0
   1c6f0:	sub	r3, r3, #1
   1c6f4:	movge	lr, r0
   1c6f8:	add	r1, r1, r3
   1c6fc:	add	r0, sp, #31
   1c700:	mov	r3, #0
   1c704:	ldrb	ip, [r1, #1]!
   1c708:	add	r3, r3, #1
   1c70c:	cmp	r3, lr
   1c710:	ldrb	ip, [r2, ip]
   1c714:	strb	ip, [r0, #1]!
   1c718:	blt	1c704 <__assert_fail@plt+0xad64>
   1c71c:	add	r3, sp, #32
   1c720:	str	r3, [sp, #12]
   1c724:	b	1c4a4 <__assert_fail@plt+0xab04>
   1c728:	ldr	r3, [r5, #24]
   1c72c:	ldr	r1, [r5]
   1c730:	ldr	r0, [r5, #4]
   1c734:	add	r3, r6, r3
   1c738:	add	r1, r1, r3
   1c73c:	add	r0, r0, r6
   1c740:	mov	r2, r8
   1c744:	bl	115d4 <memcpy@plt>
   1c748:	b	1c694 <__assert_fail@plt+0xacf4>
   1c74c:	cmn	r3, #3
   1c750:	bne	1c784 <__assert_fail@plt+0xade4>
   1c754:	ldr	r2, [r5, #36]	; 0x24
   1c758:	ldr	r3, [r5, #48]	; 0x30
   1c75c:	cmp	r2, r3
   1c760:	blt	1c7ac <__assert_fail@plt+0xae0c>
   1c764:	ldr	r3, [r5, #4]
   1c768:	strb	fp, [r3, r6]
   1c76c:	ldr	r3, [r5, #8]
   1c770:	add	r6, r6, #1
   1c774:	str	fp, [r3, r4, lsl #2]
   1c778:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c77c:	mov	r4, r6
   1c780:	b	1c478 <__assert_fail@plt+0xaad8>
   1c784:	ldr	r3, [r5, #4]
   1c788:	cmn	r0, #1
   1c78c:	strb	fp, [r3, r6]
   1c790:	ldr	r3, [r5, #8]
   1c794:	add	r6, r6, #1
   1c798:	str	fp, [r3, r4, lsl #2]
   1c79c:	addeq	r3, sp, #24
   1c7a0:	ldmeq	r3, {r0, r1}
   1c7a4:	stmeq	sl, {r0, r1}
   1c7a8:	b	1c5c8 <__assert_fail@plt+0xac28>
   1c7ac:	add	r3, sp, #24
   1c7b0:	ldm	r3, {r0, r1}
   1c7b4:	stm	sl, {r0, r1}
   1c7b8:	str	r6, [r5, #28]
   1c7bc:	str	r6, [r5, #32]
   1c7c0:	mov	r0, #0
   1c7c4:	b	1c57c <__assert_fail@plt+0xabdc>
   1c7c8:	ldr	r0, [r5, #4]
   1c7cc:	ldr	r1, [sp, #12]
   1c7d0:	add	r0, r0, r6
   1c7d4:	mov	r2, r8
   1c7d8:	bl	115d4 <memcpy@plt>
   1c7dc:	b	1c514 <__assert_fail@plt+0xab74>
   1c7e0:	ldr	r3, [sp, #4]
   1c7e4:	cmn	r3, #3
   1c7e8:	bne	1c7fc <__assert_fail@plt+0xae5c>
   1c7ec:	ldr	r2, [r5, #36]	; 0x24
   1c7f0:	ldr	r3, [r5, #48]	; 0x30
   1c7f4:	cmp	r2, r3
   1c7f8:	blt	1c564 <__assert_fail@plt+0xabc4>
   1c7fc:	ldr	r3, [r5]
   1c800:	ldr	r1, [r5, #24]
   1c804:	add	r3, r3, r4
   1c808:	ldr	r2, [r5, #64]	; 0x40
   1c80c:	ldrb	r3, [r3, r1]
   1c810:	cmp	r2, #0
   1c814:	mov	r1, r6
   1c818:	ldrbne	r3, [r2, r3]
   1c81c:	ldr	r2, [r5, #4]
   1c820:	strb	r3, [r2, r6]
   1c824:	ldrb	r2, [r5, #76]	; 0x4c
   1c828:	cmp	r2, #0
   1c82c:	ldrne	r2, [r5, #12]
   1c830:	strne	r4, [r2, r6, lsl #2]
   1c834:	ldr	r2, [r5, #8]
   1c838:	cmn	r8, #1
   1c83c:	add	r4, r4, #1
   1c840:	add	r6, r6, #1
   1c844:	str	r3, [r2, r1, lsl #2]
   1c848:	ldreq	r3, [sp]
   1c84c:	ldmeq	r3, {r0, r1}
   1c850:	stmeq	sl, {r0, r1}
   1c854:	b	1c454 <__assert_fail@plt+0xaab4>
   1c858:	ldr	r3, [r5, #12]
   1c85c:	add	r2, r8, r4
   1c860:	add	r3, r3, r6, lsl #2
   1c864:	str	r4, [r3], #4
   1c868:	add	r4, r4, #1
   1c86c:	cmp	r2, r4
   1c870:	bne	1c864 <__assert_fail@plt+0xaec4>
   1c874:	b	1c524 <__assert_fail@plt+0xab84>
   1c878:	mov	r6, r1
   1c87c:	b	1c454 <__assert_fail@plt+0xaab4>
   1c880:	cmn	r0, #1
   1c884:	beq	1c7c8 <__assert_fail@plt+0xae28>
   1c888:	ldr	r0, [r5, #36]	; 0x24
   1c88c:	add	r7, fp, r6
   1c890:	cmp	r7, r0
   1c894:	bhi	1c564 <__assert_fail@plt+0xabc4>
   1c898:	ldr	r3, [r5, #12]
   1c89c:	cmp	r3, #0
   1c8a0:	beq	1c97c <__assert_fail@plt+0xafdc>
   1c8a4:	ldrb	r3, [r5, #76]	; 0x4c
   1c8a8:	cmp	r3, #0
   1c8ac:	bne	1c8d8 <__assert_fail@plt+0xaf38>
   1c8b0:	cmp	r6, #0
   1c8b4:	ldrne	r2, [r5, #12]
   1c8b8:	subne	r2, r2, #4
   1c8bc:	beq	1c8d0 <__assert_fail@plt+0xaf30>
   1c8c0:	str	r3, [r2, #4]!
   1c8c4:	add	r3, r3, #1
   1c8c8:	cmp	r6, r3
   1c8cc:	bne	1c8c0 <__assert_fail@plt+0xaf20>
   1c8d0:	mov	r3, #1
   1c8d4:	strb	r3, [r5, #76]	; 0x4c
   1c8d8:	ldr	r0, [r5, #4]
   1c8dc:	add	r1, sp, #32
   1c8e0:	mov	r2, fp
   1c8e4:	add	r0, r0, r6
   1c8e8:	bl	115d4 <memcpy@plt>
   1c8ec:	ldr	r3, [r5, #8]
   1c8f0:	ldr	r1, [r5, #12]
   1c8f4:	lsl	r2, r6, #2
   1c8f8:	cmp	fp, #1
   1c8fc:	str	r9, [r3, r6, lsl #2]
   1c900:	add	r3, r3, r2
   1c904:	str	r4, [r1, r6, lsl #2]
   1c908:	add	r2, r1, r2
   1c90c:	bls	1c93c <__assert_fail@plt+0xaf9c>
   1c910:	mov	r1, #1
   1c914:	mvn	ip, #0
   1c918:	cmp	r1, r8
   1c91c:	ldr	r0, [sp, #4]
   1c920:	movcc	r0, r1
   1c924:	add	r1, r1, #1
   1c928:	add	r0, r0, r4
   1c92c:	cmp	fp, r1
   1c930:	str	r0, [r2, #4]!
   1c934:	str	ip, [r3, #4]!
   1c938:	bne	1c918 <__assert_fail@plt+0xaf78>
   1c93c:	ldr	r2, [r5, #52]	; 0x34
   1c940:	ldr	r3, [r5, #48]	; 0x30
   1c944:	cmp	r4, r2
   1c948:	sub	fp, fp, r8
   1c94c:	ldrlt	r2, [r5, #56]	; 0x38
   1c950:	add	r3, fp, r3
   1c954:	addlt	fp, r2, fp
   1c958:	ldr	r2, [r5, #36]	; 0x24
   1c95c:	strlt	fp, [r5, #56]	; 0x38
   1c960:	cmp	r3, r2
   1c964:	mov	r6, r7
   1c968:	str	r3, [r5, #48]	; 0x30
   1c96c:	add	r4, r8, r4
   1c970:	movlt	r7, r3
   1c974:	movge	r7, r2
   1c978:	b	1c454 <__assert_fail@plt+0xaab4>
   1c97c:	lsl	r0, r0, #2
   1c980:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1c984:	cmp	r0, #0
   1c988:	str	r0, [r5, #12]
   1c98c:	moveq	r0, #12
   1c990:	bne	1c8a4 <__assert_fail@plt+0xaf04>
   1c994:	b	1c57c <__assert_fail@plt+0xabdc>
   1c998:	push	{r4, r5, r6, lr}
   1c99c:	mov	r5, r0
   1c9a0:	ldr	r6, [r0, #36]	; 0x24
   1c9a4:	ldr	r3, [r0, #48]	; 0x30
   1c9a8:	ldr	r4, [r0, #28]
   1c9ac:	cmp	r6, r3
   1c9b0:	movge	r6, r3
   1c9b4:	cmp	r6, r4
   1c9b8:	ble	1c9fc <__assert_fail@plt+0xb05c>
   1c9bc:	bl	11754 <__ctype_toupper_loc@plt>
   1c9c0:	ldr	r3, [r5]
   1c9c4:	ldr	r2, [r5, #24]
   1c9c8:	add	r3, r3, r4
   1c9cc:	ldr	r1, [r5, #64]	; 0x40
   1c9d0:	ldrb	r2, [r3, r2]
   1c9d4:	cmp	r1, #0
   1c9d8:	ldr	r3, [r5, #4]
   1c9dc:	ldrbne	r2, [r1, r2]
   1c9e0:	ldr	r1, [r0]
   1c9e4:	add	r3, r3, r4
   1c9e8:	add	r4, r4, #1
   1c9ec:	ldr	r2, [r1, r2, lsl #2]
   1c9f0:	cmp	r6, r4
   1c9f4:	strb	r2, [r3]
   1c9f8:	bne	1c9c0 <__assert_fail@plt+0xb020>
   1c9fc:	str	r4, [r5, #28]
   1ca00:	str	r4, [r5, #32]
   1ca04:	pop	{r4, r5, r6, pc}
   1ca08:	ldr	r3, [r0, #36]	; 0x24
   1ca0c:	push	{r4, r5, r6, lr}
   1ca10:	cmn	r3, #-536870910	; 0xe0000002
   1ca14:	bhi	1cafc <__assert_fail@plt+0xb15c>
   1ca18:	ldr	r2, [r0, #48]	; 0x30
   1ca1c:	lsl	r3, r3, #1
   1ca20:	cmp	r3, r2
   1ca24:	movge	r3, r2
   1ca28:	cmp	r3, r1
   1ca2c:	movge	r1, r3
   1ca30:	mov	r4, r0
   1ca34:	bl	1c080 <__assert_fail@plt+0xa6e0>
   1ca38:	subs	r5, r0, #0
   1ca3c:	bne	1caf4 <__assert_fail@plt+0xb154>
   1ca40:	ldr	r0, [r4, #100]	; 0x64
   1ca44:	cmp	r0, #0
   1ca48:	beq	1ca68 <__assert_fail@plt+0xb0c8>
   1ca4c:	ldr	r1, [r4, #36]	; 0x24
   1ca50:	add	r1, r1, #1
   1ca54:	lsl	r1, r1, #2
   1ca58:	bl	1babc <__assert_fail@plt+0xa11c>
   1ca5c:	cmp	r0, #0
   1ca60:	beq	1cafc <__assert_fail@plt+0xb15c>
   1ca64:	str	r0, [r4, #100]	; 0x64
   1ca68:	ldrb	r3, [r4, #72]	; 0x48
   1ca6c:	cmp	r3, #0
   1ca70:	ldr	r3, [r4, #80]	; 0x50
   1ca74:	beq	1ca8c <__assert_fail@plt+0xb0ec>
   1ca78:	cmp	r3, #1
   1ca7c:	mov	r0, r4
   1ca80:	ble	1cb18 <__assert_fail@plt+0xb178>
   1ca84:	pop	{r4, r5, r6, lr}
   1ca88:	b	1c418 <__assert_fail@plt+0xaa78>
   1ca8c:	cmp	r3, #1
   1ca90:	bgt	1cb08 <__assert_fail@plt+0xb168>
   1ca94:	ldr	r1, [r4, #64]	; 0x40
   1ca98:	cmp	r1, #0
   1ca9c:	beq	1caf4 <__assert_fail@plt+0xb154>
   1caa0:	ldr	lr, [r4, #36]	; 0x24
   1caa4:	ldr	r2, [r4, #48]	; 0x30
   1caa8:	ldr	r3, [r4, #28]
   1caac:	cmp	lr, r2
   1cab0:	movge	lr, r2
   1cab4:	cmp	lr, r3
   1cab8:	bgt	1cac4 <__assert_fail@plt+0xb124>
   1cabc:	b	1caec <__assert_fail@plt+0xb14c>
   1cac0:	ldr	r1, [r4, #64]	; 0x40
   1cac4:	ldr	r2, [r4]
   1cac8:	ldr	ip, [r4, #24]
   1cacc:	add	r2, r2, r3
   1cad0:	ldr	r0, [r4, #4]
   1cad4:	ldrb	r2, [r2, ip]
   1cad8:	ldrb	r2, [r1, r2]
   1cadc:	strb	r2, [r0, r3]
   1cae0:	add	r3, r3, #1
   1cae4:	cmp	lr, r3
   1cae8:	bne	1cac0 <__assert_fail@plt+0xb120>
   1caec:	str	r3, [r4, #28]
   1caf0:	str	r3, [r4, #32]
   1caf4:	mov	r0, r5
   1caf8:	pop	{r4, r5, r6, pc}
   1cafc:	mov	r5, #12
   1cb00:	mov	r0, r5
   1cb04:	pop	{r4, r5, r6, pc}
   1cb08:	mov	r0, r4
   1cb0c:	bl	1c280 <__assert_fail@plt+0xa8e0>
   1cb10:	mov	r0, r5
   1cb14:	pop	{r4, r5, r6, pc}
   1cb18:	bl	1c998 <__assert_fail@plt+0xaff8>
   1cb1c:	b	1caf4 <__assert_fail@plt+0xb154>
   1cb20:	push	{r4, lr}
   1cb24:	mov	r4, r0
   1cb28:	ldr	r0, [r0]
   1cb2c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cb30:	ldr	r0, [r4, #4]
   1cb34:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cb38:	ldr	r0, [r4, #8]
   1cb3c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cb40:	ldr	r0, [r4, #12]
   1cb44:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cb48:	mov	r0, r4
   1cb4c:	pop	{r4, lr}
   1cb50:	b	1b944 <__assert_fail@plt+0x9fa4>
   1cb54:	ldr	r3, [pc, #36]	; 1cb80 <__assert_fail@plt+0xb1e0>
   1cb58:	ldr	r2, [r0, #4]
   1cb5c:	and	r3, r3, r2
   1cb60:	cmp	r3, #6
   1cb64:	beq	1cb78 <__assert_fail@plt+0xb1d8>
   1cb68:	cmp	r3, #3
   1cb6c:	bxne	lr
   1cb70:	ldr	r0, [r0]
   1cb74:	b	1b944 <__assert_fail@plt+0x9fa4>
   1cb78:	ldr	r0, [r0]
   1cb7c:	b	1cb20 <__assert_fail@plt+0xb180>
   1cb80:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1cb84:	add	r0, r1, #20
   1cb88:	push	{r4, lr}
   1cb8c:	bl	1cb54 <__assert_fail@plt+0xb1b4>
   1cb90:	mov	r0, #0
   1cb94:	pop	{r4, pc}
   1cb98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb9c:	sub	sp, sp, #12
   1cba0:	ldmib	r0, {r5, ip}
   1cba4:	stm	sp, {r1, r2}
   1cba8:	mov	r4, r0
   1cbac:	cmp	ip, r5
   1cbb0:	mov	r8, sp
   1cbb4:	ldrb	r6, [sp, #4]
   1cbb8:	bcs	1cc78 <__assert_fail@plt+0xb2d8>
   1cbbc:	ldr	r7, [r0, #12]
   1cbc0:	ldr	r5, [r0, #20]
   1cbc4:	ldm	r8, {r0, r1}
   1cbc8:	ldr	r3, [r4]
   1cbcc:	cmp	r6, #5
   1cbd0:	add	r3, r3, ip, lsl #3
   1cbd4:	bic	r2, r1, #261120	; 0x3fc00
   1cbd8:	bic	r2, r2, #768	; 0x300
   1cbdc:	stm	r3, {r0, r1}
   1cbe0:	str	r2, [r3, #4]
   1cbe4:	beq	1cc64 <__assert_fail@plt+0xb2c4>
   1cbe8:	sub	r6, r6, #6
   1cbec:	clz	r6, r6
   1cbf0:	lsr	r6, r6, #5
   1cbf4:	ldrb	r2, [r3, #6]
   1cbf8:	mvn	r1, #0
   1cbfc:	bic	r2, r2, #16
   1cc00:	orr	r2, r2, r6, lsl #4
   1cc04:	strb	r2, [r3, #6]
   1cc08:	str	r1, [r7, ip, lsl #2]
   1cc0c:	ldr	r3, [r4, #8]
   1cc10:	mov	r2, #0
   1cc14:	add	r3, r3, r3, lsl #1
   1cc18:	lsl	r3, r3, #2
   1cc1c:	add	r1, r5, r3
   1cc20:	str	r2, [r5, r3]
   1cc24:	str	r2, [r1, #4]
   1cc28:	str	r2, [r1, #8]
   1cc2c:	ldr	r3, [r4, #8]
   1cc30:	ldr	r0, [r4, #24]
   1cc34:	add	r3, r3, r3, lsl #1
   1cc38:	lsl	r3, r3, #2
   1cc3c:	add	r1, r0, r3
   1cc40:	str	r2, [r0, r3]
   1cc44:	str	r2, [r1, #4]
   1cc48:	str	r2, [r1, #8]
   1cc4c:	ldr	r3, [r4, #8]
   1cc50:	mov	r0, r3
   1cc54:	add	r3, r3, #1
   1cc58:	str	r3, [r4, #8]
   1cc5c:	add	sp, sp, #12
   1cc60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc64:	ldr	r6, [r4, #92]	; 0x5c
   1cc68:	cmp	r6, #1
   1cc6c:	movle	r6, #0
   1cc70:	movgt	r6, #1
   1cc74:	b	1cbf4 <__assert_fail@plt+0xb254>
   1cc78:	ldr	r3, [pc, #200]	; 1cd48 <__assert_fail@plt+0xb3a8>
   1cc7c:	lsl	r9, r5, #1
   1cc80:	cmp	r9, r3
   1cc84:	bhi	1cd40 <__assert_fail@plt+0xb3a0>
   1cc88:	lsl	r1, r5, #4
   1cc8c:	ldr	r0, [r0]
   1cc90:	bl	1babc <__assert_fail@plt+0xa11c>
   1cc94:	cmp	r0, #0
   1cc98:	beq	1cd40 <__assert_fail@plt+0xb3a0>
   1cc9c:	lsl	sl, r5, #3
   1cca0:	mov	r1, sl
   1cca4:	str	r0, [r4]
   1cca8:	ldr	r0, [r4, #12]
   1ccac:	bl	1babc <__assert_fail@plt+0xa11c>
   1ccb0:	mov	r1, sl
   1ccb4:	add	r5, r9, r5, lsl #2
   1ccb8:	lsl	sl, r5, #2
   1ccbc:	mov	r7, r0
   1ccc0:	ldr	r0, [r4, #16]
   1ccc4:	bl	1babc <__assert_fail@plt+0xa11c>
   1ccc8:	mov	r1, sl
   1cccc:	mov	fp, r0
   1ccd0:	ldr	r0, [r4, #20]
   1ccd4:	bl	1babc <__assert_fail@plt+0xa11c>
   1ccd8:	mov	r1, sl
   1ccdc:	mov	r5, r0
   1cce0:	ldr	r0, [r4, #24]
   1cce4:	bl	1babc <__assert_fail@plt+0xa11c>
   1cce8:	cmp	fp, #0
   1ccec:	cmpne	r7, #0
   1ccf0:	mov	sl, r0
   1ccf4:	beq	1cd20 <__assert_fail@plt+0xb380>
   1ccf8:	cmp	r0, #0
   1ccfc:	cmpne	r5, #0
   1cd00:	beq	1cd20 <__assert_fail@plt+0xb380>
   1cd04:	ldr	ip, [r4, #8]
   1cd08:	str	r7, [r4, #12]
   1cd0c:	str	fp, [r4, #16]
   1cd10:	str	r5, [r4, #20]
   1cd14:	str	r0, [r4, #24]
   1cd18:	str	r9, [r4, #4]
   1cd1c:	b	1cbc4 <__assert_fail@plt+0xb224>
   1cd20:	mov	r0, r7
   1cd24:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cd28:	mov	r0, fp
   1cd2c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cd30:	mov	r0, r5
   1cd34:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cd38:	mov	r0, sl
   1cd3c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cd40:	mvn	r0, #0
   1cd44:	b	1cc5c <__assert_fail@plt+0xb2bc>
   1cd48:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   1cd4c:	ldr	r3, [r0]
   1cd50:	push	{r4, r5, r6, r7, r8, lr}
   1cd54:	lsl	r7, r1, #3
   1cd58:	add	r3, r3, r7
   1cd5c:	mov	r5, r1
   1cd60:	mov	r6, r2
   1cd64:	ldm	r3, {r1, r2}
   1cd68:	mov	r4, r0
   1cd6c:	bl	1cb98 <__assert_fail@plt+0xb1f8>
   1cd70:	cmn	r0, #1
   1cd74:	popeq	{r4, r5, r6, r7, r8, pc}
   1cd78:	ldr	lr, [r4]
   1cd7c:	ldr	ip, [pc, #80]	; 1cdd4 <__assert_fail@plt+0xb434>
   1cd80:	add	r1, lr, r0, lsl #3
   1cd84:	ldr	r8, [pc, #76]	; 1cdd8 <__assert_fail@plt+0xb438>
   1cd88:	ldr	r3, [r1, #4]
   1cd8c:	and	r2, r6, ip
   1cd90:	add	r7, lr, r7
   1cd94:	bic	r3, r3, r8
   1cd98:	orr	r3, r3, r2, lsl #8
   1cd9c:	str	r3, [r1, #4]
   1cda0:	ldr	lr, [r7, #4]
   1cda4:	bic	r3, r3, r8
   1cda8:	and	ip, ip, lr, lsr #8
   1cdac:	orr	r2, r2, ip
   1cdb0:	orr	r3, r3, r2, lsl #8
   1cdb4:	str	r3, [r1, #4]
   1cdb8:	lsr	r3, r3, #16
   1cdbc:	uxtb	r3, r3
   1cdc0:	orr	r3, r3, #4
   1cdc4:	strb	r3, [r1, #6]
   1cdc8:	ldr	r3, [r4, #16]
   1cdcc:	str	r5, [r3, r0, lsl #2]
   1cdd0:	pop	{r4, r5, r6, r7, r8, pc}
   1cdd4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1cdd8:	andeq	pc, r3, r0, lsl #30
   1cddc:	push	{r4, lr}
   1cde0:	mov	r4, r0
   1cde4:	ldr	r0, [r0, #24]
   1cde8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cdec:	ldr	r0, [r4, #36]	; 0x24
   1cdf0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cdf4:	ldr	r3, [r4, #40]	; 0x28
   1cdf8:	add	r2, r4, #4
   1cdfc:	cmp	r3, r2
   1ce00:	beq	1ce14 <__assert_fail@plt+0xb474>
   1ce04:	ldr	r0, [r3, #8]
   1ce08:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1ce0c:	ldr	r0, [r4, #40]	; 0x28
   1ce10:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1ce14:	ldr	r0, [r4, #12]
   1ce18:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1ce1c:	ldr	r0, [r4, #48]	; 0x30
   1ce20:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1ce24:	ldr	r0, [r4, #44]	; 0x2c
   1ce28:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1ce2c:	mov	r0, r4
   1ce30:	pop	{r4, lr}
   1ce34:	b	1b944 <__assert_fail@plt+0x9fa4>
   1ce38:	push	{r4, lr}
   1ce3c:	mov	r4, r0
   1ce40:	ldr	r0, [r0, #8]
   1ce44:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1ce48:	ldr	r0, [r4, #12]
   1ce4c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1ce50:	ldrb	r3, [r4, #75]	; 0x4b
   1ce54:	cmp	r3, #0
   1ce58:	popeq	{r4, pc}
   1ce5c:	ldr	r0, [r4, #4]
   1ce60:	pop	{r4, lr}
   1ce64:	b	1b944 <__assert_fail@plt+0x9fa4>
   1ce68:	push	{r4, r5, r6, r7, r8, lr}
   1ce6c:	mov	r6, r0
   1ce70:	ldr	r0, [r0]
   1ce74:	cmp	r0, #0
   1ce78:	beq	1ceac <__assert_fail@plt+0xb50c>
   1ce7c:	ldr	r3, [r6, #8]
   1ce80:	cmp	r3, #0
   1ce84:	beq	1ceac <__assert_fail@plt+0xb50c>
   1ce88:	mov	r4, #0
   1ce8c:	b	1ce94 <__assert_fail@plt+0xb4f4>
   1ce90:	ldr	r0, [r6]
   1ce94:	add	r0, r0, r4, lsl #3
   1ce98:	bl	1cb54 <__assert_fail@plt+0xb1b4>
   1ce9c:	ldr	r3, [r6, #8]
   1cea0:	add	r4, r4, #1
   1cea4:	cmp	r3, r4
   1cea8:	bhi	1ce90 <__assert_fail@plt+0xb4f0>
   1ceac:	ldr	r0, [r6, #12]
   1ceb0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1ceb4:	ldr	r3, [r6, #8]
   1ceb8:	cmp	r3, #0
   1cebc:	movne	r4, #0
   1cec0:	movne	r5, r4
   1cec4:	beq	1cf24 <__assert_fail@plt+0xb584>
   1cec8:	ldr	r3, [r6, #24]
   1cecc:	add	r5, r5, #1
   1ced0:	cmp	r3, #0
   1ced4:	add	r2, r3, r4
   1ced8:	beq	1cee4 <__assert_fail@plt+0xb544>
   1cedc:	ldr	r0, [r2, #8]
   1cee0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cee4:	ldr	r3, [r6, #28]
   1cee8:	cmp	r3, #0
   1ceec:	add	r2, r3, r4
   1cef0:	beq	1cefc <__assert_fail@plt+0xb55c>
   1cef4:	ldr	r0, [r2, #8]
   1cef8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cefc:	ldr	r3, [r6, #20]
   1cf00:	cmp	r3, #0
   1cf04:	add	r2, r3, r4
   1cf08:	beq	1cf14 <__assert_fail@plt+0xb574>
   1cf0c:	ldr	r0, [r2, #8]
   1cf10:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cf14:	ldr	r3, [r6, #8]
   1cf18:	add	r4, r4, #12
   1cf1c:	cmp	r3, r5
   1cf20:	bhi	1cec8 <__assert_fail@plt+0xb528>
   1cf24:	ldr	r0, [r6, #20]
   1cf28:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cf2c:	ldr	r0, [r6, #24]
   1cf30:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cf34:	ldr	r0, [r6, #28]
   1cf38:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cf3c:	ldr	r0, [r6]
   1cf40:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cf44:	ldr	r0, [r6, #32]
   1cf48:	cmp	r0, #0
   1cf4c:	beq	1cfac <__assert_fail@plt+0xb60c>
   1cf50:	mov	r7, #0
   1cf54:	mov	r8, r7
   1cf58:	ldr	r3, [r0, r7]
   1cf5c:	add	r5, r0, r7
   1cf60:	cmp	r3, #0
   1cf64:	movgt	r4, #0
   1cf68:	ble	1cf88 <__assert_fail@plt+0xb5e8>
   1cf6c:	ldr	r3, [r5, #8]
   1cf70:	ldr	r0, [r3, r4, lsl #2]
   1cf74:	bl	1cddc <__assert_fail@plt+0xb43c>
   1cf78:	ldr	r3, [r5]
   1cf7c:	add	r4, r4, #1
   1cf80:	cmp	r3, r4
   1cf84:	bgt	1cf6c <__assert_fail@plt+0xb5cc>
   1cf88:	ldr	r0, [r5, #8]
   1cf8c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cf90:	ldr	r3, [r6, #68]	; 0x44
   1cf94:	add	r8, r8, #1
   1cf98:	cmp	r3, r8
   1cf9c:	add	r7, r7, #12
   1cfa0:	ldrcs	r0, [r6, #32]
   1cfa4:	bcs	1cf58 <__assert_fail@plt+0xb5b8>
   1cfa8:	ldr	r0, [r6, #32]
   1cfac:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cfb0:	ldr	r0, [r6, #60]	; 0x3c
   1cfb4:	ldr	r3, [pc, #28]	; 1cfd8 <__assert_fail@plt+0xb638>
   1cfb8:	cmp	r0, r3
   1cfbc:	beq	1cfc4 <__assert_fail@plt+0xb624>
   1cfc0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cfc4:	ldr	r0, [r6, #132]	; 0x84
   1cfc8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1cfcc:	mov	r0, r6
   1cfd0:	pop	{r4, r5, r6, r7, r8, lr}
   1cfd4:	b	1b944 <__assert_fail@plt+0x9fa4>
   1cfd8:	andeq	ip, r2, ip, lsr #28
   1cfdc:	ldr	r3, [r0, #124]	; 0x7c
   1cfe0:	push	{r4, r5, r6, r7, r8, lr}
   1cfe4:	cmp	r3, #0
   1cfe8:	mov	r8, r0
   1cfec:	movgt	r7, #0
   1cff0:	ble	1d070 <__assert_fail@plt+0xb6d0>
   1cff4:	ldr	r3, [r8, #132]	; 0x84
   1cff8:	ldr	r6, [r3, r7, lsl #2]
   1cffc:	ldr	r3, [r6, #16]
   1d000:	cmp	r3, #0
   1d004:	movgt	r4, #0
   1d008:	ble	1d034 <__assert_fail@plt+0xb694>
   1d00c:	ldr	r3, [r6, #20]
   1d010:	ldr	r5, [r3, r4, lsl #2]
   1d014:	add	r4, r4, #1
   1d018:	ldr	r0, [r5, #16]
   1d01c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1d020:	mov	r0, r5
   1d024:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1d028:	ldr	r3, [r6, #16]
   1d02c:	cmp	r3, r4
   1d030:	bgt	1d00c <__assert_fail@plt+0xb66c>
   1d034:	ldr	r0, [r6, #20]
   1d038:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1d03c:	ldr	r3, [r6, #8]
   1d040:	cmp	r3, #0
   1d044:	beq	1d058 <__assert_fail@plt+0xb6b8>
   1d048:	ldr	r0, [r3, #8]
   1d04c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1d050:	ldr	r0, [r6, #8]
   1d054:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1d058:	mov	r0, r6
   1d05c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1d060:	ldr	r3, [r8, #124]	; 0x7c
   1d064:	add	r7, r7, #1
   1d068:	cmp	r3, r7
   1d06c:	bgt	1cff4 <__assert_fail@plt+0xb654>
   1d070:	mov	r3, #0
   1d074:	str	r3, [r8, #124]	; 0x7c
   1d078:	str	r3, [r8, #108]	; 0x6c
   1d07c:	pop	{r4, r5, r6, r7, r8, pc}
   1d080:	push	{r4, r5, r6, lr}
   1d084:	subs	r5, r0, #0
   1d088:	beq	1d0dc <__assert_fail@plt+0xb73c>
   1d08c:	ldr	r3, [r5]
   1d090:	cmp	r3, #0
   1d094:	movgt	r4, #0
   1d098:	movgt	r6, r4
   1d09c:	ble	1d0d4 <__assert_fail@plt+0xb734>
   1d0a0:	ldr	r3, [r5, #8]
   1d0a4:	add	r6, r6, #1
   1d0a8:	add	r3, r3, r4
   1d0ac:	ldr	r0, [r3, #20]
   1d0b0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1d0b4:	ldr	r3, [r5, #8]
   1d0b8:	add	r3, r3, r4
   1d0bc:	add	r4, r4, #24
   1d0c0:	ldr	r0, [r3, #8]
   1d0c4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1d0c8:	ldr	r3, [r5]
   1d0cc:	cmp	r3, r6
   1d0d0:	bgt	1d0a0 <__assert_fail@plt+0xb700>
   1d0d4:	ldr	r0, [r5, #8]
   1d0d8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1d0dc:	mov	r0, #0
   1d0e0:	pop	{r4, r5, r6, pc}
   1d0e4:	ldr	r3, [r0]
   1d0e8:	push	{r4, r5, r6, lr}
   1d0ec:	cmp	r3, #0
   1d0f0:	mov	r4, r0
   1d0f4:	mov	r6, r1
   1d0f8:	beq	1d124 <__assert_fail@plt+0xb784>
   1d0fc:	ldr	r1, [r0, #4]
   1d100:	cmp	r1, #0
   1d104:	bne	1d154 <__assert_fail@plt+0xb7b4>
   1d108:	ldr	r3, [r0, #8]
   1d10c:	mov	r0, #1
   1d110:	str	r6, [r3]
   1d114:	ldr	r3, [r4, #4]
   1d118:	add	r3, r3, r0
   1d11c:	str	r3, [r4, #4]
   1d120:	pop	{r4, r5, r6, pc}
   1d124:	mov	r5, #1
   1d128:	str	r5, [r0]
   1d12c:	str	r5, [r0, #4]
   1d130:	mov	r0, #4
   1d134:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1d138:	cmp	r0, #0
   1d13c:	str	r0, [r4, #8]
   1d140:	strne	r6, [r0]
   1d144:	streq	r0, [r4, #4]
   1d148:	streq	r0, [r4]
   1d14c:	movne	r0, r5
   1d150:	pop	{r4, r5, r6, pc}
   1d154:	cmp	r3, r1
   1d158:	beq	1d1d8 <__assert_fail@plt+0xb838>
   1d15c:	ldr	r0, [r0, #8]
   1d160:	ldr	r3, [r0]
   1d164:	cmp	r6, r3
   1d168:	bge	1d1a4 <__assert_fail@plt+0xb804>
   1d16c:	cmp	r1, #0
   1d170:	ble	1d18c <__assert_fail@plt+0xb7ec>
   1d174:	add	r1, r0, r1, lsl #2
   1d178:	ldr	r3, [r1, #-4]
   1d17c:	str	r3, [r1], #-4
   1d180:	cmp	r0, r1
   1d184:	bne	1d178 <__assert_fail@plt+0xb7d8>
   1d188:	mov	r1, #0
   1d18c:	str	r6, [r0, r1, lsl #2]
   1d190:	ldr	r3, [r4, #4]
   1d194:	mov	r0, #1
   1d198:	add	r3, r3, r0
   1d19c:	str	r3, [r4, #4]
   1d1a0:	pop	{r4, r5, r6, pc}
   1d1a4:	sub	r3, r1, #-1073741823	; 0xc0000001
   1d1a8:	ldr	r2, [r0, r3, lsl #2]
   1d1ac:	lsl	r3, r3, #2
   1d1b0:	cmp	r6, r2
   1d1b4:	bge	1d18c <__assert_fail@plt+0xb7ec>
   1d1b8:	add	r3, r3, #4
   1d1bc:	add	r3, r0, r3
   1d1c0:	str	r2, [r3], #-4
   1d1c4:	ldr	r2, [r3, #-4]
   1d1c8:	sub	r1, r1, #1
   1d1cc:	cmp	r6, r2
   1d1d0:	blt	1d1c0 <__assert_fail@plt+0xb820>
   1d1d4:	b	1d18c <__assert_fail@plt+0xb7ec>
   1d1d8:	lsl	r3, r1, #1
   1d1dc:	str	r3, [r0]
   1d1e0:	lsl	r1, r1, #3
   1d1e4:	ldr	r0, [r0, #8]
   1d1e8:	bl	1babc <__assert_fail@plt+0xa11c>
   1d1ec:	cmp	r0, #0
   1d1f0:	popeq	{r4, r5, r6, pc}
   1d1f4:	ldr	r1, [r4, #4]
   1d1f8:	str	r0, [r4, #8]
   1d1fc:	b	1d160 <__assert_fail@plt+0xb7c0>
   1d200:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d204:	sub	sp, sp, #20
   1d208:	ldr	r8, [pc, #680]	; 1d4b8 <__assert_fail@plt+0xbb18>
   1d20c:	ldr	r7, [sp, #56]	; 0x38
   1d210:	mov	r6, r0
   1d214:	mov	fp, r1
   1d218:	mov	r9, r2
   1d21c:	str	r3, [sp, #12]
   1d220:	ldr	sl, [r6]
   1d224:	add	r3, sl, fp, lsl #3
   1d228:	ldrb	r2, [r3, #4]
   1d22c:	cmp	r2, #4
   1d230:	beq	1d420 <__assert_fail@plt+0xba80>
   1d234:	add	r4, fp, fp, lsl #1
   1d238:	ldr	r0, [r6, #20]
   1d23c:	lsl	r4, r4, #2
   1d240:	add	ip, r0, r4
   1d244:	ldr	r2, [ip, #4]
   1d248:	cmp	r2, #0
   1d24c:	beq	1d48c <__assert_fail@plt+0xbaec>
   1d250:	cmp	r2, #1
   1d254:	beq	1d3a0 <__assert_fail@plt+0xba00>
   1d258:	ldr	r2, [r6, #8]
   1d25c:	add	r9, r9, r9, lsl #1
   1d260:	sub	r1, r2, #1
   1d264:	cmp	r1, #0
   1d268:	add	r3, sl, r1, lsl #3
   1d26c:	lsl	r5, r9, #2
   1d270:	ldrb	lr, [r3, #6]
   1d274:	ldr	r9, [ip, #8]
   1d278:	add	r0, r0, r5
   1d27c:	movle	ip, #0
   1d280:	movgt	ip, #1
   1d284:	ands	ip, ip, lr, lsr #2
   1d288:	mov	ip, #0
   1d28c:	ldr	r9, [r9]
   1d290:	str	ip, [r0, #4]
   1d294:	beq	1d348 <__assert_fail@plt+0xb9a8>
   1d298:	ldr	ip, [r6, #16]
   1d29c:	rsb	fp, r3, r2, lsl #3
   1d2a0:	sub	fp, fp, #16
   1d2a4:	add	r2, ip, r2, lsl #2
   1d2a8:	b	1d2cc <__assert_fail@plt+0xb92c>
   1d2ac:	add	r3, sl, lr
   1d2b0:	sub	r1, r1, #1
   1d2b4:	ldrb	lr, [r3, #6]
   1d2b8:	cmp	r1, #0
   1d2bc:	movle	ip, #0
   1d2c0:	movgt	ip, #1
   1d2c4:	ands	ip, ip, lr, lsr #2
   1d2c8:	beq	1d348 <__assert_fail@plt+0xb9a8>
   1d2cc:	ldr	ip, [r2, #-4]!
   1d2d0:	add	lr, r3, fp
   1d2d4:	cmp	r9, ip
   1d2d8:	bne	1d2ac <__assert_fail@plt+0xb90c>
   1d2dc:	ldr	r3, [r3, #4]
   1d2e0:	and	r3, r8, r3, lsr #8
   1d2e4:	cmp	r7, r3
   1d2e8:	bne	1d2ac <__assert_fail@plt+0xb90c>
   1d2ec:	bl	1d0e4 <__assert_fail@plt+0xb744>
   1d2f0:	cmp	r0, #0
   1d2f4:	beq	1d33c <__assert_fail@plt+0xb99c>
   1d2f8:	ldr	r3, [r6, #20]
   1d2fc:	mov	r2, r7
   1d300:	add	r4, r3, r4
   1d304:	mov	r0, r6
   1d308:	ldr	r3, [r4, #8]
   1d30c:	ldr	fp, [r3, #4]
   1d310:	mov	r1, fp
   1d314:	bl	1cd4c <__assert_fail@plt+0xb3ac>
   1d318:	cmn	r0, #1
   1d31c:	mov	r9, r0
   1d320:	beq	1d33c <__assert_fail@plt+0xb99c>
   1d324:	ldr	r0, [r6, #20]
   1d328:	mov	r1, r9
   1d32c:	add	r0, r0, r5
   1d330:	bl	1d0e4 <__assert_fail@plt+0xb744>
   1d334:	cmp	r0, #0
   1d338:	bne	1d220 <__assert_fail@plt+0xb880>
   1d33c:	mov	r0, #12
   1d340:	add	sp, sp, #20
   1d344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d348:	mov	r2, r7
   1d34c:	mov	r1, r9
   1d350:	mov	r0, r6
   1d354:	bl	1cd4c <__assert_fail@plt+0xb3ac>
   1d358:	cmn	r0, #1
   1d35c:	mov	sl, r0
   1d360:	beq	1d33c <__assert_fail@plt+0xb99c>
   1d364:	ldr	r0, [r6, #20]
   1d368:	mov	r1, sl
   1d36c:	add	r0, r0, r5
   1d370:	bl	1d0e4 <__assert_fail@plt+0xb744>
   1d374:	cmp	r0, #0
   1d378:	beq	1d33c <__assert_fail@plt+0xb99c>
   1d37c:	str	r7, [sp]
   1d380:	mov	r2, sl
   1d384:	mov	r1, r9
   1d388:	ldr	r3, [sp, #12]
   1d38c:	mov	r0, r6
   1d390:	bl	1d200 <__assert_fail@plt+0xb860>
   1d394:	cmp	r0, #0
   1d398:	beq	1d2f8 <__assert_fail@plt+0xb958>
   1d39c:	b	1d340 <__assert_fail@plt+0xb9a0>
   1d3a0:	add	r4, r9, r9, lsl #1
   1d3a4:	ldr	r2, [ip, #8]
   1d3a8:	ldr	r1, [sp, #12]
   1d3ac:	cmp	fp, r9
   1d3b0:	lsl	r4, r4, #2
   1d3b4:	sub	r1, fp, r1
   1d3b8:	add	r0, r0, r4
   1d3bc:	clz	r1, r1
   1d3c0:	lsr	r1, r1, #5
   1d3c4:	moveq	r1, #0
   1d3c8:	ldr	fp, [r2]
   1d3cc:	cmp	r1, #0
   1d3d0:	mov	r2, #0
   1d3d4:	str	r2, [r0, #4]
   1d3d8:	bne	1d4a0 <__assert_fail@plt+0xbb00>
   1d3dc:	ldr	r3, [r3, #4]
   1d3e0:	mov	r1, fp
   1d3e4:	mov	r0, r6
   1d3e8:	and	r3, r8, r3, lsr #8
   1d3ec:	orr	r7, r7, r3
   1d3f0:	mov	r2, r7
   1d3f4:	bl	1cd4c <__assert_fail@plt+0xb3ac>
   1d3f8:	cmn	r0, #1
   1d3fc:	mov	r9, r0
   1d400:	beq	1d33c <__assert_fail@plt+0xb99c>
   1d404:	ldr	r0, [r6, #20]
   1d408:	mov	r1, r9
   1d40c:	add	r0, r0, r4
   1d410:	bl	1d0e4 <__assert_fail@plt+0xb744>
   1d414:	cmp	r0, #0
   1d418:	bne	1d220 <__assert_fail@plt+0xb880>
   1d41c:	b	1d33c <__assert_fail@plt+0xb99c>
   1d420:	ldr	r2, [r6, #12]
   1d424:	add	r4, r9, r9, lsl #1
   1d428:	ldr	r3, [r6, #20]
   1d42c:	lsl	r4, r4, #2
   1d430:	add	r3, r3, r4
   1d434:	lsl	sl, fp, #2
   1d438:	ldr	fp, [r2, fp, lsl #2]
   1d43c:	mov	r1, #0
   1d440:	str	r1, [r3, #4]
   1d444:	mov	r2, r7
   1d448:	mov	r1, fp
   1d44c:	mov	r0, r6
   1d450:	bl	1cd4c <__assert_fail@plt+0xb3ac>
   1d454:	mov	r5, r9
   1d458:	cmn	r0, #1
   1d45c:	mov	r9, r0
   1d460:	beq	1d33c <__assert_fail@plt+0xb99c>
   1d464:	ldr	r3, [r6, #12]
   1d468:	ldr	r0, [r6, #20]
   1d46c:	mov	r1, r9
   1d470:	ldr	r2, [r3, sl]
   1d474:	add	r0, r0, r4
   1d478:	str	r2, [r3, r5, lsl #2]
   1d47c:	bl	1d0e4 <__assert_fail@plt+0xb744>
   1d480:	cmp	r0, #0
   1d484:	bne	1d220 <__assert_fail@plt+0xb880>
   1d488:	b	1d33c <__assert_fail@plt+0xb99c>
   1d48c:	ldr	r3, [r6, #12]
   1d490:	mov	r0, r2
   1d494:	ldr	r2, [r3, fp, lsl #2]
   1d498:	str	r2, [r3, r9, lsl #2]
   1d49c:	b	1d340 <__assert_fail@plt+0xb9a0>
   1d4a0:	mov	r1, fp
   1d4a4:	bl	1d0e4 <__assert_fail@plt+0xb744>
   1d4a8:	cmp	r0, #0
   1d4ac:	movne	r0, #0
   1d4b0:	bne	1d340 <__assert_fail@plt+0xb9a0>
   1d4b4:	b	1d33c <__assert_fail@plt+0xb99c>
   1d4b8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1d4bc:	ldr	r3, [r0, #36]	; 0x24
   1d4c0:	push	{r4, r5, r6, lr}
   1d4c4:	cmp	r3, r1
   1d4c8:	mov	r4, r0
   1d4cc:	mov	r5, r1
   1d4d0:	ldr	r6, [r0, #104]	; 0x68
   1d4d4:	bgt	1d528 <__assert_fail@plt+0xbb88>
   1d4d8:	ldr	r2, [r0, #48]	; 0x30
   1d4dc:	cmp	r3, r2
   1d4e0:	bge	1d528 <__assert_fail@plt+0xbb88>
   1d4e4:	add	r1, r5, #1
   1d4e8:	mov	r0, r4
   1d4ec:	bl	1ca08 <__assert_fail@plt+0xb068>
   1d4f0:	cmp	r0, #0
   1d4f4:	bne	1d54c <__assert_fail@plt+0xbbac>
   1d4f8:	cmp	r6, r5
   1d4fc:	bge	1d544 <__assert_fail@plt+0xbba4>
   1d500:	sub	r2, r5, r6
   1d504:	ldr	r0, [r4, #100]	; 0x64
   1d508:	add	r6, r6, #1
   1d50c:	lsl	r2, r2, #2
   1d510:	add	r0, r0, r6, lsl #2
   1d514:	mov	r1, #0
   1d518:	bl	11814 <memset@plt>
   1d51c:	mov	r0, #0
   1d520:	str	r5, [r4, #104]	; 0x68
   1d524:	pop	{r4, r5, r6, pc}
   1d528:	ldr	r3, [r4, #28]
   1d52c:	cmp	r5, r3
   1d530:	blt	1d4f8 <__assert_fail@plt+0xbb58>
   1d534:	ldr	r2, [r4, #48]	; 0x30
   1d538:	cmp	r3, r2
   1d53c:	bge	1d4f8 <__assert_fail@plt+0xbb58>
   1d540:	b	1d4e4 <__assert_fail@plt+0xbb44>
   1d544:	mov	r0, #0
   1d548:	pop	{r4, r5, r6, pc}
   1d54c:	pop	{r4, r5, r6, pc}
   1d550:	push	{r4, r5, r6, r7, r8, lr}
   1d554:	subs	r4, r0, #0
   1d558:	ldr	r7, [sp, #28]
   1d55c:	beq	1d5f8 <__assert_fail@plt+0xbc58>
   1d560:	ldr	ip, [r4]
   1d564:	cmp	ip, #0
   1d568:	beq	1d5f8 <__assert_fail@plt+0xbc58>
   1d56c:	sub	ip, ip, #1
   1d570:	ldr	lr, [r4, #8]
   1d574:	add	r5, ip, ip, lsl #1
   1d578:	lsl	r6, r2, #3
   1d57c:	lsl	r5, r5, #3
   1d580:	add	r2, lr, r5
   1d584:	mov	r0, r3
   1d588:	mov	r8, r1
   1d58c:	ldr	r3, [lr, r5]
   1d590:	ldr	r1, [r2, #8]
   1d594:	str	ip, [r4]
   1d598:	mov	r2, r6
   1d59c:	str	r3, [r8]
   1d5a0:	bl	115d4 <memcpy@plt>
   1d5a4:	ldr	r3, [r4, #8]
   1d5a8:	mov	r2, r6
   1d5ac:	add	r3, r3, r5
   1d5b0:	ldr	r0, [sp, #24]
   1d5b4:	ldr	r1, [r3, #8]
   1d5b8:	add	r1, r1, r6
   1d5bc:	bl	115d4 <memcpy@plt>
   1d5c0:	ldr	r0, [r7, #8]
   1d5c4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1d5c8:	ldr	r3, [r4, #8]
   1d5cc:	add	r3, r3, r5
   1d5d0:	ldr	r0, [r3, #8]
   1d5d4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1d5d8:	ldr	r3, [r4, #8]
   1d5dc:	add	r5, r3, r5
   1d5e0:	add	r3, r5, #12
   1d5e4:	ldr	ip, [r5, #4]
   1d5e8:	ldm	r3, {r0, r1, r2}
   1d5ec:	stm	r7, {r0, r1, r2}
   1d5f0:	mov	r0, ip
   1d5f4:	pop	{r4, r5, r6, r7, r8, pc}
   1d5f8:	mvn	ip, #0
   1d5fc:	b	1d5f0 <__assert_fail@plt+0xbc50>
   1d600:	ldr	r2, [r0, #4]
   1d604:	ldr	r3, [r1, #4]
   1d608:	cmp	r2, r3
   1d60c:	beq	1d618 <__assert_fail@plt+0xbc78>
   1d610:	mov	r0, #0
   1d614:	bx	lr
   1d618:	sub	r2, r2, #1
   1d61c:	cmp	r2, #0
   1d620:	lsl	r3, r2, #2
   1d624:	sub	r2, r2, #1
   1d628:	blt	1d66c <__assert_fail@plt+0xbccc>
   1d62c:	push	{lr}		; (str lr, [sp, #-4]!)
   1d630:	b	1d640 <__assert_fail@plt+0xbca0>
   1d634:	cmp	r2, #0
   1d638:	sub	r2, r2, #1
   1d63c:	blt	1d664 <__assert_fail@plt+0xbcc4>
   1d640:	ldr	lr, [r0, #8]
   1d644:	ldr	ip, [r1, #8]
   1d648:	ldr	lr, [lr, r3]
   1d64c:	ldr	ip, [ip, r3]
   1d650:	sub	r3, r3, #4
   1d654:	cmp	lr, ip
   1d658:	beq	1d634 <__assert_fail@plt+0xbc94>
   1d65c:	mov	r0, #0
   1d660:	pop	{pc}		; (ldr pc, [sp], #4)
   1d664:	mov	r0, #1
   1d668:	pop	{pc}		; (ldr pc, [sp], #4)
   1d66c:	mov	r0, #1
   1d670:	bx	lr
   1d674:	cmp	r0, #0
   1d678:	ble	1d6fc <__assert_fail@plt+0xbd5c>
   1d67c:	push	{lr}		; (str lr, [sp, #-4]!)
   1d680:	sub	ip, r0, #1
   1d684:	ldr	lr, [r1]
   1d688:	mov	r0, #0
   1d68c:	cmp	r0, ip
   1d690:	bcs	1d6cc <__assert_fail@plt+0xbd2c>
   1d694:	add	r1, r0, ip
   1d698:	lsr	r1, r1, #1
   1d69c:	ldr	r3, [lr, r1, lsl #2]
   1d6a0:	cmp	r2, r3
   1d6a4:	ble	1d6bc <__assert_fail@plt+0xbd1c>
   1d6a8:	b	1d6e0 <__assert_fail@plt+0xbd40>
   1d6ac:	ldr	ip, [lr, r3, lsl #2]
   1d6b0:	cmp	ip, r2
   1d6b4:	blt	1d6e8 <__assert_fail@plt+0xbd48>
   1d6b8:	mov	r1, r3
   1d6bc:	add	r3, r0, r1
   1d6c0:	cmp	r0, r1
   1d6c4:	lsr	r3, r3, #1
   1d6c8:	bcc	1d6ac <__assert_fail@plt+0xbd0c>
   1d6cc:	ldr	r3, [lr, r0, lsl #2]
   1d6d0:	cmp	r2, r3
   1d6d4:	beq	1d6f4 <__assert_fail@plt+0xbd54>
   1d6d8:	mov	r0, #0
   1d6dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6e0:	mov	r3, r1
   1d6e4:	mov	r1, ip
   1d6e8:	add	r0, r3, #1
   1d6ec:	mov	ip, r1
   1d6f0:	b	1d68c <__assert_fail@plt+0xbcec>
   1d6f4:	add	r0, r0, #1
   1d6f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6fc:	mov	r0, #0
   1d700:	bx	lr
   1d704:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d708:	sub	sp, sp, #12
   1d70c:	mov	r5, r1
   1d710:	mov	r6, r0
   1d714:	mov	r4, r2
   1d718:	mov	r9, r3
   1d71c:	add	r8, r1, #8
   1d720:	ldr	r7, [sp, #40]	; 0x28
   1d724:	b	1d730 <__assert_fail@plt+0xbd90>
   1d728:	ldr	r3, [r3, #8]
   1d72c:	ldr	r4, [r3]
   1d730:	mov	r1, r8
   1d734:	mov	r2, r4
   1d738:	ldr	r0, [r5, #4]
   1d73c:	bl	1d674 <__assert_fail@plt+0xbcd4>
   1d740:	mov	r1, r4
   1d744:	cmp	r0, #0
   1d748:	mov	r0, r5
   1d74c:	bne	1d7f8 <__assert_fail@plt+0xbe58>
   1d750:	ldr	r3, [r6]
   1d754:	add	r2, r3, r4, lsl #3
   1d758:	ldrb	r2, [r2, #4]
   1d75c:	cmp	r2, r7
   1d760:	bne	1d770 <__assert_fail@plt+0xbdd0>
   1d764:	ldr	r3, [r3, r4, lsl #3]
   1d768:	cmp	r9, r3
   1d76c:	beq	1d7d0 <__assert_fail@plt+0xbe30>
   1d770:	bl	1d0e4 <__assert_fail@plt+0xb744>
   1d774:	add	r4, r4, r4, lsl #1
   1d778:	lsl	r4, r4, #2
   1d77c:	cmp	r0, #0
   1d780:	beq	1d7ec <__assert_fail@plt+0xbe4c>
   1d784:	ldr	r3, [r6, #20]
   1d788:	add	r3, r3, r4
   1d78c:	ldr	r2, [r3, #4]
   1d790:	cmp	r2, #0
   1d794:	beq	1d7f8 <__assert_fail@plt+0xbe58>
   1d798:	cmp	r2, #2
   1d79c:	bne	1d728 <__assert_fail@plt+0xbd88>
   1d7a0:	ldr	r2, [r3, #8]
   1d7a4:	mov	r1, r5
   1d7a8:	mov	r3, r9
   1d7ac:	ldr	r2, [r2, #4]
   1d7b0:	mov	r0, r6
   1d7b4:	str	r7, [sp]
   1d7b8:	bl	1d704 <__assert_fail@plt+0xbd64>
   1d7bc:	cmp	r0, #0
   1d7c0:	bne	1d7f0 <__assert_fail@plt+0xbe50>
   1d7c4:	ldr	r3, [r6, #20]
   1d7c8:	add	r3, r3, r4
   1d7cc:	b	1d728 <__assert_fail@plt+0xbd88>
   1d7d0:	cmp	r7, #9
   1d7d4:	bne	1d7f8 <__assert_fail@plt+0xbe58>
   1d7d8:	mov	r1, r4
   1d7dc:	mov	r0, r5
   1d7e0:	bl	1d0e4 <__assert_fail@plt+0xb744>
   1d7e4:	cmp	r0, #0
   1d7e8:	bne	1d7f8 <__assert_fail@plt+0xbe58>
   1d7ec:	mov	r0, #12
   1d7f0:	add	sp, sp, #12
   1d7f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d7f8:	mov	r0, #0
   1d7fc:	add	sp, sp, #12
   1d800:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d804:	ldr	r3, [r0]
   1d808:	cmp	r2, r3
   1d80c:	bxge	lr
   1d810:	ldr	r3, [r1]
   1d814:	add	r3, r3, r2, lsl #2
   1d818:	ldr	r1, [r3, #4]
   1d81c:	add	r2, r2, #1
   1d820:	str	r1, [r3], #4
   1d824:	ldr	r1, [r0]
   1d828:	cmp	r2, r1
   1d82c:	blt	1d818 <__assert_fail@plt+0xbe78>
   1d830:	bx	lr
   1d834:	ldrb	r3, [r1, #24]
   1d838:	cmp	r3, #4
   1d83c:	beq	1d8a8 <__assert_fail@plt+0xbf08>
   1d840:	cmp	r3, #17
   1d844:	beq	1d850 <__assert_fail@plt+0xbeb0>
   1d848:	mov	r0, #0
   1d84c:	bx	lr
   1d850:	ldr	r3, [r1, #4]
   1d854:	cmp	r3, #0
   1d858:	beq	1d848 <__assert_fail@plt+0xbea8>
   1d85c:	ldrb	r2, [r3, #24]
   1d860:	cmp	r2, #17
   1d864:	bne	1d848 <__assert_fail@plt+0xbea8>
   1d868:	ldr	r2, [r3, #4]
   1d86c:	ldr	r3, [r3, #20]
   1d870:	cmp	r2, #0
   1d874:	str	r2, [r1, #4]
   1d878:	strne	r1, [r2]
   1d87c:	ldr	r2, [r0, #132]	; 0x84
   1d880:	ldr	r1, [r1, #20]
   1d884:	cmp	r3, #31
   1d888:	ldr	r1, [r2, r1, lsl #2]
   1d88c:	str	r1, [r2, r3, lsl #2]
   1d890:	ldrle	r2, [r0, #80]	; 0x50
   1d894:	movle	r1, #1
   1d898:	bicle	r3, r2, r1, lsl r3
   1d89c:	strle	r3, [r0, #80]	; 0x50
   1d8a0:	mov	r0, #0
   1d8a4:	bx	lr
   1d8a8:	ldr	r2, [r0, #132]	; 0x84
   1d8ac:	cmp	r2, #0
   1d8b0:	beq	1d848 <__assert_fail@plt+0xbea8>
   1d8b4:	ldr	r3, [r1, #20]
   1d8b8:	mov	ip, #1
   1d8bc:	ldr	r2, [r2, r3, lsl #2]
   1d8c0:	str	r2, [r1, #20]
   1d8c4:	ldr	r3, [r0, #80]	; 0x50
   1d8c8:	orr	r3, r3, ip, lsl r2
   1d8cc:	str	r3, [r0, #80]	; 0x50
   1d8d0:	mov	r0, #0
   1d8d4:	bx	lr
   1d8d8:	ldrb	r3, [r1, #24]
   1d8dc:	cmp	r3, #11
   1d8e0:	beq	1d930 <__assert_fail@plt+0xbf90>
   1d8e4:	cmp	r3, #16
   1d8e8:	beq	1d914 <__assert_fail@plt+0xbf74>
   1d8ec:	ldr	r3, [r1, #4]
   1d8f0:	mov	r0, #0
   1d8f4:	cmp	r3, #0
   1d8f8:	ldrne	r2, [r1, #16]
   1d8fc:	strne	r2, [r3, #16]
   1d900:	ldr	r3, [r1, #8]
   1d904:	cmp	r3, #0
   1d908:	ldrne	r2, [r1, #16]
   1d90c:	strne	r2, [r3, #16]
   1d910:	bx	lr
   1d914:	ldmib	r1, {r2, r3}
   1d918:	ldr	r0, [r3, #12]
   1d91c:	str	r0, [r2, #16]
   1d920:	ldr	r2, [r1, #16]
   1d924:	mov	r0, #0
   1d928:	str	r2, [r3, #16]
   1d92c:	bx	lr
   1d930:	ldr	r3, [r1, #4]
   1d934:	mov	r0, #0
   1d938:	str	r1, [r3, #16]
   1d93c:	bx	lr
   1d940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d944:	sub	sp, sp, #28
   1d948:	ldr	r9, [r0, #108]	; 0x6c
   1d94c:	ldr	r6, [sp, #64]	; 0x40
   1d950:	ldr	r7, [sp, #72]	; 0x48
   1d954:	ldr	lr, [r0, #84]	; 0x54
   1d958:	mov	ip, r9
   1d95c:	mov	r4, #0
   1d960:	str	lr, [sp, #8]
   1d964:	cmp	r4, ip
   1d968:	bge	1d9c4 <__assert_fail@plt+0xc024>
   1d96c:	add	lr, r4, ip
   1d970:	ldr	r5, [r0, #116]	; 0x74
   1d974:	add	lr, lr, lr, lsr #31
   1d978:	asr	lr, lr, #1
   1d97c:	add	r8, lr, lr, lsl #1
   1d980:	add	r8, r5, r8, lsl #3
   1d984:	ldr	r8, [r8, #4]
   1d988:	cmp	r6, r8
   1d98c:	ble	1d9b4 <__assert_fail@plt+0xc014>
   1d990:	b	1db10 <__assert_fail@plt+0xc170>
   1d994:	asr	ip, ip, #1
   1d998:	mov	sl, ip
   1d99c:	add	r8, ip, ip, lsl #1
   1d9a0:	add	r8, r5, r8, lsl #3
   1d9a4:	ldr	r8, [r8, #4]
   1d9a8:	cmp	r8, r6
   1d9ac:	blt	1db18 <__assert_fail@plt+0xc178>
   1d9b0:	mov	lr, ip
   1d9b4:	add	ip, r4, lr
   1d9b8:	cmp	r4, lr
   1d9bc:	add	ip, ip, ip, lsr #31
   1d9c0:	blt	1d994 <__assert_fail@plt+0xbff4>
   1d9c4:	cmp	r9, r4
   1d9c8:	mvnle	r4, #0
   1d9cc:	ble	1d9e8 <__assert_fail@plt+0xc048>
   1d9d0:	add	lr, r4, r4, lsl #1
   1d9d4:	ldr	ip, [r0, #116]	; 0x74
   1d9d8:	add	ip, ip, lr, lsl #3
   1d9dc:	ldr	ip, [ip, #4]
   1d9e0:	cmp	r6, ip
   1d9e4:	mvnne	r4, #0
   1d9e8:	mov	ip, r9
   1d9ec:	mov	r5, #0
   1d9f0:	cmp	r5, ip
   1d9f4:	bge	1da50 <__assert_fail@plt+0xc0b0>
   1d9f8:	add	lr, r5, ip
   1d9fc:	ldr	r8, [r0, #116]	; 0x74
   1da00:	add	lr, lr, lr, lsr #31
   1da04:	asr	lr, lr, #1
   1da08:	add	sl, lr, lr, lsl #1
   1da0c:	add	sl, r8, sl, lsl #3
   1da10:	ldr	sl, [sl, #4]
   1da14:	cmp	r7, sl
   1da18:	ble	1da40 <__assert_fail@plt+0xc0a0>
   1da1c:	b	1db24 <__assert_fail@plt+0xc184>
   1da20:	asr	ip, ip, #1
   1da24:	mov	fp, ip
   1da28:	add	sl, ip, ip, lsl #1
   1da2c:	add	sl, r8, sl, lsl #3
   1da30:	ldr	sl, [sl, #4]
   1da34:	cmp	sl, r7
   1da38:	blt	1db2c <__assert_fail@plt+0xc18c>
   1da3c:	mov	lr, ip
   1da40:	add	ip, r5, lr
   1da44:	cmp	r5, lr
   1da48:	add	ip, ip, ip, lsr #31
   1da4c:	blt	1da20 <__assert_fail@plt+0xc080>
   1da50:	cmp	r9, r5
   1da54:	mvnle	r5, #0
   1da58:	ble	1da74 <__assert_fail@plt+0xc0d4>
   1da5c:	add	lr, r5, r5, lsl #1
   1da60:	ldr	ip, [r0, #116]	; 0x74
   1da64:	add	ip, ip, lr, lsl #3
   1da68:	ldr	ip, [ip, #4]
   1da6c:	cmp	r7, ip
   1da70:	mvnne	r5, #0
   1da74:	ldr	ip, [r1]
   1da78:	cmp	ip, #0
   1da7c:	ble	1db4c <__assert_fail@plt+0xc1ac>
   1da80:	mov	r9, r2
   1da84:	mov	r8, r0
   1da88:	mov	fp, #0
   1da8c:	str	r3, [sp, #12]
   1da90:	str	r1, [sp, #20]
   1da94:	str	r4, [sp, #16]
   1da98:	ldr	r3, [r9]
   1da9c:	ldr	r2, [sp, #8]
   1daa0:	ldr	lr, [r8, #116]	; 0x74
   1daa4:	mov	r0, r8
   1daa8:	ldr	ip, [r2]
   1daac:	ldr	r2, [r3, fp, lsl #2]
   1dab0:	ldr	r3, [sp, #12]
   1dab4:	mov	r1, r2
   1dab8:	add	r2, r2, r2, lsl #1
   1dabc:	ldr	r2, [lr, r2, lsl #3]
   1dac0:	ldr	r4, [ip, r2, lsl #3]
   1dac4:	ldr	r2, [sp, #16]
   1dac8:	str	r6, [sp]
   1dacc:	str	r2, [sp, #4]
   1dad0:	mov	r2, r4
   1dad4:	bl	1bf20 <__assert_fail@plt+0xa580>
   1dad8:	ldr	r1, [r9]
   1dadc:	mov	r2, r4
   1dae0:	ldr	r3, [sp, #68]	; 0x44
   1dae4:	ldr	r1, [r1, fp, lsl #2]
   1dae8:	str	r5, [sp, #4]
   1daec:	str	r7, [sp]
   1daf0:	mov	sl, r0
   1daf4:	mov	r0, r8
   1daf8:	bl	1bf20 <__assert_fail@plt+0xa580>
   1dafc:	cmp	sl, r0
   1db00:	beq	1db38 <__assert_fail@plt+0xc198>
   1db04:	mov	r0, #1
   1db08:	add	sp, sp, #28
   1db0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db10:	mov	sl, lr
   1db14:	mov	lr, ip
   1db18:	add	r4, sl, #1
   1db1c:	mov	ip, lr
   1db20:	b	1d964 <__assert_fail@plt+0xbfc4>
   1db24:	mov	fp, lr
   1db28:	mov	lr, ip
   1db2c:	add	r5, fp, #1
   1db30:	mov	ip, lr
   1db34:	b	1d9f0 <__assert_fail@plt+0xc050>
   1db38:	ldr	r3, [sp, #20]
   1db3c:	add	fp, fp, #1
   1db40:	ldr	r3, [r3]
   1db44:	cmp	fp, r3
   1db48:	blt	1da98 <__assert_fail@plt+0xc0f8>
   1db4c:	mov	r0, #0
   1db50:	b	1db08 <__assert_fail@plt+0xc168>
   1db54:	push	{r4, r5, r6, lr}
   1db58:	mov	r5, r0
   1db5c:	ldr	r0, [r1]
   1db60:	sub	sp, sp, #16
   1db64:	cmp	r0, #31
   1db68:	beq	1dbdc <__assert_fail@plt+0xc23c>
   1db6c:	lsl	ip, r0, #5
   1db70:	ldr	r4, [r5]
   1db74:	add	r0, r0, #1
   1db78:	add	r6, ip, #4
   1db7c:	str	r0, [r1]
   1db80:	ldr	r1, [sp, #32]
   1db84:	add	ip, r4, ip
   1db88:	mov	r5, #0
   1db8c:	str	r2, [ip, #8]
   1db90:	str	r3, [ip, #12]
   1db94:	str	r5, [ip, #4]
   1db98:	ldm	r1, {r0, r1}
   1db9c:	add	lr, ip, #24
   1dba0:	cmp	r2, r5
   1dba4:	stm	lr, {r0, r1}
   1dba8:	ldrb	r1, [ip, #30]
   1dbac:	mvn	lr, #0
   1dbb0:	add	r0, r4, r6
   1dbb4:	and	r1, r1, #243	; 0xf3
   1dbb8:	str	r5, [ip, #16]
   1dbbc:	str	r5, [ip, #20]
   1dbc0:	strb	r1, [ip, #30]
   1dbc4:	str	lr, [ip, #32]
   1dbc8:	strne	r0, [r2]
   1dbcc:	cmp	r3, #0
   1dbd0:	strne	r0, [r3]
   1dbd4:	add	sp, sp, #16
   1dbd8:	pop	{r4, r5, r6, pc}
   1dbdc:	mov	r0, #996	; 0x3e4
   1dbe0:	stmib	sp, {r1, r2, r3}
   1dbe4:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1dbe8:	subs	r4, r0, #0
   1dbec:	beq	1dc10 <__assert_fail@plt+0xc270>
   1dbf0:	ldr	ip, [r5]
   1dbf4:	mov	r6, #4
   1dbf8:	str	ip, [r4]
   1dbfc:	mov	r0, #1
   1dc00:	mov	ip, #0
   1dc04:	str	r4, [r5]
   1dc08:	ldmib	sp, {r1, r2, r3}
   1dc0c:	b	1db7c <__assert_fail@plt+0xc1dc>
   1dc10:	mov	r0, r4
   1dc14:	b	1dbd4 <__assert_fail@plt+0xc234>
   1dc18:	push	{r4, r5, r6, r7, r8, r9, lr}
   1dc1c:	sub	sp, sp, #20
   1dc20:	mov	r4, r0
   1dc24:	ldr	r5, [r0]
   1dc28:	add	r8, r1, #56	; 0x38
   1dc2c:	add	r6, r1, #64	; 0x40
   1dc30:	add	r9, sp, #12
   1dc34:	mov	r7, #0
   1dc38:	b	1dc44 <__assert_fail@plt+0xc2a4>
   1dc3c:	mov	r4, r3
   1dc40:	add	r9, r5, #4
   1dc44:	add	r3, r4, #20
   1dc48:	str	r3, [sp]
   1dc4c:	mov	r2, #0
   1dc50:	mov	r3, r7
   1dc54:	mov	r1, r6
   1dc58:	mov	r0, r8
   1dc5c:	bl	1db54 <__assert_fail@plt+0xc1b4>
   1dc60:	cmp	r0, #0
   1dc64:	str	r0, [r9]
   1dc68:	beq	1dccc <__assert_fail@plt+0xc32c>
   1dc6c:	str	r5, [r0]
   1dc70:	ldr	r5, [r9]
   1dc74:	ldrb	r3, [r5, #26]
   1dc78:	orr	r3, r3, #4
   1dc7c:	strb	r3, [r5, #26]
   1dc80:	ldr	r3, [r4, #4]
   1dc84:	cmp	r3, #0
   1dc88:	bne	1dc3c <__assert_fail@plt+0xc29c>
   1dc8c:	mov	r2, r7
   1dc90:	b	1dcac <__assert_fail@plt+0xc30c>
   1dc94:	ldr	r3, [r4]
   1dc98:	mov	r2, r4
   1dc9c:	cmp	r3, #0
   1dca0:	ldr	r5, [r5]
   1dca4:	mov	r4, r3
   1dca8:	beq	1dcc8 <__assert_fail@plt+0xc328>
   1dcac:	ldr	r3, [r4, #8]
   1dcb0:	cmp	r3, #0
   1dcb4:	cmpne	r2, r3
   1dcb8:	beq	1dc94 <__assert_fail@plt+0xc2f4>
   1dcbc:	mov	r4, r3
   1dcc0:	add	r9, r5, #8
   1dcc4:	b	1dc44 <__assert_fail@plt+0xc2a4>
   1dcc8:	ldr	r0, [sp, #12]
   1dccc:	add	sp, sp, #20
   1dcd0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dcd4:	ldrb	r3, [r1, #28]
   1dcd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcdc:	sub	sp, sp, #28
   1dce0:	ands	r9, r3, #16
   1dce4:	mov	r7, r2
   1dce8:	str	r0, [sp, #12]
   1dcec:	ldr	r4, [r1]
   1dcf0:	ldr	r5, [r2, #4]
   1dcf4:	beq	1de3c <__assert_fail@plt+0xc49c>
   1dcf8:	cmp	r5, #0
   1dcfc:	beq	1decc <__assert_fail@plt+0xc52c>
   1dd00:	ldr	r3, [r2, #20]
   1dd04:	cmp	r3, #31
   1dd08:	bgt	1de30 <__assert_fail@plt+0xc490>
   1dd0c:	ldr	r2, [r4, #80]	; 0x50
   1dd10:	lsr	r3, r2, r3
   1dd14:	tst	r3, #1
   1dd18:	beq	1de30 <__assert_fail@plt+0xc490>
   1dd1c:	add	r6, sp, #16
   1dd20:	mov	r9, #0
   1dd24:	add	sl, r4, #56	; 0x38
   1dd28:	add	r4, r4, #64	; 0x40
   1dd2c:	mov	r3, r9
   1dd30:	mov	r2, r9
   1dd34:	mov	ip, #8
   1dd38:	str	r6, [sp]
   1dd3c:	mov	r1, r4
   1dd40:	str	r9, [r6, #4]
   1dd44:	mov	r0, sl
   1dd48:	str	r9, [sp, #16]
   1dd4c:	strb	ip, [sp, #20]
   1dd50:	bl	1db54 <__assert_fail@plt+0xc1b4>
   1dd54:	str	r6, [sp]
   1dd58:	mov	r3, r9
   1dd5c:	str	r9, [r6, #4]
   1dd60:	mov	r2, r9
   1dd64:	mov	ip, #9
   1dd68:	mov	r1, r4
   1dd6c:	str	r9, [sp, #16]
   1dd70:	strb	ip, [sp, #20]
   1dd74:	mov	r8, r0
   1dd78:	mov	r0, sl
   1dd7c:	bl	1db54 <__assert_fail@plt+0xc1b4>
   1dd80:	mov	r9, r0
   1dd84:	mov	r0, #0
   1dd88:	str	r6, [sp]
   1dd8c:	mov	ip, #16
   1dd90:	str	r0, [r6, #4]
   1dd94:	str	r0, [sp, #16]
   1dd98:	mov	r2, r5
   1dd9c:	mov	r3, r9
   1dda0:	mov	r1, r4
   1dda4:	mov	r0, sl
   1dda8:	strb	ip, [sp, #20]
   1ddac:	bl	1db54 <__assert_fail@plt+0xc1b4>
   1ddb0:	mov	fp, r0
   1ddb4:	mov	r2, #0
   1ddb8:	str	r6, [sp]
   1ddbc:	mov	ip, #16
   1ddc0:	str	r2, [r6, #4]
   1ddc4:	str	r2, [sp, #16]
   1ddc8:	mov	r1, r4
   1ddcc:	mov	r0, sl
   1ddd0:	mov	r3, fp
   1ddd4:	mov	r2, r8
   1ddd8:	strb	ip, [sp, #20]
   1dddc:	bl	1db54 <__assert_fail@plt+0xc1b4>
   1dde0:	cmp	fp, #0
   1dde4:	cmpne	r0, #0
   1dde8:	mov	r5, r0
   1ddec:	beq	1deb0 <__assert_fail@plt+0xc510>
   1ddf0:	cmp	r9, #0
   1ddf4:	cmpne	r8, #0
   1ddf8:	beq	1deb0 <__assert_fail@plt+0xc510>
   1ddfc:	ldr	r3, [r7, #20]
   1de00:	str	r3, [r9, #20]
   1de04:	str	r3, [r8, #20]
   1de08:	ldrb	r3, [r7, #26]
   1de0c:	ldrb	r2, [r9, #26]
   1de10:	and	r3, r3, #8
   1de14:	bic	r2, r2, #8
   1de18:	orr	r2, r3, r2
   1de1c:	strb	r2, [r9, #26]
   1de20:	ldrb	r2, [r8, #26]
   1de24:	bic	r2, r2, #8
   1de28:	orr	r3, r3, r2
   1de2c:	strb	r3, [r8, #26]
   1de30:	mov	r0, r5
   1de34:	add	sp, sp, #28
   1de38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de3c:	add	r6, sp, #16
   1de40:	add	sl, r4, #56	; 0x38
   1de44:	add	r4, r4, #64	; 0x40
   1de48:	mov	ip, #8
   1de4c:	mov	r3, r9
   1de50:	mov	r2, r9
   1de54:	str	r6, [sp]
   1de58:	mov	r1, r4
   1de5c:	str	r9, [r6, #4]
   1de60:	mov	r0, sl
   1de64:	str	r9, [sp, #16]
   1de68:	strb	ip, [sp, #20]
   1de6c:	bl	1db54 <__assert_fail@plt+0xc1b4>
   1de70:	str	r6, [sp]
   1de74:	mov	ip, #9
   1de78:	str	r9, [r6, #4]
   1de7c:	mov	r3, r9
   1de80:	mov	r2, r9
   1de84:	mov	r1, r4
   1de88:	str	r9, [sp, #16]
   1de8c:	strb	ip, [sp, #20]
   1de90:	mov	r8, r0
   1de94:	mov	r0, sl
   1de98:	bl	1db54 <__assert_fail@plt+0xc1b4>
   1de9c:	cmp	r5, #0
   1dea0:	mov	r9, r0
   1dea4:	moveq	fp, r0
   1dea8:	bne	1dd84 <__assert_fail@plt+0xc3e4>
   1deac:	b	1ddb4 <__assert_fail@plt+0xc414>
   1deb0:	ldr	r2, [sp, #12]
   1deb4:	mov	r3, #12
   1deb8:	mov	r5, #0
   1debc:	mov	r0, r5
   1dec0:	str	r3, [r2]
   1dec4:	add	sp, sp, #28
   1dec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1decc:	add	r6, sp, #16
   1ded0:	add	sl, r4, #56	; 0x38
   1ded4:	add	r4, r4, #64	; 0x40
   1ded8:	mov	ip, #8
   1dedc:	str	r6, [sp]
   1dee0:	mov	r1, r4
   1dee4:	mov	r3, r5
   1dee8:	mov	r2, r5
   1deec:	str	r5, [r6, #4]
   1def0:	mov	r0, sl
   1def4:	strb	ip, [sp, #20]
   1def8:	str	r5, [sp, #16]
   1defc:	bl	1db54 <__assert_fail@plt+0xc1b4>
   1df00:	str	r6, [sp]
   1df04:	mov	ip, #9
   1df08:	str	r5, [r6, #4]
   1df0c:	mov	r1, r4
   1df10:	mov	r3, r5
   1df14:	mov	r2, r5
   1df18:	str	r5, [sp, #16]
   1df1c:	strb	ip, [sp, #20]
   1df20:	mov	r8, r0
   1df24:	mov	r0, sl
   1df28:	bl	1db54 <__assert_fail@plt+0xc1b4>
   1df2c:	mov	fp, r0
   1df30:	mov	r9, r0
   1df34:	b	1ddb4 <__assert_fail@plt+0xc414>
   1df38:	ldr	r2, [r1, #4]
   1df3c:	push	{r4, r5, lr}
   1df40:	mov	r3, #0
   1df44:	sub	sp, sp, #12
   1df48:	cmp	r2, r3
   1df4c:	mov	r4, r1
   1df50:	mov	r5, r0
   1df54:	str	r3, [sp, #4]
   1df58:	beq	1df68 <__assert_fail@plt+0xc5c8>
   1df5c:	ldrb	r3, [r2, #24]
   1df60:	cmp	r3, #17
   1df64:	beq	1dfb0 <__assert_fail@plt+0xc610>
   1df68:	ldr	r2, [r4, #8]
   1df6c:	cmp	r2, #0
   1df70:	beq	1df80 <__assert_fail@plt+0xc5e0>
   1df74:	ldrb	r3, [r2, #24]
   1df78:	cmp	r3, #17
   1df7c:	beq	1df8c <__assert_fail@plt+0xc5ec>
   1df80:	ldr	r0, [sp, #4]
   1df84:	add	sp, sp, #12
   1df88:	pop	{r4, r5, pc}
   1df8c:	mov	r1, r5
   1df90:	add	r0, sp, #4
   1df94:	bl	1dcd4 <__assert_fail@plt+0xc334>
   1df98:	cmp	r0, #0
   1df9c:	str	r0, [r4, #8]
   1dfa0:	strne	r4, [r0]
   1dfa4:	ldr	r0, [sp, #4]
   1dfa8:	add	sp, sp, #12
   1dfac:	pop	{r4, r5, pc}
   1dfb0:	mov	r1, r0
   1dfb4:	add	r0, sp, #4
   1dfb8:	bl	1dcd4 <__assert_fail@plt+0xc334>
   1dfbc:	cmp	r0, #0
   1dfc0:	str	r0, [r4, #4]
   1dfc4:	strne	r4, [r0]
   1dfc8:	b	1df68 <__assert_fail@plt+0xc5c8>
   1dfcc:	push	{r4, r5, r6, lr}
   1dfd0:	mov	r4, r0
   1dfd4:	ldr	r0, [r1, #4]
   1dfd8:	str	r0, [r4, #4]
   1dfdc:	ldr	r2, [r1, #4]
   1dfe0:	cmp	r2, #0
   1dfe4:	ble	1e01c <__assert_fail@plt+0xc67c>
   1dfe8:	str	r0, [r4]
   1dfec:	lsl	r0, r0, #2
   1dff0:	mov	r5, r1
   1dff4:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1dff8:	cmp	r0, #0
   1dffc:	str	r0, [r4, #8]
   1e000:	beq	1e034 <__assert_fail@plt+0xc694>
   1e004:	ldr	r2, [r5, #4]
   1e008:	ldr	r1, [r5, #8]
   1e00c:	lsl	r2, r2, #2
   1e010:	bl	115d4 <memcpy@plt>
   1e014:	mov	r0, #0
   1e018:	pop	{r4, r5, r6, pc}
   1e01c:	mov	r2, #0
   1e020:	mov	r0, r2
   1e024:	str	r2, [r4]
   1e028:	str	r2, [r4, #4]
   1e02c:	str	r2, [r4, #8]
   1e030:	pop	{r4, r5, r6, pc}
   1e034:	str	r0, [r4, #4]
   1e038:	str	r0, [r4]
   1e03c:	mov	r0, #12
   1e040:	pop	{r4, r5, r6, pc}
   1e044:	cmp	r1, #0
   1e048:	beq	1e114 <__assert_fail@plt+0xc774>
   1e04c:	ldr	r3, [r1, #4]
   1e050:	cmp	r2, #0
   1e054:	cmpne	r3, #0
   1e058:	ble	1e10c <__assert_fail@plt+0xc76c>
   1e05c:	ldr	ip, [r2, #4]
   1e060:	cmp	ip, #0
   1e064:	ble	1e12c <__assert_fail@plt+0xc78c>
   1e068:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e06c:	mov	r8, r0
   1e070:	add	r0, r3, ip
   1e074:	str	r0, [r8]
   1e078:	lsl	r0, r0, #2
   1e07c:	mov	r5, r2
   1e080:	mov	r7, r1
   1e084:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1e088:	cmp	r0, #0
   1e08c:	str	r0, [r8, #8]
   1e090:	beq	1e188 <__assert_fail@plt+0xc7e8>
   1e094:	mov	r3, #0
   1e098:	mov	ip, r3
   1e09c:	ldr	r9, [r7, #4]
   1e0a0:	ldr	sl, [r5, #4]
   1e0a4:	mov	r4, r0
   1e0a8:	mov	lr, #1
   1e0ac:	b	1e0ec <__assert_fail@plt+0xc74c>
   1e0b0:	cmp	r3, sl
   1e0b4:	bge	1e148 <__assert_fail@plt+0xc7a8>
   1e0b8:	ldr	r2, [r7, #8]
   1e0bc:	ldr	r1, [r5, #8]
   1e0c0:	ldr	r2, [r2, ip, lsl #2]
   1e0c4:	ldr	r6, [r1, r3, lsl #2]
   1e0c8:	cmp	r2, r6
   1e0cc:	addgt	r3, r3, #1
   1e0d0:	strgt	r6, [r4]
   1e0d4:	bgt	1e0e4 <__assert_fail@plt+0xc744>
   1e0d8:	add	ip, ip, #1
   1e0dc:	addeq	r3, r3, #1
   1e0e0:	str	r2, [r4]
   1e0e4:	add	lr, lr, #1
   1e0e8:	add	r4, r4, #4
   1e0ec:	cmp	ip, r9
   1e0f0:	sub	r6, lr, #1
   1e0f4:	blt	1e0b0 <__assert_fail@plt+0xc710>
   1e0f8:	cmp	r3, sl
   1e0fc:	blt	1e168 <__assert_fail@plt+0xc7c8>
   1e100:	str	r6, [r8, #4]
   1e104:	mov	r0, #0
   1e108:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e10c:	cmp	r3, #0
   1e110:	bgt	1e12c <__assert_fail@plt+0xc78c>
   1e114:	cmp	r2, #0
   1e118:	beq	1e130 <__assert_fail@plt+0xc790>
   1e11c:	ldr	r3, [r2, #4]
   1e120:	cmp	r3, #0
   1e124:	ble	1e130 <__assert_fail@plt+0xc790>
   1e128:	mov	r1, r2
   1e12c:	b	1dfcc <__assert_fail@plt+0xc62c>
   1e130:	mov	r3, #0
   1e134:	str	r3, [r0]
   1e138:	str	r3, [r0, #4]
   1e13c:	str	r3, [r0, #8]
   1e140:	mov	r0, r3
   1e144:	bx	lr
   1e148:	sub	r9, r9, ip
   1e14c:	ldr	r1, [r7, #8]
   1e150:	add	r0, r0, r6, lsl #2
   1e154:	add	r1, r1, ip, lsl #2
   1e158:	lsl	r2, r9, #2
   1e15c:	add	r6, r6, r9
   1e160:	bl	115d4 <memcpy@plt>
   1e164:	b	1e100 <__assert_fail@plt+0xc760>
   1e168:	sub	sl, sl, r3
   1e16c:	ldr	r1, [r5, #8]
   1e170:	add	r0, r0, r6, lsl #2
   1e174:	add	r1, r1, r3, lsl #2
   1e178:	lsl	r2, sl, #2
   1e17c:	bl	115d4 <memcpy@plt>
   1e180:	add	r6, r6, sl
   1e184:	b	1e100 <__assert_fail@plt+0xc760>
   1e188:	mov	r0, #12
   1e18c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e194:	sub	sp, sp, #36	; 0x24
   1e198:	ldr	r4, [r2, #4]
   1e19c:	cmp	r4, #0
   1e1a0:	streq	r4, [r0]
   1e1a4:	beq	1e254 <__assert_fail@plt+0xc8b4>
   1e1a8:	add	r7, r3, r4
   1e1ac:	ble	1e1c8 <__assert_fail@plt+0xc828>
   1e1b0:	ldr	ip, [r2, #8]
   1e1b4:	add	r4, ip, r4, lsl #2
   1e1b8:	ldr	lr, [ip], #4
   1e1bc:	cmp	r4, ip
   1e1c0:	add	r7, r7, lr
   1e1c4:	bne	1e1b8 <__assert_fail@plt+0xc818>
   1e1c8:	mov	fp, r3
   1e1cc:	ldr	r3, [r1, #68]	; 0x44
   1e1d0:	mov	r8, r2
   1e1d4:	and	r3, r3, r7
   1e1d8:	ldr	r2, [r1, #32]
   1e1dc:	add	r3, r3, r3, lsl #1
   1e1e0:	mov	r9, r1
   1e1e4:	lsl	r3, r3, #2
   1e1e8:	str	r0, [sp, #24]
   1e1ec:	ldr	sl, [r2, r3]
   1e1f0:	add	r1, r2, r3
   1e1f4:	cmp	sl, #0
   1e1f8:	ble	1e260 <__assert_fail@plt+0xc8c0>
   1e1fc:	ldr	r6, [r1, #8]
   1e200:	mov	r5, #0
   1e204:	sub	r6, r6, #4
   1e208:	b	1e214 <__assert_fail@plt+0xc874>
   1e20c:	cmp	r5, sl
   1e210:	beq	1e260 <__assert_fail@plt+0xc8c0>
   1e214:	ldr	r4, [r6, #4]!
   1e218:	add	r5, r5, #1
   1e21c:	ldr	r3, [r4]
   1e220:	cmp	r3, r7
   1e224:	bne	1e20c <__assert_fail@plt+0xc86c>
   1e228:	ldrb	r3, [r4, #52]	; 0x34
   1e22c:	and	r3, r3, #15
   1e230:	cmp	fp, r3
   1e234:	bne	1e20c <__assert_fail@plt+0xc86c>
   1e238:	ldr	r3, [r4, #40]	; 0x28
   1e23c:	mov	r1, r8
   1e240:	subs	r0, r3, #0
   1e244:	beq	1e20c <__assert_fail@plt+0xc86c>
   1e248:	bl	1d600 <__assert_fail@plt+0xbc60>
   1e24c:	cmp	r0, #0
   1e250:	beq	1e20c <__assert_fail@plt+0xc86c>
   1e254:	mov	r0, r4
   1e258:	add	sp, sp, #36	; 0x24
   1e25c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e260:	mov	r1, #1
   1e264:	mov	r0, #56	; 0x38
   1e268:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   1e26c:	subs	r4, r0, #0
   1e270:	beq	1e430 <__assert_fail@plt+0xca90>
   1e274:	add	r3, r4, #4
   1e278:	mov	r0, r3
   1e27c:	mov	r1, r8
   1e280:	str	r3, [sp, #4]
   1e284:	bl	1dfcc <__assert_fail@plt+0xc62c>
   1e288:	ldr	r3, [sp, #4]
   1e28c:	subs	sl, r0, #0
   1e290:	bne	1e4a8 <__assert_fail@plt+0xcb08>
   1e294:	ldrb	r1, [r4, #52]	; 0x34
   1e298:	ldr	ip, [r8, #4]
   1e29c:	and	r2, fp, #15
   1e2a0:	bic	r1, r1, #15
   1e2a4:	orr	r2, r2, r1
   1e2a8:	cmp	ip, #0
   1e2ac:	str	r3, [r4, #40]	; 0x28
   1e2b0:	strb	r2, [r4, #52]	; 0x34
   1e2b4:	ble	1e410 <__assert_fail@plt+0xca70>
   1e2b8:	add	r2, r4, #12
   1e2bc:	str	r2, [sp, #12]
   1e2c0:	add	r2, r4, #8
   1e2c4:	str	r2, [sp, #16]
   1e2c8:	and	r2, fp, #4
   1e2cc:	str	r2, [sp, #8]
   1e2d0:	and	r2, fp, #2
   1e2d4:	and	fp, fp, #1
   1e2d8:	str	r7, [sp, #20]
   1e2dc:	ldr	r6, [pc, #464]	; 1e4b4 <__assert_fail@plt+0xcb14>
   1e2e0:	mov	r7, fp
   1e2e4:	mov	r5, sl
   1e2e8:	str	r2, [sp, #4]
   1e2ec:	mov	fp, r3
   1e2f0:	b	1e33c <__assert_fail@plt+0xc99c>
   1e2f4:	cmp	r7, #0
   1e2f8:	beq	1e3e4 <__assert_fail@plt+0xca44>
   1e2fc:	tst	r2, #2
   1e300:	bne	1e3e4 <__assert_fail@plt+0xca44>
   1e304:	tst	r2, #16
   1e308:	beq	1e318 <__assert_fail@plt+0xc978>
   1e30c:	ldr	r3, [sp, #4]
   1e310:	cmp	r3, #0
   1e314:	beq	1e3e4 <__assert_fail@plt+0xca44>
   1e318:	tst	r2, #64	; 0x40
   1e31c:	beq	1e32c <__assert_fail@plt+0xc98c>
   1e320:	ldr	r3, [sp, #8]
   1e324:	cmp	r3, #0
   1e328:	beq	1e3e4 <__assert_fail@plt+0xca44>
   1e32c:	ldr	ip, [r8, #4]
   1e330:	add	r5, r5, #1
   1e334:	cmp	r5, ip
   1e338:	bge	1e40c <__assert_fail@plt+0xca6c>
   1e33c:	ldr	r2, [r8, #8]
   1e340:	ldr	r1, [r9]
   1e344:	ldr	r2, [r2, r5, lsl #2]
   1e348:	add	r1, r1, r2, lsl #3
   1e34c:	ldr	r2, [r1, #4]
   1e350:	ldrb	r0, [r1, #4]
   1e354:	ands	r2, r6, r2, lsr #8
   1e358:	moveq	lr, #1
   1e35c:	movne	lr, #0
   1e360:	cmp	r0, #1
   1e364:	movne	lr, #0
   1e368:	andeq	lr, lr, #1
   1e36c:	cmp	lr, #0
   1e370:	bne	1e330 <__assert_fail@plt+0xc990>
   1e374:	ldrb	r1, [r1, #6]
   1e378:	ldrb	lr, [r4, #52]	; 0x34
   1e37c:	cmp	r0, #2
   1e380:	lsr	r1, r1, #4
   1e384:	orr	r1, r1, lr, lsr #5
   1e388:	and	r1, r1, #1
   1e38c:	bic	lr, lr, #32
   1e390:	orr	r1, lr, r1, lsl #5
   1e394:	strb	r1, [r4, #52]	; 0x34
   1e398:	uxtbeq	r1, r1
   1e39c:	orreq	r1, r1, #16
   1e3a0:	strbeq	r1, [r4, #52]	; 0x34
   1e3a4:	beq	1e3b8 <__assert_fail@plt+0xca18>
   1e3a8:	cmp	r0, #4
   1e3ac:	ldrbeq	r1, [r4, #52]	; 0x34
   1e3b0:	orreq	r1, r1, #64	; 0x40
   1e3b4:	strbeq	r1, [r4, #52]	; 0x34
   1e3b8:	cmp	r2, #0
   1e3bc:	beq	1e330 <__assert_fail@plt+0xc990>
   1e3c0:	ldr	r1, [r4, #40]	; 0x28
   1e3c4:	cmp	fp, r1
   1e3c8:	beq	1e464 <__assert_fail@plt+0xcac4>
   1e3cc:	tst	r2, #1
   1e3d0:	bne	1e2f4 <__assert_fail@plt+0xc954>
   1e3d4:	tst	r2, #2
   1e3d8:	beq	1e304 <__assert_fail@plt+0xc964>
   1e3dc:	cmp	r7, #0
   1e3e0:	beq	1e304 <__assert_fail@plt+0xc964>
   1e3e4:	subs	r2, r5, sl
   1e3e8:	bmi	1e3f8 <__assert_fail@plt+0xca58>
   1e3ec:	ldr	r1, [r4, #8]
   1e3f0:	cmp	r2, r1
   1e3f4:	blt	1e44c <__assert_fail@plt+0xcaac>
   1e3f8:	ldr	ip, [r8, #4]
   1e3fc:	add	r5, r5, #1
   1e400:	cmp	r5, ip
   1e404:	add	sl, sl, #1
   1e408:	blt	1e33c <__assert_fail@plt+0xc99c>
   1e40c:	ldr	r7, [sp, #20]
   1e410:	mov	r2, r7
   1e414:	mov	r0, r9
   1e418:	mov	r1, r4
   1e41c:	bl	1c178 <__assert_fail@plt+0xa7d8>
   1e420:	cmp	r0, #0
   1e424:	beq	1e254 <__assert_fail@plt+0xc8b4>
   1e428:	mov	r0, r4
   1e42c:	bl	1cddc <__assert_fail@plt+0xb43c>
   1e430:	ldr	r2, [sp, #24]
   1e434:	mov	r3, #12
   1e438:	mov	r4, #0
   1e43c:	mov	r0, r4
   1e440:	str	r3, [r2]
   1e444:	add	sp, sp, #36	; 0x24
   1e448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e44c:	sub	r1, r1, #1
   1e450:	str	r1, [r4, #8]
   1e454:	ldr	r0, [sp, #16]
   1e458:	ldr	r1, [sp, #12]
   1e45c:	bl	1d804 <__assert_fail@plt+0xbe64>
   1e460:	b	1e3f8 <__assert_fail@plt+0xca58>
   1e464:	mov	r0, #12
   1e468:	str	r2, [sp, #28]
   1e46c:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1e470:	ldr	r2, [sp, #28]
   1e474:	subs	r1, r0, #0
   1e478:	beq	1e428 <__assert_fail@plt+0xca88>
   1e47c:	str	r1, [r4, #40]	; 0x28
   1e480:	mov	r1, r8
   1e484:	str	r2, [sp, #28]
   1e488:	bl	1dfcc <__assert_fail@plt+0xc62c>
   1e48c:	ldr	r2, [sp, #28]
   1e490:	subs	sl, r0, #0
   1e494:	bne	1e428 <__assert_fail@plt+0xca88>
   1e498:	ldrb	r1, [r4, #52]	; 0x34
   1e49c:	orr	r1, r1, #128	; 0x80
   1e4a0:	strb	r1, [r4, #52]	; 0x34
   1e4a4:	b	1e3cc <__assert_fail@plt+0xca2c>
   1e4a8:	mov	r0, r4
   1e4ac:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1e4b0:	b	1e430 <__assert_fail@plt+0xca90>
   1e4b4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1e4b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4bc:	ldr	r6, [r2, #4]
   1e4c0:	cmp	r6, #0
   1e4c4:	streq	r6, [r0]
   1e4c8:	moveq	r4, r6
   1e4cc:	beq	1e55c <__assert_fail@plt+0xcbbc>
   1e4d0:	ble	1e4ec <__assert_fail@plt+0xcb4c>
   1e4d4:	ldr	r3, [r2, #8]
   1e4d8:	add	lr, r3, r6, lsl #2
   1e4dc:	ldr	ip, [r3], #4
   1e4e0:	cmp	lr, r3
   1e4e4:	add	r6, r6, ip
   1e4e8:	bne	1e4dc <__assert_fail@plt+0xcb3c>
   1e4ec:	ldr	r3, [r1, #68]	; 0x44
   1e4f0:	mov	sl, r2
   1e4f4:	and	r3, r3, r6
   1e4f8:	ldr	r2, [r1, #32]
   1e4fc:	add	r3, r3, r3, lsl #1
   1e500:	mov	r7, r1
   1e504:	lsl	r3, r3, #2
   1e508:	mov	r8, r0
   1e50c:	ldr	fp, [r2, r3]
   1e510:	add	r1, r2, r3
   1e514:	cmp	fp, #0
   1e518:	ble	1e564 <__assert_fail@plt+0xcbc4>
   1e51c:	ldr	r9, [r1, #8]
   1e520:	mov	r5, #0
   1e524:	sub	r9, r9, #4
   1e528:	b	1e534 <__assert_fail@plt+0xcb94>
   1e52c:	cmp	r5, fp
   1e530:	beq	1e564 <__assert_fail@plt+0xcbc4>
   1e534:	ldr	r4, [r9, #4]!
   1e538:	add	r5, r5, #1
   1e53c:	ldr	r3, [r4]
   1e540:	cmp	r3, r6
   1e544:	bne	1e52c <__assert_fail@plt+0xcb8c>
   1e548:	mov	r1, sl
   1e54c:	add	r0, r4, #4
   1e550:	bl	1d600 <__assert_fail@plt+0xbc60>
   1e554:	cmp	r0, #0
   1e558:	beq	1e52c <__assert_fail@plt+0xcb8c>
   1e55c:	mov	r0, r4
   1e560:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e564:	mov	r1, #1
   1e568:	mov	r0, #56	; 0x38
   1e56c:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   1e570:	subs	r4, r0, #0
   1e574:	beq	1e680 <__assert_fail@plt+0xcce0>
   1e578:	add	r5, r4, #4
   1e57c:	mov	r0, r5
   1e580:	mov	r1, sl
   1e584:	bl	1dfcc <__assert_fail@plt+0xc62c>
   1e588:	cmp	r0, #0
   1e58c:	bne	1e6a4 <__assert_fail@plt+0xcd04>
   1e590:	ldr	lr, [sl, #4]
   1e594:	str	r5, [r4, #40]	; 0x28
   1e598:	cmp	lr, #0
   1e59c:	ble	1e660 <__assert_fail@plt+0xccc0>
   1e5a0:	ldr	ip, [sl, #8]
   1e5a4:	ldr	r5, [r7]
   1e5a8:	ldr	r9, [pc, #256]	; 1e6b0 <__assert_fail@plt+0xcd10>
   1e5ac:	add	lr, ip, lr, lsl #2
   1e5b0:	b	1e60c <__assert_fail@plt+0xcc6c>
   1e5b4:	ldrb	r3, [r2, #6]
   1e5b8:	ldrb	r1, [r4, #52]	; 0x34
   1e5bc:	cmp	r0, #2
   1e5c0:	lsr	r3, r3, #4
   1e5c4:	orr	r3, r3, r1, lsr #5
   1e5c8:	and	r3, r3, #1
   1e5cc:	bic	r1, r1, #32
   1e5d0:	orr	r3, r1, r3, lsl #5
   1e5d4:	strb	r3, [r4, #52]	; 0x34
   1e5d8:	uxtbeq	r3, r3
   1e5dc:	orreq	r3, r3, #16
   1e5e0:	strbeq	r3, [r4, #52]	; 0x34
   1e5e4:	beq	1e604 <__assert_fail@plt+0xcc64>
   1e5e8:	cmp	r0, #4
   1e5ec:	beq	1e694 <__assert_fail@plt+0xccf4>
   1e5f0:	cmp	r0, #12
   1e5f4:	beq	1e64c <__assert_fail@plt+0xccac>
   1e5f8:	ldr	r3, [r2, #4]
   1e5fc:	tst	r3, r9
   1e600:	bne	1e64c <__assert_fail@plt+0xccac>
   1e604:	cmp	lr, ip
   1e608:	beq	1e660 <__assert_fail@plt+0xccc0>
   1e60c:	ldr	r2, [ip], #4
   1e610:	add	r2, r5, r2, lsl #3
   1e614:	ldrb	r0, [r2, #4]
   1e618:	cmp	r0, #1
   1e61c:	bne	1e5b4 <__assert_fail@plt+0xcc14>
   1e620:	ldr	r3, [r2, #4]
   1e624:	tst	r3, r9
   1e628:	beq	1e604 <__assert_fail@plt+0xcc64>
   1e62c:	ldrb	r3, [r2, #6]
   1e630:	ldrb	r2, [r4, #52]	; 0x34
   1e634:	lsr	r3, r3, #4
   1e638:	orr	r3, r3, r2, lsr #5
   1e63c:	and	r3, r3, #1
   1e640:	bic	r2, r2, #32
   1e644:	orr	r3, r2, r3, lsl #5
   1e648:	strb	r3, [r4, #52]	; 0x34
   1e64c:	ldrb	r3, [r4, #52]	; 0x34
   1e650:	cmp	lr, ip
   1e654:	orr	r3, r3, #128	; 0x80
   1e658:	strb	r3, [r4, #52]	; 0x34
   1e65c:	bne	1e60c <__assert_fail@plt+0xcc6c>
   1e660:	mov	r2, r6
   1e664:	mov	r0, r7
   1e668:	mov	r1, r4
   1e66c:	bl	1c178 <__assert_fail@plt+0xa7d8>
   1e670:	cmp	r0, #0
   1e674:	beq	1e55c <__assert_fail@plt+0xcbbc>
   1e678:	mov	r0, r4
   1e67c:	bl	1cddc <__assert_fail@plt+0xb43c>
   1e680:	mov	r4, #0
   1e684:	mov	r3, #12
   1e688:	str	r3, [r8]
   1e68c:	mov	r0, r4
   1e690:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e694:	ldrb	r3, [r4, #52]	; 0x34
   1e698:	orr	r3, r3, #64	; 0x40
   1e69c:	strb	r3, [r4, #52]	; 0x34
   1e6a0:	b	1e604 <__assert_fail@plt+0xcc64>
   1e6a4:	mov	r0, r4
   1e6a8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1e6ac:	b	1e680 <__assert_fail@plt+0xcce0>
   1e6b0:	andeq	pc, r3, r0, lsl #30
   1e6b4:	push	{r4, r5, r6, r7, r8, lr}
   1e6b8:	subs	r7, r3, #0
   1e6bc:	sub	sp, sp, #16
   1e6c0:	movgt	r8, r0
   1e6c4:	movgt	r4, r1
   1e6c8:	movgt	r5, r2
   1e6cc:	movgt	r6, #0
   1e6d0:	bgt	1e708 <__assert_fail@plt+0xcd68>
   1e6d4:	b	1e75c <__assert_fail@plt+0xcdbc>
   1e6d8:	bl	1e4b8 <__assert_fail@plt+0xcb18>
   1e6dc:	str	r0, [r4]
   1e6e0:	ldr	r0, [sp, #12]
   1e6e4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1e6e8:	ldr	ip, [sp]
   1e6ec:	cmp	ip, #0
   1e6f0:	bne	1e750 <__assert_fail@plt+0xcdb0>
   1e6f4:	add	r6, r6, #1
   1e6f8:	cmp	r7, r6
   1e6fc:	add	r4, r4, #4
   1e700:	add	r5, r5, #4
   1e704:	beq	1e75c <__assert_fail@plt+0xcdbc>
   1e708:	ldr	r2, [r4]
   1e70c:	ldr	r3, [r5]
   1e710:	cmp	r2, #0
   1e714:	add	r0, sp, #4
   1e718:	add	r1, r2, #4
   1e71c:	streq	r3, [r4]
   1e720:	beq	1e6f4 <__assert_fail@plt+0xcd54>
   1e724:	cmp	r3, #0
   1e728:	add	r2, r3, #4
   1e72c:	beq	1e6f4 <__assert_fail@plt+0xcd54>
   1e730:	bl	1e044 <__assert_fail@plt+0xc6a4>
   1e734:	add	r2, sp, #4
   1e738:	mov	r1, r8
   1e73c:	mov	ip, r0
   1e740:	cmp	ip, #0
   1e744:	mov	r0, sp
   1e748:	str	ip, [sp]
   1e74c:	beq	1e6d8 <__assert_fail@plt+0xcd38>
   1e750:	mov	r0, ip
   1e754:	add	sp, sp, #16
   1e758:	pop	{r4, r5, r6, r7, r8, pc}
   1e75c:	mov	ip, #0
   1e760:	mov	r0, ip
   1e764:	add	sp, sp, #16
   1e768:	pop	{r4, r5, r6, r7, r8, pc}
   1e76c:	ldr	ip, [r1, #4]
   1e770:	cmp	ip, #0
   1e774:	beq	1e8a4 <__assert_fail@plt+0xcf04>
   1e778:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e77c:	ldr	lr, [r2, #4]
   1e780:	cmp	lr, #0
   1e784:	beq	1e880 <__assert_fail@plt+0xcee0>
   1e788:	ldr	r3, [r0, #4]
   1e78c:	mov	r9, r2
   1e790:	ldr	r4, [r0]
   1e794:	add	r2, ip, lr
   1e798:	mov	r8, r1
   1e79c:	add	r1, r2, r3
   1e7a0:	cmp	r1, r4
   1e7a4:	mov	r7, r0
   1e7a8:	bgt	1e8e8 <__assert_fail@plt+0xcf48>
   1e7ac:	ldr	r0, [r0, #8]
   1e7b0:	ldr	sl, [r8, #8]
   1e7b4:	ldr	r2, [r9, #8]
   1e7b8:	sub	r5, ip, #1
   1e7bc:	sub	r6, lr, #1
   1e7c0:	add	r1, r3, ip
   1e7c4:	ldr	r4, [r2, r6, lsl #2]
   1e7c8:	ldr	ip, [sl, r5, lsl #2]
   1e7cc:	add	r1, r1, lr
   1e7d0:	sub	r3, r3, #1
   1e7d4:	cmp	ip, r4
   1e7d8:	beq	1e7f4 <__assert_fail@plt+0xce54>
   1e7dc:	bge	1e888 <__assert_fail@plt+0xcee8>
   1e7e0:	subs	r6, r6, #1
   1e7e4:	bmi	1e840 <__assert_fail@plt+0xcea0>
   1e7e8:	ldr	r4, [r2, r6, lsl #2]
   1e7ec:	cmp	ip, r4
   1e7f0:	bne	1e7dc <__assert_fail@plt+0xce3c>
   1e7f4:	cmp	r3, #0
   1e7f8:	blt	1e824 <__assert_fail@plt+0xce84>
   1e7fc:	ldr	lr, [r0, r3, lsl #2]
   1e800:	add	ip, r0, r3, lsl #2
   1e804:	cmp	lr, r4
   1e808:	bgt	1e81c <__assert_fail@plt+0xce7c>
   1e80c:	b	1e898 <__assert_fail@plt+0xcef8>
   1e810:	ldr	lr, [ip, #-4]!
   1e814:	cmp	lr, r4
   1e818:	ble	1e898 <__assert_fail@plt+0xcef8>
   1e81c:	subs	r3, r3, #1
   1e820:	bcs	1e810 <__assert_fail@plt+0xce70>
   1e824:	sub	r1, r1, #1
   1e828:	str	r4, [r0, r1, lsl #2]
   1e82c:	subs	r5, r5, #1
   1e830:	bmi	1e840 <__assert_fail@plt+0xcea0>
   1e834:	subs	r6, r6, #1
   1e838:	ldrpl	ip, [sl, r5, lsl #2]
   1e83c:	bpl	1e7e8 <__assert_fail@plt+0xce48>
   1e840:	ldr	lr, [r7, #4]
   1e844:	ldr	ip, [r8, #4]
   1e848:	ldr	r3, [r9, #4]
   1e84c:	add	ip, lr, ip
   1e850:	add	ip, ip, r3
   1e854:	sub	r2, ip, r1
   1e858:	sub	r3, lr, #1
   1e85c:	cmp	r3, #0
   1e860:	cmpge	r2, #0
   1e864:	add	lr, lr, r2
   1e868:	sub	ip, ip, #1
   1e86c:	str	lr, [r7, #4]
   1e870:	bgt	1e8bc <__assert_fail@plt+0xcf1c>
   1e874:	lsl	r2, r2, #2
   1e878:	add	r1, r0, r1, lsl #2
   1e87c:	bl	115d4 <memcpy@plt>
   1e880:	mov	r0, #0
   1e884:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e888:	subs	r5, r5, #1
   1e88c:	bmi	1e840 <__assert_fail@plt+0xcea0>
   1e890:	ldr	ip, [sl, r5, lsl #2]
   1e894:	b	1e7d4 <__assert_fail@plt+0xce34>
   1e898:	cmp	lr, r4
   1e89c:	bne	1e824 <__assert_fail@plt+0xce84>
   1e8a0:	b	1e82c <__assert_fail@plt+0xce8c>
   1e8a4:	mov	r0, ip
   1e8a8:	bx	lr
   1e8ac:	sub	r3, r3, #1
   1e8b0:	cmn	r3, #1
   1e8b4:	str	lr, [r0, r6, lsl #2]
   1e8b8:	beq	1e874 <__assert_fail@plt+0xced4>
   1e8bc:	ldr	r4, [r0, ip, lsl #2]
   1e8c0:	ldr	lr, [r0, r3, lsl #2]
   1e8c4:	add	r6, r3, r2
   1e8c8:	cmp	r4, lr
   1e8cc:	mov	r5, r6
   1e8d0:	ble	1e8ac <__assert_fail@plt+0xcf0c>
   1e8d4:	subs	r2, r2, #1
   1e8d8:	sub	ip, ip, #1
   1e8dc:	str	r4, [r0, r6, lsl #2]
   1e8e0:	bne	1e8bc <__assert_fail@plt+0xcf1c>
   1e8e4:	b	1e878 <__assert_fail@plt+0xced8>
   1e8e8:	add	r4, r2, r4
   1e8ec:	ldr	r0, [r0, #8]
   1e8f0:	lsl	r1, r4, #2
   1e8f4:	bl	1babc <__assert_fail@plt+0xa11c>
   1e8f8:	cmp	r0, #0
   1e8fc:	beq	1e918 <__assert_fail@plt+0xcf78>
   1e900:	ldr	ip, [r8, #4]
   1e904:	ldr	lr, [r9, #4]
   1e908:	ldr	r3, [r7, #4]
   1e90c:	str	r0, [r7, #8]
   1e910:	str	r4, [r7]
   1e914:	b	1e7b0 <__assert_fail@plt+0xce10>
   1e918:	mov	r0, #12
   1e91c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e924:	mov	r9, r1
   1e928:	ldr	r7, [r0, #28]
   1e92c:	add	r1, r1, r1, lsl #1
   1e930:	sub	sp, sp, #36	; 0x24
   1e934:	add	r7, r7, r1, lsl #2
   1e938:	mov	r5, #0
   1e93c:	str	r5, [sp, #24]
   1e940:	str	r5, [sp, #20]
   1e944:	str	r5, [sp, #28]
   1e948:	ldr	r6, [r7, #4]
   1e94c:	str	r3, [sp, #12]
   1e950:	cmp	r6, r5
   1e954:	ble	1eb3c <__assert_fail@plt+0xd19c>
   1e958:	add	r3, r7, #8
   1e95c:	str	r3, [sp]
   1e960:	add	r3, r2, #8
   1e964:	mov	r8, r0
   1e968:	str	r3, [sp, #8]
   1e96c:	str	r2, [sp, #4]
   1e970:	b	1e9bc <__assert_fail@plt+0xd01c>
   1e974:	ldr	r3, [sp, #4]
   1e978:	mov	r2, fp
   1e97c:	ldr	r1, [sp, #8]
   1e980:	ldr	r0, [r3, #4]
   1e984:	bl	1d674 <__assert_fail@plt+0xbcd4>
   1e988:	cmp	r0, #0
   1e98c:	beq	1ea18 <__assert_fail@plt+0xd078>
   1e990:	ldr	r2, [r8, #28]
   1e994:	ldr	r1, [sp, #12]
   1e998:	add	r2, r2, r4
   1e99c:	add	r0, sp, #20
   1e9a0:	bl	1e76c <__assert_fail@plt+0xcdcc>
   1e9a4:	cmp	r0, #0
   1e9a8:	bne	1eb24 <__assert_fail@plt+0xd184>
   1e9ac:	ldr	r6, [r7, #4]
   1e9b0:	add	r5, r5, #1
   1e9b4:	cmp	r6, r5
   1e9b8:	ble	1ea78 <__assert_fail@plt+0xd0d8>
   1e9bc:	ldr	r3, [r7, #8]
   1e9c0:	ldr	r4, [r3, r5, lsl #2]
   1e9c4:	cmp	r9, r4
   1e9c8:	beq	1e9b0 <__assert_fail@plt+0xd010>
   1e9cc:	ldr	r3, [r8]
   1e9d0:	add	r3, r3, r4, lsl #3
   1e9d4:	ldrb	r3, [r3, #4]
   1e9d8:	tst	r3, #8
   1e9dc:	beq	1e9b0 <__assert_fail@plt+0xd010>
   1e9e0:	add	r4, r4, r4, lsl #1
   1e9e4:	ldr	r3, [r8, #20]
   1e9e8:	lsl	r4, r4, #2
   1e9ec:	add	r3, r3, r4
   1e9f0:	ldr	r1, [sp]
   1e9f4:	ldmib	r3, {r3, sl}
   1e9f8:	mov	r0, r6
   1e9fc:	ldr	fp, [sl]
   1ea00:	cmp	r3, #1
   1ea04:	mov	r2, fp
   1ea08:	ble	1ea5c <__assert_fail@plt+0xd0bc>
   1ea0c:	bl	1d674 <__assert_fail@plt+0xbcd4>
   1ea10:	cmp	r0, #0
   1ea14:	beq	1e974 <__assert_fail@plt+0xcfd4>
   1ea18:	ldr	sl, [sl, #4]
   1ea1c:	cmp	sl, #0
   1ea20:	ble	1e9b0 <__assert_fail@plt+0xd010>
   1ea24:	mov	r2, sl
   1ea28:	ldr	r1, [sp]
   1ea2c:	mov	r0, r6
   1ea30:	bl	1d674 <__assert_fail@plt+0xbcd4>
   1ea34:	cmp	r0, #0
   1ea38:	bne	1e9b0 <__assert_fail@plt+0xd010>
   1ea3c:	mov	r2, sl
   1ea40:	ldr	r3, [sp, #4]
   1ea44:	ldr	r1, [sp, #8]
   1ea48:	ldr	r0, [r3, #4]
   1ea4c:	bl	1d674 <__assert_fail@plt+0xbcd4>
   1ea50:	cmp	r0, #0
   1ea54:	beq	1e9b0 <__assert_fail@plt+0xd010>
   1ea58:	b	1e990 <__assert_fail@plt+0xcff0>
   1ea5c:	bl	1d674 <__assert_fail@plt+0xbcd4>
   1ea60:	cmp	r0, #0
   1ea64:	moveq	r2, fp
   1ea68:	beq	1ea40 <__assert_fail@plt+0xd0a0>
   1ea6c:	add	r5, r5, #1
   1ea70:	cmp	r6, r5
   1ea74:	bgt	1e9bc <__assert_fail@plt+0xd01c>
   1ea78:	cmp	r6, #0
   1ea7c:	ldr	fp, [sp, #4]
   1ea80:	ble	1eb0c <__assert_fail@plt+0xd16c>
   1ea84:	mov	r4, #0
   1ea88:	add	r8, fp, #8
   1ea8c:	add	r9, fp, #4
   1ea90:	b	1ea9c <__assert_fail@plt+0xd0fc>
   1ea94:	cmp	r6, r4
   1ea98:	ble	1eb0c <__assert_fail@plt+0xd16c>
   1ea9c:	ldr	r3, [r7, #8]
   1eaa0:	add	r1, sp, #28
   1eaa4:	ldr	r0, [sp, #24]
   1eaa8:	ldr	r5, [r3, r4, lsl #2]
   1eaac:	add	r4, r4, #1
   1eab0:	mov	r2, r5
   1eab4:	bl	1d674 <__assert_fail@plt+0xbcd4>
   1eab8:	mov	r2, r5
   1eabc:	mov	r1, r8
   1eac0:	cmp	r0, #0
   1eac4:	bne	1ea94 <__assert_fail@plt+0xd0f4>
   1eac8:	ldr	r5, [fp, #4]
   1eacc:	mov	r0, r5
   1ead0:	bl	1d674 <__assert_fail@plt+0xbcd4>
   1ead4:	sub	r2, r0, #1
   1ead8:	cmp	r2, r5
   1eadc:	movlt	r3, #0
   1eae0:	movge	r3, #1
   1eae4:	orrs	r3, r3, r2, lsr #31
   1eae8:	bne	1ea94 <__assert_fail@plt+0xd0f4>
   1eaec:	sub	r5, r5, #1
   1eaf0:	str	r5, [fp, #4]
   1eaf4:	mov	r1, r8
   1eaf8:	mov	r0, r9
   1eafc:	bl	1d804 <__assert_fail@plt+0xbe64>
   1eb00:	ldr	r6, [r7, #4]
   1eb04:	cmp	r6, r4
   1eb08:	bgt	1ea9c <__assert_fail@plt+0xd0fc>
   1eb0c:	ldr	r0, [sp, #28]
   1eb10:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1eb14:	mov	r4, #0
   1eb18:	mov	r0, r4
   1eb1c:	add	sp, sp, #36	; 0x24
   1eb20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb24:	mov	r4, r0
   1eb28:	ldr	r0, [sp, #28]
   1eb2c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1eb30:	mov	r0, r4
   1eb34:	add	sp, sp, #36	; 0x24
   1eb38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb3c:	mov	r0, r5
   1eb40:	b	1eb10 <__assert_fail@plt+0xd170>
   1eb44:	ldrb	r2, [r1, #24]
   1eb48:	cmp	r2, #16
   1eb4c:	beq	1ebbc <__assert_fail@plt+0xd21c>
   1eb50:	push	{r4, r5, r6, lr}
   1eb54:	add	r3, r1, #20
   1eb58:	mov	r4, r1
   1eb5c:	mov	r5, r0
   1eb60:	str	r1, [r4, #12]
   1eb64:	ldm	r3, {r1, r2}
   1eb68:	bl	1cb98 <__assert_fail@plt+0xb1f8>
   1eb6c:	cmn	r0, #1
   1eb70:	str	r0, [r4, #28]
   1eb74:	beq	1ebd8 <__assert_fail@plt+0xd238>
   1eb78:	ldrb	r3, [r4, #24]
   1eb7c:	cmp	r3, #12
   1eb80:	beq	1eb8c <__assert_fail@plt+0xd1ec>
   1eb84:	mov	r0, #0
   1eb88:	pop	{r4, r5, r6, pc}
   1eb8c:	ldr	r1, [r5]
   1eb90:	ldr	r2, [r4, #20]
   1eb94:	add	r1, r1, r0, lsl #3
   1eb98:	mov	r0, #0
   1eb9c:	ldr	r3, [r1, #4]
   1eba0:	lsl	r2, r2, #22
   1eba4:	bic	r3, r3, #261120	; 0x3fc00
   1eba8:	lsr	r2, r2, #22
   1ebac:	bic	r3, r3, #768	; 0x300
   1ebb0:	orr	r3, r3, r2, lsl #8
   1ebb4:	str	r3, [r1, #4]
   1ebb8:	pop	{r4, r5, r6, pc}
   1ebbc:	ldr	r3, [r1, #4]
   1ebc0:	mov	r0, #0
   1ebc4:	ldr	r2, [r3, #12]
   1ebc8:	ldr	r3, [r3, #28]
   1ebcc:	str	r2, [r1, #12]
   1ebd0:	str	r3, [r1, #28]
   1ebd4:	bx	lr
   1ebd8:	mov	r0, #12
   1ebdc:	pop	{r4, r5, r6, pc}
   1ebe0:	push	{r4, r5, r6, r7, r8, lr}
   1ebe4:	subs	r6, r1, #0
   1ebe8:	beq	1ecdc <__assert_fail@plt+0xd33c>
   1ebec:	ldr	r2, [r6, #4]
   1ebf0:	cmp	r2, #0
   1ebf4:	mov	ip, r2
   1ebf8:	beq	1ecdc <__assert_fail@plt+0xd33c>
   1ebfc:	ldm	r0, {r1, r3}
   1ec00:	mov	r5, r0
   1ec04:	add	r4, r3, r2, lsl #1
   1ec08:	cmp	r1, r4
   1ec0c:	blt	1ed04 <__assert_fail@plt+0xd364>
   1ec10:	cmp	r3, #0
   1ec14:	beq	1ed44 <__assert_fail@plt+0xd3a4>
   1ec18:	sub	r2, r2, #1
   1ec1c:	sub	r3, r3, #1
   1ec20:	mvn	r7, r2
   1ec24:	mvn	lr, r3
   1ec28:	tst	r7, lr
   1ec2c:	bpl	1ec68 <__assert_fail@plt+0xd2c8>
   1ec30:	ldr	r1, [r5, #8]
   1ec34:	ldr	r0, [r6, #8]
   1ec38:	ldr	ip, [r1, r3, lsl #2]
   1ec3c:	ldr	r0, [r0, r2, lsl #2]
   1ec40:	cmp	ip, r0
   1ec44:	beq	1ec18 <__assert_fail@plt+0xd278>
   1ec48:	sublt	r4, r4, #1
   1ec4c:	sublt	r2, r2, #1
   1ec50:	subge	r3, r3, #1
   1ec54:	mvnlt	r7, r2
   1ec58:	mvnge	lr, r3
   1ec5c:	strlt	r0, [r1, r4, lsl #2]
   1ec60:	tst	r7, lr
   1ec64:	bmi	1ec30 <__assert_fail@plt+0xd290>
   1ec68:	cmp	r2, #0
   1ec6c:	blt	1ec8c <__assert_fail@plt+0xd2ec>
   1ec70:	add	r2, r2, #1
   1ec74:	sub	r4, r4, r2
   1ec78:	ldr	r0, [r5, #8]
   1ec7c:	lsl	r2, r2, #2
   1ec80:	add	r0, r0, r4, lsl #2
   1ec84:	ldr	r1, [r6, #8]
   1ec88:	bl	115d4 <memcpy@plt>
   1ec8c:	ldr	r1, [r6, #4]
   1ec90:	ldr	ip, [r5, #4]
   1ec94:	add	r1, ip, r1, lsl #1
   1ec98:	subs	r2, r1, r4
   1ec9c:	sub	r1, r1, #1
   1eca0:	beq	1ecdc <__assert_fail@plt+0xd33c>
   1eca4:	ldr	r0, [r5, #8]
   1eca8:	sub	r3, ip, #1
   1ecac:	add	ip, ip, r2
   1ecb0:	str	ip, [r5, #4]
   1ecb4:	ldr	lr, [r0, r1, lsl #2]
   1ecb8:	ldr	ip, [r0, r3, lsl #2]
   1ecbc:	add	r6, r3, r2
   1ecc0:	cmp	lr, ip
   1ecc4:	mov	r5, r6
   1ecc8:	ble	1ece4 <__assert_fail@plt+0xd344>
   1eccc:	subs	r2, r2, #1
   1ecd0:	sub	r1, r1, #1
   1ecd4:	str	lr, [r0, r6, lsl #2]
   1ecd8:	bne	1ecb4 <__assert_fail@plt+0xd314>
   1ecdc:	mov	r0, #0
   1ece0:	pop	{r4, r5, r6, r7, r8, pc}
   1ece4:	subs	r3, r3, #1
   1ece8:	str	ip, [r0, r6, lsl #2]
   1ecec:	bpl	1ecb4 <__assert_fail@plt+0xd314>
   1ecf0:	lsl	r2, r2, #2
   1ecf4:	add	r1, r0, r4, lsl #2
   1ecf8:	bl	115d4 <memcpy@plt>
   1ecfc:	mov	r0, #0
   1ed00:	pop	{r4, r5, r6, r7, r8, pc}
   1ed04:	add	r2, r2, r1
   1ed08:	ldr	r0, [r0, #8]
   1ed0c:	lsl	r1, r2, #3
   1ed10:	lsl	r4, r2, #1
   1ed14:	bl	1babc <__assert_fail@plt+0xa11c>
   1ed18:	cmp	r0, #0
   1ed1c:	beq	1ed60 <__assert_fail@plt+0xd3c0>
   1ed20:	ldr	r3, [r5, #4]
   1ed24:	str	r0, [r5, #8]
   1ed28:	cmp	r3, #0
   1ed2c:	str	r4, [r5]
   1ed30:	ldreq	ip, [r6, #4]
   1ed34:	beq	1ed48 <__assert_fail@plt+0xd3a8>
   1ed38:	ldr	r2, [r6, #4]
   1ed3c:	add	r4, r3, r2, lsl #1
   1ed40:	b	1ec18 <__assert_fail@plt+0xd278>
   1ed44:	ldr	r0, [r0, #8]
   1ed48:	str	ip, [r5, #4]
   1ed4c:	ldr	r2, [r6, #4]
   1ed50:	ldr	r1, [r6, #8]
   1ed54:	lsl	r2, r2, #2
   1ed58:	bl	115d4 <memcpy@plt>
   1ed5c:	b	1ecdc <__assert_fail@plt+0xd33c>
   1ed60:	mov	r0, #12
   1ed64:	pop	{r4, r5, r6, r7, r8, pc}
   1ed68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed6c:	add	r7, r2, r2, lsl #1
   1ed70:	mov	r4, r2
   1ed74:	ldr	r2, [r1, #20]
   1ed78:	lsl	r7, r7, #2
   1ed7c:	add	r2, r2, r7
   1ed80:	mov	r6, r1
   1ed84:	ldr	r1, [r2, #4]
   1ed88:	sub	sp, sp, #44	; 0x2c
   1ed8c:	add	r1, r1, #1
   1ed90:	mov	r2, #0
   1ed94:	mov	sl, r0
   1ed98:	lsl	r0, r1, #2
   1ed9c:	str	r3, [sp, #12]
   1eda0:	str	r1, [sp, #16]
   1eda4:	str	r2, [sp, #20]
   1eda8:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1edac:	cmp	r0, #0
   1edb0:	str	r0, [sp, #24]
   1edb4:	beq	1ef90 <__assert_fail@plt+0xd5f0>
   1edb8:	ldr	r8, [r6]
   1edbc:	ldr	r3, [sp, #20]
   1edc0:	lsl	r5, r4, #3
   1edc4:	add	lr, r8, r5
   1edc8:	str	r4, [r0, r3, lsl #2]
   1edcc:	ldr	r1, [r6, #24]
   1edd0:	ldr	r0, [lr, #4]
   1edd4:	ldr	r2, [pc, #452]	; 1efa0 <__assert_fail@plt+0xd600>
   1edd8:	add	ip, r1, r7
   1eddc:	and	r2, r2, r0
   1ede0:	add	r3, r3, #1
   1ede4:	cmp	r2, #0
   1ede8:	mvn	r2, #0
   1edec:	str	r3, [sp, #20]
   1edf0:	str	r2, [ip, #4]
   1edf4:	beq	1ee24 <__assert_fail@plt+0xd484>
   1edf8:	ldr	r3, [r6, #20]
   1edfc:	add	r3, r3, r7
   1ee00:	ldr	r2, [r3, #4]
   1ee04:	cmp	r2, #0
   1ee08:	beq	1eef4 <__assert_fail@plt+0xd554>
   1ee0c:	ldr	r3, [r3, #8]
   1ee10:	ldr	r3, [r3]
   1ee14:	add	r8, r8, r3, lsl #3
   1ee18:	ldrb	r3, [r8, #6]
   1ee1c:	tst	r3, #4
   1ee20:	beq	1ef58 <__assert_fail@plt+0xd5b8>
   1ee24:	ldrb	r3, [lr, #4]
   1ee28:	tst	r3, #8
   1ee2c:	beq	1eef0 <__assert_fail@plt+0xd550>
   1ee30:	ldr	ip, [r6, #20]
   1ee34:	add	r3, ip, r7
   1ee38:	ldr	r2, [r3, #4]
   1ee3c:	cmp	r2, #0
   1ee40:	ble	1eef0 <__assert_fail@plt+0xd550>
   1ee44:	mov	r9, #0
   1ee48:	mov	r5, r9
   1ee4c:	mov	fp, #1
   1ee50:	add	r8, sp, #28
   1ee54:	b	1eea8 <__assert_fail@plt+0xd508>
   1ee58:	cmp	r0, #0
   1ee5c:	beq	1ef18 <__assert_fail@plt+0xd578>
   1ee60:	ldm	r3, {r0, r1, r2}
   1ee64:	stm	r8, {r0, r1, r2}
   1ee68:	mov	r1, r8
   1ee6c:	add	r0, sp, #16
   1ee70:	bl	1ebe0 <__assert_fail@plt+0xd240>
   1ee74:	cmp	r0, #0
   1ee78:	bne	1ef30 <__assert_fail@plt+0xd590>
   1ee7c:	ldr	r1, [r6, #24]
   1ee80:	add	r4, r1, r4
   1ee84:	ldr	r3, [r4, #4]
   1ee88:	cmp	r3, #0
   1ee8c:	beq	1ef40 <__assert_fail@plt+0xd5a0>
   1ee90:	ldr	ip, [r6, #20]
   1ee94:	add	r3, ip, r7
   1ee98:	add	r5, r5, #1
   1ee9c:	ldr	r2, [r3, #4]
   1eea0:	cmp	r2, r5
   1eea4:	ble	1eed0 <__assert_fail@plt+0xd530>
   1eea8:	ldr	r3, [r3, #8]
   1eeac:	ldr	r2, [r3, r5, lsl #2]
   1eeb0:	add	r4, r2, r2, lsl #1
   1eeb4:	lsl	r4, r4, #2
   1eeb8:	add	r3, r1, r4
   1eebc:	ldr	r0, [r3, #4]
   1eec0:	cmn	r0, #1
   1eec4:	bne	1ee58 <__assert_fail@plt+0xd4b8>
   1eec8:	mov	r9, fp
   1eecc:	b	1ee94 <__assert_fail@plt+0xd4f4>
   1eed0:	ldr	r3, [sp, #12]
   1eed4:	eor	r3, r3, #1
   1eed8:	tst	r9, r3
   1eedc:	addne	r7, r1, r7
   1eee0:	movne	r3, #0
   1eee4:	strne	r3, [r7, #4]
   1eee8:	addne	lr, sp, #16
   1eeec:	bne	1ef00 <__assert_fail@plt+0xd560>
   1eef0:	add	ip, r1, r7
   1eef4:	add	lr, sp, #16
   1eef8:	ldm	lr, {r0, r1, r2}
   1eefc:	stm	ip, {r0, r1, r2}
   1ef00:	mov	r3, #0
   1ef04:	ldm	lr, {r0, r1, r2}
   1ef08:	stm	sl, {r0, r1, r2}
   1ef0c:	mov	r0, r3
   1ef10:	add	sp, sp, #44	; 0x2c
   1ef14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef18:	mov	r3, #0
   1ef1c:	mov	r1, r6
   1ef20:	mov	r0, r8
   1ef24:	bl	1ed68 <__assert_fail@plt+0xd3c8>
   1ef28:	cmp	r0, #0
   1ef2c:	beq	1ee68 <__assert_fail@plt+0xd4c8>
   1ef30:	mov	r3, r0
   1ef34:	mov	r0, r3
   1ef38:	add	sp, sp, #44	; 0x2c
   1ef3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef40:	ldr	r0, [sp, #36]	; 0x24
   1ef44:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1ef48:	mov	r9, fp
   1ef4c:	ldr	r1, [r6, #24]
   1ef50:	ldr	ip, [r6, #20]
   1ef54:	b	1ee94 <__assert_fail@plt+0xd4f4>
   1ef58:	ldr	r2, [pc, #68]	; 1efa4 <__assert_fail@plt+0xd604>
   1ef5c:	mov	r3, r4
   1ef60:	and	r0, r2, r0, lsr #8
   1ef64:	str	r0, [sp]
   1ef68:	mov	r2, r4
   1ef6c:	mov	r1, r4
   1ef70:	mov	r0, r6
   1ef74:	bl	1d200 <__assert_fail@plt+0xb860>
   1ef78:	subs	r3, r0, #0
   1ef7c:	bne	1ef0c <__assert_fail@plt+0xd56c>
   1ef80:	ldr	lr, [r6]
   1ef84:	ldr	r1, [r6, #24]
   1ef88:	add	lr, lr, r5
   1ef8c:	b	1ee24 <__assert_fail@plt+0xd484>
   1ef90:	mov	r3, #12
   1ef94:	mov	r0, r3
   1ef98:	add	sp, sp, #44	; 0x2c
   1ef9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efa0:	andeq	pc, r3, r0, lsl #30
   1efa4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1efa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efac:	mov	r8, r1
   1efb0:	ldr	r1, [r1, #4]
   1efb4:	sub	sp, sp, #28
   1efb8:	mov	r6, #0
   1efbc:	mov	r7, r0
   1efc0:	lsl	r0, r1, #2
   1efc4:	mov	r5, r2
   1efc8:	mov	r4, r3
   1efcc:	str	r1, [sp, #12]
   1efd0:	str	r6, [sp, #16]
   1efd4:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1efd8:	cmp	r0, r6
   1efdc:	str	r0, [sp, #20]
   1efe0:	beq	1f0cc <__assert_fail@plt+0xd72c>
   1efe4:	ldr	r3, [r8, #4]
   1efe8:	add	r9, sp, #12
   1efec:	cmp	r3, r6
   1eff0:	ble	1f088 <__assert_fail@plt+0xd6e8>
   1eff4:	ldr	r3, [r8, #8]
   1eff8:	ldr	r1, [r7, #24]
   1effc:	ldr	r2, [r3, r6, lsl #2]
   1f000:	add	r3, r2, r2, lsl #1
   1f004:	add	r1, r1, r3, lsl #2
   1f008:	ldr	fp, [r1, #4]
   1f00c:	cmp	fp, #0
   1f010:	ble	1f0a8 <__assert_fail@plt+0xd708>
   1f014:	ldr	ip, [r1, #8]
   1f018:	ldr	sl, [r7]
   1f01c:	sub	ip, ip, #4
   1f020:	mov	r3, #0
   1f024:	b	1f030 <__assert_fail@plt+0xd690>
   1f028:	cmp	fp, r3
   1f02c:	beq	1f0a8 <__assert_fail@plt+0xd708>
   1f030:	ldr	r0, [ip, #4]!
   1f034:	add	r3, r3, #1
   1f038:	add	lr, sl, r0, lsl #3
   1f03c:	ldrb	lr, [lr, #4]
   1f040:	cmp	r4, lr
   1f044:	bne	1f028 <__assert_fail@plt+0xd688>
   1f048:	ldr	lr, [sl, r0, lsl #3]
   1f04c:	cmp	r5, lr
   1f050:	bne	1f028 <__assert_fail@plt+0xd688>
   1f054:	cmn	r0, #1
   1f058:	beq	1f0a8 <__assert_fail@plt+0xd708>
   1f05c:	str	r4, [sp]
   1f060:	mov	r3, r5
   1f064:	mov	r1, r9
   1f068:	mov	r0, r7
   1f06c:	bl	1d704 <__assert_fail@plt+0xbd64>
   1f070:	subs	sl, r0, #0
   1f074:	bne	1f0b8 <__assert_fail@plt+0xd718>
   1f078:	ldr	r3, [r8, #4]
   1f07c:	add	r6, r6, #1
   1f080:	cmp	r3, r6
   1f084:	bgt	1eff4 <__assert_fail@plt+0xd654>
   1f088:	ldr	r0, [r8, #8]
   1f08c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1f090:	ldm	r9, {r0, r1, r2}
   1f094:	mov	sl, #0
   1f098:	stm	r8, {r0, r1, r2}
   1f09c:	mov	r0, sl
   1f0a0:	add	sp, sp, #28
   1f0a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0a8:	mov	r0, r9
   1f0ac:	bl	1ebe0 <__assert_fail@plt+0xd240>
   1f0b0:	subs	sl, r0, #0
   1f0b4:	beq	1f078 <__assert_fail@plt+0xd6d8>
   1f0b8:	ldr	r0, [sp, #20]
   1f0bc:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1f0c0:	mov	r0, sl
   1f0c4:	add	sp, sp, #28
   1f0c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0cc:	mov	sl, #12
   1f0d0:	mov	r0, sl
   1f0d4:	add	sp, sp, #28
   1f0d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0e0:	mov	r5, #0
   1f0e4:	ldr	r6, [r0, #108]	; 0x6c
   1f0e8:	sub	sp, sp, #44	; 0x2c
   1f0ec:	mov	r4, r6
   1f0f0:	cmp	r5, r4
   1f0f4:	bge	1f150 <__assert_fail@plt+0xd7b0>
   1f0f8:	add	lr, r5, r4
   1f0fc:	ldr	r7, [r0, #116]	; 0x74
   1f100:	add	lr, lr, lr, lsr #31
   1f104:	asr	lr, lr, #1
   1f108:	add	ip, lr, lr, lsl #1
   1f10c:	add	ip, r7, ip, lsl #3
   1f110:	ldr	ip, [ip, #4]
   1f114:	cmp	r2, ip
   1f118:	ble	1f140 <__assert_fail@plt+0xd7a0>
   1f11c:	b	1f370 <__assert_fail@plt+0xd9d0>
   1f120:	asr	ip, ip, #1
   1f124:	mov	r8, ip
   1f128:	add	r4, ip, ip, lsl #1
   1f12c:	add	r4, r7, r4, lsl #3
   1f130:	ldr	r4, [r4, #4]
   1f134:	cmp	r2, r4
   1f138:	bgt	1f378 <__assert_fail@plt+0xd9d8>
   1f13c:	mov	lr, ip
   1f140:	add	ip, r5, lr
   1f144:	cmp	r5, lr
   1f148:	add	ip, ip, ip, lsr #31
   1f14c:	blt	1f120 <__assert_fail@plt+0xd780>
   1f150:	cmp	r6, r5
   1f154:	ble	1f364 <__assert_fail@plt+0xd9c4>
   1f158:	add	ip, r5, r5, lsl #1
   1f15c:	ldr	r4, [r0, #116]	; 0x74
   1f160:	lsl	ip, ip, #3
   1f164:	add	lr, r4, ip
   1f168:	cmn	r5, #1
   1f16c:	ldr	lr, [lr, #4]
   1f170:	movne	r5, #0
   1f174:	moveq	r5, #1
   1f178:	cmp	lr, r2
   1f17c:	orrne	r5, r5, #1
   1f180:	cmp	r5, #0
   1f184:	bne	1f364 <__assert_fail@plt+0xd9c4>
   1f188:	ldr	fp, [r0, #84]	; 0x54
   1f18c:	mov	r8, r1
   1f190:	mov	r9, r0
   1f194:	add	r7, r1, #8
   1f198:	str	r3, [sp, #16]
   1f19c:	add	r3, ip, #24
   1f1a0:	str	r2, [sp, #8]
   1f1a4:	str	r3, [sp, #12]
   1f1a8:	str	r5, [sp, #20]
   1f1ac:	ldr	r3, [sp, #12]
   1f1b0:	add	r4, r4, r3
   1f1b4:	b	1f200 <__assert_fail@plt+0xd860>
   1f1b8:	ldr	r3, [r9, #100]	; 0x64
   1f1bc:	ldr	r2, [fp, #12]
   1f1c0:	ldr	r3, [r3, r5, lsl #2]
   1f1c4:	ldr	sl, [r2, sl, lsl #2]
   1f1c8:	cmp	r3, #0
   1f1cc:	beq	1f384 <__assert_fail@plt+0xd9e4>
   1f1d0:	add	r1, r3, #12
   1f1d4:	ldr	r0, [r3, #8]
   1f1d8:	mov	r2, sl
   1f1dc:	str	r3, [sp, #4]
   1f1e0:	bl	1d674 <__assert_fail@plt+0xbcd4>
   1f1e4:	ldr	r3, [sp, #4]
   1f1e8:	cmp	r0, #0
   1f1ec:	beq	1f2e4 <__assert_fail@plt+0xd944>
   1f1f0:	add	r4, r4, #24
   1f1f4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1f1f8:	cmp	r3, #0
   1f1fc:	beq	1f364 <__assert_fail@plt+0xd9c4>
   1f200:	ldr	sl, [r4, #-24]	; 0xffffffe8
   1f204:	ldr	r6, [r8, #4]
   1f208:	mov	r2, sl
   1f20c:	mov	r0, r6
   1f210:	mov	r1, r7
   1f214:	bl	1d674 <__assert_fail@plt+0xbcd4>
   1f218:	cmp	r0, #0
   1f21c:	beq	1f1f0 <__assert_fail@plt+0xd850>
   1f220:	ldr	r3, [sp, #8]
   1f224:	ldr	r5, [r4, #-12]
   1f228:	ldr	r2, [r4, #-16]
   1f22c:	add	r5, r3, r5
   1f230:	sub	r5, r5, r2
   1f234:	cmp	r3, r5
   1f238:	bne	1f1b8 <__assert_fail@plt+0xd818>
   1f23c:	ldr	r2, [fp, #20]
   1f240:	add	sl, sl, sl, lsl #1
   1f244:	mov	r0, r6
   1f248:	add	sl, r2, sl, lsl #2
   1f24c:	mov	r1, r7
   1f250:	ldr	r3, [sl, #8]
   1f254:	ldr	r5, [r3]
   1f258:	mov	r2, r5
   1f25c:	bl	1d674 <__assert_fail@plt+0xbcd4>
   1f260:	cmp	r0, #0
   1f264:	bne	1f1f0 <__assert_fail@plt+0xd850>
   1f268:	mov	r3, #1
   1f26c:	mov	r0, #4
   1f270:	str	r3, [sp, #28]
   1f274:	str	r3, [sp, #32]
   1f278:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1f27c:	ldr	r3, [sp, #80]	; 0x50
   1f280:	ldr	r2, [sp, #16]
   1f284:	add	r1, sp, #28
   1f288:	cmp	r0, #0
   1f28c:	strne	r5, [r0]
   1f290:	ldrne	ip, [sp, #20]
   1f294:	streq	r0, [sp, #32]
   1f298:	streq	r0, [sp, #28]
   1f29c:	moveq	ip, #12
   1f2a0:	str	r0, [sp, #36]	; 0x24
   1f2a4:	mov	r0, fp
   1f2a8:	str	ip, [sp, #24]
   1f2ac:	bl	1efa8 <__assert_fail@plt+0xd608>
   1f2b0:	add	r1, sp, #28
   1f2b4:	mov	r4, r0
   1f2b8:	mov	r0, r8
   1f2bc:	bl	1ebe0 <__assert_fail@plt+0xd240>
   1f2c0:	mov	r5, r0
   1f2c4:	ldr	r0, [sp, #36]	; 0x24
   1f2c8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1f2cc:	ldr	r0, [sp, #24]
   1f2d0:	orr	r3, r4, r5
   1f2d4:	orrs	r3, r3, r0
   1f2d8:	bne	1f3d8 <__assert_fail@plt+0xda38>
   1f2dc:	ldr	r4, [r9, #116]	; 0x74
   1f2e0:	b	1f1ac <__assert_fail@plt+0xd80c>
   1f2e4:	add	r1, r3, #4
   1f2e8:	add	r0, sp, #28
   1f2ec:	bl	1dfcc <__assert_fail@plt+0xc62c>
   1f2f0:	mov	r1, sl
   1f2f4:	str	r0, [sp, #24]
   1f2f8:	add	r0, sp, #28
   1f2fc:	bl	1d0e4 <__assert_fail@plt+0xb744>
   1f300:	ldr	r3, [sp, #24]
   1f304:	eor	r0, r0, #1
   1f308:	cmp	r3, #0
   1f30c:	orrne	r0, r0, #1
   1f310:	tst	r0, #255	; 0xff
   1f314:	bne	1f3b8 <__assert_fail@plt+0xda18>
   1f318:	add	r2, sp, #28
   1f31c:	mov	r1, fp
   1f320:	add	r0, sp, #24
   1f324:	ldr	sl, [r9, #100]	; 0x64
   1f328:	bl	1e4b8 <__assert_fail@plt+0xcb18>
   1f32c:	str	r0, [sl, r5, lsl #2]
   1f330:	ldr	r0, [sp, #36]	; 0x24
   1f334:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1f338:	ldr	r3, [r9, #100]	; 0x64
   1f33c:	ldr	r3, [r3, r5, lsl #2]
   1f340:	cmp	r3, #0
   1f344:	bne	1f1f0 <__assert_fail@plt+0xd850>
   1f348:	ldr	r0, [sp, #24]
   1f34c:	cmp	r0, #0
   1f350:	bne	1f368 <__assert_fail@plt+0xd9c8>
   1f354:	add	r4, r4, #24
   1f358:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1f35c:	cmp	r3, #0
   1f360:	bne	1f200 <__assert_fail@plt+0xd860>
   1f364:	mov	r0, #0
   1f368:	add	sp, sp, #44	; 0x2c
   1f36c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f370:	mov	r8, lr
   1f374:	mov	lr, r4
   1f378:	add	r5, r8, #1
   1f37c:	mov	r4, lr
   1f380:	b	1f0f0 <__assert_fail@plt+0xd750>
   1f384:	str	r3, [sp, #4]
   1f388:	mov	r0, #4
   1f38c:	mov	r3, #1
   1f390:	str	r3, [sp, #28]
   1f394:	str	r3, [sp, #32]
   1f398:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1f39c:	cmp	r0, #0
   1f3a0:	str	r0, [sp, #36]	; 0x24
   1f3a4:	beq	1f3cc <__assert_fail@plt+0xda2c>
   1f3a8:	ldr	r3, [sp, #4]
   1f3ac:	str	sl, [r0]
   1f3b0:	str	r3, [sp, #24]
   1f3b4:	b	1f318 <__assert_fail@plt+0xd978>
   1f3b8:	ldr	r0, [sp, #36]	; 0x24
   1f3bc:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1f3c0:	ldr	r0, [sp, #24]
   1f3c4:	cmp	r0, #0
   1f3c8:	bne	1f368 <__assert_fail@plt+0xd9c8>
   1f3cc:	mov	r0, #12
   1f3d0:	add	sp, sp, #44	; 0x2c
   1f3d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3d8:	cmp	r0, #0
   1f3dc:	bne	1f368 <__assert_fail@plt+0xd9c8>
   1f3e0:	cmp	r4, #0
   1f3e4:	movne	r0, r4
   1f3e8:	moveq	r0, r5
   1f3ec:	b	1f368 <__assert_fail@plt+0xd9c8>
   1f3f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3f4:	sub	sp, sp, #14400	; 0x3840
   1f3f8:	sub	sp, sp, #28
   1f3fc:	mov	r4, #0
   1f400:	mov	r5, r1
   1f404:	str	r1, [sp, #8]
   1f408:	str	r4, [r1, #44]	; 0x2c
   1f40c:	str	r4, [r1, #48]	; 0x30
   1f410:	mov	r8, r0
   1f414:	mov	r1, r4
   1f418:	add	r0, sp, #88	; 0x58
   1f41c:	mov	r2, #32
   1f420:	bl	11814 <memset@plt>
   1f424:	ldr	r1, [r5, #8]
   1f428:	cmp	r1, r4
   1f42c:	ble	1fd84 <__assert_fail@plt+0xe3e4>
   1f430:	add	r2, sp, #6208	; 0x1840
   1f434:	add	r2, r2, #24
   1f438:	sub	r2, r2, #4
   1f43c:	str	r2, [sp, #32]
   1f440:	str	r8, [sp, #28]
   1f444:	add	r2, r8, #128	; 0x80
   1f448:	mov	r8, r4
   1f44c:	str	r4, [sp, #16]
   1f450:	str	r2, [sp, #36]	; 0x24
   1f454:	ldr	r3, [sp, #8]
   1f458:	ldr	r0, [sp, #16]
   1f45c:	ldr	r2, [r3, #12]
   1f460:	ldr	r3, [sp, #28]
   1f464:	lsl	ip, r0, #2
   1f468:	ldr	r2, [r2, r0, lsl #2]
   1f46c:	ldr	r3, [r3]
   1f470:	str	ip, [sp, #12]
   1f474:	add	r0, r3, r2, lsl #3
   1f478:	str	r0, [sp, #20]
   1f47c:	ldrb	ip, [r0, #4]
   1f480:	ldr	r4, [r0, #4]
   1f484:	ldr	r0, [pc, #2548]	; 1fe80 <__assert_fail@plt+0xe4e0>
   1f488:	cmp	ip, #1
   1f48c:	str	ip, [sp, #4]
   1f490:	and	r4, r0, r4, lsr #8
   1f494:	beq	1f608 <__assert_fail@plt+0xdc68>
   1f498:	ldr	r0, [sp, #4]
   1f49c:	cmp	r0, #3
   1f4a0:	beq	1f8e8 <__assert_fail@plt+0xdf48>
   1f4a4:	ldr	r3, [sp, #4]
   1f4a8:	cmp	r3, #5
   1f4ac:	beq	1f914 <__assert_fail@plt+0xdf74>
   1f4b0:	ldr	r3, [sp, #4]
   1f4b4:	cmp	r3, #7
   1f4b8:	beq	1fbcc <__assert_fail@plt+0xe22c>
   1f4bc:	ldr	r3, [sp, #16]
   1f4c0:	add	r3, r3, #1
   1f4c4:	cmp	r3, r1
   1f4c8:	str	r3, [sp, #16]
   1f4cc:	blt	1f454 <__assert_fail@plt+0xdab4>
   1f4d0:	str	r8, [sp, #4]
   1f4d4:	ldr	r3, [sp, #4]
   1f4d8:	ldr	r8, [sp, #28]
   1f4dc:	cmp	r3, #0
   1f4e0:	ble	1fd80 <__assert_fail@plt+0xe3e0>
   1f4e4:	ldr	r3, [sp, #4]
   1f4e8:	add	r6, sp, #2128	; 0x850
   1f4ec:	add	r3, r3, #1
   1f4f0:	add	r6, r6, #8
   1f4f4:	mov	r4, #0
   1f4f8:	lsl	r0, r3, #2
   1f4fc:	str	r3, [r6, #-2092]	; 0xfffff7d4
   1f500:	str	r4, [r6, #-2088]	; 0xfffff7d8
   1f504:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1f508:	cmp	r0, r4
   1f50c:	str	r0, [r6, #-2084]	; 0xfffff7dc
   1f510:	beq	1fc80 <__assert_fail@plt+0xe2e0>
   1f514:	add	r3, sp, #3152	; 0xc50
   1f518:	add	r3, r3, #8
   1f51c:	mov	r1, r4
   1f520:	add	r0, sp, #56	; 0x38
   1f524:	mov	r2, #32
   1f528:	mov	r5, r3
   1f52c:	str	r4, [sp, #20]
   1f530:	str	r3, [sp, #24]
   1f534:	str	r4, [r6, #-2096]	; 0xfffff7d0
   1f538:	bl	11814 <memset@plt>
   1f53c:	add	r3, sp, #6208	; 0x1840
   1f540:	add	r3, r3, #24
   1f544:	add	sl, sp, #1104	; 0x450
   1f548:	mov	r9, r4
   1f54c:	mov	fp, r4
   1f550:	add	sl, sl, #8
   1f554:	mov	r4, r5
   1f558:	sub	r5, r3, #4
   1f55c:	add	r3, sp, #84	; 0x54
   1f560:	str	r3, [sp, #12]
   1f564:	add	r3, sp, #40	; 0x28
   1f568:	str	r3, [sp, #16]
   1f56c:	ldr	r2, [r4, #4]
   1f570:	str	r9, [r6, #-2088]	; 0xfffff7d8
   1f574:	cmp	r2, #0
   1f578:	movgt	r7, #0
   1f57c:	bgt	1f594 <__assert_fail@plt+0xdbf4>
   1f580:	b	1fa08 <__assert_fail@plt+0xe068>
   1f584:	ldr	r2, [r4, #4]
   1f588:	add	r7, r7, #1
   1f58c:	cmp	r2, r7
   1f590:	ble	1fa08 <__assert_fail@plt+0xe068>
   1f594:	ldr	r1, [r4, #8]
   1f598:	ldr	r3, [r8, #12]
   1f59c:	add	r0, sp, #44	; 0x2c
   1f5a0:	ldr	r1, [r1, r7, lsl #2]
   1f5a4:	ldr	r1, [r3, r1, lsl #2]
   1f5a8:	cmn	r1, #1
   1f5ac:	add	r1, r1, r1, lsl #1
   1f5b0:	beq	1f588 <__assert_fail@plt+0xdbe8>
   1f5b4:	ldr	r3, [r8, #24]
   1f5b8:	add	r1, r3, r1, lsl #2
   1f5bc:	bl	1ebe0 <__assert_fail@plt+0xd240>
   1f5c0:	cmp	r0, #0
   1f5c4:	str	r0, [r6, #-2096]	; 0xfffff7d0
   1f5c8:	beq	1f584 <__assert_fail@plt+0xdbe4>
   1f5cc:	ldr	r0, [r6, #-2084]	; 0xfffff7dc
   1f5d0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1f5d4:	ldr	r5, [sp, #24]
   1f5d8:	ldr	r6, [sp, #4]
   1f5dc:	mov	r4, #0
   1f5e0:	ldr	r0, [r5, #8]
   1f5e4:	add	r4, r4, #1
   1f5e8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1f5ec:	cmp	r4, r6
   1f5f0:	add	r5, r5, #12
   1f5f4:	bne	1f5e0 <__assert_fail@plt+0xdc40>
   1f5f8:	mov	r0, #0
   1f5fc:	add	sp, sp, #14400	; 0x3840
   1f600:	add	sp, sp, #28
   1f604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f608:	ldrb	r3, [r3, r2, lsl #3]
   1f60c:	add	r2, sp, #88	; 0x58
   1f610:	and	r1, r3, #31
   1f614:	asr	r3, r3, #5
   1f618:	ldr	r2, [r2, r3, lsl #2]
   1f61c:	orr	r2, r2, ip, lsl r1
   1f620:	add	r1, sp, #88	; 0x58
   1f624:	str	r2, [r1, r3, lsl #2]
   1f628:	cmp	r4, #0
   1f62c:	beq	1f714 <__assert_fail@plt+0xdd74>
   1f630:	tst	r4, #32
   1f634:	bne	1f97c <__assert_fail@plt+0xdfdc>
   1f638:	tst	r4, #128	; 0x80
   1f63c:	bne	1f9ac <__assert_fail@plt+0xe00c>
   1f640:	tst	r4, #4
   1f644:	beq	1f6ac <__assert_fail@plt+0xdd0c>
   1f648:	ldr	r3, [sp, #4]
   1f64c:	cmp	r3, #1
   1f650:	beq	1fc6c <__assert_fail@plt+0xe2cc>
   1f654:	ldr	r2, [sp, #28]
   1f658:	ldr	r3, [r2, #92]	; 0x5c
   1f65c:	cmp	r3, #1
   1f660:	ble	1fc98 <__assert_fail@plt+0xe2f8>
   1f664:	ldr	lr, [r2, #60]	; 0x3c
   1f668:	ldr	r6, [sp, #36]	; 0x24
   1f66c:	add	r0, sp, #88	; 0x58
   1f670:	sub	lr, lr, #4
   1f674:	add	r1, r2, #96	; 0x60
   1f678:	mov	ip, #0
   1f67c:	ldr	r3, [lr, #4]!
   1f680:	ldr	r5, [r1], #4
   1f684:	ldr	r2, [r0]
   1f688:	mvn	r3, r3
   1f68c:	orr	r3, r3, r5
   1f690:	and	r3, r3, r2
   1f694:	cmp	r6, r1
   1f698:	str	r3, [r0], #4
   1f69c:	orr	ip, ip, r3
   1f6a0:	bne	1f67c <__assert_fail@plt+0xdcdc>
   1f6a4:	cmp	ip, #0
   1f6a8:	beq	1f870 <__assert_fail@plt+0xded0>
   1f6ac:	tst	r4, #8
   1f6b0:	beq	1f714 <__assert_fail@plt+0xdd74>
   1f6b4:	ldr	r3, [sp, #4]
   1f6b8:	cmp	r3, #1
   1f6bc:	beq	1f9c0 <__assert_fail@plt+0xe020>
   1f6c0:	ldr	r2, [sp, #28]
   1f6c4:	ldr	r3, [r2, #92]	; 0x5c
   1f6c8:	cmp	r3, #1
   1f6cc:	ble	1f9d4 <__assert_fail@plt+0xe034>
   1f6d0:	ldr	lr, [r2, #60]	; 0x3c
   1f6d4:	ldr	r5, [sp, #36]	; 0x24
   1f6d8:	add	ip, sp, #88	; 0x58
   1f6dc:	sub	lr, lr, #4
   1f6e0:	add	r0, r2, #96	; 0x60
   1f6e4:	mov	r1, #0
   1f6e8:	ldr	r2, [r0], #4
   1f6ec:	ldr	r4, [lr, #4]!
   1f6f0:	ldr	r3, [ip]
   1f6f4:	and	r2, r2, r4
   1f6f8:	bic	r3, r3, r2
   1f6fc:	cmp	r5, r0
   1f700:	str	r3, [ip], #4
   1f704:	orr	r1, r1, r3
   1f708:	bne	1f6e8 <__assert_fail@plt+0xdd48>
   1f70c:	cmp	r1, #0
   1f710:	beq	1f870 <__assert_fail@plt+0xded0>
   1f714:	cmp	r8, #0
   1f718:	movle	r6, #0
   1f71c:	ble	1f868 <__assert_fail@plt+0xdec8>
   1f720:	add	r3, sp, #3152	; 0xc50
   1f724:	add	r3, r3, #8
   1f728:	ldr	ip, [sp, #32]
   1f72c:	mov	r7, r3
   1f730:	mov	r6, #0
   1f734:	str	r3, [sp, #24]
   1f738:	ldr	r3, [sp, #4]
   1f73c:	cmp	r3, #1
   1f740:	beq	1f87c <__assert_fail@plt+0xdedc>
   1f744:	add	r0, sp, #88	; 0x58
   1f748:	add	r9, sp, #1104	; 0x450
   1f74c:	add	r9, r9, #8
   1f750:	add	r4, ip, #32
   1f754:	mov	r1, ip
   1f758:	mov	r5, r0
   1f75c:	mov	lr, #0
   1f760:	ldr	r2, [r1, #4]!
   1f764:	ldr	r3, [r5], #4
   1f768:	cmp	r1, r4
   1f76c:	and	r3, r3, r2
   1f770:	str	r3, [r9], #4
   1f774:	orr	lr, lr, r3
   1f778:	bne	1f760 <__assert_fail@plt+0xddc0>
   1f77c:	cmp	lr, #0
   1f780:	beq	1f854 <__assert_fail@plt+0xdeb4>
   1f784:	mov	r5, #0
   1f788:	add	fp, sp, #2128	; 0x850
   1f78c:	mov	sl, r5
   1f790:	add	fp, fp, #8
   1f794:	mov	lr, ip
   1f798:	ldr	r3, [r0]
   1f79c:	ldr	r9, [lr, #4]!
   1f7a0:	bic	r2, r9, r3
   1f7a4:	cmp	r1, lr
   1f7a8:	bic	r3, r3, r9
   1f7ac:	str	r2, [fp], #4
   1f7b0:	orr	sl, sl, r2
   1f7b4:	str	r3, [r0], #4
   1f7b8:	orr	r5, r5, r3
   1f7bc:	bne	1f798 <__assert_fail@plt+0xddf8>
   1f7c0:	cmp	sl, #0
   1f7c4:	beq	1f82c <__assert_fail@plt+0xde8c>
   1f7c8:	add	sl, sp, #2128	; 0x850
   1f7cc:	add	sl, sl, #8
   1f7d0:	add	lr, sp, #14400	; 0x3840
   1f7d4:	ldm	sl!, {r0, r1, r2, r3}
   1f7d8:	add	lr, lr, #24
   1f7dc:	add	lr, lr, r8, lsl #5
   1f7e0:	sub	lr, lr, #8192	; 0x2000
   1f7e4:	add	r9, sp, #1104	; 0x450
   1f7e8:	stmia	lr!, {r0, r1, r2, r3}
   1f7ec:	add	r9, r9, #8
   1f7f0:	ldm	sl, {r0, r1, r2, r3}
   1f7f4:	add	ip, ip, #4
   1f7f8:	add	fp, r8, r8, lsl #1
   1f7fc:	stm	lr, {r0, r1, r2, r3}
   1f800:	ldm	r9!, {r0, r1, r2, r3}
   1f804:	stmia	ip!, {r0, r1, r2, r3}
   1f808:	ldm	r9, {r0, r1, r2, r3}
   1f80c:	stm	ip, {r0, r1, r2, r3}
   1f810:	mov	r1, r7
   1f814:	ldr	r3, [sp, #24]
   1f818:	add	r0, r3, fp, lsl #2
   1f81c:	bl	1dfcc <__assert_fail@plt+0xc62c>
   1f820:	cmp	r0, #0
   1f824:	bne	1f8bc <__assert_fail@plt+0xdf1c>
   1f828:	add	r8, r8, #1
   1f82c:	ldr	r3, [sp, #8]
   1f830:	ldr	r2, [sp, #12]
   1f834:	mov	r0, r7
   1f838:	ldr	r3, [r3, #12]
   1f83c:	ldr	r1, [r3, r2]
   1f840:	bl	1d0e4 <__assert_fail@plt+0xb744>
   1f844:	cmp	r0, #0
   1f848:	beq	1f8bc <__assert_fail@plt+0xdf1c>
   1f84c:	cmp	r5, #0
   1f850:	beq	1f868 <__assert_fail@plt+0xdec8>
   1f854:	add	r6, r6, #1
   1f858:	cmp	r6, r8
   1f85c:	mov	ip, r4
   1f860:	add	r7, r7, #12
   1f864:	blt	1f738 <__assert_fail@plt+0xdd98>
   1f868:	cmp	r8, r6
   1f86c:	beq	1fcdc <__assert_fail@plt+0xe33c>
   1f870:	ldr	r3, [sp, #8]
   1f874:	ldr	r1, [r3, #8]
   1f878:	b	1f4bc <__assert_fail@plt+0xdb1c>
   1f87c:	ldr	r3, [sp, #20]
   1f880:	ldrb	r1, [r3]
   1f884:	lsl	r3, r6, #5
   1f888:	and	r2, r1, #31
   1f88c:	asr	r1, r1, #5
   1f890:	add	r3, r3, r1, lsl #2
   1f894:	add	r1, sp, #14400	; 0x3840
   1f898:	add	r1, r1, #24
   1f89c:	add	r3, r1, r3
   1f8a0:	sub	r3, r3, #8192	; 0x2000
   1f8a4:	ldr	r3, [r3]
   1f8a8:	lsr	r2, r3, r2
   1f8ac:	tst	r2, #1
   1f8b0:	addeq	r4, ip, #32
   1f8b4:	beq	1f854 <__assert_fail@plt+0xdeb4>
   1f8b8:	b	1f744 <__assert_fail@plt+0xdda4>
   1f8bc:	str	r8, [sp, #4]
   1f8c0:	ldr	r5, [sp, #24]
   1f8c4:	ldr	r6, [sp, #4]
   1f8c8:	mov	r4, #0
   1f8cc:	ldr	r0, [r5, #8]
   1f8d0:	add	r4, r4, #1
   1f8d4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1f8d8:	cmp	r4, r6
   1f8dc:	add	r5, r5, #12
   1f8e0:	bne	1f8cc <__assert_fail@plt+0xdf2c>
   1f8e4:	b	1f5f8 <__assert_fail@plt+0xdc58>
   1f8e8:	ldr	r0, [r3, r2, lsl #3]
   1f8ec:	add	r1, sp, #88	; 0x58
   1f8f0:	sub	r2, r0, #4
   1f8f4:	add	r0, r0, #28
   1f8f8:	ldr	r3, [r1]
   1f8fc:	ldr	ip, [r2, #4]!
   1f900:	orr	r3, r3, ip
   1f904:	cmp	r2, r0
   1f908:	str	r3, [r1], #4
   1f90c:	bne	1f8f8 <__assert_fail@plt+0xdf58>
   1f910:	b	1f628 <__assert_fail@plt+0xdc88>
   1f914:	ldr	r2, [sp, #28]
   1f918:	ldr	r3, [r2, #92]	; 0x5c
   1f91c:	cmp	r3, #1
   1f920:	ble	1fd6c <__assert_fail@plt+0xe3cc>
   1f924:	ldr	r0, [r2, #60]	; 0x3c
   1f928:	add	r1, sp, #88	; 0x58
   1f92c:	sub	r2, r0, #4
   1f930:	add	r0, r0, #28
   1f934:	ldr	r3, [r1]
   1f938:	ldr	ip, [r2, #4]!
   1f93c:	orr	r3, r3, ip
   1f940:	cmp	r2, r0
   1f944:	str	r3, [r1], #4
   1f948:	bne	1f934 <__assert_fail@plt+0xdf94>
   1f94c:	ldr	r3, [sp, #28]
   1f950:	ldr	r3, [r3, #128]	; 0x80
   1f954:	tst	r3, #64	; 0x40
   1f958:	ldreq	r2, [sp, #88]	; 0x58
   1f95c:	biceq	r2, r2, #1024	; 0x400
   1f960:	streq	r2, [sp, #88]	; 0x58
   1f964:	tst	r3, #128	; 0x80
   1f968:	beq	1f628 <__assert_fail@plt+0xdc88>
   1f96c:	ldr	r3, [sp, #88]	; 0x58
   1f970:	bic	r3, r3, #1
   1f974:	str	r3, [sp, #88]	; 0x58
   1f978:	b	1f628 <__assert_fail@plt+0xdc88>
   1f97c:	ldr	r5, [sp, #88]	; 0x58
   1f980:	mov	r2, #32
   1f984:	mov	r1, #0
   1f988:	and	r5, r5, #1024	; 0x400
   1f98c:	add	r0, sp, #88	; 0x58
   1f990:	bl	11814 <memset@plt>
   1f994:	cmp	r5, #0
   1f998:	beq	1f870 <__assert_fail@plt+0xded0>
   1f99c:	mov	r3, #1024	; 0x400
   1f9a0:	tst	r4, #128	; 0x80
   1f9a4:	str	r3, [sp, #88]	; 0x58
   1f9a8:	beq	1f640 <__assert_fail@plt+0xdca0>
   1f9ac:	mov	r2, #32
   1f9b0:	mov	r1, #0
   1f9b4:	add	r0, sp, #88	; 0x58
   1f9b8:	bl	11814 <memset@plt>
   1f9bc:	b	1f870 <__assert_fail@plt+0xded0>
   1f9c0:	ldr	r3, [sp, #20]
   1f9c4:	ldrb	r3, [r3, #6]
   1f9c8:	tst	r3, #64	; 0x40
   1f9cc:	beq	1f6c0 <__assert_fail@plt+0xdd20>
   1f9d0:	b	1f9ac <__assert_fail@plt+0xe00c>
   1f9d4:	ldr	r3, [sp, #28]
   1f9d8:	ldr	lr, [sp, #36]	; 0x24
   1f9dc:	add	ip, sp, #88	; 0x58
   1f9e0:	add	r0, r3, #96	; 0x60
   1f9e4:	mov	r1, #0
   1f9e8:	ldr	r2, [r0], #4
   1f9ec:	ldr	r3, [ip]
   1f9f0:	cmp	lr, r0
   1f9f4:	bic	r3, r3, r2
   1f9f8:	str	r3, [ip], #4
   1f9fc:	orr	r1, r1, r3
   1fa00:	bne	1f9e8 <__assert_fail@plt+0xe048>
   1fa04:	b	1f70c <__assert_fail@plt+0xdd6c>
   1fa08:	mov	r3, r9
   1fa0c:	add	r2, sp, #44	; 0x2c
   1fa10:	mov	r1, r8
   1fa14:	ldr	r0, [sp, #16]
   1fa18:	bl	1e190 <__assert_fail@plt+0xc7f0>
   1fa1c:	ldr	r3, [sp, #12]
   1fa20:	cmp	r0, #0
   1fa24:	str	r0, [r3, #4]!
   1fa28:	mov	r7, r0
   1fa2c:	str	r3, [sp, #12]
   1fa30:	beq	1fccc <__assert_fail@plt+0xe32c>
   1fa34:	ldrsb	r3, [r7, #52]	; 0x34
   1fa38:	cmp	r3, #0
   1fa3c:	strge	r7, [sl]
   1fa40:	strge	r7, [r6, fp, lsl #2]
   1fa44:	blt	1fc00 <__assert_fail@plt+0xe260>
   1fa48:	add	r7, sp, #56	; 0x38
   1fa4c:	add	r0, r5, #32
   1fa50:	mov	r1, r7
   1fa54:	ldr	r3, [r1]
   1fa58:	ldr	r2, [r5, #4]!
   1fa5c:	orr	r3, r3, r2
   1fa60:	cmp	r0, r5
   1fa64:	str	r3, [r1], #4
   1fa68:	bne	1fa54 <__assert_fail@plt+0xe0b4>
   1fa6c:	ldr	r3, [sp, #4]
   1fa70:	add	fp, fp, #1
   1fa74:	cmp	fp, r3
   1fa78:	add	r4, r4, #12
   1fa7c:	add	sl, sl, #4
   1fa80:	mov	r5, r0
   1fa84:	bne	1f56c <__assert_fail@plt+0xdbcc>
   1fa88:	ldr	r3, [sp, #20]
   1fa8c:	cmp	r3, #0
   1fa90:	bne	1fdd4 <__assert_fail@plt+0xe434>
   1fa94:	mov	r1, #256	; 0x100
   1fa98:	mov	r0, #4
   1fa9c:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   1faa0:	ldr	r3, [sp, #8]
   1faa4:	cmp	r0, #0
   1faa8:	str	r0, [r3, #44]	; 0x2c
   1faac:	beq	1f5cc <__assert_fail@plt+0xdc2c>
   1fab0:	add	ip, sp, #6208	; 0x1840
   1fab4:	add	r9, r8, #96	; 0x60
   1fab8:	mov	r5, r0
   1fabc:	add	ip, ip, #24
   1fac0:	add	sl, r0, #1024	; 0x400
   1fac4:	ldr	r1, [r7], #4
   1fac8:	cmp	r1, #0
   1facc:	movne	lr, r5
   1fad0:	movne	r2, #1
   1fad4:	bne	1faec <__assert_fail@plt+0xe14c>
   1fad8:	b	1fb38 <__assert_fail@plt+0xe198>
   1fadc:	lsrs	r1, r1, #1
   1fae0:	lsl	r2, r2, #1
   1fae4:	add	lr, lr, #4
   1fae8:	beq	1fb38 <__assert_fail@plt+0xe198>
   1faec:	tst	r1, #1
   1faf0:	beq	1fadc <__assert_fail@plt+0xe13c>
   1faf4:	ldr	r3, [ip]
   1faf8:	ands	r3, r2, r3
   1fafc:	bne	1fdcc <__assert_fail@plt+0xe42c>
   1fb00:	add	r3, r3, #1
   1fb04:	ldr	r4, [ip, r3, lsl #5]
   1fb08:	tst	r2, r4
   1fb0c:	beq	1fb00 <__assert_fail@plt+0xe160>
   1fb10:	ldr	r4, [r9]
   1fb14:	add	r3, r6, r3, lsl #2
   1fb18:	tst	r2, r4
   1fb1c:	add	lr, lr, #4
   1fb20:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   1fb24:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   1fb28:	lsrs	r1, r1, #1
   1fb2c:	str	r3, [lr, #-4]
   1fb30:	lsl	r2, r2, #1
   1fb34:	bne	1faec <__assert_fail@plt+0xe14c>
   1fb38:	add	r5, r5, #128	; 0x80
   1fb3c:	cmp	sl, r5
   1fb40:	add	r9, r9, #4
   1fb44:	add	ip, ip, #4
   1fb48:	bne	1fac4 <__assert_fail@plt+0xe124>
   1fb4c:	ldr	r3, [r6, #-2080]	; 0xfffff7e0
   1fb50:	tst	r3, #1024	; 0x400
   1fb54:	beq	1fb94 <__assert_fail@plt+0xe1f4>
   1fb58:	mov	r3, #0
   1fb5c:	b	1fb6c <__assert_fail@plt+0xe1cc>
   1fb60:	add	r3, r3, #1
   1fb64:	cmp	fp, r3
   1fb68:	beq	1fb94 <__assert_fail@plt+0xe1f4>
   1fb6c:	add	r2, sp, #6208	; 0x1840
   1fb70:	add	r2, r2, #24
   1fb74:	ldr	r2, [r2, r3, lsl #5]
   1fb78:	tst	r2, #1024	; 0x400
   1fb7c:	beq	1fb60 <__assert_fail@plt+0xe1c0>
   1fb80:	ldr	r2, [sp, #20]
   1fb84:	ldr	r3, [r6, r3, lsl #2]
   1fb88:	cmp	r2, #0
   1fb8c:	str	r3, [r0, #40]	; 0x28
   1fb90:	strne	r3, [r0, #1064]	; 0x428
   1fb94:	ldr	r0, [r6, #-2084]	; 0xfffff7dc
   1fb98:	add	r8, fp, fp, lsl #1
   1fb9c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1fba0:	ldr	r5, [sp, #24]
   1fba4:	mov	r4, #0
   1fba8:	lsl	r8, r8, #2
   1fbac:	add	r3, r5, r4
   1fbb0:	add	r4, r4, #12
   1fbb4:	ldr	r0, [r3, #8]
   1fbb8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   1fbbc:	cmp	r8, r4
   1fbc0:	bne	1fbac <__assert_fail@plt+0xe20c>
   1fbc4:	mov	r0, #1
   1fbc8:	b	1f5fc <__assert_fail@plt+0xdc5c>
   1fbcc:	ldr	r3, [sp, #28]
   1fbd0:	ldr	r2, [r3, #128]	; 0x80
   1fbd4:	mvn	r3, #0
   1fbd8:	tst	r2, #64	; 0x40
   1fbdc:	str	r3, [sp, #88]	; 0x58
   1fbe0:	str	r3, [sp, #92]	; 0x5c
   1fbe4:	str	r3, [sp, #96]	; 0x60
   1fbe8:	str	r3, [sp, #100]	; 0x64
   1fbec:	biceq	r3, r3, #1024	; 0x400
   1fbf0:	streq	r3, [sp, #88]	; 0x58
   1fbf4:	tst	r2, #128	; 0x80
   1fbf8:	beq	1f628 <__assert_fail@plt+0xdc88>
   1fbfc:	b	1f96c <__assert_fail@plt+0xdfcc>
   1fc00:	mov	r3, #1
   1fc04:	add	r2, sp, #44	; 0x2c
   1fc08:	mov	r1, r8
   1fc0c:	ldr	r0, [sp, #16]
   1fc10:	bl	1e190 <__assert_fail@plt+0xc7f0>
   1fc14:	cmp	r0, #0
   1fc18:	str	r0, [sl]
   1fc1c:	beq	1fdbc <__assert_fail@plt+0xe41c>
   1fc20:	cmp	r7, r0
   1fc24:	beq	1fc3c <__assert_fail@plt+0xe29c>
   1fc28:	ldr	r3, [r8, #92]	; 0x5c
   1fc2c:	ldr	r2, [sp, #20]
   1fc30:	cmp	r3, #1
   1fc34:	movgt	r2, #1
   1fc38:	str	r2, [sp, #20]
   1fc3c:	mov	r3, #2
   1fc40:	add	r2, sp, #44	; 0x2c
   1fc44:	mov	r1, r8
   1fc48:	ldr	r0, [sp, #16]
   1fc4c:	bl	1e190 <__assert_fail@plt+0xc7f0>
   1fc50:	cmp	r0, #0
   1fc54:	str	r0, [r6, fp, lsl #2]
   1fc58:	bne	1fa48 <__assert_fail@plt+0xe0a8>
   1fc5c:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   1fc60:	cmp	r3, #0
   1fc64:	beq	1fa48 <__assert_fail@plt+0xe0a8>
   1fc68:	b	1f5cc <__assert_fail@plt+0xdc2c>
   1fc6c:	ldr	r3, [sp, #20]
   1fc70:	ldrb	r3, [r3, #6]
   1fc74:	tst	r3, #64	; 0x40
   1fc78:	bne	1f654 <__assert_fail@plt+0xdcb4>
   1fc7c:	b	1f9ac <__assert_fail@plt+0xe00c>
   1fc80:	mov	r3, #12
   1fc84:	str	r3, [r6, #-2096]	; 0xfffff7d0
   1fc88:	add	r3, sp, #3152	; 0xc50
   1fc8c:	add	r3, r3, #8
   1fc90:	str	r3, [sp, #24]
   1fc94:	b	1f5d0 <__assert_fail@plt+0xdc30>
   1fc98:	ldr	r3, [sp, #28]
   1fc9c:	ldr	lr, [sp, #36]	; 0x24
   1fca0:	add	r1, sp, #88	; 0x58
   1fca4:	add	r2, r3, #96	; 0x60
   1fca8:	mov	ip, #0
   1fcac:	ldr	r3, [r2], #4
   1fcb0:	ldr	r0, [r1]
   1fcb4:	cmp	r2, lr
   1fcb8:	and	r3, r3, r0
   1fcbc:	str	r3, [r1], #4
   1fcc0:	orr	ip, ip, r3
   1fcc4:	bne	1fcac <__assert_fail@plt+0xe30c>
   1fcc8:	b	1f6a4 <__assert_fail@plt+0xdd04>
   1fccc:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   1fcd0:	cmp	r3, #0
   1fcd4:	beq	1fa34 <__assert_fail@plt+0xe094>
   1fcd8:	b	1f5cc <__assert_fail@plt+0xdc2c>
   1fcdc:	add	r4, sp, #88	; 0x58
   1fce0:	add	ip, sp, #14400	; 0x3840
   1fce4:	ldm	r4!, {r0, r1, r2, r3}
   1fce8:	add	ip, ip, #24
   1fcec:	add	ip, ip, r8, lsl #5
   1fcf0:	sub	ip, ip, #8192	; 0x2000
   1fcf4:	ldr	r5, [sp, #8]
   1fcf8:	stmia	ip!, {r0, r1, r2, r3}
   1fcfc:	add	r3, sp, #3152	; 0xc50
   1fd00:	add	r3, r3, #8
   1fd04:	mov	r6, r3
   1fd08:	str	r3, [sp, #24]
   1fd0c:	ldm	r4, {r0, r1, r2, r3}
   1fd10:	add	lr, r8, r8, lsl #1
   1fd14:	ldr	r5, [r5, #12]
   1fd18:	add	r4, r6, lr, lsl #2
   1fd1c:	stm	ip, {r0, r1, r2, r3}
   1fd20:	mov	r3, #1
   1fd24:	ldr	r2, [sp, #12]
   1fd28:	mov	r0, #4
   1fd2c:	ldr	r5, [r5, r2]
   1fd30:	str	r3, [r6, lr, lsl #2]
   1fd34:	str	r3, [r4, #4]
   1fd38:	bl	1ba3c <__assert_fail@plt+0xa09c>
   1fd3c:	cmp	r0, #0
   1fd40:	str	r0, [r4, #8]
   1fd44:	beq	1fda4 <__assert_fail@plt+0xe404>
   1fd48:	mov	r1, #0
   1fd4c:	str	r5, [r0]
   1fd50:	mov	r2, #32
   1fd54:	add	r0, sp, #88	; 0x58
   1fd58:	bl	11814 <memset@plt>
   1fd5c:	ldr	r3, [sp, #8]
   1fd60:	add	r8, r8, #1
   1fd64:	ldr	r1, [r3, #8]
   1fd68:	b	1f4bc <__assert_fail@plt+0xdb1c>
   1fd6c:	mov	r2, #32
   1fd70:	mvn	r1, #0
   1fd74:	add	r0, sp, #88	; 0x58
   1fd78:	bl	11814 <memset@plt>
   1fd7c:	b	1f94c <__assert_fail@plt+0xdfac>
   1fd80:	bne	1f5f8 <__assert_fail@plt+0xdc58>
   1fd84:	mov	r1, #256	; 0x100
   1fd88:	mov	r0, #4
   1fd8c:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   1fd90:	ldr	r3, [sp, #8]
   1fd94:	str	r0, [r3, #44]	; 0x2c
   1fd98:	adds	r0, r0, #0
   1fd9c:	movne	r0, #1
   1fda0:	b	1f5fc <__assert_fail@plt+0xdc5c>
   1fda4:	cmp	r8, #0
   1fda8:	str	r8, [sp, #4]
   1fdac:	str	r0, [r4, #4]
   1fdb0:	str	r0, [r4]
   1fdb4:	beq	1f5f8 <__assert_fail@plt+0xdc58>
   1fdb8:	b	1f8c0 <__assert_fail@plt+0xdf20>
   1fdbc:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   1fdc0:	cmp	r3, #0
   1fdc4:	beq	1fc28 <__assert_fail@plt+0xe288>
   1fdc8:	b	1f5cc <__assert_fail@plt+0xdc2c>
   1fdcc:	mov	r3, #0
   1fdd0:	b	1fb10 <__assert_fail@plt+0xe170>
   1fdd4:	mov	r1, #512	; 0x200
   1fdd8:	mov	r0, #4
   1fddc:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   1fde0:	ldr	r3, [sp, #8]
   1fde4:	cmp	r0, #0
   1fde8:	str	r0, [r3, #48]	; 0x30
   1fdec:	beq	1f5cc <__assert_fail@plt+0xdc2c>
   1fdf0:	add	r1, sp, #6208	; 0x1840
   1fdf4:	mov	lr, r0
   1fdf8:	add	r1, r1, #24
   1fdfc:	add	r5, r0, #1024	; 0x400
   1fe00:	ldr	ip, [r7], #4
   1fe04:	cmp	ip, #0
   1fe08:	movne	r4, lr
   1fe0c:	movne	r2, #1
   1fe10:	bne	1fe28 <__assert_fail@plt+0xe488>
   1fe14:	b	1fe64 <__assert_fail@plt+0xe4c4>
   1fe18:	lsrs	ip, ip, #1
   1fe1c:	lsl	r2, r2, #1
   1fe20:	add	r4, r4, #4
   1fe24:	beq	1fe64 <__assert_fail@plt+0xe4c4>
   1fe28:	tst	ip, #1
   1fe2c:	beq	1fe18 <__assert_fail@plt+0xe478>
   1fe30:	ldr	r3, [r1]
   1fe34:	ands	r3, r2, r3
   1fe38:	bne	1fe78 <__assert_fail@plt+0xe4d8>
   1fe3c:	add	r3, r3, #1
   1fe40:	ldr	r8, [r1, r3, lsl #5]
   1fe44:	tst	r2, r8
   1fe48:	beq	1fe3c <__assert_fail@plt+0xe49c>
   1fe4c:	add	r3, r6, r3, lsl #2
   1fe50:	ldr	r8, [r3, #-2048]	; 0xfffff800
   1fe54:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   1fe58:	str	r8, [r4]
   1fe5c:	str	r3, [r4, #1024]	; 0x400
   1fe60:	b	1fe18 <__assert_fail@plt+0xe478>
   1fe64:	add	lr, lr, #128	; 0x80
   1fe68:	cmp	r5, lr
   1fe6c:	add	r1, r1, #4
   1fe70:	bne	1fe00 <__assert_fail@plt+0xe460>
   1fe74:	b	1fb4c <__assert_fail@plt+0xe1ac>
   1fe78:	mov	r3, #0
   1fe7c:	b	1fe4c <__assert_fail@plt+0xe4ac>
   1fe80:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1fe84:	cmp	r1, #0
   1fe88:	push	{r4, r5, r6, lr}
   1fe8c:	mov	r5, r0
   1fe90:	blt	1feec <__assert_fail@plt+0xe54c>
   1fe94:	ldr	r3, [r0, #48]	; 0x30
   1fe98:	cmp	r1, r3
   1fe9c:	beq	1ff60 <__assert_fail@plt+0xe5c0>
   1fea0:	ldr	r3, [r0, #80]	; 0x50
   1fea4:	cmp	r3, #1
   1fea8:	ble	1fef4 <__assert_fail@plt+0xe554>
   1feac:	ldr	r3, [r0, #8]
   1feb0:	add	r3, r3, r1, lsl #2
   1feb4:	b	1fec0 <__assert_fail@plt+0xe520>
   1feb8:	cmn	r1, #1
   1febc:	beq	1feec <__assert_fail@plt+0xe54c>
   1fec0:	ldr	r4, [r3], #-4
   1fec4:	sub	r1, r1, #1
   1fec8:	cmn	r4, #1
   1fecc:	beq	1feb8 <__assert_fail@plt+0xe518>
   1fed0:	ldrb	r3, [r5, #78]	; 0x4e
   1fed4:	cmp	r3, #0
   1fed8:	bne	1ff34 <__assert_fail@plt+0xe594>
   1fedc:	cmp	r4, #10
   1fee0:	beq	1ff20 <__assert_fail@plt+0xe580>
   1fee4:	mov	r0, #0
   1fee8:	pop	{r4, r5, r6, pc}
   1feec:	ldr	r0, [r5, #60]	; 0x3c
   1fef0:	pop	{r4, r5, r6, pc}
   1fef4:	ldr	r3, [r0, #4]
   1fef8:	ldr	r0, [r0, #68]	; 0x44
   1fefc:	ldrb	r3, [r3, r1]
   1ff00:	and	r2, r3, #31
   1ff04:	asr	r1, r3, #5
   1ff08:	ldr	r0, [r0, r1, lsl #2]
   1ff0c:	lsr	r0, r0, r2
   1ff10:	ands	r0, r0, #1
   1ff14:	bne	1ff58 <__assert_fail@plt+0xe5b8>
   1ff18:	cmp	r3, #10
   1ff1c:	popne	{r4, r5, r6, pc}
   1ff20:	ldrb	r0, [r5, #77]	; 0x4d
   1ff24:	cmp	r0, #0
   1ff28:	movne	r0, #2
   1ff2c:	moveq	r0, #0
   1ff30:	pop	{r4, r5, r6, pc}
   1ff34:	mov	r0, r4
   1ff38:	bl	117e4 <iswalnum@plt>
   1ff3c:	sub	r3, r4, #95	; 0x5f
   1ff40:	clz	r3, r3
   1ff44:	lsr	r3, r3, #5
   1ff48:	cmp	r0, #0
   1ff4c:	orrne	r3, r3, #1
   1ff50:	cmp	r3, #0
   1ff54:	beq	1fedc <__assert_fail@plt+0xe53c>
   1ff58:	mov	r0, #1
   1ff5c:	pop	{r4, r5, r6, pc}
   1ff60:	tst	r2, #2
   1ff64:	moveq	r0, #10
   1ff68:	movne	r0, #8
   1ff6c:	pop	{r4, r5, r6, pc}
   1ff70:	ldrb	ip, [r1, #4]
   1ff74:	ldr	r3, [r0, #4]
   1ff78:	push	{r4, lr}
   1ff7c:	sub	ip, ip, #1
   1ff80:	ldrb	r3, [r3, r2]
   1ff84:	cmp	ip, #6
   1ff88:	ldrls	pc, [pc, ip, lsl #2]
   1ff8c:	b	1ffb8 <__assert_fail@plt+0xe618>
   1ff90:	andeq	pc, r1, ip, lsr #31
   1ff94:			; <UNDEFINED> instruction: 0x0001ffb8
   1ff98:	andeq	r0, r2, ip, asr #32
   1ff9c:			; <UNDEFINED> instruction: 0x0001ffb8
   1ffa0:	andeq	pc, r1, r8, asr #31
   1ffa4:			; <UNDEFINED> instruction: 0x0001ffb8
   1ffa8:	andeq	pc, r1, r0, asr #31
   1ffac:	ldrb	ip, [r1]
   1ffb0:	cmp	ip, r3
   1ffb4:	beq	1ffe8 <__assert_fail@plt+0xe648>
   1ffb8:	mov	r0, #0
   1ffbc:	pop	{r4, pc}
   1ffc0:	tst	r3, #128	; 0x80
   1ffc4:	bne	1ffb8 <__assert_fail@plt+0xe618>
   1ffc8:	cmp	r3, #10
   1ffcc:	beq	20088 <__assert_fail@plt+0xe6e8>
   1ffd0:	cmp	r3, #0
   1ffd4:	bne	1ffe8 <__assert_fail@plt+0xe648>
   1ffd8:	ldr	ip, [r0, #84]	; 0x54
   1ffdc:	ldr	ip, [ip, #128]	; 0x80
   1ffe0:	tst	ip, #128	; 0x80
   1ffe4:	bne	1ffb8 <__assert_fail@plt+0xe618>
   1ffe8:	ldr	r4, [r1, #4]
   1ffec:	ldr	r3, [pc, #168]	; 2009c <__assert_fail@plt+0xe6fc>
   1fff0:	and	r3, r3, r4
   1fff4:	cmp	r3, #0
   1fff8:	beq	2006c <__assert_fail@plt+0xe6cc>
   1fffc:	mov	r1, r2
   20000:	ldr	r2, [r0, #88]	; 0x58
   20004:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   20008:	ldr	r1, [pc, #144]	; 200a0 <__assert_fail@plt+0xe700>
   2000c:	and	r1, r1, r4, lsr #8
   20010:	ands	r2, r1, #4
   20014:	bne	20074 <__assert_fail@plt+0xe6d4>
   20018:	tst	r1, #8
   2001c:	beq	20028 <__assert_fail@plt+0xe688>
   20020:	tst	r0, #1
   20024:	bne	1ffb8 <__assert_fail@plt+0xe618>
   20028:	tst	r1, #32
   2002c:	beq	20038 <__assert_fail@plt+0xe698>
   20030:	ands	r3, r0, #2
   20034:	beq	1ffb8 <__assert_fail@plt+0xe618>
   20038:	tst	r1, #128	; 0x80
   2003c:	beq	2006c <__assert_fail@plt+0xe6cc>
   20040:	lsr	r0, r0, #3
   20044:	and	r0, r0, #1
   20048:	pop	{r4, pc}
   2004c:	ldr	ip, [r1]
   20050:	asr	lr, r3, #5
   20054:	and	r3, r3, #31
   20058:	ldr	ip, [ip, lr, lsl #2]
   2005c:	lsr	r3, ip, r3
   20060:	ands	r3, r3, #1
   20064:	bne	1ffe8 <__assert_fail@plt+0xe648>
   20068:	b	1ffb8 <__assert_fail@plt+0xe618>
   2006c:	mov	r0, #1
   20070:	pop	{r4, pc}
   20074:	ands	r3, r0, #1
   20078:	beq	1ffb8 <__assert_fail@plt+0xe618>
   2007c:	tst	r1, #8
   20080:	bne	1ffb8 <__assert_fail@plt+0xe618>
   20084:	b	20028 <__assert_fail@plt+0xe688>
   20088:	ldr	r3, [r0, #84]	; 0x54
   2008c:	ldr	r3, [r3, #128]	; 0x80
   20090:	ands	r3, r3, #64	; 0x40
   20094:	bne	1ffe8 <__assert_fail@plt+0xe648>
   20098:	b	1ffb8 <__assert_fail@plt+0xe618>
   2009c:	andeq	pc, r3, r0, lsl #30
   200a0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   200a4:	push	{r4, r5, r6, r7, r8, lr}
   200a8:	mov	r4, r1
   200ac:	mov	r1, r2
   200b0:	ldr	r2, [r0, #88]	; 0x58
   200b4:	mov	r5, r0
   200b8:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   200bc:	ldr	lr, [r4, #8]
   200c0:	cmp	lr, #0
   200c4:	ble	20164 <__assert_fail@plt+0xe7c4>
   200c8:	ldr	r3, [r5, #84]	; 0x54
   200cc:	ldr	r1, [r4, #12]
   200d0:	ldr	r5, [pc, #168]	; 20180 <__assert_fail@plt+0xe7e0>
   200d4:	ldr	r4, [r3]
   200d8:	sub	r1, r1, #4
   200dc:	mov	r2, #0
   200e0:	and	r8, r0, #8
   200e4:	and	r7, r0, #2
   200e8:	and	r6, r0, #1
   200ec:	b	200fc <__assert_fail@plt+0xe75c>
   200f0:	add	r2, r2, #1
   200f4:	cmp	r2, lr
   200f8:	beq	20164 <__assert_fail@plt+0xe7c4>
   200fc:	ldr	r0, [r1, #4]!
   20100:	add	r3, r4, r0, lsl #3
   20104:	ldrb	ip, [r3, #4]
   20108:	ldr	r3, [r3, #4]
   2010c:	cmp	ip, #2
   20110:	and	r3, r5, r3, lsr #8
   20114:	bne	200f0 <__assert_fail@plt+0xe750>
   20118:	cmp	r3, #0
   2011c:	popeq	{r4, r5, r6, r7, r8, pc}
   20120:	tst	r3, #4
   20124:	beq	2016c <__assert_fail@plt+0xe7cc>
   20128:	cmp	r6, #0
   2012c:	beq	200f0 <__assert_fail@plt+0xe750>
   20130:	tst	r3, #8
   20134:	bne	200f0 <__assert_fail@plt+0xe750>
   20138:	tst	r3, #32
   2013c:	beq	20148 <__assert_fail@plt+0xe7a8>
   20140:	cmp	r7, #0
   20144:	beq	200f0 <__assert_fail@plt+0xe750>
   20148:	tst	r3, #128	; 0x80
   2014c:	popeq	{r4, r5, r6, r7, r8, pc}
   20150:	cmp	r8, #0
   20154:	popne	{r4, r5, r6, r7, r8, pc}
   20158:	add	r2, r2, #1
   2015c:	cmp	r2, lr
   20160:	bne	200fc <__assert_fail@plt+0xe75c>
   20164:	mov	r0, #0
   20168:	pop	{r4, r5, r6, r7, r8, pc}
   2016c:	tst	r3, #8
   20170:	beq	20138 <__assert_fail@plt+0xe798>
   20174:	cmp	r6, #0
   20178:	beq	20138 <__assert_fail@plt+0xe798>
   2017c:	b	200f0 <__assert_fail@plt+0xe750>
   20180:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   20184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20188:	mov	r4, r0
   2018c:	ldr	r5, [r0, #24]
   20190:	sub	sp, sp, #36	; 0x24
   20194:	cmp	r5, r1
   20198:	mov	r6, r1
   2019c:	mov	r7, r2
   201a0:	suble	r5, r1, r5
   201a4:	ble	20208 <__assert_fail@plt+0xe868>
   201a8:	ldr	r3, [r0, #80]	; 0x50
   201ac:	ldr	r1, [r0, #44]	; 0x2c
   201b0:	cmp	r3, #1
   201b4:	ldrb	r3, [r0, #75]	; 0x4b
   201b8:	movgt	r2, #0
   201bc:	strgt	r2, [r0, #16]
   201c0:	strgt	r2, [r0, #20]
   201c4:	tst	r7, #1
   201c8:	ldr	r2, [r0, #52]	; 0x34
   201cc:	moveq	r0, #6
   201d0:	movne	r0, #4
   201d4:	cmp	r3, #0
   201d8:	mov	r3, #0
   201dc:	str	r3, [r4, #28]
   201e0:	str	r3, [r4, #24]
   201e4:	str	r3, [r4, #32]
   201e8:	strb	r3, [r4, #76]	; 0x4c
   201ec:	moveq	r5, r6
   201f0:	ldreq	r3, [r4]
   201f4:	movne	r5, r6
   201f8:	str	r0, [r4, #60]	; 0x3c
   201fc:	str	r1, [r4, #48]	; 0x30
   20200:	str	r2, [r4, #56]	; 0x38
   20204:	streq	r3, [r4, #4]
   20208:	cmp	r5, #0
   2020c:	ldreq	r3, [r4, #80]	; 0x50
   20210:	beq	202a0 <__assert_fail@plt+0xe900>
   20214:	ldr	r2, [r4, #32]
   20218:	ldrb	r3, [r4, #76]	; 0x4c
   2021c:	cmp	r5, r2
   20220:	bge	20370 <__assert_fail@plt+0xe9d0>
   20224:	cmp	r3, #0
   20228:	bne	20434 <__assert_fail@plt+0xea94>
   2022c:	mov	r2, r7
   20230:	sub	r1, r5, #1
   20234:	mov	r0, r4
   20238:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   2023c:	ldr	r3, [r4, #80]	; 0x50
   20240:	cmp	r3, #1
   20244:	str	r0, [r4, #60]	; 0x3c
   20248:	ble	20264 <__assert_fail@plt+0xe8c4>
   2024c:	ldr	r2, [r4, #28]
   20250:	ldr	r0, [r4, #8]
   20254:	sub	r2, r2, r5
   20258:	add	r1, r0, r5, lsl #2
   2025c:	lsl	r2, r2, #2
   20260:	bl	1158c <memmove@plt>
   20264:	ldrb	r3, [r4, #75]	; 0x4b
   20268:	cmp	r3, #0
   2026c:	bne	20574 <__assert_fail@plt+0xebd4>
   20270:	ldr	r0, [r4, #28]
   20274:	ldr	r1, [r4, #32]
   20278:	mov	r2, r3
   2027c:	ldr	r3, [r4, #80]	; 0x50
   20280:	sub	r0, r0, r5
   20284:	sub	r1, r1, r5
   20288:	str	r0, [r4, #28]
   2028c:	str	r1, [r4, #32]
   20290:	cmp	r2, #0
   20294:	ldreq	r2, [r4, #4]
   20298:	addeq	r2, r2, r5
   2029c:	streq	r2, [r4, #4]
   202a0:	ldr	r2, [r4, #48]	; 0x30
   202a4:	ldr	r1, [r4, #56]	; 0x38
   202a8:	cmp	r3, #1
   202ac:	sub	r3, r2, r5
   202b0:	sub	r5, r1, r5
   202b4:	str	r6, [r4, #24]
   202b8:	str	r3, [r4, #48]	; 0x30
   202bc:	str	r5, [r4, #56]	; 0x38
   202c0:	ble	202f8 <__assert_fail@plt+0xe958>
   202c4:	ldrb	r3, [r4, #72]	; 0x48
   202c8:	mov	r0, r4
   202cc:	cmp	r3, #0
   202d0:	bne	202e8 <__assert_fail@plt+0xe948>
   202d4:	bl	1c280 <__assert_fail@plt+0xa8e0>
   202d8:	mov	r0, #0
   202dc:	str	r0, [r4, #40]	; 0x28
   202e0:	add	sp, sp, #36	; 0x24
   202e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202e8:	bl	1c418 <__assert_fail@plt+0xaa78>
   202ec:	cmp	r0, #0
   202f0:	beq	202d8 <__assert_fail@plt+0xe938>
   202f4:	b	202e0 <__assert_fail@plt+0xe940>
   202f8:	ldrb	r2, [r4, #75]	; 0x4b
   202fc:	cmp	r2, #0
   20300:	streq	r3, [r4, #28]
   20304:	beq	202d8 <__assert_fail@plt+0xe938>
   20308:	ldrb	r2, [r4, #72]	; 0x48
   2030c:	cmp	r2, #0
   20310:	bne	20858 <__assert_fail@plt+0xeeb8>
   20314:	ldr	r0, [r4, #64]	; 0x40
   20318:	cmp	r0, #0
   2031c:	beq	202d8 <__assert_fail@plt+0xe938>
   20320:	ldr	r1, [r4, #36]	; 0x24
   20324:	ldr	r2, [r4, #28]
   20328:	cmp	r3, r1
   2032c:	movge	r3, r1
   20330:	cmp	r3, r2
   20334:	bgt	20344 <__assert_fail@plt+0xe9a4>
   20338:	b	20364 <__assert_fail@plt+0xe9c4>
   2033c:	ldr	r6, [r4, #24]
   20340:	ldr	r0, [r4, #64]	; 0x40
   20344:	ldm	r4, {r1, ip}
   20348:	add	r1, r1, r2
   2034c:	ldrb	r1, [r1, r6]
   20350:	ldrb	r1, [r0, r1]
   20354:	strb	r1, [ip, r2]
   20358:	add	r2, r2, #1
   2035c:	cmp	r3, r2
   20360:	bne	2033c <__assert_fail@plt+0xe99c>
   20364:	str	r2, [r4, #28]
   20368:	str	r2, [r4, #32]
   2036c:	b	202d8 <__assert_fail@plt+0xe938>
   20370:	ldr	r1, [r4, #28]
   20374:	cmp	r3, #0
   20378:	str	r1, [sp]
   2037c:	bne	20794 <__assert_fail@plt+0xedf4>
   20380:	ldr	r3, [r4, #80]	; 0x50
   20384:	mov	r1, #0
   20388:	cmp	r3, #1
   2038c:	str	r1, [r4, #28]
   20390:	ble	206b4 <__assert_fail@plt+0xed14>
   20394:	ldrb	r1, [r4, #73]	; 0x49
   20398:	cmp	r1, #0
   2039c:	bne	205e8 <__assert_fail@plt+0xec48>
   203a0:	ldr	r8, [r4, #24]
   203a4:	add	r8, r8, r2
   203a8:	cmp	r6, r8
   203ac:	ble	2093c <__assert_fail@plt+0xef9c>
   203b0:	add	r3, sp, #16
   203b4:	add	sl, r4, #16
   203b8:	add	fp, sp, #24
   203bc:	str	r5, [sp, #4]
   203c0:	mov	r9, r3
   203c4:	b	203d4 <__assert_fail@plt+0xea34>
   203c8:	add	r8, r8, r3
   203cc:	cmp	r6, r8
   203d0:	ble	207c0 <__assert_fail@plt+0xee20>
   203d4:	ldm	sl, {r0, r1}
   203d8:	ldr	r5, [r4, #44]	; 0x2c
   203dc:	ldr	ip, [r4]
   203e0:	sub	r5, r5, r8
   203e4:	stm	fp, {r0, r1}
   203e8:	mov	r2, r5
   203ec:	mov	r3, sl
   203f0:	add	r1, ip, r8
   203f4:	mov	r0, r9
   203f8:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   203fc:	sub	r2, r0, #1
   20400:	cmn	r2, #4
   20404:	mov	r3, r0
   20408:	ldrls	r2, [sp, #16]
   2040c:	bls	203c8 <__assert_fail@plt+0xea28>
   20410:	mov	r2, #0
   20414:	cmp	r5, r2
   20418:	cmpne	r0, r2
   2041c:	ldm	fp, {r0, r1}
   20420:	ldrne	r3, [r4]
   20424:	ldrbne	r2, [r3, r8]
   20428:	mov	r3, #1
   2042c:	stm	sl, {r0, r1}
   20430:	b	203c8 <__assert_fail@plt+0xea28>
   20434:	ldr	sl, [r4, #28]
   20438:	ldr	r9, [r4, #12]
   2043c:	mov	r3, sl
   20440:	mov	r2, #0
   20444:	b	20458 <__assert_fail@plt+0xeab8>
   20448:	ble	20480 <__assert_fail@plt+0xeae0>
   2044c:	add	r2, r8, #1
   20450:	cmp	r2, r3
   20454:	bge	20478 <__assert_fail@plt+0xead8>
   20458:	add	r1, r2, r3
   2045c:	add	r1, r1, r1, lsr #31
   20460:	asr	r8, r1, #1
   20464:	ldr	r1, [r9, r8, lsl #2]
   20468:	cmp	r5, r1
   2046c:	bge	20448 <__assert_fail@plt+0xeaa8>
   20470:	mov	r3, r8
   20474:	b	20450 <__assert_fail@plt+0xeab0>
   20478:	cmp	r5, r1
   2047c:	addgt	r8, r8, #1
   20480:	sub	fp, r8, #1
   20484:	mov	r2, r7
   20488:	mov	r1, fp
   2048c:	mov	r0, r4
   20490:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   20494:	cmp	r5, sl
   20498:	movge	r3, #0
   2049c:	movlt	r3, #1
   204a0:	cmp	r5, r8
   204a4:	movne	r3, #0
   204a8:	cmp	r3, #0
   204ac:	str	r0, [r4, #60]	; 0x3c
   204b0:	bne	2070c <__assert_fail@plt+0xed6c>
   204b4:	ldr	r2, [r4, #44]	; 0x2c
   204b8:	ldr	r3, [r4, #52]	; 0x34
   204bc:	sub	r2, r2, r6
   204c0:	add	r2, r2, r5
   204c4:	sub	r3, r3, r6
   204c8:	add	r3, r3, r5
   204cc:	str	r2, [r4, #48]	; 0x30
   204d0:	cmp	r8, #0
   204d4:	mov	r2, #0
   204d8:	str	r3, [r4, #56]	; 0x38
   204dc:	strb	r2, [r4, #76]	; 0x4c
   204e0:	ble	20518 <__assert_fail@plt+0xeb78>
   204e4:	sub	r3, r8, #-1073741823	; 0xc0000001
   204e8:	ldr	r2, [r9, r3, lsl #2]
   204ec:	add	r3, r9, r3, lsl #2
   204f0:	cmp	r5, r2
   204f4:	beq	2050c <__assert_fail@plt+0xeb6c>
   204f8:	b	20518 <__assert_fail@plt+0xeb78>
   204fc:	ldr	r2, [r3, #-4]!
   20500:	sub	fp, fp, #1
   20504:	cmp	r5, r2
   20508:	bne	20518 <__assert_fail@plt+0xeb78>
   2050c:	cmp	fp, #0
   20510:	mov	r8, fp
   20514:	bne	204fc <__assert_fail@plt+0xeb5c>
   20518:	cmp	sl, r8
   2051c:	ble	20590 <__assert_fail@plt+0xebf0>
   20520:	ldr	r1, [r4, #8]
   20524:	lsl	r0, r8, #2
   20528:	add	r3, r1, r0
   2052c:	ldr	r2, [r1, r8, lsl #2]
   20530:	cmn	r2, #1
   20534:	rsbeq	r1, r1, #4
   20538:	beq	2054c <__assert_fail@plt+0xebac>
   2053c:	b	20598 <__assert_fail@plt+0xebf8>
   20540:	ldr	r2, [r3, #4]!
   20544:	cmn	r2, #1
   20548:	bne	20598 <__assert_fail@plt+0xebf8>
   2054c:	add	r8, r8, #1
   20550:	cmp	sl, r8
   20554:	add	r0, r1, r3
   20558:	bne	20540 <__assert_fail@plt+0xeba0>
   2055c:	mov	r2, #0
   20560:	str	r2, [r4, #28]
   20564:	str	r2, [r4, #32]
   20568:	ldrb	r2, [r4, #75]	; 0x4b
   2056c:	ldr	r3, [r4, #80]	; 0x50
   20570:	b	20290 <__assert_fail@plt+0xe8f0>
   20574:	ldr	r0, [r4, #4]
   20578:	ldr	r2, [r4, #28]
   2057c:	add	r1, r0, r5
   20580:	sub	r2, r2, r5
   20584:	bl	1158c <memmove@plt>
   20588:	ldrb	r3, [r4, #75]	; 0x4b
   2058c:	b	20270 <__assert_fail@plt+0xe8d0>
   20590:	beq	2055c <__assert_fail@plt+0xebbc>
   20594:	lsl	r0, r8, #2
   20598:	ldr	r2, [r9, r0]
   2059c:	sub	r2, r2, r5
   205a0:	cmp	r2, #0
   205a4:	str	r2, [r4, #28]
   205a8:	beq	20564 <__assert_fail@plt+0xebc4>
   205ac:	ble	205d4 <__assert_fail@plt+0xec34>
   205b0:	ldr	r1, [r4, #8]
   205b4:	mov	r3, #0
   205b8:	sub	r1, r1, #4
   205bc:	mvn	r0, #0
   205c0:	str	r0, [r1, #4]!
   205c4:	ldr	r2, [r4, #28]
   205c8:	add	r3, r3, #1
   205cc:	cmp	r2, r3
   205d0:	bgt	205c0 <__assert_fail@plt+0xec20>
   205d4:	mov	r1, #255	; 0xff
   205d8:	ldr	r0, [r4, #4]
   205dc:	bl	11814 <memset@plt>
   205e0:	ldr	r2, [r4, #28]
   205e4:	b	20564 <__assert_fail@plt+0xebc4>
   205e8:	ldr	ip, [r4]
   205ec:	ldr	r8, [r4, #24]
   205f0:	sub	r3, r5, r3
   205f4:	add	r9, ip, r8
   205f8:	add	r3, r9, r3
   205fc:	cmp	ip, r3
   20600:	sub	r0, r5, #1
   20604:	movcc	ip, r3
   20608:	add	r1, r9, r0
   2060c:	cmp	r1, ip
   20610:	bcc	203a4 <__assert_fail@plt+0xea04>
   20614:	ldrb	r3, [r9, r0]
   20618:	and	r3, r3, #192	; 0xc0
   2061c:	cmp	r3, #128	; 0x80
   20620:	subeq	r3, r1, #1
   20624:	subeq	ip, ip, #1
   20628:	bne	2064c <__assert_fail@plt+0xecac>
   2062c:	cmp	ip, r3
   20630:	mov	r1, r3
   20634:	beq	203a4 <__assert_fail@plt+0xea04>
   20638:	ldrb	r0, [r1]
   2063c:	sub	r3, r3, #1
   20640:	and	r0, r0, #192	; 0xc0
   20644:	cmp	r0, #128	; 0x80
   20648:	beq	2062c <__assert_fail@plt+0xec8c>
   2064c:	ldr	r2, [r4, #48]	; 0x30
   20650:	ldr	r3, [r4, #64]	; 0x40
   20654:	add	r2, r9, r2
   20658:	cmp	r3, #0
   2065c:	mov	r8, r1
   20660:	sub	r2, r2, r1
   20664:	bne	208f4 <__assert_fail@plt+0xef54>
   20668:	add	fp, sp, #24
   2066c:	mov	r3, fp
   20670:	mov	sl, #0
   20674:	add	r0, sp, #12
   20678:	str	sl, [sp, #24]
   2067c:	str	sl, [sp, #28]
   20680:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   20684:	add	r9, r9, r5
   20688:	sub	r8, r9, r8
   2068c:	cmp	r0, r8
   20690:	movcc	r3, #0
   20694:	movcs	r3, #1
   20698:	cmn	r0, #3
   2069c:	movhi	r3, #0
   206a0:	cmp	r3, sl
   206a4:	bne	20808 <__assert_fail@plt+0xee68>
   206a8:	ldr	r8, [r4, #24]
   206ac:	ldr	r2, [r4, #32]
   206b0:	b	203a4 <__assert_fail@plt+0xea04>
   206b4:	ldr	r2, [r4]
   206b8:	ldr	r0, [r4, #24]
   206bc:	add	r2, r2, r5
   206c0:	add	r2, r2, r0
   206c4:	ldr	ip, [r4, #64]	; 0x40
   206c8:	ldrb	r0, [r2, #-1]
   206cc:	cmp	ip, #0
   206d0:	str	r1, [r4, #32]
   206d4:	ldrbne	r0, [ip, r0]
   206d8:	ldr	ip, [r4, #68]	; 0x44
   206dc:	and	r2, r0, #31
   206e0:	asr	r1, r0, #5
   206e4:	ldr	r1, [ip, r1, lsl #2]
   206e8:	lsr	r2, r1, r2
   206ec:	ands	r1, r2, #1
   206f0:	movne	r1, #1
   206f4:	bne	20700 <__assert_fail@plt+0xed60>
   206f8:	cmp	r0, #10
   206fc:	beq	208c8 <__assert_fail@plt+0xef28>
   20700:	ldrb	r2, [r4, #75]	; 0x4b
   20704:	str	r1, [r4, #60]	; 0x3c
   20708:	b	20290 <__assert_fail@plt+0xe8f0>
   2070c:	ldr	r3, [r9, r8, lsl #2]
   20710:	cmp	r5, r3
   20714:	bne	204b4 <__assert_fail@plt+0xeb14>
   20718:	ldr	r0, [r4, #8]
   2071c:	sub	r2, sl, r5
   20720:	lsl	r7, r5, #2
   20724:	lsl	r2, r2, #2
   20728:	add	r1, r0, r7
   2072c:	bl	1158c <memmove@plt>
   20730:	ldr	r0, [r4, #4]
   20734:	ldr	r2, [r4, #28]
   20738:	add	r1, r0, r5
   2073c:	sub	r2, r2, r5
   20740:	bl	1158c <memmove@plt>
   20744:	ldr	r3, [r4, #28]
   20748:	ldr	r2, [r4, #32]
   2074c:	sub	r3, r3, r5
   20750:	sub	r2, r2, r5
   20754:	cmp	r3, #0
   20758:	str	r3, [r4, #28]
   2075c:	str	r2, [r4, #32]
   20760:	ble	20568 <__assert_fail@plt+0xebc8>
   20764:	ldr	r1, [r4, #12]
   20768:	mov	r2, #0
   2076c:	add	r0, r1, r7
   20770:	sub	r1, r1, #4
   20774:	ldr	r3, [r0], #4
   20778:	add	r2, r2, #1
   2077c:	sub	r3, r3, r5
   20780:	str	r3, [r1, #4]!
   20784:	ldr	r3, [r4, #28]
   20788:	cmp	r3, r2
   2078c:	bgt	20774 <__assert_fail@plt+0xedd4>
   20790:	b	20568 <__assert_fail@plt+0xebc8>
   20794:	ldr	r1, [r4, #44]	; 0x2c
   20798:	ldr	r3, [r4, #52]	; 0x34
   2079c:	sub	r1, r1, r6
   207a0:	add	r1, r1, r5
   207a4:	sub	r3, r3, r6
   207a8:	add	r3, r3, r5
   207ac:	str	r1, [r4, #48]	; 0x30
   207b0:	mov	r1, #0
   207b4:	str	r3, [r4, #56]	; 0x38
   207b8:	strb	r1, [r4, #76]	; 0x4c
   207bc:	b	20380 <__assert_fail@plt+0xe9e0>
   207c0:	sub	r8, r8, r6
   207c4:	cmn	r2, #1
   207c8:	ldr	r5, [sp, #4]
   207cc:	mov	r9, r2
   207d0:	str	r8, [r4, #28]
   207d4:	bne	20824 <__assert_fail@plt+0xee84>
   207d8:	ldr	r3, [sp]
   207dc:	mov	r2, r7
   207e0:	sub	r1, r3, #1
   207e4:	mov	r0, r4
   207e8:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   207ec:	str	r0, [r4, #60]	; 0x3c
   207f0:	cmp	r8, #0
   207f4:	bne	20864 <__assert_fail@plt+0xeec4>
   207f8:	ldrb	r2, [r4, #75]	; 0x4b
   207fc:	str	r8, [r4, #32]
   20800:	ldr	r3, [r4, #80]	; 0x50
   20804:	b	20290 <__assert_fail@plt+0xe8f0>
   20808:	ldr	r9, [sp, #12]
   2080c:	sub	r8, r0, r8
   20810:	cmn	r9, #1
   20814:	str	sl, [r4, #16]
   20818:	str	sl, [r4, #20]
   2081c:	str	r8, [r4, #28]
   20820:	beq	206a8 <__assert_fail@plt+0xed08>
   20824:	ldrb	r3, [r4, #78]	; 0x4e
   20828:	cmp	r3, #0
   2082c:	bne	208a0 <__assert_fail@plt+0xef00>
   20830:	cmp	r9, #10
   20834:	movne	r3, #0
   20838:	beq	20844 <__assert_fail@plt+0xeea4>
   2083c:	str	r3, [r4, #60]	; 0x3c
   20840:	b	207f0 <__assert_fail@plt+0xee50>
   20844:	ldrb	r3, [r4, #77]	; 0x4d
   20848:	cmp	r3, #0
   2084c:	movne	r3, #2
   20850:	moveq	r3, #0
   20854:	b	2083c <__assert_fail@plt+0xee9c>
   20858:	mov	r0, r4
   2085c:	bl	1c998 <__assert_fail@plt+0xaff8>
   20860:	b	202d8 <__assert_fail@plt+0xe938>
   20864:	ble	2088c <__assert_fail@plt+0xeeec>
   20868:	ldr	r2, [r4, #8]
   2086c:	mov	r3, #0
   20870:	sub	r2, r2, #4
   20874:	mvn	r1, #0
   20878:	str	r1, [r2, #4]!
   2087c:	ldr	r8, [r4, #28]
   20880:	add	r3, r3, #1
   20884:	cmp	r8, r3
   20888:	bgt	20878 <__assert_fail@plt+0xeed8>
   2088c:	ldrb	r2, [r4, #75]	; 0x4b
   20890:	cmp	r2, #0
   20894:	bne	208dc <__assert_fail@plt+0xef3c>
   20898:	ldr	r8, [r4, #28]
   2089c:	b	207fc <__assert_fail@plt+0xee5c>
   208a0:	mov	r0, r9
   208a4:	bl	117e4 <iswalnum@plt>
   208a8:	cmp	r9, #95	; 0x5f
   208ac:	clz	r0, r0
   208b0:	lsr	r0, r0, #5
   208b4:	moveq	r0, #0
   208b8:	cmp	r0, #0
   208bc:	moveq	r3, #1
   208c0:	bne	20830 <__assert_fail@plt+0xee90>
   208c4:	b	2083c <__assert_fail@plt+0xee9c>
   208c8:	ldrb	r1, [r4, #77]	; 0x4d
   208cc:	cmp	r1, #0
   208d0:	movne	r1, #2
   208d4:	moveq	r1, #0
   208d8:	b	20700 <__assert_fail@plt+0xed60>
   208dc:	mov	r2, r8
   208e0:	mov	r1, #255	; 0xff
   208e4:	ldr	r0, [r4, #4]
   208e8:	bl	11814 <memset@plt>
   208ec:	ldrb	r2, [r4, #75]	; 0x4b
   208f0:	b	20898 <__assert_fail@plt+0xeef8>
   208f4:	cmp	r2, #6
   208f8:	movlt	r0, r2
   208fc:	movge	r0, #6
   20900:	cmp	r0, #0
   20904:	ble	20948 <__assert_fail@plt+0xefa8>
   20908:	add	ip, sp, #16
   2090c:	mov	lr, ip
   20910:	mov	sl, ip
   20914:	sub	ip, r0, #1
   20918:	add	ip, lr, ip
   2091c:	add	r0, r1, r0
   20920:	ldrb	lr, [r0, #-1]!
   20924:	cmp	r1, r0
   20928:	ldrb	lr, [r3, lr]
   2092c:	strb	lr, [ip], #-1
   20930:	bne	20920 <__assert_fail@plt+0xef80>
   20934:	mov	r1, sl
   20938:	b	20668 <__assert_fail@plt+0xecc8>
   2093c:	sub	r8, r8, r6
   20940:	str	r8, [r4, #28]
   20944:	b	207d8 <__assert_fail@plt+0xee38>
   20948:	add	r3, sp, #16
   2094c:	mov	sl, r3
   20950:	b	20934 <__assert_fail@plt+0xef94>
   20954:	ldr	ip, [r1]
   20958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2095c:	cmp	ip, #0
   20960:	sub	sp, sp, #20
   20964:	ldr	r6, [r0, #84]	; 0x54
   20968:	ble	20a34 <__assert_fail@plt+0xf094>
   2096c:	mov	r7, r2
   20970:	str	r3, [sp, #8]
   20974:	mov	r8, r0
   20978:	str	r1, [sp, #4]
   2097c:	mov	r4, #0
   20980:	mov	r2, #24
   20984:	mov	r9, #1
   20988:	b	20994 <__assert_fail@plt+0xeff4>
   2098c:	cmp	r4, ip
   20990:	bge	20a34 <__assert_fail@plt+0xf094>
   20994:	ldr	r1, [r7]
   20998:	ldr	r3, [r6]
   2099c:	ldr	r5, [r1, r4, lsl #2]
   209a0:	add	r4, r4, #1
   209a4:	add	r1, r3, r5, lsl #3
   209a8:	ldrb	r1, [r1, #4]
   209ac:	cmp	r1, #8
   209b0:	bne	2098c <__assert_fail@plt+0xefec>
   209b4:	ldr	r3, [r3, r5, lsl #3]
   209b8:	cmp	r3, #31
   209bc:	bgt	2098c <__assert_fail@plt+0xefec>
   209c0:	ldr	r1, [r6, #80]	; 0x50
   209c4:	lsr	r3, r1, r3
   209c8:	tst	r3, #1
   209cc:	beq	2098c <__assert_fail@plt+0xefec>
   209d0:	ldr	sl, [r8, #124]	; 0x7c
   209d4:	ldr	r3, [r8, #128]	; 0x80
   209d8:	ldr	fp, [r8, #132]	; 0x84
   209dc:	cmp	r3, sl
   209e0:	beq	20a48 <__assert_fail@plt+0xf0a8>
   209e4:	mov	r1, r2
   209e8:	mov	r0, r9
   209ec:	str	r2, [sp, #12]
   209f0:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   209f4:	ldr	r3, [r8, #124]	; 0x7c
   209f8:	ldr	r1, [r8, #132]	; 0x84
   209fc:	add	ip, r3, #1
   20a00:	str	r0, [fp, sl, lsl #2]
   20a04:	ldr	r3, [r1, r3, lsl #2]
   20a08:	cmp	r3, #0
   20a0c:	beq	20a40 <__assert_fail@plt+0xf0a0>
   20a10:	ldr	r2, [sp, #8]
   20a14:	str	r5, [r3, #4]
   20a18:	str	ip, [r8, #124]	; 0x7c
   20a1c:	str	r2, [r3]
   20a20:	ldr	r3, [sp, #4]
   20a24:	ldr	r2, [sp, #12]
   20a28:	ldr	ip, [r3]
   20a2c:	cmp	r4, ip
   20a30:	blt	20994 <__assert_fail@plt+0xeff4>
   20a34:	mov	r0, #0
   20a38:	add	sp, sp, #20
   20a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a40:	mov	r0, #12
   20a44:	b	20a38 <__assert_fail@plt+0xf098>
   20a48:	mov	r0, fp
   20a4c:	lsl	r1, sl, #3
   20a50:	str	r2, [sp, #12]
   20a54:	bl	1babc <__assert_fail@plt+0xa11c>
   20a58:	lsl	r3, sl, #1
   20a5c:	ldr	r2, [sp, #12]
   20a60:	subs	fp, r0, #0
   20a64:	beq	20a40 <__assert_fail@plt+0xf0a0>
   20a68:	ldr	sl, [r8, #124]	; 0x7c
   20a6c:	str	fp, [r8, #132]	; 0x84
   20a70:	str	r3, [r8, #128]	; 0x80
   20a74:	b	209e4 <__assert_fail@plt+0xf044>
   20a78:	push	{r4, r5, r6, lr}
   20a7c:	mov	r5, r0
   20a80:	mov	r0, r1
   20a84:	mov	r4, r1
   20a88:	bl	117a8 <strlen@plt>
   20a8c:	cmp	r0, #1
   20a90:	moveq	r1, #0
   20a94:	ldrbeq	r3, [r4]
   20a98:	movne	r1, #3
   20a9c:	andeq	ip, r3, #31
   20aa0:	asreq	r3, r3, #5
   20aa4:	ldreq	r2, [r5, r3, lsl #2]
   20aa8:	orreq	r2, r2, r0, lsl ip
   20aac:	mov	r0, r1
   20ab0:	streq	r2, [r5, r3, lsl #2]
   20ab4:	pop	{r4, r5, r6, pc}
   20ab8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20abc:	mov	r6, r0
   20ac0:	ldr	ip, [sp, #40]	; 0x28
   20ac4:	mov	r5, r1
   20ac8:	tst	ip, #4194304	; 0x400000
   20acc:	mov	sl, r2
   20ad0:	mov	r7, r3
   20ad4:	ldr	r9, [sp, #32]
   20ad8:	beq	20af8 <__assert_fail@plt+0xf158>
   20adc:	ldr	r1, [pc, #2196]	; 21378 <__assert_fail@plt+0xf9d8>
   20ae0:	ldr	r0, [sp, #36]	; 0x24
   20ae4:	bl	11544 <strcmp@plt>
   20ae8:	cmp	r0, #0
   20aec:	bne	20bd8 <__assert_fail@plt+0xf238>
   20af0:	ldr	r3, [pc, #2180]	; 2137c <__assert_fail@plt+0xf9dc>
   20af4:	str	r3, [sp, #36]	; 0x24
   20af8:	ldr	r4, [r7]
   20afc:	ldr	r3, [r9]
   20b00:	cmp	r3, r4
   20b04:	beq	20c08 <__assert_fail@plt+0xf268>
   20b08:	ldr	r8, [sl]
   20b0c:	add	r3, r4, #1
   20b10:	str	r3, [r7]
   20b14:	ldr	r0, [sp, #36]	; 0x24
   20b18:	bl	11514 <wctype@plt>
   20b1c:	ldr	r1, [pc, #2140]	; 21380 <__assert_fail@plt+0xf9e0>
   20b20:	str	r0, [r8, r4, lsl #2]
   20b24:	ldr	r0, [sp, #36]	; 0x24
   20b28:	bl	11544 <strcmp@plt>
   20b2c:	subs	r4, r0, #0
   20b30:	beq	20b90 <__assert_fail@plt+0xf1f0>
   20b34:	ldr	r1, [pc, #2120]	; 21384 <__assert_fail@plt+0xf9e4>
   20b38:	ldr	r0, [sp, #36]	; 0x24
   20b3c:	bl	11544 <strcmp@plt>
   20b40:	subs	r4, r0, #0
   20b44:	bne	20c34 <__assert_fail@plt+0xf294>
   20b48:	cmp	r6, #0
   20b4c:	bne	20de8 <__assert_fail@plt+0xf448>
   20b50:	bl	11778 <__ctype_b_loc@plt>
   20b54:	mov	ip, #1
   20b58:	ldr	r3, [r0]
   20b5c:	sub	r3, r3, #2
   20b60:	ldrh	r2, [r3, #2]!
   20b64:	asr	r1, r4, #5
   20b68:	and	r0, r4, #31
   20b6c:	tst	r2, #2
   20b70:	add	r4, r4, #1
   20b74:	ldrne	r2, [r5, r1, lsl #2]
   20b78:	orrne	r2, r2, ip, lsl r0
   20b7c:	strne	r2, [r5, r1, lsl #2]
   20b80:	cmp	r4, #256	; 0x100
   20b84:	bne	20b60 <__assert_fail@plt+0xf1c0>
   20b88:	mov	r0, #0
   20b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20b90:	cmp	r6, #0
   20b94:	bne	20d54 <__assert_fail@plt+0xf3b4>
   20b98:	bl	11778 <__ctype_b_loc@plt>
   20b9c:	mov	lr, #1
   20ba0:	ldr	r3, [r0]
   20ba4:	sub	r3, r3, #2
   20ba8:	ldrh	r0, [r3, #2]!
   20bac:	asr	r2, r4, #5
   20bb0:	and	ip, r4, #31
   20bb4:	tst	r0, #8
   20bb8:	add	r4, r4, #1
   20bbc:	ldrne	r1, [r5, r2, lsl #2]
   20bc0:	orrne	r1, r1, lr, lsl ip
   20bc4:	strne	r1, [r5, r2, lsl #2]
   20bc8:	cmp	r4, #256	; 0x100
   20bcc:	bne	20ba8 <__assert_fail@plt+0xf208>
   20bd0:	mov	r0, #0
   20bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20bd8:	ldr	r0, [sp, #36]	; 0x24
   20bdc:	ldr	r1, [pc, #1956]	; 21388 <__assert_fail@plt+0xf9e8>
   20be0:	bl	11544 <strcmp@plt>
   20be4:	ldr	r3, [pc, #1936]	; 2137c <__assert_fail@plt+0xf9dc>
   20be8:	ldr	r2, [sp, #36]	; 0x24
   20bec:	ldr	r4, [r7]
   20bf0:	cmp	r0, #0
   20bf4:	moveq	r2, r3
   20bf8:	ldr	r3, [r9]
   20bfc:	str	r2, [sp, #36]	; 0x24
   20c00:	cmp	r3, r4
   20c04:	bne	20b08 <__assert_fail@plt+0xf168>
   20c08:	lsl	r4, r4, #1
   20c0c:	add	r4, r4, #1
   20c10:	ldr	r0, [sl]
   20c14:	lsl	r1, r4, #2
   20c18:	bl	1babc <__assert_fail@plt+0xa11c>
   20c1c:	subs	r8, r0, #0
   20c20:	beq	20ee0 <__assert_fail@plt+0xf540>
   20c24:	str	r8, [sl]
   20c28:	str	r4, [r9]
   20c2c:	ldr	r4, [r7]
   20c30:	b	20b0c <__assert_fail@plt+0xf16c>
   20c34:	ldr	r1, [pc, #1868]	; 21388 <__assert_fail@plt+0xf9e8>
   20c38:	ldr	r0, [sp, #36]	; 0x24
   20c3c:	bl	11544 <strcmp@plt>
   20c40:	subs	r4, r0, #0
   20c44:	beq	20ca0 <__assert_fail@plt+0xf300>
   20c48:	ldr	r1, [pc, #1852]	; 2138c <__assert_fail@plt+0xf9ec>
   20c4c:	ldr	r0, [sp, #36]	; 0x24
   20c50:	bl	11544 <strcmp@plt>
   20c54:	subs	r4, r0, #0
   20c58:	bne	20ce8 <__assert_fail@plt+0xf348>
   20c5c:	cmp	r6, #0
   20c60:	bne	20f40 <__assert_fail@plt+0xf5a0>
   20c64:	bl	11778 <__ctype_b_loc@plt>
   20c68:	mov	ip, #1
   20c6c:	ldr	r3, [r0]
   20c70:	sub	r3, r3, #2
   20c74:	ldrh	r2, [r3, #2]!
   20c78:	asr	r1, r4, #5
   20c7c:	and	r0, r4, #31
   20c80:	tst	r2, #8192	; 0x2000
   20c84:	add	r4, r4, #1
   20c88:	ldrne	r2, [r5, r1, lsl #2]
   20c8c:	orrne	r2, r2, ip, lsl r0
   20c90:	strne	r2, [r5, r1, lsl #2]
   20c94:	cmp	r4, #256	; 0x100
   20c98:	bne	20c74 <__assert_fail@plt+0xf2d4>
   20c9c:	b	20b88 <__assert_fail@plt+0xf1e8>
   20ca0:	cmp	r6, #0
   20ca4:	bne	20e90 <__assert_fail@plt+0xf4f0>
   20ca8:	bl	11778 <__ctype_b_loc@plt>
   20cac:	mov	ip, #1
   20cb0:	ldr	r3, [r0]
   20cb4:	sub	r3, r3, #2
   20cb8:	ldrh	r2, [r3, #2]!
   20cbc:	asr	r1, r4, #5
   20cc0:	and	r0, r4, #31
   20cc4:	tst	r2, #512	; 0x200
   20cc8:	add	r4, r4, #1
   20ccc:	ldrne	r2, [r5, r1, lsl #2]
   20cd0:	orrne	r2, r2, ip, lsl r0
   20cd4:	strne	r2, [r5, r1, lsl #2]
   20cd8:	cmp	r4, #256	; 0x100
   20cdc:	bne	20cb8 <__assert_fail@plt+0xf318>
   20ce0:	mov	r0, #0
   20ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20ce8:	ldr	r1, [pc, #1676]	; 2137c <__assert_fail@plt+0xf9dc>
   20cec:	ldr	r0, [sp, #36]	; 0x24
   20cf0:	bl	11544 <strcmp@plt>
   20cf4:	subs	r4, r0, #0
   20cf8:	beq	20da4 <__assert_fail@plt+0xf404>
   20cfc:	ldr	r1, [pc, #1676]	; 21390 <__assert_fail@plt+0xf9f0>
   20d00:	ldr	r0, [sp, #36]	; 0x24
   20d04:	bl	11544 <strcmp@plt>
   20d08:	subs	r4, r0, #0
   20d0c:	bne	20e38 <__assert_fail@plt+0xf498>
   20d10:	cmp	r6, #0
   20d14:	bne	21130 <__assert_fail@plt+0xf790>
   20d18:	bl	11778 <__ctype_b_loc@plt>
   20d1c:	mov	ip, #1
   20d20:	ldr	r3, [r0]
   20d24:	sub	r3, r3, #2
   20d28:	ldrh	r1, [r3, #2]!
   20d2c:	asr	r2, r4, #5
   20d30:	and	r0, r4, #31
   20d34:	tst	r1, #2048	; 0x800
   20d38:	add	r4, r4, #1
   20d3c:	ldrne	r1, [r5, r2, lsl #2]
   20d40:	orrne	r1, r1, ip, lsl r0
   20d44:	strne	r1, [r5, r2, lsl #2]
   20d48:	cmp	r4, #256	; 0x100
   20d4c:	bne	20d28 <__assert_fail@plt+0xf388>
   20d50:	b	20b88 <__assert_fail@plt+0xf1e8>
   20d54:	bl	11778 <__ctype_b_loc@plt>
   20d58:	mov	r4, #1
   20d5c:	mov	r1, r6
   20d60:	ldr	r3, [r0]
   20d64:	add	ip, r3, #508	; 0x1fc
   20d68:	add	ip, ip, #2
   20d6c:	sub	r3, r3, #2
   20d70:	ldrh	r2, [r3, #2]!
   20d74:	tst	r2, #8
   20d78:	beq	20d94 <__assert_fail@plt+0xf3f4>
   20d7c:	ldrb	r2, [r1]
   20d80:	and	lr, r2, #31
   20d84:	asr	r2, r2, #5
   20d88:	ldr	r0, [r5, r2, lsl #2]
   20d8c:	orr	r0, r0, r4, lsl lr
   20d90:	str	r0, [r5, r2, lsl #2]
   20d94:	cmp	ip, r3
   20d98:	add	r1, r1, #1
   20d9c:	bne	20d70 <__assert_fail@plt+0xf3d0>
   20da0:	b	20b88 <__assert_fail@plt+0xf1e8>
   20da4:	cmp	r6, #0
   20da8:	bne	20f90 <__assert_fail@plt+0xf5f0>
   20dac:	bl	11778 <__ctype_b_loc@plt>
   20db0:	mov	ip, #1
   20db4:	ldr	r3, [r0]
   20db8:	sub	r3, r3, #2
   20dbc:	ldrh	r2, [r3, #2]!
   20dc0:	asr	r1, r4, #5
   20dc4:	and	r0, r4, #31
   20dc8:	tst	r2, #1024	; 0x400
   20dcc:	add	r4, r4, #1
   20dd0:	ldrne	r2, [r5, r1, lsl #2]
   20dd4:	orrne	r2, r2, ip, lsl r0
   20dd8:	strne	r2, [r5, r1, lsl #2]
   20ddc:	cmp	r4, #256	; 0x100
   20de0:	bne	20dbc <__assert_fail@plt+0xf41c>
   20de4:	b	20b88 <__assert_fail@plt+0xf1e8>
   20de8:	bl	11778 <__ctype_b_loc@plt>
   20dec:	mov	r4, #1
   20df0:	mov	r1, r6
   20df4:	ldr	r3, [r0]
   20df8:	add	ip, r3, #508	; 0x1fc
   20dfc:	add	ip, ip, #2
   20e00:	sub	r3, r3, #2
   20e04:	ldrh	r2, [r3, #2]!
   20e08:	tst	r2, #2
   20e0c:	beq	20e28 <__assert_fail@plt+0xf488>
   20e10:	ldrb	r2, [r1]
   20e14:	and	lr, r2, #31
   20e18:	asr	r2, r2, #5
   20e1c:	ldr	r0, [r5, r2, lsl #2]
   20e20:	orr	r0, r0, r4, lsl lr
   20e24:	str	r0, [r5, r2, lsl #2]
   20e28:	cmp	ip, r3
   20e2c:	add	r1, r1, #1
   20e30:	bne	20e04 <__assert_fail@plt+0xf464>
   20e34:	b	20b88 <__assert_fail@plt+0xf1e8>
   20e38:	ldr	r1, [pc, #1364]	; 21394 <__assert_fail@plt+0xf9f4>
   20e3c:	ldr	r0, [sp, #36]	; 0x24
   20e40:	bl	11544 <strcmp@plt>
   20e44:	subs	r4, r0, #0
   20e48:	bne	20ee8 <__assert_fail@plt+0xf548>
   20e4c:	cmp	r6, #0
   20e50:	bne	21180 <__assert_fail@plt+0xf7e0>
   20e54:	bl	11778 <__ctype_b_loc@plt>
   20e58:	mov	ip, #1
   20e5c:	ldr	r3, [r0]
   20e60:	sub	r3, r3, #2
   20e64:	ldrh	r2, [r3, #2]!
   20e68:	asr	r1, r4, #5
   20e6c:	and	r0, r4, #31
   20e70:	tst	r2, #16384	; 0x4000
   20e74:	add	r4, r4, #1
   20e78:	ldrne	r2, [r5, r1, lsl #2]
   20e7c:	orrne	r2, r2, ip, lsl r0
   20e80:	strne	r2, [r5, r1, lsl #2]
   20e84:	cmp	r4, #256	; 0x100
   20e88:	bne	20e64 <__assert_fail@plt+0xf4c4>
   20e8c:	b	20b88 <__assert_fail@plt+0xf1e8>
   20e90:	bl	11778 <__ctype_b_loc@plt>
   20e94:	mov	r4, #1
   20e98:	mov	r1, r6
   20e9c:	ldr	r3, [r0]
   20ea0:	add	ip, r3, #508	; 0x1fc
   20ea4:	add	ip, ip, #2
   20ea8:	sub	r3, r3, #2
   20eac:	ldrh	r2, [r3, #2]!
   20eb0:	tst	r2, #512	; 0x200
   20eb4:	beq	20ed0 <__assert_fail@plt+0xf530>
   20eb8:	ldrb	r2, [r1]
   20ebc:	and	lr, r2, #31
   20ec0:	asr	r2, r2, #5
   20ec4:	ldr	r0, [r5, r2, lsl #2]
   20ec8:	orr	r0, r0, r4, lsl lr
   20ecc:	str	r0, [r5, r2, lsl #2]
   20ed0:	cmp	ip, r3
   20ed4:	add	r1, r1, #1
   20ed8:	bne	20eac <__assert_fail@plt+0xf50c>
   20edc:	b	20b88 <__assert_fail@plt+0xf1e8>
   20ee0:	mov	r0, #12
   20ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20ee8:	ldr	r1, [pc, #1160]	; 21378 <__assert_fail@plt+0xf9d8>
   20eec:	ldr	r0, [sp, #36]	; 0x24
   20ef0:	bl	11544 <strcmp@plt>
   20ef4:	subs	r4, r0, #0
   20ef8:	bne	20fe0 <__assert_fail@plt+0xf640>
   20efc:	cmp	r6, #0
   20f00:	bne	21038 <__assert_fail@plt+0xf698>
   20f04:	bl	11778 <__ctype_b_loc@plt>
   20f08:	mov	ip, #1
   20f0c:	ldr	r3, [r0]
   20f10:	sub	r3, r3, #2
   20f14:	ldrh	r2, [r3, #2]!
   20f18:	asr	r1, r4, #5
   20f1c:	and	r0, r4, #31
   20f20:	tst	r2, #256	; 0x100
   20f24:	add	r4, r4, #1
   20f28:	ldrne	r2, [r5, r1, lsl #2]
   20f2c:	orrne	r2, r2, ip, lsl r0
   20f30:	strne	r2, [r5, r1, lsl #2]
   20f34:	cmp	r4, #256	; 0x100
   20f38:	bne	20f14 <__assert_fail@plt+0xf574>
   20f3c:	b	20b88 <__assert_fail@plt+0xf1e8>
   20f40:	bl	11778 <__ctype_b_loc@plt>
   20f44:	mov	r4, #1
   20f48:	mov	r1, r6
   20f4c:	ldr	r3, [r0]
   20f50:	add	ip, r3, #508	; 0x1fc
   20f54:	add	ip, ip, #2
   20f58:	sub	r3, r3, #2
   20f5c:	ldrh	r2, [r3, #2]!
   20f60:	tst	r2, #8192	; 0x2000
   20f64:	beq	20f80 <__assert_fail@plt+0xf5e0>
   20f68:	ldrb	r2, [r1]
   20f6c:	and	lr, r2, #31
   20f70:	asr	r2, r2, #5
   20f74:	ldr	r0, [r5, r2, lsl #2]
   20f78:	orr	r0, r0, r4, lsl lr
   20f7c:	str	r0, [r5, r2, lsl #2]
   20f80:	cmp	r3, ip
   20f84:	add	r1, r1, #1
   20f88:	bne	20f5c <__assert_fail@plt+0xf5bc>
   20f8c:	b	20b88 <__assert_fail@plt+0xf1e8>
   20f90:	bl	11778 <__ctype_b_loc@plt>
   20f94:	mov	r4, #1
   20f98:	mov	r1, r6
   20f9c:	ldr	r3, [r0]
   20fa0:	add	ip, r3, #508	; 0x1fc
   20fa4:	add	ip, ip, #2
   20fa8:	sub	r3, r3, #2
   20fac:	ldrh	r2, [r3, #2]!
   20fb0:	tst	r2, #1024	; 0x400
   20fb4:	beq	20fd0 <__assert_fail@plt+0xf630>
   20fb8:	ldrb	r2, [r1]
   20fbc:	and	lr, r2, #31
   20fc0:	asr	r2, r2, #5
   20fc4:	ldr	r0, [r5, r2, lsl #2]
   20fc8:	orr	r0, r0, r4, lsl lr
   20fcc:	str	r0, [r5, r2, lsl #2]
   20fd0:	cmp	ip, r3
   20fd4:	add	r1, r1, #1
   20fd8:	bne	20fac <__assert_fail@plt+0xf60c>
   20fdc:	b	20b88 <__assert_fail@plt+0xf1e8>
   20fe0:	ldr	r1, [pc, #944]	; 21398 <__assert_fail@plt+0xf9f8>
   20fe4:	ldr	r0, [sp, #36]	; 0x24
   20fe8:	bl	11544 <strcmp@plt>
   20fec:	subs	r4, r0, #0
   20ff0:	bne	210d8 <__assert_fail@plt+0xf738>
   20ff4:	cmp	r6, #0
   20ff8:	bne	21088 <__assert_fail@plt+0xf6e8>
   20ffc:	bl	11778 <__ctype_b_loc@plt>
   21000:	mov	ip, #1
   21004:	ldr	r3, [r0]
   21008:	sub	r3, r3, #2
   2100c:	ldrh	r2, [r3, #2]!
   21010:	asr	r1, r4, #5
   21014:	and	r0, r4, #31
   21018:	tst	r2, #1
   2101c:	add	r4, r4, #1
   21020:	ldrne	r2, [r5, r1, lsl #2]
   21024:	orrne	r2, r2, ip, lsl r0
   21028:	strne	r2, [r5, r1, lsl #2]
   2102c:	cmp	r4, #256	; 0x100
   21030:	bne	2100c <__assert_fail@plt+0xf66c>
   21034:	b	20b88 <__assert_fail@plt+0xf1e8>
   21038:	bl	11778 <__ctype_b_loc@plt>
   2103c:	mov	r1, r6
   21040:	mov	lr, #1
   21044:	ldr	r3, [r0]
   21048:	add	r0, r3, #508	; 0x1fc
   2104c:	add	r0, r0, #2
   21050:	sub	r3, r3, #2
   21054:	ldrh	r2, [r3, #2]!
   21058:	tst	r2, #256	; 0x100
   2105c:	beq	21078 <__assert_fail@plt+0xf6d8>
   21060:	ldrb	r2, [r1]
   21064:	and	r4, r2, #31
   21068:	asr	r2, r2, #5
   2106c:	ldr	ip, [r5, r2, lsl #2]
   21070:	orr	ip, ip, lr, lsl r4
   21074:	str	ip, [r5, r2, lsl #2]
   21078:	cmp	r0, r3
   2107c:	add	r1, r1, #1
   21080:	bne	21054 <__assert_fail@plt+0xf6b4>
   21084:	b	20b88 <__assert_fail@plt+0xf1e8>
   21088:	bl	11778 <__ctype_b_loc@plt>
   2108c:	mov	r1, r6
   21090:	mov	lr, #1
   21094:	ldr	r3, [r0]
   21098:	add	r0, r3, #508	; 0x1fc
   2109c:	add	r0, r0, #2
   210a0:	sub	r3, r3, #2
   210a4:	ldrh	r2, [r3, #2]!
   210a8:	tst	r2, #1
   210ac:	beq	210c8 <__assert_fail@plt+0xf728>
   210b0:	ldrb	r2, [r1]
   210b4:	and	r4, r2, #31
   210b8:	asr	r2, r2, #5
   210bc:	ldr	ip, [r5, r2, lsl #2]
   210c0:	orr	ip, ip, lr, lsl r4
   210c4:	str	ip, [r5, r2, lsl #2]
   210c8:	cmp	r0, r3
   210cc:	add	r1, r1, #1
   210d0:	bne	210a4 <__assert_fail@plt+0xf704>
   210d4:	b	20b88 <__assert_fail@plt+0xf1e8>
   210d8:	ldr	r1, [pc, #700]	; 2139c <__assert_fail@plt+0xf9fc>
   210dc:	ldr	r0, [sp, #36]	; 0x24
   210e0:	bl	11544 <strcmp@plt>
   210e4:	subs	r4, r0, #0
   210e8:	bne	21220 <__assert_fail@plt+0xf880>
   210ec:	cmp	r6, #0
   210f0:	bne	211d0 <__assert_fail@plt+0xf830>
   210f4:	bl	11778 <__ctype_b_loc@plt>
   210f8:	mov	ip, #1
   210fc:	ldr	r3, [r0]
   21100:	sub	r3, r3, #2
   21104:	ldrsh	r2, [r3, #2]!
   21108:	cmp	r2, #0
   2110c:	asrlt	r0, r4, #5
   21110:	andlt	r1, r4, #31
   21114:	ldrlt	r2, [r5, r0, lsl #2]
   21118:	add	r4, r4, #1
   2111c:	orrlt	r2, r2, ip, lsl r1
   21120:	strlt	r2, [r5, r0, lsl #2]
   21124:	cmp	r4, #256	; 0x100
   21128:	bne	21104 <__assert_fail@plt+0xf764>
   2112c:	b	20b88 <__assert_fail@plt+0xf1e8>
   21130:	bl	11778 <__ctype_b_loc@plt>
   21134:	mov	r1, r6
   21138:	mov	lr, #1
   2113c:	ldr	r3, [r0]
   21140:	add	r2, r3, #508	; 0x1fc
   21144:	add	r2, r2, #2
   21148:	sub	r3, r3, #2
   2114c:	ldrh	r0, [r3, #2]!
   21150:	tst	r0, #2048	; 0x800
   21154:	beq	21170 <__assert_fail@plt+0xf7d0>
   21158:	ldrb	r0, [r1]
   2115c:	and	r4, r0, #31
   21160:	asr	r0, r0, #5
   21164:	ldr	ip, [r5, r0, lsl #2]
   21168:	orr	ip, ip, lr, lsl r4
   2116c:	str	ip, [r5, r0, lsl #2]
   21170:	cmp	r2, r3
   21174:	add	r1, r1, #1
   21178:	bne	2114c <__assert_fail@plt+0xf7ac>
   2117c:	b	20b88 <__assert_fail@plt+0xf1e8>
   21180:	bl	11778 <__ctype_b_loc@plt>
   21184:	mov	r1, r6
   21188:	mov	lr, #1
   2118c:	ldr	r3, [r0]
   21190:	add	r0, r3, #508	; 0x1fc
   21194:	add	r0, r0, #2
   21198:	sub	r3, r3, #2
   2119c:	ldrh	r2, [r3, #2]!
   211a0:	tst	r2, #16384	; 0x4000
   211a4:	beq	211c0 <__assert_fail@plt+0xf820>
   211a8:	ldrb	r2, [r1]
   211ac:	and	r4, r2, #31
   211b0:	asr	r2, r2, #5
   211b4:	ldr	ip, [r5, r2, lsl #2]
   211b8:	orr	ip, ip, lr, lsl r4
   211bc:	str	ip, [r5, r2, lsl #2]
   211c0:	cmp	r0, r3
   211c4:	add	r1, r1, #1
   211c8:	bne	2119c <__assert_fail@plt+0xf7fc>
   211cc:	b	20b88 <__assert_fail@plt+0xf1e8>
   211d0:	bl	11778 <__ctype_b_loc@plt>
   211d4:	mov	r1, r6
   211d8:	mov	lr, #1
   211dc:	ldr	r3, [r0]
   211e0:	add	r0, r3, #508	; 0x1fc
   211e4:	add	r0, r0, #2
   211e8:	sub	r3, r3, #2
   211ec:	ldrsh	r2, [r3, #2]!
   211f0:	cmp	r2, #0
   211f4:	bge	21210 <__assert_fail@plt+0xf870>
   211f8:	ldrb	r2, [r1]
   211fc:	and	r4, r2, #31
   21200:	asr	r2, r2, #5
   21204:	ldr	ip, [r5, r2, lsl #2]
   21208:	orr	ip, ip, lr, lsl r4
   2120c:	str	ip, [r5, r2, lsl #2]
   21210:	cmp	r0, r3
   21214:	add	r1, r1, #1
   21218:	bne	211ec <__assert_fail@plt+0xf84c>
   2121c:	b	20b88 <__assert_fail@plt+0xf1e8>
   21220:	ldr	r1, [pc, #376]	; 213a0 <__assert_fail@plt+0xfa00>
   21224:	ldr	r0, [sp, #36]	; 0x24
   21228:	bl	11544 <strcmp@plt>
   2122c:	subs	r4, r0, #0
   21230:	bne	21278 <__assert_fail@plt+0xf8d8>
   21234:	cmp	r6, #0
   21238:	bne	21294 <__assert_fail@plt+0xf8f4>
   2123c:	bl	11778 <__ctype_b_loc@plt>
   21240:	mov	ip, #1
   21244:	ldr	r3, [r0]
   21248:	sub	r3, r3, #2
   2124c:	ldrh	r2, [r3, #2]!
   21250:	asr	r1, r4, #5
   21254:	and	r0, r4, #31
   21258:	tst	r2, #4
   2125c:	add	r4, r4, #1
   21260:	ldrne	r2, [r5, r1, lsl #2]
   21264:	orrne	r2, r2, ip, lsl r0
   21268:	strne	r2, [r5, r1, lsl #2]
   2126c:	cmp	r4, #256	; 0x100
   21270:	bne	2124c <__assert_fail@plt+0xf8ac>
   21274:	b	20b88 <__assert_fail@plt+0xf1e8>
   21278:	ldr	r1, [pc, #292]	; 213a4 <__assert_fail@plt+0xfa04>
   2127c:	ldr	r0, [sp, #36]	; 0x24
   21280:	bl	11544 <strcmp@plt>
   21284:	subs	r4, r0, #0
   21288:	beq	212e4 <__assert_fail@plt+0xf944>
   2128c:	mov	r0, #4
   21290:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21294:	bl	11778 <__ctype_b_loc@plt>
   21298:	mov	r1, r6
   2129c:	mov	lr, #1
   212a0:	ldr	r3, [r0]
   212a4:	add	r0, r3, #508	; 0x1fc
   212a8:	add	r0, r0, #2
   212ac:	sub	r3, r3, #2
   212b0:	ldrh	r2, [r3, #2]!
   212b4:	tst	r2, #4
   212b8:	beq	212d4 <__assert_fail@plt+0xf934>
   212bc:	ldrb	r2, [r1]
   212c0:	and	r4, r2, #31
   212c4:	asr	r2, r2, #5
   212c8:	ldr	ip, [r5, r2, lsl #2]
   212cc:	orr	ip, ip, lr, lsl r4
   212d0:	str	ip, [r5, r2, lsl #2]
   212d4:	cmp	r3, r0
   212d8:	add	r1, r1, #1
   212dc:	bne	212b0 <__assert_fail@plt+0xf910>
   212e0:	b	20b88 <__assert_fail@plt+0xf1e8>
   212e4:	cmp	r6, #0
   212e8:	bne	21328 <__assert_fail@plt+0xf988>
   212ec:	bl	11778 <__ctype_b_loc@plt>
   212f0:	mov	ip, #1
   212f4:	ldr	r3, [r0]
   212f8:	sub	r3, r3, #2
   212fc:	ldrh	r2, [r3, #2]!
   21300:	asr	r1, r4, #5
   21304:	and	r0, r4, #31
   21308:	tst	r2, #4096	; 0x1000
   2130c:	add	r4, r4, #1
   21310:	ldrne	r2, [r5, r1, lsl #2]
   21314:	orrne	r2, r2, ip, lsl r0
   21318:	strne	r2, [r5, r1, lsl #2]
   2131c:	cmp	r4, #256	; 0x100
   21320:	bne	212fc <__assert_fail@plt+0xf95c>
   21324:	b	20b88 <__assert_fail@plt+0xf1e8>
   21328:	bl	11778 <__ctype_b_loc@plt>
   2132c:	mov	r1, r6
   21330:	mov	lr, #1
   21334:	ldr	r3, [r0]
   21338:	add	r0, r3, #508	; 0x1fc
   2133c:	add	r0, r0, #2
   21340:	sub	r3, r3, #2
   21344:	ldrh	r2, [r3, #2]!
   21348:	tst	r2, #4096	; 0x1000
   2134c:	beq	21368 <__assert_fail@plt+0xf9c8>
   21350:	ldrb	r2, [r1]
   21354:	and	r4, r2, #31
   21358:	asr	r2, r2, #5
   2135c:	ldr	ip, [r5, r2, lsl #2]
   21360:	orr	ip, ip, lr, lsl r4
   21364:	str	ip, [r5, r2, lsl #2]
   21368:	cmp	r0, r3
   2136c:	add	r1, r1, #1
   21370:	bne	21344 <__assert_fail@plt+0xf9a4>
   21374:	b	20b88 <__assert_fail@plt+0xf1e8>
   21378:	andeq	sp, r2, r8, lsl r0
   2137c:	andeq	sp, r2, r0, lsl r0
   21380:	andeq	sp, r2, r8, lsr #32
   21384:	andeq	sp, r2, r0, lsr r0
   21388:	andeq	sp, r2, r0, lsr #32
   2138c:	andeq	sp, r2, r8, lsr r0
   21390:	andeq	sp, r2, r0, asr #32
   21394:	andeq	ip, r2, r4, ror #8
   21398:	andeq	sp, r2, r8, asr #32
   2139c:	andeq	sp, r2, r0, asr r0
   213a0:	andeq	sp, r2, r8, asr r0
   213a4:	andeq	sp, r2, r0, rrx
   213a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   213ac:	sub	sp, sp, #44	; 0x2c
   213b0:	mov	r6, r0
   213b4:	mov	fp, r1
   213b8:	mov	r9, #0
   213bc:	mov	r1, #1
   213c0:	mov	r0, #32
   213c4:	mov	sl, r2
   213c8:	mov	r5, r3
   213cc:	str	r9, [sp, #20]
   213d0:	ldrb	r8, [sp, #80]	; 0x50
   213d4:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   213d8:	subs	r4, r0, #0
   213dc:	beq	215b8 <__assert_fail@plt+0xfc18>
   213e0:	mov	r1, #1
   213e4:	mov	r0, #40	; 0x28
   213e8:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   213ec:	subs	r7, r0, #0
   213f0:	beq	215d4 <__assert_fail@plt+0xfc34>
   213f4:	ldrb	r2, [r7, #16]
   213f8:	and	r3, r8, #1
   213fc:	mov	r0, fp
   21400:	bic	r2, r2, #1
   21404:	orr	r3, r3, r2
   21408:	add	r2, sp, #20
   2140c:	strb	r3, [r7, #16]
   21410:	mov	r1, r4
   21414:	stm	sp, {r2, sl}
   21418:	add	r3, r7, #36	; 0x24
   2141c:	str	r9, [sp, #8]
   21420:	add	r2, r7, #12
   21424:	bl	20ab8 <__assert_fail@plt+0xf118>
   21428:	subs	sl, r0, #0
   2142c:	bne	215f0 <__assert_fail@plt+0xfc50>
   21430:	ldrb	r3, [r5]
   21434:	cmp	r3, #0
   21438:	movne	ip, #1
   2143c:	beq	21460 <__assert_fail@plt+0xfac0>
   21440:	asr	r1, r3, #5
   21444:	and	r0, r3, #31
   21448:	ldr	r2, [r4, r1, lsl #2]
   2144c:	ldrb	r3, [r5, #1]!
   21450:	orr	r2, r2, ip, lsl r0
   21454:	cmp	r3, #0
   21458:	str	r2, [r4, r1, lsl #2]
   2145c:	bne	21440 <__assert_fail@plt+0xfaa0>
   21460:	cmp	r8, #0
   21464:	bne	21558 <__assert_fail@plt+0xfbb8>
   21468:	ldr	r3, [r6, #92]	; 0x5c
   2146c:	cmp	r3, #1
   21470:	ble	2149c <__assert_fail@plt+0xfafc>
   21474:	ldr	r1, [r6, #60]	; 0x3c
   21478:	sub	r3, r4, #4
   2147c:	sub	r1, r1, #4
   21480:	add	ip, r4, #28
   21484:	ldr	r2, [r3, #4]
   21488:	ldr	r0, [r1, #4]!
   2148c:	and	r2, r2, r0
   21490:	str	r2, [r3, #4]!
   21494:	cmp	ip, r3
   21498:	bne	21484 <__assert_fail@plt+0xfae4>
   2149c:	add	r8, sp, #24
   214a0:	mov	r5, #0
   214a4:	add	sl, r6, #56	; 0x38
   214a8:	add	fp, r6, #64	; 0x40
   214ac:	str	r8, [sp]
   214b0:	mov	ip, #3
   214b4:	str	r5, [r8, #4]
   214b8:	mov	r3, r5
   214bc:	mov	r2, r5
   214c0:	mov	r0, sl
   214c4:	mov	r1, fp
   214c8:	str	r4, [sp, #24]
   214cc:	strb	ip, [sp, #28]
   214d0:	bl	1db54 <__assert_fail@plt+0xc1b4>
   214d4:	subs	r9, r0, #0
   214d8:	beq	21578 <__assert_fail@plt+0xfbd8>
   214dc:	ldr	r3, [r6, #92]	; 0x5c
   214e0:	cmp	r3, #1
   214e4:	ble	215a4 <__assert_fail@plt+0xfc04>
   214e8:	ldrb	r3, [r6, #88]	; 0x58
   214ec:	mov	ip, #6
   214f0:	str	r8, [sp]
   214f4:	orr	r3, r3, #2
   214f8:	strb	r3, [r6, #88]	; 0x58
   214fc:	mov	r2, r5
   21500:	mov	r3, r5
   21504:	mov	r1, fp
   21508:	mov	r0, sl
   2150c:	str	r7, [sp, #24]
   21510:	strb	ip, [sp, #28]
   21514:	bl	1db54 <__assert_fail@plt+0xc1b4>
   21518:	subs	r3, r0, #0
   2151c:	beq	21578 <__assert_fail@plt+0xfbd8>
   21520:	add	ip, sp, #32
   21524:	mov	r2, r9
   21528:	mov	lr, #10
   2152c:	mov	r1, fp
   21530:	mov	r0, sl
   21534:	str	ip, [sp]
   21538:	str	r5, [sp, #36]	; 0x24
   2153c:	str	r5, [sp, #32]
   21540:	strb	lr, [sp, #36]	; 0x24
   21544:	bl	1db54 <__assert_fail@plt+0xc1b4>
   21548:	mov	r9, r0
   2154c:	mov	r0, r9
   21550:	add	sp, sp, #44	; 0x2c
   21554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21558:	sub	r3, r4, #4
   2155c:	add	r1, r4, #28
   21560:	ldr	r2, [r3, #4]
   21564:	mvn	r2, r2
   21568:	str	r2, [r3, #4]!
   2156c:	cmp	r1, r3
   21570:	bne	21560 <__assert_fail@plt+0xfbc0>
   21574:	b	21468 <__assert_fail@plt+0xfac8>
   21578:	mov	r0, r4
   2157c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   21580:	mov	r0, r7
   21584:	bl	1cb20 <__assert_fail@plt+0xb180>
   21588:	ldr	r2, [sp, #84]	; 0x54
   2158c:	mov	r9, #0
   21590:	mov	r3, #12
   21594:	mov	r0, r9
   21598:	str	r3, [r2]
   2159c:	add	sp, sp, #44	; 0x2c
   215a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215a4:	mov	r0, r7
   215a8:	bl	1cb20 <__assert_fail@plt+0xb180>
   215ac:	mov	r0, r9
   215b0:	add	sp, sp, #44	; 0x2c
   215b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215b8:	ldr	r2, [sp, #84]	; 0x54
   215bc:	mov	r3, #12
   215c0:	mov	r9, r4
   215c4:	mov	r0, r9
   215c8:	str	r3, [r2]
   215cc:	add	sp, sp, #44	; 0x2c
   215d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215d4:	mov	r0, r4
   215d8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   215dc:	ldr	r2, [sp, #84]	; 0x54
   215e0:	mov	r3, #12
   215e4:	mov	r9, r7
   215e8:	str	r3, [r2]
   215ec:	b	2154c <__assert_fail@plt+0xfbac>
   215f0:	mov	r0, r4
   215f4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   215f8:	mov	r0, r7
   215fc:	bl	1cb20 <__assert_fail@plt+0xb180>
   21600:	ldr	r3, [sp, #84]	; 0x54
   21604:	str	sl, [r3]
   21608:	b	2154c <__assert_fail@plt+0xfbac>
   2160c:	ldr	ip, [r0]
   21610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21614:	sub	sp, sp, #308	; 0x134
   21618:	str	ip, [sp, #12]
   2161c:	ldr	ip, [ip, #92]	; 0x5c
   21620:	cmp	ip, #1
   21624:	ldr	ip, [r1]
   21628:	ldreq	r6, [r0, #12]
   2162c:	movne	r6, #0
   21630:	lsreq	r6, r6, #22
   21634:	andeq	r6, r6, #1
   21638:	cmp	ip, #0
   2163c:	ble	219b8 <__assert_fail@plt+0x10018>
   21640:	mov	r7, r3
   21644:	mov	r3, #0
   21648:	str	r2, [sp, #20]
   2164c:	str	r1, [sp, #24]
   21650:	str	r0, [sp, #28]
   21654:	str	r3, [sp, #8]
   21658:	mov	r5, #1
   2165c:	b	21698 <__assert_fail@plt+0xfcf8>
   21660:	cmp	r4, #3
   21664:	beq	217d8 <__assert_fail@plt+0xfe38>
   21668:	cmp	r4, #6
   2166c:	beq	21858 <__assert_fail@plt+0xfeb8>
   21670:	and	r3, r4, #253	; 0xfd
   21674:	cmp	r3, #5
   21678:	beq	219fc <__assert_fail@plt+0x1005c>
   2167c:	cmp	r4, #2
   21680:	beq	21998 <__assert_fail@plt+0xfff8>
   21684:	ldr	r3, [sp, #8]
   21688:	add	r3, r3, #1
   2168c:	cmp	r3, ip
   21690:	str	r3, [sp, #8]
   21694:	bge	219b8 <__assert_fail@plt+0x10018>
   21698:	ldr	r3, [sp, #20]
   2169c:	ldr	r1, [sp, #8]
   216a0:	ldr	r2, [r3]
   216a4:	ldr	r3, [sp, #12]
   216a8:	ldr	r8, [r2, r1, lsl #2]
   216ac:	ldr	r3, [r3]
   216b0:	lsl	r2, r8, #3
   216b4:	str	r2, [sp, #16]
   216b8:	add	r2, r3, r2
   216bc:	ldrb	r4, [r2, #4]
   216c0:	cmp	r4, #1
   216c4:	bne	21660 <__assert_fail@plt+0xfcc0>
   216c8:	ldrb	fp, [r3, r8, lsl #3]
   216cc:	cmp	r6, #0
   216d0:	strb	r4, [r7, fp]
   216d4:	beq	216e8 <__assert_fail@plt+0xfd48>
   216d8:	bl	11748 <__ctype_tolower_loc@plt>
   216dc:	ldr	r3, [r0]
   216e0:	ldr	r3, [r3, fp, lsl #2]
   216e4:	strb	r4, [r7, r3]
   216e8:	ldr	r3, [sp, #28]
   216ec:	ldr	r3, [r3, #12]
   216f0:	tst	r3, #4194304	; 0x400000
   216f4:	beq	217cc <__assert_fail@plt+0xfe2c>
   216f8:	ldr	r3, [sp, #12]
   216fc:	ldr	r3, [r3, #92]	; 0x5c
   21700:	cmp	r3, #1
   21704:	ble	217cc <__assert_fail@plt+0xfe2c>
   21708:	ldr	r0, [sp, #12]
   2170c:	add	r1, r8, #1
   21710:	ldr	r3, [r0]
   21714:	ldrb	r2, [r3, r8, lsl #3]
   21718:	strb	r2, [sp, #48]	; 0x30
   2171c:	ldr	r2, [r0, #8]
   21720:	cmp	r2, r1
   21724:	bls	219f4 <__assert_fail@plt+0x10054>
   21728:	ldr	ip, [sp, #16]
   2172c:	ldr	lr, [pc, #744]	; 21a1c <__assert_fail@plt+0x1007c>
   21730:	add	r2, ip, #8
   21734:	add	r3, r3, r2
   21738:	ldr	r2, [r3, #4]
   2173c:	bic	r2, r2, #-16777216	; 0xff000000
   21740:	bic	r2, r2, #14614528	; 0xdf0000
   21744:	bic	r2, r2, #65280	; 0xff00
   21748:	cmp	r2, lr
   2174c:	bne	219f4 <__assert_fail@plt+0x10054>
   21750:	add	r9, ip, #16
   21754:	add	r4, sp, #49	; 0x31
   21758:	b	21784 <__assert_fail@plt+0xfde4>
   2175c:	ldr	r3, [r0]
   21760:	ldr	ip, [pc, #692]	; 21a1c <__assert_fail@plt+0x1007c>
   21764:	add	r3, r3, r9
   21768:	add	r9, r9, #8
   2176c:	ldr	r2, [r3, #4]
   21770:	bic	r2, r2, #-16777216	; 0xff000000
   21774:	bic	r2, r2, #14614528	; 0xdf0000
   21778:	bic	r2, r2, #65280	; 0xff00
   2177c:	cmp	r2, ip
   21780:	bne	2179c <__assert_fail@plt+0xfdfc>
   21784:	ldrb	r3, [r3]
   21788:	add	r1, r1, #1
   2178c:	strb	r3, [r4], #1
   21790:	ldr	r3, [r0, #8]
   21794:	cmp	r1, r3
   21798:	bcc	2175c <__assert_fail@plt+0xfdbc>
   2179c:	add	r3, sp, #48	; 0x30
   217a0:	sub	r4, r4, r3
   217a4:	mov	ip, #0
   217a8:	mov	r2, r4
   217ac:	add	r3, sp, #40	; 0x28
   217b0:	add	r1, sp, #48	; 0x30
   217b4:	add	r0, sp, #36	; 0x24
   217b8:	str	ip, [sp, #40]	; 0x28
   217bc:	str	ip, [sp, #44]	; 0x2c
   217c0:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   217c4:	cmp	r4, r0
   217c8:	beq	219c0 <__assert_fail@plt+0x10020>
   217cc:	ldr	r3, [sp, #24]
   217d0:	ldr	ip, [r3]
   217d4:	b	21684 <__assert_fail@plt+0xfce4>
   217d8:	mov	r8, #0
   217dc:	str	r7, [sp, #4]
   217e0:	ldr	r2, [sp, #16]
   217e4:	ldr	r9, [sp, #4]
   217e8:	lsl	sl, r8, #5
   217ec:	ldr	r2, [r3, r2]
   217f0:	mov	r4, #0
   217f4:	ldr	fp, [r2, r8]
   217f8:	lsr	r3, fp, r4
   217fc:	tst	r3, #1
   21800:	add	r4, r4, #1
   21804:	beq	21824 <__assert_fail@plt+0xfe84>
   21808:	cmp	r6, #0
   2180c:	strb	r5, [r9]
   21810:	beq	21824 <__assert_fail@plt+0xfe84>
   21814:	bl	11748 <__ctype_tolower_loc@plt>
   21818:	ldr	r3, [r0]
   2181c:	ldr	r3, [r3, sl]
   21820:	strb	r5, [r7, r3]
   21824:	cmp	r4, #32
   21828:	add	r9, r9, #1
   2182c:	add	sl, sl, #4
   21830:	bne	217f8 <__assert_fail@plt+0xfe58>
   21834:	ldr	r3, [sp, #4]
   21838:	add	r8, r8, #4
   2183c:	add	r3, r3, #32
   21840:	cmp	r8, #32
   21844:	str	r3, [sp, #4]
   21848:	beq	217cc <__assert_fail@plt+0xfe2c>
   2184c:	ldr	r3, [sp, #12]
   21850:	ldr	r3, [r3]
   21854:	b	217e0 <__assert_fail@plt+0xfe40>
   21858:	ldr	r3, [sp, #12]
   2185c:	ldr	r8, [r2]
   21860:	ldr	r3, [r3, #92]	; 0x5c
   21864:	cmp	r3, #1
   21868:	ble	21890 <__assert_fail@plt+0xfef0>
   2186c:	ldr	r3, [r8, #36]	; 0x24
   21870:	cmp	r3, #0
   21874:	bne	21950 <__assert_fail@plt+0xffb0>
   21878:	ldrb	r3, [r8, #16]
   2187c:	tst	r3, #1
   21880:	bne	21950 <__assert_fail@plt+0xffb0>
   21884:	ldr	r3, [r8, #32]
   21888:	cmp	r3, #0
   2188c:	bne	21950 <__assert_fail@plt+0xffb0>
   21890:	ldr	r3, [r8, #20]
   21894:	cmp	r3, #0
   21898:	ble	21684 <__assert_fail@plt+0xfce4>
   2189c:	ldr	sl, [sp, #12]
   218a0:	ldr	r9, [sp, #28]
   218a4:	mov	r4, #0
   218a8:	mov	r3, #0
   218ac:	str	r3, [sp, #40]	; 0x28
   218b0:	str	r3, [sp, #44]	; 0x2c
   218b4:	ldr	r3, [r8]
   218b8:	add	r2, sp, #40	; 0x28
   218bc:	add	r0, sp, #48	; 0x30
   218c0:	ldr	r1, [r3, r4, lsl #2]
   218c4:	bl	1152c <wcrtomb@plt>
   218c8:	lsl	r2, r4, #2
   218cc:	add	r4, r4, #1
   218d0:	cmn	r0, #1
   218d4:	beq	21900 <__assert_fail@plt+0xff60>
   218d8:	ldrb	fp, [sp, #48]	; 0x30
   218dc:	cmp	r6, #0
   218e0:	strb	r5, [r7, fp]
   218e4:	beq	21900 <__assert_fail@plt+0xff60>
   218e8:	str	r2, [sp, #4]
   218ec:	bl	11748 <__ctype_tolower_loc@plt>
   218f0:	ldr	r2, [sp, #4]
   218f4:	ldr	r3, [r0]
   218f8:	ldr	r3, [r3, fp, lsl #2]
   218fc:	strb	r5, [r7, r3]
   21900:	ldr	r3, [r9, #12]
   21904:	tst	r3, #4194304	; 0x400000
   21908:	beq	21940 <__assert_fail@plt+0xffa0>
   2190c:	ldr	r3, [sl, #92]	; 0x5c
   21910:	cmp	r3, #1
   21914:	ble	21940 <__assert_fail@plt+0xffa0>
   21918:	ldr	r3, [r8]
   2191c:	ldr	r0, [r3, r2]
   21920:	bl	115f8 <towlower@plt>
   21924:	add	r2, sp, #40	; 0x28
   21928:	mov	r1, r0
   2192c:	add	r0, sp, #48	; 0x30
   21930:	bl	1152c <wcrtomb@plt>
   21934:	cmn	r0, #1
   21938:	ldrbne	r3, [sp, #48]	; 0x30
   2193c:	strbne	r5, [r7, r3]
   21940:	ldr	r3, [r8, #20]
   21944:	cmp	r4, r3
   21948:	blt	218a8 <__assert_fail@plt+0xff08>
   2194c:	b	217cc <__assert_fail@plt+0xfe2c>
   21950:	mov	r3, #0
   21954:	strb	r3, [sp, #40]	; 0x28
   21958:	mov	r0, #0
   2195c:	add	r3, sp, #48	; 0x30
   21960:	mov	r2, r5
   21964:	add	r1, sp, #40	; 0x28
   21968:	str	r0, [sp, #48]	; 0x30
   2196c:	str	r0, [sp, #52]	; 0x34
   21970:	bl	1ba68 <__assert_fail@plt+0xa0c8>
   21974:	ldrb	r3, [sp, #40]	; 0x28
   21978:	cmn	r0, #2
   2197c:	strbeq	r5, [r7, r3]
   21980:	add	r3, r3, #1
   21984:	uxtb	r3, r3
   21988:	cmp	r3, #0
   2198c:	strb	r3, [sp, #40]	; 0x28
   21990:	bne	21958 <__assert_fail@plt+0xffb8>
   21994:	b	217cc <__assert_fail@plt+0xfe2c>
   21998:	mov	r0, r7
   2199c:	mov	r2, #256	; 0x100
   219a0:	mov	r1, #1
   219a4:	bl	11814 <memset@plt>
   219a8:	ldr	r2, [sp, #28]
   219ac:	ldrb	r3, [r2, #28]
   219b0:	orr	r3, r3, #1
   219b4:	strb	r3, [r2, #28]
   219b8:	add	sp, sp, #308	; 0x134
   219bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   219c0:	ldr	r0, [sp, #36]	; 0x24
   219c4:	bl	115f8 <towlower@plt>
   219c8:	add	r2, sp, #40	; 0x28
   219cc:	mov	r1, r0
   219d0:	add	r0, sp, #48	; 0x30
   219d4:	bl	1152c <wcrtomb@plt>
   219d8:	cmn	r0, #1
   219dc:	beq	217cc <__assert_fail@plt+0xfe2c>
   219e0:	ldrb	r3, [sp, #48]	; 0x30
   219e4:	strb	r5, [r7, r3]
   219e8:	ldr	r3, [sp, #24]
   219ec:	ldr	ip, [r3]
   219f0:	b	21684 <__assert_fail@plt+0xfce4>
   219f4:	add	r4, sp, #49	; 0x31
   219f8:	b	2179c <__assert_fail@plt+0xfdfc>
   219fc:	mov	r0, r7
   21a00:	mov	r2, #256	; 0x100
   21a04:	mov	r1, #1
   21a08:	bl	11814 <memset@plt>
   21a0c:	cmp	r4, #2
   21a10:	beq	219a8 <__assert_fail@plt+0x10008>
   21a14:	add	sp, sp, #308	; 0x134
   21a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a1c:	eoreq	r0, r0, r1
   21a20:	add	ip, r0, r2, lsl #3
   21a24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21a28:	ldrb	r6, [ip, #4]
   21a2c:	ldr	r7, [sp, #32]
   21a30:	cmp	r6, #7
   21a34:	beq	21b14 <__assert_fail@plt+0x10174>
   21a38:	ldr	ip, [r3, #80]	; 0x50
   21a3c:	cmp	ip, #1
   21a40:	beq	21b28 <__assert_fail@plt+0x10188>
   21a44:	ldr	r5, [r3, #28]
   21a48:	add	lr, r7, #1
   21a4c:	cmp	r5, lr
   21a50:	ble	21b28 <__assert_fail@plt+0x10188>
   21a54:	ldr	r8, [r3, #8]
   21a58:	add	ip, r8, lr, lsl #2
   21a5c:	ldr	lr, [r8, lr, lsl #2]
   21a60:	cmn	lr, #1
   21a64:	subeq	r5, r5, r7
   21a68:	moveq	r4, #1
   21a6c:	beq	21a80 <__assert_fail@plt+0x100e0>
   21a70:	b	21b28 <__assert_fail@plt+0x10188>
   21a74:	ldr	lr, [ip, #4]!
   21a78:	cmn	lr, #1
   21a7c:	bne	21a8c <__assert_fail@plt+0x100ec>
   21a80:	add	r4, r4, #1
   21a84:	cmp	r4, r5
   21a88:	bne	21a74 <__assert_fail@plt+0x100d4>
   21a8c:	cmp	r6, #5
   21a90:	beq	21b34 <__assert_fail@plt+0x10194>
   21a94:	cmp	r4, #1
   21a98:	sub	r6, r6, #6
   21a9c:	clz	r6, r6
   21aa0:	lsr	r6, r6, #5
   21aa4:	moveq	r6, #0
   21aa8:	cmp	r6, #0
   21aac:	beq	21b28 <__assert_fail@plt+0x10188>
   21ab0:	ldr	r9, [r0, r2, lsl #3]
   21ab4:	ldr	ip, [r9, #32]
   21ab8:	cmp	ip, #0
   21abc:	beq	21b70 <__assert_fail@plt+0x101d0>
   21ac0:	ldr	r0, [r9, #20]
   21ac4:	cmp	r0, #0
   21ac8:	ldr	r5, [r8, r7, lsl #2]
   21acc:	ble	21b00 <__assert_fail@plt+0x10160>
   21ad0:	ldr	r2, [r9]
   21ad4:	ldr	r3, [r2]
   21ad8:	cmp	r5, r3
   21adc:	movne	r3, #0
   21ae0:	bne	21af4 <__assert_fail@plt+0x10154>
   21ae4:	b	21bc0 <__assert_fail@plt+0x10220>
   21ae8:	ldr	r1, [r2, #4]!
   21aec:	cmp	r5, r1
   21af0:	beq	21bc0 <__assert_fail@plt+0x10220>
   21af4:	add	r3, r3, #1
   21af8:	cmp	r3, r0
   21afc:	bne	21ae8 <__assert_fail@plt+0x10148>
   21b00:	ldr	r3, [r9, #36]	; 0x24
   21b04:	cmp	r3, #0
   21b08:	ble	21c04 <__assert_fail@plt+0x10264>
   21b0c:	mov	r6, #0
   21b10:	b	21ba4 <__assert_fail@plt+0x10204>
   21b14:	ldr	r2, [r3, #4]
   21b18:	add	r0, r2, r7
   21b1c:	ldrb	r1, [r2, r7]
   21b20:	cmp	r1, #193	; 0xc1
   21b24:	bhi	21bd0 <__assert_fail@plt+0x10230>
   21b28:	mov	r4, #0
   21b2c:	mov	r0, r4
   21b30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21b34:	ldr	r2, [r1]
   21b38:	tst	r2, #64	; 0x40
   21b3c:	beq	21b5c <__assert_fail@plt+0x101bc>
   21b40:	tst	r2, #128	; 0x80
   21b44:	beq	21b2c <__assert_fail@plt+0x1018c>
   21b48:	ldr	r3, [r3, #4]
   21b4c:	ldrb	r3, [r3, r7]
   21b50:	cmp	r3, #0
   21b54:	beq	21b28 <__assert_fail@plt+0x10188>
   21b58:	b	21b2c <__assert_fail@plt+0x1018c>
   21b5c:	ldr	r1, [r3, #4]
   21b60:	ldrb	r1, [r1, r7]
   21b64:	cmp	r1, #10
   21b68:	bne	21b40 <__assert_fail@plt+0x101a0>
   21b6c:	b	21b28 <__assert_fail@plt+0x10188>
   21b70:	ldr	r3, [r9, #36]	; 0x24
   21b74:	ldr	r0, [r9, #20]
   21b78:	cmp	r3, #0
   21b7c:	bne	21ac4 <__assert_fail@plt+0x10124>
   21b80:	cmp	r0, #0
   21b84:	bne	21ac4 <__assert_fail@plt+0x10124>
   21b88:	ldrb	r3, [r9, #16]
   21b8c:	tst	r3, #1
   21b90:	bne	21b2c <__assert_fail@plt+0x1018c>
   21b94:	b	21b28 <__assert_fail@plt+0x10188>
   21b98:	ldr	r3, [r9, #36]	; 0x24
   21b9c:	cmp	r6, r3
   21ba0:	bge	21c00 <__assert_fail@plt+0x10260>
   21ba4:	ldr	r3, [r9, #12]
   21ba8:	mov	r0, r5
   21bac:	ldr	r1, [r3, r6, lsl #2]
   21bb0:	bl	11538 <iswctype@plt>
   21bb4:	add	r6, r6, #1
   21bb8:	cmp	r0, #0
   21bbc:	beq	21b98 <__assert_fail@plt+0x101f8>
   21bc0:	ldrb	r3, [r9, #16]
   21bc4:	tst	r3, #1
   21bc8:	beq	21b2c <__assert_fail@plt+0x1018c>
   21bcc:	b	21b28 <__assert_fail@plt+0x10188>
   21bd0:	ldr	ip, [r3, #48]	; 0x30
   21bd4:	add	r3, r7, #1
   21bd8:	cmp	r3, ip
   21bdc:	bge	21b28 <__assert_fail@plt+0x10188>
   21be0:	cmp	r1, #223	; 0xdf
   21be4:	ldrb	r3, [r0, #1]
   21be8:	bhi	21c48 <__assert_fail@plt+0x102a8>
   21bec:	eor	r3, r3, #128	; 0x80
   21bf0:	cmp	r3, #63	; 0x3f
   21bf4:	movls	r4, #2
   21bf8:	bls	21b2c <__assert_fail@plt+0x1018c>
   21bfc:	b	21b28 <__assert_fail@plt+0x10188>
   21c00:	ldr	ip, [r9, #32]
   21c04:	cmp	ip, #0
   21c08:	ble	21b88 <__assert_fail@plt+0x101e8>
   21c0c:	ldr	r2, [r9, #4]
   21c10:	mov	r3, #0
   21c14:	sub	r2, r2, #4
   21c18:	b	21c28 <__assert_fail@plt+0x10288>
   21c1c:	add	r3, r3, #1
   21c20:	cmp	r3, ip
   21c24:	beq	21b88 <__assert_fail@plt+0x101e8>
   21c28:	ldr	r1, [r2, #4]!
   21c2c:	cmp	r5, r1
   21c30:	bcc	21c1c <__assert_fail@plt+0x1027c>
   21c34:	ldr	r1, [r9, #8]
   21c38:	ldr	r1, [r1, r3, lsl #2]
   21c3c:	cmp	r5, r1
   21c40:	bhi	21c1c <__assert_fail@plt+0x1027c>
   21c44:	b	21bc0 <__assert_fail@plt+0x10220>
   21c48:	cmp	r1, #239	; 0xef
   21c4c:	bhi	21c98 <__assert_fail@plt+0x102f8>
   21c50:	cmp	r3, #159	; 0x9f
   21c54:	cmpls	r1, #224	; 0xe0
   21c58:	movne	r4, #3
   21c5c:	beq	21b28 <__assert_fail@plt+0x10188>
   21c60:	add	r3, r7, r4
   21c64:	cmp	ip, r3
   21c68:	blt	21b28 <__assert_fail@plt+0x10188>
   21c6c:	sub	r3, r7, #1
   21c70:	add	r3, r3, r4
   21c74:	add	r2, r2, r3
   21c78:	b	21c84 <__assert_fail@plt+0x102e4>
   21c7c:	cmp	r2, r0
   21c80:	beq	21b2c <__assert_fail@plt+0x1018c>
   21c84:	ldrb	r3, [r0, #1]!
   21c88:	eor	r3, r3, #128	; 0x80
   21c8c:	cmp	r3, #63	; 0x3f
   21c90:	bls	21c7c <__assert_fail@plt+0x102dc>
   21c94:	b	21b28 <__assert_fail@plt+0x10188>
   21c98:	cmp	r1, #247	; 0xf7
   21c9c:	bhi	21cb4 <__assert_fail@plt+0x10314>
   21ca0:	cmp	r3, #143	; 0x8f
   21ca4:	cmpls	r1, #240	; 0xf0
   21ca8:	movne	r4, #4
   21cac:	bne	21c60 <__assert_fail@plt+0x102c0>
   21cb0:	b	21b28 <__assert_fail@plt+0x10188>
   21cb4:	cmp	r1, #251	; 0xfb
   21cb8:	bhi	21cd0 <__assert_fail@plt+0x10330>
   21cbc:	cmp	r3, #135	; 0x87
   21cc0:	cmpls	r1, #248	; 0xf8
   21cc4:	movne	r4, #5
   21cc8:	bne	21c60 <__assert_fail@plt+0x102c0>
   21ccc:	b	21b28 <__assert_fail@plt+0x10188>
   21cd0:	cmp	r1, #253	; 0xfd
   21cd4:	bhi	21b28 <__assert_fail@plt+0x10188>
   21cd8:	cmp	r3, #131	; 0x83
   21cdc:	cmpls	r1, #252	; 0xfc
   21ce0:	beq	21b28 <__assert_fail@plt+0x10188>
   21ce4:	mov	r4, #6
   21ce8:	b	21c60 <__assert_fail@plt+0x102c0>
   21cec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cf0:	mov	r5, r0
   21cf4:	ldr	r0, [r0, #84]	; 0x54
   21cf8:	sub	sp, sp, #84	; 0x54
   21cfc:	mov	ip, r1
   21d00:	str	r0, [sp, #28]
   21d04:	ldr	r0, [r0]
   21d08:	mov	r8, r2
   21d0c:	str	r1, [sp, #36]	; 0x24
   21d10:	ldr	r2, [sp, #124]	; 0x7c
   21d14:	ldr	r1, [r5, #120]	; 0x78
   21d18:	ldr	r4, [ip, #4]
   21d1c:	mov	r7, #0
   21d20:	add	r2, r2, r1
   21d24:	mov	r6, r3
   21d28:	str	r7, [sp, #48]	; 0x30
   21d2c:	ldr	r3, [r0, r8, lsl #3]
   21d30:	cmp	r2, r4
   21d34:	str	r3, [sp, #32]
   21d38:	bge	22240 <__assert_fail@plt+0x108a0>
   21d3c:	ldr	r3, [sp, #36]	; 0x24
   21d40:	ldr	r4, [r3]
   21d44:	cmp	r4, #0
   21d48:	beq	22114 <__assert_fail@plt+0x10774>
   21d4c:	ldr	r9, [r3, #8]
   21d50:	ldr	r3, [r5, #100]	; 0x64
   21d54:	ldr	r2, [r5, #88]	; 0x58
   21d58:	str	r3, [sp, #40]	; 0x28
   21d5c:	ldr	r3, [r5, #40]	; 0x28
   21d60:	str	r9, [r5, #100]	; 0x64
   21d64:	str	r4, [r5, #40]	; 0x28
   21d68:	sub	r1, r4, #1
   21d6c:	mov	r0, r5
   21d70:	str	r3, [sp, #44]	; 0x2c
   21d74:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   21d78:	cmp	r4, r6
   21d7c:	mov	r7, r0
   21d80:	beq	22148 <__assert_fail@plt+0x107a8>
   21d84:	ldr	r8, [r9, r4, lsl #2]
   21d88:	cmp	r8, #0
   21d8c:	beq	22294 <__assert_fail@plt+0x108f4>
   21d90:	ldrb	r3, [r8, #52]	; 0x34
   21d94:	add	fp, sp, #56	; 0x38
   21d98:	ands	r2, r3, #64	; 0x40
   21d9c:	streq	r2, [sp, #56]	; 0x38
   21da0:	streq	r2, [fp, #4]
   21da4:	streq	r2, [fp, #8]
   21da8:	bne	22220 <__assert_fail@plt+0x10880>
   21dac:	tst	r3, #64	; 0x40
   21db0:	beq	21e0c <__assert_fail@plt+0x1046c>
   21db4:	ldr	r3, [sp, #60]	; 0x3c
   21db8:	cmp	r3, #0
   21dbc:	beq	21de8 <__assert_fail@plt+0x10448>
   21dc0:	ldr	r3, [sp, #128]	; 0x80
   21dc4:	mov	r2, r4
   21dc8:	str	r3, [sp]
   21dcc:	mov	r1, fp
   21dd0:	ldr	r3, [sp, #32]
   21dd4:	mov	r0, r5
   21dd8:	bl	1f0dc <__assert_fail@plt+0xd73c>
   21ddc:	cmp	r0, #0
   21de0:	str	r0, [sp, #48]	; 0x30
   21de4:	bne	221b0 <__assert_fail@plt+0x10810>
   21de8:	mov	r3, r7
   21dec:	mov	r2, fp
   21df0:	ldr	r1, [sp, #28]
   21df4:	add	r0, sp, #48	; 0x30
   21df8:	bl	1e190 <__assert_fail@plt+0xc7f0>
   21dfc:	subs	r8, r0, #0
   21e00:	beq	222a8 <__assert_fail@plt+0x10908>
   21e04:	ldr	r3, [r5, #100]	; 0x64
   21e08:	str	r8, [r3, r4, lsl #2]
   21e0c:	ldr	r3, [sp, #124]	; 0x7c
   21e10:	cmp	r3, r4
   21e14:	ble	220c0 <__assert_fail@plt+0x10720>
   21e18:	ldr	r3, [r5, #120]	; 0x78
   21e1c:	cmp	r3, #0
   21e20:	blt	220c0 <__assert_fail@plt+0x10720>
   21e24:	mov	r3, #0
   21e28:	add	r4, r4, #1
   21e2c:	str	r3, [sp, #24]
   21e30:	ldr	r3, [r5, #100]	; 0x64
   21e34:	lsl	r2, r4, #2
   21e38:	str	r2, [sp, #12]
   21e3c:	str	r4, [sp, #8]
   21e40:	ldr	r2, [sp, #12]
   21e44:	ldr	r1, [r3, r2]
   21e48:	mov	r3, #0
   21e4c:	str	r3, [sp, #60]	; 0x3c
   21e50:	cmp	r1, r3
   21e54:	ldr	r3, [sp, #8]
   21e58:	sub	sl, r3, #1
   21e5c:	beq	221d4 <__assert_fail@plt+0x10834>
   21e60:	add	r1, r1, #4
   21e64:	mov	r0, fp
   21e68:	bl	1ebe0 <__assert_fail@plt+0xd240>
   21e6c:	cmp	r0, #0
   21e70:	str	r0, [sp, #48]	; 0x30
   21e74:	bne	221b0 <__assert_fail@plt+0x10810>
   21e78:	cmp	r8, #0
   21e7c:	beq	21ff4 <__assert_fail@plt+0x10654>
   21e80:	ldr	r3, [r8, #20]
   21e84:	mov	r2, #0
   21e88:	cmp	r3, r2
   21e8c:	str	r2, [sp, #52]	; 0x34
   21e90:	str	r2, [sp, #68]	; 0x44
   21e94:	str	r2, [sp, #72]	; 0x48
   21e98:	str	r2, [sp, #76]	; 0x4c
   21e9c:	ldr	r9, [r5, #84]	; 0x54
   21ea0:	ble	222c0 <__assert_fail@plt+0x10920>
   21ea4:	ldr	r3, [r8, #24]
   21ea8:	mov	r4, #0
   21eac:	ldr	r6, [r3]
   21eb0:	mov	r3, r9
   21eb4:	ldr	r0, [r3], #128	; 0x80
   21eb8:	lsl	r7, r6, #3
   21ebc:	str	r3, [sp, #16]
   21ec0:	add	r3, r0, r7
   21ec4:	b	21f20 <__assert_fail@plt+0x10580>
   21ec8:	add	r1, r0, r7
   21ecc:	mov	r2, sl
   21ed0:	mov	r0, r5
   21ed4:	bl	1ff70 <__assert_fail@plt+0xe5d0>
   21ed8:	cmp	r0, #0
   21edc:	beq	21efc <__assert_fail@plt+0x1055c>
   21ee0:	lsl	r7, r6, #2
   21ee4:	ldr	r2, [r9, #12]
   21ee8:	mov	r0, fp
   21eec:	ldr	r1, [r2, r7]
   21ef0:	bl	1d0e4 <__assert_fail@plt+0xb744>
   21ef4:	cmp	r0, #0
   21ef8:	beq	221a0 <__assert_fail@plt+0x10800>
   21efc:	ldr	r3, [r8, #20]
   21f00:	add	r4, r4, #1
   21f04:	cmp	r4, r3
   21f08:	bge	221e4 <__assert_fail@plt+0x10844>
   21f0c:	ldr	r3, [r8, #24]
   21f10:	ldr	r0, [r9]
   21f14:	ldr	r6, [r3, r4, lsl #2]
   21f18:	lsl	r7, r6, #3
   21f1c:	add	r3, r0, r7
   21f20:	ldrb	r3, [r3, #6]
   21f24:	tst	r3, #16
   21f28:	beq	21ec8 <__assert_fail@plt+0x10528>
   21f2c:	str	sl, [sp]
   21f30:	mov	r3, r5
   21f34:	mov	r2, r6
   21f38:	ldr	r1, [sp, #16]
   21f3c:	bl	21a20 <__assert_fail@plt+0x10080>
   21f40:	cmp	r0, #1
   21f44:	ble	221c4 <__assert_fail@plt+0x10824>
   21f48:	add	r2, r0, sl
   21f4c:	ldr	r3, [r5, #100]	; 0x64
   21f50:	mov	r1, r2
   21f54:	str	r2, [sp, #20]
   21f58:	ldr	r1, [r3, r1, lsl #2]
   21f5c:	ldr	r2, [r9, #12]
   21f60:	mov	r3, #0
   21f64:	cmp	r1, #0
   21f68:	lsl	r7, r6, #2
   21f6c:	ldr	r6, [r2, r6, lsl #2]
   21f70:	str	r3, [sp, #72]	; 0x48
   21f74:	beq	21f90 <__assert_fail@plt+0x105f0>
   21f78:	add	r1, r1, #4
   21f7c:	add	r0, sp, #68	; 0x44
   21f80:	bl	1ebe0 <__assert_fail@plt+0xd240>
   21f84:	cmp	r0, #0
   21f88:	str	r0, [sp, #52]	; 0x34
   21f8c:	bne	21fdc <__assert_fail@plt+0x1063c>
   21f90:	mov	r1, r6
   21f94:	add	r0, sp, #68	; 0x44
   21f98:	bl	1d0e4 <__assert_fail@plt+0xb744>
   21f9c:	cmp	r0, #0
   21fa0:	beq	221a0 <__assert_fail@plt+0x10800>
   21fa4:	add	r2, sp, #68	; 0x44
   21fa8:	mov	r1, r9
   21fac:	add	r0, sp, #52	; 0x34
   21fb0:	ldr	r6, [r5, #100]	; 0x64
   21fb4:	bl	1e4b8 <__assert_fail@plt+0xcb18>
   21fb8:	ldr	r2, [r5, #100]	; 0x64
   21fbc:	ldr	r3, [sp, #20]
   21fc0:	str	r0, [r6, r3, lsl #2]
   21fc4:	ldr	r2, [r2, r3, lsl #2]
   21fc8:	cmp	r2, #0
   21fcc:	bne	21ee4 <__assert_fail@plt+0x10544>
   21fd0:	ldr	r2, [sp, #52]	; 0x34
   21fd4:	cmp	r2, #0
   21fd8:	beq	21ee4 <__assert_fail@plt+0x10544>
   21fdc:	ldr	r0, [sp, #76]	; 0x4c
   21fe0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   21fe4:	ldr	r3, [sp, #52]	; 0x34
   21fe8:	cmp	r3, #0
   21fec:	str	r3, [sp, #48]	; 0x30
   21ff0:	bne	221b0 <__assert_fail@plt+0x10810>
   21ff4:	ldr	r3, [sp, #60]	; 0x3c
   21ff8:	ldr	r4, [sp, #8]
   21ffc:	cmp	r3, #0
   22000:	beq	2204c <__assert_fail@plt+0x106ac>
   22004:	ldr	r3, [sp, #128]	; 0x80
   22008:	ldr	r2, [sp, #32]
   2200c:	mov	r1, fp
   22010:	ldr	r0, [sp, #28]
   22014:	bl	1efa8 <__assert_fail@plt+0xd608>
   22018:	cmp	r0, #0
   2201c:	str	r0, [sp, #48]	; 0x30
   22020:	bne	221b0 <__assert_fail@plt+0x10810>
   22024:	ldr	r3, [sp, #128]	; 0x80
   22028:	ldr	r2, [sp, #8]
   2202c:	str	r3, [sp]
   22030:	mov	r1, fp
   22034:	ldr	r3, [sp, #32]
   22038:	mov	r0, r5
   2203c:	bl	1f0dc <__assert_fail@plt+0xd73c>
   22040:	cmp	r0, #0
   22044:	str	r0, [sp, #48]	; 0x30
   22048:	bne	221b0 <__assert_fail@plt+0x10810>
   2204c:	ldr	r2, [r5, #88]	; 0x58
   22050:	mov	r1, sl
   22054:	mov	r0, r5
   22058:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   2205c:	mov	r2, fp
   22060:	ldr	r1, [sp, #28]
   22064:	mov	r3, r0
   22068:	add	r0, sp, #48	; 0x30
   2206c:	bl	1e190 <__assert_fail@plt+0xc7f0>
   22070:	subs	r8, r0, #0
   22074:	beq	221f8 <__assert_fail@plt+0x10858>
   22078:	mov	r2, #0
   2207c:	str	r2, [sp, #24]
   22080:	ldr	r3, [r5, #100]	; 0x64
   22084:	ldr	r2, [sp, #12]
   22088:	str	r8, [r3, r2]
   2208c:	ldr	r0, [sp, #124]	; 0x7c
   22090:	ldr	r1, [sp, #8]
   22094:	cmp	r0, r1
   22098:	ble	220c0 <__assert_fail@plt+0x10720>
   2209c:	ldr	r0, [sp, #12]
   220a0:	ldr	r2, [r5, #120]	; 0x78
   220a4:	add	r0, r0, #4
   220a8:	str	r0, [sp, #12]
   220ac:	ldr	r0, [sp, #24]
   220b0:	cmp	r0, r2
   220b4:	add	r2, r1, #1
   220b8:	str	r2, [sp, #8]
   220bc:	ble	21e40 <__assert_fail@plt+0x104a0>
   220c0:	ldr	r0, [sp, #64]	; 0x40
   220c4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   220c8:	ldr	r3, [r5, #100]	; 0x64
   220cc:	ldr	r2, [sp, #124]	; 0x7c
   220d0:	ldr	r3, [r3, r2, lsl #2]
   220d4:	cmp	r3, #0
   220d8:	beq	222c8 <__assert_fail@plt+0x10928>
   220dc:	ldr	r2, [sp, #36]	; 0x24
   220e0:	add	r1, r3, #12
   220e4:	str	r4, [r2]
   220e8:	ldr	r2, [sp, #44]	; 0x2c
   220ec:	str	r2, [r5, #40]	; 0x28
   220f0:	ldr	r2, [sp, #40]	; 0x28
   220f4:	ldr	r0, [r3, #8]
   220f8:	str	r2, [r5, #100]	; 0x64
   220fc:	ldr	r2, [sp, #120]	; 0x78
   22100:	bl	1d674 <__assert_fail@plt+0xbcd4>
   22104:	clz	r0, r0
   22108:	lsr	r0, r0, #5
   2210c:	add	sp, sp, #84	; 0x54
   22110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22114:	ldr	r3, [sp, #36]	; 0x24
   22118:	ldr	r2, [r5, #100]	; 0x64
   2211c:	sub	r1, r6, #1
   22120:	ldr	r3, [r3, #8]
   22124:	str	r2, [sp, #40]	; 0x28
   22128:	ldr	r2, [r5, #40]	; 0x28
   2212c:	str	r3, [r5, #100]	; 0x64
   22130:	str	r2, [sp, #44]	; 0x2c
   22134:	str	r6, [r5, #40]	; 0x28
   22138:	ldr	r2, [r5, #88]	; 0x58
   2213c:	mov	r0, r5
   22140:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   22144:	mov	r7, r0
   22148:	mov	r3, #1
   2214c:	mov	r0, #4
   22150:	str	r3, [sp, #56]	; 0x38
   22154:	str	r3, [sp, #60]	; 0x3c
   22158:	bl	1ba3c <__assert_fail@plt+0xa09c>
   2215c:	cmp	r0, #0
   22160:	str	r0, [sp, #64]	; 0x40
   22164:	beq	222b8 <__assert_fail@plt+0x10918>
   22168:	add	fp, sp, #56	; 0x38
   2216c:	mov	ip, #0
   22170:	str	r8, [r0]
   22174:	mov	r1, fp
   22178:	ldr	r3, [sp, #128]	; 0x80
   2217c:	ldr	r2, [sp, #32]
   22180:	ldr	r0, [sp, #28]
   22184:	str	ip, [sp, #48]	; 0x30
   22188:	bl	1efa8 <__assert_fail@plt+0xd608>
   2218c:	cmp	r0, #0
   22190:	str	r0, [sp, #48]	; 0x30
   22194:	moveq	r4, r6
   22198:	beq	21db4 <__assert_fail@plt+0x10414>
   2219c:	b	221b0 <__assert_fail@plt+0x10810>
   221a0:	ldr	r0, [sp, #76]	; 0x4c
   221a4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   221a8:	mov	r3, #12
   221ac:	str	r3, [sp, #48]	; 0x30
   221b0:	ldr	r0, [sp, #64]	; 0x40
   221b4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   221b8:	ldr	r0, [sp, #48]	; 0x30
   221bc:	add	sp, sp, #84	; 0x54
   221c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221c4:	cmp	r0, #0
   221c8:	bne	21ee0 <__assert_fail@plt+0x10540>
   221cc:	ldr	r0, [r9]
   221d0:	b	21ec8 <__assert_fail@plt+0x10528>
   221d4:	cmp	r8, #0
   221d8:	bne	21e80 <__assert_fail@plt+0x104e0>
   221dc:	ldr	r4, [sp, #8]
   221e0:	b	2204c <__assert_fail@plt+0x106ac>
   221e4:	ldr	r0, [sp, #76]	; 0x4c
   221e8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   221ec:	mov	r3, #0
   221f0:	str	r3, [sp, #48]	; 0x30
   221f4:	b	21ff4 <__assert_fail@plt+0x10654>
   221f8:	ldr	r3, [sp, #48]	; 0x30
   221fc:	cmp	r3, #0
   22200:	bne	221b0 <__assert_fail@plt+0x10810>
   22204:	ldr	r2, [sp, #24]
   22208:	ldr	r3, [r5, #100]	; 0x64
   2220c:	add	r2, r2, #1
   22210:	str	r2, [sp, #24]
   22214:	ldr	r2, [sp, #12]
   22218:	str	r8, [r3, r2]
   2221c:	b	2208c <__assert_fail@plt+0x106ec>
   22220:	mov	r0, fp
   22224:	add	r1, r8, #4
   22228:	bl	1dfcc <__assert_fail@plt+0xc62c>
   2222c:	cmp	r0, #0
   22230:	str	r0, [sp, #48]	; 0x30
   22234:	bne	221bc <__assert_fail@plt+0x1081c>
   22238:	ldrb	r3, [r8, #52]	; 0x34
   2223c:	b	21dac <__assert_fail@plt+0x1040c>
   22240:	mvn	r3, #-2147483648	; 0x80000000
   22244:	add	r9, r2, #1
   22248:	sub	r3, r3, r4
   2224c:	cmp	r9, r3
   22250:	bgt	222b8 <__assert_fail@plt+0x10918>
   22254:	add	sl, r4, r9
   22258:	cmn	sl, #-1073741823	; 0xc0000001
   2225c:	bhi	222b8 <__assert_fail@plt+0x10918>
   22260:	ldr	fp, [sp, #36]	; 0x24
   22264:	lsl	r1, sl, #2
   22268:	ldr	r0, [fp, #8]
   2226c:	bl	1babc <__assert_fail@plt+0xa11c>
   22270:	cmp	r0, #0
   22274:	beq	222b8 <__assert_fail@plt+0x10918>
   22278:	str	r0, [fp, #8]
   2227c:	str	sl, [fp, #4]
   22280:	lsl	r2, r9, #2
   22284:	mov	r1, r7
   22288:	add	r0, r0, r4, lsl #2
   2228c:	bl	11814 <memset@plt>
   22290:	b	21d3c <__assert_fail@plt+0x1039c>
   22294:	add	fp, sp, #56	; 0x38
   22298:	str	r8, [sp, #56]	; 0x38
   2229c:	str	r8, [fp, #4]
   222a0:	str	r8, [fp, #8]
   222a4:	b	21e0c <__assert_fail@plt+0x1046c>
   222a8:	ldr	r3, [sp, #48]	; 0x30
   222ac:	cmp	r3, #0
   222b0:	beq	21e04 <__assert_fail@plt+0x10464>
   222b4:	b	221b0 <__assert_fail@plt+0x10810>
   222b8:	mov	r0, #12
   222bc:	b	221bc <__assert_fail@plt+0x1081c>
   222c0:	mov	r0, #0
   222c4:	b	221e8 <__assert_fail@plt+0x10848>
   222c8:	ldr	r3, [sp, #36]	; 0x24
   222cc:	mov	r0, #1
   222d0:	str	r4, [r3]
   222d4:	ldr	r3, [sp, #40]	; 0x28
   222d8:	str	r3, [r5, #100]	; 0x64
   222dc:	ldr	r3, [sp, #44]	; 0x2c
   222e0:	str	r3, [r5, #40]	; 0x28
   222e4:	b	221bc <__assert_fail@plt+0x1081c>
   222e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222ec:	sub	sp, sp, #20
   222f0:	mov	ip, r2
   222f4:	ldr	r5, [sp, #56]	; 0x38
   222f8:	ldr	r4, [r2, #4]
   222fc:	mov	lr, #8
   22300:	mov	r6, r2
   22304:	ldr	r2, [ip], #8
   22308:	mov	r7, r3
   2230c:	str	r3, [sp]
   22310:	mov	r8, r1
   22314:	mov	r3, r4
   22318:	mov	r1, ip
   2231c:	stmib	sp, {r5, lr}
   22320:	mov	r4, r0
   22324:	bl	21cec <__assert_fail@plt+0x1034c>
   22328:	subs	fp, r0, #0
   2232c:	beq	2233c <__assert_fail@plt+0x1099c>
   22330:	mov	r0, fp
   22334:	add	sp, sp, #20
   22338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2233c:	ldr	r3, [r4, #108]	; 0x6c
   22340:	ldr	r1, [r4, #112]	; 0x70
   22344:	ldr	r9, [r6, #4]
   22348:	cmp	r3, r1
   2234c:	ldr	sl, [r8]
   22350:	movlt	lr, r9
   22354:	bge	223e0 <__assert_fail@plt+0x10a40>
   22358:	add	r2, r3, r3, lsl #1
   2235c:	cmp	r3, #0
   22360:	ldr	ip, [r4, #116]	; 0x74
   22364:	lsl	r2, r2, #3
   22368:	ble	22384 <__assert_fail@plt+0x109e4>
   2236c:	sub	r0, r2, #24
   22370:	add	r0, ip, r0
   22374:	ldr	r1, [r0, #4]
   22378:	cmp	r5, r1
   2237c:	moveq	r1, #1
   22380:	strbeq	r1, [r0, #20]
   22384:	add	r0, ip, r2
   22388:	cmp	sl, r9
   2238c:	str	r7, [ip, r2]
   22390:	movne	r1, #0
   22394:	mvneq	r1, #0
   22398:	add	r3, r3, #1
   2239c:	mov	r2, #0
   223a0:	stmib	r0, {r5, sl}
   223a4:	str	r9, [r0, #12]
   223a8:	str	r1, [r0, #16]
   223ac:	str	r3, [r4, #108]	; 0x6c
   223b0:	strb	r2, [r0, #20]
   223b4:	ldr	r3, [r4, #120]	; 0x78
   223b8:	sub	r9, r9, sl
   223bc:	cmp	r3, r9
   223c0:	strlt	r9, [r4, #120]	; 0x78
   223c4:	ldr	r1, [r8]
   223c8:	add	r5, r5, lr
   223cc:	sub	r1, r5, r1
   223d0:	mov	r0, r4
   223d4:	add	sp, sp, #20
   223d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223dc:	b	1d4bc <__assert_fail@plt+0xbb1c>
   223e0:	add	r1, r1, r1, lsl #1
   223e4:	ldr	r0, [r4, #116]	; 0x74
   223e8:	lsl	r1, r1, #4
   223ec:	bl	1babc <__assert_fail@plt+0xa11c>
   223f0:	cmp	r0, #0
   223f4:	beq	22434 <__assert_fail@plt+0x10a94>
   223f8:	ldr	r2, [r4, #112]	; 0x70
   223fc:	ldr	r3, [r4, #108]	; 0x6c
   22400:	str	r0, [r4, #116]	; 0x74
   22404:	add	r2, r2, r2, lsl #1
   22408:	add	r3, r3, r3, lsl #1
   2240c:	lsl	r2, r2, #3
   22410:	add	r0, r0, r3, lsl #3
   22414:	mov	r1, fp
   22418:	bl	11814 <memset@plt>
   2241c:	ldr	r2, [r4, #112]	; 0x70
   22420:	ldr	lr, [r6, #4]
   22424:	ldr	r3, [r4, #108]	; 0x6c
   22428:	lsl	r2, r2, #1
   2242c:	str	r2, [r4, #112]	; 0x70
   22430:	b	22358 <__assert_fail@plt+0x109b8>
   22434:	ldr	r0, [r4, #116]	; 0x74
   22438:	bl	1b944 <__assert_fail@plt+0x9fa4>
   2243c:	mov	fp, #12
   22440:	b	22330 <__assert_fail@plt+0x10990>
   22444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22448:	sub	sp, sp, #92	; 0x5c
   2244c:	ldr	r6, [r1]
   22450:	ldr	r3, [r0, #84]	; 0x54
   22454:	cmp	r6, #0
   22458:	str	r3, [sp, #32]
   2245c:	ldr	sl, [r0, #40]	; 0x28
   22460:	ble	22988 <__assert_fail@plt+0x10fe8>
   22464:	mov	r3, #0
   22468:	str	r3, [sp, #20]
   2246c:	lsl	r3, sl, #2
   22470:	str	r2, [sp, #36]	; 0x24
   22474:	mov	fp, r0
   22478:	str	r1, [sp, #60]	; 0x3c
   2247c:	str	r3, [sp, #48]	; 0x30
   22480:	b	22498 <__assert_fail@plt+0x10af8>
   22484:	ldr	r3, [sp, #20]
   22488:	add	r3, r3, #1
   2248c:	cmp	r3, r6
   22490:	str	r3, [sp, #20]
   22494:	bge	22988 <__assert_fail@plt+0x10fe8>
   22498:	ldr	r3, [sp, #36]	; 0x24
   2249c:	ldr	r1, [sp, #20]
   224a0:	ldr	r2, [r3]
   224a4:	ldr	r3, [sp, #32]
   224a8:	ldr	r9, [r2, r1, lsl #2]
   224ac:	ldr	r3, [r3]
   224b0:	add	r3, r3, r9, lsl #3
   224b4:	ldrb	r2, [r3, #4]
   224b8:	cmp	r2, #4
   224bc:	bne	22484 <__assert_fail@plt+0x10ae4>
   224c0:	ldr	r4, [r3, #4]
   224c4:	ldr	r3, [pc, #1804]	; 22bd8 <__assert_fail@plt+0x11238>
   224c8:	tst	r4, r3
   224cc:	beq	22520 <__assert_fail@plt+0x10b80>
   224d0:	ldr	r2, [fp, #88]	; 0x58
   224d4:	mov	r1, sl
   224d8:	mov	r0, fp
   224dc:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   224e0:	ldr	r3, [pc, #1780]	; 22bdc <__assert_fail@plt+0x1123c>
   224e4:	and	r4, r3, r4, lsr #8
   224e8:	tst	r4, #4
   224ec:	beq	22780 <__assert_fail@plt+0x10de0>
   224f0:	tst	r0, #1
   224f4:	beq	22484 <__assert_fail@plt+0x10ae4>
   224f8:	tst	r4, #8
   224fc:	bne	22484 <__assert_fail@plt+0x10ae4>
   22500:	tst	r4, #32
   22504:	beq	22510 <__assert_fail@plt+0x10b70>
   22508:	tst	r0, #2
   2250c:	beq	22484 <__assert_fail@plt+0x10ae4>
   22510:	tst	r4, #128	; 0x80
   22514:	beq	22520 <__assert_fail@plt+0x10b80>
   22518:	tst	r0, #8
   2251c:	beq	22484 <__assert_fail@plt+0x10ae4>
   22520:	ldr	ip, [fp, #108]	; 0x6c
   22524:	mov	r0, #0
   22528:	mov	r5, ip
   2252c:	mov	r3, ip
   22530:	cmp	r0, r3
   22534:	bge	22590 <__assert_fail@plt+0x10bf0>
   22538:	add	r2, r0, r3
   2253c:	ldr	lr, [fp, #116]	; 0x74
   22540:	add	r2, r2, r2, lsr #31
   22544:	asr	r2, r2, #1
   22548:	add	r1, r2, r2, lsl #1
   2254c:	add	r1, lr, r1, lsl #3
   22550:	ldr	r1, [r1, #4]
   22554:	cmp	sl, r1
   22558:	ble	22580 <__assert_fail@plt+0x10be0>
   2255c:	b	2276c <__assert_fail@plt+0x10dcc>
   22560:	asr	r3, r3, #1
   22564:	mov	r4, r3
   22568:	add	r1, r3, r3, lsl #1
   2256c:	add	r1, lr, r1, lsl #3
   22570:	ldr	r1, [r1, #4]
   22574:	cmp	sl, r1
   22578:	bgt	22774 <__assert_fail@plt+0x10dd4>
   2257c:	mov	r2, r3
   22580:	add	r3, r2, r0
   22584:	cmp	r2, r0
   22588:	add	r3, r3, r3, lsr #31
   2258c:	bgt	22560 <__assert_fail@plt+0x10bc0>
   22590:	cmp	ip, r0
   22594:	ble	22794 <__assert_fail@plt+0x10df4>
   22598:	add	r2, r0, r0, lsl #1
   2259c:	ldr	r3, [fp, #116]	; 0x74
   225a0:	cmn	r0, #1
   225a4:	add	r3, r3, r2, lsl #3
   225a8:	ldr	r2, [r3, #4]
   225ac:	sub	r2, r2, sl
   225b0:	clz	r2, r2
   225b4:	lsr	r2, r2, #5
   225b8:	moveq	r2, #0
   225bc:	cmp	r2, #0
   225c0:	beq	22794 <__assert_fail@plt+0x10df4>
   225c4:	add	r3, r3, #24
   225c8:	b	225d8 <__assert_fail@plt+0x10c38>
   225cc:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   225d0:	cmp	r2, #0
   225d4:	beq	22794 <__assert_fail@plt+0x10df4>
   225d8:	ldr	r2, [r3, #-24]	; 0xffffffe8
   225dc:	add	r3, r3, #24
   225e0:	cmp	r9, r2
   225e4:	bne	225cc <__assert_fail@plt+0x10c2c>
   225e8:	mov	r3, #0
   225ec:	str	r3, [sp, #72]	; 0x48
   225f0:	cmp	r5, ip
   225f4:	lsl	r3, r9, #2
   225f8:	str	r3, [sp, #52]	; 0x34
   225fc:	bge	22760 <__assert_fail@plt+0x10dc0>
   22600:	add	r3, r9, r9, lsl #1
   22604:	add	r4, r5, r5, lsl #1
   22608:	lsl	r3, r3, #2
   2260c:	str	r3, [sp, #56]	; 0x38
   22610:	lsl	r4, r4, #3
   22614:	ldr	r7, [sp, #32]
   22618:	b	2262c <__assert_fail@plt+0x10c8c>
   2261c:	add	r5, r5, #1
   22620:	cmp	r5, ip
   22624:	add	r4, r4, #24
   22628:	bge	22760 <__assert_fail@plt+0x10dc0>
   2262c:	ldr	r3, [fp, #116]	; 0x74
   22630:	add	r2, r3, r4
   22634:	ldr	r3, [r3, r4]
   22638:	cmp	r9, r3
   2263c:	bne	2261c <__assert_fail@plt+0x10c7c>
   22640:	ldr	r3, [r2, #4]
   22644:	cmp	sl, r3
   22648:	bne	2261c <__assert_fail@plt+0x10c7c>
   2264c:	ldr	r3, [r2, #12]
   22650:	ldr	r6, [r2, #8]
   22654:	subs	r2, r3, r6
   22658:	str	r2, [sp, #28]
   2265c:	ldreq	r0, [sp, #56]	; 0x38
   22660:	ldreq	r2, [r7, #20]
   22664:	ldrne	r2, [r7, #12]
   22668:	addeq	r2, r2, r0
   2266c:	ldrne	r0, [sp, #52]	; 0x34
   22670:	ldreq	r2, [r2, #8]
   22674:	ldreq	r1, [r7, #24]
   22678:	ldrne	r2, [r2, r0]
   2267c:	ldreq	r2, [r2]
   22680:	ldrne	r1, [r7, #24]
   22684:	add	r3, sl, r3
   22688:	add	r2, r2, r2, lsl #1
   2268c:	sub	r6, r3, r6
   22690:	add	r2, r1, r2, lsl #2
   22694:	str	r2, [sp, #24]
   22698:	sub	r1, r6, #1
   2269c:	ldr	r2, [fp, #88]	; 0x58
   226a0:	mov	r0, fp
   226a4:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   226a8:	ldr	r8, [fp, #100]	; 0x64
   226ac:	ldr	r2, [sp, #48]	; 0x30
   226b0:	ldr	r1, [r8, r2]
   226b4:	ldr	r2, [r8, r6, lsl #2]
   226b8:	cmp	r1, #0
   226bc:	moveq	r1, #0
   226c0:	ldrne	r1, [r1, #8]
   226c4:	cmp	r2, #0
   226c8:	str	r1, [sp, #44]	; 0x2c
   226cc:	mov	r3, r0
   226d0:	beq	228f4 <__assert_fail@plt+0x10f54>
   226d4:	str	r0, [sp, #40]	; 0x28
   226d8:	ldr	r1, [r2, #40]	; 0x28
   226dc:	add	r0, sp, #76	; 0x4c
   226e0:	ldr	r2, [sp, #24]
   226e4:	bl	1e044 <__assert_fail@plt+0xc6a4>
   226e8:	ldr	r3, [sp, #40]	; 0x28
   226ec:	cmp	r0, #0
   226f0:	str	r0, [sp, #72]	; 0x48
   226f4:	bne	22974 <__assert_fail@plt+0x10fd4>
   226f8:	add	r2, sp, #76	; 0x4c
   226fc:	mov	r1, r7
   22700:	add	r0, sp, #72	; 0x48
   22704:	ldr	r8, [fp, #100]	; 0x64
   22708:	bl	1e190 <__assert_fail@plt+0xc7f0>
   2270c:	str	r0, [r8, r6, lsl #2]
   22710:	ldr	r0, [sp, #84]	; 0x54
   22714:	bl	1b944 <__assert_fail@plt+0x9fa4>
   22718:	ldr	r3, [fp, #100]	; 0x64
   2271c:	ldr	r2, [r3, r6, lsl #2]
   22720:	cmp	r2, #0
   22724:	beq	22918 <__assert_fail@plt+0x10f78>
   22728:	ldr	r2, [sp, #28]
   2272c:	cmp	r2, #0
   22730:	bne	2274c <__assert_fail@plt+0x10dac>
   22734:	ldr	r2, [sp, #48]	; 0x30
   22738:	ldr	r3, [r3, r2]
   2273c:	ldr	r2, [sp, #44]	; 0x2c
   22740:	ldr	r3, [r3, #8]
   22744:	cmp	r3, r2
   22748:	bgt	22928 <__assert_fail@plt+0x10f88>
   2274c:	ldr	ip, [fp, #108]	; 0x6c
   22750:	add	r5, r5, #1
   22754:	cmp	r5, ip
   22758:	add	r4, r4, #24
   2275c:	blt	2262c <__assert_fail@plt+0x10c8c>
   22760:	ldr	r3, [sp, #60]	; 0x3c
   22764:	ldr	r6, [r3]
   22768:	b	22484 <__assert_fail@plt+0x10ae4>
   2276c:	mov	r4, r2
   22770:	mov	r2, r3
   22774:	add	r0, r4, #1
   22778:	mov	r3, r2
   2277c:	b	22530 <__assert_fail@plt+0x10b90>
   22780:	tst	r4, #8
   22784:	beq	22500 <__assert_fail@plt+0x10b60>
   22788:	tst	r0, #1
   2278c:	beq	22500 <__assert_fail@plt+0x10b60>
   22790:	b	22484 <__assert_fail@plt+0x10ae4>
   22794:	ldr	r3, [fp, #84]	; 0x54
   22798:	ldr	r1, [fp, #124]	; 0x7c
   2279c:	str	r3, [sp, #56]	; 0x38
   227a0:	ldr	r3, [r3]
   227a4:	cmp	r1, #0
   227a8:	ldr	r2, [r3, r9, lsl #3]
   227ac:	str	r2, [sp, #52]	; 0x34
   227b0:	ble	225e8 <__assert_fail@plt+0x10c48>
   227b4:	ldr	r2, [fp, #4]
   227b8:	str	r9, [sp, #44]	; 0x2c
   227bc:	mov	r9, r2
   227c0:	mov	r0, #0
   227c4:	str	r0, [sp, #40]	; 0x28
   227c8:	str	sl, [sp, #28]
   227cc:	str	r5, [sp, #68]	; 0x44
   227d0:	ldr	r2, [fp, #132]	; 0x84
   227d4:	ldr	r0, [sp, #40]	; 0x28
   227d8:	ldr	r4, [r2, r0, lsl #2]
   227dc:	ldr	r2, [r4, #4]
   227e0:	ldr	r3, [r3, r2, lsl #3]
   227e4:	ldr	r2, [sp, #52]	; 0x34
   227e8:	cmp	r2, r3
   227ec:	beq	22810 <__assert_fail@plt+0x10e70>
   227f0:	ldr	r3, [sp, #40]	; 0x28
   227f4:	add	r3, r3, #1
   227f8:	cmp	r3, r1
   227fc:	str	r3, [sp, #40]	; 0x28
   22800:	bge	22b84 <__assert_fail@plt+0x111e4>
   22804:	ldr	r3, [sp, #56]	; 0x38
   22808:	ldr	r3, [r3]
   2280c:	b	227d0 <__assert_fail@plt+0x10e30>
   22810:	ldr	ip, [r4, #16]
   22814:	ldr	r6, [r4]
   22818:	cmp	ip, #0
   2281c:	ble	22bc8 <__assert_fail@plt+0x11228>
   22820:	ldr	r8, [sp, #28]
   22824:	mov	r5, #0
   22828:	mov	r3, r6
   2282c:	b	22844 <__assert_fail@plt+0x10ea4>
   22830:	ldr	ip, [r4, #16]
   22834:	mov	r3, r6
   22838:	cmp	r5, ip
   2283c:	mov	r8, r7
   22840:	bge	22994 <__assert_fail@plt+0x10ff4>
   22844:	ldr	r2, [r4, #20]
   22848:	ldr	sl, [r2, r5, lsl #2]
   2284c:	ldr	r6, [sl, #4]
   22850:	sub	r2, r6, r3
   22854:	cmp	r2, #0
   22858:	add	r7, r2, r8
   2285c:	ble	22888 <__assert_fail@plt+0x10ee8>
   22860:	ldr	r1, [fp, #28]
   22864:	cmp	r7, r1
   22868:	bgt	228bc <__assert_fail@plt+0x10f1c>
   2286c:	add	r1, r9, r3
   22870:	add	r0, r9, r8
   22874:	str	r3, [sp, #24]
   22878:	bl	1161c <memcmp@plt>
   2287c:	ldr	r3, [sp, #24]
   22880:	cmp	r0, #0
   22884:	bne	22b08 <__assert_fail@plt+0x11168>
   22888:	ldr	r3, [sp, #28]
   2288c:	mov	r2, sl
   22890:	str	r3, [sp]
   22894:	mov	r1, r4
   22898:	ldr	r3, [sp, #44]	; 0x2c
   2289c:	mov	r0, fp
   228a0:	bl	222e8 <__assert_fail@plt+0x10948>
   228a4:	add	r5, r5, #1
   228a8:	ldr	r9, [fp, #4]
   228ac:	cmp	r0, #1
   228b0:	bls	22830 <__assert_fail@plt+0x10e90>
   228b4:	add	sp, sp, #92	; 0x5c
   228b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228bc:	ldr	lr, [fp, #48]	; 0x30
   228c0:	str	r2, [sp, #64]	; 0x40
   228c4:	cmp	r7, lr
   228c8:	mov	r1, r7
   228cc:	mov	r0, fp
   228d0:	bgt	22bd0 <__assert_fail@plt+0x11230>
   228d4:	str	r3, [sp, #24]
   228d8:	bl	1d4bc <__assert_fail@plt+0xbb1c>
   228dc:	cmp	r0, #0
   228e0:	bne	228b4 <__assert_fail@plt+0x10f14>
   228e4:	ldr	r9, [fp, #4]
   228e8:	ldr	r2, [sp, #64]	; 0x40
   228ec:	ldr	r3, [sp, #24]
   228f0:	b	2286c <__assert_fail@plt+0x10ecc>
   228f4:	ldr	r2, [sp, #24]
   228f8:	mov	r1, r7
   228fc:	add	r0, sp, #72	; 0x48
   22900:	bl	1e190 <__assert_fail@plt+0xc7f0>
   22904:	ldr	r3, [fp, #100]	; 0x64
   22908:	str	r0, [r8, r6, lsl #2]
   2290c:	ldr	r2, [r3, r6, lsl #2]
   22910:	cmp	r2, #0
   22914:	bne	22728 <__assert_fail@plt+0x10d88>
   22918:	ldr	r0, [sp, #72]	; 0x48
   2291c:	cmp	r0, #0
   22920:	beq	22728 <__assert_fail@plt+0x10d88>
   22924:	b	228b4 <__assert_fail@plt+0x10f14>
   22928:	ldr	r3, [sp, #24]
   2292c:	mov	r0, fp
   22930:	add	r6, r3, #4
   22934:	add	r8, r3, #8
   22938:	mov	r2, r8
   2293c:	mov	r1, r6
   22940:	mov	r3, sl
   22944:	bl	20954 <__assert_fail@plt+0xefb4>
   22948:	cmp	r0, #0
   2294c:	str	r0, [sp, #72]	; 0x48
   22950:	bne	228b4 <__assert_fail@plt+0x10f14>
   22954:	mov	r2, r8
   22958:	mov	r1, r6
   2295c:	mov	r0, fp
   22960:	bl	22444 <__assert_fail@plt+0x10aa4>
   22964:	cmp	r0, #0
   22968:	str	r0, [sp, #72]	; 0x48
   2296c:	beq	2274c <__assert_fail@plt+0x10dac>
   22970:	b	228b4 <__assert_fail@plt+0x10f14>
   22974:	ldr	r0, [sp, #84]	; 0x54
   22978:	bl	1b944 <__assert_fail@plt+0x9fa4>
   2297c:	ldr	r0, [sp, #72]	; 0x48
   22980:	add	sp, sp, #92	; 0x5c
   22984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22988:	mov	r0, #0
   2298c:	add	sp, sp, #92	; 0x5c
   22990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22994:	mov	sl, r6
   22998:	add	r6, sl, #1
   2299c:	ldr	r3, [sp, #28]
   229a0:	cmp	r3, r6
   229a4:	blt	22b00 <__assert_fail@plt+0x11160>
   229a8:	ldr	sl, [sp, #52]	; 0x34
   229ac:	lsl	r8, r6, #2
   229b0:	ldr	r3, [r4]
   229b4:	sub	r3, r6, r3
   229b8:	cmp	r3, #0
   229bc:	ble	229e8 <__assert_fail@plt+0x11048>
   229c0:	ldr	r3, [fp, #28]
   229c4:	cmp	r3, r7
   229c8:	ble	22b58 <__assert_fail@plt+0x111b8>
   229cc:	add	r5, r7, #1
   229d0:	add	r3, r9, r6
   229d4:	ldrb	r2, [r9, r7]
   229d8:	ldrb	r3, [r3, #-1]
   229dc:	cmp	r2, r3
   229e0:	bne	22b00 <__assert_fail@plt+0x11160>
   229e4:	mov	r7, r5
   229e8:	ldr	r3, [fp, #100]	; 0x64
   229ec:	ldr	r3, [r3, r8]
   229f0:	cmp	r3, #0
   229f4:	beq	22aec <__assert_fail@plt+0x1114c>
   229f8:	ldr	ip, [r3, #8]
   229fc:	cmp	ip, #0
   22a00:	ble	22aec <__assert_fail@plt+0x1114c>
   22a04:	ldr	r2, [r3, #12]
   22a08:	ldr	r3, [sp, #56]	; 0x38
   22a0c:	sub	r2, r2, #4
   22a10:	ldr	r0, [r3]
   22a14:	mov	r3, #0
   22a18:	b	22a24 <__assert_fail@plt+0x11084>
   22a1c:	cmp	ip, r3
   22a20:	beq	22aec <__assert_fail@plt+0x1114c>
   22a24:	ldr	r5, [r2, #4]!
   22a28:	add	r3, r3, #1
   22a2c:	add	r1, r0, r5, lsl #3
   22a30:	ldrb	r1, [r1, #4]
   22a34:	cmp	r1, #9
   22a38:	bne	22a1c <__assert_fail@plt+0x1107c>
   22a3c:	ldr	r1, [r0, r5, lsl #3]
   22a40:	cmp	sl, r1
   22a44:	bne	22a1c <__assert_fail@plt+0x1107c>
   22a48:	cmn	r5, #1
   22a4c:	beq	22aec <__assert_fail@plt+0x1114c>
   22a50:	ldr	r1, [r4, #8]
   22a54:	cmp	r1, #0
   22a58:	beq	22b30 <__assert_fail@plt+0x11190>
   22a5c:	mov	r0, #9
   22a60:	ldr	r3, [r4]
   22a64:	ldr	r2, [r4, #4]
   22a68:	str	r0, [sp, #8]
   22a6c:	stm	sp, {r5, r6}
   22a70:	mov	r0, fp
   22a74:	bl	21cec <__assert_fail@plt+0x1034c>
   22a78:	cmp	r0, #1
   22a7c:	beq	22aec <__assert_fail@plt+0x1114c>
   22a80:	cmp	r0, #0
   22a84:	bne	228b4 <__assert_fail@plt+0x10f14>
   22a88:	ldr	r3, [r4, #16]
   22a8c:	ldr	r2, [r4, #12]
   22a90:	cmp	r3, r2
   22a94:	beq	22ba0 <__assert_fail@plt+0x11200>
   22a98:	mov	r1, #20
   22a9c:	mov	r0, #1
   22aa0:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   22aa4:	cmp	r0, #0
   22aa8:	beq	22b98 <__assert_fail@plt+0x111f8>
   22aac:	ldr	r3, [r4, #16]
   22ab0:	ldr	r2, [r4, #20]
   22ab4:	add	r1, r3, #1
   22ab8:	str	r0, [r2, r3, lsl #2]
   22abc:	stm	r0, {r5, r6}
   22ac0:	mov	r2, r0
   22ac4:	ldr	r0, [sp, #28]
   22ac8:	str	r1, [r4, #16]
   22acc:	ldr	r3, [sp, #44]	; 0x2c
   22ad0:	str	r0, [sp]
   22ad4:	mov	r1, r4
   22ad8:	mov	r0, fp
   22adc:	bl	222e8 <__assert_fail@plt+0x10948>
   22ae0:	ldr	r9, [fp, #4]
   22ae4:	cmp	r0, #1
   22ae8:	bhi	228b4 <__assert_fail@plt+0x10f14>
   22aec:	ldr	r3, [sp, #28]
   22af0:	add	r6, r6, #1
   22af4:	cmp	r3, r6
   22af8:	add	r8, r8, #4
   22afc:	bge	229b0 <__assert_fail@plt+0x11010>
   22b00:	ldr	r1, [fp, #124]	; 0x7c
   22b04:	b	227f0 <__assert_fail@plt+0x10e50>
   22b08:	ldr	ip, [r4, #16]
   22b0c:	mov	r6, r3
   22b10:	cmp	ip, r5
   22b14:	bgt	22b00 <__assert_fail@plt+0x11160>
   22b18:	cmp	r5, #0
   22b1c:	movle	r7, r8
   22b20:	ble	2299c <__assert_fail@plt+0x10ffc>
   22b24:	mov	sl, r6
   22b28:	mov	r7, r8
   22b2c:	b	22998 <__assert_fail@plt+0x10ff8>
   22b30:	ldr	r1, [r4]
   22b34:	mov	r0, #12
   22b38:	sub	r1, r6, r1
   22b3c:	add	r1, r1, #1
   22b40:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   22b44:	cmp	r0, #0
   22b48:	str	r0, [r4, #8]
   22b4c:	beq	22b98 <__assert_fail@plt+0x111f8>
   22b50:	mov	r1, r0
   22b54:	b	22a5c <__assert_fail@plt+0x110bc>
   22b58:	ldr	r3, [fp, #48]	; 0x30
   22b5c:	cmp	r3, r7
   22b60:	ble	22b00 <__assert_fail@plt+0x11160>
   22b64:	add	r5, r7, #1
   22b68:	mov	r1, r5
   22b6c:	mov	r0, fp
   22b70:	bl	1ca08 <__assert_fail@plt+0xb068>
   22b74:	cmp	r0, #0
   22b78:	bne	228b4 <__assert_fail@plt+0x10f14>
   22b7c:	ldr	r9, [fp, #4]
   22b80:	b	229d0 <__assert_fail@plt+0x11030>
   22b84:	ldr	sl, [sp, #28]
   22b88:	ldr	r9, [sp, #44]	; 0x2c
   22b8c:	ldr	r5, [sp, #68]	; 0x44
   22b90:	ldr	ip, [fp, #108]	; 0x6c
   22b94:	b	225e8 <__assert_fail@plt+0x10c48>
   22b98:	mov	r0, #12
   22b9c:	b	228b4 <__assert_fail@plt+0x10f14>
   22ba0:	lsl	r3, r3, #1
   22ba4:	add	r9, r3, #1
   22ba8:	ldr	r0, [r4, #20]
   22bac:	lsl	r1, r9, #2
   22bb0:	bl	1babc <__assert_fail@plt+0xa11c>
   22bb4:	cmp	r0, #0
   22bb8:	beq	22b98 <__assert_fail@plt+0x111f8>
   22bbc:	str	r0, [r4, #20]
   22bc0:	str	r9, [r4, #12]
   22bc4:	b	22a98 <__assert_fail@plt+0x110f8>
   22bc8:	ldr	r7, [sp, #28]
   22bcc:	b	2299c <__assert_fail@plt+0x10ffc>
   22bd0:	mov	r6, r3
   22bd4:	b	22b10 <__assert_fail@plt+0x11170>
   22bd8:	andeq	pc, r3, r0, lsl #30
   22bdc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   22be0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22be4:	mov	r4, r1
   22be8:	ldr	r5, [r1, #40]	; 0x28
   22bec:	ldr	r3, [r1, #104]	; 0x68
   22bf0:	sub	sp, sp, #16
   22bf4:	cmp	r5, r3
   22bf8:	mov	r8, r0
   22bfc:	ldr	r7, [r1, #84]	; 0x54
   22c00:	ble	22c2c <__assert_fail@plt+0x1128c>
   22c04:	ldr	r3, [r1, #100]	; 0x64
   22c08:	mov	r6, r2
   22c0c:	str	r2, [r3, r5, lsl #2]
   22c10:	str	r5, [r1, #104]	; 0x68
   22c14:	ldr	r3, [r7, #76]	; 0x4c
   22c18:	cmp	r3, #0
   22c1c:	bne	22cf4 <__assert_fail@plt+0x11354>
   22c20:	mov	r0, r6
   22c24:	add	sp, sp, #16
   22c28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22c2c:	ldr	r9, [r1, #100]	; 0x64
   22c30:	ldr	r3, [r9, r5, lsl #2]
   22c34:	cmp	r3, #0
   22c38:	streq	r2, [r9, r5, lsl #2]
   22c3c:	moveq	r6, r2
   22c40:	beq	22c14 <__assert_fail@plt+0x11274>
   22c44:	cmp	r2, #0
   22c48:	ldr	r3, [r3, #40]	; 0x28
   22c4c:	beq	22cb8 <__assert_fail@plt+0x11318>
   22c50:	ldr	r9, [r2, #40]	; 0x28
   22c54:	add	r0, sp, #4
   22c58:	mov	r2, r3
   22c5c:	mov	r1, r9
   22c60:	bl	1e044 <__assert_fail@plt+0xc6a4>
   22c64:	cmp	r0, #0
   22c68:	str	r0, [r8]
   22c6c:	bne	22d54 <__assert_fail@plt+0x113b4>
   22c70:	ldr	r1, [r4, #40]	; 0x28
   22c74:	ldr	r2, [r4, #88]	; 0x58
   22c78:	sub	r1, r1, #1
   22c7c:	mov	r0, r4
   22c80:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   22c84:	add	r2, sp, #4
   22c88:	mov	r1, r7
   22c8c:	ldr	sl, [r4, #100]	; 0x64
   22c90:	mov	r3, r0
   22c94:	mov	r0, r8
   22c98:	bl	1e190 <__assert_fail@plt+0xc7f0>
   22c9c:	cmp	r9, #0
   22ca0:	mov	r6, r0
   22ca4:	str	r0, [sl, r5, lsl #2]
   22ca8:	beq	22c14 <__assert_fail@plt+0x11274>
   22cac:	ldr	r0, [sp, #12]
   22cb0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   22cb4:	b	22c14 <__assert_fail@plt+0x11274>
   22cb8:	ldm	r3, {r0, r1, r2}
   22cbc:	add	r6, sp, #4
   22cc0:	stm	r6, {r0, r1, r2}
   22cc4:	sub	r1, r5, #1
   22cc8:	ldr	r2, [r4, #88]	; 0x58
   22ccc:	mov	r0, r4
   22cd0:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   22cd4:	mov	r2, r6
   22cd8:	mov	r1, r7
   22cdc:	mov	r3, r0
   22ce0:	mov	r0, r8
   22ce4:	bl	1e190 <__assert_fail@plt+0xc7f0>
   22ce8:	mov	r6, r0
   22cec:	str	r0, [r9, r5, lsl #2]
   22cf0:	b	22c14 <__assert_fail@plt+0x11274>
   22cf4:	cmp	r6, #0
   22cf8:	beq	22d54 <__assert_fail@plt+0x113b4>
   22cfc:	add	r7, r6, #8
   22d00:	add	r9, r6, #12
   22d04:	mov	r1, r7
   22d08:	mov	r2, r9
   22d0c:	mov	r3, r5
   22d10:	mov	r0, r4
   22d14:	bl	20954 <__assert_fail@plt+0xefb4>
   22d18:	cmp	r0, #0
   22d1c:	str	r0, [r8]
   22d20:	bne	22d54 <__assert_fail@plt+0x113b4>
   22d24:	ldrb	r3, [r6, #52]	; 0x34
   22d28:	tst	r3, #64	; 0x40
   22d2c:	beq	22c20 <__assert_fail@plt+0x11280>
   22d30:	mov	r2, r9
   22d34:	mov	r1, r7
   22d38:	mov	r0, r4
   22d3c:	bl	22444 <__assert_fail@plt+0x10aa4>
   22d40:	cmp	r0, #0
   22d44:	str	r0, [r8]
   22d48:	ldreq	r3, [r4, #100]	; 0x64
   22d4c:	ldreq	r6, [r3, r5, lsl #2]
   22d50:	beq	22c20 <__assert_fail@plt+0x11280>
   22d54:	mov	r6, #0
   22d58:	b	22c20 <__assert_fail@plt+0x11280>
   22d5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d60:	sub	sp, sp, #68	; 0x44
   22d64:	mov	r4, #1
   22d68:	mov	sl, r0
   22d6c:	mov	r0, #4
   22d70:	ldr	fp, [r1, #12]
   22d74:	mov	r9, r1
   22d78:	ldr	r5, [r1, #8]
   22d7c:	str	r4, [sp, #52]	; 0x34
   22d80:	str	r4, [sp, #56]	; 0x38
   22d84:	bl	1ba3c <__assert_fail@plt+0xa09c>
   22d88:	lsl	r3, fp, #2
   22d8c:	str	r3, [sp, #16]
   22d90:	cmp	r0, #0
   22d94:	str	r0, [sp, #60]	; 0x3c
   22d98:	beq	2300c <__assert_fail@plt+0x1166c>
   22d9c:	add	r3, sp, #52	; 0x34
   22da0:	str	r5, [r0]
   22da4:	mov	r2, fp
   22da8:	mov	r1, r9
   22dac:	mov	r0, sl
   22db0:	bl	24a44 <__assert_fail@plt+0x130a4>
   22db4:	subs	r3, r0, #0
   22db8:	str	r3, [sp, #44]	; 0x2c
   22dbc:	bne	22fdc <__assert_fail@plt+0x1163c>
   22dc0:	cmp	fp, #0
   22dc4:	ble	22fdc <__assert_fail@plt+0x1163c>
   22dc8:	ldr	r3, [sp, #44]	; 0x2c
   22dcc:	str	r4, [sp, #40]	; 0x28
   22dd0:	str	r3, [sp, #36]	; 0x24
   22dd4:	add	r3, r9, #24
   22dd8:	str	r3, [sp, #28]
   22ddc:	add	r3, r9, #20
   22de0:	str	r3, [sp, #32]
   22de4:	ldr	r0, [r9]
   22de8:	ldr	r3, [sp, #16]
   22dec:	ldr	r3, [r0, r3]
   22df0:	cmp	r3, #0
   22df4:	movne	r3, #0
   22df8:	ldreq	r3, [sp, #36]	; 0x24
   22dfc:	addeq	r3, r3, #1
   22e00:	str	r3, [sp, #36]	; 0x24
   22e04:	ldr	r2, [sp, #36]	; 0x24
   22e08:	ldr	r3, [sl, #120]	; 0x78
   22e0c:	cmp	r2, r3
   22e10:	bgt	2301c <__assert_fail@plt+0x1167c>
   22e14:	mov	r2, #0
   22e18:	ldr	r3, [sl, #100]	; 0x64
   22e1c:	str	r2, [sp, #56]	; 0x38
   22e20:	ldr	r2, [sp, #16]
   22e24:	sub	fp, fp, #1
   22e28:	add	r3, r3, r2
   22e2c:	ldr	r7, [r3, #-4]
   22e30:	cmp	r7, #0
   22e34:	beq	22fac <__assert_fail@plt+0x1160c>
   22e38:	ldr	r3, [r7, #20]
   22e3c:	ldr	r8, [sl, #84]	; 0x54
   22e40:	cmp	r3, #0
   22e44:	ble	22fac <__assert_fail@plt+0x1160c>
   22e48:	ldr	r3, [r7, #24]
   22e4c:	ldr	r1, [r8]
   22e50:	mov	r4, #0
   22e54:	ldr	r5, [r3]
   22e58:	lsl	r6, r5, #3
   22e5c:	add	r3, r1, r6
   22e60:	b	22f1c <__assert_fail@plt+0x1157c>
   22e64:	add	r1, r1, r6
   22e68:	mov	r2, fp
   22e6c:	mov	r0, sl
   22e70:	bl	1ff70 <__assert_fail@plt+0xe5d0>
   22e74:	cmp	r0, #0
   22e78:	beq	22ef8 <__assert_fail@plt+0x11558>
   22e7c:	ldr	r3, [r9]
   22e80:	ldr	r2, [sp, #16]
   22e84:	ldr	r3, [r3, r2]
   22e88:	cmp	r3, #0
   22e8c:	beq	22ef8 <__assert_fail@plt+0x11558>
   22e90:	ldr	r2, [r8, #12]
   22e94:	add	r1, r3, #12
   22e98:	ldr	r0, [r3, #8]
   22e9c:	ldr	r2, [r2, r5, lsl #2]
   22ea0:	bl	1d674 <__assert_fail@plt+0xbcd4>
   22ea4:	cmp	r0, #0
   22ea8:	beq	22ef8 <__assert_fail@plt+0x11558>
   22eac:	ldr	r3, [sp, #40]	; 0x28
   22eb0:	ldr	r2, [r9, #20]
   22eb4:	cmp	r2, #0
   22eb8:	beq	22ee4 <__assert_fail@plt+0x11544>
   22ebc:	ldr	r1, [r8, #12]
   22ec0:	add	r0, fp, r3
   22ec4:	ldr	r2, [sp, #28]
   22ec8:	ldr	r3, [r1, r5, lsl #2]
   22ecc:	stm	sp, {r0, r5, fp}
   22ed0:	mov	r0, sl
   22ed4:	ldr	r1, [sp, #32]
   22ed8:	bl	1d940 <__assert_fail@plt+0xbfa0>
   22edc:	cmp	r0, #0
   22ee0:	bne	22ef8 <__assert_fail@plt+0x11558>
   22ee4:	mov	r1, r5
   22ee8:	add	r0, sp, #52	; 0x34
   22eec:	bl	1d0e4 <__assert_fail@plt+0xb744>
   22ef0:	cmp	r0, #0
   22ef4:	beq	22fec <__assert_fail@plt+0x1164c>
   22ef8:	ldr	r3, [r7, #20]
   22efc:	add	r4, r4, #1
   22f00:	cmp	r4, r3
   22f04:	bge	22fac <__assert_fail@plt+0x1160c>
   22f08:	ldr	r3, [r7, #24]
   22f0c:	ldr	r1, [r8]
   22f10:	ldr	r5, [r3, r4, lsl #2]
   22f14:	lsl	r6, r5, #3
   22f18:	add	r3, r1, r6
   22f1c:	ldrb	r3, [r3, #6]
   22f20:	tst	r3, #16
   22f24:	beq	22e64 <__assert_fail@plt+0x114c4>
   22f28:	ldr	r3, [sl, #84]	; 0x54
   22f2c:	mov	r2, r3
   22f30:	str	r3, [sp, #24]
   22f34:	ldr	r0, [r2]
   22f38:	str	fp, [sp]
   22f3c:	ldr	ip, [r9, #12]
   22f40:	mov	r3, sl
   22f44:	add	r1, r2, #128	; 0x80
   22f48:	mov	r2, r5
   22f4c:	str	ip, [sp, #20]
   22f50:	bl	21a20 <__assert_fail@plt+0x10080>
   22f54:	subs	r3, r0, #0
   22f58:	ble	22fe4 <__assert_fail@plt+0x11644>
   22f5c:	ldr	ip, [sp, #20]
   22f60:	add	r2, fp, r3
   22f64:	cmp	ip, r2
   22f68:	blt	22eb0 <__assert_fail@plt+0x11510>
   22f6c:	ldr	r1, [r9]
   22f70:	ldr	r2, [r1, r2, lsl #2]
   22f74:	cmp	r2, #0
   22f78:	beq	22fa4 <__assert_fail@plt+0x11604>
   22f7c:	str	r3, [sp, #20]
   22f80:	ldr	r3, [sp, #24]
   22f84:	add	r1, r2, #12
   22f88:	ldr	r0, [r2, #8]
   22f8c:	ldr	ip, [r3, #12]
   22f90:	ldr	r2, [ip, r5, lsl #2]
   22f94:	bl	1d674 <__assert_fail@plt+0xbcd4>
   22f98:	ldr	r3, [sp, #20]
   22f9c:	cmp	r0, #0
   22fa0:	bne	22eb0 <__assert_fail@plt+0x11510>
   22fa4:	ldr	r1, [r8]
   22fa8:	b	22e64 <__assert_fail@plt+0x114c4>
   22fac:	add	r3, sp, #52	; 0x34
   22fb0:	mov	r2, fp
   22fb4:	mov	r1, r9
   22fb8:	mov	r0, sl
   22fbc:	bl	24a44 <__assert_fail@plt+0x130a4>
   22fc0:	cmp	r0, #0
   22fc4:	bne	23004 <__assert_fail@plt+0x11664>
   22fc8:	ldr	r3, [sp, #16]
   22fcc:	cmp	fp, #0
   22fd0:	sub	r3, r3, #4
   22fd4:	str	r3, [sp, #16]
   22fd8:	bne	22de4 <__assert_fail@plt+0x11444>
   22fdc:	ldr	r4, [sp, #44]	; 0x2c
   22fe0:	b	22ff0 <__assert_fail@plt+0x11650>
   22fe4:	beq	22fa4 <__assert_fail@plt+0x11604>
   22fe8:	b	22eb0 <__assert_fail@plt+0x11510>
   22fec:	mov	r4, #12
   22ff0:	ldr	r0, [sp, #60]	; 0x3c
   22ff4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   22ff8:	mov	r0, r4
   22ffc:	add	sp, sp, #68	; 0x44
   23000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23004:	mov	r4, r0
   23008:	b	22ff0 <__assert_fail@plt+0x11650>
   2300c:	mov	r4, #12
   23010:	mov	r0, r4
   23014:	add	sp, sp, #68	; 0x44
   23018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2301c:	ldr	r2, [sp, #16]
   23020:	mov	r1, #0
   23024:	bl	11814 <memset@plt>
   23028:	ldr	r0, [sp, #60]	; 0x3c
   2302c:	ldr	r4, [sp, #44]	; 0x2c
   23030:	bl	1b944 <__assert_fail@plt+0x9fa4>
   23034:	b	22ff8 <__assert_fail@plt+0x11658>
   23038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2303c:	mov	r7, r0
   23040:	sub	sp, sp, #428	; 0x1ac
   23044:	mov	r6, r3
   23048:	ldr	r3, [r7]
   2304c:	str	r0, [sp, #44]	; 0x2c
   23050:	str	r1, [sp, #56]	; 0x38
   23054:	str	r2, [sp, #72]	; 0x48
   23058:	mov	r1, #0
   2305c:	add	r0, sp, #148	; 0x94
   23060:	mov	r2, #136	; 0x88
   23064:	mov	r8, r3
   23068:	str	r3, [sp, #28]
   2306c:	ldr	r4, [sp, #464]	; 0x1d0
   23070:	ldr	r5, [sp, #472]	; 0x1d8
   23074:	bl	11814 <memset@plt>
   23078:	ldr	r1, [r7, #16]
   2307c:	str	r8, [sp, #232]	; 0xe8
   23080:	cmp	r1, #0
   23084:	streq	r1, [sp, #60]	; 0x3c
   23088:	beq	230b4 <__assert_fail@plt+0x11714>
   2308c:	ldrb	r2, [r7, #28]
   23090:	subs	r3, r6, r4
   23094:	movne	r3, #1
   23098:	ands	r3, r3, r2, lsr #3
   2309c:	streq	r3, [sp, #60]	; 0x3c
   230a0:	beq	230b4 <__assert_fail@plt+0x11714>
   230a4:	tst	r2, #1
   230a8:	moveq	r3, r1
   230ac:	movne	r3, #0
   230b0:	str	r3, [sp, #60]	; 0x3c
   230b4:	ldr	r3, [sp, #44]	; 0x2c
   230b8:	ldr	r3, [r3, #24]
   230bc:	cmp	r3, r5
   230c0:	subcc	r2, r5, #1
   230c4:	subcc	r3, r2, r3
   230c8:	ldr	r2, [sp, #44]	; 0x2c
   230cc:	movcs	r3, #0
   230d0:	str	r3, [sp, #96]	; 0x60
   230d4:	ldr	r2, [r2, #8]
   230d8:	cmp	r2, #0
   230dc:	beq	2370c <__assert_fail@plt+0x11d6c>
   230e0:	ldr	r2, [sp, #28]
   230e4:	ldr	r2, [r2, #36]	; 0x24
   230e8:	cmp	r2, #0
   230ec:	beq	2370c <__assert_fail@plt+0x11d6c>
   230f0:	ldr	r1, [sp, #28]
   230f4:	ldr	r1, [r1, #40]	; 0x28
   230f8:	cmp	r1, #0
   230fc:	beq	2370c <__assert_fail@plt+0x11d6c>
   23100:	ldr	r0, [sp, #28]
   23104:	ldr	ip, [r0, #44]	; 0x2c
   23108:	cmp	ip, #0
   2310c:	beq	2370c <__assert_fail@plt+0x11d6c>
   23110:	ldr	r0, [r0, #48]	; 0x30
   23114:	cmp	r0, #0
   23118:	beq	2370c <__assert_fail@plt+0x11d6c>
   2311c:	ldr	r2, [r2, #8]
   23120:	cmp	r2, #0
   23124:	bne	23168 <__assert_fail@plt+0x117c8>
   23128:	ldr	r2, [r1, #8]
   2312c:	cmp	r2, #0
   23130:	bne	23168 <__assert_fail@plt+0x117c8>
   23134:	ldr	r2, [ip, #8]
   23138:	cmp	r2, #0
   2313c:	beq	23150 <__assert_fail@plt+0x117b0>
   23140:	ldr	r2, [sp, #44]	; 0x2c
   23144:	ldrsb	r2, [r2, #28]
   23148:	cmp	r2, #0
   2314c:	blt	23168 <__assert_fail@plt+0x117c8>
   23150:	cmp	r6, #0
   23154:	cmpne	r4, #0
   23158:	movne	r4, #1
   2315c:	moveq	r4, #0
   23160:	bne	2370c <__assert_fail@plt+0x11d6c>
   23164:	mov	r6, r4
   23168:	subs	r3, r5, r3
   2316c:	str	r3, [sp, #76]	; 0x4c
   23170:	movne	r3, #1
   23174:	strne	r3, [sp, #40]	; 0x28
   23178:	beq	23440 <__assert_fail@plt+0x11aa0>
   2317c:	ldr	r1, [sp, #28]
   23180:	ldr	lr, [sp, #44]	; 0x2c
   23184:	ldr	r7, [sp, #56]	; 0x38
   23188:	ldr	r2, [r1, #8]
   2318c:	ldr	ip, [r1, #92]	; 0x5c
   23190:	ldrb	r0, [r1, #88]	; 0x58
   23194:	ldr	r1, [lr, #20]
   23198:	add	r2, r2, #1
   2319c:	ldr	r3, [lr, #12]
   231a0:	ldr	lr, [sp, #72]	; 0x48
   231a4:	cmp	r2, ip
   231a8:	mov	r5, r1
   231ac:	movlt	r2, ip
   231b0:	str	r1, [sp, #88]	; 0x58
   231b4:	str	lr, [sp, #196]	; 0xc4
   231b8:	add	r1, lr, #1
   231bc:	str	lr, [sp, #192]	; 0xc0
   231c0:	str	lr, [sp, #204]	; 0xcc
   231c4:	str	lr, [sp, #200]	; 0xc8
   231c8:	mov	lr, r5
   231cc:	adds	r5, r5, #0
   231d0:	movne	r5, #1
   231d4:	lsr	r3, r3, #22
   231d8:	cmp	r2, r1
   231dc:	movlt	r1, r2
   231e0:	and	r3, r3, #1
   231e4:	str	ip, [sp, #228]	; 0xe4
   231e8:	lsr	r2, r0, #3
   231ec:	lsr	ip, r0, #2
   231f0:	and	ip, ip, #1
   231f4:	and	r2, r2, #1
   231f8:	strb	r3, [sp, #220]	; 0xdc
   231fc:	add	r0, sp, #148	; 0x94
   23200:	orr	r3, r3, r5
   23204:	strb	r3, [sp, #223]	; 0xdf
   23208:	str	r7, [sp, #148]	; 0x94
   2320c:	str	lr, [sp, #212]	; 0xd4
   23210:	strb	ip, [sp, #221]	; 0xdd
   23214:	strb	r2, [sp, #222]	; 0xde
   23218:	bl	1c080 <__assert_fail@plt+0xa6e0>
   2321c:	subs	r3, r0, #0
   23220:	str	r3, [sp, #48]	; 0x30
   23224:	bne	241c8 <__assert_fail@plt+0x12828>
   23228:	ldr	r1, [sp, #28]
   2322c:	ldrb	r2, [sp, #223]	; 0xdf
   23230:	add	r1, r1, #96	; 0x60
   23234:	ldrb	r3, [r1, #-8]
   23238:	cmp	r2, #0
   2323c:	str	r1, [sp, #216]	; 0xd8
   23240:	lsr	r3, r3, #4
   23244:	and	r3, r3, #1
   23248:	strb	r3, [sp, #226]	; 0xe2
   2324c:	bne	23268 <__assert_fail@plt+0x118c8>
   23250:	ldr	r3, [sp, #28]
   23254:	ldr	r2, [sp, #56]	; 0x38
   23258:	ldr	r3, [r3, #92]	; 0x5c
   2325c:	str	r2, [sp, #152]	; 0x98
   23260:	cmp	r3, #1
   23264:	ble	24150 <__assert_fail@plt+0x127b0>
   23268:	mov	r1, #0
   2326c:	ldr	r3, [sp, #44]	; 0x2c
   23270:	mvn	r2, #0
   23274:	str	r1, [sp, #176]	; 0xb0
   23278:	ldrb	r3, [r3, #28]
   2327c:	str	r1, [sp, #180]	; 0xb4
   23280:	lsr	r3, r3, #7
   23284:	strb	r3, [sp, #225]	; 0xe1
   23288:	ldr	r3, [sp, #28]
   2328c:	ldr	r8, [r3, #76]	; 0x4c
   23290:	ldr	r3, [sp, #468]	; 0x1d4
   23294:	str	r2, [sp, #240]	; 0xf0
   23298:	str	r3, [sp, #204]	; 0xcc
   2329c:	str	r3, [sp, #200]	; 0xc8
   232a0:	lsl	r7, r8, #1
   232a4:	ldr	r3, [sp, #480]	; 0x1e0
   232a8:	cmp	r7, #0
   232ac:	str	r3, [sp, #236]	; 0xec
   232b0:	ble	232ec <__assert_fail@plt+0x1194c>
   232b4:	ldr	r3, [pc, #4068]	; 242a0 <__assert_fail@plt+0x12900>
   232b8:	cmp	r7, r3
   232bc:	bgt	23c58 <__assert_fail@plt+0x122b8>
   232c0:	add	r0, r7, r8, lsl #2
   232c4:	lsl	r0, r0, #3
   232c8:	bl	1ba3c <__assert_fail@plt+0xa09c>
   232cc:	str	r0, [sp, #264]	; 0x108
   232d0:	lsl	r0, r8, #3
   232d4:	bl	1ba3c <__assert_fail@plt+0xa09c>
   232d8:	ldr	r3, [sp, #264]	; 0x108
   232dc:	cmp	r0, #0
   232e0:	cmpne	r3, #0
   232e4:	str	r0, [sp, #280]	; 0x118
   232e8:	beq	23c58 <__assert_fail@plt+0x122b8>
   232ec:	ldr	r3, [sp, #76]	; 0x4c
   232f0:	str	r7, [sp, #260]	; 0x104
   232f4:	cmp	r3, #1
   232f8:	mov	r3, #1
   232fc:	str	r7, [sp, #276]	; 0x114
   23300:	str	r3, [sp, #268]	; 0x10c
   23304:	bls	242cc <__assert_fail@plt+0x1292c>
   23308:	ldr	r3, [sp, #184]	; 0xb8
   2330c:	cmn	r3, #-1073741822	; 0xc0000002
   23310:	bhi	23c58 <__assert_fail@plt+0x122b8>
   23314:	add	r3, r3, #1
   23318:	lsl	r0, r3, #2
   2331c:	bl	1ba3c <__assert_fail@plt+0xa09c>
   23320:	cmp	r0, #0
   23324:	str	r0, [sp, #248]	; 0xf8
   23328:	beq	23c90 <__assert_fail@plt+0x122f0>
   2332c:	ldr	r3, [sp, #480]	; 0x1e0
   23330:	str	r6, [sp, #116]	; 0x74
   23334:	tst	r3, #1
   23338:	moveq	r3, #6
   2333c:	movne	r3, #4
   23340:	cmp	r6, r4
   23344:	movle	r2, #1
   23348:	mvngt	r2, #0
   2334c:	str	r2, [sp, #92]	; 0x5c
   23350:	str	r3, [sp, #208]	; 0xd0
   23354:	movlt	r2, r6
   23358:	movge	r2, r4
   2335c:	ldr	r3, [sp, #28]
   23360:	str	r2, [sp, #68]	; 0x44
   23364:	movge	r2, r6
   23368:	movlt	r2, r4
   2336c:	str	r2, [sp, #52]	; 0x34
   23370:	ldr	r2, [sp, #60]	; 0x3c
   23374:	ldr	r3, [r3, #92]	; 0x5c
   23378:	cmp	r2, #0
   2337c:	str	r3, [sp, #80]	; 0x50
   23380:	beq	24390 <__assert_fail@plt+0x129f0>
   23384:	ldr	r3, [sp, #80]	; 0x50
   23388:	cmp	r3, #1
   2338c:	moveq	r3, #4
   23390:	beq	233b8 <__assert_fail@plt+0x11a18>
   23394:	ldr	r3, [sp, #44]	; 0x2c
   23398:	ldr	r2, [sp, #88]	; 0x58
   2339c:	ldr	r3, [r3, #12]
   233a0:	lsr	r3, r3, #22
   233a4:	eor	r3, r3, #1
   233a8:	cmp	r2, #0
   233ac:	movne	r3, #0
   233b0:	andeq	r3, r3, #1
   233b4:	lsl	r3, r3, #2
   233b8:	cmp	r6, r4
   233bc:	orr	r3, r5, r3
   233c0:	movle	r2, #2
   233c4:	movgt	r2, #0
   233c8:	orr	r3, r3, r2
   233cc:	ldr	r2, [sp, #68]	; 0x44
   233d0:	ldr	r1, [sp, #52]	; 0x34
   233d4:	cmp	r6, r2
   233d8:	movge	r2, #0
   233dc:	movlt	r2, #1
   233e0:	cmp	r6, r1
   233e4:	orrgt	r2, r2, #1
   233e8:	cmp	r2, #0
   233ec:	str	r2, [sp, #108]	; 0x6c
   233f0:	bne	236fc <__assert_fail@plt+0x11d5c>
   233f4:	sub	r3, r3, #4
   233f8:	cmp	r6, r4
   233fc:	str	r3, [sp, #84]	; 0x54
   23400:	add	r3, sp, #424	; 0x1a8
   23404:	suble	r3, r3, #308	; 0x134
   23408:	movgt	r3, #0
   2340c:	str	r3, [sp, #100]	; 0x64
   23410:	movle	r3, #1
   23414:	movgt	r3, #0
   23418:	str	r3, [sp, #104]	; 0x68
   2341c:	ldr	r3, [sp, #84]	; 0x54
   23420:	cmp	r3, #4
   23424:	ldrls	pc, [pc, r3, lsl #2]
   23428:	b	241d0 <__assert_fail@plt+0x12830>
   2342c:	andeq	r4, r2, r0, asr #1
   23430:	andeq	r4, r2, r0, asr #1
   23434:	andeq	r3, r2, r8, asr r4
   23438:	andeq	r4, r2, r4, asr r0
   2343c:	andeq	r3, r2, r0, lsl #10
   23440:	ldr	r3, [sp, #28]
   23444:	ldr	r3, [r3, #76]	; 0x4c
   23448:	adds	r3, r3, #0
   2344c:	movne	r3, #1
   23450:	str	r3, [sp, #40]	; 0x28
   23454:	b	2317c <__assert_fail@plt+0x117dc>
   23458:	ldr	r3, [sp, #52]	; 0x34
   2345c:	cmp	r3, r6
   23460:	ble	234b8 <__assert_fail@plt+0x11b18>
   23464:	ldr	r3, [sp, #56]	; 0x38
   23468:	ldr	r1, [sp, #60]	; 0x3c
   2346c:	ldrb	r2, [r3, r6]
   23470:	add	r3, r3, r6
   23474:	ldrb	r2, [r1, r2]
   23478:	cmp	r2, #0
   2347c:	bne	23500 <__assert_fail@plt+0x11b60>
   23480:	add	r2, r6, #1
   23484:	ldr	ip, [sp, #60]	; 0x3c
   23488:	ldr	r0, [sp, #52]	; 0x34
   2348c:	b	234a4 <__assert_fail@plt+0x11b04>
   23490:	ldrb	r1, [r3, #1]!
   23494:	add	r2, r2, #1
   23498:	ldrb	r1, [ip, r1]
   2349c:	cmp	r1, #0
   234a0:	bne	24344 <__assert_fail@plt+0x129a4>
   234a4:	cmp	r2, r0
   234a8:	mov	r6, r2
   234ac:	bne	23490 <__assert_fail@plt+0x11af0>
   234b0:	ldr	r3, [sp, #52]	; 0x34
   234b4:	str	r3, [sp, #116]	; 0x74
   234b8:	ldr	r3, [sp, #52]	; 0x34
   234bc:	cmp	r3, r6
   234c0:	bne	23500 <__assert_fail@plt+0x11b60>
   234c4:	ldr	r2, [sp, #72]	; 0x48
   234c8:	ldr	r1, [sp, #88]	; 0x58
   234cc:	cmp	r2, r3
   234d0:	movle	r3, #0
   234d4:	ldrgt	r2, [sp, #56]	; 0x38
   234d8:	ldrbgt	r3, [r2, r3]
   234dc:	cmp	r1, #0
   234e0:	mov	r2, r3
   234e4:	movne	r2, r1
   234e8:	ldrbne	r2, [r2, r3]
   234ec:	ldr	r3, [sp, #60]	; 0x3c
   234f0:	ldrb	r3, [r3, r2]
   234f4:	cmp	r3, #0
   234f8:	beq	236fc <__assert_fail@plt+0x11d5c>
   234fc:	ldr	r6, [sp, #52]	; 0x34
   23500:	ldr	r2, [sp, #480]	; 0x1e0
   23504:	mov	r1, r6
   23508:	add	r0, sp, #148	; 0x94
   2350c:	bl	20184 <__assert_fail@plt+0xe7e4>
   23510:	subs	r3, r0, #0
   23514:	str	r3, [sp, #48]	; 0x30
   23518:	bne	241c8 <__assert_fail@plt+0x12828>
   2351c:	ldr	r3, [sp, #80]	; 0x50
   23520:	cmp	r3, #1
   23524:	beq	23544 <__assert_fail@plt+0x11ba4>
   23528:	ldr	r3, [sp, #176]	; 0xb0
   2352c:	cmp	r3, #0
   23530:	beq	23544 <__assert_fail@plt+0x11ba4>
   23534:	ldr	r3, [sp, #156]	; 0x9c
   23538:	ldr	r3, [r3]
   2353c:	cmn	r3, #1
   23540:	beq	236cc <__assert_fail@plt+0x11d2c>
   23544:	ldr	r4, [sp, #232]	; 0xe8
   23548:	mov	r3, #0
   2354c:	str	r3, [sp, #268]	; 0x10c
   23550:	ldr	fp, [r4, #36]	; 0x24
   23554:	str	r3, [sp, #256]	; 0x100
   23558:	str	r3, [sp, #252]	; 0xfc
   2355c:	str	r3, [sp, #124]	; 0x7c
   23560:	ldrsb	r3, [fp, #52]	; 0x34
   23564:	ldr	r2, [sp, #188]	; 0xbc
   23568:	cmp	r3, #0
   2356c:	str	r2, [sp, #12]
   23570:	blt	24260 <__assert_fail@plt+0x128c0>
   23574:	ldr	r3, [sp, #248]	; 0xf8
   23578:	cmp	r3, #0
   2357c:	beq	2430c <__assert_fail@plt+0x1296c>
   23580:	ldr	r2, [r4, #76]	; 0x4c
   23584:	ldr	r1, [sp, #12]
   23588:	cmp	r2, #0
   2358c:	str	fp, [r3, r1, lsl #2]
   23590:	bne	24398 <__assert_fail@plt+0x129f8>
   23594:	ldrb	r3, [fp, #52]	; 0x34
   23598:	ldr	r2, [sp, #104]	; 0x68
   2359c:	str	r2, [sp, #16]
   235a0:	tst	r3, #16
   235a4:	bne	2435c <__assert_fail@plt+0x129bc>
   235a8:	mvn	r3, #0
   235ac:	str	r3, [sp, #20]
   235b0:	mov	r3, #0
   235b4:	str	r3, [sp, #36]	; 0x24
   235b8:	ldr	r3, [sp, #100]	; 0x64
   235bc:	ldr	r5, [sp, #188]	; 0xbc
   235c0:	str	r3, [sp, #32]
   235c4:	b	235d0 <__assert_fail@plt+0x11c30>
   235c8:	ldr	r5, [sp, #188]	; 0xbc
   235cc:	mov	fp, r4
   235d0:	ldr	r3, [sp, #204]	; 0xcc
   235d4:	cmp	r3, r5
   235d8:	ble	2378c <__assert_fail@plt+0x11dec>
   235dc:	ldr	r3, [sp, #184]	; 0xb8
   235e0:	add	r9, r5, #1
   235e4:	cmp	r9, r3
   235e8:	bge	23b44 <__assert_fail@plt+0x121a4>
   235ec:	ldr	r3, [sp, #176]	; 0xb0
   235f0:	cmp	r9, r3
   235f4:	bge	23ba0 <__assert_fail@plt+0x12200>
   235f8:	ldrb	r3, [fp, #52]	; 0x34
   235fc:	tst	r3, #32
   23600:	bne	2397c <__assert_fail@plt+0x11fdc>
   23604:	ldr	r3, [sp, #152]	; 0x98
   23608:	add	r2, r5, #1
   2360c:	str	r2, [sp, #188]	; 0xbc
   23610:	ldrb	r4, [r3, r5]
   23614:	ldr	r3, [fp, #44]	; 0x2c
   23618:	cmp	r3, #0
   2361c:	beq	23b70 <__assert_fail@plt+0x121d0>
   23620:	ldr	r4, [r3, r4, lsl #2]
   23624:	ldr	r3, [sp, #248]	; 0xf8
   23628:	cmp	r3, #0
   2362c:	beq	23644 <__assert_fail@plt+0x11ca4>
   23630:	mov	r2, r4
   23634:	add	r1, sp, #148	; 0x94
   23638:	add	r0, sp, #124	; 0x7c
   2363c:	bl	22be0 <__assert_fail@plt+0x11240>
   23640:	mov	r4, r0
   23644:	cmp	r4, #0
   23648:	beq	23720 <__assert_fail@plt+0x11d80>
   2364c:	ldr	r2, [sp, #16]
   23650:	ldrb	r3, [r4, #52]	; 0x34
   23654:	cmp	fp, r4
   23658:	movne	r2, #0
   2365c:	andeq	r2, r2, #1
   23660:	ldr	r1, [sp, #12]
   23664:	cmp	r2, #0
   23668:	movne	r1, r9
   2366c:	tst	r3, #16
   23670:	str	r2, [sp, #16]
   23674:	str	r1, [sp, #12]
   23678:	beq	235c8 <__assert_fail@plt+0x11c28>
   2367c:	tst	r3, #128	; 0x80
   23680:	bne	23928 <__assert_fail@plt+0x11f88>
   23684:	ldr	r3, [sp, #188]	; 0xbc
   23688:	str	r3, [sp, #20]
   2368c:	ldr	r3, [sp, #40]	; 0x28
   23690:	cmp	r3, #0
   23694:	beq	237ac <__assert_fail@plt+0x11e0c>
   23698:	mov	r3, #1
   2369c:	str	r3, [sp, #36]	; 0x24
   236a0:	mov	r3, #0
   236a4:	ldr	r5, [sp, #20]
   236a8:	str	r3, [sp, #32]
   236ac:	b	235cc <__assert_fail@plt+0x11c2c>
   236b0:	mov	r0, r5
   236b4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   236b8:	mov	r0, #0
   236bc:	bl	1b944 <__assert_fail@plt+0x9fa4>
   236c0:	add	r0, sp, #148	; 0x94
   236c4:	bl	1cfdc <__assert_fail@plt+0xb63c>
   236c8:	ldr	r6, [sp, #116]	; 0x74
   236cc:	ldr	r3, [sp, #92]	; 0x5c
   236d0:	ldr	r2, [sp, #68]	; 0x44
   236d4:	add	r6, r6, r3
   236d8:	ldr	r3, [sp, #52]	; 0x34
   236dc:	str	r6, [sp, #116]	; 0x74
   236e0:	cmp	r3, r6
   236e4:	movge	r3, #0
   236e8:	movlt	r3, #1
   236ec:	cmp	r2, r6
   236f0:	orrgt	r3, r3, #1
   236f4:	cmp	r3, #0
   236f8:	beq	2341c <__assert_fail@plt+0x11a7c>
   236fc:	mov	r3, #1
   23700:	ldr	r7, [sp, #248]	; 0xf8
   23704:	str	r3, [sp, #48]	; 0x30
   23708:	b	23c64 <__assert_fail@plt+0x122c4>
   2370c:	mov	r3, #1
   23710:	str	r3, [sp, #48]	; 0x30
   23714:	ldr	r0, [sp, #48]	; 0x30
   23718:	add	sp, sp, #428	; 0x1ac
   2371c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23720:	ldr	r3, [sp, #124]	; 0x7c
   23724:	cmp	r3, #0
   23728:	bne	24388 <__assert_fail@plt+0x129e8>
   2372c:	ldr	r2, [sp, #248]	; 0xf8
   23730:	cmp	r2, #0
   23734:	beq	2378c <__assert_fail@plt+0x11dec>
   23738:	ldr	r3, [sp, #40]	; 0x28
   2373c:	eor	r5, r3, #1
   23740:	ldr	r3, [sp, #36]	; 0x24
   23744:	ands	r5, r5, r3
   23748:	bne	2378c <__assert_fail@plt+0x11dec>
   2374c:	ldr	r3, [sp, #188]	; 0xbc
   23750:	ldr	lr, [sp, #252]	; 0xfc
   23754:	mov	ip, r3
   23758:	add	r2, r2, r3, lsl #2
   2375c:	mov	r0, r5
   23760:	b	23778 <__assert_fail@plt+0x11dd8>
   23764:	ldr	r1, [r2, #4]!
   23768:	add	ip, ip, #1
   2376c:	cmp	r1, #0
   23770:	mov	r0, #1
   23774:	bne	2394c <__assert_fail@plt+0x11fac>
   23778:	add	r3, r3, #1
   2377c:	cmp	lr, r3
   23780:	bge	23764 <__assert_fail@plt+0x11dc4>
   23784:	cmp	r0, #0
   23788:	strne	ip, [sp, #188]	; 0xbc
   2378c:	ldr	r3, [sp, #32]
   23790:	cmp	r3, #0
   23794:	beq	237ac <__assert_fail@plt+0x11e0c>
   23798:	ldr	r2, [sp, #32]
   2379c:	ldr	r1, [sp, #12]
   237a0:	ldr	r3, [r2]
   237a4:	add	r3, r3, r1
   237a8:	str	r3, [r2]
   237ac:	ldr	r3, [sp, #20]
   237b0:	cmn	r3, #1
   237b4:	beq	236c0 <__assert_fail@plt+0x11d20>
   237b8:	cmn	r3, #2
   237bc:	beq	23c58 <__assert_fail@plt+0x122b8>
   237c0:	ldr	r3, [sp, #44]	; 0x2c
   237c4:	ldr	r2, [sp, #20]
   237c8:	ldrb	r3, [r3, #28]
   237cc:	str	r2, [sp, #240]	; 0xf0
   237d0:	ldr	r2, [sp, #76]	; 0x4c
   237d4:	lsr	r3, r3, #4
   237d8:	eor	r3, r3, #1
   237dc:	cmp	r2, #1
   237e0:	movls	r3, #0
   237e4:	andhi	r3, r3, #1
   237e8:	cmp	r3, #0
   237ec:	beq	23c04 <__assert_fail@plt+0x12264>
   237f0:	ldr	r3, [sp, #20]
   237f4:	ldr	r7, [sp, #248]	; 0xf8
   237f8:	mov	r2, r3
   237fc:	add	r0, sp, #148	; 0x94
   23800:	ldr	r1, [r7, r3, lsl #2]
   23804:	bl	200a4 <__assert_fail@plt+0xe704>
   23808:	ldr	r3, [sp, #28]
   2380c:	ldrb	r3, [r3, #88]	; 0x58
   23810:	tst	r3, #1
   23814:	str	r0, [sp, #244]	; 0xf4
   23818:	beq	2413c <__assert_fail@plt+0x1279c>
   2381c:	ldr	r3, [sp, #20]
   23820:	ldr	fp, [sp, #232]	; 0xe8
   23824:	cmn	r3, #-1073741822	; 0xc0000002
   23828:	ldr	r9, [sp, #244]	; 0xf4
   2382c:	bhi	23c94 <__assert_fail@plt+0x122f4>
   23830:	ldr	r3, [sp, #20]
   23834:	add	r7, r3, #1
   23838:	lsl	r4, r7, #2
   2383c:	mov	r0, r4
   23840:	bl	1ba3c <__assert_fail@plt+0xa09c>
   23844:	subs	r5, r0, #0
   23848:	beq	24478 <__assert_fail@plt+0x12ad8>
   2384c:	ldr	r3, [fp, #76]	; 0x4c
   23850:	cmp	r3, #0
   23854:	beq	23ca0 <__assert_fail@plt+0x12300>
   23858:	mov	r0, r4
   2385c:	bl	1ba3c <__assert_fail@plt+0xa09c>
   23860:	subs	r6, r0, #0
   23864:	beq	243d8 <__assert_fail@plt+0x12a38>
   23868:	ldr	r4, [sp, #20]
   2386c:	str	fp, [sp, #12]
   23870:	add	sl, sp, #300	; 0x12c
   23874:	mov	fp, r7
   23878:	lsl	r8, fp, #2
   2387c:	mov	r2, r8
   23880:	mov	r1, #0
   23884:	mov	r0, r6
   23888:	bl	11814 <memset@plt>
   2388c:	mov	r3, #0
   23890:	str	r5, [sp, #284]	; 0x11c
   23894:	str	r6, [sp, #288]	; 0x120
   23898:	str	r9, [sp, #292]	; 0x124
   2389c:	str	r4, [sp, #296]	; 0x128
   238a0:	add	r1, sp, #284	; 0x11c
   238a4:	str	r3, [sl]
   238a8:	str	r3, [sl, #4]
   238ac:	str	r3, [sl, #8]
   238b0:	add	r0, sp, #148	; 0x94
   238b4:	bl	22d5c <__assert_fail@plt+0x113bc>
   238b8:	mov	r7, r0
   238bc:	ldr	r0, [sp, #308]	; 0x134
   238c0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   238c4:	cmp	r7, #0
   238c8:	bne	244ac <__assert_fail@plt+0x12b0c>
   238cc:	ldr	r2, [r5]
   238d0:	cmp	r2, #0
   238d4:	bne	243f8 <__assert_fail@plt+0x12a58>
   238d8:	ldr	r2, [r6]
   238dc:	cmp	r2, #0
   238e0:	bne	243f8 <__assert_fail@plt+0x12a58>
   238e4:	ldr	r3, [sp, #248]	; 0xf8
   238e8:	sub	r8, r8, #4
   238ec:	add	r3, r3, r8
   238f0:	subs	r4, r4, #1
   238f4:	bcc	242ac <__assert_fail@plt+0x1290c>
   238f8:	ldr	r1, [r3, #-4]!
   238fc:	cmp	r1, #0
   23900:	beq	238f0 <__assert_fail@plt+0x11f50>
   23904:	ldrb	r2, [r1, #52]	; 0x34
   23908:	tst	r2, #16
   2390c:	beq	238f0 <__assert_fail@plt+0x11f50>
   23910:	mov	r2, r4
   23914:	add	r0, sp, #148	; 0x94
   23918:	bl	200a4 <__assert_fail@plt+0xe704>
   2391c:	add	fp, r4, #1
   23920:	mov	r9, r0
   23924:	b	23878 <__assert_fail@plt+0x11ed8>
   23928:	ldr	r5, [sp, #188]	; 0xbc
   2392c:	mov	r1, r4
   23930:	mov	r2, r5
   23934:	add	r0, sp, #148	; 0x94
   23938:	bl	200a4 <__assert_fail@plt+0xe704>
   2393c:	cmp	r0, #0
   23940:	beq	235cc <__assert_fail@plt+0x11c2c>
   23944:	str	r5, [sp, #20]
   23948:	b	2368c <__assert_fail@plt+0x11cec>
   2394c:	mov	r2, #0
   23950:	add	r1, sp, #148	; 0x94
   23954:	add	r0, sp, #124	; 0x7c
   23958:	str	ip, [sp, #188]	; 0xbc
   2395c:	bl	22be0 <__assert_fail@plt+0x11240>
   23960:	ldr	r3, [sp, #124]	; 0x7c
   23964:	cmp	r3, #0
   23968:	bne	24494 <__assert_fail@plt+0x12af4>
   2396c:	cmp	r0, #0
   23970:	bne	244a4 <__assert_fail@plt+0x12b04>
   23974:	ldr	r2, [sp, #248]	; 0xf8
   23978:	b	2374c <__assert_fail@plt+0x11dac>
   2397c:	ldr	r3, [fp, #8]
   23980:	ldr	sl, [sp, #232]	; 0xe8
   23984:	cmp	r3, #0
   23988:	ble	23a74 <__assert_fail@plt+0x120d4>
   2398c:	add	r2, sl, #128	; 0x80
   23990:	str	r9, [sp, #64]	; 0x40
   23994:	mov	r4, #0
   23998:	str	r2, [sp, #24]
   2399c:	mov	r9, r3
   239a0:	b	23a08 <__assert_fail@plt+0x12068>
   239a4:	tst	r0, #1
   239a8:	beq	239fc <__assert_fail@plt+0x1205c>
   239ac:	tst	r6, #8
   239b0:	bne	239fc <__assert_fail@plt+0x1205c>
   239b4:	tst	r6, #32
   239b8:	beq	239c4 <__assert_fail@plt+0x12024>
   239bc:	tst	r0, #2
   239c0:	beq	239fc <__assert_fail@plt+0x1205c>
   239c4:	tst	r6, #128	; 0x80
   239c8:	beq	239d4 <__assert_fail@plt+0x12034>
   239cc:	tst	r0, #8
   239d0:	beq	239fc <__assert_fail@plt+0x1205c>
   239d4:	str	r5, [sp]
   239d8:	mov	r0, r8
   239dc:	add	r3, sp, #148	; 0x94
   239e0:	mov	r2, r7
   239e4:	ldr	r1, [sp, #24]
   239e8:	bl	21a20 <__assert_fail@plt+0x10080>
   239ec:	cmp	r0, #0
   239f0:	bne	23a80 <__assert_fail@plt+0x120e0>
   239f4:	ldr	r5, [sp, #188]	; 0xbc
   239f8:	ldr	r9, [fp, #8]
   239fc:	add	r4, r4, #1
   23a00:	cmp	r4, r9
   23a04:	bge	23a70 <__assert_fail@plt+0x120d0>
   23a08:	ldr	r2, [fp, #12]
   23a0c:	ldr	r8, [sl]
   23a10:	ldr	r7, [r2, r4, lsl #2]
   23a14:	add	r2, r8, r7, lsl #3
   23a18:	ldrb	r1, [r2, #6]
   23a1c:	tst	r1, #16
   23a20:	beq	239fc <__assert_fail@plt+0x1205c>
   23a24:	ldr	r6, [r2, #4]
   23a28:	ldr	r3, [pc, #2164]	; 242a4 <__assert_fail@plt+0x12904>
   23a2c:	tst	r6, r3
   23a30:	beq	239d4 <__assert_fail@plt+0x12034>
   23a34:	ldr	r2, [sp, #236]	; 0xec
   23a38:	mov	r1, r5
   23a3c:	add	r0, sp, #148	; 0x94
   23a40:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   23a44:	ldr	r3, [pc, #2140]	; 242a8 <__assert_fail@plt+0x12908>
   23a48:	and	r6, r3, r6, lsr #8
   23a4c:	tst	r6, #4
   23a50:	bne	239a4 <__assert_fail@plt+0x12004>
   23a54:	tst	r6, #8
   23a58:	beq	239b4 <__assert_fail@plt+0x12014>
   23a5c:	tst	r0, #1
   23a60:	beq	239b4 <__assert_fail@plt+0x12014>
   23a64:	add	r4, r4, #1
   23a68:	cmp	r4, r9
   23a6c:	blt	23a08 <__assert_fail@plt+0x12068>
   23a70:	ldr	r9, [sp, #64]	; 0x40
   23a74:	mov	r3, #0
   23a78:	str	r3, [sp, #124]	; 0x7c
   23a7c:	b	23604 <__assert_fail@plt+0x11c64>
   23a80:	ldr	r3, [sp, #268]	; 0x10c
   23a84:	ldr	r6, [sp, #188]	; 0xbc
   23a88:	cmp	r3, r0
   23a8c:	add	r6, r0, r6
   23a90:	movlt	r3, r0
   23a94:	mov	r1, r6
   23a98:	add	r0, sp, #148	; 0x94
   23a9c:	str	r3, [sp, #268]	; 0x10c
   23aa0:	bl	1d4bc <__assert_fail@plt+0xbb1c>
   23aa4:	cmp	r0, #0
   23aa8:	str	r0, [sp, #136]	; 0x88
   23aac:	bne	23be8 <__assert_fail@plt+0x12248>
   23ab0:	ldr	r3, [sl, #12]
   23ab4:	ldr	r8, [sp, #248]	; 0xf8
   23ab8:	ldr	r2, [sl, #24]
   23abc:	ldr	r3, [r3, r7, lsl #2]
   23ac0:	ldr	r1, [r8, r6, lsl #2]
   23ac4:	add	r3, r3, r3, lsl #1
   23ac8:	cmp	r1, #0
   23acc:	add	r2, r2, r3, lsl #2
   23ad0:	beq	23bb0 <__assert_fail@plt+0x12210>
   23ad4:	ldr	r1, [r1, #40]	; 0x28
   23ad8:	add	r0, sp, #284	; 0x11c
   23adc:	bl	1e044 <__assert_fail@plt+0xc6a4>
   23ae0:	cmp	r0, #0
   23ae4:	str	r0, [sp, #136]	; 0x88
   23ae8:	bne	23be8 <__assert_fail@plt+0x12248>
   23aec:	ldr	r2, [sp, #236]	; 0xec
   23af0:	sub	r1, r6, #1
   23af4:	add	r0, sp, #148	; 0x94
   23af8:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   23afc:	add	r2, sp, #284	; 0x11c
   23b00:	mov	r1, sl
   23b04:	ldr	r7, [sp, #248]	; 0xf8
   23b08:	mov	r3, r0
   23b0c:	add	r0, sp, #136	; 0x88
   23b10:	bl	1e190 <__assert_fail@plt+0xc7f0>
   23b14:	str	r0, [r7, r6, lsl #2]
   23b18:	ldr	r0, [sp, #292]	; 0x124
   23b1c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   23b20:	ldr	r7, [sp, #248]	; 0xf8
   23b24:	ldr	r3, [r7, r6, lsl #2]
   23b28:	cmp	r3, #0
   23b2c:	bne	239f4 <__assert_fail@plt+0x12054>
   23b30:	ldr	r0, [sp, #136]	; 0x88
   23b34:	cmp	r0, #0
   23b38:	beq	239f4 <__assert_fail@plt+0x12054>
   23b3c:	ldr	r9, [sp, #64]	; 0x40
   23b40:	b	23bf0 <__assert_fail@plt+0x12250>
   23b44:	ldr	r2, [sp, #196]	; 0xc4
   23b48:	cmp	r3, r2
   23b4c:	bge	235ec <__assert_fail@plt+0x11c4c>
   23b50:	add	r1, r5, #2
   23b54:	add	r0, sp, #148	; 0x94
   23b58:	bl	1ca08 <__assert_fail@plt+0xb068>
   23b5c:	cmp	r0, #0
   23b60:	str	r0, [sp, #124]	; 0x7c
   23b64:	bne	23c58 <__assert_fail@plt+0x122b8>
   23b68:	ldr	r5, [sp, #188]	; 0xbc
   23b6c:	b	235f8 <__assert_fail@plt+0x11c58>
   23b70:	ldr	r5, [fp, #48]	; 0x30
   23b74:	cmp	r5, #0
   23b78:	beq	242e0 <__assert_fail@plt+0x12940>
   23b7c:	ldr	r1, [sp, #188]	; 0xbc
   23b80:	ldr	r2, [sp, #236]	; 0xec
   23b84:	sub	r1, r1, #1
   23b88:	add	r0, sp, #148	; 0x94
   23b8c:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   23b90:	tst	r0, #1
   23b94:	addne	r4, r4, #256	; 0x100
   23b98:	ldr	r4, [r5, r4, lsl #2]
   23b9c:	b	23624 <__assert_fail@plt+0x11c84>
   23ba0:	ldr	r2, [sp, #196]	; 0xc4
   23ba4:	cmp	r3, r2
   23ba8:	bge	235f8 <__assert_fail@plt+0x11c58>
   23bac:	b	23b50 <__assert_fail@plt+0x121b0>
   23bb0:	ldm	r2, {r0, r1, r2}
   23bb4:	add	r3, sp, #284	; 0x11c
   23bb8:	stm	r3, {r0, r1, r2}
   23bbc:	sub	r1, r6, #1
   23bc0:	ldr	r2, [sp, #236]	; 0xec
   23bc4:	add	r0, sp, #148	; 0x94
   23bc8:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   23bcc:	add	r2, sp, #284	; 0x11c
   23bd0:	mov	r1, sl
   23bd4:	mov	r3, r0
   23bd8:	add	r0, sp, #136	; 0x88
   23bdc:	bl	1e190 <__assert_fail@plt+0xc7f0>
   23be0:	str	r0, [r8, r6, lsl #2]
   23be4:	b	23b20 <__assert_fail@plt+0x12180>
   23be8:	ldr	r9, [sp, #64]	; 0x40
   23bec:	ldr	r7, [sp, #248]	; 0xf8
   23bf0:	cmp	r7, #0
   23bf4:	str	r0, [sp, #124]	; 0x7c
   23bf8:	beq	23c94 <__assert_fail@plt+0x122f4>
   23bfc:	mov	r4, #0
   23c00:	b	23630 <__assert_fail@plt+0x11c90>
   23c04:	ldr	r3, [sp, #28]
   23c08:	ldr	r7, [sp, #248]	; 0xf8
   23c0c:	ldr	r4, [r3, #76]	; 0x4c
   23c10:	cmp	r4, #0
   23c14:	beq	23d18 <__assert_fail@plt+0x12378>
   23c18:	ldr	r3, [sp, #20]
   23c1c:	add	r0, sp, #148	; 0x94
   23c20:	mov	r2, r3
   23c24:	ldr	r1, [r7, r3, lsl #2]
   23c28:	bl	200a4 <__assert_fail@plt+0xe704>
   23c2c:	str	r0, [sp, #244]	; 0xf4
   23c30:	b	24144 <__assert_fail@plt+0x127a4>
   23c34:	tst	r0, #4
   23c38:	beq	23574 <__assert_fail@plt+0x11bd4>
   23c3c:	mov	r3, r0
   23c40:	ldr	r2, [fp, #40]	; 0x28
   23c44:	mov	r1, r4
   23c48:	add	r0, sp, #124	; 0x7c
   23c4c:	bl	1e190 <__assert_fail@plt+0xc7f0>
   23c50:	subs	fp, r0, #0
   23c54:	bne	23574 <__assert_fail@plt+0x11bd4>
   23c58:	ldr	r7, [sp, #248]	; 0xf8
   23c5c:	mov	r3, #12
   23c60:	str	r3, [sp, #48]	; 0x30
   23c64:	mov	r0, r7
   23c68:	bl	1b944 <__assert_fail@plt+0x9fa4>
   23c6c:	ldr	r3, [sp, #28]
   23c70:	ldr	r3, [r3, #76]	; 0x4c
   23c74:	cmp	r3, #0
   23c78:	bne	24284 <__assert_fail@plt+0x128e4>
   23c7c:	add	r0, sp, #148	; 0x94
   23c80:	bl	1ce38 <__assert_fail@plt+0xb498>
   23c84:	ldr	r0, [sp, #48]	; 0x30
   23c88:	add	sp, sp, #428	; 0x1ac
   23c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c90:	mov	r7, r0
   23c94:	mov	r3, #12
   23c98:	str	r3, [sp, #48]	; 0x30
   23c9c:	b	23c64 <__assert_fail@plt+0x122c4>
   23ca0:	ldr	r2, [sp, #20]
   23ca4:	add	r1, sp, #284	; 0x11c
   23ca8:	add	r0, sp, #148	; 0x94
   23cac:	str	r3, [sp, #288]	; 0x120
   23cb0:	str	r2, [sp, #296]	; 0x128
   23cb4:	str	r3, [sp, #300]	; 0x12c
   23cb8:	str	r3, [sp, #304]	; 0x130
   23cbc:	str	r3, [sp, #308]	; 0x134
   23cc0:	str	r5, [sp, #284]	; 0x11c
   23cc4:	str	r9, [sp, #292]	; 0x124
   23cc8:	bl	22d5c <__assert_fail@plt+0x113bc>
   23ccc:	mov	r8, r0
   23cd0:	ldr	r0, [sp, #308]	; 0x134
   23cd4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   23cd8:	cmp	r8, #0
   23cdc:	bne	2442c <__assert_fail@plt+0x12a8c>
   23ce0:	ldr	r3, [r5]
   23ce4:	cmp	r3, #0
   23ce8:	beq	236b0 <__assert_fail@plt+0x11d10>
   23cec:	ldr	r0, [sp, #248]	; 0xf8
   23cf0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   23cf4:	ldr	r3, [sp, #20]
   23cf8:	mov	r0, #0
   23cfc:	str	r3, [sp, #240]	; 0xf0
   23d00:	str	r5, [sp, #248]	; 0xf8
   23d04:	str	r9, [sp, #244]	; 0xf4
   23d08:	bl	1b944 <__assert_fail@plt+0x9fa4>
   23d0c:	mov	r0, #0
   23d10:	bl	1b944 <__assert_fail@plt+0x9fa4>
   23d14:	ldr	r7, [sp, #248]	; 0xf8
   23d18:	ldr	r3, [sp, #76]	; 0x4c
   23d1c:	cmp	r3, #0
   23d20:	beq	23c64 <__assert_fail@plt+0x122c4>
   23d24:	cmp	r3, #1
   23d28:	bls	23d50 <__assert_fail@plt+0x123b0>
   23d2c:	ldr	r3, [sp, #76]	; 0x4c
   23d30:	mvn	r1, #0
   23d34:	sub	r2, r3, #-536870911	; 0xe0000001
   23d38:	ldr	r3, [sp, #476]	; 0x1dc
   23d3c:	add	r2, r3, r2, lsl #3
   23d40:	str	r1, [r3, #12]
   23d44:	str	r1, [r3, #8]!
   23d48:	cmp	r2, r3
   23d4c:	bne	23d40 <__assert_fail@plt+0x123a0>
   23d50:	ldr	r3, [sp, #44]	; 0x2c
   23d54:	ldr	r1, [sp, #476]	; 0x1dc
   23d58:	ldr	r2, [sp, #240]	; 0xf0
   23d5c:	ldrb	r3, [r3, #28]
   23d60:	str	r2, [r1, #4]
   23d64:	ldr	r2, [sp, #76]	; 0x4c
   23d68:	mov	r4, #0
   23d6c:	lsr	r3, r3, #4
   23d70:	eor	r3, r3, #1
   23d74:	cmp	r2, #1
   23d78:	moveq	r3, #0
   23d7c:	andne	r3, r3, #1
   23d80:	cmp	r3, #0
   23d84:	mov	r3, r1
   23d88:	moveq	r3, r2
   23d8c:	str	r4, [r1]
   23d90:	lsleq	r3, r3, #3
   23d94:	streq	r3, [sp, #20]
   23d98:	beq	23f54 <__assert_fail@plt+0x125b4>
   23d9c:	ldr	r2, [sp, #28]
   23da0:	ldrb	r3, [r2, #88]	; 0x58
   23da4:	tst	r3, #1
   23da8:	beq	2468c <__assert_fail@plt+0x12cec>
   23dac:	ldr	r3, [r2, #76]	; 0x4c
   23db0:	cmp	r3, #0
   23db4:	ble	2468c <__assert_fail@plt+0x12cec>
   23db8:	ldr	r1, [sp, #44]	; 0x2c
   23dbc:	mov	r2, #2
   23dc0:	mov	r3, #16
   23dc4:	ldr	r1, [r1]
   23dc8:	add	r8, sp, #296	; 0x128
   23dcc:	mov	r0, #48	; 0x30
   23dd0:	str	r1, [sp, #24]
   23dd4:	str	r4, [sp, #136]	; 0x88
   23dd8:	str	r4, [sp, #144]	; 0x90
   23ddc:	str	r4, [sp, #284]	; 0x11c
   23de0:	str	r2, [sp, #140]	; 0x8c
   23de4:	str	r3, [sp, #288]	; 0x120
   23de8:	str	r8, [sp, #292]	; 0x124
   23dec:	bl	1ba3c <__assert_fail@plt+0xa09c>
   23df0:	cmp	r0, #0
   23df4:	str	r0, [sp, #144]	; 0x90
   23df8:	beq	24938 <__assert_fail@plt+0x12f98>
   23dfc:	ldr	r3, [sp, #284]	; 0x11c
   23e00:	ldr	r2, [sp, #76]	; 0x4c
   23e04:	add	r9, sp, #124	; 0x7c
   23e08:	cmp	r2, r3
   23e0c:	ldr	r3, [sp, #24]
   23e10:	ldr	fp, [r3, #72]	; 0x48
   23e14:	str	r4, [sp, #124]	; 0x7c
   23e18:	str	r4, [r9, #4]
   23e1c:	str	r4, [r9, #8]
   23e20:	bhi	24930 <__assert_fail@plt+0x12f90>
   23e24:	ldr	r3, [sp, #76]	; 0x4c
   23e28:	add	sl, sp, #136	; 0x88
   23e2c:	str	r3, [sp, #284]	; 0x11c
   23e30:	ldr	r5, [sp, #76]	; 0x4c
   23e34:	ldr	r3, [sp, #292]	; 0x124
   23e38:	ldr	r1, [sp, #476]	; 0x1dc
   23e3c:	mov	r0, r3
   23e40:	str	r3, [sp, #16]
   23e44:	lsl	r3, r5, #3
   23e48:	mov	r2, r3
   23e4c:	str	r3, [sp, #20]
   23e50:	bl	115d4 <memcpy@plt>
   23e54:	add	r3, sp, #424	; 0x1a8
   23e58:	mov	r2, r3
   23e5c:	ldr	r3, [sp, #476]	; 0x1dc
   23e60:	str	r8, [sp, #12]
   23e64:	mov	r8, r5
   23e68:	ldr	r4, [r3]
   23e6c:	lsl	r1, r5, #4
   23e70:	str	r4, [r2, #-304]!	; 0xfffffed0
   23e74:	str	r1, [sp, #44]	; 0x2c
   23e78:	str	r2, [sp, #40]	; 0x28
   23e7c:	ldr	r3, [sp, #476]	; 0x1dc
   23e80:	ldr	r3, [r3, #4]
   23e84:	cmp	r4, r3
   23e88:	bgt	23f10 <__assert_fail@plt+0x12570>
   23e8c:	ldr	r2, [sp, #24]
   23e90:	lsl	r6, fp, #3
   23e94:	mov	r7, fp
   23e98:	ldr	r0, [r2]
   23e9c:	add	r1, r0, r6
   23ea0:	ldrb	r2, [r1, #4]
   23ea4:	cmp	r2, #8
   23ea8:	beq	24780 <__assert_fail@plt+0x12de0>
   23eac:	cmp	r2, #9
   23eb0:	beq	24730 <__assert_fail@plt+0x12d90>
   23eb4:	cmp	r3, r4
   23eb8:	beq	24674 <__assert_fail@plt+0x12cd4>
   23ebc:	cmp	sl, #0
   23ec0:	beq	24510 <__assert_fail@plt+0x12b70>
   23ec4:	mov	r2, fp
   23ec8:	add	r1, sp, #132	; 0x84
   23ecc:	ldr	r0, [sp, #128]	; 0x80
   23ed0:	bl	1d674 <__assert_fail@plt+0xbcd4>
   23ed4:	cmp	r0, #0
   23ed8:	beq	24510 <__assert_fail@plt+0x12b70>
   23edc:	ldr	r2, [sp, #476]	; 0x1dc
   23ee0:	mov	r3, #0
   23ee4:	ldr	r1, [sp, #476]	; 0x1dc
   23ee8:	ldr	r1, [r1, r3, lsl #3]
   23eec:	add	r3, r3, #1
   23ef0:	cmp	r1, #0
   23ef4:	blt	23f04 <__assert_fail@plt+0x12564>
   23ef8:	ldr	r1, [r2, #4]
   23efc:	cmn	r1, #1
   23f00:	beq	244e0 <__assert_fail@plt+0x12b40>
   23f04:	cmp	r8, r3
   23f08:	add	r2, r2, #8
   23f0c:	bne	23ee4 <__assert_fail@plt+0x12544>
   23f10:	ldr	r0, [sp, #132]	; 0x84
   23f14:	ldr	r8, [sp, #12]
   23f18:	bl	1b944 <__assert_fail@plt+0x9fa4>
   23f1c:	ldr	r0, [sp, #292]	; 0x124
   23f20:	cmp	r0, r8
   23f24:	beq	23f2c <__assert_fail@plt+0x1258c>
   23f28:	bl	1b944 <__assert_fail@plt+0x9fa4>
   23f2c:	mov	r2, #0
   23f30:	mov	r3, #16
   23f34:	mov	r0, sl
   23f38:	str	r8, [sp, #292]	; 0x124
   23f3c:	str	r2, [sp, #284]	; 0x11c
   23f40:	str	r3, [sp, #288]	; 0x120
   23f44:	bl	1d080 <__assert_fail@plt+0xb6e0>
   23f48:	cmp	r0, #0
   23f4c:	bne	244b4 <__assert_fail@plt+0x12b14>
   23f50:	ldr	r7, [sp, #248]	; 0xf8
   23f54:	ldr	r3, [sp, #476]	; 0x1dc
   23f58:	ldr	r2, [sp, #20]
   23f5c:	ldrb	r6, [sp, #224]	; 0xe0
   23f60:	ldr	r5, [sp, #176]	; 0xb0
   23f64:	ldr	r8, [sp, #160]	; 0xa0
   23f68:	ldr	r9, [sp, #180]	; 0xb4
   23f6c:	ldr	lr, [sp, #116]	; 0x74
   23f70:	add	r4, r3, r2
   23f74:	mov	ip, r3
   23f78:	add	r1, r3, #4
   23f7c:	ldr	r2, [r1, #-4]
   23f80:	cmn	r2, #1
   23f84:	beq	23fa4 <__assert_fail@plt+0x12604>
   23f88:	cmp	r6, #0
   23f8c:	bne	2464c <__assert_fail@plt+0x12cac>
   23f90:	ldr	r0, [r3, #4]
   23f94:	add	r2, lr, r2
   23f98:	add	r0, lr, r0
   23f9c:	str	r2, [r1, #-4]
   23fa0:	str	r0, [r3, #4]
   23fa4:	add	r3, r3, #8
   23fa8:	cmp	r4, r3
   23fac:	add	r1, r1, #8
   23fb0:	bne	23f7c <__assert_fail@plt+0x125dc>
   23fb4:	ldr	r2, [sp, #96]	; 0x60
   23fb8:	cmp	r2, #0
   23fbc:	ble	23fec <__assert_fail@plt+0x1264c>
   23fc0:	ldr	r2, [sp, #96]	; 0x60
   23fc4:	ldr	r1, [sp, #76]	; 0x4c
   23fc8:	ldr	r0, [sp, #476]	; 0x1dc
   23fcc:	add	r1, r2, r1
   23fd0:	mvn	r2, #0
   23fd4:	add	r1, r0, r1, lsl #3
   23fd8:	str	r2, [r3]
   23fdc:	str	r2, [r3, #4]
   23fe0:	add	r3, r3, #8
   23fe4:	cmp	r3, r1
   23fe8:	bne	23fd8 <__assert_fail@plt+0x12638>
   23fec:	ldr	r3, [sp, #28]
   23ff0:	ldr	r3, [r3, #132]	; 0x84
   23ff4:	cmp	r3, #0
   23ff8:	beq	23c64 <__assert_fail@plt+0x122c4>
   23ffc:	mov	r2, #0
   24000:	ldr	lr, [sp, #76]	; 0x4c
   24004:	b	24044 <__assert_fail@plt+0x126a4>
   24008:	ldr	r0, [r3]
   2400c:	cmp	r2, r0
   24010:	add	r4, r0, #1
   24014:	mov	r2, r1
   24018:	beq	2403c <__assert_fail@plt+0x1269c>
   2401c:	ldr	r1, [sp, #476]	; 0x1dc
   24020:	ldr	r0, [sp, #476]	; 0x1dc
   24024:	ldr	r1, [r1, r4, lsl #3]
   24028:	str	r1, [ip, #8]
   2402c:	ldr	r1, [r3]
   24030:	add	r1, r0, r1, lsl #3
   24034:	ldr	r1, [r1, #12]
   24038:	str	r1, [ip, #12]
   2403c:	add	r3, r3, #4
   24040:	add	ip, ip, #8
   24044:	add	r1, r2, #1
   24048:	cmp	r1, lr
   2404c:	bne	24008 <__assert_fail@plt+0x12668>
   24050:	b	23c64 <__assert_fail@plt+0x122c4>
   24054:	ldr	r3, [sp, #52]	; 0x34
   24058:	cmp	r3, r6
   2405c:	ble	234b8 <__assert_fail@plt+0x11b18>
   24060:	ldr	r3, [sp, #56]	; 0x38
   24064:	ldr	r1, [sp, #88]	; 0x58
   24068:	ldrb	r2, [r3, r6]
   2406c:	add	r3, r3, r6
   24070:	ldrb	r2, [r1, r2]
   24074:	ldr	r1, [sp, #60]	; 0x3c
   24078:	ldrb	r2, [r1, r2]
   2407c:	cmp	r2, #0
   24080:	bne	23500 <__assert_fail@plt+0x11b60>
   24084:	add	r2, r6, #1
   24088:	ldr	ip, [sp, #60]	; 0x3c
   2408c:	ldr	lr, [sp, #88]	; 0x58
   24090:	ldr	r0, [sp, #52]	; 0x34
   24094:	b	240b0 <__assert_fail@plt+0x12710>
   24098:	ldrb	r1, [r3, #1]!
   2409c:	add	r2, r2, #1
   240a0:	ldrb	r1, [lr, r1]
   240a4:	ldrb	r1, [ip, r1]
   240a8:	cmp	r1, #0
   240ac:	bne	24344 <__assert_fail@plt+0x129a4>
   240b0:	cmp	r0, r2
   240b4:	mov	r6, r2
   240b8:	bne	24098 <__assert_fail@plt+0x126f8>
   240bc:	b	234b0 <__assert_fail@plt+0x11b10>
   240c0:	ldr	r3, [sp, #68]	; 0x44
   240c4:	cmp	r3, r6
   240c8:	bgt	236fc <__assert_fail@plt+0x11d5c>
   240cc:	ldr	ip, [sp, #116]	; 0x74
   240d0:	ldr	r1, [sp, #108]	; 0x6c
   240d4:	mov	r0, ip
   240d8:	ldr	r4, [sp, #60]	; 0x3c
   240dc:	ldr	lr, [sp, #88]	; 0x58
   240e0:	ldr	r7, [sp, #68]	; 0x44
   240e4:	ldr	r8, [sp, #56]	; 0x38
   240e8:	ldr	r5, [sp, #72]	; 0x48
   240ec:	b	24100 <__assert_fail@plt+0x12760>
   240f0:	cmp	r7, r6
   240f4:	mov	r0, r6
   240f8:	mov	r1, #1
   240fc:	bgt	2434c <__assert_fail@plt+0x129ac>
   24100:	cmp	r5, r6
   24104:	mov	r3, #0
   24108:	ldrbgt	r3, [r8, r6]
   2410c:	cmp	lr, #0
   24110:	sub	r6, r6, #1
   24114:	mov	r2, r3
   24118:	ldrbne	r2, [lr, r3]
   2411c:	ldrb	r3, [r4, r2]
   24120:	cmp	r3, #0
   24124:	beq	240f0 <__assert_fail@plt+0x12750>
   24128:	cmp	r1, #0
   2412c:	movne	ip, r0
   24130:	strne	r0, [sp, #116]	; 0x74
   24134:	mov	r6, ip
   24138:	b	23500 <__assert_fail@plt+0x11b60>
   2413c:	ldr	r3, [sp, #28]
   24140:	ldr	r4, [r3, #76]	; 0x4c
   24144:	cmp	r4, #0
   24148:	bne	2381c <__assert_fail@plt+0x11e7c>
   2414c:	b	23d18 <__assert_fail@plt+0x12378>
   24150:	ldr	r1, [sp, #72]	; 0x48
   24154:	b	2326c <__assert_fail@plt+0x118cc>
   24158:	cmp	sl, #0
   2415c:	beq	248ac <__assert_fail@plt+0x12f0c>
   24160:	ldr	r3, [sp, #16]
   24164:	str	r9, [sp, #4]
   24168:	str	r3, [sp]
   2416c:	mov	r2, r8
   24170:	ldr	r3, [sp, #476]	; 0x1dc
   24174:	ldr	r1, [sp, #40]	; 0x28
   24178:	mov	r0, sl
   2417c:	bl	1d550 <__assert_fail@plt+0xbbb0>
   24180:	subs	fp, r0, #0
   24184:	bge	245c0 <__assert_fail@plt+0x12c20>
   24188:	ldr	r0, [sp, #132]	; 0x84
   2418c:	ldr	r8, [sp, #12]
   24190:	bl	1b944 <__assert_fail@plt+0x9fa4>
   24194:	ldr	r0, [sp, #292]	; 0x124
   24198:	cmp	r0, r8
   2419c:	beq	241a4 <__assert_fail@plt+0x12804>
   241a0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   241a4:	mov	r3, #16
   241a8:	mov	r2, #0
   241ac:	str	r3, [sp, #288]	; 0x120
   241b0:	mov	r0, sl
   241b4:	mov	r3, #1
   241b8:	str	r8, [sp, #292]	; 0x124
   241bc:	str	r2, [sp, #284]	; 0x11c
   241c0:	str	r3, [sp, #48]	; 0x30
   241c4:	bl	1d080 <__assert_fail@plt+0xb6e0>
   241c8:	ldr	r7, [sp, #248]	; 0xf8
   241cc:	b	23c64 <__assert_fail@plt+0x122c4>
   241d0:	ldr	r1, [sp, #172]	; 0xac
   241d4:	ldr	r4, [sp, #60]	; 0x3c
   241d8:	ldr	r5, [sp, #92]	; 0x5c
   241dc:	ldr	r7, [sp, #68]	; 0x44
   241e0:	ldr	r8, [sp, #52]	; 0x34
   241e4:	b	2422c <__assert_fail@plt+0x1288c>
   241e8:	ldr	r0, [sp, #176]	; 0xb0
   241ec:	mov	r2, #0
   241f0:	cmp	r3, r0
   241f4:	ldrcc	r2, [sp, #152]	; 0x98
   241f8:	ldrbcc	r2, [r2, r3]
   241fc:	ldrb	r3, [r4, r2]
   24200:	cmp	r3, #0
   24204:	bne	23500 <__assert_fail@plt+0x11b60>
   24208:	add	r6, r6, r5
   2420c:	cmp	r8, r6
   24210:	movge	r3, #0
   24214:	movlt	r3, #1
   24218:	cmp	r7, r6
   2421c:	orrgt	r3, r3, #1
   24220:	cmp	r3, #0
   24224:	str	r6, [sp, #116]	; 0x74
   24228:	bne	236fc <__assert_fail@plt+0x11d5c>
   2422c:	ldr	r2, [sp, #180]	; 0xb4
   24230:	sub	r3, r6, r1
   24234:	cmp	r3, r2
   24238:	bcc	241e8 <__assert_fail@plt+0x12848>
   2423c:	ldr	r2, [sp, #480]	; 0x1e0
   24240:	mov	r1, r6
   24244:	add	r0, sp, #148	; 0x94
   24248:	bl	20184 <__assert_fail@plt+0xe7e4>
   2424c:	cmp	r0, #0
   24250:	bne	244b4 <__assert_fail@plt+0x12b14>
   24254:	ldr	r1, [sp, #172]	; 0xac
   24258:	sub	r3, r6, r1
   2425c:	b	241e8 <__assert_fail@plt+0x12848>
   24260:	ldr	r3, [sp, #12]
   24264:	ldr	r2, [sp, #236]	; 0xec
   24268:	sub	r1, r3, #1
   2426c:	add	r0, sp, #148	; 0x94
   24270:	bl	1fe84 <__assert_fail@plt+0xe4e4>
   24274:	tst	r0, #1
   24278:	beq	2431c <__assert_fail@plt+0x1297c>
   2427c:	ldr	fp, [r4, #40]	; 0x28
   24280:	b	23574 <__assert_fail@plt+0x11bd4>
   24284:	add	r0, sp, #148	; 0x94
   24288:	bl	1cfdc <__assert_fail@plt+0xb63c>
   2428c:	ldr	r0, [sp, #280]	; 0x118
   24290:	bl	1b944 <__assert_fail@plt+0x9fa4>
   24294:	ldr	r0, [sp, #264]	; 0x108
   24298:	bl	1b944 <__assert_fail@plt+0x9fa4>
   2429c:	b	23c7c <__assert_fail@plt+0x122dc>
   242a0:	beq	feaced50 <optarg@@GLIBC_2.4+0xfea90b30>
   242a4:	andeq	pc, r3, r0, lsl #30
   242a8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   242ac:	mov	r0, r5
   242b0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   242b4:	mov	r0, r6
   242b8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   242bc:	add	r0, sp, #148	; 0x94
   242c0:	bl	1cfdc <__assert_fail@plt+0xb63c>
   242c4:	ldr	r6, [sp, #116]	; 0x74
   242c8:	b	236cc <__assert_fail@plt+0x11d2c>
   242cc:	ldr	r3, [sp, #28]
   242d0:	ldrb	r3, [r3, #88]	; 0x58
   242d4:	tst	r3, #2
   242d8:	bne	23308 <__assert_fail@plt+0x11968>
   242dc:	b	2332c <__assert_fail@plt+0x1198c>
   242e0:	mov	r1, fp
   242e4:	ldr	r0, [sp, #232]	; 0xe8
   242e8:	bl	1f3f0 <__assert_fail@plt+0xda50>
   242ec:	cmp	r0, #0
   242f0:	bne	23614 <__assert_fail@plt+0x11c74>
   242f4:	ldr	r7, [sp, #248]	; 0xf8
   242f8:	mov	r3, #12
   242fc:	cmp	r7, #0
   24300:	str	r3, [sp, #124]	; 0x7c
   24304:	bne	23bfc <__assert_fail@plt+0x1225c>
   24308:	b	23c94 <__assert_fail@plt+0x122f4>
   2430c:	ldr	r3, [sp, #104]	; 0x68
   24310:	str	r3, [sp, #16]
   24314:	ldrb	r3, [fp, #52]	; 0x34
   24318:	b	235a0 <__assert_fail@plt+0x11c00>
   2431c:	cmp	r0, #0
   24320:	beq	23574 <__assert_fail@plt+0x11bd4>
   24324:	and	r3, r0, #6
   24328:	cmp	r3, #6
   2432c:	ldreq	fp, [r4, #48]	; 0x30
   24330:	beq	23574 <__assert_fail@plt+0x11bd4>
   24334:	tst	r0, #2
   24338:	beq	23c34 <__assert_fail@plt+0x12294>
   2433c:	ldr	fp, [r4, #44]	; 0x2c
   24340:	b	23574 <__assert_fail@plt+0x11bd4>
   24344:	str	r6, [sp, #116]	; 0x74
   24348:	b	23500 <__assert_fail@plt+0x11b60>
   2434c:	str	r6, [sp, #116]	; 0x74
   24350:	ldr	r7, [sp, #248]	; 0xf8
   24354:	str	r1, [sp, #48]	; 0x30
   24358:	b	23c64 <__assert_fail@plt+0x122c4>
   2435c:	ldrsb	r3, [fp, #52]	; 0x34
   24360:	cmp	r3, #0
   24364:	blt	24454 <__assert_fail@plt+0x12ab4>
   24368:	ldr	r3, [sp, #40]	; 0x28
   2436c:	cmp	r3, #0
   24370:	ldr	r3, [sp, #12]
   24374:	str	r3, [sp, #20]
   24378:	movne	r3, #1
   2437c:	strne	r3, [sp, #36]	; 0x24
   24380:	bne	235b8 <__assert_fail@plt+0x11c18>
   24384:	b	237ac <__assert_fail@plt+0x11e0c>
   24388:	ldr	r7, [sp, #248]	; 0xf8
   2438c:	b	23c94 <__assert_fail@plt+0x122f4>
   24390:	mov	r3, #8
   24394:	b	233cc <__assert_fail@plt+0x11a2c>
   24398:	add	r4, fp, #8
   2439c:	add	r5, fp, #12
   243a0:	mov	r1, r4
   243a4:	mov	r2, r5
   243a8:	mov	r3, #0
   243ac:	add	r0, sp, #148	; 0x94
   243b0:	bl	20954 <__assert_fail@plt+0xefb4>
   243b4:	cmp	r0, #0
   243b8:	str	r0, [sp, #124]	; 0x7c
   243bc:	bne	24470 <__assert_fail@plt+0x12ad0>
   243c0:	ldrb	r3, [fp, #52]	; 0x34
   243c4:	tst	r3, #64	; 0x40
   243c8:	bne	244bc <__assert_fail@plt+0x12b1c>
   243cc:	ldr	r2, [sp, #108]	; 0x6c
   243d0:	str	r2, [sp, #16]
   243d4:	b	235a0 <__assert_fail@plt+0x11c00>
   243d8:	mov	r0, r5
   243dc:	bl	1b944 <__assert_fail@plt+0x9fa4>
   243e0:	mov	r0, r6
   243e4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   243e8:	mov	r3, #12
   243ec:	str	r3, [sp, #48]	; 0x30
   243f0:	ldr	r7, [sp, #248]	; 0xf8
   243f4:	b	23c64 <__assert_fail@plt+0x122c4>
   243f8:	mov	r7, fp
   243fc:	ldr	fp, [sp, #12]
   24400:	mov	r3, r7
   24404:	mov	r2, r6
   24408:	mov	r1, r5
   2440c:	mov	r0, fp
   24410:	str	r4, [sp, #20]
   24414:	bl	1e6b4 <__assert_fail@plt+0xcd14>
   24418:	mov	r8, r0
   2441c:	mov	r0, r6
   24420:	bl	1b944 <__assert_fail@plt+0x9fa4>
   24424:	cmp	r8, #0
   24428:	beq	23cec <__assert_fail@plt+0x1234c>
   2442c:	mov	r6, #0
   24430:	mov	r0, r5
   24434:	bl	1b944 <__assert_fail@plt+0x9fa4>
   24438:	mov	r0, r6
   2443c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   24440:	cmp	r8, #1
   24444:	beq	236c0 <__assert_fail@plt+0x11d20>
   24448:	str	r8, [sp, #48]	; 0x30
   2444c:	ldr	r7, [sp, #248]	; 0xf8
   24450:	b	23c64 <__assert_fail@plt+0x122c4>
   24454:	ldr	r2, [sp, #12]
   24458:	mov	r1, fp
   2445c:	add	r0, sp, #148	; 0x94
   24460:	bl	200a4 <__assert_fail@plt+0xe704>
   24464:	cmp	r0, #0
   24468:	beq	235a8 <__assert_fail@plt+0x11c08>
   2446c:	b	24368 <__assert_fail@plt+0x129c8>
   24470:	str	r0, [sp, #20]
   24474:	b	237ac <__assert_fail@plt+0x11e0c>
   24478:	bl	1b944 <__assert_fail@plt+0x9fa4>
   2447c:	mov	r0, r5
   24480:	bl	1b944 <__assert_fail@plt+0x9fa4>
   24484:	mov	r3, #12
   24488:	str	r3, [sp, #48]	; 0x30
   2448c:	ldr	r7, [sp, #248]	; 0xf8
   24490:	b	23c64 <__assert_fail@plt+0x122c4>
   24494:	cmp	r0, #0
   24498:	mov	r4, r0
   2449c:	bne	2364c <__assert_fail@plt+0x11cac>
   244a0:	b	2378c <__assert_fail@plt+0x11dec>
   244a4:	mov	r4, r0
   244a8:	b	2364c <__assert_fail@plt+0x11cac>
   244ac:	mov	r8, r7
   244b0:	b	24430 <__assert_fail@plt+0x12a90>
   244b4:	str	r0, [sp, #48]	; 0x30
   244b8:	b	241c8 <__assert_fail@plt+0x12828>
   244bc:	mov	r2, r5
   244c0:	mov	r1, r4
   244c4:	add	r0, sp, #148	; 0x94
   244c8:	bl	22444 <__assert_fail@plt+0x10aa4>
   244cc:	cmp	r0, #0
   244d0:	str	r0, [sp, #124]	; 0x7c
   244d4:	bne	24470 <__assert_fail@plt+0x12ad0>
   244d8:	ldrb	r3, [fp, #52]	; 0x34
   244dc:	b	243cc <__assert_fail@plt+0x12a2c>
   244e0:	ldr	r3, [sp, #16]
   244e4:	str	r9, [sp, #4]
   244e8:	str	r3, [sp]
   244ec:	mov	r2, r8
   244f0:	ldr	r3, [sp, #476]	; 0x1dc
   244f4:	ldr	r1, [sp, #40]	; 0x28
   244f8:	mov	r0, sl
   244fc:	bl	1d550 <__assert_fail@plt+0xbbb0>
   24500:	subs	fp, r0, #0
   24504:	blt	23f10 <__assert_fail@plt+0x12570>
   24508:	mov	r7, fp
   2450c:	lsl	r6, fp, #3
   24510:	ldr	r5, [sp, #232]	; 0xe8
   24514:	ldr	r0, [r5]
   24518:	add	r1, r0, r6
   2451c:	ldrb	r3, [r1, #4]
   24520:	tst	r3, #8
   24524:	beq	245c8 <__assert_fail@plt+0x12c28>
   24528:	ldr	ip, [sp, #120]	; 0x78
   2452c:	ldr	r3, [sp, #248]	; 0xf8
   24530:	mov	r2, fp
   24534:	add	r1, sp, #132	; 0x84
   24538:	ldr	r0, [sp, #128]	; 0x80
   2453c:	ldr	r4, [r3, ip, lsl #2]
   24540:	bl	1d674 <__assert_fail@plt+0xbcd4>
   24544:	ldr	r5, [r5, #20]
   24548:	cmp	r0, #0
   2454c:	beq	2490c <__assert_fail@plt+0x12f6c>
   24550:	add	fp, fp, fp, lsl #1
   24554:	add	r2, r5, fp, lsl #2
   24558:	ldr	r7, [r2, #4]
   2455c:	cmp	r7, #0
   24560:	ble	24160 <__assert_fail@plt+0x127c0>
   24564:	ldr	r3, [r4, #8]
   24568:	ldr	r5, [r2, #8]
   2456c:	str	r3, [sp, #32]
   24570:	sub	r5, r5, #4
   24574:	add	r3, r4, #12
   24578:	mvn	fp, #0
   2457c:	mov	r4, #0
   24580:	str	r3, [sp, #36]	; 0x24
   24584:	ldr	r6, [r5, #4]!
   24588:	ldr	r1, [sp, #36]	; 0x24
   2458c:	mov	r2, r6
   24590:	ldr	r0, [sp, #32]
   24594:	bl	1d674 <__assert_fail@plt+0xbcd4>
   24598:	add	r4, r4, #1
   2459c:	cmp	r0, #0
   245a0:	beq	245b0 <__assert_fail@plt+0x12c10>
   245a4:	cmn	fp, #1
   245a8:	bne	24944 <__assert_fail@plt+0x12fa4>
   245ac:	mov	fp, r6
   245b0:	cmp	r4, r7
   245b4:	bne	24584 <__assert_fail@plt+0x12be4>
   245b8:	cmp	fp, #0
   245bc:	blt	24a04 <__assert_fail@plt+0x13064>
   245c0:	ldr	r4, [sp, #120]	; 0x78
   245c4:	b	23e7c <__assert_fail@plt+0x124dc>
   245c8:	ldrb	r2, [r1, #6]
   245cc:	tst	r2, #16
   245d0:	bne	24874 <__assert_fail@plt+0x12ed4>
   245d4:	cmp	r3, #4
   245d8:	beq	247ec <__assert_fail@plt+0x12e4c>
   245dc:	ldr	r4, [sp, #120]	; 0x78
   245e0:	mov	r2, r4
   245e4:	add	r0, sp, #148	; 0x94
   245e8:	bl	1ff70 <__assert_fail@plt+0xe5d0>
   245ec:	cmp	r0, #0
   245f0:	beq	24160 <__assert_fail@plt+0x127c0>
   245f4:	ldr	r3, [r5, #12]
   245f8:	add	r4, r4, #1
   245fc:	ldr	fp, [r3, r7, lsl #2]
   24600:	cmp	sl, #0
   24604:	str	r4, [sp, #120]	; 0x78
   24608:	beq	24640 <__assert_fail@plt+0x12ca0>
   2460c:	ldr	r3, [sp, #240]	; 0xf0
   24610:	cmp	r4, r3
   24614:	bgt	24160 <__assert_fail@plt+0x127c0>
   24618:	ldr	r3, [sp, #248]	; 0xf8
   2461c:	ldr	r3, [r3, r4, lsl #2]
   24620:	cmp	r3, #0
   24624:	beq	24160 <__assert_fail@plt+0x127c0>
   24628:	mov	r2, fp
   2462c:	add	r1, r3, #12
   24630:	ldr	r0, [r3, #8]
   24634:	bl	1d674 <__assert_fail@plt+0xbcd4>
   24638:	cmp	r0, #0
   2463c:	beq	24160 <__assert_fail@plt+0x127c0>
   24640:	mov	r3, #0
   24644:	str	r3, [sp, #128]	; 0x80
   24648:	b	245b8 <__assert_fail@plt+0x12c18>
   2464c:	cmp	r2, r5
   24650:	moveq	r2, r9
   24654:	ldrne	r2, [r8, r2, lsl #2]
   24658:	str	r2, [r1, #-4]
   2465c:	ldr	r0, [r3, #4]
   24660:	cmp	r5, r0
   24664:	moveq	r0, r9
   24668:	ldrne	r0, [r8, r0, lsl #2]
   2466c:	str	r0, [r3, #4]
   24670:	b	23f94 <__assert_fail@plt+0x125f4>
   24674:	ldr	r3, [sp, #244]	; 0xf4
   24678:	cmp	fp, r3
   2467c:	bne	23ebc <__assert_fail@plt+0x1251c>
   24680:	cmp	sl, #0
   24684:	beq	23f10 <__assert_fail@plt+0x12570>
   24688:	b	23edc <__assert_fail@plt+0x1253c>
   2468c:	ldr	r3, [sp, #44]	; 0x2c
   24690:	add	r9, sp, #124	; 0x7c
   24694:	mov	r1, #16
   24698:	ldr	r3, [r3]
   2469c:	add	r8, sp, #296	; 0x128
   246a0:	mov	r0, r3
   246a4:	str	r3, [sp, #24]
   246a8:	mov	r3, #0
   246ac:	mov	sl, r3
   246b0:	mov	r2, #2
   246b4:	str	r3, [sp, #284]	; 0x11c
   246b8:	str	r1, [sp, #288]	; 0x120
   246bc:	str	r8, [sp, #292]	; 0x124
   246c0:	str	r3, [sp, #136]	; 0x88
   246c4:	ldr	fp, [r0, #72]	; 0x48
   246c8:	str	r3, [sp, #144]	; 0x90
   246cc:	str	r3, [sp, #124]	; 0x7c
   246d0:	str	r2, [sp, #140]	; 0x8c
   246d4:	str	r3, [r9, #4]
   246d8:	str	r3, [r9, #8]
   246dc:	mov	r3, #8
   246e0:	mov	r2, r8
   246e4:	ldr	r1, [sp, #76]	; 0x4c
   246e8:	add	r0, sp, #284	; 0x11c
   246ec:	bl	2a9ac <__assert_fail@plt+0x1900c>
   246f0:	cmp	r0, #0
   246f4:	bne	23e30 <__assert_fail@plt+0x12490>
   246f8:	ldr	r0, [sp, #292]	; 0x124
   246fc:	cmp	r0, r8
   24700:	beq	24708 <__assert_fail@plt+0x12d68>
   24704:	bl	1b944 <__assert_fail@plt+0x9fa4>
   24708:	mov	r3, #16
   2470c:	mov	r2, #0
   24710:	str	r3, [sp, #288]	; 0x120
   24714:	mov	r0, sl
   24718:	mov	r3, #12
   2471c:	str	r8, [sp, #292]	; 0x124
   24720:	str	r2, [sp, #284]	; 0x11c
   24724:	str	r3, [sp, #48]	; 0x30
   24728:	bl	1d080 <__assert_fail@plt+0xb6e0>
   2472c:	b	241c8 <__assert_fail@plt+0x12828>
   24730:	ldr	r2, [r1]
   24734:	add	r2, r2, #1
   24738:	cmp	r8, r2
   2473c:	ble	23eb4 <__assert_fail@plt+0x12514>
   24740:	ldr	r3, [sp, #476]	; 0x1dc
   24744:	ldr	r0, [r3, r2, lsl #3]
   24748:	add	r3, r3, r2, lsl #3
   2474c:	cmp	r4, r0
   24750:	bgt	247b0 <__assert_fail@plt+0x12e10>
   24754:	ldrb	r1, [r1, #6]
   24758:	tst	r1, #8
   2475c:	beq	24770 <__assert_fail@plt+0x12dd0>
   24760:	ldr	r1, [sp, #16]
   24764:	ldr	r2, [r1, r2, lsl #3]
   24768:	cmn	r2, #1
   2476c:	bne	247d4 <__assert_fail@plt+0x12e34>
   24770:	str	r4, [r3, #4]
   24774:	ldr	r3, [sp, #476]	; 0x1dc
   24778:	ldr	r3, [r3, #4]
   2477c:	b	23eb4 <__assert_fail@plt+0x12514>
   24780:	ldr	r2, [r0, fp, lsl #3]
   24784:	add	r2, r2, #1
   24788:	cmp	r8, r2
   2478c:	ble	23eb4 <__assert_fail@plt+0x12514>
   24790:	ldr	r1, [sp, #476]	; 0x1dc
   24794:	ldr	r3, [sp, #476]	; 0x1dc
   24798:	add	r3, r3, r2, lsl #3
   2479c:	str	r4, [r1, r2, lsl #3]
   247a0:	mvn	r2, #0
   247a4:	str	r2, [r3, #4]
   247a8:	ldr	r3, [r1, #4]
   247ac:	b	23eb4 <__assert_fail@plt+0x12514>
   247b0:	str	r4, [r3, #4]
   247b4:	ldr	r2, [sp, #20]
   247b8:	ldr	r1, [sp, #476]	; 0x1dc
   247bc:	ldr	r0, [sp, #16]
   247c0:	bl	115d4 <memcpy@plt>
   247c4:	ldr	r3, [sp, #476]	; 0x1dc
   247c8:	ldr	r4, [sp, #120]	; 0x78
   247cc:	ldr	r3, [r3, #4]
   247d0:	b	23eb4 <__assert_fail@plt+0x12514>
   247d4:	ldr	r2, [sp, #20]
   247d8:	ldr	r0, [sp, #476]	; 0x1dc
   247dc:	bl	115d4 <memcpy@plt>
   247e0:	ldr	r3, [sp, #476]	; 0x1dc
   247e4:	ldr	r3, [r3, #4]
   247e8:	b	23eb4 <__assert_fail@plt+0x12514>
   247ec:	ldr	r3, [r1]
   247f0:	add	r3, r3, #1
   247f4:	cmp	r8, r3
   247f8:	ble	24158 <__assert_fail@plt+0x127b8>
   247fc:	ldr	r2, [sp, #476]	; 0x1dc
   24800:	ldr	r1, [sp, #476]	; 0x1dc
   24804:	add	r2, r2, r3, lsl #3
   24808:	cmp	sl, #0
   2480c:	ldr	r0, [r1, r3, lsl #3]
   24810:	ldr	r3, [r2, #4]
   24814:	sub	r4, r3, r0
   24818:	beq	248a4 <__assert_fail@plt+0x12f04>
   2481c:	cmn	r0, #1
   24820:	beq	24160 <__assert_fail@plt+0x127c0>
   24824:	cmn	r3, #1
   24828:	beq	24160 <__assert_fail@plt+0x127c0>
   2482c:	cmp	r4, #0
   24830:	beq	248ac <__assert_fail@plt+0x12f0c>
   24834:	ldr	r6, [sp, #120]	; 0x78
   24838:	ldr	r3, [sp, #176]	; 0xb0
   2483c:	ldr	r1, [sp, #152]	; 0x98
   24840:	sub	r3, r3, r6
   24844:	cmp	r4, r3
   24848:	bgt	24160 <__assert_fail@plt+0x127c0>
   2484c:	add	r0, r1, r0
   24850:	mov	r2, r4
   24854:	add	r1, r1, r6
   24858:	bl	1161c <memcmp@plt>
   2485c:	cmp	r0, #0
   24860:	bne	24160 <__assert_fail@plt+0x127c0>
   24864:	ldr	r3, [r5, #12]
   24868:	add	r4, r6, r4
   2486c:	ldr	fp, [r3, fp, lsl #2]
   24870:	b	24600 <__assert_fail@plt+0x12c60>
   24874:	ldr	r3, [sp, #120]	; 0x78
   24878:	mov	r2, fp
   2487c:	str	r3, [sp]
   24880:	add	r1, r5, #128	; 0x80
   24884:	add	r3, sp, #148	; 0x94
   24888:	bl	21a20 <__assert_fail@plt+0x10080>
   2488c:	subs	r4, r0, #0
   24890:	bne	24904 <__assert_fail@plt+0x12f64>
   24894:	ldr	r1, [r5]
   24898:	ldr	r4, [sp, #120]	; 0x78
   2489c:	add	r1, r1, r6
   248a0:	b	245e0 <__assert_fail@plt+0x12c40>
   248a4:	cmp	r4, #0
   248a8:	bne	24904 <__assert_fail@plt+0x12f64>
   248ac:	mov	r1, fp
   248b0:	mov	r0, r9
   248b4:	bl	1d0e4 <__assert_fail@plt+0xb744>
   248b8:	cmp	r0, #0
   248bc:	beq	24920 <__assert_fail@plt+0x12f80>
   248c0:	add	fp, fp, fp, lsl #1
   248c4:	ldr	r3, [r5, #20]
   248c8:	ldr	r1, [sp, #248]	; 0xf8
   248cc:	add	r3, r3, fp, lsl #2
   248d0:	ldr	r4, [sp, #120]	; 0x78
   248d4:	ldr	r2, [r3, #8]
   248d8:	ldr	r3, [r1, r4, lsl #2]
   248dc:	ldr	fp, [r2]
   248e0:	add	r1, r3, #12
   248e4:	mov	r2, fp
   248e8:	ldr	r0, [r3, #8]
   248ec:	bl	1d674 <__assert_fail@plt+0xbcd4>
   248f0:	cmp	r0, #0
   248f4:	bne	245b8 <__assert_fail@plt+0x12c18>
   248f8:	ldr	r1, [r5]
   248fc:	add	r1, r1, r6
   24900:	b	245e0 <__assert_fail@plt+0x12c40>
   24904:	ldr	r6, [sp, #120]	; 0x78
   24908:	b	24864 <__assert_fail@plt+0x12ec4>
   2490c:	mov	r1, fp
   24910:	mov	r0, r9
   24914:	bl	1d0e4 <__assert_fail@plt+0xb744>
   24918:	cmp	r0, #0
   2491c:	bne	24550 <__assert_fail@plt+0x12bb0>
   24920:	ldr	r0, [sp, #132]	; 0x84
   24924:	ldr	r8, [sp, #12]
   24928:	bl	1b944 <__assert_fail@plt+0x9fa4>
   2492c:	b	246f8 <__assert_fail@plt+0x12d58>
   24930:	add	sl, sp, #136	; 0x88
   24934:	b	246dc <__assert_fail@plt+0x12d3c>
   24938:	mov	r3, #12
   2493c:	str	r3, [sp, #48]	; 0x30
   24940:	b	241c8 <__assert_fail@plt+0x12828>
   24944:	mov	r2, fp
   24948:	add	r1, sp, #132	; 0x84
   2494c:	ldr	r0, [sp, #128]	; 0x80
   24950:	bl	1d674 <__assert_fail@plt+0xbcd4>
   24954:	cmp	r0, #0
   24958:	bne	24a3c <__assert_fail@plt+0x1309c>
   2495c:	cmp	sl, #0
   24960:	beq	245b8 <__assert_fail@plt+0x12c18>
   24964:	ldr	r4, [sl]
   24968:	ldr	r3, [sl, #4]
   2496c:	add	r1, r4, #1
   24970:	cmp	r1, r3
   24974:	str	r1, [sl]
   24978:	ldr	r5, [sp, #120]	; 0x78
   2497c:	beq	24a10 <__assert_fail@plt+0x13070>
   24980:	ldr	r3, [sl, #8]
   24984:	add	r2, r4, r4, lsl #1
   24988:	ldr	r0, [sp, #44]	; 0x2c
   2498c:	lsl	r4, r2, #3
   24990:	str	r5, [r3, r2, lsl #3]
   24994:	add	r5, r3, r4
   24998:	str	r6, [r5, #4]
   2499c:	bl	1ba3c <__assert_fail@plt+0xa09c>
   249a0:	ldr	r3, [sl, #8]
   249a4:	add	r3, r3, r4
   249a8:	str	r0, [r5, #8]
   249ac:	ldr	r0, [r3, #8]
   249b0:	cmp	r0, #0
   249b4:	beq	24920 <__assert_fail@plt+0x12f80>
   249b8:	ldr	r5, [sp, #20]
   249bc:	ldr	r1, [sp, #476]	; 0x1dc
   249c0:	mov	r2, r5
   249c4:	bl	115d4 <memcpy@plt>
   249c8:	ldr	r3, [sl, #8]
   249cc:	mov	r2, r5
   249d0:	add	r3, r3, r4
   249d4:	ldr	r1, [sp, #16]
   249d8:	ldr	r0, [r3, #8]
   249dc:	add	r0, r0, r5
   249e0:	bl	115d4 <memcpy@plt>
   249e4:	ldr	r0, [sl, #8]
   249e8:	mov	r1, r9
   249ec:	add	r0, r0, r4
   249f0:	add	r0, r0, #12
   249f4:	bl	1dfcc <__assert_fail@plt+0xc62c>
   249f8:	cmp	r0, #0
   249fc:	beq	245b8 <__assert_fail@plt+0x12c18>
   24a00:	b	24920 <__assert_fail@plt+0x12f80>
   24a04:	cmn	fp, #2
   24a08:	bne	24160 <__assert_fail@plt+0x127c0>
   24a0c:	b	24920 <__assert_fail@plt+0x12f80>
   24a10:	add	r1, r1, r1, lsl #1
   24a14:	ldr	r0, [sl, #8]
   24a18:	lsl	r1, r1, #4
   24a1c:	bl	1babc <__assert_fail@plt+0xa11c>
   24a20:	subs	r3, r0, #0
   24a24:	beq	24920 <__assert_fail@plt+0x12f80>
   24a28:	ldr	r2, [sl, #4]
   24a2c:	str	r3, [sl, #8]
   24a30:	lsl	r2, r2, #1
   24a34:	str	r2, [sl, #4]
   24a38:	b	24984 <__assert_fail@plt+0x12fe4>
   24a3c:	mov	fp, r6
   24a40:	b	245b8 <__assert_fail@plt+0x12c18>
   24a44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a48:	mov	fp, r2
   24a4c:	ldr	r2, [r0, #100]	; 0x64
   24a50:	sub	sp, sp, #100	; 0x64
   24a54:	mov	ip, #0
   24a58:	ldr	r2, [r2, fp, lsl #2]
   24a5c:	mov	r4, r3
   24a60:	cmp	r2, ip
   24a64:	lsl	r3, fp, #2
   24a68:	str	r3, [sp, #40]	; 0x28
   24a6c:	str	r0, [sp, #32]
   24a70:	mov	r9, r1
   24a74:	ldr	r5, [r0, #84]	; 0x54
   24a78:	str	ip, [sp, #64]	; 0x40
   24a7c:	ldr	r3, [r4, #4]
   24a80:	beq	24ef4 <__assert_fail@plt+0x13554>
   24a84:	add	r2, r2, #4
   24a88:	cmp	r3, ip
   24a8c:	str	r2, [sp, #24]
   24a90:	bne	24ad0 <__assert_fail@plt+0x13130>
   24a94:	ldr	r3, [r9]
   24a98:	mov	r2, #0
   24a9c:	str	r2, [r3, fp, lsl #2]
   24aa0:	ldr	r3, [sp, #24]
   24aa4:	cmp	r3, #0
   24aa8:	beq	24c30 <__assert_fail@plt+0x13290>
   24aac:	ldr	r3, [sp, #32]
   24ab0:	ldr	r3, [r3, #100]	; 0x64
   24ab4:	ldr	r3, [r3, fp, lsl #2]
   24ab8:	ldrb	r3, [r3, #52]	; 0x34
   24abc:	ands	r3, r3, #64	; 0x40
   24ac0:	bne	24b84 <__assert_fail@plt+0x131e4>
   24ac4:	mov	r0, r3
   24ac8:	add	sp, sp, #100	; 0x64
   24acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ad0:	add	r0, sp, #96	; 0x60
   24ad4:	mov	r2, r4
   24ad8:	str	ip, [r0, #-28]!	; 0xffffffe4
   24adc:	mov	r1, r5
   24ae0:	bl	1e4b8 <__assert_fail@plt+0xcb18>
   24ae4:	ldr	r3, [sp, #68]	; 0x44
   24ae8:	cmp	r3, #0
   24aec:	mov	r6, r0
   24af0:	bne	24ac4 <__assert_fail@plt+0x13124>
   24af4:	ldr	r7, [r0, #28]
   24af8:	cmp	r7, #0
   24afc:	addne	r6, r0, #28
   24b00:	bne	24c40 <__assert_fail@plt+0x132a0>
   24b04:	ldr	r0, [r4, #4]
   24b08:	str	r7, [r6, #32]
   24b0c:	str	r0, [r6, #28]
   24b10:	lsl	r0, r0, #2
   24b14:	bl	1ba3c <__assert_fail@plt+0xa09c>
   24b18:	add	r6, r6, #28
   24b1c:	cmp	r0, #0
   24b20:	str	r0, [r6, #8]
   24b24:	beq	24b74 <__assert_fail@plt+0x131d4>
   24b28:	ldr	r3, [r4, #4]
   24b2c:	str	r7, [sp, #68]	; 0x44
   24b30:	cmp	r3, #0
   24b34:	bgt	24b48 <__assert_fail@plt+0x131a8>
   24b38:	b	24c40 <__assert_fail@plt+0x132a0>
   24b3c:	ldr	r3, [r4, #4]
   24b40:	cmp	r7, r3
   24b44:	bge	24c40 <__assert_fail@plt+0x132a0>
   24b48:	ldr	r3, [r4, #8]
   24b4c:	ldr	r1, [r5, #28]
   24b50:	mov	r0, r6
   24b54:	ldr	r3, [r3, r7, lsl #2]
   24b58:	add	r7, r7, #1
   24b5c:	add	r3, r3, r3, lsl #1
   24b60:	add	r1, r1, r3, lsl #2
   24b64:	bl	1ebe0 <__assert_fail@plt+0xd240>
   24b68:	cmp	r0, #0
   24b6c:	str	r0, [sp, #68]	; 0x44
   24b70:	beq	24b3c <__assert_fail@plt+0x1319c>
   24b74:	mov	r3, #12
   24b78:	mov	r0, r3
   24b7c:	add	sp, sp, #100	; 0x64
   24b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b84:	ldr	r3, [sp, #32]
   24b88:	ldr	ip, [r3, #108]	; 0x6c
   24b8c:	mov	r3, #0
   24b90:	mov	r0, r3
   24b94:	mov	r3, ip
   24b98:	cmp	r0, r3
   24b9c:	bge	24bfc <__assert_fail@plt+0x1325c>
   24ba0:	add	r2, r0, r3
   24ba4:	ldr	r1, [sp, #32]
   24ba8:	add	r2, r2, r2, lsr #31
   24bac:	asr	r2, r2, #1
   24bb0:	ldr	lr, [r1, #116]	; 0x74
   24bb4:	add	r1, r2, r2, lsl #1
   24bb8:	add	r1, lr, r1, lsl #3
   24bbc:	ldr	r1, [r1, #4]
   24bc0:	cmp	fp, r1
   24bc4:	ble	24bec <__assert_fail@plt+0x1324c>
   24bc8:	b	24c94 <__assert_fail@plt+0x132f4>
   24bcc:	asr	r3, r3, #1
   24bd0:	mov	r4, r3
   24bd4:	add	r1, r3, r3, lsl #1
   24bd8:	add	r1, lr, r1, lsl #3
   24bdc:	ldr	r1, [r1, #4]
   24be0:	cmp	fp, r1
   24be4:	bgt	24c9c <__assert_fail@plt+0x132fc>
   24be8:	mov	r2, r3
   24bec:	add	r3, r0, r2
   24bf0:	cmp	r0, r2
   24bf4:	add	r3, r3, r3, lsr #31
   24bf8:	blt	24bcc <__assert_fail@plt+0x1322c>
   24bfc:	str	r0, [sp, #44]	; 0x2c
   24c00:	ldr	r3, [sp, #44]	; 0x2c
   24c04:	cmp	ip, r3
   24c08:	ble	24c30 <__assert_fail@plt+0x13290>
   24c0c:	add	r2, r3, r3, lsl #1
   24c10:	ldr	r3, [sp, #32]
   24c14:	lsl	r2, r2, #3
   24c18:	str	r2, [sp, #56]	; 0x38
   24c1c:	ldr	r3, [r3, #116]	; 0x74
   24c20:	add	r3, r3, r2
   24c24:	ldr	r3, [r3, #4]
   24c28:	cmp	fp, r3
   24c2c:	beq	24ca8 <__assert_fail@plt+0x13308>
   24c30:	mov	r3, #0
   24c34:	mov	r0, r3
   24c38:	add	sp, sp, #100	; 0x64
   24c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c40:	mov	r2, r6
   24c44:	ldr	r1, [sp, #24]
   24c48:	mov	r0, r4
   24c4c:	bl	1e76c <__assert_fail@plt+0xcdcc>
   24c50:	cmp	r0, #0
   24c54:	mov	r3, r0
   24c58:	str	r0, [sp, #64]	; 0x40
   24c5c:	bne	24ac4 <__assert_fail@plt+0x13124>
   24c60:	ldr	r2, [r9, #20]
   24c64:	cmp	r2, #0
   24c68:	bne	24f08 <__assert_fail@plt+0x13568>
   24c6c:	mov	r2, r4
   24c70:	mov	r1, r5
   24c74:	add	r0, sp, #64	; 0x40
   24c78:	ldr	r4, [r9]
   24c7c:	bl	1e4b8 <__assert_fail@plt+0xcb18>
   24c80:	ldr	r3, [sp, #64]	; 0x40
   24c84:	cmp	r3, #0
   24c88:	str	r0, [r4, fp, lsl #2]
   24c8c:	beq	24aa0 <__assert_fail@plt+0x13100>
   24c90:	b	24ac4 <__assert_fail@plt+0x13124>
   24c94:	mov	r4, r2
   24c98:	mov	r2, r3
   24c9c:	add	r0, r4, #1
   24ca0:	mov	r3, r2
   24ca4:	b	24b98 <__assert_fail@plt+0x131f8>
   24ca8:	ldr	r3, [sp, #44]	; 0x2c
   24cac:	cmn	r3, #1
   24cb0:	beq	24c30 <__assert_fail@plt+0x13290>
   24cb4:	ldr	r3, [sp, #24]
   24cb8:	ldr	r2, [sp, #32]
   24cbc:	ldr	r0, [r3, #4]
   24cc0:	mov	r3, #0
   24cc4:	cmp	r0, r3
   24cc8:	str	r3, [sp, #68]	; 0x44
   24ccc:	ldr	sl, [r2, #84]	; 0x54
   24cd0:	ble	24c30 <__assert_fail@plt+0x13290>
   24cd4:	str	r3, [sp, #16]
   24cd8:	add	r3, r9, #24
   24cdc:	str	r3, [sp, #48]	; 0x30
   24ce0:	add	r3, r9, #20
   24ce4:	str	r3, [sp, #52]	; 0x34
   24ce8:	add	r3, fp, #1
   24cec:	str	r3, [sp, #60]	; 0x3c
   24cf0:	b	24d10 <__assert_fail@plt+0x13370>
   24cf4:	cmp	r3, #4
   24cf8:	beq	24d4c <__assert_fail@plt+0x133ac>
   24cfc:	ldr	r3, [sp, #16]
   24d00:	add	r3, r3, #1
   24d04:	cmp	r3, r0
   24d08:	str	r3, [sp, #16]
   24d0c:	bge	251c4 <__assert_fail@plt+0x13824>
   24d10:	ldr	r3, [sp, #24]
   24d14:	ldr	ip, [sp, #16]
   24d18:	ldr	r2, [r9, #8]
   24d1c:	ldr	r1, [r3, #8]
   24d20:	ldr	r3, [sl]
   24d24:	ldr	r8, [r1, ip, lsl #2]
   24d28:	cmp	r8, r2
   24d2c:	add	r3, r3, r8, lsl #3
   24d30:	ldrb	r3, [r3, #4]
   24d34:	bne	24cf4 <__assert_fail@plt+0x13354>
   24d38:	ldr	r2, [r9, #12]
   24d3c:	cmp	fp, r2
   24d40:	beq	24cfc <__assert_fail@plt+0x1335c>
   24d44:	cmp	r3, #4
   24d48:	bne	24cfc <__assert_fail@plt+0x1335c>
   24d4c:	ldr	r3, [sp, #32]
   24d50:	ldr	r2, [sp, #56]	; 0x38
   24d54:	ldr	r6, [sp, #44]	; 0x2c
   24d58:	ldr	r4, [r3, #116]	; 0x74
   24d5c:	add	r3, r8, r8, lsl #1
   24d60:	add	r4, r4, r2
   24d64:	lsl	r3, r3, #2
   24d68:	str	r3, [sp, #36]	; 0x24
   24d6c:	lsl	r3, r8, #2
   24d70:	str	r3, [sp, #28]
   24d74:	mov	r7, r2
   24d78:	b	24d94 <__assert_fail@plt+0x133f4>
   24d7c:	ldrb	r3, [r4, #20]
   24d80:	add	r6, r6, #1
   24d84:	add	r7, r7, #24
   24d88:	cmp	r3, #0
   24d8c:	add	r4, r4, #24
   24d90:	beq	24ee8 <__assert_fail@plt+0x13548>
   24d94:	ldr	r3, [r4]
   24d98:	cmp	r8, r3
   24d9c:	bne	24d7c <__assert_fail@plt+0x133dc>
   24da0:	ldr	r3, [r4, #8]
   24da4:	ldr	r5, [r4, #12]
   24da8:	sub	r5, r5, r3
   24dac:	cmp	r5, #0
   24db0:	add	r5, fp, r5
   24db4:	ldreq	r3, [sl, #20]
   24db8:	ldreq	r2, [sp, #36]	; 0x24
   24dbc:	ldrne	r2, [sp, #28]
   24dc0:	addeq	r3, r3, r2
   24dc4:	ldrne	r3, [sl, #12]
   24dc8:	ldreq	r3, [r3, #8]
   24dcc:	ldrne	r3, [r3, r2]
   24dd0:	ldr	r2, [r9, #12]
   24dd4:	ldreq	r3, [r3]
   24dd8:	cmp	r5, r2
   24ddc:	bgt	24d7c <__assert_fail@plt+0x133dc>
   24de0:	ldr	r2, [r9]
   24de4:	ldr	r0, [r2, r5, lsl #2]
   24de8:	cmp	r0, #0
   24dec:	beq	24d7c <__assert_fail@plt+0x133dc>
   24df0:	mov	r2, r3
   24df4:	add	r1, r0, #12
   24df8:	ldr	r0, [r0, #8]
   24dfc:	str	r3, [sp, #20]
   24e00:	bl	1d674 <__assert_fail@plt+0xbcd4>
   24e04:	ldr	r3, [sp, #20]
   24e08:	cmp	r0, #0
   24e0c:	beq	24d7c <__assert_fail@plt+0x133dc>
   24e10:	stmib	sp, {r3, r5}
   24e14:	str	fp, [sp]
   24e18:	mov	r3, r8
   24e1c:	ldr	r2, [sp, #48]	; 0x30
   24e20:	ldr	r1, [sp, #52]	; 0x34
   24e24:	ldr	r0, [sp, #32]
   24e28:	bl	1d940 <__assert_fail@plt+0xbfa0>
   24e2c:	cmp	r0, #0
   24e30:	bne	24d7c <__assert_fail@plt+0x133dc>
   24e34:	ldr	r3, [sp, #68]	; 0x44
   24e38:	cmp	r3, #0
   24e3c:	beq	2514c <__assert_fail@plt+0x137ac>
   24e40:	mov	r1, r6
   24e44:	add	r0, sp, #84	; 0x54
   24e48:	str	r8, [sp, #76]	; 0x4c
   24e4c:	str	fp, [sp, #80]	; 0x50
   24e50:	bl	1d0e4 <__assert_fail@plt+0xb744>
   24e54:	cmp	r0, #0
   24e58:	beq	251d8 <__assert_fail@plt+0x13838>
   24e5c:	ldr	r3, [sp, #68]	; 0x44
   24e60:	ldr	r2, [sp, #40]	; 0x28
   24e64:	add	r1, sp, #68	; 0x44
   24e68:	ldr	r0, [sp, #32]
   24e6c:	ldr	r4, [r3, r2]
   24e70:	bl	22d5c <__assert_fail@plt+0x113bc>
   24e74:	cmp	r0, #0
   24e78:	bne	25178 <__assert_fail@plt+0x137d8>
   24e7c:	ldr	r1, [r9, #4]
   24e80:	cmp	r1, #0
   24e84:	beq	24ea0 <__assert_fail@plt+0x13500>
   24e88:	ldr	r3, [sp, #60]	; 0x3c
   24e8c:	ldr	r2, [sp, #68]	; 0x44
   24e90:	mov	r0, sl
   24e94:	bl	1e6b4 <__assert_fail@plt+0xcd14>
   24e98:	cmp	r0, #0
   24e9c:	bne	25178 <__assert_fail@plt+0x137d8>
   24ea0:	ldr	r3, [sp, #68]	; 0x44
   24ea4:	ldr	r1, [sp, #40]	; 0x28
   24ea8:	ldr	r5, [sp, #88]	; 0x58
   24eac:	mov	r2, r6
   24eb0:	str	r4, [r3, r1]
   24eb4:	mov	r0, r5
   24eb8:	add	r1, sp, #92	; 0x5c
   24ebc:	bl	1d674 <__assert_fail@plt+0xbcd4>
   24ec0:	sub	r2, r0, #1
   24ec4:	cmp	r5, r2
   24ec8:	movgt	r3, #0
   24ecc:	movle	r3, #1
   24ed0:	orrs	r3, r3, r2, lsr #31
   24ed4:	beq	251a4 <__assert_fail@plt+0x13804>
   24ed8:	ldr	r3, [sp, #32]
   24edc:	ldr	r4, [r3, #116]	; 0x74
   24ee0:	add	r4, r4, r7
   24ee4:	b	24d7c <__assert_fail@plt+0x133dc>
   24ee8:	ldr	r3, [sp, #24]
   24eec:	ldr	r0, [r3, #4]
   24ef0:	b	24cfc <__assert_fail@plt+0x1335c>
   24ef4:	cmp	r3, #0
   24ef8:	strne	r2, [sp, #24]
   24efc:	bne	24c6c <__assert_fail@plt+0x132cc>
   24f00:	str	r3, [sp, #24]
   24f04:	b	24a94 <__assert_fail@plt+0x130f4>
   24f08:	ldr	r2, [sp, #32]
   24f0c:	ldr	r2, [r2, #116]	; 0x74
   24f10:	str	r2, [sp, #20]
   24f14:	ble	24ff8 <__assert_fail@plt+0x13658>
   24f18:	mov	r8, r0
   24f1c:	str	fp, [sp, #16]
   24f20:	ldr	r3, [r9, #24]
   24f24:	ldr	r2, [sp, #20]
   24f28:	ldr	r0, [sp, #16]
   24f2c:	ldr	r3, [r3, r8, lsl #2]
   24f30:	add	r3, r3, r3, lsl #1
   24f34:	add	r2, r2, r3, lsl #3
   24f38:	ldr	r1, [r2, #8]
   24f3c:	cmp	r0, r1
   24f40:	ble	24fe4 <__assert_fail@plt+0x13644>
   24f44:	ldr	r1, [r2, #4]
   24f48:	ldr	r0, [sp, #16]
   24f4c:	cmp	r0, r1
   24f50:	bgt	24fe4 <__assert_fail@plt+0x13644>
   24f54:	ldr	r1, [sp, #20]
   24f58:	ldr	r2, [r2, #12]
   24f5c:	ldr	r7, [r4, #4]
   24f60:	ldr	r1, [r1, r3, lsl #3]
   24f64:	ldr	r3, [r5]
   24f68:	cmp	r0, r2
   24f6c:	ldr	r6, [r3, r1, lsl #3]
   24f70:	beq	25004 <__assert_fail@plt+0x13664>
   24f74:	cmp	r7, #0
   24f78:	ble	24fe4 <__assert_fail@plt+0x13644>
   24f7c:	mov	sl, #0
   24f80:	b	24f94 <__assert_fail@plt+0x135f4>
   24f84:	add	sl, sl, #1
   24f88:	cmp	sl, r7
   24f8c:	bge	24fe4 <__assert_fail@plt+0x13644>
   24f90:	ldr	r3, [r5]
   24f94:	ldr	r2, [r4, #8]
   24f98:	ldr	r1, [r2, sl, lsl #2]
   24f9c:	add	r2, r3, r1, lsl #3
   24fa0:	ldrb	r2, [r2, #4]
   24fa4:	sub	r2, r2, #8
   24fa8:	cmp	r2, #1
   24fac:	bhi	24f84 <__assert_fail@plt+0x135e4>
   24fb0:	ldr	r3, [r3, r1, lsl #3]
   24fb4:	cmp	r6, r3
   24fb8:	bne	24f84 <__assert_fail@plt+0x135e4>
   24fbc:	ldr	r3, [sp, #24]
   24fc0:	mov	r2, r4
   24fc4:	mov	r0, r5
   24fc8:	bl	1e920 <__assert_fail@plt+0xcf80>
   24fcc:	cmp	r0, #0
   24fd0:	bne	251ec <__assert_fail@plt+0x1384c>
   24fd4:	ldr	r7, [r4, #4]
   24fd8:	add	sl, sl, #1
   24fdc:	cmp	sl, r7
   24fe0:	blt	24f90 <__assert_fail@plt+0x135f0>
   24fe4:	ldr	r3, [r9, #20]
   24fe8:	add	r8, r8, #1
   24fec:	cmp	r8, r3
   24ff0:	blt	24f20 <__assert_fail@plt+0x13580>
   24ff4:	ldr	fp, [sp, #16]
   24ff8:	mov	r3, #0
   24ffc:	str	r3, [sp, #64]	; 0x40
   25000:	b	24c6c <__assert_fail@plt+0x132cc>
   25004:	cmp	r7, #0
   25008:	ble	24fe4 <__assert_fail@plt+0x13644>
   2500c:	ldr	ip, [r4, #8]
   25010:	mvn	r2, #0
   25014:	mov	fp, r2
   25018:	add	sl, ip, r7, lsl #2
   2501c:	mov	r2, ip
   25020:	str	ip, [sp, #28]
   25024:	mov	ip, fp
   25028:	b	25048 <__assert_fail@plt+0x136a8>
   2502c:	cmp	r0, #9
   25030:	bne	25040 <__assert_fail@plt+0x136a0>
   25034:	ldr	r0, [lr]
   25038:	cmp	r6, r0
   2503c:	moveq	fp, r1
   25040:	cmp	sl, r2
   25044:	beq	25070 <__assert_fail@plt+0x136d0>
   25048:	ldr	r1, [r2], #4
   2504c:	add	lr, r3, r1, lsl #3
   25050:	ldrb	r0, [lr, #4]
   25054:	cmp	r0, #8
   25058:	bne	2502c <__assert_fail@plt+0x1368c>
   2505c:	ldr	r0, [r3, r1, lsl #3]
   25060:	cmp	r6, r0
   25064:	moveq	ip, r1
   25068:	cmp	sl, r2
   2506c:	bne	25048 <__assert_fail@plt+0x136a8>
   25070:	mov	r3, ip
   25074:	cmp	r3, #0
   25078:	mov	r6, fp
   2507c:	ldr	ip, [sp, #28]
   25080:	blt	251e0 <__assert_fail@plt+0x13840>
   25084:	mov	r1, r3
   25088:	mov	r2, r4
   2508c:	ldr	r3, [sp, #24]
   25090:	mov	r0, r5
   25094:	bl	1e920 <__assert_fail@plt+0xcf80>
   25098:	cmp	r0, #0
   2509c:	bne	251ec <__assert_fail@plt+0x1384c>
   250a0:	cmp	fp, #0
   250a4:	blt	24fe4 <__assert_fail@plt+0x13644>
   250a8:	ldr	r7, [r4, #4]
   250ac:	cmp	r7, #0
   250b0:	ble	24fe4 <__assert_fail@plt+0x13644>
   250b4:	ldr	ip, [r4, #8]
   250b8:	mov	sl, #0
   250bc:	str	r8, [sp, #28]
   250c0:	mov	fp, r6
   250c4:	b	250d8 <__assert_fail@plt+0x13738>
   250c8:	add	sl, sl, #1
   250cc:	cmp	sl, r7
   250d0:	bge	251bc <__assert_fail@plt+0x1381c>
   250d4:	ldr	ip, [r4, #8]
   250d8:	ldr	r8, [ip, sl, lsl #2]
   250dc:	ldr	r0, [r5, #28]
   250e0:	mov	r2, fp
   250e4:	add	r6, r8, r8, lsl #1
   250e8:	lsl	r6, r6, #2
   250ec:	add	r0, r0, r6
   250f0:	add	r1, r0, #8
   250f4:	ldr	r0, [r0, #4]
   250f8:	bl	1d674 <__assert_fail@plt+0xbcd4>
   250fc:	mov	r2, fp
   25100:	cmp	r0, #0
   25104:	bne	250c8 <__assert_fail@plt+0x13728>
   25108:	ldr	r1, [r5, #24]
   2510c:	add	r6, r1, r6
   25110:	add	r1, r6, #8
   25114:	ldr	r0, [r6, #4]
   25118:	bl	1d674 <__assert_fail@plt+0xbcd4>
   2511c:	cmp	r0, #0
   25120:	bne	250c8 <__assert_fail@plt+0x13728>
   25124:	mov	r1, r8
   25128:	ldr	r3, [sp, #24]
   2512c:	mov	r2, r4
   25130:	mov	r0, r5
   25134:	bl	1e920 <__assert_fail@plt+0xcf80>
   25138:	sub	sl, sl, #1
   2513c:	cmp	r0, #0
   25140:	bne	251ec <__assert_fail@plt+0x1384c>
   25144:	ldr	r7, [r4, #4]
   25148:	b	250c8 <__assert_fail@plt+0x13728>
   2514c:	mov	ip, r9
   25150:	add	lr, sp, #68	; 0x44
   25154:	ldm	ip!, {r0, r1, r2, r3}
   25158:	stmia	lr!, {r0, r1, r2, r3}
   2515c:	ldm	ip, {r0, r1, r2}
   25160:	stm	lr, {r0, r1, r2}
   25164:	mov	r1, ip
   25168:	add	r0, sp, #84	; 0x54
   2516c:	bl	1dfcc <__assert_fail@plt+0xc62c>
   25170:	cmp	r0, #0
   25174:	beq	24e40 <__assert_fail@plt+0x134a0>
   25178:	mov	r3, r0
   2517c:	ldr	r2, [sp, #68]	; 0x44
   25180:	cmp	r2, #0
   25184:	beq	24ac4 <__assert_fail@plt+0x13124>
   25188:	ldr	r0, [sp, #92]	; 0x5c
   2518c:	str	r3, [sp, #16]
   25190:	bl	1b944 <__assert_fail@plt+0x9fa4>
   25194:	ldr	r3, [sp, #16]
   25198:	mov	r0, r3
   2519c:	add	sp, sp, #100	; 0x64
   251a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   251a4:	add	r0, sp, #96	; 0x60
   251a8:	sub	r5, r5, #1
   251ac:	str	r5, [r0, #-8]!
   251b0:	add	r1, sp, #92	; 0x5c
   251b4:	bl	1d804 <__assert_fail@plt+0xbe64>
   251b8:	b	24ed8 <__assert_fail@plt+0x13538>
   251bc:	ldr	r8, [sp, #28]
   251c0:	b	24fe4 <__assert_fail@plt+0x13644>
   251c4:	ldr	r3, [sp, #68]	; 0x44
   251c8:	cmp	r3, #0
   251cc:	movne	r3, #0
   251d0:	bne	25188 <__assert_fail@plt+0x137e8>
   251d4:	b	24c30 <__assert_fail@plt+0x13290>
   251d8:	mov	r3, #12
   251dc:	b	2517c <__assert_fail@plt+0x137dc>
   251e0:	cmp	fp, #0
   251e4:	bge	250b8 <__assert_fail@plt+0x13718>
   251e8:	b	24fe4 <__assert_fail@plt+0x13644>
   251ec:	mov	r3, r0
   251f0:	b	24ac4 <__assert_fail@plt+0x13124>
   251f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   251f8:	sub	sp, sp, #8
   251fc:	ldr	r6, [r1, #40]	; 0x28
   25200:	ldr	r3, [r1, #56]	; 0x38
   25204:	cmp	r3, r6
   25208:	ble	2547c <__assert_fail@plt+0x13adc>
   2520c:	ldr	sl, [r1, #4]
   25210:	ldrb	r3, [r0, #6]
   25214:	mov	r8, r2
   25218:	ldrb	r7, [sl, r6]
   2521c:	and	r3, r3, #159	; 0x9f
   25220:	strb	r3, [r0, #6]
   25224:	strb	r7, [r0]
   25228:	ldr	r3, [r1, #80]	; 0x50
   2522c:	mov	r5, r0
   25230:	cmp	r3, #1
   25234:	mov	r4, r1
   25238:	ble	25490 <__assert_fail@plt+0x13af0>
   2523c:	ldr	r2, [r1, #28]
   25240:	cmp	r6, r2
   25244:	beq	25258 <__assert_fail@plt+0x138b8>
   25248:	ldr	r2, [r1, #8]
   2524c:	ldr	r2, [r2, r6, lsl #2]
   25250:	cmn	r2, #1
   25254:	beq	256f0 <__assert_fail@plt+0x13d50>
   25258:	cmp	r7, #92	; 0x5c
   2525c:	beq	254f8 <__assert_fail@plt+0x13b58>
   25260:	ldr	r3, [r4, #8]
   25264:	mov	r2, #1
   25268:	strb	r2, [r5, #4]
   2526c:	ldr	r9, [r3, r6, lsl #2]
   25270:	mov	r0, r9
   25274:	bl	117e4 <iswalnum@plt>
   25278:	ldrb	r3, [r5, #6]
   2527c:	sub	r9, r9, #95	; 0x5f
   25280:	clz	r9, r9
   25284:	lsr	r9, r9, #5
   25288:	bic	r3, r3, #64	; 0x40
   2528c:	cmp	r0, #0
   25290:	orrne	r9, r9, #1
   25294:	orr	r9, r3, r9, lsl #6
   25298:	strb	r9, [r5, #6]
   2529c:	sub	r7, r7, #10
   252a0:	cmp	r7, #115	; 0x73
   252a4:	ldrls	pc, [pc, r7, lsl #2]
   252a8:	b	254ec <__assert_fail@plt+0x13b4c>
   252ac:	andeq	r5, r2, r4, lsr r7
   252b0:	andeq	r5, r2, ip, ror #9
   252b4:	andeq	r5, r2, ip, ror #9
   252b8:	andeq	r5, r2, ip, ror #9
   252bc:	andeq	r5, r2, ip, ror #9
   252c0:	andeq	r5, r2, ip, ror #9
   252c4:	andeq	r5, r2, ip, ror #9
   252c8:	andeq	r5, r2, ip, ror #9
   252cc:	andeq	r5, r2, ip, ror #9
   252d0:	andeq	r5, r2, ip, ror #9
   252d4:	andeq	r5, r2, ip, ror #9
   252d8:	andeq	r5, r2, ip, ror #9
   252dc:	andeq	r5, r2, ip, ror #9
   252e0:	andeq	r5, r2, ip, ror #9
   252e4:	andeq	r5, r2, ip, ror #9
   252e8:	andeq	r5, r2, ip, ror #9
   252ec:	andeq	r5, r2, ip, ror #9
   252f0:	andeq	r5, r2, ip, ror #9
   252f4:	andeq	r5, r2, ip, ror #9
   252f8:	andeq	r5, r2, ip, ror #9
   252fc:	andeq	r5, r2, ip, ror #9
   25300:	andeq	r5, r2, ip, ror #9
   25304:	andeq	r5, r2, ip, ror #9
   25308:	andeq	r5, r2, ip, ror #9
   2530c:	andeq	r5, r2, ip, ror #9
   25310:	andeq	r5, r2, ip, ror #9
   25314:	andeq	r5, r2, ip, asr #14
   25318:	andeq	r5, r2, ip, ror #9
   2531c:	andeq	r5, r2, ip, ror #9
   25320:	andeq	r5, r2, ip, ror #9
   25324:	andeq	r5, r2, ip, lsr #15
   25328:	andeq	r5, r2, r4, asr #15
   2532c:	ldrdeq	r5, [r2], -ip
   25330:	andeq	r5, r2, ip, ror #15
   25334:	andeq	r5, r2, ip, ror #9
   25338:	andeq	r5, r2, ip, ror #9
   2533c:	andeq	r5, r2, ip, lsl #16
   25340:	andeq	r5, r2, ip, ror #9
   25344:	andeq	r5, r2, ip, ror #9
   25348:	andeq	r5, r2, ip, ror #9
   2534c:	andeq	r5, r2, ip, ror #9
   25350:	andeq	r5, r2, ip, ror #9
   25354:	andeq	r5, r2, ip, ror #9
   25358:	andeq	r5, r2, ip, ror #9
   2535c:	andeq	r5, r2, ip, ror #9
   25360:	andeq	r5, r2, ip, ror #9
   25364:	andeq	r5, r2, ip, ror #9
   25368:	andeq	r5, r2, ip, ror #9
   2536c:	andeq	r5, r2, ip, ror #9
   25370:	andeq	r5, r2, ip, ror #9
   25374:	andeq	r5, r2, ip, ror #9
   25378:	andeq	r5, r2, ip, ror #9
   2537c:	andeq	r5, r2, ip, ror #9
   25380:	andeq	r5, r2, ip, lsl r8
   25384:	andeq	r5, r2, ip, ror #9
   25388:	andeq	r5, r2, ip, ror #9
   2538c:	andeq	r5, r2, ip, ror #9
   25390:	andeq	r5, r2, ip, ror #9
   25394:	andeq	r5, r2, ip, ror #9
   25398:	andeq	r5, r2, ip, ror #9
   2539c:	andeq	r5, r2, ip, ror #9
   253a0:	andeq	r5, r2, ip, ror #9
   253a4:	andeq	r5, r2, ip, ror #9
   253a8:	andeq	r5, r2, ip, ror #9
   253ac:	andeq	r5, r2, ip, ror #9
   253b0:	andeq	r5, r2, ip, ror #9
   253b4:	andeq	r5, r2, ip, ror #9
   253b8:	andeq	r5, r2, ip, ror #9
   253bc:	andeq	r5, r2, ip, ror #9
   253c0:	andeq	r5, r2, ip, ror #9
   253c4:	andeq	r5, r2, ip, ror #9
   253c8:	andeq	r5, r2, ip, ror #9
   253cc:	andeq	r5, r2, ip, ror #9
   253d0:	andeq	r5, r2, ip, ror #9
   253d4:	andeq	r5, r2, ip, ror #9
   253d8:	andeq	r5, r2, ip, ror #9
   253dc:	andeq	r5, r2, ip, ror #9
   253e0:	andeq	r5, r2, ip, ror #9
   253e4:	andeq	r5, r2, ip, ror #9
   253e8:	andeq	r5, r2, ip, ror #9
   253ec:	andeq	r5, r2, ip, ror #9
   253f0:	andeq	r5, r2, ip, lsr r8
   253f4:	andeq	r5, r2, ip, ror #9
   253f8:	andeq	r5, r2, ip, ror #9
   253fc:	andeq	r5, r2, ip, asr #16
   25400:	andeq	r5, r2, ip, ror #9
   25404:	andeq	r5, r2, ip, ror #9
   25408:	andeq	r5, r2, ip, ror #9
   2540c:	andeq	r5, r2, ip, ror #9
   25410:	andeq	r5, r2, ip, ror #9
   25414:	andeq	r5, r2, ip, ror #9
   25418:	andeq	r5, r2, ip, ror #9
   2541c:	andeq	r5, r2, ip, ror #9
   25420:	andeq	r5, r2, ip, ror #9
   25424:	andeq	r5, r2, ip, ror #9
   25428:	andeq	r5, r2, ip, ror #9
   2542c:	andeq	r5, r2, ip, ror #9
   25430:	andeq	r5, r2, ip, ror #9
   25434:	andeq	r5, r2, ip, ror #9
   25438:	andeq	r5, r2, ip, ror #9
   2543c:	andeq	r5, r2, ip, ror #9
   25440:	andeq	r5, r2, ip, ror #9
   25444:	andeq	r5, r2, ip, ror #9
   25448:	andeq	r5, r2, ip, ror #9
   2544c:	andeq	r5, r2, ip, ror #9
   25450:	andeq	r5, r2, ip, ror #9
   25454:	andeq	r5, r2, ip, ror #9
   25458:	andeq	r5, r2, ip, ror #9
   2545c:	andeq	r5, r2, ip, ror #9
   25460:	andeq	r5, r2, ip, ror #9
   25464:	andeq	r5, r2, ip, ror #9
   25468:	andeq	r5, r2, ip, ror #9
   2546c:	andeq	r5, r2, ip, ror #9
   25470:	ldrdeq	r5, [r2], -r4
   25474:	andeq	r5, r2, r4, lsr #17
   25478:	andeq	r5, r2, r8, lsl r7
   2547c:	mov	r3, #2
   25480:	strb	r3, [r0, #4]
   25484:	mov	r0, #0
   25488:	add	sp, sp, #8
   2548c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25490:	cmp	r7, #92	; 0x5c
   25494:	beq	254f8 <__assert_fail@plt+0x13b58>
   25498:	mov	r3, #1
   2549c:	strb	r3, [r5, #4]
   254a0:	bl	11778 <__ctype_b_loc@plt>
   254a4:	lsl	r1, r7, #1
   254a8:	ldrb	r2, [r5, #6]
   254ac:	bic	r2, r2, #64	; 0x40
   254b0:	ldr	r3, [r0]
   254b4:	ldrh	r3, [r3, r1]
   254b8:	lsr	r3, r3, #3
   254bc:	and	r3, r3, #1
   254c0:	cmp	r7, #95	; 0x5f
   254c4:	orreq	r3, r3, #1
   254c8:	orr	r3, r2, r3, lsl #6
   254cc:	strb	r3, [r5, #6]
   254d0:	b	2529c <__assert_fail@plt+0x138fc>
   254d4:	and	r8, r8, #4608	; 0x1200
   254d8:	cmp	r8, #4608	; 0x1200
   254dc:	moveq	r3, #23
   254e0:	strbeq	r3, [r5, #4]
   254e4:	moveq	r0, #1
   254e8:	beq	25488 <__assert_fail@plt+0x13ae8>
   254ec:	mov	r0, #1
   254f0:	add	sp, sp, #8
   254f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   254f8:	ldr	r1, [r4, #48]	; 0x30
   254fc:	add	r2, r6, #1
   25500:	cmp	r2, r1
   25504:	bge	25708 <__assert_fail@plt+0x13d68>
   25508:	ldrb	r1, [r4, #75]	; 0x4b
   2550c:	cmp	r1, #0
   25510:	bne	25ac4 <__assert_fail@plt+0x14124>
   25514:	ldrb	r6, [sl, r2]
   25518:	cmp	r3, #1
   2551c:	mov	r3, #1
   25520:	strb	r6, [r5]
   25524:	strb	r3, [r5, #4]
   25528:	ble	25a90 <__assert_fail@plt+0x140f0>
   2552c:	ldr	r1, [r4, #8]
   25530:	add	r1, r1, r2, lsl #2
   25534:	ldr	r4, [r1]
   25538:	mov	r0, r4
   2553c:	bl	117e4 <iswalnum@plt>
   25540:	ldrb	r3, [r5, #6]
   25544:	sub	r4, r4, #95	; 0x5f
   25548:	clz	r4, r4
   2554c:	lsr	r4, r4, #5
   25550:	bic	r3, r3, #64	; 0x40
   25554:	cmp	r0, #0
   25558:	orrne	r4, r4, #1
   2555c:	orr	r4, r3, r4, lsl #6
   25560:	strb	r4, [r5, #6]
   25564:	sub	r3, r6, #39	; 0x27
   25568:	cmp	r3, #86	; 0x56
   2556c:	ldrls	pc, [pc, r3, lsl #2]
   25570:	b	256e8 <__assert_fail@plt+0x13d48>
   25574:	andeq	r5, r2, ip, asr #17
   25578:			; <UNDEFINED> instruction: 0x000258b4
   2557c:	andeq	r5, r2, r8, ror sl
   25580:	andeq	r5, r2, r8, ror #13
   25584:	andeq	r5, r2, ip, asr sl
   25588:	andeq	r5, r2, r8, ror #13
   2558c:	andeq	r5, r2, r8, ror #13
   25590:	andeq	r5, r2, r8, ror #13
   25594:	andeq	r5, r2, r8, ror #13
   25598:	andeq	r5, r2, r8, ror #13
   2559c:	andeq	r5, r2, ip, lsr sl
   255a0:	andeq	r5, r2, ip, lsr sl
   255a4:	andeq	r5, r2, ip, lsr sl
   255a8:	andeq	r5, r2, ip, lsr sl
   255ac:	andeq	r5, r2, ip, lsr sl
   255b0:	andeq	r5, r2, ip, lsr sl
   255b4:	andeq	r5, r2, ip, lsr sl
   255b8:	andeq	r5, r2, ip, lsr sl
   255bc:	andeq	r5, r2, ip, lsr sl
   255c0:	andeq	r5, r2, r8, ror #13
   255c4:	andeq	r5, r2, r8, ror #13
   255c8:	andeq	r5, r2, ip, lsl sl
   255cc:	andeq	r5, r2, r8, ror #13
   255d0:	strdeq	r5, [r2], -ip
   255d4:	andeq	r5, r2, r0, ror #19
   255d8:	andeq	r5, r2, r8, ror #13
   255dc:	andeq	r5, r2, r8, ror #13
   255e0:	andeq	r5, r2, r0, asr #19
   255e4:	andeq	r5, r2, r8, ror #13
   255e8:	andeq	r5, r2, r8, ror #13
   255ec:	andeq	r5, r2, r8, ror #13
   255f0:	andeq	r5, r2, r8, ror #13
   255f4:	andeq	r5, r2, r8, ror #13
   255f8:	andeq	r5, r2, r8, ror #13
   255fc:	andeq	r5, r2, r8, ror #13
   25600:	andeq	r5, r2, r8, ror #13
   25604:	andeq	r5, r2, r8, ror #13
   25608:	andeq	r5, r2, r8, ror #13
   2560c:	andeq	r5, r2, r8, ror #13
   25610:	andeq	r5, r2, r8, ror #13
   25614:	andeq	r5, r2, r8, ror #13
   25618:	andeq	r5, r2, r8, ror #13
   2561c:	andeq	r5, r2, r8, ror #13
   25620:	andeq	r5, r2, r8, ror #13
   25624:	andeq	r5, r2, r8, lsr #19
   25628:	andeq	r5, r2, r8, ror #13
   2562c:	andeq	r5, r2, r8, ror #13
   25630:	andeq	r5, r2, r8, ror #13
   25634:	muleq	r2, r0, r9
   25638:	andeq	r5, r2, r8, ror #13
   2563c:	andeq	r5, r2, r8, ror #13
   25640:	andeq	r5, r2, r8, ror #13
   25644:	andeq	r5, r2, r8, ror #13
   25648:	andeq	r5, r2, r8, ror #13
   2564c:	andeq	r5, r2, r8, ror #13
   25650:	andeq	r5, r2, r8, ror #13
   25654:	andeq	r5, r2, r8, ror #13
   25658:	andeq	r5, r2, r0, ror r9
   2565c:	andeq	r5, r2, r8, ror #13
   25660:	andeq	r5, r2, r0, asr r9
   25664:	andeq	r5, r2, r8, ror #13
   25668:	andeq	r5, r2, r8, ror #13
   2566c:	andeq	r5, r2, r8, ror #13
   25670:	andeq	r5, r2, r8, ror #13
   25674:	andeq	r5, r2, r8, ror #13
   25678:	andeq	r5, r2, r8, ror #13
   2567c:	andeq	r5, r2, r8, ror #13
   25680:	andeq	r5, r2, r8, ror #13
   25684:	andeq	r5, r2, r8, ror #13
   25688:	andeq	r5, r2, r8, ror #13
   2568c:	andeq	r5, r2, r8, ror #13
   25690:	andeq	r5, r2, r8, ror #13
   25694:	andeq	r5, r2, r8, ror #13
   25698:	andeq	r5, r2, r8, ror #13
   2569c:	andeq	r5, r2, r8, ror #13
   256a0:	andeq	r5, r2, r8, ror #13
   256a4:	andeq	r5, r2, r8, lsr r9
   256a8:	andeq	r5, r2, r8, ror #13
   256ac:	andeq	r5, r2, r8, ror #13
   256b0:	andeq	r5, r2, r8, ror #13
   256b4:	andeq	r5, r2, r0, lsr #18
   256b8:	andeq	r5, r2, r8, ror #13
   256bc:	andeq	r5, r2, r8, ror #13
   256c0:	andeq	r5, r2, r8, ror #13
   256c4:	ldrdeq	r5, [r2], -r0
   256c8:	andeq	r5, r2, r8, lsl #18
   256cc:	andeq	r5, r2, ip, ror #17
   256d0:	and	r8, r8, #4608	; 0x1200
   256d4:	cmp	r8, #512	; 0x200
   256d8:	moveq	r3, #23
   256dc:	strbeq	r3, [r5, #4]
   256e0:	moveq	r0, #2
   256e4:	beq	25488 <__assert_fail@plt+0x13ae8>
   256e8:	mov	r0, #2
   256ec:	b	25488 <__assert_fail@plt+0x13ae8>
   256f0:	ldrb	r3, [r0, #6]
   256f4:	mov	r0, #1
   256f8:	strb	r0, [r5, #4]
   256fc:	orr	r3, r3, #32
   25700:	strb	r3, [r5, #6]
   25704:	b	25488 <__assert_fail@plt+0x13ae8>
   25708:	mov	r3, #36	; 0x24
   2570c:	strb	r3, [r5, #4]
   25710:	mov	r0, #1
   25714:	b	25488 <__assert_fail@plt+0x13ae8>
   25718:	and	r8, r8, #4608	; 0x1200
   2571c:	cmp	r8, #4608	; 0x1200
   25720:	moveq	r3, #24
   25724:	strbeq	r3, [r5, #4]
   25728:	moveq	r0, #1
   2572c:	bne	254ec <__assert_fail@plt+0x13b4c>
   25730:	b	25488 <__assert_fail@plt+0x13ae8>
   25734:	tst	r8, #2048	; 0x800
   25738:	beq	254ec <__assert_fail@plt+0x13b4c>
   2573c:	mov	r3, #10
   25740:	strb	r3, [r5, #4]
   25744:	mov	r0, #1
   25748:	b	25488 <__assert_fail@plt+0x13ae8>
   2574c:	tst	r8, #8
   25750:	bne	25794 <__assert_fail@plt+0x13df4>
   25754:	ldr	r3, [r4, #48]	; 0x30
   25758:	add	r6, r6, #1
   2575c:	cmp	r6, r3
   25760:	beq	25794 <__assert_fail@plt+0x13df4>
   25764:	mov	r2, r8
   25768:	str	r6, [r4, #40]	; 0x28
   2576c:	mov	r1, r4
   25770:	mov	r0, sp
   25774:	bl	251f4 <__assert_fail@plt+0x13854>
   25778:	ldrb	r2, [sp, #4]
   2577c:	ldr	r3, [r4, #40]	; 0x28
   25780:	sub	r2, r2, #9
   25784:	sub	r3, r3, #1
   25788:	cmp	r2, #1
   2578c:	str	r3, [r4, #40]	; 0x28
   25790:	bhi	254ec <__assert_fail@plt+0x13b4c>
   25794:	mov	r2, #12
   25798:	mov	r3, #32
   2579c:	strb	r2, [r5, #4]
   257a0:	str	r3, [r5]
   257a4:	mov	r0, #1
   257a8:	b	25488 <__assert_fail@plt+0x13ae8>
   257ac:	tst	r8, #8192	; 0x2000
   257b0:	beq	254ec <__assert_fail@plt+0x13b4c>
   257b4:	mov	r3, #8
   257b8:	strb	r3, [r5, #4]
   257bc:	mov	r0, #1
   257c0:	b	25488 <__assert_fail@plt+0x13ae8>
   257c4:	tst	r8, #8192	; 0x2000
   257c8:	beq	254ec <__assert_fail@plt+0x13b4c>
   257cc:	mov	r3, #9
   257d0:	strb	r3, [r5, #4]
   257d4:	mov	r0, #1
   257d8:	b	25488 <__assert_fail@plt+0x13ae8>
   257dc:	mov	r3, #11
   257e0:	strb	r3, [r5, #4]
   257e4:	mov	r0, #1
   257e8:	b	25488 <__assert_fail@plt+0x13ae8>
   257ec:	ldr	r3, [pc, #864]	; 25b54 <__assert_fail@plt+0x141b4>
   257f0:	and	r3, r3, r8
   257f4:	cmp	r3, #0
   257f8:	bne	254ec <__assert_fail@plt+0x13b4c>
   257fc:	mov	r3, #18
   25800:	strb	r3, [r5, #4]
   25804:	mov	r0, #1
   25808:	b	25488 <__assert_fail@plt+0x13ae8>
   2580c:	mov	r3, #5
   25810:	strb	r3, [r5, #4]
   25814:	mov	r0, #1
   25818:	b	25488 <__assert_fail@plt+0x13ae8>
   2581c:	ldr	r3, [pc, #816]	; 25b54 <__assert_fail@plt+0x141b4>
   25820:	and	r3, r3, r8
   25824:	cmp	r3, #0
   25828:	bne	254ec <__assert_fail@plt+0x13b4c>
   2582c:	mov	r3, #19
   25830:	strb	r3, [r5, #4]
   25834:	mov	r0, #1
   25838:	b	25488 <__assert_fail@plt+0x13ae8>
   2583c:	mov	r3, #20
   25840:	strb	r3, [r5, #4]
   25844:	mov	r0, #1
   25848:	b	25488 <__assert_fail@plt+0x13ae8>
   2584c:	ldr	r3, [pc, #772]	; 25b58 <__assert_fail@plt+0x141b8>
   25850:	cmp	r6, #0
   25854:	and	r3, r3, r8
   25858:	clz	r3, r3
   2585c:	lsr	r3, r3, #5
   25860:	moveq	r3, #0
   25864:	cmp	r3, #0
   25868:	beq	2588c <__assert_fail@plt+0x13eec>
   2586c:	add	r6, sl, r6
   25870:	lsr	r3, r8, #11
   25874:	ldrb	r2, [r6, #-1]
   25878:	eor	r3, r3, #1
   2587c:	cmp	r2, #10
   25880:	orrne	r3, r3, #1
   25884:	tst	r3, #1
   25888:	bne	254ec <__assert_fail@plt+0x13b4c>
   2588c:	mov	r2, #12
   25890:	mov	r3, #16
   25894:	strb	r2, [r5, #4]
   25898:	str	r3, [r5]
   2589c:	mov	r0, #1
   258a0:	b	25488 <__assert_fail@plt+0x13ae8>
   258a4:	and	r8, r8, #33792	; 0x8400
   258a8:	cmp	r8, #32768	; 0x8000
   258ac:	bne	254ec <__assert_fail@plt+0x13b4c>
   258b0:	b	2573c <__assert_fail@plt+0x13d9c>
   258b4:	tst	r8, #8192	; 0x2000
   258b8:	bne	256e8 <__assert_fail@plt+0x13d48>
   258bc:	mov	r3, #8
   258c0:	strb	r3, [r5, #4]
   258c4:	mov	r0, #2
   258c8:	b	25488 <__assert_fail@plt+0x13ae8>
   258cc:	tst	r8, #524288	; 0x80000
   258d0:	bne	256e8 <__assert_fail@plt+0x13d48>
   258d4:	mov	r2, #12
   258d8:	mov	r3, #128	; 0x80
   258dc:	strb	r2, [r5, #4]
   258e0:	str	r3, [r5]
   258e4:	mov	r0, #2
   258e8:	b	25488 <__assert_fail@plt+0x13ae8>
   258ec:	and	r8, r8, #4608	; 0x1200
   258f0:	cmp	r8, #512	; 0x200
   258f4:	moveq	r3, #24
   258f8:	strbeq	r3, [r5, #4]
   258fc:	moveq	r0, #2
   25900:	bne	256e8 <__assert_fail@plt+0x13d48>
   25904:	b	25488 <__assert_fail@plt+0x13ae8>
   25908:	tst	r8, #33792	; 0x8400
   2590c:	bne	256e8 <__assert_fail@plt+0x13d48>
   25910:	mov	r3, #10
   25914:	strb	r3, [r5, #4]
   25918:	mov	r0, #2
   2591c:	b	25488 <__assert_fail@plt+0x13ae8>
   25920:	tst	r8, #524288	; 0x80000
   25924:	bne	256e8 <__assert_fail@plt+0x13d48>
   25928:	mov	r3, #32
   2592c:	strb	r3, [r5, #4]
   25930:	mov	r0, #2
   25934:	b	25488 <__assert_fail@plt+0x13ae8>
   25938:	tst	r8, #524288	; 0x80000
   2593c:	bne	256e8 <__assert_fail@plt+0x13d48>
   25940:	mov	r3, #34	; 0x22
   25944:	strb	r3, [r5, #4]
   25948:	mov	r0, #2
   2594c:	b	25488 <__assert_fail@plt+0x13ae8>
   25950:	tst	r8, #524288	; 0x80000
   25954:	bne	256e8 <__assert_fail@plt+0x13d48>
   25958:	mov	r2, #12
   2595c:	mov	r3, #256	; 0x100
   25960:	strb	r2, [r5, #4]
   25964:	str	r3, [r5]
   25968:	mov	r0, #2
   2596c:	b	25488 <__assert_fail@plt+0x13ae8>
   25970:	tst	r8, #524288	; 0x80000
   25974:	bne	256e8 <__assert_fail@plt+0x13d48>
   25978:	mov	r2, #12
   2597c:	mov	r3, #64	; 0x40
   25980:	strb	r2, [r5, #4]
   25984:	str	r3, [r5]
   25988:	mov	r0, #2
   2598c:	b	25488 <__assert_fail@plt+0x13ae8>
   25990:	tst	r8, #524288	; 0x80000
   25994:	bne	256e8 <__assert_fail@plt+0x13d48>
   25998:	mov	r3, #33	; 0x21
   2599c:	strb	r3, [r5, #4]
   259a0:	mov	r0, #2
   259a4:	b	25488 <__assert_fail@plt+0x13ae8>
   259a8:	tst	r8, #524288	; 0x80000
   259ac:	bne	256e8 <__assert_fail@plt+0x13d48>
   259b0:	mov	r3, #35	; 0x23
   259b4:	strb	r3, [r5, #4]
   259b8:	mov	r0, #2
   259bc:	b	25488 <__assert_fail@plt+0x13ae8>
   259c0:	tst	r8, #524288	; 0x80000
   259c4:	bne	256e8 <__assert_fail@plt+0x13d48>
   259c8:	mov	r2, #12
   259cc:	mov	r3, #512	; 0x200
   259d0:	strb	r2, [r5, #4]
   259d4:	str	r3, [r5]
   259d8:	mov	r0, #2
   259dc:	b	25488 <__assert_fail@plt+0x13ae8>
   259e0:	ldr	r0, [pc, #364]	; 25b54 <__assert_fail@plt+0x141b4>
   259e4:	and	r0, r0, r8
   259e8:	cmp	r0, #2
   259ec:	moveq	r3, #19
   259f0:	strbeq	r3, [r5, #4]
   259f4:	bne	256e8 <__assert_fail@plt+0x13d48>
   259f8:	b	25488 <__assert_fail@plt+0x13ae8>
   259fc:	tst	r8, #524288	; 0x80000
   25a00:	bne	256e8 <__assert_fail@plt+0x13d48>
   25a04:	mov	r2, #12
   25a08:	mov	r3, #9
   25a0c:	strb	r2, [r5, #4]
   25a10:	str	r3, [r5]
   25a14:	mov	r0, #2
   25a18:	b	25488 <__assert_fail@plt+0x13ae8>
   25a1c:	tst	r8, #524288	; 0x80000
   25a20:	bne	256e8 <__assert_fail@plt+0x13d48>
   25a24:	mov	r2, #12
   25a28:	mov	r3, #6
   25a2c:	strb	r2, [r5, #4]
   25a30:	str	r3, [r5]
   25a34:	mov	r0, #2
   25a38:	b	25488 <__assert_fail@plt+0x13ae8>
   25a3c:	tst	r8, #16384	; 0x4000
   25a40:	bne	256e8 <__assert_fail@plt+0x13d48>
   25a44:	sub	r6, r6, #49	; 0x31
   25a48:	mov	r3, #4
   25a4c:	str	r6, [r5]
   25a50:	strb	r3, [r5, #4]
   25a54:	mov	r0, #2
   25a58:	b	25488 <__assert_fail@plt+0x13ae8>
   25a5c:	ldr	r0, [pc, #240]	; 25b54 <__assert_fail@plt+0x141b4>
   25a60:	and	r0, r0, r8
   25a64:	cmp	r0, #2
   25a68:	moveq	r3, #18
   25a6c:	strbeq	r3, [r5, #4]
   25a70:	bne	256e8 <__assert_fail@plt+0x13d48>
   25a74:	b	25488 <__assert_fail@plt+0x13ae8>
   25a78:	tst	r8, #8192	; 0x2000
   25a7c:	bne	256e8 <__assert_fail@plt+0x13d48>
   25a80:	mov	r3, #9
   25a84:	strb	r3, [r5, #4]
   25a88:	mov	r0, #2
   25a8c:	b	25488 <__assert_fail@plt+0x13ae8>
   25a90:	bl	11778 <__ctype_b_loc@plt>
   25a94:	lsl	r3, r6, #1
   25a98:	ldrb	r2, [r5, #6]
   25a9c:	bic	r2, r2, #64	; 0x40
   25aa0:	ldr	r1, [r0]
   25aa4:	ldrh	r3, [r1, r3]
   25aa8:	lsr	r3, r3, #3
   25aac:	and	r3, r3, #1
   25ab0:	cmp	r6, #95	; 0x5f
   25ab4:	orreq	r3, r3, #1
   25ab8:	orr	r3, r2, r3, lsl #6
   25abc:	strb	r3, [r5, #6]
   25ac0:	b	25564 <__assert_fail@plt+0x13bc4>
   25ac4:	cmp	r3, #1
   25ac8:	ble	25afc <__assert_fail@plt+0x1415c>
   25acc:	ldr	r0, [r4, #8]
   25ad0:	add	r1, r0, r2, lsl #2
   25ad4:	ldr	r0, [r0, r2, lsl #2]
   25ad8:	cmn	r0, #1
   25adc:	beq	25b40 <__assert_fail@plt+0x141a0>
   25ae0:	ldr	r0, [r4, #28]
   25ae4:	add	r6, r6, #2
   25ae8:	cmp	r0, r6
   25aec:	beq	25afc <__assert_fail@plt+0x1415c>
   25af0:	ldr	r0, [r1, #4]
   25af4:	cmn	r0, #1
   25af8:	beq	25b40 <__assert_fail@plt+0x141a0>
   25afc:	ldrb	r1, [r4, #76]	; 0x4c
   25b00:	cmp	r1, #0
   25b04:	bne	25b1c <__assert_fail@plt+0x1417c>
   25b08:	ldr	r1, [r4]
   25b0c:	ldr	r0, [r4, #24]
   25b10:	add	r1, r1, r2
   25b14:	ldrb	r6, [r1, r0]
   25b18:	b	25518 <__assert_fail@plt+0x13b78>
   25b1c:	ldr	ip, [r4, #12]
   25b20:	ldr	r1, [r4]
   25b24:	ldr	r0, [r4, #24]
   25b28:	ldr	ip, [ip, r2, lsl #2]
   25b2c:	add	r1, r1, ip
   25b30:	ldrb	r6, [r1, r0]
   25b34:	tst	r6, #128	; 0x80
   25b38:	bne	25514 <__assert_fail@plt+0x13b74>
   25b3c:	b	25518 <__assert_fail@plt+0x13b78>
   25b40:	ldrb	r6, [sl, r2]
   25b44:	mov	r3, #1
   25b48:	strb	r3, [r5, #4]
   25b4c:	strb	r6, [r5]
   25b50:	b	25534 <__assert_fail@plt+0x13b94>
   25b54:	andeq	r0, r0, r2, lsl #8
   25b58:	addeq	r0, r0, r8
   25b5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25b60:	mov	sl, r0
   25b64:	ldr	r8, [pc, #172]	; 25c18 <__assert_fail@plt+0x14278>
   25b68:	mov	r4, r1
   25b6c:	mov	r6, r2
   25b70:	mvn	r5, #0
   25b74:	mov	r9, #32768	; 0x8000
   25b78:	mvn	r7, #1
   25b7c:	mov	r2, r6
   25b80:	mov	r1, sl
   25b84:	mov	r0, r4
   25b88:	bl	251f4 <__assert_fail@plt+0x13854>
   25b8c:	ldrb	r2, [r4, #4]
   25b90:	ldr	r3, [sl, #40]	; 0x28
   25b94:	cmp	r2, #2
   25b98:	add	r0, r3, r0
   25b9c:	str	r0, [sl, #40]	; 0x28
   25ba0:	ldrb	r3, [r4]
   25ba4:	beq	25c0c <__assert_fail@plt+0x1426c>
   25ba8:	cmp	r3, #44	; 0x2c
   25bac:	cmpne	r2, #24
   25bb0:	beq	25c10 <__assert_fail@plt+0x14270>
   25bb4:	cmp	r2, #1
   25bb8:	beq	25bc4 <__assert_fail@plt+0x14224>
   25bbc:	mov	r5, r7
   25bc0:	b	25b7c <__assert_fail@plt+0x141dc>
   25bc4:	sub	r1, r3, #48	; 0x30
   25bc8:	uxtb	r2, r1
   25bcc:	cmp	r2, #9
   25bd0:	movhi	r2, #0
   25bd4:	movls	r2, #1
   25bd8:	cmn	r5, #2
   25bdc:	moveq	r2, #0
   25be0:	cmp	r2, #0
   25be4:	beq	25bbc <__assert_fail@plt+0x1421c>
   25be8:	cmn	r5, #1
   25bec:	moveq	r5, r1
   25bf0:	beq	25b7c <__assert_fail@plt+0x141dc>
   25bf4:	add	r5, r5, r5, lsl #2
   25bf8:	add	r3, r3, r5, lsl #1
   25bfc:	cmp	r3, r8
   25c00:	suble	r5, r3, #48	; 0x30
   25c04:	movgt	r5, r9
   25c08:	b	25b7c <__assert_fail@plt+0x141dc>
   25c0c:	mvn	r5, #1
   25c10:	mov	r0, r5
   25c14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25c18:	andeq	r8, r0, r0, lsr r0
   25c1c:	ldr	ip, [r1, #80]	; 0x50
   25c20:	push	{r4, r5, r6, r7, r8, r9, lr}
   25c24:	sub	sp, sp, #12
   25c28:	cmp	ip, #1
   25c2c:	ldr	r4, [r1, #40]	; 0x28
   25c30:	ldrb	r7, [sp, #44]	; 0x2c
   25c34:	beq	25ca8 <__assert_fail@plt+0x14308>
   25c38:	ldr	lr, [r1, #28]
   25c3c:	add	ip, r4, #1
   25c40:	cmp	ip, lr
   25c44:	bge	25ca8 <__assert_fail@plt+0x14308>
   25c48:	ldr	r5, [r1, #8]
   25c4c:	add	r6, r5, ip, lsl #2
   25c50:	ldr	ip, [r5, ip, lsl #2]
   25c54:	cmn	ip, #1
   25c58:	subeq	lr, lr, r4
   25c5c:	moveq	r2, r6
   25c60:	moveq	r3, #1
   25c64:	beq	25c78 <__assert_fail@plt+0x142d8>
   25c68:	b	25ca8 <__assert_fail@plt+0x14308>
   25c6c:	ldr	ip, [r2, #4]!
   25c70:	cmn	ip, #1
   25c74:	bne	25c88 <__assert_fail@plt+0x142e8>
   25c78:	add	r3, r3, #1
   25c7c:	cmp	r3, lr
   25c80:	add	r5, r3, r4
   25c84:	bne	25c6c <__assert_fail@plt+0x142cc>
   25c88:	ldr	ip, [r6, #-4]
   25c8c:	mov	r2, #1
   25c90:	mov	r3, #0
   25c94:	stm	r0, {r2, ip}
   25c98:	str	r5, [r1, #40]	; 0x28
   25c9c:	mov	r0, r3
   25ca0:	add	sp, sp, #12
   25ca4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   25ca8:	ldrb	ip, [r2, #4]
   25cac:	add	r4, r4, r3
   25cb0:	str	r4, [r1, #40]	; 0x28
   25cb4:	and	r3, ip, #251	; 0xfb
   25cb8:	cmp	ip, #28
   25cbc:	cmpne	r3, #26
   25cc0:	beq	25cfc <__assert_fail@plt+0x1435c>
   25cc4:	cmp	ip, #22
   25cc8:	moveq	ip, r7
   25ccc:	orrne	ip, r7, #1
   25cd0:	cmp	ip, #0
   25cd4:	mov	r5, r2
   25cd8:	mov	r4, r0
   25cdc:	beq	25d10 <__assert_fail@plt+0x14370>
   25ce0:	mov	r3, #0
   25ce4:	str	r3, [r4]
   25ce8:	ldrb	r2, [r5]
   25cec:	mov	r0, r3
   25cf0:	strb	r2, [r4, #4]
   25cf4:	add	sp, sp, #12
   25cf8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   25cfc:	ldr	r5, [r1, #56]	; 0x38
   25d00:	cmp	r4, r5
   25d04:	blt	25d30 <__assert_fail@plt+0x14390>
   25d08:	mov	r3, #7
   25d0c:	b	25c9c <__assert_fail@plt+0x142fc>
   25d10:	ldr	r2, [sp, #40]	; 0x28
   25d14:	mov	r0, sp
   25d18:	bl	1bb64 <__assert_fail@plt+0xa1c4>
   25d1c:	ldrb	r3, [sp, #4]
   25d20:	cmp	r3, #21
   25d24:	movne	r3, #11
   25d28:	bne	25c9c <__assert_fail@plt+0x142fc>
   25d2c:	b	25ce0 <__assert_fail@plt+0x14340>
   25d30:	ldrb	r6, [r2]
   25d34:	mov	lr, #0
   25d38:	b	25d5c <__assert_fail@plt+0x143bc>
   25d3c:	ldr	r3, [r0, #4]
   25d40:	strb	ip, [r3, lr]
   25d44:	add	lr, lr, #1
   25d48:	cmp	lr, #32
   25d4c:	beq	25d08 <__assert_fail@plt+0x14368>
   25d50:	ldrb	ip, [r2, #4]
   25d54:	ldr	r4, [r1, #40]	; 0x28
   25d58:	ldr	r5, [r1, #56]	; 0x38
   25d5c:	cmp	ip, #30
   25d60:	beq	25dcc <__assert_fail@plt+0x1442c>
   25d64:	ldr	ip, [r1, #4]
   25d68:	add	r3, r4, #1
   25d6c:	str	r3, [r1, #40]	; 0x28
   25d70:	ldrb	ip, [ip, r4]
   25d74:	cmp	r5, r3
   25d78:	ble	25d08 <__assert_fail@plt+0x14368>
   25d7c:	cmp	r6, ip
   25d80:	bne	25d3c <__assert_fail@plt+0x1439c>
   25d84:	ldr	r4, [r1, #4]
   25d88:	ldrb	r4, [r4, r3]
   25d8c:	cmp	r4, #93	; 0x5d
   25d90:	bne	25d3c <__assert_fail@plt+0x1439c>
   25d94:	add	r3, r3, #1
   25d98:	str	r3, [r1, #40]	; 0x28
   25d9c:	ldr	r1, [r0, #4]
   25da0:	mov	r3, #0
   25da4:	strb	r3, [r1, lr]
   25da8:	ldrb	r2, [r2, #4]
   25dac:	cmp	r2, #28
   25db0:	beq	25eac <__assert_fail@plt+0x1450c>
   25db4:	cmp	r2, #30
   25db8:	beq	25ea0 <__assert_fail@plt+0x14500>
   25dbc:	cmp	r2, #26
   25dc0:	moveq	r2, #3
   25dc4:	streq	r2, [r0]
   25dc8:	b	25c9c <__assert_fail@plt+0x142fc>
   25dcc:	ldrb	r3, [r1, #75]	; 0x4b
   25dd0:	cmp	r3, #0
   25dd4:	beq	25d64 <__assert_fail@plt+0x143c4>
   25dd8:	ldrb	r3, [r1, #76]	; 0x4c
   25ddc:	cmp	r3, #0
   25de0:	beq	25e7c <__assert_fail@plt+0x144dc>
   25de4:	ldr	r8, [r1, #28]
   25de8:	cmp	r4, r8
   25dec:	beq	25e98 <__assert_fail@plt+0x144f8>
   25df0:	ldr	r3, [r1, #8]
   25df4:	lsl	ip, r4, #2
   25df8:	ldr	r3, [r3, r4, lsl #2]
   25dfc:	cmn	r3, #1
   25e00:	beq	25d64 <__assert_fail@plt+0x143c4>
   25e04:	ldr	r7, [r1, #12]
   25e08:	ldr	r3, [r1]
   25e0c:	ldr	r7, [r7, ip]
   25e10:	ldr	ip, [r1, #24]
   25e14:	add	r3, r3, r7
   25e18:	ldrb	ip, [r3, ip]
   25e1c:	tst	ip, #128	; 0x80
   25e20:	bne	25d64 <__assert_fail@plt+0x143c4>
   25e24:	ldr	r3, [r1, #80]	; 0x50
   25e28:	cmp	r3, #1
   25e2c:	add	r3, r4, #1
   25e30:	beq	25e74 <__assert_fail@plt+0x144d4>
   25e34:	cmp	r8, r3
   25e38:	ble	25e74 <__assert_fail@plt+0x144d4>
   25e3c:	ldr	r9, [r1, #8]
   25e40:	add	r7, r9, r3, lsl #2
   25e44:	ldr	r9, [r9, r3, lsl #2]
   25e48:	cmn	r9, #1
   25e4c:	addeq	r4, r4, #2
   25e50:	beq	25e68 <__assert_fail@plt+0x144c8>
   25e54:	b	25e74 <__assert_fail@plt+0x144d4>
   25e58:	ldr	r9, [r7, #4]!
   25e5c:	add	r4, r4, #1
   25e60:	cmn	r9, #1
   25e64:	bne	25e74 <__assert_fail@plt+0x144d4>
   25e68:	cmp	r4, r8
   25e6c:	mov	r3, r4
   25e70:	bne	25e58 <__assert_fail@plt+0x144b8>
   25e74:	str	r3, [r1, #40]	; 0x28
   25e78:	b	25d74 <__assert_fail@plt+0x143d4>
   25e7c:	ldr	ip, [r1]
   25e80:	ldr	r7, [r1, #24]
   25e84:	add	ip, ip, r4
   25e88:	add	r3, r4, #1
   25e8c:	str	r3, [r1, #40]	; 0x28
   25e90:	ldrb	ip, [ip, r7]
   25e94:	b	25d74 <__assert_fail@plt+0x143d4>
   25e98:	lsl	ip, r4, #2
   25e9c:	b	25e04 <__assert_fail@plt+0x14464>
   25ea0:	mov	r2, #4
   25ea4:	str	r2, [r0]
   25ea8:	b	25c9c <__assert_fail@plt+0x142fc>
   25eac:	mov	r2, #2
   25eb0:	str	r2, [r0]
   25eb4:	b	25c9c <__assert_fail@plt+0x142fc>
   25eb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ebc:	sub	sp, sp, #164	; 0xa4
   25ec0:	mov	r4, r1
   25ec4:	str	r2, [sp, #20]
   25ec8:	ldrb	r2, [r2, #4]
   25ecc:	ldr	r1, [r1]
   25ed0:	str	r3, [sp, #28]
   25ed4:	sub	r3, r2, #1
   25ed8:	mov	sl, r0
   25edc:	str	r1, [sp, #24]
   25ee0:	cmp	r3, #35	; 0x23
   25ee4:	ldrls	pc, [pc, r3, lsl #2]
   25ee8:	b	26b10 <__assert_fail@plt+0x15170>
   25eec:	andeq	r6, r2, r0, ror #19
   25ef0:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   25ef4:	andeq	r6, r2, r0, lsl fp
   25ef8:	andeq	r6, r2, ip, ror #18
   25efc:	andeq	r6, r2, r4, lsr #10
   25f00:	andeq	r6, r2, r0, lsl fp
   25f04:	andeq	r6, r2, r0, lsl fp
   25f08:	andeq	r6, r2, r8, ror #10
   25f0c:	andeq	r6, r2, r0, lsr #22
   25f10:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   25f14:			; <UNDEFINED> instruction: 0x00025fb8
   25f18:	andeq	r6, r2, r0, asr #13
   25f1c:	andeq	r6, r2, r0, lsl fp
   25f20:	andeq	r6, r2, r0, lsl fp
   25f24:	andeq	r6, r2, r0, lsl fp
   25f28:	andeq	r6, r2, r0, lsl fp
   25f2c:	andeq	r6, r2, r0, lsl fp
   25f30:			; <UNDEFINED> instruction: 0x00025fb8
   25f34:			; <UNDEFINED> instruction: 0x00025fb8
   25f38:	andeq	r6, r2, ip, lsl r8
   25f3c:	andeq	r6, r2, r0, lsl fp
   25f40:	andeq	r6, r2, r0, lsl fp
   25f44:	andeq	r5, r2, ip, lsr #31
   25f48:	ldrdeq	r5, [r2], -r4
   25f4c:	andeq	r6, r2, r0, lsl fp
   25f50:	andeq	r6, r2, r0, lsl fp
   25f54:	andeq	r6, r2, r0, lsl fp
   25f58:	andeq	r6, r2, r0, lsl fp
   25f5c:	andeq	r6, r2, r0, lsl fp
   25f60:	andeq	r6, r2, r0, lsl fp
   25f64:	andeq	r6, r2, r0, lsl fp
   25f68:	andeq	r6, r2, r8, ror #21
   25f6c:	andeq	r6, r2, r8, ror #21
   25f70:	andeq	r6, r2, r4, asr r6
   25f74:	andeq	r6, r2, r4, asr r6
   25f78:	andeq	r6, r2, r8, lsr #13
   25f7c:	cmp	r0, #0
   25f80:	beq	25f8c <__assert_fail@plt+0x145ec>
   25f84:	ldr	r1, [pc, #4032]	; 26f4c <__assert_fail@plt+0x155ac>
   25f88:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   25f8c:	ldr	r2, [sp, #204]	; 0xcc
   25f90:	mov	r3, #8
   25f94:	str	r3, [r2]
   25f98:	mov	r3, #0
   25f9c:	str	r3, [sp, #32]
   25fa0:	ldr	r0, [sp, #32]
   25fa4:	add	sp, sp, #164	; 0xa4
   25fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fac:	ldr	r3, [sp, #28]
   25fb0:	tst	r3, #16777216	; 0x1000000
   25fb4:	bne	26250 <__assert_fail@plt+0x148b0>
   25fb8:	ldr	r3, [sp, #28]
   25fbc:	tst	r3, #32
   25fc0:	bne	26250 <__assert_fail@plt+0x148b0>
   25fc4:	tst	r3, #16
   25fc8:	bne	26ce0 <__assert_fail@plt+0x15340>
   25fcc:	cmp	r2, #9
   25fd0:	beq	26b20 <__assert_fail@plt+0x15180>
   25fd4:	ldr	r1, [sp, #20]
   25fd8:	ldr	r0, [sp, #24]
   25fdc:	mov	r3, #0
   25fe0:	mov	r2, #1
   25fe4:	str	r1, [sp]
   25fe8:	strb	r2, [r1, #4]
   25fec:	mov	r2, r3
   25ff0:	add	r1, r0, #64	; 0x40
   25ff4:	add	r0, r0, #56	; 0x38
   25ff8:	bl	1db54 <__assert_fail@plt+0xc1b4>
   25ffc:	subs	r3, r0, #0
   26000:	str	r3, [sp, #32]
   26004:	beq	26ad0 <__assert_fail@plt+0x15130>
   26008:	ldr	r4, [sp, #20]
   2600c:	ldr	r2, [sp, #28]
   26010:	mov	r1, sl
   26014:	mov	r0, r4
   26018:	bl	251f4 <__assert_fail@plt+0x13854>
   2601c:	ldr	r2, [sl, #40]	; 0x28
   26020:	mov	fp, #0
   26024:	ldrb	r3, [r4, #4]
   26028:	add	r2, r2, r0
   2602c:	str	r2, [sl, #40]	; 0x28
   26030:	cmp	r3, #23
   26034:	bhi	25fa0 <__assert_fail@plt+0x14600>
   26038:	ldr	r2, [pc, #3856]	; 26f50 <__assert_fail@plt+0x155b0>
   2603c:	sub	r6, r3, #18
   26040:	clz	r6, r6
   26044:	mvn	r2, r2, lsr r3
   26048:	tst	r2, #1
   2604c:	lsr	r6, r6, #5
   26050:	bne	25fa0 <__assert_fail@plt+0x14600>
   26054:	ldr	r2, [sp, #20]
   26058:	cmp	r3, #23
   2605c:	ldr	r4, [sl, #40]	; 0x28
   26060:	ldm	r2, {r0, r1}
   26064:	add	r2, sp, #96	; 0x60
   26068:	stm	r2, {r0, r1}
   2606c:	beq	26320 <__assert_fail@plt+0x14980>
   26070:	cmp	r3, #19
   26074:	moveq	r3, #1
   26078:	mvnne	r3, #0
   2607c:	ldr	r2, [sp, #28]
   26080:	mov	r1, sl
   26084:	ldr	r0, [sp, #20]
   26088:	str	r3, [sp, #16]
   2608c:	bl	251f4 <__assert_fail@plt+0x13854>
   26090:	ldr	r3, [sl, #40]	; 0x28
   26094:	ldr	r2, [sp, #32]
   26098:	cmp	r2, #0
   2609c:	add	r0, r3, r0
   260a0:	str	r0, [sl, #40]	; 0x28
   260a4:	beq	26390 <__assert_fail@plt+0x149f0>
   260a8:	cmp	r6, #0
   260ac:	strle	fp, [sp, #36]	; 0x24
   260b0:	ldrle	r5, [sp, #32]
   260b4:	bgt	26270 <__assert_fail@plt+0x148d0>
   260b8:	ldrb	r3, [r5, #24]
   260bc:	cmp	r3, #17
   260c0:	beq	263a8 <__assert_fail@plt+0x14a08>
   260c4:	ldr	r3, [sp, #24]
   260c8:	ldr	r2, [sp, #16]
   260cc:	add	r4, sp, #128	; 0x80
   260d0:	cmn	r2, #1
   260d4:	add	r7, r3, #56	; 0x38
   260d8:	add	r8, r3, #64	; 0x40
   260dc:	movne	ip, #10
   260e0:	moveq	ip, #11
   260e4:	str	r4, [sp]
   260e8:	mov	r0, r7
   260ec:	str	fp, [r4, #4]
   260f0:	mov	r1, r8
   260f4:	mov	r3, #0
   260f8:	mov	r2, r5
   260fc:	str	fp, [sp, #128]	; 0x80
   26100:	strb	ip, [sp, #132]	; 0x84
   26104:	bl	1db54 <__assert_fail@plt+0xc1b4>
   26108:	subs	r9, r0, #0
   2610c:	beq	262f4 <__assert_fail@plt+0x14954>
   26110:	ldr	r2, [sp, #16]
   26114:	add	r6, r6, #2
   26118:	cmp	r6, r2
   2611c:	bgt	261c0 <__assert_fail@plt+0x14820>
   26120:	str	sl, [sp, #40]	; 0x28
   26124:	mov	sl, r9
   26128:	ldr	r9, [sp, #24]
   2612c:	mov	r0, r5
   26130:	mov	r1, r9
   26134:	bl	1dc18 <__assert_fail@plt+0xc278>
   26138:	mov	ip, #16
   2613c:	str	r4, [sp]
   26140:	mov	r2, sl
   26144:	str	fp, [r4, #4]
   26148:	mov	r1, r8
   2614c:	str	fp, [r4]
   26150:	strb	ip, [sp, #132]	; 0x84
   26154:	mov	r5, r0
   26158:	mov	r3, r0
   2615c:	mov	r0, r7
   26160:	bl	1db54 <__assert_fail@plt+0xc1b4>
   26164:	cmp	r0, #0
   26168:	cmpne	r5, #0
   2616c:	moveq	ip, #1
   26170:	movne	ip, #0
   26174:	beq	262f4 <__assert_fail@plt+0x14954>
   26178:	str	r4, [sp]
   2617c:	mov	r2, r0
   26180:	str	ip, [r4, #4]
   26184:	str	ip, [r4]
   26188:	mov	r3, fp
   2618c:	mov	ip, #10
   26190:	mov	r1, r8
   26194:	mov	r0, r7
   26198:	strb	ip, [sp, #132]	; 0x84
   2619c:	bl	1db54 <__assert_fail@plt+0xc1b4>
   261a0:	subs	sl, r0, #0
   261a4:	beq	262f4 <__assert_fail@plt+0x14954>
   261a8:	ldr	r3, [sp, #16]
   261ac:	add	r6, r6, #1
   261b0:	cmp	r6, r3
   261b4:	ble	2612c <__assert_fail@plt+0x1478c>
   261b8:	mov	r9, sl
   261bc:	ldr	sl, [sp, #40]	; 0x28
   261c0:	ldr	r2, [sp, #36]	; 0x24
   261c4:	cmp	r2, #0
   261c8:	beq	264c0 <__assert_fail@plt+0x14b20>
   261cc:	str	r4, [sp]
   261d0:	mov	ip, #16
   261d4:	str	fp, [r4, #4]
   261d8:	mov	r3, r9
   261dc:	mov	r1, r8
   261e0:	mov	r0, r7
   261e4:	str	fp, [r4]
   261e8:	strb	ip, [sp, #132]	; 0x84
   261ec:	bl	1db54 <__assert_fail@plt+0xc1b4>
   261f0:	ldr	r3, [sp, #204]	; 0xcc
   261f4:	ldr	r3, [r3]
   261f8:	adds	r3, r3, #0
   261fc:	movne	r3, #1
   26200:	cmp	r0, #0
   26204:	movne	r3, #0
   26208:	cmp	r3, #0
   2620c:	bne	26300 <__assert_fail@plt+0x14960>
   26210:	str	r0, [sp, #32]
   26214:	ldr	r3, [sp, #28]
   26218:	tst	r3, #16777216	; 0x1000000
   2621c:	ldr	r3, [sp, #20]
   26220:	ldrb	r3, [r3, #4]
   26224:	beq	26030 <__assert_fail@plt+0x14690>
   26228:	cmp	r3, #23
   2622c:	cmpne	r3, #11
   26230:	bne	26030 <__assert_fail@plt+0x14690>
   26234:	ldr	r3, [sp, #32]
   26238:	cmp	r3, #0
   2623c:	beq	26250 <__assert_fail@plt+0x148b0>
   26240:	mov	r0, r3
   26244:	mov	r2, #0
   26248:	ldr	r1, [pc, #3324]	; 26f4c <__assert_fail@plt+0x155ac>
   2624c:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   26250:	ldr	r2, [sp, #204]	; 0xcc
   26254:	mov	r3, #13
   26258:	str	r3, [r2]
   2625c:	mov	r3, #0
   26260:	str	r3, [sp, #32]
   26264:	ldr	r0, [sp, #32]
   26268:	add	sp, sp, #164	; 0xa4
   2626c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26270:	cmp	r6, #1
   26274:	beq	26b10 <__assert_fail@plt+0x15170>
   26278:	ldr	r3, [sp, #24]
   2627c:	ldr	r5, [sp, #32]
   26280:	add	r2, r3, #56	; 0x38
   26284:	str	sl, [sp, #40]	; 0x28
   26288:	str	r2, [sp, #36]	; 0x24
   2628c:	add	r9, r3, #64	; 0x40
   26290:	mov	r7, #2
   26294:	add	r4, sp, #128	; 0x80
   26298:	mov	r8, #16
   2629c:	mov	sl, r5
   262a0:	b	262b0 <__assert_fail@plt+0x14910>
   262a4:	add	r7, r7, #1
   262a8:	cmp	r7, r6
   262ac:	bgt	264f8 <__assert_fail@plt+0x14b58>
   262b0:	mov	r0, r5
   262b4:	ldr	r1, [sp, #24]
   262b8:	bl	1dc18 <__assert_fail@plt+0xc278>
   262bc:	str	r4, [sp]
   262c0:	mov	r2, sl
   262c4:	str	fp, [r4, #4]
   262c8:	mov	r1, r9
   262cc:	str	fp, [r4]
   262d0:	strb	r8, [sp, #132]	; 0x84
   262d4:	mov	r5, r0
   262d8:	mov	r3, r0
   262dc:	ldr	r0, [sp, #36]	; 0x24
   262e0:	bl	1db54 <__assert_fail@plt+0xc1b4>
   262e4:	cmp	r0, #0
   262e8:	cmpne	r5, #0
   262ec:	mov	sl, r0
   262f0:	bne	262a4 <__assert_fail@plt+0x14904>
   262f4:	ldr	r2, [sp, #204]	; 0xcc
   262f8:	mov	r3, #12
   262fc:	str	r3, [r2]
   26300:	ldr	r3, [sp, #32]
   26304:	cmp	r3, #0
   26308:	beq	25f98 <__assert_fail@plt+0x145f8>
   2630c:	mov	r0, r3
   26310:	mov	r2, #0
   26314:	ldr	r1, [pc, #3120]	; 26f4c <__assert_fail@plt+0x155ac>
   26318:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   2631c:	b	25f98 <__assert_fail@plt+0x145f8>
   26320:	ldr	r2, [sp, #28]
   26324:	ldr	r1, [sp, #20]
   26328:	mov	r0, sl
   2632c:	bl	25b5c <__assert_fail@plt+0x141bc>
   26330:	cmn	r0, #1
   26334:	str	r0, [sp, #16]
   26338:	beq	263bc <__assert_fail@plt+0x14a1c>
   2633c:	ldr	r3, [sp, #16]
   26340:	cmn	r3, #2
   26344:	beq	26360 <__assert_fail@plt+0x149c0>
   26348:	ldr	r3, [sp, #20]
   2634c:	ldrb	r3, [r3, #4]
   26350:	cmp	r3, #24
   26354:	beq	264c8 <__assert_fail@plt+0x14b28>
   26358:	cmp	r3, #1
   2635c:	beq	26490 <__assert_fail@plt+0x14af0>
   26360:	ldr	r3, [sp, #28]
   26364:	tst	r3, #2097152	; 0x200000
   26368:	beq	26f2c <__assert_fail@plt+0x1558c>
   2636c:	add	r3, sp, #96	; 0x60
   26370:	ldr	r2, [sp, #20]
   26374:	ldm	r3, {r0, r1}
   26378:	mov	r3, #1
   2637c:	str	r4, [sl, #40]	; 0x28
   26380:	stm	r2, {r0, r1}
   26384:	ldr	r0, [sp, #32]
   26388:	strb	r3, [r2, #4]
   2638c:	b	261f0 <__assert_fail@plt+0x14850>
   26390:	ldr	r3, [sp, #204]	; 0xcc
   26394:	ldr	r3, [r3]
   26398:	cmp	r3, #0
   2639c:	bne	26300 <__assert_fail@plt+0x14960>
   263a0:	str	fp, [sp, #32]
   263a4:	b	26214 <__assert_fail@plt+0x14874>
   263a8:	ldr	r2, [r5, #20]
   263ac:	ldr	r1, [pc, #2976]	; 26f54 <__assert_fail@plt+0x155b4>
   263b0:	mov	r0, r5
   263b4:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   263b8:	b	260c4 <__assert_fail@plt+0x14724>
   263bc:	ldr	r3, [sp, #20]
   263c0:	ldrb	r3, [r3, #4]
   263c4:	cmp	r3, #1
   263c8:	bne	264ac <__assert_fail@plt+0x14b0c>
   263cc:	ldr	r3, [sp, #20]
   263d0:	ldrb	r3, [r3]
   263d4:	cmp	r3, #44	; 0x2c
   263d8:	bne	264ac <__assert_fail@plt+0x14b0c>
   263dc:	mov	r6, fp
   263e0:	ldr	r2, [sp, #28]
   263e4:	ldr	r1, [sp, #20]
   263e8:	mov	r0, sl
   263ec:	bl	25b5c <__assert_fail@plt+0x141bc>
   263f0:	cmn	r0, #2
   263f4:	str	r0, [sp, #16]
   263f8:	beq	26360 <__assert_fail@plt+0x149c0>
   263fc:	ldr	r2, [sp, #16]
   26400:	cmn	r2, #1
   26404:	cmpne	r6, r2
   26408:	bgt	264ac <__assert_fail@plt+0x14b0c>
   2640c:	ldr	r3, [sp, #20]
   26410:	ldrb	r3, [r3, #4]
   26414:	cmp	r3, #24
   26418:	bne	264ac <__assert_fail@plt+0x14b0c>
   2641c:	cmn	r2, #1
   26420:	beq	264d0 <__assert_fail@plt+0x14b30>
   26424:	ldr	r3, [sp, #16]
   26428:	ldr	r2, [pc, #2856]	; 26f58 <__assert_fail@plt+0x155b8>
   2642c:	cmp	r3, r2
   26430:	movle	r3, #0
   26434:	movgt	r3, #1
   26438:	cmp	r3, #0
   2643c:	bne	264e8 <__assert_fail@plt+0x14b48>
   26440:	ldr	r2, [sp, #28]
   26444:	mov	r1, sl
   26448:	ldr	r0, [sp, #20]
   2644c:	bl	251f4 <__assert_fail@plt+0x13854>
   26450:	ldr	r3, [sl, #40]	; 0x28
   26454:	ldr	ip, [sp, #32]
   26458:	cmp	ip, #0
   2645c:	add	r0, r3, r0
   26460:	str	r0, [sl, #40]	; 0x28
   26464:	beq	26390 <__assert_fail@plt+0x149f0>
   26468:	ldr	r3, [sp, #16]
   2646c:	orrs	r3, r3, r6
   26470:	bne	260a8 <__assert_fail@plt+0x14708>
   26474:	mov	r2, fp
   26478:	ldr	r1, [pc, #2764]	; 26f4c <__assert_fail@plt+0x155ac>
   2647c:	mov	r0, ip
   26480:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   26484:	ldr	r3, [sp, #204]	; 0xcc
   26488:	ldr	r3, [r3]
   2648c:	b	26398 <__assert_fail@plt+0x149f8>
   26490:	ldr	r3, [sp, #20]
   26494:	ldrb	r3, [r3]
   26498:	cmp	r3, #44	; 0x2c
   2649c:	beq	273f0 <__assert_fail@plt+0x15a50>
   264a0:	ldr	r3, [sp, #28]
   264a4:	tst	r3, #2097152	; 0x200000
   264a8:	bne	2636c <__assert_fail@plt+0x149cc>
   264ac:	ldr	r2, [sp, #204]	; 0xcc
   264b0:	mov	r3, #10
   264b4:	str	r3, [r2]
   264b8:	b	26300 <__assert_fail@plt+0x14960>
   264bc:	ldr	r9, [sp, #36]	; 0x24
   264c0:	str	r9, [sp, #32]
   264c4:	b	26214 <__assert_fail@plt+0x14874>
   264c8:	ldr	r6, [sp, #16]
   264cc:	b	26424 <__assert_fail@plt+0x14a84>
   264d0:	add	r3, r2, #32768	; 0x8000
   264d4:	cmp	r6, r3
   264d8:	movle	r3, #0
   264dc:	movgt	r3, #1
   264e0:	cmp	r3, #0
   264e4:	beq	26440 <__assert_fail@plt+0x14aa0>
   264e8:	ldr	r2, [sp, #204]	; 0xcc
   264ec:	mov	r3, #15
   264f0:	str	r3, [r2]
   264f4:	b	26300 <__assert_fail@plt+0x14960>
   264f8:	ldr	sl, [sp, #40]	; 0x28
   264fc:	str	r0, [sp, #36]	; 0x24
   26500:	ldr	r3, [sp, #16]
   26504:	cmp	r6, r3
   26508:	beq	264bc <__assert_fail@plt+0x14b1c>
   2650c:	mov	r0, r5
   26510:	ldr	r1, [sp, #24]
   26514:	bl	1dc18 <__assert_fail@plt+0xc278>
   26518:	subs	r5, r0, #0
   2651c:	bne	260b8 <__assert_fail@plt+0x14718>
   26520:	b	262f4 <__assert_fail@plt+0x14954>
   26524:	ldr	r2, [sp, #20]
   26528:	ldr	r4, [sp, #24]
   2652c:	mov	r3, #0
   26530:	str	r2, [sp]
   26534:	add	r1, r4, #64	; 0x40
   26538:	mov	r2, r3
   2653c:	add	r0, r4, #56	; 0x38
   26540:	bl	1db54 <__assert_fail@plt+0xc1b4>
   26544:	subs	r3, r0, #0
   26548:	str	r3, [sp, #32]
   2654c:	beq	26ad0 <__assert_fail@plt+0x15130>
   26550:	ldr	r3, [r4, #92]	; 0x5c
   26554:	cmp	r3, #1
   26558:	ldrbgt	r3, [r4, #88]	; 0x58
   2655c:	orrgt	r3, r3, #2
   26560:	strbgt	r3, [r4, #88]	; 0x58
   26564:	b	26008 <__assert_fail@plt+0x14668>
   26568:	ldr	r5, [r4, #24]
   2656c:	ldr	r6, [sp, #20]
   26570:	ldr	r7, [sp, #28]
   26574:	add	r3, r5, #1
   26578:	orr	r2, r7, #8388608	; 0x800000
   2657c:	str	r3, [r4, #24]
   26580:	mov	r1, r0
   26584:	mov	r0, r6
   26588:	bl	251f4 <__assert_fail@plt+0x13854>
   2658c:	ldrb	r2, [r6, #4]
   26590:	ldr	r3, [sl, #40]	; 0x28
   26594:	cmp	r2, #9
   26598:	add	r3, r3, r0
   2659c:	str	r3, [sl, #40]	; 0x28
   265a0:	beq	26b40 <__assert_fail@plt+0x151a0>
   265a4:	ldr	r3, [sp, #200]	; 0xc8
   265a8:	ldr	r2, [sp, #204]	; 0xcc
   265ac:	add	r3, r3, #1
   265b0:	str	r2, [sp, #4]
   265b4:	str	r3, [sp]
   265b8:	mov	r2, r6
   265bc:	mov	r3, r7
   265c0:	mov	r1, r4
   265c4:	mov	r0, sl
   265c8:	bl	275a8 <__assert_fail@plt+0x15c08>
   265cc:	ldr	r2, [sp, #204]	; 0xcc
   265d0:	ldr	r2, [r2]
   265d4:	cmp	r2, #0
   265d8:	mov	r3, r0
   265dc:	bne	25f98 <__assert_fail@plt+0x145f8>
   265e0:	ldr	r1, [sp, #20]
   265e4:	ldrb	r1, [r1, #4]
   265e8:	cmp	r1, #9
   265ec:	bne	25f7c <__assert_fail@plt+0x145dc>
   265f0:	cmp	r5, #8
   265f4:	bhi	2660c <__assert_fail@plt+0x14c6c>
   265f8:	ldr	r0, [sp, #24]
   265fc:	mov	r1, #1
   26600:	ldr	r2, [r0, #84]	; 0x54
   26604:	orr	r2, r2, r1, lsl r5
   26608:	str	r2, [r0, #84]	; 0x54
   2660c:	add	ip, sp, #128	; 0x80
   26610:	str	ip, [sp]
   26614:	ldr	ip, [sp, #24]
   26618:	mov	r0, #0
   2661c:	str	r0, [sp, #132]	; 0x84
   26620:	mov	r2, r3
   26624:	mov	lr, #17
   26628:	mov	r3, r0
   2662c:	str	r0, [sp, #128]	; 0x80
   26630:	add	r1, ip, #64	; 0x40
   26634:	add	r0, ip, #56	; 0x38
   26638:	strb	lr, [sp, #132]	; 0x84
   2663c:	bl	1db54 <__assert_fail@plt+0xc1b4>
   26640:	subs	r3, r0, #0
   26644:	str	r3, [sp, #32]
   26648:	beq	26ad0 <__assert_fail@plt+0x15130>
   2664c:	str	r5, [r3, #20]
   26650:	b	26008 <__assert_fail@plt+0x14668>
   26654:	ldr	r3, [sp, #204]	; 0xcc
   26658:	sub	r2, r2, #35	; 0x23
   2665c:	clz	r2, r2
   26660:	lsr	r2, r2, #5
   26664:	ldr	r1, [r0, #64]	; 0x40
   26668:	str	r2, [sp]
   2666c:	str	r3, [sp, #4]
   26670:	ldr	r2, [pc, #2276]	; 26f5c <__assert_fail@plt+0x155bc>
   26674:	ldr	r3, [pc, #2276]	; 26f60 <__assert_fail@plt+0x155c0>
   26678:	ldr	r0, [sp, #24]
   2667c:	bl	213a8 <__assert_fail@plt+0xfa08>
   26680:	ldr	r3, [sp, #204]	; 0xcc
   26684:	ldr	r3, [r3]
   26688:	adds	r3, r3, #0
   2668c:	movne	r3, #1
   26690:	cmp	r0, #0
   26694:	movne	r3, #0
   26698:	cmp	r3, #0
   2669c:	str	r0, [sp, #32]
   266a0:	beq	26008 <__assert_fail@plt+0x14668>
   266a4:	b	25f98 <__assert_fail@plt+0x145f8>
   266a8:	ldr	r2, [sp, #204]	; 0xcc
   266ac:	mov	r3, #5
   266b0:	str	r3, [r2]
   266b4:	mov	r3, #0
   266b8:	str	r3, [sp, #32]
   266bc:	b	25fa0 <__assert_fail@plt+0x14600>
   266c0:	ldr	r3, [sp, #20]
   266c4:	ldr	r2, [r3]
   266c8:	ldr	r3, [pc, #2196]	; 26f64 <__assert_fail@plt+0x155c4>
   266cc:	and	r3, r3, r2
   266d0:	cmp	r3, #0
   266d4:	beq	2673c <__assert_fail@plt+0x14d9c>
   266d8:	ldr	r3, [sp, #24]
   266dc:	ldrb	r3, [r3, #88]	; 0x58
   266e0:	ands	r4, r3, #16
   266e4:	bne	2673c <__assert_fail@plt+0x14d9c>
   266e8:	ldr	r0, [sp, #24]
   266ec:	orr	r3, r3, #16
   266f0:	ands	r2, r3, #8
   266f4:	mov	r1, r3
   266f8:	strb	r3, [r0, #88]	; 0x58
   266fc:	bne	271f8 <__assert_fail@plt+0x15858>
   26700:	ldr	r3, [pc, #2144]	; 26f68 <__assert_fail@plt+0x155c8>
   26704:	tst	r1, #4
   26708:	str	r3, [r0, #100]	; 0x64
   2670c:	mvn	r1, #2013265921	; 0x78000001
   26710:	mvn	r3, #-134217727	; 0xf8000001
   26714:	str	r2, [r0, #96]	; 0x60
   26718:	str	r1, [r0, #104]	; 0x68
   2671c:	str	r3, [r0, #108]	; 0x6c
   26720:	beq	27170 <__assert_fail@plt+0x157d0>
   26724:	ldr	r3, [sp, #20]
   26728:	str	r2, [r0, #112]	; 0x70
   2672c:	str	r2, [r0, #116]	; 0x74
   26730:	str	r2, [r0, #120]	; 0x78
   26734:	str	r2, [r0, #124]	; 0x7c
   26738:	ldr	r2, [r3]
   2673c:	sub	r3, r2, #256	; 0x100
   26740:	bics	r3, r3, #256	; 0x100
   26744:	bne	26d30 <__assert_fail@plt+0x15390>
   26748:	cmp	r2, #256	; 0x100
   2674c:	beq	26c48 <__assert_fail@plt+0x152a8>
   26750:	ldr	r1, [sp, #24]
   26754:	ldr	r7, [sp, #20]
   26758:	mov	r2, #5
   2675c:	add	r5, r1, #56	; 0x38
   26760:	add	r6, r1, #64	; 0x40
   26764:	str	r7, [sp]
   26768:	mov	r1, r6
   2676c:	str	r2, [r7]
   26770:	mov	r0, r5
   26774:	mov	r2, r3
   26778:	bl	1db54 <__assert_fail@plt+0xc1b4>
   2677c:	mov	r3, #10
   26780:	str	r3, [r7]
   26784:	mov	r4, r0
   26788:	ldr	r2, [sp, #20]
   2678c:	mov	r3, #0
   26790:	str	r2, [sp]
   26794:	mov	r1, r6
   26798:	mov	r2, r3
   2679c:	mov	r0, r5
   267a0:	bl	1db54 <__assert_fail@plt+0xc1b4>
   267a4:	add	r2, sp, #128	; 0x80
   267a8:	mov	ip, #0
   267ac:	str	r2, [sp]
   267b0:	mov	lr, #10
   267b4:	mov	r1, r6
   267b8:	mov	r2, r4
   267bc:	str	ip, [sp, #132]	; 0x84
   267c0:	str	ip, [sp, #128]	; 0x80
   267c4:	strb	lr, [sp, #132]	; 0x84
   267c8:	mov	r7, r0
   267cc:	mov	r3, r7
   267d0:	mov	r0, r5
   267d4:	bl	1db54 <__assert_fail@plt+0xc1b4>
   267d8:	cmp	r7, #0
   267dc:	cmpne	r4, #0
   267e0:	moveq	r3, #1
   267e4:	movne	r3, #0
   267e8:	cmp	r0, #0
   267ec:	orreq	r3, r3, #1
   267f0:	cmp	r3, #0
   267f4:	str	r0, [sp, #32]
   267f8:	bne	26ad0 <__assert_fail@plt+0x15130>
   267fc:	ldr	r2, [sp, #28]
   26800:	ldr	r0, [sp, #20]
   26804:	mov	r1, sl
   26808:	bl	251f4 <__assert_fail@plt+0x13854>
   2680c:	ldr	r3, [sl, #40]	; 0x28
   26810:	add	r3, r3, r0
   26814:	str	r3, [sl, #40]	; 0x28
   26818:	b	25fa0 <__assert_fail@plt+0x14600>
   2681c:	mov	r3, #0
   26820:	mov	r1, #1
   26824:	mov	r0, #32
   26828:	str	r3, [sp, #68]	; 0x44
   2682c:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   26830:	mov	r1, #1
   26834:	mov	r9, r0
   26838:	mov	r0, #40	; 0x28
   2683c:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   26840:	cmp	r0, #0
   26844:	cmpne	r9, #0
   26848:	moveq	r3, #1
   2684c:	movne	r3, #0
   26850:	mov	r6, r0
   26854:	str	r3, [sp, #36]	; 0x24
   26858:	beq	26ef0 <__assert_fail@plt+0x15550>
   2685c:	ldr	r4, [sp, #20]
   26860:	ldr	r2, [sp, #28]
   26864:	mov	r1, sl
   26868:	mov	r0, r4
   2686c:	bl	1bb64 <__assert_fail@plt+0xa1c4>
   26870:	ldrb	r3, [r4, #4]
   26874:	cmp	r3, #2
   26878:	mov	fp, r0
   2687c:	beq	26f10 <__assert_fail@plt+0x15570>
   26880:	cmp	r3, #25
   26884:	beq	26c84 <__assert_fail@plt+0x152e4>
   26888:	ldr	r2, [sp, #36]	; 0x24
   2688c:	str	r2, [sp, #40]	; 0x28
   26890:	cmp	r3, #21
   26894:	ldr	r1, [sp, #28]
   26898:	ldreq	r2, [sp, #20]
   2689c:	moveq	r3, #1
   268a0:	ldr	r4, [sp, #20]
   268a4:	strbeq	r3, [r2, #4]
   268a8:	mov	r3, #0
   268ac:	mov	r2, r3
   268b0:	str	r3, [sp, #32]
   268b4:	lsr	r3, r1, #16
   268b8:	and	r3, r3, #1
   268bc:	str	r2, [sp, #16]
   268c0:	str	r3, [sp, #52]	; 0x34
   268c4:	add	r2, r6, #36	; 0x24
   268c8:	mov	r8, r9
   268cc:	mov	r3, #1
   268d0:	mov	r9, r1
   268d4:	str	r2, [sp, #44]	; 0x2c
   268d8:	add	r2, r6, #12
   268dc:	str	r2, [sp, #48]	; 0x30
   268e0:	add	ip, sp, #96	; 0x60
   268e4:	str	r3, [sp, #4]
   268e8:	str	ip, [sp, #76]	; 0x4c
   268ec:	str	r9, [sp]
   268f0:	mov	ip, #3
   268f4:	mov	r3, fp
   268f8:	mov	r2, r4
   268fc:	mov	r1, sl
   26900:	add	r0, sp, #72	; 0x48
   26904:	str	ip, [sp, #72]	; 0x48
   26908:	bl	25c1c <__assert_fail@plt+0x1427c>
   2690c:	cmp	r0, #0
   26910:	bne	26d60 <__assert_fail@plt+0x153c0>
   26914:	mov	r2, r9
   26918:	mov	r1, sl
   2691c:	mov	r0, r4
   26920:	bl	1bb64 <__assert_fail@plt+0xa1c4>
   26924:	ldr	r3, [sp, #72]	; 0x48
   26928:	sub	r2, r3, #2
   2692c:	bics	r2, r2, #2
   26930:	mov	fp, r0
   26934:	beq	2694c <__assert_fail@plt+0x14fac>
   26938:	ldrb	r2, [r4, #4]
   2693c:	cmp	r2, #2
   26940:	beq	26d78 <__assert_fail@plt+0x153d8>
   26944:	cmp	r2, #22
   26948:	beq	26d8c <__assert_fail@plt+0x153ec>
   2694c:	cmp	r3, #4
   26950:	ldrls	pc, [pc, r3, lsl #2]
   26954:	b	26d78 <__assert_fail@plt+0x153d8>
   26958:	andeq	r6, r2, r8, lsr #24
   2695c:	andeq	r6, r2, r0, lsl #24
   26960:	andeq	r6, r2, r0, ror #23
   26964:	muleq	r2, r8, fp
   26968:	andeq	r6, r2, r8, asr #22
   2696c:	ldr	r3, [sp, #20]
   26970:	mov	r2, #1
   26974:	ldr	r1, [r3]
   26978:	ldr	r3, [sp, #24]
   2697c:	lsl	r2, r2, r1
   26980:	ldr	r3, [r3, #84]	; 0x54
   26984:	ands	r3, r2, r3
   26988:	beq	26edc <__assert_fail@plt+0x1553c>
   2698c:	ldr	r4, [sp, #24]
   26990:	ldr	r0, [sp, #20]
   26994:	mov	r3, #0
   26998:	ldr	r1, [r4, #80]	; 0x50
   2699c:	orr	r2, r1, r2
   269a0:	str	r2, [r4, #80]	; 0x50
   269a4:	add	r1, r4, #64	; 0x40
   269a8:	mov	r2, r3
   269ac:	str	r0, [sp]
   269b0:	add	r0, r4, #56	; 0x38
   269b4:	bl	1db54 <__assert_fail@plt+0xc1b4>
   269b8:	subs	r3, r0, #0
   269bc:	str	r3, [sp, #32]
   269c0:	beq	26ad0 <__assert_fail@plt+0x15130>
   269c4:	ldrb	r2, [r4, #88]	; 0x58
   269c8:	ldr	r3, [r4, #76]	; 0x4c
   269cc:	orr	r2, r2, #2
   269d0:	add	r3, r3, #1
   269d4:	strb	r2, [r4, #88]	; 0x58
   269d8:	str	r3, [r4, #76]	; 0x4c
   269dc:	b	26008 <__assert_fail@plt+0x14668>
   269e0:	ldr	r3, [sp, #24]
   269e4:	ldr	r2, [sp, #20]
   269e8:	add	r8, r3, #56	; 0x38
   269ec:	add	r7, r3, #64	; 0x40
   269f0:	mov	r3, #0
   269f4:	str	r2, [sp]
   269f8:	mov	r0, r8
   269fc:	mov	r2, r3
   26a00:	mov	r1, r7
   26a04:	bl	1db54 <__assert_fail@plt+0xc1b4>
   26a08:	subs	r3, r0, #0
   26a0c:	str	r3, [sp, #32]
   26a10:	beq	26ad0 <__assert_fail@plt+0x15130>
   26a14:	ldr	r3, [sp, #24]
   26a18:	ldr	r3, [r3, #92]	; 0x5c
   26a1c:	cmp	r3, #1
   26a20:	ble	26008 <__assert_fail@plt+0x14668>
   26a24:	ldr	r6, [sp, #32]
   26a28:	mov	r5, #0
   26a2c:	add	r4, sp, #128	; 0x80
   26a30:	mov	r9, #16
   26a34:	ldr	r3, [sl, #40]	; 0x28
   26a38:	ldr	r2, [sl, #56]	; 0x38
   26a3c:	cmp	r2, r3
   26a40:	ble	26d70 <__assert_fail@plt+0x153d0>
   26a44:	ldr	r2, [sl, #28]
   26a48:	cmp	r3, r2
   26a4c:	beq	26d70 <__assert_fail@plt+0x153d0>
   26a50:	ldr	r2, [sl, #8]
   26a54:	ldr	r3, [r2, r3, lsl #2]
   26a58:	cmn	r3, #1
   26a5c:	bne	26d70 <__assert_fail@plt+0x153d0>
   26a60:	ldr	fp, [sp, #20]
   26a64:	ldr	r2, [sp, #28]
   26a68:	mov	r1, sl
   26a6c:	mov	r0, fp
   26a70:	bl	251f4 <__assert_fail@plt+0x13854>
   26a74:	ldr	ip, [sl, #40]	; 0x28
   26a78:	mov	r3, r5
   26a7c:	str	fp, [sp]
   26a80:	mov	r2, #0
   26a84:	mov	r1, r7
   26a88:	add	r0, ip, r0
   26a8c:	str	r0, [sl, #40]	; 0x28
   26a90:	mov	r0, r8
   26a94:	bl	1db54 <__assert_fail@plt+0xc1b4>
   26a98:	str	r4, [sp]
   26a9c:	mov	r2, r6
   26aa0:	str	r5, [r4, #4]
   26aa4:	mov	r1, r7
   26aa8:	str	r5, [r4]
   26aac:	strb	r9, [sp, #132]	; 0x84
   26ab0:	mov	fp, r0
   26ab4:	mov	r3, r0
   26ab8:	mov	r0, r8
   26abc:	bl	1db54 <__assert_fail@plt+0xc1b4>
   26ac0:	cmp	r0, #0
   26ac4:	cmpne	fp, #0
   26ac8:	mov	r6, r0
   26acc:	bne	26a34 <__assert_fail@plt+0x15094>
   26ad0:	ldr	r2, [sp, #204]	; 0xcc
   26ad4:	mov	r3, #12
   26ad8:	str	r3, [r2]
   26adc:	mov	r3, #0
   26ae0:	str	r3, [sp, #32]
   26ae4:	b	25fa0 <__assert_fail@plt+0x14600>
   26ae8:	ldr	r3, [sp, #204]	; 0xcc
   26aec:	sub	r2, r2, #33	; 0x21
   26af0:	clz	r2, r2
   26af4:	lsr	r2, r2, #5
   26af8:	ldr	r1, [r0, #64]	; 0x40
   26afc:	str	r2, [sp]
   26b00:	str	r3, [sp, #4]
   26b04:	ldr	r2, [pc, #1120]	; 26f6c <__assert_fail@plt+0x155cc>
   26b08:	ldr	r3, [pc, #1120]	; 26f70 <__assert_fail@plt+0x155d0>
   26b0c:	b	26678 <__assert_fail@plt+0x14cd8>
   26b10:	ldr	r3, [sp, #32]
   26b14:	str	r3, [sp, #36]	; 0x24
   26b18:	mov	r5, r3
   26b1c:	b	26500 <__assert_fail@plt+0x14b60>
   26b20:	ldr	r3, [sp, #28]
   26b24:	ands	r2, r3, #131072	; 0x20000
   26b28:	bne	25fd4 <__assert_fail@plt+0x14634>
   26b2c:	str	r2, [sp, #32]
   26b30:	ldr	r2, [sp, #204]	; 0xcc
   26b34:	mov	r3, #16
   26b38:	str	r3, [r2]
   26b3c:	b	25fa0 <__assert_fail@plt+0x14600>
   26b40:	mov	r3, #0
   26b44:	b	265f0 <__assert_fail@plt+0x14c50>
   26b48:	ldr	r3, [sp, #76]	; 0x4c
   26b4c:	add	r2, sp, #68	; 0x44
   26b50:	ldr	r0, [sl, #64]	; 0x40
   26b54:	mov	r1, r8
   26b58:	stm	sp, {r2, r3}
   26b5c:	str	r9, [sp, #8]
   26b60:	ldr	r3, [sp, #44]	; 0x2c
   26b64:	ldr	r2, [sp, #48]	; 0x30
   26b68:	bl	20ab8 <__assert_fail@plt+0xf118>
   26b6c:	ldr	r3, [sp, #204]	; 0xcc
   26b70:	cmp	r0, #0
   26b74:	str	r0, [r3]
   26b78:	bne	26bb4 <__assert_fail@plt+0x15214>
   26b7c:	ldrb	r3, [r4, #4]
   26b80:	cmp	r3, #2
   26b84:	beq	26d78 <__assert_fail@plt+0x153d8>
   26b88:	cmp	r3, #21
   26b8c:	beq	27200 <__assert_fail@plt+0x15860>
   26b90:	ldr	r3, [sp, #36]	; 0x24
   26b94:	b	268e0 <__assert_fail@plt+0x14f40>
   26b98:	ldr	r1, [sp, #76]	; 0x4c
   26b9c:	mov	r0, r8
   26ba0:	bl	20a78 <__assert_fail@plt+0xf0d8>
   26ba4:	ldr	r3, [sp, #204]	; 0xcc
   26ba8:	cmp	r0, #0
   26bac:	str	r0, [r3]
   26bb0:	beq	26b7c <__assert_fail@plt+0x151dc>
   26bb4:	mov	r9, r8
   26bb8:	mov	r0, r9
   26bbc:	bl	1b944 <__assert_fail@plt+0x9fa4>
   26bc0:	mov	r0, r6
   26bc4:	bl	1cb20 <__assert_fail@plt+0xb180>
   26bc8:	ldr	r3, [sp, #204]	; 0xcc
   26bcc:	ldr	r3, [r3]
   26bd0:	cmp	r3, #0
   26bd4:	bne	25f98 <__assert_fail@plt+0x145f8>
   26bd8:	str	r3, [sp, #32]
   26bdc:	b	26008 <__assert_fail@plt+0x14668>
   26be0:	ldr	r1, [sp, #76]	; 0x4c
   26be4:	mov	r0, r8
   26be8:	bl	20a78 <__assert_fail@plt+0xf0d8>
   26bec:	ldr	r3, [sp, #204]	; 0xcc
   26bf0:	cmp	r0, #0
   26bf4:	str	r0, [r3]
   26bf8:	beq	26b7c <__assert_fail@plt+0x151dc>
   26bfc:	b	26bb4 <__assert_fail@plt+0x15214>
   26c00:	ldr	r3, [r6, #20]
   26c04:	ldr	r2, [sp, #16]
   26c08:	cmp	r3, r2
   26c0c:	beq	26ff4 <__assert_fail@plt+0x15654>
   26c10:	ldr	r0, [r6]
   26c14:	ldr	r2, [sp, #76]	; 0x4c
   26c18:	add	r1, r3, #1
   26c1c:	str	r1, [r6, #20]
   26c20:	str	r2, [r0, r3, lsl #2]
   26c24:	b	26b7c <__assert_fail@plt+0x151dc>
   26c28:	ldrb	r3, [sp, #76]	; 0x4c
   26c2c:	mov	r0, #1
   26c30:	and	r1, r3, #31
   26c34:	asr	r3, r3, #5
   26c38:	ldr	r2, [r8, r3, lsl #2]
   26c3c:	orr	r2, r2, r0, lsl r1
   26c40:	str	r2, [r8, r3, lsl #2]
   26c44:	b	26b7c <__assert_fail@plt+0x151dc>
   26c48:	ldr	r1, [sp, #24]
   26c4c:	ldr	r7, [sp, #20]
   26c50:	mov	r2, #6
   26c54:	add	r5, r1, #56	; 0x38
   26c58:	add	r6, r1, #64	; 0x40
   26c5c:	str	r7, [sp]
   26c60:	mov	r1, r6
   26c64:	str	r2, [r7]
   26c68:	mov	r0, r5
   26c6c:	mov	r2, r3
   26c70:	bl	1db54 <__assert_fail@plt+0xc1b4>
   26c74:	mov	r3, #9
   26c78:	str	r3, [r7]
   26c7c:	mov	r4, r0
   26c80:	b	26788 <__assert_fail@plt+0x14de8>
   26c84:	ldrb	r3, [r6, #16]
   26c88:	ldr	r2, [sp, #28]
   26c8c:	ldr	r4, [sp, #20]
   26c90:	tst	r2, #256	; 0x100
   26c94:	orr	r3, r3, #1
   26c98:	strb	r3, [r6, #16]
   26c9c:	ldrne	r3, [r9]
   26ca0:	ldr	r2, [sp, #28]
   26ca4:	orrne	r3, r3, #1024	; 0x400
   26ca8:	strne	r3, [r9]
   26cac:	ldr	r3, [sl, #40]	; 0x28
   26cb0:	mov	r1, sl
   26cb4:	add	r3, r3, r0
   26cb8:	str	r3, [sl, #40]	; 0x28
   26cbc:	mov	r0, r4
   26cc0:	bl	1bb64 <__assert_fail@plt+0xa1c4>
   26cc4:	ldrb	r3, [r4, #4]
   26cc8:	cmp	r3, #2
   26ccc:	mov	fp, r0
   26cd0:	beq	26f10 <__assert_fail@plt+0x15570>
   26cd4:	mov	r2, #1
   26cd8:	str	r2, [sp, #40]	; 0x28
   26cdc:	b	26890 <__assert_fail@plt+0x14ef0>
   26ce0:	ldr	r5, [sp, #20]
   26ce4:	mov	r2, r3
   26ce8:	mov	r1, sl
   26cec:	mov	r0, r5
   26cf0:	mov	r6, r3
   26cf4:	bl	251f4 <__assert_fail@plt+0x13854>
   26cf8:	ldr	r3, [sp, #204]	; 0xcc
   26cfc:	ldr	ip, [sl, #40]	; 0x28
   26d00:	str	r3, [sp, #4]
   26d04:	ldr	r3, [sp, #200]	; 0xc8
   26d08:	mov	r2, r5
   26d0c:	str	r3, [sp]
   26d10:	mov	r1, r4
   26d14:	mov	r3, r6
   26d18:	add	r0, ip, r0
   26d1c:	str	r0, [sl, #40]	; 0x28
   26d20:	mov	r0, sl
   26d24:	bl	25eb8 <__assert_fail@plt+0x14518>
   26d28:	str	r0, [sp, #32]
   26d2c:	b	25fa0 <__assert_fail@plt+0x14600>
   26d30:	ldr	r2, [sp, #20]
   26d34:	ldr	r0, [sp, #24]
   26d38:	mov	r3, #0
   26d3c:	str	r2, [sp]
   26d40:	add	r1, r0, #64	; 0x40
   26d44:	mov	r2, r3
   26d48:	add	r0, r0, #56	; 0x38
   26d4c:	bl	1db54 <__assert_fail@plt+0xc1b4>
   26d50:	subs	r3, r0, #0
   26d54:	str	r3, [sp, #32]
   26d58:	bne	267fc <__assert_fail@plt+0x14e5c>
   26d5c:	b	26ad0 <__assert_fail@plt+0x15130>
   26d60:	ldr	r3, [sp, #204]	; 0xcc
   26d64:	mov	r9, r8
   26d68:	str	r0, [r3]
   26d6c:	b	26bb8 <__assert_fail@plt+0x15218>
   26d70:	str	r6, [sp, #32]
   26d74:	b	26008 <__assert_fail@plt+0x14668>
   26d78:	ldr	r2, [sp, #204]	; 0xcc
   26d7c:	mov	r3, #7
   26d80:	mov	r9, r8
   26d84:	str	r3, [r2]
   26d88:	b	26bb8 <__assert_fail@plt+0x15218>
   26d8c:	ldr	r3, [sl, #40]	; 0x28
   26d90:	mov	r2, r9
   26d94:	add	r3, r3, r0
   26d98:	str	r3, [sl, #40]	; 0x28
   26d9c:	add	r0, sp, #88	; 0x58
   26da0:	mov	r1, sl
   26da4:	bl	1bb64 <__assert_fail@plt+0xa1c4>
   26da8:	ldrb	r2, [sp, #92]	; 0x5c
   26dac:	cmp	r2, #2
   26db0:	mov	r3, r0
   26db4:	beq	26d78 <__assert_fail@plt+0x153d8>
   26db8:	cmp	r2, #21
   26dbc:	beq	27024 <__assert_fail@plt+0x15684>
   26dc0:	add	r0, sp, #160	; 0xa0
   26dc4:	mov	ip, #1
   26dc8:	mov	r1, #3
   26dcc:	str	r9, [sp]
   26dd0:	add	r2, sp, #88	; 0x58
   26dd4:	str	r1, [r0, #-80]!	; 0xffffffb0
   26dd8:	str	ip, [sp, #4]
   26ddc:	mov	r1, sl
   26de0:	add	ip, sp, #128	; 0x80
   26de4:	str	ip, [sp, #84]	; 0x54
   26de8:	bl	25c1c <__assert_fail@plt+0x1427c>
   26dec:	cmp	r0, #0
   26df0:	bne	26d60 <__assert_fail@plt+0x153c0>
   26df4:	mov	r2, r9
   26df8:	mov	r1, sl
   26dfc:	mov	r0, r4
   26e00:	bl	1bb64 <__assert_fail@plt+0xa1c4>
   26e04:	ldr	r2, [sp, #72]	; 0x48
   26e08:	sub	r3, r2, #2
   26e0c:	bics	r3, r3, #2
   26e10:	mov	fp, r0
   26e14:	beq	26ec8 <__assert_fail@plt+0x15528>
   26e18:	ldr	r3, [sp, #80]	; 0x50
   26e1c:	cmp	r3, #2
   26e20:	beq	26ec8 <__assert_fail@plt+0x15528>
   26e24:	cmp	r3, #4
   26e28:	beq	26f20 <__assert_fail@plt+0x15580>
   26e2c:	cmp	r2, #3
   26e30:	beq	26f74 <__assert_fail@plt+0x155d4>
   26e34:	cmp	r3, #3
   26e38:	beq	26fbc <__assert_fail@plt+0x1561c>
   26e3c:	cmp	r2, #0
   26e40:	bne	26fa8 <__assert_fail@plt+0x15608>
   26e44:	ldrb	r5, [sp, #76]	; 0x4c
   26e48:	cmp	r3, #0
   26e4c:	bne	27408 <__assert_fail@plt+0x15a68>
   26e50:	ldrb	r7, [sp, #84]	; 0x54
   26e54:	cmp	r2, #0
   26e58:	cmpne	r2, #3
   26e5c:	bne	27400 <__assert_fail@plt+0x15a60>
   26e60:	ldr	r2, [sp, #24]
   26e64:	ldr	r2, [r2, #92]	; 0x5c
   26e68:	cmp	r2, #1
   26e6c:	ble	27040 <__assert_fail@plt+0x156a0>
   26e70:	mov	r0, r5
   26e74:	bl	1182c <btowc@plt>
   26e78:	ldr	r3, [sp, #80]	; 0x50
   26e7c:	mov	r5, r0
   26e80:	cmp	r3, #3
   26e84:	cmpne	r3, #0
   26e88:	bne	273f8 <__assert_fail@plt+0x15a58>
   26e8c:	ldr	r3, [sp, #24]
   26e90:	ldr	r3, [r3, #92]	; 0x5c
   26e94:	cmp	r3, #1
   26e98:	ble	26ea8 <__assert_fail@plt+0x15508>
   26e9c:	mov	r0, r7
   26ea0:	bl	1182c <btowc@plt>
   26ea4:	mov	r7, r0
   26ea8:	cmn	r5, #1
   26eac:	cmnne	r7, #1
   26eb0:	bne	2704c <__assert_fail@plt+0x156ac>
   26eb4:	mov	r9, r8
   26eb8:	mov	r3, #3
   26ebc:	ldr	r2, [sp, #204]	; 0xcc
   26ec0:	str	r3, [r2]
   26ec4:	b	26bb8 <__assert_fail@plt+0x15218>
   26ec8:	mov	r9, r8
   26ecc:	mov	r8, #11
   26ed0:	ldr	r3, [sp, #204]	; 0xcc
   26ed4:	str	r8, [r3]
   26ed8:	b	26bb8 <__assert_fail@plt+0x15218>
   26edc:	str	r3, [sp, #32]
   26ee0:	ldr	r3, [sp, #204]	; 0xcc
   26ee4:	mov	r2, #6
   26ee8:	str	r2, [r3]
   26eec:	b	25fa0 <__assert_fail@plt+0x14600>
   26ef0:	mov	r0, r9
   26ef4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   26ef8:	mov	r0, r6
   26efc:	bl	1b944 <__assert_fail@plt+0x9fa4>
   26f00:	ldr	r2, [sp, #204]	; 0xcc
   26f04:	mov	r3, #12
   26f08:	str	r3, [r2]
   26f0c:	b	25f98 <__assert_fail@plt+0x145f8>
   26f10:	ldr	r2, [sp, #204]	; 0xcc
   26f14:	mov	r3, #2
   26f18:	str	r3, [r2]
   26f1c:	b	26bb8 <__assert_fail@plt+0x15218>
   26f20:	mov	r9, r8
   26f24:	mov	r3, #11
   26f28:	b	26ebc <__assert_fail@plt+0x1551c>
   26f2c:	ldr	r3, [sp, #20]
   26f30:	ldrb	r3, [r3, #4]
   26f34:	cmp	r3, #2
   26f38:	bne	264ac <__assert_fail@plt+0x14b0c>
   26f3c:	ldr	r2, [sp, #204]	; 0xcc
   26f40:	mov	r3, #9
   26f44:	str	r3, [r2]
   26f48:	b	26300 <__assert_fail@plt+0x14960>
   26f4c:	andeq	ip, r1, r4, lsl #23
   26f50:	addeq	r0, ip, r0, lsl #16
   26f54:	andeq	fp, r1, r4, ror #25
   26f58:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   26f5c:	andeq	sp, r2, r8, lsr r0
   26f60:	andeq	fp, r2, ip, asr #30
   26f64:	andeq	r0, r0, pc, lsl #6
   26f68:	mvnseq	r0, #0
   26f6c:	andeq	sp, r2, r8, lsr #32
   26f70:	andeq	sp, r2, r8, rrx
   26f74:	ldr	r5, [sp, #76]	; 0x4c
   26f78:	str	r2, [sp, #60]	; 0x3c
   26f7c:	mov	r0, r5
   26f80:	str	r3, [sp, #56]	; 0x38
   26f84:	bl	117a8 <strlen@plt>
   26f88:	ldr	r3, [sp, #56]	; 0x38
   26f8c:	ldr	r2, [sp, #60]	; 0x3c
   26f90:	cmp	r0, #1
   26f94:	bhi	26fe8 <__assert_fail@plt+0x15648>
   26f98:	cmp	r3, #3
   26f9c:	beq	26fbc <__assert_fail@plt+0x1561c>
   26fa0:	ldrb	r5, [r5]
   26fa4:	b	26e48 <__assert_fail@plt+0x154a8>
   26fa8:	cmp	r2, #3
   26fac:	movne	r5, #0
   26fb0:	bne	26e48 <__assert_fail@plt+0x154a8>
   26fb4:	ldr	r5, [sp, #76]	; 0x4c
   26fb8:	b	26fa0 <__assert_fail@plt+0x15600>
   26fbc:	ldr	r0, [sp, #84]	; 0x54
   26fc0:	str	r2, [sp, #60]	; 0x3c
   26fc4:	str	r3, [sp, #56]	; 0x38
   26fc8:	bl	117a8 <strlen@plt>
   26fcc:	ldr	r3, [sp, #56]	; 0x38
   26fd0:	ldr	r2, [sp, #60]	; 0x3c
   26fd4:	cmp	r0, #1
   26fd8:	bls	26e3c <__assert_fail@plt+0x1549c>
   26fdc:	mov	r9, r8
   26fe0:	mov	r8, #3
   26fe4:	b	26ed0 <__assert_fail@plt+0x15530>
   26fe8:	mov	r9, r8
   26fec:	mov	r8, r2
   26ff0:	b	26ed0 <__assert_fail@plt+0x15530>
   26ff4:	ldr	r3, [sp, #16]
   26ff8:	ldr	r0, [r6]
   26ffc:	lsl	r3, r3, #1
   27000:	add	r3, r3, #1
   27004:	str	r3, [sp, #16]
   27008:	lsl	r1, r3, #2
   2700c:	bl	1babc <__assert_fail@plt+0xa11c>
   27010:	cmp	r0, #0
   27014:	beq	270f0 <__assert_fail@plt+0x15750>
   27018:	ldr	r3, [r6, #20]
   2701c:	str	r0, [r6]
   27020:	b	26c14 <__assert_fail@plt+0x15274>
   27024:	ldr	r3, [sl, #40]	; 0x28
   27028:	mov	r2, #1
   2702c:	sub	r3, r3, fp
   27030:	str	r3, [sl, #40]	; 0x28
   27034:	strb	r2, [r4, #4]
   27038:	ldr	r3, [sp, #72]	; 0x48
   2703c:	b	2694c <__assert_fail@plt+0x14fac>
   27040:	cmp	r3, #0
   27044:	cmpne	r3, #3
   27048:	bne	273f8 <__assert_fail@plt+0x15a58>
   2704c:	ldr	r3, [sp, #52]	; 0x34
   27050:	cmp	r5, r7
   27054:	movls	r3, #0
   27058:	andhi	r3, r3, #1
   2705c:	cmp	r3, #0
   27060:	bne	26f20 <__assert_fail@plt+0x15580>
   27064:	ldr	r3, [sp, #24]
   27068:	ldr	r3, [r3, #92]	; 0x5c
   2706c:	cmp	r3, #1
   27070:	ble	270a0 <__assert_fail@plt+0x15700>
   27074:	ldr	r2, [r6, #32]
   27078:	ldr	r3, [sp, #32]
   2707c:	cmp	r2, r3
   27080:	beq	270fc <__assert_fail@plt+0x1575c>
   27084:	ldr	r3, [r6, #4]
   27088:	ldr	r0, [r6, #8]
   2708c:	str	r5, [r3, r2, lsl #2]
   27090:	ldr	r3, [r6, #32]
   27094:	add	r2, r3, #1
   27098:	str	r2, [r6, #32]
   2709c:	str	r7, [r0, r3, lsl #2]
   270a0:	mov	r3, #0
   270a4:	mov	ip, #1
   270a8:	cmp	r5, r3
   270ac:	movhi	r2, #0
   270b0:	movls	r2, #1
   270b4:	cmp	r7, r3
   270b8:	movcc	r2, #0
   270bc:	cmp	r2, #0
   270c0:	asrne	r0, r3, #5
   270c4:	andne	r1, r3, #31
   270c8:	ldrne	r2, [r8, r0, lsl #2]
   270cc:	add	r3, r3, #1
   270d0:	orrne	r2, r2, ip, lsl r1
   270d4:	strne	r2, [r8, r0, lsl #2]
   270d8:	cmp	r3, #256	; 0x100
   270dc:	bne	270a8 <__assert_fail@plt+0x15708>
   270e0:	ldr	r2, [sp, #204]	; 0xcc
   270e4:	mov	r3, #0
   270e8:	str	r3, [r2]
   270ec:	b	26b7c <__assert_fail@plt+0x151dc>
   270f0:	mov	r9, r8
   270f4:	mov	r3, #12
   270f8:	b	26ebc <__assert_fail@plt+0x1551c>
   270fc:	ldr	r3, [sp, #32]
   27100:	ldr	r0, [r6, #4]
   27104:	lsl	r3, r3, #1
   27108:	add	r3, r3, #1
   2710c:	str	r3, [sp, #32]
   27110:	lsl	r2, r3, #2
   27114:	mov	r1, r2
   27118:	str	r2, [sp, #60]	; 0x3c
   2711c:	bl	1babc <__assert_fail@plt+0xa11c>
   27120:	ldr	r2, [sp, #60]	; 0x3c
   27124:	mov	r1, r2
   27128:	str	r0, [sp, #56]	; 0x38
   2712c:	ldr	r0, [r6, #8]
   27130:	bl	1babc <__assert_fail@plt+0xa11c>
   27134:	ldr	r3, [sp, #56]	; 0x38
   27138:	cmp	r0, #0
   2713c:	cmpne	r3, #0
   27140:	ldrne	r2, [r6, #32]
   27144:	strne	r3, [r6, #4]
   27148:	strne	r0, [r6, #8]
   2714c:	bne	2708c <__assert_fail@plt+0x156ec>
   27150:	mov	r9, r8
   27154:	mov	r8, r0
   27158:	mov	r0, r3
   2715c:	bl	1b944 <__assert_fail@plt+0x9fa4>
   27160:	mov	r0, r8
   27164:	bl	1b944 <__assert_fail@plt+0x9fa4>
   27168:	mov	r3, #12
   2716c:	b	26ebc <__assert_fail@plt+0x1551c>
   27170:	mov	r4, #128	; 0x80
   27174:	mov	r5, #4
   27178:	bl	11778 <__ctype_b_loc@plt>
   2717c:	sub	r3, r4, #-2147483647	; 0x80000001
   27180:	mov	lr, #1
   27184:	add	ip, r5, #24
   27188:	ldr	r2, [sp, #24]
   2718c:	add	ip, r2, ip, lsl #2
   27190:	ldr	r6, [r0]
   27194:	add	r6, r6, r3, lsl lr
   27198:	mov	r0, r6
   2719c:	mov	r1, #0
   271a0:	ldrh	r2, [r0, #2]!
   271a4:	add	r3, r4, r1
   271a8:	lsr	r2, r2, #3
   271ac:	cmp	r3, #95	; 0x5f
   271b0:	movne	r3, r2
   271b4:	orreq	r3, r2, #1
   271b8:	tst	r3, #1
   271bc:	ldrne	r3, [ip]
   271c0:	orrne	r3, r3, lr, lsl r1
   271c4:	add	r1, r1, #1
   271c8:	strne	r3, [ip]
   271cc:	cmp	r1, #32
   271d0:	bne	271a0 <__assert_fail@plt+0x15800>
   271d4:	add	r5, r5, #1
   271d8:	cmp	r5, #8
   271dc:	add	r4, r4, #32
   271e0:	add	r6, r6, #64	; 0x40
   271e4:	add	ip, ip, #4
   271e8:	bne	27198 <__assert_fail@plt+0x157f8>
   271ec:	ldr	r3, [sp, #20]
   271f0:	ldr	r2, [r3]
   271f4:	b	2673c <__assert_fail@plt+0x14d9c>
   271f8:	mov	r5, r4
   271fc:	b	27178 <__assert_fail@plt+0x157d8>
   27200:	ldr	r3, [sl, #40]	; 0x28
   27204:	ldr	r2, [sp, #40]	; 0x28
   27208:	add	r3, r3, fp
   2720c:	cmp	r2, #0
   27210:	mov	r9, r8
   27214:	str	r3, [sl, #40]	; 0x28
   27218:	bne	273d0 <__assert_fail@plt+0x15a30>
   2721c:	ldr	r3, [sp, #24]
   27220:	ldr	r0, [r3, #92]	; 0x5c
   27224:	cmp	r0, #1
   27228:	ble	27258 <__assert_fail@plt+0x158b8>
   2722c:	ldr	r3, [sp, #24]
   27230:	sub	r1, r9, #4
   27234:	add	ip, r9, #28
   27238:	ldr	r2, [r3, #60]	; 0x3c
   2723c:	sub	r2, r2, #4
   27240:	ldr	r3, [r1, #4]
   27244:	ldr	lr, [r2, #4]!
   27248:	and	r3, r3, lr
   2724c:	str	r3, [r1, #4]!
   27250:	cmp	ip, r1
   27254:	bne	27240 <__assert_fail@plt+0x158a0>
   27258:	ldr	r3, [r6, #20]
   2725c:	cmp	r3, #0
   27260:	bne	272a8 <__assert_fail@plt+0x15908>
   27264:	ldr	r3, [r6, #24]
   27268:	cmp	r3, #0
   2726c:	bne	272a8 <__assert_fail@plt+0x15908>
   27270:	ldr	r3, [r6, #28]
   27274:	cmp	r3, #0
   27278:	bne	272a8 <__assert_fail@plt+0x15908>
   2727c:	ldr	r3, [r6, #32]
   27280:	cmp	r3, #0
   27284:	bne	272a8 <__assert_fail@plt+0x15908>
   27288:	cmp	r0, #1
   2728c:	ble	27380 <__assert_fail@plt+0x159e0>
   27290:	ldr	r3, [r6, #36]	; 0x24
   27294:	cmp	r3, #0
   27298:	bne	272a8 <__assert_fail@plt+0x15908>
   2729c:	ldrb	r3, [r6, #16]
   272a0:	tst	r3, #1
   272a4:	beq	27380 <__assert_fail@plt+0x159e0>
   272a8:	ldr	r1, [sp, #24]
   272ac:	mov	r3, #0
   272b0:	add	r4, r1, #56	; 0x38
   272b4:	ldrb	r2, [r1, #88]	; 0x58
   272b8:	add	r5, r1, #64	; 0x40
   272bc:	mov	ip, #6
   272c0:	orr	r2, r2, #2
   272c4:	strb	r2, [r1, #88]	; 0x58
   272c8:	add	r2, sp, #96	; 0x60
   272cc:	str	r2, [sp]
   272d0:	mov	r0, r4
   272d4:	mov	r2, r3
   272d8:	mov	r1, r5
   272dc:	str	r6, [sp, #96]	; 0x60
   272e0:	strb	ip, [sp, #100]	; 0x64
   272e4:	bl	1db54 <__assert_fail@plt+0xc1b4>
   272e8:	subs	r3, r0, #0
   272ec:	str	r3, [sp, #32]
   272f0:	beq	270f4 <__assert_fail@plt+0x15754>
   272f4:	sub	r3, r9, #4
   272f8:	add	r2, r9, #28
   272fc:	b	27308 <__assert_fail@plt+0x15968>
   27300:	cmp	r2, r3
   27304:	beq	273c4 <__assert_fail@plt+0x15a24>
   27308:	ldr	r1, [r3, #4]!
   2730c:	cmp	r1, #0
   27310:	beq	27300 <__assert_fail@plt+0x15960>
   27314:	mov	r3, #0
   27318:	add	r2, sp, #96	; 0x60
   2731c:	str	r2, [sp]
   27320:	mov	ip, #3
   27324:	mov	r2, r3
   27328:	mov	r1, r5
   2732c:	mov	r0, r4
   27330:	str	r9, [sp, #96]	; 0x60
   27334:	strb	ip, [sp, #100]	; 0x64
   27338:	bl	1db54 <__assert_fail@plt+0xc1b4>
   2733c:	subs	r2, r0, #0
   27340:	beq	270f4 <__assert_fail@plt+0x15754>
   27344:	add	ip, sp, #128	; 0x80
   27348:	mov	lr, #0
   2734c:	ldr	r3, [sp, #32]
   27350:	mov	r0, r4
   27354:	mov	r1, r5
   27358:	str	ip, [sp]
   2735c:	mov	r4, #10
   27360:	str	lr, [sp, #132]	; 0x84
   27364:	str	lr, [sp, #128]	; 0x80
   27368:	strb	r4, [sp, #132]	; 0x84
   2736c:	bl	1db54 <__assert_fail@plt+0xc1b4>
   27370:	subs	r3, r0, #0
   27374:	str	r3, [sp, #32]
   27378:	bne	26008 <__assert_fail@plt+0x14668>
   2737c:	b	270f4 <__assert_fail@plt+0x15754>
   27380:	mov	r0, r6
   27384:	bl	1cb20 <__assert_fail@plt+0xb180>
   27388:	ldr	r0, [sp, #24]
   2738c:	mov	r3, #0
   27390:	add	r2, sp, #96	; 0x60
   27394:	str	r2, [sp]
   27398:	mov	ip, #3
   2739c:	mov	r2, r3
   273a0:	add	r1, r0, #64	; 0x40
   273a4:	add	r0, r0, #56	; 0x38
   273a8:	str	r9, [sp, #96]	; 0x60
   273ac:	strb	ip, [sp, #100]	; 0x64
   273b0:	bl	1db54 <__assert_fail@plt+0xc1b4>
   273b4:	subs	r3, r0, #0
   273b8:	str	r3, [sp, #32]
   273bc:	bne	26008 <__assert_fail@plt+0x14668>
   273c0:	b	270f4 <__assert_fail@plt+0x15754>
   273c4:	mov	r0, r9
   273c8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   273cc:	b	26008 <__assert_fail@plt+0x14668>
   273d0:	sub	r3, r8, #4
   273d4:	add	r1, r8, #28
   273d8:	ldr	r2, [r3, #4]
   273dc:	mvn	r2, r2
   273e0:	str	r2, [r3, #4]!
   273e4:	cmp	r1, r3
   273e8:	bne	273d8 <__assert_fail@plt+0x15a38>
   273ec:	b	2721c <__assert_fail@plt+0x1587c>
   273f0:	ldr	r6, [sp, #16]
   273f4:	b	263e0 <__assert_fail@plt+0x14a40>
   273f8:	ldr	r7, [sp, #84]	; 0x54
   273fc:	b	26ea8 <__assert_fail@plt+0x15508>
   27400:	ldr	r5, [sp, #76]	; 0x4c
   27404:	b	26e80 <__assert_fail@plt+0x154e0>
   27408:	cmp	r3, #3
   2740c:	movne	r7, #0
   27410:	ldreq	r1, [sp, #84]	; 0x54
   27414:	ldrbeq	r7, [r1]
   27418:	b	26e54 <__assert_fail@plt+0x154b4>
   2741c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27420:	sub	sp, sp, #28
   27424:	mov	sl, r3
   27428:	ldr	r5, [sp, #68]	; 0x44
   2742c:	ldr	r6, [sp, #64]	; 0x40
   27430:	str	r5, [sp, #4]
   27434:	str	r6, [sp]
   27438:	mov	r8, r1
   2743c:	ldr	fp, [r1]
   27440:	mov	r9, r0
   27444:	mov	r7, r2
   27448:	bl	25eb8 <__assert_fail@plt+0x14518>
   2744c:	ldr	r3, [r5]
   27450:	adds	r3, r3, #0
   27454:	movne	r3, #1
   27458:	cmp	r0, #0
   2745c:	movne	r3, #0
   27460:	cmp	r3, #0
   27464:	bne	2754c <__assert_fail@plt+0x15bac>
   27468:	add	r3, fp, #64	; 0x40
   2746c:	mov	r4, r0
   27470:	str	r3, [sp, #8]
   27474:	add	r3, fp, #56	; 0x38
   27478:	str	r3, [sp, #12]
   2747c:	ldrb	lr, [r7, #4]
   27480:	clz	ip, r6
   27484:	mov	r3, sl
   27488:	and	fp, lr, #247	; 0xf7
   2748c:	cmp	fp, #2
   27490:	mov	r2, r7
   27494:	mov	r1, r8
   27498:	mov	r0, r9
   2749c:	lsr	ip, ip, #5
   274a0:	beq	27550 <__assert_fail@plt+0x15bb0>
   274a4:	cmp	lr, #9
   274a8:	orrne	ip, ip, #1
   274ac:	cmp	ip, #0
   274b0:	beq	27550 <__assert_fail@plt+0x15bb0>
   274b4:	str	r5, [sp, #4]
   274b8:	str	r6, [sp]
   274bc:	bl	25eb8 <__assert_fail@plt+0x14518>
   274c0:	ldr	ip, [r5]
   274c4:	adds	ip, ip, #0
   274c8:	movne	ip, #1
   274cc:	cmp	r0, #0
   274d0:	movne	ip, #0
   274d4:	cmp	ip, #0
   274d8:	mov	fp, r0
   274dc:	bne	27534 <__assert_fail@plt+0x15b94>
   274e0:	cmp	r4, #0
   274e4:	cmpne	r0, #0
   274e8:	bne	274f8 <__assert_fail@plt+0x15b58>
   274ec:	cmp	r4, #0
   274f0:	moveq	r4, r0
   274f4:	b	2747c <__assert_fail@plt+0x15adc>
   274f8:	add	r3, sp, #16
   274fc:	str	ip, [sp, #20]
   27500:	str	r3, [sp]
   27504:	str	ip, [sp, #16]
   27508:	mov	r3, r0
   2750c:	mov	ip, #16
   27510:	mov	r2, r4
   27514:	ldr	r1, [sp, #8]
   27518:	ldr	r0, [sp, #12]
   2751c:	strb	ip, [sp, #20]
   27520:	bl	1db54 <__assert_fail@plt+0xc1b4>
   27524:	cmp	r0, #0
   27528:	beq	2755c <__assert_fail@plt+0x15bbc>
   2752c:	mov	r4, r0
   27530:	b	2747c <__assert_fail@plt+0x15adc>
   27534:	cmp	r4, #0
   27538:	beq	2754c <__assert_fail@plt+0x15bac>
   2753c:	mov	r0, r4
   27540:	mov	r2, #0
   27544:	ldr	r1, [pc, #88]	; 275a4 <__assert_fail@plt+0x15c04>
   27548:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   2754c:	mov	r4, #0
   27550:	mov	r0, r4
   27554:	add	sp, sp, #28
   27558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2755c:	mov	r3, r0
   27560:	mov	r2, r3
   27564:	mov	r0, fp
   27568:	ldr	r1, [pc, #52]	; 275a4 <__assert_fail@plt+0x15c04>
   2756c:	str	r3, [sp, #8]
   27570:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   27574:	ldr	r3, [sp, #8]
   27578:	mov	r0, r4
   2757c:	mov	r2, r3
   27580:	ldr	r1, [pc, #28]	; 275a4 <__assert_fail@plt+0x15c04>
   27584:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   27588:	ldr	r3, [sp, #8]
   2758c:	mov	r2, #12
   27590:	mov	r4, r3
   27594:	mov	r0, r4
   27598:	str	r2, [r5]
   2759c:	add	sp, sp, #28
   275a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275a4:	andeq	ip, r1, r4, lsl #23
   275a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275ac:	sub	sp, sp, #44	; 0x2c
   275b0:	ldr	r8, [r1]
   275b4:	ldr	fp, [sp, #84]	; 0x54
   275b8:	str	r1, [sp, #16]
   275bc:	ldr	ip, [r8, #84]	; 0x54
   275c0:	str	fp, [sp, #4]
   275c4:	str	ip, [sp, #28]
   275c8:	ldr	ip, [sp, #80]	; 0x50
   275cc:	mov	r5, r0
   275d0:	str	ip, [sp]
   275d4:	mov	r4, r2
   275d8:	str	r3, [sp, #8]
   275dc:	bl	2741c <__assert_fail@plt+0x15a7c>
   275e0:	ldr	r6, [fp]
   275e4:	adds	r6, r6, #0
   275e8:	movne	r6, #1
   275ec:	cmp	r0, #0
   275f0:	movne	r6, #0
   275f4:	cmp	r6, #0
   275f8:	bne	27728 <__assert_fail@plt+0x15d88>
   275fc:	ldr	r3, [sp, #8]
   27600:	mov	r9, r0
   27604:	orr	r3, r3, #8388608	; 0x800000
   27608:	str	r3, [sp, #12]
   2760c:	add	r3, r8, #64	; 0x40
   27610:	str	r3, [sp, #20]
   27614:	add	r3, r8, #56	; 0x38
   27618:	add	r7, sp, #32
   2761c:	str	r3, [sp, #24]
   27620:	str	fp, [sp, #84]	; 0x54
   27624:	b	276b4 <__assert_fail@plt+0x15d14>
   27628:	cmp	sl, #9
   2762c:	orrne	ip, ip, #1
   27630:	cmp	ip, #0
   27634:	beq	27708 <__assert_fail@plt+0x15d68>
   27638:	ldr	ip, [sp, #28]
   2763c:	ldr	sl, [r8, #84]	; 0x54
   27640:	str	ip, [r8, #84]	; 0x54
   27644:	ldr	ip, [sp, #84]	; 0x54
   27648:	str	ip, [sp, #4]
   2764c:	ldr	ip, [sp, #80]	; 0x50
   27650:	str	ip, [sp]
   27654:	bl	2741c <__assert_fail@plt+0x15a7c>
   27658:	ldr	r3, [sp, #84]	; 0x54
   2765c:	ldr	r3, [r3]
   27660:	adds	r3, r3, #0
   27664:	movne	r3, #1
   27668:	cmp	r0, #0
   2766c:	movne	r3, #0
   27670:	cmp	r3, #0
   27674:	mov	r3, r0
   27678:	bne	27710 <__assert_fail@plt+0x15d70>
   2767c:	ldr	r2, [r8, #84]	; 0x54
   27680:	orr	sl, r2, sl
   27684:	str	sl, [r8, #84]	; 0x54
   27688:	str	r7, [sp]
   2768c:	mov	r2, r9
   27690:	str	r6, [r7, #4]
   27694:	mov	ip, #10
   27698:	ldr	r1, [sp, #20]
   2769c:	ldr	r0, [sp, #24]
   276a0:	str	r6, [r7]
   276a4:	strb	ip, [sp, #36]	; 0x24
   276a8:	bl	1db54 <__assert_fail@plt+0xc1b4>
   276ac:	subs	r9, r0, #0
   276b0:	beq	27738 <__assert_fail@plt+0x15d98>
   276b4:	ldrb	r3, [r4, #4]
   276b8:	ldr	r2, [sp, #12]
   276bc:	mov	r1, r5
   276c0:	cmp	r3, #10
   276c4:	mov	r0, r4
   276c8:	bne	2772c <__assert_fail@plt+0x15d8c>
   276cc:	bl	251f4 <__assert_fail@plt+0x13854>
   276d0:	ldrb	sl, [r4, #4]
   276d4:	ldr	lr, [r5, #40]	; 0x28
   276d8:	ldr	ip, [sp, #80]	; 0x50
   276dc:	and	fp, sl, #247	; 0xf7
   276e0:	cmp	fp, #2
   276e4:	clz	ip, ip
   276e8:	ldr	r3, [sp, #8]
   276ec:	mov	r2, r4
   276f0:	ldr	r1, [sp, #16]
   276f4:	lsr	ip, ip, #5
   276f8:	add	lr, lr, r0
   276fc:	str	lr, [r5, #40]	; 0x28
   27700:	mov	r0, r5
   27704:	bne	27628 <__assert_fail@plt+0x15c88>
   27708:	mov	r3, r6
   2770c:	b	27688 <__assert_fail@plt+0x15ce8>
   27710:	cmp	r9, #0
   27714:	beq	27728 <__assert_fail@plt+0x15d88>
   27718:	mov	r0, r9
   2771c:	mov	r2, #0
   27720:	ldr	r1, [pc, #40]	; 27750 <__assert_fail@plt+0x15db0>
   27724:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   27728:	mov	r9, #0
   2772c:	mov	r0, r9
   27730:	add	sp, sp, #44	; 0x2c
   27734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27738:	ldr	fp, [sp, #84]	; 0x54
   2773c:	mov	r3, #12
   27740:	mov	r0, r9
   27744:	str	r3, [fp]
   27748:	add	sp, sp, #44	; 0x2c
   2774c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27750:	andeq	ip, r1, r4, lsl #23
   27754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27758:	mov	r8, r0
   2775c:	ldrb	r0, [r0, #28]
   27760:	ldr	ip, [r8, #4]
   27764:	sub	sp, sp, #148	; 0x94
   27768:	mov	r7, r3
   2776c:	and	r0, r0, #144	; 0x90
   27770:	mov	r3, #0
   27774:	cmp	ip, #159	; 0x9f
   27778:	str	r7, [r8, #12]
   2777c:	str	r1, [sp, #12]
   27780:	mov	r5, r2
   27784:	strb	r0, [r8, #28]
   27788:	str	r3, [r8, #8]
   2778c:	str	r3, [sp, #36]	; 0x24
   27790:	str	r3, [r8, #24]
   27794:	ldr	r4, [r8]
   27798:	bls	28384 <__assert_fail@plt+0x169e4>
   2779c:	mov	r2, #160	; 0xa0
   277a0:	str	r2, [r8, #8]
   277a4:	mov	r1, #0
   277a8:	mov	r0, r4
   277ac:	bl	11814 <memset@plt>
   277b0:	ldr	r2, [pc, #3696]	; 28628 <__assert_fail@plt+0x16c88>
   277b4:	mov	r3, #31
   277b8:	cmp	r5, r2
   277bc:	str	r3, [r4, #64]	; 0x40
   277c0:	bhi	27dc0 <__assert_fail@plt+0x16420>
   277c4:	add	r3, r5, #1
   277c8:	str	r3, [r4, #4]
   277cc:	lsl	r0, r3, #3
   277d0:	str	r3, [sp, #20]
   277d4:	bl	1ba3c <__assert_fail@plt+0xa09c>
   277d8:	cmp	r5, #0
   277dc:	str	r0, [r4]
   277e0:	beq	28420 <__assert_fail@plt+0x16a80>
   277e4:	mov	r1, #1
   277e8:	lsl	r1, r1, #1
   277ec:	cmp	r5, r1
   277f0:	bcs	277e8 <__assert_fail@plt+0x15e48>
   277f4:	sub	sl, r1, #1
   277f8:	mov	r0, #12
   277fc:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   27800:	str	sl, [r4, #68]	; 0x44
   27804:	str	r0, [r4, #32]
   27808:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   2780c:	str	r0, [r4, #92]	; 0x5c
   27810:	mov	r0, #14
   27814:	bl	118b0 <nl_langinfo@plt>
   27818:	ldrb	r3, [r0]
   2781c:	and	r3, r3, #223	; 0xdf
   27820:	cmp	r3, #85	; 0x55
   27824:	bne	27848 <__assert_fail@plt+0x15ea8>
   27828:	ldrb	r3, [r0, #1]
   2782c:	and	r3, r3, #223	; 0xdf
   27830:	cmp	r3, #84	; 0x54
   27834:	bne	27848 <__assert_fail@plt+0x15ea8>
   27838:	ldrb	r3, [r0, #2]
   2783c:	and	r3, r3, #223	; 0xdf
   27840:	cmp	r3, #70	; 0x46
   27844:	beq	280b0 <__assert_fail@plt+0x16710>
   27848:	ldrb	r3, [r4, #88]	; 0x58
   2784c:	ldr	r2, [r4, #92]	; 0x5c
   27850:	bic	r3, r3, #8
   27854:	cmp	r2, #1
   27858:	strb	r3, [r4, #88]	; 0x58
   2785c:	ble	27874 <__assert_fail@plt+0x15ed4>
   27860:	uxtb	r3, r3
   27864:	ands	r6, r3, #4
   27868:	beq	27ffc <__assert_fail@plt+0x1665c>
   2786c:	ldr	r3, [pc, #3512]	; 2862c <__assert_fail@plt+0x16c8c>
   27870:	str	r3, [r4, #60]	; 0x3c
   27874:	ldr	r3, [r4]
   27878:	cmp	r3, #0
   2787c:	beq	27dc0 <__assert_fail@plt+0x16420>
   27880:	ldr	r3, [r4, #32]
   27884:	cmp	r3, #0
   27888:	beq	27dc0 <__assert_fail@plt+0x16420>
   2788c:	ldr	r2, [pc, #3484]	; 28630 <__assert_fail@plt+0x16c90>
   27890:	mov	r3, #0
   27894:	ldr	r1, [pc, #3480]	; 28634 <__assert_fail@plt+0x16c94>
   27898:	cmp	r2, r3
   2789c:	str	r3, [sp, #36]	; 0x24
   278a0:	mov	r3, #1
   278a4:	moveq	r3, r2
   278a8:	cmp	r1, #0
   278ac:	mov	r2, #1
   278b0:	moveq	r2, r1
   278b4:	orr	r3, r3, r2
   278b8:	ands	r3, r3, #255	; 0xff
   278bc:	str	r3, [sp, #24]
   278c0:	beq	278e4 <__assert_fail@plt+0x15f44>
   278c4:	mov	r1, #0
   278c8:	add	r0, r4, #136	; 0x88
   278cc:	bl	115e0 <pthread_mutex_init@plt>
   278d0:	cmp	r0, #0
   278d4:	bne	27dc0 <__assert_fail@plt+0x16420>
   278d8:	ldr	r3, [sp, #36]	; 0x24
   278dc:	cmp	r3, #0
   278e0:	bne	27dc8 <__assert_fail@plt+0x16428>
   278e4:	ands	r3, r7, #4194304	; 0x400000
   278e8:	mov	r1, #0
   278ec:	mov	r2, #84	; 0x54
   278f0:	add	r0, sp, #60	; 0x3c
   278f4:	moveq	fp, r1
   278f8:	movne	fp, #1
   278fc:	ldr	sl, [r8, #20]
   27900:	str	r3, [sp, #16]
   27904:	bl	11814 <memset@plt>
   27908:	ldrb	r2, [r4, #88]	; 0x58
   2790c:	ldr	ip, [sp, #12]
   27910:	ldr	r1, [r4, #92]	; 0x5c
   27914:	cmp	sl, #0
   27918:	moveq	r3, fp
   2791c:	orrne	r3, fp, #1
   27920:	lsr	r0, r2, #2
   27924:	lsr	r2, r2, #3
   27928:	and	r0, r0, #1
   2792c:	and	r2, r2, #1
   27930:	cmp	r5, #0
   27934:	str	ip, [sp, #60]	; 0x3c
   27938:	strb	fp, [sp, #132]	; 0x84
   2793c:	strb	r3, [sp, #135]	; 0x87
   27940:	str	sl, [sp, #124]	; 0x7c
   27944:	str	r5, [sp, #108]	; 0x6c
   27948:	str	r5, [sp, #104]	; 0x68
   2794c:	str	r5, [sp, #116]	; 0x74
   27950:	str	r5, [sp, #112]	; 0x70
   27954:	mov	ip, r3
   27958:	strb	r0, [sp, #133]	; 0x85
   2795c:	strb	r2, [sp, #134]	; 0x86
   27960:	str	r1, [sp, #140]	; 0x8c
   27964:	beq	2798c <__assert_fail@plt+0x15fec>
   27968:	ldr	r1, [sp, #20]
   2796c:	add	r0, sp, #60	; 0x3c
   27970:	str	r3, [sp, #28]
   27974:	bl	1c080 <__assert_fail@plt+0xa6e0>
   27978:	cmp	r0, #0
   2797c:	bne	279f8 <__assert_fail@plt+0x16058>
   27980:	ldrb	ip, [sp, #135]	; 0x87
   27984:	ldr	r1, [r4, #92]	; 0x5c
   27988:	ldr	r3, [sp, #28]
   2798c:	cmp	ip, #0
   27990:	ldrne	r6, [sp, #64]	; 0x40
   27994:	ldreq	r6, [sp, #12]
   27998:	ands	r2, r7, #4194304	; 0x400000
   2799c:	cmp	r2, #0
   279a0:	str	r6, [sp, #64]	; 0x40
   279a4:	beq	27a78 <__assert_fail@plt+0x160d8>
   279a8:	cmp	r1, #1
   279ac:	ble	2849c <__assert_fail@plt+0x16afc>
   279b0:	add	r0, sp, #60	; 0x3c
   279b4:	bl	1c418 <__assert_fail@plt+0xaa78>
   279b8:	cmp	r0, #0
   279bc:	bne	279f8 <__assert_fail@plt+0x16058>
   279c0:	ldr	r3, [sp, #92]	; 0x5c
   279c4:	cmp	r5, r3
   279c8:	ble	27aac <__assert_fail@plt+0x1610c>
   279cc:	ldr	r3, [sp, #88]	; 0x58
   279d0:	ldr	r2, [r4, #92]	; 0x5c
   279d4:	ldr	r1, [sp, #96]	; 0x60
   279d8:	add	r3, r3, r2
   279dc:	cmp	r1, r3
   279e0:	bgt	27aac <__assert_fail@plt+0x1610c>
   279e4:	lsl	r1, r1, #1
   279e8:	add	r0, sp, #60	; 0x3c
   279ec:	bl	1c080 <__assert_fail@plt+0xa6e0>
   279f0:	cmp	r0, #0
   279f4:	beq	279b0 <__assert_fail@plt+0x16010>
   279f8:	str	r0, [sp, #36]	; 0x24
   279fc:	ldr	r6, [r8]
   27a00:	ldr	r0, [r6, #56]	; 0x38
   27a04:	cmp	r0, #0
   27a08:	beq	27a1c <__assert_fail@plt+0x1607c>
   27a0c:	ldr	r5, [r0]
   27a10:	bl	1b944 <__assert_fail@plt+0x9fa4>
   27a14:	subs	r0, r5, #0
   27a18:	bne	27a0c <__assert_fail@plt+0x1606c>
   27a1c:	mov	r5, #0
   27a20:	mov	r3, #31
   27a24:	str	r3, [r6, #64]	; 0x40
   27a28:	ldr	r0, [r6, #16]
   27a2c:	str	r5, [r6, #56]	; 0x38
   27a30:	str	r5, [r6, #52]	; 0x34
   27a34:	bl	1b944 <__assert_fail@plt+0x9fa4>
   27a38:	str	r5, [r6, #16]
   27a3c:	add	r0, sp, #60	; 0x3c
   27a40:	bl	1ce38 <__assert_fail@plt+0xb498>
   27a44:	ldr	r3, [sp, #24]
   27a48:	cmp	r3, r5
   27a4c:	beq	27a58 <__assert_fail@plt+0x160b8>
   27a50:	add	r0, r4, #136	; 0x88
   27a54:	bl	1155c <pthread_mutex_destroy@plt>
   27a58:	mov	r0, r4
   27a5c:	bl	1ce68 <__assert_fail@plt+0xb4c8>
   27a60:	ldr	r0, [sp, #36]	; 0x24
   27a64:	mov	r3, #0
   27a68:	str	r3, [r8]
   27a6c:	str	r3, [r8, #4]
   27a70:	add	sp, sp, #148	; 0x94
   27a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a78:	cmp	r1, #1
   27a7c:	bgt	28154 <__assert_fail@plt+0x167b4>
   27a80:	cmp	r3, #0
   27a84:	beq	28494 <__assert_fail@plt+0x16af4>
   27a88:	ldr	ip, [sp, #96]	; 0x60
   27a8c:	ldr	r2, [sp, #108]	; 0x6c
   27a90:	ldr	r3, [sp, #88]	; 0x58
   27a94:	cmp	ip, r2
   27a98:	movge	ip, r2
   27a9c:	cmp	ip, r3
   27aa0:	bgt	27d38 <__assert_fail@plt+0x16398>
   27aa4:	str	r3, [sp, #88]	; 0x58
   27aa8:	str	r3, [sp, #92]	; 0x5c
   27aac:	ldr	r5, [r8]
   27ab0:	mov	r6, #0
   27ab4:	orr	r2, r7, #8388608	; 0x800000
   27ab8:	str	r6, [r8, #24]
   27abc:	add	r1, sp, #60	; 0x3c
   27ac0:	str	r7, [r5, #128]	; 0x80
   27ac4:	add	r0, sp, #40	; 0x28
   27ac8:	str	r6, [sp, #36]	; 0x24
   27acc:	bl	251f4 <__assert_fail@plt+0x13854>
   27ad0:	ldr	ip, [sp, #100]	; 0x64
   27ad4:	add	r2, sp, #36	; 0x24
   27ad8:	mov	r3, r7
   27adc:	str	r2, [sp, #4]
   27ae0:	str	r6, [sp]
   27ae4:	add	r2, sp, #40	; 0x28
   27ae8:	mov	r1, r8
   27aec:	add	ip, ip, r0
   27af0:	add	r0, sp, #60	; 0x3c
   27af4:	str	ip, [sp, #100]	; 0x64
   27af8:	bl	275a8 <__assert_fail@plt+0x15c08>
   27afc:	ldr	r3, [sp, #36]	; 0x24
   27b00:	cmp	r3, r6
   27b04:	mov	r7, r0
   27b08:	bne	2842c <__assert_fail@plt+0x16a8c>
   27b0c:	add	fp, sp, #48	; 0x30
   27b10:	add	r9, r5, #56	; 0x38
   27b14:	add	r5, r5, #64	; 0x40
   27b18:	str	fp, [sp]
   27b1c:	mov	ip, #2
   27b20:	str	r3, [fp, #4]
   27b24:	mov	r1, r5
   27b28:	mov	r0, r9
   27b2c:	mov	r2, r3
   27b30:	str	r3, [sp, #48]	; 0x30
   27b34:	strb	ip, [sp, #52]	; 0x34
   27b38:	bl	1db54 <__assert_fail@plt+0xc1b4>
   27b3c:	cmp	r7, #0
   27b40:	mov	r6, r0
   27b44:	beq	27b74 <__assert_fail@plt+0x161d4>
   27b48:	mov	r3, #0
   27b4c:	str	fp, [sp]
   27b50:	mov	ip, #16
   27b54:	str	r3, [fp, #4]
   27b58:	str	r3, [sp, #48]	; 0x30
   27b5c:	mov	r2, r7
   27b60:	mov	r1, r5
   27b64:	mov	r0, r9
   27b68:	mov	r3, r6
   27b6c:	strb	ip, [sp, #52]	; 0x34
   27b70:	bl	1db54 <__assert_fail@plt+0xc1b4>
   27b74:	cmp	r0, #0
   27b78:	cmpne	r6, #0
   27b7c:	moveq	r3, #1
   27b80:	movne	r3, #0
   27b84:	str	r3, [sp, #12]
   27b88:	moveq	r3, #12
   27b8c:	streq	r3, [sp, #36]	; 0x24
   27b90:	beq	283a8 <__assert_fail@plt+0x16a08>
   27b94:	ldr	r6, [r8]
   27b98:	str	r0, [r4, #52]	; 0x34
   27b9c:	ldr	r0, [r6, #4]
   27ba0:	lsl	r0, r0, #2
   27ba4:	bl	1ba3c <__assert_fail@plt+0xa09c>
   27ba8:	ldr	r3, [r6, #4]
   27bac:	str	r0, [r6, #12]
   27bb0:	lsl	r0, r3, #2
   27bb4:	bl	1ba3c <__assert_fail@plt+0xa09c>
   27bb8:	ldr	r3, [r6, #4]
   27bbc:	add	r3, r3, r3, lsl #1
   27bc0:	str	r0, [r6, #16]
   27bc4:	lsl	r0, r3, #2
   27bc8:	bl	1ba3c <__assert_fail@plt+0xa09c>
   27bcc:	ldr	r3, [r6, #4]
   27bd0:	add	r3, r3, r3, lsl #1
   27bd4:	str	r0, [r6, #20]
   27bd8:	lsl	r0, r3, #2
   27bdc:	bl	1ba3c <__assert_fail@plt+0xa09c>
   27be0:	ldr	r3, [r6, #12]
   27be4:	cmp	r3, #0
   27be8:	str	r0, [r6, #24]
   27bec:	beq	27ee4 <__assert_fail@plt+0x16544>
   27bf0:	ldr	r3, [r6, #16]
   27bf4:	cmp	r3, #0
   27bf8:	beq	27ee4 <__assert_fail@plt+0x16544>
   27bfc:	ldr	r3, [r6, #20]
   27c00:	cmp	r3, #0
   27c04:	beq	28378 <__assert_fail@plt+0x169d8>
   27c08:	cmp	r0, #0
   27c0c:	beq	27ee4 <__assert_fail@plt+0x16544>
   27c10:	ldr	r0, [r8, #24]
   27c14:	lsl	r0, r0, #2
   27c18:	bl	1ba3c <__assert_fail@plt+0xa09c>
   27c1c:	cmp	r0, #0
   27c20:	str	r0, [r6, #132]	; 0x84
   27c24:	beq	27c98 <__assert_fail@plt+0x162f8>
   27c28:	ldr	r1, [r8, #24]
   27c2c:	cmp	r1, #0
   27c30:	subne	r2, r0, #4
   27c34:	ldrne	r3, [sp, #12]
   27c38:	beq	27c4c <__assert_fail@plt+0x162ac>
   27c3c:	str	r3, [r2, #4]!
   27c40:	add	r3, r3, #1
   27c44:	cmp	r3, r1
   27c48:	bne	27c3c <__assert_fail@plt+0x1629c>
   27c4c:	ldr	r1, [pc, #2532]	; 28638 <__assert_fail@plt+0x16c98>
   27c50:	mov	r2, r6
   27c54:	ldr	r0, [r6, #52]	; 0x34
   27c58:	bl	1c00c <__assert_fail@plt+0xa66c>
   27c5c:	ldr	r1, [r8, #24]
   27c60:	cmp	r1, #0
   27c64:	beq	28480 <__assert_fail@plt+0x16ae0>
   27c68:	ldr	r0, [r6, #132]	; 0x84
   27c6c:	ldr	r3, [r0]
   27c70:	cmp	r3, #0
   27c74:	beq	27c88 <__assert_fail@plt+0x162e8>
   27c78:	b	27c98 <__assert_fail@plt+0x162f8>
   27c7c:	ldr	r2, [r0, r3, lsl #2]
   27c80:	cmp	r2, r3
   27c84:	bne	27c98 <__assert_fail@plt+0x162f8>
   27c88:	add	r3, r3, #1
   27c8c:	cmp	r3, r1
   27c90:	bcc	27c7c <__assert_fail@plt+0x162dc>
   27c94:	beq	28484 <__assert_fail@plt+0x16ae4>
   27c98:	mov	r2, r8
   27c9c:	ldr	r1, [pc, #2456]	; 2863c <__assert_fail@plt+0x16c9c>
   27ca0:	ldr	r0, [r6, #52]	; 0x34
   27ca4:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   27ca8:	subs	r3, r0, #0
   27cac:	bne	27db8 <__assert_fail@plt+0x16418>
   27cb0:	mov	r2, r6
   27cb4:	ldr	r1, [pc, #2436]	; 28640 <__assert_fail@plt+0x16ca0>
   27cb8:	ldr	r0, [r6, #52]	; 0x34
   27cbc:	bl	1bf98 <__assert_fail@plt+0xa5f8>
   27cc0:	subs	r3, r0, #0
   27cc4:	bne	27db8 <__assert_fail@plt+0x16418>
   27cc8:	mov	r2, r6
   27ccc:	ldr	r1, [pc, #2416]	; 28644 <__assert_fail@plt+0x16ca4>
   27cd0:	ldr	r0, [r6, #52]	; 0x34
   27cd4:	str	r3, [sp, #20]
   27cd8:	bl	1c00c <__assert_fail@plt+0xa66c>
   27cdc:	ldr	r7, [r6, #52]	; 0x34
   27ce0:	ldrb	r3, [r7, #24]
   27ce4:	ldr	r2, [r7, #28]
   27ce8:	sub	r3, r3, #2
   27cec:	cmp	r3, #14
   27cf0:	ldrls	pc, [pc, r3, lsl #2]
   27cf4:	b	280e0 <__assert_fail@plt+0x16740>
   27cf8:	andeq	r7, r2, r4, ror pc
   27cfc:	andeq	r8, r2, r0, ror #1
   27d00:	andeq	r7, r2, r4, ror #26
   27d04:	andeq	r8, r2, r0, ror #1
   27d08:	andeq	r8, r2, r0, ror #1
   27d0c:	andeq	r8, r2, r0, ror #1
   27d10:	andeq	r8, r2, r4, ror r0
   27d14:	andeq	r8, r2, r4, ror r0
   27d18:	strdeq	r7, [r2], -r0
   27d1c:	strdeq	r7, [r2], -r0
   27d20:	andeq	r8, r2, r4, ror r0
   27d24:	andeq	r8, r2, r0, ror #1
   27d28:	andeq	r8, r2, r0, ror #1
   27d2c:	andeq	r8, r2, r0, ror #1
   27d30:	andeq	r7, r2, r4, ror pc
   27d34:	ldr	r6, [sp, #64]	; 0x40
   27d38:	ldr	r2, [sp, #60]	; 0x3c
   27d3c:	ldr	r0, [sp, #84]	; 0x54
   27d40:	add	r2, r2, r3
   27d44:	ldr	r1, [sp, #124]	; 0x7c
   27d48:	ldrb	r2, [r2, r0]
   27d4c:	ldrb	r2, [r1, r2]
   27d50:	strb	r2, [r6, r3]
   27d54:	add	r3, r3, #1
   27d58:	cmp	ip, r3
   27d5c:	bne	27d34 <__assert_fail@plt+0x16394>
   27d60:	b	27aa4 <__assert_fail@plt+0x16104>
   27d64:	ldr	r1, [r7, #16]
   27d68:	ldr	r3, [r6, #12]
   27d6c:	ldr	r5, [r1, #28]
   27d70:	str	r5, [r3, r2, lsl #2]
   27d74:	ldrb	r3, [r7, #24]
   27d78:	cmp	r3, #4
   27d7c:	bne	27f74 <__assert_fail@plt+0x165d4>
   27d80:	ldr	r3, [r6, #20]
   27d84:	add	r2, r2, r2, lsl #1
   27d88:	mov	r1, #1
   27d8c:	add	sl, r3, r2, lsl #2
   27d90:	str	r1, [r3, r2, lsl #2]
   27d94:	mov	r0, #4
   27d98:	str	r1, [sl, #4]
   27d9c:	bl	1ba3c <__assert_fail@plt+0xa09c>
   27da0:	cmp	r0, #0
   27da4:	str	r0, [sl, #8]
   27da8:	bne	280a8 <__assert_fail@plt+0x16708>
   27dac:	mov	r3, #12
   27db0:	str	r0, [sl, #4]
   27db4:	str	r0, [sl]
   27db8:	str	r3, [sp, #36]	; 0x24
   27dbc:	b	279fc <__assert_fail@plt+0x1605c>
   27dc0:	mov	r3, #12
   27dc4:	str	r3, [sp, #36]	; 0x24
   27dc8:	mov	r0, r4
   27dcc:	bl	1ce68 <__assert_fail@plt+0xb4c8>
   27dd0:	mov	r3, #0
   27dd4:	ldr	r0, [sp, #36]	; 0x24
   27dd8:	str	r3, [r8]
   27ddc:	str	r3, [r8, #4]
   27de0:	add	sp, sp, #148	; 0x94
   27de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27de8:	ldrb	r3, [r8, #28]
   27dec:	tst	r3, #16
   27df0:	bne	27e00 <__assert_fail@plt+0x16460>
   27df4:	ldr	r3, [r8, #24]
   27df8:	cmp	r3, #0
   27dfc:	bne	28470 <__assert_fail@plt+0x16ad0>
   27e00:	ldr	r3, [r6, #76]	; 0x4c
   27e04:	cmp	r3, #0
   27e08:	beq	28178 <__assert_fail@plt+0x167d8>
   27e0c:	add	r0, r0, r0, lsl #1
   27e10:	lsl	r0, r0, #2
   27e14:	bl	1ba3c <__assert_fail@plt+0xa09c>
   27e18:	cmp	r0, #0
   27e1c:	str	r0, [r6, #28]
   27e20:	beq	27ee4 <__assert_fail@plt+0x16544>
   27e24:	ldr	r3, [r6, #8]
   27e28:	cmp	r3, #0
   27e2c:	beq	28178 <__assert_fail@plt+0x167d8>
   27e30:	mov	r3, #0
   27e34:	mov	r2, r0
   27e38:	mov	r1, r3
   27e3c:	mov	r0, r3
   27e40:	b	27e48 <__assert_fail@plt+0x164a8>
   27e44:	ldr	r2, [r6, #28]
   27e48:	add	ip, r2, r3
   27e4c:	str	r1, [r2, r3]
   27e50:	str	r1, [ip, #4]
   27e54:	str	r1, [ip, #8]
   27e58:	ldr	r2, [r6, #8]
   27e5c:	add	r0, r0, #1
   27e60:	cmp	r0, r2
   27e64:	add	r3, r3, #12
   27e68:	bcc	27e44 <__assert_fail@plt+0x164a4>
   27e6c:	cmp	r2, #0
   27e70:	beq	28178 <__assert_fail@plt+0x167d8>
   27e74:	mov	r5, #0
   27e78:	ldr	r3, [r6, #24]
   27e7c:	str	r4, [sp, #12]
   27e80:	mov	sl, r5
   27e84:	mov	r4, r6
   27e88:	mov	ip, r2
   27e8c:	add	r1, r3, r5
   27e90:	ldmib	r1, {r0, r6}
   27e94:	cmp	r0, #0
   27e98:	subgt	r6, r6, #4
   27e9c:	movgt	r7, #0
   27ea0:	bgt	27ec0 <__assert_fail@plt+0x16520>
   27ea4:	b	28164 <__assert_fail@plt+0x167c4>
   27ea8:	ldr	r3, [r4, #24]
   27eac:	add	r7, r7, #1
   27eb0:	add	r2, r3, r5
   27eb4:	ldr	r2, [r2, #4]
   27eb8:	cmp	r7, r2
   27ebc:	bge	28160 <__assert_fail@plt+0x167c0>
   27ec0:	ldr	r3, [r6, #4]!
   27ec4:	ldr	r0, [r4, #28]
   27ec8:	mov	r1, sl
   27ecc:	add	r3, r3, r3, lsl #1
   27ed0:	add	r0, r0, r3, lsl #2
   27ed4:	bl	1c114 <__assert_fail@plt+0xa774>
   27ed8:	cmp	r0, #0
   27edc:	bne	27ea8 <__assert_fail@plt+0x16508>
   27ee0:	ldr	r4, [sp, #12]
   27ee4:	mov	r3, #12
   27ee8:	str	r3, [sp, #36]	; 0x24
   27eec:	b	279fc <__assert_fail@plt+0x1605c>
   27ef0:	ldrb	r3, [r6, #88]	; 0x58
   27ef4:	ldr	r5, [r6, #20]
   27ef8:	add	r2, r2, r2, lsl #1
   27efc:	orr	r3, r3, #1
   27f00:	strb	r3, [r6, #88]	; 0x58
   27f04:	ldr	r3, [r7, #4]
   27f08:	mov	r0, #8
   27f0c:	cmp	r3, #0
   27f10:	ldrne	r3, [r3, #12]
   27f14:	ldreq	r3, [r7, #16]
   27f18:	ldr	r9, [r3, #28]
   27f1c:	ldr	r3, [r7, #8]
   27f20:	cmp	r3, #0
   27f24:	ldrne	r3, [r3, #12]
   27f28:	ldreq	r3, [r7, #16]
   27f2c:	ldr	sl, [r3, #28]
   27f30:	mov	r3, #2
   27f34:	str	r3, [r5, r2, lsl #2]
   27f38:	add	r5, r5, r2, lsl r3
   27f3c:	bl	1ba3c <__assert_fail@plt+0xa09c>
   27f40:	cmp	r0, #0
   27f44:	str	r0, [r5, #8]
   27f48:	beq	27ee4 <__assert_fail@plt+0x16544>
   27f4c:	cmp	r9, sl
   27f50:	moveq	r3, #1
   27f54:	streq	r3, [r5, #4]
   27f58:	streq	r9, [r0]
   27f5c:	beq	27f74 <__assert_fail@plt+0x165d4>
   27f60:	mov	r3, #2
   27f64:	str	r3, [r5, #4]
   27f68:	stmlt	r0, {r9, sl}
   27f6c:	strge	sl, [r0]
   27f70:	strge	r9, [r0, #4]
   27f74:	ldr	r3, [r7, #4]
   27f78:	cmp	r3, #0
   27f7c:	ldreq	r2, [sp, #20]
   27f80:	beq	27f90 <__assert_fail@plt+0x165f0>
   27f84:	mov	r7, r3
   27f88:	b	27ce0 <__assert_fail@plt+0x16340>
   27f8c:	mov	r7, r5
   27f90:	ldr	r3, [r7, #8]
   27f94:	cmp	r3, #0
   27f98:	cmpne	r3, r2
   27f9c:	moveq	sl, #1
   27fa0:	movne	sl, #0
   27fa4:	bne	27f84 <__assert_fail@plt+0x165e4>
   27fa8:	ldr	r5, [r7]
   27fac:	mov	r2, r7
   27fb0:	cmp	r5, #0
   27fb4:	bne	27f8c <__assert_fail@plt+0x165ec>
   27fb8:	ldr	r9, [sp, #12]
   27fbc:	ldr	r3, [r6, #24]
   27fc0:	add	r7, r5, r5, lsl #1
   27fc4:	lsl	r7, r7, #2
   27fc8:	add	r2, r3, r7
   27fcc:	ldr	r2, [r2, #4]
   27fd0:	cmp	r2, #0
   27fd4:	beq	280f4 <__assert_fail@plt+0x16754>
   27fd8:	ldr	r0, [r6, #8]
   27fdc:	add	r5, r5, #1
   27fe0:	cmp	r0, r5
   27fe4:	bne	27fc0 <__assert_fail@plt+0x16620>
   27fe8:	cmp	r9, #0
   27fec:	beq	27de8 <__assert_fail@plt+0x16448>
   27ff0:	ldr	r9, [sp, #12]
   27ff4:	mov	r5, #0
   27ff8:	b	27fc0 <__assert_fail@plt+0x16620>
   27ffc:	mov	r1, #1
   28000:	mov	r0, #32
   28004:	bl	1b6c8 <__assert_fail@plt+0x9d28>
   28008:	cmp	r0, #0
   2800c:	str	r0, [r4, #60]	; 0x3c
   28010:	beq	27dc0 <__assert_fail@plt+0x16420>
   28014:	mov	fp, #1
   28018:	lsl	r9, r6, #3
   2801c:	mov	sl, #0
   28020:	mov	r0, r9
   28024:	bl	1182c <btowc@plt>
   28028:	cmn	r0, #1
   2802c:	ldrne	r2, [r4, #60]	; 0x3c
   28030:	ldrne	r3, [r2, r6]
   28034:	orrne	r3, r3, fp, lsl sl
   28038:	strne	r3, [r2, r6]
   2803c:	bics	r3, r9, #127	; 0x7f
   28040:	bne	28054 <__assert_fail@plt+0x166b4>
   28044:	cmp	r0, r9
   28048:	ldrbne	r3, [r4, #88]	; 0x58
   2804c:	orrne	r3, r3, #8
   28050:	strbne	r3, [r4, #88]	; 0x58
   28054:	add	sl, sl, #1
   28058:	cmp	sl, #32
   2805c:	add	r9, r9, #1
   28060:	bne	28020 <__assert_fail@plt+0x16680>
   28064:	add	r6, r6, #4
   28068:	cmp	r6, #32
   2806c:	bne	28018 <__assert_fail@plt+0x16678>
   28070:	b	27874 <__assert_fail@plt+0x15ed4>
   28074:	ldr	r1, [r7, #16]
   28078:	ldr	r3, [r6, #20]
   2807c:	add	r2, r2, r2, lsl #1
   28080:	ldr	r5, [r1, #28]
   28084:	add	r9, r3, r2, lsl #2
   28088:	mov	r1, #1
   2808c:	str	r1, [r3, r2, lsl #2]
   28090:	mov	r0, #4
   28094:	str	r1, [r9, #4]
   28098:	bl	1ba3c <__assert_fail@plt+0xa09c>
   2809c:	cmp	r0, #0
   280a0:	str	r0, [r9, #8]
   280a4:	beq	284b8 <__assert_fail@plt+0x16b18>
   280a8:	str	r5, [r0]
   280ac:	b	27f74 <__assert_fail@plt+0x165d4>
   280b0:	ldrb	r3, [r0, #3]
   280b4:	ldr	r1, [pc, #1420]	; 28648 <__assert_fail@plt+0x16ca8>
   280b8:	cmp	r3, #45	; 0x2d
   280bc:	moveq	r3, #4
   280c0:	movne	r3, #3
   280c4:	add	r0, r0, r3
   280c8:	bl	11544 <strcmp@plt>
   280cc:	cmp	r0, #0
   280d0:	ldrbeq	r3, [r4, #88]	; 0x58
   280d4:	orreq	r3, r3, #4
   280d8:	strbeq	r3, [r4, #88]	; 0x58
   280dc:	b	27848 <__assert_fail@plt+0x15ea8>
   280e0:	ldr	r1, [r7, #16]
   280e4:	ldr	r3, [r6, #12]
   280e8:	ldr	r1, [r1, #28]
   280ec:	str	r1, [r3, r2, lsl #2]
   280f0:	b	27f74 <__assert_fail@plt+0x165d4>
   280f4:	mov	r3, #1
   280f8:	mov	r2, r5
   280fc:	mov	r1, r6
   28100:	mov	r0, fp
   28104:	bl	1ed68 <__assert_fail@plt+0xd3c8>
   28108:	cmp	r0, #0
   2810c:	bne	2836c <__assert_fail@plt+0x169cc>
   28110:	ldr	r3, [r6, #24]
   28114:	add	r7, r3, r7
   28118:	ldr	r7, [r7, #4]
   2811c:	cmp	r7, #0
   28120:	bne	27fd8 <__assert_fail@plt+0x16638>
   28124:	ldr	r0, [sp, #56]	; 0x38
   28128:	bl	1b944 <__assert_fail@plt+0x9fa4>
   2812c:	ldr	r3, [r6, #8]
   28130:	add	r5, r5, #1
   28134:	cmp	r3, r5
   28138:	movne	r9, sl
   2813c:	beq	28148 <__assert_fail@plt+0x167a8>
   28140:	ldr	r3, [r6, #24]
   28144:	b	27fc0 <__assert_fail@plt+0x16620>
   28148:	mov	r5, r7
   2814c:	ldr	r9, [sp, #12]
   28150:	b	28140 <__assert_fail@plt+0x167a0>
   28154:	add	r0, sp, #60	; 0x3c
   28158:	bl	1c280 <__assert_fail@plt+0xa8e0>
   2815c:	b	27aac <__assert_fail@plt+0x1610c>
   28160:	ldr	ip, [r4, #8]
   28164:	add	sl, sl, #1
   28168:	cmp	sl, ip
   2816c:	add	r5, r5, #12
   28170:	bcc	27e8c <__assert_fail@plt+0x164ec>
   28174:	ldr	r4, [sp, #12]
   28178:	ldrb	r2, [r4, #88]	; 0x58
   2817c:	ldr	r3, [sp, #16]
   28180:	clz	r3, r3
   28184:	lsr	r3, r3, #5
   28188:	mov	r1, #0
   2818c:	ands	r3, r3, r2, lsr #2
   28190:	str	r1, [sp, #36]	; 0x24
   28194:	beq	281a4 <__assert_fail@plt+0x16804>
   28198:	ldr	r2, [r8, #20]
   2819c:	cmp	r2, #0
   281a0:	beq	284c8 <__assert_fail@plt+0x16b28>
   281a4:	ldr	r3, [r4, #52]	; 0x34
   281a8:	ldr	r1, [r4, #24]
   281ac:	mov	r0, fp
   281b0:	ldr	r3, [r3, #12]
   281b4:	ldr	r3, [r3, #28]
   281b8:	str	r3, [r4, #72]	; 0x48
   281bc:	add	r3, r3, r3, lsl #1
   281c0:	add	r1, r1, r3, lsl #2
   281c4:	bl	1dfcc <__assert_fail@plt+0xc62c>
   281c8:	cmp	r0, #0
   281cc:	mov	r6, r0
   281d0:	str	r0, [sp, #40]	; 0x28
   281d4:	bne	282fc <__assert_fail@plt+0x1695c>
   281d8:	ldr	r3, [r4, #76]	; 0x4c
   281dc:	cmp	r3, #0
   281e0:	ble	282bc <__assert_fail@plt+0x1691c>
   281e4:	ldr	r5, [sp, #52]	; 0x34
   281e8:	cmp	r5, #0
   281ec:	ble	282bc <__assert_fail@plt+0x1691c>
   281f0:	mov	r7, r0
   281f4:	b	28204 <__assert_fail@plt+0x16864>
   281f8:	add	r7, r7, #1
   281fc:	cmp	r7, r5
   28200:	bge	282bc <__assert_fail@plt+0x1691c>
   28204:	ldr	r2, [sp, #56]	; 0x38
   28208:	ldr	ip, [r4]
   2820c:	ldr	r9, [r2, r7, lsl #2]
   28210:	add	lr, ip, r9, lsl #3
   28214:	ldrb	r3, [lr, #4]
   28218:	cmp	r3, #4
   2821c:	bne	281f8 <__assert_fail@plt+0x16858>
   28220:	cmp	r5, #0
   28224:	ble	28364 <__assert_fail@plt+0x169c4>
   28228:	sub	r2, r2, #4
   2822c:	mov	r3, #0
   28230:	b	28240 <__assert_fail@plt+0x168a0>
   28234:	add	r3, r3, #1
   28238:	cmp	r5, r3
   2823c:	beq	281f8 <__assert_fail@plt+0x16858>
   28240:	ldr	r1, [r2, #4]!
   28244:	add	r0, ip, r1, lsl #3
   28248:	ldrb	r0, [r0, #4]
   2824c:	cmp	r0, #9
   28250:	bne	28234 <__assert_fail@plt+0x16894>
   28254:	ldr	r0, [ip, r1, lsl #3]
   28258:	ldr	r1, [lr]
   2825c:	cmp	r0, r1
   28260:	bne	28234 <__assert_fail@plt+0x16894>
   28264:	ldr	r3, [r4, #20]
   28268:	add	r9, r9, r9, lsl #1
   2826c:	add	r1, sp, #56	; 0x38
   28270:	add	r9, r3, r9, lsl #2
   28274:	mov	r0, r5
   28278:	ldr	r3, [r9, #8]
   2827c:	ldr	r9, [r3]
   28280:	mov	r2, r9
   28284:	bl	1d674 <__assert_fail@plt+0xbcd4>
   28288:	cmp	r0, #0
   2828c:	bne	281f8 <__assert_fail@plt+0x16858>
   28290:	ldr	r1, [r4, #24]
   28294:	add	r9, r9, r9, lsl #1
   28298:	mov	r0, fp
   2829c:	add	r1, r1, r9, lsl #2
   282a0:	bl	1ebe0 <__assert_fail@plt+0xd240>
   282a4:	cmp	r0, #0
   282a8:	bne	284b0 <__assert_fail@plt+0x16b10>
   282ac:	ldr	r5, [sp, #52]	; 0x34
   282b0:	mov	r7, #1
   282b4:	cmp	r7, r5
   282b8:	blt	28204 <__assert_fail@plt+0x16864>
   282bc:	mov	r3, #0
   282c0:	mov	r2, fp
   282c4:	mov	r1, r4
   282c8:	add	r0, sp, #40	; 0x28
   282cc:	bl	1e190 <__assert_fail@plt+0xc7f0>
   282d0:	cmp	r0, #0
   282d4:	str	r0, [r4, #36]	; 0x24
   282d8:	beq	28418 <__assert_fail@plt+0x16a78>
   282dc:	ldrsb	r3, [r0, #52]	; 0x34
   282e0:	cmp	r3, #0
   282e4:	strge	r0, [r4, #48]	; 0x30
   282e8:	strge	r0, [r4, #44]	; 0x2c
   282ec:	strge	r0, [r4, #40]	; 0x28
   282f0:	blt	283b4 <__assert_fail@plt+0x16a14>
   282f4:	ldr	r0, [sp, #56]	; 0x38
   282f8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   282fc:	ldr	r7, [r8]
   28300:	str	r6, [sp, #36]	; 0x24
   28304:	ldr	r0, [r7, #56]	; 0x38
   28308:	cmp	r0, #0
   2830c:	beq	28320 <__assert_fail@plt+0x16980>
   28310:	ldr	r5, [r0]
   28314:	bl	1b944 <__assert_fail@plt+0x9fa4>
   28318:	subs	r0, r5, #0
   2831c:	bne	28310 <__assert_fail@plt+0x16970>
   28320:	mov	r5, #0
   28324:	mov	r3, #31
   28328:	str	r3, [r7, #64]	; 0x40
   2832c:	ldr	r0, [r7, #16]
   28330:	str	r5, [r7, #56]	; 0x38
   28334:	str	r5, [r7, #52]	; 0x34
   28338:	bl	1b944 <__assert_fail@plt+0x9fa4>
   2833c:	add	r0, sp, #60	; 0x3c
   28340:	str	r5, [r7, #16]
   28344:	bl	1ce38 <__assert_fail@plt+0xb498>
   28348:	ldr	r0, [sp, #36]	; 0x24
   2834c:	cmp	r0, r5
   28350:	beq	27a70 <__assert_fail@plt+0x160d0>
   28354:	ldr	r3, [sp, #24]
   28358:	cmp	r3, #0
   2835c:	bne	27a50 <__assert_fail@plt+0x160b0>
   28360:	b	27a58 <__assert_fail@plt+0x160b8>
   28364:	bne	28264 <__assert_fail@plt+0x168c4>
   28368:	b	281f8 <__assert_fail@plt+0x16858>
   2836c:	mov	r3, r0
   28370:	str	r3, [sp, #36]	; 0x24
   28374:	b	279fc <__assert_fail@plt+0x1605c>
   28378:	mov	r3, #12
   2837c:	str	r3, [sp, #36]	; 0x24
   28380:	b	279fc <__assert_fail@plt+0x1605c>
   28384:	mov	r0, r4
   28388:	mov	r1, #160	; 0xa0
   2838c:	bl	1babc <__assert_fail@plt+0xa11c>
   28390:	subs	r4, r0, #0
   28394:	beq	284a8 <__assert_fail@plt+0x16b08>
   28398:	mov	r3, #160	; 0xa0
   2839c:	str	r4, [r8]
   283a0:	str	r3, [r8, #4]
   283a4:	b	2779c <__assert_fail@plt+0x15dfc>
   283a8:	mov	r3, #0
   283ac:	str	r3, [r4, #52]	; 0x34
   283b0:	b	279fc <__assert_fail@plt+0x1605c>
   283b4:	mov	r3, #1
   283b8:	mov	r2, fp
   283bc:	mov	r1, r4
   283c0:	add	r0, sp, #40	; 0x28
   283c4:	bl	1e190 <__assert_fail@plt+0xc7f0>
   283c8:	mov	r3, #2
   283cc:	mov	r2, fp
   283d0:	mov	r1, r4
   283d4:	str	r0, [r4, #40]	; 0x28
   283d8:	add	r0, sp, #40	; 0x28
   283dc:	bl	1e190 <__assert_fail@plt+0xc7f0>
   283e0:	mov	r3, #6
   283e4:	mov	r2, fp
   283e8:	mov	r1, r4
   283ec:	str	r0, [r4, #44]	; 0x2c
   283f0:	add	r0, sp, #40	; 0x28
   283f4:	bl	1e190 <__assert_fail@plt+0xc7f0>
   283f8:	ldr	r3, [r4, #40]	; 0x28
   283fc:	cmp	r3, #0
   28400:	str	r0, [r4, #48]	; 0x30
   28404:	beq	28418 <__assert_fail@plt+0x16a78>
   28408:	ldr	r3, [r4, #44]	; 0x2c
   2840c:	cmp	r0, #0
   28410:	cmpne	r3, #0
   28414:	bne	282f4 <__assert_fail@plt+0x16954>
   28418:	ldr	r6, [sp, #40]	; 0x28
   2841c:	b	282fc <__assert_fail@plt+0x1695c>
   28420:	mov	sl, r5
   28424:	mov	r1, #1
   28428:	b	277f8 <__assert_fail@plt+0x15e58>
   2842c:	cmp	r7, #0
   28430:	beq	283a8 <__assert_fail@plt+0x16a08>
   28434:	add	fp, sp, #48	; 0x30
   28438:	add	r9, r5, #56	; 0x38
   2843c:	add	r5, r5, #64	; 0x40
   28440:	str	fp, [sp]
   28444:	mov	ip, #2
   28448:	str	r6, [fp, #4]
   2844c:	mov	r3, r6
   28450:	mov	r2, r6
   28454:	mov	r1, r5
   28458:	mov	r0, r9
   2845c:	str	r6, [sp, #48]	; 0x30
   28460:	strb	ip, [sp, #52]	; 0x34
   28464:	bl	1db54 <__assert_fail@plt+0xc1b4>
   28468:	mov	r6, r0
   2846c:	b	27b48 <__assert_fail@plt+0x161a8>
   28470:	ldrb	r3, [r6, #88]	; 0x58
   28474:	tst	r3, #1
   28478:	bne	27e0c <__assert_fail@plt+0x1646c>
   2847c:	b	27e00 <__assert_fail@plt+0x16460>
   28480:	ldr	r0, [r6, #132]	; 0x84
   28484:	bl	1b944 <__assert_fail@plt+0x9fa4>
   28488:	mov	r3, #0
   2848c:	str	r3, [r6, #132]	; 0x84
   28490:	b	27c98 <__assert_fail@plt+0x162f8>
   28494:	ldr	r3, [sp, #96]	; 0x60
   28498:	b	27aa4 <__assert_fail@plt+0x16104>
   2849c:	add	r0, sp, #60	; 0x3c
   284a0:	bl	1c998 <__assert_fail@plt+0xaff8>
   284a4:	b	27aac <__assert_fail@plt+0x1610c>
   284a8:	mov	r0, #12
   284ac:	b	27a70 <__assert_fail@plt+0x160d0>
   284b0:	mov	r6, r0
   284b4:	b	282fc <__assert_fail@plt+0x1695c>
   284b8:	str	r0, [r9, #4]
   284bc:	str	r0, [r9]
   284c0:	mov	r3, #12
   284c4:	b	27db8 <__assert_fail@plt+0x16418>
   284c8:	ldr	r7, [r4, #8]
   284cc:	cmp	r7, #0
   284d0:	beq	285f8 <__assert_fail@plt+0x16c58>
   284d4:	ldr	r1, [r4]
   284d8:	mov	lr, r9
   284dc:	mov	r0, r1
   284e0:	mov	r5, r1
   284e4:	ldrb	ip, [r5, #4]
   284e8:	sub	ip, ip, #1
   284ec:	cmp	ip, #11
   284f0:	ldrls	pc, [pc, ip, lsl #2]
   284f4:	b	28594 <__assert_fail@plt+0x16bf4>
   284f8:	andeq	r8, r2, r8, lsr #10
   284fc:	andeq	r8, r2, r4, lsr r5
   28500:	andeq	r8, r2, r4, asr #11
   28504:	andeq	r8, r2, r4, lsr r5
   28508:			; <UNDEFINED> instruction: 0x000285bc
   2850c:	andeq	r8, r2, r4, lsr #3
   28510:	muleq	r2, r4, r5
   28514:	andeq	r8, r2, r4, lsr r5
   28518:	andeq	r8, r2, r4, lsr r5
   2851c:	andeq	r8, r2, r4, lsr r5
   28520:	andeq	r8, r2, r4, lsr r5
   28524:	muleq	r2, r8, r5
   28528:	ldrb	ip, [r1, r2, lsl #3]
   2852c:	lsrs	ip, ip, #7
   28530:	movne	r9, r3
   28534:	add	r2, r2, #1
   28538:	cmp	r2, r7
   2853c:	add	r5, r5, #8
   28540:	bne	284e4 <__assert_fail@plt+0x16b44>
   28544:	orr	r9, r9, lr
   28548:	ands	r9, r9, #255	; 0xff
   2854c:	beq	285f8 <__assert_fail@plt+0x16c58>
   28550:	add	r2, r1, r2, lsl #3
   28554:	mov	r1, #7
   28558:	b	28570 <__assert_fail@plt+0x16bd0>
   2855c:	cmp	r3, #5
   28560:	strbeq	r1, [r0, #4]
   28564:	add	r0, r0, #8
   28568:	cmp	r0, r2
   2856c:	beq	285f4 <__assert_fail@plt+0x16c54>
   28570:	ldrb	r3, [r0, #4]
   28574:	cmp	r3, #1
   28578:	bne	2855c <__assert_fail@plt+0x16bbc>
   2857c:	ldrsb	r3, [r0]
   28580:	cmp	r3, #0
   28584:	ldrblt	r3, [r0, #6]
   28588:	biclt	r3, r3, #32
   2858c:	strblt	r3, [r0, #6]
   28590:	b	28564 <__assert_fail@plt+0x16bc4>
   28594:	bl	11964 <abort@plt>
   28598:	ldr	ip, [r1, r2, lsl #3]
   2859c:	cmp	ip, #32
   285a0:	beq	28534 <__assert_fail@plt+0x16b94>
   285a4:	bls	285e8 <__assert_fail@plt+0x16c48>
   285a8:	cmp	ip, #64	; 0x40
   285ac:	beq	28534 <__assert_fail@plt+0x16b94>
   285b0:	cmp	ip, #128	; 0x80
   285b4:	beq	28534 <__assert_fail@plt+0x16b94>
   285b8:	b	281a4 <__assert_fail@plt+0x16804>
   285bc:	mov	lr, r3
   285c0:	b	28534 <__assert_fail@plt+0x16b94>
   285c4:	ldr	ip, [r1, r2, lsl #3]
   285c8:	add	r6, ip, #12
   285cc:	add	ip, ip, #28
   285d0:	ldr	sl, [r6, #4]!
   285d4:	cmp	sl, #0
   285d8:	bne	281a4 <__assert_fail@plt+0x16804>
   285dc:	cmp	r6, ip
   285e0:	bne	285d0 <__assert_fail@plt+0x16c30>
   285e4:	b	28534 <__assert_fail@plt+0x16b94>
   285e8:	cmp	ip, #16
   285ec:	beq	28534 <__assert_fail@plt+0x16b94>
   285f0:	b	281a4 <__assert_fail@plt+0x16804>
   285f4:	mov	r9, lr
   285f8:	ldr	r2, [r4, #76]	; 0x4c
   285fc:	ldrb	r3, [r4, #88]	; 0x58
   28600:	cmp	r2, #0
   28604:	movle	r2, r9
   28608:	orrgt	r2, r9, #1
   2860c:	and	r2, r2, #1
   28610:	and	r3, r3, #249	; 0xf9
   28614:	orr	r3, r3, r2, lsl #1
   28618:	mov	r2, #1
   2861c:	strb	r3, [r4, #88]	; 0x58
   28620:	str	r2, [r4, #92]	; 0x5c
   28624:	b	281a4 <__assert_fail@plt+0x16804>
   28628:	beq	fead30d4 <optarg@@GLIBC_2.4+0xfea94eb4>
   2862c:	andeq	ip, r2, ip, lsr #28
	...
   28638:	andeq	sp, r1, r4, lsr r8
   2863c:	andeq	sp, r1, r8, lsr pc
   28640:	andeq	lr, r1, r4, asr #22
   28644:	ldrdeq	sp, [r1], -r8
   28648:	andeq	sp, r2, ip, rrx
   2864c:	ldr	r3, [pc, #96]	; 286b4 <__assert_fail@plt+0x16d14>
   28650:	push	{r4, lr}
   28654:	mov	lr, r2
   28658:	ldr	r3, [r3]
   2865c:	ldrb	ip, [lr, #28]
   28660:	mov	r2, r1
   28664:	mov	r1, r0
   28668:	lsr	r0, r3, #21
   2866c:	and	r4, r0, #16
   28670:	and	r0, ip, #239	; 0xef
   28674:	orr	r0, r0, r4
   28678:	orr	r0, r0, #128	; 0x80
   2867c:	strb	r0, [lr, #28]
   28680:	mov	r0, lr
   28684:	bl	27754 <__assert_fail@plt+0x15db4>
   28688:	subs	r3, r0, #0
   2868c:	popeq	{r4, pc}
   28690:	ldr	r1, [pc, #32]	; 286b8 <__assert_fail@plt+0x16d18>
   28694:	mov	r2, #5
   28698:	add	r3, r1, r3, lsl #2
   2869c:	add	r1, r1, #32
   286a0:	ldr	r3, [r3, #416]	; 0x1a0
   286a4:	mov	r0, #0
   286a8:	add	r1, r1, r3
   286ac:	pop	{r4, lr}
   286b0:	b	11628 <dcgettext@plt>
   286b4:	ldrdeq	lr, [r3], -r8
   286b8:	andeq	ip, r2, ip, lsr #28
   286bc:	ldr	r3, [pc, #12]	; 286d0 <__assert_fail@plt+0x16d30>
   286c0:	ldr	r2, [r3]
   286c4:	str	r0, [r3]
   286c8:	mov	r0, r2
   286cc:	bx	lr
   286d0:	ldrdeq	lr, [r3], -r8
   286d4:	push	{r4, r5, r6, lr}
   286d8:	mov	r2, #256	; 0x100
   286dc:	ldr	r5, [r0]
   286e0:	ldr	r6, [r0, #16]
   286e4:	mov	r4, r0
   286e8:	mov	r1, #0
   286ec:	mov	r0, r6
   286f0:	bl	11814 <memset@plt>
   286f4:	ldr	r1, [r5, #36]	; 0x24
   286f8:	mov	r3, r6
   286fc:	add	r2, r1, #12
   28700:	mov	r0, r4
   28704:	add	r1, r1, #8
   28708:	bl	2160c <__assert_fail@plt+0xfc6c>
   2870c:	ldr	r0, [r5, #40]	; 0x28
   28710:	ldr	r3, [r5, #36]	; 0x24
   28714:	cmp	r3, r0
   28718:	beq	28734 <__assert_fail@plt+0x16d94>
   2871c:	add	r2, r0, #12
   28720:	add	r1, r0, #8
   28724:	mov	r3, r6
   28728:	mov	r0, r4
   2872c:	bl	2160c <__assert_fail@plt+0xfc6c>
   28730:	ldr	r0, [r5, #36]	; 0x24
   28734:	ldr	r1, [r5, #44]	; 0x2c
   28738:	cmp	r1, r0
   2873c:	beq	28758 <__assert_fail@plt+0x16db8>
   28740:	add	r2, r1, #12
   28744:	mov	r0, r4
   28748:	mov	r3, r6
   2874c:	add	r1, r1, #8
   28750:	bl	2160c <__assert_fail@plt+0xfc6c>
   28754:	ldr	r0, [r5, #36]	; 0x24
   28758:	ldr	r1, [r5, #48]	; 0x30
   2875c:	cmp	r1, r0
   28760:	beq	28778 <__assert_fail@plt+0x16dd8>
   28764:	add	r2, r1, #12
   28768:	mov	r3, r6
   2876c:	add	r1, r1, #8
   28770:	mov	r0, r4
   28774:	bl	2160c <__assert_fail@plt+0xfc6c>
   28778:	ldrb	r3, [r4, #28]
   2877c:	mov	r0, #0
   28780:	orr	r3, r3, #8
   28784:	strb	r3, [r4, #28]
   28788:	pop	{r4, r5, r6, pc}
   2878c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28790:	cmp	r3, r2
   28794:	mov	r5, r3
   28798:	sub	sp, sp, #52	; 0x34
   2879c:	movle	r3, #0
   287a0:	movgt	r3, #1
   287a4:	orrs	r3, r3, r5, lsr #31
   287a8:	ldrb	r3, [sp, #100]	; 0x64
   287ac:	ldr	ip, [sp, #88]	; 0x58
   287b0:	ldr	sl, [r0]
   287b4:	add	r8, r5, ip
   287b8:	ldr	r7, [sp, #96]	; 0x60
   287bc:	str	r3, [sp, #32]
   287c0:	bne	28a68 <__assert_fail@plt+0x170c8>
   287c4:	cmp	r8, r2
   287c8:	bgt	28a60 <__assert_fail@plt+0x170c0>
   287cc:	cmp	ip, #0
   287d0:	cmpge	r5, r8
   287d4:	movgt	lr, #1
   287d8:	movle	lr, #0
   287dc:	bgt	28a60 <__assert_fail@plt+0x170c0>
   287e0:	cmp	r8, #0
   287e4:	blt	28af4 <__assert_fail@plt+0x17154>
   287e8:	cmp	r5, r8
   287ec:	movgt	lr, #0
   287f0:	movle	lr, #1
   287f4:	ands	r3, lr, ip, lsr #31
   287f8:	movne	r8, #0
   287fc:	ldr	lr, [pc, #796]	; 28b20 <__assert_fail@plt+0x17180>
   28800:	ldr	r4, [pc, #796]	; 28b24 <__assert_fail@plt+0x17184>
   28804:	cmp	lr, #0
   28808:	mov	ip, #1
   2880c:	moveq	ip, lr
   28810:	cmp	r4, #0
   28814:	mov	lr, #1
   28818:	moveq	lr, r4
   2881c:	str	r2, [sp, #40]	; 0x28
   28820:	orr	r2, ip, lr
   28824:	ands	r3, r2, #255	; 0xff
   28828:	str	r1, [sp, #44]	; 0x2c
   2882c:	mov	r6, r0
   28830:	str	r3, [sp, #28]
   28834:	beq	28840 <__assert_fail@plt+0x16ea0>
   28838:	add	r0, sl, #136	; 0x88
   2883c:	bl	115a4 <pthread_mutex_lock@plt>
   28840:	ldrb	r2, [r6, #28]
   28844:	cmp	r8, r5
   28848:	lsr	fp, r2, #5
   2884c:	and	r3, fp, #3
   28850:	str	r3, [sp, #36]	; 0x24
   28854:	bgt	28908 <__assert_fail@plt+0x16f68>
   28858:	lsr	r1, r2, #4
   2885c:	and	r1, r1, #1
   28860:	cmp	r7, #0
   28864:	orreq	r1, r1, #1
   28868:	cmp	r1, #0
   2886c:	bne	28afc <__assert_fail@plt+0x1715c>
   28870:	and	r2, r2, #6
   28874:	cmp	r2, #4
   28878:	ldrne	r0, [r6, #24]
   2887c:	beq	28ac4 <__assert_fail@plt+0x17124>
   28880:	add	fp, r0, #1
   28884:	mov	r4, fp
   28888:	lsl	r0, fp, #3
   2888c:	bl	1ba3c <__assert_fail@plt+0xa09c>
   28890:	subs	r9, r0, #0
   28894:	beq	28a78 <__assert_fail@plt+0x170d8>
   28898:	ldr	r3, [sp, #36]	; 0x24
   2889c:	str	r9, [sp, #12]
   288a0:	str	r3, [sp, #16]
   288a4:	ldr	r3, [sp, #92]	; 0x5c
   288a8:	str	fp, [sp, #8]
   288ac:	str	r3, [sp, #4]
   288b0:	str	r8, [sp]
   288b4:	ldr	r2, [sp, #40]	; 0x28
   288b8:	ldr	r1, [sp, #44]	; 0x2c
   288bc:	mov	r3, r5
   288c0:	mov	r0, r6
   288c4:	bl	23038 <__assert_fail@plt+0x11698>
   288c8:	cmp	r0, #0
   288cc:	beq	2892c <__assert_fail@plt+0x16f8c>
   288d0:	cmp	r0, #1
   288d4:	mvneq	r5, #0
   288d8:	beq	288e0 <__assert_fail@plt+0x16f40>
   288dc:	mvn	r5, #1
   288e0:	mov	r0, r9
   288e4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   288e8:	ldr	r3, [sp, #28]
   288ec:	cmp	r3, #0
   288f0:	beq	288fc <__assert_fail@plt+0x16f5c>
   288f4:	add	r0, sl, #136	; 0x88
   288f8:	bl	114f0 <pthread_mutex_unlock@plt>
   288fc:	mov	r0, r5
   28900:	add	sp, sp, #52	; 0x34
   28904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28908:	ldr	r1, [r6, #16]
   2890c:	cmp	r1, #0
   28910:	beq	28858 <__assert_fail@plt+0x16eb8>
   28914:	tst	r2, #8
   28918:	bne	28858 <__assert_fail@plt+0x16eb8>
   2891c:	mov	r0, r6
   28920:	bl	286d4 <__assert_fail@plt+0x16d34>
   28924:	ldrb	r2, [r6, #28]
   28928:	b	28858 <__assert_fail@plt+0x16eb8>
   2892c:	cmp	r7, #0
   28930:	beq	289d8 <__assert_fail@plt+0x17038>
   28934:	ldrb	r8, [r6, #28]
   28938:	add	fp, r4, #1
   2893c:	lsr	r8, r8, #1
   28940:	ands	r8, r8, #3
   28944:	beq	28a80 <__assert_fail@plt+0x170e0>
   28948:	cmp	r8, #1
   2894c:	movne	r8, #2
   28950:	beq	289f4 <__assert_fail@plt+0x17054>
   28954:	cmp	r4, #0
   28958:	ble	28b10 <__assert_fail@plt+0x17170>
   2895c:	ldmib	r7, {r1, r2}
   28960:	mov	r3, r9
   28964:	add	ip, r9, r4, lsl #3
   28968:	sub	r1, r1, #4
   2896c:	sub	r2, r2, #4
   28970:	ldr	r0, [r3]
   28974:	add	r3, r3, #8
   28978:	str	r0, [r1, #4]!
   2897c:	ldr	r0, [r3, #-4]
   28980:	cmp	ip, r3
   28984:	str	r0, [r2, #4]!
   28988:	bne	28970 <__assert_fail@plt+0x16fd0>
   2898c:	ldr	r2, [r7]
   28990:	mov	r3, r4
   28994:	cmp	r2, r4
   28998:	bls	289c0 <__assert_fail@plt+0x17020>
   2899c:	ldmib	r7, {r0, r1}
   289a0:	mvn	r2, #0
   289a4:	str	r2, [r1, r3, lsl #2]
   289a8:	str	r2, [r0, r3, lsl #2]
   289ac:	ldr	r3, [r7]
   289b0:	add	r4, r4, #1
   289b4:	cmp	r4, r3
   289b8:	mov	r3, r4
   289bc:	bcc	289a4 <__assert_fail@plt+0x17004>
   289c0:	ldrb	r3, [r6, #28]
   289c4:	bic	r3, r3, #6
   289c8:	orr	r8, r3, r8, lsl #1
   289cc:	tst	r8, #6
   289d0:	strb	r8, [r6, #28]
   289d4:	beq	288dc <__assert_fail@plt+0x16f3c>
   289d8:	ldr	r3, [sp, #32]
   289dc:	cmp	r3, #0
   289e0:	ldrne	r3, [r9, #4]
   289e4:	subne	r5, r3, r5
   289e8:	bne	288e0 <__assert_fail@plt+0x16f40>
   289ec:	ldr	r5, [r9]
   289f0:	b	288e0 <__assert_fail@plt+0x16f40>
   289f4:	ldr	r3, [r7]
   289f8:	cmp	r3, fp
   289fc:	bcs	28954 <__assert_fail@plt+0x16fb4>
   28a00:	lsl	r2, fp, #2
   28a04:	mov	r1, r2
   28a08:	ldr	r0, [r7, #4]
   28a0c:	str	r2, [sp, #40]	; 0x28
   28a10:	bl	1babc <__assert_fail@plt+0xa11c>
   28a14:	subs	r3, r0, #0
   28a18:	str	r3, [sp, #36]	; 0x24
   28a1c:	beq	28b18 <__assert_fail@plt+0x17178>
   28a20:	ldr	r2, [sp, #40]	; 0x28
   28a24:	ldr	r0, [r7, #8]
   28a28:	mov	r1, r2
   28a2c:	bl	1babc <__assert_fail@plt+0xa11c>
   28a30:	ldr	r3, [sp, #36]	; 0x24
   28a34:	subs	r2, r0, #0
   28a38:	strne	r3, [r7, #4]
   28a3c:	strne	r2, [r7, #8]
   28a40:	strne	fp, [r7]
   28a44:	bne	28954 <__assert_fail@plt+0x16fb4>
   28a48:	mov	r0, r3
   28a4c:	str	r2, [sp, #36]	; 0x24
   28a50:	bl	1b944 <__assert_fail@plt+0x9fa4>
   28a54:	ldr	r2, [sp, #36]	; 0x24
   28a58:	mov	r8, r2
   28a5c:	b	289c0 <__assert_fail@plt+0x17020>
   28a60:	mov	r8, r2
   28a64:	b	287fc <__assert_fail@plt+0x16e5c>
   28a68:	mvn	r5, #0
   28a6c:	mov	r0, r5
   28a70:	add	sp, sp, #52	; 0x34
   28a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a78:	mvn	r5, #1
   28a7c:	b	288e8 <__assert_fail@plt+0x16f48>
   28a80:	lsl	r8, fp, #2
   28a84:	mov	r0, r8
   28a88:	bl	1ba3c <__assert_fail@plt+0xa09c>
   28a8c:	cmp	r0, #0
   28a90:	str	r0, [r7, #4]
   28a94:	beq	28b18 <__assert_fail@plt+0x17178>
   28a98:	mov	r0, r8
   28a9c:	bl	1ba3c <__assert_fail@plt+0xa09c>
   28aa0:	cmp	r0, #0
   28aa4:	mov	r8, r0
   28aa8:	str	r0, [r7, #8]
   28aac:	strne	fp, [r7]
   28ab0:	movne	r8, #1
   28ab4:	bne	28954 <__assert_fail@plt+0x16fb4>
   28ab8:	ldr	r0, [r7, #4]
   28abc:	bl	1b944 <__assert_fail@plt+0x9fa4>
   28ac0:	b	289c0 <__assert_fail@plt+0x17020>
   28ac4:	ldr	fp, [r7]
   28ac8:	ldr	r0, [r6, #24]
   28acc:	cmp	fp, r0
   28ad0:	bhi	28880 <__assert_fail@plt+0x16ee0>
   28ad4:	cmp	fp, #0
   28ad8:	mov	r4, fp
   28adc:	bgt	28888 <__assert_fail@plt+0x16ee8>
   28ae0:	mov	fp, #1
   28ae4:	mov	r7, r1
   28ae8:	mov	r4, fp
   28aec:	mov	r0, #8
   28af0:	b	2888c <__assert_fail@plt+0x16eec>
   28af4:	mov	r8, lr
   28af8:	b	287fc <__assert_fail@plt+0x16e5c>
   28afc:	mov	fp, #1
   28b00:	mov	r4, fp
   28b04:	mov	r0, #8
   28b08:	mov	r7, #0
   28b0c:	b	2888c <__assert_fail@plt+0x16eec>
   28b10:	mov	r4, #0
   28b14:	b	2898c <__assert_fail@plt+0x16fec>
   28b18:	mov	r8, #0
   28b1c:	b	289c0 <__assert_fail@plt+0x17020>
	...
   28b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b2c:	sub	sp, sp, #28
   28b30:	mov	r5, r2
   28b34:	ldr	r6, [sp, #80]	; 0x50
   28b38:	ldr	r4, [sp, #64]	; 0x40
   28b3c:	orr	r2, r2, r6
   28b40:	orrs	r2, r2, r4
   28b44:	ldrb	fp, [sp, #84]	; 0x54
   28b48:	bmi	28b6c <__assert_fail@plt+0x171cc>
   28b4c:	cmp	r4, #0
   28b50:	mov	sl, r0
   28b54:	mov	r7, r3
   28b58:	blt	28b7c <__assert_fail@plt+0x171dc>
   28b5c:	mvn	r3, #-2147483648	; 0x80000000
   28b60:	sub	r3, r3, r4
   28b64:	cmp	r5, r3
   28b68:	ble	28b7c <__assert_fail@plt+0x171dc>
   28b6c:	mvn	r4, #1
   28b70:	mov	r0, r4
   28b74:	add	sp, sp, #28
   28b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b7c:	cmp	r4, #0
   28b80:	add	r9, r5, r4
   28b84:	ble	28c10 <__assert_fail@plt+0x17270>
   28b88:	cmp	r5, #0
   28b8c:	str	r1, [sp, #20]
   28b90:	beq	28c08 <__assert_fail@plt+0x17268>
   28b94:	mov	r0, r9
   28b98:	bl	1ba3c <__assert_fail@plt+0xa09c>
   28b9c:	subs	r8, r0, #0
   28ba0:	beq	28b6c <__assert_fail@plt+0x171cc>
   28ba4:	ldr	r1, [sp, #20]
   28ba8:	mov	r2, r5
   28bac:	bl	115d4 <memcpy@plt>
   28bb0:	mov	r1, r7
   28bb4:	mov	r2, r4
   28bb8:	add	r0, r8, r5
   28bbc:	bl	115d4 <memcpy@plt>
   28bc0:	mov	r7, r8
   28bc4:	ldr	r3, [sp, #76]	; 0x4c
   28bc8:	mov	r2, r9
   28bcc:	str	r3, [sp, #8]
   28bd0:	ldr	r3, [sp, #72]	; 0x48
   28bd4:	mov	r1, r7
   28bd8:	str	r3, [sp]
   28bdc:	str	fp, [sp, #12]
   28be0:	ldr	r3, [sp, #68]	; 0x44
   28be4:	str	r6, [sp, #4]
   28be8:	mov	r0, sl
   28bec:	bl	2878c <__assert_fail@plt+0x16dec>
   28bf0:	mov	r4, r0
   28bf4:	mov	r0, r8
   28bf8:	bl	1b944 <__assert_fail@plt+0x9fa4>
   28bfc:	mov	r0, r4
   28c00:	add	sp, sp, #28
   28c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c08:	mov	r8, r5
   28c0c:	b	28bc4 <__assert_fail@plt+0x17224>
   28c10:	mov	r7, r1
   28c14:	mov	r8, #0
   28c18:	b	28bc4 <__assert_fail@plt+0x17224>
   28c1c:	push	{r4, r5, r6, r7, r8, lr}
   28c20:	mov	r5, r2
   28c24:	ldr	r3, [pc, #228]	; 28d10 <__assert_fail@plt+0x17370>
   28c28:	mov	r2, #0
   28c2c:	tst	r5, #1
   28c30:	mov	r4, r0
   28c34:	str	r2, [r0]
   28c38:	str	r2, [r0, #4]
   28c3c:	str	r2, [r0, #8]
   28c40:	mov	r0, #256	; 0x100
   28c44:	ldr	r6, [pc, #200]	; 28d14 <__assert_fail@plt+0x17374>
   28c48:	mov	r7, r1
   28c4c:	moveq	r6, r3
   28c50:	bl	1ba3c <__assert_fail@plt+0xa09c>
   28c54:	cmp	r0, #0
   28c58:	str	r0, [r4, #16]
   28c5c:	beq	28d08 <__assert_fail@plt+0x17368>
   28c60:	tst	r5, #2
   28c64:	movne	r3, #4194304	; 0x400000
   28c68:	moveq	r3, #0
   28c6c:	orr	r6, r6, r3
   28c70:	ldrb	r3, [r4, #28]
   28c74:	tst	r5, #4
   28c78:	lsl	r5, r5, #1
   28c7c:	orrne	r3, r3, #128	; 0x80
   28c80:	biceq	r3, r3, #128	; 0x80
   28c84:	strb	r3, [r4, #28]
   28c88:	ldrb	r2, [r4, #28]
   28c8c:	and	r5, r5, #16
   28c90:	mov	r3, #0
   28c94:	bic	r2, r2, #16
   28c98:	orr	r5, r5, r2
   28c9c:	bicne	r6, r6, #64	; 0x40
   28ca0:	strb	r5, [r4, #28]
   28ca4:	str	r3, [r4, #20]
   28ca8:	mov	r0, r7
   28cac:	orrne	r6, r6, #256	; 0x100
   28cb0:	bl	117a8 <strlen@plt>
   28cb4:	mov	r3, r6
   28cb8:	mov	r1, r7
   28cbc:	mov	r2, r0
   28cc0:	mov	r0, r4
   28cc4:	bl	27754 <__assert_fail@plt+0x15db4>
   28cc8:	cmp	r0, #16
   28ccc:	mov	r5, r0
   28cd0:	beq	28cec <__assert_fail@plt+0x1734c>
   28cd4:	cmp	r0, #0
   28cd8:	bne	28cf0 <__assert_fail@plt+0x17350>
   28cdc:	mov	r0, r4
   28ce0:	bl	286d4 <__assert_fail@plt+0x16d34>
   28ce4:	mov	r0, r5
   28ce8:	pop	{r4, r5, r6, r7, r8, pc}
   28cec:	mov	r5, #8
   28cf0:	ldr	r0, [r4, #16]
   28cf4:	bl	1b944 <__assert_fail@plt+0x9fa4>
   28cf8:	mov	r3, #0
   28cfc:	mov	r0, r5
   28d00:	str	r3, [r4, #16]
   28d04:	pop	{r4, r5, r6, r7, r8, pc}
   28d08:	mov	r0, #12
   28d0c:	pop	{r4, r5, r6, r7, r8, pc}
   28d10:	smlabteq	r1, r6, r2, r0
   28d14:	strdeq	fp, [r3], -ip
   28d18:	cmp	r0, #16
   28d1c:	push	{r4, r5, r6, r7, r8, lr}
   28d20:	bhi	28d88 <__assert_fail@plt+0x173e8>
   28d24:	ldr	r1, [pc, #96]	; 28d8c <__assert_fail@plt+0x173ec>
   28d28:	mov	r4, r3
   28d2c:	add	r0, r1, r0, lsl #2
   28d30:	add	r1, r1, #32
   28d34:	ldr	r3, [r0, #416]	; 0x1a0
   28d38:	mov	r6, r2
   28d3c:	add	r1, r1, r3
   28d40:	mov	r2, #5
   28d44:	mov	r0, #0
   28d48:	bl	11628 <dcgettext@plt>
   28d4c:	mov	r7, r0
   28d50:	bl	117a8 <strlen@plt>
   28d54:	cmp	r4, #0
   28d58:	add	r5, r0, #1
   28d5c:	beq	28d80 <__assert_fail@plt+0x173e0>
   28d60:	cmp	r5, r4
   28d64:	subhi	r2, r4, #1
   28d68:	movhi	r3, #0
   28d6c:	strbhi	r3, [r6, r2]
   28d70:	movls	r2, r5
   28d74:	mov	r1, r7
   28d78:	mov	r0, r6
   28d7c:	bl	115d4 <memcpy@plt>
   28d80:	mov	r0, r5
   28d84:	pop	{r4, r5, r6, r7, r8, pc}
   28d88:	bl	11964 <abort@plt>
   28d8c:	andeq	ip, r2, ip, lsr #28
   28d90:	push	{r4, r5, r6, lr}
   28d94:	mov	r4, r0
   28d98:	ldr	r5, [r0]
   28d9c:	cmp	r5, #0
   28da0:	beq	28de0 <__assert_fail@plt+0x17440>
   28da4:	ldr	r2, [pc, #92]	; 28e08 <__assert_fail@plt+0x17468>
   28da8:	ldr	r1, [pc, #92]	; 28e0c <__assert_fail@plt+0x1746c>
   28dac:	cmp	r2, #0
   28db0:	mov	r3, #1
   28db4:	moveq	r3, r2
   28db8:	cmp	r1, #0
   28dbc:	mov	r2, #1
   28dc0:	moveq	r2, r1
   28dc4:	orr	r3, r3, r2
   28dc8:	tst	r3, #1
   28dcc:	beq	28dd8 <__assert_fail@plt+0x17438>
   28dd0:	add	r0, r5, #136	; 0x88
   28dd4:	bl	1155c <pthread_mutex_destroy@plt>
   28dd8:	mov	r0, r5
   28ddc:	bl	1ce68 <__assert_fail@plt+0xb4c8>
   28de0:	mov	r5, #0
   28de4:	ldr	r0, [r4, #16]
   28de8:	str	r5, [r4]
   28dec:	str	r5, [r4, #4]
   28df0:	bl	1b944 <__assert_fail@plt+0x9fa4>
   28df4:	str	r5, [r4, #16]
   28df8:	ldr	r0, [r4, #20]
   28dfc:	bl	1b944 <__assert_fail@plt+0x9fa4>
   28e00:	str	r5, [r4, #20]
   28e04:	pop	{r4, r5, r6, pc}
	...
   28e10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28e14:	sub	sp, sp, #36	; 0x24
   28e18:	ldr	r4, [sp, #72]	; 0x48
   28e1c:	bics	ip, r4, #7
   28e20:	movne	r0, #2
   28e24:	beq	28e30 <__assert_fail@plt+0x17490>
   28e28:	add	sp, sp, #36	; 0x24
   28e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28e30:	ands	fp, r4, #4
   28e34:	mov	r8, r3
   28e38:	str	r2, [sp, #28]
   28e3c:	mov	r7, r1
   28e40:	mov	r5, r0
   28e44:	bne	28ee8 <__assert_fail@plt+0x17548>
   28e48:	mov	r0, r1
   28e4c:	bl	117a8 <strlen@plt>
   28e50:	mov	r9, r0
   28e54:	ldr	r3, [pc, #204]	; 28f28 <__assert_fail@plt+0x17588>
   28e58:	ldr	r1, [pc, #204]	; 28f2c <__assert_fail@plt+0x1758c>
   28e5c:	cmp	r3, #0
   28e60:	mov	r6, #1
   28e64:	moveq	r6, r3
   28e68:	cmp	r1, #0
   28e6c:	mov	r3, #1
   28e70:	moveq	r3, r1
   28e74:	orr	r6, r6, r3
   28e78:	ands	r6, r6, #255	; 0xff
   28e7c:	ldr	sl, [r5]
   28e80:	beq	28e8c <__assert_fail@plt+0x174ec>
   28e84:	add	r0, sl, #136	; 0x88
   28e88:	bl	115a4 <pthread_mutex_lock@plt>
   28e8c:	ldrb	r3, [r5, #28]
   28e90:	tst	r3, #16
   28e94:	beq	28ef4 <__assert_fail@plt+0x17554>
   28e98:	mov	ip, #0
   28e9c:	str	r4, [sp, #16]
   28ea0:	str	r9, [sp, #4]
   28ea4:	str	r9, [sp]
   28ea8:	mov	r3, fp
   28eac:	mov	r2, r9
   28eb0:	mov	r1, r7
   28eb4:	mov	r0, r5
   28eb8:	str	ip, [sp, #12]
   28ebc:	str	ip, [sp, #8]
   28ec0:	bl	23038 <__assert_fail@plt+0x11698>
   28ec4:	mov	r4, r0
   28ec8:	cmp	r6, #0
   28ecc:	beq	28ed8 <__assert_fail@plt+0x17538>
   28ed0:	add	r0, sl, #136	; 0x88
   28ed4:	bl	114f0 <pthread_mutex_unlock@plt>
   28ed8:	adds	r0, r4, #0
   28edc:	movne	r0, #1
   28ee0:	add	sp, sp, #36	; 0x24
   28ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ee8:	ldr	fp, [r3]
   28eec:	ldr	r9, [r3, #4]
   28ef0:	b	28e54 <__assert_fail@plt+0x174b4>
   28ef4:	ldr	r3, [sp, #28]
   28ef8:	str	r4, [sp, #16]
   28efc:	str	r3, [sp, #8]
   28f00:	str	r8, [sp, #12]
   28f04:	str	r9, [sp, #4]
   28f08:	str	r9, [sp]
   28f0c:	mov	r3, fp
   28f10:	mov	r2, r9
   28f14:	mov	r1, r7
   28f18:	mov	r0, r5
   28f1c:	bl	23038 <__assert_fail@plt+0x11698>
   28f20:	mov	r4, r0
   28f24:	b	28ec8 <__assert_fail@plt+0x17528>
	...
   28f30:	push	{r4, lr}
   28f34:	sub	sp, sp, #16
   28f38:	mov	lr, #1
   28f3c:	ldr	r4, [sp, #24]
   28f40:	mov	ip, #0
   28f44:	str	ip, [sp]
   28f48:	stmib	sp, {r2, r4, lr}
   28f4c:	bl	2878c <__assert_fail@plt+0x16dec>
   28f50:	add	sp, sp, #16
   28f54:	pop	{r4, pc}
   28f58:	push	{r4, lr}
   28f5c:	sub	sp, sp, #16
   28f60:	mov	ip, #0
   28f64:	ldr	r4, [sp, #24]
   28f68:	ldr	lr, [sp, #28]
   28f6c:	str	r2, [sp, #4]
   28f70:	str	r4, [sp]
   28f74:	str	lr, [sp, #8]
   28f78:	str	ip, [sp, #12]
   28f7c:	bl	2878c <__assert_fail@plt+0x16dec>
   28f80:	add	sp, sp, #16
   28f84:	pop	{r4, pc}
   28f88:	push	{r4, r5, lr}
   28f8c:	sub	sp, sp, #28
   28f90:	ldr	lr, [sp, #40]	; 0x28
   28f94:	ldr	ip, [sp, #44]	; 0x2c
   28f98:	ldr	r5, [sp, #48]	; 0x30
   28f9c:	ldr	r4, [sp, #52]	; 0x34
   28fa0:	str	lr, [sp]
   28fa4:	str	ip, [sp, #4]
   28fa8:	mov	lr, #1
   28fac:	mov	ip, #0
   28fb0:	str	r5, [sp, #12]
   28fb4:	str	r4, [sp, #16]
   28fb8:	str	lr, [sp, #20]
   28fbc:	str	ip, [sp, #8]
   28fc0:	bl	28b28 <__assert_fail@plt+0x17188>
   28fc4:	add	sp, sp, #28
   28fc8:	pop	{r4, r5, pc}
   28fcc:	push	{r4, r5, lr}
   28fd0:	sub	sp, sp, #28
   28fd4:	ldr	lr, [sp, #40]	; 0x28
   28fd8:	ldr	ip, [sp, #44]	; 0x2c
   28fdc:	ldr	r5, [sp, #48]	; 0x30
   28fe0:	ldr	r4, [sp, #52]	; 0x34
   28fe4:	str	lr, [sp]
   28fe8:	ldr	lr, [sp, #56]	; 0x38
   28fec:	str	ip, [sp, #4]
   28ff0:	mov	ip, #0
   28ff4:	str	r5, [sp, #8]
   28ff8:	str	r4, [sp, #12]
   28ffc:	str	lr, [sp, #16]
   29000:	str	ip, [sp, #20]
   29004:	bl	28b28 <__assert_fail@plt+0x17188>
   29008:	add	sp, sp, #28
   2900c:	pop	{r4, r5, pc}
   29010:	cmp	r2, #0
   29014:	bne	29034 <__assert_fail@plt+0x17694>
   29018:	ldrb	r3, [r0, #28]
   2901c:	bic	r3, r3, #6
   29020:	strb	r3, [r0, #28]
   29024:	str	r2, [r1]
   29028:	str	r2, [r1, #8]
   2902c:	str	r2, [r1, #4]
   29030:	bx	lr
   29034:	ldrb	ip, [r0, #28]
   29038:	bic	ip, ip, #4
   2903c:	orr	ip, ip, #2
   29040:	strb	ip, [r0, #28]
   29044:	stm	r1, {r2, r3}
   29048:	ldr	r3, [sp]
   2904c:	str	r3, [r1, #8]
   29050:	bx	lr
   29054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29058:	mov	r9, #1
   2905c:	sub	sp, sp, #20
   29060:	mov	r5, r0
   29064:	mov	sl, r1
   29068:	mov	r6, r9
   2906c:	mov	r7, #0
   29070:	mvn	r8, #0
   29074:	str	r2, [sp, #8]
   29078:	add	r4, r6, r7
   2907c:	cmp	r4, sl
   29080:	bcs	29110 <__assert_fail@plt+0x17770>
   29084:	bl	11778 <__ctype_b_loc@plt>
   29088:	ldrb	fp, [r5, r4]
   2908c:	sxth	r3, fp
   29090:	str	r3, [sp]
   29094:	lsl	r1, r3, #1
   29098:	ldr	r2, [r0]
   2909c:	ldrh	r1, [r2, r1]
   290a0:	tst	r1, #256	; 0x100
   290a4:	beq	290c0 <__assert_fail@plt+0x17720>
   290a8:	str	r2, [sp, #4]
   290ac:	bl	11748 <__ctype_tolower_loc@plt>
   290b0:	ldr	r3, [sp]
   290b4:	ldr	r2, [sp, #4]
   290b8:	ldr	r1, [r0]
   290bc:	ldrb	fp, [r1, r3, lsl #2]
   290c0:	add	r3, r5, r8
   290c4:	ldrb	r3, [r3, r6]
   290c8:	sxth	r1, r3
   290cc:	str	r1, [sp]
   290d0:	lsl	r0, r1, #1
   290d4:	ldrh	r2, [r2, r0]
   290d8:	tst	r2, #256	; 0x100
   290dc:	beq	290f0 <__assert_fail@plt+0x17750>
   290e0:	bl	11748 <__ctype_tolower_loc@plt>
   290e4:	ldr	r1, [sp]
   290e8:	ldr	r3, [r0]
   290ec:	ldrb	r3, [r3, r1, lsl #2]
   290f0:	cmp	fp, r3
   290f4:	bcs	29204 <__assert_fail@plt+0x17864>
   290f8:	mov	r7, r4
   290fc:	mov	r6, #1
   29100:	sub	r9, r4, r8
   29104:	add	r4, r6, r7
   29108:	cmp	r4, sl
   2910c:	bcc	29084 <__assert_fail@plt+0x176e4>
   29110:	ldr	r3, [sp, #8]
   29114:	mov	fp, #1
   29118:	str	r8, [sp, #12]
   2911c:	str	r9, [r3]
   29120:	mov	r7, #0
   29124:	mvn	r9, #0
   29128:	mov	r8, fp
   2912c:	mov	r6, r5
   29130:	add	r4, r8, r7
   29134:	cmp	sl, r4
   29138:	bls	291c8 <__assert_fail@plt+0x17828>
   2913c:	bl	11778 <__ctype_b_loc@plt>
   29140:	ldrb	r5, [r6, r4]
   29144:	sxth	r1, r5
   29148:	str	r1, [sp]
   2914c:	lsl	ip, r1, #1
   29150:	ldr	r2, [r0]
   29154:	ldrh	r0, [r2, ip]
   29158:	tst	r0, #256	; 0x100
   2915c:	beq	29178 <__assert_fail@plt+0x177d8>
   29160:	str	r2, [sp, #4]
   29164:	bl	11748 <__ctype_tolower_loc@plt>
   29168:	ldr	r1, [sp]
   2916c:	ldr	r2, [sp, #4]
   29170:	ldr	r0, [r0]
   29174:	ldrb	r5, [r0, r1, lsl #2]
   29178:	add	r1, r6, r9
   2917c:	ldrb	r0, [r1, r8]
   29180:	sxth	r1, r0
   29184:	str	r1, [sp]
   29188:	lsl	ip, r1, #1
   2918c:	ldrh	r2, [r2, ip]
   29190:	tst	r2, #256	; 0x100
   29194:	beq	291a8 <__assert_fail@plt+0x17808>
   29198:	bl	11748 <__ctype_tolower_loc@plt>
   2919c:	ldr	r1, [sp]
   291a0:	ldr	r2, [r0]
   291a4:	ldrb	r0, [r2, r1, lsl #2]
   291a8:	cmp	r5, r0
   291ac:	bls	291ec <__assert_fail@plt+0x1784c>
   291b0:	mov	r7, r4
   291b4:	mov	r8, #1
   291b8:	sub	fp, r4, r9
   291bc:	add	r4, r8, r7
   291c0:	cmp	sl, r4
   291c4:	bhi	2913c <__assert_fail@plt+0x1779c>
   291c8:	ldr	r8, [sp, #12]
   291cc:	add	r9, r9, #1
   291d0:	add	r0, r8, #1
   291d4:	cmp	r9, r0
   291d8:	movcs	r0, r9
   291dc:	ldrcs	r3, [sp, #8]
   291e0:	strcs	fp, [r3]
   291e4:	add	sp, sp, #20
   291e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   291ec:	beq	2921c <__assert_fail@plt+0x1787c>
   291f0:	mov	fp, #1
   291f4:	mov	r9, r7
   291f8:	mov	r8, fp
   291fc:	add	r7, r7, fp
   29200:	b	29130 <__assert_fail@plt+0x17790>
   29204:	beq	29230 <__assert_fail@plt+0x17890>
   29208:	mov	r9, #1
   2920c:	mov	r8, r7
   29210:	mov	r6, r9
   29214:	add	r7, r7, r9
   29218:	b	29078 <__assert_fail@plt+0x176d8>
   2921c:	cmp	r8, fp
   29220:	addne	r8, r8, #1
   29224:	moveq	r7, r4
   29228:	moveq	r8, #1
   2922c:	b	29130 <__assert_fail@plt+0x17790>
   29230:	cmp	r6, r9
   29234:	addne	r6, r6, #1
   29238:	moveq	r7, r4
   2923c:	moveq	r6, #1
   29240:	b	29078 <__assert_fail@plt+0x176d8>
   29244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29248:	sub	sp, sp, #1072	; 0x430
   2924c:	sub	sp, sp, #12
   29250:	cmp	r3, #2
   29254:	mov	r5, r3
   29258:	str	r0, [sp]
   2925c:	mov	r4, r1
   29260:	str	r2, [sp, #16]
   29264:	bhi	29810 <__assert_fail@plt+0x17e70>
   29268:	add	r6, sp, #56	; 0x38
   2926c:	mov	r3, #1
   29270:	sub	r2, r5, #1
   29274:	str	r3, [sp, #28]
   29278:	str	r2, [sp, #8]
   2927c:	str	r3, [sp, #52]	; 0x34
   29280:	add	r2, sp, #1072	; 0x430
   29284:	sub	r3, r6, #4
   29288:	add	r2, r2, #4
   2928c:	str	r5, [r3, #4]!
   29290:	cmp	r2, r3
   29294:	bne	2928c <__assert_fail@plt+0x178ec>
   29298:	cmp	r5, #0
   2929c:	beq	292f4 <__assert_fail@plt+0x17954>
   292a0:	bl	11778 <__ctype_b_loc@plt>
   292a4:	ldr	r3, [sp, #16]
   292a8:	sub	r6, r5, #1
   292ac:	sub	r7, r3, #1
   292b0:	ldr	r8, [r0]
   292b4:	ldrb	r3, [r7, #1]!
   292b8:	mov	r2, r3
   292bc:	sxth	r9, r3
   292c0:	lsl	r3, r9, #1
   292c4:	ldrh	r3, [r8, r3]
   292c8:	tst	r3, #256	; 0x100
   292cc:	beq	292dc <__assert_fail@plt+0x1793c>
   292d0:	bl	11748 <__ctype_tolower_loc@plt>
   292d4:	ldr	r3, [r0]
   292d8:	ldr	r2, [r3, r9, lsl #2]
   292dc:	add	r3, sp, #1072	; 0x430
   292e0:	add	r3, r3, #8
   292e4:	add	r2, r3, r2, lsl #2
   292e8:	str	r6, [r2, #-1024]	; 0xfffffc00
   292ec:	subs	r6, r6, #1
   292f0:	bcs	292b4 <__assert_fail@plt+0x17914>
   292f4:	ldr	r3, [sp, #16]
   292f8:	ldr	r6, [sp, #8]
   292fc:	ldr	r7, [sp, #28]
   29300:	mov	r2, r6
   29304:	add	r1, r3, r7
   29308:	mov	r0, r3
   2930c:	bl	117f0 <strncasecmp@plt>
   29310:	cmp	r0, #0
   29314:	bne	295e0 <__assert_fail@plt+0x17c40>
   29318:	sub	r2, r6, #1
   2931c:	str	r2, [sp, #40]	; 0x28
   29320:	rsb	r3, r6, #1
   29324:	sub	r2, r5, r7
   29328:	str	r0, [sp, #12]
   2932c:	str	r0, [sp, #4]
   29330:	sub	r8, r5, #1
   29334:	str	r2, [sp, #36]	; 0x24
   29338:	str	r3, [sp, #44]	; 0x2c
   2933c:	mov	r0, r4
   29340:	str	r5, [sp, #24]
   29344:	b	2937c <__assert_fail@plt+0x179dc>
   29348:	ldr	r2, [sp, #28]
   2934c:	ldr	r1, [sp, #12]
   29350:	cmp	r1, #0
   29354:	cmpne	r3, r2
   29358:	ldrcc	r3, [sp, #36]	; 0x24
   2935c:	strcc	r3, [sp, #20]
   29360:	ldr	r3, [sp, #4]
   29364:	ldr	r2, [sp, #20]
   29368:	add	r3, r3, r2
   2936c:	str	r3, [sp, #4]
   29370:	mov	r3, #0
   29374:	str	r3, [sp, #12]
   29378:	mov	r0, r7
   2937c:	ldr	r3, [sp, #4]
   29380:	ldr	r2, [sp, #24]
   29384:	mov	r1, #0
   29388:	add	r7, r3, r2
   2938c:	ldr	r3, [sp]
   29390:	sub	r2, r7, r0
   29394:	add	r0, r3, r0
   29398:	bl	1185c <memchr@plt>
   2939c:	adds	r3, r7, #0
   293a0:	movne	r3, #1
   293a4:	cmp	r0, #0
   293a8:	movne	r3, #0
   293ac:	cmp	r3, #0
   293b0:	beq	29800 <__assert_fail@plt+0x17e60>
   293b4:	bl	11778 <__ctype_b_loc@plt>
   293b8:	ldr	r3, [sp]
   293bc:	add	r3, r3, r7
   293c0:	ldrb	r3, [r3, #-1]
   293c4:	sxth	r5, r3
   293c8:	lsl	r2, r5, #1
   293cc:	ldr	r4, [r0]
   293d0:	ldrh	r2, [r4, r2]
   293d4:	tst	r2, #256	; 0x100
   293d8:	beq	293e8 <__assert_fail@plt+0x17a48>
   293dc:	bl	11748 <__ctype_tolower_loc@plt>
   293e0:	ldr	r3, [r0]
   293e4:	ldr	r3, [r3, r5, lsl #2]
   293e8:	add	r2, sp, #1072	; 0x430
   293ec:	add	r2, r2, #8
   293f0:	add	r3, r2, r3, lsl #2
   293f4:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   293f8:	cmp	r3, #0
   293fc:	str	r3, [sp, #20]
   29400:	bne	29348 <__assert_fail@plt+0x179a8>
   29404:	ldr	r3, [sp, #12]
   29408:	ldr	r2, [sp, #8]
   2940c:	cmp	r3, r2
   29410:	movcs	r6, r3
   29414:	movcc	r6, r2
   29418:	cmp	r6, r8
   2941c:	bcs	294c8 <__assert_fail@plt+0x17b28>
   29420:	ldr	r3, [sp, #4]
   29424:	ldr	r2, [sp]
   29428:	add	r3, r3, r6
   2942c:	add	r9, r2, r3
   29430:	ldr	r3, [sp, #16]
   29434:	add	sl, r3, r6
   29438:	b	29448 <__assert_fail@plt+0x17aa8>
   2943c:	add	r6, r6, #1
   29440:	cmp	r6, r8
   29444:	bcs	294c8 <__assert_fail@plt+0x17b28>
   29448:	ldrb	r3, [sl], #1
   2944c:	mov	fp, r3
   29450:	sxth	r5, r3
   29454:	lsl	r3, r5, #1
   29458:	ldrh	r3, [r4, r3]
   2945c:	tst	r3, #256	; 0x100
   29460:	beq	29470 <__assert_fail@plt+0x17ad0>
   29464:	bl	11748 <__ctype_tolower_loc@plt>
   29468:	ldr	r3, [r0]
   2946c:	ldr	fp, [r3, r5, lsl #2]
   29470:	ldrb	r3, [r9], #1
   29474:	mov	r2, r3
   29478:	sxth	r5, r3
   2947c:	lsl	r3, r5, #1
   29480:	ldrh	r3, [r4, r3]
   29484:	tst	r3, #256	; 0x100
   29488:	beq	29498 <__assert_fail@plt+0x17af8>
   2948c:	bl	11748 <__ctype_tolower_loc@plt>
   29490:	ldr	r3, [r0]
   29494:	ldr	r2, [r3, r5, lsl #2]
   29498:	cmp	fp, r2
   2949c:	beq	2943c <__assert_fail@plt+0x17a9c>
   294a0:	cmp	r8, r6
   294a4:	bls	294c8 <__assert_fail@plt+0x17b28>
   294a8:	ldr	r3, [sp, #44]	; 0x2c
   294ac:	ldr	r2, [sp, #4]
   294b0:	add	r9, r3, r2
   294b4:	add	r3, r6, r9
   294b8:	str	r3, [sp, #4]
   294bc:	ldr	r3, [sp, #20]
   294c0:	str	r3, [sp, #12]
   294c4:	b	29378 <__assert_fail@plt+0x179d8>
   294c8:	ldr	r3, [sp, #12]
   294cc:	ldr	r2, [sp, #8]
   294d0:	ldr	r6, [sp, #40]	; 0x28
   294d4:	cmp	r3, r2
   294d8:	bcs	29590 <__assert_fail@plt+0x17bf0>
   294dc:	ldmib	sp, {r2, r3}
   294e0:	ldr	r1, [sp]
   294e4:	str	r7, [sp, #20]
   294e8:	add	r2, r2, r3
   294ec:	add	sl, r1, r2
   294f0:	ldr	r2, [sp, #16]
   294f4:	mov	r7, sl
   294f8:	add	fp, r2, r3
   294fc:	ldr	r3, [sp, #12]
   29500:	str	r8, [sp, #32]
   29504:	sub	r3, r3, #1
   29508:	mov	r8, fp
   2950c:	mov	sl, r3
   29510:	mov	fp, r4
   29514:	b	29524 <__assert_fail@plt+0x17b84>
   29518:	cmp	r3, sl
   2951c:	beq	295d0 <__assert_fail@plt+0x17c30>
   29520:	mov	r6, r3
   29524:	ldrb	r3, [r8, #-1]!
   29528:	add	r4, r6, #1
   2952c:	mov	r9, r3
   29530:	sxth	r5, r3
   29534:	lsl	r3, r5, #1
   29538:	ldrh	r3, [fp, r3]
   2953c:	tst	r3, #256	; 0x100
   29540:	beq	29550 <__assert_fail@plt+0x17bb0>
   29544:	bl	11748 <__ctype_tolower_loc@plt>
   29548:	ldr	r3, [r0]
   2954c:	ldr	r9, [r3, r5, lsl #2]
   29550:	ldrb	r3, [r7, #-1]!
   29554:	mov	r0, r3
   29558:	sxth	r5, r3
   2955c:	lsl	r3, r5, #1
   29560:	ldrh	r3, [fp, r3]
   29564:	tst	r3, #256	; 0x100
   29568:	beq	29578 <__assert_fail@plt+0x17bd8>
   2956c:	bl	11748 <__ctype_tolower_loc@plt>
   29570:	ldr	r3, [r0]
   29574:	ldr	r0, [r3, r5, lsl #2]
   29578:	cmp	r9, r0
   2957c:	sub	r3, r6, #1
   29580:	beq	29518 <__assert_fail@plt+0x17b78>
   29584:	ldr	r7, [sp, #20]
   29588:	ldr	r8, [sp, #32]
   2958c:	mov	r2, r4
   29590:	ldr	r3, [sp, #12]
   29594:	add	r3, r3, #1
   29598:	cmp	r3, r2
   2959c:	bhi	295bc <__assert_fail@plt+0x17c1c>
   295a0:	ldr	r3, [sp, #4]
   295a4:	ldr	r2, [sp, #28]
   295a8:	add	r3, r3, r2
   295ac:	str	r3, [sp, #4]
   295b0:	ldr	r3, [sp, #36]	; 0x24
   295b4:	str	r3, [sp, #12]
   295b8:	b	29378 <__assert_fail@plt+0x179d8>
   295bc:	ldm	sp, {r2, r3}
   295c0:	add	r0, r3, r2
   295c4:	add	sp, sp, #1072	; 0x430
   295c8:	add	sp, sp, #12
   295cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   295d0:	ldr	r7, [sp, #20]
   295d4:	ldr	r8, [sp, #32]
   295d8:	mov	r2, r6
   295dc:	b	29590 <__assert_fail@plt+0x17bf0>
   295e0:	ldr	r2, [sp, #8]
   295e4:	sub	r8, r5, #1
   295e8:	sub	r3, r5, r2
   295ec:	cmp	r3, r2
   295f0:	movcc	r3, r2
   295f4:	add	r3, r3, #1
   295f8:	mov	r0, r4
   295fc:	str	r3, [sp, #20]
   29600:	mov	r1, #0
   29604:	str	r3, [sp, #52]	; 0x34
   29608:	rsb	r3, r2, #1
   2960c:	str	r1, [sp, #4]
   29610:	str	r3, [sp, #24]
   29614:	str	r5, [sp, #12]
   29618:	ldr	r3, [sp, #4]
   2961c:	ldr	r2, [sp, #12]
   29620:	mov	r1, #0
   29624:	add	r7, r3, r2
   29628:	ldr	r3, [sp]
   2962c:	sub	r2, r7, r0
   29630:	add	r0, r3, r0
   29634:	bl	1185c <memchr@plt>
   29638:	cmp	r7, #0
   2963c:	clz	r0, r0
   29640:	lsr	r0, r0, #5
   29644:	moveq	r0, #0
   29648:	cmp	r0, #0
   2964c:	beq	29800 <__assert_fail@plt+0x17e60>
   29650:	bl	11778 <__ctype_b_loc@plt>
   29654:	ldr	r3, [sp]
   29658:	add	r3, r3, r7
   2965c:	ldrb	r3, [r3, #-1]
   29660:	sxth	r4, r3
   29664:	lsl	r2, r4, #1
   29668:	ldr	r5, [r0]
   2966c:	ldrh	r2, [r5, r2]
   29670:	tst	r2, #256	; 0x100
   29674:	beq	29684 <__assert_fail@plt+0x17ce4>
   29678:	bl	11748 <__ctype_tolower_loc@plt>
   2967c:	ldr	r3, [r0]
   29680:	ldr	r3, [r3, r4, lsl #2]
   29684:	add	r2, sp, #1072	; 0x430
   29688:	add	r2, r2, #8
   2968c:	add	r3, r2, r3, lsl #2
   29690:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   29694:	cmp	r3, #0
   29698:	bne	29750 <__assert_fail@plt+0x17db0>
   2969c:	ldr	r3, [sp, #8]
   296a0:	cmp	r3, r8
   296a4:	bcs	29760 <__assert_fail@plt+0x17dc0>
   296a8:	ldmib	sp, {r2, r3}
   296ac:	ldr	r1, [sp]
   296b0:	add	r2, r2, r3
   296b4:	add	fp, r1, r2
   296b8:	ldr	r2, [sp, #16]
   296bc:	mov	r6, r3
   296c0:	add	sl, r2, r3
   296c4:	b	296d4 <__assert_fail@plt+0x17d34>
   296c8:	add	r6, r6, #1
   296cc:	cmp	r6, r8
   296d0:	bcs	29760 <__assert_fail@plt+0x17dc0>
   296d4:	ldrb	r3, [sl], #1
   296d8:	mov	r9, r3
   296dc:	sxth	r4, r3
   296e0:	lsl	r3, r4, #1
   296e4:	ldrh	r3, [r5, r3]
   296e8:	tst	r3, #256	; 0x100
   296ec:	beq	296fc <__assert_fail@plt+0x17d5c>
   296f0:	bl	11748 <__ctype_tolower_loc@plt>
   296f4:	ldr	r3, [r0]
   296f8:	ldr	r9, [r3, r4, lsl #2]
   296fc:	ldrb	r3, [fp], #1
   29700:	mov	r2, r3
   29704:	sxth	r4, r3
   29708:	lsl	r3, r4, #1
   2970c:	ldrh	r3, [r5, r3]
   29710:	tst	r3, #256	; 0x100
   29714:	beq	29724 <__assert_fail@plt+0x17d84>
   29718:	bl	11748 <__ctype_tolower_loc@plt>
   2971c:	ldr	r3, [r0]
   29720:	ldr	r2, [r3, r4, lsl #2]
   29724:	cmp	r9, r2
   29728:	beq	296c8 <__assert_fail@plt+0x17d28>
   2972c:	cmp	r8, r6
   29730:	bls	29760 <__assert_fail@plt+0x17dc0>
   29734:	ldr	r3, [sp, #24]
   29738:	ldr	r2, [sp, #4]
   2973c:	add	r9, r3, r2
   29740:	add	r3, r9, r6
   29744:	str	r3, [sp, #4]
   29748:	mov	r0, r7
   2974c:	b	29618 <__assert_fail@plt+0x17c78>
   29750:	ldr	r2, [sp, #4]
   29754:	add	r3, r2, r3
   29758:	str	r3, [sp, #4]
   2975c:	b	29748 <__assert_fail@plt+0x17da8>
   29760:	ldr	r3, [sp, #8]
   29764:	subs	r6, r3, #1
   29768:	bcc	295bc <__assert_fail@plt+0x17c1c>
   2976c:	ldmib	sp, {r2, r3}
   29770:	ldr	r1, [sp]
   29774:	add	r2, r2, r3
   29778:	add	sl, r1, r2
   2977c:	ldr	r2, [sp, #16]
   29780:	add	fp, r2, r3
   29784:	b	29790 <__assert_fail@plt+0x17df0>
   29788:	cmn	r6, #1
   2978c:	beq	295bc <__assert_fail@plt+0x17c1c>
   29790:	ldrb	r3, [fp, #-1]!
   29794:	mov	r9, r3
   29798:	sxth	r4, r3
   2979c:	lsl	r3, r4, #1
   297a0:	ldrh	r3, [r5, r3]
   297a4:	tst	r3, #256	; 0x100
   297a8:	beq	297b8 <__assert_fail@plt+0x17e18>
   297ac:	bl	11748 <__ctype_tolower_loc@plt>
   297b0:	ldr	r3, [r0]
   297b4:	ldr	r9, [r3, r4, lsl #2]
   297b8:	ldrb	r3, [sl, #-1]!
   297bc:	mov	r2, r3
   297c0:	sxth	r4, r3
   297c4:	lsl	r3, r4, #1
   297c8:	ldrh	r3, [r5, r3]
   297cc:	tst	r3, #256	; 0x100
   297d0:	beq	297e0 <__assert_fail@plt+0x17e40>
   297d4:	bl	11748 <__ctype_tolower_loc@plt>
   297d8:	ldr	r3, [r0]
   297dc:	ldr	r2, [r3, r4, lsl #2]
   297e0:	cmp	r9, r2
   297e4:	sub	r6, r6, #1
   297e8:	beq	29788 <__assert_fail@plt+0x17de8>
   297ec:	ldr	r3, [sp, #4]
   297f0:	ldr	r2, [sp, #20]
   297f4:	add	r3, r3, r2
   297f8:	str	r3, [sp, #4]
   297fc:	b	29748 <__assert_fail@plt+0x17da8>
   29800:	mov	r0, #0
   29804:	add	sp, sp, #1072	; 0x430
   29808:	add	sp, sp, #12
   2980c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29810:	add	r6, sp, #56	; 0x38
   29814:	mov	r1, r3
   29818:	sub	r2, r6, #4
   2981c:	ldr	r0, [sp, #16]
   29820:	bl	29054 <__assert_fail@plt+0x176b4>
   29824:	ldr	r3, [sp, #52]	; 0x34
   29828:	str	r3, [sp, #28]
   2982c:	str	r0, [sp, #8]
   29830:	b	29280 <__assert_fail@plt+0x178e0>
   29834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29838:	sub	sp, sp, #60	; 0x3c
   2983c:	ldrb	r6, [r0]
   29840:	str	r0, [sp, #4]
   29844:	str	r1, [sp, #12]
   29848:	cmp	r6, #0
   2984c:	beq	29d98 <__assert_fail@plt+0x183f8>
   29850:	ldrb	r5, [r1]
   29854:	mov	r4, r1
   29858:	cmp	r5, #0
   2985c:	beq	29aa0 <__assert_fail@plt+0x18100>
   29860:	mov	fp, r0
   29864:	bl	11778 <__ctype_b_loc@plt>
   29868:	add	r8, r4, #1
   2986c:	mov	r9, #1
   29870:	ldr	sl, [r0]
   29874:	b	29884 <__assert_fail@plt+0x17ee4>
   29878:	ldrb	r5, [r8], #1
   2987c:	cmp	r5, #0
   29880:	beq	298f0 <__assert_fail@plt+0x17f50>
   29884:	sxth	r7, r6
   29888:	mov	r4, r6
   2988c:	lsl	r3, r7, #1
   29890:	ldrh	r3, [sl, r3]
   29894:	tst	r3, #256	; 0x100
   29898:	beq	298a8 <__assert_fail@plt+0x17f08>
   2989c:	bl	11748 <__ctype_tolower_loc@plt>
   298a0:	ldr	r3, [r0]
   298a4:	ldr	r4, [r3, r7, lsl #2]
   298a8:	sxth	r6, r5
   298ac:	lsl	r3, r6, #1
   298b0:	ldrh	r3, [sl, r3]
   298b4:	tst	r3, #256	; 0x100
   298b8:	beq	298c8 <__assert_fail@plt+0x17f28>
   298bc:	bl	11748 <__ctype_tolower_loc@plt>
   298c0:	ldr	r3, [r0]
   298c4:	ldr	r5, [r3, r6, lsl #2]
   298c8:	ldrb	r6, [fp, #1]!
   298cc:	cmp	r4, r5
   298d0:	movne	r9, #0
   298d4:	andeq	r9, r9, #1
   298d8:	mov	r4, r8
   298dc:	cmp	r6, #0
   298e0:	bne	29878 <__assert_fail@plt+0x17ed8>
   298e4:	ldrb	r3, [r4]
   298e8:	cmp	r3, #0
   298ec:	bne	29aac <__assert_fail@plt+0x1810c>
   298f0:	cmp	r9, #0
   298f4:	bne	29aa0 <__assert_fail@plt+0x18100>
   298f8:	ldr	r3, [sp, #12]
   298fc:	sub	r4, r4, r3
   29900:	ldr	r3, [sp, #4]
   29904:	cmp	r4, #31
   29908:	add	r3, r3, #1
   2990c:	str	r3, [sp, #4]
   29910:	sub	r5, r4, #1
   29914:	bls	29934 <__assert_fail@plt+0x17f94>
   29918:	mov	r3, r4
   2991c:	ldr	r2, [sp, #12]
   29920:	mov	r1, r5
   29924:	ldr	r0, [sp, #4]
   29928:	bl	29244 <__assert_fail@plt+0x178a4>
   2992c:	add	sp, sp, #60	; 0x3c
   29930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29934:	cmp	r4, #2
   29938:	bhi	29ab8 <__assert_fail@plt+0x18118>
   2993c:	mov	r8, r5
   29940:	mov	r3, #1
   29944:	str	r3, [sp, #32]
   29948:	str	r3, [sp, #52]	; 0x34
   2994c:	ldr	r3, [sp, #12]
   29950:	ldr	r6, [sp, #32]
   29954:	mov	r2, r8
   29958:	add	r1, r3, r6
   2995c:	mov	r0, r3
   29960:	bl	117f0 <strncasecmp@plt>
   29964:	subs	fp, r0, #0
   29968:	bne	29bdc <__assert_fail@plt+0x1823c>
   2996c:	sub	r3, r8, #1
   29970:	str	r3, [sp, #36]	; 0x24
   29974:	mov	r0, r5
   29978:	sub	r3, r4, r6
   2997c:	str	r3, [sp, #44]	; 0x2c
   29980:	rsb	r3, r8, #1
   29984:	str	fp, [sp, #16]
   29988:	str	fp, [sp, #8]
   2998c:	str	r3, [sp, #40]	; 0x28
   29990:	str	r8, [sp, #24]
   29994:	ldr	r3, [sp, #8]
   29998:	mov	r1, #0
   2999c:	add	r3, r4, r3
   299a0:	sub	r2, r3, r0
   299a4:	mov	r5, r3
   299a8:	str	r3, [sp, #20]
   299ac:	ldr	r3, [sp, #4]
   299b0:	add	r0, r3, r0
   299b4:	bl	1185c <memchr@plt>
   299b8:	adds	r3, r5, #0
   299bc:	movne	r3, #1
   299c0:	cmp	r0, #0
   299c4:	movne	r3, #0
   299c8:	cmp	r3, #0
   299cc:	beq	29aac <__assert_fail@plt+0x1810c>
   299d0:	ldr	r3, [sp, #24]
   299d4:	ldr	r2, [sp, #16]
   299d8:	cmp	r3, r2
   299dc:	movcs	r6, r3
   299e0:	movcc	r6, r2
   299e4:	cmp	r4, r6
   299e8:	bls	29ad8 <__assert_fail@plt+0x18138>
   299ec:	bl	11778 <__ctype_b_loc@plt>
   299f0:	ldr	r3, [sp, #8]
   299f4:	add	r8, r6, r3
   299f8:	ldr	r3, [sp, #4]
   299fc:	add	r8, r3, r8
   29a00:	ldr	r3, [sp, #12]
   29a04:	add	sl, r3, r6
   29a08:	ldr	r9, [r0]
   29a0c:	b	29a1c <__assert_fail@plt+0x1807c>
   29a10:	add	r6, r6, #1
   29a14:	cmp	r4, r6
   29a18:	beq	29ad8 <__assert_fail@plt+0x18138>
   29a1c:	ldrb	r3, [sl], #1
   29a20:	mov	r7, r3
   29a24:	sxth	r5, r3
   29a28:	lsl	r3, r5, #1
   29a2c:	ldrh	r3, [r9, r3]
   29a30:	tst	r3, #256	; 0x100
   29a34:	beq	29a44 <__assert_fail@plt+0x180a4>
   29a38:	bl	11748 <__ctype_tolower_loc@plt>
   29a3c:	ldr	r3, [r0]
   29a40:	ldr	r7, [r3, r5, lsl #2]
   29a44:	ldrb	r3, [r8], #1
   29a48:	mov	r2, r3
   29a4c:	sxth	r5, r3
   29a50:	lsl	r3, r5, #1
   29a54:	ldrh	r3, [r9, r3]
   29a58:	tst	r3, #256	; 0x100
   29a5c:	beq	29a6c <__assert_fail@plt+0x180cc>
   29a60:	bl	11748 <__ctype_tolower_loc@plt>
   29a64:	ldr	r3, [r0]
   29a68:	ldr	r2, [r3, r5, lsl #2]
   29a6c:	cmp	r7, r2
   29a70:	beq	29a10 <__assert_fail@plt+0x18070>
   29a74:	cmp	r4, r6
   29a78:	bls	29ad8 <__assert_fail@plt+0x18138>
   29a7c:	ldr	r3, [sp, #40]	; 0x28
   29a80:	ldr	r2, [sp, #8]
   29a84:	add	fp, r3, r2
   29a88:	add	r3, fp, r6
   29a8c:	str	r3, [sp, #8]
   29a90:	mov	r3, #0
   29a94:	str	r3, [sp, #16]
   29a98:	ldr	r0, [sp, #20]
   29a9c:	b	29994 <__assert_fail@plt+0x17ff4>
   29aa0:	ldr	r0, [sp, #4]
   29aa4:	add	sp, sp, #60	; 0x3c
   29aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29aac:	mov	r0, #0
   29ab0:	add	sp, sp, #60	; 0x3c
   29ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ab8:	add	r2, sp, #52	; 0x34
   29abc:	mov	r1, r4
   29ac0:	ldr	r0, [sp, #12]
   29ac4:	bl	29054 <__assert_fail@plt+0x176b4>
   29ac8:	ldr	r3, [sp, #52]	; 0x34
   29acc:	str	r3, [sp, #32]
   29ad0:	mov	r8, r0
   29ad4:	b	2994c <__assert_fail@plt+0x17fac>
   29ad8:	ldr	r5, [sp, #24]
   29adc:	ldr	r7, [sp, #16]
   29ae0:	ldr	r6, [sp, #36]	; 0x24
   29ae4:	cmp	r5, r7
   29ae8:	bls	29da4 <__assert_fail@plt+0x18404>
   29aec:	bl	11778 <__ctype_b_loc@plt>
   29af0:	ldr	r1, [sp, #8]
   29af4:	str	r4, [sp, #28]
   29af8:	add	r3, r5, r1
   29afc:	ldr	r1, [sp, #4]
   29b00:	add	r9, r1, r3
   29b04:	ldr	r1, [sp, #12]
   29b08:	sub	r3, r7, #1
   29b0c:	add	fp, r1, r5
   29b10:	ldr	sl, [r0]
   29b14:	mov	r4, sl
   29b18:	mov	sl, r9
   29b1c:	mov	r9, r3
   29b20:	b	29b30 <__assert_fail@plt+0x18190>
   29b24:	cmp	r3, r9
   29b28:	beq	29bd0 <__assert_fail@plt+0x18230>
   29b2c:	mov	r6, r3
   29b30:	ldrb	r3, [fp, #-1]!
   29b34:	add	r8, r6, #1
   29b38:	mov	r7, r3
   29b3c:	sxth	r5, r3
   29b40:	lsl	r3, r5, #1
   29b44:	ldrh	r3, [r4, r3]
   29b48:	tst	r3, #256	; 0x100
   29b4c:	beq	29b5c <__assert_fail@plt+0x181bc>
   29b50:	bl	11748 <__ctype_tolower_loc@plt>
   29b54:	ldr	r3, [r0]
   29b58:	ldr	r7, [r3, r5, lsl #2]
   29b5c:	ldrb	r3, [sl, #-1]!
   29b60:	mov	r1, r3
   29b64:	sxth	r5, r3
   29b68:	lsl	r3, r5, #1
   29b6c:	ldrh	r3, [r4, r3]
   29b70:	tst	r3, #256	; 0x100
   29b74:	beq	29b84 <__assert_fail@plt+0x181e4>
   29b78:	bl	11748 <__ctype_tolower_loc@plt>
   29b7c:	ldr	r3, [r0]
   29b80:	ldr	r1, [r3, r5, lsl #2]
   29b84:	cmp	r7, r1
   29b88:	sub	r3, r6, #1
   29b8c:	beq	29b24 <__assert_fail@plt+0x18184>
   29b90:	ldr	r4, [sp, #28]
   29b94:	ldr	r3, [sp, #16]
   29b98:	add	sl, r3, #1
   29b9c:	cmp	sl, r8
   29ba0:	bhi	29bc0 <__assert_fail@plt+0x18220>
   29ba4:	ldr	r3, [sp, #8]
   29ba8:	ldr	r2, [sp, #32]
   29bac:	add	r3, r3, r2
   29bb0:	str	r3, [sp, #8]
   29bb4:	ldr	r3, [sp, #44]	; 0x2c
   29bb8:	str	r3, [sp, #16]
   29bbc:	b	29a98 <__assert_fail@plt+0x180f8>
   29bc0:	ldmib	sp, {r2, r3}
   29bc4:	add	r0, r3, r2
   29bc8:	add	sp, sp, #60	; 0x3c
   29bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29bd0:	ldr	r4, [sp, #28]
   29bd4:	mov	r8, r6
   29bd8:	b	29b94 <__assert_fail@plt+0x181f4>
   29bdc:	sub	r3, r4, r8
   29be0:	cmp	r3, r8
   29be4:	movcc	r3, r8
   29be8:	add	r3, r3, #1
   29bec:	mov	r0, r5
   29bf0:	str	r3, [sp, #24]
   29bf4:	mov	r2, #0
   29bf8:	str	r3, [sp, #52]	; 0x34
   29bfc:	rsb	r3, r8, #1
   29c00:	str	r2, [sp, #8]
   29c04:	str	r3, [sp, #20]
   29c08:	ldr	r6, [sp, #8]
   29c0c:	ldr	r7, [sp, #4]
   29c10:	add	r3, r4, r6
   29c14:	sub	r2, r3, r0
   29c18:	mov	r1, #0
   29c1c:	add	r0, r7, r0
   29c20:	mov	r5, r3
   29c24:	str	r3, [sp, #16]
   29c28:	bl	1185c <memchr@plt>
   29c2c:	adds	r3, r5, #0
   29c30:	movne	r3, #1
   29c34:	cmp	r0, #0
   29c38:	movne	r3, #0
   29c3c:	cmp	r3, #0
   29c40:	beq	29aac <__assert_fail@plt+0x1810c>
   29c44:	cmp	r4, r8
   29c48:	bls	29cf4 <__assert_fail@plt+0x18354>
   29c4c:	bl	11778 <__ctype_b_loc@plt>
   29c50:	add	r3, r8, r6
   29c54:	add	r9, r7, r3
   29c58:	ldr	r3, [sp, #12]
   29c5c:	mov	r6, r8
   29c60:	add	sl, r3, r8
   29c64:	ldr	fp, [r0]
   29c68:	b	29c78 <__assert_fail@plt+0x182d8>
   29c6c:	add	r6, r6, #1
   29c70:	cmp	r4, r6
   29c74:	bls	29cf4 <__assert_fail@plt+0x18354>
   29c78:	ldrb	r3, [sl], #1
   29c7c:	mov	r7, r3
   29c80:	sxth	r5, r3
   29c84:	lsl	r3, r5, #1
   29c88:	ldrh	r3, [fp, r3]
   29c8c:	tst	r3, #256	; 0x100
   29c90:	beq	29ca0 <__assert_fail@plt+0x18300>
   29c94:	bl	11748 <__ctype_tolower_loc@plt>
   29c98:	ldr	r3, [r0]
   29c9c:	ldr	r7, [r3, r5, lsl #2]
   29ca0:	ldrb	r3, [r9], #1
   29ca4:	mov	r2, r3
   29ca8:	sxth	r5, r3
   29cac:	lsl	r3, r5, #1
   29cb0:	ldrh	r3, [fp, r3]
   29cb4:	tst	r3, #256	; 0x100
   29cb8:	beq	29cc8 <__assert_fail@plt+0x18328>
   29cbc:	bl	11748 <__ctype_tolower_loc@plt>
   29cc0:	ldr	r3, [r0]
   29cc4:	ldr	r2, [r3, r5, lsl #2]
   29cc8:	cmp	r7, r2
   29ccc:	beq	29c6c <__assert_fail@plt+0x182cc>
   29cd0:	cmp	r4, r6
   29cd4:	bls	29cf4 <__assert_fail@plt+0x18354>
   29cd8:	ldr	r3, [sp, #20]
   29cdc:	ldr	r2, [sp, #8]
   29ce0:	add	r9, r3, r2
   29ce4:	add	r3, r9, r6
   29ce8:	str	r3, [sp, #8]
   29cec:	ldr	r0, [sp, #16]
   29cf0:	b	29c08 <__assert_fail@plt+0x18268>
   29cf4:	subs	r6, r8, #1
   29cf8:	bcc	29bc0 <__assert_fail@plt+0x18220>
   29cfc:	bl	11778 <__ctype_b_loc@plt>
   29d00:	ldr	r3, [sp, #8]
   29d04:	ldr	r2, [sp, #4]
   29d08:	add	r3, r8, r3
   29d0c:	add	fp, r2, r3
   29d10:	ldr	r3, [sp, #12]
   29d14:	add	sl, r3, r8
   29d18:	ldr	r9, [r0]
   29d1c:	b	29d28 <__assert_fail@plt+0x18388>
   29d20:	cmn	r6, #1
   29d24:	beq	29bc0 <__assert_fail@plt+0x18220>
   29d28:	ldrb	r3, [sl, #-1]!
   29d2c:	mov	r7, r3
   29d30:	sxth	r5, r3
   29d34:	lsl	r3, r5, #1
   29d38:	ldrh	r3, [r9, r3]
   29d3c:	tst	r3, #256	; 0x100
   29d40:	beq	29d50 <__assert_fail@plt+0x183b0>
   29d44:	bl	11748 <__ctype_tolower_loc@plt>
   29d48:	ldr	r3, [r0]
   29d4c:	ldr	r7, [r3, r5, lsl #2]
   29d50:	ldrb	r3, [fp, #-1]!
   29d54:	mov	r2, r3
   29d58:	sxth	r5, r3
   29d5c:	lsl	r3, r5, #1
   29d60:	ldrh	r3, [r9, r3]
   29d64:	tst	r3, #256	; 0x100
   29d68:	beq	29d78 <__assert_fail@plt+0x183d8>
   29d6c:	bl	11748 <__ctype_tolower_loc@plt>
   29d70:	ldr	r3, [r0]
   29d74:	ldr	r2, [r3, r5, lsl #2]
   29d78:	cmp	r7, r2
   29d7c:	sub	r6, r6, #1
   29d80:	beq	29d20 <__assert_fail@plt+0x18380>
   29d84:	ldr	r3, [sp, #8]
   29d88:	ldr	r2, [sp, #24]
   29d8c:	add	r3, r3, r2
   29d90:	str	r3, [sp, #8]
   29d94:	b	29cec <__assert_fail@plt+0x1834c>
   29d98:	ldr	r4, [sp, #12]
   29d9c:	mov	r9, #1
   29da0:	b	298e4 <__assert_fail@plt+0x17f44>
   29da4:	ldr	r8, [sp, #24]
   29da8:	b	29b94 <__assert_fail@plt+0x181f4>
   29dac:	push	{r4, r5, r6, r7, r8, r9, lr}
   29db0:	mov	r6, #1
   29db4:	mov	ip, r6
   29db8:	mov	r8, r6
   29dbc:	mov	lr, #0
   29dc0:	mvn	r4, #0
   29dc4:	add	r3, ip, lr
   29dc8:	cmp	r3, r1
   29dcc:	add	r5, r0, r4
   29dd0:	bcs	29e00 <__assert_fail@plt+0x18460>
   29dd4:	ldrb	r5, [r5, ip]
   29dd8:	ldrb	r7, [r0, r3]
   29ddc:	cmp	r7, r5
   29de0:	bcs	29e6c <__assert_fail@plt+0x184cc>
   29de4:	mov	lr, r3
   29de8:	mov	ip, #1
   29dec:	sub	r6, r3, r4
   29df0:	add	r3, ip, lr
   29df4:	cmp	r3, r1
   29df8:	add	r5, r0, r4
   29dfc:	bcc	29dd4 <__assert_fail@plt+0x18434>
   29e00:	mov	r8, #1
   29e04:	mov	ip, r8
   29e08:	mov	r9, r8
   29e0c:	mov	lr, #0
   29e10:	mvn	r5, #0
   29e14:	str	r6, [r2]
   29e18:	add	r3, ip, lr
   29e1c:	cmp	r1, r3
   29e20:	add	r6, r0, r5
   29e24:	bls	29e54 <__assert_fail@plt+0x184b4>
   29e28:	ldrb	r6, [r6, ip]
   29e2c:	ldrb	r7, [r0, r3]
   29e30:	cmp	r7, r6
   29e34:	bls	29e84 <__assert_fail@plt+0x184e4>
   29e38:	mov	lr, r3
   29e3c:	mov	ip, #1
   29e40:	sub	r8, r3, r5
   29e44:	add	r3, ip, lr
   29e48:	cmp	r1, r3
   29e4c:	add	r6, r0, r5
   29e50:	bhi	29e28 <__assert_fail@plt+0x18488>
   29e54:	add	r0, r4, #1
   29e58:	add	r5, r5, #1
   29e5c:	cmp	r5, r0
   29e60:	strcs	r8, [r2]
   29e64:	movcs	r0, r5
   29e68:	pop	{r4, r5, r6, r7, r8, r9, pc}
   29e6c:	beq	29e9c <__assert_fail@plt+0x184fc>
   29e70:	mov	r4, lr
   29e74:	mov	r6, r8
   29e78:	add	lr, lr, #1
   29e7c:	mov	ip, #1
   29e80:	b	29dc4 <__assert_fail@plt+0x18424>
   29e84:	beq	29eb0 <__assert_fail@plt+0x18510>
   29e88:	mov	r5, lr
   29e8c:	mov	r8, r9
   29e90:	add	lr, lr, #1
   29e94:	mov	ip, #1
   29e98:	b	29e18 <__assert_fail@plt+0x18478>
   29e9c:	cmp	ip, r6
   29ea0:	addne	ip, ip, #1
   29ea4:	moveq	lr, r3
   29ea8:	moveq	ip, #1
   29eac:	b	29dc4 <__assert_fail@plt+0x18424>
   29eb0:	cmp	ip, r8
   29eb4:	addne	ip, ip, #1
   29eb8:	moveq	lr, r3
   29ebc:	moveq	ip, #1
   29ec0:	b	29e18 <__assert_fail@plt+0x18478>
   29ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ec8:	cmp	r3, #2
   29ecc:	sub	sp, sp, #1056	; 0x420
   29ed0:	sub	sp, sp, #4
   29ed4:	mov	r4, r3
   29ed8:	mov	r5, r0
   29edc:	mov	fp, r1
   29ee0:	mov	r8, r2
   29ee4:	bhi	2a248 <__assert_fail@plt+0x188a8>
   29ee8:	sub	r2, r4, #1
   29eec:	mov	r9, r2
   29ef0:	add	r6, sp, #32
   29ef4:	mov	r3, #1
   29ef8:	str	r3, [sp]
   29efc:	str	r3, [sp, #28]
   29f00:	add	r2, sp, #1040	; 0x410
   29f04:	sub	r3, r6, #4
   29f08:	add	r2, r2, #12
   29f0c:	str	r4, [r3, #4]!
   29f10:	cmp	r2, r3
   29f14:	bne	29f0c <__assert_fail@plt+0x1856c>
   29f18:	cmp	r4, #0
   29f1c:	subne	r3, r4, #1
   29f20:	subne	r1, r8, #1
   29f24:	beq	29f40 <__assert_fail@plt+0x185a0>
   29f28:	ldrb	r2, [r1, #1]!
   29f2c:	add	r0, sp, #1056	; 0x420
   29f30:	add	r2, r0, r2, lsl #2
   29f34:	str	r3, [r2, #-1024]	; 0xfffffc00
   29f38:	subs	r3, r3, #1
   29f3c:	bcs	29f28 <__assert_fail@plt+0x18588>
   29f40:	ldr	r7, [sp]
   29f44:	mov	r2, r9
   29f48:	add	r1, r8, r7
   29f4c:	mov	r0, r8
   29f50:	bl	1161c <memcmp@plt>
   29f54:	mov	r6, r9
   29f58:	subs	sl, r0, #0
   29f5c:	bne	2a0e0 <__assert_fail@plt+0x18740>
   29f60:	sub	r2, r9, #1
   29f64:	str	r2, [sp, #4]
   29f68:	add	r2, r8, r2
   29f6c:	mov	r3, r9
   29f70:	str	r2, [sp, #16]
   29f74:	sub	r2, r4, r7
   29f78:	str	r2, [sp, #12]
   29f7c:	rsb	r2, r3, #1
   29f80:	str	r8, [sp, #8]
   29f84:	mov	r9, sl
   29f88:	sub	r6, r4, #1
   29f8c:	str	r2, [sp, #20]
   29f90:	mov	r0, fp
   29f94:	mov	r8, r3
   29f98:	b	29fb8 <__assert_fail@plt+0x18618>
   29f9c:	ldr	r3, [sp]
   29fa0:	cmp	sl, #0
   29fa4:	cmpne	ip, r3
   29fa8:	mov	sl, #0
   29fac:	ldrcc	ip, [sp, #12]
   29fb0:	add	r9, r9, ip
   29fb4:	mov	r0, r7
   29fb8:	add	r7, r9, r4
   29fbc:	sub	r2, r7, r0
   29fc0:	mov	r1, #0
   29fc4:	add	r0, r5, r0
   29fc8:	bl	1185c <memchr@plt>
   29fcc:	adds	r3, r7, #0
   29fd0:	movne	r3, #1
   29fd4:	cmp	r0, #0
   29fd8:	movne	r3, #0
   29fdc:	cmp	r3, #0
   29fe0:	mov	r0, r3
   29fe4:	beq	2a21c <__assert_fail@plt+0x1887c>
   29fe8:	add	r3, r5, r7
   29fec:	add	r2, sp, #1056	; 0x420
   29ff0:	ldrb	r3, [r3, #-1]
   29ff4:	add	r3, r2, r3, lsl #2
   29ff8:	ldr	ip, [r3, #-1024]	; 0xfffffc00
   29ffc:	cmp	ip, #0
   2a000:	bne	29f9c <__assert_fail@plt+0x185fc>
   2a004:	cmp	sl, r8
   2a008:	movcs	r3, sl
   2a00c:	movcc	r3, r8
   2a010:	cmp	r3, r6
   2a014:	bcs	2a058 <__assert_fail@plt+0x186b8>
   2a018:	ldr	r1, [sp, #8]
   2a01c:	add	r2, r9, r3
   2a020:	ldrb	r0, [r1, r3]
   2a024:	ldrb	lr, [r5, r2]
   2a028:	add	r1, r1, r3
   2a02c:	add	r2, r5, r2
   2a030:	cmp	lr, r0
   2a034:	beq	2a04c <__assert_fail@plt+0x186ac>
   2a038:	b	2a0cc <__assert_fail@plt+0x1872c>
   2a03c:	ldrb	lr, [r1, #1]!
   2a040:	ldrb	r0, [r2, #1]!
   2a044:	cmp	lr, r0
   2a048:	bne	2a0cc <__assert_fail@plt+0x1872c>
   2a04c:	add	r3, r3, #1
   2a050:	cmp	r3, r6
   2a054:	bcc	2a03c <__assert_fail@plt+0x1869c>
   2a058:	cmp	sl, r8
   2a05c:	ldr	r1, [sp, #4]
   2a060:	bcs	2a26c <__assert_fail@plt+0x188cc>
   2a064:	ldr	r3, [sp, #4]
   2a068:	ldr	ip, [sp, #16]
   2a06c:	add	r2, r9, r3
   2a070:	ldrb	r3, [ip]
   2a074:	ldrb	r0, [r5, r2]
   2a078:	add	r2, r5, r2
   2a07c:	cmp	r3, r0
   2a080:	bne	2a26c <__assert_fail@plt+0x188cc>
   2a084:	mov	r0, ip
   2a088:	sub	fp, sl, #1
   2a08c:	b	2a0a4 <__assert_fail@plt+0x18704>
   2a090:	ldrb	lr, [r0, #-1]!
   2a094:	ldrb	ip, [r2, #-1]!
   2a098:	cmp	lr, ip
   2a09c:	bne	2a0b0 <__assert_fail@plt+0x18710>
   2a0a0:	mov	r1, r3
   2a0a4:	sub	r3, r1, #1
   2a0a8:	cmp	r3, fp
   2a0ac:	bne	2a090 <__assert_fail@plt+0x186f0>
   2a0b0:	add	sl, sl, #1
   2a0b4:	cmp	sl, r1
   2a0b8:	bhi	2a218 <__assert_fail@plt+0x18878>
   2a0bc:	ldr	r3, [sp]
   2a0c0:	ldr	sl, [sp, #12]
   2a0c4:	add	r9, r9, r3
   2a0c8:	b	29fb4 <__assert_fail@plt+0x18614>
   2a0cc:	ldr	r2, [sp, #20]
   2a0d0:	mov	sl, ip
   2a0d4:	add	r9, r2, r9
   2a0d8:	add	r9, r3, r9
   2a0dc:	b	29fb4 <__assert_fail@plt+0x18614>
   2a0e0:	sub	r3, r4, r9
   2a0e4:	cmp	r3, r9
   2a0e8:	movcc	r3, r9
   2a0ec:	sub	r1, r6, #1
   2a0f0:	add	r3, r3, #1
   2a0f4:	mov	r2, r9
   2a0f8:	str	r3, [sp, #8]
   2a0fc:	mov	r9, #0
   2a100:	add	r3, r8, r1
   2a104:	str	r3, [sp, #12]
   2a108:	sub	r6, r4, #1
   2a10c:	add	r3, r8, r2
   2a110:	mov	r0, fp
   2a114:	mov	sl, r9
   2a118:	mov	fp, r8
   2a11c:	mov	r8, r4
   2a120:	mov	r4, r2
   2a124:	str	r3, [sp]
   2a128:	rsb	r3, r2, #1
   2a12c:	str	r1, [sp, #4]
   2a130:	str	r3, [sp, #16]
   2a134:	add	r7, r9, r8
   2a138:	sub	r2, r7, r0
   2a13c:	mov	r1, sl
   2a140:	add	r0, r5, r0
   2a144:	bl	1185c <memchr@plt>
   2a148:	cmp	r7, #0
   2a14c:	clz	r0, r0
   2a150:	lsr	r0, r0, #5
   2a154:	moveq	r0, #0
   2a158:	cmp	r0, #0
   2a15c:	beq	2a21c <__assert_fail@plt+0x1887c>
   2a160:	add	r2, r5, r7
   2a164:	add	r3, sp, #1056	; 0x420
   2a168:	ldrb	r2, [r2, #-1]
   2a16c:	add	r2, r3, r2, lsl #2
   2a170:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   2a174:	cmp	r2, #0
   2a178:	bne	2a230 <__assert_fail@plt+0x18890>
   2a17c:	cmp	r4, r6
   2a180:	bcs	2a1cc <__assert_fail@plt+0x1882c>
   2a184:	ldr	r3, [sp]
   2a188:	add	r1, r9, r4
   2a18c:	ldrb	r0, [r3]
   2a190:	ldrb	r2, [r5, r1]
   2a194:	add	r1, r5, r1
   2a198:	cmp	r0, r2
   2a19c:	movne	r2, r4
   2a1a0:	bne	2a228 <__assert_fail@plt+0x18888>
   2a1a4:	ldr	r0, [sp]
   2a1a8:	mov	r2, r4
   2a1ac:	b	2a1c0 <__assert_fail@plt+0x18820>
   2a1b0:	ldrb	ip, [r0, #1]!
   2a1b4:	ldrb	r3, [r1, #1]!
   2a1b8:	cmp	ip, r3
   2a1bc:	bne	2a228 <__assert_fail@plt+0x18888>
   2a1c0:	add	r2, r2, #1
   2a1c4:	cmp	r2, r6
   2a1c8:	bcc	2a1b0 <__assert_fail@plt+0x18810>
   2a1cc:	ldr	r3, [sp, #4]
   2a1d0:	cmn	r3, #1
   2a1d4:	beq	2a218 <__assert_fail@plt+0x18878>
   2a1d8:	ldr	r3, [sp, #4]
   2a1dc:	add	r1, r9, r3
   2a1e0:	ldr	r3, [sp, #12]
   2a1e4:	ldrb	r2, [r5, r1]
   2a1e8:	add	r1, r5, r1
   2a1ec:	ldrb	r0, [r3]
   2a1f0:	cmp	r0, r2
   2a1f4:	bne	2a23c <__assert_fail@plt+0x1889c>
   2a1f8:	mov	r2, r3
   2a1fc:	b	2a210 <__assert_fail@plt+0x18870>
   2a200:	ldrb	r0, [r2, #-1]!
   2a204:	ldrb	r3, [r1, #-1]!
   2a208:	cmp	r0, r3
   2a20c:	bne	2a23c <__assert_fail@plt+0x1889c>
   2a210:	cmp	fp, r2
   2a214:	bne	2a200 <__assert_fail@plt+0x18860>
   2a218:	add	r0, r5, r9
   2a21c:	add	sp, sp, #1056	; 0x420
   2a220:	add	sp, sp, #4
   2a224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a228:	ldr	r3, [sp, #16]
   2a22c:	add	r9, r3, r9
   2a230:	add	r9, r9, r2
   2a234:	mov	r0, r7
   2a238:	b	2a134 <__assert_fail@plt+0x18794>
   2a23c:	ldr	r3, [sp, #8]
   2a240:	add	r9, r9, r3
   2a244:	b	2a234 <__assert_fail@plt+0x18894>
   2a248:	add	r6, sp, #32
   2a24c:	mov	r1, r3
   2a250:	sub	r2, r6, #4
   2a254:	mov	r0, r8
   2a258:	bl	29dac <__assert_fail@plt+0x1840c>
   2a25c:	ldr	r3, [sp, #28]
   2a260:	str	r3, [sp]
   2a264:	mov	r9, r0
   2a268:	b	29f00 <__assert_fail@plt+0x18560>
   2a26c:	mov	r1, r8
   2a270:	b	2a0b0 <__assert_fail@plt+0x18710>
   2a274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a278:	sub	sp, sp, #36	; 0x24
   2a27c:	ldrb	r2, [r0]
   2a280:	cmp	r2, #0
   2a284:	beq	2a608 <__assert_fail@plt+0x18c68>
   2a288:	ldrb	ip, [r1]
   2a28c:	cmp	ip, #0
   2a290:	beq	2a338 <__assert_fail@plt+0x18998>
   2a294:	mov	r8, r0
   2a298:	add	lr, r1, #1
   2a29c:	mov	sl, #1
   2a2a0:	b	2a2b0 <__assert_fail@plt+0x18910>
   2a2a4:	ldrb	ip, [lr], #1
   2a2a8:	cmp	ip, #0
   2a2ac:	beq	2a2d8 <__assert_fail@plt+0x18938>
   2a2b0:	cmp	ip, r2
   2a2b4:	movne	sl, #0
   2a2b8:	andeq	sl, sl, #1
   2a2bc:	ldrb	r2, [r8, #1]!
   2a2c0:	mov	r6, lr
   2a2c4:	cmp	r2, #0
   2a2c8:	bne	2a2a4 <__assert_fail@plt+0x18904>
   2a2cc:	ldrb	r3, [r6]
   2a2d0:	cmp	r3, #0
   2a2d4:	bne	2a340 <__assert_fail@plt+0x189a0>
   2a2d8:	cmp	sl, #0
   2a2dc:	bne	2a338 <__assert_fail@plt+0x18998>
   2a2e0:	mov	r4, r1
   2a2e4:	mov	r5, r0
   2a2e8:	ldrb	r1, [r1]
   2a2ec:	add	r0, r0, #1
   2a2f0:	bl	117b4 <strchr@plt>
   2a2f4:	sub	r4, r6, r4
   2a2f8:	subs	r7, r0, #0
   2a2fc:	beq	2a340 <__assert_fail@plt+0x189a0>
   2a300:	cmp	r4, #1
   2a304:	beq	2a600 <__assert_fail@plt+0x18c60>
   2a308:	add	r0, r5, r4
   2a30c:	cmp	r7, r0
   2a310:	subls	r1, r0, r7
   2a314:	movhi	r1, #1
   2a318:	cmp	r4, #31
   2a31c:	sub	r6, r6, r4
   2a320:	mov	r8, r1
   2a324:	bls	2a34c <__assert_fail@plt+0x189ac>
   2a328:	mov	r3, r4
   2a32c:	mov	r2, r6
   2a330:	mov	r0, r7
   2a334:	bl	29ec4 <__assert_fail@plt+0x18524>
   2a338:	add	sp, sp, #36	; 0x24
   2a33c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a340:	mov	r0, #0
   2a344:	add	sp, sp, #36	; 0x24
   2a348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a34c:	cmp	r4, #2
   2a350:	bhi	2a5d8 <__assert_fail@plt+0x18c38>
   2a354:	sub	r9, r4, #1
   2a358:	mov	r3, #1
   2a35c:	str	r3, [sp, #8]
   2a360:	str	r3, [sp, #28]
   2a364:	ldr	r5, [sp, #8]
   2a368:	mov	r2, r9
   2a36c:	add	r1, r6, r5
   2a370:	mov	r0, r6
   2a374:	bl	1161c <memcmp@plt>
   2a378:	subs	fp, r0, #0
   2a37c:	bne	2a4b4 <__assert_fail@plt+0x18b14>
   2a380:	sub	r3, r9, #1
   2a384:	str	r3, [sp, #4]
   2a388:	add	r3, r6, r3
   2a38c:	str	r3, [sp, #20]
   2a390:	mov	sl, fp
   2a394:	sub	r3, r4, r5
   2a398:	mov	r0, r8
   2a39c:	str	r3, [sp, #16]
   2a3a0:	rsb	r3, r9, #1
   2a3a4:	str	r3, [sp, #12]
   2a3a8:	add	r5, r4, sl
   2a3ac:	sub	r2, r5, r0
   2a3b0:	mov	r1, #0
   2a3b4:	add	r0, r7, r0
   2a3b8:	bl	1185c <memchr@plt>
   2a3bc:	adds	r3, r5, #0
   2a3c0:	movne	r3, #1
   2a3c4:	cmp	r0, #0
   2a3c8:	movne	r3, #0
   2a3cc:	cmp	r3, #0
   2a3d0:	mov	r0, r3
   2a3d4:	beq	2a338 <__assert_fail@plt+0x18998>
   2a3d8:	cmp	r9, fp
   2a3dc:	movcs	r3, r9
   2a3e0:	movcc	r3, fp
   2a3e4:	cmp	r4, r3
   2a3e8:	bls	2a428 <__assert_fail@plt+0x18a88>
   2a3ec:	add	r2, r3, sl
   2a3f0:	ldrb	r1, [r6, r3]
   2a3f4:	ldrb	r0, [r7, r2]
   2a3f8:	add	ip, r6, r3
   2a3fc:	add	r2, r7, r2
   2a400:	cmp	r0, r1
   2a404:	beq	2a41c <__assert_fail@plt+0x18a7c>
   2a408:	b	2a4a0 <__assert_fail@plt+0x18b00>
   2a40c:	ldrb	r0, [ip, #1]!
   2a410:	ldrb	r1, [r2, #1]!
   2a414:	cmp	r0, r1
   2a418:	bne	2a4a0 <__assert_fail@plt+0x18b00>
   2a41c:	add	r3, r3, #1
   2a420:	cmp	r4, r3
   2a424:	bne	2a40c <__assert_fail@plt+0x18a6c>
   2a428:	cmp	r9, fp
   2a42c:	ldr	r1, [sp, #4]
   2a430:	bls	2a5f8 <__assert_fail@plt+0x18c58>
   2a434:	ldr	r3, [sp, #4]
   2a438:	ldr	ip, [sp, #20]
   2a43c:	add	r2, sl, r3
   2a440:	ldrb	r3, [ip]
   2a444:	ldrb	r0, [r7, r2]
   2a448:	add	r2, r7, r2
   2a44c:	cmp	r3, r0
   2a450:	bne	2a5f8 <__assert_fail@plt+0x18c58>
   2a454:	mov	r0, ip
   2a458:	sub	r8, fp, #1
   2a45c:	b	2a474 <__assert_fail@plt+0x18ad4>
   2a460:	ldrb	lr, [r0, #-1]!
   2a464:	ldrb	ip, [r2, #-1]!
   2a468:	cmp	lr, ip
   2a46c:	bne	2a480 <__assert_fail@plt+0x18ae0>
   2a470:	mov	r1, r3
   2a474:	sub	r3, r1, #1
   2a478:	cmp	r3, r8
   2a47c:	bne	2a460 <__assert_fail@plt+0x18ac0>
   2a480:	add	fp, fp, #1
   2a484:	cmp	fp, r1
   2a488:	bhi	2a614 <__assert_fail@plt+0x18c74>
   2a48c:	ldr	r3, [sp, #8]
   2a490:	ldr	fp, [sp, #16]
   2a494:	add	sl, sl, r3
   2a498:	mov	r0, r5
   2a49c:	b	2a3a8 <__assert_fail@plt+0x18a08>
   2a4a0:	ldr	r2, [sp, #12]
   2a4a4:	mov	fp, #0
   2a4a8:	add	sl, r2, sl
   2a4ac:	add	sl, sl, r3
   2a4b0:	b	2a498 <__assert_fail@plt+0x18af8>
   2a4b4:	sub	r3, r4, r9
   2a4b8:	cmp	r3, r9
   2a4bc:	movcc	r3, r9
   2a4c0:	sub	r2, r9, #1
   2a4c4:	add	r3, r3, #1
   2a4c8:	str	r3, [sp, #8]
   2a4cc:	mov	r0, r8
   2a4d0:	add	r3, r6, r2
   2a4d4:	mov	r5, #0
   2a4d8:	add	sl, r6, r9
   2a4dc:	mov	r8, r2
   2a4e0:	str	r3, [sp, #12]
   2a4e4:	rsb	r3, r9, #1
   2a4e8:	str	r3, [sp, #4]
   2a4ec:	add	fp, r4, r5
   2a4f0:	sub	r2, fp, r0
   2a4f4:	mov	r1, #0
   2a4f8:	add	r0, r7, r0
   2a4fc:	bl	1185c <memchr@plt>
   2a500:	adds	r3, fp, #0
   2a504:	movne	r3, #1
   2a508:	cmp	r0, #0
   2a50c:	movne	r3, #0
   2a510:	cmp	r3, #0
   2a514:	mov	r0, r3
   2a518:	beq	2a338 <__assert_fail@plt+0x18998>
   2a51c:	cmp	r4, r9
   2a520:	bls	2a568 <__assert_fail@plt+0x18bc8>
   2a524:	add	r1, r9, r5
   2a528:	ldrb	r0, [sl]
   2a52c:	ldrb	r2, [r7, r1]
   2a530:	add	r1, r7, r1
   2a534:	cmp	r0, r2
   2a538:	movne	r2, r9
   2a53c:	bne	2a5b8 <__assert_fail@plt+0x18c18>
   2a540:	mov	r0, sl
   2a544:	mov	r2, r9
   2a548:	b	2a55c <__assert_fail@plt+0x18bbc>
   2a54c:	ldrb	ip, [r0, #1]!
   2a550:	ldrb	r3, [r1, #1]!
   2a554:	cmp	ip, r3
   2a558:	bne	2a5b8 <__assert_fail@plt+0x18c18>
   2a55c:	add	r2, r2, #1
   2a560:	cmp	r4, r2
   2a564:	bhi	2a54c <__assert_fail@plt+0x18bac>
   2a568:	cmn	r8, #1
   2a56c:	beq	2a5ac <__assert_fail@plt+0x18c0c>
   2a570:	ldr	r3, [sp, #12]
   2a574:	add	r1, r5, r8
   2a578:	ldrb	r0, [r3]
   2a57c:	ldrb	r2, [r7, r1]
   2a580:	add	r1, r7, r1
   2a584:	cmp	r0, r2
   2a588:	bne	2a5cc <__assert_fail@plt+0x18c2c>
   2a58c:	mov	r2, r3
   2a590:	b	2a5a4 <__assert_fail@plt+0x18c04>
   2a594:	ldrb	r0, [r2, #-1]!
   2a598:	ldrb	r3, [r1, #-1]!
   2a59c:	cmp	r0, r3
   2a5a0:	bne	2a5cc <__assert_fail@plt+0x18c2c>
   2a5a4:	cmp	r6, r2
   2a5a8:	bne	2a594 <__assert_fail@plt+0x18bf4>
   2a5ac:	add	r0, r7, r5
   2a5b0:	add	sp, sp, #36	; 0x24
   2a5b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a5b8:	ldr	r3, [sp, #4]
   2a5bc:	add	r5, r3, r5
   2a5c0:	add	r5, r5, r2
   2a5c4:	mov	r0, fp
   2a5c8:	b	2a4ec <__assert_fail@plt+0x18b4c>
   2a5cc:	ldr	r3, [sp, #8]
   2a5d0:	add	r5, r5, r3
   2a5d4:	b	2a5c4 <__assert_fail@plt+0x18c24>
   2a5d8:	add	r2, sp, #28
   2a5dc:	mov	r1, r4
   2a5e0:	mov	r0, r6
   2a5e4:	bl	29dac <__assert_fail@plt+0x1840c>
   2a5e8:	ldr	r3, [sp, #28]
   2a5ec:	str	r3, [sp, #8]
   2a5f0:	mov	r9, r0
   2a5f4:	b	2a364 <__assert_fail@plt+0x189c4>
   2a5f8:	mov	r1, r9
   2a5fc:	b	2a480 <__assert_fail@plt+0x18ae0>
   2a600:	mov	r0, r7
   2a604:	b	2a338 <__assert_fail@plt+0x18998>
   2a608:	mov	r6, r1
   2a60c:	mov	sl, #1
   2a610:	b	2a2cc <__assert_fail@plt+0x1892c>
   2a614:	add	r0, r7, sl
   2a618:	b	2a338 <__assert_fail@plt+0x18998>
   2a61c:	ldr	r3, [pc, #8]	; 2a62c <__assert_fail@plt+0x18c8c>
   2a620:	push	{r4, lr}
   2a624:	ldr	r0, [r3]
   2a628:	bl	11784 <exit@plt>
   2a62c:			; <UNDEFINED> instruction: 0x0003e1bc
   2a630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a634:	mov	r5, r1
   2a638:	sub	sp, sp, #12
   2a63c:	mov	r4, r2
   2a640:	str	r2, [sp]
   2a644:	mov	r7, r3
   2a648:	mov	sl, r0
   2a64c:	bl	117a8 <strlen@plt>
   2a650:	ldr	fp, [r5]
   2a654:	cmp	fp, #0
   2a658:	beq	2a720 <__assert_fail@plt+0x18d80>
   2a65c:	mov	r3, #0
   2a660:	mov	r8, r0
   2a664:	str	r3, [sp, #4]
   2a668:	mov	r6, r3
   2a66c:	mvn	r9, #0
   2a670:	b	2a69c <__assert_fail@plt+0x18cfc>
   2a674:	bl	1161c <memcmp@plt>
   2a678:	ldr	r3, [sp, #4]
   2a67c:	cmp	r0, #0
   2a680:	movne	r3, #1
   2a684:	str	r3, [sp, #4]
   2a688:	ldr	fp, [r5, #4]!
   2a68c:	add	r6, r6, #1
   2a690:	cmp	fp, #0
   2a694:	add	r4, r4, r7
   2a698:	beq	2a6f8 <__assert_fail@plt+0x18d58>
   2a69c:	mov	r2, r8
   2a6a0:	mov	r1, sl
   2a6a4:	mov	r0, fp
   2a6a8:	bl	11958 <strncmp@plt>
   2a6ac:	cmp	r0, #0
   2a6b0:	mov	r0, fp
   2a6b4:	bne	2a688 <__assert_fail@plt+0x18ce8>
   2a6b8:	bl	117a8 <strlen@plt>
   2a6bc:	ldr	r3, [sp]
   2a6c0:	mov	r2, r7
   2a6c4:	mov	r1, r4
   2a6c8:	cmp	r8, r0
   2a6cc:	mla	r0, r7, r9, r3
   2a6d0:	beq	2a710 <__assert_fail@plt+0x18d70>
   2a6d4:	cmn	r9, #1
   2a6d8:	moveq	r9, r6
   2a6dc:	beq	2a688 <__assert_fail@plt+0x18ce8>
   2a6e0:	ldr	r3, [sp]
   2a6e4:	cmp	r3, #0
   2a6e8:	bne	2a674 <__assert_fail@plt+0x18cd4>
   2a6ec:	mov	r3, #1
   2a6f0:	str	r3, [sp, #4]
   2a6f4:	b	2a688 <__assert_fail@plt+0x18ce8>
   2a6f8:	ldr	r3, [sp, #4]
   2a6fc:	cmp	r3, #0
   2a700:	mvnne	r9, #1
   2a704:	mov	r0, r9
   2a708:	add	sp, sp, #12
   2a70c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a710:	mov	r9, r6
   2a714:	mov	r0, r9
   2a718:	add	sp, sp, #12
   2a71c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a720:	mvn	r9, #0
   2a724:	b	2a704 <__assert_fail@plt+0x18d64>
   2a728:	cmn	r2, #1
   2a72c:	push	{r4, r5, r6, lr}
   2a730:	mov	r2, #5
   2a734:	sub	sp, sp, #8
   2a738:	mov	r4, r1
   2a73c:	mov	r5, r0
   2a740:	ldreq	r1, [pc, #76]	; 2a794 <__assert_fail@plt+0x18df4>
   2a744:	ldrne	r1, [pc, #76]	; 2a798 <__assert_fail@plt+0x18df8>
   2a748:	mov	r0, #0
   2a74c:	bl	11628 <dcgettext@plt>
   2a750:	mov	r2, r4
   2a754:	mov	r1, #8
   2a758:	mov	r6, r0
   2a75c:	mov	r0, #0
   2a760:	bl	1a0b4 <__assert_fail@plt+0x8714>
   2a764:	mov	r1, r5
   2a768:	mov	r4, r0
   2a76c:	mov	r0, #1
   2a770:	bl	1a350 <__assert_fail@plt+0x89b0>
   2a774:	mov	r1, #0
   2a778:	mov	r3, r4
   2a77c:	mov	r2, r6
   2a780:	str	r0, [sp]
   2a784:	mov	r0, r1
   2a788:	bl	116d0 <error@plt>
   2a78c:	add	sp, sp, #8
   2a790:	pop	{r4, r5, r6, pc}
   2a794:	andeq	sp, r2, r0, ror r0
   2a798:	andeq	sp, r2, ip, lsl #1
   2a79c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a7a0:	mov	r7, r0
   2a7a4:	ldr	r9, [pc, #188]	; 2a868 <__assert_fail@plt+0x18ec8>
   2a7a8:	mov	r4, r1
   2a7ac:	mov	r8, r2
   2a7b0:	ldr	r1, [pc, #180]	; 2a86c <__assert_fail@plt+0x18ecc>
   2a7b4:	mov	r2, #5
   2a7b8:	mov	r0, #0
   2a7bc:	bl	11628 <dcgettext@plt>
   2a7c0:	ldr	r1, [r9]
   2a7c4:	bl	1194c <fputs@plt>
   2a7c8:	ldr	r5, [r7]
   2a7cc:	cmp	r5, #0
   2a7d0:	beq	2a858 <__assert_fail@plt+0x18eb8>
   2a7d4:	mov	fp, #0
   2a7d8:	ldr	sl, [pc, #144]	; 2a870 <__assert_fail@plt+0x18ed0>
   2a7dc:	mov	r6, fp
   2a7e0:	b	2a818 <__assert_fail@plt+0x18e78>
   2a7e4:	mov	r0, r5
   2a7e8:	ldr	r5, [r9]
   2a7ec:	bl	1a360 <__assert_fail@plt+0x89c0>
   2a7f0:	mov	r1, sl
   2a7f4:	mov	fp, r4
   2a7f8:	mov	r2, r0
   2a7fc:	mov	r0, r5
   2a800:	bl	117c0 <fprintf@plt>
   2a804:	ldr	r5, [r7, #4]!
   2a808:	add	r6, r6, #1
   2a80c:	cmp	r5, #0
   2a810:	add	r4, r4, r8
   2a814:	beq	2a858 <__assert_fail@plt+0x18eb8>
   2a818:	cmp	r6, #0
   2a81c:	mov	r1, r4
   2a820:	mov	r2, r8
   2a824:	mov	r0, fp
   2a828:	beq	2a7e4 <__assert_fail@plt+0x18e44>
   2a82c:	bl	1161c <memcmp@plt>
   2a830:	cmp	r0, #0
   2a834:	bne	2a7e4 <__assert_fail@plt+0x18e44>
   2a838:	mov	r0, r5
   2a83c:	ldr	r5, [r9]
   2a840:	bl	1a360 <__assert_fail@plt+0x89c0>
   2a844:	ldr	r1, [pc, #40]	; 2a874 <__assert_fail@plt+0x18ed4>
   2a848:	mov	r2, r0
   2a84c:	mov	r0, r5
   2a850:	bl	117c0 <fprintf@plt>
   2a854:	b	2a804 <__assert_fail@plt+0x18e64>
   2a858:	ldr	r1, [r9]
   2a85c:	mov	r0, #10
   2a860:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a864:	b	118f8 <putc@plt>
   2a868:	andeq	lr, r3, r8, lsl r2
   2a86c:	andeq	sp, r2, ip, lsr #1
   2a870:	andeq	sp, r2, r4, asr #1
   2a874:	andeq	sp, r2, ip, asr #1
   2a878:	push	{r4, r5, r6, r7, r8, lr}
   2a87c:	mov	r6, r1
   2a880:	mov	r4, r2
   2a884:	mov	r5, r3
   2a888:	mov	r7, r0
   2a88c:	ldr	r3, [sp, #24]
   2a890:	mov	r2, r5
   2a894:	mov	r1, r4
   2a898:	mov	r0, r6
   2a89c:	bl	2a630 <__assert_fail@plt+0x18c90>
   2a8a0:	cmp	r0, #0
   2a8a4:	popge	{r4, r5, r6, r7, r8, pc}
   2a8a8:	mov	r2, r0
   2a8ac:	mov	r1, r6
   2a8b0:	mov	r0, r7
   2a8b4:	bl	2a728 <__assert_fail@plt+0x18d88>
   2a8b8:	mov	r0, r4
   2a8bc:	ldr	r2, [sp, #24]
   2a8c0:	mov	r1, r5
   2a8c4:	bl	2a79c <__assert_fail@plt+0x18dfc>
   2a8c8:	ldr	r3, [sp, #28]
   2a8cc:	blx	r3
   2a8d0:	mvn	r0, #0
   2a8d4:	pop	{r4, r5, r6, r7, r8, pc}
   2a8d8:	push	{r4, r5, r6, r7, r8, lr}
   2a8dc:	ldr	r7, [r1]
   2a8e0:	cmp	r7, #0
   2a8e4:	beq	2a924 <__assert_fail@plt+0x18f84>
   2a8e8:	mov	r6, r3
   2a8ec:	mov	r8, r0
   2a8f0:	mov	r4, r2
   2a8f4:	mov	r5, r1
   2a8f8:	b	2a908 <__assert_fail@plt+0x18f68>
   2a8fc:	ldr	r7, [r5, #4]!
   2a900:	cmp	r7, #0
   2a904:	beq	2a924 <__assert_fail@plt+0x18f84>
   2a908:	mov	r1, r4
   2a90c:	mov	r2, r6
   2a910:	mov	r0, r8
   2a914:	bl	1161c <memcmp@plt>
   2a918:	add	r4, r4, r6
   2a91c:	cmp	r0, #0
   2a920:	bne	2a8fc <__assert_fail@plt+0x18f5c>
   2a924:	mov	r0, r7
   2a928:	pop	{r4, r5, r6, r7, r8, pc}
   2a92c:	push	{r4, r5, r6, lr}
   2a930:	mov	r4, r0
   2a934:	bl	116b8 <__fpending@plt>
   2a938:	mov	r6, r0
   2a93c:	mov	r0, r4
   2a940:	bl	115b0 <ferror@plt>
   2a944:	mov	r5, r0
   2a948:	mov	r0, r4
   2a94c:	bl	11868 <fclose@plt>
   2a950:	cmp	r5, #0
   2a954:	mov	r4, r0
   2a958:	bne	2a978 <__assert_fail@plt+0x18fd8>
   2a95c:	cmp	r0, #0
   2a960:	beq	2a970 <__assert_fail@plt+0x18fd0>
   2a964:	cmp	r6, #0
   2a968:	beq	2a994 <__assert_fail@plt+0x18ff4>
   2a96c:	mvn	r4, #0
   2a970:	mov	r0, r4
   2a974:	pop	{r4, r5, r6, pc}
   2a978:	cmp	r0, #0
   2a97c:	bne	2a96c <__assert_fail@plt+0x18fcc>
   2a980:	bl	117d8 <__errno_location@plt>
   2a984:	str	r4, [r0]
   2a988:	mvn	r4, #0
   2a98c:	mov	r0, r4
   2a990:	pop	{r4, r5, r6, pc}
   2a994:	bl	117d8 <__errno_location@plt>
   2a998:	ldr	r4, [r0]
   2a99c:	subs	r4, r4, #9
   2a9a0:	mvnne	r4, #0
   2a9a4:	mov	r0, r4
   2a9a8:	pop	{r4, r5, r6, pc}
   2a9ac:	ldr	ip, [r0, #4]
   2a9b0:	cmp	ip, r1
   2a9b4:	bcs	2aa30 <__assert_fail@plt+0x19090>
   2a9b8:	cmp	r3, #0
   2a9bc:	push	{r4, r5, r6, r7, r8, lr}
   2a9c0:	mov	r6, r3
   2a9c4:	mov	r7, r2
   2a9c8:	mov	r5, r1
   2a9cc:	mov	r4, r0
   2a9d0:	bne	2aa04 <__assert_fail@plt+0x19064>
   2a9d4:	ldr	r0, [r4, #8]
   2a9d8:	mul	r1, r6, r5
   2a9dc:	cmp	r0, r7
   2a9e0:	beq	2aa40 <__assert_fail@plt+0x190a0>
   2a9e4:	bl	1babc <__assert_fail@plt+0xa11c>
   2a9e8:	subs	r7, r0, #0
   2a9ec:	beq	2aa6c <__assert_fail@plt+0x190cc>
   2a9f0:	mov	r3, #1
   2a9f4:	stmib	r4, {r5, r7}
   2a9f8:	str	r5, [r4]
   2a9fc:	mov	r0, r3
   2aa00:	pop	{r4, r5, r6, r7, r8, pc}
   2aa04:	mov	r1, r3
   2aa08:	mvn	r0, #0
   2aa0c:	bl	2acbc <__assert_fail@plt+0x1931c>
   2aa10:	cmp	r5, r0
   2aa14:	bls	2a9d4 <__assert_fail@plt+0x19034>
   2aa18:	bl	117d8 <__errno_location@plt>
   2aa1c:	mov	r3, #0
   2aa20:	mov	r2, #12
   2aa24:	str	r2, [r0]
   2aa28:	mov	r0, r3
   2aa2c:	pop	{r4, r5, r6, r7, r8, pc}
   2aa30:	mov	r3, #1
   2aa34:	str	r1, [r0]
   2aa38:	mov	r0, r3
   2aa3c:	bx	lr
   2aa40:	mov	r0, r1
   2aa44:	bl	1ba3c <__assert_fail@plt+0xa09c>
   2aa48:	subs	r7, r0, #0
   2aa4c:	beq	2aa6c <__assert_fail@plt+0x190cc>
   2aa50:	ldr	r1, [r4, #8]
   2aa54:	cmp	r1, #0
   2aa58:	beq	2a9f0 <__assert_fail@plt+0x19050>
   2aa5c:	ldr	r2, [r4]
   2aa60:	mul	r2, r2, r6
   2aa64:	bl	115d4 <memcpy@plt>
   2aa68:	b	2a9f0 <__assert_fail@plt+0x19050>
   2aa6c:	mov	r3, #0
   2aa70:	b	2a9fc <__assert_fail@plt+0x1905c>
   2aa74:	push	{lr}		; (str lr, [sp, #-4]!)
   2aa78:	sub	sp, sp, #268	; 0x10c
   2aa7c:	add	r1, sp, #4
   2aa80:	ldr	r2, [pc, #60]	; 2aac4 <__assert_fail@plt+0x19124>
   2aa84:	bl	2ac18 <__assert_fail@plt+0x19278>
   2aa88:	cmp	r0, #0
   2aa8c:	movne	r0, #0
   2aa90:	bne	2aabc <__assert_fail@plt+0x1911c>
   2aa94:	ldr	r1, [pc, #44]	; 2aac8 <__assert_fail@plt+0x19128>
   2aa98:	add	r0, sp, #4
   2aa9c:	bl	11544 <strcmp@plt>
   2aaa0:	cmp	r0, #0
   2aaa4:	beq	2aabc <__assert_fail@plt+0x1911c>
   2aaa8:	add	r0, sp, #4
   2aaac:	ldr	r1, [pc, #24]	; 2aacc <__assert_fail@plt+0x1912c>
   2aab0:	bl	11544 <strcmp@plt>
   2aab4:	adds	r0, r0, #0
   2aab8:	movne	r0, #1
   2aabc:	add	sp, sp, #268	; 0x10c
   2aac0:	pop	{pc}		; (ldr pc, [sp], #4)
   2aac4:	andeq	r0, r0, r1, lsl #2
   2aac8:	ldrdeq	sp, [r2], -r4
   2aacc:	ldrdeq	sp, [r2], -r8
   2aad0:	push	{r4, lr}
   2aad4:	mov	r0, #14
   2aad8:	bl	118b0 <nl_langinfo@plt>
   2aadc:	cmp	r0, #0
   2aae0:	beq	2aaf8 <__assert_fail@plt+0x19158>
   2aae4:	ldrb	r2, [r0]
   2aae8:	ldr	r3, [pc, #16]	; 2ab00 <__assert_fail@plt+0x19160>
   2aaec:	cmp	r2, #0
   2aaf0:	moveq	r0, r3
   2aaf4:	pop	{r4, pc}
   2aaf8:	ldr	r0, [pc]	; 2ab00 <__assert_fail@plt+0x19160>
   2aafc:	pop	{r4, pc}
   2ab00:	andeq	sp, r2, r0, ror #1
   2ab04:	cmn	r0, #-2147483631	; 0x80000011
   2ab08:	bls	2ab14 <__assert_fail@plt+0x19174>
   2ab0c:	mov	r0, #0
   2ab10:	bx	lr
   2ab14:	push	{r4, lr}
   2ab18:	add	r0, r0, #16
   2ab1c:	bl	1170c <malloc@plt>
   2ab20:	cmp	r0, #0
   2ab24:	beq	2ab4c <__assert_fail@plt+0x191ac>
   2ab28:	cmn	r0, #9
   2ab2c:	addls	r3, r0, #8
   2ab30:	bicls	r2, r3, #15
   2ab34:	movhi	r2, #0
   2ab38:	rsb	r3, r0, #8
   2ab3c:	add	r3, r3, r2
   2ab40:	add	r0, r0, r3
   2ab44:	strb	r3, [r0, #-1]
   2ab48:	pop	{r4, pc}
   2ab4c:	mov	r0, #0
   2ab50:	pop	{r4, pc}
   2ab54:	tst	r0, #7
   2ab58:	bne	2ab70 <__assert_fail@plt+0x191d0>
   2ab5c:	tst	r0, #8
   2ab60:	bxeq	lr
   2ab64:	ldrb	r3, [r0, #-1]
   2ab68:	sub	r0, r0, r3
   2ab6c:	b	1b944 <__assert_fail@plt+0x9fa4>
   2ab70:	push	{r4, lr}
   2ab74:	bl	11964 <abort@plt>
   2ab78:	push	{r4, lr}
   2ab7c:	mov	r4, r0
   2ab80:	bl	11574 <wcwidth@plt>
   2ab84:	cmp	r0, #0
   2ab88:	popge	{r4, pc}
   2ab8c:	mov	r0, r4
   2ab90:	bl	1164c <iswcntrl@plt>
   2ab94:	clz	r0, r0
   2ab98:	lsr	r0, r0, #5
   2ab9c:	pop	{r4, pc}
   2aba0:	mov	r3, r1
   2aba4:	push	{r4, r5, r6, lr}
   2aba8:	mov	r4, r1
   2abac:	ldr	r1, [r3], #16
   2abb0:	mov	r5, r0
   2abb4:	cmp	r1, r3
   2abb8:	strne	r1, [r0]
   2abbc:	beq	2abe0 <__assert_fail@plt+0x19240>
   2abc0:	ldrb	r3, [r4, #8]
   2abc4:	ldr	r2, [r4, #4]
   2abc8:	cmp	r3, #0
   2abcc:	strb	r3, [r5, #8]
   2abd0:	ldrne	r3, [r4, #12]
   2abd4:	str	r2, [r5, #4]
   2abd8:	strne	r3, [r5, #12]
   2abdc:	pop	{r4, r5, r6, pc}
   2abe0:	add	r3, r0, #16
   2abe4:	mov	r0, r3
   2abe8:	ldr	r2, [r4, #4]
   2abec:	bl	115d4 <memcpy@plt>
   2abf0:	str	r0, [r5]
   2abf4:	b	2abc0 <__assert_fail@plt+0x19220>
   2abf8:	ldr	r3, [pc, #20]	; 2ac14 <__assert_fail@plt+0x19274>
   2abfc:	lsr	r2, r0, #5
   2ac00:	and	r0, r0, #31
   2ac04:	ldr	r3, [r3, r2, lsl #2]
   2ac08:	lsr	r0, r3, r0
   2ac0c:	and	r0, r0, #1
   2ac10:	bx	lr
   2ac14:	andeq	sp, r2, r8, ror #1
   2ac18:	push	{r4, r5, r6, lr}
   2ac1c:	mov	r5, r1
   2ac20:	mov	r1, #0
   2ac24:	mov	r4, r2
   2ac28:	bl	11898 <setlocale@plt>
   2ac2c:	subs	r6, r0, #0
   2ac30:	beq	2ac8c <__assert_fail@plt+0x192ec>
   2ac34:	bl	117a8 <strlen@plt>
   2ac38:	cmp	r4, r0
   2ac3c:	bhi	2ac74 <__assert_fail@plt+0x192d4>
   2ac40:	cmp	r4, #0
   2ac44:	bne	2ac50 <__assert_fail@plt+0x192b0>
   2ac48:	mov	r0, #34	; 0x22
   2ac4c:	pop	{r4, r5, r6, pc}
   2ac50:	sub	r4, r4, #1
   2ac54:	mov	r1, r6
   2ac58:	mov	r2, r4
   2ac5c:	mov	r0, r5
   2ac60:	bl	115d4 <memcpy@plt>
   2ac64:	mov	r3, #0
   2ac68:	strb	r3, [r5, r4]
   2ac6c:	mov	r0, #34	; 0x22
   2ac70:	pop	{r4, r5, r6, pc}
   2ac74:	add	r2, r0, #1
   2ac78:	mov	r1, r6
   2ac7c:	mov	r0, r5
   2ac80:	bl	115d4 <memcpy@plt>
   2ac84:	mov	r0, #0
   2ac88:	pop	{r4, r5, r6, pc}
   2ac8c:	cmp	r4, #0
   2ac90:	beq	2aca0 <__assert_fail@plt+0x19300>
   2ac94:	strb	r6, [r5]
   2ac98:	mov	r0, #22
   2ac9c:	pop	{r4, r5, r6, pc}
   2aca0:	mov	r0, #22
   2aca4:	pop	{r4, r5, r6, pc}
   2aca8:	mov	r1, #0
   2acac:	b	11898 <setlocale@plt>
   2acb0:	mov	r2, #3
   2acb4:	mov	r1, #0
   2acb8:	b	1b710 <__assert_fail@plt+0x9d70>
   2acbc:	subs	r2, r1, #1
   2acc0:	bxeq	lr
   2acc4:	bcc	2ae9c <__assert_fail@plt+0x194fc>
   2acc8:	cmp	r0, r1
   2accc:	bls	2ae80 <__assert_fail@plt+0x194e0>
   2acd0:	tst	r1, r2
   2acd4:	beq	2ae8c <__assert_fail@plt+0x194ec>
   2acd8:	clz	r3, r0
   2acdc:	clz	r2, r1
   2ace0:	sub	r3, r2, r3
   2ace4:	rsbs	r3, r3, #31
   2ace8:	addne	r3, r3, r3, lsl #1
   2acec:	mov	r2, #0
   2acf0:	addne	pc, pc, r3, lsl #2
   2acf4:	nop			; (mov r0, r0)
   2acf8:	cmp	r0, r1, lsl #31
   2acfc:	adc	r2, r2, r2
   2ad00:	subcs	r0, r0, r1, lsl #31
   2ad04:	cmp	r0, r1, lsl #30
   2ad08:	adc	r2, r2, r2
   2ad0c:	subcs	r0, r0, r1, lsl #30
   2ad10:	cmp	r0, r1, lsl #29
   2ad14:	adc	r2, r2, r2
   2ad18:	subcs	r0, r0, r1, lsl #29
   2ad1c:	cmp	r0, r1, lsl #28
   2ad20:	adc	r2, r2, r2
   2ad24:	subcs	r0, r0, r1, lsl #28
   2ad28:	cmp	r0, r1, lsl #27
   2ad2c:	adc	r2, r2, r2
   2ad30:	subcs	r0, r0, r1, lsl #27
   2ad34:	cmp	r0, r1, lsl #26
   2ad38:	adc	r2, r2, r2
   2ad3c:	subcs	r0, r0, r1, lsl #26
   2ad40:	cmp	r0, r1, lsl #25
   2ad44:	adc	r2, r2, r2
   2ad48:	subcs	r0, r0, r1, lsl #25
   2ad4c:	cmp	r0, r1, lsl #24
   2ad50:	adc	r2, r2, r2
   2ad54:	subcs	r0, r0, r1, lsl #24
   2ad58:	cmp	r0, r1, lsl #23
   2ad5c:	adc	r2, r2, r2
   2ad60:	subcs	r0, r0, r1, lsl #23
   2ad64:	cmp	r0, r1, lsl #22
   2ad68:	adc	r2, r2, r2
   2ad6c:	subcs	r0, r0, r1, lsl #22
   2ad70:	cmp	r0, r1, lsl #21
   2ad74:	adc	r2, r2, r2
   2ad78:	subcs	r0, r0, r1, lsl #21
   2ad7c:	cmp	r0, r1, lsl #20
   2ad80:	adc	r2, r2, r2
   2ad84:	subcs	r0, r0, r1, lsl #20
   2ad88:	cmp	r0, r1, lsl #19
   2ad8c:	adc	r2, r2, r2
   2ad90:	subcs	r0, r0, r1, lsl #19
   2ad94:	cmp	r0, r1, lsl #18
   2ad98:	adc	r2, r2, r2
   2ad9c:	subcs	r0, r0, r1, lsl #18
   2ada0:	cmp	r0, r1, lsl #17
   2ada4:	adc	r2, r2, r2
   2ada8:	subcs	r0, r0, r1, lsl #17
   2adac:	cmp	r0, r1, lsl #16
   2adb0:	adc	r2, r2, r2
   2adb4:	subcs	r0, r0, r1, lsl #16
   2adb8:	cmp	r0, r1, lsl #15
   2adbc:	adc	r2, r2, r2
   2adc0:	subcs	r0, r0, r1, lsl #15
   2adc4:	cmp	r0, r1, lsl #14
   2adc8:	adc	r2, r2, r2
   2adcc:	subcs	r0, r0, r1, lsl #14
   2add0:	cmp	r0, r1, lsl #13
   2add4:	adc	r2, r2, r2
   2add8:	subcs	r0, r0, r1, lsl #13
   2addc:	cmp	r0, r1, lsl #12
   2ade0:	adc	r2, r2, r2
   2ade4:	subcs	r0, r0, r1, lsl #12
   2ade8:	cmp	r0, r1, lsl #11
   2adec:	adc	r2, r2, r2
   2adf0:	subcs	r0, r0, r1, lsl #11
   2adf4:	cmp	r0, r1, lsl #10
   2adf8:	adc	r2, r2, r2
   2adfc:	subcs	r0, r0, r1, lsl #10
   2ae00:	cmp	r0, r1, lsl #9
   2ae04:	adc	r2, r2, r2
   2ae08:	subcs	r0, r0, r1, lsl #9
   2ae0c:	cmp	r0, r1, lsl #8
   2ae10:	adc	r2, r2, r2
   2ae14:	subcs	r0, r0, r1, lsl #8
   2ae18:	cmp	r0, r1, lsl #7
   2ae1c:	adc	r2, r2, r2
   2ae20:	subcs	r0, r0, r1, lsl #7
   2ae24:	cmp	r0, r1, lsl #6
   2ae28:	adc	r2, r2, r2
   2ae2c:	subcs	r0, r0, r1, lsl #6
   2ae30:	cmp	r0, r1, lsl #5
   2ae34:	adc	r2, r2, r2
   2ae38:	subcs	r0, r0, r1, lsl #5
   2ae3c:	cmp	r0, r1, lsl #4
   2ae40:	adc	r2, r2, r2
   2ae44:	subcs	r0, r0, r1, lsl #4
   2ae48:	cmp	r0, r1, lsl #3
   2ae4c:	adc	r2, r2, r2
   2ae50:	subcs	r0, r0, r1, lsl #3
   2ae54:	cmp	r0, r1, lsl #2
   2ae58:	adc	r2, r2, r2
   2ae5c:	subcs	r0, r0, r1, lsl #2
   2ae60:	cmp	r0, r1, lsl #1
   2ae64:	adc	r2, r2, r2
   2ae68:	subcs	r0, r0, r1, lsl #1
   2ae6c:	cmp	r0, r1
   2ae70:	adc	r2, r2, r2
   2ae74:	subcs	r0, r0, r1
   2ae78:	mov	r0, r2
   2ae7c:	bx	lr
   2ae80:	moveq	r0, #1
   2ae84:	movne	r0, #0
   2ae88:	bx	lr
   2ae8c:	clz	r2, r1
   2ae90:	rsb	r2, r2, #31
   2ae94:	lsr	r0, r0, r2
   2ae98:	bx	lr
   2ae9c:	cmp	r0, #0
   2aea0:	mvnne	r0, #0
   2aea4:	b	2b4fc <__assert_fail@plt+0x19b5c>
   2aea8:	cmp	r1, #0
   2aeac:	beq	2ae9c <__assert_fail@plt+0x194fc>
   2aeb0:	push	{r0, r1, lr}
   2aeb4:	bl	2acbc <__assert_fail@plt+0x1931c>
   2aeb8:	pop	{r1, r2, lr}
   2aebc:	mul	r3, r2, r0
   2aec0:	sub	r1, r1, r3
   2aec4:	bx	lr
   2aec8:	cmp	r1, #0
   2aecc:	beq	2b0d8 <__assert_fail@plt+0x19738>
   2aed0:	eor	ip, r0, r1
   2aed4:	rsbmi	r1, r1, #0
   2aed8:	subs	r2, r1, #1
   2aedc:	beq	2b0a4 <__assert_fail@plt+0x19704>
   2aee0:	movs	r3, r0
   2aee4:	rsbmi	r3, r0, #0
   2aee8:	cmp	r3, r1
   2aeec:	bls	2b0b0 <__assert_fail@plt+0x19710>
   2aef0:	tst	r1, r2
   2aef4:	beq	2b0c0 <__assert_fail@plt+0x19720>
   2aef8:	clz	r2, r3
   2aefc:	clz	r0, r1
   2af00:	sub	r2, r0, r2
   2af04:	rsbs	r2, r2, #31
   2af08:	addne	r2, r2, r2, lsl #1
   2af0c:	mov	r0, #0
   2af10:	addne	pc, pc, r2, lsl #2
   2af14:	nop			; (mov r0, r0)
   2af18:	cmp	r3, r1, lsl #31
   2af1c:	adc	r0, r0, r0
   2af20:	subcs	r3, r3, r1, lsl #31
   2af24:	cmp	r3, r1, lsl #30
   2af28:	adc	r0, r0, r0
   2af2c:	subcs	r3, r3, r1, lsl #30
   2af30:	cmp	r3, r1, lsl #29
   2af34:	adc	r0, r0, r0
   2af38:	subcs	r3, r3, r1, lsl #29
   2af3c:	cmp	r3, r1, lsl #28
   2af40:	adc	r0, r0, r0
   2af44:	subcs	r3, r3, r1, lsl #28
   2af48:	cmp	r3, r1, lsl #27
   2af4c:	adc	r0, r0, r0
   2af50:	subcs	r3, r3, r1, lsl #27
   2af54:	cmp	r3, r1, lsl #26
   2af58:	adc	r0, r0, r0
   2af5c:	subcs	r3, r3, r1, lsl #26
   2af60:	cmp	r3, r1, lsl #25
   2af64:	adc	r0, r0, r0
   2af68:	subcs	r3, r3, r1, lsl #25
   2af6c:	cmp	r3, r1, lsl #24
   2af70:	adc	r0, r0, r0
   2af74:	subcs	r3, r3, r1, lsl #24
   2af78:	cmp	r3, r1, lsl #23
   2af7c:	adc	r0, r0, r0
   2af80:	subcs	r3, r3, r1, lsl #23
   2af84:	cmp	r3, r1, lsl #22
   2af88:	adc	r0, r0, r0
   2af8c:	subcs	r3, r3, r1, lsl #22
   2af90:	cmp	r3, r1, lsl #21
   2af94:	adc	r0, r0, r0
   2af98:	subcs	r3, r3, r1, lsl #21
   2af9c:	cmp	r3, r1, lsl #20
   2afa0:	adc	r0, r0, r0
   2afa4:	subcs	r3, r3, r1, lsl #20
   2afa8:	cmp	r3, r1, lsl #19
   2afac:	adc	r0, r0, r0
   2afb0:	subcs	r3, r3, r1, lsl #19
   2afb4:	cmp	r3, r1, lsl #18
   2afb8:	adc	r0, r0, r0
   2afbc:	subcs	r3, r3, r1, lsl #18
   2afc0:	cmp	r3, r1, lsl #17
   2afc4:	adc	r0, r0, r0
   2afc8:	subcs	r3, r3, r1, lsl #17
   2afcc:	cmp	r3, r1, lsl #16
   2afd0:	adc	r0, r0, r0
   2afd4:	subcs	r3, r3, r1, lsl #16
   2afd8:	cmp	r3, r1, lsl #15
   2afdc:	adc	r0, r0, r0
   2afe0:	subcs	r3, r3, r1, lsl #15
   2afe4:	cmp	r3, r1, lsl #14
   2afe8:	adc	r0, r0, r0
   2afec:	subcs	r3, r3, r1, lsl #14
   2aff0:	cmp	r3, r1, lsl #13
   2aff4:	adc	r0, r0, r0
   2aff8:	subcs	r3, r3, r1, lsl #13
   2affc:	cmp	r3, r1, lsl #12
   2b000:	adc	r0, r0, r0
   2b004:	subcs	r3, r3, r1, lsl #12
   2b008:	cmp	r3, r1, lsl #11
   2b00c:	adc	r0, r0, r0
   2b010:	subcs	r3, r3, r1, lsl #11
   2b014:	cmp	r3, r1, lsl #10
   2b018:	adc	r0, r0, r0
   2b01c:	subcs	r3, r3, r1, lsl #10
   2b020:	cmp	r3, r1, lsl #9
   2b024:	adc	r0, r0, r0
   2b028:	subcs	r3, r3, r1, lsl #9
   2b02c:	cmp	r3, r1, lsl #8
   2b030:	adc	r0, r0, r0
   2b034:	subcs	r3, r3, r1, lsl #8
   2b038:	cmp	r3, r1, lsl #7
   2b03c:	adc	r0, r0, r0
   2b040:	subcs	r3, r3, r1, lsl #7
   2b044:	cmp	r3, r1, lsl #6
   2b048:	adc	r0, r0, r0
   2b04c:	subcs	r3, r3, r1, lsl #6
   2b050:	cmp	r3, r1, lsl #5
   2b054:	adc	r0, r0, r0
   2b058:	subcs	r3, r3, r1, lsl #5
   2b05c:	cmp	r3, r1, lsl #4
   2b060:	adc	r0, r0, r0
   2b064:	subcs	r3, r3, r1, lsl #4
   2b068:	cmp	r3, r1, lsl #3
   2b06c:	adc	r0, r0, r0
   2b070:	subcs	r3, r3, r1, lsl #3
   2b074:	cmp	r3, r1, lsl #2
   2b078:	adc	r0, r0, r0
   2b07c:	subcs	r3, r3, r1, lsl #2
   2b080:	cmp	r3, r1, lsl #1
   2b084:	adc	r0, r0, r0
   2b088:	subcs	r3, r3, r1, lsl #1
   2b08c:	cmp	r3, r1
   2b090:	adc	r0, r0, r0
   2b094:	subcs	r3, r3, r1
   2b098:	cmp	ip, #0
   2b09c:	rsbmi	r0, r0, #0
   2b0a0:	bx	lr
   2b0a4:	teq	ip, r0
   2b0a8:	rsbmi	r0, r0, #0
   2b0ac:	bx	lr
   2b0b0:	movcc	r0, #0
   2b0b4:	asreq	r0, ip, #31
   2b0b8:	orreq	r0, r0, #1
   2b0bc:	bx	lr
   2b0c0:	clz	r2, r1
   2b0c4:	rsb	r2, r2, #31
   2b0c8:	cmp	ip, #0
   2b0cc:	lsr	r0, r3, r2
   2b0d0:	rsbmi	r0, r0, #0
   2b0d4:	bx	lr
   2b0d8:	cmp	r0, #0
   2b0dc:	mvngt	r0, #-2147483648	; 0x80000000
   2b0e0:	movlt	r0, #-2147483648	; 0x80000000
   2b0e4:	b	2b4fc <__assert_fail@plt+0x19b5c>
   2b0e8:	cmp	r1, #0
   2b0ec:	beq	2b0d8 <__assert_fail@plt+0x19738>
   2b0f0:	push	{r0, r1, lr}
   2b0f4:	bl	2aed0 <__assert_fail@plt+0x19530>
   2b0f8:	pop	{r1, r2, lr}
   2b0fc:	mul	r3, r2, r0
   2b100:	sub	r1, r1, r3
   2b104:	bx	lr
   2b108:	eor	r1, r1, #-2147483648	; 0x80000000
   2b10c:	b	2b114 <__assert_fail@plt+0x19774>
   2b110:	eor	r3, r3, #-2147483648	; 0x80000000
   2b114:	push	{r4, r5, lr}
   2b118:	lsl	r4, r1, #1
   2b11c:	lsl	r5, r3, #1
   2b120:	teq	r4, r5
   2b124:	teqeq	r0, r2
   2b128:	orrsne	ip, r4, r0
   2b12c:	orrsne	ip, r5, r2
   2b130:	mvnsne	ip, r4, asr #21
   2b134:	mvnsne	ip, r5, asr #21
   2b138:	beq	2b324 <__assert_fail@plt+0x19984>
   2b13c:	lsr	r4, r4, #21
   2b140:	rsbs	r5, r4, r5, lsr #21
   2b144:	rsblt	r5, r5, #0
   2b148:	ble	2b168 <__assert_fail@plt+0x197c8>
   2b14c:	add	r4, r4, r5
   2b150:	eor	r2, r0, r2
   2b154:	eor	r3, r1, r3
   2b158:	eor	r0, r2, r0
   2b15c:	eor	r1, r3, r1
   2b160:	eor	r2, r0, r2
   2b164:	eor	r3, r1, r3
   2b168:	cmp	r5, #54	; 0x36
   2b16c:	pophi	{r4, r5, pc}
   2b170:	tst	r1, #-2147483648	; 0x80000000
   2b174:	lsl	r1, r1, #12
   2b178:	mov	ip, #1048576	; 0x100000
   2b17c:	orr	r1, ip, r1, lsr #12
   2b180:	beq	2b18c <__assert_fail@plt+0x197ec>
   2b184:	rsbs	r0, r0, #0
   2b188:	rsc	r1, r1, #0
   2b18c:	tst	r3, #-2147483648	; 0x80000000
   2b190:	lsl	r3, r3, #12
   2b194:	orr	r3, ip, r3, lsr #12
   2b198:	beq	2b1a4 <__assert_fail@plt+0x19804>
   2b19c:	rsbs	r2, r2, #0
   2b1a0:	rsc	r3, r3, #0
   2b1a4:	teq	r4, r5
   2b1a8:	beq	2b30c <__assert_fail@plt+0x1996c>
   2b1ac:	sub	r4, r4, #1
   2b1b0:	rsbs	lr, r5, #32
   2b1b4:	blt	2b1d0 <__assert_fail@plt+0x19830>
   2b1b8:	lsl	ip, r2, lr
   2b1bc:	adds	r0, r0, r2, lsr r5
   2b1c0:	adc	r1, r1, #0
   2b1c4:	adds	r0, r0, r3, lsl lr
   2b1c8:	adcs	r1, r1, r3, asr r5
   2b1cc:	b	2b1ec <__assert_fail@plt+0x1984c>
   2b1d0:	sub	r5, r5, #32
   2b1d4:	add	lr, lr, #32
   2b1d8:	cmp	r2, #1
   2b1dc:	lsl	ip, r3, lr
   2b1e0:	orrcs	ip, ip, #2
   2b1e4:	adds	r0, r0, r3, asr r5
   2b1e8:	adcs	r1, r1, r3, asr #31
   2b1ec:	and	r5, r1, #-2147483648	; 0x80000000
   2b1f0:	bpl	2b200 <__assert_fail@plt+0x19860>
   2b1f4:	rsbs	ip, ip, #0
   2b1f8:	rscs	r0, r0, #0
   2b1fc:	rsc	r1, r1, #0
   2b200:	cmp	r1, #1048576	; 0x100000
   2b204:	bcc	2b244 <__assert_fail@plt+0x198a4>
   2b208:	cmp	r1, #2097152	; 0x200000
   2b20c:	bcc	2b22c <__assert_fail@plt+0x1988c>
   2b210:	lsrs	r1, r1, #1
   2b214:	rrxs	r0, r0
   2b218:	rrx	ip, ip
   2b21c:	add	r4, r4, #1
   2b220:	lsl	r2, r4, #21
   2b224:	cmn	r2, #4194304	; 0x400000
   2b228:	bcs	2b384 <__assert_fail@plt+0x199e4>
   2b22c:	cmp	ip, #-2147483648	; 0x80000000
   2b230:	lsrseq	ip, r0, #1
   2b234:	adcs	r0, r0, #0
   2b238:	adc	r1, r1, r4, lsl #20
   2b23c:	orr	r1, r1, r5
   2b240:	pop	{r4, r5, pc}
   2b244:	lsls	ip, ip, #1
   2b248:	adcs	r0, r0, r0
   2b24c:	adc	r1, r1, r1
   2b250:	tst	r1, #1048576	; 0x100000
   2b254:	sub	r4, r4, #1
   2b258:	bne	2b22c <__assert_fail@plt+0x1988c>
   2b25c:	teq	r1, #0
   2b260:	moveq	r1, r0
   2b264:	moveq	r0, #0
   2b268:	clz	r3, r1
   2b26c:	addeq	r3, r3, #32
   2b270:	sub	r3, r3, #11
   2b274:	subs	r2, r3, #32
   2b278:	bge	2b29c <__assert_fail@plt+0x198fc>
   2b27c:	adds	r2, r2, #12
   2b280:	ble	2b298 <__assert_fail@plt+0x198f8>
   2b284:	add	ip, r2, #20
   2b288:	rsb	r2, r2, #12
   2b28c:	lsl	r0, r1, ip
   2b290:	lsr	r1, r1, r2
   2b294:	b	2b2ac <__assert_fail@plt+0x1990c>
   2b298:	add	r2, r2, #20
   2b29c:	rsble	ip, r2, #32
   2b2a0:	lsl	r1, r1, r2
   2b2a4:	orrle	r1, r1, r0, lsr ip
   2b2a8:	lslle	r0, r0, r2
   2b2ac:	subs	r4, r4, r3
   2b2b0:	addge	r1, r1, r4, lsl #20
   2b2b4:	orrge	r1, r1, r5
   2b2b8:	popge	{r4, r5, pc}
   2b2bc:	mvn	r4, r4
   2b2c0:	subs	r4, r4, #31
   2b2c4:	bge	2b300 <__assert_fail@plt+0x19960>
   2b2c8:	adds	r4, r4, #12
   2b2cc:	bgt	2b2e8 <__assert_fail@plt+0x19948>
   2b2d0:	add	r4, r4, #20
   2b2d4:	rsb	r2, r4, #32
   2b2d8:	lsr	r0, r0, r4
   2b2dc:	orr	r0, r0, r1, lsl r2
   2b2e0:	orr	r1, r5, r1, lsr r4
   2b2e4:	pop	{r4, r5, pc}
   2b2e8:	rsb	r4, r4, #12
   2b2ec:	rsb	r2, r4, #32
   2b2f0:	lsr	r0, r0, r2
   2b2f4:	orr	r0, r0, r1, lsl r4
   2b2f8:	mov	r1, r5
   2b2fc:	pop	{r4, r5, pc}
   2b300:	lsr	r0, r1, r4
   2b304:	mov	r1, r5
   2b308:	pop	{r4, r5, pc}
   2b30c:	teq	r4, #0
   2b310:	eor	r3, r3, #1048576	; 0x100000
   2b314:	eoreq	r1, r1, #1048576	; 0x100000
   2b318:	addeq	r4, r4, #1
   2b31c:	subne	r5, r5, #1
   2b320:	b	2b1ac <__assert_fail@plt+0x1980c>
   2b324:	mvns	ip, r4, asr #21
   2b328:	mvnsne	ip, r5, asr #21
   2b32c:	beq	2b394 <__assert_fail@plt+0x199f4>
   2b330:	teq	r4, r5
   2b334:	teqeq	r0, r2
   2b338:	beq	2b34c <__assert_fail@plt+0x199ac>
   2b33c:	orrs	ip, r4, r0
   2b340:	moveq	r1, r3
   2b344:	moveq	r0, r2
   2b348:	pop	{r4, r5, pc}
   2b34c:	teq	r1, r3
   2b350:	movne	r1, #0
   2b354:	movne	r0, #0
   2b358:	popne	{r4, r5, pc}
   2b35c:	lsrs	ip, r4, #21
   2b360:	bne	2b374 <__assert_fail@plt+0x199d4>
   2b364:	lsls	r0, r0, #1
   2b368:	adcs	r1, r1, r1
   2b36c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2b370:	pop	{r4, r5, pc}
   2b374:	adds	r4, r4, #4194304	; 0x400000
   2b378:	addcc	r1, r1, #1048576	; 0x100000
   2b37c:	popcc	{r4, r5, pc}
   2b380:	and	r5, r1, #-2147483648	; 0x80000000
   2b384:	orr	r1, r5, #2130706432	; 0x7f000000
   2b388:	orr	r1, r1, #15728640	; 0xf00000
   2b38c:	mov	r0, #0
   2b390:	pop	{r4, r5, pc}
   2b394:	mvns	ip, r4, asr #21
   2b398:	movne	r1, r3
   2b39c:	movne	r0, r2
   2b3a0:	mvnseq	ip, r5, asr #21
   2b3a4:	movne	r3, r1
   2b3a8:	movne	r2, r0
   2b3ac:	orrs	r4, r0, r1, lsl #12
   2b3b0:	orrseq	r5, r2, r3, lsl #12
   2b3b4:	teqeq	r1, r3
   2b3b8:	orrne	r1, r1, #524288	; 0x80000
   2b3bc:	pop	{r4, r5, pc}
   2b3c0:	teq	r0, #0
   2b3c4:	moveq	r1, #0
   2b3c8:	bxeq	lr
   2b3cc:	push	{r4, r5, lr}
   2b3d0:	mov	r4, #1024	; 0x400
   2b3d4:	add	r4, r4, #50	; 0x32
   2b3d8:	mov	r5, #0
   2b3dc:	mov	r1, #0
   2b3e0:	b	2b25c <__assert_fail@plt+0x198bc>
   2b3e4:	teq	r0, #0
   2b3e8:	moveq	r1, #0
   2b3ec:	bxeq	lr
   2b3f0:	push	{r4, r5, lr}
   2b3f4:	mov	r4, #1024	; 0x400
   2b3f8:	add	r4, r4, #50	; 0x32
   2b3fc:	ands	r5, r0, #-2147483648	; 0x80000000
   2b400:	rsbmi	r0, r0, #0
   2b404:	mov	r1, #0
   2b408:	b	2b25c <__assert_fail@plt+0x198bc>
   2b40c:	lsls	r2, r0, #1
   2b410:	asr	r1, r2, #3
   2b414:	rrx	r1, r1
   2b418:	lsl	r0, r2, #28
   2b41c:	andsne	r3, r2, #-16777216	; 0xff000000
   2b420:	teqne	r3, #-16777216	; 0xff000000
   2b424:	eorne	r1, r1, #939524096	; 0x38000000
   2b428:	bxne	lr
   2b42c:	teq	r2, #0
   2b430:	teqne	r3, #-16777216	; 0xff000000
   2b434:	bxeq	lr
   2b438:	push	{r4, r5, lr}
   2b43c:	mov	r4, #896	; 0x380
   2b440:	and	r5, r1, #-2147483648	; 0x80000000
   2b444:	bic	r1, r1, #-2147483648	; 0x80000000
   2b448:	b	2b25c <__assert_fail@plt+0x198bc>
   2b44c:	orrs	r2, r0, r1
   2b450:	bxeq	lr
   2b454:	push	{r4, r5, lr}
   2b458:	mov	r5, #0
   2b45c:	b	2b47c <__assert_fail@plt+0x19adc>
   2b460:	orrs	r2, r0, r1
   2b464:	bxeq	lr
   2b468:	push	{r4, r5, lr}
   2b46c:	ands	r5, r1, #-2147483648	; 0x80000000
   2b470:	bpl	2b47c <__assert_fail@plt+0x19adc>
   2b474:	rsbs	r0, r0, #0
   2b478:	rsc	r1, r1, #0
   2b47c:	mov	r4, #1024	; 0x400
   2b480:	add	r4, r4, #50	; 0x32
   2b484:	lsrs	ip, r1, #22
   2b488:	beq	2b200 <__assert_fail@plt+0x19860>
   2b48c:	mov	r2, #3
   2b490:	lsrs	ip, ip, #3
   2b494:	addne	r2, r2, #3
   2b498:	lsrs	ip, ip, #3
   2b49c:	addne	r2, r2, #3
   2b4a0:	add	r2, r2, ip, lsr #3
   2b4a4:	rsb	r3, r2, #32
   2b4a8:	lsl	ip, r0, r3
   2b4ac:	lsr	r0, r0, r2
   2b4b0:	orr	r0, r0, r1, lsl r3
   2b4b4:	lsr	r1, r1, r2
   2b4b8:	add	r4, r4, r2
   2b4bc:	b	2b200 <__assert_fail@plt+0x19860>
   2b4c0:	cmp	r3, #0
   2b4c4:	cmpeq	r2, #0
   2b4c8:	bne	2b4e0 <__assert_fail@plt+0x19b40>
   2b4cc:	cmp	r1, #0
   2b4d0:	cmpeq	r0, #0
   2b4d4:	mvnne	r1, #0
   2b4d8:	mvnne	r0, #0
   2b4dc:	b	2b4fc <__assert_fail@plt+0x19b5c>
   2b4e0:	sub	sp, sp, #8
   2b4e4:	push	{sp, lr}
   2b4e8:	bl	2b558 <__assert_fail@plt+0x19bb8>
   2b4ec:	ldr	lr, [sp, #4]
   2b4f0:	add	sp, sp, #8
   2b4f4:	pop	{r2, r3}
   2b4f8:	bx	lr
   2b4fc:	push	{r1, lr}
   2b500:	mov	r0, #8
   2b504:	bl	11520 <raise@plt>
   2b508:	pop	{r1, pc}
   2b50c:	andeq	r0, r0, r0
   2b510:	vmov	d7, r0, r1
   2b514:	vldr	d6, [pc, #44]	; 2b548 <__assert_fail@plt+0x19ba8>
   2b518:	vldr	d5, [pc, #48]	; 2b550 <__assert_fail@plt+0x19bb0>
   2b51c:	mov	r0, #0
   2b520:	vmul.f64	d6, d7, d6
   2b524:	vcvt.u32.f64	s12, d6
   2b528:	vcvt.f64.u32	d4, s12
   2b52c:	vmov	r1, s12
   2b530:	vmls.f64	d7, d4, d5
   2b534:	vcvt.u32.f64	s14, d7
   2b538:	vmov	r3, s14
   2b53c:	orr	r0, r0, r3
   2b540:	bx	lr
   2b544:	nop			; (mov r0, r0)
   2b548:	andeq	r0, r0, r0
   2b54c:	ldclcc	0, cr0, [r0]
   2b550:	andeq	r0, r0, r0
   2b554:	mvnsmi	r0, r0
   2b558:	cmp	r1, r3
   2b55c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2b560:	cmpeq	r0, r2
   2b564:	mov	r4, r0
   2b568:	mov	r5, r1
   2b56c:	ldr	r9, [sp, #28]
   2b570:	movcc	r0, #0
   2b574:	movcc	r1, #0
   2b578:	bcc	2b670 <__assert_fail@plt+0x19cd0>
   2b57c:	cmp	r3, #0
   2b580:	clzeq	ip, r2
   2b584:	clzne	ip, r3
   2b588:	addeq	ip, ip, #32
   2b58c:	cmp	r5, #0
   2b590:	clzeq	r1, r4
   2b594:	addeq	r1, r1, #32
   2b598:	clzne	r1, r5
   2b59c:	sub	ip, ip, r1
   2b5a0:	sub	lr, ip, #32
   2b5a4:	lsl	r7, r3, ip
   2b5a8:	rsb	r8, ip, #32
   2b5ac:	orr	r7, r7, r2, lsl lr
   2b5b0:	orr	r7, r7, r2, lsr r8
   2b5b4:	lsl	r6, r2, ip
   2b5b8:	cmp	r5, r7
   2b5bc:	cmpeq	r4, r6
   2b5c0:	movcc	r0, #0
   2b5c4:	movcc	r1, #0
   2b5c8:	bcc	2b5e4 <__assert_fail@plt+0x19c44>
   2b5cc:	mov	r3, #1
   2b5d0:	subs	r4, r4, r6
   2b5d4:	lsl	r1, r3, lr
   2b5d8:	lsl	r0, r3, ip
   2b5dc:	orr	r1, r1, r3, lsr r8
   2b5e0:	sbc	r5, r5, r7
   2b5e4:	cmp	ip, #0
   2b5e8:	beq	2b670 <__assert_fail@plt+0x19cd0>
   2b5ec:	lsrs	r3, r7, #1
   2b5f0:	rrx	r2, r6
   2b5f4:	mov	r6, ip
   2b5f8:	b	2b61c <__assert_fail@plt+0x19c7c>
   2b5fc:	subs	r4, r4, r2
   2b600:	sbc	r5, r5, r3
   2b604:	adds	r4, r4, r4
   2b608:	adc	r5, r5, r5
   2b60c:	adds	r4, r4, #1
   2b610:	adc	r5, r5, #0
   2b614:	subs	r6, r6, #1
   2b618:	beq	2b638 <__assert_fail@plt+0x19c98>
   2b61c:	cmp	r5, r3
   2b620:	cmpeq	r4, r2
   2b624:	bcs	2b5fc <__assert_fail@plt+0x19c5c>
   2b628:	adds	r4, r4, r4
   2b62c:	adc	r5, r5, r5
   2b630:	subs	r6, r6, #1
   2b634:	bne	2b61c <__assert_fail@plt+0x19c7c>
   2b638:	lsr	r6, r4, ip
   2b63c:	lsr	r7, r5, ip
   2b640:	orr	r6, r6, r5, lsl r8
   2b644:	adds	r2, r0, r4
   2b648:	orr	r6, r6, r5, lsr lr
   2b64c:	adc	r3, r1, r5
   2b650:	lsl	r1, r7, ip
   2b654:	orr	r1, r1, r6, lsl lr
   2b658:	lsl	r0, r6, ip
   2b65c:	orr	r1, r1, r6, lsr r8
   2b660:	subs	r0, r2, r0
   2b664:	mov	r4, r6
   2b668:	mov	r5, r7
   2b66c:	sbc	r1, r3, r1
   2b670:	cmp	r9, #0
   2b674:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   2b678:	strd	r4, [r9]
   2b67c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2b680:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b684:	mov	r7, r0
   2b688:	ldr	r6, [pc, #72]	; 2b6d8 <__assert_fail@plt+0x19d38>
   2b68c:	ldr	r5, [pc, #72]	; 2b6dc <__assert_fail@plt+0x19d3c>
   2b690:	add	r6, pc, r6
   2b694:	add	r5, pc, r5
   2b698:	sub	r6, r6, r5
   2b69c:	mov	r8, r1
   2b6a0:	mov	r9, r2
   2b6a4:	bl	114d0 <pthread_mutex_unlock@plt-0x20>
   2b6a8:	asrs	r6, r6, #2
   2b6ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b6b0:	mov	r4, #0
   2b6b4:	add	r4, r4, #1
   2b6b8:	ldr	r3, [r5], #4
   2b6bc:	mov	r2, r9
   2b6c0:	mov	r1, r8
   2b6c4:	mov	r0, r7
   2b6c8:	blx	r3
   2b6cc:	cmp	r6, r4
   2b6d0:	bne	2b6b4 <__assert_fail@plt+0x19d14>
   2b6d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b6d8:	andeq	r2, r1, r8, ror r8
   2b6dc:	andeq	r2, r1, r0, ror r8
   2b6e0:	bx	lr
   2b6e4:	ldr	r3, [pc, #12]	; 2b6f8 <__assert_fail@plt+0x19d58>
   2b6e8:	mov	r1, #0
   2b6ec:	add	r3, pc, r3
   2b6f0:	ldr	r2, [r3]
   2b6f4:	b	117fc <__cxa_atexit@plt>
   2b6f8:			; <UNDEFINED> instruction: 0x00012ab4

Disassembly of section .fini:

0002b6fc <.fini>:
   2b6fc:	push	{r3, lr}
   2b700:	pop	{r3, pc}
