
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

00010fec <.init>:
   10fec:	push	{r3, lr}
   10ff0:	bl	11830 <__assert_fail@plt+0x4d0>
   10ff4:	pop	{r3, pc}

Disassembly of section .plt:

00010ff8 <fstatfs64@plt-0x14>:
   10ff8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ffc:	ldr	lr, [pc, #4]	; 11008 <fstatfs64@plt-0x4>
   11000:	add	lr, pc, lr
   11004:	ldr	pc, [lr, #8]!
   11008:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>

0001100c <fstatfs64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #24, 20	; 0x18000
   11014:	ldr	pc, [ip, #4088]!	; 0xff8

00011018 <calloc@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #24, 20	; 0x18000
   11020:	ldr	pc, [ip, #4080]!	; 0xff0

00011024 <endgrent@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #24, 20	; 0x18000
   1102c:	ldr	pc, [ip, #4072]!	; 0xfe8

00011030 <fputs_unlocked@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #24, 20	; 0x18000
   11038:	ldr	pc, [ip, #4064]!	; 0xfe0

0001103c <raise@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #24, 20	; 0x18000
   11044:	ldr	pc, [ip, #4056]!	; 0xfd8

00011048 <strcmp@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #24, 20	; 0x18000
   11050:	ldr	pc, [ip, #4048]!	; 0xfd0

00011054 <getpwuid@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #24, 20	; 0x18000
   1105c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011060 <fflush@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #24, 20	; 0x18000
   11068:	ldr	pc, [ip, #4032]!	; 0xfc0

0001106c <memmove@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #24, 20	; 0x18000
   11074:	ldr	pc, [ip, #4024]!	; 0xfb8

00011078 <free@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #24, 20	; 0x18000
   11080:	ldr	pc, [ip, #4016]!	; 0xfb0

00011084 <__openat64_2@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #24, 20	; 0x18000
   1108c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011090 <_exit@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #24, 20	; 0x18000
   11098:	ldr	pc, [ip, #4000]!	; 0xfa0

0001109c <memcpy@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #24, 20	; 0x18000
   110a4:	ldr	pc, [ip, #3992]!	; 0xf98

000110a8 <mbsinit@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #24, 20	; 0x18000
   110b0:	ldr	pc, [ip, #3984]!	; 0xf90

000110b4 <memcmp@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #24, 20	; 0x18000
   110bc:	ldr	pc, [ip, #3976]!	; 0xf88

000110c0 <stpcpy@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #24, 20	; 0x18000
   110c8:	ldr	pc, [ip, #3968]!	; 0xf80

000110cc <fputc_unlocked@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #24, 20	; 0x18000
   110d4:	ldr	pc, [ip, #3960]!	; 0xf78

000110d8 <dcgettext@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #24, 20	; 0x18000
   110e0:	ldr	pc, [ip, #3952]!	; 0xf70

000110e4 <realloc@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #24, 20	; 0x18000
   110ec:	ldr	pc, [ip, #3944]!	; 0xf68

000110f0 <textdomain@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #24, 20	; 0x18000
   110f8:	ldr	pc, [ip, #3936]!	; 0xf60

000110fc <__fxstatat64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #24, 20	; 0x18000
   11104:	ldr	pc, [ip, #3928]!	; 0xf58

00011108 <iswprint@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #24, 20	; 0x18000
   11110:	ldr	pc, [ip, #3920]!	; 0xf50

00011114 <__fxstat64@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #24, 20	; 0x18000
   1111c:	ldr	pc, [ip, #3912]!	; 0xf48

00011120 <lseek64@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #24, 20	; 0x18000
   11128:	ldr	pc, [ip, #3904]!	; 0xf40

0001112c <__ctype_get_mb_cur_max@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #24, 20	; 0x18000
   11134:	ldr	pc, [ip, #3896]!	; 0xf38

00011138 <strcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #24, 20	; 0x18000
   11140:	ldr	pc, [ip, #3888]!	; 0xf30

00011144 <__fpending@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #24, 20	; 0x18000
   1114c:	ldr	pc, [ip, #3880]!	; 0xf28

00011150 <ferror_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #24, 20	; 0x18000
   11158:	ldr	pc, [ip, #3872]!	; 0xf20

0001115c <mbrtowc@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #24, 20	; 0x18000
   11164:	ldr	pc, [ip, #3864]!	; 0xf18

00011168 <error@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #24, 20	; 0x18000
   11170:	ldr	pc, [ip, #3856]!	; 0xf10

00011174 <open64@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #24, 20	; 0x18000
   1117c:	ldr	pc, [ip, #3848]!	; 0xf08

00011180 <malloc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #24, 20	; 0x18000
   11188:	ldr	pc, [ip, #3840]!	; 0xf00

0001118c <__libc_start_main@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #24, 20	; 0x18000
   11194:	ldr	pc, [ip, #3832]!	; 0xef8

00011198 <__freading@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #24, 20	; 0x18000
   111a0:	ldr	pc, [ip, #3824]!	; 0xef0

000111a4 <__gmon_start__@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #24, 20	; 0x18000
   111ac:	ldr	pc, [ip, #3816]!	; 0xee8

000111b0 <getopt_long@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #24, 20	; 0x18000
   111b8:	ldr	pc, [ip, #3808]!	; 0xee0

000111bc <__ctype_b_loc@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #24, 20	; 0x18000
   111c4:	ldr	pc, [ip, #3800]!	; 0xed8

000111c8 <exit@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #24, 20	; 0x18000
   111d0:	ldr	pc, [ip, #3792]!	; 0xed0

000111d4 <strlen@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #24, 20	; 0x18000
   111dc:	ldr	pc, [ip, #3784]!	; 0xec8

000111e0 <strchr@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #24, 20	; 0x18000
   111e8:	ldr	pc, [ip, #3776]!	; 0xec0

000111ec <openat64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #24, 20	; 0x18000
   111f4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111f8 <fchown@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #24, 20	; 0x18000
   11200:	ldr	pc, [ip, #3760]!	; 0xeb0

00011204 <__errno_location@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #24, 20	; 0x18000
   1120c:	ldr	pc, [ip, #3752]!	; 0xea8

00011210 <__cxa_atexit@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #24, 20	; 0x18000
   11218:	ldr	pc, [ip, #3744]!	; 0xea0

0001121c <memset@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #24, 20	; 0x18000
   11224:	ldr	pc, [ip, #3736]!	; 0xe98

00011228 <__printf_chk@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #24, 20	; 0x18000
   11230:	ldr	pc, [ip, #3728]!	; 0xe90

00011234 <fileno@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #24, 20	; 0x18000
   1123c:	ldr	pc, [ip, #3720]!	; 0xe88

00011240 <strtoumax@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #24, 20	; 0x18000
   11248:	ldr	pc, [ip, #3712]!	; 0xe80

0001124c <__fprintf_chk@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #24, 20	; 0x18000
   11254:	ldr	pc, [ip, #3704]!	; 0xe78

00011258 <fclose@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #24, 20	; 0x18000
   11260:	ldr	pc, [ip, #3696]!	; 0xe70

00011264 <fseeko64@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #24, 20	; 0x18000
   1126c:	ldr	pc, [ip, #3688]!	; 0xe68

00011270 <fcntl64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #24, 20	; 0x18000
   11278:	ldr	pc, [ip, #3680]!	; 0xe60

0001127c <setlocale@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #24, 20	; 0x18000
   11284:	ldr	pc, [ip, #3672]!	; 0xe58

00011288 <strrchr@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #24, 20	; 0x18000
   11290:	ldr	pc, [ip, #3664]!	; 0xe50

00011294 <nl_langinfo@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #24, 20	; 0x18000
   1129c:	ldr	pc, [ip, #3656]!	; 0xe48

000112a0 <readdir64@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #24, 20	; 0x18000
   112a8:	ldr	pc, [ip, #3648]!	; 0xe40

000112ac <fdopendir@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #24, 20	; 0x18000
   112b4:	ldr	pc, [ip, #3640]!	; 0xe38

000112b8 <dirfd@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #24, 20	; 0x18000
   112c0:	ldr	pc, [ip, #3632]!	; 0xe30

000112c4 <fchdir@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #24, 20	; 0x18000
   112cc:	ldr	pc, [ip, #3624]!	; 0xe28

000112d0 <qsort@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #24, 20	; 0x18000
   112d8:	ldr	pc, [ip, #3616]!	; 0xe20

000112dc <fchownat@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #24, 20	; 0x18000
   112e4:	ldr	pc, [ip, #3608]!	; 0xe18

000112e8 <bindtextdomain@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #24, 20	; 0x18000
   112f0:	ldr	pc, [ip, #3600]!	; 0xe10

000112f4 <__xstat64@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #24, 20	; 0x18000
   112fc:	ldr	pc, [ip, #3592]!	; 0xe08

00011300 <fputs@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #24, 20	; 0x18000
   11308:	ldr	pc, [ip, #3584]!	; 0xe00

0001130c <strncmp@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #24, 20	; 0x18000
   11314:	ldr	pc, [ip, #3576]!	; 0xdf8

00011318 <abort@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #24, 20	; 0x18000
   11320:	ldr	pc, [ip, #3568]!	; 0xdf0

00011324 <close@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #24, 20	; 0x18000
   1132c:	ldr	pc, [ip, #3560]!	; 0xde8

00011330 <__lxstat64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #24, 20	; 0x18000
   11338:	ldr	pc, [ip, #3552]!	; 0xde0

0001133c <closedir@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #24, 20	; 0x18000
   11344:	ldr	pc, [ip, #3544]!	; 0xdd8

00011348 <getgrgid@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #24, 20	; 0x18000
   11350:	ldr	pc, [ip, #3536]!	; 0xdd0

00011354 <getgrnam@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #24, 20	; 0x18000
   1135c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011360 <__assert_fail@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #24, 20	; 0x18000
   11368:	ldr	pc, [ip, #3520]!	; 0xdc0

Disassembly of section .text:

00011370 <.text>:
   11370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11374:	mov	r7, r0
   11378:	sub	sp, sp, #148	; 0x94
   1137c:	ldr	r0, [r1]
   11380:	mov	r8, r1
   11384:	bl	156c8 <__assert_fail@plt+0x4368>
   11388:	ldr	r1, [pc, #1032]	; 11798 <__assert_fail@plt+0x438>
   1138c:	mov	r0, #6
   11390:	bl	1127c <setlocale@plt>
   11394:	ldr	r1, [pc, #1024]	; 1179c <__assert_fail@plt+0x43c>
   11398:	ldr	r0, [pc, #1024]	; 117a0 <__assert_fail@plt+0x440>
   1139c:	bl	112e8 <bindtextdomain@plt>
   113a0:	ldr	r0, [pc, #1016]	; 117a0 <__assert_fail@plt+0x440>
   113a4:	bl	110f0 <textdomain@plt>
   113a8:	add	sl, sp, #16
   113ac:	ldr	r0, [pc, #1008]	; 117a4 <__assert_fail@plt+0x444>
   113b0:	bl	18960 <__assert_fail@plt+0x7600>
   113b4:	mov	r0, sl
   113b8:	bl	11ca8 <__assert_fail@plt+0x948>
   113bc:	ldr	fp, [pc, #996]	; 117a8 <__assert_fail@plt+0x448>
   113c0:	mvn	r5, #0
   113c4:	mov	r6, #16
   113c8:	mov	r9, #0
   113cc:	mov	r4, #0
   113d0:	str	r4, [sp]
   113d4:	ldr	r3, [pc, #976]	; 117ac <__assert_fail@plt+0x44c>
   113d8:	ldr	r2, [pc, #976]	; 117b0 <__assert_fail@plt+0x450>
   113dc:	mov	r1, r8
   113e0:	mov	r0, r7
   113e4:	bl	111b0 <getopt_long@plt>
   113e8:	cmn	r0, #1
   113ec:	bne	11430 <__assert_fail@plt+0xd0>
   113f0:	ldrb	r3, [sp, #20]
   113f4:	cmp	r3, r4
   113f8:	beq	11568 <__assert_fail@plt+0x208>
   113fc:	cmp	r6, #16
   11400:	bne	1156c <__assert_fail@plt+0x20c>
   11404:	cmp	r5, #1
   11408:	movne	r5, r4
   1140c:	bne	1156c <__assert_fail@plt+0x20c>
   11410:	mov	r2, #5
   11414:	ldr	r1, [pc, #920]	; 117b4 <__assert_fail@plt+0x454>
   11418:	mov	r0, r4
   1141c:	bl	110d8 <dcgettext@plt>
   11420:	mov	r1, r4
   11424:	mov	r2, r0
   11428:	mov	r0, r5
   1142c:	bl	11168 <error@plt>
   11430:	cmp	r0, #99	; 0x63
   11434:	beq	1150c <__assert_fail@plt+0x1ac>
   11438:	bgt	11484 <__assert_fail@plt+0x124>
   1143c:	cmp	r0, #72	; 0x48
   11440:	beq	11558 <__assert_fail@plt+0x1f8>
   11444:	bgt	11464 <__assert_fail@plt+0x104>
   11448:	cmn	r0, #3
   1144c:	beq	11520 <__assert_fail@plt+0x1c0>
   11450:	cmn	r0, #2
   11454:	moveq	r0, r4
   11458:	beq	11460 <__assert_fail@plt+0x100>
   1145c:	mov	r0, #1
   11460:	bl	1191c <__assert_fail@plt+0x5bc>
   11464:	cmp	r0, #80	; 0x50
   11468:	beq	11560 <__assert_fail@plt+0x200>
   1146c:	cmp	r0, #82	; 0x52
   11470:	beq	11500 <__assert_fail@plt+0x1a0>
   11474:	cmp	r0, #76	; 0x4c
   11478:	bne	1145c <__assert_fail@plt+0xfc>
   1147c:	mov	r6, #2
   11480:	b	113cc <__assert_fail@plt+0x6c>
   11484:	cmp	r0, #256	; 0x100
   11488:	beq	114e8 <__assert_fail@plt+0x188>
   1148c:	bgt	114b4 <__assert_fail@plt+0x154>
   11490:	cmp	r0, #104	; 0x68
   11494:	beq	114e0 <__assert_fail@plt+0x180>
   11498:	cmp	r0, #118	; 0x76
   1149c:	beq	11518 <__assert_fail@plt+0x1b8>
   114a0:	cmp	r0, #102	; 0x66
   114a4:	bne	1145c <__assert_fail@plt+0xfc>
   114a8:	mov	r3, #1
   114ac:	strb	r3, [sp, #29]
   114b0:	b	113cc <__assert_fail@plt+0x6c>
   114b4:	ldr	r3, [pc, #764]	; 117b8 <__assert_fail@plt+0x458>
   114b8:	cmp	r0, r3
   114bc:	beq	114f8 <__assert_fail@plt+0x198>
   114c0:	blt	114f0 <__assert_fail@plt+0x190>
   114c4:	add	r3, r3, #1
   114c8:	cmp	r0, r3
   114cc:	bne	1145c <__assert_fail@plt+0xfc>
   114d0:	ldr	r3, [pc, #740]	; 117bc <__assert_fail@plt+0x45c>
   114d4:	ldr	r3, [r3]
   114d8:	str	r3, [fp]
   114dc:	b	113cc <__assert_fail@plt+0x6c>
   114e0:	mov	r5, r4
   114e4:	b	113cc <__assert_fail@plt+0x6c>
   114e8:	mov	r5, #1
   114ec:	b	113cc <__assert_fail@plt+0x6c>
   114f0:	mov	r9, r4
   114f4:	b	113cc <__assert_fail@plt+0x6c>
   114f8:	mov	r9, #1
   114fc:	b	113cc <__assert_fail@plt+0x6c>
   11500:	mov	r3, #1
   11504:	strb	r3, [sp, #20]
   11508:	b	113cc <__assert_fail@plt+0x6c>
   1150c:	mov	r3, #1
   11510:	str	r3, [sp, #16]
   11514:	b	113cc <__assert_fail@plt+0x6c>
   11518:	str	r4, [sp, #16]
   1151c:	b	113cc <__assert_fail@plt+0x6c>
   11520:	ldr	r3, [pc, #664]	; 117c0 <__assert_fail@plt+0x460>
   11524:	ldr	r0, [pc, #664]	; 117c4 <__assert_fail@plt+0x464>
   11528:	str	r3, [sp, #4]
   1152c:	ldr	r3, [pc, #660]	; 117c8 <__assert_fail@plt+0x468>
   11530:	str	r4, [sp, #8]
   11534:	str	r3, [sp]
   11538:	ldr	r3, [pc, #652]	; 117cc <__assert_fail@plt+0x46c>
   1153c:	ldr	r0, [r0]
   11540:	ldr	r2, [pc, #648]	; 117d0 <__assert_fail@plt+0x470>
   11544:	ldr	r3, [r3]
   11548:	ldr	r1, [pc, #644]	; 117d4 <__assert_fail@plt+0x474>
   1154c:	bl	171c4 <__assert_fail@plt+0x5e64>
   11550:	mov	r0, r4
   11554:	bl	111c8 <exit@plt>
   11558:	mov	r6, #17
   1155c:	b	113cc <__assert_fail@plt+0x6c>
   11560:	mov	r6, #16
   11564:	b	113cc <__assert_fail@plt+0x6c>
   11568:	mov	r6, #16
   1156c:	ldr	r1, [pc, #564]	; 117a8 <__assert_fail@plt+0x448>
   11570:	ldr	r4, [pc, #608]	; 117d8 <__assert_fail@plt+0x478>
   11574:	adds	r5, r5, #0
   11578:	ldr	fp, [r1]
   1157c:	ldr	r3, [r4]
   11580:	movne	r5, #1
   11584:	cmp	fp, #0
   11588:	strb	r5, [sp, #28]
   1158c:	sub	r2, r7, r3
   11590:	bne	11744 <__assert_fail@plt+0x3e4>
   11594:	cmp	r2, #1
   11598:	bgt	11654 <__assert_fail@plt+0x2f4>
   1159c:	cmp	r7, r3
   115a0:	mov	r2, #5
   115a4:	bgt	115c8 <__assert_fail@plt+0x268>
   115a8:	ldr	r1, [pc, #556]	; 117dc <__assert_fail@plt+0x47c>
   115ac:	mov	r0, #0
   115b0:	bl	110d8 <dcgettext@plt>
   115b4:	mov	r1, #0
   115b8:	mov	r2, r0
   115bc:	mov	r0, r1
   115c0:	bl	11168 <error@plt>
   115c4:	b	1145c <__assert_fail@plt+0xfc>
   115c8:	ldr	r1, [pc, #528]	; 117e0 <__assert_fail@plt+0x480>
   115cc:	mov	r0, #0
   115d0:	bl	110d8 <dcgettext@plt>
   115d4:	sub	r7, r7, #-1073741823	; 0xc0000001
   115d8:	mov	r4, r0
   115dc:	ldr	r0, [r8, r7, lsl #2]
   115e0:	bl	16cf8 <__assert_fail@plt+0x5998>
   115e4:	mov	r1, #0
   115e8:	mov	r2, r4
   115ec:	mov	r3, r0
   115f0:	mov	r0, r1
   115f4:	bl	11168 <error@plt>
   115f8:	b	1145c <__assert_fail@plt+0xfc>
   115fc:	ldr	r5, [sp, #68]	; 0x44
   11600:	mov	r0, r5
   11604:	bl	11cf0 <__assert_fail@plt+0x990>
   11608:	str	r0, [sp, #36]	; 0x24
   1160c:	ldrb	r3, [sp, #20]
   11610:	tst	r9, r3
   11614:	beq	11714 <__assert_fail@plt+0x3b4>
   11618:	ldr	r0, [pc, #452]	; 117e4 <__assert_fail@plt+0x484>
   1161c:	bl	16d04 <__assert_fail@plt+0x59a4>
   11620:	cmp	r0, #0
   11624:	mov	r7, r0
   11628:	str	r0, [sp, #24]
   1162c:	bne	11714 <__assert_fail@plt+0x3b4>
   11630:	bl	11204 <__errno_location@plt>
   11634:	ldr	r1, [pc, #428]	; 117e8 <__assert_fail@plt+0x488>
   11638:	mov	r2, #5
   1163c:	ldr	r4, [r0]
   11640:	mov	r0, r7
   11644:	bl	110d8 <dcgettext@plt>
   11648:	ldr	r1, [pc, #412]	; 117ec <__assert_fail@plt+0x48c>
   1164c:	mov	r5, r0
   11650:	b	11780 <__assert_fail@plt+0x420>
   11654:	ldr	r5, [r8, r3, lsl #2]
   11658:	add	r2, r3, #1
   1165c:	str	r2, [r4]
   11660:	ldrb	r3, [r5]
   11664:	cmp	r3, #0
   11668:	beq	11678 <__assert_fail@plt+0x318>
   1166c:	mov	r0, r5
   11670:	bl	17704 <__assert_fail@plt+0x63a4>
   11674:	mov	fp, r0
   11678:	str	fp, [sp, #36]	; 0x24
   1167c:	ldrb	r3, [r5]
   11680:	cmp	r3, #0
   11684:	mvneq	r5, #0
   11688:	beq	1160c <__assert_fail@plt+0x2ac>
   1168c:	mov	r0, r5
   11690:	bl	11354 <getgrnam@plt>
   11694:	subs	r1, r0, #0
   11698:	ldrne	r5, [r1, #8]
   1169c:	bne	1170c <__assert_fail@plt+0x3ac>
   116a0:	ldr	r3, [pc, #240]	; 11798 <__assert_fail@plt+0x438>
   116a4:	mov	r2, #10
   116a8:	str	r3, [sp]
   116ac:	mov	r0, r5
   116b0:	add	r3, sp, #40	; 0x28
   116b4:	bl	178b0 <__assert_fail@plt+0x6550>
   116b8:	cmp	r0, #0
   116bc:	bne	116dc <__assert_fail@plt+0x37c>
   116c0:	ldrd	r0, [sp, #40]	; 0x28
   116c4:	mov	r3, #0
   116c8:	mvn	r2, #0
   116cc:	cmp	r1, r3
   116d0:	cmpeq	r0, r2
   116d4:	movls	r5, r0
   116d8:	bls	1170c <__assert_fail@plt+0x3ac>
   116dc:	mov	r2, #5
   116e0:	ldr	r1, [pc, #264]	; 117f0 <__assert_fail@plt+0x490>
   116e4:	mov	r0, #0
   116e8:	bl	110d8 <dcgettext@plt>
   116ec:	mov	r4, r0
   116f0:	mov	r0, r5
   116f4:	bl	16cf8 <__assert_fail@plt+0x5998>
   116f8:	mov	r2, r4
   116fc:	mov	r1, #0
   11700:	mov	r3, r0
   11704:	mov	r0, #1
   11708:	bl	11168 <error@plt>
   1170c:	bl	11024 <endgrent@plt>
   11710:	b	1160c <__assert_fail@plt+0x2ac>
   11714:	ldr	r0, [r4]
   11718:	mvn	r2, #0
   1171c:	str	sl, [sp, #8]
   11720:	str	r2, [sp, #4]
   11724:	str	r2, [sp]
   11728:	mov	r3, r5
   1172c:	orr	r1, r6, #1024	; 0x400
   11730:	add	r0, r8, r0, lsl #2
   11734:	bl	11d60 <__assert_fail@plt+0xa00>
   11738:	eor	r0, r0, #1
   1173c:	uxtb	r0, r0
   11740:	b	11554 <__assert_fail@plt+0x1f4>
   11744:	cmp	r2, #0
   11748:	ble	1159c <__assert_fail@plt+0x23c>
   1174c:	add	r1, sp, #40	; 0x28
   11750:	mov	r0, fp
   11754:	bl	18978 <__assert_fail@plt+0x7618>
   11758:	cmp	r0, #0
   1175c:	beq	115fc <__assert_fail@plt+0x29c>
   11760:	bl	11204 <__errno_location@plt>
   11764:	ldr	r1, [pc, #124]	; 117e8 <__assert_fail@plt+0x488>
   11768:	mov	r2, #5
   1176c:	ldr	r4, [r0]
   11770:	mov	r0, #0
   11774:	bl	110d8 <dcgettext@plt>
   11778:	mov	r1, fp
   1177c:	mov	r5, r0
   11780:	mov	r0, #4
   11784:	bl	16b14 <__assert_fail@plt+0x57b4>
   11788:	mov	r2, r5
   1178c:	mov	r1, r4
   11790:	mov	r3, r0
   11794:	b	11704 <__assert_fail@plt+0x3a4>
   11798:	strdeq	r9, [r1], -sl
   1179c:	andeq	r9, r1, r9, asr #5
   117a0:	andeq	r9, r1, r6, lsr #4
   117a4:	andeq	r2, r1, r0, lsl #18
   117a8:	andeq	sl, r2, r0, lsr #3
   117ac:	andeq	r8, r1, r4, lsl sl
   117b0:	strdeq	r9, [r1], -lr
   117b4:	andeq	r9, r1, r7, lsl #6
   117b8:	andeq	r0, r0, r2, lsl #2
   117bc:	muleq	r2, r8, r1
   117c0:	andeq	r9, r1, r1, ror #5
   117c4:	muleq	r2, r4, r1
   117c8:	andeq	r9, r1, lr, ror #5
   117cc:	andeq	sl, r2, r8, lsr r1
   117d0:	andeq	r9, r1, r2, lsr #4
   117d4:	andeq	r8, r1, r4, ror #21
   117d8:	andeq	sl, r2, r8, lsl #3
   117dc:	andeq	r9, r1, r1, lsr r3
   117e0:	andeq	r9, r1, r1, asr #6
   117e4:	andeq	sl, r2, r8, lsr #3
   117e8:	andeq	r9, r1, sl, asr r3
   117ec:	andeq	r9, r1, r8, ror ip
   117f0:	andeq	r9, r1, r9, ror r3
   117f4:	mov	fp, #0
   117f8:	mov	lr, #0
   117fc:	pop	{r1}		; (ldr r1, [sp], #4)
   11800:	mov	r2, sp
   11804:	push	{r2}		; (str r2, [sp, #-4]!)
   11808:	push	{r0}		; (str r0, [sp, #-4]!)
   1180c:	ldr	ip, [pc, #16]	; 11824 <__assert_fail@plt+0x4c4>
   11810:	push	{ip}		; (str ip, [sp, #-4]!)
   11814:	ldr	r0, [pc, #12]	; 11828 <__assert_fail@plt+0x4c8>
   11818:	ldr	r3, [pc, #12]	; 1182c <__assert_fail@plt+0x4cc>
   1181c:	bl	1118c <__libc_start_main@plt>
   11820:	bl	11318 <abort@plt>
   11824:	andeq	r8, r1, ip, asr r9
   11828:	andeq	r1, r1, r0, ror r3
   1182c:	strdeq	r8, [r1], -ip
   11830:	ldr	r3, [pc, #20]	; 1184c <__assert_fail@plt+0x4ec>
   11834:	ldr	r2, [pc, #20]	; 11850 <__assert_fail@plt+0x4f0>
   11838:	add	r3, pc, r3
   1183c:	ldr	r2, [r3, r2]
   11840:	cmp	r2, #0
   11844:	bxeq	lr
   11848:	b	111a4 <__gmon_start__@plt>
   1184c:	andeq	r8, r1, r0, asr #15
   11850:	andeq	r0, r0, ip, lsr #2
   11854:	ldr	r3, [pc, #28]	; 11878 <__assert_fail@plt+0x518>
   11858:	ldr	r0, [pc, #28]	; 1187c <__assert_fail@plt+0x51c>
   1185c:	sub	r3, r3, r0
   11860:	cmp	r3, #6
   11864:	bxls	lr
   11868:	ldr	r3, [pc, #16]	; 11880 <__assert_fail@plt+0x520>
   1186c:	cmp	r3, #0
   11870:	bxeq	lr
   11874:	bx	r3
   11878:	andeq	sl, r2, r3, lsl #3
   1187c:	andeq	sl, r2, r0, lsl #3
   11880:	andeq	r0, r0, r0
   11884:	ldr	r1, [pc, #36]	; 118b0 <__assert_fail@plt+0x550>
   11888:	ldr	r0, [pc, #36]	; 118b4 <__assert_fail@plt+0x554>
   1188c:	sub	r1, r1, r0
   11890:	asr	r1, r1, #2
   11894:	add	r1, r1, r1, lsr #31
   11898:	asrs	r1, r1, #1
   1189c:	bxeq	lr
   118a0:	ldr	r3, [pc, #16]	; 118b8 <__assert_fail@plt+0x558>
   118a4:	cmp	r3, #0
   118a8:	bxeq	lr
   118ac:	bx	r3
   118b0:	andeq	sl, r2, r0, lsl #3
   118b4:	andeq	sl, r2, r0, lsl #3
   118b8:	andeq	r0, r0, r0
   118bc:	push	{r4, lr}
   118c0:	ldr	r4, [pc, #24]	; 118e0 <__assert_fail@plt+0x580>
   118c4:	ldrb	r3, [r4]
   118c8:	cmp	r3, #0
   118cc:	popne	{r4, pc}
   118d0:	bl	11854 <__assert_fail@plt+0x4f4>
   118d4:	mov	r3, #1
   118d8:	strb	r3, [r4]
   118dc:	pop	{r4, pc}
   118e0:	muleq	r2, ip, r1
   118e4:	ldr	r0, [pc, #40]	; 11914 <__assert_fail@plt+0x5b4>
   118e8:	ldr	r3, [r0]
   118ec:	cmp	r3, #0
   118f0:	bne	118f8 <__assert_fail@plt+0x598>
   118f4:	b	11884 <__assert_fail@plt+0x524>
   118f8:	ldr	r3, [pc, #24]	; 11918 <__assert_fail@plt+0x5b8>
   118fc:	cmp	r3, #0
   11900:	beq	118f4 <__assert_fail@plt+0x594>
   11904:	push	{r4, lr}
   11908:	blx	r3
   1190c:	pop	{r4, lr}
   11910:	b	11884 <__assert_fail@plt+0x524>
   11914:	andeq	r9, r2, r4, lsl pc
   11918:	andeq	r0, r0, r0
   1191c:	subs	r4, r0, #0
   11920:	push	{r7, lr}
   11924:	sub	sp, sp, #56	; 0x38
   11928:	ldr	r6, [pc, #660]	; 11bc4 <__assert_fail@plt+0x864>
   1192c:	beq	11964 <__assert_fail@plt+0x604>
   11930:	ldr	r3, [pc, #656]	; 11bc8 <__assert_fail@plt+0x868>
   11934:	mov	r2, #5
   11938:	ldr	r1, [pc, #652]	; 11bcc <__assert_fail@plt+0x86c>
   1193c:	mov	r0, #0
   11940:	ldr	r5, [r3]
   11944:	bl	110d8 <dcgettext@plt>
   11948:	ldr	r3, [r6]
   1194c:	mov	r1, #1
   11950:	mov	r2, r0
   11954:	mov	r0, r5
   11958:	bl	1124c <__fprintf_chk@plt>
   1195c:	mov	r0, r4
   11960:	bl	111c8 <exit@plt>
   11964:	mov	r2, #5
   11968:	ldr	r1, [pc, #608]	; 11bd0 <__assert_fail@plt+0x870>
   1196c:	bl	110d8 <dcgettext@plt>
   11970:	ldr	r3, [r6]
   11974:	ldr	r5, [pc, #600]	; 11bd4 <__assert_fail@plt+0x874>
   11978:	mov	r2, r3
   1197c:	ldr	r8, [pc, #596]	; 11bd8 <__assert_fail@plt+0x878>
   11980:	mov	r1, r0
   11984:	mov	r0, #1
   11988:	bl	11228 <__printf_chk@plt>
   1198c:	mov	r2, #5
   11990:	ldr	r1, [pc, #580]	; 11bdc <__assert_fail@plt+0x87c>
   11994:	mov	r0, r4
   11998:	bl	110d8 <dcgettext@plt>
   1199c:	ldr	r1, [r5]
   119a0:	bl	11030 <fputs_unlocked@plt>
   119a4:	mov	r2, #5
   119a8:	ldr	r1, [pc, #560]	; 11be0 <__assert_fail@plt+0x880>
   119ac:	mov	r0, r4
   119b0:	bl	110d8 <dcgettext@plt>
   119b4:	ldr	r1, [r5]
   119b8:	bl	11030 <fputs_unlocked@plt>
   119bc:	mov	r2, #5
   119c0:	ldr	r1, [pc, #540]	; 11be4 <__assert_fail@plt+0x884>
   119c4:	mov	r0, r4
   119c8:	bl	110d8 <dcgettext@plt>
   119cc:	ldr	r1, [r5]
   119d0:	bl	11030 <fputs_unlocked@plt>
   119d4:	mov	r2, #5
   119d8:	ldr	r1, [pc, #520]	; 11be8 <__assert_fail@plt+0x888>
   119dc:	mov	r0, r4
   119e0:	bl	110d8 <dcgettext@plt>
   119e4:	ldr	r1, [r5]
   119e8:	bl	11030 <fputs_unlocked@plt>
   119ec:	mov	r2, #5
   119f0:	ldr	r1, [pc, #500]	; 11bec <__assert_fail@plt+0x88c>
   119f4:	mov	r0, r4
   119f8:	bl	110d8 <dcgettext@plt>
   119fc:	ldr	r1, [r5]
   11a00:	bl	11030 <fputs_unlocked@plt>
   11a04:	mov	r2, #5
   11a08:	ldr	r1, [pc, #480]	; 11bf0 <__assert_fail@plt+0x890>
   11a0c:	mov	r0, r4
   11a10:	bl	110d8 <dcgettext@plt>
   11a14:	ldr	r1, [r5]
   11a18:	bl	11030 <fputs_unlocked@plt>
   11a1c:	mov	r2, #5
   11a20:	ldr	r1, [pc, #460]	; 11bf4 <__assert_fail@plt+0x894>
   11a24:	mov	r0, r4
   11a28:	bl	110d8 <dcgettext@plt>
   11a2c:	ldr	r1, [r5]
   11a30:	bl	11030 <fputs_unlocked@plt>
   11a34:	mov	r2, #5
   11a38:	ldr	r1, [pc, #440]	; 11bf8 <__assert_fail@plt+0x898>
   11a3c:	mov	r0, r4
   11a40:	bl	110d8 <dcgettext@plt>
   11a44:	ldr	r1, [r5]
   11a48:	bl	11030 <fputs_unlocked@plt>
   11a4c:	mov	r2, #5
   11a50:	ldr	r1, [pc, #420]	; 11bfc <__assert_fail@plt+0x89c>
   11a54:	mov	r0, r4
   11a58:	bl	110d8 <dcgettext@plt>
   11a5c:	ldr	r1, [r5]
   11a60:	bl	11030 <fputs_unlocked@plt>
   11a64:	mov	r2, #5
   11a68:	ldr	r1, [pc, #400]	; 11c00 <__assert_fail@plt+0x8a0>
   11a6c:	mov	r0, r4
   11a70:	bl	110d8 <dcgettext@plt>
   11a74:	ldr	r1, [r5]
   11a78:	bl	11030 <fputs_unlocked@plt>
   11a7c:	mov	r2, #5
   11a80:	ldr	r1, [pc, #380]	; 11c04 <__assert_fail@plt+0x8a4>
   11a84:	mov	r0, r4
   11a88:	bl	110d8 <dcgettext@plt>
   11a8c:	ldr	r3, [r6]
   11a90:	mov	r6, r4
   11a94:	mov	r2, r3
   11a98:	mov	r1, r0
   11a9c:	mov	r0, #1
   11aa0:	bl	11228 <__printf_chk@plt>
   11aa4:	ldr	lr, [pc, #348]	; 11c08 <__assert_fail@plt+0x8a8>
   11aa8:	mov	ip, sp
   11aac:	ldm	lr!, {r0, r1, r2, r3}
   11ab0:	stmia	ip!, {r0, r1, r2, r3}
   11ab4:	ldm	lr!, {r0, r1, r2, r3}
   11ab8:	stmia	ip!, {r0, r1, r2, r3}
   11abc:	ldm	lr!, {r0, r1, r2, r3}
   11ac0:	stmia	ip!, {r0, r1, r2, r3}
   11ac4:	ldm	lr, {r0, r1}
   11ac8:	stm	ip, {r0, r1}
   11acc:	ldr	r1, [sp, r6]
   11ad0:	add	r7, sp, r6
   11ad4:	cmp	r1, #0
   11ad8:	bne	11b7c <__assert_fail@plt+0x81c>
   11adc:	ldr	r6, [r7, #4]
   11ae0:	ldr	r7, [pc, #240]	; 11bd8 <__assert_fail@plt+0x878>
   11ae4:	cmp	r6, #0
   11ae8:	mov	r2, #5
   11aec:	ldr	r1, [pc, #280]	; 11c0c <__assert_fail@plt+0x8ac>
   11af0:	mov	r0, #0
   11af4:	moveq	r6, r7
   11af8:	bl	110d8 <dcgettext@plt>
   11afc:	ldr	r3, [pc, #268]	; 11c10 <__assert_fail@plt+0x8b0>
   11b00:	ldr	r2, [pc, #268]	; 11c14 <__assert_fail@plt+0x8b4>
   11b04:	mov	r1, r0
   11b08:	mov	r0, #1
   11b0c:	bl	11228 <__printf_chk@plt>
   11b10:	mov	r1, #0
   11b14:	mov	r0, #5
   11b18:	bl	1127c <setlocale@plt>
   11b1c:	cmp	r0, #0
   11b20:	bne	11b94 <__assert_fail@plt+0x834>
   11b24:	mov	r2, #5
   11b28:	ldr	r1, [pc, #232]	; 11c18 <__assert_fail@plt+0x8b8>
   11b2c:	mov	r0, #0
   11b30:	bl	110d8 <dcgettext@plt>
   11b34:	ldr	r3, [pc, #156]	; 11bd8 <__assert_fail@plt+0x878>
   11b38:	ldr	r2, [pc, #208]	; 11c10 <__assert_fail@plt+0x8b0>
   11b3c:	mov	r1, r0
   11b40:	mov	r0, #1
   11b44:	bl	11228 <__printf_chk@plt>
   11b48:	mov	r2, #5
   11b4c:	ldr	r1, [pc, #200]	; 11c1c <__assert_fail@plt+0x8bc>
   11b50:	mov	r0, #0
   11b54:	bl	110d8 <dcgettext@plt>
   11b58:	ldr	r2, [pc, #192]	; 11c20 <__assert_fail@plt+0x8c0>
   11b5c:	cmp	r6, r7
   11b60:	ldr	r3, [pc, #188]	; 11c24 <__assert_fail@plt+0x8c4>
   11b64:	moveq	r3, r2
   11b68:	mov	r2, r6
   11b6c:	mov	r1, r0
   11b70:	mov	r0, #1
   11b74:	bl	11228 <__printf_chk@plt>
   11b78:	b	1195c <__assert_fail@plt+0x5fc>
   11b7c:	mov	r0, r8
   11b80:	bl	11048 <strcmp@plt>
   11b84:	add	r6, r6, #8
   11b88:	cmp	r0, #0
   11b8c:	bne	11acc <__assert_fail@plt+0x76c>
   11b90:	b	11adc <__assert_fail@plt+0x77c>
   11b94:	mov	r2, #3
   11b98:	ldr	r1, [pc, #136]	; 11c28 <__assert_fail@plt+0x8c8>
   11b9c:	bl	1130c <strncmp@plt>
   11ba0:	cmp	r0, #0
   11ba4:	beq	11b24 <__assert_fail@plt+0x7c4>
   11ba8:	mov	r2, #5
   11bac:	ldr	r1, [pc, #120]	; 11c2c <__assert_fail@plt+0x8cc>
   11bb0:	mov	r0, #0
   11bb4:	bl	110d8 <dcgettext@plt>
   11bb8:	ldr	r1, [r5]
   11bbc:	bl	11030 <fputs_unlocked@plt>
   11bc0:	b	11b24 <__assert_fail@plt+0x7c4>
   11bc4:	andeq	sl, r2, r0, asr #3
   11bc8:	muleq	r2, r0, r1
   11bcc:	andeq	r8, r1, sl, ror #21
   11bd0:	andeq	r8, r1, r1, lsl fp
   11bd4:	muleq	r2, r4, r1
   11bd8:	andeq	r8, r1, r4, ror #21
   11bdc:	andeq	r8, r1, r6, ror #22
   11be0:	ldrdeq	r8, [r1], -r2
   11be4:	muleq	r1, fp, ip
   11be8:	andeq	r8, r1, r2, lsl #27
   11bec:	strdeq	r8, [r1], -r9
   11bf0:	andeq	r8, r1, r9, ror lr
   11bf4:	andeq	r8, r1, r3, ror #29
   11bf8:	andeq	r8, r1, sl, lsr #30
   11bfc:	strdeq	r9, [r1], -fp
   11c00:	andeq	r9, r1, r8, lsr #2
   11c04:	andeq	r9, r1, lr, asr r1
   11c08:	ldrdeq	r8, [r1], -ip
   11c0c:	andeq	r9, r1, r3, ror #3
   11c10:	strdeq	r9, [r1], -sl
   11c14:	andeq	r9, r1, r2, lsr #4
   11c18:	andeq	r9, r1, fp, ror r2
   11c1c:	muleq	r1, r6, r2
   11c20:	andeq	r9, r1, r7, lsr #7
   11c24:	strdeq	r9, [r1], -sl
   11c28:	andeq	r9, r1, r0, lsr r2
   11c2c:	andeq	r9, r1, r4, lsr r2
   11c30:	push	{r4, r5, r6, lr}
   11c34:	subs	r5, r0, #0
   11c38:	beq	11c88 <__assert_fail@plt+0x928>
   11c3c:	cmp	r1, #0
   11c40:	beq	11c94 <__assert_fail@plt+0x934>
   11c44:	mov	r6, r1
   11c48:	bl	111d4 <strlen@plt>
   11c4c:	mov	r4, r0
   11c50:	mov	r0, r6
   11c54:	bl	111d4 <strlen@plt>
   11c58:	add	r0, r4, r0
   11c5c:	add	r0, r0, #2
   11c60:	bl	1728c <__assert_fail@plt+0x5f2c>
   11c64:	mov	r1, r5
   11c68:	mov	r4, r0
   11c6c:	bl	110c0 <stpcpy@plt>
   11c70:	ldr	r1, [pc, #44]	; 11ca4 <__assert_fail@plt+0x944>
   11c74:	bl	110c0 <stpcpy@plt>
   11c78:	mov	r1, r6
   11c7c:	bl	11138 <strcpy@plt>
   11c80:	mov	r0, r4
   11c84:	pop	{r4, r5, r6, pc}
   11c88:	cmp	r1, #0
   11c8c:	beq	11c9c <__assert_fail@plt+0x93c>
   11c90:	mov	r0, r1
   11c94:	pop	{r4, r5, r6, lr}
   11c98:	b	17704 <__assert_fail@plt+0x63a4>
   11c9c:	mov	r4, r1
   11ca0:	b	11c80 <__assert_fail@plt+0x920>
   11ca4:	andeq	r9, r1, lr, lsr r4
   11ca8:	mov	r3, #2
   11cac:	str	r3, [r0]
   11cb0:	mov	r2, #1
   11cb4:	mov	r3, #0
   11cb8:	str	r3, [r0, #8]
   11cbc:	strb	r2, [r0, #12]
   11cc0:	strb	r3, [r0, #4]
   11cc4:	strb	r3, [r0, #13]
   11cc8:	str	r3, [r0, #16]
   11ccc:	str	r3, [r0, #20]
   11cd0:	bx	lr
   11cd4:	push	{r4, lr}
   11cd8:	mov	r4, r0
   11cdc:	ldr	r0, [r0, #16]
   11ce0:	bl	129e4 <__assert_fail@plt+0x1684>
   11ce4:	ldr	r0, [r4, #20]
   11ce8:	pop	{r4, lr}
   11cec:	b	129e4 <__assert_fail@plt+0x1684>
   11cf0:	push	{r4, lr}
   11cf4:	sub	sp, sp, #24
   11cf8:	mov	r4, r0
   11cfc:	bl	11348 <getgrgid@plt>
   11d00:	cmp	r0, #0
   11d04:	ldrne	r0, [r0]
   11d08:	bne	11d1c <__assert_fail@plt+0x9bc>
   11d0c:	mov	r2, sp
   11d10:	mov	r0, r4
   11d14:	mov	r1, #0
   11d18:	bl	155dc <__assert_fail@plt+0x427c>
   11d1c:	bl	17704 <__assert_fail@plt+0x63a4>
   11d20:	add	sp, sp, #24
   11d24:	pop	{r4, pc}
   11d28:	push	{r4, lr}
   11d2c:	sub	sp, sp, #24
   11d30:	mov	r4, r0
   11d34:	bl	11054 <getpwuid@plt>
   11d38:	cmp	r0, #0
   11d3c:	ldrne	r0, [r0]
   11d40:	bne	11d54 <__assert_fail@plt+0x9f4>
   11d44:	mov	r2, sp
   11d48:	mov	r0, r4
   11d4c:	mov	r1, #0
   11d50:	bl	155dc <__assert_fail@plt+0x427c>
   11d54:	bl	17704 <__assert_fail@plt+0x63a4>
   11d58:	add	sp, sp, #24
   11d5c:	pop	{r4, pc}
   11d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d64:	sub	sp, sp, #260	; 0x104
   11d68:	str	r2, [sp, #28]
   11d6c:	add	r2, sp, #296	; 0x128
   11d70:	str	r3, [sp, #36]	; 0x24
   11d74:	ldm	r2, {r2, r3, r8}
   11d78:	cmn	r2, #1
   11d7c:	cmneq	r3, #1
   11d80:	movne	r3, #1
   11d84:	moveq	r3, #0
   11d88:	movne	r3, #0
   11d8c:	bne	11dac <__assert_fail@plt+0xa4c>
   11d90:	ldrb	r2, [r8, #12]
   11d94:	cmp	r2, #0
   11d98:	bne	11dac <__assert_fail@plt+0xa4c>
   11d9c:	ldr	r3, [r8]
   11da0:	cmp	r3, #2
   11da4:	moveq	r3, #8
   11da8:	movne	r3, #0
   11dac:	orr	r1, r3, r1
   11db0:	mov	r2, #0
   11db4:	bl	17760 <__assert_fail@plt+0x6400>
   11db8:	mov	r5, #0
   11dbc:	mov	r3, #1
   11dc0:	str	r3, [sp, #24]
   11dc4:	str	r0, [sp, #20]
   11dc8:	ldr	r0, [sp, #20]
   11dcc:	bl	14060 <__assert_fail@plt+0x2d00>
   11dd0:	subs	fp, r0, #0
   11dd4:	bne	11e68 <__assert_fail@plt+0xb08>
   11dd8:	bl	11204 <__errno_location@plt>
   11ddc:	ldr	r5, [r0]
   11de0:	mov	r4, r0
   11de4:	cmp	r5, #0
   11de8:	beq	11e20 <__assert_fail@plt+0xac0>
   11dec:	ldrb	r3, [r8, #13]
   11df0:	cmp	r3, #0
   11df4:	str	r3, [sp, #24]
   11df8:	strne	fp, [sp, #24]
   11dfc:	bne	11e20 <__assert_fail@plt+0xac0>
   11e00:	mov	r2, #5
   11e04:	ldr	r1, [pc, #2672]	; 1287c <__assert_fail@plt+0x151c>
   11e08:	mov	r0, r3
   11e0c:	bl	110d8 <dcgettext@plt>
   11e10:	mov	r1, r5
   11e14:	mov	r2, r0
   11e18:	ldr	r0, [sp, #24]
   11e1c:	bl	11168 <error@plt>
   11e20:	ldr	r0, [sp, #20]
   11e24:	bl	13f48 <__assert_fail@plt+0x2be8>
   11e28:	cmp	r0, #0
   11e2c:	beq	11e5c <__assert_fail@plt+0xafc>
   11e30:	mov	r2, #5
   11e34:	ldr	r1, [pc, #2628]	; 12880 <__assert_fail@plt+0x1520>
   11e38:	mov	r0, #0
   11e3c:	ldr	r4, [r4]
   11e40:	bl	110d8 <dcgettext@plt>
   11e44:	mov	r1, r4
   11e48:	mov	r2, r0
   11e4c:	mov	r0, #0
   11e50:	bl	11168 <error@plt>
   11e54:	mov	r3, #0
   11e58:	str	r3, [sp, #24]
   11e5c:	ldr	r0, [sp, #24]
   11e60:	add	sp, sp, #260	; 0x104
   11e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e68:	ldr	r3, [fp, #28]
   11e6c:	str	r3, [sp, #12]
   11e70:	ldrh	r3, [fp, #56]	; 0x38
   11e74:	sub	r3, r3, #1
   11e78:	cmp	r3, #9
   11e7c:	ldrls	pc, [pc, r3, lsl #2]
   11e80:	b	11fdc <__assert_fail@plt+0xc7c>
   11e84:	andeq	r1, r1, ip, lsr #29
   11e88:	andeq	r2, r1, r8, lsl #3
   11e8c:	ldrdeq	r1, [r1], -ip
   11e90:	andeq	r2, r1, ip, ror #2
   11e94:	ldrdeq	r1, [r1], -ip
   11e98:	andeq	r1, r1, ip, asr #31
   11e9c:	andeq	r2, r1, r0, lsr #2
   11ea0:	ldrdeq	r1, [r1], -ip
   11ea4:	ldrdeq	r1, [r1], -ip
   11ea8:	andeq	r2, r1, r0, asr #1
   11eac:	ldrb	r9, [r8, #4]
   11eb0:	cmp	r9, #0
   11eb4:	beq	11fdc <__assert_fail@plt+0xc7c>
   11eb8:	ldr	ip, [r8, #8]
   11ebc:	cmp	ip, #0
   11ec0:	beq	11f6c <__assert_fail@plt+0xc0c>
   11ec4:	ldrd	r0, [fp, #160]	; 0xa0
   11ec8:	ldrd	r2, [ip]
   11ecc:	cmp	r1, r3
   11ed0:	cmpeq	r0, r2
   11ed4:	bne	11f6c <__assert_fail@plt+0xc0c>
   11ed8:	ldrd	r2, [fp, #64]	; 0x40
   11edc:	ldrd	r0, [ip, #8]
   11ee0:	cmp	r3, r1
   11ee4:	cmpeq	r2, r0
   11ee8:	bne	11f6c <__assert_fail@plt+0xc0c>
   11eec:	ldr	r1, [pc, #2448]	; 12884 <__assert_fail@plt+0x1524>
   11ef0:	ldr	r0, [sp, #12]
   11ef4:	bl	11048 <strcmp@plt>
   11ef8:	mov	r2, #5
   11efc:	subs	r4, r0, #0
   11f00:	bne	11f7c <__assert_fail@plt+0xc1c>
   11f04:	ldr	r1, [pc, #2428]	; 12888 <__assert_fail@plt+0x1528>
   11f08:	bl	110d8 <dcgettext@plt>
   11f0c:	ldr	r1, [sp, #12]
   11f10:	mov	r6, r0
   11f14:	mov	r0, #4
   11f18:	bl	16b14 <__assert_fail@plt+0x57b4>
   11f1c:	mov	r2, r6
   11f20:	mov	r1, r5
   11f24:	mov	r3, r0
   11f28:	mov	r0, r4
   11f2c:	bl	11168 <error@plt>
   11f30:	mov	r2, #5
   11f34:	ldr	r1, [pc, #2384]	; 1288c <__assert_fail@plt+0x152c>
   11f38:	mov	r0, r5
   11f3c:	bl	110d8 <dcgettext@plt>
   11f40:	mov	r1, r5
   11f44:	mov	r2, r0
   11f48:	mov	r0, #0
   11f4c:	bl	11168 <error@plt>
   11f50:	mov	r2, #4
   11f54:	mov	r1, fp
   11f58:	ldr	r0, [sp, #20]
   11f5c:	bl	14628 <__assert_fail@plt+0x32c8>
   11f60:	ldr	r0, [sp, #20]
   11f64:	bl	14060 <__assert_fail@plt+0x2d00>
   11f68:	mov	r9, r5
   11f6c:	ldr	r3, [sp, #24]
   11f70:	and	r3, r3, r9
   11f74:	str	r3, [sp, #24]
   11f78:	b	11dc8 <__assert_fail@plt+0xa68>
   11f7c:	ldr	r1, [pc, #2316]	; 12890 <__assert_fail@plt+0x1530>
   11f80:	mov	r0, r5
   11f84:	bl	110d8 <dcgettext@plt>
   11f88:	ldr	r2, [sp, #12]
   11f8c:	mov	r1, #4
   11f90:	mov	r4, r0
   11f94:	mov	r0, r5
   11f98:	bl	16aa8 <__assert_fail@plt+0x5748>
   11f9c:	ldr	r2, [pc, #2272]	; 12884 <__assert_fail@plt+0x1524>
   11fa0:	mov	r1, #4
   11fa4:	mov	r6, r0
   11fa8:	mov	r0, #1
   11fac:	bl	16aa8 <__assert_fail@plt+0x5748>
   11fb0:	mov	r3, r6
   11fb4:	mov	r2, r4
   11fb8:	mov	r1, r5
   11fbc:	str	r0, [sp]
   11fc0:	mov	r0, #0
   11fc4:	bl	11168 <error@plt>
   11fc8:	b	11f30 <__assert_fail@plt+0xbd0>
   11fcc:	ldrb	r3, [r8, #4]
   11fd0:	cmp	r3, #0
   11fd4:	moveq	r9, #1
   11fd8:	beq	11f6c <__assert_fail@plt+0xc0c>
   11fdc:	ldr	r3, [fp, #24]
   11fe0:	ldr	r2, [sp, #296]	; 0x128
   11fe4:	str	r3, [sp, #32]
   11fe8:	ldr	r3, [sp, #300]	; 0x12c
   11fec:	add	r4, fp, #64	; 0x40
   11ff0:	cmn	r3, #1
   11ff4:	cmneq	r2, #1
   11ff8:	moveq	r7, #1
   11ffc:	movne	r7, #0
   12000:	ldrb	r3, [r8, #12]
   12004:	bne	1202c <__assert_fail@plt+0xccc>
   12008:	ldr	r2, [r8]
   1200c:	cmp	r2, #2
   12010:	bne	1202c <__assert_fail@plt+0xccc>
   12014:	ldr	r2, [r8, #8]
   12018:	cmp	r2, #0
   1201c:	bne	1202c <__assert_fail@plt+0xccc>
   12020:	cmp	r3, #0
   12024:	moveq	r6, r7
   12028:	beq	12700 <__assert_fail@plt+0x13a0>
   1202c:	cmp	r3, #0
   12030:	beq	126b4 <__assert_fail@plt+0x1354>
   12034:	ldr	r3, [fp, #80]	; 0x50
   12038:	and	r3, r3, #61440	; 0xf000
   1203c:	cmp	r3, #40960	; 0xa000
   12040:	bne	126b4 <__assert_fail@plt+0x1354>
   12044:	ldr	r0, [sp, #20]
   12048:	mov	r3, r5
   1204c:	add	r2, sp, #48	; 0x30
   12050:	ldr	r1, [sp, #32]
   12054:	ldr	r0, [r0, #32]
   12058:	bl	189a8 <__assert_fail@plt+0x7648>
   1205c:	cmp	r0, #0
   12060:	beq	126b0 <__assert_fail@plt+0x1350>
   12064:	ldrb	r9, [r8, #13]
   12068:	cmp	r9, #0
   1206c:	addne	r4, sp, #48	; 0x30
   12070:	movne	r9, r5
   12074:	bne	120b8 <__assert_fail@plt+0xd58>
   12078:	bl	11204 <__errno_location@plt>
   1207c:	mov	r2, #5
   12080:	ldr	r1, [pc, #2060]	; 12894 <__assert_fail@plt+0x1534>
   12084:	ldr	r4, [r0]
   12088:	mov	r0, r5
   1208c:	bl	110d8 <dcgettext@plt>
   12090:	ldr	r1, [sp, #12]
   12094:	mov	r6, r0
   12098:	mov	r0, #4
   1209c:	bl	16b14 <__assert_fail@plt+0x57b4>
   120a0:	mov	r1, r4
   120a4:	mov	r2, r6
   120a8:	add	r4, sp, #48	; 0x30
   120ac:	mov	r3, r0
   120b0:	mov	r0, r5
   120b4:	bl	11168 <error@plt>
   120b8:	mov	r6, r5
   120bc:	b	126f8 <__assert_fail@plt+0x1398>
   120c0:	ldr	r3, [fp, #48]	; 0x30
   120c4:	cmp	r3, #0
   120c8:	bne	120e4 <__assert_fail@plt+0xd84>
   120cc:	ldr	r3, [fp, #16]
   120d0:	cmp	r3, #0
   120d4:	moveq	r9, #1
   120d8:	streq	r9, [fp, #16]
   120dc:	moveq	r2, r9
   120e0:	beq	12838 <__assert_fail@plt+0x14d8>
   120e4:	ldrb	r3, [r8, #13]
   120e8:	cmp	r3, #0
   120ec:	bne	12154 <__assert_fail@plt+0xdf4>
   120f0:	ldr	r4, [fp, #32]
   120f4:	ldr	r1, [pc, #1948]	; 12898 <__assert_fail@plt+0x1538>
   120f8:	mov	r2, #5
   120fc:	mov	r0, r5
   12100:	bl	110d8 <dcgettext@plt>
   12104:	ldr	r1, [sp, #12]
   12108:	mov	r6, r0
   1210c:	mov	r0, #4
   12110:	bl	16b14 <__assert_fail@plt+0x57b4>
   12114:	mov	r2, r6
   12118:	mov	r3, r0
   1211c:	b	12148 <__assert_fail@plt+0xde8>
   12120:	ldrb	r3, [r8, #13]
   12124:	cmp	r3, #0
   12128:	bne	12154 <__assert_fail@plt+0xdf4>
   1212c:	ldr	r2, [sp, #12]
   12130:	mov	r1, #3
   12134:	mov	r0, r5
   12138:	ldr	r4, [fp, #32]
   1213c:	bl	16bb8 <__assert_fail@plt+0x5858>
   12140:	ldr	r2, [pc, #1876]	; 1289c <__assert_fail@plt+0x153c>
   12144:	mov	r3, r0
   12148:	mov	r1, r4
   1214c:	mov	r0, r5
   12150:	bl	11168 <error@plt>
   12154:	mov	r4, r5
   12158:	mov	r6, r5
   1215c:	mov	r3, #1
   12160:	str	r3, [sp, #16]
   12164:	mov	r9, r5
   12168:	b	12308 <__assert_fail@plt+0xfa8>
   1216c:	ldrb	r3, [r8, #13]
   12170:	cmp	r3, #0
   12174:	bne	12154 <__assert_fail@plt+0xdf4>
   12178:	ldr	r4, [fp, #32]
   1217c:	mov	r2, #5
   12180:	ldr	r1, [pc, #1816]	; 128a0 <__assert_fail@plt+0x1540>
   12184:	b	120fc <__assert_fail@plt+0xd9c>
   12188:	mov	r1, fp
   1218c:	ldr	r0, [sp, #20]
   12190:	bl	177a8 <__assert_fail@plt+0x6448>
   12194:	cmp	r0, #0
   12198:	beq	11fdc <__assert_fail@plt+0xc7c>
   1219c:	mov	r2, #5
   121a0:	ldr	r1, [pc, #1788]	; 128a4 <__assert_fail@plt+0x1544>
   121a4:	mov	r0, r5
   121a8:	bl	110d8 <dcgettext@plt>
   121ac:	ldr	r2, [sp, #12]
   121b0:	mov	r1, #3
   121b4:	mov	r4, r0
   121b8:	mov	r0, r5
   121bc:	bl	16bb8 <__assert_fail@plt+0x5858>
   121c0:	mov	r2, r4
   121c4:	mov	r1, r5
   121c8:	mov	r3, r0
   121cc:	mov	r0, #0
   121d0:	bl	11168 <error@plt>
   121d4:	b	11f68 <__assert_fail@plt+0xc08>
   121d8:	ldr	r1, [pc, #1712]	; 12890 <__assert_fail@plt+0x1530>
   121dc:	mov	r0, r5
   121e0:	bl	110d8 <dcgettext@plt>
   121e4:	ldr	r2, [sp, #12]
   121e8:	mov	r1, #4
   121ec:	mov	r4, r0
   121f0:	mov	r0, r5
   121f4:	bl	16aa8 <__assert_fail@plt+0x5748>
   121f8:	ldr	r2, [pc, #1668]	; 12884 <__assert_fail@plt+0x1524>
   121fc:	mov	r1, #4
   12200:	mov	r6, r0
   12204:	mov	r0, #1
   12208:	bl	16aa8 <__assert_fail@plt+0x5748>
   1220c:	mov	r3, r6
   12210:	mov	r2, r4
   12214:	mov	r1, r5
   12218:	str	r0, [sp]
   1221c:	mov	r0, #0
   12220:	bl	11168 <error@plt>
   12224:	b	1279c <__assert_fail@plt+0x143c>
   12228:	cmp	r6, #0
   1222c:	moveq	r3, #1
   12230:	streq	r3, [sp, #16]
   12234:	beq	12308 <__assert_fail@plt+0xfa8>
   12238:	ldrb	r3, [r8, #12]
   1223c:	cmp	r3, #0
   12240:	str	r3, [sp, #16]
   12244:	bne	12424 <__assert_fail@plt+0x10c4>
   12248:	ldr	r0, [sp, #20]
   1224c:	mov	r3, #256	; 0x100
   12250:	str	r3, [sp]
   12254:	ldr	r2, [sp, #28]
   12258:	ldr	r3, [sp, #36]	; 0x24
   1225c:	ldr	r1, [sp, #32]
   12260:	ldr	r0, [r0, #32]
   12264:	bl	112dc <fchownat@plt>
   12268:	cmp	r0, #0
   1226c:	moveq	r7, #1
   12270:	movne	r7, #0
   12274:	streq	r6, [sp, #16]
   12278:	beq	12298 <__assert_fail@plt+0xf38>
   1227c:	bl	11204 <__errno_location@plt>
   12280:	ldr	r3, [r0]
   12284:	cmp	r3, #95	; 0x5f
   12288:	moveq	r7, r6
   1228c:	moveq	r3, #0
   12290:	movne	r3, r6
   12294:	str	r3, [sp, #16]
   12298:	eor	sl, r7, #1
   1229c:	and	sl, sl, r6
   122a0:	ands	sl, sl, #255	; 0xff
   122a4:	moveq	r9, r7
   122a8:	beq	12308 <__assert_fail@plt+0xfa8>
   122ac:	ldrb	r6, [r8, #13]
   122b0:	cmp	r6, #0
   122b4:	bne	12164 <__assert_fail@plt+0xe04>
   122b8:	bl	11204 <__errno_location@plt>
   122bc:	ldr	r3, [sp, #28]
   122c0:	mov	r2, #5
   122c4:	cmn	r3, #1
   122c8:	ldrne	r1, [pc, #1496]	; 128a8 <__assert_fail@plt+0x1548>
   122cc:	ldreq	r1, [pc, #1496]	; 128ac <__assert_fail@plt+0x154c>
   122d0:	ldr	r7, [r0]
   122d4:	mov	r0, r5
   122d8:	bl	110d8 <dcgettext@plt>
   122dc:	ldr	r1, [sp, #12]
   122e0:	mov	r9, r0
   122e4:	mov	r0, #4
   122e8:	bl	16b14 <__assert_fail@plt+0x57b4>
   122ec:	mov	r2, r9
   122f0:	mov	r1, r7
   122f4:	mov	r9, r6
   122f8:	mov	r6, sl
   122fc:	mov	r3, r0
   12300:	mov	r0, r5
   12304:	bl	11168 <error@plt>
   12308:	ldr	r2, [r8]
   1230c:	cmp	r2, #2
   12310:	beq	12828 <__assert_fail@plt+0x14c8>
   12314:	ldr	r3, [sp, #16]
   12318:	and	r6, r6, r9
   1231c:	and	r6, r6, r3
   12320:	tst	r6, #255	; 0xff
   12324:	beq	125f8 <__assert_fail@plt+0x1298>
   12328:	ldr	r3, [sp, #28]
   1232c:	cmn	r3, #1
   12330:	beq	12348 <__assert_fail@plt+0xfe8>
   12334:	ldr	r3, [r4, #24]
   12338:	ldr	r1, [sp, #28]
   1233c:	cmp	r1, r3
   12340:	movne	r3, #1
   12344:	bne	12364 <__assert_fail@plt+0x1004>
   12348:	ldr	r3, [sp, #36]	; 0x24
   1234c:	cmn	r3, #1
   12350:	beq	125f8 <__assert_fail@plt+0x1298>
   12354:	ldr	r3, [r4, #28]
   12358:	ldr	r1, [sp, #36]	; 0x24
   1235c:	subs	r3, r3, r1
   12360:	movne	r3, #1
   12364:	cmp	r2, #0
   12368:	movne	r2, r3
   1236c:	orreq	r2, r3, #1
   12370:	cmp	r2, #0
   12374:	beq	12828 <__assert_fail@plt+0x14c8>
   12378:	cmp	r9, #0
   1237c:	beq	12874 <__assert_fail@plt+0x1514>
   12380:	ldr	r2, [sp, #16]
   12384:	cmp	r2, #0
   12388:	beq	127c0 <__assert_fail@plt+0x1460>
   1238c:	cmp	r3, #0
   12390:	movne	r3, #2
   12394:	moveq	r3, #4
   12398:	cmp	r4, #0
   1239c:	bne	12848 <__assert_fail@plt+0x14e8>
   123a0:	ldr	sl, [r8, #16]
   123a4:	ldr	r4, [r8, #20]
   123a8:	mov	r6, r5
   123ac:	str	r5, [sp, #16]
   123b0:	mov	r1, r4
   123b4:	mov	r0, sl
   123b8:	str	r3, [sp, #40]	; 0x28
   123bc:	bl	11c30 <__assert_fail@plt+0x8d0>
   123c0:	cmp	r4, #0
   123c4:	movne	r1, r6
   123c8:	moveq	r1, #0
   123cc:	cmp	sl, #0
   123d0:	str	r0, [sp, #32]
   123d4:	ldr	r0, [sp, #16]
   123d8:	moveq	r0, #0
   123dc:	bl	11c30 <__assert_fail@plt+0x8d0>
   123e0:	ldr	r3, [sp, #40]	; 0x28
   123e4:	mov	r2, #5
   123e8:	cmp	r3, #3
   123ec:	mov	r7, r0
   123f0:	beq	12600 <__assert_fail@plt+0x12a0>
   123f4:	cmp	r3, #4
   123f8:	beq	12694 <__assert_fail@plt+0x1334>
   123fc:	cmp	sl, #0
   12400:	ldrne	r1, [pc, #1192]	; 128b0 <__assert_fail@plt+0x1550>
   12404:	bne	12414 <__assert_fail@plt+0x10b4>
   12408:	cmp	r4, #0
   1240c:	ldrne	r1, [pc, #1184]	; 128b4 <__assert_fail@plt+0x1554>
   12410:	ldreq	r1, [pc, #1184]	; 128b8 <__assert_fail@plt+0x1558>
   12414:	mov	r0, r5
   12418:	bl	110d8 <dcgettext@plt>
   1241c:	mov	r4, r0
   12420:	b	12658 <__assert_fail@plt+0x12f8>
   12424:	cmp	r7, #0
   12428:	bne	12448 <__assert_fail@plt+0x10e8>
   1242c:	ldr	r3, [r4, #16]
   12430:	and	r3, r3, #61440	; 0xf000
   12434:	cmp	r3, #32768	; 0x8000
   12438:	beq	12470 <__assert_fail@plt+0x1110>
   1243c:	cmp	r3, #16384	; 0x4000
   12440:	moveq	sl, #18688	; 0x4900
   12444:	beq	12474 <__assert_fail@plt+0x1114>
   12448:	ldr	r0, [sp, #20]
   1244c:	str	r5, [sp]
   12450:	ldr	r3, [sp, #36]	; 0x24
   12454:	ldr	r2, [sp, #28]
   12458:	ldr	r1, [sp, #32]
   1245c:	ldr	r0, [r0, #32]
   12460:	bl	112dc <fchownat@plt>
   12464:	clz	r7, r0
   12468:	lsr	r7, r7, #5
   1246c:	b	124b8 <__assert_fail@plt+0x1158>
   12470:	mov	sl, #2304	; 0x900
   12474:	ldr	r3, [sp, #20]
   12478:	mov	r2, sl
   1247c:	ldr	r1, [sp, #32]
   12480:	ldr	r3, [r3, #32]
   12484:	mov	r0, r3
   12488:	str	r3, [sp, #40]	; 0x28
   1248c:	bl	11084 <__openat64_2@plt>
   12490:	subs	r6, r0, #0
   12494:	bge	124f0 <__assert_fail@plt+0x1190>
   12498:	bl	11204 <__errno_location@plt>
   1249c:	ldr	r2, [r0]
   124a0:	mov	r3, r0
   124a4:	cmp	r2, #13
   124a8:	beq	124c0 <__assert_fail@plt+0x1160>
   124ac:	ldr	r3, [r3]
   124b0:	cmp	r3, #13
   124b4:	beq	12448 <__assert_fail@plt+0x10e8>
   124b8:	ldr	r6, [sp, #16]
   124bc:	b	12298 <__assert_fail@plt+0xf38>
   124c0:	ldr	r2, [r4, #16]
   124c4:	and	r2, r2, #61440	; 0xf000
   124c8:	cmp	r2, #32768	; 0x8000
   124cc:	bne	124ac <__assert_fail@plt+0x114c>
   124d0:	str	r0, [sp, #44]	; 0x2c
   124d4:	orr	r2, sl, #1
   124d8:	ldr	r1, [sp, #32]
   124dc:	ldr	r0, [sp, #40]	; 0x28
   124e0:	bl	11084 <__openat64_2@plt>
   124e4:	ldr	r3, [sp, #44]	; 0x2c
   124e8:	subs	r6, r0, #0
   124ec:	blt	124ac <__assert_fail@plt+0x114c>
   124f0:	add	r1, sp, #152	; 0x98
   124f4:	mov	r0, r6
   124f8:	bl	18988 <__assert_fail@plt+0x7628>
   124fc:	cmp	r0, #0
   12500:	bne	12598 <__assert_fail@plt+0x1238>
   12504:	ldrd	r0, [r4, #96]	; 0x60
   12508:	ldrd	r2, [sp, #248]	; 0xf8
   1250c:	cmp	r1, r3
   12510:	cmpeq	r0, r2
   12514:	bne	125e0 <__assert_fail@plt+0x1280>
   12518:	ldrd	r0, [r4]
   1251c:	ldrd	r2, [sp, #152]	; 0x98
   12520:	cmp	r1, r3
   12524:	cmpeq	r0, r2
   12528:	bne	125e0 <__assert_fail@plt+0x1280>
   1252c:	ldr	r3, [sp, #296]	; 0x128
   12530:	cmn	r3, #1
   12534:	beq	12554 <__assert_fail@plt+0x11f4>
   12538:	ldr	r3, [sp, #176]	; 0xb0
   1253c:	ldr	r2, [sp, #296]	; 0x128
   12540:	cmp	r2, r3
   12544:	bne	125e8 <__assert_fail@plt+0x1288>
   12548:	ldr	r3, [sp, #300]	; 0x12c
   1254c:	cmn	r3, #1
   12550:	beq	12564 <__assert_fail@plt+0x1204>
   12554:	ldr	r3, [sp, #180]	; 0xb4
   12558:	ldr	r2, [sp, #300]	; 0x12c
   1255c:	cmp	r2, r3
   12560:	bne	125e8 <__assert_fail@plt+0x1288>
   12564:	ldr	r2, [sp, #36]	; 0x24
   12568:	ldr	r1, [sp, #28]
   1256c:	mov	r0, r6
   12570:	bl	111f8 <fchown@plt>
   12574:	cmp	r0, #0
   12578:	bne	12598 <__assert_fail@plt+0x1238>
   1257c:	mov	r0, r6
   12580:	bl	11324 <close@plt>
   12584:	cmp	r0, #0
   12588:	bne	124b8 <__assert_fail@plt+0x1158>
   1258c:	ldr	r6, [sp, #16]
   12590:	mov	r7, r9
   12594:	b	12298 <__assert_fail@plt+0xf38>
   12598:	mov	sl, #6
   1259c:	bl	11204 <__errno_location@plt>
   125a0:	sub	sl, sl, #3
   125a4:	ldr	r2, [r0]
   125a8:	str	r0, [sp, #44]	; 0x2c
   125ac:	mov	r0, r6
   125b0:	str	r2, [sp, #40]	; 0x28
   125b4:	bl	11324 <close@plt>
   125b8:	ldr	r3, [sp, #44]	; 0x2c
   125bc:	ldr	r2, [sp, #40]	; 0x28
   125c0:	str	r2, [r3]
   125c4:	cmp	sl, #3
   125c8:	ldrls	pc, [pc, sl, lsl #2]
   125cc:	b	1258c <__assert_fail@plt+0x122c>
   125d0:	strdeq	r2, [r1], -r0
   125d4:	strdeq	r2, [r1], -r0
   125d8:	andeq	r2, r1, r8, asr #8
   125dc:			; <UNDEFINED> instruction: 0x000124b8
   125e0:	mov	sl, #4
   125e4:	b	1259c <__assert_fail@plt+0x123c>
   125e8:	mov	sl, #2
   125ec:	b	1259c <__assert_fail@plt+0x123c>
   125f0:	mov	r6, r7
   125f4:	b	12298 <__assert_fail@plt+0xf38>
   125f8:	mov	r3, r5
   125fc:	b	12364 <__assert_fail@plt+0x1004>
   12600:	cmp	r0, #0
   12604:	beq	12624 <__assert_fail@plt+0x12c4>
   12608:	cmp	sl, #0
   1260c:	ldrne	r1, [pc, #680]	; 128bc <__assert_fail@plt+0x155c>
   12610:	bne	12414 <__assert_fail@plt+0x10b4>
   12614:	cmp	r4, #0
   12618:	ldrne	r1, [pc, #672]	; 128c0 <__assert_fail@plt+0x1560>
   1261c:	ldreq	r1, [pc, #672]	; 128c4 <__assert_fail@plt+0x1564>
   12620:	b	12414 <__assert_fail@plt+0x10b4>
   12624:	cmp	sl, #0
   12628:	ldrne	r1, [pc, #664]	; 128c8 <__assert_fail@plt+0x1568>
   1262c:	bne	1263c <__assert_fail@plt+0x12dc>
   12630:	cmp	r4, #0
   12634:	ldrne	r1, [pc, #656]	; 128cc <__assert_fail@plt+0x156c>
   12638:	ldreq	r1, [pc, #644]	; 128c4 <__assert_fail@plt+0x1564>
   1263c:	bl	110d8 <dcgettext@plt>
   12640:	mov	r4, r0
   12644:	mov	r0, r5
   12648:	bl	129e4 <__assert_fail@plt+0x1684>
   1264c:	mov	r3, r7
   12650:	ldr	r7, [sp, #32]
   12654:	str	r3, [sp, #32]
   12658:	ldr	r1, [sp, #12]
   1265c:	mov	r0, #4
   12660:	bl	16b14 <__assert_fail@plt+0x57b4>
   12664:	ldr	r3, [sp, #32]
   12668:	mov	r1, r4
   1266c:	str	r3, [sp]
   12670:	mov	r3, r7
   12674:	mov	r2, r0
   12678:	mov	r0, #1
   1267c:	bl	11228 <__printf_chk@plt>
   12680:	mov	r0, r7
   12684:	bl	129e4 <__assert_fail@plt+0x1684>
   12688:	ldr	r0, [sp, #32]
   1268c:	bl	129e4 <__assert_fail@plt+0x1684>
   12690:	b	12818 <__assert_fail@plt+0x14b8>
   12694:	cmp	sl, #0
   12698:	ldrne	r1, [pc, #560]	; 128d0 <__assert_fail@plt+0x1570>
   1269c:	bne	12414 <__assert_fail@plt+0x10b4>
   126a0:	cmp	r4, #0
   126a4:	ldrne	r1, [pc, #552]	; 128d4 <__assert_fail@plt+0x1574>
   126a8:	ldreq	r1, [pc, #552]	; 128d8 <__assert_fail@plt+0x1578>
   126ac:	b	12414 <__assert_fail@plt+0x10b4>
   126b0:	add	r4, sp, #48	; 0x30
   126b4:	ldr	r3, [sp, #296]	; 0x128
   126b8:	cmn	r3, #1
   126bc:	beq	126d4 <__assert_fail@plt+0x1374>
   126c0:	ldr	r3, [r4, #24]
   126c4:	ldr	r2, [sp, #296]	; 0x128
   126c8:	cmp	r2, r3
   126cc:	movne	r9, #1
   126d0:	bne	120b8 <__assert_fail@plt+0xd58>
   126d4:	ldr	r3, [sp, #300]	; 0x12c
   126d8:	cmn	r3, #1
   126dc:	moveq	r9, #1
   126e0:	moveq	r6, r9
   126e4:	ldrne	r6, [r4, #28]
   126e8:	movne	r9, #1
   126ec:	subne	r6, r6, r3
   126f0:	clzne	r6, r6
   126f4:	lsrne	r6, r6, #5
   126f8:	cmp	r9, #0
   126fc:	beq	12228 <__assert_fail@plt+0xec8>
   12700:	ldrh	r9, [fp, #56]	; 0x38
   12704:	sub	r3, r9, #1
   12708:	bic	r9, r9, #2
   1270c:	cmp	r9, #4
   12710:	cmpne	r3, #1
   12714:	movhi	r9, #0
   12718:	movls	r9, #1
   1271c:	movhi	r9, #1
   12720:	bhi	12228 <__assert_fail@plt+0xec8>
   12724:	ldr	ip, [r8, #8]
   12728:	cmp	ip, #0
   1272c:	beq	12228 <__assert_fail@plt+0xec8>
   12730:	ldrd	r0, [r4, #96]	; 0x60
   12734:	ldrd	r2, [ip]
   12738:	cmp	r1, r3
   1273c:	cmpeq	r0, r2
   12740:	bne	12228 <__assert_fail@plt+0xec8>
   12744:	ldrd	r2, [r4]
   12748:	ldrd	r0, [ip, #8]
   1274c:	cmp	r3, r1
   12750:	cmpeq	r2, r0
   12754:	bne	12228 <__assert_fail@plt+0xec8>
   12758:	ldr	r1, [pc, #292]	; 12884 <__assert_fail@plt+0x1524>
   1275c:	ldr	r0, [sp, #12]
   12760:	bl	11048 <strcmp@plt>
   12764:	mov	r2, #5
   12768:	subs	r4, r0, #0
   1276c:	bne	121d8 <__assert_fail@plt+0xe78>
   12770:	ldr	r1, [pc, #272]	; 12888 <__assert_fail@plt+0x1528>
   12774:	bl	110d8 <dcgettext@plt>
   12778:	ldr	r1, [sp, #12]
   1277c:	mov	r6, r0
   12780:	mov	r0, #4
   12784:	bl	16b14 <__assert_fail@plt+0x57b4>
   12788:	mov	r2, r6
   1278c:	mov	r1, r5
   12790:	mov	r3, r0
   12794:	mov	r0, r4
   12798:	bl	11168 <error@plt>
   1279c:	mov	r2, #5
   127a0:	ldr	r1, [pc, #228]	; 1288c <__assert_fail@plt+0x152c>
   127a4:	mov	r0, r5
   127a8:	bl	110d8 <dcgettext@plt>
   127ac:	mov	r1, r5
   127b0:	mov	r2, r0
   127b4:	mov	r0, #0
   127b8:	bl	11168 <error@plt>
   127bc:	b	11f68 <__assert_fail@plt+0xc08>
   127c0:	cmp	r4, #0
   127c4:	streq	r5, [sp, #16]
   127c8:	moveq	r6, r5
   127cc:	beq	127e8 <__assert_fail@plt+0x1488>
   127d0:	ldr	r0, [r4, #24]
   127d4:	bl	11d28 <__assert_fail@plt+0x9c8>
   127d8:	str	r0, [sp, #16]
   127dc:	ldr	r0, [r4, #28]
   127e0:	bl	11cf0 <__assert_fail@plt+0x990>
   127e4:	mov	r6, r0
   127e8:	mov	r2, #5
   127ec:	ldr	r1, [pc, #232]	; 128dc <__assert_fail@plt+0x157c>
   127f0:	mov	r0, r5
   127f4:	bl	110d8 <dcgettext@plt>
   127f8:	ldr	r1, [sp, #12]
   127fc:	mov	r4, r0
   12800:	mov	r0, #4
   12804:	bl	16b14 <__assert_fail@plt+0x57b4>
   12808:	mov	r1, r4
   1280c:	mov	r2, r0
   12810:	mov	r0, #1
   12814:	bl	11228 <__printf_chk@plt>
   12818:	ldr	r0, [sp, #16]
   1281c:	bl	129e4 <__assert_fail@plt+0x1684>
   12820:	mov	r0, r6
   12824:	bl	129e4 <__assert_fail@plt+0x1684>
   12828:	ldrb	r3, [r8, #4]
   1282c:	cmp	r3, #0
   12830:	bne	11f6c <__assert_fail@plt+0xc0c>
   12834:	mov	r2, #4
   12838:	mov	r1, fp
   1283c:	ldr	r0, [sp, #20]
   12840:	bl	14628 <__assert_fail@plt+0x32c8>
   12844:	b	11f6c <__assert_fail@plt+0xc0c>
   12848:	ldr	r0, [r4, #24]
   1284c:	str	r3, [sp, #32]
   12850:	bl	11d28 <__assert_fail@plt+0x9c8>
   12854:	str	r0, [sp, #16]
   12858:	ldr	r0, [r4, #28]
   1285c:	bl	11cf0 <__assert_fail@plt+0x990>
   12860:	ldr	sl, [r8, #16]
   12864:	ldr	r4, [r8, #20]
   12868:	ldr	r3, [sp, #32]
   1286c:	mov	r6, r0
   12870:	b	123b0 <__assert_fail@plt+0x1050>
   12874:	mov	r3, #3
   12878:	b	12398 <__assert_fail@plt+0x1038>
   1287c:	andeq	r9, r1, r0, asr #8
   12880:	ldrdeq	r9, [r1], -r0
   12884:	andeq	r9, r1, r8, ror ip
   12888:	andeq	r9, r1, r0, asr r4
   1288c:			; <UNDEFINED> instruction: 0x000194b7
   12890:	andeq	r9, r1, sp, ror r4
   12894:	andeq	r9, r1, ip, asr #11
   12898:	andeq	r9, r1, r8, ror #9
   1289c:	andeq	r9, r1, r8, lsl #7
   128a0:	strdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   128a4:	andeq	r9, r1, r2, lsl r5
   128a8:	andeq	r9, r1, r2, ror #11
   128ac:	strdeq	r9, [r1], -fp
   128b0:	andeq	r9, r1, r8, asr #12
   128b4:	andeq	r9, r1, pc, ror #12
   128b8:	muleq	r1, r2, r6
   128bc:			; <UNDEFINED> instruction: 0x000196b0
   128c0:	andeq	r9, r1, r0, ror #13
   128c4:	andeq	r9, r1, ip, lsl #14
   128c8:	andeq	r9, r1, lr, lsr #14
   128cc:	andeq	r9, r1, r6, asr r7
   128d0:	andeq	r9, r1, sl, ror r7
   128d4:	muleq	r1, sl, r7
   128d8:			; <UNDEFINED> instruction: 0x000197b6
   128dc:	andeq	r9, r1, r0, lsl r6
   128e0:	ldr	r3, [pc, #4]	; 128ec <__assert_fail@plt+0x158c>
   128e4:	str	r0, [r3]
   128e8:	bx	lr
   128ec:			; <UNDEFINED> instruction: 0x0002a1b8
   128f0:	ldr	r3, [pc, #4]	; 128fc <__assert_fail@plt+0x159c>
   128f4:	strb	r0, [r3, #4]
   128f8:	bx	lr
   128fc:			; <UNDEFINED> instruction: 0x0002a1b8
   12900:	ldr	r3, [pc, #192]	; 129c8 <__assert_fail@plt+0x1668>
   12904:	push	{r0, r1, r4, r5, r6, lr}
   12908:	ldr	r0, [r3]
   1290c:	bl	17cc0 <__assert_fail@plt+0x6960>
   12910:	cmp	r0, #0
   12914:	beq	129ac <__assert_fail@plt+0x164c>
   12918:	ldr	r3, [pc, #172]	; 129cc <__assert_fail@plt+0x166c>
   1291c:	mov	r4, r3
   12920:	ldrb	r2, [r3, #4]
   12924:	cmp	r2, #0
   12928:	beq	1293c <__assert_fail@plt+0x15dc>
   1292c:	bl	11204 <__errno_location@plt>
   12930:	ldr	r3, [r0]
   12934:	cmp	r3, #32
   12938:	beq	129ac <__assert_fail@plt+0x164c>
   1293c:	mov	r2, #5
   12940:	ldr	r1, [pc, #136]	; 129d0 <__assert_fail@plt+0x1670>
   12944:	mov	r0, #0
   12948:	bl	110d8 <dcgettext@plt>
   1294c:	ldr	r4, [r4]
   12950:	cmp	r4, #0
   12954:	mov	r5, r0
   12958:	beq	12990 <__assert_fail@plt+0x1630>
   1295c:	bl	11204 <__errno_location@plt>
   12960:	ldr	r6, [r0]
   12964:	mov	r0, r4
   12968:	bl	16ba8 <__assert_fail@plt+0x5848>
   1296c:	str	r5, [sp]
   12970:	ldr	r2, [pc, #92]	; 129d4 <__assert_fail@plt+0x1674>
   12974:	mov	r1, r6
   12978:	mov	r3, r0
   1297c:	mov	r0, #0
   12980:	bl	11168 <error@plt>
   12984:	ldr	r3, [pc, #76]	; 129d8 <__assert_fail@plt+0x1678>
   12988:	ldr	r0, [r3]
   1298c:	bl	11090 <_exit@plt>
   12990:	bl	11204 <__errno_location@plt>
   12994:	mov	r3, r5
   12998:	ldr	r2, [pc, #60]	; 129dc <__assert_fail@plt+0x167c>
   1299c:	ldr	r1, [r0]
   129a0:	mov	r0, r4
   129a4:	bl	11168 <error@plt>
   129a8:	b	12984 <__assert_fail@plt+0x1624>
   129ac:	ldr	r3, [pc, #44]	; 129e0 <__assert_fail@plt+0x1680>
   129b0:	ldr	r0, [r3]
   129b4:	bl	17cc0 <__assert_fail@plt+0x6960>
   129b8:	cmp	r0, #0
   129bc:	bne	12984 <__assert_fail@plt+0x1624>
   129c0:	add	sp, sp, #8
   129c4:	pop	{r4, r5, r6, pc}
   129c8:	muleq	r2, r4, r1
   129cc:			; <UNDEFINED> instruction: 0x0002a1b8
   129d0:	strdeq	r9, [r1], -r0
   129d4:	strdeq	r9, [r1], -ip
   129d8:	andeq	sl, r2, ip, lsr r1
   129dc:	andeq	r9, r1, r8, lsl #7
   129e0:	muleq	r2, r0, r1
   129e4:	push	{r0, r1, r2, r4, r5, lr}
   129e8:	mov	r5, r0
   129ec:	bl	11204 <__errno_location@plt>
   129f0:	ldr	r3, [r0]
   129f4:	mov	r4, r0
   129f8:	str	r3, [sp]
   129fc:	str	r3, [sp, #4]
   12a00:	mov	r3, #0
   12a04:	str	r3, [r0]
   12a08:	mov	r0, r5
   12a0c:	bl	11078 <free@plt>
   12a10:	ldr	r3, [r4]
   12a14:	add	r2, sp, #8
   12a18:	cmp	r3, #0
   12a1c:	moveq	r3, #4
   12a20:	movne	r3, #0
   12a24:	add	r3, r2, r3
   12a28:	ldr	r3, [r3, #-8]
   12a2c:	str	r3, [r4]
   12a30:	add	sp, sp, #12
   12a34:	pop	{r4, r5, pc}
   12a38:	ldrd	r2, [r1, #8]
   12a3c:	push	{r4, r5, lr}
   12a40:	ldrd	r4, [r0, #8]
   12a44:	cmp	r5, r3
   12a48:	cmpeq	r4, r2
   12a4c:	bne	12a6c <__assert_fail@plt+0x170c>
   12a50:	ldrd	r4, [r0]
   12a54:	ldrd	r2, [r1]
   12a58:	cmp	r5, r3
   12a5c:	cmpeq	r4, r2
   12a60:	moveq	r0, #1
   12a64:	movne	r0, #0
   12a68:	pop	{r4, r5, pc}
   12a6c:	mov	r0, #0
   12a70:	pop	{r4, r5, pc}
   12a74:	push	{r4, lr}
   12a78:	mov	r2, r1
   12a7c:	mov	r3, #0
   12a80:	ldrd	r0, [r0, #8]
   12a84:	bl	18788 <__assert_fail@plt+0x7428>
   12a88:	mov	r0, r2
   12a8c:	pop	{r4, pc}
   12a90:	push	{r4, lr}
   12a94:	mov	r2, r1
   12a98:	mov	r3, #0
   12a9c:	ldrd	r0, [r0]
   12aa0:	bl	18788 <__assert_fail@plt+0x7428>
   12aa4:	mov	r0, r2
   12aa8:	pop	{r4, pc}
   12aac:	ldrd	r2, [r1]
   12ab0:	push	{r4, r5, lr}
   12ab4:	ldrd	r4, [r0]
   12ab8:	cmp	r5, r3
   12abc:	cmpeq	r4, r2
   12ac0:	moveq	r0, #1
   12ac4:	movne	r0, #0
   12ac8:	pop	{r4, r5, pc}
   12acc:	ldr	r3, [r0]
   12ad0:	push	{r4, r5, lr}
   12ad4:	ldrd	r4, [r3, #160]	; 0xa0
   12ad8:	ldr	r3, [r1]
   12adc:	ldrd	r2, [r3, #160]	; 0xa0
   12ae0:	cmp	r5, r3
   12ae4:	cmpeq	r4, r2
   12ae8:	movhi	r0, #1
   12aec:	movls	r0, #0
   12af0:	movcc	r3, #1
   12af4:	movcs	r3, #0
   12af8:	sub	r0, r0, r3
   12afc:	pop	{r4, r5, pc}
   12b00:	ldr	r3, [r1, #48]	; 0x30
   12b04:	push	{r4, r5, r6, lr}
   12b08:	cmp	r3, #0
   12b0c:	mov	r4, r1
   12b10:	add	r5, r1, #64	; 0x40
   12b14:	ldr	r3, [r0, #48]	; 0x30
   12b18:	bne	12b24 <__assert_fail@plt+0x17c4>
   12b1c:	tst	r3, #1
   12b20:	movne	r2, #1
   12b24:	lsl	r3, r3, #30
   12b28:	orrs	r3, r2, r3, lsr #31
   12b2c:	beq	12b98 <__assert_fail@plt+0x1838>
   12b30:	mov	r1, r5
   12b34:	ldr	r0, [r4, #24]
   12b38:	bl	18978 <__assert_fail@plt+0x7618>
   12b3c:	cmp	r0, #0
   12b40:	beq	12bc0 <__assert_fail@plt+0x1860>
   12b44:	bl	11204 <__errno_location@plt>
   12b48:	ldr	r3, [r0]
   12b4c:	mov	r6, r0
   12b50:	cmp	r3, #2
   12b54:	bne	12b78 <__assert_fail@plt+0x1818>
   12b58:	mov	r1, r5
   12b5c:	ldr	r0, [r4, #24]
   12b60:	bl	18998 <__assert_fail@plt+0x7638>
   12b64:	cmp	r0, #0
   12b68:	bne	12b78 <__assert_fail@plt+0x1818>
   12b6c:	str	r0, [r6]
   12b70:	mov	r0, #13
   12b74:	pop	{r4, r5, r6, pc}
   12b78:	ldr	r3, [r6]
   12b7c:	str	r3, [r4, #32]
   12b80:	mov	r2, #104	; 0x68
   12b84:	mov	r1, #0
   12b88:	mov	r0, r5
   12b8c:	bl	1121c <memset@plt>
   12b90:	mov	r0, #10
   12b94:	pop	{r4, r5, r6, pc}
   12b98:	mov	r3, #256	; 0x100
   12b9c:	mov	r2, r5
   12ba0:	ldr	r1, [r4, #24]
   12ba4:	ldr	r0, [r0, #32]
   12ba8:	bl	189a8 <__assert_fail@plt+0x7648>
   12bac:	cmp	r0, #0
   12bb0:	beq	12bc0 <__assert_fail@plt+0x1860>
   12bb4:	bl	11204 <__errno_location@plt>
   12bb8:	ldr	r3, [r0]
   12bbc:	b	12b7c <__assert_fail@plt+0x181c>
   12bc0:	ldr	r0, [r4, #80]	; 0x50
   12bc4:	and	r0, r0, #61440	; 0xf000
   12bc8:	cmp	r0, #16384	; 0x4000
   12bcc:	bne	12c10 <__assert_fail@plt+0x18b0>
   12bd0:	ldrb	r3, [r4, #168]	; 0xa8
   12bd4:	cmp	r3, #46	; 0x2e
   12bd8:	bne	12c28 <__assert_fail@plt+0x18c8>
   12bdc:	ldrb	r3, [r4, #169]	; 0xa9
   12be0:	cmp	r3, #0
   12be4:	beq	12bfc <__assert_fail@plt+0x189c>
   12be8:	ldr	r3, [r4, #168]	; 0xa8
   12bec:	bic	r3, r3, #-16777216	; 0xff000000
   12bf0:	bic	r3, r3, #255	; 0xff
   12bf4:	cmp	r3, #11776	; 0x2e00
   12bf8:	bne	12c28 <__assert_fail@plt+0x18c8>
   12bfc:	ldr	r0, [r4, #48]	; 0x30
   12c00:	cmp	r0, #0
   12c04:	moveq	r0, #1
   12c08:	movne	r0, #5
   12c0c:	pop	{r4, r5, r6, pc}
   12c10:	cmp	r0, #40960	; 0xa000
   12c14:	beq	12c30 <__assert_fail@plt+0x18d0>
   12c18:	cmp	r0, #32768	; 0x8000
   12c1c:	moveq	r0, #8
   12c20:	movne	r0, #3
   12c24:	pop	{r4, r5, r6, pc}
   12c28:	mov	r0, #1
   12c2c:	pop	{r4, r5, r6, pc}
   12c30:	mov	r0, #12
   12c34:	pop	{r4, r5, r6, pc}
   12c38:	ldr	r3, [r0, #40]	; 0x28
   12c3c:	push	{r4, r5, r6, r7, r8, lr}
   12c40:	cmp	r3, r2
   12c44:	mov	r4, r0
   12c48:	mov	r6, r1
   12c4c:	mov	r5, r2
   12c50:	ldr	r7, [r0, #44]	; 0x2c
   12c54:	bcs	12c9c <__assert_fail@plt+0x193c>
   12c58:	add	r1, r2, #40	; 0x28
   12c5c:	cmn	r1, #-1073741823	; 0xc0000001
   12c60:	str	r1, [r0, #40]	; 0x28
   12c64:	bls	12c84 <__assert_fail@plt+0x1924>
   12c68:	ldr	r0, [r4, #8]
   12c6c:	bl	129e4 <__assert_fail@plt+0x1684>
   12c70:	mov	r3, #0
   12c74:	str	r3, [r4, #8]
   12c78:	str	r3, [r4, #40]	; 0x28
   12c7c:	mov	r0, r6
   12c80:	pop	{r4, r5, r6, r7, r8, pc}
   12c84:	lsl	r1, r1, #2
   12c88:	ldr	r0, [r0, #8]
   12c8c:	bl	17c64 <__assert_fail@plt+0x6904>
   12c90:	cmp	r0, #0
   12c94:	beq	12c68 <__assert_fail@plt+0x1908>
   12c98:	str	r0, [r4, #8]
   12c9c:	ldr	r0, [r4, #8]
   12ca0:	mov	r2, r0
   12ca4:	cmp	r6, #0
   12ca8:	bne	12ce4 <__assert_fail@plt+0x1984>
   12cac:	mov	r3, r7
   12cb0:	mov	r2, #4
   12cb4:	mov	r1, r5
   12cb8:	bl	112d0 <qsort@plt>
   12cbc:	ldr	r2, [r4, #8]
   12cc0:	mov	r3, r5
   12cc4:	mov	r1, r2
   12cc8:	ldr	r6, [r2]
   12ccc:	subs	r3, r3, #1
   12cd0:	bne	12cf0 <__assert_fail@plt+0x1990>
   12cd4:	sub	r5, r5, #-1073741823	; 0xc0000001
   12cd8:	ldr	r2, [r2, r5, lsl #2]
   12cdc:	str	r3, [r2, #8]
   12ce0:	b	12c7c <__assert_fail@plt+0x191c>
   12ce4:	str	r6, [r2], #4
   12ce8:	ldr	r6, [r6, #8]
   12cec:	b	12ca4 <__assert_fail@plt+0x1944>
   12cf0:	ldr	r0, [r1]
   12cf4:	ldr	ip, [r1, #4]!
   12cf8:	str	ip, [r0, #8]
   12cfc:	b	12ccc <__assert_fail@plt+0x196c>
   12d00:	push	{r4, r5, r6, r7, r8, lr}
   12d04:	mov	r6, r0
   12d08:	add	r0, r2, #176	; 0xb0
   12d0c:	bic	r0, r0, #7
   12d10:	mov	r7, r1
   12d14:	mov	r5, r2
   12d18:	bl	17c24 <__assert_fail@plt+0x68c4>
   12d1c:	subs	r4, r0, #0
   12d20:	beq	12d6c <__assert_fail@plt+0x1a0c>
   12d24:	mov	r2, r5
   12d28:	mov	r1, r7
   12d2c:	add	r0, r4, #168	; 0xa8
   12d30:	bl	1109c <memcpy@plt>
   12d34:	add	r2, r4, r5
   12d38:	mov	r3, #0
   12d3c:	strb	r3, [r2, #168]	; 0xa8
   12d40:	ldr	r2, [r6, #24]
   12d44:	str	r5, [r4, #52]	; 0x34
   12d48:	str	r2, [r4, #28]
   12d4c:	mov	r2, #3
   12d50:	str	r6, [r4, #44]	; 0x2c
   12d54:	str	r3, [r4, #32]
   12d58:	str	r3, [r4, #12]
   12d5c:	strh	r3, [r4, #58]	; 0x3a
   12d60:	strh	r2, [r4, #60]	; 0x3c
   12d64:	str	r3, [r4, #16]
   12d68:	str	r3, [r4, #20]
   12d6c:	mov	r0, r4
   12d70:	pop	{r4, r5, r6, r7, r8, pc}
   12d74:	ldr	ip, [r0, #48]	; 0x30
   12d78:	push	{lr}		; (str lr, [sp, #-4]!)
   12d7c:	tst	ip, #16
   12d80:	ldr	lr, [pc, #40]	; 12db0 <__assert_fail@plt+0x1a50>
   12d84:	ldr	r2, [pc, #40]	; 12db4 <__assert_fail@plt+0x1a54>
   12d88:	moveq	r2, lr
   12d8c:	tst	ip, #512	; 0x200
   12d90:	beq	12da0 <__assert_fail@plt+0x1a40>
   12d94:	ldr	r0, [r0, #32]
   12d98:	pop	{lr}		; (ldr lr, [sp], #4)
   12d9c:	b	15644 <__assert_fail@plt+0x42e4>
   12da0:	mov	r0, r1
   12da4:	pop	{lr}		; (ldr lr, [sp], #4)
   12da8:	mov	r1, r2
   12dac:	b	18068 <__assert_fail@plt+0x6d08>
   12db0:	andeq	r4, r8, r0, lsl #18
   12db4:	andeq	ip, r8, r0, lsl #18
   12db8:	push	{r4, r5, r6, lr}
   12dbc:	mov	r4, r0
   12dc0:	cmp	r4, #0
   12dc4:	bne	12dcc <__assert_fail@plt+0x1a6c>
   12dc8:	pop	{r4, r5, r6, pc}
   12dcc:	ldr	r0, [r4, #12]
   12dd0:	ldr	r5, [r4, #8]
   12dd4:	cmp	r0, #0
   12dd8:	beq	12de0 <__assert_fail@plt+0x1a80>
   12ddc:	bl	1133c <closedir@plt>
   12de0:	mov	r0, r4
   12de4:	bl	129e4 <__assert_fail@plt+0x1684>
   12de8:	mov	r4, r5
   12dec:	b	12dc0 <__assert_fail@plt+0x1a60>
   12df0:	ldr	r2, [r0, #48]	; 0x30
   12df4:	ldr	r3, [pc, #28]	; 12e18 <__assert_fail@plt+0x1ab8>
   12df8:	ldr	r0, [r0, #56]	; 0x38
   12dfc:	and	r3, r3, r2
   12e00:	cmp	r3, #0
   12e04:	beq	12e14 <__assert_fail@plt+0x1ab4>
   12e08:	cmp	r0, #0
   12e0c:	bxeq	lr
   12e10:	b	15088 <__assert_fail@plt+0x3d28>
   12e14:	b	129e4 <__assert_fail@plt+0x1684>
   12e18:	andeq	r0, r0, r2, lsl #2
   12e1c:	push	{r4, lr}
   12e20:	mov	r4, r0
   12e24:	mov	r0, r4
   12e28:	bl	15548 <__assert_fail@plt+0x41e8>
   12e2c:	cmp	r0, #0
   12e30:	beq	12e38 <__assert_fail@plt+0x1ad8>
   12e34:	pop	{r4, pc}
   12e38:	mov	r0, r4
   12e3c:	bl	15594 <__assert_fail@plt+0x4234>
   12e40:	cmp	r0, #0
   12e44:	blt	12e24 <__assert_fail@plt+0x1ac4>
   12e48:	bl	11324 <close@plt>
   12e4c:	b	12e24 <__assert_fail@plt+0x1ac4>
   12e50:	push	{r4, r5, r6, r7, lr}
   12e54:	sub	sp, sp, #100	; 0x64
   12e58:	ldr	r5, [r0, #44]	; 0x2c
   12e5c:	ldr	r3, [r5, #48]	; 0x30
   12e60:	tst	r3, #512	; 0x200
   12e64:	bne	12e74 <__assert_fail@plt+0x1b14>
   12e68:	mov	r0, #0
   12e6c:	add	sp, sp, #100	; 0x64
   12e70:	pop	{r4, r5, r6, r7, pc}
   12e74:	ldr	r4, [r5, #52]	; 0x34
   12e78:	mov	r7, r1
   12e7c:	cmp	r4, #0
   12e80:	mov	r6, r0
   12e84:	bne	12eb4 <__assert_fail@plt+0x1b54>
   12e88:	ldr	r3, [pc, #184]	; 12f48 <__assert_fail@plt+0x1be8>
   12e8c:	mov	r1, r4
   12e90:	str	r3, [sp]
   12e94:	ldr	r2, [pc, #176]	; 12f4c <__assert_fail@plt+0x1bec>
   12e98:	ldr	r3, [pc, #176]	; 12f50 <__assert_fail@plt+0x1bf0>
   12e9c:	mov	r0, #13
   12ea0:	bl	14f1c <__assert_fail@plt+0x3bbc>
   12ea4:	cmp	r0, #0
   12ea8:	mov	r4, r0
   12eac:	str	r0, [r5, #52]	; 0x34
   12eb0:	beq	12ed4 <__assert_fail@plt+0x1b74>
   12eb4:	ldrd	r2, [r6, #64]	; 0x40
   12eb8:	add	r1, sp, #96	; 0x60
   12ebc:	mov	r0, r4
   12ec0:	strd	r2, [r1, #-88]!	; 0xffffffa8
   12ec4:	bl	14cf8 <__assert_fail@plt+0x3998>
   12ec8:	cmp	r0, #0
   12ecc:	ldrne	r0, [r0, #8]
   12ed0:	bne	12e6c <__assert_fail@plt+0x1b0c>
   12ed4:	cmp	r7, #0
   12ed8:	blt	12e68 <__assert_fail@plt+0x1b08>
   12edc:	add	r1, sp, #8
   12ee0:	mov	r0, r7
   12ee4:	bl	1100c <fstatfs64@plt>
   12ee8:	cmp	r0, #0
   12eec:	bne	12e68 <__assert_fail@plt+0x1b08>
   12ef0:	cmp	r4, #0
   12ef4:	beq	12f40 <__assert_fail@plt+0x1be0>
   12ef8:	mov	r0, #16
   12efc:	bl	17c24 <__assert_fail@plt+0x68c4>
   12f00:	subs	r5, r0, #0
   12f04:	beq	12f40 <__assert_fail@plt+0x1be0>
   12f08:	ldrd	r2, [r6, #64]	; 0x40
   12f0c:	mov	r1, r5
   12f10:	mov	r0, r4
   12f14:	strd	r2, [r5]
   12f18:	ldr	r3, [sp, #8]
   12f1c:	str	r3, [r5, #8]
   12f20:	bl	153f0 <__assert_fail@plt+0x4090>
   12f24:	cmp	r0, #0
   12f28:	beq	12f38 <__assert_fail@plt+0x1bd8>
   12f2c:	cmp	r5, r0
   12f30:	beq	12f40 <__assert_fail@plt+0x1be0>
   12f34:	bl	11318 <abort@plt>
   12f38:	mov	r0, r5
   12f3c:	bl	129e4 <__assert_fail@plt+0x1684>
   12f40:	ldr	r0, [sp, #8]
   12f44:	b	12e6c <__assert_fail@plt+0x1b0c>
   12f48:	andeq	r2, r1, r4, ror #19
   12f4c:	muleq	r1, r0, sl
   12f50:	andeq	r2, r1, ip, lsr #21
   12f54:	push	{r4, r5, r6, lr}
   12f58:	mov	r5, r1
   12f5c:	ldr	r1, [r0, #32]
   12f60:	cmn	r1, #100	; 0x64
   12f64:	sub	r3, r1, r5
   12f68:	clz	r3, r3
   12f6c:	lsr	r3, r3, #5
   12f70:	moveq	r3, #0
   12f74:	cmp	r3, #0
   12f78:	beq	12f80 <__assert_fail@plt+0x1c20>
   12f7c:	bl	11318 <abort@plt>
   12f80:	cmp	r2, #0
   12f84:	mov	r4, r0
   12f88:	beq	12fa8 <__assert_fail@plt+0x1c48>
   12f8c:	add	r0, r0, #60	; 0x3c
   12f90:	bl	15550 <__assert_fail@plt+0x41f0>
   12f94:	cmp	r0, #0
   12f98:	blt	12fa0 <__assert_fail@plt+0x1c40>
   12f9c:	bl	11324 <close@plt>
   12fa0:	str	r5, [r4, #32]
   12fa4:	pop	{r4, r5, r6, pc}
   12fa8:	ldr	r3, [r0, #48]	; 0x30
   12fac:	lsr	r3, r3, #2
   12fb0:	eor	r3, r3, #1
   12fb4:	cmp	r1, #0
   12fb8:	movlt	r3, #0
   12fbc:	andge	r3, r3, #1
   12fc0:	cmp	r3, #0
   12fc4:	beq	12fa0 <__assert_fail@plt+0x1c40>
   12fc8:	mov	r0, r1
   12fcc:	b	12f9c <__assert_fail@plt+0x1c3c>
   12fd0:	ldr	r3, [r0, #48]	; 0x30
   12fd4:	push	{r4, r5, r6, lr}
   12fd8:	ands	r4, r3, #4
   12fdc:	mov	r5, r0
   12fe0:	movne	r4, #0
   12fe4:	bne	12ffc <__assert_fail@plt+0x1c9c>
   12fe8:	tst	r3, #512	; 0x200
   12fec:	beq	1300c <__assert_fail@plt+0x1cac>
   12ff0:	mov	r2, #1
   12ff4:	mvn	r1, #99	; 0x63
   12ff8:	bl	12f54 <__assert_fail@plt+0x1bf4>
   12ffc:	add	r0, r5, #60	; 0x3c
   13000:	bl	12e1c <__assert_fail@plt+0x1abc>
   13004:	mov	r0, r4
   13008:	pop	{r4, r5, r6, pc}
   1300c:	ldr	r0, [r0, #28]
   13010:	bl	112c4 <fchdir@plt>
   13014:	adds	r4, r0, #0
   13018:	movne	r4, #1
   1301c:	b	12ffc <__assert_fail@plt+0x1c9c>
   13020:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13024:	subs	sl, r3, #0
   13028:	sub	sp, sp, #104	; 0x68
   1302c:	mov	r7, r0
   13030:	mov	r8, r1
   13034:	mov	r6, r2
   13038:	moveq	r9, sl
   1303c:	beq	13054 <__assert_fail@plt+0x1cf4>
   13040:	ldr	r1, [pc, #368]	; 131b8 <__assert_fail@plt+0x1e58>
   13044:	mov	r0, sl
   13048:	bl	11048 <strcmp@plt>
   1304c:	clz	r9, r0
   13050:	lsr	r9, r9, #5
   13054:	ldr	r3, [r7, #48]	; 0x30
   13058:	ands	r4, r3, #4
   1305c:	beq	13088 <__assert_fail@plt+0x1d28>
   13060:	mvn	r4, r6
   13064:	lsr	r4, r4, #31
   13068:	ands	r4, r4, r3, lsr #9
   1306c:	beq	1307c <__assert_fail@plt+0x1d1c>
   13070:	mov	r0, r6
   13074:	bl	11324 <close@plt>
   13078:	mov	r4, #0
   1307c:	mov	r0, r4
   13080:	add	sp, sp, #104	; 0x68
   13084:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13088:	ands	r2, r9, r6, lsr #31
   1308c:	beq	13178 <__assert_fail@plt+0x1e18>
   13090:	tst	r3, #512	; 0x200
   13094:	bne	130b4 <__assert_fail@plt+0x1d54>
   13098:	mov	r1, sl
   1309c:	mov	r0, r7
   130a0:	bl	12d74 <__assert_fail@plt+0x1a14>
   130a4:	subs	r5, r0, #0
   130a8:	bge	130e0 <__assert_fail@plt+0x1d80>
   130ac:	mvn	r4, #0
   130b0:	b	1307c <__assert_fail@plt+0x1d1c>
   130b4:	add	r5, r7, #60	; 0x3c
   130b8:	mov	r0, r5
   130bc:	bl	15548 <__assert_fail@plt+0x41e8>
   130c0:	cmp	r0, #0
   130c4:	bne	13098 <__assert_fail@plt+0x1d38>
   130c8:	mov	r0, r5
   130cc:	bl	15594 <__assert_fail@plt+0x4234>
   130d0:	subs	r5, r0, #0
   130d4:	movge	r6, r5
   130d8:	movge	sl, r4
   130dc:	blt	13098 <__assert_fail@plt+0x1d38>
   130e0:	ldr	r3, [r7, #48]	; 0x30
   130e4:	tst	r3, #2
   130e8:	bne	13108 <__assert_fail@plt+0x1da8>
   130ec:	cmp	sl, #0
   130f0:	beq	13188 <__assert_fail@plt+0x1e28>
   130f4:	ldr	r1, [pc, #188]	; 131b8 <__assert_fail@plt+0x1e58>
   130f8:	mov	r0, sl
   130fc:	bl	11048 <strcmp@plt>
   13100:	cmp	r0, #0
   13104:	bne	13188 <__assert_fail@plt+0x1e28>
   13108:	mov	r1, sp
   1310c:	mov	r0, r5
   13110:	bl	18988 <__assert_fail@plt+0x7628>
   13114:	cmp	r0, #0
   13118:	bne	13150 <__assert_fail@plt+0x1df0>
   1311c:	ldrd	r0, [r8, #64]	; 0x40
   13120:	ldrd	r2, [sp]
   13124:	cmp	r1, r3
   13128:	cmpeq	r0, r2
   1312c:	bne	13144 <__assert_fail@plt+0x1de4>
   13130:	ldrd	r0, [r8, #160]	; 0xa0
   13134:	ldrd	r2, [sp, #96]	; 0x60
   13138:	cmp	r1, r3
   1313c:	cmpeq	r0, r2
   13140:	beq	13188 <__assert_fail@plt+0x1e28>
   13144:	bl	11204 <__errno_location@plt>
   13148:	mov	r3, #2
   1314c:	str	r3, [r0]
   13150:	mvn	r4, #0
   13154:	cmp	r6, #0
   13158:	bge	1307c <__assert_fail@plt+0x1d1c>
   1315c:	bl	11204 <__errno_location@plt>
   13160:	ldr	r7, [r0]
   13164:	mov	r6, r0
   13168:	mov	r0, r5
   1316c:	bl	11324 <close@plt>
   13170:	str	r7, [r6]
   13174:	b	1307c <__assert_fail@plt+0x1d1c>
   13178:	cmp	r6, #0
   1317c:	movge	r5, r6
   13180:	bge	130e0 <__assert_fail@plt+0x1d80>
   13184:	b	13098 <__assert_fail@plt+0x1d38>
   13188:	ldr	r3, [r7, #48]	; 0x30
   1318c:	tst	r3, #512	; 0x200
   13190:	beq	131a8 <__assert_fail@plt+0x1e48>
   13194:	eor	r2, r9, #1
   13198:	mov	r1, r5
   1319c:	mov	r0, r7
   131a0:	bl	12f54 <__assert_fail@plt+0x1bf4>
   131a4:	b	1307c <__assert_fail@plt+0x1d1c>
   131a8:	mov	r0, r5
   131ac:	bl	112c4 <fchdir@plt>
   131b0:	mov	r4, r0
   131b4:	b	13154 <__assert_fail@plt+0x1df4>
   131b8:	andeq	r9, r1, ip, lsl r8
   131bc:	ldr	r2, [r0, #48]	; 0x30
   131c0:	ldr	r3, [pc, #164]	; 1326c <__assert_fail@plt+0x1f0c>
   131c4:	push	{r4, r5, r6, r7, lr}
   131c8:	and	r3, r3, r2
   131cc:	cmp	r3, #0
   131d0:	sub	sp, sp, #28
   131d4:	beq	1320c <__assert_fail@plt+0x1eac>
   131d8:	ldrd	r4, [r1, #64]	; 0x40
   131dc:	ldrd	r2, [r1, #160]	; 0xa0
   131e0:	ldr	r0, [r0, #56]	; 0x38
   131e4:	mov	r1, sp
   131e8:	strd	r4, [sp]
   131ec:	strd	r2, [sp, #8]
   131f0:	bl	15420 <__assert_fail@plt+0x40c0>
   131f4:	cmp	r0, #0
   131f8:	bne	13200 <__assert_fail@plt+0x1ea0>
   131fc:	bl	11318 <abort@plt>
   13200:	bl	129e4 <__assert_fail@plt+0x1684>
   13204:	add	sp, sp, #28
   13208:	pop	{r4, r5, r6, r7, pc}
   1320c:	ldr	ip, [r1, #4]
   13210:	cmp	ip, #0
   13214:	beq	13204 <__assert_fail@plt+0x1ea4>
   13218:	ldr	r3, [ip, #48]	; 0x30
   1321c:	cmp	r3, #0
   13220:	blt	13204 <__assert_fail@plt+0x1ea4>
   13224:	ldr	r3, [r0, #56]	; 0x38
   13228:	ldrd	r4, [r3, #16]
   1322c:	orrs	r2, r4, r5
   13230:	beq	131fc <__assert_fail@plt+0x1e9c>
   13234:	ldrd	r4, [r3]
   13238:	ldrd	r6, [r1, #160]	; 0xa0
   1323c:	cmp	r5, r7
   13240:	cmpeq	r4, r6
   13244:	bne	13204 <__assert_fail@plt+0x1ea4>
   13248:	ldrd	r6, [r3, #8]
   1324c:	ldrd	r4, [r1, #64]	; 0x40
   13250:	cmp	r7, r5
   13254:	cmpeq	r6, r4
   13258:	ldrdeq	r0, [ip, #64]	; 0x40
   1325c:	strdeq	r0, [r3, #8]
   13260:	ldrdeq	r0, [ip, #160]	; 0xa0
   13264:	strdeq	r0, [r3]
   13268:	b	13204 <__assert_fail@plt+0x1ea4>
   1326c:	andeq	r0, r0, r2, lsl #2
   13270:	ldr	r3, [r0, #36]	; 0x24
   13274:	add	r1, r1, #256	; 0x100
   13278:	adds	r1, r1, r3
   1327c:	push	{r4, r5, r6, lr}
   13280:	mov	r5, r0
   13284:	bcc	132ac <__assert_fail@plt+0x1f4c>
   13288:	ldr	r0, [r0, #24]
   1328c:	mov	r4, #0
   13290:	bl	129e4 <__assert_fail@plt+0x1684>
   13294:	str	r4, [r5, #24]
   13298:	bl	11204 <__errno_location@plt>
   1329c:	mov	r3, #36	; 0x24
   132a0:	str	r3, [r0]
   132a4:	mov	r0, r4
   132a8:	pop	{r4, r5, r6, pc}
   132ac:	str	r1, [r0, #36]	; 0x24
   132b0:	ldr	r0, [r0, #24]
   132b4:	bl	17c64 <__assert_fail@plt+0x6904>
   132b8:	subs	r4, r0, #0
   132bc:	bne	132d0 <__assert_fail@plt+0x1f70>
   132c0:	ldr	r0, [r5, #24]
   132c4:	bl	129e4 <__assert_fail@plt+0x1684>
   132c8:	str	r4, [r5, #24]
   132cc:	b	132a4 <__assert_fail@plt+0x1f44>
   132d0:	str	r4, [r5, #24]
   132d4:	mov	r0, #1
   132d8:	pop	{r4, r5, r6, pc}
   132dc:	ldr	r2, [r0, #48]	; 0x30
   132e0:	ldr	r3, [pc, #96]	; 13348 <__assert_fail@plt+0x1fe8>
   132e4:	push	{r0, r1, r4, lr}
   132e8:	and	r3, r3, r2
   132ec:	cmp	r3, #0
   132f0:	mov	r4, r0
   132f4:	beq	13328 <__assert_fail@plt+0x1fc8>
   132f8:	ldr	r3, [pc, #76]	; 1334c <__assert_fail@plt+0x1fec>
   132fc:	ldr	r2, [pc, #76]	; 13350 <__assert_fail@plt+0x1ff0>
   13300:	str	r3, [sp]
   13304:	mov	r1, #0
   13308:	ldr	r3, [pc, #68]	; 13354 <__assert_fail@plt+0x1ff4>
   1330c:	mov	r0, #31
   13310:	bl	14f1c <__assert_fail@plt+0x3bbc>
   13314:	str	r0, [r4, #56]	; 0x38
   13318:	adds	r0, r0, #0
   1331c:	movne	r0, #1
   13320:	add	sp, sp, #8
   13324:	pop	{r4, pc}
   13328:	mov	r0, #32
   1332c:	bl	17c24 <__assert_fail@plt+0x68c4>
   13330:	cmp	r0, #0
   13334:	str	r0, [r4, #56]	; 0x38
   13338:	beq	13320 <__assert_fail@plt+0x1fc0>
   1333c:	bl	17d30 <__assert_fail@plt+0x69d0>
   13340:	mov	r0, #1
   13344:	b	13320 <__assert_fail@plt+0x1fc0>
   13348:	andeq	r0, r0, r2, lsl #2
   1334c:	andeq	r2, r1, r4, ror #19
   13350:	andeq	r2, r1, r4, ror sl
   13354:	andeq	r2, r1, r8, lsr sl
   13358:	ldr	r2, [r0, #48]	; 0x30
   1335c:	ldr	r3, [pc, #168]	; 1340c <__assert_fail@plt+0x20ac>
   13360:	push	{r4, r5, r6, lr}
   13364:	and	r3, r3, r2
   13368:	cmp	r3, #0
   1336c:	mov	r6, r0
   13370:	mov	r4, r1
   13374:	beq	133e8 <__assert_fail@plt+0x2088>
   13378:	mov	r0, #24
   1337c:	bl	17c24 <__assert_fail@plt+0x68c4>
   13380:	subs	r5, r0, #0
   13384:	bne	13390 <__assert_fail@plt+0x2030>
   13388:	mov	r0, #0
   1338c:	pop	{r4, r5, r6, pc}
   13390:	ldrd	r2, [r4, #64]	; 0x40
   13394:	ldr	r0, [r6, #56]	; 0x38
   13398:	str	r4, [r5, #16]
   1339c:	strd	r2, [r5]
   133a0:	ldrd	r2, [r4, #160]	; 0xa0
   133a4:	mov	r1, r5
   133a8:	strd	r2, [r5, #8]
   133ac:	bl	153f0 <__assert_fail@plt+0x4090>
   133b0:	cmp	r5, r0
   133b4:	mov	r6, r0
   133b8:	bne	133c4 <__assert_fail@plt+0x2064>
   133bc:	mov	r0, #1
   133c0:	pop	{r4, r5, r6, pc}
   133c4:	mov	r0, r5
   133c8:	bl	129e4 <__assert_fail@plt+0x1684>
   133cc:	cmp	r6, #0
   133d0:	beq	13388 <__assert_fail@plt+0x2028>
   133d4:	ldr	r3, [r6, #16]
   133d8:	str	r3, [r4]
   133dc:	mov	r3, #2
   133e0:	strh	r3, [r4, #56]	; 0x38
   133e4:	b	133bc <__assert_fail@plt+0x205c>
   133e8:	add	r1, r1, #64	; 0x40
   133ec:	ldr	r0, [r0, #56]	; 0x38
   133f0:	bl	17d4c <__assert_fail@plt+0x69ec>
   133f4:	cmp	r0, #0
   133f8:	beq	133bc <__assert_fail@plt+0x205c>
   133fc:	mov	r3, #2
   13400:	str	r4, [r4]
   13404:	strh	r3, [r4, #56]	; 0x38
   13408:	pop	{r4, r5, r6, pc}
   1340c:	andeq	r0, r0, r2, lsl #2
   13410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13414:	sub	sp, sp, #60	; 0x3c
   13418:	ldr	r5, [r0]
   1341c:	mov	r4, r0
   13420:	str	r1, [sp, #8]
   13424:	ldr	r3, [r5, #12]
   13428:	cmp	r3, #0
   1342c:	str	r3, [sp, #4]
   13430:	beq	13484 <__assert_fail@plt+0x2124>
   13434:	mov	r0, r3
   13438:	bl	112b8 <dirfd@plt>
   1343c:	cmp	r0, #0
   13440:	str	r0, [sp, #52]	; 0x34
   13444:	bge	134f8 <__assert_fail@plt+0x2198>
   13448:	ldr	r0, [r5, #12]
   1344c:	mov	r6, #0
   13450:	bl	1133c <closedir@plt>
   13454:	str	r6, [r5, #12]
   13458:	ldr	r3, [sp, #8]
   1345c:	cmp	r3, #3
   13460:	bne	13624 <__assert_fail@plt+0x22c4>
   13464:	mov	r3, #4
   13468:	strh	r3, [r5, #56]	; 0x38
   1346c:	bl	11204 <__errno_location@plt>
   13470:	ldr	r3, [r0]
   13474:	str	r3, [r5, #32]
   13478:	mov	r0, r6
   1347c:	add	sp, sp, #60	; 0x3c
   13480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13484:	ldr	r3, [r0, #48]	; 0x30
   13488:	ldr	r1, [r5, #24]
   1348c:	and	r2, r3, #516	; 0x204
   13490:	cmp	r2, #512	; 0x200
   13494:	mvnne	r0, #99	; 0x63
   13498:	ldreq	r0, [r0, #32]
   1349c:	ands	r2, r3, #16
   134a0:	beq	134c0 <__assert_fail@plt+0x2160>
   134a4:	tst	r3, #1
   134a8:	moveq	r2, #32768	; 0x8000
   134ac:	beq	134c0 <__assert_fail@plt+0x2160>
   134b0:	ldr	r2, [r5, #48]	; 0x30
   134b4:	cmp	r2, #0
   134b8:	movne	r2, #32768	; 0x8000
   134bc:	moveq	r2, #0
   134c0:	add	r3, sp, #52	; 0x34
   134c4:	bl	15678 <__assert_fail@plt+0x4318>
   134c8:	cmp	r0, #0
   134cc:	mov	r6, r0
   134d0:	str	r0, [r5, #12]
   134d4:	beq	13458 <__assert_fail@plt+0x20f8>
   134d8:	ldrh	r3, [r5, #56]	; 0x38
   134dc:	cmp	r3, #11
   134e0:	bne	1362c <__assert_fail@plt+0x22cc>
   134e4:	mov	r2, #0
   134e8:	mov	r1, r5
   134ec:	mov	r0, r4
   134f0:	bl	12b00 <__assert_fail@plt+0x17a0>
   134f4:	strh	r0, [r5, #56]	; 0x38
   134f8:	ldr	r3, [r4, #44]	; 0x2c
   134fc:	cmp	r3, #0
   13500:	ldr	r3, [pc, #1824]	; 13c28 <__assert_fail@plt+0x28c8>
   13504:	mvnne	r3, #0
   13508:	str	r3, [sp, #36]	; 0x24
   1350c:	ldr	r3, [sp, #4]
   13510:	cmp	r3, #0
   13514:	beq	13678 <__assert_fail@plt+0x2318>
   13518:	mov	r3, #1
   1351c:	str	r3, [sp, #20]
   13520:	ldr	fp, [r5, #40]	; 0x28
   13524:	ldr	r2, [r5, #28]
   13528:	sub	r3, fp, #1
   1352c:	mov	r9, #0
   13530:	ldrb	r2, [r2, r3]
   13534:	mov	r8, r9
   13538:	mov	r6, r9
   1353c:	cmp	r2, #47	; 0x2f
   13540:	moveq	fp, r3
   13544:	ldr	r3, [r4, #48]	; 0x30
   13548:	str	r9, [sp, #24]
   1354c:	ands	r3, r3, #4
   13550:	streq	r3, [sp]
   13554:	ldrne	r3, [r4, #24]
   13558:	str	r9, [sp, #32]
   1355c:	addne	r2, r3, fp
   13560:	addne	r2, r2, #1
   13564:	strne	r2, [sp]
   13568:	movne	r2, #47	; 0x2f
   1356c:	strbne	r2, [r3, fp]
   13570:	add	r3, fp, #1
   13574:	str	r3, [sp, #16]
   13578:	ldr	r3, [r4, #36]	; 0x24
   1357c:	add	r2, fp, #1
   13580:	sub	r3, r3, r2
   13584:	str	r3, [sp, #28]
   13588:	ldr	r3, [r5, #48]	; 0x30
   1358c:	add	r3, r3, #1
   13590:	str	r3, [sp, #40]	; 0x28
   13594:	ldr	r7, [r5, #12]
   13598:	cmp	r7, #0
   1359c:	bne	137bc <__assert_fail@plt+0x245c>
   135a0:	ldr	r3, [sp, #24]
   135a4:	cmp	r3, #0
   135a8:	bne	13ae8 <__assert_fail@plt+0x2788>
   135ac:	ldr	r3, [r4, #48]	; 0x30
   135b0:	tst	r3, #4
   135b4:	bne	13b64 <__assert_fail@plt+0x2804>
   135b8:	ldr	r3, [sp, #20]
   135bc:	ldr	r2, [sp, #4]
   135c0:	cmp	r2, #0
   135c4:	movne	r3, #0
   135c8:	andeq	r3, r3, #1
   135cc:	cmp	r3, #0
   135d0:	beq	13ba8 <__assert_fail@plt+0x2848>
   135d4:	ldr	r3, [sp, #8]
   135d8:	cmp	r8, #0
   135dc:	cmpne	r3, #1
   135e0:	bne	13bd4 <__assert_fail@plt+0x2874>
   135e4:	ldr	r3, [r5, #48]	; 0x30
   135e8:	cmp	r3, #0
   135ec:	bne	13b90 <__assert_fail@plt+0x2830>
   135f0:	mov	r0, r4
   135f4:	bl	12fd0 <__assert_fail@plt+0x1c70>
   135f8:	adds	r0, r0, #0
   135fc:	movne	r0, #1
   13600:	cmp	r0, #0
   13604:	beq	13ba8 <__assert_fail@plt+0x2848>
   13608:	mov	r3, #7
   1360c:	strh	r3, [r5, #56]	; 0x38
   13610:	ldr	r3, [r4, #48]	; 0x30
   13614:	orr	r3, r3, #8192	; 0x2000
   13618:	str	r3, [r4, #48]	; 0x30
   1361c:	mov	r0, r6
   13620:	bl	12db8 <__assert_fail@plt+0x1a58>
   13624:	mov	r6, #0
   13628:	b	13478 <__assert_fail@plt+0x2118>
   1362c:	ldr	r3, [r4, #48]	; 0x30
   13630:	tst	r3, #256	; 0x100
   13634:	beq	134f8 <__assert_fail@plt+0x2198>
   13638:	mov	r1, r5
   1363c:	mov	r0, r4
   13640:	bl	131bc <__assert_fail@plt+0x1e5c>
   13644:	mov	r2, #0
   13648:	mov	r1, r5
   1364c:	mov	r0, r4
   13650:	bl	12b00 <__assert_fail@plt+0x17a0>
   13654:	mov	r1, r5
   13658:	mov	r0, r4
   1365c:	bl	13358 <__assert_fail@plt+0x1ff8>
   13660:	subs	r6, r0, #0
   13664:	bne	134f8 <__assert_fail@plt+0x2198>
   13668:	bl	11204 <__errno_location@plt>
   1366c:	mov	r3, #12
   13670:	str	r3, [r0]
   13674:	b	13478 <__assert_fail@plt+0x2118>
   13678:	ldr	r3, [sp, #8]
   1367c:	cmp	r3, #2
   13680:	beq	136d0 <__assert_fail@plt+0x2370>
   13684:	ldr	r3, [r4, #48]	; 0x30
   13688:	and	r3, r3, #56	; 0x38
   1368c:	cmp	r3, #24
   13690:	bne	13788 <__assert_fail@plt+0x2428>
   13694:	ldr	r3, [r5, #84]	; 0x54
   13698:	cmp	r3, #2
   1369c:	bne	13788 <__assert_fail@plt+0x2428>
   136a0:	ldr	r1, [sp, #52]	; 0x34
   136a4:	mov	r0, r5
   136a8:	bl	12e50 <__assert_fail@plt+0x1af0>
   136ac:	ldr	r3, [pc, #1400]	; 13c2c <__assert_fail@plt+0x28cc>
   136b0:	cmp	r0, r3
   136b4:	beq	13788 <__assert_fail@plt+0x2428>
   136b8:	bgt	13770 <__assert_fail@plt+0x2410>
   136bc:	ldr	r3, [pc, #1388]	; 13c30 <__assert_fail@plt+0x28d0>
   136c0:	cmp	r0, r3
   136c4:	beq	13788 <__assert_fail@plt+0x2428>
   136c8:	cmp	r0, #0
   136cc:	beq	13788 <__assert_fail@plt+0x2428>
   136d0:	mov	r3, #0
   136d4:	mov	r6, r3
   136d8:	ldr	r3, [sp, #8]
   136dc:	sub	r7, r3, #3
   136e0:	clz	r7, r7
   136e4:	lsr	r7, r7, #5
   136e8:	orrs	r3, r6, r7
   136ec:	str	r3, [sp, #20]
   136f0:	beq	13520 <__assert_fail@plt+0x21c0>
   136f4:	ldr	r3, [r4, #48]	; 0x30
   136f8:	tst	r3, #512	; 0x200
   136fc:	beq	13714 <__assert_fail@plt+0x23b4>
   13700:	mov	r2, #3
   13704:	ldr	r1, [pc, #1320]	; 13c34 <__assert_fail@plt+0x28d4>
   13708:	ldr	r0, [sp, #52]	; 0x34
   1370c:	bl	17ea4 <__assert_fail@plt+0x6b44>
   13710:	str	r0, [sp, #52]	; 0x34
   13714:	ldr	r2, [sp, #52]	; 0x34
   13718:	cmp	r2, #0
   1371c:	bge	13790 <__assert_fail@plt+0x2430>
   13720:	tst	r6, r7
   13724:	bne	137ac <__assert_fail@plt+0x244c>
   13728:	ldrh	r3, [r5, #58]	; 0x3a
   1372c:	ldr	r0, [r5, #12]
   13730:	orr	r3, r3, #1
   13734:	strh	r3, [r5, #58]	; 0x3a
   13738:	bl	1133c <closedir@plt>
   1373c:	ldr	r2, [r4, #48]	; 0x30
   13740:	mov	r3, #0
   13744:	tst	r2, #512	; 0x200
   13748:	str	r3, [r5, #12]
   1374c:	mov	r6, r3
   13750:	beq	13764 <__assert_fail@plt+0x2404>
   13754:	ldr	r0, [sp, #52]	; 0x34
   13758:	cmp	r0, r3
   1375c:	blt	13764 <__assert_fail@plt+0x2404>
   13760:	bl	11324 <close@plt>
   13764:	str	r6, [r5, #12]
   13768:	mov	r3, #0
   1376c:	b	1351c <__assert_fail@plt+0x21bc>
   13770:	ldr	r3, [pc, #1216]	; 13c38 <__assert_fail@plt+0x28d8>
   13774:	cmp	r0, r3
   13778:	beq	13788 <__assert_fail@plt+0x2428>
   1377c:	ldr	r3, [pc, #1208]	; 13c3c <__assert_fail@plt+0x28dc>
   13780:	cmp	r0, r3
   13784:	b	136cc <__assert_fail@plt+0x236c>
   13788:	mov	r3, #1
   1378c:	b	136d4 <__assert_fail@plt+0x2374>
   13790:	mov	r3, #0
   13794:	mov	r1, r5
   13798:	mov	r0, r4
   1379c:	bl	13020 <__assert_fail@plt+0x1cc0>
   137a0:	cmp	r0, #0
   137a4:	bne	13720 <__assert_fail@plt+0x23c0>
   137a8:	b	13518 <__assert_fail@plt+0x21b8>
   137ac:	bl	11204 <__errno_location@plt>
   137b0:	ldr	r3, [r0]
   137b4:	str	r3, [r5, #32]
   137b8:	b	13728 <__assert_fail@plt+0x23c8>
   137bc:	bl	11204 <__errno_location@plt>
   137c0:	mov	r3, #0
   137c4:	str	r0, [sp, #12]
   137c8:	str	r3, [r0]
   137cc:	mov	r0, r7
   137d0:	bl	112a0 <readdir64@plt>
   137d4:	subs	sl, r0, #0
   137d8:	bne	13824 <__assert_fail@plt+0x24c4>
   137dc:	ldr	r3, [sp, #12]
   137e0:	ldr	r3, [r3]
   137e4:	cmp	r3, #0
   137e8:	beq	13808 <__assert_fail@plt+0x24a8>
   137ec:	str	r3, [r5, #32]
   137f0:	ldr	r3, [sp, #4]
   137f4:	cmp	r8, #0
   137f8:	cmpeq	r3, #0
   137fc:	moveq	r3, #4
   13800:	movne	r3, #7
   13804:	strh	r3, [r5, #56]	; 0x38
   13808:	ldr	r0, [r5, #12]
   1380c:	cmp	r0, #0
   13810:	beq	135a0 <__assert_fail@plt+0x2240>
   13814:	bl	1133c <closedir@plt>
   13818:	mov	r3, #0
   1381c:	str	r3, [r5, #12]
   13820:	b	135a0 <__assert_fail@plt+0x2240>
   13824:	ldr	r3, [r4, #48]	; 0x30
   13828:	tst	r3, #32
   1382c:	bne	13854 <__assert_fail@plt+0x24f4>
   13830:	ldrb	r3, [sl, #19]
   13834:	cmp	r3, #46	; 0x2e
   13838:	bne	13854 <__assert_fail@plt+0x24f4>
   1383c:	ldrb	r3, [sl, #20]
   13840:	cmp	r3, #0
   13844:	beq	13594 <__assert_fail@plt+0x2234>
   13848:	ldrh	r3, [sl, #20]
   1384c:	cmp	r3, #46	; 0x2e
   13850:	beq	13594 <__assert_fail@plt+0x2234>
   13854:	add	r7, sl, #19
   13858:	mov	r0, r7
   1385c:	bl	111d4 <strlen@plt>
   13860:	mov	r1, r7
   13864:	mov	r2, r0
   13868:	str	r0, [sp, #44]	; 0x2c
   1386c:	mov	r0, r4
   13870:	bl	12d00 <__assert_fail@plt+0x19a0>
   13874:	subs	r7, r0, #0
   13878:	beq	138b8 <__assert_fail@plt+0x2558>
   1387c:	ldr	r2, [sp, #28]
   13880:	ldr	r3, [sp, #44]	; 0x2c
   13884:	cmp	r2, r3
   13888:	bhi	13938 <__assert_fail@plt+0x25d8>
   1388c:	ldr	r2, [r4, #24]
   13890:	add	r1, fp, #2
   13894:	add	r1, r1, r3
   13898:	mov	r0, r4
   1389c:	str	r2, [sp, #44]	; 0x2c
   138a0:	str	r3, [sp, #28]
   138a4:	bl	13270 <__assert_fail@plt+0x1f10>
   138a8:	ldr	r3, [sp, #28]
   138ac:	ldr	r2, [sp, #44]	; 0x2c
   138b0:	cmp	r0, #0
   138b4:	bne	13900 <__assert_fail@plt+0x25a0>
   138b8:	ldr	r3, [sp, #12]
   138bc:	mov	r0, r7
   138c0:	ldr	r8, [r3]
   138c4:	bl	129e4 <__assert_fail@plt+0x1684>
   138c8:	mov	r0, r6
   138cc:	bl	12db8 <__assert_fail@plt+0x1a58>
   138d0:	ldr	r0, [r5, #12]
   138d4:	bl	1133c <closedir@plt>
   138d8:	mov	r3, #7
   138dc:	strh	r3, [r5, #56]	; 0x38
   138e0:	ldr	r3, [r4, #48]	; 0x30
   138e4:	mov	r6, #0
   138e8:	orr	r3, r3, #8192	; 0x2000
   138ec:	str	r6, [r5, #12]
   138f0:	str	r3, [r4, #48]	; 0x30
   138f4:	ldr	r3, [sp, #12]
   138f8:	str	r8, [r3]
   138fc:	b	13478 <__assert_fail@plt+0x2118>
   13900:	ldr	r1, [r4, #24]
   13904:	cmp	r2, r1
   13908:	ldreq	r0, [sp, #24]
   1390c:	beq	13924 <__assert_fail@plt+0x25c4>
   13910:	ldr	r2, [r4, #48]	; 0x30
   13914:	tst	r2, #4
   13918:	ldrne	r2, [sp, #16]
   1391c:	addne	r2, r1, r2
   13920:	strne	r2, [sp]
   13924:	ldr	r2, [r4, #36]	; 0x24
   13928:	ldr	r1, [sp, #16]
   1392c:	str	r0, [sp, #24]
   13930:	sub	r2, r2, r1
   13934:	str	r2, [sp, #28]
   13938:	ldr	r2, [sp, #16]
   1393c:	adds	r3, r2, r3
   13940:	bcc	13988 <__assert_fail@plt+0x2628>
   13944:	mov	r0, r7
   13948:	bl	129e4 <__assert_fail@plt+0x1684>
   1394c:	mov	r0, r6
   13950:	bl	12db8 <__assert_fail@plt+0x1a58>
   13954:	ldr	r0, [r5, #12]
   13958:	bl	1133c <closedir@plt>
   1395c:	mov	r3, #7
   13960:	strh	r3, [r5, #56]	; 0x38
   13964:	ldr	r3, [r4, #48]	; 0x30
   13968:	ldr	r2, [sp, #12]
   1396c:	orr	r3, r3, #8192	; 0x2000
   13970:	mov	r6, #0
   13974:	str	r6, [r5, #12]
   13978:	str	r3, [r4, #48]	; 0x30
   1397c:	mov	r3, #36	; 0x24
   13980:	str	r3, [r2]
   13984:	b	13478 <__assert_fail@plt+0x2118>
   13988:	ldr	r2, [sp, #40]	; 0x28
   1398c:	str	r2, [r7, #48]	; 0x30
   13990:	ldr	r2, [r4]
   13994:	str	r3, [r7, #40]	; 0x28
   13998:	str	r2, [r7, #4]
   1399c:	ldrd	r2, [sl]
   139a0:	strd	r2, [r7, #160]	; 0xa0
   139a4:	ldr	r3, [r4, #48]	; 0x30
   139a8:	tst	r3, #4
   139ac:	addeq	r3, r7, #168	; 0xa8
   139b0:	streq	r3, [r7, #24]
   139b4:	beq	139d4 <__assert_fail@plt+0x2674>
   139b8:	ldr	r3, [r7, #28]
   139bc:	ldr	r2, [r7, #52]	; 0x34
   139c0:	str	r3, [r7, #24]
   139c4:	add	r2, r2, #1
   139c8:	add	r1, r7, #168	; 0xa8
   139cc:	ldr	r0, [sp]
   139d0:	bl	1106c <memmove@plt>
   139d4:	ldr	r3, [r4, #44]	; 0x2c
   139d8:	cmp	r3, #0
   139dc:	beq	139ec <__assert_fail@plt+0x268c>
   139e0:	ldr	r2, [r4, #48]	; 0x30
   139e4:	ands	r2, r2, #1024	; 0x400
   139e8:	beq	13ad4 <__assert_fail@plt+0x2774>
   139ec:	ldr	r3, [r4, #48]	; 0x30
   139f0:	ands	r1, r3, #8
   139f4:	beq	13a18 <__assert_fail@plt+0x26b8>
   139f8:	ldrb	r2, [sl, #18]
   139fc:	ands	r1, r2, #251	; 0xfb
   13a00:	beq	13a18 <__assert_fail@plt+0x26b8>
   13a04:	lsr	r3, r3, #4
   13a08:	and	r3, r3, #1
   13a0c:	cmp	r2, #10
   13a10:	moveq	r1, r3
   13a14:	orrne	r1, r3, #1
   13a18:	mov	r3, #11
   13a1c:	strh	r3, [r7, #56]	; 0x38
   13a20:	ldrb	r2, [sl, #18]
   13a24:	sub	r2, r2, #1
   13a28:	cmp	r2, r3
   13a2c:	lslls	r2, r2, #1
   13a30:	ldrls	r3, [pc, #520]	; 13c40 <__assert_fail@plt+0x28e0>
   13a34:	movhi	r3, #0
   13a38:	ldrhls	r3, [r3, r2]
   13a3c:	cmp	r1, #0
   13a40:	movne	r2, #1
   13a44:	str	r3, [r7, #80]	; 0x50
   13a48:	moveq	r2, #2
   13a4c:	mov	r3, #0
   13a50:	strd	r2, [r7, #112]	; 0x70
   13a54:	mov	r3, #0
   13a58:	cmp	r6, r3
   13a5c:	str	r3, [r7, #8]
   13a60:	ldrne	r3, [sp, #32]
   13a64:	moveq	r6, r7
   13a68:	strne	r7, [r3, #8]
   13a6c:	ldr	r3, [pc, #464]	; 13c44 <__assert_fail@plt+0x28e4>
   13a70:	cmp	r8, r3
   13a74:	bne	13abc <__assert_fail@plt+0x275c>
   13a78:	ldr	r3, [r4, #44]	; 0x2c
   13a7c:	cmp	r3, #0
   13a80:	bne	13abc <__assert_fail@plt+0x275c>
   13a84:	ldr	r1, [sp, #52]	; 0x34
   13a88:	mov	r0, r5
   13a8c:	bl	12e50 <__assert_fail@plt+0x1af0>
   13a90:	ldr	r3, [pc, #404]	; 13c2c <__assert_fail@plt+0x28cc>
   13a94:	cmp	r0, r3
   13a98:	beq	13ab8 <__assert_fail@plt+0x2758>
   13a9c:	ldr	r3, [pc, #420]	; 13c48 <__assert_fail@plt+0x28e8>
   13aa0:	cmp	r0, r3
   13aa4:	beq	13ab8 <__assert_fail@plt+0x2758>
   13aa8:	ldr	r3, [pc, #384]	; 13c30 <__assert_fail@plt+0x28d0>
   13aac:	cmp	r0, r3
   13ab0:	movne	r9, #1
   13ab4:	bne	13abc <__assert_fail@plt+0x275c>
   13ab8:	mov	r9, #0
   13abc:	ldr	r3, [sp, #36]	; 0x24
   13ac0:	add	r8, r8, #1
   13ac4:	cmp	r3, r8
   13ac8:	bls	135a0 <__assert_fail@plt+0x2240>
   13acc:	str	r7, [sp, #32]
   13ad0:	b	13594 <__assert_fail@plt+0x2234>
   13ad4:	mov	r1, r7
   13ad8:	mov	r0, r4
   13adc:	bl	12b00 <__assert_fail@plt+0x17a0>
   13ae0:	strh	r0, [r7, #56]	; 0x38
   13ae4:	b	13a54 <__assert_fail@plt+0x26f4>
   13ae8:	ldr	r1, [r4, #24]
   13aec:	ldr	r3, [r4, #4]
   13af0:	cmp	r3, #0
   13af4:	bne	13b3c <__assert_fail@plt+0x27dc>
   13af8:	mov	r3, r6
   13afc:	ldr	r2, [r3, #48]	; 0x30
   13b00:	cmp	r2, #0
   13b04:	blt	135ac <__assert_fail@plt+0x224c>
   13b08:	ldr	r2, [r3, #24]
   13b0c:	add	r0, r3, #168	; 0xa8
   13b10:	cmp	r2, r0
   13b14:	ldrne	r0, [r3, #28]
   13b18:	str	r1, [r3, #28]
   13b1c:	subne	r2, r2, r0
   13b20:	addne	r2, r1, r2
   13b24:	strne	r2, [r3, #24]
   13b28:	ldr	r2, [r3, #8]
   13b2c:	cmp	r2, #0
   13b30:	ldreq	r2, [r3, #4]
   13b34:	mov	r3, r2
   13b38:	b	13afc <__assert_fail@plt+0x279c>
   13b3c:	ldr	r2, [r3, #24]
   13b40:	add	r0, r3, #168	; 0xa8
   13b44:	cmp	r2, r0
   13b48:	ldrne	r0, [r3, #28]
   13b4c:	str	r1, [r3, #28]
   13b50:	subne	r2, r2, r0
   13b54:	addne	r2, r1, r2
   13b58:	strne	r2, [r3, #24]
   13b5c:	ldr	r3, [r3, #8]
   13b60:	b	13af0 <__assert_fail@plt+0x2790>
   13b64:	ldr	r3, [r4, #36]	; 0x24
   13b68:	ldr	r2, [sp, #16]
   13b6c:	cmp	r8, #0
   13b70:	cmpne	r3, r2
   13b74:	ldreq	r3, [sp]
   13b78:	subeq	r3, r3, #1
   13b7c:	streq	r3, [sp]
   13b80:	ldr	r2, [sp]
   13b84:	mov	r3, #0
   13b88:	strb	r3, [r2]
   13b8c:	b	135b8 <__assert_fail@plt+0x2258>
   13b90:	ldr	r3, [pc, #180]	; 13c4c <__assert_fail@plt+0x28ec>
   13b94:	mvn	r2, #0
   13b98:	ldr	r1, [r5, #4]
   13b9c:	mov	r0, r4
   13ba0:	bl	13020 <__assert_fail@plt+0x1cc0>
   13ba4:	b	135f8 <__assert_fail@plt+0x2298>
   13ba8:	cmp	r8, #0
   13bac:	bne	13bd4 <__assert_fail@plt+0x2874>
   13bb0:	ldr	r3, [sp, #8]
   13bb4:	cmp	r3, #3
   13bb8:	bne	1361c <__assert_fail@plt+0x22bc>
   13bbc:	ldrh	r3, [r5, #56]	; 0x38
   13bc0:	cmp	r3, #4
   13bc4:	cmpne	r3, #7
   13bc8:	movne	r3, #6
   13bcc:	strhne	r3, [r5, #56]	; 0x38
   13bd0:	b	1361c <__assert_fail@plt+0x22bc>
   13bd4:	cmp	r9, #0
   13bd8:	beq	13c00 <__assert_fail@plt+0x28a0>
   13bdc:	ldr	r3, [pc, #108]	; 13c50 <__assert_fail@plt+0x28f0>
   13be0:	mov	r1, r6
   13be4:	str	r3, [r4, #44]	; 0x2c
   13be8:	mov	r2, r8
   13bec:	mov	r0, r4
   13bf0:	bl	12c38 <__assert_fail@plt+0x18d8>
   13bf4:	mov	r3, #0
   13bf8:	str	r3, [r4, #44]	; 0x2c
   13bfc:	mov	r6, r0
   13c00:	ldr	r3, [r4, #44]	; 0x2c
   13c04:	cmp	r3, #0
   13c08:	cmpne	r8, #1
   13c0c:	bls	13478 <__assert_fail@plt+0x2118>
   13c10:	mov	r1, r6
   13c14:	mov	r2, r8
   13c18:	mov	r0, r4
   13c1c:	bl	12c38 <__assert_fail@plt+0x18d8>
   13c20:	mov	r6, r0
   13c24:	b	13478 <__assert_fail@plt+0x2118>
   13c28:	andeq	r8, r1, r0, lsr #13
   13c2c:	andeq	r6, r0, r9, ror #18
   13c30:			; <UNDEFINED> instruction: 0xff534d42
   13c34:	andeq	r0, r0, r6, lsl #8
   13c38:	andeq	r9, r0, r0, lsr #31
   13c3c:	movtpl	r4, #24911	; 0x614f
   13c40:	andeq	r9, r1, r4, lsl #16
   13c44:	andeq	r2, r0, r0, lsl r7
   13c48:			; <UNDEFINED> instruction: 0x01021994
   13c4c:	andeq	r9, r1, ip, lsl r8
   13c50:	andeq	r2, r1, ip, asr #21
   13c54:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c58:	bic	r4, r1, #4080	; 0xff0
   13c5c:	bic	r4, r4, #15
   13c60:	cmp	r4, #0
   13c64:	beq	13c7c <__assert_fail@plt+0x291c>
   13c68:	bl	11204 <__errno_location@plt>
   13c6c:	mov	r3, #22
   13c70:	str	r3, [r0]
   13c74:	mov	r4, #0
   13c78:	b	13c98 <__assert_fail@plt+0x2938>
   13c7c:	and	r3, r1, #516	; 0x204
   13c80:	cmp	r3, #516	; 0x204
   13c84:	mov	r5, r1
   13c88:	bne	13ca4 <__assert_fail@plt+0x2944>
   13c8c:	bl	11204 <__errno_location@plt>
   13c90:	mov	r3, #22
   13c94:	str	r3, [r0]
   13c98:	mov	r0, r4
   13c9c:	add	sp, sp, #12
   13ca0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ca4:	ands	r4, r1, #18
   13ca8:	beq	13c8c <__assert_fail@plt+0x292c>
   13cac:	mov	fp, r0
   13cb0:	mov	r1, #96	; 0x60
   13cb4:	mov	r0, #1
   13cb8:	mov	sl, r2
   13cbc:	bl	17bdc <__assert_fail@plt+0x687c>
   13cc0:	subs	r4, r0, #0
   13cc4:	beq	13c98 <__assert_fail@plt+0x2938>
   13cc8:	tst	r5, #2
   13ccc:	bicne	r3, r5, #512	; 0x200
   13cd0:	orrne	r3, r3, #4
   13cd4:	sub	r7, fp, #4
   13cd8:	mov	r6, #0
   13cdc:	strne	r3, [r4, #48]	; 0x30
   13ce0:	mvn	r3, #99	; 0x63
   13ce4:	str	sl, [r4, #44]	; 0x2c
   13ce8:	streq	r5, [r4, #48]	; 0x30
   13cec:	str	r3, [r4, #32]
   13cf0:	ldr	r9, [r7, #4]!
   13cf4:	cmp	r9, #0
   13cf8:	bne	13e20 <__assert_fail@plt+0x2ac0>
   13cfc:	add	r1, r6, #1
   13d00:	cmp	r1, #4096	; 0x1000
   13d04:	movcc	r1, #4096	; 0x1000
   13d08:	mov	r0, r4
   13d0c:	bl	13270 <__assert_fail@plt+0x1f10>
   13d10:	subs	r3, r0, #0
   13d14:	str	r3, [sp]
   13d18:	beq	13f34 <__assert_fail@plt+0x2bd4>
   13d1c:	ldr	r7, [fp]
   13d20:	cmp	r7, #0
   13d24:	beq	13d48 <__assert_fail@plt+0x29e8>
   13d28:	mov	r2, r9
   13d2c:	ldr	r1, [pc, #524]	; 13f40 <__assert_fail@plt+0x2be0>
   13d30:	mov	r0, r4
   13d34:	bl	12d00 <__assert_fail@plt+0x19a0>
   13d38:	subs	r7, r0, #0
   13d3c:	beq	13f2c <__assert_fail@plt+0x2bcc>
   13d40:	mvn	r3, #0
   13d44:	str	r3, [r7, #48]	; 0x30
   13d48:	cmp	sl, #0
   13d4c:	lsr	r5, r5, #11
   13d50:	ldrne	r8, [r4, #48]	; 0x30
   13d54:	eor	r5, r5, #1
   13d58:	lsrne	r8, r8, #10
   13d5c:	andne	r3, r8, #1
   13d60:	mov	r8, #0
   13d64:	mov	r9, r8
   13d68:	mov	r6, r8
   13d6c:	strne	r3, [sp]
   13d70:	and	r3, r5, #1
   13d74:	str	r3, [sp, #4]
   13d78:	ldr	r5, [fp, r9, lsl #2]
   13d7c:	cmp	r5, #0
   13d80:	bne	13e34 <__assert_fail@plt+0x2ad4>
   13d84:	cmp	sl, #0
   13d88:	cmpne	r9, #1
   13d8c:	bls	13da4 <__assert_fail@plt+0x2a44>
   13d90:	mov	r1, r6
   13d94:	mov	r2, r9
   13d98:	mov	r0, r4
   13d9c:	bl	12c38 <__assert_fail@plt+0x18d8>
   13da0:	mov	r6, r0
   13da4:	mov	r2, #0
   13da8:	ldr	r1, [pc, #400]	; 13f40 <__assert_fail@plt+0x2be0>
   13dac:	mov	r0, r4
   13db0:	bl	12d00 <__assert_fail@plt+0x19a0>
   13db4:	cmp	r0, #0
   13db8:	str	r0, [r4]
   13dbc:	beq	13f1c <__assert_fail@plt+0x2bbc>
   13dc0:	mov	r3, #9
   13dc4:	strh	r3, [r0, #56]	; 0x38
   13dc8:	mov	r3, #1
   13dcc:	str	r6, [r0, #8]
   13dd0:	str	r3, [r0, #48]	; 0x30
   13dd4:	mov	r0, r4
   13dd8:	bl	132dc <__assert_fail@plt+0x1f7c>
   13ddc:	cmp	r0, #0
   13de0:	beq	13f1c <__assert_fail@plt+0x2bbc>
   13de4:	ldr	r3, [r4, #48]	; 0x30
   13de8:	tst	r3, #516	; 0x204
   13dec:	bne	13e10 <__assert_fail@plt+0x2ab0>
   13df0:	ldr	r1, [pc, #332]	; 13f44 <__assert_fail@plt+0x2be4>
   13df4:	mov	r0, r4
   13df8:	bl	12d74 <__assert_fail@plt+0x1a14>
   13dfc:	cmp	r0, #0
   13e00:	str	r0, [r4, #28]
   13e04:	ldrlt	r3, [r4, #48]	; 0x30
   13e08:	orrlt	r3, r3, #4
   13e0c:	strlt	r3, [r4, #48]	; 0x30
   13e10:	mvn	r1, #0
   13e14:	add	r0, r4, #60	; 0x3c
   13e18:	bl	1551c <__assert_fail@plt+0x41bc>
   13e1c:	b	13c98 <__assert_fail@plt+0x2938>
   13e20:	mov	r0, r9
   13e24:	bl	111d4 <strlen@plt>
   13e28:	cmp	r6, r0
   13e2c:	movcc	r6, r0
   13e30:	b	13cf0 <__assert_fail@plt+0x2990>
   13e34:	mov	r0, r5
   13e38:	bl	111d4 <strlen@plt>
   13e3c:	ldr	r1, [sp, #4]
   13e40:	cmp	r0, #2
   13e44:	movls	r1, #0
   13e48:	andhi	r1, r1, #1
   13e4c:	cmp	r1, #0
   13e50:	mov	r2, r0
   13e54:	beq	13e84 <__assert_fail@plt+0x2b24>
   13e58:	sub	r0, r0, #1
   13e5c:	add	r1, r5, r0
   13e60:	ldrb	r0, [r5, r0]
   13e64:	cmp	r0, #47	; 0x2f
   13e68:	bne	13e84 <__assert_fail@plt+0x2b24>
   13e6c:	ldrb	r0, [r1, #-1]!
   13e70:	cmp	r0, #47	; 0x2f
   13e74:	bne	13e84 <__assert_fail@plt+0x2b24>
   13e78:	sub	r2, r2, #1
   13e7c:	cmp	r2, #1
   13e80:	bne	13e6c <__assert_fail@plt+0x2b0c>
   13e84:	mov	r1, r5
   13e88:	mov	r0, r4
   13e8c:	bl	12d00 <__assert_fail@plt+0x19a0>
   13e90:	subs	r5, r0, #0
   13e94:	beq	13f1c <__assert_fail@plt+0x2bbc>
   13e98:	mov	r2, #0
   13e9c:	str	r2, [r5, #48]	; 0x30
   13ea0:	add	r2, r5, #168	; 0xa8
   13ea4:	str	r2, [r5, #24]
   13ea8:	ldr	r2, [sp]
   13eac:	str	r7, [r5, #4]
   13eb0:	cmp	r6, #0
   13eb4:	moveq	r2, #0
   13eb8:	andne	r2, r2, #1
   13ebc:	cmp	r2, #0
   13ec0:	beq	13f08 <__assert_fail@plt+0x2ba8>
   13ec4:	mov	r0, #2
   13ec8:	mov	r1, #0
   13ecc:	mov	r2, #11
   13ed0:	strh	r2, [r5, #56]	; 0x38
   13ed4:	strd	r0, [r5, #112]	; 0x70
   13ed8:	cmp	sl, #0
   13edc:	strne	r6, [r5, #8]
   13ee0:	bne	13efc <__assert_fail@plt+0x2b9c>
   13ee4:	cmp	r6, #0
   13ee8:	str	sl, [r5, #8]
   13eec:	moveq	r8, r5
   13ef0:	strne	r5, [r8, #8]
   13ef4:	movne	r8, r5
   13ef8:	movne	r5, r6
   13efc:	add	r9, r9, #1
   13f00:	mov	r6, r5
   13f04:	b	13d78 <__assert_fail@plt+0x2a18>
   13f08:	mov	r1, r5
   13f0c:	mov	r0, r4
   13f10:	bl	12b00 <__assert_fail@plt+0x17a0>
   13f14:	strh	r0, [r5, #56]	; 0x38
   13f18:	b	13ed8 <__assert_fail@plt+0x2b78>
   13f1c:	mov	r0, r6
   13f20:	bl	12db8 <__assert_fail@plt+0x1a58>
   13f24:	mov	r0, r7
   13f28:	bl	129e4 <__assert_fail@plt+0x1684>
   13f2c:	ldr	r0, [r4, #24]
   13f30:	bl	129e4 <__assert_fail@plt+0x1684>
   13f34:	mov	r0, r4
   13f38:	bl	129e4 <__assert_fail@plt+0x1684>
   13f3c:	b	13c74 <__assert_fail@plt+0x2914>
   13f40:	strdeq	r9, [r1], -sl
   13f44:	andeq	r9, r1, sp, lsl r8
   13f48:	push	{r4, r5, r6, lr}
   13f4c:	mov	r4, r0
   13f50:	ldr	r0, [r0]
   13f54:	cmp	r0, #0
   13f58:	bne	13ff0 <__assert_fail@plt+0x2c90>
   13f5c:	ldr	r0, [r4, #4]
   13f60:	cmp	r0, #0
   13f64:	beq	13f6c <__assert_fail@plt+0x2c0c>
   13f68:	bl	12db8 <__assert_fail@plt+0x1a58>
   13f6c:	ldr	r0, [r4, #8]
   13f70:	bl	129e4 <__assert_fail@plt+0x1684>
   13f74:	ldr	r0, [r4, #24]
   13f78:	bl	129e4 <__assert_fail@plt+0x1684>
   13f7c:	ldr	r3, [r4, #48]	; 0x30
   13f80:	tst	r3, #512	; 0x200
   13f84:	beq	1401c <__assert_fail@plt+0x2cbc>
   13f88:	ldr	r0, [r4, #32]
   13f8c:	cmp	r0, #0
   13f90:	bge	14004 <__assert_fail@plt+0x2ca4>
   13f94:	mov	r5, #0
   13f98:	add	r0, r4, #60	; 0x3c
   13f9c:	bl	12e1c <__assert_fail@plt+0x1abc>
   13fa0:	ldr	r0, [r4, #52]	; 0x34
   13fa4:	cmp	r0, #0
   13fa8:	beq	13fb0 <__assert_fail@plt+0x2c50>
   13fac:	bl	15088 <__assert_fail@plt+0x3d28>
   13fb0:	mov	r0, r4
   13fb4:	bl	12df0 <__assert_fail@plt+0x1a90>
   13fb8:	mov	r0, r4
   13fbc:	bl	129e4 <__assert_fail@plt+0x1684>
   13fc0:	cmp	r5, #0
   13fc4:	beq	13fd4 <__assert_fail@plt+0x2c74>
   13fc8:	bl	11204 <__errno_location@plt>
   13fcc:	str	r5, [r0]
   13fd0:	mvn	r5, #0
   13fd4:	mov	r0, r5
   13fd8:	pop	{r4, r5, r6, pc}
   13fdc:	ldr	r5, [r0, #8]
   13fe0:	cmp	r5, #0
   13fe4:	ldreq	r5, [r0, #4]
   13fe8:	bl	129e4 <__assert_fail@plt+0x1684>
   13fec:	mov	r0, r5
   13ff0:	ldr	r3, [r0, #48]	; 0x30
   13ff4:	cmp	r3, #0
   13ff8:	bge	13fdc <__assert_fail@plt+0x2c7c>
   13ffc:	bl	129e4 <__assert_fail@plt+0x1684>
   14000:	b	13f5c <__assert_fail@plt+0x2bfc>
   14004:	bl	11324 <close@plt>
   14008:	cmp	r0, #0
   1400c:	beq	13f94 <__assert_fail@plt+0x2c34>
   14010:	bl	11204 <__errno_location@plt>
   14014:	ldr	r5, [r0]
   14018:	b	13f98 <__assert_fail@plt+0x2c38>
   1401c:	tst	r3, #4
   14020:	bne	13f94 <__assert_fail@plt+0x2c34>
   14024:	ldr	r0, [r4, #28]
   14028:	bl	112c4 <fchdir@plt>
   1402c:	subs	r5, r0, #0
   14030:	beq	1403c <__assert_fail@plt+0x2cdc>
   14034:	bl	11204 <__errno_location@plt>
   14038:	ldr	r5, [r0]
   1403c:	ldr	r0, [r4, #28]
   14040:	bl	11324 <close@plt>
   14044:	clz	r3, r5
   14048:	lsr	r3, r3, #5
   1404c:	cmp	r0, #0
   14050:	moveq	r3, #0
   14054:	cmp	r3, #0
   14058:	beq	13f98 <__assert_fail@plt+0x2c38>
   1405c:	b	14010 <__assert_fail@plt+0x2cb0>
   14060:	push	{r4, r5, r6, r7, r8, lr}
   14064:	ldr	r4, [r0]
   14068:	cmp	r4, #0
   1406c:	beq	1436c <__assert_fail@plt+0x300c>
   14070:	ldr	r1, [r0, #48]	; 0x30
   14074:	mov	r5, r0
   14078:	ands	r2, r1, #8192	; 0x2000
   1407c:	bne	1436c <__assert_fail@plt+0x300c>
   14080:	ldrh	r3, [r4, #60]	; 0x3c
   14084:	mov	ip, #3
   14088:	strh	ip, [r4, #60]	; 0x3c
   1408c:	cmp	r3, #1
   14090:	bne	140a8 <__assert_fail@plt+0x2d48>
   14094:	mov	r1, r4
   14098:	bl	12b00 <__assert_fail@plt+0x17a0>
   1409c:	strh	r0, [r4, #56]	; 0x38
   140a0:	mov	r0, r4
   140a4:	pop	{r4, r5, r6, r7, r8, pc}
   140a8:	cmp	r3, #2
   140ac:	ldrh	r2, [r4, #56]	; 0x38
   140b0:	bne	14190 <__assert_fail@plt+0x2e30>
   140b4:	sub	ip, r2, #12
   140b8:	cmp	ip, #1
   140bc:	bhi	14190 <__assert_fail@plt+0x2e30>
   140c0:	mov	r2, #1
   140c4:	mov	r1, r4
   140c8:	bl	12b00 <__assert_fail@plt+0x17a0>
   140cc:	cmp	r0, #1
   140d0:	strh	r0, [r4, #56]	; 0x38
   140d4:	bne	1411c <__assert_fail@plt+0x2dbc>
   140d8:	ldr	r3, [r5, #48]	; 0x30
   140dc:	tst	r3, #4
   140e0:	bne	1411c <__assert_fail@plt+0x2dbc>
   140e4:	ldr	r1, [pc, #1332]	; 14620 <__assert_fail@plt+0x32c0>
   140e8:	mov	r0, r5
   140ec:	bl	12d74 <__assert_fail@plt+0x1a14>
   140f0:	cmp	r0, #0
   140f4:	str	r0, [r4, #36]	; 0x24
   140f8:	ldrhge	r3, [r4, #58]	; 0x3a
   140fc:	orrge	r3, r3, #2
   14100:	strhge	r3, [r4, #58]	; 0x3a
   14104:	bge	1411c <__assert_fail@plt+0x2dbc>
   14108:	bl	11204 <__errno_location@plt>
   1410c:	ldr	r3, [r0]
   14110:	str	r3, [r4, #32]
   14114:	mov	r3, #7
   14118:	strh	r3, [r4, #56]	; 0x38
   1411c:	ldrh	r3, [r4, #56]	; 0x38
   14120:	str	r4, [r5]
   14124:	cmp	r3, #11
   14128:	bne	14150 <__assert_fail@plt+0x2df0>
   1412c:	ldrd	r2, [r4, #112]	; 0x70
   14130:	cmp	r3, #0
   14134:	cmpeq	r2, #2
   14138:	bne	144c0 <__assert_fail@plt+0x3160>
   1413c:	mov	r2, #0
   14140:	mov	r1, r4
   14144:	mov	r0, r5
   14148:	bl	12b00 <__assert_fail@plt+0x17a0>
   1414c:	strh	r0, [r4, #56]	; 0x38
   14150:	ldrh	r3, [r4, #56]	; 0x38
   14154:	cmp	r3, #1
   14158:	bne	140a0 <__assert_fail@plt+0x2d40>
   1415c:	ldr	r3, [r4, #48]	; 0x30
   14160:	cmp	r3, #0
   14164:	ldrdeq	r2, [r4, #64]	; 0x40
   14168:	strdeq	r2, [r5, #16]
   1416c:	mov	r0, r5
   14170:	mov	r1, r4
   14174:	bl	13358 <__assert_fail@plt+0x1ff8>
   14178:	subs	r5, r0, #0
   1417c:	bne	140a0 <__assert_fail@plt+0x2d40>
   14180:	bl	11204 <__errno_location@plt>
   14184:	mov	r3, #12
   14188:	str	r3, [r0]
   1418c:	b	1436c <__assert_fail@plt+0x300c>
   14190:	cmp	r2, #1
   14194:	movne	r6, r4
   14198:	bne	14320 <__assert_fail@plt+0x2fc0>
   1419c:	cmp	r3, #4
   141a0:	beq	141c0 <__assert_fail@plt+0x2e60>
   141a4:	tst	r1, #64	; 0x40
   141a8:	beq	14204 <__assert_fail@plt+0x2ea4>
   141ac:	ldrd	r6, [r4, #64]	; 0x40
   141b0:	ldrd	r2, [r5, #16]
   141b4:	cmp	r7, r3
   141b8:	cmpeq	r6, r2
   141bc:	beq	14204 <__assert_fail@plt+0x2ea4>
   141c0:	ldrh	r3, [r4, #58]	; 0x3a
   141c4:	tst	r3, #2
   141c8:	beq	141d4 <__assert_fail@plt+0x2e74>
   141cc:	ldr	r0, [r4, #36]	; 0x24
   141d0:	bl	11324 <close@plt>
   141d4:	ldr	r0, [r5, #4]
   141d8:	cmp	r0, #0
   141dc:	beq	141ec <__assert_fail@plt+0x2e8c>
   141e0:	bl	12db8 <__assert_fail@plt+0x1a58>
   141e4:	mov	r3, #0
   141e8:	str	r3, [r5, #4]
   141ec:	mov	r3, #6
   141f0:	strh	r3, [r4, #56]	; 0x38
   141f4:	mov	r1, r4
   141f8:	mov	r0, r5
   141fc:	bl	131bc <__assert_fail@plt+0x1e5c>
   14200:	b	140a0 <__assert_fail@plt+0x2d40>
   14204:	ldr	r0, [r5, #4]
   14208:	cmp	r0, #0
   1420c:	beq	1422c <__assert_fail@plt+0x2ecc>
   14210:	tst	r1, #4096	; 0x1000
   14214:	beq	1422c <__assert_fail@plt+0x2ecc>
   14218:	bic	r1, r1, #4096	; 0x1000
   1421c:	str	r1, [r5, #48]	; 0x30
   14220:	bl	12db8 <__assert_fail@plt+0x1a58>
   14224:	mov	r3, #0
   14228:	str	r3, [r5, #4]
   1422c:	ldr	r3, [r5, #4]
   14230:	cmp	r3, #0
   14234:	beq	142dc <__assert_fail@plt+0x2f7c>
   14238:	ldr	r3, [r4, #24]
   1423c:	mvn	r2, #0
   14240:	mov	r1, r4
   14244:	mov	r0, r5
   14248:	bl	13020 <__assert_fail@plt+0x1cc0>
   1424c:	cmp	r0, #0
   14250:	beq	14278 <__assert_fail@plt+0x2f18>
   14254:	bl	11204 <__errno_location@plt>
   14258:	ldr	r3, [r0]
   1425c:	str	r3, [r4, #32]
   14260:	ldrh	r3, [r4, #58]	; 0x3a
   14264:	orr	r3, r3, #1
   14268:	strh	r3, [r4, #58]	; 0x3a
   1426c:	ldr	r3, [r5, #4]
   14270:	cmp	r3, #0
   14274:	bne	142c8 <__assert_fail@plt+0x2f68>
   14278:	mov	r3, #0
   1427c:	ldr	r4, [r5, #4]
   14280:	str	r3, [r5, #4]
   14284:	ldr	r0, [r4, #4]
   14288:	ldr	r2, [r5, #24]
   1428c:	ldr	r1, [r0, #40]	; 0x28
   14290:	ldr	r0, [r0, #28]
   14294:	sub	r3, r1, #1
   14298:	ldrb	r0, [r0, r3]
   1429c:	cmp	r0, #47	; 0x2f
   142a0:	movne	r3, r1
   142a4:	mov	r1, #47	; 0x2f
   142a8:	add	r0, r2, r3
   142ac:	strb	r1, [r2, r3]
   142b0:	ldr	r2, [r4, #52]	; 0x34
   142b4:	add	r1, r4, #168	; 0xa8
   142b8:	add	r2, r2, #1
   142bc:	add	r0, r0, #1
   142c0:	bl	1106c <memmove@plt>
   142c4:	b	1411c <__assert_fail@plt+0x2dbc>
   142c8:	ldr	r2, [r3, #4]
   142cc:	ldr	r2, [r2, #24]
   142d0:	str	r2, [r3, #24]
   142d4:	ldr	r3, [r3, #8]
   142d8:	b	14270 <__assert_fail@plt+0x2f10>
   142dc:	mov	r1, #3
   142e0:	mov	r0, r5
   142e4:	bl	13410 <__assert_fail@plt+0x20b0>
   142e8:	cmp	r0, #0
   142ec:	str	r0, [r5, #4]
   142f0:	bne	14278 <__assert_fail@plt+0x2f18>
   142f4:	ldr	r3, [r5, #48]	; 0x30
   142f8:	tst	r3, #8192	; 0x2000
   142fc:	bne	1436c <__assert_fail@plt+0x300c>
   14300:	ldr	r3, [r4, #32]
   14304:	cmp	r3, #0
   14308:	beq	141f4 <__assert_fail@plt+0x2e94>
   1430c:	ldrh	r3, [r4, #56]	; 0x38
   14310:	cmp	r3, #4
   14314:	beq	141f4 <__assert_fail@plt+0x2e94>
   14318:	mov	r3, #7
   1431c:	b	141f0 <__assert_fail@plt+0x2e90>
   14320:	ldr	r4, [r4, #8]
   14324:	cmp	r4, #0
   14328:	bne	14380 <__assert_fail@plt+0x3020>
   1432c:	ldr	r3, [r6, #4]
   14330:	ldr	r2, [r3, #12]
   14334:	cmp	r2, #0
   14338:	beq	144d0 <__assert_fail@plt+0x3170>
   1433c:	str	r3, [r5]
   14340:	ldr	r2, [r5, #24]
   14344:	ldr	r3, [r3, #40]	; 0x28
   14348:	mov	r1, #3
   1434c:	mov	r0, r5
   14350:	strb	r4, [r2, r3]
   14354:	bl	13410 <__assert_fail@plt+0x20b0>
   14358:	subs	r4, r0, #0
   1435c:	bne	14374 <__assert_fail@plt+0x3014>
   14360:	ldr	r3, [r5, #48]	; 0x30
   14364:	tst	r3, #8192	; 0x2000
   14368:	beq	144d0 <__assert_fail@plt+0x3170>
   1436c:	mov	r4, #0
   14370:	b	140a0 <__assert_fail@plt+0x2d40>
   14374:	mov	r0, r6
   14378:	bl	129e4 <__assert_fail@plt+0x1684>
   1437c:	b	14284 <__assert_fail@plt+0x2f24>
   14380:	mov	r0, r6
   14384:	str	r4, [r5]
   14388:	bl	129e4 <__assert_fail@plt+0x1684>
   1438c:	ldr	r6, [r4, #48]	; 0x30
   14390:	cmp	r6, #0
   14394:	bne	1443c <__assert_fail@plt+0x30dc>
   14398:	mov	r0, r5
   1439c:	bl	12fd0 <__assert_fail@plt+0x1c70>
   143a0:	cmp	r0, #0
   143a4:	ldrne	r3, [r5, #48]	; 0x30
   143a8:	orrne	r3, r3, #8192	; 0x2000
   143ac:	strne	r3, [r5, #48]	; 0x30
   143b0:	bne	1436c <__assert_fail@plt+0x300c>
   143b4:	mov	r0, r5
   143b8:	bl	12df0 <__assert_fail@plt+0x1a90>
   143bc:	ldr	r2, [r4, #52]	; 0x34
   143c0:	add	r7, r4, #168	; 0xa8
   143c4:	str	r2, [r4, #40]	; 0x28
   143c8:	mov	r1, r7
   143cc:	add	r2, r2, #1
   143d0:	ldr	r0, [r5, #24]
   143d4:	bl	1106c <memmove@plt>
   143d8:	mov	r1, #47	; 0x2f
   143dc:	mov	r0, r7
   143e0:	bl	11288 <strrchr@plt>
   143e4:	cmp	r0, #0
   143e8:	beq	14424 <__assert_fail@plt+0x30c4>
   143ec:	cmp	r7, r0
   143f0:	bne	14400 <__assert_fail@plt+0x30a0>
   143f4:	ldrb	r3, [r4, #169]	; 0xa9
   143f8:	cmp	r3, #0
   143fc:	beq	14424 <__assert_fail@plt+0x30c4>
   14400:	add	r6, r0, #1
   14404:	mov	r0, r6
   14408:	bl	111d4 <strlen@plt>
   1440c:	mov	r1, r6
   14410:	mov	r8, r0
   14414:	add	r2, r0, #1
   14418:	mov	r0, r7
   1441c:	bl	1106c <memmove@plt>
   14420:	str	r8, [r4, #52]	; 0x34
   14424:	ldr	r3, [r5, #24]
   14428:	mov	r0, r5
   1442c:	str	r3, [r4, #28]
   14430:	str	r3, [r4, #24]
   14434:	bl	132dc <__assert_fail@plt+0x1f7c>
   14438:	b	1411c <__assert_fail@plt+0x2dbc>
   1443c:	ldrh	r3, [r4, #60]	; 0x3c
   14440:	mov	r6, r4
   14444:	cmp	r3, #4
   14448:	beq	14320 <__assert_fail@plt+0x2fc0>
   1444c:	cmp	r3, #2
   14450:	bne	14284 <__assert_fail@plt+0x2f24>
   14454:	mov	r2, #1
   14458:	mov	r1, r4
   1445c:	mov	r0, r5
   14460:	bl	12b00 <__assert_fail@plt+0x17a0>
   14464:	cmp	r0, #1
   14468:	strh	r0, [r4, #56]	; 0x38
   1446c:	bne	144b4 <__assert_fail@plt+0x3154>
   14470:	ldr	r3, [r5, #48]	; 0x30
   14474:	tst	r3, #4
   14478:	bne	144b4 <__assert_fail@plt+0x3154>
   1447c:	ldr	r1, [pc, #412]	; 14620 <__assert_fail@plt+0x32c0>
   14480:	mov	r0, r5
   14484:	bl	12d74 <__assert_fail@plt+0x1a14>
   14488:	cmp	r0, #0
   1448c:	str	r0, [r4, #36]	; 0x24
   14490:	ldrhge	r3, [r4, #58]	; 0x3a
   14494:	orrge	r3, r3, #2
   14498:	strhge	r3, [r4, #58]	; 0x3a
   1449c:	bge	144b4 <__assert_fail@plt+0x3154>
   144a0:	bl	11204 <__errno_location@plt>
   144a4:	ldr	r3, [r0]
   144a8:	str	r3, [r4, #32]
   144ac:	mov	r3, #7
   144b0:	strh	r3, [r4, #56]	; 0x38
   144b4:	mov	r3, #3
   144b8:	strh	r3, [r4, #60]	; 0x3c
   144bc:	b	14284 <__assert_fail@plt+0x2f24>
   144c0:	cmp	r3, #0
   144c4:	cmpeq	r2, #1
   144c8:	beq	14150 <__assert_fail@plt+0x2df0>
   144cc:	bl	11318 <abort@plt>
   144d0:	ldr	r4, [r6, #4]
   144d4:	mov	r0, r6
   144d8:	str	r4, [r5]
   144dc:	bl	129e4 <__assert_fail@plt+0x1684>
   144e0:	ldr	r3, [r4, #48]	; 0x30
   144e4:	cmn	r3, #1
   144e8:	bne	14508 <__assert_fail@plt+0x31a8>
   144ec:	mov	r0, r4
   144f0:	bl	129e4 <__assert_fail@plt+0x1684>
   144f4:	bl	11204 <__errno_location@plt>
   144f8:	mov	r4, #0
   144fc:	str	r4, [r0]
   14500:	str	r4, [r5]
   14504:	b	140a0 <__assert_fail@plt+0x2d40>
   14508:	ldrh	r3, [r4, #56]	; 0x38
   1450c:	cmp	r3, #11
   14510:	beq	144cc <__assert_fail@plt+0x316c>
   14514:	ldr	r3, [r4, #40]	; 0x28
   14518:	ldr	r2, [r5, #24]
   1451c:	mov	r1, #0
   14520:	strb	r1, [r2, r3]
   14524:	ldr	r3, [r4, #48]	; 0x30
   14528:	cmp	r3, r1
   1452c:	bne	1455c <__assert_fail@plt+0x31fc>
   14530:	mov	r0, r5
   14534:	bl	12fd0 <__assert_fail@plt+0x1c70>
   14538:	cmp	r0, #0
   1453c:	beq	14594 <__assert_fail@plt+0x3234>
   14540:	bl	11204 <__errno_location@plt>
   14544:	ldr	r3, [r0]
   14548:	str	r3, [r4, #32]
   1454c:	ldr	r3, [r5, #48]	; 0x30
   14550:	orr	r3, r3, #8192	; 0x2000
   14554:	str	r3, [r5, #48]	; 0x30
   14558:	b	14594 <__assert_fail@plt+0x3234>
   1455c:	ldrh	r3, [r4, #58]	; 0x3a
   14560:	tst	r3, #2
   14564:	beq	14600 <__assert_fail@plt+0x32a0>
   14568:	ldr	r3, [r5, #48]	; 0x30
   1456c:	tst	r3, #4
   14570:	bne	1458c <__assert_fail@plt+0x322c>
   14574:	tst	r3, #512	; 0x200
   14578:	beq	145d4 <__assert_fail@plt+0x3274>
   1457c:	mov	r2, #1
   14580:	ldr	r1, [r4, #36]	; 0x24
   14584:	mov	r0, r5
   14588:	bl	12f54 <__assert_fail@plt+0x1bf4>
   1458c:	ldr	r0, [r4, #36]	; 0x24
   14590:	bl	11324 <close@plt>
   14594:	ldrh	r3, [r4, #56]	; 0x38
   14598:	cmp	r3, #2
   1459c:	beq	145c4 <__assert_fail@plt+0x3264>
   145a0:	ldr	r3, [r4, #32]
   145a4:	cmp	r3, #0
   145a8:	movne	r3, #7
   145ac:	moveq	r3, #6
   145b0:	strh	r3, [r4, #56]	; 0x38
   145b4:	bne	145c4 <__assert_fail@plt+0x3264>
   145b8:	mov	r1, r4
   145bc:	mov	r0, r5
   145c0:	bl	131bc <__assert_fail@plt+0x1e5c>
   145c4:	ldr	r3, [r5, #48]	; 0x30
   145c8:	tst	r3, #8192	; 0x2000
   145cc:	beq	140a0 <__assert_fail@plt+0x2d40>
   145d0:	b	1436c <__assert_fail@plt+0x300c>
   145d4:	ldr	r0, [r4, #36]	; 0x24
   145d8:	bl	112c4 <fchdir@plt>
   145dc:	cmp	r0, #0
   145e0:	beq	1458c <__assert_fail@plt+0x322c>
   145e4:	bl	11204 <__errno_location@plt>
   145e8:	ldr	r3, [r0]
   145ec:	str	r3, [r4, #32]
   145f0:	ldr	r3, [r5, #48]	; 0x30
   145f4:	orr	r3, r3, #8192	; 0x2000
   145f8:	str	r3, [r5, #48]	; 0x30
   145fc:	b	1458c <__assert_fail@plt+0x322c>
   14600:	tst	r3, #1
   14604:	bne	14594 <__assert_fail@plt+0x3234>
   14608:	ldr	r3, [pc, #20]	; 14624 <__assert_fail@plt+0x32c4>
   1460c:	mvn	r2, #0
   14610:	ldr	r1, [r4, #4]
   14614:	mov	r0, r5
   14618:	bl	13020 <__assert_fail@plt+0x1cc0>
   1461c:	b	14538 <__assert_fail@plt+0x31d8>
   14620:	andeq	r9, r1, sp, lsl r8
   14624:	andeq	r9, r1, ip, lsl r8
   14628:	cmp	r2, #4
   1462c:	bls	14648 <__assert_fail@plt+0x32e8>
   14630:	push	{r4, lr}
   14634:	bl	11204 <__errno_location@plt>
   14638:	mov	r3, #22
   1463c:	str	r3, [r0]
   14640:	mov	r0, #1
   14644:	pop	{r4, pc}
   14648:	strh	r2, [r1, #60]	; 0x3c
   1464c:	mov	r0, #0
   14650:	bx	lr
   14654:	push	{r4, r5, r6, r7, r8, lr}
   14658:	bics	r8, r1, #4096	; 0x1000
   1465c:	beq	14674 <__assert_fail@plt+0x3314>
   14660:	bl	11204 <__errno_location@plt>
   14664:	mov	r3, #22
   14668:	str	r3, [r0]
   1466c:	mov	r0, #0
   14670:	pop	{r4, r5, r6, r7, r8, pc}
   14674:	mov	r5, r0
   14678:	ldr	r4, [r0]
   1467c:	mov	r7, r1
   14680:	bl	11204 <__errno_location@plt>
   14684:	mov	r6, r0
   14688:	str	r8, [r0]
   1468c:	ldr	r0, [r5, #48]	; 0x30
   14690:	ands	r0, r0, #8192	; 0x2000
   14694:	bne	1466c <__assert_fail@plt+0x330c>
   14698:	ldrh	r3, [r4, #56]	; 0x38
   1469c:	cmp	r3, #9
   146a0:	bne	146ac <__assert_fail@plt+0x334c>
   146a4:	ldr	r0, [r4, #8]
   146a8:	pop	{r4, r5, r6, r7, r8, pc}
   146ac:	cmp	r3, #1
   146b0:	popne	{r4, r5, r6, r7, r8, pc}
   146b4:	ldr	r0, [r5, #4]
   146b8:	cmp	r0, #0
   146bc:	beq	146c4 <__assert_fail@plt+0x3364>
   146c0:	bl	12db8 <__assert_fail@plt+0x1a58>
   146c4:	cmp	r7, #4096	; 0x1000
   146c8:	moveq	r8, #2
   146cc:	ldreq	r3, [r5, #48]	; 0x30
   146d0:	movne	r8, #1
   146d4:	orreq	r3, r3, #4096	; 0x1000
   146d8:	streq	r3, [r5, #48]	; 0x30
   146dc:	ldr	r3, [r4, #48]	; 0x30
   146e0:	cmp	r3, #0
   146e4:	bne	14704 <__assert_fail@plt+0x33a4>
   146e8:	ldr	r3, [r4, #24]
   146ec:	ldrb	r3, [r3]
   146f0:	cmp	r3, #47	; 0x2f
   146f4:	beq	14704 <__assert_fail@plt+0x33a4>
   146f8:	ldr	r0, [r5, #48]	; 0x30
   146fc:	ands	r4, r0, #4
   14700:	beq	14718 <__assert_fail@plt+0x33b8>
   14704:	mov	r1, r8
   14708:	mov	r0, r5
   1470c:	bl	13410 <__assert_fail@plt+0x20b0>
   14710:	str	r0, [r5, #4]
   14714:	pop	{r4, r5, r6, r7, r8, pc}
   14718:	ldr	r1, [pc, #116]	; 14794 <__assert_fail@plt+0x3434>
   1471c:	mov	r0, r5
   14720:	bl	12d74 <__assert_fail@plt+0x1a14>
   14724:	subs	r7, r0, #0
   14728:	strlt	r4, [r5, #4]
   1472c:	blt	1466c <__assert_fail@plt+0x330c>
   14730:	mov	r1, r8
   14734:	mov	r0, r5
   14738:	bl	13410 <__assert_fail@plt+0x20b0>
   1473c:	str	r0, [r5, #4]
   14740:	ldr	r0, [r5, #48]	; 0x30
   14744:	ands	r4, r0, #512	; 0x200
   14748:	beq	14764 <__assert_fail@plt+0x3404>
   1474c:	mov	r2, #1
   14750:	mov	r1, r7
   14754:	mov	r0, r5
   14758:	bl	12f54 <__assert_fail@plt+0x1bf4>
   1475c:	ldr	r0, [r5, #4]
   14760:	pop	{r4, r5, r6, r7, r8, pc}
   14764:	mov	r0, r7
   14768:	bl	112c4 <fchdir@plt>
   1476c:	cmp	r0, #0
   14770:	beq	14788 <__assert_fail@plt+0x3428>
   14774:	ldr	r5, [r6]
   14778:	mov	r0, r7
   1477c:	bl	11324 <close@plt>
   14780:	str	r5, [r6]
   14784:	b	1466c <__assert_fail@plt+0x330c>
   14788:	mov	r0, r7
   1478c:	bl	11324 <close@plt>
   14790:	b	1475c <__assert_fail@plt+0x33fc>
   14794:	andeq	r9, r1, sp, lsl r8
   14798:	push	{r4, lr}
   1479c:	ror	r0, r0, #3
   147a0:	bl	18528 <__assert_fail@plt+0x71c8>
   147a4:	mov	r0, r1
   147a8:	pop	{r4, pc}
   147ac:	sub	r0, r1, r0
   147b0:	clz	r0, r0
   147b4:	lsr	r0, r0, #5
   147b8:	bx	lr
   147bc:	push	{r4, lr}
   147c0:	mov	r4, r0
   147c4:	mov	r0, r1
   147c8:	ldr	r3, [r4, #24]
   147cc:	ldr	r1, [r4, #8]
   147d0:	blx	r3
   147d4:	ldr	r3, [r4, #8]
   147d8:	cmp	r0, r3
   147dc:	bcc	147e4 <__assert_fail@plt+0x3484>
   147e0:	bl	11318 <abort@plt>
   147e4:	ldr	r3, [r4]
   147e8:	add	r0, r3, r0, lsl #3
   147ec:	pop	{r4, pc}
   147f0:	push	{r4, r5, r6, r7, r8, lr}
   147f4:	mov	r6, r1
   147f8:	mov	r8, r2
   147fc:	mov	r5, r0
   14800:	mov	r7, r3
   14804:	bl	147bc <__assert_fail@plt+0x345c>
   14808:	str	r0, [r8]
   1480c:	ldr	r1, [r0]
   14810:	cmp	r1, #0
   14814:	bne	14824 <__assert_fail@plt+0x34c4>
   14818:	mov	r2, #0
   1481c:	mov	r0, r2
   14820:	pop	{r4, r5, r6, r7, r8, pc}
   14824:	cmp	r6, r1
   14828:	mov	r4, r0
   1482c:	bne	1486c <__assert_fail@plt+0x350c>
   14830:	cmp	r7, #0
   14834:	ldr	r2, [r4]
   14838:	beq	1481c <__assert_fail@plt+0x34bc>
   1483c:	ldr	r3, [r4, #4]
   14840:	cmp	r3, #0
   14844:	streq	r3, [r4]
   14848:	beq	1481c <__assert_fail@plt+0x34bc>
   1484c:	ldm	r3, {r0, r1}
   14850:	stm	r4, {r0, r1}
   14854:	mov	r1, #0
   14858:	str	r1, [r3]
   1485c:	ldr	r1, [r5, #36]	; 0x24
   14860:	str	r1, [r3, #4]
   14864:	str	r3, [r5, #36]	; 0x24
   14868:	b	1481c <__assert_fail@plt+0x34bc>
   1486c:	ldr	r3, [r5, #28]
   14870:	mov	r0, r6
   14874:	blx	r3
   14878:	cmp	r0, #0
   1487c:	bne	14830 <__assert_fail@plt+0x34d0>
   14880:	ldr	r3, [r4, #4]
   14884:	cmp	r3, #0
   14888:	beq	14818 <__assert_fail@plt+0x34b8>
   1488c:	ldr	r1, [r3]
   14890:	cmp	r6, r1
   14894:	bne	148b4 <__assert_fail@plt+0x3554>
   14898:	ldr	r3, [r4, #4]
   1489c:	cmp	r7, #0
   148a0:	ldr	r2, [r3]
   148a4:	beq	1481c <__assert_fail@plt+0x34bc>
   148a8:	ldr	r1, [r3, #4]
   148ac:	str	r1, [r4, #4]
   148b0:	b	14854 <__assert_fail@plt+0x34f4>
   148b4:	ldr	r3, [r5, #28]
   148b8:	mov	r0, r6
   148bc:	blx	r3
   148c0:	cmp	r0, #0
   148c4:	bne	14898 <__assert_fail@plt+0x3538>
   148c8:	ldr	r4, [r4, #4]
   148cc:	b	14880 <__assert_fail@plt+0x3520>
   148d0:	push	{r4, r5, r6, lr}
   148d4:	ldrb	r4, [r1, #16]
   148d8:	cmp	r4, #0
   148dc:	bne	14908 <__assert_fail@plt+0x35a8>
   148e0:	vmov	s15, r0
   148e4:	vldr	s14, [r1, #8]
   148e8:	vcvt.f32.u32	s13, s15
   148ec:	vdiv.f32	s15, s13, s14
   148f0:	vldr	s14, [pc, #156]	; 14994 <__assert_fail@plt+0x3634>
   148f4:	vcmpe.f32	s15, s14
   148f8:	vmrs	APSR_nzcv, fpscr
   148fc:	bge	14960 <__assert_fail@plt+0x3600>
   14900:	vcvt.u32.f32	s15, s15
   14904:	vmov	r0, s15
   14908:	cmp	r0, #10
   1490c:	movcc	r0, #10
   14910:	orr	r4, r0, #1
   14914:	cmn	r4, #1
   14918:	beq	14940 <__assert_fail@plt+0x35e0>
   1491c:	mov	r6, #9
   14920:	mov	r5, #3
   14924:	cmp	r4, r6
   14928:	bhi	14970 <__assert_fail@plt+0x3610>
   1492c:	mov	r1, r5
   14930:	mov	r0, r4
   14934:	bl	18528 <__assert_fail@plt+0x71c8>
   14938:	cmp	r1, #0
   1493c:	beq	14968 <__assert_fail@plt+0x3608>
   14940:	lsrs	r3, r4, #30
   14944:	movne	r3, #1
   14948:	moveq	r3, #0
   1494c:	tst	r4, #536870912	; 0x20000000
   14950:	bne	1495c <__assert_fail@plt+0x35fc>
   14954:	cmp	r3, #0
   14958:	beq	14960 <__assert_fail@plt+0x3600>
   1495c:	mov	r4, #0
   14960:	mov	r0, r4
   14964:	pop	{r4, r5, r6, pc}
   14968:	add	r4, r4, #2
   1496c:	b	14914 <__assert_fail@plt+0x35b4>
   14970:	mov	r1, r5
   14974:	mov	r0, r4
   14978:	bl	18528 <__assert_fail@plt+0x71c8>
   1497c:	cmp	r1, #0
   14980:	beq	1492c <__assert_fail@plt+0x35cc>
   14984:	add	r3, r5, #1
   14988:	add	r5, r5, #2
   1498c:	add	r6, r6, r3, lsl #2
   14990:	b	14924 <__assert_fail@plt+0x35c4>
   14994:	svcmi	0x00800000
   14998:	ldr	r3, [r0]
   1499c:	ldr	r2, [pc, #160]	; 14a44 <__assert_fail@plt+0x36e4>
   149a0:	cmp	r3, r2
   149a4:	beq	14a2c <__assert_fail@plt+0x36cc>
   149a8:	vldr	s14, [r3, #8]
   149ac:	vldr	s13, [pc, #128]	; 14a34 <__assert_fail@plt+0x36d4>
   149b0:	vcmpe.f32	s14, s13
   149b4:	vmrs	APSR_nzcv, fpscr
   149b8:	ble	14a20 <__assert_fail@plt+0x36c0>
   149bc:	vldr	s15, [pc, #116]	; 14a38 <__assert_fail@plt+0x36d8>
   149c0:	vcmpe.f32	s14, s15
   149c4:	vmrs	APSR_nzcv, fpscr
   149c8:	bpl	14a20 <__assert_fail@plt+0x36c0>
   149cc:	vldr	s12, [r3, #12]
   149d0:	vldr	s15, [pc, #100]	; 14a3c <__assert_fail@plt+0x36dc>
   149d4:	vcmpe.f32	s12, s15
   149d8:	vmrs	APSR_nzcv, fpscr
   149dc:	ble	14a20 <__assert_fail@plt+0x36c0>
   149e0:	vldr	s15, [r3]
   149e4:	vcmpe.f32	s15, #0.0
   149e8:	vmrs	APSR_nzcv, fpscr
   149ec:	blt	14a20 <__assert_fail@plt+0x36c0>
   149f0:	vadd.f32	s15, s15, s13
   149f4:	vldr	s13, [r3, #4]
   149f8:	vcmpe.f32	s15, s13
   149fc:	vmrs	APSR_nzcv, fpscr
   14a00:	bpl	14a20 <__assert_fail@plt+0x36c0>
   14a04:	vldr	s12, [pc, #52]	; 14a40 <__assert_fail@plt+0x36e0>
   14a08:	vcmpe.f32	s13, s12
   14a0c:	vmrs	APSR_nzcv, fpscr
   14a10:	bhi	14a20 <__assert_fail@plt+0x36c0>
   14a14:	vcmpe.f32	s14, s15
   14a18:	vmrs	APSR_nzcv, fpscr
   14a1c:	bgt	14a2c <__assert_fail@plt+0x36cc>
   14a20:	str	r2, [r0]
   14a24:	mov	r0, #0
   14a28:	bx	lr
   14a2c:	mov	r0, #1
   14a30:	bx	lr
   14a34:	stclcc	12, cr12, [ip, #820]	; 0x334
   14a38:	svccc	0x00666666
   14a3c:	svccc	0x008ccccd
   14a40:	svccc	0x00800000
   14a44:	andeq	r9, r1, r0, lsr #16
   14a48:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a4c:	mov	r5, r0
   14a50:	ldr	r4, [r1]
   14a54:	mov	r7, r1
   14a58:	mov	r8, r2
   14a5c:	add	r4, r4, #8
   14a60:	mov	r9, #0
   14a64:	mov	sl, #8
   14a68:	ldr	r2, [r7, #4]
   14a6c:	sub	r3, r4, #8
   14a70:	cmp	r2, r3
   14a74:	bhi	14a84 <__assert_fail@plt+0x3724>
   14a78:	mov	r8, #1
   14a7c:	mov	r0, r8
   14a80:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a84:	ldr	r3, [r4, #-8]
   14a88:	cmp	r3, #0
   14a8c:	ldrne	r6, [r4, #-4]
   14a90:	bne	14ae8 <__assert_fail@plt+0x3788>
   14a94:	add	r4, r4, #8
   14a98:	b	14a68 <__assert_fail@plt+0x3708>
   14a9c:	ldr	fp, [r6]
   14aa0:	mov	r0, r5
   14aa4:	mov	r1, fp
   14aa8:	bl	147bc <__assert_fail@plt+0x345c>
   14aac:	ldr	r1, [r6, #4]
   14ab0:	ldr	r2, [r0]
   14ab4:	cmp	r2, #0
   14ab8:	streq	fp, [r0]
   14abc:	ldreq	r3, [r5, #12]
   14ac0:	ldrne	r3, [r0, #4]
   14ac4:	addeq	r3, r3, #1
   14ac8:	streq	r3, [r5, #12]
   14acc:	streq	r2, [r6]
   14ad0:	ldreq	r3, [r5, #36]	; 0x24
   14ad4:	strne	r3, [r6, #4]
   14ad8:	streq	r3, [r6, #4]
   14adc:	strne	r6, [r0, #4]
   14ae0:	streq	r6, [r5, #36]	; 0x24
   14ae4:	mov	r6, r1
   14ae8:	cmp	r6, #0
   14aec:	bne	14a9c <__assert_fail@plt+0x373c>
   14af0:	cmp	r8, #0
   14af4:	ldr	fp, [r4, #-8]
   14af8:	str	r6, [r4, #-4]
   14afc:	bne	14a94 <__assert_fail@plt+0x3734>
   14b00:	mov	r1, fp
   14b04:	mov	r0, r5
   14b08:	bl	147bc <__assert_fail@plt+0x345c>
   14b0c:	ldr	r3, [r0]
   14b10:	mov	r6, r0
   14b14:	cmp	r3, #0
   14b18:	beq	14b64 <__assert_fail@plt+0x3804>
   14b1c:	ldr	r0, [r5, #36]	; 0x24
   14b20:	cmp	r0, #0
   14b24:	ldrne	r3, [r0, #4]
   14b28:	strne	r3, [r5, #36]	; 0x24
   14b2c:	bne	14b40 <__assert_fail@plt+0x37e0>
   14b30:	mov	r0, sl
   14b34:	bl	17c24 <__assert_fail@plt+0x68c4>
   14b38:	cmp	r0, #0
   14b3c:	beq	14a7c <__assert_fail@plt+0x371c>
   14b40:	ldr	r3, [r6, #4]
   14b44:	str	fp, [r0]
   14b48:	str	r3, [r0, #4]
   14b4c:	str	r0, [r6, #4]
   14b50:	ldr	r3, [r7, #12]
   14b54:	str	r9, [r4, #-8]
   14b58:	sub	r3, r3, #1
   14b5c:	str	r3, [r7, #12]
   14b60:	b	14a94 <__assert_fail@plt+0x3734>
   14b64:	ldr	r3, [r5, #12]
   14b68:	str	fp, [r0]
   14b6c:	add	r3, r3, #1
   14b70:	str	r3, [r5, #12]
   14b74:	b	14b50 <__assert_fail@plt+0x37f0>
   14b78:	ldr	r0, [r0, #8]
   14b7c:	bx	lr
   14b80:	ldr	r0, [r0, #12]
   14b84:	bx	lr
   14b88:	ldr	r0, [r0, #16]
   14b8c:	bx	lr
   14b90:	ldm	r0, {r3, ip}
   14b94:	mov	r0, #0
   14b98:	cmp	r3, ip
   14b9c:	bcc	14ba4 <__assert_fail@plt+0x3844>
   14ba0:	bx	lr
   14ba4:	ldr	r2, [r3]
   14ba8:	cmp	r2, #0
   14bac:	movne	r1, r3
   14bb0:	movne	r2, #1
   14bb4:	bne	14bc4 <__assert_fail@plt+0x3864>
   14bb8:	add	r3, r3, #8
   14bbc:	b	14b98 <__assert_fail@plt+0x3838>
   14bc0:	add	r2, r2, #1
   14bc4:	ldr	r1, [r1, #4]
   14bc8:	cmp	r1, #0
   14bcc:	bne	14bc0 <__assert_fail@plt+0x3860>
   14bd0:	cmp	r0, r2
   14bd4:	movcc	r0, r2
   14bd8:	b	14bb8 <__assert_fail@plt+0x3858>
   14bdc:	push	{lr}		; (str lr, [sp, #-4]!)
   14be0:	mov	r3, #0
   14be4:	ldm	r0, {r2, lr}
   14be8:	mov	r1, r3
   14bec:	cmp	r2, lr
   14bf0:	bcc	14c14 <__assert_fail@plt+0x38b4>
   14bf4:	ldr	r2, [r0, #12]
   14bf8:	cmp	r1, r2
   14bfc:	ldreq	r0, [r0, #16]
   14c00:	subeq	r0, r0, r3
   14c04:	clzeq	r0, r0
   14c08:	lsreq	r0, r0, #5
   14c0c:	movne	r0, #0
   14c10:	pop	{pc}		; (ldr pc, [sp], #4)
   14c14:	ldr	ip, [r2]
   14c18:	cmp	ip, #0
   14c1c:	addne	r1, r1, #1
   14c20:	addne	r3, r3, #1
   14c24:	movne	ip, r2
   14c28:	bne	14c38 <__assert_fail@plt+0x38d8>
   14c2c:	add	r2, r2, #8
   14c30:	b	14bec <__assert_fail@plt+0x388c>
   14c34:	add	r3, r3, #1
   14c38:	ldr	ip, [ip, #4]
   14c3c:	cmp	ip, #0
   14c40:	bne	14c34 <__assert_fail@plt+0x38d4>
   14c44:	b	14c2c <__assert_fail@plt+0x38cc>
   14c48:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14c4c:	mov	r4, r1
   14c50:	ldr	r5, [r0, #8]
   14c54:	ldr	r7, [r0, #12]
   14c58:	mov	r6, r0
   14c5c:	bl	14b90 <__assert_fail@plt+0x3830>
   14c60:	ldr	r3, [r6, #16]
   14c64:	ldr	r2, [pc, #124]	; 14ce8 <__assert_fail@plt+0x3988>
   14c68:	mov	r1, #1
   14c6c:	mov	r8, r0
   14c70:	mov	r0, r4
   14c74:	bl	1124c <__fprintf_chk@plt>
   14c78:	mov	r3, r5
   14c7c:	ldr	r2, [pc, #104]	; 14cec <__assert_fail@plt+0x398c>
   14c80:	mov	r1, #1
   14c84:	mov	r0, r4
   14c88:	bl	1124c <__fprintf_chk@plt>
   14c8c:	vmov	s15, r7
   14c90:	mov	r3, r7
   14c94:	ldr	r2, [pc, #84]	; 14cf0 <__assert_fail@plt+0x3990>
   14c98:	mov	r1, #1
   14c9c:	vcvt.f64.u32	d6, s15
   14ca0:	vldr	d7, [pc, #56]	; 14ce0 <__assert_fail@plt+0x3980>
   14ca4:	mov	r0, r4
   14ca8:	vmul.f64	d6, d6, d7
   14cac:	vmov	s15, r5
   14cb0:	vcvt.f64.u32	d7, s15
   14cb4:	vdiv.f64	d5, d6, d7
   14cb8:	vstr	d5, [sp]
   14cbc:	bl	1124c <__fprintf_chk@plt>
   14cc0:	mov	r3, r8
   14cc4:	ldr	r2, [pc, #40]	; 14cf4 <__assert_fail@plt+0x3994>
   14cc8:	mov	r1, #1
   14ccc:	mov	r0, r4
   14cd0:	add	sp, sp, #8
   14cd4:	pop	{r4, r5, r6, r7, r8, lr}
   14cd8:	b	1124c <__fprintf_chk@plt>
   14cdc:	nop			; (mov r0, r0)
   14ce0:	andeq	r0, r0, r0
   14ce4:	subsmi	r0, r9, r0
   14ce8:	andeq	r9, r1, r4, lsr r8
   14cec:	andeq	r9, r1, ip, asr #16
   14cf0:	andeq	r9, r1, r4, ror #16
   14cf4:	andeq	r9, r1, r5, lsl #17
   14cf8:	push	{r4, r5, r6, lr}
   14cfc:	mov	r6, r0
   14d00:	mov	r5, r1
   14d04:	bl	147bc <__assert_fail@plt+0x345c>
   14d08:	ldr	r3, [r0]
   14d0c:	cmp	r3, #0
   14d10:	movne	r4, r0
   14d14:	bne	14d40 <__assert_fail@plt+0x39e0>
   14d18:	mov	r0, #0
   14d1c:	pop	{r4, r5, r6, pc}
   14d20:	ldr	r3, [r6, #28]
   14d24:	mov	r0, r5
   14d28:	blx	r3
   14d2c:	cmp	r0, #0
   14d30:	bne	14d4c <__assert_fail@plt+0x39ec>
   14d34:	ldr	r4, [r4, #4]
   14d38:	cmp	r4, #0
   14d3c:	beq	14d18 <__assert_fail@plt+0x39b8>
   14d40:	ldr	r1, [r4]
   14d44:	cmp	r5, r1
   14d48:	bne	14d20 <__assert_fail@plt+0x39c0>
   14d4c:	ldr	r0, [r4]
   14d50:	pop	{r4, r5, r6, pc}
   14d54:	ldr	r3, [r0, #16]
   14d58:	cmp	r3, #0
   14d5c:	beq	14d8c <__assert_fail@plt+0x3a2c>
   14d60:	ldr	r3, [r0]
   14d64:	ldr	r2, [r0, #4]
   14d68:	cmp	r3, r2
   14d6c:	bcc	14d78 <__assert_fail@plt+0x3a18>
   14d70:	push	{r4, lr}
   14d74:	bl	11318 <abort@plt>
   14d78:	ldr	r0, [r3]
   14d7c:	cmp	r0, #0
   14d80:	bne	14d90 <__assert_fail@plt+0x3a30>
   14d84:	add	r3, r3, #8
   14d88:	b	14d68 <__assert_fail@plt+0x3a08>
   14d8c:	mov	r0, r3
   14d90:	bx	lr
   14d94:	push	{r4, r5, r6, lr}
   14d98:	mov	r4, r0
   14d9c:	mov	r5, r1
   14da0:	bl	147bc <__assert_fail@plt+0x345c>
   14da4:	mov	r2, r0
   14da8:	mov	r3, r0
   14dac:	ldr	r1, [r3]
   14db0:	ldr	r3, [r3, #4]
   14db4:	cmp	r5, r1
   14db8:	bne	14dcc <__assert_fail@plt+0x3a6c>
   14dbc:	cmp	r3, #0
   14dc0:	beq	14dcc <__assert_fail@plt+0x3a6c>
   14dc4:	ldr	r0, [r3]
   14dc8:	pop	{r4, r5, r6, pc}
   14dcc:	cmp	r3, #0
   14dd0:	bne	14dac <__assert_fail@plt+0x3a4c>
   14dd4:	ldr	r3, [r4, #4]
   14dd8:	add	r2, r2, #8
   14ddc:	cmp	r2, r3
   14de0:	bcc	14dec <__assert_fail@plt+0x3a8c>
   14de4:	mov	r0, #0
   14de8:	pop	{r4, r5, r6, pc}
   14dec:	ldr	r0, [r2]
   14df0:	cmp	r0, #0
   14df4:	beq	14dd8 <__assert_fail@plt+0x3a78>
   14df8:	pop	{r4, r5, r6, pc}
   14dfc:	ldr	ip, [r0]
   14e00:	mov	r3, #0
   14e04:	push	{r4, r5, lr}
   14e08:	ldr	lr, [r0, #4]
   14e0c:	cmp	ip, lr
   14e10:	bcc	14e1c <__assert_fail@plt+0x3abc>
   14e14:	mov	r0, r3
   14e18:	pop	{r4, r5, pc}
   14e1c:	ldr	lr, [ip]
   14e20:	cmp	lr, #0
   14e24:	beq	14e50 <__assert_fail@plt+0x3af0>
   14e28:	add	r4, r1, r3, lsl #2
   14e2c:	mov	lr, ip
   14e30:	cmp	r2, r3
   14e34:	bls	14e14 <__assert_fail@plt+0x3ab4>
   14e38:	ldr	r5, [lr]
   14e3c:	add	r3, r3, #1
   14e40:	str	r5, [r4], #4
   14e44:	ldr	lr, [lr, #4]
   14e48:	cmp	lr, #0
   14e4c:	bne	14e30 <__assert_fail@plt+0x3ad0>
   14e50:	add	ip, ip, #8
   14e54:	b	14e08 <__assert_fail@plt+0x3aa8>
   14e58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e5c:	mov	r7, r0
   14e60:	ldr	r4, [r0]
   14e64:	mov	r8, r1
   14e68:	mov	r9, r2
   14e6c:	mov	r6, #0
   14e70:	ldr	r3, [r7, #4]
   14e74:	cmp	r4, r3
   14e78:	bcc	14e84 <__assert_fail@plt+0x3b24>
   14e7c:	mov	r0, r6
   14e80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e84:	ldr	r3, [r4]
   14e88:	cmp	r3, #0
   14e8c:	beq	14eb8 <__assert_fail@plt+0x3b58>
   14e90:	mov	r5, r4
   14e94:	mov	r1, r9
   14e98:	ldr	r0, [r5]
   14e9c:	blx	r8
   14ea0:	cmp	r0, #0
   14ea4:	beq	14e7c <__assert_fail@plt+0x3b1c>
   14ea8:	ldr	r5, [r5, #4]
   14eac:	add	r6, r6, #1
   14eb0:	cmp	r5, #0
   14eb4:	bne	14e94 <__assert_fail@plt+0x3b34>
   14eb8:	add	r4, r4, #8
   14ebc:	b	14e70 <__assert_fail@plt+0x3b10>
   14ec0:	push	{r4, r5, r6, lr}
   14ec4:	sub	r4, r0, #1
   14ec8:	mov	r5, r1
   14ecc:	mov	r0, #0
   14ed0:	mov	r6, #31
   14ed4:	ldrb	r3, [r4, #1]!
   14ed8:	cmp	r3, #0
   14edc:	bne	14ee4 <__assert_fail@plt+0x3b84>
   14ee0:	pop	{r4, r5, r6, pc}
   14ee4:	mov	r1, r5
   14ee8:	mla	r0, r6, r0, r3
   14eec:	bl	18528 <__assert_fail@plt+0x71c8>
   14ef0:	mov	r0, r1
   14ef4:	b	14ed4 <__assert_fail@plt+0x3b74>
   14ef8:	push	{lr}		; (str lr, [sp, #-4]!)
   14efc:	mov	ip, r0
   14f00:	ldr	lr, [pc, #16]	; 14f18 <__assert_fail@plt+0x3bb8>
   14f04:	ldm	lr!, {r0, r1, r2, r3}
   14f08:	stmia	ip!, {r0, r1, r2, r3}
   14f0c:	ldr	r3, [lr]
   14f10:	str	r3, [ip]
   14f14:	pop	{pc}		; (ldr pc, [sp], #4)
   14f18:	andeq	r9, r1, r0, lsr #16
   14f1c:	cmp	r2, #0
   14f20:	push	{r4, r5, r6, r7, r8, lr}
   14f24:	mov	r8, r0
   14f28:	ldr	r7, [pc, #176]	; 14fe0 <__assert_fail@plt+0x3c80>
   14f2c:	mov	r0, #40	; 0x28
   14f30:	movne	r7, r2
   14f34:	cmp	r3, #0
   14f38:	mov	r5, r1
   14f3c:	ldr	r6, [pc, #160]	; 14fe4 <__assert_fail@plt+0x3c84>
   14f40:	movne	r6, r3
   14f44:	bl	17c24 <__assert_fail@plt+0x68c4>
   14f48:	subs	r4, r0, #0
   14f4c:	beq	14fc8 <__assert_fail@plt+0x3c68>
   14f50:	ldr	r3, [pc, #144]	; 14fe8 <__assert_fail@plt+0x3c88>
   14f54:	cmp	r5, #0
   14f58:	mov	r0, r4
   14f5c:	moveq	r5, r3
   14f60:	str	r5, [r0, #20]!
   14f64:	bl	14998 <__assert_fail@plt+0x3638>
   14f68:	cmp	r0, #0
   14f6c:	beq	14fd0 <__assert_fail@plt+0x3c70>
   14f70:	mov	r1, r5
   14f74:	mov	r0, r8
   14f78:	bl	148d0 <__assert_fail@plt+0x3570>
   14f7c:	cmp	r0, #0
   14f80:	str	r0, [r4, #8]
   14f84:	beq	14fd0 <__assert_fail@plt+0x3c70>
   14f88:	mov	r1, #8
   14f8c:	bl	17bdc <__assert_fail@plt+0x687c>
   14f90:	cmp	r0, #0
   14f94:	str	r0, [r4]
   14f98:	beq	14fd0 <__assert_fail@plt+0x3c70>
   14f9c:	ldr	r3, [r4, #8]
   14fa0:	ldr	r2, [sp, #24]
   14fa4:	str	r7, [r4, #24]
   14fa8:	add	r0, r0, r3, lsl #3
   14fac:	mov	r3, #0
   14fb0:	str	r0, [r4, #4]
   14fb4:	str	r3, [r4, #12]
   14fb8:	str	r3, [r4, #16]
   14fbc:	str	r6, [r4, #28]
   14fc0:	str	r2, [r4, #32]
   14fc4:	str	r3, [r4, #36]	; 0x24
   14fc8:	mov	r0, r4
   14fcc:	pop	{r4, r5, r6, r7, r8, pc}
   14fd0:	mov	r0, r4
   14fd4:	bl	129e4 <__assert_fail@plt+0x1684>
   14fd8:	mov	r4, #0
   14fdc:	b	14fc8 <__assert_fail@plt+0x3c68>
   14fe0:	muleq	r1, r8, r7
   14fe4:	andeq	r4, r1, ip, lsr #15
   14fe8:	andeq	r9, r1, r0, lsr #16
   14fec:	push	{r4, r5, r6, r7, r8, lr}
   14ff0:	mov	r5, r0
   14ff4:	ldr	r4, [r0]
   14ff8:	mov	r7, #0
   14ffc:	add	r4, r4, #8
   15000:	ldr	r2, [r5, #4]
   15004:	sub	r3, r4, #8
   15008:	cmp	r2, r3
   1500c:	bhi	15020 <__assert_fail@plt+0x3cc0>
   15010:	mov	r3, #0
   15014:	str	r3, [r5, #12]
   15018:	str	r3, [r5, #16]
   1501c:	pop	{r4, r5, r6, r7, r8, pc}
   15020:	ldr	r3, [r4, #-8]
   15024:	cmp	r3, #0
   15028:	ldrne	r6, [r4, #-4]
   1502c:	bne	15060 <__assert_fail@plt+0x3d00>
   15030:	add	r4, r4, #8
   15034:	b	15000 <__assert_fail@plt+0x3ca0>
   15038:	cmp	r3, #0
   1503c:	beq	15048 <__assert_fail@plt+0x3ce8>
   15040:	ldr	r0, [r6]
   15044:	blx	r3
   15048:	ldr	r3, [r6, #4]
   1504c:	ldr	r2, [r5, #36]	; 0x24
   15050:	str	r7, [r6]
   15054:	str	r2, [r6, #4]
   15058:	str	r6, [r5, #36]	; 0x24
   1505c:	mov	r6, r3
   15060:	cmp	r6, #0
   15064:	ldr	r3, [r5, #32]
   15068:	bne	15038 <__assert_fail@plt+0x3cd8>
   1506c:	cmp	r3, #0
   15070:	beq	1507c <__assert_fail@plt+0x3d1c>
   15074:	ldr	r0, [r4, #-8]
   15078:	blx	r3
   1507c:	str	r7, [r4, #-8]
   15080:	str	r7, [r4, #-4]
   15084:	b	15030 <__assert_fail@plt+0x3cd0>
   15088:	ldr	r3, [r0, #32]
   1508c:	push	{r4, r5, r6, lr}
   15090:	cmp	r3, #0
   15094:	mov	r4, r0
   15098:	bne	150cc <__assert_fail@plt+0x3d6c>
   1509c:	ldr	r5, [r4]
   150a0:	ldr	r3, [r4, #4]
   150a4:	cmp	r5, r3
   150a8:	bcc	1511c <__assert_fail@plt+0x3dbc>
   150ac:	ldr	r0, [r4, #36]	; 0x24
   150b0:	cmp	r0, #0
   150b4:	bne	1513c <__assert_fail@plt+0x3ddc>
   150b8:	ldr	r0, [r4]
   150bc:	bl	129e4 <__assert_fail@plt+0x1684>
   150c0:	mov	r0, r4
   150c4:	pop	{r4, r5, r6, lr}
   150c8:	b	129e4 <__assert_fail@plt+0x1684>
   150cc:	ldr	r3, [r0, #16]
   150d0:	cmp	r3, #0
   150d4:	ldrne	r5, [r0]
   150d8:	beq	1509c <__assert_fail@plt+0x3d3c>
   150dc:	ldr	r3, [r4, #4]
   150e0:	cmp	r5, r3
   150e4:	bcs	1509c <__assert_fail@plt+0x3d3c>
   150e8:	ldr	r3, [r5]
   150ec:	cmp	r3, #0
   150f0:	movne	r6, r5
   150f4:	bne	15100 <__assert_fail@plt+0x3da0>
   150f8:	add	r5, r5, #8
   150fc:	b	150dc <__assert_fail@plt+0x3d7c>
   15100:	ldr	r0, [r6]
   15104:	ldr	r3, [r4, #32]
   15108:	blx	r3
   1510c:	ldr	r6, [r6, #4]
   15110:	cmp	r6, #0
   15114:	bne	15100 <__assert_fail@plt+0x3da0>
   15118:	b	150f8 <__assert_fail@plt+0x3d98>
   1511c:	ldr	r0, [r5, #4]
   15120:	cmp	r0, #0
   15124:	addeq	r5, r5, #8
   15128:	beq	150a0 <__assert_fail@plt+0x3d40>
   1512c:	ldr	r6, [r0, #4]
   15130:	bl	129e4 <__assert_fail@plt+0x1684>
   15134:	mov	r0, r6
   15138:	b	15120 <__assert_fail@plt+0x3dc0>
   1513c:	ldr	r5, [r0, #4]
   15140:	bl	129e4 <__assert_fail@plt+0x1684>
   15144:	mov	r0, r5
   15148:	b	150b0 <__assert_fail@plt+0x3d50>
   1514c:	push	{r4, r5, lr}
   15150:	mov	r4, r0
   15154:	sub	sp, sp, #44	; 0x2c
   15158:	mov	r0, r1
   1515c:	ldr	r1, [r4, #20]
   15160:	bl	148d0 <__assert_fail@plt+0x3570>
   15164:	subs	r5, r0, #0
   15168:	bne	1517c <__assert_fail@plt+0x3e1c>
   1516c:	mov	r5, #0
   15170:	mov	r0, r5
   15174:	add	sp, sp, #44	; 0x2c
   15178:	pop	{r4, r5, pc}
   1517c:	ldr	r3, [r4, #8]
   15180:	cmp	r5, r3
   15184:	beq	1526c <__assert_fail@plt+0x3f0c>
   15188:	mov	r1, #8
   1518c:	bl	17bdc <__assert_fail@plt+0x687c>
   15190:	cmp	r0, #0
   15194:	str	r0, [sp]
   15198:	beq	1516c <__assert_fail@plt+0x3e0c>
   1519c:	ldr	r3, [r4, #20]
   151a0:	add	r0, r0, r5, lsl #3
   151a4:	str	r3, [sp, #20]
   151a8:	ldr	r3, [r4, #24]
   151ac:	mov	r2, #0
   151b0:	str	r3, [sp, #24]
   151b4:	ldr	r3, [r4, #28]
   151b8:	str	r0, [sp, #4]
   151bc:	str	r3, [sp, #28]
   151c0:	ldr	r3, [r4, #32]
   151c4:	mov	r1, r4
   151c8:	str	r3, [sp, #32]
   151cc:	ldr	r3, [r4, #36]	; 0x24
   151d0:	mov	r0, sp
   151d4:	str	r5, [sp, #8]
   151d8:	str	r2, [sp, #12]
   151dc:	str	r2, [sp, #16]
   151e0:	str	r3, [sp, #36]	; 0x24
   151e4:	bl	14a48 <__assert_fail@plt+0x36e8>
   151e8:	subs	r5, r0, #0
   151ec:	beq	15224 <__assert_fail@plt+0x3ec4>
   151f0:	ldr	r0, [r4]
   151f4:	bl	129e4 <__assert_fail@plt+0x1684>
   151f8:	ldr	r3, [sp]
   151fc:	str	r3, [r4]
   15200:	ldr	r3, [sp, #4]
   15204:	str	r3, [r4, #4]
   15208:	ldr	r3, [sp, #8]
   1520c:	str	r3, [r4, #8]
   15210:	ldr	r3, [sp, #12]
   15214:	str	r3, [r4, #12]
   15218:	ldr	r3, [sp, #36]	; 0x24
   1521c:	str	r3, [r4, #36]	; 0x24
   15220:	b	15170 <__assert_fail@plt+0x3e10>
   15224:	ldr	r3, [sp, #36]	; 0x24
   15228:	mov	r2, #1
   1522c:	str	r3, [r4, #36]	; 0x24
   15230:	mov	r1, sp
   15234:	mov	r0, r4
   15238:	bl	14a48 <__assert_fail@plt+0x36e8>
   1523c:	cmp	r0, #0
   15240:	bne	15248 <__assert_fail@plt+0x3ee8>
   15244:	bl	11318 <abort@plt>
   15248:	mov	r2, r5
   1524c:	mov	r1, sp
   15250:	mov	r0, r4
   15254:	bl	14a48 <__assert_fail@plt+0x36e8>
   15258:	cmp	r0, #0
   1525c:	beq	15244 <__assert_fail@plt+0x3ee4>
   15260:	ldr	r0, [sp]
   15264:	bl	129e4 <__assert_fail@plt+0x1684>
   15268:	b	15170 <__assert_fail@plt+0x3e10>
   1526c:	mov	r5, #1
   15270:	b	15170 <__assert_fail@plt+0x3e10>
   15274:	push	{r0, r1, r4, r5, r6, lr}
   15278:	subs	r6, r1, #0
   1527c:	bne	15284 <__assert_fail@plt+0x3f24>
   15280:	bl	11318 <abort@plt>
   15284:	mov	r5, r2
   15288:	mov	r3, #0
   1528c:	add	r2, sp, #4
   15290:	mov	r4, r0
   15294:	bl	147f0 <__assert_fail@plt+0x3490>
   15298:	cmp	r0, #0
   1529c:	beq	152b4 <__assert_fail@plt+0x3f54>
   152a0:	cmp	r5, #0
   152a4:	strne	r0, [r5]
   152a8:	movne	r0, #0
   152ac:	moveq	r0, r5
   152b0:	b	15334 <__assert_fail@plt+0x3fd4>
   152b4:	vldr	s15, [r4, #12]
   152b8:	ldr	r3, [r4, #20]
   152bc:	vcvt.f32.u32	s14, s15
   152c0:	vldr	s15, [r4, #8]
   152c4:	vldr	s13, [r3, #8]
   152c8:	vcvt.f32.u32	s15, s15
   152cc:	vmul.f32	s15, s15, s13
   152d0:	vcmpe.f32	s14, s15
   152d4:	vmrs	APSR_nzcv, fpscr
   152d8:	ble	15370 <__assert_fail@plt+0x4010>
   152dc:	add	r0, r4, #20
   152e0:	bl	14998 <__assert_fail@plt+0x3638>
   152e4:	vldr	s15, [r4, #8]
   152e8:	ldr	r3, [r4, #20]
   152ec:	vldr	s14, [r4, #12]
   152f0:	vcvt.f32.u32	s15, s15
   152f4:	vldr	s13, [r3, #8]
   152f8:	vcvt.f32.u32	s14, s14
   152fc:	vmul.f32	s12, s13, s15
   15300:	vcmpe.f32	s14, s12
   15304:	vmrs	APSR_nzcv, fpscr
   15308:	ble	15370 <__assert_fail@plt+0x4010>
   1530c:	vldr	s14, [r3, #12]
   15310:	ldrb	r2, [r3, #16]
   15314:	vmul.f32	s15, s15, s14
   15318:	cmp	r2, #0
   1531c:	vldr	s14, [pc, #200]	; 153ec <__assert_fail@plt+0x408c>
   15320:	vmuleq.f32	s15, s15, s13
   15324:	vcmpe.f32	s15, s14
   15328:	vmrs	APSR_nzcv, fpscr
   1532c:	blt	1533c <__assert_fail@plt+0x3fdc>
   15330:	mvn	r0, #0
   15334:	add	sp, sp, #8
   15338:	pop	{r4, r5, r6, pc}
   1533c:	vcvt.u32.f32	s15, s15
   15340:	mov	r0, r4
   15344:	vmov	r1, s15
   15348:	bl	1514c <__assert_fail@plt+0x3dec>
   1534c:	cmp	r0, #0
   15350:	beq	15330 <__assert_fail@plt+0x3fd0>
   15354:	mov	r3, #0
   15358:	add	r2, sp, #4
   1535c:	mov	r1, r6
   15360:	mov	r0, r4
   15364:	bl	147f0 <__assert_fail@plt+0x3490>
   15368:	cmp	r0, #0
   1536c:	bne	15280 <__assert_fail@plt+0x3f20>
   15370:	ldr	r3, [sp, #4]
   15374:	ldr	r2, [r3]
   15378:	cmp	r2, #0
   1537c:	beq	153cc <__assert_fail@plt+0x406c>
   15380:	ldr	r0, [r4, #36]	; 0x24
   15384:	cmp	r0, #0
   15388:	ldrne	r3, [r0, #4]
   1538c:	strne	r3, [r4, #36]	; 0x24
   15390:	bne	153a4 <__assert_fail@plt+0x4044>
   15394:	mov	r0, #8
   15398:	bl	17c24 <__assert_fail@plt+0x68c4>
   1539c:	cmp	r0, #0
   153a0:	beq	15330 <__assert_fail@plt+0x3fd0>
   153a4:	ldr	r3, [sp, #4]
   153a8:	str	r6, [r0]
   153ac:	ldr	r2, [r3, #4]
   153b0:	str	r2, [r0, #4]
   153b4:	str	r0, [r3, #4]
   153b8:	ldr	r3, [r4, #16]
   153bc:	add	r3, r3, #1
   153c0:	str	r3, [r4, #16]
   153c4:	mov	r0, #1
   153c8:	b	15334 <__assert_fail@plt+0x3fd4>
   153cc:	str	r6, [r3]
   153d0:	ldr	r3, [r4, #16]
   153d4:	add	r3, r3, #1
   153d8:	str	r3, [r4, #16]
   153dc:	ldr	r3, [r4, #12]
   153e0:	add	r3, r3, #1
   153e4:	str	r3, [r4, #12]
   153e8:	b	153c4 <__assert_fail@plt+0x4064>
   153ec:	svcmi	0x00800000
   153f0:	push	{r0, r1, r4, lr}
   153f4:	add	r2, sp, #4
   153f8:	mov	r4, r1
   153fc:	bl	15274 <__assert_fail@plt+0x3f14>
   15400:	cmn	r0, #1
   15404:	moveq	r0, #0
   15408:	beq	15418 <__assert_fail@plt+0x40b8>
   1540c:	cmp	r0, #0
   15410:	movne	r0, r4
   15414:	ldreq	r0, [sp, #4]
   15418:	add	sp, sp, #8
   1541c:	pop	{r4, pc}
   15420:	push	{r0, r1, r4, r5, r6, lr}
   15424:	mov	r3, #1
   15428:	add	r2, sp, #4
   1542c:	mov	r4, r0
   15430:	bl	147f0 <__assert_fail@plt+0x3490>
   15434:	subs	r5, r0, #0
   15438:	beq	154f0 <__assert_fail@plt+0x4190>
   1543c:	ldr	r3, [r4, #16]
   15440:	sub	r3, r3, #1
   15444:	str	r3, [r4, #16]
   15448:	ldr	r3, [sp, #4]
   1544c:	ldr	r3, [r3]
   15450:	cmp	r3, #0
   15454:	bne	154f0 <__assert_fail@plt+0x4190>
   15458:	vldr	s14, [r4, #8]
   1545c:	ldr	r3, [r4, #12]
   15460:	sub	r3, r3, #1
   15464:	vcvt.f32.u32	s14, s14
   15468:	vmov	s15, r3
   1546c:	str	r3, [r4, #12]
   15470:	ldr	r3, [r4, #20]
   15474:	vcvt.f32.u32	s15, s15
   15478:	vldr	s13, [r3]
   1547c:	vmul.f32	s14, s14, s13
   15480:	vcmpe.f32	s15, s14
   15484:	vmrs	APSR_nzcv, fpscr
   15488:	bpl	154f0 <__assert_fail@plt+0x4190>
   1548c:	add	r0, r4, #20
   15490:	bl	14998 <__assert_fail@plt+0x3638>
   15494:	vldr	s15, [r4, #8]
   15498:	vldr	s14, [r4, #12]
   1549c:	ldr	r3, [r4, #20]
   154a0:	vcvt.f32.u32	s15, s15
   154a4:	vcvt.f32.u32	s13, s14
   154a8:	vldr	s14, [r3]
   154ac:	vmul.f32	s14, s15, s14
   154b0:	vcmpe.f32	s13, s14
   154b4:	vmrs	APSR_nzcv, fpscr
   154b8:	bpl	154f0 <__assert_fail@plt+0x4190>
   154bc:	vldr	s14, [r3, #4]
   154c0:	ldrb	r2, [r3, #16]
   154c4:	mov	r0, r4
   154c8:	vmul.f32	s15, s15, s14
   154cc:	cmp	r2, #0
   154d0:	vldreq	s14, [r3, #8]
   154d4:	vmuleq.f32	s15, s15, s14
   154d8:	vcvt.u32.f32	s15, s15
   154dc:	vmov	r1, s15
   154e0:	bl	1514c <__assert_fail@plt+0x3dec>
   154e4:	cmp	r0, #0
   154e8:	ldreq	r0, [r4, #36]	; 0x24
   154ec:	beq	15508 <__assert_fail@plt+0x41a8>
   154f0:	mov	r0, r5
   154f4:	add	sp, sp, #8
   154f8:	pop	{r4, r5, r6, pc}
   154fc:	ldr	r6, [r0, #4]
   15500:	bl	129e4 <__assert_fail@plt+0x1684>
   15504:	mov	r0, r6
   15508:	cmp	r0, #0
   1550c:	bne	154fc <__assert_fail@plt+0x419c>
   15510:	str	r0, [r4, #36]	; 0x24
   15514:	b	154f0 <__assert_fail@plt+0x4190>
   15518:	b	15420 <__assert_fail@plt+0x40c0>
   1551c:	mov	r3, #1
   15520:	strb	r3, [r0, #28]
   15524:	mov	r3, #0
   15528:	str	r3, [r0, #20]
   1552c:	str	r3, [r0, #24]
   15530:	str	r1, [r0]
   15534:	str	r1, [r0, #4]
   15538:	str	r1, [r0, #8]
   1553c:	str	r1, [r0, #12]
   15540:	str	r1, [r0, #16]
   15544:	bx	lr
   15548:	ldrb	r0, [r0, #28]
   1554c:	bx	lr
   15550:	ldrb	ip, [r0, #28]
   15554:	ldr	r3, [r0, #20]
   15558:	mov	r2, r0
   1555c:	eor	ip, ip, #1
   15560:	add	r3, ip, r3
   15564:	and	r3, r3, #3
   15568:	ldr	r0, [r0, r3, lsl #2]
   1556c:	str	r1, [r2, r3, lsl #2]
   15570:	ldr	r1, [r2, #24]
   15574:	str	r3, [r2, #20]
   15578:	cmp	r3, r1
   1557c:	addeq	r3, ip, r3
   15580:	andeq	r3, r3, #3
   15584:	streq	r3, [r2, #24]
   15588:	mov	r3, #0
   1558c:	strb	r3, [r2, #28]
   15590:	bx	lr
   15594:	ldrb	r2, [r0, #28]
   15598:	cmp	r2, #0
   1559c:	beq	155a8 <__assert_fail@plt+0x4248>
   155a0:	push	{r4, lr}
   155a4:	bl	11318 <abort@plt>
   155a8:	mov	r3, r0
   155ac:	ldr	r2, [r0, #20]
   155b0:	ldr	r1, [r3, #16]
   155b4:	ldr	r0, [r0, r2, lsl #2]
   155b8:	str	r1, [r3, r2, lsl #2]
   155bc:	ldr	r1, [r3, #24]
   155c0:	cmp	r2, r1
   155c4:	addne	r2, r2, #3
   155c8:	moveq	r2, #1
   155cc:	andne	r2, r2, #3
   155d0:	strbeq	r2, [r3, #28]
   155d4:	strne	r2, [r3, #20]
   155d8:	bx	lr
   155dc:	push	{r4, r5, r6, r8, r9, lr}
   155e0:	mov	r4, r0
   155e4:	mov	r5, r1
   155e8:	add	r6, r2, #20
   155ec:	mov	r8, #10
   155f0:	mov	r9, #0
   155f4:	mov	r3, #0
   155f8:	strb	r3, [r2, #20]
   155fc:	mov	r0, r4
   15600:	mov	r1, r5
   15604:	mov	r2, r8
   15608:	mov	r3, r9
   1560c:	bl	18788 <__assert_fail@plt+0x7428>
   15610:	mov	r3, r9
   15614:	mov	r0, r4
   15618:	mov	r1, r5
   1561c:	add	r2, r2, #48	; 0x30
   15620:	strb	r2, [r6, #-1]!
   15624:	mov	r2, r8
   15628:	bl	18788 <__assert_fail@plt+0x7428>
   1562c:	mov	r4, r0
   15630:	mov	r5, r1
   15634:	orrs	r3, r4, r5
   15638:	bne	155fc <__assert_fail@plt+0x429c>
   1563c:	mov	r0, r6
   15640:	pop	{r4, r5, r6, r8, r9, pc}
   15644:	push	{r2, r3}
   15648:	push	{r0, r1, r2, lr}
   1564c:	ldr	r2, [sp, #16]
   15650:	ands	r3, r2, #64	; 0x40
   15654:	addne	r3, sp, #20
   15658:	strne	r3, [sp, #4]
   1565c:	ldrne	r3, [sp, #20]
   15660:	bl	111ec <openat64@plt>
   15664:	bl	16d44 <__assert_fail@plt+0x59e4>
   15668:	add	sp, sp, #12
   1566c:	pop	{lr}		; (ldr lr, [sp], #4)
   15670:	add	sp, sp, #8
   15674:	bx	lr
   15678:	orr	r2, r2, #540672	; 0x84000
   1567c:	push	{r4, r5, r6, r7, r8, lr}
   15680:	orr	r2, r2, #2304	; 0x900
   15684:	mov	r5, r3
   15688:	bl	15644 <__assert_fail@plt+0x42e4>
   1568c:	subs	r6, r0, #0
   15690:	movlt	r4, #0
   15694:	blt	156c0 <__assert_fail@plt+0x4360>
   15698:	bl	112ac <fdopendir@plt>
   1569c:	subs	r4, r0, #0
   156a0:	strne	r6, [r5]
   156a4:	bne	156c0 <__assert_fail@plt+0x4360>
   156a8:	bl	11204 <__errno_location@plt>
   156ac:	ldr	r7, [r0]
   156b0:	mov	r5, r0
   156b4:	mov	r0, r6
   156b8:	bl	11324 <close@plt>
   156bc:	str	r7, [r5]
   156c0:	mov	r0, r4
   156c4:	pop	{r4, r5, r6, r7, r8, pc}
   156c8:	push	{r4, r5, r6, lr}
   156cc:	subs	r5, r0, #0
   156d0:	bne	156e8 <__assert_fail@plt+0x4388>
   156d4:	ldr	r3, [pc, #124]	; 15758 <__assert_fail@plt+0x43f8>
   156d8:	ldr	r0, [pc, #124]	; 1575c <__assert_fail@plt+0x43fc>
   156dc:	ldr	r1, [r3]
   156e0:	bl	11300 <fputs@plt>
   156e4:	bl	11318 <abort@plt>
   156e8:	mov	r1, #47	; 0x2f
   156ec:	bl	11288 <strrchr@plt>
   156f0:	cmp	r0, #0
   156f4:	addne	r4, r0, #1
   156f8:	moveq	r4, r5
   156fc:	sub	r3, r4, r5
   15700:	cmp	r3, #6
   15704:	ble	15744 <__assert_fail@plt+0x43e4>
   15708:	mov	r2, #7
   1570c:	ldr	r1, [pc, #76]	; 15760 <__assert_fail@plt+0x4400>
   15710:	sub	r0, r4, #7
   15714:	bl	1130c <strncmp@plt>
   15718:	cmp	r0, #0
   1571c:	bne	15744 <__assert_fail@plt+0x43e4>
   15720:	mov	r2, #3
   15724:	ldr	r1, [pc, #56]	; 15764 <__assert_fail@plt+0x4404>
   15728:	mov	r0, r4
   1572c:	bl	1130c <strncmp@plt>
   15730:	cmp	r0, #0
   15734:	movne	r5, r4
   15738:	ldreq	r3, [pc, #40]	; 15768 <__assert_fail@plt+0x4408>
   1573c:	addeq	r5, r4, #3
   15740:	streq	r5, [r3]
   15744:	ldr	r3, [pc, #32]	; 1576c <__assert_fail@plt+0x440c>
   15748:	str	r5, [r3]
   1574c:	ldr	r3, [pc, #28]	; 15770 <__assert_fail@plt+0x4410>
   15750:	str	r5, [r3]
   15754:	pop	{r4, r5, r6, pc}
   15758:	muleq	r2, r0, r1
   1575c:	muleq	r1, sp, r8
   15760:	ldrdeq	r9, [r1], -r5
   15764:	ldrdeq	r9, [r1], -sp
   15768:	andeq	sl, r2, r0, lsl #3
   1576c:	andeq	sl, r2, r0, asr #3
   15770:	andeq	sl, r2, r4, lsl #3
   15774:	push	{r4, r5, r6, lr}
   15778:	mov	r2, #48	; 0x30
   1577c:	mov	r5, r1
   15780:	mov	r1, #0
   15784:	mov	r4, r0
   15788:	bl	1121c <memset@plt>
   1578c:	cmp	r5, #10
   15790:	bne	15798 <__assert_fail@plt+0x4438>
   15794:	bl	11318 <abort@plt>
   15798:	str	r5, [r4]
   1579c:	mov	r0, r4
   157a0:	pop	{r4, r5, r6, pc}
   157a4:	push	{r4, r5, r6, lr}
   157a8:	mov	r4, r0
   157ac:	mov	r5, r1
   157b0:	bl	18180 <__assert_fail@plt+0x6e20>
   157b4:	ldrb	r3, [r0]
   157b8:	bic	r3, r3, #32
   157bc:	cmp	r3, #85	; 0x55
   157c0:	bne	15830 <__assert_fail@plt+0x44d0>
   157c4:	ldrb	r3, [r0, #1]
   157c8:	bic	r3, r3, #32
   157cc:	cmp	r3, #84	; 0x54
   157d0:	bne	15808 <__assert_fail@plt+0x44a8>
   157d4:	ldrb	r3, [r0, #2]
   157d8:	bic	r3, r3, #32
   157dc:	cmp	r3, #70	; 0x46
   157e0:	bne	15808 <__assert_fail@plt+0x44a8>
   157e4:	ldrb	r3, [r0, #3]
   157e8:	cmp	r3, #45	; 0x2d
   157ec:	bne	15808 <__assert_fail@plt+0x44a8>
   157f0:	ldrb	r3, [r0, #4]
   157f4:	cmp	r3, #56	; 0x38
   157f8:	bne	15808 <__assert_fail@plt+0x44a8>
   157fc:	ldrb	r3, [r0, #5]
   15800:	cmp	r3, #0
   15804:	beq	1581c <__assert_fail@plt+0x44bc>
   15808:	ldr	r1, [pc, #144]	; 158a0 <__assert_fail@plt+0x4540>
   1580c:	ldr	r0, [pc, #144]	; 158a4 <__assert_fail@plt+0x4544>
   15810:	cmp	r5, #9
   15814:	movne	r0, r1
   15818:	pop	{r4, r5, r6, pc}
   1581c:	ldrb	r3, [r4]
   15820:	ldr	r1, [pc, #128]	; 158a8 <__assert_fail@plt+0x4548>
   15824:	ldr	r0, [pc, #128]	; 158ac <__assert_fail@plt+0x454c>
   15828:	cmp	r3, #96	; 0x60
   1582c:	b	15814 <__assert_fail@plt+0x44b4>
   15830:	cmp	r3, #71	; 0x47
   15834:	bne	15808 <__assert_fail@plt+0x44a8>
   15838:	ldrb	r3, [r0, #1]
   1583c:	bic	r3, r3, #32
   15840:	cmp	r3, #66	; 0x42
   15844:	bne	15808 <__assert_fail@plt+0x44a8>
   15848:	ldrb	r3, [r0, #2]
   1584c:	cmp	r3, #49	; 0x31
   15850:	bne	15808 <__assert_fail@plt+0x44a8>
   15854:	ldrb	r3, [r0, #3]
   15858:	cmp	r3, #56	; 0x38
   1585c:	bne	15808 <__assert_fail@plt+0x44a8>
   15860:	ldrb	r3, [r0, #4]
   15864:	cmp	r3, #48	; 0x30
   15868:	bne	15808 <__assert_fail@plt+0x44a8>
   1586c:	ldrb	r3, [r0, #5]
   15870:	cmp	r3, #51	; 0x33
   15874:	bne	15808 <__assert_fail@plt+0x44a8>
   15878:	ldrb	r3, [r0, #6]
   1587c:	cmp	r3, #48	; 0x30
   15880:	bne	15808 <__assert_fail@plt+0x44a8>
   15884:	ldrb	r3, [r0, #7]
   15888:	cmp	r3, #0
   1588c:	bne	15808 <__assert_fail@plt+0x44a8>
   15890:	ldrb	r3, [r4]
   15894:	ldr	r1, [pc, #20]	; 158b0 <__assert_fail@plt+0x4550>
   15898:	ldr	r0, [pc, #20]	; 158b4 <__assert_fail@plt+0x4554>
   1589c:	b	15828 <__assert_fail@plt+0x44c8>
   158a0:	andeq	r9, r1, r9, asr #18
   158a4:	andeq	r9, r1, r7, asr #18
   158a8:	andeq	r9, r1, ip, lsr r9
   158ac:	andeq	r9, r1, r8, lsr r9
   158b0:	andeq	r9, r1, r4, asr #18
   158b4:	andeq	r9, r1, r0, asr #18
   158b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158bc:	sub	sp, sp, #108	; 0x6c
   158c0:	mov	r8, r0
   158c4:	str	r3, [sp, #36]	; 0x24
   158c8:	mov	r5, r1
   158cc:	str	r2, [sp, #44]	; 0x2c
   158d0:	ldr	sl, [sp, #144]	; 0x90
   158d4:	bl	1112c <__ctype_get_mb_cur_max@plt>
   158d8:	ldr	r3, [sp, #148]	; 0x94
   158dc:	mov	r7, #0
   158e0:	str	r7, [sp, #48]	; 0x30
   158e4:	lsr	r6, r3, #1
   158e8:	and	r6, r6, #1
   158ec:	mov	r3, #1
   158f0:	str	r3, [sp, #72]	; 0x48
   158f4:	str	r7, [sp, #24]
   158f8:	str	r7, [sp, #32]
   158fc:	str	r7, [sp, #40]	; 0x28
   15900:	str	r7, [sp, #60]	; 0x3c
   15904:	str	r0, [sp, #76]	; 0x4c
   15908:	cmp	sl, #10
   1590c:	ldrls	pc, [pc, sl, lsl #2]
   15910:	b	15b4c <__assert_fail@plt+0x47ec>
   15914:	andeq	r5, r1, r0, asr #18
   15918:	ldrdeq	r6, [r1], -r4
   1591c:	andeq	r5, r1, r8, lsl fp
   15920:	andeq	r5, r1, r4, ror #22
   15924:	strdeq	r5, [r1], -r4
   15928:	andeq	r5, r1, ip, asr #18
   1592c:			; <UNDEFINED> instruction: 0x000165b4
   15930:	andeq	r5, r1, r0, asr fp
   15934:	andeq	r5, r1, r4, asr #20
   15938:	andeq	r5, r1, r4, asr #20
   1593c:	andeq	r5, r1, r4, asr #20
   15940:	mov	r6, #0
   15944:	mov	r4, #0
   15948:	b	15978 <__assert_fail@plt+0x4618>
   1594c:	cmp	r6, #0
   15950:	bne	15b74 <__assert_fail@plt+0x4814>
   15954:	cmp	r5, #0
   15958:	movne	r3, #34	; 0x22
   1595c:	strbne	r3, [r8]
   15960:	mov	r3, #1
   15964:	str	r3, [sp, #24]
   15968:	str	r3, [sp, #32]
   1596c:	mov	r4, #1
   15970:	ldr	r3, [pc, #3172]	; 165dc <__assert_fail@plt+0x527c>
   15974:	str	r3, [sp, #40]	; 0x28
   15978:	mov	r9, r5
   1597c:	mov	r3, #0
   15980:	str	r7, [sp, #68]	; 0x44
   15984:	str	r3, [sp, #28]
   15988:	ldr	r3, [sp, #36]	; 0x24
   1598c:	cmn	r3, #1
   15990:	bne	16520 <__assert_fail@plt+0x51c0>
   15994:	ldr	r3, [sp, #44]	; 0x2c
   15998:	ldr	r2, [sp, #28]
   1599c:	ldrb	r3, [r3, r2]
   159a0:	adds	r3, r3, #0
   159a4:	movne	r3, #1
   159a8:	str	r3, [sp, #52]	; 0x34
   159ac:	ldr	r3, [sp, #52]	; 0x34
   159b0:	cmp	r3, #0
   159b4:	bne	15b9c <__assert_fail@plt+0x483c>
   159b8:	sub	r2, sl, #2
   159bc:	clz	r2, r2
   159c0:	lsr	r2, r2, #5
   159c4:	and	r3, r6, r2
   159c8:	cmp	r4, #0
   159cc:	movne	r3, #0
   159d0:	andeq	r3, r3, #1
   159d4:	cmp	r3, #0
   159d8:	bne	15d64 <__assert_fail@plt+0x4a04>
   159dc:	eor	r3, r6, #1
   159e0:	ands	r2, r2, r3
   159e4:	beq	16558 <__assert_fail@plt+0x51f8>
   159e8:	ldr	r3, [sp, #68]	; 0x44
   159ec:	cmp	r3, #0
   159f0:	beq	16590 <__assert_fail@plt+0x5230>
   159f4:	ldr	r3, [sp, #72]	; 0x48
   159f8:	cmp	r3, #0
   159fc:	beq	16534 <__assert_fail@plt+0x51d4>
   15a00:	ldr	r3, [sp, #160]	; 0xa0
   15a04:	ldr	r2, [sp, #44]	; 0x2c
   15a08:	str	r3, [sp, #16]
   15a0c:	ldr	r3, [sp, #156]	; 0x9c
   15a10:	ldr	r1, [sp, #60]	; 0x3c
   15a14:	str	r3, [sp, #12]
   15a18:	ldr	r3, [sp, #152]	; 0x98
   15a1c:	str	r3, [sp, #8]
   15a20:	ldr	r3, [sp, #148]	; 0x94
   15a24:	str	r3, [sp, #4]
   15a28:	mov	r3, #5
   15a2c:	str	r3, [sp]
   15a30:	ldr	r3, [sp, #36]	; 0x24
   15a34:	mov	r0, r8
   15a38:	bl	158b8 <__assert_fail@plt+0x4558>
   15a3c:	mov	r4, r0
   15a40:	b	16584 <__assert_fail@plt+0x5224>
   15a44:	cmp	sl, #10
   15a48:	beq	15aa4 <__assert_fail@plt+0x4744>
   15a4c:	ldr	r4, [pc, #2956]	; 165e0 <__assert_fail@plt+0x5280>
   15a50:	mov	r2, #5
   15a54:	mov	r1, r4
   15a58:	mov	r0, #0
   15a5c:	bl	110d8 <dcgettext@plt>
   15a60:	cmp	r0, r4
   15a64:	str	r0, [sp, #156]	; 0x9c
   15a68:	bne	15a78 <__assert_fail@plt+0x4718>
   15a6c:	mov	r1, sl
   15a70:	bl	157a4 <__assert_fail@plt+0x4444>
   15a74:	str	r0, [sp, #156]	; 0x9c
   15a78:	ldr	r4, [pc, #2916]	; 165e4 <__assert_fail@plt+0x5284>
   15a7c:	mov	r2, #5
   15a80:	mov	r1, r4
   15a84:	mov	r0, #0
   15a88:	bl	110d8 <dcgettext@plt>
   15a8c:	cmp	r0, r4
   15a90:	str	r0, [sp, #160]	; 0xa0
   15a94:	bne	15aa4 <__assert_fail@plt+0x4744>
   15a98:	mov	r1, sl
   15a9c:	bl	157a4 <__assert_fail@plt+0x4444>
   15aa0:	str	r0, [sp, #160]	; 0xa0
   15aa4:	cmp	r6, #0
   15aa8:	moveq	r4, r6
   15aac:	beq	15ac4 <__assert_fail@plt+0x4764>
   15ab0:	mov	r4, #0
   15ab4:	b	15ad4 <__assert_fail@plt+0x4774>
   15ab8:	cmp	r5, r4
   15abc:	strbhi	r3, [r8, r4]
   15ac0:	add	r4, r4, #1
   15ac4:	ldr	r3, [sp, #156]	; 0x9c
   15ac8:	ldrb	r3, [r3, r4]
   15acc:	cmp	r3, #0
   15ad0:	bne	15ab8 <__assert_fail@plt+0x4758>
   15ad4:	ldr	r0, [sp, #160]	; 0xa0
   15ad8:	bl	111d4 <strlen@plt>
   15adc:	ldr	r3, [sp, #160]	; 0xa0
   15ae0:	str	r3, [sp, #40]	; 0x28
   15ae4:	mov	r3, #1
   15ae8:	str	r3, [sp, #24]
   15aec:	str	r0, [sp, #32]
   15af0:	b	15978 <__assert_fail@plt+0x4618>
   15af4:	mov	r3, #1
   15af8:	cmp	r6, #0
   15afc:	streq	r3, [sp, #24]
   15b00:	beq	15b20 <__assert_fail@plt+0x47c0>
   15b04:	str	r3, [sp, #32]
   15b08:	ldr	r3, [pc, #2772]	; 165e4 <__assert_fail@plt+0x5284>
   15b0c:	mov	r4, #0
   15b10:	str	r3, [sp, #40]	; 0x28
   15b14:	b	15b44 <__assert_fail@plt+0x47e4>
   15b18:	cmp	r6, #0
   15b1c:	bne	15b8c <__assert_fail@plt+0x482c>
   15b20:	cmp	r5, #0
   15b24:	movne	r3, #39	; 0x27
   15b28:	strbne	r3, [r8]
   15b2c:	mov	r3, #1
   15b30:	str	r3, [sp, #32]
   15b34:	mov	r6, #0
   15b38:	ldr	r3, [pc, #2724]	; 165e4 <__assert_fail@plt+0x5284>
   15b3c:	mov	r4, #1
   15b40:	str	r3, [sp, #40]	; 0x28
   15b44:	mov	sl, #2
   15b48:	b	15978 <__assert_fail@plt+0x4618>
   15b4c:	bl	11318 <abort@plt>
   15b50:	mov	r6, #0
   15b54:	mov	r3, #1
   15b58:	str	r3, [sp, #24]
   15b5c:	mov	r4, r6
   15b60:	b	15978 <__assert_fail@plt+0x4618>
   15b64:	mov	r6, #1
   15b68:	str	r6, [sp, #24]
   15b6c:	str	r6, [sp, #32]
   15b70:	b	15b08 <__assert_fail@plt+0x47a8>
   15b74:	mov	r3, #1
   15b78:	str	r3, [sp, #32]
   15b7c:	ldr	r3, [pc, #2648]	; 165dc <__assert_fail@plt+0x527c>
   15b80:	str	r6, [sp, #24]
   15b84:	str	r3, [sp, #40]	; 0x28
   15b88:	b	15944 <__assert_fail@plt+0x45e4>
   15b8c:	mov	r3, #1
   15b90:	str	r3, [sp, #32]
   15b94:	ldr	r3, [pc, #2632]	; 165e4 <__assert_fail@plt+0x5284>
   15b98:	b	15b84 <__assert_fail@plt+0x4824>
   15b9c:	ldr	r3, [sp, #32]
   15ba0:	ldr	fp, [sp, #24]
   15ba4:	cmp	sl, #2
   15ba8:	moveq	fp, #0
   15bac:	andne	fp, fp, #1
   15bb0:	adds	r5, r3, #0
   15bb4:	movne	r5, #1
   15bb8:	ands	r3, r5, fp
   15bbc:	str	r3, [sp, #64]	; 0x40
   15bc0:	beq	15c90 <__assert_fail@plt+0x4930>
   15bc4:	ldr	r2, [sp, #32]
   15bc8:	ldr	r3, [sp, #28]
   15bcc:	add	r7, r3, r2
   15bd0:	mov	r3, r2
   15bd4:	ldr	r2, [sp, #36]	; 0x24
   15bd8:	cmp	r3, #1
   15bdc:	movls	r3, #0
   15be0:	movhi	r3, #1
   15be4:	cmn	r2, #1
   15be8:	movne	r3, #0
   15bec:	cmp	r3, #0
   15bf0:	beq	15c00 <__assert_fail@plt+0x48a0>
   15bf4:	ldr	r0, [sp, #44]	; 0x2c
   15bf8:	bl	111d4 <strlen@plt>
   15bfc:	str	r0, [sp, #36]	; 0x24
   15c00:	ldr	r3, [sp, #36]	; 0x24
   15c04:	cmp	r3, r7
   15c08:	bcc	15c88 <__assert_fail@plt+0x4928>
   15c0c:	ldr	r3, [sp, #44]	; 0x2c
   15c10:	ldr	r0, [sp, #28]
   15c14:	ldr	r2, [sp, #32]
   15c18:	ldr	r1, [sp, #40]	; 0x28
   15c1c:	add	r0, r3, r0
   15c20:	bl	110b4 <memcmp@plt>
   15c24:	cmp	r0, #0
   15c28:	bne	15c88 <__assert_fail@plt+0x4928>
   15c2c:	cmp	r6, #0
   15c30:	beq	15c90 <__assert_fail@plt+0x4930>
   15c34:	str	r6, [sp, #24]
   15c38:	ldr	r3, [sp, #24]
   15c3c:	ldr	r2, [sp, #44]	; 0x2c
   15c40:	cmp	sl, #2
   15c44:	movne	r3, #0
   15c48:	andeq	r3, r3, #1
   15c4c:	cmp	r3, #0
   15c50:	ldr	r3, [sp, #160]	; 0xa0
   15c54:	movne	sl, #4
   15c58:	str	r3, [sp, #16]
   15c5c:	ldr	r3, [sp, #156]	; 0x9c
   15c60:	str	sl, [sp]
   15c64:	str	r3, [sp, #12]
   15c68:	mov	r3, #0
   15c6c:	str	r3, [sp, #8]
   15c70:	ldr	r3, [sp, #148]	; 0x94
   15c74:	mov	r1, r9
   15c78:	bic	r3, r3, #2
   15c7c:	str	r3, [sp, #4]
   15c80:	ldr	r3, [sp, #36]	; 0x24
   15c84:	b	15a34 <__assert_fail@plt+0x46d4>
   15c88:	mov	r3, #0
   15c8c:	str	r3, [sp, #64]	; 0x40
   15c90:	ldr	r2, [sp, #28]
   15c94:	ldr	r3, [sp, #44]	; 0x2c
   15c98:	add	r3, r3, r2
   15c9c:	str	r3, [sp, #80]	; 0x50
   15ca0:	ldr	r3, [sp, #44]	; 0x2c
   15ca4:	ldrb	r7, [r3, r2]
   15ca8:	cmp	r7, #58	; 0x3a
   15cac:	bhi	15e14 <__assert_fail@plt+0x4ab4>
   15cb0:	cmp	r7, #43	; 0x2b
   15cb4:	bcs	15e68 <__assert_fail@plt+0x4b08>
   15cb8:	cmp	r7, #32
   15cbc:	beq	15ec0 <__assert_fail@plt+0x4b60>
   15cc0:	bhi	15d6c <__assert_fail@plt+0x4a0c>
   15cc4:	cmp	r7, #9
   15cc8:	beq	16174 <__assert_fail@plt+0x4e14>
   15ccc:	bhi	15d30 <__assert_fail@plt+0x49d0>
   15cd0:	cmp	r7, #7
   15cd4:	beq	16220 <__assert_fail@plt+0x4ec0>
   15cd8:	bhi	15edc <__assert_fail@plt+0x4b7c>
   15cdc:	cmp	r7, #0
   15ce0:	beq	15ef8 <__assert_fail@plt+0x4b98>
   15ce4:	ldr	r3, [sp, #76]	; 0x4c
   15ce8:	cmp	r3, #1
   15cec:	bne	16264 <__assert_fail@plt+0x4f04>
   15cf0:	bl	111bc <__ctype_b_loc@plt>
   15cf4:	sxth	r3, r7
   15cf8:	lsl	r3, r3, #1
   15cfc:	ldr	r2, [r0]
   15d00:	ldrh	r5, [r2, r3]
   15d04:	ldr	r3, [sp, #76]	; 0x4c
   15d08:	str	r3, [sp, #56]	; 0x38
   15d0c:	lsr	r5, r5, #14
   15d10:	and	r5, r5, #1
   15d14:	ldr	r3, [sp, #24]
   15d18:	eor	fp, r5, #1
   15d1c:	and	fp, fp, r3
   15d20:	ands	fp, fp, #255	; 0xff
   15d24:	beq	160ac <__assert_fail@plt+0x4d4c>
   15d28:	mov	r5, #0
   15d2c:	b	16310 <__assert_fail@plt+0x4fb0>
   15d30:	cmp	r7, #11
   15d34:	beq	1617c <__assert_fail@plt+0x4e1c>
   15d38:	bcc	16218 <__assert_fail@plt+0x4eb8>
   15d3c:	cmp	r7, #12
   15d40:	beq	16228 <__assert_fail@plt+0x4ec8>
   15d44:	cmp	r7, #13
   15d48:	moveq	r3, #114	; 0x72
   15d4c:	bne	15ce4 <__assert_fail@plt+0x4984>
   15d50:	cmp	sl, #2
   15d54:	movne	r2, #0
   15d58:	andeq	r2, r6, #1
   15d5c:	cmp	r2, #0
   15d60:	beq	15ee0 <__assert_fail@plt+0x4b80>
   15d64:	mov	sl, #2
   15d68:	b	15c38 <__assert_fail@plt+0x48d8>
   15d6c:	cmp	r7, #37	; 0x25
   15d70:	beq	15e68 <__assert_fail@plt+0x4b08>
   15d74:	bhi	15d88 <__assert_fail@plt+0x4a28>
   15d78:	cmp	r7, #35	; 0x23
   15d7c:	beq	15eb4 <__assert_fail@plt+0x4b54>
   15d80:	mov	r5, #0
   15d84:	b	15ec4 <__assert_fail@plt+0x4b64>
   15d88:	cmp	r7, #39	; 0x27
   15d8c:	bne	15d80 <__assert_fail@plt+0x4a20>
   15d90:	cmp	sl, #2
   15d94:	ldrne	r5, [sp, #52]	; 0x34
   15d98:	movne	r3, r5
   15d9c:	strne	r3, [sp, #68]	; 0x44
   15da0:	bne	15e6c <__assert_fail@plt+0x4b0c>
   15da4:	cmp	r6, #0
   15da8:	bne	15c38 <__assert_fail@plt+0x48d8>
   15dac:	ldr	r2, [sp, #60]	; 0x3c
   15db0:	adds	r3, r9, #0
   15db4:	movne	r3, #1
   15db8:	cmp	r2, #0
   15dbc:	movne	r3, #0
   15dc0:	cmp	r3, #0
   15dc4:	strne	r9, [sp, #60]	; 0x3c
   15dc8:	movne	r9, #0
   15dcc:	bne	15ddc <__assert_fail@plt+0x4a7c>
   15dd0:	cmp	r9, r4
   15dd4:	movhi	r3, #39	; 0x27
   15dd8:	strbhi	r3, [r8, r4]
   15ddc:	add	r3, r4, #1
   15de0:	cmp	r3, r9
   15de4:	movcc	r2, #92	; 0x5c
   15de8:	strbcc	r2, [r8, r3]
   15dec:	add	r3, r4, #2
   15df0:	cmp	r3, r9
   15df4:	ldr	r5, [sp, #52]	; 0x34
   15df8:	movcc	r2, #39	; 0x27
   15dfc:	strbcc	r2, [r8, r3]
   15e00:	add	r4, r4, #3
   15e04:	mov	fp, r6
   15e08:	str	r5, [sp, #68]	; 0x44
   15e0c:	str	r6, [sp, #48]	; 0x30
   15e10:	b	160ac <__assert_fail@plt+0x4d4c>
   15e14:	cmp	r7, #94	; 0x5e
   15e18:	beq	15d80 <__assert_fail@plt+0x4a20>
   15e1c:	bhi	15e74 <__assert_fail@plt+0x4b14>
   15e20:	cmp	r7, #90	; 0x5a
   15e24:	bhi	15e5c <__assert_fail@plt+0x4afc>
   15e28:	cmp	r7, #65	; 0x41
   15e2c:	bcs	15e68 <__assert_fail@plt+0x4b08>
   15e30:	cmp	r7, #62	; 0x3e
   15e34:	bls	15d80 <__assert_fail@plt+0x4a20>
   15e38:	cmp	r7, #63	; 0x3f
   15e3c:	bne	15ce4 <__assert_fail@plt+0x4984>
   15e40:	cmp	sl, #2
   15e44:	beq	15fe8 <__assert_fail@plt+0x4c88>
   15e48:	cmp	sl, #5
   15e4c:	beq	15ff8 <__assert_fail@plt+0x4c98>
   15e50:	mov	fp, #0
   15e54:	mov	r5, fp
   15e58:	b	160ac <__assert_fail@plt+0x4d4c>
   15e5c:	cmp	r7, #92	; 0x5c
   15e60:	beq	16184 <__assert_fail@plt+0x4e24>
   15e64:	bls	15d80 <__assert_fail@plt+0x4a20>
   15e68:	ldr	r5, [sp, #52]	; 0x34
   15e6c:	mov	fp, #0
   15e70:	b	160ac <__assert_fail@plt+0x4d4c>
   15e74:	cmp	r7, #122	; 0x7a
   15e78:	bhi	15e98 <__assert_fail@plt+0x4b38>
   15e7c:	cmp	r7, #97	; 0x61
   15e80:	bcs	15e68 <__assert_fail@plt+0x4b08>
   15e84:	cmp	r7, #95	; 0x5f
   15e88:	beq	15e68 <__assert_fail@plt+0x4b08>
   15e8c:	cmp	r7, #96	; 0x60
   15e90:	bne	15ce4 <__assert_fail@plt+0x4984>
   15e94:	b	15d80 <__assert_fail@plt+0x4a20>
   15e98:	cmp	r7, #124	; 0x7c
   15e9c:	beq	15d80 <__assert_fail@plt+0x4a20>
   15ea0:	bcc	16230 <__assert_fail@plt+0x4ed0>
   15ea4:	cmp	r7, #125	; 0x7d
   15ea8:	beq	16230 <__assert_fail@plt+0x4ed0>
   15eac:	cmp	r7, #126	; 0x7e
   15eb0:	bne	15ce4 <__assert_fail@plt+0x4984>
   15eb4:	ldr	r3, [sp, #28]
   15eb8:	cmp	r3, #0
   15ebc:	bne	15ff0 <__assert_fail@plt+0x4c90>
   15ec0:	ldr	r5, [sp, #52]	; 0x34
   15ec4:	cmp	sl, #2
   15ec8:	movne	fp, #0
   15ecc:	andeq	fp, r6, #1
   15ed0:	cmp	fp, #0
   15ed4:	beq	160ac <__assert_fail@plt+0x4d4c>
   15ed8:	b	15d64 <__assert_fail@plt+0x4a04>
   15edc:	mov	r3, #98	; 0x62
   15ee0:	ldr	r2, [sp, #24]
   15ee4:	cmp	r2, #0
   15ee8:	beq	15ff0 <__assert_fail@plt+0x4c90>
   15eec:	mov	r7, r3
   15ef0:	mov	r5, #0
   15ef4:	b	16104 <__assert_fail@plt+0x4da4>
   15ef8:	ldr	r3, [sp, #24]
   15efc:	cmp	r3, #0
   15f00:	beq	15fcc <__assert_fail@plt+0x4c6c>
   15f04:	cmp	r6, #0
   15f08:	bne	15c34 <__assert_fail@plt+0x48d4>
   15f0c:	ldr	r3, [sp, #48]	; 0x30
   15f10:	eor	r2, r3, #1
   15f14:	cmp	sl, #2
   15f18:	movne	r2, #0
   15f1c:	andeq	r2, r2, #1
   15f20:	cmp	r2, #0
   15f24:	moveq	r3, r4
   15f28:	beq	15f60 <__assert_fail@plt+0x4c00>
   15f2c:	cmp	r9, r4
   15f30:	movhi	r3, #39	; 0x27
   15f34:	strbhi	r3, [r8, r4]
   15f38:	add	r3, r4, #1
   15f3c:	cmp	r9, r3
   15f40:	movhi	r1, #36	; 0x24
   15f44:	strbhi	r1, [r8, r3]
   15f48:	add	r3, r4, #2
   15f4c:	cmp	r9, r3
   15f50:	movhi	r1, #39	; 0x27
   15f54:	strbhi	r1, [r8, r3]
   15f58:	add	r3, r4, #3
   15f5c:	str	r2, [sp, #48]	; 0x30
   15f60:	cmp	r9, r3
   15f64:	movhi	r2, #92	; 0x5c
   15f68:	strbhi	r2, [r8, r3]
   15f6c:	cmp	fp, #0
   15f70:	add	r4, r3, #1
   15f74:	beq	16504 <__assert_fail@plt+0x51a4>
   15f78:	ldr	r2, [sp, #28]
   15f7c:	ldr	r1, [sp, #36]	; 0x24
   15f80:	add	r2, r2, #1
   15f84:	cmp	r1, r2
   15f88:	bls	15fc4 <__assert_fail@plt+0x4c64>
   15f8c:	ldr	r1, [sp, #44]	; 0x2c
   15f90:	mov	r7, #48	; 0x30
   15f94:	ldrb	r2, [r1, r2]
   15f98:	sub	r2, r2, #48	; 0x30
   15f9c:	cmp	r2, #9
   15fa0:	movhi	r5, r6
   15fa4:	bhi	160ac <__assert_fail@plt+0x4d4c>
   15fa8:	cmp	r9, r4
   15fac:	add	r2, r3, #2
   15fb0:	strbhi	r7, [r8, r4]
   15fb4:	cmp	r9, r2
   15fb8:	add	r4, r3, #3
   15fbc:	movhi	r1, #48	; 0x30
   15fc0:	strbhi	r1, [r8, r2]
   15fc4:	mov	r5, r6
   15fc8:	b	1650c <__assert_fail@plt+0x51ac>
   15fcc:	ldr	r3, [sp, #148]	; 0x94
   15fd0:	tst	r3, #1
   15fd4:	ldreq	r5, [sp, #24]
   15fd8:	beq	16518 <__assert_fail@plt+0x51b8>
   15fdc:	ldr	r3, [sp, #28]
   15fe0:	add	r3, r3, #1
   15fe4:	b	15984 <__assert_fail@plt+0x4624>
   15fe8:	cmp	r6, #0
   15fec:	bne	15c38 <__assert_fail@plt+0x48d8>
   15ff0:	mov	r5, #0
   15ff4:	b	15e6c <__assert_fail@plt+0x4b0c>
   15ff8:	ldr	r3, [sp, #148]	; 0x94
   15ffc:	tst	r3, #4
   16000:	beq	15ff0 <__assert_fail@plt+0x4c90>
   16004:	ldr	r3, [sp, #28]
   16008:	add	r2, r3, #2
   1600c:	ldr	r3, [sp, #36]	; 0x24
   16010:	cmp	r3, r2
   16014:	bls	15ff0 <__assert_fail@plt+0x4c90>
   16018:	ldr	r3, [sp, #44]	; 0x2c
   1601c:	ldr	r1, [sp, #28]
   16020:	add	r3, r3, r1
   16024:	ldrb	r0, [r3, #1]
   16028:	cmp	r0, #63	; 0x3f
   1602c:	bne	15ff0 <__assert_fail@plt+0x4c90>
   16030:	ldr	r3, [sp, #44]	; 0x2c
   16034:	ldrb	r1, [r3, r2]
   16038:	sub	r3, r1, #33	; 0x21
   1603c:	uxtb	r3, r3
   16040:	cmp	r3, #29
   16044:	bhi	16514 <__assert_fail@plt+0x51b4>
   16048:	mov	ip, #1
   1604c:	ldr	r5, [pc, #1428]	; 165e8 <__assert_fail@plt+0x5288>
   16050:	ands	r5, r5, ip, lsl r3
   16054:	beq	15e6c <__assert_fail@plt+0x4b0c>
   16058:	cmp	r6, #0
   1605c:	bne	15c38 <__assert_fail@plt+0x48d8>
   16060:	add	r3, r4, #1
   16064:	cmp	r9, r4
   16068:	strbhi	r0, [r8, r4]
   1606c:	cmp	r9, r3
   16070:	movhi	r0, #34	; 0x22
   16074:	strbhi	r0, [r8, r3]
   16078:	add	r3, r4, #2
   1607c:	cmp	r9, r3
   16080:	movhi	r0, #34	; 0x22
   16084:	strbhi	r0, [r8, r3]
   16088:	add	r3, r4, #3
   1608c:	cmp	r9, r3
   16090:	add	r4, r4, #4
   16094:	mov	r5, r6
   16098:	mov	fp, r6
   1609c:	mov	r7, r1
   160a0:	movhi	r0, #63	; 0x3f
   160a4:	strbhi	r0, [r8, r3]
   160a8:	str	r2, [sp, #28]
   160ac:	ldr	r3, [sp, #24]
   160b0:	eor	r3, r3, #1
   160b4:	cmp	sl, #2
   160b8:	orreq	r3, r3, #1
   160bc:	eor	r3, r3, #1
   160c0:	orr	r3, r6, r3
   160c4:	tst	r3, #255	; 0xff
   160c8:	beq	160f8 <__assert_fail@plt+0x4d98>
   160cc:	ldr	r3, [sp, #152]	; 0x98
   160d0:	cmp	r3, #0
   160d4:	beq	160f8 <__assert_fail@plt+0x4d98>
   160d8:	lsr	r2, r7, #5
   160dc:	ldr	r1, [sp, #152]	; 0x98
   160e0:	uxtb	r2, r2
   160e4:	and	r3, r7, #31
   160e8:	ldr	r2, [r1, r2, lsl #2]
   160ec:	lsr	r3, r2, r3
   160f0:	tst	r3, #1
   160f4:	bne	16104 <__assert_fail@plt+0x4da4>
   160f8:	ldr	r3, [sp, #64]	; 0x40
   160fc:	cmp	r3, #0
   16100:	beq	1619c <__assert_fail@plt+0x4e3c>
   16104:	cmp	r6, #0
   16108:	bne	15c38 <__assert_fail@plt+0x48d8>
   1610c:	ldr	r3, [sp, #48]	; 0x30
   16110:	eor	r3, r3, #1
   16114:	cmp	sl, #2
   16118:	movne	r3, #0
   1611c:	andeq	r3, r3, #1
   16120:	cmp	r3, #0
   16124:	beq	1615c <__assert_fail@plt+0x4dfc>
   16128:	cmp	r9, r4
   1612c:	movhi	r2, #39	; 0x27
   16130:	strbhi	r2, [r8, r4]
   16134:	add	r2, r4, #1
   16138:	cmp	r9, r2
   1613c:	movhi	r1, #36	; 0x24
   16140:	strbhi	r1, [r8, r2]
   16144:	add	r2, r4, #2
   16148:	cmp	r9, r2
   1614c:	add	r4, r4, #3
   16150:	movhi	r1, #39	; 0x27
   16154:	strbhi	r1, [r8, r2]
   16158:	str	r3, [sp, #48]	; 0x30
   1615c:	cmp	r9, r4
   16160:	movhi	r3, #92	; 0x5c
   16164:	strbhi	r3, [r8, r4]
   16168:	ldr	fp, [sp, #52]	; 0x34
   1616c:	add	r4, r4, #1
   16170:	b	1619c <__assert_fail@plt+0x4e3c>
   16174:	mov	r3, #116	; 0x74
   16178:	b	15d50 <__assert_fail@plt+0x49f0>
   1617c:	mov	r3, #118	; 0x76
   16180:	b	15ee0 <__assert_fail@plt+0x4b80>
   16184:	cmp	sl, #2
   16188:	bne	161f8 <__assert_fail@plt+0x4e98>
   1618c:	cmp	r6, #0
   16190:	bne	15c38 <__assert_fail@plt+0x48d8>
   16194:	mov	r5, r6
   16198:	mov	fp, r6
   1619c:	ldr	r3, [sp, #48]	; 0x30
   161a0:	eor	fp, fp, #1
   161a4:	and	fp, fp, r3
   161a8:	tst	fp, #255	; 0xff
   161ac:	beq	161d8 <__assert_fail@plt+0x4e78>
   161b0:	cmp	r9, r4
   161b4:	movhi	r3, #39	; 0x27
   161b8:	strbhi	r3, [r8, r4]
   161bc:	add	r3, r4, #1
   161c0:	cmp	r9, r3
   161c4:	movhi	r2, #39	; 0x27
   161c8:	add	r4, r4, #2
   161cc:	strbhi	r2, [r8, r3]
   161d0:	mov	r3, #0
   161d4:	str	r3, [sp, #48]	; 0x30
   161d8:	cmp	r9, r4
   161dc:	strbhi	r7, [r8, r4]
   161e0:	ldr	r3, [sp, #72]	; 0x48
   161e4:	cmp	r5, #0
   161e8:	moveq	r3, #0
   161ec:	add	r4, r4, #1
   161f0:	str	r3, [sp, #72]	; 0x48
   161f4:	b	15fdc <__assert_fail@plt+0x4c7c>
   161f8:	ldr	r3, [sp, #24]
   161fc:	and	r3, r3, r6
   16200:	tst	r5, r3
   16204:	moveq	r3, r7
   16208:	beq	15d50 <__assert_fail@plt+0x49f0>
   1620c:	mov	fp, #0
   16210:	mov	r5, fp
   16214:	b	1619c <__assert_fail@plt+0x4e3c>
   16218:	mov	r3, #110	; 0x6e
   1621c:	b	15d50 <__assert_fail@plt+0x49f0>
   16220:	mov	r3, #97	; 0x61
   16224:	b	15ee0 <__assert_fail@plt+0x4b80>
   16228:	mov	r3, #102	; 0x66
   1622c:	b	15ee0 <__assert_fail@plt+0x4b80>
   16230:	ldr	r3, [sp, #36]	; 0x24
   16234:	cmn	r3, #1
   16238:	bne	16258 <__assert_fail@plt+0x4ef8>
   1623c:	ldr	r3, [sp, #44]	; 0x2c
   16240:	ldrb	r3, [r3, #1]
   16244:	adds	r3, r3, #0
   16248:	movne	r3, #1
   1624c:	cmp	r3, #0
   16250:	bne	15ff0 <__assert_fail@plt+0x4c90>
   16254:	b	15eb4 <__assert_fail@plt+0x4b54>
   16258:	ldr	r3, [sp, #36]	; 0x24
   1625c:	subs	r3, r3, #1
   16260:	b	16248 <__assert_fail@plt+0x4ee8>
   16264:	mov	r3, #0
   16268:	str	r3, [sp, #96]	; 0x60
   1626c:	str	r3, [sp, #100]	; 0x64
   16270:	ldr	r3, [sp, #36]	; 0x24
   16274:	cmn	r3, #1
   16278:	bne	16288 <__assert_fail@plt+0x4f28>
   1627c:	ldr	r0, [sp, #44]	; 0x2c
   16280:	bl	111d4 <strlen@plt>
   16284:	str	r0, [sp, #36]	; 0x24
   16288:	ldr	r5, [sp, #52]	; 0x34
   1628c:	mov	r3, #0
   16290:	str	r3, [sp, #56]	; 0x38
   16294:	ldr	r3, [sp, #28]
   16298:	ldr	r2, [sp, #56]	; 0x38
   1629c:	ldr	r1, [sp, #36]	; 0x24
   162a0:	add	r2, r3, r2
   162a4:	ldr	r3, [sp, #44]	; 0x2c
   162a8:	add	r0, sp, #92	; 0x5c
   162ac:	add	fp, r3, r2
   162b0:	sub	r2, r1, r2
   162b4:	add	r3, sp, #96	; 0x60
   162b8:	mov	r1, fp
   162bc:	bl	181b4 <__assert_fail@plt+0x6e54>
   162c0:	subs	r2, r0, #0
   162c4:	beq	16304 <__assert_fail@plt+0x4fa4>
   162c8:	cmn	r2, #1
   162cc:	beq	164dc <__assert_fail@plt+0x517c>
   162d0:	cmn	r2, #2
   162d4:	bne	1644c <__assert_fail@plt+0x50ec>
   162d8:	ldr	r2, [sp, #56]	; 0x38
   162dc:	ldr	r3, [sp, #28]
   162e0:	add	r3, r3, r2
   162e4:	ldr	r2, [sp, #36]	; 0x24
   162e8:	cmp	r2, r3
   162ec:	bls	164dc <__assert_fail@plt+0x517c>
   162f0:	ldr	r3, [sp, #80]	; 0x50
   162f4:	ldr	r2, [sp, #56]	; 0x38
   162f8:	ldrb	r5, [r3, r2]
   162fc:	cmp	r5, #0
   16300:	bne	1643c <__assert_fail@plt+0x50dc>
   16304:	ldr	r3, [sp, #56]	; 0x38
   16308:	cmp	r3, #1
   1630c:	bls	15d14 <__assert_fail@plt+0x49b4>
   16310:	ldr	r2, [sp, #56]	; 0x38
   16314:	ldr	r3, [sp, #28]
   16318:	mov	fp, #0
   1631c:	add	r3, r3, r2
   16320:	ldr	r2, [sp, #24]
   16324:	str	r3, [sp, #52]	; 0x34
   16328:	eor	r3, r5, #1
   1632c:	and	r3, r3, r2
   16330:	mov	ip, #92	; 0x5c
   16334:	uxtb	r3, r3
   16338:	mov	r2, #39	; 0x27
   1633c:	cmp	r3, #0
   16340:	beq	164e4 <__assert_fail@plt+0x5184>
   16344:	cmp	r6, #0
   16348:	bne	15c34 <__assert_fail@plt+0x48d4>
   1634c:	ldr	r1, [sp, #48]	; 0x30
   16350:	eor	r1, r1, #1
   16354:	cmp	sl, #2
   16358:	movne	r1, #0
   1635c:	andeq	r1, r1, #1
   16360:	cmp	r1, #0
   16364:	beq	16394 <__assert_fail@plt+0x5034>
   16368:	add	r0, r4, #1
   1636c:	cmp	r9, r4
   16370:	strbhi	r2, [r8, r4]
   16374:	cmp	r9, r0
   16378:	movhi	lr, #36	; 0x24
   1637c:	strbhi	lr, [r8, r0]
   16380:	add	r0, r4, #2
   16384:	add	r4, r4, #3
   16388:	cmp	r9, r0
   1638c:	strbhi	r2, [r8, r0]
   16390:	str	r1, [sp, #48]	; 0x30
   16394:	add	r0, r4, #1
   16398:	cmp	r9, r4
   1639c:	strbhi	ip, [r8, r4]
   163a0:	cmp	r9, r0
   163a4:	lsrhi	r1, r7, #6
   163a8:	addhi	r1, r1, #48	; 0x30
   163ac:	strbhi	r1, [r8, r0]
   163b0:	add	r0, r4, #2
   163b4:	cmp	r9, r0
   163b8:	lsrhi	r1, r7, #3
   163bc:	and	r7, r7, #7
   163c0:	andhi	r1, r1, #7
   163c4:	add	r4, r4, #3
   163c8:	add	r7, r7, #48	; 0x30
   163cc:	mov	fp, r3
   163d0:	addhi	r1, r1, #48	; 0x30
   163d4:	strbhi	r1, [r8, r0]
   163d8:	ldr	r1, [sp, #28]
   163dc:	ldr	r0, [sp, #52]	; 0x34
   163e0:	add	r1, r1, #1
   163e4:	cmp	r0, r1
   163e8:	bls	1619c <__assert_fail@plt+0x4e3c>
   163ec:	ldr	lr, [sp, #48]	; 0x30
   163f0:	eor	r0, fp, #1
   163f4:	and	r0, r0, lr
   163f8:	tst	r0, #255	; 0xff
   163fc:	beq	16420 <__assert_fail@plt+0x50c0>
   16400:	add	r0, r4, #1
   16404:	cmp	r9, r4
   16408:	strbhi	r2, [r8, r4]
   1640c:	cmp	r9, r0
   16410:	add	r4, r4, #2
   16414:	strbhi	r2, [r8, r0]
   16418:	mov	r0, #0
   1641c:	str	r0, [sp, #48]	; 0x30
   16420:	ldr	r0, [sp, #44]	; 0x2c
   16424:	cmp	r9, r4
   16428:	strbhi	r7, [r8, r4]
   1642c:	str	r1, [sp, #28]
   16430:	add	r4, r4, #1
   16434:	ldrb	r7, [r0, r1]
   16438:	b	1633c <__assert_fail@plt+0x4fdc>
   1643c:	ldr	r3, [sp, #56]	; 0x38
   16440:	add	r3, r3, #1
   16444:	str	r3, [sp, #56]	; 0x38
   16448:	b	162d8 <__assert_fail@plt+0x4f78>
   1644c:	cmp	sl, #2
   16450:	movne	r3, #0
   16454:	andeq	r3, r6, #1
   16458:	cmp	r3, #0
   1645c:	movne	r1, #1
   16460:	bne	164bc <__assert_fail@plt+0x515c>
   16464:	ldr	r0, [sp, #92]	; 0x5c
   16468:	str	r2, [sp, #84]	; 0x54
   1646c:	bl	11108 <iswprint@plt>
   16470:	ldr	r3, [sp, #56]	; 0x38
   16474:	ldr	r2, [sp, #84]	; 0x54
   16478:	add	r3, r3, r2
   1647c:	str	r3, [sp, #56]	; 0x38
   16480:	cmp	r0, #0
   16484:	add	r0, sp, #96	; 0x60
   16488:	moveq	r5, #0
   1648c:	bl	110a8 <mbsinit@plt>
   16490:	cmp	r0, #0
   16494:	beq	16294 <__assert_fail@plt+0x4f34>
   16498:	b	16304 <__assert_fail@plt+0x4fa4>
   1649c:	ldrb	r3, [fp, r1]
   164a0:	cmp	r3, #94	; 0x5e
   164a4:	beq	15d64 <__assert_fail@plt+0x4a04>
   164a8:	bhi	164c8 <__assert_fail@plt+0x5168>
   164ac:	sub	r3, r3, #91	; 0x5b
   164b0:	cmp	r3, #1
   164b4:	bls	15d64 <__assert_fail@plt+0x4a04>
   164b8:	add	r1, r1, #1
   164bc:	cmp	r1, r2
   164c0:	bne	1649c <__assert_fail@plt+0x513c>
   164c4:	b	16464 <__assert_fail@plt+0x5104>
   164c8:	cmp	r3, #96	; 0x60
   164cc:	beq	15d64 <__assert_fail@plt+0x4a04>
   164d0:	cmp	r3, #124	; 0x7c
   164d4:	bne	164b8 <__assert_fail@plt+0x5158>
   164d8:	b	15d64 <__assert_fail@plt+0x4a04>
   164dc:	mov	r5, #0
   164e0:	b	16304 <__assert_fail@plt+0x4fa4>
   164e4:	ldr	r1, [sp, #64]	; 0x40
   164e8:	cmp	r1, #0
   164ec:	beq	163d8 <__assert_fail@plt+0x5078>
   164f0:	cmp	r9, r4
   164f4:	strbhi	ip, [r8, r4]
   164f8:	str	r3, [sp, #64]	; 0x40
   164fc:	add	r4, r4, #1
   16500:	b	163d8 <__assert_fail@plt+0x5078>
   16504:	mov	r5, fp
   16508:	ldr	fp, [sp, #24]
   1650c:	mov	r7, #48	; 0x30
   16510:	b	160ac <__assert_fail@plt+0x4d4c>
   16514:	mov	r5, #0
   16518:	mov	fp, r5
   1651c:	b	160ac <__assert_fail@plt+0x4d4c>
   16520:	ldr	r3, [sp, #36]	; 0x24
   16524:	ldr	r2, [sp, #28]
   16528:	subs	r3, r3, r2
   1652c:	movne	r3, #1
   16530:	b	159a8 <__assert_fail@plt+0x4648>
   16534:	ldr	r3, [sp, #60]	; 0x3c
   16538:	clz	r7, r9
   1653c:	cmp	r3, #0
   16540:	lsr	r7, r7, #5
   16544:	moveq	r7, #0
   16548:	cmp	r7, #0
   1654c:	mov	r5, r3
   16550:	bne	15908 <__assert_fail@plt+0x45a8>
   16554:	ldr	r3, [sp, #68]	; 0x44
   16558:	ldr	r2, [sp, #40]	; 0x28
   1655c:	cmp	r2, #0
   16560:	moveq	r3, #0
   16564:	andne	r3, r3, #1
   16568:	cmp	r3, #0
   1656c:	movne	r3, r2
   16570:	subne	r2, r3, #1
   16574:	bne	165a4 <__assert_fail@plt+0x5244>
   16578:	cmp	r9, r4
   1657c:	movhi	r3, #0
   16580:	strbhi	r3, [r8, r4]
   16584:	mov	r0, r4
   16588:	add	sp, sp, #108	; 0x6c
   1658c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16590:	mov	r3, r2
   16594:	b	16558 <__assert_fail@plt+0x51f8>
   16598:	cmp	r9, r4
   1659c:	strbhi	r3, [r8, r4]
   165a0:	add	r4, r4, #1
   165a4:	ldrb	r3, [r2, #1]!
   165a8:	cmp	r3, #0
   165ac:	bne	16598 <__assert_fail@plt+0x5238>
   165b0:	b	16578 <__assert_fail@plt+0x5218>
   165b4:	ldr	r3, [pc, #32]	; 165dc <__assert_fail@plt+0x527c>
   165b8:	mov	r6, #1
   165bc:	str	r6, [sp, #24]
   165c0:	str	r6, [sp, #32]
   165c4:	str	r3, [sp, #40]	; 0x28
   165c8:	mov	r4, #0
   165cc:	mov	sl, #5
   165d0:	b	15978 <__assert_fail@plt+0x4618>
   165d4:	mov	r6, #1
   165d8:	b	15b6c <__assert_fail@plt+0x480c>
   165dc:	andeq	r9, r1, r7, asr #18
   165e0:	andeq	r9, r1, fp, asr #18
   165e4:	andeq	r9, r1, r9, asr #18
   165e8:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   165ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165f0:	sub	sp, sp, #52	; 0x34
   165f4:	mov	r6, r0
   165f8:	mov	r5, r3
   165fc:	mov	r8, r1
   16600:	mov	r9, r2
   16604:	bl	11204 <__errno_location@plt>
   16608:	ldr	r7, [pc, #380]	; 1678c <__assert_fail@plt+0x542c>
   1660c:	cmn	r6, #-2147483647	; 0x80000001
   16610:	ldr	r4, [r7]
   16614:	ldr	r3, [r0]
   16618:	str	r0, [sp, #24]
   1661c:	str	r3, [sp, #32]
   16620:	movne	r3, #0
   16624:	moveq	r3, #1
   16628:	orrs	r3, r3, r6, lsr #31
   1662c:	beq	16634 <__assert_fail@plt+0x52d4>
   16630:	bl	11318 <abort@plt>
   16634:	ldr	r2, [r7, #4]
   16638:	cmp	r6, r2
   1663c:	blt	166ac <__assert_fail@plt+0x534c>
   16640:	add	r1, sp, #48	; 0x30
   16644:	add	sl, r7, #8
   16648:	str	r2, [r1, #-4]!
   1664c:	cmp	r4, sl
   16650:	mov	r3, #8
   16654:	sub	r2, r6, r2
   16658:	movne	r0, r4
   1665c:	str	r3, [sp]
   16660:	add	r2, r2, #1
   16664:	mvn	r3, #-2147483648	; 0x80000000
   16668:	moveq	r0, #0
   1666c:	bl	173fc <__assert_fail@plt+0x609c>
   16670:	cmp	r4, sl
   16674:	ldr	r2, [sp, #44]	; 0x2c
   16678:	mov	fp, r0
   1667c:	str	r0, [r7]
   16680:	ldmeq	r4, {r0, r1}
   16684:	mov	r4, fp
   16688:	stmeq	fp, {r0, r1}
   1668c:	ldr	r0, [r7, #4]
   16690:	mov	r1, #0
   16694:	sub	r2, r2, r0
   16698:	add	r0, fp, r0, lsl #3
   1669c:	lsl	r2, r2, #3
   166a0:	bl	1121c <memset@plt>
   166a4:	ldr	r3, [sp, #44]	; 0x2c
   166a8:	str	r3, [r7, #4]
   166ac:	ldr	r3, [r5, #4]
   166b0:	add	sl, r4, r6, lsl #3
   166b4:	orr	r3, r3, #1
   166b8:	str	r3, [sp, #28]
   166bc:	add	r3, r5, #8
   166c0:	str	r3, [sp, #36]	; 0x24
   166c4:	ldr	r3, [r5, #44]	; 0x2c
   166c8:	ldr	fp, [r4, r6, lsl #3]
   166cc:	ldr	r7, [sl, #4]
   166d0:	str	r3, [sp, #16]
   166d4:	ldr	r3, [r5, #40]	; 0x28
   166d8:	mov	r2, r8
   166dc:	str	r3, [sp, #12]
   166e0:	add	r3, r5, #8
   166e4:	str	r3, [sp, #8]
   166e8:	ldr	r3, [sp, #28]
   166ec:	mov	r1, fp
   166f0:	str	r3, [sp, #4]
   166f4:	ldr	r3, [r5]
   166f8:	mov	r0, r7
   166fc:	str	r3, [sp]
   16700:	mov	r3, r9
   16704:	bl	158b8 <__assert_fail@plt+0x4558>
   16708:	cmp	fp, r0
   1670c:	bhi	16774 <__assert_fail@plt+0x5414>
   16710:	ldr	r3, [pc, #120]	; 16790 <__assert_fail@plt+0x5430>
   16714:	add	fp, r0, #1
   16718:	cmp	r7, r3
   1671c:	str	fp, [r4, r6, lsl #3]
   16720:	beq	1672c <__assert_fail@plt+0x53cc>
   16724:	mov	r0, r7
   16728:	bl	129e4 <__assert_fail@plt+0x1684>
   1672c:	mov	r0, fp
   16730:	bl	172b4 <__assert_fail@plt+0x5f54>
   16734:	ldr	r3, [r5, #44]	; 0x2c
   16738:	mov	r2, r8
   1673c:	mov	r1, fp
   16740:	str	r0, [sl, #4]
   16744:	str	r3, [sp, #16]
   16748:	ldr	r3, [r5, #40]	; 0x28
   1674c:	mov	r7, r0
   16750:	str	r3, [sp, #12]
   16754:	add	r3, r5, #8
   16758:	str	r3, [sp, #8]
   1675c:	ldr	r3, [sp, #28]
   16760:	str	r3, [sp, #4]
   16764:	ldr	r3, [r5]
   16768:	str	r3, [sp]
   1676c:	mov	r3, r9
   16770:	bl	158b8 <__assert_fail@plt+0x4558>
   16774:	ldr	r3, [sp, #24]
   16778:	ldr	r2, [sp, #32]
   1677c:	mov	r0, r7
   16780:	str	r2, [r3]
   16784:	add	sp, sp, #52	; 0x34
   16788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1678c:	andeq	sl, r2, r0, asr #2
   16790:	andeq	sl, r2, r4, asr #3
   16794:	push	{r4, r5, r6, lr}
   16798:	mov	r5, r0
   1679c:	bl	11204 <__errno_location@plt>
   167a0:	cmp	r5, #0
   167a4:	mov	r1, #48	; 0x30
   167a8:	ldr	r6, [r0]
   167ac:	mov	r4, r0
   167b0:	ldr	r0, [pc, #12]	; 167c4 <__assert_fail@plt+0x5464>
   167b4:	movne	r0, r5
   167b8:	bl	17690 <__assert_fail@plt+0x6330>
   167bc:	str	r6, [r4]
   167c0:	pop	{r4, r5, r6, pc}
   167c4:	andeq	sl, r2, r4, asr #5
   167c8:	ldr	r3, [pc, #12]	; 167dc <__assert_fail@plt+0x547c>
   167cc:	cmp	r0, #0
   167d0:	moveq	r0, r3
   167d4:	ldr	r0, [r0]
   167d8:	bx	lr
   167dc:	andeq	sl, r2, r4, asr #5
   167e0:	ldr	r3, [pc, #12]	; 167f4 <__assert_fail@plt+0x5494>
   167e4:	cmp	r0, #0
   167e8:	moveq	r0, r3
   167ec:	str	r1, [r0]
   167f0:	bx	lr
   167f4:	andeq	sl, r2, r4, asr #5
   167f8:	ldr	r3, [pc, #52]	; 16834 <__assert_fail@plt+0x54d4>
   167fc:	cmp	r0, #0
   16800:	moveq	r0, r3
   16804:	add	r3, r0, #8
   16808:	push	{lr}		; (str lr, [sp, #-4]!)
   1680c:	lsr	lr, r1, #5
   16810:	and	r1, r1, #31
   16814:	ldr	ip, [r3, lr, lsl #2]
   16818:	lsr	r0, ip, r1
   1681c:	eor	r2, r2, r0
   16820:	and	r2, r2, #1
   16824:	and	r0, r0, #1
   16828:	eor	r1, ip, r2, lsl r1
   1682c:	str	r1, [r3, lr, lsl #2]
   16830:	pop	{pc}		; (ldr pc, [sp], #4)
   16834:	andeq	sl, r2, r4, asr #5
   16838:	ldr	r3, [pc, #16]	; 16850 <__assert_fail@plt+0x54f0>
   1683c:	cmp	r0, #0
   16840:	movne	r3, r0
   16844:	ldr	r0, [r3, #4]
   16848:	str	r1, [r3, #4]
   1684c:	bx	lr
   16850:	andeq	sl, r2, r4, asr #5
   16854:	ldr	r3, [pc, #44]	; 16888 <__assert_fail@plt+0x5528>
   16858:	cmp	r0, #0
   1685c:	moveq	r0, r3
   16860:	mov	r3, #10
   16864:	cmp	r2, #0
   16868:	cmpne	r1, #0
   1686c:	str	r3, [r0]
   16870:	bne	1687c <__assert_fail@plt+0x551c>
   16874:	push	{r4, lr}
   16878:	bl	11318 <abort@plt>
   1687c:	str	r1, [r0, #40]	; 0x28
   16880:	str	r2, [r0, #44]	; 0x2c
   16884:	bx	lr
   16888:	andeq	sl, r2, r4, asr #5
   1688c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16890:	sub	sp, sp, #24
   16894:	mov	sl, r3
   16898:	ldr	r4, [sp, #56]	; 0x38
   1689c:	ldr	r3, [pc, #100]	; 16908 <__assert_fail@plt+0x55a8>
   168a0:	cmp	r4, #0
   168a4:	moveq	r4, r3
   168a8:	mov	r7, r0
   168ac:	mov	r8, r1
   168b0:	mov	r9, r2
   168b4:	bl	11204 <__errno_location@plt>
   168b8:	ldr	r3, [r4, #44]	; 0x2c
   168bc:	mov	r2, r9
   168c0:	mov	r1, r8
   168c4:	ldr	r6, [r0]
   168c8:	str	r3, [sp, #16]
   168cc:	ldr	r3, [r4, #40]	; 0x28
   168d0:	mov	r5, r0
   168d4:	str	r3, [sp, #12]
   168d8:	add	r3, r4, #8
   168dc:	str	r3, [sp, #8]
   168e0:	ldr	r3, [r4, #4]
   168e4:	mov	r0, r7
   168e8:	str	r3, [sp, #4]
   168ec:	ldr	r3, [r4]
   168f0:	str	r3, [sp]
   168f4:	mov	r3, sl
   168f8:	bl	158b8 <__assert_fail@plt+0x4558>
   168fc:	str	r6, [r5]
   16900:	add	sp, sp, #24
   16904:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16908:	andeq	sl, r2, r4, asr #5
   1690c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16910:	cmp	r3, #0
   16914:	sub	sp, sp, #44	; 0x2c
   16918:	ldr	r4, [pc, #188]	; 169dc <__assert_fail@plt+0x567c>
   1691c:	mov	r6, r2
   16920:	movne	r4, r3
   16924:	mov	sl, r1
   16928:	mov	r9, r0
   1692c:	bl	11204 <__errno_location@plt>
   16930:	ldr	r5, [r4, #4]
   16934:	add	fp, r4, #8
   16938:	cmp	r6, #0
   1693c:	orreq	r5, r5, #1
   16940:	mov	r1, #0
   16944:	mov	r2, r9
   16948:	ldr	r3, [r0]
   1694c:	mov	r8, r0
   16950:	str	r3, [sp, #28]
   16954:	ldr	r3, [r4, #44]	; 0x2c
   16958:	mov	r0, r1
   1695c:	str	r3, [sp, #16]
   16960:	ldr	r3, [r4, #40]	; 0x28
   16964:	stmib	sp, {r5, fp}
   16968:	str	r3, [sp, #12]
   1696c:	ldr	r3, [r4]
   16970:	str	r3, [sp]
   16974:	mov	r3, sl
   16978:	bl	158b8 <__assert_fail@plt+0x4558>
   1697c:	add	r1, r0, #1
   16980:	mov	r7, r0
   16984:	mov	r0, r1
   16988:	str	r1, [sp, #36]	; 0x24
   1698c:	bl	172b4 <__assert_fail@plt+0x5f54>
   16990:	ldr	r3, [r4, #44]	; 0x2c
   16994:	mov	r2, r9
   16998:	str	r3, [sp, #16]
   1699c:	ldr	r3, [r4, #40]	; 0x28
   169a0:	stmib	sp, {r5, fp}
   169a4:	str	r3, [sp, #12]
   169a8:	ldr	r3, [r4]
   169ac:	ldr	r1, [sp, #36]	; 0x24
   169b0:	str	r3, [sp]
   169b4:	mov	r3, sl
   169b8:	str	r0, [sp, #32]
   169bc:	bl	158b8 <__assert_fail@plt+0x4558>
   169c0:	ldr	r3, [sp, #28]
   169c4:	cmp	r6, #0
   169c8:	str	r3, [r8]
   169cc:	ldr	r0, [sp, #32]
   169d0:	strne	r7, [r6]
   169d4:	add	sp, sp, #44	; 0x2c
   169d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169dc:	andeq	sl, r2, r4, asr #5
   169e0:	mov	r3, r2
   169e4:	mov	r2, #0
   169e8:	b	1690c <__assert_fail@plt+0x55ac>
   169ec:	push	{r4, r5, r6, r7, r8, lr}
   169f0:	mov	r6, #1
   169f4:	ldr	r4, [pc, #104]	; 16a64 <__assert_fail@plt+0x5704>
   169f8:	ldr	r5, [r4]
   169fc:	add	r7, r5, #12
   16a00:	ldr	r3, [r4, #4]
   16a04:	add	r7, r7, #8
   16a08:	cmp	r6, r3
   16a0c:	blt	16a54 <__assert_fail@plt+0x56f4>
   16a10:	ldr	r0, [r5, #4]
   16a14:	ldr	r6, [pc, #76]	; 16a68 <__assert_fail@plt+0x5708>
   16a18:	cmp	r0, r6
   16a1c:	beq	16a30 <__assert_fail@plt+0x56d0>
   16a20:	bl	129e4 <__assert_fail@plt+0x1684>
   16a24:	mov	r3, #256	; 0x100
   16a28:	str	r3, [r4, #8]
   16a2c:	str	r6, [r4, #12]
   16a30:	ldr	r6, [pc, #52]	; 16a6c <__assert_fail@plt+0x570c>
   16a34:	cmp	r5, r6
   16a38:	beq	16a48 <__assert_fail@plt+0x56e8>
   16a3c:	mov	r0, r5
   16a40:	bl	129e4 <__assert_fail@plt+0x1684>
   16a44:	str	r6, [r4]
   16a48:	mov	r3, #1
   16a4c:	str	r3, [r4, #4]
   16a50:	pop	{r4, r5, r6, r7, r8, pc}
   16a54:	ldr	r0, [r7, #-8]
   16a58:	bl	129e4 <__assert_fail@plt+0x1684>
   16a5c:	add	r6, r6, #1
   16a60:	b	16a00 <__assert_fail@plt+0x56a0>
   16a64:	andeq	sl, r2, r0, asr #2
   16a68:	andeq	sl, r2, r4, asr #3
   16a6c:	andeq	sl, r2, r8, asr #2
   16a70:	ldr	r3, [pc, #4]	; 16a7c <__assert_fail@plt+0x571c>
   16a74:	mvn	r2, #0
   16a78:	b	165ec <__assert_fail@plt+0x528c>
   16a7c:	andeq	sl, r2, r4, asr #5
   16a80:	ldr	r3, [pc]	; 16a88 <__assert_fail@plt+0x5728>
   16a84:	b	165ec <__assert_fail@plt+0x528c>
   16a88:	andeq	sl, r2, r4, asr #5
   16a8c:	mov	r1, r0
   16a90:	mov	r0, #0
   16a94:	b	16a70 <__assert_fail@plt+0x5710>
   16a98:	mov	r2, r1
   16a9c:	mov	r1, r0
   16aa0:	mov	r0, #0
   16aa4:	b	16a80 <__assert_fail@plt+0x5720>
   16aa8:	push	{r4, r5, lr}
   16aac:	sub	sp, sp, #52	; 0x34
   16ab0:	mov	r5, r2
   16ab4:	mov	r4, r0
   16ab8:	mov	r0, sp
   16abc:	bl	15774 <__assert_fail@plt+0x4414>
   16ac0:	mov	r3, sp
   16ac4:	mvn	r2, #0
   16ac8:	mov	r1, r5
   16acc:	mov	r0, r4
   16ad0:	bl	165ec <__assert_fail@plt+0x528c>
   16ad4:	add	sp, sp, #52	; 0x34
   16ad8:	pop	{r4, r5, pc}
   16adc:	push	{r4, r5, r6, lr}
   16ae0:	sub	sp, sp, #48	; 0x30
   16ae4:	mov	r5, r2
   16ae8:	mov	r6, r3
   16aec:	mov	r4, r0
   16af0:	mov	r0, sp
   16af4:	bl	15774 <__assert_fail@plt+0x4414>
   16af8:	mov	r3, sp
   16afc:	mov	r2, r6
   16b00:	mov	r1, r5
   16b04:	mov	r0, r4
   16b08:	bl	165ec <__assert_fail@plt+0x528c>
   16b0c:	add	sp, sp, #48	; 0x30
   16b10:	pop	{r4, r5, r6, pc}
   16b14:	mov	r2, r1
   16b18:	mov	r1, r0
   16b1c:	mov	r0, #0
   16b20:	b	16aa8 <__assert_fail@plt+0x5748>
   16b24:	mov	r3, r2
   16b28:	mov	r2, r1
   16b2c:	mov	r1, r0
   16b30:	mov	r0, #0
   16b34:	b	16adc <__assert_fail@plt+0x577c>
   16b38:	push	{r4, r5, r6, lr}
   16b3c:	mov	r4, r0
   16b40:	ldr	lr, [pc, #80]	; 16b98 <__assert_fail@plt+0x5838>
   16b44:	mov	r5, r1
   16b48:	mov	r6, r2
   16b4c:	ldm	lr!, {r0, r1, r2, r3}
   16b50:	sub	sp, sp, #48	; 0x30
   16b54:	mov	ip, sp
   16b58:	stmia	ip!, {r0, r1, r2, r3}
   16b5c:	ldm	lr!, {r0, r1, r2, r3}
   16b60:	stmia	ip!, {r0, r1, r2, r3}
   16b64:	ldm	lr, {r0, r1, r2, r3}
   16b68:	stm	ip, {r0, r1, r2, r3}
   16b6c:	mov	r1, r6
   16b70:	mov	r2, #1
   16b74:	mov	r0, sp
   16b78:	bl	167f8 <__assert_fail@plt+0x5498>
   16b7c:	mov	r3, sp
   16b80:	mov	r2, r5
   16b84:	mov	r1, r4
   16b88:	mov	r0, #0
   16b8c:	bl	165ec <__assert_fail@plt+0x528c>
   16b90:	add	sp, sp, #48	; 0x30
   16b94:	pop	{r4, r5, r6, pc}
   16b98:	andeq	sl, r2, r4, asr #5
   16b9c:	mov	r2, r1
   16ba0:	mvn	r1, #0
   16ba4:	b	16b38 <__assert_fail@plt+0x57d8>
   16ba8:	mov	r1, #58	; 0x3a
   16bac:	b	16b9c <__assert_fail@plt+0x583c>
   16bb0:	mov	r2, #58	; 0x3a
   16bb4:	b	16b38 <__assert_fail@plt+0x57d8>
   16bb8:	push	{r4, r5, lr}
   16bbc:	sub	sp, sp, #100	; 0x64
   16bc0:	mov	r4, r0
   16bc4:	mov	r0, sp
   16bc8:	mov	r5, r2
   16bcc:	bl	15774 <__assert_fail@plt+0x4414>
   16bd0:	mov	ip, sp
   16bd4:	add	lr, sp, #48	; 0x30
   16bd8:	ldm	ip!, {r0, r1, r2, r3}
   16bdc:	stmia	lr!, {r0, r1, r2, r3}
   16be0:	ldm	ip!, {r0, r1, r2, r3}
   16be4:	stmia	lr!, {r0, r1, r2, r3}
   16be8:	ldm	ip, {r0, r1, r2, r3}
   16bec:	stm	lr, {r0, r1, r2, r3}
   16bf0:	mov	r2, #1
   16bf4:	mov	r1, #58	; 0x3a
   16bf8:	add	r0, sp, #48	; 0x30
   16bfc:	bl	167f8 <__assert_fail@plt+0x5498>
   16c00:	add	r3, sp, #48	; 0x30
   16c04:	mvn	r2, #0
   16c08:	mov	r1, r5
   16c0c:	mov	r0, r4
   16c10:	bl	165ec <__assert_fail@plt+0x528c>
   16c14:	add	sp, sp, #100	; 0x64
   16c18:	pop	{r4, r5, pc}
   16c1c:	push	{r4, r5, r6, r7, lr}
   16c20:	mov	r4, r0
   16c24:	ldr	lr, [pc, #84]	; 16c80 <__assert_fail@plt+0x5920>
   16c28:	mov	r6, r1
   16c2c:	mov	r7, r2
   16c30:	mov	r5, r3
   16c34:	ldm	lr!, {r0, r1, r2, r3}
   16c38:	sub	sp, sp, #52	; 0x34
   16c3c:	mov	ip, sp
   16c40:	stmia	ip!, {r0, r1, r2, r3}
   16c44:	ldm	lr!, {r0, r1, r2, r3}
   16c48:	stmia	ip!, {r0, r1, r2, r3}
   16c4c:	ldm	lr, {r0, r1, r2, r3}
   16c50:	stm	ip, {r0, r1, r2, r3}
   16c54:	mov	r2, r7
   16c58:	mov	r1, r6
   16c5c:	mov	r0, sp
   16c60:	bl	16854 <__assert_fail@plt+0x54f4>
   16c64:	mov	r3, sp
   16c68:	ldr	r2, [sp, #72]	; 0x48
   16c6c:	mov	r1, r5
   16c70:	mov	r0, r4
   16c74:	bl	165ec <__assert_fail@plt+0x528c>
   16c78:	add	sp, sp, #52	; 0x34
   16c7c:	pop	{r4, r5, r6, r7, pc}
   16c80:	andeq	sl, r2, r4, asr #5
   16c84:	mvn	ip, #0
   16c88:	push	{r0, r1, r2, lr}
   16c8c:	str	ip, [sp]
   16c90:	bl	16c1c <__assert_fail@plt+0x58bc>
   16c94:	add	sp, sp, #12
   16c98:	pop	{pc}		; (ldr pc, [sp], #4)
   16c9c:	mov	r3, r2
   16ca0:	mov	r2, r1
   16ca4:	mov	r1, r0
   16ca8:	mov	r0, #0
   16cac:	b	16c84 <__assert_fail@plt+0x5924>
   16cb0:	push	{r0, r1, r2, lr}
   16cb4:	str	r3, [sp]
   16cb8:	mov	r3, r2
   16cbc:	mov	r2, r1
   16cc0:	mov	r1, r0
   16cc4:	mov	r0, #0
   16cc8:	bl	16c1c <__assert_fail@plt+0x58bc>
   16ccc:	add	sp, sp, #12
   16cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   16cd4:	ldr	r3, [pc]	; 16cdc <__assert_fail@plt+0x597c>
   16cd8:	b	165ec <__assert_fail@plt+0x528c>
   16cdc:	andeq	sl, r2, r0, asr r1
   16ce0:	mov	r2, r1
   16ce4:	mov	r1, r0
   16ce8:	mov	r0, #0
   16cec:	b	16cd4 <__assert_fail@plt+0x5974>
   16cf0:	mvn	r2, #0
   16cf4:	b	16cd4 <__assert_fail@plt+0x5974>
   16cf8:	mov	r1, r0
   16cfc:	mov	r0, #0
   16d00:	b	16cf0 <__assert_fail@plt+0x5990>
   16d04:	push	{r4, lr}
   16d08:	sub	sp, sp, #104	; 0x68
   16d0c:	mov	r4, r0
   16d10:	mov	r1, sp
   16d14:	ldr	r0, [pc, #36]	; 16d40 <__assert_fail@plt+0x59e0>
   16d18:	bl	18998 <__assert_fail@plt+0x7638>
   16d1c:	cmp	r0, #0
   16d20:	movne	r4, #0
   16d24:	ldrdeq	r2, [sp, #96]	; 0x60
   16d28:	strdeq	r2, [r4]
   16d2c:	ldrdeq	r2, [sp]
   16d30:	strdeq	r2, [r4, #8]
   16d34:	mov	r0, r4
   16d38:	add	sp, sp, #104	; 0x68
   16d3c:	pop	{r4, pc}
   16d40:	andeq	r9, r1, r8, ror ip
   16d44:	cmp	r0, #2
   16d48:	push	{r4, r5, r6, r7, r8, lr}
   16d4c:	mov	r4, r0
   16d50:	bhi	16d78 <__assert_fail@plt+0x5a18>
   16d54:	bl	18250 <__assert_fail@plt+0x6ef0>
   16d58:	mov	r6, r0
   16d5c:	bl	11204 <__errno_location@plt>
   16d60:	ldr	r7, [r0]
   16d64:	mov	r5, r0
   16d68:	mov	r0, r4
   16d6c:	mov	r4, r6
   16d70:	bl	11324 <close@plt>
   16d74:	str	r7, [r5]
   16d78:	mov	r0, r4
   16d7c:	pop	{r4, r5, r6, r7, r8, pc}
   16d80:	push	{r4, r5, r6, lr}
   16d84:	sub	sp, sp, #32
   16d88:	cmp	r1, #0
   16d8c:	mov	r5, r0
   16d90:	ldr	r4, [sp, #48]	; 0x30
   16d94:	ldr	r6, [sp, #52]	; 0x34
   16d98:	beq	16e4c <__assert_fail@plt+0x5aec>
   16d9c:	stm	sp, {r2, r3}
   16da0:	mov	r3, r1
   16da4:	ldr	r2, [pc, #860]	; 17108 <__assert_fail@plt+0x5da8>
   16da8:	mov	r1, #1
   16dac:	bl	1124c <__fprintf_chk@plt>
   16db0:	mov	r2, #5
   16db4:	ldr	r1, [pc, #848]	; 1710c <__assert_fail@plt+0x5dac>
   16db8:	mov	r0, #0
   16dbc:	bl	110d8 <dcgettext@plt>
   16dc0:	ldr	r3, [pc, #840]	; 17110 <__assert_fail@plt+0x5db0>
   16dc4:	ldr	r2, [pc, #840]	; 17114 <__assert_fail@plt+0x5db4>
   16dc8:	str	r3, [sp]
   16dcc:	mov	r1, #1
   16dd0:	mov	r3, r0
   16dd4:	mov	r0, r5
   16dd8:	bl	1124c <__fprintf_chk@plt>
   16ddc:	mov	r1, r5
   16de0:	mov	r0, #10
   16de4:	bl	110cc <fputc_unlocked@plt>
   16de8:	mov	r2, #5
   16dec:	ldr	r1, [pc, #804]	; 17118 <__assert_fail@plt+0x5db8>
   16df0:	mov	r0, #0
   16df4:	bl	110d8 <dcgettext@plt>
   16df8:	mov	r1, #1
   16dfc:	ldr	r3, [pc, #792]	; 1711c <__assert_fail@plt+0x5dbc>
   16e00:	mov	r2, r0
   16e04:	mov	r0, r5
   16e08:	bl	1124c <__fprintf_chk@plt>
   16e0c:	mov	r1, r5
   16e10:	mov	r0, #10
   16e14:	bl	110cc <fputc_unlocked@plt>
   16e18:	cmp	r6, #9
   16e1c:	ldrls	pc, [pc, r6, lsl #2]
   16e20:	b	170fc <__assert_fail@plt+0x5d9c>
   16e24:	andeq	r6, r1, ip, lsr pc
   16e28:	andeq	r6, r1, r4, ror #28
   16e2c:	muleq	r1, r0, lr
   16e30:	andeq	r6, r1, r4, asr #29
   16e34:	andeq	r6, r1, r0, lsl #30
   16e38:	andeq	r6, r1, r4, asr #30
   16e3c:	andeq	r6, r1, ip, lsl #31
   16e40:	ldrdeq	r6, [r1], -ip
   16e44:	andeq	r7, r1, r4, lsr r0
   16e48:	muleq	r1, r4, r0
   16e4c:	str	r3, [sp]
   16e50:	mov	r1, #1
   16e54:	mov	r3, r2
   16e58:	ldr	r2, [pc, #704]	; 17120 <__assert_fail@plt+0x5dc0>
   16e5c:	bl	1124c <__fprintf_chk@plt>
   16e60:	b	16db0 <__assert_fail@plt+0x5a50>
   16e64:	mov	r2, #5
   16e68:	ldr	r1, [pc, #692]	; 17124 <__assert_fail@plt+0x5dc4>
   16e6c:	mov	r0, #0
   16e70:	bl	110d8 <dcgettext@plt>
   16e74:	ldr	r3, [r4]
   16e78:	mov	r1, #1
   16e7c:	mov	r2, r0
   16e80:	mov	r0, r5
   16e84:	add	sp, sp, #32
   16e88:	pop	{r4, r5, r6, lr}
   16e8c:	b	1124c <__fprintf_chk@plt>
   16e90:	mov	r2, #5
   16e94:	ldr	r1, [pc, #652]	; 17128 <__assert_fail@plt+0x5dc8>
   16e98:	mov	r0, #0
   16e9c:	bl	110d8 <dcgettext@plt>
   16ea0:	ldr	r3, [r4, #4]
   16ea4:	mov	r1, #1
   16ea8:	str	r3, [sp, #48]	; 0x30
   16eac:	ldr	r3, [r4]
   16eb0:	mov	r2, r0
   16eb4:	mov	r0, r5
   16eb8:	add	sp, sp, #32
   16ebc:	pop	{r4, r5, r6, lr}
   16ec0:	b	1124c <__fprintf_chk@plt>
   16ec4:	mov	r2, #5
   16ec8:	ldr	r1, [pc, #604]	; 1712c <__assert_fail@plt+0x5dcc>
   16ecc:	mov	r0, #0
   16ed0:	bl	110d8 <dcgettext@plt>
   16ed4:	ldr	r3, [r4, #8]
   16ed8:	mov	r1, #1
   16edc:	str	r3, [sp, #52]	; 0x34
   16ee0:	ldr	r3, [r4, #4]
   16ee4:	str	r3, [sp, #48]	; 0x30
   16ee8:	ldr	r3, [r4]
   16eec:	mov	r2, r0
   16ef0:	mov	r0, r5
   16ef4:	add	sp, sp, #32
   16ef8:	pop	{r4, r5, r6, lr}
   16efc:	b	1124c <__fprintf_chk@plt>
   16f00:	mov	r2, #5
   16f04:	ldr	r1, [pc, #548]	; 17130 <__assert_fail@plt+0x5dd0>
   16f08:	mov	r0, #0
   16f0c:	bl	110d8 <dcgettext@plt>
   16f10:	ldr	r3, [r4, #12]
   16f14:	mov	r1, #1
   16f18:	str	r3, [sp, #8]
   16f1c:	ldr	r3, [r4, #8]
   16f20:	str	r3, [sp, #4]
   16f24:	ldr	r3, [r4, #4]
   16f28:	str	r3, [sp]
   16f2c:	ldr	r3, [r4]
   16f30:	mov	r2, r0
   16f34:	mov	r0, r5
   16f38:	bl	1124c <__fprintf_chk@plt>
   16f3c:	add	sp, sp, #32
   16f40:	pop	{r4, r5, r6, pc}
   16f44:	mov	r2, #5
   16f48:	ldr	r1, [pc, #484]	; 17134 <__assert_fail@plt+0x5dd4>
   16f4c:	mov	r0, #0
   16f50:	bl	110d8 <dcgettext@plt>
   16f54:	ldr	r3, [r4, #16]
   16f58:	mov	r1, #1
   16f5c:	str	r3, [sp, #12]
   16f60:	ldr	r3, [r4, #12]
   16f64:	str	r3, [sp, #8]
   16f68:	ldr	r3, [r4, #8]
   16f6c:	str	r3, [sp, #4]
   16f70:	ldr	r3, [r4, #4]
   16f74:	str	r3, [sp]
   16f78:	ldr	r3, [r4]
   16f7c:	mov	r2, r0
   16f80:	mov	r0, r5
   16f84:	bl	1124c <__fprintf_chk@plt>
   16f88:	b	16f3c <__assert_fail@plt+0x5bdc>
   16f8c:	mov	r2, #5
   16f90:	ldr	r1, [pc, #416]	; 17138 <__assert_fail@plt+0x5dd8>
   16f94:	mov	r0, #0
   16f98:	bl	110d8 <dcgettext@plt>
   16f9c:	ldr	r3, [r4, #20]
   16fa0:	mov	r1, #1
   16fa4:	str	r3, [sp, #16]
   16fa8:	ldr	r3, [r4, #16]
   16fac:	str	r3, [sp, #12]
   16fb0:	ldr	r3, [r4, #12]
   16fb4:	str	r3, [sp, #8]
   16fb8:	ldr	r3, [r4, #8]
   16fbc:	str	r3, [sp, #4]
   16fc0:	ldr	r3, [r4, #4]
   16fc4:	str	r3, [sp]
   16fc8:	ldr	r3, [r4]
   16fcc:	mov	r2, r0
   16fd0:	mov	r0, r5
   16fd4:	bl	1124c <__fprintf_chk@plt>
   16fd8:	b	16f3c <__assert_fail@plt+0x5bdc>
   16fdc:	mov	r2, #5
   16fe0:	ldr	r1, [pc, #340]	; 1713c <__assert_fail@plt+0x5ddc>
   16fe4:	mov	r0, #0
   16fe8:	bl	110d8 <dcgettext@plt>
   16fec:	ldr	r3, [r4, #24]
   16ff0:	mov	r1, #1
   16ff4:	str	r3, [sp, #20]
   16ff8:	ldr	r3, [r4, #20]
   16ffc:	str	r3, [sp, #16]
   17000:	ldr	r3, [r4, #16]
   17004:	str	r3, [sp, #12]
   17008:	ldr	r3, [r4, #12]
   1700c:	str	r3, [sp, #8]
   17010:	ldr	r3, [r4, #8]
   17014:	str	r3, [sp, #4]
   17018:	ldr	r3, [r4, #4]
   1701c:	str	r3, [sp]
   17020:	ldr	r3, [r4]
   17024:	mov	r2, r0
   17028:	mov	r0, r5
   1702c:	bl	1124c <__fprintf_chk@plt>
   17030:	b	16f3c <__assert_fail@plt+0x5bdc>
   17034:	mov	r2, #5
   17038:	ldr	r1, [pc, #256]	; 17140 <__assert_fail@plt+0x5de0>
   1703c:	mov	r0, #0
   17040:	bl	110d8 <dcgettext@plt>
   17044:	ldr	r3, [r4, #28]
   17048:	mov	r1, #1
   1704c:	str	r3, [sp, #24]
   17050:	ldr	r3, [r4, #24]
   17054:	str	r3, [sp, #20]
   17058:	ldr	r3, [r4, #20]
   1705c:	str	r3, [sp, #16]
   17060:	ldr	r3, [r4, #16]
   17064:	str	r3, [sp, #12]
   17068:	ldr	r3, [r4, #12]
   1706c:	str	r3, [sp, #8]
   17070:	ldr	r3, [r4, #8]
   17074:	str	r3, [sp, #4]
   17078:	ldr	r3, [r4, #4]
   1707c:	str	r3, [sp]
   17080:	ldr	r3, [r4]
   17084:	mov	r2, r0
   17088:	mov	r0, r5
   1708c:	bl	1124c <__fprintf_chk@plt>
   17090:	b	16f3c <__assert_fail@plt+0x5bdc>
   17094:	ldr	r1, [pc, #168]	; 17144 <__assert_fail@plt+0x5de4>
   17098:	mov	r2, #5
   1709c:	mov	r0, #0
   170a0:	bl	110d8 <dcgettext@plt>
   170a4:	ldr	r3, [r4, #32]
   170a8:	mov	r1, #1
   170ac:	str	r3, [sp, #28]
   170b0:	ldr	r3, [r4, #28]
   170b4:	str	r3, [sp, #24]
   170b8:	ldr	r3, [r4, #24]
   170bc:	str	r3, [sp, #20]
   170c0:	ldr	r3, [r4, #20]
   170c4:	str	r3, [sp, #16]
   170c8:	ldr	r3, [r4, #16]
   170cc:	str	r3, [sp, #12]
   170d0:	ldr	r3, [r4, #12]
   170d4:	str	r3, [sp, #8]
   170d8:	ldr	r3, [r4, #8]
   170dc:	str	r3, [sp, #4]
   170e0:	ldr	r3, [r4, #4]
   170e4:	str	r3, [sp]
   170e8:	ldr	r3, [r4]
   170ec:	mov	r2, r0
   170f0:	mov	r0, r5
   170f4:	bl	1124c <__fprintf_chk@plt>
   170f8:	b	16f3c <__assert_fail@plt+0x5bdc>
   170fc:	mov	r2, #5
   17100:	ldr	r1, [pc, #64]	; 17148 <__assert_fail@plt+0x5de8>
   17104:	b	1709c <__assert_fail@plt+0x5d3c>
   17108:	muleq	r1, r9, r9
   1710c:	andeq	r9, r1, ip, lsr #19
   17110:	andeq	r0, r0, r6, ror #15
   17114:	andeq	r9, r1, sl, ror ip
   17118:			; <UNDEFINED> instruction: 0x000199b0
   1711c:	andeq	r9, r1, fp, asr sl
   17120:	andeq	r9, r1, r5, lsr #19
   17124:	andeq	r9, r1, sp, ror sl
   17128:	andeq	r9, r1, sp, lsl #21
   1712c:	andeq	r9, r1, r4, lsr #21
   17130:	andeq	r9, r1, r0, asr #21
   17134:	andeq	r9, r1, r0, ror #21
   17138:	andeq	r9, r1, r4, lsl #22
   1713c:	andeq	r9, r1, ip, lsr #22
   17140:	andeq	r9, r1, r8, asr fp
   17144:	andeq	r9, r1, r8, lsl #23
   17148:			; <UNDEFINED> instruction: 0x00019bbc
   1714c:	push	{r0, r1, r4, lr}
   17150:	mov	ip, #0
   17154:	ldr	lr, [sp, #16]
   17158:	ldr	r4, [lr, ip, lsl #2]
   1715c:	cmp	r4, #0
   17160:	bne	17178 <__assert_fail@plt+0x5e18>
   17164:	str	ip, [sp, #4]
   17168:	str	lr, [sp]
   1716c:	bl	16d80 <__assert_fail@plt+0x5a20>
   17170:	add	sp, sp, #8
   17174:	pop	{r4, pc}
   17178:	add	ip, ip, #1
   1717c:	b	17158 <__assert_fail@plt+0x5df8>
   17180:	push	{r4, r5, lr}
   17184:	sub	sp, sp, #52	; 0x34
   17188:	mov	ip, #0
   1718c:	ldr	r5, [sp, #64]	; 0x40
   17190:	add	lr, sp, #8
   17194:	ldr	r4, [r5, ip, lsl #2]
   17198:	cmp	r4, #0
   1719c:	str	r4, [lr, ip, lsl #2]
   171a0:	beq	171b0 <__assert_fail@plt+0x5e50>
   171a4:	add	ip, ip, #1
   171a8:	cmp	ip, #10
   171ac:	bne	17194 <__assert_fail@plt+0x5e34>
   171b0:	str	ip, [sp, #4]
   171b4:	str	lr, [sp]
   171b8:	bl	16d80 <__assert_fail@plt+0x5a20>
   171bc:	add	sp, sp, #52	; 0x34
   171c0:	pop	{r4, r5, pc}
   171c4:	push	{r3}		; (str r3, [sp, #-4]!)
   171c8:	push	{r0, r1, r2, r3, lr}
   171cc:	add	r3, sp, #24
   171d0:	str	r3, [sp, #12]
   171d4:	str	r3, [sp]
   171d8:	ldr	r3, [sp, #20]
   171dc:	bl	17180 <__assert_fail@plt+0x5e20>
   171e0:	add	sp, sp, #16
   171e4:	pop	{lr}		; (ldr lr, [sp], #4)
   171e8:	add	sp, sp, #4
   171ec:	bx	lr
   171f0:	ldr	r3, [pc, #116]	; 1726c <__assert_fail@plt+0x5f0c>
   171f4:	push	{r4, lr}
   171f8:	mov	r0, #10
   171fc:	ldr	r1, [r3]
   17200:	bl	110cc <fputc_unlocked@plt>
   17204:	mov	r2, #5
   17208:	ldr	r1, [pc, #96]	; 17270 <__assert_fail@plt+0x5f10>
   1720c:	mov	r0, #0
   17210:	bl	110d8 <dcgettext@plt>
   17214:	ldr	r2, [pc, #88]	; 17274 <__assert_fail@plt+0x5f14>
   17218:	mov	r1, r0
   1721c:	mov	r0, #1
   17220:	bl	11228 <__printf_chk@plt>
   17224:	mov	r2, #5
   17228:	ldr	r1, [pc, #72]	; 17278 <__assert_fail@plt+0x5f18>
   1722c:	mov	r0, #0
   17230:	bl	110d8 <dcgettext@plt>
   17234:	ldr	r3, [pc, #64]	; 1727c <__assert_fail@plt+0x5f1c>
   17238:	ldr	r2, [pc, #64]	; 17280 <__assert_fail@plt+0x5f20>
   1723c:	mov	r1, r0
   17240:	mov	r0, #1
   17244:	bl	11228 <__printf_chk@plt>
   17248:	mov	r2, #5
   1724c:	ldr	r1, [pc, #48]	; 17284 <__assert_fail@plt+0x5f24>
   17250:	mov	r0, #0
   17254:	bl	110d8 <dcgettext@plt>
   17258:	ldr	r2, [pc, #40]	; 17288 <__assert_fail@plt+0x5f28>
   1725c:	pop	{r4, lr}
   17260:	mov	r1, r0
   17264:	mov	r0, #1
   17268:	b	11228 <__printf_chk@plt>
   1726c:	muleq	r2, r4, r1
   17270:	strdeq	r9, [r1], -r8
   17274:	andeq	r9, r1, ip, lsl #24
   17278:	andeq	r9, r1, r2, lsr #24
   1727c:	strdeq	r9, [r1], -sl
   17280:	andeq	r9, r1, r2, lsr #4
   17284:	andeq	r9, r1, r6, lsr ip
   17288:	andeq	r9, r1, sp, asr ip
   1728c:	push	{r4, lr}
   17290:	bl	17c24 <__assert_fail@plt+0x68c4>
   17294:	cmp	r0, #0
   17298:	popne	{r4, pc}
   1729c:	bl	17720 <__assert_fail@plt+0x63c0>
   172a0:	push	{r4, lr}
   172a4:	bl	17c24 <__assert_fail@plt+0x68c4>
   172a8:	cmp	r0, #0
   172ac:	popne	{r4, pc}
   172b0:	bl	17720 <__assert_fail@plt+0x63c0>
   172b4:	b	1728c <__assert_fail@plt+0x5f2c>
   172b8:	push	{r4, r5, r6, lr}
   172bc:	mov	r5, r0
   172c0:	mov	r4, r1
   172c4:	bl	17c64 <__assert_fail@plt+0x6904>
   172c8:	cmp	r0, #0
   172cc:	popne	{r4, r5, r6, pc}
   172d0:	adds	r4, r4, #0
   172d4:	movne	r4, #1
   172d8:	cmp	r5, #0
   172dc:	orreq	r4, r4, #1
   172e0:	cmp	r4, #0
   172e4:	popeq	{r4, r5, r6, pc}
   172e8:	bl	17720 <__assert_fail@plt+0x63c0>
   172ec:	push	{r4, lr}
   172f0:	cmp	r1, #0
   172f4:	orreq	r1, r1, #1
   172f8:	bl	17c64 <__assert_fail@plt+0x6904>
   172fc:	cmp	r0, #0
   17300:	popne	{r4, pc}
   17304:	bl	17720 <__assert_fail@plt+0x63c0>
   17308:	push	{r4, r5, r6, lr}
   1730c:	mov	r6, r0
   17310:	mov	r5, r1
   17314:	mov	r4, r2
   17318:	bl	18204 <__assert_fail@plt+0x6ea4>
   1731c:	cmp	r0, #0
   17320:	popne	{r4, r5, r6, pc}
   17324:	cmp	r6, #0
   17328:	beq	17338 <__assert_fail@plt+0x5fd8>
   1732c:	cmp	r5, #0
   17330:	cmpne	r4, #0
   17334:	popeq	{r4, r5, r6, pc}
   17338:	bl	17720 <__assert_fail@plt+0x63c0>
   1733c:	b	17308 <__assert_fail@plt+0x5fa8>
   17340:	cmp	r2, #0
   17344:	cmpne	r1, #0
   17348:	moveq	r2, #1
   1734c:	moveq	r1, r2
   17350:	push	{r4, lr}
   17354:	bl	18204 <__assert_fail@plt+0x6ea4>
   17358:	cmp	r0, #0
   1735c:	popne	{r4, pc}
   17360:	bl	17720 <__assert_fail@plt+0x63c0>
   17364:	mov	r2, r1
   17368:	mov	r1, r0
   1736c:	mov	r0, #0
   17370:	b	17308 <__assert_fail@plt+0x5fa8>
   17374:	mov	r2, r1
   17378:	mov	r1, r0
   1737c:	mov	r0, #0
   17380:	b	17340 <__assert_fail@plt+0x5fe0>
   17384:	push	{r4, r5, r6, r7, r8, lr}
   17388:	subs	r7, r0, #0
   1738c:	mov	r5, r1
   17390:	mov	r6, r2
   17394:	ldr	r4, [r1]
   17398:	bne	173d4 <__assert_fail@plt+0x6074>
   1739c:	cmp	r4, #0
   173a0:	bne	173bc <__assert_fail@plt+0x605c>
   173a4:	mov	r1, r2
   173a8:	mov	r0, #64	; 0x40
   173ac:	bl	1833c <__assert_fail@plt+0x6fdc>
   173b0:	cmp	r0, #0
   173b4:	movne	r4, r0
   173b8:	addeq	r4, r0, #1
   173bc:	mov	r2, r6
   173c0:	mov	r1, r4
   173c4:	mov	r0, r7
   173c8:	bl	17308 <__assert_fail@plt+0x5fa8>
   173cc:	str	r4, [r5]
   173d0:	pop	{r4, r5, r6, r7, r8, pc}
   173d4:	lsr	r2, r4, #1
   173d8:	add	r3, r2, #1
   173dc:	mvn	r3, r3
   173e0:	cmp	r4, r3
   173e4:	addls	r4, r4, #1
   173e8:	addls	r4, r4, r2
   173ec:	bls	173bc <__assert_fail@plt+0x605c>
   173f0:	bl	17720 <__assert_fail@plt+0x63c0>
   173f4:	mov	r2, #1
   173f8:	b	17384 <__assert_fail@plt+0x6024>
   173fc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17400:	mov	sl, r0
   17404:	ldr	r8, [r1]
   17408:	mov	fp, r1
   1740c:	mov	r5, r2
   17410:	asrs	r4, r8, #1
   17414:	mov	r9, r3
   17418:	ldr	r7, [sp, #48]	; 0x30
   1741c:	bpl	174b8 <__assert_fail@plt+0x6158>
   17420:	rsb	r2, r4, #-2147483648	; 0x80000000
   17424:	cmp	r8, r2
   17428:	movge	r2, #0
   1742c:	movlt	r2, #1
   17430:	mvn	r3, r9
   17434:	cmp	r2, #0
   17438:	lsr	r3, r3, #31
   1743c:	addeq	r4, r4, r8
   17440:	mvnne	r4, #-2147483648	; 0x80000000
   17444:	mov	r0, r3
   17448:	cmp	r9, r4
   1744c:	movge	r0, #0
   17450:	andlt	r0, r0, #1
   17454:	cmp	r0, #0
   17458:	str	r3, [sp, #4]
   1745c:	bne	1762c <__assert_fail@plt+0x62cc>
   17460:	cmp	r7, #0
   17464:	bge	17578 <__assert_fail@plt+0x6218>
   17468:	cmp	r4, #0
   1746c:	bge	174d0 <__assert_fail@plt+0x6170>
   17470:	mov	r1, r7
   17474:	mvn	r0, #-2147483648	; 0x80000000
   17478:	bl	18548 <__assert_fail@plt+0x71e8>
   1747c:	cmp	r0, r4
   17480:	movle	r0, #0
   17484:	movgt	r0, #1
   17488:	cmp	r0, #0
   1748c:	mvnne	r6, #-2147483648	; 0x80000000
   17490:	beq	174e0 <__assert_fail@plt+0x6180>
   17494:	mov	r1, r7
   17498:	mov	r0, r6
   1749c:	bl	18548 <__assert_fail@plt+0x71e8>
   174a0:	mov	r1, r7
   174a4:	mov	r4, r0
   174a8:	mov	r0, r6
   174ac:	bl	18768 <__assert_fail@plt+0x7408>
   174b0:	sub	r1, r6, r1
   174b4:	b	174f0 <__assert_fail@plt+0x6190>
   174b8:	mvn	r2, #-2147483648	; 0x80000000
   174bc:	sub	r2, r2, r4
   174c0:	cmp	r8, r2
   174c4:	movle	r2, #0
   174c8:	movgt	r2, #1
   174cc:	b	17430 <__assert_fail@plt+0x60d0>
   174d0:	cmn	r7, #1
   174d4:	movne	r1, r7
   174d8:	movne	r0, #-2147483648	; 0x80000000
   174dc:	bne	17644 <__assert_fail@plt+0x62e4>
   174e0:	mul	r1, r7, r4
   174e4:	cmp	r1, #63	; 0x3f
   174e8:	movle	r6, #64	; 0x40
   174ec:	ble	17494 <__assert_fail@plt+0x6134>
   174f0:	cmp	sl, #0
   174f4:	sub	r2, r4, r8
   174f8:	streq	sl, [fp]
   174fc:	cmp	r2, r5
   17500:	bge	175d4 <__assert_fail@plt+0x6274>
   17504:	cmp	r5, #0
   17508:	bge	175a0 <__assert_fail@plt+0x6240>
   1750c:	rsb	r2, r5, #-2147483648	; 0x80000000
   17510:	cmp	r8, r2
   17514:	movge	r2, #0
   17518:	movlt	r2, #1
   1751c:	cmp	r2, #0
   17520:	bne	17574 <__assert_fail@plt+0x6214>
   17524:	ldr	r0, [sp, #4]
   17528:	add	r5, r8, r5
   1752c:	cmp	r9, r5
   17530:	movge	r0, #0
   17534:	andlt	r0, r0, #1
   17538:	cmp	r0, #0
   1753c:	mov	r4, r5
   17540:	bne	17574 <__assert_fail@plt+0x6214>
   17544:	cmp	r7, #0
   17548:	bge	175e8 <__assert_fail@plt+0x6288>
   1754c:	cmp	r5, #0
   17550:	bge	175c0 <__assert_fail@plt+0x6260>
   17554:	mov	r1, r7
   17558:	mvn	r0, #-2147483648	; 0x80000000
   1755c:	bl	18548 <__assert_fail@plt+0x71e8>
   17560:	cmp	r5, r0
   17564:	movge	r0, #0
   17568:	movlt	r0, #1
   1756c:	cmp	r0, #0
   17570:	beq	175d0 <__assert_fail@plt+0x6270>
   17574:	bl	17720 <__assert_fail@plt+0x63c0>
   17578:	beq	174e0 <__assert_fail@plt+0x6180>
   1757c:	cmp	r4, #0
   17580:	bge	1763c <__assert_fail@plt+0x62dc>
   17584:	cmn	r4, #1
   17588:	beq	174e0 <__assert_fail@plt+0x6180>
   1758c:	mov	r1, r4
   17590:	mov	r0, #-2147483648	; 0x80000000
   17594:	bl	18548 <__assert_fail@plt+0x71e8>
   17598:	cmp	r7, r0
   1759c:	b	17480 <__assert_fail@plt+0x6120>
   175a0:	cmp	r8, #0
   175a4:	blt	17524 <__assert_fail@plt+0x61c4>
   175a8:	mvn	r2, #-2147483648	; 0x80000000
   175ac:	sub	r2, r2, r5
   175b0:	cmp	r8, r2
   175b4:	movle	r2, #0
   175b8:	movgt	r2, #1
   175bc:	b	1751c <__assert_fail@plt+0x61bc>
   175c0:	cmn	r7, #1
   175c4:	movne	r1, r7
   175c8:	movne	r0, #-2147483648	; 0x80000000
   175cc:	bne	17620 <__assert_fail@plt+0x62c0>
   175d0:	mul	r1, r5, r7
   175d4:	mov	r0, sl
   175d8:	bl	172b8 <__assert_fail@plt+0x5f58>
   175dc:	str	r4, [fp]
   175e0:	add	sp, sp, #12
   175e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175e8:	beq	175d0 <__assert_fail@plt+0x6270>
   175ec:	cmp	r5, #0
   175f0:	movge	r1, r7
   175f4:	mvnge	r0, #-2147483648	; 0x80000000
   175f8:	bge	17620 <__assert_fail@plt+0x62c0>
   175fc:	cmn	r5, #1
   17600:	beq	175d0 <__assert_fail@plt+0x6270>
   17604:	mov	r1, r5
   17608:	mov	r0, #-2147483648	; 0x80000000
   1760c:	bl	18548 <__assert_fail@plt+0x71e8>
   17610:	cmp	r7, r0
   17614:	movle	r0, #0
   17618:	movgt	r0, #1
   1761c:	b	1756c <__assert_fail@plt+0x620c>
   17620:	bl	18548 <__assert_fail@plt+0x71e8>
   17624:	cmp	r5, r0
   17628:	b	17614 <__assert_fail@plt+0x62b4>
   1762c:	cmp	r7, #0
   17630:	mov	r4, r9
   17634:	blt	174d0 <__assert_fail@plt+0x6170>
   17638:	beq	174e0 <__assert_fail@plt+0x6180>
   1763c:	mov	r1, r7
   17640:	mvn	r0, #-2147483648	; 0x80000000
   17644:	bl	18548 <__assert_fail@plt+0x71e8>
   17648:	cmp	r0, r4
   1764c:	movge	r0, #0
   17650:	movlt	r0, #1
   17654:	b	17488 <__assert_fail@plt+0x6128>
   17658:	push	{r4, lr}
   1765c:	bl	17bdc <__assert_fail@plt+0x687c>
   17660:	cmp	r0, #0
   17664:	popne	{r4, pc}
   17668:	bl	17720 <__assert_fail@plt+0x63c0>
   1766c:	mov	r1, #1
   17670:	b	17658 <__assert_fail@plt+0x62f8>
   17674:	push	{r4, lr}
   17678:	bl	17bdc <__assert_fail@plt+0x687c>
   1767c:	cmp	r0, #0
   17680:	popne	{r4, pc}
   17684:	bl	17720 <__assert_fail@plt+0x63c0>
   17688:	mov	r1, #1
   1768c:	b	17674 <__assert_fail@plt+0x6314>
   17690:	push	{r4, r5, r6, lr}
   17694:	mov	r4, r1
   17698:	mov	r5, r0
   1769c:	mov	r0, r1
   176a0:	bl	1728c <__assert_fail@plt+0x5f2c>
   176a4:	mov	r2, r4
   176a8:	mov	r1, r5
   176ac:	pop	{r4, r5, r6, lr}
   176b0:	b	1109c <memcpy@plt>
   176b4:	push	{r4, r5, r6, lr}
   176b8:	mov	r4, r1
   176bc:	mov	r5, r0
   176c0:	mov	r0, r1
   176c4:	bl	172a0 <__assert_fail@plt+0x5f40>
   176c8:	mov	r2, r4
   176cc:	mov	r1, r5
   176d0:	pop	{r4, r5, r6, lr}
   176d4:	b	1109c <memcpy@plt>
   176d8:	push	{r4, r5, r6, lr}
   176dc:	mov	r5, r0
   176e0:	add	r0, r1, #1
   176e4:	mov	r4, r1
   176e8:	bl	172a0 <__assert_fail@plt+0x5f40>
   176ec:	mov	r2, #0
   176f0:	mov	r1, r5
   176f4:	strb	r2, [r0, r4]
   176f8:	mov	r2, r4
   176fc:	pop	{r4, r5, r6, lr}
   17700:	b	1109c <memcpy@plt>
   17704:	push	{r4, lr}
   17708:	mov	r4, r0
   1770c:	bl	111d4 <strlen@plt>
   17710:	add	r1, r0, #1
   17714:	mov	r0, r4
   17718:	pop	{r4, lr}
   1771c:	b	17690 <__assert_fail@plt+0x6330>
   17720:	ldr	r3, [pc, #44]	; 17754 <__assert_fail@plt+0x63f4>
   17724:	push	{r4, lr}
   17728:	mov	r2, #5
   1772c:	ldr	r1, [pc, #36]	; 17758 <__assert_fail@plt+0x63f8>
   17730:	mov	r0, #0
   17734:	ldr	r4, [r3]
   17738:	bl	110d8 <dcgettext@plt>
   1773c:	ldr	r2, [pc, #24]	; 1775c <__assert_fail@plt+0x63fc>
   17740:	mov	r1, #0
   17744:	mov	r3, r0
   17748:	mov	r0, r4
   1774c:	bl	11168 <error@plt>
   17750:	bl	11318 <abort@plt>
   17754:	andeq	sl, r2, ip, lsr r1
   17758:	andeq	r9, r1, r9, lsr #25
   1775c:	andeq	r9, r1, r8, lsl #7
   17760:	push	{r4, lr}
   17764:	orr	r1, r1, #512	; 0x200
   17768:	bl	13c54 <__assert_fail@plt+0x28f4>
   1776c:	cmp	r0, #0
   17770:	popne	{r4, pc}
   17774:	bl	11204 <__errno_location@plt>
   17778:	ldr	r3, [r0]
   1777c:	cmp	r3, #22
   17780:	bne	17798 <__assert_fail@plt+0x6438>
   17784:	ldr	r3, [pc, #16]	; 1779c <__assert_fail@plt+0x643c>
   17788:	mov	r2, #41	; 0x29
   1778c:	ldr	r1, [pc, #12]	; 177a0 <__assert_fail@plt+0x6440>
   17790:	ldr	r0, [pc, #12]	; 177a4 <__assert_fail@plt+0x6444>
   17794:	bl	11360 <__assert_fail@plt>
   17798:	bl	17720 <__assert_fail@plt+0x63c0>
   1779c:			; <UNDEFINED> instruction: 0x00019cba
   177a0:	andeq	r9, r1, r4, asr #25
   177a4:	andeq	r9, r1, pc, asr #25
   177a8:	ldr	r3, [r0, #48]	; 0x30
   177ac:	and	r3, r3, #17
   177b0:	cmp	r3, #16
   177b4:	beq	177d0 <__assert_fail@plt+0x6470>
   177b8:	cmp	r3, #17
   177bc:	bne	177d8 <__assert_fail@plt+0x6478>
   177c0:	ldr	r0, [r1, #48]	; 0x30
   177c4:	adds	r0, r0, #0
   177c8:	movne	r0, #1
   177cc:	bx	lr
   177d0:	mov	r0, #1
   177d4:	bx	lr
   177d8:	mov	r0, #0
   177dc:	bx	lr
   177e0:	push	{r4, r5, r6, lr}
   177e4:	subs	r5, r1, #0
   177e8:	mov	r4, r0
   177ec:	bge	1782c <__assert_fail@plt+0x64cc>
   177f0:	ldm	r0, {r0, r3}
   177f4:	orr	r0, r0, r3
   177f8:	adds	r0, r0, #0
   177fc:	movne	r0, #1
   17800:	cmp	r0, #0
   17804:	bne	17860 <__assert_fail@plt+0x6500>
   17808:	ldr	r2, [r4]
   1780c:	asr	r3, r5, #31
   17810:	ldr	r1, [r4, #4]
   17814:	mul	r3, r3, r2
   17818:	mla	r1, r5, r1, r3
   1781c:	umull	r2, r3, r2, r5
   17820:	add	r3, r1, r3
   17824:	strd	r2, [r4]
   17828:	pop	{r4, r5, r6, pc}
   1782c:	moveq	r0, r5
   17830:	beq	17800 <__assert_fail@plt+0x64a0>
   17834:	mov	r2, r5
   17838:	asr	r3, r5, #31
   1783c:	mvn	r0, #0
   17840:	mvn	r1, #0
   17844:	bl	18788 <__assert_fail@plt+0x7428>
   17848:	ldrd	r2, [r4]
   1784c:	cmp	r1, r3
   17850:	cmpeq	r0, r2
   17854:	movcc	r0, #1
   17858:	movcs	r0, #0
   1785c:	b	17800 <__assert_fail@plt+0x64a0>
   17860:	mvn	r2, #0
   17864:	mvn	r3, #0
   17868:	mov	r0, #1
   1786c:	strd	r2, [r4]
   17870:	pop	{r4, r5, r6, pc}
   17874:	push	{r4, r5, r6, r7, r8, lr}
   17878:	mov	r6, r0
   1787c:	mov	r7, r1
   17880:	mov	r5, r2
   17884:	mov	r4, #0
   17888:	cmp	r5, #0
   1788c:	bne	17898 <__assert_fail@plt+0x6538>
   17890:	mov	r0, r4
   17894:	pop	{r4, r5, r6, r7, r8, pc}
   17898:	mov	r1, r7
   1789c:	mov	r0, r6
   178a0:	bl	177e0 <__assert_fail@plt+0x6480>
   178a4:	sub	r5, r5, #1
   178a8:	orr	r4, r4, r0
   178ac:	b	17888 <__assert_fail@plt+0x6528>
   178b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178b4:	sub	sp, sp, #20
   178b8:	cmp	r2, #36	; 0x24
   178bc:	ldr	r9, [sp, #56]	; 0x38
   178c0:	bls	178d8 <__assert_fail@plt+0x6578>
   178c4:	ldr	r3, [pc, #772]	; 17bd0 <__assert_fail@plt+0x6870>
   178c8:	mov	r2, #85	; 0x55
   178cc:	ldr	r1, [pc, #768]	; 17bd4 <__assert_fail@plt+0x6874>
   178d0:	ldr	r0, [pc, #768]	; 17bd8 <__assert_fail@plt+0x6878>
   178d4:	bl	11360 <__assert_fail@plt>
   178d8:	cmp	r1, #0
   178dc:	mov	r7, r1
   178e0:	mov	r4, r0
   178e4:	mov	fp, r2
   178e8:	mov	r8, r3
   178ec:	addeq	r7, sp, #4
   178f0:	bl	11204 <__errno_location@plt>
   178f4:	mov	r3, #0
   178f8:	str	r3, [r0]
   178fc:	mov	sl, r0
   17900:	bl	111bc <__ctype_b_loc@plt>
   17904:	ldrb	r6, [r4]
   17908:	mov	r3, r4
   1790c:	ldr	r1, [r0]
   17910:	lsl	r2, r6, #1
   17914:	ldrh	r5, [r1, r2]
   17918:	ands	r5, r5, #8192	; 0x2000
   1791c:	bne	17938 <__assert_fail@plt+0x65d8>
   17920:	cmp	r6, #45	; 0x2d
   17924:	bne	17940 <__assert_fail@plt+0x65e0>
   17928:	mov	r5, #4
   1792c:	mov	r0, r5
   17930:	add	sp, sp, #20
   17934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17938:	ldrb	r6, [r3, #1]!
   1793c:	b	17910 <__assert_fail@plt+0x65b0>
   17940:	mov	r2, fp
   17944:	mov	r1, r7
   17948:	mov	r0, r4
   1794c:	bl	11240 <strtoumax@plt>
   17950:	ldr	r6, [r7]
   17954:	cmp	r4, r6
   17958:	strd	r0, [sp, #8]
   1795c:	bne	179c0 <__assert_fail@plt+0x6660>
   17960:	cmp	r9, #0
   17964:	beq	17928 <__assert_fail@plt+0x65c8>
   17968:	ldrb	r1, [r6]
   1796c:	cmp	r1, #0
   17970:	beq	17928 <__assert_fail@plt+0x65c8>
   17974:	mov	r0, r9
   17978:	bl	111e0 <strchr@plt>
   1797c:	cmp	r0, #0
   17980:	beq	17928 <__assert_fail@plt+0x65c8>
   17984:	mov	r2, #1
   17988:	mov	r3, #0
   1798c:	strd	r2, [sp, #8]
   17990:	ldrb	r4, [r6]
   17994:	cmp	r4, #0
   17998:	beq	17ad0 <__assert_fail@plt+0x6770>
   1799c:	mov	r1, r4
   179a0:	mov	r0, r9
   179a4:	bl	111e0 <strchr@plt>
   179a8:	cmp	r0, #0
   179ac:	bne	179e8 <__assert_fail@plt+0x6688>
   179b0:	ldrd	r2, [sp, #8]
   179b4:	orr	r5, r5, #2
   179b8:	strd	r2, [r8]
   179bc:	b	1792c <__assert_fail@plt+0x65cc>
   179c0:	ldr	r5, [sl]
   179c4:	cmp	r5, #0
   179c8:	beq	179d8 <__assert_fail@plt+0x6678>
   179cc:	cmp	r5, #34	; 0x22
   179d0:	bne	17928 <__assert_fail@plt+0x65c8>
   179d4:	mov	r5, #1
   179d8:	cmp	r9, #0
   179dc:	bne	17990 <__assert_fail@plt+0x6630>
   179e0:	strd	r0, [r8]
   179e4:	b	1792c <__assert_fail@plt+0x65cc>
   179e8:	cmp	r4, #84	; 0x54
   179ec:	beq	17a40 <__assert_fail@plt+0x66e0>
   179f0:	bhi	17a28 <__assert_fail@plt+0x66c8>
   179f4:	cmp	r4, #75	; 0x4b
   179f8:	beq	17a40 <__assert_fail@plt+0x66e0>
   179fc:	bhi	17a18 <__assert_fail@plt+0x66b8>
   17a00:	cmp	r4, #69	; 0x45
   17a04:	beq	17a40 <__assert_fail@plt+0x66e0>
   17a08:	cmp	r4, #71	; 0x47
   17a0c:	beq	17a40 <__assert_fail@plt+0x66e0>
   17a10:	mov	r6, #1
   17a14:	b	17b04 <__assert_fail@plt+0x67a4>
   17a18:	cmp	r4, #77	; 0x4d
   17a1c:	beq	17a40 <__assert_fail@plt+0x66e0>
   17a20:	cmp	r4, #80	; 0x50
   17a24:	b	17a0c <__assert_fail@plt+0x66ac>
   17a28:	cmp	r4, #103	; 0x67
   17a2c:	beq	17a40 <__assert_fail@plt+0x66e0>
   17a30:	bhi	17adc <__assert_fail@plt+0x677c>
   17a34:	sub	r3, r4, #89	; 0x59
   17a38:	cmp	r3, #1
   17a3c:	bhi	17a10 <__assert_fail@plt+0x66b0>
   17a40:	mov	r1, #48	; 0x30
   17a44:	mov	r0, r9
   17a48:	bl	111e0 <strchr@plt>
   17a4c:	cmp	r0, #0
   17a50:	beq	17a10 <__assert_fail@plt+0x66b0>
   17a54:	ldrb	r3, [r6, #1]
   17a58:	cmp	r3, #68	; 0x44
   17a5c:	beq	17a70 <__assert_fail@plt+0x6710>
   17a60:	cmp	r3, #105	; 0x69
   17a64:	beq	17af4 <__assert_fail@plt+0x6794>
   17a68:	cmp	r3, #66	; 0x42
   17a6c:	bne	17a10 <__assert_fail@plt+0x66b0>
   17a70:	mov	r6, #2
   17a74:	mov	r1, #1000	; 0x3e8
   17a78:	cmp	r4, #89	; 0x59
   17a7c:	beq	17bb8 <__assert_fail@plt+0x6858>
   17a80:	bhi	17b2c <__assert_fail@plt+0x67cc>
   17a84:	cmp	r4, #75	; 0x4b
   17a88:	beq	17b6c <__assert_fail@plt+0x680c>
   17a8c:	bhi	17b0c <__assert_fail@plt+0x67ac>
   17a90:	cmp	r4, #69	; 0x45
   17a94:	beq	17b94 <__assert_fail@plt+0x6834>
   17a98:	cmp	r4, #71	; 0x47
   17a9c:	beq	17ba0 <__assert_fail@plt+0x6840>
   17aa0:	cmp	r4, #66	; 0x42
   17aa4:	moveq	r1, #1024	; 0x400
   17aa8:	bne	179b0 <__assert_fail@plt+0x6650>
   17aac:	add	r0, sp, #8
   17ab0:	bl	177e0 <__assert_fail@plt+0x6480>
   17ab4:	ldr	r3, [r7]
   17ab8:	orr	r5, r5, r0
   17abc:	add	r2, r3, r6
   17ac0:	str	r2, [r7]
   17ac4:	ldrb	r3, [r3, r6]
   17ac8:	cmp	r3, #0
   17acc:	orrne	r5, r5, #2
   17ad0:	ldrd	r2, [sp, #8]
   17ad4:	strd	r2, [r8]
   17ad8:	b	1792c <__assert_fail@plt+0x65cc>
   17adc:	cmp	r4, #109	; 0x6d
   17ae0:	beq	17a40 <__assert_fail@plt+0x66e0>
   17ae4:	cmp	r4, #116	; 0x74
   17ae8:	beq	17a40 <__assert_fail@plt+0x66e0>
   17aec:	cmp	r4, #107	; 0x6b
   17af0:	b	17a0c <__assert_fail@plt+0x66ac>
   17af4:	ldrb	r6, [r6, #2]
   17af8:	cmp	r6, #66	; 0x42
   17afc:	movne	r6, #1
   17b00:	moveq	r6, #3
   17b04:	mov	r1, #1024	; 0x400
   17b08:	b	17a78 <__assert_fail@plt+0x6718>
   17b0c:	cmp	r4, #80	; 0x50
   17b10:	beq	17ba8 <__assert_fail@plt+0x6848>
   17b14:	cmp	r4, #84	; 0x54
   17b18:	beq	17bb0 <__assert_fail@plt+0x6850>
   17b1c:	cmp	r4, #77	; 0x4d
   17b20:	bne	179b0 <__assert_fail@plt+0x6650>
   17b24:	mov	r2, #2
   17b28:	b	17b98 <__assert_fail@plt+0x6838>
   17b2c:	cmp	r4, #103	; 0x67
   17b30:	beq	17ba0 <__assert_fail@plt+0x6840>
   17b34:	bhi	17b58 <__assert_fail@plt+0x67f8>
   17b38:	cmp	r4, #98	; 0x62
   17b3c:	beq	17b8c <__assert_fail@plt+0x682c>
   17b40:	cmp	r4, #99	; 0x63
   17b44:	beq	17bc8 <__assert_fail@plt+0x6868>
   17b48:	cmp	r4, #90	; 0x5a
   17b4c:	bne	179b0 <__assert_fail@plt+0x6650>
   17b50:	mov	r2, #7
   17b54:	b	17b98 <__assert_fail@plt+0x6838>
   17b58:	cmp	r4, #109	; 0x6d
   17b5c:	beq	17b24 <__assert_fail@plt+0x67c4>
   17b60:	bhi	17b74 <__assert_fail@plt+0x6814>
   17b64:	cmp	r4, #107	; 0x6b
   17b68:	bne	179b0 <__assert_fail@plt+0x6650>
   17b6c:	mov	r2, #1
   17b70:	b	17b98 <__assert_fail@plt+0x6838>
   17b74:	cmp	r4, #116	; 0x74
   17b78:	beq	17bb0 <__assert_fail@plt+0x6850>
   17b7c:	cmp	r4, #119	; 0x77
   17b80:	moveq	r1, #2
   17b84:	beq	17aac <__assert_fail@plt+0x674c>
   17b88:	b	179b0 <__assert_fail@plt+0x6650>
   17b8c:	mov	r1, #512	; 0x200
   17b90:	b	17aac <__assert_fail@plt+0x674c>
   17b94:	mov	r2, #6
   17b98:	add	r0, sp, #8
   17b9c:	b	17bc0 <__assert_fail@plt+0x6860>
   17ba0:	mov	r2, #3
   17ba4:	b	17b98 <__assert_fail@plt+0x6838>
   17ba8:	mov	r2, #5
   17bac:	b	17b98 <__assert_fail@plt+0x6838>
   17bb0:	mov	r2, #4
   17bb4:	b	17b98 <__assert_fail@plt+0x6838>
   17bb8:	mov	r2, #8
   17bbc:	add	r0, sp, r2
   17bc0:	bl	17874 <__assert_fail@plt+0x6514>
   17bc4:	b	17ab4 <__assert_fail@plt+0x6754>
   17bc8:	mov	r0, #0
   17bcc:	b	17ab4 <__assert_fail@plt+0x6754>
   17bd0:	ldrdeq	r9, [r1], -pc	; <UNPREDICTABLE>
   17bd4:	andeq	r9, r1, sl, ror #25
   17bd8:	strdeq	r9, [r1], -r8
   17bdc:	cmp	r1, #0
   17be0:	cmpne	r0, #0
   17be4:	moveq	r1, #1
   17be8:	moveq	r0, r1
   17bec:	umull	r2, r3, r0, r1
   17bf0:	adds	r3, r3, #0
   17bf4:	movne	r3, #1
   17bf8:	cmp	r2, #0
   17bfc:	blt	17c0c <__assert_fail@plt+0x68ac>
   17c00:	cmp	r3, #0
   17c04:	bne	17c0c <__assert_fail@plt+0x68ac>
   17c08:	b	11018 <calloc@plt>
   17c0c:	push	{r4, lr}
   17c10:	bl	11204 <__errno_location@plt>
   17c14:	mov	r3, #12
   17c18:	str	r3, [r0]
   17c1c:	mov	r0, #0
   17c20:	pop	{r4, pc}
   17c24:	cmp	r0, #0
   17c28:	mov	r3, #0
   17c2c:	moveq	r0, #1
   17c30:	adds	r3, r3, #0
   17c34:	movne	r3, #1
   17c38:	cmp	r0, #0
   17c3c:	blt	17c4c <__assert_fail@plt+0x68ec>
   17c40:	cmp	r3, #0
   17c44:	bne	17c4c <__assert_fail@plt+0x68ec>
   17c48:	b	11180 <malloc@plt>
   17c4c:	push	{r4, lr}
   17c50:	bl	11204 <__errno_location@plt>
   17c54:	mov	r3, #12
   17c58:	str	r3, [r0]
   17c5c:	mov	r0, #0
   17c60:	pop	{r4, pc}
   17c64:	cmp	r0, #0
   17c68:	push	{r4, lr}
   17c6c:	mov	r4, r1
   17c70:	bne	17c80 <__assert_fail@plt+0x6920>
   17c74:	mov	r0, r1
   17c78:	pop	{r4, lr}
   17c7c:	b	17c24 <__assert_fail@plt+0x68c4>
   17c80:	cmp	r1, #0
   17c84:	bne	17c94 <__assert_fail@plt+0x6934>
   17c88:	bl	129e4 <__assert_fail@plt+0x1684>
   17c8c:	mov	r0, #0
   17c90:	pop	{r4, pc}
   17c94:	cmp	r1, #0
   17c98:	blt	17ca8 <__assert_fail@plt+0x6948>
   17c9c:	mov	r3, #0
   17ca0:	cmp	r3, r3
   17ca4:	beq	17cb8 <__assert_fail@plt+0x6958>
   17ca8:	bl	11204 <__errno_location@plt>
   17cac:	mov	r3, #12
   17cb0:	str	r3, [r0]
   17cb4:	b	17c8c <__assert_fail@plt+0x692c>
   17cb8:	pop	{r4, lr}
   17cbc:	b	110e4 <realloc@plt>
   17cc0:	push	{r4, r5, r6, lr}
   17cc4:	mov	r4, r0
   17cc8:	bl	11144 <__fpending@plt>
   17ccc:	mov	r5, r0
   17cd0:	mov	r0, r4
   17cd4:	bl	11150 <ferror_unlocked@plt>
   17cd8:	mov	r6, r0
   17cdc:	mov	r0, r4
   17ce0:	bl	17dfc <__assert_fail@plt+0x6a9c>
   17ce4:	cmp	r6, #0
   17ce8:	mov	r4, r0
   17cec:	bne	17d18 <__assert_fail@plt+0x69b8>
   17cf0:	cmp	r0, #0
   17cf4:	beq	17d10 <__assert_fail@plt+0x69b0>
   17cf8:	cmp	r5, #0
   17cfc:	bne	17d28 <__assert_fail@plt+0x69c8>
   17d00:	bl	11204 <__errno_location@plt>
   17d04:	ldr	r4, [r0]
   17d08:	subs	r4, r4, #9
   17d0c:	mvnne	r4, #0
   17d10:	mov	r0, r4
   17d14:	pop	{r4, r5, r6, pc}
   17d18:	cmp	r0, #0
   17d1c:	bne	17d28 <__assert_fail@plt+0x69c8>
   17d20:	bl	11204 <__errno_location@plt>
   17d24:	str	r4, [r0]
   17d28:	mvn	r4, #0
   17d2c:	b	17d10 <__assert_fail@plt+0x69b0>
   17d30:	mov	r3, #0
   17d34:	mov	r2, #0
   17d38:	strd	r2, [r0, #16]
   17d3c:	ldr	r3, [pc, #4]	; 17d48 <__assert_fail@plt+0x69e8>
   17d40:	str	r3, [r0, #24]
   17d44:	bx	lr
   17d48:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17d4c:	ldr	r2, [r0, #24]
   17d50:	ldr	r3, [pc, #148]	; 17dec <__assert_fail@plt+0x6a8c>
   17d54:	push	{r4, r5, r6, r7, r8, lr}
   17d58:	cmp	r2, r3
   17d5c:	beq	17d74 <__assert_fail@plt+0x6a14>
   17d60:	ldr	r3, [pc, #136]	; 17df0 <__assert_fail@plt+0x6a90>
   17d64:	mov	r2, #60	; 0x3c
   17d68:	ldr	r1, [pc, #132]	; 17df4 <__assert_fail@plt+0x6a94>
   17d6c:	ldr	r0, [pc, #132]	; 17df8 <__assert_fail@plt+0x6a98>
   17d70:	bl	11360 <__assert_fail@plt>
   17d74:	ldrd	r6, [r0, #16]
   17d78:	orrs	r3, r6, r7
   17d7c:	beq	17db0 <__assert_fail@plt+0x6a50>
   17d80:	ldrd	r4, [r1, #96]	; 0x60
   17d84:	ldrd	r2, [r0]
   17d88:	cmp	r5, r3
   17d8c:	cmpeq	r4, r2
   17d90:	bne	17db0 <__assert_fail@plt+0x6a50>
   17d94:	ldrd	r4, [r1]
   17d98:	ldrd	r2, [r0, #8]
   17d9c:	cmp	r5, r3
   17da0:	cmpeq	r4, r2
   17da4:	bne	17db0 <__assert_fail@plt+0x6a50>
   17da8:	mov	r0, #1
   17dac:	pop	{r4, r5, r6, r7, r8, pc}
   17db0:	adds	r2, r6, #1
   17db4:	adc	r3, r7, #0
   17db8:	and	r6, r6, r2
   17dbc:	and	r7, r7, r3
   17dc0:	orrs	ip, r6, r7
   17dc4:	strd	r2, [r0, #16]
   17dc8:	bne	17de4 <__assert_fail@plt+0x6a84>
   17dcc:	orrs	r3, r2, r3
   17dd0:	beq	17da8 <__assert_fail@plt+0x6a48>
   17dd4:	ldrd	r2, [r1]
   17dd8:	strd	r2, [r0, #8]
   17ddc:	ldrd	r2, [r1, #96]	; 0x60
   17de0:	strd	r2, [r0]
   17de4:	mov	r0, #0
   17de8:	pop	{r4, r5, r6, r7, r8, pc}
   17dec:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17df0:	andeq	r9, r1, lr, lsl sp
   17df4:	andeq	r9, r1, sl, lsr #26
   17df8:	andeq	r9, r1, ip, lsr sp
   17dfc:	push	{r0, r1, r2, r4, r5, lr}
   17e00:	mov	r4, r0
   17e04:	bl	11234 <fileno@plt>
   17e08:	cmp	r0, #0
   17e0c:	mov	r0, r4
   17e10:	bge	17e20 <__assert_fail@plt+0x6ac0>
   17e14:	add	sp, sp, #12
   17e18:	pop	{r4, r5, lr}
   17e1c:	b	11258 <fclose@plt>
   17e20:	bl	11198 <__freading@plt>
   17e24:	cmp	r0, #0
   17e28:	bne	17e64 <__assert_fail@plt+0x6b04>
   17e2c:	mov	r0, r4
   17e30:	bl	1809c <__assert_fail@plt+0x6d3c>
   17e34:	cmp	r0, #0
   17e38:	bne	17e98 <__assert_fail@plt+0x6b38>
   17e3c:	mov	r5, #0
   17e40:	mov	r0, r4
   17e44:	bl	11258 <fclose@plt>
   17e48:	cmp	r5, #0
   17e4c:	beq	17e5c <__assert_fail@plt+0x6afc>
   17e50:	bl	11204 <__errno_location@plt>
   17e54:	str	r5, [r0]
   17e58:	mvn	r0, #0
   17e5c:	add	sp, sp, #12
   17e60:	pop	{r4, r5, pc}
   17e64:	mov	r0, r4
   17e68:	bl	11234 <fileno@plt>
   17e6c:	mov	r3, #1
   17e70:	str	r3, [sp]
   17e74:	mov	r2, #0
   17e78:	mov	r3, #0
   17e7c:	bl	11120 <lseek64@plt>
   17e80:	mvn	r3, #0
   17e84:	mvn	r2, #0
   17e88:	cmp	r1, r3
   17e8c:	cmpeq	r0, r2
   17e90:	bne	17e2c <__assert_fail@plt+0x6acc>
   17e94:	b	17e3c <__assert_fail@plt+0x6adc>
   17e98:	bl	11204 <__errno_location@plt>
   17e9c:	ldr	r5, [r0]
   17ea0:	b	17e40 <__assert_fail@plt+0x6ae0>
   17ea4:	push	{r1, r2, r3}
   17ea8:	push	{r0, r1, r4, r5, r6, r7, lr}
   17eac:	add	r2, sp, #32
   17eb0:	ldr	r1, [sp, #28]
   17eb4:	str	r2, [sp, #4]
   17eb8:	cmp	r1, #0
   17ebc:	beq	17f00 <__assert_fail@plt+0x6ba0>
   17ec0:	ldr	r3, [pc, #396]	; 18054 <__assert_fail@plt+0x6cf4>
   17ec4:	mov	r6, r0
   17ec8:	cmp	r1, r3
   17ecc:	beq	17f0c <__assert_fail@plt+0x6bac>
   17ed0:	cmp	r1, #11
   17ed4:	beq	17ef0 <__assert_fail@plt+0x6b90>
   17ed8:	bgt	1801c <__assert_fail@plt+0x6cbc>
   17edc:	cmp	r1, #3
   17ee0:	beq	17ef0 <__assert_fail@plt+0x6b90>
   17ee4:	bgt	17ff8 <__assert_fail@plt+0x6c98>
   17ee8:	cmp	r1, #1
   17eec:	bne	18004 <__assert_fail@plt+0x6ca4>
   17ef0:	mov	r0, r6
   17ef4:	bl	11270 <fcntl64@plt>
   17ef8:	mov	r4, r0
   17efc:	b	17fb8 <__assert_fail@plt+0x6c58>
   17f00:	ldr	r2, [sp, #32]
   17f04:	bl	11270 <fcntl64@plt>
   17f08:	b	17ef8 <__assert_fail@plt+0x6b98>
   17f0c:	ldr	r5, [pc, #324]	; 18058 <__assert_fail@plt+0x6cf8>
   17f10:	add	r3, sp, #36	; 0x24
   17f14:	str	r3, [sp, #4]
   17f18:	ldr	r3, [r5]
   17f1c:	ldr	r7, [r2]
   17f20:	cmp	r3, #0
   17f24:	mov	r2, r7
   17f28:	blt	17fcc <__assert_fail@plt+0x6c6c>
   17f2c:	bl	11270 <fcntl64@plt>
   17f30:	subs	r4, r0, #0
   17f34:	bge	17f48 <__assert_fail@plt+0x6be8>
   17f38:	bl	11204 <__errno_location@plt>
   17f3c:	ldr	r3, [r0]
   17f40:	cmp	r3, #22
   17f44:	beq	17f98 <__assert_fail@plt+0x6c38>
   17f48:	mov	r3, #1
   17f4c:	str	r3, [r5]
   17f50:	cmp	r4, #0
   17f54:	blt	17fb8 <__assert_fail@plt+0x6c58>
   17f58:	ldr	r5, [r5]
   17f5c:	cmn	r5, #1
   17f60:	bne	17fb8 <__assert_fail@plt+0x6c58>
   17f64:	mov	r1, #1
   17f68:	mov	r0, r4
   17f6c:	bl	11270 <fcntl64@plt>
   17f70:	subs	r2, r0, #0
   17f74:	bge	17fdc <__assert_fail@plt+0x6c7c>
   17f78:	bl	11204 <__errno_location@plt>
   17f7c:	ldr	r7, [r0]
   17f80:	mov	r6, r0
   17f84:	mov	r0, r4
   17f88:	bl	11324 <close@plt>
   17f8c:	mov	r4, r5
   17f90:	str	r7, [r6]
   17f94:	b	17fb8 <__assert_fail@plt+0x6c58>
   17f98:	mov	r2, r7
   17f9c:	mov	r1, #0
   17fa0:	mov	r0, r6
   17fa4:	bl	11270 <fcntl64@plt>
   17fa8:	subs	r4, r0, #0
   17fac:	mvnge	r3, #0
   17fb0:	strge	r3, [r5]
   17fb4:	bge	17f58 <__assert_fail@plt+0x6bf8>
   17fb8:	mov	r0, r4
   17fbc:	add	sp, sp, #8
   17fc0:	pop	{r4, r5, r6, r7, lr}
   17fc4:	add	sp, sp, #12
   17fc8:	bx	lr
   17fcc:	mov	r1, #0
   17fd0:	bl	11270 <fcntl64@plt>
   17fd4:	mov	r4, r0
   17fd8:	b	17f50 <__assert_fail@plt+0x6bf0>
   17fdc:	orr	r2, r2, #1
   17fe0:	mov	r1, #2
   17fe4:	mov	r0, r4
   17fe8:	bl	11270 <fcntl64@plt>
   17fec:	cmn	r0, #1
   17ff0:	bne	17fb8 <__assert_fail@plt+0x6c58>
   17ff4:	b	17f78 <__assert_fail@plt+0x6c18>
   17ff8:	cmp	r1, #8
   17ffc:	beq	18004 <__assert_fail@plt+0x6ca4>
   18000:	bgt	18014 <__assert_fail@plt+0x6cb4>
   18004:	ldr	r3, [sp, #4]
   18008:	mov	r0, r6
   1800c:	ldr	r2, [r3]
   18010:	b	17f04 <__assert_fail@plt+0x6ba4>
   18014:	cmp	r1, #9
   18018:	b	17eec <__assert_fail@plt+0x6b8c>
   1801c:	ldr	r2, [pc, #56]	; 1805c <__assert_fail@plt+0x6cfc>
   18020:	cmp	r1, r2
   18024:	bgt	1803c <__assert_fail@plt+0x6cdc>
   18028:	cmp	r1, r3
   1802c:	ldrlt	r3, [pc, #44]	; 18060 <__assert_fail@plt+0x6d00>
   18030:	bge	18004 <__assert_fail@plt+0x6ca4>
   18034:	cmp	r1, r3
   18038:	b	17eec <__assert_fail@plt+0x6b8c>
   1803c:	ldr	r3, [pc, #32]	; 18064 <__assert_fail@plt+0x6d04>
   18040:	cmp	r1, r3
   18044:	beq	18004 <__assert_fail@plt+0x6ca4>
   18048:	blt	17ef0 <__assert_fail@plt+0x6b90>
   1804c:	add	r3, r3, #1
   18050:	b	18034 <__assert_fail@plt+0x6cd4>
   18054:	andeq	r0, r0, r6, lsl #8
   18058:	strdeq	sl, [r2], -r4
   1805c:	andeq	r0, r0, r7, lsl #8
   18060:	andeq	r0, r0, r1, lsl #8
   18064:	andeq	r0, r0, r9, lsl #8
   18068:	push	{r1, r2, r3}
   1806c:	push	{r0, r1, lr}
   18070:	ldr	r1, [sp, #12]
   18074:	ands	r2, r1, #64	; 0x40
   18078:	addne	r3, sp, #16
   1807c:	ldrne	r2, [sp, #16]
   18080:	strne	r3, [sp, #4]
   18084:	bl	11174 <open64@plt>
   18088:	bl	16d44 <__assert_fail@plt+0x59e4>
   1808c:	add	sp, sp, #8
   18090:	pop	{lr}		; (ldr lr, [sp], #4)
   18094:	add	sp, sp, #12
   18098:	bx	lr
   1809c:	push	{r0, r1, r4, lr}
   180a0:	subs	r4, r0, #0
   180a4:	bne	180b8 <__assert_fail@plt+0x6d58>
   180a8:	mov	r0, r4
   180ac:	add	sp, sp, #8
   180b0:	pop	{r4, lr}
   180b4:	b	11060 <fflush@plt>
   180b8:	bl	11198 <__freading@plt>
   180bc:	cmp	r0, #0
   180c0:	beq	180a8 <__assert_fail@plt+0x6d48>
   180c4:	ldr	r3, [r4]
   180c8:	tst	r3, #256	; 0x100
   180cc:	beq	180a8 <__assert_fail@plt+0x6d48>
   180d0:	mov	r3, #1
   180d4:	str	r3, [sp]
   180d8:	mov	r2, #0
   180dc:	mov	r3, #0
   180e0:	mov	r0, r4
   180e4:	bl	180ec <__assert_fail@plt+0x6d8c>
   180e8:	b	180a8 <__assert_fail@plt+0x6d48>
   180ec:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   180f0:	mov	r4, r0
   180f4:	ldmib	r0, {ip, lr}
   180f8:	ldr	r8, [sp, #32]
   180fc:	cmp	lr, ip
   18100:	bne	1816c <__assert_fail@plt+0x6e0c>
   18104:	ldr	lr, [r0, #20]
   18108:	ldr	ip, [r0, #16]
   1810c:	cmp	lr, ip
   18110:	bne	1816c <__assert_fail@plt+0x6e0c>
   18114:	ldr	r5, [r0, #36]	; 0x24
   18118:	cmp	r5, #0
   1811c:	bne	1816c <__assert_fail@plt+0x6e0c>
   18120:	mov	r6, r2
   18124:	mov	r7, r3
   18128:	bl	11234 <fileno@plt>
   1812c:	mov	r2, r6
   18130:	mov	r3, r7
   18134:	str	r8, [sp]
   18138:	bl	11120 <lseek64@plt>
   1813c:	mvn	r3, #0
   18140:	mvn	r2, #0
   18144:	cmp	r1, r3
   18148:	cmpeq	r0, r2
   1814c:	mvneq	r0, #0
   18150:	ldrne	r3, [r4]
   18154:	strdne	r0, [r4, #80]	; 0x50
   18158:	movne	r0, r5
   1815c:	bicne	r3, r3, #16
   18160:	strne	r3, [r4]
   18164:	add	sp, sp, #8
   18168:	pop	{r4, r5, r6, r7, r8, pc}
   1816c:	str	r8, [sp, #32]
   18170:	mov	r0, r4
   18174:	add	sp, sp, #8
   18178:	pop	{r4, r5, r6, r7, r8, lr}
   1817c:	b	11264 <fseeko64@plt>
   18180:	push	{r4, lr}
   18184:	mov	r0, #14
   18188:	bl	11294 <nl_langinfo@plt>
   1818c:	ldr	r3, [pc, #24]	; 181ac <__assert_fail@plt+0x6e4c>
   18190:	cmp	r0, #0
   18194:	moveq	r0, r3
   18198:	ldr	r3, [pc, #16]	; 181b0 <__assert_fail@plt+0x6e50>
   1819c:	ldrb	r2, [r0]
   181a0:	cmp	r2, #0
   181a4:	moveq	r0, r3
   181a8:	pop	{r4, pc}
   181ac:	strdeq	r9, [r1], -sl
   181b0:	andeq	r9, r1, r4, asr sp
   181b4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   181b8:	subs	r5, r0, #0
   181bc:	addeq	r5, sp, #4
   181c0:	mov	r0, r5
   181c4:	mov	r7, r2
   181c8:	mov	r6, r1
   181cc:	bl	1115c <mbrtowc@plt>
   181d0:	cmp	r7, #0
   181d4:	cmnne	r0, #3
   181d8:	mov	r4, r0
   181dc:	bls	181f8 <__assert_fail@plt+0x6e98>
   181e0:	mov	r0, #0
   181e4:	bl	1825c <__assert_fail@plt+0x6efc>
   181e8:	cmp	r0, #0
   181ec:	moveq	r4, #1
   181f0:	ldrbeq	r3, [r6]
   181f4:	streq	r3, [r5]
   181f8:	mov	r0, r4
   181fc:	add	sp, sp, #12
   18200:	pop	{r4, r5, r6, r7, pc}
   18204:	push	{r4, r5, r6, lr}
   18208:	subs	r4, r2, #0
   1820c:	mov	r6, r0
   18210:	mov	r5, r1
   18214:	beq	1822c <__assert_fail@plt+0x6ecc>
   18218:	mov	r1, r4
   1821c:	mvn	r0, #0
   18220:	bl	1833c <__assert_fail@plt+0x6fdc>
   18224:	cmp	r0, r5
   18228:	bcc	1823c <__assert_fail@plt+0x6edc>
   1822c:	mul	r1, r5, r4
   18230:	mov	r0, r6
   18234:	pop	{r4, r5, r6, lr}
   18238:	b	17c64 <__assert_fail@plt+0x6904>
   1823c:	bl	11204 <__errno_location@plt>
   18240:	mov	r3, #12
   18244:	str	r3, [r0]
   18248:	mov	r0, #0
   1824c:	pop	{r4, r5, r6, pc}
   18250:	mov	r2, #3
   18254:	mov	r1, #0
   18258:	b	17ea4 <__assert_fail@plt+0x6b44>
   1825c:	push	{lr}		; (str lr, [sp, #-4]!)
   18260:	sub	sp, sp, #268	; 0x10c
   18264:	ldr	r2, [pc, #64]	; 182ac <__assert_fail@plt+0x6f4c>
   18268:	add	r1, sp, #4
   1826c:	bl	182b8 <__assert_fail@plt+0x6f58>
   18270:	cmp	r0, #0
   18274:	movne	r0, #0
   18278:	bne	182a4 <__assert_fail@plt+0x6f44>
   1827c:	ldr	r1, [pc, #44]	; 182b0 <__assert_fail@plt+0x6f50>
   18280:	add	r0, sp, #4
   18284:	bl	11048 <strcmp@plt>
   18288:	cmp	r0, #0
   1828c:	beq	182a4 <__assert_fail@plt+0x6f44>
   18290:	ldr	r1, [pc, #28]	; 182b4 <__assert_fail@plt+0x6f54>
   18294:	add	r0, sp, #4
   18298:	bl	11048 <strcmp@plt>
   1829c:	adds	r0, r0, #0
   182a0:	movne	r0, #1
   182a4:	add	sp, sp, #268	; 0x10c
   182a8:	pop	{pc}		; (ldr pc, [sp], #4)
   182ac:	andeq	r0, r0, r1, lsl #2
   182b0:	andeq	r9, r1, sl, asr sp
   182b4:	andeq	r9, r1, ip, asr sp
   182b8:	push	{r4, r5, r6, lr}
   182bc:	mov	r5, r1
   182c0:	mov	r1, #0
   182c4:	mov	r4, r2
   182c8:	bl	1127c <setlocale@plt>
   182cc:	subs	r6, r0, #0
   182d0:	bne	182e4 <__assert_fail@plt+0x6f84>
   182d4:	cmp	r4, #0
   182d8:	strbne	r6, [r5]
   182dc:	mov	r0, #22
   182e0:	pop	{r4, r5, r6, pc}
   182e4:	bl	111d4 <strlen@plt>
   182e8:	cmp	r4, r0
   182ec:	bls	18308 <__assert_fail@plt+0x6fa8>
   182f0:	add	r2, r0, #1
   182f4:	mov	r1, r6
   182f8:	mov	r0, r5
   182fc:	bl	1109c <memcpy@plt>
   18300:	mov	r0, #0
   18304:	pop	{r4, r5, r6, pc}
   18308:	cmp	r4, #0
   1830c:	beq	1832c <__assert_fail@plt+0x6fcc>
   18310:	sub	r4, r4, #1
   18314:	mov	r2, r4
   18318:	mov	r1, r6
   1831c:	mov	r0, r5
   18320:	bl	1109c <memcpy@plt>
   18324:	mov	r3, #0
   18328:	strb	r3, [r5, r4]
   1832c:	mov	r0, #34	; 0x22
   18330:	pop	{r4, r5, r6, pc}
   18334:	mov	r1, #0
   18338:	b	1127c <setlocale@plt>
   1833c:	subs	r2, r1, #1
   18340:	bxeq	lr
   18344:	bcc	1851c <__assert_fail@plt+0x71bc>
   18348:	cmp	r0, r1
   1834c:	bls	18500 <__assert_fail@plt+0x71a0>
   18350:	tst	r1, r2
   18354:	beq	1850c <__assert_fail@plt+0x71ac>
   18358:	clz	r3, r0
   1835c:	clz	r2, r1
   18360:	sub	r3, r2, r3
   18364:	rsbs	r3, r3, #31
   18368:	addne	r3, r3, r3, lsl #1
   1836c:	mov	r2, #0
   18370:	addne	pc, pc, r3, lsl #2
   18374:	nop			; (mov r0, r0)
   18378:	cmp	r0, r1, lsl #31
   1837c:	adc	r2, r2, r2
   18380:	subcs	r0, r0, r1, lsl #31
   18384:	cmp	r0, r1, lsl #30
   18388:	adc	r2, r2, r2
   1838c:	subcs	r0, r0, r1, lsl #30
   18390:	cmp	r0, r1, lsl #29
   18394:	adc	r2, r2, r2
   18398:	subcs	r0, r0, r1, lsl #29
   1839c:	cmp	r0, r1, lsl #28
   183a0:	adc	r2, r2, r2
   183a4:	subcs	r0, r0, r1, lsl #28
   183a8:	cmp	r0, r1, lsl #27
   183ac:	adc	r2, r2, r2
   183b0:	subcs	r0, r0, r1, lsl #27
   183b4:	cmp	r0, r1, lsl #26
   183b8:	adc	r2, r2, r2
   183bc:	subcs	r0, r0, r1, lsl #26
   183c0:	cmp	r0, r1, lsl #25
   183c4:	adc	r2, r2, r2
   183c8:	subcs	r0, r0, r1, lsl #25
   183cc:	cmp	r0, r1, lsl #24
   183d0:	adc	r2, r2, r2
   183d4:	subcs	r0, r0, r1, lsl #24
   183d8:	cmp	r0, r1, lsl #23
   183dc:	adc	r2, r2, r2
   183e0:	subcs	r0, r0, r1, lsl #23
   183e4:	cmp	r0, r1, lsl #22
   183e8:	adc	r2, r2, r2
   183ec:	subcs	r0, r0, r1, lsl #22
   183f0:	cmp	r0, r1, lsl #21
   183f4:	adc	r2, r2, r2
   183f8:	subcs	r0, r0, r1, lsl #21
   183fc:	cmp	r0, r1, lsl #20
   18400:	adc	r2, r2, r2
   18404:	subcs	r0, r0, r1, lsl #20
   18408:	cmp	r0, r1, lsl #19
   1840c:	adc	r2, r2, r2
   18410:	subcs	r0, r0, r1, lsl #19
   18414:	cmp	r0, r1, lsl #18
   18418:	adc	r2, r2, r2
   1841c:	subcs	r0, r0, r1, lsl #18
   18420:	cmp	r0, r1, lsl #17
   18424:	adc	r2, r2, r2
   18428:	subcs	r0, r0, r1, lsl #17
   1842c:	cmp	r0, r1, lsl #16
   18430:	adc	r2, r2, r2
   18434:	subcs	r0, r0, r1, lsl #16
   18438:	cmp	r0, r1, lsl #15
   1843c:	adc	r2, r2, r2
   18440:	subcs	r0, r0, r1, lsl #15
   18444:	cmp	r0, r1, lsl #14
   18448:	adc	r2, r2, r2
   1844c:	subcs	r0, r0, r1, lsl #14
   18450:	cmp	r0, r1, lsl #13
   18454:	adc	r2, r2, r2
   18458:	subcs	r0, r0, r1, lsl #13
   1845c:	cmp	r0, r1, lsl #12
   18460:	adc	r2, r2, r2
   18464:	subcs	r0, r0, r1, lsl #12
   18468:	cmp	r0, r1, lsl #11
   1846c:	adc	r2, r2, r2
   18470:	subcs	r0, r0, r1, lsl #11
   18474:	cmp	r0, r1, lsl #10
   18478:	adc	r2, r2, r2
   1847c:	subcs	r0, r0, r1, lsl #10
   18480:	cmp	r0, r1, lsl #9
   18484:	adc	r2, r2, r2
   18488:	subcs	r0, r0, r1, lsl #9
   1848c:	cmp	r0, r1, lsl #8
   18490:	adc	r2, r2, r2
   18494:	subcs	r0, r0, r1, lsl #8
   18498:	cmp	r0, r1, lsl #7
   1849c:	adc	r2, r2, r2
   184a0:	subcs	r0, r0, r1, lsl #7
   184a4:	cmp	r0, r1, lsl #6
   184a8:	adc	r2, r2, r2
   184ac:	subcs	r0, r0, r1, lsl #6
   184b0:	cmp	r0, r1, lsl #5
   184b4:	adc	r2, r2, r2
   184b8:	subcs	r0, r0, r1, lsl #5
   184bc:	cmp	r0, r1, lsl #4
   184c0:	adc	r2, r2, r2
   184c4:	subcs	r0, r0, r1, lsl #4
   184c8:	cmp	r0, r1, lsl #3
   184cc:	adc	r2, r2, r2
   184d0:	subcs	r0, r0, r1, lsl #3
   184d4:	cmp	r0, r1, lsl #2
   184d8:	adc	r2, r2, r2
   184dc:	subcs	r0, r0, r1, lsl #2
   184e0:	cmp	r0, r1, lsl #1
   184e4:	adc	r2, r2, r2
   184e8:	subcs	r0, r0, r1, lsl #1
   184ec:	cmp	r0, r1
   184f0:	adc	r2, r2, r2
   184f4:	subcs	r0, r0, r1
   184f8:	mov	r0, r2
   184fc:	bx	lr
   18500:	moveq	r0, #1
   18504:	movne	r0, #0
   18508:	bx	lr
   1850c:	clz	r2, r1
   18510:	rsb	r2, r2, #31
   18514:	lsr	r0, r0, r2
   18518:	bx	lr
   1851c:	cmp	r0, #0
   18520:	mvnne	r0, #0
   18524:	b	187c4 <__assert_fail@plt+0x7464>
   18528:	cmp	r1, #0
   1852c:	beq	1851c <__assert_fail@plt+0x71bc>
   18530:	push	{r0, r1, lr}
   18534:	bl	1833c <__assert_fail@plt+0x6fdc>
   18538:	pop	{r1, r2, lr}
   1853c:	mul	r3, r2, r0
   18540:	sub	r1, r1, r3
   18544:	bx	lr
   18548:	cmp	r1, #0
   1854c:	beq	18758 <__assert_fail@plt+0x73f8>
   18550:	eor	ip, r0, r1
   18554:	rsbmi	r1, r1, #0
   18558:	subs	r2, r1, #1
   1855c:	beq	18724 <__assert_fail@plt+0x73c4>
   18560:	movs	r3, r0
   18564:	rsbmi	r3, r0, #0
   18568:	cmp	r3, r1
   1856c:	bls	18730 <__assert_fail@plt+0x73d0>
   18570:	tst	r1, r2
   18574:	beq	18740 <__assert_fail@plt+0x73e0>
   18578:	clz	r2, r3
   1857c:	clz	r0, r1
   18580:	sub	r2, r0, r2
   18584:	rsbs	r2, r2, #31
   18588:	addne	r2, r2, r2, lsl #1
   1858c:	mov	r0, #0
   18590:	addne	pc, pc, r2, lsl #2
   18594:	nop			; (mov r0, r0)
   18598:	cmp	r3, r1, lsl #31
   1859c:	adc	r0, r0, r0
   185a0:	subcs	r3, r3, r1, lsl #31
   185a4:	cmp	r3, r1, lsl #30
   185a8:	adc	r0, r0, r0
   185ac:	subcs	r3, r3, r1, lsl #30
   185b0:	cmp	r3, r1, lsl #29
   185b4:	adc	r0, r0, r0
   185b8:	subcs	r3, r3, r1, lsl #29
   185bc:	cmp	r3, r1, lsl #28
   185c0:	adc	r0, r0, r0
   185c4:	subcs	r3, r3, r1, lsl #28
   185c8:	cmp	r3, r1, lsl #27
   185cc:	adc	r0, r0, r0
   185d0:	subcs	r3, r3, r1, lsl #27
   185d4:	cmp	r3, r1, lsl #26
   185d8:	adc	r0, r0, r0
   185dc:	subcs	r3, r3, r1, lsl #26
   185e0:	cmp	r3, r1, lsl #25
   185e4:	adc	r0, r0, r0
   185e8:	subcs	r3, r3, r1, lsl #25
   185ec:	cmp	r3, r1, lsl #24
   185f0:	adc	r0, r0, r0
   185f4:	subcs	r3, r3, r1, lsl #24
   185f8:	cmp	r3, r1, lsl #23
   185fc:	adc	r0, r0, r0
   18600:	subcs	r3, r3, r1, lsl #23
   18604:	cmp	r3, r1, lsl #22
   18608:	adc	r0, r0, r0
   1860c:	subcs	r3, r3, r1, lsl #22
   18610:	cmp	r3, r1, lsl #21
   18614:	adc	r0, r0, r0
   18618:	subcs	r3, r3, r1, lsl #21
   1861c:	cmp	r3, r1, lsl #20
   18620:	adc	r0, r0, r0
   18624:	subcs	r3, r3, r1, lsl #20
   18628:	cmp	r3, r1, lsl #19
   1862c:	adc	r0, r0, r0
   18630:	subcs	r3, r3, r1, lsl #19
   18634:	cmp	r3, r1, lsl #18
   18638:	adc	r0, r0, r0
   1863c:	subcs	r3, r3, r1, lsl #18
   18640:	cmp	r3, r1, lsl #17
   18644:	adc	r0, r0, r0
   18648:	subcs	r3, r3, r1, lsl #17
   1864c:	cmp	r3, r1, lsl #16
   18650:	adc	r0, r0, r0
   18654:	subcs	r3, r3, r1, lsl #16
   18658:	cmp	r3, r1, lsl #15
   1865c:	adc	r0, r0, r0
   18660:	subcs	r3, r3, r1, lsl #15
   18664:	cmp	r3, r1, lsl #14
   18668:	adc	r0, r0, r0
   1866c:	subcs	r3, r3, r1, lsl #14
   18670:	cmp	r3, r1, lsl #13
   18674:	adc	r0, r0, r0
   18678:	subcs	r3, r3, r1, lsl #13
   1867c:	cmp	r3, r1, lsl #12
   18680:	adc	r0, r0, r0
   18684:	subcs	r3, r3, r1, lsl #12
   18688:	cmp	r3, r1, lsl #11
   1868c:	adc	r0, r0, r0
   18690:	subcs	r3, r3, r1, lsl #11
   18694:	cmp	r3, r1, lsl #10
   18698:	adc	r0, r0, r0
   1869c:	subcs	r3, r3, r1, lsl #10
   186a0:	cmp	r3, r1, lsl #9
   186a4:	adc	r0, r0, r0
   186a8:	subcs	r3, r3, r1, lsl #9
   186ac:	cmp	r3, r1, lsl #8
   186b0:	adc	r0, r0, r0
   186b4:	subcs	r3, r3, r1, lsl #8
   186b8:	cmp	r3, r1, lsl #7
   186bc:	adc	r0, r0, r0
   186c0:	subcs	r3, r3, r1, lsl #7
   186c4:	cmp	r3, r1, lsl #6
   186c8:	adc	r0, r0, r0
   186cc:	subcs	r3, r3, r1, lsl #6
   186d0:	cmp	r3, r1, lsl #5
   186d4:	adc	r0, r0, r0
   186d8:	subcs	r3, r3, r1, lsl #5
   186dc:	cmp	r3, r1, lsl #4
   186e0:	adc	r0, r0, r0
   186e4:	subcs	r3, r3, r1, lsl #4
   186e8:	cmp	r3, r1, lsl #3
   186ec:	adc	r0, r0, r0
   186f0:	subcs	r3, r3, r1, lsl #3
   186f4:	cmp	r3, r1, lsl #2
   186f8:	adc	r0, r0, r0
   186fc:	subcs	r3, r3, r1, lsl #2
   18700:	cmp	r3, r1, lsl #1
   18704:	adc	r0, r0, r0
   18708:	subcs	r3, r3, r1, lsl #1
   1870c:	cmp	r3, r1
   18710:	adc	r0, r0, r0
   18714:	subcs	r3, r3, r1
   18718:	cmp	ip, #0
   1871c:	rsbmi	r0, r0, #0
   18720:	bx	lr
   18724:	teq	ip, r0
   18728:	rsbmi	r0, r0, #0
   1872c:	bx	lr
   18730:	movcc	r0, #0
   18734:	asreq	r0, ip, #31
   18738:	orreq	r0, r0, #1
   1873c:	bx	lr
   18740:	clz	r2, r1
   18744:	rsb	r2, r2, #31
   18748:	cmp	ip, #0
   1874c:	lsr	r0, r3, r2
   18750:	rsbmi	r0, r0, #0
   18754:	bx	lr
   18758:	cmp	r0, #0
   1875c:	mvngt	r0, #-2147483648	; 0x80000000
   18760:	movlt	r0, #-2147483648	; 0x80000000
   18764:	b	187c4 <__assert_fail@plt+0x7464>
   18768:	cmp	r1, #0
   1876c:	beq	18758 <__assert_fail@plt+0x73f8>
   18770:	push	{r0, r1, lr}
   18774:	bl	18550 <__assert_fail@plt+0x71f0>
   18778:	pop	{r1, r2, lr}
   1877c:	mul	r3, r2, r0
   18780:	sub	r1, r1, r3
   18784:	bx	lr
   18788:	cmp	r3, #0
   1878c:	cmpeq	r2, #0
   18790:	bne	187a8 <__assert_fail@plt+0x7448>
   18794:	cmp	r1, #0
   18798:	cmpeq	r0, #0
   1879c:	mvnne	r1, #0
   187a0:	mvnne	r0, #0
   187a4:	b	187c4 <__assert_fail@plt+0x7464>
   187a8:	sub	sp, sp, #8
   187ac:	push	{sp, lr}
   187b0:	bl	187d4 <__assert_fail@plt+0x7474>
   187b4:	ldr	lr, [sp, #4]
   187b8:	add	sp, sp, #8
   187bc:	pop	{r2, r3}
   187c0:	bx	lr
   187c4:	push	{r1, lr}
   187c8:	mov	r0, #8
   187cc:	bl	1103c <raise@plt>
   187d0:	pop	{r1, pc}
   187d4:	cmp	r1, r3
   187d8:	push	{r4, r5, r6, r7, r8, r9, lr}
   187dc:	cmpeq	r0, r2
   187e0:	mov	r4, r0
   187e4:	mov	r5, r1
   187e8:	ldr	r9, [sp, #28]
   187ec:	movcc	r0, #0
   187f0:	movcc	r1, #0
   187f4:	bcc	188ec <__assert_fail@plt+0x758c>
   187f8:	cmp	r3, #0
   187fc:	clzeq	ip, r2
   18800:	clzne	ip, r3
   18804:	addeq	ip, ip, #32
   18808:	cmp	r5, #0
   1880c:	clzeq	r1, r4
   18810:	addeq	r1, r1, #32
   18814:	clzne	r1, r5
   18818:	sub	ip, ip, r1
   1881c:	sub	lr, ip, #32
   18820:	lsl	r7, r3, ip
   18824:	rsb	r8, ip, #32
   18828:	orr	r7, r7, r2, lsl lr
   1882c:	orr	r7, r7, r2, lsr r8
   18830:	lsl	r6, r2, ip
   18834:	cmp	r5, r7
   18838:	cmpeq	r4, r6
   1883c:	movcc	r0, #0
   18840:	movcc	r1, #0
   18844:	bcc	18860 <__assert_fail@plt+0x7500>
   18848:	mov	r3, #1
   1884c:	subs	r4, r4, r6
   18850:	lsl	r1, r3, lr
   18854:	lsl	r0, r3, ip
   18858:	orr	r1, r1, r3, lsr r8
   1885c:	sbc	r5, r5, r7
   18860:	cmp	ip, #0
   18864:	beq	188ec <__assert_fail@plt+0x758c>
   18868:	lsrs	r3, r7, #1
   1886c:	rrx	r2, r6
   18870:	mov	r6, ip
   18874:	b	18898 <__assert_fail@plt+0x7538>
   18878:	subs	r4, r4, r2
   1887c:	sbc	r5, r5, r3
   18880:	adds	r4, r4, r4
   18884:	adc	r5, r5, r5
   18888:	adds	r4, r4, #1
   1888c:	adc	r5, r5, #0
   18890:	subs	r6, r6, #1
   18894:	beq	188b4 <__assert_fail@plt+0x7554>
   18898:	cmp	r5, r3
   1889c:	cmpeq	r4, r2
   188a0:	bcs	18878 <__assert_fail@plt+0x7518>
   188a4:	adds	r4, r4, r4
   188a8:	adc	r5, r5, r5
   188ac:	subs	r6, r6, #1
   188b0:	bne	18898 <__assert_fail@plt+0x7538>
   188b4:	lsr	r6, r4, ip
   188b8:	lsr	r7, r5, ip
   188bc:	orr	r6, r6, r5, lsl r8
   188c0:	adds	r2, r0, r4
   188c4:	orr	r6, r6, r5, lsr lr
   188c8:	adc	r3, r1, r5
   188cc:	lsl	r1, r7, ip
   188d0:	orr	r1, r1, r6, lsl lr
   188d4:	lsl	r0, r6, ip
   188d8:	orr	r1, r1, r6, lsr r8
   188dc:	subs	r0, r2, r0
   188e0:	mov	r4, r6
   188e4:	mov	r5, r7
   188e8:	sbc	r1, r3, r1
   188ec:	cmp	r9, #0
   188f0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   188f4:	strd	r4, [r9]
   188f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   188fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18900:	mov	r7, r0
   18904:	ldr	r6, [pc, #72]	; 18954 <__assert_fail@plt+0x75f4>
   18908:	ldr	r5, [pc, #72]	; 18958 <__assert_fail@plt+0x75f8>
   1890c:	add	r6, pc, r6
   18910:	add	r5, pc, r5
   18914:	sub	r6, r6, r5
   18918:	mov	r8, r1
   1891c:	mov	r9, r2
   18920:	bl	10fec <fstatfs64@plt-0x20>
   18924:	asrs	r6, r6, #2
   18928:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1892c:	mov	r4, #0
   18930:	add	r4, r4, #1
   18934:	ldr	r3, [r5], #4
   18938:	mov	r2, r9
   1893c:	mov	r1, r8
   18940:	mov	r0, r7
   18944:	blx	r3
   18948:	cmp	r6, r4
   1894c:	bne	18930 <__assert_fail@plt+0x75d0>
   18950:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18954:	strdeq	r1, [r1], -ip
   18958:	strdeq	r1, [r1], -r4
   1895c:	bx	lr
   18960:	ldr	r3, [pc, #12]	; 18974 <__assert_fail@plt+0x7614>
   18964:	mov	r1, #0
   18968:	add	r3, pc, r3
   1896c:	ldr	r2, [r3]
   18970:	b	11210 <__cxa_atexit@plt>
   18974:	andeq	r1, r1, r4, asr #15
   18978:	mov	r2, r1
   1897c:	mov	r1, r0
   18980:	mov	r0, #3
   18984:	b	112f4 <__xstat64@plt>
   18988:	mov	r2, r1
   1898c:	mov	r1, r0
   18990:	mov	r0, #3
   18994:	b	11114 <__fxstat64@plt>
   18998:	mov	r2, r1
   1899c:	mov	r1, r0
   189a0:	mov	r0, #3
   189a4:	b	11330 <__lxstat64@plt>
   189a8:	push	{lr}		; (str lr, [sp, #-4]!)
   189ac:	sub	sp, sp, #12
   189b0:	str	r3, [sp]
   189b4:	mov	r3, r2
   189b8:	mov	r2, r1
   189bc:	mov	r1, r0
   189c0:	mov	r0, #3
   189c4:	bl	110fc <__fxstatat64@plt>
   189c8:	add	sp, sp, #12
   189cc:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

000189d0 <.fini>:
   189d0:	push	{r3, lr}
   189d4:	pop	{r3, pc}
