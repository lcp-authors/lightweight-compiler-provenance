
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010e1c <.init>:
   10e1c:	push	{r3, lr}
   10e20:	bl	11100 <__assert_fail@plt+0x48>
   10e24:	pop	{r3, pc}

Disassembly of section .plt:

00010e28 <calloc@plt-0x14>:
   10e28:	push	{lr}		; (str lr, [sp, #-4]!)
   10e2c:	ldr	lr, [pc, #4]	; 10e38 <calloc@plt-0x4>
   10e30:	add	lr, pc, lr
   10e34:	ldr	pc, [lr, #8]!
   10e38:	andeq	r8, r1, r8, asr #3

00010e3c <calloc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #456]!	; 0x1c8

00010e48 <fputs_unlocked@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #448]!	; 0x1c0

00010e54 <raise@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #440]!	; 0x1b8

00010e60 <strcmp@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #432]!	; 0x1b0

00010e6c <read@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #424]!	; 0x1a8

00010e78 <fflush@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #416]!	; 0x1a0

00010e84 <free@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #408]!	; 0x198

00010e90 <_exit@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #400]!	; 0x190

00010e9c <memcpy@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #392]!	; 0x188

00010ea8 <__strtoull_internal@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #384]!	; 0x180

00010eb4 <mbsinit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #376]!	; 0x178

00010ec0 <fwrite_unlocked@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #368]!	; 0x170

00010ecc <dcgettext@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #360]!	; 0x168

00010ed8 <realloc@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #352]!	; 0x160

00010ee4 <textdomain@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #344]!	; 0x158

00010ef0 <rawmemchr@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #336]!	; 0x150

00010efc <iswprint@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #328]!	; 0x148

00010f08 <__fxstat64@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #320]!	; 0x140

00010f14 <fwrite@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #312]!	; 0x138

00010f20 <lseek64@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #304]!	; 0x130

00010f2c <__ctype_get_mb_cur_max@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #296]!	; 0x128

00010f38 <__fpending@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #288]!	; 0x120

00010f44 <mbrtowc@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #280]!	; 0x118

00010f50 <error@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #272]!	; 0x110

00010f5c <open64@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #264]!	; 0x108

00010f68 <malloc@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #256]!	; 0x100

00010f74 <__libc_start_main@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #248]!	; 0xf8

00010f80 <__freading@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #240]!	; 0xf0

00010f8c <__gmon_start__@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #232]!	; 0xe8

00010f98 <getopt_long@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #224]!	; 0xe0

00010fa4 <__ctype_b_loc@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #216]!	; 0xd8

00010fb0 <exit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #208]!	; 0xd0

00010fbc <bcmp@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #200]!	; 0xc8

00010fc8 <strlen@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #192]!	; 0xc0

00010fd4 <strchr@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #184]!	; 0xb8

00010fe0 <memrchr@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #176]!	; 0xb0

00010fec <__errno_location@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #168]!	; 0xa8

00010ff8 <__cxa_atexit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #160]!	; 0xa0

00011004 <memset@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #152]!	; 0x98

00011010 <__printf_chk@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #144]!	; 0x90

0001101c <fileno@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #136]!	; 0x88

00011028 <__fprintf_chk@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #128]!	; 0x80

00011034 <memchr@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #120]!	; 0x78

00011040 <fclose@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #112]!	; 0x70

0001104c <fseeko64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #104]!	; 0x68

00011058 <setlocale@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #96]!	; 0x60

00011064 <strrchr@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #88]!	; 0x58

00011070 <nl_langinfo@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #80]!	; 0x50

0001107c <clearerr_unlocked@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #72]!	; 0x48

00011088 <bindtextdomain@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #64]!	; 0x40

00011094 <strncmp@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #56]!	; 0x38

000110a0 <abort@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #48]!	; 0x30

000110ac <close@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #24, 20	; 0x18000
   110b4:	ldr	pc, [ip, #40]!	; 0x28

000110b8 <__assert_fail@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #24, 20	; 0x18000
   110c0:	ldr	pc, [ip, #32]!

Disassembly of section .text:

000110c4 <.text>:
   110c4:	mov	fp, #0
   110c8:	mov	lr, #0
   110cc:	pop	{r1}		; (ldr r1, [sp], #4)
   110d0:	mov	r2, sp
   110d4:	push	{r2}		; (str r2, [sp, #-4]!)
   110d8:	push	{r0}		; (str r0, [sp, #-4]!)
   110dc:	ldr	ip, [pc, #16]	; 110f4 <__assert_fail@plt+0x3c>
   110e0:	push	{ip}		; (str ip, [sp, #-4]!)
   110e4:	ldr	r0, [pc, #12]	; 110f8 <__assert_fail@plt+0x40>
   110e8:	ldr	r3, [pc, #12]	; 110fc <__assert_fail@plt+0x44>
   110ec:	bl	10f74 <__libc_start_main@plt>
   110f0:	bl	110a0 <abort@plt>
   110f4:	andeq	r7, r1, r8, lsr #19
   110f8:			; <UNDEFINED> instruction: 0x000114b0
   110fc:	andeq	r7, r1, r8, asr #18
   11100:	ldr	r3, [pc, #20]	; 1111c <__assert_fail@plt+0x64>
   11104:	ldr	r2, [pc, #20]	; 11120 <__assert_fail@plt+0x68>
   11108:	add	r3, pc, r3
   1110c:	ldr	r2, [r3, r2]
   11110:	cmp	r2, #0
   11114:	bxeq	lr
   11118:	b	10f8c <__gmon_start__@plt>
   1111c:	strdeq	r7, [r1], -r0
   11120:	andeq	r0, r0, r4, ror #1
   11124:	ldr	r0, [pc, #24]	; 11144 <__assert_fail@plt+0x8c>
   11128:	ldr	r3, [pc, #24]	; 11148 <__assert_fail@plt+0x90>
   1112c:	cmp	r3, r0
   11130:	bxeq	lr
   11134:	ldr	r3, [pc, #16]	; 1114c <__assert_fail@plt+0x94>
   11138:	cmp	r3, #0
   1113c:	bxeq	lr
   11140:	bx	r3
   11144:	andeq	r9, r2, r8, lsr r1
   11148:	andeq	r9, r2, r8, lsr r1
   1114c:	andeq	r0, r0, r0
   11150:	ldr	r0, [pc, #36]	; 1117c <__assert_fail@plt+0xc4>
   11154:	ldr	r1, [pc, #36]	; 11180 <__assert_fail@plt+0xc8>
   11158:	sub	r1, r1, r0
   1115c:	asr	r1, r1, #2
   11160:	add	r1, r1, r1, lsr #31
   11164:	asrs	r1, r1, #1
   11168:	bxeq	lr
   1116c:	ldr	r3, [pc, #16]	; 11184 <__assert_fail@plt+0xcc>
   11170:	cmp	r3, #0
   11174:	bxeq	lr
   11178:	bx	r3
   1117c:	andeq	r9, r2, r8, lsr r1
   11180:	andeq	r9, r2, r8, lsr r1
   11184:	andeq	r0, r0, r0
   11188:	push	{r4, lr}
   1118c:	ldr	r4, [pc, #24]	; 111ac <__assert_fail@plt+0xf4>
   11190:	ldrb	r3, [r4]
   11194:	cmp	r3, #0
   11198:	popne	{r4, pc}
   1119c:	bl	11124 <__assert_fail@plt+0x6c>
   111a0:	mov	r3, #1
   111a4:	strb	r3, [r4]
   111a8:	pop	{r4, pc}
   111ac:	andeq	r9, r2, r4, asr r1
   111b0:	b	11150 <__assert_fail@plt+0x98>
   111b4:	push	{fp, lr}
   111b8:	mov	fp, sp
   111bc:	sub	sp, sp, #56	; 0x38
   111c0:	mov	r4, r0
   111c4:	cmp	r0, #0
   111c8:	bne	1146c <__assert_fail@plt+0x3b4>
   111cc:	movw	r1, #31227	; 0x79fb
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	movt	r1, #1
   111dc:	bl	10ecc <dcgettext@plt>
   111e0:	mov	r1, r0
   111e4:	movw	r0, #37220	; 0x9164
   111e8:	movt	r0, #2
   111ec:	ldr	r2, [r0]
   111f0:	mov	r0, #1
   111f4:	bl	11010 <__printf_chk@plt>
   111f8:	movw	r1, #31260	; 0x7a1c
   111fc:	mov	r0, #0
   11200:	mov	r2, #5
   11204:	movt	r1, #1
   11208:	bl	10ecc <dcgettext@plt>
   1120c:	mov	r1, r0
   11210:	mov	r0, #1
   11214:	mov	r2, #10
   11218:	bl	11010 <__printf_chk@plt>
   1121c:	movw	r1, #32448	; 0x7ec0
   11220:	mov	r0, #0
   11224:	mov	r2, #5
   11228:	movt	r1, #1
   1122c:	bl	10ecc <dcgettext@plt>
   11230:	movw	r7, #37196	; 0x914c
   11234:	movt	r7, #2
   11238:	ldr	r1, [r7]
   1123c:	bl	10e48 <fputs_unlocked@plt>
   11240:	movw	r1, #32504	; 0x7ef8
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10ecc <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e48 <fputs_unlocked@plt>
   1125c:	movw	r1, #31393	; 0x7aa1
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10ecc <dcgettext@plt>
   11270:	mov	r1, r0
   11274:	mov	r0, #1
   11278:	mov	r2, #10
   1127c:	bl	11010 <__printf_chk@plt>
   11280:	movw	r1, #31791	; 0x7c2f
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10ecc <dcgettext@plt>
   11294:	ldr	r1, [r7]
   11298:	bl	10e48 <fputs_unlocked@plt>
   1129c:	movw	r1, #31923	; 0x7cb3
   112a0:	mov	r0, #0
   112a4:	mov	r2, #5
   112a8:	movt	r1, #1
   112ac:	bl	10ecc <dcgettext@plt>
   112b0:	ldr	r1, [r7]
   112b4:	bl	10e48 <fputs_unlocked@plt>
   112b8:	movw	r1, #31986	; 0x7cf2
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10ecc <dcgettext@plt>
   112cc:	ldr	r1, [r7]
   112d0:	bl	10e48 <fputs_unlocked@plt>
   112d4:	movw	r1, #32031	; 0x7d1f
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10ecc <dcgettext@plt>
   112e8:	ldr	r1, [r7]
   112ec:	bl	10e48 <fputs_unlocked@plt>
   112f0:	movw	r1, #32085	; 0x7d55
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10ecc <dcgettext@plt>
   11304:	ldr	r1, [r7]
   11308:	bl	10e48 <fputs_unlocked@plt>
   1130c:	movw	r0, #33440	; 0x82a0
   11310:	mov	r2, #48	; 0x30
   11314:	mov	r6, sp
   11318:	movw	r5, #32297	; 0x7e29
   1131c:	movt	r0, #1
   11320:	movt	r5, #1
   11324:	add	r1, r0, #32
   11328:	add	r3, r0, #16
   1132c:	vld1.64	{d18-d19}, [r0], r2
   11330:	vld1.64	{d16-d17}, [r1]
   11334:	vld1.64	{d20-d21}, [r3]
   11338:	vldr	d22, [r0]
   1133c:	add	r1, r6, #32
   11340:	add	r0, r6, #16
   11344:	vst1.64	{d16-d17}, [r1]
   11348:	movw	r1, #32579	; 0x7f43
   1134c:	vst1.64	{d20-d21}, [r0]
   11350:	mov	r0, r6
   11354:	movt	r1, #1
   11358:	vst1.64	{d18-d19}, [r0], r2
   1135c:	vstr	d22, [r0]
   11360:	mov	r0, r5
   11364:	bl	10e60 <strcmp@plt>
   11368:	cmp	r0, #0
   1136c:	ldrne	r1, [r6, #8]!
   11370:	cmpne	r1, #0
   11374:	bne	11360 <__assert_fail@plt+0x2a8>
   11378:	movw	r1, #32674	; 0x7fa2
   1137c:	ldr	r6, [r6, #4]
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10ecc <dcgettext@plt>
   11390:	movw	r2, #32374	; 0x7e76
   11394:	movw	r3, #32697	; 0x7fb9
   11398:	mov	r1, r0
   1139c:	mov	r0, #1
   113a0:	movt	r2, #1
   113a4:	movt	r3, #1
   113a8:	bl	11010 <__printf_chk@plt>
   113ac:	cmp	r6, #0
   113b0:	mov	r0, #5
   113b4:	mov	r1, #0
   113b8:	moveq	r6, r5
   113bc:	bl	11058 <setlocale@plt>
   113c0:	cmp	r0, #0
   113c4:	beq	113fc <__assert_fail@plt+0x344>
   113c8:	movw	r1, #32737	; 0x7fe1
   113cc:	mov	r2, #3
   113d0:	movt	r1, #1
   113d4:	bl	11094 <strncmp@plt>
   113d8:	cmp	r0, #0
   113dc:	beq	113fc <__assert_fail@plt+0x344>
   113e0:	movw	r1, #32741	; 0x7fe5
   113e4:	mov	r0, #0
   113e8:	mov	r2, #5
   113ec:	movt	r1, #1
   113f0:	bl	10ecc <dcgettext@plt>
   113f4:	ldr	r1, [r7]
   113f8:	bl	10e48 <fputs_unlocked@plt>
   113fc:	movw	r1, #32812	; 0x802c
   11400:	mov	r0, #0
   11404:	mov	r2, #5
   11408:	movt	r1, #1
   1140c:	bl	10ecc <dcgettext@plt>
   11410:	movw	r2, #32697	; 0x7fb9
   11414:	mov	r1, r0
   11418:	mov	r0, #1
   1141c:	mov	r3, r5
   11420:	movt	r2, #1
   11424:	bl	11010 <__printf_chk@plt>
   11428:	movw	r1, #32839	; 0x8047
   1142c:	mov	r0, #0
   11430:	mov	r2, #5
   11434:	movt	r1, #1
   11438:	bl	10ecc <dcgettext@plt>
   1143c:	mov	r1, r0
   11440:	movw	r0, #32607	; 0x7f5f
   11444:	movw	r3, #32889	; 0x8079
   11448:	cmp	r6, r5
   1144c:	mov	r2, r6
   11450:	movt	r0, #1
   11454:	movt	r3, #1
   11458:	moveq	r3, r0
   1145c:	mov	r0, #1
   11460:	bl	11010 <__printf_chk@plt>
   11464:	mov	r0, r4
   11468:	bl	10fb0 <exit@plt>
   1146c:	movw	r0, #37192	; 0x9148
   11470:	movw	r1, #31188	; 0x79d4
   11474:	mov	r2, #5
   11478:	movt	r0, #2
   1147c:	movt	r1, #1
   11480:	ldr	r5, [r0]
   11484:	mov	r0, #0
   11488:	bl	10ecc <dcgettext@plt>
   1148c:	mov	r2, r0
   11490:	movw	r0, #37220	; 0x9164
   11494:	mov	r1, #1
   11498:	movt	r0, #2
   1149c:	ldr	r3, [r0]
   114a0:	mov	r0, r5
   114a4:	bl	11028 <__fprintf_chk@plt>
   114a8:	mov	r0, r4
   114ac:	bl	10fb0 <exit@plt>
   114b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114b4:	add	fp, sp, #28
   114b8:	sub	sp, sp, #260	; 0x104
   114bc:	sub	sp, sp, #16384	; 0x4000
   114c0:	mov	r4, r0
   114c4:	ldr	r0, [r1]
   114c8:	mov	r6, r1
   114cc:	bl	137f0 <__assert_fail@plt+0x2738>
   114d0:	movw	r1, #32889	; 0x8079
   114d4:	mov	r0, #6
   114d8:	movt	r1, #1
   114dc:	bl	11058 <setlocale@plt>
   114e0:	movw	r5, #32378	; 0x7e7a
   114e4:	movw	r1, #32302	; 0x7e2e
   114e8:	movt	r5, #1
   114ec:	movt	r1, #1
   114f0:	mov	r0, r5
   114f4:	bl	11088 <bindtextdomain@plt>
   114f8:	mov	r0, r5
   114fc:	bl	10ee4 <textdomain@plt>
   11500:	movw	r0, #13640	; 0x3548
   11504:	movt	r0, #1
   11508:	bl	179ac <__assert_fail@plt+0x68f4>
   1150c:	movw	r0, #37205	; 0x9155
   11510:	mov	r9, #1
   11514:	mov	sl, #0
   11518:	cmp	r4, #2
   1151c:	movt	r0, #2
   11520:	strb	r9, [r0, #2]
   11524:	strh	sl, [r0]
   11528:	mov	r0, #10
   1152c:	str	r0, [sp, #76]	; 0x4c
   11530:	blt	1165c <__assert_fail@plt+0x5a4>
   11534:	mov	r5, r6
   11538:	ldr	r1, [r5, #4]!
   1153c:	ldrb	r0, [r1]
   11540:	cmp	r0, #45	; 0x2d
   11544:	bne	1165c <__assert_fail@plt+0x5a4>
   11548:	ldrb	r0, [r1, #1]!
   1154c:	sub	r0, r0, #48	; 0x30
   11550:	cmp	r0, #9
   11554:	bhi	1165c <__assert_fail@plt+0x5a4>
   11558:	mov	r0, r1
   1155c:	str	r1, [sp, #120]	; 0x78
   11560:	ldrb	r3, [r0, #1]!
   11564:	sub	r1, r3, #48	; 0x30
   11568:	cmp	r1, #10
   1156c:	bcc	11560 <__assert_fail@plt+0x4a8>
   11570:	mov	r2, #0
   11574:	mov	r1, #1
   11578:	mov	r7, r0
   1157c:	str	r2, [sp, #124]	; 0x7c
   11580:	mov	r2, #0
   11584:	mov	ip, r1
   11588:	mvn	r1, #97	; 0x61
   1158c:	mov	lr, r2
   11590:	uxtab	r8, r1, r3
   11594:	cmp	r8, #24
   11598:	bhi	131fc <__assert_fail@plt+0x2144>
   1159c:	add	r9, pc, #8
   115a0:	mov	r1, #0
   115a4:	mov	r2, #0
   115a8:	ldr	pc, [r9, r8, lsl #2]
   115ac:	andeq	r1, r1, r0, lsl r6
   115b0:	andeq	r1, r1, r8, lsl r6
   115b4:	andeq	r3, r1, r4, lsr r3
   115b8:	andeq	r3, r1, r4, lsr r3
   115bc:	andeq	r3, r1, r4, lsr r3
   115c0:	andeq	r3, r1, r4, lsr r3
   115c4:	andeq	r3, r1, r4, lsr r3
   115c8:	andeq	r3, r1, r4, lsr r3
   115cc:	andeq	r3, r1, r4, lsr r3
   115d0:	andeq	r1, r1, r0, lsl r6
   115d4:	andeq	r1, r1, ip, asr #12
   115d8:	andeq	r1, r1, r0, lsl r6
   115dc:	andeq	r3, r1, r4, lsr r3
   115e0:	andeq	r3, r1, r4, lsr r3
   115e4:	andeq	r3, r1, r4, lsr r3
   115e8:	andeq	r1, r1, r4, lsr r6
   115ec:	andeq	r3, r1, r4, lsr r3
   115f0:	andeq	r3, r1, r4, lsr r3
   115f4:	andeq	r3, r1, r4, lsr r3
   115f8:	andeq	r3, r1, r4, lsr r3
   115fc:	andeq	r1, r1, ip, lsr r6
   11600:	andeq	r3, r1, r4, lsr r3
   11604:	andeq	r3, r1, r4, lsr r3
   11608:	andeq	r3, r1, r4, lsr r3
   1160c:	andeq	r1, r1, r0, lsr #12
   11610:	mov	r1, #0
   11614:	mov	r2, r3
   11618:	ldrb	r3, [r7, #1]!
   1161c:	b	11584 <__assert_fail@plt+0x4cc>
   11620:	movw	r1, #37205	; 0x9155
   11624:	mov	r2, #0
   11628:	movt	r1, #2
   1162c:	strb	r2, [r1, #2]
   11630:	b	11644 <__assert_fail@plt+0x58c>
   11634:	mov	r1, #2
   11638:	b	11640 <__assert_fail@plt+0x588>
   1163c:	mov	r1, #1
   11640:	str	r1, [sp, #124]	; 0x7c
   11644:	mov	r1, ip
   11648:	b	11650 <__assert_fail@plt+0x598>
   1164c:	mov	r1, #1
   11650:	ldrb	r3, [r7, #1]!
   11654:	mov	r2, lr
   11658:	b	11584 <__assert_fail@plt+0x4cc>
   1165c:	mov	r0, #0
   11660:	mov	r5, r6
   11664:	mov	r1, #0
   11668:	str	r0, [sp, #124]	; 0x7c
   1166c:	mov	r0, #1
   11670:	str	r0, [sp, #64]	; 0x40
   11674:	movw	r8, #32356	; 0x7e64
   11678:	movw	r7, #33280	; 0x8200
   1167c:	mov	r0, #0
   11680:	movt	r8, #1
   11684:	movt	r7, #1
   11688:	str	r0, [sp, #72]	; 0x48
   1168c:	str	r1, [sp, #92]	; 0x5c
   11690:	mov	r0, r4
   11694:	mov	r1, r5
   11698:	mov	r2, r8
   1169c:	mov	r3, r7
   116a0:	str	sl, [sp]
   116a4:	bl	10f98 <getopt_long@plt>
   116a8:	mov	r6, r0
   116ac:	cmp	r0, #98	; 0x62
   116b0:	ble	1181c <__assert_fail@plt+0x764>
   116b4:	sub	r0, r6, #99	; 0x63
   116b8:	cmp	r0, #23
   116bc:	bhi	11738 <__assert_fail@plt+0x680>
   116c0:	add	r1, pc, #0
   116c4:	ldr	pc, [r1, r0, lsl #2]
   116c8:	andeq	r1, r1, r8, ror #14
   116cc:	strdeq	r3, [r1], -r8
   116d0:	strdeq	r3, [r1], -r8
   116d4:	strdeq	r3, [r1], -r8
   116d8:	strdeq	r3, [r1], -r8
   116dc:	strdeq	r3, [r1], -r8
   116e0:	strdeq	r3, [r1], -r8
   116e4:	strdeq	r3, [r1], -r8
   116e8:	strdeq	r3, [r1], -r8
   116ec:	strdeq	r3, [r1], -r8
   116f0:	strdeq	r3, [r1], -r8
   116f4:	andeq	r1, r1, r0, lsr #15
   116f8:	strdeq	r3, [r1], -r8
   116fc:	strdeq	r3, [r1], -r8
   11700:	andeq	r1, r1, r8, asr r7
   11704:	strdeq	r3, [r1], -r8
   11708:	strdeq	r3, [r1], -r8
   1170c:	strdeq	r3, [r1], -r8
   11710:	strdeq	r3, [r1], -r8
   11714:	andeq	r1, r1, r0, asr r7
   11718:	strdeq	r3, [r1], -r8
   1171c:	strdeq	r3, [r1], -r8
   11720:	strdeq	r3, [r1], -r8
   11724:	andeq	r1, r1, r8, lsr #14
   11728:	movw	r0, #37205	; 0x9155
   1172c:	movt	r0, #2
   11730:	strb	sl, [r0, #2]
   11734:	b	11690 <__assert_fail@plt+0x5d8>
   11738:	cmp	r6, #256	; 0x100
   1173c:	bne	132f8 <__assert_fail@plt+0x2240>
   11740:	movw	r0, #37205	; 0x9155
   11744:	movt	r0, #2
   11748:	strb	r9, [r0, #3]
   1174c:	b	11690 <__assert_fail@plt+0x5d8>
   11750:	mov	r0, #1
   11754:	b	1175c <__assert_fail@plt+0x6a4>
   11758:	mov	r0, #2
   1175c:	ldr	r1, [sp, #92]	; 0x5c
   11760:	str	r0, [sp, #124]	; 0x7c
   11764:	b	1168c <__assert_fail@plt+0x5d4>
   11768:	movw	r1, #37200	; 0x9150
   1176c:	movt	r1, #2
   11770:	ldr	r6, [r1]
   11774:	ldrb	r0, [r6]
   11778:	subs	r0, r0, #45	; 0x2d
   1177c:	clz	r0, r0
   11780:	addeq	r6, r6, #1
   11784:	lsr	r0, r0, #5
   11788:	streq	r6, [r1]
   1178c:	movw	r1, #32424	; 0x7ea8
   11790:	str	r0, [sp, #72]	; 0x48
   11794:	mov	r0, #0
   11798:	movt	r1, #1
   1179c:	b	117d4 <__assert_fail@plt+0x71c>
   117a0:	movw	r1, #37200	; 0x9150
   117a4:	movt	r1, #2
   117a8:	ldr	r6, [r1]
   117ac:	ldrb	r0, [r6]
   117b0:	subs	r0, r0, #45	; 0x2d
   117b4:	addeq	r6, r6, #1
   117b8:	clz	r0, r0
   117bc:	streq	r6, [r1]
   117c0:	movw	r1, #32903	; 0x8087
   117c4:	lsr	r0, r0, #5
   117c8:	movt	r1, #1
   117cc:	str	r0, [sp, #72]	; 0x48
   117d0:	mov	r0, #1
   117d4:	str	r0, [sp, #64]	; 0x40
   117d8:	mov	r0, #0
   117dc:	mov	r2, #5
   117e0:	bl	10ecc <dcgettext@plt>
   117e4:	mvn	r1, #0
   117e8:	str	r0, [sp, #12]
   117ec:	mov	r0, r6
   117f0:	mov	r2, #0
   117f4:	mov	r3, #0
   117f8:	str	sl, [sp, #16]
   117fc:	str	r1, [sp]
   11800:	str	r1, [sp, #4]
   11804:	movw	r1, #32890	; 0x807a
   11808:	movt	r1, #1
   1180c:	str	r1, [sp, #8]
   11810:	bl	16564 <__assert_fail@plt+0x54ac>
   11814:	str	r0, [sp, #76]	; 0x4c
   11818:	b	1168c <__assert_fail@plt+0x5d4>
   1181c:	ldr	r3, [sp, #92]	; 0x5c
   11820:	ldr	r1, [sp, #124]	; 0x7c
   11824:	cmn	r6, #1
   11828:	bne	1328c <__assert_fail@plt+0x21d4>
   1182c:	ldr	r7, [sp, #76]	; 0x4c
   11830:	movw	r0, #37184	; 0x9140
   11834:	movw	r8, #37205	; 0x9155
   11838:	cmp	r1, #1
   1183c:	movt	r0, #2
   11840:	movt	r8, #2
   11844:	beq	11860 <__assert_fail@plt+0x7a8>
   11848:	cmp	r1, #0
   1184c:	bne	11868 <__assert_fail@plt+0x7b0>
   11850:	ldr	r1, [r0]
   11854:	sub	r2, r4, #1
   11858:	cmp	r1, r2
   1185c:	bge	11868 <__assert_fail@plt+0x7b0>
   11860:	mov	r1, #1
   11864:	strb	r1, [r8, #1]
   11868:	ldr	r2, [sp, #72]	; 0x48
   1186c:	cmn	r3, #1
   11870:	mov	r1, #0
   11874:	mov	r6, #0
   11878:	movwgt	r1, #1
   1187c:	mvn	r2, r2
   11880:	orr	r1, r1, r2
   11884:	tst	r1, #1
   11888:	bne	1189c <__assert_fail@plt+0x7e4>
   1188c:	ldr	r1, [sp, #64]	; 0x40
   11890:	eor	r1, r1, #1
   11894:	tst	r1, #1
   11898:	bne	133a4 <__assert_fail@plt+0x22ec>
   1189c:	ldr	r0, [r0]
   118a0:	movw	r1, #33272	; 0x81f8
   118a4:	movt	r1, #1
   118a8:	cmp	r0, r4
   118ac:	addlt	r1, r5, r0, lsl #2
   118b0:	ldr	r0, [r1]
   118b4:	str	r1, [sp, #84]	; 0x54
   118b8:	cmp	r0, #0
   118bc:	beq	131d4 <__assert_fail@plt+0x211c>
   118c0:	mov	sl, r0
   118c4:	adds	r0, r7, #8192	; 0x2000
   118c8:	mov	r1, #1
   118cc:	add	r9, sp, #235	; 0xeb
   118d0:	str	r7, [sp, #76]	; 0x4c
   118d4:	adc	r0, r3, #0
   118d8:	str	r0, [sp, #24]
   118dc:	mov	r0, r7
   118e0:	bfc	r0, #13, #19
   118e4:	str	r0, [sp, #20]
   118e8:	rsb	r0, r0, #8192	; 0x2000
   118ec:	str	r0, [sp, #52]	; 0x34
   118f0:	add	r0, r0, r7
   118f4:	add	r1, r1, r0, lsr #13
   118f8:	lsr	r0, r0, #13
   118fc:	str	r0, [sp, #56]	; 0x38
   11900:	add	r0, sp, #128	; 0x80
   11904:	add	r0, r0, #48	; 0x30
   11908:	cmp	r1, #16
   1190c:	mov	r2, r1
   11910:	str	r1, [sp, #68]	; 0x44
   11914:	movcs	r2, #16
   11918:	str	r0, [sp, #28]
   1191c:	add	r0, r7, #8192	; 0x2000
   11920:	str	r2, [sp, #36]	; 0x24
   11924:	str	r0, [sp, #60]	; 0x3c
   11928:	lsr	r0, r1, #1
   1192c:	mov	r2, #0
   11930:	mov	r1, #1
   11934:	str	r0, [sp, #32]
   11938:	b	11960 <__assert_fail@plt+0x8a8>
   1193c:	ldr	r7, [sp, #108]	; 0x6c
   11940:	ldr	r2, [sp, #116]	; 0x74
   11944:	ldr	r0, [sp, #84]	; 0x54
   11948:	ldr	r1, [sp, #120]	; 0x78
   1194c:	add	r2, r2, #1
   11950:	and	r1, r1, r7
   11954:	ldr	sl, [r0, r2, lsl #2]
   11958:	cmp	sl, #0
   1195c:	beq	131d0 <__assert_fail@plt+0x2118>
   11960:	str	r1, [sp, #120]	; 0x78
   11964:	movw	r1, #33589	; 0x8335
   11968:	mov	r0, sl
   1196c:	str	r2, [sp, #116]	; 0x74
   11970:	movt	r1, #1
   11974:	bl	10e60 <strcmp@plt>
   11978:	cmp	r0, #0
   1197c:	str	r0, [sp, #112]	; 0x70
   11980:	beq	11a90 <__assert_fail@plt+0x9d8>
   11984:	mov	r0, sl
   11988:	mov	r1, #0
   1198c:	bl	10f5c <open64@plt>
   11990:	cmn	r0, #1
   11994:	ble	11ac4 <__assert_fail@plt+0xa0c>
   11998:	mov	r7, r0
   1199c:	ldrb	r0, [r8, #1]
   119a0:	cmp	r0, #1
   119a4:	bne	119e0 <__assert_fail@plt+0x928>
   119a8:	ldrb	r0, [r8, #4]
   119ac:	movw	r1, #33074	; 0x8132
   119b0:	movw	r2, #32889	; 0x8079
   119b4:	mov	r3, sl
   119b8:	movt	r1, #1
   119bc:	movt	r2, #1
   119c0:	cmp	r0, #0
   119c4:	movw	r0, #32888	; 0x8078
   119c8:	movt	r0, #1
   119cc:	movne	r2, r0
   119d0:	mov	r0, #1
   119d4:	bl	11010 <__printf_chk@plt>
   119d8:	mov	r0, #1
   119dc:	strb	r0, [r8, #4]
   119e0:	ldr	r0, [sp, #72]	; 0x48
   119e4:	str	sl, [sp, #104]	; 0x68
   119e8:	str	r7, [sp, #124]	; 0x7c
   119ec:	tst	r0, #1
   119f0:	beq	11a64 <__assert_fail@plt+0x9ac>
   119f4:	mov	r0, #3
   119f8:	mov	r1, r7
   119fc:	add	r2, sp, #128	; 0x80
   11a00:	bl	10f08 <__fxstat64@plt>
   11a04:	cmp	r0, #0
   11a08:	beq	11cf8 <__assert_fail@plt+0xc40>
   11a0c:	bl	10fec <__errno_location@plt>
   11a10:	movw	r1, #33058	; 0x8122
   11a14:	ldr	r4, [r0]
   11a18:	mov	r0, #0
   11a1c:	mov	r2, #5
   11a20:	movt	r1, #1
   11a24:	str	r0, [sp, #108]	; 0x6c
   11a28:	mov	r0, #0
   11a2c:	bl	10ecc <dcgettext@plt>
   11a30:	mov	r5, r0
   11a34:	mov	r0, #4
   11a38:	mov	r1, sl
   11a3c:	bl	1528c <__assert_fail@plt+0x41d4>
   11a40:	mov	r3, r0
   11a44:	mov	r0, #0
   11a48:	mov	r1, r4
   11a4c:	mov	r2, r5
   11a50:	bl	10f50 <error@plt>
   11a54:	ldr	r0, [sp, #112]	; 0x70
   11a58:	cmp	r0, #0
   11a5c:	bne	12db0 <__assert_fail@plt+0x1cf8>
   11a60:	b	1193c <__assert_fail@plt+0x884>
   11a64:	ldr	r0, [sp, #64]	; 0x40
   11a68:	ldr	r7, [sp, #92]	; 0x5c
   11a6c:	tst	r0, #1
   11a70:	beq	11c7c <__assert_fail@plt+0xbc4>
   11a74:	ldr	r4, [sp, #76]	; 0x4c
   11a78:	orrs	r0, r4, r7
   11a7c:	mov	r0, #1
   11a80:	str	r0, [sp, #108]	; 0x6c
   11a84:	beq	11d54 <__assert_fail@plt+0xc9c>
   11a88:	mov	r5, r7
   11a8c:	b	11af0 <__assert_fail@plt+0xa38>
   11a90:	movw	r1, #32997	; 0x80e5
   11a94:	mov	r0, #1
   11a98:	mov	r2, #5
   11a9c:	mov	r7, #0
   11aa0:	movt	r1, #1
   11aa4:	strb	r0, [r8]
   11aa8:	mov	r0, #0
   11aac:	bl	10ecc <dcgettext@plt>
   11ab0:	mov	sl, r0
   11ab4:	ldrb	r0, [r8, #1]
   11ab8:	cmp	r0, #1
   11abc:	beq	119a8 <__assert_fail@plt+0x8f0>
   11ac0:	b	119e0 <__assert_fail@plt+0x928>
   11ac4:	bl	10fec <__errno_location@plt>
   11ac8:	ldr	r4, [r0]
   11acc:	movw	r1, #33012	; 0x80f4
   11ad0:	mov	r7, #0
   11ad4:	mov	r0, #0
   11ad8:	movt	r1, #1
   11adc:	b	12ddc <__assert_fail@plt+0x1d24>
   11ae0:	mov	r0, r9
   11ae4:	bl	1340c <__assert_fail@plt+0x2354>
   11ae8:	orrs	r0, r4, r5
   11aec:	beq	11d54 <__assert_fail@plt+0xc9c>
   11af0:	ldr	r7, [sp, #124]	; 0x7c
   11af4:	mov	r1, r9
   11af8:	mov	r2, #8192	; 0x2000
   11afc:	mov	r0, r7
   11b00:	bl	157cc <__assert_fail@plt+0x4714>
   11b04:	cmn	r0, #1
   11b08:	beq	12b30 <__assert_fail@plt+0x1a78>
   11b0c:	mov	r1, r0
   11b10:	cmp	r0, #0
   11b14:	beq	11d58 <__assert_fail@plt+0xca0>
   11b18:	ldrb	r0, [r8, #2]
   11b1c:	mov	r7, #0
   11b20:	cmp	r0, #0
   11b24:	movwne	r0, #10
   11b28:	ldrb	r2, [r9, r7]
   11b2c:	cmp	r0, r2
   11b30:	beq	11b4c <__assert_fail@plt+0xa94>
   11b34:	add	r7, r7, #1
   11b38:	cmp	r1, r7
   11b3c:	beq	11ae0 <__assert_fail@plt+0xa28>
   11b40:	ldrb	r2, [r9, r7]
   11b44:	cmp	r0, r2
   11b48:	bne	11b34 <__assert_fail@plt+0xa7c>
   11b4c:	subs	r4, r4, #1
   11b50:	sbc	r5, r5, #0
   11b54:	orrs	r2, r4, r5
   11b58:	bne	11b34 <__assert_fail@plt+0xa7c>
   11b5c:	mov	r0, #1
   11b60:	ldr	r4, [sp, #124]	; 0x7c
   11b64:	str	r0, [sp]
   11b68:	mvn	r0, r7
   11b6c:	add	r0, r0, r1
   11b70:	rsbs	r5, r0, #0
   11b74:	mov	r0, #0
   11b78:	sbc	r6, r0, #0
   11b7c:	mov	r0, r4
   11b80:	mov	r2, r5
   11b84:	mov	r3, r6
   11b88:	bl	10f20 <lseek64@plt>
   11b8c:	add	sl, r7, #1
   11b90:	mov	r7, r4
   11b94:	cmn	r1, #1
   11b98:	bgt	11c5c <__assert_fail@plt+0xba4>
   11b9c:	sub	lr, fp, #8192	; 0x2000
   11ba0:	mov	r0, #3
   11ba4:	mov	r1, r7
   11ba8:	sub	r2, lr, #32
   11bac:	bl	10f08 <__fxstat64@plt>
   11bb0:	cmp	r0, #0
   11bb4:	bne	11bd0 <__assert_fail@plt+0xb18>
   11bb8:	sub	lr, fp, #8192	; 0x2000
   11bbc:	sub	r0, lr, #32
   11bc0:	ldr	r0, [r0, #16]
   11bc4:	and	r0, r0, #61440	; 0xf000
   11bc8:	cmp	r0, #32768	; 0x8000
   11bcc:	bne	11c5c <__assert_fail@plt+0xba4>
   11bd0:	mov	r0, #1
   11bd4:	mov	r2, r5
   11bd8:	mov	r3, r6
   11bdc:	str	r0, [sp]
   11be0:	mov	r0, r7
   11be4:	bl	10f20 <lseek64@plt>
   11be8:	cmn	r1, #1
   11bec:	bgt	11c5c <__assert_fail@plt+0xba4>
   11bf0:	bl	10fec <__errno_location@plt>
   11bf4:	movw	r1, #33117	; 0x815d
   11bf8:	ldr	r4, [r0]
   11bfc:	mov	r0, #0
   11c00:	mov	r2, #5
   11c04:	movt	r1, #1
   11c08:	bl	10ecc <dcgettext@plt>
   11c0c:	ldr	r2, [sp, #104]	; 0x68
   11c10:	mov	r8, r0
   11c14:	mov	r0, #0
   11c18:	mov	r1, #3
   11c1c:	bl	15508 <__assert_fail@plt+0x4450>
   11c20:	sub	lr, fp, #8192	; 0x2000
   11c24:	mov	r7, r0
   11c28:	mov	r0, r5
   11c2c:	mov	r1, r6
   11c30:	sub	r2, lr, #53	; 0x35
   11c34:	bl	136d4 <__assert_fail@plt+0x261c>
   11c38:	mov	r3, r7
   11c3c:	ldr	r7, [sp, #124]	; 0x7c
   11c40:	str	r0, [sp]
   11c44:	mov	r2, r8
   11c48:	movw	r8, #37205	; 0x9155
   11c4c:	mov	r0, #0
   11c50:	mov	r1, r4
   11c54:	movt	r8, #2
   11c58:	bl	10f50 <error@plt>
   11c5c:	mov	r0, r9
   11c60:	mov	r1, sl
   11c64:	bl	1340c <__assert_fail@plt+0x2354>
   11c68:	ldr	sl, [sp, #104]	; 0x68
   11c6c:	ldr	r0, [sp, #112]	; 0x70
   11c70:	cmp	r0, #0
   11c74:	bne	12db0 <__assert_fail@plt+0x1cf8>
   11c78:	b	1193c <__assert_fail@plt+0x884>
   11c7c:	ldr	r6, [sp, #76]	; 0x4c
   11c80:	orrs	r0, r6, r7
   11c84:	mov	r0, #1
   11c88:	str	r0, [sp, #108]	; 0x6c
   11c8c:	beq	11ce4 <__assert_fail@plt+0xc2c>
   11c90:	mov	r4, #8192	; 0x2000
   11c94:	subs	r0, r6, r4
   11c98:	mov	r1, r9
   11c9c:	sbcs	r0, r7, #0
   11ca0:	ldr	r0, [sp, #124]	; 0x7c
   11ca4:	movcc	r4, r6
   11ca8:	mov	r2, r4
   11cac:	bl	157cc <__assert_fail@plt+0x4714>
   11cb0:	cmp	r0, #0
   11cb4:	beq	11ce0 <__assert_fail@plt+0xc28>
   11cb8:	mov	r5, r0
   11cbc:	cmn	r0, #1
   11cc0:	beq	11d68 <__assert_fail@plt+0xcb0>
   11cc4:	mov	r0, r9
   11cc8:	mov	r1, r5
   11ccc:	bl	1340c <__assert_fail@plt+0x2354>
   11cd0:	subs	r6, r6, r5
   11cd4:	sbc	r7, r7, #0
   11cd8:	orrs	r0, r6, r7
   11cdc:	bne	11c94 <__assert_fail@plt+0xbdc>
   11ce0:	ldr	sl, [sp, #104]	; 0x68
   11ce4:	ldr	r0, [sp, #112]	; 0x70
   11ce8:	ldr	r7, [sp, #124]	; 0x7c
   11cec:	cmp	r0, #0
   11cf0:	bne	12db0 <__assert_fail@plt+0x1cf8>
   11cf4:	b	1193c <__assert_fail@plt+0x884>
   11cf8:	ldrb	r1, [r8, #3]
   11cfc:	mov	r0, #1
   11d00:	cmp	r1, #0
   11d04:	mvn	r1, #0
   11d08:	str	r1, [sp, #48]	; 0x30
   11d0c:	mvn	r1, #0
   11d10:	bne	11dd8 <__assert_fail@plt+0xd20>
   11d14:	ldr	r0, [sp, #144]	; 0x90
   11d18:	and	r0, r0, #53248	; 0xd000
   11d1c:	orr	r0, r0, #8192	; 0x2000
   11d20:	cmp	r0, #40960	; 0xa000
   11d24:	bne	11dc8 <__assert_fail@plt+0xd10>
   11d28:	mov	r0, #1
   11d2c:	mov	r2, #0
   11d30:	mov	r3, #0
   11d34:	str	r0, [sp]
   11d38:	mov	r0, r7
   11d3c:	bl	10f20 <lseek64@plt>
   11d40:	cmn	r1, #1
   11d44:	str	r0, [sp, #48]	; 0x30
   11d48:	ble	1275c <__assert_fail@plt+0x16a4>
   11d4c:	ldrb	r0, [r8, #3]
   11d50:	b	11dd8 <__assert_fail@plt+0xd20>
   11d54:	ldr	r7, [sp, #124]	; 0x7c
   11d58:	ldr	r0, [sp, #112]	; 0x70
   11d5c:	cmp	r0, #0
   11d60:	bne	12db0 <__assert_fail@plt+0x1cf8>
   11d64:	b	1193c <__assert_fail@plt+0x884>
   11d68:	bl	10fec <__errno_location@plt>
   11d6c:	movw	r1, #33155	; 0x8183
   11d70:	ldr	r4, [r0]
   11d74:	mov	r0, #0
   11d78:	mov	r2, #5
   11d7c:	movt	r1, #1
   11d80:	str	r0, [sp, #108]	; 0x6c
   11d84:	mov	r0, #0
   11d88:	bl	10ecc <dcgettext@plt>
   11d8c:	ldr	sl, [sp, #104]	; 0x68
   11d90:	mov	r5, r0
   11d94:	mov	r0, #4
   11d98:	mov	r1, sl
   11d9c:	bl	1528c <__assert_fail@plt+0x41d4>
   11da0:	mov	r3, r0
   11da4:	mov	r0, #0
   11da8:	mov	r1, r4
   11dac:	mov	r2, r5
   11db0:	bl	10f50 <error@plt>
   11db4:	ldr	r0, [sp, #112]	; 0x70
   11db8:	ldr	r7, [sp, #124]	; 0x7c
   11dbc:	cmp	r0, #0
   11dc0:	bne	12db0 <__assert_fail@plt+0x1cf8>
   11dc4:	b	1193c <__assert_fail@plt+0x884>
   11dc8:	mvn	r1, #0
   11dcc:	mov	r0, #0
   11dd0:	str	r1, [sp, #48]	; 0x30
   11dd4:	mvn	r1, #0
   11dd8:	cmp	r1, #0
   11ddc:	str	r1, [sp, #40]	; 0x28
   11de0:	mov	r1, #0
   11de4:	ldr	r7, [sp, #64]	; 0x40
   11de8:	ldr	r2, [sp, #184]	; 0xb8
   11dec:	movwmi	r1, #1
   11df0:	orr	r3, r0, r1
   11df4:	ldr	r0, [sp, #28]
   11df8:	tst	r7, #1
   11dfc:	ldrd	r0, [r0]
   11e00:	beq	1200c <__assert_fail@plt+0xf54>
   11e04:	cmp	r3, #0
   11e08:	bne	12100 <__assert_fail@plt+0x1048>
   11e0c:	cmp	r2, #536870913	; 0x20000001
   11e10:	mov	r3, #0
   11e14:	mov	r7, #0
   11e18:	movwcc	r3, #1
   11e1c:	cmp	r2, #0
   11e20:	movwgt	r7, #1
   11e24:	ands	r3, r7, r3
   11e28:	mov	r7, #512	; 0x200
   11e2c:	asrne	r3, r2, #31
   11e30:	moveq	r2, r7
   11e34:	subs	r2, r2, r0
   11e38:	sbcs	r2, r3, r1
   11e3c:	bge	12100 <__assert_fail@plt+0x1048>
   11e40:	ldr	r5, [sp, #48]	; 0x30
   11e44:	ldr	r3, [sp, #40]	; 0x28
   11e48:	ldr	r7, [sp, #124]	; 0x7c
   11e4c:	mov	r2, #1
   11e50:	str	r2, [sp, #108]	; 0x6c
   11e54:	subs	r2, r5, r0
   11e58:	sbcs	r2, r3, r1
   11e5c:	bge	11d58 <__assert_fail@plt+0xca0>
   11e60:	mov	r2, #0
   11e64:	str	r2, [sp]
   11e68:	subs	r2, r0, r5
   11e6c:	sbc	r3, r1, r3
   11e70:	asr	r3, r3, #31
   11e74:	add	r3, r2, r3, lsr #19
   11e78:	bfc	r3, #0, #13
   11e7c:	subs	r6, r2, r3
   11e80:	movweq	r6, #8192	; 0x2000
   11e84:	subs	r8, r0, r6
   11e88:	mov	r0, r7
   11e8c:	sbc	sl, r1, #0
   11e90:	mov	r2, r8
   11e94:	mov	r3, sl
   11e98:	bl	10f20 <lseek64@plt>
   11e9c:	cmn	r1, #1
   11ea0:	ble	12c28 <__assert_fail@plt+0x1b70>
   11ea4:	sub	lr, fp, #8192	; 0x2000
   11ea8:	mov	r0, r7
   11eac:	mov	r2, r6
   11eb0:	sub	r1, lr, #32
   11eb4:	bl	157cc <__assert_fail@plt+0x4714>
   11eb8:	cmn	r0, #1
   11ebc:	beq	12e0c <__assert_fail@plt+0x1d54>
   11ec0:	ldr	r3, [sp, #76]	; 0x4c
   11ec4:	ldr	r6, [sp, #92]	; 0x5c
   11ec8:	mov	r7, r0
   11ecc:	orrs	r0, r3, r6
   11ed0:	mov	r4, r3
   11ed4:	mov	r5, r6
   11ed8:	beq	11f24 <__assert_fail@plt+0xe6c>
   11edc:	cmp	r7, #0
   11ee0:	mov	r4, r3
   11ee4:	mov	r5, r6
   11ee8:	beq	11f24 <__assert_fail@plt+0xe6c>
   11eec:	movw	r2, #37205	; 0x9155
   11ef0:	sub	lr, fp, #8192	; 0x2000
   11ef4:	subs	r4, r3, #1
   11ef8:	movt	r2, #2
   11efc:	sub	r1, lr, #32
   11f00:	sbc	r5, r6, #0
   11f04:	add	r1, r7, r1
   11f08:	ldrb	r2, [r2, #2]
   11f0c:	ldrb	r1, [r1, #-1]
   11f10:	cmp	r2, #0
   11f14:	movwne	r2, #10
   11f18:	cmp	r2, r1
   11f1c:	moveq	r5, r6
   11f20:	moveq	r4, r3
   11f24:	cmp	r0, #0
   11f28:	str	sl, [sp, #100]	; 0x64
   11f2c:	beq	12e84 <__assert_fail@plt+0x1dcc>
   11f30:	movw	r0, #37205	; 0x9155
   11f34:	movt	r0, #2
   11f38:	ldrb	r6, [r0, #2]
   11f3c:	cmp	r6, #0
   11f40:	movwne	r6, #10
   11f44:	sub	lr, fp, #8192	; 0x2000
   11f48:	cmp	r7, #0
   11f4c:	sub	sl, lr, #32
   11f50:	beq	11f8c <__assert_fail@plt+0xed4>
   11f54:	mov	r0, sl
   11f58:	mov	r1, r6
   11f5c:	mov	r2, r7
   11f60:	bl	10fe0 <memrchr@plt>
   11f64:	cmp	r0, #0
   11f68:	beq	11f8c <__assert_fail@plt+0xed4>
   11f6c:	sub	r7, r0, sl
   11f70:	subs	r0, r4, #1
   11f74:	sbc	r1, r5, #0
   11f78:	orrs	r2, r4, r5
   11f7c:	mov	r4, r0
   11f80:	mov	r5, r1
   11f84:	bne	11f44 <__assert_fail@plt+0xe8c>
   11f88:	b	12e7c <__assert_fail@plt+0x1dc4>
   11f8c:	ldr	r0, [sp, #48]	; 0x30
   11f90:	ldr	r1, [sp, #40]	; 0x28
   11f94:	ldr	r3, [sp, #100]	; 0x64
   11f98:	eor	r0, r8, r0
   11f9c:	eor	r1, r3, r1
   11fa0:	orrs	r0, r0, r1
   11fa4:	mov	r0, #1
   11fa8:	str	r0, [sp, #108]	; 0x6c
   11fac:	beq	131c8 <__assert_fail@plt+0x2110>
   11fb0:	ldr	r7, [sp, #124]	; 0x7c
   11fb4:	subs	r8, r8, #8192	; 0x2000
   11fb8:	mov	r0, #0
   11fbc:	str	r0, [sp]
   11fc0:	sbc	r3, r3, #0
   11fc4:	mov	r2, r8
   11fc8:	str	r3, [sp, #100]	; 0x64
   11fcc:	mov	r0, r7
   11fd0:	bl	10f20 <lseek64@plt>
   11fd4:	ldr	sl, [sp, #104]	; 0x68
   11fd8:	cmp	r1, #0
   11fdc:	bmi	13140 <__assert_fail@plt+0x2088>
   11fe0:	sub	lr, fp, #8192	; 0x2000
   11fe4:	mov	r0, r7
   11fe8:	mov	r2, #8192	; 0x2000
   11fec:	sub	r1, lr, #32
   11ff0:	bl	157cc <__assert_fail@plt+0x4714>
   11ff4:	cmn	r0, #1
   11ff8:	beq	12f28 <__assert_fail@plt+0x1e70>
   11ffc:	mov	r7, r0
   12000:	cmp	r0, #0
   12004:	bne	11f30 <__assert_fail@plt+0xe78>
   12008:	b	131ac <__assert_fail@plt+0x20f4>
   1200c:	cmp	r3, #0
   12010:	bne	122d4 <__assert_fail@plt+0x121c>
   12014:	cmp	r2, #536870913	; 0x20000001
   12018:	mov	r3, #0
   1201c:	mov	r7, #0
   12020:	movwcc	r3, #1
   12024:	cmp	r2, #0
   12028:	movwgt	r7, #1
   1202c:	ands	r3, r7, r3
   12030:	mov	r7, #512	; 0x200
   12034:	asrne	r3, r2, #31
   12038:	moveq	r2, r7
   1203c:	subs	r2, r2, r0
   12040:	sbcs	r2, r3, r1
   12044:	bge	122d4 <__assert_fail@plt+0x121c>
   12048:	ldr	r2, [sp, #48]	; 0x30
   1204c:	ldr	r6, [sp, #76]	; 0x4c
   12050:	ldr	r3, [sp, #92]	; 0x5c
   12054:	ldr	r7, [sp, #124]	; 0x7c
   12058:	subs	r2, r0, r2
   1205c:	ldr	r0, [sp, #40]	; 0x28
   12060:	sbc	r0, r1, r0
   12064:	rsbs	r1, r2, #0
   12068:	rscs	r1, r0, #0
   1206c:	mov	r1, #0
   12070:	movwlt	r1, #1
   12074:	cmp	r1, #0
   12078:	moveq	r0, r1
   1207c:	movne	r1, r2
   12080:	mov	r2, #1
   12084:	str	r2, [sp, #108]	; 0x6c
   12088:	subs	r2, r6, r1
   1208c:	sbcs	r2, r3, r0
   12090:	bcs	11d58 <__assert_fail@plt+0xca0>
   12094:	subs	r4, r1, r6
   12098:	sbc	r5, r0, r3
   1209c:	orrs	r0, r4, r5
   120a0:	bne	120b8 <__assert_fail@plt+0x1000>
   120a4:	b	11d58 <__assert_fail@plt+0xca0>
   120a8:	mov	r0, r9
   120ac:	bl	1340c <__assert_fail@plt+0x2354>
   120b0:	orrs	r0, r4, r5
   120b4:	beq	11d58 <__assert_fail@plt+0xca0>
   120b8:	subs	r0, r4, #8192	; 0x2000
   120bc:	mov	r2, #8192	; 0x2000
   120c0:	mov	r1, r9
   120c4:	sbcs	r0, r5, #0
   120c8:	mov	r0, r7
   120cc:	movcc	r2, r4
   120d0:	bl	157cc <__assert_fail@plt+0x4714>
   120d4:	cmn	r0, #1
   120d8:	beq	12e58 <__assert_fail@plt+0x1da0>
   120dc:	subs	r4, r4, r0
   120e0:	mov	r1, r0
   120e4:	sbc	r5, r5, #0
   120e8:	cmp	r0, #0
   120ec:	bne	120a8 <__assert_fail@plt+0xff0>
   120f0:	orrs	r0, r4, r5
   120f4:	beq	120a8 <__assert_fail@plt+0xff0>
   120f8:	mov	r0, #2
   120fc:	b	12e5c <__assert_fail@plt+0x1da4>
   12100:	movw	r0, #8208	; 0x2010
   12104:	bl	15ef0 <__assert_fail@plt+0x4e38>
   12108:	mov	r2, #0
   1210c:	movw	r1, #8196	; 0x2004
   12110:	mov	r4, r0
   12114:	str	r2, [r0, r1]!
   12118:	mov	r1, #0
   1211c:	str	r2, [r0, #4]
   12120:	str	r2, [r0, #8]
   12124:	movw	r0, #8208	; 0x2010
   12128:	str	r1, [sp, #108]	; 0x6c
   1212c:	bl	15ef0 <__assert_fail@plt+0x4e38>
   12130:	ldr	r7, [sp, #124]	; 0x7c
   12134:	mov	r8, r0
   12138:	mov	r2, #8192	; 0x2000
   1213c:	mov	r1, r8
   12140:	mov	r0, r7
   12144:	bl	157cc <__assert_fail@plt+0x4714>
   12148:	mov	r9, r0
   1214c:	add	r0, r0, #1
   12150:	str	r4, [sp, #88]	; 0x58
   12154:	cmp	r0, #2
   12158:	bcs	1242c <__assert_fail@plt+0x1374>
   1215c:	ldr	r0, [sp, #48]	; 0x30
   12160:	str	r4, [sp, #100]	; 0x64
   12164:	str	r0, [sp, #44]	; 0x2c
   12168:	ldr	r0, [sp, #40]	; 0x28
   1216c:	str	r0, [sp, #80]	; 0x50
   12170:	mov	r0, r8
   12174:	bl	13634 <__assert_fail@plt+0x257c>
   12178:	cmn	r9, #1
   1217c:	bne	128ac <__assert_fail@plt+0x17f4>
   12180:	bl	10fec <__errno_location@plt>
   12184:	movw	r1, #33155	; 0x8183
   12188:	ldr	r4, [r0]
   1218c:	mov	r0, #0
   12190:	mov	r2, #5
   12194:	movt	r1, #1
   12198:	str	r0, [sp, #108]	; 0x6c
   1219c:	mov	r0, #0
   121a0:	bl	10ecc <dcgettext@plt>
   121a4:	mov	r5, r0
   121a8:	mov	r0, #4
   121ac:	mov	r1, sl
   121b0:	bl	1528c <__assert_fail@plt+0x41d4>
   121b4:	mov	r3, r0
   121b8:	mov	r0, #0
   121bc:	mov	r1, r4
   121c0:	mov	r2, r5
   121c4:	bl	10f50 <error@plt>
   121c8:	ldr	r5, [sp, #44]	; 0x2c
   121cc:	movw	r8, #8204	; 0x200c
   121d0:	add	r9, sp, #235	; 0xeb
   121d4:	ldr	r0, [sp, #88]	; 0x58
   121d8:	cmp	r0, #0
   121dc:	beq	121f4 <__assert_fail@plt+0x113c>
   121e0:	ldr	r4, [r0, r8]
   121e4:	bl	13634 <__assert_fail@plt+0x257c>
   121e8:	cmp	r4, #0
   121ec:	mov	r0, r4
   121f0:	bne	121e0 <__assert_fail@plt+0x1128>
   121f4:	ldr	r0, [sp, #48]	; 0x30
   121f8:	mvn	r1, #0
   121fc:	movw	r8, #37205	; 0x9155
   12200:	movt	r8, #2
   12204:	subs	r0, r1, r0
   12208:	ldr	r0, [sp, #40]	; 0x28
   1220c:	sbcs	r0, r1, r0
   12210:	bge	11d58 <__assert_fail@plt+0xca0>
   12214:	ldr	r4, [sp, #80]	; 0x50
   12218:	mov	r0, #0
   1221c:	mov	r2, r5
   12220:	str	r0, [sp]
   12224:	mov	r0, r7
   12228:	mov	r3, r4
   1222c:	bl	10f20 <lseek64@plt>
   12230:	mov	r0, r5
   12234:	mov	r5, r1
   12238:	cmn	r1, #1
   1223c:	bgt	122ac <__assert_fail@plt+0x11f4>
   12240:	mov	sl, r0
   12244:	bl	10fec <__errno_location@plt>
   12248:	ldr	r0, [r0]
   1224c:	movw	r1, #33088	; 0x8140
   12250:	mov	r2, #5
   12254:	movt	r1, #1
   12258:	str	r0, [sp, #124]	; 0x7c
   1225c:	mov	r0, #0
   12260:	bl	10ecc <dcgettext@plt>
   12264:	ldr	r2, [sp, #104]	; 0x68
   12268:	mov	r6, r0
   1226c:	mov	r0, #0
   12270:	mov	r1, #3
   12274:	bl	15508 <__assert_fail@plt+0x4450>
   12278:	sub	lr, fp, #8192	; 0x2000
   1227c:	str	r0, [sp, #100]	; 0x64
   12280:	mov	r0, sl
   12284:	mov	r1, r4
   12288:	sub	r2, lr, #53	; 0x35
   1228c:	bl	136d4 <__assert_fail@plt+0x261c>
   12290:	ldr	r1, [sp, #124]	; 0x7c
   12294:	ldr	r3, [sp, #100]	; 0x64
   12298:	ldr	sl, [sp, #104]	; 0x68
   1229c:	str	r0, [sp]
   122a0:	mov	r0, #0
   122a4:	mov	r2, r6
   122a8:	bl	10f50 <error@plt>
   122ac:	ldr	r1, [sp, #108]	; 0x6c
   122b0:	cmn	r5, #1
   122b4:	mov	r0, #0
   122b8:	movwgt	r0, #1
   122bc:	and	r1, r1, r0
   122c0:	ldr	r0, [sp, #112]	; 0x70
   122c4:	str	r1, [sp, #108]	; 0x6c
   122c8:	cmp	r0, #0
   122cc:	bne	12db0 <__assert_fail@plt+0x1cf8>
   122d0:	b	1193c <__assert_fail@plt+0x884>
   122d4:	ldr	r0, [sp, #24]
   122d8:	ldr	r6, [sp, #124]	; 0x7c
   122dc:	cmp	r0, #0
   122e0:	bne	13364 <__assert_fail@plt+0x22ac>
   122e4:	ldr	sl, [sp, #76]	; 0x4c
   122e8:	cmp	sl, #1048576	; 0x100000
   122ec:	bhi	125f0 <__assert_fail@plt+0x1538>
   122f0:	ldr	r4, [sp, #60]	; 0x3c
   122f4:	mov	r0, #2
   122f8:	mov	r1, r4
   122fc:	bl	15fc0 <__assert_fail@plt+0x4f08>
   12300:	sub	lr, fp, #8192	; 0x2000
   12304:	mov	r8, r0
   12308:	add	r0, r0, r4
   1230c:	mov	r9, #0
   12310:	mov	r5, #1
   12314:	sub	r1, lr, #32
   12318:	str	r8, [sp, #88]	; 0x58
   1231c:	str	r8, [r1]
   12320:	str	r0, [r1, #4]
   12324:	ldr	r0, [sp, #48]	; 0x30
   12328:	str	r0, [sp, #96]	; 0x60
   1232c:	ldr	r0, [sp, #40]	; 0x28
   12330:	str	r0, [sp, #100]	; 0x64
   12334:	ldr	r4, [sp, #60]	; 0x3c
   12338:	mov	r0, r6
   1233c:	mov	r1, r8
   12340:	mov	r2, r4
   12344:	bl	1365c <__assert_fail@plt+0x25a4>
   12348:	mov	r6, r0
   1234c:	cmp	r0, r4
   12350:	mov	r0, #0
   12354:	mov	r7, #0
   12358:	bcs	12388 <__assert_fail@plt+0x12d0>
   1235c:	bl	10fec <__errno_location@plt>
   12360:	ldr	r4, [r0]
   12364:	cmp	r4, #0
   12368:	bne	12a5c <__assert_fail@plt+0x19a4>
   1236c:	mov	r7, #1
   12370:	mov	r0, #0
   12374:	cmp	r6, sl
   12378:	bhi	12388 <__assert_fail@plt+0x12d0>
   1237c:	tst	r5, #1
   12380:	sub	r0, sl, r6
   12384:	movwne	r0, #0
   12388:	tst	r5, #1
   1238c:	beq	123a0 <__assert_fail@plt+0x12e8>
   12390:	ldr	r5, [sp, #96]	; 0x60
   12394:	cmp	r6, sl
   12398:	bhi	123e0 <__assert_fail@plt+0x1328>
   1239c:	b	12400 <__assert_fail@plt+0x1348>
   123a0:	sub	r4, sl, r0
   123a4:	mov	r0, #1
   123a8:	sub	lr, fp, #8192	; 0x2000
   123ac:	bic	r0, r0, r9
   123b0:	sub	r1, lr, #32
   123b4:	ldr	r0, [r1, r0, lsl #2]
   123b8:	mov	r1, r4
   123bc:	add	r0, r0, #8192	; 0x2000
   123c0:	bl	1340c <__assert_fail@plt+0x2354>
   123c4:	ldr	r5, [sp, #96]	; 0x60
   123c8:	ldr	r0, [sp, #100]	; 0x64
   123cc:	adds	r5, r5, r4
   123d0:	adc	r0, r0, #0
   123d4:	str	r0, [sp, #100]	; 0x64
   123d8:	cmp	r6, sl
   123dc:	bls	12400 <__assert_fail@plt+0x1348>
   123e0:	sub	r4, r6, sl
   123e4:	mov	r0, r8
   123e8:	mov	r1, r4
   123ec:	bl	1340c <__assert_fail@plt+0x2354>
   123f0:	ldr	r0, [sp, #100]	; 0x64
   123f4:	adds	r5, r5, r4
   123f8:	adc	r0, r0, #0
   123fc:	str	r0, [sp, #100]	; 0x64
   12400:	sub	lr, fp, #8192	; 0x2000
   12404:	cmp	r7, #0
   12408:	sub	r1, lr, #32
   1240c:	bne	127c8 <__assert_fail@plt+0x1710>
   12410:	eor	r9, r9, #1
   12414:	ldr	r6, [sp, #124]	; 0x7c
   12418:	str	r5, [sp, #96]	; 0x60
   1241c:	mov	r5, #0
   12420:	and	r0, r9, #1
   12424:	ldr	r8, [r1, r0, lsl #2]
   12428:	b	12334 <__assert_fail@plt+0x127c>
   1242c:	ldr	r0, [sp, #76]	; 0x4c
   12430:	ldr	r1, [sp, #92]	; 0x5c
   12434:	orrs	r0, r0, r1
   12438:	beq	12848 <__assert_fail@plt+0x1790>
   1243c:	mov	r0, #0
   12440:	str	r0, [sp, #108]	; 0x6c
   12444:	ldr	r0, [sp, #48]	; 0x30
   12448:	str	r0, [sp, #44]	; 0x2c
   1244c:	ldr	r0, [sp, #40]	; 0x28
   12450:	str	r0, [sp, #80]	; 0x50
   12454:	ldr	r0, [sp, #88]	; 0x58
   12458:	str	r0, [sp, #100]	; 0x64
   1245c:	b	124b4 <__assert_fail@plt+0x13fc>
   12460:	ldr	r1, [sp, #96]	; 0x60
   12464:	add	r0, sl, r0
   12468:	str	r6, [sp, #108]	; 0x6c
   1246c:	bl	10e9c <memcpy@plt>
   12470:	ldr	r0, [r5]
   12474:	ldm	r9, {r1, r2}
   12478:	ldr	sl, [sp, #104]	; 0x68
   1247c:	ldr	r7, [sp, #124]	; 0x7c
   12480:	add	r0, r1, r0
   12484:	str	r0, [r9]
   12488:	ldr	r0, [r5, #4]
   1248c:	add	r0, r2, r0
   12490:	str	r0, [r9, #4]
   12494:	mov	r0, r7
   12498:	mov	r1, r8
   1249c:	mov	r2, #8192	; 0x2000
   124a0:	bl	157cc <__assert_fail@plt+0x4714>
   124a4:	mov	r9, r0
   124a8:	add	r0, r0, #1
   124ac:	cmp	r0, #1
   124b0:	bls	1289c <__assert_fail@plt+0x17e4>
   124b4:	mov	r5, r8
   124b8:	movw	sl, #8196	; 0x2004
   124bc:	mov	r0, #0
   124c0:	mov	r6, r8
   124c4:	str	r9, [r5, sl]!
   124c8:	str	r0, [r5, #4]
   124cc:	str	r0, [r5, #8]
   124d0:	movw	r0, #37205	; 0x9155
   124d4:	movt	r0, #2
   124d8:	mov	r1, r0
   124dc:	ldrb	r0, [r0, #2]
   124e0:	cmp	r0, #0
   124e4:	movwne	r0, #10
   124e8:	strb	r0, [r6, r9]!
   124ec:	mov	r0, r8
   124f0:	str	r8, [sp, #96]	; 0x60
   124f4:	ldrb	r4, [r1, #2]
   124f8:	cmp	r4, #0
   124fc:	movwne	r4, #10
   12500:	mov	r1, r4
   12504:	bl	10ef0 <rawmemchr@plt>
   12508:	ldr	r1, [sp, #100]	; 0x64
   1250c:	ldr	r7, [r5, #4]
   12510:	add	r9, r1, sl
   12514:	mov	sl, r1
   12518:	cmp	r0, r6
   1251c:	bcs	1253c <__assert_fail@plt+0x1484>
   12520:	add	r7, r7, #1
   12524:	add	r0, r0, #1
   12528:	mov	r1, r4
   1252c:	str	r7, [r5, #4]
   12530:	bl	10ef0 <rawmemchr@plt>
   12534:	cmp	r0, r6
   12538:	bcc	12520 <__assert_fail@plt+0x1468>
   1253c:	ldr	r2, [r5]
   12540:	ldr	r0, [r9]
   12544:	ldr	r6, [sp, #108]	; 0x6c
   12548:	mov	r3, #0
   1254c:	add	r1, r0, r2
   12550:	add	r6, r7, r6
   12554:	cmp	r3, r1, lsr #13
   12558:	beq	12460 <__assert_fail@plt+0x13a8>
   1255c:	ldr	r2, [sp, #88]	; 0x58
   12560:	movw	r0, #8196	; 0x2004
   12564:	str	r8, [r9, #8]
   12568:	ldr	r1, [sp, #76]	; 0x4c
   1256c:	ldr	sl, [sp, #104]	; 0x68
   12570:	ldr	r7, [sp, #124]	; 0x7c
   12574:	add	r5, r2, r0
   12578:	ldr	r0, [r5, #4]
   1257c:	sub	r0, r6, r0
   12580:	subs	r0, r1, r0
   12584:	ldr	r0, [sp, #92]	; 0x5c
   12588:	sbcs	r0, r0, #0
   1258c:	bcs	125d8 <__assert_fail@plt+0x1520>
   12590:	ldr	r4, [r5]
   12594:	mov	r0, r2
   12598:	mov	r9, r2
   1259c:	mov	r1, r4
   125a0:	bl	1340c <__assert_fail@plt+0x2354>
   125a4:	ldr	r0, [sp, #44]	; 0x2c
   125a8:	adds	r0, r0, r4
   125ac:	str	r0, [sp, #44]	; 0x2c
   125b0:	ldr	r0, [sp, #80]	; 0x50
   125b4:	adc	r0, r0, #0
   125b8:	str	r0, [sp, #80]	; 0x50
   125bc:	ldmib	r5, {r0, r1}
   125c0:	str	r8, [sp, #100]	; 0x64
   125c4:	mov	r8, r9
   125c8:	str	r1, [sp, #88]	; 0x58
   125cc:	sub	r6, r6, r0
   125d0:	str	r6, [sp, #108]	; 0x6c
   125d4:	b	12494 <__assert_fail@plt+0x13dc>
   125d8:	movw	r0, #8208	; 0x2010
   125dc:	str	r6, [sp, #108]	; 0x6c
   125e0:	bl	15ef0 <__assert_fail@plt+0x4e38>
   125e4:	str	r8, [sp, #100]	; 0x64
   125e8:	mov	r8, r0
   125ec:	b	12494 <__assert_fail@plt+0x13dc>
   125f0:	ldr	r0, [sp, #48]	; 0x30
   125f4:	mov	r5, #0
   125f8:	mov	r7, #1
   125fc:	mov	r9, #0
   12600:	mov	r8, #0
   12604:	str	r0, [sp, #96]	; 0x60
   12608:	ldr	r0, [sp, #40]	; 0x28
   1260c:	str	r0, [sp, #100]	; 0x64
   12610:	mov	r0, #0
   12614:	str	r0, [sp, #44]	; 0x2c
   12618:	mov	r0, #0
   1261c:	str	r0, [sp, #88]	; 0x58
   12620:	cmp	r5, r9
   12624:	str	r7, [sp, #80]	; 0x50
   12628:	beq	1268c <__assert_fail@plt+0x15d4>
   1262c:	b	126f0 <__assert_fail@plt+0x1638>
   12630:	ldr	r0, [sp, #88]	; 0x58
   12634:	ldr	r4, [sp, #80]	; 0x50
   12638:	mov	r1, r6
   1263c:	ldr	r0, [r0, r4, lsl #2]
   12640:	bl	1340c <__assert_fail@plt+0x2354>
   12644:	ldr	r0, [sp, #96]	; 0x60
   12648:	mov	r3, r4
   1264c:	adds	r0, r0, r6
   12650:	str	r0, [sp, #96]	; 0x60
   12654:	ldr	r0, [sp, #100]	; 0x64
   12658:	adc	r0, r0, #0
   1265c:	str	r0, [sp, #100]	; 0x64
   12660:	ldr	r2, [sp, #68]	; 0x44
   12664:	add	r0, r3, #1
   12668:	cmp	sl, #0
   1266c:	mov	r9, r3
   12670:	udiv	r1, r0, r2
   12674:	mls	r7, r1, r2, r0
   12678:	ldr	r1, [sp, #52]	; 0x34
   1267c:	bne	127d8 <__assert_fail@plt+0x1720>
   12680:	cmp	r5, r9
   12684:	str	r7, [sp, #80]	; 0x50
   12688:	bne	126f0 <__assert_fail@plt+0x1638>
   1268c:	ldr	r4, [sp, #36]	; 0x24
   12690:	ldr	r7, [sp, #124]	; 0x7c
   12694:	ldr	r1, [sp, #88]	; 0x58
   12698:	cmp	r5, #0
   1269c:	beq	126b0 <__assert_fail@plt+0x15f8>
   126a0:	ldr	r0, [sp, #32]
   126a4:	ldr	r4, [sp, #68]	; 0x44
   126a8:	cmp	r5, r0
   126ac:	lslls	r4, r5, #1
   126b0:	mov	r0, r1
   126b4:	mov	r1, r4
   126b8:	mov	r2, #4
   126bc:	bl	15eb4 <__assert_fail@plt+0x4dfc>
   126c0:	mov	r6, r0
   126c4:	mov	r5, r4
   126c8:	tst	r8, #1
   126cc:	str	r6, [sp, #88]	; 0x58
   126d0:	bne	12704 <__assert_fail@plt+0x164c>
   126d4:	mov	r0, #8192	; 0x2000
   126d8:	bl	15ef0 <__assert_fail@plt+0x4e38>
   126dc:	mov	r1, r0
   126e0:	str	r0, [r6, r9, lsl #2]
   126e4:	add	r0, r9, #1
   126e8:	str	r0, [sp, #44]	; 0x2c
   126ec:	b	12708 <__assert_fail@plt+0x1650>
   126f0:	ldr	r7, [sp, #124]	; 0x7c
   126f4:	ldr	r6, [sp, #88]	; 0x58
   126f8:	tst	r8, #1
   126fc:	str	r6, [sp, #88]	; 0x58
   12700:	beq	126d4 <__assert_fail@plt+0x161c>
   12704:	ldr	r1, [r6, r9, lsl #2]
   12708:	mov	r0, r7
   1270c:	mov	r2, #8192	; 0x2000
   12710:	bl	1365c <__assert_fail@plt+0x25a4>
   12714:	mov	sl, #0
   12718:	mov	r6, r0
   1271c:	cmp	sl, r0, lsr #13
   12720:	bne	12738 <__assert_fail@plt+0x1680>
   12724:	bl	10fec <__errno_location@plt>
   12728:	ldr	r4, [r0]
   1272c:	mov	sl, #1
   12730:	cmp	r4, #0
   12734:	bne	12abc <__assert_fail@plt+0x1a04>
   12738:	ldr	r0, [sp, #56]	; 0x38
   1273c:	sub	r0, r9, r0
   12740:	clz	r0, r0
   12744:	lsr	r0, r0, #5
   12748:	orr	r8, r8, r0
   1274c:	tst	r8, #1
   12750:	bne	12630 <__assert_fail@plt+0x1578>
   12754:	ldr	r3, [sp, #80]	; 0x50
   12758:	b	12660 <__assert_fail@plt+0x15a8>
   1275c:	bl	10fec <__errno_location@plt>
   12760:	movw	r1, #33117	; 0x815d
   12764:	ldr	r4, [r0]
   12768:	mov	r0, #0
   1276c:	mov	r2, #5
   12770:	movt	r1, #1
   12774:	str	r0, [sp, #108]	; 0x6c
   12778:	mov	r0, #0
   1277c:	bl	10ecc <dcgettext@plt>
   12780:	mov	r5, r0
   12784:	mov	r0, #0
   12788:	mov	r1, #3
   1278c:	mov	r2, sl
   12790:	bl	15508 <__assert_fail@plt+0x4450>
   12794:	sub	lr, fp, #8192	; 0x2000
   12798:	mov	r6, r0
   1279c:	mov	r0, #0
   127a0:	mov	r1, #0
   127a4:	sub	r2, lr, #53	; 0x35
   127a8:	bl	136d4 <__assert_fail@plt+0x261c>
   127ac:	ldr	sl, [sp, #104]	; 0x68
   127b0:	str	r0, [sp]
   127b4:	mov	r0, #0
   127b8:	mov	r1, r4
   127bc:	mov	r2, r5
   127c0:	mov	r3, r6
   127c4:	b	11a50 <__assert_fail@plt+0x998>
   127c8:	ldr	r7, [sp, #124]	; 0x7c
   127cc:	mov	r0, #1
   127d0:	str	r0, [sp, #108]	; 0x6c
   127d4:	b	12aa4 <__assert_fail@plt+0x19ec>
   127d8:	mov	r0, #1
   127dc:	cmp	r1, #0
   127e0:	str	r0, [sp, #108]	; 0x6c
   127e4:	beq	12b00 <__assert_fail@plt+0x1a48>
   127e8:	ldr	r5, [sp, #44]	; 0x2c
   127ec:	tst	r8, #1
   127f0:	beq	12b88 <__assert_fail@plt+0x1ad0>
   127f4:	ldr	r0, [sp, #96]	; 0x60
   127f8:	ldr	r4, [sp, #88]	; 0x58
   127fc:	movw	r8, #37205	; 0x9155
   12800:	add	r9, sp, #235	; 0xeb
   12804:	movt	r8, #2
   12808:	adds	r0, r0, r1
   1280c:	str	r0, [sp, #96]	; 0x60
   12810:	ldr	r0, [sp, #100]	; 0x64
   12814:	adc	r0, r0, #0
   12818:	str	r0, [sp, #100]	; 0x64
   1281c:	ldr	r0, [r4, r3, lsl #2]
   12820:	add	r0, r0, r6
   12824:	rsb	r6, r6, #8192	; 0x2000
   12828:	cmp	r1, r6
   1282c:	bcs	12c98 <__assert_fail@plt+0x1be0>
   12830:	bl	1340c <__assert_fail@plt+0x2354>
   12834:	ldr	r7, [sp, #124]	; 0x7c
   12838:	ldr	r6, [sp, #88]	; 0x58
   1283c:	cmp	r5, #0
   12840:	bne	12cc0 <__assert_fail@plt+0x1c08>
   12844:	b	12cd4 <__assert_fail@plt+0x1c1c>
   12848:	ldr	r5, [sp, #48]	; 0x30
   1284c:	ldr	r6, [sp, #40]	; 0x28
   12850:	mov	r4, r9
   12854:	mov	r0, r8
   12858:	mov	r1, r4
   1285c:	bl	1340c <__assert_fail@plt+0x2354>
   12860:	mov	r0, r7
   12864:	mov	r1, r8
   12868:	mov	r2, #8192	; 0x2000
   1286c:	bl	157cc <__assert_fail@plt+0x4714>
   12870:	mov	r9, r0
   12874:	adds	r5, r5, r4
   12878:	add	r0, r0, #1
   1287c:	adc	r6, r6, #0
   12880:	cmp	r0, #2
   12884:	mov	r4, r9
   12888:	bcs	12854 <__assert_fail@plt+0x179c>
   1288c:	ldr	r0, [sp, #88]	; 0x58
   12890:	str	r6, [sp, #80]	; 0x50
   12894:	str	r5, [sp, #44]	; 0x2c
   12898:	str	r0, [sp, #100]	; 0x64
   1289c:	mov	r0, r8
   128a0:	bl	13634 <__assert_fail@plt+0x257c>
   128a4:	cmn	r9, #1
   128a8:	beq	12180 <__assert_fail@plt+0x10c8>
   128ac:	ldr	r3, [sp, #100]	; 0x64
   128b0:	movw	r0, #8196	; 0x2004
   128b4:	ldr	ip, [sp, #92]	; 0x5c
   128b8:	movw	r2, #37205	; 0x9155
   128bc:	movt	r2, #2
   128c0:	add	r0, r3, r0
   128c4:	ldr	r1, [r0]
   128c8:	cmp	r1, #0
   128cc:	beq	12908 <__assert_fail@plt+0x1850>
   128d0:	ldrb	r2, [r2, #2]
   128d4:	add	r1, r1, r3
   128d8:	ldr	r5, [sp, #88]	; 0x58
   128dc:	ldr	r3, [sp, #108]	; 0x6c
   128e0:	ldrb	r1, [r1, #-1]
   128e4:	cmp	r2, #0
   128e8:	movwne	r2, #10
   128ec:	cmp	r2, r1
   128f0:	beq	12910 <__assert_fail@plt+0x1858>
   128f4:	ldr	r1, [r0, #4]
   128f8:	add	r3, r3, #1
   128fc:	add	r1, r1, #1
   12900:	str	r1, [r0, #4]
   12904:	b	12910 <__assert_fail@plt+0x1858>
   12908:	ldr	r5, [sp, #88]	; 0x58
   1290c:	ldr	r3, [sp, #108]	; 0x6c
   12910:	movw	r0, #8200	; 0x2008
   12914:	mov	r7, r5
   12918:	ldr	r2, [sp, #76]	; 0x4c
   1291c:	ldr	r0, [r7, r0]!
   12920:	sub	r1, r3, r0
   12924:	subs	r1, r2, r1
   12928:	sbcs	r1, ip, #0
   1292c:	bcs	12998 <__assert_fail@plt+0x18e0>
   12930:	ldr	r8, [sp, #76]	; 0x4c
   12934:	ldr	r9, [sp, #44]	; 0x2c
   12938:	ldr	sl, [sp, #80]	; 0x50
   1293c:	mov	r6, r5
   12940:	movw	r0, #8196	; 0x2004
   12944:	ldr	r4, [r6, r0]!
   12948:	mov	r0, r5
   1294c:	mov	r5, r3
   12950:	mov	r1, r4
   12954:	bl	1340c <__assert_fail@plt+0x2354>
   12958:	mov	r3, r5
   1295c:	ldr	r5, [r6, #8]
   12960:	ldr	r1, [r7]
   12964:	movw	r0, #8200	; 0x2008
   12968:	ldr	ip, [sp, #92]	; 0x5c
   1296c:	adds	r9, r9, r4
   12970:	adc	sl, sl, #0
   12974:	mov	r6, r5
   12978:	sub	r3, r3, r1
   1297c:	ldr	r0, [r6, r0]!
   12980:	mov	r7, r6
   12984:	sub	r1, r3, r0
   12988:	subs	r1, r8, r1
   1298c:	sbcs	r1, ip, #0
   12990:	bcc	1293c <__assert_fail@plt+0x1884>
   12994:	b	129a8 <__assert_fail@plt+0x18f0>
   12998:	ldr	r8, [sp, #76]	; 0x4c
   1299c:	ldr	r9, [sp, #44]	; 0x2c
   129a0:	ldr	sl, [sp, #80]	; 0x50
   129a4:	mov	r6, r7
   129a8:	subs	r1, r8, r3
   129ac:	movw	r2, #8196	; 0x2004
   129b0:	str	sl, [sp, #80]	; 0x50
   129b4:	str	r9, [sp, #44]	; 0x2c
   129b8:	sbcs	r1, ip, #0
   129bc:	bcs	12a30 <__assert_fail@plt+0x1978>
   129c0:	mov	r1, #1
   129c4:	str	r1, [sp, #108]	; 0x6c
   129c8:	subs	r1, r3, r8
   129cc:	beq	12b24 <__assert_fail@plt+0x1a6c>
   129d0:	add	r4, r0, #1
   129d4:	movw	r0, #37205	; 0x9155
   129d8:	ldr	r1, [r5, r2]
   129dc:	sub	r7, r8, r3
   129e0:	movw	r8, #8204	; 0x200c
   129e4:	movt	r0, #2
   129e8:	ldrb	r9, [r0, #2]
   129ec:	mov	r0, r5
   129f0:	add	r1, r5, r1
   129f4:	str	r1, [sp, #100]	; 0x64
   129f8:	cmp	r9, #0
   129fc:	movwne	r9, #10
   12a00:	ldr	r1, [sp, #100]	; 0x64
   12a04:	sub	r2, r1, r0
   12a08:	mov	r1, r9
   12a0c:	bl	11034 <memchr@plt>
   12a10:	cmp	r0, #0
   12a14:	beq	12be4 <__assert_fail@plt+0x1b2c>
   12a18:	str	r4, [r6]
   12a1c:	adds	r7, r7, #1
   12a20:	add	r4, r4, #1
   12a24:	add	r0, r0, #1
   12a28:	bcc	12a00 <__assert_fail@plt+0x1948>
   12a2c:	b	12be8 <__assert_fail@plt+0x1b30>
   12a30:	ldr	sl, [sp, #104]	; 0x68
   12a34:	ldr	r7, [sp, #124]	; 0x7c
   12a38:	ldr	r5, [sp, #44]	; 0x2c
   12a3c:	mov	r0, #1
   12a40:	movw	r8, #8204	; 0x200c
   12a44:	add	r9, sp, #235	; 0xeb
   12a48:	str	r0, [sp, #108]	; 0x6c
   12a4c:	ldr	r0, [sp, #88]	; 0x58
   12a50:	cmp	r0, #0
   12a54:	bne	121e0 <__assert_fail@plt+0x1128>
   12a58:	b	121f4 <__assert_fail@plt+0x113c>
   12a5c:	movw	r1, #33155	; 0x8183
   12a60:	mov	r0, #0
   12a64:	mov	r2, #5
   12a68:	movt	r1, #1
   12a6c:	str	r0, [sp, #108]	; 0x6c
   12a70:	mov	r0, #0
   12a74:	bl	10ecc <dcgettext@plt>
   12a78:	ldr	r1, [sp, #104]	; 0x68
   12a7c:	mov	r6, r0
   12a80:	mov	r0, #4
   12a84:	bl	1528c <__assert_fail@plt+0x41d4>
   12a88:	mov	r3, r0
   12a8c:	mov	r0, #0
   12a90:	mov	r1, r4
   12a94:	mov	r2, r6
   12a98:	bl	10f50 <error@plt>
   12a9c:	ldr	r7, [sp, #124]	; 0x7c
   12aa0:	ldr	r5, [sp, #96]	; 0x60
   12aa4:	ldr	r0, [sp, #88]	; 0x58
   12aa8:	bl	13634 <__assert_fail@plt+0x257c>
   12aac:	movw	r8, #37205	; 0x9155
   12ab0:	add	r9, sp, #235	; 0xeb
   12ab4:	movt	r8, #2
   12ab8:	b	12ce0 <__assert_fail@plt+0x1c28>
   12abc:	movw	r1, #33155	; 0x8183
   12ac0:	mov	r0, #0
   12ac4:	mov	r2, #5
   12ac8:	movt	r1, #1
   12acc:	str	r0, [sp, #108]	; 0x6c
   12ad0:	mov	r0, #0
   12ad4:	bl	10ecc <dcgettext@plt>
   12ad8:	ldr	r1, [sp, #104]	; 0x68
   12adc:	mov	r6, r0
   12ae0:	mov	r0, #4
   12ae4:	bl	1528c <__assert_fail@plt+0x41d4>
   12ae8:	mov	r3, r0
   12aec:	mov	r0, #0
   12af0:	mov	r1, r4
   12af4:	mov	r2, r6
   12af8:	bl	10f50 <error@plt>
   12afc:	b	12b04 <__assert_fail@plt+0x1a4c>
   12b00:	ldr	r7, [sp, #124]	; 0x7c
   12b04:	ldr	r5, [sp, #44]	; 0x2c
   12b08:	movw	r8, #37205	; 0x9155
   12b0c:	add	r9, sp, #235	; 0xeb
   12b10:	movt	r8, #2
   12b14:	ldr	r6, [sp, #88]	; 0x58
   12b18:	cmp	r5, #0
   12b1c:	bne	12cc0 <__assert_fail@plt+0x1c08>
   12b20:	b	12cd4 <__assert_fail@plt+0x1c1c>
   12b24:	mov	r0, r5
   12b28:	movw	r8, #8204	; 0x200c
   12b2c:	b	12be8 <__assert_fail@plt+0x1b30>
   12b30:	bl	10fec <__errno_location@plt>
   12b34:	movw	r1, #33155	; 0x8183
   12b38:	ldr	r4, [r0]
   12b3c:	mov	r0, #0
   12b40:	mov	r2, #5
   12b44:	movt	r1, #1
   12b48:	str	r0, [sp, #108]	; 0x6c
   12b4c:	mov	r0, #0
   12b50:	bl	10ecc <dcgettext@plt>
   12b54:	mov	r5, r0
   12b58:	mov	r0, #4
   12b5c:	mov	r1, sl
   12b60:	bl	1528c <__assert_fail@plt+0x41d4>
   12b64:	mov	r3, r0
   12b68:	mov	r0, #0
   12b6c:	mov	r1, r4
   12b70:	mov	r2, r5
   12b74:	bl	10f50 <error@plt>
   12b78:	ldr	r0, [sp, #112]	; 0x70
   12b7c:	cmp	r0, #0
   12b80:	bne	12db0 <__assert_fail@plt+0x1cf8>
   12b84:	b	1193c <__assert_fail@plt+0x884>
   12b88:	ldr	r0, [sp, #56]	; 0x38
   12b8c:	movw	r8, #37205	; 0x9155
   12b90:	add	r9, sp, #235	; 0xeb
   12b94:	movt	r8, #2
   12b98:	cmp	r3, r0
   12b9c:	bne	12cb0 <__assert_fail@plt+0x1bf8>
   12ba0:	ldr	r0, [sp, #88]	; 0x58
   12ba4:	ldr	r1, [sp, #20]
   12ba8:	ldr	r0, [r0, r7, lsl #2]
   12bac:	sub	r4, r6, r1
   12bb0:	mov	r1, r4
   12bb4:	bl	1340c <__assert_fail@plt+0x2354>
   12bb8:	ldr	r0, [sp, #96]	; 0x60
   12bbc:	adds	r0, r0, r4
   12bc0:	str	r0, [sp, #96]	; 0x60
   12bc4:	ldr	r0, [sp, #100]	; 0x64
   12bc8:	adc	r0, r0, #0
   12bcc:	str	r0, [sp, #100]	; 0x64
   12bd0:	ldr	r7, [sp, #124]	; 0x7c
   12bd4:	ldr	r6, [sp, #88]	; 0x58
   12bd8:	cmp	r5, #0
   12bdc:	bne	12cc0 <__assert_fail@plt+0x1c08>
   12be0:	b	12cd4 <__assert_fail@plt+0x1c1c>
   12be4:	mov	r0, #0
   12be8:	sub	r4, r0, r5
   12bec:	mov	r0, r5
   12bf0:	mov	r1, r4
   12bf4:	bl	1340c <__assert_fail@plt+0x2354>
   12bf8:	ldr	r5, [sp, #44]	; 0x2c
   12bfc:	ldr	r0, [sp, #80]	; 0x50
   12c00:	ldr	sl, [sp, #104]	; 0x68
   12c04:	ldr	r7, [sp, #124]	; 0x7c
   12c08:	add	r9, sp, #235	; 0xeb
   12c0c:	adds	r5, r5, r4
   12c10:	adc	r0, r0, r4, asr #31
   12c14:	str	r0, [sp, #80]	; 0x50
   12c18:	ldr	r0, [sp, #88]	; 0x58
   12c1c:	cmp	r0, #0
   12c20:	bne	121e0 <__assert_fail@plt+0x1128>
   12c24:	b	121f4 <__assert_fail@plt+0x113c>
   12c28:	bl	10fec <__errno_location@plt>
   12c2c:	movw	r1, #33088	; 0x8140
   12c30:	ldr	r4, [r0]
   12c34:	mov	r0, #0
   12c38:	mov	r2, #5
   12c3c:	movt	r1, #1
   12c40:	str	r0, [sp, #108]	; 0x6c
   12c44:	mov	r0, #0
   12c48:	bl	10ecc <dcgettext@plt>
   12c4c:	ldr	r5, [sp, #104]	; 0x68
   12c50:	mov	r7, r0
   12c54:	mov	r0, #0
   12c58:	mov	r1, #3
   12c5c:	mov	r2, r5
   12c60:	bl	15508 <__assert_fail@plt+0x4450>
   12c64:	sub	lr, fp, #8192	; 0x2000
   12c68:	mov	r6, r0
   12c6c:	mov	r0, r8
   12c70:	mov	r1, sl
   12c74:	sub	r2, lr, #53	; 0x35
   12c78:	bl	136d4 <__assert_fail@plt+0x261c>
   12c7c:	str	r0, [sp]
   12c80:	mov	r0, #0
   12c84:	mov	r1, r4
   12c88:	mov	r2, r7
   12c8c:	mov	r3, r6
   12c90:	mov	sl, r5
   12c94:	b	131a8 <__assert_fail@plt+0x20f0>
   12c98:	mov	r1, r6
   12c9c:	bl	1340c <__assert_fail@plt+0x2354>
   12ca0:	ldr	r1, [sp, #52]	; 0x34
   12ca4:	ldr	r0, [r4, r7, lsl #2]
   12ca8:	sub	r1, r1, r6
   12cac:	bl	1340c <__assert_fail@plt+0x2354>
   12cb0:	ldr	r7, [sp, #124]	; 0x7c
   12cb4:	ldr	r6, [sp, #88]	; 0x58
   12cb8:	cmp	r5, #0
   12cbc:	beq	12cd4 <__assert_fail@plt+0x1c1c>
   12cc0:	mov	r4, r6
   12cc4:	ldr	r0, [r4], #4
   12cc8:	bl	13634 <__assert_fail@plt+0x257c>
   12ccc:	subs	r5, r5, #1
   12cd0:	bne	12cc4 <__assert_fail@plt+0x1c0c>
   12cd4:	mov	r0, r6
   12cd8:	bl	13634 <__assert_fail@plt+0x257c>
   12cdc:	ldr	r5, [sp, #96]	; 0x60
   12ce0:	ldr	r0, [sp, #48]	; 0x30
   12ce4:	mvn	r1, #0
   12ce8:	subs	r0, r1, r0
   12cec:	ldr	r0, [sp, #40]	; 0x28
   12cf0:	sbcs	r0, r1, r0
   12cf4:	bge	12da0 <__assert_fail@plt+0x1ce8>
   12cf8:	ldr	r4, [sp, #100]	; 0x64
   12cfc:	mov	r0, #0
   12d00:	mov	r2, r5
   12d04:	str	r0, [sp]
   12d08:	mov	r0, r7
   12d0c:	mov	r3, r4
   12d10:	bl	10f20 <lseek64@plt>
   12d14:	mov	r6, r1
   12d18:	cmn	r1, #1
   12d1c:	bgt	12d88 <__assert_fail@plt+0x1cd0>
   12d20:	bl	10fec <__errno_location@plt>
   12d24:	ldr	r0, [r0]
   12d28:	movw	r1, #33088	; 0x8140
   12d2c:	mov	r2, #5
   12d30:	movt	r1, #1
   12d34:	str	r0, [sp, #96]	; 0x60
   12d38:	mov	r0, #0
   12d3c:	bl	10ecc <dcgettext@plt>
   12d40:	ldr	r2, [sp, #104]	; 0x68
   12d44:	mov	r7, r0
   12d48:	mov	r0, #0
   12d4c:	mov	r1, #3
   12d50:	bl	15508 <__assert_fail@plt+0x4450>
   12d54:	sub	lr, fp, #8192	; 0x2000
   12d58:	mov	sl, r0
   12d5c:	mov	r0, r5
   12d60:	mov	r1, r4
   12d64:	sub	r2, lr, #53	; 0x35
   12d68:	bl	136d4 <__assert_fail@plt+0x261c>
   12d6c:	ldr	r1, [sp, #96]	; 0x60
   12d70:	mov	r2, r7
   12d74:	ldr	r7, [sp, #124]	; 0x7c
   12d78:	str	r0, [sp]
   12d7c:	mov	r0, #0
   12d80:	mov	r3, sl
   12d84:	bl	10f50 <error@plt>
   12d88:	ldr	r1, [sp, #108]	; 0x6c
   12d8c:	cmn	r6, #1
   12d90:	mov	r0, #0
   12d94:	movwgt	r0, #1
   12d98:	and	r1, r1, r0
   12d9c:	str	r1, [sp, #108]	; 0x6c
   12da0:	ldr	sl, [sp, #104]	; 0x68
   12da4:	ldr	r0, [sp, #112]	; 0x70
   12da8:	cmp	r0, #0
   12dac:	beq	1193c <__assert_fail@plt+0x884>
   12db0:	mov	r0, r7
   12db4:	bl	110ac <close@plt>
   12db8:	ldr	r7, [sp, #108]	; 0x6c
   12dbc:	cmp	r0, #0
   12dc0:	beq	11940 <__assert_fail@plt+0x888>
   12dc4:	bl	10fec <__errno_location@plt>
   12dc8:	ldr	r4, [r0]
   12dcc:	movw	r1, #33039	; 0x810f
   12dd0:	mov	r7, #0
   12dd4:	mov	r0, #0
   12dd8:	movt	r1, #1
   12ddc:	mov	r2, #5
   12de0:	bl	10ecc <dcgettext@plt>
   12de4:	mov	r5, r0
   12de8:	mov	r0, #4
   12dec:	mov	r1, sl
   12df0:	bl	1528c <__assert_fail@plt+0x41d4>
   12df4:	mov	r3, r0
   12df8:	mov	r0, #0
   12dfc:	mov	r1, r4
   12e00:	mov	r2, r5
   12e04:	bl	10f50 <error@plt>
   12e08:	b	11940 <__assert_fail@plt+0x888>
   12e0c:	bl	10fec <__errno_location@plt>
   12e10:	movw	r1, #33155	; 0x8183
   12e14:	ldr	r4, [r0]
   12e18:	mov	r0, #0
   12e1c:	mov	r2, #5
   12e20:	movt	r1, #1
   12e24:	str	r0, [sp, #108]	; 0x6c
   12e28:	mov	r0, #0
   12e2c:	bl	10ecc <dcgettext@plt>
   12e30:	ldr	sl, [sp, #104]	; 0x68
   12e34:	mov	r5, r0
   12e38:	mov	r0, #4
   12e3c:	mov	r1, sl
   12e40:	bl	1528c <__assert_fail@plt+0x41d4>
   12e44:	mov	r3, r0
   12e48:	mov	r0, #0
   12e4c:	mov	r1, r4
   12e50:	mov	r2, r5
   12e54:	b	131a8 <__assert_fail@plt+0x20f0>
   12e58:	mov	r0, #1
   12e5c:	mov	r1, sl
   12e60:	bl	13490 <__assert_fail@plt+0x23d8>
   12e64:	mov	r0, #0
   12e68:	str	r0, [sp, #108]	; 0x6c
   12e6c:	ldr	r0, [sp, #112]	; 0x70
   12e70:	cmp	r0, #0
   12e74:	bne	12db0 <__assert_fail@plt+0x1cf8>
   12e78:	b	1193c <__assert_fail@plt+0x884>
   12e7c:	ldr	sl, [sp, #104]	; 0x68
   12e80:	b	12f50 <__assert_fail@plt+0x1e98>
   12e84:	ldr	sl, [sp, #104]	; 0x68
   12e88:	cmp	r7, #0
   12e8c:	beq	12eb0 <__assert_fail@plt+0x1df8>
   12e90:	subs	r0, r4, #1
   12e94:	sub	r7, r7, #1
   12e98:	sbc	r1, r5, #0
   12e9c:	orrs	r2, r4, r5
   12ea0:	mov	r4, r0
   12ea4:	mov	r5, r1
   12ea8:	bne	12e88 <__assert_fail@plt+0x1dd0>
   12eac:	b	12f50 <__assert_fail@plt+0x1e98>
   12eb0:	ldr	r0, [sp, #48]	; 0x30
   12eb4:	ldr	r1, [sp, #40]	; 0x28
   12eb8:	ldr	r3, [sp, #100]	; 0x64
   12ebc:	eor	r0, r8, r0
   12ec0:	eor	r1, r3, r1
   12ec4:	orrs	r0, r0, r1
   12ec8:	mov	r0, #1
   12ecc:	str	r0, [sp, #108]	; 0x6c
   12ed0:	beq	131ac <__assert_fail@plt+0x20f4>
   12ed4:	ldr	r7, [sp, #124]	; 0x7c
   12ed8:	subs	r8, r8, #8192	; 0x2000
   12edc:	mov	r0, #0
   12ee0:	str	r0, [sp]
   12ee4:	sbc	r3, r3, #0
   12ee8:	mov	r2, r8
   12eec:	str	r3, [sp, #100]	; 0x64
   12ef0:	mov	r0, r7
   12ef4:	bl	10f20 <lseek64@plt>
   12ef8:	cmn	r1, #1
   12efc:	ble	13140 <__assert_fail@plt+0x2088>
   12f00:	sub	lr, fp, #8192	; 0x2000
   12f04:	mov	r0, r7
   12f08:	mov	r2, #8192	; 0x2000
   12f0c:	sub	r1, lr, #32
   12f10:	bl	157cc <__assert_fail@plt+0x4714>
   12f14:	cmp	r0, #0
   12f18:	beq	131ac <__assert_fail@plt+0x20f4>
   12f1c:	mov	r7, r0
   12f20:	cmn	r0, #1
   12f24:	bne	12e88 <__assert_fail@plt+0x1dd0>
   12f28:	bl	10fec <__errno_location@plt>
   12f2c:	movw	r1, #33155	; 0x8183
   12f30:	ldr	r4, [r0]
   12f34:	mov	r0, #0
   12f38:	mov	r2, #5
   12f3c:	movt	r1, #1
   12f40:	str	r0, [sp, #108]	; 0x6c
   12f44:	mov	r0, #0
   12f48:	bl	10ecc <dcgettext@plt>
   12f4c:	b	12e34 <__assert_fail@plt+0x1d7c>
   12f50:	ldr	r2, [sp, #48]	; 0x30
   12f54:	ldr	r5, [sp, #40]	; 0x28
   12f58:	ldr	r4, [sp, #100]	; 0x64
   12f5c:	subs	r0, r2, r8
   12f60:	sbcs	r0, r5, r4
   12f64:	bge	1305c <__assert_fail@plt+0x1fa4>
   12f68:	mov	r0, #0
   12f6c:	mov	r3, r5
   12f70:	mov	r4, r2
   12f74:	str	r0, [sp]
   12f78:	ldr	r0, [sp, #124]	; 0x7c
   12f7c:	bl	10f20 <lseek64@plt>
   12f80:	cmn	r1, #1
   12f84:	ble	12ff8 <__assert_fail@plt+0x1f40>
   12f88:	ldr	r0, [sp, #100]	; 0x64
   12f8c:	subs	r4, r8, r4
   12f90:	sbc	r5, r0, r5
   12f94:	orrs	r0, r4, r5
   12f98:	bne	12fb0 <__assert_fail@plt+0x1ef8>
   12f9c:	b	13058 <__assert_fail@plt+0x1fa0>
   12fa0:	mov	r0, r9
   12fa4:	bl	1340c <__assert_fail@plt+0x2354>
   12fa8:	orrs	r0, r4, r5
   12fac:	beq	13058 <__assert_fail@plt+0x1fa0>
   12fb0:	subs	r0, r4, #8192	; 0x2000
   12fb4:	mov	r2, #8192	; 0x2000
   12fb8:	mov	r1, r9
   12fbc:	sbcs	r0, r5, #0
   12fc0:	ldr	r0, [sp, #124]	; 0x7c
   12fc4:	movcc	r2, r4
   12fc8:	bl	157cc <__assert_fail@plt+0x4714>
   12fcc:	cmn	r0, #1
   12fd0:	beq	13128 <__assert_fail@plt+0x2070>
   12fd4:	subs	r4, r4, r0
   12fd8:	mov	r1, r0
   12fdc:	sbc	r5, r5, #0
   12fe0:	cmp	r0, #0
   12fe4:	bne	12fa0 <__assert_fail@plt+0x1ee8>
   12fe8:	orrs	r0, r4, r5
   12fec:	beq	12fa0 <__assert_fail@plt+0x1ee8>
   12ff0:	mov	r0, #2
   12ff4:	b	1312c <__assert_fail@plt+0x2074>
   12ff8:	bl	10fec <__errno_location@plt>
   12ffc:	movw	r1, #33088	; 0x8140
   13000:	ldr	r8, [r0]
   13004:	mov	r0, #0
   13008:	mov	r2, #5
   1300c:	movt	r1, #1
   13010:	str	r0, [sp, #108]	; 0x6c
   13014:	mov	r0, #0
   13018:	bl	10ecc <dcgettext@plt>
   1301c:	mov	r7, r0
   13020:	mov	r0, #0
   13024:	mov	r1, #3
   13028:	mov	r2, sl
   1302c:	bl	15508 <__assert_fail@plt+0x4450>
   13030:	sub	lr, fp, #8192	; 0x2000
   13034:	mov	r6, r0
   13038:	mov	r0, r4
   1303c:	mov	r1, r5
   13040:	sub	r2, lr, #53	; 0x35
   13044:	bl	136d4 <__assert_fail@plt+0x261c>
   13048:	str	r0, [sp]
   1304c:	mov	r0, #0
   13050:	mov	r1, r8
   13054:	b	1319c <__assert_fail@plt+0x20e4>
   13058:	ldr	r4, [sp, #100]	; 0x64
   1305c:	sub	lr, fp, #8192	; 0x2000
   13060:	add	r1, r7, #1
   13064:	sub	r0, lr, #32
   13068:	bl	1340c <__assert_fail@plt+0x2354>
   1306c:	mov	r0, #0
   13070:	str	r0, [sp]
   13074:	adds	r0, r8, r7
   13078:	adc	r1, r4, #0
   1307c:	adds	r6, r0, #1
   13080:	ldr	r0, [sp, #124]	; 0x7c
   13084:	adc	r7, r1, #0
   13088:	mov	r2, r6
   1308c:	mov	r3, r7
   13090:	bl	10f20 <lseek64@plt>
   13094:	mov	r4, r0
   13098:	mov	r5, r1
   1309c:	cmn	r1, #1
   130a0:	bgt	13108 <__assert_fail@plt+0x2050>
   130a4:	bl	10fec <__errno_location@plt>
   130a8:	movw	r1, #33088	; 0x8140
   130ac:	ldr	sl, [r0]
   130b0:	mov	r0, #0
   130b4:	mov	r2, #5
   130b8:	movt	r1, #1
   130bc:	bl	10ecc <dcgettext@plt>
   130c0:	ldr	r2, [sp, #104]	; 0x68
   130c4:	mov	r9, r0
   130c8:	mov	r0, #0
   130cc:	mov	r1, #3
   130d0:	bl	15508 <__assert_fail@plt+0x4450>
   130d4:	sub	lr, fp, #8192	; 0x2000
   130d8:	mov	r8, r0
   130dc:	mov	r0, r6
   130e0:	mov	r1, r7
   130e4:	sub	r2, lr, #53	; 0x35
   130e8:	bl	136d4 <__assert_fail@plt+0x261c>
   130ec:	str	r0, [sp]
   130f0:	mov	r2, r9
   130f4:	mov	r0, #0
   130f8:	mov	r1, sl
   130fc:	mov	r3, r8
   13100:	add	r9, sp, #235	; 0xeb
   13104:	bl	10f50 <error@plt>
   13108:	mvn	r1, #0
   1310c:	ldr	sl, [sp, #104]	; 0x68
   13110:	subs	r0, r1, r4
   13114:	sbcs	r0, r1, r5
   13118:	mov	r0, #0
   1311c:	movwlt	r0, #1
   13120:	str	r0, [sp, #108]	; 0x6c
   13124:	b	131ac <__assert_fail@plt+0x20f4>
   13128:	mov	r0, #1
   1312c:	mov	r1, sl
   13130:	bl	13490 <__assert_fail@plt+0x23d8>
   13134:	mov	r0, #0
   13138:	str	r0, [sp, #108]	; 0x6c
   1313c:	b	131ac <__assert_fail@plt+0x20f4>
   13140:	bl	10fec <__errno_location@plt>
   13144:	movw	r1, #33088	; 0x8140
   13148:	ldr	r4, [r0]
   1314c:	mov	r0, #0
   13150:	mov	r2, #5
   13154:	movt	r1, #1
   13158:	str	r0, [sp, #108]	; 0x6c
   1315c:	mov	r0, #0
   13160:	bl	10ecc <dcgettext@plt>
   13164:	mov	r7, r0
   13168:	mov	r0, #0
   1316c:	mov	r1, #3
   13170:	mov	r2, sl
   13174:	bl	15508 <__assert_fail@plt+0x4450>
   13178:	ldr	r1, [sp, #100]	; 0x64
   1317c:	sub	lr, fp, #8192	; 0x2000
   13180:	mov	r6, r0
   13184:	mov	r0, r8
   13188:	sub	r2, lr, #53	; 0x35
   1318c:	bl	136d4 <__assert_fail@plt+0x261c>
   13190:	str	r0, [sp]
   13194:	mov	r0, #0
   13198:	mov	r1, r4
   1319c:	ldr	sl, [sp, #104]	; 0x68
   131a0:	mov	r2, r7
   131a4:	mov	r3, r6
   131a8:	bl	10f50 <error@plt>
   131ac:	ldr	r7, [sp, #124]	; 0x7c
   131b0:	ldr	r0, [sp, #112]	; 0x70
   131b4:	movw	r8, #37205	; 0x9155
   131b8:	movt	r8, #2
   131bc:	cmp	r0, #0
   131c0:	bne	12db0 <__assert_fail@plt+0x1cf8>
   131c4:	b	1193c <__assert_fail@plt+0x884>
   131c8:	ldr	sl, [sp, #104]	; 0x68
   131cc:	b	131ac <__assert_fail@plt+0x20f4>
   131d0:	eor	r6, r1, #1
   131d4:	ldrb	r0, [r8]
   131d8:	cmp	r0, #1
   131dc:	bne	131f0 <__assert_fail@plt+0x2138>
   131e0:	mov	r0, #0
   131e4:	bl	110ac <close@plt>
   131e8:	cmn	r0, #1
   131ec:	ble	133f4 <__assert_fail@plt+0x233c>
   131f0:	mov	r0, r6
   131f4:	sub	sp, fp, #28
   131f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131fc:	uxtb	r1, r3
   13200:	cmp	r1, #0
   13204:	bne	13334 <__assert_fail@plt+0x227c>
   13208:	tst	lr, #255	; 0xff
   1320c:	strb	lr, [r0]
   13210:	mov	r2, #5
   13214:	mov	r7, #0
   13218:	movne	r1, #0
   1321c:	strbne	r1, [r0, #1]
   13220:	ands	r0, ip, #1
   13224:	movw	r1, #32424	; 0x7ea8
   13228:	str	r0, [sp, #64]	; 0x40
   1322c:	movw	r0, #32903	; 0x8087
   13230:	movt	r1, #1
   13234:	movt	r0, #1
   13238:	movne	r1, r0
   1323c:	mov	r0, #0
   13240:	bl	10ecc <dcgettext@plt>
   13244:	mvn	r1, #0
   13248:	str	r0, [sp, #12]
   1324c:	ldr	r0, [sp, #120]	; 0x78
   13250:	mov	r2, #0
   13254:	mov	r3, #0
   13258:	str	r7, [sp, #16]
   1325c:	str	r1, [sp]
   13260:	str	r1, [sp, #4]
   13264:	movw	r1, #32890	; 0x807a
   13268:	movt	r1, #1
   1326c:	str	r1, [sp, #8]
   13270:	bl	16564 <__assert_fail@plt+0x54ac>
   13274:	str	r0, [sp, #76]	; 0x4c
   13278:	ldr	r0, [r6]
   1327c:	sub	r4, r4, #1
   13280:	mov	r9, #1
   13284:	str	r0, [r6, #4]
   13288:	b	11674 <__assert_fail@plt+0x5bc>
   1328c:	cmn	r6, #3
   13290:	bne	132e8 <__assert_fail@plt+0x2230>
   13294:	movw	r0, #37104	; 0x90f0
   13298:	movw	r2, #32404	; 0x7e94
   1329c:	mov	r1, #0
   132a0:	movw	r7, #32388	; 0x7e84
   132a4:	movt	r0, #2
   132a8:	movt	r2, #1
   132ac:	str	r1, [sp, #8]
   132b0:	movw	r1, #32297	; 0x7e29
   132b4:	movt	r7, #1
   132b8:	movt	r1, #1
   132bc:	ldr	r3, [r0]
   132c0:	movw	r0, #37196	; 0x914c
   132c4:	str	r2, [sp, #4]
   132c8:	movw	r2, #32374	; 0x7e76
   132cc:	str	r7, [sp]
   132d0:	movt	r0, #2
   132d4:	movt	r2, #1
   132d8:	ldr	r0, [r0]
   132dc:	bl	15cbc <__assert_fail@plt+0x4c04>
   132e0:	mov	r0, #0
   132e4:	bl	10fb0 <exit@plt>
   132e8:	cmn	r6, #2
   132ec:	bne	132f8 <__assert_fail@plt+0x2240>
   132f0:	mov	r0, #0
   132f4:	bl	111b4 <__assert_fail@plt+0xfc>
   132f8:	sub	r0, r6, #48	; 0x30
   132fc:	cmp	r0, #9
   13300:	bhi	1332c <__assert_fail@plt+0x2274>
   13304:	movw	r1, #32326	; 0x7e46
   13308:	mov	r0, #0
   1330c:	mov	r2, #5
   13310:	movt	r1, #1
   13314:	bl	10ecc <dcgettext@plt>
   13318:	mov	r2, r0
   1331c:	mov	r0, #0
   13320:	mov	r1, #0
   13324:	mov	r3, r6
   13328:	bl	10f50 <error@plt>
   1332c:	mov	r0, #1
   13330:	bl	111b4 <__assert_fail@plt+0xfc>
   13334:	movw	r1, #32326	; 0x7e46
   13338:	mov	r0, #0
   1333c:	mov	r2, #5
   13340:	movt	r1, #1
   13344:	bl	10ecc <dcgettext@plt>
   13348:	ldrb	r3, [r7]
   1334c:	mov	r2, r0
   13350:	mov	r0, #0
   13354:	mov	r1, #0
   13358:	bl	10f50 <error@plt>
   1335c:	mov	r0, #1
   13360:	bl	111b4 <__assert_fail@plt+0xfc>
   13364:	movw	r1, #33234	; 0x81d2
   13368:	mov	r0, #0
   1336c:	mov	r2, #5
   13370:	movt	r1, #1
   13374:	bl	10ecc <dcgettext@plt>
   13378:	mov	r4, r0
   1337c:	ldr	r0, [sp, #76]	; 0x4c
   13380:	ldr	r1, [sp, #92]	; 0x5c
   13384:	sub	lr, fp, #8192	; 0x2000
   13388:	sub	r2, lr, #32
   1338c:	bl	13794 <__assert_fail@plt+0x26dc>
   13390:	mov	r3, r0
   13394:	mov	r0, #1
   13398:	mov	r1, #0
   1339c:	mov	r2, r4
   133a0:	bl	10f50 <error@plt>
   133a4:	movw	r1, #32424	; 0x7ea8
   133a8:	mov	r0, #0
   133ac:	mov	r2, #5
   133b0:	mov	r5, r3
   133b4:	movt	r1, #1
   133b8:	bl	10ecc <dcgettext@plt>
   133bc:	sub	lr, fp, #8192	; 0x2000
   133c0:	mov	r4, r0
   133c4:	mov	r0, r7
   133c8:	mov	r1, r5
   133cc:	sub	r2, lr, #32
   133d0:	bl	13794 <__assert_fail@plt+0x26dc>
   133d4:	bl	157b4 <__assert_fail@plt+0x46fc>
   133d8:	movw	r2, #32417	; 0x7ea1
   133dc:	str	r0, [sp]
   133e0:	mov	r0, #1
   133e4:	mov	r1, #75	; 0x4b
   133e8:	mov	r3, r4
   133ec:	movt	r2, #1
   133f0:	bl	10f50 <error@plt>
   133f4:	bl	10fec <__errno_location@plt>
   133f8:	ldr	r1, [r0]
   133fc:	movw	r2, #33589	; 0x8335
   13400:	mov	r0, #1
   13404:	movt	r2, #1
   13408:	bl	10f50 <error@plt>
   1340c:	push	{r4, r5, fp, lr}
   13410:	add	fp, sp, #8
   13414:	cmp	r1, #0
   13418:	popeq	{r4, r5, fp, pc}
   1341c:	movw	r5, #37196	; 0x914c
   13420:	mov	r4, r1
   13424:	mov	r1, #1
   13428:	movt	r5, #2
   1342c:	mov	r2, r4
   13430:	ldr	r3, [r5]
   13434:	bl	10ec0 <fwrite_unlocked@plt>
   13438:	cmp	r0, r4
   1343c:	bcc	13444 <__assert_fail@plt+0x238c>
   13440:	pop	{r4, r5, fp, pc}
   13444:	ldr	r0, [r5]
   13448:	bl	1107c <clearerr_unlocked@plt>
   1344c:	bl	10fec <__errno_location@plt>
   13450:	movw	r1, #33172	; 0x8194
   13454:	ldr	r4, [r0]
   13458:	mov	r0, #0
   1345c:	mov	r2, #5
   13460:	movt	r1, #1
   13464:	bl	10ecc <dcgettext@plt>
   13468:	movw	r1, #33189	; 0x81a5
   1346c:	mov	r5, r0
   13470:	mov	r0, #4
   13474:	movt	r1, #1
   13478:	bl	1528c <__assert_fail@plt+0x41d4>
   1347c:	mov	r3, r0
   13480:	mov	r0, #1
   13484:	mov	r1, r4
   13488:	mov	r2, r5
   1348c:	bl	10f50 <error@plt>
   13490:	push	{r4, r5, r6, sl, fp, lr}
   13494:	add	fp, sp, #16
   13498:	mov	r4, r1
   1349c:	cmp	r0, #2
   134a0:	beq	134dc <__assert_fail@plt+0x2424>
   134a4:	cmp	r0, #1
   134a8:	bne	13524 <__assert_fail@plt+0x246c>
   134ac:	bl	10fec <__errno_location@plt>
   134b0:	movw	r1, #33155	; 0x8183
   134b4:	ldr	r5, [r0]
   134b8:	mov	r0, #0
   134bc:	mov	r2, #5
   134c0:	movt	r1, #1
   134c4:	bl	10ecc <dcgettext@plt>
   134c8:	mov	r6, r0
   134cc:	mov	r0, #4
   134d0:	mov	r1, r4
   134d4:	bl	1528c <__assert_fail@plt+0x41d4>
   134d8:	b	1350c <__assert_fail@plt+0x2454>
   134dc:	bl	10fec <__errno_location@plt>
   134e0:	movw	r1, #33205	; 0x81b5
   134e4:	ldr	r5, [r0]
   134e8:	mov	r0, #0
   134ec:	mov	r2, #5
   134f0:	movt	r1, #1
   134f4:	bl	10ecc <dcgettext@plt>
   134f8:	mov	r6, r0
   134fc:	mov	r0, #0
   13500:	mov	r1, #3
   13504:	mov	r2, r4
   13508:	bl	15508 <__assert_fail@plt+0x4450>
   1350c:	mov	r3, r0
   13510:	mov	r0, #0
   13514:	mov	r1, r5
   13518:	mov	r2, r6
   1351c:	pop	{r4, r5, r6, sl, fp, lr}
   13520:	b	10f50 <error@plt>
   13524:	bl	110a0 <abort@plt>
   13528:	movw	r1, #37212	; 0x915c
   1352c:	movt	r1, #2
   13530:	str	r0, [r1, #4]
   13534:	bx	lr
   13538:	movw	r1, #37212	; 0x915c
   1353c:	movt	r1, #2
   13540:	strb	r0, [r1]
   13544:	bx	lr
   13548:	push	{r4, r5, r6, sl, fp, lr}
   1354c:	add	fp, sp, #16
   13550:	sub	sp, sp, #8
   13554:	movw	r0, #37196	; 0x914c
   13558:	movt	r0, #2
   1355c:	ldr	r0, [r0]
   13560:	bl	172f8 <__assert_fail@plt+0x6240>
   13564:	cmp	r0, #0
   13568:	beq	13590 <__assert_fail@plt+0x24d8>
   1356c:	movw	r5, #37212	; 0x915c
   13570:	movt	r5, #2
   13574:	ldrb	r0, [r5]
   13578:	cmp	r0, #0
   1357c:	beq	135bc <__assert_fail@plt+0x2504>
   13580:	bl	10fec <__errno_location@plt>
   13584:	ldr	r0, [r0]
   13588:	cmp	r0, #32
   1358c:	bne	135bc <__assert_fail@plt+0x2504>
   13590:	movw	r0, #37192	; 0x9148
   13594:	movt	r0, #2
   13598:	ldr	r0, [r0]
   1359c:	bl	172f8 <__assert_fail@plt+0x6240>
   135a0:	cmp	r0, #0
   135a4:	subeq	sp, fp, #16
   135a8:	popeq	{r4, r5, r6, sl, fp, pc}
   135ac:	movw	r0, #37108	; 0x90f4
   135b0:	movt	r0, #2
   135b4:	ldr	r0, [r0]
   135b8:	bl	10e90 <_exit@plt>
   135bc:	movw	r1, #33511	; 0x82e7
   135c0:	mov	r0, #0
   135c4:	mov	r2, #5
   135c8:	movt	r1, #1
   135cc:	bl	10ecc <dcgettext@plt>
   135d0:	ldr	r6, [r5, #4]
   135d4:	mov	r4, r0
   135d8:	bl	10fec <__errno_location@plt>
   135dc:	ldr	r5, [r0]
   135e0:	cmp	r6, #0
   135e4:	bne	13600 <__assert_fail@plt+0x2548>
   135e8:	movw	r2, #32421	; 0x7ea5
   135ec:	mov	r0, #0
   135f0:	mov	r1, r5
   135f4:	mov	r3, r4
   135f8:	movt	r2, #1
   135fc:	b	13620 <__assert_fail@plt+0x2568>
   13600:	mov	r0, r6
   13604:	bl	1542c <__assert_fail@plt+0x4374>
   13608:	movw	r2, #32417	; 0x7ea1
   1360c:	mov	r3, r0
   13610:	str	r4, [sp]
   13614:	mov	r0, #0
   13618:	mov	r1, r5
   1361c:	movt	r2, #1
   13620:	bl	10f50 <error@plt>
   13624:	movw	r0, #37108	; 0x90f4
   13628:	movt	r0, #2
   1362c:	ldr	r0, [r0]
   13630:	bl	10e90 <_exit@plt>
   13634:	push	{r4, r5, r6, sl, fp, lr}
   13638:	add	fp, sp, #16
   1363c:	mov	r4, r0
   13640:	bl	10fec <__errno_location@plt>
   13644:	ldr	r6, [r0]
   13648:	mov	r5, r0
   1364c:	mov	r0, r4
   13650:	bl	10e84 <free@plt>
   13654:	str	r6, [r5]
   13658:	pop	{r4, r5, r6, sl, fp, pc}
   1365c:	push	{r4, r5, r6, r7, fp, lr}
   13660:	add	fp, sp, #16
   13664:	cmp	r2, #0
   13668:	beq	136b4 <__assert_fail@plt+0x25fc>
   1366c:	mov	r5, r2
   13670:	mov	r6, r1
   13674:	mov	r7, r0
   13678:	mov	r4, #0
   1367c:	mov	r0, r7
   13680:	mov	r1, r6
   13684:	mov	r2, r5
   13688:	bl	157cc <__assert_fail@plt+0x4714>
   1368c:	cmn	r0, #1
   13690:	beq	136ac <__assert_fail@plt+0x25f4>
   13694:	cmp	r0, #0
   13698:	beq	136c0 <__assert_fail@plt+0x2608>
   1369c:	subs	r5, r5, r0
   136a0:	add	r6, r6, r0
   136a4:	add	r4, r0, r4
   136a8:	bne	1367c <__assert_fail@plt+0x25c4>
   136ac:	mov	r0, r4
   136b0:	pop	{r4, r5, r6, r7, fp, pc}
   136b4:	mov	r4, #0
   136b8:	mov	r0, r4
   136bc:	pop	{r4, r5, r6, r7, fp, pc}
   136c0:	bl	10fec <__errno_location@plt>
   136c4:	mov	r1, #0
   136c8:	str	r1, [r0]
   136cc:	mov	r0, r4
   136d0:	pop	{r4, r5, r6, r7, fp, pc}
   136d4:	push	{r4, r5, r6, sl, fp, lr}
   136d8:	add	fp, sp, #16
   136dc:	mov	r5, r0
   136e0:	mov	r0, #0
   136e4:	mov	r4, r1
   136e8:	add	r6, r2, #19
   136ec:	cmp	r1, #0
   136f0:	strb	r0, [r2, #20]
   136f4:	bmi	13744 <__assert_fail@plt+0x268c>
   136f8:	mov	r0, r5
   136fc:	mov	r1, r4
   13700:	mov	r2, #10
   13704:	mov	r3, #0
   13708:	bl	17700 <__assert_fail@plt+0x6648>
   1370c:	add	r2, r0, r0, lsl #2
   13710:	sub	r2, r5, r2, lsl #1
   13714:	add	r2, r2, #48	; 0x30
   13718:	strb	r2, [r6], #-1
   1371c:	adds	r2, r5, #9
   13720:	mov	r5, r0
   13724:	adc	r3, r4, #0
   13728:	rsbs	r2, r2, #18
   1372c:	mov	r4, r1
   13730:	rscs	r2, r3, #0
   13734:	bcc	136f8 <__assert_fail@plt+0x2640>
   13738:	add	r6, r6, #1
   1373c:	mov	r0, r6
   13740:	pop	{r4, r5, r6, sl, fp, pc}
   13744:	mov	r0, r5
   13748:	mov	r1, r4
   1374c:	mov	r2, #10
   13750:	mov	r3, #0
   13754:	bl	17700 <__assert_fail@plt+0x6648>
   13758:	add	r2, r0, r0, lsl #2
   1375c:	rsb	r2, r5, r2, lsl #1
   13760:	add	r2, r2, #48	; 0x30
   13764:	strb	r2, [r6], #-1
   13768:	adds	r2, r5, #9
   1376c:	mov	r5, r0
   13770:	adc	r3, r4, #0
   13774:	rsbs	r2, r2, #18
   13778:	mov	r4, r1
   1377c:	rscs	r2, r3, #0
   13780:	bcc	13744 <__assert_fail@plt+0x268c>
   13784:	mov	r0, #45	; 0x2d
   13788:	strb	r0, [r6]
   1378c:	mov	r0, r6
   13790:	pop	{r4, r5, r6, sl, fp, pc}
   13794:	push	{r4, r5, r6, sl, fp, lr}
   13798:	add	fp, sp, #16
   1379c:	mov	r5, r0
   137a0:	mov	r0, #0
   137a4:	mov	r4, r1
   137a8:	add	r6, r2, #19
   137ac:	strb	r0, [r2, #20]
   137b0:	mov	r0, r5
   137b4:	mov	r1, r4
   137b8:	mov	r2, #10
   137bc:	mov	r3, #0
   137c0:	bl	177d4 <__assert_fail@plt+0x671c>
   137c4:	add	r2, r0, r0, lsl #2
   137c8:	sub	r2, r5, r2, lsl #1
   137cc:	orr	r2, r2, #48	; 0x30
   137d0:	strb	r2, [r6], #-1
   137d4:	rsbs	r2, r5, #9
   137d8:	mov	r5, r0
   137dc:	rscs	r2, r4, #0
   137e0:	mov	r4, r1
   137e4:	bcc	137b0 <__assert_fail@plt+0x26f8>
   137e8:	add	r0, r6, #1
   137ec:	pop	{r4, r5, r6, sl, fp, pc}
   137f0:	push	{r4, r5, fp, lr}
   137f4:	add	fp, sp, #8
   137f8:	cmp	r0, #0
   137fc:	beq	13890 <__assert_fail@plt+0x27d8>
   13800:	mov	r1, #47	; 0x2f
   13804:	mov	r4, r0
   13808:	bl	11064 <strrchr@plt>
   1380c:	cmp	r0, #0
   13810:	mov	r5, r4
   13814:	addne	r5, r0, #1
   13818:	sub	r0, r5, r4
   1381c:	cmp	r0, #7
   13820:	blt	13874 <__assert_fail@plt+0x27bc>
   13824:	movw	r1, #33579	; 0x832b
   13828:	sub	r0, r5, #7
   1382c:	mov	r2, #7
   13830:	movt	r1, #1
   13834:	bl	11094 <strncmp@plt>
   13838:	cmp	r0, #0
   1383c:	bne	13874 <__assert_fail@plt+0x27bc>
   13840:	movw	r1, #33587	; 0x8333
   13844:	mov	r0, r5
   13848:	mov	r2, #3
   1384c:	movt	r1, #1
   13850:	bl	11094 <strncmp@plt>
   13854:	cmp	r0, #0
   13858:	beq	13864 <__assert_fail@plt+0x27ac>
   1385c:	mov	r4, r5
   13860:	b	13874 <__assert_fail@plt+0x27bc>
   13864:	movw	r0, #37176	; 0x9138
   13868:	add	r4, r5, #3
   1386c:	movt	r0, #2
   13870:	str	r4, [r0]
   13874:	movw	r0, #37180	; 0x913c
   13878:	movt	r0, #2
   1387c:	str	r4, [r0]
   13880:	movw	r0, #37220	; 0x9164
   13884:	movt	r0, #2
   13888:	str	r4, [r0]
   1388c:	pop	{r4, r5, fp, pc}
   13890:	movw	r0, #37192	; 0x9148
   13894:	mov	r1, #55	; 0x37
   13898:	mov	r2, #1
   1389c:	movt	r0, #2
   138a0:	ldr	r3, [r0]
   138a4:	movw	r0, #33523	; 0x82f3
   138a8:	movt	r0, #1
   138ac:	bl	10f14 <fwrite@plt>
   138b0:	bl	110a0 <abort@plt>
   138b4:	push	{r4, r5, r6, sl, fp, lr}
   138b8:	add	fp, sp, #16
   138bc:	mov	r4, r0
   138c0:	movw	r0, #37224	; 0x9168
   138c4:	movt	r0, #2
   138c8:	cmp	r4, #0
   138cc:	moveq	r4, r0
   138d0:	bl	10fec <__errno_location@plt>
   138d4:	ldr	r6, [r0]
   138d8:	mov	r5, r0
   138dc:	mov	r0, r4
   138e0:	mov	r1, #48	; 0x30
   138e4:	bl	16350 <__assert_fail@plt+0x5298>
   138e8:	str	r6, [r5]
   138ec:	pop	{r4, r5, r6, sl, fp, pc}
   138f0:	movw	r1, #37224	; 0x9168
   138f4:	cmp	r0, #0
   138f8:	movt	r1, #2
   138fc:	movne	r1, r0
   13900:	ldr	r0, [r1]
   13904:	bx	lr
   13908:	movw	r2, #37224	; 0x9168
   1390c:	cmp	r0, #0
   13910:	movt	r2, #2
   13914:	movne	r2, r0
   13918:	str	r1, [r2]
   1391c:	bx	lr
   13920:	movw	r3, #37224	; 0x9168
   13924:	cmp	r0, #0
   13928:	and	r2, r2, #1
   1392c:	movt	r3, #2
   13930:	movne	r3, r0
   13934:	ubfx	r0, r1, #5, #3
   13938:	and	r1, r1, #31
   1393c:	add	ip, r3, r0, lsl #2
   13940:	mov	r0, #1
   13944:	ldr	r3, [ip, #8]
   13948:	and	r0, r0, r3, lsr r1
   1394c:	eor	r2, r0, r2
   13950:	eor	r1, r3, r2, lsl r1
   13954:	str	r1, [ip, #8]
   13958:	bx	lr
   1395c:	movw	r2, #37224	; 0x9168
   13960:	cmp	r0, #0
   13964:	movt	r2, #2
   13968:	movne	r2, r0
   1396c:	ldr	r0, [r2, #4]
   13970:	str	r1, [r2, #4]
   13974:	bx	lr
   13978:	push	{fp, lr}
   1397c:	mov	fp, sp
   13980:	movw	r3, #37224	; 0x9168
   13984:	cmp	r0, #0
   13988:	movt	r3, #2
   1398c:	movne	r3, r0
   13990:	cmp	r1, #0
   13994:	mov	r0, #10
   13998:	cmpne	r2, #0
   1399c:	str	r0, [r3]
   139a0:	bne	139a8 <__assert_fail@plt+0x28f0>
   139a4:	bl	110a0 <abort@plt>
   139a8:	str	r1, [r3, #40]	; 0x28
   139ac:	str	r2, [r3, #44]	; 0x2c
   139b0:	pop	{fp, pc}
   139b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139b8:	add	fp, sp, #28
   139bc:	sub	sp, sp, #20
   139c0:	mov	r7, r0
   139c4:	ldr	r0, [fp, #8]
   139c8:	movw	r5, #37224	; 0x9168
   139cc:	mov	r8, r3
   139d0:	mov	r9, r2
   139d4:	mov	sl, r1
   139d8:	movt	r5, #2
   139dc:	cmp	r0, #0
   139e0:	movne	r5, r0
   139e4:	bl	10fec <__errno_location@plt>
   139e8:	ldr	r2, [r5, #40]	; 0x28
   139ec:	ldr	r3, [r5, #44]	; 0x2c
   139f0:	mov	r4, r0
   139f4:	ldm	r5, {r0, r1}
   139f8:	add	r5, r5, #8
   139fc:	ldr	r6, [r4]
   13a00:	stm	sp, {r0, r1, r5}
   13a04:	mov	r0, r7
   13a08:	mov	r1, sl
   13a0c:	str	r2, [sp, #12]
   13a10:	str	r3, [sp, #16]
   13a14:	mov	r2, r9
   13a18:	mov	r3, r8
   13a1c:	bl	13a2c <__assert_fail@plt+0x2974>
   13a20:	str	r6, [r4]
   13a24:	sub	sp, fp, #28
   13a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a30:	add	fp, sp, #28
   13a34:	sub	sp, sp, #156	; 0x9c
   13a38:	str	r0, [fp, #-84]	; 0xffffffac
   13a3c:	add	r0, r2, #1
   13a40:	mov	r6, r1
   13a44:	mov	r7, r3
   13a48:	str	r2, [fp, #-80]	; 0xffffffb0
   13a4c:	str	r0, [sp, #80]	; 0x50
   13a50:	ldr	r0, [fp, #12]
   13a54:	and	r1, r0, #1
   13a58:	str	r1, [sp, #36]	; 0x24
   13a5c:	and	r1, r0, #4
   13a60:	str	r1, [sp, #32]
   13a64:	ubfx	r8, r0, #1, #1
   13a68:	bl	10f2c <__ctype_get_mb_cur_max@plt>
   13a6c:	str	r0, [sp, #40]	; 0x28
   13a70:	ldr	r0, [fp, #24]
   13a74:	ldr	r4, [fp, #8]
   13a78:	mov	r1, #0
   13a7c:	str	r1, [fp, #-52]	; 0xffffffcc
   13a80:	mov	r1, #0
   13a84:	str	r1, [sp, #60]	; 0x3c
   13a88:	mov	r1, #1
   13a8c:	str	r1, [sp, #84]	; 0x54
   13a90:	str	r0, [sp, #76]	; 0x4c
   13a94:	ldr	r0, [fp, #20]
   13a98:	str	r0, [sp, #72]	; 0x48
   13a9c:	mov	r0, #0
   13aa0:	str	r0, [sp, #56]	; 0x38
   13aa4:	mov	r0, #0
   13aa8:	str	r0, [fp, #-88]	; 0xffffffa8
   13aac:	mov	r0, #0
   13ab0:	str	r0, [fp, #-72]	; 0xffffffb8
   13ab4:	mov	r0, #0
   13ab8:	cmp	r4, #10
   13abc:	bhi	14dd8 <__assert_fail@plt+0x3d20>
   13ac0:	add	r1, pc, #24
   13ac4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ac8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13acc:	mov	r5, r6
   13ad0:	mov	r9, #0
   13ad4:	mov	r2, #1
   13ad8:	mov	r3, #0
   13adc:	ldr	pc, [r1, r4, lsl #2]
   13ae0:	andeq	r3, r1, r8, lsr #23
   13ae4:	andeq	r3, r1, r4, ror #23
   13ae8:			; <UNDEFINED> instruction: 0x00013bb8
   13aec:	andeq	r3, r1, r0, lsr #23
   13af0:	ldrdeq	r3, [r1], -r8
   13af4:	andeq	r3, r1, ip, lsr ip
   13af8:	andeq	r3, r1, r8, asr #23
   13afc:			; <UNDEFINED> instruction: 0x00013eb4
   13b00:	andeq	r3, r1, ip, lsl #22
   13b04:	andeq	r3, r1, ip, lsl #22
   13b08:	andeq	r3, r1, r4, asr #26
   13b0c:	movw	r6, #33669	; 0x8385
   13b10:	mov	r0, #0
   13b14:	mov	r2, #5
   13b18:	movt	r6, #1
   13b1c:	mov	r1, r6
   13b20:	bl	10ecc <dcgettext@plt>
   13b24:	cmp	r0, r6
   13b28:	str	r0, [sp, #72]	; 0x48
   13b2c:	bne	13d1c <__assert_fail@plt+0x2c64>
   13b30:	bl	1751c <__assert_fail@plt+0x6464>
   13b34:	ldrb	r1, [r0]
   13b38:	and	r1, r1, #223	; 0xdf
   13b3c:	cmp	r1, #71	; 0x47
   13b40:	beq	13c9c <__assert_fail@plt+0x2be4>
   13b44:	cmp	r1, #85	; 0x55
   13b48:	bne	13d00 <__assert_fail@plt+0x2c48>
   13b4c:	ldrb	r1, [r0, #1]
   13b50:	and	r1, r1, #223	; 0xdf
   13b54:	cmp	r1, #84	; 0x54
   13b58:	bne	13d00 <__assert_fail@plt+0x2c48>
   13b5c:	ldrb	r1, [r0, #2]
   13b60:	and	r1, r1, #223	; 0xdf
   13b64:	cmp	r1, #70	; 0x46
   13b68:	bne	13d00 <__assert_fail@plt+0x2c48>
   13b6c:	ldrb	r1, [r0, #3]
   13b70:	cmp	r1, #45	; 0x2d
   13b74:	bne	13d00 <__assert_fail@plt+0x2c48>
   13b78:	ldrb	r1, [r0, #4]
   13b7c:	cmp	r1, #56	; 0x38
   13b80:	bne	13d00 <__assert_fail@plt+0x2c48>
   13b84:	ldrb	r0, [r0, #5]
   13b88:	cmp	r0, #0
   13b8c:	movw	r0, #33673	; 0x8389
   13b90:	movt	r0, #1
   13b94:	str	r0, [sp, #72]	; 0x48
   13b98:	bne	13d00 <__assert_fail@plt+0x2c48>
   13b9c:	b	13d1c <__assert_fail@plt+0x2c64>
   13ba0:	mov	r0, #1
   13ba4:	b	13be4 <__assert_fail@plt+0x2b2c>
   13ba8:	mov	r4, #0
   13bac:	mov	r9, #0
   13bb0:	mov	r2, r0
   13bb4:	b	13c34 <__assert_fail@plt+0x2b7c>
   13bb8:	tst	r8, #1
   13bbc:	bne	13be4 <__assert_fail@plt+0x2b2c>
   13bc0:	mov	r2, r0
   13bc4:	b	13c0c <__assert_fail@plt+0x2b54>
   13bc8:	mov	r0, #1
   13bcc:	mov	r9, #0
   13bd0:	mov	r4, #5
   13bd4:	b	13c50 <__assert_fail@plt+0x2b98>
   13bd8:	mov	r2, #1
   13bdc:	tst	r8, #1
   13be0:	beq	13c0c <__assert_fail@plt+0x2b54>
   13be4:	mov	r1, #1
   13be8:	mov	r9, #0
   13bec:	mov	r4, #2
   13bf0:	mov	r2, r0
   13bf4:	mov	r3, #1
   13bf8:	str	r1, [fp, #-72]	; 0xffffffb8
   13bfc:	movw	r1, #33671	; 0x8387
   13c00:	movt	r1, #1
   13c04:	str	r1, [fp, #-88]	; 0xffffffa8
   13c08:	b	13eb4 <__assert_fail@plt+0x2dfc>
   13c0c:	cmp	r5, #0
   13c10:	mov	r9, #1
   13c14:	mov	r4, #2
   13c18:	movne	r0, #39	; 0x27
   13c1c:	strbne	r0, [ip]
   13c20:	movw	r0, #33671	; 0x8387
   13c24:	movt	r0, #1
   13c28:	str	r0, [fp, #-88]	; 0xffffffa8
   13c2c:	mov	r0, #1
   13c30:	str	r0, [fp, #-72]	; 0xffffffb8
   13c34:	mov	r3, #0
   13c38:	b	13eb4 <__assert_fail@plt+0x2dfc>
   13c3c:	mov	r4, #5
   13c40:	tst	r8, #1
   13c44:	beq	13c6c <__assert_fail@plt+0x2bb4>
   13c48:	mov	r0, #1
   13c4c:	mov	r9, #0
   13c50:	str	r0, [fp, #-72]	; 0xffffffb8
   13c54:	movw	r0, #33667	; 0x8383
   13c58:	mov	r2, #1
   13c5c:	mov	r3, #1
   13c60:	movt	r0, #1
   13c64:	str	r0, [fp, #-88]	; 0xffffffa8
   13c68:	b	13eb4 <__assert_fail@plt+0x2dfc>
   13c6c:	cmp	r5, #0
   13c70:	mov	r3, #0
   13c74:	mov	r9, #1
   13c78:	mov	r2, #1
   13c7c:	movne	r0, #34	; 0x22
   13c80:	strbne	r0, [ip]
   13c84:	movw	r0, #33667	; 0x8383
   13c88:	movt	r0, #1
   13c8c:	str	r0, [fp, #-88]	; 0xffffffa8
   13c90:	mov	r0, #1
   13c94:	str	r0, [fp, #-72]	; 0xffffffb8
   13c98:	b	13eb4 <__assert_fail@plt+0x2dfc>
   13c9c:	ldrb	r1, [r0, #1]
   13ca0:	and	r1, r1, #223	; 0xdf
   13ca4:	cmp	r1, #66	; 0x42
   13ca8:	bne	13d00 <__assert_fail@plt+0x2c48>
   13cac:	ldrb	r1, [r0, #2]
   13cb0:	cmp	r1, #49	; 0x31
   13cb4:	bne	13d00 <__assert_fail@plt+0x2c48>
   13cb8:	ldrb	r1, [r0, #3]
   13cbc:	cmp	r1, #56	; 0x38
   13cc0:	bne	13d00 <__assert_fail@plt+0x2c48>
   13cc4:	ldrb	r1, [r0, #4]
   13cc8:	cmp	r1, #48	; 0x30
   13ccc:	bne	13d00 <__assert_fail@plt+0x2c48>
   13cd0:	ldrb	r1, [r0, #5]
   13cd4:	cmp	r1, #51	; 0x33
   13cd8:	bne	13d00 <__assert_fail@plt+0x2c48>
   13cdc:	ldrb	r1, [r0, #6]
   13ce0:	cmp	r1, #48	; 0x30
   13ce4:	bne	13d00 <__assert_fail@plt+0x2c48>
   13ce8:	ldrb	r0, [r0, #7]
   13cec:	cmp	r0, #0
   13cf0:	movw	r0, #33681	; 0x8391
   13cf4:	movt	r0, #1
   13cf8:	str	r0, [sp, #72]	; 0x48
   13cfc:	beq	13d1c <__assert_fail@plt+0x2c64>
   13d00:	movw	r1, #33667	; 0x8383
   13d04:	movw	r0, #33671	; 0x8387
   13d08:	cmp	r4, #9
   13d0c:	movt	r1, #1
   13d10:	movt	r0, #1
   13d14:	moveq	r0, r1
   13d18:	str	r0, [sp, #72]	; 0x48
   13d1c:	movw	r6, #33671	; 0x8387
   13d20:	mov	r0, #0
   13d24:	mov	r2, #5
   13d28:	movt	r6, #1
   13d2c:	mov	r1, r6
   13d30:	bl	10ecc <dcgettext@plt>
   13d34:	cmp	r0, r6
   13d38:	str	r0, [sp, #76]	; 0x4c
   13d3c:	beq	13d88 <__assert_fail@plt+0x2cd0>
   13d40:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d44:	mov	r9, #0
   13d48:	tst	r8, #1
   13d4c:	bne	13e90 <__assert_fail@plt+0x2dd8>
   13d50:	ldr	r0, [sp, #72]	; 0x48
   13d54:	ldrb	r0, [r0]
   13d58:	cmp	r0, #0
   13d5c:	beq	13e90 <__assert_fail@plt+0x2dd8>
   13d60:	ldr	r1, [sp, #72]	; 0x48
   13d64:	mov	r9, #0
   13d68:	add	r1, r1, #1
   13d6c:	cmp	r9, r5
   13d70:	strbcc	r0, [ip, r9]
   13d74:	ldrb	r0, [r1, r9]
   13d78:	add	r9, r9, #1
   13d7c:	cmp	r0, #0
   13d80:	bne	13d6c <__assert_fail@plt+0x2cb4>
   13d84:	b	13e90 <__assert_fail@plt+0x2dd8>
   13d88:	bl	1751c <__assert_fail@plt+0x6464>
   13d8c:	ldrb	r1, [r0]
   13d90:	and	r1, r1, #223	; 0xdf
   13d94:	cmp	r1, #71	; 0x47
   13d98:	beq	13e08 <__assert_fail@plt+0x2d50>
   13d9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13da0:	cmp	r1, #85	; 0x55
   13da4:	bne	13e64 <__assert_fail@plt+0x2dac>
   13da8:	ldrb	r1, [r0, #1]
   13dac:	and	r1, r1, #223	; 0xdf
   13db0:	cmp	r1, #84	; 0x54
   13db4:	bne	13e64 <__assert_fail@plt+0x2dac>
   13db8:	ldrb	r1, [r0, #2]
   13dbc:	and	r1, r1, #223	; 0xdf
   13dc0:	cmp	r1, #70	; 0x46
   13dc4:	bne	13e64 <__assert_fail@plt+0x2dac>
   13dc8:	ldrb	r1, [r0, #3]
   13dcc:	cmp	r1, #45	; 0x2d
   13dd0:	bne	13e64 <__assert_fail@plt+0x2dac>
   13dd4:	ldrb	r1, [r0, #4]
   13dd8:	cmp	r1, #56	; 0x38
   13ddc:	bne	13e64 <__assert_fail@plt+0x2dac>
   13de0:	ldrb	r0, [r0, #5]
   13de4:	cmp	r0, #0
   13de8:	bne	13e64 <__assert_fail@plt+0x2dac>
   13dec:	movw	r0, #33677	; 0x838d
   13df0:	movt	r0, #1
   13df4:	str	r0, [sp, #76]	; 0x4c
   13df8:	mov	r9, #0
   13dfc:	tst	r8, #1
   13e00:	beq	13d50 <__assert_fail@plt+0x2c98>
   13e04:	b	13e90 <__assert_fail@plt+0x2dd8>
   13e08:	ldrb	r1, [r0, #1]
   13e0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e10:	and	r1, r1, #223	; 0xdf
   13e14:	cmp	r1, #66	; 0x42
   13e18:	bne	13e64 <__assert_fail@plt+0x2dac>
   13e1c:	ldrb	r1, [r0, #2]
   13e20:	cmp	r1, #49	; 0x31
   13e24:	bne	13e64 <__assert_fail@plt+0x2dac>
   13e28:	ldrb	r1, [r0, #3]
   13e2c:	cmp	r1, #56	; 0x38
   13e30:	bne	13e64 <__assert_fail@plt+0x2dac>
   13e34:	ldrb	r1, [r0, #4]
   13e38:	cmp	r1, #48	; 0x30
   13e3c:	bne	13e64 <__assert_fail@plt+0x2dac>
   13e40:	ldrb	r1, [r0, #5]
   13e44:	cmp	r1, #51	; 0x33
   13e48:	bne	13e64 <__assert_fail@plt+0x2dac>
   13e4c:	ldrb	r1, [r0, #6]
   13e50:	cmp	r1, #48	; 0x30
   13e54:	bne	13e64 <__assert_fail@plt+0x2dac>
   13e58:	ldrb	r0, [r0, #7]
   13e5c:	cmp	r0, #0
   13e60:	beq	14c78 <__assert_fail@plt+0x3bc0>
   13e64:	movw	r0, #33671	; 0x8387
   13e68:	cmp	r4, #9
   13e6c:	movt	r0, #1
   13e70:	mov	r1, r0
   13e74:	movw	r0, #33667	; 0x8383
   13e78:	movt	r0, #1
   13e7c:	moveq	r1, r0
   13e80:	str	r1, [sp, #76]	; 0x4c
   13e84:	mov	r9, #0
   13e88:	tst	r8, #1
   13e8c:	beq	13d50 <__assert_fail@plt+0x2c98>
   13e90:	ldr	r6, [sp, #76]	; 0x4c
   13e94:	mov	r0, r6
   13e98:	bl	10fc8 <strlen@plt>
   13e9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ea0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13ea4:	str	r0, [fp, #-72]	; 0xffffffb8
   13ea8:	str	r6, [fp, #-88]	; 0xffffffa8
   13eac:	mov	r2, #1
   13eb0:	mov	r3, r8
   13eb4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13eb8:	str	r4, [fp, #-64]	; 0xffffffc0
   13ebc:	mov	sl, #0
   13ec0:	str	r3, [fp, #-76]	; 0xffffffb4
   13ec4:	str	r2, [sp, #88]	; 0x58
   13ec8:	cmp	r0, #0
   13ecc:	movwne	r0, #1
   13ed0:	and	r1, r0, r3
   13ed4:	and	r1, r2, r1
   13ed8:	str	r1, [sp, #48]	; 0x30
   13edc:	sub	r1, r4, #2
   13ee0:	clz	r1, r1
   13ee4:	lsr	r1, r1, #5
   13ee8:	and	r1, r1, r3
   13eec:	str	r1, [sp, #44]	; 0x2c
   13ef0:	subs	r1, r4, #2
   13ef4:	eor	r4, r3, #1
   13ef8:	movwne	r1, #1
   13efc:	str	r4, [sp, #92]	; 0x5c
   13f00:	orr	r4, r1, r4
   13f04:	and	r1, r1, r2
   13f08:	and	r0, r0, r1
   13f0c:	str	r4, [sp, #64]	; 0x40
   13f10:	ldr	r4, [sp, #84]	; 0x54
   13f14:	str	r0, [fp, #-60]	; 0xffffffc4
   13f18:	orr	r0, r1, r3
   13f1c:	ldr	r1, [fp, #16]
   13f20:	eor	r0, r0, #1
   13f24:	clz	r1, r1
   13f28:	lsr	r1, r1, #5
   13f2c:	orr	r0, r1, r0
   13f30:	str	r0, [fp, #-68]	; 0xffffffbc
   13f34:	eor	r0, r2, #1
   13f38:	str	r0, [sp, #52]	; 0x34
   13f3c:	cmn	r7, #1
   13f40:	beq	13f50 <__assert_fail@plt+0x2e98>
   13f44:	cmp	sl, r7
   13f48:	bne	13f5c <__assert_fail@plt+0x2ea4>
   13f4c:	b	14bf0 <__assert_fail@plt+0x3b38>
   13f50:	ldrb	r0, [lr, sl]
   13f54:	cmp	r0, #0
   13f58:	beq	14bf8 <__assert_fail@plt+0x3b40>
   13f5c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13f60:	cmp	r0, #0
   13f64:	beq	13fc4 <__assert_fail@plt+0x2f0c>
   13f68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13f6c:	mov	r6, r5
   13f70:	add	r5, sl, r0
   13f74:	cmp	r0, #2
   13f78:	bcc	13fe4 <__assert_fail@plt+0x2f2c>
   13f7c:	mov	r0, #0
   13f80:	cmn	r7, #1
   13f84:	str	r0, [fp, #-56]	; 0xffffffc8
   13f88:	bne	13fa0 <__assert_fail@plt+0x2ee8>
   13f8c:	mov	r0, lr
   13f90:	bl	10fc8 <strlen@plt>
   13f94:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13f98:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f9c:	mov	r7, r0
   13fa0:	cmp	r5, r7
   13fa4:	bls	13ff4 <__assert_fail@plt+0x2f3c>
   13fa8:	mov	r0, #0
   13fac:	mov	r5, r6
   13fb0:	str	r0, [fp, #-48]	; 0xffffffd0
   13fb4:	ldrb	r6, [lr, sl]
   13fb8:	cmp	r6, #126	; 0x7e
   13fbc:	bls	14044 <__assert_fail@plt+0x2f8c>
   13fc0:	b	145a0 <__assert_fail@plt+0x34e8>
   13fc4:	mov	r0, #0
   13fc8:	str	r0, [fp, #-56]	; 0xffffffc8
   13fcc:	mov	r0, #0
   13fd0:	str	r0, [fp, #-48]	; 0xffffffd0
   13fd4:	ldrb	r6, [lr, sl]
   13fd8:	cmp	r6, #126	; 0x7e
   13fdc:	bls	14044 <__assert_fail@plt+0x2f8c>
   13fe0:	b	145a0 <__assert_fail@plt+0x34e8>
   13fe4:	mov	r0, #0
   13fe8:	str	r0, [fp, #-56]	; 0xffffffc8
   13fec:	cmp	r5, r7
   13ff0:	bhi	13fa8 <__assert_fail@plt+0x2ef0>
   13ff4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13ff8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13ffc:	add	r0, lr, sl
   14000:	bl	10fbc <bcmp@plt>
   14004:	ldr	r2, [sp, #92]	; 0x5c
   14008:	cmp	r0, #0
   1400c:	mov	r1, r0
   14010:	mov	r5, r6
   14014:	movwne	r1, #1
   14018:	orr	r1, r1, r2
   1401c:	tst	r1, #1
   14020:	beq	14cb8 <__assert_fail@plt+0x3c00>
   14024:	ldr	ip, [fp, #-84]	; 0xffffffac
   14028:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1402c:	clz	r0, r0
   14030:	lsr	r0, r0, #5
   14034:	str	r0, [fp, #-48]	; 0xffffffd0
   14038:	ldrb	r6, [lr, sl]
   1403c:	cmp	r6, #126	; 0x7e
   14040:	bhi	145a0 <__assert_fail@plt+0x34e8>
   14044:	add	r3, pc, #16
   14048:	mov	r8, #1
   1404c:	mov	r2, #110	; 0x6e
   14050:	mov	r0, #97	; 0x61
   14054:	mov	r1, #0
   14058:	ldr	pc, [r3, r6, lsl #2]
   1405c:	andeq	r4, r1, r8, asr r3
   14060:	andeq	r4, r1, r0, lsr #11
   14064:	andeq	r4, r1, r0, lsr #11
   14068:	andeq	r4, r1, r0, lsr #11
   1406c:	andeq	r4, r1, r0, lsr #11
   14070:	andeq	r4, r1, r0, lsr #11
   14074:	andeq	r4, r1, r0, lsr #11
   14078:	andeq	r4, r1, r4, asr r6
   1407c:	andeq	r4, r1, r8, lsr r3
   14080:	andeq	r4, r1, r0, lsr r3
   14084:	andeq	r4, r1, r4, asr #6
   14088:	andeq	r4, r1, r4, ror r4
   1408c:	andeq	r4, r1, r8, lsr #6
   14090:	andeq	r4, r1, r0, asr #6
   14094:	andeq	r4, r1, r0, lsr #11
   14098:	andeq	r4, r1, r0, lsr #11
   1409c:	andeq	r4, r1, r0, lsr #11
   140a0:	andeq	r4, r1, r0, lsr #11
   140a4:	andeq	r4, r1, r0, lsr #11
   140a8:	andeq	r4, r1, r0, lsr #11
   140ac:	andeq	r4, r1, r0, lsr #11
   140b0:	andeq	r4, r1, r0, lsr #11
   140b4:	andeq	r4, r1, r0, lsr #11
   140b8:	andeq	r4, r1, r0, lsr #11
   140bc:	andeq	r4, r1, r0, lsr #11
   140c0:	andeq	r4, r1, r0, lsr #11
   140c4:	andeq	r4, r1, r0, lsr #11
   140c8:	andeq	r4, r1, r0, lsr #11
   140cc:	andeq	r4, r1, r0, lsr #11
   140d0:	andeq	r4, r1, r0, lsr #11
   140d4:	andeq	r4, r1, r0, lsr #11
   140d8:	andeq	r4, r1, r0, lsr #11
   140dc:	andeq	r4, r1, ip, asr #5
   140e0:	ldrdeq	r4, [r1], -r0
   140e4:	ldrdeq	r4, [r1], -r0
   140e8:	andeq	r4, r1, r0, asr #5
   140ec:	ldrdeq	r4, [r1], -r0
   140f0:	andeq	r4, r1, r8, asr r2
   140f4:	ldrdeq	r4, [r1], -r0
   140f8:	andeq	r4, r1, ip, ror r4
   140fc:	ldrdeq	r4, [r1], -r0
   14100:	ldrdeq	r4, [r1], -r0
   14104:	ldrdeq	r4, [r1], -r0
   14108:	andeq	r4, r1, r8, asr r2
   1410c:	andeq	r4, r1, r8, asr r2
   14110:	andeq	r4, r1, r8, asr r2
   14114:	andeq	r4, r1, r8, asr r2
   14118:	andeq	r4, r1, r8, asr r2
   1411c:	andeq	r4, r1, r8, asr r2
   14120:	andeq	r4, r1, r8, asr r2
   14124:	andeq	r4, r1, r8, asr r2
   14128:	andeq	r4, r1, r8, asr r2
   1412c:	andeq	r4, r1, r8, asr r2
   14130:	andeq	r4, r1, r8, asr r2
   14134:	andeq	r4, r1, r8, asr r2
   14138:	andeq	r4, r1, r8, asr r2
   1413c:	andeq	r4, r1, r8, asr r2
   14140:	andeq	r4, r1, r8, asr r2
   14144:	andeq	r4, r1, r8, asr r2
   14148:	ldrdeq	r4, [r1], -r0
   1414c:	ldrdeq	r4, [r1], -r0
   14150:	ldrdeq	r4, [r1], -r0
   14154:	ldrdeq	r4, [r1], -r0
   14158:	andeq	r4, r1, r0, asr #8
   1415c:	andeq	r4, r1, r0, lsr #11
   14160:	andeq	r4, r1, r8, asr r2
   14164:	andeq	r4, r1, r8, asr r2
   14168:	andeq	r4, r1, r8, asr r2
   1416c:	andeq	r4, r1, r8, asr r2
   14170:	andeq	r4, r1, r8, asr r2
   14174:	andeq	r4, r1, r8, asr r2
   14178:	andeq	r4, r1, r8, asr r2
   1417c:	andeq	r4, r1, r8, asr r2
   14180:	andeq	r4, r1, r8, asr r2
   14184:	andeq	r4, r1, r8, asr r2
   14188:	andeq	r4, r1, r8, asr r2
   1418c:	andeq	r4, r1, r8, asr r2
   14190:	andeq	r4, r1, r8, asr r2
   14194:	andeq	r4, r1, r8, asr r2
   14198:	andeq	r4, r1, r8, asr r2
   1419c:	andeq	r4, r1, r8, asr r2
   141a0:	andeq	r4, r1, r8, asr r2
   141a4:	andeq	r4, r1, r8, asr r2
   141a8:	andeq	r4, r1, r8, asr r2
   141ac:	andeq	r4, r1, r8, asr r2
   141b0:	andeq	r4, r1, r8, asr r2
   141b4:	andeq	r4, r1, r8, asr r2
   141b8:	andeq	r4, r1, r8, asr r2
   141bc:	andeq	r4, r1, r8, asr r2
   141c0:	andeq	r4, r1, r8, asr r2
   141c4:	andeq	r4, r1, r8, asr r2
   141c8:	ldrdeq	r4, [r1], -r0
   141cc:	andeq	r4, r1, r4, lsl #6
   141d0:	andeq	r4, r1, r8, asr r2
   141d4:	ldrdeq	r4, [r1], -r0
   141d8:	andeq	r4, r1, r8, asr r2
   141dc:	ldrdeq	r4, [r1], -r0
   141e0:	andeq	r4, r1, r8, asr r2
   141e4:	andeq	r4, r1, r8, asr r2
   141e8:	andeq	r4, r1, r8, asr r2
   141ec:	andeq	r4, r1, r8, asr r2
   141f0:	andeq	r4, r1, r8, asr r2
   141f4:	andeq	r4, r1, r8, asr r2
   141f8:	andeq	r4, r1, r8, asr r2
   141fc:	andeq	r4, r1, r8, asr r2
   14200:	andeq	r4, r1, r8, asr r2
   14204:	andeq	r4, r1, r8, asr r2
   14208:	andeq	r4, r1, r8, asr r2
   1420c:	andeq	r4, r1, r8, asr r2
   14210:	andeq	r4, r1, r8, asr r2
   14214:	andeq	r4, r1, r8, asr r2
   14218:	andeq	r4, r1, r8, asr r2
   1421c:	andeq	r4, r1, r8, asr r2
   14220:	andeq	r4, r1, r8, asr r2
   14224:	andeq	r4, r1, r8, asr r2
   14228:	andeq	r4, r1, r8, asr r2
   1422c:	andeq	r4, r1, r8, asr r2
   14230:	andeq	r4, r1, r8, asr r2
   14234:	andeq	r4, r1, r8, asr r2
   14238:	andeq	r4, r1, r8, asr r2
   1423c:	andeq	r4, r1, r8, asr r2
   14240:	andeq	r4, r1, r8, asr r2
   14244:	andeq	r4, r1, r8, asr r2
   14248:	muleq	r1, r8, r2
   1424c:	ldrdeq	r4, [r1], -r0
   14250:	muleq	r1, r8, r2
   14254:	andeq	r4, r1, r0, asr #5
   14258:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1425c:	tst	r0, #1
   14260:	bne	14518 <__assert_fail@plt+0x3460>
   14264:	ldr	r1, [fp, #16]
   14268:	ubfx	r0, r6, #5, #3
   1426c:	mov	r2, #1
   14270:	ldr	r0, [r1, r0, lsl #2]
   14274:	and	r1, r6, #31
   14278:	tst	r0, r2, lsl r1
   1427c:	beq	14518 <__assert_fail@plt+0x3460>
   14280:	mov	r0, r6
   14284:	mov	r1, r8
   14288:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1428c:	tst	r2, #1
   14290:	beq	14538 <__assert_fail@plt+0x3480>
   14294:	b	14c94 <__assert_fail@plt+0x3bdc>
   14298:	cmp	r7, #1
   1429c:	beq	142c0 <__assert_fail@plt+0x3208>
   142a0:	mov	r8, #0
   142a4:	cmn	r7, #1
   142a8:	bne	14504 <__assert_fail@plt+0x344c>
   142ac:	ldrb	r0, [lr, #1]
   142b0:	cmp	r0, #0
   142b4:	beq	142c0 <__assert_fail@plt+0x3208>
   142b8:	mvn	r7, #0
   142bc:	b	14504 <__assert_fail@plt+0x344c>
   142c0:	mov	r8, #0
   142c4:	cmp	sl, #0
   142c8:	bne	14504 <__assert_fail@plt+0x344c>
   142cc:	mov	r1, #1
   142d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   142d4:	cmp	r0, #2
   142d8:	bne	142f0 <__assert_fail@plt+0x3238>
   142dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   142e0:	mov	r8, r1
   142e4:	tst	r0, #1
   142e8:	beq	14258 <__assert_fail@plt+0x31a0>
   142ec:	b	14c94 <__assert_fail@plt+0x3bdc>
   142f0:	mov	r8, r1
   142f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   142f8:	tst	r0, #1
   142fc:	beq	14264 <__assert_fail@plt+0x31ac>
   14300:	b	14518 <__assert_fail@plt+0x3460>
   14304:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14308:	cmp	r0, #2
   1430c:	bne	145cc <__assert_fail@plt+0x3514>
   14310:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14314:	tst	r0, #1
   14318:	bne	14c94 <__assert_fail@plt+0x3bdc>
   1431c:	mov	r0, #0
   14320:	str	r0, [fp, #-56]	; 0xffffffc8
   14324:	b	145e4 <__assert_fail@plt+0x352c>
   14328:	mov	r0, #102	; 0x66
   1432c:	b	14654 <__assert_fail@plt+0x359c>
   14330:	mov	r2, #116	; 0x74
   14334:	b	14344 <__assert_fail@plt+0x328c>
   14338:	mov	r0, #98	; 0x62
   1433c:	b	14654 <__assert_fail@plt+0x359c>
   14340:	mov	r2, #114	; 0x72
   14344:	ldr	r0, [sp, #64]	; 0x40
   14348:	tst	r0, #1
   1434c:	mov	r0, r2
   14350:	bne	14654 <__assert_fail@plt+0x359c>
   14354:	b	14c94 <__assert_fail@plt+0x3bdc>
   14358:	ldr	r0, [sp, #88]	; 0x58
   1435c:	tst	r0, #1
   14360:	beq	14674 <__assert_fail@plt+0x35bc>
   14364:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14368:	tst	r0, #1
   1436c:	bne	14dd0 <__assert_fail@plt+0x3d18>
   14370:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14374:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14378:	subs	r0, r0, #2
   1437c:	movwne	r0, #1
   14380:	orr	r0, r0, r1
   14384:	tst	r0, #1
   14388:	bne	143c4 <__assert_fail@plt+0x330c>
   1438c:	cmp	r9, r5
   14390:	movcc	r0, #39	; 0x27
   14394:	strbcc	r0, [ip, r9]
   14398:	add	r0, r9, #1
   1439c:	cmp	r0, r5
   143a0:	movcc	r1, #36	; 0x24
   143a4:	strbcc	r1, [ip, r0]
   143a8:	add	r0, r9, #2
   143ac:	add	r9, r9, #3
   143b0:	cmp	r0, r5
   143b4:	movcc	r1, #39	; 0x27
   143b8:	strbcc	r1, [ip, r0]
   143bc:	mov	r0, #1
   143c0:	str	r0, [fp, #-52]	; 0xffffffcc
   143c4:	mov	r1, #1
   143c8:	cmp	r9, r5
   143cc:	mov	r8, #0
   143d0:	mov	r6, #48	; 0x30
   143d4:	str	r1, [fp, #-56]	; 0xffffffc8
   143d8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   143dc:	movcc	r0, #92	; 0x5c
   143e0:	strbcc	r0, [ip, r9]
   143e4:	add	r0, r9, #1
   143e8:	cmp	r1, #2
   143ec:	beq	14840 <__assert_fail@plt+0x3788>
   143f0:	add	r1, sl, #1
   143f4:	cmp	r1, r7
   143f8:	bcs	14840 <__assert_fail@plt+0x3788>
   143fc:	ldrb	r1, [lr, r1]
   14400:	sub	r1, r1, #48	; 0x30
   14404:	uxtb	r1, r1
   14408:	cmp	r1, #9
   1440c:	bhi	14840 <__assert_fail@plt+0x3788>
   14410:	cmp	r0, r5
   14414:	movcc	r1, #48	; 0x30
   14418:	strbcc	r1, [ip, r0]
   1441c:	add	r0, r9, #2
   14420:	add	r9, r9, #3
   14424:	cmp	r0, r5
   14428:	movcc	r1, #48	; 0x30
   1442c:	strbcc	r1, [ip, r0]
   14430:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14434:	tst	r0, #1
   14438:	beq	14264 <__assert_fail@plt+0x31ac>
   1443c:	b	14518 <__assert_fail@plt+0x3460>
   14440:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14444:	mov	r6, #63	; 0x3f
   14448:	cmp	r0, #5
   1444c:	beq	14854 <__assert_fail@plt+0x379c>
   14450:	mov	r1, #0
   14454:	cmp	r0, #2
   14458:	str	r1, [fp, #-56]	; 0xffffffc8
   1445c:	bne	1491c <__assert_fail@plt+0x3864>
   14460:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14464:	mov	r8, #0
   14468:	tst	r0, #1
   1446c:	beq	14258 <__assert_fail@plt+0x31a0>
   14470:	b	14c94 <__assert_fail@plt+0x3bdc>
   14474:	mov	r0, #118	; 0x76
   14478:	b	14654 <__assert_fail@plt+0x359c>
   1447c:	mov	r0, #1
   14480:	mov	r6, #39	; 0x27
   14484:	str	r0, [sp, #60]	; 0x3c
   14488:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1448c:	cmp	r0, #2
   14490:	bne	14694 <__assert_fail@plt+0x35dc>
   14494:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14498:	tst	r0, #1
   1449c:	bne	14c94 <__assert_fail@plt+0x3bdc>
   144a0:	ldr	r2, [sp, #56]	; 0x38
   144a4:	clz	r1, r5
   144a8:	mov	r8, #1
   144ac:	lsr	r1, r1, #5
   144b0:	cmp	r2, #0
   144b4:	mov	r0, r2
   144b8:	movwne	r0, #1
   144bc:	orrs	r0, r0, r1
   144c0:	moveq	r2, r5
   144c4:	moveq	r5, r0
   144c8:	cmp	r9, r5
   144cc:	str	r2, [sp, #56]	; 0x38
   144d0:	movcc	r0, #39	; 0x27
   144d4:	strbcc	r0, [ip, r9]
   144d8:	add	r0, r9, #1
   144dc:	cmp	r0, r5
   144e0:	movcc	r1, #92	; 0x5c
   144e4:	strbcc	r1, [ip, r0]
   144e8:	add	r0, r9, #2
   144ec:	add	r9, r9, #3
   144f0:	cmp	r0, r5
   144f4:	movcc	r1, #39	; 0x27
   144f8:	strbcc	r1, [ip, r0]
   144fc:	mov	r0, #0
   14500:	str	r0, [fp, #-52]	; 0xffffffcc
   14504:	mov	r0, #0
   14508:	str	r0, [fp, #-56]	; 0xffffffc8
   1450c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14510:	tst	r0, #1
   14514:	beq	14264 <__assert_fail@plt+0x31ac>
   14518:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1451c:	mov	r1, r8
   14520:	cmp	r0, #0
   14524:	mov	r0, r6
   14528:	beq	145ec <__assert_fail@plt+0x3534>
   1452c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14530:	tst	r2, #1
   14534:	bne	14c94 <__assert_fail@plt+0x3bdc>
   14538:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1453c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14540:	subs	r2, r2, #2
   14544:	movwne	r2, #1
   14548:	orr	r2, r2, r3
   1454c:	tst	r2, #1
   14550:	bne	1458c <__assert_fail@plt+0x34d4>
   14554:	cmp	r9, r5
   14558:	movcc	r2, #39	; 0x27
   1455c:	strbcc	r2, [ip, r9]
   14560:	add	r2, r9, #1
   14564:	cmp	r2, r5
   14568:	movcc	r3, #36	; 0x24
   1456c:	strbcc	r3, [ip, r2]
   14570:	add	r2, r9, #2
   14574:	add	r9, r9, #3
   14578:	cmp	r2, r5
   1457c:	movcc	r3, #39	; 0x27
   14580:	strbcc	r3, [ip, r2]
   14584:	mov	r2, #1
   14588:	str	r2, [fp, #-52]	; 0xffffffcc
   1458c:	cmp	r9, r5
   14590:	movcc	r2, #92	; 0x5c
   14594:	strbcc	r2, [ip, r9]
   14598:	add	r9, r9, #1
   1459c:	b	14634 <__assert_fail@plt+0x357c>
   145a0:	ldr	r0, [sp, #40]	; 0x28
   145a4:	cmp	r0, #1
   145a8:	bne	146a8 <__assert_fail@plt+0x35f0>
   145ac:	bl	10fa4 <__ctype_b_loc@plt>
   145b0:	ldr	r0, [r0]
   145b4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   145b8:	mov	r1, #1
   145bc:	add	r0, r0, r6, lsl #1
   145c0:	ldrb	r0, [r0, #1]
   145c4:	ubfx	r8, r0, #6, #1
   145c8:	b	14a00 <__assert_fail@plt+0x3948>
   145cc:	ldr	r1, [sp, #48]	; 0x30
   145d0:	mov	r0, #0
   145d4:	str	r0, [fp, #-56]	; 0xffffffc8
   145d8:	mov	r0, #92	; 0x5c
   145dc:	cmp	r1, #0
   145e0:	beq	14654 <__assert_fail@plt+0x359c>
   145e4:	mov	r6, #92	; 0x5c
   145e8:	mov	r8, #0
   145ec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   145f0:	cmp	r0, #0
   145f4:	bne	1462c <__assert_fail@plt+0x3574>
   145f8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   145fc:	tst	r0, #1
   14600:	beq	1462c <__assert_fail@plt+0x3574>
   14604:	cmp	r9, r5
   14608:	movcc	r0, #39	; 0x27
   1460c:	strbcc	r0, [ip, r9]
   14610:	add	r0, r9, #1
   14614:	add	r9, r9, #2
   14618:	cmp	r0, r5
   1461c:	movcc	r1, #39	; 0x27
   14620:	strbcc	r1, [ip, r0]
   14624:	mov	r0, #0
   14628:	str	r0, [fp, #-52]	; 0xffffffcc
   1462c:	mov	r1, r8
   14630:	mov	r0, r6
   14634:	cmp	r9, r5
   14638:	and	r4, r4, r1
   1463c:	strbcc	r0, [ip, r9]
   14640:	add	r9, r9, #1
   14644:	add	sl, sl, #1
   14648:	cmn	r7, #1
   1464c:	bne	13f44 <__assert_fail@plt+0x2e8c>
   14650:	b	13f50 <__assert_fail@plt+0x2e98>
   14654:	mov	r1, #0
   14658:	mov	r8, #0
   1465c:	str	r1, [fp, #-56]	; 0xffffffc8
   14660:	ldr	r1, [sp, #88]	; 0x58
   14664:	tst	r1, #1
   14668:	mov	r1, #0
   1466c:	beq	14258 <__assert_fail@plt+0x31a0>
   14670:	b	1452c <__assert_fail@plt+0x3474>
   14674:	ldr	r0, [sp, #36]	; 0x24
   14678:	mov	r6, #0
   1467c:	mov	r8, #0
   14680:	cmp	r0, #0
   14684:	mov	r0, #0
   14688:	str	r0, [fp, #-56]	; 0xffffffc8
   1468c:	bne	14644 <__assert_fail@plt+0x358c>
   14690:	b	14258 <__assert_fail@plt+0x31a0>
   14694:	mov	r8, #1
   14698:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1469c:	tst	r0, #1
   146a0:	beq	14264 <__assert_fail@plt+0x31ac>
   146a4:	b	14518 <__assert_fail@plt+0x3460>
   146a8:	mov	r0, #0
   146ac:	cmn	r7, #1
   146b0:	str	r0, [fp, #-36]	; 0xffffffdc
   146b4:	str	r0, [fp, #-40]	; 0xffffffd8
   146b8:	bne	146cc <__assert_fail@plt+0x3614>
   146bc:	mov	r0, lr
   146c0:	bl	10fc8 <strlen@plt>
   146c4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   146c8:	mov	r7, r0
   146cc:	ldr	r0, [sp, #44]	; 0x2c
   146d0:	str	r4, [sp, #84]	; 0x54
   146d4:	str	r5, [sp, #28]
   146d8:	cmp	r0, #0
   146dc:	beq	14930 <__assert_fail@plt+0x3878>
   146e0:	ldr	r0, [sp, #80]	; 0x50
   146e4:	mov	r8, #1
   146e8:	mov	r5, #0
   146ec:	add	r0, r0, sl
   146f0:	str	r0, [sp, #24]
   146f4:	sub	r0, fp, #40	; 0x28
   146f8:	mov	r3, r0
   146fc:	b	14738 <__assert_fail@plt+0x3680>
   14700:	ldr	r5, [sp, #68]	; 0x44
   14704:	add	r5, r0, r5
   14708:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1470c:	bl	10efc <iswprint@plt>
   14710:	cmp	r0, #0
   14714:	sub	r4, fp, #40	; 0x28
   14718:	movwne	r0, #1
   1471c:	and	r8, r8, r0
   14720:	mov	r0, r4
   14724:	bl	10eb4 <mbsinit@plt>
   14728:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1472c:	mov	r3, r4
   14730:	cmp	r0, #0
   14734:	bne	149f4 <__assert_fail@plt+0x393c>
   14738:	str	r5, [sp, #68]	; 0x44
   1473c:	add	r5, r5, sl
   14740:	sub	r0, fp, #44	; 0x2c
   14744:	add	r1, lr, r5
   14748:	sub	r2, r7, r5
   1474c:	bl	17554 <__assert_fail@plt+0x649c>
   14750:	cmn	r0, #2
   14754:	beq	149b4 <__assert_fail@plt+0x38fc>
   14758:	ldr	ip, [fp, #-84]	; 0xffffffac
   1475c:	cmn	r0, #1
   14760:	beq	149a8 <__assert_fail@plt+0x38f0>
   14764:	cmp	r0, #0
   14768:	beq	149ac <__assert_fail@plt+0x38f4>
   1476c:	cmp	r0, #2
   14770:	bcc	14700 <__assert_fail@plt+0x3648>
   14774:	ldr	r1, [sp, #68]	; 0x44
   14778:	ldr	r2, [sp, #24]
   1477c:	add	r1, r2, r1
   14780:	sub	r2, r0, #1
   14784:	ldrb	r3, [r1]
   14788:	sub	r3, r3, #91	; 0x5b
   1478c:	cmp	r3, #33	; 0x21
   14790:	bls	147b0 <__assert_fail@plt+0x36f8>
   14794:	add	r1, r1, #1
   14798:	subs	r2, r2, #1
   1479c:	beq	14700 <__assert_fail@plt+0x3648>
   147a0:	ldrb	r3, [r1]
   147a4:	sub	r3, r3, #91	; 0x5b
   147a8:	cmp	r3, #33	; 0x21
   147ac:	bhi	14794 <__assert_fail@plt+0x36dc>
   147b0:	add	r5, pc, #0
   147b4:	ldr	pc, [r5, r3, lsl #2]
   147b8:	andeq	r4, r1, ip, asr #25
   147bc:	andeq	r4, r1, ip, asr #25
   147c0:	muleq	r1, r4, r7
   147c4:	andeq	r4, r1, ip, asr #25
   147c8:	muleq	r1, r4, r7
   147cc:	andeq	r4, r1, ip, asr #25
   147d0:	muleq	r1, r4, r7
   147d4:	muleq	r1, r4, r7
   147d8:	muleq	r1, r4, r7
   147dc:	muleq	r1, r4, r7
   147e0:	muleq	r1, r4, r7
   147e4:	muleq	r1, r4, r7
   147e8:	muleq	r1, r4, r7
   147ec:	muleq	r1, r4, r7
   147f0:	muleq	r1, r4, r7
   147f4:	muleq	r1, r4, r7
   147f8:	muleq	r1, r4, r7
   147fc:	muleq	r1, r4, r7
   14800:	muleq	r1, r4, r7
   14804:	muleq	r1, r4, r7
   14808:	muleq	r1, r4, r7
   1480c:	muleq	r1, r4, r7
   14810:	muleq	r1, r4, r7
   14814:	muleq	r1, r4, r7
   14818:	muleq	r1, r4, r7
   1481c:	muleq	r1, r4, r7
   14820:	muleq	r1, r4, r7
   14824:	muleq	r1, r4, r7
   14828:	muleq	r1, r4, r7
   1482c:	muleq	r1, r4, r7
   14830:	muleq	r1, r4, r7
   14834:	muleq	r1, r4, r7
   14838:	muleq	r1, r4, r7
   1483c:	andeq	r4, r1, ip, asr #25
   14840:	mov	r9, r0
   14844:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14848:	tst	r0, #1
   1484c:	beq	14264 <__assert_fail@plt+0x31ac>
   14850:	b	14518 <__assert_fail@plt+0x3460>
   14854:	mov	r0, #0
   14858:	str	r0, [fp, #-56]	; 0xffffffc8
   1485c:	ldr	r0, [sp, #32]
   14860:	cmp	r0, #0
   14864:	beq	1491c <__assert_fail@plt+0x3864>
   14868:	add	r0, sl, #2
   1486c:	mov	r1, r7
   14870:	cmp	r0, r7
   14874:	bcs	1491c <__assert_fail@plt+0x3864>
   14878:	add	r1, sl, lr
   1487c:	ldrb	r1, [r1, #1]
   14880:	cmp	r1, #63	; 0x3f
   14884:	bne	1491c <__assert_fail@plt+0x3864>
   14888:	ldrb	r8, [lr, r0]
   1488c:	sub	r2, r8, #33	; 0x21
   14890:	cmp	r2, #29
   14894:	bhi	1491c <__assert_fail@plt+0x3864>
   14898:	mov	r1, r4
   1489c:	movw	r4, #20929	; 0x51c1
   148a0:	mov	r3, #1
   148a4:	movt	r4, #14336	; 0x3800
   148a8:	tst	r4, r3, lsl r2
   148ac:	beq	14bd8 <__assert_fail@plt+0x3b20>
   148b0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   148b4:	tst	r2, #1
   148b8:	bne	14c94 <__assert_fail@plt+0x3bdc>
   148bc:	cmp	r9, r5
   148c0:	mov	r6, r8
   148c4:	mov	r4, r1
   148c8:	mov	sl, r0
   148cc:	mov	r8, #0
   148d0:	movcc	r2, #63	; 0x3f
   148d4:	strbcc	r2, [ip, r9]
   148d8:	add	r2, r9, #1
   148dc:	cmp	r2, r5
   148e0:	movcc	r3, #34	; 0x22
   148e4:	strbcc	r3, [ip, r2]
   148e8:	add	r2, r9, #2
   148ec:	cmp	r2, r5
   148f0:	movcc	r3, #34	; 0x22
   148f4:	strbcc	r3, [ip, r2]
   148f8:	add	r2, r9, #3
   148fc:	add	r9, r9, #4
   14900:	cmp	r2, r5
   14904:	movcc	r3, #63	; 0x3f
   14908:	strbcc	r3, [ip, r2]
   1490c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14910:	tst	r0, #1
   14914:	beq	14264 <__assert_fail@plt+0x31ac>
   14918:	b	14518 <__assert_fail@plt+0x3460>
   1491c:	mov	r8, #0
   14920:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14924:	tst	r0, #1
   14928:	beq	14264 <__assert_fail@plt+0x31ac>
   1492c:	b	14518 <__assert_fail@plt+0x3460>
   14930:	mov	r8, #1
   14934:	mov	r5, #0
   14938:	sub	r4, fp, #40	; 0x28
   1493c:	str	r5, [sp, #68]	; 0x44
   14940:	add	r5, r5, sl
   14944:	sub	r0, fp, #44	; 0x2c
   14948:	mov	r3, r4
   1494c:	add	r1, lr, r5
   14950:	sub	r2, r7, r5
   14954:	bl	17554 <__assert_fail@plt+0x649c>
   14958:	cmn	r0, #2
   1495c:	beq	149b4 <__assert_fail@plt+0x38fc>
   14960:	cmn	r0, #1
   14964:	beq	149a8 <__assert_fail@plt+0x38f0>
   14968:	ldr	r5, [sp, #68]	; 0x44
   1496c:	cmp	r0, #0
   14970:	beq	149f0 <__assert_fail@plt+0x3938>
   14974:	add	r5, r0, r5
   14978:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1497c:	bl	10efc <iswprint@plt>
   14980:	cmp	r0, #0
   14984:	sub	r4, fp, #40	; 0x28
   14988:	movwne	r0, #1
   1498c:	and	r8, r8, r0
   14990:	mov	r0, r4
   14994:	bl	10eb4 <mbsinit@plt>
   14998:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1499c:	cmp	r0, #0
   149a0:	beq	1493c <__assert_fail@plt+0x3884>
   149a4:	b	149f4 <__assert_fail@plt+0x393c>
   149a8:	mov	r8, #0
   149ac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   149b0:	b	149e8 <__assert_fail@plt+0x3930>
   149b4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   149b8:	mov	r8, #0
   149bc:	cmp	r5, r7
   149c0:	bcs	149e8 <__assert_fail@plt+0x3930>
   149c4:	ldrb	r0, [lr, r5]
   149c8:	cmp	r0, #0
   149cc:	beq	149e8 <__assert_fail@plt+0x3930>
   149d0:	ldr	r0, [sp, #68]	; 0x44
   149d4:	add	r0, r0, #1
   149d8:	add	r5, r0, sl
   149dc:	str	r0, [sp, #68]	; 0x44
   149e0:	cmp	r5, r7
   149e4:	bcc	149c4 <__assert_fail@plt+0x390c>
   149e8:	ldr	r5, [sp, #68]	; 0x44
   149ec:	b	149f4 <__assert_fail@plt+0x393c>
   149f0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   149f4:	mov	r1, r5
   149f8:	ldr	r5, [sp, #28]
   149fc:	ldr	r4, [sp, #84]	; 0x54
   14a00:	ldr	r0, [sp, #52]	; 0x34
   14a04:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a08:	cmp	r1, #1
   14a0c:	orr	r2, r8, r0
   14a10:	mov	r0, r1
   14a14:	bhi	14a20 <__assert_fail@plt+0x3968>
   14a18:	tst	r2, #1
   14a1c:	bne	14258 <__assert_fail@plt+0x31a0>
   14a20:	add	r0, r0, sl
   14a24:	str	r2, [sp, #84]	; 0x54
   14a28:	str	r0, [fp, #-56]	; 0xffffffc8
   14a2c:	mov	r0, #0
   14a30:	tst	r2, #1
   14a34:	bne	14b14 <__assert_fail@plt+0x3a5c>
   14a38:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14a3c:	tst	r1, #1
   14a40:	bne	14c94 <__assert_fail@plt+0x3bdc>
   14a44:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14a48:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14a4c:	subs	r2, r1, #2
   14a50:	movwne	r2, #1
   14a54:	orr	r2, r2, r0
   14a58:	tst	r2, #1
   14a5c:	bne	14a98 <__assert_fail@plt+0x39e0>
   14a60:	cmp	r9, r5
   14a64:	add	r2, r9, #1
   14a68:	mov	r0, #1
   14a6c:	movcc	r1, #39	; 0x27
   14a70:	str	r0, [fp, #-52]	; 0xffffffcc
   14a74:	strbcc	r1, [ip, r9]
   14a78:	cmp	r2, r5
   14a7c:	movcc	r1, #36	; 0x24
   14a80:	strbcc	r1, [ip, r2]
   14a84:	add	r2, r9, #2
   14a88:	add	r9, r9, #3
   14a8c:	cmp	r2, r5
   14a90:	movcc	r1, #39	; 0x27
   14a94:	strbcc	r1, [ip, r2]
   14a98:	cmp	r9, r5
   14a9c:	add	r2, r9, #1
   14aa0:	movcc	r1, #92	; 0x5c
   14aa4:	strbcc	r1, [ip, r9]
   14aa8:	cmp	r2, r5
   14aac:	bcs	14ac0 <__assert_fail@plt+0x3a08>
   14ab0:	uxtb	r3, r6
   14ab4:	mov	r1, #48	; 0x30
   14ab8:	orr	r3, r1, r3, lsr #6
   14abc:	strb	r3, [ip, r2]
   14ac0:	add	r2, r9, #2
   14ac4:	add	r9, r9, #3
   14ac8:	cmp	r2, r5
   14acc:	lsrcc	r3, r6, #3
   14ad0:	movcc	r1, #6
   14ad4:	bficc	r3, r1, #3, #29
   14ad8:	mov	r1, #6
   14adc:	bfi	r6, r1, #3, #29
   14ae0:	strbcc	r3, [ip, r2]
   14ae4:	mov	r2, #1
   14ae8:	b	14b48 <__assert_fail@plt+0x3a90>
   14aec:	ldr	r1, [sp, #80]	; 0x50
   14af0:	cmp	r9, r2
   14af4:	mov	r5, r2
   14af8:	ldr	r2, [sp, #84]	; 0x54
   14afc:	strbcc	r6, [ip, r9]
   14b00:	add	r9, r9, #1
   14b04:	ldrb	r6, [r1, sl]
   14b08:	mov	sl, r3
   14b0c:	tst	r2, #1
   14b10:	beq	14a38 <__assert_fail@plt+0x3980>
   14b14:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14b18:	tst	r1, #1
   14b1c:	beq	14b3c <__assert_fail@plt+0x3a84>
   14b20:	cmp	r9, r5
   14b24:	mov	r2, r0
   14b28:	movcc	r1, #92	; 0x5c
   14b2c:	strbcc	r1, [ip, r9]
   14b30:	add	r9, r9, #1
   14b34:	mov	r1, #0
   14b38:	b	14b44 <__assert_fail@plt+0x3a8c>
   14b3c:	mov	r1, #0
   14b40:	mov	r2, r0
   14b44:	str	r1, [fp, #-48]	; 0xffffffd0
   14b48:	mov	r0, r2
   14b4c:	and	r1, r2, #1
   14b50:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14b54:	add	r3, sl, #1
   14b58:	cmp	r2, r3
   14b5c:	bls	14bbc <__assert_fail@plt+0x3b04>
   14b60:	mov	r2, r5
   14b64:	ldr	r5, [fp, #-52]	; 0xffffffcc
   14b68:	cmp	r1, #0
   14b6c:	movwne	r1, #1
   14b70:	mvn	r5, r5
   14b74:	orr	r5, r5, r1
   14b78:	tst	r5, #1
   14b7c:	bne	14aec <__assert_fail@plt+0x3a34>
   14b80:	cmp	r9, r2
   14b84:	movcc	r5, r4
   14b88:	movcc	r4, #39	; 0x27
   14b8c:	strbcc	r4, [ip, r9]
   14b90:	movcc	r4, r5
   14b94:	add	r5, r9, #1
   14b98:	add	r9, r9, #2
   14b9c:	cmp	r5, r2
   14ba0:	movcc	r1, r4
   14ba4:	movcc	r4, #39	; 0x27
   14ba8:	strbcc	r4, [ip, r5]
   14bac:	movcc	r4, r1
   14bb0:	mov	r1, #0
   14bb4:	str	r1, [fp, #-52]	; 0xffffffcc
   14bb8:	b	14aec <__assert_fail@plt+0x3a34>
   14bbc:	cmp	r1, #0
   14bc0:	movwne	r1, #1
   14bc4:	str	r1, [fp, #-56]	; 0xffffffc8
   14bc8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14bcc:	cmp	r0, #0
   14bd0:	beq	145f8 <__assert_fail@plt+0x3540>
   14bd4:	b	1462c <__assert_fail@plt+0x3574>
   14bd8:	mov	r8, #0
   14bdc:	mov	r4, r1
   14be0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14be4:	tst	r0, #1
   14be8:	beq	14264 <__assert_fail@plt+0x31ac>
   14bec:	b	14518 <__assert_fail@plt+0x3460>
   14bf0:	mov	r7, sl
   14bf4:	b	14bfc <__assert_fail@plt+0x3b44>
   14bf8:	mvn	r7, #0
   14bfc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14c00:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14c04:	ldr	r2, [sp, #88]	; 0x58
   14c08:	eor	r0, r1, #2
   14c0c:	orr	r0, r0, r9
   14c10:	clz	r0, r0
   14c14:	lsr	r0, r0, #5
   14c18:	tst	r3, r0
   14c1c:	bne	14c94 <__assert_fail@plt+0x3bdc>
   14c20:	subs	r0, r1, #2
   14c24:	movwne	r0, #1
   14c28:	orr	r0, r3, r0
   14c2c:	tst	r0, #1
   14c30:	ldreq	r0, [sp, #60]	; 0x3c
   14c34:	eoreq	r0, r0, #1
   14c38:	tsteq	r0, #1
   14c3c:	bne	14d70 <__assert_fail@plt+0x3cb8>
   14c40:	tst	r4, #1
   14c44:	bne	14d34 <__assert_fail@plt+0x3c7c>
   14c48:	ldr	r6, [sp, #56]	; 0x38
   14c4c:	mov	r8, #0
   14c50:	cmp	r6, #0
   14c54:	beq	14d6c <__assert_fail@plt+0x3cb4>
   14c58:	mov	r1, #0
   14c5c:	mov	r4, #2
   14c60:	cmp	r5, #0
   14c64:	mov	r0, r2
   14c68:	mov	r3, #0
   14c6c:	str	r1, [sp, #84]	; 0x54
   14c70:	beq	13ab8 <__assert_fail@plt+0x2a00>
   14c74:	b	14d70 <__assert_fail@plt+0x3cb8>
   14c78:	movw	r0, #33685	; 0x8395
   14c7c:	movt	r0, #1
   14c80:	str	r0, [sp, #76]	; 0x4c
   14c84:	mov	r9, #0
   14c88:	tst	r8, #1
   14c8c:	beq	13d50 <__assert_fail@plt+0x2c98>
   14c90:	b	13e90 <__assert_fail@plt+0x2dd8>
   14c94:	ldr	r1, [sp, #88]	; 0x58
   14c98:	mov	r0, #2
   14c9c:	tst	r1, #1
   14ca0:	movwne	r0, #4
   14ca4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14ca8:	ldr	r1, [fp, #12]
   14cac:	cmp	r2, #2
   14cb0:	moveq	r2, r0
   14cb4:	b	14cec <__assert_fail@plt+0x3c34>
   14cb8:	ldr	ip, [fp, #-84]	; 0xffffffac
   14cbc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14cc0:	ldr	r1, [fp, #12]
   14cc4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14cc8:	b	14cec <__assert_fail@plt+0x3c34>
   14ccc:	ldr	r1, [sp, #88]	; 0x58
   14cd0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14cd4:	ldr	r5, [sp, #28]
   14cd8:	mov	r0, #2
   14cdc:	tst	r1, #1
   14ce0:	ldr	r1, [fp, #12]
   14ce4:	movwne	r0, #4
   14ce8:	mov	r2, r0
   14cec:	mov	r0, #0
   14cf0:	bic	r1, r1, #2
   14cf4:	str	r2, [sp]
   14cf8:	mov	r2, lr
   14cfc:	str	r0, [sp, #8]
   14d00:	ldr	r0, [sp, #72]	; 0x48
   14d04:	str	r1, [sp, #4]
   14d08:	mov	r1, r5
   14d0c:	str	r0, [sp, #12]
   14d10:	ldr	r0, [sp, #76]	; 0x4c
   14d14:	str	r0, [sp, #16]
   14d18:	mov	r0, ip
   14d1c:	mov	r3, r7
   14d20:	bl	13a2c <__assert_fail@plt+0x2974>
   14d24:	mov	r9, r0
   14d28:	mov	r0, r9
   14d2c:	sub	sp, fp, #28
   14d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d34:	mov	r0, #5
   14d38:	ldr	r1, [sp, #56]	; 0x38
   14d3c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14d40:	str	r0, [sp]
   14d44:	ldr	r0, [fp, #12]
   14d48:	str	r0, [sp, #4]
   14d4c:	ldr	r0, [fp, #16]
   14d50:	str	r0, [sp, #8]
   14d54:	ldr	r0, [sp, #72]	; 0x48
   14d58:	str	r0, [sp, #12]
   14d5c:	ldr	r0, [sp, #76]	; 0x4c
   14d60:	str	r0, [sp, #16]
   14d64:	ldr	r0, [fp, #-84]	; 0xffffffac
   14d68:	b	14d1c <__assert_fail@plt+0x3c64>
   14d6c:	mov	r3, #0
   14d70:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14d74:	cmp	r1, #0
   14d78:	beq	14db4 <__assert_fail@plt+0x3cfc>
   14d7c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14d80:	tst	r3, #1
   14d84:	bne	14db8 <__assert_fail@plt+0x3d00>
   14d88:	ldrb	r0, [r1]
   14d8c:	cmp	r0, #0
   14d90:	beq	14db8 <__assert_fail@plt+0x3d00>
   14d94:	add	r1, r1, #1
   14d98:	cmp	r9, r5
   14d9c:	strbcc	r0, [r2, r9]
   14da0:	add	r9, r9, #1
   14da4:	ldrb	r0, [r1], #1
   14da8:	cmp	r0, #0
   14dac:	bne	14d98 <__assert_fail@plt+0x3ce0>
   14db0:	b	14db8 <__assert_fail@plt+0x3d00>
   14db4:	ldr	r2, [fp, #-84]	; 0xffffffac
   14db8:	cmp	r9, r5
   14dbc:	movcc	r0, #0
   14dc0:	strbcc	r0, [r2, r9]
   14dc4:	mov	r0, r9
   14dc8:	sub	sp, fp, #28
   14dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dd0:	mov	r0, #4
   14dd4:	b	14ca4 <__assert_fail@plt+0x3bec>
   14dd8:	bl	110a0 <abort@plt>
   14ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14de0:	add	fp, sp, #28
   14de4:	sub	sp, sp, #28
   14de8:	movw	r5, #37224	; 0x9168
   14dec:	cmp	r2, #0
   14df0:	mov	r4, r1
   14df4:	mov	r7, r0
   14df8:	str	r0, [sp, #20]
   14dfc:	movt	r5, #2
   14e00:	movne	r5, r2
   14e04:	bl	10fec <__errno_location@plt>
   14e08:	mov	sl, r0
   14e0c:	ldr	r2, [r5, #40]	; 0x28
   14e10:	ldr	r3, [r5, #44]	; 0x2c
   14e14:	ldm	r5, {r0, r1}
   14e18:	orr	r8, r1, #1
   14e1c:	add	r9, r5, #8
   14e20:	mov	r1, #0
   14e24:	ldr	r6, [sl]
   14e28:	stm	sp, {r0, r8, r9}
   14e2c:	mov	r0, #0
   14e30:	str	r2, [sp, #12]
   14e34:	str	r3, [sp, #16]
   14e38:	mov	r2, r7
   14e3c:	mov	r3, r4
   14e40:	str	r6, [sp, #24]
   14e44:	mov	r6, r4
   14e48:	bl	13a2c <__assert_fail@plt+0x2974>
   14e4c:	add	r7, r0, #1
   14e50:	mov	r0, r7
   14e54:	bl	15f20 <__assert_fail@plt+0x4e68>
   14e58:	mov	r4, r0
   14e5c:	ldr	r0, [r5]
   14e60:	ldr	r2, [r5, #44]	; 0x2c
   14e64:	ldr	r1, [r5, #40]	; 0x28
   14e68:	mov	r3, r6
   14e6c:	stm	sp, {r0, r8, r9}
   14e70:	str	r2, [sp, #16]
   14e74:	ldr	r2, [sp, #20]
   14e78:	str	r1, [sp, #12]
   14e7c:	mov	r0, r4
   14e80:	mov	r1, r7
   14e84:	bl	13a2c <__assert_fail@plt+0x2974>
   14e88:	ldr	r0, [sp, #24]
   14e8c:	str	r0, [sl]
   14e90:	mov	r0, r4
   14e94:	sub	sp, fp, #28
   14e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ea0:	add	fp, sp, #28
   14ea4:	sub	sp, sp, #36	; 0x24
   14ea8:	movw	r8, #37224	; 0x9168
   14eac:	cmp	r3, #0
   14eb0:	mov	r4, r2
   14eb4:	str	r2, [sp, #24]
   14eb8:	mov	r5, r1
   14ebc:	mov	r6, r0
   14ec0:	str	r0, [sp, #20]
   14ec4:	movt	r8, #2
   14ec8:	movne	r8, r3
   14ecc:	bl	10fec <__errno_location@plt>
   14ed0:	str	r0, [sp, #28]
   14ed4:	ldr	r1, [r8, #40]	; 0x28
   14ed8:	ldr	r2, [r8, #44]	; 0x2c
   14edc:	ldr	r7, [r0]
   14ee0:	cmp	r4, #0
   14ee4:	add	sl, r8, #8
   14ee8:	mov	r0, #0
   14eec:	ldm	r8, {r3, r9}
   14ef0:	orreq	r9, r9, #1
   14ef4:	stm	sp, {r3, r9, sl}
   14ef8:	str	r1, [sp, #12]
   14efc:	str	r2, [sp, #16]
   14f00:	mov	r1, #0
   14f04:	mov	r2, r6
   14f08:	mov	r3, r5
   14f0c:	str	r7, [sp, #32]
   14f10:	mov	r7, r5
   14f14:	bl	13a2c <__assert_fail@plt+0x2974>
   14f18:	add	r4, r0, #1
   14f1c:	mov	r5, r0
   14f20:	mov	r0, r4
   14f24:	bl	15f20 <__assert_fail@plt+0x4e68>
   14f28:	mov	r6, r0
   14f2c:	ldr	r0, [r8]
   14f30:	ldr	r2, [r8, #44]	; 0x2c
   14f34:	ldr	r1, [r8, #40]	; 0x28
   14f38:	mov	r3, r7
   14f3c:	stm	sp, {r0, r9, sl}
   14f40:	str	r2, [sp, #16]
   14f44:	ldr	r2, [sp, #20]
   14f48:	str	r1, [sp, #12]
   14f4c:	mov	r0, r6
   14f50:	mov	r1, r4
   14f54:	bl	13a2c <__assert_fail@plt+0x2974>
   14f58:	ldr	r0, [sp, #24]
   14f5c:	ldr	r1, [sp, #32]
   14f60:	ldr	r2, [sp, #28]
   14f64:	cmp	r0, #0
   14f68:	str	r1, [r2]
   14f6c:	strne	r5, [r0]
   14f70:	mov	r0, r6
   14f74:	sub	sp, fp, #28
   14f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f7c:	push	{r4, r5, r6, r7, fp, lr}
   14f80:	add	fp, sp, #16
   14f84:	movw	r4, #37160	; 0x9128
   14f88:	movt	r4, #2
   14f8c:	ldrd	r6, [r4]
   14f90:	cmp	r7, #2
   14f94:	blt	14fc0 <__assert_fail@plt+0x3f08>
   14f98:	add	r5, r6, #12
   14f9c:	mov	r7, #0
   14fa0:	ldr	r0, [r5, r7, lsl #3]
   14fa4:	bl	13634 <__assert_fail@plt+0x257c>
   14fa8:	ldr	r1, [r4, #4]
   14fac:	add	r2, r7, #2
   14fb0:	add	r0, r7, #1
   14fb4:	mov	r7, r0
   14fb8:	cmp	r2, r1
   14fbc:	blt	14fa0 <__assert_fail@plt+0x3ee8>
   14fc0:	ldr	r0, [r6, #4]
   14fc4:	movw	r5, #37272	; 0x9198
   14fc8:	movt	r5, #2
   14fcc:	cmp	r0, r5
   14fd0:	beq	14fe4 <__assert_fail@plt+0x3f2c>
   14fd4:	bl	13634 <__assert_fail@plt+0x257c>
   14fd8:	mov	r0, #256	; 0x100
   14fdc:	str	r0, [r4, #8]
   14fe0:	str	r5, [r4, #12]
   14fe4:	add	r5, r4, #8
   14fe8:	cmp	r6, r5
   14fec:	beq	14ffc <__assert_fail@plt+0x3f44>
   14ff0:	mov	r0, r6
   14ff4:	bl	13634 <__assert_fail@plt+0x257c>
   14ff8:	str	r5, [r4]
   14ffc:	mov	r0, #1
   15000:	str	r0, [r4, #4]
   15004:	pop	{r4, r5, r6, r7, fp, pc}
   15008:	movw	r3, #37224	; 0x9168
   1500c:	mvn	r2, #0
   15010:	movt	r3, #2
   15014:	b	15018 <__assert_fail@plt+0x3f60>
   15018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1501c:	add	fp, sp, #28
   15020:	sub	sp, sp, #44	; 0x2c
   15024:	mov	r7, r3
   15028:	str	r2, [sp, #36]	; 0x24
   1502c:	str	r1, [sp, #32]
   15030:	mov	r5, r0
   15034:	bl	10fec <__errno_location@plt>
   15038:	cmp	r5, #0
   1503c:	bmi	151a4 <__assert_fail@plt+0x40ec>
   15040:	cmn	r5, #-2147483647	; 0x80000001
   15044:	beq	151a4 <__assert_fail@plt+0x40ec>
   15048:	movw	r8, #37160	; 0x9128
   1504c:	mov	r4, r0
   15050:	ldr	r0, [r0]
   15054:	movt	r8, #2
   15058:	str	r4, [sp, #28]
   1505c:	ldr	r1, [r8, #4]
   15060:	ldr	r6, [r8]
   15064:	str	r0, [sp, #24]
   15068:	cmp	r1, r5
   1506c:	ble	15078 <__assert_fail@plt+0x3fc0>
   15070:	mov	sl, r6
   15074:	b	150e0 <__assert_fail@plt+0x4028>
   15078:	mov	r0, #8
   1507c:	add	r9, r8, #8
   15080:	str	r1, [fp, #-32]	; 0xffffffe0
   15084:	sub	r1, r5, r1
   15088:	mvn	r3, #-2147483648	; 0x80000000
   1508c:	str	r0, [sp]
   15090:	subs	r0, r6, r9
   15094:	add	r2, r1, #1
   15098:	sub	r1, fp, #32
   1509c:	movne	r0, r6
   150a0:	bl	16120 <__assert_fail@plt+0x5068>
   150a4:	mov	sl, r0
   150a8:	cmp	r6, r9
   150ac:	str	r0, [r8]
   150b0:	bne	150bc <__assert_fail@plt+0x4004>
   150b4:	ldrd	r0, [r8, #8]
   150b8:	stm	sl, {r0, r1}
   150bc:	ldr	r1, [r8, #4]
   150c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   150c4:	add	r0, sl, r1, lsl #3
   150c8:	sub	r1, r2, r1
   150cc:	lsl	r2, r1, #3
   150d0:	mov	r1, #0
   150d4:	bl	11004 <memset@plt>
   150d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   150dc:	str	r0, [r8, #4]
   150e0:	mov	r9, sl
   150e4:	ldm	r7, {r0, r1}
   150e8:	orr	r8, r1, #1
   150ec:	add	r1, r7, #8
   150f0:	ldr	r2, [r7, #40]	; 0x28
   150f4:	ldr	r3, [r7, #44]	; 0x2c
   150f8:	ldr	r6, [r9, r5, lsl #3]!
   150fc:	str	r1, [sp, #20]
   15100:	ldr	r4, [r9, #4]!
   15104:	stm	sp, {r0, r8}
   15108:	add	r0, sp, #8
   1510c:	stm	r0, {r1, r2, r3}
   15110:	ldr	r2, [sp, #32]
   15114:	ldr	r3, [sp, #36]	; 0x24
   15118:	mov	r1, r6
   1511c:	mov	r0, r4
   15120:	bl	13a2c <__assert_fail@plt+0x2974>
   15124:	cmp	r6, r0
   15128:	bhi	1518c <__assert_fail@plt+0x40d4>
   1512c:	add	r6, r0, #1
   15130:	movw	r0, #37272	; 0x9198
   15134:	movt	r0, #2
   15138:	str	r6, [sl, r5, lsl #3]
   1513c:	cmp	r4, r0
   15140:	beq	1514c <__assert_fail@plt+0x4094>
   15144:	mov	r0, r4
   15148:	bl	13634 <__assert_fail@plt+0x257c>
   1514c:	mov	r0, r6
   15150:	bl	15f20 <__assert_fail@plt+0x4e68>
   15154:	str	r0, [r9]
   15158:	mov	r4, r0
   1515c:	add	r3, sp, #8
   15160:	ldr	r0, [r7]
   15164:	ldr	r1, [r7, #40]	; 0x28
   15168:	ldr	r2, [r7, #44]	; 0x2c
   1516c:	stm	sp, {r0, r8}
   15170:	ldr	r0, [sp, #20]
   15174:	stm	r3, {r0, r1, r2}
   15178:	ldr	r2, [sp, #32]
   1517c:	ldr	r3, [sp, #36]	; 0x24
   15180:	mov	r0, r4
   15184:	mov	r1, r6
   15188:	bl	13a2c <__assert_fail@plt+0x2974>
   1518c:	ldr	r1, [sp, #24]
   15190:	ldr	r0, [sp, #28]
   15194:	str	r1, [r0]
   15198:	mov	r0, r4
   1519c:	sub	sp, fp, #28
   151a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151a4:	bl	110a0 <abort@plt>
   151a8:	movw	r3, #37224	; 0x9168
   151ac:	movt	r3, #2
   151b0:	b	15018 <__assert_fail@plt+0x3f60>
   151b4:	movw	r3, #37224	; 0x9168
   151b8:	mov	r1, r0
   151bc:	mov	r0, #0
   151c0:	mvn	r2, #0
   151c4:	movt	r3, #2
   151c8:	b	15018 <__assert_fail@plt+0x3f60>
   151cc:	movw	r3, #37224	; 0x9168
   151d0:	mov	r2, r1
   151d4:	mov	r1, r0
   151d8:	mov	r0, #0
   151dc:	movt	r3, #2
   151e0:	b	15018 <__assert_fail@plt+0x3f60>
   151e4:	push	{fp, lr}
   151e8:	mov	fp, sp
   151ec:	sub	sp, sp, #48	; 0x30
   151f0:	vmov.i32	q8, #0	; 0x00000000
   151f4:	mov	ip, #32
   151f8:	mov	r3, sp
   151fc:	mov	lr, r2
   15200:	cmp	r1, #10
   15204:	add	r2, r3, #16
   15208:	vst1.64	{d16-d17}, [r3], ip
   1520c:	vst1.64	{d16-d17}, [r2]
   15210:	vst1.64	{d16-d17}, [r3]
   15214:	beq	15234 <__assert_fail@plt+0x417c>
   15218:	str	r1, [sp]
   1521c:	mov	r3, sp
   15220:	mov	r1, lr
   15224:	mvn	r2, #0
   15228:	bl	15018 <__assert_fail@plt+0x3f60>
   1522c:	mov	sp, fp
   15230:	pop	{fp, pc}
   15234:	bl	110a0 <abort@plt>
   15238:	push	{r4, sl, fp, lr}
   1523c:	add	fp, sp, #8
   15240:	sub	sp, sp, #48	; 0x30
   15244:	vmov.i32	q8, #0	; 0x00000000
   15248:	mov	ip, r3
   1524c:	mov	r3, sp
   15250:	mov	lr, #32
   15254:	cmp	r1, #10
   15258:	add	r4, r3, #16
   1525c:	vst1.64	{d16-d17}, [r3], lr
   15260:	vst1.64	{d16-d17}, [r4]
   15264:	vst1.64	{d16-d17}, [r3]
   15268:	beq	15288 <__assert_fail@plt+0x41d0>
   1526c:	str	r1, [sp]
   15270:	mov	r1, r2
   15274:	mov	r3, sp
   15278:	mov	r2, ip
   1527c:	bl	15018 <__assert_fail@plt+0x3f60>
   15280:	sub	sp, fp, #8
   15284:	pop	{r4, sl, fp, pc}
   15288:	bl	110a0 <abort@plt>
   1528c:	push	{fp, lr}
   15290:	mov	fp, sp
   15294:	sub	sp, sp, #48	; 0x30
   15298:	vmov.i32	q8, #0	; 0x00000000
   1529c:	mov	r3, sp
   152a0:	mov	ip, #32
   152a4:	cmp	r0, #10
   152a8:	add	r2, r3, #16
   152ac:	vst1.64	{d16-d17}, [r3], ip
   152b0:	vst1.64	{d16-d17}, [r2]
   152b4:	vst1.64	{d16-d17}, [r3]
   152b8:	beq	152d8 <__assert_fail@plt+0x4220>
   152bc:	str	r0, [sp]
   152c0:	mov	r3, sp
   152c4:	mov	r0, #0
   152c8:	mvn	r2, #0
   152cc:	bl	15018 <__assert_fail@plt+0x3f60>
   152d0:	mov	sp, fp
   152d4:	pop	{fp, pc}
   152d8:	bl	110a0 <abort@plt>
   152dc:	push	{fp, lr}
   152e0:	mov	fp, sp
   152e4:	sub	sp, sp, #48	; 0x30
   152e8:	vmov.i32	q8, #0	; 0x00000000
   152ec:	mov	r3, sp
   152f0:	mov	ip, #32
   152f4:	cmp	r0, #10
   152f8:	add	lr, r3, #16
   152fc:	vst1.64	{d16-d17}, [r3], ip
   15300:	vst1.64	{d16-d17}, [lr]
   15304:	vst1.64	{d16-d17}, [r3]
   15308:	beq	15324 <__assert_fail@plt+0x426c>
   1530c:	str	r0, [sp]
   15310:	mov	r3, sp
   15314:	mov	r0, #0
   15318:	bl	15018 <__assert_fail@plt+0x3f60>
   1531c:	mov	sp, fp
   15320:	pop	{fp, pc}
   15324:	bl	110a0 <abort@plt>
   15328:	push	{r4, sl, fp, lr}
   1532c:	add	fp, sp, #8
   15330:	sub	sp, sp, #48	; 0x30
   15334:	mov	lr, r0
   15338:	movw	r0, #37224	; 0x9168
   1533c:	mov	ip, r1
   15340:	mov	r1, #32
   15344:	mov	r4, #1
   15348:	movt	r0, #2
   1534c:	add	r3, r0, #16
   15350:	vld1.64	{d16-d17}, [r0], r1
   15354:	vld1.64	{d20-d21}, [r0]
   15358:	vld1.64	{d18-d19}, [r3]
   1535c:	mov	r3, sp
   15360:	add	r0, r3, #32
   15364:	add	r1, r3, #16
   15368:	vst1.64	{d20-d21}, [r0]
   1536c:	mov	r0, #28
   15370:	vst1.64	{d18-d19}, [r1]
   15374:	mov	r1, r3
   15378:	and	r0, r0, r2, lsr #3
   1537c:	and	r2, r2, #31
   15380:	vst1.64	{d16-d17}, [r1], r0
   15384:	ldr	r0, [r1, #8]
   15388:	bic	r4, r4, r0, lsr r2
   1538c:	eor	r0, r0, r4, lsl r2
   15390:	mov	r2, ip
   15394:	str	r0, [r1, #8]
   15398:	mov	r0, #0
   1539c:	mov	r1, lr
   153a0:	bl	15018 <__assert_fail@plt+0x3f60>
   153a4:	sub	sp, fp, #8
   153a8:	pop	{r4, sl, fp, pc}
   153ac:	push	{fp, lr}
   153b0:	mov	fp, sp
   153b4:	sub	sp, sp, #48	; 0x30
   153b8:	mov	ip, r0
   153bc:	movw	r0, #37224	; 0x9168
   153c0:	mov	r2, #32
   153c4:	movt	r0, #2
   153c8:	add	r3, r0, #16
   153cc:	vld1.64	{d16-d17}, [r0], r2
   153d0:	vld1.64	{d20-d21}, [r0]
   153d4:	vld1.64	{d18-d19}, [r3]
   153d8:	mov	r3, sp
   153dc:	add	r0, r3, #32
   153e0:	add	r2, r3, #16
   153e4:	vst1.64	{d20-d21}, [r0]
   153e8:	mov	r0, #28
   153ec:	vst1.64	{d18-d19}, [r2]
   153f0:	mov	r2, r3
   153f4:	and	r0, r0, r1, lsr #3
   153f8:	and	r1, r1, #31
   153fc:	vst1.64	{d16-d17}, [r2], r0
   15400:	mov	r0, #1
   15404:	ldr	lr, [r2, #8]
   15408:	bic	r0, r0, lr, lsr r1
   1540c:	eor	r0, lr, r0, lsl r1
   15410:	mov	r1, ip
   15414:	str	r0, [r2, #8]
   15418:	mov	r0, #0
   1541c:	mvn	r2, #0
   15420:	bl	15018 <__assert_fail@plt+0x3f60>
   15424:	mov	sp, fp
   15428:	pop	{fp, pc}
   1542c:	push	{fp, lr}
   15430:	mov	fp, sp
   15434:	sub	sp, sp, #48	; 0x30
   15438:	mov	r1, r0
   1543c:	movw	r0, #37224	; 0x9168
   15440:	mov	r3, #32
   15444:	movt	r0, #2
   15448:	add	r2, r0, #16
   1544c:	vld1.64	{d16-d17}, [r0], r3
   15450:	mov	r3, sp
   15454:	vld1.64	{d18-d19}, [r2]
   15458:	vld1.64	{d20-d21}, [r0]
   1545c:	add	r2, r3, #16
   15460:	add	r0, r3, #32
   15464:	vst1.64	{d18-d19}, [r2]
   15468:	vst1.64	{d20-d21}, [r0]
   1546c:	mov	r0, #12
   15470:	mov	r2, r3
   15474:	vst1.64	{d16-d17}, [r2], r0
   15478:	ldr	r0, [r2]
   1547c:	orr	r0, r0, #67108864	; 0x4000000
   15480:	str	r0, [r2]
   15484:	mov	r0, #0
   15488:	mvn	r2, #0
   1548c:	bl	15018 <__assert_fail@plt+0x3f60>
   15490:	mov	sp, fp
   15494:	pop	{fp, pc}
   15498:	push	{fp, lr}
   1549c:	mov	fp, sp
   154a0:	sub	sp, sp, #48	; 0x30
   154a4:	mov	ip, r1
   154a8:	mov	r1, r0
   154ac:	movw	r0, #37224	; 0x9168
   154b0:	mov	r2, #32
   154b4:	movt	r0, #2
   154b8:	add	r3, r0, #16
   154bc:	vld1.64	{d16-d17}, [r0], r2
   154c0:	vld1.64	{d18-d19}, [r3]
   154c4:	vld1.64	{d20-d21}, [r0]
   154c8:	mov	r3, sp
   154cc:	add	r2, r3, #16
   154d0:	add	r0, r3, #32
   154d4:	vst1.64	{d18-d19}, [r2]
   154d8:	vst1.64	{d20-d21}, [r0]
   154dc:	mov	r0, #12
   154e0:	mov	r2, r3
   154e4:	vst1.64	{d16-d17}, [r2], r0
   154e8:	ldr	r0, [r2]
   154ec:	orr	r0, r0, #67108864	; 0x4000000
   154f0:	str	r0, [r2]
   154f4:	mov	r0, #0
   154f8:	mov	r2, ip
   154fc:	bl	15018 <__assert_fail@plt+0x3f60>
   15500:	mov	sp, fp
   15504:	pop	{fp, pc}
   15508:	push	{r4, sl, fp, lr}
   1550c:	add	fp, sp, #8
   15510:	sub	sp, sp, #96	; 0x60
   15514:	vmov.i32	q8, #0	; 0x00000000
   15518:	mov	ip, r2
   1551c:	mov	r2, sp
   15520:	mov	r4, #28
   15524:	cmp	r1, #10
   15528:	mov	r3, r2
   1552c:	add	lr, r2, #16
   15530:	vst1.64	{d16-d17}, [r3], r4
   15534:	vst1.64	{d16-d17}, [lr]
   15538:	vst1.32	{d16-d17}, [r3]
   1553c:	beq	1558c <__assert_fail@plt+0x44d4>
   15540:	vld1.64	{d16-d17}, [r2], r4
   15544:	vld1.64	{d18-d19}, [lr]
   15548:	add	r3, sp, #48	; 0x30
   1554c:	vld1.32	{d20-d21}, [r2]
   15550:	add	r2, r3, #20
   15554:	add	r4, r3, #4
   15558:	vst1.32	{d18-d19}, [r2]
   1555c:	add	r2, r3, #32
   15560:	vst1.32	{d16-d17}, [r4]
   15564:	vst1.32	{d20-d21}, [r2]
   15568:	str	r1, [sp, #48]	; 0x30
   1556c:	mvn	r2, #0
   15570:	ldr	r1, [sp, #60]	; 0x3c
   15574:	orr	r1, r1, #67108864	; 0x4000000
   15578:	str	r1, [sp, #60]	; 0x3c
   1557c:	mov	r1, ip
   15580:	bl	15018 <__assert_fail@plt+0x3f60>
   15584:	sub	sp, fp, #8
   15588:	pop	{r4, sl, fp, pc}
   1558c:	bl	110a0 <abort@plt>
   15590:	push	{r4, r5, r6, sl, fp, lr}
   15594:	add	fp, sp, #16
   15598:	sub	sp, sp, #48	; 0x30
   1559c:	mov	ip, r3
   155a0:	movw	r3, #37224	; 0x9168
   155a4:	mov	r6, #32
   155a8:	cmp	r1, #0
   155ac:	mov	r4, sp
   155b0:	movt	r3, #2
   155b4:	cmpne	r2, #0
   155b8:	add	r5, r4, #16
   155bc:	add	lr, r3, #16
   155c0:	vld1.64	{d16-d17}, [r3], r6
   155c4:	vld1.64	{d18-d19}, [lr]
   155c8:	vld1.64	{d20-d21}, [r3]
   155cc:	mov	r3, #10
   155d0:	vst1.64	{d16-d17}, [r4], r6
   155d4:	vst1.64	{d18-d19}, [r5]
   155d8:	vst1.64	{d20-d21}, [r4]
   155dc:	str	r3, [sp]
   155e0:	bne	155e8 <__assert_fail@plt+0x4530>
   155e4:	bl	110a0 <abort@plt>
   155e8:	str	r2, [sp, #44]	; 0x2c
   155ec:	str	r1, [sp, #40]	; 0x28
   155f0:	mov	r3, sp
   155f4:	mov	r1, ip
   155f8:	mvn	r2, #0
   155fc:	bl	15018 <__assert_fail@plt+0x3f60>
   15600:	sub	sp, fp, #16
   15604:	pop	{r4, r5, r6, sl, fp, pc}
   15608:	push	{r4, r5, r6, sl, fp, lr}
   1560c:	add	fp, sp, #16
   15610:	sub	sp, sp, #48	; 0x30
   15614:	mov	lr, r3
   15618:	movw	r3, #37224	; 0x9168
   1561c:	mov	r6, #32
   15620:	cmp	r1, #0
   15624:	mov	r4, sp
   15628:	movt	r3, #2
   1562c:	cmpne	r2, #0
   15630:	add	r5, r4, #16
   15634:	add	ip, r3, #16
   15638:	vld1.64	{d16-d17}, [r3], r6
   1563c:	vld1.64	{d18-d19}, [ip]
   15640:	vld1.64	{d20-d21}, [r3]
   15644:	mov	r3, #10
   15648:	vst1.64	{d16-d17}, [r4], r6
   1564c:	vst1.64	{d18-d19}, [r5]
   15650:	vst1.64	{d20-d21}, [r4]
   15654:	str	r3, [sp]
   15658:	bne	15660 <__assert_fail@plt+0x45a8>
   1565c:	bl	110a0 <abort@plt>
   15660:	ldr	ip, [fp, #8]
   15664:	str	r2, [sp, #44]	; 0x2c
   15668:	str	r1, [sp, #40]	; 0x28
   1566c:	mov	r3, sp
   15670:	mov	r1, lr
   15674:	mov	r2, ip
   15678:	bl	15018 <__assert_fail@plt+0x3f60>
   1567c:	sub	sp, fp, #16
   15680:	pop	{r4, r5, r6, sl, fp, pc}
   15684:	push	{r4, sl, fp, lr}
   15688:	add	fp, sp, #8
   1568c:	sub	sp, sp, #48	; 0x30
   15690:	movw	r3, #37224	; 0x9168
   15694:	mov	lr, #32
   15698:	mov	ip, r2
   1569c:	cmp	r0, #0
   156a0:	movt	r3, #2
   156a4:	cmpne	r1, #0
   156a8:	add	r2, r3, #16
   156ac:	vld1.64	{d16-d17}, [r3], lr
   156b0:	vld1.64	{d20-d21}, [r3]
   156b4:	vld1.64	{d18-d19}, [r2]
   156b8:	mov	r2, sp
   156bc:	add	r4, r2, #16
   156c0:	vst1.64	{d16-d17}, [r2], lr
   156c4:	vst1.64	{d20-d21}, [r2]
   156c8:	mov	r2, #10
   156cc:	vst1.64	{d18-d19}, [r4]
   156d0:	str	r2, [sp]
   156d4:	bne	156dc <__assert_fail@plt+0x4624>
   156d8:	bl	110a0 <abort@plt>
   156dc:	str	r1, [sp, #44]	; 0x2c
   156e0:	str	r0, [sp, #40]	; 0x28
   156e4:	mov	r3, sp
   156e8:	mov	r0, #0
   156ec:	mov	r1, ip
   156f0:	mvn	r2, #0
   156f4:	bl	15018 <__assert_fail@plt+0x3f60>
   156f8:	sub	sp, fp, #8
   156fc:	pop	{r4, sl, fp, pc}
   15700:	push	{r4, r5, fp, lr}
   15704:	add	fp, sp, #8
   15708:	sub	sp, sp, #48	; 0x30
   1570c:	mov	ip, r3
   15710:	movw	r3, #37224	; 0x9168
   15714:	mov	r4, #32
   15718:	mov	lr, r2
   1571c:	cmp	r0, #0
   15720:	movt	r3, #2
   15724:	cmpne	r1, #0
   15728:	add	r2, r3, #16
   1572c:	vld1.64	{d16-d17}, [r3], r4
   15730:	vld1.64	{d20-d21}, [r3]
   15734:	vld1.64	{d18-d19}, [r2]
   15738:	mov	r2, sp
   1573c:	add	r5, r2, #16
   15740:	vst1.64	{d16-d17}, [r2], r4
   15744:	vst1.64	{d20-d21}, [r2]
   15748:	mov	r2, #10
   1574c:	vst1.64	{d18-d19}, [r5]
   15750:	str	r2, [sp]
   15754:	bne	1575c <__assert_fail@plt+0x46a4>
   15758:	bl	110a0 <abort@plt>
   1575c:	str	r1, [sp, #44]	; 0x2c
   15760:	str	r0, [sp, #40]	; 0x28
   15764:	mov	r3, sp
   15768:	mov	r0, #0
   1576c:	mov	r1, lr
   15770:	mov	r2, ip
   15774:	bl	15018 <__assert_fail@plt+0x3f60>
   15778:	sub	sp, fp, #8
   1577c:	pop	{r4, r5, fp, pc}
   15780:	movw	r3, #37112	; 0x90f8
   15784:	movt	r3, #2
   15788:	b	15018 <__assert_fail@plt+0x3f60>
   1578c:	movw	r3, #37112	; 0x90f8
   15790:	mov	r2, r1
   15794:	mov	r1, r0
   15798:	mov	r0, #0
   1579c:	movt	r3, #2
   157a0:	b	15018 <__assert_fail@plt+0x3f60>
   157a4:	movw	r3, #37112	; 0x90f8
   157a8:	mvn	r2, #0
   157ac:	movt	r3, #2
   157b0:	b	15018 <__assert_fail@plt+0x3f60>
   157b4:	movw	r3, #37112	; 0x90f8
   157b8:	mov	r1, r0
   157bc:	mov	r0, #0
   157c0:	mvn	r2, #0
   157c4:	movt	r3, #2
   157c8:	b	15018 <__assert_fail@plt+0x3f60>
   157cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   157d0:	add	fp, sp, #24
   157d4:	movw	r8, #0
   157d8:	mov	r6, r2
   157dc:	mov	r4, r1
   157e0:	mov	r5, r0
   157e4:	movt	r8, #32752	; 0x7ff0
   157e8:	mov	r0, r5
   157ec:	mov	r1, r4
   157f0:	mov	r2, r6
   157f4:	bl	10e6c <read@plt>
   157f8:	mov	r7, r0
   157fc:	cmn	r0, #1
   15800:	bgt	15828 <__assert_fail@plt+0x4770>
   15804:	bl	10fec <__errno_location@plt>
   15808:	ldr	r0, [r0]
   1580c:	cmp	r0, #4
   15810:	beq	157e8 <__assert_fail@plt+0x4730>
   15814:	cmp	r6, r8
   15818:	bls	15828 <__assert_fail@plt+0x4770>
   1581c:	cmp	r0, #22
   15820:	mov	r6, r8
   15824:	beq	157e8 <__assert_fail@plt+0x4730>
   15828:	mov	r0, r7
   1582c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15830:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15834:	add	fp, sp, #24
   15838:	sub	sp, sp, #32
   1583c:	ldr	r6, [fp, #12]
   15840:	ldr	r7, [fp, #8]
   15844:	mov	r4, r2
   15848:	mov	r8, r0
   1584c:	cmp	r1, #0
   15850:	beq	15878 <__assert_fail@plt+0x47c0>
   15854:	movw	r2, #33772	; 0x83ec
   15858:	mov	r5, r1
   1585c:	str	r3, [sp, #4]
   15860:	str	r4, [sp]
   15864:	mov	r0, r8
   15868:	mov	r1, #1
   1586c:	movt	r2, #1
   15870:	mov	r3, r5
   15874:	b	15890 <__assert_fail@plt+0x47d8>
   15878:	movw	r2, #33784	; 0x83f8
   1587c:	str	r3, [sp]
   15880:	mov	r0, r8
   15884:	mov	r1, #1
   15888:	mov	r3, r4
   1588c:	movt	r2, #1
   15890:	bl	11028 <__fprintf_chk@plt>
   15894:	movw	r1, #33791	; 0x83ff
   15898:	mov	r0, #0
   1589c:	mov	r2, #5
   158a0:	movt	r1, #1
   158a4:	bl	10ecc <dcgettext@plt>
   158a8:	movw	r2, #34509	; 0x86cd
   158ac:	mov	r3, r0
   158b0:	movw	r0, #2022	; 0x7e6
   158b4:	mov	r1, #1
   158b8:	movt	r2, #1
   158bc:	str	r0, [sp]
   158c0:	mov	r0, r8
   158c4:	bl	11028 <__fprintf_chk@plt>
   158c8:	movw	r4, #32888	; 0x8078
   158cc:	mov	r1, r8
   158d0:	movt	r4, #1
   158d4:	mov	r0, r4
   158d8:	bl	10e48 <fputs_unlocked@plt>
   158dc:	movw	r1, #33795	; 0x8403
   158e0:	mov	r0, #0
   158e4:	mov	r2, #5
   158e8:	movt	r1, #1
   158ec:	bl	10ecc <dcgettext@plt>
   158f0:	movw	r3, #33966	; 0x84ae
   158f4:	mov	r2, r0
   158f8:	mov	r0, r8
   158fc:	mov	r1, #1
   15900:	movt	r3, #1
   15904:	bl	11028 <__fprintf_chk@plt>
   15908:	mov	r0, r4
   1590c:	mov	r1, r8
   15910:	bl	10e48 <fputs_unlocked@plt>
   15914:	cmp	r6, #9
   15918:	bhi	15954 <__assert_fail@plt+0x489c>
   1591c:	add	r0, pc, #0
   15920:	ldr	pc, [r0, r6, lsl #2]
   15924:	andeq	r5, r1, ip, asr #18
   15928:	andeq	r5, r1, r0, ror #18
   1592c:	muleq	r1, r0, r9
   15930:			; <UNDEFINED> instruction: 0x000159b8
   15934:	andeq	r5, r1, r0, ror #19
   15938:	andeq	r5, r1, r8, lsl #20
   1593c:	andeq	r5, r1, r0, lsr sl
   15940:	andeq	r5, r1, r8, ror #20
   15944:	andeq	r5, r1, r0, lsl fp
   15948:			; <UNDEFINED> instruction: 0x00015ab8
   1594c:	sub	sp, fp, #24
   15950:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15954:	movw	r1, #34319	; 0x860f
   15958:	movt	r1, #1
   1595c:	b	15ac0 <__assert_fail@plt+0x4a08>
   15960:	movw	r1, #34000	; 0x84d0
   15964:	mov	r0, #0
   15968:	mov	r2, #5
   1596c:	movt	r1, #1
   15970:	bl	10ecc <dcgettext@plt>
   15974:	ldr	r3, [r7]
   15978:	mov	r2, r0
   1597c:	mov	r0, r8
   15980:	mov	r1, #1
   15984:	sub	sp, fp, #24
   15988:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1598c:	b	11028 <__fprintf_chk@plt>
   15990:	movw	r1, #34016	; 0x84e0
   15994:	mov	r0, #0
   15998:	mov	r2, #5
   1599c:	movt	r1, #1
   159a0:	bl	10ecc <dcgettext@plt>
   159a4:	mov	r2, r0
   159a8:	ldr	r3, [r7]
   159ac:	ldr	r0, [r7, #4]
   159b0:	str	r0, [sp]
   159b4:	b	15aa4 <__assert_fail@plt+0x49ec>
   159b8:	movw	r1, #34039	; 0x84f7
   159bc:	mov	r0, #0
   159c0:	mov	r2, #5
   159c4:	movt	r1, #1
   159c8:	bl	10ecc <dcgettext@plt>
   159cc:	mov	r2, r0
   159d0:	ldr	r3, [r7]
   159d4:	ldmib	r7, {r0, r1}
   159d8:	stm	sp, {r0, r1}
   159dc:	b	15aa4 <__assert_fail@plt+0x49ec>
   159e0:	movw	r1, #34067	; 0x8513
   159e4:	mov	r0, #0
   159e8:	mov	r2, #5
   159ec:	movt	r1, #1
   159f0:	bl	10ecc <dcgettext@plt>
   159f4:	ldr	r3, [r7]
   159f8:	mov	r2, r0
   159fc:	ldmib	r7, {r0, r1, r7}
   15a00:	stm	sp, {r0, r1, r7}
   15a04:	b	15aa4 <__assert_fail@plt+0x49ec>
   15a08:	movw	r1, #34099	; 0x8533
   15a0c:	mov	r0, #0
   15a10:	mov	r2, #5
   15a14:	movt	r1, #1
   15a18:	bl	10ecc <dcgettext@plt>
   15a1c:	ldr	r3, [r7]
   15a20:	mov	r2, r0
   15a24:	ldmib	r7, {r0, r1, r6, r7}
   15a28:	stm	sp, {r0, r1, r6, r7}
   15a2c:	b	15aa4 <__assert_fail@plt+0x49ec>
   15a30:	movw	r1, #34135	; 0x8557
   15a34:	mov	r0, #0
   15a38:	mov	r2, #5
   15a3c:	movt	r1, #1
   15a40:	bl	10ecc <dcgettext@plt>
   15a44:	mov	r2, r0
   15a48:	ldr	r3, [r7]
   15a4c:	ldmib	r7, {r0, r1, r6}
   15a50:	ldr	r5, [r7, #16]
   15a54:	ldr	r7, [r7, #20]
   15a58:	stm	sp, {r0, r1, r6}
   15a5c:	str	r5, [sp, #12]
   15a60:	str	r7, [sp, #16]
   15a64:	b	15aa4 <__assert_fail@plt+0x49ec>
   15a68:	movw	r1, #34175	; 0x857f
   15a6c:	mov	r0, #0
   15a70:	mov	r2, #5
   15a74:	movt	r1, #1
   15a78:	bl	10ecc <dcgettext@plt>
   15a7c:	mov	r2, r0
   15a80:	ldr	r3, [r7]
   15a84:	ldmib	r7, {r0, r1, r6}
   15a88:	ldr	r5, [r7, #16]
   15a8c:	ldr	r4, [r7, #20]
   15a90:	ldr	r7, [r7, #24]
   15a94:	stm	sp, {r0, r1, r6}
   15a98:	str	r5, [sp, #12]
   15a9c:	str	r4, [sp, #16]
   15aa0:	str	r7, [sp, #20]
   15aa4:	mov	r0, r8
   15aa8:	mov	r1, #1
   15aac:	bl	11028 <__fprintf_chk@plt>
   15ab0:	sub	sp, fp, #24
   15ab4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ab8:	movw	r1, #34267	; 0x85db
   15abc:	movt	r1, #1
   15ac0:	mov	r0, #0
   15ac4:	mov	r2, #5
   15ac8:	bl	10ecc <dcgettext@plt>
   15acc:	mov	ip, r0
   15ad0:	ldr	r3, [r7]
   15ad4:	ldr	r0, [r7, #4]
   15ad8:	ldr	r1, [r7, #8]
   15adc:	ldr	r6, [r7, #12]
   15ae0:	ldr	r5, [r7, #16]
   15ae4:	ldr	r4, [r7, #20]
   15ae8:	ldr	r2, [r7, #24]
   15aec:	ldr	lr, [r7, #28]
   15af0:	ldr	r7, [r7, #32]
   15af4:	stm	sp, {r0, r1, r6}
   15af8:	str	r5, [sp, #12]
   15afc:	str	r4, [sp, #16]
   15b00:	str	r2, [sp, #20]
   15b04:	str	lr, [sp, #24]
   15b08:	str	r7, [sp, #28]
   15b0c:	b	15b54 <__assert_fail@plt+0x4a9c>
   15b10:	movw	r1, #34219	; 0x85ab
   15b14:	mov	r0, #0
   15b18:	mov	r2, #5
   15b1c:	movt	r1, #1
   15b20:	bl	10ecc <dcgettext@plt>
   15b24:	mov	ip, r0
   15b28:	ldr	r3, [r7]
   15b2c:	ldmib	r7, {r0, r1, r6}
   15b30:	ldr	r5, [r7, #16]
   15b34:	ldr	r4, [r7, #20]
   15b38:	ldr	r2, [r7, #24]
   15b3c:	ldr	r7, [r7, #28]
   15b40:	stm	sp, {r0, r1, r6}
   15b44:	str	r5, [sp, #12]
   15b48:	str	r4, [sp, #16]
   15b4c:	str	r2, [sp, #20]
   15b50:	str	r7, [sp, #24]
   15b54:	mov	r0, r8
   15b58:	mov	r1, #1
   15b5c:	mov	r2, ip
   15b60:	bl	11028 <__fprintf_chk@plt>
   15b64:	sub	sp, fp, #24
   15b68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b6c:	push	{r4, sl, fp, lr}
   15b70:	add	fp, sp, #8
   15b74:	sub	sp, sp, #8
   15b78:	ldr	ip, [fp, #8]
   15b7c:	mov	lr, #0
   15b80:	ldr	r4, [ip, lr, lsl #2]
   15b84:	add	lr, lr, #1
   15b88:	cmp	r4, #0
   15b8c:	bne	15b80 <__assert_fail@plt+0x4ac8>
   15b90:	sub	r4, lr, #1
   15b94:	str	ip, [sp]
   15b98:	str	r4, [sp, #4]
   15b9c:	bl	15830 <__assert_fail@plt+0x4778>
   15ba0:	sub	sp, fp, #8
   15ba4:	pop	{r4, sl, fp, pc}
   15ba8:	push	{fp, lr}
   15bac:	mov	fp, sp
   15bb0:	sub	sp, sp, #48	; 0x30
   15bb4:	ldr	ip, [fp, #8]
   15bb8:	ldr	lr, [ip]
   15bbc:	cmp	lr, #0
   15bc0:	str	lr, [sp, #8]
   15bc4:	beq	15c60 <__assert_fail@plt+0x4ba8>
   15bc8:	ldr	lr, [ip, #4]
   15bcc:	cmp	lr, #0
   15bd0:	str	lr, [sp, #12]
   15bd4:	beq	15c68 <__assert_fail@plt+0x4bb0>
   15bd8:	ldr	lr, [ip, #8]
   15bdc:	cmp	lr, #0
   15be0:	str	lr, [sp, #16]
   15be4:	beq	15c70 <__assert_fail@plt+0x4bb8>
   15be8:	ldr	lr, [ip, #12]
   15bec:	cmp	lr, #0
   15bf0:	str	lr, [sp, #20]
   15bf4:	beq	15c78 <__assert_fail@plt+0x4bc0>
   15bf8:	ldr	lr, [ip, #16]
   15bfc:	cmp	lr, #0
   15c00:	str	lr, [sp, #24]
   15c04:	beq	15c80 <__assert_fail@plt+0x4bc8>
   15c08:	ldr	lr, [ip, #20]
   15c0c:	cmp	lr, #0
   15c10:	str	lr, [sp, #28]
   15c14:	beq	15c88 <__assert_fail@plt+0x4bd0>
   15c18:	ldr	lr, [ip, #24]
   15c1c:	cmp	lr, #0
   15c20:	str	lr, [sp, #32]
   15c24:	beq	15c90 <__assert_fail@plt+0x4bd8>
   15c28:	ldr	lr, [ip, #28]
   15c2c:	cmp	lr, #0
   15c30:	str	lr, [sp, #36]	; 0x24
   15c34:	beq	15c98 <__assert_fail@plt+0x4be0>
   15c38:	ldr	lr, [ip, #32]
   15c3c:	cmp	lr, #0
   15c40:	str	lr, [sp, #40]	; 0x28
   15c44:	beq	15ca0 <__assert_fail@plt+0x4be8>
   15c48:	ldr	lr, [ip, #36]	; 0x24
   15c4c:	mov	ip, #10
   15c50:	cmp	lr, #0
   15c54:	str	lr, [sp, #44]	; 0x2c
   15c58:	movweq	ip, #9
   15c5c:	b	15ca4 <__assert_fail@plt+0x4bec>
   15c60:	mov	ip, #0
   15c64:	b	15ca4 <__assert_fail@plt+0x4bec>
   15c68:	mov	ip, #1
   15c6c:	b	15ca4 <__assert_fail@plt+0x4bec>
   15c70:	mov	ip, #2
   15c74:	b	15ca4 <__assert_fail@plt+0x4bec>
   15c78:	mov	ip, #3
   15c7c:	b	15ca4 <__assert_fail@plt+0x4bec>
   15c80:	mov	ip, #4
   15c84:	b	15ca4 <__assert_fail@plt+0x4bec>
   15c88:	mov	ip, #5
   15c8c:	b	15ca4 <__assert_fail@plt+0x4bec>
   15c90:	mov	ip, #6
   15c94:	b	15ca4 <__assert_fail@plt+0x4bec>
   15c98:	mov	ip, #7
   15c9c:	b	15ca4 <__assert_fail@plt+0x4bec>
   15ca0:	mov	ip, #8
   15ca4:	add	lr, sp, #8
   15ca8:	str	ip, [sp, #4]
   15cac:	str	lr, [sp]
   15cb0:	bl	15830 <__assert_fail@plt+0x4778>
   15cb4:	mov	sp, fp
   15cb8:	pop	{fp, pc}
   15cbc:	push	{fp, lr}
   15cc0:	mov	fp, sp
   15cc4:	sub	sp, sp, #56	; 0x38
   15cc8:	add	ip, fp, #8
   15ccc:	str	ip, [sp, #12]
   15cd0:	ldr	lr, [fp, #8]
   15cd4:	cmp	lr, #0
   15cd8:	str	lr, [sp, #16]
   15cdc:	beq	15d78 <__assert_fail@plt+0x4cc0>
   15ce0:	ldr	lr, [ip, #4]
   15ce4:	cmp	lr, #0
   15ce8:	str	lr, [sp, #20]
   15cec:	beq	15d80 <__assert_fail@plt+0x4cc8>
   15cf0:	ldr	lr, [ip, #8]
   15cf4:	cmp	lr, #0
   15cf8:	str	lr, [sp, #24]
   15cfc:	beq	15d88 <__assert_fail@plt+0x4cd0>
   15d00:	ldr	lr, [ip, #12]
   15d04:	cmp	lr, #0
   15d08:	str	lr, [sp, #28]
   15d0c:	beq	15d90 <__assert_fail@plt+0x4cd8>
   15d10:	ldr	lr, [ip, #16]
   15d14:	cmp	lr, #0
   15d18:	str	lr, [sp, #32]
   15d1c:	beq	15d98 <__assert_fail@plt+0x4ce0>
   15d20:	ldr	lr, [ip, #20]
   15d24:	cmp	lr, #0
   15d28:	str	lr, [sp, #36]	; 0x24
   15d2c:	beq	15da0 <__assert_fail@plt+0x4ce8>
   15d30:	ldr	lr, [ip, #24]
   15d34:	cmp	lr, #0
   15d38:	str	lr, [sp, #40]	; 0x28
   15d3c:	beq	15da8 <__assert_fail@plt+0x4cf0>
   15d40:	ldr	lr, [ip, #28]
   15d44:	cmp	lr, #0
   15d48:	str	lr, [sp, #44]	; 0x2c
   15d4c:	beq	15db0 <__assert_fail@plt+0x4cf8>
   15d50:	ldr	lr, [ip, #32]
   15d54:	cmp	lr, #0
   15d58:	str	lr, [sp, #48]	; 0x30
   15d5c:	beq	15db8 <__assert_fail@plt+0x4d00>
   15d60:	ldr	lr, [ip, #36]	; 0x24
   15d64:	mov	ip, #10
   15d68:	cmp	lr, #0
   15d6c:	str	lr, [sp, #52]	; 0x34
   15d70:	movweq	ip, #9
   15d74:	b	15dbc <__assert_fail@plt+0x4d04>
   15d78:	mov	ip, #0
   15d7c:	b	15dbc <__assert_fail@plt+0x4d04>
   15d80:	mov	ip, #1
   15d84:	b	15dbc <__assert_fail@plt+0x4d04>
   15d88:	mov	ip, #2
   15d8c:	b	15dbc <__assert_fail@plt+0x4d04>
   15d90:	mov	ip, #3
   15d94:	b	15dbc <__assert_fail@plt+0x4d04>
   15d98:	mov	ip, #4
   15d9c:	b	15dbc <__assert_fail@plt+0x4d04>
   15da0:	mov	ip, #5
   15da4:	b	15dbc <__assert_fail@plt+0x4d04>
   15da8:	mov	ip, #6
   15dac:	b	15dbc <__assert_fail@plt+0x4d04>
   15db0:	mov	ip, #7
   15db4:	b	15dbc <__assert_fail@plt+0x4d04>
   15db8:	mov	ip, #8
   15dbc:	add	lr, sp, #16
   15dc0:	str	ip, [sp, #4]
   15dc4:	str	lr, [sp]
   15dc8:	bl	15830 <__assert_fail@plt+0x4778>
   15dcc:	mov	sp, fp
   15dd0:	pop	{fp, pc}
   15dd4:	push	{fp, lr}
   15dd8:	mov	fp, sp
   15ddc:	movw	r0, #37196	; 0x914c
   15de0:	movt	r0, #2
   15de4:	ldr	r1, [r0]
   15de8:	movw	r0, #32888	; 0x8078
   15dec:	movt	r0, #1
   15df0:	bl	10e48 <fputs_unlocked@plt>
   15df4:	movw	r1, #34379	; 0x864b
   15df8:	mov	r0, #0
   15dfc:	mov	r2, #5
   15e00:	movt	r1, #1
   15e04:	bl	10ecc <dcgettext@plt>
   15e08:	movw	r2, #34399	; 0x865f
   15e0c:	mov	r1, r0
   15e10:	mov	r0, #1
   15e14:	movt	r2, #1
   15e18:	bl	11010 <__printf_chk@plt>
   15e1c:	movw	r1, #34421	; 0x8675
   15e20:	mov	r0, #0
   15e24:	mov	r2, #5
   15e28:	movt	r1, #1
   15e2c:	bl	10ecc <dcgettext@plt>
   15e30:	movw	r2, #32374	; 0x7e76
   15e34:	movw	r3, #32697	; 0x7fb9
   15e38:	mov	r1, r0
   15e3c:	mov	r0, #1
   15e40:	movt	r2, #1
   15e44:	movt	r3, #1
   15e48:	bl	11010 <__printf_chk@plt>
   15e4c:	movw	r1, #34441	; 0x8689
   15e50:	mov	r0, #0
   15e54:	mov	r2, #5
   15e58:	movt	r1, #1
   15e5c:	bl	10ecc <dcgettext@plt>
   15e60:	movw	r2, #34480	; 0x86b0
   15e64:	mov	r1, r0
   15e68:	mov	r0, #1
   15e6c:	movt	r2, #1
   15e70:	pop	{fp, lr}
   15e74:	b	11010 <__printf_chk@plt>
   15e78:	push	{r4, r5, r6, sl, fp, lr}
   15e7c:	add	fp, sp, #16
   15e80:	mov	r4, r2
   15e84:	mov	r5, r1
   15e88:	mov	r6, r0
   15e8c:	bl	175b8 <__assert_fail@plt+0x6500>
   15e90:	cmp	r0, #0
   15e94:	popne	{r4, r5, r6, sl, fp, pc}
   15e98:	cmp	r6, #0
   15e9c:	beq	15eb0 <__assert_fail@plt+0x4df8>
   15ea0:	cmp	r5, #0
   15ea4:	cmpne	r4, #0
   15ea8:	bne	15eb0 <__assert_fail@plt+0x4df8>
   15eac:	pop	{r4, r5, r6, sl, fp, pc}
   15eb0:	bl	1642c <__assert_fail@plt+0x5374>
   15eb4:	push	{r4, r5, r6, sl, fp, lr}
   15eb8:	add	fp, sp, #16
   15ebc:	mov	r4, r2
   15ec0:	mov	r5, r1
   15ec4:	mov	r6, r0
   15ec8:	bl	175b8 <__assert_fail@plt+0x6500>
   15ecc:	cmp	r0, #0
   15ed0:	popne	{r4, r5, r6, sl, fp, pc}
   15ed4:	cmp	r6, #0
   15ed8:	beq	15eec <__assert_fail@plt+0x4e34>
   15edc:	cmp	r5, #0
   15ee0:	cmpne	r4, #0
   15ee4:	bne	15eec <__assert_fail@plt+0x4e34>
   15ee8:	pop	{r4, r5, r6, sl, fp, pc}
   15eec:	bl	1642c <__assert_fail@plt+0x5374>
   15ef0:	push	{fp, lr}
   15ef4:	mov	fp, sp
   15ef8:	bl	17274 <__assert_fail@plt+0x61bc>
   15efc:	cmp	r0, #0
   15f00:	popne	{fp, pc}
   15f04:	bl	1642c <__assert_fail@plt+0x5374>
   15f08:	push	{fp, lr}
   15f0c:	mov	fp, sp
   15f10:	bl	17274 <__assert_fail@plt+0x61bc>
   15f14:	cmp	r0, #0
   15f18:	popne	{fp, pc}
   15f1c:	bl	1642c <__assert_fail@plt+0x5374>
   15f20:	push	{fp, lr}
   15f24:	mov	fp, sp
   15f28:	bl	17274 <__assert_fail@plt+0x61bc>
   15f2c:	cmp	r0, #0
   15f30:	popne	{fp, pc}
   15f34:	bl	1642c <__assert_fail@plt+0x5374>
   15f38:	push	{r4, r5, fp, lr}
   15f3c:	add	fp, sp, #8
   15f40:	mov	r4, r1
   15f44:	mov	r5, r0
   15f48:	bl	172a4 <__assert_fail@plt+0x61ec>
   15f4c:	cmp	r0, #0
   15f50:	popne	{r4, r5, fp, pc}
   15f54:	cmp	r5, #0
   15f58:	beq	15f68 <__assert_fail@plt+0x4eb0>
   15f5c:	cmp	r4, #0
   15f60:	bne	15f68 <__assert_fail@plt+0x4eb0>
   15f64:	pop	{r4, r5, fp, pc}
   15f68:	bl	1642c <__assert_fail@plt+0x5374>
   15f6c:	push	{fp, lr}
   15f70:	mov	fp, sp
   15f74:	cmp	r1, #0
   15f78:	orreq	r1, r1, #1
   15f7c:	bl	172a4 <__assert_fail@plt+0x61ec>
   15f80:	cmp	r0, #0
   15f84:	popne	{fp, pc}
   15f88:	bl	1642c <__assert_fail@plt+0x5374>
   15f8c:	push	{fp, lr}
   15f90:	mov	fp, sp
   15f94:	clz	r3, r2
   15f98:	lsr	ip, r3, #5
   15f9c:	clz	r3, r1
   15fa0:	lsr	r3, r3, #5
   15fa4:	orrs	r3, r3, ip
   15fa8:	movwne	r1, #1
   15fac:	movwne	r2, #1
   15fb0:	bl	175b8 <__assert_fail@plt+0x6500>
   15fb4:	cmp	r0, #0
   15fb8:	popne	{fp, pc}
   15fbc:	bl	1642c <__assert_fail@plt+0x5374>
   15fc0:	push	{fp, lr}
   15fc4:	mov	fp, sp
   15fc8:	mov	r2, r1
   15fcc:	mov	r1, r0
   15fd0:	mov	r0, #0
   15fd4:	bl	175b8 <__assert_fail@plt+0x6500>
   15fd8:	cmp	r0, #0
   15fdc:	popne	{fp, pc}
   15fe0:	bl	1642c <__assert_fail@plt+0x5374>
   15fe4:	push	{fp, lr}
   15fe8:	mov	fp, sp
   15fec:	mov	r2, r1
   15ff0:	mov	r1, r0
   15ff4:	clz	r0, r2
   15ff8:	clz	r3, r1
   15ffc:	lsr	r0, r0, #5
   16000:	lsr	r3, r3, #5
   16004:	orrs	r0, r3, r0
   16008:	mov	r0, #0
   1600c:	movwne	r1, #1
   16010:	movwne	r2, #1
   16014:	bl	175b8 <__assert_fail@plt+0x6500>
   16018:	cmp	r0, #0
   1601c:	popne	{fp, pc}
   16020:	bl	1642c <__assert_fail@plt+0x5374>
   16024:	push	{r4, r5, r6, sl, fp, lr}
   16028:	add	fp, sp, #16
   1602c:	ldr	r5, [r1]
   16030:	mov	r4, r1
   16034:	mov	r6, r0
   16038:	cmp	r0, #0
   1603c:	beq	16054 <__assert_fail@plt+0x4f9c>
   16040:	mov	r0, #1
   16044:	add	r0, r0, r5, lsr #1
   16048:	adds	r5, r5, r0
   1604c:	bcc	1605c <__assert_fail@plt+0x4fa4>
   16050:	b	16098 <__assert_fail@plt+0x4fe0>
   16054:	cmp	r5, #0
   16058:	movweq	r5, #64	; 0x40
   1605c:	mov	r0, r6
   16060:	mov	r1, r5
   16064:	mov	r2, #1
   16068:	bl	175b8 <__assert_fail@plt+0x6500>
   1606c:	cmp	r5, #0
   16070:	mov	r1, r5
   16074:	movwne	r1, #1
   16078:	cmp	r0, #0
   1607c:	bne	16090 <__assert_fail@plt+0x4fd8>
   16080:	clz	r2, r6
   16084:	lsr	r2, r2, #5
   16088:	orrs	r1, r2, r1
   1608c:	bne	16098 <__assert_fail@plt+0x4fe0>
   16090:	str	r5, [r4]
   16094:	pop	{r4, r5, r6, sl, fp, pc}
   16098:	bl	1642c <__assert_fail@plt+0x5374>
   1609c:	push	{r4, r5, r6, r7, fp, lr}
   160a0:	add	fp, sp, #16
   160a4:	ldr	r5, [r1]
   160a8:	mov	r6, r2
   160ac:	mov	r4, r1
   160b0:	mov	r7, r0
   160b4:	cmp	r0, #0
   160b8:	beq	160d0 <__assert_fail@plt+0x5018>
   160bc:	mov	r0, #1
   160c0:	add	r0, r0, r5, lsr #1
   160c4:	adds	r5, r5, r0
   160c8:	bcc	160e8 <__assert_fail@plt+0x5030>
   160cc:	b	1611c <__assert_fail@plt+0x5064>
   160d0:	cmp	r5, #0
   160d4:	bne	160e8 <__assert_fail@plt+0x5030>
   160d8:	mov	r0, #64	; 0x40
   160dc:	cmp	r6, #64	; 0x40
   160e0:	udiv	r5, r0, r6
   160e4:	addhi	r5, r5, #1
   160e8:	mov	r0, r7
   160ec:	mov	r1, r5
   160f0:	mov	r2, r6
   160f4:	bl	175b8 <__assert_fail@plt+0x6500>
   160f8:	cmp	r0, #0
   160fc:	bne	16114 <__assert_fail@plt+0x505c>
   16100:	cmp	r7, #0
   16104:	beq	1611c <__assert_fail@plt+0x5064>
   16108:	cmp	r6, #0
   1610c:	cmpne	r5, #0
   16110:	bne	1611c <__assert_fail@plt+0x5064>
   16114:	str	r5, [r4]
   16118:	pop	{r4, r5, r6, r7, fp, pc}
   1611c:	bl	1642c <__assert_fail@plt+0x5374>
   16120:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16124:	add	fp, sp, #24
   16128:	mov	r8, r1
   1612c:	ldr	r1, [r1]
   16130:	mov	r5, r0
   16134:	add	r0, r1, r1, asr #1
   16138:	cmp	r0, r1
   1613c:	mvnvs	r0, #-2147483648	; 0x80000000
   16140:	cmp	r0, r3
   16144:	mov	r7, r0
   16148:	movgt	r7, r3
   1614c:	cmn	r3, #1
   16150:	movle	r7, r0
   16154:	ldr	r0, [fp, #8]
   16158:	cmn	r0, #1
   1615c:	ble	16184 <__assert_fail@plt+0x50cc>
   16160:	cmp	r0, #0
   16164:	beq	161d8 <__assert_fail@plt+0x5120>
   16168:	cmn	r7, #1
   1616c:	ble	161ac <__assert_fail@plt+0x50f4>
   16170:	mvn	r4, #-2147483648	; 0x80000000
   16174:	udiv	r6, r4, r0
   16178:	cmp	r6, r7
   1617c:	bge	161d8 <__assert_fail@plt+0x5120>
   16180:	b	161e8 <__assert_fail@plt+0x5130>
   16184:	cmn	r7, #1
   16188:	ble	161c8 <__assert_fail@plt+0x5110>
   1618c:	cmn	r0, #1
   16190:	beq	161d8 <__assert_fail@plt+0x5120>
   16194:	mov	r6, #-2147483648	; 0x80000000
   16198:	mvn	r4, #-2147483648	; 0x80000000
   1619c:	sdiv	r6, r6, r0
   161a0:	cmp	r6, r7
   161a4:	bge	161d8 <__assert_fail@plt+0x5120>
   161a8:	b	161e8 <__assert_fail@plt+0x5130>
   161ac:	beq	161d8 <__assert_fail@plt+0x5120>
   161b0:	mov	r6, #-2147483648	; 0x80000000
   161b4:	mvn	r4, #-2147483648	; 0x80000000
   161b8:	sdiv	r6, r6, r7
   161bc:	cmp	r6, r0
   161c0:	bge	161d8 <__assert_fail@plt+0x5120>
   161c4:	b	161e8 <__assert_fail@plt+0x5130>
   161c8:	mvn	r4, #-2147483648	; 0x80000000
   161cc:	sdiv	r6, r4, r0
   161d0:	cmp	r7, r6
   161d4:	blt	161e8 <__assert_fail@plt+0x5130>
   161d8:	mul	r6, r7, r0
   161dc:	mov	r4, #64	; 0x40
   161e0:	cmp	r6, #63	; 0x3f
   161e4:	bgt	161f0 <__assert_fail@plt+0x5138>
   161e8:	sdiv	r7, r4, r0
   161ec:	mul	r6, r7, r0
   161f0:	cmp	r5, #0
   161f4:	moveq	r4, #0
   161f8:	streq	r4, [r8]
   161fc:	sub	r4, r7, r1
   16200:	cmp	r4, r2
   16204:	bge	162b0 <__assert_fail@plt+0x51f8>
   16208:	add	r7, r1, r2
   1620c:	mov	r6, #0
   16210:	mov	r2, #0
   16214:	cmp	r7, r3
   16218:	movwgt	r6, #1
   1621c:	cmn	r3, #1
   16220:	movwgt	r2, #1
   16224:	cmp	r7, r1
   16228:	bvs	162e4 <__assert_fail@plt+0x522c>
   1622c:	ands	r1, r2, r6
   16230:	bne	162e4 <__assert_fail@plt+0x522c>
   16234:	cmn	r0, #1
   16238:	ble	16260 <__assert_fail@plt+0x51a8>
   1623c:	cmp	r0, #0
   16240:	beq	162ac <__assert_fail@plt+0x51f4>
   16244:	cmn	r7, #1
   16248:	ble	16284 <__assert_fail@plt+0x51cc>
   1624c:	mvn	r1, #-2147483648	; 0x80000000
   16250:	udiv	r1, r1, r0
   16254:	cmp	r1, r7
   16258:	bge	162ac <__assert_fail@plt+0x51f4>
   1625c:	b	162e4 <__assert_fail@plt+0x522c>
   16260:	cmn	r7, #1
   16264:	ble	1629c <__assert_fail@plt+0x51e4>
   16268:	cmn	r0, #1
   1626c:	beq	162ac <__assert_fail@plt+0x51f4>
   16270:	mov	r1, #-2147483648	; 0x80000000
   16274:	sdiv	r1, r1, r0
   16278:	cmp	r1, r7
   1627c:	bge	162ac <__assert_fail@plt+0x51f4>
   16280:	b	162e4 <__assert_fail@plt+0x522c>
   16284:	beq	162ac <__assert_fail@plt+0x51f4>
   16288:	mov	r1, #-2147483648	; 0x80000000
   1628c:	sdiv	r1, r1, r7
   16290:	cmp	r1, r0
   16294:	bge	162ac <__assert_fail@plt+0x51f4>
   16298:	b	162e4 <__assert_fail@plt+0x522c>
   1629c:	mvn	r1, #-2147483648	; 0x80000000
   162a0:	sdiv	r1, r1, r0
   162a4:	cmp	r7, r1
   162a8:	blt	162e4 <__assert_fail@plt+0x522c>
   162ac:	mul	r6, r7, r0
   162b0:	mov	r0, r5
   162b4:	mov	r1, r6
   162b8:	bl	172a4 <__assert_fail@plt+0x61ec>
   162bc:	cmp	r6, #0
   162c0:	movwne	r6, #1
   162c4:	cmp	r0, #0
   162c8:	bne	162dc <__assert_fail@plt+0x5224>
   162cc:	clz	r1, r5
   162d0:	lsr	r1, r1, #5
   162d4:	orrs	r1, r1, r6
   162d8:	bne	162e4 <__assert_fail@plt+0x522c>
   162dc:	str	r7, [r8]
   162e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   162e4:	bl	1642c <__assert_fail@plt+0x5374>
   162e8:	push	{fp, lr}
   162ec:	mov	fp, sp
   162f0:	mov	r1, #1
   162f4:	bl	17220 <__assert_fail@plt+0x6168>
   162f8:	cmp	r0, #0
   162fc:	popne	{fp, pc}
   16300:	bl	1642c <__assert_fail@plt+0x5374>
   16304:	push	{fp, lr}
   16308:	mov	fp, sp
   1630c:	bl	17220 <__assert_fail@plt+0x6168>
   16310:	cmp	r0, #0
   16314:	popne	{fp, pc}
   16318:	bl	1642c <__assert_fail@plt+0x5374>
   1631c:	push	{fp, lr}
   16320:	mov	fp, sp
   16324:	mov	r1, #1
   16328:	bl	17220 <__assert_fail@plt+0x6168>
   1632c:	cmp	r0, #0
   16330:	popne	{fp, pc}
   16334:	bl	1642c <__assert_fail@plt+0x5374>
   16338:	push	{fp, lr}
   1633c:	mov	fp, sp
   16340:	bl	17220 <__assert_fail@plt+0x6168>
   16344:	cmp	r0, #0
   16348:	popne	{fp, pc}
   1634c:	bl	1642c <__assert_fail@plt+0x5374>
   16350:	push	{r4, r5, fp, lr}
   16354:	add	fp, sp, #8
   16358:	mov	r5, r0
   1635c:	mov	r0, r1
   16360:	mov	r4, r1
   16364:	bl	17274 <__assert_fail@plt+0x61bc>
   16368:	cmp	r0, #0
   1636c:	beq	16380 <__assert_fail@plt+0x52c8>
   16370:	mov	r1, r5
   16374:	mov	r2, r4
   16378:	pop	{r4, r5, fp, lr}
   1637c:	b	10e9c <memcpy@plt>
   16380:	bl	1642c <__assert_fail@plt+0x5374>
   16384:	push	{r4, r5, fp, lr}
   16388:	add	fp, sp, #8
   1638c:	mov	r5, r0
   16390:	mov	r0, r1
   16394:	mov	r4, r1
   16398:	bl	17274 <__assert_fail@plt+0x61bc>
   1639c:	cmp	r0, #0
   163a0:	beq	163b4 <__assert_fail@plt+0x52fc>
   163a4:	mov	r1, r5
   163a8:	mov	r2, r4
   163ac:	pop	{r4, r5, fp, lr}
   163b0:	b	10e9c <memcpy@plt>
   163b4:	bl	1642c <__assert_fail@plt+0x5374>
   163b8:	push	{r4, r5, fp, lr}
   163bc:	add	fp, sp, #8
   163c0:	mov	r5, r0
   163c4:	add	r0, r1, #1
   163c8:	mov	r4, r1
   163cc:	bl	17274 <__assert_fail@plt+0x61bc>
   163d0:	cmp	r0, #0
   163d4:	beq	163f0 <__assert_fail@plt+0x5338>
   163d8:	mov	r1, #0
   163dc:	mov	r2, r4
   163e0:	strb	r1, [r0, r4]
   163e4:	mov	r1, r5
   163e8:	pop	{r4, r5, fp, lr}
   163ec:	b	10e9c <memcpy@plt>
   163f0:	bl	1642c <__assert_fail@plt+0x5374>
   163f4:	push	{r4, r5, fp, lr}
   163f8:	add	fp, sp, #8
   163fc:	mov	r4, r0
   16400:	bl	10fc8 <strlen@plt>
   16404:	add	r5, r0, #1
   16408:	mov	r0, r5
   1640c:	bl	17274 <__assert_fail@plt+0x61bc>
   16410:	cmp	r0, #0
   16414:	beq	16428 <__assert_fail@plt+0x5370>
   16418:	mov	r1, r4
   1641c:	mov	r2, r5
   16420:	pop	{r4, r5, fp, lr}
   16424:	b	10e9c <memcpy@plt>
   16428:	bl	1642c <__assert_fail@plt+0x5374>
   1642c:	push	{fp, lr}
   16430:	mov	fp, sp
   16434:	movw	r0, #37108	; 0x90f4
   16438:	movw	r1, #34556	; 0x86fc
   1643c:	mov	r2, #5
   16440:	movt	r0, #2
   16444:	movt	r1, #1
   16448:	ldr	r4, [r0]
   1644c:	mov	r0, #0
   16450:	bl	10ecc <dcgettext@plt>
   16454:	movw	r2, #32421	; 0x7ea5
   16458:	mov	r3, r0
   1645c:	mov	r0, r4
   16460:	mov	r1, #0
   16464:	movt	r2, #1
   16468:	bl	10f50 <error@plt>
   1646c:	bl	110a0 <abort@plt>
   16470:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16474:	add	fp, sp, #24
   16478:	sub	sp, sp, #16
   1647c:	mov	r8, r0
   16480:	ldr	r0, [fp, #16]
   16484:	mov	r5, r3
   16488:	mov	r6, r2
   1648c:	mov	r2, r1
   16490:	add	r3, sp, #8
   16494:	mov	r1, #0
   16498:	str	r0, [sp]
   1649c:	mov	r0, r8
   164a0:	bl	1656c <__assert_fail@plt+0x54b4>
   164a4:	cmp	r0, #0
   164a8:	bne	16534 <__assert_fail@plt+0x547c>
   164ac:	ldr	r4, [sp, #8]
   164b0:	ldr	r7, [sp, #12]
   164b4:	subs	r0, r4, r6
   164b8:	sbcs	r0, r7, r5
   164bc:	bcc	164e0 <__assert_fail@plt+0x5428>
   164c0:	ldr	r1, [fp, #8]
   164c4:	ldr	r0, [fp, #12]
   164c8:	subs	r1, r1, r4
   164cc:	sbcs	r0, r0, r7
   164d0:	movcs	r0, r4
   164d4:	movcs	r1, r7
   164d8:	subcs	sp, fp, #24
   164dc:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   164e0:	bl	10fec <__errno_location@plt>
   164e4:	subs	r1, r4, #1073741824	; 0x40000000
   164e8:	sbcs	r1, r7, #0
   164ec:	movcc	r1, #34	; 0x22
   164f0:	movcs	r1, #75	; 0x4b
   164f4:	str	r1, [r0]
   164f8:	ldr	r6, [r0]
   164fc:	ldr	r4, [fp, #24]
   16500:	ldr	r5, [fp, #20]
   16504:	mov	r0, r8
   16508:	bl	157b4 <__assert_fail@plt+0x46fc>
   1650c:	subs	r1, r6, #22
   16510:	movw	r2, #32417	; 0x7ea1
   16514:	str	r0, [sp]
   16518:	mov	r3, r5
   1651c:	movne	r1, r6
   16520:	cmp	r4, #0
   16524:	movt	r2, #1
   16528:	movweq	r4, #1
   1652c:	mov	r0, r4
   16530:	bl	10f50 <error@plt>
   16534:	cmp	r0, #1
   16538:	beq	16550 <__assert_fail@plt+0x5498>
   1653c:	cmp	r0, #3
   16540:	bne	1655c <__assert_fail@plt+0x54a4>
   16544:	bl	10fec <__errno_location@plt>
   16548:	mov	r1, #0
   1654c:	b	164f4 <__assert_fail@plt+0x543c>
   16550:	bl	10fec <__errno_location@plt>
   16554:	mov	r1, #75	; 0x4b
   16558:	b	164f4 <__assert_fail@plt+0x543c>
   1655c:	bl	10fec <__errno_location@plt>
   16560:	b	164f8 <__assert_fail@plt+0x5440>
   16564:	mov	r1, #10
   16568:	b	16470 <__assert_fail@plt+0x53b8>
   1656c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16570:	add	fp, sp, #28
   16574:	sub	sp, sp, #44	; 0x2c
   16578:	cmp	r2, #37	; 0x25
   1657c:	bcs	17200 <__assert_fail@plt+0x6148>
   16580:	ldr	sl, [fp, #8]
   16584:	mov	r6, r2
   16588:	mov	r7, r1
   1658c:	mov	r4, r0
   16590:	str	r3, [sp, #36]	; 0x24
   16594:	bl	10fec <__errno_location@plt>
   16598:	mov	r5, r0
   1659c:	mov	r0, #0
   165a0:	str	r0, [r5]
   165a4:	bl	10fa4 <__ctype_b_loc@plt>
   165a8:	ldr	r1, [r0]
   165ac:	mov	r2, r4
   165b0:	ldrb	r0, [r2], #1
   165b4:	add	r3, r1, r0, lsl #1
   165b8:	ldrb	r3, [r3, #1]
   165bc:	tst	r3, #32
   165c0:	bne	165b0 <__assert_fail@plt+0x54f8>
   165c4:	cmp	r7, #0
   165c8:	sub	r9, fp, #32
   165cc:	mov	r8, #4
   165d0:	movne	r9, r7
   165d4:	cmp	r0, #45	; 0x2d
   165d8:	beq	16998 <__assert_fail@plt+0x58e0>
   165dc:	mov	r0, r4
   165e0:	mov	r1, r9
   165e4:	mov	r2, r6
   165e8:	mov	r3, #0
   165ec:	bl	10ea8 <__strtoull_internal@plt>
   165f0:	mov	r7, r1
   165f4:	ldr	r1, [r9]
   165f8:	cmp	r1, r4
   165fc:	beq	16634 <__assert_fail@plt+0x557c>
   16600:	mov	r6, r0
   16604:	ldr	r0, [r5]
   16608:	cmp	r0, #0
   1660c:	beq	16950 <__assert_fail@plt+0x5898>
   16610:	cmp	r0, #34	; 0x22
   16614:	bne	16998 <__assert_fail@plt+0x58e0>
   16618:	mov	r8, #1
   1661c:	cmp	sl, #0
   16620:	beq	171ec <__assert_fail@plt+0x6134>
   16624:	ldrb	r4, [r1]
   16628:	cmp	r4, #0
   1662c:	bne	16678 <__assert_fail@plt+0x55c0>
   16630:	b	171ec <__assert_fail@plt+0x6134>
   16634:	cmp	sl, #0
   16638:	beq	16998 <__assert_fail@plt+0x58e0>
   1663c:	mov	r5, r1
   16640:	ldrb	r1, [r4]
   16644:	cmp	r1, #0
   16648:	beq	16998 <__assert_fail@plt+0x58e0>
   1664c:	mov	r0, sl
   16650:	bl	10fd4 <strchr@plt>
   16654:	cmp	r0, #0
   16658:	beq	16998 <__assert_fail@plt+0x58e0>
   1665c:	mov	r1, r5
   16660:	mov	r8, #0
   16664:	mov	r6, #1
   16668:	mov	r7, #0
   1666c:	ldrb	r4, [r1]
   16670:	cmp	r4, #0
   16674:	beq	171ec <__assert_fail@plt+0x6134>
   16678:	str	r1, [sp, #32]
   1667c:	mov	r0, sl
   16680:	mov	r1, r4
   16684:	bl	10fd4 <strchr@plt>
   16688:	cmp	r0, #0
   1668c:	beq	1698c <__assert_fail@plt+0x58d4>
   16690:	sub	r0, r4, #69	; 0x45
   16694:	mov	r1, #1
   16698:	mov	r3, #0
   1669c:	mov	r5, #1024	; 0x400
   166a0:	cmp	r0, #47	; 0x2f
   166a4:	str	r1, [sp, #28]
   166a8:	bhi	167ac <__assert_fail@plt+0x56f4>
   166ac:	add	r1, pc, #0
   166b0:	ldr	pc, [r1, r0, lsl #2]
   166b4:	andeq	r6, r1, r4, ror r7
   166b8:	andeq	r6, r1, ip, lsr #15
   166bc:	andeq	r6, r1, r4, ror r7
   166c0:	andeq	r6, r1, ip, lsr #15
   166c4:	andeq	r6, r1, ip, lsr #15
   166c8:	andeq	r6, r1, ip, lsr #15
   166cc:	andeq	r6, r1, r4, ror r7
   166d0:	andeq	r6, r1, ip, lsr #15
   166d4:	andeq	r6, r1, r4, ror r7
   166d8:	andeq	r6, r1, ip, lsr #15
   166dc:	andeq	r6, r1, ip, lsr #15
   166e0:	andeq	r6, r1, r4, ror r7
   166e4:	andeq	r6, r1, ip, lsr #15
   166e8:	andeq	r6, r1, ip, lsr #15
   166ec:	andeq	r6, r1, ip, lsr #15
   166f0:	andeq	r6, r1, r4, ror r7
   166f4:	andeq	r6, r1, ip, lsr #15
   166f8:	andeq	r6, r1, ip, lsr #15
   166fc:	andeq	r6, r1, ip, lsr #15
   16700:	andeq	r6, r1, ip, lsr #15
   16704:	andeq	r6, r1, r4, ror r7
   16708:	andeq	r6, r1, r4, ror r7
   1670c:	andeq	r6, r1, ip, lsr #15
   16710:	andeq	r6, r1, ip, lsr #15
   16714:	andeq	r6, r1, ip, lsr #15
   16718:	andeq	r6, r1, ip, lsr #15
   1671c:	andeq	r6, r1, ip, lsr #15
   16720:	andeq	r6, r1, ip, lsr #15
   16724:	andeq	r6, r1, ip, lsr #15
   16728:	andeq	r6, r1, ip, lsr #15
   1672c:	andeq	r6, r1, ip, lsr #15
   16730:	andeq	r6, r1, ip, lsr #15
   16734:	andeq	r6, r1, ip, lsr #15
   16738:	andeq	r6, r1, ip, lsr #15
   1673c:	andeq	r6, r1, r4, ror r7
   16740:	andeq	r6, r1, ip, lsr #15
   16744:	andeq	r6, r1, ip, lsr #15
   16748:	andeq	r6, r1, ip, lsr #15
   1674c:	andeq	r6, r1, r4, ror r7
   16750:	andeq	r6, r1, ip, lsr #15
   16754:	andeq	r6, r1, r4, ror r7
   16758:	andeq	r6, r1, ip, lsr #15
   1675c:	andeq	r6, r1, ip, lsr #15
   16760:	andeq	r6, r1, ip, lsr #15
   16764:	andeq	r6, r1, ip, lsr #15
   16768:	andeq	r6, r1, ip, lsr #15
   1676c:	andeq	r6, r1, ip, lsr #15
   16770:	andeq	r6, r1, r4, ror r7
   16774:	mov	r0, sl
   16778:	mov	r1, #48	; 0x30
   1677c:	bl	10fd4 <strchr@plt>
   16780:	cmp	r0, #0
   16784:	beq	167a8 <__assert_fail@plt+0x56f0>
   16788:	ldr	r1, [sp, #32]
   1678c:	ldrb	r0, [r1, #1]
   16790:	cmp	r0, #66	; 0x42
   16794:	cmpne	r0, #68	; 0x44
   16798:	bne	16960 <__assert_fail@plt+0x58a8>
   1679c:	mov	r5, #1000	; 0x3e8
   167a0:	mov	r0, #2
   167a4:	str	r0, [sp, #28]
   167a8:	mov	r3, #0
   167ac:	sub	r0, r4, #66	; 0x42
   167b0:	cmp	r0, #53	; 0x35
   167b4:	bhi	1698c <__assert_fail@plt+0x58d4>
   167b8:	add	r1, pc, #0
   167bc:	ldr	pc, [r1, r0, lsl #2]
   167c0:	strdeq	r6, [r1], -ip
   167c4:	andeq	r6, r1, ip, lsl #19
   167c8:	andeq	r6, r1, ip, lsl #19
   167cc:	andeq	r6, r1, r4, lsr #26
   167d0:	andeq	r6, r1, ip, lsl #19
   167d4:	muleq	r1, r8, r8
   167d8:	andeq	r6, r1, ip, lsl #19
   167dc:	andeq	r6, r1, ip, lsl #19
   167e0:	andeq	r6, r1, ip, lsl #19
   167e4:	andeq	r6, r1, r4, lsr #19
   167e8:	andeq	r6, r1, ip, lsl #19
   167ec:	andeq	r6, r1, ip, ror #19
   167f0:	andeq	r6, r1, ip, lsl #19
   167f4:	andeq	r6, r1, ip, lsl #19
   167f8:	andeq	r6, r1, r8, ror lr
   167fc:	andeq	r6, r1, ip, lsl #19
   16800:	andeq	r6, r1, ip, lsl #19
   16804:	andeq	r6, r1, ip, lsl #19
   16808:	andeq	r6, r1, r8, ror sl
   1680c:	andeq	r6, r1, ip, lsl #19
   16810:	andeq	r6, r1, ip, lsl #19
   16814:	andeq	r6, r1, ip, lsl #19
   16818:	andeq	r6, r1, ip, lsl #19
   1681c:	andeq	r6, r1, r0, lsr #31
   16820:	andeq	r6, r1, r0, ror #22
   16824:	andeq	r6, r1, ip, lsl #19
   16828:	andeq	r6, r1, ip, lsl #19
   1682c:	andeq	r6, r1, ip, lsl #19
   16830:	andeq	r6, r1, ip, lsl #19
   16834:	andeq	r6, r1, ip, lsl #19
   16838:	andeq	r6, r1, ip, lsl #19
   1683c:	andeq	r6, r1, ip, lsl #19
   16840:	andeq	r7, r1, r4, ror r1
   16844:	andeq	r7, r1, ip, asr #3
   16848:	andeq	r6, r1, ip, lsl #19
   1684c:	andeq	r6, r1, ip, lsl #19
   16850:	andeq	r6, r1, ip, lsl #19
   16854:	muleq	r1, r8, r8
   16858:	andeq	r6, r1, ip, lsl #19
   1685c:	andeq	r6, r1, ip, lsl #19
   16860:	andeq	r6, r1, ip, lsl #19
   16864:	andeq	r6, r1, r4, lsr #19
   16868:	andeq	r6, r1, ip, lsl #19
   1686c:	andeq	r6, r1, ip, ror #19
   16870:	andeq	r6, r1, ip, lsl #19
   16874:	andeq	r6, r1, ip, lsl #19
   16878:	andeq	r6, r1, ip, lsl #19
   1687c:	andeq	r6, r1, ip, lsl #19
   16880:	andeq	r6, r1, ip, lsl #19
   16884:	andeq	r6, r1, ip, lsl #19
   16888:	andeq	r6, r1, r8, ror sl
   1688c:	andeq	r6, r1, ip, lsl #19
   16890:	andeq	r6, r1, ip, lsl #19
   16894:	andeq	r7, r1, r8, lsr #3
   16898:	mvn	r0, #0
   1689c:	mvn	r1, #0
   168a0:	mov	r2, r5
   168a4:	mov	sl, r3
   168a8:	bl	177d4 <__assert_fail@plt+0x671c>
   168ac:	subs	r3, r0, r6
   168b0:	umull	r4, r2, r6, r5
   168b4:	mov	lr, #0
   168b8:	str	r1, [sp, #20]
   168bc:	sbcs	r3, r1, r7
   168c0:	movwcc	lr, #1
   168c4:	mla	ip, r6, sl, r2
   168c8:	mov	r2, r1
   168cc:	mov	r2, #0
   168d0:	cmp	lr, #0
   168d4:	mla	r7, r7, r5, ip
   168d8:	mvnne	r4, #0
   168dc:	mvnne	r7, #0
   168e0:	subs	r6, r0, r4
   168e4:	sbcs	r6, r1, r7
   168e8:	umull	r3, r6, r4, r5
   168ec:	movwcc	r2, #1
   168f0:	cmp	r2, #0
   168f4:	mvnne	r3, #0
   168f8:	cmp	r2, #0
   168fc:	str	r6, [sp, #16]
   16900:	umull	r6, ip, r3, r5
   16904:	mla	r1, r3, sl, ip
   16908:	ldr	ip, [sp, #16]
   1690c:	str	r1, [sp, #12]
   16910:	mla	r4, r4, sl, ip
   16914:	mla	r4, r7, r5, r4
   16918:	mvnne	r4, #0
   1691c:	subs	r0, r0, r3
   16920:	ldr	r0, [sp, #20]
   16924:	ldr	r7, [sp, #12]
   16928:	sbcs	r0, r0, r4
   1692c:	mov	r0, #0
   16930:	mla	r7, r4, r5, r7
   16934:	movwcc	r0, #1
   16938:	cmp	r0, #0
   1693c:	mov	r1, r0
   16940:	orr	r0, lr, r2
   16944:	mvnne	r7, #0
   16948:	mvnne	r6, #0
   1694c:	b	16f98 <__assert_fail@plt+0x5ee0>
   16950:	mov	r8, r0
   16954:	cmp	sl, #0
   16958:	bne	16624 <__assert_fail@plt+0x556c>
   1695c:	b	171ec <__assert_fail@plt+0x6134>
   16960:	cmp	r0, #105	; 0x69
   16964:	mov	r3, #0
   16968:	bne	167ac <__assert_fail@plt+0x56f4>
   1696c:	ldrb	r0, [r1, #2]
   16970:	mov	r1, #1
   16974:	cmp	r0, #66	; 0x42
   16978:	movweq	r1, #3
   1697c:	str	r1, [sp, #28]
   16980:	sub	r0, r4, #66	; 0x42
   16984:	cmp	r0, #53	; 0x35
   16988:	bls	167b8 <__assert_fail@plt+0x5700>
   1698c:	ldr	r0, [sp, #36]	; 0x24
   16990:	orr	r8, r8, #2
   16994:	strd	r6, [r0]
   16998:	mov	r0, r8
   1699c:	sub	sp, fp, #28
   169a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169a4:	mvn	r0, #0
   169a8:	mvn	r1, #0
   169ac:	mov	r2, r5
   169b0:	mov	r4, r3
   169b4:	bl	177d4 <__assert_fail@plt+0x671c>
   169b8:	subs	r0, r0, r6
   169bc:	mov	r2, #0
   169c0:	sbcs	r0, r1, r7
   169c4:	umull	r0, r1, r6, r5
   169c8:	movwcc	r2, #1
   169cc:	cmp	r2, #0
   169d0:	mla	r1, r6, r4, r1
   169d4:	mov	r3, r2
   169d8:	mvnne	r0, #0
   169dc:	mla	r7, r7, r5, r1
   169e0:	mvnne	r7, #0
   169e4:	mov	r6, r0
   169e8:	b	171cc <__assert_fail@plt+0x6114>
   169ec:	mvn	r0, #0
   169f0:	mvn	r1, #0
   169f4:	mov	r2, r5
   169f8:	str	r3, [sp, #24]
   169fc:	bl	177d4 <__assert_fail@plt+0x671c>
   16a00:	subs	r3, r0, r6
   16a04:	mov	ip, r0
   16a08:	umull	r4, r0, r6, r5
   16a0c:	mov	sl, #0
   16a10:	sbcs	r3, r1, r7
   16a14:	mov	r3, #0
   16a18:	movwcc	r3, #1
   16a1c:	cmp	r3, #0
   16a20:	str	r0, [sp, #20]
   16a24:	ldr	r0, [sp, #24]
   16a28:	mvnne	r4, #0
   16a2c:	cmp	r3, #0
   16a30:	umull	lr, r2, r4, r5
   16a34:	mla	r2, r4, r0, r2
   16a38:	str	r2, [sp, #16]
   16a3c:	ldr	r2, [sp, #20]
   16a40:	mla	r6, r6, r0, r2
   16a44:	ldr	r0, [sp, #16]
   16a48:	mla	r6, r7, r5, r6
   16a4c:	mvnne	r6, #0
   16a50:	mla	r7, r6, r5, r0
   16a54:	subs	r0, ip, r4
   16a58:	sbcs	r0, r1, r6
   16a5c:	movwcc	sl, #1
   16a60:	cmp	sl, #0
   16a64:	orr	r3, r3, sl
   16a68:	mvnne	lr, #0
   16a6c:	mvnne	r7, #0
   16a70:	mov	r6, lr
   16a74:	b	171cc <__assert_fail@plt+0x6114>
   16a78:	mvn	r0, #0
   16a7c:	mvn	r1, #0
   16a80:	mov	r2, r5
   16a84:	mov	sl, r3
   16a88:	bl	177d4 <__assert_fail@plt+0x671c>
   16a8c:	subs	r3, r0, r6
   16a90:	mov	ip, r1
   16a94:	umull	r2, lr, r6, r5
   16a98:	str	r0, [sp, #20]
   16a9c:	sbcs	r3, r1, r7
   16aa0:	mov	r1, #0
   16aa4:	str	ip, [sp, #16]
   16aa8:	movwcc	r1, #1
   16aac:	mla	r6, r6, sl, lr
   16ab0:	mov	lr, #0
   16ab4:	cmp	r1, #0
   16ab8:	mla	r7, r7, r5, r6
   16abc:	mvnne	r2, #0
   16ac0:	cmp	r1, #0
   16ac4:	umull	r3, r4, r2, r5
   16ac8:	mvnne	r7, #0
   16acc:	mla	r4, r2, sl, r4
   16ad0:	subs	r2, r0, r2
   16ad4:	sbcs	r2, ip, r7
   16ad8:	mla	r4, r7, r5, r4
   16adc:	mov	r2, #0
   16ae0:	movwcc	lr, #1
   16ae4:	cmp	lr, #0
   16ae8:	mvnne	r3, #0
   16aec:	mvnne	r4, #0
   16af0:	subs	r7, r0, r3
   16af4:	mov	r0, r5
   16af8:	sbcs	r7, ip, r4
   16afc:	umull	r5, r7, r3, r5
   16b00:	movwcc	r2, #1
   16b04:	cmp	r2, #0
   16b08:	mla	r3, r3, sl, r7
   16b0c:	mvnne	r5, #0
   16b10:	cmp	r2, #0
   16b14:	mla	r3, r4, r0, r3
   16b18:	umull	r6, ip, r5, r0
   16b1c:	mvnne	r3, #0
   16b20:	mla	ip, r5, sl, ip
   16b24:	mla	r7, r3, r0, ip
   16b28:	ldr	r0, [sp, #20]
   16b2c:	subs	r0, r0, r5
   16b30:	ldr	r0, [sp, #16]
   16b34:	sbcs	r0, r0, r3
   16b38:	mov	r0, #0
   16b3c:	movwcc	r0, #1
   16b40:	cmp	r0, #0
   16b44:	mov	r3, r0
   16b48:	orr	r0, r1, lr
   16b4c:	orr	r0, r0, r2
   16b50:	mvnne	r7, #0
   16b54:	mvnne	r6, #0
   16b58:	orr	r3, r0, r3
   16b5c:	b	171cc <__assert_fail@plt+0x6114>
   16b60:	mvn	r0, #0
   16b64:	mvn	r1, #0
   16b68:	mov	r2, r5
   16b6c:	mov	r4, r3
   16b70:	str	r3, [sp, #24]
   16b74:	bl	177d4 <__assert_fail@plt+0x671c>
   16b78:	umull	r3, r2, r6, r5
   16b7c:	mla	r2, r6, r4, r2
   16b80:	subs	r6, r0, r6
   16b84:	sbcs	r6, r1, r7
   16b88:	mov	r6, #0
   16b8c:	mla	r2, r7, r5, r2
   16b90:	mov	r7, #0
   16b94:	movwcc	r6, #1
   16b98:	cmp	r6, #0
   16b9c:	str	r6, [sp, #20]
   16ba0:	mvnne	r3, #0
   16ba4:	mvnne	r2, #0
   16ba8:	subs	r4, r0, r3
   16bac:	umull	r6, ip, r3, r5
   16bb0:	sbcs	r4, r1, r2
   16bb4:	ldr	r4, [sp, #24]
   16bb8:	movwcc	r7, #1
   16bbc:	cmp	r7, #0
   16bc0:	mov	lr, r7
   16bc4:	str	r7, [sp, #16]
   16bc8:	mvnne	r6, #0
   16bcc:	cmp	lr, #0
   16bd0:	mov	lr, #0
   16bd4:	umull	sl, r7, r6, r5
   16bd8:	mla	r3, r3, r4, ip
   16bdc:	mla	r2, r2, r5, r3
   16be0:	mvnne	r2, #0
   16be4:	subs	r3, r0, r6
   16be8:	mla	r7, r6, r4, r7
   16bec:	mov	r4, r0
   16bf0:	mov	r0, #0
   16bf4:	mla	r7, r2, r5, r7
   16bf8:	sbcs	r2, r1, r2
   16bfc:	mov	r3, r4
   16c00:	movwcc	r0, #1
   16c04:	str	r3, [sp, #4]
   16c08:	cmp	r0, #0
   16c0c:	str	r0, [sp, #12]
   16c10:	mov	r0, r1
   16c14:	mvnne	sl, #0
   16c18:	mvnne	r7, #0
   16c1c:	str	r0, [sp, #8]
   16c20:	subs	r2, r4, sl
   16c24:	ldr	r4, [sp, #24]
   16c28:	sbcs	r2, r1, r7
   16c2c:	umull	r6, r2, sl, r5
   16c30:	movwcc	lr, #1
   16c34:	cmp	lr, #0
   16c38:	mvnne	r6, #0
   16c3c:	mla	r2, sl, r4, r2
   16c40:	cmp	lr, #0
   16c44:	umull	r1, ip, r6, r5
   16c48:	mla	r2, r7, r5, r2
   16c4c:	mvnne	r2, #0
   16c50:	mla	ip, r6, r4, ip
   16c54:	subs	r6, r3, r6
   16c58:	mla	r7, r2, r5, ip
   16c5c:	sbcs	r2, r0, r2
   16c60:	mov	ip, #0
   16c64:	mov	r2, #0
   16c68:	movwcc	ip, #1
   16c6c:	cmp	ip, #0
   16c70:	mvnne	r1, #0
   16c74:	mvnne	r7, #0
   16c78:	subs	r6, r3, r1
   16c7c:	ldr	r3, [sp, #24]
   16c80:	sbcs	r6, r0, r7
   16c84:	umull	r0, sl, r1, r5
   16c88:	movwcc	r2, #1
   16c8c:	cmp	r2, #0
   16c90:	mvnne	r0, #0
   16c94:	mla	r1, r1, r3, sl
   16c98:	cmp	r2, #0
   16c9c:	umull	r6, r4, r0, r5
   16ca0:	mla	r1, r7, r5, r1
   16ca4:	mvnne	r1, #0
   16ca8:	mla	r4, r0, r3, r4
   16cac:	ldr	r3, [sp, #4]
   16cb0:	mla	r7, r1, r5, r4
   16cb4:	ldr	r5, [sp, #16]
   16cb8:	subs	r0, r3, r0
   16cbc:	ldr	r0, [sp, #8]
   16cc0:	sbcs	r0, r0, r1
   16cc4:	mov	r0, #0
   16cc8:	movwcc	r0, #1
   16ccc:	cmp	r0, #0
   16cd0:	mov	r1, r0
   16cd4:	ldr	r0, [sp, #20]
   16cd8:	mvnne	r7, #0
   16cdc:	mvnne	r6, #0
   16ce0:	orr	r0, r0, r5
   16ce4:	ldr	r5, [sp, #12]
   16ce8:	orr	r0, r0, r5
   16cec:	orr	r0, r0, lr
   16cf0:	orr	r0, r0, ip
   16cf4:	orr	r0, r0, r2
   16cf8:	b	17168 <__assert_fail@plt+0x60b0>
   16cfc:	mov	r1, #0
   16d00:	lsl	r2, r7, #10
   16d04:	lsl	r0, r6, #10
   16d08:	lsr	r3, r7, #22
   16d0c:	cmp	r1, r7, lsr #22
   16d10:	orr	r2, r2, r6, lsr #22
   16d14:	mvnne	r0, #0
   16d18:	movwne	r3, #1
   16d1c:	cmp	r1, r7, lsr #22
   16d20:	b	17198 <__assert_fail@plt+0x60e0>
   16d24:	mvn	r0, #0
   16d28:	mvn	r1, #0
   16d2c:	mov	r2, r5
   16d30:	mov	sl, r3
   16d34:	bl	177d4 <__assert_fail@plt+0x671c>
   16d38:	subs	r2, r0, r6
   16d3c:	mov	ip, r0
   16d40:	mov	r0, #0
   16d44:	sbcs	r2, r1, r7
   16d48:	umull	r4, r2, r6, r5
   16d4c:	movwcc	r0, #1
   16d50:	cmp	r0, #0
   16d54:	mla	r2, r6, sl, r2
   16d58:	str	r0, [sp, #20]
   16d5c:	mvnne	r4, #0
   16d60:	cmp	r0, #0
   16d64:	mla	r2, r7, r5, r2
   16d68:	mov	r0, #0
   16d6c:	umull	lr, r3, r4, r5
   16d70:	mvnne	r2, #0
   16d74:	mla	r3, r4, sl, r3
   16d78:	mla	r6, r2, r5, r3
   16d7c:	subs	r3, ip, r4
   16d80:	mov	r3, r1
   16d84:	sbcs	r2, r1, r2
   16d88:	str	r3, [sp, #8]
   16d8c:	movwcc	r0, #1
   16d90:	cmp	r0, #0
   16d94:	str	r0, [sp, #16]
   16d98:	mov	r0, ip
   16d9c:	mvnne	lr, #0
   16da0:	mvnne	r6, #0
   16da4:	str	r0, [sp, #12]
   16da8:	subs	r2, ip, lr
   16dac:	umull	r7, r4, lr, r5
   16db0:	sbcs	r2, r1, r6
   16db4:	mov	r2, #0
   16db8:	movwcc	r2, #1
   16dbc:	mla	r4, lr, sl, r4
   16dc0:	cmp	r2, #0
   16dc4:	mla	r6, r6, r5, r4
   16dc8:	mov	r4, #0
   16dcc:	mvnne	r7, #0
   16dd0:	cmp	r2, #0
   16dd4:	umull	r1, ip, r7, r5
   16dd8:	mvnne	r6, #0
   16ddc:	mla	ip, r7, sl, ip
   16de0:	subs	r7, r0, r7
   16de4:	sbcs	r7, r3, r6
   16de8:	mla	lr, r6, r5, ip
   16dec:	mov	ip, #0
   16df0:	movwcc	ip, #1
   16df4:	cmp	ip, #0
   16df8:	mvnne	r1, #0
   16dfc:	mvnne	lr, #0
   16e00:	subs	r7, r0, r1
   16e04:	sbcs	r7, r3, lr
   16e08:	umull	r0, r7, r1, r5
   16e0c:	movwcc	r4, #1
   16e10:	cmp	r4, #0
   16e14:	mla	r1, r1, sl, r7
   16e18:	mvnne	r0, #0
   16e1c:	cmp	r4, #0
   16e20:	mla	r1, lr, r5, r1
   16e24:	umull	r6, r3, r0, r5
   16e28:	mvnne	r1, #0
   16e2c:	mla	r3, r0, sl, r3
   16e30:	mla	r7, r1, r5, r3
   16e34:	ldr	r3, [sp, #12]
   16e38:	subs	r0, r3, r0
   16e3c:	ldr	r0, [sp, #8]
   16e40:	ldr	r3, [sp, #16]
   16e44:	sbcs	r0, r0, r1
   16e48:	mov	r0, #0
   16e4c:	movwcc	r0, #1
   16e50:	cmp	r0, #0
   16e54:	mov	r1, r0
   16e58:	ldr	r0, [sp, #20]
   16e5c:	mvnne	r7, #0
   16e60:	mvnne	r6, #0
   16e64:	orr	r0, r0, r3
   16e68:	orr	r0, r0, r2
   16e6c:	orr	r0, r0, ip
   16e70:	orr	r0, r0, r4
   16e74:	b	16f98 <__assert_fail@plt+0x5ee0>
   16e78:	mvn	r0, #0
   16e7c:	mvn	r1, #0
   16e80:	mov	r2, r5
   16e84:	mov	sl, r3
   16e88:	bl	177d4 <__assert_fail@plt+0x671c>
   16e8c:	umull	r3, r2, r6, r5
   16e90:	mov	lr, r1
   16e94:	mov	r1, r0
   16e98:	mla	r2, r6, sl, r2
   16e9c:	subs	r6, r0, r6
   16ea0:	mov	r0, #0
   16ea4:	sbcs	r6, lr, r7
   16ea8:	mla	r2, r7, r5, r2
   16eac:	movwcc	r0, #1
   16eb0:	cmp	r0, #0
   16eb4:	str	r0, [sp, #20]
   16eb8:	mov	r0, r1
   16ebc:	mvnne	r3, #0
   16ec0:	mvnne	r2, #0
   16ec4:	str	r0, [sp, #16]
   16ec8:	subs	r4, r1, r3
   16ecc:	umull	r7, ip, r3, r5
   16ed0:	sbcs	r4, lr, r2
   16ed4:	mov	r4, #0
   16ed8:	movwcc	r4, #1
   16edc:	mla	r3, r3, sl, ip
   16ee0:	mov	ip, #0
   16ee4:	cmp	r4, #0
   16ee8:	mla	r2, r2, r5, r3
   16eec:	mvnne	r7, #0
   16ef0:	cmp	r4, #0
   16ef4:	umull	r1, r6, r7, r5
   16ef8:	mvnne	r2, #0
   16efc:	mla	r6, r7, sl, r6
   16f00:	mla	r3, r2, r5, r6
   16f04:	subs	r6, r0, r7
   16f08:	sbcs	r2, lr, r2
   16f0c:	mov	r2, #0
   16f10:	movwcc	ip, #1
   16f14:	cmp	ip, #0
   16f18:	mvnne	r1, #0
   16f1c:	mvnne	r3, #0
   16f20:	subs	r6, r0, r1
   16f24:	sbcs	r6, lr, r3
   16f28:	umull	r0, r6, r1, r5
   16f2c:	movwcc	r2, #1
   16f30:	cmp	r2, #0
   16f34:	mvnne	r0, #0
   16f38:	cmp	r2, #0
   16f3c:	str	r6, [sp, #12]
   16f40:	umull	r6, r7, r0, r5
   16f44:	mla	r7, r0, sl, r7
   16f48:	str	r7, [sp, #8]
   16f4c:	ldr	r7, [sp, #12]
   16f50:	mla	r1, r1, sl, r7
   16f54:	mla	r1, r3, r5, r1
   16f58:	ldr	r3, [sp, #8]
   16f5c:	mvnne	r1, #0
   16f60:	mla	r7, r1, r5, r3
   16f64:	ldr	r3, [sp, #16]
   16f68:	subs	r0, r3, r0
   16f6c:	sbcs	r0, lr, r1
   16f70:	mov	r0, #0
   16f74:	movwcc	r0, #1
   16f78:	cmp	r0, #0
   16f7c:	mov	r1, r0
   16f80:	ldr	r0, [sp, #20]
   16f84:	mvnne	r7, #0
   16f88:	mvnne	r6, #0
   16f8c:	orr	r0, r0, r4
   16f90:	orr	r0, r0, ip
   16f94:	orr	r0, r0, r2
   16f98:	orr	r3, r0, r1
   16f9c:	b	171cc <__assert_fail@plt+0x6114>
   16fa0:	mvn	r0, #0
   16fa4:	mvn	r1, #0
   16fa8:	mov	r2, r5
   16fac:	mov	sl, r3
   16fb0:	bl	177d4 <__assert_fail@plt+0x671c>
   16fb4:	mov	ip, r1
   16fb8:	subs	r1, r0, r6
   16fbc:	umull	r3, lr, r6, r5
   16fc0:	mov	r2, r5
   16fc4:	sbcs	r1, ip, r7
   16fc8:	mov	r1, #0
   16fcc:	str	ip, [sp, #4]
   16fd0:	movwcc	r1, #1
   16fd4:	mla	r6, r6, sl, lr
   16fd8:	cmp	r1, #0
   16fdc:	mla	r7, r7, r2, r6
   16fe0:	str	r1, [sp, #20]
   16fe4:	mvnne	r3, #0
   16fe8:	cmp	r1, #0
   16fec:	mov	r1, r0
   16ff0:	umull	r4, r5, r3, r5
   16ff4:	mvnne	r7, #0
   16ff8:	mov	lr, r1
   16ffc:	mla	r5, r3, sl, r5
   17000:	subs	r3, r0, r3
   17004:	sbcs	r0, ip, r7
   17008:	mov	r0, #0
   1700c:	mla	r5, r7, r2, r5
   17010:	movwcc	r0, #1
   17014:	cmp	r0, #0
   17018:	str	r0, [sp, #16]
   1701c:	mvnne	r4, #0
   17020:	mvnne	r5, #0
   17024:	subs	r0, r1, r4
   17028:	mov	r1, #0
   1702c:	sbcs	r0, ip, r5
   17030:	umull	r3, r0, r4, r2
   17034:	movwcc	r1, #1
   17038:	cmp	r1, #0
   1703c:	mla	r0, r4, sl, r0
   17040:	mov	r4, lr
   17044:	str	r1, [sp, #12]
   17048:	mvnne	r3, #0
   1704c:	cmp	r1, #0
   17050:	mla	r0, r5, r2, r0
   17054:	str	r4, [sp]
   17058:	umull	r7, r6, r3, r2
   1705c:	mvnne	r0, #0
   17060:	mla	r6, r3, sl, r6
   17064:	subs	r3, lr, r3
   17068:	mov	r3, #0
   1706c:	mla	r5, r0, r2, r6
   17070:	sbcs	r0, ip, r0
   17074:	mov	r0, #0
   17078:	movwcc	r0, #1
   1707c:	cmp	r0, #0
   17080:	str	r0, [sp, #8]
   17084:	mvnne	r7, #0
   17088:	mvnne	r5, #0
   1708c:	subs	r0, lr, r7
   17090:	sbcs	r0, ip, r5
   17094:	umull	r6, r0, r7, r2
   17098:	movwcc	r3, #1
   1709c:	cmp	r3, #0
   170a0:	mla	r7, r7, sl, r0
   170a4:	mov	r0, ip
   170a8:	mvnne	r6, #0
   170ac:	cmp	r3, #0
   170b0:	mla	r7, r5, r2, r7
   170b4:	mov	r5, #0
   170b8:	umull	r1, lr, r6, r2
   170bc:	mvnne	r7, #0
   170c0:	mla	lr, r6, sl, lr
   170c4:	subs	r6, r4, r6
   170c8:	mla	lr, r7, r2, lr
   170cc:	sbcs	r7, ip, r7
   170d0:	mov	ip, #0
   170d4:	movwcc	ip, #1
   170d8:	cmp	ip, #0
   170dc:	mvnne	r1, #0
   170e0:	mvnne	lr, #0
   170e4:	subs	r7, r4, r1
   170e8:	sbcs	r7, r0, lr
   170ec:	umull	r0, r7, r1, r2
   170f0:	movwcc	r5, #1
   170f4:	cmp	r5, #0
   170f8:	mla	r1, r1, sl, r7
   170fc:	mvnne	r0, #0
   17100:	cmp	r5, #0
   17104:	mla	r1, lr, r2, r1
   17108:	umull	r6, r4, r0, r2
   1710c:	mvnne	r1, #0
   17110:	mla	r4, r0, sl, r4
   17114:	mla	r7, r1, r2, r4
   17118:	ldr	r2, [sp]
   1711c:	subs	r0, r2, r0
   17120:	ldr	r0, [sp, #4]
   17124:	ldr	r2, [sp, #16]
   17128:	sbcs	r0, r0, r1
   1712c:	mov	r0, #0
   17130:	movwcc	r0, #1
   17134:	cmp	r0, #0
   17138:	mov	r1, r0
   1713c:	ldr	r0, [sp, #20]
   17140:	mvnne	r7, #0
   17144:	mvnne	r6, #0
   17148:	orr	r0, r0, r2
   1714c:	ldr	r2, [sp, #12]
   17150:	orr	r0, r0, r2
   17154:	ldr	r2, [sp, #8]
   17158:	orr	r0, r0, r2
   1715c:	orr	r0, r0, r3
   17160:	orr	r0, r0, ip
   17164:	orr	r0, r0, r5
   17168:	orr	r0, r0, r1
   1716c:	and	r3, r0, #1
   17170:	b	171cc <__assert_fail@plt+0x6114>
   17174:	mov	r1, #0
   17178:	lsl	r2, r7, #9
   1717c:	lsl	r0, r6, #9
   17180:	lsr	r3, r7, #23
   17184:	cmp	r1, r7, lsr #23
   17188:	orr	r2, r2, r6, lsr #23
   1718c:	mvnne	r0, #0
   17190:	movwne	r3, #1
   17194:	cmp	r1, r7, lsr #23
   17198:	mvnne	r2, #0
   1719c:	mov	r6, r0
   171a0:	mov	r7, r2
   171a4:	b	171cc <__assert_fail@plt+0x6114>
   171a8:	lsl	r1, r7, #1
   171ac:	cmp	r7, #0
   171b0:	lsl	r0, r6, #1
   171b4:	lsr	r3, r7, #31
   171b8:	orr	r1, r1, r6, lsr #31
   171bc:	mvnmi	r0, #0
   171c0:	mvnmi	r1, #0
   171c4:	mov	r6, r0
   171c8:	mov	r7, r1
   171cc:	ldr	r1, [sp, #32]
   171d0:	ldr	r2, [sp, #28]
   171d4:	orr	r8, r3, r8
   171d8:	add	r0, r1, r2
   171dc:	str	r0, [r9]
   171e0:	ldrb	r0, [r1, r2]
   171e4:	cmp	r0, #0
   171e8:	orrne	r8, r8, #2
   171ec:	ldr	r0, [sp, #36]	; 0x24
   171f0:	strd	r6, [r0]
   171f4:	mov	r0, r8
   171f8:	sub	sp, fp, #28
   171fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17200:	movw	r0, #34573	; 0x870d
   17204:	movw	r1, #34611	; 0x8733
   17208:	movw	r3, #34627	; 0x8743
   1720c:	mov	r2, #85	; 0x55
   17210:	movt	r0, #1
   17214:	movt	r1, #1
   17218:	movt	r3, #1
   1721c:	bl	110b8 <__assert_fail@plt>
   17220:	clz	r2, r1
   17224:	clz	r3, r0
   17228:	lsr	r2, r2, #5
   1722c:	lsr	r3, r3, #5
   17230:	orrs	r2, r3, r2
   17234:	movwne	r1, #1
   17238:	movwne	r0, #1
   1723c:	cmp	r1, #0
   17240:	beq	17270 <__assert_fail@plt+0x61b8>
   17244:	mvn	r2, #-2147483648	; 0x80000000
   17248:	udiv	r2, r2, r1
   1724c:	cmp	r2, r0
   17250:	bcs	17270 <__assert_fail@plt+0x61b8>
   17254:	push	{fp, lr}
   17258:	mov	fp, sp
   1725c:	bl	10fec <__errno_location@plt>
   17260:	mov	r1, #12
   17264:	str	r1, [r0]
   17268:	mov	r0, #0
   1726c:	pop	{fp, pc}
   17270:	b	10e3c <calloc@plt>
   17274:	cmp	r0, #0
   17278:	movweq	r0, #1
   1727c:	cmn	r0, #1
   17280:	ble	17288 <__assert_fail@plt+0x61d0>
   17284:	b	10f68 <malloc@plt>
   17288:	push	{fp, lr}
   1728c:	mov	fp, sp
   17290:	bl	10fec <__errno_location@plt>
   17294:	mov	r1, #12
   17298:	str	r1, [r0]
   1729c:	mov	r0, #0
   172a0:	pop	{fp, pc}
   172a4:	push	{fp, lr}
   172a8:	mov	fp, sp
   172ac:	cmp	r0, #0
   172b0:	beq	172cc <__assert_fail@plt+0x6214>
   172b4:	cmp	r1, #0
   172b8:	beq	172d8 <__assert_fail@plt+0x6220>
   172bc:	cmn	r1, #1
   172c0:	ble	172e4 <__assert_fail@plt+0x622c>
   172c4:	pop	{fp, lr}
   172c8:	b	10ed8 <realloc@plt>
   172cc:	mov	r0, r1
   172d0:	pop	{fp, lr}
   172d4:	b	17274 <__assert_fail@plt+0x61bc>
   172d8:	bl	13634 <__assert_fail@plt+0x257c>
   172dc:	mov	r0, #0
   172e0:	pop	{fp, pc}
   172e4:	bl	10fec <__errno_location@plt>
   172e8:	mov	r1, #12
   172ec:	str	r1, [r0]
   172f0:	mov	r0, #0
   172f4:	pop	{fp, pc}
   172f8:	push	{r4, r5, r6, sl, fp, lr}
   172fc:	add	fp, sp, #16
   17300:	mov	r4, r0
   17304:	bl	10f38 <__fpending@plt>
   17308:	ldr	r6, [r4]
   1730c:	mov	r5, r0
   17310:	mov	r0, r4
   17314:	bl	1737c <__assert_fail@plt+0x62c4>
   17318:	tst	r6, #32
   1731c:	bne	17354 <__assert_fail@plt+0x629c>
   17320:	cmp	r0, #0
   17324:	mov	r4, r0
   17328:	mvnne	r4, #0
   1732c:	cmp	r5, #0
   17330:	bne	17360 <__assert_fail@plt+0x62a8>
   17334:	cmp	r0, #0
   17338:	beq	17360 <__assert_fail@plt+0x62a8>
   1733c:	bl	10fec <__errno_location@plt>
   17340:	ldr	r0, [r0]
   17344:	subs	r4, r0, #9
   17348:	mvnne	r4, #0
   1734c:	mov	r0, r4
   17350:	pop	{r4, r5, r6, sl, fp, pc}
   17354:	mvn	r4, #0
   17358:	cmp	r0, #0
   1735c:	beq	17368 <__assert_fail@plt+0x62b0>
   17360:	mov	r0, r4
   17364:	pop	{r4, r5, r6, sl, fp, pc}
   17368:	bl	10fec <__errno_location@plt>
   1736c:	mov	r1, #0
   17370:	str	r1, [r0]
   17374:	mov	r0, r4
   17378:	pop	{r4, r5, r6, sl, fp, pc}
   1737c:	push	{r4, r5, r6, sl, fp, lr}
   17380:	add	fp, sp, #16
   17384:	sub	sp, sp, #8
   17388:	mov	r4, r0
   1738c:	bl	1101c <fileno@plt>
   17390:	cmn	r0, #1
   17394:	ble	17408 <__assert_fail@plt+0x6350>
   17398:	mov	r0, r4
   1739c:	bl	10f80 <__freading@plt>
   173a0:	cmp	r0, #0
   173a4:	beq	173d0 <__assert_fail@plt+0x6318>
   173a8:	mov	r0, r4
   173ac:	bl	1101c <fileno@plt>
   173b0:	mov	r1, #1
   173b4:	mov	r2, #0
   173b8:	mov	r3, #0
   173bc:	str	r1, [sp]
   173c0:	bl	10f20 <lseek64@plt>
   173c4:	and	r0, r0, r1
   173c8:	cmn	r0, #1
   173cc:	beq	17408 <__assert_fail@plt+0x6350>
   173d0:	mov	r0, r4
   173d4:	bl	17418 <__assert_fail@plt+0x6360>
   173d8:	cmp	r0, #0
   173dc:	beq	17408 <__assert_fail@plt+0x6350>
   173e0:	bl	10fec <__errno_location@plt>
   173e4:	ldr	r6, [r0]
   173e8:	mov	r5, r0
   173ec:	mov	r0, r4
   173f0:	bl	11040 <fclose@plt>
   173f4:	cmp	r6, #0
   173f8:	strne	r6, [r5]
   173fc:	mvnne	r0, #0
   17400:	sub	sp, fp, #16
   17404:	pop	{r4, r5, r6, sl, fp, pc}
   17408:	mov	r0, r4
   1740c:	sub	sp, fp, #16
   17410:	pop	{r4, r5, r6, sl, fp, lr}
   17414:	b	11040 <fclose@plt>
   17418:	push	{r4, sl, fp, lr}
   1741c:	add	fp, sp, #8
   17420:	sub	sp, sp, #8
   17424:	mov	r4, r0
   17428:	cmp	r0, #0
   1742c:	beq	17464 <__assert_fail@plt+0x63ac>
   17430:	mov	r0, r4
   17434:	bl	10f80 <__freading@plt>
   17438:	cmp	r0, #0
   1743c:	beq	17464 <__assert_fail@plt+0x63ac>
   17440:	ldrb	r0, [r4, #1]
   17444:	tst	r0, #1
   17448:	beq	17464 <__assert_fail@plt+0x63ac>
   1744c:	mov	r0, #1
   17450:	mov	r2, #0
   17454:	mov	r3, #0
   17458:	str	r0, [sp]
   1745c:	mov	r0, r4
   17460:	bl	17474 <__assert_fail@plt+0x63bc>
   17464:	mov	r0, r4
   17468:	sub	sp, fp, #8
   1746c:	pop	{r4, sl, fp, lr}
   17470:	b	10e78 <fflush@plt>
   17474:	push	{r4, r5, r6, r7, fp, lr}
   17478:	add	fp, sp, #16
   1747c:	sub	sp, sp, #8
   17480:	mov	r4, r0
   17484:	ldr	r0, [r0, #4]
   17488:	mov	r5, r3
   1748c:	mov	r6, r2
   17490:	ldr	r1, [r4, #8]
   17494:	cmp	r1, r0
   17498:	bne	174b4 <__assert_fail@plt+0x63fc>
   1749c:	ldrd	r0, [r4, #16]
   174a0:	cmp	r1, r0
   174a4:	bne	174b4 <__assert_fail@plt+0x63fc>
   174a8:	ldr	r0, [r4, #36]	; 0x24
   174ac:	cmp	r0, #0
   174b0:	beq	174cc <__assert_fail@plt+0x6414>
   174b4:	mov	r0, r4
   174b8:	mov	r2, r6
   174bc:	mov	r3, r5
   174c0:	sub	sp, fp, #16
   174c4:	pop	{r4, r5, r6, r7, fp, lr}
   174c8:	b	1104c <fseeko64@plt>
   174cc:	ldr	r7, [fp, #8]
   174d0:	mov	r0, r4
   174d4:	bl	1101c <fileno@plt>
   174d8:	mov	r2, r6
   174dc:	mov	r3, r5
   174e0:	str	r7, [sp]
   174e4:	bl	10f20 <lseek64@plt>
   174e8:	and	r2, r0, r1
   174ec:	cmn	r2, #1
   174f0:	beq	17510 <__assert_fail@plt+0x6458>
   174f4:	strd	r0, [r4, #80]	; 0x50
   174f8:	ldr	r0, [r4]
   174fc:	bic	r0, r0, #16
   17500:	str	r0, [r4]
   17504:	mov	r0, #0
   17508:	sub	sp, fp, #16
   1750c:	pop	{r4, r5, r6, r7, fp, pc}
   17510:	mvn	r0, #0
   17514:	sub	sp, fp, #16
   17518:	pop	{r4, r5, r6, r7, fp, pc}
   1751c:	push	{fp, lr}
   17520:	mov	fp, sp
   17524:	mov	r0, #14
   17528:	bl	11070 <nl_langinfo@plt>
   1752c:	movw	r1, #32889	; 0x8079
   17530:	cmp	r0, #0
   17534:	movt	r1, #1
   17538:	movne	r1, r0
   1753c:	movw	r0, #34706	; 0x8792
   17540:	ldrb	r2, [r1]
   17544:	movt	r0, #1
   17548:	cmp	r2, #0
   1754c:	movne	r0, r1
   17550:	pop	{fp, pc}
   17554:	push	{r4, r5, r6, r7, fp, lr}
   17558:	add	fp, sp, #16
   1755c:	sub	sp, sp, #8
   17560:	cmp	r0, #0
   17564:	add	r5, sp, #4
   17568:	mov	r7, r2
   1756c:	mov	r4, r1
   17570:	movne	r5, r0
   17574:	mov	r0, r5
   17578:	bl	10f44 <mbrtowc@plt>
   1757c:	mov	r6, r0
   17580:	cmp	r7, #0
   17584:	beq	175ac <__assert_fail@plt+0x64f4>
   17588:	cmn	r6, #2
   1758c:	bcc	175ac <__assert_fail@plt+0x64f4>
   17590:	mov	r0, #0
   17594:	bl	175f4 <__assert_fail@plt+0x653c>
   17598:	cmp	r0, #0
   1759c:	bne	175ac <__assert_fail@plt+0x64f4>
   175a0:	ldrb	r0, [r4]
   175a4:	mov	r6, #1
   175a8:	str	r0, [r5]
   175ac:	mov	r0, r6
   175b0:	sub	sp, fp, #16
   175b4:	pop	{r4, r5, r6, r7, fp, pc}
   175b8:	cmp	r2, #0
   175bc:	beq	175ec <__assert_fail@plt+0x6534>
   175c0:	mvn	r3, #0
   175c4:	udiv	r3, r3, r2
   175c8:	cmp	r3, r1
   175cc:	bcs	175ec <__assert_fail@plt+0x6534>
   175d0:	push	{fp, lr}
   175d4:	mov	fp, sp
   175d8:	bl	10fec <__errno_location@plt>
   175dc:	mov	r1, #12
   175e0:	str	r1, [r0]
   175e4:	mov	r0, #0
   175e8:	pop	{fp, pc}
   175ec:	mul	r1, r2, r1
   175f0:	b	172a4 <__assert_fail@plt+0x61ec>
   175f4:	push	{r4, sl, fp, lr}
   175f8:	add	fp, sp, #8
   175fc:	sub	sp, sp, #264	; 0x108
   17600:	add	r1, sp, #7
   17604:	movw	r2, #257	; 0x101
   17608:	bl	17660 <__assert_fail@plt+0x65a8>
   1760c:	mov	r4, #0
   17610:	cmp	r0, #0
   17614:	bne	17654 <__assert_fail@plt+0x659c>
   17618:	movw	r1, #34712	; 0x8798
   1761c:	add	r0, sp, #7
   17620:	mov	r2, #2
   17624:	movt	r1, #1
   17628:	bl	10fbc <bcmp@plt>
   1762c:	cmp	r0, #0
   17630:	beq	17654 <__assert_fail@plt+0x659c>
   17634:	movw	r1, #34714	; 0x879a
   17638:	add	r0, sp, #7
   1763c:	mov	r2, #6
   17640:	movt	r1, #1
   17644:	bl	10fbc <bcmp@plt>
   17648:	cmp	r0, #0
   1764c:	mov	r4, r0
   17650:	movwne	r4, #1
   17654:	mov	r0, r4
   17658:	sub	sp, fp, #8
   1765c:	pop	{r4, sl, fp, pc}
   17660:	push	{r4, r5, r6, r7, fp, lr}
   17664:	add	fp, sp, #16
   17668:	mov	r4, r1
   1766c:	mov	r1, #0
   17670:	mov	r6, r2
   17674:	bl	11058 <setlocale@plt>
   17678:	cmp	r0, #0
   1767c:	beq	176ac <__assert_fail@plt+0x65f4>
   17680:	mov	r7, r0
   17684:	bl	10fc8 <strlen@plt>
   17688:	cmp	r0, r6
   1768c:	bcs	176c8 <__assert_fail@plt+0x6610>
   17690:	add	r2, r0, #1
   17694:	mov	r0, r4
   17698:	mov	r1, r7
   1769c:	bl	10e9c <memcpy@plt>
   176a0:	mov	r5, #0
   176a4:	mov	r0, r5
   176a8:	pop	{r4, r5, r6, r7, fp, pc}
   176ac:	mov	r5, #22
   176b0:	cmp	r6, #0
   176b4:	beq	176f0 <__assert_fail@plt+0x6638>
   176b8:	mov	r0, #0
   176bc:	strb	r0, [r4]
   176c0:	mov	r0, r5
   176c4:	pop	{r4, r5, r6, r7, fp, pc}
   176c8:	mov	r5, #34	; 0x22
   176cc:	cmp	r6, #0
   176d0:	beq	176f0 <__assert_fail@plt+0x6638>
   176d4:	sub	r6, r6, #1
   176d8:	mov	r0, r4
   176dc:	mov	r1, r7
   176e0:	mov	r2, r6
   176e4:	bl	10e9c <memcpy@plt>
   176e8:	mov	r0, #0
   176ec:	strb	r0, [r4, r6]
   176f0:	mov	r0, r5
   176f4:	pop	{r4, r5, r6, r7, fp, pc}
   176f8:	mov	r1, #0
   176fc:	b	11058 <setlocale@plt>
   17700:	cmp	r3, #0
   17704:	cmpeq	r2, #0
   17708:	bne	1772c <__assert_fail@plt+0x6674>
   1770c:	cmp	r1, #0
   17710:	movlt	r1, #-2147483648	; 0x80000000
   17714:	movlt	r0, #0
   17718:	blt	17728 <__assert_fail@plt+0x6670>
   1771c:	cmpeq	r0, #0
   17720:	mvnne	r1, #-2147483648	; 0x80000000
   17724:	mvnne	r0, #0
   17728:	b	17810 <__assert_fail@plt+0x6758>
   1772c:	sub	sp, sp, #8
   17730:	push	{sp, lr}
   17734:	cmp	r1, #0
   17738:	blt	17758 <__assert_fail@plt+0x66a0>
   1773c:	cmp	r3, #0
   17740:	blt	1778c <__assert_fail@plt+0x66d4>
   17744:	bl	17820 <__assert_fail@plt+0x6768>
   17748:	ldr	lr, [sp, #4]
   1774c:	add	sp, sp, #8
   17750:	pop	{r2, r3}
   17754:	bx	lr
   17758:	rsbs	r0, r0, #0
   1775c:	sbc	r1, r1, r1, lsl #1
   17760:	cmp	r3, #0
   17764:	blt	177b0 <__assert_fail@plt+0x66f8>
   17768:	bl	17820 <__assert_fail@plt+0x6768>
   1776c:	ldr	lr, [sp, #4]
   17770:	add	sp, sp, #8
   17774:	pop	{r2, r3}
   17778:	rsbs	r0, r0, #0
   1777c:	sbc	r1, r1, r1, lsl #1
   17780:	rsbs	r2, r2, #0
   17784:	sbc	r3, r3, r3, lsl #1
   17788:	bx	lr
   1778c:	rsbs	r2, r2, #0
   17790:	sbc	r3, r3, r3, lsl #1
   17794:	bl	17820 <__assert_fail@plt+0x6768>
   17798:	ldr	lr, [sp, #4]
   1779c:	add	sp, sp, #8
   177a0:	pop	{r2, r3}
   177a4:	rsbs	r0, r0, #0
   177a8:	sbc	r1, r1, r1, lsl #1
   177ac:	bx	lr
   177b0:	rsbs	r2, r2, #0
   177b4:	sbc	r3, r3, r3, lsl #1
   177b8:	bl	17820 <__assert_fail@plt+0x6768>
   177bc:	ldr	lr, [sp, #4]
   177c0:	add	sp, sp, #8
   177c4:	pop	{r2, r3}
   177c8:	rsbs	r2, r2, #0
   177cc:	sbc	r3, r3, r3, lsl #1
   177d0:	bx	lr
   177d4:	cmp	r3, #0
   177d8:	cmpeq	r2, #0
   177dc:	bne	177f4 <__assert_fail@plt+0x673c>
   177e0:	cmp	r1, #0
   177e4:	cmpeq	r0, #0
   177e8:	mvnne	r1, #0
   177ec:	mvnne	r0, #0
   177f0:	b	17810 <__assert_fail@plt+0x6758>
   177f4:	sub	sp, sp, #8
   177f8:	push	{sp, lr}
   177fc:	bl	17820 <__assert_fail@plt+0x6768>
   17800:	ldr	lr, [sp, #4]
   17804:	add	sp, sp, #8
   17808:	pop	{r2, r3}
   1780c:	bx	lr
   17810:	push	{r1, lr}
   17814:	mov	r0, #8
   17818:	bl	10e54 <raise@plt>
   1781c:	pop	{r1, pc}
   17820:	cmp	r1, r3
   17824:	cmpeq	r0, r2
   17828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1782c:	mov	r4, r0
   17830:	movcc	r0, #0
   17834:	mov	r5, r1
   17838:	ldr	lr, [sp, #36]	; 0x24
   1783c:	movcc	r1, r0
   17840:	bcc	1793c <__assert_fail@plt+0x6884>
   17844:	cmp	r3, #0
   17848:	clzeq	ip, r2
   1784c:	clzne	ip, r3
   17850:	addeq	ip, ip, #32
   17854:	cmp	r5, #0
   17858:	clzeq	r1, r4
   1785c:	addeq	r1, r1, #32
   17860:	clzne	r1, r5
   17864:	sub	ip, ip, r1
   17868:	sub	sl, ip, #32
   1786c:	lsl	r9, r3, ip
   17870:	rsb	fp, ip, #32
   17874:	orr	r9, r9, r2, lsl sl
   17878:	orr	r9, r9, r2, lsr fp
   1787c:	lsl	r8, r2, ip
   17880:	cmp	r5, r9
   17884:	cmpeq	r4, r8
   17888:	movcc	r0, #0
   1788c:	movcc	r1, r0
   17890:	bcc	178ac <__assert_fail@plt+0x67f4>
   17894:	mov	r0, #1
   17898:	subs	r4, r4, r8
   1789c:	lsl	r1, r0, sl
   178a0:	orr	r1, r1, r0, lsr fp
   178a4:	lsl	r0, r0, ip
   178a8:	sbc	r5, r5, r9
   178ac:	cmp	ip, #0
   178b0:	beq	1793c <__assert_fail@plt+0x6884>
   178b4:	lsr	r6, r8, #1
   178b8:	orr	r6, r6, r9, lsl #31
   178bc:	lsr	r7, r9, #1
   178c0:	mov	r2, ip
   178c4:	b	178e8 <__assert_fail@plt+0x6830>
   178c8:	subs	r3, r4, r6
   178cc:	sbc	r8, r5, r7
   178d0:	adds	r3, r3, r3
   178d4:	adc	r8, r8, r8
   178d8:	adds	r4, r3, #1
   178dc:	adc	r5, r8, #0
   178e0:	subs	r2, r2, #1
   178e4:	beq	17904 <__assert_fail@plt+0x684c>
   178e8:	cmp	r5, r7
   178ec:	cmpeq	r4, r6
   178f0:	bcs	178c8 <__assert_fail@plt+0x6810>
   178f4:	adds	r4, r4, r4
   178f8:	adc	r5, r5, r5
   178fc:	subs	r2, r2, #1
   17900:	bne	178e8 <__assert_fail@plt+0x6830>
   17904:	lsr	r3, r4, ip
   17908:	orr	r3, r3, r5, lsl fp
   1790c:	lsr	r2, r5, ip
   17910:	orr	r3, r3, r5, lsr sl
   17914:	adds	r0, r0, r4
   17918:	mov	r4, r3
   1791c:	lsl	r3, r2, ip
   17920:	orr	r3, r3, r4, lsl sl
   17924:	lsl	ip, r4, ip
   17928:	orr	r3, r3, r4, lsr fp
   1792c:	adc	r1, r1, r5
   17930:	subs	r0, r0, ip
   17934:	mov	r5, r2
   17938:	sbc	r1, r1, r3
   1793c:	cmp	lr, #0
   17940:	strdne	r4, [lr]
   17944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17948:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1794c:	mov	r7, r0
   17950:	ldr	r6, [pc, #72]	; 179a0 <__assert_fail@plt+0x68e8>
   17954:	ldr	r5, [pc, #72]	; 179a4 <__assert_fail@plt+0x68ec>
   17958:	add	r6, pc, r6
   1795c:	add	r5, pc, r5
   17960:	sub	r6, r6, r5
   17964:	mov	r8, r1
   17968:	mov	r9, r2
   1796c:	bl	10e1c <calloc@plt-0x20>
   17970:	asrs	r6, r6, #2
   17974:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17978:	mov	r4, #0
   1797c:	add	r4, r4, #1
   17980:	ldr	r3, [r5], #4
   17984:	mov	r2, r9
   17988:	mov	r1, r8
   1798c:	mov	r0, r7
   17990:	blx	r3
   17994:	cmp	r6, r4
   17998:	bne	1797c <__assert_fail@plt+0x68c4>
   1799c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   179a0:	andeq	r1, r1, ip, lsr #11
   179a4:	andeq	r1, r1, r4, lsr #11
   179a8:	bx	lr
   179ac:	ldr	r3, [pc, #12]	; 179c0 <__assert_fail@plt+0x6908>
   179b0:	mov	r1, #0
   179b4:	add	r3, pc, r3
   179b8:	ldr	r2, [r3]
   179bc:	b	10ff8 <__cxa_atexit@plt>
   179c0:	andeq	r1, r1, r0, lsr r7

Disassembly of section .fini:

000179c4 <.fini>:
   179c4:	push	{r3, lr}
   179c8:	pop	{r3, pc}
