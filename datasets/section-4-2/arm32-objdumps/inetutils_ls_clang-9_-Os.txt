
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010cb8 <.init>:
   10cb8:	push	{r3, lr}
   10cbc:	bl	10f9c <__assert_fail@plt+0x48>
   10cc0:	pop	{r3, pc}

Disassembly of section .plt:

00010cc4 <fstatfs64@plt-0x14>:
   10cc4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc8:	ldr	lr, [pc, #4]	; 10cd4 <fstatfs64@plt-0x4>
   10ccc:	add	lr, pc, lr
   10cd0:	ldr	pc, [lr, #8]!
   10cd4:	andeq	r7, r1, ip, lsr #6

00010cd8 <fstatfs64@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #812]!	; 0x32c

00010ce4 <calloc@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #804]!	; 0x324

00010cf0 <raise@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #796]!	; 0x31c

00010cfc <strcmp@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #788]!	; 0x314

00010d08 <getpwuid@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #780]!	; 0x30c

00010d14 <printf@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #772]!	; 0x304

00010d20 <getuid@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #94208	; 0x17000
   10d28:	ldr	pc, [ip, #764]!	; 0x2fc

00010d2c <memmove@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #94208	; 0x17000
   10d34:	ldr	pc, [ip, #756]!	; 0x2f4

00010d38 <free@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #94208	; 0x17000
   10d40:	ldr	pc, [ip, #748]!	; 0x2ec

00010d44 <memcpy@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #94208	; 0x17000
   10d4c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d50 <time@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #94208	; 0x17000
   10d58:	ldr	pc, [ip, #732]!	; 0x2dc

00010d5c <ctime@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #94208	; 0x17000
   10d64:	ldr	pc, [ip, #724]!	; 0x2d4

00010d68 <realloc@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #94208	; 0x17000
   10d70:	ldr	pc, [ip, #716]!	; 0x2cc

00010d74 <funlockfile@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #94208	; 0x17000
   10d7c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d80 <__fxstatat64@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #94208	; 0x17000
   10d88:	ldr	pc, [ip, #700]!	; 0x2bc

00010d8c <__fxstat64@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #94208	; 0x17000
   10d94:	ldr	pc, [ip, #692]!	; 0x2b4

00010d98 <readlink@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #94208	; 0x17000
   10da0:	ldr	pc, [ip, #684]!	; 0x2ac

00010da4 <fwrite@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #94208	; 0x17000
   10dac:	ldr	pc, [ip, #676]!	; 0x2a4

00010db0 <ioctl@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #94208	; 0x17000
   10db8:	ldr	pc, [ip, #668]!	; 0x29c

00010dbc <strcpy@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #94208	; 0x17000
   10dc4:	ldr	pc, [ip, #660]!	; 0x294

00010dc8 <open64@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #94208	; 0x17000
   10dd0:	ldr	pc, [ip, #652]!	; 0x28c

00010dd4 <getenv@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #644]!	; 0x284

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #94208	; 0x17000
   10de8:	ldr	pc, [ip, #636]!	; 0x27c

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #94208	; 0x17000
   10df4:	ldr	pc, [ip, #628]!	; 0x274

00010df8 <strerror@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #94208	; 0x17000
   10e00:	ldr	pc, [ip, #620]!	; 0x26c

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #94208	; 0x17000
   10e0c:	ldr	pc, [ip, #612]!	; 0x264

00010e10 <__ctype_b_loc@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #94208	; 0x17000
   10e18:	ldr	pc, [ip, #604]!	; 0x25c

00010e1c <strlen@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #94208	; 0x17000
   10e24:	ldr	pc, [ip, #596]!	; 0x254

00010e28 <strchr@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #94208	; 0x17000
   10e30:	ldr	pc, [ip, #588]!	; 0x24c

00010e34 <openat64@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #94208	; 0x17000
   10e3c:	ldr	pc, [ip, #580]!	; 0x244

00010e40 <fprintf@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #572]!	; 0x23c

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #564]!	; 0x234

00010e58 <snprintf@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #556]!	; 0x22c

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #548]!	; 0x224

00010e70 <putchar@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #540]!	; 0x21c

00010e7c <fcntl64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #532]!	; 0x214

00010e88 <strrchr@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #524]!	; 0x20c

00010e94 <fputc@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #516]!	; 0x204

00010ea0 <readdir64@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #508]!	; 0x1fc

00010eac <fdopendir@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #500]!	; 0x1f4

00010eb8 <dirfd@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec4 <flockfile@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed0 <atoi@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #476]!	; 0x1dc

00010edc <fchdir@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #468]!	; 0x1d4

00010ee8 <qsort@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef4 <__xstat64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #452]!	; 0x1c4

00010f00 <isatty@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #444]!	; 0x1bc

00010f0c <strncmp@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #436]!	; 0x1b4

00010f18 <abort@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #428]!	; 0x1ac

00010f24 <close@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #420]!	; 0x1a4

00010f30 <__lxstat64@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #412]!	; 0x19c

00010f3c <closedir@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #404]!	; 0x194

00010f48 <getgrgid@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #396]!	; 0x18c

00010f54 <__assert_fail@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #388]!	; 0x184

Disassembly of section .text:

00010f60 <.text>:
   10f60:	mov	fp, #0
   10f64:	mov	lr, #0
   10f68:	pop	{r1}		; (ldr r1, [sp], #4)
   10f6c:	mov	r2, sp
   10f70:	push	{r2}		; (str r2, [sp, #-4]!)
   10f74:	push	{r0}		; (str r0, [sp, #-4]!)
   10f78:	ldr	ip, [pc, #16]	; 10f90 <__assert_fail@plt+0x3c>
   10f7c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f80:	ldr	r0, [pc, #12]	; 10f94 <__assert_fail@plt+0x40>
   10f84:	ldr	r3, [pc, #12]	; 10f98 <__assert_fail@plt+0x44>
   10f88:	bl	10dec <__libc_start_main@plt>
   10f8c:	bl	10f18 <abort@plt>
   10f90:	andeq	r7, r1, r0, lsr #11
   10f94:	andeq	r1, r1, r0, asr r0
   10f98:	andeq	r7, r1, r0, asr #10
   10f9c:	ldr	r3, [pc, #20]	; 10fb8 <__assert_fail@plt+0x64>
   10fa0:	ldr	r2, [pc, #20]	; 10fbc <__assert_fail@plt+0x68>
   10fa4:	add	r3, pc, r3
   10fa8:	ldr	r2, [r3, r2]
   10fac:	cmp	r2, #0
   10fb0:	bxeq	lr
   10fb4:	b	10e04 <__gmon_start__@plt>
   10fb8:	andeq	r7, r1, r4, asr r0
   10fbc:	andeq	r0, r0, r4, ror #1
   10fc0:	ldr	r0, [pc, #24]	; 10fe0 <__assert_fail@plt+0x8c>
   10fc4:	ldr	r3, [pc, #24]	; 10fe4 <__assert_fail@plt+0x90>
   10fc8:	cmp	r3, r0
   10fcc:	bxeq	lr
   10fd0:	ldr	r3, [pc, #16]	; 10fe8 <__assert_fail@plt+0x94>
   10fd4:	cmp	r3, #0
   10fd8:	bxeq	lr
   10fdc:	bx	r3
   10fe0:	andeq	r8, r2, r0, lsl r1
   10fe4:	andeq	r8, r2, r0, lsl r1
   10fe8:	andeq	r0, r0, r0
   10fec:	ldr	r0, [pc, #36]	; 11018 <__assert_fail@plt+0xc4>
   10ff0:	ldr	r1, [pc, #36]	; 1101c <__assert_fail@plt+0xc8>
   10ff4:	sub	r1, r1, r0
   10ff8:	asr	r1, r1, #2
   10ffc:	add	r1, r1, r1, lsr #31
   11000:	asrs	r1, r1, #1
   11004:	bxeq	lr
   11008:	ldr	r3, [pc, #16]	; 11020 <__assert_fail@plt+0xcc>
   1100c:	cmp	r3, #0
   11010:	bxeq	lr
   11014:	bx	r3
   11018:	andeq	r8, r2, r0, lsl r1
   1101c:	andeq	r8, r2, r0, lsl r1
   11020:	andeq	r0, r0, r0
   11024:	push	{r4, lr}
   11028:	ldr	r4, [pc, #24]	; 11048 <__assert_fail@plt+0xf4>
   1102c:	ldrb	r3, [r4]
   11030:	cmp	r3, #0
   11034:	popne	{r4, pc}
   11038:	bl	10fc0 <__assert_fail@plt+0x6c>
   1103c:	mov	r3, #1
   11040:	strb	r3, [r4]
   11044:	pop	{r4, pc}
   11048:	andeq	r8, r2, r4, lsl r1
   1104c:	b	10fec <__assert_fail@plt+0x98>
   11050:	b	11054 <__assert_fail@plt+0x100>
   11054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11058:	add	fp, sp, #28
   1105c:	sub	sp, sp, #12
   11060:	mov	r4, r1
   11064:	movw	r1, #33052	; 0x811c
   11068:	mov	r5, r0
   1106c:	mov	r0, #0
   11070:	movw	r9, #33120	; 0x8160
   11074:	movw	r8, #33160	; 0x8188
   11078:	movw	r6, #33116	; 0x815c
   1107c:	mov	r7, #1
   11080:	movt	r1, #2
   11084:	movt	r9, #2
   11088:	movt	r8, #2
   1108c:	movt	r6, #2
   11090:	strb	r0, [r1]
   11094:	movw	r1, #33132	; 0x816c
   11098:	str	r0, [r9]
   1109c:	str	r0, [r8]
   110a0:	str	r0, [r6]
   110a4:	movt	r1, #2
   110a8:	str	r0, [r1]
   110ac:	movw	r1, #33124	; 0x8164
   110b0:	movt	r1, #2
   110b4:	str	r0, [r1]
   110b8:	movw	r1, #33176	; 0x8198
   110bc:	movt	r1, #2
   110c0:	str	r0, [r1]
   110c4:	movw	r1, #33140	; 0x8174
   110c8:	movt	r1, #2
   110cc:	str	r0, [r1]
   110d0:	movw	r1, #33192	; 0x81a8
   110d4:	movt	r1, #2
   110d8:	str	r0, [r1]
   110dc:	movw	r1, #33196	; 0x81ac
   110e0:	movt	r1, #2
   110e4:	str	r0, [r1]
   110e8:	movw	r1, #33180	; 0x819c
   110ec:	movt	r1, #2
   110f0:	str	r0, [r1]
   110f4:	movw	r1, #33172	; 0x8194
   110f8:	movt	r1, #2
   110fc:	str	r0, [r1]
   11100:	movw	r1, #33144	; 0x8178
   11104:	movt	r1, #2
   11108:	str	r0, [r1]
   1110c:	movw	r1, #33200	; 0x81b0
   11110:	movt	r1, #2
   11114:	str	r0, [r1]
   11118:	movw	r1, #33168	; 0x8190
   1111c:	movt	r1, #2
   11120:	str	r0, [r1]
   11124:	movw	r1, #33136	; 0x8170
   11128:	movt	r1, #2
   1112c:	str	r0, [r1]
   11130:	movw	r1, #33128	; 0x8168
   11134:	movt	r1, #2
   11138:	str	r0, [r1]
   1113c:	movw	r1, #33112	; 0x8158
   11140:	movt	r1, #2
   11144:	str	r0, [r1]
   11148:	movw	r1, #33184	; 0x81a0
   1114c:	movt	r1, #2
   11150:	str	r0, [r1]
   11154:	movw	r1, #33204	; 0x81b4
   11158:	movt	r1, #2
   1115c:	str	r0, [r1]
   11160:	movw	r1, #33108	; 0x8154
   11164:	movt	r1, #2
   11168:	str	r0, [r1]
   1116c:	movw	r1, #33152	; 0x8180
   11170:	movt	r1, #2
   11174:	str	r0, [r1]
   11178:	movw	r1, #33164	; 0x818c
   1117c:	movt	r1, #2
   11180:	str	r0, [r1]
   11184:	movw	r1, #33148	; 0x817c
   11188:	movt	r1, #2
   1118c:	str	r0, [r1]
   11190:	mov	r0, #1
   11194:	bl	10f00 <isatty@plt>
   11198:	cmp	r0, #0
   1119c:	beq	111f4 <__assert_fail@plt+0x2a0>
   111a0:	movw	r0, #30220	; 0x760c
   111a4:	movt	r0, #1
   111a8:	bl	10dd4 <getenv@plt>
   111ac:	cmp	r0, #0
   111b0:	beq	111c8 <__assert_fail@plt+0x274>
   111b4:	bl	10ed0 <atoi@plt>
   111b8:	movw	r1, #33008	; 0x80f0
   111bc:	movt	r1, #2
   111c0:	str	r0, [r1]
   111c4:	b	111e0 <__assert_fail@plt+0x28c>
   111c8:	add	r2, sp, #4
   111cc:	mov	r0, #1
   111d0:	movw	r1, #21523	; 0x5413
   111d4:	bl	16e00 <__assert_fail@plt+0x5eac>
   111d8:	cmp	r0, #0
   111dc:	beq	11740 <__assert_fail@plt+0x7ec>
   111e0:	movw	r1, #33200	; 0x81b0
   111e4:	mov	r6, r9
   111e8:	mov	r0, #1
   111ec:	movt	r1, #2
   111f0:	str	r0, [r1]
   111f4:	str	r7, [r6]
   111f8:	bl	10d20 <getuid@plt>
   111fc:	cmp	r0, #0
   11200:	bne	11214 <__assert_fail@plt+0x2c0>
   11204:	movw	r1, #33196	; 0x81ac
   11208:	mov	r0, #1
   1120c:	movt	r1, #2
   11210:	str	r0, [r1]
   11214:	movw	r0, #33028	; 0x8104
   11218:	movw	r7, #30228	; 0x7614
   1121c:	movw	sl, #33120	; 0x8160
   11220:	mov	r1, #1
   11224:	mov	r6, #20
   11228:	mov	r9, #0
   1122c:	movt	r0, #2
   11230:	movt	r7, #1
   11234:	movt	sl, #2
   11238:	str	r1, [r0]
   1123c:	mov	r0, r5
   11240:	mov	r1, r4
   11244:	mov	r2, r7
   11248:	bl	15d08 <__assert_fail@plt+0x4db4>
   1124c:	sub	r1, r0, #65	; 0x41
   11250:	cmp	r1, #55	; 0x37
   11254:	bhi	11378 <__assert_fail@plt+0x424>
   11258:	add	r0, pc, #0
   1125c:	ldr	pc, [r0, r1, lsl #2]
   11260:	andeq	r1, r1, r8, lsr #8
   11264:	andeq	r1, r1, ip, lsl #14
   11268:	andeq	r1, r1, r0, asr #6
   1126c:	andeq	r1, r1, ip, lsl #14
   11270:	andeq	r1, r1, ip, lsl #14
   11274:			; <UNDEFINED> instruction: 0x000113b4
   11278:	andeq	r1, r1, ip, lsl #14
   1127c:	andeq	r1, r1, ip, lsl #14
   11280:	andeq	r1, r1, ip, lsl #14
   11284:	andeq	r1, r1, ip, lsl #14
   11288:	andeq	r1, r1, ip, lsl #14
   1128c:	andeq	r1, r1, r8, asr #7
   11290:	andeq	r1, r1, ip, lsl #14
   11294:	andeq	r1, r1, ip, lsl #14
   11298:	andeq	r1, r1, ip, lsl #14
   1129c:	andeq	r1, r1, ip, lsl #14
   112a0:	andeq	r1, r1, ip, lsl #14
   112a4:	ldrdeq	r1, [r1], -r4
   112a8:	andeq	r1, r1, r8, ror #7
   112ac:	strdeq	r1, [r1], -ip
   112b0:	andeq	r1, r1, ip, lsl #14
   112b4:	andeq	r1, r1, ip, lsl #14
   112b8:	andeq	r1, r1, r0, lsl r4
   112bc:	andeq	r1, r1, ip, lsl #14
   112c0:	andeq	r1, r1, ip, lsl #14
   112c4:	andeq	r1, r1, ip, lsl #14
   112c8:	andeq	r1, r1, ip, lsl #14
   112cc:	andeq	r1, r1, ip, lsl #14
   112d0:	andeq	r1, r1, ip, lsl #14
   112d4:	andeq	r1, r1, ip, lsl #14
   112d8:	andeq	r1, r1, ip, lsl #14
   112dc:	andeq	r1, r1, ip, lsl #14
   112e0:	andeq	r1, r1, r4, lsr #8
   112e4:	andeq	r1, r1, ip, lsl #14
   112e8:	andeq	r1, r1, ip, lsr r4
   112ec:	andeq	r1, r1, r0, ror #8
   112f0:	andeq	r1, r1, ip, lsl #14
   112f4:	andeq	r1, r1, r4, lsl #9
   112f8:	andeq	r1, r1, ip, lsr r2
   112fc:	andeq	r1, r1, ip, lsl #14
   11300:	muleq	r1, r8, r4
   11304:	andeq	r1, r1, ip, lsl #14
   11308:	andeq	r1, r1, ip, lsr #9
   1130c:	andeq	r1, r1, r0, asr #9
   11310:	ldrdeq	r1, [r1], -ip
   11314:	andeq	r1, r1, r4, lsl #10
   11318:	andeq	r1, r1, r8, asr #10
   1131c:	andeq	r1, r1, ip, asr r5
   11320:	andeq	r1, r1, r0, ror r5
   11324:	andeq	r1, r1, r4, lsl #11
   11328:	muleq	r1, r8, r5
   1132c:	andeq	r1, r1, ip, lsr #11
   11330:	andeq	r1, r1, r0, asr #11
   11334:	andeq	r1, r1, ip, lsl #14
   11338:	andeq	r1, r1, ip, lsl #14
   1133c:	andeq	r1, r1, r4, ror #11
   11340:	movw	r1, #33204	; 0x81b4
   11344:	mov	r0, #0
   11348:	movt	r1, #2
   1134c:	str	r0, [r8]
   11350:	str	r0, [r1]
   11354:	mov	r1, #1
   11358:	str	r1, [sl]
   1135c:	movw	r1, #33116	; 0x815c
   11360:	movt	r1, #2
   11364:	str	r0, [r1]
   11368:	movw	r1, #33176	; 0x8198
   1136c:	movt	r1, #2
   11370:	str	r0, [r1]
   11374:	b	1123c <__assert_fail@plt+0x2e8>
   11378:	cmp	r0, #49	; 0x31
   1137c:	bne	1161c <__assert_fail@plt+0x6c8>
   11380:	movw	r0, #33204	; 0x81b4
   11384:	mov	r1, #1
   11388:	str	r9, [r8]
   1138c:	str	r9, [sl]
   11390:	movt	r0, #2
   11394:	str	r9, [r0]
   11398:	movw	r0, #33116	; 0x815c
   1139c:	movt	r0, #2
   113a0:	str	r1, [r0]
   113a4:	movw	r0, #33176	; 0x8198
   113a8:	movt	r0, #2
   113ac:	str	r9, [r0]
   113b0:	b	1123c <__assert_fail@plt+0x2e8>
   113b4:	movw	r1, #33148	; 0x817c
   113b8:	mov	r0, #1
   113bc:	movt	r1, #2
   113c0:	str	r0, [r1]
   113c4:	b	1123c <__assert_fail@plt+0x2e8>
   113c8:	orr	r0, r6, #2
   113cc:	bic	r6, r0, #16
   113d0:	b	1123c <__assert_fail@plt+0x2e8>
   113d4:	movw	r1, #33128	; 0x8168
   113d8:	mov	r0, #1
   113dc:	movt	r1, #2
   113e0:	str	r0, [r1]
   113e4:	b	1123c <__assert_fail@plt+0x2e8>
   113e8:	movw	r0, #33048	; 0x8118
   113ec:	mov	r1, #1
   113f0:	movt	r0, #2
   113f4:	str	r1, [r0]
   113f8:	b	1123c <__assert_fail@plt+0x2e8>
   113fc:	movw	r1, #33168	; 0x8190
   11400:	mov	r0, #1
   11404:	movt	r1, #2
   11408:	str	r0, [r1]
   1140c:	b	1123c <__assert_fail@plt+0x2e8>
   11410:	movw	r1, #33152	; 0x8180
   11414:	mov	r0, #1
   11418:	movt	r1, #2
   1141c:	str	r0, [r1]
   11420:	b	1123c <__assert_fail@plt+0x2e8>
   11424:	orr	r6, r6, #32
   11428:	movw	r1, #33196	; 0x81ac
   1142c:	mov	r0, #1
   11430:	movt	r1, #2
   11434:	str	r0, [r1]
   11438:	b	1123c <__assert_fail@plt+0x2e8>
   1143c:	movw	r1, #33140	; 0x8174
   11440:	mov	r0, #0
   11444:	movt	r1, #2
   11448:	str	r0, [r1]
   1144c:	movw	r1, #33184	; 0x81a0
   11450:	mov	r0, #1
   11454:	movt	r1, #2
   11458:	str	r0, [r1]
   1145c:	b	1123c <__assert_fail@plt+0x2e8>
   11460:	movw	r1, #33128	; 0x8168
   11464:	mov	r0, #0
   11468:	movt	r1, #2
   1146c:	str	r0, [r1]
   11470:	movw	r1, #33180	; 0x819c
   11474:	mov	r0, #1
   11478:	movt	r1, #2
   1147c:	str	r0, [r1]
   11480:	b	1123c <__assert_fail@plt+0x2e8>
   11484:	movw	r1, #33144	; 0x8178
   11488:	mov	r0, #1
   1148c:	movt	r1, #2
   11490:	str	r0, [r1]
   11494:	b	1123c <__assert_fail@plt+0x2e8>
   11498:	movw	r1, #33132	; 0x816c
   1149c:	mov	r0, #1
   114a0:	movt	r1, #2
   114a4:	str	r0, [r1]
   114a8:	b	1123c <__assert_fail@plt+0x2e8>
   114ac:	movw	r0, #33188	; 0x81a4
   114b0:	mov	r1, #1024	; 0x400
   114b4:	movt	r0, #2
   114b8:	str	r1, [r0]
   114bc:	b	1123c <__assert_fail@plt+0x2e8>
   114c0:	movw	r1, #33172	; 0x8194
   114c4:	mov	r0, #0
   114c8:	movt	r1, #2
   114cc:	str	r0, [r1]
   114d0:	mov	r1, #1
   114d4:	str	r1, [r8]
   114d8:	b	1151c <__assert_fail@plt+0x5c8>
   114dc:	movw	r1, #33116	; 0x815c
   114e0:	movw	r2, #33204	; 0x81b4
   114e4:	mov	r0, #0
   114e8:	movt	r1, #2
   114ec:	movt	r2, #2
   114f0:	str	r0, [r8]
   114f4:	str	r0, [r1]
   114f8:	mov	r1, #1
   114fc:	str	r1, [r2]
   11500:	b	11534 <__assert_fail@plt+0x5e0>
   11504:	movw	r1, #33172	; 0x8194
   11508:	mov	r0, #1
   1150c:	movt	r1, #2
   11510:	str	r0, [r8]
   11514:	str	r0, [r1]
   11518:	mov	r0, #0
   1151c:	movw	r1, #33204	; 0x81b4
   11520:	movt	r1, #2
   11524:	str	r0, [r1]
   11528:	movw	r1, #33116	; 0x815c
   1152c:	movt	r1, #2
   11530:	str	r0, [r1]
   11534:	movw	r1, #33176	; 0x8198
   11538:	str	r0, [sl]
   1153c:	movt	r1, #2
   11540:	str	r0, [r1]
   11544:	b	1123c <__assert_fail@plt+0x2e8>
   11548:	movw	r1, #33124	; 0x8164
   1154c:	mov	r0, #1
   11550:	movt	r1, #2
   11554:	str	r0, [r1]
   11558:	b	1123c <__assert_fail@plt+0x2e8>
   1155c:	movw	r1, #33164	; 0x818c
   11560:	mov	r0, #1
   11564:	movt	r1, #2
   11568:	str	r0, [r1]
   1156c:	b	1123c <__assert_fail@plt+0x2e8>
   11570:	movw	r1, #33200	; 0x81b0
   11574:	mov	r0, #1
   11578:	movt	r1, #2
   1157c:	str	r0, [r1]
   11580:	b	1123c <__assert_fail@plt+0x2e8>
   11584:	movw	r1, #33136	; 0x8170
   11588:	mov	r0, #1
   1158c:	movt	r1, #2
   11590:	str	r0, [r1]
   11594:	b	1123c <__assert_fail@plt+0x2e8>
   11598:	movw	r1, #33108	; 0x8154
   1159c:	mov	r0, #1
   115a0:	movt	r1, #2
   115a4:	str	r0, [r1]
   115a8:	b	1123c <__assert_fail@plt+0x2e8>
   115ac:	movw	r0, #33048	; 0x8118
   115b0:	mov	r1, #2
   115b4:	movt	r0, #2
   115b8:	str	r1, [r0]
   115bc:	b	1123c <__assert_fail@plt+0x2e8>
   115c0:	movw	r1, #33184	; 0x81a0
   115c4:	mov	r0, #0
   115c8:	movt	r1, #2
   115cc:	str	r0, [r1]
   115d0:	movw	r1, #33140	; 0x8174
   115d4:	mov	r0, #1
   115d8:	movt	r1, #2
   115dc:	str	r0, [r1]
   115e0:	b	1123c <__assert_fail@plt+0x2e8>
   115e4:	movw	r1, #33204	; 0x81b4
   115e8:	movw	r2, #33176	; 0x8198
   115ec:	mov	r0, #0
   115f0:	movt	r1, #2
   115f4:	movt	r2, #2
   115f8:	str	r0, [r8]
   115fc:	str	r0, [sl]
   11600:	str	r0, [r1]
   11604:	mov	r1, #1
   11608:	str	r1, [r2]
   1160c:	movw	r1, #33116	; 0x815c
   11610:	movt	r1, #2
   11614:	str	r0, [r1]
   11618:	b	1123c <__assert_fail@plt+0x2e8>
   1161c:	cmn	r0, #1
   11620:	bne	1170c <__assert_fail@plt+0x7b8>
   11624:	movw	r0, #33148	; 0x817c
   11628:	movw	r3, #33180	; 0x819c
   1162c:	ldr	r2, [r8]
   11630:	movw	r7, #33132	; 0x816c
   11634:	movt	r0, #2
   11638:	movt	r3, #2
   1163c:	movt	r7, #2
   11640:	ldr	r0, [r0]
   11644:	ldr	r3, [r3]
   11648:	ldr	r7, [r7]
   1164c:	orr	r1, r0, r2
   11650:	orr	r1, r1, r3
   11654:	movw	r3, #33108	; 0x8154
   11658:	movt	r3, #2
   1165c:	ldr	r3, [r3]
   11660:	orr	r3, r3, r2
   11664:	orr	r7, r3, r7
   11668:	orr	r0, r7, r0
   1166c:	movw	r7, #33164	; 0x818c
   11670:	movt	r7, #2
   11674:	ldr	r7, [r7]
   11678:	orr	r7, r0, r7
   1167c:	movw	r0, #33048	; 0x8118
   11680:	movt	r0, #2
   11684:	ldr	r0, [r0]
   11688:	orrs	r7, r7, r0
   1168c:	orreq	r6, r6, #8
   11690:	cmp	r1, #0
   11694:	movw	r1, #33152	; 0x8180
   11698:	movt	r1, #2
   1169c:	orreq	r6, r6, #1
   116a0:	ldr	r1, [r1]
   116a4:	cmp	r1, #0
   116a8:	movw	r1, #33028	; 0x8104
   116ac:	orrne	r6, r6, #128	; 0x80
   116b0:	cmp	r3, #0
   116b4:	movt	r1, #2
   116b8:	movwne	r3, #33188	; 0x81a4
   116bc:	movne	r7, #2
   116c0:	movtne	r3, #2
   116c4:	ldr	r1, [r1]
   116c8:	strne	r7, [r3]
   116cc:	movw	r3, #33136	; 0x8170
   116d0:	movt	r3, #2
   116d4:	ldr	r3, [r3]
   116d8:	cmp	r3, #0
   116dc:	beq	11714 <__assert_fail@plt+0x7c0>
   116e0:	cmp	r0, #2
   116e4:	beq	11750 <__assert_fail@plt+0x7fc>
   116e8:	cmp	r0, #1
   116ec:	beq	11778 <__assert_fail@plt+0x824>
   116f0:	cmp	r0, #0
   116f4:	bne	11840 <__assert_fail@plt+0x8ec>
   116f8:	movw	r0, #33056	; 0x8120
   116fc:	movw	r3, #11424	; 0x2ca0
   11700:	movt	r0, #2
   11704:	movt	r3, #1
   11708:	b	1183c <__assert_fail@plt+0x8e8>
   1170c:	bl	12c64 <__assert_fail@plt+0x1d10>
   11710:	b	118f8 <__assert_fail@plt+0x9a4>
   11714:	cmp	r0, #2
   11718:	beq	1178c <__assert_fail@plt+0x838>
   1171c:	cmp	r0, #1
   11720:	beq	117b4 <__assert_fail@plt+0x860>
   11724:	cmp	r0, #0
   11728:	bne	11840 <__assert_fail@plt+0x8ec>
   1172c:	movw	r0, #33056	; 0x8120
   11730:	movw	r3, #11412	; 0x2c94
   11734:	movt	r0, #2
   11738:	movt	r3, #1
   1173c:	b	1183c <__assert_fail@plt+0x8e8>
   11740:	ldrh	r0, [sp, #6]
   11744:	cmp	r0, #0
   11748:	bne	111b8 <__assert_fail@plt+0x264>
   1174c:	b	111e0 <__assert_fail@plt+0x28c>
   11750:	movw	r0, #33140	; 0x8174
   11754:	movt	r0, #2
   11758:	ldr	r0, [r0]
   1175c:	cmp	r0, #0
   11760:	beq	117c8 <__assert_fail@plt+0x874>
   11764:	movw	r0, #33056	; 0x8120
   11768:	movw	r3, #11668	; 0x2d94
   1176c:	movt	r0, #2
   11770:	movt	r3, #1
   11774:	b	1183c <__assert_fail@plt+0x8e8>
   11778:	movw	r0, #33056	; 0x8120
   1177c:	movw	r3, #11892	; 0x2e74
   11780:	movt	r0, #2
   11784:	movt	r3, #1
   11788:	b	1183c <__assert_fail@plt+0x8e8>
   1178c:	movw	r0, #33140	; 0x8174
   11790:	movt	r0, #2
   11794:	ldr	r0, [r0]
   11798:	cmp	r0, #0
   1179c:	beq	117f0 <__assert_fail@plt+0x89c>
   117a0:	movw	r0, #33056	; 0x8120
   117a4:	movw	r3, #11564	; 0x2d2c
   117a8:	movt	r0, #2
   117ac:	movt	r3, #1
   117b0:	b	1183c <__assert_fail@plt+0x8e8>
   117b4:	movw	r0, #33056	; 0x8120
   117b8:	movw	r3, #11812	; 0x2e24
   117bc:	movt	r0, #2
   117c0:	movt	r3, #1
   117c4:	b	1183c <__assert_fail@plt+0x8e8>
   117c8:	movw	r0, #33184	; 0x81a0
   117cc:	movt	r0, #2
   117d0:	ldr	r0, [r0]
   117d4:	cmp	r0, #0
   117d8:	beq	11818 <__assert_fail@plt+0x8c4>
   117dc:	movw	r0, #33056	; 0x8120
   117e0:	movw	r3, #11792	; 0x2e10
   117e4:	movt	r0, #2
   117e8:	movt	r3, #1
   117ec:	b	1183c <__assert_fail@plt+0x8e8>
   117f0:	movw	r0, #33184	; 0x81a0
   117f4:	movt	r0, #2
   117f8:	ldr	r0, [r0]
   117fc:	cmp	r0, #0
   11800:	beq	1182c <__assert_fail@plt+0x8d8>
   11804:	movw	r0, #33056	; 0x8120
   11808:	movw	r3, #11688	; 0x2da8
   1180c:	movt	r0, #2
   11810:	movt	r3, #1
   11814:	b	1183c <__assert_fail@plt+0x8e8>
   11818:	movw	r0, #33056	; 0x8120
   1181c:	movw	r3, #11544	; 0x2d18
   11820:	movt	r0, #2
   11824:	movt	r3, #1
   11828:	b	1183c <__assert_fail@plt+0x8e8>
   1182c:	movw	r0, #33056	; 0x8120
   11830:	movw	r3, #11440	; 0x2cb0
   11834:	movt	r0, #2
   11838:	movt	r3, #1
   1183c:	str	r3, [r0]
   11840:	movw	r3, #33116	; 0x815c
   11844:	sub	r0, r5, r1
   11848:	movt	r3, #2
   1184c:	ldr	r3, [r3]
   11850:	cmp	r3, #0
   11854:	beq	11864 <__assert_fail@plt+0x910>
   11858:	movw	r2, #8548	; 0x2164
   1185c:	movt	r2, #1
   11860:	b	118bc <__assert_fail@plt+0x968>
   11864:	movw	r3, #33176	; 0x8198
   11868:	movt	r3, #2
   1186c:	ldr	r3, [r3]
   11870:	cmp	r3, #0
   11874:	beq	11884 <__assert_fail@plt+0x930>
   11878:	movw	r2, #10736	; 0x29f0
   1187c:	movt	r2, #1
   11880:	b	118bc <__assert_fail@plt+0x968>
   11884:	cmp	r2, #0
   11888:	beq	11898 <__assert_fail@plt+0x944>
   1188c:	movw	r2, #8872	; 0x22a8
   11890:	movt	r2, #1
   11894:	b	118bc <__assert_fail@plt+0x968>
   11898:	movw	r2, #33204	; 0x81b4
   1189c:	movw	r7, #10084	; 0x2764
   118a0:	movt	r2, #2
   118a4:	movt	r7, #1
   118a8:	ldr	r3, [r2]
   118ac:	movw	r2, #10996	; 0x2af4
   118b0:	movt	r2, #1
   118b4:	cmp	r3, #0
   118b8:	moveq	r2, r7
   118bc:	movw	r3, #33060	; 0x8124
   118c0:	cmp	r0, #0
   118c4:	movt	r3, #2
   118c8:	str	r2, [r3]
   118cc:	beq	118d8 <__assert_fail@plt+0x984>
   118d0:	add	r1, r4, r1, lsl #2
   118d4:	b	118e4 <__assert_fail@plt+0x990>
   118d8:	movw	r1, #33016	; 0x80f8
   118dc:	mov	r0, #1
   118e0:	movt	r1, #2
   118e4:	mov	r2, r6
   118e8:	bl	11900 <__assert_fail@plt+0x9ac>
   118ec:	movw	r0, #33156	; 0x8184
   118f0:	movt	r0, #2
   118f4:	ldr	r0, [r0]
   118f8:	sub	sp, fp, #28
   118fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11904:	add	fp, sp, #28
   11908:	sub	sp, sp, #4
   1190c:	mov	r8, r0
   11910:	movw	r0, #33144	; 0x8178
   11914:	mov	r7, r2
   11918:	movw	r2, #7076	; 0x1ba4
   1191c:	mov	r6, r1
   11920:	movt	r0, #2
   11924:	movt	r2, #1
   11928:	ldr	r0, [r0]
   1192c:	cmp	r0, #0
   11930:	mov	r0, r1
   11934:	mov	r1, r7
   11938:	movne	r2, #0
   1193c:	bl	13050 <__assert_fail@plt+0x20fc>
   11940:	cmp	r0, #0
   11944:	beq	11b34 <__assert_fail@plt+0xbe0>
   11948:	mov	r1, #0
   1194c:	mov	r5, r0
   11950:	mov	r6, #0
   11954:	bl	14d28 <__assert_fail@plt+0x3dd4>
   11958:	mov	r1, r0
   1195c:	mov	r0, #0
   11960:	bl	11c50 <__assert_fail@plt+0xcfc>
   11964:	movw	r0, #33180	; 0x819c
   11968:	movt	r0, #2
   1196c:	ldr	r0, [r0]
   11970:	cmp	r0, #0
   11974:	bne	11b2c <__assert_fail@plt+0xbd8>
   11978:	movw	r1, #33128	; 0x8168
   1197c:	mov	r0, #4096	; 0x1000
   11980:	movt	r1, #2
   11984:	ldr	r1, [r1]
   11988:	cmp	r1, #0
   1198c:	andeq	r6, r0, r7, lsl #9
   11990:	mov	r0, r5
   11994:	bl	13920 <__assert_fail@plt+0x29cc>
   11998:	cmp	r0, #0
   1199c:	beq	11b1c <__assert_fail@plt+0xbc8>
   119a0:	movw	r7, #33196	; 0x81ac
   119a4:	movw	r4, #33052	; 0x811c
   119a8:	mov	r9, r0
   119ac:	movt	r7, #2
   119b0:	movt	r4, #2
   119b4:	ldrh	r0, [r9, #56]	; 0x38
   119b8:	sub	r0, r0, #1
   119bc:	cmp	r0, #6
   119c0:	bhi	11a94 <__assert_fail@plt+0xb40>
   119c4:	add	r1, pc, #0
   119c8:	ldr	pc, [r1, r0, lsl #2]
   119cc:	andeq	r1, r1, r8, ror #19
   119d0:	strdeq	r1, [r1], -ip
   119d4:	muleq	r1, r4, sl
   119d8:	andeq	r1, r1, ip, lsr #21
   119dc:	muleq	r1, r4, sl
   119e0:	muleq	r1, r4, sl
   119e4:	andeq	r1, r1, ip, lsr #21
   119e8:	ldrb	r0, [r9, #168]	; 0xa8
   119ec:	cmp	r0, #46	; 0x2e
   119f0:	bne	11a0c <__assert_fail@plt+0xab8>
   119f4:	ldr	r0, [r9, #48]	; 0x30
   119f8:	cmp	r0, #0
   119fc:	beq	11a0c <__assert_fail@plt+0xab8>
   11a00:	ldr	r0, [r7]
   11a04:	cmp	r0, #0
   11a08:	beq	11a94 <__assert_fail@plt+0xb40>
   11a0c:	ldrb	r0, [r4]
   11a10:	cmp	r0, #1
   11a14:	bne	11a2c <__assert_fail@plt+0xad8>
   11a18:	ldr	r1, [r9, #28]
   11a1c:	movw	r0, #30273	; 0x7641
   11a20:	movt	r0, #1
   11a24:	bl	10d14 <printf@plt>
   11a28:	b	11a4c <__assert_fail@plt+0xaf8>
   11a2c:	cmp	r8, #2
   11a30:	blt	11a4c <__assert_fail@plt+0xaf8>
   11a34:	ldr	r1, [r9, #28]
   11a38:	movw	r0, #30274	; 0x7642
   11a3c:	movt	r0, #1
   11a40:	bl	10d14 <printf@plt>
   11a44:	mov	r0, #1
   11a48:	strb	r0, [r4]
   11a4c:	mov	r0, r5
   11a50:	mov	r1, r6
   11a54:	bl	14d28 <__assert_fail@plt+0x3dd4>
   11a58:	mov	sl, r0
   11a5c:	mov	r0, r9
   11a60:	mov	r1, sl
   11a64:	bl	11c50 <__assert_fail@plt+0xcfc>
   11a68:	cmp	sl, #0
   11a6c:	beq	11a94 <__assert_fail@plt+0xb40>
   11a70:	movw	r0, #33128	; 0x8168
   11a74:	movt	r0, #2
   11a78:	ldr	r0, [r0]
   11a7c:	cmp	r0, #0
   11a80:	bne	11a94 <__assert_fail@plt+0xb40>
   11a84:	mov	r0, r5
   11a88:	mov	r1, r9
   11a8c:	mov	r2, #4
   11a90:	bl	14cf8 <__assert_fail@plt+0x3da4>
   11a94:	mov	r0, r5
   11a98:	bl	13920 <__assert_fail@plt+0x29cc>
   11a9c:	mov	r9, r0
   11aa0:	cmp	r0, #0
   11aa4:	bne	119b4 <__assert_fail@plt+0xa60>
   11aa8:	b	11b1c <__assert_fail@plt+0xbc8>
   11aac:	movw	r0, #33040	; 0x8110
   11ab0:	mov	sl, r4
   11ab4:	mov	r4, r7
   11ab8:	movt	r0, #2
   11abc:	ldr	r7, [r0]
   11ac0:	ldr	r0, [r9, #32]
   11ac4:	bl	10df8 <strerror@plt>
   11ac8:	movw	r1, #30433	; 0x76e1
   11acc:	mov	r3, r0
   11ad0:	mov	r0, r7
   11ad4:	add	r2, r9, #168	; 0xa8
   11ad8:	mov	r7, r4
   11adc:	mov	r4, sl
   11ae0:	movt	r1, #1
   11ae4:	bl	10e40 <fprintf@plt>
   11ae8:	movw	r1, #33156	; 0x8184
   11aec:	mov	r0, #1
   11af0:	movt	r1, #2
   11af4:	str	r0, [r1]
   11af8:	b	11a94 <__assert_fail@plt+0xb40>
   11afc:	movw	r0, #33040	; 0x8110
   11b00:	movw	r1, #30279	; 0x7647
   11b04:	add	r2, r9, #168	; 0xa8
   11b08:	movt	r0, #2
   11b0c:	movt	r1, #1
   11b10:	ldr	r0, [r0]
   11b14:	bl	10e40 <fprintf@plt>
   11b18:	b	11a94 <__assert_fail@plt+0xb40>
   11b1c:	bl	10e4c <__errno_location@plt>
   11b20:	ldr	r0, [r0]
   11b24:	cmp	r0, #0
   11b28:	bne	11b6c <__assert_fail@plt+0xc18>
   11b2c:	sub	sp, fp, #28
   11b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b34:	movw	r0, #33040	; 0x8110
   11b38:	ldr	r4, [r6]
   11b3c:	movt	r0, #2
   11b40:	ldr	r5, [r0]
   11b44:	bl	10e4c <__errno_location@plt>
   11b48:	ldr	r0, [r0]
   11b4c:	bl	10df8 <strerror@plt>
   11b50:	movw	r1, #30256	; 0x7630
   11b54:	mov	r3, r0
   11b58:	mov	r0, r5
   11b5c:	mov	r2, r4
   11b60:	movt	r1, #1
   11b64:	bl	10e40 <fprintf@plt>
   11b68:	b	11b90 <__assert_fail@plt+0xc3c>
   11b6c:	movw	r1, #33040	; 0x8110
   11b70:	movt	r1, #2
   11b74:	ldr	r4, [r1]
   11b78:	bl	10df8 <strerror@plt>
   11b7c:	movw	r1, #30308	; 0x7664
   11b80:	mov	r2, r0
   11b84:	mov	r0, r4
   11b88:	movt	r1, #1
   11b8c:	bl	10e40 <fprintf@plt>
   11b90:	movw	r0, #33156	; 0x8184
   11b94:	mov	r1, #1
   11b98:	movt	r0, #2
   11b9c:	str	r1, [r0]
   11ba0:	b	11b2c <__assert_fail@plt+0xbd8>
   11ba4:	push	{fp, lr}
   11ba8:	mov	fp, sp
   11bac:	ldr	r0, [r0]
   11bb0:	mov	r2, #0
   11bb4:	ldrh	r3, [r0, #56]	; 0x38
   11bb8:	cmp	r3, #7
   11bbc:	beq	11bf4 <__assert_fail@plt+0xca0>
   11bc0:	ldr	r1, [r1]
   11bc4:	ldrh	ip, [r1, #56]	; 0x38
   11bc8:	cmp	ip, #7
   11bcc:	beq	11bf4 <__assert_fail@plt+0xca0>
   11bd0:	cmp	r3, #10
   11bd4:	cmpne	ip, #10
   11bd8:	bne	11bfc <__assert_fail@plt+0xca8>
   11bdc:	cmp	ip, #10
   11be0:	mov	r2, #1
   11be4:	mvneq	r2, #0
   11be8:	cmp	r3, #10
   11bec:	cmpeq	ip, #10
   11bf0:	beq	11c30 <__assert_fail@plt+0xcdc>
   11bf4:	mov	r0, r2
   11bf8:	pop	{fp, pc}
   11bfc:	cmp	r3, ip
   11c00:	beq	11c1c <__assert_fail@plt+0xcc8>
   11c04:	movw	r2, #33180	; 0x819c
   11c08:	ldr	lr, [r0, #48]	; 0x30
   11c0c:	movt	r2, #2
   11c10:	ldr	r2, [r2]
   11c14:	orrs	r2, r2, lr
   11c18:	beq	11c38 <__assert_fail@plt+0xce4>
   11c1c:	movw	r2, #33056	; 0x8120
   11c20:	movt	r2, #2
   11c24:	ldr	r2, [r2]
   11c28:	pop	{fp, lr}
   11c2c:	bx	r2
   11c30:	pop	{fp, lr}
   11c34:	b	12c94 <__assert_fail@plt+0x1d40>
   11c38:	cmp	r3, #1
   11c3c:	mov	r2, #1
   11c40:	mvnne	r2, #0
   11c44:	cmpne	ip, #1
   11c48:	beq	11bf4 <__assert_fail@plt+0xca0>
   11c4c:	b	11c1c <__assert_fail@plt+0xcc8>
   11c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c54:	add	fp, sp, #28
   11c58:	sub	sp, sp, #180	; 0xb4
   11c5c:	cmp	r1, #0
   11c60:	beq	1215c <__assert_fail@plt+0x1208>
   11c64:	mov	r5, r0
   11c68:	movw	r0, #33132	; 0x816c
   11c6c:	movw	r2, #33160	; 0x8188
   11c70:	mov	sl, #0
   11c74:	mov	lr, #1
   11c78:	str	r1, [sp, #4]
   11c7c:	mov	r4, r1
   11c80:	mov	r1, #0
   11c84:	mov	r6, #0
   11c88:	mov	r9, #0
   11c8c:	movt	r0, #2
   11c90:	movt	r2, #2
   11c94:	str	r5, [sp, #16]
   11c98:	ldr	r0, [r0]
   11c9c:	ldr	r2, [r2]
   11ca0:	orr	r0, r2, r0
   11ca4:	movw	r2, #33108	; 0x8154
   11ca8:	movt	r2, #2
   11cac:	ldr	r2, [r2]
   11cb0:	orr	ip, r0, r2
   11cb4:	mov	r0, #0
   11cb8:	mov	r2, #0
   11cbc:	str	r0, [sp, #64]	; 0x40
   11cc0:	mov	r0, #0
   11cc4:	str	ip, [sp, #12]
   11cc8:	str	r0, [sp, #44]	; 0x2c
   11ccc:	mov	r0, #0
   11cd0:	str	r0, [sp, #60]	; 0x3c
   11cd4:	mov	r0, #0
   11cd8:	str	r0, [sp, #36]	; 0x24
   11cdc:	mov	r0, #0
   11ce0:	str	r0, [sp, #28]
   11ce4:	mov	r0, #0
   11ce8:	str	r0, [sp, #32]
   11cec:	mov	r0, #0
   11cf0:	str	r0, [sp, #8]
   11cf4:	mov	r0, #0
   11cf8:	str	r0, [sp, #56]	; 0x38
   11cfc:	ldrh	r0, [r4, #56]	; 0x38
   11d00:	cmp	r0, #10
   11d04:	cmpne	r0, #7
   11d08:	beq	11fb4 <__assert_fail@plt+0x1060>
   11d0c:	cmp	r5, #0
   11d10:	beq	11d2c <__assert_fail@plt+0xdd8>
   11d14:	ldrb	r0, [r4, #168]	; 0xa8
   11d18:	cmp	r0, #46	; 0x2e
   11d1c:	bne	11d50 <__assert_fail@plt+0xdfc>
   11d20:	movw	r0, #33196	; 0x81ac
   11d24:	movt	r0, #2
   11d28:	b	11d3c <__assert_fail@plt+0xde8>
   11d2c:	cmp	r0, #1
   11d30:	bne	11d50 <__assert_fail@plt+0xdfc>
   11d34:	movw	r0, #33180	; 0x819c
   11d38:	movt	r0, #2
   11d3c:	ldr	r0, [r0]
   11d40:	cmp	r0, #0
   11d44:	bne	11d50 <__assert_fail@plt+0xdfc>
   11d48:	str	lr, [r4, #16]
   11d4c:	b	11fa4 <__assert_fail@plt+0x1050>
   11d50:	ldr	r0, [r4, #52]	; 0x34
   11d54:	cmp	r0, r2
   11d58:	movhi	r2, r0
   11d5c:	cmp	ip, #0
   11d60:	beq	11fa0 <__assert_fail@plt+0x104c>
   11d64:	str	r2, [sp, #48]	; 0x30
   11d68:	str	r1, [sp, #52]	; 0x34
   11d6c:	add	r2, r4, #160	; 0xa0
   11d70:	add	r1, r4, #128	; 0x80
   11d74:	add	r0, r4, #112	; 0x70
   11d78:	ldrd	r2, [r2]
   11d7c:	subs	r7, r6, r2
   11d80:	ldr	r7, [sp, #56]	; 0x38
   11d84:	rscs	r3, r3, #0
   11d88:	movcc	r6, r2
   11d8c:	ldrd	r2, [r1]
   11d90:	subs	r1, r7, r2
   11d94:	rscs	r1, r3, r7, asr #31
   11d98:	movlt	r7, r2
   11d9c:	str	r7, [sp, #56]	; 0x38
   11da0:	ldr	r7, [sp, #64]	; 0x40
   11da4:	ldrd	r0, [r0]
   11da8:	subs	r3, sl, r0
   11dac:	sbcs	r3, r7, r1
   11db0:	mov	r3, #0
   11db4:	movwlt	r3, #1
   11db8:	cmp	r3, #0
   11dbc:	movne	sl, r0
   11dc0:	ldr	r0, [sp, #60]	; 0x3c
   11dc4:	movne	r7, r1
   11dc8:	mov	r1, r7
   11dcc:	str	r7, [sp, #64]	; 0x40
   11dd0:	add	r0, r0, r2
   11dd4:	str	r0, [sp, #60]	; 0x3c
   11dd8:	ldr	r0, [r4, #84]	; 0x54
   11ddc:	cmp	r0, r9
   11de0:	movhi	r9, r0
   11de4:	movw	r0, #33160	; 0x8188
   11de8:	movt	r0, #2
   11dec:	ldr	r0, [r0]
   11df0:	cmp	r0, #0
   11df4:	beq	11f98 <__assert_fail@plt+0x1044>
   11df8:	movw	r0, #33172	; 0x8194
   11dfc:	str	r9, [sp, #24]
   11e00:	mov	r9, #0
   11e04:	str	r6, [sp, #40]	; 0x28
   11e08:	movt	r0, #2
   11e0c:	ldr	r0, [r0]
   11e10:	cmp	r0, #0
   11e14:	beq	11e30 <__assert_fail@plt+0xedc>
   11e18:	ldr	r0, [r4, #88]	; 0x58
   11e1c:	mov	r1, #0
   11e20:	add	r2, sp, #90	; 0x5a
   11e24:	bl	16da4 <__assert_fail@plt+0x5e50>
   11e28:	mov	r8, r0
   11e2c:	b	11e60 <__assert_fail@plt+0xf0c>
   11e30:	ldr	r0, [r4, #88]	; 0x58
   11e34:	bl	10d08 <getpwuid@plt>
   11e38:	cmp	r0, #0
   11e3c:	mov	r8, #0
   11e40:	mov	r9, #0
   11e44:	ldrne	r8, [r0]
   11e48:	ldr	r0, [r4, #92]	; 0x5c
   11e4c:	bl	10f48 <getgrgid@plt>
   11e50:	cmp	r0, #0
   11e54:	ldrne	r9, [r0]
   11e58:	cmp	r8, #0
   11e5c:	beq	11e18 <__assert_fail@plt+0xec4>
   11e60:	cmp	r9, #0
   11e64:	bne	11e7c <__assert_fail@plt+0xf28>
   11e68:	ldr	r0, [r4, #92]	; 0x5c
   11e6c:	mov	r1, #0
   11e70:	add	r2, sp, #69	; 0x45
   11e74:	bl	16da4 <__assert_fail@plt+0x5e50>
   11e78:	mov	r9, r0
   11e7c:	mov	r0, r8
   11e80:	bl	10e1c <strlen@plt>
   11e84:	mov	r5, r0
   11e88:	mov	r0, r9
   11e8c:	bl	10e1c <strlen@plt>
   11e90:	movw	r1, #33124	; 0x8164
   11e94:	movw	r2, #30553	; 0x7759
   11e98:	ldr	r3, [sp, #44]	; 0x2c
   11e9c:	add	r7, r0, r5
   11ea0:	movt	r1, #2
   11ea4:	movt	r2, #1
   11ea8:	ldr	r1, [r1]
   11eac:	cmp	r1, #0
   11eb0:	movne	r3, r2
   11eb4:	mov	r2, #1
   11eb8:	str	r3, [sp, #44]	; 0x2c
   11ebc:	ldr	r3, [sp, #32]
   11ec0:	moveq	r2, r3
   11ec4:	cmp	r3, #1
   11ec8:	movle	r3, r2
   11ecc:	ldr	r2, [sp, #36]	; 0x24
   11ed0:	str	r3, [sp, #32]
   11ed4:	cmp	r5, r2
   11ed8:	movgt	r2, r5
   11edc:	str	r2, [sp, #36]	; 0x24
   11ee0:	ldr	r2, [sp, #28]
   11ee4:	cmp	r0, r2
   11ee8:	movgt	r2, r0
   11eec:	cmp	r1, #0
   11ef0:	movwne	r1, #1
   11ef4:	str	r2, [sp, #28]
   11ef8:	add	r0, r7, r1
   11efc:	add	r0, r0, #19
   11f00:	bl	16f6c <__assert_fail@plt+0x6018>
   11f04:	cmp	r0, #0
   11f08:	beq	12120 <__assert_fail@plt+0x11cc>
   11f0c:	str	sl, [sp, #20]
   11f10:	add	sl, r0, #12
   11f14:	mov	r6, r0
   11f18:	mov	r1, r8
   11f1c:	str	sl, [r0]
   11f20:	mov	r0, sl
   11f24:	bl	10dbc <strcpy@plt>
   11f28:	add	r0, r5, sl
   11f2c:	mov	r1, r9
   11f30:	add	r0, r0, #1
   11f34:	str	r0, [r6, #4]
   11f38:	bl	10dbc <strcpy@plt>
   11f3c:	ldr	r0, [r4, #80]	; 0x50
   11f40:	ldr	r9, [sp, #24]
   11f44:	and	r0, r0, #45056	; 0xb000
   11f48:	orr	r0, r0, #16384	; 0x4000
   11f4c:	cmp	r0, #24576	; 0x6000
   11f50:	moveq	r0, #1
   11f54:	streq	r0, [sp, #8]
   11f58:	movw	r0, #33124	; 0x8164
   11f5c:	movt	r0, #2
   11f60:	ldr	r0, [r0]
   11f64:	cmp	r0, #0
   11f68:	beq	11f80 <__assert_fail@plt+0x102c>
   11f6c:	ldr	r1, [sp, #44]	; 0x2c
   11f70:	add	r0, r7, sl
   11f74:	add	r0, r0, #2
   11f78:	str	r0, [r6, #8]
   11f7c:	bl	10dbc <strcpy@plt>
   11f80:	str	r6, [r4, #20]
   11f84:	ldr	sl, [sp, #20]
   11f88:	ldr	r5, [sp, #16]
   11f8c:	ldr	r6, [sp, #40]	; 0x28
   11f90:	ldr	ip, [sp, #12]
   11f94:	mov	lr, #1
   11f98:	ldr	r1, [sp, #52]	; 0x34
   11f9c:	ldr	r2, [sp, #48]	; 0x30
   11fa0:	add	r1, r1, #1
   11fa4:	ldr	r4, [r4, #8]
   11fa8:	cmp	r4, #0
   11fac:	bne	11cfc <__assert_fail@plt+0xda8>
   11fb0:	b	12020 <__assert_fail@plt+0x10cc>
   11fb4:	movw	r0, #33040	; 0x8110
   11fb8:	str	r6, [sp, #40]	; 0x28
   11fbc:	mov	r5, sl
   11fc0:	mov	r6, r1
   11fc4:	mov	sl, r2
   11fc8:	movt	r0, #2
   11fcc:	ldr	r7, [r0]
   11fd0:	ldr	r0, [r4, #32]
   11fd4:	bl	10df8 <strerror@plt>
   11fd8:	movw	r1, #30433	; 0x76e1
   11fdc:	mov	r3, r0
   11fe0:	add	r2, r4, #168	; 0xa8
   11fe4:	mov	r0, r7
   11fe8:	movt	r1, #1
   11fec:	bl	10e40 <fprintf@plt>
   11ff0:	mov	r2, sl
   11ff4:	mov	sl, r5
   11ff8:	mov	r1, r6
   11ffc:	ldr	ip, [sp, #12]
   12000:	ldr	r6, [sp, #40]	; 0x28
   12004:	ldr	r5, [sp, #16]
   12008:	movw	r0, #33156	; 0x8184
   1200c:	mov	lr, #1
   12010:	movt	r0, #2
   12014:	str	lr, [r4, #16]
   12018:	str	lr, [r0]
   1201c:	b	11fa4 <__assert_fail@plt+0x1050>
   12020:	ldr	r4, [sp, #4]
   12024:	cmp	r1, #0
   12028:	beq	1215c <__assert_fail@plt+0x1208>
   1202c:	cmp	ip, #0
   12030:	str	r2, [fp, #-60]	; 0xffffffc4
   12034:	str	r1, [fp, #-64]	; 0xffffffc0
   12038:	str	r4, [fp, #-76]	; 0xffffffb4
   1203c:	beq	120d0 <__assert_fail@plt+0x117c>
   12040:	ldr	r0, [sp, #60]	; 0x3c
   12044:	sub	r4, fp, #97	; 0x61
   12048:	mov	r2, r4
   1204c:	str	r0, [fp, #-72]	; 0xffffffb8
   12050:	ldr	r0, [sp, #8]
   12054:	str	r0, [fp, #-68]	; 0xffffffbc
   12058:	ldr	r0, [sp, #56]	; 0x38
   1205c:	asr	r1, r0, #31
   12060:	bl	16da4 <__assert_fail@plt+0x5e50>
   12064:	bl	10e1c <strlen@plt>
   12068:	ldr	r1, [sp, #28]
   1206c:	mov	r2, r4
   12070:	str	r1, [fp, #-48]	; 0xffffffd0
   12074:	ldr	r1, [sp, #32]
   12078:	str	r1, [fp, #-52]	; 0xffffffcc
   1207c:	str	r0, [fp, #-56]	; 0xffffffc8
   12080:	mov	r0, r6
   12084:	mov	r1, #0
   12088:	bl	16da4 <__assert_fail@plt+0x5e50>
   1208c:	bl	10e1c <strlen@plt>
   12090:	str	r0, [fp, #-44]	; 0xffffffd4
   12094:	mov	r0, r9
   12098:	mov	r1, #0
   1209c:	mov	r2, r4
   120a0:	bl	16da4 <__assert_fail@plt+0x5e50>
   120a4:	bl	10e1c <strlen@plt>
   120a8:	ldr	r1, [sp, #64]	; 0x40
   120ac:	mov	r2, r4
   120b0:	ldr	r4, [sp, #4]
   120b4:	str	r0, [fp, #-40]	; 0xffffffd8
   120b8:	mov	r0, sl
   120bc:	bl	16da4 <__assert_fail@plt+0x5e50>
   120c0:	bl	10e1c <strlen@plt>
   120c4:	ldr	r1, [sp, #36]	; 0x24
   120c8:	str	r1, [fp, #-32]	; 0xffffffe0
   120cc:	str	r0, [fp, #-36]	; 0xffffffdc
   120d0:	movw	r0, #33060	; 0x8124
   120d4:	movt	r0, #2
   120d8:	ldr	r1, [r0]
   120dc:	sub	r0, fp, #76	; 0x4c
   120e0:	blx	r1
   120e4:	movw	r0, #33052	; 0x811c
   120e8:	mov	r1, #1
   120ec:	movt	r0, #2
   120f0:	strb	r1, [r0]
   120f4:	movw	r0, #33160	; 0x8188
   120f8:	movt	r0, #2
   120fc:	ldr	r0, [r0]
   12100:	cmp	r0, #0
   12104:	beq	1215c <__assert_fail@plt+0x1208>
   12108:	ldr	r0, [r4, #20]
   1210c:	bl	13028 <__assert_fail@plt+0x20d4>
   12110:	ldr	r4, [r4, #8]
   12114:	cmp	r4, #0
   12118:	bne	12108 <__assert_fail@plt+0x11b4>
   1211c:	b	1215c <__assert_fail@plt+0x1208>
   12120:	movw	r0, #33040	; 0x8110
   12124:	movt	r0, #2
   12128:	ldr	r4, [r0]
   1212c:	bl	10e4c <__errno_location@plt>
   12130:	ldr	r0, [r0]
   12134:	bl	10df8 <strerror@plt>
   12138:	movw	r1, #30321	; 0x7671
   1213c:	mov	r2, r0
   12140:	mov	r0, r4
   12144:	movt	r1, #1
   12148:	bl	10e40 <fprintf@plt>
   1214c:	movw	r1, #33156	; 0x8184
   12150:	mov	r0, #1
   12154:	movt	r1, #2
   12158:	str	r0, [r1]
   1215c:	sub	sp, fp, #28
   12160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12164:	push	{r4, r5, fp, lr}
   12168:	add	fp, sp, #8
   1216c:	ldr	r5, [r0]
   12170:	cmp	r5, #0
   12174:	popeq	{r4, r5, fp, pc}
   12178:	mov	r4, r0
   1217c:	ldr	r0, [r5, #16]
   12180:	cmp	r0, #1
   12184:	beq	121a0 <__assert_fail@plt+0x124c>
   12188:	ldr	r2, [r4, #20]
   1218c:	ldr	r1, [r4, #32]
   12190:	mov	r0, r5
   12194:	bl	121b0 <__assert_fail@plt+0x125c>
   12198:	mov	r0, #10
   1219c:	bl	10e70 <putchar@plt>
   121a0:	ldr	r5, [r5, #8]
   121a4:	cmp	r5, #0
   121a8:	bne	1217c <__assert_fail@plt+0x1228>
   121ac:	pop	{r4, r5, fp, pc}
   121b0:	push	{r4, r5, r6, sl, fp, lr}
   121b4:	add	fp, sp, #16
   121b8:	mov	r4, r0
   121bc:	movw	r0, #33132	; 0x816c
   121c0:	mov	r6, r2
   121c4:	movt	r0, #2
   121c8:	ldr	r0, [r0]
   121cc:	cmp	r0, #0
   121d0:	beq	121f0 <__assert_fail@plt+0x129c>
   121d4:	add	r0, r4, #160	; 0xa0
   121d8:	ldr	r2, [r0]
   121dc:	movw	r0, #30343	; 0x7687
   121e0:	movt	r0, #1
   121e4:	bl	10d14 <printf@plt>
   121e8:	mov	r5, r0
   121ec:	b	121f4 <__assert_fail@plt+0x12a0>
   121f0:	mov	r5, #0
   121f4:	movw	r0, #33108	; 0x8154
   121f8:	movt	r0, #2
   121fc:	ldr	r0, [r0]
   12200:	cmp	r0, #0
   12204:	beq	1224c <__assert_fail@plt+0x12f8>
   12208:	movw	r2, #33188	; 0x81a4
   1220c:	add	r0, r4, #128	; 0x80
   12210:	movt	r2, #2
   12214:	ldrd	r0, [r0]
   12218:	ldr	r2, [r2]
   1221c:	sub	r3, r2, #1
   12220:	adds	r0, r0, r3
   12224:	adc	r1, r1, r3, asr #31
   12228:	asr	r3, r2, #31
   1222c:	bl	172f8 <__assert_fail@plt+0x63a4>
   12230:	mov	r2, r0
   12234:	movw	r0, #30388	; 0x76b4
   12238:	mov	r3, r1
   1223c:	mov	r1, r6
   12240:	movt	r0, #1
   12244:	bl	10d14 <printf@plt>
   12248:	add	r5, r0, r5
   1224c:	add	r0, r4, #168	; 0xa8
   12250:	bl	12bec <__assert_fail@plt+0x1c98>
   12254:	add	r5, r0, r5
   12258:	movw	r0, #33148	; 0x817c
   1225c:	movt	r0, #2
   12260:	ldr	r0, [r0]
   12264:	cmp	r0, #0
   12268:	beq	12280 <__assert_fail@plt+0x132c>
   1226c:	ldr	r0, [r4, #80]	; 0x50
   12270:	bl	126f4 <__assert_fail@plt+0x17a0>
   12274:	add	r5, r0, r5
   12278:	mov	r0, r5
   1227c:	pop	{r4, r5, r6, sl, fp, pc}
   12280:	movw	r0, #33164	; 0x818c
   12284:	movt	r0, #2
   12288:	ldr	r0, [r0]
   1228c:	cmp	r0, #0
   12290:	beq	12278 <__assert_fail@plt+0x1324>
   12294:	ldr	r0, [r4, #80]	; 0x50
   12298:	and	r1, r0, #61440	; 0xf000
   1229c:	cmp	r1, #16384	; 0x4000
   122a0:	beq	12270 <__assert_fail@plt+0x131c>
   122a4:	b	12278 <__assert_fail@plt+0x1324>
   122a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122ac:	add	fp, sp, #28
   122b0:	sub	sp, sp, #44	; 0x2c
   122b4:	sub	sp, sp, #8192	; 0x2000
   122b8:	ldr	r9, [r0]
   122bc:	mov	sl, r0
   122c0:	movw	r5, #33108	; 0x8154
   122c4:	movt	r5, #2
   122c8:	ldr	r0, [r9, #48]	; 0x30
   122cc:	cmp	r0, #0
   122d0:	beq	12318 <__assert_fail@plt+0x13c4>
   122d4:	movw	r0, #33160	; 0x8188
   122d8:	ldr	r1, [r5]
   122dc:	movt	r0, #2
   122e0:	ldr	r0, [r0]
   122e4:	orrs	r0, r1, r0
   122e8:	beq	12318 <__assert_fail@plt+0x13c4>
   122ec:	movw	r0, #33188	; 0x81a4
   122f0:	ldr	r1, [sl, #4]
   122f4:	movt	r0, #2
   122f8:	ldr	r0, [r0]
   122fc:	add	r1, r1, r0
   12300:	sub	r1, r1, #1
   12304:	udiv	r1, r1, r0
   12308:	movw	r0, #30332	; 0x767c
   1230c:	movt	r0, #1
   12310:	bl	10d14 <printf@plt>
   12314:	ldr	r9, [sl]
   12318:	cmp	r9, #0
   1231c:	beq	12610 <__assert_fail@plt+0x16bc>
   12320:	sub	lr, fp, #4096	; 0x1000
   12324:	sub	r6, lr, #32
   12328:	ldr	r0, [r9, #16]
   1232c:	cmp	r0, #1
   12330:	beq	125cc <__assert_fail@plt+0x1678>
   12334:	movw	r0, #33132	; 0x816c
   12338:	movt	r0, #2
   1233c:	ldr	r0, [r0]
   12340:	cmp	r0, #0
   12344:	beq	12360 <__assert_fail@plt+0x140c>
   12348:	add	r0, r9, #160	; 0xa0
   1234c:	ldr	r1, [sl, #32]
   12350:	ldr	r2, [r0]
   12354:	movw	r0, #30343	; 0x7687
   12358:	movt	r0, #1
   1235c:	bl	10d14 <printf@plt>
   12360:	ldr	r0, [r5]
   12364:	mov	r8, r6
   12368:	cmp	r0, #0
   1236c:	beq	123b0 <__assert_fail@plt+0x145c>
   12370:	movw	r2, #33188	; 0x81a4
   12374:	add	r0, r9, #128	; 0x80
   12378:	movt	r2, #2
   1237c:	ldrd	r0, [r0]
   12380:	ldr	r2, [r2]
   12384:	sub	r3, r2, #1
   12388:	adds	r0, r0, r3
   1238c:	adc	r1, r1, r3, asr #31
   12390:	asr	r3, r2, #31
   12394:	bl	172f8 <__assert_fail@plt+0x63a4>
   12398:	mov	r3, r1
   1239c:	ldr	r1, [sl, #20]
   123a0:	mov	r2, r0
   123a4:	movw	r0, #30388	; 0x76b4
   123a8:	movt	r0, #1
   123ac:	bl	10d14 <printf@plt>
   123b0:	ldr	r0, [r9, #80]	; 0x50
   123b4:	add	r4, sp, #20
   123b8:	mov	r1, r4
   123bc:	bl	12ec4 <__assert_fail@plt+0x1f70>
   123c0:	ldr	r7, [r9, #20]
   123c4:	ldr	r0, [sl, #28]
   123c8:	ldr	r1, [sl, #44]	; 0x2c
   123cc:	ldr	r2, [sl, #36]	; 0x24
   123d0:	ldr	r3, [r9, #84]	; 0x54
   123d4:	ldr	r5, [r7, #4]
   123d8:	ldr	r6, [r7]
   123dc:	stm	sp, {r1, r6}
   123e0:	str	r0, [sp, #8]
   123e4:	movw	r0, #30349	; 0x768d
   123e8:	mov	r1, r4
   123ec:	movt	r0, #1
   123f0:	str	r5, [sp, #12]
   123f4:	bl	10d14 <printf@plt>
   123f8:	movw	r0, #33124	; 0x8164
   123fc:	movt	r0, #2
   12400:	ldr	r0, [r0]
   12404:	cmp	r0, #0
   12408:	beq	12420 <__assert_fail@plt+0x14cc>
   1240c:	ldr	r2, [r7, #8]
   12410:	ldr	r1, [sl, #24]
   12414:	movw	r0, #30369	; 0x76a1
   12418:	movt	r0, #1
   1241c:	bl	10d14 <printf@plt>
   12420:	ldr	r0, [r9, #80]	; 0x50
   12424:	mov	r6, r8
   12428:	add	r4, sp, #40	; 0x28
   1242c:	and	r0, r0, #45056	; 0xb000
   12430:	orr	r0, r0, #16384	; 0x4000
   12434:	cmp	r0, #24576	; 0x6000
   12438:	bne	1245c <__assert_fail@plt+0x1508>
   1243c:	add	r0, r9, #96	; 0x60
   12440:	ldr	r0, [r0]
   12444:	ubfx	r1, r0, #8, #8
   12448:	uxtb	r2, r0
   1244c:	movw	r0, #30375	; 0x76a7
   12450:	movt	r0, #1
   12454:	bl	10d14 <printf@plt>
   12458:	b	124a8 <__assert_fail@plt+0x1554>
   1245c:	ldr	r1, [sl, #8]
   12460:	ldr	r3, [sl, #40]	; 0x28
   12464:	add	r0, r9, #112	; 0x70
   12468:	cmp	r1, #0
   1246c:	beq	12490 <__assert_fail@plt+0x153c>
   12470:	ldrd	r0, [r0]
   12474:	movw	r2, #30409	; 0x76c9
   12478:	movt	r2, #1
   1247c:	stm	sp, {r0, r1}
   12480:	movw	r0, #30385	; 0x76b1
   12484:	rsb	r1, r3, #8
   12488:	movt	r0, #1
   1248c:	b	124a4 <__assert_fail@plt+0x1550>
   12490:	ldm	r0, {r2, r5}
   12494:	movw	r0, #30388	; 0x76b4
   12498:	mov	r1, r3
   1249c:	mov	r3, r5
   124a0:	movt	r0, #1
   124a4:	bl	10d14 <printf@plt>
   124a8:	movw	r0, #33140	; 0x8174
   124ac:	movt	r0, #2
   124b0:	ldr	r0, [r0]
   124b4:	cmp	r0, #0
   124b8:	beq	124c4 <__assert_fail@plt+0x1570>
   124bc:	add	r0, r9, #136	; 0x88
   124c0:	b	124dc <__assert_fail@plt+0x1588>
   124c4:	movw	r0, #33184	; 0x81a0
   124c8:	movt	r0, #2
   124cc:	ldr	r0, [r0]
   124d0:	cmp	r0, #0
   124d4:	addeq	r0, r9, #144	; 0x90
   124d8:	addne	r0, r9, #152	; 0x98
   124dc:	ldr	r0, [r0]
   124e0:	bl	12618 <__assert_fail@plt+0x16c4>
   124e4:	add	r8, r9, #168	; 0xa8
   124e8:	mov	r0, r8
   124ec:	bl	12bec <__assert_fail@plt+0x1c98>
   124f0:	movw	r0, #33148	; 0x817c
   124f4:	movt	r0, #2
   124f8:	ldr	r0, [r0]
   124fc:	cmp	r0, #0
   12500:	beq	12510 <__assert_fail@plt+0x15bc>
   12504:	ldr	r0, [r9, #80]	; 0x50
   12508:	bl	126f4 <__assert_fail@plt+0x17a0>
   1250c:	b	12534 <__assert_fail@plt+0x15e0>
   12510:	movw	r0, #33164	; 0x818c
   12514:	movt	r0, #2
   12518:	ldr	r0, [r0]
   1251c:	cmp	r0, #0
   12520:	beq	12534 <__assert_fail@plt+0x15e0>
   12524:	ldr	r0, [r9, #80]	; 0x50
   12528:	and	r1, r0, #61440	; 0xf000
   1252c:	cmp	r1, #16384	; 0x4000
   12530:	bleq	126f4 <__assert_fail@plt+0x17a0>
   12534:	ldr	r0, [r9, #80]	; 0x50
   12538:	and	r0, r0, #61440	; 0xf000
   1253c:	cmp	r0, #40960	; 0xa000
   12540:	bne	125bc <__assert_fail@plt+0x1668>
   12544:	ldr	r0, [r9, #48]	; 0x30
   12548:	cmp	r0, #0
   1254c:	beq	12570 <__assert_fail@plt+0x161c>
   12550:	ldr	r0, [r9, #4]
   12554:	movw	r2, #30422	; 0x76d6
   12558:	mov	r1, #4096	; 0x1000
   1255c:	movt	r2, #1
   12560:	ldr	r3, [r0, #24]
   12564:	mov	r0, r6
   12568:	str	r8, [sp]
   1256c:	b	12584 <__assert_fail@plt+0x1630>
   12570:	movw	r2, #30329	; 0x7679
   12574:	mov	r0, r6
   12578:	mov	r1, #4096	; 0x1000
   1257c:	mov	r3, r8
   12580:	movt	r2, #1
   12584:	bl	10e58 <snprintf@plt>
   12588:	mov	r0, r6
   1258c:	mov	r1, r4
   12590:	movw	r2, #4095	; 0xfff
   12594:	bl	10d98 <readlink@plt>
   12598:	cmn	r0, #1
   1259c:	beq	125dc <__assert_fail@plt+0x1688>
   125a0:	mov	r1, #0
   125a4:	strb	r1, [r4, r0]
   125a8:	movw	r0, #30441	; 0x76e9
   125ac:	movt	r0, #1
   125b0:	bl	10d14 <printf@plt>
   125b4:	mov	r0, r4
   125b8:	bl	12bec <__assert_fail@plt+0x1c98>
   125bc:	mov	r0, #10
   125c0:	bl	10e70 <putchar@plt>
   125c4:	movw	r5, #33108	; 0x8154
   125c8:	movt	r5, #2
   125cc:	ldr	r9, [r9, #8]
   125d0:	cmp	r9, #0
   125d4:	bne	12328 <__assert_fail@plt+0x13d4>
   125d8:	b	12610 <__assert_fail@plt+0x16bc>
   125dc:	movw	r0, #33040	; 0x8110
   125e0:	movt	r0, #2
   125e4:	ldr	r8, [r0]
   125e8:	bl	10e4c <__errno_location@plt>
   125ec:	ldr	r0, [r0]
   125f0:	bl	10df8 <strerror@plt>
   125f4:	movw	r1, #30428	; 0x76dc
   125f8:	mov	r3, r0
   125fc:	mov	r0, r8
   12600:	mov	r2, r6
   12604:	movt	r1, #1
   12608:	bl	10e40 <fprintf@plt>
   1260c:	b	125bc <__assert_fail@plt+0x1668>
   12610:	sub	sp, fp, #28
   12614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12618:	push	{r4, r5, r6, sl, fp, lr}
   1261c:	add	fp, sp, #16
   12620:	sub	sp, sp, #8
   12624:	str	r0, [sp, #4]
   12628:	add	r0, sp, #4
   1262c:	bl	10d5c <ctime@plt>
   12630:	mov	r4, r0
   12634:	add	r5, r0, #4
   12638:	mov	r6, #0
   1263c:	ldrb	r0, [r5, -r6]
   12640:	bl	10e70 <putchar@plt>
   12644:	sub	r6, r6, #1
   12648:	cmn	r6, #7
   1264c:	bne	1263c <__assert_fail@plt+0x16e8>
   12650:	movw	r0, #33168	; 0x8190
   12654:	movt	r0, #2
   12658:	ldr	r0, [r0]
   1265c:	cmp	r0, #0
   12660:	beq	12684 <__assert_fail@plt+0x1730>
   12664:	add	r4, r4, #11
   12668:	mov	r5, #0
   1266c:	ldrb	r0, [r4, -r5]
   12670:	bl	10e70 <putchar@plt>
   12674:	sub	r5, r5, #1
   12678:	cmn	r5, #13
   1267c:	bne	1266c <__assert_fail@plt+0x1718>
   12680:	b	126e4 <__assert_fail@plt+0x1790>
   12684:	ldr	r0, [sp, #4]
   12688:	mov	r5, #0
   1268c:	add	r0, r0, #61696	; 0xf100
   12690:	add	r6, r0, #15663104	; 0xef0000
   12694:	mov	r0, #0
   12698:	bl	10d50 <time@plt>
   1269c:	cmp	r6, r0
   126a0:	ble	126c4 <__assert_fail@plt+0x1770>
   126a4:	add	r4, r4, #11
   126a8:	mov	r5, #0
   126ac:	ldrb	r0, [r4, -r5]
   126b0:	bl	10e70 <putchar@plt>
   126b4:	sub	r5, r5, #1
   126b8:	cmn	r5, #5
   126bc:	bne	126ac <__assert_fail@plt+0x1758>
   126c0:	b	126e4 <__assert_fail@plt+0x1790>
   126c4:	mov	r0, #32
   126c8:	bl	10e70 <putchar@plt>
   126cc:	add	r4, r4, #20
   126d0:	ldrb	r0, [r4, r5]
   126d4:	bl	10e70 <putchar@plt>
   126d8:	add	r5, r5, #1
   126dc:	cmp	r5, #4
   126e0:	bne	126d0 <__assert_fail@plt+0x177c>
   126e4:	mov	r0, #32
   126e8:	bl	10e70 <putchar@plt>
   126ec:	sub	sp, fp, #16
   126f0:	pop	{r4, r5, r6, sl, fp, pc}
   126f4:	and	r2, r0, #61440	; 0xf000
   126f8:	cmp	r2, #40960	; 0xa000
   126fc:	bge	12718 <__assert_fail@plt+0x17c4>
   12700:	cmp	r2, #4096	; 0x1000
   12704:	beq	12740 <__assert_fail@plt+0x17ec>
   12708:	mov	r1, #47	; 0x2f
   1270c:	cmp	r2, #16384	; 0x4000
   12710:	beq	1274c <__assert_fail@plt+0x17f8>
   12714:	b	1272c <__assert_fail@plt+0x17d8>
   12718:	beq	12748 <__assert_fail@plt+0x17f4>
   1271c:	cmp	r2, #49152	; 0xc000
   12720:	bne	1272c <__assert_fail@plt+0x17d8>
   12724:	mov	r1, #61	; 0x3d
   12728:	b	1274c <__assert_fail@plt+0x17f8>
   1272c:	tst	r0, #73	; 0x49
   12730:	mov	r1, #42	; 0x2a
   12734:	moveq	r0, #0
   12738:	bxeq	lr
   1273c:	b	1274c <__assert_fail@plt+0x17f8>
   12740:	mov	r1, #124	; 0x7c
   12744:	b	1274c <__assert_fail@plt+0x17f8>
   12748:	mov	r1, #64	; 0x40
   1274c:	push	{fp, lr}
   12750:	mov	fp, sp
   12754:	mov	r0, r1
   12758:	bl	10e70 <putchar@plt>
   1275c:	mov	r0, #1
   12760:	pop	{fp, pc}
   12764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12768:	add	fp, sp, #28
   1276c:	sub	sp, sp, #20
   12770:	add	r1, sp, #16
   12774:	mov	r4, r0
   12778:	bl	12954 <__assert_fail@plt+0x1a00>
   1277c:	cmp	r0, #0
   12780:	str	r0, [sp, #12]
   12784:	beq	12914 <__assert_fail@plt+0x19c0>
   12788:	movw	r5, #33024	; 0x8100
   1278c:	ldr	r1, [r4, #12]
   12790:	movw	r7, #33064	; 0x8128
   12794:	movt	r5, #2
   12798:	movt	r7, #2
   1279c:	ldr	r0, [r5]
   127a0:	cmp	r1, r0
   127a4:	ble	127c8 <__assert_fail@plt+0x1874>
   127a8:	ldr	r0, [r7]
   127ac:	lsl	r1, r1, #2
   127b0:	bl	16f9c <__assert_fail@plt+0x6048>
   127b4:	cmp	r0, #0
   127b8:	beq	1291c <__assert_fail@plt+0x19c8>
   127bc:	ldr	r1, [r4, #12]
   127c0:	str	r0, [r7]
   127c4:	str	r1, [r5]
   127c8:	ldr	r0, [r7]
   127cc:	ldr	r1, [r4]
   127d0:	mov	r2, #0
   127d4:	str	r2, [sp, #8]
   127d8:	ldr	r2, [r1, #16]
   127dc:	cmp	r2, #1
   127e0:	beq	127f4 <__assert_fail@plt+0x18a0>
   127e4:	ldr	r2, [sp, #8]
   127e8:	str	r1, [r0, r2, lsl #2]
   127ec:	add	r2, r2, #1
   127f0:	str	r2, [sp, #8]
   127f4:	ldr	r1, [r1, #8]
   127f8:	cmp	r1, #0
   127fc:	bne	127d8 <__assert_fail@plt+0x1884>
   12800:	ldr	r1, [sp, #16]
   12804:	ldr	r0, [sp, #8]
   12808:	sdiv	r6, r0, r1
   1280c:	str	r1, [sp, #4]
   12810:	mls	r0, r6, r1, r0
   12814:	cmp	r0, #0
   12818:	ldr	r0, [r4]
   1281c:	addne	r6, r6, #1
   12820:	ldr	r0, [r0, #48]	; 0x30
   12824:	cmp	r0, #0
   12828:	beq	12874 <__assert_fail@plt+0x1920>
   1282c:	movw	r0, #33160	; 0x8188
   12830:	movw	r1, #33108	; 0x8154
   12834:	movt	r0, #2
   12838:	movt	r1, #2
   1283c:	ldr	r0, [r0]
   12840:	ldr	r1, [r1]
   12844:	orrs	r0, r1, r0
   12848:	beq	12874 <__assert_fail@plt+0x1920>
   1284c:	movw	r0, #33188	; 0x81a4
   12850:	ldr	r1, [r4, #4]
   12854:	movt	r0, #2
   12858:	ldr	r0, [r0]
   1285c:	add	r1, r1, r0
   12860:	sub	r1, r1, #1
   12864:	udiv	r1, r1, r0
   12868:	movw	r0, #30332	; 0x767c
   1286c:	movt	r0, #1
   12870:	bl	10d14 <printf@plt>
   12874:	cmp	r6, #1
   12878:	blt	12914 <__assert_fail@plt+0x19c0>
   1287c:	mov	r5, #0
   12880:	ldr	r0, [r7]
   12884:	ldr	r2, [r4, #20]
   12888:	ldr	r1, [r4, #32]
   1288c:	ldr	r0, [r0, r5, lsl #2]
   12890:	bl	121b0 <__assert_fail@plt+0x125c>
   12894:	ldr	r1, [sp, #8]
   12898:	add	r8, r5, r6
   1289c:	cmp	r8, r1
   128a0:	bge	12900 <__assert_fail@plt+0x19ac>
   128a4:	mov	r9, #0
   128a8:	ldr	r1, [sp, #4]
   128ac:	add	r9, r9, #1
   128b0:	cmp	r9, r1
   128b4:	beq	12900 <__assert_fail@plt+0x19ac>
   128b8:	ldr	r1, [sp, #12]
   128bc:	cmp	r0, r1
   128c0:	bge	128dc <__assert_fail@plt+0x1988>
   128c4:	ldr	r1, [sp, #12]
   128c8:	sub	sl, r1, r0
   128cc:	mov	r0, #32
   128d0:	bl	10e70 <putchar@plt>
   128d4:	subs	sl, sl, #1
   128d8:	bne	128cc <__assert_fail@plt+0x1978>
   128dc:	ldr	r0, [r7]
   128e0:	ldr	r2, [r4, #20]
   128e4:	ldr	r1, [r4, #32]
   128e8:	ldr	r0, [r0, r8, lsl #2]
   128ec:	bl	121b0 <__assert_fail@plt+0x125c>
   128f0:	ldr	r1, [sp, #8]
   128f4:	add	r8, r8, r6
   128f8:	cmp	r8, r1
   128fc:	blt	128a8 <__assert_fail@plt+0x1954>
   12900:	mov	r0, #10
   12904:	bl	10e70 <putchar@plt>
   12908:	add	r5, r5, #1
   1290c:	cmp	r5, r6
   12910:	bne	12880 <__assert_fail@plt+0x192c>
   12914:	sub	sp, fp, #28
   12918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1291c:	movw	r0, #33040	; 0x8110
   12920:	movt	r0, #2
   12924:	ldr	r5, [r0]
   12928:	bl	10e4c <__errno_location@plt>
   1292c:	ldr	r0, [r0]
   12930:	bl	10df8 <strerror@plt>
   12934:	movw	r1, #30395	; 0x76bb
   12938:	mov	r2, r0
   1293c:	mov	r0, r5
   12940:	movt	r1, #1
   12944:	bl	10e40 <fprintf@plt>
   12948:	mov	r0, r4
   1294c:	bl	12164 <__assert_fail@plt+0x1210>
   12950:	b	12914 <__assert_fail@plt+0x19c0>
   12954:	push	{fp, lr}
   12958:	mov	fp, sp
   1295c:	movw	r3, #33132	; 0x816c
   12960:	ldr	r2, [r0, #16]
   12964:	movt	r3, #2
   12968:	ldr	r3, [r3]
   1296c:	cmp	r3, #0
   12970:	ldrne	r3, [r0, #32]
   12974:	addne	r2, r2, r3
   12978:	movw	r3, #33108	; 0x8154
   1297c:	movt	r3, #2
   12980:	addne	r2, r2, #1
   12984:	ldr	r3, [r3]
   12988:	cmp	r3, #0
   1298c:	ldrne	r3, [r0, #20]
   12990:	addne	r2, r2, r3
   12994:	movw	r3, #33148	; 0x817c
   12998:	movt	r3, #2
   1299c:	addne	r2, r2, #1
   129a0:	ldr	ip, [r3]
   129a4:	movw	r3, #33164	; 0x818c
   129a8:	movt	r3, #2
   129ac:	ldr	r3, [r3]
   129b0:	orrs	r3, r3, ip
   129b4:	movw	r3, #33008	; 0x80f0
   129b8:	movt	r3, #2
   129bc:	addne	r2, r2, #1
   129c0:	add	r2, r2, #1
   129c4:	ldr	r3, [r3]
   129c8:	add	r3, r3, #1
   129cc:	cmp	r3, r2, lsl #1
   129d0:	bge	129e0 <__assert_fail@plt+0x1a8c>
   129d4:	bl	12164 <__assert_fail@plt+0x1210>
   129d8:	mov	r0, #0
   129dc:	pop	{fp, pc}
   129e0:	sdiv	r0, r3, r2
   129e4:	str	r0, [r1]
   129e8:	sdiv	r0, r3, r0
   129ec:	pop	{fp, pc}
   129f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   129f4:	add	fp, sp, #24
   129f8:	sub	sp, sp, #8
   129fc:	add	r1, sp, #4
   12a00:	mov	r9, r0
   12a04:	bl	12954 <__assert_fail@plt+0x1a00>
   12a08:	cmp	r0, #0
   12a0c:	beq	12aec <__assert_fail@plt+0x1b98>
   12a10:	ldr	r6, [r9]
   12a14:	mov	r8, r0
   12a18:	ldr	r0, [r6, #48]	; 0x30
   12a1c:	cmp	r0, #0
   12a20:	beq	12a74 <__assert_fail@plt+0x1b20>
   12a24:	movw	r0, #33160	; 0x8188
   12a28:	movw	r1, #33108	; 0x8154
   12a2c:	movt	r0, #2
   12a30:	movt	r1, #2
   12a34:	ldr	r0, [r0]
   12a38:	ldr	r1, [r1]
   12a3c:	orrs	r0, r1, r0
   12a40:	beq	12a74 <__assert_fail@plt+0x1b20>
   12a44:	movw	r0, #33188	; 0x81a4
   12a48:	ldr	r1, [r9, #4]
   12a4c:	mov	r3, #0
   12a50:	movt	r0, #2
   12a54:	ldr	r0, [r0]
   12a58:	add	r1, r1, r0
   12a5c:	sub	r1, r1, #1
   12a60:	udiv	r2, r1, r0
   12a64:	movw	r0, #30410	; 0x76ca
   12a68:	movt	r0, #1
   12a6c:	bl	10d14 <printf@plt>
   12a70:	ldr	r6, [r9]
   12a74:	cmp	r6, #0
   12a78:	beq	12ae4 <__assert_fail@plt+0x1b90>
   12a7c:	ldr	r7, [sp, #4]
   12a80:	mov	r5, #0
   12a84:	ldr	r0, [r6, #16]
   12a88:	cmp	r0, #1
   12a8c:	beq	12ad8 <__assert_fail@plt+0x1b84>
   12a90:	cmp	r5, r7
   12a94:	blt	12aa4 <__assert_fail@plt+0x1b50>
   12a98:	mov	r0, #10
   12a9c:	bl	10e70 <putchar@plt>
   12aa0:	mov	r5, #0
   12aa4:	ldr	r2, [r9, #20]
   12aa8:	ldr	r1, [r9, #32]
   12aac:	mov	r0, r6
   12ab0:	bl	121b0 <__assert_fail@plt+0x125c>
   12ab4:	add	r5, r5, #1
   12ab8:	cmp	r5, r7
   12abc:	cmplt	r0, r8
   12ac0:	bge	12ad8 <__assert_fail@plt+0x1b84>
   12ac4:	sub	r4, r8, r0
   12ac8:	mov	r0, #32
   12acc:	bl	10e70 <putchar@plt>
   12ad0:	subs	r4, r4, #1
   12ad4:	bne	12ac8 <__assert_fail@plt+0x1b74>
   12ad8:	ldr	r6, [r6, #8]
   12adc:	cmp	r6, #0
   12ae0:	bne	12a84 <__assert_fail@plt+0x1b30>
   12ae4:	mov	r0, #10
   12ae8:	bl	10e70 <putchar@plt>
   12aec:	sub	sp, fp, #24
   12af0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12af8:	add	fp, sp, #28
   12afc:	sub	sp, sp, #4
   12b00:	mov	r4, r0
   12b04:	movw	r0, #33132	; 0x816c
   12b08:	movt	r0, #2
   12b0c:	ldr	r0, [r0]
   12b10:	cmp	r0, #0
   12b14:	beq	12b24 <__assert_fail@plt+0x1bd0>
   12b18:	ldr	r0, [r4, #32]
   12b1c:	add	sl, r0, #1
   12b20:	b	12b28 <__assert_fail@plt+0x1bd4>
   12b24:	mov	sl, #0
   12b28:	movw	r0, #33108	; 0x8154
   12b2c:	ldr	r5, [r4]
   12b30:	movt	r0, #2
   12b34:	ldr	r0, [r0]
   12b38:	cmp	r0, #0
   12b3c:	ldrne	r0, [r4, #20]
   12b40:	addne	r0, sl, r0
   12b44:	addne	sl, r0, #1
   12b48:	movw	r0, #33148	; 0x817c
   12b4c:	movt	r0, #2
   12b50:	ldr	r0, [r0]
   12b54:	cmp	r0, #0
   12b58:	addne	sl, sl, #1
   12b5c:	cmp	r5, #0
   12b60:	beq	12bdc <__assert_fail@plt+0x1c88>
   12b64:	movw	r9, #33008	; 0x80f0
   12b68:	mov	r7, #0
   12b6c:	movt	r9, #2
   12b70:	ldr	r0, [r5, #16]
   12b74:	cmp	r0, #1
   12b78:	beq	12bd0 <__assert_fail@plt+0x1c7c>
   12b7c:	cmp	r7, #1
   12b80:	blt	12bbc <__assert_fail@plt+0x1c68>
   12b84:	mov	r0, #44	; 0x2c
   12b88:	bl	10e70 <putchar@plt>
   12b8c:	ldr	r1, [r5, #52]	; 0x34
   12b90:	ldr	r8, [r9]
   12b94:	add	r7, r7, #2
   12b98:	add	r0, sl, r7
   12b9c:	add	r6, r0, r1
   12ba0:	mov	r0, #10
   12ba4:	cmp	r6, r8
   12ba8:	movwcc	r0, #32
   12bac:	bl	10e70 <putchar@plt>
   12bb0:	cmp	r6, r8
   12bb4:	mov	r0, #0
   12bb8:	movcs	r7, r0
   12bbc:	ldr	r2, [r4, #20]
   12bc0:	ldr	r1, [r4, #32]
   12bc4:	mov	r0, r5
   12bc8:	bl	121b0 <__assert_fail@plt+0x125c>
   12bcc:	add	r7, r0, r7
   12bd0:	ldr	r5, [r5, #8]
   12bd4:	cmp	r5, #0
   12bd8:	bne	12b70 <__assert_fail@plt+0x1c1c>
   12bdc:	mov	r0, #10
   12be0:	sub	sp, fp, #28
   12be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12be8:	b	10e70 <putchar@plt>
   12bec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12bf0:	add	fp, sp, #24
   12bf4:	ldrb	r7, [r0]
   12bf8:	cmp	r7, #0
   12bfc:	beq	12c58 <__assert_fail@plt+0x1d04>
   12c00:	add	r6, r0, #1
   12c04:	bl	10e10 <__ctype_b_loc@plt>
   12c08:	movw	r8, #33200	; 0x81b0
   12c0c:	mov	r5, r0
   12c10:	mov	r4, #0
   12c14:	movt	r8, #2
   12c18:	ldr	r2, [r5]
   12c1c:	uxtb	r1, r7
   12c20:	ldr	r0, [r8]
   12c24:	add	r2, r2, r1, lsl #1
   12c28:	cmp	r0, #0
   12c2c:	mov	r0, r1
   12c30:	movwne	r0, #63	; 0x3f
   12c34:	ldrh	r2, [r2]
   12c38:	tst	r2, #16384	; 0x4000
   12c3c:	movne	r0, r1
   12c40:	bl	10e70 <putchar@plt>
   12c44:	ldrb	r7, [r6, r4]
   12c48:	add	r4, r4, #1
   12c4c:	cmp	r7, #0
   12c50:	bne	12c18 <__assert_fail@plt+0x1cc4>
   12c54:	b	12c5c <__assert_fail@plt+0x1d08>
   12c58:	mov	r4, #0
   12c5c:	mov	r0, r4
   12c60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c64:	push	{fp, lr}
   12c68:	mov	fp, sp
   12c6c:	movw	r0, #33040	; 0x8110
   12c70:	mov	r1, #51	; 0x33
   12c74:	mov	r2, #1
   12c78:	movt	r0, #2
   12c7c:	ldr	r3, [r0]
   12c80:	movw	r0, #30446	; 0x76ee
   12c84:	movt	r0, #1
   12c88:	bl	10da4 <fwrite@plt>
   12c8c:	mov	r0, #1
   12c90:	pop	{fp, pc}
   12c94:	add	r0, r0, #168	; 0xa8
   12c98:	add	r1, r1, #168	; 0xa8
   12c9c:	b	10cfc <strcmp@plt>
   12ca0:	add	r2, r1, #168	; 0xa8
   12ca4:	add	r1, r0, #168	; 0xa8
   12ca8:	mov	r0, r2
   12cac:	b	10cfc <strcmp@plt>
   12cb0:	push	{r4, sl, fp, lr}
   12cb4:	add	fp, sp, #8
   12cb8:	ldr	r3, [r0, #144]	; 0x90
   12cbc:	ldr	r2, [r1, #144]	; 0x90
   12cc0:	mov	ip, r0
   12cc4:	mov	r0, #1
   12cc8:	cmp	r2, r3
   12ccc:	ble	12cd4 <__assert_fail@plt+0x1d80>
   12cd0:	pop	{r4, sl, fp, pc}
   12cd4:	bne	12ce8 <__assert_fail@plt+0x1d94>
   12cd8:	ldr	lr, [ip, #148]	; 0x94
   12cdc:	ldr	r4, [r1, #148]	; 0x94
   12ce0:	cmp	r4, lr
   12ce4:	bgt	12cd0 <__assert_fail@plt+0x1d7c>
   12ce8:	mvn	r0, #0
   12cec:	cmp	r2, r3
   12cf0:	poplt	{r4, sl, fp, pc}
   12cf4:	bne	12d08 <__assert_fail@plt+0x1db4>
   12cf8:	ldr	r2, [ip, #148]	; 0x94
   12cfc:	ldr	r3, [r1, #148]	; 0x94
   12d00:	cmp	r3, r2
   12d04:	blt	12cd0 <__assert_fail@plt+0x1d7c>
   12d08:	add	r0, ip, #168	; 0xa8
   12d0c:	add	r1, r1, #168	; 0xa8
   12d10:	pop	{r4, sl, fp, lr}
   12d14:	b	10cfc <strcmp@plt>
   12d18:	push	{fp, lr}
   12d1c:	mov	fp, sp
   12d20:	bl	12cb0 <__assert_fail@plt+0x1d5c>
   12d24:	rsb	r0, r0, #0
   12d28:	pop	{fp, pc}
   12d2c:	push	{r4, sl, fp, lr}
   12d30:	add	fp, sp, #8
   12d34:	ldr	r3, [r0, #136]	; 0x88
   12d38:	ldr	r2, [r1, #136]	; 0x88
   12d3c:	mov	ip, r0
   12d40:	mov	r0, #1
   12d44:	cmp	r2, r3
   12d48:	ble	12d50 <__assert_fail@plt+0x1dfc>
   12d4c:	pop	{r4, sl, fp, pc}
   12d50:	bne	12d64 <__assert_fail@plt+0x1e10>
   12d54:	ldr	lr, [ip, #140]	; 0x8c
   12d58:	ldr	r4, [r1, #140]	; 0x8c
   12d5c:	cmp	r4, lr
   12d60:	bgt	12d4c <__assert_fail@plt+0x1df8>
   12d64:	mvn	r0, #0
   12d68:	cmp	r2, r3
   12d6c:	poplt	{r4, sl, fp, pc}
   12d70:	bne	12d84 <__assert_fail@plt+0x1e30>
   12d74:	ldr	r2, [ip, #140]	; 0x8c
   12d78:	ldr	r3, [r1, #140]	; 0x8c
   12d7c:	cmp	r3, r2
   12d80:	blt	12d4c <__assert_fail@plt+0x1df8>
   12d84:	add	r0, ip, #168	; 0xa8
   12d88:	add	r1, r1, #168	; 0xa8
   12d8c:	pop	{r4, sl, fp, lr}
   12d90:	b	10cfc <strcmp@plt>
   12d94:	push	{fp, lr}
   12d98:	mov	fp, sp
   12d9c:	bl	12d2c <__assert_fail@plt+0x1dd8>
   12da0:	rsb	r0, r0, #0
   12da4:	pop	{fp, pc}
   12da8:	push	{r4, sl, fp, lr}
   12dac:	add	fp, sp, #8
   12db0:	ldr	r3, [r0, #152]	; 0x98
   12db4:	ldr	r2, [r1, #152]	; 0x98
   12db8:	mov	ip, r0
   12dbc:	mov	r0, #1
   12dc0:	cmp	r2, r3
   12dc4:	ble	12dcc <__assert_fail@plt+0x1e78>
   12dc8:	pop	{r4, sl, fp, pc}
   12dcc:	bne	12de0 <__assert_fail@plt+0x1e8c>
   12dd0:	ldr	lr, [ip, #156]	; 0x9c
   12dd4:	ldr	r4, [r1, #156]	; 0x9c
   12dd8:	cmp	r4, lr
   12ddc:	bgt	12dc8 <__assert_fail@plt+0x1e74>
   12de0:	mvn	r0, #0
   12de4:	cmp	r2, r3
   12de8:	poplt	{r4, sl, fp, pc}
   12dec:	bne	12e00 <__assert_fail@plt+0x1eac>
   12df0:	ldr	r2, [ip, #156]	; 0x9c
   12df4:	ldr	r3, [r1, #156]	; 0x9c
   12df8:	cmp	r3, r2
   12dfc:	blt	12dc8 <__assert_fail@plt+0x1e74>
   12e00:	add	r0, ip, #168	; 0xa8
   12e04:	add	r1, r1, #168	; 0xa8
   12e08:	pop	{r4, sl, fp, lr}
   12e0c:	b	10cfc <strcmp@plt>
   12e10:	push	{fp, lr}
   12e14:	mov	fp, sp
   12e18:	bl	12da8 <__assert_fail@plt+0x1e54>
   12e1c:	rsb	r0, r0, #0
   12e20:	pop	{fp, pc}
   12e24:	push	{r4, r5, r6, sl, fp, lr}
   12e28:	add	fp, sp, #16
   12e2c:	ldr	r4, [r0, #112]	; 0x70
   12e30:	ldr	r6, [r1, #112]	; 0x70
   12e34:	ldr	r3, [r0, #116]	; 0x74
   12e38:	ldr	r5, [r1, #116]	; 0x74
   12e3c:	mov	ip, #1
   12e40:	subs	r2, r4, r6
   12e44:	sbcs	r2, r3, r5
   12e48:	blt	12e5c <__assert_fail@plt+0x1f08>
   12e4c:	subs	r2, r6, r4
   12e50:	mvn	ip, #0
   12e54:	sbcs	r2, r5, r3
   12e58:	bge	12e64 <__assert_fail@plt+0x1f10>
   12e5c:	mov	r0, ip
   12e60:	pop	{r4, r5, r6, sl, fp, pc}
   12e64:	add	r0, r0, #168	; 0xa8
   12e68:	add	r1, r1, #168	; 0xa8
   12e6c:	pop	{r4, r5, r6, sl, fp, lr}
   12e70:	b	10cfc <strcmp@plt>
   12e74:	push	{r4, r5, r6, sl, fp, lr}
   12e78:	add	fp, sp, #16
   12e7c:	ldr	r4, [r0, #112]	; 0x70
   12e80:	ldr	r6, [r1, #112]	; 0x70
   12e84:	ldr	r3, [r0, #116]	; 0x74
   12e88:	ldr	r5, [r1, #116]	; 0x74
   12e8c:	mvn	ip, #0
   12e90:	subs	r2, r4, r6
   12e94:	sbcs	r2, r3, r5
   12e98:	blt	12ebc <__assert_fail@plt+0x1f68>
   12e9c:	subs	r2, r6, r4
   12ea0:	mov	ip, #1
   12ea4:	sbcs	r2, r5, r3
   12ea8:	blt	12ebc <__assert_fail@plt+0x1f68>
   12eac:	add	r0, r0, #168	; 0xa8
   12eb0:	add	r1, r1, #168	; 0xa8
   12eb4:	bl	10cfc <strcmp@plt>
   12eb8:	rsb	ip, r0, #0
   12ebc:	mov	r0, ip
   12ec0:	pop	{r4, r5, r6, sl, fp, pc}
   12ec4:	push	{fp, lr}
   12ec8:	mov	fp, sp
   12ecc:	and	r2, r0, #61440	; 0xf000
   12ed0:	sub	r2, r2, #4096	; 0x1000
   12ed4:	lsr	r3, r2, #12
   12ed8:	cmp	r3, #11
   12edc:	bhi	12f2c <__assert_fail@plt+0x1fd8>
   12ee0:	add	r2, pc, #4
   12ee4:	mov	ip, #45	; 0x2d
   12ee8:	ldr	pc, [r2, r3, lsl #2]
   12eec:	andeq	r2, r1, ip, lsl pc
   12ef0:	andeq	r2, r1, r4, lsr #30
   12ef4:	andeq	r2, r1, ip, lsr #30
   12ef8:	andeq	r2, r1, r4, lsr pc
   12efc:	andeq	r2, r1, ip, lsr #30
   12f00:	andeq	r2, r1, ip, asr #30
   12f04:	andeq	r2, r1, ip, lsr #30
   12f08:	andeq	r2, r1, r0, asr pc
   12f0c:	andeq	r2, r1, ip, lsr #30
   12f10:	andeq	r2, r1, ip, lsr pc
   12f14:	andeq	r2, r1, ip, lsr #30
   12f18:	andeq	r2, r1, r4, asr #30
   12f1c:	mov	ip, #112	; 0x70
   12f20:	b	12f50 <__assert_fail@plt+0x1ffc>
   12f24:	mov	ip, #99	; 0x63
   12f28:	b	12f50 <__assert_fail@plt+0x1ffc>
   12f2c:	mov	ip, #63	; 0x3f
   12f30:	b	12f50 <__assert_fail@plt+0x1ffc>
   12f34:	mov	ip, #100	; 0x64
   12f38:	b	12f50 <__assert_fail@plt+0x1ffc>
   12f3c:	mov	ip, #108	; 0x6c
   12f40:	b	12f50 <__assert_fail@plt+0x1ffc>
   12f44:	mov	ip, #115	; 0x73
   12f48:	b	12f50 <__assert_fail@plt+0x1ffc>
   12f4c:	mov	ip, #98	; 0x62
   12f50:	tst	r0, #2
   12f54:	mov	r3, #119	; 0x77
   12f58:	mov	r2, #32
   12f5c:	mov	lr, #45	; 0x2d
   12f60:	movweq	r3, #45	; 0x2d
   12f64:	tst	r0, #4
   12f68:	strh	r2, [r1, #10]
   12f6c:	mov	r2, #114	; 0x72
   12f70:	strb	ip, [r1]
   12f74:	mov	ip, #119	; 0x77
   12f78:	movweq	r2, #45	; 0x2d
   12f7c:	tst	r0, #16
   12f80:	strb	r3, [r1, #8]
   12f84:	mov	r3, #114	; 0x72
   12f88:	strb	r2, [r1, #7]
   12f8c:	mov	r2, #119	; 0x77
   12f90:	movweq	r2, #45	; 0x2d
   12f94:	tst	r0, #32
   12f98:	strb	r2, [r1, #5]
   12f9c:	mov	r2, #114	; 0x72
   12fa0:	movweq	r2, #45	; 0x2d
   12fa4:	tst	r0, #128	; 0x80
   12fa8:	movweq	ip, #45	; 0x2d
   12fac:	tst	r0, #256	; 0x100
   12fb0:	strb	r2, [r1, #4]
   12fb4:	movweq	r3, #45	; 0x2d
   12fb8:	ands	r2, r0, #1
   12fbc:	strb	ip, [r1, #2]
   12fc0:	mov	r2, #84	; 0x54
   12fc4:	mov	ip, #45	; 0x2d
   12fc8:	strb	r3, [r1, #1]
   12fcc:	mov	r3, #45	; 0x2d
   12fd0:	movwne	r3, #120	; 0x78
   12fd4:	movwne	r2, #116	; 0x74
   12fd8:	tst	r0, #512	; 0x200
   12fdc:	moveq	r2, r3
   12fe0:	mov	r3, #83	; 0x53
   12fe4:	strb	r2, [r1, #9]
   12fe8:	ands	r2, r0, #8
   12fec:	mov	r2, #83	; 0x53
   12ff0:	movwne	lr, #120	; 0x78
   12ff4:	movwne	r2, #115	; 0x73
   12ff8:	tst	r0, #1024	; 0x400
   12ffc:	moveq	r2, lr
   13000:	strb	r2, [r1, #6]
   13004:	ands	r2, r0, #64	; 0x40
   13008:	movwne	ip, #120	; 0x78
   1300c:	movwne	r3, #115	; 0x73
   13010:	tst	r0, #2048	; 0x800
   13014:	moveq	r3, ip
   13018:	strb	r3, [r1, #3]
   1301c:	pop	{fp, pc}
   13020:	ldr	r0, [r0, #16]
   13024:	b	12ec4 <__assert_fail@plt+0x1f70>
   13028:	push	{r4, r5, r6, sl, fp, lr}
   1302c:	add	fp, sp, #16
   13030:	mov	r4, r0
   13034:	bl	10e4c <__errno_location@plt>
   13038:	ldr	r6, [r0]
   1303c:	mov	r5, r0
   13040:	mov	r0, r4
   13044:	bl	10d38 <free@plt>
   13048:	str	r6, [r5]
   1304c:	pop	{r4, r5, r6, sl, fp, pc}
   13050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13054:	add	fp, sp, #28
   13058:	sub	sp, sp, #12
   1305c:	cmp	r1, #4096	; 0x1000
   13060:	bcs	1307c <__assert_fail@plt+0x2128>
   13064:	mov	r6, r0
   13068:	and	r0, r1, #516	; 0x204
   1306c:	mov	r5, r1
   13070:	cmp	r0, #516	; 0x204
   13074:	tstne	r5, #18
   13078:	bne	13098 <__assert_fail@plt+0x2144>
   1307c:	bl	10e4c <__errno_location@plt>
   13080:	mov	r1, #22
   13084:	str	r1, [r0]
   13088:	mov	r8, #0
   1308c:	mov	r0, r8
   13090:	sub	sp, fp, #28
   13094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13098:	mov	r0, #1
   1309c:	mov	r1, #96	; 0x60
   130a0:	mov	r9, r2
   130a4:	bl	16f18 <__assert_fail@plt+0x5fc4>
   130a8:	cmp	r0, #0
   130ac:	beq	13088 <__assert_fail@plt+0x2134>
   130b0:	mov	r8, r0
   130b4:	mvn	r0, #99	; 0x63
   130b8:	tst	r5, #2
   130bc:	mov	r1, r5
   130c0:	str	r0, [r8, #32]
   130c4:	bic	r0, r5, #516	; 0x204
   130c8:	str	r9, [r8, #44]	; 0x2c
   130cc:	orrne	r1, r0, #4
   130d0:	str	r1, [r8, #48]	; 0x30
   130d4:	ldr	r0, [r6]
   130d8:	cmp	r0, #0
   130dc:	beq	13110 <__assert_fail@plt+0x21bc>
   130e0:	add	r4, r6, #4
   130e4:	mov	r7, #0
   130e8:	bl	10e1c <strlen@plt>
   130ec:	cmp	r0, r7
   130f0:	movhi	r7, r0
   130f4:	ldr	r0, [r4], #4
   130f8:	cmp	r0, #0
   130fc:	bne	130e8 <__assert_fail@plt+0x2194>
   13100:	add	r1, r7, #1
   13104:	cmp	r1, #4096	; 0x1000
   13108:	movls	r1, #4096	; 0x1000
   1310c:	b	13114 <__assert_fail@plt+0x21c0>
   13110:	mov	r1, #4096	; 0x1000
   13114:	mov	r0, r8
   13118:	bl	13378 <__assert_fail@plt+0x2424>
   1311c:	cmp	r0, #0
   13120:	beq	1336c <__assert_fail@plt+0x2418>
   13124:	ldr	r0, [r6]
   13128:	cmp	r0, #0
   1312c:	beq	1315c <__assert_fail@plt+0x2208>
   13130:	movw	r1, #30409	; 0x76c9
   13134:	mov	r0, r8
   13138:	mov	r2, #0
   1313c:	movt	r1, #1
   13140:	bl	133ec <__assert_fail@plt+0x2498>
   13144:	cmp	r0, #0
   13148:	beq	13364 <__assert_fail@plt+0x2410>
   1314c:	mov	r4, r0
   13150:	mvn	r0, #0
   13154:	str	r0, [r4, #48]	; 0x30
   13158:	b	13160 <__assert_fail@plt+0x220c>
   1315c:	mov	r4, #0
   13160:	cmp	r9, #0
   13164:	beq	13174 <__assert_fail@plt+0x2220>
   13168:	ldrb	r0, [r8, #49]	; 0x31
   1316c:	ubfx	r0, r0, #2, #1
   13170:	b	13178 <__assert_fail@plt+0x2224>
   13174:	mov	r0, #1
   13178:	ldr	r7, [r6]
   1317c:	cmp	r7, #0
   13180:	beq	132a0 <__assert_fail@plt+0x234c>
   13184:	eor	r0, r0, #1
   13188:	and	r1, r5, #2048	; 0x800
   1318c:	mov	sl, #0
   13190:	mov	r5, #0
   13194:	str	r0, [sp, #4]
   13198:	mov	r0, #0
   1319c:	str	r1, [sp, #8]
   131a0:	str	r0, [sp]
   131a4:	mov	r0, r7
   131a8:	bl	10e1c <strlen@plt>
   131ac:	mov	r2, r0
   131b0:	ldr	r0, [sp, #8]
   131b4:	cmp	r0, #0
   131b8:	bne	131f0 <__assert_fail@plt+0x229c>
   131bc:	cmp	r2, #3
   131c0:	bcc	131f0 <__assert_fail@plt+0x229c>
   131c4:	add	r0, r2, r7
   131c8:	ldrb	r0, [r0, #-1]
   131cc:	cmp	r0, #47	; 0x2f
   131d0:	bne	131f0 <__assert_fail@plt+0x229c>
   131d4:	sub	r0, r7, #2
   131d8:	ldrb	r1, [r0, r2]
   131dc:	cmp	r1, #47	; 0x2f
   131e0:	bne	131f0 <__assert_fail@plt+0x229c>
   131e4:	sub	r2, r2, #1
   131e8:	cmp	r2, #1
   131ec:	bhi	131d8 <__assert_fail@plt+0x2284>
   131f0:	mov	r0, r8
   131f4:	mov	r1, r7
   131f8:	bl	133ec <__assert_fail@plt+0x2498>
   131fc:	cmp	r0, #0
   13200:	beq	13354 <__assert_fail@plt+0x2400>
   13204:	mov	r1, #0
   13208:	ldr	r2, [sp, #4]
   1320c:	str	r4, [r0, #4]
   13210:	mov	r7, r0
   13214:	str	r1, [r0, #48]	; 0x30
   13218:	add	r0, r0, #168	; 0xa8
   1321c:	str	r0, [r7, #24]
   13220:	clz	r0, sl
   13224:	lsr	r0, r0, #5
   13228:	orrs	r0, r2, r0
   1322c:	bne	13240 <__assert_fail@plt+0x22ec>
   13230:	mov	r0, #2
   13234:	strd	r0, [r7, #112]	; 0x70
   13238:	mov	r0, #11
   1323c:	b	13254 <__assert_fail@plt+0x2300>
   13240:	mov	r0, r8
   13244:	mov	r1, r7
   13248:	mov	r2, #0
   1324c:	bl	1346c <__assert_fail@plt+0x2518>
   13250:	mov	r1, #0
   13254:	cmp	r9, #0
   13258:	strh	r0, [r7, #56]	; 0x38
   1325c:	beq	1326c <__assert_fail@plt+0x2318>
   13260:	str	sl, [r7, #8]
   13264:	mov	sl, r7
   13268:	b	13284 <__assert_fail@plt+0x2330>
   1326c:	cmp	sl, #0
   13270:	str	r1, [r7, #8]
   13274:	beq	13298 <__assert_fail@plt+0x2344>
   13278:	ldr	r0, [sp]
   1327c:	str	r7, [sp]
   13280:	str	r7, [r0, #8]
   13284:	ldr	r7, [r6, #4]!
   13288:	add	r5, r5, #1
   1328c:	cmp	r7, #0
   13290:	bne	131a4 <__assert_fail@plt+0x2250>
   13294:	b	132a8 <__assert_fail@plt+0x2354>
   13298:	str	r7, [sp]
   1329c:	b	13264 <__assert_fail@plt+0x2310>
   132a0:	mov	sl, #0
   132a4:	b	132cc <__assert_fail@plt+0x2378>
   132a8:	cmp	r9, #0
   132ac:	beq	132cc <__assert_fail@plt+0x2378>
   132b0:	cmp	r5, #2
   132b4:	bcc	132cc <__assert_fail@plt+0x2378>
   132b8:	mov	r0, r8
   132bc:	mov	r1, sl
   132c0:	mov	r2, r5
   132c4:	bl	135a8 <__assert_fail@plt+0x2654>
   132c8:	mov	sl, r0
   132cc:	movw	r1, #30409	; 0x76c9
   132d0:	mov	r0, r8
   132d4:	mov	r2, #0
   132d8:	movt	r1, #1
   132dc:	bl	133ec <__assert_fail@plt+0x2498>
   132e0:	cmp	r0, #0
   132e4:	str	r0, [r8]
   132e8:	beq	13354 <__assert_fail@plt+0x2400>
   132ec:	mov	r1, #9
   132f0:	strh	r1, [r0, #56]	; 0x38
   132f4:	mov	r1, #1
   132f8:	str	sl, [r0, #8]
   132fc:	str	r1, [r0, #48]	; 0x30
   13300:	mov	r0, r8
   13304:	bl	1369c <__assert_fail@plt+0x2748>
   13308:	cmp	r0, #0
   1330c:	beq	13354 <__assert_fail@plt+0x2400>
   13310:	ldrh	r0, [r8, #48]	; 0x30
   13314:	tst	r0, #516	; 0x204
   13318:	bne	13344 <__assert_fail@plt+0x23f0>
   1331c:	movw	r1, #30499	; 0x7723
   13320:	mov	r0, r8
   13324:	movt	r1, #1
   13328:	bl	13728 <__assert_fail@plt+0x27d4>
   1332c:	cmn	r0, #1
   13330:	str	r0, [r8, #28]
   13334:	bgt	13344 <__assert_fail@plt+0x23f0>
   13338:	ldr	r0, [r8, #48]	; 0x30
   1333c:	orr	r0, r0, #4
   13340:	str	r0, [r8, #48]	; 0x30
   13344:	add	r0, r8, #60	; 0x3c
   13348:	mvn	r1, #0
   1334c:	bl	16cd4 <__assert_fail@plt+0x5d80>
   13350:	b	1308c <__assert_fail@plt+0x2138>
   13354:	mov	r0, sl
   13358:	bl	13758 <__assert_fail@plt+0x2804>
   1335c:	mov	r0, r4
   13360:	bl	13028 <__assert_fail@plt+0x20d4>
   13364:	ldr	r0, [r8, #24]
   13368:	bl	13028 <__assert_fail@plt+0x20d4>
   1336c:	mov	r0, r8
   13370:	bl	13028 <__assert_fail@plt+0x20d4>
   13374:	b	13088 <__assert_fail@plt+0x2134>
   13378:	push	{r4, r5, fp, lr}
   1337c:	add	fp, sp, #8
   13380:	mov	r4, r0
   13384:	ldr	r0, [r0, #36]	; 0x24
   13388:	add	r1, r1, #256	; 0x100
   1338c:	adds	r1, r1, r0
   13390:	bcc	133b4 <__assert_fail@plt+0x2460>
   13394:	ldr	r0, [r4, #24]
   13398:	bl	13028 <__assert_fail@plt+0x20d4>
   1339c:	mov	r5, #0
   133a0:	str	r5, [r4, #24]
   133a4:	bl	10e4c <__errno_location@plt>
   133a8:	mov	r1, #36	; 0x24
   133ac:	str	r1, [r0]
   133b0:	b	133e4 <__assert_fail@plt+0x2490>
   133b4:	str	r1, [r4, #36]	; 0x24
   133b8:	ldr	r0, [r4, #24]
   133bc:	bl	16f9c <__assert_fail@plt+0x6048>
   133c0:	cmp	r0, #0
   133c4:	beq	133d4 <__assert_fail@plt+0x2480>
   133c8:	mov	r5, #1
   133cc:	str	r0, [r4, #24]
   133d0:	b	133e4 <__assert_fail@plt+0x2490>
   133d4:	ldr	r0, [r4, #24]
   133d8:	bl	13028 <__assert_fail@plt+0x20d4>
   133dc:	mov	r5, #0
   133e0:	str	r5, [r4, #24]
   133e4:	mov	r0, r5
   133e8:	pop	{r4, r5, fp, pc}
   133ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   133f0:	add	fp, sp, #24
   133f4:	mov	r5, r0
   133f8:	add	r0, r2, #176	; 0xb0
   133fc:	mov	r6, r2
   13400:	mov	r8, r1
   13404:	bic	r0, r0, #7
   13408:	bl	16f6c <__assert_fail@plt+0x6018>
   1340c:	cmp	r0, #0
   13410:	beq	13460 <__assert_fail@plt+0x250c>
   13414:	add	r7, r0, #168	; 0xa8
   13418:	mov	r4, r0
   1341c:	mov	r1, r8
   13420:	mov	r2, r6
   13424:	mov	r0, r7
   13428:	bl	10d44 <memcpy@plt>
   1342c:	mov	r0, #0
   13430:	mov	r2, #196608	; 0x30000
   13434:	strb	r0, [r7, r6]
   13438:	str	r6, [r4, #52]	; 0x34
   1343c:	str	r5, [r4, #44]	; 0x2c
   13440:	ldr	r1, [r5, #24]
   13444:	str	r0, [r4, #12]
   13448:	str	r0, [r4, #16]
   1344c:	str	r0, [r4, #20]
   13450:	str	r2, [r4, #58]	; 0x3a
   13454:	str	r1, [r4, #28]
   13458:	str	r0, [r4, #32]
   1345c:	b	13464 <__assert_fail@plt+0x2510>
   13460:	mov	r4, #0
   13464:	mov	r0, r4
   13468:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1346c:	push	{r4, r5, r6, sl, fp, lr}
   13470:	add	fp, sp, #16
   13474:	mov	r4, r1
   13478:	ldr	r1, [r0, #48]	; 0x30
   1347c:	ldr	r3, [r4, #48]	; 0x30
   13480:	add	r5, r4, #64	; 0x40
   13484:	cmp	r3, #0
   13488:	andeq	r3, r1, #1
   1348c:	orreq	r2, r3, r2
   13490:	cmp	r2, #0
   13494:	andseq	r1, r1, #2
   13498:	beq	134e8 <__assert_fail@plt+0x2594>
   1349c:	ldr	r0, [r4, #24]
   134a0:	mov	r1, r5
   134a4:	bl	175a4 <__assert_fail@plt+0x6650>
   134a8:	cmp	r0, #0
   134ac:	beq	1352c <__assert_fail@plt+0x25d8>
   134b0:	bl	10e4c <__errno_location@plt>
   134b4:	mov	r6, r0
   134b8:	ldr	r0, [r0]
   134bc:	cmp	r0, #2
   134c0:	bne	13510 <__assert_fail@plt+0x25bc>
   134c4:	ldr	r0, [r4, #24]
   134c8:	mov	r1, r5
   134cc:	bl	175c4 <__assert_fail@plt+0x6670>
   134d0:	cmp	r0, #0
   134d4:	bne	1350c <__assert_fail@plt+0x25b8>
   134d8:	mov	r0, #0
   134dc:	str	r0, [r6]
   134e0:	mov	r0, #13
   134e4:	pop	{r4, r5, r6, sl, fp, pc}
   134e8:	ldr	r1, [r4, #24]
   134ec:	ldr	r0, [r0, #32]
   134f0:	mov	r2, r5
   134f4:	mov	r3, #256	; 0x100
   134f8:	bl	175d4 <__assert_fail@plt+0x6680>
   134fc:	cmp	r0, #0
   13500:	beq	1352c <__assert_fail@plt+0x25d8>
   13504:	bl	10e4c <__errno_location@plt>
   13508:	mov	r6, r0
   1350c:	ldr	r0, [r6]
   13510:	str	r0, [r4, #32]
   13514:	mov	r0, r5
   13518:	mov	r1, #0
   1351c:	mov	r2, #104	; 0x68
   13520:	bl	10e64 <memset@plt>
   13524:	mov	r0, #10
   13528:	pop	{r4, r5, r6, sl, fp, pc}
   1352c:	ldr	r0, [r4, #80]	; 0x50
   13530:	and	r0, r0, #61440	; 0xf000
   13534:	cmp	r0, #40960	; 0xa000
   13538:	beq	13590 <__assert_fail@plt+0x263c>
   1353c:	cmp	r0, #32768	; 0x8000
   13540:	beq	13598 <__assert_fail@plt+0x2644>
   13544:	cmp	r0, #16384	; 0x4000
   13548:	bne	135a0 <__assert_fail@plt+0x264c>
   1354c:	ldrb	r1, [r4, #168]	; 0xa8
   13550:	mov	r0, #1
   13554:	cmp	r1, #46	; 0x2e
   13558:	bne	135a4 <__assert_fail@plt+0x2650>
   1355c:	ldrb	r1, [r4, #169]	; 0xa9
   13560:	cmp	r1, #0
   13564:	beq	1357c <__assert_fail@plt+0x2628>
   13568:	cmp	r1, #46	; 0x2e
   1356c:	bne	135a4 <__assert_fail@plt+0x2650>
   13570:	ldrb	r1, [r4, #170]	; 0xaa
   13574:	cmp	r1, #0
   13578:	popne	{r4, r5, r6, sl, fp, pc}
   1357c:	ldr	r1, [r4, #48]	; 0x30
   13580:	mov	r0, #5
   13584:	cmp	r1, #0
   13588:	movweq	r0, #1
   1358c:	pop	{r4, r5, r6, sl, fp, pc}
   13590:	mov	r0, #12
   13594:	pop	{r4, r5, r6, sl, fp, pc}
   13598:	mov	r0, #8
   1359c:	pop	{r4, r5, r6, sl, fp, pc}
   135a0:	mov	r0, #3
   135a4:	pop	{r4, r5, r6, sl, fp, pc}
   135a8:	push	{r4, r5, r6, r7, fp, lr}
   135ac:	add	fp, sp, #16
   135b0:	mov	r6, r0
   135b4:	ldr	r7, [r0, #44]	; 0x2c
   135b8:	ldr	r0, [r0, #40]	; 0x28
   135bc:	mov	r5, r2
   135c0:	mov	r4, r1
   135c4:	cmp	r0, r2
   135c8:	bcs	135f8 <__assert_fail@plt+0x26a4>
   135cc:	add	r1, r5, #40	; 0x28
   135d0:	cmn	r1, #-1073741823	; 0xc0000001
   135d4:	str	r1, [r6, #40]	; 0x28
   135d8:	bhi	1366c <__assert_fail@plt+0x2718>
   135dc:	ldr	r0, [r6, #8]
   135e0:	lsl	r1, r1, #2
   135e4:	bl	16f9c <__assert_fail@plt+0x6048>
   135e8:	cmp	r0, #0
   135ec:	beq	1366c <__assert_fail@plt+0x2718>
   135f0:	str	r0, [r6, #8]
   135f4:	b	135fc <__assert_fail@plt+0x26a8>
   135f8:	ldr	r0, [r6, #8]
   135fc:	cmp	r4, #0
   13600:	beq	13618 <__assert_fail@plt+0x26c4>
   13604:	str	r4, [r0], #4
   13608:	ldr	r4, [r4, #8]
   1360c:	cmp	r4, #0
   13610:	bne	13604 <__assert_fail@plt+0x26b0>
   13614:	ldr	r0, [r6, #8]
   13618:	mov	r1, r5
   1361c:	mov	r2, #4
   13620:	mov	r3, r7
   13624:	bl	10ee8 <qsort@plt>
   13628:	ldr	r0, [r6, #8]
   1362c:	cmp	r5, #1
   13630:	ldr	r4, [r0]
   13634:	mov	r1, r4
   13638:	beq	1368c <__assert_fail@plt+0x2738>
   1363c:	ldr	r1, [r0, #4]!
   13640:	str	r1, [r4, #8]
   13644:	subs	r1, r5, #2
   13648:	beq	13684 <__assert_fail@plt+0x2730>
   1364c:	mov	r2, r0
   13650:	ldr	r3, [r2, #4]!
   13654:	ldr	r0, [r0]
   13658:	subs	r1, r1, #1
   1365c:	str	r3, [r0, #8]
   13660:	mov	r0, r2
   13664:	bne	13650 <__assert_fail@plt+0x26fc>
   13668:	b	13688 <__assert_fail@plt+0x2734>
   1366c:	ldr	r0, [r6, #8]
   13670:	bl	13028 <__assert_fail@plt+0x20d4>
   13674:	mov	r0, #0
   13678:	str	r0, [r6, #40]	; 0x28
   1367c:	str	r0, [r6, #8]
   13680:	b	13694 <__assert_fail@plt+0x2740>
   13684:	mov	r2, r0
   13688:	ldr	r1, [r2]
   1368c:	mov	r0, #0
   13690:	str	r0, [r1, #8]
   13694:	mov	r0, r4
   13698:	pop	{r4, r5, r6, r7, fp, pc}
   1369c:	push	{r4, r5, fp, lr}
   136a0:	add	fp, sp, #8
   136a4:	sub	sp, sp, #8
   136a8:	mov	r4, r0
   136ac:	ldrh	r0, [r0, #48]	; 0x30
   136b0:	movw	r1, #258	; 0x102
   136b4:	tst	r0, r1
   136b8:	beq	136f8 <__assert_fail@plt+0x27a4>
   136bc:	movw	r0, #12328	; 0x3028
   136c0:	movw	r2, #20112	; 0x4e90
   136c4:	movw	r3, #20144	; 0x4eb0
   136c8:	mov	r1, #0
   136cc:	mov	r5, #0
   136d0:	movt	r0, #1
   136d4:	movt	r2, #1
   136d8:	movt	r3, #1
   136dc:	str	r0, [sp]
   136e0:	mov	r0, #31
   136e4:	bl	16204 <__assert_fail@plt+0x52b0>
   136e8:	cmp	r0, #0
   136ec:	str	r0, [r4, #56]	; 0x38
   136f0:	movne	r5, #1
   136f4:	b	1371c <__assert_fail@plt+0x27c8>
   136f8:	mov	r0, #32
   136fc:	bl	16f6c <__assert_fail@plt+0x6018>
   13700:	cmp	r0, #0
   13704:	str	r0, [r4, #56]	; 0x38
   13708:	beq	13718 <__assert_fail@plt+0x27c4>
   1370c:	bl	16fec <__assert_fail@plt+0x6098>
   13710:	mov	r5, #1
   13714:	b	1371c <__assert_fail@plt+0x27c8>
   13718:	mov	r5, #0
   1371c:	mov	r0, r5
   13720:	sub	sp, fp, #8
   13724:	pop	{r4, r5, fp, pc}
   13728:	ldr	r3, [r0, #48]	; 0x30
   1372c:	mov	r2, #32768	; 0x8000
   13730:	and	r2, r2, r3, lsl #11
   13734:	tst	r3, #512	; 0x200
   13738:	orr	r2, r2, #18688	; 0x4900
   1373c:	orr	r2, r2, #524288	; 0x80000
   13740:	bne	13750 <__assert_fail@plt+0x27fc>
   13744:	mov	r0, r1
   13748:	mov	r1, r2
   1374c:	b	172b0 <__assert_fail@plt+0x635c>
   13750:	ldr	r0, [r0, #32]
   13754:	b	16e38 <__assert_fail@plt+0x5ee4>
   13758:	push	{r4, r6, r7, sl, fp, lr}
   1375c:	add	fp, sp, #16
   13760:	cmp	r0, #0
   13764:	beq	13794 <__assert_fail@plt+0x2840>
   13768:	mov	r4, r0
   1376c:	ldrd	r6, [r4, #8]
   13770:	cmp	r7, #0
   13774:	beq	13780 <__assert_fail@plt+0x282c>
   13778:	mov	r0, r7
   1377c:	bl	10f3c <closedir@plt>
   13780:	mov	r0, r4
   13784:	bl	13028 <__assert_fail@plt+0x20d4>
   13788:	cmp	r6, #0
   1378c:	mov	r4, r6
   13790:	bne	1376c <__assert_fail@plt+0x2818>
   13794:	pop	{r4, r6, r7, sl, fp, pc}
   13798:	push	{r4, r5, fp, lr}
   1379c:	add	fp, sp, #8
   137a0:	mov	r4, r0
   137a4:	ldr	r0, [r0]
   137a8:	cmp	r0, #0
   137ac:	beq	137ec <__assert_fail@plt+0x2898>
   137b0:	ldr	r1, [r0, #48]	; 0x30
   137b4:	cmp	r1, #0
   137b8:	bmi	137e0 <__assert_fail@plt+0x288c>
   137bc:	ldr	r5, [r0, #8]
   137c0:	cmp	r5, #0
   137c4:	ldreq	r5, [r0, #4]
   137c8:	bl	13028 <__assert_fail@plt+0x20d4>
   137cc:	ldr	r0, [r5, #48]	; 0x30
   137d0:	cmn	r0, #1
   137d4:	mov	r0, r5
   137d8:	bgt	137bc <__assert_fail@plt+0x2868>
   137dc:	b	137e4 <__assert_fail@plt+0x2890>
   137e0:	mov	r5, r0
   137e4:	mov	r0, r5
   137e8:	bl	13028 <__assert_fail@plt+0x20d4>
   137ec:	ldr	r0, [r4, #4]
   137f0:	cmp	r0, #0
   137f4:	blne	13758 <__assert_fail@plt+0x2804>
   137f8:	ldr	r0, [r4, #8]
   137fc:	bl	13028 <__assert_fail@plt+0x20d4>
   13800:	ldr	r0, [r4, #24]
   13804:	bl	13028 <__assert_fail@plt+0x20d4>
   13808:	ldr	r0, [r4, #48]	; 0x30
   1380c:	tst	r0, #512	; 0x200
   13810:	bne	1383c <__assert_fail@plt+0x28e8>
   13814:	mov	r5, #0
   13818:	tst	r0, #4
   1381c:	bne	13878 <__assert_fail@plt+0x2924>
   13820:	ldr	r0, [r4, #28]
   13824:	bl	10edc <fchdir@plt>
   13828:	cmp	r0, #0
   1382c:	beq	13854 <__assert_fail@plt+0x2900>
   13830:	bl	10e4c <__errno_location@plt>
   13834:	ldr	r5, [r0]
   13838:	b	13858 <__assert_fail@plt+0x2904>
   1383c:	ldr	r0, [r4, #32]
   13840:	mov	r5, #0
   13844:	cmp	r0, #0
   13848:	bmi	13878 <__assert_fail@plt+0x2924>
   1384c:	bl	10f24 <close@plt>
   13850:	b	13868 <__assert_fail@plt+0x2914>
   13854:	mov	r5, #0
   13858:	ldr	r0, [r4, #28]
   1385c:	bl	10f24 <close@plt>
   13860:	cmp	r5, #0
   13864:	bne	13878 <__assert_fail@plt+0x2924>
   13868:	cmp	r0, #0
   1386c:	beq	13878 <__assert_fail@plt+0x2924>
   13870:	bl	10e4c <__errno_location@plt>
   13874:	ldr	r5, [r0]
   13878:	add	r0, r4, #60	; 0x3c
   1387c:	bl	138c0 <__assert_fail@plt+0x296c>
   13880:	ldr	r0, [r4, #52]	; 0x34
   13884:	cmp	r0, #0
   13888:	beq	13890 <__assert_fail@plt+0x293c>
   1388c:	bl	16530 <__assert_fail@plt+0x55dc>
   13890:	mov	r0, r4
   13894:	bl	138f8 <__assert_fail@plt+0x29a4>
   13898:	mov	r0, r4
   1389c:	bl	13028 <__assert_fail@plt+0x20d4>
   138a0:	cmp	r5, #0
   138a4:	beq	138b8 <__assert_fail@plt+0x2964>
   138a8:	bl	10e4c <__errno_location@plt>
   138ac:	str	r5, [r0]
   138b0:	mvn	r0, #0
   138b4:	pop	{r4, r5, fp, pc}
   138b8:	mov	r0, #0
   138bc:	pop	{r4, r5, fp, pc}
   138c0:	push	{r4, sl, fp, lr}
   138c4:	add	fp, sp, #8
   138c8:	mov	r4, r0
   138cc:	bl	16cf8 <__assert_fail@plt+0x5da4>
   138d0:	cmp	r0, #0
   138d4:	bne	138f4 <__assert_fail@plt+0x29a0>
   138d8:	mov	r0, r4
   138dc:	bl	16d4c <__assert_fail@plt+0x5df8>
   138e0:	cmp	r0, #0
   138e4:	bmi	138ec <__assert_fail@plt+0x2998>
   138e8:	bl	10f24 <close@plt>
   138ec:	mov	r0, r4
   138f0:	b	138cc <__assert_fail@plt+0x2978>
   138f4:	pop	{r4, sl, fp, pc}
   138f8:	ldrh	r1, [r0, #48]	; 0x30
   138fc:	movw	r2, #258	; 0x102
   13900:	tst	r1, r2
   13904:	beq	13918 <__assert_fail@plt+0x29c4>
   13908:	ldr	r0, [r0, #56]	; 0x38
   1390c:	cmp	r0, #0
   13910:	bxeq	lr
   13914:	b	16530 <__assert_fail@plt+0x55dc>
   13918:	ldr	r0, [r0, #56]	; 0x38
   1391c:	b	13028 <__assert_fail@plt+0x20d4>
   13920:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13924:	add	fp, sp, #24
   13928:	ldr	r6, [r0]
   1392c:	mov	r5, #0
   13930:	cmp	r6, #0
   13934:	beq	13f24 <__assert_fail@plt+0x2fd0>
   13938:	ldr	r1, [r0, #48]	; 0x30
   1393c:	mov	r4, r0
   13940:	tst	r1, #8192	; 0x2000
   13944:	bne	13f24 <__assert_fail@plt+0x2fd0>
   13948:	ldrh	r0, [r6, #60]	; 0x3c
   1394c:	mov	r2, #3
   13950:	strh	r2, [r6, #60]	; 0x3c
   13954:	cmp	r0, #1
   13958:	beq	139c8 <__assert_fail@plt+0x2a74>
   1395c:	cmp	r0, #2
   13960:	bne	139e0 <__assert_fail@plt+0x2a8c>
   13964:	ldrh	r2, [r6, #56]	; 0x38
   13968:	bic	r3, r2, #1
   1396c:	cmp	r3, #12
   13970:	bne	139e4 <__assert_fail@plt+0x2a90>
   13974:	mov	r0, r4
   13978:	mov	r1, r6
   1397c:	mov	r2, #1
   13980:	bl	1346c <__assert_fail@plt+0x2518>
   13984:	cmp	r0, #1
   13988:	strh	r0, [r6, #56]	; 0x38
   1398c:	bne	13d78 <__assert_fail@plt+0x2e24>
   13990:	ldrb	r0, [r4, #48]	; 0x30
   13994:	tst	r0, #4
   13998:	bne	13d78 <__assert_fail@plt+0x2e24>
   1399c:	movw	r1, #30499	; 0x7723
   139a0:	mov	r0, r4
   139a4:	movt	r1, #1
   139a8:	bl	13728 <__assert_fail@plt+0x27d4>
   139ac:	cmn	r0, #1
   139b0:	str	r0, [r6, #36]	; 0x24
   139b4:	ble	13d64 <__assert_fail@plt+0x2e10>
   139b8:	ldrh	r0, [r6, #58]	; 0x3a
   139bc:	orr	r0, r0, #2
   139c0:	strh	r0, [r6, #58]	; 0x3a
   139c4:	b	13d78 <__assert_fail@plt+0x2e24>
   139c8:	mov	r0, r4
   139cc:	mov	r1, r6
   139d0:	mov	r2, #0
   139d4:	bl	1346c <__assert_fail@plt+0x2518>
   139d8:	strh	r0, [r6, #56]	; 0x38
   139dc:	b	13a34 <__assert_fail@plt+0x2ae0>
   139e0:	ldrh	r2, [r6, #56]	; 0x38
   139e4:	cmp	r2, #1
   139e8:	bne	13a3c <__assert_fail@plt+0x2ae8>
   139ec:	cmp	r0, #4
   139f0:	bne	13acc <__assert_fail@plt+0x2b78>
   139f4:	ldrb	r0, [r6, #58]	; 0x3a
   139f8:	tst	r0, #2
   139fc:	beq	13a08 <__assert_fail@plt+0x2ab4>
   13a00:	ldr	r0, [r6, #36]	; 0x24
   13a04:	bl	10f24 <close@plt>
   13a08:	ldr	r0, [r4, #4]
   13a0c:	cmp	r0, #0
   13a10:	beq	13a20 <__assert_fail@plt+0x2acc>
   13a14:	bl	13758 <__assert_fail@plt+0x2804>
   13a18:	mov	r0, #0
   13a1c:	str	r0, [r4, #4]
   13a20:	mov	r0, #6
   13a24:	strh	r0, [r6, #56]	; 0x38
   13a28:	mov	r0, r4
   13a2c:	mov	r1, r6
   13a30:	bl	13f30 <__assert_fail@plt+0x2fdc>
   13a34:	mov	r5, r6
   13a38:	b	13f24 <__assert_fail@plt+0x2fd0>
   13a3c:	ldr	r5, [r6, #8]
   13a40:	cmp	r5, #0
   13a44:	beq	13b64 <__assert_fail@plt+0x2c10>
   13a48:	mov	r0, r6
   13a4c:	str	r5, [r4]
   13a50:	bl	13028 <__assert_fail@plt+0x20d4>
   13a54:	ldr	r0, [r5, #48]	; 0x30
   13a58:	cmp	r0, #0
   13a5c:	beq	13bb0 <__assert_fail@plt+0x2c5c>
   13a60:	ldrh	r0, [r5, #60]	; 0x3c
   13a64:	mov	r6, r5
   13a68:	cmp	r0, #4
   13a6c:	beq	13a3c <__assert_fail@plt+0x2ae8>
   13a70:	cmp	r0, #2
   13a74:	bne	13e0c <__assert_fail@plt+0x2eb8>
   13a78:	mov	r0, r4
   13a7c:	mov	r1, r5
   13a80:	mov	r2, #1
   13a84:	bl	1346c <__assert_fail@plt+0x2518>
   13a88:	cmp	r0, #1
   13a8c:	strh	r0, [r5, #56]	; 0x38
   13a90:	bne	13e04 <__assert_fail@plt+0x2eb0>
   13a94:	ldrb	r0, [r4, #48]	; 0x30
   13a98:	tst	r0, #4
   13a9c:	bne	13e04 <__assert_fail@plt+0x2eb0>
   13aa0:	movw	r1, #30499	; 0x7723
   13aa4:	mov	r0, r4
   13aa8:	movt	r1, #1
   13aac:	bl	13728 <__assert_fail@plt+0x27d4>
   13ab0:	cmn	r0, #1
   13ab4:	str	r0, [r5, #36]	; 0x24
   13ab8:	ble	13df0 <__assert_fail@plt+0x2e9c>
   13abc:	ldrh	r0, [r5, #58]	; 0x3a
   13ac0:	orr	r0, r0, #2
   13ac4:	strh	r0, [r5, #58]	; 0x3a
   13ac8:	b	13e04 <__assert_fail@plt+0x2eb0>
   13acc:	tst	r1, #64	; 0x40
   13ad0:	beq	13af4 <__assert_fail@plt+0x2ba0>
   13ad4:	ldr	r0, [r4, #16]
   13ad8:	ldr	r2, [r6, #64]	; 0x40
   13adc:	ldr	r3, [r4, #20]
   13ae0:	ldr	r5, [r6, #68]	; 0x44
   13ae4:	eor	r3, r5, r3
   13ae8:	eor	r0, r2, r0
   13aec:	orrs	r0, r0, r3
   13af0:	bne	139f4 <__assert_fail@plt+0x2aa0>
   13af4:	ldr	r0, [r4, #4]
   13af8:	cmp	r0, #0
   13afc:	beq	13c70 <__assert_fail@plt+0x2d1c>
   13b00:	tst	r1, #4096	; 0x1000
   13b04:	bne	13c5c <__assert_fail@plt+0x2d08>
   13b08:	ldr	r3, [r6, #24]
   13b0c:	mov	r0, r4
   13b10:	mov	r1, r6
   13b14:	mvn	r2, #0
   13b18:	bl	14008 <__assert_fail@plt+0x30b4>
   13b1c:	cmp	r0, #0
   13b20:	beq	13c88 <__assert_fail@plt+0x2d34>
   13b24:	bl	10e4c <__errno_location@plt>
   13b28:	ldr	r0, [r0]
   13b2c:	str	r0, [r6, #32]
   13b30:	ldrh	r0, [r6, #58]	; 0x3a
   13b34:	orr	r0, r0, #1
   13b38:	strh	r0, [r6, #58]	; 0x3a
   13b3c:	ldr	r0, [r4, #4]
   13b40:	cmp	r0, #0
   13b44:	beq	13c88 <__assert_fail@plt+0x2d34>
   13b48:	ldmib	r0, {r1, r2}
   13b4c:	cmp	r2, #0
   13b50:	ldr	r1, [r1, #24]
   13b54:	str	r1, [r0, #24]
   13b58:	mov	r0, r2
   13b5c:	bne	13b48 <__assert_fail@plt+0x2bf4>
   13b60:	b	13c88 <__assert_fail@plt+0x2d34>
   13b64:	ldr	r5, [r6, #4]
   13b68:	ldr	r0, [r5, #12]
   13b6c:	cmp	r0, #0
   13b70:	beq	13cd8 <__assert_fail@plt+0x2d84>
   13b74:	str	r5, [r4]
   13b78:	ldr	r1, [r5, #40]	; 0x28
   13b7c:	ldr	r0, [r4, #24]
   13b80:	mov	r5, #0
   13b84:	strb	r5, [r0, r1]
   13b88:	mov	r0, r4
   13b8c:	mov	r1, #3
   13b90:	bl	141e8 <__assert_fail@plt+0x3294>
   13b94:	cmp	r0, #0
   13b98:	beq	13cc8 <__assert_fail@plt+0x2d74>
   13b9c:	mov	r7, r0
   13ba0:	mov	r0, r6
   13ba4:	bl	13028 <__assert_fail@plt+0x20d4>
   13ba8:	mov	r5, r7
   13bac:	b	13e0c <__assert_fail@plt+0x2eb8>
   13bb0:	mov	r0, r4
   13bb4:	bl	14b78 <__assert_fail@plt+0x3c24>
   13bb8:	cmp	r0, #0
   13bbc:	beq	13bd4 <__assert_fail@plt+0x2c80>
   13bc0:	ldr	r0, [r4, #48]	; 0x30
   13bc4:	mov	r5, #0
   13bc8:	orr	r0, r0, #8192	; 0x2000
   13bcc:	str	r0, [r4, #48]	; 0x30
   13bd0:	b	13f24 <__assert_fail@plt+0x2fd0>
   13bd4:	mov	r0, r4
   13bd8:	bl	138f8 <__assert_fail@plt+0x29a4>
   13bdc:	ldr	r1, [r5, #52]	; 0x34
   13be0:	add	r6, r5, #168	; 0xa8
   13be4:	str	r1, [r5, #40]	; 0x28
   13be8:	add	r2, r1, #1
   13bec:	mov	r1, r6
   13bf0:	ldr	r0, [r4, #24]
   13bf4:	bl	10d2c <memmove@plt>
   13bf8:	mov	r0, r6
   13bfc:	mov	r1, #47	; 0x2f
   13c00:	bl	10e88 <strrchr@plt>
   13c04:	cmp	r0, #0
   13c08:	beq	13c44 <__assert_fail@plt+0x2cf0>
   13c0c:	cmp	r0, r6
   13c10:	bne	13c20 <__assert_fail@plt+0x2ccc>
   13c14:	ldrb	r1, [r5, #169]	; 0xa9
   13c18:	cmp	r1, #0
   13c1c:	beq	13c44 <__assert_fail@plt+0x2cf0>
   13c20:	add	r7, r0, #1
   13c24:	mov	r0, r7
   13c28:	bl	10e1c <strlen@plt>
   13c2c:	mov	r8, r0
   13c30:	add	r2, r0, #1
   13c34:	mov	r0, r6
   13c38:	mov	r1, r7
   13c3c:	bl	10d2c <memmove@plt>
   13c40:	str	r8, [r5, #52]	; 0x34
   13c44:	ldr	r0, [r4, #24]
   13c48:	str	r0, [r5, #24]
   13c4c:	str	r0, [r5, #28]
   13c50:	mov	r0, r4
   13c54:	bl	1369c <__assert_fail@plt+0x2748>
   13c58:	b	13e48 <__assert_fail@plt+0x2ef4>
   13c5c:	bic	r1, r1, #4096	; 0x1000
   13c60:	str	r1, [r4, #48]	; 0x30
   13c64:	bl	13758 <__assert_fail@plt+0x2804>
   13c68:	mov	r0, #0
   13c6c:	str	r0, [r4, #4]
   13c70:	mov	r0, r4
   13c74:	mov	r1, #3
   13c78:	bl	141e8 <__assert_fail@plt+0x3294>
   13c7c:	cmp	r0, #0
   13c80:	str	r0, [r4, #4]
   13c84:	beq	13c98 <__assert_fail@plt+0x2d44>
   13c88:	ldr	r5, [r4, #4]
   13c8c:	mov	r0, #0
   13c90:	str	r0, [r4, #4]
   13c94:	b	13e0c <__assert_fail@plt+0x2eb8>
   13c98:	ldrb	r0, [r4, #49]	; 0x31
   13c9c:	mov	r5, #0
   13ca0:	tst	r0, #32
   13ca4:	bne	13f24 <__assert_fail@plt+0x2fd0>
   13ca8:	ldr	r0, [r6, #32]
   13cac:	cmp	r0, #0
   13cb0:	beq	13a28 <__assert_fail@plt+0x2ad4>
   13cb4:	ldrh	r0, [r6, #56]	; 0x38
   13cb8:	cmp	r0, #4
   13cbc:	beq	13a28 <__assert_fail@plt+0x2ad4>
   13cc0:	mov	r0, #7
   13cc4:	b	13a24 <__assert_fail@plt+0x2ad0>
   13cc8:	ldrb	r0, [r4, #49]	; 0x31
   13ccc:	tst	r0, #32
   13cd0:	bne	13f24 <__assert_fail@plt+0x2fd0>
   13cd4:	ldr	r5, [r6, #4]
   13cd8:	mov	r0, r6
   13cdc:	str	r5, [r4]
   13ce0:	bl	13028 <__assert_fail@plt+0x20d4>
   13ce4:	ldr	r0, [r5, #48]	; 0x30
   13ce8:	cmn	r0, #1
   13cec:	beq	13d48 <__assert_fail@plt+0x2df4>
   13cf0:	ldrh	r0, [r5, #56]	; 0x38
   13cf4:	cmp	r0, #11
   13cf8:	beq	13f2c <__assert_fail@plt+0x2fd8>
   13cfc:	ldr	r0, [r5, #40]	; 0x28
   13d00:	ldr	r1, [r4, #24]
   13d04:	mov	r2, #0
   13d08:	strb	r2, [r1, r0]
   13d0c:	ldr	r0, [r5, #48]	; 0x30
   13d10:	cmp	r0, #0
   13d14:	beq	13d80 <__assert_fail@plt+0x2e2c>
   13d18:	ldrh	r0, [r5, #58]	; 0x3a
   13d1c:	tst	r0, #2
   13d20:	bne	13dac <__assert_fail@plt+0x2e58>
   13d24:	tst	r0, #1
   13d28:	bne	13ee8 <__assert_fail@plt+0x2f94>
   13d2c:	ldr	r1, [r5, #4]
   13d30:	movw	r3, #30498	; 0x7722
   13d34:	mov	r0, r4
   13d38:	mvn	r2, #0
   13d3c:	movt	r3, #1
   13d40:	bl	14008 <__assert_fail@plt+0x30b4>
   13d44:	b	13d88 <__assert_fail@plt+0x2e34>
   13d48:	mov	r0, r5
   13d4c:	bl	13028 <__assert_fail@plt+0x20d4>
   13d50:	bl	10e4c <__errno_location@plt>
   13d54:	mov	r5, #0
   13d58:	str	r5, [r0]
   13d5c:	str	r5, [r4]
   13d60:	b	13f24 <__assert_fail@plt+0x2fd0>
   13d64:	bl	10e4c <__errno_location@plt>
   13d68:	ldr	r0, [r0]
   13d6c:	mov	r1, #7
   13d70:	strh	r1, [r6, #56]	; 0x38
   13d74:	str	r0, [r6, #32]
   13d78:	mov	r5, r6
   13d7c:	b	13e48 <__assert_fail@plt+0x2ef4>
   13d80:	mov	r0, r4
   13d84:	bl	14b78 <__assert_fail@plt+0x3c24>
   13d88:	cmp	r0, #0
   13d8c:	beq	13ee8 <__assert_fail@plt+0x2f94>
   13d90:	bl	10e4c <__errno_location@plt>
   13d94:	ldr	r0, [r0]
   13d98:	str	r0, [r5, #32]
   13d9c:	ldr	r0, [r4, #48]	; 0x30
   13da0:	orr	r0, r0, #8192	; 0x2000
   13da4:	str	r0, [r4, #48]	; 0x30
   13da8:	b	13ee8 <__assert_fail@plt+0x2f94>
   13dac:	ldr	r0, [r4, #48]	; 0x30
   13db0:	tst	r0, #4
   13db4:	bne	13ee0 <__assert_fail@plt+0x2f8c>
   13db8:	ldr	r1, [r5, #36]	; 0x24
   13dbc:	tst	r0, #512	; 0x200
   13dc0:	bne	13ed4 <__assert_fail@plt+0x2f80>
   13dc4:	mov	r0, r1
   13dc8:	bl	10edc <fchdir@plt>
   13dcc:	cmp	r0, #0
   13dd0:	beq	13ee0 <__assert_fail@plt+0x2f8c>
   13dd4:	bl	10e4c <__errno_location@plt>
   13dd8:	ldr	r0, [r0]
   13ddc:	str	r0, [r5, #32]
   13de0:	ldr	r0, [r4, #48]	; 0x30
   13de4:	orr	r0, r0, #8192	; 0x2000
   13de8:	str	r0, [r4, #48]	; 0x30
   13dec:	b	13ee0 <__assert_fail@plt+0x2f8c>
   13df0:	bl	10e4c <__errno_location@plt>
   13df4:	ldr	r0, [r0]
   13df8:	mov	r1, #7
   13dfc:	strh	r1, [r5, #56]	; 0x38
   13e00:	str	r0, [r5, #32]
   13e04:	mov	r0, #3
   13e08:	strh	r0, [r5, #60]	; 0x3c
   13e0c:	ldr	r0, [r5, #4]
   13e10:	ldr	r1, [r0, #28]
   13e14:	ldr	r0, [r0, #40]	; 0x28
   13e18:	sub	r2, r0, #1
   13e1c:	ldrb	r1, [r1, r2]
   13e20:	cmp	r1, #47	; 0x2f
   13e24:	ldr	r1, [r4, #24]
   13e28:	moveq	r0, r2
   13e2c:	mov	r2, #47	; 0x2f
   13e30:	strb	r2, [r1, r0]!
   13e34:	ldr	r2, [r5, #52]	; 0x34
   13e38:	add	r0, r1, #1
   13e3c:	add	r1, r5, #168	; 0xa8
   13e40:	add	r2, r2, #1
   13e44:	bl	10d2c <memmove@plt>
   13e48:	str	r5, [r4]
   13e4c:	ldrh	r0, [r5, #56]	; 0x38
   13e50:	cmp	r0, #11
   13e54:	bne	13e8c <__assert_fail@plt+0x2f38>
   13e58:	add	r0, r5, #112	; 0x70
   13e5c:	ldrd	r0, [r0]
   13e60:	eor	r2, r0, #1
   13e64:	orrs	r2, r2, r1
   13e68:	beq	13f24 <__assert_fail@plt+0x2fd0>
   13e6c:	eor	r0, r0, #2
   13e70:	orrs	r0, r0, r1
   13e74:	bne	13f2c <__assert_fail@plt+0x2fd8>
   13e78:	mov	r0, r4
   13e7c:	mov	r1, r5
   13e80:	mov	r2, #0
   13e84:	bl	1346c <__assert_fail@plt+0x2518>
   13e88:	strh	r0, [r5, #56]	; 0x38
   13e8c:	cmp	r0, #1
   13e90:	bne	13f24 <__assert_fail@plt+0x2fd0>
   13e94:	ldr	r0, [r5, #48]	; 0x30
   13e98:	cmp	r0, #0
   13e9c:	bne	13eac <__assert_fail@plt+0x2f58>
   13ea0:	add	r0, r5, #64	; 0x40
   13ea4:	ldrd	r0, [r0]
   13ea8:	strd	r0, [r4, #16]
   13eac:	mov	r0, r4
   13eb0:	mov	r1, r5
   13eb4:	bl	14bd4 <__assert_fail@plt+0x3c80>
   13eb8:	cmp	r0, #0
   13ebc:	bne	13f24 <__assert_fail@plt+0x2fd0>
   13ec0:	bl	10e4c <__errno_location@plt>
   13ec4:	mov	r1, #12
   13ec8:	mov	r5, #0
   13ecc:	str	r1, [r0]
   13ed0:	b	13f24 <__assert_fail@plt+0x2fd0>
   13ed4:	mov	r0, r4
   13ed8:	mov	r2, #1
   13edc:	bl	14c90 <__assert_fail@plt+0x3d3c>
   13ee0:	ldr	r0, [r5, #36]	; 0x24
   13ee4:	bl	10f24 <close@plt>
   13ee8:	ldrh	r0, [r5, #56]	; 0x38
   13eec:	cmp	r0, #2
   13ef0:	beq	13f18 <__assert_fail@plt+0x2fc4>
   13ef4:	ldr	r0, [r5, #32]
   13ef8:	mov	r1, #7
   13efc:	cmp	r0, #0
   13f00:	movweq	r1, #6
   13f04:	strh	r1, [r5, #56]	; 0x38
   13f08:	bne	13f18 <__assert_fail@plt+0x2fc4>
   13f0c:	mov	r0, r4
   13f10:	mov	r1, r5
   13f14:	bl	13f30 <__assert_fail@plt+0x2fdc>
   13f18:	ldrb	r0, [r4, #49]	; 0x31
   13f1c:	tst	r0, #32
   13f20:	movne	r5, #0
   13f24:	mov	r0, r5
   13f28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f2c:	bl	10f18 <abort@plt>
   13f30:	push	{r4, r5, r7, sl, fp, lr}
   13f34:	add	fp, sp, #16
   13f38:	sub	sp, sp, #24
   13f3c:	ldrh	r2, [r0, #48]	; 0x30
   13f40:	movw	r3, #258	; 0x102
   13f44:	add	lr, r1, #64	; 0x40
   13f48:	add	r4, r1, #160	; 0xa0
   13f4c:	tst	r2, r3
   13f50:	beq	13f88 <__assert_fail@plt+0x3034>
   13f54:	ldrd	r2, [lr]
   13f58:	mov	r1, sp
   13f5c:	stm	sp, {r2, r3}
   13f60:	ldrd	r2, [r4]
   13f64:	str	r3, [sp, #12]
   13f68:	str	r2, [sp, #8]
   13f6c:	ldr	r0, [r0, #56]	; 0x38
   13f70:	bl	16bc0 <__assert_fail@plt+0x5c6c>
   13f74:	cmp	r0, #0
   13f78:	beq	14004 <__assert_fail@plt+0x30b0>
   13f7c:	bl	13028 <__assert_fail@plt+0x20d4>
   13f80:	sub	sp, fp, #16
   13f84:	pop	{r4, r5, r7, sl, fp, pc}
   13f88:	ldr	r1, [r1, #4]
   13f8c:	cmp	r1, #0
   13f90:	beq	13f80 <__assert_fail@plt+0x302c>
   13f94:	ldr	r2, [r1, #48]	; 0x30
   13f98:	cmp	r2, #0
   13f9c:	bmi	13f80 <__assert_fail@plt+0x302c>
   13fa0:	ldr	ip, [r0, #56]	; 0x38
   13fa4:	ldrd	r2, [ip, #16]
   13fa8:	orrs	r2, r2, r3
   13fac:	beq	14004 <__assert_fail@plt+0x30b0>
   13fb0:	ldrd	r2, [r4]
   13fb4:	ldrd	r4, [ip]
   13fb8:	eor	r3, r5, r3
   13fbc:	eor	r2, r4, r2
   13fc0:	orrs	r2, r2, r3
   13fc4:	bne	13f80 <__assert_fail@plt+0x302c>
   13fc8:	add	r3, ip, #8
   13fcc:	ldm	lr, {r2, r5}
   13fd0:	ldm	r3, {r4, r7}
   13fd4:	eor	r7, r7, r5
   13fd8:	eor	r2, r4, r2
   13fdc:	orrs	r2, r2, r7
   13fe0:	bne	13f80 <__assert_fail@plt+0x302c>
   13fe4:	add	r2, r1, #64	; 0x40
   13fe8:	add	r1, r1, #160	; 0xa0
   13fec:	ldm	r2, {r2, r5}
   13ff0:	stm	r3, {r2, r5}
   13ff4:	ldr	r0, [r0, #56]	; 0x38
   13ff8:	ldrd	r2, [r1]
   13ffc:	strd	r2, [r0]
   14000:	b	13f80 <__assert_fail@plt+0x302c>
   14004:	bl	10f18 <abort@plt>
   14008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1400c:	add	fp, sp, #28
   14010:	sub	sp, sp, #108	; 0x6c
   14014:	mov	r7, r3
   14018:	mov	r4, r2
   1401c:	mov	r8, r1
   14020:	mov	sl, r0
   14024:	cmp	r3, #0
   14028:	beq	1404c <__assert_fail@plt+0x30f8>
   1402c:	movw	r1, #30498	; 0x7722
   14030:	mov	r0, r7
   14034:	movt	r1, #1
   14038:	bl	10cfc <strcmp@plt>
   1403c:	cmp	r0, #0
   14040:	mov	r6, r0
   14044:	movwne	r6, #1
   14048:	b	14050 <__assert_fail@plt+0x30fc>
   1404c:	mov	r6, #1
   14050:	ldr	r0, [sl, #48]	; 0x30
   14054:	tst	r0, #4
   14058:	bne	140b0 <__assert_fail@plt+0x315c>
   1405c:	cmn	r4, #1
   14060:	mov	r1, #0
   14064:	mov	r9, #0
   14068:	movwgt	r1, #1
   1406c:	orrs	r1, r1, r6
   14070:	bne	140d0 <__assert_fail@plt+0x317c>
   14074:	ands	r0, r0, #512	; 0x200
   14078:	beq	140d0 <__assert_fail@plt+0x317c>
   1407c:	add	r4, sl, #60	; 0x3c
   14080:	mov	r0, r4
   14084:	bl	16cf8 <__assert_fail@plt+0x5da4>
   14088:	cmp	r0, #0
   1408c:	bne	140d8 <__assert_fail@plt+0x3184>
   14090:	mov	r0, r4
   14094:	bl	16d4c <__assert_fail@plt+0x5df8>
   14098:	cmn	r0, #1
   1409c:	ble	140d8 <__assert_fail@plt+0x3184>
   140a0:	mov	r4, r0
   140a4:	mov	r9, #0
   140a8:	mov	r7, #0
   140ac:	b	140f4 <__assert_fail@plt+0x31a0>
   140b0:	mov	r5, #0
   140b4:	cmp	r4, #0
   140b8:	bmi	141dc <__assert_fail@plt+0x3288>
   140bc:	ands	r0, r0, #512	; 0x200
   140c0:	beq	141dc <__assert_fail@plt+0x3288>
   140c4:	mov	r0, r4
   140c8:	bl	10f24 <close@plt>
   140cc:	b	141dc <__assert_fail@plt+0x3288>
   140d0:	cmn	r4, #1
   140d4:	bgt	140f4 <__assert_fail@plt+0x31a0>
   140d8:	mov	r0, sl
   140dc:	mov	r1, r7
   140e0:	bl	13728 <__assert_fail@plt+0x27d4>
   140e4:	cmp	r0, #0
   140e8:	bmi	1418c <__assert_fail@plt+0x3238>
   140ec:	mov	r4, r0
   140f0:	mov	r9, #1
   140f4:	ldr	r5, [sl, #48]	; 0x30
   140f8:	tst	r5, #2
   140fc:	bne	14120 <__assert_fail@plt+0x31cc>
   14100:	cmp	r7, #0
   14104:	beq	14174 <__assert_fail@plt+0x3220>
   14108:	movw	r1, #30498	; 0x7722
   1410c:	mov	r0, r7
   14110:	movt	r1, #1
   14114:	bl	10cfc <strcmp@plt>
   14118:	cmp	r0, #0
   1411c:	bne	14174 <__assert_fail@plt+0x3220>
   14120:	mov	r1, sp
   14124:	mov	r0, r4
   14128:	bl	175b4 <__assert_fail@plt+0x6660>
   1412c:	cmp	r0, #0
   14130:	bne	141b8 <__assert_fail@plt+0x3264>
   14134:	add	r0, r8, #64	; 0x40
   14138:	ldm	sp, {r2, r3}
   1413c:	ldrd	r0, [r0]
   14140:	eor	r1, r1, r3
   14144:	eor	r0, r0, r2
   14148:	orrs	r0, r0, r1
   1414c:	bne	141ac <__assert_fail@plt+0x3258>
   14150:	add	r0, r8, #160	; 0xa0
   14154:	ldr	r2, [sp, #96]	; 0x60
   14158:	ldr	r3, [sp, #100]	; 0x64
   1415c:	ldrd	r0, [r0]
   14160:	eor	r1, r1, r3
   14164:	eor	r0, r0, r2
   14168:	orrs	r0, r0, r1
   1416c:	bne	141ac <__assert_fail@plt+0x3258>
   14170:	ldr	r5, [sl, #48]	; 0x30
   14174:	tst	r5, #512	; 0x200
   14178:	bne	14194 <__assert_fail@plt+0x3240>
   1417c:	mov	r0, r4
   14180:	bl	10edc <fchdir@plt>
   14184:	mov	r5, r0
   14188:	b	141bc <__assert_fail@plt+0x3268>
   1418c:	mvn	r5, #0
   14190:	b	141dc <__assert_fail@plt+0x3288>
   14194:	mov	r0, sl
   14198:	mov	r1, r4
   1419c:	mov	r2, r6
   141a0:	bl	14c90 <__assert_fail@plt+0x3d3c>
   141a4:	mov	r5, #0
   141a8:	b	141dc <__assert_fail@plt+0x3288>
   141ac:	bl	10e4c <__errno_location@plt>
   141b0:	mov	r1, #2
   141b4:	str	r1, [r0]
   141b8:	mvn	r5, #0
   141bc:	cmp	r9, #0
   141c0:	beq	141dc <__assert_fail@plt+0x3288>
   141c4:	bl	10e4c <__errno_location@plt>
   141c8:	ldr	r7, [r0]
   141cc:	mov	r6, r0
   141d0:	mov	r0, r4
   141d4:	bl	10f24 <close@plt>
   141d8:	str	r7, [r6]
   141dc:	mov	r0, r5
   141e0:	sub	sp, fp, #28
   141e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141ec:	add	fp, sp, #28
   141f0:	sub	sp, sp, #68	; 0x44
   141f4:	ldr	sl, [r0]
   141f8:	mov	r4, r1
   141fc:	str	r0, [fp, #-36]	; 0xffffffdc
   14200:	ldr	r9, [sl, #12]
   14204:	cmp	r9, #0
   14208:	beq	1424c <__assert_fail@plt+0x32f8>
   1420c:	mov	r0, r9
   14210:	bl	10eb8 <dirfd@plt>
   14214:	cmn	r0, #1
   14218:	str	r0, [fp, #-32]	; 0xffffffe0
   1421c:	ble	14284 <__assert_fail@plt+0x3330>
   14220:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14224:	mov	ip, #0
   14228:	mov	r1, r7
   1422c:	ldr	r0, [r1, #44]!	; 0x2c
   14230:	str	r1, [sp, #24]
   14234:	mvn	r1, #0
   14238:	cmp	r0, #0
   1423c:	movweq	r1, #34464	; 0x86a0
   14240:	movteq	r1, #1
   14244:	str	r1, [sp, #32]
   14248:	b	144ec <__assert_fail@plt+0x3598>
   1424c:	ldr	r3, [r0, #48]	; 0x30
   14250:	mov	r2, r0
   14254:	mvn	r0, #99	; 0x63
   14258:	and	r1, r3, #516	; 0x204
   1425c:	cmp	r1, #512	; 0x200
   14260:	ldr	r1, [sl, #24]
   14264:	ldreq	r0, [r2, #32]
   14268:	mov	r2, #0
   1426c:	tst	r3, #16
   14270:	beq	142a4 <__assert_fail@plt+0x3350>
   14274:	tst	r3, #1
   14278:	bne	14298 <__assert_fail@plt+0x3344>
   1427c:	mov	r2, #32768	; 0x8000
   14280:	b	142a4 <__assert_fail@plt+0x3350>
   14284:	ldr	r0, [sl, #12]
   14288:	bl	10f3c <closedir@plt>
   1428c:	mov	r5, #0
   14290:	str	r5, [sl, #12]
   14294:	b	142e4 <__assert_fail@plt+0x3390>
   14298:	ldr	r3, [sl, #48]	; 0x30
   1429c:	cmp	r3, #0
   142a0:	movne	r2, #32768	; 0x8000
   142a4:	sub	r3, fp, #32
   142a8:	bl	16e70 <__assert_fail@plt+0x5f1c>
   142ac:	cmp	r0, #0
   142b0:	str	r0, [sl, #12]
   142b4:	beq	142e0 <__assert_fail@plt+0x338c>
   142b8:	ldrh	r0, [sl, #56]	; 0x38
   142bc:	cmp	r0, #11
   142c0:	bne	14304 <__assert_fail@plt+0x33b0>
   142c4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   142c8:	mov	r1, sl
   142cc:	mov	r2, #0
   142d0:	mov	r0, r7
   142d4:	bl	1346c <__assert_fail@plt+0x2518>
   142d8:	strh	r0, [sl, #56]	; 0x38
   142dc:	b	1434c <__assert_fail@plt+0x33f8>
   142e0:	mov	r5, #0
   142e4:	cmp	r4, #3
   142e8:	bne	14b6c <__assert_fail@plt+0x3c18>
   142ec:	mov	r0, #4
   142f0:	strh	r0, [sl, #56]	; 0x38
   142f4:	bl	10e4c <__errno_location@plt>
   142f8:	ldr	r0, [r0]
   142fc:	str	r0, [sl, #32]
   14300:	b	14b6c <__assert_fail@plt+0x3c18>
   14304:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14308:	ldrb	r0, [r7, #49]	; 0x31
   1430c:	tst	r0, #1
   14310:	beq	1434c <__assert_fail@plt+0x33f8>
   14314:	mov	r0, r7
   14318:	mov	r1, sl
   1431c:	bl	13f30 <__assert_fail@plt+0x2fdc>
   14320:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14324:	mov	r1, sl
   14328:	mov	r2, #0
   1432c:	mov	r5, #0
   14330:	bl	1346c <__assert_fail@plt+0x2518>
   14334:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14338:	mov	r1, sl
   1433c:	bl	14bd4 <__assert_fail@plt+0x3c80>
   14340:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14344:	cmp	r0, #0
   14348:	beq	143f0 <__assert_fail@plt+0x349c>
   1434c:	mov	r1, r7
   14350:	ldr	r0, [r1, #44]!	; 0x2c
   14354:	str	r1, [sp, #24]
   14358:	mvn	r1, #0
   1435c:	cmp	r0, #0
   14360:	movweq	r1, #34464	; 0x86a0
   14364:	movteq	r1, #1
   14368:	cmp	r4, #2
   1436c:	str	r1, [sp, #32]
   14370:	bne	14390 <__assert_fail@plt+0x343c>
   14374:	mov	ip, #1
   14378:	cmp	r4, #3
   1437c:	bne	144ec <__assert_fail@plt+0x3598>
   14380:	sub	r0, r4, #3
   14384:	mov	r8, r4
   14388:	mov	r5, #0
   1438c:	b	14424 <__assert_fail@plt+0x34d0>
   14390:	ldr	r0, [r7, #48]	; 0x30
   14394:	and	r0, r0, #56	; 0x38
   14398:	cmp	r0, #24
   1439c:	bne	14418 <__assert_fail@plt+0x34c4>
   143a0:	ldr	r0, [sl, #84]	; 0x54
   143a4:	cmp	r0, #2
   143a8:	bne	14418 <__assert_fail@plt+0x34c4>
   143ac:	ldr	r1, [fp, #-32]	; 0xffffffe0
   143b0:	mov	r0, sl
   143b4:	bl	14f30 <__assert_fail@plt+0x3fdc>
   143b8:	movw	r1, #26984	; 0x6968
   143bc:	cmp	r0, r1
   143c0:	ble	14400 <__assert_fail@plt+0x34ac>
   143c4:	movw	r1, #26985	; 0x6969
   143c8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   143cc:	cmp	r0, r1
   143d0:	movwne	r1, #16719	; 0x414f
   143d4:	movtne	r1, #21318	; 0x5346
   143d8:	cmpne	r0, r1
   143dc:	beq	14418 <__assert_fail@plt+0x34c4>
   143e0:	movw	r1, #40864	; 0x9fa0
   143e4:	cmp	r0, r1
   143e8:	beq	14418 <__assert_fail@plt+0x34c4>
   143ec:	b	14374 <__assert_fail@plt+0x3420>
   143f0:	bl	10e4c <__errno_location@plt>
   143f4:	mov	r1, #12
   143f8:	str	r1, [r0]
   143fc:	b	14b6c <__assert_fail@plt+0x3c18>
   14400:	movw	r1, #19778	; 0x4d42
   14404:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14408:	movt	r1, #65363	; 0xff53
   1440c:	cmp	r0, r1
   14410:	cmpne	r0, #0
   14414:	bne	14374 <__assert_fail@plt+0x3420>
   14418:	sub	r0, r4, #3
   1441c:	mov	r8, r4
   14420:	mov	r5, #1
   14424:	clz	r0, r0
   14428:	lsr	r4, r0, #5
   1442c:	ldrb	r0, [r7, #49]	; 0x31
   14430:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14434:	tst	r0, #2
   14438:	beq	14458 <__assert_fail@plt+0x3504>
   1443c:	mov	r0, r2
   14440:	movw	r1, #1030	; 0x406
   14444:	mov	r2, #3
   14448:	bl	170d8 <__assert_fail@plt+0x6184>
   1444c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14450:	mov	r2, r0
   14454:	str	r0, [fp, #-32]	; 0xffffffe0
   14458:	cmp	r2, #0
   1445c:	bmi	1447c <__assert_fail@plt+0x3528>
   14460:	mov	r0, r7
   14464:	mov	r1, sl
   14468:	mov	r3, #0
   1446c:	bl	14008 <__assert_fail@plt+0x30b4>
   14470:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14474:	cmp	r0, #0
   14478:	beq	144e4 <__assert_fail@plt+0x3590>
   1447c:	and	r0, r4, r5
   14480:	cmp	r0, #1
   14484:	bne	14494 <__assert_fail@plt+0x3540>
   14488:	bl	10e4c <__errno_location@plt>
   1448c:	ldr	r0, [r0]
   14490:	str	r0, [sl, #32]
   14494:	ldrh	r0, [sl, #58]	; 0x3a
   14498:	orr	r0, r0, #1
   1449c:	strh	r0, [sl, #58]	; 0x3a
   144a0:	ldr	r0, [sl, #12]
   144a4:	bl	10f3c <closedir@plt>
   144a8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   144ac:	mov	r4, #0
   144b0:	str	r4, [sl, #12]
   144b4:	ldrb	r0, [r7, #49]	; 0x31
   144b8:	tst	r0, #2
   144bc:	beq	144d4 <__assert_fail@plt+0x3580>
   144c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   144c4:	cmp	r0, #0
   144c8:	bmi	144d4 <__assert_fail@plt+0x3580>
   144cc:	bl	10f24 <close@plt>
   144d0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   144d4:	str	r4, [sl, #12]
   144d8:	mov	ip, #1
   144dc:	mov	r4, r8
   144e0:	b	144ec <__assert_fail@plt+0x3598>
   144e4:	mov	r4, r8
   144e8:	mov	ip, #0
   144ec:	ldr	r0, [sl, #40]	; 0x28
   144f0:	ldr	r1, [sl, #28]
   144f4:	mov	r5, #0
   144f8:	str	r4, [sp, #12]
   144fc:	sub	r2, r0, #1
   14500:	ldrb	r1, [r1, r2]
   14504:	cmp	r1, #47	; 0x2f
   14508:	ldrb	r1, [r7, #48]	; 0x30
   1450c:	moveq	r0, r2
   14510:	tst	r1, #4
   14514:	mov	r1, #0
   14518:	str	r1, [sp, #40]	; 0x28
   1451c:	beq	14534 <__assert_fail@plt+0x35e0>
   14520:	ldr	r1, [r7, #24]
   14524:	mov	r2, #47	; 0x2f
   14528:	strb	r2, [r1, r0]!
   1452c:	add	r1, r1, #1
   14530:	str	r1, [sp, #40]	; 0x28
   14534:	ldr	r4, [sl, #12]
   14538:	add	r1, r0, #1
   1453c:	str	r1, [sp, #48]	; 0x30
   14540:	cmp	r4, #0
   14544:	beq	14888 <__assert_fail@plt+0x3934>
   14548:	ldr	r0, [sl, #48]	; 0x30
   1454c:	str	ip, [sp, #4]
   14550:	str	r9, [sp, #8]
   14554:	add	r0, r0, #1
   14558:	str	r0, [sp, #28]
   1455c:	ldr	r0, [r7, #36]	; 0x24
   14560:	sub	r0, r0, r1
   14564:	str	r0, [fp, #-44]	; 0xffffffd4
   14568:	bl	10e4c <__errno_location@plt>
   1456c:	str	r0, [sp, #36]	; 0x24
   14570:	mov	r0, #0
   14574:	mov	r1, #0
   14578:	mov	r5, #0
   1457c:	mov	r8, #0
   14580:	mov	r9, #0
   14584:	str	r0, [sp, #20]
   14588:	mov	r0, #0
   1458c:	str	r0, [sp, #16]
   14590:	ldr	r0, [sp, #36]	; 0x24
   14594:	str	r5, [fp, #-40]	; 0xffffffd8
   14598:	mov	r5, sl
   1459c:	str	r1, [r0]
   145a0:	mov	r0, r4
   145a4:	bl	10ea0 <readdir64@plt>
   145a8:	cmp	r0, #0
   145ac:	beq	148e4 <__assert_fail@plt+0x3990>
   145b0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   145b4:	mov	sl, r0
   145b8:	ldrb	r0, [r7, #48]	; 0x30
   145bc:	tst	r0, #32
   145c0:	bne	145f0 <__assert_fail@plt+0x369c>
   145c4:	ldrb	r0, [sl, #19]
   145c8:	cmp	r0, #46	; 0x2e
   145cc:	bne	145f0 <__assert_fail@plt+0x369c>
   145d0:	ldrb	r0, [sl, #20]
   145d4:	cmp	r0, #0
   145d8:	beq	1482c <__assert_fail@plt+0x38d8>
   145dc:	cmp	r0, #46	; 0x2e
   145e0:	bne	145f0 <__assert_fail@plt+0x369c>
   145e4:	ldrb	r0, [sl, #21]
   145e8:	cmp	r0, #0
   145ec:	beq	1482c <__assert_fail@plt+0x38d8>
   145f0:	add	r6, sl, #19
   145f4:	str	r9, [sp, #44]	; 0x2c
   145f8:	mov	r0, r6
   145fc:	bl	10e1c <strlen@plt>
   14600:	mov	r4, r0
   14604:	mov	r0, r7
   14608:	mov	r1, r6
   1460c:	mov	r2, r4
   14610:	bl	133ec <__assert_fail@plt+0x2498>
   14614:	mov	r9, r0
   14618:	cmp	r0, #0
   1461c:	beq	1489c <__assert_fail@plt+0x3948>
   14620:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14624:	cmp	r4, r0
   14628:	bcs	1463c <__assert_fail@plt+0x36e8>
   1462c:	ldr	r2, [sp, #48]	; 0x30
   14630:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14634:	add	r4, r4, r2
   14638:	b	1469c <__assert_fail@plt+0x3748>
   1463c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14640:	ldr	r0, [sp, #48]	; 0x30
   14644:	ldr	r6, [r7, #24]
   14648:	add	r4, r4, r0
   1464c:	mov	r0, r7
   14650:	add	r1, r4, #1
   14654:	bl	13378 <__assert_fail@plt+0x2424>
   14658:	cmp	r0, #0
   1465c:	beq	1489c <__assert_fail@plt+0x3948>
   14660:	ldr	r0, [r7, #24]
   14664:	cmp	r6, r0
   14668:	beq	14690 <__assert_fail@plt+0x373c>
   1466c:	ldrb	r1, [r7, #48]	; 0x30
   14670:	ldr	r2, [sp, #48]	; 0x30
   14674:	tst	r1, #4
   14678:	ldr	r1, [sp, #40]	; 0x28
   1467c:	addne	r1, r0, r2
   14680:	mov	r0, #1
   14684:	str	r1, [sp, #40]	; 0x28
   14688:	str	r0, [sp, #16]
   1468c:	b	14694 <__assert_fail@plt+0x3740>
   14690:	ldr	r2, [sp, #48]	; 0x30
   14694:	ldr	r0, [r7, #36]	; 0x24
   14698:	sub	r0, r0, r2
   1469c:	cmp	r4, r2
   146a0:	bcc	14940 <__assert_fail@plt+0x39ec>
   146a4:	ldr	r1, [sp, #28]
   146a8:	str	r0, [fp, #-44]	; 0xffffffd4
   146ac:	add	r0, r9, #160	; 0xa0
   146b0:	str	r1, [r9, #48]	; 0x30
   146b4:	ldr	r1, [r7]
   146b8:	str	r4, [r9, #40]	; 0x28
   146bc:	str	r1, [r9, #4]
   146c0:	ldrd	r2, [sl]
   146c4:	strd	r2, [r0]
   146c8:	ldrb	r0, [r7, #48]	; 0x30
   146cc:	tst	r0, #4
   146d0:	bne	146e0 <__assert_fail@plt+0x378c>
   146d4:	add	r0, r9, #168	; 0xa8
   146d8:	str	r0, [r9, #24]
   146dc:	b	14700 <__assert_fail@plt+0x37ac>
   146e0:	ldr	r0, [r9, #28]
   146e4:	ldr	r2, [r9, #52]	; 0x34
   146e8:	add	r1, r9, #168	; 0xa8
   146ec:	str	r0, [r9, #24]
   146f0:	ldr	r0, [sp, #40]	; 0x28
   146f4:	add	r2, r2, #1
   146f8:	bl	10d2c <memmove@plt>
   146fc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14700:	ldr	r0, [r7, #44]	; 0x2c
   14704:	ldr	r2, [r7, #48]	; 0x30
   14708:	cmp	r0, #0
   1470c:	beq	14740 <__assert_fail@plt+0x37ec>
   14710:	ands	r0, r2, #1024	; 0x400
   14714:	bne	14740 <__assert_fail@plt+0x37ec>
   14718:	mov	r0, r7
   1471c:	mov	r1, r9
   14720:	mov	r2, #0
   14724:	bl	1346c <__assert_fail@plt+0x2518>
   14728:	mov	sl, r5
   1472c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14730:	ldr	r5, [fp, #-40]	; 0xffffffd8
   14734:	mov	r1, #0
   14738:	strh	r0, [r9, #56]	; 0x38
   1473c:	b	147c0 <__assert_fail@plt+0x386c>
   14740:	ldrb	r3, [sl, #18]
   14744:	mov	r0, #0
   14748:	tst	r2, #8
   1474c:	mov	r1, #0
   14750:	beq	14774 <__assert_fail@plt+0x3820>
   14754:	orr	r1, r3, #4
   14758:	cmp	r1, #4
   1475c:	mov	r1, #0
   14760:	beq	14774 <__assert_fail@plt+0x3820>
   14764:	eor	r1, r3, #10
   14768:	and	r2, r2, #16
   1476c:	orrs	r1, r2, r1
   14770:	movwne	r1, #1
   14774:	mov	r6, #11
   14778:	mov	sl, r5
   1477c:	sub	r3, r3, #1
   14780:	ldr	r5, [fp, #-40]	; 0xffffffd8
   14784:	add	r2, r9, #112	; 0x70
   14788:	strh	r6, [r9, #56]	; 0x38
   1478c:	uxtb	r6, r3
   14790:	cmp	r6, #11
   14794:	bhi	147a8 <__assert_fail@plt+0x3854>
   14798:	sxtb	r0, r3
   1479c:	movw	r3, #30504	; 0x7728
   147a0:	movt	r3, #1
   147a4:	ldr	r0, [r3, r0, lsl #2]
   147a8:	cmp	r1, #0
   147ac:	str	r0, [r9, #80]	; 0x50
   147b0:	mov	r0, #2
   147b4:	mov	r1, #0
   147b8:	movwne	r0, #1
   147bc:	strd	r0, [r2]
   147c0:	cmp	r5, #0
   147c4:	str	r1, [r9, #8]
   147c8:	mov	r4, r9
   147cc:	ldrne	r0, [sp, #44]	; 0x2c
   147d0:	movne	r4, r5
   147d4:	strne	r9, [r0, #8]
   147d8:	movw	r0, #10000	; 0x2710
   147dc:	cmp	r8, r0
   147e0:	bne	14858 <__assert_fail@plt+0x3904>
   147e4:	ldr	r0, [sp, #24]
   147e8:	ldr	r0, [r0]
   147ec:	cmp	r0, #0
   147f0:	bne	14858 <__assert_fail@plt+0x3904>
   147f4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   147f8:	mov	r0, sl
   147fc:	bl	14f30 <__assert_fail@plt+0x3fdc>
   14800:	mov	r1, #0
   14804:	str	r1, [sp, #20]
   14808:	movw	r1, #19778	; 0x4d42
   1480c:	movt	r1, #65363	; 0xff53
   14810:	cmp	r0, r1
   14814:	movwne	r1, #26985	; 0x6969
   14818:	cmpne	r0, r1
   1481c:	bne	1483c <__assert_fail@plt+0x38e8>
   14820:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14824:	mov	r1, #0
   14828:	b	14858 <__assert_fail@plt+0x3904>
   1482c:	mov	sl, r5
   14830:	ldr	r5, [fp, #-40]	; 0xffffffd8
   14834:	mov	r1, #0
   14838:	b	1486c <__assert_fail@plt+0x3918>
   1483c:	movw	r1, #6548	; 0x1994
   14840:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14844:	movt	r1, #258	; 0x102
   14848:	cmp	r0, r1
   1484c:	mov	r1, #0
   14850:	movne	r0, #1
   14854:	strne	r0, [sp, #20]
   14858:	ldr	r0, [sp, #32]
   1485c:	add	r8, r8, #1
   14860:	cmp	r0, r8
   14864:	bls	14988 <__assert_fail@plt+0x3a34>
   14868:	mov	r5, r4
   1486c:	ldr	r4, [sl, #12]
   14870:	cmp	r4, #0
   14874:	bne	14590 <__assert_fail@plt+0x363c>
   14878:	ldr	r0, [sp, #16]
   1487c:	ldr	r4, [sp, #12]
   14880:	ldr	r9, [sp, #8]
   14884:	b	14934 <__assert_fail@plt+0x39e0>
   14888:	ldr	r4, [sp, #12]
   1488c:	mov	r8, #0
   14890:	mov	r0, #0
   14894:	str	r0, [sp, #20]
   14898:	b	14a30 <__assert_fail@plt+0x3adc>
   1489c:	ldr	r6, [sp, #36]	; 0x24
   148a0:	mov	r0, r9
   148a4:	ldr	r4, [r6]
   148a8:	bl	13028 <__assert_fail@plt+0x20d4>
   148ac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   148b0:	bl	13758 <__assert_fail@plt+0x2804>
   148b4:	ldr	r0, [r5, #12]
   148b8:	mov	r8, r5
   148bc:	bl	10f3c <closedir@plt>
   148c0:	mov	r0, #7
   148c4:	strh	r0, [r5, #56]	; 0x38
   148c8:	mov	r5, #0
   148cc:	str	r5, [r8, #12]
   148d0:	ldr	r0, [r7, #48]	; 0x30
   148d4:	orr	r0, r0, #8192	; 0x2000
   148d8:	str	r0, [r7, #48]	; 0x30
   148dc:	str	r4, [r6]
   148e0:	b	14b6c <__assert_fail@plt+0x3c18>
   148e4:	ldr	r0, [sp, #36]	; 0x24
   148e8:	ldr	r9, [sp, #8]
   148ec:	mov	sl, r5
   148f0:	ldr	r0, [r0]
   148f4:	cmp	r0, #0
   148f8:	beq	14910 <__assert_fail@plt+0x39bc>
   148fc:	str	r0, [sl, #32]
   14900:	orrs	r0, r9, r8
   14904:	mov	r0, #4
   14908:	movwne	r0, #7
   1490c:	strh	r0, [sl, #56]	; 0x38
   14910:	ldr	r0, [sl, #12]
   14914:	ldr	r4, [sp, #12]
   14918:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1491c:	cmp	r0, #0
   14920:	beq	14930 <__assert_fail@plt+0x39dc>
   14924:	bl	10f3c <closedir@plt>
   14928:	mov	r0, #0
   1492c:	str	r0, [sl, #12]
   14930:	ldr	r0, [sp, #16]
   14934:	tst	r0, #1
   14938:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1493c:	b	1499c <__assert_fail@plt+0x3a48>
   14940:	mov	r0, r9
   14944:	bl	13028 <__assert_fail@plt+0x20d4>
   14948:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1494c:	bl	13758 <__assert_fail@plt+0x2804>
   14950:	ldr	r0, [r5, #12]
   14954:	mov	r8, r5
   14958:	bl	10f3c <closedir@plt>
   1495c:	mov	r0, #7
   14960:	ldr	r1, [sp, #36]	; 0x24
   14964:	strh	r0, [r5, #56]	; 0x38
   14968:	mov	r5, #0
   1496c:	str	r5, [r8, #12]
   14970:	ldr	r0, [r7, #48]	; 0x30
   14974:	orr	r0, r0, #8192	; 0x2000
   14978:	str	r0, [r7, #48]	; 0x30
   1497c:	mov	r0, #36	; 0x24
   14980:	str	r0, [r1]
   14984:	b	14b6c <__assert_fail@plt+0x3c18>
   14988:	ldr	r0, [sp, #16]
   1498c:	mov	r5, r4
   14990:	ldr	r4, [sp, #12]
   14994:	ldr	r9, [sp, #8]
   14998:	tst	r0, #1
   1499c:	ldr	ip, [sp, #4]
   149a0:	beq	14a30 <__assert_fail@plt+0x3adc>
   149a4:	ldr	r1, [r7, #4]
   149a8:	ldr	r0, [r7, #24]
   149ac:	cmp	r1, #0
   149b0:	beq	149e0 <__assert_fail@plt+0x3a8c>
   149b4:	ldr	r2, [r1, #24]
   149b8:	add	r3, r1, #168	; 0xa8
   149bc:	cmp	r2, r3
   149c0:	beq	149d4 <__assert_fail@plt+0x3a80>
   149c4:	ldr	r3, [r1, #28]
   149c8:	sub	r2, r2, r3
   149cc:	add	r2, r0, r2
   149d0:	str	r2, [r1, #24]
   149d4:	str	r0, [r1, #28]
   149d8:	ldr	r1, [r1, #8]
   149dc:	b	149ac <__assert_fail@plt+0x3a58>
   149e0:	ldr	r1, [r5, #48]	; 0x30
   149e4:	cmp	r1, #0
   149e8:	bmi	14a30 <__assert_fail@plt+0x3adc>
   149ec:	mov	r1, r5
   149f0:	ldr	r2, [r1, #24]
   149f4:	add	r3, r1, #168	; 0xa8
   149f8:	cmp	r2, r3
   149fc:	beq	14a10 <__assert_fail@plt+0x3abc>
   14a00:	ldr	r3, [r1, #28]
   14a04:	sub	r2, r2, r3
   14a08:	add	r2, r0, r2
   14a0c:	str	r2, [r1, #24]
   14a10:	str	r0, [r1, #28]
   14a14:	ldr	r2, [r1, #8]
   14a18:	cmp	r2, #0
   14a1c:	ldreq	r2, [r1, #4]
   14a20:	ldr	r1, [r2, #48]	; 0x30
   14a24:	cmn	r1, #1
   14a28:	mov	r1, r2
   14a2c:	bgt	149f0 <__assert_fail@plt+0x3a9c>
   14a30:	ldrb	r0, [r7, #48]	; 0x30
   14a34:	tst	r0, #4
   14a38:	beq	14a64 <__assert_fail@plt+0x3b10>
   14a3c:	ldr	r2, [sp, #40]	; 0x28
   14a40:	ldr	r0, [r7, #36]	; 0x24
   14a44:	ldr	r3, [sp, #48]	; 0x30
   14a48:	cmp	r3, r0
   14a4c:	sub	r1, r2, #1
   14a50:	mov	r0, #0
   14a54:	moveq	r2, r1
   14a58:	cmp	r8, #0
   14a5c:	moveq	r2, r1
   14a60:	strb	r0, [r2]
   14a64:	cmp	r9, #0
   14a68:	movwne	r9, #1
   14a6c:	orrs	r0, r9, ip
   14a70:	beq	14a9c <__assert_fail@plt+0x3b48>
   14a74:	cmp	r8, #0
   14a78:	bne	14ad0 <__assert_fail@plt+0x3b7c>
   14a7c:	cmp	r4, #3
   14a80:	bne	14b60 <__assert_fail@plt+0x3c0c>
   14a84:	ldrh	r0, [sl, #56]	; 0x38
   14a88:	cmp	r0, #4
   14a8c:	cmpne	r0, #7
   14a90:	movne	r0, #6
   14a94:	strhne	r0, [sl, #56]	; 0x38
   14a98:	b	14b60 <__assert_fail@plt+0x3c0c>
   14a9c:	cmp	r4, #1
   14aa0:	cmpne	r8, #0
   14aa4:	bne	14ad0 <__assert_fail@plt+0x3b7c>
   14aa8:	ldr	r0, [sl, #48]	; 0x30
   14aac:	cmp	r0, #0
   14ab0:	beq	14b38 <__assert_fail@plt+0x3be4>
   14ab4:	ldr	r1, [sl, #4]
   14ab8:	movw	r3, #30498	; 0x7722
   14abc:	mov	r0, r7
   14ac0:	mvn	r2, #0
   14ac4:	movt	r3, #1
   14ac8:	bl	14008 <__assert_fail@plt+0x30b4>
   14acc:	b	14b40 <__assert_fail@plt+0x3bec>
   14ad0:	ldr	r0, [sp, #20]
   14ad4:	tst	r0, #1
   14ad8:	beq	14b08 <__assert_fail@plt+0x3bb4>
   14adc:	movw	r0, #20216	; 0x4ef8
   14ae0:	mov	r1, r5
   14ae4:	mov	r2, r8
   14ae8:	movt	r0, #1
   14aec:	str	r0, [r7, #44]	; 0x2c
   14af0:	mov	r0, r7
   14af4:	bl	135a8 <__assert_fail@plt+0x2654>
   14af8:	mov	r5, r0
   14afc:	mov	r0, #0
   14b00:	str	r0, [r7, #44]	; 0x2c
   14b04:	b	14b6c <__assert_fail@plt+0x3c18>
   14b08:	cmp	r8, #2
   14b0c:	bcc	14b6c <__assert_fail@plt+0x3c18>
   14b10:	ldr	r0, [sp, #24]
   14b14:	ldr	r0, [r0]
   14b18:	cmp	r0, #0
   14b1c:	beq	14b6c <__assert_fail@plt+0x3c18>
   14b20:	mov	r0, r7
   14b24:	mov	r1, r5
   14b28:	mov	r2, r8
   14b2c:	bl	135a8 <__assert_fail@plt+0x2654>
   14b30:	mov	r5, r0
   14b34:	b	14b6c <__assert_fail@plt+0x3c18>
   14b38:	mov	r0, r7
   14b3c:	bl	14b78 <__assert_fail@plt+0x3c24>
   14b40:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14b44:	cmp	r0, #0
   14b48:	beq	14a74 <__assert_fail@plt+0x3b20>
   14b4c:	mov	r0, #7
   14b50:	strh	r0, [sl, #56]	; 0x38
   14b54:	ldr	r0, [r7, #48]	; 0x30
   14b58:	orr	r0, r0, #8192	; 0x2000
   14b5c:	str	r0, [r7, #48]	; 0x30
   14b60:	mov	r0, r5
   14b64:	bl	13758 <__assert_fail@plt+0x2804>
   14b68:	mov	r5, #0
   14b6c:	mov	r0, r5
   14b70:	sub	sp, fp, #28
   14b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b78:	push	{r4, r5, fp, lr}
   14b7c:	add	fp, sp, #8
   14b80:	mov	r4, r0
   14b84:	ldr	r0, [r0, #48]	; 0x30
   14b88:	mov	r5, #0
   14b8c:	tst	r0, #4
   14b90:	bne	14bc4 <__assert_fail@plt+0x3c70>
   14b94:	tst	r0, #512	; 0x200
   14b98:	bne	14bb4 <__assert_fail@plt+0x3c60>
   14b9c:	ldr	r0, [r4, #28]
   14ba0:	bl	10edc <fchdir@plt>
   14ba4:	cmp	r0, #0
   14ba8:	mov	r5, r0
   14bac:	movwne	r5, #1
   14bb0:	b	14bc4 <__assert_fail@plt+0x3c70>
   14bb4:	mov	r0, r4
   14bb8:	mvn	r1, #99	; 0x63
   14bbc:	mov	r2, #1
   14bc0:	bl	14c90 <__assert_fail@plt+0x3d3c>
   14bc4:	add	r0, r4, #60	; 0x3c
   14bc8:	bl	138c0 <__assert_fail@plt+0x296c>
   14bcc:	mov	r0, r5
   14bd0:	pop	{r4, r5, fp, pc}
   14bd4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14bd8:	add	fp, sp, #24
   14bdc:	mov	r6, r0
   14be0:	ldrh	r0, [r0, #48]	; 0x30
   14be4:	mov	r4, r1
   14be8:	add	r5, r1, #64	; 0x40
   14bec:	movw	r1, #258	; 0x102
   14bf0:	tst	r0, r1
   14bf4:	beq	14c68 <__assert_fail@plt+0x3d14>
   14bf8:	mov	r0, #24
   14bfc:	bl	16f6c <__assert_fail@plt+0x6018>
   14c00:	mov	r8, #0
   14c04:	cmp	r0, #0
   14c08:	beq	14c88 <__assert_fail@plt+0x3d34>
   14c0c:	ldrd	r2, [r5]
   14c10:	mov	r7, r0
   14c14:	add	r0, r4, #160	; 0xa0
   14c18:	stm	r7, {r2, r3}
   14c1c:	add	r2, r7, #8
   14c20:	ldrd	r0, [r0]
   14c24:	stm	r2, {r0, r1, r4}
   14c28:	mov	r1, r7
   14c2c:	ldr	r0, [r6, #56]	; 0x38
   14c30:	bl	16b80 <__assert_fail@plt+0x5c2c>
   14c34:	cmp	r0, r7
   14c38:	beq	14c60 <__assert_fail@plt+0x3d0c>
   14c3c:	mov	r5, r0
   14c40:	mov	r0, r7
   14c44:	bl	13028 <__assert_fail@plt+0x20d4>
   14c48:	cmp	r5, #0
   14c4c:	beq	14c88 <__assert_fail@plt+0x3d34>
   14c50:	ldr	r0, [r5, #16]
   14c54:	mov	r1, #2
   14c58:	strh	r1, [r4, #56]	; 0x38
   14c5c:	str	r0, [r4]
   14c60:	mov	r8, #1
   14c64:	b	14c88 <__assert_fail@plt+0x3d34>
   14c68:	ldr	r0, [r6, #56]	; 0x38
   14c6c:	mov	r1, r5
   14c70:	bl	17008 <__assert_fail@plt+0x60b4>
   14c74:	cmp	r0, #0
   14c78:	mov	r8, #1
   14c7c:	movne	r0, #2
   14c80:	strhne	r0, [r4, #56]	; 0x38
   14c84:	strne	r4, [r4]
   14c88:	mov	r0, r8
   14c8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c90:	push	{r4, r5, fp, lr}
   14c94:	add	fp, sp, #8
   14c98:	mov	r4, r1
   14c9c:	ldr	r1, [r0, #32]
   14ca0:	mov	r5, r0
   14ca4:	cmp	r1, r4
   14ca8:	bne	14cb4 <__assert_fail@plt+0x3d60>
   14cac:	cmn	r1, #100	; 0x64
   14cb0:	bne	14cf4 <__assert_fail@plt+0x3da0>
   14cb4:	cmp	r2, #0
   14cb8:	beq	14cd0 <__assert_fail@plt+0x3d7c>
   14cbc:	add	r0, r5, #60	; 0x3c
   14cc0:	bl	16d00 <__assert_fail@plt+0x5dac>
   14cc4:	cmp	r0, #0
   14cc8:	bpl	14ce8 <__assert_fail@plt+0x3d94>
   14ccc:	b	14cec <__assert_fail@plt+0x3d98>
   14cd0:	cmp	r1, #0
   14cd4:	bmi	14cec <__assert_fail@plt+0x3d98>
   14cd8:	ldr	r0, [r5, #48]	; 0x30
   14cdc:	ands	r0, r0, #4
   14ce0:	bne	14cec <__assert_fail@plt+0x3d98>
   14ce4:	mov	r0, r1
   14ce8:	bl	10f24 <close@plt>
   14cec:	str	r4, [r5, #32]
   14cf0:	pop	{r4, r5, fp, pc}
   14cf4:	bl	10f18 <abort@plt>
   14cf8:	push	{fp, lr}
   14cfc:	mov	fp, sp
   14d00:	cmp	r2, #5
   14d04:	bcc	14d1c <__assert_fail@plt+0x3dc8>
   14d08:	bl	10e4c <__errno_location@plt>
   14d0c:	mov	r1, #22
   14d10:	str	r1, [r0]
   14d14:	mov	r0, #1
   14d18:	pop	{fp, pc}
   14d1c:	mov	r0, #0
   14d20:	strh	r2, [r1, #60]	; 0x3c
   14d24:	pop	{fp, pc}
   14d28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d2c:	add	fp, sp, #28
   14d30:	sub	sp, sp, #4
   14d34:	mov	r5, r0
   14d38:	mvn	r0, #4096	; 0x1000
   14d3c:	tst	r1, r0
   14d40:	beq	14d58 <__assert_fail@plt+0x3e04>
   14d44:	bl	10e4c <__errno_location@plt>
   14d48:	mov	r1, #22
   14d4c:	mov	r4, #0
   14d50:	str	r1, [r0]
   14d54:	b	14e54 <__assert_fail@plt+0x3f00>
   14d58:	ldr	r6, [r5]
   14d5c:	mov	r7, r1
   14d60:	bl	10e4c <__errno_location@plt>
   14d64:	mov	r4, #0
   14d68:	mov	sl, r0
   14d6c:	str	r4, [r0]
   14d70:	ldrb	r0, [r5, #49]	; 0x31
   14d74:	tst	r0, #32
   14d78:	bne	14e54 <__assert_fail@plt+0x3f00>
   14d7c:	ldrh	r0, [r6, #56]	; 0x38
   14d80:	cmp	r0, #1
   14d84:	beq	14d94 <__assert_fail@plt+0x3e40>
   14d88:	cmp	r0, #9
   14d8c:	ldreq	r4, [r6, #8]
   14d90:	b	14e54 <__assert_fail@plt+0x3f00>
   14d94:	ldr	r0, [r5, #4]
   14d98:	cmp	r0, #0
   14d9c:	blne	13758 <__assert_fail@plt+0x2804>
   14da0:	mov	r9, #1
   14da4:	cmp	r7, #4096	; 0x1000
   14da8:	bne	14dbc <__assert_fail@plt+0x3e68>
   14dac:	ldr	r0, [r5, #48]	; 0x30
   14db0:	mov	r9, #2
   14db4:	orr	r0, r0, #4096	; 0x1000
   14db8:	str	r0, [r5, #48]	; 0x30
   14dbc:	ldr	r0, [r6, #48]	; 0x30
   14dc0:	cmp	r0, #0
   14dc4:	bne	14e40 <__assert_fail@plt+0x3eec>
   14dc8:	ldr	r0, [r6, #24]
   14dcc:	ldrb	r0, [r0]
   14dd0:	cmp	r0, #47	; 0x2f
   14dd4:	beq	14e40 <__assert_fail@plt+0x3eec>
   14dd8:	ldrb	r0, [r5, #48]	; 0x30
   14ddc:	tst	r0, #4
   14de0:	bne	14e40 <__assert_fail@plt+0x3eec>
   14de4:	movw	r1, #30499	; 0x7723
   14de8:	mov	r0, r5
   14dec:	movt	r1, #1
   14df0:	bl	13728 <__assert_fail@plt+0x27d4>
   14df4:	cmn	r0, #1
   14df8:	ble	14e60 <__assert_fail@plt+0x3f0c>
   14dfc:	mov	r8, r0
   14e00:	mov	r0, r5
   14e04:	mov	r1, r9
   14e08:	bl	141e8 <__assert_fail@plt+0x3294>
   14e0c:	str	r0, [r5, #4]
   14e10:	ldrb	r0, [r5, #49]	; 0x31
   14e14:	tst	r0, #2
   14e18:	bne	14e6c <__assert_fail@plt+0x3f18>
   14e1c:	mov	r0, r8
   14e20:	bl	10edc <fchdir@plt>
   14e24:	cmp	r0, #0
   14e28:	beq	14e80 <__assert_fail@plt+0x3f2c>
   14e2c:	ldr	r5, [sl]
   14e30:	mov	r0, r8
   14e34:	bl	10f24 <close@plt>
   14e38:	str	r5, [sl]
   14e3c:	b	14e54 <__assert_fail@plt+0x3f00>
   14e40:	mov	r0, r5
   14e44:	mov	r1, r9
   14e48:	bl	141e8 <__assert_fail@plt+0x3294>
   14e4c:	mov	r4, r0
   14e50:	str	r0, [r5, #4]
   14e54:	mov	r0, r4
   14e58:	sub	sp, fp, #28
   14e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e60:	mov	r4, #0
   14e64:	str	r4, [r5, #4]
   14e68:	b	14e54 <__assert_fail@plt+0x3f00>
   14e6c:	mov	r0, r5
   14e70:	mov	r1, r8
   14e74:	mov	r2, #1
   14e78:	bl	14c90 <__assert_fail@plt+0x3d3c>
   14e7c:	b	14e88 <__assert_fail@plt+0x3f34>
   14e80:	mov	r0, r8
   14e84:	bl	10f24 <close@plt>
   14e88:	ldr	r4, [r5, #4]
   14e8c:	b	14e54 <__assert_fail@plt+0x3f00>
   14e90:	push	{fp, lr}
   14e94:	mov	fp, sp
   14e98:	mov	r2, r1
   14e9c:	ldrd	r0, [r0, #8]
   14ea0:	mov	r3, #0
   14ea4:	bl	173cc <__assert_fail@plt+0x6478>
   14ea8:	mov	r0, r2
   14eac:	pop	{fp, pc}
   14eb0:	push	{r4, r5, fp, lr}
   14eb4:	add	fp, sp, #8
   14eb8:	ldrd	r2, [r1, #8]
   14ebc:	ldrd	r4, [r0, #8]
   14ec0:	eor	r3, r5, r3
   14ec4:	eor	r2, r4, r2
   14ec8:	orrs	r2, r2, r3
   14ecc:	mov	r2, #0
   14ed0:	bne	14ef0 <__assert_fail@plt+0x3f9c>
   14ed4:	ldrd	r2, [r1]
   14ed8:	ldrd	r0, [r0]
   14edc:	eor	r1, r1, r3
   14ee0:	eor	r0, r0, r2
   14ee4:	orr	r0, r0, r1
   14ee8:	clz	r0, r0
   14eec:	lsr	r2, r0, #5
   14ef0:	mov	r0, r2
   14ef4:	pop	{r4, r5, fp, pc}
   14ef8:	push	{r4, r5, fp, lr}
   14efc:	add	fp, sp, #8
   14f00:	ldr	r0, [r0]
   14f04:	ldrd	r2, [r0, #160]	; 0xa0
   14f08:	ldr	r0, [r1]
   14f0c:	ldrd	r4, [r0, #160]	; 0xa0
   14f10:	mov	r0, #0
   14f14:	subs	r1, r4, r2
   14f18:	sbcs	r1, r5, r3
   14f1c:	movwcc	r0, #1
   14f20:	subs	r1, r2, r4
   14f24:	sbcs	r1, r3, r5
   14f28:	subcc	r0, r0, #1
   14f2c:	pop	{r4, r5, fp, pc}
   14f30:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f34:	add	fp, sp, #24
   14f38:	sub	sp, sp, #96	; 0x60
   14f3c:	ldr	r7, [r0, #44]	; 0x2c
   14f40:	mov	r4, r0
   14f44:	mov	r5, #0
   14f48:	ldrb	r0, [r7, #49]	; 0x31
   14f4c:	tst	r0, #2
   14f50:	beq	15044 <__assert_fail@plt+0x40f0>
   14f54:	ldr	r6, [r7, #52]	; 0x34
   14f58:	mov	r9, r1
   14f5c:	cmp	r6, #0
   14f60:	bne	14fa0 <__assert_fail@plt+0x404c>
   14f64:	movw	r0, #12328	; 0x3028
   14f68:	movw	r2, #20560	; 0x5050
   14f6c:	movw	r3, #20592	; 0x5070
   14f70:	mov	r1, #0
   14f74:	mov	r8, #0
   14f78:	movt	r0, #1
   14f7c:	movt	r2, #1
   14f80:	movt	r3, #1
   14f84:	str	r0, [sp]
   14f88:	mov	r0, #13
   14f8c:	bl	16204 <__assert_fail@plt+0x52b0>
   14f90:	mov	r6, r0
   14f94:	cmp	r0, #0
   14f98:	str	r0, [r7, #52]	; 0x34
   14f9c:	beq	14fd0 <__assert_fail@plt+0x407c>
   14fa0:	ldrd	r0, [r4, #64]	; 0x40
   14fa4:	str	r1, [sp, #12]
   14fa8:	str	r0, [sp, #8]
   14fac:	add	r1, sp, #8
   14fb0:	mov	r0, r6
   14fb4:	bl	15f50 <__assert_fail@plt+0x4ffc>
   14fb8:	cmp	r0, #0
   14fbc:	beq	14fc8 <__assert_fail@plt+0x4074>
   14fc0:	ldr	r5, [r0, #8]
   14fc4:	b	15044 <__assert_fail@plt+0x40f0>
   14fc8:	mov	r8, #1
   14fcc:	b	14fd4 <__assert_fail@plt+0x4080>
   14fd0:	mov	r6, #0
   14fd4:	cmp	r9, #0
   14fd8:	bmi	15044 <__assert_fail@plt+0x40f0>
   14fdc:	add	r1, sp, #8
   14fe0:	mov	r0, r9
   14fe4:	bl	10cd8 <fstatfs64@plt>
   14fe8:	cmp	r0, #0
   14fec:	bne	15044 <__assert_fail@plt+0x40f0>
   14ff0:	cmp	r8, #0
   14ff4:	beq	15040 <__assert_fail@plt+0x40ec>
   14ff8:	mov	r0, #16
   14ffc:	bl	16f6c <__assert_fail@plt+0x6018>
   15000:	cmp	r0, #0
   15004:	beq	15040 <__assert_fail@plt+0x40ec>
   15008:	mov	r5, r0
   1500c:	ldrd	r0, [r4, #64]	; 0x40
   15010:	ldr	r2, [sp, #8]
   15014:	stm	r5, {r0, r1, r2}
   15018:	mov	r0, r6
   1501c:	mov	r1, r5
   15020:	bl	16b80 <__assert_fail@plt+0x5c2c>
   15024:	cmp	r0, #0
   15028:	beq	15038 <__assert_fail@plt+0x40e4>
   1502c:	cmp	r0, r5
   15030:	beq	15040 <__assert_fail@plt+0x40ec>
   15034:	bl	10f18 <abort@plt>
   15038:	mov	r0, r5
   1503c:	bl	13028 <__assert_fail@plt+0x20d4>
   15040:	ldr	r5, [sp, #8]
   15044:	mov	r0, r5
   15048:	sub	sp, fp, #24
   1504c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15050:	push	{fp, lr}
   15054:	mov	fp, sp
   15058:	mov	r2, r1
   1505c:	ldrd	r0, [r0]
   15060:	mov	r3, #0
   15064:	bl	173cc <__assert_fail@plt+0x6478>
   15068:	mov	r0, r2
   1506c:	pop	{fp, pc}
   15070:	ldrd	r2, [r1]
   15074:	ldrd	r0, [r0]
   15078:	eor	r1, r1, r3
   1507c:	eor	r0, r0, r2
   15080:	orr	r0, r0, r1
   15084:	clz	r0, r0
   15088:	lsr	r0, r0, #5
   1508c:	bx	lr
   15090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15094:	add	fp, sp, #28
   15098:	sub	sp, sp, #36	; 0x24
   1509c:	mvn	r6, #0
   150a0:	cmp	r0, #1
   150a4:	blt	15400 <__assert_fail@plt+0x44ac>
   150a8:	ldr	r4, [fp, #16]
   150ac:	str	r3, [sp, #28]
   150b0:	mov	r8, r0
   150b4:	mov	r7, r1
   150b8:	mov	r0, #0
   150bc:	ldm	r4, {r9, sl}
   150c0:	str	r0, [r4, #12]
   150c4:	cmp	r9, #0
   150c8:	beq	150ec <__assert_fail@plt+0x4198>
   150cc:	ldr	r0, [r4, #16]
   150d0:	cmp	r0, #0
   150d4:	beq	150f4 <__assert_fail@plt+0x41a0>
   150d8:	ldrb	r0, [r2]
   150dc:	cmp	r0, #45	; 0x2d
   150e0:	cmpne	r0, #43	; 0x2b
   150e4:	addeq	r2, r2, #1
   150e8:	b	15164 <__assert_fail@plt+0x4210>
   150ec:	mov	r9, #1
   150f0:	str	r9, [r4]
   150f4:	mov	r0, #0
   150f8:	str	r9, [r4, #28]
   150fc:	str	r9, [r4, #32]
   15100:	str	r0, [r4, #20]
   15104:	ldrb	r1, [r2]
   15108:	cmp	r1, #43	; 0x2b
   1510c:	beq	1511c <__assert_fail@plt+0x41c8>
   15110:	cmp	r1, #45	; 0x2d
   15114:	bne	15128 <__assert_fail@plt+0x41d4>
   15118:	mov	r0, #2
   1511c:	str	r0, [r4, #24]
   15120:	add	r2, r2, #1
   15124:	b	1515c <__assert_fail@plt+0x4208>
   15128:	ldr	r0, [fp, #20]
   1512c:	cmp	r0, #0
   15130:	bne	15154 <__assert_fail@plt+0x4200>
   15134:	movw	r0, #30628	; 0x77a4
   15138:	mov	r5, r2
   1513c:	movt	r0, #1
   15140:	bl	10dd4 <getenv@plt>
   15144:	mov	r2, r5
   15148:	mvn	r6, #0
   1514c:	cmp	r0, #0
   15150:	beq	1540c <__assert_fail@plt+0x44b8>
   15154:	mov	r0, #0
   15158:	str	r0, [r4, #24]
   1515c:	mov	r0, #1
   15160:	str	r0, [r4, #16]
   15164:	ldrb	r0, [r2]
   15168:	ldr	r5, [r4, #20]
   1516c:	subs	r0, r0, #58	; 0x3a
   15170:	movne	r0, sl
   15174:	cmp	r5, #0
   15178:	str	r0, [sp, #32]
   1517c:	beq	151e4 <__assert_fail@plt+0x4290>
   15180:	ldrb	r0, [r5]
   15184:	cmp	r0, #0
   15188:	beq	151e4 <__assert_fail@plt+0x4290>
   1518c:	add	sl, r5, #1
   15190:	mov	r0, r2
   15194:	str	r2, [sp, #20]
   15198:	str	sl, [r4, #20]
   1519c:	ldrb	r1, [r5]
   151a0:	str	r1, [sp, #24]
   151a4:	bl	10e28 <strchr@plt>
   151a8:	ldrb	r1, [r5, #1]
   151ac:	ldr	r6, [sp, #24]
   151b0:	cmp	r1, #0
   151b4:	orr	r1, r6, #1
   151b8:	addeq	r9, r9, #1
   151bc:	streq	r9, [r4]
   151c0:	cmp	r1, #59	; 0x3b
   151c4:	cmpne	r0, #0
   151c8:	bne	15228 <__assert_fail@plt+0x42d4>
   151cc:	ldr	r0, [sp, #32]
   151d0:	cmp	r0, #0
   151d4:	bne	1546c <__assert_fail@plt+0x4518>
   151d8:	str	r6, [r4, #8]
   151dc:	mov	r6, #63	; 0x3f
   151e0:	b	15400 <__assert_fail@plt+0x44ac>
   151e4:	ldr	r5, [r4, #32]
   151e8:	cmp	r5, r9
   151ec:	strgt	r9, [r4, #32]
   151f0:	movgt	r5, r9
   151f4:	ldr	r0, [r4, #28]
   151f8:	cmp	r0, r9
   151fc:	strgt	r9, [r4, #28]
   15200:	movgt	r0, r9
   15204:	ldr	r1, [r4, #24]
   15208:	cmp	r1, #1
   1520c:	bne	152ec <__assert_fail@plt+0x4398>
   15210:	cmp	r0, r5
   15214:	cmpne	r5, r9
   15218:	bne	15288 <__assert_fail@plt+0x4334>
   1521c:	cmp	r5, r9
   15220:	strne	r9, [r4, #28]
   15224:	b	152a4 <__assert_fail@plt+0x4350>
   15228:	ldrb	r2, [r0]
   1522c:	ldrb	r1, [r0, #1]
   15230:	cmp	r2, #87	; 0x57
   15234:	bne	15260 <__assert_fail@plt+0x430c>
   15238:	ldr	r2, [sp, #28]
   1523c:	cmp	r2, #0
   15240:	beq	15260 <__assert_fail@plt+0x430c>
   15244:	cmp	r1, #59	; 0x3b
   15248:	bne	15260 <__assert_fail@plt+0x430c>
   1524c:	ldrb	r0, [sl]
   15250:	cmp	r0, #0
   15254:	beq	15414 <__assert_fail@plt+0x44c0>
   15258:	ldr	r2, [sp, #20]
   1525c:	b	15498 <__assert_fail@plt+0x4544>
   15260:	cmp	r1, #58	; 0x3a
   15264:	bne	15400 <__assert_fail@plt+0x44ac>
   15268:	ldrb	r0, [r0, #2]
   1526c:	ldrb	r1, [sl]
   15270:	cmp	r0, #58	; 0x3a
   15274:	bne	153c0 <__assert_fail@plt+0x446c>
   15278:	cmp	r1, #0
   1527c:	bne	153c8 <__assert_fail@plt+0x4474>
   15280:	mov	r0, #0
   15284:	b	15558 <__assert_fail@plt+0x4604>
   15288:	mov	r0, r7
   1528c:	mov	r1, r4
   15290:	mov	r5, r2
   15294:	bl	155dc <__assert_fail@plt+0x4688>
   15298:	ldr	r9, [r4]
   1529c:	mov	r2, r5
   152a0:	mvn	r6, #0
   152a4:	cmp	r9, r8
   152a8:	bge	152e0 <__assert_fail@plt+0x438c>
   152ac:	ldr	r0, [r7, r9, lsl #2]
   152b0:	ldrb	r1, [r0]
   152b4:	cmp	r1, #45	; 0x2d
   152b8:	bne	152c8 <__assert_fail@plt+0x4374>
   152bc:	ldrb	r0, [r0, #1]
   152c0:	cmp	r0, #0
   152c4:	bne	152e0 <__assert_fail@plt+0x438c>
   152c8:	add	r9, r9, #1
   152cc:	cmp	r8, r9
   152d0:	str	r9, [r4]
   152d4:	bne	152ac <__assert_fail@plt+0x4358>
   152d8:	mov	r5, r8
   152dc:	b	152e4 <__assert_fail@plt+0x4390>
   152e0:	mov	r5, r9
   152e4:	mov	r9, r5
   152e8:	str	r5, [r4, #32]
   152ec:	cmp	r9, r8
   152f0:	beq	153f4 <__assert_fail@plt+0x44a0>
   152f4:	movw	r6, #30552	; 0x7758
   152f8:	ldr	r0, [r7, r9, lsl #2]
   152fc:	mov	sl, r2
   15300:	movt	r6, #1
   15304:	mov	r1, r6
   15308:	bl	10cfc <strcmp@plt>
   1530c:	cmp	r0, #0
   15310:	beq	15380 <__assert_fail@plt+0x442c>
   15314:	mov	ip, r6
   15318:	cmp	r9, r8
   1531c:	mvn	r6, #0
   15320:	beq	153f4 <__assert_fail@plt+0x44a0>
   15324:	ldr	r5, [r7, r9, lsl #2]
   15328:	ldrb	r0, [r5]
   1532c:	cmp	r0, #45	; 0x2d
   15330:	bne	153a8 <__assert_fail@plt+0x4454>
   15334:	mov	r3, r5
   15338:	ldrb	r1, [r3, #1]!
   1533c:	cmp	r1, #0
   15340:	beq	153a8 <__assert_fail@plt+0x4454>
   15344:	ldr	r0, [sp, #28]
   15348:	cmp	r0, #0
   1534c:	beq	1553c <__assert_fail@plt+0x45e8>
   15350:	ldr	r6, [fp, #12]
   15354:	cmp	r1, #45	; 0x2d
   15358:	mov	r2, sl
   1535c:	bne	154dc <__assert_fail@plt+0x4588>
   15360:	add	r0, r5, #2
   15364:	str	r0, [r4, #20]
   15368:	ldr	r0, [fp, #8]
   1536c:	stm	sp, {r0, r6}
   15370:	ldr	r0, [sp, #32]
   15374:	str	r4, [sp, #8]
   15378:	str	ip, [sp, #16]
   1537c:	b	154c4 <__assert_fail@plt+0x4570>
   15380:	add	r0, r9, #1
   15384:	str	r0, [r4]
   15388:	ldr	r1, [r4, #28]
   1538c:	cmp	r1, r5
   15390:	cmpne	r5, r0
   15394:	bne	153d8 <__assert_fail@plt+0x4484>
   15398:	cmp	r1, r5
   1539c:	mvn	r6, #0
   153a0:	streq	r0, [r4, #28]
   153a4:	b	153e8 <__assert_fail@plt+0x4494>
   153a8:	ldr	r0, [r4, #24]
   153ac:	cmp	r0, #0
   153b0:	addne	r0, r9, #1
   153b4:	strne	r5, [r4, #12]
   153b8:	movne	r6, #1
   153bc:	b	153fc <__assert_fail@plt+0x44a8>
   153c0:	cmp	r1, #0
   153c4:	beq	15440 <__assert_fail@plt+0x44ec>
   153c8:	add	r0, r9, #1
   153cc:	str	sl, [r4, #12]
   153d0:	str	r0, [r4]
   153d4:	b	1555c <__assert_fail@plt+0x4608>
   153d8:	mov	r0, r7
   153dc:	mov	r1, r4
   153e0:	bl	155dc <__assert_fail@plt+0x4688>
   153e4:	mvn	r6, #0
   153e8:	str	r8, [r4]
   153ec:	str	r8, [r4, #32]
   153f0:	mov	r5, r8
   153f4:	ldr	r0, [r4, #28]
   153f8:	cmp	r0, r5
   153fc:	strne	r0, [r4]
   15400:	mov	r0, r6
   15404:	sub	sp, fp, #28
   15408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1540c:	mov	r0, #1
   15410:	b	15158 <__assert_fail@plt+0x4204>
   15414:	ldr	r2, [sp, #20]
   15418:	cmp	r9, r8
   1541c:	bne	15494 <__assert_fail@plt+0x4540>
   15420:	ldr	r0, [sp, #32]
   15424:	cmp	r0, #0
   15428:	bne	15588 <__assert_fail@plt+0x4634>
   1542c:	str	r6, [r4, #8]
   15430:	ldrb	r6, [r2]
   15434:	cmp	r6, #58	; 0x3a
   15438:	movwne	r6, #63	; 0x3f
   1543c:	b	15400 <__assert_fail@plt+0x44ac>
   15440:	cmp	r9, r8
   15444:	bne	1554c <__assert_fail@plt+0x45f8>
   15448:	ldr	r0, [sp, #32]
   1544c:	cmp	r0, #0
   15450:	bne	155b4 <__assert_fail@plt+0x4660>
   15454:	ldr	r0, [sp, #20]
   15458:	str	r6, [r4, #8]
   1545c:	ldrb	r6, [r0]
   15460:	cmp	r6, #58	; 0x3a
   15464:	movwne	r6, #63	; 0x3f
   15468:	b	1555c <__assert_fail@plt+0x4608>
   1546c:	movw	r0, #33040	; 0x8110
   15470:	ldr	r2, [r7]
   15474:	ldr	r3, [sp, #24]
   15478:	movw	r1, #30555	; 0x775b
   1547c:	movt	r0, #2
   15480:	movt	r1, #1
   15484:	ldr	r0, [r0]
   15488:	bl	10e40 <fprintf@plt>
   1548c:	ldr	r6, [sp, #24]
   15490:	b	151d8 <__assert_fail@plt+0x4284>
   15494:	ldr	sl, [r7, r9, lsl #2]
   15498:	str	sl, [r4, #12]
   1549c:	ldr	r3, [fp, #8]
   154a0:	mov	r0, #0
   154a4:	movw	r1, #30624	; 0x77a0
   154a8:	str	r0, [r4, #12]
   154ac:	str	sl, [r4, #20]
   154b0:	movt	r1, #1
   154b4:	str	r3, [sp]
   154b8:	stmib	sp, {r0, r4}
   154bc:	ldr	r0, [sp, #32]
   154c0:	str	r1, [sp, #16]
   154c4:	str	r0, [sp, #12]
   154c8:	ldr	r3, [sp, #28]
   154cc:	mov	r0, r8
   154d0:	mov	r1, r7
   154d4:	bl	156b4 <__assert_fail@plt+0x4760>
   154d8:	b	15404 <__assert_fail@plt+0x44b0>
   154dc:	cmp	r6, #0
   154e0:	beq	15540 <__assert_fail@plt+0x45ec>
   154e4:	ldrb	r0, [r5, #2]
   154e8:	cmp	r0, #0
   154ec:	beq	15568 <__assert_fail@plt+0x4614>
   154f0:	ldr	r1, [fp, #8]
   154f4:	str	r3, [r4, #20]
   154f8:	movw	r0, #30553	; 0x7759
   154fc:	ldr	r3, [sp, #28]
   15500:	mov	sl, r2
   15504:	movt	r0, #1
   15508:	stm	sp, {r1, r6}
   1550c:	ldr	r1, [sp, #32]
   15510:	str	r0, [sp, #16]
   15514:	mov	r0, r8
   15518:	str	r4, [sp, #8]
   1551c:	str	r1, [sp, #12]
   15520:	mov	r1, r7
   15524:	bl	156b4 <__assert_fail@plt+0x4760>
   15528:	mov	r6, r0
   1552c:	cmn	r0, #1
   15530:	bne	15400 <__assert_fail@plt+0x44ac>
   15534:	ldr	r9, [r4]
   15538:	ldr	r5, [r7, r9, lsl #2]
   1553c:	mov	r2, sl
   15540:	add	r5, r5, #1
   15544:	str	r5, [r4, #20]
   15548:	b	1518c <__assert_fail@plt+0x4238>
   1554c:	add	r0, r9, #1
   15550:	str	r0, [r4]
   15554:	ldr	r0, [r7, r9, lsl #2]
   15558:	str	r0, [r4, #12]
   1555c:	mov	r0, #0
   15560:	str	r0, [r4, #20]
   15564:	b	15400 <__assert_fail@plt+0x44ac>
   15568:	mov	r0, r2
   1556c:	str	r3, [sp, #24]
   15570:	bl	10e28 <strchr@plt>
   15574:	ldr	r3, [sp, #24]
   15578:	mov	r2, sl
   1557c:	cmp	r0, #0
   15580:	bne	15540 <__assert_fail@plt+0x45ec>
   15584:	b	154f0 <__assert_fail@plt+0x459c>
   15588:	movw	r0, #33040	; 0x8110
   1558c:	ldr	r2, [r7]
   15590:	ldr	r3, [sp, #24]
   15594:	movw	r1, #30583	; 0x7777
   15598:	movt	r0, #2
   1559c:	movt	r1, #1
   155a0:	ldr	r0, [r0]
   155a4:	bl	10e40 <fprintf@plt>
   155a8:	ldr	r2, [sp, #20]
   155ac:	ldr	r6, [sp, #24]
   155b0:	b	1542c <__assert_fail@plt+0x44d8>
   155b4:	movw	r0, #33040	; 0x8110
   155b8:	ldr	r2, [r7]
   155bc:	ldr	r3, [sp, #24]
   155c0:	movw	r1, #30583	; 0x7777
   155c4:	movt	r0, #2
   155c8:	movt	r1, #1
   155cc:	ldr	r0, [r0]
   155d0:	bl	10e40 <fprintf@plt>
   155d4:	ldr	r6, [sp, #24]
   155d8:	b	15454 <__assert_fail@plt+0x4500>
   155dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155e0:	add	fp, sp, #28
   155e4:	sub	sp, sp, #4
   155e8:	ldr	lr, [r1]
   155ec:	ldr	ip, [r1, #32]
   155f0:	ldr	r2, [r1, #28]
   155f4:	cmp	lr, ip
   155f8:	str	r2, [sp]
   155fc:	ble	15698 <__assert_fail@plt+0x4744>
   15600:	ldr	r2, [sp]
   15604:	cmp	r2, ip
   15608:	bge	15698 <__assert_fail@plt+0x4744>
   1560c:	ldr	r9, [sp]
   15610:	add	r8, r0, ip, lsl #2
   15614:	mov	sl, lr
   15618:	sub	r7, ip, r9
   1561c:	sub	r4, sl, ip
   15620:	cmp	r4, r7
   15624:	ble	1565c <__assert_fail@plt+0x4708>
   15628:	sub	r3, sl, r7
   1562c:	cmp	r7, #1
   15630:	blt	15654 <__assert_fail@plt+0x4700>
   15634:	add	r2, r0, r9, lsl #2
   15638:	add	r4, r0, sl, lsl #2
   1563c:	ldr	r5, [r4, -r7, lsl #2]
   15640:	ldr	r6, [r2]
   15644:	str	r5, [r2], #4
   15648:	str	r6, [r4, -r7, lsl #2]
   1564c:	subs	r7, r7, #1
   15650:	bne	1563c <__assert_fail@plt+0x46e8>
   15654:	mov	sl, r3
   15658:	b	1568c <__assert_fail@plt+0x4738>
   1565c:	cmp	r4, #1
   15660:	blt	15688 <__assert_fail@plt+0x4734>
   15664:	add	r7, r0, r9, lsl #2
   15668:	mov	r2, r8
   1566c:	mov	r6, r4
   15670:	ldr	r3, [r7]
   15674:	ldr	r5, [r2]
   15678:	subs	r6, r6, #1
   1567c:	str	r5, [r7], #4
   15680:	str	r3, [r2], #4
   15684:	bne	15670 <__assert_fail@plt+0x471c>
   15688:	add	r9, r9, r4
   1568c:	cmp	sl, ip
   15690:	cmpgt	ip, r9
   15694:	bgt	15618 <__assert_fail@plt+0x46c4>
   15698:	ldr	r0, [sp]
   1569c:	sub	r0, r0, ip
   156a0:	add	r0, r0, lr
   156a4:	str	r0, [r1, #28]
   156a8:	str	lr, [r1, #32]
   156ac:	sub	sp, fp, #28
   156b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156b8:	add	fp, sp, #28
   156bc:	sub	sp, sp, #44	; 0x2c
   156c0:	str	r0, [sp, #12]
   156c4:	ldr	r0, [fp, #16]
   156c8:	ldr	r5, [fp, #8]
   156cc:	str	r2, [sp, #16]
   156d0:	str	r1, [sp, #20]
   156d4:	ldr	r9, [r0, #20]
   156d8:	mov	r6, r9
   156dc:	b	156e4 <__assert_fail@plt+0x4790>
   156e0:	add	r6, r6, #1
   156e4:	ldrb	r0, [r6]
   156e8:	cmp	r0, #0
   156ec:	cmpne	r0, #61	; 0x3d
   156f0:	bne	156e0 <__assert_fail@plt+0x478c>
   156f4:	ldr	sl, [r3]
   156f8:	mvn	ip, #0
   156fc:	str	r3, [fp, #-32]	; 0xffffffe0
   15700:	cmp	sl, #0
   15704:	beq	15904 <__assert_fail@plt+0x49b0>
   15708:	sub	r4, r6, r9
   1570c:	mov	r8, #0
   15710:	mov	r5, sl
   15714:	mov	r7, r3
   15718:	mov	r0, r5
   1571c:	mov	r1, r9
   15720:	mov	r2, r4
   15724:	bl	10f0c <strncmp@plt>
   15728:	cmp	r0, #0
   1572c:	bne	15740 <__assert_fail@plt+0x47ec>
   15730:	mov	r0, r5
   15734:	bl	10e1c <strlen@plt>
   15738:	cmp	r4, r0
   1573c:	beq	15930 <__assert_fail@plt+0x49dc>
   15740:	ldr	r5, [r7, #16]!
   15744:	add	r8, r8, #1
   15748:	cmp	r5, #0
   1574c:	bne	15718 <__assert_fail@plt+0x47c4>
   15750:	cmp	sl, #0
   15754:	beq	1593c <__assert_fail@plt+0x49e8>
   15758:	mvn	r0, #0
   1575c:	str	r4, [sp, #36]	; 0x24
   15760:	mov	r4, #0
   15764:	mov	r5, #0
   15768:	mov	r7, #0
   1576c:	str	r0, [sp, #24]
   15770:	mov	r0, #0
   15774:	str	r0, [sp, #32]
   15778:	mov	r0, #0
   1577c:	str	r0, [sp, #8]
   15780:	mov	r0, #0
   15784:	str	r0, [sp, #28]
   15788:	ldr	r2, [sp, #36]	; 0x24
   1578c:	mov	r0, sl
   15790:	mov	r1, r9
   15794:	bl	10f0c <strncmp@plt>
   15798:	cmp	r0, #0
   1579c:	beq	157d0 <__assert_fail@plt+0x487c>
   157a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   157a4:	mov	r1, r4
   157a8:	add	r0, r3, r5, lsl #4
   157ac:	ldr	sl, [r0, #16]
   157b0:	cmp	sl, #0
   157b4:	beq	1591c <__assert_fail@plt+0x49c8>
   157b8:	ldr	r0, [fp, #16]
   157bc:	add	r1, r1, #16
   157c0:	add	r5, r5, #1
   157c4:	mov	r4, r1
   157c8:	ldr	r9, [r0, #20]
   157cc:	b	15788 <__assert_fail@plt+0x4834>
   157d0:	cmp	r7, #0
   157d4:	beq	15888 <__assert_fail@plt+0x4934>
   157d8:	ldr	r0, [fp, #12]
   157dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   157e0:	cmp	r0, #0
   157e4:	bne	1580c <__assert_fail@plt+0x48b8>
   157e8:	add	r0, r3, r5, lsl #4
   157ec:	ldr	r2, [r7, #4]
   157f0:	ldr	r1, [r0, #4]
   157f4:	cmp	r2, r1
   157f8:	bne	1580c <__assert_fail@plt+0x48b8>
   157fc:	ldr	r1, [r0, #8]
   15800:	ldr	r2, [r7, #8]
   15804:	cmp	r2, r1
   15808:	beq	158c0 <__assert_fail@plt+0x496c>
   1580c:	ldr	r0, [sp, #32]
   15810:	mov	r1, r4
   15814:	cmp	r0, #0
   15818:	bne	157a8 <__assert_fail@plt+0x4854>
   1581c:	ldr	r0, [fp, #20]
   15820:	cmp	r0, #0
   15824:	beq	1589c <__assert_fail@plt+0x4948>
   15828:	ldr	r9, [sp, #28]
   1582c:	mov	r0, #0
   15830:	str	r0, [sp, #32]
   15834:	cmp	r9, #0
   15838:	bne	158b0 <__assert_fail@plt+0x495c>
   1583c:	mov	r0, r8
   15840:	bl	16f6c <__assert_fail@plt+0x6018>
   15844:	cmp	r0, #0
   15848:	beq	158f0 <__assert_fail@plt+0x499c>
   1584c:	mov	r9, r0
   15850:	mov	r0, #0
   15854:	mov	r1, #0
   15858:	mov	r2, r8
   1585c:	str	r0, [sp, #32]
   15860:	mov	r0, r9
   15864:	bl	10e64 <memset@plt>
   15868:	ldr	r0, [sp, #24]
   1586c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15870:	mov	r1, #1
   15874:	mov	r2, #1
   15878:	str	r1, [sp, #8]
   1587c:	mov	r1, r4
   15880:	strb	r2, [r9, r0]
   15884:	b	158b0 <__assert_fail@plt+0x495c>
   15888:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1588c:	mov	r1, r4
   15890:	str	r5, [sp, #24]
   15894:	add	r7, r3, r4
   15898:	b	157a8 <__assert_fail@plt+0x4854>
   1589c:	ldr	r9, [sp, #28]
   158a0:	mov	r0, #1
   158a4:	str	r0, [sp, #32]
   158a8:	cmp	r9, #0
   158ac:	beq	158e4 <__assert_fail@plt+0x4990>
   158b0:	mov	r0, #1
   158b4:	str	r9, [sp, #28]
   158b8:	strb	r0, [r9, r5]
   158bc:	b	157a8 <__assert_fail@plt+0x4854>
   158c0:	ldr	r1, [sp, #32]
   158c4:	cmp	r1, #0
   158c8:	bne	157a4 <__assert_fail@plt+0x4850>
   158cc:	ldr	r0, [r0, #12]
   158d0:	ldr	r1, [r7, #12]
   158d4:	cmp	r1, r0
   158d8:	mov	r1, r4
   158dc:	bne	1581c <__assert_fail@plt+0x48c8>
   158e0:	b	157a8 <__assert_fail@plt+0x4854>
   158e4:	mov	r0, #0
   158e8:	str	r0, [sp, #28]
   158ec:	b	157a8 <__assert_fail@plt+0x4854>
   158f0:	mov	r0, #1
   158f4:	str	r0, [sp, #32]
   158f8:	mov	r0, #0
   158fc:	str	r0, [sp, #28]
   15900:	b	157a0 <__assert_fail@plt+0x484c>
   15904:	mov	r0, #0
   15908:	mov	r8, #0
   1590c:	mov	r7, #0
   15910:	mov	sl, #0
   15914:	mov	r4, #0
   15918:	b	15954 <__assert_fail@plt+0x4a00>
   1591c:	ldr	r5, [fp, #8]
   15920:	ldr	ip, [sp, #24]
   15924:	ldr	sl, [sp, #28]
   15928:	ldr	r4, [sp, #8]
   1592c:	b	15958 <__assert_fail@plt+0x4a04>
   15930:	ldr	r5, [fp, #8]
   15934:	mov	ip, r8
   15938:	b	159c0 <__assert_fail@plt+0x4a6c>
   1593c:	ldr	r5, [fp, #8]
   15940:	mov	r0, #0
   15944:	mov	r7, #0
   15948:	mov	sl, #0
   1594c:	mov	r4, #0
   15950:	mvn	ip, #0
   15954:	str	r0, [sp, #32]
   15958:	cmp	sl, #0
   1595c:	ldreq	r0, [sp, #32]
   15960:	cmpeq	r0, #0
   15964:	beq	159b8 <__assert_fail@plt+0x4a64>
   15968:	ldr	r0, [fp, #20]
   1596c:	cmp	r0, #0
   15970:	bne	15b18 <__assert_fail@plt+0x4bc4>
   15974:	cmp	r4, #0
   15978:	beq	15984 <__assert_fail@plt+0x4a30>
   1597c:	mov	r0, sl
   15980:	bl	13028 <__assert_fail@plt+0x20d4>
   15984:	ldr	r0, [fp, #16]
   15988:	ldr	r4, [r0, #20]
   1598c:	mov	r5, r0
   15990:	mov	r0, r4
   15994:	bl	10e1c <strlen@plt>
   15998:	mov	r1, #0
   1599c:	add	r0, r4, r0
   159a0:	str	r1, [r5, #8]
   159a4:	str	r0, [r5, #20]
   159a8:	ldr	r0, [r5]
   159ac:	add	r0, r0, #1
   159b0:	str	r0, [r5]
   159b4:	b	15ae0 <__assert_fail@plt+0x4b8c>
   159b8:	cmp	r7, #0
   159bc:	beq	15a50 <__assert_fail@plt+0x4afc>
   159c0:	ldr	r1, [fp, #16]
   159c4:	mov	r0, #0
   159c8:	str	r0, [r1, #20]
   159cc:	mov	r2, r1
   159d0:	ldr	r1, [r1]
   159d4:	add	r0, r1, #1
   159d8:	str	r0, [r2]
   159dc:	ldrb	r3, [r6]
   159e0:	ldr	r2, [r7, #4]
   159e4:	cmp	r3, #0
   159e8:	beq	15a04 <__assert_fail@plt+0x4ab0>
   159ec:	cmp	r2, #0
   159f0:	beq	15ac8 <__assert_fail@plt+0x4b74>
   159f4:	ldr	r1, [fp, #16]
   159f8:	add	r0, r6, #1
   159fc:	str	r0, [r1, #12]
   15a00:	b	15a30 <__assert_fail@plt+0x4adc>
   15a04:	cmp	r2, #1
   15a08:	bne	15a30 <__assert_fail@plt+0x4adc>
   15a0c:	ldr	r2, [sp, #12]
   15a10:	cmp	r0, r2
   15a14:	bge	15aec <__assert_fail@plt+0x4b98>
   15a18:	ldr	r2, [fp, #16]
   15a1c:	add	r1, r1, #2
   15a20:	str	r1, [r2]
   15a24:	ldr	r1, [sp, #20]
   15a28:	ldr	r0, [r1, r0, lsl #2]
   15a2c:	str	r0, [r2, #12]
   15a30:	cmp	r5, #0
   15a34:	strne	ip, [r5]
   15a38:	ldr	r1, [r7, #8]
   15a3c:	ldr	r0, [r7, #12]
   15a40:	cmp	r1, #0
   15a44:	strne	r0, [r1]
   15a48:	movne	r0, #0
   15a4c:	b	15ae4 <__assert_fail@plt+0x4b90>
   15a50:	ldr	r0, [fp, #12]
   15a54:	cmp	r0, #0
   15a58:	beq	15a9c <__assert_fail@plt+0x4b48>
   15a5c:	ldr	r0, [fp, #16]
   15a60:	ldr	r1, [sp, #20]
   15a64:	ldr	r0, [r0]
   15a68:	ldr	r0, [r1, r0, lsl #2]
   15a6c:	ldrb	r0, [r0, #1]
   15a70:	cmp	r0, #45	; 0x2d
   15a74:	beq	15a9c <__assert_fail@plt+0x4b48>
   15a78:	ldr	r0, [fp, #16]
   15a7c:	ldr	r0, [r0, #20]
   15a80:	ldrb	r1, [r0]
   15a84:	ldr	r0, [sp, #16]
   15a88:	bl	10e28 <strchr@plt>
   15a8c:	mov	r1, r0
   15a90:	mvn	r0, #0
   15a94:	cmp	r1, #0
   15a98:	bne	15ae4 <__assert_fail@plt+0x4b90>
   15a9c:	ldr	r0, [fp, #20]
   15aa0:	cmp	r0, #0
   15aa4:	bne	15bf4 <__assert_fail@plt+0x4ca0>
   15aa8:	ldr	r1, [fp, #16]
   15aac:	mov	r0, #0
   15ab0:	str	r0, [r1, #20]
   15ab4:	str	r0, [r1, #8]
   15ab8:	ldr	r0, [r1]
   15abc:	add	r0, r0, #1
   15ac0:	str	r0, [r1]
   15ac4:	b	15ae0 <__assert_fail@plt+0x4b8c>
   15ac8:	ldr	r0, [fp, #20]
   15acc:	cmp	r0, #0
   15ad0:	bne	15c28 <__assert_fail@plt+0x4cd4>
   15ad4:	ldr	r0, [r7, #12]
   15ad8:	ldr	r1, [fp, #16]
   15adc:	str	r0, [r1, #8]
   15ae0:	mov	r0, #63	; 0x3f
   15ae4:	sub	sp, fp, #28
   15ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15aec:	ldr	r0, [fp, #20]
   15af0:	cmp	r0, #0
   15af4:	bne	15c58 <__assert_fail@plt+0x4d04>
   15af8:	ldr	r0, [r7, #12]
   15afc:	ldr	r1, [fp, #16]
   15b00:	str	r0, [r1, #8]
   15b04:	ldr	r0, [sp, #16]
   15b08:	ldrb	r0, [r0]
   15b0c:	cmp	r0, #58	; 0x3a
   15b10:	movwne	r0, #63	; 0x3f
   15b14:	b	15ae4 <__assert_fail@plt+0x4b90>
   15b18:	movw	r5, #33040	; 0x8110
   15b1c:	ldr	r1, [sp, #32]
   15b20:	movt	r5, #2
   15b24:	ldr	r0, [r5]
   15b28:	cmp	r1, #0
   15b2c:	beq	15b58 <__assert_fail@plt+0x4c04>
   15b30:	ldr	r1, [sp, #20]
   15b34:	ldr	r3, [fp, #24]
   15b38:	ldr	r2, [r1]
   15b3c:	ldr	r1, [fp, #16]
   15b40:	ldr	r1, [r1, #20]
   15b44:	str	r1, [sp]
   15b48:	movw	r1, #30644	; 0x77b4
   15b4c:	movt	r1, #1
   15b50:	bl	10e40 <fprintf@plt>
   15b54:	b	15974 <__assert_fail@plt+0x4a20>
   15b58:	bl	10ec4 <flockfile@plt>
   15b5c:	ldr	r1, [fp, #16]
   15b60:	ldr	r0, [sp, #20]
   15b64:	ldr	r9, [fp, #24]
   15b68:	ldr	r1, [r1, #20]
   15b6c:	ldr	r2, [r0]
   15b70:	ldr	r0, [r5]
   15b74:	mov	r3, r9
   15b78:	str	r1, [sp]
   15b7c:	movw	r1, #30676	; 0x77d4
   15b80:	movt	r1, #1
   15b84:	bl	10e40 <fprintf@plt>
   15b88:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15b8c:	cmp	r8, #0
   15b90:	beq	15bdc <__assert_fail@plt+0x4c88>
   15b94:	mov	r6, sl
   15b98:	ldrb	r0, [r6]
   15b9c:	cmp	r0, #0
   15ba0:	bne	15bb8 <__assert_fail@plt+0x4c64>
   15ba4:	add	r1, r1, #16
   15ba8:	add	r6, r6, #1
   15bac:	subs	r8, r8, #1
   15bb0:	bne	15b98 <__assert_fail@plt+0x4c44>
   15bb4:	b	15bdc <__assert_fail@plt+0x4c88>
   15bb8:	ldr	r3, [r1]
   15bbc:	ldr	r0, [r5]
   15bc0:	mov	r7, r1
   15bc4:	movw	r1, #30723	; 0x7803
   15bc8:	mov	r2, r9
   15bcc:	movt	r1, #1
   15bd0:	bl	10e40 <fprintf@plt>
   15bd4:	mov	r1, r7
   15bd8:	b	15ba4 <__assert_fail@plt+0x4c50>
   15bdc:	ldr	r1, [r5]
   15be0:	mov	r0, #10
   15be4:	bl	10e94 <fputc@plt>
   15be8:	ldr	r0, [r5]
   15bec:	bl	10d74 <funlockfile@plt>
   15bf0:	b	15974 <__assert_fail@plt+0x4a20>
   15bf4:	ldr	r1, [fp, #16]
   15bf8:	ldr	r0, [sp, #20]
   15bfc:	ldr	r3, [fp, #24]
   15c00:	ldr	r2, [r0]
   15c04:	movw	r0, #33040	; 0x8110
   15c08:	ldr	r1, [r1, #20]
   15c0c:	movt	r0, #2
   15c10:	ldr	r0, [r0]
   15c14:	str	r1, [sp]
   15c18:	movw	r1, #30731	; 0x780b
   15c1c:	movt	r1, #1
   15c20:	bl	10e40 <fprintf@plt>
   15c24:	b	15aa8 <__assert_fail@plt+0x4b54>
   15c28:	ldr	r0, [sp, #20]
   15c2c:	ldr	r1, [r7]
   15c30:	ldr	r3, [fp, #24]
   15c34:	ldr	r2, [r0]
   15c38:	movw	r0, #33040	; 0x8110
   15c3c:	str	r1, [sp]
   15c40:	movw	r1, #30763	; 0x782b
   15c44:	movt	r0, #2
   15c48:	movt	r1, #1
   15c4c:	ldr	r0, [r0]
   15c50:	bl	10e40 <fprintf@plt>
   15c54:	b	15ad4 <__assert_fail@plt+0x4b80>
   15c58:	ldr	r0, [sp, #20]
   15c5c:	ldr	r1, [r7]
   15c60:	ldr	r3, [fp, #24]
   15c64:	ldr	r2, [r0]
   15c68:	movw	r0, #33040	; 0x8110
   15c6c:	str	r1, [sp]
   15c70:	movw	r1, #30808	; 0x7858
   15c74:	movt	r0, #2
   15c78:	movt	r1, #1
   15c7c:	ldr	r0, [r0]
   15c80:	bl	10e40 <fprintf@plt>
   15c84:	b	15af8 <__assert_fail@plt+0x4ba4>
   15c88:	push	{r4, r5, r6, r7, fp, lr}
   15c8c:	add	fp, sp, #16
   15c90:	sub	sp, sp, #16
   15c94:	movw	r7, #33028	; 0x8104
   15c98:	movw	r6, #33068	; 0x812c
   15c9c:	movw	r5, #33032	; 0x8108
   15ca0:	movt	r7, #2
   15ca4:	movt	r5, #2
   15ca8:	movt	r6, #2
   15cac:	ldr	r4, [r7]
   15cb0:	ldr	r5, [r5]
   15cb4:	str	r6, [sp, #8]
   15cb8:	stm	r6, {r4, r5}
   15cbc:	ldr	r5, [fp, #16]
   15cc0:	str	r5, [sp, #12]
   15cc4:	ldr	r5, [fp, #12]
   15cc8:	str	r5, [sp, #4]
   15ccc:	ldr	r5, [fp, #8]
   15cd0:	str	r5, [sp]
   15cd4:	bl	15090 <__assert_fail@plt+0x413c>
   15cd8:	ldr	r1, [r6]
   15cdc:	ldr	r3, [r6, #12]
   15ce0:	ldr	r2, [r6, #8]
   15ce4:	str	r1, [r7]
   15ce8:	movw	r1, #33208	; 0x81b8
   15cec:	movt	r1, #2
   15cf0:	str	r3, [r1]
   15cf4:	movw	r1, #33036	; 0x810c
   15cf8:	movt	r1, #2
   15cfc:	str	r2, [r1]
   15d00:	sub	sp, fp, #16
   15d04:	pop	{r4, r5, r6, r7, fp, pc}
   15d08:	push	{r4, r5, r6, sl, fp, lr}
   15d0c:	add	fp, sp, #16
   15d10:	sub	sp, sp, #16
   15d14:	movw	r6, #33028	; 0x8104
   15d18:	movw	r5, #33068	; 0x812c
   15d1c:	movw	r4, #33032	; 0x8108
   15d20:	movt	r6, #2
   15d24:	movt	r4, #2
   15d28:	movt	r5, #2
   15d2c:	ldr	r3, [r6]
   15d30:	ldr	r4, [r4]
   15d34:	stm	r5, {r3, r4}
   15d38:	mov	r4, #0
   15d3c:	mov	r3, #1
   15d40:	str	r4, [sp]
   15d44:	stmib	sp, {r4, r5}
   15d48:	str	r3, [sp, #12]
   15d4c:	mov	r3, #0
   15d50:	bl	15090 <__assert_fail@plt+0x413c>
   15d54:	ldr	r1, [r5]
   15d58:	ldr	r3, [r5, #12]
   15d5c:	ldr	r2, [r5, #8]
   15d60:	str	r1, [r6]
   15d64:	movw	r1, #33208	; 0x81b8
   15d68:	movt	r1, #2
   15d6c:	str	r3, [r1]
   15d70:	movw	r1, #33036	; 0x810c
   15d74:	movt	r1, #2
   15d78:	str	r2, [r1]
   15d7c:	sub	sp, fp, #16
   15d80:	pop	{r4, r5, r6, sl, fp, pc}
   15d84:	andeq	r0, r0, r0
   15d88:	ldr	r0, [r0, #8]
   15d8c:	bx	lr
   15d90:	ldr	r0, [r0, #12]
   15d94:	bx	lr
   15d98:	ldr	r0, [r0, #16]
   15d9c:	bx	lr
   15da0:	ldm	r0, {r2, ip}
   15da4:	mov	r0, #0
   15da8:	cmp	r2, ip
   15dac:	bxcs	lr
   15db0:	mov	r0, #0
   15db4:	ldr	r1, [r2]
   15db8:	cmp	r1, #0
   15dbc:	beq	15de0 <__assert_fail@plt+0x4e8c>
   15dc0:	mov	r3, #0
   15dc4:	mov	r1, r2
   15dc8:	ldr	r1, [r1, #4]
   15dcc:	add	r3, r3, #1
   15dd0:	cmp	r1, #0
   15dd4:	bne	15dc8 <__assert_fail@plt+0x4e74>
   15dd8:	cmp	r3, r0
   15ddc:	movhi	r0, r3
   15de0:	add	r2, r2, #8
   15de4:	cmp	r2, ip
   15de8:	bcc	15db4 <__assert_fail@plt+0x4e60>
   15dec:	bx	lr
   15df0:	push	{fp, lr}
   15df4:	mov	fp, sp
   15df8:	ldm	r0, {r3, ip}
   15dfc:	mov	lr, #0
   15e00:	mov	r1, #0
   15e04:	cmp	r3, ip
   15e08:	bcs	15e44 <__assert_fail@plt+0x4ef0>
   15e0c:	mov	r1, #0
   15e10:	mov	lr, #0
   15e14:	ldr	r2, [r3]
   15e18:	cmp	r2, #0
   15e1c:	beq	15e38 <__assert_fail@plt+0x4ee4>
   15e20:	mov	r2, r3
   15e24:	ldr	r2, [r2, #4]
   15e28:	add	r1, r1, #1
   15e2c:	cmp	r2, #0
   15e30:	bne	15e24 <__assert_fail@plt+0x4ed0>
   15e34:	add	lr, lr, #1
   15e38:	add	r3, r3, #8
   15e3c:	cmp	r3, ip
   15e40:	bcc	15e14 <__assert_fail@plt+0x4ec0>
   15e44:	ldr	r2, [r0, #12]
   15e48:	cmp	lr, r2
   15e4c:	bne	15e64 <__assert_fail@plt+0x4f10>
   15e50:	ldr	r2, [r0, #16]
   15e54:	mov	r0, #1
   15e58:	cmp	r1, r2
   15e5c:	movne	r0, #0
   15e60:	pop	{fp, pc}
   15e64:	mov	r0, #0
   15e68:	pop	{fp, pc}
   15e6c:	nop	{0}
   15e70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e74:	add	fp, sp, #24
   15e78:	sub	sp, sp, #8
   15e7c:	ldr	r6, [r0]
   15e80:	ldmib	r0, {r3, r7, r8}
   15e84:	ldr	r2, [r0, #16]
   15e88:	mov	r4, r1
   15e8c:	mov	r5, #0
   15e90:	cmp	r6, r3
   15e94:	bcs	15ed4 <__assert_fail@plt+0x4f80>
   15e98:	mov	r5, #0
   15e9c:	ldr	r0, [r6]
   15ea0:	cmp	r0, #0
   15ea4:	beq	15ec8 <__assert_fail@plt+0x4f74>
   15ea8:	mov	r0, #0
   15eac:	mov	r1, r6
   15eb0:	ldr	r1, [r1, #4]
   15eb4:	add	r0, r0, #1
   15eb8:	cmp	r1, #0
   15ebc:	bne	15eb0 <__assert_fail@plt+0x4f5c>
   15ec0:	cmp	r0, r5
   15ec4:	movhi	r5, r0
   15ec8:	add	r6, r6, #8
   15ecc:	cmp	r6, r3
   15ed0:	bcc	15e9c <__assert_fail@plt+0x4f48>
   15ed4:	movw	r1, #30848	; 0x7880
   15ed8:	mov	r0, r4
   15edc:	movt	r1, #1
   15ee0:	bl	10e40 <fprintf@plt>
   15ee4:	movw	r1, #30872	; 0x7898
   15ee8:	mov	r0, r4
   15eec:	mov	r2, r7
   15ef0:	movt	r1, #1
   15ef4:	bl	10e40 <fprintf@plt>
   15ef8:	vmov	s0, r8
   15efc:	vldr	d16, [pc, #68]	; 15f48 <__assert_fail@plt+0x4ff4>
   15f00:	movw	r1, #30896	; 0x78b0
   15f04:	mov	r0, r4
   15f08:	mov	r2, r8
   15f0c:	movt	r1, #1
   15f10:	vcvt.f64.u32	d17, s0
   15f14:	vmov	s0, r7
   15f18:	vcvt.f64.u32	d18, s0
   15f1c:	vmul.f64	d16, d17, d16
   15f20:	vdiv.f64	d16, d16, d18
   15f24:	vstr	d16, [sp]
   15f28:	bl	10e40 <fprintf@plt>
   15f2c:	movw	r1, #30929	; 0x78d1
   15f30:	mov	r0, r4
   15f34:	mov	r2, r5
   15f38:	movt	r1, #1
   15f3c:	sub	sp, fp, #24
   15f40:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f44:	b	10e40 <fprintf@plt>
   15f48:	andeq	r0, r0, r0
   15f4c:	subsmi	r0, r9, r0
   15f50:	push	{r4, r5, r6, r7, fp, lr}
   15f54:	add	fp, sp, #16
   15f58:	mov	r4, r1
   15f5c:	ldr	r1, [r0, #8]
   15f60:	ldr	r2, [r0, #24]
   15f64:	mov	r5, r0
   15f68:	mov	r0, r4
   15f6c:	blx	r2
   15f70:	ldr	r1, [r5, #8]
   15f74:	cmp	r0, r1
   15f78:	bcs	15fd8 <__assert_fail@plt+0x5084>
   15f7c:	ldr	r7, [r5]
   15f80:	mov	r6, #0
   15f84:	ldr	r1, [r7, r0, lsl #3]!
   15f88:	cmp	r1, #0
   15f8c:	cmpne	r7, #0
   15f90:	bne	15fc0 <__assert_fail@plt+0x506c>
   15f94:	mov	r0, r6
   15f98:	pop	{r4, r5, r6, r7, fp, pc}
   15f9c:	ldr	r2, [r5, #28]
   15fa0:	mov	r0, r4
   15fa4:	blx	r2
   15fa8:	cmp	r0, #0
   15fac:	bne	15fd0 <__assert_fail@plt+0x507c>
   15fb0:	ldr	r7, [r7, #4]
   15fb4:	cmp	r7, #0
   15fb8:	beq	15f94 <__assert_fail@plt+0x5040>
   15fbc:	ldr	r1, [r7]
   15fc0:	cmp	r1, r4
   15fc4:	bne	15f9c <__assert_fail@plt+0x5048>
   15fc8:	mov	r6, r4
   15fcc:	b	15f94 <__assert_fail@plt+0x5040>
   15fd0:	ldr	r6, [r7]
   15fd4:	b	15f94 <__assert_fail@plt+0x5040>
   15fd8:	bl	10f18 <abort@plt>
   15fdc:	push	{fp, lr}
   15fe0:	mov	fp, sp
   15fe4:	ldr	r1, [r0, #16]
   15fe8:	cmp	r1, #0
   15fec:	beq	1600c <__assert_fail@plt+0x50b8>
   15ff0:	ldm	r0, {r1, r2}
   15ff4:	cmp	r1, r2
   15ff8:	bcs	16014 <__assert_fail@plt+0x50c0>
   15ffc:	ldr	r0, [r1], #8
   16000:	cmp	r0, #0
   16004:	beq	15ff4 <__assert_fail@plt+0x50a0>
   16008:	pop	{fp, pc}
   1600c:	mov	r0, #0
   16010:	pop	{fp, pc}
   16014:	bl	10f18 <abort@plt>
   16018:	push	{r4, r5, fp, lr}
   1601c:	add	fp, sp, #8
   16020:	mov	r5, r1
   16024:	ldr	r1, [r0, #8]
   16028:	ldr	r2, [r0, #24]
   1602c:	mov	r4, r0
   16030:	mov	r0, r5
   16034:	blx	r2
   16038:	ldr	r1, [r4, #8]
   1603c:	cmp	r0, r1
   16040:	bcs	160a4 <__assert_fail@plt+0x5150>
   16044:	ldr	r1, [r4]
   16048:	add	r2, r1, r0, lsl #3
   1604c:	ldr	r3, [r2]
   16050:	ldr	r2, [r2, #4]
   16054:	cmp	r3, r5
   16058:	beq	16068 <__assert_fail@plt+0x5114>
   1605c:	cmp	r2, #0
   16060:	bne	1604c <__assert_fail@plt+0x50f8>
   16064:	b	16078 <__assert_fail@plt+0x5124>
   16068:	cmp	r2, #0
   1606c:	beq	16078 <__assert_fail@plt+0x5124>
   16070:	ldr	r0, [r2]
   16074:	pop	{r4, r5, fp, pc}
   16078:	ldr	r2, [r4, #4]
   1607c:	add	r0, r1, r0, lsl #3
   16080:	add	r1, r0, #8
   16084:	cmp	r1, r2
   16088:	bcs	1609c <__assert_fail@plt+0x5148>
   1608c:	ldr	r0, [r1], #8
   16090:	cmp	r0, #0
   16094:	beq	16084 <__assert_fail@plt+0x5130>
   16098:	pop	{r4, r5, fp, pc}
   1609c:	mov	r0, #0
   160a0:	pop	{r4, r5, fp, pc}
   160a4:	bl	10f18 <abort@plt>
   160a8:	push	{r4, r5, fp, lr}
   160ac:	add	fp, sp, #8
   160b0:	ldm	r0, {r5, lr}
   160b4:	mov	ip, r0
   160b8:	mov	r0, #0
   160bc:	cmp	r5, lr
   160c0:	popcs	{r4, r5, fp, pc}
   160c4:	mov	r0, #0
   160c8:	ldr	r3, [r5]
   160cc:	cmp	r3, #0
   160d0:	cmpne	r5, #0
   160d4:	bne	160e8 <__assert_fail@plt+0x5194>
   160d8:	add	r5, r5, #8
   160dc:	cmp	r5, lr
   160e0:	bcc	160c8 <__assert_fail@plt+0x5174>
   160e4:	b	16114 <__assert_fail@plt+0x51c0>
   160e8:	mov	r3, r5
   160ec:	cmp	r0, r2
   160f0:	bcs	16114 <__assert_fail@plt+0x51c0>
   160f4:	ldr	r4, [r3]
   160f8:	str	r4, [r1, r0, lsl #2]
   160fc:	add	r0, r0, #1
   16100:	ldr	r3, [r3, #4]
   16104:	cmp	r3, #0
   16108:	bne	160ec <__assert_fail@plt+0x5198>
   1610c:	ldr	lr, [ip, #4]
   16110:	b	160d8 <__assert_fail@plt+0x5184>
   16114:	pop	{r4, r5, fp, pc}
   16118:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1611c:	add	fp, sp, #24
   16120:	mov	r5, r1
   16124:	ldr	r4, [r0]
   16128:	ldr	r1, [r0, #4]
   1612c:	mov	r6, #0
   16130:	cmp	r4, r1
   16134:	bcs	161a8 <__assert_fail@plt+0x5254>
   16138:	mov	r9, r2
   1613c:	mov	r8, r0
   16140:	mov	r6, #0
   16144:	ldr	r0, [r4]
   16148:	cmp	r0, #0
   1614c:	cmpne	r4, #0
   16150:	bne	16164 <__assert_fail@plt+0x5210>
   16154:	add	r4, r4, #8
   16158:	cmp	r4, r1
   1615c:	bcc	16144 <__assert_fail@plt+0x51f0>
   16160:	b	161a8 <__assert_fail@plt+0x5254>
   16164:	mov	r1, r9
   16168:	blx	r5
   1616c:	cmp	r0, #0
   16170:	beq	161a8 <__assert_fail@plt+0x5254>
   16174:	mov	r7, r4
   16178:	ldr	r7, [r7, #4]
   1617c:	add	r6, r6, #1
   16180:	cmp	r7, #0
   16184:	beq	161a0 <__assert_fail@plt+0x524c>
   16188:	ldr	r0, [r7]
   1618c:	mov	r1, r9
   16190:	blx	r5
   16194:	cmp	r0, #0
   16198:	bne	16178 <__assert_fail@plt+0x5224>
   1619c:	b	161a8 <__assert_fail@plt+0x5254>
   161a0:	ldr	r1, [r8, #4]
   161a4:	b	16154 <__assert_fail@plt+0x5200>
   161a8:	mov	r0, r6
   161ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   161b0:	ldrb	r2, [r0]
   161b4:	cmp	r2, #0
   161b8:	moveq	r0, #0
   161bc:	bxeq	lr
   161c0:	add	r3, r0, #1
   161c4:	mov	r0, #0
   161c8:	rsb	r0, r0, r0, lsl #5
   161cc:	uxtab	r0, r0, r2
   161d0:	udiv	r2, r0, r1
   161d4:	mls	r0, r2, r1, r0
   161d8:	ldrb	r2, [r3], #1
   161dc:	cmp	r2, #0
   161e0:	bne	161c8 <__assert_fail@plt+0x5274>
   161e4:	bx	lr
   161e8:	movw	r1, #30960	; 0x78f0
   161ec:	movt	r1, #1
   161f0:	vld1.32	{d16-d17}, [r1]!
   161f4:	ldr	r1, [r1]
   161f8:	vst1.32	{d16-d17}, [r0]!
   161fc:	str	r1, [r0]
   16200:	bx	lr
   16204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16208:	add	fp, sp, #28
   1620c:	sub	sp, sp, #4
   16210:	movw	sl, #25336	; 0x62f8
   16214:	cmp	r3, #0
   16218:	movw	r5, #25316	; 0x62e4
   1621c:	mov	r8, r0
   16220:	mov	r0, #40	; 0x28
   16224:	mov	r7, r1
   16228:	movt	sl, #1
   1622c:	movne	sl, r3
   16230:	cmp	r2, #0
   16234:	movt	r5, #1
   16238:	movne	r5, r2
   1623c:	bl	16f6c <__assert_fail@plt+0x6018>
   16240:	mov	r9, #0
   16244:	cmp	r0, #0
   16248:	beq	162d8 <__assert_fail@plt+0x5384>
   1624c:	movw	r6, #30960	; 0x78f0
   16250:	cmp	r7, #0
   16254:	mov	r4, r0
   16258:	movt	r6, #1
   1625c:	movne	r6, r7
   16260:	str	r6, [r0, #20]
   16264:	bl	16308 <__assert_fail@plt+0x53b4>
   16268:	cmp	r0, #0
   1626c:	beq	162d0 <__assert_fail@plt+0x537c>
   16270:	mov	r0, r8
   16274:	mov	r1, r6
   16278:	bl	163b4 <__assert_fail@plt+0x5460>
   1627c:	cmp	r0, #0
   16280:	str	r0, [r4, #8]
   16284:	beq	162d0 <__assert_fail@plt+0x537c>
   16288:	mov	r1, #8
   1628c:	bl	16f18 <__assert_fail@plt+0x5fc4>
   16290:	cmp	r0, #0
   16294:	str	r0, [r4]
   16298:	beq	162d0 <__assert_fail@plt+0x537c>
   1629c:	ldr	r1, [fp, #8]
   162a0:	mov	r2, #0
   162a4:	str	r5, [r4, #24]
   162a8:	str	sl, [r4, #28]
   162ac:	mov	r9, r4
   162b0:	str	r1, [r4, #32]
   162b4:	str	r2, [r4, #36]	; 0x24
   162b8:	str	r2, [r4, #12]
   162bc:	str	r2, [r4, #16]
   162c0:	ldr	r1, [r4, #8]
   162c4:	add	r0, r0, r1, lsl #3
   162c8:	str	r0, [r4, #4]
   162cc:	b	162d8 <__assert_fail@plt+0x5384>
   162d0:	mov	r0, r4
   162d4:	bl	13028 <__assert_fail@plt+0x20d4>
   162d8:	mov	r0, r9
   162dc:	sub	sp, fp, #28
   162e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162e4:	ror	r2, r0, #3
   162e8:	udiv	r2, r2, r1
   162ec:	mul	r1, r2, r1
   162f0:	rsb	r0, r1, r0, ror #3
   162f4:	bx	lr
   162f8:	sub	r0, r0, r1
   162fc:	clz	r0, r0
   16300:	lsr	r0, r0, #5
   16304:	bx	lr
   16308:	ldr	r3, [r0, #20]
   1630c:	movw	r2, #30960	; 0x78f0
   16310:	mov	r1, r0
   16314:	mov	r0, #1
   16318:	movt	r2, #1
   1631c:	cmp	r3, r2
   16320:	beq	163a4 <__assert_fail@plt+0x5450>
   16324:	vldr	s2, [pc, #124]	; 163a8 <__assert_fail@plt+0x5454>
   16328:	vldr	s0, [r3, #8]
   1632c:	vcmpe.f32	s0, s2
   16330:	vmrs	APSR_nzcv, fpscr
   16334:	ble	1639c <__assert_fail@plt+0x5448>
   16338:	vldr	s4, [pc, #108]	; 163ac <__assert_fail@plt+0x5458>
   1633c:	vcmpe.f32	s0, s4
   16340:	vmrs	APSR_nzcv, fpscr
   16344:	bpl	1639c <__assert_fail@plt+0x5448>
   16348:	vldr	s4, [pc, #96]	; 163b0 <__assert_fail@plt+0x545c>
   1634c:	vldr	s6, [r3, #12]
   16350:	vcmpe.f32	s6, s4
   16354:	vmrs	APSR_nzcv, fpscr
   16358:	ble	1639c <__assert_fail@plt+0x5448>
   1635c:	vldr	s4, [r3]
   16360:	vcmpe.f32	s4, #0.0
   16364:	vmrs	APSR_nzcv, fpscr
   16368:	blt	1639c <__assert_fail@plt+0x5448>
   1636c:	vadd.f32	s2, s4, s2
   16370:	vcmpe.f32	s2, s0
   16374:	vmrs	APSR_nzcv, fpscr
   16378:	bpl	1639c <__assert_fail@plt+0x5448>
   1637c:	vldr	s0, [r3, #4]
   16380:	vmov.f32	s4, #112	; 0x3f800000  1.0
   16384:	vcmpe.f32	s0, s4
   16388:	vmrs	APSR_nzcv, fpscr
   1638c:	bhi	1639c <__assert_fail@plt+0x5448>
   16390:	vcmpe.f32	s2, s0
   16394:	vmrs	APSR_nzcv, fpscr
   16398:	bxmi	lr
   1639c:	mov	r0, #0
   163a0:	str	r2, [r1, #20]
   163a4:	bx	lr
   163a8:	stclcc	12, cr12, [ip, #820]	; 0x334
   163ac:	svccc	0x00666666
   163b0:	svccc	0x008ccccd
   163b4:	ldrb	r2, [r1, #16]
   163b8:	cmp	r2, #0
   163bc:	bne	163ec <__assert_fail@plt+0x5498>
   163c0:	vmov	s2, r0
   163c4:	vldr	s0, [r1, #8]
   163c8:	vldr	s4, [pc, #156]	; 1646c <__assert_fail@plt+0x5518>
   163cc:	mov	r0, #0
   163d0:	vcvt.f32.u32	s2, s2
   163d4:	vdiv.f32	s2, s2, s0
   163d8:	vcmpe.f32	s2, s4
   163dc:	vcvt.u32.f32	s0, s2
   163e0:	vmrs	APSR_nzcv, fpscr
   163e4:	bxge	lr
   163e8:	vmov	r0, s0
   163ec:	cmp	r0, #10
   163f0:	movls	r0, #10
   163f4:	orr	r0, r0, #1
   163f8:	cmn	r0, #1
   163fc:	beq	16458 <__assert_fail@plt+0x5504>
   16400:	mov	r1, #3
   16404:	cmp	r0, #10
   16408:	bcc	16440 <__assert_fail@plt+0x54ec>
   1640c:	mov	r1, #3
   16410:	mov	ip, #9
   16414:	mov	r2, #12
   16418:	udiv	r3, r0, r1
   1641c:	mls	r3, r3, r1, r0
   16420:	cmp	r3, #0
   16424:	beq	16440 <__assert_fail@plt+0x54ec>
   16428:	add	r3, ip, r2
   1642c:	add	r2, r2, #8
   16430:	add	r1, r1, #2
   16434:	add	ip, r3, #4
   16438:	cmp	ip, r0
   1643c:	bcc	16418 <__assert_fail@plt+0x54c4>
   16440:	udiv	r2, r0, r1
   16444:	mls	r1, r2, r1, r0
   16448:	cmp	r1, #0
   1644c:	bne	16460 <__assert_fail@plt+0x550c>
   16450:	add	r0, r0, #2
   16454:	b	163f8 <__assert_fail@plt+0x54a4>
   16458:	mov	r0, #0
   1645c:	bx	lr
   16460:	cmp	r0, #536870912	; 0x20000000
   16464:	movcs	r0, #0
   16468:	bx	lr
   1646c:	svcmi	0x00800000
   16470:	push	{r4, r5, r6, r7, fp, lr}
   16474:	add	fp, sp, #16
   16478:	mov	r4, r0
   1647c:	ldr	r5, [r0]
   16480:	ldr	r0, [r0, #4]
   16484:	cmp	r5, r0
   16488:	bcs	16520 <__assert_fail@plt+0x55cc>
   1648c:	mov	r6, #0
   16490:	ldr	r1, [r5]
   16494:	cmp	r1, #0
   16498:	beq	16514 <__assert_fail@plt+0x55c0>
   1649c:	ldr	r1, [r4, #32]
   164a0:	ldr	r7, [r5, #4]
   164a4:	cmp	r1, #0
   164a8:	mov	r0, r1
   164ac:	movwne	r0, #1
   164b0:	cmp	r7, #0
   164b4:	beq	164f8 <__assert_fail@plt+0x55a4>
   164b8:	tst	r0, #1
   164bc:	beq	164cc <__assert_fail@plt+0x5578>
   164c0:	ldr	r0, [r7]
   164c4:	blx	r1
   164c8:	ldr	r1, [r4, #32]
   164cc:	str	r6, [r7]
   164d0:	cmp	r1, #0
   164d4:	ldr	r2, [r7, #4]
   164d8:	ldr	r0, [r4, #36]	; 0x24
   164dc:	str	r0, [r7, #4]
   164e0:	mov	r0, r1
   164e4:	str	r7, [r4, #36]	; 0x24
   164e8:	movwne	r0, #1
   164ec:	cmp	r2, #0
   164f0:	mov	r7, r2
   164f4:	bne	164b8 <__assert_fail@plt+0x5564>
   164f8:	cmp	r0, #0
   164fc:	beq	16508 <__assert_fail@plt+0x55b4>
   16500:	ldr	r0, [r5]
   16504:	blx	r1
   16508:	str	r6, [r5]
   1650c:	str	r6, [r5, #4]
   16510:	ldr	r0, [r4, #4]
   16514:	add	r5, r5, #8
   16518:	cmp	r5, r0
   1651c:	bcc	16490 <__assert_fail@plt+0x553c>
   16520:	mov	r0, #0
   16524:	str	r0, [r4, #12]
   16528:	str	r0, [r4, #16]
   1652c:	pop	{r4, r5, r6, r7, fp, pc}
   16530:	push	{r4, r5, r6, sl, fp, lr}
   16534:	add	fp, sp, #16
   16538:	mov	r4, r0
   1653c:	ldr	r0, [r0, #32]
   16540:	cmp	r0, #0
   16544:	beq	165a8 <__assert_fail@plt+0x5654>
   16548:	ldr	r0, [r4, #16]
   1654c:	cmp	r0, #0
   16550:	beq	165a8 <__assert_fail@plt+0x5654>
   16554:	ldr	r5, [r4]
   16558:	ldr	r1, [r4, #4]
   1655c:	cmp	r5, r1
   16560:	bcs	165a8 <__assert_fail@plt+0x5654>
   16564:	ldr	r0, [r5]
   16568:	cmp	r0, #0
   1656c:	cmpne	r5, #0
   16570:	beq	165a0 <__assert_fail@plt+0x564c>
   16574:	ldr	r1, [r4, #32]
   16578:	blx	r1
   1657c:	ldr	r6, [r5, #4]
   16580:	cmp	r6, #0
   16584:	beq	1659c <__assert_fail@plt+0x5648>
   16588:	ldr	r1, [r4, #32]
   1658c:	ldr	r0, [r6]
   16590:	blx	r1
   16594:	ldr	r6, [r6, #4]
   16598:	b	16580 <__assert_fail@plt+0x562c>
   1659c:	ldr	r1, [r4, #4]
   165a0:	add	r5, r5, #8
   165a4:	b	1655c <__assert_fail@plt+0x5608>
   165a8:	ldr	r5, [r4]
   165ac:	ldr	r1, [r4, #4]
   165b0:	cmp	r5, r1
   165b4:	bcs	165e4 <__assert_fail@plt+0x5690>
   165b8:	ldr	r0, [r5, #4]
   165bc:	cmp	r0, #0
   165c0:	beq	165dc <__assert_fail@plt+0x5688>
   165c4:	ldr	r6, [r0, #4]
   165c8:	bl	13028 <__assert_fail@plt+0x20d4>
   165cc:	cmp	r6, #0
   165d0:	mov	r0, r6
   165d4:	bne	165c4 <__assert_fail@plt+0x5670>
   165d8:	ldr	r1, [r4, #4]
   165dc:	add	r5, r5, #8
   165e0:	b	165b0 <__assert_fail@plt+0x565c>
   165e4:	ldr	r0, [r4, #36]	; 0x24
   165e8:	cmp	r0, #0
   165ec:	beq	16604 <__assert_fail@plt+0x56b0>
   165f0:	ldr	r5, [r0, #4]
   165f4:	bl	13028 <__assert_fail@plt+0x20d4>
   165f8:	cmp	r5, #0
   165fc:	mov	r0, r5
   16600:	bne	165f0 <__assert_fail@plt+0x569c>
   16604:	ldr	r0, [r4]
   16608:	bl	13028 <__assert_fail@plt+0x20d4>
   1660c:	mov	r0, r4
   16610:	pop	{r4, r5, r6, sl, fp, lr}
   16614:	b	13028 <__assert_fail@plt+0x20d4>
   16618:	push	{r4, r5, r6, r7, fp, lr}
   1661c:	add	fp, sp, #16
   16620:	sub	sp, sp, #40	; 0x28
   16624:	mov	r7, r0
   16628:	mov	r2, r1
   1662c:	mov	r4, r0
   16630:	ldr	r1, [r7, #20]!
   16634:	mov	r0, r2
   16638:	bl	163b4 <__assert_fail@plt+0x5460>
   1663c:	mov	r5, #0
   16640:	cmp	r0, #0
   16644:	beq	166d8 <__assert_fail@plt+0x5784>
   16648:	mov	r6, r0
   1664c:	ldr	r0, [r4, #8]
   16650:	cmp	r6, r0
   16654:	beq	166d4 <__assert_fail@plt+0x5780>
   16658:	mov	r0, r6
   1665c:	mov	r1, #8
   16660:	bl	16f18 <__assert_fail@plt+0x5fc4>
   16664:	cmp	r0, #0
   16668:	str	r0, [sp]
   1666c:	beq	166d8 <__assert_fail@plt+0x5784>
   16670:	add	r0, r0, r6, lsl #3
   16674:	mov	r1, #0
   16678:	mov	r5, sp
   1667c:	mov	r2, #0
   16680:	str	r1, [sp, #16]
   16684:	str	r1, [sp, #12]
   16688:	str	r6, [sp, #8]
   1668c:	mov	r1, r4
   16690:	str	r0, [sp, #4]
   16694:	add	r0, r5, #20
   16698:	vld1.32	{d16-d17}, [r7]
   1669c:	vst1.32	{d16-d17}, [r0]
   166a0:	ldr	r0, [r4, #36]	; 0x24
   166a4:	str	r0, [sp, #36]	; 0x24
   166a8:	mov	r0, r5
   166ac:	bl	16730 <__assert_fail@plt+0x57dc>
   166b0:	cmp	r0, #0
   166b4:	beq	166e4 <__assert_fail@plt+0x5790>
   166b8:	ldr	r0, [r4]
   166bc:	bl	13028 <__assert_fail@plt+0x20d4>
   166c0:	mov	r0, #36	; 0x24
   166c4:	vld1.32	{d16-d17}, [r5], r0
   166c8:	vst1.32	{d16-d17}, [r4], r0
   166cc:	ldr	r0, [r5]
   166d0:	str	r0, [r4]
   166d4:	mov	r5, #1
   166d8:	mov	r0, r5
   166dc:	sub	sp, fp, #16
   166e0:	pop	{r4, r5, r6, r7, fp, pc}
   166e4:	ldr	r0, [sp, #36]	; 0x24
   166e8:	mov	r1, sp
   166ec:	mov	r2, #1
   166f0:	str	r0, [r4, #36]	; 0x24
   166f4:	mov	r0, r4
   166f8:	bl	16730 <__assert_fail@plt+0x57dc>
   166fc:	cmp	r0, #0
   16700:	beq	1672c <__assert_fail@plt+0x57d8>
   16704:	mov	r1, sp
   16708:	mov	r0, r4
   1670c:	mov	r2, #0
   16710:	mov	r5, #0
   16714:	bl	16730 <__assert_fail@plt+0x57dc>
   16718:	cmp	r0, #0
   1671c:	beq	1672c <__assert_fail@plt+0x57d8>
   16720:	ldr	r0, [sp]
   16724:	bl	13028 <__assert_fail@plt+0x20d4>
   16728:	b	166d8 <__assert_fail@plt+0x5784>
   1672c:	bl	10f18 <abort@plt>
   16730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16734:	add	fp, sp, #28
   16738:	sub	sp, sp, #12
   1673c:	ldr	sl, [r1]
   16740:	str	r1, [sp, #8]
   16744:	ldr	r1, [r1, #4]
   16748:	mov	r7, r0
   1674c:	mov	r0, #1
   16750:	str	r2, [sp, #4]
   16754:	cmp	sl, r1
   16758:	bcs	168ac <__assert_fail@plt+0x5958>
   1675c:	add	r8, r7, #36	; 0x24
   16760:	mov	r9, #0
   16764:	ldr	r4, [sl]
   16768:	cmp	r4, #0
   1676c:	beq	16894 <__assert_fail@plt+0x5940>
   16770:	ldr	r5, [sl, #4]
   16774:	cmp	r5, #0
   16778:	beq	167f0 <__assert_fail@plt+0x589c>
   1677c:	ldr	r1, [r7, #8]
   16780:	ldr	r4, [r5]
   16784:	ldr	r2, [r7, #24]
   16788:	mov	r0, r4
   1678c:	blx	r2
   16790:	ldr	r1, [r7, #8]
   16794:	cmp	r0, r1
   16798:	bcs	168bc <__assert_fail@plt+0x5968>
   1679c:	ldr	r3, [r7]
   167a0:	ldr	r2, [r5, #4]
   167a4:	ldr	r6, [r3, r0, lsl #3]
   167a8:	cmp	r6, #0
   167ac:	beq	167bc <__assert_fail@plt+0x5868>
   167b0:	add	r0, r3, r0, lsl #3
   167b4:	add	r0, r0, #4
   167b8:	b	167d4 <__assert_fail@plt+0x5880>
   167bc:	str	r4, [r3, r0, lsl #3]
   167c0:	ldr	r0, [r7, #12]
   167c4:	add	r0, r0, #1
   167c8:	str	r0, [r7, #12]
   167cc:	mov	r0, r8
   167d0:	str	r9, [r5]
   167d4:	ldr	r3, [r0]
   167d8:	cmp	r2, #0
   167dc:	str	r3, [r5, #4]
   167e0:	str	r5, [r0]
   167e4:	mov	r5, r2
   167e8:	bne	16780 <__assert_fail@plt+0x582c>
   167ec:	ldr	r4, [sl]
   167f0:	ldr	r0, [sp, #4]
   167f4:	str	r9, [sl, #4]
   167f8:	cmp	r0, #0
   167fc:	bne	16894 <__assert_fail@plt+0x5940>
   16800:	ldr	r1, [r7, #8]
   16804:	ldr	r2, [r7, #24]
   16808:	mov	r0, r4
   1680c:	blx	r2
   16810:	mov	r5, r0
   16814:	ldr	r0, [r7, #8]
   16818:	cmp	r5, r0
   1681c:	bcs	168bc <__assert_fail@plt+0x5968>
   16820:	ldr	r6, [r7]
   16824:	ldr	r0, [r6, r5, lsl #3]
   16828:	cmp	r0, #0
   1682c:	beq	16848 <__assert_fail@plt+0x58f4>
   16830:	ldr	r0, [r8]
   16834:	cmp	r0, #0
   16838:	beq	1685c <__assert_fail@plt+0x5908>
   1683c:	ldr	r1, [r0, #4]
   16840:	str	r1, [r8]
   16844:	b	1686c <__assert_fail@plt+0x5918>
   16848:	str	r4, [r6, r5, lsl #3]
   1684c:	ldr	r0, [r7, #12]
   16850:	add	r0, r0, #1
   16854:	str	r0, [r7, #12]
   16858:	b	16880 <__assert_fail@plt+0x592c>
   1685c:	mov	r0, #8
   16860:	bl	16f6c <__assert_fail@plt+0x6018>
   16864:	cmp	r0, #0
   16868:	beq	168b4 <__assert_fail@plt+0x5960>
   1686c:	add	r1, r6, r5, lsl #3
   16870:	str	r4, [r0]
   16874:	ldr	r2, [r1, #4]
   16878:	str	r2, [r0, #4]
   1687c:	str	r0, [r1, #4]
   16880:	ldr	r1, [sp, #8]
   16884:	str	r9, [sl]
   16888:	ldr	r0, [r1, #12]
   1688c:	sub	r0, r0, #1
   16890:	str	r0, [r1, #12]
   16894:	ldr	r0, [sp, #8]
   16898:	add	sl, sl, #8
   1689c:	ldr	r0, [r0, #4]
   168a0:	cmp	sl, r0
   168a4:	bcc	16764 <__assert_fail@plt+0x5810>
   168a8:	mov	r0, #1
   168ac:	sub	sp, fp, #28
   168b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168b4:	mov	r0, #0
   168b8:	b	168ac <__assert_fail@plt+0x5958>
   168bc:	bl	10f18 <abort@plt>
   168c0:	push	{r4, r5, r6, r7, fp, lr}
   168c4:	add	fp, sp, #16
   168c8:	sub	sp, sp, #8
   168cc:	cmp	r1, #0
   168d0:	beq	16a48 <__assert_fail@plt+0x5af4>
   168d4:	mov	r7, r2
   168d8:	add	r2, sp, #4
   168dc:	mov	r3, #0
   168e0:	mov	r5, r1
   168e4:	mov	r4, r0
   168e8:	mov	r6, #0
   168ec:	bl	16a50 <__assert_fail@plt+0x5afc>
   168f0:	cmp	r0, #0
   168f4:	beq	16904 <__assert_fail@plt+0x59b0>
   168f8:	cmp	r7, #0
   168fc:	strne	r0, [r7]
   16900:	b	16a34 <__assert_fail@plt+0x5ae0>
   16904:	vldr	s0, [r4, #8]
   16908:	ldr	r0, [r4, #20]
   1690c:	vldr	s2, [r4, #12]
   16910:	vldr	s4, [r0, #8]
   16914:	vcvt.f32.u32	s0, s0
   16918:	vcvt.f32.u32	s2, s2
   1691c:	vmul.f32	s0, s4, s0
   16920:	vcmpe.f32	s0, s2
   16924:	vmrs	APSR_nzcv, fpscr
   16928:	bpl	169bc <__assert_fail@plt+0x5a68>
   1692c:	mov	r0, r4
   16930:	bl	16308 <__assert_fail@plt+0x53b4>
   16934:	vldr	s0, [r4, #8]
   16938:	ldr	r0, [r4, #20]
   1693c:	vldr	s4, [r4, #12]
   16940:	vcvt.f32.u32	s2, s0
   16944:	vldr	s0, [r0, #8]
   16948:	vcvt.f32.u32	s4, s4
   1694c:	vmul.f32	s6, s0, s2
   16950:	vcmpe.f32	s6, s4
   16954:	vmrs	APSR_nzcv, fpscr
   16958:	bpl	169bc <__assert_fail@plt+0x5a68>
   1695c:	vldr	s4, [r0, #12]
   16960:	ldrb	r0, [r0, #16]
   16964:	mvn	r6, #0
   16968:	cmp	r0, #0
   1696c:	vmul.f32	s2, s4, s2
   16970:	vldr	s4, [pc, #212]	; 16a4c <__assert_fail@plt+0x5af8>
   16974:	vmul.f32	s0, s0, s2
   16978:	vseleq.f32	s0, s0, s2
   1697c:	vcmpe.f32	s0, s4
   16980:	vmrs	APSR_nzcv, fpscr
   16984:	bge	16a34 <__assert_fail@plt+0x5ae0>
   16988:	vcvt.u32.f32	s0, s0
   1698c:	mov	r0, r4
   16990:	vmov	r1, s0
   16994:	bl	16618 <__assert_fail@plt+0x56c4>
   16998:	cmp	r0, #0
   1699c:	beq	16a34 <__assert_fail@plt+0x5ae0>
   169a0:	add	r2, sp, #4
   169a4:	mov	r0, r4
   169a8:	mov	r1, r5
   169ac:	mov	r3, #0
   169b0:	bl	16a50 <__assert_fail@plt+0x5afc>
   169b4:	cmp	r0, #0
   169b8:	bne	16a48 <__assert_fail@plt+0x5af4>
   169bc:	ldr	r6, [sp, #4]
   169c0:	ldr	r0, [r6]
   169c4:	cmp	r0, #0
   169c8:	beq	169e4 <__assert_fail@plt+0x5a90>
   169cc:	ldr	r0, [r4, #36]	; 0x24
   169d0:	cmp	r0, #0
   169d4:	beq	16a04 <__assert_fail@plt+0x5ab0>
   169d8:	ldr	r1, [r0, #4]
   169dc:	str	r1, [r4, #36]	; 0x24
   169e0:	b	16a14 <__assert_fail@plt+0x5ac0>
   169e4:	str	r5, [r6]
   169e8:	ldr	r0, [r4, #12]
   169ec:	ldr	r1, [r4, #16]
   169f0:	add	r0, r0, #1
   169f4:	add	r1, r1, #1
   169f8:	str	r0, [r4, #12]
   169fc:	str	r1, [r4, #16]
   16a00:	b	16a30 <__assert_fail@plt+0x5adc>
   16a04:	mov	r0, #8
   16a08:	bl	16f6c <__assert_fail@plt+0x6018>
   16a0c:	cmp	r0, #0
   16a10:	beq	16a40 <__assert_fail@plt+0x5aec>
   16a14:	str	r5, [r0]
   16a18:	ldr	r1, [r6, #4]
   16a1c:	str	r1, [r0, #4]
   16a20:	str	r0, [r6, #4]
   16a24:	ldr	r0, [r4, #16]
   16a28:	add	r0, r0, #1
   16a2c:	str	r0, [r4, #16]
   16a30:	mov	r6, #1
   16a34:	mov	r0, r6
   16a38:	sub	sp, fp, #16
   16a3c:	pop	{r4, r5, r6, r7, fp, pc}
   16a40:	mvn	r6, #0
   16a44:	b	16a34 <__assert_fail@plt+0x5ae0>
   16a48:	bl	10f18 <abort@plt>
   16a4c:	svcmi	0x00800000
   16a50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16a54:	add	fp, sp, #24
   16a58:	mov	r7, r2
   16a5c:	mov	r4, r1
   16a60:	ldr	r1, [r0, #8]
   16a64:	ldr	r2, [r0, #24]
   16a68:	mov	r5, r0
   16a6c:	mov	r8, r3
   16a70:	mov	r0, r4
   16a74:	blx	r2
   16a78:	ldr	r1, [r5, #8]
   16a7c:	cmp	r0, r1
   16a80:	bcs	16b7c <__assert_fail@plt+0x5c28>
   16a84:	ldr	r1, [r5]
   16a88:	add	r6, r1, r0, lsl #3
   16a8c:	str	r6, [r7]
   16a90:	ldr	r1, [r1, r0, lsl #3]
   16a94:	cmp	r1, #0
   16a98:	beq	16b30 <__assert_fail@plt+0x5bdc>
   16a9c:	cmp	r1, r4
   16aa0:	beq	16abc <__assert_fail@plt+0x5b68>
   16aa4:	ldr	r2, [r5, #28]
   16aa8:	mov	r0, r4
   16aac:	blx	r2
   16ab0:	cmp	r0, #0
   16ab4:	beq	16af0 <__assert_fail@plt+0x5b9c>
   16ab8:	ldr	r4, [r6]
   16abc:	cmp	r8, #0
   16ac0:	beq	16b34 <__assert_fail@plt+0x5be0>
   16ac4:	ldr	r0, [r6, #4]
   16ac8:	cmp	r0, #0
   16acc:	beq	16b3c <__assert_fail@plt+0x5be8>
   16ad0:	ldm	r0, {r1, r2}
   16ad4:	stm	r6, {r1, r2}
   16ad8:	mov	r1, #0
   16adc:	str	r1, [r0]
   16ae0:	ldr	r1, [r5, #36]	; 0x24
   16ae4:	str	r1, [r0, #4]
   16ae8:	str	r0, [r5, #36]	; 0x24
   16aec:	b	16b34 <__assert_fail@plt+0x5be0>
   16af0:	ldr	r0, [r6, #4]!
   16af4:	cmp	r0, #0
   16af8:	beq	16b30 <__assert_fail@plt+0x5bdc>
   16afc:	ldr	r1, [r0]
   16b00:	cmp	r1, r4
   16b04:	beq	16b48 <__assert_fail@plt+0x5bf4>
   16b08:	ldr	r2, [r5, #28]
   16b0c:	mov	r0, r4
   16b10:	blx	r2
   16b14:	ldr	r1, [r6]
   16b18:	cmp	r0, #0
   16b1c:	bne	16b50 <__assert_fail@plt+0x5bfc>
   16b20:	ldr	r0, [r1, #4]!
   16b24:	mov	r6, r1
   16b28:	cmp	r0, #0
   16b2c:	bne	16afc <__assert_fail@plt+0x5ba8>
   16b30:	mov	r4, #0
   16b34:	mov	r0, r4
   16b38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16b3c:	mov	r0, #0
   16b40:	str	r0, [r6]
   16b44:	b	16b34 <__assert_fail@plt+0x5be0>
   16b48:	mov	r1, r0
   16b4c:	b	16b54 <__assert_fail@plt+0x5c00>
   16b50:	ldr	r4, [r1]
   16b54:	cmp	r8, #0
   16b58:	beq	16b34 <__assert_fail@plt+0x5be0>
   16b5c:	ldr	r0, [r1, #4]
   16b60:	str	r0, [r6]
   16b64:	mov	r0, #0
   16b68:	str	r0, [r1]
   16b6c:	ldr	r0, [r5, #36]	; 0x24
   16b70:	str	r0, [r1, #4]
   16b74:	str	r1, [r5, #36]	; 0x24
   16b78:	b	16b34 <__assert_fail@plt+0x5be0>
   16b7c:	bl	10f18 <abort@plt>
   16b80:	push	{r4, sl, fp, lr}
   16b84:	add	fp, sp, #8
   16b88:	sub	sp, sp, #8
   16b8c:	add	r2, sp, #4
   16b90:	mov	r4, r1
   16b94:	bl	168c0 <__assert_fail@plt+0x596c>
   16b98:	cmn	r0, #1
   16b9c:	beq	16bb0 <__assert_fail@plt+0x5c5c>
   16ba0:	ldr	r1, [sp, #4]
   16ba4:	cmp	r0, #0
   16ba8:	moveq	r4, r1
   16bac:	b	16bb4 <__assert_fail@plt+0x5c60>
   16bb0:	mov	r4, #0
   16bb4:	mov	r0, r4
   16bb8:	sub	sp, fp, #8
   16bbc:	pop	{r4, sl, fp, pc}
   16bc0:	push	{r4, r5, r6, sl, fp, lr}
   16bc4:	add	fp, sp, #16
   16bc8:	sub	sp, sp, #8
   16bcc:	add	r2, sp, #4
   16bd0:	mov	r3, #1
   16bd4:	mov	r4, r0
   16bd8:	bl	16a50 <__assert_fail@plt+0x5afc>
   16bdc:	mov	r5, r0
   16be0:	cmp	r0, #0
   16be4:	beq	16cc4 <__assert_fail@plt+0x5d70>
   16be8:	ldr	r0, [r4, #16]
   16bec:	sub	r0, r0, #1
   16bf0:	str	r0, [r4, #16]
   16bf4:	ldr	r0, [sp, #4]
   16bf8:	ldr	r0, [r0]
   16bfc:	cmp	r0, #0
   16c00:	bne	16cc4 <__assert_fail@plt+0x5d70>
   16c04:	ldr	r0, [r4, #12]
   16c08:	vldr	s0, [r4, #8]
   16c0c:	sub	r0, r0, #1
   16c10:	str	r0, [r4, #12]
   16c14:	vmov	s4, r0
   16c18:	ldr	r1, [r4, #20]
   16c1c:	vldr	s2, [r1]
   16c20:	vcvt.f32.u32	s0, s0
   16c24:	vcvt.f32.u32	s4, s4
   16c28:	vmul.f32	s0, s2, s0
   16c2c:	vcmpe.f32	s0, s4
   16c30:	vmrs	APSR_nzcv, fpscr
   16c34:	ble	16cc4 <__assert_fail@plt+0x5d70>
   16c38:	mov	r0, r4
   16c3c:	bl	16308 <__assert_fail@plt+0x53b4>
   16c40:	vldr	s0, [r4, #8]
   16c44:	ldr	r0, [r4, #20]
   16c48:	vldr	s2, [r4, #12]
   16c4c:	vcvt.f32.u32	s0, s0
   16c50:	vldr	s4, [r0]
   16c54:	vcvt.f32.u32	s2, s2
   16c58:	vmul.f32	s4, s4, s0
   16c5c:	vcmpe.f32	s4, s2
   16c60:	vmrs	APSR_nzcv, fpscr
   16c64:	ble	16cc4 <__assert_fail@plt+0x5d70>
   16c68:	vldr	s2, [r0, #4]
   16c6c:	ldrb	r1, [r0, #16]
   16c70:	cmp	r1, #0
   16c74:	vmul.f32	s0, s2, s0
   16c78:	bne	16c84 <__assert_fail@plt+0x5d30>
   16c7c:	vldr	s2, [r0, #8]
   16c80:	vmul.f32	s0, s0, s2
   16c84:	vcvt.u32.f32	s0, s0
   16c88:	mov	r0, r4
   16c8c:	vmov	r1, s0
   16c90:	bl	16618 <__assert_fail@plt+0x56c4>
   16c94:	cmp	r0, #0
   16c98:	bne	16cc4 <__assert_fail@plt+0x5d70>
   16c9c:	ldr	r0, [r4, #36]	; 0x24
   16ca0:	cmp	r0, #0
   16ca4:	beq	16cbc <__assert_fail@plt+0x5d68>
   16ca8:	ldr	r6, [r0, #4]
   16cac:	bl	13028 <__assert_fail@plt+0x20d4>
   16cb0:	cmp	r6, #0
   16cb4:	mov	r0, r6
   16cb8:	bne	16ca8 <__assert_fail@plt+0x5d54>
   16cbc:	mov	r0, #0
   16cc0:	str	r0, [r4, #36]	; 0x24
   16cc4:	mov	r0, r5
   16cc8:	sub	sp, fp, #16
   16ccc:	pop	{r4, r5, r6, sl, fp, pc}
   16cd0:	b	16bc0 <__assert_fail@plt+0x5c6c>
   16cd4:	vdup.32	q8, r1
   16cd8:	mov	r2, #0
   16cdc:	str	r2, [r0, #20]
   16ce0:	str	r2, [r0, #24]
   16ce4:	mov	r2, #1
   16ce8:	strb	r2, [r0, #28]
   16cec:	vst1.32	{d16-d17}, [r0]!
   16cf0:	str	r1, [r0]
   16cf4:	bx	lr
   16cf8:	ldrb	r0, [r0, #28]
   16cfc:	bx	lr
   16d00:	push	{fp, lr}
   16d04:	mov	fp, sp
   16d08:	ldrb	r3, [r0, #28]
   16d0c:	ldr	r2, [r0, #20]
   16d10:	eor	lr, r3, #1
   16d14:	add	r2, r2, lr
   16d18:	and	r3, r2, #3
   16d1c:	ldr	ip, [r0, r3, lsl #2]
   16d20:	str	r1, [r0, r3, lsl #2]
   16d24:	str	r3, [r0, #20]
   16d28:	ldr	r1, [r0, #24]
   16d2c:	cmp	r3, r1
   16d30:	addeq	r1, r2, lr
   16d34:	andeq	r1, r1, #3
   16d38:	streq	r1, [r0, #24]
   16d3c:	mov	r1, #0
   16d40:	strb	r1, [r0, #28]
   16d44:	mov	r0, ip
   16d48:	pop	{fp, pc}
   16d4c:	push	{fp, lr}
   16d50:	mov	fp, sp
   16d54:	ldrb	r1, [r0, #28]
   16d58:	cmp	r1, #0
   16d5c:	bne	16da0 <__assert_fail@plt+0x5e4c>
   16d60:	ldr	r3, [r0, #20]
   16d64:	ldr	r2, [r0, #16]
   16d68:	ldr	r1, [r0, r3, lsl #2]
   16d6c:	str	r2, [r0, r3, lsl #2]
   16d70:	ldr	r2, [r0, #20]
   16d74:	ldr	r3, [r0, #24]
   16d78:	cmp	r2, r3
   16d7c:	bne	16d8c <__assert_fail@plt+0x5e38>
   16d80:	mov	r2, #1
   16d84:	strb	r2, [r0, #28]
   16d88:	b	16d98 <__assert_fail@plt+0x5e44>
   16d8c:	sub	r2, r2, #1
   16d90:	and	r2, r2, #3
   16d94:	str	r2, [r0, #20]
   16d98:	mov	r0, r1
   16d9c:	pop	{fp, pc}
   16da0:	bl	10f18 <abort@plt>
   16da4:	push	{r4, r5, r6, sl, fp, lr}
   16da8:	add	fp, sp, #16
   16dac:	mov	r5, r0
   16db0:	mov	r0, #0
   16db4:	mov	r4, r1
   16db8:	add	r6, r2, #19
   16dbc:	strb	r0, [r2, #20]
   16dc0:	mov	r0, r5
   16dc4:	mov	r1, r4
   16dc8:	mov	r2, #10
   16dcc:	mov	r3, #0
   16dd0:	bl	173cc <__assert_fail@plt+0x6478>
   16dd4:	add	r2, r0, r0, lsl #2
   16dd8:	sub	r2, r5, r2, lsl #1
   16ddc:	orr	r2, r2, #48	; 0x30
   16de0:	strb	r2, [r6], #-1
   16de4:	rsbs	r2, r5, #9
   16de8:	mov	r5, r0
   16dec:	rscs	r2, r4, #0
   16df0:	mov	r4, r1
   16df4:	bcc	16dc0 <__assert_fail@plt+0x5e6c>
   16df8:	add	r0, r6, #1
   16dfc:	pop	{r4, r5, r6, sl, fp, pc}
   16e00:	sub	sp, sp, #8
   16e04:	push	{fp, lr}
   16e08:	mov	fp, sp
   16e0c:	sub	sp, sp, #8
   16e10:	str	r3, [fp, #12]
   16e14:	add	r3, fp, #8
   16e18:	str	r2, [fp, #8]
   16e1c:	orr	r3, r3, #4
   16e20:	str	r3, [sp, #4]
   16e24:	bl	10db0 <ioctl@plt>
   16e28:	mov	sp, fp
   16e2c:	pop	{fp, lr}
   16e30:	add	sp, sp, #8
   16e34:	bx	lr
   16e38:	sub	sp, sp, #4
   16e3c:	push	{fp, lr}
   16e40:	mov	fp, sp
   16e44:	sub	sp, sp, #4
   16e48:	str	r3, [fp, #8]
   16e4c:	tst	r2, #64	; 0x40
   16e50:	mov	r3, #0
   16e54:	ldrne	r3, [fp, #8]
   16e58:	bl	10e34 <openat64@plt>
   16e5c:	bl	16ed0 <__assert_fail@plt+0x5f7c>
   16e60:	mov	sp, fp
   16e64:	pop	{fp, lr}
   16e68:	add	sp, sp, #4
   16e6c:	bx	lr
   16e70:	push	{r4, r5, r6, sl, fp, lr}
   16e74:	add	fp, sp, #16
   16e78:	orr	r2, r2, #18688	; 0x4900
   16e7c:	mov	r4, r3
   16e80:	orr	r2, r2, #524288	; 0x80000
   16e84:	bl	16e38 <__assert_fail@plt+0x5ee4>
   16e88:	mov	r5, r0
   16e8c:	mov	r0, #0
   16e90:	cmp	r5, #0
   16e94:	bmi	16ecc <__assert_fail@plt+0x5f78>
   16e98:	mov	r0, r5
   16e9c:	bl	10eac <fdopendir@plt>
   16ea0:	cmp	r0, #0
   16ea4:	beq	16eb0 <__assert_fail@plt+0x5f5c>
   16ea8:	str	r5, [r4]
   16eac:	pop	{r4, r5, r6, sl, fp, pc}
   16eb0:	bl	10e4c <__errno_location@plt>
   16eb4:	ldr	r6, [r0]
   16eb8:	mov	r4, r0
   16ebc:	mov	r0, r5
   16ec0:	bl	10f24 <close@plt>
   16ec4:	mov	r0, #0
   16ec8:	str	r6, [r4]
   16ecc:	pop	{r4, r5, r6, sl, fp, pc}
   16ed0:	push	{r4, r5, r6, r7, fp, lr}
   16ed4:	add	fp, sp, #16
   16ed8:	mov	r4, r0
   16edc:	cmp	r0, #2
   16ee0:	bhi	16f10 <__assert_fail@plt+0x5fbc>
   16ee4:	mov	r0, r4
   16ee8:	bl	172ec <__assert_fail@plt+0x6398>
   16eec:	mov	r5, r0
   16ef0:	bl	10e4c <__errno_location@plt>
   16ef4:	ldr	r7, [r0]
   16ef8:	mov	r6, r0
   16efc:	mov	r0, r4
   16f00:	bl	10f24 <close@plt>
   16f04:	mov	r0, r5
   16f08:	str	r7, [r6]
   16f0c:	pop	{r4, r5, r6, r7, fp, pc}
   16f10:	mov	r0, r4
   16f14:	pop	{r4, r5, r6, r7, fp, pc}
   16f18:	clz	r2, r1
   16f1c:	clz	r3, r0
   16f20:	lsr	r2, r2, #5
   16f24:	lsr	r3, r3, #5
   16f28:	orrs	r2, r3, r2
   16f2c:	movwne	r1, #1
   16f30:	movwne	r0, #1
   16f34:	cmp	r1, #0
   16f38:	beq	16f68 <__assert_fail@plt+0x6014>
   16f3c:	mvn	r2, #-2147483648	; 0x80000000
   16f40:	udiv	r2, r2, r1
   16f44:	cmp	r2, r0
   16f48:	bcs	16f68 <__assert_fail@plt+0x6014>
   16f4c:	push	{fp, lr}
   16f50:	mov	fp, sp
   16f54:	bl	10e4c <__errno_location@plt>
   16f58:	mov	r1, #12
   16f5c:	str	r1, [r0]
   16f60:	mov	r0, #0
   16f64:	pop	{fp, pc}
   16f68:	b	10ce4 <calloc@plt>
   16f6c:	cmp	r0, #0
   16f70:	movweq	r0, #1
   16f74:	cmn	r0, #1
   16f78:	ble	16f80 <__assert_fail@plt+0x602c>
   16f7c:	b	10de0 <malloc@plt>
   16f80:	push	{fp, lr}
   16f84:	mov	fp, sp
   16f88:	bl	10e4c <__errno_location@plt>
   16f8c:	mov	r1, #12
   16f90:	str	r1, [r0]
   16f94:	mov	r0, #0
   16f98:	pop	{fp, pc}
   16f9c:	push	{fp, lr}
   16fa0:	mov	fp, sp
   16fa4:	cmp	r0, #0
   16fa8:	beq	16fc4 <__assert_fail@plt+0x6070>
   16fac:	cmp	r1, #0
   16fb0:	beq	16fd0 <__assert_fail@plt+0x607c>
   16fb4:	cmn	r1, #1
   16fb8:	ble	16fd8 <__assert_fail@plt+0x6084>
   16fbc:	pop	{fp, lr}
   16fc0:	b	10d68 <realloc@plt>
   16fc4:	mov	r0, r1
   16fc8:	pop	{fp, lr}
   16fcc:	b	16f6c <__assert_fail@plt+0x6018>
   16fd0:	bl	13028 <__assert_fail@plt+0x20d4>
   16fd4:	b	16fe4 <__assert_fail@plt+0x6090>
   16fd8:	bl	10e4c <__errno_location@plt>
   16fdc:	mov	r1, #12
   16fe0:	str	r1, [r0]
   16fe4:	mov	r0, #0
   16fe8:	pop	{fp, pc}
   16fec:	movw	r2, #62998	; 0xf616
   16ff0:	mov	r1, #0
   16ff4:	movt	r2, #149	; 0x95
   16ff8:	str	r1, [r0, #16]
   16ffc:	str	r1, [r0, #20]
   17000:	str	r2, [r0, #24]
   17004:	bx	lr
   17008:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1700c:	add	fp, sp, #24
   17010:	ldr	r2, [r0, #24]
   17014:	movw	r3, #62998	; 0xf616
   17018:	movt	r3, #149	; 0x95
   1701c:	cmp	r2, r3
   17020:	bne	170b8 <__assert_fail@plt+0x6164>
   17024:	add	r3, r0, #16
   17028:	add	ip, r0, #8
   1702c:	ldrd	r4, [r3]
   17030:	orrs	r2, r4, r5
   17034:	beq	17070 <__assert_fail@plt+0x611c>
   17038:	ldr	r6, [r1, #96]	; 0x60
   1703c:	ldr	r9, [r1, #100]	; 0x64
   17040:	ldm	r0, {r2, r7}
   17044:	eor	r7, r9, r7
   17048:	eor	r2, r6, r2
   1704c:	orrs	r2, r2, r7
   17050:	bne	17070 <__assert_fail@plt+0x611c>
   17054:	ldm	ip, {r2, r7}
   17058:	ldm	r1, {r6, r9}
   1705c:	eor	r7, r9, r7
   17060:	eor	r2, r6, r2
   17064:	orrs	r2, r2, r7
   17068:	mov	r2, #1
   1706c:	beq	170b0 <__assert_fail@plt+0x615c>
   17070:	adds	r6, r4, #1
   17074:	adc	r7, r5, #0
   17078:	and	r2, r6, r4
   1707c:	strd	r6, [r3]
   17080:	and	r3, r7, r5
   17084:	orrs	r2, r2, r3
   17088:	mov	r2, #0
   1708c:	bne	170b0 <__assert_fail@plt+0x615c>
   17090:	orrs	r3, r6, r7
   17094:	beq	170ac <__assert_fail@plt+0x6158>
   17098:	ldrd	r4, [r1]
   1709c:	strd	r4, [ip]
   170a0:	ldrd	r4, [r1, #96]	; 0x60
   170a4:	strd	r4, [r0]
   170a8:	b	170b0 <__assert_fail@plt+0x615c>
   170ac:	mov	r2, #1
   170b0:	mov	r0, r2
   170b4:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   170b8:	movw	r0, #30980	; 0x7904
   170bc:	movw	r1, #31004	; 0x791c
   170c0:	movw	r3, #31018	; 0x792a
   170c4:	mov	r2, #60	; 0x3c
   170c8:	movt	r0, #1
   170cc:	movt	r1, #1
   170d0:	movt	r3, #1
   170d4:	bl	10f54 <__assert_fail@plt>
   170d8:	sub	sp, sp, #8
   170dc:	push	{r4, r5, r6, r7, fp, lr}
   170e0:	add	fp, sp, #16
   170e4:	sub	sp, sp, #8
   170e8:	mov	r5, r0
   170ec:	add	r0, fp, #8
   170f0:	cmp	r1, #11
   170f4:	str	r2, [fp, #8]
   170f8:	str	r3, [fp, #12]
   170fc:	str	r0, [sp, #4]
   17100:	bhi	1713c <__assert_fail@plt+0x61e8>
   17104:	mov	r0, #1
   17108:	movw	r2, #1300	; 0x514
   1710c:	tst	r2, r0, lsl r1
   17110:	bne	171f4 <__assert_fail@plt+0x62a0>
   17114:	movw	r2, #2570	; 0xa0a
   17118:	tst	r2, r0, lsl r1
   1711c:	bne	17164 <__assert_fail@plt+0x6210>
   17120:	cmp	r1, #0
   17124:	bne	1713c <__assert_fail@plt+0x61e8>
   17128:	ldr	r0, [sp, #4]
   1712c:	add	r1, r0, #4
   17130:	str	r1, [sp, #4]
   17134:	mov	r1, #0
   17138:	b	17200 <__assert_fail@plt+0x62ac>
   1713c:	sub	r0, r1, #1024	; 0x400
   17140:	cmp	r0, #10
   17144:	bhi	171f4 <__assert_fail@plt+0x62a0>
   17148:	mov	r2, #1
   1714c:	movw	r3, #645	; 0x285
   17150:	tst	r3, r2, lsl r0
   17154:	bne	171f4 <__assert_fail@plt+0x62a0>
   17158:	movw	r3, #1282	; 0x502
   1715c:	tst	r3, r2, lsl r0
   17160:	beq	17170 <__assert_fail@plt+0x621c>
   17164:	mov	r0, r5
   17168:	bl	10e7c <fcntl64@plt>
   1716c:	b	1720c <__assert_fail@plt+0x62b8>
   17170:	cmp	r0, #6
   17174:	bne	171f4 <__assert_fail@plt+0x62a0>
   17178:	ldr	r0, [sp, #4]
   1717c:	movw	r7, #33104	; 0x8150
   17180:	movt	r7, #2
   17184:	add	r1, r0, #4
   17188:	str	r1, [sp, #4]
   1718c:	ldr	r6, [r0]
   17190:	ldr	r0, [r7]
   17194:	cmp	r0, #0
   17198:	bmi	17230 <__assert_fail@plt+0x62dc>
   1719c:	mov	r0, r5
   171a0:	movw	r1, #1030	; 0x406
   171a4:	mov	r2, r6
   171a8:	bl	10e7c <fcntl64@plt>
   171ac:	mov	r4, r0
   171b0:	cmn	r0, #1
   171b4:	bgt	17224 <__assert_fail@plt+0x62d0>
   171b8:	bl	10e4c <__errno_location@plt>
   171bc:	ldr	r0, [r0]
   171c0:	cmp	r0, #22
   171c4:	bne	17224 <__assert_fail@plt+0x62d0>
   171c8:	mov	r0, r5
   171cc:	mov	r1, #0
   171d0:	mov	r2, r6
   171d4:	bl	10e7c <fcntl64@plt>
   171d8:	mov	r4, r0
   171dc:	cmp	r0, #0
   171e0:	bmi	17210 <__assert_fail@plt+0x62bc>
   171e4:	mvn	r0, #0
   171e8:	str	r0, [r7]
   171ec:	mov	r0, #1
   171f0:	b	17254 <__assert_fail@plt+0x6300>
   171f4:	ldr	r0, [sp, #4]
   171f8:	add	r2, r0, #4
   171fc:	str	r2, [sp, #4]
   17200:	ldr	r2, [r0]
   17204:	mov	r0, r5
   17208:	bl	10e7c <fcntl64@plt>
   1720c:	mov	r4, r0
   17210:	mov	r0, r4
   17214:	sub	sp, fp, #16
   17218:	pop	{r4, r5, r6, r7, fp, lr}
   1721c:	add	sp, sp, #8
   17220:	bx	lr
   17224:	mov	r0, #1
   17228:	str	r0, [r7]
   1722c:	b	17210 <__assert_fail@plt+0x62bc>
   17230:	mov	r0, r5
   17234:	mov	r1, #0
   17238:	mov	r2, r6
   1723c:	bl	10e7c <fcntl64@plt>
   17240:	mov	r4, r0
   17244:	ldr	r0, [r7]
   17248:	add	r0, r0, #1
   1724c:	clz	r0, r0
   17250:	lsr	r0, r0, #5
   17254:	cmp	r0, #0
   17258:	beq	17210 <__assert_fail@plt+0x62bc>
   1725c:	cmp	r4, #0
   17260:	bmi	17210 <__assert_fail@plt+0x62bc>
   17264:	mov	r0, r4
   17268:	mov	r1, #1
   1726c:	bl	10e7c <fcntl64@plt>
   17270:	cmp	r0, #0
   17274:	bmi	17290 <__assert_fail@plt+0x633c>
   17278:	orr	r2, r0, #1
   1727c:	mov	r0, r4
   17280:	mov	r1, #2
   17284:	bl	10e7c <fcntl64@plt>
   17288:	cmn	r0, #1
   1728c:	bne	17210 <__assert_fail@plt+0x62bc>
   17290:	bl	10e4c <__errno_location@plt>
   17294:	ldr	r6, [r0]
   17298:	mov	r5, r0
   1729c:	mov	r0, r4
   172a0:	bl	10f24 <close@plt>
   172a4:	str	r6, [r5]
   172a8:	mvn	r4, #0
   172ac:	b	17210 <__assert_fail@plt+0x62bc>
   172b0:	sub	sp, sp, #8
   172b4:	push	{fp, lr}
   172b8:	mov	fp, sp
   172bc:	sub	sp, sp, #8
   172c0:	str	r2, [fp, #8]
   172c4:	str	r3, [fp, #12]
   172c8:	tst	r1, #64	; 0x40
   172cc:	mov	r2, #0
   172d0:	ldrne	r2, [fp, #8]
   172d4:	bl	10dc8 <open64@plt>
   172d8:	bl	16ed0 <__assert_fail@plt+0x5f7c>
   172dc:	mov	sp, fp
   172e0:	pop	{fp, lr}
   172e4:	add	sp, sp, #8
   172e8:	bx	lr
   172ec:	mov	r1, #0
   172f0:	mov	r2, #3
   172f4:	b	170d8 <__assert_fail@plt+0x6184>
   172f8:	cmp	r3, #0
   172fc:	cmpeq	r2, #0
   17300:	bne	17324 <__assert_fail@plt+0x63d0>
   17304:	cmp	r1, #0
   17308:	movlt	r1, #-2147483648	; 0x80000000
   1730c:	movlt	r0, #0
   17310:	blt	17320 <__assert_fail@plt+0x63cc>
   17314:	cmpeq	r0, #0
   17318:	mvnne	r1, #-2147483648	; 0x80000000
   1731c:	mvnne	r0, #0
   17320:	b	17408 <__assert_fail@plt+0x64b4>
   17324:	sub	sp, sp, #8
   17328:	push	{sp, lr}
   1732c:	cmp	r1, #0
   17330:	blt	17350 <__assert_fail@plt+0x63fc>
   17334:	cmp	r3, #0
   17338:	blt	17384 <__assert_fail@plt+0x6430>
   1733c:	bl	17418 <__assert_fail@plt+0x64c4>
   17340:	ldr	lr, [sp, #4]
   17344:	add	sp, sp, #8
   17348:	pop	{r2, r3}
   1734c:	bx	lr
   17350:	rsbs	r0, r0, #0
   17354:	sbc	r1, r1, r1, lsl #1
   17358:	cmp	r3, #0
   1735c:	blt	173a8 <__assert_fail@plt+0x6454>
   17360:	bl	17418 <__assert_fail@plt+0x64c4>
   17364:	ldr	lr, [sp, #4]
   17368:	add	sp, sp, #8
   1736c:	pop	{r2, r3}
   17370:	rsbs	r0, r0, #0
   17374:	sbc	r1, r1, r1, lsl #1
   17378:	rsbs	r2, r2, #0
   1737c:	sbc	r3, r3, r3, lsl #1
   17380:	bx	lr
   17384:	rsbs	r2, r2, #0
   17388:	sbc	r3, r3, r3, lsl #1
   1738c:	bl	17418 <__assert_fail@plt+0x64c4>
   17390:	ldr	lr, [sp, #4]
   17394:	add	sp, sp, #8
   17398:	pop	{r2, r3}
   1739c:	rsbs	r0, r0, #0
   173a0:	sbc	r1, r1, r1, lsl #1
   173a4:	bx	lr
   173a8:	rsbs	r2, r2, #0
   173ac:	sbc	r3, r3, r3, lsl #1
   173b0:	bl	17418 <__assert_fail@plt+0x64c4>
   173b4:	ldr	lr, [sp, #4]
   173b8:	add	sp, sp, #8
   173bc:	pop	{r2, r3}
   173c0:	rsbs	r2, r2, #0
   173c4:	sbc	r3, r3, r3, lsl #1
   173c8:	bx	lr
   173cc:	cmp	r3, #0
   173d0:	cmpeq	r2, #0
   173d4:	bne	173ec <__assert_fail@plt+0x6498>
   173d8:	cmp	r1, #0
   173dc:	cmpeq	r0, #0
   173e0:	mvnne	r1, #0
   173e4:	mvnne	r0, #0
   173e8:	b	17408 <__assert_fail@plt+0x64b4>
   173ec:	sub	sp, sp, #8
   173f0:	push	{sp, lr}
   173f4:	bl	17418 <__assert_fail@plt+0x64c4>
   173f8:	ldr	lr, [sp, #4]
   173fc:	add	sp, sp, #8
   17400:	pop	{r2, r3}
   17404:	bx	lr
   17408:	push	{r1, lr}
   1740c:	mov	r0, #8
   17410:	bl	10cf0 <raise@plt>
   17414:	pop	{r1, pc}
   17418:	cmp	r1, r3
   1741c:	cmpeq	r0, r2
   17420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17424:	mov	r4, r0
   17428:	movcc	r0, #0
   1742c:	mov	r5, r1
   17430:	ldr	lr, [sp, #36]	; 0x24
   17434:	movcc	r1, r0
   17438:	bcc	17534 <__assert_fail@plt+0x65e0>
   1743c:	cmp	r3, #0
   17440:	clzeq	ip, r2
   17444:	clzne	ip, r3
   17448:	addeq	ip, ip, #32
   1744c:	cmp	r5, #0
   17450:	clzeq	r1, r4
   17454:	addeq	r1, r1, #32
   17458:	clzne	r1, r5
   1745c:	sub	ip, ip, r1
   17460:	sub	sl, ip, #32
   17464:	lsl	r9, r3, ip
   17468:	rsb	fp, ip, #32
   1746c:	orr	r9, r9, r2, lsl sl
   17470:	orr	r9, r9, r2, lsr fp
   17474:	lsl	r8, r2, ip
   17478:	cmp	r5, r9
   1747c:	cmpeq	r4, r8
   17480:	movcc	r0, #0
   17484:	movcc	r1, r0
   17488:	bcc	174a4 <__assert_fail@plt+0x6550>
   1748c:	mov	r0, #1
   17490:	subs	r4, r4, r8
   17494:	lsl	r1, r0, sl
   17498:	orr	r1, r1, r0, lsr fp
   1749c:	lsl	r0, r0, ip
   174a0:	sbc	r5, r5, r9
   174a4:	cmp	ip, #0
   174a8:	beq	17534 <__assert_fail@plt+0x65e0>
   174ac:	lsr	r6, r8, #1
   174b0:	orr	r6, r6, r9, lsl #31
   174b4:	lsr	r7, r9, #1
   174b8:	mov	r2, ip
   174bc:	b	174e0 <__assert_fail@plt+0x658c>
   174c0:	subs	r3, r4, r6
   174c4:	sbc	r8, r5, r7
   174c8:	adds	r3, r3, r3
   174cc:	adc	r8, r8, r8
   174d0:	adds	r4, r3, #1
   174d4:	adc	r5, r8, #0
   174d8:	subs	r2, r2, #1
   174dc:	beq	174fc <__assert_fail@plt+0x65a8>
   174e0:	cmp	r5, r7
   174e4:	cmpeq	r4, r6
   174e8:	bcs	174c0 <__assert_fail@plt+0x656c>
   174ec:	adds	r4, r4, r4
   174f0:	adc	r5, r5, r5
   174f4:	subs	r2, r2, #1
   174f8:	bne	174e0 <__assert_fail@plt+0x658c>
   174fc:	lsr	r3, r4, ip
   17500:	orr	r3, r3, r5, lsl fp
   17504:	lsr	r2, r5, ip
   17508:	orr	r3, r3, r5, lsr sl
   1750c:	adds	r0, r0, r4
   17510:	mov	r4, r3
   17514:	lsl	r3, r2, ip
   17518:	orr	r3, r3, r4, lsl sl
   1751c:	lsl	ip, r4, ip
   17520:	orr	r3, r3, r4, lsr fp
   17524:	adc	r1, r1, r5
   17528:	subs	r0, r0, ip
   1752c:	mov	r5, r2
   17530:	sbc	r1, r1, r3
   17534:	cmp	lr, #0
   17538:	strdne	r4, [lr]
   1753c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17540:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17544:	mov	r7, r0
   17548:	ldr	r6, [pc, #72]	; 17598 <__assert_fail@plt+0x6644>
   1754c:	ldr	r5, [pc, #72]	; 1759c <__assert_fail@plt+0x6648>
   17550:	add	r6, pc, r6
   17554:	add	r5, pc, r5
   17558:	sub	r6, r6, r5
   1755c:	mov	r8, r1
   17560:	mov	r9, r2
   17564:	bl	10cb8 <fstatfs64@plt-0x20>
   17568:	asrs	r6, r6, #2
   1756c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17570:	mov	r4, #0
   17574:	add	r4, r4, #1
   17578:	ldr	r3, [r5], #4
   1757c:	mov	r2, r9
   17580:	mov	r1, r8
   17584:	mov	r0, r7
   17588:	blx	r3
   1758c:	cmp	r6, r4
   17590:	bne	17574 <__assert_fail@plt+0x6620>
   17594:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17598:			; <UNDEFINED> instruction: 0x000109b4
   1759c:	andeq	r0, r1, ip, lsr #19
   175a0:	bx	lr
   175a4:	mov	r2, r1
   175a8:	mov	r1, r0
   175ac:	mov	r0, #3
   175b0:	b	10ef4 <__xstat64@plt>
   175b4:	mov	r2, r1
   175b8:	mov	r1, r0
   175bc:	mov	r0, #3
   175c0:	b	10d8c <__fxstat64@plt>
   175c4:	mov	r2, r1
   175c8:	mov	r1, r0
   175cc:	mov	r0, #3
   175d0:	b	10f30 <__lxstat64@plt>
   175d4:	push	{lr}		; (str lr, [sp, #-4]!)
   175d8:	sub	sp, sp, #12
   175dc:	str	r3, [sp]
   175e0:	mov	r3, r2
   175e4:	mov	r2, r1
   175e8:	mov	r1, r0
   175ec:	mov	r0, #3
   175f0:	bl	10d80 <__fxstatat64@plt>
   175f4:	add	sp, sp, #12
   175f8:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

000175fc <.fini>:
   175fc:	push	{r3, lr}
   17600:	pop	{r3, pc}
