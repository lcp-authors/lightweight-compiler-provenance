
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010de8 <.init>:
   10de8:	push	{r3, lr}
   10dec:	bl	110a8 <__assert_fail@plt+0x48>
   10df0:	pop	{r3, pc}

Disassembly of section .plt:

00010df4 <calloc@plt-0x14>:
   10df4:	push	{lr}		; (str lr, [sp, #-4]!)
   10df8:	ldr	lr, [pc, #4]	; 10e04 <calloc@plt-0x4>
   10dfc:	add	lr, pc, lr
   10e00:	ldr	pc, [lr, #8]!
   10e04:	strdeq	r6, [r1], -ip

00010e08 <calloc@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #508]!	; 0x1fc

00010e14 <fputs_unlocked@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #500]!	; 0x1f4

00010e20 <raise@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #492]!	; 0x1ec

00010e2c <strcmp@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #484]!	; 0x1e4

00010e38 <posix_fadvise64@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #476]!	; 0x1dc

00010e44 <fflush@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #468]!	; 0x1d4

00010e50 <free@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #460]!	; 0x1cc

00010e5c <_exit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #452]!	; 0x1c4

00010e68 <memcpy@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #444]!	; 0x1bc

00010e74 <mbsinit@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #436]!	; 0x1b4

00010e80 <fwrite_unlocked@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #428]!	; 0x1ac

00010e8c <memcmp@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #420]!	; 0x1a4

00010e98 <getc_unlocked@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #412]!	; 0x19c

00010ea4 <dcgettext@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #404]!	; 0x194

00010eb0 <realloc@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #396]!	; 0x18c

00010ebc <textdomain@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #388]!	; 0x184

00010ec8 <iswprint@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #380]!	; 0x17c

00010ed4 <fwrite@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #372]!	; 0x174

00010ee0 <lseek64@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #364]!	; 0x16c

00010eec <__ctype_get_mb_cur_max@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #356]!	; 0x164

00010ef8 <__fpending@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #348]!	; 0x15c

00010f04 <ferror_unlocked@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #340]!	; 0x154

00010f10 <mbrtowc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #332]!	; 0x14c

00010f1c <error@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #324]!	; 0x144

00010f28 <malloc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #316]!	; 0x13c

00010f34 <__libc_start_main@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #308]!	; 0x134

00010f40 <__freading@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #300]!	; 0x12c

00010f4c <__gmon_start__@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #292]!	; 0x124

00010f58 <getopt_long@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #284]!	; 0x11c

00010f64 <__ctype_b_loc@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #276]!	; 0x114

00010f70 <exit@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #268]!	; 0x10c

00010f7c <strlen@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #260]!	; 0x104

00010f88 <__errno_location@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #252]!	; 0xfc

00010f94 <__cxa_atexit@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #244]!	; 0xf4

00010fa0 <memset@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #236]!	; 0xec

00010fac <__printf_chk@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #228]!	; 0xe4

00010fb8 <fileno@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #220]!	; 0xdc

00010fc4 <__fprintf_chk@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #212]!	; 0xd4

00010fd0 <fclose@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #204]!	; 0xcc

00010fdc <fseeko64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #196]!	; 0xc4

00010fe8 <setlocale@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #188]!	; 0xbc

00010ff4 <strrchr@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #180]!	; 0xb4

00011000 <nl_langinfo@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #172]!	; 0xac

0001100c <clearerr_unlocked@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #164]!	; 0xa4

00011018 <fopen64@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #156]!	; 0x9c

00011024 <bindtextdomain@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #148]!	; 0x94

00011030 <strncmp@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #140]!	; 0x8c

0001103c <abort@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #132]!	; 0x84

00011048 <putchar_unlocked@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #124]!	; 0x7c

00011054 <strspn@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #116]!	; 0x74

00011060 <__assert_fail@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #108]!	; 0x6c

Disassembly of section .text:

0001106c <.text>:
   1106c:	mov	fp, #0
   11070:	mov	lr, #0
   11074:	pop	{r1}		; (ldr r1, [sp], #4)
   11078:	mov	r2, sp
   1107c:	push	{r2}		; (str r2, [sp, #-4]!)
   11080:	push	{r0}		; (str r0, [sp, #-4]!)
   11084:	ldr	ip, [pc, #16]	; 1109c <__assert_fail@plt+0x3c>
   11088:	push	{ip}		; (str ip, [sp, #-4]!)
   1108c:	ldr	r0, [pc, #12]	; 110a0 <__assert_fail@plt+0x40>
   11090:	ldr	r3, [pc, #12]	; 110a4 <__assert_fail@plt+0x44>
   11094:	bl	10f34 <__libc_start_main@plt>
   11098:	bl	1103c <abort@plt>
   1109c:	andeq	r5, r1, ip, lsl #10
   110a0:	andeq	r1, r1, r4, asr r4
   110a4:	andeq	r5, r1, ip, lsr #9
   110a8:	ldr	r3, [pc, #20]	; 110c4 <__assert_fail@plt+0x64>
   110ac:	ldr	r2, [pc, #20]	; 110c8 <__assert_fail@plt+0x68>
   110b0:	add	r3, pc, r3
   110b4:	ldr	r2, [r3, r2]
   110b8:	cmp	r2, #0
   110bc:	bxeq	lr
   110c0:	b	10f4c <__gmon_start__@plt>
   110c4:	andeq	r5, r1, r8, asr #30
   110c8:	ldrdeq	r0, [r0], -r8
   110cc:	ldr	r0, [pc, #24]	; 110ec <__assert_fail@plt+0x8c>
   110d0:	ldr	r3, [pc, #24]	; 110f0 <__assert_fail@plt+0x90>
   110d4:	cmp	r3, r0
   110d8:	bxeq	lr
   110dc:	ldr	r3, [pc, #16]	; 110f4 <__assert_fail@plt+0x94>
   110e0:	cmp	r3, #0
   110e4:	bxeq	lr
   110e8:	bx	r3
   110ec:	andeq	r7, r2, r8, lsr r1
   110f0:	andeq	r7, r2, r8, lsr r1
   110f4:	andeq	r0, r0, r0
   110f8:	ldr	r0, [pc, #36]	; 11124 <__assert_fail@plt+0xc4>
   110fc:	ldr	r1, [pc, #36]	; 11128 <__assert_fail@plt+0xc8>
   11100:	sub	r1, r1, r0
   11104:	asr	r1, r1, #2
   11108:	add	r1, r1, r1, lsr #31
   1110c:	asrs	r1, r1, #1
   11110:	bxeq	lr
   11114:	ldr	r3, [pc, #16]	; 1112c <__assert_fail@plt+0xcc>
   11118:	cmp	r3, #0
   1111c:	bxeq	lr
   11120:	bx	r3
   11124:	andeq	r7, r2, r8, lsr r1
   11128:	andeq	r7, r2, r8, lsr r1
   1112c:	andeq	r0, r0, r0
   11130:	push	{r4, lr}
   11134:	ldr	r4, [pc, #24]	; 11154 <__assert_fail@plt+0xf4>
   11138:	ldrb	r3, [r4]
   1113c:	cmp	r3, #0
   11140:	popne	{r4, pc}
   11144:	bl	110cc <__assert_fail@plt+0x6c>
   11148:	mov	r3, #1
   1114c:	strb	r3, [r4]
   11150:	pop	{r4, pc}
   11154:	andeq	r7, r2, ip, asr r1
   11158:	b	110f8 <__assert_fail@plt+0x98>
   1115c:	push	{fp, lr}
   11160:	mov	fp, sp
   11164:	mov	r4, r0
   11168:	cmp	r0, #0
   1116c:	bne	1122c <__assert_fail@plt+0x1cc>
   11170:	movw	r1, #21851	; 0x555b
   11174:	movt	r1, #1
   11178:	mov	r0, #0
   1117c:	mov	r2, #5
   11180:	bl	10ea4 <dcgettext@plt>
   11184:	mov	r1, r0
   11188:	movw	r0, #29092	; 0x71a4
   1118c:	movt	r0, #2
   11190:	ldr	r2, [r0]
   11194:	mov	r0, #1
   11198:	bl	10fac <__printf_chk@plt>
   1119c:	movw	r1, #21884	; 0x557c
   111a0:	movt	r1, #1
   111a4:	mov	r0, #0
   111a8:	mov	r2, #5
   111ac:	bl	10ea4 <dcgettext@plt>
   111b0:	movw	r5, #29012	; 0x7154
   111b4:	movt	r5, #2
   111b8:	ldr	r1, [r5]
   111bc:	bl	10e14 <fputs_unlocked@plt>
   111c0:	bl	11270 <__assert_fail@plt+0x210>
   111c4:	bl	112a0 <__assert_fail@plt+0x240>
   111c8:	movw	r1, #21950	; 0x55be
   111cc:	movt	r1, #1
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	bl	10ea4 <dcgettext@plt>
   111dc:	ldr	r1, [r5]
   111e0:	bl	10e14 <fputs_unlocked@plt>
   111e4:	bl	12418 <__assert_fail@plt+0x13b8>
   111e8:	movw	r1, #22171	; 0x569b
   111ec:	movt	r1, #1
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	bl	10ea4 <dcgettext@plt>
   111fc:	ldr	r1, [r5]
   11200:	bl	10e14 <fputs_unlocked@plt>
   11204:	movw	r1, #22216	; 0x56c8
   11208:	movt	r1, #1
   1120c:	mov	r0, #0
   11210:	mov	r2, #5
   11214:	bl	10ea4 <dcgettext@plt>
   11218:	ldr	r1, [r5]
   1121c:	bl	10e14 <fputs_unlocked@plt>
   11220:	bl	112d0 <__assert_fail@plt+0x270>
   11224:	mov	r0, r4
   11228:	bl	10f70 <exit@plt>
   1122c:	movw	r0, #29000	; 0x7148
   11230:	movt	r0, #2
   11234:	ldr	r5, [r0]
   11238:	movw	r1, #21812	; 0x5534
   1123c:	movt	r1, #1
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	bl	10ea4 <dcgettext@plt>
   1124c:	mov	r2, r0
   11250:	movw	r0, #29092	; 0x71a4
   11254:	movt	r0, #2
   11258:	ldr	r3, [r0]
   1125c:	mov	r0, r5
   11260:	mov	r1, #1
   11264:	bl	10fc4 <__fprintf_chk@plt>
   11268:	mov	r0, r4
   1126c:	bl	10f70 <exit@plt>
   11270:	push	{fp, lr}
   11274:	mov	fp, sp
   11278:	movw	r1, #22376	; 0x5768
   1127c:	movt	r1, #1
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	bl	10ea4 <dcgettext@plt>
   1128c:	movw	r1, #29012	; 0x7154
   11290:	movt	r1, #2
   11294:	ldr	r1, [r1]
   11298:	pop	{fp, lr}
   1129c:	b	10e14 <fputs_unlocked@plt>
   112a0:	push	{fp, lr}
   112a4:	mov	fp, sp
   112a8:	movw	r1, #22432	; 0x57a0
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10ea4 <dcgettext@plt>
   112bc:	movw	r1, #29012	; 0x7154
   112c0:	movt	r1, #2
   112c4:	ldr	r1, [r1]
   112c8:	pop	{fp, lr}
   112cc:	b	10e14 <fputs_unlocked@plt>
   112d0:	push	{r4, r5, fp, lr}
   112d4:	add	fp, sp, #8
   112d8:	sub	sp, sp, #56	; 0x38
   112dc:	movw	r0, #22984	; 0x59c8
   112e0:	movt	r0, #1
   112e4:	add	r1, r0, #32
   112e8:	mov	r5, sp
   112ec:	mov	r2, #48	; 0x30
   112f0:	vld1.64	{d16-d17}, [r1]
   112f4:	add	r1, r5, #32
   112f8:	add	r3, r0, #16
   112fc:	vld1.64	{d18-d19}, [r0], r2
   11300:	vld1.64	{d20-d21}, [r3]
   11304:	vldr	d22, [r0]
   11308:	vst1.64	{d16-d17}, [r1]
   1130c:	add	r0, r5, #16
   11310:	vst1.64	{d20-d21}, [r0]
   11314:	mov	r0, r5
   11318:	vst1.64	{d18-d19}, [r0], r2
   1131c:	vstr	d22, [r0]
   11320:	ldr	r1, [sp]
   11324:	cmp	r1, #0
   11328:	beq	11350 <__assert_fail@plt+0x2f0>
   1132c:	mov	r5, sp
   11330:	movw	r4, #22270	; 0x56fe
   11334:	movt	r4, #1
   11338:	mov	r0, r4
   1133c:	bl	10e2c <strcmp@plt>
   11340:	cmp	r0, #0
   11344:	ldrne	r1, [r5, #8]!
   11348:	cmpne	r1, #0
   1134c:	bne	11338 <__assert_fail@plt+0x2d8>
   11350:	ldr	r4, [r5, #4]
   11354:	movw	r1, #22602	; 0x584a
   11358:	movt	r1, #1
   1135c:	mov	r0, #0
   11360:	mov	r2, #5
   11364:	bl	10ea4 <dcgettext@plt>
   11368:	mov	r1, r0
   1136c:	movw	r2, #22318	; 0x572e
   11370:	movt	r2, #1
   11374:	movw	r3, #22625	; 0x5861
   11378:	movt	r3, #1
   1137c:	mov	r0, #1
   11380:	bl	10fac <__printf_chk@plt>
   11384:	movw	r5, #22270	; 0x56fe
   11388:	movt	r5, #1
   1138c:	cmp	r4, #0
   11390:	moveq	r4, r5
   11394:	mov	r0, #5
   11398:	mov	r1, #0
   1139c:	bl	10fe8 <setlocale@plt>
   113a0:	cmp	r0, #0
   113a4:	beq	113e4 <__assert_fail@plt+0x384>
   113a8:	movw	r1, #22665	; 0x5889
   113ac:	movt	r1, #1
   113b0:	mov	r2, #3
   113b4:	bl	11030 <strncmp@plt>
   113b8:	cmp	r0, #0
   113bc:	beq	113e4 <__assert_fail@plt+0x384>
   113c0:	movw	r1, #22669	; 0x588d
   113c4:	movt	r1, #1
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	bl	10ea4 <dcgettext@plt>
   113d4:	movw	r1, #29012	; 0x7154
   113d8:	movt	r1, #2
   113dc:	ldr	r1, [r1]
   113e0:	bl	10e14 <fputs_unlocked@plt>
   113e4:	movw	r1, #22740	; 0x58d4
   113e8:	movt	r1, #1
   113ec:	mov	r0, #0
   113f0:	mov	r2, #5
   113f4:	bl	10ea4 <dcgettext@plt>
   113f8:	mov	r1, r0
   113fc:	movw	r2, #22625	; 0x5861
   11400:	movt	r2, #1
   11404:	mov	r0, #1
   11408:	mov	r3, r5
   1140c:	bl	10fac <__printf_chk@plt>
   11410:	movw	r1, #22767	; 0x58ef
   11414:	movt	r1, #1
   11418:	mov	r0, #0
   1141c:	mov	r2, #5
   11420:	bl	10ea4 <dcgettext@plt>
   11424:	mov	r1, r0
   11428:	movw	r0, #22535	; 0x5807
   1142c:	movt	r0, #1
   11430:	movw	r3, #22817	; 0x5921
   11434:	movt	r3, #1
   11438:	cmp	r4, r5
   1143c:	moveq	r3, r0
   11440:	mov	r0, #1
   11444:	mov	r2, r4
   11448:	bl	10fac <__printf_chk@plt>
   1144c:	sub	sp, fp, #8
   11450:	pop	{r4, r5, fp, pc}
   11454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11458:	add	fp, sp, #28
   1145c:	sub	sp, sp, #12
   11460:	mov	r4, r1
   11464:	mov	r5, r0
   11468:	ldr	r0, [r1]
   1146c:	bl	12780 <__assert_fail@plt+0x1720>
   11470:	movw	r1, #22817	; 0x5921
   11474:	movt	r1, #1
   11478:	mov	r0, #6
   1147c:	bl	10fe8 <setlocale@plt>
   11480:	movw	r6, #22322	; 0x5732
   11484:	movt	r6, #1
   11488:	movw	r1, #22279	; 0x5707
   1148c:	movt	r1, #1
   11490:	mov	r0, r6
   11494:	bl	11024 <bindtextdomain@plt>
   11498:	mov	r0, r6
   1149c:	bl	10ebc <textdomain@plt>
   114a0:	movw	r0, #9348	; 0x2484
   114a4:	movt	r0, #1
   114a8:	bl	15510 <__assert_fail@plt+0x44b0>
   114ac:	movw	r8, #22303	; 0x571f
   114b0:	movt	r8, #1
   114b4:	movw	r9, #22888	; 0x5968
   114b8:	movt	r9, #1
   114bc:	mov	sl, #0
   114c0:	mov	r0, #0
   114c4:	b	114cc <__assert_fail@plt+0x46c>
   114c8:	mov	r0, #1
   114cc:	str	r0, [sp, #8]
   114d0:	b	114e4 <__assert_fail@plt+0x484>
   114d4:	movw	r0, #29024	; 0x7160
   114d8:	movt	r0, #2
   114dc:	mov	r1, #1
   114e0:	strb	r1, [r0]
   114e4:	mov	r0, #0
   114e8:	str	r0, [sp]
   114ec:	mov	r0, r5
   114f0:	mov	r1, r4
   114f4:	mov	r2, r8
   114f8:	mov	r3, r9
   114fc:	bl	10f58 <getopt_long@plt>
   11500:	cmp	r0, #96	; 0x60
   11504:	ble	11524 <__assert_fail@plt+0x4c4>
   11508:	cmp	r0, #97	; 0x61
   1150c:	beq	114d4 <__assert_fail@plt+0x474>
   11510:	cmp	r0, #116	; 0x74
   11514:	beq	11570 <__assert_fail@plt+0x510>
   11518:	cmp	r0, #256	; 0x100
   1151c:	beq	114c8 <__assert_fail@plt+0x468>
   11520:	b	1159c <__assert_fail@plt+0x53c>
   11524:	cmp	r0, #43	; 0x2b
   11528:	bgt	11548 <__assert_fail@plt+0x4e8>
   1152c:	cmn	r0, #1
   11530:	beq	1161c <__assert_fail@plt+0x5bc>
   11534:	cmn	r0, #3
   11538:	beq	1168c <__assert_fail@plt+0x62c>
   1153c:	cmn	r0, #2
   11540:	bne	1159c <__assert_fail@plt+0x53c>
   11544:	b	116d4 <__assert_fail@plt+0x674>
   11548:	cmp	r0, #44	; 0x2c
   1154c:	bne	11594 <__assert_fail@plt+0x534>
   11550:	tst	sl, #1
   11554:	mov	sl, #0
   11558:	beq	114e4 <__assert_fail@plt+0x484>
   1155c:	mov	r0, r6
   11560:	mov	r1, r7
   11564:	bl	11a04 <__assert_fail@plt+0x9a4>
   11568:	mov	sl, #0
   1156c:	b	114e4 <__assert_fail@plt+0x484>
   11570:	movw	r0, #29024	; 0x7160
   11574:	movt	r0, #2
   11578:	mov	r1, #1
   1157c:	strb	r1, [r0]
   11580:	movw	r0, #29016	; 0x7158
   11584:	movt	r0, #2
   11588:	ldr	r0, [r0]
   1158c:	bl	11b14 <__assert_fail@plt+0xab4>
   11590:	b	114e4 <__assert_fail@plt+0x484>
   11594:	cmp	r0, #63	; 0x3f
   11598:	beq	11684 <__assert_fail@plt+0x624>
   1159c:	ands	r1, sl, #1
   115a0:	moveq	r7, r1
   115a4:	moveq	r6, r1
   115a8:	movw	r1, #39321	; 0x9999
   115ac:	movt	r1, #39321	; 0x9999
   115b0:	subs	r1, r1, r6
   115b4:	movw	r1, #39321	; 0x9999
   115b8:	movt	r1, #6553	; 0x1999
   115bc:	sbcs	r1, r1, r7
   115c0:	bcc	115f8 <__assert_fail@plt+0x598>
   115c4:	mov	r1, #10
   115c8:	umull	r1, r2, r6, r1
   115cc:	add	r3, r7, r7, lsl #2
   115d0:	add	r2, r2, r3, lsl #1
   115d4:	sub	r0, r0, #48	; 0x30
   115d8:	adds	r1, r1, r0
   115dc:	adc	r0, r2, r0, asr #31
   115e0:	mov	sl, #1
   115e4:	subs	r2, r1, r6
   115e8:	sbcs	r2, r0, r7
   115ec:	mov	r6, r1
   115f0:	mov	r7, r0
   115f4:	bcs	114e4 <__assert_fail@plt+0x484>
   115f8:	movw	r1, #22348	; 0x574c
   115fc:	movt	r1, #1
   11600:	mov	r0, #0
   11604:	mov	r2, #5
   11608:	bl	10ea4 <dcgettext@plt>
   1160c:	mov	r2, r0
   11610:	mov	r0, #1
   11614:	mov	r1, #0
   11618:	bl	10f1c <error@plt>
   1161c:	ldr	r0, [sp, #8]
   11620:	tst	r0, #1
   11624:	movne	r0, #0
   11628:	movwne	r1, #29024	; 0x7160
   1162c:	movtne	r1, #2
   11630:	strbne	r0, [r1]
   11634:	tst	sl, #1
   11638:	beq	11648 <__assert_fail@plt+0x5e8>
   1163c:	mov	r0, r6
   11640:	mov	r1, r7
   11644:	bl	11a04 <__assert_fail@plt+0x9a4>
   11648:	bl	11f3c <__assert_fail@plt+0xedc>
   1164c:	movw	r0, #28992	; 0x7140
   11650:	movt	r0, #2
   11654:	ldr	r1, [r0]
   11658:	mov	r0, #0
   1165c:	cmp	r1, r5
   11660:	addlt	r0, r4, r1, lsl #2
   11664:	bl	121ac <__assert_fail@plt+0x114c>
   11668:	bl	116dc <__assert_fail@plt+0x67c>
   1166c:	bl	123c8 <__assert_fail@plt+0x1368>
   11670:	movw	r0, #29028	; 0x7164
   11674:	movt	r0, #2
   11678:	ldr	r0, [r0]
   1167c:	sub	sp, fp, #28
   11680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11684:	mov	r0, #1
   11688:	bl	1115c <__assert_fail@plt+0xfc>
   1168c:	movw	r0, #28912	; 0x70f0
   11690:	movt	r0, #2
   11694:	ldr	r3, [r0]
   11698:	movw	r0, #29012	; 0x7154
   1169c:	movt	r0, #2
   116a0:	ldr	r0, [r0]
   116a4:	mov	r1, #0
   116a8:	movw	r2, #22332	; 0x573c
   116ac:	movt	r2, #1
   116b0:	str	r2, [sp]
   116b4:	str	r1, [sp, #4]
   116b8:	movw	r1, #22270	; 0x56fe
   116bc:	movt	r1, #1
   116c0:	movw	r2, #22318	; 0x572e
   116c4:	movt	r2, #1
   116c8:	bl	14788 <__assert_fail@plt+0x3728>
   116cc:	mov	r0, #0
   116d0:	bl	10f70 <exit@plt>
   116d4:	mov	r0, #0
   116d8:	bl	1115c <__assert_fail@plt+0xfc>
   116dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116e0:	add	fp, sp, #28
   116e4:	sub	sp, sp, #28
   116e8:	mov	r0, #0
   116ec:	bl	121dc <__assert_fail@plt+0x117c>
   116f0:	cmp	r0, #0
   116f4:	beq	119ac <__assert_fail@plt+0x94c>
   116f8:	mov	r4, r0
   116fc:	movw	r0, #29400	; 0x72d8
   11700:	movt	r0, #2
   11704:	ldr	r0, [r0]
   11708:	bl	14890 <__assert_fail@plt+0x3830>
   1170c:	str	r0, [sp]
   11710:	mov	r5, #0
   11714:	str	r5, [sp, #24]
   11718:	mov	r0, #1
   1171c:	str	r0, [sp, #16]
   11720:	mov	r9, #0
   11724:	mov	r0, #0
   11728:	str	r0, [sp, #4]
   1172c:	mov	r6, #1
   11730:	mov	r8, #0
   11734:	b	117cc <__assert_fail@plt+0x76c>
   11738:	adds	r5, r5, #1
   1173c:	ldr	r0, [sp, #12]
   11740:	eor	r0, r5, r0
   11744:	adc	r9, r9, #0
   11748:	eor	r1, r9, sl
   1174c:	orrs	r0, r0, r1
   11750:	mov	r1, r0
   11754:	movwne	r1, #1
   11758:	mvn	r2, r6
   1175c:	orr	r1, r2, r1
   11760:	tst	r1, #1
   11764:	bne	1179c <__assert_fail@plt+0x73c>
   11768:	str	r5, [sp, #12]
   1176c:	mov	sl, r9
   11770:	ldr	r0, [sp]
   11774:	mov	r1, #9
   11778:	strb	r1, [r0]
   1177c:	ldr	r0, [sp, #4]
   11780:	and	r8, r0, #1
   11784:	mov	r7, #9
   11788:	ldr	r6, [sp, #8]
   1178c:	mov	r9, r3
   11790:	cmp	r8, #0
   11794:	bne	11910 <__assert_fail@plt+0x8b0>
   11798:	b	11958 <__assert_fail@plt+0x8f8>
   1179c:	ldr	r1, [sp]
   117a0:	strb	r7, [r1, r8]
   117a4:	clz	r0, r0
   117a8:	lsr	r0, r0, #5
   117ac:	ldr	r1, [sp, #4]
   117b0:	orr	r1, r1, r0
   117b4:	str	r1, [sp, #4]
   117b8:	add	r8, r8, #1
   117bc:	mov	r0, #1
   117c0:	str	r0, [sp, #16]
   117c4:	mov	r6, #1
   117c8:	b	11998 <__assert_fail@plt+0x938>
   117cc:	mov	r0, r4
   117d0:	bl	10e98 <getc_unlocked@plt>
   117d4:	mov	r7, r0
   117d8:	cmn	r0, #1
   117dc:	bgt	117f8 <__assert_fail@plt+0x798>
   117e0:	mov	r0, r4
   117e4:	bl	121dc <__assert_fail@plt+0x117c>
   117e8:	mov	r4, r0
   117ec:	cmp	r0, #0
   117f0:	bne	117cc <__assert_fail@plt+0x76c>
   117f4:	mov	r4, #0
   117f8:	ldr	r0, [sp, #16]
   117fc:	tst	r0, #1
   11800:	beq	1187c <__assert_fail@plt+0x81c>
   11804:	bl	10f64 <__ctype_b_loc@plt>
   11808:	ldr	r0, [r0]
   1180c:	add	r0, r0, r7, lsl #1
   11810:	ldrh	r0, [r0]
   11814:	ands	r0, r0, #1
   11818:	str	r0, [sp, #8]
   1181c:	beq	11894 <__assert_fail@plt+0x834>
   11820:	mov	r0, r5
   11824:	mov	r1, r9
   11828:	add	r2, sp, #24
   1182c:	add	r3, sp, #23
   11830:	bl	120a4 <__assert_fail@plt+0x1044>
   11834:	mov	sl, r1
   11838:	ldrb	r1, [sp, #23]
   1183c:	clz	r1, r1
   11840:	lsr	r1, r1, #5
   11844:	ldr	r2, [sp, #16]
   11848:	and	r1, r2, r1
   1184c:	mov	r3, r1
   11850:	cmp	r1, #1
   11854:	bne	118e0 <__assert_fail@plt+0x880>
   11858:	str	r0, [sp, #12]
   1185c:	subs	r0, r0, r5
   11860:	sbcs	r0, sl, r9
   11864:	bcc	119e0 <__assert_fail@plt+0x980>
   11868:	cmp	r7, #9
   1186c:	bne	11738 <__assert_fail@plt+0x6d8>
   11870:	cmp	r8, #0
   11874:	bne	11770 <__assert_fail@plt+0x710>
   11878:	b	1177c <__assert_fail@plt+0x71c>
   1187c:	mov	r0, #0
   11880:	str	r0, [sp, #16]
   11884:	mov	sl, r9
   11888:	cmn	r7, #1
   1188c:	bgt	11984 <__assert_fail@plt+0x924>
   11890:	b	119a4 <__assert_fail@plt+0x944>
   11894:	cmp	r7, #8
   11898:	bne	118ec <__assert_fail@plt+0x88c>
   1189c:	ldr	r0, [sp, #24]
   118a0:	cmp	r0, #0
   118a4:	subne	r0, r0, #1
   118a8:	str	r0, [sp, #24]
   118ac:	orr	r0, r5, r9
   118b0:	subs	r1, r5, #1
   118b4:	sbc	sl, r9, #0
   118b8:	cmp	r0, #0
   118bc:	moveq	sl, r9
   118c0:	moveq	r1, r5
   118c4:	str	r1, [sp, #12]
   118c8:	mov	r9, #1
   118cc:	mov	r7, #8
   118d0:	ldr	r6, [sp, #8]
   118d4:	cmp	r8, #0
   118d8:	bne	11910 <__assert_fail@plt+0x8b0>
   118dc:	b	11958 <__assert_fail@plt+0x8f8>
   118e0:	str	r5, [sp, #12]
   118e4:	mov	sl, r9
   118e8:	b	11788 <__assert_fail@plt+0x728>
   118ec:	adds	r0, r5, #1
   118f0:	adc	sl, r9, #0
   118f4:	str	r0, [sp, #12]
   118f8:	orrs	r0, r0, sl
   118fc:	mov	r9, #1
   11900:	ldr	r6, [sp, #8]
   11904:	beq	119e0 <__assert_fail@plt+0x980>
   11908:	cmp	r8, #0
   1190c:	beq	11958 <__assert_fail@plt+0x8f8>
   11910:	cmp	r8, #1
   11914:	beq	1192c <__assert_fail@plt+0x8cc>
   11918:	ldr	r0, [sp, #4]
   1191c:	tst	r0, #1
   11920:	ldrne	r0, [sp]
   11924:	movne	r1, #9
   11928:	strbne	r1, [r0]
   1192c:	movw	r0, #29012	; 0x7154
   11930:	movt	r0, #2
   11934:	ldr	r3, [r0]
   11938:	ldr	r0, [sp]
   1193c:	mov	r1, #1
   11940:	mov	r2, r8
   11944:	bl	10e80 <fwrite_unlocked@plt>
   11948:	mov	r1, #0
   1194c:	str	r1, [sp, #4]
   11950:	cmp	r0, r8
   11954:	bne	119b4 <__assert_fail@plt+0x954>
   11958:	movw	r0, #29024	; 0x7160
   1195c:	movt	r0, #2
   11960:	ldrb	r0, [r0]
   11964:	orrs	r0, r6, r0
   11968:	movwne	r0, #1
   1196c:	and	r0, r9, r0
   11970:	str	r0, [sp, #16]
   11974:	mov	r8, #0
   11978:	ldr	r5, [sp, #12]
   1197c:	cmn	r7, #1
   11980:	ble	119a4 <__assert_fail@plt+0x944>
   11984:	mov	r0, r7
   11988:	bl	11048 <putchar_unlocked@plt>
   1198c:	cmn	r0, #1
   11990:	mov	r9, sl
   11994:	ble	119b4 <__assert_fail@plt+0x954>
   11998:	cmp	r7, #10
   1199c:	bne	117cc <__assert_fail@plt+0x76c>
   119a0:	b	11710 <__assert_fail@plt+0x6b0>
   119a4:	ldr	r0, [sp]
   119a8:	bl	126b4 <__assert_fail@plt+0x1654>
   119ac:	sub	sp, fp, #28
   119b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119b4:	bl	10f88 <__errno_location@plt>
   119b8:	ldr	r4, [r0]
   119bc:	movw	r1, #22874	; 0x595a
   119c0:	movt	r1, #1
   119c4:	mov	r0, #0
   119c8:	mov	r2, #5
   119cc:	bl	10ea4 <dcgettext@plt>
   119d0:	mov	r2, r0
   119d4:	mov	r0, #1
   119d8:	mov	r1, r4
   119dc:	bl	10f1c <error@plt>
   119e0:	movw	r1, #22851	; 0x5943
   119e4:	movt	r1, #1
   119e8:	mov	r0, #0
   119ec:	mov	r2, #5
   119f0:	bl	10ea4 <dcgettext@plt>
   119f4:	mov	r2, r0
   119f8:	mov	r0, #1
   119fc:	mov	r1, #0
   11a00:	bl	10f1c <error@plt>
   11a04:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11a08:	add	fp, sp, #24
   11a0c:	mov	r4, r1
   11a10:	mov	r6, r0
   11a14:	movw	r8, #29032	; 0x7168
   11a18:	movt	r8, #2
   11a1c:	ldr	r0, [r8]
   11a20:	mov	r1, #0
   11a24:	cmp	r0, #0
   11a28:	beq	11a44 <__assert_fail@plt+0x9e4>
   11a2c:	movw	r2, #29036	; 0x716c
   11a30:	movt	r2, #2
   11a34:	ldr	r2, [r2]
   11a38:	add	r2, r2, r0, lsl #3
   11a3c:	ldrd	r2, [r2, #-8]
   11a40:	b	11a4c <__assert_fail@plt+0x9ec>
   11a44:	mov	r2, #0
   11a48:	mov	r3, #0
   11a4c:	subs	r7, r6, r2
   11a50:	sbcs	r7, r4, r3
   11a54:	movwcc	r1, #1
   11a58:	cmp	r1, #0
   11a5c:	mov	r1, r4
   11a60:	movne	r1, r3
   11a64:	mov	r5, r6
   11a68:	movne	r5, r2
   11a6c:	subs	r7, r5, r2
   11a70:	sbc	r5, r1, r3
   11a74:	movw	r1, #29040	; 0x7170
   11a78:	movt	r1, #2
   11a7c:	ldr	r1, [r1]
   11a80:	cmp	r0, r1
   11a84:	bne	11aa8 <__assert_fail@plt+0xa48>
   11a88:	movw	r9, #29036	; 0x716c
   11a8c:	movt	r9, #2
   11a90:	ldr	r0, [r9]
   11a94:	movw	r1, #29040	; 0x7170
   11a98:	movt	r1, #2
   11a9c:	mov	r2, #8
   11aa0:	bl	14960 <__assert_fail@plt+0x3900>
   11aa4:	str	r0, [r9]
   11aa8:	ldr	r0, [r8]
   11aac:	add	r1, r0, #1
   11ab0:	str	r1, [r8]
   11ab4:	movw	r1, #29036	; 0x716c
   11ab8:	movt	r1, #2
   11abc:	ldr	r1, [r1]
   11ac0:	str	r6, [r1, r0, lsl #3]!
   11ac4:	str	r4, [r1, #4]
   11ac8:	movw	r0, #29400	; 0x72d8
   11acc:	movt	r0, #2
   11ad0:	ldr	r1, [r0]
   11ad4:	subs	r1, r1, r7
   11ad8:	rscs	r1, r5, #0
   11adc:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ae0:	cmp	r5, #0
   11ae4:	bne	11af0 <__assert_fail@plt+0xa90>
   11ae8:	str	r7, [r0]
   11aec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11af0:	movw	r1, #23040	; 0x5a00
   11af4:	movt	r1, #1
   11af8:	mov	r0, #0
   11afc:	mov	r2, #5
   11b00:	bl	10ea4 <dcgettext@plt>
   11b04:	mov	r2, r0
   11b08:	mov	r0, #1
   11b0c:	mov	r1, #0
   11b10:	bl	10f1c <error@plt>
   11b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b18:	add	fp, sp, #28
   11b1c:	sub	sp, sp, #12
   11b20:	mov	r8, r0
   11b24:	mov	sl, #0
   11b28:	mov	r7, #1
   11b2c:	mov	r0, #0
   11b30:	str	r0, [sp, #4]
   11b34:	mov	r5, #0
   11b38:	mov	r0, #0
   11b3c:	str	r0, [sp, #8]
   11b40:	mov	r0, #0
   11b44:	str	r0, [sp]
   11b48:	mov	r4, #0
   11b4c:	b	11b54 <__assert_fail@plt+0xaf4>
   11b50:	add	r8, r8, #1
   11b54:	ldrb	r9, [r8]
   11b58:	cmp	r9, #44	; 0x2c
   11b5c:	beq	11be0 <__assert_fail@plt+0xb80>
   11b60:	cmp	r9, #0
   11b64:	beq	11dcc <__assert_fail@plt+0xd6c>
   11b68:	bl	10f64 <__ctype_b_loc@plt>
   11b6c:	ldr	r6, [r0]
   11b70:	mov	r0, r9
   11b74:	bl	11e70 <__assert_fail@plt+0xe10>
   11b78:	ldrb	r0, [r6, r9, lsl #1]
   11b7c:	tst	r0, #1
   11b80:	bne	11be0 <__assert_fail@plt+0xb80>
   11b84:	cmp	r9, #43	; 0x2b
   11b88:	beq	11c50 <__assert_fail@plt+0xbf0>
   11b8c:	cmp	r9, #47	; 0x2f
   11b90:	bne	11cb0 <__assert_fail@plt+0xc50>
   11b94:	mov	r0, #0
   11b98:	tst	r4, #1
   11b9c:	beq	11da8 <__assert_fail@plt+0xd48>
   11ba0:	str	r0, [sp, #8]
   11ba4:	mov	r0, #0
   11ba8:	movw	r1, #23063	; 0x5a17
   11bac:	movt	r1, #1
   11bb0:	mov	r2, #5
   11bb4:	bl	10ea4 <dcgettext@plt>
   11bb8:	mov	r7, r0
   11bbc:	mov	r0, r8
   11bc0:	bl	13fb8 <__assert_fail@plt+0x2f58>
   11bc4:	mov	r3, r0
   11bc8:	mov	r0, #0
   11bcc:	mov	r1, #0
   11bd0:	mov	r2, r7
   11bd4:	bl	10f1c <error@plt>
   11bd8:	mov	r5, #1
   11bdc:	b	11c98 <__assert_fail@plt+0xc38>
   11be0:	tst	r4, #1
   11be4:	beq	11db0 <__assert_fail@plt+0xd50>
   11be8:	tst	r5, #1
   11bec:	beq	11c10 <__assert_fail@plt+0xbb0>
   11bf0:	mov	r0, sl
   11bf4:	ldr	r1, [sp, #4]
   11bf8:	bl	11e74 <__assert_fail@plt+0xe14>
   11bfc:	mov	r5, #1
   11c00:	cmp	r0, #0
   11c04:	mov	r4, #0
   11c08:	bne	11b50 <__assert_fail@plt+0xaf0>
   11c0c:	b	11e10 <__assert_fail@plt+0xdb0>
   11c10:	ldr	r0, [sp, #8]
   11c14:	tst	r0, #1
   11c18:	beq	11c34 <__assert_fail@plt+0xbd4>
   11c1c:	mov	r0, sl
   11c20:	ldr	r1, [sp, #4]
   11c24:	bl	11ed8 <__assert_fail@plt+0xe78>
   11c28:	cmp	r0, #0
   11c2c:	bne	11ca0 <__assert_fail@plt+0xc40>
   11c30:	b	11e10 <__assert_fail@plt+0xdb0>
   11c34:	mov	r0, sl
   11c38:	ldr	r1, [sp, #4]
   11c3c:	bl	11a04 <__assert_fail@plt+0x9a4>
   11c40:	mov	r5, #0
   11c44:	mov	r0, #0
   11c48:	str	r0, [sp, #8]
   11c4c:	b	11db0 <__assert_fail@plt+0xd50>
   11c50:	tst	r4, #1
   11c54:	beq	11ca0 <__assert_fail@plt+0xc40>
   11c58:	mov	r5, #0
   11c5c:	mov	r0, #0
   11c60:	movw	r1, #23104	; 0x5a40
   11c64:	movt	r1, #1
   11c68:	mov	r2, #5
   11c6c:	bl	10ea4 <dcgettext@plt>
   11c70:	mov	r7, r0
   11c74:	mov	r0, r8
   11c78:	bl	13fb8 <__assert_fail@plt+0x2f58>
   11c7c:	mov	r3, r0
   11c80:	mov	r0, #0
   11c84:	mov	r1, #0
   11c88:	mov	r2, r7
   11c8c:	bl	10f1c <error@plt>
   11c90:	mov	r0, #1
   11c94:	str	r0, [sp, #8]
   11c98:	mov	r7, #0
   11c9c:	b	11d9c <__assert_fail@plt+0xd3c>
   11ca0:	mov	r0, #1
   11ca4:	str	r0, [sp, #8]
   11ca8:	mov	r5, #0
   11cac:	b	11db0 <__assert_fail@plt+0xd50>
   11cb0:	sub	r0, r9, #48	; 0x30
   11cb4:	cmp	r0, #9
   11cb8:	bhi	11e34 <__assert_fail@plt+0xdd4>
   11cbc:	ands	r1, r4, #1
   11cc0:	ldr	r2, [sp]
   11cc4:	moveq	r2, r8
   11cc8:	str	r2, [sp]
   11ccc:	mov	r2, r1
   11cd0:	ldr	r3, [sp, #4]
   11cd4:	movne	r2, r3
   11cd8:	movne	r1, sl
   11cdc:	movw	r3, #39321	; 0x9999
   11ce0:	movt	r3, #39321	; 0x9999
   11ce4:	subs	r3, r3, r1
   11ce8:	movw	r3, #39321	; 0x9999
   11cec:	movt	r3, #6553	; 0x1999
   11cf0:	sbcs	r3, r3, r2
   11cf4:	bcc	11d2c <__assert_fail@plt+0xccc>
   11cf8:	mov	r3, #10
   11cfc:	mov	ip, r7
   11d00:	umull	r3, r7, r1, r3
   11d04:	add	r6, r2, r2, lsl #2
   11d08:	add	r7, r7, r6, lsl #1
   11d0c:	adds	r3, r3, r0
   11d10:	adc	r0, r7, r0, asr #31
   11d14:	mov	r4, #1
   11d18:	subs	r7, r3, r1
   11d1c:	sbcs	r7, r0, r2
   11d20:	mov	sl, r1
   11d24:	str	r2, [sp, #4]
   11d28:	bcs	11db8 <__assert_fail@plt+0xd58>
   11d2c:	ldr	r7, [sp]
   11d30:	mov	r0, r7
   11d34:	movw	r1, #23145	; 0x5a69
   11d38:	movt	r1, #1
   11d3c:	bl	11054 <strspn@plt>
   11d40:	mov	r9, r0
   11d44:	mov	r0, r7
   11d48:	mov	r1, r9
   11d4c:	bl	14be4 <__assert_fail@plt+0x3b84>
   11d50:	mov	r6, r0
   11d54:	mov	r0, #0
   11d58:	movw	r1, #23156	; 0x5a74
   11d5c:	movt	r1, #1
   11d60:	mov	r2, #5
   11d64:	bl	10ea4 <dcgettext@plt>
   11d68:	mov	r4, r0
   11d6c:	mov	r0, r6
   11d70:	bl	13fb8 <__assert_fail@plt+0x2f58>
   11d74:	mov	r3, r0
   11d78:	mov	r0, #0
   11d7c:	mov	r1, #0
   11d80:	mov	r2, r4
   11d84:	bl	10f1c <error@plt>
   11d88:	mov	r0, r6
   11d8c:	bl	126b4 <__assert_fail@plt+0x1654>
   11d90:	add	r0, r7, r9
   11d94:	mov	r7, #0
   11d98:	sub	r8, r0, #1
   11d9c:	mov	r4, #1
   11da0:	add	r8, r8, #1
   11da4:	b	11b54 <__assert_fail@plt+0xaf4>
   11da8:	str	r0, [sp, #8]
   11dac:	mov	r5, #1
   11db0:	mov	r4, #0
   11db4:	b	11b50 <__assert_fail@plt+0xaf0>
   11db8:	mov	r7, ip
   11dbc:	mov	sl, r3
   11dc0:	str	r0, [sp, #4]
   11dc4:	add	r8, r8, #1
   11dc8:	b	11b54 <__assert_fail@plt+0xaf4>
   11dcc:	and	r0, r7, r4
   11dd0:	tst	r0, #1
   11dd4:	beq	11e24 <__assert_fail@plt+0xdc4>
   11dd8:	tst	r5, #1
   11ddc:	beq	11df0 <__assert_fail@plt+0xd90>
   11de0:	mov	r0, sl
   11de4:	ldr	r1, [sp, #4]
   11de8:	bl	11e74 <__assert_fail@plt+0xe14>
   11dec:	b	11e08 <__assert_fail@plt+0xda8>
   11df0:	ldr	r0, [sp, #8]
   11df4:	tst	r0, #1
   11df8:	beq	11e18 <__assert_fail@plt+0xdb8>
   11dfc:	mov	r0, sl
   11e00:	ldr	r1, [sp, #4]
   11e04:	bl	11ed8 <__assert_fail@plt+0xe78>
   11e08:	cmp	r0, #0
   11e0c:	bne	11e2c <__assert_fail@plt+0xdcc>
   11e10:	mov	r0, #1
   11e14:	bl	10f70 <exit@plt>
   11e18:	mov	r0, sl
   11e1c:	ldr	r1, [sp, #4]
   11e20:	bl	11a04 <__assert_fail@plt+0x9a4>
   11e24:	tst	r7, #1
   11e28:	beq	11e10 <__assert_fail@plt+0xdb0>
   11e2c:	sub	sp, fp, #28
   11e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e34:	movw	r1, #23181	; 0x5a8d
   11e38:	movt	r1, #1
   11e3c:	mov	r0, #0
   11e40:	mov	r2, #5
   11e44:	bl	10ea4 <dcgettext@plt>
   11e48:	mov	r4, r0
   11e4c:	mov	r0, r8
   11e50:	bl	13fb8 <__assert_fail@plt+0x2f58>
   11e54:	mov	r3, r0
   11e58:	mov	r0, #0
   11e5c:	mov	r1, #0
   11e60:	mov	r2, r4
   11e64:	bl	10f1c <error@plt>
   11e68:	mov	r0, #1
   11e6c:	bl	10f70 <exit@plt>
   11e70:	bx	lr
   11e74:	push	{r4, r5, r6, r7, fp, lr}
   11e78:	add	fp, sp, #16
   11e7c:	mov	r5, r1
   11e80:	mov	r6, r0
   11e84:	movw	r7, #29048	; 0x7178
   11e88:	movt	r7, #2
   11e8c:	ldrd	r0, [r7]
   11e90:	orrs	r0, r0, r1
   11e94:	beq	11ec4 <__assert_fail@plt+0xe64>
   11e98:	mov	r4, #0
   11e9c:	movw	r1, #23706	; 0x5c9a
   11ea0:	movt	r1, #1
   11ea4:	mov	r0, #0
   11ea8:	mov	r2, #5
   11eac:	bl	10ea4 <dcgettext@plt>
   11eb0:	mov	r2, r0
   11eb4:	mov	r0, #0
   11eb8:	mov	r1, #0
   11ebc:	bl	10f1c <error@plt>
   11ec0:	b	11ec8 <__assert_fail@plt+0xe68>
   11ec4:	mov	r4, #1
   11ec8:	str	r6, [r7]
   11ecc:	str	r5, [r7, #4]
   11ed0:	mov	r0, r4
   11ed4:	pop	{r4, r5, r6, r7, fp, pc}
   11ed8:	push	{r4, r5, r6, r7, fp, lr}
   11edc:	add	fp, sp, #16
   11ee0:	mov	r5, r1
   11ee4:	mov	r6, r0
   11ee8:	movw	r7, #29056	; 0x7180
   11eec:	movt	r7, #2
   11ef0:	ldrd	r0, [r7]
   11ef4:	orrs	r0, r0, r1
   11ef8:	beq	11f28 <__assert_fail@plt+0xec8>
   11efc:	mov	r4, #0
   11f00:	movw	r1, #23753	; 0x5cc9
   11f04:	movt	r1, #1
   11f08:	mov	r0, #0
   11f0c:	mov	r2, #5
   11f10:	bl	10ea4 <dcgettext@plt>
   11f14:	mov	r2, r0
   11f18:	mov	r0, #0
   11f1c:	mov	r1, #0
   11f20:	bl	10f1c <error@plt>
   11f24:	b	11f2c <__assert_fail@plt+0xecc>
   11f28:	mov	r4, #1
   11f2c:	str	r6, [r7]
   11f30:	str	r5, [r7, #4]
   11f34:	mov	r0, r4
   11f38:	pop	{r4, r5, r6, r7, fp, pc}
   11f3c:	push	{r4, r5, r6, r7, fp, lr}
   11f40:	add	fp, sp, #16
   11f44:	movw	r5, #29032	; 0x7168
   11f48:	movt	r5, #2
   11f4c:	ldr	r1, [r5]
   11f50:	movw	r4, #29036	; 0x716c
   11f54:	movt	r4, #2
   11f58:	ldr	r0, [r4]
   11f5c:	bl	11ff4 <__assert_fail@plt+0xf94>
   11f60:	ldr	r1, [r5]
   11f64:	cmp	r1, #0
   11f68:	beq	11fac <__assert_fail@plt+0xf4c>
   11f6c:	mov	r0, #0
   11f70:	cmp	r1, #1
   11f74:	bne	11fe0 <__assert_fail@plt+0xf80>
   11f78:	movw	r1, #29048	; 0x7178
   11f7c:	movt	r1, #2
   11f80:	ldrd	r2, [r1]
   11f84:	movw	r1, #29056	; 0x7180
   11f88:	movt	r1, #2
   11f8c:	ldrd	r6, [r1]
   11f90:	orr	r1, r7, r3
   11f94:	orr	r2, r6, r2
   11f98:	orrs	r1, r2, r1
   11f9c:	mov	r1, #0
   11fa0:	ldreq	r0, [r4]
   11fa4:	ldrdeq	r0, [r0]
   11fa8:	b	11fe4 <__assert_fail@plt+0xf84>
   11fac:	movw	r0, #29048	; 0x7178
   11fb0:	movt	r0, #2
   11fb4:	ldrd	r0, [r0]
   11fb8:	orrs	r1, r0, r1
   11fbc:	bne	11fd4 <__assert_fail@plt+0xf74>
   11fc0:	movw	r0, #29056	; 0x7180
   11fc4:	movt	r0, #2
   11fc8:	ldrd	r0, [r0]
   11fcc:	orrs	r1, r0, r1
   11fd0:	movweq	r0, #8
   11fd4:	movw	r1, #29400	; 0x72d8
   11fd8:	movt	r1, #2
   11fdc:	str	r0, [r1]
   11fe0:	mov	r1, #0
   11fe4:	movw	r2, #29064	; 0x7188
   11fe8:	movt	r2, #2
   11fec:	strd	r0, [r2]
   11ff0:	pop	{r4, r5, r6, r7, fp, pc}
   11ff4:	push	{r4, r5, fp, lr}
   11ff8:	add	fp, sp, #8
   11ffc:	cmp	r1, #0
   12000:	beq	12040 <__assert_fail@plt+0xfe0>
   12004:	mov	r2, #0
   12008:	mov	ip, #0
   1200c:	mov	lr, #0
   12010:	ldrd	r4, [r0]
   12014:	orrs	r3, r4, r5
   12018:	beq	12068 <__assert_fail@plt+0x1008>
   1201c:	subs	r3, ip, r4
   12020:	sbcs	r3, lr, r5
   12024:	bcs	12074 <__assert_fail@plt+0x1014>
   12028:	add	r2, r2, #1
   1202c:	add	r0, r0, #8
   12030:	cmp	r2, r1
   12034:	mov	ip, r4
   12038:	mov	lr, r5
   1203c:	bcc	12010 <__assert_fail@plt+0xfb0>
   12040:	movw	r0, #29056	; 0x7180
   12044:	movt	r0, #2
   12048:	ldrd	r0, [r0]
   1204c:	orrs	r0, r0, r1
   12050:	movwne	r0, #29048	; 0x7178
   12054:	movtne	r0, #2
   12058:	ldrdne	r0, [r0]
   1205c:	orrsne	r0, r0, r1
   12060:	bne	12098 <__assert_fail@plt+0x1038>
   12064:	pop	{r4, r5, fp, pc}
   12068:	movw	r1, #23800	; 0x5cf8
   1206c:	movt	r1, #1
   12070:	b	1207c <__assert_fail@plt+0x101c>
   12074:	movw	r1, #23821	; 0x5d0d
   12078:	movt	r1, #1
   1207c:	mov	r0, #0
   12080:	mov	r2, #5
   12084:	bl	10ea4 <dcgettext@plt>
   12088:	mov	r2, r0
   1208c:	mov	r0, #1
   12090:	mov	r1, #0
   12094:	bl	10f1c <error@plt>
   12098:	movw	r1, #23849	; 0x5d29
   1209c:	movt	r1, #1
   120a0:	b	1207c <__assert_fail@plt+0x101c>
   120a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   120a8:	add	fp, sp, #24
   120ac:	mov	r8, r1
   120b0:	mov	r9, r0
   120b4:	mov	r0, #0
   120b8:	strb	r0, [r3]
   120bc:	movw	r0, #29064	; 0x7188
   120c0:	movt	r0, #2
   120c4:	ldrd	r6, [r0]
   120c8:	orrs	r0, r6, r7
   120cc:	bne	12134 <__assert_fail@plt+0x10d4>
   120d0:	movw	r7, #29032	; 0x7168
   120d4:	movt	r7, #2
   120d8:	ldr	r0, [r7]
   120dc:	ldr	r1, [r2]
   120e0:	cmp	r1, r0
   120e4:	bcs	12120 <__assert_fail@plt+0x10c0>
   120e8:	movw	r0, #29036	; 0x716c
   120ec:	movt	r0, #2
   120f0:	ldr	r0, [r0]
   120f4:	add	r4, r0, r1, lsl #3
   120f8:	ldr	r0, [r7]
   120fc:	ldrd	r6, [r4]
   12100:	subs	r5, r9, r6
   12104:	sbcs	r5, r8, r7
   12108:	bcc	12158 <__assert_fail@plt+0x10f8>
   1210c:	add	r1, r1, #1
   12110:	str	r1, [r2]
   12114:	add	r4, r4, #8
   12118:	cmp	r1, r0
   1211c:	bcc	120fc <__assert_fail@plt+0x109c>
   12120:	movw	r1, #29048	; 0x7178
   12124:	movt	r1, #2
   12128:	ldrd	r6, [r1]
   1212c:	orrs	r1, r6, r7
   12130:	beq	12164 <__assert_fail@plt+0x1104>
   12134:	mov	r0, r9
   12138:	mov	r1, r8
   1213c:	mov	r2, r6
   12140:	mov	r3, r7
   12144:	bl	15338 <__assert_fail@plt+0x42d8>
   12148:	adds	r0, r6, r9
   1214c:	adc	r1, r7, r8
   12150:	subs	r6, r0, r2
   12154:	sbc	r7, r1, r3
   12158:	mov	r0, r6
   1215c:	mov	r1, r7
   12160:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12164:	movw	r1, #29056	; 0x7180
   12168:	movt	r1, #2
   1216c:	ldrd	r6, [r1]
   12170:	orrs	r1, r6, r7
   12174:	beq	12198 <__assert_fail@plt+0x1138>
   12178:	movw	r1, #29036	; 0x716c
   1217c:	movt	r1, #2
   12180:	ldr	r1, [r1]
   12184:	add	r0, r1, r0, lsl #3
   12188:	ldrd	r0, [r0, #-8]
   1218c:	subs	r0, r9, r0
   12190:	sbc	r1, r8, r1
   12194:	b	1213c <__assert_fail@plt+0x10dc>
   12198:	mov	r0, #1
   1219c:	strb	r0, [r3]
   121a0:	mov	r6, #0
   121a4:	mov	r7, #0
   121a8:	b	12158 <__assert_fail@plt+0x10f8>
   121ac:	movw	r1, #29072	; 0x7190
   121b0:	movt	r1, #2
   121b4:	mov	r2, #0
   121b8:	strb	r2, [r1]
   121bc:	movw	r1, #28904	; 0x70e8
   121c0:	movt	r1, #2
   121c4:	cmp	r0, #0
   121c8:	movne	r1, r0
   121cc:	movw	r0, #29076	; 0x7194
   121d0:	movt	r0, #2
   121d4:	str	r1, [r0]
   121d8:	bx	lr
   121dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121e0:	add	fp, sp, #28
   121e4:	sub	sp, sp, #4
   121e8:	cmp	r0, #0
   121ec:	beq	1228c <__assert_fail@plt+0x122c>
   121f0:	mov	r5, r0
   121f4:	movw	r7, #29080	; 0x7198
   121f8:	movt	r7, #2
   121fc:	ldr	r0, [r7]
   12200:	cmp	r0, #0
   12204:	beq	123a8 <__assert_fail@plt+0x1348>
   12208:	bl	10f88 <__errno_location@plt>
   1220c:	mov	r6, r0
   12210:	ldr	r4, [r0]
   12214:	mov	r0, r5
   12218:	bl	10f04 <ferror_unlocked@plt>
   1221c:	cmp	r0, #0
   12220:	moveq	r4, r0
   12224:	ldr	r0, [r7]
   12228:	movw	r1, #23982	; 0x5dae
   1222c:	movt	r1, #1
   12230:	bl	10e2c <strcmp@plt>
   12234:	cmp	r0, #0
   12238:	beq	12394 <__assert_fail@plt+0x1334>
   1223c:	mov	r0, r5
   12240:	bl	125ac <__assert_fail@plt+0x154c>
   12244:	cmp	r0, #0
   12248:	ldrne	r4, [r6]
   1224c:	cmp	r4, #0
   12250:	beq	1228c <__assert_fail@plt+0x122c>
   12254:	ldr	r2, [r7]
   12258:	mov	r0, #0
   1225c:	mov	r1, #3
   12260:	bl	13e78 <__assert_fail@plt+0x2e18>
   12264:	mov	r3, r0
   12268:	movw	r2, #23221	; 0x5ab5
   1226c:	movt	r2, #1
   12270:	mov	r0, #0
   12274:	mov	r1, r4
   12278:	bl	10f1c <error@plt>
   1227c:	movw	r0, #29028	; 0x7164
   12280:	movt	r0, #2
   12284:	mov	r1, #1
   12288:	str	r1, [r0]
   1228c:	movw	r5, #29076	; 0x7194
   12290:	movt	r5, #2
   12294:	ldr	r0, [r5]
   12298:	add	r1, r0, #4
   1229c:	str	r1, [r5]
   122a0:	ldr	r7, [r0]
   122a4:	cmp	r7, #0
   122a8:	beq	12368 <__assert_fail@plt+0x1308>
   122ac:	mov	r8, #1
   122b0:	movw	sl, #23221	; 0x5ab5
   122b4:	movt	sl, #1
   122b8:	movw	r9, #29028	; 0x7164
   122bc:	movt	r9, #2
   122c0:	mov	r0, r7
   122c4:	movw	r1, #23982	; 0x5dae
   122c8:	movt	r1, #1
   122cc:	bl	10e2c <strcmp@plt>
   122d0:	cmp	r0, #0
   122d4:	beq	122f8 <__assert_fail@plt+0x1298>
   122d8:	mov	r0, r7
   122dc:	movw	r1, #22884	; 0x5964
   122e0:	movt	r1, #1
   122e4:	bl	11018 <fopen64@plt>
   122e8:	mov	r6, r0
   122ec:	cmp	r6, #0
   122f0:	beq	12318 <__assert_fail@plt+0x12b8>
   122f4:	b	12370 <__assert_fail@plt+0x1310>
   122f8:	movw	r0, #29072	; 0x7190
   122fc:	movt	r0, #2
   12300:	strb	r8, [r0]
   12304:	movw	r0, #29008	; 0x7150
   12308:	movt	r0, #2
   1230c:	ldr	r6, [r0]
   12310:	cmp	r6, #0
   12314:	bne	12370 <__assert_fail@plt+0x1310>
   12318:	bl	10f88 <__errno_location@plt>
   1231c:	ldr	r4, [r0]
   12320:	mov	r6, #0
   12324:	mov	r0, #0
   12328:	mov	r1, #3
   1232c:	mov	r2, r7
   12330:	bl	13e78 <__assert_fail@plt+0x2e18>
   12334:	mov	r3, r0
   12338:	mov	r0, #0
   1233c:	mov	r1, r4
   12340:	mov	r2, sl
   12344:	bl	10f1c <error@plt>
   12348:	str	r8, [r9]
   1234c:	ldr	r0, [r5]
   12350:	add	r1, r0, #4
   12354:	str	r1, [r5]
   12358:	ldr	r7, [r0]
   1235c:	cmp	r7, #0
   12360:	bne	122c0 <__assert_fail@plt+0x1260>
   12364:	b	12388 <__assert_fail@plt+0x1328>
   12368:	mov	r6, #0
   1236c:	b	12388 <__assert_fail@plt+0x1328>
   12370:	movw	r0, #29080	; 0x7198
   12374:	movt	r0, #2
   12378:	str	r7, [r0]
   1237c:	mov	r0, r6
   12380:	mov	r1, #2
   12384:	bl	12570 <__assert_fail@plt+0x1510>
   12388:	mov	r0, r6
   1238c:	sub	sp, fp, #28
   12390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12394:	mov	r0, r5
   12398:	bl	1100c <clearerr_unlocked@plt>
   1239c:	cmp	r4, #0
   123a0:	bne	12254 <__assert_fail@plt+0x11f4>
   123a4:	b	1228c <__assert_fail@plt+0x122c>
   123a8:	movw	r0, #23224	; 0x5ab8
   123ac:	movt	r0, #1
   123b0:	movw	r1, #23234	; 0x5ac2
   123b4:	movt	r1, #1
   123b8:	movw	r3, #23254	; 0x5ad6
   123bc:	movt	r3, #1
   123c0:	mov	r2, #340	; 0x154
   123c4:	bl	11060 <__assert_fail@plt>
   123c8:	push	{fp, lr}
   123cc:	mov	fp, sp
   123d0:	movw	r0, #29072	; 0x7190
   123d4:	movt	r0, #2
   123d8:	ldrb	r0, [r0]
   123dc:	cmp	r0, #1
   123e0:	popne	{fp, pc}
   123e4:	movw	r0, #29008	; 0x7150
   123e8:	movt	r0, #2
   123ec:	ldr	r0, [r0]
   123f0:	bl	125ac <__assert_fail@plt+0x154c>
   123f4:	cmp	r0, #0
   123f8:	bne	12400 <__assert_fail@plt+0x13a0>
   123fc:	pop	{fp, pc}
   12400:	bl	10f88 <__errno_location@plt>
   12404:	ldr	r1, [r0]
   12408:	movw	r2, #23982	; 0x5dae
   1240c:	movt	r2, #1
   12410:	mov	r0, #1
   12414:	bl	10f1c <error@plt>
   12418:	push	{r4, sl, fp, lr}
   1241c:	add	fp, sp, #8
   12420:	movw	r1, #23278	; 0x5aee
   12424:	movt	r1, #1
   12428:	mov	r0, #0
   1242c:	mov	r2, #5
   12430:	bl	10ea4 <dcgettext@plt>
   12434:	movw	r4, #29012	; 0x7154
   12438:	movt	r4, #2
   1243c:	ldr	r1, [r4]
   12440:	bl	10e14 <fputs_unlocked@plt>
   12444:	movw	r1, #23341	; 0x5b2d
   12448:	movt	r1, #1
   1244c:	mov	r0, #0
   12450:	mov	r2, #5
   12454:	bl	10ea4 <dcgettext@plt>
   12458:	ldr	r1, [r4]
   1245c:	pop	{r4, sl, fp, lr}
   12460:	b	10e14 <fputs_unlocked@plt>
   12464:	movw	r1, #29084	; 0x719c
   12468:	movt	r1, #2
   1246c:	str	r0, [r1]
   12470:	bx	lr
   12474:	movw	r1, #29088	; 0x71a0
   12478:	movt	r1, #2
   1247c:	strb	r0, [r1]
   12480:	bx	lr
   12484:	push	{r4, r5, r6, sl, fp, lr}
   12488:	add	fp, sp, #16
   1248c:	sub	sp, sp, #8
   12490:	movw	r0, #29012	; 0x7154
   12494:	movt	r0, #2
   12498:	ldr	r0, [r0]
   1249c:	bl	15080 <__assert_fail@plt+0x4020>
   124a0:	cmp	r0, #0
   124a4:	beq	124cc <__assert_fail@plt+0x146c>
   124a8:	movw	r0, #29088	; 0x71a0
   124ac:	movt	r0, #2
   124b0:	ldrb	r0, [r0]
   124b4:	cmp	r0, #0
   124b8:	beq	124ec <__assert_fail@plt+0x148c>
   124bc:	bl	10f88 <__errno_location@plt>
   124c0:	ldr	r0, [r0]
   124c4:	cmp	r0, #32
   124c8:	bne	124ec <__assert_fail@plt+0x148c>
   124cc:	movw	r0, #29000	; 0x7148
   124d0:	movt	r0, #2
   124d4:	ldr	r0, [r0]
   124d8:	bl	15080 <__assert_fail@plt+0x4020>
   124dc:	cmp	r0, #0
   124e0:	subeq	sp, fp, #16
   124e4:	popeq	{r4, r5, r6, sl, fp, pc}
   124e8:	b	1255c <__assert_fail@plt+0x14fc>
   124ec:	movw	r1, #22874	; 0x595a
   124f0:	movt	r1, #1
   124f4:	mov	r0, #0
   124f8:	mov	r2, #5
   124fc:	bl	10ea4 <dcgettext@plt>
   12500:	mov	r4, r0
   12504:	movw	r0, #29084	; 0x719c
   12508:	movt	r0, #2
   1250c:	ldr	r6, [r0]
   12510:	bl	10f88 <__errno_location@plt>
   12514:	ldr	r5, [r0]
   12518:	cmp	r6, #0
   1251c:	bne	12538 <__assert_fail@plt+0x14d8>
   12520:	movw	r2, #23221	; 0x5ab5
   12524:	movt	r2, #1
   12528:	mov	r0, #0
   1252c:	mov	r1, r5
   12530:	mov	r3, r4
   12534:	b	12558 <__assert_fail@plt+0x14f8>
   12538:	mov	r0, r6
   1253c:	bl	13e68 <__assert_fail@plt+0x2e08>
   12540:	mov	r3, r0
   12544:	str	r4, [sp]
   12548:	movw	r2, #23909	; 0x5d65
   1254c:	movt	r2, #1
   12550:	mov	r0, #0
   12554:	mov	r1, r5
   12558:	bl	10f1c <error@plt>
   1255c:	movw	r0, #28916	; 0x70f4
   12560:	movt	r0, #2
   12564:	ldr	r0, [r0]
   12568:	bl	10e5c <_exit@plt>
   1256c:	b	10e38 <posix_fadvise64@plt>
   12570:	cmp	r0, #0
   12574:	bxeq	lr
   12578:	push	{r4, sl, fp, lr}
   1257c:	add	fp, sp, #8
   12580:	sub	sp, sp, #16
   12584:	mov	r4, r1
   12588:	bl	10fb8 <fileno@plt>
   1258c:	mov	r1, #0
   12590:	str	r1, [sp]
   12594:	stmib	sp, {r1, r4}
   12598:	mov	r2, #0
   1259c:	mov	r3, #0
   125a0:	bl	1256c <__assert_fail@plt+0x150c>
   125a4:	sub	sp, fp, #8
   125a8:	pop	{r4, sl, fp, pc}
   125ac:	push	{r4, r5, fp, lr}
   125b0:	add	fp, sp, #8
   125b4:	sub	sp, sp, #8
   125b8:	mov	r4, r0
   125bc:	bl	10fb8 <fileno@plt>
   125c0:	cmn	r0, #1
   125c4:	ble	1263c <__assert_fail@plt+0x15dc>
   125c8:	mov	r0, r4
   125cc:	bl	10f40 <__freading@plt>
   125d0:	cmp	r0, #0
   125d4:	beq	12600 <__assert_fail@plt+0x15a0>
   125d8:	mov	r0, r4
   125dc:	bl	10fb8 <fileno@plt>
   125e0:	mov	r1, #1
   125e4:	str	r1, [sp]
   125e8:	mov	r2, #0
   125ec:	mov	r3, #0
   125f0:	bl	10ee0 <lseek64@plt>
   125f4:	and	r0, r0, r1
   125f8:	cmn	r0, #1
   125fc:	beq	1263c <__assert_fail@plt+0x15dc>
   12600:	mov	r0, r4
   12604:	bl	1264c <__assert_fail@plt+0x15ec>
   12608:	cmp	r0, #0
   1260c:	beq	1263c <__assert_fail@plt+0x15dc>
   12610:	bl	10f88 <__errno_location@plt>
   12614:	ldr	r5, [r0]
   12618:	mov	r0, r4
   1261c:	bl	10fd0 <fclose@plt>
   12620:	cmp	r5, #0
   12624:	beq	12634 <__assert_fail@plt+0x15d4>
   12628:	bl	10f88 <__errno_location@plt>
   1262c:	str	r5, [r0]
   12630:	mvn	r0, #0
   12634:	sub	sp, fp, #8
   12638:	pop	{r4, r5, fp, pc}
   1263c:	mov	r0, r4
   12640:	sub	sp, fp, #8
   12644:	pop	{r4, r5, fp, lr}
   12648:	b	10fd0 <fclose@plt>
   1264c:	push	{r4, sl, fp, lr}
   12650:	add	fp, sp, #8
   12654:	mov	r4, r0
   12658:	cmp	r0, #0
   1265c:	beq	12674 <__assert_fail@plt+0x1614>
   12660:	mov	r0, r4
   12664:	bl	10f40 <__freading@plt>
   12668:	cmp	r0, #0
   1266c:	movne	r0, r4
   12670:	blne	12680 <__assert_fail@plt+0x1620>
   12674:	mov	r0, r4
   12678:	pop	{r4, sl, fp, lr}
   1267c:	b	10e44 <fflush@plt>
   12680:	ldrb	r1, [r0, #1]
   12684:	tst	r1, #1
   12688:	bxeq	lr
   1268c:	push	{fp, lr}
   12690:	mov	fp, sp
   12694:	sub	sp, sp, #8
   12698:	mov	r1, #1
   1269c:	str	r1, [sp]
   126a0:	mov	r2, #0
   126a4:	mov	r3, #0
   126a8:	bl	126dc <__assert_fail@plt+0x167c>
   126ac:	mov	sp, fp
   126b0:	pop	{fp, pc}
   126b4:	push	{r4, r5, r6, sl, fp, lr}
   126b8:	add	fp, sp, #16
   126bc:	mov	r4, r0
   126c0:	bl	10f88 <__errno_location@plt>
   126c4:	mov	r5, r0
   126c8:	ldr	r6, [r0]
   126cc:	mov	r0, r4
   126d0:	bl	10e50 <free@plt>
   126d4:	str	r6, [r5]
   126d8:	pop	{r4, r5, r6, sl, fp, pc}
   126dc:	push	{r4, r5, r6, r7, fp, lr}
   126e0:	add	fp, sp, #16
   126e4:	sub	sp, sp, #8
   126e8:	mov	r5, r3
   126ec:	mov	r6, r2
   126f0:	mov	r4, r0
   126f4:	ldr	r0, [r0, #4]
   126f8:	ldr	r1, [r4, #8]
   126fc:	cmp	r1, r0
   12700:	bne	1271c <__assert_fail@plt+0x16bc>
   12704:	ldrd	r0, [r4, #16]
   12708:	cmp	r1, r0
   1270c:	bne	1271c <__assert_fail@plt+0x16bc>
   12710:	ldr	r0, [r4, #36]	; 0x24
   12714:	cmp	r0, #0
   12718:	beq	12734 <__assert_fail@plt+0x16d4>
   1271c:	mov	r0, r4
   12720:	mov	r2, r6
   12724:	mov	r3, r5
   12728:	sub	sp, fp, #16
   1272c:	pop	{r4, r5, r6, r7, fp, lr}
   12730:	b	10fdc <fseeko64@plt>
   12734:	ldr	r7, [fp, #8]
   12738:	mov	r0, r4
   1273c:	bl	10fb8 <fileno@plt>
   12740:	str	r7, [sp]
   12744:	mov	r2, r6
   12748:	mov	r3, r5
   1274c:	bl	10ee0 <lseek64@plt>
   12750:	and	r2, r0, r1
   12754:	cmn	r2, #1
   12758:	mvneq	r0, #0
   1275c:	subeq	sp, fp, #16
   12760:	popeq	{r4, r5, r6, r7, fp, pc}
   12764:	strd	r0, [r4, #80]	; 0x50
   12768:	ldr	r0, [r4]
   1276c:	bic	r0, r0, #16
   12770:	str	r0, [r4]
   12774:	mov	r0, #0
   12778:	sub	sp, fp, #16
   1277c:	pop	{r4, r5, r6, r7, fp, pc}
   12780:	push	{r4, r5, fp, lr}
   12784:	add	fp, sp, #8
   12788:	cmp	r0, #0
   1278c:	beq	12820 <__assert_fail@plt+0x17c0>
   12790:	mov	r4, r0
   12794:	mov	r1, #47	; 0x2f
   12798:	bl	10ff4 <strrchr@plt>
   1279c:	cmp	r0, #0
   127a0:	mov	r5, r4
   127a4:	addne	r5, r0, #1
   127a8:	sub	r0, r5, r4
   127ac:	cmp	r0, #7
   127b0:	blt	12804 <__assert_fail@plt+0x17a4>
   127b4:	sub	r0, r5, #7
   127b8:	movw	r1, #23972	; 0x5da4
   127bc:	movt	r1, #1
   127c0:	mov	r2, #7
   127c4:	bl	11030 <strncmp@plt>
   127c8:	cmp	r0, #0
   127cc:	bne	12804 <__assert_fail@plt+0x17a4>
   127d0:	movw	r1, #23980	; 0x5dac
   127d4:	movt	r1, #1
   127d8:	mov	r0, r5
   127dc:	mov	r2, #3
   127e0:	bl	11030 <strncmp@plt>
   127e4:	cmp	r0, #0
   127e8:	beq	127f4 <__assert_fail@plt+0x1794>
   127ec:	mov	r4, r5
   127f0:	b	12804 <__assert_fail@plt+0x17a4>
   127f4:	add	r4, r5, #3
   127f8:	movw	r0, #28984	; 0x7138
   127fc:	movt	r0, #2
   12800:	str	r4, [r0]
   12804:	movw	r0, #28988	; 0x713c
   12808:	movt	r0, #2
   1280c:	str	r4, [r0]
   12810:	movw	r0, #29092	; 0x71a4
   12814:	movt	r0, #2
   12818:	str	r4, [r0]
   1281c:	pop	{r4, r5, fp, pc}
   12820:	movw	r0, #29000	; 0x7148
   12824:	movt	r0, #2
   12828:	ldr	r3, [r0]
   1282c:	movw	r0, #23916	; 0x5d6c
   12830:	movt	r0, #1
   12834:	mov	r1, #55	; 0x37
   12838:	mov	r2, #1
   1283c:	bl	10ed4 <fwrite@plt>
   12840:	bl	1103c <abort@plt>
   12844:	push	{r4, r5, r6, sl, fp, lr}
   12848:	add	fp, sp, #16
   1284c:	mov	r4, r0
   12850:	movw	r0, #29096	; 0x71a8
   12854:	movt	r0, #2
   12858:	cmp	r4, #0
   1285c:	moveq	r4, r0
   12860:	bl	10f88 <__errno_location@plt>
   12864:	mov	r5, r0
   12868:	ldr	r6, [r0]
   1286c:	mov	r0, r4
   12870:	mov	r1, #48	; 0x30
   12874:	bl	14b84 <__assert_fail@plt+0x3b24>
   12878:	str	r6, [r5]
   1287c:	pop	{r4, r5, r6, sl, fp, pc}
   12880:	movw	r1, #29096	; 0x71a8
   12884:	movt	r1, #2
   12888:	cmp	r0, #0
   1288c:	movne	r1, r0
   12890:	ldr	r0, [r1]
   12894:	bx	lr
   12898:	movw	r2, #29096	; 0x71a8
   1289c:	movt	r2, #2
   128a0:	cmp	r0, #0
   128a4:	movne	r2, r0
   128a8:	str	r1, [r2]
   128ac:	bx	lr
   128b0:	movw	r3, #29096	; 0x71a8
   128b4:	movt	r3, #2
   128b8:	cmp	r0, #0
   128bc:	movne	r3, r0
   128c0:	ubfx	r0, r1, #5, #3
   128c4:	add	r0, r3, r0, lsl #2
   128c8:	ldr	r3, [r0, #8]
   128cc:	and	r1, r1, #31
   128d0:	eor	r2, r2, r3, lsr r1
   128d4:	and	r2, r2, #1
   128d8:	eor	r2, r3, r2, lsl r1
   128dc:	str	r2, [r0, #8]
   128e0:	mov	r0, #1
   128e4:	and	r0, r0, r3, lsr r1
   128e8:	bx	lr
   128ec:	movw	r2, #29096	; 0x71a8
   128f0:	movt	r2, #2
   128f4:	cmp	r0, #0
   128f8:	movne	r2, r0
   128fc:	ldr	r0, [r2, #4]
   12900:	str	r1, [r2, #4]
   12904:	bx	lr
   12908:	movw	r3, #29096	; 0x71a8
   1290c:	movt	r3, #2
   12910:	cmp	r0, #0
   12914:	movne	r3, r0
   12918:	mov	r0, #10
   1291c:	str	r0, [r3]
   12920:	cmp	r1, #0
   12924:	cmpne	r2, #0
   12928:	bne	12938 <__assert_fail@plt+0x18d8>
   1292c:	push	{fp, lr}
   12930:	mov	fp, sp
   12934:	bl	1103c <abort@plt>
   12938:	str	r1, [r3, #40]	; 0x28
   1293c:	str	r2, [r3, #44]	; 0x2c
   12940:	bx	lr
   12944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12948:	add	fp, sp, #28
   1294c:	sub	sp, sp, #20
   12950:	mov	r8, r3
   12954:	mov	r9, r2
   12958:	mov	sl, r1
   1295c:	mov	r7, r0
   12960:	ldr	r0, [fp, #8]
   12964:	movw	r5, #29096	; 0x71a8
   12968:	movt	r5, #2
   1296c:	cmp	r0, #0
   12970:	movne	r5, r0
   12974:	bl	10f88 <__errno_location@plt>
   12978:	mov	r4, r0
   1297c:	ldm	r5, {r0, r1}
   12980:	ldr	r2, [r5, #40]	; 0x28
   12984:	ldr	r3, [r5, #44]	; 0x2c
   12988:	ldr	r6, [r4]
   1298c:	add	r5, r5, #8
   12990:	stm	sp, {r0, r1, r5}
   12994:	str	r2, [sp, #12]
   12998:	str	r3, [sp, #16]
   1299c:	mov	r0, r7
   129a0:	mov	r1, sl
   129a4:	mov	r2, r9
   129a8:	mov	r3, r8
   129ac:	bl	129bc <__assert_fail@plt+0x195c>
   129b0:	str	r6, [r4]
   129b4:	sub	sp, fp, #28
   129b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c0:	add	fp, sp, #28
   129c4:	sub	sp, sp, #156	; 0x9c
   129c8:	mov	r9, r3
   129cc:	str	r2, [fp, #-84]	; 0xffffffac
   129d0:	mov	r6, r1
   129d4:	mov	r7, r0
   129d8:	ldr	r0, [fp, #12]
   129dc:	and	r1, r0, #4
   129e0:	str	r1, [sp, #32]
   129e4:	and	r1, r0, #1
   129e8:	str	r1, [sp, #36]	; 0x24
   129ec:	ubfx	sl, r0, #1, #1
   129f0:	bl	10eec <__ctype_get_mb_cur_max@plt>
   129f4:	str	r0, [sp, #40]	; 0x28
   129f8:	ldr	r0, [fp, #24]
   129fc:	str	r0, [sp, #76]	; 0x4c
   12a00:	ldr	r0, [fp, #20]
   12a04:	str	r0, [sp, #68]	; 0x44
   12a08:	ldr	r0, [fp, #8]
   12a0c:	str	r0, [fp, #-60]	; 0xffffffc4
   12a10:	mov	r0, #0
   12a14:	str	r0, [sp, #72]	; 0x48
   12a18:	mov	r0, #0
   12a1c:	str	r0, [sp, #92]	; 0x5c
   12a20:	mov	r0, #0
   12a24:	str	r0, [fp, #-72]	; 0xffffffb8
   12a28:	mov	r0, #0
   12a2c:	mov	r1, #0
   12a30:	str	r1, [fp, #-56]	; 0xffffffc8
   12a34:	mov	r1, #0
   12a38:	str	r1, [sp, #56]	; 0x38
   12a3c:	mov	r5, #1
   12a40:	str	r7, [sp, #80]	; 0x50
   12a44:	mov	r4, r6
   12a48:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12a4c:	cmp	r6, #10
   12a50:	bhi	139b8 <__assert_fail@plt+0x2958>
   12a54:	add	r1, pc, #20
   12a58:	mov	r8, #0
   12a5c:	mov	r2, #1
   12a60:	mov	r3, #0
   12a64:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a68:	mov	lr, r9
   12a6c:	ldr	pc, [r1, r6, lsl #2]
   12a70:	andeq	r2, r1, r8, asr #22
   12a74:	andeq	r2, r1, r8, ror fp
   12a78:	andeq	r2, r1, r8, lsr fp
   12a7c:	andeq	r2, r1, r0, lsr fp
   12a80:	andeq	r2, r1, ip, ror #22
   12a84:	andeq	r2, r1, ip, asr #23
   12a88:	andeq	r2, r1, r8, asr fp
   12a8c:	andeq	r2, r1, r8, lsr #24
   12a90:	muleq	r1, ip, sl
   12a94:	muleq	r1, ip, sl
   12a98:	andeq	r2, r1, r4, asr #21
   12a9c:	movw	r0, #24062	; 0x5dfe
   12aa0:	movt	r0, #1
   12aa4:	mov	r1, r6
   12aa8:	bl	13fc4 <__assert_fail@plt+0x2f64>
   12aac:	str	r0, [sp, #68]	; 0x44
   12ab0:	movw	r0, #23892	; 0x5d54
   12ab4:	movt	r0, #1
   12ab8:	mov	r1, r6
   12abc:	bl	13fc4 <__assert_fail@plt+0x2f64>
   12ac0:	str	r0, [sp, #76]	; 0x4c
   12ac4:	mov	r8, #0
   12ac8:	tst	sl, #1
   12acc:	bne	12b04 <__assert_fail@plt+0x1aa4>
   12ad0:	ldr	r0, [sp, #68]	; 0x44
   12ad4:	ldrb	r0, [r0]
   12ad8:	cmp	r0, #0
   12adc:	beq	12b04 <__assert_fail@plt+0x1aa4>
   12ae0:	ldr	r1, [sp, #68]	; 0x44
   12ae4:	add	r1, r1, #1
   12ae8:	mov	r8, #0
   12aec:	cmp	r8, r4
   12af0:	strbcc	r0, [r7, r8]
   12af4:	ldrb	r0, [r1, r8]
   12af8:	add	r8, r8, #1
   12afc:	cmp	r0, #0
   12b00:	bne	12aec <__assert_fail@plt+0x1a8c>
   12b04:	ldr	r6, [sp, #76]	; 0x4c
   12b08:	mov	r0, r6
   12b0c:	bl	10f7c <strlen@plt>
   12b10:	str	r0, [fp, #-72]	; 0xffffffb8
   12b14:	str	r6, [sp, #92]	; 0x5c
   12b18:	mov	r2, #1
   12b1c:	mov	r3, sl
   12b20:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b24:	mov	lr, r9
   12b28:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12b2c:	b	12c28 <__assert_fail@plt+0x1bc8>
   12b30:	mov	r0, #1
   12b34:	b	12b78 <__assert_fail@plt+0x1b18>
   12b38:	tst	sl, #1
   12b3c:	bne	12b78 <__assert_fail@plt+0x1b18>
   12b40:	mov	r2, r0
   12b44:	b	12ba0 <__assert_fail@plt+0x1b40>
   12b48:	mov	r6, #0
   12b4c:	mov	r8, #0
   12b50:	mov	r2, r0
   12b54:	b	12c24 <__assert_fail@plt+0x1bc4>
   12b58:	mov	r0, #1
   12b5c:	str	r0, [fp, #-72]	; 0xffffffb8
   12b60:	mov	r8, #0
   12b64:	mov	r6, #5
   12b68:	b	12be4 <__assert_fail@plt+0x1b84>
   12b6c:	mov	r2, #1
   12b70:	tst	sl, #1
   12b74:	beq	12ba0 <__assert_fail@plt+0x1b40>
   12b78:	mov	r1, #1
   12b7c:	str	r1, [fp, #-72]	; 0xffffffb8
   12b80:	mov	r8, #0
   12b84:	mov	r6, #2
   12b88:	movw	r1, #23892	; 0x5d54
   12b8c:	movt	r1, #1
   12b90:	str	r1, [sp, #92]	; 0x5c
   12b94:	mov	r2, r0
   12b98:	mov	r3, #1
   12b9c:	b	12c28 <__assert_fail@plt+0x1bc8>
   12ba0:	mov	r8, #1
   12ba4:	mov	r6, #2
   12ba8:	cmp	r4, #0
   12bac:	movne	r0, #39	; 0x27
   12bb0:	strbne	r0, [r7]
   12bb4:	movw	r0, #23892	; 0x5d54
   12bb8:	movt	r0, #1
   12bbc:	str	r0, [sp, #92]	; 0x5c
   12bc0:	mov	r0, #1
   12bc4:	str	r0, [fp, #-72]	; 0xffffffb8
   12bc8:	b	12c24 <__assert_fail@plt+0x1bc4>
   12bcc:	mov	r6, #5
   12bd0:	tst	sl, #1
   12bd4:	beq	12bfc <__assert_fail@plt+0x1b9c>
   12bd8:	mov	r0, #1
   12bdc:	str	r0, [fp, #-72]	; 0xffffffb8
   12be0:	mov	r8, #0
   12be4:	movw	r0, #24060	; 0x5dfc
   12be8:	movt	r0, #1
   12bec:	str	r0, [sp, #92]	; 0x5c
   12bf0:	mov	r2, #1
   12bf4:	mov	r3, #1
   12bf8:	b	12c28 <__assert_fail@plt+0x1bc8>
   12bfc:	cmp	r4, #0
   12c00:	movne	r0, #34	; 0x22
   12c04:	strbne	r0, [r7]
   12c08:	mov	r8, #1
   12c0c:	movw	r0, #24060	; 0x5dfc
   12c10:	movt	r0, #1
   12c14:	str	r0, [sp, #92]	; 0x5c
   12c18:	mov	r0, #1
   12c1c:	str	r0, [fp, #-72]	; 0xffffffb8
   12c20:	mov	r2, #1
   12c24:	mov	r3, #0
   12c28:	ldr	r0, [fp, #16]
   12c2c:	cmp	r0, #0
   12c30:	movwne	r0, #1
   12c34:	and	r0, r0, r3
   12c38:	str	r0, [fp, #-88]	; 0xffffffa8
   12c3c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c40:	cmp	r0, #0
   12c44:	movwne	r0, #1
   12c48:	and	r1, r0, r3
   12c4c:	and	r1, r2, r1
   12c50:	str	r1, [sp, #48]	; 0x30
   12c54:	str	r6, [fp, #-60]	; 0xffffffc4
   12c58:	subs	r6, r6, #2
   12c5c:	clz	r1, r6
   12c60:	lsr	r1, r1, #5
   12c64:	and	r1, r1, r3
   12c68:	str	r1, [sp, #60]	; 0x3c
   12c6c:	str	r6, [fp, #-80]	; 0xffffffb0
   12c70:	mov	r1, r6
   12c74:	movwne	r1, #1
   12c78:	str	r3, [fp, #-76]	; 0xffffffb4
   12c7c:	eor	r3, r3, #1
   12c80:	str	r3, [sp, #88]	; 0x58
   12c84:	orr	r3, r1, r3
   12c88:	str	r3, [sp, #64]	; 0x40
   12c8c:	and	r1, r1, r2
   12c90:	str	r1, [fp, #-68]	; 0xffffffbc
   12c94:	and	r0, r0, r1
   12c98:	str	r0, [fp, #-64]	; 0xffffffc0
   12c9c:	str	r2, [sp, #84]	; 0x54
   12ca0:	eor	r0, r2, #1
   12ca4:	str	r0, [sp, #52]	; 0x34
   12ca8:	mov	r6, #0
   12cac:	cmn	lr, #1
   12cb0:	beq	12cc0 <__assert_fail@plt+0x1c60>
   12cb4:	cmp	r6, lr
   12cb8:	bne	12ccc <__assert_fail@plt+0x1c6c>
   12cbc:	b	13838 <__assert_fail@plt+0x27d8>
   12cc0:	ldrb	r0, [ip, r6]
   12cc4:	cmp	r0, #0
   12cc8:	beq	13838 <__assert_fail@plt+0x27d8>
   12ccc:	str	r5, [fp, #-48]	; 0xffffffd0
   12cd0:	mov	sl, #0
   12cd4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12cd8:	cmp	r0, #0
   12cdc:	beq	12d10 <__assert_fail@plt+0x1cb0>
   12ce0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ce4:	add	r5, r6, r0
   12ce8:	cmp	r0, #2
   12cec:	bcc	12d08 <__assert_fail@plt+0x1ca8>
   12cf0:	cmn	lr, #1
   12cf4:	bne	12d08 <__assert_fail@plt+0x1ca8>
   12cf8:	mov	r0, ip
   12cfc:	bl	10f7c <strlen@plt>
   12d00:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d04:	mov	lr, r0
   12d08:	cmp	r5, lr
   12d0c:	bls	12d1c <__assert_fail@plt+0x1cbc>
   12d10:	mov	r0, #0
   12d14:	str	r0, [fp, #-52]	; 0xffffffcc
   12d18:	b	12d68 <__assert_fail@plt+0x1d08>
   12d1c:	mov	r5, r4
   12d20:	mov	r4, lr
   12d24:	add	r0, ip, r6
   12d28:	ldr	r1, [sp, #92]	; 0x5c
   12d2c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12d30:	bl	10e8c <memcmp@plt>
   12d34:	cmp	r0, #0
   12d38:	mov	r1, r0
   12d3c:	movwne	r1, #1
   12d40:	ldr	r2, [sp, #88]	; 0x58
   12d44:	orr	r1, r1, r2
   12d48:	tst	r1, #1
   12d4c:	beq	138fc <__assert_fail@plt+0x289c>
   12d50:	clz	r0, r0
   12d54:	lsr	r0, r0, #5
   12d58:	str	r0, [fp, #-52]	; 0xffffffcc
   12d5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d60:	mov	lr, r4
   12d64:	mov	r4, r5
   12d68:	ldrb	r5, [ip, r6]
   12d6c:	cmp	r5, #126	; 0x7e
   12d70:	bhi	1312c <__assert_fail@plt+0x20cc>
   12d74:	mov	r9, #1
   12d78:	mov	r2, #110	; 0x6e
   12d7c:	mov	r0, #97	; 0x61
   12d80:	add	r3, pc, #4
   12d84:	mov	r1, #0
   12d88:	ldr	pc, [r3, r5, lsl #2]
   12d8c:	andeq	r3, r1, r4, lsr #32
   12d90:	andeq	r3, r1, ip, lsr #2
   12d94:	andeq	r3, r1, ip, lsr #2
   12d98:	andeq	r3, r1, ip, lsr #2
   12d9c:	andeq	r3, r1, ip, lsr #2
   12da0:	andeq	r3, r1, ip, lsr #2
   12da4:	andeq	r3, r1, ip, lsr #2
   12da8:	strdeq	r3, [r1], -r0
   12dac:	andeq	r3, r1, r4
   12db0:	strdeq	r2, [r1], -ip
   12db4:	andeq	r3, r1, r0, lsl r0
   12db8:	muleq	r1, r4, r0
   12dbc:	strdeq	r2, [r1], -r4
   12dc0:	andeq	r3, r1, ip
   12dc4:	andeq	r3, r1, ip, lsr #2
   12dc8:	andeq	r3, r1, ip, lsr #2
   12dcc:	andeq	r3, r1, ip, lsr #2
   12dd0:	andeq	r3, r1, ip, lsr #2
   12dd4:	andeq	r3, r1, ip, lsr #2
   12dd8:	andeq	r3, r1, ip, lsr #2
   12ddc:	andeq	r3, r1, ip, lsr #2
   12de0:	andeq	r3, r1, ip, lsr #2
   12de4:	andeq	r3, r1, ip, lsr #2
   12de8:	andeq	r3, r1, ip, lsr #2
   12dec:	andeq	r3, r1, ip, lsr #2
   12df0:	andeq	r3, r1, ip, lsr #2
   12df4:	andeq	r3, r1, ip, lsr #2
   12df8:	andeq	r3, r1, ip, lsr #2
   12dfc:	andeq	r3, r1, ip, lsr #2
   12e00:	andeq	r3, r1, ip, lsr #2
   12e04:	andeq	r3, r1, ip, lsr #2
   12e08:	andeq	r3, r1, ip, lsr #2
   12e0c:	andeq	r3, r1, r0, lsr #3
   12e10:	andeq	r3, r1, r4, lsr #3
   12e14:	andeq	r3, r1, r4, lsr #3
   12e18:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12e1c:	andeq	r3, r1, r4, lsr #3
   12e20:	andeq	r2, r1, r8, lsl #31
   12e24:	andeq	r3, r1, r4, lsr #3
   12e28:	muleq	r1, ip, r0
   12e2c:	andeq	r3, r1, r4, lsr #3
   12e30:	andeq	r3, r1, r4, lsr #3
   12e34:	andeq	r3, r1, r4, lsr #3
   12e38:	andeq	r2, r1, r8, lsl #31
   12e3c:	andeq	r2, r1, r8, lsl #31
   12e40:	andeq	r2, r1, r8, lsl #31
   12e44:	andeq	r2, r1, r8, lsl #31
   12e48:	andeq	r2, r1, r8, lsl #31
   12e4c:	andeq	r2, r1, r8, lsl #31
   12e50:	andeq	r2, r1, r8, lsl #31
   12e54:	andeq	r2, r1, r8, lsl #31
   12e58:	andeq	r2, r1, r8, lsl #31
   12e5c:	andeq	r2, r1, r8, lsl #31
   12e60:	andeq	r2, r1, r8, lsl #31
   12e64:	andeq	r2, r1, r8, lsl #31
   12e68:	andeq	r2, r1, r8, lsl #31
   12e6c:	andeq	r2, r1, r8, lsl #31
   12e70:	andeq	r2, r1, r8, lsl #31
   12e74:	andeq	r2, r1, r8, lsl #31
   12e78:	andeq	r3, r1, r4, lsr #3
   12e7c:	andeq	r3, r1, r4, lsr #3
   12e80:	andeq	r3, r1, r4, lsr #3
   12e84:	andeq	r3, r1, r4, lsr #3
   12e88:	andeq	r3, r1, r4, rrx
   12e8c:	andeq	r3, r1, ip, lsr #2
   12e90:	andeq	r2, r1, r8, lsl #31
   12e94:	andeq	r2, r1, r8, lsl #31
   12e98:	andeq	r2, r1, r8, lsl #31
   12e9c:	andeq	r2, r1, r8, lsl #31
   12ea0:	andeq	r2, r1, r8, lsl #31
   12ea4:	andeq	r2, r1, r8, lsl #31
   12ea8:	andeq	r2, r1, r8, lsl #31
   12eac:	andeq	r2, r1, r8, lsl #31
   12eb0:	andeq	r2, r1, r8, lsl #31
   12eb4:	andeq	r2, r1, r8, lsl #31
   12eb8:	andeq	r2, r1, r8, lsl #31
   12ebc:	andeq	r2, r1, r8, lsl #31
   12ec0:	andeq	r2, r1, r8, lsl #31
   12ec4:	andeq	r2, r1, r8, lsl #31
   12ec8:	andeq	r2, r1, r8, lsl #31
   12ecc:	andeq	r2, r1, r8, lsl #31
   12ed0:	andeq	r2, r1, r8, lsl #31
   12ed4:	andeq	r2, r1, r8, lsl #31
   12ed8:	andeq	r2, r1, r8, lsl #31
   12edc:	andeq	r2, r1, r8, lsl #31
   12ee0:	andeq	r2, r1, r8, lsl #31
   12ee4:	andeq	r2, r1, r8, lsl #31
   12ee8:	andeq	r2, r1, r8, lsl #31
   12eec:	andeq	r2, r1, r8, lsl #31
   12ef0:	andeq	r2, r1, r8, lsl #31
   12ef4:	andeq	r2, r1, r8, lsl #31
   12ef8:	andeq	r3, r1, r4, lsr #3
   12efc:	ldrdeq	r2, [r1], -r0
   12f00:	andeq	r2, r1, r8, lsl #31
   12f04:	andeq	r3, r1, r4, lsr #3
   12f08:	andeq	r2, r1, r8, lsl #31
   12f0c:	andeq	r3, r1, r4, lsr #3
   12f10:	andeq	r2, r1, r8, lsl #31
   12f14:	andeq	r2, r1, r8, lsl #31
   12f18:	andeq	r2, r1, r8, lsl #31
   12f1c:	andeq	r2, r1, r8, lsl #31
   12f20:	andeq	r2, r1, r8, lsl #31
   12f24:	andeq	r2, r1, r8, lsl #31
   12f28:	andeq	r2, r1, r8, lsl #31
   12f2c:	andeq	r2, r1, r8, lsl #31
   12f30:	andeq	r2, r1, r8, lsl #31
   12f34:	andeq	r2, r1, r8, lsl #31
   12f38:	andeq	r2, r1, r8, lsl #31
   12f3c:	andeq	r2, r1, r8, lsl #31
   12f40:	andeq	r2, r1, r8, lsl #31
   12f44:	andeq	r2, r1, r8, lsl #31
   12f48:	andeq	r2, r1, r8, lsl #31
   12f4c:	andeq	r2, r1, r8, lsl #31
   12f50:	andeq	r2, r1, r8, lsl #31
   12f54:	andeq	r2, r1, r8, lsl #31
   12f58:	andeq	r2, r1, r8, lsl #31
   12f5c:	andeq	r2, r1, r8, lsl #31
   12f60:	andeq	r2, r1, r8, lsl #31
   12f64:	andeq	r2, r1, r8, lsl #31
   12f68:	andeq	r2, r1, r8, lsl #31
   12f6c:	andeq	r2, r1, r8, lsl #31
   12f70:	andeq	r2, r1, r8, lsl #31
   12f74:	andeq	r2, r1, r8, lsl #31
   12f78:			; <UNDEFINED> instruction: 0x00012fb0
   12f7c:	andeq	r3, r1, r4, lsr #3
   12f80:			; <UNDEFINED> instruction: 0x00012fb0
   12f84:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f8c:	cmp	r0, #0
   12f90:	beq	13204 <__assert_fail@plt+0x21a4>
   12f94:	ldr	r0, [fp, #16]
   12f98:	b	13208 <__assert_fail@plt+0x21a8>
   12f9c:	mov	r9, #0
   12fa0:	cmp	r6, #0
   12fa4:	beq	131a0 <__assert_fail@plt+0x2140>
   12fa8:	mov	sl, #0
   12fac:	b	12f88 <__assert_fail@plt+0x1f28>
   12fb0:	mov	r9, #0
   12fb4:	cmn	lr, #1
   12fb8:	beq	13184 <__assert_fail@plt+0x2124>
   12fbc:	cmp	r6, #0
   12fc0:	bne	12fa8 <__assert_fail@plt+0x1f48>
   12fc4:	cmp	lr, #1
   12fc8:	beq	131a0 <__assert_fail@plt+0x2140>
   12fcc:	b	12fa8 <__assert_fail@plt+0x1f48>
   12fd0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12fd4:	cmp	r0, #2
   12fd8:	bne	131cc <__assert_fail@plt+0x216c>
   12fdc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12fe0:	tst	r0, #1
   12fe4:	bne	13914 <__assert_fail@plt+0x28b4>
   12fe8:	mov	sl, #0
   12fec:	mov	r0, #92	; 0x5c
   12ff0:	b	131e0 <__assert_fail@plt+0x2180>
   12ff4:	mov	r0, #102	; 0x66
   12ff8:	b	131f0 <__assert_fail@plt+0x2190>
   12ffc:	mov	r2, #116	; 0x74
   13000:	b	13010 <__assert_fail@plt+0x1fb0>
   13004:	mov	r0, #98	; 0x62
   13008:	b	131f0 <__assert_fail@plt+0x2190>
   1300c:	mov	r2, #114	; 0x72
   13010:	ldr	r0, [sp, #64]	; 0x40
   13014:	tst	r0, #1
   13018:	mov	r0, r2
   1301c:	bne	131f0 <__assert_fail@plt+0x2190>
   13020:	b	13914 <__assert_fail@plt+0x28b4>
   13024:	ldr	r0, [sp, #84]	; 0x54
   13028:	tst	r0, #1
   1302c:	beq	132e0 <__assert_fail@plt+0x2280>
   13030:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13034:	tst	r0, #1
   13038:	bne	13914 <__assert_fail@plt+0x28b4>
   1303c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13040:	cmp	r0, #2
   13044:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13048:	movwne	r0, #1
   1304c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13050:	orr	r0, r0, r2
   13054:	tst	r0, #1
   13058:	beq	136d4 <__assert_fail@plt+0x2674>
   1305c:	mov	r0, r8
   13060:	b	13708 <__assert_fail@plt+0x26a8>
   13064:	mov	sl, #0
   13068:	mov	r5, #63	; 0x3f
   1306c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13070:	cmp	r0, #5
   13074:	beq	13494 <__assert_fail@plt+0x2434>
   13078:	cmp	r0, #2
   1307c:	bne	13534 <__assert_fail@plt+0x24d4>
   13080:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13084:	tst	r0, #1
   13088:	mov	r9, #0
   1308c:	beq	12f88 <__assert_fail@plt+0x1f28>
   13090:	b	13914 <__assert_fail@plt+0x28b4>
   13094:	mov	r0, #118	; 0x76
   13098:	b	131f0 <__assert_fail@plt+0x2190>
   1309c:	mov	r5, #39	; 0x27
   130a0:	mov	r0, #1
   130a4:	str	r0, [sp, #56]	; 0x38
   130a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   130ac:	cmp	r0, #2
   130b0:	bne	13300 <__assert_fail@plt+0x22a0>
   130b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130b8:	tst	r0, #1
   130bc:	bne	13914 <__assert_fail@plt+0x28b4>
   130c0:	ldr	r2, [sp, #72]	; 0x48
   130c4:	cmp	r2, #0
   130c8:	mov	r0, r2
   130cc:	movwne	r0, #1
   130d0:	clz	r1, r4
   130d4:	lsr	r1, r1, #5
   130d8:	orrs	r0, r0, r1
   130dc:	moveq	r2, r4
   130e0:	str	r2, [sp, #72]	; 0x48
   130e4:	moveq	r4, r0
   130e8:	cmp	r8, r4
   130ec:	movcc	r0, #39	; 0x27
   130f0:	strbcc	r0, [r7, r8]
   130f4:	add	r0, r8, #1
   130f8:	cmp	r0, r4
   130fc:	movcc	r1, #92	; 0x5c
   13100:	strbcc	r1, [r7, r0]
   13104:	add	r0, r8, #2
   13108:	cmp	r0, r4
   1310c:	movcc	r1, #39	; 0x27
   13110:	strbcc	r1, [r7, r0]
   13114:	add	r8, r8, #3
   13118:	mov	r0, #0
   1311c:	str	r0, [fp, #-56]	; 0xffffffc8
   13120:	mov	sl, #0
   13124:	mov	r9, #1
   13128:	b	12f88 <__assert_fail@plt+0x1f28>
   1312c:	str	r4, [sp, #24]
   13130:	ldr	r0, [sp, #40]	; 0x28
   13134:	cmp	r0, #1
   13138:	bne	13308 <__assert_fail@plt+0x22a8>
   1313c:	str	lr, [sp, #28]
   13140:	bl	10f64 <__ctype_b_loc@plt>
   13144:	ldr	ip, [fp, #-84]	; 0xffffffac
   13148:	ldr	r0, [r0]
   1314c:	add	r0, r0, r5, lsl #1
   13150:	ldrb	r0, [r0, #1]
   13154:	ubfx	r9, r0, #6, #1
   13158:	mov	r1, #1
   1315c:	ldr	r4, [sp, #24]
   13160:	ldr	r0, [sp, #52]	; 0x34
   13164:	orr	r0, r9, r0
   13168:	mov	r2, r1
   1316c:	cmp	r1, #1
   13170:	bhi	1353c <__assert_fail@plt+0x24dc>
   13174:	tst	r0, #1
   13178:	beq	1353c <__assert_fail@plt+0x24dc>
   1317c:	ldr	lr, [sp, #28]
   13180:	b	12f88 <__assert_fail@plt+0x1f28>
   13184:	cmp	r6, #0
   13188:	ldrbeq	r0, [ip, #1]
   1318c:	cmpeq	r0, #0
   13190:	beq	131a0 <__assert_fail@plt+0x2140>
   13194:	mvn	lr, #0
   13198:	mov	sl, #0
   1319c:	b	12f88 <__assert_fail@plt+0x1f28>
   131a0:	mov	r1, #1
   131a4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   131a8:	cmp	r0, #2
   131ac:	bne	131c4 <__assert_fail@plt+0x2164>
   131b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   131b4:	tst	r0, #1
   131b8:	mov	r9, r1
   131bc:	beq	12f88 <__assert_fail@plt+0x1f28>
   131c0:	b	13914 <__assert_fail@plt+0x28b4>
   131c4:	mov	r9, r1
   131c8:	b	12f88 <__assert_fail@plt+0x1f28>
   131cc:	mov	sl, #0
   131d0:	mov	r0, #92	; 0x5c
   131d4:	ldr	r1, [sp, #48]	; 0x30
   131d8:	cmp	r1, #0
   131dc:	beq	131f0 <__assert_fail@plt+0x2190>
   131e0:	mov	r9, #0
   131e4:	cmp	sl, #0
   131e8:	beq	137a0 <__assert_fail@plt+0x2740>
   131ec:	b	137dc <__assert_fail@plt+0x277c>
   131f0:	mov	r9, #0
   131f4:	ldr	r1, [sp, #84]	; 0x54
   131f8:	tst	r1, #1
   131fc:	mov	sl, #0
   13200:	bne	13240 <__assert_fail@plt+0x21e0>
   13204:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13208:	cmp	r0, #0
   1320c:	mov	r0, r5
   13210:	beq	13234 <__assert_fail@plt+0x21d4>
   13214:	ubfx	r0, r5, #5, #3
   13218:	ldr	r1, [fp, #16]
   1321c:	ldr	r0, [r1, r0, lsl #2]
   13220:	and	r1, r5, #31
   13224:	mov	r2, #1
   13228:	tst	r0, r2, lsl r1
   1322c:	mov	r0, r5
   13230:	bne	13240 <__assert_fail@plt+0x21e0>
   13234:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13238:	cmp	r1, #0
   1323c:	beq	13798 <__assert_fail@plt+0x2738>
   13240:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13244:	tst	r1, #1
   13248:	bne	13914 <__assert_fail@plt+0x28b4>
   1324c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13250:	cmp	r1, #2
   13254:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13258:	movwne	r1, #1
   1325c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13260:	orr	r1, r1, r2
   13264:	tst	r1, #1
   13268:	beq	13274 <__assert_fail@plt+0x2214>
   1326c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13270:	b	132b0 <__assert_fail@plt+0x2250>
   13274:	cmp	r8, r4
   13278:	movcc	r1, #39	; 0x27
   1327c:	strbcc	r1, [r7, r8]
   13280:	add	r1, r8, #1
   13284:	cmp	r1, r4
   13288:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1328c:	movcc	r2, #36	; 0x24
   13290:	strbcc	r2, [r7, r1]
   13294:	add	r1, r8, #2
   13298:	cmp	r1, r4
   1329c:	movcc	r2, #39	; 0x27
   132a0:	strbcc	r2, [r7, r1]
   132a4:	add	r8, r8, #3
   132a8:	mov	r1, #1
   132ac:	str	r1, [fp, #-56]	; 0xffffffc8
   132b0:	cmp	r8, r4
   132b4:	movcc	r1, #92	; 0x5c
   132b8:	strbcc	r1, [r7, r8]
   132bc:	add	r8, r8, #1
   132c0:	cmp	r8, r4
   132c4:	strbcc	r0, [r7, r8]
   132c8:	and	r5, r5, r9
   132cc:	add	r8, r8, #1
   132d0:	add	r6, r6, #1
   132d4:	cmn	lr, #1
   132d8:	bne	12cb4 <__assert_fail@plt+0x1c54>
   132dc:	b	12cc0 <__assert_fail@plt+0x1c60>
   132e0:	mov	r9, #0
   132e4:	ldr	r0, [sp, #36]	; 0x24
   132e8:	cmp	r0, #0
   132ec:	mov	sl, #0
   132f0:	mov	r5, #0
   132f4:	beq	13204 <__assert_fail@plt+0x21a4>
   132f8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   132fc:	b	132d0 <__assert_fail@plt+0x2270>
   13300:	mov	r9, #1
   13304:	b	12f88 <__assert_fail@plt+0x1f28>
   13308:	mov	r0, #0
   1330c:	str	r0, [fp, #-36]	; 0xffffffdc
   13310:	str	r0, [fp, #-40]	; 0xffffffd8
   13314:	cmn	lr, #1
   13318:	bne	1332c <__assert_fail@plt+0x22cc>
   1331c:	mov	r0, ip
   13320:	bl	10f7c <strlen@plt>
   13324:	ldr	ip, [fp, #-84]	; 0xffffffac
   13328:	mov	lr, r0
   1332c:	add	r0, ip, r6
   13330:	str	r0, [sp, #20]
   13334:	mov	r9, #1
   13338:	mov	r7, #0
   1333c:	sub	r4, fp, #40	; 0x28
   13340:	str	lr, [sp, #28]
   13344:	str	r7, [sp, #44]	; 0x2c
   13348:	add	r7, r7, r6
   1334c:	add	r1, ip, r7
   13350:	sub	r2, lr, r7
   13354:	sub	r0, fp, #44	; 0x2c
   13358:	mov	r3, r4
   1335c:	bl	15190 <__assert_fail@plt+0x4130>
   13360:	cmp	r0, #0
   13364:	beq	13824 <__assert_fail@plt+0x27c4>
   13368:	cmn	r0, #1
   1336c:	beq	137e4 <__assert_fail@plt+0x2784>
   13370:	cmn	r0, #2
   13374:	ldr	lr, [sp, #28]
   13378:	beq	137ec <__assert_fail@plt+0x278c>
   1337c:	cmp	r0, #2
   13380:	mov	r1, #0
   13384:	movwcc	r1, #1
   13388:	ldr	r2, [sp, #60]	; 0x3c
   1338c:	eor	r2, r2, #1
   13390:	orrs	r1, r2, r1
   13394:	ldr	r4, [sp, #24]
   13398:	bne	13458 <__assert_fail@plt+0x23f8>
   1339c:	ldr	r1, [sp, #44]	; 0x2c
   133a0:	ldr	r2, [sp, #20]
   133a4:	add	r1, r2, r1
   133a8:	mov	r2, #1
   133ac:	ldrb	r3, [r1, r2]
   133b0:	sub	r3, r3, #91	; 0x5b
   133b4:	cmp	r3, #33	; 0x21
   133b8:	bhi	1344c <__assert_fail@plt+0x23ec>
   133bc:	add	r7, pc, #0
   133c0:	ldr	pc, [r7, r3, lsl #2]
   133c4:	andeq	r3, r1, ip, lsl #18
   133c8:	andeq	r3, r1, ip, lsl #18
   133cc:	andeq	r3, r1, ip, asr #8
   133d0:	andeq	r3, r1, ip, lsl #18
   133d4:	andeq	r3, r1, ip, asr #8
   133d8:	andeq	r3, r1, ip, lsl #18
   133dc:	andeq	r3, r1, ip, asr #8
   133e0:	andeq	r3, r1, ip, asr #8
   133e4:	andeq	r3, r1, ip, asr #8
   133e8:	andeq	r3, r1, ip, asr #8
   133ec:	andeq	r3, r1, ip, asr #8
   133f0:	andeq	r3, r1, ip, asr #8
   133f4:	andeq	r3, r1, ip, asr #8
   133f8:	andeq	r3, r1, ip, asr #8
   133fc:	andeq	r3, r1, ip, asr #8
   13400:	andeq	r3, r1, ip, asr #8
   13404:	andeq	r3, r1, ip, asr #8
   13408:	andeq	r3, r1, ip, asr #8
   1340c:	andeq	r3, r1, ip, asr #8
   13410:	andeq	r3, r1, ip, asr #8
   13414:	andeq	r3, r1, ip, asr #8
   13418:	andeq	r3, r1, ip, asr #8
   1341c:	andeq	r3, r1, ip, asr #8
   13420:	andeq	r3, r1, ip, asr #8
   13424:	andeq	r3, r1, ip, asr #8
   13428:	andeq	r3, r1, ip, asr #8
   1342c:	andeq	r3, r1, ip, asr #8
   13430:	andeq	r3, r1, ip, asr #8
   13434:	andeq	r3, r1, ip, asr #8
   13438:	andeq	r3, r1, ip, asr #8
   1343c:	andeq	r3, r1, ip, asr #8
   13440:	andeq	r3, r1, ip, asr #8
   13444:	andeq	r3, r1, ip, asr #8
   13448:	andeq	r3, r1, ip, lsl #18
   1344c:	add	r2, r2, #1
   13450:	cmp	r2, r0
   13454:	bcc	133ac <__assert_fail@plt+0x234c>
   13458:	ldr	r7, [sp, #44]	; 0x2c
   1345c:	add	r7, r0, r7
   13460:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13464:	bl	10ec8 <iswprint@plt>
   13468:	cmp	r0, #0
   1346c:	movwne	r0, #1
   13470:	and	r9, r9, r0
   13474:	sub	r4, fp, #40	; 0x28
   13478:	mov	r0, r4
   1347c:	bl	10e74 <mbsinit@plt>
   13480:	ldr	lr, [sp, #28]
   13484:	cmp	r0, #0
   13488:	ldr	ip, [fp, #-84]	; 0xffffffac
   1348c:	beq	13344 <__assert_fail@plt+0x22e4>
   13490:	b	1382c <__assert_fail@plt+0x27cc>
   13494:	ldr	r0, [sp, #32]
   13498:	cmp	r0, #0
   1349c:	beq	13534 <__assert_fail@plt+0x24d4>
   134a0:	add	r0, r6, #2
   134a4:	cmp	r0, lr
   134a8:	bcs	13534 <__assert_fail@plt+0x24d4>
   134ac:	add	r1, ip, r6
   134b0:	ldrb	r1, [r1, #1]
   134b4:	cmp	r1, #63	; 0x3f
   134b8:	bne	13534 <__assert_fail@plt+0x24d4>
   134bc:	ldrb	r9, [ip, r0]
   134c0:	sub	r2, r9, #33	; 0x21
   134c4:	cmp	r2, #29
   134c8:	bhi	13534 <__assert_fail@plt+0x24d4>
   134cc:	mov	r3, #1
   134d0:	movw	r1, #20929	; 0x51c1
   134d4:	movt	r1, #14336	; 0x3800
   134d8:	tst	r1, r3, lsl r2
   134dc:	beq	13534 <__assert_fail@plt+0x24d4>
   134e0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   134e4:	tst	r1, #1
   134e8:	bne	13914 <__assert_fail@plt+0x28b4>
   134ec:	cmp	r8, r4
   134f0:	movcc	r1, #63	; 0x3f
   134f4:	strbcc	r1, [r7, r8]
   134f8:	add	r2, r8, #1
   134fc:	cmp	r2, r4
   13500:	movcc	r1, #34	; 0x22
   13504:	strbcc	r1, [r7, r2]
   13508:	add	r2, r8, #2
   1350c:	cmp	r2, r4
   13510:	movcc	r1, #34	; 0x22
   13514:	strbcc	r1, [r7, r2]
   13518:	add	r2, r8, #3
   1351c:	cmp	r2, r4
   13520:	movcc	r1, #63	; 0x3f
   13524:	strbcc	r1, [r7, r2]
   13528:	add	r8, r8, #4
   1352c:	mov	r6, r0
   13530:	mov	r5, r9
   13534:	mov	r9, #0
   13538:	b	12f88 <__assert_fail@plt+0x1f28>
   1353c:	add	r1, r2, r6
   13540:	str	r1, [sp, #44]	; 0x2c
   13544:	add	r1, r6, #1
   13548:	mov	r3, #0
   1354c:	ldr	lr, [sp, #28]
   13550:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13554:	tst	r0, #1
   13558:	bne	1364c <__assert_fail@plt+0x25ec>
   1355c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13560:	tst	r2, #1
   13564:	bne	13914 <__assert_fail@plt+0x28b4>
   13568:	cmp	r6, #2
   1356c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13570:	movwne	r3, #1
   13574:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13578:	orr	r3, r3, r2
   1357c:	tst	r3, #1
   13580:	bne	135bc <__assert_fail@plt+0x255c>
   13584:	cmp	r8, r4
   13588:	movcc	r2, #39	; 0x27
   1358c:	strbcc	r2, [r7, r8]
   13590:	add	r3, r8, #1
   13594:	cmp	r3, r4
   13598:	movcc	r2, #36	; 0x24
   1359c:	strbcc	r2, [r7, r3]
   135a0:	add	r3, r8, #2
   135a4:	cmp	r3, r4
   135a8:	movcc	r2, #39	; 0x27
   135ac:	strbcc	r2, [r7, r3]
   135b0:	add	r8, r8, #3
   135b4:	mov	r2, #1
   135b8:	str	r2, [fp, #-56]	; 0xffffffc8
   135bc:	cmp	r8, r4
   135c0:	movcc	r2, #92	; 0x5c
   135c4:	strbcc	r2, [r7, r8]
   135c8:	add	r3, r8, #1
   135cc:	cmp	r3, r4
   135d0:	bcs	135f0 <__assert_fail@plt+0x2590>
   135d4:	and	r7, r5, #192	; 0xc0
   135d8:	mov	r2, #48	; 0x30
   135dc:	orr	r7, r2, r7, lsr #6
   135e0:	ldr	r6, [sp, #80]	; 0x50
   135e4:	strb	r7, [r6, r3]
   135e8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   135ec:	ldr	r7, [sp, #80]	; 0x50
   135f0:	add	r3, r8, #2
   135f4:	cmp	r3, r4
   135f8:	bcs	13618 <__assert_fail@plt+0x25b8>
   135fc:	lsr	r7, r5, #3
   13600:	mov	r2, #6
   13604:	bfi	r7, r2, #3, #29
   13608:	ldr	r6, [sp, #80]	; 0x50
   1360c:	strb	r7, [r6, r3]
   13610:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13614:	ldr	r7, [sp, #80]	; 0x50
   13618:	mov	r2, #6
   1361c:	bfi	r5, r2, #3, #29
   13620:	add	r8, r8, #3
   13624:	mov	r3, #1
   13628:	b	13670 <__assert_fail@plt+0x2610>
   1362c:	ldr	r7, [sp, #80]	; 0x50
   13630:	cmp	r8, r4
   13634:	strbcc	r5, [r7, r8]
   13638:	ldrb	r5, [ip, r1]
   1363c:	add	r1, r1, #1
   13640:	add	r8, r8, #1
   13644:	tst	r0, #1
   13648:	beq	1355c <__assert_fail@plt+0x24fc>
   1364c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13650:	tst	r2, #1
   13654:	beq	13668 <__assert_fail@plt+0x2608>
   13658:	cmp	r8, r4
   1365c:	movcc	r2, #92	; 0x5c
   13660:	strbcc	r2, [r7, r8]
   13664:	add	r8, r8, #1
   13668:	mov	r2, #0
   1366c:	str	r2, [fp, #-52]	; 0xffffffcc
   13670:	and	sl, r3, #1
   13674:	ldr	r2, [sp, #44]	; 0x2c
   13678:	cmp	r2, r1
   1367c:	bls	13788 <__assert_fail@plt+0x2728>
   13680:	cmp	sl, #0
   13684:	movwne	sl, #1
   13688:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1368c:	mvn	r7, r2
   13690:	orr	r7, r7, sl
   13694:	tst	r7, #1
   13698:	bne	1362c <__assert_fail@plt+0x25cc>
   1369c:	cmp	r8, r4
   136a0:	ldrcc	r7, [sp, #80]	; 0x50
   136a4:	movcc	r2, #39	; 0x27
   136a8:	strbcc	r2, [r7, r8]
   136ac:	add	r7, r8, #1
   136b0:	cmp	r7, r4
   136b4:	ldrcc	r6, [sp, #80]	; 0x50
   136b8:	movcc	r2, #39	; 0x27
   136bc:	strbcc	r2, [r6, r7]
   136c0:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   136c4:	add	r8, r8, #2
   136c8:	mov	r2, #0
   136cc:	str	r2, [fp, #-56]	; 0xffffffc8
   136d0:	b	1362c <__assert_fail@plt+0x25cc>
   136d4:	cmp	r8, r4
   136d8:	movcc	r0, #39	; 0x27
   136dc:	strbcc	r0, [r7, r8]
   136e0:	add	r0, r8, #1
   136e4:	cmp	r0, r4
   136e8:	movcc	r1, #36	; 0x24
   136ec:	strbcc	r1, [r7, r0]
   136f0:	add	r0, r8, #2
   136f4:	cmp	r0, r4
   136f8:	movcc	r1, #39	; 0x27
   136fc:	strbcc	r1, [r7, r0]
   13700:	add	r0, r8, #3
   13704:	mov	r2, #1
   13708:	cmp	r0, r4
   1370c:	movcc	r1, #92	; 0x5c
   13710:	strbcc	r1, [r7, r0]
   13714:	str	r2, [fp, #-56]	; 0xffffffc8
   13718:	add	r8, r0, #1
   1371c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13720:	cmp	r1, #2
   13724:	beq	13778 <__assert_fail@plt+0x2718>
   13728:	add	r1, r6, #1
   1372c:	mov	r9, #0
   13730:	mov	sl, #1
   13734:	mov	r5, #48	; 0x30
   13738:	cmp	r1, lr
   1373c:	bcs	12f88 <__assert_fail@plt+0x1f28>
   13740:	ldrb	r1, [ip, r1]
   13744:	sub	r1, r1, #48	; 0x30
   13748:	uxtb	r1, r1
   1374c:	cmp	r1, #9
   13750:	bhi	12f88 <__assert_fail@plt+0x1f28>
   13754:	cmp	r8, r4
   13758:	movcc	r1, #48	; 0x30
   1375c:	strbcc	r1, [r7, r8]
   13760:	add	r1, r0, #2
   13764:	cmp	r1, r4
   13768:	movcc	r2, #48	; 0x30
   1376c:	strbcc	r2, [r7, r1]
   13770:	add	r8, r0, #3
   13774:	b	12f88 <__assert_fail@plt+0x1f28>
   13778:	mov	r0, #48	; 0x30
   1377c:	mov	sl, #1
   13780:	mov	r9, #0
   13784:	b	13234 <__assert_fail@plt+0x21d4>
   13788:	sub	r6, r1, #1
   1378c:	cmp	sl, #0
   13790:	movwne	sl, #1
   13794:	mov	r0, r5
   13798:	cmp	sl, #0
   1379c:	bne	137dc <__assert_fail@plt+0x277c>
   137a0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   137a4:	tst	r1, #1
   137a8:	beq	137dc <__assert_fail@plt+0x277c>
   137ac:	cmp	r8, r4
   137b0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   137b4:	movcc	r1, #39	; 0x27
   137b8:	strbcc	r1, [r7, r8]
   137bc:	add	r1, r8, #1
   137c0:	cmp	r1, r4
   137c4:	movcc	r2, #39	; 0x27
   137c8:	strbcc	r2, [r7, r1]
   137cc:	add	r8, r8, #2
   137d0:	mov	r1, #0
   137d4:	str	r1, [fp, #-56]	; 0xffffffc8
   137d8:	b	132c0 <__assert_fail@plt+0x2260>
   137dc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   137e0:	b	132c0 <__assert_fail@plt+0x2260>
   137e4:	mov	r9, #0
   137e8:	b	13824 <__assert_fail@plt+0x27c4>
   137ec:	mov	r9, #0
   137f0:	cmp	r7, lr
   137f4:	bcs	13824 <__assert_fail@plt+0x27c4>
   137f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   137fc:	ldr	r7, [sp, #44]	; 0x2c
   13800:	ldr	r0, [sp, #20]
   13804:	ldrb	r0, [r0, r7]
   13808:	cmp	r0, #0
   1380c:	beq	1382c <__assert_fail@plt+0x27cc>
   13810:	add	r7, r7, #1
   13814:	add	r0, r6, r7
   13818:	cmp	r0, lr
   1381c:	bcc	13800 <__assert_fail@plt+0x27a0>
   13820:	b	1382c <__assert_fail@plt+0x27cc>
   13824:	ldr	ip, [fp, #-84]	; 0xffffffac
   13828:	ldr	r7, [sp, #44]	; 0x2c
   1382c:	mov	r1, r7
   13830:	ldr	r7, [sp, #80]	; 0x50
   13834:	b	1315c <__assert_fail@plt+0x20fc>
   13838:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1383c:	eor	r0, r1, #2
   13840:	orr	r0, r0, r8
   13844:	clz	r0, r0
   13848:	lsr	r0, r0, #5
   1384c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13850:	tst	r2, r0
   13854:	bne	13914 <__assert_fail@plt+0x28b4>
   13858:	cmp	r1, #2
   1385c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13860:	movwne	r0, #1
   13864:	orr	r0, r2, r0
   13868:	tst	r0, #1
   1386c:	ldreq	r0, [sp, #56]	; 0x38
   13870:	eoreq	r0, r0, #1
   13874:	tsteq	r0, #1
   13878:	bne	138ac <__assert_fail@plt+0x284c>
   1387c:	mov	r9, lr
   13880:	tst	r5, #1
   13884:	bne	1397c <__assert_fail@plt+0x291c>
   13888:	ldr	r0, [sp, #72]	; 0x48
   1388c:	cmp	r0, #0
   13890:	beq	138ac <__assert_fail@plt+0x284c>
   13894:	mov	r5, #0
   13898:	cmp	r4, #0
   1389c:	ldr	r0, [sp, #84]	; 0x54
   138a0:	mov	sl, r2
   138a4:	ldr	r6, [sp, #72]	; 0x48
   138a8:	beq	12a44 <__assert_fail@plt+0x19e4>
   138ac:	ldr	r1, [sp, #92]	; 0x5c
   138b0:	clz	r0, r1
   138b4:	lsr	r0, r0, #5
   138b8:	orr	r0, r0, r2
   138bc:	tst	r0, #1
   138c0:	bne	138ec <__assert_fail@plt+0x288c>
   138c4:	ldrb	r0, [r1]
   138c8:	cmp	r0, #0
   138cc:	beq	138ec <__assert_fail@plt+0x288c>
   138d0:	add	r1, r1, #1
   138d4:	cmp	r8, r4
   138d8:	strbcc	r0, [r7, r8]
   138dc:	add	r8, r8, #1
   138e0:	ldrb	r0, [r1], #1
   138e4:	cmp	r0, #0
   138e8:	bne	138d4 <__assert_fail@plt+0x2874>
   138ec:	cmp	r8, r4
   138f0:	movcc	r0, #0
   138f4:	strbcc	r0, [r7, r8]
   138f8:	b	13970 <__assert_fail@plt+0x2910>
   138fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13900:	mov	lr, r4
   13904:	mov	r4, r5
   13908:	b	13914 <__assert_fail@plt+0x28b4>
   1390c:	ldr	r7, [sp, #80]	; 0x50
   13910:	ldr	ip, [fp, #-84]	; 0xffffffac
   13914:	mov	r0, #0
   13918:	ldr	r1, [fp, #12]
   1391c:	bic	r1, r1, #2
   13920:	ldr	r2, [sp, #84]	; 0x54
   13924:	tst	r2, #1
   13928:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1392c:	mov	r2, r3
   13930:	movwne	r2, #4
   13934:	cmp	r3, #2
   13938:	movne	r2, r3
   1393c:	str	r2, [sp]
   13940:	str	r1, [sp, #4]
   13944:	str	r0, [sp, #8]
   13948:	ldr	r0, [sp, #68]	; 0x44
   1394c:	str	r0, [sp, #12]
   13950:	ldr	r0, [sp, #76]	; 0x4c
   13954:	str	r0, [sp, #16]
   13958:	mov	r0, r7
   1395c:	mov	r1, r4
   13960:	mov	r2, ip
   13964:	mov	r3, lr
   13968:	bl	129bc <__assert_fail@plt+0x195c>
   1396c:	mov	r8, r0
   13970:	mov	r0, r8
   13974:	sub	sp, fp, #28
   13978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1397c:	mov	r0, #5
   13980:	str	r0, [sp]
   13984:	ldr	r0, [fp, #12]
   13988:	str	r0, [sp, #4]
   1398c:	ldr	r0, [fp, #16]
   13990:	str	r0, [sp, #8]
   13994:	ldr	r0, [sp, #68]	; 0x44
   13998:	str	r0, [sp, #12]
   1399c:	ldr	r0, [sp, #76]	; 0x4c
   139a0:	str	r0, [sp, #16]
   139a4:	mov	r0, r7
   139a8:	ldr	r1, [sp, #72]	; 0x48
   139ac:	ldr	r2, [fp, #-84]	; 0xffffffac
   139b0:	mov	r3, r9
   139b4:	b	13968 <__assert_fail@plt+0x2908>
   139b8:	bl	1103c <abort@plt>
   139bc:	mov	r3, r2
   139c0:	mov	r2, #0
   139c4:	b	139c8 <__assert_fail@plt+0x2968>
   139c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139cc:	add	fp, sp, #28
   139d0:	sub	sp, sp, #36	; 0x24
   139d4:	mov	r4, r2
   139d8:	str	r2, [sp, #24]
   139dc:	mov	r5, r1
   139e0:	mov	r6, r0
   139e4:	str	r0, [sp, #20]
   139e8:	movw	r8, #29096	; 0x71a8
   139ec:	movt	r8, #2
   139f0:	cmp	r3, #0
   139f4:	movne	r8, r3
   139f8:	bl	10f88 <__errno_location@plt>
   139fc:	str	r0, [sp, #28]
   13a00:	ldm	r8, {r3, r9}
   13a04:	ldr	r1, [r8, #40]	; 0x28
   13a08:	ldr	r2, [r8, #44]	; 0x2c
   13a0c:	ldr	r7, [r0]
   13a10:	str	r7, [sp, #32]
   13a14:	add	sl, r8, #8
   13a18:	cmp	r4, #0
   13a1c:	orreq	r9, r9, #1
   13a20:	stm	sp, {r3, r9, sl}
   13a24:	str	r1, [sp, #12]
   13a28:	str	r2, [sp, #16]
   13a2c:	mov	r0, #0
   13a30:	mov	r1, #0
   13a34:	mov	r2, r6
   13a38:	mov	r3, r5
   13a3c:	mov	r7, r5
   13a40:	bl	129bc <__assert_fail@plt+0x195c>
   13a44:	mov	r5, r0
   13a48:	add	r4, r0, #1
   13a4c:	mov	r0, r4
   13a50:	bl	148cc <__assert_fail@plt+0x386c>
   13a54:	mov	r6, r0
   13a58:	ldr	r0, [r8]
   13a5c:	ldr	r1, [r8, #40]	; 0x28
   13a60:	ldr	r2, [r8, #44]	; 0x2c
   13a64:	stm	sp, {r0, r9, sl}
   13a68:	str	r1, [sp, #12]
   13a6c:	str	r2, [sp, #16]
   13a70:	mov	r0, r6
   13a74:	mov	r1, r4
   13a78:	ldr	r2, [sp, #20]
   13a7c:	mov	r3, r7
   13a80:	bl	129bc <__assert_fail@plt+0x195c>
   13a84:	ldr	r0, [sp, #24]
   13a88:	ldr	r1, [sp, #32]
   13a8c:	ldr	r2, [sp, #28]
   13a90:	str	r1, [r2]
   13a94:	cmp	r0, #0
   13a98:	strne	r5, [r0]
   13a9c:	mov	r0, r6
   13aa0:	sub	sp, fp, #28
   13aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aa8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13aac:	add	fp, sp, #24
   13ab0:	movw	r8, #28920	; 0x70f8
   13ab4:	movt	r8, #2
   13ab8:	ldr	r4, [r8]
   13abc:	movw	r5, #28924	; 0x70fc
   13ac0:	movt	r5, #2
   13ac4:	ldr	r0, [r5]
   13ac8:	cmp	r0, #2
   13acc:	blt	13af8 <__assert_fail@plt+0x2a98>
   13ad0:	add	r7, r4, #12
   13ad4:	mov	r6, #0
   13ad8:	ldr	r0, [r7, r6, lsl #3]
   13adc:	bl	126b4 <__assert_fail@plt+0x1654>
   13ae0:	add	r0, r6, #1
   13ae4:	ldr	r1, [r5]
   13ae8:	add	r2, r6, #2
   13aec:	cmp	r2, r1
   13af0:	mov	r6, r0
   13af4:	blt	13ad8 <__assert_fail@plt+0x2a78>
   13af8:	ldr	r0, [r4, #4]
   13afc:	movw	r7, #29144	; 0x71d8
   13b00:	movt	r7, #2
   13b04:	cmp	r0, r7
   13b08:	beq	13b20 <__assert_fail@plt+0x2ac0>
   13b0c:	bl	126b4 <__assert_fail@plt+0x1654>
   13b10:	movw	r0, #28928	; 0x7100
   13b14:	movt	r0, #2
   13b18:	mov	r6, #256	; 0x100
   13b1c:	strd	r6, [r0]
   13b20:	movw	r6, #28928	; 0x7100
   13b24:	movt	r6, #2
   13b28:	cmp	r4, r6
   13b2c:	beq	13b3c <__assert_fail@plt+0x2adc>
   13b30:	mov	r0, r4
   13b34:	bl	126b4 <__assert_fail@plt+0x1654>
   13b38:	str	r6, [r8]
   13b3c:	mov	r0, #1
   13b40:	str	r0, [r5]
   13b44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b48:	movw	r3, #29096	; 0x71a8
   13b4c:	movt	r3, #2
   13b50:	mvn	r2, #0
   13b54:	b	13b58 <__assert_fail@plt+0x2af8>
   13b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b5c:	add	fp, sp, #28
   13b60:	sub	sp, sp, #44	; 0x2c
   13b64:	mov	r7, r3
   13b68:	str	r2, [sp, #36]	; 0x24
   13b6c:	str	r1, [sp, #32]
   13b70:	mov	r5, r0
   13b74:	bl	10f88 <__errno_location@plt>
   13b78:	cmp	r5, #0
   13b7c:	blt	13ce8 <__assert_fail@plt+0x2c88>
   13b80:	cmn	r5, #-2147483647	; 0x80000001
   13b84:	beq	13ce8 <__assert_fail@plt+0x2c88>
   13b88:	movw	r4, #28920	; 0x70f8
   13b8c:	movt	r4, #2
   13b90:	ldr	r6, [r4]
   13b94:	str	r0, [sp, #28]
   13b98:	ldr	r0, [r0]
   13b9c:	str	r0, [sp, #24]
   13ba0:	movw	r8, #28924	; 0x70fc
   13ba4:	movt	r8, #2
   13ba8:	ldr	r1, [r8]
   13bac:	cmp	r1, r5
   13bb0:	ble	13bbc <__assert_fail@plt+0x2b5c>
   13bb4:	mov	sl, r6
   13bb8:	b	13c24 <__assert_fail@plt+0x2bc4>
   13bbc:	str	r1, [fp, #-32]	; 0xffffffe0
   13bc0:	mov	r0, #8
   13bc4:	str	r0, [sp]
   13bc8:	movw	r9, #28928	; 0x7100
   13bcc:	movt	r9, #2
   13bd0:	subs	r0, r6, r9
   13bd4:	movne	r0, r6
   13bd8:	add	r2, r5, #1
   13bdc:	sub	r2, r2, r1
   13be0:	sub	r1, fp, #32
   13be4:	mvn	r3, #-2147483648	; 0x80000000
   13be8:	bl	149b4 <__assert_fail@plt+0x3954>
   13bec:	mov	sl, r0
   13bf0:	str	r0, [r4]
   13bf4:	cmp	r6, r9
   13bf8:	ldrdeq	r0, [r9]
   13bfc:	stmeq	sl, {r0, r1}
   13c00:	ldr	r1, [r8]
   13c04:	add	r0, sl, r1, lsl #3
   13c08:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13c0c:	sub	r1, r2, r1
   13c10:	lsl	r2, r1, #3
   13c14:	mov	r1, #0
   13c18:	bl	10fa0 <memset@plt>
   13c1c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13c20:	str	r0, [r8]
   13c24:	mov	r9, sl
   13c28:	ldr	r6, [r9, r5, lsl #3]!
   13c2c:	ldr	r4, [r9, #4]!
   13c30:	ldm	r7, {r0, r1}
   13c34:	ldr	r2, [r7, #40]	; 0x28
   13c38:	ldr	r3, [r7, #44]	; 0x2c
   13c3c:	orr	r8, r1, #1
   13c40:	add	r1, r7, #8
   13c44:	stm	sp, {r0, r8}
   13c48:	str	r1, [sp, #20]
   13c4c:	add	r0, sp, #8
   13c50:	stm	r0, {r1, r2, r3}
   13c54:	mov	r0, r4
   13c58:	mov	r1, r6
   13c5c:	ldr	r2, [sp, #32]
   13c60:	ldr	r3, [sp, #36]	; 0x24
   13c64:	bl	129bc <__assert_fail@plt+0x195c>
   13c68:	cmp	r6, r0
   13c6c:	bhi	13cd0 <__assert_fail@plt+0x2c70>
   13c70:	add	r6, r0, #1
   13c74:	str	r6, [sl, r5, lsl #3]
   13c78:	movw	r0, #29144	; 0x71d8
   13c7c:	movt	r0, #2
   13c80:	cmp	r4, r0
   13c84:	beq	13c90 <__assert_fail@plt+0x2c30>
   13c88:	mov	r0, r4
   13c8c:	bl	126b4 <__assert_fail@plt+0x1654>
   13c90:	mov	r0, r6
   13c94:	bl	148cc <__assert_fail@plt+0x386c>
   13c98:	mov	r4, r0
   13c9c:	str	r0, [r9]
   13ca0:	ldr	r0, [r7]
   13ca4:	ldr	r1, [r7, #40]	; 0x28
   13ca8:	ldr	r2, [r7, #44]	; 0x2c
   13cac:	stm	sp, {r0, r8}
   13cb0:	ldr	r0, [sp, #20]
   13cb4:	add	r3, sp, #8
   13cb8:	stm	r3, {r0, r1, r2}
   13cbc:	mov	r0, r4
   13cc0:	mov	r1, r6
   13cc4:	ldr	r2, [sp, #32]
   13cc8:	ldr	r3, [sp, #36]	; 0x24
   13ccc:	bl	129bc <__assert_fail@plt+0x195c>
   13cd0:	ldr	r0, [sp, #28]
   13cd4:	ldr	r1, [sp, #24]
   13cd8:	str	r1, [r0]
   13cdc:	mov	r0, r4
   13ce0:	sub	sp, fp, #28
   13ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ce8:	bl	1103c <abort@plt>
   13cec:	movw	r3, #29096	; 0x71a8
   13cf0:	movt	r3, #2
   13cf4:	b	13b58 <__assert_fail@plt+0x2af8>
   13cf8:	mov	r1, r0
   13cfc:	mov	r0, #0
   13d00:	b	13b48 <__assert_fail@plt+0x2ae8>
   13d04:	mov	r2, r1
   13d08:	mov	r1, r0
   13d0c:	mov	r0, #0
   13d10:	b	13cec <__assert_fail@plt+0x2c8c>
   13d14:	push	{r4, r5, r6, sl, fp, lr}
   13d18:	add	fp, sp, #16
   13d1c:	sub	sp, sp, #48	; 0x30
   13d20:	mov	r4, r2
   13d24:	mov	r5, r0
   13d28:	mov	r6, sp
   13d2c:	mov	r0, r6
   13d30:	bl	13d50 <__assert_fail@plt+0x2cf0>
   13d34:	mov	r0, r5
   13d38:	mov	r1, r4
   13d3c:	mvn	r2, #0
   13d40:	mov	r3, r6
   13d44:	bl	13b58 <__assert_fail@plt+0x2af8>
   13d48:	sub	sp, fp, #16
   13d4c:	pop	{r4, r5, r6, sl, fp, pc}
   13d50:	vmov.i32	q8, #0	; 0x00000000
   13d54:	mov	r2, #32
   13d58:	mov	r3, r0
   13d5c:	vst1.32	{d16-d17}, [r3], r2
   13d60:	vst1.32	{d16-d17}, [r3]
   13d64:	add	r2, r0, #16
   13d68:	vst1.32	{d16-d17}, [r2]
   13d6c:	cmp	r1, #10
   13d70:	strne	r1, [r0]
   13d74:	bxne	lr
   13d78:	push	{fp, lr}
   13d7c:	mov	fp, sp
   13d80:	bl	1103c <abort@plt>
   13d84:	push	{r4, r5, r6, r7, fp, lr}
   13d88:	add	fp, sp, #16
   13d8c:	sub	sp, sp, #48	; 0x30
   13d90:	mov	r4, r3
   13d94:	mov	r5, r2
   13d98:	mov	r6, r0
   13d9c:	mov	r7, sp
   13da0:	mov	r0, r7
   13da4:	bl	13d50 <__assert_fail@plt+0x2cf0>
   13da8:	mov	r0, r6
   13dac:	mov	r1, r5
   13db0:	mov	r2, r4
   13db4:	mov	r3, r7
   13db8:	bl	13b58 <__assert_fail@plt+0x2af8>
   13dbc:	sub	sp, fp, #16
   13dc0:	pop	{r4, r5, r6, r7, fp, pc}
   13dc4:	mov	r2, r1
   13dc8:	mov	r1, r0
   13dcc:	mov	r0, #0
   13dd0:	b	13d14 <__assert_fail@plt+0x2cb4>
   13dd4:	mov	r3, r2
   13dd8:	mov	r2, r1
   13ddc:	mov	r1, r0
   13de0:	mov	r0, #0
   13de4:	b	13d84 <__assert_fail@plt+0x2d24>
   13de8:	push	{r4, r5, r6, sl, fp, lr}
   13dec:	add	fp, sp, #16
   13df0:	sub	sp, sp, #48	; 0x30
   13df4:	mov	r4, r1
   13df8:	mov	r5, r0
   13dfc:	mov	r0, #32
   13e00:	movw	r1, #29096	; 0x71a8
   13e04:	movt	r1, #2
   13e08:	add	r3, r1, #16
   13e0c:	vld1.64	{d16-d17}, [r1], r0
   13e10:	mov	r6, sp
   13e14:	vld1.64	{d18-d19}, [r3]
   13e18:	add	r3, r6, #16
   13e1c:	vld1.64	{d20-d21}, [r1]
   13e20:	vst1.64	{d18-d19}, [r3]
   13e24:	mov	r1, r6
   13e28:	vst1.64	{d16-d17}, [r1], r0
   13e2c:	vst1.64	{d20-d21}, [r1]
   13e30:	mov	r0, r6
   13e34:	mov	r1, r2
   13e38:	mov	r2, #1
   13e3c:	bl	128b0 <__assert_fail@plt+0x1850>
   13e40:	mov	r0, #0
   13e44:	mov	r1, r5
   13e48:	mov	r2, r4
   13e4c:	mov	r3, r6
   13e50:	bl	13b58 <__assert_fail@plt+0x2af8>
   13e54:	sub	sp, fp, #16
   13e58:	pop	{r4, r5, r6, sl, fp, pc}
   13e5c:	mov	r2, r1
   13e60:	mvn	r1, #0
   13e64:	b	13de8 <__assert_fail@plt+0x2d88>
   13e68:	mov	r1, #58	; 0x3a
   13e6c:	b	13e5c <__assert_fail@plt+0x2dfc>
   13e70:	mov	r2, #58	; 0x3a
   13e74:	b	13de8 <__assert_fail@plt+0x2d88>
   13e78:	push	{r4, r5, r6, sl, fp, lr}
   13e7c:	add	fp, sp, #16
   13e80:	sub	sp, sp, #48	; 0x30
   13e84:	mov	r4, r2
   13e88:	mov	r5, r0
   13e8c:	mov	r6, sp
   13e90:	mov	r0, r6
   13e94:	bl	13d50 <__assert_fail@plt+0x2cf0>
   13e98:	mov	r0, r6
   13e9c:	mov	r1, #58	; 0x3a
   13ea0:	mov	r2, #1
   13ea4:	bl	128b0 <__assert_fail@plt+0x1850>
   13ea8:	mov	r0, r5
   13eac:	mov	r1, r4
   13eb0:	mvn	r2, #0
   13eb4:	mov	r3, r6
   13eb8:	bl	13b58 <__assert_fail@plt+0x2af8>
   13ebc:	sub	sp, fp, #16
   13ec0:	pop	{r4, r5, r6, sl, fp, pc}
   13ec4:	push	{fp, lr}
   13ec8:	mov	fp, sp
   13ecc:	sub	sp, sp, #8
   13ed0:	mvn	ip, #0
   13ed4:	str	ip, [sp]
   13ed8:	bl	13ee4 <__assert_fail@plt+0x2e84>
   13edc:	mov	sp, fp
   13ee0:	pop	{fp, pc}
   13ee4:	push	{r4, r5, r6, r7, fp, lr}
   13ee8:	add	fp, sp, #16
   13eec:	sub	sp, sp, #48	; 0x30
   13ef0:	mov	r7, r3
   13ef4:	mov	r5, r0
   13ef8:	mov	r0, #32
   13efc:	movw	r3, #29096	; 0x71a8
   13f00:	movt	r3, #2
   13f04:	add	r4, r3, #16
   13f08:	vld1.64	{d16-d17}, [r3], r0
   13f0c:	mov	r6, sp
   13f10:	vld1.64	{d18-d19}, [r4]
   13f14:	add	r4, r6, #16
   13f18:	vld1.64	{d20-d21}, [r3]
   13f1c:	vst1.64	{d18-d19}, [r4]
   13f20:	mov	r3, r6
   13f24:	vst1.64	{d16-d17}, [r3], r0
   13f28:	vst1.64	{d20-d21}, [r3]
   13f2c:	mov	r0, r6
   13f30:	bl	12908 <__assert_fail@plt+0x18a8>
   13f34:	ldr	r2, [fp, #8]
   13f38:	mov	r0, r5
   13f3c:	mov	r1, r7
   13f40:	mov	r3, r6
   13f44:	bl	13b58 <__assert_fail@plt+0x2af8>
   13f48:	sub	sp, fp, #16
   13f4c:	pop	{r4, r5, r6, r7, fp, pc}
   13f50:	mov	r3, r2
   13f54:	mov	r2, r1
   13f58:	mov	r1, r0
   13f5c:	mov	r0, #0
   13f60:	b	13ec4 <__assert_fail@plt+0x2e64>
   13f64:	push	{fp, lr}
   13f68:	mov	fp, sp
   13f6c:	sub	sp, sp, #8
   13f70:	mov	ip, r2
   13f74:	mov	r2, r1
   13f78:	mov	r1, r0
   13f7c:	str	r3, [sp]
   13f80:	mov	r0, #0
   13f84:	mov	r3, ip
   13f88:	bl	13ee4 <__assert_fail@plt+0x2e84>
   13f8c:	mov	sp, fp
   13f90:	pop	{fp, pc}
   13f94:	movw	r3, #28936	; 0x7108
   13f98:	movt	r3, #2
   13f9c:	b	13b58 <__assert_fail@plt+0x2af8>
   13fa0:	mov	r2, r1
   13fa4:	mov	r1, r0
   13fa8:	mov	r0, #0
   13fac:	b	13f94 <__assert_fail@plt+0x2f34>
   13fb0:	mvn	r2, #0
   13fb4:	b	13f94 <__assert_fail@plt+0x2f34>
   13fb8:	mov	r1, r0
   13fbc:	mov	r0, #0
   13fc0:	b	13fb0 <__assert_fail@plt+0x2f50>
   13fc4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13fc8:	add	fp, sp, #24
   13fcc:	sub	sp, sp, #16
   13fd0:	mov	r4, r1
   13fd4:	mov	r5, r0
   13fd8:	mov	r7, #0
   13fdc:	mov	r0, #0
   13fe0:	mov	r1, r5
   13fe4:	mov	r2, #5
   13fe8:	bl	10ea4 <dcgettext@plt>
   13fec:	cmp	r0, r5
   13ff0:	beq	13ffc <__assert_fail@plt+0x2f9c>
   13ff4:	sub	sp, fp, #24
   13ff8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ffc:	bl	15158 <__assert_fail@plt+0x40f8>
   14000:	mov	r6, r0
   14004:	mov	r8, #56	; 0x38
   14008:	mov	r0, #45	; 0x2d
   1400c:	stm	sp, {r0, r8}
   14010:	str	r7, [sp, #8]
   14014:	str	r7, [sp, #12]
   14018:	mov	r0, r6
   1401c:	mov	r1, #85	; 0x55
   14020:	mov	r2, #84	; 0x54
   14024:	mov	r3, #70	; 0x46
   14028:	bl	140c0 <__assert_fail@plt+0x3060>
   1402c:	cmp	r0, #0
   14030:	beq	1404c <__assert_fail@plt+0x2fec>
   14034:	ldrb	r1, [r5]
   14038:	movw	r2, #24064	; 0x5e00
   1403c:	movt	r2, #1
   14040:	movw	r0, #24068	; 0x5e04
   14044:	movt	r0, #1
   14048:	b	14090 <__assert_fail@plt+0x3030>
   1404c:	mov	r0, #48	; 0x30
   14050:	mov	r1, #51	; 0x33
   14054:	str	r8, [sp]
   14058:	stmib	sp, {r0, r1}
   1405c:	str	r0, [sp, #12]
   14060:	mov	r0, r6
   14064:	mov	r1, #71	; 0x47
   14068:	mov	r2, #66	; 0x42
   1406c:	mov	r3, #49	; 0x31
   14070:	bl	140c0 <__assert_fail@plt+0x3060>
   14074:	cmp	r0, #0
   14078:	beq	140a0 <__assert_fail@plt+0x3040>
   1407c:	ldrb	r1, [r5]
   14080:	movw	r2, #24072	; 0x5e08
   14084:	movt	r2, #1
   14088:	movw	r0, #24076	; 0x5e0c
   1408c:	movt	r0, #1
   14090:	cmp	r1, #96	; 0x60
   14094:	moveq	r0, r2
   14098:	sub	sp, fp, #24
   1409c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140a0:	movw	r1, #24060	; 0x5dfc
   140a4:	movt	r1, #1
   140a8:	movw	r0, #23892	; 0x5d54
   140ac:	movt	r0, #1
   140b0:	cmp	r4, #9
   140b4:	moveq	r0, r1
   140b8:	sub	sp, fp, #24
   140bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140c0:	push	{r4, r5, r6, r7, fp, lr}
   140c4:	add	fp, sp, #16
   140c8:	sub	sp, sp, #16
   140cc:	mov	r4, r3
   140d0:	mov	r5, r2
   140d4:	mov	r7, r1
   140d8:	mov	r6, r0
   140dc:	mov	r0, r1
   140e0:	bl	15010 <__assert_fail@plt+0x3fb0>
   140e4:	ldrb	r1, [r6]
   140e8:	cmp	r0, #0
   140ec:	andne	r1, r1, #223	; 0xdf
   140f0:	mov	r0, #0
   140f4:	cmp	r1, r7
   140f8:	bne	14138 <__assert_fail@plt+0x30d8>
   140fc:	cmp	r7, #0
   14100:	moveq	r0, #1
   14104:	subeq	sp, fp, #16
   14108:	popeq	{r4, r5, r6, r7, fp, pc}
   1410c:	ldr	r0, [fp, #20]
   14110:	ldr	r1, [fp, #16]
   14114:	ldr	r2, [fp, #12]
   14118:	ldr	r3, [fp, #8]
   1411c:	str	r2, [sp]
   14120:	str	r1, [sp, #4]
   14124:	str	r0, [sp, #8]
   14128:	mov	r0, r6
   1412c:	mov	r1, r5
   14130:	mov	r2, r4
   14134:	bl	14140 <__assert_fail@plt+0x30e0>
   14138:	sub	sp, fp, #16
   1413c:	pop	{r4, r5, r6, r7, fp, pc}
   14140:	push	{r4, r5, r6, r7, fp, lr}
   14144:	add	fp, sp, #16
   14148:	sub	sp, sp, #8
   1414c:	mov	r4, r3
   14150:	mov	r5, r2
   14154:	mov	r7, r1
   14158:	mov	r6, r0
   1415c:	mov	r0, r1
   14160:	bl	15010 <__assert_fail@plt+0x3fb0>
   14164:	ldrb	r1, [r6, #1]
   14168:	cmp	r0, #0
   1416c:	andne	r1, r1, #223	; 0xdf
   14170:	mov	r0, #0
   14174:	cmp	r1, r7
   14178:	bne	141b0 <__assert_fail@plt+0x3150>
   1417c:	cmp	r7, #0
   14180:	moveq	r0, #1
   14184:	subeq	sp, fp, #16
   14188:	popeq	{r4, r5, r6, r7, fp, pc}
   1418c:	ldr	r0, [fp, #16]
   14190:	ldr	r1, [fp, #12]
   14194:	ldr	r3, [fp, #8]
   14198:	str	r1, [sp]
   1419c:	str	r0, [sp, #4]
   141a0:	mov	r0, r6
   141a4:	mov	r1, r5
   141a8:	mov	r2, r4
   141ac:	bl	141b8 <__assert_fail@plt+0x3158>
   141b0:	sub	sp, fp, #16
   141b4:	pop	{r4, r5, r6, r7, fp, pc}
   141b8:	push	{r4, r5, r6, r7, fp, lr}
   141bc:	add	fp, sp, #16
   141c0:	sub	sp, sp, #8
   141c4:	mov	r4, r3
   141c8:	mov	r5, r2
   141cc:	mov	r7, r1
   141d0:	mov	r6, r0
   141d4:	mov	r0, r1
   141d8:	bl	15010 <__assert_fail@plt+0x3fb0>
   141dc:	ldrb	r1, [r6, #2]
   141e0:	cmp	r0, #0
   141e4:	andne	r1, r1, #223	; 0xdf
   141e8:	mov	r0, #0
   141ec:	cmp	r1, r7
   141f0:	bne	14220 <__assert_fail@plt+0x31c0>
   141f4:	cmp	r7, #0
   141f8:	moveq	r0, #1
   141fc:	subeq	sp, fp, #16
   14200:	popeq	{r4, r5, r6, r7, fp, pc}
   14204:	ldr	r0, [fp, #12]
   14208:	ldr	r3, [fp, #8]
   1420c:	str	r0, [sp]
   14210:	mov	r0, r6
   14214:	mov	r1, r5
   14218:	mov	r2, r4
   1421c:	bl	14228 <__assert_fail@plt+0x31c8>
   14220:	sub	sp, fp, #16
   14224:	pop	{r4, r5, r6, r7, fp, pc}
   14228:	push	{r4, r5, r6, r7, fp, lr}
   1422c:	add	fp, sp, #16
   14230:	mov	r4, r3
   14234:	mov	r5, r2
   14238:	mov	r7, r1
   1423c:	mov	r6, r0
   14240:	mov	r0, r1
   14244:	bl	15010 <__assert_fail@plt+0x3fb0>
   14248:	ldrb	r1, [r6, #3]
   1424c:	ldr	r3, [fp, #8]
   14250:	cmp	r0, #0
   14254:	andne	r1, r1, #223	; 0xdf
   14258:	mov	r0, #0
   1425c:	cmp	r1, r7
   14260:	popne	{r4, r5, r6, r7, fp, pc}
   14264:	cmp	r7, #0
   14268:	beq	14280 <__assert_fail@plt+0x3220>
   1426c:	mov	r0, r6
   14270:	mov	r1, r5
   14274:	mov	r2, r4
   14278:	pop	{r4, r5, r6, r7, fp, lr}
   1427c:	b	14288 <__assert_fail@plt+0x3228>
   14280:	mov	r0, #1
   14284:	pop	{r4, r5, r6, r7, fp, pc}
   14288:	push	{r4, r5, r6, r7, fp, lr}
   1428c:	add	fp, sp, #16
   14290:	mov	r4, r3
   14294:	mov	r5, r2
   14298:	mov	r7, r1
   1429c:	mov	r6, r0
   142a0:	mov	r0, r1
   142a4:	bl	15010 <__assert_fail@plt+0x3fb0>
   142a8:	ldrb	r1, [r6, #4]
   142ac:	cmp	r0, #0
   142b0:	andne	r1, r1, #223	; 0xdf
   142b4:	mov	r0, #0
   142b8:	cmp	r1, r7
   142bc:	popne	{r4, r5, r6, r7, fp, pc}
   142c0:	cmp	r7, #0
   142c4:	beq	142dc <__assert_fail@plt+0x327c>
   142c8:	mov	r0, r6
   142cc:	mov	r1, r5
   142d0:	mov	r2, r4
   142d4:	pop	{r4, r5, r6, r7, fp, lr}
   142d8:	b	142e4 <__assert_fail@plt+0x3284>
   142dc:	mov	r0, #1
   142e0:	pop	{r4, r5, r6, r7, fp, pc}
   142e4:	push	{r4, r5, r6, sl, fp, lr}
   142e8:	add	fp, sp, #16
   142ec:	mov	r4, r2
   142f0:	mov	r6, r1
   142f4:	mov	r5, r0
   142f8:	mov	r0, r1
   142fc:	bl	15010 <__assert_fail@plt+0x3fb0>
   14300:	ldrb	r1, [r5, #5]
   14304:	cmp	r0, #0
   14308:	andne	r1, r1, #223	; 0xdf
   1430c:	mov	r0, #0
   14310:	cmp	r1, r6
   14314:	popne	{r4, r5, r6, sl, fp, pc}
   14318:	cmp	r6, #0
   1431c:	beq	14330 <__assert_fail@plt+0x32d0>
   14320:	mov	r0, r5
   14324:	mov	r1, r4
   14328:	pop	{r4, r5, r6, sl, fp, lr}
   1432c:	b	14338 <__assert_fail@plt+0x32d8>
   14330:	mov	r0, #1
   14334:	pop	{r4, r5, r6, sl, fp, pc}
   14338:	push	{r4, r5, fp, lr}
   1433c:	add	fp, sp, #8
   14340:	mov	r5, r1
   14344:	mov	r4, r0
   14348:	mov	r0, r1
   1434c:	bl	15010 <__assert_fail@plt+0x3fb0>
   14350:	ldrb	r1, [r4, #6]
   14354:	cmp	r0, #0
   14358:	andne	r1, r1, #223	; 0xdf
   1435c:	mov	r0, #0
   14360:	cmp	r1, r5
   14364:	popne	{r4, r5, fp, pc}
   14368:	cmp	r5, #0
   1436c:	beq	1437c <__assert_fail@plt+0x331c>
   14370:	mov	r0, r4
   14374:	pop	{r4, r5, fp, lr}
   14378:	b	14384 <__assert_fail@plt+0x3324>
   1437c:	mov	r0, #1
   14380:	pop	{r4, r5, fp, pc}
   14384:	push	{r4, sl, fp, lr}
   14388:	add	fp, sp, #8
   1438c:	mov	r4, r0
   14390:	mov	r0, #0
   14394:	bl	15010 <__assert_fail@plt+0x3fb0>
   14398:	ldrb	r1, [r4, #7]
   1439c:	cmp	r0, #0
   143a0:	beq	143b8 <__assert_fail@plt+0x3358>
   143a4:	tst	r1, #223	; 0xdf
   143a8:	moveq	r0, #1
   143ac:	popeq	{r4, sl, fp, pc}
   143b0:	mov	r0, #0
   143b4:	pop	{r4, sl, fp, pc}
   143b8:	cmp	r1, #0
   143bc:	moveq	r0, #1
   143c0:	popeq	{r4, sl, fp, pc}
   143c4:	mov	r0, #0
   143c8:	pop	{r4, sl, fp, pc}
   143cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143d0:	add	fp, sp, #24
   143d4:	sub	sp, sp, #32
   143d8:	mov	r4, r2
   143dc:	mov	r8, r0
   143e0:	ldr	r6, [fp, #12]
   143e4:	ldr	r7, [fp, #8]
   143e8:	cmp	r1, #0
   143ec:	beq	14414 <__assert_fail@plt+0x33b4>
   143f0:	mov	r5, r1
   143f4:	str	r4, [sp]
   143f8:	str	r3, [sp, #4]
   143fc:	movw	r2, #24164	; 0x5e64
   14400:	movt	r2, #1
   14404:	mov	r0, r8
   14408:	mov	r1, #1
   1440c:	mov	r3, r5
   14410:	b	1442c <__assert_fail@plt+0x33cc>
   14414:	str	r3, [sp]
   14418:	movw	r2, #24176	; 0x5e70
   1441c:	movt	r2, #1
   14420:	mov	r0, r8
   14424:	mov	r1, #1
   14428:	mov	r3, r4
   1442c:	bl	10fc4 <__fprintf_chk@plt>
   14430:	movw	r1, #24183	; 0x5e77
   14434:	movt	r1, #1
   14438:	mov	r0, #0
   1443c:	mov	r2, #5
   14440:	bl	10ea4 <dcgettext@plt>
   14444:	mov	r3, r0
   14448:	movw	r0, #2022	; 0x7e6
   1444c:	str	r0, [sp]
   14450:	movw	r2, #24901	; 0x6145
   14454:	movt	r2, #1
   14458:	mov	r0, r8
   1445c:	mov	r1, #1
   14460:	bl	10fc4 <__fprintf_chk@plt>
   14464:	movw	r4, #22816	; 0x5920
   14468:	movt	r4, #1
   1446c:	mov	r0, r4
   14470:	mov	r1, r8
   14474:	bl	10e14 <fputs_unlocked@plt>
   14478:	movw	r1, #24187	; 0x5e7b
   1447c:	movt	r1, #1
   14480:	mov	r0, #0
   14484:	mov	r2, #5
   14488:	bl	10ea4 <dcgettext@plt>
   1448c:	mov	r2, r0
   14490:	movw	r3, #24358	; 0x5f26
   14494:	movt	r3, #1
   14498:	mov	r0, r8
   1449c:	mov	r1, #1
   144a0:	bl	10fc4 <__fprintf_chk@plt>
   144a4:	mov	r0, r4
   144a8:	mov	r1, r8
   144ac:	bl	10e14 <fputs_unlocked@plt>
   144b0:	cmp	r6, #9
   144b4:	bhi	144f0 <__assert_fail@plt+0x3490>
   144b8:	add	r0, pc, #0
   144bc:	ldr	pc, [r0, r6, lsl #2]
   144c0:	andeq	r4, r1, r8, ror #9
   144c4:	strdeq	r4, [r1], -ip
   144c8:	andeq	r4, r1, ip, lsr #10
   144cc:	andeq	r4, r1, r4, asr r5
   144d0:	andeq	r4, r1, ip, ror r5
   144d4:	andeq	r4, r1, r4, lsr #11
   144d8:	andeq	r4, r1, ip, asr #11
   144dc:	andeq	r4, r1, r4, lsl #12
   144e0:	andeq	r4, r1, r4, lsr #13
   144e4:	andeq	r4, r1, ip, asr #12
   144e8:	sub	sp, fp, #24
   144ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144f0:	movw	r1, #24711	; 0x6087
   144f4:	movt	r1, #1
   144f8:	b	14654 <__assert_fail@plt+0x35f4>
   144fc:	movw	r1, #24392	; 0x5f48
   14500:	movt	r1, #1
   14504:	mov	r0, #0
   14508:	mov	r2, #5
   1450c:	bl	10ea4 <dcgettext@plt>
   14510:	mov	r2, r0
   14514:	ldr	r3, [r7]
   14518:	mov	r0, r8
   1451c:	mov	r1, #1
   14520:	sub	sp, fp, #24
   14524:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14528:	b	10fc4 <__fprintf_chk@plt>
   1452c:	movw	r1, #24408	; 0x5f58
   14530:	movt	r1, #1
   14534:	mov	r0, #0
   14538:	mov	r2, #5
   1453c:	bl	10ea4 <dcgettext@plt>
   14540:	mov	r2, r0
   14544:	ldr	r3, [r7]
   14548:	ldr	r0, [r7, #4]
   1454c:	str	r0, [sp]
   14550:	b	14640 <__assert_fail@plt+0x35e0>
   14554:	movw	r1, #24431	; 0x5f6f
   14558:	movt	r1, #1
   1455c:	mov	r0, #0
   14560:	mov	r2, #5
   14564:	bl	10ea4 <dcgettext@plt>
   14568:	mov	r2, r0
   1456c:	ldr	r3, [r7]
   14570:	ldmib	r7, {r0, r1}
   14574:	stm	sp, {r0, r1}
   14578:	b	14640 <__assert_fail@plt+0x35e0>
   1457c:	movw	r1, #24459	; 0x5f8b
   14580:	movt	r1, #1
   14584:	mov	r0, #0
   14588:	mov	r2, #5
   1458c:	bl	10ea4 <dcgettext@plt>
   14590:	mov	r2, r0
   14594:	ldr	r3, [r7]
   14598:	ldmib	r7, {r0, r1, r7}
   1459c:	stm	sp, {r0, r1, r7}
   145a0:	b	14640 <__assert_fail@plt+0x35e0>
   145a4:	movw	r1, #24491	; 0x5fab
   145a8:	movt	r1, #1
   145ac:	mov	r0, #0
   145b0:	mov	r2, #5
   145b4:	bl	10ea4 <dcgettext@plt>
   145b8:	mov	r2, r0
   145bc:	ldr	r3, [r7]
   145c0:	ldmib	r7, {r0, r1, r6, r7}
   145c4:	stm	sp, {r0, r1, r6, r7}
   145c8:	b	14640 <__assert_fail@plt+0x35e0>
   145cc:	movw	r1, #24527	; 0x5fcf
   145d0:	movt	r1, #1
   145d4:	mov	r0, #0
   145d8:	mov	r2, #5
   145dc:	bl	10ea4 <dcgettext@plt>
   145e0:	mov	r2, r0
   145e4:	ldr	r3, [r7]
   145e8:	ldmib	r7, {r0, r1, r6}
   145ec:	ldr	r5, [r7, #16]
   145f0:	ldr	r7, [r7, #20]
   145f4:	stm	sp, {r0, r1, r6}
   145f8:	str	r5, [sp, #12]
   145fc:	str	r7, [sp, #16]
   14600:	b	14640 <__assert_fail@plt+0x35e0>
   14604:	movw	r1, #24567	; 0x5ff7
   14608:	movt	r1, #1
   1460c:	mov	r0, #0
   14610:	mov	r2, #5
   14614:	bl	10ea4 <dcgettext@plt>
   14618:	mov	r2, r0
   1461c:	ldr	r3, [r7]
   14620:	ldmib	r7, {r0, r1, r6}
   14624:	ldr	r5, [r7, #16]
   14628:	ldr	r4, [r7, #20]
   1462c:	ldr	r7, [r7, #24]
   14630:	stm	sp, {r0, r1, r6}
   14634:	str	r5, [sp, #12]
   14638:	str	r4, [sp, #16]
   1463c:	str	r7, [sp, #20]
   14640:	mov	r0, r8
   14644:	mov	r1, #1
   14648:	b	146f4 <__assert_fail@plt+0x3694>
   1464c:	movw	r1, #24659	; 0x6053
   14650:	movt	r1, #1
   14654:	mov	r0, #0
   14658:	mov	r2, #5
   1465c:	bl	10ea4 <dcgettext@plt>
   14660:	mov	ip, r0
   14664:	ldr	r3, [r7]
   14668:	ldr	r0, [r7, #4]
   1466c:	ldr	r1, [r7, #8]
   14670:	ldr	r6, [r7, #12]
   14674:	ldr	r5, [r7, #16]
   14678:	ldr	r4, [r7, #20]
   1467c:	ldr	r2, [r7, #24]
   14680:	ldr	lr, [r7, #28]
   14684:	ldr	r7, [r7, #32]
   14688:	stm	sp, {r0, r1, r6}
   1468c:	str	r5, [sp, #12]
   14690:	str	r4, [sp, #16]
   14694:	str	r2, [sp, #20]
   14698:	str	lr, [sp, #24]
   1469c:	str	r7, [sp, #28]
   146a0:	b	146e8 <__assert_fail@plt+0x3688>
   146a4:	movw	r1, #24611	; 0x6023
   146a8:	movt	r1, #1
   146ac:	mov	r0, #0
   146b0:	mov	r2, #5
   146b4:	bl	10ea4 <dcgettext@plt>
   146b8:	mov	ip, r0
   146bc:	ldr	r3, [r7]
   146c0:	ldmib	r7, {r0, r1, r6}
   146c4:	ldr	r5, [r7, #16]
   146c8:	ldr	r4, [r7, #20]
   146cc:	ldr	r2, [r7, #24]
   146d0:	ldr	r7, [r7, #28]
   146d4:	stm	sp, {r0, r1, r6}
   146d8:	str	r5, [sp, #12]
   146dc:	str	r4, [sp, #16]
   146e0:	str	r2, [sp, #20]
   146e4:	str	r7, [sp, #24]
   146e8:	mov	r0, r8
   146ec:	mov	r1, #1
   146f0:	mov	r2, ip
   146f4:	bl	10fc4 <__fprintf_chk@plt>
   146f8:	sub	sp, fp, #24
   146fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14700:	push	{r4, sl, fp, lr}
   14704:	add	fp, sp, #8
   14708:	sub	sp, sp, #8
   1470c:	mov	lr, #0
   14710:	ldr	ip, [fp, #8]
   14714:	ldr	r4, [ip, lr, lsl #2]
   14718:	add	lr, lr, #1
   1471c:	cmp	r4, #0
   14720:	bne	14714 <__assert_fail@plt+0x36b4>
   14724:	sub	r4, lr, #1
   14728:	str	ip, [sp]
   1472c:	str	r4, [sp, #4]
   14730:	bl	143cc <__assert_fail@plt+0x336c>
   14734:	sub	sp, fp, #8
   14738:	pop	{r4, sl, fp, pc}
   1473c:	push	{r4, r5, fp, lr}
   14740:	add	fp, sp, #8
   14744:	sub	sp, sp, #48	; 0x30
   14748:	mov	ip, #0
   1474c:	ldr	r4, [fp, #8]
   14750:	add	lr, sp, #8
   14754:	ldr	r5, [r4]
   14758:	str	r5, [lr, ip, lsl #2]
   1475c:	cmp	r5, #0
   14760:	beq	14774 <__assert_fail@plt+0x3714>
   14764:	add	ip, ip, #1
   14768:	add	r4, r4, #4
   1476c:	cmp	ip, #10
   14770:	bcc	14754 <__assert_fail@plt+0x36f4>
   14774:	str	lr, [sp]
   14778:	str	ip, [sp, #4]
   1477c:	bl	143cc <__assert_fail@plt+0x336c>
   14780:	sub	sp, fp, #8
   14784:	pop	{r4, r5, fp, pc}
   14788:	push	{fp, lr}
   1478c:	mov	fp, sp
   14790:	sub	sp, sp, #8
   14794:	add	ip, fp, #8
   14798:	str	ip, [sp, #4]
   1479c:	str	ip, [sp]
   147a0:	bl	1473c <__assert_fail@plt+0x36dc>
   147a4:	mov	sp, fp
   147a8:	pop	{fp, pc}
   147ac:	push	{fp, lr}
   147b0:	mov	fp, sp
   147b4:	movw	r0, #29012	; 0x7154
   147b8:	movt	r0, #2
   147bc:	ldr	r1, [r0]
   147c0:	movw	r0, #22816	; 0x5920
   147c4:	movt	r0, #1
   147c8:	bl	10e14 <fputs_unlocked@plt>
   147cc:	movw	r1, #24771	; 0x60c3
   147d0:	movt	r1, #1
   147d4:	mov	r0, #0
   147d8:	mov	r2, #5
   147dc:	bl	10ea4 <dcgettext@plt>
   147e0:	mov	r1, r0
   147e4:	movw	r2, #24791	; 0x60d7
   147e8:	movt	r2, #1
   147ec:	mov	r0, #1
   147f0:	bl	10fac <__printf_chk@plt>
   147f4:	movw	r1, #24813	; 0x60ed
   147f8:	movt	r1, #1
   147fc:	mov	r0, #0
   14800:	mov	r2, #5
   14804:	bl	10ea4 <dcgettext@plt>
   14808:	mov	r1, r0
   1480c:	movw	r2, #22318	; 0x572e
   14810:	movt	r2, #1
   14814:	movw	r3, #22625	; 0x5861
   14818:	movt	r3, #1
   1481c:	mov	r0, #1
   14820:	bl	10fac <__printf_chk@plt>
   14824:	movw	r1, #24833	; 0x6101
   14828:	movt	r1, #1
   1482c:	mov	r0, #0
   14830:	mov	r2, #5
   14834:	bl	10ea4 <dcgettext@plt>
   14838:	mov	r1, r0
   1483c:	movw	r2, #24872	; 0x6128
   14840:	movt	r2, #1
   14844:	mov	r0, #1
   14848:	pop	{fp, lr}
   1484c:	b	10fac <__printf_chk@plt>
   14850:	b	14854 <__assert_fail@plt+0x37f4>
   14854:	push	{r4, r5, r6, sl, fp, lr}
   14858:	add	fp, sp, #16
   1485c:	mov	r4, r2
   14860:	mov	r5, r1
   14864:	mov	r6, r0
   14868:	bl	151f0 <__assert_fail@plt+0x4190>
   1486c:	cmp	r0, #0
   14870:	popne	{r4, r5, r6, sl, fp, pc}
   14874:	cmp	r6, #0
   14878:	beq	1488c <__assert_fail@plt+0x382c>
   1487c:	cmp	r5, #0
   14880:	cmpne	r4, #0
   14884:	bne	1488c <__assert_fail@plt+0x382c>
   14888:	pop	{r4, r5, r6, sl, fp, pc}
   1488c:	bl	14c40 <__assert_fail@plt+0x3be0>
   14890:	push	{fp, lr}
   14894:	mov	fp, sp
   14898:	bl	14cd8 <__assert_fail@plt+0x3c78>
   1489c:	bl	148a4 <__assert_fail@plt+0x3844>
   148a0:	pop	{fp, pc}
   148a4:	cmp	r0, #0
   148a8:	bxne	lr
   148ac:	push	{fp, lr}
   148b0:	mov	fp, sp
   148b4:	bl	14c40 <__assert_fail@plt+0x3be0>
   148b8:	push	{fp, lr}
   148bc:	mov	fp, sp
   148c0:	bl	15124 <__assert_fail@plt+0x40c4>
   148c4:	bl	148a4 <__assert_fail@plt+0x3844>
   148c8:	pop	{fp, pc}
   148cc:	b	14890 <__assert_fail@plt+0x3830>
   148d0:	push	{r4, r5, fp, lr}
   148d4:	add	fp, sp, #8
   148d8:	mov	r4, r1
   148dc:	mov	r5, r0
   148e0:	bl	14d08 <__assert_fail@plt+0x3ca8>
   148e4:	cmp	r0, #0
   148e8:	popne	{r4, r5, fp, pc}
   148ec:	cmp	r5, #0
   148f0:	beq	14900 <__assert_fail@plt+0x38a0>
   148f4:	cmp	r4, #0
   148f8:	bne	14900 <__assert_fail@plt+0x38a0>
   148fc:	pop	{r4, r5, fp, pc}
   14900:	bl	14c40 <__assert_fail@plt+0x3be0>
   14904:	push	{fp, lr}
   14908:	mov	fp, sp
   1490c:	bl	15128 <__assert_fail@plt+0x40c8>
   14910:	bl	148a4 <__assert_fail@plt+0x3844>
   14914:	pop	{fp, pc}
   14918:	push	{fp, lr}
   1491c:	mov	fp, sp
   14920:	bl	15138 <__assert_fail@plt+0x40d8>
   14924:	bl	148a4 <__assert_fail@plt+0x3844>
   14928:	pop	{fp, pc}
   1492c:	push	{fp, lr}
   14930:	mov	fp, sp
   14934:	mov	r2, r1
   14938:	mov	r1, r0
   1493c:	mov	r0, #0
   14940:	bl	14854 <__assert_fail@plt+0x37f4>
   14944:	pop	{fp, pc}
   14948:	mov	r2, r1
   1494c:	mov	r1, r0
   14950:	mov	r0, #0
   14954:	b	14918 <__assert_fail@plt+0x38b8>
   14958:	mov	r2, #1
   1495c:	b	14960 <__assert_fail@plt+0x3900>
   14960:	push	{r4, r5, fp, lr}
   14964:	add	fp, sp, #8
   14968:	mov	r4, r1
   1496c:	ldr	r5, [r1]
   14970:	cmp	r0, #0
   14974:	beq	1498c <__assert_fail@plt+0x392c>
   14978:	mov	r1, #1
   1497c:	add	r1, r1, r5, lsr #1
   14980:	adds	r5, r5, r1
   14984:	bcc	149a4 <__assert_fail@plt+0x3944>
   14988:	bl	14c40 <__assert_fail@plt+0x3be0>
   1498c:	cmp	r5, #0
   14990:	bne	149a4 <__assert_fail@plt+0x3944>
   14994:	mov	r1, #64	; 0x40
   14998:	udiv	r5, r1, r2
   1499c:	cmp	r2, #64	; 0x40
   149a0:	addhi	r5, r5, #1
   149a4:	mov	r1, r5
   149a8:	bl	14854 <__assert_fail@plt+0x37f4>
   149ac:	str	r5, [r4]
   149b0:	pop	{r4, r5, fp, pc}
   149b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149b8:	add	fp, sp, #24
   149bc:	mov	r8, r1
   149c0:	ldr	r6, [r1]
   149c4:	add	r1, r6, r6, asr #1
   149c8:	cmp	r1, r6
   149cc:	mvnvs	r1, #-2147483648	; 0x80000000
   149d0:	cmp	r1, r3
   149d4:	mov	r5, r1
   149d8:	movgt	r5, r3
   149dc:	cmn	r3, #1
   149e0:	movle	r5, r1
   149e4:	ldr	r4, [fp, #8]
   149e8:	cmn	r4, #1
   149ec:	ble	14a14 <__assert_fail@plt+0x39b4>
   149f0:	cmp	r4, #0
   149f4:	beq	14a68 <__assert_fail@plt+0x3a08>
   149f8:	cmn	r5, #1
   149fc:	ble	14a3c <__assert_fail@plt+0x39dc>
   14a00:	mvn	r7, #-2147483648	; 0x80000000
   14a04:	udiv	r1, r7, r4
   14a08:	cmp	r1, r5
   14a0c:	bge	14a68 <__assert_fail@plt+0x3a08>
   14a10:	b	14a78 <__assert_fail@plt+0x3a18>
   14a14:	cmn	r5, #1
   14a18:	ble	14a58 <__assert_fail@plt+0x39f8>
   14a1c:	cmn	r4, #1
   14a20:	beq	14a68 <__assert_fail@plt+0x3a08>
   14a24:	mov	r1, #-2147483648	; 0x80000000
   14a28:	sdiv	r1, r1, r4
   14a2c:	mvn	r7, #-2147483648	; 0x80000000
   14a30:	cmp	r1, r5
   14a34:	bge	14a68 <__assert_fail@plt+0x3a08>
   14a38:	b	14a78 <__assert_fail@plt+0x3a18>
   14a3c:	beq	14a68 <__assert_fail@plt+0x3a08>
   14a40:	mov	r1, #-2147483648	; 0x80000000
   14a44:	sdiv	r1, r1, r5
   14a48:	mvn	r7, #-2147483648	; 0x80000000
   14a4c:	cmp	r1, r4
   14a50:	bge	14a68 <__assert_fail@plt+0x3a08>
   14a54:	b	14a78 <__assert_fail@plt+0x3a18>
   14a58:	mvn	r7, #-2147483648	; 0x80000000
   14a5c:	sdiv	r1, r7, r4
   14a60:	cmp	r5, r1
   14a64:	blt	14a78 <__assert_fail@plt+0x3a18>
   14a68:	mul	r1, r5, r4
   14a6c:	mov	r7, #64	; 0x40
   14a70:	cmp	r1, #63	; 0x3f
   14a74:	bgt	14a80 <__assert_fail@plt+0x3a20>
   14a78:	sdiv	r5, r7, r4
   14a7c:	mul	r1, r5, r4
   14a80:	cmp	r0, #0
   14a84:	moveq	r7, #0
   14a88:	streq	r7, [r8]
   14a8c:	sub	r7, r5, r6
   14a90:	cmp	r7, r2
   14a94:	bge	14b40 <__assert_fail@plt+0x3ae0>
   14a98:	add	r5, r6, r2
   14a9c:	mov	r1, #0
   14aa0:	cmp	r5, r3
   14aa4:	mov	r2, #0
   14aa8:	movwgt	r2, #1
   14aac:	cmn	r3, #1
   14ab0:	movwgt	r1, #1
   14ab4:	cmp	r5, r6
   14ab8:	bvs	14b28 <__assert_fail@plt+0x3ac8>
   14abc:	ands	r1, r1, r2
   14ac0:	bne	14b28 <__assert_fail@plt+0x3ac8>
   14ac4:	cmn	r4, #1
   14ac8:	ble	14af0 <__assert_fail@plt+0x3a90>
   14acc:	cmp	r4, #0
   14ad0:	beq	14b3c <__assert_fail@plt+0x3adc>
   14ad4:	cmn	r5, #1
   14ad8:	ble	14b14 <__assert_fail@plt+0x3ab4>
   14adc:	mvn	r1, #-2147483648	; 0x80000000
   14ae0:	udiv	r1, r1, r4
   14ae4:	cmp	r1, r5
   14ae8:	bge	14b3c <__assert_fail@plt+0x3adc>
   14aec:	b	14b28 <__assert_fail@plt+0x3ac8>
   14af0:	cmn	r5, #1
   14af4:	ble	14b2c <__assert_fail@plt+0x3acc>
   14af8:	cmn	r4, #1
   14afc:	beq	14b3c <__assert_fail@plt+0x3adc>
   14b00:	mov	r1, #-2147483648	; 0x80000000
   14b04:	sdiv	r1, r1, r4
   14b08:	cmp	r1, r5
   14b0c:	bge	14b3c <__assert_fail@plt+0x3adc>
   14b10:	b	14b28 <__assert_fail@plt+0x3ac8>
   14b14:	beq	14b3c <__assert_fail@plt+0x3adc>
   14b18:	mov	r1, #-2147483648	; 0x80000000
   14b1c:	sdiv	r1, r1, r5
   14b20:	cmp	r1, r4
   14b24:	bge	14b3c <__assert_fail@plt+0x3adc>
   14b28:	bl	14c40 <__assert_fail@plt+0x3be0>
   14b2c:	mvn	r1, #-2147483648	; 0x80000000
   14b30:	sdiv	r1, r1, r4
   14b34:	cmp	r5, r1
   14b38:	blt	14b28 <__assert_fail@plt+0x3ac8>
   14b3c:	mul	r1, r5, r4
   14b40:	bl	148d0 <__assert_fail@plt+0x3870>
   14b44:	str	r5, [r8]
   14b48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b4c:	mov	r1, #1
   14b50:	b	14b54 <__assert_fail@plt+0x3af4>
   14b54:	push	{fp, lr}
   14b58:	mov	fp, sp
   14b5c:	bl	14c84 <__assert_fail@plt+0x3c24>
   14b60:	bl	148a4 <__assert_fail@plt+0x3844>
   14b64:	pop	{fp, pc}
   14b68:	mov	r1, #1
   14b6c:	b	14b70 <__assert_fail@plt+0x3b10>
   14b70:	push	{fp, lr}
   14b74:	mov	fp, sp
   14b78:	bl	15134 <__assert_fail@plt+0x40d4>
   14b7c:	bl	148a4 <__assert_fail@plt+0x3844>
   14b80:	pop	{fp, pc}
   14b84:	push	{r4, r5, r6, sl, fp, lr}
   14b88:	add	fp, sp, #16
   14b8c:	mov	r4, r1
   14b90:	mov	r5, r0
   14b94:	mov	r0, r1
   14b98:	bl	14890 <__assert_fail@plt+0x3830>
   14b9c:	mov	r6, r0
   14ba0:	mov	r1, r5
   14ba4:	mov	r2, r4
   14ba8:	bl	10e68 <memcpy@plt>
   14bac:	mov	r0, r6
   14bb0:	pop	{r4, r5, r6, sl, fp, pc}
   14bb4:	push	{r4, r5, r6, sl, fp, lr}
   14bb8:	add	fp, sp, #16
   14bbc:	mov	r4, r1
   14bc0:	mov	r5, r0
   14bc4:	mov	r0, r1
   14bc8:	bl	148b8 <__assert_fail@plt+0x3858>
   14bcc:	mov	r6, r0
   14bd0:	mov	r1, r5
   14bd4:	mov	r2, r4
   14bd8:	bl	10e68 <memcpy@plt>
   14bdc:	mov	r0, r6
   14be0:	pop	{r4, r5, r6, sl, fp, pc}
   14be4:	push	{r4, r5, r6, sl, fp, lr}
   14be8:	add	fp, sp, #16
   14bec:	mov	r4, r1
   14bf0:	mov	r5, r0
   14bf4:	add	r0, r1, #1
   14bf8:	bl	148b8 <__assert_fail@plt+0x3858>
   14bfc:	mov	r6, r0
   14c00:	mov	r0, #0
   14c04:	strb	r0, [r6, r4]
   14c08:	mov	r0, r6
   14c0c:	mov	r1, r5
   14c10:	mov	r2, r4
   14c14:	bl	10e68 <memcpy@plt>
   14c18:	mov	r0, r6
   14c1c:	pop	{r4, r5, r6, sl, fp, pc}
   14c20:	push	{r4, sl, fp, lr}
   14c24:	add	fp, sp, #8
   14c28:	mov	r4, r0
   14c2c:	bl	10f7c <strlen@plt>
   14c30:	add	r1, r0, #1
   14c34:	mov	r0, r4
   14c38:	pop	{r4, sl, fp, lr}
   14c3c:	b	14b84 <__assert_fail@plt+0x3b24>
   14c40:	push	{fp, lr}
   14c44:	mov	fp, sp
   14c48:	movw	r0, #28916	; 0x70f4
   14c4c:	movt	r0, #2
   14c50:	ldr	r4, [r0]
   14c54:	movw	r1, #24948	; 0x6174
   14c58:	movt	r1, #1
   14c5c:	mov	r0, #0
   14c60:	mov	r2, #5
   14c64:	bl	10ea4 <dcgettext@plt>
   14c68:	mov	r3, r0
   14c6c:	movw	r2, #23221	; 0x5ab5
   14c70:	movt	r2, #1
   14c74:	mov	r0, r4
   14c78:	mov	r1, #0
   14c7c:	bl	10f1c <error@plt>
   14c80:	bl	1103c <abort@plt>
   14c84:	clz	r2, r1
   14c88:	lsr	r2, r2, #5
   14c8c:	clz	r3, r0
   14c90:	lsr	r3, r3, #5
   14c94:	orrs	r2, r3, r2
   14c98:	movwne	r1, #1
   14c9c:	movwne	r0, #1
   14ca0:	cmp	r1, #0
   14ca4:	beq	14cd4 <__assert_fail@plt+0x3c74>
   14ca8:	mvn	r2, #-2147483648	; 0x80000000
   14cac:	udiv	r2, r2, r1
   14cb0:	cmp	r2, r0
   14cb4:	bcs	14cd4 <__assert_fail@plt+0x3c74>
   14cb8:	push	{fp, lr}
   14cbc:	mov	fp, sp
   14cc0:	bl	10f88 <__errno_location@plt>
   14cc4:	mov	r1, #12
   14cc8:	str	r1, [r0]
   14ccc:	mov	r0, #0
   14cd0:	pop	{fp, pc}
   14cd4:	b	10e08 <calloc@plt>
   14cd8:	cmp	r0, #0
   14cdc:	movweq	r0, #1
   14ce0:	cmn	r0, #1
   14ce4:	ble	14cec <__assert_fail@plt+0x3c8c>
   14ce8:	b	10f28 <malloc@plt>
   14cec:	push	{fp, lr}
   14cf0:	mov	fp, sp
   14cf4:	bl	10f88 <__errno_location@plt>
   14cf8:	mov	r1, #12
   14cfc:	str	r1, [r0]
   14d00:	mov	r0, #0
   14d04:	pop	{fp, pc}
   14d08:	push	{fp, lr}
   14d0c:	mov	fp, sp
   14d10:	cmp	r0, #0
   14d14:	beq	14d30 <__assert_fail@plt+0x3cd0>
   14d18:	cmp	r1, #0
   14d1c:	beq	14d3c <__assert_fail@plt+0x3cdc>
   14d20:	cmn	r1, #1
   14d24:	ble	14d48 <__assert_fail@plt+0x3ce8>
   14d28:	pop	{fp, lr}
   14d2c:	b	10eb0 <realloc@plt>
   14d30:	mov	r0, r1
   14d34:	pop	{fp, lr}
   14d38:	b	14cd8 <__assert_fail@plt+0x3c78>
   14d3c:	bl	126b4 <__assert_fail@plt+0x1654>
   14d40:	mov	r0, #0
   14d44:	pop	{fp, pc}
   14d48:	bl	10f88 <__errno_location@plt>
   14d4c:	mov	r1, #12
   14d50:	str	r1, [r0]
   14d54:	mov	r0, #0
   14d58:	pop	{fp, pc}
   14d5c:	mov	r1, r0
   14d60:	sub	r2, r0, #65	; 0x41
   14d64:	mov	r0, #1
   14d68:	cmp	r2, #26
   14d6c:	subcs	r2, r1, #97	; 0x61
   14d70:	cmpcs	r2, #26
   14d74:	bcs	14d7c <__assert_fail@plt+0x3d1c>
   14d78:	bx	lr
   14d7c:	sub	r1, r1, #48	; 0x30
   14d80:	cmp	r1, #10
   14d84:	movcs	r0, #0
   14d88:	bx	lr
   14d8c:	mov	r1, r0
   14d90:	sub	r2, r0, #65	; 0x41
   14d94:	mov	r0, #1
   14d98:	cmp	r2, #26
   14d9c:	subcs	r1, r1, #97	; 0x61
   14da0:	cmpcs	r1, #26
   14da4:	movcs	r0, #0
   14da8:	bx	lr
   14dac:	mov	r1, #0
   14db0:	cmp	r0, #128	; 0x80
   14db4:	movwcc	r1, #1
   14db8:	mov	r0, r1
   14dbc:	bx	lr
   14dc0:	sub	r1, r0, #9
   14dc4:	clz	r1, r1
   14dc8:	lsr	r1, r1, #5
   14dcc:	sub	r0, r0, #32
   14dd0:	clz	r0, r0
   14dd4:	lsr	r0, r0, #5
   14dd8:	orr	r0, r0, r1
   14ddc:	bx	lr
   14de0:	mov	r1, r0
   14de4:	mov	r0, #1
   14de8:	cmp	r1, #32
   14dec:	bxcc	lr
   14df0:	cmp	r1, #127	; 0x7f
   14df4:	movne	r0, #0
   14df8:	bx	lr
   14dfc:	sub	r1, r0, #48	; 0x30
   14e00:	mov	r0, #0
   14e04:	cmp	r1, #10
   14e08:	movwcc	r0, #1
   14e0c:	bx	lr
   14e10:	sub	r1, r0, #33	; 0x21
   14e14:	mov	r0, #0
   14e18:	cmp	r1, #94	; 0x5e
   14e1c:	movwcc	r0, #1
   14e20:	bx	lr
   14e24:	sub	r1, r0, #97	; 0x61
   14e28:	mov	r0, #0
   14e2c:	cmp	r1, #26
   14e30:	movwcc	r0, #1
   14e34:	bx	lr
   14e38:	sub	r1, r0, #32
   14e3c:	mov	r0, #0
   14e40:	cmp	r1, #95	; 0x5f
   14e44:	movwcc	r0, #1
   14e48:	bx	lr
   14e4c:	sub	r1, r0, #33	; 0x21
   14e50:	cmp	r1, #93	; 0x5d
   14e54:	bhi	14fe0 <__assert_fail@plt+0x3f80>
   14e58:	mov	r0, #1
   14e5c:	add	r2, pc, #0
   14e60:	ldr	pc, [r2, r1, lsl #2]
   14e64:	ldrdeq	r4, [r1], -ip
   14e68:	ldrdeq	r4, [r1], -ip
   14e6c:	ldrdeq	r4, [r1], -ip
   14e70:	ldrdeq	r4, [r1], -ip
   14e74:	ldrdeq	r4, [r1], -ip
   14e78:	ldrdeq	r4, [r1], -ip
   14e7c:	ldrdeq	r4, [r1], -ip
   14e80:	ldrdeq	r4, [r1], -ip
   14e84:	ldrdeq	r4, [r1], -ip
   14e88:	ldrdeq	r4, [r1], -ip
   14e8c:	ldrdeq	r4, [r1], -ip
   14e90:	ldrdeq	r4, [r1], -ip
   14e94:	ldrdeq	r4, [r1], -ip
   14e98:	ldrdeq	r4, [r1], -ip
   14e9c:	ldrdeq	r4, [r1], -ip
   14ea0:	andeq	r4, r1, r0, ror #31
   14ea4:	andeq	r4, r1, r0, ror #31
   14ea8:	andeq	r4, r1, r0, ror #31
   14eac:	andeq	r4, r1, r0, ror #31
   14eb0:	andeq	r4, r1, r0, ror #31
   14eb4:	andeq	r4, r1, r0, ror #31
   14eb8:	andeq	r4, r1, r0, ror #31
   14ebc:	andeq	r4, r1, r0, ror #31
   14ec0:	andeq	r4, r1, r0, ror #31
   14ec4:	andeq	r4, r1, r0, ror #31
   14ec8:	ldrdeq	r4, [r1], -ip
   14ecc:	ldrdeq	r4, [r1], -ip
   14ed0:	ldrdeq	r4, [r1], -ip
   14ed4:	ldrdeq	r4, [r1], -ip
   14ed8:	ldrdeq	r4, [r1], -ip
   14edc:	ldrdeq	r4, [r1], -ip
   14ee0:	ldrdeq	r4, [r1], -ip
   14ee4:	andeq	r4, r1, r0, ror #31
   14ee8:	andeq	r4, r1, r0, ror #31
   14eec:	andeq	r4, r1, r0, ror #31
   14ef0:	andeq	r4, r1, r0, ror #31
   14ef4:	andeq	r4, r1, r0, ror #31
   14ef8:	andeq	r4, r1, r0, ror #31
   14efc:	andeq	r4, r1, r0, ror #31
   14f00:	andeq	r4, r1, r0, ror #31
   14f04:	andeq	r4, r1, r0, ror #31
   14f08:	andeq	r4, r1, r0, ror #31
   14f0c:	andeq	r4, r1, r0, ror #31
   14f10:	andeq	r4, r1, r0, ror #31
   14f14:	andeq	r4, r1, r0, ror #31
   14f18:	andeq	r4, r1, r0, ror #31
   14f1c:	andeq	r4, r1, r0, ror #31
   14f20:	andeq	r4, r1, r0, ror #31
   14f24:	andeq	r4, r1, r0, ror #31
   14f28:	andeq	r4, r1, r0, ror #31
   14f2c:	andeq	r4, r1, r0, ror #31
   14f30:	andeq	r4, r1, r0, ror #31
   14f34:	andeq	r4, r1, r0, ror #31
   14f38:	andeq	r4, r1, r0, ror #31
   14f3c:	andeq	r4, r1, r0, ror #31
   14f40:	andeq	r4, r1, r0, ror #31
   14f44:	andeq	r4, r1, r0, ror #31
   14f48:	andeq	r4, r1, r0, ror #31
   14f4c:	ldrdeq	r4, [r1], -ip
   14f50:	ldrdeq	r4, [r1], -ip
   14f54:	ldrdeq	r4, [r1], -ip
   14f58:	ldrdeq	r4, [r1], -ip
   14f5c:	ldrdeq	r4, [r1], -ip
   14f60:	ldrdeq	r4, [r1], -ip
   14f64:	andeq	r4, r1, r0, ror #31
   14f68:	andeq	r4, r1, r0, ror #31
   14f6c:	andeq	r4, r1, r0, ror #31
   14f70:	andeq	r4, r1, r0, ror #31
   14f74:	andeq	r4, r1, r0, ror #31
   14f78:	andeq	r4, r1, r0, ror #31
   14f7c:	andeq	r4, r1, r0, ror #31
   14f80:	andeq	r4, r1, r0, ror #31
   14f84:	andeq	r4, r1, r0, ror #31
   14f88:	andeq	r4, r1, r0, ror #31
   14f8c:	andeq	r4, r1, r0, ror #31
   14f90:	andeq	r4, r1, r0, ror #31
   14f94:	andeq	r4, r1, r0, ror #31
   14f98:	andeq	r4, r1, r0, ror #31
   14f9c:	andeq	r4, r1, r0, ror #31
   14fa0:	andeq	r4, r1, r0, ror #31
   14fa4:	andeq	r4, r1, r0, ror #31
   14fa8:	andeq	r4, r1, r0, ror #31
   14fac:	andeq	r4, r1, r0, ror #31
   14fb0:	andeq	r4, r1, r0, ror #31
   14fb4:	andeq	r4, r1, r0, ror #31
   14fb8:	andeq	r4, r1, r0, ror #31
   14fbc:	andeq	r4, r1, r0, ror #31
   14fc0:	andeq	r4, r1, r0, ror #31
   14fc4:	andeq	r4, r1, r0, ror #31
   14fc8:	andeq	r4, r1, r0, ror #31
   14fcc:	ldrdeq	r4, [r1], -ip
   14fd0:	ldrdeq	r4, [r1], -ip
   14fd4:	ldrdeq	r4, [r1], -ip
   14fd8:	ldrdeq	r4, [r1], -ip
   14fdc:	bx	lr
   14fe0:	mov	r0, #0
   14fe4:	bx	lr
   14fe8:	sub	r0, r0, #9
   14fec:	cmp	r0, #23
   14ff0:	movhi	r0, #0
   14ff4:	bxhi	lr
   14ff8:	bic	r0, r0, #-16777216	; 0xff000000
   14ffc:	movw	r1, #31
   15000:	movt	r1, #128	; 0x80
   15004:	mov	r2, #1
   15008:	and	r0, r2, r1, lsr r0
   1500c:	bx	lr
   15010:	sub	r1, r0, #65	; 0x41
   15014:	mov	r0, #0
   15018:	cmp	r1, #26
   1501c:	movwcc	r0, #1
   15020:	bx	lr
   15024:	mov	r1, r0
   15028:	sub	r2, r0, #48	; 0x30
   1502c:	mov	r0, #1
   15030:	cmp	r2, #22
   15034:	bhi	1504c <__assert_fail@plt+0x3fec>
   15038:	mov	ip, #1
   1503c:	movw	r3, #1023	; 0x3ff
   15040:	movt	r3, #126	; 0x7e
   15044:	tst	r3, ip, lsl r2
   15048:	bxne	lr
   1504c:	sub	r1, r1, #97	; 0x61
   15050:	cmp	r1, #6
   15054:	movcs	r0, #0
   15058:	bxcs	lr
   1505c:	bx	lr
   15060:	sub	r1, r0, #65	; 0x41
   15064:	cmp	r1, #26
   15068:	addcc	r0, r0, #32
   1506c:	bx	lr
   15070:	sub	r1, r0, #97	; 0x61
   15074:	cmp	r1, #26
   15078:	subcc	r0, r0, #32
   1507c:	bx	lr
   15080:	push	{r4, r5, r6, sl, fp, lr}
   15084:	add	fp, sp, #16
   15088:	mov	r4, r0
   1508c:	bl	10ef8 <__fpending@plt>
   15090:	mov	r5, r0
   15094:	mov	r0, r4
   15098:	bl	10f04 <ferror_unlocked@plt>
   1509c:	mov	r6, r0
   150a0:	mov	r0, r4
   150a4:	bl	125ac <__assert_fail@plt+0x154c>
   150a8:	cmp	r6, #0
   150ac:	beq	150cc <__assert_fail@plt+0x406c>
   150b0:	mvn	r4, #0
   150b4:	cmp	r0, #0
   150b8:	bne	15100 <__assert_fail@plt+0x40a0>
   150bc:	bl	10f88 <__errno_location@plt>
   150c0:	mov	r1, #0
   150c4:	str	r1, [r0]
   150c8:	b	15100 <__assert_fail@plt+0x40a0>
   150cc:	cmp	r0, #0
   150d0:	mov	r4, r0
   150d4:	mvnne	r4, #0
   150d8:	cmp	r5, #0
   150dc:	bne	15100 <__assert_fail@plt+0x40a0>
   150e0:	cmp	r0, #0
   150e4:	beq	15100 <__assert_fail@plt+0x40a0>
   150e8:	bl	10f88 <__errno_location@plt>
   150ec:	ldr	r0, [r0]
   150f0:	subs	r4, r0, #9
   150f4:	mvnne	r4, #0
   150f8:	mov	r0, r4
   150fc:	pop	{r4, r5, r6, sl, fp, pc}
   15100:	mov	r0, r4
   15104:	pop	{r4, r5, r6, sl, fp, pc}
   15108:	push	{fp, lr}
   1510c:	mov	fp, sp
   15110:	bl	10f88 <__errno_location@plt>
   15114:	mov	r1, #12
   15118:	str	r1, [r0]
   1511c:	mov	r0, #0
   15120:	pop	{fp, pc}
   15124:	b	14cd8 <__assert_fail@plt+0x3c78>
   15128:	cmp	r1, #0
   1512c:	orreq	r1, r1, #1
   15130:	b	14d08 <__assert_fail@plt+0x3ca8>
   15134:	b	14c84 <__assert_fail@plt+0x3c24>
   15138:	clz	r3, r2
   1513c:	lsr	ip, r3, #5
   15140:	clz	r3, r1
   15144:	lsr	r3, r3, #5
   15148:	orrs	r3, r3, ip
   1514c:	movwne	r1, #1
   15150:	movwne	r2, #1
   15154:	b	151f0 <__assert_fail@plt+0x4190>
   15158:	push	{fp, lr}
   1515c:	mov	fp, sp
   15160:	mov	r0, #14
   15164:	bl	11000 <nl_langinfo@plt>
   15168:	movw	r1, #22817	; 0x5921
   1516c:	movt	r1, #1
   15170:	cmp	r0, #0
   15174:	movne	r1, r0
   15178:	ldrb	r2, [r1]
   1517c:	movw	r0, #24965	; 0x6185
   15180:	movt	r0, #1
   15184:	cmp	r2, #0
   15188:	movne	r0, r1
   1518c:	pop	{fp, pc}
   15190:	push	{r4, r5, r6, r7, fp, lr}
   15194:	add	fp, sp, #16
   15198:	sub	sp, sp, #8
   1519c:	mov	r7, r2
   151a0:	mov	r4, r1
   151a4:	add	r5, sp, #4
   151a8:	cmp	r0, #0
   151ac:	movne	r5, r0
   151b0:	mov	r0, r5
   151b4:	bl	10f10 <mbrtowc@plt>
   151b8:	mov	r6, r0
   151bc:	cmp	r7, #0
   151c0:	beq	151e4 <__assert_fail@plt+0x4184>
   151c4:	cmn	r6, #2
   151c8:	bcc	151e4 <__assert_fail@plt+0x4184>
   151cc:	mov	r0, #0
   151d0:	bl	1522c <__assert_fail@plt+0x41cc>
   151d4:	cmp	r0, #0
   151d8:	ldrbeq	r0, [r4]
   151dc:	streq	r0, [r5]
   151e0:	moveq	r6, #1
   151e4:	mov	r0, r6
   151e8:	sub	sp, fp, #16
   151ec:	pop	{r4, r5, r6, r7, fp, pc}
   151f0:	cmp	r2, #0
   151f4:	beq	15224 <__assert_fail@plt+0x41c4>
   151f8:	mvn	r3, #0
   151fc:	udiv	r3, r3, r2
   15200:	cmp	r3, r1
   15204:	bcs	15224 <__assert_fail@plt+0x41c4>
   15208:	push	{fp, lr}
   1520c:	mov	fp, sp
   15210:	bl	10f88 <__errno_location@plt>
   15214:	mov	r1, #12
   15218:	str	r1, [r0]
   1521c:	mov	r0, #0
   15220:	pop	{fp, pc}
   15224:	mul	r1, r2, r1
   15228:	b	14d08 <__assert_fail@plt+0x3ca8>
   1522c:	push	{r4, sl, fp, lr}
   15230:	add	fp, sp, #8
   15234:	sub	sp, sp, #264	; 0x108
   15238:	add	r1, sp, #7
   1523c:	movw	r2, #257	; 0x101
   15240:	bl	15290 <__assert_fail@plt+0x4230>
   15244:	mov	r4, #0
   15248:	cmp	r0, #0
   1524c:	bne	15284 <__assert_fail@plt+0x4224>
   15250:	add	r0, sp, #7
   15254:	movw	r1, #24971	; 0x618b
   15258:	movt	r1, #1
   1525c:	bl	10e2c <strcmp@plt>
   15260:	cmp	r0, #0
   15264:	beq	15284 <__assert_fail@plt+0x4224>
   15268:	add	r0, sp, #7
   1526c:	movw	r1, #24973	; 0x618d
   15270:	movt	r1, #1
   15274:	bl	10e2c <strcmp@plt>
   15278:	mov	r4, r0
   1527c:	cmp	r0, #0
   15280:	movwne	r4, #1
   15284:	mov	r0, r4
   15288:	sub	sp, fp, #8
   1528c:	pop	{r4, sl, fp, pc}
   15290:	b	15294 <__assert_fail@plt+0x4234>
   15294:	push	{r4, r5, r6, r7, fp, lr}
   15298:	add	fp, sp, #16
   1529c:	mov	r6, r2
   152a0:	mov	r4, r1
   152a4:	bl	15330 <__assert_fail@plt+0x42d0>
   152a8:	cmp	r0, #0
   152ac:	beq	152dc <__assert_fail@plt+0x427c>
   152b0:	mov	r7, r0
   152b4:	bl	10f7c <strlen@plt>
   152b8:	cmp	r0, r6
   152bc:	bcs	152fc <__assert_fail@plt+0x429c>
   152c0:	add	r2, r0, #1
   152c4:	mov	r0, r4
   152c8:	mov	r1, r7
   152cc:	bl	10e68 <memcpy@plt>
   152d0:	mov	r5, #0
   152d4:	mov	r0, r5
   152d8:	pop	{r4, r5, r6, r7, fp, pc}
   152dc:	mov	r5, #22
   152e0:	cmp	r6, #0
   152e4:	movne	r0, #0
   152e8:	strbne	r0, [r4]
   152ec:	movne	r0, r5
   152f0:	popne	{r4, r5, r6, r7, fp, pc}
   152f4:	mov	r0, r5
   152f8:	pop	{r4, r5, r6, r7, fp, pc}
   152fc:	mov	r5, #34	; 0x22
   15300:	cmp	r6, #0
   15304:	beq	15324 <__assert_fail@plt+0x42c4>
   15308:	sub	r6, r6, #1
   1530c:	mov	r0, r4
   15310:	mov	r1, r7
   15314:	mov	r2, r6
   15318:	bl	10e68 <memcpy@plt>
   1531c:	mov	r0, #0
   15320:	strb	r0, [r4, r6]
   15324:	mov	r0, r5
   15328:	pop	{r4, r5, r6, r7, fp, pc}
   1532c:	b	15330 <__assert_fail@plt+0x42d0>
   15330:	mov	r1, #0
   15334:	b	10fe8 <setlocale@plt>
   15338:	cmp	r3, #0
   1533c:	cmpeq	r2, #0
   15340:	bne	15358 <__assert_fail@plt+0x42f8>
   15344:	cmp	r1, #0
   15348:	cmpeq	r0, #0
   1534c:	mvnne	r1, #0
   15350:	mvnne	r0, #0
   15354:	b	15374 <__assert_fail@plt+0x4314>
   15358:	sub	sp, sp, #8
   1535c:	push	{sp, lr}
   15360:	bl	15384 <__assert_fail@plt+0x4324>
   15364:	ldr	lr, [sp, #4]
   15368:	add	sp, sp, #8
   1536c:	pop	{r2, r3}
   15370:	bx	lr
   15374:	push	{r1, lr}
   15378:	mov	r0, #8
   1537c:	bl	10e20 <raise@plt>
   15380:	pop	{r1, pc}
   15384:	cmp	r1, r3
   15388:	cmpeq	r0, r2
   1538c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15390:	mov	r4, r0
   15394:	movcc	r0, #0
   15398:	mov	r5, r1
   1539c:	ldr	lr, [sp, #36]	; 0x24
   153a0:	movcc	r1, r0
   153a4:	bcc	154a0 <__assert_fail@plt+0x4440>
   153a8:	cmp	r3, #0
   153ac:	clzeq	ip, r2
   153b0:	clzne	ip, r3
   153b4:	addeq	ip, ip, #32
   153b8:	cmp	r5, #0
   153bc:	clzeq	r1, r4
   153c0:	addeq	r1, r1, #32
   153c4:	clzne	r1, r5
   153c8:	sub	ip, ip, r1
   153cc:	sub	sl, ip, #32
   153d0:	lsl	r9, r3, ip
   153d4:	rsb	fp, ip, #32
   153d8:	orr	r9, r9, r2, lsl sl
   153dc:	orr	r9, r9, r2, lsr fp
   153e0:	lsl	r8, r2, ip
   153e4:	cmp	r5, r9
   153e8:	cmpeq	r4, r8
   153ec:	movcc	r0, #0
   153f0:	movcc	r1, r0
   153f4:	bcc	15410 <__assert_fail@plt+0x43b0>
   153f8:	mov	r0, #1
   153fc:	subs	r4, r4, r8
   15400:	lsl	r1, r0, sl
   15404:	orr	r1, r1, r0, lsr fp
   15408:	lsl	r0, r0, ip
   1540c:	sbc	r5, r5, r9
   15410:	cmp	ip, #0
   15414:	beq	154a0 <__assert_fail@plt+0x4440>
   15418:	lsr	r6, r8, #1
   1541c:	orr	r6, r6, r9, lsl #31
   15420:	lsr	r7, r9, #1
   15424:	mov	r2, ip
   15428:	b	1544c <__assert_fail@plt+0x43ec>
   1542c:	subs	r3, r4, r6
   15430:	sbc	r8, r5, r7
   15434:	adds	r3, r3, r3
   15438:	adc	r8, r8, r8
   1543c:	adds	r4, r3, #1
   15440:	adc	r5, r8, #0
   15444:	subs	r2, r2, #1
   15448:	beq	15468 <__assert_fail@plt+0x4408>
   1544c:	cmp	r5, r7
   15450:	cmpeq	r4, r6
   15454:	bcs	1542c <__assert_fail@plt+0x43cc>
   15458:	adds	r4, r4, r4
   1545c:	adc	r5, r5, r5
   15460:	subs	r2, r2, #1
   15464:	bne	1544c <__assert_fail@plt+0x43ec>
   15468:	lsr	r3, r4, ip
   1546c:	orr	r3, r3, r5, lsl fp
   15470:	lsr	r2, r5, ip
   15474:	orr	r3, r3, r5, lsr sl
   15478:	adds	r0, r0, r4
   1547c:	mov	r4, r3
   15480:	lsl	r3, r2, ip
   15484:	orr	r3, r3, r4, lsl sl
   15488:	lsl	ip, r4, ip
   1548c:	orr	r3, r3, r4, lsr fp
   15490:	adc	r1, r1, r5
   15494:	subs	r0, r0, ip
   15498:	mov	r5, r2
   1549c:	sbc	r1, r1, r3
   154a0:	cmp	lr, #0
   154a4:	strdne	r4, [lr]
   154a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   154b0:	mov	r7, r0
   154b4:	ldr	r6, [pc, #72]	; 15504 <__assert_fail@plt+0x44a4>
   154b8:	ldr	r5, [pc, #72]	; 15508 <__assert_fail@plt+0x44a8>
   154bc:	add	r6, pc, r6
   154c0:	add	r5, pc, r5
   154c4:	sub	r6, r6, r5
   154c8:	mov	r8, r1
   154cc:	mov	r9, r2
   154d0:	bl	10de8 <calloc@plt-0x20>
   154d4:	asrs	r6, r6, #2
   154d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   154dc:	mov	r4, #0
   154e0:	add	r4, r4, #1
   154e4:	ldr	r3, [r5], #4
   154e8:	mov	r2, r9
   154ec:	mov	r1, r8
   154f0:	mov	r0, r7
   154f4:	blx	r3
   154f8:	cmp	r6, r4
   154fc:	bne	154e0 <__assert_fail@plt+0x4480>
   15500:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15504:	andeq	r1, r1, r8, asr #20
   15508:	andeq	r1, r1, r0, asr #20
   1550c:	bx	lr
   15510:	ldr	r3, [pc, #12]	; 15524 <__assert_fail@plt+0x44c4>
   15514:	mov	r1, #0
   15518:	add	r3, pc, r3
   1551c:	ldr	r2, [r3]
   15520:	b	10f94 <__cxa_atexit@plt>
   15524:	andeq	r1, r1, r4, asr #23

Disassembly of section .fini:

00015528 <.fini>:
   15528:	push	{r3, lr}
   1552c:	pop	{r3, pc}
