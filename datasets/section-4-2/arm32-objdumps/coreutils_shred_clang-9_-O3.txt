
../repos/coreutils/src/shred:     file format elf32-littlearm


Disassembly of section .init:

00011334 <.init>:
   11334:	push	{r3, lr}
   11338:	bl	1172c <__assert_fail@plt+0x48>
   1133c:	pop	{r3, pc}

Disassembly of section .plt:

00011340 <fdopen@plt-0x14>:
   11340:	push	{lr}		; (str lr, [sp, #-4]!)
   11344:	ldr	lr, [pc, #4]	; 11350 <fdopen@plt-0x4>
   11348:	add	lr, pc, lr
   1134c:	ldr	pc, [lr, #8]!
   11350:			; <UNDEFINED> instruction: 0x0001acb0

00011354 <fdopen@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #106496	; 0x1a000
   1135c:	ldr	pc, [ip, #3248]!	; 0xcb0

00011360 <calloc@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #106496	; 0x1a000
   11368:	ldr	pc, [ip, #3240]!	; 0xca8

0001136c <fputs_unlocked@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #106496	; 0x1a000
   11374:	ldr	pc, [ip, #3232]!	; 0xca0

00011378 <raise@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3224]!	; 0xc98

00011384 <fsync@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3216]!	; 0xc90

00011390 <strcmp@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3208]!	; 0xc88

0001139c <fflush@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3200]!	; 0xc80

000113a8 <memmove@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3192]!	; 0xc78

000113b4 <free@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3184]!	; 0xc70

000113c0 <_exit@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3176]!	; 0xc68

000113cc <memcpy@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3168]!	; 0xc60

000113d8 <__strtoull_internal@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3160]!	; 0xc58

000113e4 <mbsinit@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3152]!	; 0xc50

000113f0 <time@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3144]!	; 0xc48

000113fc <ftruncate64@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3136]!	; 0xc40

00011408 <dcgettext@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3128]!	; 0xc38

00011414 <unlink@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3120]!	; 0xc30

00011420 <realloc@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3112]!	; 0xc28

0001142c <textdomain@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3104]!	; 0xc20

00011438 <__fxstatat64@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3096]!	; 0xc18

00011444 <iswprint@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3088]!	; 0xc10

00011450 <__fxstat64@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3080]!	; 0xc08

0001145c <fwrite@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3072]!	; 0xc00

00011468 <ioctl@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3064]!	; 0xbf8

00011474 <lseek64@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3056]!	; 0xbf0

00011480 <__ctype_get_mb_cur_max@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3048]!	; 0xbe8

0001148c <__strcpy_chk@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #3040]!	; 0xbe0

00011498 <__fpending@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #3032]!	; 0xbd8

000114a4 <mbrtowc@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #3024]!	; 0xbd0

000114b0 <error@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #3016]!	; 0xbc8

000114bc <open64@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #3008]!	; 0xbc0

000114c8 <getenv@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #106496	; 0x1a000
   114d0:	ldr	pc, [ip, #3000]!	; 0xbb8

000114d4 <malloc@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #106496	; 0x1a000
   114dc:	ldr	pc, [ip, #2992]!	; 0xbb0

000114e0 <__libc_start_main@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #106496	; 0x1a000
   114e8:	ldr	pc, [ip, #2984]!	; 0xba8

000114ec <__freading@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #106496	; 0x1a000
   114f4:	ldr	pc, [ip, #2976]!	; 0xba0

000114f8 <__gmon_start__@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #106496	; 0x1a000
   11500:	ldr	pc, [ip, #2968]!	; 0xb98

00011504 <getopt_long@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #106496	; 0x1a000
   1150c:	ldr	pc, [ip, #2960]!	; 0xb90

00011510 <__ctype_b_loc@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #106496	; 0x1a000
   11518:	ldr	pc, [ip, #2952]!	; 0xb88

0001151c <exit@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #106496	; 0x1a000
   11524:	ldr	pc, [ip, #2944]!	; 0xb80

00011528 <bcmp@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #106496	; 0x1a000
   11530:	ldr	pc, [ip, #2936]!	; 0xb78

00011534 <strlen@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #106496	; 0x1a000
   1153c:	ldr	pc, [ip, #2928]!	; 0xb70

00011540 <strchr@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #106496	; 0x1a000
   11548:	ldr	pc, [ip, #2920]!	; 0xb68

0001154c <getpagesize@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #106496	; 0x1a000
   11554:	ldr	pc, [ip, #2912]!	; 0xb60

00011558 <__errno_location@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #106496	; 0x1a000
   11560:	ldr	pc, [ip, #2904]!	; 0xb58

00011564 <__sprintf_chk@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #106496	; 0x1a000
   1156c:	ldr	pc, [ip, #2896]!	; 0xb50

00011570 <__cxa_atexit@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #106496	; 0x1a000
   11578:	ldr	pc, [ip, #2888]!	; 0xb48

0001157c <setvbuf@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #106496	; 0x1a000
   11584:	ldr	pc, [ip, #2880]!	; 0xb40

00011588 <memset@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #106496	; 0x1a000
   11590:	ldr	pc, [ip, #2872]!	; 0xb38

00011594 <renameat2@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #106496	; 0x1a000
   1159c:	ldr	pc, [ip, #2864]!	; 0xb30

000115a0 <__printf_chk@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #106496	; 0x1a000
   115a8:	ldr	pc, [ip, #2856]!	; 0xb28

000115ac <write@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #106496	; 0x1a000
   115b4:	ldr	pc, [ip, #2848]!	; 0xb20

000115b8 <fileno@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #106496	; 0x1a000
   115c0:	ldr	pc, [ip, #2840]!	; 0xb18

000115c4 <__fprintf_chk@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #106496	; 0x1a000
   115cc:	ldr	pc, [ip, #2832]!	; 0xb10

000115d0 <memchr@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #106496	; 0x1a000
   115d8:	ldr	pc, [ip, #2824]!	; 0xb08

000115dc <fclose@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #106496	; 0x1a000
   115e4:	ldr	pc, [ip, #2816]!	; 0xb00

000115e8 <fseeko64@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #106496	; 0x1a000
   115f0:	ldr	pc, [ip, #2808]!	; 0xaf8

000115f4 <fcntl64@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #106496	; 0x1a000
   115fc:	ldr	pc, [ip, #2800]!	; 0xaf0

00011600 <__overflow@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #106496	; 0x1a000
   11608:	ldr	pc, [ip, #2792]!	; 0xae8

0001160c <setlocale@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #106496	; 0x1a000
   11614:	ldr	pc, [ip, #2784]!	; 0xae0

00011618 <__explicit_bzero_chk@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #106496	; 0x1a000
   11620:	ldr	pc, [ip, #2776]!	; 0xad8

00011624 <strrchr@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #106496	; 0x1a000
   1162c:	ldr	pc, [ip, #2768]!	; 0xad0

00011630 <nl_langinfo@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #106496	; 0x1a000
   11638:	ldr	pc, [ip, #2760]!	; 0xac8

0001163c <localeconv@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #106496	; 0x1a000
   11644:	ldr	pc, [ip, #2752]!	; 0xac0

00011648 <fopen64@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #106496	; 0x1a000
   11650:	ldr	pc, [ip, #2744]!	; 0xab8

00011654 <renameat@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #106496	; 0x1a000
   1165c:	ldr	pc, [ip, #2736]!	; 0xab0

00011660 <bindtextdomain@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #106496	; 0x1a000
   11668:	ldr	pc, [ip, #2728]!	; 0xaa8

0001166c <fread_unlocked@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #106496	; 0x1a000
   11674:	ldr	pc, [ip, #2720]!	; 0xaa0

00011678 <getrandom@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #106496	; 0x1a000
   11680:	ldr	pc, [ip, #2712]!	; 0xa98

00011684 <aligned_alloc@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #106496	; 0x1a000
   1168c:	ldr	pc, [ip, #2704]!	; 0xa90

00011690 <sync@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #106496	; 0x1a000
   11698:	ldr	pc, [ip, #2696]!	; 0xa88

0001169c <chmod@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #106496	; 0x1a000
   116a4:	ldr	pc, [ip, #2688]!	; 0xa80

000116a8 <isatty@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #106496	; 0x1a000
   116b0:	ldr	pc, [ip, #2680]!	; 0xa78

000116b4 <strncmp@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #106496	; 0x1a000
   116bc:	ldr	pc, [ip, #2672]!	; 0xa70

000116c0 <fdatasync@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #106496	; 0x1a000
   116c8:	ldr	pc, [ip, #2664]!	; 0xa68

000116cc <abort@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #106496	; 0x1a000
   116d4:	ldr	pc, [ip, #2656]!	; 0xa60

000116d8 <close@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #106496	; 0x1a000
   116e0:	ldr	pc, [ip, #2648]!	; 0xa58

000116e4 <__assert_fail@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #106496	; 0x1a000
   116ec:	ldr	pc, [ip, #2640]!	; 0xa50

Disassembly of section .text:

000116f0 <.text>:
   116f0:	mov	fp, #0
   116f4:	mov	lr, #0
   116f8:	pop	{r1}		; (ldr r1, [sp], #4)
   116fc:	mov	r2, sp
   11700:	push	{r2}		; (str r2, [sp, #-4]!)
   11704:	push	{r0}		; (str r0, [sp, #-4]!)
   11708:	ldr	ip, [pc, #16]	; 11720 <__assert_fail@plt+0x3c>
   1170c:	push	{ip}		; (str ip, [sp, #-4]!)
   11710:	ldr	r0, [pc, #12]	; 11724 <__assert_fail@plt+0x40>
   11714:	ldr	r3, [pc, #12]	; 11728 <__assert_fail@plt+0x44>
   11718:	bl	114e0 <__libc_start_main@plt>
   1171c:	bl	116cc <abort@plt>
   11720:	andeq	sl, r1, r8, lsr #17
   11724:	ldrdeq	r1, [r1], -r4
   11728:	andeq	sl, r1, r8, asr #16
   1172c:	ldr	r3, [pc, #20]	; 11748 <__assert_fail@plt+0x64>
   11730:	ldr	r2, [pc, #20]	; 1174c <__assert_fail@plt+0x68>
   11734:	add	r3, pc, r3
   11738:	ldr	r2, [r3, r2]
   1173c:	cmp	r2, #0
   11740:	bxeq	lr
   11744:	b	114f8 <__gmon_start__@plt>
   11748:	andeq	sl, r1, r4, asr #17
   1174c:	andeq	r0, r0, r0, asr #2
   11750:	ldr	r0, [pc, #24]	; 11770 <__assert_fail@plt+0x8c>
   11754:	ldr	r3, [pc, #24]	; 11774 <__assert_fail@plt+0x90>
   11758:	cmp	r3, r0
   1175c:	bxeq	lr
   11760:	ldr	r3, [pc, #16]	; 11778 <__assert_fail@plt+0x94>
   11764:	cmp	r3, #0
   11768:	bxeq	lr
   1176c:	bx	r3
   11770:	andeq	ip, r2, r0, lsr #3
   11774:	andeq	ip, r2, r0, lsr #3
   11778:	andeq	r0, r0, r0
   1177c:	ldr	r0, [pc, #36]	; 117a8 <__assert_fail@plt+0xc4>
   11780:	ldr	r1, [pc, #36]	; 117ac <__assert_fail@plt+0xc8>
   11784:	sub	r1, r1, r0
   11788:	asr	r1, r1, #2
   1178c:	add	r1, r1, r1, lsr #31
   11790:	asrs	r1, r1, #1
   11794:	bxeq	lr
   11798:	ldr	r3, [pc, #16]	; 117b0 <__assert_fail@plt+0xcc>
   1179c:	cmp	r3, #0
   117a0:	bxeq	lr
   117a4:	bx	r3
   117a8:	andeq	ip, r2, r0, lsr #3
   117ac:	andeq	ip, r2, r0, lsr #3
   117b0:	andeq	r0, r0, r0
   117b4:	push	{r4, lr}
   117b8:	ldr	r4, [pc, #24]	; 117d8 <__assert_fail@plt+0xf4>
   117bc:	ldrb	r3, [r4]
   117c0:	cmp	r3, #0
   117c4:	popne	{r4, pc}
   117c8:	bl	11750 <__assert_fail@plt+0x6c>
   117cc:	mov	r3, #1
   117d0:	strb	r3, [r4]
   117d4:	pop	{r4, pc}
   117d8:			; <UNDEFINED> instruction: 0x0002c1bc
   117dc:	b	1177c <__assert_fail@plt+0x98>
   117e0:	push	{fp, lr}
   117e4:	mov	fp, sp
   117e8:	sub	sp, sp, #56	; 0x38
   117ec:	mov	r4, r0
   117f0:	cmp	r0, #0
   117f4:	bne	11a90 <__assert_fail@plt+0x3ac>
   117f8:	movw	r1, #43259	; 0xa8fb
   117fc:	mov	r0, #0
   11800:	mov	r2, #5
   11804:	movt	r1, #1
   11808:	bl	11408 <dcgettext@plt>
   1180c:	mov	r1, r0
   11810:	movw	r0, #49616	; 0xc1d0
   11814:	movt	r0, #2
   11818:	ldr	r2, [r0]
   1181c:	mov	r0, #1
   11820:	bl	115a0 <__printf_chk@plt>
   11824:	movw	r1, #43290	; 0xa91a
   11828:	mov	r0, #0
   1182c:	mov	r2, #5
   11830:	movt	r1, #1
   11834:	bl	11408 <dcgettext@plt>
   11838:	movw	r7, #49588	; 0xc1b4
   1183c:	movt	r7, #2
   11840:	ldr	r1, [r7]
   11844:	bl	1136c <fputs_unlocked@plt>
   11848:	movw	r1, #43424	; 0xa9a0
   1184c:	mov	r0, #0
   11850:	mov	r2, #5
   11854:	movt	r1, #1
   11858:	bl	11408 <dcgettext@plt>
   1185c:	ldr	r1, [r7]
   11860:	bl	1136c <fputs_unlocked@plt>
   11864:	movw	r1, #45157	; 0xb065
   11868:	mov	r0, #0
   1186c:	mov	r2, #5
   11870:	movt	r1, #1
   11874:	bl	11408 <dcgettext@plt>
   11878:	ldr	r1, [r7]
   1187c:	bl	1136c <fputs_unlocked@plt>
   11880:	movw	r1, #43463	; 0xa9c7
   11884:	mov	r0, #0
   11888:	mov	r2, #5
   1188c:	movt	r1, #1
   11890:	bl	11408 <dcgettext@plt>
   11894:	mov	r1, r0
   11898:	mov	r0, #1
   1189c:	mov	r2, #3
   118a0:	bl	115a0 <__printf_chk@plt>
   118a4:	movw	r1, #43725	; 0xaacd
   118a8:	mov	r0, #0
   118ac:	mov	r2, #5
   118b0:	movt	r1, #1
   118b4:	bl	11408 <dcgettext@plt>
   118b8:	ldr	r1, [r7]
   118bc:	bl	1136c <fputs_unlocked@plt>
   118c0:	movw	r1, #44092	; 0xac3c
   118c4:	mov	r0, #0
   118c8:	mov	r2, #5
   118cc:	movt	r1, #1
   118d0:	bl	11408 <dcgettext@plt>
   118d4:	ldr	r1, [r7]
   118d8:	bl	1136c <fputs_unlocked@plt>
   118dc:	movw	r1, #44137	; 0xac69
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	11408 <dcgettext@plt>
   118f0:	ldr	r1, [r7]
   118f4:	bl	1136c <fputs_unlocked@plt>
   118f8:	movw	r1, #44191	; 0xac9f
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	11408 <dcgettext@plt>
   1190c:	ldr	r1, [r7]
   11910:	bl	1136c <fputs_unlocked@plt>
   11914:	movw	r1, #44672	; 0xae80
   11918:	mov	r0, #0
   1191c:	mov	r2, #5
   11920:	movt	r1, #1
   11924:	bl	11408 <dcgettext@plt>
   11928:	ldr	r1, [r7]
   1192c:	bl	1136c <fputs_unlocked@plt>
   11930:	movw	r0, #46368	; 0xb520
   11934:	mov	r2, #48	; 0x30
   11938:	mov	r6, sp
   1193c:	movw	r5, #44960	; 0xafa0
   11940:	movt	r0, #1
   11944:	movt	r5, #1
   11948:	add	r1, r0, #32
   1194c:	add	r3, r0, #16
   11950:	vld1.64	{d18-d19}, [r0], r2
   11954:	vld1.64	{d16-d17}, [r1]
   11958:	vld1.64	{d20-d21}, [r3]
   1195c:	vldr	d22, [r0]
   11960:	add	r1, r6, #32
   11964:	add	r0, r6, #16
   11968:	vst1.64	{d16-d17}, [r1]
   1196c:	movw	r1, #45232	; 0xb0b0
   11970:	vst1.64	{d20-d21}, [r0]
   11974:	mov	r0, r6
   11978:	movt	r1, #1
   1197c:	vst1.64	{d18-d19}, [r0], r2
   11980:	vstr	d22, [r0]
   11984:	mov	r0, r5
   11988:	bl	11390 <strcmp@plt>
   1198c:	cmp	r0, #0
   11990:	ldrne	r1, [r6, #8]!
   11994:	cmpne	r1, #0
   11998:	bne	11984 <__assert_fail@plt+0x2a0>
   1199c:	movw	r1, #45327	; 0xb10f
   119a0:	ldr	r6, [r6, #4]
   119a4:	mov	r0, #0
   119a8:	mov	r2, #5
   119ac:	movt	r1, #1
   119b0:	bl	11408 <dcgettext@plt>
   119b4:	movw	r2, #45100	; 0xb02c
   119b8:	movw	r3, #45350	; 0xb126
   119bc:	mov	r1, r0
   119c0:	mov	r0, #1
   119c4:	movt	r2, #1
   119c8:	movt	r3, #1
   119cc:	bl	115a0 <__printf_chk@plt>
   119d0:	cmp	r6, #0
   119d4:	mov	r0, #5
   119d8:	mov	r1, #0
   119dc:	moveq	r6, r5
   119e0:	bl	1160c <setlocale@plt>
   119e4:	cmp	r0, #0
   119e8:	beq	11a20 <__assert_fail@plt+0x33c>
   119ec:	movw	r1, #45390	; 0xb14e
   119f0:	mov	r2, #3
   119f4:	movt	r1, #1
   119f8:	bl	116b4 <strncmp@plt>
   119fc:	cmp	r0, #0
   11a00:	beq	11a20 <__assert_fail@plt+0x33c>
   11a04:	movw	r1, #45394	; 0xb152
   11a08:	mov	r0, #0
   11a0c:	mov	r2, #5
   11a10:	movt	r1, #1
   11a14:	bl	11408 <dcgettext@plt>
   11a18:	ldr	r1, [r7]
   11a1c:	bl	1136c <fputs_unlocked@plt>
   11a20:	movw	r1, #45465	; 0xb199
   11a24:	mov	r0, #0
   11a28:	mov	r2, #5
   11a2c:	movt	r1, #1
   11a30:	bl	11408 <dcgettext@plt>
   11a34:	movw	r2, #45350	; 0xb126
   11a38:	mov	r1, r0
   11a3c:	mov	r0, #1
   11a40:	mov	r3, r5
   11a44:	movt	r2, #1
   11a48:	bl	115a0 <__printf_chk@plt>
   11a4c:	movw	r1, #45492	; 0xb1b4
   11a50:	mov	r0, #0
   11a54:	mov	r2, #5
   11a58:	movt	r1, #1
   11a5c:	bl	11408 <dcgettext@plt>
   11a60:	mov	r1, r0
   11a64:	movw	r0, #45260	; 0xb0cc
   11a68:	movw	r3, #44671	; 0xae7f
   11a6c:	cmp	r6, r5
   11a70:	mov	r2, r6
   11a74:	movt	r0, #1
   11a78:	movt	r3, #1
   11a7c:	moveq	r3, r0
   11a80:	mov	r0, #1
   11a84:	bl	115a0 <__printf_chk@plt>
   11a88:	mov	r0, r4
   11a8c:	bl	1151c <exit@plt>
   11a90:	movw	r0, #49584	; 0xc1b0
   11a94:	movw	r1, #43220	; 0xa8d4
   11a98:	mov	r2, #5
   11a9c:	movt	r0, #2
   11aa0:	movt	r1, #1
   11aa4:	ldr	r5, [r0]
   11aa8:	mov	r0, #0
   11aac:	bl	11408 <dcgettext@plt>
   11ab0:	mov	r2, r0
   11ab4:	movw	r0, #49616	; 0xc1d0
   11ab8:	mov	r1, #1
   11abc:	movt	r0, #2
   11ac0:	ldr	r3, [r0]
   11ac4:	mov	r0, r5
   11ac8:	bl	115c4 <__fprintf_chk@plt>
   11acc:	mov	r0, r4
   11ad0:	bl	1151c <exit@plt>
   11ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad8:	add	fp, sp, #28
   11adc:	sub	sp, sp, #108	; 0x6c
   11ae0:	vmov.i32	q8, #0	; 0x00000000
   11ae4:	sub	r7, fp, #56	; 0x38
   11ae8:	mov	r5, r1
   11aec:	mov	r9, r0
   11af0:	mov	r0, #20
   11af4:	mov	r4, #0
   11af8:	mov	r1, r7
   11afc:	str	r4, [fp, #-40]	; 0xffffffd8
   11b00:	vst1.64	{d16-d17}, [r1], r0
   11b04:	str	r4, [r1]
   11b08:	ldr	r0, [r5]
   11b0c:	bl	15524 <__assert_fail@plt+0x3e40>
   11b10:	movw	r1, #44671	; 0xae7f
   11b14:	mov	r0, #6
   11b18:	movt	r1, #1
   11b1c:	bl	1160c <setlocale@plt>
   11b20:	movw	r6, #45104	; 0xb030
   11b24:	movw	r1, #44966	; 0xafa6
   11b28:	movt	r6, #1
   11b2c:	movt	r1, #1
   11b30:	mov	r0, r6
   11b34:	bl	11660 <bindtextdomain@plt>
   11b38:	mov	r0, r6
   11b3c:	bl	1142c <textdomain@plt>
   11b40:	movw	r0, #16364	; 0x3fec
   11b44:	movt	r0, #1
   11b48:	bl	1a8ac <__assert_fail@plt+0x91c8>
   11b4c:	mvn	r0, #0
   11b50:	mov	r1, #3
   11b54:	movw	r6, #44990	; 0xafbe
   11b58:	mov	sl, #0
   11b5c:	str	r0, [fp, #-44]	; 0xffffffd4
   11b60:	str	r0, [fp, #-48]	; 0xffffffd0
   11b64:	str	r1, [fp, #-52]	; 0xffffffcc
   11b68:	mov	r1, #0
   11b6c:	mov	r0, #3
   11b70:	movt	r6, #1
   11b74:	str	r1, [sp, #48]	; 0x30
   11b78:	mvn	r1, #0
   11b7c:	str	r0, [fp, #-60]	; 0xffffffc4
   11b80:	add	r0, r7, #8
   11b84:	str	r1, [sp, #64]	; 0x40
   11b88:	mvn	r1, #0
   11b8c:	str	r0, [sp, #56]	; 0x38
   11b90:	mov	r0, #0
   11b94:	str	r1, [sp, #60]	; 0x3c
   11b98:	mov	r1, #0
   11b9c:	str	r1, [sp, #36]	; 0x24
   11ba0:	mov	r1, #0
   11ba4:	str	r1, [fp, #-64]	; 0xffffffc0
   11ba8:	mov	r1, #0
   11bac:	str	r1, [sp, #68]	; 0x44
   11bb0:	b	11bc4 <__assert_fail@plt+0x4e0>
   11bb4:	mov	r0, #1
   11bb8:	str	r0, [sp, #36]	; 0x24
   11bbc:	mov	r0, r7
   11bc0:	mov	sl, r8
   11bc4:	movw	r3, #46160	; 0xb450
   11bc8:	mov	r7, r0
   11bcc:	mov	r0, r9
   11bd0:	mov	r1, r5
   11bd4:	mov	r2, r6
   11bd8:	mov	r8, sl
   11bdc:	str	r4, [sp]
   11be0:	movt	r3, #1
   11be4:	bl	11504 <getopt_long@plt>
   11be8:	cmp	r0, #101	; 0x65
   11bec:	ble	11e0c <__assert_fail@plt+0x728>
   11bf0:	sub	r1, r0, #102	; 0x66
   11bf4:	cmp	r1, #20
   11bf8:	bhi	11cc8 <__assert_fail@plt+0x5e4>
   11bfc:	add	r2, pc, #8
   11c00:	mov	r0, #1
   11c04:	mov	sl, r8
   11c08:	ldr	pc, [r2, r1, lsl #2]
   11c0c:	andeq	r1, r1, r4, asr #23
   11c10:	andeq	r2, r1, r0, ror #15
   11c14:	andeq	r2, r1, r0, ror #15
   11c18:	andeq	r2, r1, r0, ror #15
   11c1c:	andeq	r2, r1, r0, ror #15
   11c20:	andeq	r2, r1, r0, ror #15
   11c24:	andeq	r2, r1, r0, ror #15
   11c28:	andeq	r2, r1, r0, ror #15
   11c2c:	andeq	r1, r1, r0, ror #24
   11c30:	andeq	r2, r1, r0, ror #15
   11c34:	andeq	r2, r1, r0, ror #15
   11c38:	andeq	r2, r1, r0, ror #15
   11c3c:	andeq	r2, r1, r0, ror #15
   11c40:	andeq	r1, r1, r4, ror sp
   11c44:	andeq	r2, r1, r0, ror #15
   11c48:	andeq	r1, r1, r4, lsl #26
   11c4c:			; <UNDEFINED> instruction: 0x00011bb4
   11c50:	andeq	r2, r1, r0, ror #15
   11c54:	andeq	r1, r1, r0, lsl #28
   11c58:	andeq	r2, r1, r0, ror #15
   11c5c:	strdeq	r1, [r1], -r4
   11c60:	movw	r0, #49592	; 0xc1b8
   11c64:	movw	r1, #45000	; 0xafc8
   11c68:	mov	sl, r6
   11c6c:	mov	r6, r7
   11c70:	mov	r2, #5
   11c74:	mov	r4, #0
   11c78:	movt	r0, #2
   11c7c:	movt	r1, #1
   11c80:	ldr	r7, [r0]
   11c84:	mov	r0, #0
   11c88:	bl	11408 <dcgettext@plt>
   11c8c:	mvn	r1, #-1073741824	; 0xc0000000
   11c90:	mov	r2, #0
   11c94:	mov	r3, #0
   11c98:	stm	sp, {r1, r4}
   11c9c:	movw	r1, #44671	; 0xae7f
   11ca0:	str	r0, [sp, #12]
   11ca4:	mov	r0, r7
   11ca8:	str	r4, [sp, #16]
   11cac:	movt	r1, #1
   11cb0:	str	r1, [sp, #8]
   11cb4:	bl	18fa8 <__assert_fail@plt+0x78c4>
   11cb8:	str	r0, [fp, #-60]	; 0xffffffc4
   11cbc:	mov	r0, r6
   11cc0:	mov	r6, sl
   11cc4:	b	11de8 <__assert_fail@plt+0x704>
   11cc8:	cmp	r0, #256	; 0x100
   11ccc:	bne	127e0 <__assert_fail@plt+0x10fc>
   11cd0:	movw	r0, #49592	; 0xc1b8
   11cd4:	cmp	r8, #0
   11cd8:	movt	r0, #2
   11cdc:	ldr	sl, [r0]
   11ce0:	mov	r0, r7
   11ce4:	beq	11bc4 <__assert_fail@plt+0x4e0>
   11ce8:	mov	r0, r8
   11cec:	mov	r1, sl
   11cf0:	bl	11390 <strcmp@plt>
   11cf4:	cmp	r0, #0
   11cf8:	mov	r0, r7
   11cfc:	beq	11bc4 <__assert_fail@plt+0x4e0>
   11d00:	b	127e8 <__assert_fail@plt+0x1104>
   11d04:	movw	r0, #49592	; 0xc1b8
   11d08:	mov	sl, r8
   11d0c:	movt	r0, #2
   11d10:	ldr	r1, [r0]
   11d14:	mov	r0, #3
   11d18:	str	r0, [sp, #48]	; 0x30
   11d1c:	mov	r0, r7
   11d20:	cmp	r1, #0
   11d24:	beq	11bc4 <__assert_fail@plt+0x4e0>
   11d28:	movw	r0, #49492	; 0xc154
   11d2c:	movw	sl, #46336	; 0xb500
   11d30:	mov	r2, #4
   11d34:	movt	r0, #2
   11d38:	str	r2, [sp]
   11d3c:	movw	r2, #46348	; 0xb50c
   11d40:	movt	sl, #1
   11d44:	movt	r2, #1
   11d48:	ldr	r0, [r0]
   11d4c:	mov	r3, sl
   11d50:	str	r0, [sp, #4]
   11d54:	mov	r0, #1
   11d58:	str	r0, [sp, #8]
   11d5c:	movw	r0, #45059	; 0xb003
   11d60:	movt	r0, #1
   11d64:	bl	13d80 <__assert_fail@plt+0x269c>
   11d68:	ldr	r0, [sl, r0, lsl #2]
   11d6c:	str	r0, [sp, #48]	; 0x30
   11d70:	b	11bbc <__assert_fail@plt+0x4d8>
   11d74:	movw	r0, #49592	; 0xc1b8
   11d78:	movw	r1, #45082	; 0xb01a
   11d7c:	mov	r4, r6
   11d80:	mov	r6, r7
   11d84:	mov	r2, #5
   11d88:	mov	sl, #0
   11d8c:	movt	r0, #2
   11d90:	movt	r1, #1
   11d94:	ldr	r7, [r0]
   11d98:	mov	r0, #0
   11d9c:	bl	11408 <dcgettext@plt>
   11da0:	mvn	r1, #0
   11da4:	str	r0, [sp, #12]
   11da8:	mov	r0, r7
   11dac:	mov	r2, #0
   11db0:	mov	r3, #0
   11db4:	str	sl, [sp, #16]
   11db8:	str	r1, [sp]
   11dbc:	mvn	r1, #-2147483648	; 0x80000000
   11dc0:	str	r1, [sp, #4]
   11dc4:	movw	r1, #45068	; 0xb00c
   11dc8:	movt	r1, #1
   11dcc:	str	r1, [sp, #8]
   11dd0:	mov	r1, #0
   11dd4:	bl	18eb4 <__assert_fail@plt+0x77d0>
   11dd8:	str	r0, [sp, #64]	; 0x40
   11ddc:	mov	r0, r6
   11de0:	str	r1, [sp, #60]	; 0x3c
   11de4:	mov	r6, r4
   11de8:	mov	r4, #0
   11dec:	mov	sl, r8
   11df0:	b	11bc4 <__assert_fail@plt+0x4e0>
   11df4:	mov	r0, #1
   11df8:	str	r0, [sp, #68]	; 0x44
   11dfc:	b	11bbc <__assert_fail@plt+0x4d8>
   11e00:	mov	r0, #1
   11e04:	str	r0, [fp, #-64]	; 0xffffffc0
   11e08:	b	11bbc <__assert_fail@plt+0x4d8>
   11e0c:	ldr	r1, [sp, #36]	; 0x24
   11e10:	cmn	r0, #1
   11e14:	bne	12780 <__assert_fail@plt+0x109c>
   11e18:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11e1c:	str	r1, [sp, #36]	; 0x24
   11e20:	ldr	r2, [sp, #60]	; 0x3c
   11e24:	strb	r0, [fp, #-35]	; 0xffffffdd
   11e28:	ldr	r0, [sp, #68]	; 0x44
   11e2c:	strb	r0, [fp, #-34]	; 0xffffffde
   11e30:	strb	r1, [fp, #-36]	; 0xffffffdc
   11e34:	ldr	r0, [sp, #56]	; 0x38
   11e38:	ldr	r1, [sp, #64]	; 0x40
   11e3c:	stm	r0, {r1, r2}
   11e40:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11e44:	str	r0, [fp, #-52]	; 0xffffffcc
   11e48:	ldr	r0, [sp, #48]	; 0x30
   11e4c:	str	r0, [fp, #-40]	; 0xffffffd8
   11e50:	movw	r0, #49576	; 0xc1a8
   11e54:	strb	r7, [fp, #-56]	; 0xffffffc8
   11e58:	movt	r0, #2
   11e5c:	ldr	r6, [r0]
   11e60:	subs	r0, r9, r6
   11e64:	str	r0, [sp, #60]	; 0x3c
   11e68:	beq	1280c <__assert_fail@plt+0x1128>
   11e6c:	mov	r0, r8
   11e70:	mvn	r1, #0
   11e74:	bl	17528 <__assert_fail@plt+0x5e44>
   11e78:	movw	r1, #49600	; 0xc1c0
   11e7c:	cmp	r0, #0
   11e80:	movt	r1, #2
   11e84:	str	r0, [r1]
   11e88:	beq	12838 <__assert_fail@plt+0x1154>
   11e8c:	movw	r0, #10360	; 0x2878
   11e90:	movt	r0, #1
   11e94:	bl	1a8ac <__assert_fail@plt+0x91c8>
   11e98:	ldr	r0, [sp, #60]	; 0x3c
   11e9c:	cmp	r0, #1
   11ea0:	blt	12754 <__assert_fail@plt+0x1070>
   11ea4:	movw	r8, #46644	; 0xb634
   11ea8:	add	r0, r5, r6, lsl #2
   11eac:	mov	r9, #0
   11eb0:	mov	r6, #1
   11eb4:	str	r7, [sp, #24]
   11eb8:	movt	r8, #1
   11ebc:	str	r0, [sp, #56]	; 0x38
   11ec0:	b	11f1c <__assert_fail@plt+0x838>
   11ec4:	bl	11558 <__errno_location@plt>
   11ec8:	movw	r1, #46030	; 0xb3ce
   11ecc:	ldr	r4, [r0]
   11ed0:	mov	r0, #0
   11ed4:	mov	r2, #5
   11ed8:	mov	r7, #0
   11edc:	movt	r1, #1
   11ee0:	bl	11408 <dcgettext@plt>
   11ee4:	mov	r2, r0
   11ee8:	mov	r0, #0
   11eec:	mov	r1, r4
   11ef0:	mov	r3, sl
   11ef4:	bl	114b0 <error@plt>
   11ef8:	mov	r5, sl
   11efc:	ldr	r6, [sp, #52]	; 0x34
   11f00:	mov	r0, r5
   11f04:	bl	143e8 <__assert_fail@plt+0x2d04>
   11f08:	ldr	r0, [sp, #60]	; 0x3c
   11f0c:	add	r9, r9, #1
   11f10:	and	r6, r6, r7
   11f14:	cmp	r9, r0
   11f18:	beq	12748 <__assert_fail@plt+0x1064>
   11f1c:	ldr	r4, [sp, #56]	; 0x38
   11f20:	mov	r0, #0
   11f24:	mov	r1, #3
   11f28:	ldr	r2, [r4, r9, lsl #2]
   11f2c:	bl	1723c <__assert_fail@plt+0x5b58>
   11f30:	bl	18e38 <__assert_fail@plt+0x7754>
   11f34:	ldr	r7, [r4, r9, lsl #2]
   11f38:	movw	r1, #47018	; 0xb7aa
   11f3c:	mov	r5, r0
   11f40:	movt	r1, #1
   11f44:	mov	r0, r7
   11f48:	bl	11390 <strcmp@plt>
   11f4c:	movw	r1, #49600	; 0xc1c0
   11f50:	cmp	r0, #0
   11f54:	movt	r1, #2
   11f58:	ldr	r4, [r1]
   11f5c:	beq	120d0 <__assert_fail@plt+0x9ec>
   11f60:	mov	r0, r7
   11f64:	movw	r1, #257	; 0x101
   11f68:	str	r5, [fp, #-64]	; 0xffffffc0
   11f6c:	bl	143ac <__assert_fail@plt+0x2cc8>
   11f70:	mov	r5, r0
   11f74:	cmn	r0, #1
   11f78:	ble	12108 <__assert_fail@plt+0xa24>
   11f7c:	ldr	sl, [fp, #-64]	; 0xffffffc0
   11f80:	mov	r0, r5
   11f84:	mov	r2, r4
   11f88:	sub	r3, fp, #56	; 0x38
   11f8c:	str	r6, [sp, #52]	; 0x34
   11f90:	str	r7, [fp, #-60]	; 0xffffffc4
   11f94:	mov	r1, sl
   11f98:	bl	12888 <__assert_fail@plt+0x11a4>
   11f9c:	mov	r7, r0
   11fa0:	mov	r0, r5
   11fa4:	bl	116d8 <close@plt>
   11fa8:	cmp	r0, #0
   11fac:	bne	11ec4 <__assert_fail@plt+0x7e0>
   11fb0:	ldr	r0, [sp, #48]	; 0x30
   11fb4:	cmp	r0, #0
   11fb8:	beq	12314 <__assert_fail@plt+0xc30>
   11fbc:	ldr	r5, [fp, #-64]	; 0xffffffc0
   11fc0:	ldr	r6, [sp, #52]	; 0x34
   11fc4:	eors	r0, r7, #1
   11fc8:	bne	11f00 <__assert_fail@plt+0x81c>
   11fcc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11fd0:	bl	18e38 <__assert_fail@plt+0x7754>
   11fd4:	mov	r4, r0
   11fd8:	bl	13f34 <__assert_fail@plt+0x2850>
   11fdc:	str	r0, [sp, #64]	; 0x40
   11fe0:	mov	r0, r4
   11fe4:	str	r4, [sp, #68]	; 0x44
   11fe8:	bl	140d8 <__assert_fail@plt+0x29f4>
   11fec:	mov	sl, r0
   11ff0:	mov	r0, #0
   11ff4:	mov	r1, #3
   11ff8:	mov	r2, sl
   11ffc:	bl	1723c <__assert_fail@plt+0x5b58>
   12000:	bl	18e38 <__assert_fail@plt+0x7754>
   12004:	mov	r4, r0
   12008:	ldr	r0, [sp, #48]	; 0x30
   1200c:	mvn	r1, #0
   12010:	cmp	r0, #3
   12014:	bne	12028 <__assert_fail@plt+0x944>
   12018:	mov	r0, sl
   1201c:	mov	r1, #18688	; 0x4900
   12020:	bl	143ac <__assert_fail@plt+0x2cc8>
   12024:	mov	r1, r0
   12028:	ldr	r6, [sp, #36]	; 0x24
   1202c:	str	r1, [sp, #44]	; 0x2c
   12030:	str	r4, [sp, #40]	; 0x28
   12034:	tst	r6, #255	; 0xff
   12038:	beq	12064 <__assert_fail@plt+0x980>
   1203c:	movw	r1, #46050	; 0xb3e2
   12040:	mov	r0, #0
   12044:	mov	r2, #5
   12048:	movt	r1, #1
   1204c:	bl	11408 <dcgettext@plt>
   12050:	mov	r2, r0
   12054:	mov	r0, #0
   12058:	mov	r1, #0
   1205c:	mov	r3, r5
   12060:	bl	114b0 <error@plt>
   12064:	ldr	r0, [sp, #48]	; 0x30
   12068:	ldr	r4, [sp, #64]	; 0x40
   1206c:	mov	r7, #1
   12070:	str	sl, [sp, #20]
   12074:	cmp	r0, #1
   12078:	beq	12650 <__assert_fail@plt+0xf6c>
   1207c:	mov	r0, r4
   12080:	bl	13f94 <__assert_fail@plt+0x28b0>
   12084:	cmp	r0, #0
   12088:	beq	12460 <__assert_fail@plt+0xd7c>
   1208c:	mov	sl, r0
   12090:	ldr	r0, [sp, #68]	; 0x44
   12094:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12098:	sub	r0, r4, r0
   1209c:	add	r0, r1, r0
   120a0:	str	r0, [sp, #32]
   120a4:	ldr	r0, [sp, #44]	; 0x2c
   120a8:	cmn	r0, #1
   120ac:	ble	1231c <__assert_fail@plt+0xc38>
   120b0:	ldr	r0, [sp, #36]	; 0x24
   120b4:	sub	r5, r4, #1
   120b8:	tst	r0, #255	; 0xff
   120bc:	beq	12468 <__assert_fail@plt+0xd84>
   120c0:	mov	r0, #1
   120c4:	mov	r7, #1
   120c8:	str	r0, [sp, #28]
   120cc:	b	12210 <__assert_fail@plt+0xb2c>
   120d0:	mov	r0, #1
   120d4:	mov	r1, #3
   120d8:	bl	141cc <__assert_fail@plt+0x2ae8>
   120dc:	cmn	r0, #1
   120e0:	ble	12160 <__assert_fail@plt+0xa7c>
   120e4:	tst	r0, #1024	; 0x400
   120e8:	bne	122c8 <__assert_fail@plt+0xbe4>
   120ec:	mov	r0, #1
   120f0:	mov	r1, r5
   120f4:	mov	r2, r4
   120f8:	sub	r3, fp, #56	; 0x38
   120fc:	bl	12888 <__assert_fail@plt+0x11a4>
   12100:	mov	r7, r0
   12104:	b	11f00 <__assert_fail@plt+0x81c>
   12108:	bl	11558 <__errno_location@plt>
   1210c:	mov	sl, r0
   12110:	ldr	r0, [r0]
   12114:	cmp	r0, #13
   12118:	bne	1213c <__assert_fail@plt+0xa58>
   1211c:	ldr	r0, [sp, #24]
   12120:	tst	r0, #255	; 0xff
   12124:	beq	1213c <__assert_fail@plt+0xa58>
   12128:	mov	r0, r7
   1212c:	mov	r1, #128	; 0x80
   12130:	bl	1169c <chmod@plt>
   12134:	cmp	r0, #0
   12138:	beq	122f8 <__assert_fail@plt+0xc14>
   1213c:	movw	r1, #45999	; 0xb3af
   12140:	ldr	r4, [sl]
   12144:	mov	r0, #0
   12148:	mov	r2, #5
   1214c:	mov	r7, #0
   12150:	movt	r1, #1
   12154:	bl	11408 <dcgettext@plt>
   12158:	ldr	r5, [fp, #-64]	; 0xffffffc0
   1215c:	b	12180 <__assert_fail@plt+0xa9c>
   12160:	bl	11558 <__errno_location@plt>
   12164:	movw	r1, #45627	; 0xb23b
   12168:	ldr	r4, [r0]
   1216c:	mov	r0, #0
   12170:	mov	r2, #5
   12174:	mov	r7, #0
   12178:	movt	r1, #1
   1217c:	bl	11408 <dcgettext@plt>
   12180:	mov	r2, r0
   12184:	mov	r0, #0
   12188:	mov	r1, r4
   1218c:	b	122ec <__assert_fail@plt+0xc08>
   12190:	ldr	r0, [sp, #44]	; 0x2c
   12194:	ldr	r1, [sp, #40]	; 0x28
   12198:	bl	13934 <__assert_fail@plt+0x2250>
   1219c:	movw	r1, #46063	; 0xb3ef
   121a0:	mov	r4, r0
   121a4:	mov	r0, #0
   121a8:	mov	r2, #5
   121ac:	mov	r6, #0
   121b0:	movt	r1, #1
   121b4:	bl	11408 <dcgettext@plt>
   121b8:	mov	r2, r0
   121bc:	ldr	r0, [sp, #68]	; 0x44
   121c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   121c4:	mov	r1, #0
   121c8:	str	r0, [sp]
   121cc:	ldr	r0, [sp, #28]
   121d0:	tst	r0, #1
   121d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   121d8:	movne	r3, r0
   121dc:	mov	r0, #0
   121e0:	bl	114b0 <error@plt>
   121e4:	ldr	r0, [sp, #32]
   121e8:	ldr	r1, [sp, #64]	; 0x40
   121ec:	add	r2, sl, #1
   121f0:	bl	113cc <memcpy@plt>
   121f4:	cmp	r4, #0
   121f8:	mov	r0, #0
   121fc:	movne	r7, r6
   12200:	str	r0, [sp, #28]
   12204:	ldr	r4, [sp, #64]	; 0x40
   12208:	subs	sl, sl, #1
   1220c:	beq	12640 <__assert_fail@plt+0xf5c>
   12210:	mov	r0, r4
   12214:	mov	r1, #48	; 0x30
   12218:	mov	r2, sl
   1221c:	bl	11588 <memset@plt>
   12220:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12224:	ldr	r3, [sp, #68]	; 0x44
   12228:	mov	r0, #0
   1222c:	mvn	r2, #99	; 0x63
   12230:	strb	r0, [r4, sl]
   12234:	mov	r0, #1
   12238:	str	r0, [sp]
   1223c:	mvn	r0, #99	; 0x63
   12240:	bl	18000 <__assert_fail@plt+0x691c>
   12244:	cmp	r0, #0
   12248:	beq	12190 <__assert_fail@plt+0xaac>
   1224c:	bl	11558 <__errno_location@plt>
   12250:	mov	r4, r0
   12254:	ldr	r0, [r4]
   12258:	cmp	r0, #17
   1225c:	bne	12204 <__assert_fail@plt+0xb20>
   12260:	mov	r6, sl
   12264:	cmp	r6, #0
   12268:	beq	12204 <__assert_fail@plt+0xb20>
   1226c:	ldrb	r1, [r5, r6]
   12270:	mov	r0, r8
   12274:	mov	r2, #65	; 0x41
   12278:	bl	115d0 <memchr@plt>
   1227c:	cmp	r0, #0
   12280:	beq	12760 <__assert_fail@plt+0x107c>
   12284:	ldrb	r0, [r0, #1]
   12288:	sub	r1, r6, #1
   1228c:	cmp	r0, #0
   12290:	movweq	r0, #48	; 0x30
   12294:	strb	r0, [r5, r6]
   12298:	mov	r6, r1
   1229c:	beq	12264 <__assert_fail@plt+0xb80>
   122a0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   122a4:	ldr	r3, [sp, #68]	; 0x44
   122a8:	mov	r0, #1
   122ac:	mvn	r2, #99	; 0x63
   122b0:	str	r0, [sp]
   122b4:	mvn	r0, #99	; 0x63
   122b8:	bl	18000 <__assert_fail@plt+0x691c>
   122bc:	cmp	r0, #0
   122c0:	bne	12254 <__assert_fail@plt+0xb70>
   122c4:	b	12190 <__assert_fail@plt+0xaac>
   122c8:	movw	r1, #45644	; 0xb24c
   122cc:	mov	r0, #0
   122d0:	mov	r2, #5
   122d4:	mov	r7, #0
   122d8:	movt	r1, #1
   122dc:	bl	11408 <dcgettext@plt>
   122e0:	mov	r2, r0
   122e4:	mov	r0, #0
   122e8:	mov	r1, #0
   122ec:	mov	r3, r5
   122f0:	bl	114b0 <error@plt>
   122f4:	b	11f00 <__assert_fail@plt+0x81c>
   122f8:	mov	r0, r7
   122fc:	movw	r1, #257	; 0x101
   12300:	bl	143ac <__assert_fail@plt+0x2cc8>
   12304:	mov	r5, r0
   12308:	cmn	r0, #1
   1230c:	bgt	11f7c <__assert_fail@plt+0x898>
   12310:	b	1213c <__assert_fail@plt+0xa58>
   12314:	ldr	r5, [fp, #-64]	; 0xffffffc0
   12318:	b	11efc <__assert_fail@plt+0x818>
   1231c:	ldr	r0, [sp, #36]	; 0x24
   12320:	tst	r0, #255	; 0xff
   12324:	beq	12560 <__assert_fail@plt+0xe7c>
   12328:	sub	r5, r4, #1
   1232c:	mov	r7, #1
   12330:	b	12340 <__assert_fail@plt+0xc5c>
   12334:	ldr	r4, [sp, #64]	; 0x40
   12338:	subs	sl, sl, #1
   1233c:	beq	12460 <__assert_fail@plt+0xd7c>
   12340:	mov	r0, r4
   12344:	mov	r1, #48	; 0x30
   12348:	mov	r2, sl
   1234c:	bl	11588 <memset@plt>
   12350:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12354:	ldr	r3, [sp, #68]	; 0x44
   12358:	mov	r0, #0
   1235c:	mvn	r2, #99	; 0x63
   12360:	strb	r0, [r4, sl]
   12364:	mov	r0, #1
   12368:	str	r0, [sp]
   1236c:	mvn	r0, #99	; 0x63
   12370:	bl	18000 <__assert_fail@plt+0x691c>
   12374:	cmp	r0, #0
   12378:	beq	123f4 <__assert_fail@plt+0xd10>
   1237c:	bl	11558 <__errno_location@plt>
   12380:	mov	r4, r0
   12384:	ldr	r0, [r4]
   12388:	cmp	r0, #17
   1238c:	bne	12454 <__assert_fail@plt+0xd70>
   12390:	mov	r6, sl
   12394:	cmp	r6, #0
   12398:	beq	12334 <__assert_fail@plt+0xc50>
   1239c:	ldrb	r1, [r5, r6]
   123a0:	mov	r0, r8
   123a4:	mov	r2, #65	; 0x41
   123a8:	bl	115d0 <memchr@plt>
   123ac:	cmp	r0, #0
   123b0:	beq	12760 <__assert_fail@plt+0x107c>
   123b4:	ldrb	r0, [r0, #1]
   123b8:	sub	r1, r6, #1
   123bc:	cmp	r0, #0
   123c0:	movweq	r0, #48	; 0x30
   123c4:	strb	r0, [r5, r6]
   123c8:	mov	r6, r1
   123cc:	beq	12394 <__assert_fail@plt+0xcb0>
   123d0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   123d4:	ldr	r3, [sp, #68]	; 0x44
   123d8:	mov	r0, #1
   123dc:	mvn	r2, #99	; 0x63
   123e0:	str	r0, [sp]
   123e4:	mvn	r0, #99	; 0x63
   123e8:	bl	18000 <__assert_fail@plt+0x691c>
   123ec:	cmp	r0, #0
   123f0:	bne	12384 <__assert_fail@plt+0xca0>
   123f4:	movw	r1, #46063	; 0xb3ef
   123f8:	mov	r0, #0
   123fc:	mov	r2, #5
   12400:	movt	r1, #1
   12404:	bl	11408 <dcgettext@plt>
   12408:	mov	r2, r0
   1240c:	ldr	r0, [sp, #68]	; 0x44
   12410:	tst	r7, #1
   12414:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12418:	mov	r1, #0
   1241c:	str	r0, [sp]
   12420:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12424:	movne	r3, r0
   12428:	mov	r0, #0
   1242c:	bl	114b0 <error@plt>
   12430:	ldr	r4, [sp, #64]	; 0x40
   12434:	ldr	r0, [sp, #32]
   12438:	add	r2, sl, #1
   1243c:	mov	r1, r4
   12440:	bl	113cc <memcpy@plt>
   12444:	mov	r7, #0
   12448:	subs	sl, sl, #1
   1244c:	bne	12340 <__assert_fail@plt+0xc5c>
   12450:	b	12460 <__assert_fail@plt+0xd7c>
   12454:	ldr	r4, [sp, #64]	; 0x40
   12458:	subs	sl, sl, #1
   1245c:	bne	12340 <__assert_fail@plt+0xc5c>
   12460:	mov	r7, #1
   12464:	b	12640 <__assert_fail@plt+0xf5c>
   12468:	mov	r7, #1
   1246c:	b	124a8 <__assert_fail@plt+0xdc4>
   12470:	ldr	r0, [sp, #44]	; 0x2c
   12474:	ldr	r1, [sp, #40]	; 0x28
   12478:	bl	13934 <__assert_fail@plt+0x2250>
   1247c:	mov	r4, r0
   12480:	ldr	r0, [sp, #32]
   12484:	ldr	r1, [sp, #64]	; 0x40
   12488:	add	r2, sl, #1
   1248c:	bl	113cc <memcpy@plt>
   12490:	cmp	r4, #0
   12494:	mov	r0, #0
   12498:	movne	r7, r0
   1249c:	ldr	r4, [sp, #64]	; 0x40
   124a0:	subs	sl, sl, #1
   124a4:	beq	12640 <__assert_fail@plt+0xf5c>
   124a8:	mov	r0, r4
   124ac:	mov	r1, #48	; 0x30
   124b0:	mov	r2, sl
   124b4:	bl	11588 <memset@plt>
   124b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   124bc:	ldr	r3, [sp, #68]	; 0x44
   124c0:	mov	r0, #0
   124c4:	mvn	r2, #99	; 0x63
   124c8:	strb	r0, [r4, sl]
   124cc:	mov	r0, #1
   124d0:	str	r0, [sp]
   124d4:	mvn	r0, #99	; 0x63
   124d8:	bl	18000 <__assert_fail@plt+0x691c>
   124dc:	cmp	r0, #0
   124e0:	beq	12470 <__assert_fail@plt+0xd8c>
   124e4:	bl	11558 <__errno_location@plt>
   124e8:	mov	r4, r0
   124ec:	ldr	r0, [r4]
   124f0:	cmp	r0, #17
   124f4:	bne	1249c <__assert_fail@plt+0xdb8>
   124f8:	mov	r6, sl
   124fc:	cmp	r6, #0
   12500:	beq	1249c <__assert_fail@plt+0xdb8>
   12504:	ldrb	r1, [r5, r6]
   12508:	mov	r0, r8
   1250c:	mov	r2, #65	; 0x41
   12510:	bl	115d0 <memchr@plt>
   12514:	cmp	r0, #0
   12518:	beq	12760 <__assert_fail@plt+0x107c>
   1251c:	ldrb	r0, [r0, #1]
   12520:	sub	r1, r6, #1
   12524:	cmp	r0, #0
   12528:	movweq	r0, #48	; 0x30
   1252c:	strb	r0, [r5, r6]
   12530:	mov	r6, r1
   12534:	beq	124fc <__assert_fail@plt+0xe18>
   12538:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1253c:	ldr	r3, [sp, #68]	; 0x44
   12540:	mov	r0, #1
   12544:	mvn	r2, #99	; 0x63
   12548:	str	r0, [sp]
   1254c:	mvn	r0, #99	; 0x63
   12550:	bl	18000 <__assert_fail@plt+0x691c>
   12554:	cmp	r0, #0
   12558:	bne	124ec <__assert_fail@plt+0xe08>
   1255c:	b	12470 <__assert_fail@plt+0xd8c>
   12560:	mov	r7, #1
   12564:	sub	r5, r4, #1
   12568:	b	12588 <__assert_fail@plt+0xea4>
   1256c:	ldr	r0, [sp, #32]
   12570:	ldr	r1, [sp, #64]	; 0x40
   12574:	add	r2, sl, #1
   12578:	bl	113cc <memcpy@plt>
   1257c:	ldr	r4, [sp, #64]	; 0x40
   12580:	subs	sl, sl, #1
   12584:	beq	12640 <__assert_fail@plt+0xf5c>
   12588:	mov	r0, r4
   1258c:	mov	r1, #48	; 0x30
   12590:	mov	r2, sl
   12594:	bl	11588 <memset@plt>
   12598:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1259c:	ldr	r3, [sp, #68]	; 0x44
   125a0:	mov	r0, #0
   125a4:	mvn	r2, #99	; 0x63
   125a8:	strb	r0, [r4, sl]
   125ac:	mov	r0, #1
   125b0:	str	r0, [sp]
   125b4:	mvn	r0, #99	; 0x63
   125b8:	bl	18000 <__assert_fail@plt+0x691c>
   125bc:	cmp	r0, #0
   125c0:	beq	1256c <__assert_fail@plt+0xe88>
   125c4:	bl	11558 <__errno_location@plt>
   125c8:	mov	r4, r0
   125cc:	ldr	r0, [r4]
   125d0:	cmp	r0, #17
   125d4:	bne	1257c <__assert_fail@plt+0xe98>
   125d8:	mov	r6, sl
   125dc:	cmp	r6, #0
   125e0:	beq	1257c <__assert_fail@plt+0xe98>
   125e4:	ldrb	r1, [r5, r6]
   125e8:	mov	r0, r8
   125ec:	mov	r2, #65	; 0x41
   125f0:	bl	115d0 <memchr@plt>
   125f4:	cmp	r0, #0
   125f8:	beq	12760 <__assert_fail@plt+0x107c>
   125fc:	ldrb	r0, [r0, #1]
   12600:	sub	r1, r6, #1
   12604:	cmp	r0, #0
   12608:	movweq	r0, #48	; 0x30
   1260c:	strb	r0, [r5, r6]
   12610:	mov	r6, r1
   12614:	beq	125dc <__assert_fail@plt+0xef8>
   12618:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1261c:	ldr	r3, [sp, #68]	; 0x44
   12620:	mov	r0, #1
   12624:	mvn	r2, #99	; 0x63
   12628:	str	r0, [sp]
   1262c:	mvn	r0, #99	; 0x63
   12630:	bl	18000 <__assert_fail@plt+0x691c>
   12634:	cmp	r0, #0
   12638:	bne	125cc <__assert_fail@plt+0xee8>
   1263c:	b	1256c <__assert_fail@plt+0xe88>
   12640:	ldr	r6, [sp, #36]	; 0x24
   12644:	ldr	r5, [fp, #-64]	; 0xffffffc0
   12648:	ldr	sl, [sp, #20]
   1264c:	and	r7, r7, #1
   12650:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12654:	bl	11414 <unlink@plt>
   12658:	cmp	r0, #0
   1265c:	beq	12678 <__assert_fail@plt+0xf94>
   12660:	bl	11558 <__errno_location@plt>
   12664:	ldr	r4, [r0]
   12668:	movw	r1, #46081	; 0xb401
   1266c:	mov	r7, #0
   12670:	movt	r1, #1
   12674:	b	1268c <__assert_fail@plt+0xfa8>
   12678:	movw	r1, #46102	; 0xb416
   1267c:	mov	r4, #0
   12680:	tst	r6, #255	; 0xff
   12684:	movt	r1, #1
   12688:	beq	126ac <__assert_fail@plt+0xfc8>
   1268c:	mov	r0, #0
   12690:	mov	r2, #5
   12694:	bl	11408 <dcgettext@plt>
   12698:	mov	r2, r0
   1269c:	mov	r0, #0
   126a0:	mov	r1, r4
   126a4:	mov	r3, r5
   126a8:	bl	114b0 <error@plt>
   126ac:	ldr	r0, [sp, #44]	; 0x2c
   126b0:	cmp	r0, #0
   126b4:	bmi	12714 <__assert_fail@plt+0x1030>
   126b8:	ldr	r6, [sp, #40]	; 0x28
   126bc:	mov	sl, r0
   126c0:	mov	r1, r6
   126c4:	bl	13934 <__assert_fail@plt+0x2250>
   126c8:	mov	r4, r0
   126cc:	mov	r0, sl
   126d0:	bl	116d8 <close@plt>
   126d4:	cmp	r0, #0
   126d8:	beq	1271c <__assert_fail@plt+0x1038>
   126dc:	bl	11558 <__errno_location@plt>
   126e0:	movw	r1, #46030	; 0xb3ce
   126e4:	ldr	r4, [r0]
   126e8:	mov	r0, #0
   126ec:	mov	r2, #5
   126f0:	mov	r7, #0
   126f4:	movt	r1, #1
   126f8:	bl	11408 <dcgettext@plt>
   126fc:	mov	r2, r0
   12700:	mov	r0, #0
   12704:	mov	r1, r4
   12708:	mov	r3, r6
   1270c:	bl	114b0 <error@plt>
   12710:	b	12728 <__assert_fail@plt+0x1044>
   12714:	ldr	r6, [sp, #40]	; 0x28
   12718:	b	1272c <__assert_fail@plt+0x1048>
   1271c:	clz	r0, r4
   12720:	lsr	r0, r0, #5
   12724:	and	r7, r7, r0
   12728:	ldr	sl, [sp, #20]
   1272c:	ldr	r0, [sp, #68]	; 0x44
   12730:	bl	143e8 <__assert_fail@plt+0x2d04>
   12734:	mov	r0, sl
   12738:	bl	143e8 <__assert_fail@plt+0x2d04>
   1273c:	mov	r0, r6
   12740:	bl	143e8 <__assert_fail@plt+0x2d04>
   12744:	b	11efc <__assert_fail@plt+0x818>
   12748:	eor	r0, r6, #1
   1274c:	sub	sp, fp, #28
   12750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12754:	mov	r0, #0
   12758:	sub	sp, fp, #28
   1275c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12760:	movw	r0, #45596	; 0xb21c
   12764:	movw	r1, #46114	; 0xb422
   12768:	movw	r3, #46126	; 0xb42e
   1276c:	mov	r2, #1000	; 0x3e8
   12770:	movt	r0, #1
   12774:	movt	r1, #1
   12778:	movt	r3, #1
   1277c:	bl	116e4 <__assert_fail@plt>
   12780:	cmn	r0, #3
   12784:	bne	127d0 <__assert_fail@plt+0x10ec>
   12788:	movw	r0, #49488	; 0xc150
   1278c:	movw	r2, #45114	; 0xb03a
   12790:	mov	r1, #0
   12794:	movt	r0, #2
   12798:	movt	r2, #1
   1279c:	str	r1, [sp, #4]
   127a0:	movw	r1, #44960	; 0xafa0
   127a4:	movt	r1, #1
   127a8:	ldr	r3, [r0]
   127ac:	movw	r0, #49588	; 0xc1b4
   127b0:	str	r2, [sp]
   127b4:	movw	r2, #45100	; 0xb02c
   127b8:	movt	r0, #2
   127bc:	movt	r2, #1
   127c0:	ldr	r0, [r0]
   127c4:	bl	186e8 <__assert_fail@plt+0x7004>
   127c8:	mov	r0, #0
   127cc:	bl	1151c <exit@plt>
   127d0:	cmn	r0, #2
   127d4:	bne	127e0 <__assert_fail@plt+0x10fc>
   127d8:	mov	r0, #0
   127dc:	bl	117e0 <__assert_fail@plt+0xfc>
   127e0:	mov	r0, #1
   127e4:	bl	117e0 <__assert_fail@plt+0xfc>
   127e8:	movw	r1, #45025	; 0xafe1
   127ec:	mov	r0, #0
   127f0:	mov	r2, #5
   127f4:	movt	r1, #1
   127f8:	bl	11408 <dcgettext@plt>
   127fc:	mov	r2, r0
   12800:	mov	r0, #1
   12804:	mov	r1, #0
   12808:	bl	114b0 <error@plt>
   1280c:	movw	r1, #45126	; 0xb046
   12810:	mov	r0, #0
   12814:	mov	r2, #5
   12818:	movt	r1, #1
   1281c:	bl	11408 <dcgettext@plt>
   12820:	mov	r2, r0
   12824:	mov	r0, #0
   12828:	mov	r1, #0
   1282c:	bl	114b0 <error@plt>
   12830:	mov	r0, #1
   12834:	bl	117e0 <__assert_fail@plt+0xfc>
   12838:	movw	r4, #45147	; 0xb05b
   1283c:	cmp	r8, #0
   12840:	movt	r4, #1
   12844:	movne	r4, r8
   12848:	bl	11558 <__errno_location@plt>
   1284c:	ldr	r5, [r0]
   12850:	mov	r0, #0
   12854:	mov	r1, #3
   12858:	mov	r2, r4
   1285c:	bl	1723c <__assert_fail@plt+0x5b58>
   12860:	movw	r2, #46811	; 0xb6db
   12864:	mov	r3, r0
   12868:	mov	r0, #1
   1286c:	mov	r1, r5
   12870:	movt	r2, #1
   12874:	bl	114b0 <error@plt>
   12878:	movw	r0, #49600	; 0xc1c0
   1287c:	movt	r0, #2
   12880:	ldr	r0, [r0]
   12884:	b	17758 <__assert_fail@plt+0x6074>
   12888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1288c:	add	fp, sp, #28
   12890:	sub	sp, sp, #148	; 0x94
   12894:	sub	sp, sp, #2048	; 0x800
   12898:	mov	r4, r0
   1289c:	ldrb	r0, [r3, #20]
   128a0:	mov	r6, r3
   128a4:	mov	r5, r1
   128a8:	str	r2, [sp, #112]	; 0x70
   128ac:	cmp	r0, #0
   128b0:	beq	128c4 <__assert_fail@plt+0x11e0>
   128b4:	ldrb	r0, [r6, #22]
   128b8:	ldr	r1, [r6, #4]
   128bc:	add	r9, r1, r0
   128c0:	b	128c8 <__assert_fail@plt+0x11e4>
   128c4:	mov	r9, #0
   128c8:	add	r2, sp, #120	; 0x78
   128cc:	mov	r0, #3
   128d0:	mov	r1, r4
   128d4:	bl	11450 <__fxstat64@plt>
   128d8:	cmp	r0, #0
   128dc:	beq	12910 <__assert_fail@plt+0x122c>
   128e0:	bl	11558 <__errno_location@plt>
   128e4:	movw	r1, #45689	; 0xb279
   128e8:	ldr	r4, [r0]
   128ec:	mov	r0, #0
   128f0:	mov	r2, #5
   128f4:	mov	r6, #0
   128f8:	movt	r1, #1
   128fc:	bl	11408 <dcgettext@plt>
   12900:	mov	r2, r0
   12904:	mov	r0, #0
   12908:	mov	r1, r4
   1290c:	b	12974 <__assert_fail@plt+0x1290>
   12910:	ldr	r0, [sp, #136]	; 0x88
   12914:	and	r1, r0, #61440	; 0xf000
   12918:	cmp	r1, #8192	; 0x2000
   1291c:	bne	12934 <__assert_fail@plt+0x1250>
   12920:	mov	r0, r4
   12924:	bl	116a8 <isatty@plt>
   12928:	cmp	r0, #0
   1292c:	bne	12950 <__assert_fail@plt+0x126c>
   12930:	ldr	r0, [sp, #136]	; 0x88
   12934:	and	r0, r0, #61440	; 0xf000
   12938:	cmp	r0, #49152	; 0xc000
   1293c:	beq	12950 <__assert_fail@plt+0x126c>
   12940:	cmp	r0, #32768	; 0x8000
   12944:	beq	12988 <__assert_fail@plt+0x12a4>
   12948:	cmp	r0, #4096	; 0x1000
   1294c:	bne	12994 <__assert_fail@plt+0x12b0>
   12950:	movw	r1, #45706	; 0xb28a
   12954:	mov	r6, #0
   12958:	movt	r1, #1
   1295c:	mov	r0, #0
   12960:	mov	r2, #5
   12964:	bl	11408 <dcgettext@plt>
   12968:	mov	r2, r0
   1296c:	mov	r0, #0
   12970:	mov	r1, #0
   12974:	mov	r3, r5
   12978:	bl	114b0 <error@plt>
   1297c:	and	r0, r6, #1
   12980:	sub	sp, fp, #28
   12984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12988:	ldr	r0, [sp, #172]	; 0xac
   1298c:	cmn	r0, #1
   12990:	ble	12aa4 <__assert_fail@plt+0x13c0>
   12994:	ldr	r0, [r6, #4]
   12998:	mov	r1, #4
   1299c:	bl	18a04 <__assert_fail@plt+0x7320>
   129a0:	str	r0, [sp, #116]	; 0x74
   129a4:	ldr	r0, [sp, #136]	; 0x88
   129a8:	ldr	ip, [r6, #8]
   129ac:	ldr	lr, [r6, #12]
   129b0:	str	r4, [sp, #100]	; 0x64
   129b4:	str	r5, [sp, #76]	; 0x4c
   129b8:	str	r9, [sp, #48]	; 0x30
   129bc:	and	r0, r0, #61440	; 0xf000
   129c0:	and	r1, ip, lr
   129c4:	cmn	r1, #1
   129c8:	beq	12a64 <__assert_fail@plt+0x1380>
   129cc:	mov	r7, #0
   129d0:	cmp	r0, #32768	; 0x8000
   129d4:	str	ip, [sp, #60]	; 0x3c
   129d8:	str	lr, [sp, #56]	; 0x38
   129dc:	bne	12a8c <__assert_fail@plt+0x13a8>
   129e0:	ldr	r1, [sp, #176]	; 0xb0
   129e4:	mov	r7, #0
   129e8:	ldr	r0, [sp, #168]	; 0xa8
   129ec:	ldr	r5, [sp, #172]	; 0xac
   129f0:	subs	r2, r1, #536870913	; 0x20000001
   129f4:	rscs	r2, r7, r1, asr #31
   129f8:	mov	r2, #0
   129fc:	movwcc	r2, #1
   12a00:	rsbs	r3, r1, #0
   12a04:	sbcs	r3, r7, r1, asr #31
   12a08:	mov	r3, #0
   12a0c:	movwlt	r3, #1
   12a10:	ands	r2, r3, r2
   12a14:	asrne	r2, r1, #31
   12a18:	moveq	r1, #512	; 0x200
   12a1c:	subs	r3, r1, ip
   12a20:	sbcs	r3, r2, lr
   12a24:	mov	r3, #0
   12a28:	movwlt	r3, #1
   12a2c:	cmp	r3, #0
   12a30:	moveq	r1, ip
   12a34:	moveq	r2, lr
   12a38:	subs	r1, r0, r1
   12a3c:	sbcs	r1, r5, r2
   12a40:	movwlt	r7, #1
   12a44:	cmp	r7, #0
   12a48:	moveq	r5, r7
   12a4c:	movne	r7, r0
   12a50:	ldr	r2, [r6, #4]
   12a54:	str	r6, [sp, #52]	; 0x34
   12a58:	cmp	r2, #0
   12a5c:	bne	12b0c <__assert_fail@plt+0x1428>
   12a60:	b	12d30 <__assert_fail@plt+0x164c>
   12a64:	cmp	r0, #32768	; 0x8000
   12a68:	bne	12ab4 <__assert_fail@plt+0x13d0>
   12a6c:	ldrb	r0, [r6, #21]
   12a70:	ldr	sl, [sp, #168]	; 0xa8
   12a74:	ldr	r8, [sp, #172]	; 0xac
   12a78:	mov	r7, #0
   12a7c:	cmp	r0, #0
   12a80:	beq	12b8c <__assert_fail@plt+0x14a8>
   12a84:	str	r8, [sp, #56]	; 0x38
   12a88:	str	sl, [sp, #60]	; 0x3c
   12a8c:	mov	r5, #0
   12a90:	ldr	r2, [r6, #4]
   12a94:	str	r6, [sp, #52]	; 0x34
   12a98:	cmp	r2, #0
   12a9c:	bne	12b0c <__assert_fail@plt+0x1428>
   12aa0:	b	12d30 <__assert_fail@plt+0x164c>
   12aa4:	movw	r1, #45728	; 0xb2a0
   12aa8:	mov	r6, #0
   12aac:	movt	r1, #1
   12ab0:	b	1295c <__assert_fail@plt+0x1278>
   12ab4:	mov	r0, #2
   12ab8:	mov	r2, #0
   12abc:	mov	r3, #0
   12ac0:	mov	r7, #0
   12ac4:	str	r0, [sp]
   12ac8:	mov	r0, r4
   12acc:	bl	11474 <lseek64@plt>
   12ad0:	subs	r2, r0, #1
   12ad4:	mov	r5, #0
   12ad8:	sbcs	r2, r1, #0
   12adc:	mov	r2, #0
   12ae0:	movwlt	r2, #1
   12ae4:	cmp	r2, #0
   12ae8:	mvn	r2, #0
   12aec:	movne	r1, r2
   12af0:	movne	r0, r2
   12af4:	str	r1, [sp, #56]	; 0x38
   12af8:	str	r0, [sp, #60]	; 0x3c
   12afc:	ldr	r2, [r6, #4]
   12b00:	str	r6, [sp, #52]	; 0x34
   12b04:	cmp	r2, #0
   12b08:	beq	12d30 <__assert_fail@plt+0x164c>
   12b0c:	movw	r9, #46424	; 0xb558
   12b10:	ldr	r1, [sp, #116]	; 0x74
   12b14:	mov	r6, #0
   12b18:	mov	sl, r2
   12b1c:	str	r2, [sp, #108]	; 0x6c
   12b20:	movt	r9, #1
   12b24:	mov	r4, r9
   12b28:	ldr	r8, [r4], #4
   12b2c:	cmp	r8, #0
   12b30:	mvneq	r8, #1
   12b34:	addeq	r4, r9, #4
   12b38:	cmn	r8, #1
   12b3c:	bgt	12b58 <__assert_fail@plt+0x1474>
   12b40:	rsb	r0, r8, #0
   12b44:	cmp	sl, r0
   12b48:	bls	12c98 <__assert_fail@plt+0x15b4>
   12b4c:	add	sl, r8, sl
   12b50:	sub	r6, r6, r8
   12b54:	b	12b28 <__assert_fail@plt+0x1444>
   12b58:	cmp	sl, r8
   12b5c:	bcc	12c88 <__assert_fail@plt+0x15a4>
   12b60:	lsl	r2, r8, #2
   12b64:	mov	r0, r1
   12b68:	str	r1, [sp, #104]	; 0x68
   12b6c:	mov	r1, r4
   12b70:	bl	113cc <memcpy@plt>
   12b74:	ldr	r1, [sp, #104]	; 0x68
   12b78:	ldr	r2, [sp, #108]	; 0x6c
   12b7c:	sub	sl, sl, r8
   12b80:	add	r4, r4, r8, lsl #2
   12b84:	add	r1, r1, r8, lsl #2
   12b88:	b	12b28 <__assert_fail@plt+0x1444>
   12b8c:	ldr	r0, [sp, #176]	; 0xb0
   12b90:	mov	r7, #0
   12b94:	subs	r1, r0, #536870913	; 0x20000001
   12b98:	mov	r4, r0
   12b9c:	rscs	r1, r7, r0, asr #31
   12ba0:	mov	r1, #0
   12ba4:	movwcc	r1, #1
   12ba8:	rsbs	r2, r0, #0
   12bac:	sbcs	r2, r7, r0, asr #31
   12bb0:	mov	r2, #0
   12bb4:	movwlt	r2, #1
   12bb8:	ands	r5, r2, r1
   12bbc:	mov	r1, r8
   12bc0:	asrne	r5, r0, #31
   12bc4:	moveq	r4, #512	; 0x200
   12bc8:	mov	r0, sl
   12bcc:	mov	r2, r4
   12bd0:	mov	r3, r5
   12bd4:	bl	1a5c0 <__assert_fail@plt+0x8edc>
   12bd8:	orrs	r0, sl, r8
   12bdc:	beq	12c60 <__assert_fail@plt+0x157c>
   12be0:	subs	r1, sl, r4
   12be4:	mov	r7, #0
   12be8:	mov	r0, #0
   12bec:	mov	lr, r5
   12bf0:	sbcs	r1, r8, r5
   12bf4:	movwlt	r7, #1
   12bf8:	cmp	r7, #0
   12bfc:	mov	r5, r7
   12c00:	movne	r5, r8
   12c04:	movne	r7, sl
   12c08:	orrs	r1, r2, r3
   12c0c:	beq	138b4 <__assert_fail@plt+0x21d0>
   12c10:	subs	ip, r4, r2
   12c14:	mvn	r1, sl
   12c18:	sbc	r2, lr, r3
   12c1c:	mvn	r3, #-2147483648	; 0x80000000
   12c20:	subs	r4, ip, r1
   12c24:	sub	r3, r3, r8
   12c28:	sbcs	r4, r2, r3
   12c2c:	movwlt	r0, #1
   12c30:	cmp	r0, #0
   12c34:	movne	r1, ip
   12c38:	movne	r3, r2
   12c3c:	adds	sl, r1, sl
   12c40:	adc	r8, r3, r8
   12c44:	str	sl, [sp, #60]	; 0x3c
   12c48:	str	r8, [sp, #56]	; 0x38
   12c4c:	ldr	r2, [r6, #4]
   12c50:	str	r6, [sp, #52]	; 0x34
   12c54:	cmp	r2, #0
   12c58:	bne	12b0c <__assert_fail@plt+0x1428>
   12c5c:	b	12d30 <__assert_fail@plt+0x164c>
   12c60:	mov	r0, #0
   12c64:	mov	r5, #0
   12c68:	str	r0, [sp, #60]	; 0x3c
   12c6c:	mov	r0, #0
   12c70:	str	r0, [sp, #56]	; 0x38
   12c74:	ldr	r2, [r6, #4]
   12c78:	str	r6, [sp, #52]	; 0x34
   12c7c:	cmp	r2, #0
   12c80:	bne	12b0c <__assert_fail@plt+0x1428>
   12c84:	b	12d30 <__assert_fail@plt+0x164c>
   12c88:	cmp	sl, #2
   12c8c:	addcs	r0, sl, sl, lsl #1
   12c90:	cmpcs	r0, r8
   12c94:	bcs	137e8 <__assert_fail@plt+0x2104>
   12c98:	add	r6, r6, sl
   12c9c:	sub	r9, r6, #1
   12ca0:	sub	r4, r2, r6
   12ca4:	sub	r8, r2, #1
   12ca8:	mov	sl, #0
   12cac:	mov	r6, r9
   12cb0:	cmp	r6, r9
   12cb4:	bls	12d04 <__assert_fail@plt+0x1620>
   12cb8:	sub	r0, r4, sl
   12cbc:	subs	r2, r0, #1
   12cc0:	mov	r0, #0
   12cc4:	sbc	r3, r0, #0
   12cc8:	ldr	r0, [sp, #112]	; 0x70
   12ccc:	bl	1756c <__assert_fail@plt+0x5e88>
   12cd0:	ldr	r3, [sp, #116]	; 0x74
   12cd4:	add	r0, sl, r0
   12cd8:	ldr	r1, [r3, r0, lsl #2]
   12cdc:	ldr	r2, [r3, sl, lsl #2]
   12ce0:	str	r1, [r3, sl, lsl #2]
   12ce4:	str	r2, [r3, r0, lsl #2]
   12ce8:	ldr	r2, [sp, #108]	; 0x6c
   12cec:	add	sl, sl, #1
   12cf0:	sub	r6, r6, r9
   12cf4:	cmp	sl, r2
   12cf8:	beq	12d30 <__assert_fail@plt+0x164c>
   12cfc:	cmp	r6, r9
   12d00:	bhi	12cb8 <__assert_fail@plt+0x15d4>
   12d04:	ldr	r1, [sp, #116]	; 0x74
   12d08:	add	r6, r8, r6
   12d0c:	ldr	r0, [r1, sl, lsl #2]
   12d10:	str	r0, [r1, r4, lsl #2]
   12d14:	mvn	r0, #0
   12d18:	add	r4, r4, #1
   12d1c:	str	r0, [r1, sl, lsl #2]
   12d20:	add	sl, sl, #1
   12d24:	sub	r6, r6, r9
   12d28:	cmp	sl, r2
   12d2c:	bne	12cfc <__assert_fail@plt+0x1618>
   12d30:	ldr	r0, [sp, #112]	; 0x70
   12d34:	bl	17564 <__assert_fail@plt+0x5e80>
   12d38:	ldr	sl, [sp, #100]	; 0x64
   12d3c:	ldr	r2, [sp, #52]	; 0x34
   12d40:	ldr	r9, [sp, #48]	; 0x30
   12d44:	ldr	r4, [sp, #60]	; 0x3c
   12d48:	ldr	r6, [sp, #56]	; 0x38
   12d4c:	str	r0, [sp, #44]	; 0x2c
   12d50:	mov	r0, #1
   12d54:	str	r0, [sp, #40]	; 0x28
   12d58:	orrs	r0, r7, r5
   12d5c:	mov	r8, #0
   12d60:	beq	12d90 <__assert_fail@plt+0x16ac>
   12d64:	str	r5, [sp, #112]	; 0x70
   12d68:	ldr	r0, [r2, #4]
   12d6c:	ldrb	r1, [r2, #22]
   12d70:	str	r7, [sp, #108]	; 0x6c
   12d74:	mov	r7, #0
   12d78:	mov	r5, #0
   12d7c:	cmn	r0, r1
   12d80:	bne	12db0 <__assert_fail@plt+0x16cc>
   12d84:	orrs	r0, r7, r5
   12d88:	mov	r8, #0
   12d8c:	bne	12d64 <__assert_fail@plt+0x1680>
   12d90:	orrs	r0, r4, r6
   12d94:	mov	r7, r4
   12d98:	str	r6, [sp, #112]	; 0x70
   12d9c:	mov	r4, #0
   12da0:	mov	r6, #0
   12da4:	mov	r8, r9
   12da8:	bne	12d68 <__assert_fail@plt+0x1684>
   12dac:	b	13754 <__assert_fail@plt+0x2070>
   12db0:	mov	r1, #0
   12db4:	str	r4, [sp, #60]	; 0x3c
   12db8:	str	r6, [sp, #56]	; 0x38
   12dbc:	cmp	r1, r0
   12dc0:	bcs	12e14 <__assert_fail@plt+0x1730>
   12dc4:	ldr	r0, [sp, #116]	; 0x74
   12dc8:	ldr	r7, [r0, r1, lsl #2]
   12dcc:	add	r1, r1, #1
   12dd0:	str	r1, [sp, #36]	; 0x24
   12dd4:	bl	1154c <getpagesize@plt>
   12dd8:	ldr	r5, [sp, #108]	; 0x6c
   12ddc:	cmp	r7, #1
   12de0:	blt	12e30 <__assert_fail@plt+0x174c>
   12de4:	mov	r3, r7
   12de8:	uxtb	r1, r7
   12dec:	ubfx	r2, r7, #4, #8
   12df0:	mov	r4, #65536	; 0x10000
   12df4:	bfc	r3, #12, #20
   12df8:	eor	r1, r2, r1
   12dfc:	orr	r3, r3, r3, lsl #12
   12e00:	ubfx	r3, r3, #8, #8
   12e04:	eor	r2, r2, r3
   12e08:	orrs	r1, r1, r2
   12e0c:	movwne	r4, #61440	; 0xf000
   12e10:	b	12e34 <__assert_fail@plt+0x1750>
   12e14:	add	r1, r1, #1
   12e18:	mov	r4, #65536	; 0x10000
   12e1c:	mov	r7, #0
   12e20:	str	r1, [sp, #36]	; 0x24
   12e24:	bl	1154c <getpagesize@plt>
   12e28:	ldr	r6, [sp, #108]	; 0x6c
   12e2c:	b	12e38 <__assert_fail@plt+0x1754>
   12e30:	mov	r4, #65536	; 0x10000
   12e34:	mov	r6, r5
   12e38:	ldr	r3, [sp, #112]	; 0x70
   12e3c:	subs	r1, r6, r4
   12e40:	str	r4, [sp, #64]	; 0x40
   12e44:	sbcs	r1, r3, #0
   12e48:	mov	r1, #0
   12e4c:	movwlt	r1, #1
   12e50:	rsbs	r2, r6, #0
   12e54:	rscs	r2, r3, #0
   12e58:	mov	r2, #0
   12e5c:	movwlt	r2, #1
   12e60:	and	r5, r2, r1
   12e64:	movw	r2, #43691	; 0xaaab
   12e68:	orr	r1, r4, #2
   12e6c:	movt	r2, #43690	; 0xaaaa
   12e70:	umull	r1, r2, r1, r2
   12e74:	lsr	r1, r2, #1
   12e78:	add	r4, r1, r1, lsl #1
   12e7c:	mov	r1, r4
   12e80:	bl	188a4 <__assert_fail@plt+0x71c0>
   12e84:	cmp	r5, #0
   12e88:	str	r0, [sp, #96]	; 0x60
   12e8c:	str	r5, [sp, #104]	; 0x68
   12e90:	bne	12ec0 <__assert_fail@plt+0x17dc>
   12e94:	mov	r0, sl
   12e98:	mov	r1, #3
   12e9c:	bl	141cc <__assert_fail@plt+0x2ae8>
   12ea0:	cmp	r0, #1
   12ea4:	blt	12ec0 <__assert_fail@plt+0x17dc>
   12ea8:	orr	r2, r0, #65536	; 0x10000
   12eac:	cmp	r2, r0
   12eb0:	beq	12ec0 <__assert_fail@plt+0x17dc>
   12eb4:	mov	r0, sl
   12eb8:	mov	r1, #4
   12ebc:	bl	141cc <__assert_fail@plt+0x2ae8>
   12ec0:	ldr	r0, [sp, #136]	; 0x88
   12ec4:	and	r0, r0, #61440	; 0xf000
   12ec8:	cmp	r0, #8192	; 0x2000
   12ecc:	bne	12f00 <__assert_fail@plt+0x181c>
   12ed0:	movw	r1, #27905	; 0x6d01
   12ed4:	mov	r0, #1
   12ed8:	add	lr, sp, #768	; 0x300
   12edc:	add	r2, sp, #880	; 0x370
   12ee0:	str	r0, [sp, #884]	; 0x374
   12ee4:	mov	r0, #6
   12ee8:	movt	r1, #16392	; 0x4008
   12eec:	strh	r0, [lr, #112]	; 0x70
   12ef0:	mov	r0, sl
   12ef4:	bl	11468 <ioctl@plt>
   12ef8:	cmp	r0, #0
   12efc:	beq	12f2c <__assert_fail@plt+0x1848>
   12f00:	mov	r0, #0
   12f04:	mov	r2, #0
   12f08:	mov	r3, #0
   12f0c:	str	r0, [sp]
   12f10:	mov	r0, sl
   12f14:	bl	11474 <lseek64@plt>
   12f18:	subs	r2, r0, #1
   12f1c:	sbcs	r2, r1, #0
   12f20:	bge	138d0 <__assert_fail@plt+0x21ec>
   12f24:	orrs	r0, r0, r1
   12f28:	bne	138e0 <__assert_fail@plt+0x21fc>
   12f2c:	cmp	r7, #0
   12f30:	str	r7, [sp, #68]	; 0x44
   12f34:	bmi	13014 <__assert_fail@plt+0x1930>
   12f38:	mov	r0, r7
   12f3c:	mov	r1, r6
   12f40:	ldr	r6, [sp, #96]	; 0x60
   12f44:	lsr	r9, r7, #4
   12f48:	mov	r2, #3
   12f4c:	bfc	r0, #12, #20
   12f50:	orr	r0, r0, r0, lsl #12
   12f54:	strb	r7, [r6, #2]
   12f58:	strb	r9, [r6]
   12f5c:	lsr	r0, r0, #8
   12f60:	strb	r0, [r6, #1]
   12f64:	subs	r0, r1, r4
   12f68:	ldr	r0, [sp, #112]	; 0x70
   12f6c:	sbcs	r0, r0, #0
   12f70:	movcc	r4, r1
   12f74:	cmp	r4, #6
   12f78:	bcc	12fa4 <__assert_fail@plt+0x18c0>
   12f7c:	lsr	r7, r4, #1
   12f80:	mov	r5, #3
   12f84:	add	r0, r6, r5
   12f88:	mov	r1, r6
   12f8c:	mov	r2, r5
   12f90:	bl	113cc <memcpy@plt>
   12f94:	lsl	r2, r5, #1
   12f98:	cmp	r7, r5, lsl #1
   12f9c:	mov	r5, r2
   12fa0:	bcs	12f84 <__assert_fail@plt+0x18a0>
   12fa4:	cmp	r4, r2
   12fa8:	bls	12fbc <__assert_fail@plt+0x18d8>
   12fac:	ldr	r1, [sp, #96]	; 0x60
   12fb0:	add	r0, r1, r2
   12fb4:	sub	r2, r4, r2
   12fb8:	bl	113cc <memcpy@plt>
   12fbc:	ldr	r0, [sp, #68]	; 0x44
   12fc0:	tst	r0, #4096	; 0x1000
   12fc4:	beq	13038 <__assert_fail@plt+0x1954>
   12fc8:	ldr	r6, [sp, #108]	; 0x6c
   12fcc:	cmp	r4, #0
   12fd0:	beq	1303c <__assert_fail@plt+0x1958>
   12fd4:	mvn	r0, #127	; 0x7f
   12fd8:	cmp	r4, #512	; 0x200
   12fdc:	eor	r9, r9, r0
   12fe0:	ldr	r0, [sp, #96]	; 0x60
   12fe4:	strb	r9, [r0]
   12fe8:	bls	1303c <__assert_fail@plt+0x1958>
   12fec:	ldr	r2, [sp, #96]	; 0x60
   12ff0:	mov	r0, #512	; 0x200
   12ff4:	ldrb	r1, [r2, r0]
   12ff8:	eor	r1, r1, #128	; 0x80
   12ffc:	strb	r1, [r2, r0]
   13000:	add	r0, r0, #512	; 0x200
   13004:	cmp	r0, r4
   13008:	bcc	12ff4 <__assert_fail@plt+0x1910>
   1300c:	ldrb	r9, [r2]
   13010:	b	1303c <__assert_fail@plt+0x1958>
   13014:	movw	r0, #28516	; 0x6f64
   13018:	movt	r0, #109	; 0x6d
   1301c:	str	r0, [fp, #-37]	; 0xffffffdb
   13020:	movw	r0, #24946	; 0x6172
   13024:	movt	r0, #25710	; 0x646e
   13028:	str	r0, [fp, #-40]	; 0xffffffd8
   1302c:	cmp	r8, #0
   13030:	bne	13074 <__assert_fail@plt+0x1990>
   13034:	b	130bc <__assert_fail@plt+0x19d8>
   13038:	ldr	r6, [sp, #108]	; 0x6c
   1303c:	ldr	r1, [sp, #96]	; 0x60
   13040:	movw	r3, #45948	; 0xb37c
   13044:	uxtb	r2, r9
   13048:	movt	r3, #1
   1304c:	str	r2, [sp]
   13050:	mov	r2, #7
   13054:	ldrb	r0, [r1, #1]
   13058:	ldrb	r1, [r1, #2]
   1305c:	stmib	sp, {r0, r1}
   13060:	sub	r0, fp, #40	; 0x28
   13064:	mov	r1, #1
   13068:	bl	11564 <__sprintf_chk@plt>
   1306c:	cmp	r8, #0
   13070:	beq	130bc <__assert_fail@plt+0x19d8>
   13074:	movw	r1, #45794	; 0xb2e2
   13078:	mov	r0, #0
   1307c:	mov	r2, #5
   13080:	movt	r1, #1
   13084:	bl	11408 <dcgettext@plt>
   13088:	mov	r2, r0
   1308c:	ldr	r0, [sp, #36]	; 0x24
   13090:	ldr	r3, [sp, #76]	; 0x4c
   13094:	mov	r1, #0
   13098:	stm	sp, {r0, r8}
   1309c:	sub	r0, fp, #40	; 0x28
   130a0:	str	r0, [sp, #8]
   130a4:	mov	r0, #0
   130a8:	bl	114b0 <error@plt>
   130ac:	mov	r0, #0
   130b0:	bl	113f0 <time@plt>
   130b4:	add	r0, r0, #5
   130b8:	str	r0, [sp, #24]
   130bc:	mov	r0, #0
   130c0:	mov	r4, r6
   130c4:	ldr	r6, [sp, #96]	; 0x60
   130c8:	mov	r5, #0
   130cc:	mov	r9, #0
   130d0:	str	r0, [sp, #72]	; 0x48
   130d4:	movw	r0, #44671	; 0xae7f
   130d8:	movt	r0, #1
   130dc:	str	r0, [sp, #28]
   130e0:	mov	r0, #0
   130e4:	str	r0, [sp, #32]
   130e8:	ldr	r0, [sp, #112]	; 0x70
   130ec:	str	r0, [sp, #80]	; 0x50
   130f0:	ldr	r3, [sp, #68]	; 0x44
   130f4:	mvn	r1, #0
   130f8:	ldr	r7, [sp, #64]	; 0x40
   130fc:	str	r4, [sp, #84]	; 0x54
   13100:	subs	r0, r1, r4
   13104:	ldr	r0, [sp, #80]	; 0x50
   13108:	mov	r4, r7
   1310c:	sbcs	r0, r1, r0
   13110:	bge	13154 <__assert_fail@plt+0x1a70>
   13114:	ldr	r0, [sp, #84]	; 0x54
   13118:	ldr	r1, [sp, #80]	; 0x50
   1311c:	mov	r4, r7
   13120:	subs	r0, r0, r5
   13124:	sbc	r1, r1, r9
   13128:	subs	r2, r0, r7
   1312c:	sbcs	r1, r1, #0
   13130:	bge	13154 <__assert_fail@plt+0x1a70>
   13134:	ldr	r1, [sp, #84]	; 0x54
   13138:	subs	r1, r1, r5
   1313c:	ldr	r1, [sp, #80]	; 0x50
   13140:	sbcs	r1, r1, r9
   13144:	blt	136b8 <__assert_fail@plt+0x1fd4>
   13148:	cmp	r0, #0
   1314c:	mov	r4, r0
   13150:	beq	136b8 <__assert_fail@plt+0x1fd4>
   13154:	cmn	r3, #1
   13158:	ble	132e8 <__assert_fail@plt+0x1c04>
   1315c:	ldr	r2, [sp, #80]	; 0x50
   13160:	cmp	r4, #0
   13164:	beq	13304 <__assert_fail@plt+0x1c20>
   13168:	ldr	r0, [sp, #84]	; 0x54
   1316c:	mvn	r1, #0
   13170:	str	r9, [sp, #88]	; 0x58
   13174:	subs	r0, r1, r0
   13178:	sbcs	r0, r1, r2
   1317c:	bge	13310 <__assert_fail@plt+0x1c2c>
   13180:	mov	r7, #0
   13184:	str	r5, [sp, #92]	; 0x5c
   13188:	b	1319c <__assert_fail@plt+0x1ab8>
   1318c:	mov	r5, r0
   13190:	add	r7, r5, r7
   13194:	cmp	r4, r7
   13198:	bls	132dc <__assert_fail@plt+0x1bf8>
   1319c:	add	r1, r6, r7
   131a0:	sub	r2, r4, r7
   131a4:	mov	r0, sl
   131a8:	bl	115ac <write@plt>
   131ac:	cmp	r0, #0
   131b0:	bgt	1318c <__assert_fail@plt+0x1aa8>
   131b4:	bl	11558 <__errno_location@plt>
   131b8:	ldr	r5, [r0]
   131bc:	mov	sl, r0
   131c0:	cmp	r5, #22
   131c4:	bne	13224 <__assert_fail@plt+0x1b40>
   131c8:	ldr	r0, [sp, #104]	; 0x68
   131cc:	eor	r0, r0, #1
   131d0:	tst	r0, #1
   131d4:	beq	13224 <__assert_fail@plt+0x1b40>
   131d8:	ldr	sl, [sp, #100]	; 0x64
   131dc:	mov	r1, #3
   131e0:	mov	r0, sl
   131e4:	bl	141cc <__assert_fail@plt+0x2ae8>
   131e8:	mov	r1, #1
   131ec:	mov	r5, #0
   131f0:	cmp	r0, #1
   131f4:	str	r1, [sp, #104]	; 0x68
   131f8:	blt	13190 <__assert_fail@plt+0x1aac>
   131fc:	bic	r2, r0, #65536	; 0x10000
   13200:	cmp	r2, r0
   13204:	beq	13190 <__assert_fail@plt+0x1aac>
   13208:	mov	r0, sl
   1320c:	mov	r1, #4
   13210:	bl	141cc <__assert_fail@plt+0x2ae8>
   13214:	add	r7, r5, r7
   13218:	cmp	r4, r7
   1321c:	bhi	1319c <__assert_fail@plt+0x1ab8>
   13220:	b	132dc <__assert_fail@plt+0x1bf8>
   13224:	movw	r1, #45819	; 0xb2fb
   13228:	mov	r0, #0
   1322c:	mov	r2, #5
   13230:	movt	r1, #1
   13234:	bl	11408 <dcgettext@plt>
   13238:	mov	r6, r9
   1323c:	mov	r9, r0
   13240:	ldr	r0, [sp, #92]	; 0x5c
   13244:	add	r2, sp, #880	; 0x370
   13248:	adds	r0, r0, r7
   1324c:	adc	r1, r6, #0
   13250:	bl	154c8 <__assert_fail@plt+0x3de4>
   13254:	ldr	r3, [sp, #76]	; 0x4c
   13258:	ldr	r6, [sp, #96]	; 0x60
   1325c:	str	r0, [sp]
   13260:	mov	r0, #0
   13264:	mov	r1, r5
   13268:	mov	r2, r9
   1326c:	bl	114b0 <error@plt>
   13270:	cmp	r5, #5
   13274:	bne	13914 <__assert_fail@plt+0x2230>
   13278:	movw	r0, #511	; 0x1ff
   1327c:	orr	r0, r7, r0
   13280:	cmp	r0, r4
   13284:	bcs	13914 <__assert_fail@plt+0x2230>
   13288:	add	r5, r0, #1
   1328c:	ldr	r0, [sp, #92]	; 0x5c
   13290:	ldr	r9, [sp, #88]	; 0x58
   13294:	mov	r1, #0
   13298:	str	r1, [sp]
   1329c:	adds	r2, r0, r5
   132a0:	ldr	r0, [sp, #100]	; 0x64
   132a4:	adc	r3, r9, #0
   132a8:	bl	11474 <lseek64@plt>
   132ac:	mvn	r2, #0
   132b0:	eor	r1, r1, r2
   132b4:	eor	r0, r0, r2
   132b8:	orrs	r0, r0, r1
   132bc:	beq	13820 <__assert_fail@plt+0x213c>
   132c0:	ldr	sl, [sp, #100]	; 0x64
   132c4:	mov	r0, #1
   132c8:	sub	r5, r5, r7
   132cc:	str	r0, [sp, #72]	; 0x48
   132d0:	add	r7, r5, r7
   132d4:	cmp	r4, r7
   132d8:	bhi	1319c <__assert_fail@plt+0x1ab8>
   132dc:	ldr	r5, [sp, #92]	; 0x5c
   132e0:	ldr	r4, [sp, #84]	; 0x54
   132e4:	b	13420 <__assert_fail@plt+0x1d3c>
   132e8:	ldr	r0, [sp, #44]	; 0x2c
   132ec:	mov	r1, r6
   132f0:	mov	r2, r4
   132f4:	bl	1791c <__assert_fail@plt+0x6238>
   132f8:	ldr	r2, [sp, #80]	; 0x50
   132fc:	cmp	r4, #0
   13300:	bne	13168 <__assert_fail@plt+0x1a84>
   13304:	ldr	r4, [sp, #84]	; 0x54
   13308:	mov	r7, #0
   1330c:	b	13420 <__assert_fail@plt+0x1d3c>
   13310:	mov	r7, #0
   13314:	b	1333c <__assert_fail@plt+0x1c58>
   13318:	mov	r5, r9
   1331c:	ldr	r9, [sp, #88]	; 0x58
   13320:	ldr	r6, [sp, #96]	; 0x60
   13324:	mov	r0, #1
   13328:	str	r0, [sp, #104]	; 0x68
   1332c:	mov	r0, #0
   13330:	add	r7, r0, r7
   13334:	cmp	r4, r7
   13338:	bls	133b4 <__assert_fail@plt+0x1cd0>
   1333c:	add	r1, r6, r7
   13340:	sub	r2, r4, r7
   13344:	mov	r0, sl
   13348:	bl	115ac <write@plt>
   1334c:	cmp	r0, #0
   13350:	bgt	13330 <__assert_fail@plt+0x1c4c>
   13354:	mov	r9, r5
   13358:	beq	133bc <__assert_fail@plt+0x1cd8>
   1335c:	bl	11558 <__errno_location@plt>
   13360:	ldr	r5, [r0]
   13364:	cmp	r5, #28
   13368:	beq	133bc <__assert_fail@plt+0x1cd8>
   1336c:	cmp	r5, #22
   13370:	bne	13848 <__assert_fail@plt+0x2164>
   13374:	ldr	r0, [sp, #104]	; 0x68
   13378:	eor	r0, r0, #1
   1337c:	tst	r0, #1
   13380:	beq	13848 <__assert_fail@plt+0x2164>
   13384:	mov	r0, sl
   13388:	mov	r1, #3
   1338c:	bl	141cc <__assert_fail@plt+0x2ae8>
   13390:	cmp	r0, #1
   13394:	blt	13318 <__assert_fail@plt+0x1c34>
   13398:	bic	r2, r0, #65536	; 0x10000
   1339c:	cmp	r2, r0
   133a0:	beq	13318 <__assert_fail@plt+0x1c34>
   133a4:	mov	r0, sl
   133a8:	mov	r1, #4
   133ac:	bl	141cc <__assert_fail@plt+0x2ae8>
   133b0:	b	13318 <__assert_fail@plt+0x1c34>
   133b4:	ldr	r4, [sp, #84]	; 0x54
   133b8:	b	13420 <__assert_fail@plt+0x1d3c>
   133bc:	ldr	r6, [sp, #88]	; 0x58
   133c0:	mov	r5, r9
   133c4:	mvn	r0, #-2147483648	; 0x80000000
   133c8:	ldr	r4, [sp, #84]	; 0x54
   133cc:	mvn	r1, r5
   133d0:	subs	r1, r1, r7
   133d4:	eor	r0, r6, r0
   133d8:	mov	r9, r6
   133dc:	sbcs	r0, r0, #0
   133e0:	mov	r0, #0
   133e4:	movwcc	r0, #1
   133e8:	adds	r1, r5, r7
   133ec:	adc	r2, r6, #0
   133f0:	cmp	r0, #0
   133f4:	ldr	r6, [sp, #96]	; 0x60
   133f8:	ldr	r0, [sp, #80]	; 0x50
   133fc:	moveq	r0, r2
   13400:	moveq	r4, r1
   13404:	str	r0, [sp, #80]	; 0x50
   13408:	ldr	r0, [sp, #112]	; 0x70
   1340c:	moveq	r0, r2
   13410:	str	r0, [sp, #112]	; 0x70
   13414:	ldr	r0, [sp, #108]	; 0x6c
   13418:	moveq	r0, r1
   1341c:	str	r0, [sp, #108]	; 0x6c
   13420:	mvn	r0, #-2147483648	; 0x80000000
   13424:	mvn	r1, r5
   13428:	eor	r0, r9, r0
   1342c:	subs	r1, r1, r7
   13430:	sbcs	r0, r0, #0
   13434:	bcc	13888 <__assert_fail@plt+0x21a4>
   13438:	ldr	r3, [sp, #68]	; 0x44
   1343c:	adds	r5, r5, r7
   13440:	adc	r9, r9, #0
   13444:	cmp	r8, #0
   13448:	beq	130f4 <__assert_fail@plt+0x1a10>
   1344c:	ldr	r1, [sp, #80]	; 0x50
   13450:	eor	r0, r5, r4
   13454:	eor	r1, r9, r1
   13458:	orrs	r7, r0, r1
   1345c:	bne	13470 <__assert_fail@plt+0x1d8c>
   13460:	ldr	r0, [sp, #28]
   13464:	ldrb	r0, [r0]
   13468:	cmp	r0, #0
   1346c:	bne	13488 <__assert_fail@plt+0x1da4>
   13470:	mov	r0, #0
   13474:	bl	113f0 <time@plt>
   13478:	ldr	r1, [sp, #24]
   1347c:	str	r0, [sp, #32]
   13480:	cmp	r1, r0
   13484:	bgt	130f0 <__assert_fail@plt+0x1a0c>
   13488:	mov	r0, #1
   1348c:	mov	r1, #0
   13490:	add	r2, sp, #880	; 0x370
   13494:	movw	r3, #434	; 0x1b2
   13498:	str	r4, [sp, #84]	; 0x54
   1349c:	str	r0, [sp]
   134a0:	str	r0, [sp, #8]
   134a4:	str	r1, [sp, #4]
   134a8:	str	r1, [sp, #12]
   134ac:	mov	r0, r5
   134b0:	mov	r1, r9
   134b4:	bl	14410 <__assert_fail@plt+0x2d2c>
   134b8:	mov	r4, r0
   134bc:	cmp	r7, #0
   134c0:	beq	134d8 <__assert_fail@plt+0x1df4>
   134c4:	ldr	r0, [sp, #28]
   134c8:	mov	r1, r4
   134cc:	bl	11390 <strcmp@plt>
   134d0:	cmp	r0, #0
   134d4:	beq	1357c <__assert_fail@plt+0x1e98>
   134d8:	ldr	r2, [sp, #84]	; 0x54
   134dc:	ldr	r3, [sp, #80]	; 0x50
   134e0:	mvn	r1, #0
   134e4:	str	r5, [sp, #92]	; 0x5c
   134e8:	subs	r0, r1, r2
   134ec:	sbcs	r0, r1, r3
   134f0:	bge	13538 <__assert_fail@plt+0x1e54>
   134f4:	orrs	r0, r2, r3
   134f8:	beq	13584 <__assert_fail@plt+0x1ea0>
   134fc:	movw	r0, #36700	; 0x8f5c
   13500:	movt	r0, #62914	; 0xf5c2
   13504:	subs	r0, r0, r5
   13508:	movw	r0, #23592	; 0x5c28
   1350c:	movt	r0, #655	; 0x28f
   13510:	sbcs	r0, r0, r9
   13514:	bcc	13594 <__assert_fail@plt+0x1eb0>
   13518:	mov	r2, #100	; 0x64
   1351c:	ldr	sl, [sp, #80]	; 0x50
   13520:	umull	r0, r1, r5, r2
   13524:	ldr	r5, [sp, #84]	; 0x54
   13528:	mla	r1, r9, r2, r1
   1352c:	mov	r3, sl
   13530:	mov	r2, r5
   13534:	b	135c0 <__assert_fail@plt+0x1edc>
   13538:	movw	r1, #45886	; 0xb33e
   1353c:	mov	r0, #0
   13540:	mov	r2, #5
   13544:	movt	r1, #1
   13548:	bl	11408 <dcgettext@plt>
   1354c:	mov	r2, r0
   13550:	ldr	r0, [sp, #36]	; 0x24
   13554:	ldr	r5, [sp, #76]	; 0x4c
   13558:	mov	r1, #0
   1355c:	stm	sp, {r0, r8}
   13560:	sub	r0, fp, #40	; 0x28
   13564:	mov	r3, r5
   13568:	str	r4, [sp, #12]
   1356c:	str	r0, [sp, #8]
   13570:	mov	r0, #0
   13574:	bl	114b0 <error@plt>
   13578:	b	1364c <__assert_fail@plt+0x1f68>
   1357c:	ldr	r4, [sp, #84]	; 0x54
   13580:	b	130f0 <__assert_fail@plt+0x1a0c>
   13584:	ldr	r5, [sp, #84]	; 0x54
   13588:	ldr	sl, [sp, #80]	; 0x50
   1358c:	mov	r0, #100	; 0x64
   13590:	b	135c4 <__assert_fail@plt+0x1ee0>
   13594:	ldr	sl, [sp, #80]	; 0x50
   13598:	ldr	r0, [sp, #84]	; 0x54
   1359c:	mov	r2, #100	; 0x64
   135a0:	mov	r3, #0
   135a4:	mov	r1, sl
   135a8:	bl	1a694 <__assert_fail@plt+0x8fb0>
   135ac:	mov	r2, r0
   135b0:	mov	r0, r5
   135b4:	ldr	r5, [sp, #84]	; 0x54
   135b8:	mov	r3, r1
   135bc:	mov	r1, r9
   135c0:	bl	1a694 <__assert_fail@plt+0x8fb0>
   135c4:	str	r0, [sp, #88]	; 0x58
   135c8:	mov	r0, #1
   135cc:	mov	r1, #0
   135d0:	add	r2, sp, #228	; 0xe4
   135d4:	mov	r3, #432	; 0x1b0
   135d8:	str	r0, [sp]
   135dc:	str	r0, [sp, #8]
   135e0:	str	r1, [sp, #4]
   135e4:	str	r1, [sp, #12]
   135e8:	mov	r0, r5
   135ec:	mov	r1, sl
   135f0:	bl	14410 <__assert_fail@plt+0x2d2c>
   135f4:	movw	r1, #45913	; 0xb359
   135f8:	mov	r5, r0
   135fc:	mov	r0, #0
   13600:	mov	r2, #5
   13604:	movt	r1, #1
   13608:	bl	11408 <dcgettext@plt>
   1360c:	mov	r2, r0
   13610:	ldr	r0, [sp, #36]	; 0x24
   13614:	cmp	r7, #0
   13618:	add	r1, sp, #8
   1361c:	moveq	r4, r5
   13620:	stm	sp, {r0, r8}
   13624:	sub	r0, fp, #40	; 0x28
   13628:	stm	r1, {r0, r4, r5}
   1362c:	ldr	r0, [sp, #88]	; 0x58
   13630:	ldr	r5, [sp, #76]	; 0x4c
   13634:	mov	r1, #0
   13638:	str	r0, [sp, #20]
   1363c:	mov	r0, #0
   13640:	mov	r3, r5
   13644:	bl	114b0 <error@plt>
   13648:	ldr	sl, [sp, #100]	; 0x64
   1364c:	sub	r7, fp, #692	; 0x2b4
   13650:	mov	r1, r4
   13654:	mov	r2, #652	; 0x28c
   13658:	mov	r0, r7
   1365c:	bl	1148c <__strcpy_chk@plt>
   13660:	mov	r0, sl
   13664:	mov	r1, r5
   13668:	bl	13934 <__assert_fail@plt+0x2250>
   1366c:	ldr	r1, [sp, #32]
   13670:	cmp	r0, #0
   13674:	add	r1, r1, #5
   13678:	str	r1, [sp, #24]
   1367c:	beq	136a8 <__assert_fail@plt+0x1fc4>
   13680:	bl	11558 <__errno_location@plt>
   13684:	ldr	r0, [r0]
   13688:	ldr	r5, [sp, #92]	; 0x5c
   1368c:	ldr	r4, [sp, #84]	; 0x54
   13690:	mov	r1, #1
   13694:	str	r7, [sp, #28]
   13698:	str	r1, [sp, #72]	; 0x48
   1369c:	cmp	r0, #5
   136a0:	beq	130f0 <__assert_fail@plt+0x1a0c>
   136a4:	b	13914 <__assert_fail@plt+0x2230>
   136a8:	ldr	r5, [sp, #92]	; 0x5c
   136ac:	ldr	r4, [sp, #84]	; 0x54
   136b0:	str	r7, [sp, #28]
   136b4:	b	130f0 <__assert_fail@plt+0x1a0c>
   136b8:	ldr	r1, [sp, #76]	; 0x4c
   136bc:	mov	r0, sl
   136c0:	bl	13934 <__assert_fail@plt+0x2250>
   136c4:	cmp	r0, #0
   136c8:	beq	136f0 <__assert_fail@plt+0x200c>
   136cc:	bl	11558 <__errno_location@plt>
   136d0:	ldr	r0, [r0]
   136d4:	cmp	r0, #5
   136d8:	bne	13914 <__assert_fail@plt+0x2230>
   136dc:	mov	r0, r6
   136e0:	bl	143e8 <__assert_fail@plt+0x2d04>
   136e4:	mov	r0, #0
   136e8:	str	r0, [sp, #40]	; 0x28
   136ec:	b	13710 <__assert_fail@plt+0x202c>
   136f0:	mov	r0, r6
   136f4:	bl	143e8 <__assert_fail@plt+0x2d04>
   136f8:	ldr	r1, [sp, #72]	; 0x48
   136fc:	mov	r0, #1
   13700:	bic	r0, r0, r1
   13704:	ldr	r1, [sp, #40]	; 0x28
   13708:	and	r1, r1, r0
   1370c:	str	r1, [sp, #40]	; 0x28
   13710:	ldr	r2, [sp, #52]	; 0x34
   13714:	ldr	r3, [sp, #36]	; 0x24
   13718:	ldr	r9, [sp, #48]	; 0x30
   1371c:	ldr	r4, [sp, #60]	; 0x3c
   13720:	ldr	r6, [sp, #56]	; 0x38
   13724:	mov	r7, #0
   13728:	ldrb	r1, [r2, #22]
   1372c:	ldr	r0, [r2, #4]
   13730:	add	r1, r0, r1
   13734:	cmp	r3, r1
   13738:	mov	r1, r3
   1373c:	bcc	12dbc <__assert_fail@plt+0x16d8>
   13740:	mov	r5, #0
   13744:	orrs	r0, r7, r5
   13748:	mov	r8, #0
   1374c:	beq	12d90 <__assert_fail@plt+0x16ac>
   13750:	b	12d64 <__assert_fail@plt+0x1680>
   13754:	ldr	r0, [r2, #16]
   13758:	cmp	r0, #0
   1375c:	beq	137c4 <__assert_fail@plt+0x20e0>
   13760:	mov	r0, sl
   13764:	mov	r2, #0
   13768:	mov	r3, #0
   1376c:	bl	113fc <ftruncate64@plt>
   13770:	cmp	r0, #0
   13774:	beq	137c4 <__assert_fail@plt+0x20e0>
   13778:	ldr	r0, [sp, #136]	; 0x88
   1377c:	ldr	r6, [sp, #40]	; 0x28
   13780:	and	r0, r0, #61440	; 0xf000
   13784:	cmp	r0, #32768	; 0x8000
   13788:	bne	13920 <__assert_fail@plt+0x223c>
   1378c:	bl	11558 <__errno_location@plt>
   13790:	movw	r1, #45755	; 0xb2bb
   13794:	ldr	r4, [r0]
   13798:	mov	r0, #0
   1379c:	mov	r2, #5
   137a0:	mov	r6, #0
   137a4:	movt	r1, #1
   137a8:	bl	11408 <dcgettext@plt>
   137ac:	ldr	r3, [sp, #76]	; 0x4c
   137b0:	mov	r2, r0
   137b4:	mov	r0, #0
   137b8:	mov	r1, r4
   137bc:	bl	114b0 <error@plt>
   137c0:	b	13920 <__assert_fail@plt+0x223c>
   137c4:	ldr	r6, [sp, #40]	; 0x28
   137c8:	b	13920 <__assert_fail@plt+0x223c>
   137cc:	ldr	r0, [r4]
   137d0:	sub	sl, sl, #1
   137d4:	str	r0, [r1], #4
   137d8:	sub	r8, r8, #1
   137dc:	add	r4, r4, #4
   137e0:	cmp	sl, #0
   137e4:	beq	12c9c <__assert_fail@plt+0x15b8>
   137e8:	cmp	r8, sl
   137ec:	beq	137cc <__assert_fail@plt+0x20e8>
   137f0:	asr	r0, r8, #31
   137f4:	subs	r2, r8, #1
   137f8:	mov	r9, r1
   137fc:	sbc	r3, r0, #0
   13800:	ldr	r0, [sp, #112]	; 0x70
   13804:	bl	1756c <__assert_fail@plt+0x5e88>
   13808:	ldr	r2, [sp, #108]	; 0x6c
   1380c:	subs	r0, r0, sl
   13810:	sbcs	r0, r1, #0
   13814:	mov	r1, r9
   13818:	bcc	137cc <__assert_fail@plt+0x20e8>
   1381c:	b	137d8 <__assert_fail@plt+0x20f4>
   13820:	movw	r1, #45850	; 0xb31a
   13824:	ldr	r4, [sl]
   13828:	mov	r0, #0
   1382c:	mov	r2, #5
   13830:	movt	r1, #1
   13834:	bl	11408 <dcgettext@plt>
   13838:	mov	r2, r0
   1383c:	mov	r0, #0
   13840:	mov	r1, r4
   13844:	b	138a8 <__assert_fail@plt+0x21c4>
   13848:	movw	r1, #45819	; 0xb2fb
   1384c:	mov	r0, #0
   13850:	mov	r2, #5
   13854:	movt	r1, #1
   13858:	bl	11408 <dcgettext@plt>
   1385c:	ldr	r1, [sp, #88]	; 0x58
   13860:	mov	r4, r0
   13864:	adds	r0, r9, r7
   13868:	add	r2, sp, #880	; 0x370
   1386c:	adc	r1, r1, #0
   13870:	bl	154c8 <__assert_fail@plt+0x3de4>
   13874:	str	r0, [sp]
   13878:	mov	r0, #0
   1387c:	mov	r1, r5
   13880:	mov	r2, r4
   13884:	b	13908 <__assert_fail@plt+0x2224>
   13888:	movw	r1, #45867	; 0xb32b
   1388c:	mov	r0, #0
   13890:	mov	r2, #5
   13894:	movt	r1, #1
   13898:	bl	11408 <dcgettext@plt>
   1389c:	mov	r2, r0
   138a0:	mov	r0, #0
   138a4:	mov	r1, #0
   138a8:	ldr	r3, [sp, #76]	; 0x4c
   138ac:	bl	114b0 <error@plt>
   138b0:	b	13914 <__assert_fail@plt+0x2230>
   138b4:	str	r8, [sp, #56]	; 0x38
   138b8:	str	sl, [sp, #60]	; 0x3c
   138bc:	ldr	r2, [r6, #4]
   138c0:	str	r6, [sp, #52]	; 0x34
   138c4:	cmp	r2, #0
   138c8:	bne	12b0c <__assert_fail@plt+0x1428>
   138cc:	b	12d30 <__assert_fail@plt+0x164c>
   138d0:	bl	11558 <__errno_location@plt>
   138d4:	mov	r4, #22
   138d8:	str	r4, [r0]
   138dc:	b	138e8 <__assert_fail@plt+0x2204>
   138e0:	bl	11558 <__errno_location@plt>
   138e4:	ldr	r4, [r0]
   138e8:	movw	r1, #45776	; 0xb2d0
   138ec:	mov	r0, #0
   138f0:	mov	r2, #5
   138f4:	movt	r1, #1
   138f8:	bl	11408 <dcgettext@plt>
   138fc:	mov	r2, r0
   13900:	mov	r0, #0
   13904:	mov	r1, r4
   13908:	ldr	r3, [sp, #76]	; 0x4c
   1390c:	bl	114b0 <error@plt>
   13910:	ldr	r6, [sp, #96]	; 0x60
   13914:	mov	r0, r6
   13918:	bl	143e8 <__assert_fail@plt+0x2d04>
   1391c:	mov	r6, #0
   13920:	ldr	r0, [sp, #116]	; 0x74
   13924:	bl	143e8 <__assert_fail@plt+0x2d04>
   13928:	and	r0, r6, #1
   1392c:	sub	sp, fp, #28
   13930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13934:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13938:	add	fp, sp, #24
   1393c:	mov	r8, r1
   13940:	mov	r4, r0
   13944:	bl	116c0 <fdatasync@plt>
   13948:	mov	r6, #0
   1394c:	cmp	r0, #0
   13950:	beq	139a8 <__assert_fail@plt+0x22c4>
   13954:	bl	11558 <__errno_location@plt>
   13958:	ldr	r7, [r0]
   1395c:	mov	r5, r0
   13960:	cmp	r7, #22
   13964:	bhi	139b0 <__assert_fail@plt+0x22cc>
   13968:	movw	r9, #512	; 0x200
   1396c:	mov	r0, #1
   13970:	movt	r9, #96	; 0x60
   13974:	tst	r9, r0, lsl r7
   13978:	beq	139b0 <__assert_fail@plt+0x22cc>
   1397c:	mov	r0, r4
   13980:	bl	11384 <fsync@plt>
   13984:	cmp	r0, #0
   13988:	beq	139a8 <__assert_fail@plt+0x22c4>
   1398c:	ldr	r7, [r5]
   13990:	cmp	r7, #22
   13994:	bhi	139bc <__assert_fail@plt+0x22d8>
   13998:	mov	r0, #1
   1399c:	tst	r9, r0, lsl r7
   139a0:	beq	139bc <__assert_fail@plt+0x22d8>
   139a4:	bl	11690 <sync@plt>
   139a8:	mov	r0, r6
   139ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   139b0:	movw	r1, #45961	; 0xb389
   139b4:	movt	r1, #1
   139b8:	b	139c4 <__assert_fail@plt+0x22e0>
   139bc:	movw	r1, #45982	; 0xb39e
   139c0:	movt	r1, #1
   139c4:	mov	r0, #0
   139c8:	mov	r2, #5
   139cc:	bl	11408 <dcgettext@plt>
   139d0:	mov	r2, r0
   139d4:	mov	r0, #0
   139d8:	mov	r1, r7
   139dc:	mov	r3, r8
   139e0:	bl	114b0 <error@plt>
   139e4:	mvn	r6, #0
   139e8:	str	r7, [r5]
   139ec:	mov	r0, r6
   139f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   139f4:	mov	r0, #1
   139f8:	b	117e0 <__assert_fail@plt+0xfc>
   139fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a00:	add	fp, sp, #28
   13a04:	sub	sp, sp, #12
   13a08:	mov	r4, r3
   13a0c:	mov	r9, r2
   13a10:	mov	r7, r1
   13a14:	mov	r8, r0
   13a18:	bl	11534 <strlen@plt>
   13a1c:	ldr	r6, [r7]
   13a20:	cmp	r6, #0
   13a24:	beq	13ad0 <__assert_fail@plt+0x23ec>
   13a28:	mov	r5, r0
   13a2c:	cmp	r9, #0
   13a30:	beq	13ae0 <__assert_fail@plt+0x23fc>
   13a34:	add	r0, r7, #4
   13a38:	mvn	sl, #0
   13a3c:	mov	r7, #0
   13a40:	str	r9, [sp]
   13a44:	str	r0, [sp, #8]
   13a48:	mov	r0, #0
   13a4c:	str	r0, [sp, #4]
   13a50:	mov	r0, r9
   13a54:	b	13a98 <__assert_fail@plt+0x23b4>
   13a58:	ldr	r0, [sp]
   13a5c:	mov	r1, r9
   13a60:	mov	r2, r4
   13a64:	mla	r0, sl, r4, r0
   13a68:	bl	11528 <bcmp@plt>
   13a6c:	ldr	r1, [sp, #4]
   13a70:	cmp	r0, #0
   13a74:	movwne	r0, #1
   13a78:	orr	r1, r1, r0
   13a7c:	str	r1, [sp, #4]
   13a80:	ldr	r0, [sp, #8]
   13a84:	add	r9, r9, r4
   13a88:	ldr	r6, [r0, r7, lsl #2]
   13a8c:	add	r7, r7, #1
   13a90:	cmp	r6, #0
   13a94:	beq	13b54 <__assert_fail@plt+0x2470>
   13a98:	mov	r0, r6
   13a9c:	mov	r1, r8
   13aa0:	mov	r2, r5
   13aa4:	bl	116b4 <strncmp@plt>
   13aa8:	cmp	r0, #0
   13aac:	bne	13a80 <__assert_fail@plt+0x239c>
   13ab0:	mov	r0, r6
   13ab4:	bl	11534 <strlen@plt>
   13ab8:	cmp	r0, r5
   13abc:	beq	13ad4 <__assert_fail@plt+0x23f0>
   13ac0:	cmn	sl, #1
   13ac4:	bne	13a58 <__assert_fail@plt+0x2374>
   13ac8:	mov	sl, r7
   13acc:	b	13a80 <__assert_fail@plt+0x239c>
   13ad0:	mvn	r7, #0
   13ad4:	mov	r0, r7
   13ad8:	sub	sp, fp, #28
   13adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ae0:	add	r4, r7, #4
   13ae4:	mov	r0, #0
   13ae8:	mvn	r9, #0
   13aec:	mvn	sl, #0
   13af0:	mov	r7, #0
   13af4:	str	r0, [sp, #4]
   13af8:	b	13b28 <__assert_fail@plt+0x2444>
   13afc:	ldr	r1, [sp, #4]
   13b00:	subs	r0, sl, r9
   13b04:	movwne	r0, #1
   13b08:	cmn	sl, #1
   13b0c:	moveq	sl, r7
   13b10:	orr	r1, r1, r0
   13b14:	str	r1, [sp, #4]
   13b18:	ldr	r6, [r4, r7, lsl #2]
   13b1c:	add	r7, r7, #1
   13b20:	cmp	r6, #0
   13b24:	beq	13b54 <__assert_fail@plt+0x2470>
   13b28:	mov	r0, r6
   13b2c:	mov	r1, r8
   13b30:	mov	r2, r5
   13b34:	bl	116b4 <strncmp@plt>
   13b38:	cmp	r0, #0
   13b3c:	bne	13b18 <__assert_fail@plt+0x2434>
   13b40:	mov	r0, r6
   13b44:	bl	11534 <strlen@plt>
   13b48:	cmp	r0, r5
   13b4c:	bne	13afc <__assert_fail@plt+0x2418>
   13b50:	b	13ad4 <__assert_fail@plt+0x23f0>
   13b54:	ldr	r0, [sp, #4]
   13b58:	tst	r0, #1
   13b5c:	mvnne	sl, #1
   13b60:	mov	r0, sl
   13b64:	sub	sp, fp, #28
   13b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b6c:	push	{r4, r5, r6, r7, fp, lr}
   13b70:	add	fp, sp, #16
   13b74:	mov	r5, r0
   13b78:	ldr	r0, [r1]
   13b7c:	mvn	r4, #0
   13b80:	cmp	r0, #0
   13b84:	beq	13bb0 <__assert_fail@plt+0x24cc>
   13b88:	add	r7, r1, #4
   13b8c:	mov	r6, #0
   13b90:	mov	r1, r5
   13b94:	bl	11390 <strcmp@plt>
   13b98:	cmp	r0, #0
   13b9c:	beq	13bb8 <__assert_fail@plt+0x24d4>
   13ba0:	ldr	r0, [r7, r6, lsl #2]
   13ba4:	add	r6, r6, #1
   13ba8:	cmp	r0, #0
   13bac:	bne	13b90 <__assert_fail@plt+0x24ac>
   13bb0:	mov	r0, r4
   13bb4:	pop	{r4, r5, r6, r7, fp, pc}
   13bb8:	mov	r0, r6
   13bbc:	pop	{r4, r5, r6, r7, fp, pc}
   13bc0:	push	{r4, r5, r6, sl, fp, lr}
   13bc4:	add	fp, sp, #16
   13bc8:	sub	sp, sp, #8
   13bcc:	mov	r5, r0
   13bd0:	movw	r0, #46724	; 0xb684
   13bd4:	mov	r4, r1
   13bd8:	movw	r1, #46751	; 0xb69f
   13bdc:	cmn	r2, #1
   13be0:	mov	r2, #5
   13be4:	movt	r0, #1
   13be8:	movt	r1, #1
   13bec:	moveq	r1, r0
   13bf0:	mov	r0, #0
   13bf4:	bl	11408 <dcgettext@plt>
   13bf8:	mov	r6, r0
   13bfc:	mov	r0, #0
   13c00:	mov	r1, #8
   13c04:	mov	r2, r4
   13c08:	bl	16f18 <__assert_fail@plt+0x5834>
   13c0c:	mov	r4, r0
   13c10:	mov	r0, #1
   13c14:	mov	r1, r5
   13c18:	bl	174d8 <__assert_fail@plt+0x5df4>
   13c1c:	str	r0, [sp]
   13c20:	mov	r0, #0
   13c24:	mov	r1, #0
   13c28:	mov	r2, r6
   13c2c:	mov	r3, r4
   13c30:	bl	114b0 <error@plt>
   13c34:	sub	sp, fp, #16
   13c38:	pop	{r4, r5, r6, sl, fp, pc}
   13c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c40:	add	fp, sp, #28
   13c44:	sub	sp, sp, #4
   13c48:	mov	sl, r1
   13c4c:	movw	r1, #46780	; 0xb6bc
   13c50:	mov	r4, r2
   13c54:	mov	r6, r0
   13c58:	mov	r0, #0
   13c5c:	mov	r2, #5
   13c60:	mov	r8, #0
   13c64:	movt	r1, #1
   13c68:	bl	11408 <dcgettext@plt>
   13c6c:	movw	r1, #49584	; 0xc1b0
   13c70:	movt	r1, #2
   13c74:	ldr	r1, [r1]
   13c78:	bl	1136c <fputs_unlocked@plt>
   13c7c:	ldr	r7, [r6]
   13c80:	cmp	r7, #0
   13c84:	beq	13d40 <__assert_fail@plt+0x265c>
   13c88:	add	r0, r6, #4
   13c8c:	mov	r9, #0
   13c90:	mov	r6, #0
   13c94:	str	r0, [sp]
   13c98:	cmp	r9, #0
   13c9c:	bne	13cf4 <__assert_fail@plt+0x2610>
   13ca0:	mov	r5, #0
   13ca4:	movw	r0, #49584	; 0xc1b0
   13ca8:	movt	r0, #2
   13cac:	ldr	r6, [r0]
   13cb0:	mov	r0, r7
   13cb4:	bl	174e8 <__assert_fail@plt+0x5e04>
   13cb8:	movw	r2, #46801	; 0xb6d1
   13cbc:	mov	r3, r0
   13cc0:	mov	r0, r6
   13cc4:	mov	r1, #1
   13cc8:	movt	r2, #1
   13ccc:	bl	115c4 <__fprintf_chk@plt>
   13cd0:	add	r6, sl, r5
   13cd4:	ldr	r0, [sp]
   13cd8:	add	r8, r8, r4
   13cdc:	ldr	r7, [r0, -r9, lsl #2]
   13ce0:	sub	r9, r9, #1
   13ce4:	cmp	r7, #0
   13ce8:	beq	13d40 <__assert_fail@plt+0x265c>
   13cec:	cmp	r9, #0
   13cf0:	beq	13ca0 <__assert_fail@plt+0x25bc>
   13cf4:	add	r1, sl, r8
   13cf8:	mov	r0, r6
   13cfc:	mov	r2, r4
   13d00:	bl	11528 <bcmp@plt>
   13d04:	cmp	r0, #0
   13d08:	mov	r5, r8
   13d0c:	bne	13ca4 <__assert_fail@plt+0x25c0>
   13d10:	movw	r0, #49584	; 0xc1b0
   13d14:	movt	r0, #2
   13d18:	ldr	r5, [r0]
   13d1c:	mov	r0, r7
   13d20:	bl	174e8 <__assert_fail@plt+0x5e04>
   13d24:	movw	r2, #46809	; 0xb6d9
   13d28:	mov	r3, r0
   13d2c:	mov	r0, r5
   13d30:	mov	r1, #1
   13d34:	movt	r2, #1
   13d38:	bl	115c4 <__fprintf_chk@plt>
   13d3c:	b	13cd4 <__assert_fail@plt+0x25f0>
   13d40:	movw	r0, #49584	; 0xc1b0
   13d44:	movt	r0, #2
   13d48:	ldr	r0, [r0]
   13d4c:	ldr	r1, [r0, #20]
   13d50:	ldr	r2, [r0, #24]
   13d54:	cmp	r1, r2
   13d58:	addcc	r2, r1, #1
   13d5c:	strcc	r2, [r0, #20]
   13d60:	movcc	r0, #10
   13d64:	strbcc	r0, [r1]
   13d68:	subcc	sp, fp, #28
   13d6c:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d70:	mov	r1, #10
   13d74:	sub	sp, fp, #28
   13d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d7c:	b	11600 <__overflow@plt>
   13d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d84:	add	fp, sp, #28
   13d88:	sub	sp, sp, #12
   13d8c:	mov	sl, r0
   13d90:	ldr	r0, [fp, #16]
   13d94:	ldr	r9, [fp, #8]
   13d98:	mov	r5, r3
   13d9c:	mov	r8, r2
   13da0:	mov	r6, r1
   13da4:	cmp	r0, #0
   13da8:	beq	13dd8 <__assert_fail@plt+0x26f4>
   13dac:	mov	r0, r6
   13db0:	mov	r1, r8
   13db4:	mov	r2, r5
   13db8:	mov	r3, r9
   13dbc:	bl	139fc <__assert_fail@plt+0x2318>
   13dc0:	mov	r4, r0
   13dc4:	cmn	r4, #1
   13dc8:	ble	13e28 <__assert_fail@plt+0x2744>
   13dcc:	mov	r0, r4
   13dd0:	sub	sp, fp, #28
   13dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dd8:	ldr	r0, [r8]
   13ddc:	movw	r7, #46724	; 0xb684
   13de0:	str	r5, [sp, #8]
   13de4:	movt	r7, #1
   13de8:	cmp	r0, #0
   13dec:	beq	13e40 <__assert_fail@plt+0x275c>
   13df0:	add	r5, r8, #4
   13df4:	mov	r4, #0
   13df8:	mov	r1, r6
   13dfc:	bl	11390 <strcmp@plt>
   13e00:	cmp	r0, #0
   13e04:	beq	13e1c <__assert_fail@plt+0x2738>
   13e08:	ldr	r0, [r5, r4, lsl #2]
   13e0c:	add	r4, r4, #1
   13e10:	cmp	r0, #0
   13e14:	bne	13df8 <__assert_fail@plt+0x2714>
   13e18:	b	13e40 <__assert_fail@plt+0x275c>
   13e1c:	ldr	r5, [sp, #8]
   13e20:	cmn	r4, #1
   13e24:	bgt	13dcc <__assert_fail@plt+0x26e8>
   13e28:	movw	r0, #46724	; 0xb684
   13e2c:	movw	r7, #46751	; 0xb69f
   13e30:	str	r5, [sp, #8]
   13e34:	movt	r0, #1
   13e38:	movt	r7, #1
   13e3c:	moveq	r7, r0
   13e40:	ldr	r5, [fp, #12]
   13e44:	mov	r0, #0
   13e48:	mov	r1, r7
   13e4c:	mov	r2, #5
   13e50:	bl	11408 <dcgettext@plt>
   13e54:	mov	r4, r0
   13e58:	mov	r0, #0
   13e5c:	mov	r1, #8
   13e60:	mov	r2, r6
   13e64:	bl	16f18 <__assert_fail@plt+0x5834>
   13e68:	mov	r6, r0
   13e6c:	mov	r0, #1
   13e70:	mov	r1, sl
   13e74:	bl	174d8 <__assert_fail@plt+0x5df4>
   13e78:	str	r0, [sp]
   13e7c:	mov	r0, #0
   13e80:	mov	r1, #0
   13e84:	mov	r2, r4
   13e88:	mov	r3, r6
   13e8c:	bl	114b0 <error@plt>
   13e90:	ldr	r1, [sp, #8]
   13e94:	mov	r0, r8
   13e98:	mov	r2, r9
   13e9c:	bl	13c3c <__assert_fail@plt+0x2558>
   13ea0:	blx	r5
   13ea4:	mvn	r4, #0
   13ea8:	mov	r0, r4
   13eac:	sub	sp, fp, #28
   13eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eb4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13eb8:	add	fp, sp, #24
   13ebc:	ldr	r6, [r1]
   13ec0:	cmp	r6, #0
   13ec4:	beq	13f28 <__assert_fail@plt+0x2844>
   13ec8:	mov	r8, r1
   13ecc:	mov	r7, r2
   13ed0:	mov	r1, r2
   13ed4:	mov	r2, r3
   13ed8:	mov	r4, r3
   13edc:	mov	r9, r0
   13ee0:	bl	11528 <bcmp@plt>
   13ee4:	cmp	r0, #0
   13ee8:	beq	13f20 <__assert_fail@plt+0x283c>
   13eec:	add	r7, r7, r4
   13ef0:	add	r5, r8, #4
   13ef4:	ldr	r6, [r5]
   13ef8:	cmp	r6, #0
   13efc:	beq	13f28 <__assert_fail@plt+0x2844>
   13f00:	mov	r0, r9
   13f04:	mov	r1, r7
   13f08:	mov	r2, r4
   13f0c:	bl	11528 <bcmp@plt>
   13f10:	add	r7, r7, r4
   13f14:	add	r5, r5, #4
   13f18:	cmp	r0, #0
   13f1c:	bne	13ef4 <__assert_fail@plt+0x2810>
   13f20:	mov	r0, r6
   13f24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f28:	mov	r6, #0
   13f2c:	mov	r0, r6
   13f30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f34:	sub	r0, r0, #1
   13f38:	ldrb	r3, [r0, #1]!
   13f3c:	cmp	r3, #47	; 0x2f
   13f40:	beq	13f38 <__assert_fail@plt+0x2854>
   13f44:	mov	r2, #0
   13f48:	mov	r1, r0
   13f4c:	uxtb	r3, r3
   13f50:	cmp	r3, #47	; 0x2f
   13f54:	bne	13f6c <__assert_fail@plt+0x2888>
   13f58:	ldrb	r3, [r1, #1]!
   13f5c:	mov	r2, #1
   13f60:	uxtb	r3, r3
   13f64:	cmp	r3, #47	; 0x2f
   13f68:	beq	13f58 <__assert_fail@plt+0x2874>
   13f6c:	cmp	r3, #0
   13f70:	bxeq	lr
   13f74:	tst	r2, #1
   13f78:	mov	r2, #0
   13f7c:	movne	r0, r1
   13f80:	ldrb	r3, [r1, #1]!
   13f84:	uxtb	r3, r3
   13f88:	cmp	r3, #47	; 0x2f
   13f8c:	bne	13f6c <__assert_fail@plt+0x2888>
   13f90:	b	13f58 <__assert_fail@plt+0x2874>
   13f94:	push	{r4, sl, fp, lr}
   13f98:	add	fp, sp, #8
   13f9c:	mov	r4, r0
   13fa0:	bl	11534 <strlen@plt>
   13fa4:	mov	r1, r0
   13fa8:	sub	r2, r4, #1
   13fac:	mov	r0, r1
   13fb0:	cmp	r1, #2
   13fb4:	bcc	13fc8 <__assert_fail@plt+0x28e4>
   13fb8:	ldrb	r3, [r2, r0]
   13fbc:	sub	r1, r0, #1
   13fc0:	cmp	r3, #47	; 0x2f
   13fc4:	beq	13fac <__assert_fail@plt+0x28c8>
   13fc8:	pop	{r4, sl, fp, pc}
   13fcc:	movw	r1, #49604	; 0xc1c4
   13fd0:	movt	r1, #2
   13fd4:	str	r0, [r1, #4]
   13fd8:	bx	lr
   13fdc:	movw	r1, #49604	; 0xc1c4
   13fe0:	movt	r1, #2
   13fe4:	strb	r0, [r1]
   13fe8:	bx	lr
   13fec:	push	{r4, r5, r6, sl, fp, lr}
   13ff0:	add	fp, sp, #16
   13ff4:	sub	sp, sp, #8
   13ff8:	movw	r0, #49588	; 0xc1b4
   13ffc:	movt	r0, #2
   14000:	ldr	r0, [r0]
   14004:	bl	19d3c <__assert_fail@plt+0x8658>
   14008:	cmp	r0, #0
   1400c:	beq	14034 <__assert_fail@plt+0x2950>
   14010:	movw	r5, #49604	; 0xc1c4
   14014:	movt	r5, #2
   14018:	ldrb	r0, [r5]
   1401c:	cmp	r0, #0
   14020:	beq	14060 <__assert_fail@plt+0x297c>
   14024:	bl	11558 <__errno_location@plt>
   14028:	ldr	r0, [r0]
   1402c:	cmp	r0, #32
   14030:	bne	14060 <__assert_fail@plt+0x297c>
   14034:	movw	r0, #49584	; 0xc1b0
   14038:	movt	r0, #2
   1403c:	ldr	r0, [r0]
   14040:	bl	19d3c <__assert_fail@plt+0x8658>
   14044:	cmp	r0, #0
   14048:	subeq	sp, fp, #16
   1404c:	popeq	{r4, r5, r6, sl, fp, pc}
   14050:	movw	r0, #49496	; 0xc158
   14054:	movt	r0, #2
   14058:	ldr	r0, [r0]
   1405c:	bl	113c0 <_exit@plt>
   14060:	movw	r1, #46814	; 0xb6de
   14064:	mov	r0, #0
   14068:	mov	r2, #5
   1406c:	movt	r1, #1
   14070:	bl	11408 <dcgettext@plt>
   14074:	ldr	r6, [r5, #4]
   14078:	mov	r4, r0
   1407c:	bl	11558 <__errno_location@plt>
   14080:	ldr	r5, [r0]
   14084:	cmp	r6, #0
   14088:	bne	140a4 <__assert_fail@plt+0x29c0>
   1408c:	movw	r2, #46811	; 0xb6db
   14090:	mov	r0, #0
   14094:	mov	r1, r5
   14098:	mov	r3, r4
   1409c:	movt	r2, #1
   140a0:	b	140c4 <__assert_fail@plt+0x29e0>
   140a4:	mov	r0, r6
   140a8:	bl	17160 <__assert_fail@plt+0x5a7c>
   140ac:	movw	r2, #46826	; 0xb6ea
   140b0:	mov	r3, r0
   140b4:	str	r4, [sp]
   140b8:	mov	r0, #0
   140bc:	mov	r1, r5
   140c0:	movt	r2, #1
   140c4:	bl	114b0 <error@plt>
   140c8:	movw	r0, #49496	; 0xc158
   140cc:	movt	r0, #2
   140d0:	ldr	r0, [r0]
   140d4:	bl	113c0 <_exit@plt>
   140d8:	push	{fp, lr}
   140dc:	mov	fp, sp
   140e0:	bl	14138 <__assert_fail@plt+0x2a54>
   140e4:	cmp	r0, #0
   140e8:	popne	{fp, pc}
   140ec:	bl	18e70 <__assert_fail@plt+0x778c>
   140f0:	push	{r4, r5, r6, sl, fp, lr}
   140f4:	add	fp, sp, #16
   140f8:	mov	r5, r0
   140fc:	mov	r4, r0
   14100:	ldrb	r6, [r5], #-1
   14104:	bl	13f34 <__assert_fail@plt+0x2850>
   14108:	sub	r2, r0, r4
   1410c:	sub	r0, r6, #47	; 0x2f
   14110:	clz	r0, r0
   14114:	lsr	r1, r0, #5
   14118:	mov	r0, r2
   1411c:	cmp	r2, r1
   14120:	bls	14134 <__assert_fail@plt+0x2a50>
   14124:	ldrb	r3, [r5, r0]
   14128:	sub	r2, r0, #1
   1412c:	cmp	r3, #47	; 0x2f
   14130:	beq	14118 <__assert_fail@plt+0x2a34>
   14134:	pop	{r4, r5, r6, sl, fp, pc}
   14138:	push	{r4, r5, r6, sl, fp, lr}
   1413c:	add	fp, sp, #16
   14140:	mov	r6, r0
   14144:	mov	r4, r0
   14148:	ldrb	r5, [r6], #-1
   1414c:	bl	13f34 <__assert_fail@plt+0x2850>
   14150:	sub	r1, r0, r4
   14154:	sub	r0, r5, #47	; 0x2f
   14158:	clz	r0, r0
   1415c:	lsr	r0, r0, #5
   14160:	mov	r5, r1
   14164:	cmp	r1, r0
   14168:	bls	1417c <__assert_fail@plt+0x2a98>
   1416c:	ldrb	r2, [r6, r5]
   14170:	sub	r1, r5, #1
   14174:	cmp	r2, #47	; 0x2f
   14178:	beq	14160 <__assert_fail@plt+0x2a7c>
   1417c:	cmp	r5, #0
   14180:	mov	r0, r5
   14184:	addeq	r0, r0, #1
   14188:	add	r0, r0, #1
   1418c:	bl	19cb8 <__assert_fail@plt+0x85d4>
   14190:	mov	r6, r0
   14194:	cmp	r0, #0
   14198:	beq	141c4 <__assert_fail@plt+0x2ae0>
   1419c:	mov	r0, r6
   141a0:	mov	r1, r4
   141a4:	mov	r2, r5
   141a8:	bl	113cc <memcpy@plt>
   141ac:	cmp	r5, #0
   141b0:	moveq	r0, #46	; 0x2e
   141b4:	moveq	r5, #1
   141b8:	strbeq	r0, [r6]
   141bc:	mov	r0, #0
   141c0:	strb	r0, [r6, r5]
   141c4:	mov	r0, r6
   141c8:	pop	{r4, r5, r6, sl, fp, pc}
   141cc:	sub	sp, sp, #8
   141d0:	push	{r4, r5, r6, r7, fp, lr}
   141d4:	add	fp, sp, #16
   141d8:	sub	sp, sp, #8
   141dc:	mov	r5, r0
   141e0:	add	r0, fp, #8
   141e4:	cmp	r1, #11
   141e8:	str	r2, [fp, #8]
   141ec:	str	r3, [fp, #12]
   141f0:	str	r0, [sp, #4]
   141f4:	bhi	14230 <__assert_fail@plt+0x2b4c>
   141f8:	mov	r0, #1
   141fc:	movw	r2, #1300	; 0x514
   14200:	tst	r2, r0, lsl r1
   14204:	bne	142f0 <__assert_fail@plt+0x2c0c>
   14208:	movw	r2, #2570	; 0xa0a
   1420c:	tst	r2, r0, lsl r1
   14210:	bne	14258 <__assert_fail@plt+0x2b74>
   14214:	cmp	r1, #0
   14218:	bne	14230 <__assert_fail@plt+0x2b4c>
   1421c:	ldr	r0, [sp, #4]
   14220:	add	r1, r0, #4
   14224:	str	r1, [sp, #4]
   14228:	mov	r1, #0
   1422c:	b	142fc <__assert_fail@plt+0x2c18>
   14230:	sub	r0, r1, #1024	; 0x400
   14234:	cmp	r0, #10
   14238:	bhi	142f0 <__assert_fail@plt+0x2c0c>
   1423c:	mov	r2, #1
   14240:	movw	r3, #645	; 0x285
   14244:	tst	r3, r2, lsl r0
   14248:	bne	142f0 <__assert_fail@plt+0x2c0c>
   1424c:	movw	r3, #1282	; 0x502
   14250:	tst	r3, r2, lsl r0
   14254:	beq	14264 <__assert_fail@plt+0x2b80>
   14258:	mov	r0, r5
   1425c:	bl	115f4 <fcntl64@plt>
   14260:	b	14308 <__assert_fail@plt+0x2c24>
   14264:	cmp	r0, #6
   14268:	bne	142f0 <__assert_fail@plt+0x2c0c>
   1426c:	ldr	r0, [sp, #4]
   14270:	movw	r7, #49612	; 0xc1cc
   14274:	movt	r7, #2
   14278:	add	r1, r0, #4
   1427c:	str	r1, [sp, #4]
   14280:	ldr	r6, [r0]
   14284:	ldr	r0, [r7]
   14288:	cmp	r0, #0
   1428c:	bmi	1432c <__assert_fail@plt+0x2c48>
   14290:	mov	r0, r5
   14294:	movw	r1, #1030	; 0x406
   14298:	mov	r2, r6
   1429c:	bl	115f4 <fcntl64@plt>
   142a0:	mov	r4, r0
   142a4:	cmn	r0, #1
   142a8:	bgt	14320 <__assert_fail@plt+0x2c3c>
   142ac:	bl	11558 <__errno_location@plt>
   142b0:	ldr	r0, [r0]
   142b4:	cmp	r0, #22
   142b8:	bne	14320 <__assert_fail@plt+0x2c3c>
   142bc:	mov	r0, r5
   142c0:	mov	r1, #0
   142c4:	mov	r2, r6
   142c8:	bl	115f4 <fcntl64@plt>
   142cc:	mov	r4, r0
   142d0:	cmp	r0, #0
   142d4:	bmi	1430c <__assert_fail@plt+0x2c28>
   142d8:	mvn	r0, #0
   142dc:	str	r0, [r7]
   142e0:	mov	r0, #1
   142e4:	cmp	r0, #0
   142e8:	bne	14358 <__assert_fail@plt+0x2c74>
   142ec:	b	1430c <__assert_fail@plt+0x2c28>
   142f0:	ldr	r0, [sp, #4]
   142f4:	add	r2, r0, #4
   142f8:	str	r2, [sp, #4]
   142fc:	ldr	r2, [r0]
   14300:	mov	r0, r5
   14304:	bl	115f4 <fcntl64@plt>
   14308:	mov	r4, r0
   1430c:	mov	r0, r4
   14310:	sub	sp, fp, #16
   14314:	pop	{r4, r5, r6, r7, fp, lr}
   14318:	add	sp, sp, #8
   1431c:	bx	lr
   14320:	mov	r0, #1
   14324:	str	r0, [r7]
   14328:	b	1430c <__assert_fail@plt+0x2c28>
   1432c:	mov	r0, r5
   14330:	mov	r1, #0
   14334:	mov	r2, r6
   14338:	bl	115f4 <fcntl64@plt>
   1433c:	mov	r4, r0
   14340:	ldr	r0, [r7]
   14344:	add	r0, r0, #1
   14348:	clz	r0, r0
   1434c:	lsr	r0, r0, #5
   14350:	cmp	r0, #0
   14354:	beq	1430c <__assert_fail@plt+0x2c28>
   14358:	cmp	r4, #0
   1435c:	bmi	1430c <__assert_fail@plt+0x2c28>
   14360:	mov	r0, r4
   14364:	mov	r1, #1
   14368:	bl	115f4 <fcntl64@plt>
   1436c:	cmp	r0, #0
   14370:	bmi	1438c <__assert_fail@plt+0x2ca8>
   14374:	orr	r2, r0, #1
   14378:	mov	r0, r4
   1437c:	mov	r1, #2
   14380:	bl	115f4 <fcntl64@plt>
   14384:	cmn	r0, #1
   14388:	bne	1430c <__assert_fail@plt+0x2c28>
   1438c:	bl	11558 <__errno_location@plt>
   14390:	ldr	r6, [r0]
   14394:	mov	r5, r0
   14398:	mov	r0, r4
   1439c:	bl	116d8 <close@plt>
   143a0:	str	r6, [r5]
   143a4:	mvn	r4, #0
   143a8:	b	1430c <__assert_fail@plt+0x2c28>
   143ac:	sub	sp, sp, #8
   143b0:	push	{fp, lr}
   143b4:	mov	fp, sp
   143b8:	sub	sp, sp, #8
   143bc:	str	r2, [fp, #8]
   143c0:	str	r3, [fp, #12]
   143c4:	tst	r1, #64	; 0x40
   143c8:	mov	r2, #0
   143cc:	ldrne	r2, [fp, #8]
   143d0:	bl	114bc <open64@plt>
   143d4:	bl	18214 <__assert_fail@plt+0x6b30>
   143d8:	mov	sp, fp
   143dc:	pop	{fp, lr}
   143e0:	add	sp, sp, #8
   143e4:	bx	lr
   143e8:	push	{r4, r5, r6, sl, fp, lr}
   143ec:	add	fp, sp, #16
   143f0:	mov	r4, r0
   143f4:	bl	11558 <__errno_location@plt>
   143f8:	ldr	r6, [r0]
   143fc:	mov	r5, r0
   14400:	mov	r0, r4
   14404:	bl	113b4 <free@plt>
   14408:	str	r6, [r5]
   1440c:	pop	{r4, r5, r6, sl, fp, pc}
   14410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14414:	add	fp, sp, #28
   14418:	sub	sp, sp, #4
   1441c:	vpush	{d8-d9}
   14420:	sub	sp, sp, #104	; 0x68
   14424:	mov	r6, r3
   14428:	mov	r7, r2
   1442c:	str	r1, [sp, #44]	; 0x2c
   14430:	mov	sl, r0
   14434:	bl	1163c <localeconv@plt>
   14438:	ldr	r5, [r0]
   1443c:	mov	r4, r0
   14440:	mov	r0, r5
   14444:	bl	11534 <strlen@plt>
   14448:	sub	r1, r0, #1
   1444c:	movw	r2, #45817	; 0xb2f9
   14450:	cmp	r1, #16
   14454:	movt	r2, #1
   14458:	movcs	r0, #1
   1445c:	movcc	r2, r5
   14460:	ldr	r5, [r4, #4]
   14464:	str	r0, [sp, #12]
   14468:	ldr	r0, [r4, #8]
   1446c:	str	r2, [sp, #8]
   14470:	str	r0, [sp, #16]
   14474:	mov	r0, r5
   14478:	bl	11534 <strlen@plt>
   1447c:	cmp	r0, #17
   14480:	movw	r0, #647	; 0x287
   14484:	movw	r1, #44671	; 0xae7f
   14488:	str	r7, [sp, #32]
   1448c:	ldr	r4, [fp, #16]
   14490:	str	r6, [sp, #40]	; 0x28
   14494:	add	r0, r7, r0
   14498:	movt	r1, #1
   1449c:	movcc	r1, r5
   144a0:	ldr	r7, [fp, #8]
   144a4:	ldr	r5, [fp, #12]
   144a8:	str	r0, [sp, #36]	; 0x24
   144ac:	ands	r0, r6, #32
   144b0:	str	r1, [sp, #52]	; 0x34
   144b4:	str	r0, [sp, #24]
   144b8:	mov	r0, #1000	; 0x3e8
   144bc:	movwne	r0, #1024	; 0x400
   144c0:	str	r0, [sp, #20]
   144c4:	and	r0, r6, #3
   144c8:	ldr	r6, [fp, #20]
   144cc:	str	r0, [sp, #48]	; 0x30
   144d0:	subs	r0, r7, r4
   144d4:	sbcs	r0, r5, r6
   144d8:	bcs	145c4 <__assert_fail@plt+0x2ee0>
   144dc:	orrs	r0, r7, r5
   144e0:	beq	146cc <__assert_fail@plt+0x2fe8>
   144e4:	ldr	r9, [fp, #16]
   144e8:	mov	r1, r6
   144ec:	mov	r2, r7
   144f0:	mov	r3, r5
   144f4:	mov	r0, r9
   144f8:	bl	1a694 <__assert_fail@plt+0x8fb0>
   144fc:	mov	r4, r0
   14500:	mov	r8, r1
   14504:	umull	r0, r1, r0, r7
   14508:	mla	r1, r4, r5, r1
   1450c:	mla	r1, r8, r7, r1
   14510:	subs	r0, r9, r0
   14514:	sbc	r1, r6, r1
   14518:	orrs	r0, r0, r1
   1451c:	bne	146cc <__assert_fail@plt+0x2fe8>
   14520:	ldr	r5, [sp, #44]	; 0x2c
   14524:	mov	r0, sl
   14528:	mov	r2, r4
   1452c:	mov	r3, r8
   14530:	mov	r1, r5
   14534:	bl	1a694 <__assert_fail@plt+0x8fb0>
   14538:	mov	r9, r1
   1453c:	umull	r2, r1, r0, r4
   14540:	str	r0, [sp, #28]
   14544:	mov	r3, r8
   14548:	mla	r1, r0, r8, r1
   1454c:	mla	r1, r9, r4, r1
   14550:	subs	r0, sl, r2
   14554:	mov	r2, #10
   14558:	sbc	r1, r5, r1
   1455c:	umull	r5, r0, r0, r2
   14560:	mov	r2, r4
   14564:	add	r1, r1, r1, lsl #2
   14568:	add	r6, r0, r1, lsl #1
   1456c:	mov	r0, r5
   14570:	mov	r1, r6
   14574:	bl	1a694 <__assert_fail@plt+0x8fb0>
   14578:	mov	r7, r0
   1457c:	umull	r0, r2, r0, r4
   14580:	mla	r2, r7, r8, r2
   14584:	mla	r1, r1, r4, r2
   14588:	mov	r2, #2
   1458c:	subs	r0, r5, r0
   14590:	sbc	r1, r6, r1
   14594:	subs	r3, r4, r0, lsl #1
   14598:	lsl	r1, r1, #1
   1459c:	orr	r1, r1, r0, lsr #31
   145a0:	orr	ip, r1, r0, lsl #1
   145a4:	sbcs	r3, r8, r1
   145a8:	movwcc	r2, #3
   145ac:	cmp	ip, #0
   145b0:	movwne	ip, #1
   145b4:	rsbs	r0, r4, r0, lsl #1
   145b8:	sbcs	r0, r1, r8
   145bc:	movcs	ip, r2
   145c0:	b	14630 <__assert_fail@plt+0x2f4c>
   145c4:	mov	r0, r7
   145c8:	mov	r1, r5
   145cc:	mov	r2, r4
   145d0:	mov	r3, r6
   145d4:	bl	1a694 <__assert_fail@plt+0x8fb0>
   145d8:	mov	r2, r0
   145dc:	mov	r3, r1
   145e0:	umull	r0, r1, r0, r4
   145e4:	mla	r1, r2, r6, r1
   145e8:	mla	r1, r3, r4, r1
   145ec:	subs	r0, r7, r0
   145f0:	sbc	r1, r5, r1
   145f4:	orrs	r0, r0, r1
   145f8:	bne	146cc <__assert_fail@plt+0x2fe8>
   145fc:	ldr	r4, [sp, #44]	; 0x2c
   14600:	umull	r0, r1, r2, sl
   14604:	mla	r1, r2, r4, r1
   14608:	str	r0, [sp, #28]
   1460c:	mla	r9, r3, sl, r1
   14610:	mov	r1, r9
   14614:	bl	1a694 <__assert_fail@plt+0x8fb0>
   14618:	eor	r1, r1, r4
   1461c:	eor	r0, r0, sl
   14620:	orrs	r0, r0, r1
   14624:	bne	146cc <__assert_fail@plt+0x2fe8>
   14628:	mov	ip, #0
   1462c:	mov	r7, #0
   14630:	ldr	r0, [sp, #40]	; 0x28
   14634:	ldr	r8, [sp, #20]
   14638:	ldr	r5, [sp, #48]	; 0x30
   1463c:	mvn	r3, #0
   14640:	ands	r4, r0, #16
   14644:	beq	149e0 <__assert_fail@plt+0x32fc>
   14648:	ldr	sl, [sp, #28]
   1464c:	mov	r3, #0
   14650:	subs	r0, sl, r8
   14654:	sbcs	r0, r9, #0
   14658:	bcc	14fa4 <__assert_fail@plt+0x38c0>
   1465c:	mov	r0, sl
   14660:	mov	r1, r9
   14664:	mov	r2, r8
   14668:	mov	r3, #0
   1466c:	mov	r6, r5
   14670:	mov	r5, ip
   14674:	bl	1a694 <__assert_fail@plt+0x8fb0>
   14678:	mov	r3, sl
   1467c:	mov	sl, r0
   14680:	mov	r2, r5
   14684:	mov	r9, r1
   14688:	mls	r0, r0, r8, r3
   1468c:	add	r0, r0, r0, lsl #2
   14690:	add	r0, r7, r0, lsl #1
   14694:	udiv	r7, r0, r8
   14698:	mls	r0, r7, r8, r0
   1469c:	lsl	r0, r0, #1
   146a0:	orr	r0, r0, r5, lsr #1
   146a4:	cmp	r0, r8
   146a8:	bcs	14be8 <__assert_fail@plt+0x3504>
   146ac:	rsb	r1, r2, #0
   146b0:	subs	ip, r0, r1
   146b4:	movwne	ip, #1
   146b8:	subs	r0, sl, r8
   146bc:	mov	r3, #1
   146c0:	sbcs	r0, r9, #0
   146c4:	bcs	14c08 <__assert_fail@plt+0x3524>
   146c8:	b	14d2c <__assert_fail@plt+0x3648>
   146cc:	ldr	r9, [fp, #16]
   146d0:	mov	r1, r6
   146d4:	mov	r0, r9
   146d8:	bl	1a54c <__assert_fail@plt+0x8e68>
   146dc:	vmov	d8, r0, r1
   146e0:	ldr	r1, [sp, #44]	; 0x2c
   146e4:	mov	r0, sl
   146e8:	bl	1a54c <__assert_fail@plt+0x8e68>
   146ec:	mov	r4, r0
   146f0:	mov	r6, r1
   146f4:	mov	r0, r7
   146f8:	mov	r1, r5
   146fc:	bl	1a54c <__assert_fail@plt+0x8e68>
   14700:	vmov	d16, r0, r1
   14704:	vmov	d17, r4, r6
   14708:	ldr	r5, [sp, #40]	; 0x28
   1470c:	tst	r5, #16
   14710:	vdiv.f64	d16, d16, d8
   14714:	vmul.f64	d8, d16, d17
   14718:	bne	14798 <__assert_fail@plt+0x30b4>
   1471c:	ldr	r6, [sp, #48]	; 0x30
   14720:	cmp	r6, #1
   14724:	beq	14a28 <__assert_fail@plt+0x3344>
   14728:	vldr	d16, [pc, #752]	; 14a20 <__assert_fail@plt+0x333c>
   1472c:	ldr	r7, [sp, #36]	; 0x24
   14730:	ldr	sl, [sp, #32]
   14734:	vcmpe.f64	d8, d16
   14738:	vmrs	APSR_nzcv, fpscr
   1473c:	bpl	14a30 <__assert_fail@plt+0x334c>
   14740:	vmov	r0, r1, d8
   14744:	bl	1a6e0 <__assert_fail@plt+0x8ffc>
   14748:	mov	r4, r0
   1474c:	mov	r8, r1
   14750:	mov	r0, #0
   14754:	cmp	r6, #0
   14758:	mov	r2, #0
   1475c:	bne	14784 <__assert_fail@plt+0x30a0>
   14760:	mov	r0, r4
   14764:	mov	r1, r8
   14768:	bl	1a54c <__assert_fail@plt+0x8e68>
   1476c:	vmov	d16, r0, r1
   14770:	mov	r2, #0
   14774:	mov	r0, #0
   14778:	vcmp.f64	d8, d16
   1477c:	vmrs	APSR_nzcv, fpscr
   14780:	movwne	r0, #1
   14784:	adds	r0, r0, r4
   14788:	adc	r1, r2, r8
   1478c:	bl	1a54c <__assert_fail@plt+0x8e68>
   14790:	vmov	d8, r0, r1
   14794:	b	14a30 <__assert_fail@plt+0x334c>
   14798:	ldr	r0, [sp, #20]
   1479c:	mov	r1, #1
   147a0:	vmov	s0, r0
   147a4:	vcvt.f64.u32	d16, s0
   147a8:	ldr	r6, [sp, #48]	; 0x30
   147ac:	vmul.f64	d17, d16, d16
   147b0:	vcmpe.f64	d17, d8
   147b4:	vmrs	APSR_nzcv, fpscr
   147b8:	bls	147d0 <__assert_fail@plt+0x30ec>
   147bc:	ldr	r7, [sp, #36]	; 0x24
   147c0:	ldr	sl, [sp, #32]
   147c4:	ldr	r9, [sp, #12]
   147c8:	vmov.f64	d17, d16
   147cc:	b	1486c <__assert_fail@plt+0x3188>
   147d0:	vmul.f64	d18, d17, d16
   147d4:	ldr	r7, [sp, #36]	; 0x24
   147d8:	ldr	sl, [sp, #32]
   147dc:	ldr	r9, [sp, #12]
   147e0:	mov	r1, #2
   147e4:	vcmpe.f64	d18, d8
   147e8:	vmrs	APSR_nzcv, fpscr
   147ec:	bhi	1486c <__assert_fail@plt+0x3188>
   147f0:	vmul.f64	d19, d18, d16
   147f4:	vmov.f64	d17, d18
   147f8:	mov	r1, #3
   147fc:	vcmpe.f64	d19, d8
   14800:	vmrs	APSR_nzcv, fpscr
   14804:	bhi	1486c <__assert_fail@plt+0x3188>
   14808:	vmul.f64	d18, d19, d16
   1480c:	vmov.f64	d17, d19
   14810:	mov	r1, #4
   14814:	vcmpe.f64	d18, d8
   14818:	vmrs	APSR_nzcv, fpscr
   1481c:	bhi	1486c <__assert_fail@plt+0x3188>
   14820:	vmul.f64	d19, d18, d16
   14824:	vmov.f64	d17, d18
   14828:	mov	r1, #5
   1482c:	vcmpe.f64	d19, d8
   14830:	vmrs	APSR_nzcv, fpscr
   14834:	bhi	1486c <__assert_fail@plt+0x3188>
   14838:	vmul.f64	d18, d19, d16
   1483c:	vmov.f64	d17, d19
   14840:	mov	r1, #6
   14844:	vcmpe.f64	d18, d8
   14848:	vmrs	APSR_nzcv, fpscr
   1484c:	bhi	1486c <__assert_fail@plt+0x3188>
   14850:	vmul.f64	d16, d18, d16
   14854:	mov	r1, #7
   14858:	vmov.f64	d17, d18
   1485c:	vcmpe.f64	d16, d8
   14860:	vmrs	APSR_nzcv, fpscr
   14864:	movls	r1, #8
   14868:	vmovls.f64	d17, d16
   1486c:	vdiv.f64	d8, d8, d17
   14870:	cmp	r6, #1
   14874:	str	r1, [sp, #28]
   14878:	vmov.f64	d16, d8
   1487c:	beq	148ec <__assert_fail@plt+0x3208>
   14880:	vldr	d16, [pc, #408]	; 14a20 <__assert_fail@plt+0x333c>
   14884:	vcmpe.f64	d8, d16
   14888:	vmov.f64	d16, d8
   1488c:	vmrs	APSR_nzcv, fpscr
   14890:	bpl	148ec <__assert_fail@plt+0x3208>
   14894:	vmov	r0, r1, d8
   14898:	bl	1a6e0 <__assert_fail@plt+0x8ffc>
   1489c:	mov	r4, r0
   148a0:	mov	r8, r1
   148a4:	mov	r0, #0
   148a8:	cmp	r6, #0
   148ac:	mov	r2, #0
   148b0:	bne	148d8 <__assert_fail@plt+0x31f4>
   148b4:	mov	r0, r4
   148b8:	mov	r1, r8
   148bc:	bl	1a54c <__assert_fail@plt+0x8e68>
   148c0:	vmov	d16, r0, r1
   148c4:	mov	r2, #0
   148c8:	mov	r0, #0
   148cc:	vcmp.f64	d8, d16
   148d0:	vmrs	APSR_nzcv, fpscr
   148d4:	movwne	r0, #1
   148d8:	adds	r0, r0, r4
   148dc:	adc	r1, r2, r8
   148e0:	bl	1a54c <__assert_fail@plt+0x8e68>
   148e4:	vmov	d16, r0, r1
   148e8:	ldr	r6, [sp, #48]	; 0x30
   148ec:	movw	r3, #46839	; 0xb6f7
   148f0:	mov	r0, sl
   148f4:	mov	r1, #1
   148f8:	mvn	r2, #0
   148fc:	vstr	d16, [sp]
   14900:	movt	r3, #1
   14904:	bl	11564 <__sprintf_chk@plt>
   14908:	ldr	r1, [sp, #24]
   1490c:	mov	r0, #3
   14910:	cmp	r1, #0
   14914:	movwne	r0, #2
   14918:	add	r4, r0, r9
   1491c:	mov	r0, sl
   14920:	bl	11534 <strlen@plt>
   14924:	cmp	r4, r0
   14928:	bcs	149a8 <__assert_fail@plt+0x32c4>
   1492c:	vmov.f64	d9, #36	; 0x41200000  10.0
   14930:	cmp	r6, #1
   14934:	vmul.f64	d8, d8, d9
   14938:	beq	149d0 <__assert_fail@plt+0x32ec>
   1493c:	vldr	d16, [pc, #220]	; 14a20 <__assert_fail@plt+0x333c>
   14940:	vcmpe.f64	d8, d16
   14944:	vmrs	APSR_nzcv, fpscr
   14948:	bpl	149d0 <__assert_fail@plt+0x32ec>
   1494c:	vmov	r0, r1, d8
   14950:	bl	1a6e0 <__assert_fail@plt+0x8ffc>
   14954:	ldr	r9, [fp, #16]
   14958:	mov	r4, r0
   1495c:	mov	r8, r1
   14960:	mov	r0, #0
   14964:	cmp	r6, #0
   14968:	mov	r2, #0
   1496c:	bne	14994 <__assert_fail@plt+0x32b0>
   14970:	mov	r0, r4
   14974:	mov	r1, r8
   14978:	bl	1a54c <__assert_fail@plt+0x8e68>
   1497c:	vmov	d16, r0, r1
   14980:	mov	r2, #0
   14984:	mov	r0, #0
   14988:	vcmp.f64	d8, d16
   1498c:	vmrs	APSR_nzcv, fpscr
   14990:	movwne	r0, #1
   14994:	adds	r0, r0, r4
   14998:	adc	r1, r2, r8
   1499c:	bl	1a54c <__assert_fail@plt+0x8e68>
   149a0:	vmov	d8, r0, r1
   149a4:	b	149d4 <__assert_fail@plt+0x32f0>
   149a8:	mov	r2, r0
   149ac:	add	r4, r9, #1
   149b0:	tst	r5, #8
   149b4:	beq	149c8 <__assert_fail@plt+0x32e4>
   149b8:	add	r0, r2, sl
   149bc:	ldrb	r0, [r0, #-1]
   149c0:	cmp	r0, #48	; 0x30
   149c4:	beq	1492c <__assert_fail@plt+0x3248>
   149c8:	ldr	r9, [fp, #16]
   149cc:	b	14a64 <__assert_fail@plt+0x3380>
   149d0:	ldr	r9, [fp, #16]
   149d4:	vdiv.f64	d16, d8, d9
   149d8:	vstr	d16, [sp]
   149dc:	b	14a3c <__assert_fail@plt+0x3358>
   149e0:	ldr	r6, [sp, #36]	; 0x24
   149e4:	ldr	sl, [sp, #28]
   149e8:	cmp	r5, #0
   149ec:	beq	14fb0 <__assert_fail@plt+0x38cc>
   149f0:	cmp	r5, #1
   149f4:	bne	15020 <__assert_fail@plt+0x393c>
   149f8:	mov	r0, #0
   149fc:	rsbs	r1, ip, #0
   14a00:	and	r2, sl, #1
   14a04:	sbc	r0, r0, #0
   14a08:	eor	r1, r2, r1
   14a0c:	orrs	r0, r1, r0
   14a10:	addne	r7, r7, #1
   14a14:	cmp	r7, #5
   14a18:	bgt	14fbc <__assert_fail@plt+0x38d8>
   14a1c:	b	15020 <__assert_fail@plt+0x393c>
   14a20:	andeq	r0, r0, r0
   14a24:	mvnsmi	r0, #0
   14a28:	ldr	r7, [sp, #36]	; 0x24
   14a2c:	ldr	sl, [sp, #32]
   14a30:	mvn	r0, #0
   14a34:	vstr	d8, [sp]
   14a38:	str	r0, [sp, #28]
   14a3c:	movw	r3, #46833	; 0xb6f1
   14a40:	mov	r0, sl
   14a44:	mov	r1, #1
   14a48:	mvn	r2, #0
   14a4c:	movt	r3, #1
   14a50:	bl	11564 <__sprintf_chk@plt>
   14a54:	mov	r0, sl
   14a58:	bl	11534 <strlen@plt>
   14a5c:	mov	r2, r0
   14a60:	mov	r4, #0
   14a64:	sub	r0, r7, r2
   14a68:	mov	r1, sl
   14a6c:	mov	r8, r0
   14a70:	bl	113a8 <memmove@plt>
   14a74:	sub	r6, r7, r4
   14a78:	tst	r5, #4
   14a7c:	bne	15078 <__assert_fail@plt+0x3994>
   14a80:	ldr	r3, [sp, #28]
   14a84:	tst	r5, #128	; 0x80
   14a88:	beq	15190 <__assert_fail@plt+0x3aac>
   14a8c:	cmn	r3, #1
   14a90:	bgt	14b7c <__assert_fail@plt+0x3498>
   14a94:	subs	r0, r9, #2
   14a98:	ldr	r0, [fp, #20]
   14a9c:	mov	r3, #0
   14aa0:	sbcs	r0, r0, #0
   14aa4:	bcc	14b7c <__assert_fail@plt+0x3498>
   14aa8:	ldr	r0, [sp, #20]
   14aac:	mov	r3, #1
   14ab0:	subs	r0, r0, r9
   14ab4:	ldr	r0, [fp, #20]
   14ab8:	rscs	r0, r0, #0
   14abc:	bcs	14b7c <__assert_fail@plt+0x3498>
   14ac0:	ldr	r0, [sp, #20]
   14ac4:	mov	r3, #2
   14ac8:	umull	r1, r0, r0, r0
   14acc:	subs	r2, r1, r9
   14ad0:	ldr	r2, [fp, #20]
   14ad4:	sbcs	r2, r0, r2
   14ad8:	bcs	14b7c <__assert_fail@plt+0x3498>
   14adc:	ldr	r3, [sp, #20]
   14ae0:	umull	r1, r2, r1, r3
   14ae4:	mla	r2, r0, r3, r2
   14ae8:	mov	r3, #3
   14aec:	subs	r0, r1, r9
   14af0:	ldr	r0, [fp, #20]
   14af4:	sbcs	r0, r2, r0
   14af8:	bcs	14b7c <__assert_fail@plt+0x3498>
   14afc:	ldr	r3, [sp, #20]
   14b00:	umull	r0, r1, r1, r3
   14b04:	mla	r1, r2, r3, r1
   14b08:	mov	r3, #4
   14b0c:	subs	r2, r0, r9
   14b10:	ldr	r2, [fp, #20]
   14b14:	sbcs	r2, r1, r2
   14b18:	bcs	14b7c <__assert_fail@plt+0x3498>
   14b1c:	ldr	r3, [sp, #20]
   14b20:	umull	r0, r2, r0, r3
   14b24:	mla	r1, r1, r3, r2
   14b28:	mov	r3, #5
   14b2c:	subs	r2, r0, r9
   14b30:	ldr	r2, [fp, #20]
   14b34:	sbcs	r2, r1, r2
   14b38:	bcs	14b7c <__assert_fail@plt+0x3498>
   14b3c:	ldr	r3, [sp, #20]
   14b40:	umull	r0, r2, r0, r3
   14b44:	mla	r1, r1, r3, r2
   14b48:	mov	r3, #6
   14b4c:	subs	r2, r0, r9
   14b50:	ldr	r2, [fp, #20]
   14b54:	sbcs	r2, r1, r2
   14b58:	bcs	14b7c <__assert_fail@plt+0x3498>
   14b5c:	ldr	r3, [sp, #20]
   14b60:	umull	r0, r2, r0, r3
   14b64:	mla	r1, r1, r3, r2
   14b68:	mov	r3, #7
   14b6c:	subs	r0, r0, r9
   14b70:	ldr	r0, [fp, #20]
   14b74:	sbcs	r0, r1, r0
   14b78:	movwcc	r3, #8
   14b7c:	and	r0, r5, #256	; 0x100
   14b80:	tst	r5, #64	; 0x40
   14b84:	orrsne	r1, r3, r0
   14b88:	movne	r1, #32
   14b8c:	addne	r7, sl, #648	; 0x288
   14b90:	strbne	r1, [sl, #647]	; 0x287
   14b94:	cmp	r3, #0
   14b98:	beq	14bc0 <__assert_fail@plt+0x34dc>
   14b9c:	ldr	r1, [sp, #24]
   14ba0:	cmp	r1, #0
   14ba4:	moveq	r1, #107	; 0x6b
   14ba8:	cmpeq	r3, #1
   14bac:	beq	14bbc <__assert_fail@plt+0x34d8>
   14bb0:	movw	r1, #46920	; 0xb748
   14bb4:	movt	r1, #1
   14bb8:	ldrb	r1, [r1, r3]
   14bbc:	strb	r1, [r7], #1
   14bc0:	cmp	r0, #0
   14bc4:	beq	15190 <__assert_fail@plt+0x3aac>
   14bc8:	ldr	r0, [sp, #24]
   14bcc:	cmp	r0, #0
   14bd0:	cmpne	r3, #0
   14bd4:	movne	r0, #105	; 0x69
   14bd8:	strbne	r0, [r7], #1
   14bdc:	mov	r0, #66	; 0x42
   14be0:	strb	r0, [r7], #1
   14be4:	b	15190 <__assert_fail@plt+0x3aac>
   14be8:	add	r0, r0, r2
   14bec:	mov	ip, #2
   14bf0:	cmp	r8, r0
   14bf4:	movwcc	ip, #3
   14bf8:	subs	r0, sl, r8
   14bfc:	mov	r3, #1
   14c00:	sbcs	r0, r9, #0
   14c04:	bcc	14d2c <__assert_fail@plt+0x3648>
   14c08:	mov	r0, sl
   14c0c:	mov	r1, r9
   14c10:	mov	r2, r8
   14c14:	mov	r3, #0
   14c18:	str	r4, [sp, #44]	; 0x2c
   14c1c:	mov	r4, ip
   14c20:	bl	1a694 <__assert_fail@plt+0x8fb0>
   14c24:	mov	r2, r4
   14c28:	mov	r4, r0
   14c2c:	mls	r0, r0, r8, sl
   14c30:	mov	r9, r1
   14c34:	add	r0, r0, r0, lsl #2
   14c38:	add	r0, r7, r0, lsl #1
   14c3c:	udiv	r7, r0, r8
   14c40:	mls	r0, r7, r8, r0
   14c44:	lsl	r0, r0, #1
   14c48:	orr	r0, r0, r2, lsr #1
   14c4c:	cmp	r0, r8
   14c50:	bcs	14c74 <__assert_fail@plt+0x3590>
   14c54:	rsb	r1, r2, #0
   14c58:	subs	ip, r0, r1
   14c5c:	movwne	ip, #1
   14c60:	subs	r0, r4, r8
   14c64:	mov	r3, #2
   14c68:	sbcs	r0, r9, #0
   14c6c:	bcs	14cb0 <__assert_fail@plt+0x35cc>
   14c70:	b	14c94 <__assert_fail@plt+0x35b0>
   14c74:	add	r0, r0, r2
   14c78:	mov	ip, #2
   14c7c:	cmp	r8, r0
   14c80:	movwcc	ip, #3
   14c84:	subs	r0, r4, r8
   14c88:	mov	r3, #2
   14c8c:	sbcs	r0, r9, #0
   14c90:	bcs	14cb0 <__assert_fail@plt+0x35cc>
   14c94:	mov	sl, r4
   14c98:	ldr	r4, [sp, #44]	; 0x2c
   14c9c:	mov	r5, r6
   14ca0:	rsbs	r0, sl, #9
   14ca4:	rscs	r0, r9, #0
   14ca8:	bcc	14fa4 <__assert_fail@plt+0x38c0>
   14cac:	b	14d3c <__assert_fail@plt+0x3658>
   14cb0:	mov	r0, r4
   14cb4:	mov	r1, r9
   14cb8:	mov	r2, r8
   14cbc:	mov	r3, #0
   14cc0:	mov	r5, ip
   14cc4:	bl	1a694 <__assert_fail@plt+0x8fb0>
   14cc8:	mov	sl, r0
   14ccc:	mls	r0, r0, r8, r4
   14cd0:	mov	r2, r5
   14cd4:	mov	r9, r1
   14cd8:	add	r0, r0, r0, lsl #2
   14cdc:	add	r0, r7, r0, lsl #1
   14ce0:	udiv	r7, r0, r8
   14ce4:	mls	r0, r7, r8, r0
   14ce8:	lsl	r0, r0, #1
   14cec:	orr	r0, r0, r5, lsr #1
   14cf0:	cmp	r0, r8
   14cf4:	bcs	14d08 <__assert_fail@plt+0x3624>
   14cf8:	rsb	r1, r2, #0
   14cfc:	subs	ip, r0, r1
   14d00:	movwne	ip, #1
   14d04:	b	14d18 <__assert_fail@plt+0x3634>
   14d08:	add	r0, r0, r2
   14d0c:	mov	ip, #2
   14d10:	cmp	r8, r0
   14d14:	movwcc	ip, #3
   14d18:	ldr	r4, [sp, #44]	; 0x2c
   14d1c:	subs	r0, sl, r8
   14d20:	mov	r3, #3
   14d24:	sbcs	r0, r9, #0
   14d28:	bcs	14e08 <__assert_fail@plt+0x3724>
   14d2c:	mov	r5, r6
   14d30:	rsbs	r0, sl, #9
   14d34:	rscs	r0, r9, #0
   14d38:	bcc	14fa4 <__assert_fail@plt+0x38c0>
   14d3c:	cmp	r5, #1
   14d40:	bne	14d58 <__assert_fail@plt+0x3674>
   14d44:	and	r0, r7, #1
   14d48:	add	r0, ip, r0
   14d4c:	cmp	r0, #2
   14d50:	bhi	14d68 <__assert_fail@plt+0x3684>
   14d54:	b	14d9c <__assert_fail@plt+0x36b8>
   14d58:	cmp	r5, #0
   14d5c:	bne	14d9c <__assert_fail@plt+0x36b8>
   14d60:	cmp	ip, #0
   14d64:	beq	14d9c <__assert_fail@plt+0x36b8>
   14d68:	adds	r0, sl, #1
   14d6c:	add	r7, r7, #1
   14d70:	mov	ip, #0
   14d74:	adc	r1, r9, #0
   14d78:	cmp	r7, #10
   14d7c:	bne	14d9c <__assert_fail@plt+0x36b8>
   14d80:	rsbs	r2, r0, #9
   14d84:	mov	r7, #0
   14d88:	mov	sl, r0
   14d8c:	mov	r9, r1
   14d90:	mov	ip, #0
   14d94:	rscs	r2, r1, #0
   14d98:	bcc	14e70 <__assert_fail@plt+0x378c>
   14d9c:	ldr	r0, [sp, #40]	; 0x28
   14da0:	tst	r0, #8
   14da4:	beq	14dc4 <__assert_fail@plt+0x36e0>
   14da8:	cmp	r7, #0
   14dac:	bne	14dc4 <__assert_fail@plt+0x36e0>
   14db0:	ldr	r6, [sp, #36]	; 0x24
   14db4:	mov	r7, #0
   14db8:	cmp	r5, #0
   14dbc:	bne	149f0 <__assert_fail@plt+0x330c>
   14dc0:	b	14fb0 <__assert_fail@plt+0x38cc>
   14dc4:	ldr	r1, [sp, #32]
   14dc8:	ldr	r2, [sp, #12]
   14dcc:	add	r0, r7, #48	; 0x30
   14dd0:	mov	r7, r4
   14dd4:	mov	r4, r3
   14dd8:	strb	r0, [r1, #646]!	; 0x286
   14ddc:	sub	r0, r1, r2
   14de0:	ldr	r1, [sp, #8]
   14de4:	mov	r6, r0
   14de8:	bl	113cc <memcpy@plt>
   14dec:	mov	r3, r4
   14df0:	mov	r4, r7
   14df4:	mov	ip, #0
   14df8:	mov	r7, #0
   14dfc:	cmp	r5, #0
   14e00:	bne	149f0 <__assert_fail@plt+0x330c>
   14e04:	b	14fb0 <__assert_fail@plt+0x38cc>
   14e08:	mov	r0, sl
   14e0c:	mov	r1, r9
   14e10:	mov	r2, r8
   14e14:	mov	r3, #0
   14e18:	mov	r4, ip
   14e1c:	bl	1a694 <__assert_fail@plt+0x8fb0>
   14e20:	mov	r2, r4
   14e24:	mov	r4, r0
   14e28:	mls	r0, r0, r8, sl
   14e2c:	mov	r9, r1
   14e30:	add	r0, r0, r0, lsl #2
   14e34:	add	r0, r7, r0, lsl #1
   14e38:	udiv	r7, r0, r8
   14e3c:	mls	r0, r7, r8, r0
   14e40:	lsl	r0, r0, #1
   14e44:	orr	r0, r0, r2, lsr #1
   14e48:	cmp	r0, r8
   14e4c:	bcs	14e8c <__assert_fail@plt+0x37a8>
   14e50:	rsb	r1, r2, #0
   14e54:	subs	ip, r0, r1
   14e58:	movwne	ip, #1
   14e5c:	subs	r0, r4, r8
   14e60:	mov	r3, #4
   14e64:	sbcs	r0, r9, #0
   14e68:	bcc	14c94 <__assert_fail@plt+0x35b0>
   14e6c:	b	14eac <__assert_fail@plt+0x37c8>
   14e70:	ldr	r6, [sp, #36]	; 0x24
   14e74:	mov	ip, #0
   14e78:	mov	sl, #10
   14e7c:	mov	r9, #0
   14e80:	cmp	r5, #0
   14e84:	bne	149f0 <__assert_fail@plt+0x330c>
   14e88:	b	14fb0 <__assert_fail@plt+0x38cc>
   14e8c:	add	r0, r0, r2
   14e90:	mov	ip, #2
   14e94:	cmp	r8, r0
   14e98:	movwcc	ip, #3
   14e9c:	subs	r0, r4, r8
   14ea0:	mov	r3, #4
   14ea4:	sbcs	r0, r9, #0
   14ea8:	bcc	14c94 <__assert_fail@plt+0x35b0>
   14eac:	mov	r0, r4
   14eb0:	mov	r1, r9
   14eb4:	mov	r2, r8
   14eb8:	mov	r3, #0
   14ebc:	mov	r5, ip
   14ec0:	bl	1a694 <__assert_fail@plt+0x8fb0>
   14ec4:	mov	sl, r0
   14ec8:	mls	r0, r0, r8, r4
   14ecc:	mov	r2, r5
   14ed0:	mov	r9, r1
   14ed4:	add	r0, r0, r0, lsl #2
   14ed8:	add	r0, r7, r0, lsl #1
   14edc:	udiv	r7, r0, r8
   14ee0:	mls	r0, r7, r8, r0
   14ee4:	lsl	r0, r0, #1
   14ee8:	orr	r0, r0, r5, lsr #1
   14eec:	cmp	r0, r8
   14ef0:	bcs	14f04 <__assert_fail@plt+0x3820>
   14ef4:	rsb	r1, r2, #0
   14ef8:	subs	ip, r0, r1
   14efc:	movwne	ip, #1
   14f00:	b	14f14 <__assert_fail@plt+0x3830>
   14f04:	add	r0, r0, r2
   14f08:	mov	ip, #2
   14f0c:	cmp	r8, r0
   14f10:	movwcc	ip, #3
   14f14:	ldr	r4, [sp, #44]	; 0x2c
   14f18:	subs	r0, sl, r8
   14f1c:	mov	r3, #5
   14f20:	sbcs	r0, r9, #0
   14f24:	bcc	14d2c <__assert_fail@plt+0x3648>
   14f28:	mov	r0, sl
   14f2c:	mov	r1, r9
   14f30:	mov	r2, r8
   14f34:	mov	r3, #0
   14f38:	mov	r4, ip
   14f3c:	bl	1a694 <__assert_fail@plt+0x8fb0>
   14f40:	mov	r2, r4
   14f44:	mov	r4, r0
   14f48:	mls	r0, r0, r8, sl
   14f4c:	mov	r9, r1
   14f50:	add	r0, r0, r0, lsl #2
   14f54:	add	r0, r7, r0, lsl #1
   14f58:	udiv	r7, r0, r8
   14f5c:	mls	r0, r7, r8, r0
   14f60:	lsl	r0, r0, #1
   14f64:	orr	r0, r0, r2, lsr #1
   14f68:	cmp	r0, r8
   14f6c:	bcs	151ac <__assert_fail@plt+0x3ac8>
   14f70:	rsb	r1, r2, #0
   14f74:	subs	ip, r0, r1
   14f78:	movwne	ip, #1
   14f7c:	subs	r0, r4, r8
   14f80:	mov	r3, #6
   14f84:	sbcs	r0, r9, #0
   14f88:	bcs	151cc <__assert_fail@plt+0x3ae8>
   14f8c:	mov	sl, r4
   14f90:	ldr	r4, [sp, #44]	; 0x2c
   14f94:	mov	r5, r6
   14f98:	rsbs	r0, sl, #9
   14f9c:	rscs	r0, r9, #0
   14fa0:	bcs	14d3c <__assert_fail@plt+0x3658>
   14fa4:	ldr	r6, [sp, #36]	; 0x24
   14fa8:	cmp	r5, #0
   14fac:	bne	149f0 <__assert_fail@plt+0x330c>
   14fb0:	add	r0, r7, ip
   14fb4:	cmp	r0, #1
   14fb8:	blt	15020 <__assert_fail@plt+0x393c>
   14fbc:	adds	sl, sl, #1
   14fc0:	adc	r9, r9, #0
   14fc4:	cmp	r3, #7
   14fc8:	bgt	15020 <__assert_fail@plt+0x393c>
   14fcc:	cmp	r4, #0
   14fd0:	beq	15020 <__assert_fail@plt+0x393c>
   14fd4:	ldr	r7, [sp, #36]	; 0x24
   14fd8:	eor	r0, sl, r8
   14fdc:	orrs	r0, r0, r9
   14fe0:	bne	15024 <__assert_fail@plt+0x3940>
   14fe4:	ldr	r0, [sp, #40]	; 0x28
   14fe8:	add	r3, r3, #1
   14fec:	mov	r9, #0
   14ff0:	mov	sl, #1
   14ff4:	str	r3, [sp, #28]
   14ff8:	tst	r0, #8
   14ffc:	bne	15028 <__assert_fail@plt+0x3944>
   15000:	ldr	r2, [sp, #12]
   15004:	mov	r0, #48	; 0x30
   15008:	ldr	r1, [sp, #8]
   1500c:	strb	r0, [r6, #-1]!
   15010:	sub	r6, r6, r2
   15014:	mov	r0, r6
   15018:	bl	113cc <memcpy@plt>
   1501c:	b	15028 <__assert_fail@plt+0x3944>
   15020:	ldr	r7, [sp, #36]	; 0x24
   15024:	str	r3, [sp, #28]
   15028:	mov	r8, r6
   1502c:	mov	r0, sl
   15030:	mov	r1, r9
   15034:	mov	r2, #10
   15038:	mov	r3, #0
   1503c:	bl	1a694 <__assert_fail@plt+0x8fb0>
   15040:	add	r2, r0, r0, lsl #2
   15044:	sub	r2, sl, r2, lsl #1
   15048:	orr	r2, r2, #48	; 0x30
   1504c:	strb	r2, [r8, #-1]!
   15050:	rsbs	r2, sl, #9
   15054:	mov	sl, r0
   15058:	rscs	r2, r9, #0
   1505c:	mov	r9, r1
   15060:	bcc	1502c <__assert_fail@plt+0x3948>
   15064:	ldr	sl, [sp, #32]
   15068:	ldr	r5, [sp, #40]	; 0x28
   1506c:	ldr	r9, [fp, #16]
   15070:	tst	r5, #4
   15074:	beq	14a80 <__assert_fail@plt+0x339c>
   15078:	ldr	r9, [sp, #52]	; 0x34
   1507c:	mov	r5, r8
   15080:	sub	r4, r6, r8
   15084:	mov	r0, r9
   15088:	bl	11534 <strlen@plt>
   1508c:	add	r8, sp, #56	; 0x38
   15090:	str	r0, [sp, #48]	; 0x30
   15094:	mov	r1, r5
   15098:	mov	r2, r4
   1509c:	mov	r0, r8
   150a0:	bl	113cc <memcpy@plt>
   150a4:	ldr	r5, [sp, #16]
   150a8:	ldrb	r7, [r5]
   150ac:	cmp	r7, #255	; 0xff
   150b0:	mov	sl, r7
   150b4:	moveq	sl, r4
   150b8:	cmp	r7, #0
   150bc:	mvneq	sl, #0
   150c0:	cmp	sl, r4
   150c4:	movhi	sl, r4
   150c8:	sub	r0, r6, sl
   150cc:	sub	r6, r4, sl
   150d0:	mov	r2, sl
   150d4:	add	r1, r8, r6
   150d8:	mov	r8, r0
   150dc:	bl	113cc <memcpy@plt>
   150e0:	cmp	r6, #0
   150e4:	beq	15174 <__assert_fail@plt+0x3a90>
   150e8:	clz	r0, r7
   150ec:	lsr	r9, r0, #5
   150f0:	ldr	r0, [sp, #48]	; 0x30
   150f4:	rsb	r0, r0, #0
   150f8:	str	r0, [sp, #44]	; 0x2c
   150fc:	ldr	r0, [sp, #44]	; 0x2c
   15100:	ldr	r1, [sp, #52]	; 0x34
   15104:	ldr	r2, [sp, #48]	; 0x30
   15108:	add	r4, r8, r0
   1510c:	mov	r0, r4
   15110:	bl	113cc <memcpy@plt>
   15114:	tst	r9, #1
   15118:	add	r0, sp, #56	; 0x38
   1511c:	addeq	r5, r5, #1
   15120:	mov	r9, r5
   15124:	ldrb	r5, [r5]
   15128:	cmp	r5, #255	; 0xff
   1512c:	mov	r7, r5
   15130:	moveq	r7, r6
   15134:	cmp	r5, #0
   15138:	moveq	r7, sl
   1513c:	cmp	r6, r7
   15140:	movcc	r7, r6
   15144:	sub	r6, r6, r7
   15148:	sub	r8, r4, r7
   1514c:	mov	r2, r7
   15150:	add	r1, r0, r6
   15154:	mov	r0, r8
   15158:	bl	113cc <memcpy@plt>
   1515c:	clz	r0, r5
   15160:	mov	r5, r9
   15164:	cmp	r6, #0
   15168:	mov	sl, r7
   1516c:	lsr	r9, r0, #5
   15170:	bne	150fc <__assert_fail@plt+0x3a18>
   15174:	ldr	r7, [sp, #36]	; 0x24
   15178:	ldr	sl, [sp, #32]
   1517c:	ldr	r5, [sp, #40]	; 0x28
   15180:	ldr	r9, [fp, #16]
   15184:	ldr	r3, [sp, #28]
   15188:	tst	r5, #128	; 0x80
   1518c:	bne	14a8c <__assert_fail@plt+0x33a8>
   15190:	mov	r0, #0
   15194:	strb	r0, [r7]
   15198:	mov	r0, r8
   1519c:	sub	sp, fp, #48	; 0x30
   151a0:	vpop	{d8-d9}
   151a4:	add	sp, sp, #4
   151a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151ac:	add	r0, r0, r2
   151b0:	mov	ip, #2
   151b4:	cmp	r8, r0
   151b8:	movwcc	ip, #3
   151bc:	subs	r0, r4, r8
   151c0:	mov	r3, #6
   151c4:	sbcs	r0, r9, #0
   151c8:	bcc	14f8c <__assert_fail@plt+0x38a8>
   151cc:	mov	r0, r4
   151d0:	mov	r1, r9
   151d4:	mov	r2, r8
   151d8:	mov	r3, #0
   151dc:	mov	r5, ip
   151e0:	bl	1a694 <__assert_fail@plt+0x8fb0>
   151e4:	mov	r6, r8
   151e8:	mov	r8, r0
   151ec:	mov	r2, r5
   151f0:	mov	r9, r1
   151f4:	mls	r0, r0, r6, r4
   151f8:	add	r0, r0, r0, lsl #2
   151fc:	add	r0, r7, r0, lsl #1
   15200:	udiv	r4, r0, r6
   15204:	mls	r0, r4, r6, r0
   15208:	lsl	r0, r0, #1
   1520c:	orr	r0, r0, r2, lsr #1
   15210:	cmp	r0, r6
   15214:	bcs	15258 <__assert_fail@plt+0x3b74>
   15218:	rsb	r1, r2, #0
   1521c:	subs	ip, r0, r1
   15220:	movwne	ip, #1
   15224:	subs	r0, r8, r6
   15228:	mov	r3, #7
   1522c:	sbcs	r0, r9, #0
   15230:	bcs	15278 <__assert_fail@plt+0x3b94>
   15234:	mov	r7, r4
   15238:	ldr	r5, [sp, #48]	; 0x30
   1523c:	ldr	r4, [sp, #44]	; 0x2c
   15240:	mov	sl, r8
   15244:	mov	r8, r6
   15248:	rsbs	r0, sl, #9
   1524c:	rscs	r0, r9, #0
   15250:	bcc	14fa4 <__assert_fail@plt+0x38c0>
   15254:	b	14d3c <__assert_fail@plt+0x3658>
   15258:	add	r0, r0, r2
   1525c:	mov	ip, #2
   15260:	cmp	r6, r0
   15264:	movwcc	ip, #3
   15268:	subs	r0, r8, r6
   1526c:	mov	r3, #7
   15270:	sbcs	r0, r9, #0
   15274:	bcc	15234 <__assert_fail@plt+0x3b50>
   15278:	mov	r0, r8
   1527c:	mov	r1, r9
   15280:	mov	r2, r6
   15284:	mov	r3, #0
   15288:	mov	r5, ip
   1528c:	bl	1a694 <__assert_fail@plt+0x8fb0>
   15290:	mov	sl, r0
   15294:	mls	r0, r0, r6, r8
   15298:	mov	r2, r5
   1529c:	mov	r9, r1
   152a0:	mov	r8, r6
   152a4:	add	r0, r0, r0, lsl #2
   152a8:	add	r0, r4, r0, lsl #1
   152ac:	udiv	r7, r0, r6
   152b0:	mls	r0, r7, r6, r0
   152b4:	lsl	r0, r0, #1
   152b8:	orr	r0, r0, r5, lsr #1
   152bc:	cmp	r0, r6
   152c0:	bcs	152d4 <__assert_fail@plt+0x3bf0>
   152c4:	rsb	r1, r2, #0
   152c8:	subs	ip, r0, r1
   152cc:	movwne	ip, #1
   152d0:	b	152e4 <__assert_fail@plt+0x3c00>
   152d4:	add	r0, r0, r2
   152d8:	mov	ip, #2
   152dc:	cmp	r8, r0
   152e0:	movwcc	ip, #3
   152e4:	ldr	r5, [sp, #48]	; 0x30
   152e8:	ldr	r4, [sp, #44]	; 0x2c
   152ec:	mov	r3, #8
   152f0:	rsbs	r0, sl, #9
   152f4:	rscs	r0, r9, #0
   152f8:	bcc	14fa4 <__assert_fail@plt+0x38c0>
   152fc:	b	14d3c <__assert_fail@plt+0x3658>
   15300:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15304:	add	fp, sp, #24
   15308:	sub	sp, sp, #8
   1530c:	mov	r4, r2
   15310:	mov	r8, r1
   15314:	cmp	r0, #0
   15318:	bne	15344 <__assert_fail@plt+0x3c60>
   1531c:	movw	r0, #46845	; 0xb6fd
   15320:	movt	r0, #1
   15324:	bl	114c8 <getenv@plt>
   15328:	cmp	r0, #0
   1532c:	bne	15344 <__assert_fail@plt+0x3c60>
   15330:	movw	r0, #46856	; 0xb708
   15334:	movt	r0, #1
   15338:	bl	114c8 <getenv@plt>
   1533c:	cmp	r0, #0
   15340:	beq	15470 <__assert_fail@plt+0x3d8c>
   15344:	mov	r6, r0
   15348:	movw	r7, #46944	; 0xb760
   1534c:	movw	r1, #46932	; 0xb754
   15350:	mov	r3, #4
   15354:	ldrb	r5, [r6], #1
   15358:	movt	r7, #1
   1535c:	movt	r1, #1
   15360:	mov	r2, r7
   15364:	cmp	r5, #39	; 0x27
   15368:	movne	r6, r0
   1536c:	mov	r0, r6
   15370:	bl	139fc <__assert_fail@plt+0x2318>
   15374:	sub	r1, r5, #39	; 0x27
   15378:	cmp	r0, #0
   1537c:	clz	r1, r1
   15380:	lsr	r1, r1, #5
   15384:	lsl	r5, r1, #2
   15388:	bmi	153c0 <__assert_fail@plt+0x3cdc>
   1538c:	ldr	r0, [r7, r0, lsl #2]
   15390:	mov	r2, #1
   15394:	mov	r1, #0
   15398:	str	r2, [r4]
   1539c:	str	r1, [r4, #4]
   153a0:	orr	r1, r0, r5
   153a4:	mov	r0, #0
   153a8:	str	r1, [r8]
   153ac:	ldrd	r2, [r4]
   153b0:	orrs	r1, r2, r3
   153b4:	beq	153fc <__assert_fail@plt+0x3d18>
   153b8:	sub	sp, fp, #24
   153bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   153c0:	movw	r0, #46866	; 0xb712
   153c4:	add	r1, sp, #4
   153c8:	mov	r2, #0
   153cc:	mov	r3, r4
   153d0:	mov	r7, #0
   153d4:	movt	r0, #1
   153d8:	str	r0, [sp]
   153dc:	mov	r0, r6
   153e0:	bl	18fb0 <__assert_fail@plt+0x78cc>
   153e4:	cmp	r0, #0
   153e8:	beq	1542c <__assert_fail@plt+0x3d48>
   153ec:	str	r7, [r8]
   153f0:	ldrd	r2, [r4]
   153f4:	orrs	r1, r2, r3
   153f8:	bne	153b8 <__assert_fail@plt+0x3cd4>
   153fc:	movw	r0, #46902	; 0xb736
   15400:	movt	r0, #1
   15404:	bl	114c8 <getenv@plt>
   15408:	cmp	r0, #0
   1540c:	mov	r2, #512	; 0x200
   15410:	mov	r0, #4
   15414:	mov	r1, #0
   15418:	movweq	r2, #1024	; 0x400
   1541c:	str	r2, [r4]
   15420:	str	r1, [r4, #4]
   15424:	sub	sp, fp, #24
   15428:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1542c:	ldrb	r0, [r6]
   15430:	sub	r0, r0, #48	; 0x30
   15434:	uxtb	r0, r0
   15438:	cmp	r0, #10
   1543c:	bcc	15468 <__assert_fail@plt+0x3d84>
   15440:	ldr	r0, [sp, #4]
   15444:	cmp	r0, r6
   15448:	beq	15498 <__assert_fail@plt+0x3db4>
   1544c:	ldrb	r2, [r6, #1]
   15450:	add	r1, r6, #1
   15454:	mov	r6, r1
   15458:	sub	r2, r2, #48	; 0x30
   1545c:	uxtb	r2, r2
   15460:	cmp	r2, #10
   15464:	bcs	15444 <__assert_fail@plt+0x3d60>
   15468:	mov	r1, r5
   1546c:	b	153a4 <__assert_fail@plt+0x3cc0>
   15470:	movw	r0, #46902	; 0xb736
   15474:	movt	r0, #1
   15478:	bl	114c8 <getenv@plt>
   1547c:	cmp	r0, #0
   15480:	mov	r2, #512	; 0x200
   15484:	mov	r1, #0
   15488:	movweq	r2, #1024	; 0x400
   1548c:	str	r2, [r4]
   15490:	str	r1, [r4, #4]
   15494:	b	153a4 <__assert_fail@plt+0x3cc0>
   15498:	ldrb	r2, [r0, #-1]
   1549c:	orr	r1, r5, #384	; 0x180
   154a0:	cmp	r2, #66	; 0x42
   154a4:	mov	r2, r1
   154a8:	orrne	r2, r5, #128	; 0x80
   154ac:	bne	154c0 <__assert_fail@plt+0x3ddc>
   154b0:	ldrb	r0, [r0, #-2]
   154b4:	cmp	r0, #105	; 0x69
   154b8:	orreq	r1, r2, #32
   154bc:	b	153a4 <__assert_fail@plt+0x3cc0>
   154c0:	orr	r1, r2, #32
   154c4:	b	153a4 <__assert_fail@plt+0x3cc0>
   154c8:	push	{r4, r5, r6, sl, fp, lr}
   154cc:	add	fp, sp, #16
   154d0:	mov	r5, r0
   154d4:	mov	r0, #0
   154d8:	mov	r4, r1
   154dc:	add	r6, r2, #19
   154e0:	strb	r0, [r2, #20]
   154e4:	mov	r0, r5
   154e8:	mov	r1, r4
   154ec:	mov	r2, #10
   154f0:	mov	r3, #0
   154f4:	bl	1a694 <__assert_fail@plt+0x8fb0>
   154f8:	add	r2, r0, r0, lsl #2
   154fc:	sub	r2, r5, r2, lsl #1
   15500:	orr	r2, r2, #48	; 0x30
   15504:	strb	r2, [r6], #-1
   15508:	rsbs	r2, r5, #9
   1550c:	mov	r5, r0
   15510:	rscs	r2, r4, #0
   15514:	mov	r4, r1
   15518:	bcc	154e4 <__assert_fail@plt+0x3e00>
   1551c:	add	r0, r6, #1
   15520:	pop	{r4, r5, r6, sl, fp, pc}
   15524:	push	{r4, r5, fp, lr}
   15528:	add	fp, sp, #8
   1552c:	cmp	r0, #0
   15530:	beq	155c4 <__assert_fail@plt+0x3ee0>
   15534:	mov	r1, #47	; 0x2f
   15538:	mov	r4, r0
   1553c:	bl	11624 <strrchr@plt>
   15540:	cmp	r0, #0
   15544:	mov	r5, r4
   15548:	addne	r5, r0, #1
   1554c:	sub	r0, r5, r4
   15550:	cmp	r0, #7
   15554:	blt	155a8 <__assert_fail@plt+0x3ec4>
   15558:	movw	r1, #47008	; 0xb7a0
   1555c:	sub	r0, r5, #7
   15560:	mov	r2, #7
   15564:	movt	r1, #1
   15568:	bl	116b4 <strncmp@plt>
   1556c:	cmp	r0, #0
   15570:	bne	155a8 <__assert_fail@plt+0x3ec4>
   15574:	movw	r1, #47016	; 0xb7a8
   15578:	mov	r0, r5
   1557c:	mov	r2, #3
   15580:	movt	r1, #1
   15584:	bl	116b4 <strncmp@plt>
   15588:	cmp	r0, #0
   1558c:	beq	15598 <__assert_fail@plt+0x3eb4>
   15590:	mov	r4, r5
   15594:	b	155a8 <__assert_fail@plt+0x3ec4>
   15598:	movw	r0, #49568	; 0xc1a0
   1559c:	add	r4, r5, #3
   155a0:	movt	r0, #2
   155a4:	str	r4, [r0]
   155a8:	movw	r0, #49572	; 0xc1a4
   155ac:	movt	r0, #2
   155b0:	str	r4, [r0]
   155b4:	movw	r0, #49616	; 0xc1d0
   155b8:	movt	r0, #2
   155bc:	str	r4, [r0]
   155c0:	pop	{r4, r5, fp, pc}
   155c4:	movw	r0, #49584	; 0xc1b0
   155c8:	mov	r1, #55	; 0x37
   155cc:	mov	r2, #1
   155d0:	movt	r0, #2
   155d4:	ldr	r3, [r0]
   155d8:	movw	r0, #46952	; 0xb768
   155dc:	movt	r0, #1
   155e0:	bl	1145c <fwrite@plt>
   155e4:	bl	116cc <abort@plt>
   155e8:	push	{r4, r5, r6, sl, fp, lr}
   155ec:	add	fp, sp, #16
   155f0:	mov	r4, r0
   155f4:	movw	r0, #49624	; 0xc1d8
   155f8:	movt	r0, #2
   155fc:	cmp	r4, #0
   15600:	moveq	r4, r0
   15604:	bl	11558 <__errno_location@plt>
   15608:	ldr	r6, [r0]
   1560c:	mov	r5, r0
   15610:	mov	r0, r4
   15614:	mov	r1, #48	; 0x30
   15618:	bl	18d94 <__assert_fail@plt+0x76b0>
   1561c:	str	r6, [r5]
   15620:	pop	{r4, r5, r6, sl, fp, pc}
   15624:	movw	r1, #49624	; 0xc1d8
   15628:	cmp	r0, #0
   1562c:	movt	r1, #2
   15630:	movne	r1, r0
   15634:	ldr	r0, [r1]
   15638:	bx	lr
   1563c:	movw	r2, #49624	; 0xc1d8
   15640:	cmp	r0, #0
   15644:	movt	r2, #2
   15648:	movne	r2, r0
   1564c:	str	r1, [r2]
   15650:	bx	lr
   15654:	movw	r3, #49624	; 0xc1d8
   15658:	cmp	r0, #0
   1565c:	and	r2, r2, #1
   15660:	movt	r3, #2
   15664:	movne	r3, r0
   15668:	ubfx	r0, r1, #5, #3
   1566c:	and	r1, r1, #31
   15670:	add	ip, r3, r0, lsl #2
   15674:	mov	r0, #1
   15678:	ldr	r3, [ip, #8]
   1567c:	and	r0, r0, r3, lsr r1
   15680:	eor	r2, r0, r2
   15684:	eor	r1, r3, r2, lsl r1
   15688:	str	r1, [ip, #8]
   1568c:	bx	lr
   15690:	movw	r2, #49624	; 0xc1d8
   15694:	cmp	r0, #0
   15698:	movt	r2, #2
   1569c:	movne	r2, r0
   156a0:	ldr	r0, [r2, #4]
   156a4:	str	r1, [r2, #4]
   156a8:	bx	lr
   156ac:	push	{fp, lr}
   156b0:	mov	fp, sp
   156b4:	movw	r3, #49624	; 0xc1d8
   156b8:	cmp	r0, #0
   156bc:	movt	r3, #2
   156c0:	movne	r3, r0
   156c4:	cmp	r1, #0
   156c8:	mov	r0, #10
   156cc:	cmpne	r2, #0
   156d0:	str	r0, [r3]
   156d4:	bne	156dc <__assert_fail@plt+0x3ff8>
   156d8:	bl	116cc <abort@plt>
   156dc:	str	r1, [r3, #40]	; 0x28
   156e0:	str	r2, [r3, #44]	; 0x2c
   156e4:	pop	{fp, pc}
   156e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156ec:	add	fp, sp, #28
   156f0:	sub	sp, sp, #20
   156f4:	mov	r7, r0
   156f8:	ldr	r0, [fp, #8]
   156fc:	movw	r5, #49624	; 0xc1d8
   15700:	mov	r8, r3
   15704:	mov	r9, r2
   15708:	mov	sl, r1
   1570c:	movt	r5, #2
   15710:	cmp	r0, #0
   15714:	movne	r5, r0
   15718:	bl	11558 <__errno_location@plt>
   1571c:	ldr	r2, [r5, #40]	; 0x28
   15720:	ldr	r3, [r5, #44]	; 0x2c
   15724:	mov	r4, r0
   15728:	ldm	r5, {r0, r1}
   1572c:	add	r5, r5, #8
   15730:	ldr	r6, [r4]
   15734:	stm	sp, {r0, r1, r5}
   15738:	mov	r0, r7
   1573c:	mov	r1, sl
   15740:	str	r2, [sp, #12]
   15744:	str	r3, [sp, #16]
   15748:	mov	r2, r9
   1574c:	mov	r3, r8
   15750:	bl	15760 <__assert_fail@plt+0x407c>
   15754:	str	r6, [r4]
   15758:	sub	sp, fp, #28
   1575c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15764:	add	fp, sp, #28
   15768:	sub	sp, sp, #156	; 0x9c
   1576c:	str	r0, [fp, #-84]	; 0xffffffac
   15770:	add	r0, r2, #1
   15774:	mov	r6, r1
   15778:	mov	r7, r3
   1577c:	str	r2, [fp, #-80]	; 0xffffffb0
   15780:	str	r0, [sp, #80]	; 0x50
   15784:	ldr	r0, [fp, #12]
   15788:	and	r1, r0, #1
   1578c:	str	r1, [sp, #36]	; 0x24
   15790:	and	r1, r0, #4
   15794:	str	r1, [sp, #32]
   15798:	ubfx	r8, r0, #1, #1
   1579c:	bl	11480 <__ctype_get_mb_cur_max@plt>
   157a0:	str	r0, [sp, #40]	; 0x28
   157a4:	ldr	r0, [fp, #24]
   157a8:	ldr	r4, [fp, #8]
   157ac:	mov	r1, #0
   157b0:	str	r1, [fp, #-52]	; 0xffffffcc
   157b4:	mov	r1, #0
   157b8:	str	r1, [sp, #60]	; 0x3c
   157bc:	mov	r1, #1
   157c0:	str	r1, [sp, #84]	; 0x54
   157c4:	str	r0, [sp, #76]	; 0x4c
   157c8:	ldr	r0, [fp, #20]
   157cc:	str	r0, [sp, #72]	; 0x48
   157d0:	mov	r0, #0
   157d4:	str	r0, [sp, #56]	; 0x38
   157d8:	mov	r0, #0
   157dc:	str	r0, [fp, #-88]	; 0xffffffa8
   157e0:	mov	r0, #0
   157e4:	str	r0, [fp, #-72]	; 0xffffffb8
   157e8:	mov	r0, #0
   157ec:	cmp	r4, #10
   157f0:	bhi	16b0c <__assert_fail@plt+0x5428>
   157f4:	add	r1, pc, #24
   157f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   157fc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15800:	mov	r5, r6
   15804:	mov	r9, #0
   15808:	mov	r2, #1
   1580c:	mov	r3, #0
   15810:	ldr	pc, [r1, r4, lsl #2]
   15814:	ldrdeq	r5, [r1], -ip
   15818:	andeq	r5, r1, r8, lsl r9
   1581c:	andeq	r5, r1, ip, ror #17
   15820:	ldrdeq	r5, [r1], -r4
   15824:	andeq	r5, r1, ip, lsl #18
   15828:	andeq	r5, r1, r0, ror r9
   1582c:	strdeq	r5, [r1], -ip
   15830:	andeq	r5, r1, r8, ror #23
   15834:	andeq	r5, r1, r0, asr #16
   15838:	andeq	r5, r1, r0, asr #16
   1583c:	andeq	r5, r1, r8, ror sl
   15840:	movw	r6, #47098	; 0xb7fa
   15844:	mov	r0, #0
   15848:	mov	r2, #5
   1584c:	movt	r6, #1
   15850:	mov	r1, r6
   15854:	bl	11408 <dcgettext@plt>
   15858:	cmp	r0, r6
   1585c:	str	r0, [sp, #72]	; 0x48
   15860:	bne	15a50 <__assert_fail@plt+0x436c>
   15864:	bl	1a010 <__assert_fail@plt+0x892c>
   15868:	ldrb	r1, [r0]
   1586c:	and	r1, r1, #223	; 0xdf
   15870:	cmp	r1, #71	; 0x47
   15874:	beq	159d0 <__assert_fail@plt+0x42ec>
   15878:	cmp	r1, #85	; 0x55
   1587c:	bne	15a34 <__assert_fail@plt+0x4350>
   15880:	ldrb	r1, [r0, #1]
   15884:	and	r1, r1, #223	; 0xdf
   15888:	cmp	r1, #84	; 0x54
   1588c:	bne	15a34 <__assert_fail@plt+0x4350>
   15890:	ldrb	r1, [r0, #2]
   15894:	and	r1, r1, #223	; 0xdf
   15898:	cmp	r1, #70	; 0x46
   1589c:	bne	15a34 <__assert_fail@plt+0x4350>
   158a0:	ldrb	r1, [r0, #3]
   158a4:	cmp	r1, #45	; 0x2d
   158a8:	bne	15a34 <__assert_fail@plt+0x4350>
   158ac:	ldrb	r1, [r0, #4]
   158b0:	cmp	r1, #56	; 0x38
   158b4:	bne	15a34 <__assert_fail@plt+0x4350>
   158b8:	ldrb	r0, [r0, #5]
   158bc:	cmp	r0, #0
   158c0:	movw	r0, #47102	; 0xb7fe
   158c4:	movt	r0, #1
   158c8:	str	r0, [sp, #72]	; 0x48
   158cc:	bne	15a34 <__assert_fail@plt+0x4350>
   158d0:	b	15a50 <__assert_fail@plt+0x436c>
   158d4:	mov	r0, #1
   158d8:	b	15918 <__assert_fail@plt+0x4234>
   158dc:	mov	r4, #0
   158e0:	mov	r9, #0
   158e4:	mov	r2, r0
   158e8:	b	15968 <__assert_fail@plt+0x4284>
   158ec:	tst	r8, #1
   158f0:	bne	15918 <__assert_fail@plt+0x4234>
   158f4:	mov	r2, r0
   158f8:	b	15940 <__assert_fail@plt+0x425c>
   158fc:	mov	r0, #1
   15900:	mov	r9, #0
   15904:	mov	r4, #5
   15908:	b	15984 <__assert_fail@plt+0x42a0>
   1590c:	mov	r2, #1
   15910:	tst	r8, #1
   15914:	beq	15940 <__assert_fail@plt+0x425c>
   15918:	mov	r1, #1
   1591c:	mov	r9, #0
   15920:	mov	r4, #2
   15924:	mov	r2, r0
   15928:	mov	r3, #1
   1592c:	str	r1, [fp, #-72]	; 0xffffffb8
   15930:	movw	r1, #47100	; 0xb7fc
   15934:	movt	r1, #1
   15938:	str	r1, [fp, #-88]	; 0xffffffa8
   1593c:	b	15be8 <__assert_fail@plt+0x4504>
   15940:	cmp	r5, #0
   15944:	mov	r9, #1
   15948:	mov	r4, #2
   1594c:	movne	r0, #39	; 0x27
   15950:	strbne	r0, [ip]
   15954:	movw	r0, #47100	; 0xb7fc
   15958:	movt	r0, #1
   1595c:	str	r0, [fp, #-88]	; 0xffffffa8
   15960:	mov	r0, #1
   15964:	str	r0, [fp, #-72]	; 0xffffffb8
   15968:	mov	r3, #0
   1596c:	b	15be8 <__assert_fail@plt+0x4504>
   15970:	mov	r4, #5
   15974:	tst	r8, #1
   15978:	beq	159a0 <__assert_fail@plt+0x42bc>
   1597c:	mov	r0, #1
   15980:	mov	r9, #0
   15984:	str	r0, [fp, #-72]	; 0xffffffb8
   15988:	movw	r0, #47096	; 0xb7f8
   1598c:	mov	r2, #1
   15990:	mov	r3, #1
   15994:	movt	r0, #1
   15998:	str	r0, [fp, #-88]	; 0xffffffa8
   1599c:	b	15be8 <__assert_fail@plt+0x4504>
   159a0:	cmp	r5, #0
   159a4:	mov	r3, #0
   159a8:	mov	r9, #1
   159ac:	mov	r2, #1
   159b0:	movne	r0, #34	; 0x22
   159b4:	strbne	r0, [ip]
   159b8:	movw	r0, #47096	; 0xb7f8
   159bc:	movt	r0, #1
   159c0:	str	r0, [fp, #-88]	; 0xffffffa8
   159c4:	mov	r0, #1
   159c8:	str	r0, [fp, #-72]	; 0xffffffb8
   159cc:	b	15be8 <__assert_fail@plt+0x4504>
   159d0:	ldrb	r1, [r0, #1]
   159d4:	and	r1, r1, #223	; 0xdf
   159d8:	cmp	r1, #66	; 0x42
   159dc:	bne	15a34 <__assert_fail@plt+0x4350>
   159e0:	ldrb	r1, [r0, #2]
   159e4:	cmp	r1, #49	; 0x31
   159e8:	bne	15a34 <__assert_fail@plt+0x4350>
   159ec:	ldrb	r1, [r0, #3]
   159f0:	cmp	r1, #56	; 0x38
   159f4:	bne	15a34 <__assert_fail@plt+0x4350>
   159f8:	ldrb	r1, [r0, #4]
   159fc:	cmp	r1, #48	; 0x30
   15a00:	bne	15a34 <__assert_fail@plt+0x4350>
   15a04:	ldrb	r1, [r0, #5]
   15a08:	cmp	r1, #51	; 0x33
   15a0c:	bne	15a34 <__assert_fail@plt+0x4350>
   15a10:	ldrb	r1, [r0, #6]
   15a14:	cmp	r1, #48	; 0x30
   15a18:	bne	15a34 <__assert_fail@plt+0x4350>
   15a1c:	ldrb	r0, [r0, #7]
   15a20:	cmp	r0, #0
   15a24:	movw	r0, #47110	; 0xb806
   15a28:	movt	r0, #1
   15a2c:	str	r0, [sp, #72]	; 0x48
   15a30:	beq	15a50 <__assert_fail@plt+0x436c>
   15a34:	movw	r1, #47096	; 0xb7f8
   15a38:	movw	r0, #47100	; 0xb7fc
   15a3c:	cmp	r4, #9
   15a40:	movt	r1, #1
   15a44:	movt	r0, #1
   15a48:	moveq	r0, r1
   15a4c:	str	r0, [sp, #72]	; 0x48
   15a50:	movw	r6, #47100	; 0xb7fc
   15a54:	mov	r0, #0
   15a58:	mov	r2, #5
   15a5c:	movt	r6, #1
   15a60:	mov	r1, r6
   15a64:	bl	11408 <dcgettext@plt>
   15a68:	cmp	r0, r6
   15a6c:	str	r0, [sp, #76]	; 0x4c
   15a70:	beq	15abc <__assert_fail@plt+0x43d8>
   15a74:	ldr	ip, [fp, #-84]	; 0xffffffac
   15a78:	mov	r9, #0
   15a7c:	tst	r8, #1
   15a80:	bne	15bc4 <__assert_fail@plt+0x44e0>
   15a84:	ldr	r0, [sp, #72]	; 0x48
   15a88:	ldrb	r0, [r0]
   15a8c:	cmp	r0, #0
   15a90:	beq	15bc4 <__assert_fail@plt+0x44e0>
   15a94:	ldr	r1, [sp, #72]	; 0x48
   15a98:	mov	r9, #0
   15a9c:	add	r1, r1, #1
   15aa0:	cmp	r9, r5
   15aa4:	strbcc	r0, [ip, r9]
   15aa8:	ldrb	r0, [r1, r9]
   15aac:	add	r9, r9, #1
   15ab0:	cmp	r0, #0
   15ab4:	bne	15aa0 <__assert_fail@plt+0x43bc>
   15ab8:	b	15bc4 <__assert_fail@plt+0x44e0>
   15abc:	bl	1a010 <__assert_fail@plt+0x892c>
   15ac0:	ldrb	r1, [r0]
   15ac4:	and	r1, r1, #223	; 0xdf
   15ac8:	cmp	r1, #71	; 0x47
   15acc:	beq	15b3c <__assert_fail@plt+0x4458>
   15ad0:	ldr	ip, [fp, #-84]	; 0xffffffac
   15ad4:	cmp	r1, #85	; 0x55
   15ad8:	bne	15b98 <__assert_fail@plt+0x44b4>
   15adc:	ldrb	r1, [r0, #1]
   15ae0:	and	r1, r1, #223	; 0xdf
   15ae4:	cmp	r1, #84	; 0x54
   15ae8:	bne	15b98 <__assert_fail@plt+0x44b4>
   15aec:	ldrb	r1, [r0, #2]
   15af0:	and	r1, r1, #223	; 0xdf
   15af4:	cmp	r1, #70	; 0x46
   15af8:	bne	15b98 <__assert_fail@plt+0x44b4>
   15afc:	ldrb	r1, [r0, #3]
   15b00:	cmp	r1, #45	; 0x2d
   15b04:	bne	15b98 <__assert_fail@plt+0x44b4>
   15b08:	ldrb	r1, [r0, #4]
   15b0c:	cmp	r1, #56	; 0x38
   15b10:	bne	15b98 <__assert_fail@plt+0x44b4>
   15b14:	ldrb	r0, [r0, #5]
   15b18:	cmp	r0, #0
   15b1c:	bne	15b98 <__assert_fail@plt+0x44b4>
   15b20:	movw	r0, #47106	; 0xb802
   15b24:	movt	r0, #1
   15b28:	str	r0, [sp, #76]	; 0x4c
   15b2c:	mov	r9, #0
   15b30:	tst	r8, #1
   15b34:	beq	15a84 <__assert_fail@plt+0x43a0>
   15b38:	b	15bc4 <__assert_fail@plt+0x44e0>
   15b3c:	ldrb	r1, [r0, #1]
   15b40:	ldr	ip, [fp, #-84]	; 0xffffffac
   15b44:	and	r1, r1, #223	; 0xdf
   15b48:	cmp	r1, #66	; 0x42
   15b4c:	bne	15b98 <__assert_fail@plt+0x44b4>
   15b50:	ldrb	r1, [r0, #2]
   15b54:	cmp	r1, #49	; 0x31
   15b58:	bne	15b98 <__assert_fail@plt+0x44b4>
   15b5c:	ldrb	r1, [r0, #3]
   15b60:	cmp	r1, #56	; 0x38
   15b64:	bne	15b98 <__assert_fail@plt+0x44b4>
   15b68:	ldrb	r1, [r0, #4]
   15b6c:	cmp	r1, #48	; 0x30
   15b70:	bne	15b98 <__assert_fail@plt+0x44b4>
   15b74:	ldrb	r1, [r0, #5]
   15b78:	cmp	r1, #51	; 0x33
   15b7c:	bne	15b98 <__assert_fail@plt+0x44b4>
   15b80:	ldrb	r1, [r0, #6]
   15b84:	cmp	r1, #48	; 0x30
   15b88:	bne	15b98 <__assert_fail@plt+0x44b4>
   15b8c:	ldrb	r0, [r0, #7]
   15b90:	cmp	r0, #0
   15b94:	beq	169ac <__assert_fail@plt+0x52c8>
   15b98:	movw	r0, #47100	; 0xb7fc
   15b9c:	cmp	r4, #9
   15ba0:	movt	r0, #1
   15ba4:	mov	r1, r0
   15ba8:	movw	r0, #47096	; 0xb7f8
   15bac:	movt	r0, #1
   15bb0:	moveq	r1, r0
   15bb4:	str	r1, [sp, #76]	; 0x4c
   15bb8:	mov	r9, #0
   15bbc:	tst	r8, #1
   15bc0:	beq	15a84 <__assert_fail@plt+0x43a0>
   15bc4:	ldr	r6, [sp, #76]	; 0x4c
   15bc8:	mov	r0, r6
   15bcc:	bl	11534 <strlen@plt>
   15bd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   15bd4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15bd8:	str	r0, [fp, #-72]	; 0xffffffb8
   15bdc:	str	r6, [fp, #-88]	; 0xffffffa8
   15be0:	mov	r2, #1
   15be4:	mov	r3, r8
   15be8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15bec:	str	r4, [fp, #-64]	; 0xffffffc0
   15bf0:	mov	sl, #0
   15bf4:	str	r3, [fp, #-76]	; 0xffffffb4
   15bf8:	str	r2, [sp, #88]	; 0x58
   15bfc:	cmp	r0, #0
   15c00:	movwne	r0, #1
   15c04:	and	r1, r0, r3
   15c08:	and	r1, r2, r1
   15c0c:	str	r1, [sp, #48]	; 0x30
   15c10:	sub	r1, r4, #2
   15c14:	clz	r1, r1
   15c18:	lsr	r1, r1, #5
   15c1c:	and	r1, r1, r3
   15c20:	str	r1, [sp, #44]	; 0x2c
   15c24:	subs	r1, r4, #2
   15c28:	eor	r4, r3, #1
   15c2c:	movwne	r1, #1
   15c30:	str	r4, [sp, #92]	; 0x5c
   15c34:	orr	r4, r1, r4
   15c38:	and	r1, r1, r2
   15c3c:	and	r0, r0, r1
   15c40:	str	r4, [sp, #64]	; 0x40
   15c44:	ldr	r4, [sp, #84]	; 0x54
   15c48:	str	r0, [fp, #-60]	; 0xffffffc4
   15c4c:	orr	r0, r1, r3
   15c50:	ldr	r1, [fp, #16]
   15c54:	eor	r0, r0, #1
   15c58:	clz	r1, r1
   15c5c:	lsr	r1, r1, #5
   15c60:	orr	r0, r1, r0
   15c64:	str	r0, [fp, #-68]	; 0xffffffbc
   15c68:	eor	r0, r2, #1
   15c6c:	str	r0, [sp, #52]	; 0x34
   15c70:	cmn	r7, #1
   15c74:	beq	15c84 <__assert_fail@plt+0x45a0>
   15c78:	cmp	sl, r7
   15c7c:	bne	15c90 <__assert_fail@plt+0x45ac>
   15c80:	b	16924 <__assert_fail@plt+0x5240>
   15c84:	ldrb	r0, [lr, sl]
   15c88:	cmp	r0, #0
   15c8c:	beq	1692c <__assert_fail@plt+0x5248>
   15c90:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15c94:	cmp	r0, #0
   15c98:	beq	15cf8 <__assert_fail@plt+0x4614>
   15c9c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15ca0:	mov	r6, r5
   15ca4:	add	r5, sl, r0
   15ca8:	cmp	r0, #2
   15cac:	bcc	15d18 <__assert_fail@plt+0x4634>
   15cb0:	mov	r0, #0
   15cb4:	cmn	r7, #1
   15cb8:	str	r0, [fp, #-56]	; 0xffffffc8
   15cbc:	bne	15cd4 <__assert_fail@plt+0x45f0>
   15cc0:	mov	r0, lr
   15cc4:	bl	11534 <strlen@plt>
   15cc8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15ccc:	ldr	ip, [fp, #-84]	; 0xffffffac
   15cd0:	mov	r7, r0
   15cd4:	cmp	r5, r7
   15cd8:	bls	15d28 <__assert_fail@plt+0x4644>
   15cdc:	mov	r0, #0
   15ce0:	mov	r5, r6
   15ce4:	str	r0, [fp, #-48]	; 0xffffffd0
   15ce8:	ldrb	r6, [lr, sl]
   15cec:	cmp	r6, #126	; 0x7e
   15cf0:	bls	15d78 <__assert_fail@plt+0x4694>
   15cf4:	b	162d4 <__assert_fail@plt+0x4bf0>
   15cf8:	mov	r0, #0
   15cfc:	str	r0, [fp, #-56]	; 0xffffffc8
   15d00:	mov	r0, #0
   15d04:	str	r0, [fp, #-48]	; 0xffffffd0
   15d08:	ldrb	r6, [lr, sl]
   15d0c:	cmp	r6, #126	; 0x7e
   15d10:	bls	15d78 <__assert_fail@plt+0x4694>
   15d14:	b	162d4 <__assert_fail@plt+0x4bf0>
   15d18:	mov	r0, #0
   15d1c:	str	r0, [fp, #-56]	; 0xffffffc8
   15d20:	cmp	r5, r7
   15d24:	bhi	15cdc <__assert_fail@plt+0x45f8>
   15d28:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15d2c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15d30:	add	r0, lr, sl
   15d34:	bl	11528 <bcmp@plt>
   15d38:	ldr	r2, [sp, #92]	; 0x5c
   15d3c:	cmp	r0, #0
   15d40:	mov	r1, r0
   15d44:	mov	r5, r6
   15d48:	movwne	r1, #1
   15d4c:	orr	r1, r1, r2
   15d50:	tst	r1, #1
   15d54:	beq	169ec <__assert_fail@plt+0x5308>
   15d58:	ldr	ip, [fp, #-84]	; 0xffffffac
   15d5c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15d60:	clz	r0, r0
   15d64:	lsr	r0, r0, #5
   15d68:	str	r0, [fp, #-48]	; 0xffffffd0
   15d6c:	ldrb	r6, [lr, sl]
   15d70:	cmp	r6, #126	; 0x7e
   15d74:	bhi	162d4 <__assert_fail@plt+0x4bf0>
   15d78:	add	r3, pc, #16
   15d7c:	mov	r8, #1
   15d80:	mov	r2, #110	; 0x6e
   15d84:	mov	r0, #97	; 0x61
   15d88:	mov	r1, #0
   15d8c:	ldr	pc, [r3, r6, lsl #2]
   15d90:	andeq	r6, r1, ip, lsl #1
   15d94:	ldrdeq	r6, [r1], -r4
   15d98:	ldrdeq	r6, [r1], -r4
   15d9c:	ldrdeq	r6, [r1], -r4
   15da0:	ldrdeq	r6, [r1], -r4
   15da4:	ldrdeq	r6, [r1], -r4
   15da8:	ldrdeq	r6, [r1], -r4
   15dac:	andeq	r6, r1, r8, lsl #7
   15db0:	andeq	r6, r1, ip, rrx
   15db4:	andeq	r6, r1, r4, rrx
   15db8:	andeq	r6, r1, r8, ror r0
   15dbc:	andeq	r6, r1, r8, lsr #3
   15dc0:	andeq	r6, r1, ip, asr r0
   15dc4:	andeq	r6, r1, r4, ror r0
   15dc8:	ldrdeq	r6, [r1], -r4
   15dcc:	ldrdeq	r6, [r1], -r4
   15dd0:	ldrdeq	r6, [r1], -r4
   15dd4:	ldrdeq	r6, [r1], -r4
   15dd8:	ldrdeq	r6, [r1], -r4
   15ddc:	ldrdeq	r6, [r1], -r4
   15de0:	ldrdeq	r6, [r1], -r4
   15de4:	ldrdeq	r6, [r1], -r4
   15de8:	ldrdeq	r6, [r1], -r4
   15dec:	ldrdeq	r6, [r1], -r4
   15df0:	ldrdeq	r6, [r1], -r4
   15df4:	ldrdeq	r6, [r1], -r4
   15df8:	ldrdeq	r6, [r1], -r4
   15dfc:	ldrdeq	r6, [r1], -r4
   15e00:	ldrdeq	r6, [r1], -r4
   15e04:	ldrdeq	r6, [r1], -r4
   15e08:	ldrdeq	r6, [r1], -r4
   15e0c:	ldrdeq	r6, [r1], -r4
   15e10:	andeq	r6, r1, r0
   15e14:	andeq	r6, r1, r4
   15e18:	andeq	r6, r1, r4
   15e1c:	strdeq	r5, [r1], -r4
   15e20:	andeq	r6, r1, r4
   15e24:	andeq	r5, r1, ip, lsl #31
   15e28:	andeq	r6, r1, r4
   15e2c:			; <UNDEFINED> instruction: 0x000161b0
   15e30:	andeq	r6, r1, r4
   15e34:	andeq	r6, r1, r4
   15e38:	andeq	r6, r1, r4
   15e3c:	andeq	r5, r1, ip, lsl #31
   15e40:	andeq	r5, r1, ip, lsl #31
   15e44:	andeq	r5, r1, ip, lsl #31
   15e48:	andeq	r5, r1, ip, lsl #31
   15e4c:	andeq	r5, r1, ip, lsl #31
   15e50:	andeq	r5, r1, ip, lsl #31
   15e54:	andeq	r5, r1, ip, lsl #31
   15e58:	andeq	r5, r1, ip, lsl #31
   15e5c:	andeq	r5, r1, ip, lsl #31
   15e60:	andeq	r5, r1, ip, lsl #31
   15e64:	andeq	r5, r1, ip, lsl #31
   15e68:	andeq	r5, r1, ip, lsl #31
   15e6c:	andeq	r5, r1, ip, lsl #31
   15e70:	andeq	r5, r1, ip, lsl #31
   15e74:	andeq	r5, r1, ip, lsl #31
   15e78:	andeq	r5, r1, ip, lsl #31
   15e7c:	andeq	r6, r1, r4
   15e80:	andeq	r6, r1, r4
   15e84:	andeq	r6, r1, r4
   15e88:	andeq	r6, r1, r4
   15e8c:	andeq	r6, r1, r4, ror r1
   15e90:	ldrdeq	r6, [r1], -r4
   15e94:	andeq	r5, r1, ip, lsl #31
   15e98:	andeq	r5, r1, ip, lsl #31
   15e9c:	andeq	r5, r1, ip, lsl #31
   15ea0:	andeq	r5, r1, ip, lsl #31
   15ea4:	andeq	r5, r1, ip, lsl #31
   15ea8:	andeq	r5, r1, ip, lsl #31
   15eac:	andeq	r5, r1, ip, lsl #31
   15eb0:	andeq	r5, r1, ip, lsl #31
   15eb4:	andeq	r5, r1, ip, lsl #31
   15eb8:	andeq	r5, r1, ip, lsl #31
   15ebc:	andeq	r5, r1, ip, lsl #31
   15ec0:	andeq	r5, r1, ip, lsl #31
   15ec4:	andeq	r5, r1, ip, lsl #31
   15ec8:	andeq	r5, r1, ip, lsl #31
   15ecc:	andeq	r5, r1, ip, lsl #31
   15ed0:	andeq	r5, r1, ip, lsl #31
   15ed4:	andeq	r5, r1, ip, lsl #31
   15ed8:	andeq	r5, r1, ip, lsl #31
   15edc:	andeq	r5, r1, ip, lsl #31
   15ee0:	andeq	r5, r1, ip, lsl #31
   15ee4:	andeq	r5, r1, ip, lsl #31
   15ee8:	andeq	r5, r1, ip, lsl #31
   15eec:	andeq	r5, r1, ip, lsl #31
   15ef0:	andeq	r5, r1, ip, lsl #31
   15ef4:	andeq	r5, r1, ip, lsl #31
   15ef8:	andeq	r5, r1, ip, lsl #31
   15efc:	andeq	r6, r1, r4
   15f00:	andeq	r6, r1, r8, lsr r0
   15f04:	andeq	r5, r1, ip, lsl #31
   15f08:	andeq	r6, r1, r4
   15f0c:	andeq	r5, r1, ip, lsl #31
   15f10:	andeq	r6, r1, r4
   15f14:	andeq	r5, r1, ip, lsl #31
   15f18:	andeq	r5, r1, ip, lsl #31
   15f1c:	andeq	r5, r1, ip, lsl #31
   15f20:	andeq	r5, r1, ip, lsl #31
   15f24:	andeq	r5, r1, ip, lsl #31
   15f28:	andeq	r5, r1, ip, lsl #31
   15f2c:	andeq	r5, r1, ip, lsl #31
   15f30:	andeq	r5, r1, ip, lsl #31
   15f34:	andeq	r5, r1, ip, lsl #31
   15f38:	andeq	r5, r1, ip, lsl #31
   15f3c:	andeq	r5, r1, ip, lsl #31
   15f40:	andeq	r5, r1, ip, lsl #31
   15f44:	andeq	r5, r1, ip, lsl #31
   15f48:	andeq	r5, r1, ip, lsl #31
   15f4c:	andeq	r5, r1, ip, lsl #31
   15f50:	andeq	r5, r1, ip, lsl #31
   15f54:	andeq	r5, r1, ip, lsl #31
   15f58:	andeq	r5, r1, ip, lsl #31
   15f5c:	andeq	r5, r1, ip, lsl #31
   15f60:	andeq	r5, r1, ip, lsl #31
   15f64:	andeq	r5, r1, ip, lsl #31
   15f68:	andeq	r5, r1, ip, lsl #31
   15f6c:	andeq	r5, r1, ip, lsl #31
   15f70:	andeq	r5, r1, ip, lsl #31
   15f74:	andeq	r5, r1, ip, lsl #31
   15f78:	andeq	r5, r1, ip, lsl #31
   15f7c:	andeq	r5, r1, ip, asr #31
   15f80:	andeq	r6, r1, r4
   15f84:	andeq	r5, r1, ip, asr #31
   15f88:	strdeq	r5, [r1], -r4
   15f8c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15f90:	tst	r0, #1
   15f94:	bne	1624c <__assert_fail@plt+0x4b68>
   15f98:	ldr	r1, [fp, #16]
   15f9c:	ubfx	r0, r6, #5, #3
   15fa0:	mov	r2, #1
   15fa4:	ldr	r0, [r1, r0, lsl #2]
   15fa8:	and	r1, r6, #31
   15fac:	tst	r0, r2, lsl r1
   15fb0:	beq	1624c <__assert_fail@plt+0x4b68>
   15fb4:	mov	r0, r6
   15fb8:	mov	r1, r8
   15fbc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15fc0:	tst	r2, #1
   15fc4:	beq	1626c <__assert_fail@plt+0x4b88>
   15fc8:	b	169c8 <__assert_fail@plt+0x52e4>
   15fcc:	cmp	r7, #1
   15fd0:	beq	15ff4 <__assert_fail@plt+0x4910>
   15fd4:	mov	r8, #0
   15fd8:	cmn	r7, #1
   15fdc:	bne	16238 <__assert_fail@plt+0x4b54>
   15fe0:	ldrb	r0, [lr, #1]
   15fe4:	cmp	r0, #0
   15fe8:	beq	15ff4 <__assert_fail@plt+0x4910>
   15fec:	mvn	r7, #0
   15ff0:	b	16238 <__assert_fail@plt+0x4b54>
   15ff4:	mov	r8, #0
   15ff8:	cmp	sl, #0
   15ffc:	bne	16238 <__assert_fail@plt+0x4b54>
   16000:	mov	r1, #1
   16004:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16008:	cmp	r0, #2
   1600c:	bne	16024 <__assert_fail@plt+0x4940>
   16010:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16014:	mov	r8, r1
   16018:	tst	r0, #1
   1601c:	beq	15f8c <__assert_fail@plt+0x48a8>
   16020:	b	169c8 <__assert_fail@plt+0x52e4>
   16024:	mov	r8, r1
   16028:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1602c:	tst	r0, #1
   16030:	beq	15f98 <__assert_fail@plt+0x48b4>
   16034:	b	1624c <__assert_fail@plt+0x4b68>
   16038:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1603c:	cmp	r0, #2
   16040:	bne	16300 <__assert_fail@plt+0x4c1c>
   16044:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16048:	tst	r0, #1
   1604c:	bne	169c8 <__assert_fail@plt+0x52e4>
   16050:	mov	r0, #0
   16054:	str	r0, [fp, #-56]	; 0xffffffc8
   16058:	b	16318 <__assert_fail@plt+0x4c34>
   1605c:	mov	r0, #102	; 0x66
   16060:	b	16388 <__assert_fail@plt+0x4ca4>
   16064:	mov	r2, #116	; 0x74
   16068:	b	16078 <__assert_fail@plt+0x4994>
   1606c:	mov	r0, #98	; 0x62
   16070:	b	16388 <__assert_fail@plt+0x4ca4>
   16074:	mov	r2, #114	; 0x72
   16078:	ldr	r0, [sp, #64]	; 0x40
   1607c:	tst	r0, #1
   16080:	mov	r0, r2
   16084:	bne	16388 <__assert_fail@plt+0x4ca4>
   16088:	b	169c8 <__assert_fail@plt+0x52e4>
   1608c:	ldr	r0, [sp, #88]	; 0x58
   16090:	tst	r0, #1
   16094:	beq	163a8 <__assert_fail@plt+0x4cc4>
   16098:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1609c:	tst	r0, #1
   160a0:	bne	16b04 <__assert_fail@plt+0x5420>
   160a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   160a8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   160ac:	subs	r0, r0, #2
   160b0:	movwne	r0, #1
   160b4:	orr	r0, r0, r1
   160b8:	tst	r0, #1
   160bc:	bne	160f8 <__assert_fail@plt+0x4a14>
   160c0:	cmp	r9, r5
   160c4:	movcc	r0, #39	; 0x27
   160c8:	strbcc	r0, [ip, r9]
   160cc:	add	r0, r9, #1
   160d0:	cmp	r0, r5
   160d4:	movcc	r1, #36	; 0x24
   160d8:	strbcc	r1, [ip, r0]
   160dc:	add	r0, r9, #2
   160e0:	add	r9, r9, #3
   160e4:	cmp	r0, r5
   160e8:	movcc	r1, #39	; 0x27
   160ec:	strbcc	r1, [ip, r0]
   160f0:	mov	r0, #1
   160f4:	str	r0, [fp, #-52]	; 0xffffffcc
   160f8:	mov	r1, #1
   160fc:	cmp	r9, r5
   16100:	mov	r8, #0
   16104:	mov	r6, #48	; 0x30
   16108:	str	r1, [fp, #-56]	; 0xffffffc8
   1610c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16110:	movcc	r0, #92	; 0x5c
   16114:	strbcc	r0, [ip, r9]
   16118:	add	r0, r9, #1
   1611c:	cmp	r1, #2
   16120:	beq	16574 <__assert_fail@plt+0x4e90>
   16124:	add	r1, sl, #1
   16128:	cmp	r1, r7
   1612c:	bcs	16574 <__assert_fail@plt+0x4e90>
   16130:	ldrb	r1, [lr, r1]
   16134:	sub	r1, r1, #48	; 0x30
   16138:	uxtb	r1, r1
   1613c:	cmp	r1, #9
   16140:	bhi	16574 <__assert_fail@plt+0x4e90>
   16144:	cmp	r0, r5
   16148:	movcc	r1, #48	; 0x30
   1614c:	strbcc	r1, [ip, r0]
   16150:	add	r0, r9, #2
   16154:	add	r9, r9, #3
   16158:	cmp	r0, r5
   1615c:	movcc	r1, #48	; 0x30
   16160:	strbcc	r1, [ip, r0]
   16164:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16168:	tst	r0, #1
   1616c:	beq	15f98 <__assert_fail@plt+0x48b4>
   16170:	b	1624c <__assert_fail@plt+0x4b68>
   16174:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16178:	mov	r6, #63	; 0x3f
   1617c:	cmp	r0, #5
   16180:	beq	16588 <__assert_fail@plt+0x4ea4>
   16184:	mov	r1, #0
   16188:	cmp	r0, #2
   1618c:	str	r1, [fp, #-56]	; 0xffffffc8
   16190:	bne	16650 <__assert_fail@plt+0x4f6c>
   16194:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16198:	mov	r8, #0
   1619c:	tst	r0, #1
   161a0:	beq	15f8c <__assert_fail@plt+0x48a8>
   161a4:	b	169c8 <__assert_fail@plt+0x52e4>
   161a8:	mov	r0, #118	; 0x76
   161ac:	b	16388 <__assert_fail@plt+0x4ca4>
   161b0:	mov	r0, #1
   161b4:	mov	r6, #39	; 0x27
   161b8:	str	r0, [sp, #60]	; 0x3c
   161bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   161c0:	cmp	r0, #2
   161c4:	bne	163c8 <__assert_fail@plt+0x4ce4>
   161c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   161cc:	tst	r0, #1
   161d0:	bne	169c8 <__assert_fail@plt+0x52e4>
   161d4:	ldr	r2, [sp, #56]	; 0x38
   161d8:	clz	r1, r5
   161dc:	mov	r8, #1
   161e0:	lsr	r1, r1, #5
   161e4:	cmp	r2, #0
   161e8:	mov	r0, r2
   161ec:	movwne	r0, #1
   161f0:	orrs	r0, r0, r1
   161f4:	moveq	r2, r5
   161f8:	moveq	r5, r0
   161fc:	cmp	r9, r5
   16200:	str	r2, [sp, #56]	; 0x38
   16204:	movcc	r0, #39	; 0x27
   16208:	strbcc	r0, [ip, r9]
   1620c:	add	r0, r9, #1
   16210:	cmp	r0, r5
   16214:	movcc	r1, #92	; 0x5c
   16218:	strbcc	r1, [ip, r0]
   1621c:	add	r0, r9, #2
   16220:	add	r9, r9, #3
   16224:	cmp	r0, r5
   16228:	movcc	r1, #39	; 0x27
   1622c:	strbcc	r1, [ip, r0]
   16230:	mov	r0, #0
   16234:	str	r0, [fp, #-52]	; 0xffffffcc
   16238:	mov	r0, #0
   1623c:	str	r0, [fp, #-56]	; 0xffffffc8
   16240:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16244:	tst	r0, #1
   16248:	beq	15f98 <__assert_fail@plt+0x48b4>
   1624c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16250:	mov	r1, r8
   16254:	cmp	r0, #0
   16258:	mov	r0, r6
   1625c:	beq	16320 <__assert_fail@plt+0x4c3c>
   16260:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16264:	tst	r2, #1
   16268:	bne	169c8 <__assert_fail@plt+0x52e4>
   1626c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16270:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16274:	subs	r2, r2, #2
   16278:	movwne	r2, #1
   1627c:	orr	r2, r2, r3
   16280:	tst	r2, #1
   16284:	bne	162c0 <__assert_fail@plt+0x4bdc>
   16288:	cmp	r9, r5
   1628c:	movcc	r2, #39	; 0x27
   16290:	strbcc	r2, [ip, r9]
   16294:	add	r2, r9, #1
   16298:	cmp	r2, r5
   1629c:	movcc	r3, #36	; 0x24
   162a0:	strbcc	r3, [ip, r2]
   162a4:	add	r2, r9, #2
   162a8:	add	r9, r9, #3
   162ac:	cmp	r2, r5
   162b0:	movcc	r3, #39	; 0x27
   162b4:	strbcc	r3, [ip, r2]
   162b8:	mov	r2, #1
   162bc:	str	r2, [fp, #-52]	; 0xffffffcc
   162c0:	cmp	r9, r5
   162c4:	movcc	r2, #92	; 0x5c
   162c8:	strbcc	r2, [ip, r9]
   162cc:	add	r9, r9, #1
   162d0:	b	16368 <__assert_fail@plt+0x4c84>
   162d4:	ldr	r0, [sp, #40]	; 0x28
   162d8:	cmp	r0, #1
   162dc:	bne	163dc <__assert_fail@plt+0x4cf8>
   162e0:	bl	11510 <__ctype_b_loc@plt>
   162e4:	ldr	r0, [r0]
   162e8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   162ec:	mov	r1, #1
   162f0:	add	r0, r0, r6, lsl #1
   162f4:	ldrb	r0, [r0, #1]
   162f8:	ubfx	r8, r0, #6, #1
   162fc:	b	16734 <__assert_fail@plt+0x5050>
   16300:	ldr	r1, [sp, #48]	; 0x30
   16304:	mov	r0, #0
   16308:	str	r0, [fp, #-56]	; 0xffffffc8
   1630c:	mov	r0, #92	; 0x5c
   16310:	cmp	r1, #0
   16314:	beq	16388 <__assert_fail@plt+0x4ca4>
   16318:	mov	r6, #92	; 0x5c
   1631c:	mov	r8, #0
   16320:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16324:	cmp	r0, #0
   16328:	bne	16360 <__assert_fail@plt+0x4c7c>
   1632c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16330:	tst	r0, #1
   16334:	beq	16360 <__assert_fail@plt+0x4c7c>
   16338:	cmp	r9, r5
   1633c:	movcc	r0, #39	; 0x27
   16340:	strbcc	r0, [ip, r9]
   16344:	add	r0, r9, #1
   16348:	add	r9, r9, #2
   1634c:	cmp	r0, r5
   16350:	movcc	r1, #39	; 0x27
   16354:	strbcc	r1, [ip, r0]
   16358:	mov	r0, #0
   1635c:	str	r0, [fp, #-52]	; 0xffffffcc
   16360:	mov	r1, r8
   16364:	mov	r0, r6
   16368:	cmp	r9, r5
   1636c:	and	r4, r4, r1
   16370:	strbcc	r0, [ip, r9]
   16374:	add	r9, r9, #1
   16378:	add	sl, sl, #1
   1637c:	cmn	r7, #1
   16380:	bne	15c78 <__assert_fail@plt+0x4594>
   16384:	b	15c84 <__assert_fail@plt+0x45a0>
   16388:	mov	r1, #0
   1638c:	mov	r8, #0
   16390:	str	r1, [fp, #-56]	; 0xffffffc8
   16394:	ldr	r1, [sp, #88]	; 0x58
   16398:	tst	r1, #1
   1639c:	mov	r1, #0
   163a0:	beq	15f8c <__assert_fail@plt+0x48a8>
   163a4:	b	16260 <__assert_fail@plt+0x4b7c>
   163a8:	ldr	r0, [sp, #36]	; 0x24
   163ac:	mov	r6, #0
   163b0:	mov	r8, #0
   163b4:	cmp	r0, #0
   163b8:	mov	r0, #0
   163bc:	str	r0, [fp, #-56]	; 0xffffffc8
   163c0:	bne	16378 <__assert_fail@plt+0x4c94>
   163c4:	b	15f8c <__assert_fail@plt+0x48a8>
   163c8:	mov	r8, #1
   163cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   163d0:	tst	r0, #1
   163d4:	beq	15f98 <__assert_fail@plt+0x48b4>
   163d8:	b	1624c <__assert_fail@plt+0x4b68>
   163dc:	mov	r0, #0
   163e0:	cmn	r7, #1
   163e4:	str	r0, [fp, #-36]	; 0xffffffdc
   163e8:	str	r0, [fp, #-40]	; 0xffffffd8
   163ec:	bne	16400 <__assert_fail@plt+0x4d1c>
   163f0:	mov	r0, lr
   163f4:	bl	11534 <strlen@plt>
   163f8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   163fc:	mov	r7, r0
   16400:	ldr	r0, [sp, #44]	; 0x2c
   16404:	str	r4, [sp, #84]	; 0x54
   16408:	str	r5, [sp, #28]
   1640c:	cmp	r0, #0
   16410:	beq	16664 <__assert_fail@plt+0x4f80>
   16414:	ldr	r0, [sp, #80]	; 0x50
   16418:	mov	r8, #1
   1641c:	mov	r5, #0
   16420:	add	r0, r0, sl
   16424:	str	r0, [sp, #24]
   16428:	sub	r0, fp, #40	; 0x28
   1642c:	mov	r3, r0
   16430:	b	1646c <__assert_fail@plt+0x4d88>
   16434:	ldr	r5, [sp, #68]	; 0x44
   16438:	add	r5, r0, r5
   1643c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16440:	bl	11444 <iswprint@plt>
   16444:	cmp	r0, #0
   16448:	sub	r4, fp, #40	; 0x28
   1644c:	movwne	r0, #1
   16450:	and	r8, r8, r0
   16454:	mov	r0, r4
   16458:	bl	113e4 <mbsinit@plt>
   1645c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16460:	mov	r3, r4
   16464:	cmp	r0, #0
   16468:	bne	16728 <__assert_fail@plt+0x5044>
   1646c:	str	r5, [sp, #68]	; 0x44
   16470:	add	r5, r5, sl
   16474:	sub	r0, fp, #44	; 0x2c
   16478:	add	r1, lr, r5
   1647c:	sub	r2, r7, r5
   16480:	bl	1a048 <__assert_fail@plt+0x8964>
   16484:	cmn	r0, #2
   16488:	beq	166e8 <__assert_fail@plt+0x5004>
   1648c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16490:	cmn	r0, #1
   16494:	beq	166dc <__assert_fail@plt+0x4ff8>
   16498:	cmp	r0, #0
   1649c:	beq	166e0 <__assert_fail@plt+0x4ffc>
   164a0:	cmp	r0, #2
   164a4:	bcc	16434 <__assert_fail@plt+0x4d50>
   164a8:	ldr	r1, [sp, #68]	; 0x44
   164ac:	ldr	r2, [sp, #24]
   164b0:	add	r1, r2, r1
   164b4:	sub	r2, r0, #1
   164b8:	ldrb	r3, [r1]
   164bc:	sub	r3, r3, #91	; 0x5b
   164c0:	cmp	r3, #33	; 0x21
   164c4:	bls	164e4 <__assert_fail@plt+0x4e00>
   164c8:	add	r1, r1, #1
   164cc:	subs	r2, r2, #1
   164d0:	beq	16434 <__assert_fail@plt+0x4d50>
   164d4:	ldrb	r3, [r1]
   164d8:	sub	r3, r3, #91	; 0x5b
   164dc:	cmp	r3, #33	; 0x21
   164e0:	bhi	164c8 <__assert_fail@plt+0x4de4>
   164e4:	add	r5, pc, #0
   164e8:	ldr	pc, [r5, r3, lsl #2]
   164ec:	andeq	r6, r1, r0, lsl #20
   164f0:	andeq	r6, r1, r0, lsl #20
   164f4:	andeq	r6, r1, r8, asr #9
   164f8:	andeq	r6, r1, r0, lsl #20
   164fc:	andeq	r6, r1, r8, asr #9
   16500:	andeq	r6, r1, r0, lsl #20
   16504:	andeq	r6, r1, r8, asr #9
   16508:	andeq	r6, r1, r8, asr #9
   1650c:	andeq	r6, r1, r8, asr #9
   16510:	andeq	r6, r1, r8, asr #9
   16514:	andeq	r6, r1, r8, asr #9
   16518:	andeq	r6, r1, r8, asr #9
   1651c:	andeq	r6, r1, r8, asr #9
   16520:	andeq	r6, r1, r8, asr #9
   16524:	andeq	r6, r1, r8, asr #9
   16528:	andeq	r6, r1, r8, asr #9
   1652c:	andeq	r6, r1, r8, asr #9
   16530:	andeq	r6, r1, r8, asr #9
   16534:	andeq	r6, r1, r8, asr #9
   16538:	andeq	r6, r1, r8, asr #9
   1653c:	andeq	r6, r1, r8, asr #9
   16540:	andeq	r6, r1, r8, asr #9
   16544:	andeq	r6, r1, r8, asr #9
   16548:	andeq	r6, r1, r8, asr #9
   1654c:	andeq	r6, r1, r8, asr #9
   16550:	andeq	r6, r1, r8, asr #9
   16554:	andeq	r6, r1, r8, asr #9
   16558:	andeq	r6, r1, r8, asr #9
   1655c:	andeq	r6, r1, r8, asr #9
   16560:	andeq	r6, r1, r8, asr #9
   16564:	andeq	r6, r1, r8, asr #9
   16568:	andeq	r6, r1, r8, asr #9
   1656c:	andeq	r6, r1, r8, asr #9
   16570:	andeq	r6, r1, r0, lsl #20
   16574:	mov	r9, r0
   16578:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1657c:	tst	r0, #1
   16580:	beq	15f98 <__assert_fail@plt+0x48b4>
   16584:	b	1624c <__assert_fail@plt+0x4b68>
   16588:	mov	r0, #0
   1658c:	str	r0, [fp, #-56]	; 0xffffffc8
   16590:	ldr	r0, [sp, #32]
   16594:	cmp	r0, #0
   16598:	beq	16650 <__assert_fail@plt+0x4f6c>
   1659c:	add	r0, sl, #2
   165a0:	mov	r1, r7
   165a4:	cmp	r0, r7
   165a8:	bcs	16650 <__assert_fail@plt+0x4f6c>
   165ac:	add	r1, sl, lr
   165b0:	ldrb	r1, [r1, #1]
   165b4:	cmp	r1, #63	; 0x3f
   165b8:	bne	16650 <__assert_fail@plt+0x4f6c>
   165bc:	ldrb	r8, [lr, r0]
   165c0:	sub	r2, r8, #33	; 0x21
   165c4:	cmp	r2, #29
   165c8:	bhi	16650 <__assert_fail@plt+0x4f6c>
   165cc:	mov	r1, r4
   165d0:	movw	r4, #20929	; 0x51c1
   165d4:	mov	r3, #1
   165d8:	movt	r4, #14336	; 0x3800
   165dc:	tst	r4, r3, lsl r2
   165e0:	beq	1690c <__assert_fail@plt+0x5228>
   165e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   165e8:	tst	r2, #1
   165ec:	bne	169c8 <__assert_fail@plt+0x52e4>
   165f0:	cmp	r9, r5
   165f4:	mov	r6, r8
   165f8:	mov	r4, r1
   165fc:	mov	sl, r0
   16600:	mov	r8, #0
   16604:	movcc	r2, #63	; 0x3f
   16608:	strbcc	r2, [ip, r9]
   1660c:	add	r2, r9, #1
   16610:	cmp	r2, r5
   16614:	movcc	r3, #34	; 0x22
   16618:	strbcc	r3, [ip, r2]
   1661c:	add	r2, r9, #2
   16620:	cmp	r2, r5
   16624:	movcc	r3, #34	; 0x22
   16628:	strbcc	r3, [ip, r2]
   1662c:	add	r2, r9, #3
   16630:	add	r9, r9, #4
   16634:	cmp	r2, r5
   16638:	movcc	r3, #63	; 0x3f
   1663c:	strbcc	r3, [ip, r2]
   16640:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16644:	tst	r0, #1
   16648:	beq	15f98 <__assert_fail@plt+0x48b4>
   1664c:	b	1624c <__assert_fail@plt+0x4b68>
   16650:	mov	r8, #0
   16654:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16658:	tst	r0, #1
   1665c:	beq	15f98 <__assert_fail@plt+0x48b4>
   16660:	b	1624c <__assert_fail@plt+0x4b68>
   16664:	mov	r8, #1
   16668:	mov	r5, #0
   1666c:	sub	r4, fp, #40	; 0x28
   16670:	str	r5, [sp, #68]	; 0x44
   16674:	add	r5, r5, sl
   16678:	sub	r0, fp, #44	; 0x2c
   1667c:	mov	r3, r4
   16680:	add	r1, lr, r5
   16684:	sub	r2, r7, r5
   16688:	bl	1a048 <__assert_fail@plt+0x8964>
   1668c:	cmn	r0, #2
   16690:	beq	166e8 <__assert_fail@plt+0x5004>
   16694:	cmn	r0, #1
   16698:	beq	166dc <__assert_fail@plt+0x4ff8>
   1669c:	ldr	r5, [sp, #68]	; 0x44
   166a0:	cmp	r0, #0
   166a4:	beq	16724 <__assert_fail@plt+0x5040>
   166a8:	add	r5, r0, r5
   166ac:	ldr	r0, [fp, #-44]	; 0xffffffd4
   166b0:	bl	11444 <iswprint@plt>
   166b4:	cmp	r0, #0
   166b8:	sub	r4, fp, #40	; 0x28
   166bc:	movwne	r0, #1
   166c0:	and	r8, r8, r0
   166c4:	mov	r0, r4
   166c8:	bl	113e4 <mbsinit@plt>
   166cc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   166d0:	cmp	r0, #0
   166d4:	beq	16670 <__assert_fail@plt+0x4f8c>
   166d8:	b	16728 <__assert_fail@plt+0x5044>
   166dc:	mov	r8, #0
   166e0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   166e4:	b	1671c <__assert_fail@plt+0x5038>
   166e8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   166ec:	mov	r8, #0
   166f0:	cmp	r5, r7
   166f4:	bcs	1671c <__assert_fail@plt+0x5038>
   166f8:	ldrb	r0, [lr, r5]
   166fc:	cmp	r0, #0
   16700:	beq	1671c <__assert_fail@plt+0x5038>
   16704:	ldr	r0, [sp, #68]	; 0x44
   16708:	add	r0, r0, #1
   1670c:	add	r5, r0, sl
   16710:	str	r0, [sp, #68]	; 0x44
   16714:	cmp	r5, r7
   16718:	bcc	166f8 <__assert_fail@plt+0x5014>
   1671c:	ldr	r5, [sp, #68]	; 0x44
   16720:	b	16728 <__assert_fail@plt+0x5044>
   16724:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16728:	mov	r1, r5
   1672c:	ldr	r5, [sp, #28]
   16730:	ldr	r4, [sp, #84]	; 0x54
   16734:	ldr	r0, [sp, #52]	; 0x34
   16738:	ldr	ip, [fp, #-84]	; 0xffffffac
   1673c:	cmp	r1, #1
   16740:	orr	r2, r8, r0
   16744:	mov	r0, r1
   16748:	bhi	16754 <__assert_fail@plt+0x5070>
   1674c:	tst	r2, #1
   16750:	bne	15f8c <__assert_fail@plt+0x48a8>
   16754:	add	r0, r0, sl
   16758:	str	r2, [sp, #84]	; 0x54
   1675c:	str	r0, [fp, #-56]	; 0xffffffc8
   16760:	mov	r0, #0
   16764:	tst	r2, #1
   16768:	bne	16848 <__assert_fail@plt+0x5164>
   1676c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16770:	tst	r1, #1
   16774:	bne	169c8 <__assert_fail@plt+0x52e4>
   16778:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1677c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16780:	subs	r2, r1, #2
   16784:	movwne	r2, #1
   16788:	orr	r2, r2, r0
   1678c:	tst	r2, #1
   16790:	bne	167cc <__assert_fail@plt+0x50e8>
   16794:	cmp	r9, r5
   16798:	add	r2, r9, #1
   1679c:	mov	r0, #1
   167a0:	movcc	r1, #39	; 0x27
   167a4:	str	r0, [fp, #-52]	; 0xffffffcc
   167a8:	strbcc	r1, [ip, r9]
   167ac:	cmp	r2, r5
   167b0:	movcc	r1, #36	; 0x24
   167b4:	strbcc	r1, [ip, r2]
   167b8:	add	r2, r9, #2
   167bc:	add	r9, r9, #3
   167c0:	cmp	r2, r5
   167c4:	movcc	r1, #39	; 0x27
   167c8:	strbcc	r1, [ip, r2]
   167cc:	cmp	r9, r5
   167d0:	add	r2, r9, #1
   167d4:	movcc	r1, #92	; 0x5c
   167d8:	strbcc	r1, [ip, r9]
   167dc:	cmp	r2, r5
   167e0:	bcs	167f4 <__assert_fail@plt+0x5110>
   167e4:	uxtb	r3, r6
   167e8:	mov	r1, #48	; 0x30
   167ec:	orr	r3, r1, r3, lsr #6
   167f0:	strb	r3, [ip, r2]
   167f4:	add	r2, r9, #2
   167f8:	add	r9, r9, #3
   167fc:	cmp	r2, r5
   16800:	lsrcc	r3, r6, #3
   16804:	movcc	r1, #6
   16808:	bficc	r3, r1, #3, #29
   1680c:	mov	r1, #6
   16810:	bfi	r6, r1, #3, #29
   16814:	strbcc	r3, [ip, r2]
   16818:	mov	r2, #1
   1681c:	b	1687c <__assert_fail@plt+0x5198>
   16820:	ldr	r1, [sp, #80]	; 0x50
   16824:	cmp	r9, r2
   16828:	mov	r5, r2
   1682c:	ldr	r2, [sp, #84]	; 0x54
   16830:	strbcc	r6, [ip, r9]
   16834:	add	r9, r9, #1
   16838:	ldrb	r6, [r1, sl]
   1683c:	mov	sl, r3
   16840:	tst	r2, #1
   16844:	beq	1676c <__assert_fail@plt+0x5088>
   16848:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1684c:	tst	r1, #1
   16850:	beq	16870 <__assert_fail@plt+0x518c>
   16854:	cmp	r9, r5
   16858:	mov	r2, r0
   1685c:	movcc	r1, #92	; 0x5c
   16860:	strbcc	r1, [ip, r9]
   16864:	add	r9, r9, #1
   16868:	mov	r1, #0
   1686c:	b	16878 <__assert_fail@plt+0x5194>
   16870:	mov	r1, #0
   16874:	mov	r2, r0
   16878:	str	r1, [fp, #-48]	; 0xffffffd0
   1687c:	mov	r0, r2
   16880:	and	r1, r2, #1
   16884:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16888:	add	r3, sl, #1
   1688c:	cmp	r2, r3
   16890:	bls	168f0 <__assert_fail@plt+0x520c>
   16894:	mov	r2, r5
   16898:	ldr	r5, [fp, #-52]	; 0xffffffcc
   1689c:	cmp	r1, #0
   168a0:	movwne	r1, #1
   168a4:	mvn	r5, r5
   168a8:	orr	r5, r5, r1
   168ac:	tst	r5, #1
   168b0:	bne	16820 <__assert_fail@plt+0x513c>
   168b4:	cmp	r9, r2
   168b8:	movcc	r5, r4
   168bc:	movcc	r4, #39	; 0x27
   168c0:	strbcc	r4, [ip, r9]
   168c4:	movcc	r4, r5
   168c8:	add	r5, r9, #1
   168cc:	add	r9, r9, #2
   168d0:	cmp	r5, r2
   168d4:	movcc	r1, r4
   168d8:	movcc	r4, #39	; 0x27
   168dc:	strbcc	r4, [ip, r5]
   168e0:	movcc	r4, r1
   168e4:	mov	r1, #0
   168e8:	str	r1, [fp, #-52]	; 0xffffffcc
   168ec:	b	16820 <__assert_fail@plt+0x513c>
   168f0:	cmp	r1, #0
   168f4:	movwne	r1, #1
   168f8:	str	r1, [fp, #-56]	; 0xffffffc8
   168fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16900:	cmp	r0, #0
   16904:	beq	1632c <__assert_fail@plt+0x4c48>
   16908:	b	16360 <__assert_fail@plt+0x4c7c>
   1690c:	mov	r8, #0
   16910:	mov	r4, r1
   16914:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16918:	tst	r0, #1
   1691c:	beq	15f98 <__assert_fail@plt+0x48b4>
   16920:	b	1624c <__assert_fail@plt+0x4b68>
   16924:	mov	r7, sl
   16928:	b	16930 <__assert_fail@plt+0x524c>
   1692c:	mvn	r7, #0
   16930:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16934:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16938:	ldr	r2, [sp, #88]	; 0x58
   1693c:	eor	r0, r1, #2
   16940:	orr	r0, r0, r9
   16944:	clz	r0, r0
   16948:	lsr	r0, r0, #5
   1694c:	tst	r3, r0
   16950:	bne	169c8 <__assert_fail@plt+0x52e4>
   16954:	subs	r0, r1, #2
   16958:	movwne	r0, #1
   1695c:	orr	r0, r3, r0
   16960:	tst	r0, #1
   16964:	ldreq	r0, [sp, #60]	; 0x3c
   16968:	eoreq	r0, r0, #1
   1696c:	tsteq	r0, #1
   16970:	bne	16aa4 <__assert_fail@plt+0x53c0>
   16974:	tst	r4, #1
   16978:	bne	16a68 <__assert_fail@plt+0x5384>
   1697c:	ldr	r6, [sp, #56]	; 0x38
   16980:	mov	r8, #0
   16984:	cmp	r6, #0
   16988:	beq	16aa0 <__assert_fail@plt+0x53bc>
   1698c:	mov	r1, #0
   16990:	mov	r4, #2
   16994:	cmp	r5, #0
   16998:	mov	r0, r2
   1699c:	mov	r3, #0
   169a0:	str	r1, [sp, #84]	; 0x54
   169a4:	beq	157ec <__assert_fail@plt+0x4108>
   169a8:	b	16aa4 <__assert_fail@plt+0x53c0>
   169ac:	movw	r0, #47114	; 0xb80a
   169b0:	movt	r0, #1
   169b4:	str	r0, [sp, #76]	; 0x4c
   169b8:	mov	r9, #0
   169bc:	tst	r8, #1
   169c0:	beq	15a84 <__assert_fail@plt+0x43a0>
   169c4:	b	15bc4 <__assert_fail@plt+0x44e0>
   169c8:	ldr	r1, [sp, #88]	; 0x58
   169cc:	mov	r0, #2
   169d0:	tst	r1, #1
   169d4:	movwne	r0, #4
   169d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   169dc:	ldr	r1, [fp, #12]
   169e0:	cmp	r2, #2
   169e4:	moveq	r2, r0
   169e8:	b	16a20 <__assert_fail@plt+0x533c>
   169ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   169f0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   169f4:	ldr	r1, [fp, #12]
   169f8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   169fc:	b	16a20 <__assert_fail@plt+0x533c>
   16a00:	ldr	r1, [sp, #88]	; 0x58
   16a04:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16a08:	ldr	r5, [sp, #28]
   16a0c:	mov	r0, #2
   16a10:	tst	r1, #1
   16a14:	ldr	r1, [fp, #12]
   16a18:	movwne	r0, #4
   16a1c:	mov	r2, r0
   16a20:	mov	r0, #0
   16a24:	bic	r1, r1, #2
   16a28:	str	r2, [sp]
   16a2c:	mov	r2, lr
   16a30:	str	r0, [sp, #8]
   16a34:	ldr	r0, [sp, #72]	; 0x48
   16a38:	str	r1, [sp, #4]
   16a3c:	mov	r1, r5
   16a40:	str	r0, [sp, #12]
   16a44:	ldr	r0, [sp, #76]	; 0x4c
   16a48:	str	r0, [sp, #16]
   16a4c:	mov	r0, ip
   16a50:	mov	r3, r7
   16a54:	bl	15760 <__assert_fail@plt+0x407c>
   16a58:	mov	r9, r0
   16a5c:	mov	r0, r9
   16a60:	sub	sp, fp, #28
   16a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a68:	mov	r0, #5
   16a6c:	ldr	r1, [sp, #56]	; 0x38
   16a70:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16a74:	str	r0, [sp]
   16a78:	ldr	r0, [fp, #12]
   16a7c:	str	r0, [sp, #4]
   16a80:	ldr	r0, [fp, #16]
   16a84:	str	r0, [sp, #8]
   16a88:	ldr	r0, [sp, #72]	; 0x48
   16a8c:	str	r0, [sp, #12]
   16a90:	ldr	r0, [sp, #76]	; 0x4c
   16a94:	str	r0, [sp, #16]
   16a98:	ldr	r0, [fp, #-84]	; 0xffffffac
   16a9c:	b	16a50 <__assert_fail@plt+0x536c>
   16aa0:	mov	r3, #0
   16aa4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16aa8:	cmp	r1, #0
   16aac:	beq	16ae8 <__assert_fail@plt+0x5404>
   16ab0:	ldr	r2, [fp, #-84]	; 0xffffffac
   16ab4:	tst	r3, #1
   16ab8:	bne	16aec <__assert_fail@plt+0x5408>
   16abc:	ldrb	r0, [r1]
   16ac0:	cmp	r0, #0
   16ac4:	beq	16aec <__assert_fail@plt+0x5408>
   16ac8:	add	r1, r1, #1
   16acc:	cmp	r9, r5
   16ad0:	strbcc	r0, [r2, r9]
   16ad4:	add	r9, r9, #1
   16ad8:	ldrb	r0, [r1], #1
   16adc:	cmp	r0, #0
   16ae0:	bne	16acc <__assert_fail@plt+0x53e8>
   16ae4:	b	16aec <__assert_fail@plt+0x5408>
   16ae8:	ldr	r2, [fp, #-84]	; 0xffffffac
   16aec:	cmp	r9, r5
   16af0:	movcc	r0, #0
   16af4:	strbcc	r0, [r2, r9]
   16af8:	mov	r0, r9
   16afc:	sub	sp, fp, #28
   16b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b04:	mov	r0, #4
   16b08:	b	169d8 <__assert_fail@plt+0x52f4>
   16b0c:	bl	116cc <abort@plt>
   16b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b14:	add	fp, sp, #28
   16b18:	sub	sp, sp, #28
   16b1c:	movw	r5, #49624	; 0xc1d8
   16b20:	cmp	r2, #0
   16b24:	mov	r4, r1
   16b28:	mov	r7, r0
   16b2c:	str	r0, [sp, #20]
   16b30:	movt	r5, #2
   16b34:	movne	r5, r2
   16b38:	bl	11558 <__errno_location@plt>
   16b3c:	mov	sl, r0
   16b40:	ldr	r2, [r5, #40]	; 0x28
   16b44:	ldr	r3, [r5, #44]	; 0x2c
   16b48:	ldm	r5, {r0, r1}
   16b4c:	orr	r8, r1, #1
   16b50:	add	r9, r5, #8
   16b54:	mov	r1, #0
   16b58:	ldr	r6, [sl]
   16b5c:	stm	sp, {r0, r8, r9}
   16b60:	mov	r0, #0
   16b64:	str	r2, [sp, #12]
   16b68:	str	r3, [sp, #16]
   16b6c:	mov	r2, r7
   16b70:	mov	r3, r4
   16b74:	str	r6, [sp, #24]
   16b78:	mov	r6, r4
   16b7c:	bl	15760 <__assert_fail@plt+0x407c>
   16b80:	add	r7, r0, #1
   16b84:	mov	r0, r7
   16b88:	bl	18964 <__assert_fail@plt+0x7280>
   16b8c:	mov	r4, r0
   16b90:	ldr	r0, [r5]
   16b94:	ldr	r2, [r5, #44]	; 0x2c
   16b98:	ldr	r1, [r5, #40]	; 0x28
   16b9c:	mov	r3, r6
   16ba0:	stm	sp, {r0, r8, r9}
   16ba4:	str	r2, [sp, #16]
   16ba8:	ldr	r2, [sp, #20]
   16bac:	str	r1, [sp, #12]
   16bb0:	mov	r0, r4
   16bb4:	mov	r1, r7
   16bb8:	bl	15760 <__assert_fail@plt+0x407c>
   16bbc:	ldr	r0, [sp, #24]
   16bc0:	str	r0, [sl]
   16bc4:	mov	r0, r4
   16bc8:	sub	sp, fp, #28
   16bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bd4:	add	fp, sp, #28
   16bd8:	sub	sp, sp, #36	; 0x24
   16bdc:	movw	r8, #49624	; 0xc1d8
   16be0:	cmp	r3, #0
   16be4:	mov	r4, r2
   16be8:	str	r2, [sp, #24]
   16bec:	mov	r5, r1
   16bf0:	mov	r6, r0
   16bf4:	str	r0, [sp, #20]
   16bf8:	movt	r8, #2
   16bfc:	movne	r8, r3
   16c00:	bl	11558 <__errno_location@plt>
   16c04:	str	r0, [sp, #28]
   16c08:	ldr	r1, [r8, #40]	; 0x28
   16c0c:	ldr	r2, [r8, #44]	; 0x2c
   16c10:	ldr	r7, [r0]
   16c14:	cmp	r4, #0
   16c18:	add	sl, r8, #8
   16c1c:	mov	r0, #0
   16c20:	ldm	r8, {r3, r9}
   16c24:	orreq	r9, r9, #1
   16c28:	stm	sp, {r3, r9, sl}
   16c2c:	str	r1, [sp, #12]
   16c30:	str	r2, [sp, #16]
   16c34:	mov	r1, #0
   16c38:	mov	r2, r6
   16c3c:	mov	r3, r5
   16c40:	str	r7, [sp, #32]
   16c44:	mov	r7, r5
   16c48:	bl	15760 <__assert_fail@plt+0x407c>
   16c4c:	add	r4, r0, #1
   16c50:	mov	r5, r0
   16c54:	mov	r0, r4
   16c58:	bl	18964 <__assert_fail@plt+0x7280>
   16c5c:	mov	r6, r0
   16c60:	ldr	r0, [r8]
   16c64:	ldr	r2, [r8, #44]	; 0x2c
   16c68:	ldr	r1, [r8, #40]	; 0x28
   16c6c:	mov	r3, r7
   16c70:	stm	sp, {r0, r9, sl}
   16c74:	str	r2, [sp, #16]
   16c78:	ldr	r2, [sp, #20]
   16c7c:	str	r1, [sp, #12]
   16c80:	mov	r0, r6
   16c84:	mov	r1, r4
   16c88:	bl	15760 <__assert_fail@plt+0x407c>
   16c8c:	ldr	r0, [sp, #24]
   16c90:	ldr	r1, [sp, #32]
   16c94:	ldr	r2, [sp, #28]
   16c98:	cmp	r0, #0
   16c9c:	str	r1, [r2]
   16ca0:	strne	r5, [r0]
   16ca4:	mov	r0, r6
   16ca8:	sub	sp, fp, #28
   16cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cb0:	push	{r4, r5, r6, r7, fp, lr}
   16cb4:	add	fp, sp, #16
   16cb8:	movw	r4, #49552	; 0xc190
   16cbc:	movt	r4, #2
   16cc0:	ldrd	r6, [r4]
   16cc4:	cmp	r7, #2
   16cc8:	blt	16cf4 <__assert_fail@plt+0x5610>
   16ccc:	add	r5, r6, #12
   16cd0:	mov	r7, #0
   16cd4:	ldr	r0, [r5, r7, lsl #3]
   16cd8:	bl	143e8 <__assert_fail@plt+0x2d04>
   16cdc:	ldr	r1, [r4, #4]
   16ce0:	add	r2, r7, #2
   16ce4:	add	r0, r7, #1
   16ce8:	mov	r7, r0
   16cec:	cmp	r2, r1
   16cf0:	blt	16cd4 <__assert_fail@plt+0x55f0>
   16cf4:	ldr	r0, [r6, #4]
   16cf8:	movw	r5, #49672	; 0xc208
   16cfc:	movt	r5, #2
   16d00:	cmp	r0, r5
   16d04:	beq	16d18 <__assert_fail@plt+0x5634>
   16d08:	bl	143e8 <__assert_fail@plt+0x2d04>
   16d0c:	mov	r0, #256	; 0x100
   16d10:	str	r0, [r4, #8]
   16d14:	str	r5, [r4, #12]
   16d18:	add	r5, r4, #8
   16d1c:	cmp	r6, r5
   16d20:	beq	16d30 <__assert_fail@plt+0x564c>
   16d24:	mov	r0, r6
   16d28:	bl	143e8 <__assert_fail@plt+0x2d04>
   16d2c:	str	r5, [r4]
   16d30:	mov	r0, #1
   16d34:	str	r0, [r4, #4]
   16d38:	pop	{r4, r5, r6, r7, fp, pc}
   16d3c:	movw	r3, #49624	; 0xc1d8
   16d40:	mvn	r2, #0
   16d44:	movt	r3, #2
   16d48:	b	16d4c <__assert_fail@plt+0x5668>
   16d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d50:	add	fp, sp, #28
   16d54:	sub	sp, sp, #44	; 0x2c
   16d58:	mov	r7, r3
   16d5c:	str	r2, [sp, #36]	; 0x24
   16d60:	str	r1, [sp, #32]
   16d64:	mov	r5, r0
   16d68:	bl	11558 <__errno_location@plt>
   16d6c:	cmp	r5, #0
   16d70:	bmi	16ed8 <__assert_fail@plt+0x57f4>
   16d74:	cmn	r5, #-2147483647	; 0x80000001
   16d78:	beq	16ed8 <__assert_fail@plt+0x57f4>
   16d7c:	movw	r8, #49552	; 0xc190
   16d80:	mov	r4, r0
   16d84:	ldr	r0, [r0]
   16d88:	movt	r8, #2
   16d8c:	str	r4, [sp, #28]
   16d90:	ldr	r1, [r8, #4]
   16d94:	ldr	r6, [r8]
   16d98:	str	r0, [sp, #24]
   16d9c:	cmp	r1, r5
   16da0:	ble	16dac <__assert_fail@plt+0x56c8>
   16da4:	mov	sl, r6
   16da8:	b	16e14 <__assert_fail@plt+0x5730>
   16dac:	mov	r0, #8
   16db0:	add	r9, r8, #8
   16db4:	str	r1, [fp, #-32]	; 0xffffffe0
   16db8:	sub	r1, r5, r1
   16dbc:	mvn	r3, #-2147483648	; 0x80000000
   16dc0:	str	r0, [sp]
   16dc4:	subs	r0, r6, r9
   16dc8:	add	r2, r1, #1
   16dcc:	sub	r1, fp, #32
   16dd0:	movne	r0, r6
   16dd4:	bl	18b64 <__assert_fail@plt+0x7480>
   16dd8:	mov	sl, r0
   16ddc:	cmp	r6, r9
   16de0:	str	r0, [r8]
   16de4:	bne	16df0 <__assert_fail@plt+0x570c>
   16de8:	ldrd	r0, [r8, #8]
   16dec:	stm	sl, {r0, r1}
   16df0:	ldr	r1, [r8, #4]
   16df4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16df8:	add	r0, sl, r1, lsl #3
   16dfc:	sub	r1, r2, r1
   16e00:	lsl	r2, r1, #3
   16e04:	mov	r1, #0
   16e08:	bl	11588 <memset@plt>
   16e0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16e10:	str	r0, [r8, #4]
   16e14:	mov	r9, sl
   16e18:	ldm	r7, {r0, r1}
   16e1c:	orr	r8, r1, #1
   16e20:	add	r1, r7, #8
   16e24:	ldr	r2, [r7, #40]	; 0x28
   16e28:	ldr	r3, [r7, #44]	; 0x2c
   16e2c:	ldr	r6, [r9, r5, lsl #3]!
   16e30:	str	r1, [sp, #20]
   16e34:	ldr	r4, [r9, #4]!
   16e38:	stm	sp, {r0, r8}
   16e3c:	add	r0, sp, #8
   16e40:	stm	r0, {r1, r2, r3}
   16e44:	ldr	r2, [sp, #32]
   16e48:	ldr	r3, [sp, #36]	; 0x24
   16e4c:	mov	r1, r6
   16e50:	mov	r0, r4
   16e54:	bl	15760 <__assert_fail@plt+0x407c>
   16e58:	cmp	r6, r0
   16e5c:	bhi	16ec0 <__assert_fail@plt+0x57dc>
   16e60:	add	r6, r0, #1
   16e64:	movw	r0, #49672	; 0xc208
   16e68:	movt	r0, #2
   16e6c:	str	r6, [sl, r5, lsl #3]
   16e70:	cmp	r4, r0
   16e74:	beq	16e80 <__assert_fail@plt+0x579c>
   16e78:	mov	r0, r4
   16e7c:	bl	143e8 <__assert_fail@plt+0x2d04>
   16e80:	mov	r0, r6
   16e84:	bl	18964 <__assert_fail@plt+0x7280>
   16e88:	str	r0, [r9]
   16e8c:	mov	r4, r0
   16e90:	add	r3, sp, #8
   16e94:	ldr	r0, [r7]
   16e98:	ldr	r1, [r7, #40]	; 0x28
   16e9c:	ldr	r2, [r7, #44]	; 0x2c
   16ea0:	stm	sp, {r0, r8}
   16ea4:	ldr	r0, [sp, #20]
   16ea8:	stm	r3, {r0, r1, r2}
   16eac:	ldr	r2, [sp, #32]
   16eb0:	ldr	r3, [sp, #36]	; 0x24
   16eb4:	mov	r0, r4
   16eb8:	mov	r1, r6
   16ebc:	bl	15760 <__assert_fail@plt+0x407c>
   16ec0:	ldr	r1, [sp, #24]
   16ec4:	ldr	r0, [sp, #28]
   16ec8:	str	r1, [r0]
   16ecc:	mov	r0, r4
   16ed0:	sub	sp, fp, #28
   16ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ed8:	bl	116cc <abort@plt>
   16edc:	movw	r3, #49624	; 0xc1d8
   16ee0:	movt	r3, #2
   16ee4:	b	16d4c <__assert_fail@plt+0x5668>
   16ee8:	movw	r3, #49624	; 0xc1d8
   16eec:	mov	r1, r0
   16ef0:	mov	r0, #0
   16ef4:	mvn	r2, #0
   16ef8:	movt	r3, #2
   16efc:	b	16d4c <__assert_fail@plt+0x5668>
   16f00:	movw	r3, #49624	; 0xc1d8
   16f04:	mov	r2, r1
   16f08:	mov	r1, r0
   16f0c:	mov	r0, #0
   16f10:	movt	r3, #2
   16f14:	b	16d4c <__assert_fail@plt+0x5668>
   16f18:	push	{fp, lr}
   16f1c:	mov	fp, sp
   16f20:	sub	sp, sp, #48	; 0x30
   16f24:	vmov.i32	q8, #0	; 0x00000000
   16f28:	mov	ip, #32
   16f2c:	mov	r3, sp
   16f30:	mov	lr, r2
   16f34:	cmp	r1, #10
   16f38:	add	r2, r3, #16
   16f3c:	vst1.64	{d16-d17}, [r3], ip
   16f40:	vst1.64	{d16-d17}, [r2]
   16f44:	vst1.64	{d16-d17}, [r3]
   16f48:	beq	16f68 <__assert_fail@plt+0x5884>
   16f4c:	str	r1, [sp]
   16f50:	mov	r3, sp
   16f54:	mov	r1, lr
   16f58:	mvn	r2, #0
   16f5c:	bl	16d4c <__assert_fail@plt+0x5668>
   16f60:	mov	sp, fp
   16f64:	pop	{fp, pc}
   16f68:	bl	116cc <abort@plt>
   16f6c:	push	{r4, sl, fp, lr}
   16f70:	add	fp, sp, #8
   16f74:	sub	sp, sp, #48	; 0x30
   16f78:	vmov.i32	q8, #0	; 0x00000000
   16f7c:	mov	ip, r3
   16f80:	mov	r3, sp
   16f84:	mov	lr, #32
   16f88:	cmp	r1, #10
   16f8c:	add	r4, r3, #16
   16f90:	vst1.64	{d16-d17}, [r3], lr
   16f94:	vst1.64	{d16-d17}, [r4]
   16f98:	vst1.64	{d16-d17}, [r3]
   16f9c:	beq	16fbc <__assert_fail@plt+0x58d8>
   16fa0:	str	r1, [sp]
   16fa4:	mov	r1, r2
   16fa8:	mov	r3, sp
   16fac:	mov	r2, ip
   16fb0:	bl	16d4c <__assert_fail@plt+0x5668>
   16fb4:	sub	sp, fp, #8
   16fb8:	pop	{r4, sl, fp, pc}
   16fbc:	bl	116cc <abort@plt>
   16fc0:	push	{fp, lr}
   16fc4:	mov	fp, sp
   16fc8:	sub	sp, sp, #48	; 0x30
   16fcc:	vmov.i32	q8, #0	; 0x00000000
   16fd0:	mov	r3, sp
   16fd4:	mov	ip, #32
   16fd8:	cmp	r0, #10
   16fdc:	add	r2, r3, #16
   16fe0:	vst1.64	{d16-d17}, [r3], ip
   16fe4:	vst1.64	{d16-d17}, [r2]
   16fe8:	vst1.64	{d16-d17}, [r3]
   16fec:	beq	1700c <__assert_fail@plt+0x5928>
   16ff0:	str	r0, [sp]
   16ff4:	mov	r3, sp
   16ff8:	mov	r0, #0
   16ffc:	mvn	r2, #0
   17000:	bl	16d4c <__assert_fail@plt+0x5668>
   17004:	mov	sp, fp
   17008:	pop	{fp, pc}
   1700c:	bl	116cc <abort@plt>
   17010:	push	{fp, lr}
   17014:	mov	fp, sp
   17018:	sub	sp, sp, #48	; 0x30
   1701c:	vmov.i32	q8, #0	; 0x00000000
   17020:	mov	r3, sp
   17024:	mov	ip, #32
   17028:	cmp	r0, #10
   1702c:	add	lr, r3, #16
   17030:	vst1.64	{d16-d17}, [r3], ip
   17034:	vst1.64	{d16-d17}, [lr]
   17038:	vst1.64	{d16-d17}, [r3]
   1703c:	beq	17058 <__assert_fail@plt+0x5974>
   17040:	str	r0, [sp]
   17044:	mov	r3, sp
   17048:	mov	r0, #0
   1704c:	bl	16d4c <__assert_fail@plt+0x5668>
   17050:	mov	sp, fp
   17054:	pop	{fp, pc}
   17058:	bl	116cc <abort@plt>
   1705c:	push	{r4, sl, fp, lr}
   17060:	add	fp, sp, #8
   17064:	sub	sp, sp, #48	; 0x30
   17068:	mov	lr, r0
   1706c:	movw	r0, #49624	; 0xc1d8
   17070:	mov	ip, r1
   17074:	mov	r1, #32
   17078:	mov	r4, #1
   1707c:	movt	r0, #2
   17080:	add	r3, r0, #16
   17084:	vld1.64	{d16-d17}, [r0], r1
   17088:	vld1.64	{d20-d21}, [r0]
   1708c:	vld1.64	{d18-d19}, [r3]
   17090:	mov	r3, sp
   17094:	add	r0, r3, #32
   17098:	add	r1, r3, #16
   1709c:	vst1.64	{d20-d21}, [r0]
   170a0:	mov	r0, #28
   170a4:	vst1.64	{d18-d19}, [r1]
   170a8:	mov	r1, r3
   170ac:	and	r0, r0, r2, lsr #3
   170b0:	and	r2, r2, #31
   170b4:	vst1.64	{d16-d17}, [r1], r0
   170b8:	ldr	r0, [r1, #8]
   170bc:	bic	r4, r4, r0, lsr r2
   170c0:	eor	r0, r0, r4, lsl r2
   170c4:	mov	r2, ip
   170c8:	str	r0, [r1, #8]
   170cc:	mov	r0, #0
   170d0:	mov	r1, lr
   170d4:	bl	16d4c <__assert_fail@plt+0x5668>
   170d8:	sub	sp, fp, #8
   170dc:	pop	{r4, sl, fp, pc}
   170e0:	push	{fp, lr}
   170e4:	mov	fp, sp
   170e8:	sub	sp, sp, #48	; 0x30
   170ec:	mov	ip, r0
   170f0:	movw	r0, #49624	; 0xc1d8
   170f4:	mov	r2, #32
   170f8:	movt	r0, #2
   170fc:	add	r3, r0, #16
   17100:	vld1.64	{d16-d17}, [r0], r2
   17104:	vld1.64	{d20-d21}, [r0]
   17108:	vld1.64	{d18-d19}, [r3]
   1710c:	mov	r3, sp
   17110:	add	r0, r3, #32
   17114:	add	r2, r3, #16
   17118:	vst1.64	{d20-d21}, [r0]
   1711c:	mov	r0, #28
   17120:	vst1.64	{d18-d19}, [r2]
   17124:	mov	r2, r3
   17128:	and	r0, r0, r1, lsr #3
   1712c:	and	r1, r1, #31
   17130:	vst1.64	{d16-d17}, [r2], r0
   17134:	mov	r0, #1
   17138:	ldr	lr, [r2, #8]
   1713c:	bic	r0, r0, lr, lsr r1
   17140:	eor	r0, lr, r0, lsl r1
   17144:	mov	r1, ip
   17148:	str	r0, [r2, #8]
   1714c:	mov	r0, #0
   17150:	mvn	r2, #0
   17154:	bl	16d4c <__assert_fail@plt+0x5668>
   17158:	mov	sp, fp
   1715c:	pop	{fp, pc}
   17160:	push	{fp, lr}
   17164:	mov	fp, sp
   17168:	sub	sp, sp, #48	; 0x30
   1716c:	mov	r1, r0
   17170:	movw	r0, #49624	; 0xc1d8
   17174:	mov	r3, #32
   17178:	movt	r0, #2
   1717c:	add	r2, r0, #16
   17180:	vld1.64	{d16-d17}, [r0], r3
   17184:	mov	r3, sp
   17188:	vld1.64	{d18-d19}, [r2]
   1718c:	vld1.64	{d20-d21}, [r0]
   17190:	add	r2, r3, #16
   17194:	add	r0, r3, #32
   17198:	vst1.64	{d18-d19}, [r2]
   1719c:	vst1.64	{d20-d21}, [r0]
   171a0:	mov	r0, #12
   171a4:	mov	r2, r3
   171a8:	vst1.64	{d16-d17}, [r2], r0
   171ac:	ldr	r0, [r2]
   171b0:	orr	r0, r0, #67108864	; 0x4000000
   171b4:	str	r0, [r2]
   171b8:	mov	r0, #0
   171bc:	mvn	r2, #0
   171c0:	bl	16d4c <__assert_fail@plt+0x5668>
   171c4:	mov	sp, fp
   171c8:	pop	{fp, pc}
   171cc:	push	{fp, lr}
   171d0:	mov	fp, sp
   171d4:	sub	sp, sp, #48	; 0x30
   171d8:	mov	ip, r1
   171dc:	mov	r1, r0
   171e0:	movw	r0, #49624	; 0xc1d8
   171e4:	mov	r2, #32
   171e8:	movt	r0, #2
   171ec:	add	r3, r0, #16
   171f0:	vld1.64	{d16-d17}, [r0], r2
   171f4:	vld1.64	{d18-d19}, [r3]
   171f8:	vld1.64	{d20-d21}, [r0]
   171fc:	mov	r3, sp
   17200:	add	r2, r3, #16
   17204:	add	r0, r3, #32
   17208:	vst1.64	{d18-d19}, [r2]
   1720c:	vst1.64	{d20-d21}, [r0]
   17210:	mov	r0, #12
   17214:	mov	r2, r3
   17218:	vst1.64	{d16-d17}, [r2], r0
   1721c:	ldr	r0, [r2]
   17220:	orr	r0, r0, #67108864	; 0x4000000
   17224:	str	r0, [r2]
   17228:	mov	r0, #0
   1722c:	mov	r2, ip
   17230:	bl	16d4c <__assert_fail@plt+0x5668>
   17234:	mov	sp, fp
   17238:	pop	{fp, pc}
   1723c:	push	{r4, sl, fp, lr}
   17240:	add	fp, sp, #8
   17244:	sub	sp, sp, #96	; 0x60
   17248:	vmov.i32	q8, #0	; 0x00000000
   1724c:	mov	ip, r2
   17250:	mov	r2, sp
   17254:	mov	r4, #28
   17258:	cmp	r1, #10
   1725c:	mov	r3, r2
   17260:	add	lr, r2, #16
   17264:	vst1.64	{d16-d17}, [r3], r4
   17268:	vst1.64	{d16-d17}, [lr]
   1726c:	vst1.32	{d16-d17}, [r3]
   17270:	beq	172c0 <__assert_fail@plt+0x5bdc>
   17274:	vld1.64	{d16-d17}, [r2], r4
   17278:	vld1.64	{d18-d19}, [lr]
   1727c:	add	r3, sp, #48	; 0x30
   17280:	vld1.32	{d20-d21}, [r2]
   17284:	add	r2, r3, #20
   17288:	add	r4, r3, #4
   1728c:	vst1.32	{d18-d19}, [r2]
   17290:	add	r2, r3, #32
   17294:	vst1.32	{d16-d17}, [r4]
   17298:	vst1.32	{d20-d21}, [r2]
   1729c:	str	r1, [sp, #48]	; 0x30
   172a0:	mvn	r2, #0
   172a4:	ldr	r1, [sp, #60]	; 0x3c
   172a8:	orr	r1, r1, #67108864	; 0x4000000
   172ac:	str	r1, [sp, #60]	; 0x3c
   172b0:	mov	r1, ip
   172b4:	bl	16d4c <__assert_fail@plt+0x5668>
   172b8:	sub	sp, fp, #8
   172bc:	pop	{r4, sl, fp, pc}
   172c0:	bl	116cc <abort@plt>
   172c4:	push	{r4, r5, r6, sl, fp, lr}
   172c8:	add	fp, sp, #16
   172cc:	sub	sp, sp, #48	; 0x30
   172d0:	mov	ip, r3
   172d4:	movw	r3, #49624	; 0xc1d8
   172d8:	mov	r6, #32
   172dc:	cmp	r1, #0
   172e0:	mov	r4, sp
   172e4:	movt	r3, #2
   172e8:	cmpne	r2, #0
   172ec:	add	r5, r4, #16
   172f0:	add	lr, r3, #16
   172f4:	vld1.64	{d16-d17}, [r3], r6
   172f8:	vld1.64	{d18-d19}, [lr]
   172fc:	vld1.64	{d20-d21}, [r3]
   17300:	mov	r3, #10
   17304:	vst1.64	{d16-d17}, [r4], r6
   17308:	vst1.64	{d18-d19}, [r5]
   1730c:	vst1.64	{d20-d21}, [r4]
   17310:	str	r3, [sp]
   17314:	bne	1731c <__assert_fail@plt+0x5c38>
   17318:	bl	116cc <abort@plt>
   1731c:	str	r2, [sp, #44]	; 0x2c
   17320:	str	r1, [sp, #40]	; 0x28
   17324:	mov	r3, sp
   17328:	mov	r1, ip
   1732c:	mvn	r2, #0
   17330:	bl	16d4c <__assert_fail@plt+0x5668>
   17334:	sub	sp, fp, #16
   17338:	pop	{r4, r5, r6, sl, fp, pc}
   1733c:	push	{r4, r5, r6, sl, fp, lr}
   17340:	add	fp, sp, #16
   17344:	sub	sp, sp, #48	; 0x30
   17348:	mov	lr, r3
   1734c:	movw	r3, #49624	; 0xc1d8
   17350:	mov	r6, #32
   17354:	cmp	r1, #0
   17358:	mov	r4, sp
   1735c:	movt	r3, #2
   17360:	cmpne	r2, #0
   17364:	add	r5, r4, #16
   17368:	add	ip, r3, #16
   1736c:	vld1.64	{d16-d17}, [r3], r6
   17370:	vld1.64	{d18-d19}, [ip]
   17374:	vld1.64	{d20-d21}, [r3]
   17378:	mov	r3, #10
   1737c:	vst1.64	{d16-d17}, [r4], r6
   17380:	vst1.64	{d18-d19}, [r5]
   17384:	vst1.64	{d20-d21}, [r4]
   17388:	str	r3, [sp]
   1738c:	bne	17394 <__assert_fail@plt+0x5cb0>
   17390:	bl	116cc <abort@plt>
   17394:	ldr	ip, [fp, #8]
   17398:	str	r2, [sp, #44]	; 0x2c
   1739c:	str	r1, [sp, #40]	; 0x28
   173a0:	mov	r3, sp
   173a4:	mov	r1, lr
   173a8:	mov	r2, ip
   173ac:	bl	16d4c <__assert_fail@plt+0x5668>
   173b0:	sub	sp, fp, #16
   173b4:	pop	{r4, r5, r6, sl, fp, pc}
   173b8:	push	{r4, sl, fp, lr}
   173bc:	add	fp, sp, #8
   173c0:	sub	sp, sp, #48	; 0x30
   173c4:	movw	r3, #49624	; 0xc1d8
   173c8:	mov	lr, #32
   173cc:	mov	ip, r2
   173d0:	cmp	r0, #0
   173d4:	movt	r3, #2
   173d8:	cmpne	r1, #0
   173dc:	add	r2, r3, #16
   173e0:	vld1.64	{d16-d17}, [r3], lr
   173e4:	vld1.64	{d20-d21}, [r3]
   173e8:	vld1.64	{d18-d19}, [r2]
   173ec:	mov	r2, sp
   173f0:	add	r4, r2, #16
   173f4:	vst1.64	{d16-d17}, [r2], lr
   173f8:	vst1.64	{d20-d21}, [r2]
   173fc:	mov	r2, #10
   17400:	vst1.64	{d18-d19}, [r4]
   17404:	str	r2, [sp]
   17408:	bne	17410 <__assert_fail@plt+0x5d2c>
   1740c:	bl	116cc <abort@plt>
   17410:	str	r1, [sp, #44]	; 0x2c
   17414:	str	r0, [sp, #40]	; 0x28
   17418:	mov	r3, sp
   1741c:	mov	r0, #0
   17420:	mov	r1, ip
   17424:	mvn	r2, #0
   17428:	bl	16d4c <__assert_fail@plt+0x5668>
   1742c:	sub	sp, fp, #8
   17430:	pop	{r4, sl, fp, pc}
   17434:	push	{r4, r5, fp, lr}
   17438:	add	fp, sp, #8
   1743c:	sub	sp, sp, #48	; 0x30
   17440:	mov	ip, r3
   17444:	movw	r3, #49624	; 0xc1d8
   17448:	mov	r4, #32
   1744c:	mov	lr, r2
   17450:	cmp	r0, #0
   17454:	movt	r3, #2
   17458:	cmpne	r1, #0
   1745c:	add	r2, r3, #16
   17460:	vld1.64	{d16-d17}, [r3], r4
   17464:	vld1.64	{d20-d21}, [r3]
   17468:	vld1.64	{d18-d19}, [r2]
   1746c:	mov	r2, sp
   17470:	add	r5, r2, #16
   17474:	vst1.64	{d16-d17}, [r2], r4
   17478:	vst1.64	{d20-d21}, [r2]
   1747c:	mov	r2, #10
   17480:	vst1.64	{d18-d19}, [r5]
   17484:	str	r2, [sp]
   17488:	bne	17490 <__assert_fail@plt+0x5dac>
   1748c:	bl	116cc <abort@plt>
   17490:	str	r1, [sp, #44]	; 0x2c
   17494:	str	r0, [sp, #40]	; 0x28
   17498:	mov	r3, sp
   1749c:	mov	r0, #0
   174a0:	mov	r1, lr
   174a4:	mov	r2, ip
   174a8:	bl	16d4c <__assert_fail@plt+0x5668>
   174ac:	sub	sp, fp, #8
   174b0:	pop	{r4, r5, fp, pc}
   174b4:	movw	r3, #49504	; 0xc160
   174b8:	movt	r3, #2
   174bc:	b	16d4c <__assert_fail@plt+0x5668>
   174c0:	movw	r3, #49504	; 0xc160
   174c4:	mov	r2, r1
   174c8:	mov	r1, r0
   174cc:	mov	r0, #0
   174d0:	movt	r3, #2
   174d4:	b	16d4c <__assert_fail@plt+0x5668>
   174d8:	movw	r3, #49504	; 0xc160
   174dc:	mvn	r2, #0
   174e0:	movt	r3, #2
   174e4:	b	16d4c <__assert_fail@plt+0x5668>
   174e8:	movw	r3, #49504	; 0xc160
   174ec:	mov	r1, r0
   174f0:	mov	r0, #0
   174f4:	mvn	r2, #0
   174f8:	movt	r3, #2
   174fc:	b	16d4c <__assert_fail@plt+0x5668>
   17500:	push	{r4, sl, fp, lr}
   17504:	add	fp, sp, #8
   17508:	mov	r4, r0
   1750c:	mov	r0, #24
   17510:	bl	18934 <__assert_fail@plt+0x7250>
   17514:	vmov.i32	q8, #0	; 0x00000000
   17518:	mov	r1, r0
   1751c:	str	r4, [r1], #8
   17520:	vst1.64	{d16-d17}, [r1]
   17524:	pop	{r4, sl, fp, pc}
   17528:	push	{r4, sl, fp, lr}
   1752c:	add	fp, sp, #8
   17530:	bl	177a0 <__assert_fail@plt+0x60bc>
   17534:	cmp	r0, #0
   17538:	beq	1755c <__assert_fail@plt+0x5e78>
   1753c:	mov	r4, r0
   17540:	mov	r0, #24
   17544:	bl	18934 <__assert_fail@plt+0x7250>
   17548:	vmov.i32	q8, #0	; 0x00000000
   1754c:	mov	r1, r0
   17550:	str	r4, [r1], #8
   17554:	vst1.64	{d16-d17}, [r1]
   17558:	pop	{r4, sl, fp, pc}
   1755c:	mov	r0, #0
   17560:	pop	{r4, sl, fp, pc}
   17564:	ldr	r0, [r0]
   17568:	bx	lr
   1756c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17570:	add	fp, sp, #28
   17574:	sub	sp, sp, #60	; 0x3c
   17578:	ldr	r1, [r0]
   1757c:	ldr	r9, [r0, #12]
   17580:	ldr	r7, [r0, #20]
   17584:	mov	r5, r3
   17588:	mov	r6, r2
   1758c:	mov	sl, #255	; 0xff
   17590:	str	r1, [sp, #8]
   17594:	mov	r1, r0
   17598:	ldr	r8, [r0, #8]!
   1759c:	ldr	r4, [r1, #16]!
   175a0:	str	r0, [sp, #4]
   175a4:	adds	r0, r2, #1
   175a8:	str	r0, [sp, #24]
   175ac:	adc	r0, r3, #0
   175b0:	str	r1, [sp]
   175b4:	str	r0, [sp, #20]
   175b8:	subs	r0, r4, r6
   175bc:	sbcs	r0, r7, r5
   175c0:	bcs	17624 <__assert_fail@plt+0x5f40>
   175c4:	mov	r2, #0
   175c8:	mov	r0, r4
   175cc:	mov	r1, r7
   175d0:	lsl	r1, r1, #8
   175d4:	add	r2, r2, #1
   175d8:	orr	r1, r1, r0, lsr #24
   175dc:	orr	r0, sl, r0, lsl #8
   175e0:	subs	r3, r0, r6
   175e4:	sbcs	r3, r1, r5
   175e8:	bcc	175d0 <__assert_fail@plt+0x5eec>
   175ec:	ldr	r0, [sp, #8]
   175f0:	sub	r1, fp, #36	; 0x24
   175f4:	bl	1791c <__assert_fail@plt+0x6238>
   175f8:	sub	r0, fp, #36	; 0x24
   175fc:	lsl	r1, r9, #8
   17600:	orr	r9, r1, r8, lsr #24
   17604:	ldrb	r1, [r0], #1
   17608:	orr	r8, r1, r8, lsl #8
   1760c:	lsl	r1, r7, #8
   17610:	orr	r7, r1, r4, lsr #24
   17614:	orr	r4, sl, r4, lsl #8
   17618:	subs	r1, r4, r6
   1761c:	sbcs	r1, r7, r5
   17620:	bcc	175fc <__assert_fail@plt+0x5f18>
   17624:	eor	r0, r4, r6
   17628:	eor	r1, r7, r5
   1762c:	orrs	r0, r0, r1
   17630:	beq	17718 <__assert_fail@plt+0x6034>
   17634:	str	r4, [fp, #-40]	; 0xffffffd8
   17638:	ldr	r4, [sp, #24]
   1763c:	str	r7, [sp, #44]	; 0x2c
   17640:	ldr	r7, [sp, #20]
   17644:	mov	r0, r8
   17648:	mov	r1, r9
   1764c:	mov	r2, r4
   17650:	mov	r3, r7
   17654:	bl	1a694 <__assert_fail@plt+0x8fb0>
   17658:	umull	r2, r3, r0, r4
   1765c:	str	r0, [sp, #16]
   17660:	str	r1, [sp, #12]
   17664:	str	r8, [sp, #40]	; 0x28
   17668:	str	r9, [sp, #36]	; 0x24
   1766c:	mla	r0, r0, r7, r3
   17670:	mov	r3, r7
   17674:	mla	r1, r1, r4, r0
   17678:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1767c:	subs	r8, r8, r2
   17680:	sbc	r9, r9, r1
   17684:	subs	r2, r0, r6
   17688:	ldr	r0, [sp, #44]	; 0x2c
   1768c:	str	r2, [sp, #32]
   17690:	sbc	r1, r0, r5
   17694:	mov	r0, r2
   17698:	mov	r2, r4
   1769c:	str	r1, [sp, #28]
   176a0:	bl	1a694 <__assert_fail@plt+0x8fb0>
   176a4:	umull	r2, r3, r0, r4
   176a8:	mov	ip, r1
   176ac:	mla	r3, r0, r7, r3
   176b0:	mla	r3, r1, r4, r3
   176b4:	ldr	r1, [sp, #32]
   176b8:	subs	r2, r1, r2
   176bc:	ldr	r1, [sp, #28]
   176c0:	sbc	r3, r1, r3
   176c4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   176c8:	subs	r4, r2, #1
   176cc:	sbc	r7, r3, #0
   176d0:	subs	r2, r1, r2
   176d4:	ldr	r1, [sp, #44]	; 0x2c
   176d8:	sbc	r3, r1, r3
   176dc:	ldr	r1, [sp, #40]	; 0x28
   176e0:	subs	r2, r2, r1
   176e4:	ldr	r1, [sp, #36]	; 0x24
   176e8:	sbcs	r2, r3, r1
   176ec:	bcc	175b8 <__assert_fail@plt+0x5ed4>
   176f0:	ldr	r2, [sp, #4]
   176f4:	ldr	r3, [sp, #16]
   176f8:	ldr	r7, [sp, #12]
   176fc:	stm	r2, {r3, r7}
   17700:	ldr	r2, [sp]
   17704:	stm	r2, {r0, ip}
   17708:	mov	r0, r8
   1770c:	mov	r1, r9
   17710:	sub	sp, fp, #28
   17714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17718:	ldr	r0, [sp, #4]
   1771c:	vmov.i32	q8, #0	; 0x00000000
   17720:	vst1.64	{d16-d17}, [r0]
   17724:	mov	r0, r8
   17728:	mov	r1, r9
   1772c:	sub	sp, fp, #28
   17730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17734:	push	{r4, sl, fp, lr}
   17738:	add	fp, sp, #8
   1773c:	mov	r1, #24
   17740:	mvn	r2, #0
   17744:	mov	r4, r0
   17748:	bl	11618 <__explicit_bzero_chk@plt>
   1774c:	mov	r0, r4
   17750:	pop	{r4, sl, fp, lr}
   17754:	b	143e8 <__assert_fail@plt+0x2d04>
   17758:	push	{r4, r5, r6, r7, fp, lr}
   1775c:	add	fp, sp, #16
   17760:	mov	r4, r0
   17764:	ldr	r0, [r0]
   17768:	bl	17a7c <__assert_fail@plt+0x6398>
   1776c:	mov	r5, r0
   17770:	bl	11558 <__errno_location@plt>
   17774:	ldr	r7, [r0]
   17778:	mov	r6, r0
   1777c:	mov	r0, r4
   17780:	mov	r1, #24
   17784:	mvn	r2, #0
   17788:	bl	11618 <__explicit_bzero_chk@plt>
   1778c:	mov	r0, r4
   17790:	bl	143e8 <__assert_fail@plt+0x2d04>
   17794:	mov	r0, r5
   17798:	str	r7, [r6]
   1779c:	pop	{r4, r5, r6, r7, fp, pc}
   177a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   177a4:	add	fp, sp, #24
   177a8:	cmp	r1, #0
   177ac:	beq	1781c <__assert_fail@plt+0x6138>
   177b0:	mov	r5, r1
   177b4:	mov	r6, r0
   177b8:	cmp	r0, #0
   177bc:	beq	17844 <__assert_fail@plt+0x6160>
   177c0:	movw	r1, #47204	; 0xb864
   177c4:	mov	r0, r6
   177c8:	movt	r1, #1
   177cc:	bl	19eb8 <__assert_fail@plt+0x87d4>
   177d0:	cmp	r0, #0
   177d4:	beq	178f0 <__assert_fail@plt+0x620c>
   177d8:	mov	r7, r0
   177dc:	movw	r0, #2076	; 0x81c
   177e0:	bl	18934 <__assert_fail@plt+0x7250>
   177e4:	mov	r9, r0
   177e8:	movw	r0, #31420	; 0x7abc
   177ec:	cmp	r5, #2048	; 0x800
   177f0:	mov	r2, #0
   177f4:	movt	r0, #1
   177f8:	movcs	r5, #2048	; 0x800
   177fc:	str	r7, [r9]
   17800:	add	r1, r9, #12
   17804:	mov	r3, r5
   17808:	stmib	r9, {r0, r6}
   1780c:	mov	r0, r7
   17810:	bl	1157c <setvbuf@plt>
   17814:	mov	r0, r9
   17818:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1781c:	movw	r0, #2076	; 0x81c
   17820:	bl	18934 <__assert_fail@plt+0x7250>
   17824:	movw	r1, #31420	; 0x7abc
   17828:	mov	r9, r0
   1782c:	mov	r0, #0
   17830:	movt	r1, #1
   17834:	stm	r9, {r0, r1}
   17838:	str	r0, [r9, #8]
   1783c:	mov	r0, r9
   17840:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17844:	movw	r0, #2076	; 0x81c
   17848:	bl	18934 <__assert_fail@plt+0x7250>
   1784c:	cmp	r5, #1024	; 0x400
   17850:	mov	r9, r0
   17854:	movw	r1, #31420	; 0x7abc
   17858:	mov	r0, #0
   1785c:	movcs	r5, #1024	; 0x400
   17860:	add	r8, r9, #16
   17864:	movt	r1, #1
   17868:	stm	r9, {r0, r1}
   1786c:	str	r0, [r9, #8]
   17870:	str	r0, [r9, #12]
   17874:	cmp	r5, #1
   17878:	blt	178fc <__assert_fail@plt+0x6218>
   1787c:	add	r6, r8, r5
   17880:	mov	r5, r8
   17884:	b	17894 <__assert_fail@plt+0x61b0>
   17888:	add	r5, r5, r0
   1788c:	cmp	r5, r6
   17890:	bcs	178fc <__assert_fail@plt+0x6218>
   17894:	sub	r1, r6, r5
   17898:	mov	r0, r5
   1789c:	mov	r2, #0
   178a0:	bl	11678 <getrandom@plt>
   178a4:	cmp	r0, #0
   178a8:	bpl	17888 <__assert_fail@plt+0x61a4>
   178ac:	bl	11558 <__errno_location@plt>
   178b0:	ldr	r4, [r0]
   178b4:	cmp	r4, #4
   178b8:	beq	1788c <__assert_fail@plt+0x61a8>
   178bc:	ldr	r5, [r9]
   178c0:	mov	r7, r0
   178c4:	mov	r0, r9
   178c8:	movw	r1, #2076	; 0x81c
   178cc:	movw	r2, #2076	; 0x81c
   178d0:	bl	11618 <__explicit_bzero_chk@plt>
   178d4:	mov	r0, r9
   178d8:	bl	143e8 <__assert_fail@plt+0x2d04>
   178dc:	cmp	r5, #0
   178e0:	beq	178ec <__assert_fail@plt+0x6208>
   178e4:	mov	r0, r5
   178e8:	bl	19dc0 <__assert_fail@plt+0x86dc>
   178ec:	str	r4, [r7]
   178f0:	mov	r9, #0
   178f4:	mov	r0, r9
   178f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   178fc:	mov	r0, r8
   17900:	bl	17d70 <__assert_fail@plt+0x668c>
   17904:	mov	r0, r9
   17908:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1790c:	str	r1, [r0, #4]
   17910:	bx	lr
   17914:	str	r1, [r0, #8]
   17918:	bx	lr
   1791c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17920:	add	fp, sp, #28
   17924:	sub	sp, sp, #4
   17928:	ldr	r3, [r0]
   1792c:	mov	r6, r2
   17930:	mov	r5, r1
   17934:	mov	sl, r0
   17938:	cmp	r3, #0
   1793c:	beq	179b8 <__assert_fail@plt+0x62d4>
   17940:	mov	r0, r5
   17944:	mov	r1, #1
   17948:	mov	r2, r6
   1794c:	bl	1166c <fread_unlocked@plt>
   17950:	mov	r4, r0
   17954:	sub	r6, r6, r0
   17958:	bl	11558 <__errno_location@plt>
   1795c:	cmp	r6, #0
   17960:	beq	179b0 <__assert_fail@plt+0x62cc>
   17964:	mov	r7, r0
   17968:	ldr	r1, [sl]
   1796c:	ldr	r0, [r7]
   17970:	ldr	r1, [r1]
   17974:	lsl	r1, r1, #26
   17978:	and	r0, r0, r1, asr #31
   1797c:	str	r0, [r7]
   17980:	ldr	r1, [sl, #4]
   17984:	ldr	r0, [sl, #8]
   17988:	blx	r1
   1798c:	ldr	r3, [sl]
   17990:	add	r5, r5, r4
   17994:	mov	r1, #1
   17998:	mov	r2, r6
   1799c:	mov	r0, r5
   179a0:	bl	1166c <fread_unlocked@plt>
   179a4:	mov	r4, r0
   179a8:	subs	r6, r6, r0
   179ac:	bne	17968 <__assert_fail@plt+0x6284>
   179b0:	sub	sp, fp, #28
   179b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179b8:	ldr	r7, [sl, #12]
   179bc:	movw	r0, #1052	; 0x41c
   179c0:	add	r9, sl, r0
   179c4:	sub	r0, r9, r7
   179c8:	cmp	r7, r6
   179cc:	add	r1, r0, #1024	; 0x400
   179d0:	bcs	17a48 <__assert_fail@plt+0x6364>
   179d4:	add	r8, sl, #16
   179d8:	mov	r0, r5
   179dc:	mov	r2, r7
   179e0:	bl	113cc <memcpy@plt>
   179e4:	add	r5, r5, r7
   179e8:	sub	r6, r6, r7
   179ec:	tst	r5, #3
   179f0:	beq	17a2c <__assert_fail@plt+0x6348>
   179f4:	mov	r0, r8
   179f8:	mov	r1, r9
   179fc:	bl	17b2c <__assert_fail@plt+0x6448>
   17a00:	mov	r7, #1024	; 0x400
   17a04:	cmp	r6, #1024	; 0x400
   17a08:	mov	r1, r9
   17a0c:	bhi	179d8 <__assert_fail@plt+0x62f4>
   17a10:	b	17a4c <__assert_fail@plt+0x6368>
   17a14:	mov	r0, r8
   17a18:	mov	r1, r5
   17a1c:	bl	17b2c <__assert_fail@plt+0x6448>
   17a20:	subs	r6, r6, #1024	; 0x400
   17a24:	add	r5, r5, #1024	; 0x400
   17a28:	beq	17a6c <__assert_fail@plt+0x6388>
   17a2c:	cmp	r6, #1024	; 0x400
   17a30:	bcs	17a14 <__assert_fail@plt+0x6330>
   17a34:	mov	r0, r8
   17a38:	mov	r1, r9
   17a3c:	bl	17b2c <__assert_fail@plt+0x6448>
   17a40:	mov	r7, #1024	; 0x400
   17a44:	b	17a4c <__assert_fail@plt+0x6368>
   17a48:	mov	r9, r1
   17a4c:	mov	r0, r5
   17a50:	mov	r1, r9
   17a54:	mov	r2, r6
   17a58:	bl	113cc <memcpy@plt>
   17a5c:	sub	r0, r7, r6
   17a60:	str	r0, [sl, #12]
   17a64:	sub	sp, fp, #28
   17a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a6c:	mov	r0, #0
   17a70:	str	r0, [sl, #12]
   17a74:	sub	sp, fp, #28
   17a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a7c:	push	{r4, r5, fp, lr}
   17a80:	add	fp, sp, #8
   17a84:	ldr	r4, [r0]
   17a88:	movw	r1, #2076	; 0x81c
   17a8c:	mvn	r2, #0
   17a90:	mov	r5, r0
   17a94:	bl	11618 <__explicit_bzero_chk@plt>
   17a98:	mov	r0, r5
   17a9c:	bl	143e8 <__assert_fail@plt+0x2d04>
   17aa0:	cmp	r4, #0
   17aa4:	beq	17ab4 <__assert_fail@plt+0x63d0>
   17aa8:	mov	r0, r4
   17aac:	pop	{r4, r5, fp, lr}
   17ab0:	b	19dc0 <__assert_fail@plt+0x86dc>
   17ab4:	mov	r0, #0
   17ab8:	pop	{r4, r5, fp, pc}
   17abc:	push	{fp, lr}
   17ac0:	mov	fp, sp
   17ac4:	cmp	r0, #0
   17ac8:	beq	17b28 <__assert_fail@plt+0x6444>
   17acc:	mov	r4, r0
   17ad0:	movw	r0, #49496	; 0xc158
   17ad4:	movt	r0, #2
   17ad8:	ldr	r5, [r0]
   17adc:	bl	11558 <__errno_location@plt>
   17ae0:	ldr	r6, [r0]
   17ae4:	movw	r0, #47207	; 0xb867
   17ae8:	movw	r1, #47223	; 0xb877
   17aec:	mov	r2, #5
   17af0:	movt	r0, #1
   17af4:	movt	r1, #1
   17af8:	cmp	r6, #0
   17afc:	moveq	r1, r0
   17b00:	mov	r0, #0
   17b04:	bl	11408 <dcgettext@plt>
   17b08:	mov	r7, r0
   17b0c:	mov	r0, r4
   17b10:	bl	174e8 <__assert_fail@plt+0x5e04>
   17b14:	mov	r3, r0
   17b18:	mov	r0, r5
   17b1c:	mov	r1, r6
   17b20:	mov	r2, r7
   17b24:	bl	114b0 <error@plt>
   17b28:	bl	116cc <abort@plt>
   17b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b30:	add	fp, sp, #28
   17b34:	sub	sp, sp, #8
   17b38:	ldr	r7, [r0, #1032]	; 0x408
   17b3c:	ldr	r2, [r0, #1028]	; 0x404
   17b40:	ldr	r3, [r0, #1024]	; 0x400
   17b44:	add	ip, r0, #512	; 0x200
   17b48:	mov	r8, #0
   17b4c:	add	r7, r7, #1
   17b50:	add	r6, r7, r2
   17b54:	str	r7, [r0, #1032]	; 0x408
   17b58:	mov	r7, r0
   17b5c:	eor	r3, r3, r3, lsl #13
   17b60:	ldr	r4, [r7, r8]!
   17b64:	ldr	r2, [r7, #512]	; 0x200
   17b68:	and	r5, r4, #1020	; 0x3fc
   17b6c:	ldr	r5, [r0, r5]
   17b70:	add	r2, r3, r2
   17b74:	add	r3, r2, r6
   17b78:	eor	r2, r2, r2, lsr #6
   17b7c:	add	r3, r3, r5
   17b80:	str	r3, [r7]
   17b84:	ubfx	r3, r3, #10, #8
   17b88:	ldr	r3, [r0, r3, lsl #2]
   17b8c:	add	r3, r3, r4
   17b90:	mov	r4, r1
   17b94:	str	r3, [r4, r8]!
   17b98:	add	r8, r8, #16
   17b9c:	ldr	r5, [r7, #516]	; 0x204
   17ba0:	ldr	r6, [r7, #4]
   17ba4:	add	lr, r0, r8
   17ba8:	cmp	lr, ip
   17bac:	add	r2, r5, r2
   17bb0:	and	r5, r6, #1020	; 0x3fc
   17bb4:	ldr	r5, [r0, r5]
   17bb8:	add	r3, r2, r3
   17bbc:	eor	r2, r2, r2, lsl #2
   17bc0:	add	r3, r3, r5
   17bc4:	str	r3, [r7, #4]
   17bc8:	ubfx	r3, r3, #10, #8
   17bcc:	ldr	r3, [r0, r3, lsl #2]
   17bd0:	add	r3, r3, r6
   17bd4:	str	r3, [r4, #4]
   17bd8:	ldr	r5, [r7, #520]	; 0x208
   17bdc:	ldr	r6, [r7, #8]
   17be0:	add	r2, r5, r2
   17be4:	and	r5, r6, #1020	; 0x3fc
   17be8:	ldr	r5, [r0, r5]
   17bec:	add	r3, r2, r3
   17bf0:	eor	r2, r2, r2, lsr #16
   17bf4:	add	r3, r3, r5
   17bf8:	str	r3, [r7, #8]
   17bfc:	ubfx	r3, r3, #10, #8
   17c00:	ldr	r3, [r0, r3, lsl #2]
   17c04:	add	r6, r3, r6
   17c08:	str	r6, [r4, #8]
   17c0c:	ldr	r3, [r7, #524]	; 0x20c
   17c10:	ldr	r5, [r7, #12]
   17c14:	add	r3, r3, r2
   17c18:	add	r2, r3, r6
   17c1c:	and	r6, r5, #1020	; 0x3fc
   17c20:	ldr	r6, [r0, r6]
   17c24:	add	r2, r2, r6
   17c28:	str	r2, [r7, #12]
   17c2c:	ubfx	r2, r2, #10, #8
   17c30:	ldr	r2, [r0, r2, lsl #2]
   17c34:	add	r6, r2, r5
   17c38:	str	r6, [r4, #12]
   17c3c:	bcc	17b58 <__assert_fail@plt+0x6474>
   17c40:	add	r2, r1, r8
   17c44:	mov	r5, #0
   17c48:	str	r2, [sp, #4]
   17c4c:	add	r2, r0, #1024	; 0x400
   17c50:	str	r2, [sp]
   17c54:	ldr	r2, [lr, r5]
   17c58:	eor	r3, r3, r3, lsl #13
   17c5c:	and	r7, r2, #1020	; 0x3fc
   17c60:	ldr	sl, [r0, r7]
   17c64:	add	r7, lr, r5
   17c68:	ldr	r4, [r7, #-512]	; 0xfffffe00
   17c6c:	add	r3, r3, r4
   17c70:	add	r4, r3, r6
   17c74:	eor	r3, r3, r3, lsr #6
   17c78:	add	r4, r4, sl
   17c7c:	str	r4, [lr, r5]
   17c80:	ubfx	r4, r4, #10, #8
   17c84:	ldr	r6, [sp, #4]
   17c88:	ldr	r4, [r0, r4, lsl #2]
   17c8c:	add	r2, r4, r2
   17c90:	str	r2, [r6, r5]
   17c94:	ldr	r4, [r7, #-508]	; 0xfffffe04
   17c98:	add	r3, r4, r3
   17c9c:	add	r4, r0, r5
   17ca0:	add	r6, r4, r8
   17ca4:	add	sl, r3, r2
   17ca8:	ldr	r4, [r6, #4]
   17cac:	and	r2, r4, #1020	; 0x3fc
   17cb0:	ldr	r2, [r0, r2]
   17cb4:	add	r2, sl, r2
   17cb8:	eor	sl, r3, r3, lsl #2
   17cbc:	str	r2, [r6, #4]
   17cc0:	ubfx	r2, r2, #10, #8
   17cc4:	ldr	r2, [r0, r2, lsl #2]
   17cc8:	add	r2, r2, r4
   17ccc:	add	r4, r1, r5
   17cd0:	add	ip, r4, r8
   17cd4:	str	r2, [ip, #4]
   17cd8:	ldr	r3, [r7, #-504]	; 0xfffffe08
   17cdc:	add	r3, r3, sl
   17ce0:	add	sl, r3, r2
   17ce4:	ldr	r2, [r7, #8]
   17ce8:	eor	r3, r3, r3, lsr #16
   17cec:	and	r9, r2, #1020	; 0x3fc
   17cf0:	ldr	r4, [r0, r9]
   17cf4:	add	r4, sl, r4
   17cf8:	str	r4, [r7, #8]
   17cfc:	ubfx	r4, r4, #10, #8
   17d00:	ldr	r4, [r0, r4, lsl #2]
   17d04:	add	r2, r4, r2
   17d08:	str	r2, [ip, #8]
   17d0c:	mov	ip, r1
   17d10:	ldr	r4, [r7, #-500]	; 0xfffffe0c
   17d14:	add	r3, r4, r3
   17d18:	ldr	r4, [r6, #12]
   17d1c:	add	r2, r3, r2
   17d20:	and	r1, r4, #1020	; 0x3fc
   17d24:	ldr	r1, [r0, r1]
   17d28:	add	r1, r2, r1
   17d2c:	str	r1, [r6, #12]
   17d30:	ubfx	r1, r1, #10, #8
   17d34:	ldr	r2, [sp]
   17d38:	ldr	r1, [r0, r1, lsl #2]
   17d3c:	add	r6, r1, r4
   17d40:	ldr	r1, [sp, #4]
   17d44:	add	r1, r1, r5
   17d48:	add	r5, r5, #16
   17d4c:	str	r6, [r1, #12]
   17d50:	add	r1, r7, #16
   17d54:	cmp	r1, r2
   17d58:	mov	r1, ip
   17d5c:	bcc	17c54 <__assert_fail@plt+0x6570>
   17d60:	str	r3, [r0, #1024]	; 0x400
   17d64:	str	r6, [r0, #1028]	; 0x404
   17d68:	sub	sp, fp, #28
   17d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d74:	add	fp, sp, #28
   17d78:	sub	sp, sp, #28
   17d7c:	str	r0, [sp, #20]
   17d80:	add	r7, r0, #28
   17d84:	movw	r0, #19064	; 0x4a78
   17d88:	movw	r6, #57178	; 0xdf5a
   17d8c:	movw	r5, #89	; 0x59
   17d90:	movw	r1, #15947	; 0x3e4b
   17d94:	movw	sl, #6872	; 0x1ad8
   17d98:	movw	r8, #15433	; 0x3c49
   17d9c:	movw	lr, #37145	; 0x9119
   17da0:	mov	r9, #0
   17da4:	movt	r0, #55594	; 0xd92a
   17da8:	movt	r6, #4967	; 0x1367
   17dac:	movt	r5, #38361	; 0x95d9
   17db0:	movt	r1, #49942	; 0xc316
   17db4:	movt	sl, #3906	; 0xf42
   17db8:	movt	r8, #42266	; 0xa51a
   17dbc:	movt	lr, #12384	; 0x3060
   17dc0:	str	r0, [sp, #16]
   17dc4:	movw	r0, #59931	; 0xea1b
   17dc8:	movt	r0, #50415	; 0xc4ef
   17dcc:	ldr	r3, [r7, #-28]	; 0xffffffe4
   17dd0:	str	r0, [sp, #24]
   17dd4:	ldr	r0, [r7]
   17dd8:	str	lr, [sp, #4]
   17ddc:	add	r6, r3, r6
   17de0:	ldr	r3, [sp, #20]
   17de4:	str	r0, [sp, #12]
   17de8:	add	r3, r3, r9, lsl #2
   17dec:	add	r9, r9, #8
   17df0:	cmp	r9, #256	; 0x100
   17df4:	ldmib	r3, {r2, lr}
   17df8:	ldr	r0, [r3, #12]
   17dfc:	add	r4, lr, r1
   17e00:	ldr	ip, [r3, #16]
   17e04:	add	r5, r2, r5
   17e08:	eor	r6, r6, r5, lsl #11
   17e0c:	add	r2, r0, sl
   17e10:	add	r5, r4, r5
   17e14:	add	r2, r2, r6
   17e18:	str	r6, [sp, #8]
   17e1c:	add	r6, r2, r4
   17e20:	eor	r4, r5, r4, lsr #2
   17e24:	eor	r0, r6, r2, lsl #8
   17e28:	ldr	r6, [r3, #20]
   17e2c:	str	r4, [sp]
   17e30:	add	r1, r6, r8
   17e34:	ldr	r6, [sp, #16]
   17e38:	add	r1, r1, r0
   17e3c:	add	r5, ip, r6
   17e40:	add	r5, r5, r4
   17e44:	ldr	r4, [sp, #4]
   17e48:	add	r2, r5, r2
   17e4c:	add	r6, r1, r5
   17e50:	eor	sl, r2, r5, lsr #16
   17e54:	ldr	r5, [r3, #24]
   17e58:	ldr	r2, [sp, #24]
   17e5c:	eor	ip, r6, r1, lsl #10
   17e60:	ldr	r6, [sp, #12]
   17e64:	str	ip, [sp, #16]
   17e68:	add	r5, r5, r2
   17e6c:	add	r6, r6, r4
   17e70:	ldr	r2, [sp]
   17e74:	add	r5, r5, sl
   17e78:	add	r6, r6, ip
   17e7c:	add	r1, r5, r1
   17e80:	eor	r8, r1, r5, lsr #4
   17e84:	ldr	r1, [sp, #8]
   17e88:	add	r5, r6, r5
   17e8c:	add	r4, r8, r1
   17e90:	add	r1, r4, r6
   17e94:	eor	lr, r1, r4, lsr #9
   17e98:	add	r1, lr, r0
   17e9c:	eor	r0, r5, r6, lsl #8
   17ea0:	add	r5, r0, r2
   17ea4:	add	r6, r5, r4
   17ea8:	str	r6, [r7, #-28]	; 0xffffffe4
   17eac:	str	r5, [r3, #4]
   17eb0:	str	r1, [r3, #8]
   17eb4:	str	sl, [r3, #12]
   17eb8:	str	ip, [r3, #16]
   17ebc:	str	r8, [r3, #20]
   17ec0:	str	r0, [r3, #24]
   17ec4:	str	lr, [r7]
   17ec8:	add	r7, r7, #32
   17ecc:	bcc	17dcc <__assert_fail@plt+0x66e8>
   17ed0:	ldr	r3, [sp, #20]
   17ed4:	ldr	r9, [sp, #16]
   17ed8:	mov	r4, #0
   17edc:	add	r7, r3, #28
   17ee0:	str	r0, [sp, #24]
   17ee4:	ldr	r0, [r7]
   17ee8:	ldr	r3, [r7, #-28]	; 0xffffffe4
   17eec:	str	r0, [sp, #16]
   17ef0:	add	r0, r3, r6
   17ef4:	str	r0, [sp, #12]
   17ef8:	ldr	r0, [sp, #20]
   17efc:	add	r3, r0, r4, lsl #2
   17f00:	add	r4, r4, #8
   17f04:	cmp	r4, #256	; 0x100
   17f08:	ldr	r2, [r3, #16]
   17f0c:	ldmib	r3, {r6, ip}
   17f10:	ldr	r0, [r3, #12]
   17f14:	add	r1, ip, r1
   17f18:	add	r5, r6, r5
   17f1c:	str	r2, [sp, #8]
   17f20:	ldr	r2, [sp, #12]
   17f24:	add	r0, r0, sl
   17f28:	eor	r2, r2, r5, lsl #11
   17f2c:	add	r0, r0, r2
   17f30:	str	r2, [sp, #12]
   17f34:	add	r2, r0, r1
   17f38:	eor	ip, r2, r0, lsl #8
   17f3c:	ldr	r2, [r3, #20]
   17f40:	add	r2, r2, r8
   17f44:	add	r6, r2, ip
   17f48:	add	r2, r1, r5
   17f4c:	eor	r5, r2, r1, lsr #2
   17f50:	ldr	r1, [sp, #8]
   17f54:	add	r1, r1, r9
   17f58:	add	r1, r1, r5
   17f5c:	add	r0, r1, r0
   17f60:	add	r2, r6, r1
   17f64:	eor	sl, r0, r1, lsr #16
   17f68:	ldr	r0, [r3, #24]
   17f6c:	ldr	r1, [sp, #24]
   17f70:	eor	r9, r2, r6, lsl #10
   17f74:	ldr	r2, [sp, #16]
   17f78:	add	r0, r0, r1
   17f7c:	add	r2, r2, lr
   17f80:	add	r0, r0, sl
   17f84:	add	lr, r2, r9
   17f88:	add	r1, r0, r6
   17f8c:	eor	r8, r1, r0, lsr #4
   17f90:	ldr	r1, [sp, #12]
   17f94:	add	r0, lr, r0
   17f98:	eor	r0, r0, lr, lsl #8
   17f9c:	add	r5, r0, r5
   17fa0:	add	r6, r8, r1
   17fa4:	add	r1, r6, lr
   17fa8:	eor	r1, r1, r6, lsr #9
   17fac:	add	r6, r5, r6
   17fb0:	str	r6, [r7, #-28]	; 0xffffffe4
   17fb4:	str	r5, [r3, #4]
   17fb8:	add	r2, r1, ip
   17fbc:	mov	lr, r1
   17fc0:	str	r2, [r3, #8]
   17fc4:	str	sl, [r3, #12]
   17fc8:	str	r9, [r3, #16]
   17fcc:	str	r8, [r3, #20]
   17fd0:	str	r0, [r3, #24]
   17fd4:	str	lr, [r7]
   17fd8:	mov	r1, r2
   17fdc:	add	r7, r7, #32
   17fe0:	bcc	17ee0 <__assert_fail@plt+0x67fc>
   17fe4:	ldr	r0, [sp, #20]
   17fe8:	mov	r1, #0
   17fec:	str	r1, [r0, #1024]	; 0x400
   17ff0:	str	r1, [r0, #1028]	; 0x404
   17ff4:	str	r1, [r0, #1032]	; 0x408
   17ff8:	sub	sp, fp, #28
   17ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18004:	add	fp, sp, #28
   18008:	sub	sp, sp, #220	; 0xdc
   1800c:	ldr	r7, [fp, #8]
   18010:	mov	r4, r3
   18014:	mov	r9, r2
   18018:	mov	r6, r1
   1801c:	mov	sl, r0
   18020:	str	r7, [sp]
   18024:	bl	11594 <renameat2@plt>
   18028:	mov	r5, r0
   1802c:	bl	11558 <__errno_location@plt>
   18030:	cmn	r5, #1
   18034:	bgt	18100 <__assert_fail@plt+0x6a1c>
   18038:	mov	r8, r0
   1803c:	ldr	r0, [r0]
   18040:	cmp	r0, #22
   18044:	cmpne	r0, #95	; 0x5f
   18048:	bne	180a0 <__assert_fail@plt+0x69bc>
   1804c:	cmp	r7, #0
   18050:	beq	180ac <__assert_fail@plt+0x69c8>
   18054:	cmp	r7, #1
   18058:	bne	180f4 <__assert_fail@plt+0x6a10>
   1805c:	mov	r0, #256	; 0x100
   18060:	add	r3, sp, #8
   18064:	mov	r1, r9
   18068:	mov	r2, r4
   1806c:	str	r0, [sp]
   18070:	mov	r0, #3
   18074:	bl	11438 <__fxstatat64@plt>
   18078:	cmp	r0, #0
   1807c:	beq	18098 <__assert_fail@plt+0x69b4>
   18080:	ldr	r0, [r8]
   18084:	cmp	r0, #2
   18088:	beq	18180 <__assert_fail@plt+0x6a9c>
   1808c:	mvn	r5, #0
   18090:	cmp	r0, #75	; 0x4b
   18094:	bne	18100 <__assert_fail@plt+0x6a1c>
   18098:	mov	r0, #17
   1809c:	b	180f8 <__assert_fail@plt+0x6a14>
   180a0:	cmp	r0, #38	; 0x26
   180a4:	beq	1804c <__assert_fail@plt+0x6968>
   180a8:	b	18100 <__assert_fail@plt+0x6a1c>
   180ac:	mov	r7, #0
   180b0:	mov	r0, r6
   180b4:	bl	11534 <strlen@plt>
   180b8:	mov	r5, r0
   180bc:	mov	r0, r4
   180c0:	bl	11534 <strlen@plt>
   180c4:	cmp	r5, #0
   180c8:	cmpne	r0, #0
   180cc:	bne	1810c <__assert_fail@plt+0x6a28>
   180d0:	mov	r0, sl
   180d4:	mov	r1, r6
   180d8:	mov	r2, r9
   180dc:	mov	r3, r4
   180e0:	bl	11654 <renameat@plt>
   180e4:	mov	r5, r0
   180e8:	mov	r0, r5
   180ec:	sub	sp, fp, #28
   180f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180f4:	mov	r0, #95	; 0x5f
   180f8:	str	r0, [r8]
   180fc:	mvn	r5, #0
   18100:	mov	r0, r5
   18104:	sub	sp, fp, #28
   18108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1810c:	add	r1, r5, r6
   18110:	ldrb	r1, [r1, #-1]
   18114:	cmp	r1, #47	; 0x2f
   18118:	beq	1812c <__assert_fail@plt+0x6a48>
   1811c:	add	r0, r0, r4
   18120:	ldrb	r0, [r0, #-1]
   18124:	cmp	r0, #47	; 0x2f
   18128:	bne	180d0 <__assert_fail@plt+0x69ec>
   1812c:	mov	r0, #256	; 0x100
   18130:	add	r3, sp, #112	; 0x70
   18134:	mov	r1, sl
   18138:	mov	r2, r6
   1813c:	str	r0, [sp]
   18140:	mov	r0, #3
   18144:	bl	11438 <__fxstatat64@plt>
   18148:	mvn	r5, #0
   1814c:	cmp	r0, #0
   18150:	bne	18100 <__assert_fail@plt+0x6a1c>
   18154:	cmp	r7, #0
   18158:	beq	18188 <__assert_fail@plt+0x6aa4>
   1815c:	ldr	r0, [sp, #128]	; 0x80
   18160:	and	r0, r0, #61440	; 0xf000
   18164:	cmp	r0, #16384	; 0x4000
   18168:	beq	180d0 <__assert_fail@plt+0x69ec>
   1816c:	mov	r0, #2
   18170:	str	r0, [r8]
   18174:	mov	r0, r5
   18178:	sub	sp, fp, #28
   1817c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18180:	mov	r7, #1
   18184:	b	180b0 <__assert_fail@plt+0x69cc>
   18188:	mov	r0, #256	; 0x100
   1818c:	add	r3, sp, #8
   18190:	mov	r1, r9
   18194:	mov	r2, r4
   18198:	str	r0, [sp]
   1819c:	mov	r0, #3
   181a0:	bl	11438 <__fxstatat64@plt>
   181a4:	cmp	r0, #0
   181a8:	beq	181cc <__assert_fail@plt+0x6ae8>
   181ac:	ldr	r0, [r8]
   181b0:	cmp	r0, #2
   181b4:	bne	18100 <__assert_fail@plt+0x6a1c>
   181b8:	ldr	r0, [sp, #128]	; 0x80
   181bc:	and	r0, r0, #61440	; 0xf000
   181c0:	cmp	r0, #16384	; 0x4000
   181c4:	beq	180d0 <__assert_fail@plt+0x69ec>
   181c8:	b	18100 <__assert_fail@plt+0x6a1c>
   181cc:	ldr	r0, [sp, #24]
   181d0:	and	r0, r0, #61440	; 0xf000
   181d4:	cmp	r0, #16384	; 0x4000
   181d8:	bne	18200 <__assert_fail@plt+0x6b1c>
   181dc:	ldr	r0, [sp, #128]	; 0x80
   181e0:	and	r0, r0, #61440	; 0xf000
   181e4:	cmp	r0, #16384	; 0x4000
   181e8:	beq	180d0 <__assert_fail@plt+0x69ec>
   181ec:	mov	r0, #21
   181f0:	str	r0, [r8]
   181f4:	mov	r0, r5
   181f8:	sub	sp, fp, #28
   181fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18200:	mov	r0, #20
   18204:	str	r0, [r8]
   18208:	mov	r0, r5
   1820c:	sub	sp, fp, #28
   18210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18214:	push	{r4, r5, r6, r7, fp, lr}
   18218:	add	fp, sp, #16
   1821c:	mov	r4, r0
   18220:	cmp	r0, #2
   18224:	bhi	18254 <__assert_fail@plt+0x6b70>
   18228:	mov	r0, r4
   1822c:	bl	1a0e8 <__assert_fail@plt+0x8a04>
   18230:	mov	r5, r0
   18234:	bl	11558 <__errno_location@plt>
   18238:	ldr	r7, [r0]
   1823c:	mov	r6, r0
   18240:	mov	r0, r4
   18244:	bl	116d8 <close@plt>
   18248:	mov	r0, r5
   1824c:	str	r7, [r6]
   18250:	pop	{r4, r5, r6, r7, fp, pc}
   18254:	mov	r0, r4
   18258:	pop	{r4, r5, r6, r7, fp, pc}
   1825c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18260:	add	fp, sp, #24
   18264:	sub	sp, sp, #32
   18268:	ldr	r6, [fp, #12]
   1826c:	ldr	r7, [fp, #8]
   18270:	mov	r4, r2
   18274:	mov	r8, r0
   18278:	cmp	r1, #0
   1827c:	beq	182a4 <__assert_fail@plt+0x6bc0>
   18280:	movw	r2, #47238	; 0xb886
   18284:	mov	r5, r1
   18288:	str	r3, [sp, #4]
   1828c:	str	r4, [sp]
   18290:	mov	r0, r8
   18294:	mov	r1, #1
   18298:	movt	r2, #1
   1829c:	mov	r3, r5
   182a0:	b	182bc <__assert_fail@plt+0x6bd8>
   182a4:	movw	r2, #47250	; 0xb892
   182a8:	str	r3, [sp]
   182ac:	mov	r0, r8
   182b0:	mov	r1, #1
   182b4:	mov	r3, r4
   182b8:	movt	r2, #1
   182bc:	bl	115c4 <__fprintf_chk@plt>
   182c0:	movw	r1, #47257	; 0xb899
   182c4:	mov	r0, #0
   182c8:	mov	r2, #5
   182cc:	movt	r1, #1
   182d0:	bl	11408 <dcgettext@plt>
   182d4:	movw	r2, #47975	; 0xbb67
   182d8:	mov	r3, r0
   182dc:	movw	r0, #2022	; 0x7e6
   182e0:	mov	r1, #1
   182e4:	movt	r2, #1
   182e8:	str	r0, [sp]
   182ec:	mov	r0, r8
   182f0:	bl	115c4 <__fprintf_chk@plt>
   182f4:	movw	r4, #44670	; 0xae7e
   182f8:	mov	r1, r8
   182fc:	movt	r4, #1
   18300:	mov	r0, r4
   18304:	bl	1136c <fputs_unlocked@plt>
   18308:	movw	r1, #47261	; 0xb89d
   1830c:	mov	r0, #0
   18310:	mov	r2, #5
   18314:	movt	r1, #1
   18318:	bl	11408 <dcgettext@plt>
   1831c:	movw	r3, #47432	; 0xb948
   18320:	mov	r2, r0
   18324:	mov	r0, r8
   18328:	mov	r1, #1
   1832c:	movt	r3, #1
   18330:	bl	115c4 <__fprintf_chk@plt>
   18334:	mov	r0, r4
   18338:	mov	r1, r8
   1833c:	bl	1136c <fputs_unlocked@plt>
   18340:	cmp	r6, #9
   18344:	bhi	18380 <__assert_fail@plt+0x6c9c>
   18348:	add	r0, pc, #0
   1834c:	ldr	pc, [r0, r6, lsl #2]
   18350:	andeq	r8, r1, r8, ror r3
   18354:	andeq	r8, r1, ip, lsl #7
   18358:			; <UNDEFINED> instruction: 0x000183bc
   1835c:	andeq	r8, r1, r4, ror #7
   18360:	andeq	r8, r1, ip, lsl #8
   18364:	andeq	r8, r1, r4, lsr r4
   18368:	andeq	r8, r1, ip, asr r4
   1836c:	muleq	r1, r4, r4
   18370:	andeq	r8, r1, ip, lsr r5
   18374:	andeq	r8, r1, r4, ror #9
   18378:	sub	sp, fp, #24
   1837c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18380:	movw	r1, #47785	; 0xbaa9
   18384:	movt	r1, #1
   18388:	b	184ec <__assert_fail@plt+0x6e08>
   1838c:	movw	r1, #47466	; 0xb96a
   18390:	mov	r0, #0
   18394:	mov	r2, #5
   18398:	movt	r1, #1
   1839c:	bl	11408 <dcgettext@plt>
   183a0:	ldr	r3, [r7]
   183a4:	mov	r2, r0
   183a8:	mov	r0, r8
   183ac:	mov	r1, #1
   183b0:	sub	sp, fp, #24
   183b4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   183b8:	b	115c4 <__fprintf_chk@plt>
   183bc:	movw	r1, #47482	; 0xb97a
   183c0:	mov	r0, #0
   183c4:	mov	r2, #5
   183c8:	movt	r1, #1
   183cc:	bl	11408 <dcgettext@plt>
   183d0:	mov	r2, r0
   183d4:	ldr	r3, [r7]
   183d8:	ldr	r0, [r7, #4]
   183dc:	str	r0, [sp]
   183e0:	b	184d0 <__assert_fail@plt+0x6dec>
   183e4:	movw	r1, #47505	; 0xb991
   183e8:	mov	r0, #0
   183ec:	mov	r2, #5
   183f0:	movt	r1, #1
   183f4:	bl	11408 <dcgettext@plt>
   183f8:	mov	r2, r0
   183fc:	ldr	r3, [r7]
   18400:	ldmib	r7, {r0, r1}
   18404:	stm	sp, {r0, r1}
   18408:	b	184d0 <__assert_fail@plt+0x6dec>
   1840c:	movw	r1, #47533	; 0xb9ad
   18410:	mov	r0, #0
   18414:	mov	r2, #5
   18418:	movt	r1, #1
   1841c:	bl	11408 <dcgettext@plt>
   18420:	ldr	r3, [r7]
   18424:	mov	r2, r0
   18428:	ldmib	r7, {r0, r1, r7}
   1842c:	stm	sp, {r0, r1, r7}
   18430:	b	184d0 <__assert_fail@plt+0x6dec>
   18434:	movw	r1, #47565	; 0xb9cd
   18438:	mov	r0, #0
   1843c:	mov	r2, #5
   18440:	movt	r1, #1
   18444:	bl	11408 <dcgettext@plt>
   18448:	ldr	r3, [r7]
   1844c:	mov	r2, r0
   18450:	ldmib	r7, {r0, r1, r6, r7}
   18454:	stm	sp, {r0, r1, r6, r7}
   18458:	b	184d0 <__assert_fail@plt+0x6dec>
   1845c:	movw	r1, #47601	; 0xb9f1
   18460:	mov	r0, #0
   18464:	mov	r2, #5
   18468:	movt	r1, #1
   1846c:	bl	11408 <dcgettext@plt>
   18470:	mov	r2, r0
   18474:	ldr	r3, [r7]
   18478:	ldmib	r7, {r0, r1, r6}
   1847c:	ldr	r5, [r7, #16]
   18480:	ldr	r7, [r7, #20]
   18484:	stm	sp, {r0, r1, r6}
   18488:	str	r5, [sp, #12]
   1848c:	str	r7, [sp, #16]
   18490:	b	184d0 <__assert_fail@plt+0x6dec>
   18494:	movw	r1, #47641	; 0xba19
   18498:	mov	r0, #0
   1849c:	mov	r2, #5
   184a0:	movt	r1, #1
   184a4:	bl	11408 <dcgettext@plt>
   184a8:	mov	r2, r0
   184ac:	ldr	r3, [r7]
   184b0:	ldmib	r7, {r0, r1, r6}
   184b4:	ldr	r5, [r7, #16]
   184b8:	ldr	r4, [r7, #20]
   184bc:	ldr	r7, [r7, #24]
   184c0:	stm	sp, {r0, r1, r6}
   184c4:	str	r5, [sp, #12]
   184c8:	str	r4, [sp, #16]
   184cc:	str	r7, [sp, #20]
   184d0:	mov	r0, r8
   184d4:	mov	r1, #1
   184d8:	bl	115c4 <__fprintf_chk@plt>
   184dc:	sub	sp, fp, #24
   184e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   184e4:	movw	r1, #47733	; 0xba75
   184e8:	movt	r1, #1
   184ec:	mov	r0, #0
   184f0:	mov	r2, #5
   184f4:	bl	11408 <dcgettext@plt>
   184f8:	mov	ip, r0
   184fc:	ldr	r3, [r7]
   18500:	ldr	r0, [r7, #4]
   18504:	ldr	r1, [r7, #8]
   18508:	ldr	r6, [r7, #12]
   1850c:	ldr	r5, [r7, #16]
   18510:	ldr	r4, [r7, #20]
   18514:	ldr	r2, [r7, #24]
   18518:	ldr	lr, [r7, #28]
   1851c:	ldr	r7, [r7, #32]
   18520:	stm	sp, {r0, r1, r6}
   18524:	str	r5, [sp, #12]
   18528:	str	r4, [sp, #16]
   1852c:	str	r2, [sp, #20]
   18530:	str	lr, [sp, #24]
   18534:	str	r7, [sp, #28]
   18538:	b	18580 <__assert_fail@plt+0x6e9c>
   1853c:	movw	r1, #47685	; 0xba45
   18540:	mov	r0, #0
   18544:	mov	r2, #5
   18548:	movt	r1, #1
   1854c:	bl	11408 <dcgettext@plt>
   18550:	mov	ip, r0
   18554:	ldr	r3, [r7]
   18558:	ldmib	r7, {r0, r1, r6}
   1855c:	ldr	r5, [r7, #16]
   18560:	ldr	r4, [r7, #20]
   18564:	ldr	r2, [r7, #24]
   18568:	ldr	r7, [r7, #28]
   1856c:	stm	sp, {r0, r1, r6}
   18570:	str	r5, [sp, #12]
   18574:	str	r4, [sp, #16]
   18578:	str	r2, [sp, #20]
   1857c:	str	r7, [sp, #24]
   18580:	mov	r0, r8
   18584:	mov	r1, #1
   18588:	mov	r2, ip
   1858c:	bl	115c4 <__fprintf_chk@plt>
   18590:	sub	sp, fp, #24
   18594:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18598:	push	{r4, sl, fp, lr}
   1859c:	add	fp, sp, #8
   185a0:	sub	sp, sp, #8
   185a4:	ldr	ip, [fp, #8]
   185a8:	mov	lr, #0
   185ac:	ldr	r4, [ip, lr, lsl #2]
   185b0:	add	lr, lr, #1
   185b4:	cmp	r4, #0
   185b8:	bne	185ac <__assert_fail@plt+0x6ec8>
   185bc:	sub	r4, lr, #1
   185c0:	str	ip, [sp]
   185c4:	str	r4, [sp, #4]
   185c8:	bl	1825c <__assert_fail@plt+0x6b78>
   185cc:	sub	sp, fp, #8
   185d0:	pop	{r4, sl, fp, pc}
   185d4:	push	{fp, lr}
   185d8:	mov	fp, sp
   185dc:	sub	sp, sp, #48	; 0x30
   185e0:	ldr	ip, [fp, #8]
   185e4:	ldr	lr, [ip]
   185e8:	cmp	lr, #0
   185ec:	str	lr, [sp, #8]
   185f0:	beq	1868c <__assert_fail@plt+0x6fa8>
   185f4:	ldr	lr, [ip, #4]
   185f8:	cmp	lr, #0
   185fc:	str	lr, [sp, #12]
   18600:	beq	18694 <__assert_fail@plt+0x6fb0>
   18604:	ldr	lr, [ip, #8]
   18608:	cmp	lr, #0
   1860c:	str	lr, [sp, #16]
   18610:	beq	1869c <__assert_fail@plt+0x6fb8>
   18614:	ldr	lr, [ip, #12]
   18618:	cmp	lr, #0
   1861c:	str	lr, [sp, #20]
   18620:	beq	186a4 <__assert_fail@plt+0x6fc0>
   18624:	ldr	lr, [ip, #16]
   18628:	cmp	lr, #0
   1862c:	str	lr, [sp, #24]
   18630:	beq	186ac <__assert_fail@plt+0x6fc8>
   18634:	ldr	lr, [ip, #20]
   18638:	cmp	lr, #0
   1863c:	str	lr, [sp, #28]
   18640:	beq	186b4 <__assert_fail@plt+0x6fd0>
   18644:	ldr	lr, [ip, #24]
   18648:	cmp	lr, #0
   1864c:	str	lr, [sp, #32]
   18650:	beq	186bc <__assert_fail@plt+0x6fd8>
   18654:	ldr	lr, [ip, #28]
   18658:	cmp	lr, #0
   1865c:	str	lr, [sp, #36]	; 0x24
   18660:	beq	186c4 <__assert_fail@plt+0x6fe0>
   18664:	ldr	lr, [ip, #32]
   18668:	cmp	lr, #0
   1866c:	str	lr, [sp, #40]	; 0x28
   18670:	beq	186cc <__assert_fail@plt+0x6fe8>
   18674:	ldr	lr, [ip, #36]	; 0x24
   18678:	mov	ip, #10
   1867c:	cmp	lr, #0
   18680:	str	lr, [sp, #44]	; 0x2c
   18684:	movweq	ip, #9
   18688:	b	186d0 <__assert_fail@plt+0x6fec>
   1868c:	mov	ip, #0
   18690:	b	186d0 <__assert_fail@plt+0x6fec>
   18694:	mov	ip, #1
   18698:	b	186d0 <__assert_fail@plt+0x6fec>
   1869c:	mov	ip, #2
   186a0:	b	186d0 <__assert_fail@plt+0x6fec>
   186a4:	mov	ip, #3
   186a8:	b	186d0 <__assert_fail@plt+0x6fec>
   186ac:	mov	ip, #4
   186b0:	b	186d0 <__assert_fail@plt+0x6fec>
   186b4:	mov	ip, #5
   186b8:	b	186d0 <__assert_fail@plt+0x6fec>
   186bc:	mov	ip, #6
   186c0:	b	186d0 <__assert_fail@plt+0x6fec>
   186c4:	mov	ip, #7
   186c8:	b	186d0 <__assert_fail@plt+0x6fec>
   186cc:	mov	ip, #8
   186d0:	add	lr, sp, #8
   186d4:	str	ip, [sp, #4]
   186d8:	str	lr, [sp]
   186dc:	bl	1825c <__assert_fail@plt+0x6b78>
   186e0:	mov	sp, fp
   186e4:	pop	{fp, pc}
   186e8:	push	{fp, lr}
   186ec:	mov	fp, sp
   186f0:	sub	sp, sp, #56	; 0x38
   186f4:	add	ip, fp, #8
   186f8:	str	ip, [sp, #12]
   186fc:	ldr	lr, [fp, #8]
   18700:	cmp	lr, #0
   18704:	str	lr, [sp, #16]
   18708:	beq	187a4 <__assert_fail@plt+0x70c0>
   1870c:	ldr	lr, [ip, #4]
   18710:	cmp	lr, #0
   18714:	str	lr, [sp, #20]
   18718:	beq	187ac <__assert_fail@plt+0x70c8>
   1871c:	ldr	lr, [ip, #8]
   18720:	cmp	lr, #0
   18724:	str	lr, [sp, #24]
   18728:	beq	187b4 <__assert_fail@plt+0x70d0>
   1872c:	ldr	lr, [ip, #12]
   18730:	cmp	lr, #0
   18734:	str	lr, [sp, #28]
   18738:	beq	187bc <__assert_fail@plt+0x70d8>
   1873c:	ldr	lr, [ip, #16]
   18740:	cmp	lr, #0
   18744:	str	lr, [sp, #32]
   18748:	beq	187c4 <__assert_fail@plt+0x70e0>
   1874c:	ldr	lr, [ip, #20]
   18750:	cmp	lr, #0
   18754:	str	lr, [sp, #36]	; 0x24
   18758:	beq	187cc <__assert_fail@plt+0x70e8>
   1875c:	ldr	lr, [ip, #24]
   18760:	cmp	lr, #0
   18764:	str	lr, [sp, #40]	; 0x28
   18768:	beq	187d4 <__assert_fail@plt+0x70f0>
   1876c:	ldr	lr, [ip, #28]
   18770:	cmp	lr, #0
   18774:	str	lr, [sp, #44]	; 0x2c
   18778:	beq	187dc <__assert_fail@plt+0x70f8>
   1877c:	ldr	lr, [ip, #32]
   18780:	cmp	lr, #0
   18784:	str	lr, [sp, #48]	; 0x30
   18788:	beq	187e4 <__assert_fail@plt+0x7100>
   1878c:	ldr	lr, [ip, #36]	; 0x24
   18790:	mov	ip, #10
   18794:	cmp	lr, #0
   18798:	str	lr, [sp, #52]	; 0x34
   1879c:	movweq	ip, #9
   187a0:	b	187e8 <__assert_fail@plt+0x7104>
   187a4:	mov	ip, #0
   187a8:	b	187e8 <__assert_fail@plt+0x7104>
   187ac:	mov	ip, #1
   187b0:	b	187e8 <__assert_fail@plt+0x7104>
   187b4:	mov	ip, #2
   187b8:	b	187e8 <__assert_fail@plt+0x7104>
   187bc:	mov	ip, #3
   187c0:	b	187e8 <__assert_fail@plt+0x7104>
   187c4:	mov	ip, #4
   187c8:	b	187e8 <__assert_fail@plt+0x7104>
   187cc:	mov	ip, #5
   187d0:	b	187e8 <__assert_fail@plt+0x7104>
   187d4:	mov	ip, #6
   187d8:	b	187e8 <__assert_fail@plt+0x7104>
   187dc:	mov	ip, #7
   187e0:	b	187e8 <__assert_fail@plt+0x7104>
   187e4:	mov	ip, #8
   187e8:	add	lr, sp, #16
   187ec:	str	ip, [sp, #4]
   187f0:	str	lr, [sp]
   187f4:	bl	1825c <__assert_fail@plt+0x6b78>
   187f8:	mov	sp, fp
   187fc:	pop	{fp, pc}
   18800:	push	{fp, lr}
   18804:	mov	fp, sp
   18808:	movw	r0, #49588	; 0xc1b4
   1880c:	movt	r0, #2
   18810:	ldr	r1, [r0]
   18814:	movw	r0, #44670	; 0xae7e
   18818:	movt	r0, #1
   1881c:	bl	1136c <fputs_unlocked@plt>
   18820:	movw	r1, #47845	; 0xbae5
   18824:	mov	r0, #0
   18828:	mov	r2, #5
   1882c:	movt	r1, #1
   18830:	bl	11408 <dcgettext@plt>
   18834:	movw	r2, #47865	; 0xbaf9
   18838:	mov	r1, r0
   1883c:	mov	r0, #1
   18840:	movt	r2, #1
   18844:	bl	115a0 <__printf_chk@plt>
   18848:	movw	r1, #47887	; 0xbb0f
   1884c:	mov	r0, #0
   18850:	mov	r2, #5
   18854:	movt	r1, #1
   18858:	bl	11408 <dcgettext@plt>
   1885c:	movw	r2, #45100	; 0xb02c
   18860:	movw	r3, #45350	; 0xb126
   18864:	mov	r1, r0
   18868:	mov	r0, #1
   1886c:	movt	r2, #1
   18870:	movt	r3, #1
   18874:	bl	115a0 <__printf_chk@plt>
   18878:	movw	r1, #47907	; 0xbb23
   1887c:	mov	r0, #0
   18880:	mov	r2, #5
   18884:	movt	r1, #1
   18888:	bl	11408 <dcgettext@plt>
   1888c:	movw	r2, #47946	; 0xbb4a
   18890:	mov	r1, r0
   18894:	mov	r0, #1
   18898:	movt	r2, #1
   1889c:	pop	{fp, lr}
   188a0:	b	115a0 <__printf_chk@plt>
   188a4:	push	{fp, lr}
   188a8:	mov	fp, sp
   188ac:	bl	11684 <aligned_alloc@plt>
   188b0:	cmp	r0, #0
   188b4:	popne	{fp, pc}
   188b8:	bl	18e70 <__assert_fail@plt+0x778c>
   188bc:	push	{r4, r5, r6, sl, fp, lr}
   188c0:	add	fp, sp, #16
   188c4:	mov	r4, r2
   188c8:	mov	r5, r1
   188cc:	mov	r6, r0
   188d0:	bl	1a0ac <__assert_fail@plt+0x89c8>
   188d4:	cmp	r0, #0
   188d8:	popne	{r4, r5, r6, sl, fp, pc}
   188dc:	cmp	r6, #0
   188e0:	beq	188f4 <__assert_fail@plt+0x7210>
   188e4:	cmp	r5, #0
   188e8:	cmpne	r4, #0
   188ec:	bne	188f4 <__assert_fail@plt+0x7210>
   188f0:	pop	{r4, r5, r6, sl, fp, pc}
   188f4:	bl	18e70 <__assert_fail@plt+0x778c>
   188f8:	push	{r4, r5, r6, sl, fp, lr}
   188fc:	add	fp, sp, #16
   18900:	mov	r4, r2
   18904:	mov	r5, r1
   18908:	mov	r6, r0
   1890c:	bl	1a0ac <__assert_fail@plt+0x89c8>
   18910:	cmp	r0, #0
   18914:	popne	{r4, r5, r6, sl, fp, pc}
   18918:	cmp	r6, #0
   1891c:	beq	18930 <__assert_fail@plt+0x724c>
   18920:	cmp	r5, #0
   18924:	cmpne	r4, #0
   18928:	bne	18930 <__assert_fail@plt+0x724c>
   1892c:	pop	{r4, r5, r6, sl, fp, pc}
   18930:	bl	18e70 <__assert_fail@plt+0x778c>
   18934:	push	{fp, lr}
   18938:	mov	fp, sp
   1893c:	bl	19cb8 <__assert_fail@plt+0x85d4>
   18940:	cmp	r0, #0
   18944:	popne	{fp, pc}
   18948:	bl	18e70 <__assert_fail@plt+0x778c>
   1894c:	push	{fp, lr}
   18950:	mov	fp, sp
   18954:	bl	19cb8 <__assert_fail@plt+0x85d4>
   18958:	cmp	r0, #0
   1895c:	popne	{fp, pc}
   18960:	bl	18e70 <__assert_fail@plt+0x778c>
   18964:	push	{fp, lr}
   18968:	mov	fp, sp
   1896c:	bl	19cb8 <__assert_fail@plt+0x85d4>
   18970:	cmp	r0, #0
   18974:	popne	{fp, pc}
   18978:	bl	18e70 <__assert_fail@plt+0x778c>
   1897c:	push	{r4, r5, fp, lr}
   18980:	add	fp, sp, #8
   18984:	mov	r4, r1
   18988:	mov	r5, r0
   1898c:	bl	19ce8 <__assert_fail@plt+0x8604>
   18990:	cmp	r0, #0
   18994:	popne	{r4, r5, fp, pc}
   18998:	cmp	r5, #0
   1899c:	beq	189ac <__assert_fail@plt+0x72c8>
   189a0:	cmp	r4, #0
   189a4:	bne	189ac <__assert_fail@plt+0x72c8>
   189a8:	pop	{r4, r5, fp, pc}
   189ac:	bl	18e70 <__assert_fail@plt+0x778c>
   189b0:	push	{fp, lr}
   189b4:	mov	fp, sp
   189b8:	cmp	r1, #0
   189bc:	orreq	r1, r1, #1
   189c0:	bl	19ce8 <__assert_fail@plt+0x8604>
   189c4:	cmp	r0, #0
   189c8:	popne	{fp, pc}
   189cc:	bl	18e70 <__assert_fail@plt+0x778c>
   189d0:	push	{fp, lr}
   189d4:	mov	fp, sp
   189d8:	clz	r3, r2
   189dc:	lsr	ip, r3, #5
   189e0:	clz	r3, r1
   189e4:	lsr	r3, r3, #5
   189e8:	orrs	r3, r3, ip
   189ec:	movwne	r1, #1
   189f0:	movwne	r2, #1
   189f4:	bl	1a0ac <__assert_fail@plt+0x89c8>
   189f8:	cmp	r0, #0
   189fc:	popne	{fp, pc}
   18a00:	bl	18e70 <__assert_fail@plt+0x778c>
   18a04:	push	{fp, lr}
   18a08:	mov	fp, sp
   18a0c:	mov	r2, r1
   18a10:	mov	r1, r0
   18a14:	mov	r0, #0
   18a18:	bl	1a0ac <__assert_fail@plt+0x89c8>
   18a1c:	cmp	r0, #0
   18a20:	popne	{fp, pc}
   18a24:	bl	18e70 <__assert_fail@plt+0x778c>
   18a28:	push	{fp, lr}
   18a2c:	mov	fp, sp
   18a30:	mov	r2, r1
   18a34:	mov	r1, r0
   18a38:	clz	r0, r2
   18a3c:	clz	r3, r1
   18a40:	lsr	r0, r0, #5
   18a44:	lsr	r3, r3, #5
   18a48:	orrs	r0, r3, r0
   18a4c:	mov	r0, #0
   18a50:	movwne	r1, #1
   18a54:	movwne	r2, #1
   18a58:	bl	1a0ac <__assert_fail@plt+0x89c8>
   18a5c:	cmp	r0, #0
   18a60:	popne	{fp, pc}
   18a64:	bl	18e70 <__assert_fail@plt+0x778c>
   18a68:	push	{r4, r5, r6, sl, fp, lr}
   18a6c:	add	fp, sp, #16
   18a70:	ldr	r5, [r1]
   18a74:	mov	r4, r1
   18a78:	mov	r6, r0
   18a7c:	cmp	r0, #0
   18a80:	beq	18a98 <__assert_fail@plt+0x73b4>
   18a84:	mov	r0, #1
   18a88:	add	r0, r0, r5, lsr #1
   18a8c:	adds	r5, r5, r0
   18a90:	bcc	18aa0 <__assert_fail@plt+0x73bc>
   18a94:	b	18adc <__assert_fail@plt+0x73f8>
   18a98:	cmp	r5, #0
   18a9c:	movweq	r5, #64	; 0x40
   18aa0:	mov	r0, r6
   18aa4:	mov	r1, r5
   18aa8:	mov	r2, #1
   18aac:	bl	1a0ac <__assert_fail@plt+0x89c8>
   18ab0:	cmp	r5, #0
   18ab4:	mov	r1, r5
   18ab8:	movwne	r1, #1
   18abc:	cmp	r0, #0
   18ac0:	bne	18ad4 <__assert_fail@plt+0x73f0>
   18ac4:	clz	r2, r6
   18ac8:	lsr	r2, r2, #5
   18acc:	orrs	r1, r2, r1
   18ad0:	bne	18adc <__assert_fail@plt+0x73f8>
   18ad4:	str	r5, [r4]
   18ad8:	pop	{r4, r5, r6, sl, fp, pc}
   18adc:	bl	18e70 <__assert_fail@plt+0x778c>
   18ae0:	push	{r4, r5, r6, r7, fp, lr}
   18ae4:	add	fp, sp, #16
   18ae8:	ldr	r5, [r1]
   18aec:	mov	r6, r2
   18af0:	mov	r4, r1
   18af4:	mov	r7, r0
   18af8:	cmp	r0, #0
   18afc:	beq	18b14 <__assert_fail@plt+0x7430>
   18b00:	mov	r0, #1
   18b04:	add	r0, r0, r5, lsr #1
   18b08:	adds	r5, r5, r0
   18b0c:	bcc	18b2c <__assert_fail@plt+0x7448>
   18b10:	b	18b60 <__assert_fail@plt+0x747c>
   18b14:	cmp	r5, #0
   18b18:	bne	18b2c <__assert_fail@plt+0x7448>
   18b1c:	mov	r0, #64	; 0x40
   18b20:	cmp	r6, #64	; 0x40
   18b24:	udiv	r5, r0, r6
   18b28:	addhi	r5, r5, #1
   18b2c:	mov	r0, r7
   18b30:	mov	r1, r5
   18b34:	mov	r2, r6
   18b38:	bl	1a0ac <__assert_fail@plt+0x89c8>
   18b3c:	cmp	r0, #0
   18b40:	bne	18b58 <__assert_fail@plt+0x7474>
   18b44:	cmp	r7, #0
   18b48:	beq	18b60 <__assert_fail@plt+0x747c>
   18b4c:	cmp	r6, #0
   18b50:	cmpne	r5, #0
   18b54:	bne	18b60 <__assert_fail@plt+0x747c>
   18b58:	str	r5, [r4]
   18b5c:	pop	{r4, r5, r6, r7, fp, pc}
   18b60:	bl	18e70 <__assert_fail@plt+0x778c>
   18b64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18b68:	add	fp, sp, #24
   18b6c:	mov	r8, r1
   18b70:	ldr	r1, [r1]
   18b74:	mov	r5, r0
   18b78:	add	r0, r1, r1, asr #1
   18b7c:	cmp	r0, r1
   18b80:	mvnvs	r0, #-2147483648	; 0x80000000
   18b84:	cmp	r0, r3
   18b88:	mov	r7, r0
   18b8c:	movgt	r7, r3
   18b90:	cmn	r3, #1
   18b94:	movle	r7, r0
   18b98:	ldr	r0, [fp, #8]
   18b9c:	cmn	r0, #1
   18ba0:	ble	18bc8 <__assert_fail@plt+0x74e4>
   18ba4:	cmp	r0, #0
   18ba8:	beq	18c1c <__assert_fail@plt+0x7538>
   18bac:	cmn	r7, #1
   18bb0:	ble	18bf0 <__assert_fail@plt+0x750c>
   18bb4:	mvn	r4, #-2147483648	; 0x80000000
   18bb8:	udiv	r6, r4, r0
   18bbc:	cmp	r6, r7
   18bc0:	bge	18c1c <__assert_fail@plt+0x7538>
   18bc4:	b	18c2c <__assert_fail@plt+0x7548>
   18bc8:	cmn	r7, #1
   18bcc:	ble	18c0c <__assert_fail@plt+0x7528>
   18bd0:	cmn	r0, #1
   18bd4:	beq	18c1c <__assert_fail@plt+0x7538>
   18bd8:	mov	r6, #-2147483648	; 0x80000000
   18bdc:	mvn	r4, #-2147483648	; 0x80000000
   18be0:	sdiv	r6, r6, r0
   18be4:	cmp	r6, r7
   18be8:	bge	18c1c <__assert_fail@plt+0x7538>
   18bec:	b	18c2c <__assert_fail@plt+0x7548>
   18bf0:	beq	18c1c <__assert_fail@plt+0x7538>
   18bf4:	mov	r6, #-2147483648	; 0x80000000
   18bf8:	mvn	r4, #-2147483648	; 0x80000000
   18bfc:	sdiv	r6, r6, r7
   18c00:	cmp	r6, r0
   18c04:	bge	18c1c <__assert_fail@plt+0x7538>
   18c08:	b	18c2c <__assert_fail@plt+0x7548>
   18c0c:	mvn	r4, #-2147483648	; 0x80000000
   18c10:	sdiv	r6, r4, r0
   18c14:	cmp	r7, r6
   18c18:	blt	18c2c <__assert_fail@plt+0x7548>
   18c1c:	mul	r6, r7, r0
   18c20:	mov	r4, #64	; 0x40
   18c24:	cmp	r6, #63	; 0x3f
   18c28:	bgt	18c34 <__assert_fail@plt+0x7550>
   18c2c:	sdiv	r7, r4, r0
   18c30:	mul	r6, r7, r0
   18c34:	cmp	r5, #0
   18c38:	moveq	r4, #0
   18c3c:	streq	r4, [r8]
   18c40:	sub	r4, r7, r1
   18c44:	cmp	r4, r2
   18c48:	bge	18cf4 <__assert_fail@plt+0x7610>
   18c4c:	add	r7, r1, r2
   18c50:	mov	r6, #0
   18c54:	mov	r2, #0
   18c58:	cmp	r7, r3
   18c5c:	movwgt	r6, #1
   18c60:	cmn	r3, #1
   18c64:	movwgt	r2, #1
   18c68:	cmp	r7, r1
   18c6c:	bvs	18d28 <__assert_fail@plt+0x7644>
   18c70:	ands	r1, r2, r6
   18c74:	bne	18d28 <__assert_fail@plt+0x7644>
   18c78:	cmn	r0, #1
   18c7c:	ble	18ca4 <__assert_fail@plt+0x75c0>
   18c80:	cmp	r0, #0
   18c84:	beq	18cf0 <__assert_fail@plt+0x760c>
   18c88:	cmn	r7, #1
   18c8c:	ble	18cc8 <__assert_fail@plt+0x75e4>
   18c90:	mvn	r1, #-2147483648	; 0x80000000
   18c94:	udiv	r1, r1, r0
   18c98:	cmp	r1, r7
   18c9c:	bge	18cf0 <__assert_fail@plt+0x760c>
   18ca0:	b	18d28 <__assert_fail@plt+0x7644>
   18ca4:	cmn	r7, #1
   18ca8:	ble	18ce0 <__assert_fail@plt+0x75fc>
   18cac:	cmn	r0, #1
   18cb0:	beq	18cf0 <__assert_fail@plt+0x760c>
   18cb4:	mov	r1, #-2147483648	; 0x80000000
   18cb8:	sdiv	r1, r1, r0
   18cbc:	cmp	r1, r7
   18cc0:	bge	18cf0 <__assert_fail@plt+0x760c>
   18cc4:	b	18d28 <__assert_fail@plt+0x7644>
   18cc8:	beq	18cf0 <__assert_fail@plt+0x760c>
   18ccc:	mov	r1, #-2147483648	; 0x80000000
   18cd0:	sdiv	r1, r1, r7
   18cd4:	cmp	r1, r0
   18cd8:	bge	18cf0 <__assert_fail@plt+0x760c>
   18cdc:	b	18d28 <__assert_fail@plt+0x7644>
   18ce0:	mvn	r1, #-2147483648	; 0x80000000
   18ce4:	sdiv	r1, r1, r0
   18ce8:	cmp	r7, r1
   18cec:	blt	18d28 <__assert_fail@plt+0x7644>
   18cf0:	mul	r6, r7, r0
   18cf4:	mov	r0, r5
   18cf8:	mov	r1, r6
   18cfc:	bl	19ce8 <__assert_fail@plt+0x8604>
   18d00:	cmp	r6, #0
   18d04:	movwne	r6, #1
   18d08:	cmp	r0, #0
   18d0c:	bne	18d20 <__assert_fail@plt+0x763c>
   18d10:	clz	r1, r5
   18d14:	lsr	r1, r1, #5
   18d18:	orrs	r1, r1, r6
   18d1c:	bne	18d28 <__assert_fail@plt+0x7644>
   18d20:	str	r7, [r8]
   18d24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18d28:	bl	18e70 <__assert_fail@plt+0x778c>
   18d2c:	push	{fp, lr}
   18d30:	mov	fp, sp
   18d34:	mov	r1, #1
   18d38:	bl	19c64 <__assert_fail@plt+0x8580>
   18d3c:	cmp	r0, #0
   18d40:	popne	{fp, pc}
   18d44:	bl	18e70 <__assert_fail@plt+0x778c>
   18d48:	push	{fp, lr}
   18d4c:	mov	fp, sp
   18d50:	bl	19c64 <__assert_fail@plt+0x8580>
   18d54:	cmp	r0, #0
   18d58:	popne	{fp, pc}
   18d5c:	bl	18e70 <__assert_fail@plt+0x778c>
   18d60:	push	{fp, lr}
   18d64:	mov	fp, sp
   18d68:	mov	r1, #1
   18d6c:	bl	19c64 <__assert_fail@plt+0x8580>
   18d70:	cmp	r0, #0
   18d74:	popne	{fp, pc}
   18d78:	bl	18e70 <__assert_fail@plt+0x778c>
   18d7c:	push	{fp, lr}
   18d80:	mov	fp, sp
   18d84:	bl	19c64 <__assert_fail@plt+0x8580>
   18d88:	cmp	r0, #0
   18d8c:	popne	{fp, pc}
   18d90:	bl	18e70 <__assert_fail@plt+0x778c>
   18d94:	push	{r4, r5, fp, lr}
   18d98:	add	fp, sp, #8
   18d9c:	mov	r5, r0
   18da0:	mov	r0, r1
   18da4:	mov	r4, r1
   18da8:	bl	19cb8 <__assert_fail@plt+0x85d4>
   18dac:	cmp	r0, #0
   18db0:	beq	18dc4 <__assert_fail@plt+0x76e0>
   18db4:	mov	r1, r5
   18db8:	mov	r2, r4
   18dbc:	pop	{r4, r5, fp, lr}
   18dc0:	b	113cc <memcpy@plt>
   18dc4:	bl	18e70 <__assert_fail@plt+0x778c>
   18dc8:	push	{r4, r5, fp, lr}
   18dcc:	add	fp, sp, #8
   18dd0:	mov	r5, r0
   18dd4:	mov	r0, r1
   18dd8:	mov	r4, r1
   18ddc:	bl	19cb8 <__assert_fail@plt+0x85d4>
   18de0:	cmp	r0, #0
   18de4:	beq	18df8 <__assert_fail@plt+0x7714>
   18de8:	mov	r1, r5
   18dec:	mov	r2, r4
   18df0:	pop	{r4, r5, fp, lr}
   18df4:	b	113cc <memcpy@plt>
   18df8:	bl	18e70 <__assert_fail@plt+0x778c>
   18dfc:	push	{r4, r5, fp, lr}
   18e00:	add	fp, sp, #8
   18e04:	mov	r5, r0
   18e08:	add	r0, r1, #1
   18e0c:	mov	r4, r1
   18e10:	bl	19cb8 <__assert_fail@plt+0x85d4>
   18e14:	cmp	r0, #0
   18e18:	beq	18e34 <__assert_fail@plt+0x7750>
   18e1c:	mov	r1, #0
   18e20:	mov	r2, r4
   18e24:	strb	r1, [r0, r4]
   18e28:	mov	r1, r5
   18e2c:	pop	{r4, r5, fp, lr}
   18e30:	b	113cc <memcpy@plt>
   18e34:	bl	18e70 <__assert_fail@plt+0x778c>
   18e38:	push	{r4, r5, fp, lr}
   18e3c:	add	fp, sp, #8
   18e40:	mov	r4, r0
   18e44:	bl	11534 <strlen@plt>
   18e48:	add	r5, r0, #1
   18e4c:	mov	r0, r5
   18e50:	bl	19cb8 <__assert_fail@plt+0x85d4>
   18e54:	cmp	r0, #0
   18e58:	beq	18e6c <__assert_fail@plt+0x7788>
   18e5c:	mov	r1, r4
   18e60:	mov	r2, r5
   18e64:	pop	{r4, r5, fp, lr}
   18e68:	b	113cc <memcpy@plt>
   18e6c:	bl	18e70 <__assert_fail@plt+0x778c>
   18e70:	push	{fp, lr}
   18e74:	mov	fp, sp
   18e78:	movw	r0, #49496	; 0xc158
   18e7c:	movw	r1, #48022	; 0xbb96
   18e80:	mov	r2, #5
   18e84:	movt	r0, #2
   18e88:	movt	r1, #1
   18e8c:	ldr	r4, [r0]
   18e90:	mov	r0, #0
   18e94:	bl	11408 <dcgettext@plt>
   18e98:	movw	r2, #46811	; 0xb6db
   18e9c:	mov	r3, r0
   18ea0:	mov	r0, r4
   18ea4:	mov	r1, #0
   18ea8:	movt	r2, #1
   18eac:	bl	114b0 <error@plt>
   18eb0:	bl	116cc <abort@plt>
   18eb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18eb8:	add	fp, sp, #24
   18ebc:	sub	sp, sp, #16
   18ec0:	mov	r8, r0
   18ec4:	ldr	r0, [fp, #16]
   18ec8:	mov	r5, r3
   18ecc:	mov	r6, r2
   18ed0:	mov	r2, r1
   18ed4:	add	r3, sp, #8
   18ed8:	mov	r1, #0
   18edc:	str	r0, [sp]
   18ee0:	mov	r0, r8
   18ee4:	bl	18fb0 <__assert_fail@plt+0x78cc>
   18ee8:	cmp	r0, #0
   18eec:	bne	18f78 <__assert_fail@plt+0x7894>
   18ef0:	ldr	r4, [sp, #8]
   18ef4:	ldr	r7, [sp, #12]
   18ef8:	subs	r0, r4, r6
   18efc:	sbcs	r0, r7, r5
   18f00:	bcc	18f24 <__assert_fail@plt+0x7840>
   18f04:	ldr	r1, [fp, #8]
   18f08:	ldr	r0, [fp, #12]
   18f0c:	subs	r1, r1, r4
   18f10:	sbcs	r0, r0, r7
   18f14:	movcs	r0, r4
   18f18:	movcs	r1, r7
   18f1c:	subcs	sp, fp, #24
   18f20:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   18f24:	bl	11558 <__errno_location@plt>
   18f28:	subs	r1, r4, #1073741824	; 0x40000000
   18f2c:	sbcs	r1, r7, #0
   18f30:	movcc	r1, #34	; 0x22
   18f34:	movcs	r1, #75	; 0x4b
   18f38:	str	r1, [r0]
   18f3c:	ldr	r6, [r0]
   18f40:	ldr	r4, [fp, #24]
   18f44:	ldr	r5, [fp, #20]
   18f48:	mov	r0, r8
   18f4c:	bl	174e8 <__assert_fail@plt+0x5e04>
   18f50:	subs	r1, r6, #22
   18f54:	movw	r2, #46826	; 0xb6ea
   18f58:	str	r0, [sp]
   18f5c:	mov	r3, r5
   18f60:	movne	r1, r6
   18f64:	cmp	r4, #0
   18f68:	movt	r2, #1
   18f6c:	movweq	r4, #1
   18f70:	mov	r0, r4
   18f74:	bl	114b0 <error@plt>
   18f78:	cmp	r0, #1
   18f7c:	beq	18f94 <__assert_fail@plt+0x78b0>
   18f80:	cmp	r0, #3
   18f84:	bne	18fa0 <__assert_fail@plt+0x78bc>
   18f88:	bl	11558 <__errno_location@plt>
   18f8c:	mov	r1, #0
   18f90:	b	18f38 <__assert_fail@plt+0x7854>
   18f94:	bl	11558 <__errno_location@plt>
   18f98:	mov	r1, #75	; 0x4b
   18f9c:	b	18f38 <__assert_fail@plt+0x7854>
   18fa0:	bl	11558 <__errno_location@plt>
   18fa4:	b	18f3c <__assert_fail@plt+0x7858>
   18fa8:	mov	r1, #10
   18fac:	b	18eb4 <__assert_fail@plt+0x77d0>
   18fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fb4:	add	fp, sp, #28
   18fb8:	sub	sp, sp, #44	; 0x2c
   18fbc:	cmp	r2, #37	; 0x25
   18fc0:	bcs	19c44 <__assert_fail@plt+0x8560>
   18fc4:	ldr	sl, [fp, #8]
   18fc8:	mov	r6, r2
   18fcc:	mov	r7, r1
   18fd0:	mov	r4, r0
   18fd4:	str	r3, [sp, #36]	; 0x24
   18fd8:	bl	11558 <__errno_location@plt>
   18fdc:	mov	r5, r0
   18fe0:	mov	r0, #0
   18fe4:	str	r0, [r5]
   18fe8:	bl	11510 <__ctype_b_loc@plt>
   18fec:	ldr	r1, [r0]
   18ff0:	mov	r2, r4
   18ff4:	ldrb	r0, [r2], #1
   18ff8:	add	r3, r1, r0, lsl #1
   18ffc:	ldrb	r3, [r3, #1]
   19000:	tst	r3, #32
   19004:	bne	18ff4 <__assert_fail@plt+0x7910>
   19008:	cmp	r7, #0
   1900c:	sub	r9, fp, #32
   19010:	mov	r8, #4
   19014:	movne	r9, r7
   19018:	cmp	r0, #45	; 0x2d
   1901c:	beq	193dc <__assert_fail@plt+0x7cf8>
   19020:	mov	r0, r4
   19024:	mov	r1, r9
   19028:	mov	r2, r6
   1902c:	mov	r3, #0
   19030:	bl	113d8 <__strtoull_internal@plt>
   19034:	mov	r7, r1
   19038:	ldr	r1, [r9]
   1903c:	cmp	r1, r4
   19040:	beq	19078 <__assert_fail@plt+0x7994>
   19044:	mov	r6, r0
   19048:	ldr	r0, [r5]
   1904c:	cmp	r0, #0
   19050:	beq	19394 <__assert_fail@plt+0x7cb0>
   19054:	cmp	r0, #34	; 0x22
   19058:	bne	193dc <__assert_fail@plt+0x7cf8>
   1905c:	mov	r8, #1
   19060:	cmp	sl, #0
   19064:	beq	19c30 <__assert_fail@plt+0x854c>
   19068:	ldrb	r4, [r1]
   1906c:	cmp	r4, #0
   19070:	bne	190bc <__assert_fail@plt+0x79d8>
   19074:	b	19c30 <__assert_fail@plt+0x854c>
   19078:	cmp	sl, #0
   1907c:	beq	193dc <__assert_fail@plt+0x7cf8>
   19080:	mov	r5, r1
   19084:	ldrb	r1, [r4]
   19088:	cmp	r1, #0
   1908c:	beq	193dc <__assert_fail@plt+0x7cf8>
   19090:	mov	r0, sl
   19094:	bl	11540 <strchr@plt>
   19098:	cmp	r0, #0
   1909c:	beq	193dc <__assert_fail@plt+0x7cf8>
   190a0:	mov	r1, r5
   190a4:	mov	r8, #0
   190a8:	mov	r6, #1
   190ac:	mov	r7, #0
   190b0:	ldrb	r4, [r1]
   190b4:	cmp	r4, #0
   190b8:	beq	19c30 <__assert_fail@plt+0x854c>
   190bc:	str	r1, [sp, #32]
   190c0:	mov	r0, sl
   190c4:	mov	r1, r4
   190c8:	bl	11540 <strchr@plt>
   190cc:	cmp	r0, #0
   190d0:	beq	193d0 <__assert_fail@plt+0x7cec>
   190d4:	sub	r0, r4, #69	; 0x45
   190d8:	mov	r1, #1
   190dc:	mov	r3, #0
   190e0:	mov	r5, #1024	; 0x400
   190e4:	cmp	r0, #47	; 0x2f
   190e8:	str	r1, [sp, #28]
   190ec:	bhi	191f0 <__assert_fail@plt+0x7b0c>
   190f0:	add	r1, pc, #0
   190f4:	ldr	pc, [r1, r0, lsl #2]
   190f8:			; <UNDEFINED> instruction: 0x000191b8
   190fc:	strdeq	r9, [r1], -r0
   19100:			; <UNDEFINED> instruction: 0x000191b8
   19104:	strdeq	r9, [r1], -r0
   19108:	strdeq	r9, [r1], -r0
   1910c:	strdeq	r9, [r1], -r0
   19110:			; <UNDEFINED> instruction: 0x000191b8
   19114:	strdeq	r9, [r1], -r0
   19118:			; <UNDEFINED> instruction: 0x000191b8
   1911c:	strdeq	r9, [r1], -r0
   19120:	strdeq	r9, [r1], -r0
   19124:			; <UNDEFINED> instruction: 0x000191b8
   19128:	strdeq	r9, [r1], -r0
   1912c:	strdeq	r9, [r1], -r0
   19130:	strdeq	r9, [r1], -r0
   19134:			; <UNDEFINED> instruction: 0x000191b8
   19138:	strdeq	r9, [r1], -r0
   1913c:	strdeq	r9, [r1], -r0
   19140:	strdeq	r9, [r1], -r0
   19144:	strdeq	r9, [r1], -r0
   19148:			; <UNDEFINED> instruction: 0x000191b8
   1914c:			; <UNDEFINED> instruction: 0x000191b8
   19150:	strdeq	r9, [r1], -r0
   19154:	strdeq	r9, [r1], -r0
   19158:	strdeq	r9, [r1], -r0
   1915c:	strdeq	r9, [r1], -r0
   19160:	strdeq	r9, [r1], -r0
   19164:	strdeq	r9, [r1], -r0
   19168:	strdeq	r9, [r1], -r0
   1916c:	strdeq	r9, [r1], -r0
   19170:	strdeq	r9, [r1], -r0
   19174:	strdeq	r9, [r1], -r0
   19178:	strdeq	r9, [r1], -r0
   1917c:	strdeq	r9, [r1], -r0
   19180:			; <UNDEFINED> instruction: 0x000191b8
   19184:	strdeq	r9, [r1], -r0
   19188:	strdeq	r9, [r1], -r0
   1918c:	strdeq	r9, [r1], -r0
   19190:			; <UNDEFINED> instruction: 0x000191b8
   19194:	strdeq	r9, [r1], -r0
   19198:			; <UNDEFINED> instruction: 0x000191b8
   1919c:	strdeq	r9, [r1], -r0
   191a0:	strdeq	r9, [r1], -r0
   191a4:	strdeq	r9, [r1], -r0
   191a8:	strdeq	r9, [r1], -r0
   191ac:	strdeq	r9, [r1], -r0
   191b0:	strdeq	r9, [r1], -r0
   191b4:			; <UNDEFINED> instruction: 0x000191b8
   191b8:	mov	r0, sl
   191bc:	mov	r1, #48	; 0x30
   191c0:	bl	11540 <strchr@plt>
   191c4:	cmp	r0, #0
   191c8:	beq	191ec <__assert_fail@plt+0x7b08>
   191cc:	ldr	r1, [sp, #32]
   191d0:	ldrb	r0, [r1, #1]
   191d4:	cmp	r0, #66	; 0x42
   191d8:	cmpne	r0, #68	; 0x44
   191dc:	bne	193a4 <__assert_fail@plt+0x7cc0>
   191e0:	mov	r5, #1000	; 0x3e8
   191e4:	mov	r0, #2
   191e8:	str	r0, [sp, #28]
   191ec:	mov	r3, #0
   191f0:	sub	r0, r4, #66	; 0x42
   191f4:	cmp	r0, #53	; 0x35
   191f8:	bhi	193d0 <__assert_fail@plt+0x7cec>
   191fc:	add	r1, pc, #0
   19200:	ldr	pc, [r1, r0, lsl #2]
   19204:	andeq	r9, r1, r0, asr #14
   19208:	ldrdeq	r9, [r1], -r0
   1920c:	ldrdeq	r9, [r1], -r0
   19210:	andeq	r9, r1, r8, ror #14
   19214:	ldrdeq	r9, [r1], -r0
   19218:	ldrdeq	r9, [r1], -ip
   1921c:	ldrdeq	r9, [r1], -r0
   19220:	ldrdeq	r9, [r1], -r0
   19224:	ldrdeq	r9, [r1], -r0
   19228:	andeq	r9, r1, r8, ror #7
   1922c:	ldrdeq	r9, [r1], -r0
   19230:	andeq	r9, r1, r0, lsr r4
   19234:	ldrdeq	r9, [r1], -r0
   19238:	ldrdeq	r9, [r1], -r0
   1923c:			; <UNDEFINED> instruction: 0x000198bc
   19240:	ldrdeq	r9, [r1], -r0
   19244:	ldrdeq	r9, [r1], -r0
   19248:	ldrdeq	r9, [r1], -r0
   1924c:			; <UNDEFINED> instruction: 0x000194bc
   19250:	ldrdeq	r9, [r1], -r0
   19254:	ldrdeq	r9, [r1], -r0
   19258:	ldrdeq	r9, [r1], -r0
   1925c:	ldrdeq	r9, [r1], -r0
   19260:	andeq	r9, r1, r4, ror #19
   19264:	andeq	r9, r1, r4, lsr #11
   19268:	ldrdeq	r9, [r1], -r0
   1926c:	ldrdeq	r9, [r1], -r0
   19270:	ldrdeq	r9, [r1], -r0
   19274:	ldrdeq	r9, [r1], -r0
   19278:	ldrdeq	r9, [r1], -r0
   1927c:	ldrdeq	r9, [r1], -r0
   19280:	ldrdeq	r9, [r1], -r0
   19284:			; <UNDEFINED> instruction: 0x00019bb8
   19288:	andeq	r9, r1, r0, lsl ip
   1928c:	ldrdeq	r9, [r1], -r0
   19290:	ldrdeq	r9, [r1], -r0
   19294:	ldrdeq	r9, [r1], -r0
   19298:	ldrdeq	r9, [r1], -ip
   1929c:	ldrdeq	r9, [r1], -r0
   192a0:	ldrdeq	r9, [r1], -r0
   192a4:	ldrdeq	r9, [r1], -r0
   192a8:	andeq	r9, r1, r8, ror #7
   192ac:	ldrdeq	r9, [r1], -r0
   192b0:	andeq	r9, r1, r0, lsr r4
   192b4:	ldrdeq	r9, [r1], -r0
   192b8:	ldrdeq	r9, [r1], -r0
   192bc:	ldrdeq	r9, [r1], -r0
   192c0:	ldrdeq	r9, [r1], -r0
   192c4:	ldrdeq	r9, [r1], -r0
   192c8:	ldrdeq	r9, [r1], -r0
   192cc:			; <UNDEFINED> instruction: 0x000194bc
   192d0:	ldrdeq	r9, [r1], -r0
   192d4:	ldrdeq	r9, [r1], -r0
   192d8:	andeq	r9, r1, ip, ror #23
   192dc:	mvn	r0, #0
   192e0:	mvn	r1, #0
   192e4:	mov	r2, r5
   192e8:	mov	sl, r3
   192ec:	bl	1a694 <__assert_fail@plt+0x8fb0>
   192f0:	subs	r3, r0, r6
   192f4:	umull	r4, r2, r6, r5
   192f8:	mov	lr, #0
   192fc:	str	r1, [sp, #20]
   19300:	sbcs	r3, r1, r7
   19304:	movwcc	lr, #1
   19308:	mla	ip, r6, sl, r2
   1930c:	mov	r2, r1
   19310:	mov	r2, #0
   19314:	cmp	lr, #0
   19318:	mla	r7, r7, r5, ip
   1931c:	mvnne	r4, #0
   19320:	mvnne	r7, #0
   19324:	subs	r6, r0, r4
   19328:	sbcs	r6, r1, r7
   1932c:	umull	r3, r6, r4, r5
   19330:	movwcc	r2, #1
   19334:	cmp	r2, #0
   19338:	mvnne	r3, #0
   1933c:	cmp	r2, #0
   19340:	str	r6, [sp, #16]
   19344:	umull	r6, ip, r3, r5
   19348:	mla	r1, r3, sl, ip
   1934c:	ldr	ip, [sp, #16]
   19350:	str	r1, [sp, #12]
   19354:	mla	r4, r4, sl, ip
   19358:	mla	r4, r7, r5, r4
   1935c:	mvnne	r4, #0
   19360:	subs	r0, r0, r3
   19364:	ldr	r0, [sp, #20]
   19368:	ldr	r7, [sp, #12]
   1936c:	sbcs	r0, r0, r4
   19370:	mov	r0, #0
   19374:	mla	r7, r4, r5, r7
   19378:	movwcc	r0, #1
   1937c:	cmp	r0, #0
   19380:	mov	r1, r0
   19384:	orr	r0, lr, r2
   19388:	mvnne	r7, #0
   1938c:	mvnne	r6, #0
   19390:	b	199dc <__assert_fail@plt+0x82f8>
   19394:	mov	r8, r0
   19398:	cmp	sl, #0
   1939c:	bne	19068 <__assert_fail@plt+0x7984>
   193a0:	b	19c30 <__assert_fail@plt+0x854c>
   193a4:	cmp	r0, #105	; 0x69
   193a8:	mov	r3, #0
   193ac:	bne	191f0 <__assert_fail@plt+0x7b0c>
   193b0:	ldrb	r0, [r1, #2]
   193b4:	mov	r1, #1
   193b8:	cmp	r0, #66	; 0x42
   193bc:	movweq	r1, #3
   193c0:	str	r1, [sp, #28]
   193c4:	sub	r0, r4, #66	; 0x42
   193c8:	cmp	r0, #53	; 0x35
   193cc:	bls	191fc <__assert_fail@plt+0x7b18>
   193d0:	ldr	r0, [sp, #36]	; 0x24
   193d4:	orr	r8, r8, #2
   193d8:	strd	r6, [r0]
   193dc:	mov	r0, r8
   193e0:	sub	sp, fp, #28
   193e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193e8:	mvn	r0, #0
   193ec:	mvn	r1, #0
   193f0:	mov	r2, r5
   193f4:	mov	r4, r3
   193f8:	bl	1a694 <__assert_fail@plt+0x8fb0>
   193fc:	subs	r0, r0, r6
   19400:	mov	r2, #0
   19404:	sbcs	r0, r1, r7
   19408:	umull	r0, r1, r6, r5
   1940c:	movwcc	r2, #1
   19410:	cmp	r2, #0
   19414:	mla	r1, r6, r4, r1
   19418:	mov	r3, r2
   1941c:	mvnne	r0, #0
   19420:	mla	r7, r7, r5, r1
   19424:	mvnne	r7, #0
   19428:	mov	r6, r0
   1942c:	b	19c10 <__assert_fail@plt+0x852c>
   19430:	mvn	r0, #0
   19434:	mvn	r1, #0
   19438:	mov	r2, r5
   1943c:	str	r3, [sp, #24]
   19440:	bl	1a694 <__assert_fail@plt+0x8fb0>
   19444:	subs	r3, r0, r6
   19448:	mov	ip, r0
   1944c:	umull	r4, r0, r6, r5
   19450:	mov	sl, #0
   19454:	sbcs	r3, r1, r7
   19458:	mov	r3, #0
   1945c:	movwcc	r3, #1
   19460:	cmp	r3, #0
   19464:	str	r0, [sp, #20]
   19468:	ldr	r0, [sp, #24]
   1946c:	mvnne	r4, #0
   19470:	cmp	r3, #0
   19474:	umull	lr, r2, r4, r5
   19478:	mla	r2, r4, r0, r2
   1947c:	str	r2, [sp, #16]
   19480:	ldr	r2, [sp, #20]
   19484:	mla	r6, r6, r0, r2
   19488:	ldr	r0, [sp, #16]
   1948c:	mla	r6, r7, r5, r6
   19490:	mvnne	r6, #0
   19494:	mla	r7, r6, r5, r0
   19498:	subs	r0, ip, r4
   1949c:	sbcs	r0, r1, r6
   194a0:	movwcc	sl, #1
   194a4:	cmp	sl, #0
   194a8:	orr	r3, r3, sl
   194ac:	mvnne	lr, #0
   194b0:	mvnne	r7, #0
   194b4:	mov	r6, lr
   194b8:	b	19c10 <__assert_fail@plt+0x852c>
   194bc:	mvn	r0, #0
   194c0:	mvn	r1, #0
   194c4:	mov	r2, r5
   194c8:	mov	sl, r3
   194cc:	bl	1a694 <__assert_fail@plt+0x8fb0>
   194d0:	subs	r3, r0, r6
   194d4:	mov	ip, r1
   194d8:	umull	r2, lr, r6, r5
   194dc:	str	r0, [sp, #20]
   194e0:	sbcs	r3, r1, r7
   194e4:	mov	r1, #0
   194e8:	str	ip, [sp, #16]
   194ec:	movwcc	r1, #1
   194f0:	mla	r6, r6, sl, lr
   194f4:	mov	lr, #0
   194f8:	cmp	r1, #0
   194fc:	mla	r7, r7, r5, r6
   19500:	mvnne	r2, #0
   19504:	cmp	r1, #0
   19508:	umull	r3, r4, r2, r5
   1950c:	mvnne	r7, #0
   19510:	mla	r4, r2, sl, r4
   19514:	subs	r2, r0, r2
   19518:	sbcs	r2, ip, r7
   1951c:	mla	r4, r7, r5, r4
   19520:	mov	r2, #0
   19524:	movwcc	lr, #1
   19528:	cmp	lr, #0
   1952c:	mvnne	r3, #0
   19530:	mvnne	r4, #0
   19534:	subs	r7, r0, r3
   19538:	mov	r0, r5
   1953c:	sbcs	r7, ip, r4
   19540:	umull	r5, r7, r3, r5
   19544:	movwcc	r2, #1
   19548:	cmp	r2, #0
   1954c:	mla	r3, r3, sl, r7
   19550:	mvnne	r5, #0
   19554:	cmp	r2, #0
   19558:	mla	r3, r4, r0, r3
   1955c:	umull	r6, ip, r5, r0
   19560:	mvnne	r3, #0
   19564:	mla	ip, r5, sl, ip
   19568:	mla	r7, r3, r0, ip
   1956c:	ldr	r0, [sp, #20]
   19570:	subs	r0, r0, r5
   19574:	ldr	r0, [sp, #16]
   19578:	sbcs	r0, r0, r3
   1957c:	mov	r0, #0
   19580:	movwcc	r0, #1
   19584:	cmp	r0, #0
   19588:	mov	r3, r0
   1958c:	orr	r0, r1, lr
   19590:	orr	r0, r0, r2
   19594:	mvnne	r7, #0
   19598:	mvnne	r6, #0
   1959c:	orr	r3, r0, r3
   195a0:	b	19c10 <__assert_fail@plt+0x852c>
   195a4:	mvn	r0, #0
   195a8:	mvn	r1, #0
   195ac:	mov	r2, r5
   195b0:	mov	r4, r3
   195b4:	str	r3, [sp, #24]
   195b8:	bl	1a694 <__assert_fail@plt+0x8fb0>
   195bc:	umull	r3, r2, r6, r5
   195c0:	mla	r2, r6, r4, r2
   195c4:	subs	r6, r0, r6
   195c8:	sbcs	r6, r1, r7
   195cc:	mov	r6, #0
   195d0:	mla	r2, r7, r5, r2
   195d4:	mov	r7, #0
   195d8:	movwcc	r6, #1
   195dc:	cmp	r6, #0
   195e0:	str	r6, [sp, #20]
   195e4:	mvnne	r3, #0
   195e8:	mvnne	r2, #0
   195ec:	subs	r4, r0, r3
   195f0:	umull	r6, ip, r3, r5
   195f4:	sbcs	r4, r1, r2
   195f8:	ldr	r4, [sp, #24]
   195fc:	movwcc	r7, #1
   19600:	cmp	r7, #0
   19604:	mov	lr, r7
   19608:	str	r7, [sp, #16]
   1960c:	mvnne	r6, #0
   19610:	cmp	lr, #0
   19614:	mov	lr, #0
   19618:	umull	sl, r7, r6, r5
   1961c:	mla	r3, r3, r4, ip
   19620:	mla	r2, r2, r5, r3
   19624:	mvnne	r2, #0
   19628:	subs	r3, r0, r6
   1962c:	mla	r7, r6, r4, r7
   19630:	mov	r4, r0
   19634:	mov	r0, #0
   19638:	mla	r7, r2, r5, r7
   1963c:	sbcs	r2, r1, r2
   19640:	mov	r3, r4
   19644:	movwcc	r0, #1
   19648:	str	r3, [sp, #4]
   1964c:	cmp	r0, #0
   19650:	str	r0, [sp, #12]
   19654:	mov	r0, r1
   19658:	mvnne	sl, #0
   1965c:	mvnne	r7, #0
   19660:	str	r0, [sp, #8]
   19664:	subs	r2, r4, sl
   19668:	ldr	r4, [sp, #24]
   1966c:	sbcs	r2, r1, r7
   19670:	umull	r6, r2, sl, r5
   19674:	movwcc	lr, #1
   19678:	cmp	lr, #0
   1967c:	mvnne	r6, #0
   19680:	mla	r2, sl, r4, r2
   19684:	cmp	lr, #0
   19688:	umull	r1, ip, r6, r5
   1968c:	mla	r2, r7, r5, r2
   19690:	mvnne	r2, #0
   19694:	mla	ip, r6, r4, ip
   19698:	subs	r6, r3, r6
   1969c:	mla	r7, r2, r5, ip
   196a0:	sbcs	r2, r0, r2
   196a4:	mov	ip, #0
   196a8:	mov	r2, #0
   196ac:	movwcc	ip, #1
   196b0:	cmp	ip, #0
   196b4:	mvnne	r1, #0
   196b8:	mvnne	r7, #0
   196bc:	subs	r6, r3, r1
   196c0:	ldr	r3, [sp, #24]
   196c4:	sbcs	r6, r0, r7
   196c8:	umull	r0, sl, r1, r5
   196cc:	movwcc	r2, #1
   196d0:	cmp	r2, #0
   196d4:	mvnne	r0, #0
   196d8:	mla	r1, r1, r3, sl
   196dc:	cmp	r2, #0
   196e0:	umull	r6, r4, r0, r5
   196e4:	mla	r1, r7, r5, r1
   196e8:	mvnne	r1, #0
   196ec:	mla	r4, r0, r3, r4
   196f0:	ldr	r3, [sp, #4]
   196f4:	mla	r7, r1, r5, r4
   196f8:	ldr	r5, [sp, #16]
   196fc:	subs	r0, r3, r0
   19700:	ldr	r0, [sp, #8]
   19704:	sbcs	r0, r0, r1
   19708:	mov	r0, #0
   1970c:	movwcc	r0, #1
   19710:	cmp	r0, #0
   19714:	mov	r1, r0
   19718:	ldr	r0, [sp, #20]
   1971c:	mvnne	r7, #0
   19720:	mvnne	r6, #0
   19724:	orr	r0, r0, r5
   19728:	ldr	r5, [sp, #12]
   1972c:	orr	r0, r0, r5
   19730:	orr	r0, r0, lr
   19734:	orr	r0, r0, ip
   19738:	orr	r0, r0, r2
   1973c:	b	19bac <__assert_fail@plt+0x84c8>
   19740:	mov	r1, #0
   19744:	lsl	r2, r7, #10
   19748:	lsl	r0, r6, #10
   1974c:	lsr	r3, r7, #22
   19750:	cmp	r1, r7, lsr #22
   19754:	orr	r2, r2, r6, lsr #22
   19758:	mvnne	r0, #0
   1975c:	movwne	r3, #1
   19760:	cmp	r1, r7, lsr #22
   19764:	b	19bdc <__assert_fail@plt+0x84f8>
   19768:	mvn	r0, #0
   1976c:	mvn	r1, #0
   19770:	mov	r2, r5
   19774:	mov	sl, r3
   19778:	bl	1a694 <__assert_fail@plt+0x8fb0>
   1977c:	subs	r2, r0, r6
   19780:	mov	ip, r0
   19784:	mov	r0, #0
   19788:	sbcs	r2, r1, r7
   1978c:	umull	r4, r2, r6, r5
   19790:	movwcc	r0, #1
   19794:	cmp	r0, #0
   19798:	mla	r2, r6, sl, r2
   1979c:	str	r0, [sp, #20]
   197a0:	mvnne	r4, #0
   197a4:	cmp	r0, #0
   197a8:	mla	r2, r7, r5, r2
   197ac:	mov	r0, #0
   197b0:	umull	lr, r3, r4, r5
   197b4:	mvnne	r2, #0
   197b8:	mla	r3, r4, sl, r3
   197bc:	mla	r6, r2, r5, r3
   197c0:	subs	r3, ip, r4
   197c4:	mov	r3, r1
   197c8:	sbcs	r2, r1, r2
   197cc:	str	r3, [sp, #8]
   197d0:	movwcc	r0, #1
   197d4:	cmp	r0, #0
   197d8:	str	r0, [sp, #16]
   197dc:	mov	r0, ip
   197e0:	mvnne	lr, #0
   197e4:	mvnne	r6, #0
   197e8:	str	r0, [sp, #12]
   197ec:	subs	r2, ip, lr
   197f0:	umull	r7, r4, lr, r5
   197f4:	sbcs	r2, r1, r6
   197f8:	mov	r2, #0
   197fc:	movwcc	r2, #1
   19800:	mla	r4, lr, sl, r4
   19804:	cmp	r2, #0
   19808:	mla	r6, r6, r5, r4
   1980c:	mov	r4, #0
   19810:	mvnne	r7, #0
   19814:	cmp	r2, #0
   19818:	umull	r1, ip, r7, r5
   1981c:	mvnne	r6, #0
   19820:	mla	ip, r7, sl, ip
   19824:	subs	r7, r0, r7
   19828:	sbcs	r7, r3, r6
   1982c:	mla	lr, r6, r5, ip
   19830:	mov	ip, #0
   19834:	movwcc	ip, #1
   19838:	cmp	ip, #0
   1983c:	mvnne	r1, #0
   19840:	mvnne	lr, #0
   19844:	subs	r7, r0, r1
   19848:	sbcs	r7, r3, lr
   1984c:	umull	r0, r7, r1, r5
   19850:	movwcc	r4, #1
   19854:	cmp	r4, #0
   19858:	mla	r1, r1, sl, r7
   1985c:	mvnne	r0, #0
   19860:	cmp	r4, #0
   19864:	mla	r1, lr, r5, r1
   19868:	umull	r6, r3, r0, r5
   1986c:	mvnne	r1, #0
   19870:	mla	r3, r0, sl, r3
   19874:	mla	r7, r1, r5, r3
   19878:	ldr	r3, [sp, #12]
   1987c:	subs	r0, r3, r0
   19880:	ldr	r0, [sp, #8]
   19884:	ldr	r3, [sp, #16]
   19888:	sbcs	r0, r0, r1
   1988c:	mov	r0, #0
   19890:	movwcc	r0, #1
   19894:	cmp	r0, #0
   19898:	mov	r1, r0
   1989c:	ldr	r0, [sp, #20]
   198a0:	mvnne	r7, #0
   198a4:	mvnne	r6, #0
   198a8:	orr	r0, r0, r3
   198ac:	orr	r0, r0, r2
   198b0:	orr	r0, r0, ip
   198b4:	orr	r0, r0, r4
   198b8:	b	199dc <__assert_fail@plt+0x82f8>
   198bc:	mvn	r0, #0
   198c0:	mvn	r1, #0
   198c4:	mov	r2, r5
   198c8:	mov	sl, r3
   198cc:	bl	1a694 <__assert_fail@plt+0x8fb0>
   198d0:	umull	r3, r2, r6, r5
   198d4:	mov	lr, r1
   198d8:	mov	r1, r0
   198dc:	mla	r2, r6, sl, r2
   198e0:	subs	r6, r0, r6
   198e4:	mov	r0, #0
   198e8:	sbcs	r6, lr, r7
   198ec:	mla	r2, r7, r5, r2
   198f0:	movwcc	r0, #1
   198f4:	cmp	r0, #0
   198f8:	str	r0, [sp, #20]
   198fc:	mov	r0, r1
   19900:	mvnne	r3, #0
   19904:	mvnne	r2, #0
   19908:	str	r0, [sp, #16]
   1990c:	subs	r4, r1, r3
   19910:	umull	r7, ip, r3, r5
   19914:	sbcs	r4, lr, r2
   19918:	mov	r4, #0
   1991c:	movwcc	r4, #1
   19920:	mla	r3, r3, sl, ip
   19924:	mov	ip, #0
   19928:	cmp	r4, #0
   1992c:	mla	r2, r2, r5, r3
   19930:	mvnne	r7, #0
   19934:	cmp	r4, #0
   19938:	umull	r1, r6, r7, r5
   1993c:	mvnne	r2, #0
   19940:	mla	r6, r7, sl, r6
   19944:	mla	r3, r2, r5, r6
   19948:	subs	r6, r0, r7
   1994c:	sbcs	r2, lr, r2
   19950:	mov	r2, #0
   19954:	movwcc	ip, #1
   19958:	cmp	ip, #0
   1995c:	mvnne	r1, #0
   19960:	mvnne	r3, #0
   19964:	subs	r6, r0, r1
   19968:	sbcs	r6, lr, r3
   1996c:	umull	r0, r6, r1, r5
   19970:	movwcc	r2, #1
   19974:	cmp	r2, #0
   19978:	mvnne	r0, #0
   1997c:	cmp	r2, #0
   19980:	str	r6, [sp, #12]
   19984:	umull	r6, r7, r0, r5
   19988:	mla	r7, r0, sl, r7
   1998c:	str	r7, [sp, #8]
   19990:	ldr	r7, [sp, #12]
   19994:	mla	r1, r1, sl, r7
   19998:	mla	r1, r3, r5, r1
   1999c:	ldr	r3, [sp, #8]
   199a0:	mvnne	r1, #0
   199a4:	mla	r7, r1, r5, r3
   199a8:	ldr	r3, [sp, #16]
   199ac:	subs	r0, r3, r0
   199b0:	sbcs	r0, lr, r1
   199b4:	mov	r0, #0
   199b8:	movwcc	r0, #1
   199bc:	cmp	r0, #0
   199c0:	mov	r1, r0
   199c4:	ldr	r0, [sp, #20]
   199c8:	mvnne	r7, #0
   199cc:	mvnne	r6, #0
   199d0:	orr	r0, r0, r4
   199d4:	orr	r0, r0, ip
   199d8:	orr	r0, r0, r2
   199dc:	orr	r3, r0, r1
   199e0:	b	19c10 <__assert_fail@plt+0x852c>
   199e4:	mvn	r0, #0
   199e8:	mvn	r1, #0
   199ec:	mov	r2, r5
   199f0:	mov	sl, r3
   199f4:	bl	1a694 <__assert_fail@plt+0x8fb0>
   199f8:	mov	ip, r1
   199fc:	subs	r1, r0, r6
   19a00:	umull	r3, lr, r6, r5
   19a04:	mov	r2, r5
   19a08:	sbcs	r1, ip, r7
   19a0c:	mov	r1, #0
   19a10:	str	ip, [sp, #4]
   19a14:	movwcc	r1, #1
   19a18:	mla	r6, r6, sl, lr
   19a1c:	cmp	r1, #0
   19a20:	mla	r7, r7, r2, r6
   19a24:	str	r1, [sp, #20]
   19a28:	mvnne	r3, #0
   19a2c:	cmp	r1, #0
   19a30:	mov	r1, r0
   19a34:	umull	r4, r5, r3, r5
   19a38:	mvnne	r7, #0
   19a3c:	mov	lr, r1
   19a40:	mla	r5, r3, sl, r5
   19a44:	subs	r3, r0, r3
   19a48:	sbcs	r0, ip, r7
   19a4c:	mov	r0, #0
   19a50:	mla	r5, r7, r2, r5
   19a54:	movwcc	r0, #1
   19a58:	cmp	r0, #0
   19a5c:	str	r0, [sp, #16]
   19a60:	mvnne	r4, #0
   19a64:	mvnne	r5, #0
   19a68:	subs	r0, r1, r4
   19a6c:	mov	r1, #0
   19a70:	sbcs	r0, ip, r5
   19a74:	umull	r3, r0, r4, r2
   19a78:	movwcc	r1, #1
   19a7c:	cmp	r1, #0
   19a80:	mla	r0, r4, sl, r0
   19a84:	mov	r4, lr
   19a88:	str	r1, [sp, #12]
   19a8c:	mvnne	r3, #0
   19a90:	cmp	r1, #0
   19a94:	mla	r0, r5, r2, r0
   19a98:	str	r4, [sp]
   19a9c:	umull	r7, r6, r3, r2
   19aa0:	mvnne	r0, #0
   19aa4:	mla	r6, r3, sl, r6
   19aa8:	subs	r3, lr, r3
   19aac:	mov	r3, #0
   19ab0:	mla	r5, r0, r2, r6
   19ab4:	sbcs	r0, ip, r0
   19ab8:	mov	r0, #0
   19abc:	movwcc	r0, #1
   19ac0:	cmp	r0, #0
   19ac4:	str	r0, [sp, #8]
   19ac8:	mvnne	r7, #0
   19acc:	mvnne	r5, #0
   19ad0:	subs	r0, lr, r7
   19ad4:	sbcs	r0, ip, r5
   19ad8:	umull	r6, r0, r7, r2
   19adc:	movwcc	r3, #1
   19ae0:	cmp	r3, #0
   19ae4:	mla	r7, r7, sl, r0
   19ae8:	mov	r0, ip
   19aec:	mvnne	r6, #0
   19af0:	cmp	r3, #0
   19af4:	mla	r7, r5, r2, r7
   19af8:	mov	r5, #0
   19afc:	umull	r1, lr, r6, r2
   19b00:	mvnne	r7, #0
   19b04:	mla	lr, r6, sl, lr
   19b08:	subs	r6, r4, r6
   19b0c:	mla	lr, r7, r2, lr
   19b10:	sbcs	r7, ip, r7
   19b14:	mov	ip, #0
   19b18:	movwcc	ip, #1
   19b1c:	cmp	ip, #0
   19b20:	mvnne	r1, #0
   19b24:	mvnne	lr, #0
   19b28:	subs	r7, r4, r1
   19b2c:	sbcs	r7, r0, lr
   19b30:	umull	r0, r7, r1, r2
   19b34:	movwcc	r5, #1
   19b38:	cmp	r5, #0
   19b3c:	mla	r1, r1, sl, r7
   19b40:	mvnne	r0, #0
   19b44:	cmp	r5, #0
   19b48:	mla	r1, lr, r2, r1
   19b4c:	umull	r6, r4, r0, r2
   19b50:	mvnne	r1, #0
   19b54:	mla	r4, r0, sl, r4
   19b58:	mla	r7, r1, r2, r4
   19b5c:	ldr	r2, [sp]
   19b60:	subs	r0, r2, r0
   19b64:	ldr	r0, [sp, #4]
   19b68:	ldr	r2, [sp, #16]
   19b6c:	sbcs	r0, r0, r1
   19b70:	mov	r0, #0
   19b74:	movwcc	r0, #1
   19b78:	cmp	r0, #0
   19b7c:	mov	r1, r0
   19b80:	ldr	r0, [sp, #20]
   19b84:	mvnne	r7, #0
   19b88:	mvnne	r6, #0
   19b8c:	orr	r0, r0, r2
   19b90:	ldr	r2, [sp, #12]
   19b94:	orr	r0, r0, r2
   19b98:	ldr	r2, [sp, #8]
   19b9c:	orr	r0, r0, r2
   19ba0:	orr	r0, r0, r3
   19ba4:	orr	r0, r0, ip
   19ba8:	orr	r0, r0, r5
   19bac:	orr	r0, r0, r1
   19bb0:	and	r3, r0, #1
   19bb4:	b	19c10 <__assert_fail@plt+0x852c>
   19bb8:	mov	r1, #0
   19bbc:	lsl	r2, r7, #9
   19bc0:	lsl	r0, r6, #9
   19bc4:	lsr	r3, r7, #23
   19bc8:	cmp	r1, r7, lsr #23
   19bcc:	orr	r2, r2, r6, lsr #23
   19bd0:	mvnne	r0, #0
   19bd4:	movwne	r3, #1
   19bd8:	cmp	r1, r7, lsr #23
   19bdc:	mvnne	r2, #0
   19be0:	mov	r6, r0
   19be4:	mov	r7, r2
   19be8:	b	19c10 <__assert_fail@plt+0x852c>
   19bec:	lsl	r1, r7, #1
   19bf0:	cmp	r7, #0
   19bf4:	lsl	r0, r6, #1
   19bf8:	lsr	r3, r7, #31
   19bfc:	orr	r1, r1, r6, lsr #31
   19c00:	mvnmi	r0, #0
   19c04:	mvnmi	r1, #0
   19c08:	mov	r6, r0
   19c0c:	mov	r7, r1
   19c10:	ldr	r1, [sp, #32]
   19c14:	ldr	r2, [sp, #28]
   19c18:	orr	r8, r3, r8
   19c1c:	add	r0, r1, r2
   19c20:	str	r0, [r9]
   19c24:	ldrb	r0, [r1, r2]
   19c28:	cmp	r0, #0
   19c2c:	orrne	r8, r8, #2
   19c30:	ldr	r0, [sp, #36]	; 0x24
   19c34:	strd	r6, [r0]
   19c38:	mov	r0, r8
   19c3c:	sub	sp, fp, #28
   19c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c44:	movw	r0, #48039	; 0xbba7
   19c48:	movw	r1, #48077	; 0xbbcd
   19c4c:	movw	r3, #48093	; 0xbbdd
   19c50:	mov	r2, #85	; 0x55
   19c54:	movt	r0, #1
   19c58:	movt	r1, #1
   19c5c:	movt	r3, #1
   19c60:	bl	116e4 <__assert_fail@plt>
   19c64:	clz	r2, r1
   19c68:	clz	r3, r0
   19c6c:	lsr	r2, r2, #5
   19c70:	lsr	r3, r3, #5
   19c74:	orrs	r2, r3, r2
   19c78:	movwne	r1, #1
   19c7c:	movwne	r0, #1
   19c80:	cmp	r1, #0
   19c84:	beq	19cb4 <__assert_fail@plt+0x85d0>
   19c88:	mvn	r2, #-2147483648	; 0x80000000
   19c8c:	udiv	r2, r2, r1
   19c90:	cmp	r2, r0
   19c94:	bcs	19cb4 <__assert_fail@plt+0x85d0>
   19c98:	push	{fp, lr}
   19c9c:	mov	fp, sp
   19ca0:	bl	11558 <__errno_location@plt>
   19ca4:	mov	r1, #12
   19ca8:	str	r1, [r0]
   19cac:	mov	r0, #0
   19cb0:	pop	{fp, pc}
   19cb4:	b	11360 <calloc@plt>
   19cb8:	cmp	r0, #0
   19cbc:	movweq	r0, #1
   19cc0:	cmn	r0, #1
   19cc4:	ble	19ccc <__assert_fail@plt+0x85e8>
   19cc8:	b	114d4 <malloc@plt>
   19ccc:	push	{fp, lr}
   19cd0:	mov	fp, sp
   19cd4:	bl	11558 <__errno_location@plt>
   19cd8:	mov	r1, #12
   19cdc:	str	r1, [r0]
   19ce0:	mov	r0, #0
   19ce4:	pop	{fp, pc}
   19ce8:	push	{fp, lr}
   19cec:	mov	fp, sp
   19cf0:	cmp	r0, #0
   19cf4:	beq	19d10 <__assert_fail@plt+0x862c>
   19cf8:	cmp	r1, #0
   19cfc:	beq	19d1c <__assert_fail@plt+0x8638>
   19d00:	cmn	r1, #1
   19d04:	ble	19d28 <__assert_fail@plt+0x8644>
   19d08:	pop	{fp, lr}
   19d0c:	b	11420 <realloc@plt>
   19d10:	mov	r0, r1
   19d14:	pop	{fp, lr}
   19d18:	b	19cb8 <__assert_fail@plt+0x85d4>
   19d1c:	bl	143e8 <__assert_fail@plt+0x2d04>
   19d20:	mov	r0, #0
   19d24:	pop	{fp, pc}
   19d28:	bl	11558 <__errno_location@plt>
   19d2c:	mov	r1, #12
   19d30:	str	r1, [r0]
   19d34:	mov	r0, #0
   19d38:	pop	{fp, pc}
   19d3c:	push	{r4, r5, r6, sl, fp, lr}
   19d40:	add	fp, sp, #16
   19d44:	mov	r4, r0
   19d48:	bl	11498 <__fpending@plt>
   19d4c:	ldr	r6, [r4]
   19d50:	mov	r5, r0
   19d54:	mov	r0, r4
   19d58:	bl	19dc0 <__assert_fail@plt+0x86dc>
   19d5c:	tst	r6, #32
   19d60:	bne	19d98 <__assert_fail@plt+0x86b4>
   19d64:	cmp	r0, #0
   19d68:	mov	r4, r0
   19d6c:	mvnne	r4, #0
   19d70:	cmp	r5, #0
   19d74:	bne	19da4 <__assert_fail@plt+0x86c0>
   19d78:	cmp	r0, #0
   19d7c:	beq	19da4 <__assert_fail@plt+0x86c0>
   19d80:	bl	11558 <__errno_location@plt>
   19d84:	ldr	r0, [r0]
   19d88:	subs	r4, r0, #9
   19d8c:	mvnne	r4, #0
   19d90:	mov	r0, r4
   19d94:	pop	{r4, r5, r6, sl, fp, pc}
   19d98:	mvn	r4, #0
   19d9c:	cmp	r0, #0
   19da0:	beq	19dac <__assert_fail@plt+0x86c8>
   19da4:	mov	r0, r4
   19da8:	pop	{r4, r5, r6, sl, fp, pc}
   19dac:	bl	11558 <__errno_location@plt>
   19db0:	mov	r1, #0
   19db4:	str	r1, [r0]
   19db8:	mov	r0, r4
   19dbc:	pop	{r4, r5, r6, sl, fp, pc}
   19dc0:	push	{r4, r5, r6, sl, fp, lr}
   19dc4:	add	fp, sp, #16
   19dc8:	sub	sp, sp, #8
   19dcc:	mov	r4, r0
   19dd0:	bl	115b8 <fileno@plt>
   19dd4:	cmn	r0, #1
   19dd8:	ble	19e4c <__assert_fail@plt+0x8768>
   19ddc:	mov	r0, r4
   19de0:	bl	114ec <__freading@plt>
   19de4:	cmp	r0, #0
   19de8:	beq	19e14 <__assert_fail@plt+0x8730>
   19dec:	mov	r0, r4
   19df0:	bl	115b8 <fileno@plt>
   19df4:	mov	r1, #1
   19df8:	mov	r2, #0
   19dfc:	mov	r3, #0
   19e00:	str	r1, [sp]
   19e04:	bl	11474 <lseek64@plt>
   19e08:	and	r0, r0, r1
   19e0c:	cmn	r0, #1
   19e10:	beq	19e4c <__assert_fail@plt+0x8768>
   19e14:	mov	r0, r4
   19e18:	bl	19e5c <__assert_fail@plt+0x8778>
   19e1c:	cmp	r0, #0
   19e20:	beq	19e4c <__assert_fail@plt+0x8768>
   19e24:	bl	11558 <__errno_location@plt>
   19e28:	ldr	r6, [r0]
   19e2c:	mov	r5, r0
   19e30:	mov	r0, r4
   19e34:	bl	115dc <fclose@plt>
   19e38:	cmp	r6, #0
   19e3c:	strne	r6, [r5]
   19e40:	mvnne	r0, #0
   19e44:	sub	sp, fp, #16
   19e48:	pop	{r4, r5, r6, sl, fp, pc}
   19e4c:	mov	r0, r4
   19e50:	sub	sp, fp, #16
   19e54:	pop	{r4, r5, r6, sl, fp, lr}
   19e58:	b	115dc <fclose@plt>
   19e5c:	push	{r4, sl, fp, lr}
   19e60:	add	fp, sp, #8
   19e64:	sub	sp, sp, #8
   19e68:	mov	r4, r0
   19e6c:	cmp	r0, #0
   19e70:	beq	19ea8 <__assert_fail@plt+0x87c4>
   19e74:	mov	r0, r4
   19e78:	bl	114ec <__freading@plt>
   19e7c:	cmp	r0, #0
   19e80:	beq	19ea8 <__assert_fail@plt+0x87c4>
   19e84:	ldrb	r0, [r4, #1]
   19e88:	tst	r0, #1
   19e8c:	beq	19ea8 <__assert_fail@plt+0x87c4>
   19e90:	mov	r0, #1
   19e94:	mov	r2, #0
   19e98:	mov	r3, #0
   19e9c:	str	r0, [sp]
   19ea0:	mov	r0, r4
   19ea4:	bl	19f68 <__assert_fail@plt+0x8884>
   19ea8:	mov	r0, r4
   19eac:	sub	sp, fp, #8
   19eb0:	pop	{r4, sl, fp, lr}
   19eb4:	b	1139c <fflush@plt>
   19eb8:	push	{r4, r5, r6, r7, fp, lr}
   19ebc:	add	fp, sp, #16
   19ec0:	mov	r5, r1
   19ec4:	bl	11648 <fopen64@plt>
   19ec8:	mov	r4, #0
   19ecc:	cmp	r0, #0
   19ed0:	beq	19f38 <__assert_fail@plt+0x8854>
   19ed4:	mov	r6, r0
   19ed8:	bl	115b8 <fileno@plt>
   19edc:	cmp	r0, #2
   19ee0:	bhi	19f40 <__assert_fail@plt+0x885c>
   19ee4:	bl	1a0e8 <__assert_fail@plt+0x8a04>
   19ee8:	cmn	r0, #1
   19eec:	ble	19f48 <__assert_fail@plt+0x8864>
   19ef0:	mov	r7, r0
   19ef4:	mov	r0, r6
   19ef8:	bl	19dc0 <__assert_fail@plt+0x86dc>
   19efc:	cmp	r0, #0
   19f00:	bne	19f1c <__assert_fail@plt+0x8838>
   19f04:	mov	r0, r7
   19f08:	mov	r1, r5
   19f0c:	bl	11354 <fdopen@plt>
   19f10:	mov	r4, r0
   19f14:	cmp	r0, #0
   19f18:	bne	19f38 <__assert_fail@plt+0x8854>
   19f1c:	bl	11558 <__errno_location@plt>
   19f20:	ldr	r5, [r0]
   19f24:	mov	r4, r0
   19f28:	mov	r0, r7
   19f2c:	bl	116d8 <close@plt>
   19f30:	str	r5, [r4]
   19f34:	mov	r4, #0
   19f38:	mov	r0, r4
   19f3c:	pop	{r4, r5, r6, r7, fp, pc}
   19f40:	mov	r0, r6
   19f44:	pop	{r4, r5, r6, r7, fp, pc}
   19f48:	bl	11558 <__errno_location@plt>
   19f4c:	ldr	r7, [r0]
   19f50:	mov	r5, r0
   19f54:	mov	r0, r6
   19f58:	bl	19dc0 <__assert_fail@plt+0x86dc>
   19f5c:	mov	r0, r4
   19f60:	str	r7, [r5]
   19f64:	pop	{r4, r5, r6, r7, fp, pc}
   19f68:	push	{r4, r5, r6, r7, fp, lr}
   19f6c:	add	fp, sp, #16
   19f70:	sub	sp, sp, #8
   19f74:	mov	r4, r0
   19f78:	ldr	r0, [r0, #4]
   19f7c:	mov	r5, r3
   19f80:	mov	r6, r2
   19f84:	ldr	r1, [r4, #8]
   19f88:	cmp	r1, r0
   19f8c:	bne	19fa8 <__assert_fail@plt+0x88c4>
   19f90:	ldrd	r0, [r4, #16]
   19f94:	cmp	r1, r0
   19f98:	bne	19fa8 <__assert_fail@plt+0x88c4>
   19f9c:	ldr	r0, [r4, #36]	; 0x24
   19fa0:	cmp	r0, #0
   19fa4:	beq	19fc0 <__assert_fail@plt+0x88dc>
   19fa8:	mov	r0, r4
   19fac:	mov	r2, r6
   19fb0:	mov	r3, r5
   19fb4:	sub	sp, fp, #16
   19fb8:	pop	{r4, r5, r6, r7, fp, lr}
   19fbc:	b	115e8 <fseeko64@plt>
   19fc0:	ldr	r7, [fp, #8]
   19fc4:	mov	r0, r4
   19fc8:	bl	115b8 <fileno@plt>
   19fcc:	mov	r2, r6
   19fd0:	mov	r3, r5
   19fd4:	str	r7, [sp]
   19fd8:	bl	11474 <lseek64@plt>
   19fdc:	and	r2, r0, r1
   19fe0:	cmn	r2, #1
   19fe4:	beq	1a004 <__assert_fail@plt+0x8920>
   19fe8:	strd	r0, [r4, #80]	; 0x50
   19fec:	ldr	r0, [r4]
   19ff0:	bic	r0, r0, #16
   19ff4:	str	r0, [r4]
   19ff8:	mov	r0, #0
   19ffc:	sub	sp, fp, #16
   1a000:	pop	{r4, r5, r6, r7, fp, pc}
   1a004:	mvn	r0, #0
   1a008:	sub	sp, fp, #16
   1a00c:	pop	{r4, r5, r6, r7, fp, pc}
   1a010:	push	{fp, lr}
   1a014:	mov	fp, sp
   1a018:	mov	r0, #14
   1a01c:	bl	11630 <nl_langinfo@plt>
   1a020:	movw	r1, #44671	; 0xae7f
   1a024:	cmp	r0, #0
   1a028:	movt	r1, #1
   1a02c:	movne	r1, r0
   1a030:	movw	r0, #48172	; 0xbc2c
   1a034:	ldrb	r2, [r1]
   1a038:	movt	r0, #1
   1a03c:	cmp	r2, #0
   1a040:	movne	r0, r1
   1a044:	pop	{fp, pc}
   1a048:	push	{r4, r5, r6, r7, fp, lr}
   1a04c:	add	fp, sp, #16
   1a050:	sub	sp, sp, #8
   1a054:	cmp	r0, #0
   1a058:	add	r5, sp, #4
   1a05c:	mov	r7, r2
   1a060:	mov	r4, r1
   1a064:	movne	r5, r0
   1a068:	mov	r0, r5
   1a06c:	bl	114a4 <mbrtowc@plt>
   1a070:	mov	r6, r0
   1a074:	cmp	r7, #0
   1a078:	beq	1a0a0 <__assert_fail@plt+0x89bc>
   1a07c:	cmn	r6, #2
   1a080:	bcc	1a0a0 <__assert_fail@plt+0x89bc>
   1a084:	mov	r0, #0
   1a088:	bl	1a0f4 <__assert_fail@plt+0x8a10>
   1a08c:	cmp	r0, #0
   1a090:	bne	1a0a0 <__assert_fail@plt+0x89bc>
   1a094:	ldrb	r0, [r4]
   1a098:	mov	r6, #1
   1a09c:	str	r0, [r5]
   1a0a0:	mov	r0, r6
   1a0a4:	sub	sp, fp, #16
   1a0a8:	pop	{r4, r5, r6, r7, fp, pc}
   1a0ac:	cmp	r2, #0
   1a0b0:	beq	1a0e0 <__assert_fail@plt+0x89fc>
   1a0b4:	mvn	r3, #0
   1a0b8:	udiv	r3, r3, r2
   1a0bc:	cmp	r3, r1
   1a0c0:	bcs	1a0e0 <__assert_fail@plt+0x89fc>
   1a0c4:	push	{fp, lr}
   1a0c8:	mov	fp, sp
   1a0cc:	bl	11558 <__errno_location@plt>
   1a0d0:	mov	r1, #12
   1a0d4:	str	r1, [r0]
   1a0d8:	mov	r0, #0
   1a0dc:	pop	{fp, pc}
   1a0e0:	mul	r1, r2, r1
   1a0e4:	b	19ce8 <__assert_fail@plt+0x8604>
   1a0e8:	mov	r1, #0
   1a0ec:	mov	r2, #3
   1a0f0:	b	141cc <__assert_fail@plt+0x2ae8>
   1a0f4:	push	{r4, sl, fp, lr}
   1a0f8:	add	fp, sp, #8
   1a0fc:	sub	sp, sp, #264	; 0x108
   1a100:	add	r1, sp, #7
   1a104:	movw	r2, #257	; 0x101
   1a108:	bl	1a160 <__assert_fail@plt+0x8a7c>
   1a10c:	mov	r4, #0
   1a110:	cmp	r0, #0
   1a114:	bne	1a154 <__assert_fail@plt+0x8a70>
   1a118:	movw	r1, #48178	; 0xbc32
   1a11c:	add	r0, sp, #7
   1a120:	mov	r2, #2
   1a124:	movt	r1, #1
   1a128:	bl	11528 <bcmp@plt>
   1a12c:	cmp	r0, #0
   1a130:	beq	1a154 <__assert_fail@plt+0x8a70>
   1a134:	movw	r1, #48180	; 0xbc34
   1a138:	add	r0, sp, #7
   1a13c:	mov	r2, #6
   1a140:	movt	r1, #1
   1a144:	bl	11528 <bcmp@plt>
   1a148:	cmp	r0, #0
   1a14c:	mov	r4, r0
   1a150:	movwne	r4, #1
   1a154:	mov	r0, r4
   1a158:	sub	sp, fp, #8
   1a15c:	pop	{r4, sl, fp, pc}
   1a160:	push	{r4, r5, r6, r7, fp, lr}
   1a164:	add	fp, sp, #16
   1a168:	mov	r4, r1
   1a16c:	mov	r1, #0
   1a170:	mov	r6, r2
   1a174:	bl	1160c <setlocale@plt>
   1a178:	cmp	r0, #0
   1a17c:	beq	1a1ac <__assert_fail@plt+0x8ac8>
   1a180:	mov	r7, r0
   1a184:	bl	11534 <strlen@plt>
   1a188:	cmp	r0, r6
   1a18c:	bcs	1a1c8 <__assert_fail@plt+0x8ae4>
   1a190:	add	r2, r0, #1
   1a194:	mov	r0, r4
   1a198:	mov	r1, r7
   1a19c:	bl	113cc <memcpy@plt>
   1a1a0:	mov	r5, #0
   1a1a4:	mov	r0, r5
   1a1a8:	pop	{r4, r5, r6, r7, fp, pc}
   1a1ac:	mov	r5, #22
   1a1b0:	cmp	r6, #0
   1a1b4:	beq	1a1f0 <__assert_fail@plt+0x8b0c>
   1a1b8:	mov	r0, #0
   1a1bc:	strb	r0, [r4]
   1a1c0:	mov	r0, r5
   1a1c4:	pop	{r4, r5, r6, r7, fp, pc}
   1a1c8:	mov	r5, #34	; 0x22
   1a1cc:	cmp	r6, #0
   1a1d0:	beq	1a1f0 <__assert_fail@plt+0x8b0c>
   1a1d4:	sub	r6, r6, #1
   1a1d8:	mov	r0, r4
   1a1dc:	mov	r1, r7
   1a1e0:	mov	r2, r6
   1a1e4:	bl	113cc <memcpy@plt>
   1a1e8:	mov	r0, #0
   1a1ec:	strb	r0, [r4, r6]
   1a1f0:	mov	r0, r5
   1a1f4:	pop	{r4, r5, r6, r7, fp, pc}
   1a1f8:	mov	r1, #0
   1a1fc:	b	1160c <setlocale@plt>
   1a200:	eor	r1, r1, #-2147483648	; 0x80000000
   1a204:	b	1a20c <__assert_fail@plt+0x8b28>
   1a208:	eor	r3, r3, #-2147483648	; 0x80000000
   1a20c:	push	{r4, r5, lr}
   1a210:	lsl	r4, r1, #1
   1a214:	lsl	r5, r3, #1
   1a218:	teq	r4, r5
   1a21c:	teqeq	r0, r2
   1a220:	orrsne	ip, r4, r0
   1a224:	orrsne	ip, r5, r2
   1a228:	mvnsne	ip, r4, asr #21
   1a22c:	mvnsne	ip, r5, asr #21
   1a230:	beq	1a41c <__assert_fail@plt+0x8d38>
   1a234:	lsr	r4, r4, #21
   1a238:	rsbs	r5, r4, r5, lsr #21
   1a23c:	rsblt	r5, r5, #0
   1a240:	ble	1a260 <__assert_fail@plt+0x8b7c>
   1a244:	add	r4, r4, r5
   1a248:	eor	r2, r0, r2
   1a24c:	eor	r3, r1, r3
   1a250:	eor	r0, r2, r0
   1a254:	eor	r1, r3, r1
   1a258:	eor	r2, r0, r2
   1a25c:	eor	r3, r1, r3
   1a260:	cmp	r5, #54	; 0x36
   1a264:	pophi	{r4, r5, pc}
   1a268:	tst	r1, #-2147483648	; 0x80000000
   1a26c:	lsl	r1, r1, #12
   1a270:	mov	ip, #1048576	; 0x100000
   1a274:	orr	r1, ip, r1, lsr #12
   1a278:	beq	1a284 <__assert_fail@plt+0x8ba0>
   1a27c:	rsbs	r0, r0, #0
   1a280:	rsc	r1, r1, #0
   1a284:	tst	r3, #-2147483648	; 0x80000000
   1a288:	lsl	r3, r3, #12
   1a28c:	orr	r3, ip, r3, lsr #12
   1a290:	beq	1a29c <__assert_fail@plt+0x8bb8>
   1a294:	rsbs	r2, r2, #0
   1a298:	rsc	r3, r3, #0
   1a29c:	teq	r4, r5
   1a2a0:	beq	1a404 <__assert_fail@plt+0x8d20>
   1a2a4:	sub	r4, r4, #1
   1a2a8:	rsbs	lr, r5, #32
   1a2ac:	blt	1a2c8 <__assert_fail@plt+0x8be4>
   1a2b0:	lsl	ip, r2, lr
   1a2b4:	adds	r0, r0, r2, lsr r5
   1a2b8:	adc	r1, r1, #0
   1a2bc:	adds	r0, r0, r3, lsl lr
   1a2c0:	adcs	r1, r1, r3, asr r5
   1a2c4:	b	1a2e4 <__assert_fail@plt+0x8c00>
   1a2c8:	sub	r5, r5, #32
   1a2cc:	add	lr, lr, #32
   1a2d0:	cmp	r2, #1
   1a2d4:	lsl	ip, r3, lr
   1a2d8:	orrcs	ip, ip, #2
   1a2dc:	adds	r0, r0, r3, asr r5
   1a2e0:	adcs	r1, r1, r3, asr #31
   1a2e4:	and	r5, r1, #-2147483648	; 0x80000000
   1a2e8:	bpl	1a2f8 <__assert_fail@plt+0x8c14>
   1a2ec:	rsbs	ip, ip, #0
   1a2f0:	rscs	r0, r0, #0
   1a2f4:	rsc	r1, r1, #0
   1a2f8:	cmp	r1, #1048576	; 0x100000
   1a2fc:	bcc	1a33c <__assert_fail@plt+0x8c58>
   1a300:	cmp	r1, #2097152	; 0x200000
   1a304:	bcc	1a324 <__assert_fail@plt+0x8c40>
   1a308:	lsrs	r1, r1, #1
   1a30c:	rrxs	r0, r0
   1a310:	rrx	ip, ip
   1a314:	add	r4, r4, #1
   1a318:	lsl	r2, r4, #21
   1a31c:	cmn	r2, #4194304	; 0x400000
   1a320:	bcs	1a47c <__assert_fail@plt+0x8d98>
   1a324:	cmp	ip, #-2147483648	; 0x80000000
   1a328:	lsrseq	ip, r0, #1
   1a32c:	adcs	r0, r0, #0
   1a330:	adc	r1, r1, r4, lsl #20
   1a334:	orr	r1, r1, r5
   1a338:	pop	{r4, r5, pc}
   1a33c:	lsls	ip, ip, #1
   1a340:	adcs	r0, r0, r0
   1a344:	adc	r1, r1, r1
   1a348:	tst	r1, #1048576	; 0x100000
   1a34c:	sub	r4, r4, #1
   1a350:	bne	1a324 <__assert_fail@plt+0x8c40>
   1a354:	teq	r1, #0
   1a358:	moveq	r1, r0
   1a35c:	moveq	r0, #0
   1a360:	clz	r3, r1
   1a364:	addeq	r3, r3, #32
   1a368:	sub	r3, r3, #11
   1a36c:	subs	r2, r3, #32
   1a370:	bge	1a394 <__assert_fail@plt+0x8cb0>
   1a374:	adds	r2, r2, #12
   1a378:	ble	1a390 <__assert_fail@plt+0x8cac>
   1a37c:	add	ip, r2, #20
   1a380:	rsb	r2, r2, #12
   1a384:	lsl	r0, r1, ip
   1a388:	lsr	r1, r1, r2
   1a38c:	b	1a3a4 <__assert_fail@plt+0x8cc0>
   1a390:	add	r2, r2, #20
   1a394:	rsble	ip, r2, #32
   1a398:	lsl	r1, r1, r2
   1a39c:	orrle	r1, r1, r0, lsr ip
   1a3a0:	lslle	r0, r0, r2
   1a3a4:	subs	r4, r4, r3
   1a3a8:	addge	r1, r1, r4, lsl #20
   1a3ac:	orrge	r1, r1, r5
   1a3b0:	popge	{r4, r5, pc}
   1a3b4:	mvn	r4, r4
   1a3b8:	subs	r4, r4, #31
   1a3bc:	bge	1a3f8 <__assert_fail@plt+0x8d14>
   1a3c0:	adds	r4, r4, #12
   1a3c4:	bgt	1a3e0 <__assert_fail@plt+0x8cfc>
   1a3c8:	add	r4, r4, #20
   1a3cc:	rsb	r2, r4, #32
   1a3d0:	lsr	r0, r0, r4
   1a3d4:	orr	r0, r0, r1, lsl r2
   1a3d8:	orr	r1, r5, r1, lsr r4
   1a3dc:	pop	{r4, r5, pc}
   1a3e0:	rsb	r4, r4, #12
   1a3e4:	rsb	r2, r4, #32
   1a3e8:	lsr	r0, r0, r2
   1a3ec:	orr	r0, r0, r1, lsl r4
   1a3f0:	mov	r1, r5
   1a3f4:	pop	{r4, r5, pc}
   1a3f8:	lsr	r0, r1, r4
   1a3fc:	mov	r1, r5
   1a400:	pop	{r4, r5, pc}
   1a404:	teq	r4, #0
   1a408:	eor	r3, r3, #1048576	; 0x100000
   1a40c:	eoreq	r1, r1, #1048576	; 0x100000
   1a410:	addeq	r4, r4, #1
   1a414:	subne	r5, r5, #1
   1a418:	b	1a2a4 <__assert_fail@plt+0x8bc0>
   1a41c:	mvns	ip, r4, asr #21
   1a420:	mvnsne	ip, r5, asr #21
   1a424:	beq	1a48c <__assert_fail@plt+0x8da8>
   1a428:	teq	r4, r5
   1a42c:	teqeq	r0, r2
   1a430:	beq	1a444 <__assert_fail@plt+0x8d60>
   1a434:	orrs	ip, r4, r0
   1a438:	moveq	r1, r3
   1a43c:	moveq	r0, r2
   1a440:	pop	{r4, r5, pc}
   1a444:	teq	r1, r3
   1a448:	movne	r1, #0
   1a44c:	movne	r0, #0
   1a450:	popne	{r4, r5, pc}
   1a454:	lsrs	ip, r4, #21
   1a458:	bne	1a46c <__assert_fail@plt+0x8d88>
   1a45c:	lsls	r0, r0, #1
   1a460:	adcs	r1, r1, r1
   1a464:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1a468:	pop	{r4, r5, pc}
   1a46c:	adds	r4, r4, #4194304	; 0x400000
   1a470:	addcc	r1, r1, #1048576	; 0x100000
   1a474:	popcc	{r4, r5, pc}
   1a478:	and	r5, r1, #-2147483648	; 0x80000000
   1a47c:	orr	r1, r5, #2130706432	; 0x7f000000
   1a480:	orr	r1, r1, #15728640	; 0xf00000
   1a484:	mov	r0, #0
   1a488:	pop	{r4, r5, pc}
   1a48c:	mvns	ip, r4, asr #21
   1a490:	movne	r1, r3
   1a494:	movne	r0, r2
   1a498:	mvnseq	ip, r5, asr #21
   1a49c:	movne	r3, r1
   1a4a0:	movne	r2, r0
   1a4a4:	orrs	r4, r0, r1, lsl #12
   1a4a8:	orrseq	r5, r2, r3, lsl #12
   1a4ac:	teqeq	r1, r3
   1a4b0:	orrne	r1, r1, #524288	; 0x80000
   1a4b4:	pop	{r4, r5, pc}
   1a4b8:	teq	r0, #0
   1a4bc:	moveq	r1, #0
   1a4c0:	bxeq	lr
   1a4c4:	push	{r4, r5, lr}
   1a4c8:	mov	r4, #1024	; 0x400
   1a4cc:	add	r4, r4, #50	; 0x32
   1a4d0:	mov	r5, #0
   1a4d4:	mov	r1, #0
   1a4d8:	b	1a354 <__assert_fail@plt+0x8c70>
   1a4dc:	teq	r0, #0
   1a4e0:	moveq	r1, #0
   1a4e4:	bxeq	lr
   1a4e8:	push	{r4, r5, lr}
   1a4ec:	mov	r4, #1024	; 0x400
   1a4f0:	add	r4, r4, #50	; 0x32
   1a4f4:	ands	r5, r0, #-2147483648	; 0x80000000
   1a4f8:	rsbmi	r0, r0, #0
   1a4fc:	mov	r1, #0
   1a500:	b	1a354 <__assert_fail@plt+0x8c70>
   1a504:	lsls	r2, r0, #1
   1a508:	asr	r1, r2, #3
   1a50c:	rrx	r1, r1
   1a510:	lsl	r0, r2, #28
   1a514:	andsne	r3, r2, #-16777216	; 0xff000000
   1a518:	teqne	r3, #-16777216	; 0xff000000
   1a51c:	eorne	r1, r1, #939524096	; 0x38000000
   1a520:	bxne	lr
   1a524:	bics	r2, r2, #-16777216	; 0xff000000
   1a528:	bxeq	lr
   1a52c:	teq	r3, #-16777216	; 0xff000000
   1a530:	orreq	r1, r1, #524288	; 0x80000
   1a534:	bxeq	lr
   1a538:	push	{r4, r5, lr}
   1a53c:	mov	r4, #896	; 0x380
   1a540:	and	r5, r1, #-2147483648	; 0x80000000
   1a544:	bic	r1, r1, #-2147483648	; 0x80000000
   1a548:	b	1a354 <__assert_fail@plt+0x8c70>
   1a54c:	orrs	r2, r0, r1
   1a550:	bxeq	lr
   1a554:	push	{r4, r5, lr}
   1a558:	mov	r5, #0
   1a55c:	b	1a57c <__assert_fail@plt+0x8e98>
   1a560:	orrs	r2, r0, r1
   1a564:	bxeq	lr
   1a568:	push	{r4, r5, lr}
   1a56c:	ands	r5, r1, #-2147483648	; 0x80000000
   1a570:	bpl	1a57c <__assert_fail@plt+0x8e98>
   1a574:	rsbs	r0, r0, #0
   1a578:	rsc	r1, r1, #0
   1a57c:	mov	r4, #1024	; 0x400
   1a580:	add	r4, r4, #50	; 0x32
   1a584:	lsrs	ip, r1, #22
   1a588:	beq	1a2f8 <__assert_fail@plt+0x8c14>
   1a58c:	mov	r2, #3
   1a590:	lsrs	ip, ip, #3
   1a594:	addne	r2, r2, #3
   1a598:	lsrs	ip, ip, #3
   1a59c:	addne	r2, r2, #3
   1a5a0:	add	r2, r2, ip, lsr #3
   1a5a4:	rsb	r3, r2, #32
   1a5a8:	lsl	ip, r0, r3
   1a5ac:	lsr	r0, r0, r2
   1a5b0:	orr	r0, r0, r1, lsl r3
   1a5b4:	lsr	r1, r1, r2
   1a5b8:	add	r4, r4, r2
   1a5bc:	b	1a2f8 <__assert_fail@plt+0x8c14>
   1a5c0:	cmp	r3, #0
   1a5c4:	cmpeq	r2, #0
   1a5c8:	bne	1a5ec <__assert_fail@plt+0x8f08>
   1a5cc:	cmp	r1, #0
   1a5d0:	movlt	r1, #-2147483648	; 0x80000000
   1a5d4:	movlt	r0, #0
   1a5d8:	blt	1a5e8 <__assert_fail@plt+0x8f04>
   1a5dc:	cmpeq	r0, #0
   1a5e0:	mvnne	r1, #-2147483648	; 0x80000000
   1a5e4:	mvnne	r0, #0
   1a5e8:	b	1a6d0 <__assert_fail@plt+0x8fec>
   1a5ec:	sub	sp, sp, #8
   1a5f0:	push	{sp, lr}
   1a5f4:	cmp	r1, #0
   1a5f8:	blt	1a618 <__assert_fail@plt+0x8f34>
   1a5fc:	cmp	r3, #0
   1a600:	blt	1a64c <__assert_fail@plt+0x8f68>
   1a604:	bl	1a720 <__assert_fail@plt+0x903c>
   1a608:	ldr	lr, [sp, #4]
   1a60c:	add	sp, sp, #8
   1a610:	pop	{r2, r3}
   1a614:	bx	lr
   1a618:	rsbs	r0, r0, #0
   1a61c:	sbc	r1, r1, r1, lsl #1
   1a620:	cmp	r3, #0
   1a624:	blt	1a670 <__assert_fail@plt+0x8f8c>
   1a628:	bl	1a720 <__assert_fail@plt+0x903c>
   1a62c:	ldr	lr, [sp, #4]
   1a630:	add	sp, sp, #8
   1a634:	pop	{r2, r3}
   1a638:	rsbs	r0, r0, #0
   1a63c:	sbc	r1, r1, r1, lsl #1
   1a640:	rsbs	r2, r2, #0
   1a644:	sbc	r3, r3, r3, lsl #1
   1a648:	bx	lr
   1a64c:	rsbs	r2, r2, #0
   1a650:	sbc	r3, r3, r3, lsl #1
   1a654:	bl	1a720 <__assert_fail@plt+0x903c>
   1a658:	ldr	lr, [sp, #4]
   1a65c:	add	sp, sp, #8
   1a660:	pop	{r2, r3}
   1a664:	rsbs	r0, r0, #0
   1a668:	sbc	r1, r1, r1, lsl #1
   1a66c:	bx	lr
   1a670:	rsbs	r2, r2, #0
   1a674:	sbc	r3, r3, r3, lsl #1
   1a678:	bl	1a720 <__assert_fail@plt+0x903c>
   1a67c:	ldr	lr, [sp, #4]
   1a680:	add	sp, sp, #8
   1a684:	pop	{r2, r3}
   1a688:	rsbs	r2, r2, #0
   1a68c:	sbc	r3, r3, r3, lsl #1
   1a690:	bx	lr
   1a694:	cmp	r3, #0
   1a698:	cmpeq	r2, #0
   1a69c:	bne	1a6b4 <__assert_fail@plt+0x8fd0>
   1a6a0:	cmp	r1, #0
   1a6a4:	cmpeq	r0, #0
   1a6a8:	mvnne	r1, #0
   1a6ac:	mvnne	r0, #0
   1a6b0:	b	1a6d0 <__assert_fail@plt+0x8fec>
   1a6b4:	sub	sp, sp, #8
   1a6b8:	push	{sp, lr}
   1a6bc:	bl	1a720 <__assert_fail@plt+0x903c>
   1a6c0:	ldr	lr, [sp, #4]
   1a6c4:	add	sp, sp, #8
   1a6c8:	pop	{r2, r3}
   1a6cc:	bx	lr
   1a6d0:	push	{r1, lr}
   1a6d4:	mov	r0, #8
   1a6d8:	bl	11378 <raise@plt>
   1a6dc:	pop	{r1, pc}
   1a6e0:	vmov	d6, r0, r1
   1a6e4:	vldr	d7, [pc, #36]	; 1a710 <__assert_fail@plt+0x902c>
   1a6e8:	vldr	d5, [pc, #40]	; 1a718 <__assert_fail@plt+0x9034>
   1a6ec:	vmul.f64	d7, d6, d7
   1a6f0:	vcvt.u32.f64	s14, d7
   1a6f4:	vcvt.f64.u32	d4, s14
   1a6f8:	vmov	r1, s14
   1a6fc:	vmls.f64	d6, d4, d5
   1a700:	vcvt.u32.f64	s15, d6
   1a704:	vmov	r0, s15
   1a708:	bx	lr
   1a70c:	nop			; (mov r0, r0)
   1a710:	andeq	r0, r0, r0
   1a714:	ldclcc	0, cr0, [r0]
   1a718:	andeq	r0, r0, r0
   1a71c:	mvnsmi	r0, r0
   1a720:	cmp	r1, r3
   1a724:	cmpeq	r0, r2
   1a728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a72c:	mov	r4, r0
   1a730:	movcc	r0, #0
   1a734:	mov	r5, r1
   1a738:	ldr	lr, [sp, #36]	; 0x24
   1a73c:	movcc	r1, r0
   1a740:	bcc	1a83c <__assert_fail@plt+0x9158>
   1a744:	cmp	r3, #0
   1a748:	clzeq	ip, r2
   1a74c:	clzne	ip, r3
   1a750:	addeq	ip, ip, #32
   1a754:	cmp	r5, #0
   1a758:	clzeq	r1, r4
   1a75c:	addeq	r1, r1, #32
   1a760:	clzne	r1, r5
   1a764:	sub	ip, ip, r1
   1a768:	sub	sl, ip, #32
   1a76c:	lsl	r9, r3, ip
   1a770:	rsb	fp, ip, #32
   1a774:	orr	r9, r9, r2, lsl sl
   1a778:	orr	r9, r9, r2, lsr fp
   1a77c:	lsl	r8, r2, ip
   1a780:	cmp	r5, r9
   1a784:	cmpeq	r4, r8
   1a788:	movcc	r0, #0
   1a78c:	movcc	r1, r0
   1a790:	bcc	1a7ac <__assert_fail@plt+0x90c8>
   1a794:	mov	r0, #1
   1a798:	subs	r4, r4, r8
   1a79c:	lsl	r1, r0, sl
   1a7a0:	orr	r1, r1, r0, lsr fp
   1a7a4:	lsl	r0, r0, ip
   1a7a8:	sbc	r5, r5, r9
   1a7ac:	cmp	ip, #0
   1a7b0:	beq	1a83c <__assert_fail@plt+0x9158>
   1a7b4:	lsr	r6, r8, #1
   1a7b8:	orr	r6, r6, r9, lsl #31
   1a7bc:	lsr	r7, r9, #1
   1a7c0:	mov	r2, ip
   1a7c4:	b	1a7e8 <__assert_fail@plt+0x9104>
   1a7c8:	subs	r3, r4, r6
   1a7cc:	sbc	r8, r5, r7
   1a7d0:	adds	r3, r3, r3
   1a7d4:	adc	r8, r8, r8
   1a7d8:	adds	r4, r3, #1
   1a7dc:	adc	r5, r8, #0
   1a7e0:	subs	r2, r2, #1
   1a7e4:	beq	1a804 <__assert_fail@plt+0x9120>
   1a7e8:	cmp	r5, r7
   1a7ec:	cmpeq	r4, r6
   1a7f0:	bcs	1a7c8 <__assert_fail@plt+0x90e4>
   1a7f4:	adds	r4, r4, r4
   1a7f8:	adc	r5, r5, r5
   1a7fc:	subs	r2, r2, #1
   1a800:	bne	1a7e8 <__assert_fail@plt+0x9104>
   1a804:	lsr	r3, r4, ip
   1a808:	orr	r3, r3, r5, lsl fp
   1a80c:	lsr	r2, r5, ip
   1a810:	orr	r3, r3, r5, lsr sl
   1a814:	adds	r0, r0, r4
   1a818:	mov	r4, r3
   1a81c:	lsl	r3, r2, ip
   1a820:	orr	r3, r3, r4, lsl sl
   1a824:	lsl	ip, r4, ip
   1a828:	orr	r3, r3, r4, lsr fp
   1a82c:	adc	r1, r1, r5
   1a830:	subs	r0, r0, ip
   1a834:	mov	r5, r2
   1a838:	sbc	r1, r1, r3
   1a83c:	cmp	lr, #0
   1a840:	strdne	r4, [lr]
   1a844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a848:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a84c:	mov	r7, r0
   1a850:	ldr	r6, [pc, #72]	; 1a8a0 <__assert_fail@plt+0x91bc>
   1a854:	ldr	r5, [pc, #72]	; 1a8a4 <__assert_fail@plt+0x91c0>
   1a858:	add	r6, pc, r6
   1a85c:	add	r5, pc, r5
   1a860:	sub	r6, r6, r5
   1a864:	mov	r8, r1
   1a868:	mov	r9, r2
   1a86c:	bl	11334 <fdopen@plt-0x20>
   1a870:	asrs	r6, r6, #2
   1a874:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a878:	mov	r4, #0
   1a87c:	add	r4, r4, #1
   1a880:	ldr	r3, [r5], #4
   1a884:	mov	r2, r9
   1a888:	mov	r1, r8
   1a88c:	mov	r0, r7
   1a890:	blx	r3
   1a894:	cmp	r6, r4
   1a898:	bne	1a87c <__assert_fail@plt+0x9198>
   1a89c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a8a0:	andeq	r1, r1, ip, lsr #13
   1a8a4:	andeq	r1, r1, r4, lsr #13
   1a8a8:	bx	lr
   1a8ac:	ldr	r3, [pc, #12]	; 1a8c0 <__assert_fail@plt+0x91dc>
   1a8b0:	mov	r1, #0
   1a8b4:	add	r3, pc, r3
   1a8b8:	ldr	r2, [r3]
   1a8bc:	b	11570 <__cxa_atexit@plt>
   1a8c0:	muleq	r1, r0, r8

Disassembly of section .fini:

0001a8c4 <.fini>:
   1a8c4:	push	{r3, lr}
   1a8c8:	pop	{r3, pc}
