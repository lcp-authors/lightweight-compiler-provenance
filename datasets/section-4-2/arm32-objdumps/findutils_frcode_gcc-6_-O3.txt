
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010b40 <.init>:
   10b40:	push	{r3, lr}
   10b44:	bl	112fc <__assert_fail@plt+0x580>
   10b48:	pop	{r3, pc}

Disassembly of section .plt:

00010b4c <calloc@plt-0x14>:
   10b4c:	push	{lr}		; (str lr, [sp, #-4]!)
   10b50:	ldr	lr, [pc, #4]	; 10b5c <calloc@plt-0x4>
   10b54:	add	lr, pc, lr
   10b58:	ldr	pc, [lr, #8]!
   10b5c:	andeq	r7, r1, r4, lsr #9

00010b60 <calloc@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #94208	; 0x17000
   10b68:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b6c <raise@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #94208	; 0x17000
   10b74:	ldr	pc, [ip, #1180]!	; 0x49c

00010b78 <strcmp@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #94208	; 0x17000
   10b80:	ldr	pc, [ip, #1172]!	; 0x494

00010b84 <strtol@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #94208	; 0x17000
   10b8c:	ldr	pc, [ip, #1164]!	; 0x48c

00010b90 <printf@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #94208	; 0x17000
   10b98:	ldr	pc, [ip, #1156]!	; 0x484

00010b9c <fflush@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #94208	; 0x17000
   10ba4:	ldr	pc, [ip, #1148]!	; 0x47c

00010ba8 <free@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #94208	; 0x17000
   10bb0:	ldr	pc, [ip, #1140]!	; 0x474

00010bb4 <ferror@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #94208	; 0x17000
   10bbc:	ldr	pc, [ip, #1132]!	; 0x46c

00010bc0 <_exit@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #94208	; 0x17000
   10bc8:	ldr	pc, [ip, #1124]!	; 0x464

00010bcc <memcpy@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #94208	; 0x17000
   10bd4:	ldr	pc, [ip, #1116]!	; 0x45c

00010bd8 <mbsinit@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #94208	; 0x17000
   10be0:	ldr	pc, [ip, #1108]!	; 0x454

00010be4 <memcmp@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #94208	; 0x17000
   10bec:	ldr	pc, [ip, #1100]!	; 0x44c

00010bf0 <dcgettext@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #94208	; 0x17000
   10bf8:	ldr	pc, [ip, #1092]!	; 0x444

00010bfc <realloc@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #94208	; 0x17000
   10c04:	ldr	pc, [ip, #1084]!	; 0x43c

00010c08 <iswprint@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #94208	; 0x17000
   10c10:	ldr	pc, [ip, #1076]!	; 0x434

00010c14 <fwrite@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #94208	; 0x17000
   10c1c:	ldr	pc, [ip, #1068]!	; 0x42c

00010c20 <lseek64@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #94208	; 0x17000
   10c28:	ldr	pc, [ip, #1060]!	; 0x424

00010c2c <__ctype_get_mb_cur_max@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #94208	; 0x17000
   10c34:	ldr	pc, [ip, #1052]!	; 0x41c

00010c38 <__fpending@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #94208	; 0x17000
   10c40:	ldr	pc, [ip, #1044]!	; 0x414

00010c44 <mbrtowc@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #94208	; 0x17000
   10c4c:	ldr	pc, [ip, #1036]!	; 0x40c

00010c50 <error@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #94208	; 0x17000
   10c58:	ldr	pc, [ip, #1028]!	; 0x404

00010c5c <malloc@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #94208	; 0x17000
   10c64:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c68 <__libc_start_main@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #94208	; 0x17000
   10c70:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c74 <__freading@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #94208	; 0x17000
   10c7c:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c80 <__gmon_start__@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #94208	; 0x17000
   10c88:	ldr	pc, [ip, #996]!	; 0x3e4

00010c8c <getopt_long@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #94208	; 0x17000
   10c94:	ldr	pc, [ip, #988]!	; 0x3dc

00010c98 <__ctype_b_loc@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #94208	; 0x17000
   10ca0:	ldr	pc, [ip, #980]!	; 0x3d4

00010ca4 <exit@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #972]!	; 0x3cc

00010cb0 <strlen@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #964]!	; 0x3c4

00010cbc <fprintf@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #956]!	; 0x3bc

00010cc8 <__errno_location@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #948]!	; 0x3b4

00010cd4 <__cxa_atexit@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #940]!	; 0x3ac

00010ce0 <memset@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #932]!	; 0x3a4

00010cec <fileno@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #924]!	; 0x39c

00010cf8 <fclose@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #916]!	; 0x394

00010d04 <fseeko64@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #908]!	; 0x38c

00010d10 <setlocale@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #900]!	; 0x384

00010d1c <strrchr@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #892]!	; 0x37c

00010d28 <nl_langinfo@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #884]!	; 0x374

00010d34 <fputc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #876]!	; 0x36c

00010d40 <putc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #868]!	; 0x364

00010d4c <getdelim@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #860]!	; 0x35c

00010d58 <fputs@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #852]!	; 0x354

00010d64 <strncmp@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #844]!	; 0x34c

00010d70 <abort@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #836]!	; 0x344

00010d7c <__assert_fail@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #828]!	; 0x33c

Disassembly of section .text:

00010d88 <.text>:
   10d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d8c:	mov	r6, r0
   10d90:	ldr	r0, [r1]
   10d94:	sub	sp, sp, #44	; 0x2c
   10d98:	cmp	r0, #0
   10d9c:	mov	r4, r1
   10da0:	ldreq	r0, [pc, #1208]	; 11260 <__assert_fail@plt+0x4e4>
   10da4:	bl	116bc <__assert_fail@plt+0x940>
   10da8:	ldr	r0, [pc, #1204]	; 11264 <__assert_fail@plt+0x4e8>
   10dac:	bl	17014 <__assert_fail@plt+0x6298>
   10db0:	subs	r9, r0, #0
   10db4:	bne	111d0 <__assert_fail@plt+0x454>
   10db8:	ldr	fp, [pc, #1192]	; 11268 <__assert_fail@plt+0x4ec>
   10dbc:	ldr	r8, [pc, #1192]	; 1126c <__assert_fail@plt+0x4f0>
   10dc0:	mov	r0, fp
   10dc4:	str	fp, [sp, #32]
   10dc8:	bl	1605c <__assert_fail@plt+0x52e0>
   10dcc:	mov	r3, #10
   10dd0:	str	r9, [sp, #12]
   10dd4:	str	r3, [sp, #16]
   10dd8:	ldr	r7, [pc, #1168]	; 11270 <__assert_fail@plt+0x4f4>
   10ddc:	mov	sl, r9
   10de0:	mov	r5, r9
   10de4:	str	r0, [sp, #28]
   10de8:	mov	r0, fp
   10dec:	bl	1605c <__assert_fail@plt+0x52e0>
   10df0:	mov	fp, r0
   10df4:	strb	r9, [r0]
   10df8:	str	r5, [sp]
   10dfc:	mov	r3, r8
   10e00:	mov	r2, r7
   10e04:	mov	r1, r4
   10e08:	mov	r0, r6
   10e0c:	bl	10c8c <getopt_long@plt>
   10e10:	cmn	r0, #1
   10e14:	beq	10f3c <__assert_fail@plt+0x1c0>
   10e18:	cmp	r0, #83	; 0x53
   10e1c:	beq	10e88 <__assert_fail@plt+0x10c>
   10e20:	ble	10e50 <__assert_fail@plt+0xd4>
   10e24:	cmp	r0, #104	; 0x68
   10e28:	beq	10e48 <__assert_fail@plt+0xcc>
   10e2c:	cmp	r0, #118	; 0x76
   10e30:	bne	10e80 <__assert_fail@plt+0x104>
   10e34:	ldr	r0, [pc, #1060]	; 11260 <__assert_fail@plt+0x4e4>
   10e38:	bl	114a8 <__assert_fail@plt+0x72c>
   10e3c:	mov	r0, #0
   10e40:	add	sp, sp, #44	; 0x2c
   10e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e48:	mov	r0, #0
   10e4c:	bl	11418 <__assert_fail@plt+0x69c>
   10e50:	cmp	r0, #48	; 0x30
   10e54:	bne	10e80 <__assert_fail@plt+0x104>
   10e58:	str	r9, [sp, #16]
   10e5c:	b	10df8 <__assert_fail@plt+0x7c>
   10e60:	mov	r2, #5
   10e64:	ldr	r1, [pc, #1032]	; 11274 <__assert_fail@plt+0x4f8>
   10e68:	mov	r0, #0
   10e6c:	bl	10bf0 <dcgettext@plt>
   10e70:	mov	r1, #0
   10e74:	mov	r2, r0
   10e78:	mov	r0, r1
   10e7c:	bl	10c50 <error@plt>
   10e80:	mov	r0, #1
   10e84:	bl	11418 <__assert_fail@plt+0x69c>
   10e88:	bl	10cc8 <__errno_location@plt>
   10e8c:	ldr	r3, [pc, #996]	; 11278 <__assert_fail@plt+0x4fc>
   10e90:	mov	r2, #10
   10e94:	add	r1, sp, #36	; 0x24
   10e98:	ldr	r3, [r3]
   10e9c:	str	r3, [sp, #20]
   10ea0:	str	r5, [r0]
   10ea4:	mov	sl, r0
   10ea8:	mov	r0, r3
   10eac:	bl	10b84 <strtol@plt>
   10eb0:	subs	r3, r0, #0
   10eb4:	str	r3, [sp, #12]
   10eb8:	beq	10f14 <__assert_fail@plt+0x198>
   10ebc:	ldr	r3, [sp, #12]
   10ec0:	sub	r2, r3, #-2147483647	; 0x80000001
   10ec4:	cmn	r2, #3
   10ec8:	bls	111fc <__assert_fail@plt+0x480>
   10ecc:	ldr	r3, [sl]
   10ed0:	cmp	r3, #0
   10ed4:	bne	1123c <__assert_fail@plt+0x4c0>
   10ed8:	ldr	r3, [sp, #36]	; 0x24
   10edc:	ldrb	r3, [r3]
   10ee0:	cmp	r3, #0
   10ee4:	beq	11218 <__assert_fail@plt+0x49c>
   10ee8:	mov	r2, #5
   10eec:	ldr	r1, [pc, #904]	; 1127c <__assert_fail@plt+0x500>
   10ef0:	mov	r0, #0
   10ef4:	bl	10bf0 <dcgettext@plt>
   10ef8:	ldr	r2, [sp, #36]	; 0x24
   10efc:	ldr	r3, [sp, #20]
   10f00:	str	r2, [sp]
   10f04:	mov	r1, #0
   10f08:	mov	r2, r0
   10f0c:	mov	r0, #1
   10f10:	bl	10c50 <error@plt>
   10f14:	ldr	r2, [pc, #860]	; 11278 <__assert_fail@plt+0x4fc>
   10f18:	ldr	r3, [sp, #36]	; 0x24
   10f1c:	ldr	r2, [r2]
   10f20:	cmp	r3, r2
   10f24:	beq	111e0 <__assert_fail@plt+0x464>
   10f28:	ldrb	r3, [r3]
   10f2c:	cmp	r3, #0
   10f30:	bne	10ee8 <__assert_fail@plt+0x16c>
   10f34:	mov	sl, #1
   10f38:	b	10df8 <__assert_fail@plt+0x7c>
   10f3c:	ldr	r3, [pc, #828]	; 11280 <__assert_fail@plt+0x504>
   10f40:	ldr	r3, [r3]
   10f44:	cmp	r6, r3
   10f48:	bne	10e60 <__assert_fail@plt+0xe4>
   10f4c:	cmp	sl, #0
   10f50:	ldr	r5, [pc, #812]	; 11284 <__assert_fail@plt+0x508>
   10f54:	beq	11164 <__assert_fail@plt+0x3e8>
   10f58:	ldr	r3, [sp, #12]
   10f5c:	ldr	r1, [r5]
   10f60:	cmp	r3, #0
   10f64:	movne	r0, #49	; 0x31
   10f68:	moveq	r0, #48	; 0x30
   10f6c:	bl	10d34 <fputc@plt>
   10f70:	ldr	r1, [r5]
   10f74:	mov	r0, #0
   10f78:	bl	10d34 <fputc@plt>
   10f7c:	mov	r7, r9
   10f80:	str	r9, [sp, #12]
   10f84:	ldr	r8, [pc, #732]	; 11268 <__assert_fail@plt+0x4ec>
   10f88:	ldr	r9, [sp, #16]
   10f8c:	mov	r6, #0
   10f90:	ldr	r3, [pc, #752]	; 11288 <__assert_fail@plt+0x50c>
   10f94:	mov	r2, r9
   10f98:	add	r1, sp, #32
   10f9c:	ldr	r3, [r3]
   10fa0:	add	r0, sp, #28
   10fa4:	bl	10d4c <getdelim@plt>
   10fa8:	cmp	r0, #0
   10fac:	ble	11150 <__assert_fail@plt+0x3d4>
   10fb0:	ldr	r3, [sp, #28]
   10fb4:	sub	r0, r0, #1
   10fb8:	ldrb	r2, [r3, r0]
   10fbc:	cmp	r9, r2
   10fc0:	strbeq	r6, [r3, r0]
   10fc4:	beq	10fe8 <__assert_fail@plt+0x26c>
   10fc8:	mov	r2, #5
   10fcc:	ldr	r1, [pc, #696]	; 1128c <__assert_fail@plt+0x510>
   10fd0:	mov	r0, r6
   10fd4:	bl	10bf0 <dcgettext@plt>
   10fd8:	mov	r1, r6
   10fdc:	mov	r2, r0
   10fe0:	mov	r0, #0
   10fe4:	bl	10c50 <error@plt>
   10fe8:	ldr	r0, [sp, #28]
   10fec:	ldrb	r2, [fp]
   10ff0:	ldrb	r3, [r0]
   10ff4:	cmp	r2, #0
   10ff8:	sub	r3, r3, r2
   10ffc:	clz	r3, r3
   11000:	lsr	r3, r3, #5
   11004:	moveq	r3, #0
   11008:	cmp	r3, #0
   1100c:	beq	11148 <__assert_fail@plt+0x3cc>
   11010:	mov	r1, r0
   11014:	sub	ip, fp, #-2147483646	; 0x80000002
   11018:	mov	r4, fp
   1101c:	b	11028 <__assert_fail@plt+0x2ac>
   11020:	cmp	r4, ip
   11024:	beq	1104c <__assert_fail@plt+0x2d0>
   11028:	ldrb	r2, [r4, #1]!
   1102c:	ldrb	r3, [r1, #1]!
   11030:	cmp	r2, #0
   11034:	sub	r3, r3, r2
   11038:	clz	r3, r3
   1103c:	lsr	r3, r3, #5
   11040:	moveq	r3, #0
   11044:	cmp	r3, #0
   11048:	bne	11020 <__assert_fail@plt+0x2a4>
   1104c:	sub	r4, r4, fp
   11050:	sub	r3, r4, r7
   11054:	ldr	r1, [pc, #564]	; 11290 <__assert_fail@plt+0x514>
   11058:	add	r2, r3, #32768	; 0x8000
   1105c:	cmp	r2, r1
   11060:	rsbhi	r3, r7, #0
   11064:	ldrhi	r4, [sp, #12]
   11068:	cmp	sl, #0
   1106c:	bne	110e4 <__assert_fail@plt+0x368>
   11070:	add	r2, r3, #127	; 0x7f
   11074:	cmp	r2, #254	; 0xfe
   11078:	bls	11130 <__assert_fail@plt+0x3b4>
   1107c:	ldr	r1, [r5]
   11080:	mov	r0, #128	; 0x80
   11084:	str	r3, [sp, #16]
   11088:	bl	10d40 <putc@plt>
   1108c:	ldr	r3, [sp, #16]
   11090:	cmn	r0, #1
   11094:	beq	11144 <__assert_fail@plt+0x3c8>
   11098:	ldr	r2, [pc, #500]	; 11294 <__assert_fail@plt+0x518>
   1109c:	ldr	r7, [r5]
   110a0:	cmp	r3, r2
   110a4:	bgt	111bc <__assert_fail@plt+0x440>
   110a8:	cmn	r3, #32768	; 0x8000
   110ac:	blt	111a8 <__assert_fail@plt+0x42c>
   110b0:	mov	r1, r7
   110b4:	asr	r0, r3, #8
   110b8:	str	r3, [sp, #16]
   110bc:	bl	10d40 <putc@plt>
   110c0:	cmn	r0, #1
   110c4:	beq	11144 <__assert_fail@plt+0x3c8>
   110c8:	ldr	r3, [sp, #16]
   110cc:	mov	r1, r7
   110d0:	mov	r0, r3
   110d4:	bl	10d40 <putc@plt>
   110d8:	cmn	r0, #1
   110dc:	beq	11144 <__assert_fail@plt+0x3c8>
   110e0:	ldr	r0, [sp, #28]
   110e4:	add	r0, r0, r4
   110e8:	ldr	r1, [r5]
   110ec:	bl	10d58 <fputs@plt>
   110f0:	cmn	r0, #1
   110f4:	beq	11144 <__assert_fail@plt+0x3c8>
   110f8:	ldr	r1, [r5]
   110fc:	mov	r0, r6
   11100:	bl	10d40 <putc@plt>
   11104:	cmn	r0, #1
   11108:	beq	11144 <__assert_fail@plt+0x3c8>
   1110c:	ldr	r2, [sp, #28]
   11110:	ldr	r3, [sp, #32]
   11114:	str	fp, [sp, #28]
   11118:	str	r8, [sp, #32]
   1111c:	mov	r7, r4
   11120:	mov	fp, r2
   11124:	mov	r8, r3
   11128:	ldr	sl, [sp, #12]
   1112c:	b	10f90 <__assert_fail@plt+0x214>
   11130:	mov	r0, r3
   11134:	ldr	r1, [r5]
   11138:	bl	10d40 <putc@plt>
   1113c:	cmn	r0, #1
   11140:	bne	110e0 <__assert_fail@plt+0x364>
   11144:	bl	113e8 <__assert_fail@plt+0x66c>
   11148:	mov	r4, fp
   1114c:	b	1104c <__assert_fail@plt+0x2d0>
   11150:	ldr	r0, [sp, #28]
   11154:	bl	1678c <__assert_fail@plt+0x5a10>
   11158:	mov	r0, fp
   1115c:	bl	1678c <__assert_fail@plt+0x5a10>
   11160:	b	10e3c <__assert_fail@plt+0xc0>
   11164:	mov	r2, #10
   11168:	mov	r1, #1
   1116c:	ldr	r3, [r5]
   11170:	ldr	r0, [pc, #288]	; 11298 <__assert_fail@plt+0x51c>
   11174:	bl	10c14 <fwrite@plt>
   11178:	cmp	r0, #10
   1117c:	beq	10f7c <__assert_fail@plt+0x200>
   11180:	bl	10cc8 <__errno_location@plt>
   11184:	ldr	r1, [pc, #272]	; 1129c <__assert_fail@plt+0x520>
   11188:	mov	r2, #5
   1118c:	ldr	r4, [r0]
   11190:	mov	r0, #0
   11194:	bl	10bf0 <dcgettext@plt>
   11198:	mov	r1, r4
   1119c:	mov	r2, r0
   111a0:	mov	r0, #1
   111a4:	bl	10c50 <error@plt>
   111a8:	ldr	r3, [pc, #240]	; 112a0 <__assert_fail@plt+0x524>
   111ac:	mov	r2, #105	; 0x69
   111b0:	ldr	r1, [pc, #236]	; 112a4 <__assert_fail@plt+0x528>
   111b4:	ldr	r0, [pc, #236]	; 112a8 <__assert_fail@plt+0x52c>
   111b8:	bl	10d7c <__assert_fail@plt>
   111bc:	ldr	r3, [pc, #220]	; 112a0 <__assert_fail@plt+0x524>
   111c0:	mov	r2, #104	; 0x68
   111c4:	ldr	r1, [pc, #216]	; 112a4 <__assert_fail@plt+0x528>
   111c8:	ldr	r0, [pc, #220]	; 112ac <__assert_fail@plt+0x530>
   111cc:	bl	10d7c <__assert_fail@plt>
   111d0:	bl	10cc8 <__errno_location@plt>
   111d4:	mov	r2, #5
   111d8:	ldr	r1, [pc, #208]	; 112b0 <__assert_fail@plt+0x534>
   111dc:	b	1118c <__assert_fail@plt+0x410>
   111e0:	mov	r2, #5
   111e4:	ldr	r1, [pc, #200]	; 112b4 <__assert_fail@plt+0x538>
   111e8:	bl	10bf0 <dcgettext@plt>
   111ec:	ldr	r1, [sp, #12]
   111f0:	mov	r2, r0
   111f4:	mov	r0, #1
   111f8:	bl	10c50 <error@plt>
   111fc:	ldr	r3, [sp, #36]	; 0x24
   11200:	ldrb	r3, [r3]
   11204:	cmp	r3, #0
   11208:	bne	10ee8 <__assert_fail@plt+0x16c>
   1120c:	ldr	r3, [sp, #12]
   11210:	cmp	r3, #1
   11214:	beq	10f34 <__assert_fail@plt+0x1b8>
   11218:	mov	r2, #5
   1121c:	ldr	r1, [pc, #148]	; 112b8 <__assert_fail@plt+0x53c>
   11220:	mov	r0, #0
   11224:	bl	10bf0 <dcgettext@plt>
   11228:	ldr	r3, [sp, #12]
   1122c:	mov	r1, #0
   11230:	mov	r2, r0
   11234:	mov	r0, #1
   11238:	bl	10c50 <error@plt>
   1123c:	mov	r2, #5
   11240:	ldr	r1, [pc, #116]	; 112bc <__assert_fail@plt+0x540>
   11244:	mov	r0, #0
   11248:	bl	10bf0 <dcgettext@plt>
   1124c:	ldr	r3, [sp, #20]
   11250:	mov	r1, #0
   11254:	mov	r2, r0
   11258:	mov	r0, #1
   1125c:	bl	10c50 <error@plt>
   11260:	strdeq	r7, [r1], -r4
   11264:	ldrdeq	r1, [r1], -r8
   11268:	andeq	r0, r0, r2, lsl #8
   1126c:	andeq	r7, r1, r8, lsr r0
   11270:	andeq	r7, r1, r8, ror #3
   11274:	strdeq	r7, [r1], -r0
   11278:	andeq	r8, r2, r8, lsr r1
   1127c:	muleq	r1, r0, r1
   11280:	andeq	r8, r2, r0, lsr #2
   11284:	andeq	r8, r2, r4, lsr r1
   11288:	andeq	r8, r2, r0, lsr r1
   1128c:	andeq	r7, r1, ip, lsr #4
   11290:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   11294:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   11298:	andeq	r7, r1, r8, ror r0
   1129c:	andeq	r7, r1, r8, lsl #4
   112a0:	andeq	r7, r1, r4, lsl #1
   112a4:	andeq	r7, r1, ip, asr r2
   112a8:	andeq	r7, r1, r8, ror r2
   112ac:	andeq	r7, r1, r8, ror #4
   112b0:	strdeq	r7, [r1], -ip
   112b4:	andeq	r7, r1, r0, lsr #2
   112b8:			; <UNDEFINED> instruction: 0x000171bc
   112bc:	andeq	r7, r1, ip, asr r1
   112c0:	mov	fp, #0
   112c4:	mov	lr, #0
   112c8:	pop	{r1}		; (ldr r1, [sp], #4)
   112cc:	mov	r2, sp
   112d0:	push	{r2}		; (str r2, [sp, #-4]!)
   112d4:	push	{r0}		; (str r0, [sp, #-4]!)
   112d8:	ldr	ip, [pc, #16]	; 112f0 <__assert_fail@plt+0x574>
   112dc:	push	{ip}		; (str ip, [sp, #-4]!)
   112e0:	ldr	r0, [pc, #12]	; 112f4 <__assert_fail@plt+0x578>
   112e4:	ldr	r3, [pc, #12]	; 112f8 <__assert_fail@plt+0x57c>
   112e8:	bl	10c68 <__libc_start_main@plt>
   112ec:	bl	10d70 <abort@plt>
   112f0:	andeq	r7, r1, r0, lsl r0
   112f4:	andeq	r0, r1, r8, lsl #27
   112f8:			; <UNDEFINED> instruction: 0x00016fb0
   112fc:	ldr	r3, [pc, #20]	; 11318 <__assert_fail@plt+0x59c>
   11300:	ldr	r2, [pc, #20]	; 1131c <__assert_fail@plt+0x5a0>
   11304:	add	r3, pc, r3
   11308:	ldr	r2, [r3, r2]
   1130c:	cmp	r2, #0
   11310:	bxeq	lr
   11314:	b	10c80 <__gmon_start__@plt>
   11318:	strdeq	r6, [r1], -r4
   1131c:	andeq	r0, r0, r4, asr #1
   11320:	ldr	r3, [pc, #28]	; 11344 <__assert_fail@plt+0x5c8>
   11324:	ldr	r0, [pc, #28]	; 11348 <__assert_fail@plt+0x5cc>
   11328:	sub	r3, r3, r0
   1132c:	cmp	r3, #6
   11330:	bxls	lr
   11334:	ldr	r3, [pc, #16]	; 1134c <__assert_fail@plt+0x5d0>
   11338:	cmp	r3, #0
   1133c:	bxeq	lr
   11340:	bx	r3
   11344:	andeq	r8, r2, fp, lsl r1
   11348:	andeq	r8, r2, r8, lsl r1
   1134c:	andeq	r0, r0, r0
   11350:	ldr	r1, [pc, #36]	; 1137c <__assert_fail@plt+0x600>
   11354:	ldr	r0, [pc, #36]	; 11380 <__assert_fail@plt+0x604>
   11358:	sub	r1, r1, r0
   1135c:	asr	r1, r1, #2
   11360:	add	r1, r1, r1, lsr #31
   11364:	asrs	r1, r1, #1
   11368:	bxeq	lr
   1136c:	ldr	r3, [pc, #16]	; 11384 <__assert_fail@plt+0x608>
   11370:	cmp	r3, #0
   11374:	bxeq	lr
   11378:	bx	r3
   1137c:	andeq	r8, r2, r8, lsl r1
   11380:	andeq	r8, r2, r8, lsl r1
   11384:	andeq	r0, r0, r0
   11388:	push	{r4, lr}
   1138c:	ldr	r4, [pc, #24]	; 113ac <__assert_fail@plt+0x630>
   11390:	ldrb	r3, [r4]
   11394:	cmp	r3, #0
   11398:	popne	{r4, pc}
   1139c:	bl	11320 <__assert_fail@plt+0x5a4>
   113a0:	mov	r3, #1
   113a4:	strb	r3, [r4]
   113a8:	pop	{r4, pc}
   113ac:	andeq	r8, r2, ip, lsr r1
   113b0:	ldr	r0, [pc, #40]	; 113e0 <__assert_fail@plt+0x664>
   113b4:	ldr	r3, [r0]
   113b8:	cmp	r3, #0
   113bc:	bne	113c4 <__assert_fail@plt+0x648>
   113c0:	b	11350 <__assert_fail@plt+0x5d4>
   113c4:	ldr	r3, [pc, #24]	; 113e4 <__assert_fail@plt+0x668>
   113c8:	cmp	r3, #0
   113cc:	beq	113c0 <__assert_fail@plt+0x644>
   113d0:	push	{r4, lr}
   113d4:	blx	r3
   113d8:	pop	{r4, lr}
   113dc:	b	11350 <__assert_fail@plt+0x5d4>
   113e0:	andeq	r7, r2, r4, lsl pc
   113e4:	andeq	r0, r0, r0
   113e8:	push	{r4, lr}
   113ec:	bl	10cc8 <__errno_location@plt>
   113f0:	mov	r2, #5
   113f4:	ldr	r1, [pc, #24]	; 11414 <__assert_fail@plt+0x698>
   113f8:	ldr	r4, [r0]
   113fc:	mov	r0, #0
   11400:	bl	10bf0 <dcgettext@plt>
   11404:	mov	r1, r4
   11408:	mov	r2, r0
   1140c:	mov	r0, #1
   11410:	bl	10c50 <error@plt>
   11414:	muleq	r1, r0, r0
   11418:	subs	r4, r0, #0
   1141c:	push	{r7, lr}
   11420:	beq	11458 <__assert_fail@plt+0x6dc>
   11424:	ldr	r3, [pc, #104]	; 11494 <__assert_fail@plt+0x718>
   11428:	mov	r2, #5
   1142c:	ldr	r1, [pc, #100]	; 11498 <__assert_fail@plt+0x71c>
   11430:	mov	r0, #0
   11434:	ldr	r5, [r3]
   11438:	bl	10bf0 <dcgettext@plt>
   1143c:	ldr	r3, [pc, #88]	; 1149c <__assert_fail@plt+0x720>
   11440:	ldr	r2, [r3]
   11444:	mov	r1, r0
   11448:	mov	r0, r5
   1144c:	bl	10cbc <fprintf@plt>
   11450:	mov	r0, r4
   11454:	bl	10ca4 <exit@plt>
   11458:	ldr	r5, [pc, #64]	; 114a0 <__assert_fail@plt+0x724>
   1145c:	mov	r2, #5
   11460:	ldr	r1, [pc, #60]	; 114a4 <__assert_fail@plt+0x728>
   11464:	ldr	r7, [r5]
   11468:	bl	10bf0 <dcgettext@plt>
   1146c:	ldr	r6, [pc, #40]	; 1149c <__assert_fail@plt+0x720>
   11470:	ldr	r2, [r6]
   11474:	mov	r1, r0
   11478:	mov	r0, r7
   1147c:	bl	10cbc <fprintf@plt>
   11480:	ldr	r1, [r6]
   11484:	ldr	r0, [r5]
   11488:	bl	11554 <__assert_fail@plt+0x7d8>
   1148c:	mov	r0, r4
   11490:	bl	10ca4 <exit@plt>
   11494:	andeq	r8, r2, r8, lsr #2
   11498:	muleq	r1, ip, r0
   1149c:	andeq	r8, r2, r8, asr #2
   114a0:	andeq	r8, r2, r4, lsr r1
   114a4:	andeq	r7, r1, r4, asr #1
   114a8:	ldr	r3, [pc, #136]	; 11538 <__assert_fail@plt+0x7bc>
   114ac:	push	{r4, r5, r6, r7, r8, lr}
   114b0:	mov	r5, r0
   114b4:	sub	sp, sp, #16
   114b8:	ldr	r0, [r3]
   114bc:	bl	1672c <__assert_fail@plt+0x59b0>
   114c0:	ldr	ip, [pc, #116]	; 1153c <__assert_fail@plt+0x7c0>
   114c4:	ldr	r3, [pc, #116]	; 11540 <__assert_fail@plt+0x7c4>
   114c8:	mov	r2, #5
   114cc:	ldr	r1, [pc, #112]	; 11544 <__assert_fail@plt+0x7c8>
   114d0:	mov	r0, #0
   114d4:	ldr	r4, [ip]
   114d8:	ldr	r7, [r3]
   114dc:	bl	10bf0 <dcgettext@plt>
   114e0:	mov	r2, #5
   114e4:	ldr	r1, [pc, #92]	; 11548 <__assert_fail@plt+0x7cc>
   114e8:	mov	r8, r0
   114ec:	mov	r0, #0
   114f0:	bl	10bf0 <dcgettext@plt>
   114f4:	mov	r2, #5
   114f8:	ldr	r1, [pc, #76]	; 1154c <__assert_fail@plt+0x7d0>
   114fc:	mov	r6, r0
   11500:	mov	r0, #0
   11504:	bl	10bf0 <dcgettext@plt>
   11508:	mov	r2, #0
   1150c:	str	r2, [sp, #12]
   11510:	str	r8, [sp]
   11514:	mov	r3, r7
   11518:	str	r6, [sp, #4]
   1151c:	mov	r1, r5
   11520:	ldr	r2, [pc, #40]	; 11550 <__assert_fail@plt+0x7d4>
   11524:	str	r0, [sp, #8]
   11528:	mov	r0, r4
   1152c:	bl	15e8c <__assert_fail@plt+0x5110>
   11530:	add	sp, sp, #16
   11534:	pop	{r4, r5, r6, r7, r8, pc}
   11538:	andeq	r8, r2, r8, lsr #2
   1153c:	andeq	r8, r2, r4, lsr r1
   11540:	ldrdeq	r8, [r2], -r0
   11544:	andeq	r7, r1, r0, lsr #5
   11548:			; <UNDEFINED> instruction: 0x000172b0
   1154c:	andeq	r7, r1, r0, asr #5
   11550:	ldrdeq	r7, [r1], -r0
   11554:	push	{r4, r5, lr}
   11558:	mov	r2, #5
   1155c:	sub	sp, sp, #20
   11560:	mov	r4, r0
   11564:	mov	r5, r1
   11568:	mov	r0, #0
   1156c:	ldr	r1, [pc, #48]	; 115a4 <__assert_fail@plt+0x828>
   11570:	bl	10bf0 <dcgettext@plt>
   11574:	ldr	ip, [pc, #44]	; 115a8 <__assert_fail@plt+0x82c>
   11578:	ldr	r1, [pc, #44]	; 115ac <__assert_fail@plt+0x830>
   1157c:	ldr	r2, [pc, #44]	; 115b0 <__assert_fail@plt+0x834>
   11580:	mov	r3, r5
   11584:	stmib	sp, {r1, ip}
   11588:	str	r2, [sp]
   1158c:	ldr	r2, [pc, #32]	; 115b4 <__assert_fail@plt+0x838>
   11590:	mov	r1, r0
   11594:	mov	r0, r4
   11598:	bl	10cbc <fprintf@plt>
   1159c:	add	sp, sp, #20
   115a0:	pop	{r4, r5, pc}
   115a4:	strdeq	r7, [r1], -r0
   115a8:	andeq	r7, r1, r8, ror #7
   115ac:	andeq	r7, r1, r0, lsl #8
   115b0:	ldrdeq	r7, [r1], -r0
   115b4:	andeq	r7, r1, r0, asr #7
   115b8:	ldr	r3, [pc, #4]	; 115c4 <__assert_fail@plt+0x848>
   115bc:	str	r0, [r3]
   115c0:	bx	lr
   115c4:	andeq	r8, r2, r0, asr #2
   115c8:	ldr	r3, [pc, #4]	; 115d4 <__assert_fail@plt+0x858>
   115cc:	strb	r0, [r3, #4]
   115d0:	bx	lr
   115d4:	andeq	r8, r2, r0, asr #2
   115d8:	ldr	r3, [pc, #192]	; 116a0 <__assert_fail@plt+0x924>
   115dc:	push	{r4, r5, r6, lr}
   115e0:	sub	sp, sp, #8
   115e4:	ldr	r0, [r3]
   115e8:	bl	169ac <__assert_fail@plt+0x5c30>
   115ec:	cmp	r0, #0
   115f0:	beq	11614 <__assert_fail@plt+0x898>
   115f4:	ldr	r4, [pc, #168]	; 116a4 <__assert_fail@plt+0x928>
   115f8:	ldrb	r3, [r4, #4]
   115fc:	cmp	r3, #0
   11600:	beq	11630 <__assert_fail@plt+0x8b4>
   11604:	bl	10cc8 <__errno_location@plt>
   11608:	ldr	r3, [r0]
   1160c:	cmp	r3, #32
   11610:	bne	11630 <__assert_fail@plt+0x8b4>
   11614:	ldr	r3, [pc, #140]	; 116a8 <__assert_fail@plt+0x92c>
   11618:	ldr	r0, [r3]
   1161c:	bl	169ac <__assert_fail@plt+0x5c30>
   11620:	cmp	r0, #0
   11624:	bne	11678 <__assert_fail@plt+0x8fc>
   11628:	add	sp, sp, #8
   1162c:	pop	{r4, r5, r6, pc}
   11630:	mov	r2, #5
   11634:	ldr	r1, [pc, #112]	; 116ac <__assert_fail@plt+0x930>
   11638:	mov	r0, #0
   1163c:	bl	10bf0 <dcgettext@plt>
   11640:	ldr	r4, [r4]
   11644:	cmp	r4, #0
   11648:	mov	r5, r0
   1164c:	beq	11684 <__assert_fail@plt+0x908>
   11650:	bl	10cc8 <__errno_location@plt>
   11654:	ldr	r6, [r0]
   11658:	mov	r0, r4
   1165c:	bl	14328 <__assert_fail@plt+0x35ac>
   11660:	mov	r1, r6
   11664:	str	r5, [sp]
   11668:	ldr	r2, [pc, #64]	; 116b0 <__assert_fail@plt+0x934>
   1166c:	mov	r3, r0
   11670:	mov	r0, #0
   11674:	bl	10c50 <error@plt>
   11678:	ldr	r3, [pc, #52]	; 116b4 <__assert_fail@plt+0x938>
   1167c:	ldr	r0, [r3]
   11680:	bl	10bc0 <_exit@plt>
   11684:	bl	10cc8 <__errno_location@plt>
   11688:	mov	r3, r5
   1168c:	ldr	r2, [pc, #36]	; 116b8 <__assert_fail@plt+0x93c>
   11690:	ldr	r1, [r0]
   11694:	mov	r0, r4
   11698:	bl	10c50 <error@plt>
   1169c:	b	11678 <__assert_fail@plt+0x8fc>
   116a0:	andeq	r8, r2, r4, lsr r1
   116a4:	andeq	r8, r2, r0, asr #2
   116a8:	andeq	r8, r2, r8, lsr #2
   116ac:	muleq	r1, r0, r0
   116b0:	andeq	r7, r1, r0, lsr r4
   116b4:	ldrdeq	r8, [r2], -r4
   116b8:	andeq	r7, r1, r4, lsr r4
   116bc:	push	{r4, r5, r6, lr}
   116c0:	subs	r4, r0, #0
   116c4:	beq	11738 <__assert_fail@plt+0x9bc>
   116c8:	mov	r1, #47	; 0x2f
   116cc:	bl	10d1c <strrchr@plt>
   116d0:	subs	r5, r0, #0
   116d4:	beq	11724 <__assert_fail@plt+0x9a8>
   116d8:	add	r6, r5, #1
   116dc:	sub	r3, r6, r4
   116e0:	cmp	r3, #6
   116e4:	ble	11724 <__assert_fail@plt+0x9a8>
   116e8:	mov	r2, #7
   116ec:	ldr	r1, [pc, #96]	; 11754 <__assert_fail@plt+0x9d8>
   116f0:	sub	r0, r5, #6
   116f4:	bl	10d64 <strncmp@plt>
   116f8:	cmp	r0, #0
   116fc:	bne	11724 <__assert_fail@plt+0x9a8>
   11700:	mov	r2, #3
   11704:	ldr	r1, [pc, #76]	; 11758 <__assert_fail@plt+0x9dc>
   11708:	mov	r0, r6
   1170c:	bl	10d64 <strncmp@plt>
   11710:	cmp	r0, #0
   11714:	movne	r4, r6
   11718:	ldreq	r3, [pc, #60]	; 1175c <__assert_fail@plt+0x9e0>
   1171c:	addeq	r4, r5, #4
   11720:	streq	r4, [r3]
   11724:	ldr	r2, [pc, #52]	; 11760 <__assert_fail@plt+0x9e4>
   11728:	ldr	r3, [pc, #52]	; 11764 <__assert_fail@plt+0x9e8>
   1172c:	str	r4, [r2]
   11730:	str	r4, [r3]
   11734:	pop	{r4, r5, r6, pc}
   11738:	ldr	r3, [pc, #40]	; 11768 <__assert_fail@plt+0x9ec>
   1173c:	mov	r2, #55	; 0x37
   11740:	mov	r1, #1
   11744:	ldr	r3, [r3]
   11748:	ldr	r0, [pc, #28]	; 1176c <__assert_fail@plt+0x9f0>
   1174c:	bl	10c14 <fwrite@plt>
   11750:	bl	10d70 <abort@plt>
   11754:	andeq	r7, r1, r0, ror r4
   11758:	andeq	r7, r1, r8, ror r4
   1175c:	andeq	r8, r2, r8, lsl r1
   11760:	andeq	r8, r2, r8, asr #2
   11764:	andeq	r8, r2, ip, lsl r1
   11768:	andeq	r8, r2, r8, lsr #2
   1176c:	andeq	r7, r1, r8, lsr r4
   11770:	push	{r4, r5, r6, lr}
   11774:	mov	r4, r0
   11778:	mov	r5, r1
   1177c:	bl	16a88 <__assert_fail@plt+0x5d0c>
   11780:	ldrb	r3, [r0]
   11784:	bic	r3, r3, #32
   11788:	cmp	r3, #85	; 0x55
   1178c:	bne	117ec <__assert_fail@plt+0xa70>
   11790:	ldrb	r3, [r0, #1]
   11794:	bic	r3, r3, #32
   11798:	cmp	r3, #84	; 0x54
   1179c:	bne	11828 <__assert_fail@plt+0xaac>
   117a0:	ldrb	r3, [r0, #2]
   117a4:	bic	r3, r3, #32
   117a8:	cmp	r3, #70	; 0x46
   117ac:	bne	11828 <__assert_fail@plt+0xaac>
   117b0:	ldrb	r3, [r0, #3]
   117b4:	cmp	r3, #45	; 0x2d
   117b8:	bne	11828 <__assert_fail@plt+0xaac>
   117bc:	ldrb	r3, [r0, #4]
   117c0:	cmp	r3, #56	; 0x38
   117c4:	bne	11828 <__assert_fail@plt+0xaac>
   117c8:	ldrb	r3, [r0, #5]
   117cc:	cmp	r3, #0
   117d0:	bne	11828 <__assert_fail@plt+0xaac>
   117d4:	ldrb	r2, [r4]
   117d8:	ldr	r3, [pc, #152]	; 11878 <__assert_fail@plt+0xafc>
   117dc:	ldr	r0, [pc, #152]	; 1187c <__assert_fail@plt+0xb00>
   117e0:	cmp	r2, #96	; 0x60
   117e4:	movne	r0, r3
   117e8:	pop	{r4, r5, r6, pc}
   117ec:	cmp	r3, #71	; 0x47
   117f0:	bne	11828 <__assert_fail@plt+0xaac>
   117f4:	ldrb	r3, [r0, #1]
   117f8:	bic	r3, r3, #32
   117fc:	cmp	r3, #66	; 0x42
   11800:	bne	11828 <__assert_fail@plt+0xaac>
   11804:	ldrb	r3, [r0, #2]
   11808:	cmp	r3, #49	; 0x31
   1180c:	bne	11828 <__assert_fail@plt+0xaac>
   11810:	ldrb	r3, [r0, #3]
   11814:	cmp	r3, #56	; 0x38
   11818:	bne	11828 <__assert_fail@plt+0xaac>
   1181c:	ldrb	r3, [r0, #4]
   11820:	cmp	r3, #48	; 0x30
   11824:	beq	1183c <__assert_fail@plt+0xac0>
   11828:	ldr	r3, [pc, #80]	; 11880 <__assert_fail@plt+0xb04>
   1182c:	cmp	r5, #9
   11830:	ldr	r0, [pc, #76]	; 11884 <__assert_fail@plt+0xb08>
   11834:	movne	r0, r3
   11838:	pop	{r4, r5, r6, pc}
   1183c:	ldrb	r3, [r0, #5]
   11840:	cmp	r3, #51	; 0x33
   11844:	bne	11828 <__assert_fail@plt+0xaac>
   11848:	ldrb	r3, [r0, #6]
   1184c:	cmp	r3, #48	; 0x30
   11850:	bne	11828 <__assert_fail@plt+0xaac>
   11854:	ldrb	r3, [r0, #7]
   11858:	cmp	r3, #0
   1185c:	bne	11828 <__assert_fail@plt+0xaac>
   11860:	ldrb	r2, [r4]
   11864:	ldr	r3, [pc, #28]	; 11888 <__assert_fail@plt+0xb0c>
   11868:	ldr	r0, [pc, #28]	; 1188c <__assert_fail@plt+0xb10>
   1186c:	cmp	r2, #96	; 0x60
   11870:	movne	r0, r3
   11874:	pop	{r4, r5, r6, pc}
   11878:	ldrdeq	r7, [r1], -r4
   1187c:	ldrdeq	r7, [r1], -r0
   11880:	andeq	r7, r1, r4, ror #9
   11884:	andeq	r7, r1, r0, ror #9
   11888:	ldrdeq	r7, [r1], -ip
   1188c:	ldrdeq	r7, [r1], -r8
   11890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11894:	sub	sp, sp, #140	; 0x8c
   11898:	mov	r9, r1
   1189c:	str	r3, [sp, #24]
   118a0:	mov	r3, #1
   118a4:	mov	sl, r0
   118a8:	str	r2, [sp, #44]	; 0x2c
   118ac:	str	r3, [sp, #28]
   118b0:	bl	10c2c <__ctype_get_mb_cur_max@plt>
   118b4:	ldr	r3, [sp, #180]	; 0xb4
   118b8:	mov	fp, r9
   118bc:	mov	r9, sl
   118c0:	lsr	r3, r3, #1
   118c4:	and	r3, r3, #1
   118c8:	str	r3, [sp, #40]	; 0x28
   118cc:	ldr	r3, [sp, #180]	; 0xb4
   118d0:	mov	r2, #0
   118d4:	and	r3, r3, #4
   118d8:	str	r3, [sp, #100]	; 0x64
   118dc:	ldr	r3, [sp, #180]	; 0xb4
   118e0:	str	r2, [sp, #76]	; 0x4c
   118e4:	and	r3, r3, #1
   118e8:	str	r3, [sp, #96]	; 0x60
   118ec:	str	r2, [sp, #36]	; 0x24
   118f0:	str	r2, [sp, #56]	; 0x38
   118f4:	str	r2, [sp, #68]	; 0x44
   118f8:	str	r2, [sp, #72]	; 0x48
   118fc:	str	r2, [sp, #84]	; 0x54
   11900:	str	r0, [sp, #80]	; 0x50
   11904:	ldr	r3, [sp, #176]	; 0xb0
   11908:	cmp	r3, #10
   1190c:	ldrls	pc, [pc, r3, lsl #2]
   11910:	b	12ae8 <__assert_fail@plt+0x1d6c>
   11914:	andeq	r1, r1, r0, asr #18
   11918:	andeq	r1, r1, r0, ror #24
   1191c:			; <UNDEFINED> instruction: 0x00011db8
   11920:	muleq	r1, r4, ip
   11924:	andeq	r1, r1, ip, lsl #28
   11928:	andeq	r1, r1, ip, ror #27
   1192c:			; <UNDEFINED> instruction: 0x00011cb4
   11930:	ldrdeq	r1, [r1], -r8
   11934:	andeq	r1, r1, r0, lsl #26
   11938:	andeq	r1, r1, r0, lsl #26
   1193c:	andeq	r1, r1, r0, lsl #26
   11940:	mov	r3, #0
   11944:	ldr	r1, [sp, #56]	; 0x38
   11948:	ldr	r2, [sp, #176]	; 0xb0
   1194c:	ldr	lr, [sp, #176]	; 0xb0
   11950:	mov	r8, r3
   11954:	mov	ip, r3
   11958:	str	r3, [sp, #40]	; 0x28
   1195c:	mov	r3, r1
   11960:	cmp	r2, #2
   11964:	moveq	r3, #0
   11968:	andne	r3, r3, #1
   1196c:	mov	r0, r3
   11970:	str	r3, [sp, #92]	; 0x5c
   11974:	ldr	r3, [sp, #68]	; 0x44
   11978:	sub	lr, lr, #2
   1197c:	adds	r2, r3, #0
   11980:	movne	r2, #1
   11984:	and	r3, r1, ip
   11988:	and	r3, r2, r3
   1198c:	clz	lr, lr
   11990:	str	r3, [sp, #88]	; 0x58
   11994:	lsr	lr, lr, #5
   11998:	mov	r3, ip
   1199c:	and	r3, r3, lr
   119a0:	mov	sl, #0
   119a4:	and	r0, r2, r0
   119a8:	str	r3, [sp, #64]	; 0x40
   119ac:	eor	r3, r1, #1
   119b0:	str	lr, [sp, #52]	; 0x34
   119b4:	str	r0, [sp, #48]	; 0x30
   119b8:	str	r3, [sp, #60]	; 0x3c
   119bc:	ldr	r3, [sp, #24]
   119c0:	cmn	r3, #1
   119c4:	beq	11ef4 <__assert_fail@plt+0x1178>
   119c8:	subs	r7, r3, sl
   119cc:	movne	r7, #1
   119d0:	cmp	r7, #0
   119d4:	beq	11f0c <__assert_fail@plt+0x1190>
   119d8:	ldr	r3, [sp, #48]	; 0x30
   119dc:	cmp	r3, #0
   119e0:	beq	12278 <__assert_fail@plt+0x14fc>
   119e4:	ldr	r2, [sp, #68]	; 0x44
   119e8:	ldr	r1, [sp, #24]
   119ec:	cmp	r2, #1
   119f0:	mov	r3, r2
   119f4:	movls	r3, #0
   119f8:	movhi	r3, #1
   119fc:	cmn	r1, #1
   11a00:	movne	r3, #0
   11a04:	cmp	r3, #0
   11a08:	add	r4, sl, r2
   11a0c:	beq	11a1c <__assert_fail@plt+0xca0>
   11a10:	ldr	r0, [sp, #44]	; 0x2c
   11a14:	bl	10cb0 <strlen@plt>
   11a18:	str	r0, [sp, #24]
   11a1c:	ldr	r3, [sp, #24]
   11a20:	cmp	r3, r4
   11a24:	ldr	r3, [sp, #44]	; 0x2c
   11a28:	add	r5, r3, sl
   11a2c:	bcc	12280 <__assert_fail@plt+0x1504>
   11a30:	mov	r0, r5
   11a34:	ldr	r2, [sp, #68]	; 0x44
   11a38:	ldr	r1, [sp, #72]	; 0x48
   11a3c:	bl	10be4 <memcmp@plt>
   11a40:	cmp	r0, #0
   11a44:	bne	12280 <__assert_fail@plt+0x1504>
   11a48:	ldr	r3, [sp, #40]	; 0x28
   11a4c:	cmp	r3, #0
   11a50:	bne	12c3c <__assert_fail@plt+0x1ec0>
   11a54:	ldrb	r4, [r5]
   11a58:	cmp	r4, #126	; 0x7e
   11a5c:	ldrls	pc, [pc, r4, lsl #2]
   11a60:	b	12b78 <__assert_fail@plt+0x1dfc>
   11a64:	andeq	r2, r1, r8, lsr r1
   11a68:	andeq	r2, r1, r8, ror fp
   11a6c:	andeq	r2, r1, r8, ror fp
   11a70:	andeq	r2, r1, r8, ror fp
   11a74:	andeq	r2, r1, r8, ror fp
   11a78:	andeq	r2, r1, r8, ror fp
   11a7c:	andeq	r2, r1, r8, ror fp
   11a80:	andeq	r2, r1, r4, lsr #2
   11a84:	andeq	r2, r1, r0, lsl r1
   11a88:	andeq	r2, r1, ip, ror #1
   11a8c:	andeq	r2, r1, ip, asr #1
   11a90:	strdeq	r2, [r1], -ip
   11a94:	andeq	r2, r1, r4, lsr r0
   11a98:	andeq	r2, r1, r8, ror #4
   11a9c:	andeq	r2, r1, r8, ror fp
   11aa0:	andeq	r2, r1, r8, ror fp
   11aa4:	andeq	r2, r1, r8, ror fp
   11aa8:	andeq	r2, r1, r8, ror fp
   11aac:	andeq	r2, r1, r8, ror fp
   11ab0:	andeq	r2, r1, r8, ror fp
   11ab4:	andeq	r2, r1, r8, ror fp
   11ab8:	andeq	r2, r1, r8, ror fp
   11abc:	andeq	r2, r1, r8, ror fp
   11ac0:	andeq	r2, r1, r8, ror fp
   11ac4:	andeq	r2, r1, r8, ror fp
   11ac8:	andeq	r2, r1, r8, ror fp
   11acc:	andeq	r2, r1, r8, ror fp
   11ad0:	andeq	r2, r1, r8, ror fp
   11ad4:	andeq	r2, r1, r8, ror fp
   11ad8:	andeq	r2, r1, r8, ror fp
   11adc:	andeq	r2, r1, r8, ror fp
   11ae0:	andeq	r2, r1, r8, ror fp
   11ae4:	andeq	r2, r1, r8, asr r2
   11ae8:	andeq	r2, r1, r8, lsr r2
   11aec:	andeq	r2, r1, r8, lsr r2
   11af0:	andeq	r2, r1, r8, lsl r2
   11af4:	andeq	r2, r1, r8, lsr r2
   11af8:	andeq	r2, r1, r4, lsr #32
   11afc:	andeq	r2, r1, r8, lsr r2
   11b00:	andeq	r2, r1, r0
   11b04:	andeq	r2, r1, r8, lsr r2
   11b08:	andeq	r2, r1, r8, lsr r2
   11b0c:	andeq	r2, r1, r8, lsr r2
   11b10:	andeq	r2, r1, r4, lsr #32
   11b14:	andeq	r2, r1, r4, lsr #32
   11b18:	andeq	r2, r1, r4, lsr #32
   11b1c:	andeq	r2, r1, r4, lsr #32
   11b20:	andeq	r2, r1, r4, lsr #32
   11b24:	andeq	r2, r1, r4, lsr #32
   11b28:	andeq	r2, r1, r4, lsr #32
   11b2c:	andeq	r2, r1, r4, lsr #32
   11b30:	andeq	r2, r1, r4, lsr #32
   11b34:	andeq	r2, r1, r4, lsr #32
   11b38:	andeq	r2, r1, r4, lsr #32
   11b3c:	andeq	r2, r1, r4, lsr #32
   11b40:	andeq	r2, r1, r4, lsr #32
   11b44:	andeq	r2, r1, r4, lsr #32
   11b48:	andeq	r2, r1, r4, lsr #32
   11b4c:	andeq	r2, r1, r4, lsr #32
   11b50:	andeq	r2, r1, r8, lsr r2
   11b54:	andeq	r2, r1, r8, lsr r2
   11b58:	andeq	r2, r1, r8, lsr r2
   11b5c:	andeq	r2, r1, r8, lsr r2
   11b60:			; <UNDEFINED> instruction: 0x00011fb0
   11b64:	andeq	r2, r1, r8, ror fp
   11b68:	andeq	r2, r1, r4, lsr #32
   11b6c:	andeq	r2, r1, r4, lsr #32
   11b70:	andeq	r2, r1, r4, lsr #32
   11b74:	andeq	r2, r1, r4, lsr #32
   11b78:	andeq	r2, r1, r4, lsr #32
   11b7c:	andeq	r2, r1, r4, lsr #32
   11b80:	andeq	r2, r1, r4, lsr #32
   11b84:	andeq	r2, r1, r4, lsr #32
   11b88:	andeq	r2, r1, r4, lsr #32
   11b8c:	andeq	r2, r1, r4, lsr #32
   11b90:	andeq	r2, r1, r4, lsr #32
   11b94:	andeq	r2, r1, r4, lsr #32
   11b98:	andeq	r2, r1, r4, lsr #32
   11b9c:	andeq	r2, r1, r4, lsr #32
   11ba0:	andeq	r2, r1, r4, lsr #32
   11ba4:	andeq	r2, r1, r4, lsr #32
   11ba8:	andeq	r2, r1, r4, lsr #32
   11bac:	andeq	r2, r1, r4, lsr #32
   11bb0:	andeq	r2, r1, r4, lsr #32
   11bb4:	andeq	r2, r1, r4, lsr #32
   11bb8:	andeq	r2, r1, r4, lsr #32
   11bbc:	andeq	r2, r1, r4, lsr #32
   11bc0:	andeq	r2, r1, r4, lsr #32
   11bc4:	andeq	r2, r1, r4, lsr #32
   11bc8:	andeq	r2, r1, r4, lsr #32
   11bcc:	andeq	r2, r1, r4, lsr #32
   11bd0:	andeq	r2, r1, r8, lsr r2
   11bd4:	andeq	r1, r1, ip, ror pc
   11bd8:	andeq	r2, r1, r4, lsr #32
   11bdc:	andeq	r2, r1, r8, lsr r2
   11be0:	andeq	r2, r1, r4, lsr #32
   11be4:	andeq	r2, r1, r8, lsr r2
   11be8:	andeq	r2, r1, r4, lsr #32
   11bec:	andeq	r2, r1, r4, lsr #32
   11bf0:	andeq	r2, r1, r4, lsr #32
   11bf4:	andeq	r2, r1, r4, lsr #32
   11bf8:	andeq	r2, r1, r4, lsr #32
   11bfc:	andeq	r2, r1, r4, lsr #32
   11c00:	andeq	r2, r1, r4, lsr #32
   11c04:	andeq	r2, r1, r4, lsr #32
   11c08:	andeq	r2, r1, r4, lsr #32
   11c0c:	andeq	r2, r1, r4, lsr #32
   11c10:	andeq	r2, r1, r4, lsr #32
   11c14:	andeq	r2, r1, r4, lsr #32
   11c18:	andeq	r2, r1, r4, lsr #32
   11c1c:	andeq	r2, r1, r4, lsr #32
   11c20:	andeq	r2, r1, r4, lsr #32
   11c24:	andeq	r2, r1, r4, lsr #32
   11c28:	andeq	r2, r1, r4, lsr #32
   11c2c:	andeq	r2, r1, r4, lsr #32
   11c30:	andeq	r2, r1, r4, lsr #32
   11c34:	andeq	r2, r1, r4, lsr #32
   11c38:	andeq	r2, r1, r4, lsr #32
   11c3c:	andeq	r2, r1, r4, lsr #32
   11c40:	andeq	r2, r1, r4, lsr #32
   11c44:	andeq	r2, r1, r4, lsr #32
   11c48:	andeq	r2, r1, r4, lsr #32
   11c4c:	andeq	r2, r1, r4, lsr #32
   11c50:	andeq	r1, r1, r4, lsr lr
   11c54:	andeq	r2, r1, r8, lsr r2
   11c58:	andeq	r1, r1, r4, lsr lr
   11c5c:	andeq	r2, r1, r8, lsl r2
   11c60:	mov	r3, #1
   11c64:	str	r3, [sp, #40]	; 0x28
   11c68:	str	r3, [sp, #68]	; 0x44
   11c6c:	mov	r8, #0
   11c70:	ldr	r3, [pc, #4056]	; 12c50 <__assert_fail@plt+0x1ed4>
   11c74:	str	r3, [sp, #72]	; 0x48
   11c78:	mov	r3, #2
   11c7c:	str	r3, [sp, #176]	; 0xb0
   11c80:	ldr	r1, [sp, #56]	; 0x38
   11c84:	mov	r2, r3
   11c88:	ldr	ip, [sp, #40]	; 0x28
   11c8c:	mov	lr, r3
   11c90:	b	1195c <__assert_fail@plt+0xbe0>
   11c94:	mov	r3, #1
   11c98:	str	r3, [sp, #56]	; 0x38
   11c9c:	str	r3, [sp, #68]	; 0x44
   11ca0:	str	r3, [sp, #40]	; 0x28
   11ca4:	ldr	r3, [pc, #4004]	; 12c50 <__assert_fail@plt+0x1ed4>
   11ca8:	mov	r8, #0
   11cac:	str	r3, [sp, #72]	; 0x48
   11cb0:	b	11c78 <__assert_fail@plt+0xefc>
   11cb4:	mov	r3, #1
   11cb8:	str	r3, [sp, #56]	; 0x38
   11cbc:	str	r3, [sp, #68]	; 0x44
   11cc0:	str	r3, [sp, #40]	; 0x28
   11cc4:	ldr	r3, [pc, #3976]	; 12c54 <__assert_fail@plt+0x1ed8>
   11cc8:	mov	r8, #0
   11ccc:	str	r3, [sp, #72]	; 0x48
   11cd0:	mov	r3, #5
   11cd4:	b	11c7c <__assert_fail@plt+0xf00>
   11cd8:	mov	r3, #0
   11cdc:	str	r3, [sp, #40]	; 0x28
   11ce0:	mov	r3, #1
   11ce4:	str	r3, [sp, #56]	; 0x38
   11ce8:	mov	r8, #0
   11cec:	mov	r1, r3
   11cf0:	ldr	r2, [sp, #176]	; 0xb0
   11cf4:	ldr	ip, [sp, #40]	; 0x28
   11cf8:	ldr	lr, [sp, #176]	; 0xb0
   11cfc:	b	1195c <__assert_fail@plt+0xbe0>
   11d00:	ldr	r3, [sp, #176]	; 0xb0
   11d04:	cmp	r3, #10
   11d08:	beq	11d4c <__assert_fail@plt+0xfd0>
   11d0c:	mov	r2, #5
   11d10:	ldr	r1, [pc, #3904]	; 12c58 <__assert_fail@plt+0x1edc>
   11d14:	mov	r0, #0
   11d18:	bl	10bf0 <dcgettext@plt>
   11d1c:	ldr	r2, [pc, #3892]	; 12c58 <__assert_fail@plt+0x1edc>
   11d20:	cmp	r0, r2
   11d24:	str	r0, [sp, #188]	; 0xbc
   11d28:	beq	12de4 <__assert_fail@plt+0x2068>
   11d2c:	mov	r2, #5
   11d30:	ldr	r1, [pc, #3864]	; 12c50 <__assert_fail@plt+0x1ed4>
   11d34:	mov	r0, #0
   11d38:	bl	10bf0 <dcgettext@plt>
   11d3c:	ldr	r2, [pc, #3852]	; 12c50 <__assert_fail@plt+0x1ed4>
   11d40:	cmp	r0, r2
   11d44:	str	r0, [sp, #192]	; 0xc0
   11d48:	beq	12dd4 <__assert_fail@plt+0x2058>
   11d4c:	ldr	r8, [sp, #40]	; 0x28
   11d50:	cmp	r8, #0
   11d54:	movne	r8, #0
   11d58:	bne	11d88 <__assert_fail@plt+0x100c>
   11d5c:	ldr	r3, [sp, #188]	; 0xbc
   11d60:	ldrb	r3, [r3]
   11d64:	cmp	r3, #0
   11d68:	beq	11d88 <__assert_fail@plt+0x100c>
   11d6c:	ldr	r2, [sp, #188]	; 0xbc
   11d70:	cmp	fp, r8
   11d74:	strbhi	r3, [r9, r8]
   11d78:	ldrb	r3, [r2, #1]!
   11d7c:	add	r8, r8, #1
   11d80:	cmp	r3, #0
   11d84:	bne	11d70 <__assert_fail@plt+0xff4>
   11d88:	ldr	r0, [sp, #192]	; 0xc0
   11d8c:	bl	10cb0 <strlen@plt>
   11d90:	ldr	r3, [sp, #192]	; 0xc0
   11d94:	ldr	r2, [sp, #176]	; 0xb0
   11d98:	str	r3, [sp, #72]	; 0x48
   11d9c:	mov	r3, #1
   11da0:	str	r3, [sp, #56]	; 0x38
   11da4:	mov	r1, r3
   11da8:	ldr	ip, [sp, #40]	; 0x28
   11dac:	ldr	lr, [sp, #176]	; 0xb0
   11db0:	str	r0, [sp, #68]	; 0x44
   11db4:	b	1195c <__assert_fail@plt+0xbe0>
   11db8:	ldr	r3, [sp, #40]	; 0x28
   11dbc:	cmp	r3, #0
   11dc0:	beq	12a68 <__assert_fail@plt+0x1cec>
   11dc4:	mov	r3, #1
   11dc8:	str	r3, [sp, #68]	; 0x44
   11dcc:	ldr	r3, [pc, #3708]	; 12c50 <__assert_fail@plt+0x1ed4>
   11dd0:	str	r3, [sp, #72]	; 0x48
   11dd4:	mov	r8, #0
   11dd8:	ldr	r1, [sp, #56]	; 0x38
   11ddc:	ldr	r2, [sp, #176]	; 0xb0
   11de0:	ldr	ip, [sp, #40]	; 0x28
   11de4:	ldr	lr, [sp, #176]	; 0xb0
   11de8:	b	1195c <__assert_fail@plt+0xbe0>
   11dec:	ldr	r3, [sp, #40]	; 0x28
   11df0:	cmp	r3, #0
   11df4:	beq	12aec <__assert_fail@plt+0x1d70>
   11df8:	str	r3, [sp, #56]	; 0x38
   11dfc:	mov	r3, #1
   11e00:	str	r3, [sp, #68]	; 0x44
   11e04:	ldr	r3, [pc, #3656]	; 12c54 <__assert_fail@plt+0x1ed8>
   11e08:	b	11dd0 <__assert_fail@plt+0x1054>
   11e0c:	ldr	r3, [sp, #40]	; 0x28
   11e10:	cmp	r3, #0
   11e14:	mov	r3, #1
   11e18:	streq	r3, [sp, #56]	; 0x38
   11e1c:	beq	12a68 <__assert_fail@plt+0x1cec>
   11e20:	str	r3, [sp, #68]	; 0x44
   11e24:	ldr	r3, [pc, #3620]	; 12c50 <__assert_fail@plt+0x1ed4>
   11e28:	mov	r8, #0
   11e2c:	str	r3, [sp, #72]	; 0x48
   11e30:	b	11c78 <__assert_fail@plt+0xefc>
   11e34:	ldr	r3, [sp, #24]
   11e38:	ldr	r6, [sp, #48]	; 0x30
   11e3c:	cmn	r3, #1
   11e40:	beq	1249c <__assert_fail@plt+0x1720>
   11e44:	subs	r3, r3, #1
   11e48:	movne	r3, #1
   11e4c:	cmp	r3, #0
   11e50:	beq	1221c <__assert_fail@plt+0x14a0>
   11e54:	ldr	r1, [sp, #52]	; 0x34
   11e58:	mov	r7, r3
   11e5c:	mov	r3, #0
   11e60:	str	r3, [sp, #32]
   11e64:	ldr	r3, [sp, #60]	; 0x3c
   11e68:	orr	r2, r1, r3
   11e6c:	ldr	r3, [sp, #40]	; 0x28
   11e70:	eor	r2, r2, #1
   11e74:	orr	r2, r3, r2
   11e78:	tst	r2, #255	; 0xff
   11e7c:	bne	127a0 <__assert_fail@plt+0x1a24>
   11e80:	cmp	r6, #0
   11e84:	bne	12060 <__assert_fail@plt+0x12e4>
   11e88:	ldr	r3, [sp, #36]	; 0x24
   11e8c:	add	sl, sl, #1
   11e90:	and	r3, r3, r7
   11e94:	uxtb	r6, r3
   11e98:	cmp	r6, #0
   11e9c:	beq	11ec8 <__assert_fail@plt+0x114c>
   11ea0:	cmp	fp, r8
   11ea4:	movhi	r3, #39	; 0x27
   11ea8:	strbhi	r3, [r9, r8]
   11eac:	add	r3, r8, #1
   11eb0:	cmp	fp, r3
   11eb4:	movhi	r2, #39	; 0x27
   11eb8:	add	r8, r8, #2
   11ebc:	strbhi	r2, [r9, r3]
   11ec0:	mov	r3, #0
   11ec4:	str	r3, [sp, #36]	; 0x24
   11ec8:	ldr	r2, [sp, #32]
   11ecc:	cmp	r8, fp
   11ed0:	ldr	r3, [sp, #28]
   11ed4:	strbcc	r4, [r9, r8]
   11ed8:	cmp	r2, #0
   11edc:	moveq	r3, #0
   11ee0:	str	r3, [sp, #28]
   11ee4:	ldr	r3, [sp, #24]
   11ee8:	add	r8, r8, #1
   11eec:	cmn	r3, #1
   11ef0:	bne	119c8 <__assert_fail@plt+0xc4c>
   11ef4:	ldr	r3, [sp, #44]	; 0x2c
   11ef8:	ldrb	r3, [r3, sl]
   11efc:	adds	r7, r3, #0
   11f00:	movne	r7, #1
   11f04:	cmp	r7, #0
   11f08:	bne	119d8 <__assert_fail@plt+0xc5c>
   11f0c:	ldr	r3, [sp, #64]	; 0x40
   11f10:	cmp	r8, #0
   11f14:	movne	r3, #0
   11f18:	andeq	r3, r3, #1
   11f1c:	cmp	r3, #0
   11f20:	str	r3, [sp, #64]	; 0x40
   11f24:	bne	129c8 <__assert_fail@plt+0x1c4c>
   11f28:	ldr	r3, [sp, #40]	; 0x28
   11f2c:	ldr	r2, [sp, #52]	; 0x34
   11f30:	eor	r3, r3, #1
   11f34:	ands	r2, r2, r3
   11f38:	beq	12df4 <__assert_fail@plt+0x2078>
   11f3c:	ldr	r3, [sp, #76]	; 0x4c
   11f40:	cmp	r3, #0
   11f44:	beq	12dc4 <__assert_fail@plt+0x2048>
   11f48:	ldr	r3, [sp, #28]
   11f4c:	cmp	r3, #0
   11f50:	bne	12d80 <__assert_fail@plt+0x2004>
   11f54:	ldr	r2, [sp, #84]	; 0x54
   11f58:	clz	r3, fp
   11f5c:	cmp	r2, #0
   11f60:	lsr	r3, r3, #5
   11f64:	moveq	r3, #0
   11f68:	cmp	r3, #0
   11f6c:	beq	12d20 <__assert_fail@plt+0x1fa4>
   11f70:	mov	fp, r2
   11f74:	str	r3, [sp, #76]	; 0x4c
   11f78:	b	11904 <__assert_fail@plt+0xb88>
   11f7c:	ldr	r3, [sp, #176]	; 0xb0
   11f80:	ldr	r6, [sp, #48]	; 0x30
   11f84:	cmp	r3, #2
   11f88:	beq	124c0 <__assert_fail@plt+0x1744>
   11f8c:	ldr	r3, [sp, #88]	; 0x58
   11f90:	cmp	r3, #0
   11f94:	beq	12a44 <__assert_fail@plt+0x1cc8>
   11f98:	mov	r3, #0
   11f9c:	add	sl, sl, #1
   11fa0:	ldr	r6, [sp, #36]	; 0x24
   11fa4:	str	r3, [sp, #32]
   11fa8:	mov	r4, #92	; 0x5c
   11fac:	b	11e98 <__assert_fail@plt+0x111c>
   11fb0:	ldr	r3, [sp, #176]	; 0xb0
   11fb4:	ldr	r6, [sp, #48]	; 0x30
   11fb8:	cmp	r3, #2
   11fbc:	beq	124f0 <__assert_fail@plt+0x1774>
   11fc0:	cmp	r3, #5
   11fc4:	bne	12a54 <__assert_fail@plt+0x1cd8>
   11fc8:	ldr	r3, [sp, #100]	; 0x64
   11fcc:	cmp	r3, #0
   11fd0:	beq	12ab8 <__assert_fail@plt+0x1d3c>
   11fd4:	ldr	r2, [sp, #24]
   11fd8:	add	r3, sl, #2
   11fdc:	cmp	r2, r3
   11fe0:	bls	11ff0 <__assert_fail@plt+0x1274>
   11fe4:	ldrb	r4, [r5, #1]
   11fe8:	cmp	r4, #63	; 0x3f
   11fec:	beq	12c60 <__assert_fail@plt+0x1ee4>
   11ff0:	mov	r1, #0
   11ff4:	str	r1, [sp, #32]
   11ff8:	mov	r4, #63	; 0x3f
   11ffc:	b	11e64 <__assert_fail@plt+0x10e8>
   12000:	ldr	r3, [sp, #176]	; 0xb0
   12004:	ldr	r6, [sp, #48]	; 0x30
   12008:	cmp	r3, #2
   1200c:	beq	1251c <__assert_fail@plt+0x17a0>
   12010:	str	r7, [sp, #32]
   12014:	str	r7, [sp, #76]	; 0x4c
   12018:	mov	r1, #0
   1201c:	mov	r4, #39	; 0x27
   12020:	b	11e64 <__assert_fail@plt+0x10e8>
   12024:	ldr	r6, [sp, #48]	; 0x30
   12028:	ldr	r1, [sp, #52]	; 0x34
   1202c:	str	r7, [sp, #32]
   12030:	b	11e64 <__assert_fail@plt+0x10e8>
   12034:	ldr	r6, [sp, #48]	; 0x30
   12038:	ldr	r1, [sp, #52]	; 0x34
   1203c:	mov	r4, #12
   12040:	mov	r3, #102	; 0x66
   12044:	ldr	r2, [sp, #56]	; 0x38
   12048:	cmp	r2, #0
   1204c:	streq	r2, [sp, #32]
   12050:	beq	11e64 <__assert_fail@plt+0x10e8>
   12054:	mov	r4, r3
   12058:	mov	r3, #0
   1205c:	str	r3, [sp, #32]
   12060:	ldr	r3, [sp, #40]	; 0x28
   12064:	cmp	r3, #0
   12068:	bne	127d8 <__assert_fail@plt+0x1a5c>
   1206c:	ldr	r3, [sp, #36]	; 0x24
   12070:	eor	r3, r3, #1
   12074:	and	r3, r3, r1
   12078:	ands	r3, r3, #255	; 0xff
   1207c:	beq	120b4 <__assert_fail@plt+0x1338>
   12080:	cmp	fp, r8
   12084:	movhi	r2, #39	; 0x27
   12088:	strbhi	r2, [r9, r8]
   1208c:	add	r2, r8, #1
   12090:	cmp	fp, r2
   12094:	movhi	r1, #36	; 0x24
   12098:	strbhi	r1, [r9, r2]
   1209c:	add	r2, r8, #2
   120a0:	cmp	fp, r2
   120a4:	add	r8, r8, #3
   120a8:	movhi	r1, #39	; 0x27
   120ac:	strbhi	r1, [r9, r2]
   120b0:	str	r3, [sp, #36]	; 0x24
   120b4:	cmp	fp, r8
   120b8:	movhi	r3, #92	; 0x5c
   120bc:	strbhi	r3, [r9, r8]
   120c0:	add	sl, sl, #1
   120c4:	add	r8, r8, #1
   120c8:	b	11ec8 <__assert_fail@plt+0x114c>
   120cc:	ldr	r6, [sp, #48]	; 0x30
   120d0:	mov	r4, #10
   120d4:	mov	r3, #110	; 0x6e
   120d8:	ldr	r2, [sp, #64]	; 0x40
   120dc:	cmp	r2, #0
   120e0:	bne	12b60 <__assert_fail@plt+0x1de4>
   120e4:	ldr	r1, [sp, #52]	; 0x34
   120e8:	b	12044 <__assert_fail@plt+0x12c8>
   120ec:	ldr	r6, [sp, #48]	; 0x30
   120f0:	ldr	r1, [sp, #52]	; 0x34
   120f4:	mov	r3, #116	; 0x74
   120f8:	b	12044 <__assert_fail@plt+0x12c8>
   120fc:	ldr	r6, [sp, #48]	; 0x30
   12100:	ldr	r1, [sp, #52]	; 0x34
   12104:	mov	r4, #11
   12108:	mov	r3, #118	; 0x76
   1210c:	b	12044 <__assert_fail@plt+0x12c8>
   12110:	ldr	r6, [sp, #48]	; 0x30
   12114:	ldr	r1, [sp, #52]	; 0x34
   12118:	mov	r4, #8
   1211c:	mov	r3, #98	; 0x62
   12120:	b	12044 <__assert_fail@plt+0x12c8>
   12124:	ldr	r6, [sp, #48]	; 0x30
   12128:	ldr	r1, [sp, #52]	; 0x34
   1212c:	mov	r4, #7
   12130:	mov	r3, #97	; 0x61
   12134:	b	12044 <__assert_fail@plt+0x12c8>
   12138:	ldr	r3, [sp, #56]	; 0x38
   1213c:	ldr	r6, [sp, #48]	; 0x30
   12140:	cmp	r3, #0
   12144:	beq	12608 <__assert_fail@plt+0x188c>
   12148:	ldr	r3, [sp, #40]	; 0x28
   1214c:	cmp	r3, #0
   12150:	bne	12c3c <__assert_fail@plt+0x1ec0>
   12154:	ldr	r3, [sp, #36]	; 0x24
   12158:	ldr	r2, [sp, #52]	; 0x34
   1215c:	eor	r3, r3, #1
   12160:	ands	r3, r2, r3
   12164:	moveq	r2, r8
   12168:	beq	121a0 <__assert_fail@plt+0x1424>
   1216c:	cmp	fp, r8
   12170:	movhi	r2, #39	; 0x27
   12174:	strbhi	r2, [r9, r8]
   12178:	add	r2, r8, #1
   1217c:	cmp	fp, r2
   12180:	movhi	r1, #36	; 0x24
   12184:	strbhi	r1, [r9, r2]
   12188:	add	r2, r8, #2
   1218c:	cmp	fp, r2
   12190:	movhi	r1, #39	; 0x27
   12194:	strbhi	r1, [r9, r2]
   12198:	add	r2, r8, #3
   1219c:	str	r3, [sp, #36]	; 0x24
   121a0:	cmp	fp, r2
   121a4:	movhi	r3, #92	; 0x5c
   121a8:	strbhi	r3, [r9, r2]
   121ac:	ldr	r3, [sp, #92]	; 0x5c
   121b0:	add	r8, r2, #1
   121b4:	cmp	r3, #0
   121b8:	beq	12b3c <__assert_fail@plt+0x1dc0>
   121bc:	ldr	r1, [sp, #24]
   121c0:	add	r3, sl, #1
   121c4:	cmp	r1, r3
   121c8:	bls	12200 <__assert_fail@plt+0x1484>
   121cc:	ldr	r1, [sp, #44]	; 0x2c
   121d0:	ldrb	r3, [r1, r3]
   121d4:	sub	r3, r3, #48	; 0x30
   121d8:	cmp	r3, #9
   121dc:	bhi	12200 <__assert_fail@plt+0x1484>
   121e0:	cmp	fp, r8
   121e4:	movhi	r3, #48	; 0x30
   121e8:	strbhi	r3, [r9, r8]
   121ec:	add	r3, r2, #2
   121f0:	cmp	fp, r3
   121f4:	add	r8, r2, #3
   121f8:	movhi	r1, #48	; 0x30
   121fc:	strbhi	r1, [r9, r3]
   12200:	ldr	r3, [sp, #40]	; 0x28
   12204:	ldr	r1, [sp, #52]	; 0x34
   12208:	mov	r7, r3
   1220c:	str	r3, [sp, #32]
   12210:	mov	r4, #48	; 0x30
   12214:	b	11e64 <__assert_fail@plt+0x10e8>
   12218:	ldr	r6, [sp, #48]	; 0x30
   1221c:	cmp	sl, #0
   12220:	streq	r7, [sp, #32]
   12224:	beq	12244 <__assert_fail@plt+0x14c8>
   12228:	mov	r3, #0
   1222c:	ldr	r1, [sp, #52]	; 0x34
   12230:	str	r3, [sp, #32]
   12234:	b	11e64 <__assert_fail@plt+0x10e8>
   12238:	ldr	r6, [sp, #48]	; 0x30
   1223c:	mov	r3, #0
   12240:	str	r3, [sp, #32]
   12244:	ldr	r3, [sp, #64]	; 0x40
   12248:	cmp	r3, #0
   1224c:	bne	129c8 <__assert_fail@plt+0x1c4c>
   12250:	ldr	r1, [sp, #52]	; 0x34
   12254:	b	11e64 <__assert_fail@plt+0x10e8>
   12258:	ldr	r3, [sp, #48]	; 0x30
   1225c:	mov	r6, r3
   12260:	str	r3, [sp, #32]
   12264:	b	12244 <__assert_fail@plt+0x14c8>
   12268:	ldr	r6, [sp, #48]	; 0x30
   1226c:	mov	r4, #13
   12270:	mov	r3, #114	; 0x72
   12274:	b	120d8 <__assert_fail@plt+0x135c>
   12278:	ldr	r3, [sp, #44]	; 0x2c
   1227c:	add	r5, r3, sl
   12280:	ldrb	r4, [r5]
   12284:	cmp	r4, #126	; 0x7e
   12288:	ldrls	pc, [pc, r4, lsl #2]
   1228c:	b	12628 <__assert_fail@plt+0x18ac>
   12290:	strdeq	r2, [r1], -r8
   12294:	andeq	r2, r1, r8, lsr #12
   12298:	andeq	r2, r1, r8, lsr #12
   1229c:	andeq	r2, r1, r8, lsr #12
   122a0:	andeq	r2, r1, r8, lsr #12
   122a4:	andeq	r2, r1, r8, lsr #12
   122a8:	andeq	r2, r1, r8, lsr #12
   122ac:	strdeq	r2, [r1], -r0
   122b0:	andeq	r2, r1, r8, ror #11
   122b4:	ldrdeq	r2, [r1], -ip
   122b8:	ldrdeq	r2, [r1], -r4
   122bc:	andeq	r2, r1, ip, asr #11
   122c0:	andeq	r2, r1, r4, asr #11
   122c4:			; <UNDEFINED> instruction: 0x000125bc
   122c8:	andeq	r2, r1, r8, lsr #12
   122cc:	andeq	r2, r1, r8, lsr #12
   122d0:	andeq	r2, r1, r8, lsr #12
   122d4:	andeq	r2, r1, r8, lsr #12
   122d8:	andeq	r2, r1, r8, lsr #12
   122dc:	andeq	r2, r1, r8, lsr #12
   122e0:	andeq	r2, r1, r8, lsr #12
   122e4:	andeq	r2, r1, r8, lsr #12
   122e8:	andeq	r2, r1, r8, lsr #12
   122ec:	andeq	r2, r1, r8, lsr #12
   122f0:	andeq	r2, r1, r8, lsr #12
   122f4:	andeq	r2, r1, r8, lsr #12
   122f8:	andeq	r2, r1, r8, lsr #12
   122fc:	andeq	r2, r1, r8, lsr #12
   12300:	andeq	r2, r1, r8, lsr #12
   12304:	andeq	r2, r1, r8, lsr #12
   12308:	andeq	r2, r1, r8, lsr #12
   1230c:	andeq	r2, r1, r8, lsr #12
   12310:			; <UNDEFINED> instruction: 0x000125b0
   12314:	andeq	r2, r1, r8, lsr #11
   12318:	andeq	r2, r1, r8, lsr #11
   1231c:	andeq	r2, r1, r0, lsr #11
   12320:	andeq	r2, r1, r8, lsr #11
   12324:	muleq	r1, r8, r5
   12328:	andeq	r2, r1, r8, lsr #11
   1232c:	andeq	r2, r1, ip, lsl #10
   12330:	andeq	r2, r1, r8, lsr #11
   12334:	andeq	r2, r1, r8, lsr #11
   12338:	andeq	r2, r1, r8, lsr #11
   1233c:	muleq	r1, r8, r5
   12340:	muleq	r1, r8, r5
   12344:	muleq	r1, r8, r5
   12348:	muleq	r1, r8, r5
   1234c:	muleq	r1, r8, r5
   12350:	muleq	r1, r8, r5
   12354:	muleq	r1, r8, r5
   12358:	muleq	r1, r8, r5
   1235c:	muleq	r1, r8, r5
   12360:	muleq	r1, r8, r5
   12364:	muleq	r1, r8, r5
   12368:	muleq	r1, r8, r5
   1236c:	muleq	r1, r8, r5
   12370:	muleq	r1, r8, r5
   12374:	muleq	r1, r8, r5
   12378:	muleq	r1, r8, r5
   1237c:	andeq	r2, r1, r8, lsr #11
   12380:	andeq	r2, r1, r8, lsr #11
   12384:	andeq	r2, r1, r8, lsr #11
   12388:	andeq	r2, r1, r8, lsr #11
   1238c:	andeq	r2, r1, r0, ror #9
   12390:	andeq	r2, r1, r8, lsr #12
   12394:	muleq	r1, r8, r5
   12398:	muleq	r1, r8, r5
   1239c:	muleq	r1, r8, r5
   123a0:	muleq	r1, r8, r5
   123a4:	muleq	r1, r8, r5
   123a8:	muleq	r1, r8, r5
   123ac:	muleq	r1, r8, r5
   123b0:	muleq	r1, r8, r5
   123b4:	muleq	r1, r8, r5
   123b8:	muleq	r1, r8, r5
   123bc:	muleq	r1, r8, r5
   123c0:	muleq	r1, r8, r5
   123c4:	muleq	r1, r8, r5
   123c8:	muleq	r1, r8, r5
   123cc:	muleq	r1, r8, r5
   123d0:	muleq	r1, r8, r5
   123d4:	muleq	r1, r8, r5
   123d8:	muleq	r1, r8, r5
   123dc:	muleq	r1, r8, r5
   123e0:	muleq	r1, r8, r5
   123e4:	muleq	r1, r8, r5
   123e8:	muleq	r1, r8, r5
   123ec:	muleq	r1, r8, r5
   123f0:	muleq	r1, r8, r5
   123f4:	muleq	r1, r8, r5
   123f8:	muleq	r1, r8, r5
   123fc:	andeq	r2, r1, r8, lsr #11
   12400:			; <UNDEFINED> instruction: 0x000124b0
   12404:	muleq	r1, r8, r5
   12408:	andeq	r2, r1, r8, lsr #11
   1240c:	muleq	r1, r8, r5
   12410:	andeq	r2, r1, r8, lsr #11
   12414:	muleq	r1, r8, r5
   12418:	muleq	r1, r8, r5
   1241c:	muleq	r1, r8, r5
   12420:	muleq	r1, r8, r5
   12424:	muleq	r1, r8, r5
   12428:	muleq	r1, r8, r5
   1242c:	muleq	r1, r8, r5
   12430:	muleq	r1, r8, r5
   12434:	muleq	r1, r8, r5
   12438:	muleq	r1, r8, r5
   1243c:	muleq	r1, r8, r5
   12440:	muleq	r1, r8, r5
   12444:	muleq	r1, r8, r5
   12448:	muleq	r1, r8, r5
   1244c:	muleq	r1, r8, r5
   12450:	muleq	r1, r8, r5
   12454:	muleq	r1, r8, r5
   12458:	muleq	r1, r8, r5
   1245c:	muleq	r1, r8, r5
   12460:	muleq	r1, r8, r5
   12464:	muleq	r1, r8, r5
   12468:	muleq	r1, r8, r5
   1246c:	muleq	r1, r8, r5
   12470:	muleq	r1, r8, r5
   12474:	muleq	r1, r8, r5
   12478:	muleq	r1, r8, r5
   1247c:	andeq	r2, r1, ip, lsl #9
   12480:	andeq	r2, r1, r8, lsr #11
   12484:	andeq	r2, r1, ip, lsl #9
   12488:	andeq	r2, r1, r0, lsr #11
   1248c:	ldr	r3, [sp, #24]
   12490:	mov	r6, #0
   12494:	cmn	r3, #1
   12498:	bne	11e44 <__assert_fail@plt+0x10c8>
   1249c:	ldr	r3, [sp, #44]	; 0x2c
   124a0:	ldrb	r3, [r3, #1]
   124a4:	adds	r3, r3, #0
   124a8:	movne	r3, #1
   124ac:	b	11e4c <__assert_fail@plt+0x10d0>
   124b0:	ldr	r3, [sp, #176]	; 0xb0
   124b4:	mov	r6, #0
   124b8:	cmp	r3, #2
   124bc:	bne	11f8c <__assert_fail@plt+0x1210>
   124c0:	ldr	r3, [sp, #64]	; 0x40
   124c4:	cmp	r3, #0
   124c8:	bne	12d00 <__assert_fail@plt+0x1f84>
   124cc:	add	sl, sl, #1
   124d0:	ldr	r6, [sp, #36]	; 0x24
   124d4:	str	r3, [sp, #32]
   124d8:	mov	r4, #92	; 0x5c
   124dc:	b	11e98 <__assert_fail@plt+0x111c>
   124e0:	ldr	r3, [sp, #176]	; 0xb0
   124e4:	mov	r6, #0
   124e8:	cmp	r3, #2
   124ec:	bne	11fc0 <__assert_fail@plt+0x1244>
   124f0:	ldr	r3, [sp, #40]	; 0x28
   124f4:	cmp	r3, #0
   124f8:	bne	127dc <__assert_fail@plt+0x1a60>
   124fc:	mov	r1, r7
   12500:	str	r3, [sp, #32]
   12504:	mov	r4, #63	; 0x3f
   12508:	b	11e64 <__assert_fail@plt+0x10e8>
   1250c:	ldr	r3, [sp, #176]	; 0xb0
   12510:	mov	r6, #0
   12514:	cmp	r3, #2
   12518:	bne	12010 <__assert_fail@plt+0x1294>
   1251c:	ldr	r3, [sp, #64]	; 0x40
   12520:	cmp	r3, #0
   12524:	bne	12d00 <__assert_fail@plt+0x1f84>
   12528:	ldr	r2, [sp, #84]	; 0x54
   1252c:	adds	r3, fp, #0
   12530:	movne	r3, #1
   12534:	cmp	r2, #0
   12538:	movne	r3, #0
   1253c:	cmp	r3, #0
   12540:	strne	fp, [sp, #84]	; 0x54
   12544:	movne	fp, #0
   12548:	bne	12578 <__assert_fail@plt+0x17fc>
   1254c:	cmp	fp, r8
   12550:	movhi	r3, #39	; 0x27
   12554:	strbhi	r3, [r9, r8]
   12558:	add	r3, r8, #1
   1255c:	cmp	fp, r3
   12560:	movhi	r2, #92	; 0x5c
   12564:	strbhi	r2, [r9, r3]
   12568:	add	r3, r8, #2
   1256c:	cmp	fp, r3
   12570:	movhi	r2, #39	; 0x27
   12574:	strbhi	r2, [r9, r3]
   12578:	ldr	r3, [sp, #64]	; 0x40
   1257c:	add	r8, r8, #3
   12580:	mov	r1, r7
   12584:	str	r7, [sp, #32]
   12588:	str	r7, [sp, #76]	; 0x4c
   1258c:	str	r3, [sp, #36]	; 0x24
   12590:	mov	r4, #39	; 0x27
   12594:	b	11e64 <__assert_fail@plt+0x10e8>
   12598:	mov	r6, #0
   1259c:	b	12028 <__assert_fail@plt+0x12ac>
   125a0:	mov	r6, #0
   125a4:	b	1221c <__assert_fail@plt+0x14a0>
   125a8:	mov	r6, #0
   125ac:	b	1223c <__assert_fail@plt+0x14c0>
   125b0:	str	r7, [sp, #32]
   125b4:	mov	r6, #0
   125b8:	b	12244 <__assert_fail@plt+0x14c8>
   125bc:	mov	r6, #0
   125c0:	b	1226c <__assert_fail@plt+0x14f0>
   125c4:	mov	r6, #0
   125c8:	b	12038 <__assert_fail@plt+0x12bc>
   125cc:	mov	r6, #0
   125d0:	b	12100 <__assert_fail@plt+0x1384>
   125d4:	mov	r6, #0
   125d8:	b	120d0 <__assert_fail@plt+0x1354>
   125dc:	mov	r6, #0
   125e0:	mov	r3, #116	; 0x74
   125e4:	b	120d8 <__assert_fail@plt+0x135c>
   125e8:	mov	r6, #0
   125ec:	b	12114 <__assert_fail@plt+0x1398>
   125f0:	mov	r6, #0
   125f4:	b	12128 <__assert_fail@plt+0x13ac>
   125f8:	ldr	r3, [sp, #56]	; 0x38
   125fc:	mov	r6, #0
   12600:	cmp	r3, #0
   12604:	bne	12148 <__assert_fail@plt+0x13cc>
   12608:	ldr	r3, [sp, #96]	; 0x60
   1260c:	cmp	r3, #0
   12610:	addne	sl, sl, #1
   12614:	bne	119bc <__assert_fail@plt+0xc40>
   12618:	ldr	r1, [sp, #52]	; 0x34
   1261c:	str	r3, [sp, #32]
   12620:	mov	r4, r3
   12624:	b	11e64 <__assert_fail@plt+0x10e8>
   12628:	mov	r6, #0
   1262c:	ldr	r3, [sp, #80]	; 0x50
   12630:	cmp	r3, #1
   12634:	bne	12824 <__assert_fail@plt+0x1aa8>
   12638:	bl	10c98 <__ctype_b_loc@plt>
   1263c:	ldr	r2, [sp, #80]	; 0x50
   12640:	sxth	r3, r4
   12644:	mov	r1, r2
   12648:	lsl	r3, r3, #1
   1264c:	ldr	r2, [r0]
   12650:	ldrh	r3, [r2, r3]
   12654:	and	r3, r3, #16384	; 0x4000
   12658:	cmp	r3, #0
   1265c:	movne	r3, #1
   12660:	moveq	r3, #0
   12664:	str	r3, [sp, #32]
   12668:	moveq	r3, #1
   1266c:	movne	r3, #0
   12670:	ldr	r2, [sp, #56]	; 0x38
   12674:	and	r3, r3, r2
   12678:	ands	r3, r3, #255	; 0xff
   1267c:	beq	12250 <__assert_fail@plt+0x14d4>
   12680:	add	r1, sl, r1
   12684:	mov	r0, #0
   12688:	ldr	r7, [sp, #40]	; 0x28
   1268c:	ldr	r2, [sp, #36]	; 0x24
   12690:	ldr	lr, [sp, #52]	; 0x34
   12694:	b	12744 <__assert_fail@plt+0x19c8>
   12698:	cmp	r7, #0
   1269c:	bne	12a98 <__assert_fail@plt+0x1d1c>
   126a0:	eor	r0, r2, #1
   126a4:	ands	r0, lr, r0
   126a8:	beq	126e0 <__assert_fail@plt+0x1964>
   126ac:	cmp	fp, r8
   126b0:	movhi	r2, #39	; 0x27
   126b4:	strbhi	r2, [r9, r8]
   126b8:	add	r2, r8, #1
   126bc:	cmp	fp, r2
   126c0:	movhi	ip, #36	; 0x24
   126c4:	strbhi	ip, [r9, r2]
   126c8:	add	r2, r8, #2
   126cc:	cmp	fp, r2
   126d0:	movhi	ip, #39	; 0x27
   126d4:	strbhi	ip, [r9, r2]
   126d8:	add	r8, r8, #3
   126dc:	mov	r2, r0
   126e0:	cmp	fp, r8
   126e4:	movhi	r0, #92	; 0x5c
   126e8:	strbhi	r0, [r9, r8]
   126ec:	add	r0, r8, #1
   126f0:	cmp	fp, r0
   126f4:	lsrhi	ip, r4, #6
   126f8:	addhi	ip, ip, #48	; 0x30
   126fc:	strbhi	ip, [r9, r0]
   12700:	add	ip, r8, #2
   12704:	cmp	fp, ip
   12708:	lsrhi	r0, r4, #3
   1270c:	andhi	r0, r0, #7
   12710:	addhi	r0, r0, #48	; 0x30
   12714:	add	sl, sl, #1
   12718:	strbhi	r0, [r9, ip]
   1271c:	and	r4, r4, #7
   12720:	cmp	sl, r1
   12724:	add	r4, r4, #48	; 0x30
   12728:	add	r8, r8, #3
   1272c:	bcs	12ab0 <__assert_fail@plt+0x1d34>
   12730:	mov	r0, r3
   12734:	cmp	fp, r8
   12738:	strbhi	r4, [r9, r8]
   1273c:	ldrb	r4, [r5, #1]!
   12740:	add	r8, r8, #1
   12744:	cmp	r3, #0
   12748:	bne	12698 <__assert_fail@plt+0x191c>
   1274c:	cmp	r6, #0
   12750:	bne	127f4 <__assert_fail@plt+0x1a78>
   12754:	eor	r6, r0, #1
   12758:	and	r6, r6, r2
   1275c:	add	sl, sl, #1
   12760:	cmp	r1, sl
   12764:	uxtb	r6, r6
   12768:	bls	1281c <__assert_fail@plt+0x1aa0>
   1276c:	cmp	r6, #0
   12770:	beq	12734 <__assert_fail@plt+0x19b8>
   12774:	cmp	fp, r8
   12778:	movhi	r2, #39	; 0x27
   1277c:	strbhi	r2, [r9, r8]
   12780:	add	r2, r8, #1
   12784:	cmp	fp, r2
   12788:	movhi	ip, #39	; 0x27
   1278c:	strbhi	ip, [r9, r2]
   12790:	add	r8, r8, #2
   12794:	mov	r6, r3
   12798:	mov	r2, r3
   1279c:	b	12734 <__assert_fail@plt+0x19b8>
   127a0:	ldr	r3, [sp, #184]	; 0xb8
   127a4:	cmp	r3, #0
   127a8:	beq	11e80 <__assert_fail@plt+0x1104>
   127ac:	lsr	r2, r4, #5
   127b0:	mov	r0, r3
   127b4:	uxtb	r2, r2
   127b8:	and	r3, r4, #31
   127bc:	ldr	r2, [r0, r2, lsl #2]
   127c0:	lsr	r3, r2, r3
   127c4:	tst	r3, #1
   127c8:	beq	11e80 <__assert_fail@plt+0x1104>
   127cc:	ldr	r3, [sp, #40]	; 0x28
   127d0:	cmp	r3, #0
   127d4:	beq	1206c <__assert_fail@plt+0x12f0>
   127d8:	mov	r3, r1
   127dc:	str	r3, [sp, #64]	; 0x40
   127e0:	mov	sl, r9
   127e4:	ldr	r3, [sp, #56]	; 0x38
   127e8:	mov	r9, fp
   127ec:	ldr	r2, [sp, #64]	; 0x40
   127f0:	b	129e0 <__assert_fail@plt+0x1c64>
   127f4:	cmp	fp, r8
   127f8:	eor	r6, r0, #1
   127fc:	movhi	ip, #92	; 0x5c
   12800:	and	r6, r6, r2
   12804:	add	sl, sl, #1
   12808:	strbhi	ip, [r9, r8]
   1280c:	cmp	r1, sl
   12810:	add	r8, r8, #1
   12814:	uxtb	r6, r6
   12818:	bhi	1276c <__assert_fail@plt+0x19f0>
   1281c:	str	r2, [sp, #36]	; 0x24
   12820:	b	11e98 <__assert_fail@plt+0x111c>
   12824:	ldr	r3, [sp, #24]
   12828:	cmn	r3, #1
   1282c:	mov	r3, #0
   12830:	str	r3, [sp, #128]	; 0x80
   12834:	str	r3, [sp, #132]	; 0x84
   12838:	beq	12b2c <__assert_fail@plt+0x1db0>
   1283c:	mov	r2, r7
   12840:	mov	r3, #0
   12844:	str	r7, [sp, #104]	; 0x68
   12848:	str	r5, [sp, #116]	; 0x74
   1284c:	mov	r7, r3
   12850:	mov	r5, r2
   12854:	str	r4, [sp, #32]
   12858:	str	r6, [sp, #108]	; 0x6c
   1285c:	str	r8, [sp, #112]	; 0x70
   12860:	ldr	r3, [sp, #44]	; 0x2c
   12864:	add	r6, sl, r7
   12868:	add	r4, r3, r6
   1286c:	ldr	r3, [sp, #24]
   12870:	mov	r1, r4
   12874:	sub	r2, r3, r6
   12878:	add	r0, sp, #124	; 0x7c
   1287c:	add	r3, sp, #128	; 0x80
   12880:	bl	168b0 <__assert_fail@plt+0x5b34>
   12884:	subs	r8, r0, #0
   12888:	beq	12c10 <__assert_fail@plt+0x1e94>
   1288c:	cmn	r8, #1
   12890:	beq	12be8 <__assert_fail@plt+0x1e6c>
   12894:	cmn	r8, #2
   12898:	beq	12b80 <__assert_fail@plt+0x1e04>
   1289c:	ldr	r3, [sp, #64]	; 0x40
   128a0:	cmp	r3, #0
   128a4:	beq	12964 <__assert_fail@plt+0x1be8>
   128a8:	cmp	r8, #1
   128ac:	beq	12964 <__assert_fail@plt+0x1be8>
   128b0:	sub	r3, r8, #1
   128b4:	add	r6, r3, r6
   128b8:	ldr	r3, [sp, #44]	; 0x2c
   128bc:	add	r6, r3, r6
   128c0:	ldrb	r3, [r4, #1]!
   128c4:	sub	r3, r3, #91	; 0x5b
   128c8:	cmp	r3, #33	; 0x21
   128cc:	ldrls	pc, [pc, r3, lsl #2]
   128d0:	b	1295c <__assert_fail@plt+0x1be0>
   128d4:	andeq	r2, r1, r8, asr #19
   128d8:	andeq	r2, r1, r8, asr #19
   128dc:	andeq	r2, r1, ip, asr r9
   128e0:	andeq	r2, r1, r8, asr #19
   128e4:	andeq	r2, r1, ip, asr r9
   128e8:	andeq	r2, r1, r8, asr #19
   128ec:	andeq	r2, r1, ip, asr r9
   128f0:	andeq	r2, r1, ip, asr r9
   128f4:	andeq	r2, r1, ip, asr r9
   128f8:	andeq	r2, r1, ip, asr r9
   128fc:	andeq	r2, r1, ip, asr r9
   12900:	andeq	r2, r1, ip, asr r9
   12904:	andeq	r2, r1, ip, asr r9
   12908:	andeq	r2, r1, ip, asr r9
   1290c:	andeq	r2, r1, ip, asr r9
   12910:	andeq	r2, r1, ip, asr r9
   12914:	andeq	r2, r1, ip, asr r9
   12918:	andeq	r2, r1, ip, asr r9
   1291c:	andeq	r2, r1, ip, asr r9
   12920:	andeq	r2, r1, ip, asr r9
   12924:	andeq	r2, r1, ip, asr r9
   12928:	andeq	r2, r1, ip, asr r9
   1292c:	andeq	r2, r1, ip, asr r9
   12930:	andeq	r2, r1, ip, asr r9
   12934:	andeq	r2, r1, ip, asr r9
   12938:	andeq	r2, r1, ip, asr r9
   1293c:	andeq	r2, r1, ip, asr r9
   12940:	andeq	r2, r1, ip, asr r9
   12944:	andeq	r2, r1, ip, asr r9
   12948:	andeq	r2, r1, ip, asr r9
   1294c:	andeq	r2, r1, ip, asr r9
   12950:	andeq	r2, r1, ip, asr r9
   12954:	andeq	r2, r1, ip, asr r9
   12958:	andeq	r2, r1, r8, asr #19
   1295c:	cmp	r6, r4
   12960:	bne	128c0 <__assert_fail@plt+0x1b44>
   12964:	ldr	r0, [sp, #124]	; 0x7c
   12968:	bl	10c08 <iswprint@plt>
   1296c:	add	r7, r7, r8
   12970:	cmp	r0, #0
   12974:	add	r0, sp, #128	; 0x80
   12978:	moveq	r5, #0
   1297c:	bl	10bd8 <mbsinit@plt>
   12980:	cmp	r0, #0
   12984:	beq	12860 <__assert_fail@plt+0x1ae4>
   12988:	ldr	r4, [sp, #32]
   1298c:	str	r5, [sp, #32]
   12990:	ldr	r3, [sp, #32]
   12994:	mov	r1, r7
   12998:	eor	r3, r3, #1
   1299c:	ldr	r7, [sp, #104]	; 0x68
   129a0:	ldr	r6, [sp, #108]	; 0x6c
   129a4:	ldr	r8, [sp, #112]	; 0x70
   129a8:	ldr	r5, [sp, #116]	; 0x74
   129ac:	uxtb	r3, r3
   129b0:	cmp	r1, #1
   129b4:	bls	12670 <__assert_fail@plt+0x18f4>
   129b8:	ldr	r2, [sp, #56]	; 0x38
   129bc:	and	r3, r3, r2
   129c0:	uxtb	r3, r3
   129c4:	b	12680 <__assert_fail@plt+0x1904>
   129c8:	mov	r3, #2
   129cc:	str	r3, [sp, #176]	; 0xb0
   129d0:	ldr	r2, [sp, #64]	; 0x40
   129d4:	ldr	r3, [sp, #56]	; 0x38
   129d8:	mov	sl, r9
   129dc:	mov	r9, fp
   129e0:	and	r3, r3, r2
   129e4:	tst	r3, #255	; 0xff
   129e8:	ldr	r3, [sp, #176]	; 0xb0
   129ec:	movne	r3, #4
   129f0:	str	r3, [sp, #176]	; 0xb0
   129f4:	ldr	r3, [sp, #180]	; 0xb4
   129f8:	mov	ip, #0
   129fc:	bic	r3, r3, #2
   12a00:	str	r3, [sp, #4]
   12a04:	ldr	r3, [sp, #192]	; 0xc0
   12a08:	ldr	r2, [sp, #44]	; 0x2c
   12a0c:	str	r3, [sp, #16]
   12a10:	ldr	r3, [sp, #188]	; 0xbc
   12a14:	mov	r1, r9
   12a18:	str	r3, [sp, #12]
   12a1c:	ldr	r3, [sp, #176]	; 0xb0
   12a20:	mov	r0, sl
   12a24:	str	r3, [sp]
   12a28:	str	ip, [sp, #8]
   12a2c:	ldr	r3, [sp, #24]
   12a30:	bl	11890 <__assert_fail@plt+0xb14>
   12a34:	mov	fp, r0
   12a38:	mov	r0, fp
   12a3c:	add	sp, sp, #140	; 0x8c
   12a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a44:	mov	r4, #92	; 0x5c
   12a48:	mov	r1, #0
   12a4c:	mov	r3, r4
   12a50:	b	12044 <__assert_fail@plt+0x12c8>
   12a54:	mov	r3, #0
   12a58:	ldr	r1, [sp, #52]	; 0x34
   12a5c:	str	r3, [sp, #32]
   12a60:	mov	r4, #63	; 0x3f
   12a64:	b	11e64 <__assert_fail@plt+0x10e8>
   12a68:	cmp	fp, #0
   12a6c:	beq	12ac8 <__assert_fail@plt+0x1d4c>
   12a70:	mov	r3, #39	; 0x27
   12a74:	strb	r3, [r9]
   12a78:	mov	r3, #0
   12a7c:	str	r3, [sp, #40]	; 0x28
   12a80:	mov	r3, #1
   12a84:	str	r3, [sp, #68]	; 0x44
   12a88:	ldr	r3, [pc, #448]	; 12c50 <__assert_fail@plt+0x1ed4>
   12a8c:	mov	r8, #1
   12a90:	str	r3, [sp, #72]	; 0x48
   12a94:	b	11c78 <__assert_fail@plt+0xefc>
   12a98:	ldr	r3, [sp, #40]	; 0x28
   12a9c:	mov	sl, r9
   12aa0:	str	r3, [sp, #56]	; 0x38
   12aa4:	mov	r9, fp
   12aa8:	ldr	r2, [sp, #64]	; 0x40
   12aac:	b	129e0 <__assert_fail@plt+0x1c64>
   12ab0:	str	r2, [sp, #36]	; 0x24
   12ab4:	b	11ec8 <__assert_fail@plt+0x114c>
   12ab8:	mov	r1, #0
   12abc:	str	r3, [sp, #32]
   12ac0:	mov	r4, #63	; 0x3f
   12ac4:	b	11e64 <__assert_fail@plt+0x10e8>
   12ac8:	ldr	r3, [pc, #384]	; 12c50 <__assert_fail@plt+0x1ed4>
   12acc:	str	r3, [sp, #72]	; 0x48
   12ad0:	mov	r3, #0
   12ad4:	str	r3, [sp, #40]	; 0x28
   12ad8:	mov	r3, #1
   12adc:	str	r3, [sp, #68]	; 0x44
   12ae0:	mov	r8, r3
   12ae4:	b	11c78 <__assert_fail@plt+0xefc>
   12ae8:	bl	10d70 <abort@plt>
   12aec:	cmp	fp, #0
   12af0:	beq	12b50 <__assert_fail@plt+0x1dd4>
   12af4:	mov	r2, #1
   12af8:	mov	r3, #34	; 0x22
   12afc:	strb	r3, [r9]
   12b00:	mov	r8, r2
   12b04:	mov	r3, r2
   12b08:	str	r2, [sp, #68]	; 0x44
   12b0c:	str	r3, [sp, #56]	; 0x38
   12b10:	ldr	r3, [pc, #316]	; 12c54 <__assert_fail@plt+0x1ed8>
   12b14:	ldr	r1, [sp, #56]	; 0x38
   12b18:	str	r3, [sp, #72]	; 0x48
   12b1c:	ldr	r2, [sp, #176]	; 0xb0
   12b20:	ldr	ip, [sp, #40]	; 0x28
   12b24:	ldr	lr, [sp, #176]	; 0xb0
   12b28:	b	1195c <__assert_fail@plt+0xbe0>
   12b2c:	ldr	r0, [sp, #44]	; 0x2c
   12b30:	bl	10cb0 <strlen@plt>
   12b34:	str	r0, [sp, #24]
   12b38:	b	1283c <__assert_fail@plt+0x1ac0>
   12b3c:	mov	r7, #0
   12b40:	ldr	r1, [sp, #52]	; 0x34
   12b44:	str	r3, [sp, #32]
   12b48:	mov	r4, #48	; 0x30
   12b4c:	b	11e64 <__assert_fail@plt+0x10e8>
   12b50:	mov	r3, #1
   12b54:	str	r3, [sp, #68]	; 0x44
   12b58:	mov	r8, r3
   12b5c:	b	12b0c <__assert_fail@plt+0x1d90>
   12b60:	mov	r3, #2
   12b64:	mov	sl, r9
   12b68:	str	r3, [sp, #176]	; 0xb0
   12b6c:	mov	r9, fp
   12b70:	ldr	r3, [sp, #56]	; 0x38
   12b74:	b	129e0 <__assert_fail@plt+0x1c64>
   12b78:	ldr	r6, [sp, #48]	; 0x30
   12b7c:	b	1262c <__assert_fail@plt+0x18b0>
   12b80:	ldr	r0, [sp, #24]
   12b84:	mov	ip, r6
   12b88:	cmp	r0, ip
   12b8c:	mov	r1, r7
   12b90:	mov	r2, r4
   12b94:	ldr	r7, [sp, #104]	; 0x68
   12b98:	ldr	r4, [sp, #32]
   12b9c:	ldr	r6, [sp, #108]	; 0x6c
   12ba0:	ldr	r8, [sp, #112]	; 0x70
   12ba4:	ldr	r5, [sp, #116]	; 0x74
   12ba8:	bls	12bd8 <__assert_fail@plt+0x1e5c>
   12bac:	ldrb	r3, [r2]
   12bb0:	cmp	r3, #0
   12bb4:	bne	12bc8 <__assert_fail@plt+0x1e4c>
   12bb8:	b	12ce8 <__assert_fail@plt+0x1f6c>
   12bbc:	ldrb	r3, [r2, #1]!
   12bc0:	cmp	r3, #0
   12bc4:	beq	12ce8 <__assert_fail@plt+0x1f6c>
   12bc8:	add	r1, r1, #1
   12bcc:	add	r3, sl, r1
   12bd0:	cmp	r0, r3
   12bd4:	bhi	12bbc <__assert_fail@plt+0x1e40>
   12bd8:	mov	r2, #0
   12bdc:	mov	r3, r7
   12be0:	str	r2, [sp, #32]
   12be4:	b	129b0 <__assert_fail@plt+0x1c34>
   12be8:	mov	r1, r7
   12bec:	ldr	r7, [sp, #104]	; 0x68
   12bf0:	mov	r2, #0
   12bf4:	ldr	r4, [sp, #32]
   12bf8:	ldr	r6, [sp, #108]	; 0x6c
   12bfc:	ldr	r8, [sp, #112]	; 0x70
   12c00:	ldr	r5, [sp, #116]	; 0x74
   12c04:	mov	r3, r7
   12c08:	str	r2, [sp, #32]
   12c0c:	b	129b0 <__assert_fail@plt+0x1c34>
   12c10:	mov	r3, r5
   12c14:	eor	r3, r3, #1
   12c18:	ldr	r4, [sp, #32]
   12c1c:	mov	r1, r7
   12c20:	str	r5, [sp, #32]
   12c24:	ldr	r7, [sp, #104]	; 0x68
   12c28:	ldr	r6, [sp, #108]	; 0x6c
   12c2c:	ldr	r8, [sp, #112]	; 0x70
   12c30:	ldr	r5, [sp, #116]	; 0x74
   12c34:	uxtb	r3, r3
   12c38:	b	129b0 <__assert_fail@plt+0x1c34>
   12c3c:	mov	sl, r9
   12c40:	str	r3, [sp, #56]	; 0x38
   12c44:	mov	r9, fp
   12c48:	ldr	r2, [sp, #64]	; 0x40
   12c4c:	b	129e0 <__assert_fail@plt+0x1c64>
   12c50:	andeq	r7, r1, r4, ror #9
   12c54:	andeq	r7, r1, r0, ror #9
   12c58:	andeq	r7, r1, r8, ror #9
   12c5c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12c60:	ldr	r2, [sp, #44]	; 0x2c
   12c64:	ldrb	r1, [r2, r3]
   12c68:	sub	r2, r1, #33	; 0x21
   12c6c:	uxtb	r2, r2
   12c70:	cmp	r2, #29
   12c74:	bhi	12cf4 <__assert_fail@plt+0x1f78>
   12c78:	ldr	r0, [pc, #-36]	; 12c5c <__assert_fail@plt+0x1ee0>
   12c7c:	mov	ip, #1
   12c80:	ands	r2, r0, ip, lsl r2
   12c84:	beq	12d14 <__assert_fail@plt+0x1f98>
   12c88:	ldr	r2, [sp, #40]	; 0x28
   12c8c:	cmp	r2, #0
   12c90:	bne	12e08 <__assert_fail@plt+0x208c>
   12c94:	add	r2, r8, #1
   12c98:	cmp	fp, r8
   12c9c:	strbhi	r4, [r9, r8]
   12ca0:	cmp	fp, r2
   12ca4:	movhi	r0, #34	; 0x22
   12ca8:	strbhi	r0, [r9, r2]
   12cac:	add	r2, r8, #2
   12cb0:	cmp	fp, r2
   12cb4:	movhi	r0, #34	; 0x22
   12cb8:	strbhi	r0, [r9, r2]
   12cbc:	add	r2, r8, #3
   12cc0:	cmp	fp, r2
   12cc4:	mov	sl, r3
   12cc8:	ldr	r3, [sp, #40]	; 0x28
   12ccc:	movhi	r0, #63	; 0x3f
   12cd0:	mov	r4, r1
   12cd4:	strbhi	r0, [r9, r2]
   12cd8:	add	r8, r8, #4
   12cdc:	mov	r1, r3
   12ce0:	str	r3, [sp, #32]
   12ce4:	b	11e64 <__assert_fail@plt+0x10e8>
   12ce8:	str	r3, [sp, #32]
   12cec:	mov	r3, r7
   12cf0:	b	129b0 <__assert_fail@plt+0x1c34>
   12cf4:	mov	r1, #0
   12cf8:	str	r1, [sp, #32]
   12cfc:	b	11e64 <__assert_fail@plt+0x10e8>
   12d00:	mov	sl, r9
   12d04:	ldr	r3, [sp, #56]	; 0x38
   12d08:	mov	r9, fp
   12d0c:	ldr	r2, [sp, #64]	; 0x40
   12d10:	b	129e0 <__assert_fail@plt+0x1c64>
   12d14:	str	r2, [sp, #32]
   12d18:	mov	r1, #0
   12d1c:	b	11e64 <__assert_fail@plt+0x10e8>
   12d20:	ldr	r2, [sp, #76]	; 0x4c
   12d24:	mov	sl, r9
   12d28:	mov	r9, fp
   12d2c:	mov	fp, r8
   12d30:	ldr	r1, [sp, #72]	; 0x48
   12d34:	cmp	r1, #0
   12d38:	moveq	r3, #0
   12d3c:	andne	r3, r2, #1
   12d40:	cmp	r3, #0
   12d44:	beq	12d70 <__assert_fail@plt+0x1ff4>
   12d48:	ldrb	r3, [r1]
   12d4c:	cmp	r3, #0
   12d50:	beq	12d70 <__assert_fail@plt+0x1ff4>
   12d54:	mov	r2, r1
   12d58:	cmp	r9, fp
   12d5c:	strbhi	r3, [sl, fp]
   12d60:	ldrb	r3, [r2, #1]!
   12d64:	add	fp, fp, #1
   12d68:	cmp	r3, #0
   12d6c:	bne	12d58 <__assert_fail@plt+0x1fdc>
   12d70:	cmp	r9, fp
   12d74:	movhi	r3, #0
   12d78:	strbhi	r3, [sl, fp]
   12d7c:	b	12a38 <__assert_fail@plt+0x1cbc>
   12d80:	ldr	r3, [sp, #192]	; 0xc0
   12d84:	mov	ip, #5
   12d88:	str	r3, [sp, #16]
   12d8c:	ldr	r3, [sp, #188]	; 0xbc
   12d90:	ldr	r2, [sp, #44]	; 0x2c
   12d94:	str	r3, [sp, #12]
   12d98:	ldr	r3, [sp, #184]	; 0xb8
   12d9c:	ldr	r1, [sp, #84]	; 0x54
   12da0:	str	r3, [sp, #8]
   12da4:	ldr	r3, [sp, #180]	; 0xb4
   12da8:	mov	r0, r9
   12dac:	str	r3, [sp, #4]
   12db0:	str	ip, [sp]
   12db4:	ldr	r3, [sp, #24]
   12db8:	bl	11890 <__assert_fail@plt+0xb14>
   12dbc:	mov	fp, r0
   12dc0:	b	12a38 <__assert_fail@plt+0x1cbc>
   12dc4:	mov	sl, r9
   12dc8:	mov	r9, fp
   12dcc:	mov	fp, r8
   12dd0:	b	12d30 <__assert_fail@plt+0x1fb4>
   12dd4:	ldr	r1, [sp, #176]	; 0xb0
   12dd8:	bl	11770 <__assert_fail@plt+0x9f4>
   12ddc:	str	r0, [sp, #192]	; 0xc0
   12de0:	b	11d4c <__assert_fail@plt+0xfd0>
   12de4:	ldr	r1, [sp, #176]	; 0xb0
   12de8:	bl	11770 <__assert_fail@plt+0x9f4>
   12dec:	str	r0, [sp, #188]	; 0xbc
   12df0:	b	11d2c <__assert_fail@plt+0xfb0>
   12df4:	mov	sl, r9
   12df8:	mov	r2, r3
   12dfc:	mov	r9, fp
   12e00:	mov	fp, r8
   12e04:	b	12d30 <__assert_fail@plt+0x1fb4>
   12e08:	mov	sl, r9
   12e0c:	mov	r9, fp
   12e10:	b	129f4 <__assert_fail@plt+0x1c78>
   12e14:	push	{r4, r5, r6, lr}
   12e18:	mov	r5, r0
   12e1c:	bl	10cc8 <__errno_location@plt>
   12e20:	cmp	r5, #0
   12e24:	mov	r1, #48	; 0x30
   12e28:	mov	r4, r0
   12e2c:	ldr	r0, [pc, #16]	; 12e44 <__assert_fail@plt+0x20c8>
   12e30:	ldr	r6, [r4]
   12e34:	movne	r0, r5
   12e38:	bl	165c8 <__assert_fail@plt+0x584c>
   12e3c:	str	r6, [r4]
   12e40:	pop	{r4, r5, r6, pc}
   12e44:	andeq	r8, r2, ip, asr #2
   12e48:	ldr	r3, [pc, #12]	; 12e5c <__assert_fail@plt+0x20e0>
   12e4c:	cmp	r0, #0
   12e50:	moveq	r0, r3
   12e54:	ldr	r0, [r0]
   12e58:	bx	lr
   12e5c:	andeq	r8, r2, ip, asr #2
   12e60:	ldr	r3, [pc, #12]	; 12e74 <__assert_fail@plt+0x20f8>
   12e64:	cmp	r0, #0
   12e68:	moveq	r0, r3
   12e6c:	str	r1, [r0]
   12e70:	bx	lr
   12e74:	andeq	r8, r2, ip, asr #2
   12e78:	ldr	r3, [pc, #52]	; 12eb4 <__assert_fail@plt+0x2138>
   12e7c:	cmp	r0, #0
   12e80:	moveq	r0, r3
   12e84:	add	r3, r0, #8
   12e88:	push	{lr}		; (str lr, [sp, #-4]!)
   12e8c:	lsr	lr, r1, #5
   12e90:	and	r1, r1, #31
   12e94:	ldr	ip, [r3, lr, lsl #2]
   12e98:	lsr	r0, ip, r1
   12e9c:	eor	r2, r2, r0
   12ea0:	and	r2, r2, #1
   12ea4:	and	r0, r0, #1
   12ea8:	eor	r1, ip, r2, lsl r1
   12eac:	str	r1, [r3, lr, lsl #2]
   12eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   12eb4:	andeq	r8, r2, ip, asr #2
   12eb8:	ldr	r3, [pc, #16]	; 12ed0 <__assert_fail@plt+0x2154>
   12ebc:	cmp	r0, #0
   12ec0:	movne	r3, r0
   12ec4:	ldr	r0, [r3, #4]
   12ec8:	str	r1, [r3, #4]
   12ecc:	bx	lr
   12ed0:	andeq	r8, r2, ip, asr #2
   12ed4:	ldr	r3, [pc, #44]	; 12f08 <__assert_fail@plt+0x218c>
   12ed8:	cmp	r0, #0
   12edc:	moveq	r0, r3
   12ee0:	mov	ip, #10
   12ee4:	cmp	r2, #0
   12ee8:	cmpne	r1, #0
   12eec:	str	ip, [r0]
   12ef0:	beq	12f00 <__assert_fail@plt+0x2184>
   12ef4:	str	r1, [r0, #40]	; 0x28
   12ef8:	str	r2, [r0, #44]	; 0x2c
   12efc:	bx	lr
   12f00:	push	{r4, lr}
   12f04:	bl	10d70 <abort@plt>
   12f08:	andeq	r8, r2, ip, asr #2
   12f0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f10:	sub	sp, sp, #24
   12f14:	ldr	ip, [pc, #108]	; 12f88 <__assert_fail@plt+0x220c>
   12f18:	ldr	r4, [sp, #56]	; 0x38
   12f1c:	mov	r9, r2
   12f20:	cmp	r4, #0
   12f24:	moveq	r4, ip
   12f28:	mov	sl, r3
   12f2c:	mov	r7, r0
   12f30:	mov	r8, r1
   12f34:	bl	10cc8 <__errno_location@plt>
   12f38:	ldr	r3, [r4, #44]	; 0x2c
   12f3c:	mov	r1, r8
   12f40:	ldr	r6, [r0]
   12f44:	str	r3, [sp, #16]
   12f48:	ldr	r2, [r4, #40]	; 0x28
   12f4c:	add	r3, r4, #8
   12f50:	str	r3, [sp, #8]
   12f54:	str	r2, [sp, #12]
   12f58:	ldr	r2, [r4, #4]
   12f5c:	mov	r5, r0
   12f60:	str	r2, [sp, #4]
   12f64:	ldr	ip, [r4]
   12f68:	mov	r3, sl
   12f6c:	mov	r2, r9
   12f70:	mov	r0, r7
   12f74:	str	ip, [sp]
   12f78:	bl	11890 <__assert_fail@plt+0xb14>
   12f7c:	str	r6, [r5]
   12f80:	add	sp, sp, #24
   12f84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f88:	andeq	r8, r2, ip, asr #2
   12f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f90:	cmp	r2, #0
   12f94:	sub	sp, sp, #36	; 0x24
   12f98:	ldr	r4, [pc, #164]	; 13044 <__assert_fail@plt+0x22c8>
   12f9c:	mov	r8, r1
   12fa0:	movne	r4, r2
   12fa4:	mov	r7, r0
   12fa8:	bl	10cc8 <__errno_location@plt>
   12fac:	ldr	r3, [r4, #44]	; 0x2c
   12fb0:	ldr	r5, [r4, #4]
   12fb4:	add	r9, r4, #8
   12fb8:	orr	r5, r5, #1
   12fbc:	mov	r1, #0
   12fc0:	mov	r2, r7
   12fc4:	ldr	fp, [r0]
   12fc8:	str	r3, [sp, #16]
   12fcc:	ldr	r3, [r4, #40]	; 0x28
   12fd0:	stmib	sp, {r5, r9}
   12fd4:	str	r3, [sp, #12]
   12fd8:	ldr	r3, [r4]
   12fdc:	mov	r6, r0
   12fe0:	str	r3, [sp]
   12fe4:	mov	r0, r1
   12fe8:	mov	r3, r8
   12fec:	bl	11890 <__assert_fail@plt+0xb14>
   12ff0:	add	r1, r0, #1
   12ff4:	mov	r0, r1
   12ff8:	str	r1, [sp, #28]
   12ffc:	bl	16084 <__assert_fail@plt+0x5308>
   13000:	ldr	r3, [r4, #44]	; 0x2c
   13004:	ldr	r1, [sp, #28]
   13008:	str	r3, [sp, #16]
   1300c:	ldr	r3, [r4, #40]	; 0x28
   13010:	str	r5, [sp, #4]
   13014:	str	r3, [sp, #12]
   13018:	str	r9, [sp, #8]
   1301c:	ldr	ip, [r4]
   13020:	mov	r3, r8
   13024:	mov	r2, r7
   13028:	str	ip, [sp]
   1302c:	mov	sl, r0
   13030:	bl	11890 <__assert_fail@plt+0xb14>
   13034:	mov	r0, sl
   13038:	str	fp, [r6]
   1303c:	add	sp, sp, #36	; 0x24
   13040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13044:	andeq	r8, r2, ip, asr #2
   13048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1304c:	cmp	r3, #0
   13050:	sub	sp, sp, #44	; 0x2c
   13054:	ldr	r4, [pc, #192]	; 1311c <__assert_fail@plt+0x23a0>
   13058:	mov	r6, r2
   1305c:	movne	r4, r3
   13060:	mov	r9, r1
   13064:	mov	r8, r0
   13068:	bl	10cc8 <__errno_location@plt>
   1306c:	ldr	r3, [r4, #44]	; 0x2c
   13070:	ldr	r5, [r4, #4]
   13074:	add	sl, r4, #8
   13078:	cmp	r6, #0
   1307c:	orreq	r5, r5, #1
   13080:	mov	r1, #0
   13084:	ldr	r2, [r0]
   13088:	str	r3, [sp, #16]
   1308c:	ldr	r3, [r4, #40]	; 0x28
   13090:	stmib	sp, {r5, sl}
   13094:	str	r3, [sp, #12]
   13098:	ldr	r3, [r4]
   1309c:	mov	r7, r0
   130a0:	str	r2, [sp, #28]
   130a4:	str	r3, [sp]
   130a8:	mov	r2, r8
   130ac:	mov	r3, r9
   130b0:	mov	r0, r1
   130b4:	bl	11890 <__assert_fail@plt+0xb14>
   130b8:	add	r1, r0, #1
   130bc:	mov	fp, r0
   130c0:	mov	r0, r1
   130c4:	str	r1, [sp, #36]	; 0x24
   130c8:	bl	16084 <__assert_fail@plt+0x5308>
   130cc:	ldr	r3, [r4, #44]	; 0x2c
   130d0:	mov	r2, r8
   130d4:	str	r3, [sp, #16]
   130d8:	ldr	r3, [r4, #40]	; 0x28
   130dc:	str	r5, [sp, #4]
   130e0:	str	r3, [sp, #12]
   130e4:	str	sl, [sp, #8]
   130e8:	ldr	ip, [r4]
   130ec:	ldr	r1, [sp, #36]	; 0x24
   130f0:	mov	r3, r9
   130f4:	str	ip, [sp]
   130f8:	str	r0, [sp, #32]
   130fc:	bl	11890 <__assert_fail@plt+0xb14>
   13100:	ldr	r2, [sp, #28]
   13104:	cmp	r6, #0
   13108:	str	r2, [r7]
   1310c:	ldr	r0, [sp, #32]
   13110:	strne	fp, [r6]
   13114:	add	sp, sp, #44	; 0x2c
   13118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1311c:	andeq	r8, r2, ip, asr #2
   13120:	push	{r4, r5, r6, r7, r8, lr}
   13124:	ldr	r6, [pc, #116]	; 131a0 <__assert_fail@plt+0x2424>
   13128:	ldr	r3, [r6, #4]
   1312c:	ldr	r7, [r6]
   13130:	cmp	r3, #1
   13134:	movgt	r5, r7
   13138:	movgt	r4, #1
   1313c:	ble	1315c <__assert_fail@plt+0x23e0>
   13140:	ldr	r0, [r5, #12]
   13144:	bl	1678c <__assert_fail@plt+0x5a10>
   13148:	ldr	r3, [r6, #4]
   1314c:	add	r4, r4, #1
   13150:	cmp	r3, r4
   13154:	add	r5, r5, #8
   13158:	bgt	13140 <__assert_fail@plt+0x23c4>
   1315c:	ldr	r0, [r7, #4]
   13160:	ldr	r4, [pc, #60]	; 131a4 <__assert_fail@plt+0x2428>
   13164:	cmp	r0, r4
   13168:	beq	1317c <__assert_fail@plt+0x2400>
   1316c:	bl	1678c <__assert_fail@plt+0x5a10>
   13170:	mov	r3, #256	; 0x100
   13174:	str	r4, [r6, #12]
   13178:	str	r3, [r6, #8]
   1317c:	ldr	r4, [pc, #36]	; 131a8 <__assert_fail@plt+0x242c>
   13180:	cmp	r7, r4
   13184:	beq	13194 <__assert_fail@plt+0x2418>
   13188:	mov	r0, r7
   1318c:	bl	1678c <__assert_fail@plt+0x5a10>
   13190:	str	r4, [r6]
   13194:	mov	r3, #1
   13198:	str	r3, [r6, #4]
   1319c:	pop	{r4, r5, r6, r7, r8, pc}
   131a0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   131a4:	andeq	r8, r2, ip, ror r1
   131a8:	andeq	r8, r2, r0, ror #1
   131ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131b0:	sub	sp, sp, #44	; 0x2c
   131b4:	mov	r5, r0
   131b8:	mov	sl, r1
   131bc:	bl	10cc8 <__errno_location@plt>
   131c0:	ldr	r4, [pc, #400]	; 13358 <__assert_fail@plt+0x25dc>
   131c4:	cmn	r5, #-2147483647	; 0x80000001
   131c8:	ldr	r6, [r4]
   131cc:	mov	r8, r0
   131d0:	movne	r0, #0
   131d4:	moveq	r0, #1
   131d8:	ldr	r3, [r8]
   131dc:	orrs	r0, r0, r5, lsr #31
   131e0:	str	r3, [sp, #24]
   131e4:	bne	13354 <__assert_fail@plt+0x25d8>
   131e8:	ldr	r2, [r4, #4]
   131ec:	cmp	r5, r2
   131f0:	blt	13250 <__assert_fail@plt+0x24d4>
   131f4:	add	r7, r4, #8
   131f8:	cmp	r6, r7
   131fc:	str	r2, [sp, #36]	; 0x24
   13200:	beq	13324 <__assert_fail@plt+0x25a8>
   13204:	mov	r3, #8
   13208:	sub	r2, r5, r2
   1320c:	mov	r0, r6
   13210:	str	r3, [sp]
   13214:	add	r2, r2, #1
   13218:	mvn	r3, #-2147483648	; 0x80000000
   1321c:	add	r1, sp, #36	; 0x24
   13220:	bl	162a0 <__assert_fail@plt+0x5524>
   13224:	mov	r6, r0
   13228:	str	r0, [r4]
   1322c:	ldr	r0, [r4, #4]
   13230:	ldr	r2, [sp, #36]	; 0x24
   13234:	mov	r1, #0
   13238:	sub	r2, r2, r0
   1323c:	add	r0, r6, r0, lsl #3
   13240:	lsl	r2, r2, #3
   13244:	bl	10ce0 <memset@plt>
   13248:	ldr	r3, [sp, #36]	; 0x24
   1324c:	str	r3, [r4, #4]
   13250:	ldr	r4, [pc, #260]	; 1335c <__assert_fail@plt+0x25e0>
   13254:	add	fp, r6, r5, lsl #3
   13258:	ldr	r9, [r6, r5, lsl #3]
   1325c:	ldr	r0, [r4, #4]
   13260:	ldr	r3, [r4]
   13264:	ldr	r7, [fp, #4]
   13268:	ldr	r1, [r4, #44]	; 0x2c
   1326c:	ldr	r2, [r4, #40]	; 0x28
   13270:	orr	r0, r0, #1
   13274:	str	r3, [sp]
   13278:	add	r3, r4, #8
   1327c:	str	r0, [sp, #28]
   13280:	str	r0, [sp, #4]
   13284:	str	r1, [sp, #16]
   13288:	str	r2, [sp, #12]
   1328c:	str	r3, [sp, #8]
   13290:	mov	r0, r7
   13294:	mov	r1, r9
   13298:	mvn	r3, #0
   1329c:	mov	r2, sl
   132a0:	bl	11890 <__assert_fail@plt+0xb14>
   132a4:	cmp	r9, r0
   132a8:	bhi	13310 <__assert_fail@plt+0x2594>
   132ac:	add	r3, r4, #48	; 0x30
   132b0:	add	r9, r0, #1
   132b4:	cmp	r7, r3
   132b8:	str	r9, [r6, r5, lsl #3]
   132bc:	beq	132c8 <__assert_fail@plt+0x254c>
   132c0:	mov	r0, r7
   132c4:	bl	1678c <__assert_fail@plt+0x5a10>
   132c8:	mov	r0, r9
   132cc:	bl	16084 <__assert_fail@plt+0x5308>
   132d0:	ldr	ip, [r4, #44]	; 0x2c
   132d4:	ldr	r3, [r4]
   132d8:	ldr	lr, [r4, #40]	; 0x28
   132dc:	ldr	r4, [pc, #124]	; 13360 <__assert_fail@plt+0x25e4>
   132e0:	mov	r2, sl
   132e4:	mov	r1, r9
   132e8:	str	r0, [fp, #4]
   132ec:	str	r4, [sp, #8]
   132f0:	ldr	r4, [sp, #28]
   132f4:	str	r3, [sp]
   132f8:	str	r4, [sp, #4]
   132fc:	str	ip, [sp, #16]
   13300:	str	lr, [sp, #12]
   13304:	mvn	r3, #0
   13308:	mov	r7, r0
   1330c:	bl	11890 <__assert_fail@plt+0xb14>
   13310:	ldr	r3, [sp, #24]
   13314:	mov	r0, r7
   13318:	str	r3, [r8]
   1331c:	add	sp, sp, #44	; 0x2c
   13320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13324:	mov	r3, #8
   13328:	sub	r2, r5, r2
   1332c:	str	r3, [sp]
   13330:	add	r1, sp, #36	; 0x24
   13334:	add	r2, r2, #1
   13338:	mvn	r3, #-2147483648	; 0x80000000
   1333c:	bl	162a0 <__assert_fail@plt+0x5524>
   13340:	mov	r6, r0
   13344:	ldm	r7, {r0, r1}
   13348:	str	r6, [r4]
   1334c:	stm	r6, {r0, r1}
   13350:	b	1322c <__assert_fail@plt+0x24b0>
   13354:	bl	10d70 <abort@plt>
   13358:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1335c:	andeq	r8, r2, ip, asr #2
   13360:	andeq	r8, r2, r4, asr r1
   13364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13368:	sub	sp, sp, #52	; 0x34
   1336c:	mov	r5, r0
   13370:	mov	sl, r1
   13374:	mov	fp, r2
   13378:	bl	10cc8 <__errno_location@plt>
   1337c:	ldr	r4, [pc, #408]	; 1351c <__assert_fail@plt+0x27a0>
   13380:	cmn	r5, #-2147483647	; 0x80000001
   13384:	ldr	r6, [r4]
   13388:	mov	r8, r0
   1338c:	movne	r0, #0
   13390:	moveq	r0, #1
   13394:	ldr	r3, [r8]
   13398:	orrs	r0, r0, r5, lsr #31
   1339c:	str	r3, [sp, #28]
   133a0:	bne	13518 <__assert_fail@plt+0x279c>
   133a4:	ldr	r2, [r4, #4]
   133a8:	cmp	r5, r2
   133ac:	blt	1340c <__assert_fail@plt+0x2690>
   133b0:	add	r7, r4, #8
   133b4:	cmp	r6, r7
   133b8:	str	r2, [sp, #44]	; 0x2c
   133bc:	beq	134e8 <__assert_fail@plt+0x276c>
   133c0:	mov	r3, #8
   133c4:	sub	r2, r5, r2
   133c8:	mov	r0, r6
   133cc:	str	r3, [sp]
   133d0:	add	r2, r2, #1
   133d4:	mvn	r3, #-2147483648	; 0x80000000
   133d8:	add	r1, sp, #44	; 0x2c
   133dc:	bl	162a0 <__assert_fail@plt+0x5524>
   133e0:	mov	r6, r0
   133e4:	str	r0, [r4]
   133e8:	ldr	r0, [r4, #4]
   133ec:	ldr	r2, [sp, #44]	; 0x2c
   133f0:	mov	r1, #0
   133f4:	sub	r2, r2, r0
   133f8:	add	r0, r6, r0, lsl #3
   133fc:	lsl	r2, r2, #3
   13400:	bl	10ce0 <memset@plt>
   13404:	ldr	r3, [sp, #44]	; 0x2c
   13408:	str	r3, [r4, #4]
   1340c:	ldr	r4, [pc, #268]	; 13520 <__assert_fail@plt+0x27a4>
   13410:	add	r3, r6, r5, lsl #3
   13414:	str	r3, [sp, #32]
   13418:	ldr	r7, [r3, #4]
   1341c:	ldr	r0, [r4, #4]
   13420:	ldr	r3, [r4]
   13424:	ldr	r9, [r6, r5, lsl #3]
   13428:	ldr	r1, [r4, #44]	; 0x2c
   1342c:	ldr	r2, [r4, #40]	; 0x28
   13430:	orr	r0, r0, #1
   13434:	str	r3, [sp]
   13438:	add	r3, r4, #8
   1343c:	str	r0, [sp, #36]	; 0x24
   13440:	str	r0, [sp, #4]
   13444:	str	r1, [sp, #16]
   13448:	str	r2, [sp, #12]
   1344c:	str	r3, [sp, #8]
   13450:	mov	r0, r7
   13454:	mov	r1, r9
   13458:	mov	r3, fp
   1345c:	mov	r2, sl
   13460:	bl	11890 <__assert_fail@plt+0xb14>
   13464:	cmp	r9, r0
   13468:	bhi	134d4 <__assert_fail@plt+0x2758>
   1346c:	add	r3, r4, #48	; 0x30
   13470:	add	r9, r0, #1
   13474:	cmp	r7, r3
   13478:	str	r9, [r6, r5, lsl #3]
   1347c:	beq	13488 <__assert_fail@plt+0x270c>
   13480:	mov	r0, r7
   13484:	bl	1678c <__assert_fail@plt+0x5a10>
   13488:	mov	r0, r9
   1348c:	bl	16084 <__assert_fail@plt+0x5308>
   13490:	ldr	ip, [sp, #32]
   13494:	ldr	lr, [r4, #44]	; 0x2c
   13498:	ldr	r5, [r4, #40]	; 0x28
   1349c:	mov	r3, fp
   134a0:	mov	r2, sl
   134a4:	mov	r1, r9
   134a8:	str	r0, [ip, #4]
   134ac:	ldr	ip, [r4]
   134b0:	ldr	r4, [pc, #108]	; 13524 <__assert_fail@plt+0x27a8>
   134b4:	str	lr, [sp, #16]
   134b8:	str	r4, [sp, #8]
   134bc:	ldr	r4, [sp, #36]	; 0x24
   134c0:	str	r5, [sp, #12]
   134c4:	str	r4, [sp, #4]
   134c8:	str	ip, [sp]
   134cc:	mov	r7, r0
   134d0:	bl	11890 <__assert_fail@plt+0xb14>
   134d4:	ldr	r3, [sp, #28]
   134d8:	mov	r0, r7
   134dc:	str	r3, [r8]
   134e0:	add	sp, sp, #52	; 0x34
   134e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134e8:	mov	r3, #8
   134ec:	sub	r2, r5, r2
   134f0:	str	r3, [sp]
   134f4:	add	r1, sp, #44	; 0x2c
   134f8:	add	r2, r2, #1
   134fc:	mvn	r3, #-2147483648	; 0x80000000
   13500:	bl	162a0 <__assert_fail@plt+0x5524>
   13504:	mov	r6, r0
   13508:	ldm	r7, {r0, r1}
   1350c:	str	r6, [r4]
   13510:	stm	r6, {r0, r1}
   13514:	b	133e8 <__assert_fail@plt+0x266c>
   13518:	bl	10d70 <abort@plt>
   1351c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13520:	andeq	r8, r2, ip, asr #2
   13524:	andeq	r8, r2, r4, asr r1
   13528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1352c:	sub	sp, sp, #44	; 0x2c
   13530:	mov	sl, r0
   13534:	bl	10cc8 <__errno_location@plt>
   13538:	ldr	r4, [pc, #352]	; 136a0 <__assert_fail@plt+0x2924>
   1353c:	ldr	r2, [r4, #4]
   13540:	ldr	r5, [r4]
   13544:	cmp	r2, #0
   13548:	ldr	r3, [r0]
   1354c:	mov	r8, r0
   13550:	str	r3, [sp, #28]
   13554:	bgt	135b0 <__assert_fail@plt+0x2834>
   13558:	add	r6, r4, #8
   1355c:	cmp	r5, r6
   13560:	str	r2, [sp, #36]	; 0x24
   13564:	beq	13670 <__assert_fail@plt+0x28f4>
   13568:	mov	r3, #8
   1356c:	mov	r0, r5
   13570:	str	r3, [sp]
   13574:	rsb	r2, r2, #1
   13578:	mvn	r3, #-2147483648	; 0x80000000
   1357c:	add	r1, sp, #36	; 0x24
   13580:	bl	162a0 <__assert_fail@plt+0x5524>
   13584:	mov	r5, r0
   13588:	str	r0, [r4]
   1358c:	ldr	r0, [r4, #4]
   13590:	ldr	r2, [sp, #36]	; 0x24
   13594:	mov	r1, #0
   13598:	sub	r2, r2, r0
   1359c:	add	r0, r5, r0, lsl #3
   135a0:	lsl	r2, r2, #3
   135a4:	bl	10ce0 <memset@plt>
   135a8:	ldr	r3, [sp, #36]	; 0x24
   135ac:	str	r3, [r4, #4]
   135b0:	ldr	r4, [pc, #236]	; 136a4 <__assert_fail@plt+0x2928>
   135b4:	ldr	r9, [r5]
   135b8:	ldr	r6, [r5, #4]
   135bc:	ldr	r7, [r4, #4]
   135c0:	ldr	r1, [r4, #44]	; 0x2c
   135c4:	ldr	r2, [r4, #40]	; 0x28
   135c8:	ldr	r3, [r4]
   135cc:	orr	r7, r7, #1
   135d0:	add	fp, r4, #8
   135d4:	str	r1, [sp, #16]
   135d8:	str	r2, [sp, #12]
   135dc:	str	r3, [sp]
   135e0:	str	r7, [sp, #4]
   135e4:	str	fp, [sp, #8]
   135e8:	mov	r1, r9
   135ec:	mov	r0, r6
   135f0:	mvn	r3, #0
   135f4:	mov	r2, sl
   135f8:	bl	11890 <__assert_fail@plt+0xb14>
   135fc:	cmp	r9, r0
   13600:	bhi	1365c <__assert_fail@plt+0x28e0>
   13604:	add	r3, r4, #48	; 0x30
   13608:	add	r9, r0, #1
   1360c:	cmp	r6, r3
   13610:	str	r9, [r5]
   13614:	beq	13620 <__assert_fail@plt+0x28a4>
   13618:	mov	r0, r6
   1361c:	bl	1678c <__assert_fail@plt+0x5a10>
   13620:	mov	r0, r9
   13624:	bl	16084 <__assert_fail@plt+0x5308>
   13628:	ldr	ip, [r4, #44]	; 0x2c
   1362c:	ldr	r3, [r4]
   13630:	ldr	lr, [r4, #40]	; 0x28
   13634:	mov	r2, sl
   13638:	mov	r1, r9
   1363c:	str	r0, [r5, #4]
   13640:	str	r3, [sp]
   13644:	stmib	sp, {r7, fp}
   13648:	str	ip, [sp, #16]
   1364c:	str	lr, [sp, #12]
   13650:	mvn	r3, #0
   13654:	mov	r6, r0
   13658:	bl	11890 <__assert_fail@plt+0xb14>
   1365c:	ldr	r3, [sp, #28]
   13660:	mov	r0, r6
   13664:	str	r3, [r8]
   13668:	add	sp, sp, #44	; 0x2c
   1366c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13670:	mov	r3, #8
   13674:	str	r3, [sp]
   13678:	add	r1, sp, #36	; 0x24
   1367c:	rsb	r2, r2, #1
   13680:	mvn	r3, #-2147483648	; 0x80000000
   13684:	mov	r0, #0
   13688:	bl	162a0 <__assert_fail@plt+0x5524>
   1368c:	mov	r5, r0
   13690:	ldm	r6, {r0, r1}
   13694:	str	r5, [r4]
   13698:	stm	r5, {r0, r1}
   1369c:	b	1358c <__assert_fail@plt+0x2810>
   136a0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   136a4:	andeq	r8, r2, ip, asr #2
   136a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136ac:	sub	sp, sp, #44	; 0x2c
   136b0:	mov	r9, r0
   136b4:	mov	sl, r1
   136b8:	bl	10cc8 <__errno_location@plt>
   136bc:	ldr	r4, [pc, #364]	; 13830 <__assert_fail@plt+0x2ab4>
   136c0:	ldr	r2, [r4, #4]
   136c4:	ldr	r5, [r4]
   136c8:	cmp	r2, #0
   136cc:	ldr	r3, [r0]
   136d0:	mov	r7, r0
   136d4:	str	r3, [sp, #24]
   136d8:	bgt	13734 <__assert_fail@plt+0x29b8>
   136dc:	add	r6, r4, #8
   136e0:	cmp	r5, r6
   136e4:	str	r2, [sp, #36]	; 0x24
   136e8:	beq	13800 <__assert_fail@plt+0x2a84>
   136ec:	mov	r3, #8
   136f0:	mov	r0, r5
   136f4:	str	r3, [sp]
   136f8:	rsb	r2, r2, #1
   136fc:	mvn	r3, #-2147483648	; 0x80000000
   13700:	add	r1, sp, #36	; 0x24
   13704:	bl	162a0 <__assert_fail@plt+0x5524>
   13708:	mov	r5, r0
   1370c:	str	r0, [r4]
   13710:	ldr	r0, [r4, #4]
   13714:	ldr	r2, [sp, #36]	; 0x24
   13718:	mov	r1, #0
   1371c:	sub	r2, r2, r0
   13720:	add	r0, r5, r0, lsl #3
   13724:	lsl	r2, r2, #3
   13728:	bl	10ce0 <memset@plt>
   1372c:	ldr	r3, [sp, #36]	; 0x24
   13730:	str	r3, [r4, #4]
   13734:	ldr	r4, [pc, #248]	; 13834 <__assert_fail@plt+0x2ab8>
   13738:	ldr	r8, [r5]
   1373c:	ldr	r6, [r5, #4]
   13740:	ldr	r0, [r4, #4]
   13744:	ldr	r1, [r4, #44]	; 0x2c
   13748:	ldr	r2, [r4, #40]	; 0x28
   1374c:	ldr	r3, [r4]
   13750:	orr	r0, r0, #1
   13754:	add	fp, r4, #8
   13758:	str	r0, [sp, #28]
   1375c:	str	r0, [sp, #4]
   13760:	str	r1, [sp, #16]
   13764:	str	r2, [sp, #12]
   13768:	str	r3, [sp]
   1376c:	str	fp, [sp, #8]
   13770:	mov	r1, r8
   13774:	mov	r0, r6
   13778:	mov	r3, sl
   1377c:	mov	r2, r9
   13780:	bl	11890 <__assert_fail@plt+0xb14>
   13784:	cmp	r8, r0
   13788:	bhi	137ec <__assert_fail@plt+0x2a70>
   1378c:	add	r3, r4, #48	; 0x30
   13790:	add	r8, r0, #1
   13794:	cmp	r6, r3
   13798:	str	r8, [r5]
   1379c:	beq	137a8 <__assert_fail@plt+0x2a2c>
   137a0:	mov	r0, r6
   137a4:	bl	1678c <__assert_fail@plt+0x5a10>
   137a8:	mov	r0, r8
   137ac:	bl	16084 <__assert_fail@plt+0x5308>
   137b0:	ldr	lr, [r4, #44]	; 0x2c
   137b4:	ldr	ip, [r4]
   137b8:	mov	r3, sl
   137bc:	mov	r2, r9
   137c0:	mov	r1, r8
   137c4:	str	r0, [r5, #4]
   137c8:	ldr	r5, [r4, #40]	; 0x28
   137cc:	ldr	r4, [sp, #28]
   137d0:	str	fp, [sp, #8]
   137d4:	str	r4, [sp, #4]
   137d8:	str	lr, [sp, #16]
   137dc:	str	r5, [sp, #12]
   137e0:	str	ip, [sp]
   137e4:	mov	r6, r0
   137e8:	bl	11890 <__assert_fail@plt+0xb14>
   137ec:	ldr	r3, [sp, #24]
   137f0:	mov	r0, r6
   137f4:	str	r3, [r7]
   137f8:	add	sp, sp, #44	; 0x2c
   137fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13800:	mov	r3, #8
   13804:	str	r3, [sp]
   13808:	add	r1, sp, #36	; 0x24
   1380c:	rsb	r2, r2, #1
   13810:	mvn	r3, #-2147483648	; 0x80000000
   13814:	mov	r0, #0
   13818:	bl	162a0 <__assert_fail@plt+0x5524>
   1381c:	mov	r5, r0
   13820:	ldm	r6, {r0, r1}
   13824:	str	r5, [r4]
   13828:	stm	r5, {r0, r1}
   1382c:	b	13710 <__assert_fail@plt+0x2994>
   13830:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13834:	andeq	r8, r2, ip, asr #2
   13838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1383c:	sub	sp, sp, #132	; 0x84
   13840:	mov	r5, r1
   13844:	mov	r4, r0
   13848:	mov	r9, r2
   1384c:	add	r0, sp, #80	; 0x50
   13850:	mov	r2, #48	; 0x30
   13854:	mov	r1, #0
   13858:	bl	10ce0 <memset@plt>
   1385c:	cmp	r5, #10
   13860:	beq	13a18 <__assert_fail@plt+0x2c9c>
   13864:	add	lr, sp, #80	; 0x50
   13868:	str	r5, [sp, #80]	; 0x50
   1386c:	ldm	lr!, {r0, r1, r2, r3}
   13870:	add	ip, sp, #32
   13874:	ldr	r6, [pc, #416]	; 13a1c <__assert_fail@plt+0x2ca0>
   13878:	stmia	ip!, {r0, r1, r2, r3}
   1387c:	ldm	lr!, {r0, r1, r2, r3}
   13880:	stmia	ip!, {r0, r1, r2, r3}
   13884:	ldm	lr, {r0, r1, r2, r3}
   13888:	stm	ip, {r0, r1, r2, r3}
   1388c:	bl	10cc8 <__errno_location@plt>
   13890:	cmn	r4, #-2147483647	; 0x80000001
   13894:	ldr	r5, [r6]
   13898:	mov	r7, r0
   1389c:	movne	r0, #0
   138a0:	moveq	r0, #1
   138a4:	ldr	r3, [r7]
   138a8:	orrs	r0, r0, r4, lsr #31
   138ac:	str	r3, [sp, #24]
   138b0:	bne	13a18 <__assert_fail@plt+0x2c9c>
   138b4:	ldr	r2, [r6, #4]
   138b8:	cmp	r4, r2
   138bc:	blt	1391c <__assert_fail@plt+0x2ba0>
   138c0:	add	r8, r6, #8
   138c4:	cmp	r5, r8
   138c8:	str	r2, [sp, #80]	; 0x50
   138cc:	beq	139e8 <__assert_fail@plt+0x2c6c>
   138d0:	mov	r3, #8
   138d4:	sub	r2, r4, r2
   138d8:	mov	r0, r5
   138dc:	str	r3, [sp]
   138e0:	add	r2, r2, #1
   138e4:	add	r1, sp, #80	; 0x50
   138e8:	mvn	r3, #-2147483648	; 0x80000000
   138ec:	bl	162a0 <__assert_fail@plt+0x5524>
   138f0:	mov	r5, r0
   138f4:	str	r0, [r6]
   138f8:	ldr	r0, [r6, #4]
   138fc:	ldr	r2, [sp, #80]	; 0x50
   13900:	mov	r1, #0
   13904:	sub	r2, r2, r0
   13908:	add	r0, r5, r0, lsl #3
   1390c:	lsl	r2, r2, #3
   13910:	bl	10ce0 <memset@plt>
   13914:	ldr	r3, [sp, #80]	; 0x50
   13918:	str	r3, [r6, #4]
   1391c:	add	fp, r5, r4, lsl #3
   13920:	ldr	r1, [sp, #36]	; 0x24
   13924:	ldr	r8, [r5, r4, lsl #3]
   13928:	ldr	r6, [fp, #4]
   1392c:	ldr	r2, [sp, #72]	; 0x48
   13930:	ldr	r3, [sp, #32]
   13934:	ldr	ip, [sp, #76]	; 0x4c
   13938:	orr	r1, r1, #1
   1393c:	add	sl, sp, #40	; 0x28
   13940:	str	r1, [sp, #28]
   13944:	str	r1, [sp, #4]
   13948:	str	r2, [sp, #12]
   1394c:	str	r3, [sp]
   13950:	mov	r0, r6
   13954:	mov	r1, r8
   13958:	str	ip, [sp, #16]
   1395c:	str	sl, [sp, #8]
   13960:	mvn	r3, #0
   13964:	mov	r2, r9
   13968:	bl	11890 <__assert_fail@plt+0xb14>
   1396c:	cmp	r8, r0
   13970:	bhi	139d4 <__assert_fail@plt+0x2c58>
   13974:	ldr	r3, [pc, #164]	; 13a20 <__assert_fail@plt+0x2ca4>
   13978:	add	r8, r0, #1
   1397c:	cmp	r6, r3
   13980:	str	r8, [r5, r4, lsl #3]
   13984:	beq	13990 <__assert_fail@plt+0x2c14>
   13988:	mov	r0, r6
   1398c:	bl	1678c <__assert_fail@plt+0x5a10>
   13990:	mov	r0, r8
   13994:	bl	16084 <__assert_fail@plt+0x5308>
   13998:	ldr	lr, [sp, #76]	; 0x4c
   1399c:	ldr	r3, [sp, #32]
   139a0:	ldr	ip, [sp, #72]	; 0x48
   139a4:	ldr	r4, [sp, #28]
   139a8:	mov	r2, r9
   139ac:	mov	r1, r8
   139b0:	str	r0, [fp, #4]
   139b4:	str	r3, [sp]
   139b8:	str	sl, [sp, #8]
   139bc:	str	r4, [sp, #4]
   139c0:	str	lr, [sp, #16]
   139c4:	str	ip, [sp, #12]
   139c8:	mvn	r3, #0
   139cc:	mov	r6, r0
   139d0:	bl	11890 <__assert_fail@plt+0xb14>
   139d4:	ldr	r3, [sp, #24]
   139d8:	mov	r0, r6
   139dc:	str	r3, [r7]
   139e0:	add	sp, sp, #132	; 0x84
   139e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139e8:	mov	r3, #8
   139ec:	sub	r2, r4, r2
   139f0:	add	r1, sp, #80	; 0x50
   139f4:	str	r3, [sp]
   139f8:	add	r2, r2, #1
   139fc:	mvn	r3, #-2147483648	; 0x80000000
   13a00:	bl	162a0 <__assert_fail@plt+0x5524>
   13a04:	mov	r5, r0
   13a08:	ldm	r8, {r0, r1}
   13a0c:	str	r5, [r6]
   13a10:	stm	r5, {r0, r1}
   13a14:	b	138f8 <__assert_fail@plt+0x2b7c>
   13a18:	bl	10d70 <abort@plt>
   13a1c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13a20:	andeq	r8, r2, ip, ror r1
   13a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a28:	sub	sp, sp, #132	; 0x84
   13a2c:	mov	r5, r1
   13a30:	mov	r4, r0
   13a34:	mov	r9, r2
   13a38:	add	r0, sp, #80	; 0x50
   13a3c:	mov	r2, #48	; 0x30
   13a40:	mov	r1, #0
   13a44:	mov	sl, r3
   13a48:	bl	10ce0 <memset@plt>
   13a4c:	cmp	r5, #10
   13a50:	beq	13c0c <__assert_fail@plt+0x2e90>
   13a54:	add	lr, sp, #80	; 0x50
   13a58:	str	r5, [sp, #80]	; 0x50
   13a5c:	ldm	lr!, {r0, r1, r2, r3}
   13a60:	add	ip, sp, #32
   13a64:	ldr	r6, [pc, #420]	; 13c10 <__assert_fail@plt+0x2e94>
   13a68:	stmia	ip!, {r0, r1, r2, r3}
   13a6c:	ldm	lr!, {r0, r1, r2, r3}
   13a70:	stmia	ip!, {r0, r1, r2, r3}
   13a74:	ldm	lr, {r0, r1, r2, r3}
   13a78:	stm	ip, {r0, r1, r2, r3}
   13a7c:	bl	10cc8 <__errno_location@plt>
   13a80:	cmn	r4, #-2147483647	; 0x80000001
   13a84:	ldr	r5, [r6]
   13a88:	mov	r7, r0
   13a8c:	movne	r0, #0
   13a90:	moveq	r0, #1
   13a94:	ldr	r3, [r7]
   13a98:	orrs	r0, r0, r4, lsr #31
   13a9c:	str	r3, [sp, #24]
   13aa0:	bne	13c0c <__assert_fail@plt+0x2e90>
   13aa4:	ldr	r2, [r6, #4]
   13aa8:	cmp	r4, r2
   13aac:	blt	13b0c <__assert_fail@plt+0x2d90>
   13ab0:	add	r8, r6, #8
   13ab4:	cmp	r5, r8
   13ab8:	str	r2, [sp, #80]	; 0x50
   13abc:	beq	13bdc <__assert_fail@plt+0x2e60>
   13ac0:	mov	r3, #8
   13ac4:	sub	r2, r4, r2
   13ac8:	mov	r0, r5
   13acc:	str	r3, [sp]
   13ad0:	add	r2, r2, #1
   13ad4:	add	r1, sp, #80	; 0x50
   13ad8:	mvn	r3, #-2147483648	; 0x80000000
   13adc:	bl	162a0 <__assert_fail@plt+0x5524>
   13ae0:	mov	r5, r0
   13ae4:	str	r0, [r6]
   13ae8:	ldr	r0, [r6, #4]
   13aec:	ldr	r2, [sp, #80]	; 0x50
   13af0:	mov	r1, #0
   13af4:	sub	r2, r2, r0
   13af8:	add	r0, r5, r0, lsl #3
   13afc:	lsl	r2, r2, #3
   13b00:	bl	10ce0 <memset@plt>
   13b04:	ldr	r3, [sp, #80]	; 0x50
   13b08:	str	r3, [r6, #4]
   13b0c:	add	fp, r5, r4, lsl #3
   13b10:	ldr	r3, [sp, #32]
   13b14:	ldr	r1, [sp, #36]	; 0x24
   13b18:	ldr	r8, [r5, r4, lsl #3]
   13b1c:	ldr	r6, [fp, #4]
   13b20:	ldr	r2, [sp, #72]	; 0x48
   13b24:	ldr	ip, [sp, #76]	; 0x4c
   13b28:	orr	r1, r1, #1
   13b2c:	str	r3, [sp]
   13b30:	add	r3, sp, #40	; 0x28
   13b34:	str	r1, [sp, #28]
   13b38:	str	r1, [sp, #4]
   13b3c:	str	r2, [sp, #12]
   13b40:	str	r3, [sp, #8]
   13b44:	mov	r0, r6
   13b48:	mov	r1, r8
   13b4c:	str	ip, [sp, #16]
   13b50:	mov	r3, sl
   13b54:	mov	r2, r9
   13b58:	bl	11890 <__assert_fail@plt+0xb14>
   13b5c:	cmp	r8, r0
   13b60:	bhi	13bc8 <__assert_fail@plt+0x2e4c>
   13b64:	ldr	r3, [pc, #168]	; 13c14 <__assert_fail@plt+0x2e98>
   13b68:	add	r8, r0, #1
   13b6c:	cmp	r6, r3
   13b70:	str	r8, [r5, r4, lsl #3]
   13b74:	beq	13b80 <__assert_fail@plt+0x2e04>
   13b78:	mov	r0, r6
   13b7c:	bl	1678c <__assert_fail@plt+0x5a10>
   13b80:	mov	r0, r8
   13b84:	bl	16084 <__assert_fail@plt+0x5308>
   13b88:	add	lr, sp, #40	; 0x28
   13b8c:	ldr	ip, [sp, #76]	; 0x4c
   13b90:	ldr	r4, [sp, #72]	; 0x48
   13b94:	ldr	r5, [sp, #28]
   13b98:	mov	r3, sl
   13b9c:	mov	r2, r9
   13ba0:	mov	r1, r8
   13ba4:	str	r0, [fp, #4]
   13ba8:	str	lr, [sp, #8]
   13bac:	ldr	lr, [sp, #32]
   13bb0:	str	r5, [sp, #4]
   13bb4:	str	ip, [sp, #16]
   13bb8:	str	r4, [sp, #12]
   13bbc:	str	lr, [sp]
   13bc0:	mov	r6, r0
   13bc4:	bl	11890 <__assert_fail@plt+0xb14>
   13bc8:	ldr	r3, [sp, #24]
   13bcc:	mov	r0, r6
   13bd0:	str	r3, [r7]
   13bd4:	add	sp, sp, #132	; 0x84
   13bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bdc:	mov	r3, #8
   13be0:	sub	r2, r4, r2
   13be4:	add	r1, sp, #80	; 0x50
   13be8:	str	r3, [sp]
   13bec:	add	r2, r2, #1
   13bf0:	mvn	r3, #-2147483648	; 0x80000000
   13bf4:	bl	162a0 <__assert_fail@plt+0x5524>
   13bf8:	mov	r5, r0
   13bfc:	ldm	r8, {r0, r1}
   13c00:	str	r5, [r6]
   13c04:	stm	r5, {r0, r1}
   13c08:	b	13ae8 <__assert_fail@plt+0x2d6c>
   13c0c:	bl	10d70 <abort@plt>
   13c10:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13c14:	andeq	r8, r2, ip, ror r1
   13c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c1c:	sub	sp, sp, #124	; 0x7c
   13c20:	mov	r4, r0
   13c24:	mov	r9, r1
   13c28:	add	r0, sp, #72	; 0x48
   13c2c:	mov	r2, #48	; 0x30
   13c30:	mov	r1, #0
   13c34:	bl	10ce0 <memset@plt>
   13c38:	cmp	r4, #10
   13c3c:	beq	13dc8 <__assert_fail@plt+0x304c>
   13c40:	add	lr, sp, #72	; 0x48
   13c44:	str	r4, [sp, #72]	; 0x48
   13c48:	ldm	lr!, {r0, r1, r2, r3}
   13c4c:	add	ip, sp, #24
   13c50:	ldr	r5, [pc, #372]	; 13dcc <__assert_fail@plt+0x3050>
   13c54:	stmia	ip!, {r0, r1, r2, r3}
   13c58:	ldm	lr!, {r0, r1, r2, r3}
   13c5c:	stmia	ip!, {r0, r1, r2, r3}
   13c60:	ldm	lr, {r0, r1, r2, r3}
   13c64:	stm	ip, {r0, r1, r2, r3}
   13c68:	bl	10cc8 <__errno_location@plt>
   13c6c:	ldr	r2, [r5, #4]
   13c70:	ldr	r4, [r5]
   13c74:	cmp	r2, #0
   13c78:	mov	r7, r0
   13c7c:	ldr	fp, [r0]
   13c80:	bgt	13cdc <__assert_fail@plt+0x2f60>
   13c84:	add	r6, r5, #8
   13c88:	cmp	r4, r6
   13c8c:	str	r2, [sp, #72]	; 0x48
   13c90:	beq	13d98 <__assert_fail@plt+0x301c>
   13c94:	mov	r3, #8
   13c98:	mov	r0, r4
   13c9c:	str	r3, [sp]
   13ca0:	rsb	r2, r2, #1
   13ca4:	add	r1, sp, #72	; 0x48
   13ca8:	mvn	r3, #-2147483648	; 0x80000000
   13cac:	bl	162a0 <__assert_fail@plt+0x5524>
   13cb0:	mov	r4, r0
   13cb4:	str	r0, [r5]
   13cb8:	ldr	r0, [r5, #4]
   13cbc:	ldr	r2, [sp, #72]	; 0x48
   13cc0:	mov	r1, #0
   13cc4:	sub	r2, r2, r0
   13cc8:	add	r0, r4, r0, lsl #3
   13ccc:	lsl	r2, r2, #3
   13cd0:	bl	10ce0 <memset@plt>
   13cd4:	ldr	r3, [sp, #72]	; 0x48
   13cd8:	str	r3, [r5, #4]
   13cdc:	ldr	r6, [sp, #28]
   13ce0:	ldr	r8, [r4]
   13ce4:	ldr	r5, [r4, #4]
   13ce8:	ldr	r2, [sp, #64]	; 0x40
   13cec:	ldr	r3, [sp, #24]
   13cf0:	ldr	ip, [sp, #68]	; 0x44
   13cf4:	orr	r6, r6, #1
   13cf8:	add	sl, sp, #32
   13cfc:	str	r2, [sp, #12]
   13d00:	str	r3, [sp]
   13d04:	str	r6, [sp, #4]
   13d08:	mov	r1, r8
   13d0c:	mov	r0, r5
   13d10:	str	ip, [sp, #16]
   13d14:	str	sl, [sp, #8]
   13d18:	mvn	r3, #0
   13d1c:	mov	r2, r9
   13d20:	bl	11890 <__assert_fail@plt+0xb14>
   13d24:	cmp	r8, r0
   13d28:	bhi	13d88 <__assert_fail@plt+0x300c>
   13d2c:	ldr	r3, [pc, #156]	; 13dd0 <__assert_fail@plt+0x3054>
   13d30:	add	r8, r0, #1
   13d34:	cmp	r5, r3
   13d38:	str	r8, [r4]
   13d3c:	beq	13d48 <__assert_fail@plt+0x2fcc>
   13d40:	mov	r0, r5
   13d44:	bl	1678c <__assert_fail@plt+0x5a10>
   13d48:	mov	r0, r8
   13d4c:	bl	16084 <__assert_fail@plt+0x5308>
   13d50:	ldr	lr, [sp, #68]	; 0x44
   13d54:	ldr	r3, [sp, #24]
   13d58:	ldr	ip, [sp, #64]	; 0x40
   13d5c:	mov	r2, r9
   13d60:	mov	r1, r8
   13d64:	str	r0, [r4, #4]
   13d68:	str	r3, [sp]
   13d6c:	str	sl, [sp, #8]
   13d70:	str	r6, [sp, #4]
   13d74:	str	lr, [sp, #16]
   13d78:	str	ip, [sp, #12]
   13d7c:	mvn	r3, #0
   13d80:	mov	r5, r0
   13d84:	bl	11890 <__assert_fail@plt+0xb14>
   13d88:	mov	r0, r5
   13d8c:	str	fp, [r7]
   13d90:	add	sp, sp, #124	; 0x7c
   13d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d98:	mov	r3, #8
   13d9c:	add	r1, sp, #72	; 0x48
   13da0:	str	r3, [sp]
   13da4:	rsb	r2, r2, #1
   13da8:	mvn	r3, #-2147483648	; 0x80000000
   13dac:	mov	r0, #0
   13db0:	bl	162a0 <__assert_fail@plt+0x5524>
   13db4:	mov	r4, r0
   13db8:	ldm	r6, {r0, r1}
   13dbc:	str	r4, [r5]
   13dc0:	stm	r4, {r0, r1}
   13dc4:	b	13cb8 <__assert_fail@plt+0x2f3c>
   13dc8:	bl	10d70 <abort@plt>
   13dcc:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13dd0:	andeq	r8, r2, ip, ror r1
   13dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dd8:	sub	sp, sp, #132	; 0x84
   13ddc:	mov	r4, r0
   13de0:	mov	r9, r1
   13de4:	mov	sl, r2
   13de8:	add	r0, sp, #80	; 0x50
   13dec:	mov	r2, #48	; 0x30
   13df0:	mov	r1, #0
   13df4:	bl	10ce0 <memset@plt>
   13df8:	cmp	r4, #10
   13dfc:	beq	13f90 <__assert_fail@plt+0x3214>
   13e00:	add	lr, sp, #80	; 0x50
   13e04:	str	r4, [sp, #80]	; 0x50
   13e08:	ldm	lr!, {r0, r1, r2, r3}
   13e0c:	add	ip, sp, #32
   13e10:	ldr	r5, [pc, #380]	; 13f94 <__assert_fail@plt+0x3218>
   13e14:	stmia	ip!, {r0, r1, r2, r3}
   13e18:	ldm	lr!, {r0, r1, r2, r3}
   13e1c:	stmia	ip!, {r0, r1, r2, r3}
   13e20:	ldm	lr, {r0, r1, r2, r3}
   13e24:	stm	ip, {r0, r1, r2, r3}
   13e28:	bl	10cc8 <__errno_location@plt>
   13e2c:	ldr	r2, [r5, #4]
   13e30:	ldr	r4, [r5]
   13e34:	cmp	r2, #0
   13e38:	ldr	r3, [r0]
   13e3c:	mov	r7, r0
   13e40:	str	r3, [sp, #28]
   13e44:	bgt	13ea0 <__assert_fail@plt+0x3124>
   13e48:	add	r6, r5, #8
   13e4c:	cmp	r4, r6
   13e50:	str	r2, [sp, #80]	; 0x50
   13e54:	beq	13f60 <__assert_fail@plt+0x31e4>
   13e58:	mov	r3, #8
   13e5c:	mov	r0, r4
   13e60:	str	r3, [sp]
   13e64:	rsb	r2, r2, #1
   13e68:	add	r1, sp, #80	; 0x50
   13e6c:	mvn	r3, #-2147483648	; 0x80000000
   13e70:	bl	162a0 <__assert_fail@plt+0x5524>
   13e74:	mov	r4, r0
   13e78:	str	r0, [r5]
   13e7c:	ldr	r0, [r5, #4]
   13e80:	ldr	r2, [sp, #80]	; 0x50
   13e84:	mov	r1, #0
   13e88:	sub	r2, r2, r0
   13e8c:	add	r0, r4, r0, lsl #3
   13e90:	lsl	r2, r2, #3
   13e94:	bl	10ce0 <memset@plt>
   13e98:	ldr	r3, [sp, #80]	; 0x50
   13e9c:	str	r3, [r5, #4]
   13ea0:	ldr	r6, [sp, #36]	; 0x24
   13ea4:	ldr	r8, [r4]
   13ea8:	ldr	r5, [r4, #4]
   13eac:	ldr	r2, [sp, #72]	; 0x48
   13eb0:	ldr	r3, [sp, #32]
   13eb4:	ldr	ip, [sp, #76]	; 0x4c
   13eb8:	orr	r6, r6, #1
   13ebc:	add	fp, sp, #40	; 0x28
   13ec0:	str	r2, [sp, #12]
   13ec4:	str	r3, [sp]
   13ec8:	str	r6, [sp, #4]
   13ecc:	mov	r1, r8
   13ed0:	mov	r0, r5
   13ed4:	str	ip, [sp, #16]
   13ed8:	str	fp, [sp, #8]
   13edc:	mov	r3, sl
   13ee0:	mov	r2, r9
   13ee4:	bl	11890 <__assert_fail@plt+0xb14>
   13ee8:	cmp	r8, r0
   13eec:	bhi	13f4c <__assert_fail@plt+0x31d0>
   13ef0:	ldr	r3, [pc, #160]	; 13f98 <__assert_fail@plt+0x321c>
   13ef4:	add	r8, r0, #1
   13ef8:	cmp	r5, r3
   13efc:	str	r8, [r4]
   13f00:	beq	13f0c <__assert_fail@plt+0x3190>
   13f04:	mov	r0, r5
   13f08:	bl	1678c <__assert_fail@plt+0x5a10>
   13f0c:	mov	r0, r8
   13f10:	bl	16084 <__assert_fail@plt+0x5308>
   13f14:	ldr	ip, [sp, #76]	; 0x4c
   13f18:	ldr	lr, [sp, #32]
   13f1c:	mov	r3, sl
   13f20:	mov	r2, r9
   13f24:	mov	r1, r8
   13f28:	str	r0, [r4, #4]
   13f2c:	ldr	r4, [sp, #72]	; 0x48
   13f30:	str	fp, [sp, #8]
   13f34:	str	r6, [sp, #4]
   13f38:	str	ip, [sp, #16]
   13f3c:	str	r4, [sp, #12]
   13f40:	str	lr, [sp]
   13f44:	mov	r5, r0
   13f48:	bl	11890 <__assert_fail@plt+0xb14>
   13f4c:	ldr	r3, [sp, #28]
   13f50:	mov	r0, r5
   13f54:	str	r3, [r7]
   13f58:	add	sp, sp, #132	; 0x84
   13f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f60:	mov	r3, #8
   13f64:	add	r1, sp, #80	; 0x50
   13f68:	str	r3, [sp]
   13f6c:	rsb	r2, r2, #1
   13f70:	mvn	r3, #-2147483648	; 0x80000000
   13f74:	mov	r0, #0
   13f78:	bl	162a0 <__assert_fail@plt+0x5524>
   13f7c:	mov	r4, r0
   13f80:	ldm	r6, {r0, r1}
   13f84:	str	r4, [r5]
   13f88:	stm	r4, {r0, r1}
   13f8c:	b	13e7c <__assert_fail@plt+0x3100>
   13f90:	bl	10d70 <abort@plt>
   13f94:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13f98:	andeq	r8, r2, ip, ror r1
   13f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fa0:	mov	r4, r2
   13fa4:	ldr	lr, [pc, #432]	; 1415c <__assert_fail@plt+0x33e0>
   13fa8:	mov	sl, r0
   13fac:	mov	fp, r1
   13fb0:	ldm	lr!, {r0, r1, r2, r3}
   13fb4:	sub	sp, sp, #92	; 0x5c
   13fb8:	add	ip, sp, #40	; 0x28
   13fbc:	lsr	r7, r4, #5
   13fc0:	stmia	ip!, {r0, r1, r2, r3}
   13fc4:	add	r6, sp, #48	; 0x30
   13fc8:	ldm	lr!, {r0, r1, r2, r3}
   13fcc:	and	r4, r4, #31
   13fd0:	ldr	r5, [pc, #392]	; 14160 <__assert_fail@plt+0x33e4>
   13fd4:	stmia	ip!, {r0, r1, r2, r3}
   13fd8:	ldm	lr, {r0, r1, r2, r3}
   13fdc:	stm	ip, {r0, r1, r2, r3}
   13fe0:	ldr	r2, [r6, r7, lsl #2]
   13fe4:	lsr	r3, r2, r4
   13fe8:	eor	r3, r3, #1
   13fec:	and	r3, r3, #1
   13ff0:	eor	r4, r2, r3, lsl r4
   13ff4:	str	r4, [r6, r7, lsl #2]
   13ff8:	bl	10cc8 <__errno_location@plt>
   13ffc:	ldr	r2, [r5, #4]
   14000:	ldr	r4, [r5]
   14004:	cmp	r2, #0
   14008:	ldr	r3, [r0]
   1400c:	mov	r8, r0
   14010:	str	r3, [sp, #28]
   14014:	bgt	14070 <__assert_fail@plt+0x32f4>
   14018:	add	r7, r5, #8
   1401c:	cmp	r4, r7
   14020:	str	r2, [sp, #36]	; 0x24
   14024:	beq	1412c <__assert_fail@plt+0x33b0>
   14028:	mov	r3, #8
   1402c:	mov	r0, r4
   14030:	str	r3, [sp]
   14034:	rsb	r2, r2, #1
   14038:	mvn	r3, #-2147483648	; 0x80000000
   1403c:	add	r1, sp, #36	; 0x24
   14040:	bl	162a0 <__assert_fail@plt+0x5524>
   14044:	mov	r4, r0
   14048:	str	r0, [r5]
   1404c:	ldr	r0, [r5, #4]
   14050:	ldr	r2, [sp, #36]	; 0x24
   14054:	mov	r1, #0
   14058:	sub	r2, r2, r0
   1405c:	add	r0, r4, r0, lsl #3
   14060:	lsl	r2, r2, #3
   14064:	bl	10ce0 <memset@plt>
   14068:	ldr	r3, [sp, #36]	; 0x24
   1406c:	str	r3, [r5, #4]
   14070:	ldr	r7, [sp, #44]	; 0x2c
   14074:	ldr	r9, [r4]
   14078:	ldr	r5, [r4, #4]
   1407c:	ldr	r2, [sp, #80]	; 0x50
   14080:	ldr	r3, [sp, #40]	; 0x28
   14084:	ldr	ip, [sp, #84]	; 0x54
   14088:	orr	r7, r7, #1
   1408c:	str	r2, [sp, #12]
   14090:	str	r3, [sp]
   14094:	str	r7, [sp, #4]
   14098:	str	r6, [sp, #8]
   1409c:	mov	r1, r9
   140a0:	mov	r0, r5
   140a4:	str	ip, [sp, #16]
   140a8:	mov	r3, fp
   140ac:	mov	r2, sl
   140b0:	bl	11890 <__assert_fail@plt+0xb14>
   140b4:	cmp	r9, r0
   140b8:	bhi	14118 <__assert_fail@plt+0x339c>
   140bc:	ldr	r3, [pc, #160]	; 14164 <__assert_fail@plt+0x33e8>
   140c0:	add	r9, r0, #1
   140c4:	cmp	r5, r3
   140c8:	str	r9, [r4]
   140cc:	beq	140d8 <__assert_fail@plt+0x335c>
   140d0:	mov	r0, r5
   140d4:	bl	1678c <__assert_fail@plt+0x5a10>
   140d8:	mov	r0, r9
   140dc:	bl	16084 <__assert_fail@plt+0x5308>
   140e0:	ldr	ip, [sp, #84]	; 0x54
   140e4:	ldr	lr, [sp, #40]	; 0x28
   140e8:	mov	r3, fp
   140ec:	mov	r2, sl
   140f0:	mov	r1, r9
   140f4:	str	r0, [r4, #4]
   140f8:	ldr	r4, [sp, #80]	; 0x50
   140fc:	str	r6, [sp, #8]
   14100:	str	r7, [sp, #4]
   14104:	str	ip, [sp, #16]
   14108:	str	r4, [sp, #12]
   1410c:	str	lr, [sp]
   14110:	mov	r5, r0
   14114:	bl	11890 <__assert_fail@plt+0xb14>
   14118:	ldr	r3, [sp, #28]
   1411c:	mov	r0, r5
   14120:	str	r3, [r8]
   14124:	add	sp, sp, #92	; 0x5c
   14128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1412c:	mov	r3, #8
   14130:	str	r3, [sp]
   14134:	add	r1, sp, #36	; 0x24
   14138:	rsb	r2, r2, #1
   1413c:	mvn	r3, #-2147483648	; 0x80000000
   14140:	mov	r0, #0
   14144:	bl	162a0 <__assert_fail@plt+0x5524>
   14148:	mov	r4, r0
   1414c:	ldm	r7, {r0, r1}
   14150:	str	r4, [r5]
   14154:	stm	r4, {r0, r1}
   14158:	b	1404c <__assert_fail@plt+0x32d0>
   1415c:	andeq	r8, r2, ip, asr #2
   14160:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14164:	andeq	r8, r2, ip, ror r1
   14168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1416c:	mov	r4, r1
   14170:	ldr	lr, [pc, #420]	; 1431c <__assert_fail@plt+0x35a0>
   14174:	mov	r6, r0
   14178:	sub	sp, sp, #84	; 0x54
   1417c:	ldm	lr!, {r0, r1, r2, r3}
   14180:	add	ip, sp, #32
   14184:	lsr	r8, r4, #5
   14188:	add	r5, sp, #40	; 0x28
   1418c:	stmia	ip!, {r0, r1, r2, r3}
   14190:	and	r4, r4, #31
   14194:	ldm	lr!, {r0, r1, r2, r3}
   14198:	ldr	r7, [pc, #384]	; 14320 <__assert_fail@plt+0x35a4>
   1419c:	stmia	ip!, {r0, r1, r2, r3}
   141a0:	ldm	lr, {r0, r1, r2, r3}
   141a4:	stm	ip, {r0, r1, r2, r3}
   141a8:	ldr	r2, [r5, r8, lsl #2]
   141ac:	lsr	r3, r2, r4
   141b0:	eor	r3, r3, #1
   141b4:	and	r3, r3, #1
   141b8:	eor	r4, r2, r3, lsl r4
   141bc:	str	r4, [r5, r8, lsl #2]
   141c0:	bl	10cc8 <__errno_location@plt>
   141c4:	ldr	r2, [r7, #4]
   141c8:	ldr	r4, [r7]
   141cc:	cmp	r2, #0
   141d0:	mov	r9, r0
   141d4:	ldr	sl, [r0]
   141d8:	bgt	14234 <__assert_fail@plt+0x34b8>
   141dc:	add	r8, r7, #8
   141e0:	cmp	r4, r8
   141e4:	str	r2, [sp, #28]
   141e8:	beq	142ec <__assert_fail@plt+0x3570>
   141ec:	mov	r3, #8
   141f0:	mov	r0, r4
   141f4:	str	r3, [sp]
   141f8:	rsb	r2, r2, #1
   141fc:	mvn	r3, #-2147483648	; 0x80000000
   14200:	add	r1, sp, #28
   14204:	bl	162a0 <__assert_fail@plt+0x5524>
   14208:	mov	r4, r0
   1420c:	str	r0, [r7]
   14210:	ldr	r0, [r7, #4]
   14214:	ldr	r2, [sp, #28]
   14218:	mov	r1, #0
   1421c:	sub	r2, r2, r0
   14220:	add	r0, r4, r0, lsl #3
   14224:	lsl	r2, r2, #3
   14228:	bl	10ce0 <memset@plt>
   1422c:	ldr	r3, [sp, #28]
   14230:	str	r3, [r7, #4]
   14234:	ldr	r8, [sp, #36]	; 0x24
   14238:	ldr	fp, [r4]
   1423c:	ldr	r7, [r4, #4]
   14240:	ldr	r2, [sp, #72]	; 0x48
   14244:	ldr	r3, [sp, #32]
   14248:	ldr	ip, [sp, #76]	; 0x4c
   1424c:	orr	r8, r8, #1
   14250:	str	r2, [sp, #12]
   14254:	str	r3, [sp]
   14258:	str	r8, [sp, #4]
   1425c:	str	r5, [sp, #8]
   14260:	mov	r1, fp
   14264:	mov	r0, r7
   14268:	str	ip, [sp, #16]
   1426c:	mvn	r3, #0
   14270:	mov	r2, r6
   14274:	bl	11890 <__assert_fail@plt+0xb14>
   14278:	cmp	fp, r0
   1427c:	bhi	142dc <__assert_fail@plt+0x3560>
   14280:	ldr	r3, [pc, #156]	; 14324 <__assert_fail@plt+0x35a8>
   14284:	add	fp, r0, #1
   14288:	cmp	r7, r3
   1428c:	str	fp, [r4]
   14290:	beq	1429c <__assert_fail@plt+0x3520>
   14294:	mov	r0, r7
   14298:	bl	1678c <__assert_fail@plt+0x5a10>
   1429c:	mov	r0, fp
   142a0:	bl	16084 <__assert_fail@plt+0x5308>
   142a4:	ldr	lr, [sp, #76]	; 0x4c
   142a8:	ldr	r3, [sp, #32]
   142ac:	ldr	ip, [sp, #72]	; 0x48
   142b0:	mov	r2, r6
   142b4:	mov	r1, fp
   142b8:	str	r0, [r4, #4]
   142bc:	str	r3, [sp]
   142c0:	str	r5, [sp, #8]
   142c4:	str	r8, [sp, #4]
   142c8:	str	lr, [sp, #16]
   142cc:	str	ip, [sp, #12]
   142d0:	mvn	r3, #0
   142d4:	mov	r7, r0
   142d8:	bl	11890 <__assert_fail@plt+0xb14>
   142dc:	mov	r0, r7
   142e0:	str	sl, [r9]
   142e4:	add	sp, sp, #84	; 0x54
   142e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142ec:	mov	r3, #8
   142f0:	str	r3, [sp]
   142f4:	add	r1, sp, #28
   142f8:	rsb	r2, r2, #1
   142fc:	mvn	r3, #-2147483648	; 0x80000000
   14300:	mov	r0, #0
   14304:	bl	162a0 <__assert_fail@plt+0x5524>
   14308:	mov	r4, r0
   1430c:	ldm	r8, {r0, r1}
   14310:	str	r4, [r7]
   14314:	stm	r4, {r0, r1}
   14318:	b	14210 <__assert_fail@plt+0x3494>
   1431c:	andeq	r8, r2, ip, asr #2
   14320:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14324:	andeq	r8, r2, ip, ror r1
   14328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1432c:	mov	r6, r0
   14330:	ldr	lr, [pc, #404]	; 144cc <__assert_fail@plt+0x3750>
   14334:	sub	sp, sp, #84	; 0x54
   14338:	add	ip, sp, #32
   1433c:	ldm	lr!, {r0, r1, r2, r3}
   14340:	ldr	r5, [pc, #392]	; 144d0 <__assert_fail@plt+0x3754>
   14344:	stmia	ip!, {r0, r1, r2, r3}
   14348:	ldm	lr!, {r0, r1, r2, r3}
   1434c:	ldr	r4, [sp, #44]	; 0x2c
   14350:	stmia	ip!, {r0, r1, r2, r3}
   14354:	ldm	lr, {r0, r1, r2, r3}
   14358:	mvn	lr, r4
   1435c:	and	lr, lr, #67108864	; 0x4000000
   14360:	eor	lr, lr, r4
   14364:	stm	ip, {r0, r1, r2, r3}
   14368:	str	lr, [sp, #44]	; 0x2c
   1436c:	bl	10cc8 <__errno_location@plt>
   14370:	ldr	r2, [r5, #4]
   14374:	ldr	r4, [r5]
   14378:	cmp	r2, #0
   1437c:	mov	r8, r0
   14380:	ldr	sl, [r0]
   14384:	bgt	143e0 <__assert_fail@plt+0x3664>
   14388:	add	r7, r5, #8
   1438c:	cmp	r4, r7
   14390:	str	r2, [sp, #28]
   14394:	beq	1449c <__assert_fail@plt+0x3720>
   14398:	mov	r3, #8
   1439c:	mov	r0, r4
   143a0:	str	r3, [sp]
   143a4:	rsb	r2, r2, #1
   143a8:	mvn	r3, #-2147483648	; 0x80000000
   143ac:	add	r1, sp, #28
   143b0:	bl	162a0 <__assert_fail@plt+0x5524>
   143b4:	mov	r4, r0
   143b8:	str	r0, [r5]
   143bc:	ldr	r0, [r5, #4]
   143c0:	ldr	r2, [sp, #28]
   143c4:	mov	r1, #0
   143c8:	sub	r2, r2, r0
   143cc:	add	r0, r4, r0, lsl #3
   143d0:	lsl	r2, r2, #3
   143d4:	bl	10ce0 <memset@plt>
   143d8:	ldr	r3, [sp, #28]
   143dc:	str	r3, [r5, #4]
   143e0:	ldr	r7, [sp, #36]	; 0x24
   143e4:	ldr	r9, [r4]
   143e8:	ldr	r5, [r4, #4]
   143ec:	ldr	r2, [sp, #72]	; 0x48
   143f0:	ldr	r3, [sp, #32]
   143f4:	ldr	ip, [sp, #76]	; 0x4c
   143f8:	orr	r7, r7, #1
   143fc:	add	fp, sp, #40	; 0x28
   14400:	str	r2, [sp, #12]
   14404:	str	r3, [sp]
   14408:	str	r7, [sp, #4]
   1440c:	mov	r1, r9
   14410:	mov	r0, r5
   14414:	str	ip, [sp, #16]
   14418:	str	fp, [sp, #8]
   1441c:	mvn	r3, #0
   14420:	mov	r2, r6
   14424:	bl	11890 <__assert_fail@plt+0xb14>
   14428:	cmp	r9, r0
   1442c:	bhi	1448c <__assert_fail@plt+0x3710>
   14430:	ldr	r3, [pc, #156]	; 144d4 <__assert_fail@plt+0x3758>
   14434:	add	r9, r0, #1
   14438:	cmp	r5, r3
   1443c:	str	r9, [r4]
   14440:	beq	1444c <__assert_fail@plt+0x36d0>
   14444:	mov	r0, r5
   14448:	bl	1678c <__assert_fail@plt+0x5a10>
   1444c:	mov	r0, r9
   14450:	bl	16084 <__assert_fail@plt+0x5308>
   14454:	ldr	lr, [sp, #76]	; 0x4c
   14458:	ldr	r3, [sp, #32]
   1445c:	ldr	ip, [sp, #72]	; 0x48
   14460:	mov	r2, r6
   14464:	mov	r1, r9
   14468:	str	r0, [r4, #4]
   1446c:	str	r3, [sp]
   14470:	str	fp, [sp, #8]
   14474:	str	r7, [sp, #4]
   14478:	str	lr, [sp, #16]
   1447c:	str	ip, [sp, #12]
   14480:	mvn	r3, #0
   14484:	mov	r5, r0
   14488:	bl	11890 <__assert_fail@plt+0xb14>
   1448c:	mov	r0, r5
   14490:	str	sl, [r8]
   14494:	add	sp, sp, #84	; 0x54
   14498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1449c:	mov	r3, #8
   144a0:	str	r3, [sp]
   144a4:	add	r1, sp, #28
   144a8:	rsb	r2, r2, #1
   144ac:	mvn	r3, #-2147483648	; 0x80000000
   144b0:	mov	r0, #0
   144b4:	bl	162a0 <__assert_fail@plt+0x5524>
   144b8:	mov	r4, r0
   144bc:	ldm	r7, {r0, r1}
   144c0:	str	r4, [r5]
   144c4:	stm	r4, {r0, r1}
   144c8:	b	143bc <__assert_fail@plt+0x3640>
   144cc:	andeq	r8, r2, ip, asr #2
   144d0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   144d4:	andeq	r8, r2, ip, ror r1
   144d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144dc:	mov	r9, r0
   144e0:	ldr	lr, [pc, #416]	; 14688 <__assert_fail@plt+0x390c>
   144e4:	mov	sl, r1
   144e8:	sub	sp, sp, #92	; 0x5c
   144ec:	ldm	lr!, {r0, r1, r2, r3}
   144f0:	add	ip, sp, #40	; 0x28
   144f4:	ldr	r5, [pc, #400]	; 1468c <__assert_fail@plt+0x3910>
   144f8:	stmia	ip!, {r0, r1, r2, r3}
   144fc:	ldm	lr!, {r0, r1, r2, r3}
   14500:	ldr	r4, [sp, #52]	; 0x34
   14504:	stmia	ip!, {r0, r1, r2, r3}
   14508:	ldm	lr, {r0, r1, r2, r3}
   1450c:	mvn	lr, r4
   14510:	and	lr, lr, #67108864	; 0x4000000
   14514:	eor	lr, lr, r4
   14518:	stm	ip, {r0, r1, r2, r3}
   1451c:	str	lr, [sp, #52]	; 0x34
   14520:	bl	10cc8 <__errno_location@plt>
   14524:	ldr	r2, [r5, #4]
   14528:	ldr	r4, [r5]
   1452c:	cmp	r2, #0
   14530:	ldr	r3, [r0]
   14534:	mov	r7, r0
   14538:	str	r3, [sp, #28]
   1453c:	bgt	14598 <__assert_fail@plt+0x381c>
   14540:	add	r6, r5, #8
   14544:	cmp	r4, r6
   14548:	str	r2, [sp, #36]	; 0x24
   1454c:	beq	14658 <__assert_fail@plt+0x38dc>
   14550:	mov	r3, #8
   14554:	mov	r0, r4
   14558:	str	r3, [sp]
   1455c:	rsb	r2, r2, #1
   14560:	mvn	r3, #-2147483648	; 0x80000000
   14564:	add	r1, sp, #36	; 0x24
   14568:	bl	162a0 <__assert_fail@plt+0x5524>
   1456c:	mov	r4, r0
   14570:	str	r0, [r5]
   14574:	ldr	r0, [r5, #4]
   14578:	ldr	r2, [sp, #36]	; 0x24
   1457c:	mov	r1, #0
   14580:	sub	r2, r2, r0
   14584:	add	r0, r4, r0, lsl #3
   14588:	lsl	r2, r2, #3
   1458c:	bl	10ce0 <memset@plt>
   14590:	ldr	r3, [sp, #36]	; 0x24
   14594:	str	r3, [r5, #4]
   14598:	ldr	r6, [sp, #44]	; 0x2c
   1459c:	ldr	r8, [r4]
   145a0:	ldr	r5, [r4, #4]
   145a4:	ldr	r2, [sp, #80]	; 0x50
   145a8:	ldr	r3, [sp, #40]	; 0x28
   145ac:	ldr	ip, [sp, #84]	; 0x54
   145b0:	orr	r6, r6, #1
   145b4:	add	fp, sp, #48	; 0x30
   145b8:	str	r2, [sp, #12]
   145bc:	str	r3, [sp]
   145c0:	str	r6, [sp, #4]
   145c4:	mov	r1, r8
   145c8:	mov	r0, r5
   145cc:	str	ip, [sp, #16]
   145d0:	str	fp, [sp, #8]
   145d4:	mov	r3, sl
   145d8:	mov	r2, r9
   145dc:	bl	11890 <__assert_fail@plt+0xb14>
   145e0:	cmp	r8, r0
   145e4:	bhi	14644 <__assert_fail@plt+0x38c8>
   145e8:	ldr	r3, [pc, #160]	; 14690 <__assert_fail@plt+0x3914>
   145ec:	add	r8, r0, #1
   145f0:	cmp	r5, r3
   145f4:	str	r8, [r4]
   145f8:	beq	14604 <__assert_fail@plt+0x3888>
   145fc:	mov	r0, r5
   14600:	bl	1678c <__assert_fail@plt+0x5a10>
   14604:	mov	r0, r8
   14608:	bl	16084 <__assert_fail@plt+0x5308>
   1460c:	ldr	ip, [sp, #84]	; 0x54
   14610:	ldr	lr, [sp, #40]	; 0x28
   14614:	mov	r3, sl
   14618:	mov	r2, r9
   1461c:	mov	r1, r8
   14620:	str	r0, [r4, #4]
   14624:	ldr	r4, [sp, #80]	; 0x50
   14628:	str	fp, [sp, #8]
   1462c:	str	r6, [sp, #4]
   14630:	str	ip, [sp, #16]
   14634:	str	r4, [sp, #12]
   14638:	str	lr, [sp]
   1463c:	mov	r5, r0
   14640:	bl	11890 <__assert_fail@plt+0xb14>
   14644:	ldr	r3, [sp, #28]
   14648:	mov	r0, r5
   1464c:	str	r3, [r7]
   14650:	add	sp, sp, #92	; 0x5c
   14654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14658:	mov	r3, #8
   1465c:	str	r3, [sp]
   14660:	add	r1, sp, #36	; 0x24
   14664:	rsb	r2, r2, #1
   14668:	mvn	r3, #-2147483648	; 0x80000000
   1466c:	mov	r0, #0
   14670:	bl	162a0 <__assert_fail@plt+0x5524>
   14674:	mov	r4, r0
   14678:	ldm	r6, {r0, r1}
   1467c:	str	r4, [r5]
   14680:	stm	r4, {r0, r1}
   14684:	b	14574 <__assert_fail@plt+0x37f8>
   14688:	andeq	r8, r2, ip, asr #2
   1468c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14690:	andeq	r8, r2, ip, ror r1
   14694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14698:	sub	sp, sp, #180	; 0xb4
   1469c:	mov	r6, r1
   146a0:	mov	r4, r0
   146a4:	mov	r9, r2
   146a8:	add	r0, sp, #80	; 0x50
   146ac:	mov	r2, #48	; 0x30
   146b0:	mov	r1, #0
   146b4:	bl	10ce0 <memset@plt>
   146b8:	cmp	r6, #10
   146bc:	beq	1489c <__assert_fail@plt+0x3b20>
   146c0:	add	r5, sp, #80	; 0x50
   146c4:	str	r6, [sp, #80]	; 0x50
   146c8:	ldm	r5!, {r0, r1, r2, r3}
   146cc:	add	ip, sp, #128	; 0x80
   146d0:	mov	r7, ip
   146d4:	add	lr, sp, #32
   146d8:	stmia	ip!, {r0, r1, r2, r3}
   146dc:	mov	r8, #67108864	; 0x4000000
   146e0:	ldm	r5!, {r0, r1, r2, r3}
   146e4:	ldr	r6, [pc, #436]	; 148a0 <__assert_fail@plt+0x3b24>
   146e8:	stmia	ip!, {r0, r1, r2, r3}
   146ec:	ldm	r5, {r0, r1, r2, r3}
   146f0:	stm	ip, {r0, r1, r2, r3}
   146f4:	ldm	r7!, {r0, r1, r2, r3}
   146f8:	stmia	lr!, {r0, r1, r2, r3}
   146fc:	ldm	r7!, {r0, r1, r2, r3}
   14700:	str	r8, [sp, #44]	; 0x2c
   14704:	stmia	lr!, {r0, r1, r2, r3}
   14708:	ldm	ip, {r0, r1, r2, r3}
   1470c:	stm	lr, {r0, r1, r2, r3}
   14710:	bl	10cc8 <__errno_location@plt>
   14714:	cmn	r4, #-2147483647	; 0x80000001
   14718:	ldr	r5, [r6]
   1471c:	mov	r7, r0
   14720:	movne	r0, #0
   14724:	moveq	r0, #1
   14728:	ldr	r3, [r7]
   1472c:	orrs	r0, r0, r4, lsr #31
   14730:	str	r3, [sp, #24]
   14734:	bne	1489c <__assert_fail@plt+0x3b20>
   14738:	ldr	r2, [r6, #4]
   1473c:	cmp	r4, r2
   14740:	blt	147a0 <__assert_fail@plt+0x3a24>
   14744:	add	r8, r6, #8
   14748:	cmp	r5, r8
   1474c:	str	r2, [sp, #80]	; 0x50
   14750:	beq	1486c <__assert_fail@plt+0x3af0>
   14754:	mov	r3, #8
   14758:	sub	r2, r4, r2
   1475c:	mov	r0, r5
   14760:	str	r3, [sp]
   14764:	add	r2, r2, #1
   14768:	add	r1, sp, #80	; 0x50
   1476c:	mvn	r3, #-2147483648	; 0x80000000
   14770:	bl	162a0 <__assert_fail@plt+0x5524>
   14774:	mov	r5, r0
   14778:	str	r0, [r6]
   1477c:	ldr	r0, [r6, #4]
   14780:	ldr	r2, [sp, #80]	; 0x50
   14784:	mov	r1, #0
   14788:	sub	r2, r2, r0
   1478c:	add	r0, r5, r0, lsl #3
   14790:	lsl	r2, r2, #3
   14794:	bl	10ce0 <memset@plt>
   14798:	ldr	r3, [sp, #80]	; 0x50
   1479c:	str	r3, [r6, #4]
   147a0:	add	fp, r5, r4, lsl #3
   147a4:	ldr	r1, [sp, #36]	; 0x24
   147a8:	ldr	r8, [r5, r4, lsl #3]
   147ac:	ldr	r6, [fp, #4]
   147b0:	ldr	r2, [sp, #72]	; 0x48
   147b4:	ldr	r3, [sp, #32]
   147b8:	ldr	ip, [sp, #76]	; 0x4c
   147bc:	orr	r1, r1, #1
   147c0:	add	sl, sp, #40	; 0x28
   147c4:	str	r1, [sp, #28]
   147c8:	str	r1, [sp, #4]
   147cc:	str	r2, [sp, #12]
   147d0:	str	r3, [sp]
   147d4:	mov	r0, r6
   147d8:	mov	r1, r8
   147dc:	str	ip, [sp, #16]
   147e0:	str	sl, [sp, #8]
   147e4:	mvn	r3, #0
   147e8:	mov	r2, r9
   147ec:	bl	11890 <__assert_fail@plt+0xb14>
   147f0:	cmp	r8, r0
   147f4:	bhi	14858 <__assert_fail@plt+0x3adc>
   147f8:	ldr	r3, [pc, #164]	; 148a4 <__assert_fail@plt+0x3b28>
   147fc:	add	r8, r0, #1
   14800:	cmp	r6, r3
   14804:	str	r8, [r5, r4, lsl #3]
   14808:	beq	14814 <__assert_fail@plt+0x3a98>
   1480c:	mov	r0, r6
   14810:	bl	1678c <__assert_fail@plt+0x5a10>
   14814:	mov	r0, r8
   14818:	bl	16084 <__assert_fail@plt+0x5308>
   1481c:	ldr	lr, [sp, #76]	; 0x4c
   14820:	ldr	r3, [sp, #32]
   14824:	ldr	ip, [sp, #72]	; 0x48
   14828:	ldr	r4, [sp, #28]
   1482c:	mov	r2, r9
   14830:	mov	r1, r8
   14834:	str	r0, [fp, #4]
   14838:	str	r3, [sp]
   1483c:	str	sl, [sp, #8]
   14840:	str	r4, [sp, #4]
   14844:	str	lr, [sp, #16]
   14848:	str	ip, [sp, #12]
   1484c:	mvn	r3, #0
   14850:	mov	r6, r0
   14854:	bl	11890 <__assert_fail@plt+0xb14>
   14858:	ldr	r3, [sp, #24]
   1485c:	mov	r0, r6
   14860:	str	r3, [r7]
   14864:	add	sp, sp, #180	; 0xb4
   14868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1486c:	mov	r3, #8
   14870:	sub	r2, r4, r2
   14874:	add	r1, sp, #80	; 0x50
   14878:	str	r3, [sp]
   1487c:	add	r2, r2, #1
   14880:	mvn	r3, #-2147483648	; 0x80000000
   14884:	bl	162a0 <__assert_fail@plt+0x5524>
   14888:	mov	r5, r0
   1488c:	ldm	r8, {r0, r1}
   14890:	str	r5, [r6]
   14894:	stm	r5, {r0, r1}
   14898:	b	1477c <__assert_fail@plt+0x3a00>
   1489c:	bl	10d70 <abort@plt>
   148a0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   148a4:	andeq	r8, r2, ip, ror r1
   148a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148ac:	mov	r7, r1
   148b0:	ldr	lr, [pc, #492]	; 14aa4 <__assert_fail@plt+0x3d28>
   148b4:	mov	r8, r2
   148b8:	mov	r4, r0
   148bc:	mov	fp, r3
   148c0:	ldm	lr!, {r0, r1, r2, r3}
   148c4:	sub	sp, sp, #100	; 0x64
   148c8:	add	ip, sp, #48	; 0x30
   148cc:	mov	sl, #10
   148d0:	stmia	ip!, {r0, r1, r2, r3}
   148d4:	cmp	r8, #0
   148d8:	cmpne	r7, #0
   148dc:	ldm	lr!, {r0, r1, r2, r3}
   148e0:	str	sl, [sp, #48]	; 0x30
   148e4:	stmia	ip!, {r0, r1, r2, r3}
   148e8:	ldm	lr, {r0, r1, r2, r3}
   148ec:	stm	ip, {r0, r1, r2, r3}
   148f0:	beq	14aa0 <__assert_fail@plt+0x3d24>
   148f4:	str	r7, [sp, #88]	; 0x58
   148f8:	str	r8, [sp, #92]	; 0x5c
   148fc:	bl	10cc8 <__errno_location@plt>
   14900:	ldr	r6, [pc, #416]	; 14aa8 <__assert_fail@plt+0x3d2c>
   14904:	cmn	r4, #-2147483647	; 0x80000001
   14908:	ldr	r5, [r6]
   1490c:	mov	r9, r0
   14910:	movne	r0, #0
   14914:	moveq	r0, #1
   14918:	ldr	r3, [r9]
   1491c:	orrs	r0, r0, r4, lsr #31
   14920:	str	r3, [sp, #28]
   14924:	bne	14aa0 <__assert_fail@plt+0x3d24>
   14928:	ldr	r2, [r6, #4]
   1492c:	cmp	r4, r2
   14930:	movlt	r3, sl
   14934:	blt	149a0 <__assert_fail@plt+0x3c24>
   14938:	add	r7, r6, #8
   1493c:	cmp	r5, r7
   14940:	str	r2, [sp, #44]	; 0x2c
   14944:	beq	14a70 <__assert_fail@plt+0x3cf4>
   14948:	mov	r3, #8
   1494c:	sub	r2, r4, r2
   14950:	mov	r0, r5
   14954:	str	r3, [sp]
   14958:	add	r2, r2, #1
   1495c:	mvn	r3, #-2147483648	; 0x80000000
   14960:	add	r1, sp, #44	; 0x2c
   14964:	bl	162a0 <__assert_fail@plt+0x5524>
   14968:	mov	r5, r0
   1496c:	str	r0, [r6]
   14970:	ldr	r0, [r6, #4]
   14974:	ldr	r2, [sp, #44]	; 0x2c
   14978:	mov	r1, #0
   1497c:	sub	r2, r2, r0
   14980:	add	r0, r5, r0, lsl #3
   14984:	lsl	r2, r2, #3
   14988:	bl	10ce0 <memset@plt>
   1498c:	ldr	r3, [sp, #48]	; 0x30
   14990:	ldr	r7, [sp, #88]	; 0x58
   14994:	ldr	r8, [sp, #92]	; 0x5c
   14998:	ldr	r2, [sp, #44]	; 0x2c
   1499c:	str	r2, [r6, #4]
   149a0:	add	r2, r5, r4, lsl #3
   149a4:	mov	r1, r2
   149a8:	str	r2, [sp, #32]
   149ac:	ldr	r2, [sp, #52]	; 0x34
   149b0:	ldr	r6, [r1, #4]
   149b4:	ldr	sl, [r5, r4, lsl #3]
   149b8:	orr	r2, r2, #1
   149bc:	str	r3, [sp]
   149c0:	add	r3, sp, #56	; 0x38
   149c4:	str	r2, [sp, #36]	; 0x24
   149c8:	str	r2, [sp, #4]
   149cc:	str	r3, [sp, #8]
   149d0:	mov	r0, r6
   149d4:	str	r8, [sp, #16]
   149d8:	str	r7, [sp, #12]
   149dc:	mov	r1, sl
   149e0:	mvn	r3, #0
   149e4:	mov	r2, fp
   149e8:	bl	11890 <__assert_fail@plt+0xb14>
   149ec:	cmp	sl, r0
   149f0:	bhi	14a5c <__assert_fail@plt+0x3ce0>
   149f4:	ldr	r3, [pc, #176]	; 14aac <__assert_fail@plt+0x3d30>
   149f8:	add	r7, r0, #1
   149fc:	cmp	r6, r3
   14a00:	str	r7, [r5, r4, lsl #3]
   14a04:	beq	14a10 <__assert_fail@plt+0x3c94>
   14a08:	mov	r0, r6
   14a0c:	bl	1678c <__assert_fail@plt+0x5a10>
   14a10:	mov	r0, r7
   14a14:	bl	16084 <__assert_fail@plt+0x5308>
   14a18:	ldr	r3, [sp, #32]
   14a1c:	ldr	lr, [sp, #92]	; 0x5c
   14a20:	ldr	ip, [sp, #88]	; 0x58
   14a24:	ldr	r4, [sp, #36]	; 0x24
   14a28:	mov	r2, fp
   14a2c:	mov	r1, r7
   14a30:	str	r0, [r3, #4]
   14a34:	add	r3, sp, #56	; 0x38
   14a38:	str	r3, [sp, #8]
   14a3c:	ldr	r3, [sp, #48]	; 0x30
   14a40:	str	r4, [sp, #4]
   14a44:	str	r3, [sp]
   14a48:	str	lr, [sp, #16]
   14a4c:	str	ip, [sp, #12]
   14a50:	mvn	r3, #0
   14a54:	mov	r6, r0
   14a58:	bl	11890 <__assert_fail@plt+0xb14>
   14a5c:	ldr	r3, [sp, #28]
   14a60:	mov	r0, r6
   14a64:	str	r3, [r9]
   14a68:	add	sp, sp, #100	; 0x64
   14a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a70:	mov	r3, #8
   14a74:	sub	r2, r4, r2
   14a78:	str	r3, [sp]
   14a7c:	add	r1, sp, #44	; 0x2c
   14a80:	add	r2, r2, #1
   14a84:	mvn	r3, #-2147483648	; 0x80000000
   14a88:	bl	162a0 <__assert_fail@plt+0x5524>
   14a8c:	mov	r5, r0
   14a90:	ldm	r7, {r0, r1}
   14a94:	str	r5, [r6]
   14a98:	stm	r5, {r0, r1}
   14a9c:	b	14970 <__assert_fail@plt+0x3bf4>
   14aa0:	bl	10d70 <abort@plt>
   14aa4:	andeq	r8, r2, ip, asr #2
   14aa8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14aac:	andeq	r8, r2, ip, ror r1
   14ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ab4:	mov	r7, r1
   14ab8:	ldr	lr, [pc, #492]	; 14cac <__assert_fail@plt+0x3f30>
   14abc:	mov	r8, r2
   14ac0:	mov	r4, r0
   14ac4:	mov	fp, r3
   14ac8:	ldm	lr!, {r0, r1, r2, r3}
   14acc:	sub	sp, sp, #100	; 0x64
   14ad0:	add	ip, sp, #48	; 0x30
   14ad4:	mov	sl, #10
   14ad8:	stmia	ip!, {r0, r1, r2, r3}
   14adc:	cmp	r8, #0
   14ae0:	cmpne	r7, #0
   14ae4:	ldm	lr!, {r0, r1, r2, r3}
   14ae8:	str	sl, [sp, #48]	; 0x30
   14aec:	stmia	ip!, {r0, r1, r2, r3}
   14af0:	ldm	lr, {r0, r1, r2, r3}
   14af4:	stm	ip, {r0, r1, r2, r3}
   14af8:	beq	14ca8 <__assert_fail@plt+0x3f2c>
   14afc:	str	r7, [sp, #88]	; 0x58
   14b00:	str	r8, [sp, #92]	; 0x5c
   14b04:	bl	10cc8 <__errno_location@plt>
   14b08:	ldr	r6, [pc, #416]	; 14cb0 <__assert_fail@plt+0x3f34>
   14b0c:	cmn	r4, #-2147483647	; 0x80000001
   14b10:	ldr	r5, [r6]
   14b14:	mov	r9, r0
   14b18:	movne	r0, #0
   14b1c:	moveq	r0, #1
   14b20:	ldr	r3, [r9]
   14b24:	orrs	r0, r0, r4, lsr #31
   14b28:	str	r3, [sp, #28]
   14b2c:	bne	14ca8 <__assert_fail@plt+0x3f2c>
   14b30:	ldr	r2, [r6, #4]
   14b34:	cmp	r4, r2
   14b38:	movlt	r3, sl
   14b3c:	blt	14ba8 <__assert_fail@plt+0x3e2c>
   14b40:	add	r7, r6, #8
   14b44:	cmp	r5, r7
   14b48:	str	r2, [sp, #44]	; 0x2c
   14b4c:	beq	14c78 <__assert_fail@plt+0x3efc>
   14b50:	mov	r3, #8
   14b54:	sub	r2, r4, r2
   14b58:	mov	r0, r5
   14b5c:	str	r3, [sp]
   14b60:	add	r2, r2, #1
   14b64:	mvn	r3, #-2147483648	; 0x80000000
   14b68:	add	r1, sp, #44	; 0x2c
   14b6c:	bl	162a0 <__assert_fail@plt+0x5524>
   14b70:	mov	r5, r0
   14b74:	str	r0, [r6]
   14b78:	ldr	r0, [r6, #4]
   14b7c:	ldr	r2, [sp, #44]	; 0x2c
   14b80:	mov	r1, #0
   14b84:	sub	r2, r2, r0
   14b88:	add	r0, r5, r0, lsl #3
   14b8c:	lsl	r2, r2, #3
   14b90:	bl	10ce0 <memset@plt>
   14b94:	ldr	r3, [sp, #48]	; 0x30
   14b98:	ldr	r7, [sp, #88]	; 0x58
   14b9c:	ldr	r8, [sp, #92]	; 0x5c
   14ba0:	ldr	r2, [sp, #44]	; 0x2c
   14ba4:	str	r2, [r6, #4]
   14ba8:	add	r2, r5, r4, lsl #3
   14bac:	mov	r1, r2
   14bb0:	str	r2, [sp, #32]
   14bb4:	ldr	r2, [sp, #52]	; 0x34
   14bb8:	ldr	r6, [r1, #4]
   14bbc:	ldr	sl, [r5, r4, lsl #3]
   14bc0:	orr	r2, r2, #1
   14bc4:	str	r3, [sp]
   14bc8:	add	r3, sp, #56	; 0x38
   14bcc:	str	r2, [sp, #36]	; 0x24
   14bd0:	str	r2, [sp, #4]
   14bd4:	str	r3, [sp, #8]
   14bd8:	mov	r0, r6
   14bdc:	str	r8, [sp, #16]
   14be0:	str	r7, [sp, #12]
   14be4:	mov	r1, sl
   14be8:	ldr	r3, [sp, #136]	; 0x88
   14bec:	mov	r2, fp
   14bf0:	bl	11890 <__assert_fail@plt+0xb14>
   14bf4:	cmp	sl, r0
   14bf8:	bhi	14c64 <__assert_fail@plt+0x3ee8>
   14bfc:	ldr	r3, [pc, #176]	; 14cb4 <__assert_fail@plt+0x3f38>
   14c00:	add	r7, r0, #1
   14c04:	cmp	r6, r3
   14c08:	str	r7, [r5, r4, lsl #3]
   14c0c:	beq	14c18 <__assert_fail@plt+0x3e9c>
   14c10:	mov	r0, r6
   14c14:	bl	1678c <__assert_fail@plt+0x5a10>
   14c18:	mov	r0, r7
   14c1c:	bl	16084 <__assert_fail@plt+0x5308>
   14c20:	ldr	r3, [sp, #32]
   14c24:	ldr	lr, [sp, #92]	; 0x5c
   14c28:	ldr	ip, [sp, #88]	; 0x58
   14c2c:	ldr	r4, [sp, #36]	; 0x24
   14c30:	mov	r2, fp
   14c34:	mov	r1, r7
   14c38:	str	r0, [r3, #4]
   14c3c:	add	r3, sp, #56	; 0x38
   14c40:	str	r3, [sp, #8]
   14c44:	ldr	r3, [sp, #48]	; 0x30
   14c48:	str	r4, [sp, #4]
   14c4c:	str	r3, [sp]
   14c50:	str	lr, [sp, #16]
   14c54:	str	ip, [sp, #12]
   14c58:	ldr	r3, [sp, #136]	; 0x88
   14c5c:	mov	r6, r0
   14c60:	bl	11890 <__assert_fail@plt+0xb14>
   14c64:	ldr	r3, [sp, #28]
   14c68:	mov	r0, r6
   14c6c:	str	r3, [r9]
   14c70:	add	sp, sp, #100	; 0x64
   14c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c78:	mov	r3, #8
   14c7c:	sub	r2, r4, r2
   14c80:	str	r3, [sp]
   14c84:	add	r1, sp, #44	; 0x2c
   14c88:	add	r2, r2, #1
   14c8c:	mvn	r3, #-2147483648	; 0x80000000
   14c90:	bl	162a0 <__assert_fail@plt+0x5524>
   14c94:	mov	r5, r0
   14c98:	ldm	r7, {r0, r1}
   14c9c:	str	r5, [r6]
   14ca0:	stm	r5, {r0, r1}
   14ca4:	b	14b78 <__assert_fail@plt+0x3dfc>
   14ca8:	bl	10d70 <abort@plt>
   14cac:	andeq	r8, r2, ip, asr #2
   14cb0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14cb4:	andeq	r8, r2, ip, ror r1
   14cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cbc:	mov	r5, r0
   14cc0:	ldr	lr, [pc, #452]	; 14e8c <__assert_fail@plt+0x4110>
   14cc4:	mov	r6, r1
   14cc8:	mov	sl, r2
   14ccc:	ldm	lr!, {r0, r1, r2, r3}
   14cd0:	sub	sp, sp, #92	; 0x5c
   14cd4:	add	ip, sp, #40	; 0x28
   14cd8:	cmp	r6, #0
   14cdc:	cmpne	r5, #0
   14ce0:	stmia	ip!, {r0, r1, r2, r3}
   14ce4:	mov	r9, #10
   14ce8:	ldm	lr!, {r0, r1, r2, r3}
   14cec:	moveq	fp, #1
   14cf0:	movne	fp, #0
   14cf4:	str	r9, [sp, #40]	; 0x28
   14cf8:	stmia	ip!, {r0, r1, r2, r3}
   14cfc:	ldm	lr, {r0, r1, r2, r3}
   14d00:	stm	ip, {r0, r1, r2, r3}
   14d04:	beq	14e88 <__assert_fail@plt+0x410c>
   14d08:	str	r5, [sp, #80]	; 0x50
   14d0c:	str	r6, [sp, #84]	; 0x54
   14d10:	bl	10cc8 <__errno_location@plt>
   14d14:	ldr	r7, [pc, #372]	; 14e90 <__assert_fail@plt+0x4114>
   14d18:	ldr	r2, [r7, #4]
   14d1c:	ldr	r4, [r7]
   14d20:	cmp	r2, #0
   14d24:	ldr	r3, [r0]
   14d28:	mov	r8, r0
   14d2c:	str	r3, [sp, #24]
   14d30:	movgt	r3, r9
   14d34:	bgt	14d9c <__assert_fail@plt+0x4020>
   14d38:	add	r5, r7, #8
   14d3c:	cmp	r4, r5
   14d40:	str	r2, [sp, #36]	; 0x24
   14d44:	beq	14e58 <__assert_fail@plt+0x40dc>
   14d48:	mov	r3, #8
   14d4c:	mov	r0, r4
   14d50:	str	r3, [sp]
   14d54:	rsb	r2, r2, #1
   14d58:	mvn	r3, #-2147483648	; 0x80000000
   14d5c:	add	r1, sp, #36	; 0x24
   14d60:	bl	162a0 <__assert_fail@plt+0x5524>
   14d64:	mov	r4, r0
   14d68:	str	r0, [r7]
   14d6c:	ldr	r0, [r7, #4]
   14d70:	ldr	r2, [sp, #36]	; 0x24
   14d74:	mov	r1, #0
   14d78:	sub	r2, r2, r0
   14d7c:	add	r0, r4, r0, lsl #3
   14d80:	lsl	r2, r2, #3
   14d84:	bl	10ce0 <memset@plt>
   14d88:	ldr	r3, [sp, #40]	; 0x28
   14d8c:	ldr	r5, [sp, #80]	; 0x50
   14d90:	ldr	r6, [sp, #84]	; 0x54
   14d94:	ldr	r2, [sp, #36]	; 0x24
   14d98:	str	r2, [r7, #4]
   14d9c:	ldr	r2, [sp, #44]	; 0x2c
   14da0:	ldr	r9, [r4]
   14da4:	ldr	r7, [r4, #4]
   14da8:	orr	r2, r2, #1
   14dac:	add	fp, sp, #48	; 0x30
   14db0:	str	r2, [sp, #28]
   14db4:	str	r2, [sp, #4]
   14db8:	str	r3, [sp]
   14dbc:	str	r6, [sp, #16]
   14dc0:	str	r5, [sp, #12]
   14dc4:	mov	r1, r9
   14dc8:	mov	r0, r7
   14dcc:	str	fp, [sp, #8]
   14dd0:	mvn	r3, #0
   14dd4:	mov	r2, sl
   14dd8:	bl	11890 <__assert_fail@plt+0xb14>
   14ddc:	cmp	r9, r0
   14de0:	bhi	14e44 <__assert_fail@plt+0x40c8>
   14de4:	ldr	r3, [pc, #168]	; 14e94 <__assert_fail@plt+0x4118>
   14de8:	add	r5, r0, #1
   14dec:	cmp	r7, r3
   14df0:	str	r5, [r4]
   14df4:	beq	14e00 <__assert_fail@plt+0x4084>
   14df8:	mov	r0, r7
   14dfc:	bl	1678c <__assert_fail@plt+0x5a10>
   14e00:	mov	r0, r5
   14e04:	bl	16084 <__assert_fail@plt+0x5308>
   14e08:	ldr	lr, [sp, #84]	; 0x54
   14e0c:	ldr	r3, [sp, #40]	; 0x28
   14e10:	ldr	ip, [sp, #80]	; 0x50
   14e14:	mov	r2, sl
   14e18:	mov	r1, r5
   14e1c:	str	r0, [r4, #4]
   14e20:	ldr	r4, [sp, #28]
   14e24:	str	r3, [sp]
   14e28:	str	fp, [sp, #8]
   14e2c:	str	r4, [sp, #4]
   14e30:	str	lr, [sp, #16]
   14e34:	str	ip, [sp, #12]
   14e38:	mvn	r3, #0
   14e3c:	mov	r7, r0
   14e40:	bl	11890 <__assert_fail@plt+0xb14>
   14e44:	ldr	r3, [sp, #24]
   14e48:	mov	r0, r7
   14e4c:	str	r3, [r8]
   14e50:	add	sp, sp, #92	; 0x5c
   14e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e58:	mov	r3, #8
   14e5c:	str	r3, [sp]
   14e60:	add	r1, sp, #36	; 0x24
   14e64:	rsb	r2, r2, #1
   14e68:	mov	r0, fp
   14e6c:	mvn	r3, #-2147483648	; 0x80000000
   14e70:	bl	162a0 <__assert_fail@plt+0x5524>
   14e74:	mov	r4, r0
   14e78:	ldm	r5, {r0, r1}
   14e7c:	str	r4, [r7]
   14e80:	stm	r4, {r0, r1}
   14e84:	b	14d6c <__assert_fail@plt+0x3ff0>
   14e88:	bl	10d70 <abort@plt>
   14e8c:	andeq	r8, r2, ip, asr #2
   14e90:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14e94:	andeq	r8, r2, ip, ror r1
   14e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e9c:	mov	r5, r0
   14ea0:	ldr	lr, [pc, #464]	; 15078 <__assert_fail@plt+0x42fc>
   14ea4:	mov	r6, r1
   14ea8:	mov	sl, r2
   14eac:	mov	fp, r3
   14eb0:	ldm	lr!, {r0, r1, r2, r3}
   14eb4:	sub	sp, sp, #92	; 0x5c
   14eb8:	add	ip, sp, #40	; 0x28
   14ebc:	cmp	r6, #0
   14ec0:	cmpne	r5, #0
   14ec4:	stmia	ip!, {r0, r1, r2, r3}
   14ec8:	moveq	r4, #1
   14ecc:	ldm	lr!, {r0, r1, r2, r3}
   14ed0:	movne	r4, #0
   14ed4:	mov	r9, #10
   14ed8:	str	r4, [sp, #28]
   14edc:	stmia	ip!, {r0, r1, r2, r3}
   14ee0:	ldm	lr, {r0, r1, r2, r3}
   14ee4:	str	r9, [sp, #40]	; 0x28
   14ee8:	stm	ip, {r0, r1, r2, r3}
   14eec:	beq	15074 <__assert_fail@plt+0x42f8>
   14ef0:	str	r5, [sp, #80]	; 0x50
   14ef4:	str	r6, [sp, #84]	; 0x54
   14ef8:	bl	10cc8 <__errno_location@plt>
   14efc:	ldr	r7, [pc, #376]	; 1507c <__assert_fail@plt+0x4300>
   14f00:	ldr	r2, [r7, #4]
   14f04:	ldr	r4, [r7]
   14f08:	cmp	r2, #0
   14f0c:	ldr	r3, [r0]
   14f10:	mov	r8, r0
   14f14:	str	r3, [sp, #24]
   14f18:	movgt	r3, r9
   14f1c:	bgt	14f84 <__assert_fail@plt+0x4208>
   14f20:	add	r5, r7, #8
   14f24:	cmp	r4, r5
   14f28:	str	r2, [sp, #36]	; 0x24
   14f2c:	beq	15044 <__assert_fail@plt+0x42c8>
   14f30:	mov	r3, #8
   14f34:	mov	r0, r4
   14f38:	str	r3, [sp]
   14f3c:	rsb	r2, r2, #1
   14f40:	mvn	r3, #-2147483648	; 0x80000000
   14f44:	add	r1, sp, #36	; 0x24
   14f48:	bl	162a0 <__assert_fail@plt+0x5524>
   14f4c:	mov	r4, r0
   14f50:	str	r0, [r7]
   14f54:	ldr	r0, [r7, #4]
   14f58:	ldr	r2, [sp, #36]	; 0x24
   14f5c:	mov	r1, #0
   14f60:	sub	r2, r2, r0
   14f64:	add	r0, r4, r0, lsl #3
   14f68:	lsl	r2, r2, #3
   14f6c:	bl	10ce0 <memset@plt>
   14f70:	ldr	r3, [sp, #40]	; 0x28
   14f74:	ldr	r5, [sp, #80]	; 0x50
   14f78:	ldr	r6, [sp, #84]	; 0x54
   14f7c:	ldr	r2, [sp, #36]	; 0x24
   14f80:	str	r2, [r7, #4]
   14f84:	ldr	r2, [sp, #44]	; 0x2c
   14f88:	ldr	r9, [r4]
   14f8c:	ldr	r7, [r4, #4]
   14f90:	orr	r2, r2, #1
   14f94:	str	r3, [sp]
   14f98:	add	r3, sp, #48	; 0x30
   14f9c:	str	r2, [sp, #28]
   14fa0:	str	r2, [sp, #4]
   14fa4:	str	r3, [sp, #8]
   14fa8:	str	r6, [sp, #16]
   14fac:	str	r5, [sp, #12]
   14fb0:	mov	r1, r9
   14fb4:	mov	r0, r7
   14fb8:	mov	r3, fp
   14fbc:	mov	r2, sl
   14fc0:	bl	11890 <__assert_fail@plt+0xb14>
   14fc4:	cmp	r9, r0
   14fc8:	bhi	15030 <__assert_fail@plt+0x42b4>
   14fcc:	ldr	r3, [pc, #172]	; 15080 <__assert_fail@plt+0x4304>
   14fd0:	add	r5, r0, #1
   14fd4:	cmp	r7, r3
   14fd8:	str	r5, [r4]
   14fdc:	beq	14fe8 <__assert_fail@plt+0x426c>
   14fe0:	mov	r0, r7
   14fe4:	bl	1678c <__assert_fail@plt+0x5a10>
   14fe8:	mov	r0, r5
   14fec:	bl	16084 <__assert_fail@plt+0x5308>
   14ff0:	add	lr, sp, #48	; 0x30
   14ff4:	ldr	ip, [sp, #84]	; 0x54
   14ff8:	mov	r1, r5
   14ffc:	ldr	r5, [sp, #28]
   15000:	mov	r3, fp
   15004:	mov	r2, sl
   15008:	str	r0, [r4, #4]
   1500c:	ldr	r4, [sp, #80]	; 0x50
   15010:	str	lr, [sp, #8]
   15014:	ldr	lr, [sp, #40]	; 0x28
   15018:	str	r5, [sp, #4]
   1501c:	str	ip, [sp, #16]
   15020:	str	r4, [sp, #12]
   15024:	str	lr, [sp]
   15028:	mov	r7, r0
   1502c:	bl	11890 <__assert_fail@plt+0xb14>
   15030:	ldr	r3, [sp, #24]
   15034:	mov	r0, r7
   15038:	str	r3, [r8]
   1503c:	add	sp, sp, #92	; 0x5c
   15040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15044:	mov	r3, #8
   15048:	str	r3, [sp]
   1504c:	add	r1, sp, #36	; 0x24
   15050:	rsb	r2, r2, #1
   15054:	ldr	r0, [sp, #28]
   15058:	mvn	r3, #-2147483648	; 0x80000000
   1505c:	bl	162a0 <__assert_fail@plt+0x5524>
   15060:	mov	r4, r0
   15064:	ldm	r5, {r0, r1}
   15068:	str	r4, [r7]
   1506c:	stm	r4, {r0, r1}
   15070:	b	14f54 <__assert_fail@plt+0x41d8>
   15074:	bl	10d70 <abort@plt>
   15078:	andeq	r8, r2, ip, asr #2
   1507c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   15080:	andeq	r8, r2, ip, ror r1
   15084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15088:	sub	sp, sp, #52	; 0x34
   1508c:	mov	r5, r0
   15090:	mov	sl, r1
   15094:	mov	fp, r2
   15098:	bl	10cc8 <__errno_location@plt>
   1509c:	ldr	r4, [pc, #404]	; 15238 <__assert_fail@plt+0x44bc>
   150a0:	cmn	r5, #-2147483647	; 0x80000001
   150a4:	ldr	r6, [r4]
   150a8:	mov	r8, r0
   150ac:	movne	r0, #0
   150b0:	moveq	r0, #1
   150b4:	ldr	r3, [r8]
   150b8:	orrs	r0, r0, r5, lsr #31
   150bc:	str	r3, [sp, #28]
   150c0:	bne	15234 <__assert_fail@plt+0x44b8>
   150c4:	ldr	r2, [r4, #4]
   150c8:	cmp	r5, r2
   150cc:	blt	1512c <__assert_fail@plt+0x43b0>
   150d0:	add	r7, r4, #8
   150d4:	cmp	r6, r7
   150d8:	str	r2, [sp, #44]	; 0x2c
   150dc:	beq	15204 <__assert_fail@plt+0x4488>
   150e0:	mov	r3, #8
   150e4:	sub	r2, r5, r2
   150e8:	mov	r0, r6
   150ec:	str	r3, [sp]
   150f0:	add	r2, r2, #1
   150f4:	mvn	r3, #-2147483648	; 0x80000000
   150f8:	add	r1, sp, #44	; 0x2c
   150fc:	bl	162a0 <__assert_fail@plt+0x5524>
   15100:	mov	r6, r0
   15104:	str	r0, [r4]
   15108:	ldr	r0, [r4, #4]
   1510c:	ldr	r2, [sp, #44]	; 0x2c
   15110:	mov	r1, #0
   15114:	sub	r2, r2, r0
   15118:	add	r0, r6, r0, lsl #3
   1511c:	lsl	r2, r2, #3
   15120:	bl	10ce0 <memset@plt>
   15124:	ldr	r3, [sp, #44]	; 0x2c
   15128:	str	r3, [r4, #4]
   1512c:	ldr	r2, [r4, #56]	; 0x38
   15130:	add	r3, r6, r5, lsl #3
   15134:	ldr	r1, [r4, #20]
   15138:	ldr	r7, [r3, #4]
   1513c:	ldr	r9, [r6, r5, lsl #3]
   15140:	ldr	ip, [r4, #60]	; 0x3c
   15144:	str	r3, [sp, #32]
   15148:	ldr	r3, [r4, #16]
   1514c:	str	r2, [sp, #12]
   15150:	ldr	r2, [pc, #228]	; 1523c <__assert_fail@plt+0x44c0>
   15154:	orr	r1, r1, #1
   15158:	str	r1, [sp, #36]	; 0x24
   1515c:	str	r1, [sp, #4]
   15160:	str	r2, [sp, #8]
   15164:	str	r3, [sp]
   15168:	mov	r0, r7
   1516c:	mov	r1, r9
   15170:	str	ip, [sp, #16]
   15174:	mov	r3, fp
   15178:	mov	r2, sl
   1517c:	bl	11890 <__assert_fail@plt+0xb14>
   15180:	cmp	r9, r0
   15184:	bhi	151f0 <__assert_fail@plt+0x4474>
   15188:	ldr	r3, [pc, #176]	; 15240 <__assert_fail@plt+0x44c4>
   1518c:	add	r9, r0, #1
   15190:	cmp	r7, r3
   15194:	str	r9, [r6, r5, lsl #3]
   15198:	beq	151a4 <__assert_fail@plt+0x4428>
   1519c:	mov	r0, r7
   151a0:	bl	1678c <__assert_fail@plt+0x5a10>
   151a4:	mov	r0, r9
   151a8:	bl	16084 <__assert_fail@plt+0x5308>
   151ac:	ldr	ip, [sp, #32]
   151b0:	ldr	lr, [r4, #60]	; 0x3c
   151b4:	ldr	r5, [r4, #56]	; 0x38
   151b8:	mov	r3, fp
   151bc:	mov	r2, sl
   151c0:	mov	r1, r9
   151c4:	str	r0, [ip, #4]
   151c8:	ldr	ip, [r4, #16]
   151cc:	ldr	r4, [pc, #104]	; 1523c <__assert_fail@plt+0x44c0>
   151d0:	str	lr, [sp, #16]
   151d4:	str	r4, [sp, #8]
   151d8:	ldr	r4, [sp, #36]	; 0x24
   151dc:	str	r5, [sp, #12]
   151e0:	str	r4, [sp, #4]
   151e4:	str	ip, [sp]
   151e8:	mov	r7, r0
   151ec:	bl	11890 <__assert_fail@plt+0xb14>
   151f0:	ldr	r3, [sp, #28]
   151f4:	mov	r0, r7
   151f8:	str	r3, [r8]
   151fc:	add	sp, sp, #52	; 0x34
   15200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15204:	mov	r3, #8
   15208:	sub	r2, r5, r2
   1520c:	str	r3, [sp]
   15210:	add	r1, sp, #44	; 0x2c
   15214:	add	r2, r2, #1
   15218:	mvn	r3, #-2147483648	; 0x80000000
   1521c:	bl	162a0 <__assert_fail@plt+0x5524>
   15220:	mov	r6, r0
   15224:	ldm	r7, {r0, r1}
   15228:	str	r6, [r4]
   1522c:	stm	r6, {r0, r1}
   15230:	b	15108 <__assert_fail@plt+0x438c>
   15234:	bl	10d70 <abort@plt>
   15238:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1523c:	strdeq	r8, [r2], -r0
   15240:	andeq	r8, r2, ip, ror r1
   15244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15248:	sub	sp, sp, #44	; 0x2c
   1524c:	mov	r9, r0
   15250:	mov	sl, r1
   15254:	bl	10cc8 <__errno_location@plt>
   15258:	ldr	r4, [pc, #360]	; 153c8 <__assert_fail@plt+0x464c>
   1525c:	ldr	r2, [r4, #4]
   15260:	ldr	r5, [r4]
   15264:	cmp	r2, #0
   15268:	ldr	r3, [r0]
   1526c:	mov	r7, r0
   15270:	str	r3, [sp, #24]
   15274:	bgt	152d0 <__assert_fail@plt+0x4554>
   15278:	add	r6, r4, #8
   1527c:	cmp	r5, r6
   15280:	str	r2, [sp, #36]	; 0x24
   15284:	beq	15398 <__assert_fail@plt+0x461c>
   15288:	mov	r3, #8
   1528c:	mov	r0, r5
   15290:	str	r3, [sp]
   15294:	rsb	r2, r2, #1
   15298:	mvn	r3, #-2147483648	; 0x80000000
   1529c:	add	r1, sp, #36	; 0x24
   152a0:	bl	162a0 <__assert_fail@plt+0x5524>
   152a4:	mov	r5, r0
   152a8:	str	r0, [r4]
   152ac:	ldr	r0, [r4, #4]
   152b0:	ldr	r2, [sp, #36]	; 0x24
   152b4:	mov	r1, #0
   152b8:	sub	r2, r2, r0
   152bc:	add	r0, r5, r0, lsl #3
   152c0:	lsl	r2, r2, #3
   152c4:	bl	10ce0 <memset@plt>
   152c8:	ldr	r3, [sp, #36]	; 0x24
   152cc:	str	r3, [r4, #4]
   152d0:	ldr	r1, [r4, #20]
   152d4:	ldr	r8, [r5]
   152d8:	ldr	r6, [r5, #4]
   152dc:	ldr	r2, [r4, #56]	; 0x38
   152e0:	ldr	r3, [r4, #16]
   152e4:	ldr	ip, [r4, #60]	; 0x3c
   152e8:	ldr	fp, [pc, #220]	; 153cc <__assert_fail@plt+0x4650>
   152ec:	orr	r1, r1, #1
   152f0:	str	r1, [sp, #28]
   152f4:	str	r1, [sp, #4]
   152f8:	str	r2, [sp, #12]
   152fc:	str	r3, [sp]
   15300:	mov	r1, r8
   15304:	mov	r0, r6
   15308:	str	ip, [sp, #16]
   1530c:	str	fp, [sp, #8]
   15310:	mov	r3, sl
   15314:	mov	r2, r9
   15318:	bl	11890 <__assert_fail@plt+0xb14>
   1531c:	cmp	r8, r0
   15320:	bhi	15384 <__assert_fail@plt+0x4608>
   15324:	ldr	r3, [pc, #164]	; 153d0 <__assert_fail@plt+0x4654>
   15328:	add	r8, r0, #1
   1532c:	cmp	r6, r3
   15330:	str	r8, [r5]
   15334:	beq	15340 <__assert_fail@plt+0x45c4>
   15338:	mov	r0, r6
   1533c:	bl	1678c <__assert_fail@plt+0x5a10>
   15340:	mov	r0, r8
   15344:	bl	16084 <__assert_fail@plt+0x5308>
   15348:	ldr	lr, [r4, #60]	; 0x3c
   1534c:	ldr	ip, [r4, #16]
   15350:	mov	r3, sl
   15354:	mov	r2, r9
   15358:	mov	r1, r8
   1535c:	str	r0, [r5, #4]
   15360:	ldr	r5, [r4, #56]	; 0x38
   15364:	ldr	r4, [sp, #28]
   15368:	str	fp, [sp, #8]
   1536c:	str	r4, [sp, #4]
   15370:	str	lr, [sp, #16]
   15374:	str	r5, [sp, #12]
   15378:	str	ip, [sp]
   1537c:	mov	r6, r0
   15380:	bl	11890 <__assert_fail@plt+0xb14>
   15384:	ldr	r3, [sp, #24]
   15388:	mov	r0, r6
   1538c:	str	r3, [r7]
   15390:	add	sp, sp, #44	; 0x2c
   15394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15398:	mov	r3, #8
   1539c:	str	r3, [sp]
   153a0:	add	r1, sp, #36	; 0x24
   153a4:	rsb	r2, r2, #1
   153a8:	mvn	r3, #-2147483648	; 0x80000000
   153ac:	mov	r0, #0
   153b0:	bl	162a0 <__assert_fail@plt+0x5524>
   153b4:	mov	r5, r0
   153b8:	ldm	r6, {r0, r1}
   153bc:	str	r5, [r4]
   153c0:	stm	r5, {r0, r1}
   153c4:	b	152ac <__assert_fail@plt+0x4530>
   153c8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   153cc:	strdeq	r8, [r2], -r0
   153d0:	andeq	r8, r2, ip, ror r1
   153d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153d8:	sub	sp, sp, #44	; 0x2c
   153dc:	mov	r5, r0
   153e0:	mov	sl, r1
   153e4:	bl	10cc8 <__errno_location@plt>
   153e8:	ldr	r4, [pc, #396]	; 1557c <__assert_fail@plt+0x4800>
   153ec:	cmn	r5, #-2147483647	; 0x80000001
   153f0:	ldr	r6, [r4]
   153f4:	mov	r8, r0
   153f8:	movne	r0, #0
   153fc:	moveq	r0, #1
   15400:	ldr	r3, [r8]
   15404:	orrs	r0, r0, r5, lsr #31
   15408:	str	r3, [sp, #24]
   1540c:	bne	15578 <__assert_fail@plt+0x47fc>
   15410:	ldr	r2, [r4, #4]
   15414:	cmp	r5, r2
   15418:	blt	15478 <__assert_fail@plt+0x46fc>
   1541c:	add	r7, r4, #8
   15420:	cmp	r6, r7
   15424:	str	r2, [sp, #36]	; 0x24
   15428:	beq	15548 <__assert_fail@plt+0x47cc>
   1542c:	mov	r3, #8
   15430:	sub	r2, r5, r2
   15434:	mov	r0, r6
   15438:	str	r3, [sp]
   1543c:	add	r2, r2, #1
   15440:	mvn	r3, #-2147483648	; 0x80000000
   15444:	add	r1, sp, #36	; 0x24
   15448:	bl	162a0 <__assert_fail@plt+0x5524>
   1544c:	mov	r6, r0
   15450:	str	r0, [r4]
   15454:	ldr	r0, [r4, #4]
   15458:	ldr	r2, [sp, #36]	; 0x24
   1545c:	mov	r1, #0
   15460:	sub	r2, r2, r0
   15464:	add	r0, r6, r0, lsl #3
   15468:	lsl	r2, r2, #3
   1546c:	bl	10ce0 <memset@plt>
   15470:	ldr	r3, [sp, #36]	; 0x24
   15474:	str	r3, [r4, #4]
   15478:	ldr	r2, [r4, #56]	; 0x38
   1547c:	add	fp, r6, r5, lsl #3
   15480:	ldr	r1, [r4, #20]
   15484:	ldr	r9, [r6, r5, lsl #3]
   15488:	ldr	r7, [fp, #4]
   1548c:	ldr	r3, [r4, #16]
   15490:	ldr	ip, [r4, #60]	; 0x3c
   15494:	str	r2, [sp, #12]
   15498:	ldr	r2, [pc, #224]	; 15580 <__assert_fail@plt+0x4804>
   1549c:	orr	r1, r1, #1
   154a0:	str	r1, [sp, #28]
   154a4:	str	r1, [sp, #4]
   154a8:	str	r2, [sp, #8]
   154ac:	str	r3, [sp]
   154b0:	mov	r0, r7
   154b4:	mov	r1, r9
   154b8:	str	ip, [sp, #16]
   154bc:	mvn	r3, #0
   154c0:	mov	r2, sl
   154c4:	bl	11890 <__assert_fail@plt+0xb14>
   154c8:	cmp	r9, r0
   154cc:	bhi	15534 <__assert_fail@plt+0x47b8>
   154d0:	ldr	r3, [pc, #172]	; 15584 <__assert_fail@plt+0x4808>
   154d4:	add	r9, r0, #1
   154d8:	cmp	r7, r3
   154dc:	str	r9, [r6, r5, lsl #3]
   154e0:	beq	154ec <__assert_fail@plt+0x4770>
   154e4:	mov	r0, r7
   154e8:	bl	1678c <__assert_fail@plt+0x5a10>
   154ec:	mov	r0, r9
   154f0:	bl	16084 <__assert_fail@plt+0x5308>
   154f4:	ldr	ip, [r4, #60]	; 0x3c
   154f8:	ldr	r3, [r4, #16]
   154fc:	ldr	lr, [r4, #56]	; 0x38
   15500:	ldr	r4, [pc, #120]	; 15580 <__assert_fail@plt+0x4804>
   15504:	mov	r2, sl
   15508:	mov	r1, r9
   1550c:	str	r0, [fp, #4]
   15510:	str	r4, [sp, #8]
   15514:	ldr	r4, [sp, #28]
   15518:	str	r3, [sp]
   1551c:	str	r4, [sp, #4]
   15520:	str	ip, [sp, #16]
   15524:	str	lr, [sp, #12]
   15528:	mvn	r3, #0
   1552c:	mov	r7, r0
   15530:	bl	11890 <__assert_fail@plt+0xb14>
   15534:	ldr	r3, [sp, #24]
   15538:	mov	r0, r7
   1553c:	str	r3, [r8]
   15540:	add	sp, sp, #44	; 0x2c
   15544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15548:	mov	r3, #8
   1554c:	sub	r2, r5, r2
   15550:	str	r3, [sp]
   15554:	add	r1, sp, #36	; 0x24
   15558:	add	r2, r2, #1
   1555c:	mvn	r3, #-2147483648	; 0x80000000
   15560:	bl	162a0 <__assert_fail@plt+0x5524>
   15564:	mov	r6, r0
   15568:	ldm	r7, {r0, r1}
   1556c:	str	r6, [r4]
   15570:	stm	r6, {r0, r1}
   15574:	b	15454 <__assert_fail@plt+0x46d8>
   15578:	bl	10d70 <abort@plt>
   1557c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   15580:	strdeq	r8, [r2], -r0
   15584:	andeq	r8, r2, ip, ror r1
   15588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1558c:	sub	sp, sp, #44	; 0x2c
   15590:	mov	sl, r0
   15594:	bl	10cc8 <__errno_location@plt>
   15598:	ldr	r4, [pc, #348]	; 156fc <__assert_fail@plt+0x4980>
   1559c:	ldr	r2, [r4, #4]
   155a0:	ldr	r5, [r4]
   155a4:	cmp	r2, #0
   155a8:	ldr	r3, [r0]
   155ac:	mov	r8, r0
   155b0:	str	r3, [sp, #28]
   155b4:	bgt	15610 <__assert_fail@plt+0x4894>
   155b8:	add	r6, r4, #8
   155bc:	cmp	r5, r6
   155c0:	str	r2, [sp, #36]	; 0x24
   155c4:	beq	156cc <__assert_fail@plt+0x4950>
   155c8:	mov	r3, #8
   155cc:	mov	r0, r5
   155d0:	str	r3, [sp]
   155d4:	rsb	r2, r2, #1
   155d8:	mvn	r3, #-2147483648	; 0x80000000
   155dc:	add	r1, sp, #36	; 0x24
   155e0:	bl	162a0 <__assert_fail@plt+0x5524>
   155e4:	mov	r5, r0
   155e8:	str	r0, [r4]
   155ec:	ldr	r0, [r4, #4]
   155f0:	ldr	r2, [sp, #36]	; 0x24
   155f4:	mov	r1, #0
   155f8:	sub	r2, r2, r0
   155fc:	add	r0, r5, r0, lsl #3
   15600:	lsl	r2, r2, #3
   15604:	bl	10ce0 <memset@plt>
   15608:	ldr	r3, [sp, #36]	; 0x24
   1560c:	str	r3, [r4, #4]
   15610:	ldr	r7, [r4, #20]
   15614:	ldr	r9, [r5]
   15618:	ldr	r6, [r5, #4]
   1561c:	ldr	r2, [r4, #56]	; 0x38
   15620:	ldr	r3, [r4, #16]
   15624:	ldr	ip, [r4, #60]	; 0x3c
   15628:	ldr	fp, [pc, #208]	; 15700 <__assert_fail@plt+0x4984>
   1562c:	orr	r7, r7, #1
   15630:	str	r2, [sp, #12]
   15634:	str	r3, [sp]
   15638:	str	r7, [sp, #4]
   1563c:	mov	r1, r9
   15640:	mov	r0, r6
   15644:	str	ip, [sp, #16]
   15648:	str	fp, [sp, #8]
   1564c:	mvn	r3, #0
   15650:	mov	r2, sl
   15654:	bl	11890 <__assert_fail@plt+0xb14>
   15658:	cmp	r9, r0
   1565c:	bhi	156b8 <__assert_fail@plt+0x493c>
   15660:	ldr	r3, [pc, #156]	; 15704 <__assert_fail@plt+0x4988>
   15664:	add	r9, r0, #1
   15668:	cmp	r6, r3
   1566c:	str	r9, [r5]
   15670:	beq	1567c <__assert_fail@plt+0x4900>
   15674:	mov	r0, r6
   15678:	bl	1678c <__assert_fail@plt+0x5a10>
   1567c:	mov	r0, r9
   15680:	bl	16084 <__assert_fail@plt+0x5308>
   15684:	ldr	ip, [r4, #60]	; 0x3c
   15688:	ldr	r3, [r4, #16]
   1568c:	ldr	lr, [r4, #56]	; 0x38
   15690:	mov	r2, sl
   15694:	mov	r1, r9
   15698:	str	r0, [r5, #4]
   1569c:	str	r3, [sp]
   156a0:	stmib	sp, {r7, fp}
   156a4:	str	ip, [sp, #16]
   156a8:	str	lr, [sp, #12]
   156ac:	mvn	r3, #0
   156b0:	mov	r6, r0
   156b4:	bl	11890 <__assert_fail@plt+0xb14>
   156b8:	ldr	r3, [sp, #28]
   156bc:	mov	r0, r6
   156c0:	str	r3, [r8]
   156c4:	add	sp, sp, #44	; 0x2c
   156c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156cc:	mov	r3, #8
   156d0:	str	r3, [sp]
   156d4:	add	r1, sp, #36	; 0x24
   156d8:	rsb	r2, r2, #1
   156dc:	mvn	r3, #-2147483648	; 0x80000000
   156e0:	mov	r0, #0
   156e4:	bl	162a0 <__assert_fail@plt+0x5524>
   156e8:	mov	r5, r0
   156ec:	ldm	r6, {r0, r1}
   156f0:	str	r5, [r4]
   156f4:	stm	r5, {r0, r1}
   156f8:	b	155ec <__assert_fail@plt+0x4870>
   156fc:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   15700:	strdeq	r8, [r2], -r0
   15704:	andeq	r8, r2, ip, ror r1
   15708:	push	{r4, r5, r6, lr}
   1570c:	sub	sp, sp, #32
   15710:	cmp	r1, #0
   15714:	mov	r4, r0
   15718:	ldr	r5, [sp, #48]	; 0x30
   1571c:	ldr	r6, [sp, #52]	; 0x34
   15720:	beq	159cc <__assert_fail@plt+0x4c50>
   15724:	str	r3, [sp]
   15728:	mov	r3, r2
   1572c:	mov	r2, r1
   15730:	ldr	r1, [pc, #684]	; 159e4 <__assert_fail@plt+0x4c68>
   15734:	bl	10cbc <fprintf@plt>
   15738:	mov	r2, #5
   1573c:	ldr	r1, [pc, #676]	; 159e8 <__assert_fail@plt+0x4c6c>
   15740:	mov	r0, #0
   15744:	bl	10bf0 <dcgettext@plt>
   15748:	ldr	r3, [pc, #668]	; 159ec <__assert_fail@plt+0x4c70>
   1574c:	ldr	r1, [pc, #668]	; 159f0 <__assert_fail@plt+0x4c74>
   15750:	mov	r2, r0
   15754:	mov	r0, r4
   15758:	bl	10cbc <fprintf@plt>
   1575c:	mov	r1, r4
   15760:	mov	r0, #10
   15764:	bl	10d34 <fputc@plt>
   15768:	mov	r2, #5
   1576c:	ldr	r1, [pc, #640]	; 159f4 <__assert_fail@plt+0x4c78>
   15770:	mov	r0, #0
   15774:	bl	10bf0 <dcgettext@plt>
   15778:	ldr	r2, [pc, #632]	; 159f8 <__assert_fail@plt+0x4c7c>
   1577c:	mov	r1, r0
   15780:	mov	r0, r4
   15784:	bl	10cbc <fprintf@plt>
   15788:	mov	r1, r4
   1578c:	mov	r0, #10
   15790:	bl	10d34 <fputc@plt>
   15794:	cmp	r6, #9
   15798:	ldrls	pc, [pc, r6, lsl #2]
   1579c:	b	159d8 <__assert_fail@plt+0x4c5c>
   157a0:	andeq	r5, r1, r4, lsl r8
   157a4:	andeq	r5, r1, ip, lsl r8
   157a8:	andeq	r5, r1, r4, asr #16
   157ac:	andeq	r5, r1, ip, ror #16
   157b0:	muleq	r1, ip, r8
   157b4:	ldrdeq	r5, [r1], -r4
   157b8:	andeq	r5, r1, r4, lsl #18
   157bc:	andeq	r5, r1, ip, lsr r9
   157c0:	andeq	r5, r1, r0, lsl #19
   157c4:	andeq	r5, r1, r8, asr #15
   157c8:	ldr	r1, [pc, #556]	; 159fc <__assert_fail@plt+0x4c80>
   157cc:	mov	r2, #5
   157d0:	mov	r0, #0
   157d4:	bl	10bf0 <dcgettext@plt>
   157d8:	add	r1, r5, #24
   157dc:	ldm	r5, {r2, r3}
   157e0:	ldm	r1, {r1, ip, lr}
   157e4:	str	lr, [sp, #24]
   157e8:	ldr	r6, [r5, #20]
   157ec:	str	ip, [sp, #20]
   157f0:	ldr	lr, [r5, #16]
   157f4:	str	r1, [sp, #16]
   157f8:	ldr	r1, [r5, #8]
   157fc:	ldr	ip, [r5, #12]
   15800:	str	r6, [sp, #12]
   15804:	stm	sp, {r1, ip, lr}
   15808:	mov	r1, r0
   1580c:	mov	r0, r4
   15810:	bl	10cbc <fprintf@plt>
   15814:	add	sp, sp, #32
   15818:	pop	{r4, r5, r6, pc}
   1581c:	mov	r2, #5
   15820:	ldr	r1, [pc, #472]	; 15a00 <__assert_fail@plt+0x4c84>
   15824:	mov	r0, #0
   15828:	bl	10bf0 <dcgettext@plt>
   1582c:	ldr	r2, [r5]
   15830:	mov	r1, r0
   15834:	mov	r0, r4
   15838:	add	sp, sp, #32
   1583c:	pop	{r4, r5, r6, lr}
   15840:	b	10cbc <fprintf@plt>
   15844:	mov	r2, #5
   15848:	ldr	r1, [pc, #436]	; 15a04 <__assert_fail@plt+0x4c88>
   1584c:	mov	r0, #0
   15850:	bl	10bf0 <dcgettext@plt>
   15854:	ldm	r5, {r2, r3}
   15858:	mov	r1, r0
   1585c:	mov	r0, r4
   15860:	add	sp, sp, #32
   15864:	pop	{r4, r5, r6, lr}
   15868:	b	10cbc <fprintf@plt>
   1586c:	mov	r2, #5
   15870:	ldr	r1, [pc, #400]	; 15a08 <__assert_fail@plt+0x4c8c>
   15874:	mov	r0, #0
   15878:	bl	10bf0 <dcgettext@plt>
   1587c:	ldr	r1, [r5, #8]
   15880:	ldm	r5, {r2, r3}
   15884:	str	r1, [sp, #48]	; 0x30
   15888:	mov	r1, r0
   1588c:	mov	r0, r4
   15890:	add	sp, sp, #32
   15894:	pop	{r4, r5, r6, lr}
   15898:	b	10cbc <fprintf@plt>
   1589c:	mov	r2, #5
   158a0:	ldr	r1, [pc, #356]	; 15a0c <__assert_fail@plt+0x4c90>
   158a4:	mov	r0, #0
   158a8:	bl	10bf0 <dcgettext@plt>
   158ac:	ldr	r1, [r5, #8]
   158b0:	ldr	ip, [r5, #12]
   158b4:	ldm	r5, {r2, r3}
   158b8:	str	r1, [sp, #48]	; 0x30
   158bc:	str	ip, [sp, #52]	; 0x34
   158c0:	mov	r1, r0
   158c4:	mov	r0, r4
   158c8:	add	sp, sp, #32
   158cc:	pop	{r4, r5, r6, lr}
   158d0:	b	10cbc <fprintf@plt>
   158d4:	mov	r2, #5
   158d8:	ldr	r1, [pc, #304]	; 15a10 <__assert_fail@plt+0x4c94>
   158dc:	mov	r0, #0
   158e0:	bl	10bf0 <dcgettext@plt>
   158e4:	add	r1, r5, #8
   158e8:	ldm	r5, {r2, r3}
   158ec:	ldm	r1, {r1, ip, lr}
   158f0:	stm	sp, {r1, ip, lr}
   158f4:	mov	r1, r0
   158f8:	mov	r0, r4
   158fc:	bl	10cbc <fprintf@plt>
   15900:	b	15814 <__assert_fail@plt+0x4a98>
   15904:	mov	r2, #5
   15908:	ldr	r1, [pc, #260]	; 15a14 <__assert_fail@plt+0x4c98>
   1590c:	mov	r0, #0
   15910:	bl	10bf0 <dcgettext@plt>
   15914:	add	r1, r5, #8
   15918:	ldr	r6, [r5, #20]
   1591c:	ldm	r1, {r1, ip, lr}
   15920:	ldm	r5, {r2, r3}
   15924:	str	r6, [sp, #12]
   15928:	stm	sp, {r1, ip, lr}
   1592c:	mov	r1, r0
   15930:	mov	r0, r4
   15934:	bl	10cbc <fprintf@plt>
   15938:	b	15814 <__assert_fail@plt+0x4a98>
   1593c:	mov	r2, #5
   15940:	ldr	r1, [pc, #208]	; 15a18 <__assert_fail@plt+0x4c9c>
   15944:	mov	r0, #0
   15948:	bl	10bf0 <dcgettext@plt>
   1594c:	ldr	r1, [r5, #24]
   15950:	ldm	r5, {r2, r3}
   15954:	ldr	r6, [r5, #20]
   15958:	ldr	lr, [r5, #16]
   1595c:	str	r1, [sp, #16]
   15960:	ldr	r1, [r5, #8]
   15964:	ldr	ip, [r5, #12]
   15968:	str	r6, [sp, #12]
   1596c:	stm	sp, {r1, ip, lr}
   15970:	mov	r1, r0
   15974:	mov	r0, r4
   15978:	bl	10cbc <fprintf@plt>
   1597c:	b	15814 <__assert_fail@plt+0x4a98>
   15980:	mov	r2, #5
   15984:	ldr	r1, [pc, #144]	; 15a1c <__assert_fail@plt+0x4ca0>
   15988:	mov	r0, #0
   1598c:	bl	10bf0 <dcgettext@plt>
   15990:	ldr	ip, [r5, #28]
   15994:	ldr	r1, [r5, #24]
   15998:	ldm	r5, {r2, r3}
   1599c:	ldr	r6, [r5, #20]
   159a0:	str	ip, [sp, #20]
   159a4:	ldr	lr, [r5, #16]
   159a8:	str	r1, [sp, #16]
   159ac:	ldr	r1, [r5, #8]
   159b0:	ldr	ip, [r5, #12]
   159b4:	str	r6, [sp, #12]
   159b8:	stm	sp, {r1, ip, lr}
   159bc:	mov	r1, r0
   159c0:	mov	r0, r4
   159c4:	bl	10cbc <fprintf@plt>
   159c8:	b	15814 <__assert_fail@plt+0x4a98>
   159cc:	ldr	r1, [pc, #76]	; 15a20 <__assert_fail@plt+0x4ca4>
   159d0:	bl	10cbc <fprintf@plt>
   159d4:	b	15738 <__assert_fail@plt+0x49bc>
   159d8:	mov	r2, #5
   159dc:	ldr	r1, [pc, #64]	; 15a24 <__assert_fail@plt+0x4ca8>
   159e0:	b	157d0 <__assert_fail@plt+0x4a54>
   159e4:	andeq	r7, r1, r4, asr r5
   159e8:	andeq	r7, r1, r8, ror #10
   159ec:	andeq	r0, r0, r6, ror #15
   159f0:	andeq	r7, r1, r8, lsr #16
   159f4:	andeq	r7, r1, ip, ror #10
   159f8:	andeq	r7, r1, r8, lsl r6
   159fc:	andeq	r7, r1, r8, asr #14
   15a00:	andeq	r7, r1, ip, lsr r6
   15a04:	andeq	r7, r1, ip, asr #12
   15a08:	andeq	r7, r1, r4, ror #12
   15a0c:	andeq	r7, r1, r0, lsl #13
   15a10:	andeq	r7, r1, r0, lsr #13
   15a14:	andeq	r7, r1, r4, asr #13
   15a18:	andeq	r7, r1, ip, ror #13
   15a1c:	andeq	r7, r1, r8, lsl r7
   15a20:	andeq	r7, r1, r0, ror #10
   15a24:	andeq	r7, r1, ip, ror r7
   15a28:	push	{r4, r5, lr}
   15a2c:	sub	sp, sp, #12
   15a30:	ldr	r5, [sp, #24]
   15a34:	ldr	ip, [r5]
   15a38:	cmp	ip, #0
   15a3c:	beq	15a58 <__assert_fail@plt+0x4cdc>
   15a40:	mov	lr, r5
   15a44:	mov	ip, #0
   15a48:	ldr	r4, [lr, #4]!
   15a4c:	add	ip, ip, #1
   15a50:	cmp	r4, #0
   15a54:	bne	15a48 <__assert_fail@plt+0x4ccc>
   15a58:	stm	sp, {r5, ip}
   15a5c:	bl	15708 <__assert_fail@plt+0x498c>
   15a60:	add	sp, sp, #12
   15a64:	pop	{r4, r5, pc}
   15a68:	push	{r4, r5, lr}
   15a6c:	sub	sp, sp, #76	; 0x4c
   15a70:	mov	r5, r0
   15a74:	ldr	ip, [sp, #88]	; 0x58
   15a78:	ldr	r0, [ip]
   15a7c:	cmp	r0, #0
   15a80:	str	r0, [sp, #32]
   15a84:	beq	15e00 <__assert_fail@plt+0x5084>
   15a88:	ldr	r0, [ip, #4]
   15a8c:	cmp	r0, #0
   15a90:	str	r0, [sp, #36]	; 0x24
   15a94:	beq	15e08 <__assert_fail@plt+0x508c>
   15a98:	ldr	r0, [ip, #8]
   15a9c:	cmp	r0, #0
   15aa0:	str	r0, [sp, #40]	; 0x28
   15aa4:	beq	15e10 <__assert_fail@plt+0x5094>
   15aa8:	ldr	r0, [ip, #12]
   15aac:	cmp	r0, #0
   15ab0:	str	r0, [sp, #44]	; 0x2c
   15ab4:	beq	15e18 <__assert_fail@plt+0x509c>
   15ab8:	ldr	r0, [ip, #16]
   15abc:	cmp	r0, #0
   15ac0:	str	r0, [sp, #48]	; 0x30
   15ac4:	beq	15e20 <__assert_fail@plt+0x50a4>
   15ac8:	ldr	r0, [ip, #20]
   15acc:	cmp	r0, #0
   15ad0:	str	r0, [sp, #52]	; 0x34
   15ad4:	beq	15e28 <__assert_fail@plt+0x50ac>
   15ad8:	ldr	r0, [ip, #24]
   15adc:	cmp	r0, #0
   15ae0:	str	r0, [sp, #56]	; 0x38
   15ae4:	beq	15e30 <__assert_fail@plt+0x50b4>
   15ae8:	ldr	r0, [ip, #28]
   15aec:	cmp	r0, #0
   15af0:	str	r0, [sp, #60]	; 0x3c
   15af4:	beq	15e38 <__assert_fail@plt+0x50bc>
   15af8:	ldr	r0, [ip, #32]
   15afc:	cmp	r0, #0
   15b00:	str	r0, [sp, #64]	; 0x40
   15b04:	beq	15e40 <__assert_fail@plt+0x50c4>
   15b08:	ldr	r0, [ip, #36]	; 0x24
   15b0c:	cmp	r0, #0
   15b10:	movne	r4, #10
   15b14:	moveq	r4, #9
   15b18:	cmp	r1, #0
   15b1c:	beq	15de4 <__assert_fail@plt+0x5068>
   15b20:	str	r3, [sp]
   15b24:	mov	r0, r5
   15b28:	mov	r3, r2
   15b2c:	mov	r2, r1
   15b30:	ldr	r1, [pc, #784]	; 15e48 <__assert_fail@plt+0x50cc>
   15b34:	bl	10cbc <fprintf@plt>
   15b38:	mov	r2, #5
   15b3c:	ldr	r1, [pc, #776]	; 15e4c <__assert_fail@plt+0x50d0>
   15b40:	mov	r0, #0
   15b44:	bl	10bf0 <dcgettext@plt>
   15b48:	ldr	r3, [pc, #768]	; 15e50 <__assert_fail@plt+0x50d4>
   15b4c:	ldr	r1, [pc, #768]	; 15e54 <__assert_fail@plt+0x50d8>
   15b50:	mov	r2, r0
   15b54:	mov	r0, r5
   15b58:	bl	10cbc <fprintf@plt>
   15b5c:	mov	r1, r5
   15b60:	mov	r0, #10
   15b64:	bl	10d34 <fputc@plt>
   15b68:	mov	r2, #5
   15b6c:	ldr	r1, [pc, #740]	; 15e58 <__assert_fail@plt+0x50dc>
   15b70:	mov	r0, #0
   15b74:	bl	10bf0 <dcgettext@plt>
   15b78:	ldr	r2, [pc, #732]	; 15e5c <__assert_fail@plt+0x50e0>
   15b7c:	mov	r1, r0
   15b80:	mov	r0, r5
   15b84:	bl	10cbc <fprintf@plt>
   15b88:	mov	r1, r5
   15b8c:	mov	r0, #10
   15b90:	bl	10d34 <fputc@plt>
   15b94:	cmp	r4, #9
   15b98:	ldrls	pc, [pc, r4, lsl #2]
   15b9c:	b	15df4 <__assert_fail@plt+0x5078>
   15ba0:	andeq	r5, r1, r8, lsl ip
   15ba4:	andeq	r5, r1, r0, lsr #24
   15ba8:	andeq	r5, r1, r8, asr #24
   15bac:	andeq	r5, r1, r4, ror ip
   15bb0:	andeq	r5, r1, r8, lsr #25
   15bb4:	ldrdeq	r5, [r1], -ip
   15bb8:	andeq	r5, r1, r0, lsl sp
   15bbc:	andeq	r5, r1, ip, asr #26
   15bc0:	muleq	r1, r4, sp
   15bc4:	andeq	r5, r1, r8, asr #23
   15bc8:	ldr	r1, [pc, #656]	; 15e60 <__assert_fail@plt+0x50e4>
   15bcc:	mov	r2, #5
   15bd0:	mov	r0, #0
   15bd4:	bl	10bf0 <dcgettext@plt>
   15bd8:	add	r1, sp, #56	; 0x38
   15bdc:	ldr	r4, [sp, #52]	; 0x34
   15be0:	ldm	r1, {r1, ip, lr}
   15be4:	ldr	r3, [sp, #36]	; 0x24
   15be8:	ldr	r2, [sp, #32]
   15bec:	str	lr, [sp, #24]
   15bf0:	str	ip, [sp, #20]
   15bf4:	ldr	lr, [sp, #48]	; 0x30
   15bf8:	ldr	ip, [sp, #44]	; 0x2c
   15bfc:	str	r1, [sp, #16]
   15c00:	ldr	r1, [sp, #40]	; 0x28
   15c04:	str	r4, [sp, #12]
   15c08:	stm	sp, {r1, ip, lr}
   15c0c:	mov	r1, r0
   15c10:	mov	r0, r5
   15c14:	bl	10cbc <fprintf@plt>
   15c18:	add	sp, sp, #76	; 0x4c
   15c1c:	pop	{r4, r5, pc}
   15c20:	mov	r2, #5
   15c24:	ldr	r1, [pc, #568]	; 15e64 <__assert_fail@plt+0x50e8>
   15c28:	mov	r0, #0
   15c2c:	bl	10bf0 <dcgettext@plt>
   15c30:	ldr	r2, [sp, #32]
   15c34:	mov	r1, r0
   15c38:	mov	r0, r5
   15c3c:	add	sp, sp, #76	; 0x4c
   15c40:	pop	{r4, r5, lr}
   15c44:	b	10cbc <fprintf@plt>
   15c48:	mov	r2, #5
   15c4c:	ldr	r1, [pc, #532]	; 15e68 <__assert_fail@plt+0x50ec>
   15c50:	mov	r0, #0
   15c54:	bl	10bf0 <dcgettext@plt>
   15c58:	ldr	r3, [sp, #36]	; 0x24
   15c5c:	ldr	r2, [sp, #32]
   15c60:	mov	r1, r0
   15c64:	mov	r0, r5
   15c68:	add	sp, sp, #76	; 0x4c
   15c6c:	pop	{r4, r5, lr}
   15c70:	b	10cbc <fprintf@plt>
   15c74:	mov	r2, #5
   15c78:	ldr	r1, [pc, #492]	; 15e6c <__assert_fail@plt+0x50f0>
   15c7c:	mov	r0, #0
   15c80:	bl	10bf0 <dcgettext@plt>
   15c84:	ldr	r1, [sp, #40]	; 0x28
   15c88:	ldr	r3, [sp, #36]	; 0x24
   15c8c:	str	r1, [sp, #88]	; 0x58
   15c90:	ldr	r2, [sp, #32]
   15c94:	mov	r1, r0
   15c98:	mov	r0, r5
   15c9c:	add	sp, sp, #76	; 0x4c
   15ca0:	pop	{r4, r5, lr}
   15ca4:	b	10cbc <fprintf@plt>
   15ca8:	mov	r2, #5
   15cac:	ldr	r1, [pc, #444]	; 15e70 <__assert_fail@plt+0x50f4>
   15cb0:	mov	r0, #0
   15cb4:	bl	10bf0 <dcgettext@plt>
   15cb8:	ldr	r1, [sp, #40]	; 0x28
   15cbc:	ldr	ip, [sp, #44]	; 0x2c
   15cc0:	ldr	r3, [sp, #36]	; 0x24
   15cc4:	ldr	r2, [sp, #32]
   15cc8:	stm	sp, {r1, ip}
   15ccc:	mov	r1, r0
   15cd0:	mov	r0, r5
   15cd4:	bl	10cbc <fprintf@plt>
   15cd8:	b	15c18 <__assert_fail@plt+0x4e9c>
   15cdc:	mov	r2, #5
   15ce0:	ldr	r1, [pc, #396]	; 15e74 <__assert_fail@plt+0x50f8>
   15ce4:	mov	r0, #0
   15ce8:	bl	10bf0 <dcgettext@plt>
   15cec:	add	r1, sp, #40	; 0x28
   15cf0:	ldr	r3, [sp, #36]	; 0x24
   15cf4:	ldm	r1, {r1, ip, lr}
   15cf8:	ldr	r2, [sp, #32]
   15cfc:	stm	sp, {r1, ip, lr}
   15d00:	mov	r1, r0
   15d04:	mov	r0, r5
   15d08:	bl	10cbc <fprintf@plt>
   15d0c:	b	15c18 <__assert_fail@plt+0x4e9c>
   15d10:	mov	r2, #5
   15d14:	ldr	r1, [pc, #348]	; 15e78 <__assert_fail@plt+0x50fc>
   15d18:	mov	r0, #0
   15d1c:	bl	10bf0 <dcgettext@plt>
   15d20:	add	r1, sp, #40	; 0x28
   15d24:	ldr	r4, [sp, #52]	; 0x34
   15d28:	ldm	r1, {r1, ip, lr}
   15d2c:	ldr	r3, [sp, #36]	; 0x24
   15d30:	ldr	r2, [sp, #32]
   15d34:	stm	sp, {r1, ip, lr}
   15d38:	str	r4, [sp, #12]
   15d3c:	mov	r1, r0
   15d40:	mov	r0, r5
   15d44:	bl	10cbc <fprintf@plt>
   15d48:	b	15c18 <__assert_fail@plt+0x4e9c>
   15d4c:	mov	r2, #5
   15d50:	ldr	r1, [pc, #292]	; 15e7c <__assert_fail@plt+0x5100>
   15d54:	mov	r0, #0
   15d58:	bl	10bf0 <dcgettext@plt>
   15d5c:	ldr	r1, [sp, #56]	; 0x38
   15d60:	ldr	lr, [sp, #48]	; 0x30
   15d64:	ldr	ip, [sp, #44]	; 0x2c
   15d68:	str	r1, [sp, #16]
   15d6c:	ldr	r1, [sp, #40]	; 0x28
   15d70:	ldr	r4, [sp, #52]	; 0x34
   15d74:	ldr	r3, [sp, #36]	; 0x24
   15d78:	stm	sp, {r1, ip, lr}
   15d7c:	ldr	r2, [sp, #32]
   15d80:	str	r4, [sp, #12]
   15d84:	mov	r1, r0
   15d88:	mov	r0, r5
   15d8c:	bl	10cbc <fprintf@plt>
   15d90:	b	15c18 <__assert_fail@plt+0x4e9c>
   15d94:	mov	r2, #5
   15d98:	ldr	r1, [pc, #224]	; 15e80 <__assert_fail@plt+0x5104>
   15d9c:	mov	r0, #0
   15da0:	bl	10bf0 <dcgettext@plt>
   15da4:	ldr	ip, [sp, #60]	; 0x3c
   15da8:	ldr	r1, [sp, #56]	; 0x38
   15dac:	ldr	lr, [sp, #48]	; 0x30
   15db0:	str	ip, [sp, #20]
   15db4:	str	r1, [sp, #16]
   15db8:	ldr	ip, [sp, #44]	; 0x2c
   15dbc:	ldr	r1, [sp, #40]	; 0x28
   15dc0:	ldr	r4, [sp, #52]	; 0x34
   15dc4:	ldr	r3, [sp, #36]	; 0x24
   15dc8:	stm	sp, {r1, ip, lr}
   15dcc:	ldr	r2, [sp, #32]
   15dd0:	str	r4, [sp, #12]
   15dd4:	mov	r1, r0
   15dd8:	mov	r0, r5
   15ddc:	bl	10cbc <fprintf@plt>
   15de0:	b	15c18 <__assert_fail@plt+0x4e9c>
   15de4:	ldr	r1, [pc, #152]	; 15e84 <__assert_fail@plt+0x5108>
   15de8:	mov	r0, r5
   15dec:	bl	10cbc <fprintf@plt>
   15df0:	b	15b38 <__assert_fail@plt+0x4dbc>
   15df4:	mov	r2, #5
   15df8:	ldr	r1, [pc, #136]	; 15e88 <__assert_fail@plt+0x510c>
   15dfc:	b	15bd0 <__assert_fail@plt+0x4e54>
   15e00:	mov	r4, r0
   15e04:	b	15b18 <__assert_fail@plt+0x4d9c>
   15e08:	mov	r4, #1
   15e0c:	b	15b18 <__assert_fail@plt+0x4d9c>
   15e10:	mov	r4, #2
   15e14:	b	15b18 <__assert_fail@plt+0x4d9c>
   15e18:	mov	r4, #3
   15e1c:	b	15b18 <__assert_fail@plt+0x4d9c>
   15e20:	mov	r4, #4
   15e24:	b	15b18 <__assert_fail@plt+0x4d9c>
   15e28:	mov	r4, #5
   15e2c:	b	15b18 <__assert_fail@plt+0x4d9c>
   15e30:	mov	r4, #6
   15e34:	b	15b18 <__assert_fail@plt+0x4d9c>
   15e38:	mov	r4, #7
   15e3c:	b	15b18 <__assert_fail@plt+0x4d9c>
   15e40:	mov	r4, #8
   15e44:	b	15b18 <__assert_fail@plt+0x4d9c>
   15e48:	andeq	r7, r1, r4, asr r5
   15e4c:	andeq	r7, r1, r8, ror #10
   15e50:	andeq	r0, r0, r6, ror #15
   15e54:	andeq	r7, r1, r8, lsr #16
   15e58:	andeq	r7, r1, ip, ror #10
   15e5c:	andeq	r7, r1, r8, lsl r6
   15e60:	andeq	r7, r1, r8, asr #14
   15e64:	andeq	r7, r1, ip, lsr r6
   15e68:	andeq	r7, r1, ip, asr #12
   15e6c:	andeq	r7, r1, r4, ror #12
   15e70:	andeq	r7, r1, r0, lsl #13
   15e74:	andeq	r7, r1, r0, lsr #13
   15e78:	andeq	r7, r1, r4, asr #13
   15e7c:	andeq	r7, r1, ip, ror #13
   15e80:	andeq	r7, r1, r8, lsl r7
   15e84:	andeq	r7, r1, r0, ror #10
   15e88:	andeq	r7, r1, ip, ror r7
   15e8c:	push	{r3}		; (str r3, [sp, #-4]!)
   15e90:	push	{lr}		; (str lr, [sp, #-4]!)
   15e94:	sub	sp, sp, #56	; 0x38
   15e98:	add	r3, sp, #64	; 0x40
   15e9c:	ldr	ip, [sp, #64]	; 0x40
   15ea0:	str	r3, [sp, #12]
   15ea4:	cmp	ip, #0
   15ea8:	str	ip, [sp, #16]
   15eac:	beq	15f44 <__assert_fail@plt+0x51c8>
   15eb0:	ldr	ip, [sp, #68]	; 0x44
   15eb4:	cmp	ip, #0
   15eb8:	str	ip, [sp, #20]
   15ebc:	beq	15f64 <__assert_fail@plt+0x51e8>
   15ec0:	ldr	ip, [sp, #72]	; 0x48
   15ec4:	cmp	ip, #0
   15ec8:	str	ip, [sp, #24]
   15ecc:	beq	15f6c <__assert_fail@plt+0x51f0>
   15ed0:	ldr	ip, [sp, #76]	; 0x4c
   15ed4:	cmp	ip, #0
   15ed8:	str	ip, [sp, #28]
   15edc:	beq	15f74 <__assert_fail@plt+0x51f8>
   15ee0:	ldr	ip, [sp, #80]	; 0x50
   15ee4:	cmp	ip, #0
   15ee8:	str	ip, [sp, #32]
   15eec:	beq	15f7c <__assert_fail@plt+0x5200>
   15ef0:	ldr	ip, [sp, #84]	; 0x54
   15ef4:	cmp	ip, #0
   15ef8:	str	ip, [sp, #36]	; 0x24
   15efc:	beq	15f84 <__assert_fail@plt+0x5208>
   15f00:	ldr	ip, [sp, #88]	; 0x58
   15f04:	cmp	ip, #0
   15f08:	str	ip, [sp, #40]	; 0x28
   15f0c:	beq	15f8c <__assert_fail@plt+0x5210>
   15f10:	ldr	ip, [sp, #92]	; 0x5c
   15f14:	cmp	ip, #0
   15f18:	str	ip, [sp, #44]	; 0x2c
   15f1c:	beq	15f94 <__assert_fail@plt+0x5218>
   15f20:	ldr	ip, [sp, #96]	; 0x60
   15f24:	cmp	ip, #0
   15f28:	str	ip, [sp, #48]	; 0x30
   15f2c:	beq	15f9c <__assert_fail@plt+0x5220>
   15f30:	ldr	ip, [sp, #100]	; 0x64
   15f34:	cmp	ip, #0
   15f38:	str	ip, [sp, #52]	; 0x34
   15f3c:	movne	ip, #10
   15f40:	moveq	ip, #9
   15f44:	add	r3, sp, #16
   15f48:	stm	sp, {r3, ip}
   15f4c:	ldr	r3, [sp, #60]	; 0x3c
   15f50:	bl	15708 <__assert_fail@plt+0x498c>
   15f54:	add	sp, sp, #56	; 0x38
   15f58:	pop	{lr}		; (ldr lr, [sp], #4)
   15f5c:	add	sp, sp, #4
   15f60:	bx	lr
   15f64:	mov	ip, #1
   15f68:	b	15f44 <__assert_fail@plt+0x51c8>
   15f6c:	mov	ip, #2
   15f70:	b	15f44 <__assert_fail@plt+0x51c8>
   15f74:	mov	ip, #3
   15f78:	b	15f44 <__assert_fail@plt+0x51c8>
   15f7c:	mov	ip, #4
   15f80:	b	15f44 <__assert_fail@plt+0x51c8>
   15f84:	mov	ip, #5
   15f88:	b	15f44 <__assert_fail@plt+0x51c8>
   15f8c:	mov	ip, #6
   15f90:	b	15f44 <__assert_fail@plt+0x51c8>
   15f94:	mov	ip, #7
   15f98:	b	15f44 <__assert_fail@plt+0x51c8>
   15f9c:	mov	ip, #8
   15fa0:	b	15f44 <__assert_fail@plt+0x51c8>
   15fa4:	ldr	r3, [pc, #92]	; 16008 <__assert_fail@plt+0x528c>
   15fa8:	push	{r4, lr}
   15fac:	mov	r0, #10
   15fb0:	ldr	r1, [r3]
   15fb4:	bl	10d34 <fputc@plt>
   15fb8:	mov	r2, #5
   15fbc:	ldr	r1, [pc, #72]	; 1600c <__assert_fail@plt+0x5290>
   15fc0:	mov	r0, #0
   15fc4:	bl	10bf0 <dcgettext@plt>
   15fc8:	ldr	r1, [pc, #64]	; 16010 <__assert_fail@plt+0x5294>
   15fcc:	bl	10b90 <printf@plt>
   15fd0:	mov	r2, #5
   15fd4:	ldr	r1, [pc, #56]	; 16014 <__assert_fail@plt+0x5298>
   15fd8:	mov	r0, #0
   15fdc:	bl	10bf0 <dcgettext@plt>
   15fe0:	ldr	r2, [pc, #48]	; 16018 <__assert_fail@plt+0x529c>
   15fe4:	ldr	r1, [pc, #48]	; 1601c <__assert_fail@plt+0x52a0>
   15fe8:	bl	10b90 <printf@plt>
   15fec:	ldr	r1, [pc, #44]	; 16020 <__assert_fail@plt+0x52a4>
   15ff0:	mov	r2, #5
   15ff4:	mov	r0, #0
   15ff8:	bl	10bf0 <dcgettext@plt>
   15ffc:	ldr	r1, [pc, #32]	; 16024 <__assert_fail@plt+0x52a8>
   16000:	pop	{r4, lr}
   16004:	b	10b90 <printf@plt>
   16008:	andeq	r8, r2, r4, lsr r1
   1600c:			; <UNDEFINED> instruction: 0x000177b8
   16010:	andeq	r7, r1, r8, ror #7
   16014:	andeq	r7, r1, ip, asr #15
   16018:	andeq	r7, r1, r0, asr #7
   1601c:	ldrdeq	r7, [r1], -r0
   16020:	andeq	r7, r1, r0, ror #15
   16024:	andeq	r7, r1, r8, lsl #16
   16028:	push	{r4, r5, r6, lr}
   1602c:	mov	r6, r0
   16030:	mov	r5, r1
   16034:	mov	r4, r2
   16038:	bl	16960 <__assert_fail@plt+0x5be4>
   1603c:	cmp	r0, #0
   16040:	popne	{r4, r5, r6, pc}
   16044:	cmp	r6, #0
   16048:	beq	16058 <__assert_fail@plt+0x52dc>
   1604c:	cmp	r5, #0
   16050:	cmpne	r4, #0
   16054:	popeq	{r4, r5, r6, pc}
   16058:	bl	166a4 <__assert_fail@plt+0x5928>
   1605c:	push	{r4, lr}
   16060:	bl	16884 <__assert_fail@plt+0x5b08>
   16064:	cmp	r0, #0
   16068:	popne	{r4, pc}
   1606c:	bl	166a4 <__assert_fail@plt+0x5928>
   16070:	push	{r4, lr}
   16074:	bl	16884 <__assert_fail@plt+0x5b08>
   16078:	cmp	r0, #0
   1607c:	popne	{r4, pc}
   16080:	bl	166a4 <__assert_fail@plt+0x5928>
   16084:	push	{r4, lr}
   16088:	bl	16884 <__assert_fail@plt+0x5b08>
   1608c:	cmp	r0, #0
   16090:	popne	{r4, pc}
   16094:	bl	166a4 <__assert_fail@plt+0x5928>
   16098:	push	{r4, r5, r6, lr}
   1609c:	mov	r5, r0
   160a0:	mov	r4, r1
   160a4:	bl	16904 <__assert_fail@plt+0x5b88>
   160a8:	cmp	r0, #0
   160ac:	popne	{r4, r5, r6, pc}
   160b0:	adds	r4, r4, #0
   160b4:	movne	r4, #1
   160b8:	cmp	r5, #0
   160bc:	orreq	r4, r4, #1
   160c0:	cmp	r4, #0
   160c4:	popeq	{r4, r5, r6, pc}
   160c8:	bl	166a4 <__assert_fail@plt+0x5928>
   160cc:	push	{r4, lr}
   160d0:	cmp	r1, #0
   160d4:	orreq	r1, r1, #1
   160d8:	bl	16904 <__assert_fail@plt+0x5b88>
   160dc:	cmp	r0, #0
   160e0:	popne	{r4, pc}
   160e4:	bl	166a4 <__assert_fail@plt+0x5928>
   160e8:	push	{r4, r5, r6, lr}
   160ec:	mov	r6, r0
   160f0:	mov	r5, r1
   160f4:	mov	r4, r2
   160f8:	bl	16960 <__assert_fail@plt+0x5be4>
   160fc:	cmp	r0, #0
   16100:	popne	{r4, r5, r6, pc}
   16104:	cmp	r6, #0
   16108:	beq	16118 <__assert_fail@plt+0x539c>
   1610c:	cmp	r5, #0
   16110:	cmpne	r4, #0
   16114:	popeq	{r4, r5, r6, pc}
   16118:	bl	166a4 <__assert_fail@plt+0x5928>
   1611c:	cmp	r2, #0
   16120:	cmpne	r1, #0
   16124:	moveq	r2, #1
   16128:	moveq	r1, r2
   1612c:	push	{r4, lr}
   16130:	bl	16960 <__assert_fail@plt+0x5be4>
   16134:	cmp	r0, #0
   16138:	popne	{r4, pc}
   1613c:	bl	166a4 <__assert_fail@plt+0x5928>
   16140:	push	{r4, lr}
   16144:	mov	r2, r1
   16148:	mov	r1, r0
   1614c:	mov	r0, #0
   16150:	bl	16960 <__assert_fail@plt+0x5be4>
   16154:	cmp	r0, #0
   16158:	popne	{r4, pc}
   1615c:	bl	166a4 <__assert_fail@plt+0x5928>
   16160:	cmp	r1, #0
   16164:	cmpne	r0, #0
   16168:	moveq	r2, #1
   1616c:	movne	r2, r1
   16170:	moveq	r1, r2
   16174:	movne	r1, r0
   16178:	push	{r4, lr}
   1617c:	mov	r0, #0
   16180:	bl	16960 <__assert_fail@plt+0x5be4>
   16184:	cmp	r0, #0
   16188:	popne	{r4, pc}
   1618c:	bl	166a4 <__assert_fail@plt+0x5928>
   16190:	cmp	r0, #0
   16194:	push	{r4, r5, r6, lr}
   16198:	mov	r5, r1
   1619c:	ldr	r4, [r1]
   161a0:	beq	161dc <__assert_fail@plt+0x5460>
   161a4:	lsr	r2, r4, #1
   161a8:	add	r3, r2, #1
   161ac:	mvn	r3, r3
   161b0:	cmp	r4, r3
   161b4:	bhi	161f8 <__assert_fail@plt+0x547c>
   161b8:	add	r4, r4, #1
   161bc:	add	r4, r4, r2
   161c0:	mov	r1, r4
   161c4:	mov	r2, #1
   161c8:	bl	16960 <__assert_fail@plt+0x5be4>
   161cc:	cmp	r0, #0
   161d0:	beq	161fc <__assert_fail@plt+0x5480>
   161d4:	str	r4, [r5]
   161d8:	pop	{r4, r5, r6, pc}
   161dc:	cmp	r4, #0
   161e0:	moveq	r4, #64	; 0x40
   161e4:	mov	r1, r4
   161e8:	mov	r2, #1
   161ec:	bl	16960 <__assert_fail@plt+0x5be4>
   161f0:	cmp	r0, #0
   161f4:	bne	161d4 <__assert_fail@plt+0x5458>
   161f8:	bl	166a4 <__assert_fail@plt+0x5928>
   161fc:	cmp	r4, #0
   16200:	bne	161f8 <__assert_fail@plt+0x547c>
   16204:	str	r4, [r5]
   16208:	pop	{r4, r5, r6, pc}
   1620c:	cmp	r0, #0
   16210:	push	{r4, r5, r6, lr}
   16214:	mov	r5, r1
   16218:	ldr	r4, [r1]
   1621c:	mov	r6, r2
   16220:	beq	16264 <__assert_fail@plt+0x54e8>
   16224:	lsr	r1, r4, #1
   16228:	add	r3, r1, #1
   1622c:	mvn	r3, r3
   16230:	cmp	r4, r3
   16234:	bhi	1629c <__assert_fail@plt+0x5520>
   16238:	add	r4, r4, #1
   1623c:	add	r4, r4, r1
   16240:	mov	r1, r4
   16244:	bl	16960 <__assert_fail@plt+0x5be4>
   16248:	cmp	r0, #0
   1624c:	bne	1625c <__assert_fail@plt+0x54e0>
   16250:	cmp	r4, #0
   16254:	cmpne	r6, #0
   16258:	bne	1629c <__assert_fail@plt+0x5520>
   1625c:	str	r4, [r5]
   16260:	pop	{r4, r5, r6, pc}
   16264:	cmp	r4, #0
   16268:	bne	16284 <__assert_fail@plt+0x5508>
   1626c:	mov	r1, r2
   16270:	mov	r0, #64	; 0x40
   16274:	bl	16b54 <__assert_fail@plt+0x5dd8>
   16278:	cmp	r0, #0
   1627c:	movne	r4, r0
   16280:	addeq	r4, r0, #1
   16284:	mov	r2, r6
   16288:	mov	r1, r4
   1628c:	mov	r0, #0
   16290:	bl	16960 <__assert_fail@plt+0x5be4>
   16294:	cmp	r0, #0
   16298:	bne	1625c <__assert_fail@plt+0x54e0>
   1629c:	bl	166a4 <__assert_fail@plt+0x5928>
   162a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162a4:	sub	sp, sp, #12
   162a8:	ldr	r6, [r1]
   162ac:	mov	r8, r1
   162b0:	mov	r9, r0
   162b4:	asrs	r4, r6, #1
   162b8:	mov	sl, r2
   162bc:	mov	fp, r3
   162c0:	ldr	r7, [sp, #48]	; 0x30
   162c4:	bmi	16440 <__assert_fail@plt+0x56c4>
   162c8:	mvn	r1, #-2147483648	; 0x80000000
   162cc:	sub	r1, r1, r4
   162d0:	cmp	r6, r1
   162d4:	movle	r1, #0
   162d8:	movgt	r1, #1
   162dc:	mvn	r3, fp
   162e0:	cmp	r1, #0
   162e4:	addeq	r4, r4, r6
   162e8:	mvnne	r4, #-2147483648	; 0x80000000
   162ec:	lsr	r3, r3, #31
   162f0:	cmp	fp, r4
   162f4:	movge	r2, #0
   162f8:	andlt	r2, r3, #1
   162fc:	cmp	r2, #0
   16300:	beq	163f0 <__assert_fail@plt+0x5674>
   16304:	cmp	r7, #0
   16308:	blt	164d8 <__assert_fail@plt+0x575c>
   1630c:	bne	164d0 <__assert_fail@plt+0x5754>
   16310:	mov	r5, #64	; 0x40
   16314:	mov	r1, r7
   16318:	mov	r0, r5
   1631c:	str	r3, [sp, #4]
   16320:	bl	16d60 <__assert_fail@plt+0x5fe4>
   16324:	mov	r1, r7
   16328:	mov	r4, r0
   1632c:	mov	r0, r5
   16330:	bl	16f80 <__assert_fail@plt+0x6204>
   16334:	ldr	r3, [sp, #4]
   16338:	sub	r5, r5, r1
   1633c:	cmp	r9, #0
   16340:	sub	r2, r4, r6
   16344:	streq	r9, [r8]
   16348:	cmp	r2, sl
   1634c:	bge	163d0 <__assert_fail@plt+0x5654>
   16350:	cmp	sl, #0
   16354:	blt	16470 <__assert_fail@plt+0x56f4>
   16358:	cmp	r6, #0
   1635c:	blt	1637c <__assert_fail@plt+0x5600>
   16360:	mvn	r2, #-2147483648	; 0x80000000
   16364:	sub	r2, r2, sl
   16368:	cmp	r6, r2
   1636c:	movle	r2, #0
   16370:	movgt	r2, #1
   16374:	cmp	r2, #0
   16378:	bne	1646c <__assert_fail@plt+0x56f0>
   1637c:	add	r6, r6, sl
   16380:	cmp	fp, r6
   16384:	movge	r3, #0
   16388:	andlt	r3, r3, #1
   1638c:	cmp	r3, #0
   16390:	mov	r4, r6
   16394:	bne	1646c <__assert_fail@plt+0x56f0>
   16398:	cmp	r7, #0
   1639c:	blt	16484 <__assert_fail@plt+0x5708>
   163a0:	beq	163cc <__assert_fail@plt+0x5650>
   163a4:	cmp	r6, #0
   163a8:	blt	16528 <__assert_fail@plt+0x57ac>
   163ac:	mov	r1, r7
   163b0:	mvn	r0, #-2147483648	; 0x80000000
   163b4:	bl	16d60 <__assert_fail@plt+0x5fe4>
   163b8:	cmp	r6, r0
   163bc:	movle	r0, #0
   163c0:	movgt	r0, #1
   163c4:	cmp	r0, #0
   163c8:	bne	1646c <__assert_fail@plt+0x56f0>
   163cc:	mul	r5, r6, r7
   163d0:	mov	r1, r5
   163d4:	mov	r0, r9
   163d8:	bl	16904 <__assert_fail@plt+0x5b88>
   163dc:	cmp	r0, #0
   163e0:	beq	16454 <__assert_fail@plt+0x56d8>
   163e4:	str	r4, [r8]
   163e8:	add	sp, sp, #12
   163ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163f0:	cmp	r7, #0
   163f4:	blt	164b0 <__assert_fail@plt+0x5734>
   163f8:	beq	16310 <__assert_fail@plt+0x5594>
   163fc:	cmp	r4, #0
   16400:	blt	164e0 <__assert_fail@plt+0x5764>
   16404:	mov	r1, r7
   16408:	mvn	r0, #-2147483648	; 0x80000000
   1640c:	str	r3, [sp, #4]
   16410:	bl	16d60 <__assert_fail@plt+0x5fe4>
   16414:	ldr	r3, [sp, #4]
   16418:	cmp	r0, r4
   1641c:	movge	r0, #0
   16420:	movlt	r0, #1
   16424:	cmp	r0, #0
   16428:	mvnne	r5, #-2147483648	; 0x80000000
   1642c:	bne	16314 <__assert_fail@plt+0x5598>
   16430:	mul	r5, r7, r4
   16434:	cmp	r5, #63	; 0x3f
   16438:	bgt	1633c <__assert_fail@plt+0x55c0>
   1643c:	b	16310 <__assert_fail@plt+0x5594>
   16440:	rsb	r1, r4, #-2147483648	; 0x80000000
   16444:	cmp	r6, r1
   16448:	movge	r1, #0
   1644c:	movlt	r1, #1
   16450:	b	162dc <__assert_fail@plt+0x5560>
   16454:	adds	r5, r5, #0
   16458:	movne	r5, #1
   1645c:	cmp	r9, #0
   16460:	orreq	r5, r5, #1
   16464:	cmp	r5, #0
   16468:	beq	163e4 <__assert_fail@plt+0x5668>
   1646c:	bl	166a4 <__assert_fail@plt+0x5928>
   16470:	rsb	r2, sl, #-2147483648	; 0x80000000
   16474:	cmp	r6, r2
   16478:	movge	r2, #0
   1647c:	movlt	r2, #1
   16480:	b	16374 <__assert_fail@plt+0x55f8>
   16484:	cmp	r6, #0
   16488:	blt	1650c <__assert_fail@plt+0x5790>
   1648c:	cmn	r7, #1
   16490:	beq	163cc <__assert_fail@plt+0x5650>
   16494:	mov	r1, r7
   16498:	mov	r0, #-2147483648	; 0x80000000
   1649c:	bl	16d60 <__assert_fail@plt+0x5fe4>
   164a0:	cmp	r6, r0
   164a4:	movle	r0, #0
   164a8:	movgt	r0, #1
   164ac:	b	163c4 <__assert_fail@plt+0x5648>
   164b0:	cmp	r4, #0
   164b4:	blt	1654c <__assert_fail@plt+0x57d0>
   164b8:	cmn	r7, #1
   164bc:	beq	16430 <__assert_fail@plt+0x56b4>
   164c0:	str	r3, [sp, #4]
   164c4:	mov	r1, r7
   164c8:	mov	r0, #-2147483648	; 0x80000000
   164cc:	b	16410 <__assert_fail@plt+0x5694>
   164d0:	mov	r4, fp
   164d4:	b	16404 <__assert_fail@plt+0x5688>
   164d8:	mov	r4, fp
   164dc:	b	164b8 <__assert_fail@plt+0x573c>
   164e0:	cmn	r4, #1
   164e4:	beq	16430 <__assert_fail@plt+0x56b4>
   164e8:	mov	r1, r4
   164ec:	mov	r0, #-2147483648	; 0x80000000
   164f0:	str	r3, [sp, #4]
   164f4:	bl	16d60 <__assert_fail@plt+0x5fe4>
   164f8:	ldr	r3, [sp, #4]
   164fc:	cmp	r7, r0
   16500:	movle	r0, #0
   16504:	movgt	r0, #1
   16508:	b	16424 <__assert_fail@plt+0x56a8>
   1650c:	mov	r1, r7
   16510:	mvn	r0, #-2147483648	; 0x80000000
   16514:	bl	16d60 <__assert_fail@plt+0x5fe4>
   16518:	cmp	r6, r0
   1651c:	movge	r0, #0
   16520:	movlt	r0, #1
   16524:	b	163c4 <__assert_fail@plt+0x5648>
   16528:	cmn	r6, #1
   1652c:	beq	163cc <__assert_fail@plt+0x5650>
   16530:	mov	r1, r6
   16534:	mov	r0, #-2147483648	; 0x80000000
   16538:	bl	16d60 <__assert_fail@plt+0x5fe4>
   1653c:	cmp	r7, r0
   16540:	movle	r0, #0
   16544:	movgt	r0, #1
   16548:	b	163c4 <__assert_fail@plt+0x5648>
   1654c:	mov	r1, r7
   16550:	mvn	r0, #-2147483648	; 0x80000000
   16554:	str	r3, [sp, #4]
   16558:	bl	16d60 <__assert_fail@plt+0x5fe4>
   1655c:	ldr	r3, [sp, #4]
   16560:	cmp	r0, r4
   16564:	movle	r0, #0
   16568:	movgt	r0, #1
   1656c:	b	16424 <__assert_fail@plt+0x56a8>
   16570:	push	{r4, lr}
   16574:	mov	r1, #1
   16578:	bl	166e4 <__assert_fail@plt+0x5968>
   1657c:	cmp	r0, #0
   16580:	popne	{r4, pc}
   16584:	bl	166a4 <__assert_fail@plt+0x5928>
   16588:	push	{r4, lr}
   1658c:	mov	r1, #1
   16590:	bl	166e4 <__assert_fail@plt+0x5968>
   16594:	cmp	r0, #0
   16598:	popne	{r4, pc}
   1659c:	bl	166a4 <__assert_fail@plt+0x5928>
   165a0:	push	{r4, lr}
   165a4:	bl	166e4 <__assert_fail@plt+0x5968>
   165a8:	cmp	r0, #0
   165ac:	popne	{r4, pc}
   165b0:	bl	166a4 <__assert_fail@plt+0x5928>
   165b4:	push	{r4, lr}
   165b8:	bl	166e4 <__assert_fail@plt+0x5968>
   165bc:	cmp	r0, #0
   165c0:	popne	{r4, pc}
   165c4:	bl	166a4 <__assert_fail@plt+0x5928>
   165c8:	push	{r4, r5, r6, lr}
   165cc:	mov	r6, r0
   165d0:	mov	r0, r1
   165d4:	mov	r4, r1
   165d8:	bl	16884 <__assert_fail@plt+0x5b08>
   165dc:	subs	r5, r0, #0
   165e0:	beq	165f8 <__assert_fail@plt+0x587c>
   165e4:	mov	r2, r4
   165e8:	mov	r1, r6
   165ec:	bl	10bcc <memcpy@plt>
   165f0:	mov	r0, r5
   165f4:	pop	{r4, r5, r6, pc}
   165f8:	bl	166a4 <__assert_fail@plt+0x5928>
   165fc:	push	{r4, r5, r6, lr}
   16600:	mov	r6, r0
   16604:	mov	r0, r1
   16608:	mov	r4, r1
   1660c:	bl	16884 <__assert_fail@plt+0x5b08>
   16610:	subs	r5, r0, #0
   16614:	beq	1662c <__assert_fail@plt+0x58b0>
   16618:	mov	r2, r4
   1661c:	mov	r1, r6
   16620:	bl	10bcc <memcpy@plt>
   16624:	mov	r0, r5
   16628:	pop	{r4, r5, r6, pc}
   1662c:	bl	166a4 <__assert_fail@plt+0x5928>
   16630:	push	{r4, r5, r6, lr}
   16634:	mov	r6, r0
   16638:	add	r0, r1, #1
   1663c:	mov	r4, r1
   16640:	bl	16884 <__assert_fail@plt+0x5b08>
   16644:	subs	r5, r0, #0
   16648:	beq	16668 <__assert_fail@plt+0x58ec>
   1664c:	mov	r3, #0
   16650:	mov	r1, r6
   16654:	strb	r3, [r5, r4]
   16658:	mov	r2, r4
   1665c:	bl	10bcc <memcpy@plt>
   16660:	mov	r0, r5
   16664:	pop	{r4, r5, r6, pc}
   16668:	bl	166a4 <__assert_fail@plt+0x5928>
   1666c:	push	{r4, r5, r6, lr}
   16670:	mov	r6, r0
   16674:	bl	10cb0 <strlen@plt>
   16678:	add	r4, r0, #1
   1667c:	mov	r0, r4
   16680:	bl	16884 <__assert_fail@plt+0x5b08>
   16684:	subs	r5, r0, #0
   16688:	beq	166a0 <__assert_fail@plt+0x5924>
   1668c:	mov	r2, r4
   16690:	mov	r1, r6
   16694:	bl	10bcc <memcpy@plt>
   16698:	mov	r0, r5
   1669c:	pop	{r4, r5, r6, pc}
   166a0:	bl	166a4 <__assert_fail@plt+0x5928>
   166a4:	ldr	r3, [pc, #44]	; 166d8 <__assert_fail@plt+0x595c>
   166a8:	push	{r4, lr}
   166ac:	mov	r2, #5
   166b0:	ldr	r1, [pc, #36]	; 166dc <__assert_fail@plt+0x5960>
   166b4:	mov	r0, #0
   166b8:	ldr	r4, [r3]
   166bc:	bl	10bf0 <dcgettext@plt>
   166c0:	ldr	r2, [pc, #24]	; 166e0 <__assert_fail@plt+0x5964>
   166c4:	mov	r1, #0
   166c8:	mov	r3, r0
   166cc:	mov	r0, r4
   166d0:	bl	10c50 <error@plt>
   166d4:	bl	10d70 <abort@plt>
   166d8:	ldrdeq	r8, [r2], -r4
   166dc:	andeq	r7, r1, r8, asr r8
   166e0:	andeq	r7, r1, r4, lsr r4
   166e4:	cmp	r1, #0
   166e8:	cmpne	r0, #0
   166ec:	moveq	r1, #1
   166f0:	moveq	r0, r1
   166f4:	umull	r2, r3, r0, r1
   166f8:	adds	r3, r3, #0
   166fc:	movne	r3, #1
   16700:	cmp	r2, #0
   16704:	blt	16714 <__assert_fail@plt+0x5998>
   16708:	cmp	r3, #0
   1670c:	bne	16714 <__assert_fail@plt+0x5998>
   16710:	b	10b60 <calloc@plt>
   16714:	push	{r4, lr}
   16718:	bl	10cc8 <__errno_location@plt>
   1671c:	mov	r3, #12
   16720:	str	r3, [r0]
   16724:	mov	r0, #0
   16728:	pop	{r4, pc}
   1672c:	push	{r4, lr}
   16730:	subs	r4, r0, #0
   16734:	sub	sp, sp, #8
   16738:	beq	16754 <__assert_fail@plt+0x59d8>
   1673c:	bl	10c74 <__freading@plt>
   16740:	cmp	r0, #0
   16744:	beq	16754 <__assert_fail@plt+0x59d8>
   16748:	ldr	r3, [r4]
   1674c:	tst	r3, #256	; 0x100
   16750:	bne	16764 <__assert_fail@plt+0x59e8>
   16754:	mov	r0, r4
   16758:	add	sp, sp, #8
   1675c:	pop	{r4, lr}
   16760:	b	10b9c <fflush@plt>
   16764:	mov	r3, #1
   16768:	str	r3, [sp]
   1676c:	mov	r2, #0
   16770:	mov	r3, #0
   16774:	mov	r0, r4
   16778:	bl	167e4 <__assert_fail@plt+0x5a68>
   1677c:	mov	r0, r4
   16780:	add	sp, sp, #8
   16784:	pop	{r4, lr}
   16788:	b	10b9c <fflush@plt>
   1678c:	push	{r4, r5, lr}
   16790:	sub	sp, sp, #12
   16794:	mov	r5, r0
   16798:	bl	10cc8 <__errno_location@plt>
   1679c:	mov	r2, #0
   167a0:	mov	r4, r0
   167a4:	ldr	r3, [r0]
   167a8:	str	r2, [r4]
   167ac:	mov	r0, r5
   167b0:	str	r3, [sp]
   167b4:	str	r3, [sp, #4]
   167b8:	bl	10ba8 <free@plt>
   167bc:	ldr	r3, [r4]
   167c0:	add	r2, sp, #8
   167c4:	cmp	r3, #0
   167c8:	moveq	r3, #4
   167cc:	movne	r3, #0
   167d0:	add	r3, r2, r3
   167d4:	ldr	r3, [r3, #-8]
   167d8:	str	r3, [r4]
   167dc:	add	sp, sp, #12
   167e0:	pop	{r4, r5, pc}
   167e4:	push	{r4, r5, r6, r7, r8, lr}
   167e8:	sub	sp, sp, #8
   167ec:	ldmib	r0, {ip, lr}
   167f0:	mov	r4, r0
   167f4:	ldr	r5, [sp, #32]
   167f8:	cmp	lr, ip
   167fc:	beq	16814 <__assert_fail@plt+0x5a98>
   16800:	str	r5, [sp, #32]
   16804:	mov	r0, r4
   16808:	add	sp, sp, #8
   1680c:	pop	{r4, r5, r6, r7, r8, lr}
   16810:	b	10d04 <fseeko64@plt>
   16814:	ldr	lr, [r0, #20]
   16818:	ldr	ip, [r0, #16]
   1681c:	cmp	lr, ip
   16820:	bne	16800 <__assert_fail@plt+0x5a84>
   16824:	ldr	r8, [r0, #36]	; 0x24
   16828:	cmp	r8, #0
   1682c:	bne	16800 <__assert_fail@plt+0x5a84>
   16830:	mov	r6, r2
   16834:	mov	r7, r3
   16838:	bl	10cec <fileno@plt>
   1683c:	mov	r2, r6
   16840:	mov	r3, r7
   16844:	str	r5, [sp]
   16848:	bl	10c20 <lseek64@plt>
   1684c:	mvn	r3, #0
   16850:	mvn	r2, #0
   16854:	cmp	r1, r3
   16858:	cmpeq	r0, r2
   1685c:	beq	1687c <__assert_fail@plt+0x5b00>
   16860:	ldr	r3, [r4]
   16864:	strd	r0, [r4, #80]	; 0x50
   16868:	mov	r0, r8
   1686c:	bic	r3, r3, #16
   16870:	str	r3, [r4]
   16874:	add	sp, sp, #8
   16878:	pop	{r4, r5, r6, r7, r8, pc}
   1687c:	mvn	r0, #0
   16880:	b	16874 <__assert_fail@plt+0x5af8>
   16884:	cmp	r0, #0
   16888:	moveq	r0, #1
   1688c:	cmp	r0, #0
   16890:	blt	16898 <__assert_fail@plt+0x5b1c>
   16894:	b	10c5c <malloc@plt>
   16898:	push	{r4, lr}
   1689c:	bl	10cc8 <__errno_location@plt>
   168a0:	mov	r3, #12
   168a4:	str	r3, [r0]
   168a8:	mov	r0, #0
   168ac:	pop	{r4, pc}
   168b0:	push	{r4, r5, r6, r7, lr}
   168b4:	subs	r6, r0, #0
   168b8:	sub	sp, sp, #12
   168bc:	addeq	r6, sp, #4
   168c0:	mov	r0, r6
   168c4:	mov	r5, r2
   168c8:	mov	r7, r1
   168cc:	bl	10c44 <mbrtowc@plt>
   168d0:	cmp	r5, #0
   168d4:	cmnne	r0, #3
   168d8:	mov	r4, r0
   168dc:	bls	168f8 <__assert_fail@plt+0x5b7c>
   168e0:	mov	r0, #0
   168e4:	bl	16a2c <__assert_fail@plt+0x5cb0>
   168e8:	cmp	r0, #0
   168ec:	moveq	r4, #1
   168f0:	ldrbeq	r3, [r7]
   168f4:	streq	r3, [r6]
   168f8:	mov	r0, r4
   168fc:	add	sp, sp, #12
   16900:	pop	{r4, r5, r6, r7, pc}
   16904:	cmp	r0, #0
   16908:	beq	1692c <__assert_fail@plt+0x5bb0>
   1690c:	cmp	r1, #0
   16910:	push	{lr}		; (str lr, [sp, #-4]!)
   16914:	sub	sp, sp, #12
   16918:	beq	16934 <__assert_fail@plt+0x5bb8>
   1691c:	blt	1694c <__assert_fail@plt+0x5bd0>
   16920:	add	sp, sp, #12
   16924:	pop	{lr}		; (ldr lr, [sp], #4)
   16928:	b	10bfc <realloc@plt>
   1692c:	mov	r0, r1
   16930:	b	16884 <__assert_fail@plt+0x5b08>
   16934:	str	r1, [sp, #4]
   16938:	bl	1678c <__assert_fail@plt+0x5a10>
   1693c:	ldr	r3, [sp, #4]
   16940:	mov	r0, r3
   16944:	add	sp, sp, #12
   16948:	pop	{pc}		; (ldr pc, [sp], #4)
   1694c:	bl	10cc8 <__errno_location@plt>
   16950:	mov	r2, #12
   16954:	mov	r3, #0
   16958:	str	r2, [r0]
   1695c:	b	16940 <__assert_fail@plt+0x5bc4>
   16960:	push	{r4, r5, r6, lr}
   16964:	subs	r4, r2, #0
   16968:	mov	r6, r0
   1696c:	mov	r5, r1
   16970:	beq	1699c <__assert_fail@plt+0x5c20>
   16974:	mov	r1, r4
   16978:	mvn	r0, #0
   1697c:	bl	16b54 <__assert_fail@plt+0x5dd8>
   16980:	cmp	r0, r5
   16984:	bcs	1699c <__assert_fail@plt+0x5c20>
   16988:	bl	10cc8 <__errno_location@plt>
   1698c:	mov	r3, #12
   16990:	str	r3, [r0]
   16994:	mov	r0, #0
   16998:	pop	{r4, r5, r6, pc}
   1699c:	mul	r1, r5, r4
   169a0:	mov	r0, r6
   169a4:	pop	{r4, r5, r6, lr}
   169a8:	b	16904 <__assert_fail@plt+0x5b88>
   169ac:	push	{r4, r5, r6, lr}
   169b0:	mov	r4, r0
   169b4:	bl	10c38 <__fpending@plt>
   169b8:	mov	r6, r0
   169bc:	mov	r0, r4
   169c0:	bl	10bb4 <ferror@plt>
   169c4:	mov	r5, r0
   169c8:	mov	r0, r4
   169cc:	bl	10cf8 <fclose@plt>
   169d0:	cmp	r5, #0
   169d4:	mov	r4, r0
   169d8:	bne	169f8 <__assert_fail@plt+0x5c7c>
   169dc:	cmp	r0, #0
   169e0:	beq	169f0 <__assert_fail@plt+0x5c74>
   169e4:	cmp	r6, #0
   169e8:	beq	16a14 <__assert_fail@plt+0x5c98>
   169ec:	mvn	r4, #0
   169f0:	mov	r0, r4
   169f4:	pop	{r4, r5, r6, pc}
   169f8:	cmp	r0, #0
   169fc:	bne	169ec <__assert_fail@plt+0x5c70>
   16a00:	bl	10cc8 <__errno_location@plt>
   16a04:	str	r4, [r0]
   16a08:	mvn	r4, #0
   16a0c:	mov	r0, r4
   16a10:	pop	{r4, r5, r6, pc}
   16a14:	bl	10cc8 <__errno_location@plt>
   16a18:	ldr	r4, [r0]
   16a1c:	subs	r4, r4, #9
   16a20:	mvnne	r4, #0
   16a24:	mov	r0, r4
   16a28:	pop	{r4, r5, r6, pc}
   16a2c:	push	{lr}		; (str lr, [sp, #-4]!)
   16a30:	sub	sp, sp, #268	; 0x10c
   16a34:	add	r1, sp, #4
   16a38:	ldr	r2, [pc, #60]	; 16a7c <__assert_fail@plt+0x5d00>
   16a3c:	bl	16abc <__assert_fail@plt+0x5d40>
   16a40:	cmp	r0, #0
   16a44:	movne	r0, #0
   16a48:	bne	16a74 <__assert_fail@plt+0x5cf8>
   16a4c:	ldr	r1, [pc, #44]	; 16a80 <__assert_fail@plt+0x5d04>
   16a50:	add	r0, sp, #4
   16a54:	bl	10b78 <strcmp@plt>
   16a58:	cmp	r0, #0
   16a5c:	beq	16a74 <__assert_fail@plt+0x5cf8>
   16a60:	add	r0, sp, #4
   16a64:	ldr	r1, [pc, #24]	; 16a84 <__assert_fail@plt+0x5d08>
   16a68:	bl	10b78 <strcmp@plt>
   16a6c:	adds	r0, r0, #0
   16a70:	movne	r0, #1
   16a74:	add	sp, sp, #268	; 0x10c
   16a78:	pop	{pc}		; (ldr pc, [sp], #4)
   16a7c:	andeq	r0, r0, r1, lsl #2
   16a80:	andeq	r7, r1, ip, ror #16
   16a84:	andeq	r7, r1, r0, ror r8
   16a88:	push	{r4, lr}
   16a8c:	mov	r0, #14
   16a90:	bl	10d28 <nl_langinfo@plt>
   16a94:	cmp	r0, #0
   16a98:	beq	16ab0 <__assert_fail@plt+0x5d34>
   16a9c:	ldrb	r2, [r0]
   16aa0:	ldr	r3, [pc, #16]	; 16ab8 <__assert_fail@plt+0x5d3c>
   16aa4:	cmp	r2, #0
   16aa8:	moveq	r0, r3
   16aac:	pop	{r4, pc}
   16ab0:	ldr	r0, [pc]	; 16ab8 <__assert_fail@plt+0x5d3c>
   16ab4:	pop	{r4, pc}
   16ab8:	andeq	r7, r1, r8, ror r8
   16abc:	push	{r4, r5, r6, lr}
   16ac0:	mov	r5, r1
   16ac4:	mov	r1, #0
   16ac8:	mov	r4, r2
   16acc:	bl	10d10 <setlocale@plt>
   16ad0:	subs	r6, r0, #0
   16ad4:	beq	16b30 <__assert_fail@plt+0x5db4>
   16ad8:	bl	10cb0 <strlen@plt>
   16adc:	cmp	r4, r0
   16ae0:	bhi	16b18 <__assert_fail@plt+0x5d9c>
   16ae4:	cmp	r4, #0
   16ae8:	bne	16af4 <__assert_fail@plt+0x5d78>
   16aec:	mov	r0, #34	; 0x22
   16af0:	pop	{r4, r5, r6, pc}
   16af4:	sub	r4, r4, #1
   16af8:	mov	r1, r6
   16afc:	mov	r2, r4
   16b00:	mov	r0, r5
   16b04:	bl	10bcc <memcpy@plt>
   16b08:	mov	r3, #0
   16b0c:	strb	r3, [r5, r4]
   16b10:	mov	r0, #34	; 0x22
   16b14:	pop	{r4, r5, r6, pc}
   16b18:	add	r2, r0, #1
   16b1c:	mov	r1, r6
   16b20:	mov	r0, r5
   16b24:	bl	10bcc <memcpy@plt>
   16b28:	mov	r0, #0
   16b2c:	pop	{r4, r5, r6, pc}
   16b30:	cmp	r4, #0
   16b34:	beq	16b44 <__assert_fail@plt+0x5dc8>
   16b38:	strb	r6, [r5]
   16b3c:	mov	r0, #22
   16b40:	pop	{r4, r5, r6, pc}
   16b44:	mov	r0, #22
   16b48:	pop	{r4, r5, r6, pc}
   16b4c:	mov	r1, #0
   16b50:	b	10d10 <setlocale@plt>
   16b54:	subs	r2, r1, #1
   16b58:	bxeq	lr
   16b5c:	bcc	16d34 <__assert_fail@plt+0x5fb8>
   16b60:	cmp	r0, r1
   16b64:	bls	16d18 <__assert_fail@plt+0x5f9c>
   16b68:	tst	r1, r2
   16b6c:	beq	16d24 <__assert_fail@plt+0x5fa8>
   16b70:	clz	r3, r0
   16b74:	clz	r2, r1
   16b78:	sub	r3, r2, r3
   16b7c:	rsbs	r3, r3, #31
   16b80:	addne	r3, r3, r3, lsl #1
   16b84:	mov	r2, #0
   16b88:	addne	pc, pc, r3, lsl #2
   16b8c:	nop			; (mov r0, r0)
   16b90:	cmp	r0, r1, lsl #31
   16b94:	adc	r2, r2, r2
   16b98:	subcs	r0, r0, r1, lsl #31
   16b9c:	cmp	r0, r1, lsl #30
   16ba0:	adc	r2, r2, r2
   16ba4:	subcs	r0, r0, r1, lsl #30
   16ba8:	cmp	r0, r1, lsl #29
   16bac:	adc	r2, r2, r2
   16bb0:	subcs	r0, r0, r1, lsl #29
   16bb4:	cmp	r0, r1, lsl #28
   16bb8:	adc	r2, r2, r2
   16bbc:	subcs	r0, r0, r1, lsl #28
   16bc0:	cmp	r0, r1, lsl #27
   16bc4:	adc	r2, r2, r2
   16bc8:	subcs	r0, r0, r1, lsl #27
   16bcc:	cmp	r0, r1, lsl #26
   16bd0:	adc	r2, r2, r2
   16bd4:	subcs	r0, r0, r1, lsl #26
   16bd8:	cmp	r0, r1, lsl #25
   16bdc:	adc	r2, r2, r2
   16be0:	subcs	r0, r0, r1, lsl #25
   16be4:	cmp	r0, r1, lsl #24
   16be8:	adc	r2, r2, r2
   16bec:	subcs	r0, r0, r1, lsl #24
   16bf0:	cmp	r0, r1, lsl #23
   16bf4:	adc	r2, r2, r2
   16bf8:	subcs	r0, r0, r1, lsl #23
   16bfc:	cmp	r0, r1, lsl #22
   16c00:	adc	r2, r2, r2
   16c04:	subcs	r0, r0, r1, lsl #22
   16c08:	cmp	r0, r1, lsl #21
   16c0c:	adc	r2, r2, r2
   16c10:	subcs	r0, r0, r1, lsl #21
   16c14:	cmp	r0, r1, lsl #20
   16c18:	adc	r2, r2, r2
   16c1c:	subcs	r0, r0, r1, lsl #20
   16c20:	cmp	r0, r1, lsl #19
   16c24:	adc	r2, r2, r2
   16c28:	subcs	r0, r0, r1, lsl #19
   16c2c:	cmp	r0, r1, lsl #18
   16c30:	adc	r2, r2, r2
   16c34:	subcs	r0, r0, r1, lsl #18
   16c38:	cmp	r0, r1, lsl #17
   16c3c:	adc	r2, r2, r2
   16c40:	subcs	r0, r0, r1, lsl #17
   16c44:	cmp	r0, r1, lsl #16
   16c48:	adc	r2, r2, r2
   16c4c:	subcs	r0, r0, r1, lsl #16
   16c50:	cmp	r0, r1, lsl #15
   16c54:	adc	r2, r2, r2
   16c58:	subcs	r0, r0, r1, lsl #15
   16c5c:	cmp	r0, r1, lsl #14
   16c60:	adc	r2, r2, r2
   16c64:	subcs	r0, r0, r1, lsl #14
   16c68:	cmp	r0, r1, lsl #13
   16c6c:	adc	r2, r2, r2
   16c70:	subcs	r0, r0, r1, lsl #13
   16c74:	cmp	r0, r1, lsl #12
   16c78:	adc	r2, r2, r2
   16c7c:	subcs	r0, r0, r1, lsl #12
   16c80:	cmp	r0, r1, lsl #11
   16c84:	adc	r2, r2, r2
   16c88:	subcs	r0, r0, r1, lsl #11
   16c8c:	cmp	r0, r1, lsl #10
   16c90:	adc	r2, r2, r2
   16c94:	subcs	r0, r0, r1, lsl #10
   16c98:	cmp	r0, r1, lsl #9
   16c9c:	adc	r2, r2, r2
   16ca0:	subcs	r0, r0, r1, lsl #9
   16ca4:	cmp	r0, r1, lsl #8
   16ca8:	adc	r2, r2, r2
   16cac:	subcs	r0, r0, r1, lsl #8
   16cb0:	cmp	r0, r1, lsl #7
   16cb4:	adc	r2, r2, r2
   16cb8:	subcs	r0, r0, r1, lsl #7
   16cbc:	cmp	r0, r1, lsl #6
   16cc0:	adc	r2, r2, r2
   16cc4:	subcs	r0, r0, r1, lsl #6
   16cc8:	cmp	r0, r1, lsl #5
   16ccc:	adc	r2, r2, r2
   16cd0:	subcs	r0, r0, r1, lsl #5
   16cd4:	cmp	r0, r1, lsl #4
   16cd8:	adc	r2, r2, r2
   16cdc:	subcs	r0, r0, r1, lsl #4
   16ce0:	cmp	r0, r1, lsl #3
   16ce4:	adc	r2, r2, r2
   16ce8:	subcs	r0, r0, r1, lsl #3
   16cec:	cmp	r0, r1, lsl #2
   16cf0:	adc	r2, r2, r2
   16cf4:	subcs	r0, r0, r1, lsl #2
   16cf8:	cmp	r0, r1, lsl #1
   16cfc:	adc	r2, r2, r2
   16d00:	subcs	r0, r0, r1, lsl #1
   16d04:	cmp	r0, r1
   16d08:	adc	r2, r2, r2
   16d0c:	subcs	r0, r0, r1
   16d10:	mov	r0, r2
   16d14:	bx	lr
   16d18:	moveq	r0, #1
   16d1c:	movne	r0, #0
   16d20:	bx	lr
   16d24:	clz	r2, r1
   16d28:	rsb	r2, r2, #31
   16d2c:	lsr	r0, r0, r2
   16d30:	bx	lr
   16d34:	cmp	r0, #0
   16d38:	mvnne	r0, #0
   16d3c:	b	16fa0 <__assert_fail@plt+0x6224>
   16d40:	cmp	r1, #0
   16d44:	beq	16d34 <__assert_fail@plt+0x5fb8>
   16d48:	push	{r0, r1, lr}
   16d4c:	bl	16b54 <__assert_fail@plt+0x5dd8>
   16d50:	pop	{r1, r2, lr}
   16d54:	mul	r3, r2, r0
   16d58:	sub	r1, r1, r3
   16d5c:	bx	lr
   16d60:	cmp	r1, #0
   16d64:	beq	16f70 <__assert_fail@plt+0x61f4>
   16d68:	eor	ip, r0, r1
   16d6c:	rsbmi	r1, r1, #0
   16d70:	subs	r2, r1, #1
   16d74:	beq	16f3c <__assert_fail@plt+0x61c0>
   16d78:	movs	r3, r0
   16d7c:	rsbmi	r3, r0, #0
   16d80:	cmp	r3, r1
   16d84:	bls	16f48 <__assert_fail@plt+0x61cc>
   16d88:	tst	r1, r2
   16d8c:	beq	16f58 <__assert_fail@plt+0x61dc>
   16d90:	clz	r2, r3
   16d94:	clz	r0, r1
   16d98:	sub	r2, r0, r2
   16d9c:	rsbs	r2, r2, #31
   16da0:	addne	r2, r2, r2, lsl #1
   16da4:	mov	r0, #0
   16da8:	addne	pc, pc, r2, lsl #2
   16dac:	nop			; (mov r0, r0)
   16db0:	cmp	r3, r1, lsl #31
   16db4:	adc	r0, r0, r0
   16db8:	subcs	r3, r3, r1, lsl #31
   16dbc:	cmp	r3, r1, lsl #30
   16dc0:	adc	r0, r0, r0
   16dc4:	subcs	r3, r3, r1, lsl #30
   16dc8:	cmp	r3, r1, lsl #29
   16dcc:	adc	r0, r0, r0
   16dd0:	subcs	r3, r3, r1, lsl #29
   16dd4:	cmp	r3, r1, lsl #28
   16dd8:	adc	r0, r0, r0
   16ddc:	subcs	r3, r3, r1, lsl #28
   16de0:	cmp	r3, r1, lsl #27
   16de4:	adc	r0, r0, r0
   16de8:	subcs	r3, r3, r1, lsl #27
   16dec:	cmp	r3, r1, lsl #26
   16df0:	adc	r0, r0, r0
   16df4:	subcs	r3, r3, r1, lsl #26
   16df8:	cmp	r3, r1, lsl #25
   16dfc:	adc	r0, r0, r0
   16e00:	subcs	r3, r3, r1, lsl #25
   16e04:	cmp	r3, r1, lsl #24
   16e08:	adc	r0, r0, r0
   16e0c:	subcs	r3, r3, r1, lsl #24
   16e10:	cmp	r3, r1, lsl #23
   16e14:	adc	r0, r0, r0
   16e18:	subcs	r3, r3, r1, lsl #23
   16e1c:	cmp	r3, r1, lsl #22
   16e20:	adc	r0, r0, r0
   16e24:	subcs	r3, r3, r1, lsl #22
   16e28:	cmp	r3, r1, lsl #21
   16e2c:	adc	r0, r0, r0
   16e30:	subcs	r3, r3, r1, lsl #21
   16e34:	cmp	r3, r1, lsl #20
   16e38:	adc	r0, r0, r0
   16e3c:	subcs	r3, r3, r1, lsl #20
   16e40:	cmp	r3, r1, lsl #19
   16e44:	adc	r0, r0, r0
   16e48:	subcs	r3, r3, r1, lsl #19
   16e4c:	cmp	r3, r1, lsl #18
   16e50:	adc	r0, r0, r0
   16e54:	subcs	r3, r3, r1, lsl #18
   16e58:	cmp	r3, r1, lsl #17
   16e5c:	adc	r0, r0, r0
   16e60:	subcs	r3, r3, r1, lsl #17
   16e64:	cmp	r3, r1, lsl #16
   16e68:	adc	r0, r0, r0
   16e6c:	subcs	r3, r3, r1, lsl #16
   16e70:	cmp	r3, r1, lsl #15
   16e74:	adc	r0, r0, r0
   16e78:	subcs	r3, r3, r1, lsl #15
   16e7c:	cmp	r3, r1, lsl #14
   16e80:	adc	r0, r0, r0
   16e84:	subcs	r3, r3, r1, lsl #14
   16e88:	cmp	r3, r1, lsl #13
   16e8c:	adc	r0, r0, r0
   16e90:	subcs	r3, r3, r1, lsl #13
   16e94:	cmp	r3, r1, lsl #12
   16e98:	adc	r0, r0, r0
   16e9c:	subcs	r3, r3, r1, lsl #12
   16ea0:	cmp	r3, r1, lsl #11
   16ea4:	adc	r0, r0, r0
   16ea8:	subcs	r3, r3, r1, lsl #11
   16eac:	cmp	r3, r1, lsl #10
   16eb0:	adc	r0, r0, r0
   16eb4:	subcs	r3, r3, r1, lsl #10
   16eb8:	cmp	r3, r1, lsl #9
   16ebc:	adc	r0, r0, r0
   16ec0:	subcs	r3, r3, r1, lsl #9
   16ec4:	cmp	r3, r1, lsl #8
   16ec8:	adc	r0, r0, r0
   16ecc:	subcs	r3, r3, r1, lsl #8
   16ed0:	cmp	r3, r1, lsl #7
   16ed4:	adc	r0, r0, r0
   16ed8:	subcs	r3, r3, r1, lsl #7
   16edc:	cmp	r3, r1, lsl #6
   16ee0:	adc	r0, r0, r0
   16ee4:	subcs	r3, r3, r1, lsl #6
   16ee8:	cmp	r3, r1, lsl #5
   16eec:	adc	r0, r0, r0
   16ef0:	subcs	r3, r3, r1, lsl #5
   16ef4:	cmp	r3, r1, lsl #4
   16ef8:	adc	r0, r0, r0
   16efc:	subcs	r3, r3, r1, lsl #4
   16f00:	cmp	r3, r1, lsl #3
   16f04:	adc	r0, r0, r0
   16f08:	subcs	r3, r3, r1, lsl #3
   16f0c:	cmp	r3, r1, lsl #2
   16f10:	adc	r0, r0, r0
   16f14:	subcs	r3, r3, r1, lsl #2
   16f18:	cmp	r3, r1, lsl #1
   16f1c:	adc	r0, r0, r0
   16f20:	subcs	r3, r3, r1, lsl #1
   16f24:	cmp	r3, r1
   16f28:	adc	r0, r0, r0
   16f2c:	subcs	r3, r3, r1
   16f30:	cmp	ip, #0
   16f34:	rsbmi	r0, r0, #0
   16f38:	bx	lr
   16f3c:	teq	ip, r0
   16f40:	rsbmi	r0, r0, #0
   16f44:	bx	lr
   16f48:	movcc	r0, #0
   16f4c:	asreq	r0, ip, #31
   16f50:	orreq	r0, r0, #1
   16f54:	bx	lr
   16f58:	clz	r2, r1
   16f5c:	rsb	r2, r2, #31
   16f60:	cmp	ip, #0
   16f64:	lsr	r0, r3, r2
   16f68:	rsbmi	r0, r0, #0
   16f6c:	bx	lr
   16f70:	cmp	r0, #0
   16f74:	mvngt	r0, #-2147483648	; 0x80000000
   16f78:	movlt	r0, #-2147483648	; 0x80000000
   16f7c:	b	16fa0 <__assert_fail@plt+0x6224>
   16f80:	cmp	r1, #0
   16f84:	beq	16f70 <__assert_fail@plt+0x61f4>
   16f88:	push	{r0, r1, lr}
   16f8c:	bl	16d68 <__assert_fail@plt+0x5fec>
   16f90:	pop	{r1, r2, lr}
   16f94:	mul	r3, r2, r0
   16f98:	sub	r1, r1, r3
   16f9c:	bx	lr
   16fa0:	push	{r1, lr}
   16fa4:	mov	r0, #8
   16fa8:	bl	10b6c <raise@plt>
   16fac:	pop	{r1, pc}
   16fb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16fb4:	mov	r7, r0
   16fb8:	ldr	r6, [pc, #72]	; 17008 <__assert_fail@plt+0x628c>
   16fbc:	ldr	r5, [pc, #72]	; 1700c <__assert_fail@plt+0x6290>
   16fc0:	add	r6, pc, r6
   16fc4:	add	r5, pc, r5
   16fc8:	sub	r6, r6, r5
   16fcc:	mov	r8, r1
   16fd0:	mov	r9, r2
   16fd4:	bl	10b40 <calloc@plt-0x20>
   16fd8:	asrs	r6, r6, #2
   16fdc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fe0:	mov	r4, #0
   16fe4:	add	r4, r4, #1
   16fe8:	ldr	r3, [r5], #4
   16fec:	mov	r2, r9
   16ff0:	mov	r1, r8
   16ff4:	mov	r0, r7
   16ff8:	blx	r3
   16ffc:	cmp	r6, r4
   17000:	bne	16fe4 <__assert_fail@plt+0x6268>
   17004:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17008:	andeq	r0, r1, r8, asr #30
   1700c:	andeq	r0, r1, r0, asr #30
   17010:	bx	lr
   17014:	ldr	r3, [pc, #12]	; 17028 <__assert_fail@plt+0x62ac>
   17018:	mov	r1, #0
   1701c:	add	r3, pc, r3
   17020:	ldr	r2, [r3]
   17024:	b	10cd4 <__cxa_atexit@plt>
   17028:	andeq	r1, r1, r8, lsr #1

Disassembly of section .fini:

0001702c <.fini>:
   1702c:	push	{r3, lr}
   17030:	pop	{r3, pc}
