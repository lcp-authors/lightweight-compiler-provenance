
../repos/inetutils/ping/ping:     file format elf32-littlearm


Disassembly of section .init:

000110e0 <.init>:
   110e0:	push	{r3, lr}
   110e4:	bl	11754 <__assert_fail@plt+0x2e8>
   110e8:	pop	{r3, pc}

Disassembly of section .plt:

000110ec <calloc@plt-0x14>:
   110ec:	push	{lr}		; (str lr, [sp, #-4]!)
   110f0:	ldr	lr, [pc, #4]	; 110fc <calloc@plt-0x4>
   110f4:	add	lr, pc, lr
   110f8:	ldr	pc, [lr, #8]!
   110fc:	andeq	pc, r1, r4, lsl #30

00011100 <calloc@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #126976	; 0x1f000
   11108:	ldr	pc, [ip, #3844]!	; 0xf04

0001110c <fputs_unlocked@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #126976	; 0x1f000
   11114:	ldr	pc, [ip, #3836]!	; 0xefc

00011118 <raise@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #126976	; 0x1f000
   11120:	ldr	pc, [ip, #3828]!	; 0xef4

00011124 <strcmp@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #126976	; 0x1f000
   1112c:	ldr	pc, [ip, #3820]!	; 0xeec

00011130 <strtol@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #126976	; 0x1f000
   11138:	ldr	pc, [ip, #3812]!	; 0xee4

0001113c <setsockopt@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #126976	; 0x1f000
   11144:	ldr	pc, [ip, #3804]!	; 0xedc

00011148 <printf@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #126976	; 0x1f000
   11150:	ldr	pc, [ip, #3796]!	; 0xed4

00011154 <getprotobyname@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #126976	; 0x1f000
   1115c:	ldr	pc, [ip, #3788]!	; 0xecc

00011160 <fflush@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #126976	; 0x1f000
   11168:	ldr	pc, [ip, #3780]!	; 0xec4

0001116c <getuid@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #126976	; 0x1f000
   11174:	ldr	pc, [ip, #3772]!	; 0xebc

00011178 <memmove@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #126976	; 0x1f000
   11180:	ldr	pc, [ip, #3764]!	; 0xeb4

00011184 <strchrnul@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #126976	; 0x1f000
   1118c:	ldr	pc, [ip, #3756]!	; 0xeac

00011190 <free@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #126976	; 0x1f000
   11198:	ldr	pc, [ip, #3748]!	; 0xea4

0001119c <gai_strerror@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #126976	; 0x1f000
   111a4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111a8 <strndup@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #126976	; 0x1f000
   111b0:	ldr	pc, [ip, #3732]!	; 0xe94

000111b4 <memcpy@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #126976	; 0x1f000
   111bc:	ldr	pc, [ip, #3724]!	; 0xe8c

000111c0 <signal@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #126976	; 0x1f000
   111c8:	ldr	pc, [ip, #3716]!	; 0xe84

000111cc <fwrite_unlocked@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #126976	; 0x1f000
   111d4:	ldr	pc, [ip, #3708]!	; 0xe7c

000111d8 <memcmp@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #126976	; 0x1f000
   111e0:	ldr	pc, [ip, #3700]!	; 0xe74

000111e4 <inet_ntoa@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #126976	; 0x1f000
   111ec:	ldr	pc, [ip, #3692]!	; 0xe6c

000111f0 <select@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #126976	; 0x1f000
   111f8:	ldr	pc, [ip, #3684]!	; 0xe64

000111fc <sleep@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #126976	; 0x1f000
   11204:	ldr	pc, [ip, #3676]!	; 0xe5c

00011208 <gethostbyaddr@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #126976	; 0x1f000
   11210:	ldr	pc, [ip, #3668]!	; 0xe54

00011214 <recvfrom@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #126976	; 0x1f000
   1121c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011220 <strdup@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #126976	; 0x1f000
   11228:	ldr	pc, [ip, #3652]!	; 0xe44

0001122c <realloc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #126976	; 0x1f000
   11234:	ldr	pc, [ip, #3644]!	; 0xe3c

00011238 <strcasecmp@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #126976	; 0x1f000
   11240:	ldr	pc, [ip, #3636]!	; 0xe34

00011244 <funlockfile@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #126976	; 0x1f000
   1124c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011250 <fwrite@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #126976	; 0x1f000
   11258:	ldr	pc, [ip, #3620]!	; 0xe24

0001125c <gettimeofday@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #126976	; 0x1f000
   11264:	ldr	pc, [ip, #3612]!	; 0xe1c

00011268 <error@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #126976	; 0x1f000
   11270:	ldr	pc, [ip, #3604]!	; 0xe14

00011274 <getenv@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #126976	; 0x1f000
   1127c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011280 <puts@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #126976	; 0x1f000
   11288:	ldr	pc, [ip, #3588]!	; 0xe04

0001128c <malloc@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #126976	; 0x1f000
   11294:	ldr	pc, [ip, #3580]!	; 0xdfc

00011298 <__libc_start_main@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #126976	; 0x1f000
   112a0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112a4 <strerror@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #126976	; 0x1f000
   112ac:	ldr	pc, [ip, #3564]!	; 0xdec

000112b0 <__ctype_tolower_loc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #126976	; 0x1f000
   112b8:	ldr	pc, [ip, #3556]!	; 0xde4

000112bc <__gmon_start__@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #126976	; 0x1f000
   112c4:	ldr	pc, [ip, #3548]!	; 0xddc

000112c8 <mempcpy@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #126976	; 0x1f000
   112d0:	ldr	pc, [ip, #3540]!	; 0xdd4

000112d4 <__ctype_b_loc@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #126976	; 0x1f000
   112dc:	ldr	pc, [ip, #3532]!	; 0xdcc

000112e0 <getpid@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #126976	; 0x1f000
   112e8:	ldr	pc, [ip, #3524]!	; 0xdc4

000112ec <exit@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #126976	; 0x1f000
   112f4:	ldr	pc, [ip, #3516]!	; 0xdbc

000112f8 <strtoul@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #126976	; 0x1f000
   11300:	ldr	pc, [ip, #3508]!	; 0xdb4

00011304 <strlen@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #126976	; 0x1f000
   1130c:	ldr	pc, [ip, #3500]!	; 0xdac

00011310 <strchr@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #126976	; 0x1f000
   11318:	ldr	pc, [ip, #3492]!	; 0xda4

0001131c <fprintf@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #126976	; 0x1f000
   11324:	ldr	pc, [ip, #3484]!	; 0xd9c

00011328 <__errno_location@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #126976	; 0x1f000
   11330:	ldr	pc, [ip, #3476]!	; 0xd94

00011334 <snprintf@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #126976	; 0x1f000
   1133c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011340 <strerror_r@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #126976	; 0x1f000
   11348:	ldr	pc, [ip, #3460]!	; 0xd84

0001134c <setvbuf@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #126976	; 0x1f000
   11354:	ldr	pc, [ip, #3452]!	; 0xd7c

00011358 <memset@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #126976	; 0x1f000
   11360:	ldr	pc, [ip, #3444]!	; 0xd74

00011364 <putchar@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #126976	; 0x1f000
   1136c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011370 <strtod@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #126976	; 0x1f000
   11378:	ldr	pc, [ip, #3428]!	; 0xd64

0001137c <memchr@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #126976	; 0x1f000
   11384:	ldr	pc, [ip, #3420]!	; 0xd5c

00011388 <sendto@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #126976	; 0x1f000
   11390:	ldr	pc, [ip, #3412]!	; 0xd54

00011394 <__overflow@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #126976	; 0x1f000
   1139c:	ldr	pc, [ip, #3404]!	; 0xd4c

000113a0 <setlocale@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #126976	; 0x1f000
   113a8:	ldr	pc, [ip, #3396]!	; 0xd44

000113ac <getnameinfo@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #126976	; 0x1f000
   113b4:	ldr	pc, [ip, #3388]!	; 0xd3c

000113b8 <strrchr@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #126976	; 0x1f000
   113c0:	ldr	pc, [ip, #3380]!	; 0xd34

000113c4 <vfprintf@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #126976	; 0x1f000
   113cc:	ldr	pc, [ip, #3372]!	; 0xd2c

000113d0 <fputc@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #126976	; 0x1f000
   113d8:	ldr	pc, [ip, #3364]!	; 0xd24

000113dc <setuid@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #126976	; 0x1f000
   113e4:	ldr	pc, [ip, #3356]!	; 0xd1c

000113e8 <sscanf@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #126976	; 0x1f000
   113f0:	ldr	pc, [ip, #3348]!	; 0xd14

000113f4 <putc@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #126976	; 0x1f000
   113fc:	ldr	pc, [ip, #3340]!	; 0xd0c

00011400 <flockfile@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #126976	; 0x1f000
   11408:	ldr	pc, [ip, #3332]!	; 0xd04

0001140c <vsnprintf@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #126976	; 0x1f000
   11414:	ldr	pc, [ip, #3324]!	; 0xcfc

00011418 <qsort@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #126976	; 0x1f000
   11420:	ldr	pc, [ip, #3316]!	; 0xcf4

00011424 <freeaddrinfo@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #126976	; 0x1f000
   1142c:	ldr	pc, [ip, #3308]!	; 0xcec

00011430 <getaddrinfo@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #126976	; 0x1f000
   11438:	ldr	pc, [ip, #3300]!	; 0xce4

0001143c <socket@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #126976	; 0x1f000
   11444:	ldr	pc, [ip, #3292]!	; 0xcdc

00011448 <strncmp@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #126976	; 0x1f000
   11450:	ldr	pc, [ip, #3284]!	; 0xcd4

00011454 <abort@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #126976	; 0x1f000
   1145c:	ldr	pc, [ip, #3276]!	; 0xccc

00011460 <close@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #126976	; 0x1f000
   11468:	ldr	pc, [ip, #3268]!	; 0xcc4

0001146c <__assert_fail@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #126976	; 0x1f000
   11474:	ldr	pc, [ip, #3260]!	; 0xcbc

Disassembly of section .text:

00011478 <argp_failure@@Base-0x6048>:
   11478:	push	{r4, r5, r6, r7, r8, lr}
   1147c:	sub	sp, sp, #16
   11480:	mov	r5, r0
   11484:	mov	r6, #1
   11488:	ldr	r0, [r1]
   1148c:	mov	r4, r1
   11490:	str	r6, [sp, #12]
   11494:	bl	1aa94 <argp_parse@@Base+0x1084>
   11498:	ldr	r1, [pc, #556]	; 116cc <__assert_fail@plt+0x260>
   1149c:	mov	r0, #6
   114a0:	bl	113a0 <setlocale@plt>
   114a4:	bl	1116c <getuid@plt>
   114a8:	ldr	r2, [pc, #544]	; 116d0 <__assert_fail@plt+0x264>
   114ac:	ldr	r1, [pc, #544]	; 116d4 <__assert_fail@plt+0x268>
   114b0:	ldr	r8, [pc, #544]	; 116d8 <__assert_fail@plt+0x26c>
   114b4:	cmp	r0, #0
   114b8:	ldr	r0, [pc, #540]	; 116dc <__assert_fail@plt+0x270>
   114bc:	ldreq	r3, [pc, #540]	; 116e0 <__assert_fail@plt+0x274>
   114c0:	strbeq	r6, [r3, #8]
   114c4:	ldr	r3, [pc, #536]	; 116e4 <__assert_fail@plt+0x278>
   114c8:	str	r2, [r3]
   114cc:	bl	1a8b8 <argp_parse@@Base+0xea8>
   114d0:	mov	r3, #0
   114d4:	add	r2, sp, #8
   114d8:	mov	r1, r5
   114dc:	stm	sp, {r2, r3}
   114e0:	ldr	r0, [pc, #512]	; 116e8 <__assert_fail@plt+0x27c>
   114e4:	mov	r2, r4
   114e8:	bl	19a10 <argp_parse@@Base>
   114ec:	bl	112e0 <getpid@plt>
   114f0:	mov	r1, r0
   114f4:	mov	r0, #8
   114f8:	bl	140f4 <__assert_fail@plt+0x2c88>
   114fc:	cmp	r0, #0
   11500:	str	r0, [r8]
   11504:	beq	116c4 <__assert_fail@plt+0x258>
   11508:	add	r2, sp, #12
   1150c:	mov	r3, #4
   11510:	mov	r1, #6
   11514:	bl	1299c <__assert_fail@plt+0x1530>
   11518:	bl	1116c <getuid@plt>
   1151c:	bl	113dc <setuid@plt>
   11520:	cmp	r0, #0
   11524:	bne	1167c <__assert_fail@plt+0x210>
   11528:	ldr	r2, [pc, #444]	; 116ec <__assert_fail@plt+0x280>
   1152c:	ldr	r7, [pc, #428]	; 116e0 <__assert_fail@plt+0x274>
   11530:	mov	r3, #0
   11534:	ldr	r0, [r2]
   11538:	mov	r1, r3
   1153c:	mov	r2, #1
   11540:	bl	1134c <setvbuf@plt>
   11544:	ldr	r6, [sp, #8]
   11548:	ldr	r1, [r7, #4]
   1154c:	sub	r5, r5, r6
   11550:	cmp	r1, #0
   11554:	add	r6, r4, r6, lsl #2
   11558:	bne	11670 <__assert_fail@plt+0x204>
   1155c:	ldr	r3, [pc, #396]	; 116f0 <__assert_fail@plt+0x284>
   11560:	ldr	r1, [r3]
   11564:	cmp	r1, #0
   11568:	bne	1165c <__assert_fail@plt+0x1f0>
   1156c:	ldr	r3, [pc, #384]	; 116f4 <__assert_fail@plt+0x288>
   11570:	ldr	r3, [r3]
   11574:	tst	r3, #2
   11578:	bne	11648 <__assert_fail@plt+0x1dc>
   1157c:	ldr	r3, [r7, #32]
   11580:	cmp	r3, #0
   11584:	ble	115b0 <__assert_fail@plt+0x144>
   11588:	ldr	r2, [r8]
   1158c:	mov	r3, #4
   11590:	str	r3, [sp]
   11594:	mov	r1, #0
   11598:	ldr	r0, [r2]
   1159c:	ldr	r3, [pc, #340]	; 116f8 <__assert_fail@plt+0x28c>
   115a0:	mov	r2, #2
   115a4:	bl	1113c <setsockopt@plt>
   115a8:	cmp	r0, #0
   115ac:	blt	116ac <__assert_fail@plt+0x240>
   115b0:	ldr	r7, [pc, #324]	; 116fc <__assert_fail@plt+0x290>
   115b4:	ldr	r3, [r7, #8]
   115b8:	cmp	r3, #0
   115bc:	blt	115e8 <__assert_fail@plt+0x17c>
   115c0:	ldr	r2, [r8]
   115c4:	mov	r3, #4
   115c8:	str	r3, [sp]
   115cc:	mov	r1, #0
   115d0:	ldr	r0, [r2]
   115d4:	add	r3, r7, #8
   115d8:	mov	r2, #1
   115dc:	bl	1113c <setsockopt@plt>
   115e0:	cmp	r0, #0
   115e4:	blt	11694 <__assert_fail@plt+0x228>
   115e8:	ldr	r3, [pc, #272]	; 11700 <__assert_fail@plt+0x294>
   115ec:	ldr	r1, [r7, #4]
   115f0:	ldr	r0, [r3]
   115f4:	bl	12624 <__assert_fail@plt+0x11b8>
   115f8:	cmp	r5, #0
   115fc:	beq	11628 <__assert_fail@plt+0x1bc>
   11600:	mov	r4, r5
   11604:	mov	r5, #0
   11608:	ldr	r3, [r7, #20]
   1160c:	ldr	r0, [r6], #4
   11610:	blx	r3
   11614:	orr	r5, r5, r0
   11618:	ldr	r0, [r8]
   1161c:	bl	1427c <__assert_fail@plt+0x2e10>
   11620:	subs	r4, r4, #1
   11624:	bne	11608 <__assert_fail@plt+0x19c>
   11628:	ldr	r0, [r8]
   1162c:	bl	1a98c <argp_parse@@Base+0xf7c>
   11630:	ldr	r3, [pc, #204]	; 11704 <__assert_fail@plt+0x298>
   11634:	ldr	r0, [r3]
   11638:	bl	1a98c <argp_parse@@Base+0xf7c>
   1163c:	mov	r0, r5
   11640:	add	sp, sp, #16
   11644:	pop	{r4, r5, r6, r7, r8, pc}
   11648:	ldr	r3, [pc, #184]	; 11708 <__assert_fail@plt+0x29c>
   1164c:	ldr	r0, [r8]
   11650:	ldr	r1, [r3]
   11654:	bl	129cc <__assert_fail@plt+0x1560>
   11658:	b	1157c <__assert_fail@plt+0x110>
   1165c:	add	r2, sp, #12
   11660:	mov	r3, #4
   11664:	ldr	r0, [r8]
   11668:	bl	1299c <__assert_fail@plt+0x1530>
   1166c:	b	1156c <__assert_fail@plt+0x100>
   11670:	ldr	r0, [r8]
   11674:	bl	12994 <__assert_fail@plt+0x1528>
   11678:	b	1155c <__assert_fail@plt+0xf0>
   1167c:	bl	11328 <__errno_location@plt>
   11680:	ldr	r2, [pc, #132]	; 1170c <__assert_fail@plt+0x2a0>
   11684:	ldr	r1, [r0]
   11688:	mov	r0, #1
   1168c:	bl	11268 <error@plt>
   11690:	b	11528 <__assert_fail@plt+0xbc>
   11694:	bl	11328 <__errno_location@plt>
   11698:	ldr	r2, [pc, #112]	; 11710 <__assert_fail@plt+0x2a4>
   1169c:	ldr	r1, [r0]
   116a0:	mov	r0, #0
   116a4:	bl	11268 <error@plt>
   116a8:	b	115e8 <__assert_fail@plt+0x17c>
   116ac:	bl	11328 <__errno_location@plt>
   116b0:	ldr	r2, [pc, #92]	; 11714 <__assert_fail@plt+0x2a8>
   116b4:	ldr	r1, [r0]
   116b8:	mov	r0, #0
   116bc:	bl	11268 <error@plt>
   116c0:	b	115b0 <__assert_fail@plt+0x144>
   116c4:	mov	r0, #1
   116c8:	bl	112ec <exit@plt>
   116cc:	andeq	pc, r1, r4, asr #30
   116d0:	ldrdeq	lr, [r1], -r0
   116d4:	andeq	r1, r3, r8, asr r1
   116d8:	ldrdeq	r1, [r3], -r0
   116dc:	andeq	lr, r1, r8, ror #13
   116e0:	andeq	r1, r3, r4, lsr r6
   116e4:	ldrdeq	r1, [r3], -ip
   116e8:	andeq	r1, r3, r0, ror #2
   116ec:	andeq	r1, r3, ip, lsr #12
   116f0:	andeq	r1, r3, ip, asr #13
   116f4:	andeq	r1, r3, r8, asr #13
   116f8:	andeq	r1, r3, r4, asr r6
   116fc:	andeq	r1, r3, r0, asr #2
   11700:	andeq	r1, r3, r0, asr #13
   11704:	andeq	r1, r3, r4, asr #13
   11708:	ldrdeq	r1, [r3], -r8
   1170c:	strdeq	lr, [r1], -r0
   11710:	andeq	lr, r1, ip, lsl #14
   11714:	strdeq	lr, [r1], -r8
   11718:	mov	fp, #0
   1171c:	mov	lr, #0
   11720:	pop	{r1}		; (ldr r1, [sp], #4)
   11724:	mov	r2, sp
   11728:	push	{r2}		; (str r2, [sp, #-4]!)
   1172c:	push	{r0}		; (str r0, [sp, #-4]!)
   11730:	ldr	ip, [pc, #16]	; 11748 <__assert_fail@plt+0x2dc>
   11734:	push	{ip}		; (str ip, [sp, #-4]!)
   11738:	ldr	r0, [pc, #12]	; 1174c <__assert_fail@plt+0x2e0>
   1173c:	ldr	r3, [pc, #12]	; 11750 <__assert_fail@plt+0x2e4>
   11740:	bl	11298 <__libc_start_main@plt>
   11744:	bl	11454 <abort@plt>
   11748:	andeq	lr, r1, r8, asr r5
   1174c:	andeq	r1, r1, r8, ror r4
   11750:	strdeq	lr, [r1], -r8
   11754:	ldr	r3, [pc, #20]	; 11770 <__assert_fail@plt+0x304>
   11758:	ldr	r2, [pc, #20]	; 11774 <__assert_fail@plt+0x308>
   1175c:	add	r3, pc, r3
   11760:	ldr	r2, [r3, r2]
   11764:	cmp	r2, #0
   11768:	bxeq	lr
   1176c:	b	112bc <__gmon_start__@plt>
   11770:	muleq	r1, ip, r8
   11774:	andeq	r0, r0, r4, lsr r1
   11778:	ldr	r3, [pc, #28]	; 1179c <__assert_fail@plt+0x330>
   1177c:	ldr	r0, [pc, #28]	; 117a0 <__assert_fail@plt+0x334>
   11780:	sub	r3, r3, r0
   11784:	cmp	r3, #6
   11788:	bxls	lr
   1178c:	ldr	r3, [pc, #16]	; 117a4 <__assert_fail@plt+0x338>
   11790:	cmp	r3, #0
   11794:	bxeq	lr
   11798:	bx	r3
   1179c:	andeq	r1, r3, r3, lsr #12
   117a0:	andeq	r1, r3, r0, lsr #12
   117a4:	andeq	r0, r0, r0
   117a8:	ldr	r1, [pc, #36]	; 117d4 <__assert_fail@plt+0x368>
   117ac:	ldr	r0, [pc, #36]	; 117d8 <__assert_fail@plt+0x36c>
   117b0:	sub	r1, r1, r0
   117b4:	asr	r1, r1, #2
   117b8:	add	r1, r1, r1, lsr #31
   117bc:	asrs	r1, r1, #1
   117c0:	bxeq	lr
   117c4:	ldr	r3, [pc, #16]	; 117dc <__assert_fail@plt+0x370>
   117c8:	cmp	r3, #0
   117cc:	bxeq	lr
   117d0:	bx	r3
   117d4:	andeq	r1, r3, r0, lsr #12
   117d8:	andeq	r1, r3, r0, lsr #12
   117dc:	andeq	r0, r0, r0
   117e0:	push	{r4, lr}
   117e4:	ldr	r4, [pc, #24]	; 11804 <__assert_fail@plt+0x398>
   117e8:	ldrb	r3, [r4]
   117ec:	cmp	r3, #0
   117f0:	popne	{r4, pc}
   117f4:	bl	11778 <__assert_fail@plt+0x30c>
   117f8:	mov	r3, #1
   117fc:	strb	r3, [r4]
   11800:	pop	{r4, pc}
   11804:	andeq	r1, r3, r0, lsr r6
   11808:	ldr	r0, [pc, #40]	; 11838 <__assert_fail@plt+0x3cc>
   1180c:	ldr	r3, [r0]
   11810:	cmp	r3, #0
   11814:	bne	1181c <__assert_fail@plt+0x3b0>
   11818:	b	117a8 <__assert_fail@plt+0x33c>
   1181c:	ldr	r3, [pc, #24]	; 1183c <__assert_fail@plt+0x3d0>
   11820:	cmp	r3, #0
   11824:	beq	11818 <__assert_fail@plt+0x3ac>
   11828:	push	{r4, lr}
   1182c:	blx	r3
   11830:	pop	{r4, lr}
   11834:	b	117a8 <__assert_fail@plt+0x33c>
   11838:	andeq	r0, r3, r4, lsl pc
   1183c:	andeq	r0, r0, r0
   11840:	ldr	r3, [pc, #8]	; 11850 <__assert_fail@plt+0x3e4>
   11844:	mov	r2, #1
   11848:	str	r2, [r3]
   1184c:	bx	lr
   11850:	andeq	r1, r3, r4, lsr r6
   11854:	cmp	r0, #114	; 0x72
   11858:	beq	11df8 <__assert_fail@plt+0x98c>
   1185c:	push	{r4, r5, lr}
   11860:	vpush	{d8}
   11864:	mov	r4, r1
   11868:	sub	sp, sp, #20
   1186c:	bgt	118b8 <__assert_fail@plt+0x44c>
   11870:	cmp	r0, #102	; 0x66
   11874:	beq	11d88 <__assert_fail@plt+0x91c>
   11878:	bgt	11950 <__assert_fail@plt+0x4e4>
   1187c:	cmp	r0, #87	; 0x57
   11880:	beq	11d00 <__assert_fail@plt+0x894>
   11884:	bgt	11af8 <__assert_fail@plt+0x68c>
   11888:	cmp	r0, #82	; 0x52
   1188c:	beq	11c40 <__assert_fail@plt+0x7d4>
   11890:	cmp	r0, #84	; 0x54
   11894:	bne	11d80 <__assert_fail@plt+0x914>
   11898:	mov	r0, r1
   1189c:	mov	r2, #1
   118a0:	mov	r1, #255	; 0xff
   118a4:	bl	12578 <__assert_fail@plt+0x110c>
   118a8:	ldr	r2, [pc, #1464]	; 11e68 <__assert_fail@plt+0x9fc>
   118ac:	mov	r3, #0
   118b0:	str	r0, [r2, #8]
   118b4:	b	11b1c <__assert_fail@plt+0x6b0>
   118b8:	ldr	r3, [pc, #1452]	; 11e6c <__assert_fail@plt+0xa00>
   118bc:	cmp	r0, r3
   118c0:	beq	11da0 <__assert_fail@plt+0x934>
   118c4:	bgt	119a4 <__assert_fail@plt+0x538>
   118c8:	cmp	r0, #118	; 0x76
   118cc:	beq	11d38 <__assert_fail@plt+0x8cc>
   118d0:	bgt	11a20 <__assert_fail@plt+0x5b4>
   118d4:	cmp	r0, #115	; 0x73
   118d8:	beq	11c58 <__assert_fail@plt+0x7ec>
   118dc:	cmp	r0, #116	; 0x74
   118e0:	bne	11d80 <__assert_fail@plt+0x914>
   118e4:	ldr	r1, [pc, #1412]	; 11e70 <__assert_fail@plt+0xa04>
   118e8:	mov	r0, r4
   118ec:	bl	11238 <strcasecmp@plt>
   118f0:	cmp	r0, #0
   118f4:	beq	11d70 <__assert_fail@plt+0x904>
   118f8:	ldr	r1, [pc, #1396]	; 11e74 <__assert_fail@plt+0xa08>
   118fc:	mov	r0, r4
   11900:	bl	11238 <strcasecmp@plt>
   11904:	cmp	r0, #0
   11908:	beq	11d78 <__assert_fail@plt+0x90c>
   1190c:	ldr	r1, [pc, #1380]	; 11e78 <__assert_fail@plt+0xa0c>
   11910:	mov	r0, r4
   11914:	bl	11238 <strcasecmp@plt>
   11918:	cmp	r0, #0
   1191c:	beq	11a84 <__assert_fail@plt+0x618>
   11920:	ldr	r1, [pc, #1364]	; 11e7c <__assert_fail@plt+0xa10>
   11924:	mov	r0, r4
   11928:	bl	11238 <strcasecmp@plt>
   1192c:	cmp	r0, #0
   11930:	movne	r3, r4
   11934:	beq	11a84 <__assert_fail@plt+0x618>
   11938:	mov	r1, #0
   1193c:	ldr	r2, [pc, #1340]	; 11e80 <__assert_fail@plt+0xa14>
   11940:	mov	r0, #1
   11944:	bl	11268 <error@plt>
   11948:	mov	r1, #0
   1194c:	b	11a88 <__assert_fail@plt+0x61c>
   11950:	cmp	r0, #110	; 0x6e
   11954:	beq	11d20 <__assert_fail@plt+0x8b4>
   11958:	bgt	11aa4 <__assert_fail@plt+0x638>
   1195c:	cmp	r0, #105	; 0x69
   11960:	beq	11c78 <__assert_fail@plt+0x80c>
   11964:	cmp	r0, #108	; 0x6c
   11968:	bne	11d80 <__assert_fail@plt+0x914>
   1196c:	mov	r2, #0
   11970:	add	r1, sp, #12
   11974:	mov	r0, r4
   11978:	bl	112f8 <strtoul@plt>
   1197c:	ldr	r2, [pc, #1280]	; 11e84 <__assert_fail@plt+0xa18>
   11980:	ldr	r3, [sp, #12]
   11984:	str	r0, [r2, #28]
   11988:	ldrb	r3, [r3]
   1198c:	cmp	r3, #0
   11990:	bne	11e14 <__assert_fail@plt+0x9a8>
   11994:	cmp	r0, #0
   11998:	blt	11e14 <__assert_fail@plt+0x9a8>
   1199c:	mov	r3, #0
   119a0:	b	11b1c <__assert_fail@plt+0x6b0>
   119a4:	cmp	r0, #260	; 0x104
   119a8:	beq	11d50 <__assert_fail@plt+0x8e4>
   119ac:	bgt	11acc <__assert_fail@plt+0x660>
   119b0:	ldr	r3, [pc, #1232]	; 11e88 <__assert_fail@plt+0xa1c>
   119b4:	cmp	r0, r3
   119b8:	beq	11be8 <__assert_fail@plt+0x77c>
   119bc:	add	r3, r3, #1
   119c0:	cmp	r0, r3
   119c4:	bne	11d80 <__assert_fail@plt+0x914>
   119c8:	ldr	r1, [pc, #1184]	; 11e70 <__assert_fail@plt+0xa04>
   119cc:	ldr	r0, [pc, #1208]	; 11e8c <__assert_fail@plt+0xa20>
   119d0:	bl	11238 <strcasecmp@plt>
   119d4:	cmp	r0, #0
   119d8:	beq	11d70 <__assert_fail@plt+0x904>
   119dc:	ldr	r1, [pc, #1168]	; 11e74 <__assert_fail@plt+0xa08>
   119e0:	ldr	r0, [pc, #1188]	; 11e8c <__assert_fail@plt+0xa20>
   119e4:	bl	11238 <strcasecmp@plt>
   119e8:	cmp	r0, #0
   119ec:	beq	11d78 <__assert_fail@plt+0x90c>
   119f0:	ldr	r1, [pc, #1152]	; 11e78 <__assert_fail@plt+0xa0c>
   119f4:	ldr	r0, [pc, #1168]	; 11e8c <__assert_fail@plt+0xa20>
   119f8:	bl	11238 <strcasecmp@plt>
   119fc:	cmp	r0, #0
   11a00:	beq	11a84 <__assert_fail@plt+0x618>
   11a04:	ldr	r1, [pc, #1136]	; 11e7c <__assert_fail@plt+0xa10>
   11a08:	ldr	r0, [pc, #1148]	; 11e8c <__assert_fail@plt+0xa20>
   11a0c:	bl	11238 <strcasecmp@plt>
   11a10:	cmp	r0, #0
   11a14:	beq	11a84 <__assert_fail@plt+0x618>
   11a18:	ldr	r3, [pc, #1132]	; 11e8c <__assert_fail@plt+0xa20>
   11a1c:	b	11938 <__assert_fail@plt+0x4cc>
   11a20:	cmp	r0, #119	; 0x77
   11a24:	beq	11bc8 <__assert_fail@plt+0x75c>
   11a28:	cmp	r0, #256	; 0x100
   11a2c:	bne	11d80 <__assert_fail@plt+0x914>
   11a30:	ldr	r1, [pc, #1080]	; 11e70 <__assert_fail@plt+0xa04>
   11a34:	mov	r0, r1
   11a38:	bl	11238 <strcasecmp@plt>
   11a3c:	cmp	r0, #0
   11a40:	beq	11d70 <__assert_fail@plt+0x904>
   11a44:	ldr	r1, [pc, #1064]	; 11e74 <__assert_fail@plt+0xa08>
   11a48:	ldr	r0, [pc, #1056]	; 11e70 <__assert_fail@plt+0xa04>
   11a4c:	bl	11238 <strcasecmp@plt>
   11a50:	cmp	r0, #0
   11a54:	beq	11d78 <__assert_fail@plt+0x90c>
   11a58:	ldr	r1, [pc, #1048]	; 11e78 <__assert_fail@plt+0xa0c>
   11a5c:	ldr	r0, [pc, #1036]	; 11e70 <__assert_fail@plt+0xa04>
   11a60:	bl	11238 <strcasecmp@plt>
   11a64:	cmp	r0, #0
   11a68:	beq	11a84 <__assert_fail@plt+0x618>
   11a6c:	ldr	r1, [pc, #1032]	; 11e7c <__assert_fail@plt+0xa10>
   11a70:	ldr	r0, [pc, #1016]	; 11e70 <__assert_fail@plt+0xa04>
   11a74:	bl	11238 <strcasecmp@plt>
   11a78:	cmp	r0, #0
   11a7c:	ldrne	r3, [pc, #1004]	; 11e70 <__assert_fail@plt+0xa04>
   11a80:	bne	11938 <__assert_fail@plt+0x4cc>
   11a84:	ldr	r1, [pc, #1028]	; 11e90 <__assert_fail@plt+0xa24>
   11a88:	ldr	r2, [pc, #984]	; 11e68 <__assert_fail@plt+0x9fc>
   11a8c:	mov	r3, #0
   11a90:	mov	r0, r3
   11a94:	str	r1, [r2, #20]
   11a98:	add	sp, sp, #20
   11a9c:	vpop	{d8}
   11aa0:	pop	{r4, r5, pc}
   11aa4:	cmp	r0, #112	; 0x70
   11aa8:	beq	11ba4 <__assert_fail@plt+0x738>
   11aac:	cmp	r0, #113	; 0x71
   11ab0:	bne	11d80 <__assert_fail@plt+0x914>
   11ab4:	ldr	r1, [pc, #984]	; 11e94 <__assert_fail@plt+0xa28>
   11ab8:	mov	r3, #0
   11abc:	ldr	r2, [r1]
   11ac0:	orr	r2, r2, #8
   11ac4:	str	r2, [r1]
   11ac8:	b	11b1c <__assert_fail@plt+0x6b0>
   11acc:	ldr	r3, [pc, #964]	; 11e98 <__assert_fail@plt+0xa2c>
   11ad0:	cmp	r0, r3
   11ad4:	beq	11b2c <__assert_fail@plt+0x6c0>
   11ad8:	ldr	r3, [pc, #956]	; 11e9c <__assert_fail@plt+0xa30>
   11adc:	cmp	r0, r3
   11ae0:	bne	11d80 <__assert_fail@plt+0x914>
   11ae4:	mov	r0, r2
   11ae8:	ldr	r1, [pc, #944]	; 11ea0 <__assert_fail@plt+0xa34>
   11aec:	bl	18cfc <argp_error@@Base>
   11af0:	mov	r3, #7
   11af4:	b	11b1c <__assert_fail@plt+0x6b0>
   11af8:	cmp	r0, #99	; 0x63
   11afc:	beq	11b84 <__assert_fail@plt+0x718>
   11b00:	cmp	r0, #100	; 0x64
   11b04:	bne	11d80 <__assert_fail@plt+0x914>
   11b08:	ldr	r1, [pc, #916]	; 11ea4 <__assert_fail@plt+0xa38>
   11b0c:	mov	r3, #0
   11b10:	ldr	r2, [r1]
   11b14:	orr	r2, r2, #1
   11b18:	str	r2, [r1]
   11b1c:	mov	r0, r3
   11b20:	add	sp, sp, #20
   11b24:	vpop	{d8}
   11b28:	pop	{r4, r5, pc}
   11b2c:	ldr	r2, [pc, #864]	; 11e94 <__assert_fail@plt+0xa28>
   11b30:	ldr	r1, [pc, #880]	; 11ea8 <__assert_fail@plt+0xa3c>
   11b34:	mov	r0, r4
   11b38:	ldr	r3, [r2]
   11b3c:	orr	r3, r3, #64	; 0x40
   11b40:	str	r3, [r2]
   11b44:	bl	11238 <strcasecmp@plt>
   11b48:	cmp	r0, #0
   11b4c:	moveq	r0, #1
   11b50:	beq	11b6c <__assert_fail@plt+0x700>
   11b54:	ldr	r1, [pc, #848]	; 11eac <__assert_fail@plt+0xa40>
   11b58:	mov	r0, r4
   11b5c:	bl	11238 <strcasecmp@plt>
   11b60:	cmp	r0, #0
   11b64:	moveq	r0, #2
   11b68:	bne	11e44 <__assert_fail@plt+0x9d8>
   11b6c:	ldr	r1, [pc, #828]	; 11eb0 <__assert_fail@plt+0xa44>
   11b70:	mov	r3, #0
   11b74:	ldr	r2, [r1]
   11b78:	orr	r2, r2, r0
   11b7c:	str	r2, [r1]
   11b80:	b	11b1c <__assert_fail@plt+0x6b0>
   11b84:	mov	r0, r1
   11b88:	mov	r2, #1
   11b8c:	mov	r1, #0
   11b90:	bl	12578 <__assert_fail@plt+0x110c>
   11b94:	ldr	r2, [pc, #744]	; 11e84 <__assert_fail@plt+0xa18>
   11b98:	mov	r3, #0
   11b9c:	str	r0, [r2, #4]
   11ba0:	b	11b1c <__assert_fail@plt+0x6b0>
   11ba4:	ldr	r5, [pc, #776]	; 11eb4 <__assert_fail@plt+0xa48>
   11ba8:	mov	r0, r1
   11bac:	mov	r2, r5
   11bb0:	ldr	r1, [pc, #768]	; 11eb8 <__assert_fail@plt+0xa4c>
   11bb4:	bl	126c4 <__assert_fail@plt+0x1258>
   11bb8:	ldr	r2, [pc, #764]	; 11ebc <__assert_fail@plt+0xa50>
   11bbc:	mov	r3, #0
   11bc0:	str	r5, [r2]
   11bc4:	b	11b1c <__assert_fail@plt+0x6b0>
   11bc8:	mov	r0, r1
   11bcc:	mov	r2, #0
   11bd0:	mvn	r1, #-2147483648	; 0x80000000
   11bd4:	bl	12578 <__assert_fail@plt+0x110c>
   11bd8:	ldr	r2, [pc, #648]	; 11e68 <__assert_fail@plt+0x9fc>
   11bdc:	mov	r3, #0
   11be0:	str	r0, [r2, #12]
   11be4:	b	11b1c <__assert_fail@plt+0x6b0>
   11be8:	ldr	r1, [pc, #640]	; 11e70 <__assert_fail@plt+0xa04>
   11bec:	ldr	r0, [pc, #640]	; 11e74 <__assert_fail@plt+0xa08>
   11bf0:	bl	11238 <strcasecmp@plt>
   11bf4:	cmp	r0, #0
   11bf8:	beq	11d70 <__assert_fail@plt+0x904>
   11bfc:	ldr	r1, [pc, #624]	; 11e74 <__assert_fail@plt+0xa08>
   11c00:	mov	r0, r1
   11c04:	bl	11238 <strcasecmp@plt>
   11c08:	cmp	r0, #0
   11c0c:	beq	11d78 <__assert_fail@plt+0x90c>
   11c10:	ldr	r1, [pc, #608]	; 11e78 <__assert_fail@plt+0xa0c>
   11c14:	ldr	r0, [pc, #600]	; 11e74 <__assert_fail@plt+0xa08>
   11c18:	bl	11238 <strcasecmp@plt>
   11c1c:	cmp	r0, #0
   11c20:	beq	11a84 <__assert_fail@plt+0x618>
   11c24:	ldr	r1, [pc, #592]	; 11e7c <__assert_fail@plt+0xa10>
   11c28:	ldr	r0, [pc, #580]	; 11e74 <__assert_fail@plt+0xa08>
   11c2c:	bl	11238 <strcasecmp@plt>
   11c30:	cmp	r0, #0
   11c34:	ldrne	r3, [pc, #568]	; 11e74 <__assert_fail@plt+0xa08>
   11c38:	beq	11a84 <__assert_fail@plt+0x618>
   11c3c:	b	11938 <__assert_fail@plt+0x4cc>
   11c40:	ldr	r1, [pc, #588]	; 11e94 <__assert_fail@plt+0xa28>
   11c44:	mov	r3, #0
   11c48:	ldr	r2, [r1]
   11c4c:	orr	r2, r2, #16
   11c50:	str	r2, [r1]
   11c54:	b	11b1c <__assert_fail@plt+0x6b0>
   11c58:	mov	r0, r1
   11c5c:	mov	r2, #1
   11c60:	ldr	r1, [pc, #600]	; 11ec0 <__assert_fail@plt+0xa54>
   11c64:	bl	12578 <__assert_fail@plt+0x110c>
   11c68:	ldr	r2, [pc, #504]	; 11e68 <__assert_fail@plt+0x9fc>
   11c6c:	mov	r3, #0
   11c70:	str	r0, [r2]
   11c74:	b	11b1c <__assert_fail@plt+0x6b0>
   11c78:	add	r1, sp, #12
   11c7c:	mov	r0, r4
   11c80:	str	r2, [sp, #4]
   11c84:	bl	11370 <strtod@plt>
   11c88:	ldr	r3, [sp, #12]
   11c8c:	ldr	r2, [sp, #4]
   11c90:	ldrb	r1, [r3]
   11c94:	cmp	r1, #0
   11c98:	vmov.f64	d8, d0
   11c9c:	bne	11e30 <__assert_fail@plt+0x9c4>
   11ca0:	vldr	d0, [pc, #440]	; 11e60 <__assert_fail@plt+0x9f4>
   11ca4:	ldr	r3, [pc, #472]	; 11e84 <__assert_fail@plt+0xa18>
   11ca8:	ldr	r1, [pc, #484]	; 11e94 <__assert_fail@plt+0xa28>
   11cac:	ldr	r0, [pc, #528]	; 11ec4 <__assert_fail@plt+0xa58>
   11cb0:	vmul.f64	d0, d8, d0
   11cb4:	ldrb	r2, [r3, #8]
   11cb8:	ldr	r3, [r1]
   11cbc:	orr	r3, r3, #2
   11cc0:	str	r3, [r1]
   11cc4:	eor	r2, r2, #1
   11cc8:	vcvt.u32.f64	s15, d0
   11ccc:	vmov	r3, s15
   11cd0:	vstr	s15, [r0]
   11cd4:	cmp	r3, #199	; 0xc7
   11cd8:	movhi	r2, #0
   11cdc:	andls	r2, r2, #1
   11ce0:	cmp	r2, #0
   11ce4:	beq	1199c <__assert_fail@plt+0x530>
   11ce8:	mov	r3, r4
   11cec:	ldr	r2, [pc, #468]	; 11ec8 <__assert_fail@plt+0xa5c>
   11cf0:	mov	r1, #0
   11cf4:	mov	r0, #1
   11cf8:	bl	11268 <error@plt>
   11cfc:	b	1199c <__assert_fail@plt+0x530>
   11d00:	mov	r0, r1
   11d04:	mov	r2, #0
   11d08:	mvn	r1, #-2147483648	; 0x80000000
   11d0c:	bl	12578 <__assert_fail@plt+0x110c>
   11d10:	ldr	r2, [pc, #336]	; 11e68 <__assert_fail@plt+0x9fc>
   11d14:	mov	r3, #0
   11d18:	str	r0, [r2, #16]
   11d1c:	b	11b1c <__assert_fail@plt+0x6b0>
   11d20:	ldr	r1, [pc, #364]	; 11e94 <__assert_fail@plt+0xa28>
   11d24:	mov	r3, #0
   11d28:	ldr	r2, [r1]
   11d2c:	orr	r2, r2, #4
   11d30:	str	r2, [r1]
   11d34:	b	11b1c <__assert_fail@plt+0x6b0>
   11d38:	ldr	r1, [pc, #340]	; 11e94 <__assert_fail@plt+0xa28>
   11d3c:	mov	r3, #0
   11d40:	ldr	r2, [r1]
   11d44:	orr	r2, r2, #32
   11d48:	str	r2, [r1]
   11d4c:	b	11b1c <__assert_fail@plt+0x6b0>
   11d50:	mov	r0, r1
   11d54:	mov	r2, #0
   11d58:	mov	r1, #255	; 0xff
   11d5c:	bl	12578 <__assert_fail@plt+0x110c>
   11d60:	ldr	r2, [pc, #284]	; 11e84 <__assert_fail@plt+0xa18>
   11d64:	mov	r3, #0
   11d68:	str	r0, [r2, #32]
   11d6c:	b	11b1c <__assert_fail@plt+0x6b0>
   11d70:	ldr	r1, [pc, #340]	; 11ecc <__assert_fail@plt+0xa60>
   11d74:	b	11a88 <__assert_fail@plt+0x61c>
   11d78:	ldr	r1, [pc, #336]	; 11ed0 <__assert_fail@plt+0xa64>
   11d7c:	b	11a88 <__assert_fail@plt+0x61c>
   11d80:	mov	r3, #7
   11d84:	b	11b1c <__assert_fail@plt+0x6b0>
   11d88:	ldr	r1, [pc, #260]	; 11e94 <__assert_fail@plt+0xa28>
   11d8c:	mov	r3, #0
   11d90:	ldr	r2, [r1]
   11d94:	orr	r2, r2, #1
   11d98:	str	r2, [r1]
   11d9c:	b	11b1c <__assert_fail@plt+0x6b0>
   11da0:	ldr	r1, [pc, #200]	; 11e70 <__assert_fail@plt+0xa04>
   11da4:	ldr	r0, [pc, #204]	; 11e78 <__assert_fail@plt+0xa0c>
   11da8:	bl	11238 <strcasecmp@plt>
   11dac:	cmp	r0, #0
   11db0:	beq	11d70 <__assert_fail@plt+0x904>
   11db4:	ldr	r1, [pc, #184]	; 11e74 <__assert_fail@plt+0xa08>
   11db8:	ldr	r0, [pc, #184]	; 11e78 <__assert_fail@plt+0xa0c>
   11dbc:	bl	11238 <strcasecmp@plt>
   11dc0:	cmp	r0, #0
   11dc4:	beq	11d78 <__assert_fail@plt+0x90c>
   11dc8:	ldr	r1, [pc, #168]	; 11e78 <__assert_fail@plt+0xa0c>
   11dcc:	mov	r0, r1
   11dd0:	bl	11238 <strcasecmp@plt>
   11dd4:	cmp	r0, #0
   11dd8:	beq	11a84 <__assert_fail@plt+0x618>
   11ddc:	ldr	r1, [pc, #152]	; 11e7c <__assert_fail@plt+0xa10>
   11de0:	ldr	r0, [pc, #144]	; 11e78 <__assert_fail@plt+0xa0c>
   11de4:	bl	11238 <strcasecmp@plt>
   11de8:	cmp	r0, #0
   11dec:	ldrne	r3, [pc, #132]	; 11e78 <__assert_fail@plt+0xa0c>
   11df0:	beq	11a84 <__assert_fail@plt+0x618>
   11df4:	b	11938 <__assert_fail@plt+0x4cc>
   11df8:	ldr	r1, [pc, #164]	; 11ea4 <__assert_fail@plt+0xa38>
   11dfc:	mov	r3, #0
   11e00:	mov	r0, r3
   11e04:	ldr	r2, [r1]
   11e08:	orr	r2, r2, #5
   11e0c:	str	r2, [r1]
   11e10:	bx	lr
   11e14:	mov	r3, r4
   11e18:	ldr	r2, [pc, #180]	; 11ed4 <__assert_fail@plt+0xa68>
   11e1c:	mov	r1, #0
   11e20:	mov	r0, #1
   11e24:	bl	11268 <error@plt>
   11e28:	mov	r3, #0
   11e2c:	b	11b1c <__assert_fail@plt+0x6b0>
   11e30:	mov	r0, r2
   11e34:	ldr	r1, [pc, #156]	; 11ed8 <__assert_fail@plt+0xa6c>
   11e38:	mov	r2, r4
   11e3c:	bl	18cfc <argp_error@@Base>
   11e40:	b	11ca0 <__assert_fail@plt+0x834>
   11e44:	mov	r0, #1
   11e48:	mov	r3, r4
   11e4c:	ldr	r2, [pc, #136]	; 11edc <__assert_fail@plt+0xa70>
   11e50:	mov	r1, #0
   11e54:	bl	11268 <error@plt>
   11e58:	mov	r0, #0
   11e5c:	b	11b6c <__assert_fail@plt+0x700>
   11e60:	andeq	r0, r0, r0
   11e64:	addmi	r4, pc, r0
   11e68:	andeq	r1, r3, r0, asr #2
   11e6c:	andeq	r0, r0, r1, lsl #2
   11e70:	andeq	lr, r1, r0, asr #12
   11e74:	andeq	lr, r1, r8, asr #12
   11e78:	andeq	lr, r1, r4, asr r6
   11e7c:	andeq	lr, r1, ip, asr r6
   11e80:	andeq	lr, r1, r4, ror #12
   11e84:	andeq	r1, r3, r4, lsr r6
   11e88:	andeq	r0, r0, r2, lsl #2
   11e8c:	andeq	lr, r1, r0, lsl #13
   11e90:	andeq	r3, r1, ip, asr #28
   11e94:	andeq	r1, r3, r8, asr #13
   11e98:	andeq	r0, r0, r5, lsl #2
   11e9c:	tsteq	r0, r2
   11ea0:			; <UNDEFINED> instruction: 0x0001e6b8
   11ea4:	andeq	r1, r3, ip, asr #13
   11ea8:	andeq	lr, r1, r8, lsl #13
   11eac:	muleq	r1, r0, r6
   11eb0:	ldrdeq	r1, [r3], -r4
   11eb4:	andeq	r1, r3, r0, asr #12
   11eb8:	andeq	r1, r3, r4, asr #2
   11ebc:	andeq	r1, r3, r0, asr #13
   11ec0:	andeq	pc, r0, r7, ror pc	; <UNPREDICTABLE>
   11ec4:	ldrdeq	r1, [r3], -r8
   11ec8:	andeq	lr, r1, r8, lsl #12
   11ecc:	andeq	r3, r1, ip, ror r0
   11ed0:	andeq	r4, r1, r8, asr r0
   11ed4:	andeq	lr, r1, r4, lsr #12
   11ed8:	andeq	lr, r1, r8, ror #11
   11edc:	muleq	r1, r8, r6
   11ee0:	push	{r4, lr}
   11ee4:	mov	r4, r0
   11ee8:	ldr	r1, [pc, #120]	; 11f68 <__assert_fail@plt+0xafc>
   11eec:	bl	11238 <strcasecmp@plt>
   11ef0:	cmp	r0, #0
   11ef4:	beq	11f44 <__assert_fail@plt+0xad8>
   11ef8:	ldr	r1, [pc, #108]	; 11f6c <__assert_fail@plt+0xb00>
   11efc:	mov	r0, r4
   11f00:	bl	11238 <strcasecmp@plt>
   11f04:	cmp	r0, #0
   11f08:	beq	11f3c <__assert_fail@plt+0xad0>
   11f0c:	ldr	r1, [pc, #92]	; 11f70 <__assert_fail@plt+0xb04>
   11f10:	mov	r0, r4
   11f14:	bl	11238 <strcasecmp@plt>
   11f18:	cmp	r0, #0
   11f1c:	beq	11f34 <__assert_fail@plt+0xac8>
   11f20:	ldr	r1, [pc, #76]	; 11f74 <__assert_fail@plt+0xb08>
   11f24:	mov	r0, r4
   11f28:	bl	11238 <strcasecmp@plt>
   11f2c:	cmp	r0, #0
   11f30:	bne	11f4c <__assert_fail@plt+0xae0>
   11f34:	ldr	r0, [pc, #60]	; 11f78 <__assert_fail@plt+0xb0c>
   11f38:	pop	{r4, pc}
   11f3c:	ldr	r0, [pc, #56]	; 11f7c <__assert_fail@plt+0xb10>
   11f40:	pop	{r4, pc}
   11f44:	ldr	r0, [pc, #52]	; 11f80 <__assert_fail@plt+0xb14>
   11f48:	pop	{r4, pc}
   11f4c:	mov	r3, r4
   11f50:	ldr	r2, [pc, #44]	; 11f84 <__assert_fail@plt+0xb18>
   11f54:	mov	r1, #0
   11f58:	mov	r0, #1
   11f5c:	bl	11268 <error@plt>
   11f60:	mov	r0, #0
   11f64:	pop	{r4, pc}
   11f68:	andeq	lr, r1, r0, asr #12
   11f6c:	andeq	lr, r1, r8, asr #12
   11f70:	andeq	lr, r1, r4, asr r6
   11f74:	andeq	lr, r1, ip, asr r6
   11f78:	andeq	r3, r1, ip, asr #28
   11f7c:	andeq	r4, r1, r8, asr r0
   11f80:	andeq	r3, r1, ip, ror r0
   11f84:	andeq	lr, r1, r4, ror #12
   11f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f8c:	sub	sp, sp, #204	; 0xcc
   11f90:	ldr	r6, [pc, #1244]	; 12474 <__assert_fail@plt+0x1008>
   11f94:	mov	r4, r0
   11f98:	str	r1, [sp, #28]
   11f9c:	mov	r0, #2
   11fa0:	ldr	r1, [pc, #1232]	; 12478 <__assert_fail@plt+0x100c>
   11fa4:	bl	111c0 <signal@plt>
   11fa8:	ldr	r2, [r6, #28]
   11fac:	ldr	r3, [r4]
   11fb0:	add	r8, sp, #32
   11fb4:	mov	r7, #0
   11fb8:	cmp	r2, #0
   11fbc:	add	r3, r3, #1
   11fc0:	str	r7, [r8, #4]
   11fc4:	ldr	r5, [pc, #1200]	; 1247c <__assert_fail@plt+0x1010>
   11fc8:	ldr	sl, [pc, #1200]	; 12480 <__assert_fail@plt+0x1014>
   11fcc:	str	r3, [sp, #12]
   11fd0:	str	r7, [sp, #32]
   11fd4:	str	r7, [sp, #48]	; 0x30
   11fd8:	str	r7, [sp, #56]	; 0x38
   11fdc:	str	r7, [sp, #52]	; 0x34
   11fe0:	str	r7, [sp, #60]	; 0x3c
   11fe4:	movne	r9, r7
   11fe8:	movne	fp, #8
   11fec:	bne	1203c <__assert_fail@plt+0xbd0>
   11ff0:	b	12098 <__assert_fail@plt+0xc2c>
   11ff4:	ldr	r3, [sl]
   11ff8:	mov	r2, ip
   11ffc:	subs	r1, r3, #0
   12000:	mov	r0, r4
   12004:	add	r7, r7, #1
   12008:	beq	12020 <__assert_fail@plt+0xbb4>
   1200c:	ldr	r3, [r5]
   12010:	str	r9, [sp]
   12014:	cmp	r3, ip
   12018:	subhi	r3, r3, ip
   1201c:	bl	128e8 <__assert_fail@plt+0x147c>
   12020:	mov	r0, r4
   12024:	bl	14298 <__assert_fail@plt+0x2e2c>
   12028:	cmp	r0, #0
   1202c:	blt	12078 <__assert_fail@plt+0xc0c>
   12030:	ldr	r3, [r6, #28]
   12034:	cmp	r3, r7
   12038:	bls	12098 <__assert_fail@plt+0xc2c>
   1203c:	ldr	r3, [r5]
   12040:	mov	ip, r9
   12044:	cmp	r3, #7
   12048:	bls	11ff4 <__assert_fail@plt+0xb88>
   1204c:	mov	r1, r9
   12050:	add	r0, sp, #72	; 0x48
   12054:	bl	1125c <gettimeofday@plt>
   12058:	str	r9, [sp]
   1205c:	mov	r3, fp
   12060:	mov	r2, #0
   12064:	add	r1, sp, #72	; 0x48
   12068:	mov	r0, r4
   1206c:	bl	128e8 <__assert_fail@plt+0x147c>
   12070:	mov	ip, fp
   12074:	b	11ff4 <__assert_fail@plt+0xb88>
   12078:	bl	11328 <__errno_location@plt>
   1207c:	ldr	r2, [pc, #1024]	; 12484 <__assert_fail@plt+0x1018>
   12080:	ldr	r1, [r0]
   12084:	mov	r0, #1
   12088:	bl	11268 <error@plt>
   1208c:	ldr	r3, [r6, #28]
   12090:	cmp	r3, r7
   12094:	bhi	1203c <__assert_fail@plt+0xbd0>
   12098:	ldr	r3, [pc, #1000]	; 12488 <__assert_fail@plt+0x101c>
   1209c:	ldr	r3, [r3]
   120a0:	tst	r3, #1
   120a4:	ldrne	r3, [pc, #992]	; 1248c <__assert_fail@plt+0x1020>
   120a8:	bne	120d0 <__assert_fail@plt+0xc64>
   120ac:	ldr	r1, [r4, #20]
   120b0:	ldr	r3, [pc, #984]	; 12490 <__assert_fail@plt+0x1024>
   120b4:	mov	r2, #1000	; 0x3e8
   120b8:	umull	r0, r3, r3, r1
   120bc:	lsr	r3, r3, #6
   120c0:	str	r3, [sp, #48]	; 0x30
   120c4:	mul	r3, r2, r3
   120c8:	sub	r3, r1, r3
   120cc:	mul	r3, r2, r3
   120d0:	add	r0, sp, #40	; 0x28
   120d4:	mov	r1, #0
   120d8:	str	r3, [sp, #52]	; 0x34
   120dc:	bl	1125c <gettimeofday@plt>
   120e0:	ldr	r3, [r5]
   120e4:	cmp	r3, #7
   120e8:	movls	r2, #0
   120ec:	bhi	12418 <__assert_fail@plt+0xfac>
   120f0:	ldr	r1, [sl]
   120f4:	cmp	r1, #0
   120f8:	beq	12118 <__assert_fail@plt+0xcac>
   120fc:	ldr	r3, [r5]
   12100:	mov	r0, #0
   12104:	cmp	r3, r2
   12108:	str	r0, [sp]
   1210c:	subhi	r3, r3, r2
   12110:	mov	r0, r4
   12114:	bl	128e8 <__assert_fail@plt+0x147c>
   12118:	mov	r0, r4
   1211c:	bl	14298 <__assert_fail@plt+0x2e2c>
   12120:	cmp	r0, #0
   12124:	blt	1245c <__assert_fail@plt+0xff0>
   12128:	ldr	r7, [pc, #868]	; 12494 <__assert_fail@plt+0x1028>
   1212c:	mov	r9, #128	; 0x80
   12130:	mov	r3, #0
   12134:	str	r3, [sp, #24]
   12138:	str	r3, [sp, #16]
   1213c:	str	r3, [sp, #20]
   12140:	ldr	fp, [r6]
   12144:	cmp	fp, #0
   12148:	bne	12284 <__assert_fail@plt+0xe18>
   1214c:	mov	r2, r9
   12150:	mov	r1, fp
   12154:	add	r0, sp, #72	; 0x48
   12158:	bl	11358 <memset@plt>
   1215c:	ldr	r3, [r4]
   12160:	add	ip, sp, #200	; 0xc8
   12164:	cmp	r3, #0
   12168:	add	r2, r3, #31
   1216c:	movge	r2, r3
   12170:	asr	r0, r3, #31
   12174:	asr	r2, r2, #5
   12178:	lsr	r0, r0, #27
   1217c:	add	r2, ip, r2, lsl #2
   12180:	add	r3, r3, r0
   12184:	and	r3, r3, #31
   12188:	ldr	ip, [r2, #-128]	; 0xffffff80
   1218c:	sub	r3, r3, r0
   12190:	mov	lr, #1
   12194:	mov	r1, fp
   12198:	orr	r3, ip, lr, lsl r3
   1219c:	add	r0, sp, #56	; 0x38
   121a0:	str	r3, [r2, #-128]	; 0xffffff80
   121a4:	bl	1125c <gettimeofday@plt>
   121a8:	ldr	r1, [sp, #52]	; 0x34
   121ac:	ldr	r3, [sp, #44]	; 0x2c
   121b0:	ldr	ip, [sp, #60]	; 0x3c
   121b4:	ldr	r2, [sp, #40]	; 0x28
   121b8:	ldr	r0, [sp, #48]	; 0x30
   121bc:	add	r3, r3, r1
   121c0:	ldr	r1, [sp, #56]	; 0x38
   121c4:	sub	r3, r3, ip
   121c8:	add	r2, r2, r0
   121cc:	sub	r2, r2, r1
   121d0:	cmp	r3, #0
   121d4:	str	r3, [sp, #36]	; 0x24
   121d8:	str	r2, [sp, #32]
   121dc:	bge	123c4 <__assert_fail@plt+0xf58>
   121e0:	sub	r1, r2, #1
   121e4:	add	r3, r3, #999424	; 0xf4000
   121e8:	adds	r3, r3, #576	; 0x240
   121ec:	mov	r2, r1
   121f0:	sub	r1, r1, #1
   121f4:	bmi	121e4 <__assert_fail@plt+0xd78>
   121f8:	str	r3, [sp, #36]	; 0x24
   121fc:	str	r2, [sp, #32]
   12200:	cmp	r2, #0
   12204:	movlt	r3, #0
   12208:	strlt	r3, [sp, #36]	; 0x24
   1220c:	strlt	r3, [sp, #32]
   12210:	mov	r3, #0
   12214:	str	r8, [sp]
   12218:	mov	r2, r3
   1221c:	add	r1, sp, #72	; 0x48
   12220:	ldr	r0, [sp, #12]
   12224:	bl	111f0 <select@plt>
   12228:	cmp	r0, #0
   1222c:	blt	1231c <__assert_fail@plt+0xeb0>
   12230:	cmp	r0, #1
   12234:	beq	12368 <__assert_fail@plt+0xefc>
   12238:	ldr	r3, [r4, #8]
   1223c:	cmp	r3, #0
   12240:	beq	122a8 <__assert_fail@plt+0xe3c>
   12244:	ldr	r2, [r4, #112]	; 0x70
   12248:	cmp	r3, r2
   1224c:	bhi	122a8 <__assert_fail@plt+0xe3c>
   12250:	ldr	r3, [sp, #16]
   12254:	cmp	r3, #0
   12258:	bne	12284 <__assert_fail@plt+0xe18>
   1225c:	ldr	r3, [r5, #16]
   12260:	mov	r2, #1
   12264:	str	r2, [sp, #16]
   12268:	str	r3, [sp, #48]	; 0x30
   1226c:	mov	r1, #0
   12270:	add	r0, sp, #40	; 0x28
   12274:	bl	1125c <gettimeofday@plt>
   12278:	ldr	fp, [r6]
   1227c:	cmp	fp, #0
   12280:	beq	1214c <__assert_fail@plt+0xce0>
   12284:	mov	r0, r4
   12288:	bl	129d4 <__assert_fail@plt+0x1568>
   1228c:	ldr	r3, [sp, #28]
   12290:	cmp	r3, #0
   12294:	moveq	r0, r3
   12298:	beq	122a0 <__assert_fail@plt+0xe34>
   1229c:	blx	r3
   122a0:	add	sp, sp, #204	; 0xcc
   122a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122a8:	ldr	r3, [r5]
   122ac:	cmp	r3, #7
   122b0:	movls	r2, #0
   122b4:	bhi	1233c <__assert_fail@plt+0xed0>
   122b8:	ldr	r1, [sl]
   122bc:	cmp	r1, #0
   122c0:	beq	122e0 <__assert_fail@plt+0xe74>
   122c4:	ldr	r3, [r5]
   122c8:	mov	r0, #0
   122cc:	cmp	r3, r2
   122d0:	str	r0, [sp]
   122d4:	subhi	r3, r3, r2
   122d8:	mov	r0, r4
   122dc:	bl	128e8 <__assert_fail@plt+0x147c>
   122e0:	mov	r0, r4
   122e4:	bl	14298 <__assert_fail@plt+0x2e2c>
   122e8:	cmp	r0, #0
   122ec:	blt	123ec <__assert_fail@plt+0xf80>
   122f0:	ldr	r3, [pc, #400]	; 12488 <__assert_fail@plt+0x101c>
   122f4:	ldr	r3, [r3]
   122f8:	and	r3, r3, #9
   122fc:	cmp	r3, #1
   12300:	beq	12404 <__assert_fail@plt+0xf98>
   12304:	ldr	r1, [r5, #12]
   12308:	add	r0, r4, #12
   1230c:	bl	12a10 <__assert_fail@plt+0x15a4>
   12310:	cmp	r0, #0
   12314:	beq	1226c <__assert_fail@plt+0xe00>
   12318:	b	12284 <__assert_fail@plt+0xe18>
   1231c:	bl	11328 <__errno_location@plt>
   12320:	ldr	r1, [r0]
   12324:	cmp	r1, #4
   12328:	beq	12140 <__assert_fail@plt+0xcd4>
   1232c:	ldr	r2, [pc, #356]	; 12498 <__assert_fail@plt+0x102c>
   12330:	mov	r0, #1
   12334:	bl	11268 <error@plt>
   12338:	b	12140 <__assert_fail@plt+0xcd4>
   1233c:	mov	r1, #0
   12340:	add	r0, sp, #64	; 0x40
   12344:	bl	1125c <gettimeofday@plt>
   12348:	mov	r2, #0
   1234c:	str	r2, [sp]
   12350:	add	r1, sp, #64	; 0x40
   12354:	mov	r3, #8
   12358:	mov	r0, r4
   1235c:	bl	128e8 <__assert_fail@plt+0x147c>
   12360:	mov	r2, #8
   12364:	b	122b8 <__assert_fail@plt+0xe4c>
   12368:	mov	r0, r4
   1236c:	bl	143fc <__assert_fail@plt+0x2f90>
   12370:	cmp	r0, #0
   12374:	ldreq	r3, [sp, #24]
   12378:	addeq	r3, r3, #1
   1237c:	streq	r3, [sp, #24]
   12380:	ldr	r3, [sp, #20]
   12384:	cmp	r3, #0
   12388:	beq	12444 <__assert_fail@plt+0xfd8>
   1238c:	ldr	r1, [r5, #12]
   12390:	add	r0, r4, #12
   12394:	bl	12a10 <__assert_fail@plt+0x15a4>
   12398:	cmp	r0, #0
   1239c:	bne	12284 <__assert_fail@plt+0xe18>
   123a0:	ldr	r3, [r4, #8]
   123a4:	ldr	r1, [sp, #24]
   123a8:	adds	r2, r3, #0
   123ac:	movne	r2, #1
   123b0:	cmp	r1, r3
   123b4:	movcc	r2, #0
   123b8:	cmp	r2, #0
   123bc:	beq	12140 <__assert_fail@plt+0xcd4>
   123c0:	b	12284 <__assert_fail@plt+0xe18>
   123c4:	cmp	r3, r7
   123c8:	ble	12200 <__assert_fail@plt+0xd94>
   123cc:	add	r1, r2, #1
   123d0:	sub	r3, r3, #999424	; 0xf4000
   123d4:	sub	r3, r3, #576	; 0x240
   123d8:	cmp	r3, r7
   123dc:	mov	r2, r1
   123e0:	add	r1, r1, #1
   123e4:	bgt	123d0 <__assert_fail@plt+0xf64>
   123e8:	b	121f8 <__assert_fail@plt+0xd8c>
   123ec:	bl	11328 <__errno_location@plt>
   123f0:	ldr	r2, [pc, #140]	; 12484 <__assert_fail@plt+0x1018>
   123f4:	ldr	r1, [r0]
   123f8:	mov	r0, #1
   123fc:	bl	11268 <error@plt>
   12400:	b	122f0 <__assert_fail@plt+0xe84>
   12404:	ldr	r3, [pc, #144]	; 1249c <__assert_fail@plt+0x1030>
   12408:	mov	r0, #46	; 0x2e
   1240c:	ldr	r1, [r3]
   12410:	bl	113f4 <putc@plt>
   12414:	b	12304 <__assert_fail@plt+0xe98>
   12418:	mov	r1, #0
   1241c:	add	r0, sp, #72	; 0x48
   12420:	bl	1125c <gettimeofday@plt>
   12424:	mov	r2, #0
   12428:	str	r2, [sp]
   1242c:	add	r1, sp, #72	; 0x48
   12430:	mov	r3, #8
   12434:	mov	r0, r4
   12438:	bl	128e8 <__assert_fail@plt+0x147c>
   1243c:	mov	r2, #8
   12440:	b	120f0 <__assert_fail@plt+0xc84>
   12444:	mov	r1, r3
   12448:	add	r0, sp, #56	; 0x38
   1244c:	bl	1125c <gettimeofday@plt>
   12450:	add	r3, sp, #56	; 0x38
   12454:	str	r3, [sp, #20]
   12458:	b	1238c <__assert_fail@plt+0xf20>
   1245c:	bl	11328 <__errno_location@plt>
   12460:	ldr	r2, [pc, #28]	; 12484 <__assert_fail@plt+0x1018>
   12464:	ldr	r1, [r0]
   12468:	mov	r0, #1
   1246c:	bl	11268 <error@plt>
   12470:	b	12128 <__assert_fail@plt+0xcbc>
   12474:	andeq	r1, r3, r4, lsr r6
   12478:	andeq	r1, r1, r0, asr #16
   1247c:	andeq	r1, r3, r0, asr #2
   12480:	andeq	r1, r3, r4, asr #13
   12484:	andeq	lr, r1, r0, lsr #14
   12488:	andeq	r1, r3, r8, asr #13
   1248c:	andeq	r2, r0, r0, lsl r7
   12490:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   12494:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   12498:	andeq	lr, r1, r0, lsr r7
   1249c:	andeq	r1, r3, ip, lsr #12
   124a0:	ldr	r3, [pc, #172]	; 12554 <__assert_fail@plt+0x10e8>
   124a4:	push	{r4, lr}
   124a8:	ldr	r4, [pc, #168]	; 12558 <__assert_fail@plt+0x10ec>
   124ac:	ldr	r0, [r3]
   124b0:	bl	11160 <fflush@plt>
   124b4:	ldr	r3, [r4]
   124b8:	ldr	r0, [pc, #156]	; 1255c <__assert_fail@plt+0x10f0>
   124bc:	ldr	r1, [r3, #52]	; 0x34
   124c0:	bl	11148 <printf@plt>
   124c4:	ldr	r3, [r4]
   124c8:	ldr	r0, [pc, #144]	; 12560 <__assert_fail@plt+0x10f4>
   124cc:	ldr	r1, [r3, #112]	; 0x70
   124d0:	bl	11148 <printf@plt>
   124d4:	ldr	r3, [r4]
   124d8:	ldr	r0, [pc, #132]	; 12564 <__assert_fail@plt+0x10f8>
   124dc:	ldr	r1, [r3, #116]	; 0x74
   124e0:	bl	11148 <printf@plt>
   124e4:	ldr	r3, [r4]
   124e8:	ldr	r1, [r3, #120]	; 0x78
   124ec:	cmp	r1, #0
   124f0:	bne	12544 <__assert_fail@plt+0x10d8>
   124f4:	ldr	r1, [r3, #112]	; 0x70
   124f8:	cmp	r1, #0
   124fc:	beq	12528 <__assert_fail@plt+0x10bc>
   12500:	ldr	r0, [r3, #116]	; 0x74
   12504:	cmp	r1, r0
   12508:	bcc	12538 <__assert_fail@plt+0x10cc>
   1250c:	sub	r0, r1, r0
   12510:	mov	r3, #100	; 0x64
   12514:	mul	r0, r3, r0
   12518:	bl	1e09c <argp_parse@@Base+0x468c>
   1251c:	mov	r1, r0
   12520:	ldr	r0, [pc, #64]	; 12568 <__assert_fail@plt+0x10fc>
   12524:	bl	11148 <printf@plt>
   12528:	mov	r0, #10
   1252c:	bl	11364 <putchar@plt>
   12530:	mov	r0, #0
   12534:	pop	{r4, pc}
   12538:	ldr	r0, [pc, #44]	; 1256c <__assert_fail@plt+0x1100>
   1253c:	bl	11148 <printf@plt>
   12540:	b	12528 <__assert_fail@plt+0x10bc>
   12544:	ldr	r0, [pc, #36]	; 12570 <__assert_fail@plt+0x1104>
   12548:	bl	11148 <printf@plt>
   1254c:	ldr	r3, [r4]
   12550:	b	124f4 <__assert_fail@plt+0x1088>
   12554:	andeq	r1, r3, ip, lsr #12
   12558:	ldrdeq	r1, [r3], -r0
   1255c:	andeq	lr, r1, r0, asr #14
   12560:	andeq	lr, r1, ip, asr r7
   12564:	andeq	lr, r1, r8, ror r7
   12568:	andeq	lr, r1, ip, asr #15
   1256c:	andeq	lr, r1, r4, lsr #15
   12570:	muleq	r1, r0, r7
   12574:	andeq	r0, r0, r0
   12578:	push	{r4, r5, r6, r7, lr}
   1257c:	sub	sp, sp, #20
   12580:	mov	r5, r1
   12584:	mov	r6, r2
   12588:	add	r1, sp, #12
   1258c:	mov	r2, #0
   12590:	mov	r7, r0
   12594:	bl	112f8 <strtoul@plt>
   12598:	ldr	r3, [sp, #12]
   1259c:	ldrb	r2, [r3]
   125a0:	cmp	r2, #0
   125a4:	mov	r4, r0
   125a8:	bne	125fc <__assert_fail@plt+0x1190>
   125ac:	cmp	r4, #0
   125b0:	cmpeq	r6, #0
   125b4:	beq	125e4 <__assert_fail@plt+0x1178>
   125b8:	cmp	r5, #0
   125bc:	cmpne	r4, r5
   125c0:	bls	125d8 <__assert_fail@plt+0x116c>
   125c4:	mov	r3, r7
   125c8:	ldr	r2, [pc, #72]	; 12618 <__assert_fail@plt+0x11ac>
   125cc:	mov	r1, #0
   125d0:	mov	r0, #1
   125d4:	bl	11268 <error@plt>
   125d8:	mov	r0, r4
   125dc:	add	sp, sp, #20
   125e0:	pop	{r4, r5, r6, r7, pc}
   125e4:	mov	r3, r7
   125e8:	ldr	r2, [pc, #44]	; 1261c <__assert_fail@plt+0x11b0>
   125ec:	mov	r1, #0
   125f0:	mov	r0, #1
   125f4:	bl	11268 <error@plt>
   125f8:	b	125b8 <__assert_fail@plt+0x114c>
   125fc:	str	r3, [sp]
   12600:	ldr	r2, [pc, #24]	; 12620 <__assert_fail@plt+0x11b4>
   12604:	mov	r3, r7
   12608:	mov	r1, #0
   1260c:	mov	r0, #1
   12610:	bl	11268 <error@plt>
   12614:	b	125ac <__assert_fail@plt+0x1140>
   12618:	andeq	lr, r1, r8, asr ip
   1261c:	andeq	lr, r1, r8, lsl #12
   12620:	andeq	lr, r1, r8, ror #11
   12624:	push	{r4, r5, r6, lr}
   12628:	ldr	r6, [pc, #140]	; 126bc <__assert_fail@plt+0x1250>
   1262c:	ldr	r3, [r6]
   12630:	cmp	r3, #0
   12634:	popeq	{r4, r5, r6, pc}
   12638:	mov	r4, r0
   1263c:	mov	r0, r3
   12640:	mov	r5, r1
   12644:	bl	1b8b4 <argp_parse@@Base+0x1ea4>
   12648:	ldr	r3, [pc, #112]	; 126c0 <__assert_fail@plt+0x1254>
   1264c:	cmp	r4, #0
   12650:	str	r0, [r3]
   12654:	beq	12690 <__assert_fail@plt+0x1224>
   12658:	ldr	r1, [r6]
   1265c:	add	r1, r0, r1
   12660:	cmp	r0, r1
   12664:	popcs	{r4, r5, r6, pc}
   12668:	mov	r2, r0
   1266c:	mov	r3, #0
   12670:	ldrb	r0, [r4, r3]
   12674:	add	r3, r3, #1
   12678:	cmp	r3, r5
   1267c:	movcs	r3, #0
   12680:	strb	r0, [r2], #1
   12684:	cmp	r2, r1
   12688:	bne	12670 <__assert_fail@plt+0x1204>
   1268c:	pop	{r4, r5, r6, pc}
   12690:	ldr	r2, [r6]
   12694:	cmp	r2, #0
   12698:	popeq	{r4, r5, r6, pc}
   1269c:	mov	r2, r0
   126a0:	strb	r4, [r2, r4]
   126a4:	ldr	r2, [r6]
   126a8:	add	r4, r4, #1
   126ac:	cmp	r2, r4
   126b0:	popls	{r4, r5, r6, pc}
   126b4:	ldr	r2, [r3]
   126b8:	b	126a0 <__assert_fail@plt+0x1234>
   126bc:	andeq	r1, r3, r0, asr #2
   126c0:	andeq	r1, r3, r4, asr #13
   126c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126c8:	mov	r7, r1
   126cc:	ldrb	r5, [r0]
   126d0:	sub	sp, sp, #12
   126d4:	cmp	r5, #0
   126d8:	beq	12760 <__assert_fail@plt+0x12f4>
   126dc:	ldr	r3, [r1]
   126e0:	cmp	r3, #0
   126e4:	ble	1276c <__assert_fail@plt+0x1300>
   126e8:	mov	r5, #0
   126ec:	mov	r4, r0
   126f0:	ldr	fp, [pc, #124]	; 12774 <__assert_fail@plt+0x1308>
   126f4:	ldr	sl, [pc, #124]	; 12778 <__assert_fail@plt+0x130c>
   126f8:	sub	r6, r2, #1
   126fc:	mov	r9, r5
   12700:	mov	r8, #1
   12704:	b	12714 <__assert_fail@plt+0x12a8>
   12708:	ldr	r3, [r7]
   1270c:	cmp	r3, r5
   12710:	ble	12760 <__assert_fail@plt+0x12f4>
   12714:	add	r3, sp, #4
   12718:	mov	r2, sp
   1271c:	mov	r1, fp
   12720:	mov	r0, r4
   12724:	bl	113e8 <sscanf@plt>
   12728:	add	r5, r5, #1
   1272c:	mov	r3, r4
   12730:	mov	r2, sl
   12734:	mov	r1, r9
   12738:	cmp	r0, #1
   1273c:	mov	r0, r8
   12740:	beq	12748 <__assert_fail@plt+0x12dc>
   12744:	bl	11268 <error@plt>
   12748:	ldr	r2, [sp, #4]
   1274c:	ldr	r3, [sp]
   12750:	strb	r3, [r6, #1]!
   12754:	ldrb	r3, [r4, r2]!
   12758:	cmp	r3, #0
   1275c:	bne	12708 <__assert_fail@plt+0x129c>
   12760:	str	r5, [r7]
   12764:	add	sp, sp, #12
   12768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1276c:	mov	r5, #0
   12770:	b	12760 <__assert_fail@plt+0x12f4>
   12774:	andeq	lr, r1, r4, ror ip
   12778:	andeq	lr, r1, ip, ror ip
   1277c:	ldr	r2, [r1, #4]
   12780:	ldr	r3, [r0, #4]
   12784:	sub	r3, r3, r2
   12788:	cmp	r3, #0
   1278c:	ldr	r2, [r0]
   12790:	str	r3, [r0, #4]
   12794:	addlt	r3, r3, #999424	; 0xf4000
   12798:	addlt	r3, r3, #576	; 0x240
   1279c:	sublt	r2, r2, #1
   127a0:	stmlt	r0, {r2, r3}
   127a4:	ldr	r3, [r1]
   127a8:	sub	r2, r2, r3
   127ac:	str	r2, [r0]
   127b0:	bx	lr
   127b4:	vcmpe.f64	d0, #0.0
   127b8:	vmrs	APSR_nzcv, fpscr
   127bc:	vnegmi.f64	d0, d0
   127c0:	bx	lr
   127c4:	vldr	d7, [pc, #92]	; 12828 <__assert_fail@plt+0x13bc>
   127c8:	vcmpe.f64	d0, d7
   127cc:	vmrs	APSR_nzcv, fpscr
   127d0:	bmi	1281c <__assert_fail@plt+0x13b0>
   127d4:	vcmpe.f64	d0, d1
   127d8:	vmrs	APSR_nzcv, fpscr
   127dc:	bmi	1281c <__assert_fail@plt+0x13b0>
   127e0:	vldr	d2, [pc, #72]	; 12830 <__assert_fail@plt+0x13c4>
   127e4:	vmov.f64	d3, d7
   127e8:	vmul.f64	d6, d0, d2
   127ec:	vdiv.f64	d7, d0, d6
   127f0:	vadd.f64	d7, d7, d6
   127f4:	vmul.f64	d7, d7, d2
   127f8:	vsub.f64	d4, d7, d6
   127fc:	vmov.f64	d6, d7
   12800:	vcmpe.f64	d4, d3
   12804:	vneg.f64	d5, d4
   12808:	vmrs	APSR_nzcv, fpscr
   1280c:	vmovpl.f64	d5, d4
   12810:	vcmpe.f64	d1, d5
   12814:	vmrs	APSR_nzcv, fpscr
   12818:	bmi	127ec <__assert_fail@plt+0x1380>
   1281c:	vmov.f64	d0, d7
   12820:	bx	lr
   12824:	nop			; (mov r0, r0)
	...
   12834:	svccc	0x00e00000
   12838:	mvn	r0, r0
   1283c:	lsr	r0, r0, #31
   12840:	bx	lr
   12844:	cmp	r2, #0
   12848:	bic	r3, r2, #-2147483648	; 0x80000000
   1284c:	push	{r4, lr}
   12850:	mov	r4, r0
   12854:	ldrge	r2, [pc, #12]	; 12868 <__assert_fail@plt+0x13fc>
   12858:	ldrlt	r2, [pc, #12]	; 1286c <__assert_fail@plt+0x1400>
   1285c:	bl	11334 <snprintf@plt>
   12860:	mov	r0, r4
   12864:	pop	{r4, pc}
   12868:	muleq	r1, r8, ip
   1286c:	muleq	r1, ip, ip
   12870:	ldr	r3, [r0, #80]	; 0x50
   12874:	push	{r4, r5, r6, lr}
   12878:	cmp	r3, #0
   1287c:	mov	r5, r0
   12880:	beq	12898 <__assert_fail@plt+0x142c>
   12884:	ldr	r4, [r5, #76]	; 0x4c
   12888:	cmp	r4, #0
   1288c:	beq	128c0 <__assert_fail@plt+0x1454>
   12890:	mov	r0, #0
   12894:	pop	{r4, r5, r6, pc}
   12898:	ldr	r0, [r0, #56]	; 0x38
   1289c:	cmp	r1, #0
   128a0:	addne	r0, r0, #8
   128a4:	addeq	r0, r0, #80	; 0x50
   128a8:	bl	1bf70 <argp_parse@@Base+0x2560>
   128ac:	cmp	r0, #0
   128b0:	str	r0, [r5, #80]	; 0x50
   128b4:	bne	12884 <__assert_fail@plt+0x1418>
   128b8:	mvn	r0, #0
   128bc:	pop	{r4, r5, r6, pc}
   128c0:	ldr	r0, [r5, #72]	; 0x48
   128c4:	bl	1bf70 <argp_parse@@Base+0x2560>
   128c8:	cmp	r0, #0
   128cc:	str	r0, [r5, #76]	; 0x4c
   128d0:	beq	128b8 <__assert_fail@plt+0x144c>
   128d4:	ldr	r2, [r5, #72]	; 0x48
   128d8:	mov	r1, r4
   128dc:	bl	11358 <memset@plt>
   128e0:	mov	r0, r4
   128e4:	pop	{r4, r5, r6, pc}
   128e8:	push	{r4, r5, r6, r7, r8, lr}
   128ec:	mov	r8, r1
   128f0:	ldr	r1, [r0, #80]	; 0x50
   128f4:	mov	r5, r3
   128f8:	cmp	r1, #0
   128fc:	mov	r4, r0
   12900:	mov	r6, r2
   12904:	ldrb	r3, [sp, #24]
   12908:	beq	12948 <__assert_fail@plt+0x14dc>
   1290c:	ldr	r7, [r4, #76]	; 0x4c
   12910:	cmp	r7, #0
   12914:	beq	12970 <__assert_fail@plt+0x1504>
   12918:	ldr	r2, [r4, #56]	; 0x38
   1291c:	add	r3, r6, r5
   12920:	cmp	r2, r3
   12924:	bcc	12968 <__assert_fail@plt+0x14fc>
   12928:	ldr	r0, [r4, #80]	; 0x50
   1292c:	mov	r2, r5
   12930:	add	r0, r0, #8
   12934:	add	r0, r0, r6
   12938:	mov	r1, r8
   1293c:	bl	111b4 <memcpy@plt>
   12940:	mov	r0, #0
   12944:	pop	{r4, r5, r6, r7, r8, pc}
   12948:	ldr	r0, [r0, #56]	; 0x38
   1294c:	cmp	r3, #0
   12950:	addne	r0, r0, #8
   12954:	addeq	r0, r0, #80	; 0x50
   12958:	bl	1bf70 <argp_parse@@Base+0x2560>
   1295c:	cmp	r0, #0
   12960:	str	r0, [r4, #80]	; 0x50
   12964:	bne	1290c <__assert_fail@plt+0x14a0>
   12968:	mvn	r0, #0
   1296c:	pop	{r4, r5, r6, r7, r8, pc}
   12970:	ldr	r0, [r4, #72]	; 0x48
   12974:	bl	1bf70 <argp_parse@@Base+0x2560>
   12978:	cmp	r0, #0
   1297c:	str	r0, [r4, #76]	; 0x4c
   12980:	beq	12968 <__assert_fail@plt+0x14fc>
   12984:	mov	r1, r7
   12988:	ldr	r2, [r4, #72]	; 0x48
   1298c:	bl	11358 <memset@plt>
   12990:	b	12918 <__assert_fail@plt+0x14ac>
   12994:	str	r1, [r0, #8]
   12998:	bx	lr
   1299c:	push	{lr}		; (str lr, [sp, #-4]!)
   129a0:	sub	sp, sp, #20
   129a4:	add	ip, sp, #16
   129a8:	ldr	r0, [r0]
   129ac:	str	r3, [sp]
   129b0:	str	r2, [ip, #-4]!
   129b4:	mov	r2, r1
   129b8:	mov	r3, ip
   129bc:	mov	r1, #1
   129c0:	bl	1113c <setsockopt@plt>
   129c4:	add	sp, sp, #20
   129c8:	pop	{pc}		; (ldr pc, [sp], #4)
   129cc:	str	r1, [r0, #20]
   129d0:	bx	lr
   129d4:	push	{r4, lr}
   129d8:	mov	r4, r0
   129dc:	ldr	r0, [r0, #80]	; 0x50
   129e0:	cmp	r0, #0
   129e4:	beq	129f4 <__assert_fail@plt+0x1588>
   129e8:	bl	1a98c <argp_parse@@Base+0xf7c>
   129ec:	mov	r3, #0
   129f0:	str	r3, [r4, #80]	; 0x50
   129f4:	ldr	r0, [r4, #76]	; 0x4c
   129f8:	cmp	r0, #0
   129fc:	popeq	{r4, pc}
   12a00:	bl	1a98c <argp_parse@@Base+0xf7c>
   12a04:	mov	r3, #0
   12a08:	str	r3, [r4, #76]	; 0x4c
   12a0c:	pop	{r4, pc}
   12a10:	push	{r4, r5, lr}
   12a14:	sub	sp, sp, #12
   12a18:	mov	r4, r1
   12a1c:	mov	r5, r0
   12a20:	mov	r1, #0
   12a24:	mov	r0, sp
   12a28:	bl	1125c <gettimeofday@plt>
   12a2c:	cmn	r4, #1
   12a30:	moveq	r0, #0
   12a34:	beq	12a64 <__assert_fail@plt+0x15f8>
   12a38:	ldr	r3, [sp, #4]
   12a3c:	ldr	r2, [r5, #4]
   12a40:	ldr	r0, [sp]
   12a44:	sub	r3, r3, r2
   12a48:	cmp	r3, #0
   12a4c:	ldr	r3, [r5]
   12a50:	sublt	r0, r0, #1
   12a54:	sub	r0, r0, r3
   12a58:	cmp	r4, r0
   12a5c:	movgt	r0, #0
   12a60:	movle	r0, #1
   12a64:	add	sp, sp, #12
   12a68:	pop	{r4, r5, pc}
   12a6c:	push	{r4, r5, lr}
   12a70:	mov	r3, #0
   12a74:	sub	sp, sp, #324	; 0x144
   12a78:	mov	ip, #1
   12a7c:	str	r3, [sp]
   12a80:	stmib	sp, {r3, ip}
   12a84:	add	r2, sp, #16
   12a88:	mov	r3, #46	; 0x2e
   12a8c:	mov	r4, r0
   12a90:	mov	r5, r1
   12a94:	bl	113ac <getnameinfo@plt>
   12a98:	subs	r3, r0, #0
   12a9c:	beq	12ad8 <__assert_fail@plt+0x166c>
   12aa0:	cmn	r3, #11
   12aa4:	beq	12b78 <__assert_fail@plt+0x170c>
   12aa8:	bl	1119c <gai_strerror@plt>
   12aac:	mov	r2, r0
   12ab0:	ldr	r3, [pc, #232]	; 12ba0 <__assert_fail@plt+0x1734>
   12ab4:	ldr	r1, [pc, #232]	; 12ba4 <__assert_fail@plt+0x1738>
   12ab8:	ldr	r0, [r3]
   12abc:	bl	1131c <fprintf@plt>
   12ac0:	ldr	r0, [pc, #224]	; 12ba8 <__assert_fail@plt+0x173c>
   12ac4:	bl	1bec4 <argp_parse@@Base+0x24b4>
   12ac8:	mov	r4, r0
   12acc:	mov	r0, r4
   12ad0:	add	sp, sp, #324	; 0x144
   12ad4:	pop	{r4, r5, pc}
   12ad8:	ldr	r3, [pc, #204]	; 12bac <__assert_fail@plt+0x1740>
   12adc:	ldr	r3, [r3]
   12ae0:	ands	r3, r3, #4
   12ae4:	bne	12b60 <__assert_fail@plt+0x16f4>
   12ae8:	mov	ip, #40	; 0x28
   12aec:	str	r3, [sp, #4]
   12af0:	str	r3, [sp]
   12af4:	mov	r1, r5
   12af8:	mov	r0, r4
   12afc:	add	r2, sp, #64	; 0x40
   12b00:	str	ip, [sp, #8]
   12b04:	mov	r3, #256	; 0x100
   12b08:	bl	113ac <getnameinfo@plt>
   12b0c:	cmp	r0, #0
   12b10:	add	r0, sp, #16
   12b14:	bne	12b8c <__assert_fail@plt+0x1720>
   12b18:	bl	11304 <strlen@plt>
   12b1c:	mov	r5, r0
   12b20:	add	r0, sp, #64	; 0x40
   12b24:	bl	11304 <strlen@plt>
   12b28:	add	r5, r5, r0
   12b2c:	add	r5, r5, #4
   12b30:	mov	r0, r5
   12b34:	bl	1b8b4 <argp_parse@@Base+0x1ea4>
   12b38:	add	r3, sp, #16
   12b3c:	str	r3, [sp]
   12b40:	mov	r1, r5
   12b44:	add	r3, sp, #64	; 0x40
   12b48:	ldr	r2, [pc, #96]	; 12bb0 <__assert_fail@plt+0x1744>
   12b4c:	mov	r4, r0
   12b50:	bl	11334 <snprintf@plt>
   12b54:	mov	r0, r4
   12b58:	add	sp, sp, #324	; 0x144
   12b5c:	pop	{r4, r5, pc}
   12b60:	add	r0, sp, #16
   12b64:	bl	1bec4 <argp_parse@@Base+0x24b4>
   12b68:	mov	r4, r0
   12b6c:	mov	r0, r4
   12b70:	add	sp, sp, #324	; 0x144
   12b74:	pop	{r4, r5, pc}
   12b78:	bl	11328 <__errno_location@plt>
   12b7c:	ldr	r0, [r0]
   12b80:	bl	112a4 <strerror@plt>
   12b84:	mov	r2, r0
   12b88:	b	12ab0 <__assert_fail@plt+0x1644>
   12b8c:	bl	1bec4 <argp_parse@@Base+0x24b4>
   12b90:	mov	r4, r0
   12b94:	mov	r0, r4
   12b98:	add	sp, sp, #324	; 0x144
   12b9c:	pop	{r4, r5, pc}
   12ba0:	andeq	r1, r3, r8, lsr #12
   12ba4:	andeq	lr, r1, r4, lsr #25
   12ba8:			; <UNDEFINED> instruction: 0x0001ecbc
   12bac:	andeq	r1, r3, r8, asr #13
   12bb0:	andeq	lr, r1, r4, asr #25
   12bb4:	ldr	r3, [pc, #196]	; 12c80 <__assert_fail@plt+0x1814>
   12bb8:	push	{r4, r5, r6, r7, lr}
   12bbc:	sub	sp, sp, #20
   12bc0:	ldr	r3, [r3]
   12bc4:	str	r0, [sp, #12]
   12bc8:	tst	r3, #4
   12bcc:	bne	12c4c <__assert_fail@plt+0x17e0>
   12bd0:	mov	r2, #2
   12bd4:	mov	r1, #4
   12bd8:	add	r0, sp, #12
   12bdc:	bl	11208 <gethostbyaddr@plt>
   12be0:	subs	r6, r0, #0
   12be4:	ldr	r0, [sp, #12]
   12be8:	beq	12c4c <__assert_fail@plt+0x17e0>
   12bec:	bl	111e4 <inet_ntoa@plt>
   12bf0:	mov	r7, r0
   12bf4:	bl	11304 <strlen@plt>
   12bf8:	mov	r4, r0
   12bfc:	ldr	r0, [r6]
   12c00:	cmp	r0, #0
   12c04:	addeq	r4, r4, #1
   12c08:	beq	12c18 <__assert_fail@plt+0x17ac>
   12c0c:	bl	11304 <strlen@plt>
   12c10:	add	r4, r4, #5
   12c14:	add	r4, r4, r0
   12c18:	mov	r0, r4
   12c1c:	bl	1b8b4 <argp_parse@@Base+0x1ea4>
   12c20:	ldr	r3, [r6]
   12c24:	cmp	r3, #0
   12c28:	mov	r5, r0
   12c2c:	beq	12c64 <__assert_fail@plt+0x17f8>
   12c30:	str	r7, [sp]
   12c34:	mov	r1, r4
   12c38:	ldr	r2, [pc, #68]	; 12c84 <__assert_fail@plt+0x1818>
   12c3c:	bl	11334 <snprintf@plt>
   12c40:	mov	r0, r5
   12c44:	add	sp, sp, #20
   12c48:	pop	{r4, r5, r6, r7, pc}
   12c4c:	bl	111e4 <inet_ntoa@plt>
   12c50:	bl	1bec4 <argp_parse@@Base+0x24b4>
   12c54:	mov	r5, r0
   12c58:	mov	r0, r5
   12c5c:	add	sp, sp, #20
   12c60:	pop	{r4, r5, r6, r7, pc}
   12c64:	mov	r3, r7
   12c68:	mov	r1, r4
   12c6c:	ldr	r2, [pc, #20]	; 12c88 <__assert_fail@plt+0x181c>
   12c70:	bl	11334 <snprintf@plt>
   12c74:	mov	r0, r5
   12c78:	add	sp, sp, #20
   12c7c:	pop	{r4, r5, r6, r7, pc}
   12c80:	andeq	r1, r3, r8, asr #13
   12c84:	andeq	lr, r1, r4, asr #25
   12c88:			; <UNDEFINED> instruction: 0x0001e6b4
   12c8c:	andeq	r0, r0, r0
   12c90:	push	{r4, r6, r7, r8, r9, lr}
   12c94:	vpush	{d8}
   12c98:	ldr	r4, [pc, #160]	; 12d40 <__assert_fail@plt+0x18d4>
   12c9c:	sub	sp, sp, #24
   12ca0:	bl	124a0 <__assert_fail@plt+0x1034>
   12ca4:	ldr	r3, [r4]
   12ca8:	ldr	r0, [r3, #116]	; 0x74
   12cac:	cmp	r0, #0
   12cb0:	beq	12cc4 <__assert_fail@plt+0x1858>
   12cb4:	ldr	r2, [pc, #136]	; 12d44 <__assert_fail@plt+0x18d8>
   12cb8:	ldr	r2, [r2]
   12cbc:	cmp	r2, #7
   12cc0:	bhi	12cd8 <__assert_fail@plt+0x186c>
   12cc4:	clz	r0, r0
   12cc8:	lsr	r0, r0, #5
   12ccc:	add	sp, sp, #24
   12cd0:	vpop	{d8}
   12cd4:	pop	{r4, r6, r7, r8, r9, pc}
   12cd8:	ldr	r2, [r3, #120]	; 0x78
   12cdc:	ldr	r3, [r3, #68]	; 0x44
   12ce0:	add	r0, r0, r2
   12ce4:	vldr	d1, [pc, #76]	; 12d38 <__assert_fail@plt+0x18cc>
   12ce8:	vmov	s15, r0
   12cec:	vldr	d5, [r3, #16]
   12cf0:	vldr	d6, [r3, #24]
   12cf4:	ldrd	r6, [r3]
   12cf8:	vcvt.f64.u32	d7, s15
   12cfc:	ldrd	r8, [r3, #8]
   12d00:	vdiv.f64	d8, d5, d7
   12d04:	vdiv.f64	d0, d6, d7
   12d08:	vmls.f64	d0, d8, d8
   12d0c:	bl	127c4 <__assert_fail@plt+0x1358>
   12d10:	mov	r3, r7
   12d14:	vstr	d8, [sp]
   12d18:	strd	r8, [sp, #8]
   12d1c:	mov	r2, r6
   12d20:	ldr	r0, [pc, #32]	; 12d48 <__assert_fail@plt+0x18dc>
   12d24:	vstr	d0, [sp, #16]
   12d28:	bl	11148 <printf@plt>
   12d2c:	ldr	r3, [r4]
   12d30:	ldr	r0, [r3, #116]	; 0x74
   12d34:	b	12cc4 <__assert_fail@plt+0x1858>
   12d38:	rscsle	sl, r1, #252, 18	; 0x3f0000
   12d3c:	svccc	0x0040624d
   12d40:	ldrdeq	r1, [r3], -r0
   12d44:	andeq	r1, r3, r0, asr #2
   12d48:	andeq	lr, r1, ip, asr #25
   12d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d50:	sub	sp, sp, #12
   12d54:	ldr	r3, [pc, #556]	; 12f88 <__assert_fail@plt+0x1b1c>
   12d58:	ldrb	r5, [r0, #8]
   12d5c:	mov	r6, r0
   12d60:	ldr	r3, [r3]
   12d64:	and	r5, r5, #15
   12d68:	tst	r3, #32
   12d6c:	lsl	r3, r5, #2
   12d70:	add	fp, r0, #8
   12d74:	str	r3, [sp, #4]
   12d78:	add	r4, r0, #28
   12d7c:	bne	12e90 <__assert_fail@plt+0x1a24>
   12d80:	ldr	r0, [pc, #516]	; 12f8c <__assert_fail@plt+0x1b20>
   12d84:	bl	11280 <puts@plt>
   12d88:	ldrb	r1, [r6, #8]
   12d8c:	ldrb	r3, [r6, #9]
   12d90:	ldr	r0, [pc, #504]	; 12f90 <__assert_fail@plt+0x1b24>
   12d94:	and	r2, r1, #15
   12d98:	lsr	r1, r1, #4
   12d9c:	bl	11148 <printf@plt>
   12da0:	ldrh	r1, [r6, #10]
   12da4:	cmp	r1, #8192	; 0x2000
   12da8:	rev16hi	r1, r1
   12dac:	uxthhi	r1, r1
   12db0:	ldrh	r2, [r6, #12]
   12db4:	ldr	r0, [pc, #472]	; 12f94 <__assert_fail@plt+0x1b28>
   12db8:	rev16	r2, r2
   12dbc:	uxth	r2, r2
   12dc0:	bl	11148 <printf@plt>
   12dc4:	ldrh	r1, [r6, #14]
   12dc8:	ldr	r0, [pc, #456]	; 12f98 <__assert_fail@plt+0x1b2c>
   12dcc:	rev16	r1, r1
   12dd0:	uxth	r1, r1
   12dd4:	lsl	r2, r1, #19
   12dd8:	lsr	r1, r1, #13
   12ddc:	lsr	r2, r2, #19
   12de0:	bl	11148 <printf@plt>
   12de4:	ldrh	r3, [r6, #18]
   12de8:	ldrb	r2, [r6, #17]
   12dec:	ldrb	r1, [r6, #16]
   12df0:	rev16	r3, r3
   12df4:	ldr	r0, [pc, #416]	; 12f9c <__assert_fail@plt+0x1b30>
   12df8:	uxth	r3, r3
   12dfc:	bl	11148 <printf@plt>
   12e00:	ldr	r0, [fp, #12]
   12e04:	bl	111e4 <inet_ntoa@plt>
   12e08:	mov	r1, r0
   12e0c:	ldr	r0, [pc, #396]	; 12fa0 <__assert_fail@plt+0x1b34>
   12e10:	bl	11148 <printf@plt>
   12e14:	ldr	r0, [fp, #16]
   12e18:	bl	111e4 <inet_ntoa@plt>
   12e1c:	mov	r1, r0
   12e20:	ldr	r0, [pc, #376]	; 12fa0 <__assert_fail@plt+0x1b34>
   12e24:	bl	11148 <printf@plt>
   12e28:	ldr	r3, [sp, #4]
   12e2c:	cmp	r3, #20
   12e30:	ble	12e54 <__assert_fail@plt+0x19e8>
   12e34:	sub	r5, r3, #20
   12e38:	ldr	r7, [pc, #356]	; 12fa4 <__assert_fail@plt+0x1b38>
   12e3c:	add	r5, r4, r5
   12e40:	ldrb	r1, [r4], #1
   12e44:	mov	r0, r7
   12e48:	bl	11148 <printf@plt>
   12e4c:	cmp	r5, r4
   12e50:	bne	12e40 <__assert_fail@plt+0x19d4>
   12e54:	mov	r0, #10
   12e58:	bl	11364 <putchar@plt>
   12e5c:	ldrb	r2, [r6, #8]
   12e60:	ldrb	r1, [r6, #17]
   12e64:	and	r2, r2, #15
   12e68:	cmp	r1, #6
   12e6c:	lsl	r3, r2, #2
   12e70:	add	r4, fp, r3
   12e74:	beq	12f24 <__assert_fail@plt+0x1ab8>
   12e78:	cmp	r1, #17
   12e7c:	beq	12f4c <__assert_fail@plt+0x1ae0>
   12e80:	cmp	r1, #1
   12e84:	beq	12ee8 <__assert_fail@plt+0x1a7c>
   12e88:	add	sp, sp, #12
   12e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e90:	ldr	r0, [pc, #272]	; 12fa8 <__assert_fail@plt+0x1b3c>
   12e94:	bl	11148 <printf@plt>
   12e98:	ldr	r2, [pc, #268]	; 12fac <__assert_fail@plt+0x1b40>
   12e9c:	ldrb	r1, [r6, #8]
   12ea0:	mov	sl, r2
   12ea4:	mov	r7, fp
   12ea8:	mov	r5, #0
   12eac:	ldr	r8, [pc, #252]	; 12fb0 <__assert_fail@plt+0x1b44>
   12eb0:	ldr	r9, [pc, #252]	; 12fb4 <__assert_fail@plt+0x1b48>
   12eb4:	b	12ec8 <__assert_fail@plt+0x1a5c>
   12eb8:	ldrb	r1, [r7, #1]!
   12ebc:	tst	r5, #1
   12ec0:	movne	r2, r9
   12ec4:	moveq	r2, sl
   12ec8:	add	r5, r5, #1
   12ecc:	mov	r0, r8
   12ed0:	bl	11148 <printf@plt>
   12ed4:	cmp	r5, #20
   12ed8:	bne	12eb8 <__assert_fail@plt+0x1a4c>
   12edc:	mov	r0, #10
   12ee0:	bl	11364 <putchar@plt>
   12ee4:	b	12d80 <__assert_fail@plt+0x1914>
   12ee8:	ldrh	r0, [r6, #10]
   12eec:	ldrb	r5, [fp, r2, lsl #2]
   12ef0:	ldrb	r2, [r4, #1]
   12ef4:	rev16	r0, r0
   12ef8:	mov	r1, r5
   12efc:	uxth	r0, r0
   12f00:	sub	r3, r0, r3
   12f04:	ldr	r0, [pc, #172]	; 12fb8 <__assert_fail@plt+0x1b4c>
   12f08:	bl	11148 <printf@plt>
   12f0c:	tst	r5, #247	; 0xf7
   12f10:	beq	12f64 <__assert_fail@plt+0x1af8>
   12f14:	mov	r0, #10
   12f18:	add	sp, sp, #12
   12f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f20:	b	11364 <putchar@plt>
   12f24:	ldrb	ip, [fp, r2, lsl #2]
   12f28:	ldrb	r1, [r4, #1]
   12f2c:	ldrb	r2, [r4, #2]
   12f30:	ldrb	r3, [r4, #3]
   12f34:	ldr	r0, [pc, #128]	; 12fbc <__assert_fail@plt+0x1b50>
   12f38:	add	r1, r1, ip, lsl #8
   12f3c:	add	r2, r3, r2, lsl #8
   12f40:	add	sp, sp, #12
   12f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f48:	b	11148 <printf@plt>
   12f4c:	ldrb	ip, [fp, r2, lsl #2]
   12f50:	ldrb	r1, [r4, #1]
   12f54:	ldrb	r2, [r4, #2]
   12f58:	ldrb	r3, [r4, #3]
   12f5c:	ldr	r0, [pc, #92]	; 12fc0 <__assert_fail@plt+0x1b54>
   12f60:	b	12f38 <__assert_fail@plt+0x1acc>
   12f64:	ldrb	ip, [r4, #6]
   12f68:	ldrb	r1, [r4, #4]
   12f6c:	ldrb	r2, [r4, #7]
   12f70:	ldrb	r3, [r4, #5]
   12f74:	ldr	r0, [pc, #72]	; 12fc4 <__assert_fail@plt+0x1b58>
   12f78:	add	r2, r2, ip, lsl #8
   12f7c:	add	r1, r3, r1, lsl #8
   12f80:	bl	11148 <printf@plt>
   12f84:	b	12f14 <__assert_fail@plt+0x1aa8>
   12f88:	andeq	r1, r3, r8, asr #13
   12f8c:	andeq	lr, r1, ip, lsl sp
   12f90:	andeq	lr, r1, r8, asr sp
   12f94:	andeq	lr, r1, r8, ror #26
   12f98:	andeq	lr, r1, r4, ror sp
   12f9c:	andeq	lr, r1, r0, lsl #27
   12fa0:	muleq	r1, r4, sp
   12fa4:	muleq	r1, ip, sp
   12fa8:	andeq	lr, r1, r4, lsl #26
   12fac:	andeq	pc, r1, r4, asr #30
   12fb0:	andeq	lr, r1, r4, lsl sp
   12fb4:	andeq	lr, r1, r4, ror r7
   12fb8:	strdeq	lr, [r1], -ip
   12fbc:	andeq	lr, r1, r4, lsr #27
   12fc0:	ldrdeq	lr, [r1], -r0
   12fc4:	andeq	lr, r1, ip, lsl lr
   12fc8:	push	{r4, r5, r6, lr}
   12fcc:	mov	r4, r0
   12fd0:	ldr	r0, [r0, #4]
   12fd4:	mov	r5, r1
   12fd8:	bl	111e4 <inet_ntoa@plt>
   12fdc:	mov	r1, r0
   12fe0:	ldr	r0, [pc, #16]	; 12ff8 <__assert_fail@plt+0x1b8c>
   12fe4:	bl	11148 <printf@plt>
   12fe8:	mov	r1, r5
   12fec:	mov	r0, r4
   12ff0:	pop	{r4, r5, r6, lr}
   12ff4:	b	12d4c <__assert_fail@plt+0x18e0>
   12ff8:	andeq	lr, r1, r4, lsr lr
   12ffc:	ldr	r3, [pc, #108]	; 13070 <__assert_fail@plt+0x1c04>
   13000:	push	{r4, lr}
   13004:	mov	r4, r0
   13008:	ldrb	ip, [r0]
   1300c:	ldrb	r2, [r0, #1]
   13010:	add	lr, r3, #240	; 0xf0
   13014:	b	13024 <__assert_fail@plt+0x1bb8>
   13018:	add	r3, r3, #12
   1301c:	cmp	r3, lr
   13020:	beq	13048 <__assert_fail@plt+0x1bdc>
   13024:	ldr	r0, [r3]
   13028:	cmp	ip, r0
   1302c:	bne	13018 <__assert_fail@plt+0x1bac>
   13030:	ldr	r0, [r3, #4]
   13034:	cmp	r2, r0
   13038:	bne	13018 <__assert_fail@plt+0x1bac>
   1303c:	ldr	r0, [r3, #8]
   13040:	bl	11280 <puts@plt>
   13044:	b	13050 <__assert_fail@plt+0x1be4>
   13048:	ldr	r0, [pc, #36]	; 13074 <__assert_fail@plt+0x1c08>
   1304c:	bl	11148 <printf@plt>
   13050:	ldr	r3, [pc, #32]	; 13078 <__assert_fail@plt+0x1c0c>
   13054:	ldr	r3, [r3]
   13058:	tst	r3, #32
   1305c:	popeq	{r4, pc}
   13060:	mov	r0, r4
   13064:	mov	r1, #0
   13068:	pop	{r4, lr}
   1306c:	b	12d4c <__assert_fail@plt+0x18e0>
   13070:	andeq	r1, r3, r4, lsl #8
   13074:	andeq	lr, r1, r8, asr lr
   13078:	andeq	r1, r3, r8, asr #13
   1307c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13080:	mov	r7, r0
   13084:	ldr	r5, [pc, #556]	; 132b8 <__assert_fail@plt+0x1e4c>
   13088:	sub	sp, sp, #84	; 0x54
   1308c:	ldr	r3, [r5]
   13090:	and	r3, r3, #3
   13094:	cmp	r3, #3
   13098:	beq	13278 <__assert_fail@plt+0x1e0c>
   1309c:	ldr	r4, [pc, #536]	; 132bc <__assert_fail@plt+0x1e50>
   130a0:	mov	r2, #32
   130a4:	mov	r1, #0
   130a8:	add	r0, sp, #8
   130ac:	bl	11358 <memset@plt>
   130b0:	ldr	r6, [pc, #520]	; 132c0 <__assert_fail@plt+0x1e54>
   130b4:	ldr	r3, [pc, #520]	; 132c4 <__assert_fail@plt+0x1e58>
   130b8:	ldr	r2, [pc, #520]	; 132c8 <__assert_fail@plt+0x1e5c>
   130bc:	ldr	r0, [r4]
   130c0:	mov	r1, #8
   130c4:	strd	r2, [sp, #8]
   130c8:	bl	14290 <__assert_fail@plt+0x2e24>
   130cc:	ldr	r0, [r4]
   130d0:	ldr	r1, [r6]
   130d4:	bl	14654 <__assert_fail@plt+0x31e8>
   130d8:	add	r2, sp, #8
   130dc:	ldr	r0, [r4]
   130e0:	ldr	r1, [pc, #484]	; 132cc <__assert_fail@plt+0x1e60>
   130e4:	bl	14648 <__assert_fail@plt+0x31dc>
   130e8:	mov	r1, r7
   130ec:	ldr	r0, [r4]
   130f0:	bl	1465c <__assert_fail@plt+0x31f0>
   130f4:	cmp	r0, #0
   130f8:	bne	1325c <__assert_fail@plt+0x1df0>
   130fc:	ldr	r3, [r5]
   13100:	tst	r3, #16
   13104:	bne	1320c <__assert_fail@plt+0x1da0>
   13108:	tst	r3, #64	; 0x40
   1310c:	bne	13184 <__assert_fail@plt+0x1d18>
   13110:	ldr	r3, [r4]
   13114:	ldr	r0, [r3, #28]
   13118:	ldr	r7, [r3, #52]	; 0x34
   1311c:	bl	111e4 <inet_ntoa@plt>
   13120:	ldr	r3, [r6]
   13124:	mov	r1, r7
   13128:	mov	r2, r0
   1312c:	ldr	r0, [pc, #412]	; 132d0 <__assert_fail@plt+0x1e64>
   13130:	bl	11148 <printf@plt>
   13134:	ldr	r3, [r5]
   13138:	tst	r3, #32
   1313c:	beq	13154 <__assert_fail@plt+0x1ce8>
   13140:	ldr	r3, [r4]
   13144:	ldr	r0, [pc, #392]	; 132d4 <__assert_fail@plt+0x1e68>
   13148:	ldr	r2, [r3, #60]	; 0x3c
   1314c:	mov	r1, r2
   13150:	bl	11148 <printf@plt>
   13154:	mov	r0, #10
   13158:	bl	11364 <putchar@plt>
   1315c:	ldr	r1, [pc, #372]	; 132d8 <__assert_fail@plt+0x1e6c>
   13160:	ldr	r0, [r4]
   13164:	bl	11f88 <__assert_fail@plt+0xb1c>
   13168:	ldr	r3, [r4]
   1316c:	mov	r5, r0
   13170:	ldr	r0, [r3, #52]	; 0x34
   13174:	bl	1a98c <argp_parse@@Base+0xf7c>
   13178:	mov	r0, r5
   1317c:	add	sp, sp, #84	; 0x54
   13180:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13184:	ldr	r3, [pc, #336]	; 132dc <__assert_fail@plt+0x1e70>
   13188:	ldr	r1, [r3]
   1318c:	tst	r1, #4
   13190:	bne	13270 <__assert_fail@plt+0x1e04>
   13194:	ands	r8, r1, #2
   13198:	beq	1328c <__assert_fail@plt+0x1e20>
   1319c:	mov	r8, #1
   131a0:	add	r9, sp, #40	; 0x28
   131a4:	mov	r2, #40	; 0x28
   131a8:	mov	r0, r9
   131ac:	mov	r1, #0
   131b0:	bl	11358 <memset@plt>
   131b4:	mov	r3, #68	; 0x44
   131b8:	mov	r2, #36	; 0x24
   131bc:	strb	r3, [sp, #40]	; 0x28
   131c0:	strb	r2, [sp, #41]	; 0x29
   131c4:	ldr	r3, [r4]
   131c8:	mov	r1, #5
   131cc:	strb	r1, [sp, #42]	; 0x2a
   131d0:	strb	r8, [sp, #43]	; 0x2b
   131d4:	mov	r1, #0
   131d8:	ldr	r0, [r3]
   131dc:	str	r2, [sp]
   131e0:	mov	r3, r9
   131e4:	mov	r2, #4
   131e8:	bl	1113c <setsockopt@plt>
   131ec:	cmp	r0, #0
   131f0:	bge	13110 <__assert_fail@plt+0x1ca4>
   131f4:	bl	11328 <__errno_location@plt>
   131f8:	ldr	r2, [pc, #224]	; 132e0 <__assert_fail@plt+0x1e74>
   131fc:	ldr	r1, [r0]
   13200:	mov	r0, #1
   13204:	bl	11268 <error@plt>
   13208:	b	13110 <__assert_fail@plt+0x1ca4>
   1320c:	mov	r7, #40	; 0x28
   13210:	mov	r2, r7
   13214:	mov	r1, #0
   13218:	add	r0, sp, r7
   1321c:	bl	11358 <memset@plt>
   13220:	ldr	r3, [r4]
   13224:	mov	r0, #7
   13228:	mov	r1, #39	; 0x27
   1322c:	mov	r2, #4
   13230:	strb	r1, [sp, #41]	; 0x29
   13234:	strb	r0, [sp, #40]	; 0x28
   13238:	strb	r2, [sp, #42]	; 0x2a
   1323c:	mov	r1, #0
   13240:	ldr	r0, [r3]
   13244:	add	r3, sp, r7
   13248:	str	r7, [sp]
   1324c:	bl	1113c <setsockopt@plt>
   13250:	cmp	r0, #0
   13254:	bge	13110 <__assert_fail@plt+0x1ca4>
   13258:	b	131f4 <__assert_fail@plt+0x1d88>
   1325c:	ldr	r2, [pc, #128]	; 132e4 <__assert_fail@plt+0x1e78>
   13260:	mov	r1, #0
   13264:	mov	r0, #1
   13268:	bl	11268 <error@plt>
   1326c:	b	130fc <__assert_fail@plt+0x1c90>
   13270:	mov	r8, #3
   13274:	b	131a0 <__assert_fail@plt+0x1d34>
   13278:	ldr	r2, [pc, #104]	; 132e8 <__assert_fail@plt+0x1e7c>
   1327c:	mov	r1, #0
   13280:	mov	r0, #1
   13284:	bl	11268 <error@plt>
   13288:	b	1309c <__assert_fail@plt+0x1c30>
   1328c:	mov	r7, #40	; 0x28
   13290:	add	r9, sp, #40	; 0x28
   13294:	mov	r2, r7
   13298:	mov	r0, r9
   1329c:	mov	r1, r8
   132a0:	bl	11358 <memset@plt>
   132a4:	mov	r3, #68	; 0x44
   132a8:	strb	r7, [sp, #41]	; 0x29
   132ac:	mov	r2, r7
   132b0:	strb	r3, [sp, #40]	; 0x28
   132b4:	b	131c4 <__assert_fail@plt+0x1d58>
   132b8:	andeq	r1, r3, r8, asr #13
   132bc:	ldrdeq	r1, [r3], -r0
   132c0:	andeq	r1, r3, r0, asr #2
   132c4:	bicmi	ip, sp, r4, ror #26
   132c8:			; <UNDEFINED> instruction: 0xff800000
   132cc:	andeq	r3, r1, ip, asr #18
   132d0:	andeq	lr, r1, ip, lsr #29
   132d4:	andeq	lr, r1, ip, asr #29
   132d8:	muleq	r1, r0, ip
   132dc:	ldrdeq	r1, [r3], -r4
   132e0:	andeq	lr, r1, r0, lsr #29
   132e4:	muleq	r1, r0, lr
   132e8:	andeq	lr, r1, r0, ror lr
   132ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132f0:	vpush	{d8}
   132f4:	mov	r6, r0
   132f8:	mov	r8, r1
   132fc:	mov	r1, #0
   13300:	sub	sp, sp, #36	; 0x24
   13304:	add	r0, sp, #8
   13308:	mov	r7, r3
   1330c:	ldr	r5, [sp, #88]	; 0x58
   13310:	bl	1125c <gettimeofday@plt>
   13314:	ldr	r3, [sp, #80]	; 0x50
   13318:	ldrb	r4, [r3]
   1331c:	and	r4, r4, #15
   13320:	lsl	r4, r4, #2
   13324:	sub	r5, r5, r4
   13328:	sub	r3, r5, #8
   1332c:	cmp	r3, #7
   13330:	bhi	13618 <__assert_fail@plt+0x21ac>
   13334:	vldr	d8, [pc, #940]	; 136e8 <__assert_fail@plt+0x227c>
   13338:	mov	r8, #0
   1333c:	ldr	r3, [pc, #1020]	; 13740 <__assert_fail@plt+0x22d4>
   13340:	ldr	r3, [r3]
   13344:	tst	r3, #8
   13348:	bne	133f0 <__assert_fail@plt+0x1f84>
   1334c:	tst	r3, #1
   13350:	bne	13400 <__assert_fail@plt+0x1f94>
   13354:	ldr	r0, [r7, #4]
   13358:	bl	111e4 <inet_ntoa@plt>
   1335c:	ldr	r3, [sp, #84]	; 0x54
   13360:	mov	r1, r5
   13364:	ldrh	r3, [r3, #6]
   13368:	rev16	r3, r3
   1336c:	uxth	r3, r3
   13370:	mov	r2, r0
   13374:	ldr	r0, [pc, #892]	; 136f8 <__assert_fail@plt+0x228c>
   13378:	bl	11148 <printf@plt>
   1337c:	ldr	r3, [sp, #80]	; 0x50
   13380:	ldr	r0, [pc, #884]	; 136fc <__assert_fail@plt+0x2290>
   13384:	ldrb	r1, [r3, #8]
   13388:	bl	11148 <printf@plt>
   1338c:	cmp	r8, #0
   13390:	bne	138b8 <__assert_fail@plt+0x244c>
   13394:	cmp	r6, #0
   13398:	bne	138ac <__assert_fail@plt+0x2440>
   1339c:	cmp	r4, #20
   133a0:	ldr	r3, [sp, #80]	; 0x50
   133a4:	ldrgt	fp, [pc, #852]	; 13700 <__assert_fail@plt+0x2294>
   133a8:	add	sl, r3, #20
   133ac:	ble	133e8 <__assert_fail@plt+0x1f7c>
   133b0:	ldrb	r1, [sl]
   133b4:	cmp	r1, #7
   133b8:	beq	13450 <__assert_fail@plt+0x1fe4>
   133bc:	bhi	13420 <__assert_fail@plt+0x1fb4>
   133c0:	cmp	r1, #0
   133c4:	beq	133e8 <__assert_fail@plt+0x1f7c>
   133c8:	cmp	r1, #1
   133cc:	bne	13540 <__assert_fail@plt+0x20d4>
   133d0:	ldr	r0, [pc, #812]	; 13704 <__assert_fail@plt+0x2298>
   133d4:	sub	r4, r4, #1
   133d8:	bl	11148 <printf@plt>
   133dc:	cmp	r4, #20
   133e0:	add	sl, sl, #1
   133e4:	bgt	133b0 <__assert_fail@plt+0x1f44>
   133e8:	mov	r0, #10
   133ec:	bl	11364 <putchar@plt>
   133f0:	mov	r0, #0
   133f4:	add	sp, sp, #36	; 0x24
   133f8:	vpop	{d8}
   133fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13400:	ldr	r3, [pc, #760]	; 13700 <__assert_fail@plt+0x2294>
   13404:	mov	r0, #8
   13408:	ldr	r1, [r3]
   1340c:	bl	113f4 <putc@plt>
   13410:	mov	r0, #0
   13414:	add	sp, sp, #36	; 0x24
   13418:	vpop	{d8}
   1341c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13420:	cmp	r1, #131	; 0x83
   13424:	beq	13804 <__assert_fail@plt+0x2398>
   13428:	cmp	r1, #137	; 0x89
   1342c:	beq	13550 <__assert_fail@plt+0x20e4>
   13430:	cmp	r1, #68	; 0x44
   13434:	bne	13540 <__assert_fail@plt+0x20d4>
   13438:	ldrb	r7, [sl, #1]
   1343c:	cmp	r7, #8
   13440:	bgt	13698 <__assert_fail@plt+0x222c>
   13444:	add	sl, sl, #2
   13448:	sub	r4, r4, #3
   1344c:	b	133dc <__assert_fail@plt+0x1f70>
   13450:	ldrb	r6, [sl, #1]
   13454:	ldrb	r3, [sl, #2]
   13458:	sub	r5, r4, #2
   1345c:	add	sl, sl, #2
   13460:	cmp	r6, r3
   13464:	movge	r6, r3
   13468:	sub	r7, r6, #4
   1346c:	cmp	r7, #0
   13470:	ble	13448 <__assert_fail@plt+0x1fdc>
   13474:	ldr	r3, [pc, #652]	; 13708 <__assert_fail@plt+0x229c>
   13478:	ldr	r3, [r3]
   1347c:	cmp	r7, r3
   13480:	beq	1384c <__assert_fail@plt+0x23e0>
   13484:	cmp	r7, #39	; 0x27
   13488:	ble	13834 <__assert_fail@plt+0x23c8>
   1348c:	ldr	r2, [pc, #628]	; 13708 <__assert_fail@plt+0x229c>
   13490:	mov	r3, #0
   13494:	str	r3, [r2]
   13498:	sub	r6, r6, #5
   1349c:	ldr	r0, [pc, #616]	; 1370c <__assert_fail@plt+0x22a0>
   134a0:	bl	11148 <printf@plt>
   134a4:	bic	r3, r6, #3
   134a8:	sub	r6, r4, #6
   134ac:	sub	r6, r6, r3
   134b0:	sub	r4, r4, #42	; 0x2a
   134b4:	mov	r7, #10
   134b8:	b	134e4 <__assert_fail@plt+0x2078>
   134bc:	bl	11148 <printf@plt>
   134c0:	sub	r3, r5, #4
   134c4:	cmp	r3, r6
   134c8:	mov	r0, r7
   134cc:	beq	13538 <__assert_fail@plt+0x20cc>
   134d0:	cmp	r3, r4
   134d4:	beq	13608 <__assert_fail@plt+0x219c>
   134d8:	ldr	r1, [fp]
   134dc:	mov	r5, r3
   134e0:	bl	113f4 <putc@plt>
   134e4:	ldrb	r2, [sl, #1]
   134e8:	ldrb	r1, [sl, #2]
   134ec:	ldrb	r3, [sl, #3]
   134f0:	ldr	r0, [pc, #536]	; 13710 <__assert_fail@plt+0x22a4>
   134f4:	add	r1, r1, r2, lsl #8
   134f8:	ldrb	r2, [sl, #4]!
   134fc:	add	r3, r3, r1, lsl #8
   13500:	adds	r3, r2, r3, lsl #8
   13504:	beq	134bc <__assert_fail@plt+0x2050>
   13508:	rev	r0, r3
   1350c:	bl	12bb4 <__assert_fail@plt+0x1748>
   13510:	mov	r1, r0
   13514:	mov	r8, r0
   13518:	ldr	r0, [pc, #520]	; 13728 <__assert_fail@plt+0x22bc>
   1351c:	bl	11148 <printf@plt>
   13520:	mov	r0, r8
   13524:	bl	1a98c <argp_parse@@Base+0xf7c>
   13528:	sub	r3, r5, #4
   1352c:	cmp	r3, r6
   13530:	mov	r0, r7
   13534:	bne	134d0 <__assert_fail@plt+0x2064>
   13538:	sub	r4, r5, #5
   1353c:	b	133dc <__assert_fail@plt+0x1f70>
   13540:	ldr	r0, [pc, #460]	; 13714 <__assert_fail@plt+0x22a8>
   13544:	bl	11148 <printf@plt>
   13548:	sub	r4, r4, #1
   1354c:	b	133dc <__assert_fail@plt+0x1f70>
   13550:	mov	r1, #83	; 0x53
   13554:	ldr	r0, [pc, #444]	; 13718 <__assert_fail@plt+0x22ac>
   13558:	bl	11148 <printf@plt>
   1355c:	ldrb	r6, [sl, #1]
   13560:	add	sl, sl, #2
   13564:	cmp	r6, #4
   13568:	mov	r5, r6
   1356c:	ble	13448 <__assert_fail@plt+0x1fdc>
   13570:	mov	r8, sl
   13574:	mov	r7, #10
   13578:	b	13598 <__assert_fail@plt+0x212c>
   1357c:	sub	r5, r5, #4
   13580:	bl	11148 <printf@plt>
   13584:	cmp	r5, #4
   13588:	ble	135e8 <__assert_fail@plt+0x217c>
   1358c:	ldr	r1, [fp]
   13590:	mov	r0, r7
   13594:	bl	113f4 <putc@plt>
   13598:	ldrb	r2, [r8, #1]
   1359c:	ldrb	r1, [r8, #2]
   135a0:	ldrb	r3, [r8, #3]
   135a4:	ldr	r0, [pc, #356]	; 13710 <__assert_fail@plt+0x22a4>
   135a8:	add	r1, r1, r2, lsl #8
   135ac:	ldrb	r2, [r8, #4]!
   135b0:	add	r3, r3, r1, lsl #8
   135b4:	adds	r3, r2, r3, lsl #8
   135b8:	beq	1357c <__assert_fail@plt+0x2110>
   135bc:	rev	r0, r3
   135c0:	bl	12bb4 <__assert_fail@plt+0x1748>
   135c4:	sub	r5, r5, #4
   135c8:	mov	r1, r0
   135cc:	mov	r9, r0
   135d0:	ldr	r0, [pc, #336]	; 13728 <__assert_fail@plt+0x22bc>
   135d4:	bl	11148 <printf@plt>
   135d8:	mov	r0, r9
   135dc:	bl	1a98c <argp_parse@@Base+0xf7c>
   135e0:	cmp	r5, #4
   135e4:	bgt	1358c <__assert_fail@plt+0x2120>
   135e8:	sub	r6, r6, #5
   135ec:	bic	r3, r6, #3
   135f0:	mov	r6, r3
   135f4:	sub	r4, r4, r6
   135f8:	add	r3, r3, #4
   135fc:	add	sl, sl, r3
   13600:	sub	r4, r4, #7
   13604:	b	133dc <__assert_fail@plt+0x1f70>
   13608:	ldr	r0, [pc, #268]	; 1371c <__assert_fail@plt+0x22b0>
   1360c:	sub	r4, r5, #5
   13610:	bl	11148 <printf@plt>
   13614:	b	133dc <__assert_fail@plt+0x1f70>
   13618:	ldr	r2, [sp, #84]	; 0x54
   1361c:	add	ip, sp, #16
   13620:	mov	r3, ip
   13624:	ldr	r0, [r2, #8]!
   13628:	ldr	r1, [r2, #4]
   1362c:	stmia	r3!, {r0, r1}
   13630:	mov	r1, ip
   13634:	add	r0, sp, #8
   13638:	bl	1277c <__assert_fail@plt+0x1310>
   1363c:	vldr	s15, [sp, #12]
   13640:	vldr	d2, [pc, #168]	; 136f0 <__assert_fail@plt+0x2284>
   13644:	vldr	d5, [r8]
   13648:	vldr	d6, [r8, #24]
   1364c:	vcvt.f64.s32	d3, s15
   13650:	vldr	s15, [sp, #8]
   13654:	vcvt.f64.s32	d4, s15
   13658:	vldr	d7, [r8, #16]
   1365c:	vdiv.f64	d8, d3, d2
   13660:	vmla.f64	d8, d4, d2
   13664:	vadd.f64	d7, d7, d8
   13668:	vcmpe.f64	d8, d5
   1366c:	vmla.f64	d6, d8, d8
   13670:	vmrs	APSR_nzcv, fpscr
   13674:	vstr	d7, [r8, #16]
   13678:	vldr	d7, [r8, #8]
   1367c:	vstrmi	d8, [r8]
   13680:	vstr	d6, [r8, #24]
   13684:	vcmpe.f64	d8, d7
   13688:	vmrs	APSR_nzcv, fpscr
   1368c:	vstrgt	d8, [r8, #8]
   13690:	mov	r8, #1
   13694:	b	1333c <__assert_fail@plt+0x1ed0>
   13698:	ldrb	r3, [sl, #3]
   1369c:	ldr	r0, [pc, #124]	; 13720 <__assert_fail@plt+0x22b4>
   136a0:	ldrb	r5, [sl, #2]
   136a4:	mov	r6, r3
   136a8:	str	r3, [sp, #4]
   136ac:	bl	11148 <printf@plt>
   136b0:	tst	r6, #15
   136b4:	add	r3, sl, #4
   136b8:	sub	r8, r4, #4
   136bc:	beq	138c8 <__assert_fail@plt+0x245c>
   136c0:	cmp	r7, r5
   136c4:	movlt	r2, r7
   136c8:	movge	r2, r5
   136cc:	str	r2, [sp]
   136d0:	sub	r4, r4, #8
   136d4:	add	r6, sl, #8
   136d8:	mov	r7, r3
   136dc:	mov	r5, #9
   136e0:	b	13770 <__assert_fail@plt+0x2304>
   136e4:	nop			; (mov r0, r0)
	...
   136f4:	addmi	r4, pc, r0
   136f8:	andeq	lr, r1, r0, ror #29
   136fc:	andeq	lr, r1, r0, lsl #30
   13700:	andeq	r1, r3, ip, lsr #12
   13704:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13708:	andeq	r1, r3, r8, asr r6
   1370c:	andeq	lr, r1, ip, asr #30
   13710:	andeq	lr, r1, ip, lsr #30
   13714:	andeq	lr, r1, r4, lsr #31
   13718:	andeq	lr, r1, r0, lsr #30
   1371c:	andeq	lr, r1, r4, asr pc
   13720:	andeq	lr, r1, r8, ror #30
   13724:	andeq	lr, r1, r4, lsl #31
   13728:	andeq	lr, r1, r8, lsr pc
   1372c:	andeq	r1, r3, ip, asr r6
   13730:	andeq	lr, r1, ip, lsr pc
   13734:	andeq	lr, r1, r8, lsl pc
   13738:	andeq	lr, r1, r8, lsl #30
   1373c:	andeq	lr, r1, r0, ror pc
   13740:	andeq	r1, r3, r8, asr #13
   13744:	andeq	lr, r1, r8, ror pc
   13748:	ldr	r1, [fp]
   1374c:	mov	r0, #10
   13750:	bl	113f4 <putc@plt>
   13754:	ldr	r3, [sp]
   13758:	sub	r4, r4, #4
   1375c:	cmp	r9, r3
   13760:	add	r6, r6, #4
   13764:	add	r7, r7, #4
   13768:	add	r5, r5, #4
   1376c:	bge	137e0 <__assert_fail@plt+0x2374>
   13770:	subs	r2, r5, #4
   13774:	submi	r2, r5, #1
   13778:	mov	r1, #16
   1377c:	lsr	ip, r2, #31
   13780:	add	r2, ip, r2, asr #2
   13784:	and	r2, r2, #1
   13788:	sub	r2, r2, ip
   1378c:	cmp	r2, #1
   13790:	mov	r9, r5
   13794:	mov	r8, r4
   13798:	mov	sl, r6
   1379c:	add	r0, sp, r1
   137a0:	beq	1380c <__assert_fail@plt+0x23a0>
   137a4:	ldr	r2, [r7]
   137a8:	rev	r2, r2
   137ac:	bl	12844 <__assert_fail@plt+0x13d8>
   137b0:	mov	r1, r0
   137b4:	ldr	r0, [pc, #-128]	; 1373c <__assert_fail@plt+0x22d0>
   137b8:	bl	11148 <printf@plt>
   137bc:	ldr	r3, [pc, #-132]	; 13740 <__assert_fail@plt+0x22d4>
   137c0:	ldr	r2, [r3]
   137c4:	tst	r2, #32
   137c8:	beq	13748 <__assert_fail@plt+0x22dc>
   137cc:	ldr	r1, [r7]
   137d0:	ldr	r0, [pc, #-148]	; 13744 <__assert_fail@plt+0x22d8>
   137d4:	rev	r1, r1
   137d8:	bl	11148 <printf@plt>
   137dc:	b	13748 <__assert_fail@plt+0x22dc>
   137e0:	ldr	r3, [sp, #4]
   137e4:	tst	r3, #240	; 0xf0
   137e8:	subeq	r4, r8, #1
   137ec:	beq	133dc <__assert_fail@plt+0x1f70>
   137f0:	lsr	r1, r3, #4
   137f4:	ldr	r0, [pc, #-216]	; 13724 <__assert_fail@plt+0x22b8>
   137f8:	sub	r4, r8, #1
   137fc:	bl	11148 <printf@plt>
   13800:	b	133dc <__assert_fail@plt+0x1f70>
   13804:	mov	r1, #76	; 0x4c
   13808:	b	13554 <__assert_fail@plt+0x20e8>
   1380c:	ldr	r0, [r7]
   13810:	bl	12bb4 <__assert_fail@plt+0x1748>
   13814:	mov	r8, r0
   13818:	mov	r1, r0
   1381c:	ldr	r0, [pc, #-252]	; 13728 <__assert_fail@plt+0x22bc>
   13820:	bl	11148 <printf@plt>
   13824:	mov	r0, r8
   13828:	bl	1a98c <argp_parse@@Base+0xf7c>
   1382c:	mov	r8, r4
   13830:	b	13754 <__assert_fail@plt+0x22e8>
   13834:	ldr	r0, [pc, #-272]	; 1372c <__assert_fail@plt+0x22c0>
   13838:	mov	r2, r7
   1383c:	mov	r1, sl
   13840:	str	r7, [r0, #-4]
   13844:	bl	11178 <memmove@plt>
   13848:	b	13498 <__assert_fail@plt+0x202c>
   1384c:	ldr	r3, [sp, #80]	; 0x50
   13850:	add	r3, r3, #22
   13854:	cmp	sl, r3
   13858:	bne	13484 <__assert_fail@plt+0x2018>
   1385c:	mov	r2, r7
   13860:	ldr	r1, [pc, #-316]	; 1372c <__assert_fail@plt+0x22c0>
   13864:	mov	r0, sl
   13868:	bl	111d8 <memcmp@plt>
   1386c:	cmp	r0, #0
   13870:	bne	13484 <__assert_fail@plt+0x2018>
   13874:	ldr	r3, [pc, #-316]	; 13740 <__assert_fail@plt+0x22d4>
   13878:	ldr	r3, [r3]
   1387c:	tst	r3, #1
   13880:	bne	13484 <__assert_fail@plt+0x2018>
   13884:	ldr	r0, [pc, #-348]	; 13730 <__assert_fail@plt+0x22c4>
   13888:	bl	11148 <printf@plt>
   1388c:	subs	r3, r6, #1
   13890:	addmi	r6, r6, #2
   13894:	movpl	r6, r3
   13898:	bic	r3, r6, #3
   1389c:	sub	r4, r5, r3
   138a0:	sub	r4, r4, #1
   138a4:	add	sl, sl, r3
   138a8:	b	133dc <__assert_fail@plt+0x1f70>
   138ac:	ldr	r0, [pc, #-384]	; 13734 <__assert_fail@plt+0x22c8>
   138b0:	bl	11148 <printf@plt>
   138b4:	b	1339c <__assert_fail@plt+0x1f30>
   138b8:	vmov	r2, r3, d8
   138bc:	ldr	r0, [pc, #-396]	; 13738 <__assert_fail@plt+0x22cc>
   138c0:	bl	11148 <printf@plt>
   138c4:	b	13394 <__assert_fail@plt+0x1f28>
   138c8:	cmp	r7, r5
   138cc:	movlt	r5, r7
   138d0:	ldr	r9, [pc, #-412]	; 1373c <__assert_fail@plt+0x22d0>
   138d4:	mov	sl, r3
   138d8:	mov	r4, #5
   138dc:	add	r7, sp, #16
   138e0:	mov	r6, #16
   138e4:	b	13908 <__assert_fail@plt+0x249c>
   138e8:	add	r4, r4, #4
   138ec:	ldr	r1, [fp]
   138f0:	mov	r0, #10
   138f4:	bl	113f4 <putc@plt>
   138f8:	cmp	r4, r5
   138fc:	sub	r8, r8, #4
   13900:	add	sl, sl, #4
   13904:	bge	137e0 <__assert_fail@plt+0x2374>
   13908:	ldr	r2, [sl]
   1390c:	mov	r1, r6
   13910:	rev	r2, r2
   13914:	mov	r0, r7
   13918:	bl	12844 <__assert_fail@plt+0x13d8>
   1391c:	mov	r1, r0
   13920:	mov	r0, r9
   13924:	bl	11148 <printf@plt>
   13928:	ldr	r3, [pc, #-496]	; 13740 <__assert_fail@plt+0x22d4>
   1392c:	ldr	r3, [r3]
   13930:	tst	r3, #32
   13934:	beq	138e8 <__assert_fail@plt+0x247c>
   13938:	ldr	r1, [sl]
   1393c:	ldr	r0, [pc, #-512]	; 13744 <__assert_fail@plt+0x22d8>
   13940:	rev	r1, r1
   13944:	bl	11148 <printf@plt>
   13948:	b	138e8 <__assert_fail@plt+0x247c>
   1394c:	subs	ip, r0, #0
   13950:	blt	13ae0 <__assert_fail@plt+0x2674>
   13954:	cmp	ip, #1
   13958:	push	{r4, r5, lr}
   1395c:	sub	sp, sp, #20
   13960:	ble	139a8 <__assert_fail@plt+0x253c>
   13964:	cmp	ip, #2
   13968:	bne	1399c <__assert_fail@plt+0x2530>
   1396c:	mov	lr, r3
   13970:	ldr	r3, [pc, #520]	; 13b80 <__assert_fail@plt+0x2714>
   13974:	ldr	r3, [r3]
   13978:	tst	r3, #32
   1397c:	bne	139d0 <__assert_fail@plt+0x2564>
   13980:	ldr	r3, [pc, #508]	; 13b84 <__assert_fail@plt+0x2718>
   13984:	ldr	r2, [sp, #36]	; 0x24
   13988:	ldr	r3, [r3]
   1398c:	ldr	r2, [r2, #24]
   13990:	ldr	r3, [r3, #28]
   13994:	cmp	r2, r3
   13998:	beq	139d0 <__assert_fail@plt+0x2564>
   1399c:	mov	r0, #0
   139a0:	add	sp, sp, #20
   139a4:	pop	{r4, r5, pc}
   139a8:	ldr	ip, [sp, #40]	; 0x28
   139ac:	str	ip, [sp, #8]
   139b0:	ldr	ip, [sp, #36]	; 0x24
   139b4:	str	ip, [sp, #4]
   139b8:	ldr	ip, [sp, #32]
   139bc:	str	ip, [sp]
   139c0:	bl	132ec <__assert_fail@plt+0x1e80>
   139c4:	mov	r0, #0
   139c8:	add	sp, sp, #20
   139cc:	pop	{r4, r5, pc}
   139d0:	ldr	r3, [sp, #32]
   139d4:	mov	r0, lr
   139d8:	mov	r1, #16
   139dc:	ldrb	r4, [r3]
   139e0:	bl	12a6c <__assert_fail@plt+0x1600>
   139e4:	ldr	r3, [sp, #40]	; 0x28
   139e8:	and	r4, r4, #15
   139ec:	sub	r1, r3, r4, lsl #2
   139f0:	mov	r2, r0
   139f4:	mov	r5, r0
   139f8:	ldr	r0, [pc, #392]	; 13b88 <__assert_fail@plt+0x271c>
   139fc:	bl	11148 <printf@plt>
   13a00:	mov	r0, r5
   13a04:	bl	1a98c <argp_parse@@Base+0xf7c>
   13a08:	ldr	r2, [sp, #36]	; 0x24
   13a0c:	ldr	r3, [pc, #376]	; 13b8c <__assert_fail@plt+0x2720>
   13a10:	ldrb	r1, [r2]
   13a14:	ldr	r2, [r3, #240]	; 0xf0
   13a18:	cmp	r2, r1
   13a1c:	beq	13b18 <__assert_fail@plt+0x26ac>
   13a20:	ldr	r2, [r3, #256]	; 0x100
   13a24:	cmp	r1, r2
   13a28:	beq	13b20 <__assert_fail@plt+0x26b4>
   13a2c:	ldr	r2, [r3, #272]	; 0x110
   13a30:	cmp	r1, r2
   13a34:	beq	13b28 <__assert_fail@plt+0x26bc>
   13a38:	ldr	r2, [r3, #288]	; 0x120
   13a3c:	cmp	r1, r2
   13a40:	beq	13b30 <__assert_fail@plt+0x26c4>
   13a44:	ldr	r2, [r3, #304]	; 0x130
   13a48:	cmp	r1, r2
   13a4c:	beq	13b38 <__assert_fail@plt+0x26cc>
   13a50:	ldr	r2, [r3, #320]	; 0x140
   13a54:	cmp	r1, r2
   13a58:	beq	13b40 <__assert_fail@plt+0x26d4>
   13a5c:	ldr	r2, [r3, #336]	; 0x150
   13a60:	cmp	r1, r2
   13a64:	beq	13b48 <__assert_fail@plt+0x26dc>
   13a68:	ldr	r2, [r3, #352]	; 0x160
   13a6c:	cmp	r1, r2
   13a70:	beq	13b50 <__assert_fail@plt+0x26e4>
   13a74:	ldr	r2, [r3, #368]	; 0x170
   13a78:	cmp	r1, r2
   13a7c:	beq	13b58 <__assert_fail@plt+0x26ec>
   13a80:	ldr	r2, [r3, #384]	; 0x180
   13a84:	cmp	r1, r2
   13a88:	beq	13b60 <__assert_fail@plt+0x26f4>
   13a8c:	ldr	r2, [r3, #400]	; 0x190
   13a90:	cmp	r1, r2
   13a94:	beq	13b68 <__assert_fail@plt+0x26fc>
   13a98:	ldr	r2, [r3, #416]	; 0x1a0
   13a9c:	cmp	r1, r2
   13aa0:	beq	13b70 <__assert_fail@plt+0x2704>
   13aa4:	ldr	r2, [r3, #432]	; 0x1b0
   13aa8:	cmp	r1, r2
   13aac:	beq	13b78 <__assert_fail@plt+0x270c>
   13ab0:	ldr	r2, [r3, #448]	; 0x1c0
   13ab4:	cmp	r1, r2
   13ab8:	beq	13ae8 <__assert_fail@plt+0x267c>
   13abc:	ldr	r3, [r3, #464]	; 0x1d0
   13ac0:	cmp	r1, r3
   13ac4:	ldreq	r4, [pc, #196]	; 13b90 <__assert_fail@plt+0x2724>
   13ac8:	beq	13aec <__assert_fail@plt+0x2680>
   13acc:	ldr	r0, [pc, #192]	; 13b94 <__assert_fail@plt+0x2728>
   13ad0:	bl	11148 <printf@plt>
   13ad4:	mov	r0, #0
   13ad8:	add	sp, sp, #20
   13adc:	pop	{r4, r5, pc}
   13ae0:	mov	r0, #0
   13ae4:	bx	lr
   13ae8:	ldr	r4, [pc, #168]	; 13b98 <__assert_fail@plt+0x272c>
   13aec:	ldr	r0, [r4, #4]
   13af0:	cmp	r0, #0
   13af4:	beq	13afc <__assert_fail@plt+0x2690>
   13af8:	bl	11280 <puts@plt>
   13afc:	ldr	r3, [r4, #8]
   13b00:	cmp	r3, #0
   13b04:	beq	1399c <__assert_fail@plt+0x2530>
   13b08:	ldr	r1, [r4, #12]
   13b0c:	ldr	r0, [sp, #36]	; 0x24
   13b10:	blx	r3
   13b14:	b	1399c <__assert_fail@plt+0x2530>
   13b18:	add	r4, r3, #240	; 0xf0
   13b1c:	b	13aec <__assert_fail@plt+0x2680>
   13b20:	add	r4, r3, #256	; 0x100
   13b24:	b	13aec <__assert_fail@plt+0x2680>
   13b28:	add	r4, r3, #272	; 0x110
   13b2c:	b	13aec <__assert_fail@plt+0x2680>
   13b30:	add	r4, r3, #288	; 0x120
   13b34:	b	13aec <__assert_fail@plt+0x2680>
   13b38:	add	r4, r3, #304	; 0x130
   13b3c:	b	13aec <__assert_fail@plt+0x2680>
   13b40:	add	r4, r3, #320	; 0x140
   13b44:	b	13aec <__assert_fail@plt+0x2680>
   13b48:	add	r4, r3, #336	; 0x150
   13b4c:	b	13aec <__assert_fail@plt+0x2680>
   13b50:	add	r4, r3, #352	; 0x160
   13b54:	b	13aec <__assert_fail@plt+0x2680>
   13b58:	add	r4, r3, #368	; 0x170
   13b5c:	b	13aec <__assert_fail@plt+0x2680>
   13b60:	ldr	r4, [pc, #52]	; 13b9c <__assert_fail@plt+0x2730>
   13b64:	b	13aec <__assert_fail@plt+0x2680>
   13b68:	ldr	r4, [pc, #48]	; 13ba0 <__assert_fail@plt+0x2734>
   13b6c:	b	13aec <__assert_fail@plt+0x2680>
   13b70:	ldr	r4, [pc, #44]	; 13ba4 <__assert_fail@plt+0x2738>
   13b74:	b	13aec <__assert_fail@plt+0x2680>
   13b78:	ldr	r4, [pc, #40]	; 13ba8 <__assert_fail@plt+0x273c>
   13b7c:	b	13aec <__assert_fail@plt+0x2680>
   13b80:	andeq	r1, r3, r8, asr #13
   13b84:	ldrdeq	r1, [r3], -r0
   13b88:			; <UNDEFINED> instruction: 0x0001efb8
   13b8c:	andeq	r1, r3, r4, lsl #8
   13b90:	ldrdeq	r1, [r3], -r4
   13b94:	andeq	lr, r1, ip, asr #31
   13b98:	andeq	r1, r3, r4, asr #11
   13b9c:	andeq	r1, r3, r4, lsl #11
   13ba0:	muleq	r3, r4, r5
   13ba4:	andeq	r1, r3, r4, lsr #11
   13ba8:			; <UNDEFINED> instruction: 0x000315b4
   13bac:	ldr	ip, [pc, #444]	; 13d70 <__assert_fail@plt+0x2904>
   13bb0:	push	{r4, r5, r6, r7, r8, lr}
   13bb4:	ldr	ip, [ip]
   13bb8:	tst	ip, #32
   13bbc:	bne	13bd8 <__assert_fail@plt+0x276c>
   13bc0:	ldr	ip, [pc, #428]	; 13d74 <__assert_fail@plt+0x2908>
   13bc4:	ldr	lr, [r2, #24]
   13bc8:	ldr	ip, [ip]
   13bcc:	ldr	ip, [ip, #28]
   13bd0:	cmp	lr, ip
   13bd4:	popne	{r4, r5, r6, r7, r8, pc}
   13bd8:	ldrb	r6, [r1]
   13bdc:	mov	r1, #16
   13be0:	mov	r4, r3
   13be4:	mov	r5, r2
   13be8:	bl	12a6c <__assert_fail@plt+0x1600>
   13bec:	and	r6, r6, #15
   13bf0:	sub	r1, r4, r6, lsl #2
   13bf4:	mov	r2, r0
   13bf8:	mov	r7, r0
   13bfc:	ldr	r0, [pc, #372]	; 13d78 <__assert_fail@plt+0x290c>
   13c00:	bl	11148 <printf@plt>
   13c04:	mov	r0, r7
   13c08:	bl	1a98c <argp_parse@@Base+0xf7c>
   13c0c:	ldr	r3, [pc, #360]	; 13d7c <__assert_fail@plt+0x2910>
   13c10:	ldrb	r1, [r5]
   13c14:	ldr	r2, [r3, #240]	; 0xf0
   13c18:	cmp	r2, r1
   13c1c:	beq	13d10 <__assert_fail@plt+0x28a4>
   13c20:	ldr	r2, [r3, #256]	; 0x100
   13c24:	cmp	r2, r1
   13c28:	beq	13d18 <__assert_fail@plt+0x28ac>
   13c2c:	ldr	r2, [r3, #272]	; 0x110
   13c30:	cmp	r1, r2
   13c34:	beq	13d08 <__assert_fail@plt+0x289c>
   13c38:	ldr	r2, [r3, #288]	; 0x120
   13c3c:	cmp	r1, r2
   13c40:	beq	13d20 <__assert_fail@plt+0x28b4>
   13c44:	ldr	r2, [r3, #304]	; 0x130
   13c48:	cmp	r1, r2
   13c4c:	beq	13d28 <__assert_fail@plt+0x28bc>
   13c50:	ldr	r2, [r3, #320]	; 0x140
   13c54:	cmp	r1, r2
   13c58:	beq	13d30 <__assert_fail@plt+0x28c4>
   13c5c:	ldr	r2, [r3, #336]	; 0x150
   13c60:	cmp	r1, r2
   13c64:	beq	13d38 <__assert_fail@plt+0x28cc>
   13c68:	ldr	r2, [r3, #352]	; 0x160
   13c6c:	cmp	r1, r2
   13c70:	beq	13d40 <__assert_fail@plt+0x28d4>
   13c74:	ldr	r2, [r3, #368]	; 0x170
   13c78:	cmp	r1, r2
   13c7c:	beq	13d48 <__assert_fail@plt+0x28dc>
   13c80:	ldr	r2, [r3, #384]	; 0x180
   13c84:	cmp	r1, r2
   13c88:	beq	13d50 <__assert_fail@plt+0x28e4>
   13c8c:	ldr	r2, [r3, #400]	; 0x190
   13c90:	cmp	r1, r2
   13c94:	beq	13d58 <__assert_fail@plt+0x28ec>
   13c98:	ldr	r2, [r3, #416]	; 0x1a0
   13c9c:	cmp	r1, r2
   13ca0:	beq	13d60 <__assert_fail@plt+0x28f4>
   13ca4:	ldr	r2, [r3, #432]	; 0x1b0
   13ca8:	cmp	r1, r2
   13cac:	beq	13d68 <__assert_fail@plt+0x28fc>
   13cb0:	ldr	r2, [r3, #448]	; 0x1c0
   13cb4:	cmp	r1, r2
   13cb8:	beq	13cd8 <__assert_fail@plt+0x286c>
   13cbc:	ldr	r3, [r3, #464]	; 0x1d0
   13cc0:	cmp	r3, r1
   13cc4:	ldreq	r4, [pc, #180]	; 13d80 <__assert_fail@plt+0x2914>
   13cc8:	beq	13cdc <__assert_fail@plt+0x2870>
   13ccc:	ldr	r0, [pc, #176]	; 13d84 <__assert_fail@plt+0x2918>
   13cd0:	pop	{r4, r5, r6, r7, r8, lr}
   13cd4:	b	11148 <printf@plt>
   13cd8:	ldr	r4, [pc, #168]	; 13d88 <__assert_fail@plt+0x291c>
   13cdc:	ldr	r0, [r4, #4]
   13ce0:	cmp	r0, #0
   13ce4:	beq	13cec <__assert_fail@plt+0x2880>
   13ce8:	bl	11280 <puts@plt>
   13cec:	ldr	r3, [r4, #8]
   13cf0:	cmp	r3, #0
   13cf4:	popeq	{r4, r5, r6, r7, r8, pc}
   13cf8:	ldr	r1, [r4, #12]
   13cfc:	mov	r0, r5
   13d00:	pop	{r4, r5, r6, r7, r8, lr}
   13d04:	bx	r3
   13d08:	add	r4, r3, #272	; 0x110
   13d0c:	b	13cdc <__assert_fail@plt+0x2870>
   13d10:	add	r4, r3, #240	; 0xf0
   13d14:	b	13cdc <__assert_fail@plt+0x2870>
   13d18:	add	r4, r3, #256	; 0x100
   13d1c:	b	13cdc <__assert_fail@plt+0x2870>
   13d20:	add	r4, r3, #288	; 0x120
   13d24:	b	13cdc <__assert_fail@plt+0x2870>
   13d28:	add	r4, r3, #304	; 0x130
   13d2c:	b	13cdc <__assert_fail@plt+0x2870>
   13d30:	add	r4, r3, #320	; 0x140
   13d34:	b	13cdc <__assert_fail@plt+0x2870>
   13d38:	add	r4, r3, #336	; 0x150
   13d3c:	b	13cdc <__assert_fail@plt+0x2870>
   13d40:	add	r4, r3, #352	; 0x160
   13d44:	b	13cdc <__assert_fail@plt+0x2870>
   13d48:	add	r4, r3, #368	; 0x170
   13d4c:	b	13cdc <__assert_fail@plt+0x2870>
   13d50:	ldr	r4, [pc, #52]	; 13d8c <__assert_fail@plt+0x2920>
   13d54:	b	13cdc <__assert_fail@plt+0x2870>
   13d58:	ldr	r4, [pc, #48]	; 13d90 <__assert_fail@plt+0x2924>
   13d5c:	b	13cdc <__assert_fail@plt+0x2870>
   13d60:	ldr	r4, [pc, #44]	; 13d94 <__assert_fail@plt+0x2928>
   13d64:	b	13cdc <__assert_fail@plt+0x2870>
   13d68:	ldr	r4, [pc, #40]	; 13d98 <__assert_fail@plt+0x292c>
   13d6c:	b	13cdc <__assert_fail@plt+0x2870>
   13d70:	andeq	r1, r3, r8, asr #13
   13d74:	ldrdeq	r1, [r3], -r0
   13d78:			; <UNDEFINED> instruction: 0x0001efb8
   13d7c:	andeq	r1, r3, r4, lsl #8
   13d80:	ldrdeq	r1, [r3], -r4
   13d84:	andeq	lr, r1, ip, asr #31
   13d88:	andeq	r1, r3, r4, asr #11
   13d8c:	andeq	r1, r3, r4, lsl #11
   13d90:	muleq	r3, r4, r5
   13d94:	andeq	r1, r3, r4, lsr #11
   13d98:			; <UNDEFINED> instruction: 0x000315b4
   13d9c:	mov	r0, #0
   13da0:	bx	lr
   13da4:	push	{r4, lr}
   13da8:	subs	r4, r0, #0
   13dac:	blt	13dd0 <__assert_fail@plt+0x2964>
   13db0:	cmp	r4, #1
   13db4:	ble	13dd8 <__assert_fail@plt+0x296c>
   13db8:	cmp	r4, #2
   13dbc:	bne	13dd0 <__assert_fail@plt+0x2964>
   13dc0:	add	r1, sp, #8
   13dc4:	mov	r0, r3
   13dc8:	ldm	r1, {r1, r2, r3}
   13dcc:	bl	13bac <__assert_fail@plt+0x2740>
   13dd0:	mov	r0, #0
   13dd4:	pop	{r4, pc}
   13dd8:	ldr	r0, [r3, #4]
   13ddc:	bl	111e4 <inet_ntoa@plt>
   13de0:	ldr	r3, [sp, #12]
   13de4:	ldr	r1, [sp, #16]
   13de8:	ldrh	r3, [r3, #6]
   13dec:	rev16	r3, r3
   13df0:	uxth	r3, r3
   13df4:	mov	r2, r0
   13df8:	ldr	r0, [pc, #64]	; 13e40 <__assert_fail@plt+0x29d4>
   13dfc:	bl	11148 <printf@plt>
   13e00:	cmp	r4, #1
   13e04:	bne	13e10 <__assert_fail@plt+0x29a4>
   13e08:	ldr	r0, [pc, #52]	; 13e44 <__assert_fail@plt+0x29d8>
   13e0c:	bl	11148 <printf@plt>
   13e10:	mov	r0, #10
   13e14:	bl	11364 <putchar@plt>
   13e18:	ldr	r3, [sp, #12]
   13e1c:	ldr	r0, [r3, #8]
   13e20:	bl	111e4 <inet_ntoa@plt>
   13e24:	mov	r1, r0
   13e28:	ldr	r0, [pc, #24]	; 13e48 <__assert_fail@plt+0x29dc>
   13e2c:	bl	11148 <printf@plt>
   13e30:	mov	r0, #10
   13e34:	bl	11364 <putchar@plt>
   13e38:	mov	r0, #0
   13e3c:	pop	{r4, pc}
   13e40:	andeq	lr, r1, r0, ror #29
   13e44:	andeq	lr, r1, r8, lsl pc
   13e48:	strdeq	pc, [r1], -r8
   13e4c:	push	{r4, r5, r6, lr}
   13e50:	mov	r1, #17
   13e54:	ldr	r4, [pc, #132]	; 13ee0 <__assert_fail@plt+0x2a74>
   13e58:	mov	r5, r0
   13e5c:	ldr	r0, [r4]
   13e60:	bl	14290 <__assert_fail@plt+0x2e24>
   13e64:	mov	r2, #0
   13e68:	ldr	r0, [r4]
   13e6c:	ldr	r1, [pc, #112]	; 13ee4 <__assert_fail@plt+0x2a78>
   13e70:	bl	14648 <__assert_fail@plt+0x31dc>
   13e74:	ldr	r0, [r4]
   13e78:	mov	r1, #12
   13e7c:	bl	14654 <__assert_fail@plt+0x31e8>
   13e80:	ldr	r0, [r4]
   13e84:	mov	r1, #1
   13e88:	bl	12994 <__assert_fail@plt+0x1528>
   13e8c:	mov	r1, r5
   13e90:	ldr	r0, [r4]
   13e94:	bl	1465c <__assert_fail@plt+0x31f0>
   13e98:	cmp	r0, #0
   13e9c:	beq	13eb0 <__assert_fail@plt+0x2a44>
   13ea0:	ldr	r2, [pc, #64]	; 13ee8 <__assert_fail@plt+0x2a7c>
   13ea4:	mov	r1, #0
   13ea8:	mov	r0, #1
   13eac:	bl	11268 <error@plt>
   13eb0:	ldr	r3, [r4]
   13eb4:	ldr	r0, [r3, #28]
   13eb8:	ldr	r5, [r3, #52]	; 0x34
   13ebc:	bl	111e4 <inet_ntoa@plt>
   13ec0:	mov	r1, r5
   13ec4:	mov	r2, r0
   13ec8:	ldr	r0, [pc, #28]	; 13eec <__assert_fail@plt+0x2a80>
   13ecc:	bl	11148 <printf@plt>
   13ed0:	ldr	r0, [r4]
   13ed4:	ldr	r1, [pc, #20]	; 13ef0 <__assert_fail@plt+0x2a84>
   13ed8:	pop	{r4, r5, r6, lr}
   13edc:	b	11f88 <__assert_fail@plt+0xb1c>
   13ee0:	ldrdeq	r1, [r3], -r0
   13ee4:	andeq	r3, r1, r4, lsr #27
   13ee8:	muleq	r1, r0, lr
   13eec:	andeq	pc, r1, r8, lsl #6
   13ef0:	muleq	r1, ip, sp
   13ef4:	mov	r0, #0
   13ef8:	bx	lr
   13efc:	b	124a0 <__assert_fail@plt+0x1034>
   13f00:	push	{r4, r5, lr}
   13f04:	sub	sp, sp, #20
   13f08:	subs	r4, r0, #0
   13f0c:	ldr	r5, [sp, #36]	; 0x24
   13f10:	blt	13f38 <__assert_fail@plt+0x2acc>
   13f14:	cmp	r4, #1
   13f18:	ble	13f44 <__assert_fail@plt+0x2ad8>
   13f1c:	cmp	r4, #2
   13f20:	bne	13f38 <__assert_fail@plt+0x2acc>
   13f24:	mov	r0, r3
   13f28:	mov	r2, r5
   13f2c:	ldr	r3, [sp, #40]	; 0x28
   13f30:	ldr	r1, [sp, #32]
   13f34:	bl	13bac <__assert_fail@plt+0x2740>
   13f38:	mov	r0, #0
   13f3c:	add	sp, sp, #20
   13f40:	pop	{r4, r5, pc}
   13f44:	ldr	r0, [r3, #4]
   13f48:	bl	111e4 <inet_ntoa@plt>
   13f4c:	ldrh	r3, [r5, #6]
   13f50:	ldr	r1, [sp, #40]	; 0x28
   13f54:	rev16	r3, r3
   13f58:	uxth	r3, r3
   13f5c:	mov	r2, r0
   13f60:	ldr	r0, [pc, #212]	; 1403c <__assert_fail@plt+0x2bd0>
   13f64:	bl	11148 <printf@plt>
   13f68:	cmp	r4, #1
   13f6c:	beq	14030 <__assert_fail@plt+0x2bc4>
   13f70:	mov	r0, #10
   13f74:	bl	11364 <putchar@plt>
   13f78:	ldr	r2, [r5, #8]
   13f7c:	mov	r1, #16
   13f80:	rev	r2, r2
   13f84:	mov	r0, sp
   13f88:	bl	12844 <__assert_fail@plt+0x13d8>
   13f8c:	mov	r1, r0
   13f90:	ldr	r0, [pc, #168]	; 14040 <__assert_fail@plt+0x2bd4>
   13f94:	bl	11148 <printf@plt>
   13f98:	ldr	r2, [r5, #12]
   13f9c:	mov	r1, #16
   13fa0:	rev	r2, r2
   13fa4:	mov	r0, sp
   13fa8:	bl	12844 <__assert_fail@plt+0x13d8>
   13fac:	mov	r1, r0
   13fb0:	ldr	r0, [pc, #140]	; 14044 <__assert_fail@plt+0x2bd8>
   13fb4:	bl	11148 <printf@plt>
   13fb8:	ldr	r2, [r5, #16]
   13fbc:	mov	r1, #16
   13fc0:	rev	r2, r2
   13fc4:	mov	r0, sp
   13fc8:	bl	12844 <__assert_fail@plt+0x13d8>
   13fcc:	mov	r1, r0
   13fd0:	ldr	r0, [pc, #112]	; 14048 <__assert_fail@plt+0x2bdc>
   13fd4:	bl	11148 <printf@plt>
   13fd8:	ldr	r3, [pc, #108]	; 1404c <__assert_fail@plt+0x2be0>
   13fdc:	ldr	r3, [r3]
   13fe0:	tst	r3, #32
   13fe4:	beq	13f38 <__assert_fail@plt+0x2acc>
   13fe8:	ldr	r0, [r5, #8]
   13fec:	rev	r0, r0
   13ff0:	bl	12838 <__assert_fail@plt+0x13cc>
   13ff4:	cmp	r0, #0
   13ff8:	beq	13f38 <__assert_fail@plt+0x2acc>
   13ffc:	ldr	r0, [r5, #8]
   14000:	rev	r0, r0
   14004:	bl	12838 <__assert_fail@plt+0x13cc>
   14008:	cmp	r0, #0
   1400c:	beq	13f38 <__assert_fail@plt+0x2acc>
   14010:	ldr	r1, [r5, #16]
   14014:	ldr	r3, [r5, #8]
   14018:	rev	r1, r1
   1401c:	rev	r3, r3
   14020:	sub	r1, r1, r3
   14024:	ldr	r0, [pc, #36]	; 14050 <__assert_fail@plt+0x2be4>
   14028:	bl	11148 <printf@plt>
   1402c:	b	13f38 <__assert_fail@plt+0x2acc>
   14030:	ldr	r0, [pc, #28]	; 14054 <__assert_fail@plt+0x2be8>
   14034:	bl	11148 <printf@plt>
   14038:	b	13f70 <__assert_fail@plt+0x2b04>
   1403c:	andeq	lr, r1, r0, ror #29
   14040:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   14044:	andeq	pc, r1, r8, asr #6
   14048:	andeq	pc, r1, ip, asr r3	; <UNPREDICTABLE>
   1404c:	andeq	r1, r3, r8, asr #13
   14050:	andeq	pc, r1, r0, ror r3	; <UNPREDICTABLE>
   14054:	andeq	lr, r1, r8, lsl pc
   14058:	push	{r4, r5, r6, lr}
   1405c:	mov	r1, #13
   14060:	ldr	r4, [pc, #120]	; 140e0 <__assert_fail@plt+0x2c74>
   14064:	mov	r5, r0
   14068:	ldr	r0, [r4]
   1406c:	bl	14290 <__assert_fail@plt+0x2e24>
   14070:	mov	r2, #0
   14074:	ldr	r0, [r4]
   14078:	ldr	r1, [pc, #100]	; 140e4 <__assert_fail@plt+0x2c78>
   1407c:	bl	14648 <__assert_fail@plt+0x31dc>
   14080:	ldr	r0, [r4]
   14084:	mov	r1, #20
   14088:	bl	14654 <__assert_fail@plt+0x31e8>
   1408c:	mov	r1, r5
   14090:	ldr	r0, [r4]
   14094:	bl	1465c <__assert_fail@plt+0x31f0>
   14098:	cmp	r0, #0
   1409c:	beq	140b0 <__assert_fail@plt+0x2c44>
   140a0:	ldr	r2, [pc, #64]	; 140e8 <__assert_fail@plt+0x2c7c>
   140a4:	mov	r1, #0
   140a8:	mov	r0, #1
   140ac:	bl	11268 <error@plt>
   140b0:	ldr	r3, [r4]
   140b4:	ldr	r0, [r3, #28]
   140b8:	ldr	r5, [r3, #52]	; 0x34
   140bc:	bl	111e4 <inet_ntoa@plt>
   140c0:	mov	r1, r5
   140c4:	mov	r2, r0
   140c8:	ldr	r0, [pc, #28]	; 140ec <__assert_fail@plt+0x2c80>
   140cc:	bl	11148 <printf@plt>
   140d0:	ldr	r0, [r4]
   140d4:	ldr	r1, [pc, #20]	; 140f0 <__assert_fail@plt+0x2c84>
   140d8:	pop	{r4, r5, r6, lr}
   140dc:	b	11f88 <__assert_fail@plt+0xb1c>
   140e0:	ldrdeq	r1, [r3], -r0
   140e4:	andeq	r3, r1, r0, lsl #30
   140e8:	muleq	r1, r0, lr
   140ec:	andeq	pc, r1, r4, lsl #7
   140f0:	strdeq	r3, [r1], -ip
   140f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   140f8:	mov	r8, r0
   140fc:	ldr	r0, [pc, #352]	; 14264 <__assert_fail@plt+0x2df8>
   14100:	mov	r5, r1
   14104:	bl	11154 <getprotobyname@plt>
   14108:	subs	r6, r0, #0
   1410c:	beq	14244 <__assert_fail@plt+0x2dd8>
   14110:	ldr	r2, [r6, #8]
   14114:	mov	r1, #3
   14118:	mov	r0, #2
   1411c:	bl	1143c <socket@plt>
   14120:	subs	r7, r0, #0
   14124:	blt	14180 <__assert_fail@plt+0x2d14>
   14128:	mov	r0, #124	; 0x7c
   1412c:	bl	1bf70 <argp_parse@@Base+0x2560>
   14130:	subs	r4, r0, #0
   14134:	beq	1421c <__assert_fail@plt+0x2db0>
   14138:	mov	r2, #124	; 0x7c
   1413c:	mov	r1, #0
   14140:	bl	11358 <memset@plt>
   14144:	uxth	r5, r5
   14148:	mov	r0, #1000	; 0x3e8
   1414c:	mov	r1, #0
   14150:	mov	r2, #28
   14154:	mov	r3, #128	; 0x80
   14158:	str	r0, [r4, #20]
   1415c:	str	r5, [r4, #60]	; 0x3c
   14160:	stm	r4, {r7, r8}
   14164:	str	r1, [r4, #8]
   14168:	str	r2, [r4, #56]	; 0x38
   1416c:	str	r3, [r4, #72]	; 0x48
   14170:	add	r0, r4, #12
   14174:	bl	1125c <gettimeofday@plt>
   14178:	mov	r0, r4
   1417c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14180:	bl	11328 <__errno_location@plt>
   14184:	ldr	r4, [r0]
   14188:	mov	r9, r0
   1418c:	cmp	r4, #13
   14190:	cmpne	r4, #1
   14194:	moveq	r4, #1
   14198:	movne	r4, #0
   1419c:	bne	14178 <__assert_fail@plt+0x2d0c>
   141a0:	mov	r1, #2
   141a4:	mov	r4, #0
   141a8:	str	r4, [r0]
   141ac:	mov	r0, r1
   141b0:	ldr	r2, [r6, #8]
   141b4:	bl	1143c <socket@plt>
   141b8:	subs	r7, r0, #0
   141bc:	blt	141d4 <__assert_fail@plt+0x2d68>
   141c0:	ldr	r2, [pc, #160]	; 14268 <__assert_fail@plt+0x2dfc>
   141c4:	ldr	r3, [r2]
   141c8:	add	r3, r3, #1
   141cc:	str	r3, [r2]
   141d0:	b	14128 <__assert_fail@plt+0x2cbc>
   141d4:	ldr	r0, [r9]
   141d8:	cmp	r0, #13
   141dc:	cmpne	r0, #1
   141e0:	moveq	r3, #1
   141e4:	movne	r3, #0
   141e8:	cmp	r0, #93	; 0x5d
   141ec:	orreq	r3, r3, #1
   141f0:	cmp	r3, r4
   141f4:	bne	14228 <__assert_fail@plt+0x2dbc>
   141f8:	ldr	r2, [pc, #108]	; 1426c <__assert_fail@plt+0x2e00>
   141fc:	mov	r4, r3
   14200:	ldr	r5, [r2]
   14204:	bl	112a4 <strerror@plt>
   14208:	ldr	r1, [pc, #96]	; 14270 <__assert_fail@plt+0x2e04>
   1420c:	mov	r2, r0
   14210:	mov	r0, r5
   14214:	bl	1131c <fprintf@plt>
   14218:	b	14178 <__assert_fail@plt+0x2d0c>
   1421c:	mov	r0, r7
   14220:	bl	11460 <close@plt>
   14224:	b	14178 <__assert_fail@plt+0x2d0c>
   14228:	ldr	r3, [pc, #60]	; 1426c <__assert_fail@plt+0x2e00>
   1422c:	mov	r2, #41	; 0x29
   14230:	mov	r1, #1
   14234:	ldr	r3, [r3]
   14238:	ldr	r0, [pc, #52]	; 14274 <__assert_fail@plt+0x2e08>
   1423c:	bl	11250 <fwrite@plt>
   14240:	b	14178 <__assert_fail@plt+0x2d0c>
   14244:	ldr	r3, [pc, #32]	; 1426c <__assert_fail@plt+0x2e00>
   14248:	mov	r2, #29
   1424c:	mov	r1, #1
   14250:	ldr	r3, [r3]
   14254:	ldr	r0, [pc, #28]	; 14278 <__assert_fail@plt+0x2e0c>
   14258:	mov	r4, r6
   1425c:	bl	11250 <fwrite@plt>
   14260:	b	14178 <__assert_fail@plt+0x2d0c>
   14264:			; <UNDEFINED> instruction: 0x0001f3b0
   14268:	andeq	r1, r3, r4, lsl #13
   1426c:	andeq	r1, r3, r8, lsr #12
   14270:	andeq	pc, r1, r4, lsl #8
   14274:	ldrdeq	pc, [r1], -r8
   14278:			; <UNDEFINED> instruction: 0x0001f3b8
   1427c:	mov	r3, #0
   14280:	str	r3, [r0, #112]	; 0x70
   14284:	str	r3, [r0, #116]	; 0x74
   14288:	str	r3, [r0, #120]	; 0x78
   1428c:	bx	lr
   14290:	str	r1, [r0, #4]
   14294:	bx	lr
   14298:	push	{r4, r5, r6, r7, lr}
   1429c:	mov	r1, #0
   142a0:	sub	sp, sp, #12
   142a4:	mov	r4, r0
   142a8:	bl	12870 <__assert_fail@plt+0x1404>
   142ac:	subs	r6, r0, #0
   142b0:	bne	143f0 <__assert_fail@plt+0x2f84>
   142b4:	ldr	r3, [r4, #4]
   142b8:	sub	r2, r3, #13
   142bc:	cmp	r2, #1
   142c0:	bls	143a8 <__assert_fail@plt+0x2f3c>
   142c4:	sub	r3, r3, #17
   142c8:	cmp	r3, #1
   142cc:	bls	143e4 <__assert_fail@plt+0x2f78>
   142d0:	ldr	r5, [r4, #56]	; 0x38
   142d4:	add	r5, r5, #8
   142d8:	mov	r7, r5
   142dc:	ldr	r1, [r4, #72]	; 0x48
   142e0:	ldr	r0, [r4, #112]	; 0x70
   142e4:	lsl	r1, r1, #3
   142e8:	bl	1e288 <argp_parse@@Base+0x4878>
   142ec:	ldr	r2, [r4, #76]	; 0x4c
   142f0:	mov	ip, #1
   142f4:	ldrb	r3, [r2, r1, asr #3]
   142f8:	and	r0, r1, #7
   142fc:	bic	r3, r3, ip, lsl r0
   14300:	strb	r3, [r2, r1, asr #3]
   14304:	ldr	r2, [r4, #4]
   14308:	cmp	r2, #13
   1430c:	beq	143cc <__assert_fail@plt+0x2f60>
   14310:	cmp	r2, #17
   14314:	beq	14390 <__assert_fail@plt+0x2f24>
   14318:	cmp	r2, #8
   1431c:	beq	143b4 <__assert_fail@plt+0x2f48>
   14320:	ldr	r1, [r4, #112]	; 0x70
   14324:	ldr	r3, [r4, #60]	; 0x3c
   14328:	ldr	r0, [r4, #80]	; 0x50
   1432c:	str	r1, [sp]
   14330:	mov	r1, r5
   14334:	bl	146fc <__assert_fail@plt+0x3290>
   14338:	add	r3, r4, #24
   1433c:	mov	ip, #16
   14340:	ldr	r0, [r4]
   14344:	ldr	r1, [r4, #80]	; 0x50
   14348:	mov	r2, r5
   1434c:	stm	sp, {r3, ip}
   14350:	mov	r3, #0
   14354:	bl	11388 <sendto@plt>
   14358:	subs	r3, r0, #0
   1435c:	blt	143f0 <__assert_fail@plt+0x2f84>
   14360:	ldr	r2, [r4, #112]	; 0x70
   14364:	cmp	r3, r7
   14368:	add	r2, r2, #1
   1436c:	str	r2, [r4, #112]	; 0x70
   14370:	beq	14384 <__assert_fail@plt+0x2f18>
   14374:	mov	r2, r7
   14378:	ldr	r1, [r4, #52]	; 0x34
   1437c:	ldr	r0, [pc, #116]	; 143f8 <__assert_fail@plt+0x2f8c>
   14380:	bl	11148 <printf@plt>
   14384:	mov	r0, r6
   14388:	add	sp, sp, #12
   1438c:	pop	{r4, r5, r6, r7, pc}
   14390:	ldr	r3, [r4, #112]	; 0x70
   14394:	ldr	r2, [r4, #60]	; 0x3c
   14398:	mov	r1, r5
   1439c:	ldr	r0, [r4, #80]	; 0x50
   143a0:	bl	14900 <__assert_fail@plt+0x3494>
   143a4:	b	14338 <__assert_fail@plt+0x2ecc>
   143a8:	mov	r7, #20
   143ac:	mov	r5, r7
   143b0:	b	142dc <__assert_fail@plt+0x2e70>
   143b4:	ldr	r3, [r4, #112]	; 0x70
   143b8:	ldr	r2, [r4, #60]	; 0x3c
   143bc:	mov	r1, r5
   143c0:	ldr	r0, [r4, #80]	; 0x50
   143c4:	bl	147a4 <__assert_fail@plt+0x3338>
   143c8:	b	14338 <__assert_fail@plt+0x2ecc>
   143cc:	ldr	r3, [r4, #112]	; 0x70
   143d0:	ldr	r2, [r4, #60]	; 0x3c
   143d4:	mov	r1, r5
   143d8:	ldr	r0, [r4, #80]	; 0x50
   143dc:	bl	1484c <__assert_fail@plt+0x33e0>
   143e0:	b	14338 <__assert_fail@plt+0x2ecc>
   143e4:	mov	r7, #12
   143e8:	mov	r5, r7
   143ec:	b	142dc <__assert_fail@plt+0x2e70>
   143f0:	mvn	r6, #0
   143f4:	b	14384 <__assert_fail@plt+0x2f18>
   143f8:	andeq	pc, r1, r0, lsl r4	; <UNPREDICTABLE>
   143fc:	push	{r4, r5, r6, r7, lr}
   14400:	mov	r4, r0
   14404:	sub	sp, sp, #36	; 0x24
   14408:	ldr	r2, [r4, #56]	; 0x38
   1440c:	add	ip, sp, #32
   14410:	mov	r3, #16
   14414:	add	r5, r4, #84	; 0x54
   14418:	ldr	r0, [r0]
   1441c:	ldr	r1, [r4, #80]	; 0x50
   14420:	add	r2, r2, #80	; 0x50
   14424:	str	r5, [sp]
   14428:	str	r3, [ip, #-12]!
   1442c:	mov	r3, #0
   14430:	str	ip, [sp, #4]
   14434:	bl	11214 <recvfrom@plt>
   14438:	subs	r6, r0, #0
   1443c:	blt	14560 <__assert_fail@plt+0x30f4>
   14440:	add	r3, sp, #24
   14444:	add	r2, sp, #28
   14448:	mov	r1, r6
   1444c:	ldr	r0, [r4, #80]	; 0x50
   14450:	bl	14748 <__assert_fail@plt+0x32dc>
   14454:	cmp	r0, #0
   14458:	blt	1460c <__assert_fail@plt+0x31a0>
   1445c:	ldr	r3, [sp, #24]
   14460:	ldrb	r2, [r3]
   14464:	cmp	r2, #18
   14468:	bhi	14550 <__assert_fail@plt+0x30e4>
   1446c:	mov	r1, #1
   14470:	ldr	ip, [pc, #444]	; 14634 <__assert_fail@plt+0x31c8>
   14474:	lsl	r2, r1, r2
   14478:	and	ip, ip, r2
   1447c:	cmp	ip, #0
   14480:	bne	14560 <__assert_fail@plt+0x30f4>
   14484:	add	r1, r1, #278528	; 0x44000
   14488:	and	r1, r1, r2
   1448c:	cmp	r1, #0
   14490:	beq	14550 <__assert_fail@plt+0x30e4>
   14494:	ldrh	r2, [r3, #4]
   14498:	ldr	r1, [r4, #60]	; 0x3c
   1449c:	rev16	r2, r2
   144a0:	uxth	r2, r2
   144a4:	cmp	r2, r1
   144a8:	beq	144bc <__assert_fail@plt+0x3050>
   144ac:	ldr	r2, [pc, #388]	; 14638 <__assert_fail@plt+0x31cc>
   144b0:	ldr	r2, [r2]
   144b4:	cmp	r2, #0
   144b8:	beq	14560 <__assert_fail@plt+0x30f4>
   144bc:	cmp	r0, #0
   144c0:	bne	1456c <__assert_fail@plt+0x3100>
   144c4:	ldr	r7, [r4, #116]	; 0x74
   144c8:	ldr	r1, [r4, #72]	; 0x48
   144cc:	add	r2, r7, #1
   144d0:	str	r2, [r4, #116]	; 0x74
   144d4:	ldrh	r0, [r3, #6]
   144d8:	lsl	r1, r1, #3
   144dc:	rev16	r0, r0
   144e0:	uxth	r0, r0
   144e4:	bl	1e4c8 <argp_parse@@Base+0x4ab8>
   144e8:	ldr	r2, [r4, #76]	; 0x4c
   144ec:	ldrb	r3, [r2, r1, asr #3]
   144f0:	and	ip, r1, #7
   144f4:	asr	r0, r3, ip
   144f8:	ands	r0, r0, #1
   144fc:	moveq	lr, #1
   14500:	ldrne	r3, [r4, #120]	; 0x78
   14504:	orreq	r3, r3, lr, lsl ip
   14508:	strne	r7, [r4, #116]	; 0x74
   1450c:	strbeq	r3, [r2, r1, asr #3]
   14510:	ldr	r7, [r4, #64]	; 0x40
   14514:	addne	r3, r3, #1
   14518:	strne	r3, [r4, #120]	; 0x78
   1451c:	cmp	r7, #0
   14520:	beq	14544 <__assert_fail@plt+0x30d8>
   14524:	ldr	lr, [sp, #24]
   14528:	ldr	ip, [sp, #28]
   1452c:	ldr	r1, [r4, #68]	; 0x44
   14530:	mov	r3, r5
   14534:	str	r6, [sp, #8]
   14538:	add	r2, r4, #24
   1453c:	stm	sp, {ip, lr}
   14540:	blx	r7
   14544:	mov	r0, #0
   14548:	add	sp, sp, #36	; 0x24
   1454c:	pop	{r4, r5, r6, r7, pc}
   14550:	ldr	r1, [r3, #24]
   14554:	ldr	r2, [r4, #28]
   14558:	cmp	r1, r2
   1455c:	beq	14594 <__assert_fail@plt+0x3128>
   14560:	mvn	r0, #0
   14564:	add	sp, sp, #36	; 0x24
   14568:	pop	{r4, r5, r6, r7, pc}
   1456c:	ldr	r3, [pc, #200]	; 1463c <__assert_fail@plt+0x31d0>
   14570:	ldr	r0, [r4, #88]	; 0x58
   14574:	ldr	r7, [r3]
   14578:	bl	111e4 <inet_ntoa@plt>
   1457c:	ldr	r1, [pc, #188]	; 14640 <__assert_fail@plt+0x31d4>
   14580:	mov	r2, r0
   14584:	mov	r0, r7
   14588:	bl	1131c <fprintf@plt>
   1458c:	ldr	r3, [sp, #24]
   14590:	b	144c4 <__assert_fail@plt+0x3058>
   14594:	ldrb	r2, [r3, #17]
   14598:	cmp	r2, #1
   1459c:	bne	14560 <__assert_fail@plt+0x30f4>
   145a0:	ldrb	r2, [r3, #28]
   145a4:	cmp	r2, #8
   145a8:	bne	14560 <__assert_fail@plt+0x30f4>
   145ac:	ldrh	r2, [r3, #32]
   145b0:	ldr	r1, [r4, #60]	; 0x3c
   145b4:	rev16	r2, r2
   145b8:	uxth	r2, r2
   145bc:	cmp	r2, r1
   145c0:	beq	145d4 <__assert_fail@plt+0x3168>
   145c4:	ldr	r2, [pc, #108]	; 14638 <__assert_fail@plt+0x31cc>
   145c8:	ldr	r2, [r2]
   145cc:	cmp	r2, #0
   145d0:	beq	14560 <__assert_fail@plt+0x30f4>
   145d4:	ldr	r7, [r4, #64]	; 0x40
   145d8:	cmp	r7, #0
   145dc:	beq	14544 <__assert_fail@plt+0x30d8>
   145e0:	ldr	r0, [sp, #28]
   145e4:	ldr	r1, [r4, #68]	; 0x44
   145e8:	add	r2, r4, #24
   145ec:	stmib	sp, {r3, r6}
   145f0:	str	r0, [sp]
   145f4:	mov	r3, r5
   145f8:	mov	r0, #2
   145fc:	blx	r7
   14600:	mov	r0, #0
   14604:	add	sp, sp, #36	; 0x24
   14608:	pop	{r4, r5, r6, r7, pc}
   1460c:	ldr	r3, [pc, #40]	; 1463c <__assert_fail@plt+0x31d0>
   14610:	ldr	r0, [r4, #88]	; 0x58
   14614:	ldr	r4, [r3]
   14618:	bl	111e4 <inet_ntoa@plt>
   1461c:	mov	r2, r6
   14620:	ldr	r1, [pc, #28]	; 14644 <__assert_fail@plt+0x31d8>
   14624:	mov	r3, r0
   14628:	mov	r0, r4
   1462c:	bl	1131c <fprintf@plt>
   14630:	b	14560 <__assert_fail@plt+0x30f4>
   14634:	andeq	r2, r2, r0, lsl #2
   14638:	andeq	r1, r3, r4, lsl #13
   1463c:	andeq	r1, r3, r8, lsr #12
   14640:	andeq	pc, r1, ip, asr r4	; <UNPREDICTABLE>
   14644:	andeq	pc, r1, r4, lsr r4	; <UNPREDICTABLE>
   14648:	str	r1, [r0, #64]	; 0x40
   1464c:	str	r2, [r0, #68]	; 0x44
   14650:	bx	lr
   14654:	str	r1, [r0, #56]	; 0x38
   14658:	bx	lr
   1465c:	push	{r4, r5, r6, r7, lr}
   14660:	sub	sp, sp, #44	; 0x2c
   14664:	mov	r7, r1
   14668:	mov	r2, #32
   1466c:	mov	r1, #0
   14670:	mov	r6, r0
   14674:	add	r0, sp, #8
   14678:	bl	11358 <memset@plt>
   1467c:	mov	lr, #2
   14680:	mov	ip, #194	; 0xc2
   14684:	add	r2, sp, #8
   14688:	mov	r0, r7
   1468c:	add	r3, sp, #4
   14690:	mov	r1, #0
   14694:	str	lr, [sp, #12]
   14698:	str	ip, [sp, #8]
   1469c:	bl	11430 <getaddrinfo@plt>
   146a0:	subs	r5, r0, #0
   146a4:	bne	146e4 <__assert_fail@plt+0x3278>
   146a8:	ldr	r4, [sp, #4]
   146ac:	add	r0, r6, #24
   146b0:	ldr	r2, [r4, #16]
   146b4:	ldr	r1, [r4, #20]
   146b8:	bl	111b4 <memcpy@plt>
   146bc:	ldr	r0, [r4, #24]
   146c0:	cmp	r0, #0
   146c4:	moveq	r0, r7
   146c8:	bl	11220 <strdup@plt>
   146cc:	str	r0, [r6, #52]	; 0x34
   146d0:	mov	r0, r4
   146d4:	bl	11424 <freeaddrinfo@plt>
   146d8:	mov	r0, r5
   146dc:	add	sp, sp, #44	; 0x2c
   146e0:	pop	{r4, r5, r6, r7, pc}
   146e4:	mov	r0, #0
   146e8:	bl	1a98c <argp_parse@@Base+0xf7c>
   146ec:	mov	r5, #1
   146f0:	mov	r0, r5
   146f4:	add	sp, sp, #44	; 0x2c
   146f8:	pop	{r4, r5, r6, r7, pc}
   146fc:	cmp	r1, #7
   14700:	push	{r4, r5, r6, lr}
   14704:	bls	14740 <__assert_fail@plt+0x32d4>
   14708:	ldrh	ip, [sp, #16]
   1470c:	rev16	r3, r3
   14710:	mov	r5, #0
   14714:	rev16	ip, ip
   14718:	strh	r3, [r0, #4]
   1471c:	strb	r2, [r0]
   14720:	strb	r5, [r0, #1]
   14724:	strh	r5, [r0, #2]
   14728:	strh	ip, [r0, #6]
   1472c:	mov	r4, r0
   14730:	bl	14940 <__assert_fail@plt+0x34d4>
   14734:	strh	r0, [r4, #2]
   14738:	mov	r0, r5
   1473c:	pop	{r4, r5, r6, pc}
   14740:	mvn	r5, #0
   14744:	b	14738 <__assert_fail@plt+0x32cc>
   14748:	ldrb	ip, [r0]
   1474c:	push	{r4, r5, r6, lr}
   14750:	and	ip, ip, #15
   14754:	lsl	ip, ip, #2
   14758:	add	lr, ip, #8
   1475c:	cmp	lr, r1
   14760:	bhi	1479c <__assert_fail@plt+0x3330>
   14764:	add	r4, r0, ip
   14768:	mov	lr, #0
   1476c:	ldrh	r5, [r4, #2]
   14770:	sub	r1, r1, ip
   14774:	str	r0, [r2]
   14778:	str	r4, [r3]
   1477c:	mov	r0, r4
   14780:	strh	lr, [r4, #2]
   14784:	bl	14940 <__assert_fail@plt+0x34d4>
   14788:	mov	r3, r0
   1478c:	subs	r0, r5, r0
   14790:	movne	r0, #1
   14794:	strh	r3, [r4, #2]
   14798:	pop	{r4, r5, r6, pc}
   1479c:	mvn	r0, #0
   147a0:	pop	{r4, r5, r6, pc}
   147a4:	cmp	r1, #7
   147a8:	push	{r4, r5, r6, lr}
   147ac:	bls	147e8 <__assert_fail@plt+0x337c>
   147b0:	rev16	r3, r3
   147b4:	rev16	r2, r2
   147b8:	mov	ip, #8
   147bc:	mov	r5, #0
   147c0:	strh	r3, [r0, #6]
   147c4:	strh	r2, [r0, #4]
   147c8:	strb	ip, [r0]
   147cc:	strb	r5, [r0, #1]
   147d0:	strh	r5, [r0, #2]
   147d4:	mov	r4, r0
   147d8:	bl	14940 <__assert_fail@plt+0x34d4>
   147dc:	strh	r0, [r4, #2]
   147e0:	mov	r0, r5
   147e4:	pop	{r4, r5, r6, pc}
   147e8:	mvn	r5, #0
   147ec:	b	147e0 <__assert_fail@plt+0x3374>
   147f0:	ldrb	ip, [r0]
   147f4:	push	{r4, r5, r6, lr}
   147f8:	and	ip, ip, #15
   147fc:	lsl	ip, ip, #2
   14800:	add	lr, ip, #8
   14804:	cmp	r1, lr
   14808:	bcc	14844 <__assert_fail@plt+0x33d8>
   1480c:	add	r4, r0, ip
   14810:	mov	lr, #0
   14814:	ldrh	r5, [r4, #2]
   14818:	sub	r1, r1, ip
   1481c:	str	r0, [r2]
   14820:	str	r4, [r3]
   14824:	mov	r0, r4
   14828:	strh	lr, [r4, #2]
   1482c:	bl	14940 <__assert_fail@plt+0x34d4>
   14830:	mov	r3, r0
   14834:	subs	r0, r5, r0
   14838:	movne	r0, #1
   1483c:	strh	r3, [r4, #2]
   14840:	pop	{r4, r5, r6, pc}
   14844:	mvn	r0, #0
   14848:	pop	{r4, r5, r6, pc}
   1484c:	cmp	r1, #19
   14850:	bls	148ec <__assert_fail@plt+0x3480>
   14854:	push	{r4, r5, r6, r7, lr}
   14858:	sub	sp, sp, #20
   1485c:	mov	r4, r0
   14860:	mov	r5, r1
   14864:	add	r0, sp, #8
   14868:	mov	r1, #0
   1486c:	mov	r7, r3
   14870:	mov	r6, r2
   14874:	bl	1125c <gettimeofday@plt>
   14878:	ldr	ip, [sp, #8]
   1487c:	ldr	r1, [pc, #112]	; 148f4 <__assert_fail@plt+0x3488>
   14880:	ldr	r0, [sp, #12]
   14884:	asr	r2, ip, #31
   14888:	smull	r3, r1, r1, ip
   1488c:	ldr	r3, [pc, #100]	; 148f8 <__assert_fail@plt+0x348c>
   14890:	add	r1, r1, ip
   14894:	str	r7, [sp]
   14898:	rsb	r2, r2, r1, asr #16
   1489c:	ldr	r1, [pc, #88]	; 148fc <__assert_fail@plt+0x3490>
   148a0:	smull	lr, r3, r3, r0
   148a4:	mul	r1, r1, r2
   148a8:	asr	r0, r0, #31
   148ac:	sub	ip, ip, r1
   148b0:	mov	r2, #1000	; 0x3e8
   148b4:	rsb	r0, r0, r3, asr #6
   148b8:	mla	ip, r2, ip, r0
   148bc:	mov	r3, r6
   148c0:	rev	ip, ip
   148c4:	mov	r1, r5
   148c8:	str	ip, [r4, #8]
   148cc:	str	ip, [r4, #12]
   148d0:	str	ip, [r4, #16]
   148d4:	mov	r0, r4
   148d8:	mov	r2, #13
   148dc:	bl	146fc <__assert_fail@plt+0x3290>
   148e0:	mov	r0, #0
   148e4:	add	sp, sp, #20
   148e8:	pop	{r4, r5, r6, r7, pc}
   148ec:	mvn	r0, #0
   148f0:	bx	lr
   148f4:	eorgt	r4, lr, #29360128	; 0x1c00000
   148f8:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   148fc:	andeq	r5, r1, r0, lsl #3
   14900:	cmp	r1, #11
   14904:	bls	14938 <__assert_fail@plt+0x34cc>
   14908:	push	{r4, lr}
   1490c:	sub	sp, sp, #8
   14910:	mov	lr, r3
   14914:	mov	r4, #0
   14918:	mov	r3, r2
   1491c:	str	lr, [sp]
   14920:	mov	r2, #17
   14924:	str	r4, [r0, #8]
   14928:	bl	146fc <__assert_fail@plt+0x3290>
   1492c:	mov	r0, r4
   14930:	add	sp, sp, #8
   14934:	pop	{r4, pc}
   14938:	mvn	r0, #0
   1493c:	bx	lr
   14940:	push	{lr}		; (str lr, [sp, #-4]!)
   14944:	sub	sp, sp, #12
   14948:	mov	r2, #0
   1494c:	cmp	r1, #1
   14950:	strh	r2, [sp, #6]
   14954:	ble	14988 <__assert_fail@plt+0x351c>
   14958:	mov	ip, r0
   1495c:	mov	r3, r1
   14960:	ldrh	lr, [ip], #2
   14964:	sub	r3, r3, #2
   14968:	cmp	r3, #1
   1496c:	add	r2, r2, lr
   14970:	bgt	14960 <__assert_fail@plt+0x34f4>
   14974:	sub	r1, r1, #2
   14978:	bic	r3, r1, #1
   1497c:	add	r3, r3, #2
   14980:	add	r0, r0, r3
   14984:	and	r1, r1, #1
   14988:	cmp	r1, #1
   1498c:	ldrbeq	r3, [r0]
   14990:	strbeq	r3, [sp, #6]
   14994:	ldrheq	r3, [sp, #6]
   14998:	addeq	r2, r2, r3
   1499c:	uxth	r0, r2
   149a0:	add	r2, r0, r2, asr #16
   149a4:	add	r2, r2, r2, asr #16
   149a8:	mvn	r0, r2
   149ac:	uxth	r0, r0
   149b0:	add	sp, sp, #12
   149b4:	pop	{pc}		; (ldr pc, [sp], #4)
   149b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149bc:	mov	r7, r3
   149c0:	ldr	sl, [r0, #12]
   149c4:	sub	sp, sp, #36	; 0x24
   149c8:	ldr	r3, [r0, #16]
   149cc:	cmp	sl, #0
   149d0:	mov	fp, r0
   149d4:	mov	r6, r2
   149d8:	str	r3, [sp, #16]
   149dc:	mov	r9, r1
   149e0:	ldr	r8, [sp, #72]	; 0x48
   149e4:	ldr	r5, [sp, #76]	; 0x4c
   149e8:	beq	14db8 <__assert_fail@plt+0x394c>
   149ec:	mov	r1, #11
   149f0:	mov	r0, sl
   149f4:	bl	11310 <strchr@plt>
   149f8:	cmp	r6, #0
   149fc:	bne	14cd4 <__assert_fail@plt+0x3868>
   14a00:	cmp	r0, #0
   14a04:	ldr	r3, [fp, #20]
   14a08:	beq	14f10 <__assert_fail@plt+0x3aa4>
   14a0c:	cmp	r3, #0
   14a10:	sub	r4, r0, sl
   14a14:	beq	14ea8 <__assert_fail@plt+0x3a3c>
   14a18:	cmp	r4, #0
   14a1c:	beq	14e48 <__assert_fail@plt+0x39dc>
   14a20:	mov	r0, sl
   14a24:	mov	r1, r4
   14a28:	bl	111a8 <strndup@plt>
   14a2c:	mov	r3, #1
   14a30:	str	r3, [sp, #24]
   14a34:	mov	sl, r0
   14a38:	adds	r3, r0, #0
   14a3c:	movne	r3, #1
   14a40:	str	r3, [sp, #20]
   14a44:	mov	r1, r9
   14a48:	mov	r0, fp
   14a4c:	bl	1a830 <argp_parse@@Base+0xe20>
   14a50:	ldr	r3, [fp, #20]
   14a54:	str	r0, [sp, #12]
   14a58:	ldr	r0, [pc, #1272]	; 14f58 <__assert_fail@plt+0x3aec>
   14a5c:	ldr	r2, [sp, #12]
   14a60:	mov	r1, sl
   14a64:	blx	r3
   14a68:	subs	r3, r0, #0
   14a6c:	beq	14df8 <__assert_fail@plt+0x398c>
   14a70:	cmp	r7, #0
   14a74:	beq	14a98 <__assert_fail@plt+0x362c>
   14a78:	ldr	r2, [r5, #28]
   14a7c:	ldr	r1, [r5, #32]
   14a80:	cmp	r2, r1
   14a84:	bcs	14e00 <__assert_fail@plt+0x3994>
   14a88:	add	r0, r2, #1
   14a8c:	mov	r1, #10
   14a90:	str	r0, [r5, #28]
   14a94:	strb	r1, [r2]
   14a98:	ldr	r2, [sp, #24]
   14a9c:	cmp	sl, r3
   14aa0:	movne	r2, #0
   14aa4:	andeq	r2, r2, #1
   14aa8:	cmp	r2, #0
   14aac:	beq	14d18 <__assert_fail@plt+0x38ac>
   14ab0:	ldr	r0, [r5, #28]
   14ab4:	ldr	r1, [r5, #32]
   14ab8:	add	r2, r0, r4
   14abc:	cmp	r1, r2
   14ac0:	bcs	14d78 <__assert_fail@plt+0x390c>
   14ac4:	mov	r1, r4
   14ac8:	mov	r0, r5
   14acc:	str	r3, [sp, #24]
   14ad0:	bl	1c620 <argp_parse@@Base+0x2c10>
   14ad4:	ldr	r3, [sp, #24]
   14ad8:	cmp	r0, #0
   14adc:	bne	14d74 <__assert_fail@plt+0x3908>
   14ae0:	ldr	r4, [r5, #28]
   14ae4:	ldr	r1, [r5, #24]
   14ae8:	ldr	r2, [r5, #16]
   14aec:	sub	r4, r4, r1
   14af0:	cmp	r4, r2
   14af4:	bhi	14d9c <__assert_fail@plt+0x3930>
   14af8:	ldr	r2, [r5, #20]
   14afc:	ldr	r1, [r5, #4]
   14b00:	bic	r2, r2, r2, asr #31
   14b04:	cmp	r1, r2
   14b08:	bcs	14b2c <__assert_fail@plt+0x36c0>
   14b0c:	ldr	r2, [r5, #28]
   14b10:	ldr	r1, [r5, #32]
   14b14:	cmp	r2, r1
   14b18:	bcs	14e24 <__assert_fail@plt+0x39b8>
   14b1c:	add	r0, r2, #1
   14b20:	mov	r1, #10
   14b24:	str	r0, [r5, #28]
   14b28:	strb	r1, [r2]
   14b2c:	cmp	sl, r3
   14b30:	moveq	r4, #1
   14b34:	beq	14b44 <__assert_fail@plt+0x36d8>
   14b38:	mov	r0, r3
   14b3c:	bl	1a98c <argp_parse@@Base+0xf7c>
   14b40:	mov	r4, #1
   14b44:	ldr	r3, [sp, #20]
   14b48:	cmp	r3, #0
   14b4c:	beq	14b64 <__assert_fail@plt+0x36f8>
   14b50:	ldr	r3, [fp, #20]
   14b54:	cmp	r3, #0
   14b58:	beq	14c48 <__assert_fail@plt+0x37dc>
   14b5c:	mov	r0, sl
   14b60:	bl	1a98c <argp_parse@@Base+0xf7c>
   14b64:	cmp	r6, #0
   14b68:	beq	14c48 <__assert_fail@plt+0x37dc>
   14b6c:	ldr	r3, [fp, #20]
   14b70:	cmp	r3, #0
   14b74:	beq	14c48 <__assert_fail@plt+0x37dc>
   14b78:	ldr	r2, [sp, #12]
   14b7c:	mov	r1, #0
   14b80:	ldr	r0, [pc, #980]	; 14f5c <__assert_fail@plt+0x3af0>
   14b84:	blx	r3
   14b88:	subs	sl, r0, #0
   14b8c:	beq	14c48 <__assert_fail@plt+0x37dc>
   14b90:	orrs	r3, r7, r4
   14b94:	beq	14bb8 <__assert_fail@plt+0x374c>
   14b98:	ldr	r3, [r5, #28]
   14b9c:	ldr	r2, [r5, #32]
   14ba0:	cmp	r3, r2
   14ba4:	bcs	14ee0 <__assert_fail@plt+0x3a74>
   14ba8:	add	r1, r3, #1
   14bac:	mov	r2, #10
   14bb0:	str	r1, [r5, #28]
   14bb4:	strb	r2, [r3]
   14bb8:	mov	r0, sl
   14bbc:	bl	11304 <strlen@plt>
   14bc0:	subs	r4, r0, #0
   14bc4:	beq	14bf0 <__assert_fail@plt+0x3784>
   14bc8:	ldr	r0, [r5, #28]
   14bcc:	ldr	r2, [r5, #32]
   14bd0:	add	r3, r0, r4
   14bd4:	cmp	r2, r3
   14bd8:	bcs	14e58 <__assert_fail@plt+0x39ec>
   14bdc:	mov	r1, r4
   14be0:	mov	r0, r5
   14be4:	bl	1c620 <argp_parse@@Base+0x2c10>
   14be8:	cmp	r0, #0
   14bec:	bne	14e54 <__assert_fail@plt+0x39e8>
   14bf0:	mov	r0, sl
   14bf4:	bl	1a98c <argp_parse@@Base+0xf7c>
   14bf8:	ldr	r3, [r5, #28]
   14bfc:	ldr	r1, [r5, #24]
   14c00:	ldr	r2, [r5, #16]
   14c04:	sub	r3, r3, r1
   14c08:	cmp	r3, r2
   14c0c:	bhi	14e74 <__assert_fail@plt+0x3a08>
   14c10:	ldr	r3, [r5, #20]
   14c14:	ldr	r2, [r5, #4]
   14c18:	bic	r3, r3, r3, asr #31
   14c1c:	cmp	r2, r3
   14c20:	bcs	14db0 <__assert_fail@plt+0x3944>
   14c24:	ldr	r3, [r5, #28]
   14c28:	ldr	r2, [r5, #32]
   14c2c:	cmp	r3, r2
   14c30:	bcs	14ec4 <__assert_fail@plt+0x3a58>
   14c34:	mov	r4, #1
   14c38:	add	r2, r3, r4
   14c3c:	str	r2, [r5, #28]
   14c40:	mov	r2, #10
   14c44:	strb	r2, [r3]
   14c48:	ldr	fp, [sp, #16]
   14c4c:	cmp	fp, #0
   14c50:	beq	14cc8 <__assert_fail@plt+0x385c>
   14c54:	ldr	r3, [fp]
   14c58:	cmp	r3, #0
   14c5c:	beq	14cc8 <__assert_fail@plt+0x385c>
   14c60:	eor	r2, r4, #1
   14c64:	and	r2, r2, #1
   14c68:	clz	sl, r8
   14c6c:	lsr	sl, sl, #5
   14c70:	orrs	r2, sl, r2
   14c74:	bne	14c90 <__assert_fail@plt+0x3824>
   14c78:	b	14efc <__assert_fail@plt+0x3a90>
   14c7c:	cmp	r4, #0
   14c80:	movne	r2, sl
   14c84:	orreq	r2, sl, #1
   14c88:	cmp	r2, #0
   14c8c:	beq	14cc8 <__assert_fail@plt+0x385c>
   14c90:	orrs	r2, r7, r4
   14c94:	mov	r0, r3
   14c98:	str	r5, [sp, #4]
   14c9c:	movne	r3, #1
   14ca0:	moveq	r3, #0
   14ca4:	str	r8, [sp]
   14ca8:	mov	r2, r6
   14cac:	mov	r1, r9
   14cb0:	bl	149b8 <__assert_fail@plt+0x354c>
   14cb4:	ldr	r3, [fp, #16]
   14cb8:	add	fp, fp, #16
   14cbc:	cmp	r3, #0
   14cc0:	orr	r4, r4, r0
   14cc4:	bne	14c7c <__assert_fail@plt+0x3810>
   14cc8:	mov	r0, r4
   14ccc:	add	sp, sp, #36	; 0x24
   14cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cd4:	cmp	r0, #0
   14cd8:	addne	sl, r0, #1
   14cdc:	beq	14ea0 <__assert_fail@plt+0x3a34>
   14ce0:	ldr	r3, [fp, #20]
   14ce4:	cmp	r3, #0
   14ce8:	beq	14e80 <__assert_fail@plt+0x3a14>
   14cec:	mov	r3, #0
   14cf0:	mov	r1, r9
   14cf4:	mov	r0, fp
   14cf8:	mov	r4, r3
   14cfc:	str	r3, [sp, #20]
   14d00:	bl	1a830 <argp_parse@@Base+0xe20>
   14d04:	str	r4, [sp, #24]
   14d08:	ldr	r3, [fp, #20]
   14d0c:	str	r0, [sp, #12]
   14d10:	ldr	r0, [pc, #584]	; 14f60 <__assert_fail@plt+0x3af4>
   14d14:	b	14a5c <__assert_fail@plt+0x35f0>
   14d18:	mov	r0, r3
   14d1c:	str	r3, [sp, #24]
   14d20:	bl	11304 <strlen@plt>
   14d24:	ldr	r3, [sp, #24]
   14d28:	subs	r4, r0, #0
   14d2c:	beq	14ae0 <__assert_fail@plt+0x3674>
   14d30:	ldr	r0, [r5, #28]
   14d34:	ldr	r1, [r5, #32]
   14d38:	add	r2, r0, r4
   14d3c:	cmp	r1, r2
   14d40:	bcs	14d64 <__assert_fail@plt+0x38f8>
   14d44:	mov	r1, r4
   14d48:	mov	r0, r5
   14d4c:	str	r3, [sp, #24]
   14d50:	bl	1c620 <argp_parse@@Base+0x2c10>
   14d54:	ldr	r3, [sp, #24]
   14d58:	cmp	r0, #0
   14d5c:	beq	14ae0 <__assert_fail@plt+0x3674>
   14d60:	ldr	r0, [r5, #28]
   14d64:	mov	r2, r4
   14d68:	mov	r1, r3
   14d6c:	str	r3, [sp, #24]
   14d70:	b	14d84 <__assert_fail@plt+0x3918>
   14d74:	ldr	r0, [r5, #28]
   14d78:	mov	r2, r4
   14d7c:	mov	r1, sl
   14d80:	str	r3, [sp, #24]
   14d84:	bl	111b4 <memcpy@plt>
   14d88:	ldr	r2, [r5, #28]
   14d8c:	ldr	r3, [sp, #24]
   14d90:	add	r4, r2, r4
   14d94:	str	r4, [r5, #28]
   14d98:	b	14ae4 <__assert_fail@plt+0x3678>
   14d9c:	mov	r0, r5
   14da0:	str	r3, [sp, #24]
   14da4:	bl	1c074 <argp_parse@@Base+0x2664>
   14da8:	ldr	r3, [sp, #24]
   14dac:	b	14af8 <__assert_fail@plt+0x368c>
   14db0:	mov	r4, #1
   14db4:	b	14c48 <__assert_fail@plt+0x37dc>
   14db8:	ldr	r4, [r0, #20]
   14dbc:	cmp	r4, #0
   14dc0:	beq	14f08 <__assert_fail@plt+0x3a9c>
   14dc4:	bl	1a830 <argp_parse@@Base+0xe20>
   14dc8:	cmp	r6, #0
   14dcc:	ldr	r3, [fp, #20]
   14dd0:	strne	sl, [sp, #20]
   14dd4:	strne	sl, [sp, #24]
   14dd8:	movne	r4, sl
   14ddc:	streq	r6, [sp, #20]
   14de0:	streq	r6, [sp, #24]
   14de4:	moveq	r4, r6
   14de8:	str	r0, [sp, #12]
   14dec:	ldrne	r0, [pc, #364]	; 14f60 <__assert_fail@plt+0x3af4>
   14df0:	ldreq	r0, [pc, #352]	; 14f58 <__assert_fail@plt+0x3aec>
   14df4:	b	14a5c <__assert_fail@plt+0x35f0>
   14df8:	mov	r4, r3
   14dfc:	b	14b44 <__assert_fail@plt+0x36d8>
   14e00:	mov	r1, #1
   14e04:	mov	r0, r5
   14e08:	str	r3, [sp, #28]
   14e0c:	bl	1c620 <argp_parse@@Base+0x2c10>
   14e10:	ldr	r3, [sp, #28]
   14e14:	cmp	r0, #0
   14e18:	beq	14a98 <__assert_fail@plt+0x362c>
   14e1c:	ldr	r2, [r5, #28]
   14e20:	b	14a88 <__assert_fail@plt+0x361c>
   14e24:	mov	r1, #1
   14e28:	mov	r0, r5
   14e2c:	str	r3, [sp, #24]
   14e30:	bl	1c620 <argp_parse@@Base+0x2c10>
   14e34:	ldr	r3, [sp, #24]
   14e38:	cmp	r0, #0
   14e3c:	beq	14b2c <__assert_fail@plt+0x36c0>
   14e40:	ldr	r2, [r5, #28]
   14e44:	b	14b1c <__assert_fail@plt+0x36b0>
   14e48:	str	r4, [sp, #20]
   14e4c:	str	r4, [sp, #24]
   14e50:	b	14a44 <__assert_fail@plt+0x35d8>
   14e54:	ldr	r0, [r5, #28]
   14e58:	mov	r2, r4
   14e5c:	mov	r1, sl
   14e60:	bl	111b4 <memcpy@plt>
   14e64:	ldr	r3, [r5, #28]
   14e68:	add	r4, r3, r4
   14e6c:	str	r4, [r5, #28]
   14e70:	b	14bf0 <__assert_fail@plt+0x3784>
   14e74:	mov	r0, r5
   14e78:	bl	1c074 <argp_parse@@Base+0x2664>
   14e7c:	b	14c10 <__assert_fail@plt+0x37a4>
   14e80:	cmp	sl, #0
   14e84:	beq	14f04 <__assert_fail@plt+0x3a98>
   14e88:	str	r3, [sp, #20]
   14e8c:	str	r3, [sp, #24]
   14e90:	mov	r4, r3
   14e94:	str	r3, [sp, #12]
   14e98:	mov	r3, sl
   14e9c:	b	14a70 <__assert_fail@plt+0x3604>
   14ea0:	mov	sl, r0
   14ea4:	b	14ce0 <__assert_fail@plt+0x3874>
   14ea8:	adds	r3, r4, #0
   14eac:	movne	r3, #1
   14eb0:	str	r3, [sp, #24]
   14eb4:	str	r3, [sp, #20]
   14eb8:	str	r6, [sp, #12]
   14ebc:	mov	r3, sl
   14ec0:	b	14a70 <__assert_fail@plt+0x3604>
   14ec4:	mov	r1, #1
   14ec8:	mov	r0, r5
   14ecc:	bl	1c620 <argp_parse@@Base+0x2c10>
   14ed0:	cmp	r0, #0
   14ed4:	beq	14db0 <__assert_fail@plt+0x3944>
   14ed8:	ldr	r3, [r5, #28]
   14edc:	b	14c34 <__assert_fail@plt+0x37c8>
   14ee0:	mov	r1, #1
   14ee4:	mov	r0, r5
   14ee8:	bl	1c620 <argp_parse@@Base+0x2c10>
   14eec:	cmp	r0, #0
   14ef0:	beq	14bb8 <__assert_fail@plt+0x374c>
   14ef4:	ldr	r3, [r5, #28]
   14ef8:	b	14ba8 <__assert_fail@plt+0x373c>
   14efc:	mov	r4, #1
   14f00:	b	14cc8 <__assert_fail@plt+0x385c>
   14f04:	mov	r4, sl
   14f08:	str	r4, [sp, #12]
   14f0c:	b	14b64 <__assert_fail@plt+0x36f8>
   14f10:	cmp	r3, #0
   14f14:	beq	14f40 <__assert_fail@plt+0x3ad4>
   14f18:	mov	r1, r9
   14f1c:	mov	r0, fp
   14f20:	bl	1a830 <argp_parse@@Base+0xe20>
   14f24:	mov	r4, r6
   14f28:	ldr	r3, [fp, #20]
   14f2c:	str	r6, [sp, #20]
   14f30:	str	r6, [sp, #24]
   14f34:	str	r0, [sp, #12]
   14f38:	ldr	r0, [pc, #24]	; 14f58 <__assert_fail@plt+0x3aec>
   14f3c:	b	14a5c <__assert_fail@plt+0x35f0>
   14f40:	mov	r3, sl
   14f44:	str	r6, [sp, #20]
   14f48:	str	r6, [sp, #24]
   14f4c:	mov	r4, r6
   14f50:	str	r6, [sp, #12]
   14f54:	b	14a70 <__assert_fail@plt+0x3604>
   14f58:	andeq	r0, r0, #1
   14f5c:	andeq	r0, r0, #4
   14f60:	andeq	r0, r0, #2
   14f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f68:	sub	sp, sp, #52	; 0x34
   14f6c:	mov	r3, r0
   14f70:	str	r0, [sp, #20]
   14f74:	mov	r0, #16
   14f78:	ldr	r6, [r3, #16]
   14f7c:	ldr	r4, [r3]
   14f80:	str	r1, [sp, #28]
   14f84:	bl	1bf70 <argp_parse@@Base+0x2560>
   14f88:	subs	r3, r0, #0
   14f8c:	str	r3, [sp, #16]
   14f90:	beq	15580 <__assert_fail@plt+0x4114>
   14f94:	mov	r2, r3
   14f98:	cmp	r4, #0
   14f9c:	mov	r3, #0
   14fa0:	str	r3, [r2, #4]
   14fa4:	str	r3, [r2, #12]
   14fa8:	beq	151bc <__assert_fail@plt+0x3d50>
   14fac:	ldr	fp, [r4, #12]
   14fb0:	ands	fp, fp, #4
   14fb4:	bne	15594 <__assert_fail@plt+0x4128>
   14fb8:	add	r5, r4, #24
   14fbc:	mov	r7, r4
   14fc0:	mov	r9, fp
   14fc4:	mov	sl, fp
   14fc8:	mov	r4, r2
   14fcc:	b	15010 <__assert_fail@plt+0x3ba4>
   14fd0:	ldr	r3, [r5, #-12]
   14fd4:	tst	r3, #4
   14fd8:	addeq	r9, r9, #1
   14fdc:	streq	r9, [r4, #4]
   14fe0:	tst	r3, #8
   14fe4:	bne	1500c <__assert_fail@plt+0x3ba0>
   14fe8:	sub	r3, r8, #1
   14fec:	cmp	r3, #254	; 0xfe
   14ff0:	bhi	1500c <__assert_fail@plt+0x3ba0>
   14ff4:	bl	112d4 <__ctype_b_loc@plt>
   14ff8:	lsl	r8, r8, #1
   14ffc:	ldr	r3, [r0]
   15000:	ldrh	r3, [r3, r8]
   15004:	tst	r3, #16384	; 0x4000
   15008:	addne	sl, sl, #1
   1500c:	add	r5, r5, #24
   15010:	ldr	r8, [r5, #-20]	; 0xffffffec
   15014:	cmp	r8, #0
   15018:	bne	14fd0 <__assert_fail@plt+0x3b64>
   1501c:	ldr	r3, [r5, #-24]	; 0xffffffe8
   15020:	cmp	r3, #0
   15024:	bne	14fd0 <__assert_fail@plt+0x3b64>
   15028:	ldr	r3, [r5, #-8]
   1502c:	cmp	r3, #0
   15030:	bne	14fd0 <__assert_fail@plt+0x3b64>
   15034:	ldr	r3, [r5, #-4]
   15038:	cmp	r3, #0
   1503c:	bne	14fd0 <__assert_fail@plt+0x3b64>
   15040:	rsb	r9, r9, r9, lsl #3
   15044:	mov	r4, r7
   15048:	lsl	r0, r9, #2
   1504c:	mov	r7, r3
   15050:	bl	1bf70 <argp_parse@@Base+0x2560>
   15054:	ldr	r5, [sp, #16]
   15058:	str	r0, [r5]
   1505c:	add	r0, sl, #1
   15060:	bl	1bf70 <argp_parse@@Base+0x2560>
   15064:	ldr	r8, [r5]
   15068:	mov	r3, r5
   1506c:	cmp	r0, #0
   15070:	cmpne	r8, #0
   15074:	mov	sl, r0
   15078:	str	r0, [r3, #8]
   1507c:	beq	1563c <__assert_fail@plt+0x41d0>
   15080:	ldr	r2, [sp, #16]
   15084:	ldr	r3, [pc, #1476]	; 15650 <__assert_fail@plt+0x41e4>
   15088:	ldr	r2, [r2, #4]
   1508c:	cmp	r2, r3
   15090:	bhi	15628 <__assert_fail@plt+0x41bc>
   15094:	add	r8, r8, #28
   15098:	mov	r9, sl
   1509c:	mov	r2, fp
   150a0:	ldr	r3, [r4, #4]
   150a4:	mov	fp, sl
   150a8:	mov	sl, r8
   150ac:	ldr	r8, [sp, #28]
   150b0:	str	r6, [sp, #4]
   150b4:	cmp	r3, #0
   150b8:	bne	150c8 <__assert_fail@plt+0x3c5c>
   150bc:	ldr	r0, [r4]
   150c0:	cmp	r0, #0
   150c4:	beq	155e0 <__assert_fail@plt+0x4174>
   150c8:	str	r7, [sl, #-24]	; 0xffffffe8
   150cc:	ldr	r5, [r4, #20]
   150d0:	str	r4, [sl, #-28]	; 0xffffffe4
   150d4:	cmp	r5, #0
   150d8:	str	fp, [sl, #-20]	; 0xffffffec
   150dc:	bne	150f4 <__assert_fail@plt+0x3c88>
   150e0:	ldr	r0, [r4]
   150e4:	cmp	r0, #0
   150e8:	cmpeq	r3, #0
   150ec:	movne	r5, r2
   150f0:	beq	15604 <__assert_fail@plt+0x4198>
   150f4:	ldr	r2, [sp, #20]
   150f8:	mov	r3, r7
   150fc:	str	r5, [sl, #-16]
   15100:	str	r8, [sl, #-12]
   15104:	str	r2, [sl, #-8]
   15108:	add	r3, r3, #1
   1510c:	str	r3, [sl, #-24]	; 0xffffffe8
   15110:	ldr	r3, [r4, #12]
   15114:	tst	r3, #8
   15118:	bne	15184 <__assert_fail@plt+0x3d18>
   1511c:	ldr	r6, [r4, #4]
   15120:	sub	r2, r6, #1
   15124:	cmp	r2, #254	; 0xfe
   15128:	bhi	15184 <__assert_fail@plt+0x3d18>
   1512c:	bl	112d4 <__ctype_b_loc@plt>
   15130:	lsl	r2, r6, #1
   15134:	ldr	r0, [r0]
   15138:	ldrh	r2, [r0, r2]
   1513c:	tst	r2, #16384	; 0x4000
   15140:	beq	15184 <__assert_fail@plt+0x3d18>
   15144:	cmp	r9, fp
   15148:	uxtb	r0, r6
   1514c:	bcs	1517c <__assert_fail@plt+0x3d10>
   15150:	ldrb	r3, [r9]
   15154:	cmp	r3, r0
   15158:	movne	r3, r9
   1515c:	subne	ip, fp, #1
   15160:	bne	15174 <__assert_fail@plt+0x3d08>
   15164:	b	15184 <__assert_fail@plt+0x3d18>
   15168:	ldrb	r2, [r3, #1]!
   1516c:	cmp	r2, r0
   15170:	beq	15184 <__assert_fail@plt+0x3d18>
   15174:	cmp	ip, r3
   15178:	bne	15168 <__assert_fail@plt+0x3cfc>
   1517c:	strb	r0, [fp]
   15180:	add	fp, fp, #1
   15184:	add	r4, r4, #24
   15188:	ldr	r3, [r4, #4]
   1518c:	cmp	r3, #0
   15190:	bne	151a0 <__assert_fail@plt+0x3d34>
   15194:	ldr	r2, [r4]
   15198:	cmp	r2, #0
   1519c:	beq	155bc <__assert_fail@plt+0x4150>
   151a0:	ldr	r2, [r4, #12]
   151a4:	tst	r2, #4
   151a8:	beq	155d4 <__assert_fail@plt+0x4168>
   151ac:	ldr	r3, [sl, #-24]	; 0xffffffe8
   151b0:	b	15108 <__assert_fail@plt+0x3c9c>
   151b4:	ldr	r6, [sp, #4]
   151b8:	strb	r3, [fp]
   151bc:	cmp	r6, #0
   151c0:	beq	152fc <__assert_fail@plt+0x3e90>
   151c4:	ldr	r0, [r6]
   151c8:	cmp	r0, #0
   151cc:	beq	152fc <__assert_fail@plt+0x3e90>
   151d0:	add	r3, r6, #16
   151d4:	str	r3, [sp, #8]
   151d8:	ldr	r3, [sp, #16]
   151dc:	add	r3, r3, #12
   151e0:	str	r3, [sp, #44]	; 0x2c
   151e4:	ldr	r3, [sp, #8]
   151e8:	ldr	r5, [r3, #-4]
   151ec:	ldr	r6, [r3, #-8]
   151f0:	cmp	r5, #0
   151f4:	bne	15200 <__assert_fail@plt+0x3d94>
   151f8:	cmp	r6, #0
   151fc:	beq	15554 <__assert_fail@plt+0x40e8>
   15200:	ldr	r3, [sp, #20]
   15204:	mov	r0, #28
   15208:	ldr	r2, [r3, #16]
   1520c:	ldr	r3, [sp, #8]
   15210:	sub	r3, r3, #16
   15214:	sub	r3, r3, r2
   15218:	asr	r4, r3, #4
   1521c:	bl	1bf70 <argp_parse@@Base+0x2560>
   15220:	subs	r1, r0, #0
   15224:	beq	15268 <__assert_fail@plt+0x3dfc>
   15228:	ldr	r3, [sp, #28]
   1522c:	ldr	r0, [sp, #16]
   15230:	cmp	r3, #0
   15234:	ldr	r2, [sp, #20]
   15238:	str	r3, [r1, #12]
   1523c:	ldrne	r3, [r3, #20]
   15240:	str	r2, [r1, #16]
   15244:	ldr	r2, [r0, #12]
   15248:	addne	r3, r3, #1
   1524c:	moveq	r3, #0
   15250:	str	r5, [r1, #8]
   15254:	str	r6, [r1]
   15258:	str	r4, [r1, #4]
   1525c:	str	r3, [r1, #20]
   15260:	str	r2, [r1, #24]
   15264:	str	r1, [r0, #12]
   15268:	ldr	r3, [sp, #8]
   1526c:	ldr	r0, [r3, #-16]
   15270:	bl	14f64 <__assert_fail@plt+0x3af8>
   15274:	ldr	r3, [sp, #16]
   15278:	ldr	r2, [r3, #12]
   1527c:	cmp	r2, #0
   15280:	mov	sl, r0
   15284:	bne	15290 <__assert_fail@plt+0x3e24>
   15288:	b	1555c <__assert_fail@plt+0x40f0>
   1528c:	mov	r2, r3
   15290:	ldr	r3, [r2, #24]
   15294:	cmp	r3, #0
   15298:	bne	1528c <__assert_fail@plt+0x3e20>
   1529c:	add	r2, r2, #24
   152a0:	ldr	r3, [sl, #4]
   152a4:	ldr	r1, [sl, #12]
   152a8:	cmp	r3, #0
   152ac:	str	r1, [r2]
   152b0:	mov	r2, #0
   152b4:	str	r2, [sl, #12]
   152b8:	beq	152e0 <__assert_fail@plt+0x3e74>
   152bc:	ldr	ip, [sp, #16]
   152c0:	ldr	r2, [ip, #4]
   152c4:	cmp	r2, #0
   152c8:	bne	15308 <__assert_fail@plt+0x3e9c>
   152cc:	ldr	r0, [sl]
   152d0:	ldr	r1, [sl, #8]
   152d4:	stm	ip, {r0, r3}
   152d8:	str	r1, [ip, #8]
   152dc:	str	r2, [sl, #4]
   152e0:	mov	r0, sl
   152e4:	bl	1a98c <argp_parse@@Base+0xf7c>
   152e8:	ldr	r3, [sp, #8]
   152ec:	ldr	r0, [r3], #16
   152f0:	cmp	r0, #0
   152f4:	str	r3, [sp, #8]
   152f8:	bne	151e8 <__assert_fail@plt+0x3d7c>
   152fc:	ldr	r0, [sp, #16]
   15300:	add	sp, sp, #52	; 0x34
   15304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15308:	add	r3, r3, r2
   1530c:	str	r3, [sp, #32]
   15310:	rsb	r0, r3, r3, lsl #3
   15314:	lsl	r0, r0, #2
   15318:	bl	1bf70 <argp_parse@@Base+0x2560>
   1531c:	ldr	r3, [sp, #16]
   15320:	mov	r4, r0
   15324:	str	r0, [sp, #24]
   15328:	ldr	r0, [r3, #8]
   1532c:	bl	11304 <strlen@plt>
   15330:	mov	r5, r0
   15334:	ldr	r0, [sl, #8]
   15338:	bl	11304 <strlen@plt>
   1533c:	add	r0, r5, r0
   15340:	add	r0, r0, #1
   15344:	bl	1bf70 <argp_parse@@Base+0x2560>
   15348:	cmp	r4, #0
   1534c:	cmpne	r0, #0
   15350:	mov	r7, r0
   15354:	beq	1556c <__assert_fail@plt+0x4100>
   15358:	ldr	r3, [sp, #32]
   1535c:	ldr	r2, [pc, #748]	; 15650 <__assert_fail@plt+0x41e4>
   15360:	cmp	r3, r2
   15364:	bhi	155a8 <__assert_fail@plt+0x413c>
   15368:	ldr	r6, [sp, #16]
   1536c:	ldr	r8, [sp, #24]
   15370:	ldm	r6, {r3, r4}
   15374:	mov	r0, r8
   15378:	rsb	r9, r4, r4, lsl #3
   1537c:	mov	r1, r3
   15380:	lsl	r9, r9, #2
   15384:	mov	r2, r9
   15388:	str	r3, [sp, #36]	; 0x24
   1538c:	bl	112c8 <mempcpy@plt>
   15390:	ldr	r3, [sl, #4]
   15394:	ldr	r1, [sl]
   15398:	str	r3, [sp, #4]
   1539c:	rsb	r2, r3, r3, lsl #3
   153a0:	lsl	r2, r2, #2
   153a4:	bl	111b4 <memcpy@plt>
   153a8:	ldr	r6, [r6, #8]
   153ac:	mov	r2, r5
   153b0:	mov	r1, r6
   153b4:	mov	r0, r7
   153b8:	bl	111b4 <memcpy@plt>
   153bc:	cmp	r4, #0
   153c0:	beq	15564 <__assert_fail@plt+0x40f8>
   153c4:	mov	r2, r8
   153c8:	ldr	r3, [r2, #8]
   153cc:	subs	r4, r4, #1
   153d0:	sub	r3, r3, r6
   153d4:	add	r3, r7, r3
   153d8:	str	r3, [r2, #8]
   153dc:	add	r2, r2, #28
   153e0:	bne	153c8 <__assert_fail@plt+0x3f5c>
   153e4:	ldr	r3, [sp, #24]
   153e8:	add	r1, r3, r9
   153ec:	ldr	r3, [sp, #4]
   153f0:	ldr	r9, [sl, #8]
   153f4:	cmp	r3, #0
   153f8:	add	r3, r7, r5
   153fc:	str	r3, [sp, #12]
   15400:	beq	154ec <__assert_fail@plt+0x4080>
   15404:	add	fp, r1, #28
   15408:	sub	r8, r3, #1
   1540c:	str	sl, [sp, #40]	; 0x28
   15410:	mov	r6, r3
   15414:	mov	sl, r9
   15418:	mov	r9, fp
   1541c:	mov	fp, r8
   15420:	ldr	r5, [r9, #-24]	; 0xffffffe8
   15424:	str	r6, [r9, #-20]	; 0xffffffec
   15428:	cmp	r5, #0
   1542c:	ldr	r4, [r9, #-28]	; 0xffffffe4
   15430:	bne	15444 <__assert_fail@plt+0x3fd8>
   15434:	b	154d0 <__assert_fail@plt+0x4064>
   15438:	subs	r5, r5, #1
   1543c:	add	r4, r4, #24
   15440:	beq	154d0 <__assert_fail@plt+0x4064>
   15444:	ldr	r3, [r4, #12]
   15448:	tst	r3, #8
   1544c:	bne	15438 <__assert_fail@plt+0x3fcc>
   15450:	ldr	r8, [r4, #4]
   15454:	sub	r3, r8, #1
   15458:	cmp	r3, #254	; 0xfe
   1545c:	bhi	15438 <__assert_fail@plt+0x3fcc>
   15460:	bl	112d4 <__ctype_b_loc@plt>
   15464:	lsl	r3, r8, #1
   15468:	ldr	r2, [r0]
   1546c:	ldrh	r3, [r2, r3]
   15470:	tst	r3, #16384	; 0x4000
   15474:	beq	15438 <__assert_fail@plt+0x3fcc>
   15478:	ldrb	r1, [sl]
   1547c:	cmp	r1, r8
   15480:	bne	15438 <__assert_fail@plt+0x3fcc>
   15484:	ldr	r3, [sp, #12]
   15488:	cmp	r7, r3
   1548c:	bcs	154b8 <__assert_fail@plt+0x404c>
   15490:	ldrb	r3, [r7]
   15494:	cmp	r3, r1
   15498:	movne	r3, r7
   1549c:	bne	154b0 <__assert_fail@plt+0x4044>
   154a0:	b	154c0 <__assert_fail@plt+0x4054>
   154a4:	ldrb	r2, [r3, #1]!
   154a8:	cmp	r2, r1
   154ac:	beq	154c0 <__assert_fail@plt+0x4054>
   154b0:	cmp	fp, r3
   154b4:	bne	154a4 <__assert_fail@plt+0x4038>
   154b8:	strb	r1, [r6]
   154bc:	add	r6, r6, #1
   154c0:	subs	r5, r5, #1
   154c4:	add	sl, sl, #1
   154c8:	add	r4, r4, #24
   154cc:	bne	15444 <__assert_fail@plt+0x3fd8>
   154d0:	ldr	r3, [sp, #4]
   154d4:	add	r9, r9, #28
   154d8:	subs	r3, r3, #1
   154dc:	str	r3, [sp, #4]
   154e0:	bne	15420 <__assert_fail@plt+0x3fb4>
   154e4:	ldr	sl, [sp, #40]	; 0x28
   154e8:	mov	r3, r6
   154ec:	mov	r2, #0
   154f0:	strb	r2, [r3]
   154f4:	ldr	r0, [sp, #36]	; 0x24
   154f8:	bl	1a98c <argp_parse@@Base+0xf7c>
   154fc:	ldr	r4, [sp, #16]
   15500:	ldr	r0, [r4, #8]
   15504:	bl	1a98c <argp_parse@@Base+0xf7c>
   15508:	ldr	r2, [sp, #24]
   1550c:	ldr	r0, [sl, #12]
   15510:	str	r2, [r4]
   15514:	ldr	r2, [sp, #32]
   15518:	cmp	r0, #0
   1551c:	stmib	r4, {r2, r7}
   15520:	beq	15534 <__assert_fail@plt+0x40c8>
   15524:	ldr	r4, [r0, #24]
   15528:	bl	1a98c <argp_parse@@Base+0xf7c>
   1552c:	subs	r0, r4, #0
   15530:	bne	15524 <__assert_fail@plt+0x40b8>
   15534:	ldr	r3, [sl, #4]
   15538:	cmp	r3, #0
   1553c:	beq	152e0 <__assert_fail@plt+0x3e74>
   15540:	ldr	r0, [sl]
   15544:	bl	1a98c <argp_parse@@Base+0xf7c>
   15548:	ldr	r0, [sl, #8]
   1554c:	bl	1a98c <argp_parse@@Base+0xf7c>
   15550:	b	152e0 <__assert_fail@plt+0x3e74>
   15554:	ldr	r1, [sp, #28]
   15558:	b	15270 <__assert_fail@plt+0x3e04>
   1555c:	ldr	r2, [sp, #44]	; 0x2c
   15560:	b	152a0 <__assert_fail@plt+0x3e34>
   15564:	ldr	r1, [sp, #24]
   15568:	b	153ec <__assert_fail@plt+0x3f80>
   1556c:	ldr	r3, [pc, #224]	; 15654 <__assert_fail@plt+0x41e8>
   15570:	ldr	r2, [pc, #224]	; 15658 <__assert_fail@plt+0x41ec>
   15574:	ldr	r1, [pc, #224]	; 1565c <__assert_fail@plt+0x41f0>
   15578:	ldr	r0, [pc, #224]	; 15660 <__assert_fail@plt+0x41f4>
   1557c:	bl	1146c <__assert_fail@plt>
   15580:	ldr	r3, [pc, #220]	; 15664 <__assert_fail@plt+0x41f8>
   15584:	ldr	r2, [pc, #220]	; 15668 <__assert_fail@plt+0x41fc>
   15588:	ldr	r1, [pc, #204]	; 1565c <__assert_fail@plt+0x41f0>
   1558c:	ldr	r0, [pc, #216]	; 1566c <__assert_fail@plt+0x4200>
   15590:	bl	1146c <__assert_fail@plt>
   15594:	ldr	r3, [pc, #200]	; 15664 <__assert_fail@plt+0x41f8>
   15598:	mov	r2, #460	; 0x1cc
   1559c:	ldr	r1, [pc, #184]	; 1565c <__assert_fail@plt+0x41f0>
   155a0:	ldr	r0, [pc, #200]	; 15670 <__assert_fail@plt+0x4204>
   155a4:	bl	1146c <__assert_fail@plt>
   155a8:	ldr	r3, [pc, #164]	; 15654 <__assert_fail@plt+0x41e8>
   155ac:	mov	r2, #972	; 0x3cc
   155b0:	ldr	r1, [pc, #164]	; 1565c <__assert_fail@plt+0x41f0>
   155b4:	ldr	r0, [pc, #184]	; 15674 <__assert_fail@plt+0x4208>
   155b8:	bl	1146c <__assert_fail@plt>
   155bc:	ldr	r2, [r4, #16]
   155c0:	cmp	r2, #0
   155c4:	bne	151a0 <__assert_fail@plt+0x3d34>
   155c8:	ldr	r2, [r4, #20]
   155cc:	cmp	r2, #0
   155d0:	bne	151a0 <__assert_fail@plt+0x3d34>
   155d4:	add	sl, sl, #28
   155d8:	mov	r2, r5
   155dc:	b	150b4 <__assert_fail@plt+0x3c48>
   155e0:	ldr	r0, [r4, #16]
   155e4:	cmp	r0, #0
   155e8:	beq	1560c <__assert_fail@plt+0x41a0>
   155ec:	str	r3, [sl, #-24]	; 0xffffffe8
   155f0:	ldr	r5, [r4, #20]
   155f4:	str	r4, [sl, #-28]	; 0xffffffe4
   155f8:	cmp	r5, #0
   155fc:	str	fp, [sl, #-20]	; 0xffffffec
   15600:	bne	150f4 <__assert_fail@plt+0x3c88>
   15604:	add	r5, r2, #1
   15608:	b	150f4 <__assert_fail@plt+0x3c88>
   1560c:	ldr	r5, [r4, #20]
   15610:	cmp	r5, #0
   15614:	beq	151b4 <__assert_fail@plt+0x3d48>
   15618:	str	r4, [sl, #-28]	; 0xffffffe4
   1561c:	str	r3, [sl, #-24]	; 0xffffffe8
   15620:	str	fp, [sl, #-20]	; 0xffffffec
   15624:	b	150f4 <__assert_fail@plt+0x3c88>
   15628:	ldr	r3, [pc, #52]	; 15664 <__assert_fail@plt+0x41f8>
   1562c:	mov	r2, #476	; 0x1dc
   15630:	ldr	r1, [pc, #36]	; 1565c <__assert_fail@plt+0x41f0>
   15634:	ldr	r0, [pc, #60]	; 15678 <__assert_fail@plt+0x420c>
   15638:	bl	1146c <__assert_fail@plt>
   1563c:	ldr	r3, [pc, #32]	; 15664 <__assert_fail@plt+0x41f8>
   15640:	ldr	r2, [pc, #52]	; 1567c <__assert_fail@plt+0x4210>
   15644:	ldr	r1, [pc, #16]	; 1565c <__assert_fail@plt+0x41f0>
   15648:	ldr	r0, [pc, #48]	; 15680 <__assert_fail@plt+0x4214>
   1564c:	bl	1146c <__assert_fail@plt>
   15650:	stmdbeq	r4!, {r0, r3, r6, r9, ip, pc}
   15654:	andeq	pc, r1, r4, lsl #9
   15658:	andeq	r0, r0, sl, asr #7
   1565c:	andeq	pc, r1, r0, lsr #10
   15660:	andeq	pc, r1, r0, lsr #11
   15664:	andeq	pc, r1, r8, ror r4	; <UNPREDICTABLE>
   15668:	andeq	r0, r0, r2, asr #3
   1566c:	andeq	pc, r1, ip, lsr #10
   15670:	andeq	pc, r1, r0, lsr r5	; <UNPREDICTABLE>
   15674:			; <UNDEFINED> instruction: 0x0001f5bc
   15678:	andeq	pc, r1, r4, ror #10
   1567c:	ldrdeq	r0, [r0], -sl
   15680:	andeq	pc, r1, r0, asr #10
   15684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15688:	mov	r7, r2
   1568c:	sub	sp, sp, #28
   15690:	mov	r4, r3
   15694:	ldr	r3, [r7]
   15698:	ldr	r2, [r0, #20]
   1569c:	str	r3, [sp, #20]
   156a0:	ldr	r3, [r0, #16]
   156a4:	cmp	r2, #0
   156a8:	str	r3, [sp, #12]
   156ac:	ldr	r3, [r0, #8]
   156b0:	mov	r8, r1
   156b4:	mov	r9, r3
   156b8:	str	r3, [sp, #16]
   156bc:	ldr	r5, [sp, #64]	; 0x40
   156c0:	beq	15918 <__assert_fail@plt+0x44ac>
   156c4:	mov	r6, r0
   156c8:	bl	1a830 <argp_parse@@Base+0xe20>
   156cc:	ldr	r3, [r6, #20]
   156d0:	mov	r1, r9
   156d4:	mov	r2, r0
   156d8:	ldr	r0, [pc, #640]	; 15960 <__assert_fail@plt+0x44f4>
   156dc:	blx	r3
   156e0:	mov	r3, r0
   156e4:	str	r0, [sp, #8]
   156e8:	cmp	r3, #0
   156ec:	beq	158b8 <__assert_fail@plt+0x444c>
   156f0:	mov	r1, #10
   156f4:	mov	r0, r3
   156f8:	bl	11184 <strchrnul@plt>
   156fc:	ldrb	sl, [r0]
   15700:	mov	r6, r0
   15704:	cmp	sl, #0
   15708:	bne	15850 <__assert_fail@plt+0x43e4>
   1570c:	ldr	fp, [sp, #8]
   15710:	ldr	r3, [r5, #28]
   15714:	ldr	r1, [r5, #24]
   15718:	ldr	r0, [r5, #16]
   1571c:	sub	r1, r3, r1
   15720:	cmp	r1, r0
   15724:	add	r9, r6, #1
   15728:	mov	r1, r3
   1572c:	sub	r9, r9, fp
   15730:	bhi	158e8 <__assert_fail@plt+0x447c>
   15734:	ldr	r0, [r5, #20]
   15738:	ldr	ip, [r5, #8]
   1573c:	cmp	r0, #0
   15740:	addge	r9, r9, r0
   15744:	cmp	r9, ip
   15748:	bcc	15898 <__assert_fail@plt+0x442c>
   1574c:	ldr	r1, [r5, #32]
   15750:	cmp	r1, r3
   15754:	bls	15920 <__assert_fail@plt+0x44b4>
   15758:	add	r0, r3, #1
   1575c:	mov	r1, #10
   15760:	str	r0, [r5, #28]
   15764:	strb	r1, [r3]
   15768:	ldr	r0, [r5, #28]
   1576c:	sub	r9, r6, fp
   15770:	ldr	r1, [r5, #32]
   15774:	add	r3, r0, r9
   15778:	cmp	r1, r3
   1577c:	bcs	15798 <__assert_fail@plt+0x432c>
   15780:	mov	r1, r9
   15784:	mov	r0, r5
   15788:	bl	1c620 <argp_parse@@Base+0x2c10>
   1578c:	cmp	r0, #0
   15790:	beq	157b0 <__assert_fail@plt+0x4344>
   15794:	ldr	r0, [r5, #28]
   15798:	mov	r2, r9
   1579c:	mov	r1, fp
   157a0:	bl	111b4 <memcpy@plt>
   157a4:	ldr	r3, [r5, #28]
   157a8:	add	r9, r3, r9
   157ac:	str	r9, [r5, #28]
   157b0:	ldr	r3, [sp, #16]
   157b4:	ldr	r2, [sp, #8]
   157b8:	cmp	r3, r2
   157bc:	beq	157c8 <__assert_fail@plt+0x435c>
   157c0:	mov	r0, r2
   157c4:	bl	1a98c <argp_parse@@Base+0xf7c>
   157c8:	ldr	r3, [sp, #12]
   157cc:	cmp	r3, #0
   157d0:	beq	15814 <__assert_fail@plt+0x43a8>
   157d4:	ldr	r2, [r3]
   157d8:	cmp	r2, #0
   157dc:	beq	15814 <__assert_fail@plt+0x43a8>
   157e0:	ldr	r9, [sp, #12]
   157e4:	mov	r3, r4
   157e8:	mov	r0, r2
   157ec:	str	r5, [sp]
   157f0:	mov	r2, r7
   157f4:	mov	r1, r8
   157f8:	bl	15684 <__assert_fail@plt+0x4218>
   157fc:	ldr	r2, [r9, #16]!
   15800:	cmp	r2, #0
   15804:	clz	r3, r0
   15808:	lsr	r3, r3, #5
   1580c:	bne	157e8 <__assert_fail@plt+0x437c>
   15810:	mov	r4, r3
   15814:	cmp	r4, #0
   15818:	moveq	sl, #0
   1581c:	andne	sl, sl, #1
   15820:	cmp	sl, #0
   15824:	beq	158d8 <__assert_fail@plt+0x446c>
   15828:	ldrb	r0, [r6]
   1582c:	cmp	r0, #0
   15830:	bne	158fc <__assert_fail@plt+0x4490>
   15834:	ldr	r3, [sp, #20]
   15838:	ldrb	r4, [r3]
   1583c:	cmp	r4, #0
   15840:	moveq	r0, r4
   15844:	strbne	r0, [r3]
   15848:	add	sp, sp, #28
   1584c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15850:	ldr	r3, [sp, #20]
   15854:	ldrb	r9, [r3]
   15858:	cmp	r9, #0
   1585c:	beq	15958 <__assert_fail@plt+0x44ec>
   15860:	mov	sl, #0
   15864:	add	fp, r0, #1
   15868:	add	sl, sl, #1
   1586c:	mov	r0, fp
   15870:	mov	r1, #10
   15874:	bl	11184 <strchrnul@plt>
   15878:	cmp	sl, r9
   1587c:	bne	15864 <__assert_fail@plt+0x43f8>
   15880:	mov	r6, r0
   15884:	ldr	r3, [r7]
   15888:	mov	sl, #1
   1588c:	add	r3, r3, sl
   15890:	str	r3, [r7]
   15894:	b	15710 <__assert_fail@plt+0x42a4>
   15898:	ldr	r0, [r5, #32]
   1589c:	cmp	r0, r3
   158a0:	bls	1593c <__assert_fail@plt+0x44d0>
   158a4:	add	r0, r1, #1
   158a8:	mov	r3, #32
   158ac:	str	r0, [r5, #28]
   158b0:	strb	r3, [r1]
   158b4:	b	15768 <__assert_fail@plt+0x42fc>
   158b8:	ldr	r3, [sp, #12]
   158bc:	cmp	r3, #0
   158c0:	beq	158d8 <__assert_fail@plt+0x446c>
   158c4:	ldr	r2, [r3]
   158c8:	cmp	r2, #0
   158cc:	ldrne	r6, [sp, #8]
   158d0:	movne	sl, r6
   158d4:	bne	157e0 <__assert_fail@plt+0x4374>
   158d8:	clz	r0, r4
   158dc:	lsr	r0, r0, #5
   158e0:	add	sp, sp, #28
   158e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158e8:	mov	r0, r5
   158ec:	bl	1c074 <argp_parse@@Base+0x2664>
   158f0:	ldr	r3, [r5, #28]
   158f4:	mov	r1, r3
   158f8:	b	15734 <__assert_fail@plt+0x42c8>
   158fc:	ldr	r2, [sp, #20]
   15900:	mov	r0, #1
   15904:	ldrb	r3, [r2]
   15908:	add	r3, r3, r0
   1590c:	strb	r3, [r2]
   15910:	add	sp, sp, #28
   15914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15918:	str	r3, [sp, #8]
   1591c:	b	156e8 <__assert_fail@plt+0x427c>
   15920:	mov	r1, #1
   15924:	mov	r0, r5
   15928:	bl	1c620 <argp_parse@@Base+0x2c10>
   1592c:	cmp	r0, #0
   15930:	beq	15768 <__assert_fail@plt+0x42fc>
   15934:	ldr	r3, [r5, #28]
   15938:	b	15758 <__assert_fail@plt+0x42ec>
   1593c:	mov	r1, #1
   15940:	mov	r0, r5
   15944:	bl	1c620 <argp_parse@@Base+0x2c10>
   15948:	cmp	r0, #0
   1594c:	beq	15768 <__assert_fail@plt+0x42fc>
   15950:	ldr	r1, [r5, #28]
   15954:	b	158a4 <__assert_fail@plt+0x4438>
   15958:	ldr	fp, [sp, #8]
   1595c:	b	15884 <__assert_fail@plt+0x4418>
   15960:	andeq	r0, r0, #6
   15964:	subs	r3, r0, #0
   15968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1596c:	moveq	r0, r3
   15970:	sub	sp, sp, #52	; 0x34
   15974:	mov	r4, r1
   15978:	beq	1598c <__assert_fail@plt+0x4520>
   1597c:	mov	r1, #10
   15980:	bl	11310 <strchr@plt>
   15984:	adds	r0, r0, #0
   15988:	movne	r0, #1
   1598c:	cmp	r4, #0
   15990:	str	r0, [sp, #20]
   15994:	beq	15ca4 <__assert_fail@plt+0x4838>
   15998:	ldr	r3, [r4]
   1599c:	cmp	r3, #0
   159a0:	beq	15ca4 <__assert_fail@plt+0x4838>
   159a4:	mov	r9, #0
   159a8:	mov	r8, #10
   159ac:	str	r4, [sp, #24]
   159b0:	ldr	r0, [r3, #8]
   159b4:	ldr	r4, [r3, #16]
   159b8:	cmp	r0, #0
   159bc:	moveq	r0, r9
   159c0:	beq	159d4 <__assert_fail@plt+0x4568>
   159c4:	mov	r1, r8
   159c8:	bl	11310 <strchr@plt>
   159cc:	adds	r0, r0, #0
   159d0:	movne	r0, #1
   159d4:	cmp	r4, #0
   159d8:	str	r0, [sp]
   159dc:	beq	15c80 <__assert_fail@plt+0x4814>
   159e0:	ldr	r3, [r4]
   159e4:	cmp	r3, #0
   159e8:	beq	15c80 <__assert_fail@plt+0x4814>
   159ec:	str	r4, [sp, #28]
   159f0:	ldr	r0, [r3, #8]
   159f4:	ldr	r4, [r3, #16]
   159f8:	cmp	r0, #0
   159fc:	moveq	r0, r9
   15a00:	beq	15a14 <__assert_fail@plt+0x45a8>
   15a04:	mov	r1, r8
   15a08:	bl	11310 <strchr@plt>
   15a0c:	adds	r0, r0, #0
   15a10:	movne	r0, #1
   15a14:	cmp	r4, #0
   15a18:	str	r0, [sp, #4]
   15a1c:	beq	15c60 <__assert_fail@plt+0x47f4>
   15a20:	ldr	r3, [r4]
   15a24:	cmp	r3, #0
   15a28:	beq	15c60 <__assert_fail@plt+0x47f4>
   15a2c:	str	r4, [sp, #32]
   15a30:	ldr	r0, [r3, #8]
   15a34:	ldr	r4, [r3, #16]
   15a38:	cmp	r0, #0
   15a3c:	moveq	r0, r9
   15a40:	beq	15a54 <__assert_fail@plt+0x45e8>
   15a44:	mov	r1, r8
   15a48:	bl	11310 <strchr@plt>
   15a4c:	adds	r0, r0, #0
   15a50:	movne	r0, #1
   15a54:	cmp	r4, #0
   15a58:	str	r0, [sp, #8]
   15a5c:	beq	15c40 <__assert_fail@plt+0x47d4>
   15a60:	ldr	r3, [r4]
   15a64:	cmp	r3, #0
   15a68:	beq	15c40 <__assert_fail@plt+0x47d4>
   15a6c:	str	r4, [sp, #36]	; 0x24
   15a70:	ldr	r0, [r3, #8]
   15a74:	ldr	r4, [r3, #16]
   15a78:	cmp	r0, #0
   15a7c:	moveq	r0, r9
   15a80:	beq	15a94 <__assert_fail@plt+0x4628>
   15a84:	mov	r1, r8
   15a88:	bl	11310 <strchr@plt>
   15a8c:	adds	r0, r0, #0
   15a90:	movne	r0, #1
   15a94:	cmp	r4, #0
   15a98:	str	r0, [sp, #12]
   15a9c:	beq	15c1c <__assert_fail@plt+0x47b0>
   15aa0:	ldr	r3, [r4]
   15aa4:	cmp	r3, #0
   15aa8:	beq	15c1c <__assert_fail@plt+0x47b0>
   15aac:	str	r4, [sp, #40]	; 0x28
   15ab0:	ldr	r0, [r3, #8]
   15ab4:	ldr	fp, [r3, #16]
   15ab8:	cmp	r0, #0
   15abc:	moveq	r0, r9
   15ac0:	beq	15ad4 <__assert_fail@plt+0x4668>
   15ac4:	mov	r1, r8
   15ac8:	bl	11310 <strchr@plt>
   15acc:	adds	r0, r0, #0
   15ad0:	movne	r0, #1
   15ad4:	cmp	fp, #0
   15ad8:	str	r0, [sp, #16]
   15adc:	beq	15bf8 <__assert_fail@plt+0x478c>
   15ae0:	ldr	r3, [fp]
   15ae4:	cmp	r3, #0
   15ae8:	beq	15bf8 <__assert_fail@plt+0x478c>
   15aec:	str	fp, [sp, #44]	; 0x2c
   15af0:	ldr	r0, [r3, #8]
   15af4:	ldr	r7, [r3, #16]
   15af8:	cmp	r0, #0
   15afc:	moveq	r0, r9
   15b00:	beq	15b14 <__assert_fail@plt+0x46a8>
   15b04:	mov	r1, r8
   15b08:	bl	11310 <strchr@plt>
   15b0c:	adds	r0, r0, #0
   15b10:	movne	r0, #1
   15b14:	cmp	r7, #0
   15b18:	mov	r6, r0
   15b1c:	beq	15bd8 <__assert_fail@plt+0x476c>
   15b20:	ldr	r3, [r7]
   15b24:	cmp	r3, #0
   15b28:	beq	15bd8 <__assert_fail@plt+0x476c>
   15b2c:	ldr	r0, [r3, #8]
   15b30:	ldr	r5, [r3, #16]
   15b34:	cmp	r0, #0
   15b38:	moveq	sl, r9
   15b3c:	beq	15b50 <__assert_fail@plt+0x46e4>
   15b40:	mov	r1, r8
   15b44:	bl	11310 <strchr@plt>
   15b48:	adds	sl, r0, #0
   15b4c:	movne	sl, #1
   15b50:	cmp	r5, #0
   15b54:	beq	15bc8 <__assert_fail@plt+0x475c>
   15b58:	ldr	r3, [r5]
   15b5c:	cmp	r3, #0
   15b60:	beq	15bc8 <__assert_fail@plt+0x475c>
   15b64:	ldr	r0, [r3, #8]
   15b68:	ldr	r4, [r3, #16]
   15b6c:	cmp	r0, #0
   15b70:	moveq	fp, r9
   15b74:	beq	15b88 <__assert_fail@plt+0x471c>
   15b78:	mov	r1, r8
   15b7c:	bl	11310 <strchr@plt>
   15b80:	adds	fp, r0, #0
   15b84:	movne	fp, #1
   15b88:	cmp	r4, #0
   15b8c:	beq	15bb8 <__assert_fail@plt+0x474c>
   15b90:	ldr	r3, [r4]
   15b94:	cmp	r3, #0
   15b98:	beq	15bb8 <__assert_fail@plt+0x474c>
   15b9c:	ldr	r1, [r3, #16]
   15ba0:	ldr	r0, [r3, #8]
   15ba4:	bl	15964 <__assert_fail@plt+0x44f8>
   15ba8:	ldr	r3, [r4, #16]!
   15bac:	cmp	r3, #0
   15bb0:	add	fp, fp, r0
   15bb4:	bne	15b9c <__assert_fail@plt+0x4730>
   15bb8:	ldr	r3, [r5, #16]!
   15bbc:	add	sl, sl, fp
   15bc0:	cmp	r3, #0
   15bc4:	bne	15b64 <__assert_fail@plt+0x46f8>
   15bc8:	ldr	r3, [r7, #16]!
   15bcc:	add	r6, r6, sl
   15bd0:	cmp	r3, #0
   15bd4:	bne	15b2c <__assert_fail@plt+0x46c0>
   15bd8:	ldr	r2, [sp, #44]	; 0x2c
   15bdc:	ldr	r3, [r2, #16]!
   15be0:	str	r2, [sp, #44]	; 0x2c
   15be4:	ldr	r2, [sp, #16]
   15be8:	cmp	r3, #0
   15bec:	add	r2, r2, r6
   15bf0:	str	r2, [sp, #16]
   15bf4:	bne	15af0 <__assert_fail@plt+0x4684>
   15bf8:	ldr	r2, [sp, #40]	; 0x28
   15bfc:	ldr	r1, [sp, #16]
   15c00:	ldr	r3, [r2, #16]!
   15c04:	str	r2, [sp, #40]	; 0x28
   15c08:	ldr	r2, [sp, #12]
   15c0c:	cmp	r3, #0
   15c10:	add	r2, r2, r1
   15c14:	str	r2, [sp, #12]
   15c18:	bne	15ab0 <__assert_fail@plt+0x4644>
   15c1c:	ldr	r2, [sp, #36]	; 0x24
   15c20:	ldr	r1, [sp, #12]
   15c24:	ldr	r3, [r2, #16]!
   15c28:	str	r2, [sp, #36]	; 0x24
   15c2c:	ldr	r2, [sp, #8]
   15c30:	cmp	r3, #0
   15c34:	add	r2, r2, r1
   15c38:	str	r2, [sp, #8]
   15c3c:	bne	15a70 <__assert_fail@plt+0x4604>
   15c40:	ldr	r2, [sp, #32]
   15c44:	ldr	r3, [r2, #16]!
   15c48:	str	r2, [sp, #32]
   15c4c:	ldmib	sp, {r1, r2}
   15c50:	cmp	r3, #0
   15c54:	add	r2, r2, r1
   15c58:	str	r2, [sp, #4]
   15c5c:	bne	15a30 <__assert_fail@plt+0x45c4>
   15c60:	ldr	r2, [sp, #28]
   15c64:	ldr	r3, [r2, #16]!
   15c68:	str	r2, [sp, #28]
   15c6c:	ldm	sp, {r1, r2}
   15c70:	cmp	r3, #0
   15c74:	add	r2, r2, r1
   15c78:	str	r2, [sp]
   15c7c:	bne	159f0 <__assert_fail@plt+0x4584>
   15c80:	ldr	r2, [sp, #24]
   15c84:	ldr	r1, [sp]
   15c88:	ldr	r3, [r2, #16]!
   15c8c:	str	r2, [sp, #24]
   15c90:	ldr	r2, [sp, #20]
   15c94:	cmp	r3, #0
   15c98:	add	r2, r2, r1
   15c9c:	str	r2, [sp, #20]
   15ca0:	bne	159b0 <__assert_fail@plt+0x4544>
   15ca4:	ldr	r0, [sp, #20]
   15ca8:	add	sp, sp, #52	; 0x34
   15cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cb4:	add	fp, sp, #32
   15cb8:	sub	sp, sp, #36	; 0x24
   15cbc:	ldr	r3, [r0, #4]
   15cc0:	cmp	r3, #0
   15cc4:	str	r3, [fp, #-40]	; 0xffffffd8
   15cc8:	bne	15cd4 <__assert_fail@plt+0x4868>
   15ccc:	sub	sp, fp, #32
   15cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd4:	mov	r4, r0
   15cd8:	str	r0, [fp, #-60]	; 0xffffffc4
   15cdc:	ldr	r0, [r0, #8]
   15ce0:	str	r1, [fp, #-44]	; 0xffffffd4
   15ce4:	bl	11304 <strlen@plt>
   15ce8:	ldr	r3, [r4]
   15cec:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15cf0:	add	r3, r3, #28
   15cf4:	mov	r9, r3
   15cf8:	str	r3, [fp, #-64]	; 0xffffffc0
   15cfc:	mov	sl, r9
   15d00:	str	r2, [fp, #-48]	; 0xffffffd0
   15d04:	add	r3, r0, #15
   15d08:	bic	r3, r3, #7
   15d0c:	sub	sp, sp, r3
   15d10:	str	sp, [fp, #-56]	; 0xffffffc8
   15d14:	str	sp, [fp, #-52]	; 0xffffffcc
   15d18:	ldr	r5, [sl, #-24]	; 0xffffffe8
   15d1c:	ldr	r4, [sl, #-28]	; 0xffffffe4
   15d20:	cmp	r5, #0
   15d24:	ldr	r9, [sl, #-20]	; 0xffffffec
   15d28:	beq	15da0 <__assert_fail@plt+0x4934>
   15d2c:	mov	r8, r4
   15d30:	b	15d40 <__assert_fail@plt+0x48d4>
   15d34:	subs	r5, r5, #1
   15d38:	add	r4, r4, #24
   15d3c:	beq	15da0 <__assert_fail@plt+0x4934>
   15d40:	ldr	r6, [r4, #12]
   15d44:	tst	r6, #8
   15d48:	bne	15d34 <__assert_fail@plt+0x48c8>
   15d4c:	ldr	r7, [r4, #4]
   15d50:	sub	r3, r7, #1
   15d54:	cmp	r3, #254	; 0xfe
   15d58:	bhi	15d34 <__assert_fail@plt+0x48c8>
   15d5c:	bl	112d4 <__ctype_b_loc@plt>
   15d60:	lsl	r3, r7, #1
   15d64:	ldr	r2, [r0]
   15d68:	ldrh	r3, [r2, r3]
   15d6c:	tst	r3, #16384	; 0x4000
   15d70:	beq	15d34 <__assert_fail@plt+0x48c8>
   15d74:	ldrb	r3, [r9]
   15d78:	cmp	r7, r3
   15d7c:	bne	15d34 <__assert_fail@plt+0x48c8>
   15d80:	tst	r6, #4
   15d84:	moveq	r8, r4
   15d88:	tst	r6, #2
   15d8c:	beq	15f14 <__assert_fail@plt+0x4aa8>
   15d90:	subs	r5, r5, #1
   15d94:	add	r9, r9, #1
   15d98:	add	r4, r4, #24
   15d9c:	bne	15d40 <__assert_fail@plt+0x48d4>
   15da0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15da4:	add	sl, sl, #28
   15da8:	subs	r3, r3, #1
   15dac:	str	r3, [fp, #-48]	; 0xffffffd0
   15db0:	bne	15d18 <__assert_fail@plt+0x48ac>
   15db4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15db8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15dbc:	cmp	r3, r2
   15dc0:	bcc	160c8 <__assert_fail@plt+0x4c5c>
   15dc4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15dc8:	ldr	r5, [r7, #-24]	; 0xffffffe8
   15dcc:	ldr	r4, [r7, #-28]	; 0xffffffe4
   15dd0:	cmp	r5, #0
   15dd4:	ldr	r6, [r7, #-20]	; 0xffffffec
   15dd8:	movne	r8, r4
   15ddc:	bne	15df0 <__assert_fail@plt+0x4984>
   15de0:	b	15e50 <__assert_fail@plt+0x49e4>
   15de4:	subs	r5, r5, #1
   15de8:	add	r4, r4, #24
   15dec:	beq	15e50 <__assert_fail@plt+0x49e4>
   15df0:	ldr	r9, [r4, #12]
   15df4:	tst	r9, #8
   15df8:	bne	15de4 <__assert_fail@plt+0x4978>
   15dfc:	ldr	sl, [r4, #4]
   15e00:	sub	r3, sl, #1
   15e04:	cmp	r3, #254	; 0xfe
   15e08:	bhi	15de4 <__assert_fail@plt+0x4978>
   15e0c:	bl	112d4 <__ctype_b_loc@plt>
   15e10:	lsl	r3, sl, #1
   15e14:	ldr	r1, [r0]
   15e18:	ldrh	r3, [r1, r3]
   15e1c:	tst	r3, #16384	; 0x4000
   15e20:	beq	15de4 <__assert_fail@plt+0x4978>
   15e24:	ldrb	r3, [r6]
   15e28:	cmp	sl, r3
   15e2c:	bne	15de4 <__assert_fail@plt+0x4978>
   15e30:	tst	r9, #4
   15e34:	moveq	r8, r4
   15e38:	tst	r9, #2
   15e3c:	beq	15f4c <__assert_fail@plt+0x4ae0>
   15e40:	subs	r5, r5, #1
   15e44:	add	r6, r6, #1
   15e48:	add	r4, r4, #24
   15e4c:	bne	15df0 <__assert_fail@plt+0x4984>
   15e50:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15e54:	add	r7, r7, #28
   15e58:	subs	r3, r3, #1
   15e5c:	str	r3, [fp, #-40]	; 0xffffffd8
   15e60:	bne	15dc8 <__assert_fail@plt+0x495c>
   15e64:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15e68:	ldm	r3, {r7, r8}
   15e6c:	cmp	r8, #0
   15e70:	beq	15ccc <__assert_fail@plt+0x4860>
   15e74:	ldr	sl, [pc, #652]	; 16108 <__assert_fail@plt+0x4c9c>
   15e78:	ldr	r9, [pc, #652]	; 1610c <__assert_fail@plt+0x4ca0>
   15e7c:	add	r7, r7, #28
   15e80:	ldr	r5, [r7, #-24]	; 0xffffffe8
   15e84:	ldr	r4, [r7, #-28]	; 0xffffffe4
   15e88:	cmp	r5, #0
   15e8c:	movne	r6, r4
   15e90:	bne	15ea4 <__assert_fail@plt+0x4a38>
   15e94:	b	15f00 <__assert_fail@plt+0x4a94>
   15e98:	subs	r5, r5, #1
   15e9c:	add	r4, r4, #24
   15ea0:	beq	15f00 <__assert_fail@plt+0x4a94>
   15ea4:	ldr	r2, [r4]
   15ea8:	cmp	r2, #0
   15eac:	beq	15e98 <__assert_fail@plt+0x4a2c>
   15eb0:	ldr	r1, [r4, #12]
   15eb4:	tst	r1, #4
   15eb8:	moveq	r6, r4
   15ebc:	tst	r1, #2
   15ec0:	bne	15e98 <__assert_fail@plt+0x4a2c>
   15ec4:	ldr	r3, [r4, #8]
   15ec8:	ldr	r0, [r6, #12]
   15ecc:	cmp	r3, #0
   15ed0:	orr	r1, r1, r0
   15ed4:	beq	15ff8 <__assert_fail@plt+0x4b8c>
   15ed8:	tst	r1, #16
   15edc:	bne	15e98 <__assert_fail@plt+0x4a2c>
   15ee0:	tst	r1, #1
   15ee4:	movne	r1, r9
   15ee8:	moveq	r1, sl
   15eec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15ef0:	bl	1c720 <argp_parse@@Base+0x2d10>
   15ef4:	subs	r5, r5, #1
   15ef8:	add	r4, r4, #24
   15efc:	bne	15ea4 <__assert_fail@plt+0x4a38>
   15f00:	subs	r8, r8, #1
   15f04:	add	r7, r7, #28
   15f08:	bne	15e80 <__assert_fail@plt+0x4a14>
   15f0c:	sub	sp, fp, #32
   15f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f14:	ldr	r3, [r4, #8]
   15f18:	cmp	r3, #0
   15f1c:	bne	15d90 <__assert_fail@plt+0x4924>
   15f20:	ldr	r3, [r8, #8]
   15f24:	cmp	r3, #0
   15f28:	bne	15d90 <__assert_fail@plt+0x4924>
   15f2c:	ldr	r3, [r8, #12]
   15f30:	orr	r6, r6, r3
   15f34:	tst	r6, #16
   15f38:	ldreq	r3, [fp, #-52]	; 0xffffffcc
   15f3c:	strbeq	r7, [r3]
   15f40:	addeq	r3, r3, #1
   15f44:	streq	r3, [fp, #-52]	; 0xffffffcc
   15f48:	b	15d90 <__assert_fail@plt+0x4924>
   15f4c:	ldr	r3, [r4, #8]
   15f50:	ldr	r1, [r8, #12]
   15f54:	cmp	r3, #0
   15f58:	orr	r9, r9, r1
   15f5c:	beq	16054 <__assert_fail@plt+0x4be8>
   15f60:	tst	r9, #16
   15f64:	bne	15e40 <__assert_fail@plt+0x49d4>
   15f68:	tst	r9, #1
   15f6c:	bne	1601c <__assert_fail@plt+0x4bb0>
   15f70:	mov	r0, r3
   15f74:	str	r3, [fp, #-48]	; 0xffffffd0
   15f78:	bl	11304 <strlen@plt>
   15f7c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15f80:	ldr	r1, [r3, #28]
   15f84:	ldr	r2, [r3, #24]
   15f88:	sub	r2, r1, r2
   15f8c:	mov	r9, r0
   15f90:	ldr	r0, [r3, #16]
   15f94:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15f98:	cmp	r2, r0
   15f9c:	bhi	160b0 <__assert_fail@plt+0x4c44>
   15fa0:	ldr	ip, [fp, #-44]	; 0xffffffd4
   15fa4:	ldr	r2, [ip, #20]
   15fa8:	ldr	r0, [ip, #8]
   15fac:	bic	r2, r2, r2, asr #31
   15fb0:	add	r2, r2, #6
   15fb4:	add	r2, r2, r9
   15fb8:	cmp	r2, r0
   15fbc:	bcc	16030 <__assert_fail@plt+0x4bc4>
   15fc0:	ldr	r2, [ip, #32]
   15fc4:	mov	r0, ip
   15fc8:	cmp	r2, r1
   15fcc:	bls	16064 <__assert_fail@plt+0x4bf8>
   15fd0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15fd4:	add	r2, r1, #1
   15fd8:	str	r2, [r0, #28]
   15fdc:	mov	r2, #10
   15fe0:	strb	r2, [r1]
   15fe4:	ldr	r2, [r4, #4]
   15fe8:	ldr	r1, [pc, #288]	; 16110 <__assert_fail@plt+0x4ca4>
   15fec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15ff0:	bl	1c720 <argp_parse@@Base+0x2d10>
   15ff4:	b	15e40 <__assert_fail@plt+0x49d4>
   15ff8:	tst	r1, #16
   15ffc:	bne	15e98 <__assert_fail@plt+0x4a2c>
   16000:	ldr	r3, [r6, #8]
   16004:	cmp	r3, #0
   16008:	bne	15ee0 <__assert_fail@plt+0x4a74>
   1600c:	ldr	r1, [pc, #256]	; 16114 <__assert_fail@plt+0x4ca8>
   16010:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16014:	bl	1c720 <argp_parse@@Base+0x2d10>
   16018:	b	15e98 <__assert_fail@plt+0x4a2c>
   1601c:	mov	r2, sl
   16020:	ldr	r1, [pc, #240]	; 16118 <__assert_fail@plt+0x4cac>
   16024:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16028:	bl	1c720 <argp_parse@@Base+0x2d10>
   1602c:	b	15e40 <__assert_fail@plt+0x49d4>
   16030:	ldr	r2, [ip, #32]
   16034:	cmp	r2, r1
   16038:	bls	16088 <__assert_fail@plt+0x4c1c>
   1603c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16040:	add	r2, r1, #1
   16044:	str	r2, [r0, #28]
   16048:	mov	r2, #32
   1604c:	strb	r2, [r1]
   16050:	b	15fe4 <__assert_fail@plt+0x4b78>
   16054:	ldr	r3, [r8, #8]
   16058:	cmp	r3, #0
   1605c:	beq	15e40 <__assert_fail@plt+0x49d4>
   16060:	b	15f60 <__assert_fail@plt+0x4af4>
   16064:	mov	r1, #1
   16068:	str	r3, [fp, #-48]	; 0xffffffd0
   1606c:	mov	r9, ip
   16070:	bl	1c620 <argp_parse@@Base+0x2c10>
   16074:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16078:	cmp	r0, #0
   1607c:	beq	15fe4 <__assert_fail@plt+0x4b78>
   16080:	ldr	r1, [r9, #28]
   16084:	b	15fd0 <__assert_fail@plt+0x4b64>
   16088:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1608c:	mov	r1, #1
   16090:	mov	r0, r9
   16094:	str	r3, [fp, #-48]	; 0xffffffd0
   16098:	bl	1c620 <argp_parse@@Base+0x2c10>
   1609c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   160a0:	cmp	r0, #0
   160a4:	beq	15fe4 <__assert_fail@plt+0x4b78>
   160a8:	ldr	r1, [r9, #28]
   160ac:	b	1603c <__assert_fail@plt+0x4bd0>
   160b0:	ldr	sl, [fp, #-44]	; 0xffffffd4
   160b4:	mov	r0, sl
   160b8:	bl	1c074 <argp_parse@@Base+0x2664>
   160bc:	ldr	r1, [sl, #28]
   160c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   160c4:	b	15fa0 <__assert_fail@plt+0x4b34>
   160c8:	mov	r2, r3
   160cc:	ldrb	ip, [fp, #-48]	; 0xffffffd0
   160d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   160d4:	ldr	r1, [pc, #64]	; 1611c <__assert_fail@plt+0x4cb0>
   160d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   160dc:	strb	ip, [r3]
   160e0:	bl	1c720 <argp_parse@@Base+0x2d10>
   160e4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   160e8:	ldr	r3, [r2, #4]
   160ec:	cmp	r3, #0
   160f0:	str	r3, [fp, #-40]	; 0xffffffd8
   160f4:	beq	15ccc <__assert_fail@plt+0x4860>
   160f8:	ldr	r3, [r2]
   160fc:	add	r3, r3, #28
   16100:	str	r3, [fp, #-64]	; 0xffffffc0
   16104:	b	15dc4 <__assert_fail@plt+0x4958>
   16108:	andeq	pc, r1, r0, lsr #12
   1610c:	andeq	pc, r1, r0, lsl r6	; <UNPREDICTABLE>
   16110:	andeq	pc, r1, r4, lsl #12
   16114:	andeq	pc, r1, ip, lsr #12
   16118:	strdeq	pc, [r1], -r8
   1611c:	strdeq	pc, [r1], -r0
   16120:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16124:	subs	r4, r1, #0
   16128:	sub	sp, sp, #12
   1612c:	mov	r8, r0
   16130:	mov	r7, r2
   16134:	beq	16308 <__assert_fail@plt+0x4e9c>
   16138:	ldr	r3, [r4, #20]
   1613c:	cmp	r3, #0
   16140:	beq	16308 <__assert_fail@plt+0x4e9c>
   16144:	ldr	r1, [r2, #16]
   16148:	mov	r0, r4
   1614c:	bl	1a830 <argp_parse@@Base+0xe20>
   16150:	ldr	r3, [r4, #20]
   16154:	mov	r1, r8
   16158:	mov	r2, r0
   1615c:	ldr	r0, [pc, #628]	; 163d8 <__assert_fail@plt+0x4f6c>
   16160:	blx	r3
   16164:	mov	r6, r0
   16168:	cmp	r6, #0
   1616c:	beq	162d4 <__assert_fail@plt+0x4e68>
   16170:	ldrb	r3, [r6]
   16174:	cmp	r3, #0
   16178:	beq	162c8 <__assert_fail@plt+0x4e5c>
   1617c:	ldr	r3, [r7, #8]
   16180:	ldr	r3, [r3]
   16184:	cmp	r3, #0
   16188:	beq	161b0 <__assert_fail@plt+0x4d44>
   1618c:	ldr	r4, [r7, #4]
   16190:	ldr	r3, [r4, #28]
   16194:	ldr	r2, [r4, #32]
   16198:	cmp	r3, r2
   1619c:	bcs	163bc <__assert_fail@plt+0x4f50>
   161a0:	add	r1, r3, #1
   161a4:	mov	r2, #10
   161a8:	str	r1, [r4, #28]
   161ac:	strb	r2, [r3]
   161b0:	ldr	r4, [r7, #4]
   161b4:	ldr	sl, [pc, #544]	; 163dc <__assert_fail@plt+0x4f70>
   161b8:	ldr	r3, [r4, #28]
   161bc:	ldr	r1, [r4, #24]
   161c0:	ldr	r2, [r4, #16]
   161c4:	sub	r3, r3, r1
   161c8:	cmp	r3, r2
   161cc:	ldr	r5, [sl, #24]
   161d0:	bhi	16394 <__assert_fail@plt+0x4f28>
   161d4:	ldr	r3, [r4, #20]
   161d8:	mov	fp, #32
   161dc:	cmp	r3, #0
   161e0:	subge	r5, r5, r3
   161e4:	mov	r9, #1
   161e8:	cmp	r5, #0
   161ec:	sub	r5, r5, #1
   161f0:	ble	1621c <__assert_fail@plt+0x4db0>
   161f4:	ldr	r3, [r4, #28]
   161f8:	ldr	r2, [r4, #32]
   161fc:	cmp	r3, r2
   16200:	bcs	162ec <__assert_fail@plt+0x4e80>
   16204:	add	r2, r3, #1
   16208:	cmp	r5, #0
   1620c:	str	r2, [r4, #28]
   16210:	sub	r5, r5, #1
   16214:	strb	fp, [r3]
   16218:	bgt	161f4 <__assert_fail@plt+0x4d88>
   1621c:	ldr	r4, [r7, #4]
   16220:	ldr	r9, [sl, #24]
   16224:	ldr	r5, [r4, #28]
   16228:	ldr	r3, [r4, #24]
   1622c:	ldr	r2, [r4, #16]
   16230:	sub	r3, r5, r3
   16234:	cmp	r3, r2
   16238:	strls	r9, [r4, #4]
   1623c:	movls	fp, r4
   16240:	bhi	16348 <__assert_fail@plt+0x4edc>
   16244:	str	r9, [fp, #12]
   16248:	mov	r0, r6
   1624c:	bl	11304 <strlen@plt>
   16250:	subs	r9, r0, #0
   16254:	beq	1628c <__assert_fail@plt+0x4e20>
   16258:	ldr	r2, [r4, #32]
   1625c:	add	r3, r5, r9
   16260:	cmp	r2, r3
   16264:	bcc	16318 <__assert_fail@plt+0x4eac>
   16268:	mov	r2, r9
   1626c:	mov	r0, r5
   16270:	mov	r1, r6
   16274:	bl	111b4 <memcpy@plt>
   16278:	ldr	r3, [r4, #28]
   1627c:	add	r9, r3, r9
   16280:	str	r9, [r4, #28]
   16284:	ldr	r4, [r7, #4]
   16288:	ldr	r5, [r4, #28]
   1628c:	ldr	r3, [r4, #24]
   16290:	ldr	r2, [r4, #16]
   16294:	sub	r3, r5, r3
   16298:	cmp	r3, r2
   1629c:	movls	r9, r4
   162a0:	bhi	16334 <__assert_fail@plt+0x4ec8>
   162a4:	ldr	r2, [r9, #32]
   162a8:	mov	r3, #0
   162ac:	cmp	r2, r5
   162b0:	str	r3, [r4, #4]
   162b4:	bls	163a0 <__assert_fail@plt+0x4f34>
   162b8:	add	r2, r5, #1
   162bc:	mov	r3, #10
   162c0:	str	r2, [r9, #28]
   162c4:	strb	r3, [r5]
   162c8:	ldr	r3, [r7, #8]
   162cc:	mov	r2, #1
   162d0:	str	r2, [r3, #4]
   162d4:	cmp	r8, r6
   162d8:	beq	16310 <__assert_fail@plt+0x4ea4>
   162dc:	mov	r0, r6
   162e0:	add	sp, sp, #12
   162e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162e8:	b	1a98c <argp_parse@@Base+0xf7c>
   162ec:	mov	r1, r9
   162f0:	mov	r0, r4
   162f4:	bl	1c620 <argp_parse@@Base+0x2c10>
   162f8:	cmp	r0, #0
   162fc:	beq	161e8 <__assert_fail@plt+0x4d7c>
   16300:	ldr	r3, [r4, #28]
   16304:	b	16204 <__assert_fail@plt+0x4d98>
   16308:	mov	r6, r8
   1630c:	b	16168 <__assert_fail@plt+0x4cfc>
   16310:	add	sp, sp, #12
   16314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16318:	mov	r1, r9
   1631c:	mov	r0, r4
   16320:	bl	1c620 <argp_parse@@Base+0x2c10>
   16324:	cmp	r0, #0
   16328:	beq	16284 <__assert_fail@plt+0x4e18>
   1632c:	ldr	r5, [r4, #28]
   16330:	b	16268 <__assert_fail@plt+0x4dfc>
   16334:	mov	r0, r4
   16338:	bl	1c074 <argp_parse@@Base+0x2664>
   1633c:	ldr	r9, [r7, #4]
   16340:	ldr	r5, [r9, #28]
   16344:	b	162a4 <__assert_fail@plt+0x4e38>
   16348:	mov	r0, r4
   1634c:	str	r9, [sp, #4]
   16350:	bl	1c074 <argp_parse@@Base+0x2664>
   16354:	ldr	fp, [r7, #4]
   16358:	ldr	r3, [sp, #4]
   1635c:	ldr	r9, [sl, #24]
   16360:	ldr	r5, [fp, #28]
   16364:	ldr	r2, [fp, #24]
   16368:	ldr	r1, [fp, #16]
   1636c:	sub	r2, r5, r2
   16370:	cmp	r2, r1
   16374:	str	r3, [r4, #4]
   16378:	movls	r4, fp
   1637c:	bls	16244 <__assert_fail@plt+0x4dd8>
   16380:	mov	r0, fp
   16384:	bl	1c074 <argp_parse@@Base+0x2664>
   16388:	ldr	r4, [r7, #4]
   1638c:	ldr	r5, [r4, #28]
   16390:	b	16244 <__assert_fail@plt+0x4dd8>
   16394:	mov	r0, r4
   16398:	bl	1c074 <argp_parse@@Base+0x2664>
   1639c:	b	161d4 <__assert_fail@plt+0x4d68>
   163a0:	mov	r1, #1
   163a4:	mov	r0, r9
   163a8:	bl	1c620 <argp_parse@@Base+0x2c10>
   163ac:	cmp	r0, #0
   163b0:	beq	162c8 <__assert_fail@plt+0x4e5c>
   163b4:	ldr	r5, [r9, #28]
   163b8:	b	162b8 <__assert_fail@plt+0x4e4c>
   163bc:	mov	r1, #1
   163c0:	mov	r0, r4
   163c4:	bl	1c620 <argp_parse@@Base+0x2c10>
   163c8:	cmp	r0, #0
   163cc:	beq	161b0 <__assert_fail@plt+0x4d44>
   163d0:	ldr	r3, [r4, #28]
   163d4:	b	161a0 <__assert_fail@plt+0x4d34>
   163d8:	andeq	r0, r0, #3
   163dc:	andeq	r1, r3, r4, ror #11
   163e0:	ldr	r3, [r1, #12]
   163e4:	push	{r4, r5, r6, r7, r8, lr}
   163e8:	cmp	r3, #0
   163ec:	mov	r6, r1
   163f0:	mov	r5, r0
   163f4:	beq	164dc <__assert_fail@plt+0x5070>
   163f8:	ldr	r3, [r1, #8]
   163fc:	ldr	r2, [r1]
   16400:	ldr	r7, [r3]
   16404:	ldr	r3, [r3, #4]
   16408:	ldr	r4, [r2, #16]
   1640c:	cmp	r3, #0
   16410:	cmpne	r7, #0
   16414:	beq	1644c <__assert_fail@plt+0x4fe0>
   16418:	ldr	r2, [r2, #12]
   1641c:	ldr	r3, [r7, #12]
   16420:	cmp	r2, r3
   16424:	beq	1644c <__assert_fail@plt+0x4fe0>
   16428:	ldr	r8, [r1, #4]
   1642c:	ldr	r3, [r8, #28]
   16430:	ldr	r2, [r8, #32]
   16434:	cmp	r3, r2
   16438:	bcs	16614 <__assert_fail@plt+0x51a8>
   1643c:	add	r1, r3, #1
   16440:	mov	r2, #10
   16444:	str	r1, [r8, #28]
   16448:	strb	r2, [r3]
   1644c:	cmp	r4, #0
   16450:	beq	16590 <__assert_fail@plt+0x5124>
   16454:	ldr	r0, [r4]
   16458:	cmp	r0, #0
   1645c:	beq	16590 <__assert_fail@plt+0x5124>
   16460:	ldrb	r3, [r0]
   16464:	cmp	r3, #0
   16468:	beq	16590 <__assert_fail@plt+0x5124>
   1646c:	cmp	r7, #0
   16470:	beq	164a0 <__assert_fail@plt+0x5034>
   16474:	ldr	r3, [r7, #16]
   16478:	cmp	r4, r3
   1647c:	beq	16590 <__assert_fail@plt+0x5124>
   16480:	cmp	r3, #0
   16484:	beq	164a0 <__assert_fail@plt+0x5034>
   16488:	ldr	r3, [r3, #12]
   1648c:	cmp	r3, #0
   16490:	cmpne	r4, r3
   16494:	bne	16488 <__assert_fail@plt+0x501c>
   16498:	cmp	r4, r3
   1649c:	beq	16590 <__assert_fail@plt+0x5124>
   164a0:	ldr	r3, [r6, #4]
   164a4:	ldr	r1, [r4, #16]
   164a8:	mov	r2, r6
   164ac:	ldr	r7, [r3, #12]
   164b0:	bl	16120 <__assert_fail@plt+0x4cb4>
   164b4:	ldr	r8, [r6, #4]
   164b8:	ldr	r3, [r8, #28]
   164bc:	ldr	r1, [r8, #24]
   164c0:	ldr	r2, [r8, #16]
   164c4:	sub	r3, r3, r1
   164c8:	cmp	r3, r2
   164cc:	movls	r4, r8
   164d0:	bhi	165f4 <__assert_fail@plt+0x5188>
   164d4:	str	r7, [r8, #12]
   164d8:	b	165a4 <__assert_fail@plt+0x5138>
   164dc:	ldr	r7, [r1, #4]
   164e0:	ldr	r3, [r7, #28]
   164e4:	ldr	r1, [r7, #32]
   164e8:	add	r2, r3, #2
   164ec:	cmp	r1, r2
   164f0:	bcc	16574 <__assert_fail@plt+0x5108>
   164f4:	ldr	r2, [pc, #308]	; 16630 <__assert_fail@plt+0x51c4>
   164f8:	ldrh	r2, [r2]
   164fc:	strh	r2, [r3]
   16500:	ldr	r4, [r6, #4]
   16504:	ldr	r3, [r7, #28]
   16508:	add	r3, r3, #2
   1650c:	str	r3, [r7, #28]
   16510:	ldr	r1, [r4, #24]
   16514:	ldr	r3, [r4, #28]
   16518:	ldr	r2, [r4, #16]
   1651c:	sub	r3, r3, r1
   16520:	cmp	r3, r2
   16524:	bhi	165b4 <__assert_fail@plt+0x5148>
   16528:	ldr	r3, [r4, #20]
   1652c:	mov	r6, #32
   16530:	cmp	r3, #0
   16534:	subge	r5, r5, r3
   16538:	mov	r7, #1
   1653c:	cmp	r5, #0
   16540:	sub	r5, r5, #1
   16544:	ble	16570 <__assert_fail@plt+0x5104>
   16548:	ldr	r3, [r4, #28]
   1654c:	ldr	r2, [r4, #32]
   16550:	cmp	r3, r2
   16554:	bcs	165c0 <__assert_fail@plt+0x5154>
   16558:	add	r2, r3, #1
   1655c:	cmp	r5, #0
   16560:	str	r2, [r4, #28]
   16564:	sub	r5, r5, #1
   16568:	strb	r6, [r3]
   1656c:	bgt	16548 <__assert_fail@plt+0x50dc>
   16570:	pop	{r4, r5, r6, r7, r8, pc}
   16574:	mov	r1, #2
   16578:	mov	r0, r7
   1657c:	bl	1c620 <argp_parse@@Base+0x2c10>
   16580:	cmp	r0, #0
   16584:	beq	165dc <__assert_fail@plt+0x5170>
   16588:	ldr	r3, [r7, #28]
   1658c:	b	164f4 <__assert_fail@plt+0x5088>
   16590:	ldr	r4, [r6, #4]
   16594:	ldr	r3, [r4, #28]
   16598:	ldr	r1, [r4, #24]
   1659c:	ldr	r2, [r4, #16]
   165a0:	sub	r3, r3, r1
   165a4:	mov	r1, #0
   165a8:	cmp	r3, r2
   165ac:	str	r1, [r6, #12]
   165b0:	bls	16528 <__assert_fail@plt+0x50bc>
   165b4:	mov	r0, r4
   165b8:	bl	1c074 <argp_parse@@Base+0x2664>
   165bc:	b	16528 <__assert_fail@plt+0x50bc>
   165c0:	mov	r1, r7
   165c4:	mov	r0, r4
   165c8:	bl	1c620 <argp_parse@@Base+0x2c10>
   165cc:	cmp	r0, #0
   165d0:	beq	1653c <__assert_fail@plt+0x50d0>
   165d4:	ldr	r3, [r4, #28]
   165d8:	b	16558 <__assert_fail@plt+0x50ec>
   165dc:	ldr	r4, [r6, #4]
   165e0:	ldr	r3, [r4, #28]
   165e4:	ldr	r1, [r4, #24]
   165e8:	ldr	r2, [r4, #16]
   165ec:	sub	r3, r3, r1
   165f0:	b	16520 <__assert_fail@plt+0x50b4>
   165f4:	mov	r0, r8
   165f8:	bl	1c074 <argp_parse@@Base+0x2664>
   165fc:	ldr	r4, [r6, #4]
   16600:	ldr	r3, [r4, #28]
   16604:	ldr	r1, [r4, #24]
   16608:	ldr	r2, [r4, #16]
   1660c:	sub	r3, r3, r1
   16610:	b	164d4 <__assert_fail@plt+0x5068>
   16614:	mov	r1, #1
   16618:	mov	r0, r8
   1661c:	bl	1c620 <argp_parse@@Base+0x2c10>
   16620:	cmp	r0, #0
   16624:	beq	1644c <__assert_fail@plt+0x4fe0>
   16628:	ldr	r3, [r8, #28]
   1662c:	b	1643c <__assert_fail@plt+0x4fd0>
   16630:	andeq	lr, r1, ip, lsl #15
   16634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16638:	sub	sp, sp, #28
   1663c:	ldr	r6, [r0, #12]
   16640:	ldr	r7, [r1, #12]
   16644:	cmp	r6, r7
   16648:	beq	168c0 <__assert_fail@plt+0x5454>
   1664c:	ldr	r8, [r6, #12]
   16650:	ldr	r9, [r7, #12]
   16654:	mov	r5, r1
   16658:	cmp	r8, r9
   1665c:	mov	r4, r0
   16660:	beq	16888 <__assert_fail@plt+0x541c>
   16664:	ldr	sl, [r8, #12]
   16668:	ldr	fp, [r9, #12]
   1666c:	cmp	sl, fp
   16670:	beq	16928 <__assert_fail@plt+0x54bc>
   16674:	ldr	r3, [sl, #12]
   16678:	ldr	r2, [fp, #12]
   1667c:	cmp	r3, r2
   16680:	beq	1695c <__assert_fail@plt+0x54f0>
   16684:	ldr	r1, [r3, #12]
   16688:	ldr	r0, [r2, #12]
   1668c:	str	r1, [sp]
   16690:	cmp	r1, r0
   16694:	str	r0, [sp, #4]
   16698:	beq	168f4 <__assert_fail@plt+0x5488>
   1669c:	ldr	r1, [r1, #12]
   166a0:	ldr	r0, [r0, #12]
   166a4:	str	r1, [sp, #8]
   166a8:	cmp	r1, r0
   166ac:	str	r0, [sp, #12]
   166b0:	beq	16990 <__assert_fail@plt+0x5524>
   166b4:	ldr	r0, [r1, #12]
   166b8:	ldr	r1, [sp, #12]
   166bc:	ldr	r1, [r1, #12]
   166c0:	cmp	r0, r1
   166c4:	beq	169d0 <__assert_fail@plt+0x5564>
   166c8:	str	r2, [sp, #20]
   166cc:	str	r3, [sp, #16]
   166d0:	bl	16634 <__assert_fail@plt+0x51c8>
   166d4:	cmp	r0, #0
   166d8:	bne	16880 <__assert_fail@plt+0x5414>
   166dc:	ldr	r3, [sp, #12]
   166e0:	ldr	r2, [sp, #20]
   166e4:	ldr	r1, [r3, #8]
   166e8:	ldr	r3, [sp, #8]
   166ec:	mvn	ip, r1
   166f0:	ldr	r0, [r3, #8]
   166f4:	lsr	ip, ip, #31
   166f8:	ldr	r3, [sp, #16]
   166fc:	cmp	ip, r0, lsr #31
   16700:	subne	r0, r0, r1
   16704:	subeq	r0, r1, r0
   16708:	cmp	r0, #0
   1670c:	bne	16880 <__assert_fail@plt+0x5414>
   16710:	ldr	r1, [sp, #12]
   16714:	ldr	r0, [sp, #8]
   16718:	ldr	r1, [r1, #4]
   1671c:	ldr	r0, [r0, #4]
   16720:	sub	r0, r1, r0
   16724:	cmp	r0, #0
   16728:	bne	16880 <__assert_fail@plt+0x5414>
   1672c:	ldr	r1, [sp, #4]
   16730:	ldr	r0, [sp]
   16734:	ldr	r1, [r1, #8]
   16738:	ldr	r0, [r0, #8]
   1673c:	mvn	ip, r1
   16740:	lsr	ip, ip, #31
   16744:	cmp	ip, r0, lsr #31
   16748:	subne	r0, r0, r1
   1674c:	subeq	r0, r1, r0
   16750:	cmp	r0, #0
   16754:	bne	16880 <__assert_fail@plt+0x5414>
   16758:	ldr	r1, [sp, #4]
   1675c:	ldr	r0, [sp]
   16760:	ldr	r1, [r1, #4]
   16764:	ldr	r0, [r0, #4]
   16768:	sub	r0, r1, r0
   1676c:	cmp	r0, #0
   16770:	bne	16880 <__assert_fail@plt+0x5414>
   16774:	ldr	r1, [r2, #8]
   16778:	ldr	r0, [r3, #8]
   1677c:	mvn	ip, r1
   16780:	lsr	ip, ip, #31
   16784:	cmp	ip, r0, lsr #31
   16788:	subne	r0, r0, r1
   1678c:	subeq	r0, r1, r0
   16790:	cmp	r0, #0
   16794:	bne	16880 <__assert_fail@plt+0x5414>
   16798:	ldr	r2, [r2, #4]
   1679c:	ldr	r0, [r3, #4]
   167a0:	sub	r0, r2, r0
   167a4:	cmp	r0, #0
   167a8:	bne	16880 <__assert_fail@plt+0x5414>
   167ac:	ldr	r3, [fp, #8]
   167b0:	ldr	r0, [sl, #8]
   167b4:	mvn	r2, r3
   167b8:	lsr	r2, r2, #31
   167bc:	cmp	r2, r0, lsr #31
   167c0:	subne	r0, r0, r3
   167c4:	subeq	r0, r3, r0
   167c8:	cmp	r0, #0
   167cc:	bne	16880 <__assert_fail@plt+0x5414>
   167d0:	ldr	r3, [fp, #4]
   167d4:	ldr	r0, [sl, #4]
   167d8:	sub	r0, r3, r0
   167dc:	cmp	r0, #0
   167e0:	bne	16880 <__assert_fail@plt+0x5414>
   167e4:	ldr	r3, [r9, #8]
   167e8:	ldr	r0, [r8, #8]
   167ec:	mvn	r2, r3
   167f0:	lsr	r2, r2, #31
   167f4:	cmp	r2, r0, lsr #31
   167f8:	subne	r0, r0, r3
   167fc:	subeq	r0, r3, r0
   16800:	cmp	r0, #0
   16804:	bne	16880 <__assert_fail@plt+0x5414>
   16808:	ldr	r3, [r9, #4]
   1680c:	ldr	r0, [r8, #4]
   16810:	sub	r0, r3, r0
   16814:	cmp	r0, #0
   16818:	bne	16880 <__assert_fail@plt+0x5414>
   1681c:	ldr	r3, [r7, #8]
   16820:	ldr	r0, [r6, #8]
   16824:	mvn	r2, r3
   16828:	lsr	r2, r2, #31
   1682c:	cmp	r2, r0, lsr #31
   16830:	subne	r0, r0, r3
   16834:	subeq	r0, r3, r0
   16838:	cmp	r0, #0
   1683c:	bne	16880 <__assert_fail@plt+0x5414>
   16840:	ldr	r3, [r7, #4]
   16844:	ldr	r0, [r6, #4]
   16848:	sub	r0, r3, r0
   1684c:	cmp	r0, #0
   16850:	bne	16880 <__assert_fail@plt+0x5414>
   16854:	ldr	r3, [r5, #8]
   16858:	ldr	r0, [r4, #8]
   1685c:	mvn	r2, r3
   16860:	lsr	r2, r2, #31
   16864:	cmp	r2, r0, lsr #31
   16868:	subne	r0, r0, r3
   1686c:	subeq	r0, r3, r0
   16870:	cmp	r0, #0
   16874:	ldreq	r3, [r5, #4]
   16878:	ldreq	r0, [r4, #4]
   1687c:	subeq	r0, r3, r0
   16880:	add	sp, sp, #28
   16884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16888:	ldr	r3, [r7, #8]
   1688c:	ldr	r0, [r6, #8]
   16890:	mvn	r2, r3
   16894:	ldr	r1, [r7, #4]
   16898:	lsr	r2, r2, #31
   1689c:	cmp	r2, r0, lsr #31
   168a0:	subne	r0, r0, r3
   168a4:	subeq	r0, r3, r0
   168a8:	ldr	r2, [r6, #4]
   168ac:	cmp	r0, #0
   168b0:	subeq	r0, r1, r2
   168b4:	beq	1684c <__assert_fail@plt+0x53e0>
   168b8:	add	sp, sp, #28
   168bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168c0:	ldr	r2, [r1, #8]
   168c4:	ldr	r3, [r0, #8]
   168c8:	mvn	ip, r2
   168cc:	ldr	lr, [r1, #4]
   168d0:	lsr	ip, ip, #31
   168d4:	cmp	ip, r3, lsr #31
   168d8:	ldr	r1, [r0, #4]
   168dc:	subne	r0, r3, r2
   168e0:	subeq	r0, r2, r3
   168e4:	cmp	r0, #0
   168e8:	subeq	r0, lr, r1
   168ec:	add	sp, sp, #28
   168f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168f4:	ldr	r1, [r2, #8]
   168f8:	ldr	r0, [r3, #8]
   168fc:	mvn	ip, r1
   16900:	ldr	r2, [r2, #4]
   16904:	lsr	ip, ip, #31
   16908:	cmp	ip, r0, lsr #31
   1690c:	subne	r0, r0, r1
   16910:	subeq	r0, r1, r0
   16914:	ldr	r3, [r3, #4]
   16918:	cmp	r0, #0
   1691c:	subeq	r0, r2, r3
   16920:	beq	167a4 <__assert_fail@plt+0x5338>
   16924:	b	16880 <__assert_fail@plt+0x5414>
   16928:	ldr	r3, [r9, #8]
   1692c:	ldr	r0, [r8, #8]
   16930:	mvn	r2, r3
   16934:	ldr	r1, [r9, #4]
   16938:	lsr	r2, r2, #31
   1693c:	cmp	r2, r0, lsr #31
   16940:	subne	r0, r0, r3
   16944:	subeq	r0, r3, r0
   16948:	ldr	r2, [r8, #4]
   1694c:	cmp	r0, #0
   16950:	subeq	r0, r1, r2
   16954:	beq	16814 <__assert_fail@plt+0x53a8>
   16958:	b	16880 <__assert_fail@plt+0x5414>
   1695c:	ldr	r3, [fp, #8]
   16960:	ldr	r0, [sl, #8]
   16964:	mvn	r2, r3
   16968:	ldr	r1, [fp, #4]
   1696c:	lsr	r2, r2, #31
   16970:	cmp	r2, r0, lsr #31
   16974:	subne	r0, r0, r3
   16978:	subeq	r0, r3, r0
   1697c:	ldr	r2, [sl, #4]
   16980:	cmp	r0, #0
   16984:	subeq	r0, r1, r2
   16988:	beq	167dc <__assert_fail@plt+0x5370>
   1698c:	b	16880 <__assert_fail@plt+0x5414>
   16990:	ldr	ip, [sp, #4]
   16994:	ldr	r1, [sp]
   16998:	ldr	lr, [ip, #8]
   1699c:	ldr	r0, [r1, #8]
   169a0:	mvn	r1, lr
   169a4:	ldr	ip, [ip, #4]
   169a8:	lsr	r1, r1, #31
   169ac:	cmp	r1, r0, lsr #31
   169b0:	ldr	r1, [sp]
   169b4:	subne	r0, r0, lr
   169b8:	subeq	r0, lr, r0
   169bc:	ldr	r1, [r1, #4]
   169c0:	cmp	r0, #0
   169c4:	subeq	r0, ip, r1
   169c8:	beq	1676c <__assert_fail@plt+0x5300>
   169cc:	b	16880 <__assert_fail@plt+0x5414>
   169d0:	ldr	ip, [sp, #12]
   169d4:	ldr	r1, [sp, #8]
   169d8:	ldr	lr, [ip, #8]
   169dc:	ldr	r0, [r1, #8]
   169e0:	mvn	r1, lr
   169e4:	ldr	ip, [ip, #4]
   169e8:	lsr	r1, r1, #31
   169ec:	cmp	r1, r0, lsr #31
   169f0:	ldr	r1, [sp, #8]
   169f4:	subne	r0, r0, lr
   169f8:	subeq	r0, lr, r0
   169fc:	ldr	r1, [r1, #4]
   16a00:	cmp	r0, #0
   16a04:	subeq	r0, ip, r1
   16a08:	beq	16724 <__assert_fail@plt+0x52b8>
   16a0c:	b	16880 <__assert_fail@plt+0x5414>
   16a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a14:	mov	r6, r1
   16a18:	ldr	r4, [r0, #16]
   16a1c:	sub	sp, sp, #28
   16a20:	cmp	r4, #0
   16a24:	movne	r2, r4
   16a28:	bne	16a34 <__assert_fail@plt+0x55c8>
   16a2c:	b	1705c <__assert_fail@plt+0x5bf0>
   16a30:	mov	r2, r3
   16a34:	ldr	r3, [r2, #12]
   16a38:	cmp	r3, #0
   16a3c:	bne	16a30 <__assert_fail@plt+0x55c4>
   16a40:	ldr	r5, [r6, #16]
   16a44:	ldr	ip, [r2, #8]
   16a48:	cmp	r5, #0
   16a4c:	movne	r2, r5
   16a50:	bne	16a5c <__assert_fail@plt+0x55f0>
   16a54:	b	17070 <__assert_fail@plt+0x5c04>
   16a58:	mov	r2, r3
   16a5c:	ldr	r3, [r2, #12]
   16a60:	cmp	r3, #0
   16a64:	bne	16a58 <__assert_fail@plt+0x55ec>
   16a68:	ldr	r3, [r2, #8]
   16a6c:	mvn	r2, r3
   16a70:	lsr	r2, r2, #31
   16a74:	cmp	r2, ip, lsr #31
   16a78:	subne	r1, ip, r3
   16a7c:	subeq	r1, r3, ip
   16a80:	cmp	r1, #0
   16a84:	bne	16c00 <__assert_fail@plt+0x5794>
   16a88:	adds	r1, r5, #0
   16a8c:	movne	r1, #1
   16a90:	cmp	r4, #0
   16a94:	rsbeq	r1, r1, #0
   16a98:	rsbne	r1, r1, #1
   16a9c:	cmp	r1, #0
   16aa0:	bne	16c00 <__assert_fail@plt+0x5794>
   16aa4:	cmp	r4, #0
   16aa8:	mov	fp, r0
   16aac:	beq	16df8 <__assert_fail@plt+0x598c>
   16ab0:	ldr	r1, [r4, #20]
   16ab4:	ldr	r2, [r5, #20]
   16ab8:	cmp	r1, r2
   16abc:	bgt	16c0c <__assert_fail@plt+0x57a0>
   16ac0:	bge	16da4 <__assert_fail@plt+0x5938>
   16ac4:	ldr	r5, [r5, #12]
   16ac8:	ldr	r3, [r5, #20]
   16acc:	cmp	r1, r3
   16ad0:	blt	16ac4 <__assert_fail@plt+0x5658>
   16ad4:	ldr	r6, [r4, #12]
   16ad8:	ldr	r7, [r5, #12]
   16adc:	cmp	r6, r7
   16ae0:	beq	172e0 <__assert_fail@plt+0x5e74>
   16ae4:	ldr	r8, [r6, #12]
   16ae8:	ldr	r9, [r7, #12]
   16aec:	cmp	r8, r9
   16af0:	beq	17218 <__assert_fail@plt+0x5dac>
   16af4:	ldr	sl, [r8, #12]
   16af8:	ldr	fp, [r9, #12]
   16afc:	cmp	sl, fp
   16b00:	beq	17348 <__assert_fail@plt+0x5edc>
   16b04:	ldr	r0, [sl, #12]
   16b08:	ldr	r1, [fp, #12]
   16b0c:	cmp	r0, r1
   16b10:	beq	173f4 <__assert_fail@plt+0x5f88>
   16b14:	bl	16634 <__assert_fail@plt+0x51c8>
   16b18:	subs	r1, r0, #0
   16b1c:	bne	16c00 <__assert_fail@plt+0x5794>
   16b20:	ldr	r1, [fp, #8]
   16b24:	ldr	r3, [sl, #8]
   16b28:	mvn	r2, r1
   16b2c:	lsr	r2, r2, #31
   16b30:	cmp	r2, r3, lsr #31
   16b34:	subne	r1, r3, r1
   16b38:	subeq	r1, r1, r3
   16b3c:	cmp	r1, #0
   16b40:	bne	16c00 <__assert_fail@plt+0x5794>
   16b44:	ldr	r1, [fp, #4]
   16b48:	ldr	r3, [sl, #4]
   16b4c:	sub	r1, r1, r3
   16b50:	cmp	r1, #0
   16b54:	bne	16c00 <__assert_fail@plt+0x5794>
   16b58:	ldr	r1, [r9, #8]
   16b5c:	ldr	r3, [r8, #8]
   16b60:	mvn	r2, r1
   16b64:	lsr	r2, r2, #31
   16b68:	cmp	r2, r3, lsr #31
   16b6c:	subne	r1, r3, r1
   16b70:	subeq	r1, r1, r3
   16b74:	cmp	r1, #0
   16b78:	bne	16c00 <__assert_fail@plt+0x5794>
   16b7c:	ldr	r1, [r9, #4]
   16b80:	ldr	r3, [r8, #4]
   16b84:	sub	r1, r1, r3
   16b88:	cmp	r1, #0
   16b8c:	bne	16c00 <__assert_fail@plt+0x5794>
   16b90:	ldr	r1, [r7, #8]
   16b94:	ldr	r3, [r6, #8]
   16b98:	mvn	r2, r1
   16b9c:	lsr	r2, r2, #31
   16ba0:	cmp	r2, r3, lsr #31
   16ba4:	subne	r1, r3, r1
   16ba8:	subeq	r1, r1, r3
   16bac:	cmp	r1, #0
   16bb0:	bne	16c00 <__assert_fail@plt+0x5794>
   16bb4:	ldr	r1, [r7, #4]
   16bb8:	ldr	r3, [r6, #4]
   16bbc:	sub	r1, r1, r3
   16bc0:	cmp	r1, #0
   16bc4:	bne	16c00 <__assert_fail@plt+0x5794>
   16bc8:	ldr	r1, [r5, #8]
   16bcc:	ldr	r3, [r4, #8]
   16bd0:	mvn	r2, r1
   16bd4:	lsr	r2, r2, #31
   16bd8:	cmp	r2, r3, lsr #31
   16bdc:	subne	r1, r3, r1
   16be0:	subeq	r1, r1, r3
   16be4:	cmp	r1, #0
   16be8:	bne	16c00 <__assert_fail@plt+0x5794>
   16bec:	ldr	r1, [r5, #4]
   16bf0:	ldr	r3, [r4, #4]
   16bf4:	sub	r1, r1, r3
   16bf8:	cmp	r1, #0
   16bfc:	mvneq	r1, #0
   16c00:	mov	r0, r1
   16c04:	add	sp, sp, #28
   16c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c0c:	ldr	r4, [r4, #12]
   16c10:	ldr	r3, [r4, #20]
   16c14:	cmp	r2, r3
   16c18:	blt	16c0c <__assert_fail@plt+0x57a0>
   16c1c:	ldr	r6, [r4, #12]
   16c20:	ldr	r7, [r5, #12]
   16c24:	cmp	r6, r7
   16c28:	beq	17280 <__assert_fail@plt+0x5e14>
   16c2c:	ldr	r8, [r6, #12]
   16c30:	ldr	r9, [r7, #12]
   16c34:	cmp	r8, r9
   16c38:	beq	17314 <__assert_fail@plt+0x5ea8>
   16c3c:	ldr	sl, [r8, #12]
   16c40:	ldr	fp, [r9, #12]
   16c44:	cmp	sl, fp
   16c48:	beq	1724c <__assert_fail@plt+0x5de0>
   16c4c:	ldr	r3, [sl, #12]
   16c50:	ldr	r2, [fp, #12]
   16c54:	cmp	r3, r2
   16c58:	beq	1737c <__assert_fail@plt+0x5f10>
   16c5c:	ldr	r0, [r3, #12]
   16c60:	ldr	r1, [r2, #12]
   16c64:	cmp	r0, r1
   16c68:	beq	17428 <__assert_fail@plt+0x5fbc>
   16c6c:	str	r2, [sp, #8]
   16c70:	str	r3, [sp, #4]
   16c74:	bl	16634 <__assert_fail@plt+0x51c8>
   16c78:	subs	r1, r0, #0
   16c7c:	bne	16c00 <__assert_fail@plt+0x5794>
   16c80:	ldr	r2, [sp, #8]
   16c84:	ldr	r3, [sp, #4]
   16c88:	ldr	r0, [r2, #8]
   16c8c:	ldr	r1, [r3, #8]
   16c90:	mvn	ip, r0
   16c94:	lsr	ip, ip, #31
   16c98:	cmp	ip, r1, lsr #31
   16c9c:	subne	r1, r1, r0
   16ca0:	subeq	r1, r0, r1
   16ca4:	cmp	r1, #0
   16ca8:	bne	16c00 <__assert_fail@plt+0x5794>
   16cac:	ldr	r1, [r2, #4]
   16cb0:	ldr	r3, [r3, #4]
   16cb4:	sub	r1, r1, r3
   16cb8:	cmp	r1, #0
   16cbc:	bne	16c00 <__assert_fail@plt+0x5794>
   16cc0:	ldr	r1, [fp, #8]
   16cc4:	ldr	r3, [sl, #8]
   16cc8:	mvn	r2, r1
   16ccc:	lsr	r2, r2, #31
   16cd0:	cmp	r2, r3, lsr #31
   16cd4:	subne	r1, r3, r1
   16cd8:	subeq	r1, r1, r3
   16cdc:	cmp	r1, #0
   16ce0:	bne	16c00 <__assert_fail@plt+0x5794>
   16ce4:	ldr	r1, [fp, #4]
   16ce8:	ldr	r3, [sl, #4]
   16cec:	sub	r1, r1, r3
   16cf0:	cmp	r1, #0
   16cf4:	bne	16c00 <__assert_fail@plt+0x5794>
   16cf8:	ldr	r1, [r9, #8]
   16cfc:	ldr	r3, [r8, #8]
   16d00:	mvn	r2, r1
   16d04:	lsr	r2, r2, #31
   16d08:	cmp	r2, r3, lsr #31
   16d0c:	subne	r1, r3, r1
   16d10:	subeq	r1, r1, r3
   16d14:	cmp	r1, #0
   16d18:	bne	16c00 <__assert_fail@plt+0x5794>
   16d1c:	ldr	r1, [r9, #4]
   16d20:	ldr	r3, [r8, #4]
   16d24:	sub	r1, r1, r3
   16d28:	cmp	r1, #0
   16d2c:	bne	16c00 <__assert_fail@plt+0x5794>
   16d30:	ldr	r1, [r7, #8]
   16d34:	ldr	r3, [r6, #8]
   16d38:	mvn	r2, r1
   16d3c:	lsr	r2, r2, #31
   16d40:	cmp	r2, r3, lsr #31
   16d44:	subne	r1, r3, r1
   16d48:	subeq	r1, r1, r3
   16d4c:	cmp	r1, #0
   16d50:	bne	16c00 <__assert_fail@plt+0x5794>
   16d54:	ldr	r1, [r7, #4]
   16d58:	ldr	r3, [r6, #4]
   16d5c:	sub	r1, r1, r3
   16d60:	cmp	r1, #0
   16d64:	bne	16c00 <__assert_fail@plt+0x5794>
   16d68:	ldr	r1, [r5, #8]
   16d6c:	ldr	r3, [r4, #8]
   16d70:	mvn	r2, r1
   16d74:	lsr	r2, r2, #31
   16d78:	cmp	r2, r3, lsr #31
   16d7c:	subne	r1, r3, r1
   16d80:	subeq	r1, r1, r3
   16d84:	cmp	r1, #0
   16d88:	bne	16c00 <__assert_fail@plt+0x5794>
   16d8c:	ldr	r1, [r5, #4]
   16d90:	ldr	r3, [r4, #4]
   16d94:	sub	r1, r1, r3
   16d98:	cmp	r1, #0
   16d9c:	moveq	r1, #1
   16da0:	b	16c00 <__assert_fail@plt+0x5794>
   16da4:	ldr	r0, [r4, #12]
   16da8:	ldr	r1, [r5, #12]
   16dac:	cmp	r0, r1
   16db0:	beq	173b0 <__assert_fail@plt+0x5f44>
   16db4:	bl	16634 <__assert_fail@plt+0x51c8>
   16db8:	subs	r1, r0, #0
   16dbc:	bne	16c00 <__assert_fail@plt+0x5794>
   16dc0:	ldr	r1, [r5, #8]
   16dc4:	ldr	r3, [r4, #8]
   16dc8:	mvn	r2, r1
   16dcc:	lsr	r2, r2, #31
   16dd0:	cmp	r2, r3, lsr #31
   16dd4:	subne	r1, r3, r1
   16dd8:	subeq	r1, r1, r3
   16ddc:	cmp	r1, #0
   16de0:	bne	16c00 <__assert_fail@plt+0x5794>
   16de4:	ldr	r1, [r5, #4]
   16de8:	ldr	r3, [r4, #4]
   16dec:	sub	r1, r1, r3
   16df0:	cmp	r1, #0
   16df4:	bne	16c00 <__assert_fail@plt+0x5794>
   16df8:	ldr	r1, [r6, #12]
   16dfc:	ldr	r3, [fp, #12]
   16e00:	mvn	r2, r1
   16e04:	lsr	r2, r2, #31
   16e08:	cmp	r2, r3, lsr #31
   16e0c:	subne	r1, r3, r1
   16e10:	subeq	r1, r1, r3
   16e14:	cmp	r1, #0
   16e18:	bne	16c00 <__assert_fail@plt+0x5794>
   16e1c:	ldm	fp, {r8, r9}
   16e20:	cmp	r9, #0
   16e24:	beq	1745c <__assert_fail@plt+0x5ff0>
   16e28:	add	r3, r8, #24
   16e2c:	mov	r2, r9
   16e30:	ldr	r4, [r3, #-24]	; 0xffffffe8
   16e34:	cmp	r4, #0
   16e38:	beq	16e48 <__assert_fail@plt+0x59dc>
   16e3c:	ldr	r0, [r3, #-12]
   16e40:	tst	r0, #2
   16e44:	beq	16e58 <__assert_fail@plt+0x59ec>
   16e48:	subs	r2, r2, #1
   16e4c:	add	r3, r3, #24
   16e50:	bne	16e30 <__assert_fail@plt+0x59c4>
   16e54:	mov	r4, r2
   16e58:	ldm	r6, {r7, sl}
   16e5c:	cmp	sl, #0
   16e60:	beq	17464 <__assert_fail@plt+0x5ff8>
   16e64:	add	r3, r7, #24
   16e68:	mov	r2, sl
   16e6c:	ldr	r5, [r3, #-24]	; 0xffffffe8
   16e70:	cmp	r5, #0
   16e74:	beq	16e84 <__assert_fail@plt+0x5a18>
   16e78:	ldr	r0, [r3, #-12]
   16e7c:	tst	r0, #2
   16e80:	beq	16e94 <__assert_fail@plt+0x5a28>
   16e84:	subs	r2, r2, #1
   16e88:	add	r3, r3, #24
   16e8c:	bne	16e6c <__assert_fail@plt+0x5a00>
   16e90:	mov	r5, r2
   16e94:	ldr	r3, [r8, #12]
   16e98:	tst	r3, #8
   16e9c:	beq	16f08 <__assert_fail@plt+0x5a9c>
   16ea0:	cmp	r4, #0
   16ea4:	beq	16f08 <__assert_fail@plt+0x5a9c>
   16ea8:	str	r1, [sp, #4]
   16eac:	bl	112d4 <__ctype_b_loc@plt>
   16eb0:	ldr	r1, [sp, #4]
   16eb4:	mov	ip, r4
   16eb8:	ldr	r0, [r0]
   16ebc:	ldrb	r2, [ip]
   16ec0:	mov	r4, ip
   16ec4:	add	ip, ip, #1
   16ec8:	lsl	r3, r2, #1
   16ecc:	ldrh	r3, [r0, r3]
   16ed0:	tst	r3, #8192	; 0x2000
   16ed4:	bne	16ebc <__assert_fail@plt+0x5a50>
   16ed8:	cmp	r2, #0
   16edc:	bne	16ef8 <__assert_fail@plt+0x5a8c>
   16ee0:	b	17204 <__assert_fail@plt+0x5d98>
   16ee4:	ldrb	r3, [r4, #1]!
   16ee8:	cmp	r3, #0
   16eec:	lsl	r3, r3, #1
   16ef0:	beq	16f00 <__assert_fail@plt+0x5a94>
   16ef4:	ldrh	r3, [r0, r3]
   16ef8:	tst	r3, #8
   16efc:	beq	16ee4 <__assert_fail@plt+0x5a78>
   16f00:	cmp	r2, #45	; 0x2d
   16f04:	bne	17204 <__assert_fail@plt+0x5d98>
   16f08:	ldr	r3, [r7, #12]
   16f0c:	tst	r3, #8
   16f10:	beq	16f9c <__assert_fail@plt+0x5b30>
   16f14:	cmp	r5, #0
   16f18:	movne	r2, r1
   16f1c:	beq	16f9c <__assert_fail@plt+0x5b30>
   16f20:	str	r1, [sp, #8]
   16f24:	str	r2, [sp, #4]
   16f28:	bl	112d4 <__ctype_b_loc@plt>
   16f2c:	ldr	r2, [sp, #4]
   16f30:	ldr	r1, [sp, #8]
   16f34:	mov	r3, r5
   16f38:	ldr	ip, [r0]
   16f3c:	ldrb	r0, [r3]
   16f40:	mov	r5, r3
   16f44:	add	r3, r3, #1
   16f48:	lsl	lr, r0, #1
   16f4c:	ldrh	lr, [ip, lr]
   16f50:	tst	lr, #8192	; 0x2000
   16f54:	bne	16f3c <__assert_fail@plt+0x5ad0>
   16f58:	cmp	r0, #0
   16f5c:	beq	16f88 <__assert_fail@plt+0x5b1c>
   16f60:	tst	lr, #8
   16f64:	beq	16f78 <__assert_fail@plt+0x5b0c>
   16f68:	b	16f88 <__assert_fail@plt+0x5b1c>
   16f6c:	ldrh	r3, [ip, r3]
   16f70:	tst	r3, #8
   16f74:	bne	16f88 <__assert_fail@plt+0x5b1c>
   16f78:	ldrb	r3, [r5, #1]!
   16f7c:	cmp	r3, #0
   16f80:	lsl	r3, r3, #1
   16f84:	bne	16f6c <__assert_fail@plt+0x5b00>
   16f88:	cmp	r0, #45	; 0x2d
   16f8c:	subne	r2, r2, #1
   16f90:	cmp	r2, #0
   16f94:	movne	r1, r2
   16f98:	bne	16c00 <__assert_fail@plt+0x5794>
   16f9c:	ldr	r3, [fp, #8]
   16fa0:	cmp	r9, #0
   16fa4:	mov	r2, r3
   16fa8:	beq	1746c <__assert_fail@plt+0x6000>
   16fac:	str	r7, [sp, #16]
   16fb0:	str	r6, [sp, #20]
   16fb4:	mov	r3, #1
   16fb8:	str	r4, [sp, #8]
   16fbc:	str	r5, [sp, #12]
   16fc0:	mov	r7, r1
   16fc4:	mov	r6, r2
   16fc8:	b	16fe4 <__assert_fail@plt+0x5b78>
   16fcc:	subs	r9, r9, #1
   16fd0:	moveq	ip, #0
   16fd4:	andne	ip, ip, #1
   16fd8:	cmp	ip, #0
   16fdc:	add	r8, r8, #24
   16fe0:	beq	17078 <__assert_fail@plt+0x5c0c>
   16fe4:	ldr	r4, [r8, #12]
   16fe8:	mov	ip, r3
   16fec:	ands	fp, r4, #8
   16ff0:	movne	fp, r7
   16ff4:	bne	16fcc <__assert_fail@plt+0x5b60>
   16ff8:	ldr	r5, [r8, #4]
   16ffc:	sub	r0, r5, #1
   17000:	cmp	r0, #254	; 0xfe
   17004:	bhi	16fcc <__assert_fail@plt+0x5b60>
   17008:	str	r3, [sp, #4]
   1700c:	bl	112d4 <__ctype_b_loc@plt>
   17010:	lsl	lr, r5, #1
   17014:	ldr	r3, [sp, #4]
   17018:	mov	ip, r3
   1701c:	ldr	r0, [r0]
   17020:	ldrh	r0, [r0, lr]
   17024:	tst	r0, #16384	; 0x4000
   17028:	beq	16fcc <__assert_fail@plt+0x5b60>
   1702c:	ldrb	r0, [r6]
   17030:	mov	ip, r3
   17034:	cmp	r5, r0
   17038:	bne	16fcc <__assert_fail@plt+0x5b60>
   1703c:	and	r4, r4, #10
   17040:	cmp	r4, #0
   17044:	moveq	fp, r5
   17048:	movne	fp, #0
   1704c:	add	r6, r6, #1
   17050:	movne	ip, #1
   17054:	moveq	ip, #0
   17058:	b	16fcc <__assert_fail@plt+0x5b60>
   1705c:	ldr	r5, [r6, #16]
   17060:	ldr	ip, [r0, #12]
   17064:	cmp	r5, #0
   17068:	movne	r2, r5
   1706c:	bne	16a5c <__assert_fail@plt+0x55f0>
   17070:	ldr	r3, [r6, #12]
   17074:	b	16a6c <__assert_fail@plt+0x5600>
   17078:	mov	r3, fp
   1707c:	ldr	r6, [sp, #20]
   17080:	uxtb	r3, r3
   17084:	cmp	sl, #0
   17088:	str	fp, [sp, #4]
   1708c:	mov	r1, r7
   17090:	ldr	r4, [sp, #8]
   17094:	ldr	r7, [sp, #16]
   17098:	ldr	r5, [sp, #12]
   1709c:	ldr	fp, [r6, #8]
   170a0:	str	r3, [sp, #16]
   170a4:	beq	172b4 <__assert_fail@plt+0x5e48>
   170a8:	str	r4, [sp, #8]
   170ac:	mov	r8, #1
   170b0:	str	r5, [sp, #12]
   170b4:	mov	r4, r1
   170b8:	b	170d4 <__assert_fail@plt+0x5c68>
   170bc:	subs	sl, sl, #1
   170c0:	moveq	r3, #0
   170c4:	andne	r3, r3, #1
   170c8:	cmp	r3, #0
   170cc:	add	r7, r7, #24
   170d0:	beq	17140 <__assert_fail@plt+0x5cd4>
   170d4:	ldr	r6, [r7, #12]
   170d8:	mov	r3, r8
   170dc:	ands	r9, r6, #8
   170e0:	movne	r9, r4
   170e4:	bne	170bc <__assert_fail@plt+0x5c50>
   170e8:	ldr	r5, [r7, #4]
   170ec:	sub	r0, r5, #1
   170f0:	cmp	r0, #254	; 0xfe
   170f4:	bhi	170bc <__assert_fail@plt+0x5c50>
   170f8:	bl	112d4 <__ctype_b_loc@plt>
   170fc:	lsl	ip, r5, #1
   17100:	mov	r3, r8
   17104:	ldr	r0, [r0]
   17108:	ldrh	r0, [r0, ip]
   1710c:	tst	r0, #16384	; 0x4000
   17110:	beq	170bc <__assert_fail@plt+0x5c50>
   17114:	ldrb	r0, [fp]
   17118:	mov	r3, r8
   1711c:	cmp	r5, r0
   17120:	bne	170bc <__assert_fail@plt+0x5c50>
   17124:	and	r6, r6, #2
   17128:	cmp	r6, #0
   1712c:	moveq	r9, r5
   17130:	add	fp, fp, #1
   17134:	movne	r3, #1
   17138:	moveq	r3, #0
   1713c:	b	170bc <__assert_fail@plt+0x5c50>
   17140:	mov	r1, r4
   17144:	ldmib	sp, {r3, r4}
   17148:	ldr	r5, [sp, #12]
   1714c:	uxtb	r6, r9
   17150:	cmp	r3, #0
   17154:	beq	171f0 <__assert_fail@plt+0x5d84>
   17158:	ldr	r3, [sp, #16]
   1715c:	mov	r7, r3
   17160:	lsl	r8, r3, #2
   17164:	cmp	r9, #0
   17168:	beq	172cc <__assert_fail@plt+0x5e60>
   1716c:	lsl	sl, r6, #2
   17170:	bl	112b0 <__ctype_tolower_loc@plt>
   17174:	ldr	r3, [r0]
   17178:	ldr	r1, [r3, r8]
   1717c:	ldr	r3, [r3, sl]
   17180:	subs	r1, r1, r3
   17184:	bne	16c00 <__assert_fail@plt+0x5794>
   17188:	subs	r1, r6, r7
   1718c:	bne	16c00 <__assert_fail@plt+0x5794>
   17190:	adds	r1, r9, #0
   17194:	ldr	r3, [sp, #4]
   17198:	movne	r1, #1
   1719c:	cmp	r3, #0
   171a0:	rsbeq	r1, r1, #0
   171a4:	rsbne	r1, r1, #1
   171a8:	cmp	r1, #0
   171ac:	bne	16c00 <__assert_fail@plt+0x5794>
   171b0:	cmp	r3, #0
   171b4:	bne	16c00 <__assert_fail@plt+0x5794>
   171b8:	adds	r1, r5, #0
   171bc:	movne	r1, #1
   171c0:	cmp	r4, #0
   171c4:	rsbeq	r1, r1, #0
   171c8:	rsbne	r1, r1, #1
   171cc:	cmp	r1, #0
   171d0:	bne	16c00 <__assert_fail@plt+0x5794>
   171d4:	cmp	r4, #0
   171d8:	beq	16c00 <__assert_fail@plt+0x5794>
   171dc:	mov	r1, r5
   171e0:	mov	r0, r4
   171e4:	add	sp, sp, #28
   171e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171ec:	b	11238 <strcasecmp@plt>
   171f0:	cmp	r4, #0
   171f4:	beq	17498 <__assert_fail@plt+0x602c>
   171f8:	ldrb	r7, [r4]
   171fc:	lsl	r8, r7, #2
   17200:	b	17164 <__assert_fail@plt+0x5cf8>
   17204:	ldr	r3, [r7, #12]
   17208:	tst	r3, #8
   1720c:	bne	173e4 <__assert_fail@plt+0x5f78>
   17210:	mov	r1, #1
   17214:	b	16c00 <__assert_fail@plt+0x5794>
   17218:	ldr	r1, [r7, #8]
   1721c:	ldr	r3, [r6, #8]
   17220:	mvn	r2, r1
   17224:	ldr	r0, [r7, #4]
   17228:	lsr	r2, r2, #31
   1722c:	cmp	r2, r3, lsr #31
   17230:	subne	r1, r3, r1
   17234:	subeq	r1, r1, r3
   17238:	ldr	r2, [r6, #4]
   1723c:	cmp	r1, #0
   17240:	subeq	r1, r0, r2
   17244:	beq	16bc0 <__assert_fail@plt+0x5754>
   17248:	b	16c00 <__assert_fail@plt+0x5794>
   1724c:	ldr	r1, [r9, #8]
   17250:	ldr	r3, [r8, #8]
   17254:	mvn	r2, r1
   17258:	ldr	r0, [r9, #4]
   1725c:	lsr	r2, r2, #31
   17260:	cmp	r2, r3, lsr #31
   17264:	subne	r1, r3, r1
   17268:	subeq	r1, r1, r3
   1726c:	ldr	r2, [r8, #4]
   17270:	cmp	r1, #0
   17274:	subeq	r1, r0, r2
   17278:	beq	16d28 <__assert_fail@plt+0x58bc>
   1727c:	b	16c00 <__assert_fail@plt+0x5794>
   17280:	ldr	r1, [r5, #8]
   17284:	ldr	r3, [r4, #8]
   17288:	mvn	r2, r1
   1728c:	ldr	r0, [r5, #4]
   17290:	lsr	r2, r2, #31
   17294:	cmp	r2, r3, lsr #31
   17298:	subne	r1, r3, r1
   1729c:	subeq	r1, r1, r3
   172a0:	ldr	r2, [r4, #4]
   172a4:	cmp	r1, #0
   172a8:	subeq	r1, r0, r2
   172ac:	beq	16d98 <__assert_fail@plt+0x592c>
   172b0:	b	16c00 <__assert_fail@plt+0x5794>
   172b4:	ldr	r3, [sp, #4]
   172b8:	cmp	r3, #0
   172bc:	beq	174a4 <__assert_fail@plt+0x6038>
   172c0:	ldr	r3, [sp, #16]
   172c4:	mov	r7, r3
   172c8:	lsl	r8, r3, #2
   172cc:	cmp	r5, #0
   172d0:	beq	17488 <__assert_fail@plt+0x601c>
   172d4:	ldrb	r6, [r5]
   172d8:	mov	r9, r1
   172dc:	b	1716c <__assert_fail@plt+0x5d00>
   172e0:	ldr	r1, [r5, #8]
   172e4:	ldr	r3, [r4, #8]
   172e8:	mvn	r2, r1
   172ec:	ldr	r0, [r5, #4]
   172f0:	lsr	r2, r2, #31
   172f4:	cmp	r2, r3, lsr #31
   172f8:	subne	r1, r3, r1
   172fc:	subeq	r1, r1, r3
   17300:	ldr	r2, [r4, #4]
   17304:	cmp	r1, #0
   17308:	subeq	r1, r0, r2
   1730c:	beq	16bf8 <__assert_fail@plt+0x578c>
   17310:	b	16c00 <__assert_fail@plt+0x5794>
   17314:	ldr	r1, [r7, #8]
   17318:	ldr	r3, [r6, #8]
   1731c:	mvn	r2, r1
   17320:	ldr	r0, [r7, #4]
   17324:	lsr	r2, r2, #31
   17328:	cmp	r2, r3, lsr #31
   1732c:	subne	r1, r3, r1
   17330:	subeq	r1, r1, r3
   17334:	ldr	r2, [r6, #4]
   17338:	cmp	r1, #0
   1733c:	subeq	r1, r0, r2
   17340:	beq	16d60 <__assert_fail@plt+0x58f4>
   17344:	b	16c00 <__assert_fail@plt+0x5794>
   17348:	ldr	r1, [r9, #8]
   1734c:	ldr	r3, [r8, #8]
   17350:	mvn	r2, r1
   17354:	ldr	r0, [r9, #4]
   17358:	lsr	r2, r2, #31
   1735c:	cmp	r2, r3, lsr #31
   17360:	subne	r1, r3, r1
   17364:	subeq	r1, r1, r3
   17368:	ldr	r2, [r8, #4]
   1736c:	cmp	r1, #0
   17370:	subeq	r1, r0, r2
   17374:	beq	16b88 <__assert_fail@plt+0x571c>
   17378:	b	16c00 <__assert_fail@plt+0x5794>
   1737c:	ldr	r1, [fp, #8]
   17380:	ldr	r3, [sl, #8]
   17384:	mvn	r2, r1
   17388:	ldr	r0, [fp, #4]
   1738c:	lsr	r2, r2, #31
   17390:	cmp	r2, r3, lsr #31
   17394:	subne	r1, r3, r1
   17398:	subeq	r1, r1, r3
   1739c:	ldr	r2, [sl, #4]
   173a0:	cmp	r1, #0
   173a4:	subeq	r1, r0, r2
   173a8:	beq	16cf0 <__assert_fail@plt+0x5884>
   173ac:	b	16c00 <__assert_fail@plt+0x5794>
   173b0:	ldr	r1, [r5, #8]
   173b4:	ldr	r3, [r4, #8]
   173b8:	mvn	r2, r1
   173bc:	ldr	r0, [r5, #4]
   173c0:	lsr	r2, r2, #31
   173c4:	cmp	r2, r3, lsr #31
   173c8:	subne	r1, r3, r1
   173cc:	subeq	r1, r1, r3
   173d0:	ldr	r2, [r4, #4]
   173d4:	cmp	r1, #0
   173d8:	subeq	r1, r0, r2
   173dc:	beq	16df0 <__assert_fail@plt+0x5984>
   173e0:	b	16c00 <__assert_fail@plt+0x5794>
   173e4:	cmp	r5, #0
   173e8:	beq	17210 <__assert_fail@plt+0x5da4>
   173ec:	mov	r2, #1
   173f0:	b	16f20 <__assert_fail@plt+0x5ab4>
   173f4:	ldr	r1, [fp, #8]
   173f8:	ldr	r3, [sl, #8]
   173fc:	mvn	r2, r1
   17400:	ldr	r0, [fp, #4]
   17404:	lsr	r2, r2, #31
   17408:	cmp	r2, r3, lsr #31
   1740c:	subne	r1, r3, r1
   17410:	subeq	r1, r1, r3
   17414:	ldr	r2, [sl, #4]
   17418:	cmp	r1, #0
   1741c:	subeq	r1, r0, r2
   17420:	beq	16b50 <__assert_fail@plt+0x56e4>
   17424:	b	16c00 <__assert_fail@plt+0x5794>
   17428:	ldr	r0, [r2, #8]
   1742c:	ldr	r1, [r3, #8]
   17430:	mvn	ip, r0
   17434:	ldr	r2, [r2, #4]
   17438:	lsr	ip, ip, #31
   1743c:	cmp	ip, r1, lsr #31
   17440:	subne	r1, r1, r0
   17444:	subeq	r1, r0, r1
   17448:	ldr	r3, [r3, #4]
   1744c:	cmp	r1, #0
   17450:	subeq	r1, r2, r3
   17454:	beq	16cb8 <__assert_fail@plt+0x584c>
   17458:	b	16c00 <__assert_fail@plt+0x5794>
   1745c:	mov	r4, r1
   17460:	b	16e58 <__assert_fail@plt+0x59ec>
   17464:	mov	r5, sl
   17468:	b	16e94 <__assert_fail@plt+0x5a28>
   1746c:	cmp	sl, #0
   17470:	ldr	fp, [r6, #8]
   17474:	streq	r1, [sp, #4]
   17478:	beq	174a4 <__assert_fail@plt+0x6038>
   1747c:	str	r9, [sp, #16]
   17480:	str	r1, [sp, #4]
   17484:	b	170a8 <__assert_fail@plt+0x5c3c>
   17488:	mov	r9, r1
   1748c:	mov	sl, r5
   17490:	mov	r6, r5
   17494:	b	17170 <__assert_fail@plt+0x5d04>
   17498:	mov	r8, r4
   1749c:	mov	r7, r4
   174a0:	b	17164 <__assert_fail@plt+0x5cf8>
   174a4:	cmp	r4, #0
   174a8:	moveq	r8, r4
   174ac:	moveq	r7, r4
   174b0:	beq	172cc <__assert_fail@plt+0x5e60>
   174b4:	mov	r9, r1
   174b8:	mov	r6, #0
   174bc:	b	171f8 <__assert_fail@plt+0x5d8c>

000174c0 <argp_failure@@Base>:
   174c0:	push	{r3}		; (str r3, [sp, #-4]!)
   174c4:	push	{r4, r5, r6, r7, lr}
   174c8:	subs	r5, r0, #0
   174cc:	sub	sp, sp, #200	; 0xc8
   174d0:	mov	r7, r1
   174d4:	mov	r6, r2
   174d8:	beq	17628 <argp_failure@@Base+0x168>
   174dc:	ldr	r3, [r5, #16]
   174e0:	tst	r3, #2
   174e4:	bne	17618 <argp_failure@@Base+0x158>
   174e8:	ldr	r4, [r5, #44]	; 0x2c
   174ec:	cmp	r4, #0
   174f0:	beq	17618 <argp_failure@@Base+0x158>
   174f4:	mov	r0, r4
   174f8:	bl	11400 <flockfile@plt>
   174fc:	ldr	r0, [r5, #40]	; 0x28
   17500:	mov	r1, r4
   17504:	bl	1110c <fputs_unlocked@plt>
   17508:	ldr	r3, [sp, #220]	; 0xdc
   1750c:	cmp	r3, #0
   17510:	beq	1756c <argp_failure@@Base+0xac>
   17514:	ldr	r3, [r4, #20]
   17518:	ldr	r1, [r4, #24]
   1751c:	add	r2, sp, #224	; 0xe0
   17520:	cmp	r3, r1
   17524:	str	r2, [sp]
   17528:	addcc	r1, r3, #1
   1752c:	movcc	r2, #58	; 0x3a
   17530:	strcc	r1, [r4, #20]
   17534:	strbcc	r2, [r3]
   17538:	bcs	17674 <argp_failure@@Base+0x1b4>
   1753c:	ldr	r3, [r4, #20]
   17540:	ldr	r2, [r4, #24]
   17544:	cmp	r3, r2
   17548:	addcc	r1, r3, #1
   1754c:	movcc	r2, #32
   17550:	strcc	r1, [r4, #20]
   17554:	strbcc	r2, [r3]
   17558:	bcs	17664 <argp_failure@@Base+0x1a4>
   1755c:	ldr	r2, [sp]
   17560:	ldr	r1, [sp, #220]	; 0xdc
   17564:	mov	r0, r4
   17568:	bl	113c4 <vfprintf@plt>
   1756c:	cmp	r6, #0
   17570:	beq	175d4 <argp_failure@@Base+0x114>
   17574:	ldr	r3, [r4, #20]
   17578:	ldr	r2, [r4, #24]
   1757c:	cmp	r3, r2
   17580:	addcc	r1, r3, #1
   17584:	movcc	r2, #58	; 0x3a
   17588:	strcc	r1, [r4, #20]
   1758c:	strbcc	r2, [r3]
   17590:	bcs	17694 <argp_failure@@Base+0x1d4>
   17594:	ldr	r3, [r4, #20]
   17598:	ldr	r2, [r4, #24]
   1759c:	cmp	r3, r2
   175a0:	addcc	r1, r3, #1
   175a4:	movcc	r2, #32
   175a8:	strcc	r1, [r4, #20]
   175ac:	strbcc	r2, [r3]
   175b0:	bcs	17684 <argp_failure@@Base+0x1c4>
   175b4:	mov	r2, #200	; 0xc8
   175b8:	mov	r1, sp
   175bc:	mov	r0, r6
   175c0:	bl	11340 <strerror_r@plt>
   175c4:	cmp	r0, #0
   175c8:	beq	176a4 <argp_failure@@Base+0x1e4>
   175cc:	mov	r1, r4
   175d0:	bl	1110c <fputs_unlocked@plt>
   175d4:	ldr	r3, [r4, #20]
   175d8:	ldr	r2, [r4, #24]
   175dc:	cmp	r3, r2
   175e0:	addcc	r1, r3, #1
   175e4:	movcc	r2, #10
   175e8:	strcc	r1, [r4, #20]
   175ec:	strbcc	r2, [r3]
   175f0:	bcs	1764c <argp_failure@@Base+0x18c>
   175f4:	mov	r0, r4
   175f8:	bl	11244 <funlockfile@plt>
   175fc:	cmp	r7, #0
   17600:	beq	17618 <argp_failure@@Base+0x158>
   17604:	cmp	r5, #0
   17608:	beq	1765c <argp_failure@@Base+0x19c>
   1760c:	ldr	r3, [r5, #16]
   17610:	tst	r3, #32
   17614:	beq	1765c <argp_failure@@Base+0x19c>
   17618:	add	sp, sp, #200	; 0xc8
   1761c:	pop	{r4, r5, r6, r7, lr}
   17620:	add	sp, sp, #4
   17624:	bx	lr
   17628:	ldr	r3, [pc, #140]	; 176bc <argp_failure@@Base+0x1fc>
   1762c:	ldr	r4, [r3]
   17630:	cmp	r4, #0
   17634:	beq	17618 <argp_failure@@Base+0x158>
   17638:	mov	r0, r4
   1763c:	bl	11400 <flockfile@plt>
   17640:	ldr	r3, [pc, #120]	; 176c0 <argp_failure@@Base+0x200>
   17644:	ldr	r0, [r3]
   17648:	b	17500 <argp_failure@@Base+0x40>
   1764c:	mov	r1, #10
   17650:	mov	r0, r4
   17654:	bl	11394 <__overflow@plt>
   17658:	b	175f4 <argp_failure@@Base+0x134>
   1765c:	mov	r0, r7
   17660:	bl	112ec <exit@plt>
   17664:	mov	r1, #32
   17668:	mov	r0, r4
   1766c:	bl	11394 <__overflow@plt>
   17670:	b	1755c <argp_failure@@Base+0x9c>
   17674:	mov	r1, #58	; 0x3a
   17678:	mov	r0, r4
   1767c:	bl	11394 <__overflow@plt>
   17680:	b	1753c <argp_failure@@Base+0x7c>
   17684:	mov	r1, #32
   17688:	mov	r0, r4
   1768c:	bl	11394 <__overflow@plt>
   17690:	b	175b4 <argp_failure@@Base+0xf4>
   17694:	mov	r1, #58	; 0x3a
   17698:	mov	r0, r4
   1769c:	bl	11394 <__overflow@plt>
   176a0:	b	17594 <argp_failure@@Base+0xd4>
   176a4:	mov	r0, r6
   176a8:	bl	112a4 <strerror@plt>
   176ac:	ldr	r3, [pc, #16]	; 176c4 <argp_failure@@Base+0x204>
   176b0:	cmp	r0, #0
   176b4:	moveq	r0, r3
   176b8:	b	175cc <argp_failure@@Base+0x10c>
   176bc:	andeq	r1, r3, r8, lsr #12
   176c0:	andeq	r1, r3, r0, lsr #12
   176c4:	andeq	pc, r1, r4, lsr r6	; <UNPREDICTABLE>
   176c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176cc:	add	fp, sp, #32
   176d0:	cmp	r2, #0
   176d4:	sub	sp, sp, #116	; 0x74
   176d8:	str	r2, [fp, #-136]	; 0xffffff78
   176dc:	str	r0, [fp, #-116]	; 0xffffff8c
   176e0:	str	r1, [fp, #-104]	; 0xffffff98
   176e4:	str	r3, [fp, #-100]	; 0xffffff9c
   176e8:	beq	1780c <argp_failure@@Base+0x34c>
   176ec:	ldr	r3, [pc, #4076]	; 186e0 <argp_failure@@Base+0x1220>
   176f0:	mov	r0, r2
   176f4:	mov	r4, r3
   176f8:	str	r3, [fp, #-96]	; 0xffffffa0
   176fc:	bl	11400 <flockfile@plt>
   17700:	ldr	sl, [r4, #36]	; 0x24
   17704:	cmp	sl, #0
   17708:	beq	17c20 <argp_failure@@Base+0x760>
   1770c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17710:	mov	r3, #0
   17714:	mov	r1, r3
   17718:	ldr	r2, [r2, #32]
   1771c:	ldr	r0, [fp, #-136]	; 0xffffff78
   17720:	bl	1bff8 <argp_parse@@Base+0x25e8>
   17724:	subs	sl, r0, #0
   17728:	beq	18a3c <argp_failure@@Base+0x157c>
   1772c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17730:	ands	r3, r3, #11
   17734:	streq	r3, [fp, #-108]	; 0xffffff94
   17738:	bne	1804c <argp_failure@@Base+0xb8c>
   1773c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17740:	ands	r4, r3, #3
   17744:	bne	18174 <argp_failure@@Base+0xcb4>
   17748:	tst	r3, #16
   1774c:	bne	1814c <argp_failure@@Base+0xc8c>
   17750:	tst	r3, #4
   17754:	bne	1802c <argp_failure@@Base+0xb6c>
   17758:	tst	r3, #8
   1775c:	bne	17814 <argp_failure@@Base+0x354>
   17760:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17764:	tst	r3, #32
   17768:	bne	17bdc <argp_failure@@Base+0x71c>
   1776c:	tst	r3, #64	; 0x40
   17770:	beq	177bc <argp_failure@@Base+0x2fc>
   17774:	ldr	r5, [pc, #3944]	; 186e4 <argp_failure@@Base+0x1224>
   17778:	ldr	r2, [r5]
   1777c:	cmp	r2, #0
   17780:	beq	177bc <argp_failure@@Base+0x2fc>
   17784:	cmp	r4, #0
   17788:	beq	177b0 <argp_failure@@Base+0x2f0>
   1778c:	ldr	r3, [sl, #28]
   17790:	ldr	r2, [sl, #32]
   17794:	cmp	r3, r2
   17798:	bcs	18a0c <argp_failure@@Base+0x154c>
   1779c:	add	r1, r3, #1
   177a0:	mov	r2, #10
   177a4:	str	r1, [sl, #28]
   177a8:	strb	r2, [r3]
   177ac:	ldr	r2, [r5]
   177b0:	ldr	r1, [pc, #3888]	; 186e8 <argp_failure@@Base+0x1228>
   177b4:	mov	r0, sl
   177b8:	bl	1c720 <argp_parse@@Base+0x2d10>
   177bc:	ldr	r0, [fp, #-136]	; 0xffffff78
   177c0:	bl	11244 <funlockfile@plt>
   177c4:	ldr	r3, [fp, #-108]	; 0xffffff94
   177c8:	cmp	r3, #0
   177cc:	beq	17804 <argp_failure@@Base+0x344>
   177d0:	ldr	r0, [r3, #12]
   177d4:	cmp	r0, #0
   177d8:	beq	177f0 <argp_failure@@Base+0x330>
   177dc:	ldr	r4, [r0, #24]
   177e0:	bl	1a98c <argp_parse@@Base+0xf7c>
   177e4:	subs	r0, r4, #0
   177e8:	bne	177dc <argp_failure@@Base+0x31c>
   177ec:	ldr	r3, [fp, #-108]	; 0xffffff94
   177f0:	ldr	r3, [r3, #4]
   177f4:	cmp	r3, #0
   177f8:	bne	17c08 <argp_failure@@Base+0x748>
   177fc:	ldr	r0, [fp, #-108]	; 0xffffff94
   17800:	bl	1a98c <argp_parse@@Base+0xf7c>
   17804:	mov	r0, sl
   17808:	bl	1c5e0 <argp_parse@@Base+0x2bd0>
   1780c:	sub	sp, fp, #32
   17810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17814:	ldr	r3, [fp, #-108]	; 0xffffff94
   17818:	ldr	r3, [r3, #4]
   1781c:	cmp	r3, #0
   17820:	str	r3, [fp, #-112]	; 0xffffff90
   17824:	beq	17760 <argp_failure@@Base+0x2a0>
   17828:	cmp	r4, #0
   1782c:	beq	1891c <argp_failure@@Base+0x145c>
   17830:	ldr	r3, [sl, #28]
   17834:	ldr	r2, [sl, #32]
   17838:	cmp	r3, r2
   1783c:	bcs	18b88 <argp_failure@@Base+0x16c8>
   17840:	add	r1, r3, #1
   17844:	mov	r2, #10
   17848:	str	r1, [sl, #28]
   1784c:	strb	r2, [r3]
   17850:	ldr	r3, [fp, #-108]	; 0xffffff94
   17854:	ldr	r2, [fp, #-108]	; 0xffffff94
   17858:	ldr	r3, [r3, #4]
   1785c:	ldr	r8, [r2]
   17860:	str	r3, [fp, #-112]	; 0xffffff90
   17864:	cmp	r3, #0
   17868:	mov	r3, #0
   1786c:	str	r3, [fp, #-88]	; 0xffffffa8
   17870:	str	r3, [fp, #-84]	; 0xffffffac
   17874:	str	r3, [fp, #-80]	; 0xffffffb0
   17878:	beq	17bcc <argp_failure@@Base+0x70c>
   1787c:	ldr	ip, [sl, #28]
   17880:	ldr	r3, [sl, #24]
   17884:	ldr	lr, [sl, #16]
   17888:	sub	ip, ip, r3
   1788c:	cmp	ip, lr
   17890:	ldr	r6, [r8]
   17894:	ldr	r9, [r8, #8]
   17898:	bhi	1877c <argp_failure@@Base+0x12bc>
   1789c:	ldr	r3, [sl, #4]
   178a0:	ldr	r0, [r6, #12]
   178a4:	str	r3, [fp, #-120]	; 0xffffff88
   178a8:	ldr	r3, [sl, #12]
   178ac:	mov	r7, #0
   178b0:	str	r3, [fp, #-124]	; 0xffffff84
   178b4:	sub	r3, fp, #88	; 0x58
   178b8:	str	r7, [sl, #4]
   178bc:	str	r3, [fp, #-68]	; 0xffffffbc
   178c0:	ldr	r3, [fp, #-104]	; 0xffffff98
   178c4:	ands	r0, r0, #8
   178c8:	mov	r2, #1
   178cc:	str	r2, [fp, #-64]	; 0xffffffc0
   178d0:	str	r8, [fp, #-76]	; 0xffffffb4
   178d4:	str	sl, [fp, #-72]	; 0xffffffb8
   178d8:	str	r3, [fp, #-60]	; 0xffffffc4
   178dc:	strne	r7, [fp, #-132]	; 0xffffff7c
   178e0:	bne	1791c <argp_failure@@Base+0x45c>
   178e4:	ldr	r1, [r8, #4]
   178e8:	cmp	r1, r7
   178ec:	beq	17918 <argp_failure@@Base+0x458>
   178f0:	add	r2, r6, #24
   178f4:	ldr	r3, [r2, #-24]	; 0xffffffe8
   178f8:	cmp	r3, #0
   178fc:	beq	1790c <argp_failure@@Base+0x44c>
   17900:	ldr	r3, [r2, #-12]
   17904:	tst	r3, #2
   17908:	beq	187c0 <argp_failure@@Base+0x1300>
   1790c:	subs	r1, r1, #1
   17910:	add	r2, r2, #24
   17914:	bne	178f4 <argp_failure@@Base+0x434>
   17918:	str	r0, [fp, #-132]	; 0xffffff7c
   1791c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17920:	cmp	ip, lr
   17924:	ldr	r4, [r3, #8]
   17928:	bhi	18768 <argp_failure@@Base+0x12a8>
   1792c:	str	r4, [sl, #12]
   17930:	ldr	r5, [r8, #4]
   17934:	cmp	r5, #0
   17938:	beq	179bc <argp_failure@@Base+0x4fc>
   1793c:	str	r8, [fp, #-128]	; 0xffffff80
   17940:	mov	r4, r6
   17944:	mov	r8, r9
   17948:	b	17958 <argp_failure@@Base+0x498>
   1794c:	subs	r5, r5, #1
   17950:	add	r4, r4, #24
   17954:	beq	179b0 <argp_failure@@Base+0x4f0>
   17958:	ldr	r7, [r4, #12]
   1795c:	tst	r7, #8
   17960:	bne	1794c <argp_failure@@Base+0x48c>
   17964:	ldr	r9, [r4, #4]
   17968:	sub	r2, r9, #1
   1796c:	cmp	r2, #254	; 0xfe
   17970:	bhi	1794c <argp_failure@@Base+0x48c>
   17974:	bl	112d4 <__ctype_b_loc@plt>
   17978:	lsl	r2, r9, #1
   1797c:	ldr	r1, [r0]
   17980:	ldrh	r2, [r1, r2]
   17984:	tst	r2, #16384	; 0x4000
   17988:	beq	1794c <argp_failure@@Base+0x48c>
   1798c:	ldrb	r2, [r8]
   17990:	cmp	r9, r2
   17994:	bne	1794c <argp_failure@@Base+0x48c>
   17998:	tst	r7, #2
   1799c:	beq	184e0 <argp_failure@@Base+0x1020>
   179a0:	subs	r5, r5, #1
   179a4:	add	r8, r8, #1
   179a8:	add	r4, r4, #24
   179ac:	bne	17958 <argp_failure@@Base+0x498>
   179b0:	ldr	r0, [r6, #12]
   179b4:	ldr	r8, [fp, #-128]	; 0xffffff80
   179b8:	and	r0, r0, #8
   179bc:	ldr	r3, [sl, #28]
   179c0:	ldr	r1, [sl, #24]
   179c4:	cmp	r0, #0
   179c8:	ldr	r2, [sl, #16]
   179cc:	sub	r3, r3, r1
   179d0:	beq	1844c <argp_failure@@Base+0xf8c>
   179d4:	cmp	r3, r2
   179d8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   179dc:	ldr	r4, [r3, #16]
   179e0:	bhi	187d8 <argp_failure@@Base+0x1318>
   179e4:	str	r4, [sl, #12]
   179e8:	ldr	r5, [r8, #4]
   179ec:	cmp	r5, #0
   179f0:	addne	r4, r6, #24
   179f4:	bne	17a08 <argp_failure@@Base+0x548>
   179f8:	b	17a98 <argp_failure@@Base+0x5d8>
   179fc:	subs	r5, r5, #1
   17a00:	add	r4, r4, #24
   17a04:	beq	17a98 <argp_failure@@Base+0x5d8>
   17a08:	ldr	r3, [r4, #-24]	; 0xffffffe8
   17a0c:	cmp	r3, #0
   17a10:	beq	179fc <argp_failure@@Base+0x53c>
   17a14:	ldr	r3, [r4, #-12]
   17a18:	tst	r3, #2
   17a1c:	bne	179fc <argp_failure@@Base+0x53c>
   17a20:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17a24:	sub	r1, fp, #76	; 0x4c
   17a28:	ldr	r0, [r3, #16]
   17a2c:	bl	163e0 <__assert_fail@plt+0x4f74>
   17a30:	ldr	r9, [r4, #-24]	; 0xffffffe8
   17a34:	mov	r0, r9
   17a38:	bl	11304 <strlen@plt>
   17a3c:	subs	r7, r0, #0
   17a40:	beq	179fc <argp_failure@@Base+0x53c>
   17a44:	ldr	r2, [sl, #28]
   17a48:	ldr	lr, [sl, #32]
   17a4c:	add	ip, r2, r7
   17a50:	cmp	lr, ip
   17a54:	mov	r1, r7
   17a58:	mov	r0, sl
   17a5c:	bcs	17a70 <argp_failure@@Base+0x5b0>
   17a60:	bl	1c620 <argp_parse@@Base+0x2c10>
   17a64:	cmp	r0, #0
   17a68:	beq	179fc <argp_failure@@Base+0x53c>
   17a6c:	ldr	r2, [sl, #28]
   17a70:	mov	r0, r2
   17a74:	mov	r1, r9
   17a78:	mov	r2, r7
   17a7c:	bl	111b4 <memcpy@plt>
   17a80:	ldr	r2, [sl, #28]
   17a84:	subs	r5, r5, #1
   17a88:	add	r3, r2, r7
   17a8c:	str	r3, [sl, #28]
   17a90:	add	r4, r4, #24
   17a94:	bne	17a08 <argp_failure@@Base+0x548>
   17a98:	ldr	r3, [sl, #28]
   17a9c:	ldr	r1, [sl, #24]
   17aa0:	ldr	r2, [sl, #16]
   17aa4:	sub	r3, r3, r1
   17aa8:	cmp	r3, r2
   17aac:	bhi	186a0 <argp_failure@@Base+0x11e0>
   17ab0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17ab4:	mov	r3, #0
   17ab8:	cmp	r2, r3
   17abc:	str	r3, [sl, #4]
   17ac0:	beq	18560 <argp_failure@@Base+0x10a0>
   17ac4:	ldr	r3, [r6, #12]
   17ac8:	tst	r3, #8
   17acc:	bne	17af8 <argp_failure@@Base+0x638>
   17ad0:	ldr	r4, [r6, #4]
   17ad4:	sub	r3, r4, #1
   17ad8:	cmp	r3, #254	; 0xfe
   17adc:	bhi	17af8 <argp_failure@@Base+0x638>
   17ae0:	bl	112d4 <__ctype_b_loc@plt>
   17ae4:	lsl	r4, r4, #1
   17ae8:	ldr	r3, [r0]
   17aec:	ldrh	r3, [r3, r4]
   17af0:	tst	r3, #16384	; 0x4000
   17af4:	bne	17b04 <argp_failure@@Base+0x644>
   17af8:	ldr	r3, [r6]
   17afc:	cmp	r3, #0
   17b00:	beq	18a28 <argp_failure@@Base+0x1568>
   17b04:	ldr	r3, [sl, #28]
   17b08:	ldr	r1, [sl, #24]
   17b0c:	ldr	r2, [sl, #16]
   17b10:	sub	r3, r3, r1
   17b14:	cmp	r3, r2
   17b18:	bhi	186ac <argp_failure@@Base+0x11ec>
   17b1c:	ldr	r3, [fp, #-120]	; 0xffffff88
   17b20:	str	r3, [sl, #4]
   17b24:	ldr	r3, [fp, #-112]	; 0xffffff90
   17b28:	add	r8, r8, #28
   17b2c:	subs	r3, r3, #1
   17b30:	str	r3, [fp, #-112]	; 0xffffff90
   17b34:	ldr	r3, [fp, #-124]	; 0xffffff84
   17b38:	str	r3, [sl, #12]
   17b3c:	bne	1787c <argp_failure@@Base+0x3bc>
   17b40:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17b44:	cmp	r3, #0
   17b48:	beq	17bcc <argp_failure@@Base+0x70c>
   17b4c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17b50:	ldr	r3, [r3, #4]
   17b54:	cmp	r3, #0
   17b58:	beq	17bcc <argp_failure@@Base+0x70c>
   17b5c:	ldr	r1, [fp, #-104]	; 0xffffff98
   17b60:	cmp	r1, #0
   17b64:	beq	18bec <argp_failure@@Base+0x172c>
   17b68:	ldr	r4, [r1]
   17b6c:	cmp	r4, #0
   17b70:	beq	18c1c <argp_failure@@Base+0x175c>
   17b74:	ldr	r3, [r4, #20]
   17b78:	cmp	r3, #0
   17b7c:	beq	18aec <argp_failure@@Base+0x162c>
   17b80:	mov	r0, r4
   17b84:	bl	1a830 <argp_parse@@Base+0xe20>
   17b88:	ldr	r9, [pc, #3028]	; 18764 <argp_failure@@Base+0x12a4>
   17b8c:	ldr	r3, [r4, #20]
   17b90:	mov	r1, r9
   17b94:	mov	r2, r0
   17b98:	ldr	r0, [pc, #2892]	; 186ec <argp_failure@@Base+0x122c>
   17b9c:	blx	r3
   17ba0:	subs	r4, r0, #0
   17ba4:	beq	17bcc <argp_failure@@Base+0x70c>
   17ba8:	ldrb	r3, [r4]
   17bac:	subs	r9, r4, r9
   17bb0:	movne	r9, #1
   17bb4:	cmp	r3, #0
   17bb8:	bne	18af4 <argp_failure@@Base+0x1634>
   17bbc:	cmp	r9, #0
   17bc0:	beq	17bcc <argp_failure@@Base+0x70c>
   17bc4:	mov	r0, r4
   17bc8:	bl	1a98c <argp_parse@@Base+0xf7c>
   17bcc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17bd0:	mov	r4, #1
   17bd4:	tst	r3, #32
   17bd8:	beq	1776c <argp_failure@@Base+0x2ac>
   17bdc:	mov	r3, #0
   17be0:	str	r3, [sp]
   17be4:	str	sl, [sp, #4]
   17be8:	mov	r3, r4
   17bec:	ldr	r1, [fp, #-104]	; 0xffffff98
   17bf0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   17bf4:	mov	r2, #1
   17bf8:	bl	149b8 <__assert_fail@plt+0x354c>
   17bfc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17c00:	orr	r4, r4, r0
   17c04:	b	1776c <argp_failure@@Base+0x2ac>
   17c08:	ldr	r4, [fp, #-108]	; 0xffffff94
   17c0c:	ldr	r0, [r4]
   17c10:	bl	1a98c <argp_parse@@Base+0xf7c>
   17c14:	ldr	r0, [r4, #8]
   17c18:	bl	1a98c <argp_parse@@Base+0xf7c>
   17c1c:	b	177fc <argp_failure@@Base+0x33c>
   17c20:	ldr	r0, [pc, #2760]	; 186f0 <argp_failure@@Base+0x1230>
   17c24:	bl	11274 <getenv@plt>
   17c28:	ldr	lr, [fp, #-96]	; 0xffffffa0
   17c2c:	sub	r3, fp, #76	; 0x4c
   17c30:	mov	ip, r3
   17c34:	str	r3, [fp, #-112]	; 0xffffff90
   17c38:	mov	r5, r0
   17c3c:	ldm	lr!, {r0, r1, r2, r3}
   17c40:	cmp	r5, #0
   17c44:	stmia	ip!, {r0, r1, r2, r3}
   17c48:	ldm	lr!, {r0, r1, r2, r3}
   17c4c:	stmia	ip!, {r0, r1, r2, r3}
   17c50:	ldm	lr, {r0, r1}
   17c54:	stm	ip, {r0, r1}
   17c58:	beq	1770c <argp_failure@@Base+0x24c>
   17c5c:	ldrb	r8, [r5]
   17c60:	ldr	r9, [pc, #2700]	; 186f4 <argp_failure@@Base+0x1234>
   17c64:	str	sl, [fp, #-120]	; 0xffffff88
   17c68:	cmp	r8, #0
   17c6c:	beq	17e20 <argp_failure@@Base+0x960>
   17c70:	bl	112d4 <__ctype_b_loc@plt>
   17c74:	mov	r7, r0
   17c78:	ldr	r0, [r0]
   17c7c:	b	17c84 <argp_failure@@Base+0x7c4>
   17c80:	ldrb	r8, [r5, #1]!
   17c84:	lsl	r3, r8, #1
   17c88:	ldrh	r1, [r0, r3]
   17c8c:	tst	r1, #8192	; 0x2000
   17c90:	bne	17c80 <argp_failure@@Base+0x7c0>
   17c94:	ands	r2, r1, #1024	; 0x400
   17c98:	beq	17e18 <argp_failure@@Base+0x958>
   17c9c:	cmp	r8, #95	; 0x5f
   17ca0:	cmpne	r8, #45	; 0x2d
   17ca4:	lsl	r3, r1, #28
   17ca8:	moveq	r6, #1
   17cac:	movne	r6, #0
   17cb0:	orrs	r6, r6, r3, lsr #31
   17cb4:	beq	188bc <argp_failure@@Base+0x13fc>
   17cb8:	mov	r4, r5
   17cbc:	ldrb	r3, [r4, #1]!
   17cc0:	cmp	r3, #95	; 0x5f
   17cc4:	cmpne	r3, #45	; 0x2d
   17cc8:	lsl	r1, r3, #1
   17ccc:	moveq	r2, #1
   17cd0:	ldrh	r1, [r0, r1]
   17cd4:	movne	r2, #0
   17cd8:	lsl	ip, r1, #28
   17cdc:	orrs	r2, r2, ip, lsr #31
   17ce0:	bne	17cbc <argp_failure@@Base+0x7fc>
   17ce4:	tst	r1, #8192	; 0x2000
   17ce8:	sub	r6, r4, r5
   17cec:	beq	17d04 <argp_failure@@Base+0x844>
   17cf0:	ldrb	r3, [r4, #1]!
   17cf4:	lsl	r2, r3, #1
   17cf8:	ldrh	r1, [r0, r2]
   17cfc:	tst	r1, #8192	; 0x2000
   17d00:	bne	17cf0 <argp_failure@@Base+0x830>
   17d04:	cmp	r3, #44	; 0x2c
   17d08:	cmpne	r3, #0
   17d0c:	beq	17ea4 <argp_failure@@Base+0x9e4>
   17d10:	cmp	r3, #61	; 0x3d
   17d14:	beq	1841c <argp_failure@@Base+0xf5c>
   17d18:	tst	r1, #2048	; 0x800
   17d1c:	bne	1838c <argp_failure@@Base+0xecc>
   17d20:	ldr	r3, [fp, #-120]	; 0xffffff88
   17d24:	mov	sl, r3
   17d28:	str	r3, [fp, #-108]	; 0xffffff94
   17d2c:	mov	r0, r9
   17d30:	bl	11304 <strlen@plt>
   17d34:	cmp	r6, r0
   17d38:	beq	17ec4 <argp_failure@@Base+0xa04>
   17d3c:	ldr	r0, [pc, #2484]	; 186f8 <argp_failure@@Base+0x1238>
   17d40:	bl	11304 <strlen@plt>
   17d44:	cmp	r6, r0
   17d48:	mov	r7, r0
   17d4c:	beq	17f58 <argp_failure@@Base+0xa98>
   17d50:	ldr	r0, [pc, #2556]	; 18754 <argp_failure@@Base+0x1294>
   17d54:	bl	11304 <strlen@plt>
   17d58:	cmp	r6, r0
   17d5c:	mov	r7, r0
   17d60:	beq	17f0c <argp_failure@@Base+0xa4c>
   17d64:	ldr	r0, [pc, #2532]	; 18750 <argp_failure@@Base+0x1290>
   17d68:	bl	11304 <strlen@plt>
   17d6c:	cmp	r6, r0
   17d70:	mov	r7, r0
   17d74:	beq	17f78 <argp_failure@@Base+0xab8>
   17d78:	ldr	r0, [pc, #2500]	; 18744 <argp_failure@@Base+0x1284>
   17d7c:	bl	11304 <strlen@plt>
   17d80:	cmp	r6, r0
   17d84:	mov	r7, r0
   17d88:	beq	17f98 <argp_failure@@Base+0xad8>
   17d8c:	ldr	r8, [pc, #2504]	; 1875c <argp_failure@@Base+0x129c>
   17d90:	mov	r0, r8
   17d94:	bl	11304 <strlen@plt>
   17d98:	cmp	r6, r0
   17d9c:	mov	r7, r0
   17da0:	beq	17fb8 <argp_failure@@Base+0xaf8>
   17da4:	ldr	r8, [pc, #2476]	; 18758 <argp_failure@@Base+0x1298>
   17da8:	mov	r0, r8
   17dac:	bl	11304 <strlen@plt>
   17db0:	cmp	r6, r0
   17db4:	mov	r7, r0
   17db8:	beq	17fd4 <argp_failure@@Base+0xb14>
   17dbc:	ldr	r8, [pc, #2460]	; 18760 <argp_failure@@Base+0x12a0>
   17dc0:	mov	r0, r8
   17dc4:	bl	11304 <strlen@plt>
   17dc8:	cmp	r6, r0
   17dcc:	mov	r7, r0
   17dd0:	beq	17ff0 <argp_failure@@Base+0xb30>
   17dd4:	ldr	r8, [pc, #2336]	; 186fc <argp_failure@@Base+0x123c>
   17dd8:	mov	r0, r8
   17ddc:	bl	11304 <strlen@plt>
   17de0:	cmp	r0, r6
   17de4:	beq	1800c <argp_failure@@Base+0xb4c>
   17de8:	mov	r2, #0
   17dec:	str	r5, [sp, #4]
   17df0:	str	r6, [sp]
   17df4:	mov	r1, r2
   17df8:	ldr	r3, [pc, #2304]	; 18700 <argp_failure@@Base+0x1240>
   17dfc:	ldr	r0, [fp, #-104]	; 0xffffff98
   17e00:	bl	174c0 <argp_failure@@Base>
   17e04:	ldrb	r8, [r4]
   17e08:	cmp	r8, #44	; 0x2c
   17e0c:	beq	17f00 <argp_failure@@Base+0xa40>
   17e10:	mov	r5, r4
   17e14:	b	17c68 <argp_failure@@Base+0x7a8>
   17e18:	cmp	r8, #0
   17e1c:	bne	189c8 <argp_failure@@Base+0x1508>
   17e20:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17e24:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17e28:	cmp	r3, r2
   17e2c:	ble	18bac <argp_failure@@Base+0x16ec>
   17e30:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17e34:	cmp	r3, r2
   17e38:	ble	18a04 <argp_failure@@Base+0x1544>
   17e3c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   17e40:	cmp	r3, r2
   17e44:	ble	189e0 <argp_failure@@Base+0x1520>
   17e48:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17e4c:	cmp	r3, r2
   17e50:	ble	18be4 <argp_failure@@Base+0x1724>
   17e54:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17e58:	cmp	r3, r2
   17e5c:	ble	18bdc <argp_failure@@Base+0x171c>
   17e60:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17e64:	cmp	r3, r2
   17e68:	ble	18bf8 <argp_failure@@Base+0x1738>
   17e6c:	ldr	lr, [fp, #-112]	; 0xffffff90
   17e70:	ldr	r3, [pc, #2152]	; 186e0 <argp_failure@@Base+0x1220>
   17e74:	mov	r4, #1
   17e78:	mov	r5, r3
   17e7c:	str	r3, [fp, #-96]	; 0xffffffa0
   17e80:	ldm	lr!, {r0, r1, r2, r3}
   17e84:	mov	ip, r5
   17e88:	stmia	ip!, {r0, r1, r2, r3}
   17e8c:	ldm	lr!, {r0, r1, r2, r3}
   17e90:	stmia	ip!, {r0, r1, r2, r3}
   17e94:	ldm	lr, {r0, r1}
   17e98:	stm	ip, {r0, r1}
   17e9c:	str	r4, [r5, #36]	; 0x24
   17ea0:	b	1770c <argp_failure@@Base+0x24c>
   17ea4:	cmp	r8, #110	; 0x6e
   17ea8:	beq	183ec <argp_failure@@Base+0xf2c>
   17eac:	mov	sl, #1
   17eb0:	mov	r0, r9
   17eb4:	str	sl, [fp, #-108]	; 0xffffff94
   17eb8:	bl	11304 <strlen@plt>
   17ebc:	cmp	r6, r0
   17ec0:	bne	17d3c <argp_failure@@Base+0x87c>
   17ec4:	mov	r2, r6
   17ec8:	mov	r1, r9
   17ecc:	mov	r0, r5
   17ed0:	bl	11448 <strncmp@plt>
   17ed4:	cmp	r0, #0
   17ed8:	bne	17d3c <argp_failure@@Base+0x87c>
   17edc:	mov	r8, r9
   17ee0:	ldrb	r3, [r8, #15]
   17ee4:	ldrb	r8, [r4]
   17ee8:	sub	r2, fp, #36	; 0x24
   17eec:	add	r3, r2, r3
   17ef0:	ldr	r2, [fp, #-108]	; 0xffffff94
   17ef4:	cmp	r8, #44	; 0x2c
   17ef8:	str	r2, [r3, #-40]	; 0xffffffd8
   17efc:	bne	17e10 <argp_failure@@Base+0x950>
   17f00:	ldrb	r8, [r4, #1]
   17f04:	add	r4, r4, #1
   17f08:	b	17e10 <argp_failure@@Base+0x950>
   17f0c:	mov	r2, r0
   17f10:	ldr	r1, [pc, #2108]	; 18754 <argp_failure@@Base+0x1294>
   17f14:	mov	r0, r5
   17f18:	bl	11448 <strncmp@plt>
   17f1c:	cmp	r0, #0
   17f20:	bne	17d64 <argp_failure@@Base+0x8a4>
   17f24:	ldr	r8, [pc, #2088]	; 18754 <argp_failure@@Base+0x1294>
   17f28:	cmp	sl, #0
   17f2c:	beq	17ee0 <argp_failure@@Base+0xa20>
   17f30:	ldrb	r2, [r8, #14]
   17f34:	cmp	r2, #0
   17f38:	bne	17ee0 <argp_failure@@Base+0xa20>
   17f3c:	str	r5, [sp, #4]
   17f40:	str	r7, [sp]
   17f44:	ldr	r3, [pc, #1976]	; 18704 <argp_failure@@Base+0x1244>
   17f48:	mov	r1, r2
   17f4c:	ldr	r0, [fp, #-104]	; 0xffffff98
   17f50:	bl	174c0 <argp_failure@@Base>
   17f54:	b	17e04 <argp_failure@@Base+0x944>
   17f58:	mov	r2, r0
   17f5c:	ldr	r1, [pc, #1940]	; 186f8 <argp_failure@@Base+0x1238>
   17f60:	mov	r0, r5
   17f64:	bl	11448 <strncmp@plt>
   17f68:	cmp	r0, #0
   17f6c:	bne	17d50 <argp_failure@@Base+0x890>
   17f70:	ldr	r8, [pc, #1920]	; 186f8 <argp_failure@@Base+0x1238>
   17f74:	b	17f28 <argp_failure@@Base+0xa68>
   17f78:	mov	r2, r0
   17f7c:	ldr	r1, [pc, #1996]	; 18750 <argp_failure@@Base+0x1290>
   17f80:	mov	r0, r5
   17f84:	bl	11448 <strncmp@plt>
   17f88:	cmp	r0, #0
   17f8c:	bne	17d78 <argp_failure@@Base+0x8b8>
   17f90:	ldr	r8, [pc, #1976]	; 18750 <argp_failure@@Base+0x1290>
   17f94:	b	17f28 <argp_failure@@Base+0xa68>
   17f98:	mov	r2, r0
   17f9c:	ldr	r1, [pc, #1952]	; 18744 <argp_failure@@Base+0x1284>
   17fa0:	mov	r0, r5
   17fa4:	bl	11448 <strncmp@plt>
   17fa8:	cmp	r0, #0
   17fac:	bne	17d8c <argp_failure@@Base+0x8cc>
   17fb0:	ldr	r8, [pc, #1932]	; 18744 <argp_failure@@Base+0x1284>
   17fb4:	b	17f28 <argp_failure@@Base+0xa68>
   17fb8:	mov	r2, r0
   17fbc:	mov	r1, r8
   17fc0:	mov	r0, r5
   17fc4:	bl	11448 <strncmp@plt>
   17fc8:	cmp	r0, #0
   17fcc:	bne	17da4 <argp_failure@@Base+0x8e4>
   17fd0:	b	17f28 <argp_failure@@Base+0xa68>
   17fd4:	mov	r2, r0
   17fd8:	mov	r1, r8
   17fdc:	mov	r0, r5
   17fe0:	bl	11448 <strncmp@plt>
   17fe4:	cmp	r0, #0
   17fe8:	bne	17dbc <argp_failure@@Base+0x8fc>
   17fec:	b	17f28 <argp_failure@@Base+0xa68>
   17ff0:	mov	r2, r0
   17ff4:	mov	r1, r8
   17ff8:	mov	r0, r5
   17ffc:	bl	11448 <strncmp@plt>
   18000:	cmp	r0, #0
   18004:	bne	17dd4 <argp_failure@@Base+0x914>
   18008:	b	17f28 <argp_failure@@Base+0xa68>
   1800c:	mov	r2, r6
   18010:	mov	r1, r8
   18014:	mov	r0, r5
   18018:	bl	11448 <strncmp@plt>
   1801c:	cmp	r0, #0
   18020:	moveq	r7, r6
   18024:	bne	17de8 <argp_failure@@Base+0x928>
   18028:	b	17f28 <argp_failure@@Base+0xa68>
   1802c:	ldr	r3, [fp, #4]
   18030:	ldr	r1, [pc, #1744]	; 18708 <argp_failure@@Base+0x1248>
   18034:	mov	r2, r3
   18038:	mov	r0, sl
   1803c:	bl	1c720 <argp_parse@@Base+0x2d10>
   18040:	mov	r4, #1
   18044:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18048:	b	17758 <argp_failure@@Base+0x298>
   1804c:	mov	r1, #0
   18050:	ldr	r0, [fp, #-116]	; 0xffffff8c
   18054:	bl	14f64 <__assert_fail@plt+0x3af8>
   18058:	ldr	r2, [r0, #4]
   1805c:	ldr	r3, [r0]
   18060:	cmp	r2, #0
   18064:	str	r0, [fp, #-108]	; 0xffffff94
   18068:	str	r2, [fp, #-120]	; 0xffffff88
   1806c:	str	r3, [fp, #-112]	; 0xffffff90
   18070:	sub	r6, r2, #1
   18074:	beq	1773c <argp_failure@@Base+0x27c>
   18078:	ldr	r5, [pc, #1676]	; 1870c <argp_failure@@Base+0x124c>
   1807c:	mov	r8, r6
   18080:	mov	r7, r3
   18084:	ldm	r7, {r4, r9}
   18088:	cmp	r9, #0
   1808c:	sub	r9, r9, #1
   18090:	beq	180d0 <argp_failure@@Base+0xc10>
   18094:	add	r4, r4, #24
   18098:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1809c:	mov	r1, r5
   180a0:	subs	r0, r3, #0
   180a4:	sub	r9, r9, #1
   180a8:	beq	180c4 <argp_failure@@Base+0xc04>
   180ac:	ldr	r3, [r4, #-12]
   180b0:	tst	r3, #2
   180b4:	bne	180c4 <argp_failure@@Base+0xc04>
   180b8:	bl	11124 <strcmp@plt>
   180bc:	cmp	r0, #0
   180c0:	beq	18864 <argp_failure@@Base+0x13a4>
   180c4:	cmn	r9, #1
   180c8:	add	r4, r4, #24
   180cc:	bne	18098 <argp_failure@@Base+0xbd8>
   180d0:	sub	r8, r8, #1
   180d4:	cmn	r8, #1
   180d8:	add	r7, r7, #28
   180dc:	bne	18084 <argp_failure@@Base+0xbc4>
   180e0:	ldr	r7, [fp, #-112]	; 0xffffff90
   180e4:	ldr	r9, [pc, #1572]	; 18710 <argp_failure@@Base+0x1250>
   180e8:	ldm	r7, {r4, r5}
   180ec:	cmp	r5, #0
   180f0:	sub	r5, r5, #1
   180f4:	beq	18134 <argp_failure@@Base+0xc74>
   180f8:	add	r4, r4, #24
   180fc:	ldr	r3, [r4, #-24]	; 0xffffffe8
   18100:	mov	r1, r9
   18104:	subs	r0, r3, #0
   18108:	sub	r5, r5, #1
   1810c:	beq	18128 <argp_failure@@Base+0xc68>
   18110:	ldr	r3, [r4, #-12]
   18114:	tst	r3, #2
   18118:	bne	18128 <argp_failure@@Base+0xc68>
   1811c:	bl	11124 <strcmp@plt>
   18120:	cmp	r0, #0
   18124:	beq	1881c <argp_failure@@Base+0x135c>
   18128:	cmn	r5, #1
   1812c:	add	r4, r4, #24
   18130:	bne	180fc <argp_failure@@Base+0xc3c>
   18134:	cmp	r6, #0
   18138:	add	r7, r7, #28
   1813c:	sub	r6, r6, #1
   18140:	bne	180e8 <argp_failure@@Base+0xc28>
   18144:	ldr	r1, [fp, #-120]	; 0xffffff88
   18148:	b	18834 <argp_failure@@Base+0x1374>
   1814c:	mov	r2, #1
   18150:	mov	r3, #0
   18154:	stm	sp, {r2, sl}
   18158:	ldr	r1, [fp, #-104]	; 0xffffff98
   1815c:	mov	r2, r3
   18160:	ldr	r0, [fp, #-116]	; 0xffffff8c
   18164:	bl	149b8 <__assert_fail@plt+0x354c>
   18168:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1816c:	orr	r4, r4, r0
   18170:	b	17750 <argp_failure@@Base+0x290>
   18174:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18178:	mov	r4, #1
   1817c:	ldr	r8, [pc, #1424]	; 18714 <argp_failure@@Base+0x1254>
   18180:	ldr	r1, [r3, #16]
   18184:	ldr	r0, [r3, #8]
   18188:	bl	15964 <__assert_fail@plt+0x44f8>
   1818c:	mov	r1, #0
   18190:	mov	r6, r4
   18194:	add	r3, r0, #14
   18198:	bic	r3, r3, #7
   1819c:	sub	sp, sp, r3
   181a0:	add	r7, sp, #8
   181a4:	mov	r2, r0
   181a8:	mov	r0, r7
   181ac:	bl	11358 <memset@plt>
   181b0:	sub	r3, fp, #76	; 0x4c
   181b4:	str	r3, [fp, #-112]	; 0xffffff90
   181b8:	str	r7, [fp, #-120]	; 0xffffff88
   181bc:	ldr	r5, [fp, #-96]	; 0xffffffa0
   181c0:	b	182e0 <argp_failure@@Base+0xe20>
   181c4:	cmp	r4, #0
   181c8:	ldr	r3, [fp, #-120]	; 0xffffff88
   181cc:	ldr	r7, [sl, #12]
   181d0:	ldrne	r2, [pc, #1344]	; 18718 <argp_failure@@Base+0x1258>
   181d4:	str	r9, [sl, #12]
   181d8:	ldreq	r2, [pc, #1340]	; 1871c <argp_failure@@Base+0x125c>
   181dc:	str	r3, [fp, #-76]	; 0xffffffb4
   181e0:	mov	r1, r8
   181e4:	ldr	r3, [fp, #4]
   181e8:	mov	r0, sl
   181ec:	bl	1c720 <argp_parse@@Base+0x2d10>
   181f0:	ldr	r3, [sl, #28]
   181f4:	ldr	r1, [sl, #24]
   181f8:	ldr	r2, [sl, #16]
   181fc:	sub	r3, r3, r1
   18200:	cmp	r3, r2
   18204:	ldr	r9, [r5, #28]
   18208:	bhi	18358 <argp_failure@@Base+0xe98>
   1820c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18210:	ldr	r4, [sl, #4]
   18214:	tst	r3, #2
   18218:	str	r9, [sl, #4]
   1821c:	beq	18364 <argp_failure@@Base+0xea4>
   18220:	ldr	r3, [fp, #-108]	; 0xffffff94
   18224:	ldr	r3, [r3, #4]
   18228:	cmp	r3, #0
   1822c:	beq	1827c <argp_failure@@Base+0xdbc>
   18230:	ldr	ip, [sl, #28]
   18234:	ldr	r2, [sl, #32]
   18238:	add	r3, ip, #12
   1823c:	cmp	r2, r3
   18240:	bcs	1825c <argp_failure@@Base+0xd9c>
   18244:	mov	r1, #12
   18248:	mov	r0, sl
   1824c:	bl	1c620 <argp_parse@@Base+0x2c10>
   18250:	cmp	r0, #0
   18254:	beq	1827c <argp_failure@@Base+0xdbc>
   18258:	ldr	ip, [sl, #28]
   1825c:	ldr	r3, [pc, #1212]	; 18720 <argp_failure@@Base+0x1260>
   18260:	ldm	r3!, {r0, r1, r2}
   18264:	str	r0, [ip]
   18268:	str	r1, [ip, #4]
   1826c:	str	r2, [ip, #8]
   18270:	ldr	r3, [sl, #28]
   18274:	add	r3, r3, #12
   18278:	str	r3, [sl, #28]
   1827c:	mov	r3, r6
   18280:	ldr	r1, [fp, #-104]	; 0xffffff98
   18284:	str	sl, [sp]
   18288:	ldr	r2, [fp, #-112]	; 0xffffff90
   1828c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   18290:	bl	15684 <__assert_fail@plt+0x4218>
   18294:	ldr	r3, [sl, #28]
   18298:	ldr	r1, [sl, #24]
   1829c:	sub	r1, r3, r1
   182a0:	mov	r9, r0
   182a4:	ldr	r0, [sl, #16]
   182a8:	cmp	r1, r0
   182ac:	strls	r7, [sl, #12]
   182b0:	bhi	18324 <argp_failure@@Base+0xe64>
   182b4:	ldr	r1, [sl, #32]
   182b8:	str	r4, [sl, #4]
   182bc:	cmp	r1, r3
   182c0:	bls	18308 <argp_failure@@Base+0xe48>
   182c4:	add	r1, r3, #1
   182c8:	mov	r2, #10
   182cc:	str	r1, [sl, #28]
   182d0:	strb	r2, [r3]
   182d4:	cmp	r9, #0
   182d8:	mov	r4, #0
   182dc:	beq	18380 <argp_failure@@Base+0xec0>
   182e0:	ldr	r3, [sl, #28]
   182e4:	ldr	r1, [sl, #24]
   182e8:	ldr	r2, [sl, #16]
   182ec:	sub	r3, r3, r1
   182f0:	cmp	r3, r2
   182f4:	ldr	r9, [r5, #28]
   182f8:	bls	181c4 <argp_failure@@Base+0xd04>
   182fc:	mov	r0, sl
   18300:	bl	1c074 <argp_parse@@Base+0x2664>
   18304:	b	181c4 <argp_failure@@Base+0xd04>
   18308:	mov	r1, r6
   1830c:	mov	r0, sl
   18310:	bl	1c620 <argp_parse@@Base+0x2c10>
   18314:	cmp	r0, #0
   18318:	beq	182d4 <argp_failure@@Base+0xe14>
   1831c:	ldr	r3, [sl, #28]
   18320:	b	182c4 <argp_failure@@Base+0xe04>
   18324:	mov	r0, sl
   18328:	bl	1c074 <argp_parse@@Base+0x2664>
   1832c:	ldr	r3, [sl, #28]
   18330:	ldr	r1, [sl, #24]
   18334:	ldr	r0, [sl, #16]
   18338:	sub	r1, r3, r1
   1833c:	cmp	r1, r0
   18340:	str	r7, [sl, #12]
   18344:	bls	182b4 <argp_failure@@Base+0xdf4>
   18348:	mov	r0, sl
   1834c:	bl	1c074 <argp_parse@@Base+0x2664>
   18350:	ldr	r3, [sl, #28]
   18354:	b	182b4 <argp_failure@@Base+0xdf4>
   18358:	mov	r0, sl
   1835c:	bl	1c074 <argp_parse@@Base+0x2664>
   18360:	b	1820c <argp_failure@@Base+0xd4c>
   18364:	mov	r1, sl
   18368:	ldr	r0, [fp, #-108]	; 0xffffff94
   1836c:	bl	15cb0 <__assert_fail@plt+0x4844>
   18370:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18374:	orr	r3, r3, #2
   18378:	str	r3, [fp, #-100]	; 0xffffff9c
   1837c:	b	1827c <argp_failure@@Base+0xdbc>
   18380:	mov	r4, #1
   18384:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18388:	b	17748 <argp_failure@@Base+0x288>
   1838c:	mov	r2, #10
   18390:	mov	r1, #0
   18394:	mov	r0, r4
   18398:	bl	11130 <strtol@plt>
   1839c:	ldrb	r3, [r4]
   183a0:	ldr	r2, [r7]
   183a4:	lsl	r3, r3, #1
   183a8:	ldrh	r3, [r2, r3]
   183ac:	tst	r3, #2048	; 0x800
   183b0:	str	r0, [fp, #-108]	; 0xffffff94
   183b4:	beq	183dc <argp_failure@@Base+0xf1c>
   183b8:	ldrb	r3, [r4, #1]!
   183bc:	lsl	r3, r3, #1
   183c0:	ldrh	r3, [r2, r3]
   183c4:	tst	r3, #2048	; 0x800
   183c8:	bne	183b8 <argp_failure@@Base+0xef8>
   183cc:	b	183dc <argp_failure@@Base+0xf1c>
   183d0:	ldrb	r3, [r4, #1]!
   183d4:	lsl	r3, r3, #1
   183d8:	ldrh	r3, [r2, r3]
   183dc:	tst	r3, #8192	; 0x2000
   183e0:	bne	183d0 <argp_failure@@Base+0xf10>
   183e4:	ldr	sl, [fp, #-120]	; 0xffffff88
   183e8:	b	17d2c <argp_failure@@Base+0x86c>
   183ec:	ldrb	r3, [r5, #1]
   183f0:	cmp	r3, #111	; 0x6f
   183f4:	bne	17eac <argp_failure@@Base+0x9ec>
   183f8:	ldrb	r3, [r5, #2]
   183fc:	cmp	r3, #45	; 0x2d
   18400:	bne	17eac <argp_failure@@Base+0x9ec>
   18404:	ldr	r3, [fp, #-120]	; 0xffffff88
   18408:	add	r5, r5, #3
   1840c:	sub	r6, r6, #3
   18410:	str	r3, [fp, #-108]	; 0xffffff94
   18414:	mov	sl, #1
   18418:	b	17d2c <argp_failure@@Base+0x86c>
   1841c:	ldrb	r3, [r4, #1]
   18420:	add	r4, r4, #1
   18424:	lsl	r3, r3, #1
   18428:	ldrh	r1, [r0, r3]
   1842c:	tst	r1, #8192	; 0x2000
   18430:	beq	17d18 <argp_failure@@Base+0x858>
   18434:	ldrb	r3, [r4, #1]!
   18438:	lsl	r3, r3, #1
   1843c:	ldrh	r1, [r0, r3]
   18440:	tst	r1, #8192	; 0x2000
   18444:	bne	18434 <argp_failure@@Base+0xf74>
   18448:	b	17d18 <argp_failure@@Base+0x858>
   1844c:	cmp	r3, r2
   18450:	ldr	r3, [fp, #-96]	; 0xffffffa0
   18454:	ldr	r4, [r3, #12]
   18458:	bhi	187cc <argp_failure@@Base+0x130c>
   1845c:	str	r4, [sl, #12]
   18460:	ldr	r5, [r8, #4]
   18464:	cmp	r5, #0
   18468:	beq	17a98 <argp_failure@@Base+0x5d8>
   1846c:	add	r4, r6, #24
   18470:	ldr	r7, [fp, #-96]	; 0xffffffa0
   18474:	b	18484 <argp_failure@@Base+0xfc4>
   18478:	subs	r5, r5, #1
   1847c:	add	r4, r4, #24
   18480:	beq	17a98 <argp_failure@@Base+0x5d8>
   18484:	ldr	r3, [r4, #-24]	; 0xffffffe8
   18488:	cmp	r3, #0
   1848c:	beq	18478 <argp_failure@@Base+0xfb8>
   18490:	ldr	r3, [r4, #-12]
   18494:	tst	r3, #2
   18498:	bne	18478 <argp_failure@@Base+0xfb8>
   1849c:	sub	r1, fp, #76	; 0x4c
   184a0:	ldr	r0, [r7, #12]
   184a4:	bl	163e0 <__assert_fail@plt+0x4f74>
   184a8:	ldr	r2, [r4, #-24]	; 0xffffffe8
   184ac:	ldr	r1, [pc, #624]	; 18724 <argp_failure@@Base+0x1264>
   184b0:	mov	r0, sl
   184b4:	bl	1c720 <argp_parse@@Base+0x2d10>
   184b8:	ldr	r3, [r6, #8]
   184bc:	ldr	r1, [pc, #612]	; 18728 <argp_failure@@Base+0x1268>
   184c0:	subs	r2, r3, #0
   184c4:	mov	r0, sl
   184c8:	beq	18478 <argp_failure@@Base+0xfb8>
   184cc:	ldr	ip, [r6, #12]
   184d0:	tst	ip, #1
   184d4:	ldrne	r1, [pc, #592]	; 1872c <argp_failure@@Base+0x126c>
   184d8:	bl	1c720 <argp_parse@@Base+0x2d10>
   184dc:	b	18478 <argp_failure@@Base+0xfb8>
   184e0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   184e4:	sub	r1, fp, #76	; 0x4c
   184e8:	ldr	r0, [r3, #8]
   184ec:	bl	163e0 <__assert_fail@plt+0x4f74>
   184f0:	ldr	r2, [sl, #28]
   184f4:	ldr	r1, [sl, #32]
   184f8:	cmp	r2, r1
   184fc:	bcs	18800 <argp_failure@@Base+0x1340>
   18500:	add	r1, r2, #1
   18504:	mov	r3, #45	; 0x2d
   18508:	str	r1, [sl, #28]
   1850c:	strb	r3, [r2]
   18510:	ldr	r2, [sl, #28]
   18514:	ldr	r1, [sl, #32]
   18518:	ldrb	r7, [r8]
   1851c:	cmp	r2, r1
   18520:	bcs	187e4 <argp_failure@@Base+0x1324>
   18524:	add	r1, r2, #1
   18528:	str	r1, [sl, #28]
   1852c:	strb	r7, [r2]
   18530:	ldr	r3, [fp, #-132]	; 0xffffff7c
   18534:	cmp	r3, #0
   18538:	beq	18798 <argp_failure@@Base+0x12d8>
   1853c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   18540:	ldr	r2, [r3]
   18544:	cmp	r2, #0
   18548:	bne	18798 <argp_failure@@Base+0x12d8>
   1854c:	ldr	r2, [r6, #8]
   18550:	cmp	r2, #0
   18554:	movne	r3, #1
   18558:	strne	r3, [fp, #-80]	; 0xffffffb0
   1855c:	b	179a0 <argp_failure@@Base+0x4e0>
   18560:	ldr	r5, [r8, #20]
   18564:	ldr	r9, [r6, #16]
   18568:	cmp	r5, #0
   1856c:	beq	18888 <argp_failure@@Base+0x13c8>
   18570:	ldr	r3, [r5, #20]
   18574:	cmp	r3, #0
   18578:	beq	18888 <argp_failure@@Base+0x13c8>
   1857c:	ldr	r1, [fp, #-104]	; 0xffffff98
   18580:	mov	r0, r5
   18584:	ldr	r4, [r6, #4]
   18588:	bl	1a830 <argp_parse@@Base+0xe20>
   1858c:	ldr	r3, [r5, #20]
   18590:	mov	r1, r9
   18594:	mov	r2, r0
   18598:	mov	r0, r4
   1859c:	blx	r3
   185a0:	mov	r4, r0
   185a4:	cmp	r4, #0
   185a8:	beq	1865c <argp_failure@@Base+0x119c>
   185ac:	ldrb	r3, [r4]
   185b0:	cmp	r3, #0
   185b4:	beq	1864c <argp_failure@@Base+0x118c>
   185b8:	ldr	r3, [sl, #28]
   185bc:	ldr	r2, [sl, #24]
   185c0:	ldr	r1, [sl, #16]
   185c4:	sub	r2, r3, r2
   185c8:	cmp	r2, r1
   185cc:	bhi	18954 <argp_failure@@Base+0x1494>
   185d0:	ldr	r6, [sl, #20]
   185d4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   185d8:	bic	r6, r6, r6, asr #31
   185dc:	ldr	r5, [r2, #20]
   185e0:	mov	r7, r5
   185e4:	str	r5, [sl, #4]
   185e8:	add	r2, r5, #3
   185ec:	cmp	r2, r6
   185f0:	str	r7, [sl, #12]
   185f4:	bcs	188c8 <argp_failure@@Base+0x1408>
   185f8:	ldr	r2, [sl, #32]
   185fc:	cmp	r2, r3
   18600:	bls	18ad0 <argp_failure@@Base+0x1610>
   18604:	add	r1, r3, #1
   18608:	mov	r2, #10
   1860c:	str	r1, [sl, #28]
   18610:	strb	r2, [r3]
   18614:	mov	r0, r4
   18618:	bl	11304 <strlen@plt>
   1861c:	subs	r5, r0, #0
   18620:	beq	1864c <argp_failure@@Base+0x118c>
   18624:	ldr	r0, [sl, #28]
   18628:	ldr	r2, [sl, #32]
   1862c:	add	r3, r0, r5
   18630:	cmp	r2, r3
   18634:	bcs	18938 <argp_failure@@Base+0x1478>
   18638:	mov	r1, r5
   1863c:	mov	r0, sl
   18640:	bl	1c620 <argp_parse@@Base+0x2c10>
   18644:	cmp	r0, #0
   18648:	bne	18934 <argp_failure@@Base+0x1474>
   1864c:	cmp	r9, r4
   18650:	beq	1865c <argp_failure@@Base+0x119c>
   18654:	mov	r0, r4
   18658:	bl	1a98c <argp_parse@@Base+0xf7c>
   1865c:	ldr	r3, [sl, #28]
   18660:	ldr	r2, [sl, #24]
   18664:	ldr	r1, [sl, #16]
   18668:	sub	r2, r3, r2
   1866c:	cmp	r2, r1
   18670:	bhi	188ac <argp_failure@@Base+0x13ec>
   18674:	ldr	r1, [sl, #32]
   18678:	mov	r2, #0
   1867c:	cmp	r1, r3
   18680:	str	r2, [sl, #4]
   18684:	bls	18890 <argp_failure@@Base+0x13d0>
   18688:	add	r1, r3, #1
   1868c:	mov	r2, #10
   18690:	str	r1, [sl, #28]
   18694:	strb	r2, [r3]
   18698:	str	r8, [fp, #-88]	; 0xffffffa8
   1869c:	b	17b04 <argp_failure@@Base+0x644>
   186a0:	mov	r0, sl
   186a4:	bl	1c074 <argp_parse@@Base+0x2664>
   186a8:	b	17ab0 <argp_failure@@Base+0x5f0>
   186ac:	mov	r0, sl
   186b0:	bl	1c074 <argp_parse@@Base+0x2664>
   186b4:	ldr	r2, [fp, #-120]	; 0xffffff88
   186b8:	ldr	r3, [sl, #28]
   186bc:	ldr	r1, [sl, #24]
   186c0:	str	r2, [sl, #4]
   186c4:	ldr	r2, [sl, #16]
   186c8:	sub	r3, r3, r1
   186cc:	cmp	r3, r2
   186d0:	bls	17b24 <argp_failure@@Base+0x664>
   186d4:	mov	r0, sl
   186d8:	bl	1c074 <argp_parse@@Base+0x2664>
   186dc:	b	17b24 <argp_failure@@Base+0x664>
   186e0:	andeq	r1, r3, r4, ror #11
   186e4:	ldrdeq	r1, [r3], -ip
   186e8:	andeq	pc, r1, r4, lsl r8	; <UNPREDICTABLE>
   186ec:	andeq	r0, r0, #5
   186f0:	andeq	pc, r1, r0, asr #13
   186f4:	muleq	r1, r0, r4
   186f8:	andeq	pc, r1, r0, lsr #9
   186fc:	andeq	pc, r1, r0, lsl r5	; <UNPREDICTABLE>
   18700:	andeq	pc, r1, r0, lsl #14
   18704:	ldrdeq	pc, [r1], -r0
   18708:			; <UNDEFINED> instruction: 0x0001f7bc
   1870c:	andeq	pc, r1, r4, lsl #15
   18710:	andeq	pc, r1, ip, lsl #15
   18714:	muleq	r1, ip, r7
   18718:	muleq	r1, r4, r7
   1871c:	andeq	pc, r1, r4, lsr #15
   18720:	andeq	pc, r1, ip, lsr #15
   18724:	strdeq	pc, [r1], -ip
   18728:	andeq	pc, r1, ip, lsl #16
   1872c:	andeq	pc, r1, r4, lsl #16
   18730:	strdeq	pc, [r1], -r4
   18734:	andeq	pc, r1, r8, ror r9	; <UNPREDICTABLE>
   18738:	andeq	r6, r1, r0, lsl sl
   1873c:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   18740:	andeq	pc, r1, r8, lsr #14
   18744:	ldrdeq	pc, [r1], -r0
   18748:	andeq	pc, r1, ip, ror r7	; <UNPREDICTABLE>
   1874c:	andeq	pc, r1, r8, asr #14
   18750:	andeq	pc, r1, r0, asr #9
   18754:			; <UNDEFINED> instruction: 0x0001f4b0
   18758:	strdeq	pc, [r1], -r0
   1875c:	andeq	pc, r1, r0, ror #9
   18760:	andeq	pc, r1, r0, lsl #10
   18764:	andeq	pc, r1, ip, asr #12
   18768:	mov	r0, sl
   1876c:	bl	1c074 <argp_parse@@Base+0x2664>
   18770:	ldr	r0, [r6, #12]
   18774:	and	r0, r0, #8
   18778:	b	1792c <argp_failure@@Base+0x46c>
   1877c:	mov	r0, sl
   18780:	bl	1c074 <argp_parse@@Base+0x2664>
   18784:	ldr	ip, [sl, #28]
   18788:	ldr	r2, [sl, #24]
   1878c:	ldr	lr, [sl, #16]
   18790:	sub	ip, ip, r2
   18794:	b	1789c <argp_failure@@Base+0x3dc>
   18798:	ldr	r2, [r6, #8]
   1879c:	cmp	r2, #0
   187a0:	beq	179a0 <argp_failure@@Base+0x4e0>
   187a4:	ldr	r1, [r6, #12]
   187a8:	mov	r0, sl
   187ac:	tst	r1, #1
   187b0:	ldrne	r1, [pc, #-136]	; 18730 <argp_failure@@Base+0x1270>
   187b4:	ldreq	r1, [pc, #-136]	; 18734 <argp_failure@@Base+0x1274>
   187b8:	bl	1c720 <argp_parse@@Base+0x2d10>
   187bc:	b	179a0 <argp_failure@@Base+0x4e0>
   187c0:	mov	r3, #1
   187c4:	str	r3, [fp, #-132]	; 0xffffff7c
   187c8:	b	1791c <argp_failure@@Base+0x45c>
   187cc:	mov	r0, sl
   187d0:	bl	1c074 <argp_parse@@Base+0x2664>
   187d4:	b	1845c <argp_failure@@Base+0xf9c>
   187d8:	mov	r0, sl
   187dc:	bl	1c074 <argp_parse@@Base+0x2664>
   187e0:	b	179e4 <argp_failure@@Base+0x524>
   187e4:	mov	r1, #1
   187e8:	mov	r0, sl
   187ec:	bl	1c620 <argp_parse@@Base+0x2c10>
   187f0:	cmp	r0, #0
   187f4:	beq	18530 <argp_failure@@Base+0x1070>
   187f8:	ldr	r2, [sl, #28]
   187fc:	b	18524 <argp_failure@@Base+0x1064>
   18800:	mov	r1, #1
   18804:	mov	r0, sl
   18808:	bl	1c620 <argp_parse@@Base+0x2c10>
   1880c:	cmp	r0, #0
   18810:	beq	18510 <argp_failure@@Base+0x1050>
   18814:	ldr	r2, [sl, #28]
   18818:	b	18500 <argp_failure@@Base+0x1040>
   1881c:	mvn	r3, #0
   18820:	str	r3, [r7, #12]
   18824:	ldr	r3, [fp, #-108]	; 0xffffff94
   18828:	ldr	r1, [r3, #4]
   1882c:	cmp	r1, #0
   18830:	beq	1773c <argp_failure@@Base+0x27c>
   18834:	ldr	r2, [fp, #-112]	; 0xffffff90
   18838:	mov	r3, #0
   1883c:	str	r3, [r2, #24]
   18840:	add	r3, r3, #1
   18844:	cmp	r3, r1
   18848:	add	r2, r2, #28
   1884c:	bcc	1883c <argp_failure@@Base+0x137c>
   18850:	ldr	r0, [fp, #-112]	; 0xffffff90
   18854:	ldr	r3, [pc, #-292]	; 18738 <argp_failure@@Base+0x1278>
   18858:	mov	r2, #28
   1885c:	bl	11418 <qsort@plt>
   18860:	b	1773c <argp_failure@@Base+0x27c>
   18864:	mvn	r3, #0
   18868:	str	r3, [r7, #12]
   1886c:	ldr	r3, [fp, #-108]	; 0xffffff94
   18870:	ldr	r3, [r3, #4]
   18874:	cmp	r3, #0
   18878:	str	r3, [fp, #-120]	; 0xffffff88
   1887c:	sub	r6, r3, #1
   18880:	bne	180e0 <argp_failure@@Base+0xc20>
   18884:	b	1773c <argp_failure@@Base+0x27c>
   18888:	mov	r4, r9
   1888c:	b	185a4 <argp_failure@@Base+0x10e4>
   18890:	mov	r1, #1
   18894:	mov	r0, sl
   18898:	bl	1c620 <argp_parse@@Base+0x2c10>
   1889c:	cmp	r0, #0
   188a0:	beq	18698 <argp_failure@@Base+0x11d8>
   188a4:	ldr	r3, [sl, #28]
   188a8:	b	18688 <argp_failure@@Base+0x11c8>
   188ac:	mov	r0, sl
   188b0:	bl	1c074 <argp_parse@@Base+0x2664>
   188b4:	ldr	r3, [sl, #28]
   188b8:	b	18674 <argp_failure@@Base+0x11b4>
   188bc:	mov	r3, r8
   188c0:	mov	r4, r5
   188c4:	b	17d04 <argp_failure@@Base+0x844>
   188c8:	cmp	r5, r6
   188cc:	bhi	18a48 <argp_failure@@Base+0x1588>
   188d0:	ldr	r1, [sl, #32]
   188d4:	add	r2, r3, #3
   188d8:	cmp	r1, r2
   188dc:	bcs	188f8 <argp_failure@@Base+0x1438>
   188e0:	mov	r1, #3
   188e4:	mov	r0, sl
   188e8:	bl	1c620 <argp_parse@@Base+0x2c10>
   188ec:	cmp	r0, #0
   188f0:	beq	18614 <argp_failure@@Base+0x1154>
   188f4:	ldr	r3, [sl, #28]
   188f8:	ldr	r2, [pc, #-452]	; 1873c <argp_failure@@Base+0x127c>
   188fc:	ldrh	r1, [r2]
   18900:	ldrb	r2, [r2, #2]
   18904:	strh	r1, [r3]
   18908:	strb	r2, [r3, #2]
   1890c:	ldr	r3, [sl, #28]
   18910:	add	r3, r3, #3
   18914:	str	r3, [sl, #28]
   18918:	b	18614 <argp_failure@@Base+0x1154>
   1891c:	ldr	r3, [fp, #-108]	; 0xffffff94
   18920:	ldr	r8, [r3]
   18924:	str	r4, [fp, #-88]	; 0xffffffa8
   18928:	str	r4, [fp, #-84]	; 0xffffffac
   1892c:	str	r4, [fp, #-80]	; 0xffffffb0
   18930:	b	1787c <argp_failure@@Base+0x3bc>
   18934:	ldr	r0, [sl, #28]
   18938:	mov	r2, r5
   1893c:	mov	r1, r4
   18940:	bl	111b4 <memcpy@plt>
   18944:	ldr	r3, [sl, #28]
   18948:	add	r5, r3, r5
   1894c:	str	r5, [sl, #28]
   18950:	b	1864c <argp_failure@@Base+0x118c>
   18954:	mov	r0, sl
   18958:	bl	1c074 <argp_parse@@Base+0x2664>
   1895c:	ldr	r3, [sl, #28]
   18960:	ldr	r2, [sl, #24]
   18964:	ldr	r1, [sl, #16]
   18968:	ldr	r6, [sl, #20]
   1896c:	ldr	r7, [fp, #-96]	; 0xffffffa0
   18970:	sub	r2, r3, r2
   18974:	cmp	r2, r1
   18978:	bic	r6, r6, r6, asr #31
   1897c:	ldr	r5, [r7, #20]
   18980:	bls	185e0 <argp_failure@@Base+0x1120>
   18984:	mov	r0, sl
   18988:	bl	1c074 <argp_parse@@Base+0x2664>
   1898c:	ldr	r3, [sl, #28]
   18990:	ldr	r2, [sl, #24]
   18994:	ldr	r1, [sl, #16]
   18998:	sub	r2, r3, r2
   1899c:	str	r5, [sl, #4]
   189a0:	mov	r5, r7
   189a4:	ldr	r7, [r7, #20]
   189a8:	cmp	r2, r1
   189ac:	movls	r5, r7
   189b0:	bls	185e8 <argp_failure@@Base+0x1128>
   189b4:	mov	r0, sl
   189b8:	bl	1c074 <argp_parse@@Base+0x2664>
   189bc:	ldr	r5, [r5, #20]
   189c0:	ldr	r3, [sl, #28]
   189c4:	b	185e8 <argp_failure@@Base+0x1128>
   189c8:	str	r5, [sp]
   189cc:	ldr	r3, [pc, #-660]	; 18740 <argp_failure@@Base+0x1280>
   189d0:	mov	r1, r2
   189d4:	ldr	r0, [fp, #-104]	; 0xffffff98
   189d8:	bl	174c0 <argp_failure@@Base>
   189dc:	b	17e20 <argp_failure@@Base+0x960>
   189e0:	ldr	r3, [pc, #-676]	; 18744 <argp_failure@@Base+0x1284>
   189e4:	ldr	r1, [pc, #-676]	; 18748 <argp_failure@@Base+0x1288>
   189e8:	mov	r2, #0
   189ec:	ldr	r0, [fp, #-104]	; 0xffffff98
   189f0:	stm	sp, {r1, r3}
   189f4:	mov	r1, r2
   189f8:	ldr	r3, [pc, #-692]	; 1874c <argp_failure@@Base+0x128c>
   189fc:	bl	174c0 <argp_failure@@Base>
   18a00:	b	1770c <argp_failure@@Base+0x24c>
   18a04:	ldr	r3, [pc, #-700]	; 18750 <argp_failure@@Base+0x1290>
   18a08:	b	189e4 <argp_failure@@Base+0x1524>
   18a0c:	mov	r1, #1
   18a10:	mov	r0, sl
   18a14:	bl	1c620 <argp_parse@@Base+0x2c10>
   18a18:	cmp	r0, #0
   18a1c:	beq	177ac <argp_failure@@Base+0x2ec>
   18a20:	ldr	r3, [sl, #28]
   18a24:	b	1779c <argp_failure@@Base+0x2dc>
   18a28:	ldr	r0, [r6, #16]
   18a2c:	sub	r2, fp, #76	; 0x4c
   18a30:	ldr	r1, [r8, #20]
   18a34:	bl	16120 <__assert_fail@plt+0x4cb4>
   18a38:	b	18698 <argp_failure@@Base+0x11d8>
   18a3c:	ldr	r0, [fp, #-136]	; 0xffffff78
   18a40:	bl	11244 <funlockfile@plt>
   18a44:	b	1780c <argp_failure@@Base+0x34c>
   18a48:	ldr	r2, [sl, #24]
   18a4c:	ldr	r1, [sl, #16]
   18a50:	sub	r3, r3, r2
   18a54:	cmp	r3, r1
   18a58:	bhi	18bd0 <argp_failure@@Base+0x1710>
   18a5c:	ldr	r3, [sl, #20]
   18a60:	mov	r6, #32
   18a64:	cmp	r3, #0
   18a68:	subge	r5, r5, r3
   18a6c:	mov	r7, #1
   18a70:	cmp	r5, #0
   18a74:	sub	r5, r5, #1
   18a78:	ble	18614 <argp_failure@@Base+0x1154>
   18a7c:	ldr	r3, [sl, #28]
   18a80:	ldr	r2, [sl, #32]
   18a84:	cmp	r3, r2
   18a88:	bcs	18ab4 <argp_failure@@Base+0x15f4>
   18a8c:	add	r2, r3, #1
   18a90:	cmp	r5, #0
   18a94:	str	r2, [sl, #28]
   18a98:	sub	r5, r5, #1
   18a9c:	strb	r6, [r3]
   18aa0:	ble	18614 <argp_failure@@Base+0x1154>
   18aa4:	ldr	r3, [sl, #28]
   18aa8:	ldr	r2, [sl, #32]
   18aac:	cmp	r3, r2
   18ab0:	bcc	18a8c <argp_failure@@Base+0x15cc>
   18ab4:	mov	r1, r7
   18ab8:	mov	r0, sl
   18abc:	bl	1c620 <argp_parse@@Base+0x2c10>
   18ac0:	cmp	r0, #0
   18ac4:	beq	18a70 <argp_failure@@Base+0x15b0>
   18ac8:	ldr	r3, [sl, #28]
   18acc:	b	18a8c <argp_failure@@Base+0x15cc>
   18ad0:	mov	r1, #1
   18ad4:	mov	r0, sl
   18ad8:	bl	1c620 <argp_parse@@Base+0x2c10>
   18adc:	cmp	r0, #0
   18ae0:	beq	18614 <argp_failure@@Base+0x1154>
   18ae4:	ldr	r3, [sl, #28]
   18ae8:	b	18604 <argp_failure@@Base+0x1144>
   18aec:	ldr	r4, [pc, #-912]	; 18764 <argp_failure@@Base+0x12a4>
   18af0:	ldr	r9, [fp, #-112]	; 0xffffff90
   18af4:	ldr	r3, [sl, #28]
   18af8:	ldr	r2, [sl, #32]
   18afc:	cmp	r3, r2
   18b00:	bcs	18bb4 <argp_failure@@Base+0x16f4>
   18b04:	add	r1, r3, #1
   18b08:	mov	r2, #10
   18b0c:	str	r1, [sl, #28]
   18b10:	strb	r2, [r3]
   18b14:	mov	r0, r4
   18b18:	bl	11304 <strlen@plt>
   18b1c:	subs	r6, r0, #0
   18b20:	beq	18ba4 <argp_failure@@Base+0x16e4>
   18b24:	ldr	r0, [sl, #28]
   18b28:	ldr	r2, [sl, #32]
   18b2c:	add	r3, r0, r6
   18b30:	cmp	r2, r3
   18b34:	bcs	18b50 <argp_failure@@Base+0x1690>
   18b38:	mov	r1, r6
   18b3c:	mov	r0, sl
   18b40:	bl	1c620 <argp_parse@@Base+0x2c10>
   18b44:	cmp	r0, #0
   18b48:	beq	18ba4 <argp_failure@@Base+0x16e4>
   18b4c:	ldr	r0, [sl, #28]
   18b50:	mov	r2, r6
   18b54:	mov	r1, r4
   18b58:	bl	111b4 <memcpy@plt>
   18b5c:	ldr	r3, [sl, #28]
   18b60:	add	r3, r3, r6
   18b64:	str	r3, [sl, #28]
   18b68:	ldr	r2, [sl, #32]
   18b6c:	cmp	r2, r3
   18b70:	bls	18c00 <argp_failure@@Base+0x1740>
   18b74:	add	r1, r3, #1
   18b78:	mov	r2, #10
   18b7c:	str	r1, [sl, #28]
   18b80:	strb	r2, [r3]
   18b84:	b	17bbc <argp_failure@@Base+0x6fc>
   18b88:	mov	r1, #1
   18b8c:	mov	r0, sl
   18b90:	bl	1c620 <argp_parse@@Base+0x2c10>
   18b94:	cmp	r0, #0
   18b98:	beq	17850 <argp_failure@@Base+0x390>
   18b9c:	ldr	r3, [sl, #28]
   18ba0:	b	17840 <argp_failure@@Base+0x380>
   18ba4:	ldr	r3, [sl, #28]
   18ba8:	b	18b68 <argp_failure@@Base+0x16a8>
   18bac:	ldr	r3, [pc, #-1120]	; 18754 <argp_failure@@Base+0x1294>
   18bb0:	b	189e4 <argp_failure@@Base+0x1524>
   18bb4:	mov	r1, #1
   18bb8:	mov	r0, sl
   18bbc:	bl	1c620 <argp_parse@@Base+0x2c10>
   18bc0:	cmp	r0, #0
   18bc4:	beq	18b14 <argp_failure@@Base+0x1654>
   18bc8:	ldr	r3, [sl, #28]
   18bcc:	b	18b04 <argp_failure@@Base+0x1644>
   18bd0:	mov	r0, sl
   18bd4:	bl	1c074 <argp_parse@@Base+0x2664>
   18bd8:	b	18a5c <argp_failure@@Base+0x159c>
   18bdc:	ldr	r3, [pc, #-1164]	; 18758 <argp_failure@@Base+0x1298>
   18be0:	b	189e4 <argp_failure@@Base+0x1524>
   18be4:	ldr	r3, [pc, #-1168]	; 1875c <argp_failure@@Base+0x129c>
   18be8:	b	189e4 <argp_failure@@Base+0x1524>
   18bec:	mov	r9, r1
   18bf0:	ldr	r4, [pc, #-1172]	; 18764 <argp_failure@@Base+0x12a4>
   18bf4:	b	18af4 <argp_failure@@Base+0x1634>
   18bf8:	ldr	r3, [pc, #-1184]	; 18760 <argp_failure@@Base+0x12a0>
   18bfc:	b	189e4 <argp_failure@@Base+0x1524>
   18c00:	mov	r1, #1
   18c04:	mov	r0, sl
   18c08:	bl	1c620 <argp_parse@@Base+0x2c10>
   18c0c:	cmp	r0, #0
   18c10:	beq	17bbc <argp_failure@@Base+0x6fc>
   18c14:	ldr	r3, [sl, #28]
   18c18:	b	18b74 <argp_failure@@Base+0x16b4>
   18c1c:	ldr	r9, [fp, #-112]	; 0xffffff90
   18c20:	ldr	r4, [pc, #-1220]	; 18764 <argp_failure@@Base+0x12a4>
   18c24:	b	18af4 <argp_failure@@Base+0x1634>

00018c28 <argp_help@@Base>:
   18c28:	push	{lr}		; (str lr, [sp, #-4]!)
   18c2c:	sub	sp, sp, #12
   18c30:	str	r3, [sp]
   18c34:	mov	r3, r2
   18c38:	mov	r2, r1
   18c3c:	mov	r1, #0
   18c40:	bl	176c8 <argp_failure@@Base+0x208>
   18c44:	add	sp, sp, #12
   18c48:	pop	{pc}		; (ldr pc, [sp], #4)

00018c4c <argp_state_help@@Base>:
   18c4c:	push	{r4, r5, lr}
   18c50:	subs	r4, r0, #0
   18c54:	sub	sp, sp, #12
   18c58:	mov	r5, r2
   18c5c:	beq	18cbc <argp_state_help@@Base+0x70>
   18c60:	ldr	r3, [r4, #16]
   18c64:	tst	r3, #2
   18c68:	bne	18cb4 <argp_state_help@@Base+0x68>
   18c6c:	cmp	r1, #0
   18c70:	beq	18cb4 <argp_state_help@@Base+0x68>
   18c74:	tst	r3, #64	; 0x40
   18c78:	ldr	r3, [r4, #40]	; 0x28
   18c7c:	orrne	r5, r5, #128	; 0x80
   18c80:	ldr	r0, [r4]
   18c84:	mov	r2, r1
   18c88:	str	r3, [sp]
   18c8c:	mov	r1, r4
   18c90:	mov	r3, r5
   18c94:	bl	176c8 <argp_failure@@Base+0x208>
   18c98:	ldr	r3, [r4, #16]
   18c9c:	tst	r3, #32
   18ca0:	bne	18cb4 <argp_state_help@@Base+0x68>
   18ca4:	ands	r0, r5, #256	; 0x100
   18ca8:	bne	18ce8 <argp_state_help@@Base+0x9c>
   18cac:	tst	r5, #512	; 0x200
   18cb0:	bne	18ce4 <argp_state_help@@Base+0x98>
   18cb4:	add	sp, sp, #12
   18cb8:	pop	{r4, r5, pc}
   18cbc:	cmp	r1, #0
   18cc0:	beq	18cb4 <argp_state_help@@Base+0x68>
   18cc4:	ldr	r3, [pc, #40]	; 18cf4 <argp_state_help@@Base+0xa8>
   18cc8:	mov	r2, r1
   18ccc:	mov	r1, r4
   18cd0:	ldr	ip, [r3]
   18cd4:	mov	r3, r5
   18cd8:	str	ip, [sp]
   18cdc:	bl	176c8 <argp_failure@@Base+0x208>
   18ce0:	b	18ca4 <argp_state_help@@Base+0x58>
   18ce4:	bl	112ec <exit@plt>
   18ce8:	ldr	r3, [pc, #8]	; 18cf8 <argp_state_help@@Base+0xac>
   18cec:	ldr	r0, [r3]
   18cf0:	bl	112ec <exit@plt>
   18cf4:	andeq	r1, r3, r0, lsr #12
   18cf8:	andeq	r1, r3, ip, lsl #12

00018cfc <argp_error@@Base>:
   18cfc:	push	{r1, r2, r3}
   18d00:	push	{r4, r5, lr}
   18d04:	subs	r5, r0, #0
   18d08:	sub	sp, sp, #16
   18d0c:	beq	18e1c <argp_error@@Base+0x120>
   18d10:	ldr	r3, [r5, #16]
   18d14:	tst	r3, #2
   18d18:	bne	18e0c <argp_error@@Base+0x110>
   18d1c:	ldr	r4, [r5, #44]	; 0x2c
   18d20:	cmp	r4, #0
   18d24:	beq	18e0c <argp_error@@Base+0x110>
   18d28:	mov	r0, r4
   18d2c:	bl	11400 <flockfile@plt>
   18d30:	ldr	r0, [r5, #40]	; 0x28
   18d34:	add	r3, sp, #32
   18d38:	str	r3, [sp, #12]
   18d3c:	mov	r1, r4
   18d40:	bl	1110c <fputs_unlocked@plt>
   18d44:	ldr	r3, [r4, #20]
   18d48:	ldr	r2, [r4, #24]
   18d4c:	cmp	r3, r2
   18d50:	addcc	r1, r3, #1
   18d54:	movcc	r2, #58	; 0x3a
   18d58:	strcc	r1, [r4, #20]
   18d5c:	strbcc	r2, [r3]
   18d60:	bcs	18e48 <argp_error@@Base+0x14c>
   18d64:	ldr	r3, [r4, #20]
   18d68:	ldr	r2, [r4, #24]
   18d6c:	cmp	r3, r2
   18d70:	addcc	r1, r3, #1
   18d74:	movcc	r2, #32
   18d78:	strcc	r1, [r4, #20]
   18d7c:	strbcc	r2, [r3]
   18d80:	bcs	18e68 <argp_error@@Base+0x16c>
   18d84:	ldr	r1, [sp, #28]
   18d88:	ldr	r2, [sp, #12]
   18d8c:	mov	r0, r4
   18d90:	bl	113c4 <vfprintf@plt>
   18d94:	ldr	r3, [r4, #20]
   18d98:	ldr	r2, [r4, #24]
   18d9c:	cmp	r3, r2
   18da0:	addcc	r1, r3, #1
   18da4:	movcc	r2, #10
   18da8:	strcc	r1, [r4, #20]
   18dac:	strbcc	r2, [r3]
   18db0:	bcs	18e58 <argp_error@@Base+0x15c>
   18db4:	cmp	r5, #0
   18db8:	beq	18e78 <argp_error@@Base+0x17c>
   18dbc:	ldr	r3, [r5, #16]
   18dc0:	tst	r3, #2
   18dc4:	bne	18e04 <argp_error@@Base+0x108>
   18dc8:	ldr	r2, [r5, #40]	; 0x28
   18dcc:	tst	r3, #64	; 0x40
   18dd0:	moveq	r3, #260	; 0x104
   18dd4:	movne	r3, #388	; 0x184
   18dd8:	ldr	r0, [r5]
   18ddc:	mov	r1, r5
   18de0:	str	r2, [sp]
   18de4:	mov	r2, r4
   18de8:	bl	176c8 <argp_failure@@Base+0x208>
   18dec:	ldr	r3, [r5, #16]
   18df0:	tst	r3, #32
   18df4:	bne	18e04 <argp_error@@Base+0x108>
   18df8:	ldr	r3, [pc, #156]	; 18e9c <argp_error@@Base+0x1a0>
   18dfc:	ldr	r0, [r3]
   18e00:	bl	112ec <exit@plt>
   18e04:	mov	r0, r4
   18e08:	bl	11244 <funlockfile@plt>
   18e0c:	add	sp, sp, #16
   18e10:	pop	{r4, r5, lr}
   18e14:	add	sp, sp, #12
   18e18:	bx	lr
   18e1c:	ldr	r3, [pc, #124]	; 18ea0 <argp_error@@Base+0x1a4>
   18e20:	ldr	r4, [r3]
   18e24:	cmp	r4, #0
   18e28:	beq	18e0c <argp_error@@Base+0x110>
   18e2c:	mov	r0, r4
   18e30:	bl	11400 <flockfile@plt>
   18e34:	ldr	r2, [pc, #104]	; 18ea4 <argp_error@@Base+0x1a8>
   18e38:	add	r3, sp, #32
   18e3c:	str	r3, [sp, #12]
   18e40:	ldr	r0, [r2]
   18e44:	b	18d3c <argp_error@@Base+0x40>
   18e48:	mov	r1, #58	; 0x3a
   18e4c:	mov	r0, r4
   18e50:	bl	11394 <__overflow@plt>
   18e54:	b	18d64 <argp_error@@Base+0x68>
   18e58:	mov	r1, #10
   18e5c:	mov	r0, r4
   18e60:	bl	11394 <__overflow@plt>
   18e64:	b	18db4 <argp_error@@Base+0xb8>
   18e68:	mov	r1, #32
   18e6c:	mov	r0, r4
   18e70:	bl	11394 <__overflow@plt>
   18e74:	b	18d84 <argp_error@@Base+0x88>
   18e78:	ldr	r1, [pc, #36]	; 18ea4 <argp_error@@Base+0x1a8>
   18e7c:	mov	r2, r4
   18e80:	mov	r3, #260	; 0x104
   18e84:	ldr	r0, [r1]
   18e88:	mov	r1, r5
   18e8c:	str	r0, [sp]
   18e90:	mov	r0, r5
   18e94:	bl	176c8 <argp_failure@@Base+0x208>
   18e98:	b	18df8 <argp_error@@Base+0xfc>
   18e9c:	andeq	r1, r3, ip, lsl #12
   18ea0:	andeq	r1, r3, r8, lsr #12
   18ea4:	andeq	r1, r3, r0, lsr #12
   18ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eac:	sub	sp, sp, #36	; 0x24
   18eb0:	ldr	sl, [r0]
   18eb4:	str	r0, [sp, #12]
   18eb8:	cmp	sl, #0
   18ebc:	str	r1, [sp, #16]
   18ec0:	str	r2, [sp, #20]
   18ec4:	mov	r9, r3
   18ec8:	ldr	r8, [r0, #16]
   18ecc:	ldr	r7, [sp, #72]	; 0x48
   18ed0:	beq	1909c <argp_error@@Base+0x3a0>
   18ed4:	add	fp, sl, #24
   18ed8:	str	r8, [sp, #28]
   18edc:	str	r3, [sp, #24]
   18ee0:	ldr	r4, [fp, #-20]	; 0xffffffec
   18ee4:	sub	r1, fp, #24
   18ee8:	cmp	r4, #0
   18eec:	bne	18efc <argp_error@@Base+0x200>
   18ef0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ef4:	cmp	r3, #0
   18ef8:	beq	19070 <argp_error@@Base+0x374>
   18efc:	ldr	r3, [fp, #-12]
   18f00:	tst	r3, #4
   18f04:	moveq	sl, r1
   18f08:	moveq	r5, r3
   18f0c:	ldrne	r5, [sl, #12]
   18f10:	ands	r5, r5, #8
   18f14:	bne	19058 <argp_error@@Base+0x35c>
   18f18:	tst	r3, #8
   18f1c:	bne	18f98 <argp_error@@Base+0x29c>
   18f20:	sub	r3, r4, #1
   18f24:	cmp	r3, #254	; 0xfe
   18f28:	bhi	18f98 <argp_error@@Base+0x29c>
   18f2c:	bl	112d4 <__ctype_b_loc@plt>
   18f30:	lsl	r3, r4, #1
   18f34:	ldr	r1, [r0]
   18f38:	ldrh	r3, [r1, r3]
   18f3c:	tst	r3, #16384	; 0x4000
   18f40:	beq	18f98 <argp_error@@Base+0x29c>
   18f44:	ldr	r3, [r7, #4]
   18f48:	add	r1, r3, #1
   18f4c:	str	r1, [r7, #4]
   18f50:	strb	r4, [r3]
   18f54:	ldr	r3, [sl, #8]
   18f58:	cmp	r3, #0
   18f5c:	beq	18f8c <argp_error@@Base+0x290>
   18f60:	ldr	r3, [r7, #4]
   18f64:	mov	r2, #58	; 0x3a
   18f68:	add	r1, r3, #1
   18f6c:	str	r1, [r7, #4]
   18f70:	strb	r2, [r3]
   18f74:	ldr	r3, [sl, #12]
   18f78:	tst	r3, #1
   18f7c:	ldrne	r3, [r7, #4]
   18f80:	addne	r1, r3, #1
   18f84:	strne	r1, [r7, #4]
   18f88:	strbne	r2, [r3]
   18f8c:	ldr	r3, [r7, #4]
   18f90:	mov	r2, #0
   18f94:	strb	r2, [r3]
   18f98:	ldr	r4, [fp, #-24]	; 0xffffffe8
   18f9c:	cmp	r4, #0
   18fa0:	beq	19058 <argp_error@@Base+0x35c>
   18fa4:	ldr	r8, [r7]
   18fa8:	ldr	r6, [r8, #8]
   18fac:	ldr	r0, [r6]
   18fb0:	cmp	r0, #0
   18fb4:	beq	18fd8 <argp_error@@Base+0x2dc>
   18fb8:	mov	r9, r6
   18fbc:	mov	r1, r4
   18fc0:	bl	11124 <strcmp@plt>
   18fc4:	cmp	r0, #0
   18fc8:	beq	19060 <argp_error@@Base+0x364>
   18fcc:	ldr	r0, [r9, #16]!
   18fd0:	cmp	r0, #0
   18fd4:	bne	18fbc <argp_error@@Base+0x2c0>
   18fd8:	ldr	r3, [sl, #8]
   18fdc:	ldr	r1, [r7, #8]
   18fe0:	cmp	r3, #0
   18fe4:	str	r4, [r1]
   18fe8:	beq	18ffc <argp_error@@Base+0x300>
   18fec:	ldr	r3, [sl, #12]
   18ff0:	tst	r3, #1
   18ff4:	moveq	r5, #1
   18ff8:	movne	r5, #2
   18ffc:	str	r5, [r1, #4]
   19000:	ldr	ip, [fp, #-20]	; 0xffffffec
   19004:	mov	r3, #0
   19008:	cmp	ip, r3
   1900c:	str	r3, [r1, #8]
   19010:	ldr	r2, [sp, #24]
   19014:	ldr	r3, [r8, #48]	; 0x30
   19018:	ldreq	ip, [sl, #4]
   1901c:	sub	r3, r2, r3
   19020:	bic	ip, ip, #-16777216	; 0xff000000
   19024:	asr	r3, r3, #2
   19028:	add	lr, r1, #16
   1902c:	rsb	r0, r3, r3, lsl #3
   19030:	add	r0, r0, r0, lsl #6
   19034:	add	r0, r3, r0, lsl #3
   19038:	rsb	r0, r0, r0, lsl #15
   1903c:	add	r3, r3, r0, lsl #3
   19040:	add	r3, r3, #1
   19044:	add	r3, ip, r3, lsl #24
   19048:	str	r3, [r1, #12]
   1904c:	mov	r3, #0
   19050:	str	lr, [r7, #8]
   19054:	str	r3, [r1, #16]
   19058:	add	fp, fp, #24
   1905c:	b	18ee0 <argp_error@@Base+0x1e4>
   19060:	sub	r6, r9, r6
   19064:	cmn	r6, #15
   19068:	bge	19058 <argp_error@@Base+0x35c>
   1906c:	b	18fd8 <argp_error@@Base+0x2dc>
   19070:	ldr	r3, [fp, #-8]
   19074:	cmp	r3, #0
   19078:	bne	18efc <argp_error@@Base+0x200>
   1907c:	ldr	r3, [fp, #-4]
   19080:	cmp	r3, #0
   19084:	bne	18efc <argp_error@@Base+0x200>
   19088:	ldr	r3, [sp, #12]
   1908c:	ldr	r8, [sp, #28]
   19090:	ldr	r9, [sp, #24]
   19094:	ldr	r3, [r3, #4]
   19098:	b	190b0 <argp_error@@Base+0x3b4>
   1909c:	ldr	r3, [r0, #4]
   190a0:	cmp	r3, #0
   190a4:	moveq	r0, r9
   190a8:	moveq	r9, r3
   190ac:	beq	19120 <argp_error@@Base+0x424>
   190b0:	ldr	r2, [r7, #4]
   190b4:	ldr	r1, [sp, #12]
   190b8:	str	r3, [r9]
   190bc:	cmp	r8, #0
   190c0:	stmib	r9, {r1, r2}
   190c4:	ldr	r2, [sp, #16]
   190c8:	mov	r3, #0
   190cc:	str	r2, [r9, #16]
   190d0:	ldr	r2, [sp, #20]
   190d4:	str	r3, [r9, #12]
   190d8:	str	r2, [r9, #20]
   190dc:	str	r3, [r9, #24]
   190e0:	str	r3, [r9, #32]
   190e4:	str	r3, [r9, #28]
   190e8:	beq	1911c <argp_error@@Base+0x420>
   190ec:	ldr	r2, [r8]
   190f0:	cmp	r2, r3
   190f4:	beq	19168 <argp_error@@Base+0x46c>
   190f8:	add	r3, r3, #1
   190fc:	ldr	r2, [r8, r3, lsl #4]
   19100:	cmp	r2, #0
   19104:	bne	190f8 <argp_error@@Base+0x3fc>
   19108:	lsl	r3, r3, #2
   1910c:	ldr	r2, [r7, #12]
   19110:	add	r3, r2, r3
   19114:	str	r2, [r9, #28]
   19118:	str	r3, [r7, #12]
   1911c:	add	r0, r9, #36	; 0x24
   19120:	cmp	r8, #0
   19124:	beq	19160 <argp_error@@Base+0x464>
   19128:	ldr	r1, [r8]
   1912c:	cmp	r1, #0
   19130:	beq	19160 <argp_error@@Base+0x464>
   19134:	mov	r2, #0
   19138:	add	r4, r2, #1
   1913c:	mov	r3, r0
   19140:	str	r7, [sp]
   19144:	mov	r0, r1
   19148:	mov	r1, r9
   1914c:	bl	18ea8 <argp_error@@Base+0x1ac>
   19150:	ldr	r1, [r8, r4, lsl #4]
   19154:	mov	r2, r4
   19158:	cmp	r1, #0
   1915c:	bne	19138 <argp_error@@Base+0x43c>
   19160:	add	sp, sp, #36	; 0x24
   19164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19168:	mov	r3, r2
   1916c:	b	1910c <argp_error@@Base+0x410>
   19170:	cmp	r0, #86	; 0x56
   19174:	beq	19180 <argp_error@@Base+0x484>
   19178:	mov	r0, #7
   1917c:	bx	lr
   19180:	ldr	r3, [pc, #104]	; 191f0 <argp_error@@Base+0x4f4>
   19184:	push	{r4, lr}
   19188:	mov	r4, r2
   1918c:	ldr	r3, [r3]
   19190:	cmp	r3, #0
   19194:	beq	191b8 <argp_error@@Base+0x4bc>
   19198:	mov	r1, r2
   1919c:	ldr	r0, [r2, #48]	; 0x30
   191a0:	blx	r3
   191a4:	ldr	r0, [r4, #16]
   191a8:	ands	r0, r0, #32
   191ac:	beq	191ec <argp_error@@Base+0x4f0>
   191b0:	mov	r0, #0
   191b4:	pop	{r4, pc}
   191b8:	ldr	r3, [pc, #52]	; 191f4 <argp_error@@Base+0x4f8>
   191bc:	ldr	r2, [r3]
   191c0:	cmp	r2, #0
   191c4:	beq	191d8 <argp_error@@Base+0x4dc>
   191c8:	ldr	r1, [pc, #40]	; 191f8 <argp_error@@Base+0x4fc>
   191cc:	ldr	r0, [r4, #48]	; 0x30
   191d0:	bl	1131c <fprintf@plt>
   191d4:	b	191a4 <argp_error@@Base+0x4a8>
   191d8:	ldr	r2, [pc, #28]	; 191fc <argp_error@@Base+0x500>
   191dc:	ldr	r1, [pc, #28]	; 19200 <argp_error@@Base+0x504>
   191e0:	mov	r0, r4
   191e4:	bl	18cfc <argp_error@@Base>
   191e8:	b	191a4 <argp_error@@Base+0x4a8>
   191ec:	bl	112ec <exit@plt>
   191f0:	andeq	r1, r3, ip, lsl #13
   191f4:	andeq	r1, r3, r0, ror #13
   191f8:	andeq	pc, r1, ip, asr #21
   191fc:	andeq	pc, r1, r0, asr #18
   19200:			; <UNDEFINED> instruction: 0x0001e6b4
   19204:	cmn	r0, #3
   19208:	push	{r4, r5, lr}
   1920c:	mov	r4, r2
   19210:	sub	sp, sp, #12
   19214:	beq	192f8 <argp_error@@Base+0x5fc>
   19218:	ble	19288 <argp_error@@Base+0x58c>
   1921c:	cmn	r0, #2
   19220:	beq	19248 <argp_error@@Base+0x54c>
   19224:	cmp	r0, #63	; 0x3f
   19228:	bne	192ec <argp_error@@Base+0x5f0>
   1922c:	mov	r0, r4
   19230:	ldr	r2, [pc, #236]	; 19324 <argp_error@@Base+0x628>
   19234:	ldr	r1, [r4, #48]	; 0x30
   19238:	bl	18c4c <argp_state_help@@Base>
   1923c:	mov	r0, #0
   19240:	add	sp, sp, #12
   19244:	pop	{r4, r5, pc}
   19248:	ldr	r3, [pc, #216]	; 19328 <argp_error@@Base+0x62c>
   1924c:	mov	r0, r1
   19250:	str	r1, [sp, #4]
   19254:	str	r1, [r3]
   19258:	bl	1a8e0 <argp_parse@@Base+0xed0>
   1925c:	ldr	r3, [r4, #16]
   19260:	ldr	r2, [pc, #196]	; 1932c <argp_error@@Base+0x630>
   19264:	and	r3, r3, #3
   19268:	cmp	r3, #1
   1926c:	ldr	r1, [sp, #4]
   19270:	str	r0, [r4, #40]	; 0x28
   19274:	str	r0, [r2]
   19278:	beq	19314 <argp_error@@Base+0x618>
   1927c:	mov	r0, #0
   19280:	add	sp, sp, #12
   19284:	pop	{r4, r5, pc}
   19288:	cmn	r0, #4
   1928c:	bne	192ec <argp_error@@Base+0x5f0>
   19290:	cmp	r1, #0
   19294:	ldr	r0, [pc, #148]	; 19330 <argp_error@@Base+0x634>
   19298:	mov	r2, #10
   1929c:	movne	r0, r1
   192a0:	mov	r1, #0
   192a4:	bl	11130 <strtol@plt>
   192a8:	ldr	r4, [pc, #132]	; 19334 <argp_error@@Base+0x638>
   192ac:	str	r0, [r4]
   192b0:	ldr	r3, [r4]
   192b4:	cmp	r3, #0
   192b8:	sub	r3, r3, #1
   192bc:	str	r3, [r4]
   192c0:	ble	1927c <argp_error@@Base+0x580>
   192c4:	mov	r5, #1
   192c8:	mov	r0, r5
   192cc:	bl	111fc <sleep@plt>
   192d0:	ldr	r3, [r4]
   192d4:	cmp	r3, #0
   192d8:	sub	r3, r3, #1
   192dc:	str	r3, [r4]
   192e0:	bgt	192c8 <argp_error@@Base+0x5cc>
   192e4:	mov	r0, #0
   192e8:	b	19280 <argp_error@@Base+0x584>
   192ec:	mov	r0, #7
   192f0:	add	sp, sp, #12
   192f4:	pop	{r4, r5, pc}
   192f8:	mov	r0, r4
   192fc:	ldr	r2, [pc, #52]	; 19338 <argp_error@@Base+0x63c>
   19300:	ldr	r1, [r4, #48]	; 0x30
   19304:	bl	18c4c <argp_state_help@@Base>
   19308:	mov	r0, #0
   1930c:	add	sp, sp, #12
   19310:	pop	{r4, r5, pc}
   19314:	ldr	r3, [r4, #8]
   19318:	mov	r0, #0
   1931c:	str	r1, [r3]
   19320:	b	19240 <argp_error@@Base+0x544>
   19324:	andeq	r0, r0, sl, ror r2
   19328:	andeq	r1, r3, r4, lsr #12
   1932c:	andeq	r1, r3, r0, lsr #12
   19330:	andeq	pc, r1, r4, ror #18
   19334:	andeq	r1, r3, r8, lsl #13
   19338:	andeq	r0, r0, r1, lsl #4
   1933c:	ldr	r3, [r0]
   19340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19344:	cmp	r3, #0
   19348:	sub	sp, sp, #12
   1934c:	ldr	lr, [r0, #16]
   19350:	beq	19388 <argp_error@@Base+0x68c>
   19354:	ldr	r0, [r1, #8]
   19358:	mov	r2, #0
   1935c:	add	r0, r0, #1
   19360:	str	r0, [r1, #8]
   19364:	add	r3, r3, #24
   19368:	ldr	r0, [r3, #-20]	; 0xffffffec
   1936c:	cmp	r0, #0
   19370:	bne	19380 <argp_error@@Base+0x684>
   19374:	ldr	r0, [r3, #-24]	; 0xffffffe8
   19378:	cmp	r0, #0
   1937c:	beq	19940 <argp_error@@Base+0xc44>
   19380:	add	r2, r2, #1
   19384:	b	19364 <argp_error@@Base+0x668>
   19388:	ldr	r3, [r0, #4]
   1938c:	cmp	r3, #0
   19390:	ldrne	r3, [r1, #8]
   19394:	addne	r3, r3, #1
   19398:	strne	r3, [r1, #8]
   1939c:	cmp	lr, #0
   193a0:	beq	1972c <argp_error@@Base+0xa30>
   193a4:	ldr	r0, [lr]
   193a8:	cmp	r0, #0
   193ac:	beq	1972c <argp_error@@Base+0xa30>
   193b0:	mov	r6, r1
   193b4:	str	lr, [sp]
   193b8:	ldr	r2, [r0]
   193bc:	ldr	r7, [r0, #16]
   193c0:	cmp	r2, #0
   193c4:	beq	193fc <argp_error@@Base+0x700>
   193c8:	ldr	r0, [r6, #8]
   193cc:	mov	r1, #0
   193d0:	add	r0, r0, #1
   193d4:	str	r0, [r6, #8]
   193d8:	add	r2, r2, #24
   193dc:	ldr	r0, [r2, #-20]	; 0xffffffec
   193e0:	cmp	r0, #0
   193e4:	bne	193f4 <argp_error@@Base+0x6f8>
   193e8:	ldr	r0, [r2, #-24]	; 0xffffffe8
   193ec:	cmp	r0, #0
   193f0:	beq	19970 <argp_error@@Base+0xc74>
   193f4:	add	r1, r1, #1
   193f8:	b	193d8 <argp_error@@Base+0x6dc>
   193fc:	ldr	r2, [r0, #4]
   19400:	cmp	r2, #0
   19404:	ldrne	r2, [r6, #8]
   19408:	addne	r2, r2, #1
   1940c:	strne	r2, [r6, #8]
   19410:	cmp	r7, #0
   19414:	beq	199d0 <argp_error@@Base+0xcd4>
   19418:	ldr	r1, [r7]
   1941c:	cmp	r1, #0
   19420:	beq	199d0 <argp_error@@Base+0xcd4>
   19424:	str	r7, [sp, #4]
   19428:	ldr	r2, [r1]
   1942c:	ldr	r8, [r1, #16]
   19430:	cmp	r2, #0
   19434:	beq	1946c <argp_error@@Base+0x770>
   19438:	ldr	r0, [r6, #8]
   1943c:	mov	r1, #0
   19440:	add	r0, r0, #1
   19444:	str	r0, [r6, #8]
   19448:	add	r2, r2, #24
   1944c:	ldr	r0, [r2, #-20]	; 0xffffffec
   19450:	cmp	r0, #0
   19454:	bne	19464 <argp_error@@Base+0x768>
   19458:	ldr	r0, [r2, #-24]	; 0xffffffe8
   1945c:	cmp	r0, #0
   19460:	beq	199a0 <argp_error@@Base+0xca4>
   19464:	add	r1, r1, #1
   19468:	b	19448 <argp_error@@Base+0x74c>
   1946c:	ldr	r2, [r1, #4]
   19470:	cmp	r2, #0
   19474:	ldrne	r2, [r6, #8]
   19478:	addne	r2, r2, #1
   1947c:	strne	r2, [r6, #8]
   19480:	cmp	r8, #0
   19484:	beq	199d8 <argp_error@@Base+0xcdc>
   19488:	ldr	r1, [r8]
   1948c:	cmp	r1, #0
   19490:	beq	199d8 <argp_error@@Base+0xcdc>
   19494:	ldr	r2, [r1]
   19498:	ldr	r9, [r1, #16]
   1949c:	cmp	r2, #0
   194a0:	beq	194d8 <argp_error@@Base+0x7dc>
   194a4:	ldr	r0, [r6, #8]
   194a8:	mov	r1, #0
   194ac:	add	r0, r0, #1
   194b0:	str	r0, [r6, #8]
   194b4:	add	r2, r2, #24
   194b8:	ldr	r0, [r2, #-20]	; 0xffffffec
   194bc:	cmp	r0, #0
   194c0:	bne	194d0 <argp_error@@Base+0x7d4>
   194c4:	ldr	r0, [r2, #-24]	; 0xffffffe8
   194c8:	cmp	r0, #0
   194cc:	beq	199e0 <argp_error@@Base+0xce4>
   194d0:	add	r1, r1, #1
   194d4:	b	194b4 <argp_error@@Base+0x7b8>
   194d8:	ldr	r2, [r1, #4]
   194dc:	cmp	r2, #0
   194e0:	ldrne	r2, [r6, #8]
   194e4:	addne	r2, r2, #1
   194e8:	strne	r2, [r6, #8]
   194ec:	cmp	r9, #0
   194f0:	beq	196dc <argp_error@@Base+0x9e0>
   194f4:	ldr	r1, [r9]
   194f8:	cmp	r1, #0
   194fc:	beq	196dc <argp_error@@Base+0x9e0>
   19500:	ldr	r2, [r1]
   19504:	ldr	sl, [r1, #16]
   19508:	cmp	r2, #0
   1950c:	beq	19574 <argp_error@@Base+0x878>
   19510:	ldr	r0, [r6, #8]
   19514:	mov	r1, #0
   19518:	add	r0, r0, #1
   1951c:	str	r0, [r6, #8]
   19520:	b	19528 <argp_error@@Base+0x82c>
   19524:	add	r1, r1, #1
   19528:	add	r2, r2, #24
   1952c:	ldr	r0, [r2, #-20]	; 0xffffffec
   19530:	cmp	r0, #0
   19534:	bne	19524 <argp_error@@Base+0x828>
   19538:	ldr	r0, [r2, #-24]	; 0xffffffe8
   1953c:	cmp	r0, #0
   19540:	bne	19524 <argp_error@@Base+0x828>
   19544:	ldr	r0, [r2, #-8]
   19548:	cmp	r0, #0
   1954c:	bne	19524 <argp_error@@Base+0x828>
   19550:	ldr	r0, [r2, #-4]
   19554:	cmp	r0, #0
   19558:	bne	19524 <argp_error@@Base+0x828>
   1955c:	ldm	r6, {r0, r2}
   19560:	add	ip, r1, r1, lsl #1
   19564:	add	r0, r0, ip
   19568:	add	r1, r2, r1
   1956c:	stm	r6, {r0, r1}
   19570:	b	19588 <argp_error@@Base+0x88c>
   19574:	ldr	r2, [r1, #4]
   19578:	cmp	r2, #0
   1957c:	ldrne	r2, [r6, #8]
   19580:	addne	r2, r2, #1
   19584:	strne	r2, [r6, #8]
   19588:	cmp	sl, #0
   1958c:	beq	19938 <argp_error@@Base+0xc3c>
   19590:	ldr	r1, [sl]
   19594:	cmp	r1, #0
   19598:	beq	19938 <argp_error@@Base+0xc3c>
   1959c:	ldr	r2, [r1]
   195a0:	ldr	fp, [r1, #16]
   195a4:	cmp	r2, #0
   195a8:	beq	19910 <argp_error@@Base+0xc14>
   195ac:	ldr	r0, [r6, #8]
   195b0:	mov	r1, #0
   195b4:	add	r0, r0, #1
   195b8:	str	r0, [r6, #8]
   195bc:	b	195c4 <argp_error@@Base+0x8c8>
   195c0:	add	r1, r1, #1
   195c4:	add	r2, r2, #24
   195c8:	ldr	r0, [r2, #-20]	; 0xffffffec
   195cc:	cmp	r0, #0
   195d0:	bne	195c0 <argp_error@@Base+0x8c4>
   195d4:	ldr	r0, [r2, #-24]	; 0xffffffe8
   195d8:	cmp	r0, #0
   195dc:	bne	195c0 <argp_error@@Base+0x8c4>
   195e0:	ldr	r0, [r2, #-8]
   195e4:	cmp	r0, #0
   195e8:	bne	195c0 <argp_error@@Base+0x8c4>
   195ec:	ldr	r0, [r2, #-4]
   195f0:	cmp	r0, #0
   195f4:	bne	195c0 <argp_error@@Base+0x8c4>
   195f8:	ldm	r6, {r0, r2}
   195fc:	add	ip, r1, r1, lsl #1
   19600:	add	r0, r0, ip
   19604:	add	r1, r2, r1
   19608:	stm	r6, {r0, r1}
   1960c:	cmp	fp, #0
   19610:	beq	19930 <argp_error@@Base+0xc34>
   19614:	ldr	r0, [fp]
   19618:	cmp	r0, #0
   1961c:	beq	19930 <argp_error@@Base+0xc34>
   19620:	ldr	r2, [r0]
   19624:	ldr	r5, [r0, #16]
   19628:	cmp	r2, #0
   1962c:	beq	19734 <argp_error@@Base+0xa38>
   19630:	ldr	r0, [r6, #8]
   19634:	mov	r1, #0
   19638:	add	r0, r0, #1
   1963c:	str	r0, [r6, #8]
   19640:	b	19648 <argp_error@@Base+0x94c>
   19644:	add	r1, r1, #1
   19648:	add	r2, r2, #24
   1964c:	ldr	r0, [r2, #-20]	; 0xffffffec
   19650:	cmp	r0, #0
   19654:	bne	19644 <argp_error@@Base+0x948>
   19658:	ldr	r0, [r2, #-24]	; 0xffffffe8
   1965c:	cmp	r0, #0
   19660:	bne	19644 <argp_error@@Base+0x948>
   19664:	ldr	r0, [r2, #-8]
   19668:	cmp	r0, #0
   1966c:	bne	19644 <argp_error@@Base+0x948>
   19670:	ldr	r0, [r2, #-4]
   19674:	cmp	r0, #0
   19678:	bne	19644 <argp_error@@Base+0x948>
   1967c:	ldm	r6, {r0, r2}
   19680:	add	ip, r1, r1, lsl #1
   19684:	cmp	r5, #0
   19688:	add	r0, r0, ip
   1968c:	add	r1, r2, r1
   19690:	stm	r6, {r0, r1}
   19694:	bne	19750 <argp_error@@Base+0xa54>
   19698:	ldr	r1, [r6, #12]
   1969c:	ldr	r0, [fp, #16]!
   196a0:	add	r2, r1, #1
   196a4:	cmp	r0, #0
   196a8:	str	r2, [r6, #12]
   196ac:	bne	19620 <argp_error@@Base+0x924>
   196b0:	ldr	r1, [sl, #16]!
   196b4:	add	r2, r2, #1
   196b8:	cmp	r1, #0
   196bc:	str	r2, [r6, #12]
   196c0:	bne	1959c <argp_error@@Base+0x8a0>
   196c4:	ldr	r1, [r9, #16]!
   196c8:	add	r2, r2, #1
   196cc:	cmp	r1, #0
   196d0:	str	r2, [r6, #12]
   196d4:	bne	19500 <argp_error@@Base+0x804>
   196d8:	b	196e0 <argp_error@@Base+0x9e4>
   196dc:	ldr	r2, [r6, #12]
   196e0:	ldr	r1, [r8, #16]!
   196e4:	add	r2, r2, #1
   196e8:	cmp	r1, #0
   196ec:	str	r2, [r6, #12]
   196f0:	bne	19494 <argp_error@@Base+0x798>
   196f4:	ldr	r3, [sp, #4]
   196f8:	add	r2, r2, #1
   196fc:	ldr	r1, [r3, #16]!
   19700:	str	r2, [r6, #12]
   19704:	cmp	r1, #0
   19708:	str	r3, [sp, #4]
   1970c:	bne	19428 <argp_error@@Base+0x72c>
   19710:	ldr	r3, [sp]
   19714:	add	r2, r2, #1
   19718:	ldr	r0, [r3, #16]!
   1971c:	str	r2, [r6, #12]
   19720:	cmp	r0, #0
   19724:	str	r3, [sp]
   19728:	bne	193b8 <argp_error@@Base+0x6bc>
   1972c:	add	sp, sp, #12
   19730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19734:	ldr	r2, [r0, #4]
   19738:	cmp	r2, #0
   1973c:	ldrne	r2, [r6, #8]
   19740:	addne	r2, r2, #1
   19744:	strne	r2, [r6, #8]
   19748:	cmp	r5, #0
   1974c:	beq	19698 <argp_error@@Base+0x99c>
   19750:	ldr	r0, [r5]
   19754:	cmp	r0, #0
   19758:	beq	19698 <argp_error@@Base+0x99c>
   1975c:	ldr	r2, [r0]
   19760:	ldr	r4, [r0, #16]
   19764:	cmp	r2, #0
   19768:	beq	198c8 <argp_error@@Base+0xbcc>
   1976c:	ldr	r0, [r6, #8]
   19770:	mov	r1, #0
   19774:	add	r0, r0, #1
   19778:	str	r0, [r6, #8]
   1977c:	b	19784 <argp_error@@Base+0xa88>
   19780:	add	r1, r1, #1
   19784:	add	r2, r2, #24
   19788:	ldr	r0, [r2, #-20]	; 0xffffffec
   1978c:	cmp	r0, #0
   19790:	bne	19780 <argp_error@@Base+0xa84>
   19794:	ldr	r0, [r2, #-24]	; 0xffffffe8
   19798:	cmp	r0, #0
   1979c:	bne	19780 <argp_error@@Base+0xa84>
   197a0:	ldr	r0, [r2, #-8]
   197a4:	cmp	r0, #0
   197a8:	bne	19780 <argp_error@@Base+0xa84>
   197ac:	ldr	r0, [r2, #-4]
   197b0:	cmp	r0, #0
   197b4:	bne	19780 <argp_error@@Base+0xa84>
   197b8:	ldm	r6, {r0, r2}
   197bc:	add	ip, r1, r1, lsl #1
   197c0:	add	r0, r0, ip
   197c4:	add	r1, r2, r1
   197c8:	stm	r6, {r0, r1}
   197cc:	cmp	r4, #0
   197d0:	beq	198e8 <argp_error@@Base+0xbec>
   197d4:	ldr	r0, [r4]
   197d8:	cmp	r0, #0
   197dc:	beq	198e8 <argp_error@@Base+0xbec>
   197e0:	ldr	r1, [r0]
   197e4:	ldr	r2, [r0, #16]
   197e8:	cmp	r1, #0
   197ec:	beq	198f8 <argp_error@@Base+0xbfc>
   197f0:	ldr	ip, [r6, #8]
   197f4:	mov	r0, #0
   197f8:	add	ip, ip, #1
   197fc:	str	ip, [r6, #8]
   19800:	b	19808 <argp_error@@Base+0xb0c>
   19804:	add	r0, r0, #1
   19808:	add	r1, r1, #24
   1980c:	ldr	ip, [r1, #-20]	; 0xffffffec
   19810:	cmp	ip, #0
   19814:	bne	19804 <argp_error@@Base+0xb08>
   19818:	ldr	ip, [r1, #-24]	; 0xffffffe8
   1981c:	cmp	ip, #0
   19820:	bne	19804 <argp_error@@Base+0xb08>
   19824:	ldr	ip, [r1, #-8]
   19828:	cmp	ip, #0
   1982c:	bne	19804 <argp_error@@Base+0xb08>
   19830:	ldr	ip, [r1, #-4]
   19834:	cmp	ip, #0
   19838:	bne	19804 <argp_error@@Base+0xb08>
   1983c:	ldr	ip, [r6]
   19840:	ldr	r1, [r6, #4]
   19844:	add	lr, r0, r0, lsl #1
   19848:	add	ip, ip, lr
   1984c:	add	r0, r1, r0
   19850:	str	ip, [r6]
   19854:	str	r0, [r6, #4]
   19858:	cmp	r2, #0
   1985c:	beq	198f0 <argp_error@@Base+0xbf4>
   19860:	ldr	r0, [r2]
   19864:	cmp	r0, #0
   19868:	beq	198f0 <argp_error@@Base+0xbf4>
   1986c:	mov	r7, r2
   19870:	mov	r1, r6
   19874:	bl	1933c <argp_error@@Base+0x640>
   19878:	ldr	r1, [r6, #12]
   1987c:	ldr	r0, [r7, #16]!
   19880:	add	r1, r1, #1
   19884:	cmp	r0, #0
   19888:	str	r1, [r6, #12]
   1988c:	bne	19870 <argp_error@@Base+0xb74>
   19890:	ldr	r0, [r4, #16]!
   19894:	add	r1, r1, #1
   19898:	cmp	r0, #0
   1989c:	str	r1, [r6, #12]
   198a0:	bne	197e0 <argp_error@@Base+0xae4>
   198a4:	ldr	r0, [r5, #16]!
   198a8:	add	r1, r1, #1
   198ac:	cmp	r0, #0
   198b0:	str	r1, [r6, #12]
   198b4:	beq	1969c <argp_error@@Base+0x9a0>
   198b8:	ldr	r2, [r0]
   198bc:	ldr	r4, [r0, #16]
   198c0:	cmp	r2, #0
   198c4:	bne	1976c <argp_error@@Base+0xa70>
   198c8:	ldr	r2, [r0, #4]
   198cc:	cmp	r2, #0
   198d0:	beq	197cc <argp_error@@Base+0xad0>
   198d4:	ldr	r2, [r6, #8]
   198d8:	cmp	r4, #0
   198dc:	add	r2, r2, #1
   198e0:	str	r2, [r6, #8]
   198e4:	bne	197d4 <argp_error@@Base+0xad8>
   198e8:	ldr	r1, [r6, #12]
   198ec:	b	198a4 <argp_error@@Base+0xba8>
   198f0:	ldr	r1, [r6, #12]
   198f4:	b	19890 <argp_error@@Base+0xb94>
   198f8:	ldr	r1, [r0, #4]
   198fc:	cmp	r1, #0
   19900:	ldrne	r1, [r6, #8]
   19904:	addne	r1, r1, #1
   19908:	strne	r1, [r6, #8]
   1990c:	b	19858 <argp_error@@Base+0xb5c>
   19910:	ldr	r2, [r1, #4]
   19914:	cmp	r2, #0
   19918:	beq	1960c <argp_error@@Base+0x910>
   1991c:	ldr	r2, [r6, #8]
   19920:	cmp	fp, #0
   19924:	add	r2, r2, #1
   19928:	str	r2, [r6, #8]
   1992c:	bne	19614 <argp_error@@Base+0x918>
   19930:	ldr	r2, [r6, #12]
   19934:	b	196b0 <argp_error@@Base+0x9b4>
   19938:	ldr	r2, [r6, #12]
   1993c:	b	196c4 <argp_error@@Base+0x9c8>
   19940:	ldr	r0, [r3, #-8]
   19944:	cmp	r0, #0
   19948:	bne	19380 <argp_error@@Base+0x684>
   1994c:	ldr	r0, [r3, #-4]
   19950:	cmp	r0, #0
   19954:	bne	19380 <argp_error@@Base+0x684>
   19958:	ldm	r1, {r0, r3}
   1995c:	add	ip, r2, r2, lsl #1
   19960:	add	r0, r0, ip
   19964:	add	r2, r3, r2
   19968:	stm	r1, {r0, r2}
   1996c:	b	1939c <argp_error@@Base+0x6a0>
   19970:	ldr	r0, [r2, #-8]
   19974:	cmp	r0, #0
   19978:	bne	193f4 <argp_error@@Base+0x6f8>
   1997c:	ldr	r0, [r2, #-4]
   19980:	cmp	r0, #0
   19984:	bne	193f4 <argp_error@@Base+0x6f8>
   19988:	ldm	r6, {r0, r2}
   1998c:	add	ip, r1, r1, lsl #1
   19990:	add	r0, r0, ip
   19994:	add	r1, r2, r1
   19998:	stm	r6, {r0, r1}
   1999c:	b	19410 <argp_error@@Base+0x714>
   199a0:	ldr	r0, [r2, #-8]
   199a4:	cmp	r0, #0
   199a8:	bne	19464 <argp_error@@Base+0x768>
   199ac:	ldr	r0, [r2, #-4]
   199b0:	cmp	r0, #0
   199b4:	bne	19464 <argp_error@@Base+0x768>
   199b8:	ldm	r6, {r0, r2}
   199bc:	add	ip, r1, r1, lsl #1
   199c0:	add	r0, r0, ip
   199c4:	add	r1, r2, r1
   199c8:	stm	r6, {r0, r1}
   199cc:	b	19480 <argp_error@@Base+0x784>
   199d0:	ldr	r2, [r6, #12]
   199d4:	b	19710 <argp_error@@Base+0xa14>
   199d8:	ldr	r2, [r6, #12]
   199dc:	b	196f4 <argp_error@@Base+0x9f8>
   199e0:	ldr	r0, [r2, #-8]
   199e4:	cmp	r0, #0
   199e8:	bne	194d0 <argp_error@@Base+0x7d4>
   199ec:	ldr	r0, [r2, #-4]
   199f0:	cmp	r0, #0
   199f4:	bne	194d0 <argp_error@@Base+0x7d4>
   199f8:	ldm	r6, {r0, r2}
   199fc:	add	ip, r1, r1, lsl #1
   19a00:	add	r0, r0, ip
   19a04:	add	r1, r2, r1
   19a08:	stm	r6, {r0, r1}
   19a0c:	b	194ec <argp_error@@Base+0x7f0>

00019a10 <argp_parse@@Base>:
   19a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a14:	add	fp, sp, #32
   19a18:	tst	r3, #1
   19a1c:	sub	sp, sp, #220	; 0xdc
   19a20:	mov	r7, r3
   19a24:	mov	r8, r0
   19a28:	str	r1, [fp, #-240]	; 0xffffff10
   19a2c:	str	r2, [fp, #-236]	; 0xffffff14
   19a30:	bne	19a5c <argp_parse@@Base+0x4c>
   19a34:	ldr	r3, [pc, #3488]	; 1a7dc <argp_parse@@Base+0xdcc>
   19a38:	ldr	r4, [pc, #3488]	; 1a7e0 <argp_parse@@Base+0xdd0>
   19a3c:	ldr	r2, [r3]
   19a40:	cmp	r2, #0
   19a44:	ldreq	r2, [fp, #-236]	; 0xffffff14
   19a48:	ldreq	r2, [r2]
   19a4c:	streq	r2, [r3]
   19a50:	ldr	r3, [r4]
   19a54:	cmp	r3, #0
   19a58:	beq	1a13c <argp_parse@@Base+0x72c>
   19a5c:	ands	r3, r7, #16
   19a60:	beq	1a020 <argp_parse@@Base+0x610>
   19a64:	sub	r5, fp, #196	; 0xc4
   19a68:	mov	r0, r5
   19a6c:	mov	r2, #36	; 0x24
   19a70:	mov	r1, #0
   19a74:	bl	11358 <memset@plt>
   19a78:	ands	r3, r7, #4
   19a7c:	str	r3, [fp, #-244]	; 0xffffff0c
   19a80:	mov	r3, #0
   19a84:	moveq	r0, #1
   19a88:	movne	r0, #0
   19a8c:	cmp	r8, r3
   19a90:	str	r3, [fp, #-224]	; 0xffffff20
   19a94:	str	r3, [fp, #-220]	; 0xffffff24
   19a98:	str	r3, [fp, #-216]	; 0xffffff28
   19a9c:	str	r0, [fp, #-228]	; 0xffffff1c
   19aa0:	beq	19b14 <argp_parse@@Base+0x104>
   19aa4:	ldr	r4, [r8, #16]
   19aa8:	ldr	r3, [r8]
   19aac:	cmp	r3, #0
   19ab0:	movne	r2, #1
   19ab4:	strne	r2, [fp, #-220]	; 0xffffff24
   19ab8:	movne	r2, #0
   19abc:	bne	19ac8 <argp_parse@@Base+0xb8>
   19ac0:	b	1a608 <argp_parse@@Base+0xbf8>
   19ac4:	add	r2, r2, #1
   19ac8:	add	r3, r3, #24
   19acc:	ldr	r1, [r3, #-20]	; 0xffffffec
   19ad0:	cmp	r1, #0
   19ad4:	bne	19ac4 <argp_parse@@Base+0xb4>
   19ad8:	ldr	r1, [r3, #-24]	; 0xffffffe8
   19adc:	cmp	r1, #0
   19ae0:	bne	19ac4 <argp_parse@@Base+0xb4>
   19ae4:	ldr	r1, [r3, #-8]
   19ae8:	cmp	r1, #0
   19aec:	bne	19ac4 <argp_parse@@Base+0xb4>
   19af0:	ldr	r1, [r3, #-4]
   19af4:	cmp	r1, #0
   19af8:	bne	19ac4 <argp_parse@@Base+0xb4>
   19afc:	add	r3, r2, r2, lsl #1
   19b00:	add	r0, r3, r0
   19b04:	str	r2, [fp, #-224]	; 0xffffff20
   19b08:	str	r0, [fp, #-228]	; 0xffffff1c
   19b0c:	mov	r6, #72	; 0x48
   19b10:	b	1a620 <argp_parse@@Base+0xc10>
   19b14:	mov	sl, #36	; 0x24
   19b18:	mov	r6, sl
   19b1c:	mov	r4, r8
   19b20:	mov	r3, #52	; 0x34
   19b24:	str	r3, [fp, #-232]	; 0xffffff18
   19b28:	add	r0, r3, r0
   19b2c:	add	r0, r0, #1
   19b30:	bl	1bf70 <argp_parse@@Base+0x2560>
   19b34:	cmp	r0, #0
   19b38:	mov	r9, r0
   19b3c:	str	r0, [fp, #-40]	; 0xffffffd8
   19b40:	moveq	r5, #12
   19b44:	beq	19f40 <argp_parse@@Base+0x530>
   19b48:	mov	lr, r5
   19b4c:	mov	r3, #1
   19b50:	str	r3, [fp, #-196]	; 0xffffff3c
   19b54:	str	r3, [fp, #-192]	; 0xffffff40
   19b58:	ldm	lr!, {r0, r1, r2, r3}
   19b5c:	sub	ip, fp, #148	; 0x94
   19b60:	add	r5, r9, sl
   19b64:	ldr	sl, [fp, #-232]	; 0xffffff18
   19b68:	stmia	ip!, {r0, r1, r2, r3}
   19b6c:	add	r6, r9, r6
   19b70:	ldm	lr!, {r0, r1, r2, r3}
   19b74:	add	sl, r9, sl
   19b78:	str	r6, [fp, #-104]	; 0xffffff98
   19b7c:	str	r5, [fp, #-152]	; 0xffffff68
   19b80:	ldr	lr, [lr]
   19b84:	stmia	ip!, {r0, r1, r2, r3}
   19b88:	mov	r2, r4
   19b8c:	mov	r0, r6
   19b90:	mov	r1, #0
   19b94:	str	r9, [fp, #-112]	; 0xffffff90
   19b98:	str	lr, [ip]
   19b9c:	str	sl, [fp, #-156]	; 0xffffff64
   19ba0:	sub	r4, fp, #160	; 0xa0
   19ba4:	bl	11358 <memset@plt>
   19ba8:	tst	r7, #8
   19bac:	str	r5, [fp, #-204]	; 0xffffff34
   19bb0:	str	sl, [fp, #-208]	; 0xffffff30
   19bb4:	str	r6, [fp, #-200]	; 0xffffff38
   19bb8:	str	r4, [fp, #-212]	; 0xffffff2c
   19bbc:	beq	1a0d4 <argp_parse@@Base+0x6c4>
   19bc0:	ldr	r2, [fp, #-232]	; 0xffffff18
   19bc4:	add	sl, sl, #1
   19bc8:	mov	r3, #45	; 0x2d
   19bcc:	str	sl, [fp, #-208]	; 0xffffff30
   19bd0:	strb	r3, [r9, r2]
   19bd4:	mov	r2, #0
   19bd8:	strb	r2, [sl]
   19bdc:	ldr	r3, [fp, #-204]	; 0xffffff34
   19be0:	cmp	r8, r2
   19be4:	str	r2, [r3]
   19be8:	str	r8, [fp, #-160]	; 0xffffff60
   19bec:	beq	1a104 <argp_parse@@Base+0x6f4>
   19bf0:	sub	r1, fp, #212	; 0xd4
   19bf4:	mov	r0, r8
   19bf8:	str	r1, [sp]
   19bfc:	ldr	r3, [fp, #-112]	; 0xffffff90
   19c00:	mov	r1, r2
   19c04:	bl	18ea8 <argp_error@@Base+0x1ac>
   19c08:	ldr	r8, [fp, #-160]	; 0xffffff60
   19c0c:	ldr	r5, [fp, #-112]	; 0xffffff90
   19c10:	mov	r6, r0
   19c14:	str	r0, [fp, #-108]	; 0xffffff94
   19c18:	mov	r2, #56	; 0x38
   19c1c:	mov	r1, #0
   19c20:	sub	r0, fp, #96	; 0x60
   19c24:	bl	11358 <memset@plt>
   19c28:	ldr	r2, [pc, #2996]	; 1a7e4 <argp_parse@@Base+0xdd4>
   19c2c:	ldr	r3, [pc, #2996]	; 1a7e8 <argp_parse@@Base+0xdd8>
   19c30:	ldr	r0, [fp, #-240]	; 0xffffff10
   19c34:	ldr	r1, [r2]
   19c38:	str	r0, [fp, #-92]	; 0xffffffa4
   19c3c:	ldr	r2, [r3]
   19c40:	ldr	r0, [fp, #-236]	; 0xffffff14
   19c44:	mov	r3, #1
   19c48:	cmp	r5, r6
   19c4c:	str	r8, [fp, #-96]	; 0xffffffa0
   19c50:	str	r0, [fp, #-88]	; 0xffffffa8
   19c54:	str	r7, [fp, #-80]	; 0xffffffb0
   19c58:	str	r4, [fp, #-44]	; 0xffffffd4
   19c5c:	str	r1, [fp, #-52]	; 0xffffffcc
   19c60:	str	r2, [fp, #-48]	; 0xffffffd0
   19c64:	str	r3, [fp, #-100]	; 0xffffff9c
   19c68:	bcc	19f4c <argp_parse@@Base+0x53c>
   19c6c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   19c70:	tst	r3, #2
   19c74:	bne	1a114 <argp_parse@@Base+0x704>
   19c78:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19c7c:	ldr	r4, [fp, #-92]	; 0xffffffa4
   19c80:	mov	r2, #1
   19c84:	str	r2, [fp, #-144]	; 0xffffff70
   19c88:	ldr	r2, [fp, #-236]	; 0xffffff14
   19c8c:	cmp	r2, r3
   19c90:	beq	1a6b4 <argp_parse@@Base+0xca4>
   19c94:	ldr	r3, [pc, #2884]	; 1a7e0 <argp_parse@@Base+0xdd0>
   19c98:	ldr	r3, [r3]
   19c9c:	str	r3, [fp, #-56]	; 0xffffffc8
   19ca0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19ca4:	ldr	r5, [fp, #-84]	; 0xffffffac
   19ca8:	ldr	sl, [pc, #2876]	; 1a7ec <argp_parse@@Base+0xddc>
   19cac:	mov	r0, r4
   19cb0:	mov	r6, #0
   19cb4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   19cb8:	cmp	r3, #0
   19cbc:	beq	1a150 <argp_parse@@Base+0x740>
   19cc0:	cmp	r3, r5
   19cc4:	strgt	r6, [fp, #-72]	; 0xffffffb8
   19cc8:	bgt	1a150 <argp_parse@@Base+0x740>
   19ccc:	cmp	r5, r0
   19cd0:	blt	1a4ec <argp_parse@@Base+0xadc>
   19cd4:	cmp	r5, r0
   19cd8:	bne	1a4f8 <argp_parse@@Base+0xae8>
   19cdc:	ldr	r6, [fp, #-112]	; 0xffffff90
   19ce0:	ldr	ip, [fp, #-108]	; 0xffffff94
   19ce4:	cmp	r6, ip
   19ce8:	bcs	1a77c <argp_parse@@Base+0xd6c>
   19cec:	mov	r5, #0
   19cf0:	add	r6, r6, #36	; 0x24
   19cf4:	mov	r8, r5
   19cf8:	ldr	r7, [pc, #2800]	; 1a7f0 <argp_parse@@Base+0xde0>
   19cfc:	mov	r0, r5
   19d00:	b	19d48 <argp_parse@@Base+0x338>
   19d04:	ldr	ip, [r6, #-4]
   19d08:	str	ip, [fp, #-60]	; 0xffffffc4
   19d0c:	ldr	ip, [r6, #-12]
   19d10:	str	ip, [fp, #-68]	; 0xffffffbc
   19d14:	ldr	ip, [r6, #-8]
   19d18:	str	r3, [fp, #-76]	; 0xffffffb4
   19d1c:	str	ip, [fp, #-64]	; 0xffffffc0
   19d20:	blx	r4
   19d24:	ldr	r3, [fp, #-60]	; 0xffffffc4
   19d28:	str	r3, [r6, #-4]
   19d2c:	ldr	ip, [fp, #-108]	; 0xffffff94
   19d30:	cmp	ip, r6
   19d34:	bls	1a724 <argp_parse@@Base+0xd14>
   19d38:	cmp	r0, #7
   19d3c:	cmpne	r0, #0
   19d40:	bne	1a6e4 <argp_parse@@Base+0xcd4>
   19d44:	add	r6, r6, #36	; 0x24
   19d48:	ldr	r3, [r6, #-24]	; 0xffffffe8
   19d4c:	cmp	r3, #0
   19d50:	bne	19d30 <argp_parse@@Base+0x320>
   19d54:	ldr	r4, [r6, #-36]	; 0xffffffdc
   19d58:	sub	r2, fp, #96	; 0x60
   19d5c:	cmp	r4, #0
   19d60:	mov	r1, r8
   19d64:	mov	r0, r7
   19d68:	bne	19d04 <argp_parse@@Base+0x2f4>
   19d6c:	cmp	ip, r6
   19d70:	mov	r0, #7
   19d74:	bhi	19d44 <argp_parse@@Base+0x334>
   19d78:	ldr	r6, [fp, #-112]	; 0xffffff90
   19d7c:	sub	r4, ip, #36	; 0x24
   19d80:	cmp	r6, r4
   19d84:	movls	r5, #7
   19d88:	bhi	19e10 <argp_parse@@Base+0x400>
   19d8c:	cmp	r5, #7
   19d90:	cmpne	r5, #0
   19d94:	bne	1a6f8 <argp_parse@@Base+0xce8>
   19d98:	sub	r4, r4, #36	; 0x24
   19d9c:	mov	r8, #0
   19da0:	ldr	r7, [pc, #2636]	; 1a7f4 <argp_parse@@Base+0xde4>
   19da4:	b	19df0 <argp_parse@@Base+0x3e0>
   19da8:	ldr	ip, [r4, #68]	; 0x44
   19dac:	ldr	lr, [r4, #48]	; 0x30
   19db0:	str	ip, [fp, #-60]	; 0xffffffc4
   19db4:	ldr	ip, [r4, #60]	; 0x3c
   19db8:	str	ip, [fp, #-68]	; 0xffffffbc
   19dbc:	ldr	ip, [r4, #64]	; 0x40
   19dc0:	str	lr, [fp, #-76]	; 0xffffffb4
   19dc4:	str	ip, [fp, #-64]	; 0xffffffc0
   19dc8:	blx	r3
   19dcc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   19dd0:	str	r3, [r4, #68]	; 0x44
   19dd4:	ldr	r6, [fp, #-112]	; 0xffffff90
   19dd8:	cmp	r6, r4
   19ddc:	bhi	1a774 <argp_parse@@Base+0xd64>
   19de0:	cmp	r0, #7
   19de4:	cmpne	r0, #0
   19de8:	bne	1a708 <argp_parse@@Base+0xcf8>
   19dec:	sub	r4, r4, #36	; 0x24
   19df0:	ldr	r3, [r4, #36]	; 0x24
   19df4:	sub	r2, fp, #96	; 0x60
   19df8:	cmp	r3, #0
   19dfc:	mov	r1, r8
   19e00:	mov	r0, r7
   19e04:	bne	19da8 <argp_parse@@Base+0x398>
   19e08:	cmp	r6, r4
   19e0c:	bls	19dec <argp_parse@@Base+0x3dc>
   19e10:	ldr	r3, [fp, #4]
   19e14:	cmp	r3, #0
   19e18:	beq	19e34 <argp_parse@@Base+0x424>
   19e1c:	mov	r5, #0
   19e20:	ldr	r2, [fp, #4]
   19e24:	ldr	r3, [fp, #-84]	; 0xffffffac
   19e28:	str	r3, [r2]
   19e2c:	cmp	r5, #0
   19e30:	bne	1a718 <argp_parse@@Base+0xd08>
   19e34:	ldr	ip, [fp, #-108]	; 0xffffff94
   19e38:	b	1a510 <argp_parse@@Base+0xb00>
   19e3c:	ldr	r6, [fp, #-112]	; 0xffffff90
   19e40:	mov	r5, r0
   19e44:	ldr	ip, [fp, #-108]	; 0xffffff94
   19e48:	cmp	r6, ip
   19e4c:	mov	r4, ip
   19e50:	subcs	r4, ip, #36	; 0x24
   19e54:	bcs	19ec4 <argp_parse@@Base+0x4b4>
   19e58:	ldr	r8, [pc, #2456]	; 1a7f8 <argp_parse@@Base+0xde8>
   19e5c:	add	r6, r6, #36	; 0x24
   19e60:	mov	r9, #0
   19e64:	ldr	r3, [r6, #-36]	; 0xffffffdc
   19e68:	sub	r2, fp, #96	; 0x60
   19e6c:	cmp	r3, #0
   19e70:	mov	r1, r9
   19e74:	mov	r0, r8
   19e78:	mov	r7, r6
   19e7c:	beq	19eb0 <argp_parse@@Base+0x4a0>
   19e80:	ldr	ip, [r6, #-4]
   19e84:	ldr	lr, [r6, #-24]	; 0xffffffe8
   19e88:	str	ip, [fp, #-60]	; 0xffffffc4
   19e8c:	ldr	ip, [r6, #-12]
   19e90:	str	ip, [fp, #-68]	; 0xffffffbc
   19e94:	ldr	ip, [r6, #-8]
   19e98:	str	lr, [fp, #-76]	; 0xffffffb4
   19e9c:	str	ip, [fp, #-64]	; 0xffffffc0
   19ea0:	blx	r3
   19ea4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   19ea8:	str	r3, [r6, #-4]
   19eac:	ldr	r4, [fp, #-108]	; 0xffffff94
   19eb0:	cmp	r7, r4
   19eb4:	add	r6, r6, #36	; 0x24
   19eb8:	bcc	19e64 <argp_parse@@Base+0x454>
   19ebc:	ldr	r6, [fp, #-112]	; 0xffffff90
   19ec0:	sub	r4, r4, #36	; 0x24
   19ec4:	cmp	r6, r4
   19ec8:	bhi	19f30 <argp_parse@@Base+0x520>
   19ecc:	ldr	r8, [pc, #2344]	; 1a7fc <argp_parse@@Base+0xdec>
   19ed0:	sub	r4, r4, #36	; 0x24
   19ed4:	mov	r9, #0
   19ed8:	ldr	r3, [r4, #36]	; 0x24
   19edc:	sub	r2, fp, #96	; 0x60
   19ee0:	cmp	r3, #0
   19ee4:	mov	r1, r9
   19ee8:	mov	r0, r8
   19eec:	mov	r7, r4
   19ef0:	beq	19f24 <argp_parse@@Base+0x514>
   19ef4:	ldr	ip, [r4, #68]	; 0x44
   19ef8:	ldr	lr, [r4, #48]	; 0x30
   19efc:	str	ip, [fp, #-60]	; 0xffffffc4
   19f00:	ldr	ip, [r4, #60]	; 0x3c
   19f04:	str	ip, [fp, #-68]	; 0xffffffbc
   19f08:	ldr	ip, [r4, #64]	; 0x40
   19f0c:	str	lr, [fp, #-76]	; 0xffffffb4
   19f10:	str	ip, [fp, #-64]	; 0xffffffc0
   19f14:	blx	r3
   19f18:	ldr	r3, [fp, #-60]	; 0xffffffc4
   19f1c:	str	r3, [r4, #68]	; 0x44
   19f20:	ldr	r6, [fp, #-112]	; 0xffffff90
   19f24:	cmp	r6, r7
   19f28:	sub	r4, r4, #36	; 0x24
   19f2c:	bls	19ed8 <argp_parse@@Base+0x4c8>
   19f30:	cmp	r5, #7
   19f34:	moveq	r5, #22
   19f38:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19f3c:	bl	1a98c <argp_parse@@Base+0xf7c>
   19f40:	mov	r0, r5
   19f44:	sub	sp, fp, #32
   19f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f4c:	ldr	r3, [fp, #8]
   19f50:	add	r4, r5, #36	; 0x24
   19f54:	str	r3, [r5, #24]
   19f58:	mov	r7, #0
   19f5c:	ldr	r6, [pc, #2204]	; 1a800 <argp_parse@@Base+0xdf0>
   19f60:	b	19fb8 <argp_parse@@Base+0x5a8>
   19f64:	ldr	r2, [r4, #-4]
   19f68:	ldr	r0, [r4, #-24]	; 0xffffffe8
   19f6c:	str	r2, [fp, #-60]	; 0xffffffc4
   19f70:	ldr	r1, [r4, #-12]
   19f74:	sub	r2, fp, #96	; 0x60
   19f78:	str	r1, [fp, #-68]	; 0xffffffbc
   19f7c:	ldr	ip, [r4, #-8]
   19f80:	mov	r1, r7
   19f84:	str	r0, [fp, #-76]	; 0xffffffb4
   19f88:	str	ip, [fp, #-64]	; 0xffffffc0
   19f8c:	mov	r0, r6
   19f90:	blx	r3
   19f94:	ldr	r3, [fp, #-60]	; 0xffffffc4
   19f98:	str	r3, [r4, #-4]
   19f9c:	ldr	r3, [fp, #-108]	; 0xffffff94
   19fa0:	cmp	r3, r4
   19fa4:	bls	1a7b0 <argp_parse@@Base+0xda0>
   19fa8:	cmp	r0, #7
   19fac:	cmpne	r0, #0
   19fb0:	bne	1a0f4 <argp_parse@@Base+0x6e4>
   19fb4:	add	r4, r4, #36	; 0x24
   19fb8:	ldr	r3, [r4, #-20]	; 0xffffffec
   19fbc:	cmp	r3, #0
   19fc0:	ldrne	r3, [r3, #28]
   19fc4:	ldrne	r2, [r4, #-16]
   19fc8:	ldrne	r3, [r3, r2, lsl #2]
   19fcc:	strne	r3, [r4, #-12]
   19fd0:	ldr	r3, [r4, #-36]	; 0xffffffdc
   19fd4:	cmp	r3, #0
   19fd8:	bne	19f64 <argp_parse@@Base+0x554>
   19fdc:	ldr	r3, [r4, #-32]	; 0xffffffe0
   19fe0:	ldr	r3, [r3, #16]
   19fe4:	cmp	r3, #0
   19fe8:	beq	1a010 <argp_parse@@Base+0x600>
   19fec:	ldr	r3, [r3]
   19ff0:	cmp	r3, #0
   19ff4:	beq	1a010 <argp_parse@@Base+0x600>
   19ff8:	ldr	r3, [r4, #-8]
   19ffc:	ldr	r2, [r4, #-12]
   1a000:	str	r2, [r3]
   1a004:	ldr	r3, [r4, #-36]	; 0xffffffdc
   1a008:	cmp	r3, #0
   1a00c:	bne	19f64 <argp_parse@@Base+0x554>
   1a010:	ldr	r3, [fp, #-108]	; 0xffffff94
   1a014:	cmp	r3, r4
   1a018:	bhi	19fb4 <argp_parse@@Base+0x5a4>
   1a01c:	b	19c6c <argp_parse@@Base+0x25c>
   1a020:	sub	sp, sp, #72	; 0x48
   1a024:	add	r4, sp, #8
   1a028:	sub	sp, sp, #40	; 0x28
   1a02c:	add	r6, sp, #8
   1a030:	mov	r1, r3
   1a034:	str	r3, [r6]
   1a038:	str	r3, [r6, #4]
   1a03c:	str	r3, [r6, #8]
   1a040:	str	r3, [r6, #12]
   1a044:	str	r3, [r6, #20]
   1a048:	str	r3, [r6, #24]
   1a04c:	mov	r2, #64	; 0x40
   1a050:	mov	r0, r4
   1a054:	str	r4, [r6, #16]
   1a058:	bl	11358 <memset@plt>
   1a05c:	ldr	r2, [pc, #1952]	; 1a804 <argp_parse@@Base+0xdf4>
   1a060:	cmp	r8, #0
   1a064:	addne	r3, r4, #16
   1a068:	ldr	r2, [r2]
   1a06c:	moveq	r3, r4
   1a070:	ldr	r1, [pc, #1936]	; 1a808 <argp_parse@@Base+0xdf8>
   1a074:	strne	r8, [r4]
   1a078:	cmp	r2, #0
   1a07c:	str	r1, [r3]
   1a080:	beq	1a6cc <argp_parse@@Base+0xcbc>
   1a084:	ldr	r2, [pc, #1920]	; 1a80c <argp_parse@@Base+0xdfc>
   1a088:	add	ip, r3, #32
   1a08c:	str	r2, [r3, #16]
   1a090:	mov	r9, #0
   1a094:	sub	r5, fp, #196	; 0xc4
   1a098:	mov	r1, r9
   1a09c:	mov	r0, r5
   1a0a0:	mov	r2, #36	; 0x24
   1a0a4:	str	r9, [ip]
   1a0a8:	bl	11358 <memset@plt>
   1a0ac:	ands	r3, r7, #4
   1a0b0:	moveq	r0, #1
   1a0b4:	movne	r0, r9
   1a0b8:	str	r3, [fp, #-244]	; 0xffffff0c
   1a0bc:	mov	r8, r6
   1a0c0:	str	r9, [fp, #-224]	; 0xffffff20
   1a0c4:	str	r9, [fp, #-220]	; 0xffffff24
   1a0c8:	str	r9, [fp, #-216]	; 0xffffff28
   1a0cc:	str	r0, [fp, #-228]	; 0xffffff1c
   1a0d0:	b	19aa8 <argp_parse@@Base+0x98>
   1a0d4:	ldr	r3, [fp, #-244]	; 0xffffff0c
   1a0d8:	cmp	r3, #0
   1a0dc:	addne	r3, sl, #1
   1a0e0:	movne	r2, #43	; 0x2b
   1a0e4:	strbne	r2, [sl]
   1a0e8:	strne	r3, [fp, #-208]	; 0xffffff30
   1a0ec:	movne	sl, r3
   1a0f0:	b	19bd4 <argp_parse@@Base+0x1c4>
   1a0f4:	mov	r5, r0
   1a0f8:	mov	r0, r5
   1a0fc:	sub	sp, fp, #32
   1a100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a104:	ldr	r5, [fp, #-112]	; 0xffffff90
   1a108:	mov	r6, r5
   1a10c:	str	r5, [fp, #-108]	; 0xffffff94
   1a110:	b	19c18 <argp_parse@@Base+0x208>
   1a114:	tst	r3, #1
   1a118:	mov	r3, #0
   1a11c:	str	r3, [fp, #-144]	; 0xffffff70
   1a120:	ldr	r4, [fp, #-92]	; 0xffffffa4
   1a124:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1a128:	subne	r3, r3, #4
   1a12c:	addne	r4, r4, #1
   1a130:	strne	r3, [fp, #-88]	; 0xffffffa8
   1a134:	strne	r4, [fp, #-92]	; 0xffffffa4
   1a138:	b	19c88 <argp_parse@@Base+0x278>
   1a13c:	ldr	r3, [fp, #-236]	; 0xffffff14
   1a140:	ldr	r0, [r3]
   1a144:	bl	1a8e0 <argp_parse@@Base+0xed0>
   1a148:	str	r0, [r4]
   1a14c:	b	19a5c <argp_parse@@Base+0x4c>
   1a150:	cmp	r2, #0
   1a154:	beq	19ccc <argp_parse@@Base+0x2bc>
   1a158:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1a15c:	str	r5, [fp, #-148]	; 0xffffff6c
   1a160:	ands	ip, r3, #64	; 0x40
   1a164:	mvn	r3, #0
   1a168:	str	r3, [fp, #-140]	; 0xffffff74
   1a16c:	ldr	r2, [fp, #-156]	; 0xffffff64
   1a170:	ldr	r3, [fp, #-152]	; 0xffffff68
   1a174:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1a178:	beq	1a498 <argp_parse@@Base+0xa88>
   1a17c:	sub	ip, fp, #148	; 0x94
   1a180:	stm	sp, {r6, ip}
   1a184:	bl	1aa60 <argp_parse@@Base+0x1050>
   1a188:	ldr	r5, [fp, #-148]	; 0xffffff6c
   1a18c:	str	r5, [fp, #-84]	; 0xffffffac
   1a190:	mov	r7, r0
   1a194:	cmn	r7, #1
   1a198:	beq	1a4b8 <argp_parse@@Base+0xaa8>
   1a19c:	cmp	r7, #63	; 0x3f
   1a1a0:	beq	1a5bc <argp_parse@@Base+0xbac>
   1a1a4:	cmp	r7, #1
   1a1a8:	beq	1a300 <argp_parse@@Base+0x8f0>
   1a1ac:	asrs	r8, r7, #24
   1a1b0:	bne	1a25c <argp_parse@@Base+0x84c>
   1a1b4:	mov	r1, r7
   1a1b8:	ldr	r0, [fp, #-156]	; 0xffffff64
   1a1bc:	bl	11310 <strchr@plt>
   1a1c0:	cmp	r0, #0
   1a1c4:	beq	1a2cc <argp_parse@@Base+0x8bc>
   1a1c8:	ldr	r4, [fp, #-112]	; 0xffffff90
   1a1cc:	ldr	r2, [fp, #-108]	; 0xffffff94
   1a1d0:	cmp	r4, r2
   1a1d4:	bcc	1a1e8 <argp_parse@@Base+0x7d8>
   1a1d8:	b	1a2cc <argp_parse@@Base+0x8bc>
   1a1dc:	add	r4, r4, #36	; 0x24
   1a1e0:	cmp	r4, r2
   1a1e4:	bcs	1a2cc <argp_parse@@Base+0x8bc>
   1a1e8:	ldr	r3, [r4, #8]
   1a1ec:	cmp	r0, r3
   1a1f0:	bcs	1a1dc <argp_parse@@Base+0x7cc>
   1a1f4:	ldr	r3, [r4]
   1a1f8:	cmp	r3, #0
   1a1fc:	beq	1a2cc <argp_parse@@Base+0x8bc>
   1a200:	ldr	r2, [r4, #32]
   1a204:	ldr	r0, [r4, #28]
   1a208:	ldr	ip, [r4, #24]
   1a20c:	str	r2, [fp, #-60]	; 0xffffffc4
   1a210:	ldr	r2, [r4, #12]
   1a214:	ldr	r1, [fp, #-136]	; 0xffffff78
   1a218:	str	r0, [fp, #-64]	; 0xffffffc0
   1a21c:	str	r2, [fp, #-76]	; 0xffffffb4
   1a220:	str	ip, [fp, #-68]	; 0xffffffbc
   1a224:	sub	r2, fp, #96	; 0x60
   1a228:	mov	r0, r7
   1a22c:	blx	r3
   1a230:	mov	r8, r6
   1a234:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1a238:	str	r3, [r4, #32]
   1a23c:	cmp	r0, #7
   1a240:	beq	1a2c4 <argp_parse@@Base+0x8b4>
   1a244:	cmp	r0, #0
   1a248:	bne	19e3c <argp_parse@@Base+0x42c>
   1a24c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1a250:	ldr	r5, [fp, #-84]	; 0xffffffac
   1a254:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1a258:	b	19cb4 <argp_parse@@Base+0x2a4>
   1a25c:	add	r3, r8, r8, lsl #3
   1a260:	ldr	r2, [fp, #-112]	; 0xffffff90
   1a264:	lsl	r3, r3, #2
   1a268:	sub	r3, r3, #36	; 0x24
   1a26c:	add	r4, r2, r3
   1a270:	ldr	r5, [r2, r3]
   1a274:	ands	r3, r7, #8388608	; 0x800000
   1a278:	movne	r3, #-16777216	; 0xff000000
   1a27c:	cmp	r5, #0
   1a280:	beq	1a450 <argp_parse@@Base+0xa40>
   1a284:	ldr	r0, [r4, #32]
   1a288:	ldr	r2, [r4, #24]
   1a28c:	str	r0, [fp, #-60]	; 0xffffffc4
   1a290:	ldr	r0, [r4, #28]
   1a294:	str	r2, [fp, #-68]	; 0xffffffbc
   1a298:	ldr	r2, [r4, #12]
   1a29c:	str	r0, [fp, #-64]	; 0xffffffc0
   1a2a0:	bic	r0, r7, #-16777216	; 0xff000000
   1a2a4:	str	r2, [fp, #-76]	; 0xffffffb4
   1a2a8:	orr	r0, r0, r3
   1a2ac:	ldr	r1, [fp, #-136]	; 0xffffff78
   1a2b0:	sub	r2, fp, #96	; 0x60
   1a2b4:	blx	r5
   1a2b8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1a2bc:	str	r3, [r4, #32]
   1a2c0:	b	1a23c <argp_parse@@Base+0x82c>
   1a2c4:	cmp	r8, #0
   1a2c8:	bne	1a450 <argp_parse@@Base+0xa40>
   1a2cc:	mov	r2, r7
   1a2d0:	ldr	r3, [pc, #1336]	; 1a810 <argp_parse@@Base+0xe00>
   1a2d4:	ldr	r1, [pc, #1336]	; 1a814 <argp_parse@@Base+0xe04>
   1a2d8:	sub	r0, fp, #96	; 0x60
   1a2dc:	bl	18cfc <argp_error@@Base>
   1a2e0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1a2e4:	mov	r2, #260	; 0x104
   1a2e8:	sub	r0, fp, #96	; 0x60
   1a2ec:	bl	18c4c <argp_state_help@@Base>
   1a2f0:	mov	r5, #7
   1a2f4:	ldr	r6, [fp, #-112]	; 0xffffff90
   1a2f8:	ldr	ip, [fp, #-108]	; 0xffffff94
   1a2fc:	b	19e48 <argp_parse@@Base+0x438>
   1a300:	ldr	r7, [fp, #-136]	; 0xffffff78
   1a304:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a308:	ldr	ip, [fp, #-108]	; 0xffffff94
   1a30c:	sub	r8, r5, #1
   1a310:	cmp	r3, ip
   1a314:	str	r8, [fp, #-84]	; 0xffffffac
   1a318:	bcs	1a444 <argp_parse@@Base+0xa34>
   1a31c:	mov	lr, r8
   1a320:	add	r4, r3, #36	; 0x24
   1a324:	ldr	r3, [r4, #-36]	; 0xffffffdc
   1a328:	add	r5, lr, #1
   1a32c:	cmp	r3, #0
   1a330:	str	r5, [fp, #-84]	; 0xffffffac
   1a334:	sub	r2, fp, #96	; 0x60
   1a338:	mov	r1, r7
   1a33c:	mov	r0, r6
   1a340:	sub	r5, r4, #36	; 0x24
   1a344:	mov	r9, r4
   1a348:	streq	lr, [fp, #-84]	; 0xffffffac
   1a34c:	beq	1a438 <argp_parse@@Base+0xa28>
   1a350:	ldr	ip, [r4, #-4]
   1a354:	ldr	lr, [r4, #-24]	; 0xffffffe8
   1a358:	str	ip, [fp, #-60]	; 0xffffffc4
   1a35c:	ldr	ip, [r4, #-12]
   1a360:	str	ip, [fp, #-68]	; 0xffffffbc
   1a364:	ldr	ip, [r4, #-8]
   1a368:	str	lr, [fp, #-76]	; 0xffffffb4
   1a36c:	str	ip, [fp, #-64]	; 0xffffffc0
   1a370:	blx	r3
   1a374:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1a378:	str	r3, [r4, #-4]
   1a37c:	cmp	r0, #7
   1a380:	beq	1a3bc <argp_parse@@Base+0x9ac>
   1a384:	cmp	r0, #0
   1a388:	bne	19e3c <argp_parse@@Base+0x42c>
   1a38c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1a390:	ldr	r5, [fp, #-84]	; 0xffffffac
   1a394:	cmp	r8, r5
   1a398:	sublt	r8, r5, r8
   1a39c:	ldrlt	r3, [r4, #-24]	; 0xffffffe8
   1a3a0:	movge	r3, #1
   1a3a4:	addlt	r8, r3, r8
   1a3a8:	strlt	r8, [r4, #-24]	; 0xffffffe8
   1a3ac:	ldrlt	r2, [fp, #-100]	; 0xffffff9c
   1a3b0:	strge	r3, [fp, #-100]	; 0xffffff9c
   1a3b4:	movge	r2, r3
   1a3b8:	b	19cb4 <argp_parse@@Base+0x2a4>
   1a3bc:	ldr	lr, [fp, #-84]	; 0xffffffac
   1a3c0:	ldr	r3, [r4, #-36]	; 0xffffffdc
   1a3c4:	sub	lr, lr, #1
   1a3c8:	cmp	r3, #0
   1a3cc:	str	lr, [fp, #-84]	; 0xffffffac
   1a3d0:	beq	1a434 <argp_parse@@Base+0xa24>
   1a3d4:	add	r0, r5, #24
   1a3d8:	ldr	r2, [r5, #12]
   1a3dc:	ldm	r0, {r0, r1, ip}
   1a3e0:	str	r2, [fp, #-76]	; 0xffffffb4
   1a3e4:	sub	r2, fp, #96	; 0x60
   1a3e8:	str	ip, [fp, #-60]	; 0xffffffc4
   1a3ec:	str	r0, [fp, #-68]	; 0xffffffbc
   1a3f0:	str	r1, [fp, #-64]	; 0xffffffc0
   1a3f4:	mov	r0, sl
   1a3f8:	mov	r1, r6
   1a3fc:	blx	r3
   1a400:	ldr	ip, [fp, #-108]	; 0xffffff94
   1a404:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1a408:	cmp	r4, ip
   1a40c:	movcs	r1, #0
   1a410:	movcc	r1, #1
   1a414:	mov	r3, r4
   1a418:	str	r2, [r5, #32]
   1a41c:	cmp	r0, #7
   1a420:	movne	r1, #0
   1a424:	cmp	r1, #0
   1a428:	beq	1a798 <argp_parse@@Base+0xd88>
   1a42c:	ldr	lr, [fp, #-84]	; 0xffffffac
   1a430:	b	1a320 <argp_parse@@Base+0x910>
   1a434:	ldr	ip, [fp, #-108]	; 0xffffff94
   1a438:	cmp	r9, ip
   1a43c:	add	r4, r4, #36	; 0x24
   1a440:	bcc	1a324 <argp_parse@@Base+0x914>
   1a444:	ldr	r5, [fp, #-84]	; 0xffffffac
   1a448:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1a44c:	b	19cd4 <argp_parse@@Base+0x2c4>
   1a450:	ldr	r3, [fp, #-152]	; 0xffffff68
   1a454:	ldr	r2, [r3, #12]
   1a458:	cmp	r7, r2
   1a45c:	bne	1a474 <argp_parse@@Base+0xa64>
   1a460:	b	1a5a8 <argp_parse@@Base+0xb98>
   1a464:	add	r3, r3, #16
   1a468:	ldr	r2, [r3, #12]
   1a46c:	cmp	r7, r2
   1a470:	beq	1a5a8 <argp_parse@@Base+0xb98>
   1a474:	ldr	r2, [r3]
   1a478:	cmp	r2, #0
   1a47c:	bne	1a464 <argp_parse@@Base+0xa54>
   1a480:	ldr	r2, [pc, #912]	; 1a818 <argp_parse@@Base+0xe08>
   1a484:	ldr	r3, [pc, #900]	; 1a810 <argp_parse@@Base+0xe00>
   1a488:	ldr	r1, [pc, #908]	; 1a81c <argp_parse@@Base+0xe0c>
   1a48c:	sub	r0, fp, #96	; 0x60
   1a490:	bl	18cfc <argp_error@@Base>
   1a494:	b	1a2e0 <argp_parse@@Base+0x8d0>
   1a498:	sub	lr, fp, #148	; 0x94
   1a49c:	stm	sp, {ip, lr}
   1a4a0:	bl	1aa0c <argp_parse@@Base+0xffc>
   1a4a4:	ldr	r5, [fp, #-148]	; 0xffffff6c
   1a4a8:	str	r5, [fp, #-84]	; 0xffffffac
   1a4ac:	mov	r7, r0
   1a4b0:	cmn	r7, #1
   1a4b4:	bne	1a19c <argp_parse@@Base+0x78c>
   1a4b8:	cmp	r5, #1
   1a4bc:	str	r6, [fp, #-100]	; 0xffffff9c
   1a4c0:	ble	1a4e0 <argp_parse@@Base+0xad0>
   1a4c4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a4c8:	sub	r3, r5, #-1073741823	; 0xc0000001
   1a4cc:	ldr	r1, [pc, #844]	; 1a820 <argp_parse@@Base+0xe10>
   1a4d0:	ldr	r0, [r2, r3, lsl #2]
   1a4d4:	bl	11124 <strcmp@plt>
   1a4d8:	cmp	r0, #0
   1a4dc:	streq	r5, [fp, #-72]	; 0xffffffb8
   1a4e0:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1a4e4:	cmp	r5, r0
   1a4e8:	bge	19cd4 <argp_parse@@Base+0x2c4>
   1a4ec:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1a4f0:	tst	r3, #4
   1a4f4:	beq	1a5cc <argp_parse@@Base+0xbbc>
   1a4f8:	ldr	r3, [fp, #4]
   1a4fc:	cmp	r3, #0
   1a500:	beq	1a744 <argp_parse@@Base+0xd34>
   1a504:	ldr	r6, [fp, #-112]	; 0xffffff90
   1a508:	ldr	ip, [fp, #-108]	; 0xffffff94
   1a50c:	str	r5, [r3]
   1a510:	sub	r3, ip, #36	; 0x24
   1a514:	cmp	r6, r3
   1a518:	bhi	1a600 <argp_parse@@Base+0xbf0>
   1a51c:	ldr	r7, [pc, #768]	; 1a824 <argp_parse@@Base+0xe14>
   1a520:	sub	r4, ip, #72	; 0x48
   1a524:	mov	r8, #0
   1a528:	ldr	r3, [r4, #36]	; 0x24
   1a52c:	sub	r2, fp, #96	; 0x60
   1a530:	cmp	r3, #0
   1a534:	mov	r1, r8
   1a538:	mov	r0, r7
   1a53c:	beq	1a598 <argp_parse@@Base+0xb88>
   1a540:	ldr	ip, [r4, #68]	; 0x44
   1a544:	ldr	lr, [r4, #48]	; 0x30
   1a548:	str	ip, [fp, #-60]	; 0xffffffc4
   1a54c:	ldr	ip, [r4, #60]	; 0x3c
   1a550:	str	ip, [fp, #-68]	; 0xffffffbc
   1a554:	ldr	ip, [r4, #64]	; 0x40
   1a558:	str	lr, [fp, #-76]	; 0xffffffb4
   1a55c:	str	ip, [fp, #-64]	; 0xffffffc0
   1a560:	blx	r3
   1a564:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1a568:	str	r3, [r4, #68]	; 0x44
   1a56c:	ldr	r6, [fp, #-112]	; 0xffffff90
   1a570:	cmp	r6, r4
   1a574:	bhi	1a5e0 <argp_parse@@Base+0xbd0>
   1a578:	cmp	r0, #7
   1a57c:	cmpne	r0, #0
   1a580:	sub	r4, r4, #36	; 0x24
   1a584:	beq	1a528 <argp_parse@@Base+0xb18>
   1a588:	ldr	r4, [fp, #-108]	; 0xffffff94
   1a58c:	mov	r5, r0
   1a590:	sub	r4, r4, #36	; 0x24
   1a594:	b	19ec4 <argp_parse@@Base+0x4b4>
   1a598:	cmp	r6, r4
   1a59c:	bhi	1a5ec <argp_parse@@Base+0xbdc>
   1a5a0:	sub	r4, r4, #36	; 0x24
   1a5a4:	b	1a528 <argp_parse@@Base+0xb18>
   1a5a8:	ldr	r2, [r3]
   1a5ac:	ldr	r3, [pc, #612]	; 1a818 <argp_parse@@Base+0xe08>
   1a5b0:	cmp	r2, #0
   1a5b4:	moveq	r2, r3
   1a5b8:	b	1a484 <argp_parse@@Base+0xa74>
   1a5bc:	ldr	r3, [fp, #-140]	; 0xffffff74
   1a5c0:	cmn	r3, #1
   1a5c4:	bne	1a2e0 <argp_parse@@Base+0x8d0>
   1a5c8:	b	1a1b4 <argp_parse@@Base+0x7a4>
   1a5cc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1a5d0:	ldr	r7, [r3, r5, lsl #2]
   1a5d4:	add	r5, r5, #1
   1a5d8:	str	r7, [fp, #-136]	; 0xffffff78
   1a5dc:	b	1a304 <argp_parse@@Base+0x8f4>
   1a5e0:	cmp	r0, #7
   1a5e4:	mov	r5, r0
   1a5e8:	bne	1a6a8 <argp_parse@@Base+0xc98>
   1a5ec:	ldr	r4, [fp, #-108]	; 0xffffff94
   1a5f0:	sub	r4, r4, #36	; 0x24
   1a5f4:	cmp	r6, r4
   1a5f8:	movls	r5, #0
   1a5fc:	bls	19ecc <argp_parse@@Base+0x4bc>
   1a600:	mov	r5, #0
   1a604:	b	19f38 <argp_parse@@Base+0x528>
   1a608:	ldr	r3, [r8, #4]
   1a60c:	cmp	r3, #0
   1a610:	moveq	r6, #36	; 0x24
   1a614:	movne	r6, #72	; 0x48
   1a618:	movne	r3, #1
   1a61c:	strne	r3, [fp, #-220]	; 0xffffff24
   1a620:	cmp	r4, #0
   1a624:	beq	1a684 <argp_parse@@Base+0xc74>
   1a628:	ldr	r0, [r4]
   1a62c:	cmp	r0, #0
   1a630:	beq	1a684 <argp_parse@@Base+0xc74>
   1a634:	sub	r1, fp, #228	; 0xe4
   1a638:	bl	1933c <argp_error@@Base+0x640>
   1a63c:	ldr	r3, [fp, #-216]	; 0xffffff28
   1a640:	ldr	r0, [r4, #16]!
   1a644:	add	r3, r3, #1
   1a648:	cmp	r0, #0
   1a64c:	str	r3, [fp, #-216]	; 0xffffff28
   1a650:	bne	1a634 <argp_parse@@Base+0xc24>
   1a654:	ldr	r6, [fp, #-220]	; 0xffffff24
   1a658:	ldr	r2, [fp, #-224]	; 0xffffff20
   1a65c:	add	r6, r6, #1
   1a660:	lsl	r4, r3, #2
   1a664:	add	r6, r6, r6, lsl #3
   1a668:	add	r3, r2, #1
   1a66c:	lsl	r6, r6, #2
   1a670:	add	sl, r4, r6
   1a674:	add	r3, sl, r3, lsl #4
   1a678:	str	r3, [fp, #-232]	; 0xffffff18
   1a67c:	ldr	r0, [fp, #-228]	; 0xffffff1c
   1a680:	b	19b28 <argp_parse@@Base+0x118>
   1a684:	ldr	r4, [fp, #-216]	; 0xffffff28
   1a688:	ldr	r3, [fp, #-224]	; 0xffffff20
   1a68c:	ldr	r0, [fp, #-228]	; 0xffffff1c
   1a690:	lsl	r4, r4, #2
   1a694:	add	r3, r3, #1
   1a698:	add	sl, r4, r6
   1a69c:	add	r3, sl, r3, lsl #4
   1a6a0:	str	r3, [fp, #-232]	; 0xffffff18
   1a6a4:	b	19b28 <argp_parse@@Base+0x118>
   1a6a8:	ldr	r4, [fp, #-108]	; 0xffffff94
   1a6ac:	sub	r4, r4, #36	; 0x24
   1a6b0:	b	19ec4 <argp_parse@@Base+0x4b4>
   1a6b4:	ldr	r0, [r2]
   1a6b8:	cmp	r0, #0
   1a6bc:	beq	19c94 <argp_parse@@Base+0x284>
   1a6c0:	bl	1a8e0 <argp_parse@@Base+0xed0>
   1a6c4:	str	r0, [fp, #-56]	; 0xffffffc8
   1a6c8:	b	19ca0 <argp_parse@@Base+0x290>
   1a6cc:	ldr	r2, [pc, #340]	; 1a828 <argp_parse@@Base+0xe18>
   1a6d0:	ldr	r2, [r2]
   1a6d4:	cmp	r2, #0
   1a6d8:	addeq	ip, r3, #16
   1a6dc:	bne	1a084 <argp_parse@@Base+0x674>
   1a6e0:	b	1a090 <argp_parse@@Base+0x680>
   1a6e4:	ldr	r6, [fp, #-112]	; 0xffffff90
   1a6e8:	sub	ip, ip, #36	; 0x24
   1a6ec:	cmp	r6, ip
   1a6f0:	mov	r5, r0
   1a6f4:	bls	1a70c <argp_parse@@Base+0xcfc>
   1a6f8:	ldr	r3, [fp, #4]
   1a6fc:	cmp	r3, #0
   1a700:	bne	19e20 <argp_parse@@Base+0x410>
   1a704:	b	19e2c <argp_parse@@Base+0x41c>
   1a708:	mov	r5, r0
   1a70c:	ldr	r3, [fp, #4]
   1a710:	cmp	r3, #0
   1a714:	bne	19e20 <argp_parse@@Base+0x410>
   1a718:	cmp	r5, #7
   1a71c:	bne	19e44 <argp_parse@@Base+0x434>
   1a720:	b	1a2e0 <argp_parse@@Base+0x8d0>
   1a724:	ldr	r6, [fp, #-112]	; 0xffffff90
   1a728:	sub	r4, ip, #36	; 0x24
   1a72c:	cmp	r4, r6
   1a730:	mov	r5, r0
   1a734:	bcs	19d8c <argp_parse@@Base+0x37c>
   1a738:	cmp	r5, #7
   1a73c:	beq	19e10 <argp_parse@@Base+0x400>
   1a740:	b	1a6f8 <argp_parse@@Base+0xce8>
   1a744:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1a748:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1a74c:	tst	r3, #2
   1a750:	bne	1a2e4 <argp_parse@@Base+0x8d4>
   1a754:	cmp	r1, #0
   1a758:	beq	1a2e4 <argp_parse@@Base+0x8d4>
   1a75c:	mov	r0, r1
   1a760:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a764:	ldr	r1, [pc, #192]	; 1a82c <argp_parse@@Base+0xe1c>
   1a768:	bl	1131c <fprintf@plt>
   1a76c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1a770:	b	1a2e4 <argp_parse@@Base+0x8d4>
   1a774:	mov	r5, r0
   1a778:	b	1a738 <argp_parse@@Base+0xd28>
   1a77c:	sub	r4, ip, #36	; 0x24
   1a780:	cmp	r6, r4
   1a784:	bls	19d98 <argp_parse@@Base+0x388>
   1a788:	ldr	r3, [fp, #4]
   1a78c:	cmp	r3, #0
   1a790:	bne	19e1c <argp_parse@@Base+0x40c>
   1a794:	b	1a510 <argp_parse@@Base+0xb00>
   1a798:	cmp	r0, #0
   1a79c:	bne	1a7c8 <argp_parse@@Base+0xdb8>
   1a7a0:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1a7a4:	mov	r5, r0
   1a7a8:	str	r0, [fp, #-84]	; 0xffffffac
   1a7ac:	b	1a394 <argp_parse@@Base+0x984>
   1a7b0:	cmp	r0, #7
   1a7b4:	mov	r5, r0
   1a7b8:	beq	19c6c <argp_parse@@Base+0x25c>
   1a7bc:	cmp	r0, #0
   1a7c0:	bne	19f40 <argp_parse@@Base+0x530>
   1a7c4:	b	19c6c <argp_parse@@Base+0x25c>
   1a7c8:	cmp	r0, #7
   1a7cc:	mov	r5, r0
   1a7d0:	beq	1a444 <argp_parse@@Base+0xa34>
   1a7d4:	ldr	r6, [fp, #-112]	; 0xffffff90
   1a7d8:	b	19e48 <argp_parse@@Base+0x438>
   1a7dc:	andeq	r1, r3, r4, lsr #12
   1a7e0:	andeq	r1, r3, r0, lsr #12
   1a7e4:	andeq	r1, r3, r8, lsr #12
   1a7e8:	andeq	r1, r3, ip, lsr #12
   1a7ec:	tsteq	r0, r6
   1a7f0:	tsteq	r0, r2
   1a7f4:	tsteq	r0, r1
   1a7f8:	tsteq	r0, r5
   1a7fc:	tsteq	r0, r7
   1a800:	tsteq	r0, r3
   1a804:	andeq	r1, r3, r0, ror #13
   1a808:	andeq	pc, r1, r8, lsr #16
   1a80c:	andeq	pc, r1, r4, asr #16
   1a810:	andeq	pc, r1, r0, ror #16
   1a814:	andeq	pc, r1, r4, ror r9	; <UNPREDICTABLE>
   1a818:	andeq	pc, r1, ip, ror #18
   1a81c:	andeq	pc, r1, ip, ror r9	; <UNPREDICTABLE>
   1a820:	andeq	pc, r1, r0, ror r9	; <UNPREDICTABLE>
   1a824:	tsteq	r0, r4
   1a828:	andeq	r1, r3, ip, lsl #13
   1a82c:	andeq	pc, r1, r8, lsl #19
   1a830:	cmp	r1, #0
   1a834:	beq	1a874 <argp_parse@@Base+0xe64>
   1a838:	ldr	r2, [r1, #52]	; 0x34
   1a83c:	ldr	r3, [r2, #48]	; 0x30
   1a840:	ldr	r1, [r2, #52]	; 0x34
   1a844:	cmp	r3, r1
   1a848:	bcs	1a874 <argp_parse@@Base+0xe64>
   1a84c:	ldr	r2, [r3, #4]
   1a850:	cmp	r0, r2
   1a854:	bne	1a868 <argp_parse@@Base+0xe58>
   1a858:	b	1a87c <argp_parse@@Base+0xe6c>
   1a85c:	ldr	r2, [r3, #4]
   1a860:	cmp	r2, r0
   1a864:	beq	1a87c <argp_parse@@Base+0xe6c>
   1a868:	add	r3, r3, #36	; 0x24
   1a86c:	cmp	r3, r1
   1a870:	bcc	1a85c <argp_parse@@Base+0xe4c>
   1a874:	mov	r0, #0
   1a878:	bx	lr
   1a87c:	ldr	r0, [r3, #24]
   1a880:	bx	lr
   1a884:	ldr	ip, [pc, #32]	; 1a8ac <argp_parse@@Base+0xe9c>
   1a888:	push	{lr}		; (str lr, [sp, #-4]!)
   1a88c:	sub	sp, sp, #12
   1a890:	ldm	ip, {r1, ip}
   1a894:	ldr	r3, [pc, #20]	; 1a8b0 <argp_parse@@Base+0xea0>
   1a898:	ldr	r2, [pc, #20]	; 1a8b4 <argp_parse@@Base+0xea4>
   1a89c:	str	ip, [sp]
   1a8a0:	bl	1adf0 <argp_parse@@Base+0x13e0>
   1a8a4:	add	sp, sp, #12
   1a8a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8ac:	muleq	r3, r0, r6
   1a8b0:	andeq	pc, r1, r0, ror #20
   1a8b4:	andeq	pc, r1, r0, ror sl	; <UNPREDICTABLE>
   1a8b8:	ldr	r3, [pc, #20]	; 1a8d4 <argp_parse@@Base+0xec4>
   1a8bc:	ldr	r2, [pc, #20]	; 1a8d8 <argp_parse@@Base+0xec8>
   1a8c0:	ldr	ip, [pc, #20]	; 1a8dc <argp_parse@@Base+0xecc>
   1a8c4:	str	r0, [r3]
   1a8c8:	str	ip, [r2]
   1a8cc:	str	r1, [r3, #4]
   1a8d0:	bx	lr
   1a8d4:	muleq	r3, r0, r6
   1a8d8:	andeq	r1, r3, ip, lsl #13
   1a8dc:	andeq	sl, r1, r4, lsl #17
   1a8e0:	ldrb	r3, [r0]
   1a8e4:	cmp	r3, #47	; 0x2f
   1a8e8:	bne	1a8f8 <argp_parse@@Base+0xee8>
   1a8ec:	ldrb	r3, [r0, #1]!
   1a8f0:	cmp	r3, #47	; 0x2f
   1a8f4:	beq	1a8ec <argp_parse@@Base+0xedc>
   1a8f8:	cmp	r3, #0
   1a8fc:	bxeq	lr
   1a900:	mov	r2, #0
   1a904:	push	{lr}		; (str lr, [sp, #-4]!)
   1a908:	mov	ip, r2
   1a90c:	mov	r1, r0
   1a910:	mov	lr, #1
   1a914:	cmp	r3, #47	; 0x2f
   1a918:	moveq	r2, lr
   1a91c:	beq	1a92c <argp_parse@@Base+0xf1c>
   1a920:	cmp	r2, #0
   1a924:	movne	r0, r1
   1a928:	movne	r2, ip
   1a92c:	ldrb	r3, [r1, #1]!
   1a930:	cmp	r3, #0
   1a934:	bne	1a914 <argp_parse@@Base+0xf04>
   1a938:	pop	{pc}		; (ldr pc, [sp], #4)
   1a93c:	push	{r4, lr}
   1a940:	mov	r4, r0
   1a944:	bl	11304 <strlen@plt>
   1a948:	cmp	r0, #1
   1a94c:	popls	{r4, pc}
   1a950:	sub	r3, r0, #1
   1a954:	add	r2, r4, r3
   1a958:	ldrb	r1, [r4, r3]
   1a95c:	cmp	r1, #47	; 0x2f
   1a960:	popne	{r4, pc}
   1a964:	cmp	r3, #1
   1a968:	beq	1a97c <argp_parse@@Base+0xf6c>
   1a96c:	ldrb	r1, [r2, #-1]!
   1a970:	sub	r0, r3, #1
   1a974:	cmp	r1, #47	; 0x2f
   1a978:	beq	1a984 <argp_parse@@Base+0xf74>
   1a97c:	mov	r0, r3
   1a980:	pop	{r4, pc}
   1a984:	mov	r3, r0
   1a988:	b	1a964 <argp_parse@@Base+0xf54>
   1a98c:	push	{r4, r5, lr}
   1a990:	sub	sp, sp, #12
   1a994:	mov	r5, r0
   1a998:	bl	11328 <__errno_location@plt>
   1a99c:	mov	r2, #0
   1a9a0:	mov	r4, r0
   1a9a4:	ldr	r3, [r0]
   1a9a8:	str	r2, [r4]
   1a9ac:	mov	r0, r5
   1a9b0:	str	r3, [sp]
   1a9b4:	str	r3, [sp, #4]
   1a9b8:	bl	11190 <free@plt>
   1a9bc:	ldr	r3, [r4]
   1a9c0:	add	r2, sp, #8
   1a9c4:	cmp	r3, #0
   1a9c8:	moveq	r3, #4
   1a9cc:	movne	r3, #0
   1a9d0:	add	r3, r2, r3
   1a9d4:	ldr	r3, [r3, #-8]
   1a9d8:	str	r3, [r4]
   1a9dc:	add	sp, sp, #12
   1a9e0:	pop	{r4, r5, pc}
   1a9e4:	push	{lr}		; (str lr, [sp, #-4]!)
   1a9e8:	sub	sp, sp, #20
   1a9ec:	mov	ip, #0
   1a9f0:	ldr	lr, [sp, #24]
   1a9f4:	str	ip, [sp, #8]
   1a9f8:	str	lr, [sp]
   1a9fc:	str	ip, [sp, #4]
   1aa00:	bl	1d5ac <argp_parse@@Base+0x3b9c>
   1aa04:	add	sp, sp, #20
   1aa08:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa0c:	push	{r4, lr}
   1aa10:	sub	sp, sp, #16
   1aa14:	mov	ip, #0
   1aa18:	ldr	r4, [sp, #24]
   1aa1c:	ldr	lr, [sp, #28]
   1aa20:	str	r4, [sp]
   1aa24:	str	lr, [sp, #8]
   1aa28:	str	ip, [sp, #12]
   1aa2c:	str	ip, [sp, #4]
   1aa30:	bl	1d038 <argp_parse@@Base+0x3628>
   1aa34:	add	sp, sp, #16
   1aa38:	pop	{r4, pc}
   1aa3c:	push	{r4, lr}
   1aa40:	sub	sp, sp, #16
   1aa44:	mov	lr, #0
   1aa48:	ldr	r4, [sp, #24]
   1aa4c:	mov	ip, #1
   1aa50:	stm	sp, {r4, ip, lr}
   1aa54:	bl	1d5ac <argp_parse@@Base+0x3b9c>
   1aa58:	add	sp, sp, #16
   1aa5c:	pop	{r4, pc}
   1aa60:	push	{r4, r5, lr}
   1aa64:	sub	sp, sp, #20
   1aa68:	mov	lr, #0
   1aa6c:	ldr	r5, [sp, #32]
   1aa70:	ldr	r4, [sp, #36]	; 0x24
   1aa74:	mov	ip, #1
   1aa78:	str	r5, [sp]
   1aa7c:	str	r4, [sp, #8]
   1aa80:	str	lr, [sp, #12]
   1aa84:	str	ip, [sp, #4]
   1aa88:	bl	1d038 <argp_parse@@Base+0x3628>
   1aa8c:	add	sp, sp, #20
   1aa90:	pop	{r4, r5, pc}
   1aa94:	push	{r4, r5, r6, lr}
   1aa98:	subs	r4, r0, #0
   1aa9c:	beq	1ab10 <argp_parse@@Base+0x1100>
   1aaa0:	mov	r1, #47	; 0x2f
   1aaa4:	bl	113b8 <strrchr@plt>
   1aaa8:	subs	r5, r0, #0
   1aaac:	beq	1aafc <argp_parse@@Base+0x10ec>
   1aab0:	add	r6, r5, #1
   1aab4:	sub	r3, r6, r4
   1aab8:	cmp	r3, #6
   1aabc:	ble	1aafc <argp_parse@@Base+0x10ec>
   1aac0:	mov	r2, #7
   1aac4:	ldr	r1, [pc, #96]	; 1ab2c <argp_parse@@Base+0x111c>
   1aac8:	sub	r0, r5, #6
   1aacc:	bl	11448 <strncmp@plt>
   1aad0:	cmp	r0, #0
   1aad4:	bne	1aafc <argp_parse@@Base+0x10ec>
   1aad8:	mov	r2, #3
   1aadc:	ldr	r1, [pc, #76]	; 1ab30 <argp_parse@@Base+0x1120>
   1aae0:	mov	r0, r6
   1aae4:	bl	11448 <strncmp@plt>
   1aae8:	cmp	r0, #0
   1aaec:	movne	r4, r6
   1aaf0:	ldreq	r3, [pc, #60]	; 1ab34 <argp_parse@@Base+0x1124>
   1aaf4:	addeq	r4, r5, #4
   1aaf8:	streq	r4, [r3]
   1aafc:	ldr	r2, [pc, #52]	; 1ab38 <argp_parse@@Base+0x1128>
   1ab00:	ldr	r3, [pc, #52]	; 1ab3c <argp_parse@@Base+0x112c>
   1ab04:	str	r4, [r2]
   1ab08:	str	r4, [r3]
   1ab0c:	pop	{r4, r5, r6, pc}
   1ab10:	ldr	r3, [pc, #40]	; 1ab40 <argp_parse@@Base+0x1130>
   1ab14:	mov	r2, #55	; 0x37
   1ab18:	mov	r1, #1
   1ab1c:	ldr	r3, [r3]
   1ab20:	ldr	r0, [pc, #28]	; 1ab44 <argp_parse@@Base+0x1134>
   1ab24:	bl	11250 <fwrite@plt>
   1ab28:	bl	11454 <abort@plt>
   1ab2c:			; <UNDEFINED> instruction: 0x0001fab8
   1ab30:	andeq	pc, r1, r0, asr #21
   1ab34:	andeq	r1, r3, r0, lsr #12
   1ab38:	muleq	r3, r8, r6
   1ab3c:	andeq	r1, r3, r4, lsr #12
   1ab40:	andeq	r1, r3, r8, lsr #12
   1ab44:	andeq	pc, r1, r0, lsl #21
   1ab48:	push	{r4, r5, r6, r7, lr}
   1ab4c:	sub	sp, sp, #36	; 0x24
   1ab50:	cmp	r1, #0
   1ab54:	mov	r4, r0
   1ab58:	ldr	r5, [sp, #56]	; 0x38
   1ab5c:	ldr	r6, [sp, #60]	; 0x3c
   1ab60:	beq	1ada0 <argp_parse@@Base+0x1390>
   1ab64:	str	r3, [sp]
   1ab68:	mov	r3, r2
   1ab6c:	mov	r2, r1
   1ab70:	ldr	r1, [pc, #564]	; 1adac <argp_parse@@Base+0x139c>
   1ab74:	bl	1131c <fprintf@plt>
   1ab78:	ldr	r3, [pc, #560]	; 1adb0 <argp_parse@@Base+0x13a0>
   1ab7c:	ldr	r2, [pc, #560]	; 1adb4 <argp_parse@@Base+0x13a4>
   1ab80:	ldr	r1, [pc, #560]	; 1adb8 <argp_parse@@Base+0x13a8>
   1ab84:	mov	r0, r4
   1ab88:	bl	1131c <fprintf@plt>
   1ab8c:	mov	r1, r4
   1ab90:	mov	r0, #10
   1ab94:	bl	113d0 <fputc@plt>
   1ab98:	ldr	r1, [pc, #540]	; 1adbc <argp_parse@@Base+0x13ac>
   1ab9c:	ldr	r2, [pc, #540]	; 1adc0 <argp_parse@@Base+0x13b0>
   1aba0:	mov	r0, r4
   1aba4:	bl	1131c <fprintf@plt>
   1aba8:	mov	r1, r4
   1abac:	mov	r0, #10
   1abb0:	bl	113d0 <fputc@plt>
   1abb4:	cmp	r6, #9
   1abb8:	ldrls	pc, [pc, r6, lsl #2]
   1abbc:	b	1abe8 <argp_parse@@Base+0x11d8>
   1abc0:	andeq	sl, r1, r8, lsr #24
   1abc4:	andeq	sl, r1, r4, ror ip
   1abc8:	andeq	sl, r1, ip, lsl #25
   1abcc:	andeq	sl, r1, r4, lsr #25
   1abd0:	andeq	sl, r1, r4, asr #25
   1abd4:	andeq	sl, r1, ip, ror #25
   1abd8:	andeq	sl, r1, ip, lsl #26
   1abdc:	andeq	sl, r1, r4, lsr sp
   1abe0:	andeq	sl, r1, r4, ror #26
   1abe4:	andeq	sl, r1, r0, lsr ip
   1abe8:	ldr	ip, [r5, #32]
   1abec:	ldr	r1, [r5, #28]
   1abf0:	ldm	r5, {r2, r3}
   1abf4:	ldr	r7, [r5, #24]
   1abf8:	ldr	r6, [r5, #20]
   1abfc:	str	ip, [sp, #24]
   1ac00:	ldr	lr, [r5, #16]
   1ac04:	str	r1, [sp, #20]
   1ac08:	ldr	r1, [r5, #8]
   1ac0c:	ldr	ip, [r5, #12]
   1ac10:	mov	r0, r4
   1ac14:	str	r7, [sp, #16]
   1ac18:	stm	sp, {r1, ip, lr}
   1ac1c:	str	r6, [sp, #12]
   1ac20:	ldr	r1, [pc, #412]	; 1adc4 <argp_parse@@Base+0x13b4>
   1ac24:	bl	1131c <fprintf@plt>
   1ac28:	add	sp, sp, #36	; 0x24
   1ac2c:	pop	{r4, r5, r6, r7, pc}
   1ac30:	ldr	ip, [r5, #32]
   1ac34:	ldr	r1, [r5, #28]
   1ac38:	ldm	r5, {r2, r3}
   1ac3c:	ldr	r7, [r5, #24]
   1ac40:	ldr	r6, [r5, #20]
   1ac44:	str	ip, [sp, #24]
   1ac48:	ldr	lr, [r5, #16]
   1ac4c:	str	r1, [sp, #20]
   1ac50:	ldr	r1, [r5, #8]
   1ac54:	ldr	ip, [r5, #12]
   1ac58:	mov	r0, r4
   1ac5c:	str	r7, [sp, #16]
   1ac60:	stm	sp, {r1, ip, lr}
   1ac64:	str	r6, [sp, #12]
   1ac68:	ldr	r1, [pc, #344]	; 1adc8 <argp_parse@@Base+0x13b8>
   1ac6c:	bl	1131c <fprintf@plt>
   1ac70:	b	1ac28 <argp_parse@@Base+0x1218>
   1ac74:	ldr	r2, [r5]
   1ac78:	mov	r0, r4
   1ac7c:	ldr	r1, [pc, #328]	; 1adcc <argp_parse@@Base+0x13bc>
   1ac80:	add	sp, sp, #36	; 0x24
   1ac84:	pop	{r4, r5, r6, r7, lr}
   1ac88:	b	1131c <fprintf@plt>
   1ac8c:	mov	r0, r4
   1ac90:	ldm	r5, {r2, r3}
   1ac94:	ldr	r1, [pc, #308]	; 1add0 <argp_parse@@Base+0x13c0>
   1ac98:	add	sp, sp, #36	; 0x24
   1ac9c:	pop	{r4, r5, r6, r7, lr}
   1aca0:	b	1131c <fprintf@plt>
   1aca4:	ldr	r1, [r5, #8]
   1aca8:	ldm	r5, {r2, r3}
   1acac:	mov	r0, r4
   1acb0:	str	r1, [sp, #56]	; 0x38
   1acb4:	ldr	r1, [pc, #280]	; 1add4 <argp_parse@@Base+0x13c4>
   1acb8:	add	sp, sp, #36	; 0x24
   1acbc:	pop	{r4, r5, r6, r7, lr}
   1acc0:	b	1131c <fprintf@plt>
   1acc4:	ldr	r1, [r5, #8]
   1acc8:	ldr	ip, [r5, #12]
   1accc:	ldm	r5, {r2, r3}
   1acd0:	mov	r0, r4
   1acd4:	str	r1, [sp, #56]	; 0x38
   1acd8:	str	ip, [sp, #60]	; 0x3c
   1acdc:	ldr	r1, [pc, #244]	; 1add8 <argp_parse@@Base+0x13c8>
   1ace0:	add	sp, sp, #36	; 0x24
   1ace4:	pop	{r4, r5, r6, r7, lr}
   1ace8:	b	1131c <fprintf@plt>
   1acec:	add	r1, r5, #8
   1acf0:	ldm	r5, {r2, r3}
   1acf4:	ldm	r1, {r1, ip, lr}
   1acf8:	mov	r0, r4
   1acfc:	stm	sp, {r1, ip, lr}
   1ad00:	ldr	r1, [pc, #212]	; 1addc <argp_parse@@Base+0x13cc>
   1ad04:	bl	1131c <fprintf@plt>
   1ad08:	b	1ac28 <argp_parse@@Base+0x1218>
   1ad0c:	add	r1, r5, #8
   1ad10:	ldr	r6, [r5, #20]
   1ad14:	ldm	r1, {r1, ip, lr}
   1ad18:	mov	r0, r4
   1ad1c:	ldm	r5, {r2, r3}
   1ad20:	str	r6, [sp, #12]
   1ad24:	stm	sp, {r1, ip, lr}
   1ad28:	ldr	r1, [pc, #176]	; 1ade0 <argp_parse@@Base+0x13d0>
   1ad2c:	bl	1131c <fprintf@plt>
   1ad30:	b	1ac28 <argp_parse@@Base+0x1218>
   1ad34:	add	r1, r5, #8
   1ad38:	ldr	r7, [r5, #24]
   1ad3c:	ldm	r1, {r1, ip, lr}
   1ad40:	mov	r0, r4
   1ad44:	ldr	r6, [r5, #20]
   1ad48:	ldm	r5, {r2, r3}
   1ad4c:	stm	sp, {r1, ip, lr}
   1ad50:	str	r7, [sp, #16]
   1ad54:	str	r6, [sp, #12]
   1ad58:	ldr	r1, [pc, #132]	; 1ade4 <argp_parse@@Base+0x13d4>
   1ad5c:	bl	1131c <fprintf@plt>
   1ad60:	b	1ac28 <argp_parse@@Base+0x1218>
   1ad64:	ldr	r1, [r5, #28]
   1ad68:	ldm	r5, {r2, r3}
   1ad6c:	ldr	r7, [r5, #24]
   1ad70:	ldr	r6, [r5, #20]
   1ad74:	ldr	lr, [r5, #16]
   1ad78:	str	r1, [sp, #20]
   1ad7c:	ldr	r1, [r5, #8]
   1ad80:	ldr	ip, [r5, #12]
   1ad84:	mov	r0, r4
   1ad88:	str	r7, [sp, #16]
   1ad8c:	stm	sp, {r1, ip, lr}
   1ad90:	str	r6, [sp, #12]
   1ad94:	ldr	r1, [pc, #76]	; 1ade8 <argp_parse@@Base+0x13d8>
   1ad98:	bl	1131c <fprintf@plt>
   1ad9c:	b	1ac28 <argp_parse@@Base+0x1218>
   1ada0:	ldr	r1, [pc, #68]	; 1adec <argp_parse@@Base+0x13dc>
   1ada4:	bl	1131c <fprintf@plt>
   1ada8:	b	1ab78 <argp_parse@@Base+0x1168>
   1adac:	andeq	pc, r1, r4, asr #21
   1adb0:	andeq	r0, r0, r6, ror #15
   1adb4:	ldrdeq	pc, [r1], -r8
   1adb8:	ldrdeq	pc, [r1], -r8
   1adbc:	andeq	pc, r1, r0, lsl #22
   1adc0:	ldrdeq	pc, [r1], -ip
   1adc4:	andeq	pc, r1, ip, ror #25
   1adc8:			; <UNDEFINED> instruction: 0x0001fcb8
   1adcc:	andeq	pc, r1, ip, lsr #23
   1add0:			; <UNDEFINED> instruction: 0x0001fbbc
   1add4:	ldrdeq	pc, [r1], -r4
   1add8:	strdeq	pc, [r1], -r0
   1addc:	andeq	pc, r1, r0, lsl ip	; <UNPREDICTABLE>
   1ade0:	andeq	pc, r1, r4, lsr ip	; <UNPREDICTABLE>
   1ade4:	andeq	pc, r1, ip, asr ip	; <UNPREDICTABLE>
   1ade8:	andeq	pc, r1, r8, lsl #25
   1adec:	ldrdeq	pc, [r1], -r0
   1adf0:	push	{r4, r5, r6, r7, lr}
   1adf4:	sub	sp, sp, #36	; 0x24
   1adf8:	mov	r6, r0
   1adfc:	ldr	r5, [sp, #56]	; 0x38
   1ae00:	ldr	r4, [r5]
   1ae04:	cmp	r4, #0
   1ae08:	beq	1ae24 <argp_parse@@Base+0x1414>
   1ae0c:	mov	r0, r5
   1ae10:	mov	r4, #0
   1ae14:	ldr	ip, [r0, #4]!
   1ae18:	add	r4, r4, #1
   1ae1c:	cmp	ip, #0
   1ae20:	bne	1ae14 <argp_parse@@Base+0x1404>
   1ae24:	cmp	r1, #0
   1ae28:	beq	1b064 <argp_parse@@Base+0x1654>
   1ae2c:	str	r3, [sp]
   1ae30:	mov	r0, r6
   1ae34:	mov	r3, r2
   1ae38:	mov	r2, r1
   1ae3c:	ldr	r1, [pc, #560]	; 1b074 <argp_parse@@Base+0x1664>
   1ae40:	bl	1131c <fprintf@plt>
   1ae44:	ldr	r3, [pc, #556]	; 1b078 <argp_parse@@Base+0x1668>
   1ae48:	ldr	r2, [pc, #556]	; 1b07c <argp_parse@@Base+0x166c>
   1ae4c:	ldr	r1, [pc, #556]	; 1b080 <argp_parse@@Base+0x1670>
   1ae50:	mov	r0, r6
   1ae54:	bl	1131c <fprintf@plt>
   1ae58:	mov	r1, r6
   1ae5c:	mov	r0, #10
   1ae60:	bl	113d0 <fputc@plt>
   1ae64:	ldr	r1, [pc, #536]	; 1b084 <argp_parse@@Base+0x1674>
   1ae68:	ldr	r2, [pc, #536]	; 1b088 <argp_parse@@Base+0x1678>
   1ae6c:	mov	r0, r6
   1ae70:	bl	1131c <fprintf@plt>
   1ae74:	mov	r1, r6
   1ae78:	mov	r0, #10
   1ae7c:	bl	113d0 <fputc@plt>
   1ae80:	cmp	r4, #9
   1ae84:	ldrls	pc, [pc, r4, lsl #2]
   1ae88:	b	1aeb4 <argp_parse@@Base+0x14a4>
   1ae8c:	strdeq	sl, [r1], -r4
   1ae90:	andeq	sl, r1, r0, asr #30
   1ae94:	andeq	sl, r1, r8, asr pc
   1ae98:	andeq	sl, r1, r0, ror pc
   1ae9c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1aea0:			; <UNDEFINED> instruction: 0x0001afb0
   1aea4:	ldrdeq	sl, [r1], -r0
   1aea8:	strdeq	sl, [r1], -r8
   1aeac:	andeq	fp, r1, r8, lsr #32
   1aeb0:	strdeq	sl, [r1], -ip
   1aeb4:	ldr	ip, [r5, #32]
   1aeb8:	ldr	r1, [r5, #28]
   1aebc:	ldm	r5, {r2, r3}
   1aec0:	ldr	r7, [r5, #24]
   1aec4:	ldr	r4, [r5, #20]
   1aec8:	str	ip, [sp, #24]
   1aecc:	ldr	lr, [r5, #16]
   1aed0:	str	r1, [sp, #20]
   1aed4:	ldr	r1, [r5, #8]
   1aed8:	ldr	ip, [r5, #12]
   1aedc:	mov	r0, r6
   1aee0:	str	r7, [sp, #16]
   1aee4:	stm	sp, {r1, ip, lr}
   1aee8:	str	r4, [sp, #12]
   1aeec:	ldr	r1, [pc, #408]	; 1b08c <argp_parse@@Base+0x167c>
   1aef0:	bl	1131c <fprintf@plt>
   1aef4:	add	sp, sp, #36	; 0x24
   1aef8:	pop	{r4, r5, r6, r7, pc}
   1aefc:	ldr	ip, [r5, #32]
   1af00:	ldr	r1, [r5, #28]
   1af04:	ldm	r5, {r2, r3}
   1af08:	ldr	r7, [r5, #24]
   1af0c:	ldr	r4, [r5, #20]
   1af10:	str	ip, [sp, #24]
   1af14:	ldr	lr, [r5, #16]
   1af18:	str	r1, [sp, #20]
   1af1c:	ldr	r1, [r5, #8]
   1af20:	ldr	ip, [r5, #12]
   1af24:	mov	r0, r6
   1af28:	str	r7, [sp, #16]
   1af2c:	stm	sp, {r1, ip, lr}
   1af30:	str	r4, [sp, #12]
   1af34:	ldr	r1, [pc, #340]	; 1b090 <argp_parse@@Base+0x1680>
   1af38:	bl	1131c <fprintf@plt>
   1af3c:	b	1aef4 <argp_parse@@Base+0x14e4>
   1af40:	ldr	r2, [r5]
   1af44:	mov	r0, r6
   1af48:	ldr	r1, [pc, #324]	; 1b094 <argp_parse@@Base+0x1684>
   1af4c:	add	sp, sp, #36	; 0x24
   1af50:	pop	{r4, r5, r6, r7, lr}
   1af54:	b	1131c <fprintf@plt>
   1af58:	mov	r0, r6
   1af5c:	ldm	r5, {r2, r3}
   1af60:	ldr	r1, [pc, #304]	; 1b098 <argp_parse@@Base+0x1688>
   1af64:	add	sp, sp, #36	; 0x24
   1af68:	pop	{r4, r5, r6, r7, lr}
   1af6c:	b	1131c <fprintf@plt>
   1af70:	ldr	r1, [r5, #8]
   1af74:	ldm	r5, {r2, r3}
   1af78:	mov	r0, r6
   1af7c:	str	r1, [sp, #56]	; 0x38
   1af80:	ldr	r1, [pc, #276]	; 1b09c <argp_parse@@Base+0x168c>
   1af84:	add	sp, sp, #36	; 0x24
   1af88:	pop	{r4, r5, r6, r7, lr}
   1af8c:	b	1131c <fprintf@plt>
   1af90:	ldr	r1, [r5, #8]
   1af94:	ldr	ip, [r5, #12]
   1af98:	ldm	r5, {r2, r3}
   1af9c:	mov	r0, r6
   1afa0:	stm	sp, {r1, ip}
   1afa4:	ldr	r1, [pc, #244]	; 1b0a0 <argp_parse@@Base+0x1690>
   1afa8:	bl	1131c <fprintf@plt>
   1afac:	b	1aef4 <argp_parse@@Base+0x14e4>
   1afb0:	add	r1, r5, #8
   1afb4:	ldm	r5, {r2, r3}
   1afb8:	ldm	r1, {r1, ip, lr}
   1afbc:	mov	r0, r6
   1afc0:	stm	sp, {r1, ip, lr}
   1afc4:	ldr	r1, [pc, #216]	; 1b0a4 <argp_parse@@Base+0x1694>
   1afc8:	bl	1131c <fprintf@plt>
   1afcc:	b	1aef4 <argp_parse@@Base+0x14e4>
   1afd0:	add	r1, r5, #8
   1afd4:	ldr	r4, [r5, #20]
   1afd8:	ldm	r1, {r1, ip, lr}
   1afdc:	mov	r0, r6
   1afe0:	ldm	r5, {r2, r3}
   1afe4:	str	r4, [sp, #12]
   1afe8:	stm	sp, {r1, ip, lr}
   1afec:	ldr	r1, [pc, #180]	; 1b0a8 <argp_parse@@Base+0x1698>
   1aff0:	bl	1131c <fprintf@plt>
   1aff4:	b	1aef4 <argp_parse@@Base+0x14e4>
   1aff8:	add	r1, r5, #8
   1affc:	ldr	r7, [r5, #24]
   1b000:	ldm	r1, {r1, ip, lr}
   1b004:	mov	r0, r6
   1b008:	ldr	r4, [r5, #20]
   1b00c:	ldm	r5, {r2, r3}
   1b010:	stm	sp, {r1, ip, lr}
   1b014:	str	r7, [sp, #16]
   1b018:	str	r4, [sp, #12]
   1b01c:	ldr	r1, [pc, #136]	; 1b0ac <argp_parse@@Base+0x169c>
   1b020:	bl	1131c <fprintf@plt>
   1b024:	b	1aef4 <argp_parse@@Base+0x14e4>
   1b028:	ldr	r1, [r5, #28]
   1b02c:	ldm	r5, {r2, r3}
   1b030:	ldr	r7, [r5, #24]
   1b034:	ldr	r4, [r5, #20]
   1b038:	ldr	lr, [r5, #16]
   1b03c:	str	r1, [sp, #20]
   1b040:	ldr	r1, [r5, #8]
   1b044:	ldr	ip, [r5, #12]
   1b048:	mov	r0, r6
   1b04c:	str	r7, [sp, #16]
   1b050:	stm	sp, {r1, ip, lr}
   1b054:	str	r4, [sp, #12]
   1b058:	ldr	r1, [pc, #80]	; 1b0b0 <argp_parse@@Base+0x16a0>
   1b05c:	bl	1131c <fprintf@plt>
   1b060:	b	1aef4 <argp_parse@@Base+0x14e4>
   1b064:	ldr	r1, [pc, #72]	; 1b0b4 <argp_parse@@Base+0x16a4>
   1b068:	mov	r0, r6
   1b06c:	bl	1131c <fprintf@plt>
   1b070:	b	1ae44 <argp_parse@@Base+0x1434>
   1b074:	andeq	pc, r1, r4, asr #21
   1b078:	andeq	r0, r0, r6, ror #15
   1b07c:	ldrdeq	pc, [r1], -r8
   1b080:	ldrdeq	pc, [r1], -r8
   1b084:	andeq	pc, r1, r0, lsl #22
   1b088:	ldrdeq	pc, [r1], -ip
   1b08c:	andeq	pc, r1, ip, ror #25
   1b090:			; <UNDEFINED> instruction: 0x0001fcb8
   1b094:	andeq	pc, r1, ip, lsr #23
   1b098:			; <UNDEFINED> instruction: 0x0001fbbc
   1b09c:	ldrdeq	pc, [r1], -r4
   1b0a0:	strdeq	pc, [r1], -r0
   1b0a4:	andeq	pc, r1, r0, lsl ip	; <UNPREDICTABLE>
   1b0a8:	andeq	pc, r1, r4, lsr ip	; <UNPREDICTABLE>
   1b0ac:	andeq	pc, r1, ip, asr ip	; <UNPREDICTABLE>
   1b0b0:	andeq	pc, r1, r8, lsl #25
   1b0b4:	ldrdeq	pc, [r1], -r0
   1b0b8:	push	{r4, r5, r6, lr}
   1b0bc:	sub	sp, sp, #72	; 0x48
   1b0c0:	mov	r5, r0
   1b0c4:	ldr	ip, [sp, #88]	; 0x58
   1b0c8:	ldr	r0, [ip]
   1b0cc:	cmp	r0, #0
   1b0d0:	str	r0, [sp, #32]
   1b0d4:	beq	1b3dc <argp_parse@@Base+0x19cc>
   1b0d8:	ldr	r0, [ip, #4]
   1b0dc:	cmp	r0, #0
   1b0e0:	str	r0, [sp, #36]	; 0x24
   1b0e4:	beq	1b3e4 <argp_parse@@Base+0x19d4>
   1b0e8:	ldr	r0, [ip, #8]
   1b0ec:	cmp	r0, #0
   1b0f0:	str	r0, [sp, #40]	; 0x28
   1b0f4:	beq	1b3ec <argp_parse@@Base+0x19dc>
   1b0f8:	ldr	r0, [ip, #12]
   1b0fc:	cmp	r0, #0
   1b100:	str	r0, [sp, #44]	; 0x2c
   1b104:	beq	1b3f4 <argp_parse@@Base+0x19e4>
   1b108:	ldr	r0, [ip, #16]
   1b10c:	cmp	r0, #0
   1b110:	str	r0, [sp, #48]	; 0x30
   1b114:	beq	1b3fc <argp_parse@@Base+0x19ec>
   1b118:	ldr	r0, [ip, #20]
   1b11c:	cmp	r0, #0
   1b120:	str	r0, [sp, #52]	; 0x34
   1b124:	beq	1b404 <argp_parse@@Base+0x19f4>
   1b128:	ldr	r0, [ip, #24]
   1b12c:	cmp	r0, #0
   1b130:	str	r0, [sp, #56]	; 0x38
   1b134:	beq	1b40c <argp_parse@@Base+0x19fc>
   1b138:	ldr	r0, [ip, #28]
   1b13c:	cmp	r0, #0
   1b140:	str	r0, [sp, #60]	; 0x3c
   1b144:	beq	1b414 <argp_parse@@Base+0x1a04>
   1b148:	ldr	r0, [ip, #32]
   1b14c:	cmp	r0, #0
   1b150:	str	r0, [sp, #64]	; 0x40
   1b154:	beq	1b41c <argp_parse@@Base+0x1a0c>
   1b158:	ldr	r0, [ip, #36]	; 0x24
   1b15c:	cmp	r0, #0
   1b160:	movne	r4, #10
   1b164:	moveq	r4, #9
   1b168:	cmp	r1, #0
   1b16c:	beq	1b3cc <argp_parse@@Base+0x19bc>
   1b170:	str	r3, [sp]
   1b174:	mov	r0, r5
   1b178:	mov	r3, r2
   1b17c:	mov	r2, r1
   1b180:	ldr	r1, [pc, #668]	; 1b424 <argp_parse@@Base+0x1a14>
   1b184:	bl	1131c <fprintf@plt>
   1b188:	ldr	r3, [pc, #664]	; 1b428 <argp_parse@@Base+0x1a18>
   1b18c:	ldr	r2, [pc, #664]	; 1b42c <argp_parse@@Base+0x1a1c>
   1b190:	ldr	r1, [pc, #664]	; 1b430 <argp_parse@@Base+0x1a20>
   1b194:	mov	r0, r5
   1b198:	bl	1131c <fprintf@plt>
   1b19c:	mov	r1, r5
   1b1a0:	mov	r0, #10
   1b1a4:	bl	113d0 <fputc@plt>
   1b1a8:	ldr	r1, [pc, #644]	; 1b434 <argp_parse@@Base+0x1a24>
   1b1ac:	ldr	r2, [pc, #644]	; 1b438 <argp_parse@@Base+0x1a28>
   1b1b0:	mov	r0, r5
   1b1b4:	bl	1131c <fprintf@plt>
   1b1b8:	mov	r1, r5
   1b1bc:	mov	r0, #10
   1b1c0:	bl	113d0 <fputc@plt>
   1b1c4:	cmp	r4, #9
   1b1c8:	ldrls	pc, [pc, r4, lsl #2]
   1b1cc:	b	1b1f8 <argp_parse@@Base+0x17e8>
   1b1d0:	andeq	fp, r1, ip, lsr r2
   1b1d4:	andeq	fp, r1, ip, lsl #5
   1b1d8:	andeq	fp, r1, r4, lsr #5
   1b1dc:	andeq	fp, r1, r0, asr #5
   1b1e0:	andeq	fp, r1, r4, ror #5
   1b1e4:	andeq	fp, r1, r8, lsl #6
   1b1e8:	andeq	fp, r1, ip, lsr #6
   1b1ec:	andeq	fp, r1, r8, asr r3
   1b1f0:	andeq	fp, r1, ip, lsl #7
   1b1f4:	andeq	fp, r1, r4, asr #4
   1b1f8:	ldr	ip, [sp, #64]	; 0x40
   1b1fc:	ldr	r1, [sp, #60]	; 0x3c
   1b200:	ldr	lr, [sp, #48]	; 0x30
   1b204:	str	ip, [sp, #24]
   1b208:	str	r1, [sp, #20]
   1b20c:	ldr	ip, [sp, #44]	; 0x2c
   1b210:	ldr	r1, [sp, #40]	; 0x28
   1b214:	ldr	r6, [sp, #56]	; 0x38
   1b218:	ldr	r4, [sp, #52]	; 0x34
   1b21c:	stm	sp, {r1, ip, lr}
   1b220:	mov	r0, r5
   1b224:	ldr	r3, [sp, #36]	; 0x24
   1b228:	ldr	r2, [sp, #32]
   1b22c:	str	r6, [sp, #16]
   1b230:	str	r4, [sp, #12]
   1b234:	ldr	r1, [pc, #512]	; 1b43c <argp_parse@@Base+0x1a2c>
   1b238:	bl	1131c <fprintf@plt>
   1b23c:	add	sp, sp, #72	; 0x48
   1b240:	pop	{r4, r5, r6, pc}
   1b244:	ldr	ip, [sp, #64]	; 0x40
   1b248:	ldr	r1, [sp, #60]	; 0x3c
   1b24c:	ldr	lr, [sp, #48]	; 0x30
   1b250:	str	ip, [sp, #24]
   1b254:	str	r1, [sp, #20]
   1b258:	ldr	ip, [sp, #44]	; 0x2c
   1b25c:	ldr	r1, [sp, #40]	; 0x28
   1b260:	ldr	r6, [sp, #56]	; 0x38
   1b264:	ldr	r4, [sp, #52]	; 0x34
   1b268:	stm	sp, {r1, ip, lr}
   1b26c:	mov	r0, r5
   1b270:	ldr	r3, [sp, #36]	; 0x24
   1b274:	ldr	r2, [sp, #32]
   1b278:	str	r6, [sp, #16]
   1b27c:	str	r4, [sp, #12]
   1b280:	ldr	r1, [pc, #440]	; 1b440 <argp_parse@@Base+0x1a30>
   1b284:	bl	1131c <fprintf@plt>
   1b288:	b	1b23c <argp_parse@@Base+0x182c>
   1b28c:	mov	r0, r5
   1b290:	ldr	r2, [sp, #32]
   1b294:	ldr	r1, [pc, #424]	; 1b444 <argp_parse@@Base+0x1a34>
   1b298:	add	sp, sp, #72	; 0x48
   1b29c:	pop	{r4, r5, r6, lr}
   1b2a0:	b	1131c <fprintf@plt>
   1b2a4:	mov	r0, r5
   1b2a8:	ldr	r3, [sp, #36]	; 0x24
   1b2ac:	ldr	r2, [sp, #32]
   1b2b0:	ldr	r1, [pc, #400]	; 1b448 <argp_parse@@Base+0x1a38>
   1b2b4:	add	sp, sp, #72	; 0x48
   1b2b8:	pop	{r4, r5, r6, lr}
   1b2bc:	b	1131c <fprintf@plt>
   1b2c0:	ldr	r1, [sp, #40]	; 0x28
   1b2c4:	ldr	r3, [sp, #36]	; 0x24
   1b2c8:	str	r1, [sp, #88]	; 0x58
   1b2cc:	ldr	r2, [sp, #32]
   1b2d0:	mov	r0, r5
   1b2d4:	ldr	r1, [pc, #368]	; 1b44c <argp_parse@@Base+0x1a3c>
   1b2d8:	add	sp, sp, #72	; 0x48
   1b2dc:	pop	{r4, r5, r6, lr}
   1b2e0:	b	1131c <fprintf@plt>
   1b2e4:	ldr	r1, [sp, #40]	; 0x28
   1b2e8:	ldr	ip, [sp, #44]	; 0x2c
   1b2ec:	ldr	r3, [sp, #36]	; 0x24
   1b2f0:	ldr	r2, [sp, #32]
   1b2f4:	stm	sp, {r1, ip}
   1b2f8:	mov	r0, r5
   1b2fc:	ldr	r1, [pc, #332]	; 1b450 <argp_parse@@Base+0x1a40>
   1b300:	bl	1131c <fprintf@plt>
   1b304:	b	1b23c <argp_parse@@Base+0x182c>
   1b308:	add	r1, sp, #40	; 0x28
   1b30c:	ldr	r3, [sp, #36]	; 0x24
   1b310:	ldm	r1, {r1, ip, lr}
   1b314:	mov	r0, r5
   1b318:	ldr	r2, [sp, #32]
   1b31c:	stm	sp, {r1, ip, lr}
   1b320:	ldr	r1, [pc, #300]	; 1b454 <argp_parse@@Base+0x1a44>
   1b324:	bl	1131c <fprintf@plt>
   1b328:	b	1b23c <argp_parse@@Base+0x182c>
   1b32c:	add	r1, sp, #40	; 0x28
   1b330:	ldr	r4, [sp, #52]	; 0x34
   1b334:	ldm	r1, {r1, ip, lr}
   1b338:	mov	r0, r5
   1b33c:	ldr	r3, [sp, #36]	; 0x24
   1b340:	ldr	r2, [sp, #32]
   1b344:	stm	sp, {r1, ip, lr}
   1b348:	str	r4, [sp, #12]
   1b34c:	ldr	r1, [pc, #260]	; 1b458 <argp_parse@@Base+0x1a48>
   1b350:	bl	1131c <fprintf@plt>
   1b354:	b	1b23c <argp_parse@@Base+0x182c>
   1b358:	add	r1, sp, #40	; 0x28
   1b35c:	ldr	r6, [sp, #56]	; 0x38
   1b360:	ldm	r1, {r1, ip, lr}
   1b364:	mov	r0, r5
   1b368:	ldr	r4, [sp, #52]	; 0x34
   1b36c:	ldr	r3, [sp, #36]	; 0x24
   1b370:	stm	sp, {r1, ip, lr}
   1b374:	ldr	r2, [sp, #32]
   1b378:	str	r6, [sp, #16]
   1b37c:	str	r4, [sp, #12]
   1b380:	ldr	r1, [pc, #212]	; 1b45c <argp_parse@@Base+0x1a4c>
   1b384:	bl	1131c <fprintf@plt>
   1b388:	b	1b23c <argp_parse@@Base+0x182c>
   1b38c:	ldr	r1, [sp, #60]	; 0x3c
   1b390:	ldr	lr, [sp, #48]	; 0x30
   1b394:	ldr	ip, [sp, #44]	; 0x2c
   1b398:	str	r1, [sp, #20]
   1b39c:	ldr	r1, [sp, #40]	; 0x28
   1b3a0:	ldr	r6, [sp, #56]	; 0x38
   1b3a4:	ldr	r4, [sp, #52]	; 0x34
   1b3a8:	stm	sp, {r1, ip, lr}
   1b3ac:	mov	r0, r5
   1b3b0:	ldr	r3, [sp, #36]	; 0x24
   1b3b4:	ldr	r2, [sp, #32]
   1b3b8:	str	r6, [sp, #16]
   1b3bc:	str	r4, [sp, #12]
   1b3c0:	ldr	r1, [pc, #152]	; 1b460 <argp_parse@@Base+0x1a50>
   1b3c4:	bl	1131c <fprintf@plt>
   1b3c8:	b	1b23c <argp_parse@@Base+0x182c>
   1b3cc:	ldr	r1, [pc, #144]	; 1b464 <argp_parse@@Base+0x1a54>
   1b3d0:	mov	r0, r5
   1b3d4:	bl	1131c <fprintf@plt>
   1b3d8:	b	1b188 <argp_parse@@Base+0x1778>
   1b3dc:	mov	r4, r0
   1b3e0:	b	1b168 <argp_parse@@Base+0x1758>
   1b3e4:	mov	r4, #1
   1b3e8:	b	1b168 <argp_parse@@Base+0x1758>
   1b3ec:	mov	r4, #2
   1b3f0:	b	1b168 <argp_parse@@Base+0x1758>
   1b3f4:	mov	r4, #3
   1b3f8:	b	1b168 <argp_parse@@Base+0x1758>
   1b3fc:	mov	r4, #4
   1b400:	b	1b168 <argp_parse@@Base+0x1758>
   1b404:	mov	r4, #5
   1b408:	b	1b168 <argp_parse@@Base+0x1758>
   1b40c:	mov	r4, #6
   1b410:	b	1b168 <argp_parse@@Base+0x1758>
   1b414:	mov	r4, #7
   1b418:	b	1b168 <argp_parse@@Base+0x1758>
   1b41c:	mov	r4, #8
   1b420:	b	1b168 <argp_parse@@Base+0x1758>
   1b424:	andeq	pc, r1, r4, asr #21
   1b428:	andeq	r0, r0, r6, ror #15
   1b42c:	ldrdeq	pc, [r1], -r8
   1b430:	ldrdeq	pc, [r1], -r8
   1b434:	andeq	pc, r1, r0, lsl #22
   1b438:	ldrdeq	pc, [r1], -ip
   1b43c:	andeq	pc, r1, ip, ror #25
   1b440:			; <UNDEFINED> instruction: 0x0001fcb8
   1b444:	andeq	pc, r1, ip, lsr #23
   1b448:			; <UNDEFINED> instruction: 0x0001fbbc
   1b44c:	ldrdeq	pc, [r1], -r4
   1b450:	strdeq	pc, [r1], -r0
   1b454:	andeq	pc, r1, r0, lsl ip	; <UNPREDICTABLE>
   1b458:	andeq	pc, r1, r4, lsr ip	; <UNPREDICTABLE>
   1b45c:	andeq	pc, r1, ip, asr ip	; <UNPREDICTABLE>
   1b460:	andeq	pc, r1, r8, lsl #25
   1b464:	ldrdeq	pc, [r1], -r0
   1b468:	push	{r3}		; (str r3, [sp, #-4]!)
   1b46c:	push	{r4, r5, r6, lr}
   1b470:	sub	sp, sp, #84	; 0x54
   1b474:	add	ip, sp, #104	; 0x68
   1b478:	ldr	lr, [sp, #104]	; 0x68
   1b47c:	mov	r5, r0
   1b480:	cmp	lr, #0
   1b484:	str	lr, [sp, #40]	; 0x28
   1b488:	str	ip, [sp, #36]	; 0x24
   1b48c:	beq	1b794 <argp_parse@@Base+0x1d84>
   1b490:	ldr	r0, [sp, #108]	; 0x6c
   1b494:	cmp	r0, #0
   1b498:	str	r0, [sp, #44]	; 0x2c
   1b49c:	beq	1b79c <argp_parse@@Base+0x1d8c>
   1b4a0:	ldr	r0, [sp, #112]	; 0x70
   1b4a4:	cmp	r0, #0
   1b4a8:	str	r0, [sp, #48]	; 0x30
   1b4ac:	beq	1b7a4 <argp_parse@@Base+0x1d94>
   1b4b0:	ldr	r0, [sp, #116]	; 0x74
   1b4b4:	cmp	r0, #0
   1b4b8:	str	r0, [sp, #52]	; 0x34
   1b4bc:	beq	1b7ac <argp_parse@@Base+0x1d9c>
   1b4c0:	ldr	r0, [sp, #120]	; 0x78
   1b4c4:	cmp	r0, #0
   1b4c8:	str	r0, [sp, #56]	; 0x38
   1b4cc:	beq	1b7b4 <argp_parse@@Base+0x1da4>
   1b4d0:	ldr	r0, [sp, #124]	; 0x7c
   1b4d4:	cmp	r0, #0
   1b4d8:	str	r0, [sp, #60]	; 0x3c
   1b4dc:	beq	1b7bc <argp_parse@@Base+0x1dac>
   1b4e0:	ldr	r0, [sp, #128]	; 0x80
   1b4e4:	cmp	r0, #0
   1b4e8:	str	r0, [sp, #64]	; 0x40
   1b4ec:	beq	1b7c4 <argp_parse@@Base+0x1db4>
   1b4f0:	ldr	r0, [sp, #132]	; 0x84
   1b4f4:	cmp	r0, #0
   1b4f8:	str	r0, [sp, #68]	; 0x44
   1b4fc:	beq	1b7cc <argp_parse@@Base+0x1dbc>
   1b500:	ldr	r3, [sp, #136]	; 0x88
   1b504:	cmp	r3, #0
   1b508:	str	r3, [sp, #72]	; 0x48
   1b50c:	beq	1b7d4 <argp_parse@@Base+0x1dc4>
   1b510:	ldr	lr, [sp, #140]	; 0x8c
   1b514:	cmp	lr, #0
   1b518:	movne	r4, #10
   1b51c:	moveq	r4, #9
   1b520:	cmp	r1, #0
   1b524:	ldr	r3, [sp, #100]	; 0x64
   1b528:	beq	1b784 <argp_parse@@Base+0x1d74>
   1b52c:	str	r3, [sp]
   1b530:	mov	r0, r5
   1b534:	mov	r3, r2
   1b538:	mov	r2, r1
   1b53c:	ldr	r1, [pc, #664]	; 1b7dc <argp_parse@@Base+0x1dcc>
   1b540:	bl	1131c <fprintf@plt>
   1b544:	ldr	r3, [pc, #660]	; 1b7e0 <argp_parse@@Base+0x1dd0>
   1b548:	ldr	r2, [pc, #660]	; 1b7e4 <argp_parse@@Base+0x1dd4>
   1b54c:	ldr	r1, [pc, #660]	; 1b7e8 <argp_parse@@Base+0x1dd8>
   1b550:	mov	r0, r5
   1b554:	bl	1131c <fprintf@plt>
   1b558:	mov	r1, r5
   1b55c:	mov	r0, #10
   1b560:	bl	113d0 <fputc@plt>
   1b564:	ldr	r1, [pc, #640]	; 1b7ec <argp_parse@@Base+0x1ddc>
   1b568:	ldr	r2, [pc, #640]	; 1b7f0 <argp_parse@@Base+0x1de0>
   1b56c:	mov	r0, r5
   1b570:	bl	1131c <fprintf@plt>
   1b574:	mov	r1, r5
   1b578:	mov	r0, #10
   1b57c:	bl	113d0 <fputc@plt>
   1b580:	cmp	r4, #9
   1b584:	ldrls	pc, [pc, r4, lsl #2]
   1b588:	b	1b5b4 <argp_parse@@Base+0x1ba4>
   1b58c:	strdeq	fp, [r1], -r8
   1b590:	andeq	fp, r1, r0, asr r6
   1b594:	andeq	fp, r1, r4, ror #12
   1b598:	andeq	fp, r1, ip, ror r6
   1b59c:	muleq	r1, ip, r6
   1b5a0:	andeq	fp, r1, r0, asr #13
   1b5a4:	andeq	fp, r1, r4, ror #13
   1b5a8:	andeq	fp, r1, r0, lsl r7
   1b5ac:	andeq	fp, r1, r4, asr #14
   1b5b0:	andeq	fp, r1, r8, lsl #12
   1b5b4:	ldr	ip, [sp, #72]	; 0x48
   1b5b8:	ldr	r1, [sp, #68]	; 0x44
   1b5bc:	ldr	lr, [sp, #56]	; 0x38
   1b5c0:	str	ip, [sp, #24]
   1b5c4:	str	r1, [sp, #20]
   1b5c8:	ldr	ip, [sp, #52]	; 0x34
   1b5cc:	ldr	r1, [sp, #48]	; 0x30
   1b5d0:	ldr	r6, [sp, #64]	; 0x40
   1b5d4:	ldr	r4, [sp, #60]	; 0x3c
   1b5d8:	stm	sp, {r1, ip, lr}
   1b5dc:	mov	r0, r5
   1b5e0:	ldr	r3, [sp, #44]	; 0x2c
   1b5e4:	ldr	r2, [sp, #40]	; 0x28
   1b5e8:	str	r6, [sp, #16]
   1b5ec:	str	r4, [sp, #12]
   1b5f0:	ldr	r1, [pc, #508]	; 1b7f4 <argp_parse@@Base+0x1de4>
   1b5f4:	bl	1131c <fprintf@plt>
   1b5f8:	add	sp, sp, #84	; 0x54
   1b5fc:	pop	{r4, r5, r6, lr}
   1b600:	add	sp, sp, #4
   1b604:	bx	lr
   1b608:	ldr	ip, [sp, #72]	; 0x48
   1b60c:	ldr	r1, [sp, #68]	; 0x44
   1b610:	ldr	lr, [sp, #56]	; 0x38
   1b614:	str	ip, [sp, #24]
   1b618:	str	r1, [sp, #20]
   1b61c:	ldr	ip, [sp, #52]	; 0x34
   1b620:	ldr	r1, [sp, #48]	; 0x30
   1b624:	ldr	r6, [sp, #64]	; 0x40
   1b628:	ldr	r4, [sp, #60]	; 0x3c
   1b62c:	stm	sp, {r1, ip, lr}
   1b630:	mov	r0, r5
   1b634:	ldr	r3, [sp, #44]	; 0x2c
   1b638:	ldr	r2, [sp, #40]	; 0x28
   1b63c:	str	r6, [sp, #16]
   1b640:	str	r4, [sp, #12]
   1b644:	ldr	r1, [pc, #428]	; 1b7f8 <argp_parse@@Base+0x1de8>
   1b648:	bl	1131c <fprintf@plt>
   1b64c:	b	1b5f8 <argp_parse@@Base+0x1be8>
   1b650:	mov	r0, r5
   1b654:	ldr	r2, [sp, #40]	; 0x28
   1b658:	ldr	r1, [pc, #412]	; 1b7fc <argp_parse@@Base+0x1dec>
   1b65c:	bl	1131c <fprintf@plt>
   1b660:	b	1b5f8 <argp_parse@@Base+0x1be8>
   1b664:	mov	r0, r5
   1b668:	ldr	r3, [sp, #44]	; 0x2c
   1b66c:	ldr	r2, [sp, #40]	; 0x28
   1b670:	ldr	r1, [pc, #392]	; 1b800 <argp_parse@@Base+0x1df0>
   1b674:	bl	1131c <fprintf@plt>
   1b678:	b	1b5f8 <argp_parse@@Base+0x1be8>
   1b67c:	ldr	r1, [sp, #48]	; 0x30
   1b680:	ldr	r3, [sp, #44]	; 0x2c
   1b684:	str	r1, [sp]
   1b688:	ldr	r2, [sp, #40]	; 0x28
   1b68c:	mov	r0, r5
   1b690:	ldr	r1, [pc, #364]	; 1b804 <argp_parse@@Base+0x1df4>
   1b694:	bl	1131c <fprintf@plt>
   1b698:	b	1b5f8 <argp_parse@@Base+0x1be8>
   1b69c:	ldr	r1, [sp, #48]	; 0x30
   1b6a0:	ldr	ip, [sp, #52]	; 0x34
   1b6a4:	ldr	r3, [sp, #44]	; 0x2c
   1b6a8:	ldr	r2, [sp, #40]	; 0x28
   1b6ac:	stm	sp, {r1, ip}
   1b6b0:	mov	r0, r5
   1b6b4:	ldr	r1, [pc, #332]	; 1b808 <argp_parse@@Base+0x1df8>
   1b6b8:	bl	1131c <fprintf@plt>
   1b6bc:	b	1b5f8 <argp_parse@@Base+0x1be8>
   1b6c0:	add	r1, sp, #48	; 0x30
   1b6c4:	ldr	r3, [sp, #44]	; 0x2c
   1b6c8:	ldm	r1, {r1, ip, lr}
   1b6cc:	mov	r0, r5
   1b6d0:	ldr	r2, [sp, #40]	; 0x28
   1b6d4:	stm	sp, {r1, ip, lr}
   1b6d8:	ldr	r1, [pc, #300]	; 1b80c <argp_parse@@Base+0x1dfc>
   1b6dc:	bl	1131c <fprintf@plt>
   1b6e0:	b	1b5f8 <argp_parse@@Base+0x1be8>
   1b6e4:	add	r1, sp, #48	; 0x30
   1b6e8:	ldr	r4, [sp, #60]	; 0x3c
   1b6ec:	ldm	r1, {r1, ip, lr}
   1b6f0:	mov	r0, r5
   1b6f4:	ldr	r3, [sp, #44]	; 0x2c
   1b6f8:	ldr	r2, [sp, #40]	; 0x28
   1b6fc:	stm	sp, {r1, ip, lr}
   1b700:	str	r4, [sp, #12]
   1b704:	ldr	r1, [pc, #260]	; 1b810 <argp_parse@@Base+0x1e00>
   1b708:	bl	1131c <fprintf@plt>
   1b70c:	b	1b5f8 <argp_parse@@Base+0x1be8>
   1b710:	add	r1, sp, #48	; 0x30
   1b714:	ldr	r6, [sp, #64]	; 0x40
   1b718:	ldm	r1, {r1, ip, lr}
   1b71c:	mov	r0, r5
   1b720:	ldr	r4, [sp, #60]	; 0x3c
   1b724:	ldr	r3, [sp, #44]	; 0x2c
   1b728:	stm	sp, {r1, ip, lr}
   1b72c:	ldr	r2, [sp, #40]	; 0x28
   1b730:	str	r6, [sp, #16]
   1b734:	str	r4, [sp, #12]
   1b738:	ldr	r1, [pc, #212]	; 1b814 <argp_parse@@Base+0x1e04>
   1b73c:	bl	1131c <fprintf@plt>
   1b740:	b	1b5f8 <argp_parse@@Base+0x1be8>
   1b744:	ldr	r1, [sp, #68]	; 0x44
   1b748:	ldr	lr, [sp, #56]	; 0x38
   1b74c:	ldr	ip, [sp, #52]	; 0x34
   1b750:	str	r1, [sp, #20]
   1b754:	ldr	r1, [sp, #48]	; 0x30
   1b758:	ldr	r6, [sp, #64]	; 0x40
   1b75c:	ldr	r4, [sp, #60]	; 0x3c
   1b760:	stm	sp, {r1, ip, lr}
   1b764:	mov	r0, r5
   1b768:	ldr	r3, [sp, #44]	; 0x2c
   1b76c:	ldr	r2, [sp, #40]	; 0x28
   1b770:	str	r6, [sp, #16]
   1b774:	str	r4, [sp, #12]
   1b778:	ldr	r1, [pc, #152]	; 1b818 <argp_parse@@Base+0x1e08>
   1b77c:	bl	1131c <fprintf@plt>
   1b780:	b	1b5f8 <argp_parse@@Base+0x1be8>
   1b784:	ldr	r1, [pc, #144]	; 1b81c <argp_parse@@Base+0x1e0c>
   1b788:	mov	r0, r5
   1b78c:	bl	1131c <fprintf@plt>
   1b790:	b	1b544 <argp_parse@@Base+0x1b34>
   1b794:	mov	r4, lr
   1b798:	b	1b520 <argp_parse@@Base+0x1b10>
   1b79c:	mov	r4, #1
   1b7a0:	b	1b520 <argp_parse@@Base+0x1b10>
   1b7a4:	mov	r4, #2
   1b7a8:	b	1b520 <argp_parse@@Base+0x1b10>
   1b7ac:	mov	r4, #3
   1b7b0:	b	1b520 <argp_parse@@Base+0x1b10>
   1b7b4:	mov	r4, #4
   1b7b8:	b	1b520 <argp_parse@@Base+0x1b10>
   1b7bc:	mov	r4, #5
   1b7c0:	b	1b520 <argp_parse@@Base+0x1b10>
   1b7c4:	mov	r4, #6
   1b7c8:	b	1b520 <argp_parse@@Base+0x1b10>
   1b7cc:	mov	r4, #7
   1b7d0:	b	1b520 <argp_parse@@Base+0x1b10>
   1b7d4:	mov	r4, #8
   1b7d8:	b	1b520 <argp_parse@@Base+0x1b10>
   1b7dc:	andeq	pc, r1, r4, asr #21
   1b7e0:	andeq	r0, r0, r6, ror #15
   1b7e4:	ldrdeq	pc, [r1], -r8
   1b7e8:	ldrdeq	pc, [r1], -r8
   1b7ec:	andeq	pc, r1, r0, lsl #22
   1b7f0:	ldrdeq	pc, [r1], -ip
   1b7f4:	andeq	pc, r1, ip, ror #25
   1b7f8:			; <UNDEFINED> instruction: 0x0001fcb8
   1b7fc:	andeq	pc, r1, ip, lsr #23
   1b800:			; <UNDEFINED> instruction: 0x0001fbbc
   1b804:	ldrdeq	pc, [r1], -r4
   1b808:	strdeq	pc, [r1], -r0
   1b80c:	andeq	pc, r1, r0, lsl ip	; <UNPREDICTABLE>
   1b810:	andeq	pc, r1, r4, lsr ip	; <UNPREDICTABLE>
   1b814:	andeq	pc, r1, ip, asr ip	; <UNPREDICTABLE>
   1b818:	andeq	pc, r1, r8, lsl #25
   1b81c:	ldrdeq	pc, [r1], -r0
   1b820:	ldr	r3, [pc, #56]	; 1b860 <argp_parse@@Base+0x1e50>
   1b824:	push	{r4, lr}
   1b828:	mov	r0, #10
   1b82c:	ldr	r1, [r3]
   1b830:	bl	113d0 <fputc@plt>
   1b834:	ldr	r1, [pc, #40]	; 1b864 <argp_parse@@Base+0x1e54>
   1b838:	ldr	r0, [pc, #40]	; 1b868 <argp_parse@@Base+0x1e58>
   1b83c:	bl	11148 <printf@plt>
   1b840:	ldr	r1, [pc, #36]	; 1b86c <argp_parse@@Base+0x1e5c>
   1b844:	ldr	r2, [pc, #36]	; 1b870 <argp_parse@@Base+0x1e60>
   1b848:	ldr	r0, [pc, #36]	; 1b874 <argp_parse@@Base+0x1e64>
   1b84c:	bl	11148 <printf@plt>
   1b850:	ldr	r1, [pc, #32]	; 1b878 <argp_parse@@Base+0x1e68>
   1b854:	ldr	r0, [pc, #32]	; 1b87c <argp_parse@@Base+0x1e6c>
   1b858:	pop	{r4, lr}
   1b85c:	b	11148 <printf@plt>
   1b860:	andeq	r1, r3, ip, lsr #12
   1b864:	andeq	pc, r1, r8, lsr #26
   1b868:	andeq	pc, r1, r0, asr #26
   1b86c:	andeq	pc, r1, r0, ror sl	; <UNPREDICTABLE>
   1b870:	andeq	pc, r1, r4, asr sp	; <UNPREDICTABLE>
   1b874:	andeq	pc, r1, ip, ror sp	; <UNPREDICTABLE>
   1b878:	muleq	r1, r0, sp
   1b87c:			; <UNDEFINED> instruction: 0x0001fdb0
   1b880:	push	{r4, r5, r6, lr}
   1b884:	mov	r6, r0
   1b888:	mov	r5, r1
   1b88c:	mov	r4, r2
   1b890:	bl	1e050 <argp_parse@@Base+0x4640>
   1b894:	cmp	r0, #0
   1b898:	popne	{r4, r5, r6, pc}
   1b89c:	cmp	r6, #0
   1b8a0:	beq	1b8b0 <argp_parse@@Base+0x1ea0>
   1b8a4:	cmp	r5, #0
   1b8a8:	cmpne	r4, #0
   1b8ac:	popeq	{r4, r5, r6, pc}
   1b8b0:	bl	1befc <argp_parse@@Base+0x24ec>
   1b8b4:	push	{r4, lr}
   1b8b8:	bl	1bf70 <argp_parse@@Base+0x2560>
   1b8bc:	cmp	r0, #0
   1b8c0:	popne	{r4, pc}
   1b8c4:	bl	1befc <argp_parse@@Base+0x24ec>
   1b8c8:	push	{r4, lr}
   1b8cc:	bl	1bf70 <argp_parse@@Base+0x2560>
   1b8d0:	cmp	r0, #0
   1b8d4:	popne	{r4, pc}
   1b8d8:	bl	1befc <argp_parse@@Base+0x24ec>
   1b8dc:	push	{r4, lr}
   1b8e0:	bl	1bf70 <argp_parse@@Base+0x2560>
   1b8e4:	cmp	r0, #0
   1b8e8:	popne	{r4, pc}
   1b8ec:	bl	1befc <argp_parse@@Base+0x24ec>
   1b8f0:	push	{r4, r5, r6, lr}
   1b8f4:	mov	r5, r0
   1b8f8:	mov	r4, r1
   1b8fc:	bl	1bf9c <argp_parse@@Base+0x258c>
   1b900:	cmp	r0, #0
   1b904:	popne	{r4, r5, r6, pc}
   1b908:	adds	r4, r4, #0
   1b90c:	movne	r4, #1
   1b910:	cmp	r5, #0
   1b914:	orreq	r4, r4, #1
   1b918:	cmp	r4, #0
   1b91c:	popeq	{r4, r5, r6, pc}
   1b920:	bl	1befc <argp_parse@@Base+0x24ec>
   1b924:	push	{r4, lr}
   1b928:	cmp	r1, #0
   1b92c:	orreq	r1, r1, #1
   1b930:	bl	1bf9c <argp_parse@@Base+0x258c>
   1b934:	cmp	r0, #0
   1b938:	popne	{r4, pc}
   1b93c:	bl	1befc <argp_parse@@Base+0x24ec>
   1b940:	push	{r4, r5, r6, lr}
   1b944:	mov	r6, r0
   1b948:	mov	r5, r1
   1b94c:	mov	r4, r2
   1b950:	bl	1e050 <argp_parse@@Base+0x4640>
   1b954:	cmp	r0, #0
   1b958:	popne	{r4, r5, r6, pc}
   1b95c:	cmp	r6, #0
   1b960:	beq	1b970 <argp_parse@@Base+0x1f60>
   1b964:	cmp	r5, #0
   1b968:	cmpne	r4, #0
   1b96c:	popeq	{r4, r5, r6, pc}
   1b970:	bl	1befc <argp_parse@@Base+0x24ec>
   1b974:	cmp	r2, #0
   1b978:	cmpne	r1, #0
   1b97c:	moveq	r2, #1
   1b980:	moveq	r1, r2
   1b984:	push	{r4, lr}
   1b988:	bl	1e050 <argp_parse@@Base+0x4640>
   1b98c:	cmp	r0, #0
   1b990:	popne	{r4, pc}
   1b994:	bl	1befc <argp_parse@@Base+0x24ec>
   1b998:	push	{r4, lr}
   1b99c:	mov	r2, r1
   1b9a0:	mov	r1, r0
   1b9a4:	mov	r0, #0
   1b9a8:	bl	1e050 <argp_parse@@Base+0x4640>
   1b9ac:	cmp	r0, #0
   1b9b0:	popne	{r4, pc}
   1b9b4:	bl	1befc <argp_parse@@Base+0x24ec>
   1b9b8:	cmp	r1, #0
   1b9bc:	cmpne	r0, #0
   1b9c0:	moveq	r2, #1
   1b9c4:	movne	r2, r1
   1b9c8:	moveq	r1, r2
   1b9cc:	movne	r1, r0
   1b9d0:	push	{r4, lr}
   1b9d4:	mov	r0, #0
   1b9d8:	bl	1e050 <argp_parse@@Base+0x4640>
   1b9dc:	cmp	r0, #0
   1b9e0:	popne	{r4, pc}
   1b9e4:	bl	1befc <argp_parse@@Base+0x24ec>
   1b9e8:	cmp	r0, #0
   1b9ec:	push	{r4, r5, r6, lr}
   1b9f0:	mov	r5, r1
   1b9f4:	ldr	r4, [r1]
   1b9f8:	beq	1ba34 <argp_parse@@Base+0x2024>
   1b9fc:	lsr	r2, r4, #1
   1ba00:	add	r3, r2, #1
   1ba04:	mvn	r3, r3
   1ba08:	cmp	r4, r3
   1ba0c:	bhi	1ba50 <argp_parse@@Base+0x2040>
   1ba10:	add	r4, r4, #1
   1ba14:	add	r4, r4, r2
   1ba18:	mov	r1, r4
   1ba1c:	mov	r2, #1
   1ba20:	bl	1e050 <argp_parse@@Base+0x4640>
   1ba24:	cmp	r0, #0
   1ba28:	beq	1ba54 <argp_parse@@Base+0x2044>
   1ba2c:	str	r4, [r5]
   1ba30:	pop	{r4, r5, r6, pc}
   1ba34:	cmp	r4, #0
   1ba38:	moveq	r4, #64	; 0x40
   1ba3c:	mov	r1, r4
   1ba40:	mov	r2, #1
   1ba44:	bl	1e050 <argp_parse@@Base+0x4640>
   1ba48:	cmp	r0, #0
   1ba4c:	bne	1ba2c <argp_parse@@Base+0x201c>
   1ba50:	bl	1befc <argp_parse@@Base+0x24ec>
   1ba54:	cmp	r4, #0
   1ba58:	bne	1ba50 <argp_parse@@Base+0x2040>
   1ba5c:	str	r4, [r5]
   1ba60:	pop	{r4, r5, r6, pc}
   1ba64:	cmp	r0, #0
   1ba68:	push	{r4, r5, r6, lr}
   1ba6c:	mov	r5, r1
   1ba70:	ldr	r4, [r1]
   1ba74:	mov	r6, r2
   1ba78:	beq	1babc <argp_parse@@Base+0x20ac>
   1ba7c:	lsr	r1, r4, #1
   1ba80:	add	r3, r1, #1
   1ba84:	mvn	r3, r3
   1ba88:	cmp	r4, r3
   1ba8c:	bhi	1baf4 <argp_parse@@Base+0x20e4>
   1ba90:	add	r4, r4, #1
   1ba94:	add	r4, r4, r1
   1ba98:	mov	r1, r4
   1ba9c:	bl	1e050 <argp_parse@@Base+0x4640>
   1baa0:	cmp	r0, #0
   1baa4:	bne	1bab4 <argp_parse@@Base+0x20a4>
   1baa8:	cmp	r4, #0
   1baac:	cmpne	r6, #0
   1bab0:	bne	1baf4 <argp_parse@@Base+0x20e4>
   1bab4:	str	r4, [r5]
   1bab8:	pop	{r4, r5, r6, pc}
   1babc:	cmp	r4, #0
   1bac0:	bne	1badc <argp_parse@@Base+0x20cc>
   1bac4:	mov	r1, r2
   1bac8:	mov	r0, #64	; 0x40
   1bacc:	bl	1e09c <argp_parse@@Base+0x468c>
   1bad0:	cmp	r0, #0
   1bad4:	movne	r4, r0
   1bad8:	addeq	r4, r0, #1
   1badc:	mov	r2, r6
   1bae0:	mov	r1, r4
   1bae4:	mov	r0, #0
   1bae8:	bl	1e050 <argp_parse@@Base+0x4640>
   1baec:	cmp	r0, #0
   1baf0:	bne	1bab4 <argp_parse@@Base+0x20a4>
   1baf4:	bl	1befc <argp_parse@@Base+0x24ec>
   1baf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bafc:	sub	sp, sp, #12
   1bb00:	ldr	r6, [r1]
   1bb04:	mov	r8, r1
   1bb08:	mov	r9, r0
   1bb0c:	asrs	r4, r6, #1
   1bb10:	mov	sl, r2
   1bb14:	mov	fp, r3
   1bb18:	ldr	r7, [sp, #48]	; 0x30
   1bb1c:	bmi	1bc98 <argp_parse@@Base+0x2288>
   1bb20:	mvn	r1, #-2147483648	; 0x80000000
   1bb24:	sub	r1, r1, r4
   1bb28:	cmp	r6, r1
   1bb2c:	movle	r1, #0
   1bb30:	movgt	r1, #1
   1bb34:	mvn	r3, fp
   1bb38:	cmp	r1, #0
   1bb3c:	addeq	r4, r4, r6
   1bb40:	mvnne	r4, #-2147483648	; 0x80000000
   1bb44:	lsr	r3, r3, #31
   1bb48:	cmp	fp, r4
   1bb4c:	movge	r2, #0
   1bb50:	andlt	r2, r3, #1
   1bb54:	cmp	r2, #0
   1bb58:	beq	1bc48 <argp_parse@@Base+0x2238>
   1bb5c:	cmp	r7, #0
   1bb60:	blt	1bd30 <argp_parse@@Base+0x2320>
   1bb64:	bne	1bd28 <argp_parse@@Base+0x2318>
   1bb68:	mov	r5, #64	; 0x40
   1bb6c:	mov	r1, r7
   1bb70:	mov	r0, r5
   1bb74:	str	r3, [sp, #4]
   1bb78:	bl	1e2a8 <argp_parse@@Base+0x4898>
   1bb7c:	mov	r1, r7
   1bb80:	mov	r4, r0
   1bb84:	mov	r0, r5
   1bb88:	bl	1e4c8 <argp_parse@@Base+0x4ab8>
   1bb8c:	ldr	r3, [sp, #4]
   1bb90:	sub	r5, r5, r1
   1bb94:	cmp	r9, #0
   1bb98:	sub	r2, r4, r6
   1bb9c:	streq	r9, [r8]
   1bba0:	cmp	r2, sl
   1bba4:	bge	1bc28 <argp_parse@@Base+0x2218>
   1bba8:	cmp	sl, #0
   1bbac:	blt	1bcc8 <argp_parse@@Base+0x22b8>
   1bbb0:	cmp	r6, #0
   1bbb4:	blt	1bbd4 <argp_parse@@Base+0x21c4>
   1bbb8:	mvn	r2, #-2147483648	; 0x80000000
   1bbbc:	sub	r2, r2, sl
   1bbc0:	cmp	r6, r2
   1bbc4:	movle	r2, #0
   1bbc8:	movgt	r2, #1
   1bbcc:	cmp	r2, #0
   1bbd0:	bne	1bcc4 <argp_parse@@Base+0x22b4>
   1bbd4:	add	r6, r6, sl
   1bbd8:	cmp	fp, r6
   1bbdc:	movge	r3, #0
   1bbe0:	andlt	r3, r3, #1
   1bbe4:	cmp	r3, #0
   1bbe8:	mov	r4, r6
   1bbec:	bne	1bcc4 <argp_parse@@Base+0x22b4>
   1bbf0:	cmp	r7, #0
   1bbf4:	blt	1bcdc <argp_parse@@Base+0x22cc>
   1bbf8:	beq	1bc24 <argp_parse@@Base+0x2214>
   1bbfc:	cmp	r6, #0
   1bc00:	blt	1bd80 <argp_parse@@Base+0x2370>
   1bc04:	mov	r1, r7
   1bc08:	mvn	r0, #-2147483648	; 0x80000000
   1bc0c:	bl	1e2a8 <argp_parse@@Base+0x4898>
   1bc10:	cmp	r6, r0
   1bc14:	movle	r0, #0
   1bc18:	movgt	r0, #1
   1bc1c:	cmp	r0, #0
   1bc20:	bne	1bcc4 <argp_parse@@Base+0x22b4>
   1bc24:	mul	r5, r6, r7
   1bc28:	mov	r1, r5
   1bc2c:	mov	r0, r9
   1bc30:	bl	1bf9c <argp_parse@@Base+0x258c>
   1bc34:	cmp	r0, #0
   1bc38:	beq	1bcac <argp_parse@@Base+0x229c>
   1bc3c:	str	r4, [r8]
   1bc40:	add	sp, sp, #12
   1bc44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc48:	cmp	r7, #0
   1bc4c:	blt	1bd08 <argp_parse@@Base+0x22f8>
   1bc50:	beq	1bb68 <argp_parse@@Base+0x2158>
   1bc54:	cmp	r4, #0
   1bc58:	blt	1bd38 <argp_parse@@Base+0x2328>
   1bc5c:	mov	r1, r7
   1bc60:	mvn	r0, #-2147483648	; 0x80000000
   1bc64:	str	r3, [sp, #4]
   1bc68:	bl	1e2a8 <argp_parse@@Base+0x4898>
   1bc6c:	ldr	r3, [sp, #4]
   1bc70:	cmp	r0, r4
   1bc74:	movge	r0, #0
   1bc78:	movlt	r0, #1
   1bc7c:	cmp	r0, #0
   1bc80:	mvnne	r5, #-2147483648	; 0x80000000
   1bc84:	bne	1bb6c <argp_parse@@Base+0x215c>
   1bc88:	mul	r5, r7, r4
   1bc8c:	cmp	r5, #63	; 0x3f
   1bc90:	bgt	1bb94 <argp_parse@@Base+0x2184>
   1bc94:	b	1bb68 <argp_parse@@Base+0x2158>
   1bc98:	rsb	r1, r4, #-2147483648	; 0x80000000
   1bc9c:	cmp	r6, r1
   1bca0:	movge	r1, #0
   1bca4:	movlt	r1, #1
   1bca8:	b	1bb34 <argp_parse@@Base+0x2124>
   1bcac:	adds	r5, r5, #0
   1bcb0:	movne	r5, #1
   1bcb4:	cmp	r9, #0
   1bcb8:	orreq	r5, r5, #1
   1bcbc:	cmp	r5, #0
   1bcc0:	beq	1bc3c <argp_parse@@Base+0x222c>
   1bcc4:	bl	1befc <argp_parse@@Base+0x24ec>
   1bcc8:	rsb	r2, sl, #-2147483648	; 0x80000000
   1bccc:	cmp	r6, r2
   1bcd0:	movge	r2, #0
   1bcd4:	movlt	r2, #1
   1bcd8:	b	1bbcc <argp_parse@@Base+0x21bc>
   1bcdc:	cmp	r6, #0
   1bce0:	blt	1bd64 <argp_parse@@Base+0x2354>
   1bce4:	cmn	r7, #1
   1bce8:	beq	1bc24 <argp_parse@@Base+0x2214>
   1bcec:	mov	r1, r7
   1bcf0:	mov	r0, #-2147483648	; 0x80000000
   1bcf4:	bl	1e2a8 <argp_parse@@Base+0x4898>
   1bcf8:	cmp	r6, r0
   1bcfc:	movle	r0, #0
   1bd00:	movgt	r0, #1
   1bd04:	b	1bc1c <argp_parse@@Base+0x220c>
   1bd08:	cmp	r4, #0
   1bd0c:	blt	1bda4 <argp_parse@@Base+0x2394>
   1bd10:	cmn	r7, #1
   1bd14:	beq	1bc88 <argp_parse@@Base+0x2278>
   1bd18:	str	r3, [sp, #4]
   1bd1c:	mov	r1, r7
   1bd20:	mov	r0, #-2147483648	; 0x80000000
   1bd24:	b	1bc68 <argp_parse@@Base+0x2258>
   1bd28:	mov	r4, fp
   1bd2c:	b	1bc5c <argp_parse@@Base+0x224c>
   1bd30:	mov	r4, fp
   1bd34:	b	1bd10 <argp_parse@@Base+0x2300>
   1bd38:	cmn	r4, #1
   1bd3c:	beq	1bc88 <argp_parse@@Base+0x2278>
   1bd40:	mov	r1, r4
   1bd44:	mov	r0, #-2147483648	; 0x80000000
   1bd48:	str	r3, [sp, #4]
   1bd4c:	bl	1e2a8 <argp_parse@@Base+0x4898>
   1bd50:	ldr	r3, [sp, #4]
   1bd54:	cmp	r7, r0
   1bd58:	movle	r0, #0
   1bd5c:	movgt	r0, #1
   1bd60:	b	1bc7c <argp_parse@@Base+0x226c>
   1bd64:	mov	r1, r7
   1bd68:	mvn	r0, #-2147483648	; 0x80000000
   1bd6c:	bl	1e2a8 <argp_parse@@Base+0x4898>
   1bd70:	cmp	r6, r0
   1bd74:	movge	r0, #0
   1bd78:	movlt	r0, #1
   1bd7c:	b	1bc1c <argp_parse@@Base+0x220c>
   1bd80:	cmn	r6, #1
   1bd84:	beq	1bc24 <argp_parse@@Base+0x2214>
   1bd88:	mov	r1, r6
   1bd8c:	mov	r0, #-2147483648	; 0x80000000
   1bd90:	bl	1e2a8 <argp_parse@@Base+0x4898>
   1bd94:	cmp	r7, r0
   1bd98:	movle	r0, #0
   1bd9c:	movgt	r0, #1
   1bda0:	b	1bc1c <argp_parse@@Base+0x220c>
   1bda4:	mov	r1, r7
   1bda8:	mvn	r0, #-2147483648	; 0x80000000
   1bdac:	str	r3, [sp, #4]
   1bdb0:	bl	1e2a8 <argp_parse@@Base+0x4898>
   1bdb4:	ldr	r3, [sp, #4]
   1bdb8:	cmp	r0, r4
   1bdbc:	movle	r0, #0
   1bdc0:	movgt	r0, #1
   1bdc4:	b	1bc7c <argp_parse@@Base+0x226c>
   1bdc8:	push	{r4, lr}
   1bdcc:	mov	r1, #1
   1bdd0:	bl	1bf28 <argp_parse@@Base+0x2518>
   1bdd4:	cmp	r0, #0
   1bdd8:	popne	{r4, pc}
   1bddc:	bl	1befc <argp_parse@@Base+0x24ec>
   1bde0:	push	{r4, lr}
   1bde4:	mov	r1, #1
   1bde8:	bl	1bf28 <argp_parse@@Base+0x2518>
   1bdec:	cmp	r0, #0
   1bdf0:	popne	{r4, pc}
   1bdf4:	bl	1befc <argp_parse@@Base+0x24ec>
   1bdf8:	push	{r4, lr}
   1bdfc:	bl	1bf28 <argp_parse@@Base+0x2518>
   1be00:	cmp	r0, #0
   1be04:	popne	{r4, pc}
   1be08:	bl	1befc <argp_parse@@Base+0x24ec>
   1be0c:	push	{r4, lr}
   1be10:	bl	1bf28 <argp_parse@@Base+0x2518>
   1be14:	cmp	r0, #0
   1be18:	popne	{r4, pc}
   1be1c:	bl	1befc <argp_parse@@Base+0x24ec>
   1be20:	push	{r4, r5, r6, lr}
   1be24:	mov	r6, r0
   1be28:	mov	r0, r1
   1be2c:	mov	r4, r1
   1be30:	bl	1bf70 <argp_parse@@Base+0x2560>
   1be34:	subs	r5, r0, #0
   1be38:	beq	1be50 <argp_parse@@Base+0x2440>
   1be3c:	mov	r2, r4
   1be40:	mov	r1, r6
   1be44:	bl	111b4 <memcpy@plt>
   1be48:	mov	r0, r5
   1be4c:	pop	{r4, r5, r6, pc}
   1be50:	bl	1befc <argp_parse@@Base+0x24ec>
   1be54:	push	{r4, r5, r6, lr}
   1be58:	mov	r6, r0
   1be5c:	mov	r0, r1
   1be60:	mov	r4, r1
   1be64:	bl	1bf70 <argp_parse@@Base+0x2560>
   1be68:	subs	r5, r0, #0
   1be6c:	beq	1be84 <argp_parse@@Base+0x2474>
   1be70:	mov	r2, r4
   1be74:	mov	r1, r6
   1be78:	bl	111b4 <memcpy@plt>
   1be7c:	mov	r0, r5
   1be80:	pop	{r4, r5, r6, pc}
   1be84:	bl	1befc <argp_parse@@Base+0x24ec>
   1be88:	push	{r4, r5, r6, lr}
   1be8c:	mov	r6, r0
   1be90:	add	r0, r1, #1
   1be94:	mov	r4, r1
   1be98:	bl	1bf70 <argp_parse@@Base+0x2560>
   1be9c:	subs	r5, r0, #0
   1bea0:	beq	1bec0 <argp_parse@@Base+0x24b0>
   1bea4:	mov	r3, #0
   1bea8:	mov	r1, r6
   1beac:	strb	r3, [r5, r4]
   1beb0:	mov	r2, r4
   1beb4:	bl	111b4 <memcpy@plt>
   1beb8:	mov	r0, r5
   1bebc:	pop	{r4, r5, r6, pc}
   1bec0:	bl	1befc <argp_parse@@Base+0x24ec>
   1bec4:	push	{r4, r5, r6, lr}
   1bec8:	mov	r6, r0
   1becc:	bl	11304 <strlen@plt>
   1bed0:	add	r4, r0, #1
   1bed4:	mov	r0, r4
   1bed8:	bl	1bf70 <argp_parse@@Base+0x2560>
   1bedc:	subs	r5, r0, #0
   1bee0:	beq	1bef8 <argp_parse@@Base+0x24e8>
   1bee4:	mov	r2, r4
   1bee8:	mov	r1, r6
   1beec:	bl	111b4 <memcpy@plt>
   1bef0:	mov	r0, r5
   1bef4:	pop	{r4, r5, r6, pc}
   1bef8:	bl	1befc <argp_parse@@Base+0x24ec>
   1befc:	ldr	r1, [pc, #24]	; 1bf1c <argp_parse@@Base+0x250c>
   1bf00:	push	{r4, lr}
   1bf04:	ldr	r0, [r1]
   1bf08:	ldr	r3, [pc, #16]	; 1bf20 <argp_parse@@Base+0x2510>
   1bf0c:	ldr	r2, [pc, #16]	; 1bf24 <argp_parse@@Base+0x2514>
   1bf10:	mov	r1, #0
   1bf14:	bl	11268 <error@plt>
   1bf18:	bl	11454 <abort@plt>
   1bf1c:	andeq	r1, r3, r0, lsl r6
   1bf20:	andeq	pc, r1, r8, lsl #28
   1bf24:			; <UNDEFINED> instruction: 0x0001e6b4
   1bf28:	cmp	r1, #0
   1bf2c:	cmpne	r0, #0
   1bf30:	moveq	r1, #1
   1bf34:	moveq	r0, r1
   1bf38:	umull	r2, r3, r0, r1
   1bf3c:	adds	r3, r3, #0
   1bf40:	movne	r3, #1
   1bf44:	cmp	r2, #0
   1bf48:	blt	1bf58 <argp_parse@@Base+0x2548>
   1bf4c:	cmp	r3, #0
   1bf50:	bne	1bf58 <argp_parse@@Base+0x2548>
   1bf54:	b	11100 <calloc@plt>
   1bf58:	push	{r4, lr}
   1bf5c:	bl	11328 <__errno_location@plt>
   1bf60:	mov	r3, #12
   1bf64:	str	r3, [r0]
   1bf68:	mov	r0, #0
   1bf6c:	pop	{r4, pc}
   1bf70:	cmp	r0, #0
   1bf74:	moveq	r0, #1
   1bf78:	cmp	r0, #0
   1bf7c:	blt	1bf84 <argp_parse@@Base+0x2574>
   1bf80:	b	1128c <malloc@plt>
   1bf84:	push	{r4, lr}
   1bf88:	bl	11328 <__errno_location@plt>
   1bf8c:	mov	r3, #12
   1bf90:	str	r3, [r0]
   1bf94:	mov	r0, #0
   1bf98:	pop	{r4, pc}
   1bf9c:	cmp	r0, #0
   1bfa0:	beq	1bfc4 <argp_parse@@Base+0x25b4>
   1bfa4:	cmp	r1, #0
   1bfa8:	push	{lr}		; (str lr, [sp, #-4]!)
   1bfac:	sub	sp, sp, #12
   1bfb0:	beq	1bfcc <argp_parse@@Base+0x25bc>
   1bfb4:	blt	1bfe4 <argp_parse@@Base+0x25d4>
   1bfb8:	add	sp, sp, #12
   1bfbc:	pop	{lr}		; (ldr lr, [sp], #4)
   1bfc0:	b	1122c <realloc@plt>
   1bfc4:	mov	r0, r1
   1bfc8:	b	1bf70 <argp_parse@@Base+0x2560>
   1bfcc:	str	r1, [sp, #4]
   1bfd0:	bl	1a98c <argp_parse@@Base+0xf7c>
   1bfd4:	ldr	r3, [sp, #4]
   1bfd8:	mov	r0, r3
   1bfdc:	add	sp, sp, #12
   1bfe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfe4:	bl	11328 <__errno_location@plt>
   1bfe8:	mov	r2, #12
   1bfec:	mov	r3, #0
   1bff0:	str	r2, [r0]
   1bff4:	b	1bfd8 <argp_parse@@Base+0x25c8>
   1bff8:	push	{r4, r5, r6, r7, r8, lr}
   1bffc:	mov	r8, r0
   1c000:	mov	r0, #36	; 0x24
   1c004:	mov	r7, r1
   1c008:	mov	r6, r2
   1c00c:	mov	r5, r3
   1c010:	bl	1bf70 <argp_parse@@Base+0x2560>
   1c014:	subs	r4, r0, #0
   1c018:	beq	1c05c <argp_parse@@Base+0x264c>
   1c01c:	mov	r0, #0
   1c020:	str	r5, [r4, #12]
   1c024:	str	r0, [r4, #20]
   1c028:	str	r0, [r4, #16]
   1c02c:	str	r8, [r4]
   1c030:	str	r7, [r4, #4]
   1c034:	str	r6, [r4, #8]
   1c038:	mov	r0, #200	; 0xc8
   1c03c:	bl	1bf70 <argp_parse@@Base+0x2560>
   1c040:	cmp	r0, #0
   1c044:	addne	r3, r0, #200	; 0xc8
   1c048:	mov	r5, r0
   1c04c:	str	r0, [r4, #24]
   1c050:	strne	r0, [r4, #28]
   1c054:	strne	r3, [r4, #32]
   1c058:	beq	1c064 <argp_parse@@Base+0x2654>
   1c05c:	mov	r0, r4
   1c060:	pop	{r4, r5, r6, r7, r8, pc}
   1c064:	mov	r0, r4
   1c068:	bl	1a98c <argp_parse@@Base+0xf7c>
   1c06c:	mov	r4, r5
   1c070:	b	1c05c <argp_parse@@Base+0x264c>
   1c074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c078:	mov	r7, r0
   1c07c:	ldr	r4, [r0, #24]
   1c080:	ldr	r3, [r0, #16]
   1c084:	ldr	r9, [r0, #28]
   1c088:	sub	sp, sp, #12
   1c08c:	add	r4, r4, r3
   1c090:	mov	sl, #32
   1c094:	cmp	r4, r9
   1c098:	bcs	1c16c <argp_parse@@Base+0x275c>
   1c09c:	ldr	r8, [r7, #20]
   1c0a0:	cmp	r8, #0
   1c0a4:	bne	1c110 <argp_parse@@Base+0x2700>
   1c0a8:	ldr	r5, [r7, #4]
   1c0ac:	cmp	r5, #0
   1c0b0:	beq	1c3e0 <argp_parse@@Base+0x29d0>
   1c0b4:	ldr	r2, [r7, #32]
   1c0b8:	add	r3, r9, r5
   1c0bc:	cmp	r2, r3
   1c0c0:	bls	1c0d8 <argp_parse@@Base+0x26c8>
   1c0c4:	b	1c508 <argp_parse@@Base+0x2af8>
   1c0c8:	cmp	r5, r8
   1c0cc:	str	r1, [r0, #20]
   1c0d0:	strb	sl, [r3]
   1c0d4:	beq	1c104 <argp_parse@@Base+0x26f4>
   1c0d8:	ldr	r0, [r7]
   1c0dc:	add	r8, r8, #1
   1c0e0:	ldr	r3, [r0, #20]
   1c0e4:	ldr	r2, [r0, #24]
   1c0e8:	add	r1, r3, #1
   1c0ec:	cmp	r3, r2
   1c0f0:	bcc	1c0c8 <argp_parse@@Base+0x26b8>
   1c0f4:	mov	r1, sl
   1c0f8:	bl	11394 <__overflow@plt>
   1c0fc:	cmp	r5, r8
   1c100:	bne	1c0d8 <argp_parse@@Base+0x26c8>
   1c104:	ldr	r9, [r7, #28]
   1c108:	mov	r8, r5
   1c10c:	str	r5, [r7, #20]
   1c110:	sub	fp, r9, r4
   1c114:	mov	r2, fp
   1c118:	mov	r1, #10
   1c11c:	mov	r0, r4
   1c120:	bl	1137c <memchr@plt>
   1c124:	cmp	r8, #0
   1c128:	movlt	r8, #0
   1c12c:	movlt	r3, r8
   1c130:	mov	r5, r0
   1c134:	strlt	r3, [r7, #20]
   1c138:	cmp	r5, #0
   1c13c:	beq	1c400 <argp_parse@@Base+0x29f0>
   1c140:	sub	r2, r5, r4
   1c144:	ldr	r3, [r7, #8]
   1c148:	add	r2, r2, r8
   1c14c:	cmp	r2, r3
   1c150:	bge	1c180 <argp_parse@@Base+0x2770>
   1c154:	ldr	r9, [r7, #28]
   1c158:	add	r4, r5, #1
   1c15c:	mov	r3, #0
   1c160:	cmp	r4, r9
   1c164:	str	r3, [r7, #20]
   1c168:	bcc	1c09c <argp_parse@@Base+0x268c>
   1c16c:	ldr	r3, [r7, #24]
   1c170:	sub	r9, r9, r3
   1c174:	str	r9, [r7, #16]
   1c178:	add	sp, sp, #12
   1c17c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c180:	ldr	r2, [r7, #12]
   1c184:	sub	r6, r3, #1
   1c188:	cmp	r2, #0
   1c18c:	str	r2, [sp, #4]
   1c190:	blt	1c4b8 <argp_parse@@Base+0x2aa8>
   1c194:	add	r6, r6, #1
   1c198:	sub	r8, r6, r8
   1c19c:	adds	r8, r4, r8
   1c1a0:	bcs	1c438 <argp_parse@@Base+0x2a28>
   1c1a4:	bl	112d4 <__ctype_b_loc@plt>
   1c1a8:	mov	r3, r8
   1c1ac:	ldr	r0, [r0]
   1c1b0:	b	1c1bc <argp_parse@@Base+0x27ac>
   1c1b4:	cmp	r3, r4
   1c1b8:	bcc	1c43c <argp_parse@@Base+0x2a2c>
   1c1bc:	mov	r1, r3
   1c1c0:	sub	r3, r3, #1
   1c1c4:	ldrb	r2, [r1]
   1c1c8:	mov	r6, r3
   1c1cc:	lsl	r2, r2, #1
   1c1d0:	ldrh	r2, [r0, r2]
   1c1d4:	tst	r2, #1
   1c1d8:	beq	1c1b4 <argp_parse@@Base+0x27a4>
   1c1dc:	add	r6, r1, #1
   1c1e0:	cmp	r6, r4
   1c1e4:	bls	1c450 <argp_parse@@Base+0x2a40>
   1c1e8:	cmp	r4, r1
   1c1ec:	bhi	1c448 <argp_parse@@Base+0x2a38>
   1c1f0:	mov	r1, r3
   1c1f4:	sub	r8, r4, #1
   1c1f8:	b	1c214 <argp_parse@@Base+0x2804>
   1c1fc:	ldrb	r3, [r1]
   1c200:	sub	r1, r1, #1
   1c204:	lsl	r3, r3, #1
   1c208:	ldrh	r3, [r0, r3]
   1c20c:	tst	r3, #1
   1c210:	beq	1c540 <argp_parse@@Base+0x2b30>
   1c214:	cmp	r8, r1
   1c218:	mov	r2, r1
   1c21c:	bne	1c1fc <argp_parse@@Base+0x27ec>
   1c220:	add	r8, r8, #1
   1c224:	add	r3, fp, #1
   1c228:	add	r3, r4, r3
   1c22c:	cmp	r6, r3
   1c230:	beq	1c310 <argp_parse@@Base+0x2900>
   1c234:	add	r5, r8, #1
   1c238:	ldr	r3, [sp, #4]
   1c23c:	sub	r1, r6, r5
   1c240:	cmp	r1, r3
   1c244:	bge	1c32c <argp_parse@@Base+0x291c>
   1c248:	cmp	r6, r9
   1c24c:	bcs	1c324 <argp_parse@@Base+0x2914>
   1c250:	ldr	r3, [r7, #32]
   1c254:	ldr	r2, [sp, #4]
   1c258:	sub	r3, r3, r9
   1c25c:	add	r0, r2, #1
   1c260:	cmp	r3, r0
   1c264:	bgt	1c570 <argp_parse@@Base+0x2b60>
   1c268:	ldr	r0, [r7, #24]
   1c26c:	cmp	r8, r0
   1c270:	bls	1c284 <argp_parse@@Base+0x2874>
   1c274:	sub	r2, r8, r0
   1c278:	ldr	r3, [r7]
   1c27c:	mov	r1, #1
   1c280:	bl	111cc <fwrite_unlocked@plt>
   1c284:	ldr	r0, [r7]
   1c288:	ldr	r2, [r0, #24]
   1c28c:	ldr	r3, [r0, #20]
   1c290:	cmp	r3, r2
   1c294:	addcc	r2, r3, #1
   1c298:	strcc	r2, [r0, #20]
   1c29c:	movcc	r2, #10
   1c2a0:	strbcc	r2, [r3]
   1c2a4:	bcs	1c5b0 <argp_parse@@Base+0x2ba0>
   1c2a8:	ldr	r5, [r7, #24]
   1c2ac:	sub	r4, r4, r5
   1c2b0:	sub	r1, r6, r5
   1c2b4:	add	fp, fp, r4
   1c2b8:	mov	r9, r1
   1c2bc:	mov	r2, r5
   1c2c0:	ldr	r3, [r7, #12]
   1c2c4:	cmp	r3, r1
   1c2c8:	bgt	1c348 <argp_parse@@Base+0x2938>
   1c2cc:	cmp	r3, #0
   1c2d0:	mov	r4, r5
   1c2d4:	ble	1c2ec <argp_parse@@Base+0x28dc>
   1c2d8:	strb	sl, [r4], #1
   1c2dc:	ldr	r3, [r7, #12]
   1c2e0:	sub	r1, r4, r5
   1c2e4:	cmp	r1, r3
   1c2e8:	blt	1c2d8 <argp_parse@@Base+0x28c8>
   1c2ec:	cmp	r4, r6
   1c2f0:	bcc	1c3c4 <argp_parse@@Base+0x29b4>
   1c2f4:	sub	r9, fp, r9
   1c2f8:	cmp	r3, #0
   1c2fc:	add	r9, r4, r9
   1c300:	mvneq	r3, #0
   1c304:	str	r9, [r7, #28]
   1c308:	str	r3, [r7, #20]
   1c30c:	b	1c094 <argp_parse@@Base+0x2684>
   1c310:	ldr	r3, [r7, #32]
   1c314:	ldr	r2, [sp, #4]
   1c318:	sub	r3, r3, r8
   1c31c:	cmp	r3, r2
   1c320:	ble	1c248 <argp_parse@@Base+0x2838>
   1c324:	add	r5, r8, #1
   1c328:	sub	r1, r6, r5
   1c32c:	mov	r3, #10
   1c330:	strb	r3, [r8]
   1c334:	ldr	r3, [r7, #12]
   1c338:	sub	r9, r6, r4
   1c33c:	cmp	r3, r1
   1c340:	mov	r2, r4
   1c344:	ble	1c2cc <argp_parse@@Base+0x28bc>
   1c348:	add	r1, fp, #1
   1c34c:	add	r1, r2, r1
   1c350:	cmp	r6, r1
   1c354:	beq	1c55c <argp_parse@@Base+0x2b4c>
   1c358:	cmp	r3, #0
   1c35c:	ble	1c3b8 <argp_parse@@Base+0x29a8>
   1c360:	mov	r4, #0
   1c364:	mov	r8, r2
   1c368:	b	1c384 <argp_parse@@Base+0x2974>
   1c36c:	str	ip, [r0, #20]
   1c370:	strb	sl, [r3]
   1c374:	ldr	r3, [r7, #12]
   1c378:	add	r4, r4, #1
   1c37c:	cmp	r3, r4
   1c380:	ble	1c3b4 <argp_parse@@Base+0x29a4>
   1c384:	ldr	r0, [r7]
   1c388:	ldr	r3, [r0, #20]
   1c38c:	ldr	r1, [r0, #24]
   1c390:	add	ip, r3, #1
   1c394:	cmp	r3, r1
   1c398:	bcc	1c36c <argp_parse@@Base+0x295c>
   1c39c:	mov	r1, sl
   1c3a0:	bl	11394 <__overflow@plt>
   1c3a4:	ldr	r3, [r7, #12]
   1c3a8:	add	r4, r4, #1
   1c3ac:	cmp	r3, r4
   1c3b0:	bgt	1c384 <argp_parse@@Base+0x2974>
   1c3b4:	mov	r2, r8
   1c3b8:	mov	r4, r5
   1c3bc:	cmp	r4, r6
   1c3c0:	bcs	1c2f4 <argp_parse@@Base+0x28e4>
   1c3c4:	add	r2, r2, fp
   1c3c8:	sub	r2, r2, r6
   1c3cc:	mov	r1, r6
   1c3d0:	mov	r0, r4
   1c3d4:	bl	11178 <memmove@plt>
   1c3d8:	ldr	r3, [r7, #12]
   1c3dc:	b	1c2f4 <argp_parse@@Base+0x28e4>
   1c3e0:	sub	fp, r9, r4
   1c3e4:	mov	r2, fp
   1c3e8:	mov	r1, #10
   1c3ec:	mov	r0, r4
   1c3f0:	bl	1137c <memchr@plt>
   1c3f4:	mov	r5, r0
   1c3f8:	cmp	r5, #0
   1c3fc:	bne	1c140 <argp_parse@@Base+0x2730>
   1c400:	ldr	r6, [r7, #8]
   1c404:	add	r3, fp, r8
   1c408:	cmp	r3, r6
   1c40c:	bcc	1c5d4 <argp_parse@@Base+0x2bc4>
   1c410:	ldr	r2, [r7, #12]
   1c414:	sub	r6, r6, #1
   1c418:	cmp	r2, #0
   1c41c:	str	r2, [sp, #4]
   1c420:	blt	1c5c0 <argp_parse@@Base+0x2bb0>
   1c424:	add	r6, r6, #1
   1c428:	sub	r8, r6, r8
   1c42c:	adds	r8, r4, r8
   1c430:	mov	r5, r9
   1c434:	bcc	1c1a4 <argp_parse@@Base+0x2794>
   1c438:	mov	r6, r8
   1c43c:	add	r6, r6, #1
   1c440:	cmp	r4, r6
   1c444:	bcs	1c450 <argp_parse@@Base+0x2a40>
   1c448:	mov	r8, r6
   1c44c:	b	1c224 <argp_parse@@Base+0x2814>
   1c450:	cmp	r8, r5
   1c454:	bcs	1c48c <argp_parse@@Base+0x2a7c>
   1c458:	add	r6, r8, #1
   1c45c:	b	1c480 <argp_parse@@Base+0x2a70>
   1c460:	bl	112d4 <__ctype_b_loc@plt>
   1c464:	ldrb	r3, [r6]
   1c468:	add	r6, r6, #1
   1c46c:	lsl	r3, r3, #1
   1c470:	ldr	r2, [r0]
   1c474:	ldrh	r3, [r2, r3]
   1c478:	tst	r3, #1
   1c47c:	bne	1c49c <argp_parse@@Base+0x2a8c>
   1c480:	cmp	r6, r5
   1c484:	mov	r8, r6
   1c488:	bne	1c460 <argp_parse@@Base+0x2a50>
   1c48c:	cmp	r8, r5
   1c490:	beq	1c548 <argp_parse@@Base+0x2b38>
   1c494:	bl	112d4 <__ctype_b_loc@plt>
   1c498:	ldr	r2, [r0]
   1c49c:	mov	r6, r8
   1c4a0:	ldrb	r3, [r6, #1]!
   1c4a4:	lsl	r3, r3, #1
   1c4a8:	ldrh	r3, [r2, r3]
   1c4ac:	tst	r3, #1
   1c4b0:	bne	1c4a0 <argp_parse@@Base+0x2a90>
   1c4b4:	b	1c224 <argp_parse@@Base+0x2814>
   1c4b8:	cmp	r9, r5
   1c4bc:	str	r3, [sp, #4]
   1c4c0:	bls	1c5bc <argp_parse@@Base+0x2bac>
   1c4c4:	sub	r0, r6, r8
   1c4c8:	sub	r2, r9, r5
   1c4cc:	add	r0, r4, r0
   1c4d0:	mov	r1, r5
   1c4d4:	bl	11178 <memmove@plt>
   1c4d8:	ldr	r2, [r7, #20]
   1c4dc:	ldr	r9, [r7, #28]
   1c4e0:	sub	r6, r6, r2
   1c4e4:	add	r6, r4, r6
   1c4e8:	mov	r3, #0
   1c4ec:	sub	r5, r6, r5
   1c4f0:	str	r3, [r7, #20]
   1c4f4:	ldr	r3, [sp, #4]
   1c4f8:	sub	r9, r9, r5
   1c4fc:	add	r4, r4, r3
   1c500:	str	r9, [r7, #28]
   1c504:	b	1c094 <argp_parse@@Base+0x2684>
   1c508:	add	r6, r4, r5
   1c50c:	sub	r2, r9, r4
   1c510:	mov	r1, r4
   1c514:	mov	r0, r6
   1c518:	bl	11178 <memmove@plt>
   1c51c:	ldr	r3, [r7, #28]
   1c520:	mov	r0, r4
   1c524:	add	r3, r3, r5
   1c528:	str	r3, [r7, #28]
   1c52c:	mov	r2, r5
   1c530:	mov	r1, sl
   1c534:	mov	r4, r6
   1c538:	bl	11358 <memset@plt>
   1c53c:	b	1c104 <argp_parse@@Base+0x26f4>
   1c540:	add	r8, r2, #1
   1c544:	b	1c224 <argp_parse@@Base+0x2814>
   1c548:	mov	r3, #0
   1c54c:	str	r3, [r7, #20]
   1c550:	add	r4, r8, #1
   1c554:	ldr	r9, [r7, #28]
   1c558:	b	1c094 <argp_parse@@Base+0x2684>
   1c55c:	ldr	r1, [r7, #32]
   1c560:	sub	r1, r1, r6
   1c564:	cmp	r3, r1
   1c568:	ble	1c2cc <argp_parse@@Base+0x28bc>
   1c56c:	b	1c358 <argp_parse@@Base+0x2948>
   1c570:	sub	r9, r9, r6
   1c574:	mov	r1, r6
   1c578:	mov	r2, r9
   1c57c:	add	r0, r8, r0
   1c580:	bl	11178 <memmove@plt>
   1c584:	ldr	r1, [r7, #12]
   1c588:	mov	r3, #10
   1c58c:	add	r6, r1, #1
   1c590:	add	r6, r8, r6
   1c594:	add	r9, r6, r9
   1c598:	sub	fp, r9, r4
   1c59c:	add	r5, r8, #1
   1c5a0:	strb	r3, [r8]
   1c5a4:	sub	r9, r6, r4
   1c5a8:	mov	r2, r4
   1c5ac:	b	1c2c0 <argp_parse@@Base+0x28b0>
   1c5b0:	mov	r1, #10
   1c5b4:	bl	11394 <__overflow@plt>
   1c5b8:	b	1c2a8 <argp_parse@@Base+0x2898>
   1c5bc:	add	r3, r8, fp
   1c5c0:	sub	r6, r6, r3
   1c5c4:	add	r9, r9, r6
   1c5c8:	str	r9, [r7, #28]
   1c5cc:	str	r3, [r7, #20]
   1c5d0:	b	1c16c <argp_parse@@Base+0x275c>
   1c5d4:	str	r3, [r7, #20]
   1c5d8:	ldr	r9, [r7, #28]
   1c5dc:	b	1c16c <argp_parse@@Base+0x275c>
   1c5e0:	push	{r4, lr}
   1c5e4:	mov	r4, r0
   1c5e8:	bl	1c074 <argp_parse@@Base+0x2664>
   1c5ec:	ldr	r2, [r4, #28]
   1c5f0:	ldr	r0, [r4, #24]
   1c5f4:	cmp	r2, r0
   1c5f8:	bls	1c610 <argp_parse@@Base+0x2c00>
   1c5fc:	sub	r2, r2, r0
   1c600:	ldr	r3, [r4]
   1c604:	mov	r1, #1
   1c608:	bl	111cc <fwrite_unlocked@plt>
   1c60c:	ldr	r0, [r4, #24]
   1c610:	bl	1a98c <argp_parse@@Base+0xf7c>
   1c614:	mov	r0, r4
   1c618:	pop	{r4, lr}
   1c61c:	b	1a98c <argp_parse@@Base+0xf7c>
   1c620:	ldr	r3, [r0, #32]
   1c624:	ldr	r2, [r0, #28]
   1c628:	sub	r3, r3, r2
   1c62c:	cmp	r3, r1
   1c630:	bcc	1c640 <argp_parse@@Base+0x2c30>
   1c634:	mov	r3, #1
   1c638:	mov	r0, r3
   1c63c:	bx	lr
   1c640:	push	{r4, r5, r6, lr}
   1c644:	mov	r4, r0
   1c648:	mov	r5, r1
   1c64c:	bl	1c074 <argp_parse@@Base+0x2664>
   1c650:	ldr	r3, [r4, #24]
   1c654:	ldr	r2, [r4, #28]
   1c658:	mov	r0, r3
   1c65c:	sub	r2, r2, r3
   1c660:	mov	r1, #1
   1c664:	ldr	r3, [r4]
   1c668:	bl	111cc <fwrite_unlocked@plt>
   1c66c:	ldr	r2, [r4, #28]
   1c670:	ldr	r3, [r4, #24]
   1c674:	sub	r1, r2, r3
   1c678:	cmp	r0, r1
   1c67c:	bne	1c6c4 <argp_parse@@Base+0x2cb4>
   1c680:	ldr	r1, [r4, #32]
   1c684:	mov	r2, #0
   1c688:	sub	r1, r1, r3
   1c68c:	cmp	r5, r1
   1c690:	str	r3, [r4, #28]
   1c694:	str	r2, [r4, #16]
   1c698:	bls	1c6b8 <argp_parse@@Base+0x2ca8>
   1c69c:	adds	r5, r5, r1
   1c6a0:	bcc	1c6f4 <argp_parse@@Base+0x2ce4>
   1c6a4:	bl	11328 <__errno_location@plt>
   1c6a8:	mov	r2, #12
   1c6ac:	mov	r3, #0
   1c6b0:	str	r2, [r0]
   1c6b4:	b	1c6bc <argp_parse@@Base+0x2cac>
   1c6b8:	mov	r3, #1
   1c6bc:	mov	r0, r3
   1c6c0:	pop	{r4, r5, r6, pc}
   1c6c4:	ldr	r1, [r4, #16]
   1c6c8:	sub	r2, r2, r0
   1c6cc:	sub	r1, r1, r0
   1c6d0:	str	r2, [r4, #28]
   1c6d4:	str	r1, [r4, #16]
   1c6d8:	sub	r2, r2, r3
   1c6dc:	add	r1, r3, r0
   1c6e0:	mov	r0, r3
   1c6e4:	bl	11178 <memmove@plt>
   1c6e8:	mov	r3, #0
   1c6ec:	mov	r0, r3
   1c6f0:	pop	{r4, r5, r6, pc}
   1c6f4:	mov	r0, r3
   1c6f8:	mov	r1, r5
   1c6fc:	bl	1bf9c <argp_parse@@Base+0x258c>
   1c700:	cmp	r0, #0
   1c704:	beq	1c6a4 <argp_parse@@Base+0x2c94>
   1c708:	add	r5, r0, r5
   1c70c:	mov	r3, #1
   1c710:	str	r5, [r4, #32]
   1c714:	str	r0, [r4, #24]
   1c718:	str	r0, [r4, #28]
   1c71c:	b	1c6bc <argp_parse@@Base+0x2cac>
   1c720:	push	{r1, r2, r3}
   1c724:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c728:	sub	sp, sp, #8
   1c72c:	mov	r5, r0
   1c730:	ldr	r7, [sp, #36]	; 0x24
   1c734:	mov	r4, #150	; 0x96
   1c738:	mov	r8, #1
   1c73c:	mov	r9, #0
   1c740:	add	r6, sp, #40	; 0x28
   1c744:	ldr	r1, [r5, #32]
   1c748:	ldr	r0, [r5, #28]
   1c74c:	sub	r3, r1, r0
   1c750:	cmp	r4, r3
   1c754:	bhi	1c79c <argp_parse@@Base+0x2d8c>
   1c758:	sub	r4, r1, r0
   1c75c:	mov	r1, r4
   1c760:	mov	r3, r6
   1c764:	mov	r2, r7
   1c768:	str	r6, [sp, #4]
   1c76c:	bl	1140c <vsnprintf@plt>
   1c770:	cmp	r4, r0
   1c774:	bls	1c794 <argp_parse@@Base+0x2d84>
   1c778:	ldr	r3, [r5, #28]
   1c77c:	add	r3, r3, r0
   1c780:	str	r3, [r5, #28]
   1c784:	add	sp, sp, #8
   1c788:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1c78c:	add	sp, sp, #12
   1c790:	bx	lr
   1c794:	add	r4, r0, #1
   1c798:	b	1c744 <argp_parse@@Base+0x2d34>
   1c79c:	mov	r0, r5
   1c7a0:	bl	1c074 <argp_parse@@Base+0x2664>
   1c7a4:	ldr	r3, [r5, #24]
   1c7a8:	ldr	r2, [r5, #28]
   1c7ac:	mov	r0, r3
   1c7b0:	sub	r2, r2, r3
   1c7b4:	mov	r1, r8
   1c7b8:	ldr	r3, [r5]
   1c7bc:	bl	111cc <fwrite_unlocked@plt>
   1c7c0:	ldr	r2, [r5, #28]
   1c7c4:	ldr	r3, [r5, #24]
   1c7c8:	sub	r1, r2, r3
   1c7cc:	cmp	r0, r1
   1c7d0:	bne	1c818 <argp_parse@@Base+0x2e08>
   1c7d4:	ldr	r1, [r5, #32]
   1c7d8:	str	r3, [r5, #28]
   1c7dc:	sub	r0, r1, r3
   1c7e0:	cmp	r4, r0
   1c7e4:	str	r9, [r5, #16]
   1c7e8:	movls	r0, r3
   1c7ec:	bls	1c758 <argp_parse@@Base+0x2d48>
   1c7f0:	adds	r4, r4, r0
   1c7f4:	bcc	1c840 <argp_parse@@Base+0x2e30>
   1c7f8:	bl	11328 <__errno_location@plt>
   1c7fc:	mov	r3, #12
   1c800:	str	r3, [r0]
   1c804:	mvn	r0, #0
   1c808:	add	sp, sp, #8
   1c80c:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1c810:	add	sp, sp, #12
   1c814:	bx	lr
   1c818:	ldr	r1, [r5, #16]
   1c81c:	sub	r2, r2, r0
   1c820:	sub	r1, r1, r0
   1c824:	str	r2, [r5, #28]
   1c828:	str	r1, [r5, #16]
   1c82c:	sub	r2, r2, r3
   1c830:	add	r1, r3, r0
   1c834:	mov	r0, r3
   1c838:	bl	11178 <memmove@plt>
   1c83c:	b	1c804 <argp_parse@@Base+0x2df4>
   1c840:	mov	r1, r4
   1c844:	mov	r0, r3
   1c848:	bl	1bf9c <argp_parse@@Base+0x258c>
   1c84c:	cmp	r0, #0
   1c850:	add	r1, r0, r4
   1c854:	beq	1c7f8 <argp_parse@@Base+0x2de8>
   1c858:	str	r0, [r5, #24]
   1c85c:	str	r1, [r5, #32]
   1c860:	str	r0, [r5, #28]
   1c864:	b	1c758 <argp_parse@@Base+0x2d48>
   1c868:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c86c:	ldr	r4, [r1, #32]
   1c870:	ldr	r8, [r1, #28]
   1c874:	ldr	r7, [r1]
   1c878:	add	r6, r0, r4, lsl #2
   1c87c:	mov	r2, r8
   1c880:	mov	r5, r7
   1c884:	cmp	r5, r4
   1c888:	movle	r3, #0
   1c88c:	movgt	r3, #1
   1c890:	cmp	r2, r4
   1c894:	movge	r3, #0
   1c898:	cmp	r3, #0
   1c89c:	beq	1c910 <argp_parse@@Base+0x2f00>
   1c8a0:	sub	r3, r5, r4
   1c8a4:	sub	sl, r4, r2
   1c8a8:	cmp	r3, sl
   1c8ac:	ble	1c8e0 <argp_parse@@Base+0x2ed0>
   1c8b0:	sub	r5, r5, sl
   1c8b4:	add	sl, sl, r2
   1c8b8:	add	ip, r0, r5, lsl #2
   1c8bc:	add	sl, r0, sl, lsl #2
   1c8c0:	add	r3, r0, r2, lsl #2
   1c8c4:	ldr	r9, [ip]
   1c8c8:	ldr	lr, [r3]
   1c8cc:	str	r9, [r3], #4
   1c8d0:	cmp	r3, sl
   1c8d4:	str	lr, [ip], #4
   1c8d8:	bne	1c8c4 <argp_parse@@Base+0x2eb4>
   1c8dc:	b	1c884 <argp_parse@@Base+0x2e74>
   1c8e0:	add	sl, r3, r2
   1c8e4:	add	r3, r0, r2, lsl #2
   1c8e8:	add	r9, r0, sl, lsl #2
   1c8ec:	mov	r2, r6
   1c8f0:	ldr	lr, [r2]
   1c8f4:	ldr	ip, [r3]
   1c8f8:	str	lr, [r3], #4
   1c8fc:	cmp	r9, r3
   1c900:	str	ip, [r2], #4
   1c904:	bne	1c8f0 <argp_parse@@Base+0x2ee0>
   1c908:	mov	r2, sl
   1c90c:	b	1c884 <argp_parse@@Base+0x2e74>
   1c910:	sub	r4, r7, r4
   1c914:	add	r8, r4, r8
   1c918:	str	r8, [r1, #28]
   1c91c:	str	r7, [r1, #32]
   1c920:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c928:	sub	sp, sp, #52	; 0x34
   1c92c:	str	r1, [sp, #24]
   1c930:	ldr	r1, [sp, #96]	; 0x60
   1c934:	str	r0, [sp, #28]
   1c938:	str	r2, [sp, #32]
   1c93c:	ldr	r8, [r1, #20]
   1c940:	str	r3, [sp, #12]
   1c944:	mov	r7, r8
   1c948:	ldrb	r5, [r8]
   1c94c:	cmp	r5, #61	; 0x3d
   1c950:	cmpne	r5, #0
   1c954:	movne	r5, #1
   1c958:	moveq	r5, #0
   1c95c:	beq	1c978 <argp_parse@@Base+0x2f68>
   1c960:	ldrb	r3, [r7, #1]!
   1c964:	cmp	r3, #0
   1c968:	cmpne	r3, #61	; 0x3d
   1c96c:	bne	1c960 <argp_parse@@Base+0x2f50>
   1c970:	ldr	r3, [sp, #12]
   1c974:	sub	r5, r7, r8
   1c978:	ldr	sl, [r3]
   1c97c:	cmp	sl, #0
   1c980:	beq	1cd58 <argp_parse@@Base+0x3348>
   1c984:	mov	fp, r3
   1c988:	mov	r4, sl
   1c98c:	mov	r6, #0
   1c990:	str	r3, [sp, #20]
   1c994:	mov	r2, r5
   1c998:	mov	r1, r8
   1c99c:	mov	r0, r4
   1c9a0:	bl	11448 <strncmp@plt>
   1c9a4:	mov	r9, fp
   1c9a8:	cmp	r0, #0
   1c9ac:	mov	r0, r4
   1c9b0:	bne	1c9c0 <argp_parse@@Base+0x2fb0>
   1c9b4:	bl	11304 <strlen@plt>
   1c9b8:	cmp	r0, r5
   1c9bc:	beq	1ca80 <argp_parse@@Base+0x3070>
   1c9c0:	ldr	r4, [fp, #16]!
   1c9c4:	add	r6, r6, #1
   1c9c8:	cmp	r4, #0
   1c9cc:	bne	1c994 <argp_parse@@Base+0x2f84>
   1c9d0:	ldr	r3, [sp, #100]	; 0x64
   1c9d4:	cmp	r3, #0
   1c9d8:	ldr	r3, [sp, #92]	; 0x5c
   1c9dc:	beq	1cb24 <argp_parse@@Base+0x3114>
   1c9e0:	cmp	r3, #0
   1c9e4:	bne	1cc3c <argp_parse@@Base+0x322c>
   1c9e8:	mov	fp, r3
   1c9ec:	mov	r0, sl
   1c9f0:	ldr	r4, [sp, #12]
   1c9f4:	ldr	sl, [sp, #96]	; 0x60
   1c9f8:	mov	r9, fp
   1c9fc:	mov	r1, r8
   1ca00:	str	r3, [sp, #16]
   1ca04:	str	r3, [sp, #44]	; 0x2c
   1ca08:	mvn	r3, #0
   1ca0c:	str	r3, [sp, #40]	; 0x28
   1ca10:	str	fp, [sp, #36]	; 0x24
   1ca14:	mov	r2, r5
   1ca18:	bl	11448 <strncmp@plt>
   1ca1c:	cmp	r0, #0
   1ca20:	bne	1ca5c <argp_parse@@Base+0x304c>
   1ca24:	cmp	r9, #0
   1ca28:	beq	1cf90 <argp_parse@@Base+0x3580>
   1ca2c:	ldr	r2, [r9, #4]
   1ca30:	ldr	r3, [r4, #4]
   1ca34:	cmp	r2, r3
   1ca38:	beq	1cfec <argp_parse@@Base+0x35dc>
   1ca3c:	ldr	r3, [sp, #16]
   1ca40:	cmp	r3, #0
   1ca44:	bne	1ca5c <argp_parse@@Base+0x304c>
   1ca48:	ldr	r3, [sp, #36]	; 0x24
   1ca4c:	cmp	r3, #0
   1ca50:	beq	1cec8 <argp_parse@@Base+0x34b8>
   1ca54:	mov	r2, #1
   1ca58:	strb	r2, [r3, fp]
   1ca5c:	ldr	r0, [r4, #16]!
   1ca60:	add	fp, fp, #1
   1ca64:	cmp	r0, #0
   1ca68:	beq	1cb98 <argp_parse@@Base+0x3188>
   1ca6c:	ldr	r1, [sl, #20]
   1ca70:	b	1ca14 <argp_parse@@Base+0x3004>
   1ca74:	cmp	r9, #0
   1ca78:	beq	1cd58 <argp_parse@@Base+0x3348>
   1ca7c:	ldr	r6, [sp, #40]	; 0x28
   1ca80:	ldr	r3, [sp, #96]	; 0x60
   1ca84:	ldr	r0, [sp, #96]	; 0x60
   1ca88:	mov	r1, #0
   1ca8c:	ldr	r2, [r3]
   1ca90:	str	r1, [r0, #20]
   1ca94:	add	r3, r2, #1
   1ca98:	str	r3, [r0]
   1ca9c:	ldrb	r1, [r7]
   1caa0:	cmp	r1, #0
   1caa4:	bne	1cae4 <argp_parse@@Base+0x30d4>
   1caa8:	ldr	r1, [r9, #4]
   1caac:	cmp	r1, #1
   1cab0:	beq	1cdc8 <argp_parse@@Base+0x33b8>
   1cab4:	ldr	r3, [sp, #88]	; 0x58
   1cab8:	ldr	r2, [r9, #8]
   1cabc:	cmp	r3, #0
   1cac0:	strne	r6, [r3]
   1cac4:	cmp	r2, #0
   1cac8:	movne	r3, #0
   1cacc:	ldreq	r3, [r9, #12]
   1cad0:	ldrne	r1, [r9, #12]
   1cad4:	strne	r1, [r2]
   1cad8:	mov	r0, r3
   1cadc:	add	sp, sp, #52	; 0x34
   1cae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cae4:	ldr	r3, [r9, #4]
   1cae8:	cmp	r3, #0
   1caec:	movne	r3, r0
   1caf0:	addne	r7, r7, #1
   1caf4:	strne	r7, [r3, #12]
   1caf8:	bne	1cab4 <argp_parse@@Base+0x30a4>
   1cafc:	ldr	r3, [sp, #100]	; 0x64
   1cb00:	cmp	r3, #0
   1cb04:	bne	1cd20 <argp_parse@@Base+0x3310>
   1cb08:	ldr	r1, [sp, #96]	; 0x60
   1cb0c:	ldr	r2, [r9, #12]
   1cb10:	mov	r3, #63	; 0x3f
   1cb14:	str	r2, [r1, #8]
   1cb18:	mov	r0, r3
   1cb1c:	add	sp, sp, #52	; 0x34
   1cb20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb24:	cmp	r3, #0
   1cb28:	bne	1ccb8 <argp_parse@@Base+0x32a8>
   1cb2c:	mov	fp, r3
   1cb30:	ldr	r4, [sp, #12]
   1cb34:	mov	r9, fp
   1cb38:	mov	r0, sl
   1cb3c:	str	r3, [sp, #16]
   1cb40:	mvn	r3, #0
   1cb44:	str	r3, [sp, #40]	; 0x28
   1cb48:	mov	r2, r5
   1cb4c:	mov	r1, r8
   1cb50:	bl	11448 <strncmp@plt>
   1cb54:	cmp	r0, #0
   1cb58:	bne	1cb7c <argp_parse@@Base+0x316c>
   1cb5c:	cmp	r9, #0
   1cb60:	beq	1cf84 <argp_parse@@Base+0x3574>
   1cb64:	ldr	r2, [r9, #4]
   1cb68:	ldr	r3, [r4, #4]
   1cb6c:	cmp	r2, r3
   1cb70:	beq	1cfc0 <argp_parse@@Base+0x35b0>
   1cb74:	mov	r3, #1
   1cb78:	str	r3, [sp, #16]
   1cb7c:	ldr	r0, [r4, #16]!
   1cb80:	add	fp, fp, #1
   1cb84:	cmp	r0, #0
   1cb88:	bne	1cb48 <argp_parse@@Base+0x3138>
   1cb8c:	ldr	r3, [sp, #92]	; 0x5c
   1cb90:	str	r0, [sp, #36]	; 0x24
   1cb94:	str	r3, [sp, #44]	; 0x2c
   1cb98:	ldr	r2, [sp, #36]	; 0x24
   1cb9c:	ldr	r3, [sp, #16]
   1cba0:	cmp	r3, #0
   1cba4:	cmpeq	r2, #0
   1cba8:	beq	1ca74 <argp_parse@@Base+0x3064>
   1cbac:	ldr	r2, [sp, #100]	; 0x64
   1cbb0:	cmp	r2, #0
   1cbb4:	beq	1ce18 <argp_parse@@Base+0x3408>
   1cbb8:	cmp	r3, #0
   1cbbc:	bne	1cdf0 <argp_parse@@Base+0x33e0>
   1cbc0:	ldr	r5, [pc, #1108]	; 1d01c <argp_parse@@Base+0x360c>
   1cbc4:	ldr	r3, [sp, #36]	; 0x24
   1cbc8:	ldr	r7, [pc, #1104]	; 1d020 <argp_parse@@Base+0x3610>
   1cbcc:	ldr	r0, [r5]
   1cbd0:	add	r6, r3, r6
   1cbd4:	mov	r4, r3
   1cbd8:	bl	11400 <flockfile@plt>
   1cbdc:	ldr	r3, [sp, #24]
   1cbe0:	ldr	r0, [r5]
   1cbe4:	ldr	r1, [pc, #1080]	; 1d024 <argp_parse@@Base+0x3614>
   1cbe8:	ldr	r2, [r3]
   1cbec:	ldr	r3, [sp, #96]	; 0x60
   1cbf0:	ldr	r3, [r3, #20]
   1cbf4:	str	r3, [sp]
   1cbf8:	ldr	r3, [sp, #104]	; 0x68
   1cbfc:	bl	1131c <fprintf@plt>
   1cc00:	ldr	r8, [sp, #16]
   1cc04:	ldr	r9, [sp, #12]
   1cc08:	b	1cc18 <argp_parse@@Base+0x3208>
   1cc0c:	cmp	r4, r6
   1cc10:	add	r8, r8, #1
   1cc14:	beq	1cfa8 <argp_parse@@Base+0x3598>
   1cc18:	ldrb	r3, [r4], #1
   1cc1c:	cmp	r3, #0
   1cc20:	beq	1cc0c <argp_parse@@Base+0x31fc>
   1cc24:	ldr	r3, [r9, r8, lsl #4]
   1cc28:	ldr	r2, [sp, #104]	; 0x68
   1cc2c:	mov	r1, r7
   1cc30:	ldr	r0, [r5]
   1cc34:	bl	1131c <fprintf@plt>
   1cc38:	b	1cc0c <argp_parse@@Base+0x31fc>
   1cc3c:	mov	r9, r4
   1cc40:	str	r4, [sp, #16]
   1cc44:	str	r4, [sp, #44]	; 0x2c
   1cc48:	str	r4, [sp, #36]	; 0x24
   1cc4c:	mov	r1, r8
   1cc50:	mov	r0, sl
   1cc54:	mov	r8, r4
   1cc58:	ldr	sl, [sp, #20]
   1cc5c:	ldr	r4, [sp, #96]	; 0x60
   1cc60:	mov	fp, #1
   1cc64:	mvn	r3, #0
   1cc68:	str	r3, [sp, #40]	; 0x28
   1cc6c:	mov	r2, r5
   1cc70:	bl	11448 <strncmp@plt>
   1cc74:	cmp	r0, #0
   1cc78:	bne	1cca0 <argp_parse@@Base+0x3290>
   1cc7c:	cmp	r9, #0
   1cc80:	beq	1cf9c <argp_parse@@Base+0x358c>
   1cc84:	ldr	r3, [sp, #16]
   1cc88:	cmp	r3, #0
   1cc8c:	bne	1cca0 <argp_parse@@Base+0x3290>
   1cc90:	ldr	r3, [sp, #36]	; 0x24
   1cc94:	cmp	r3, #0
   1cc98:	beq	1cf0c <argp_parse@@Base+0x34fc>
   1cc9c:	strb	fp, [r3, r8]
   1cca0:	ldr	r0, [sl, #16]!
   1cca4:	add	r8, r8, #1
   1cca8:	cmp	r0, #0
   1ccac:	beq	1cb98 <argp_parse@@Base+0x3188>
   1ccb0:	ldr	r1, [r4, #20]
   1ccb4:	b	1cc6c <argp_parse@@Base+0x325c>
   1ccb8:	ldr	r3, [sp, #100]	; 0x64
   1ccbc:	mov	r0, sl
   1ccc0:	mov	r4, r3
   1ccc4:	ldr	sl, [sp, #20]
   1ccc8:	mov	r9, r4
   1cccc:	str	r3, [sp, #16]
   1ccd0:	mvn	r3, #0
   1ccd4:	str	r3, [sp, #40]	; 0x28
   1ccd8:	mov	r2, r5
   1ccdc:	mov	r1, r8
   1cce0:	bl	11448 <strncmp@plt>
   1cce4:	cmp	r0, #0
   1cce8:	bne	1cd00 <argp_parse@@Base+0x32f0>
   1ccec:	cmp	r9, #0
   1ccf0:	moveq	r9, sl
   1ccf4:	movne	r3, #1
   1ccf8:	strne	r3, [sp, #16]
   1ccfc:	streq	r4, [sp, #40]	; 0x28
   1cd00:	ldr	r0, [sl, #16]!
   1cd04:	add	r4, r4, #1
   1cd08:	cmp	r0, #0
   1cd0c:	bne	1ccd8 <argp_parse@@Base+0x32c8>
   1cd10:	ldr	r3, [sp, #100]	; 0x64
   1cd14:	str	r0, [sp, #36]	; 0x24
   1cd18:	str	r3, [sp, #44]	; 0x2c
   1cd1c:	b	1cb98 <argp_parse@@Base+0x3188>
   1cd20:	ldr	r3, [sp, #24]
   1cd24:	ldr	r1, [pc, #752]	; 1d01c <argp_parse@@Base+0x360c>
   1cd28:	ldr	r2, [r3]
   1cd2c:	ldr	r3, [r9]
   1cd30:	ldr	r0, [r1]
   1cd34:	str	r3, [sp]
   1cd38:	ldr	r1, [pc, #744]	; 1d028 <argp_parse@@Base+0x3618>
   1cd3c:	ldr	r3, [sp, #104]	; 0x68
   1cd40:	bl	1131c <fprintf@plt>
   1cd44:	ldr	r1, [sp, #96]	; 0x60
   1cd48:	ldr	r2, [r9, #12]
   1cd4c:	mov	r3, #63	; 0x3f
   1cd50:	str	r2, [r1, #8]
   1cd54:	b	1cb18 <argp_parse@@Base+0x3108>
   1cd58:	ldr	r3, [sp, #92]	; 0x5c
   1cd5c:	cmp	r3, #0
   1cd60:	bne	1cf44 <argp_parse@@Base+0x3534>
   1cd64:	ldr	r3, [sp, #100]	; 0x64
   1cd68:	cmp	r3, #0
   1cd6c:	beq	1cd98 <argp_parse@@Base+0x3388>
   1cd70:	ldr	r3, [sp, #24]
   1cd74:	ldr	r1, [pc, #672]	; 1d01c <argp_parse@@Base+0x360c>
   1cd78:	ldr	r2, [r3]
   1cd7c:	ldr	r3, [sp, #96]	; 0x60
   1cd80:	ldr	r0, [r1]
   1cd84:	ldr	r1, [pc, #672]	; 1d02c <argp_parse@@Base+0x361c>
   1cd88:	ldr	r3, [r3, #20]
   1cd8c:	str	r3, [sp]
   1cd90:	ldr	r3, [sp, #104]	; 0x68
   1cd94:	bl	1131c <fprintf@plt>
   1cd98:	ldr	r3, [sp, #96]	; 0x60
   1cd9c:	ldr	r1, [sp, #96]	; 0x60
   1cda0:	mov	r2, #0
   1cda4:	ldr	r3, [r3]
   1cda8:	str	r2, [r1, #20]
   1cdac:	add	r3, r3, #1
   1cdb0:	str	r3, [r1]
   1cdb4:	mov	r3, #63	; 0x3f
   1cdb8:	mov	r0, r3
   1cdbc:	str	r2, [r1, #8]
   1cdc0:	add	sp, sp, #52	; 0x34
   1cdc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdc8:	ldr	r1, [sp, #28]
   1cdcc:	cmp	r3, r1
   1cdd0:	bge	1ce70 <argp_parse@@Base+0x3460>
   1cdd4:	ldr	r1, [sp, #24]
   1cdd8:	add	r2, r2, #2
   1cddc:	ldr	r3, [r1, r3, lsl #2]
   1cde0:	ldr	r1, [sp, #96]	; 0x60
   1cde4:	str	r3, [r1, #12]
   1cde8:	str	r2, [r1]
   1cdec:	b	1cab4 <argp_parse@@Base+0x30a4>
   1cdf0:	ldr	r3, [sp, #24]
   1cdf4:	ldr	r1, [pc, #544]	; 1d01c <argp_parse@@Base+0x360c>
   1cdf8:	ldr	r2, [r3]
   1cdfc:	ldr	r3, [sp, #96]	; 0x60
   1ce00:	ldr	r0, [r1]
   1ce04:	ldr	r1, [pc, #548]	; 1d030 <argp_parse@@Base+0x3620>
   1ce08:	ldr	r3, [r3, #20]
   1ce0c:	str	r3, [sp]
   1ce10:	ldr	r3, [sp, #104]	; 0x68
   1ce14:	bl	1131c <fprintf@plt>
   1ce18:	ldr	r3, [sp, #44]	; 0x2c
   1ce1c:	cmp	r3, #0
   1ce20:	beq	1ce2c <argp_parse@@Base+0x341c>
   1ce24:	ldr	r0, [sp, #36]	; 0x24
   1ce28:	bl	1a98c <argp_parse@@Base+0xf7c>
   1ce2c:	ldr	r3, [sp, #96]	; 0x60
   1ce30:	ldr	r4, [r3, #20]
   1ce34:	mov	r0, r4
   1ce38:	bl	11304 <strlen@plt>
   1ce3c:	ldr	r3, [sp, #96]	; 0x60
   1ce40:	ldr	r1, [sp, #96]	; 0x60
   1ce44:	mov	r2, #0
   1ce48:	ldr	r3, [r3]
   1ce4c:	str	r2, [r1, #8]
   1ce50:	add	r3, r3, #1
   1ce54:	str	r3, [r1]
   1ce58:	mov	r3, #63	; 0x3f
   1ce5c:	add	r0, r4, r0
   1ce60:	str	r0, [r1, #20]
   1ce64:	mov	r0, r3
   1ce68:	add	sp, sp, #52	; 0x34
   1ce6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce70:	ldr	r3, [sp, #100]	; 0x64
   1ce74:	cmp	r3, #0
   1ce78:	bne	1cea0 <argp_parse@@Base+0x3490>
   1ce7c:	ldr	r2, [sp, #96]	; 0x60
   1ce80:	ldr	r3, [r9, #12]
   1ce84:	str	r3, [r2, #8]
   1ce88:	ldr	r3, [sp, #32]
   1ce8c:	ldrb	r3, [r3]
   1ce90:	cmp	r3, #58	; 0x3a
   1ce94:	movne	r3, #63	; 0x3f
   1ce98:	moveq	r3, #58	; 0x3a
   1ce9c:	b	1cad8 <argp_parse@@Base+0x30c8>
   1cea0:	ldr	r3, [sp, #24]
   1cea4:	ldr	r1, [pc, #368]	; 1d01c <argp_parse@@Base+0x360c>
   1cea8:	ldr	r2, [r3]
   1ceac:	ldr	r3, [r9]
   1ceb0:	ldr	r0, [r1]
   1ceb4:	str	r3, [sp]
   1ceb8:	ldr	r1, [pc, #372]	; 1d034 <argp_parse@@Base+0x3624>
   1cebc:	ldr	r3, [sp, #104]	; 0x68
   1cec0:	bl	1131c <fprintf@plt>
   1cec4:	b	1ce7c <argp_parse@@Base+0x346c>
   1cec8:	mov	r0, r6
   1cecc:	bl	1bf70 <argp_parse@@Base+0x2560>
   1ced0:	subs	r3, r0, #0
   1ced4:	mov	r8, r3
   1ced8:	str	r3, [sp, #36]	; 0x24
   1cedc:	mov	r3, #1
   1cee0:	streq	r3, [sp, #16]
   1cee4:	beq	1ca5c <argp_parse@@Base+0x304c>
   1cee8:	mov	r2, r6
   1ceec:	mov	r1, #0
   1cef0:	str	r3, [sp, #44]	; 0x2c
   1cef4:	bl	11358 <memset@plt>
   1cef8:	ldr	r2, [sp, #40]	; 0x28
   1cefc:	mov	r1, #1
   1cf00:	ldr	r3, [sp, #36]	; 0x24
   1cf04:	strb	r1, [r8, r2]
   1cf08:	b	1ca54 <argp_parse@@Base+0x3044>
   1cf0c:	mov	r0, r6
   1cf10:	bl	1bf70 <argp_parse@@Base+0x2560>
   1cf14:	subs	r3, r0, #0
   1cf18:	str	r3, [sp, #36]	; 0x24
   1cf1c:	beq	1d010 <argp_parse@@Base+0x3600>
   1cf20:	mov	r2, r6
   1cf24:	mov	r1, #0
   1cf28:	bl	11358 <memset@plt>
   1cf2c:	mov	r2, #1
   1cf30:	str	r2, [sp, #44]	; 0x2c
   1cf34:	ldr	r3, [sp, #36]	; 0x24
   1cf38:	ldr	r2, [sp, #40]	; 0x28
   1cf3c:	strb	fp, [r3, r2]
   1cf40:	b	1cc9c <argp_parse@@Base+0x328c>
   1cf44:	ldr	r3, [sp, #96]	; 0x60
   1cf48:	ldr	r2, [sp, #24]
   1cf4c:	ldr	r3, [r3]
   1cf50:	ldr	r3, [r2, r3, lsl #2]
   1cf54:	ldrb	r3, [r3, #1]
   1cf58:	cmp	r3, #45	; 0x2d
   1cf5c:	beq	1cd64 <argp_parse@@Base+0x3354>
   1cf60:	ldr	r3, [sp, #96]	; 0x60
   1cf64:	ldr	r0, [sp, #32]
   1cf68:	ldr	r3, [r3, #20]
   1cf6c:	ldrb	r1, [r3]
   1cf70:	bl	11310 <strchr@plt>
   1cf74:	cmp	r0, #0
   1cf78:	beq	1cd64 <argp_parse@@Base+0x3354>
   1cf7c:	mvn	r3, #0
   1cf80:	b	1cad8 <argp_parse@@Base+0x30c8>
   1cf84:	str	fp, [sp, #40]	; 0x28
   1cf88:	mov	r9, r4
   1cf8c:	b	1cb7c <argp_parse@@Base+0x316c>
   1cf90:	str	fp, [sp, #40]	; 0x28
   1cf94:	mov	r9, r4
   1cf98:	b	1ca5c <argp_parse@@Base+0x304c>
   1cf9c:	str	r8, [sp, #40]	; 0x28
   1cfa0:	mov	r9, sl
   1cfa4:	b	1cca0 <argp_parse@@Base+0x3290>
   1cfa8:	ldr	r1, [r5]
   1cfac:	mov	r0, #10
   1cfb0:	bl	113d0 <fputc@plt>
   1cfb4:	ldr	r0, [r5]
   1cfb8:	bl	11244 <funlockfile@plt>
   1cfbc:	b	1ce18 <argp_parse@@Base+0x3408>
   1cfc0:	ldr	r2, [r9, #8]
   1cfc4:	ldr	r3, [r4, #8]
   1cfc8:	cmp	r2, r3
   1cfcc:	bne	1cb74 <argp_parse@@Base+0x3164>
   1cfd0:	ldr	r2, [r9, #12]
   1cfd4:	ldr	r3, [r4, #12]
   1cfd8:	ldr	r1, [sp, #16]
   1cfdc:	cmp	r2, r3
   1cfe0:	movne	r1, #1
   1cfe4:	str	r1, [sp, #16]
   1cfe8:	b	1cb7c <argp_parse@@Base+0x316c>
   1cfec:	ldr	r2, [r9, #8]
   1cff0:	ldr	r3, [r4, #8]
   1cff4:	cmp	r2, r3
   1cff8:	bne	1ca3c <argp_parse@@Base+0x302c>
   1cffc:	ldr	r2, [r9, #12]
   1d000:	ldr	r3, [r4, #12]
   1d004:	cmp	r2, r3
   1d008:	bne	1ca3c <argp_parse@@Base+0x302c>
   1d00c:	b	1ca5c <argp_parse@@Base+0x304c>
   1d010:	mov	r3, #1
   1d014:	str	r3, [sp, #16]
   1d018:	b	1cca0 <argp_parse@@Base+0x3290>
   1d01c:	andeq	r1, r3, r8, lsr #12
   1d020:	andeq	pc, r1, ip, ror #28
   1d024:	andeq	pc, r1, ip, lsr lr	; <UNPREDICTABLE>
   1d028:	muleq	r1, r4, lr
   1d02c:	andeq	pc, r1, r4, ror lr	; <UNPREDICTABLE>
   1d030:	andeq	pc, r1, ip, lsl lr	; <UNPREDICTABLE>
   1d034:	andeq	pc, r1, r4, asr #29
   1d038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d03c:	sub	sp, sp, #36	; 0x24
   1d040:	subs	r6, r0, #0
   1d044:	ldr	r4, [sp, #80]	; 0x50
   1d048:	ldr	r8, [r4, #4]
   1d04c:	ble	1d220 <argp_parse@@Base+0x3810>
   1d050:	mov	sl, r3
   1d054:	ldr	r3, [r4]
   1d058:	mov	r7, r2
   1d05c:	mov	r2, #0
   1d060:	cmp	r3, r2
   1d064:	mov	r9, r1
   1d068:	str	r2, [r4, #12]
   1d06c:	beq	1d2a8 <argp_parse@@Base+0x3898>
   1d070:	ldr	r2, [r4, #16]
   1d074:	cmp	r2, #0
   1d078:	bne	1d22c <argp_parse@@Base+0x381c>
   1d07c:	mov	r5, #0
   1d080:	str	r3, [r4, #32]
   1d084:	str	r3, [r4, #28]
   1d088:	str	r5, [r4, #20]
   1d08c:	ldrb	r3, [r7]
   1d090:	cmp	r3, #45	; 0x2d
   1d094:	moveq	r3, #2
   1d098:	addeq	r7, r7, #1
   1d09c:	streq	r3, [r4, #24]
   1d0a0:	beq	1d0c8 <argp_parse@@Base+0x36b8>
   1d0a4:	cmp	r3, #43	; 0x2b
   1d0a8:	streq	r5, [r4, #24]
   1d0ac:	addeq	r7, r7, #1
   1d0b0:	beq	1d0c8 <argp_parse@@Base+0x36b8>
   1d0b4:	ldr	r3, [sp, #84]	; 0x54
   1d0b8:	cmp	r3, #0
   1d0bc:	beq	1d338 <argp_parse@@Base+0x3928>
   1d0c0:	mov	r3, #0
   1d0c4:	str	r3, [r4, #24]
   1d0c8:	mov	r3, #1
   1d0cc:	str	r3, [r4, #16]
   1d0d0:	ldrb	r3, [r7]
   1d0d4:	cmp	r3, #58	; 0x3a
   1d0d8:	moveq	r8, #0
   1d0dc:	cmp	r5, #0
   1d0e0:	beq	1d188 <argp_parse@@Base+0x3778>
   1d0e4:	ldrb	r3, [r5]
   1d0e8:	cmp	r3, #0
   1d0ec:	beq	1d188 <argp_parse@@Base+0x3778>
   1d0f0:	add	r3, r5, #1
   1d0f4:	str	r3, [r4, #20]
   1d0f8:	ldrb	fp, [r5]
   1d0fc:	mov	r0, r7
   1d100:	str	r3, [sp, #28]
   1d104:	mov	r1, fp
   1d108:	bl	11310 <strchr@plt>
   1d10c:	ldrb	r1, [r5, #1]
   1d110:	ldr	r3, [sp, #28]
   1d114:	cmp	r1, #0
   1d118:	ldreq	r1, [r4]
   1d11c:	addeq	r1, r1, #1
   1d120:	streq	r1, [r4]
   1d124:	sub	r1, fp, #58	; 0x3a
   1d128:	mov	r2, r0
   1d12c:	cmp	r2, #0
   1d130:	cmpne	r1, #1
   1d134:	mov	r0, fp
   1d138:	bls	1d278 <argp_parse@@Base+0x3868>
   1d13c:	ldrb	r1, [r2]
   1d140:	cmp	r1, #87	; 0x57
   1d144:	ldrb	r1, [r2, #1]
   1d148:	beq	1d3c4 <argp_parse@@Base+0x39b4>
   1d14c:	cmp	r1, #58	; 0x3a
   1d150:	bne	1d270 <argp_parse@@Base+0x3860>
   1d154:	ldrb	r2, [r2, #2]
   1d158:	cmp	r2, #58	; 0x3a
   1d15c:	ldrb	r2, [r5, #1]
   1d160:	beq	1d4bc <argp_parse@@Base+0x3aac>
   1d164:	cmp	r2, #0
   1d168:	beq	1d49c <argp_parse@@Base+0x3a8c>
   1d16c:	ldr	r2, [r4]
   1d170:	str	r3, [r4, #12]
   1d174:	add	r3, r2, #1
   1d178:	str	r3, [r4]
   1d17c:	mov	r3, #0
   1d180:	str	r3, [r4, #20]
   1d184:	b	1d270 <argp_parse@@Base+0x3860>
   1d188:	ldr	fp, [r4]
   1d18c:	ldr	r3, [r4, #32]
   1d190:	ldr	r2, [r4, #28]
   1d194:	cmp	r3, fp
   1d198:	ldr	r3, [r4, #24]
   1d19c:	strgt	fp, [r4, #32]
   1d1a0:	cmp	fp, r2
   1d1a4:	movlt	r2, fp
   1d1a8:	strlt	fp, [r4, #28]
   1d1ac:	cmp	r3, #1
   1d1b0:	beq	1d2b8 <argp_parse@@Base+0x38a8>
   1d1b4:	cmp	r6, fp
   1d1b8:	beq	1d320 <argp_parse@@Base+0x3910>
   1d1bc:	ldr	r3, [pc, #972]	; 1d590 <argp_parse@@Base+0x3b80>
   1d1c0:	ldr	r5, [r9, fp, lsl #2]
   1d1c4:	mov	r1, r3
   1d1c8:	mov	r0, r5
   1d1cc:	str	r3, [sp, #28]
   1d1d0:	bl	11124 <strcmp@plt>
   1d1d4:	ldr	r3, [sp, #28]
   1d1d8:	cmp	r0, #0
   1d1dc:	bne	1d248 <argp_parse@@Base+0x3838>
   1d1e0:	ldr	r3, [r4, #28]
   1d1e4:	ldr	r2, [r4, #32]
   1d1e8:	add	fp, fp, #1
   1d1ec:	cmp	r3, r2
   1d1f0:	str	fp, [r4]
   1d1f4:	beq	1d3b8 <argp_parse@@Base+0x39a8>
   1d1f8:	cmp	fp, r2
   1d1fc:	beq	1d210 <argp_parse@@Base+0x3800>
   1d200:	mov	r0, r9
   1d204:	mov	r1, r4
   1d208:	bl	1c868 <argp_parse@@Base+0x2e58>
   1d20c:	ldr	r3, [r4, #28]
   1d210:	cmp	r6, r3
   1d214:	str	r6, [r4]
   1d218:	str	r6, [r4, #32]
   1d21c:	strne	r3, [r4]
   1d220:	mvn	r0, #0
   1d224:	add	sp, sp, #36	; 0x24
   1d228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d22c:	ldrb	r3, [r7]
   1d230:	ldr	r5, [r4, #20]
   1d234:	sub	r2, r3, #43	; 0x2b
   1d238:	tst	r2, #253	; 0xfd
   1d23c:	ldrbeq	r3, [r7, #1]
   1d240:	addeq	r7, r7, #1
   1d244:	b	1d0d4 <argp_parse@@Base+0x36c4>
   1d248:	ldrb	r2, [r5]
   1d24c:	cmp	r2, #45	; 0x2d
   1d250:	beq	1d36c <argp_parse@@Base+0x395c>
   1d254:	ldr	r3, [r4, #24]
   1d258:	cmp	r3, #0
   1d25c:	beq	1d220 <argp_parse@@Base+0x3810>
   1d260:	mov	r0, #1
   1d264:	add	fp, fp, #1
   1d268:	str	fp, [r4]
   1d26c:	str	r5, [r4, #12]
   1d270:	add	sp, sp, #36	; 0x24
   1d274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d278:	cmp	r8, #0
   1d27c:	beq	1d298 <argp_parse@@Base+0x3888>
   1d280:	ldr	r1, [pc, #780]	; 1d594 <argp_parse@@Base+0x3b84>
   1d284:	ldr	r2, [r9]
   1d288:	mov	r3, fp
   1d28c:	ldr	r0, [r1]
   1d290:	ldr	r1, [pc, #768]	; 1d598 <argp_parse@@Base+0x3b88>
   1d294:	bl	1131c <fprintf@plt>
   1d298:	mov	r0, #63	; 0x3f
   1d29c:	str	fp, [r4, #8]
   1d2a0:	add	sp, sp, #36	; 0x24
   1d2a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2a8:	mov	r2, #1
   1d2ac:	mov	r3, r2
   1d2b0:	str	r2, [r4]
   1d2b4:	b	1d07c <argp_parse@@Base+0x366c>
   1d2b8:	ldr	r3, [r4, #32]
   1d2bc:	cmp	r3, r2
   1d2c0:	beq	1d438 <argp_parse@@Base+0x3a28>
   1d2c4:	cmp	fp, r3
   1d2c8:	beq	1d2dc <argp_parse@@Base+0x38cc>
   1d2cc:	mov	r1, r4
   1d2d0:	mov	r0, r9
   1d2d4:	bl	1c868 <argp_parse@@Base+0x2e58>
   1d2d8:	ldr	r3, [r4]
   1d2dc:	cmp	r6, r3
   1d2e0:	addgt	r1, r9, r3, lsl #2
   1d2e4:	bgt	1d2fc <argp_parse@@Base+0x38ec>
   1d2e8:	b	1d318 <argp_parse@@Base+0x3908>
   1d2ec:	add	r3, r3, #1
   1d2f0:	cmp	r6, r3
   1d2f4:	str	r3, [r4]
   1d2f8:	beq	1d358 <argp_parse@@Base+0x3948>
   1d2fc:	ldr	r2, [r1], #4
   1d300:	ldrb	r0, [r2]
   1d304:	cmp	r0, #45	; 0x2d
   1d308:	bne	1d2ec <argp_parse@@Base+0x38dc>
   1d30c:	ldrb	r2, [r2, #1]
   1d310:	cmp	r2, #0
   1d314:	beq	1d2ec <argp_parse@@Base+0x38dc>
   1d318:	mov	fp, r3
   1d31c:	b	1d35c <argp_parse@@Base+0x394c>
   1d320:	ldr	r3, [r4, #28]
   1d324:	ldr	r6, [r4, #32]
   1d328:	mvn	r0, #0
   1d32c:	cmp	r6, r3
   1d330:	strne	r3, [r4]
   1d334:	b	1d224 <argp_parse@@Base+0x3814>
   1d338:	ldr	r0, [pc, #604]	; 1d59c <argp_parse@@Base+0x3b8c>
   1d33c:	bl	11274 <getenv@plt>
   1d340:	ldr	r5, [r4, #20]
   1d344:	cmp	r0, #0
   1d348:	bne	1d0c0 <argp_parse@@Base+0x36b0>
   1d34c:	mov	r3, #1
   1d350:	str	r3, [r4, #24]
   1d354:	b	1d0c8 <argp_parse@@Base+0x36b8>
   1d358:	mov	fp, r6
   1d35c:	cmp	r6, fp
   1d360:	str	fp, [r4, #32]
   1d364:	bne	1d1bc <argp_parse@@Base+0x37ac>
   1d368:	b	1d320 <argp_parse@@Base+0x3910>
   1d36c:	ldrb	r1, [r5, #1]
   1d370:	cmp	r1, #0
   1d374:	beq	1d254 <argp_parse@@Base+0x3844>
   1d378:	cmp	sl, #0
   1d37c:	beq	1d3b0 <argp_parse@@Base+0x39a0>
   1d380:	cmp	r1, #45	; 0x2d
   1d384:	beq	1d4e0 <argp_parse@@Base+0x3ad0>
   1d388:	ldr	r3, [sp, #76]	; 0x4c
   1d38c:	cmp	r3, #0
   1d390:	beq	1d3b0 <argp_parse@@Base+0x39a0>
   1d394:	ldrb	r3, [r5, #2]
   1d398:	cmp	r3, #0
   1d39c:	bne	1d44c <argp_parse@@Base+0x3a3c>
   1d3a0:	mov	r0, r7
   1d3a4:	bl	11310 <strchr@plt>
   1d3a8:	cmp	r0, #0
   1d3ac:	beq	1d44c <argp_parse@@Base+0x3a3c>
   1d3b0:	add	r5, r5, #1
   1d3b4:	b	1d0f0 <argp_parse@@Base+0x36e0>
   1d3b8:	mov	r3, fp
   1d3bc:	str	fp, [r4, #28]
   1d3c0:	b	1d210 <argp_parse@@Base+0x3800>
   1d3c4:	adds	ip, sl, #0
   1d3c8:	movne	ip, #1
   1d3cc:	cmp	r1, #59	; 0x3b
   1d3d0:	movne	ip, #0
   1d3d4:	cmp	ip, #0
   1d3d8:	beq	1d14c <argp_parse@@Base+0x373c>
   1d3dc:	ldrb	r2, [r5, #1]
   1d3e0:	cmp	r2, #0
   1d3e4:	bne	1d3f8 <argp_parse@@Base+0x39e8>
   1d3e8:	ldr	r3, [r4]
   1d3ec:	cmp	r6, r3
   1d3f0:	ldrne	r3, [r9, r3, lsl #2]
   1d3f4:	beq	1d53c <argp_parse@@Base+0x3b2c>
   1d3f8:	str	r3, [r4, #20]
   1d3fc:	ldr	lr, [pc, #412]	; 1d5a0 <argp_parse@@Base+0x3b90>
   1d400:	ldr	r3, [sp, #72]	; 0x48
   1d404:	mov	ip, #0
   1d408:	str	r3, [sp]
   1d40c:	str	r8, [sp, #12]
   1d410:	str	r4, [sp, #8]
   1d414:	str	lr, [sp, #16]
   1d418:	mov	r3, sl
   1d41c:	str	ip, [r4, #12]
   1d420:	mov	r2, r7
   1d424:	mov	r1, r9
   1d428:	mov	r0, r6
   1d42c:	str	ip, [sp, #4]
   1d430:	bl	1c924 <argp_parse@@Base+0x2f14>
   1d434:	b	1d270 <argp_parse@@Base+0x3860>
   1d438:	cmp	fp, r2
   1d43c:	strne	fp, [r4, #28]
   1d440:	movne	r3, fp
   1d444:	moveq	r3, r2
   1d448:	b	1d2dc <argp_parse@@Base+0x38cc>
   1d44c:	ldr	r2, [sp, #76]	; 0x4c
   1d450:	add	r5, r5, #1
   1d454:	str	r5, [r4, #20]
   1d458:	ldr	r3, [pc, #324]	; 1d5a4 <argp_parse@@Base+0x3b94>
   1d45c:	str	r2, [sp, #4]
   1d460:	ldr	r2, [sp, #72]	; 0x48
   1d464:	str	r3, [sp, #16]
   1d468:	str	r2, [sp]
   1d46c:	str	r8, [sp, #12]
   1d470:	str	r4, [sp, #8]
   1d474:	mov	r3, sl
   1d478:	mov	r2, r7
   1d47c:	mov	r1, r9
   1d480:	mov	r0, r6
   1d484:	bl	1c924 <argp_parse@@Base+0x2f14>
   1d488:	cmn	r0, #1
   1d48c:	bne	1d270 <argp_parse@@Base+0x3860>
   1d490:	ldr	r3, [r4]
   1d494:	ldr	r5, [r9, r3, lsl #2]
   1d498:	b	1d3b0 <argp_parse@@Base+0x39a0>
   1d49c:	ldr	r3, [r4]
   1d4a0:	cmp	r6, r3
   1d4a4:	beq	1d51c <argp_parse@@Base+0x3b0c>
   1d4a8:	ldr	r2, [r9, r3, lsl #2]
   1d4ac:	add	r3, r3, #1
   1d4b0:	str	r2, [r4, #12]
   1d4b4:	str	r3, [r4]
   1d4b8:	b	1d17c <argp_parse@@Base+0x376c>
   1d4bc:	cmp	r2, #0
   1d4c0:	moveq	r3, r2
   1d4c4:	ldrne	r2, [r4]
   1d4c8:	str	r3, [r4, #12]
   1d4cc:	addne	r2, r2, #1
   1d4d0:	strne	r2, [r4]
   1d4d4:	mov	r2, #0
   1d4d8:	str	r2, [r4, #20]
   1d4dc:	b	1d270 <argp_parse@@Base+0x3860>
   1d4e0:	add	r5, r5, #2
   1d4e4:	str	r5, [r4, #20]
   1d4e8:	str	r3, [sp, #16]
   1d4ec:	ldr	r3, [sp, #76]	; 0x4c
   1d4f0:	str	r8, [sp, #12]
   1d4f4:	str	r3, [sp, #4]
   1d4f8:	ldr	r3, [sp, #72]	; 0x48
   1d4fc:	str	r4, [sp, #8]
   1d500:	str	r3, [sp]
   1d504:	mov	r2, r7
   1d508:	mov	r3, sl
   1d50c:	mov	r1, r9
   1d510:	mov	r0, r6
   1d514:	bl	1c924 <argp_parse@@Base+0x2f14>
   1d518:	b	1d270 <argp_parse@@Base+0x3860>
   1d51c:	cmp	r8, #0
   1d520:	bne	1d574 <argp_parse@@Base+0x3b64>
   1d524:	str	fp, [r4, #8]
   1d528:	ldrb	r0, [r7]
   1d52c:	cmp	r0, #58	; 0x3a
   1d530:	movne	r0, #63	; 0x3f
   1d534:	moveq	r0, #58	; 0x3a
   1d538:	b	1d17c <argp_parse@@Base+0x376c>
   1d53c:	cmp	r8, #0
   1d540:	beq	1d55c <argp_parse@@Base+0x3b4c>
   1d544:	ldr	r1, [pc, #72]	; 1d594 <argp_parse@@Base+0x3b84>
   1d548:	ldr	r2, [r9]
   1d54c:	mov	r3, fp
   1d550:	ldr	r0, [r1]
   1d554:	ldr	r1, [pc, #76]	; 1d5a8 <argp_parse@@Base+0x3b98>
   1d558:	bl	1131c <fprintf@plt>
   1d55c:	str	fp, [r4, #8]
   1d560:	ldrb	r0, [r7]
   1d564:	cmp	r0, #58	; 0x3a
   1d568:	movne	r0, #63	; 0x3f
   1d56c:	moveq	r0, #58	; 0x3a
   1d570:	b	1d270 <argp_parse@@Base+0x3860>
   1d574:	ldr	r1, [pc, #24]	; 1d594 <argp_parse@@Base+0x3b84>
   1d578:	ldr	r2, [r9]
   1d57c:	mov	r3, fp
   1d580:	ldr	r0, [r1]
   1d584:	ldr	r1, [pc, #28]	; 1d5a8 <argp_parse@@Base+0x3b98>
   1d588:	bl	1131c <fprintf@plt>
   1d58c:	b	1d524 <argp_parse@@Base+0x3b14>
   1d590:	andeq	pc, r1, r0, ror r9	; <UNPREDICTABLE>
   1d594:	andeq	r1, r3, r8, lsr #12
   1d598:	andeq	pc, r1, r0, lsl #30
   1d59c:	andeq	pc, r1, ip, ror #29
   1d5a0:	andeq	pc, r1, r8, asr #30
   1d5a4:	strdeq	pc, [r1], -ip
   1d5a8:	andeq	pc, r1, ip, lsl pc	; <UNPREDICTABLE>
   1d5ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5b0:	sub	sp, sp, #44	; 0x2c
   1d5b4:	ldr	r7, [pc, #1572]	; 1dbe0 <argp_parse@@Base+0x41d0>
   1d5b8:	ldr	r4, [pc, #1572]	; 1dbe4 <argp_parse@@Base+0x41d4>
   1d5bc:	subs	r6, r0, #0
   1d5c0:	ldm	r7, {r5, sl}
   1d5c4:	str	r1, [sp, #32]
   1d5c8:	str	r3, [sp, #36]	; 0x24
   1d5cc:	stm	r4, {r5, sl}
   1d5d0:	ble	1d77c <argp_parse@@Base+0x3d6c>
   1d5d4:	mov	r3, #0
   1d5d8:	cmp	r5, #0
   1d5dc:	mov	fp, r2
   1d5e0:	str	r3, [r4, #12]
   1d5e4:	beq	1d838 <argp_parse@@Base+0x3e28>
   1d5e8:	ldr	r3, [r4, #16]
   1d5ec:	cmp	r3, #0
   1d5f0:	bne	1d794 <argp_parse@@Base+0x3d84>
   1d5f4:	mov	r3, #0
   1d5f8:	str	r5, [r4, #32]
   1d5fc:	str	r5, [r4, #28]
   1d600:	str	r3, [r4, #20]
   1d604:	ldrb	r2, [fp]
   1d608:	cmp	r2, #45	; 0x2d
   1d60c:	beq	1d8e8 <argp_parse@@Base+0x3ed8>
   1d610:	cmp	r2, #43	; 0x2b
   1d614:	streq	r3, [r4, #24]
   1d618:	addeq	fp, fp, #1
   1d61c:	moveq	r5, r3
   1d620:	beq	1d63c <argp_parse@@Base+0x3c2c>
   1d624:	ldr	r2, [sp, #88]	; 0x58
   1d628:	cmp	r2, #0
   1d62c:	movne	r5, r3
   1d630:	beq	1d8c8 <argp_parse@@Base+0x3eb8>
   1d634:	mov	r3, #0
   1d638:	str	r3, [r4, #24]
   1d63c:	mov	r3, #1
   1d640:	str	r3, [r4, #16]
   1d644:	ldrb	r3, [fp]
   1d648:	cmp	r3, #58	; 0x3a
   1d64c:	moveq	sl, #0
   1d650:	cmp	r5, #0
   1d654:	beq	1d6d8 <argp_parse@@Base+0x3cc8>
   1d658:	ldrb	r3, [r5]
   1d65c:	cmp	r3, #0
   1d660:	beq	1d6d8 <argp_parse@@Base+0x3cc8>
   1d664:	add	r9, r5, #1
   1d668:	str	r9, [r4, #20]
   1d66c:	ldrb	r8, [r5]
   1d670:	mov	r0, fp
   1d674:	mov	r1, r8
   1d678:	bl	11310 <strchr@plt>
   1d67c:	ldrb	r3, [r5, #1]
   1d680:	str	r8, [sp, #28]
   1d684:	cmp	r3, #0
   1d688:	ldreq	r3, [r4]
   1d68c:	addeq	r3, r3, #1
   1d690:	streq	r3, [r4]
   1d694:	sub	r3, r8, #58	; 0x3a
   1d698:	cmp	r0, #0
   1d69c:	cmpne	r3, #1
   1d6a0:	bls	1d7fc <argp_parse@@Base+0x3dec>
   1d6a4:	ldrb	r3, [r0]
   1d6a8:	cmp	r3, #87	; 0x57
   1d6ac:	ldrb	r3, [r0, #1]
   1d6b0:	beq	1d970 <argp_parse@@Base+0x3f60>
   1d6b4:	cmp	r3, #58	; 0x3a
   1d6b8:	beq	1da14 <argp_parse@@Base+0x4004>
   1d6bc:	ldr	r3, [r4, #8]
   1d6c0:	mov	r0, r8
   1d6c4:	ldr	r9, [r4, #12]
   1d6c8:	ldr	r5, [r4]
   1d6cc:	str	r3, [sp, #28]
   1d6d0:	mov	r2, r3
   1d6d4:	b	1d7e4 <argp_parse@@Base+0x3dd4>
   1d6d8:	ldr	r5, [r4]
   1d6dc:	ldr	r8, [r4, #32]
   1d6e0:	ldr	r3, [r4, #28]
   1d6e4:	cmp	r8, r5
   1d6e8:	ldr	r2, [r4, #24]
   1d6ec:	movgt	r8, r5
   1d6f0:	strgt	r5, [r4, #32]
   1d6f4:	cmp	r5, r3
   1d6f8:	movlt	r3, r5
   1d6fc:	strlt	r5, [r4, #28]
   1d700:	cmp	r2, #1
   1d704:	beq	1d848 <argp_parse@@Base+0x3e38>
   1d708:	cmp	r6, r5
   1d70c:	beq	1d8b0 <argp_parse@@Base+0x3ea0>
   1d710:	ldr	r3, [sp, #32]
   1d714:	ldr	r9, [r3, r5, lsl #2]
   1d718:	ldr	r3, [pc, #1224]	; 1dbe8 <argp_parse@@Base+0x41d8>
   1d71c:	mov	r0, r9
   1d720:	mov	r1, r3
   1d724:	str	r3, [sp, #28]
   1d728:	bl	11124 <strcmp@plt>
   1d72c:	ldr	r3, [sp, #28]
   1d730:	cmp	r0, #0
   1d734:	bne	1d7b0 <argp_parse@@Base+0x3da0>
   1d738:	add	r3, r5, #1
   1d73c:	ldr	r5, [r4, #28]
   1d740:	str	r3, [r4]
   1d744:	cmp	r5, r8
   1d748:	beq	1d964 <argp_parse@@Base+0x3f54>
   1d74c:	cmp	r3, r8
   1d750:	beq	1d764 <argp_parse@@Base+0x3d54>
   1d754:	ldr	r0, [sp, #32]
   1d758:	ldr	r1, [pc, #1156]	; 1dbe4 <argp_parse@@Base+0x41d4>
   1d75c:	bl	1c868 <argp_parse@@Base+0x2e58>
   1d760:	ldr	r5, [r4, #28]
   1d764:	mov	r8, r6
   1d768:	cmp	r8, r5
   1d76c:	str	r6, [r4, #32]
   1d770:	str	r6, [r4]
   1d774:	moveq	r5, r6
   1d778:	bne	1d8c0 <argp_parse@@Base+0x3eb0>
   1d77c:	ldr	r3, [r4, #8]
   1d780:	ldr	r9, [r4, #12]
   1d784:	str	r3, [sp, #28]
   1d788:	mvn	r0, #0
   1d78c:	mov	r2, r3
   1d790:	b	1d7e4 <argp_parse@@Base+0x3dd4>
   1d794:	ldrb	r3, [r2]
   1d798:	ldr	r5, [r4, #20]
   1d79c:	sub	r2, r3, #43	; 0x2b
   1d7a0:	tst	r2, #253	; 0xfd
   1d7a4:	ldrbeq	r3, [fp, #1]
   1d7a8:	addeq	fp, fp, #1
   1d7ac:	b	1d648 <argp_parse@@Base+0x3c38>
   1d7b0:	ldrb	r2, [r9]
   1d7b4:	cmp	r2, #45	; 0x2d
   1d7b8:	beq	1d914 <argp_parse@@Base+0x3f04>
   1d7bc:	ldr	r3, [r4, #24]
   1d7c0:	cmp	r3, #0
   1d7c4:	beq	1d77c <argp_parse@@Base+0x3d6c>
   1d7c8:	ldr	r3, [r4, #8]
   1d7cc:	mov	r0, #1
   1d7d0:	mov	r2, r3
   1d7d4:	add	r5, r5, #1
   1d7d8:	str	r5, [r4]
   1d7dc:	str	r9, [r4, #12]
   1d7e0:	str	r3, [sp, #28]
   1d7e4:	ldr	r3, [pc, #1024]	; 1dbec <argp_parse@@Base+0x41dc>
   1d7e8:	str	r5, [r7]
   1d7ec:	str	r2, [r7, #8]
   1d7f0:	str	r9, [r3]
   1d7f4:	add	sp, sp, #44	; 0x2c
   1d7f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7fc:	cmp	sl, #0
   1d800:	beq	1d820 <argp_parse@@Base+0x3e10>
   1d804:	ldr	r1, [pc, #996]	; 1dbf0 <argp_parse@@Base+0x41e0>
   1d808:	ldr	r3, [sp, #32]
   1d80c:	ldr	r0, [r1]
   1d810:	ldr	r2, [r3]
   1d814:	ldr	r1, [pc, #984]	; 1dbf4 <argp_parse@@Base+0x41e4>
   1d818:	mov	r3, r8
   1d81c:	bl	1131c <fprintf@plt>
   1d820:	str	r8, [r4, #8]
   1d824:	ldr	r5, [r4]
   1d828:	ldr	r9, [r4, #12]
   1d82c:	mov	r0, #63	; 0x3f
   1d830:	ldr	r2, [sp, #28]
   1d834:	b	1d7e4 <argp_parse@@Base+0x3dd4>
   1d838:	mov	r3, #1
   1d83c:	mov	r5, r3
   1d840:	str	r3, [r4]
   1d844:	b	1d5f4 <argp_parse@@Base+0x3be4>
   1d848:	cmp	r8, r3
   1d84c:	beq	1da04 <argp_parse@@Base+0x3ff4>
   1d850:	cmp	r5, r8
   1d854:	beq	1d868 <argp_parse@@Base+0x3e58>
   1d858:	ldr	r1, [pc, #900]	; 1dbe4 <argp_parse@@Base+0x41d4>
   1d85c:	ldr	r0, [sp, #32]
   1d860:	bl	1c868 <argp_parse@@Base+0x2e58>
   1d864:	ldr	r8, [r4]
   1d868:	cmp	r6, r8
   1d86c:	ldrgt	r3, [sp, #32]
   1d870:	addgt	r2, r3, r8, lsl #2
   1d874:	bgt	1d88c <argp_parse@@Base+0x3e7c>
   1d878:	b	1d8a8 <argp_parse@@Base+0x3e98>
   1d87c:	add	r8, r8, #1
   1d880:	cmp	r6, r8
   1d884:	str	r8, [r4]
   1d888:	beq	1d8fc <argp_parse@@Base+0x3eec>
   1d88c:	ldr	r3, [r2], #4
   1d890:	ldrb	r1, [r3]
   1d894:	cmp	r1, #45	; 0x2d
   1d898:	bne	1d87c <argp_parse@@Base+0x3e6c>
   1d89c:	ldrb	r3, [r3, #1]
   1d8a0:	cmp	r3, #0
   1d8a4:	beq	1d87c <argp_parse@@Base+0x3e6c>
   1d8a8:	mov	r5, r8
   1d8ac:	b	1d900 <argp_parse@@Base+0x3ef0>
   1d8b0:	ldr	r5, [r4, #28]
   1d8b4:	cmp	r8, r5
   1d8b8:	moveq	r5, r6
   1d8bc:	beq	1d77c <argp_parse@@Base+0x3d6c>
   1d8c0:	str	r5, [r4]
   1d8c4:	b	1d77c <argp_parse@@Base+0x3d6c>
   1d8c8:	ldr	r0, [pc, #808]	; 1dbf8 <argp_parse@@Base+0x41e8>
   1d8cc:	bl	11274 <getenv@plt>
   1d8d0:	ldr	r5, [r4, #20]
   1d8d4:	cmp	r0, #0
   1d8d8:	bne	1d634 <argp_parse@@Base+0x3c24>
   1d8dc:	mov	r3, #1
   1d8e0:	str	r3, [r4, #24]
   1d8e4:	b	1d63c <argp_parse@@Base+0x3c2c>
   1d8e8:	mov	r2, #2
   1d8ec:	add	fp, fp, #1
   1d8f0:	mov	r5, r3
   1d8f4:	str	r2, [r4, #24]
   1d8f8:	b	1d63c <argp_parse@@Base+0x3c2c>
   1d8fc:	mov	r5, r6
   1d900:	cmp	r6, r5
   1d904:	mov	r8, r5
   1d908:	str	r5, [r4, #32]
   1d90c:	bne	1d710 <argp_parse@@Base+0x3d00>
   1d910:	b	1d8b0 <argp_parse@@Base+0x3ea0>
   1d914:	ldrb	r1, [r9, #1]
   1d918:	cmp	r1, #0
   1d91c:	beq	1d7bc <argp_parse@@Base+0x3dac>
   1d920:	ldr	r2, [sp, #36]	; 0x24
   1d924:	cmp	r2, #0
   1d928:	beq	1d95c <argp_parse@@Base+0x3f4c>
   1d92c:	cmp	r1, #45	; 0x2d
   1d930:	beq	1db10 <argp_parse@@Base+0x4100>
   1d934:	ldr	r3, [sp, #84]	; 0x54
   1d938:	cmp	r3, #0
   1d93c:	beq	1d95c <argp_parse@@Base+0x3f4c>
   1d940:	ldrb	r3, [r9, #2]
   1d944:	cmp	r3, #0
   1d948:	bne	1da58 <argp_parse@@Base+0x4048>
   1d94c:	mov	r0, fp
   1d950:	bl	11310 <strchr@plt>
   1d954:	cmp	r0, #0
   1d958:	beq	1da58 <argp_parse@@Base+0x4048>
   1d95c:	add	r5, r9, #1
   1d960:	b	1d664 <argp_parse@@Base+0x3c54>
   1d964:	mov	r5, r3
   1d968:	str	r3, [r4, #28]
   1d96c:	b	1d764 <argp_parse@@Base+0x3d54>
   1d970:	ldr	r1, [sp, #36]	; 0x24
   1d974:	sub	r2, r3, #59	; 0x3b
   1d978:	cmp	r1, #0
   1d97c:	clz	r2, r2
   1d980:	lsr	r2, r2, #5
   1d984:	moveq	r2, #0
   1d988:	cmp	r2, #0
   1d98c:	beq	1d6b4 <argp_parse@@Base+0x3ca4>
   1d990:	ldrb	r3, [r5, #1]
   1d994:	cmp	r3, #0
   1d998:	bne	1d9b0 <argp_parse@@Base+0x3fa0>
   1d99c:	ldr	r3, [r4]
   1d9a0:	cmp	r6, r3
   1d9a4:	beq	1db78 <argp_parse@@Base+0x4168>
   1d9a8:	ldr	r2, [sp, #32]
   1d9ac:	ldr	r9, [r2, r3, lsl #2]
   1d9b0:	ldr	r3, [sp, #80]	; 0x50
   1d9b4:	ldr	r1, [sp, #32]
   1d9b8:	str	r3, [sp]
   1d9bc:	ldr	r3, [sp, #36]	; 0x24
   1d9c0:	ldr	lr, [pc, #564]	; 1dbfc <argp_parse@@Base+0x41ec>
   1d9c4:	mov	r2, fp
   1d9c8:	mov	r0, r6
   1d9cc:	mov	ip, #0
   1d9d0:	str	sl, [sp, #12]
   1d9d4:	str	r4, [sp, #8]
   1d9d8:	str	lr, [sp, #16]
   1d9dc:	str	ip, [sp, #4]
   1d9e0:	str	r9, [r4, #20]
   1d9e4:	str	ip, [r4, #12]
   1d9e8:	bl	1c924 <argp_parse@@Base+0x2f14>
   1d9ec:	ldr	r3, [r4, #8]
   1d9f0:	ldr	r5, [r4]
   1d9f4:	ldr	r9, [r4, #12]
   1d9f8:	str	r3, [sp, #28]
   1d9fc:	mov	r2, r3
   1da00:	b	1d7e4 <argp_parse@@Base+0x3dd4>
   1da04:	cmp	r5, r8
   1da08:	movne	r8, r5
   1da0c:	strne	r5, [r4, #28]
   1da10:	b	1d868 <argp_parse@@Base+0x3e58>
   1da14:	ldrb	r3, [r0, #2]
   1da18:	cmp	r3, #58	; 0x3a
   1da1c:	ldrb	r3, [r5, #1]
   1da20:	beq	1dad8 <argp_parse@@Base+0x40c8>
   1da24:	cmp	r3, #0
   1da28:	ldr	r5, [r4]
   1da2c:	beq	1daac <argp_parse@@Base+0x409c>
   1da30:	ldr	r3, [r4, #8]
   1da34:	mov	r0, r8
   1da38:	add	r5, r5, #1
   1da3c:	str	r9, [r4, #12]
   1da40:	str	r5, [r4]
   1da44:	str	r3, [sp, #28]
   1da48:	mov	r3, #0
   1da4c:	str	r3, [r4, #20]
   1da50:	ldr	r2, [sp, #28]
   1da54:	b	1d7e4 <argp_parse@@Base+0x3dd4>
   1da58:	ldr	r2, [sp, #84]	; 0x54
   1da5c:	ldr	r3, [pc, #412]	; 1dc00 <argp_parse@@Base+0x41f0>
   1da60:	str	r2, [sp, #4]
   1da64:	ldr	r2, [sp, #80]	; 0x50
   1da68:	str	r3, [sp, #16]
   1da6c:	str	r2, [sp]
   1da70:	add	r9, r9, #1
   1da74:	str	sl, [sp, #12]
   1da78:	str	r4, [sp, #8]
   1da7c:	ldr	r3, [sp, #36]	; 0x24
   1da80:	mov	r2, fp
   1da84:	ldr	r1, [sp, #32]
   1da88:	mov	r0, r6
   1da8c:	str	r9, [r4, #20]
   1da90:	bl	1c924 <argp_parse@@Base+0x2f14>
   1da94:	cmn	r0, #1
   1da98:	bne	1d9ec <argp_parse@@Base+0x3fdc>
   1da9c:	ldr	r3, [r4]
   1daa0:	ldr	r2, [sp, #32]
   1daa4:	ldr	r9, [r2, r3, lsl #2]
   1daa8:	b	1d95c <argp_parse@@Base+0x3f4c>
   1daac:	cmp	r6, r5
   1dab0:	beq	1db48 <argp_parse@@Base+0x4138>
   1dab4:	ldr	r3, [r4, #8]
   1dab8:	mov	r0, r8
   1dabc:	str	r3, [sp, #28]
   1dac0:	ldr	r3, [sp, #32]
   1dac4:	ldr	r9, [r3, r5, lsl #2]
   1dac8:	add	r5, r5, #1
   1dacc:	str	r9, [r4, #12]
   1dad0:	str	r5, [r4]
   1dad4:	b	1da48 <argp_parse@@Base+0x4038>
   1dad8:	cmp	r3, #0
   1dadc:	moveq	r9, r3
   1dae0:	ldrne	r5, [r4]
   1dae4:	mov	r3, #0
   1dae8:	str	r3, [r4, #20]
   1daec:	ldr	r3, [r4, #8]
   1daf0:	addne	r5, r5, #1
   1daf4:	ldreq	r5, [r4]
   1daf8:	strne	r5, [r4]
   1dafc:	str	r9, [r4, #12]
   1db00:	mov	r0, r8
   1db04:	str	r3, [sp, #28]
   1db08:	mov	r2, r3
   1db0c:	b	1d7e4 <argp_parse@@Base+0x3dd4>
   1db10:	str	r3, [sp, #16]
   1db14:	ldr	r3, [sp, #84]	; 0x54
   1db18:	add	r9, r9, #2
   1db1c:	str	r3, [sp, #4]
   1db20:	ldr	r3, [sp, #80]	; 0x50
   1db24:	str	sl, [sp, #12]
   1db28:	str	r3, [sp]
   1db2c:	str	r4, [sp, #8]
   1db30:	mov	r3, r2
   1db34:	ldr	r1, [sp, #32]
   1db38:	mov	r2, fp
   1db3c:	mov	r0, r6
   1db40:	str	r9, [r4, #20]
   1db44:	b	1d9e8 <argp_parse@@Base+0x3fd8>
   1db48:	cmp	sl, #0
   1db4c:	bne	1dbc0 <argp_parse@@Base+0x41b0>
   1db50:	str	r8, [r4, #8]
   1db54:	ldrb	r8, [fp]
   1db58:	cmp	r8, #58	; 0x3a
   1db5c:	moveq	r0, r8
   1db60:	ldreq	r5, [r4]
   1db64:	ldreq	r9, [r4, #12]
   1db68:	ldrne	r5, [r4]
   1db6c:	ldrne	r9, [r4, #12]
   1db70:	movne	r0, #63	; 0x3f
   1db74:	b	1da48 <argp_parse@@Base+0x4038>
   1db78:	cmp	sl, #0
   1db7c:	beq	1db9c <argp_parse@@Base+0x418c>
   1db80:	ldr	r1, [pc, #104]	; 1dbf0 <argp_parse@@Base+0x41e0>
   1db84:	ldr	r3, [sp, #32]
   1db88:	ldr	r0, [r1]
   1db8c:	ldr	r2, [r3]
   1db90:	ldr	r1, [pc, #108]	; 1dc04 <argp_parse@@Base+0x41f4>
   1db94:	mov	r3, r8
   1db98:	bl	1131c <fprintf@plt>
   1db9c:	str	r8, [r4, #8]
   1dba0:	ldrb	r8, [fp]
   1dba4:	ldr	r5, [r4]
   1dba8:	ldr	r9, [r4, #12]
   1dbac:	cmp	r8, #58	; 0x3a
   1dbb0:	movne	r0, #63	; 0x3f
   1dbb4:	moveq	r0, #58	; 0x3a
   1dbb8:	ldr	r2, [sp, #28]
   1dbbc:	b	1d7e4 <argp_parse@@Base+0x3dd4>
   1dbc0:	ldr	r3, [sp, #32]
   1dbc4:	ldr	r1, [pc, #36]	; 1dbf0 <argp_parse@@Base+0x41e0>
   1dbc8:	ldr	r2, [r3]
   1dbcc:	ldr	r0, [r1]
   1dbd0:	mov	r3, r8
   1dbd4:	ldr	r1, [pc, #40]	; 1dc04 <argp_parse@@Base+0x41f4>
   1dbd8:	bl	1131c <fprintf@plt>
   1dbdc:	b	1db50 <argp_parse@@Base+0x4140>
   1dbe0:	andeq	r1, r3, r4, lsl r6
   1dbe4:	muleq	r3, ip, r6
   1dbe8:	andeq	pc, r1, r0, ror r9	; <UNPREDICTABLE>
   1dbec:	andeq	r1, r3, r4, ror #13
   1dbf0:	andeq	r1, r3, r8, lsr #12
   1dbf4:	andeq	pc, r1, r0, lsl #30
   1dbf8:	andeq	pc, r1, ip, ror #29
   1dbfc:	andeq	pc, r1, r8, asr #30
   1dc00:	strdeq	pc, [r1], -ip
   1dc04:	andeq	pc, r1, ip, lsl pc	; <UNPREDICTABLE>
   1dc08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc0c:	sub	sp, sp, #20
   1dc10:	ldr	r7, [pc, #1052]	; 1e034 <argp_parse@@Base+0x4624>
   1dc14:	ldr	r4, [pc, #1052]	; 1e038 <argp_parse@@Base+0x4628>
   1dc18:	subs	r6, r0, #0
   1dc1c:	ldr	r5, [r7]
   1dc20:	ldr	r3, [r7, #4]
   1dc24:	str	r1, [sp, #4]
   1dc28:	str	r5, [r4]
   1dc2c:	str	r3, [r4, #4]
   1dc30:	ble	1df08 <argp_parse@@Base+0x44f8>
   1dc34:	mov	sl, r2
   1dc38:	cmp	r5, #0
   1dc3c:	mov	r2, #0
   1dc40:	str	r2, [r4, #12]
   1dc44:	beq	1dcf0 <argp_parse@@Base+0x42e0>
   1dc48:	ldr	r2, [r4, #16]
   1dc4c:	cmp	r2, #0
   1dc50:	beq	1dcfc <argp_parse@@Base+0x42ec>
   1dc54:	ldrb	r2, [sl]
   1dc58:	sub	r1, r2, #43	; 0x2b
   1dc5c:	tst	r1, #253	; 0xfd
   1dc60:	ldrbeq	r2, [sl, #1]
   1dc64:	addeq	sl, sl, #1
   1dc68:	cmp	r2, #58	; 0x3a
   1dc6c:	ldr	r2, [r4, #20]
   1dc70:	moveq	r3, #0
   1dc74:	cmp	r2, #0
   1dc78:	beq	1dd50 <argp_parse@@Base+0x4340>
   1dc7c:	ldrb	r1, [r2]
   1dc80:	cmp	r1, #0
   1dc84:	beq	1dd50 <argp_parse@@Base+0x4340>
   1dc88:	add	r9, r2, #1
   1dc8c:	str	r9, [r4, #20]
   1dc90:	ldrb	r8, [r2]
   1dc94:	mov	r0, sl
   1dc98:	str	r3, [sp, #12]
   1dc9c:	mov	r1, r8
   1dca0:	str	r2, [sp, #8]
   1dca4:	bl	11310 <strchr@plt>
   1dca8:	ldr	r2, [sp, #8]
   1dcac:	mov	fp, r8
   1dcb0:	ldr	r3, [sp, #12]
   1dcb4:	ldrb	r1, [r2, #1]
   1dcb8:	cmp	r1, #0
   1dcbc:	addeq	r5, r5, #1
   1dcc0:	sub	r1, r8, #58	; 0x3a
   1dcc4:	streq	r5, [r4]
   1dcc8:	cmp	r0, #0
   1dccc:	cmpne	r1, #1
   1dcd0:	bls	1de3c <argp_parse@@Base+0x442c>
   1dcd4:	ldrb	r1, [r0, #1]
   1dcd8:	cmp	r1, #58	; 0x3a
   1dcdc:	beq	1df48 <argp_parse@@Base+0x4538>
   1dce0:	mov	r0, r8
   1dce4:	ldr	r9, [r4, #12]
   1dce8:	ldr	fp, [r4, #8]
   1dcec:	b	1de24 <argp_parse@@Base+0x4414>
   1dcf0:	mov	r2, #1
   1dcf4:	mov	r5, r2
   1dcf8:	str	r2, [r4]
   1dcfc:	mov	r2, #0
   1dd00:	str	r5, [r4, #32]
   1dd04:	str	r5, [r4, #28]
   1dd08:	str	r2, [r4, #20]
   1dd0c:	ldrb	r1, [sl]
   1dd10:	cmp	r1, #45	; 0x2d
   1dd14:	moveq	r1, #2
   1dd18:	addeq	sl, sl, #1
   1dd1c:	streq	r1, [r4, #24]
   1dd20:	beq	1dd3c <argp_parse@@Base+0x432c>
   1dd24:	cmp	r1, #43	; 0x2b
   1dd28:	addeq	sl, sl, #1
   1dd2c:	moveq	r1, r2
   1dd30:	movne	r1, r2
   1dd34:	streq	r2, [r4, #24]
   1dd38:	strne	r2, [r4, #24]
   1dd3c:	mov	r2, #1
   1dd40:	str	r2, [r4, #16]
   1dd44:	ldrb	r2, [sl]
   1dd48:	cmp	r2, #58	; 0x3a
   1dd4c:	beq	1de74 <argp_parse@@Base+0x4464>
   1dd50:	add	r1, r4, #24
   1dd54:	ldm	r1, {r1, r2, r8}
   1dd58:	cmp	r8, r5
   1dd5c:	movgt	r8, r5
   1dd60:	strgt	r5, [r4, #32]
   1dd64:	cmp	r5, r2
   1dd68:	movlt	r2, r5
   1dd6c:	strlt	r5, [r4, #28]
   1dd70:	cmp	r1, #1
   1dd74:	beq	1de88 <argp_parse@@Base+0x4478>
   1dd78:	cmp	r6, r5
   1dd7c:	str	r3, [sp, #8]
   1dd80:	beq	1def8 <argp_parse@@Base+0x44e8>
   1dd84:	ldr	fp, [sp, #4]
   1dd88:	ldr	r1, [pc, #684]	; 1e03c <argp_parse@@Base+0x462c>
   1dd8c:	ldr	r9, [fp, r5, lsl #2]
   1dd90:	mov	r0, r9
   1dd94:	bl	11124 <strcmp@plt>
   1dd98:	ldr	r3, [sp, #8]
   1dd9c:	cmp	r0, #0
   1dda0:	bne	1ddf8 <argp_parse@@Base+0x43e8>
   1dda4:	add	r3, r5, #1
   1dda8:	ldr	r5, [r4, #28]
   1ddac:	str	r3, [r4]
   1ddb0:	cmp	r5, r8
   1ddb4:	beq	1df3c <argp_parse@@Base+0x452c>
   1ddb8:	cmp	r3, r8
   1ddbc:	beq	1ddd0 <argp_parse@@Base+0x43c0>
   1ddc0:	mov	r0, fp
   1ddc4:	ldr	r1, [pc, #620]	; 1e038 <argp_parse@@Base+0x4628>
   1ddc8:	bl	1c868 <argp_parse@@Base+0x2e58>
   1ddcc:	ldr	r5, [r4, #28]
   1ddd0:	mov	r8, r6
   1ddd4:	cmp	r8, r5
   1ddd8:	str	r6, [r4, #32]
   1dddc:	str	r6, [r4]
   1dde0:	beq	1df04 <argp_parse@@Base+0x44f4>
   1dde4:	str	r5, [r4]
   1dde8:	ldr	r9, [r4, #12]
   1ddec:	ldr	fp, [r4, #8]
   1ddf0:	mvn	r0, #0
   1ddf4:	b	1de24 <argp_parse@@Base+0x4414>
   1ddf8:	ldrb	r2, [r9]
   1ddfc:	cmp	r2, #45	; 0x2d
   1de00:	beq	1df28 <argp_parse@@Base+0x4518>
   1de04:	ldr	r3, [r4, #24]
   1de08:	cmp	r3, #0
   1de0c:	beq	1df08 <argp_parse@@Base+0x44f8>
   1de10:	ldr	fp, [r4, #8]
   1de14:	mov	r0, #1
   1de18:	add	r5, r5, #1
   1de1c:	str	r5, [r4]
   1de20:	str	r9, [r4, #12]
   1de24:	ldr	r3, [pc, #532]	; 1e040 <argp_parse@@Base+0x4630>
   1de28:	str	r5, [r7]
   1de2c:	str	fp, [r7, #8]
   1de30:	str	r9, [r3]
   1de34:	add	sp, sp, #20
   1de38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de3c:	cmp	r3, #0
   1de40:	beq	1de64 <argp_parse@@Base+0x4454>
   1de44:	ldr	r3, [sp, #4]
   1de48:	ldr	r1, [pc, #500]	; 1e044 <argp_parse@@Base+0x4634>
   1de4c:	ldr	r2, [r3]
   1de50:	ldr	r0, [r1]
   1de54:	mov	r3, r8
   1de58:	ldr	r1, [pc, #488]	; 1e048 <argp_parse@@Base+0x4638>
   1de5c:	bl	1131c <fprintf@plt>
   1de60:	ldr	r5, [r4]
   1de64:	str	r8, [r4, #8]
   1de68:	ldr	r9, [r4, #12]
   1de6c:	mov	r0, #63	; 0x3f
   1de70:	b	1de24 <argp_parse@@Base+0x4414>
   1de74:	cmp	r1, #1
   1de78:	mov	r8, r5
   1de7c:	mov	r2, r5
   1de80:	mov	r3, #0
   1de84:	bne	1dd78 <argp_parse@@Base+0x4368>
   1de88:	cmp	r2, r8
   1de8c:	beq	1df80 <argp_parse@@Base+0x4570>
   1de90:	cmp	r5, r8
   1de94:	beq	1deb0 <argp_parse@@Base+0x44a0>
   1de98:	ldr	r1, [pc, #408]	; 1e038 <argp_parse@@Base+0x4628>
   1de9c:	ldr	r0, [sp, #4]
   1dea0:	str	r3, [sp, #8]
   1dea4:	bl	1c868 <argp_parse@@Base+0x2e58>
   1dea8:	ldr	r8, [r4]
   1deac:	ldr	r3, [sp, #8]
   1deb0:	cmp	r6, r8
   1deb4:	ldrgt	r2, [sp, #4]
   1deb8:	addgt	r1, r2, r8, lsl #2
   1debc:	bgt	1ded4 <argp_parse@@Base+0x44c4>
   1dec0:	b	1def0 <argp_parse@@Base+0x44e0>
   1dec4:	add	r8, r8, #1
   1dec8:	cmp	r6, r8
   1decc:	str	r8, [r4]
   1ded0:	beq	1df18 <argp_parse@@Base+0x4508>
   1ded4:	ldr	r2, [r1], #4
   1ded8:	ldrb	r0, [r2]
   1dedc:	cmp	r0, #45	; 0x2d
   1dee0:	bne	1dec4 <argp_parse@@Base+0x44b4>
   1dee4:	ldrb	r2, [r2, #1]
   1dee8:	cmp	r2, #0
   1deec:	beq	1dec4 <argp_parse@@Base+0x44b4>
   1def0:	mov	r5, r8
   1def4:	b	1df1c <argp_parse@@Base+0x450c>
   1def8:	ldr	r5, [r4, #28]
   1defc:	cmp	r8, r5
   1df00:	bne	1dde4 <argp_parse@@Base+0x43d4>
   1df04:	mov	r5, r6
   1df08:	ldr	r9, [r4, #12]
   1df0c:	ldr	fp, [r4, #8]
   1df10:	mvn	r0, #0
   1df14:	b	1de24 <argp_parse@@Base+0x4414>
   1df18:	mov	r5, r6
   1df1c:	mov	r8, r5
   1df20:	str	r5, [r4, #32]
   1df24:	b	1dd78 <argp_parse@@Base+0x4368>
   1df28:	ldrb	r2, [r9, #1]
   1df2c:	cmp	r2, #0
   1df30:	beq	1de04 <argp_parse@@Base+0x43f4>
   1df34:	add	r2, r9, #1
   1df38:	b	1dc88 <argp_parse@@Base+0x4278>
   1df3c:	mov	r5, r3
   1df40:	str	r3, [r4, #28]
   1df44:	b	1ddd0 <argp_parse@@Base+0x43c0>
   1df48:	ldrb	r1, [r0, #2]
   1df4c:	cmp	r1, #58	; 0x3a
   1df50:	beq	1dfbc <argp_parse@@Base+0x45ac>
   1df54:	ldrb	r2, [r2, #1]
   1df58:	cmp	r2, #0
   1df5c:	beq	1df90 <argp_parse@@Base+0x4580>
   1df60:	ldr	fp, [r4, #8]
   1df64:	mov	r0, r8
   1df68:	add	r5, r5, #1
   1df6c:	str	r5, [r4]
   1df70:	str	r9, [r4, #12]
   1df74:	mov	r3, #0
   1df78:	str	r3, [r4, #20]
   1df7c:	b	1de24 <argp_parse@@Base+0x4414>
   1df80:	cmp	r5, r8
   1df84:	movne	r8, r5
   1df88:	strne	r5, [r4, #28]
   1df8c:	b	1deb0 <argp_parse@@Base+0x44a0>
   1df90:	cmp	r6, r5
   1df94:	beq	1dfe8 <argp_parse@@Base+0x45d8>
   1df98:	ldr	r2, [sp, #4]
   1df9c:	add	r3, r5, #1
   1dfa0:	ldr	fp, [r4, #8]
   1dfa4:	ldr	r9, [r2, r5, lsl #2]
   1dfa8:	mov	r0, r8
   1dfac:	mov	r5, r3
   1dfb0:	str	r9, [r4, #12]
   1dfb4:	str	r3, [r4]
   1dfb8:	b	1df74 <argp_parse@@Base+0x4564>
   1dfbc:	ldrb	r3, [r2, #1]
   1dfc0:	mov	r0, r8
   1dfc4:	ldr	fp, [r4, #8]
   1dfc8:	cmp	r3, #0
   1dfcc:	moveq	r9, r3
   1dfd0:	addne	r5, r5, #1
   1dfd4:	mov	r3, #0
   1dfd8:	strne	r5, [r4]
   1dfdc:	str	r9, [r4, #12]
   1dfe0:	str	r3, [r4, #20]
   1dfe4:	b	1de24 <argp_parse@@Base+0x4414>
   1dfe8:	cmp	r3, #0
   1dfec:	beq	1e010 <argp_parse@@Base+0x4600>
   1dff0:	ldr	r3, [sp, #4]
   1dff4:	ldr	r1, [pc, #72]	; 1e044 <argp_parse@@Base+0x4634>
   1dff8:	ldr	r2, [r3]
   1dffc:	ldr	r0, [r1]
   1e000:	mov	r3, r8
   1e004:	ldr	r1, [pc, #64]	; 1e04c <argp_parse@@Base+0x463c>
   1e008:	bl	1131c <fprintf@plt>
   1e00c:	ldr	r6, [r4]
   1e010:	str	r8, [r4, #8]
   1e014:	ldrb	r8, [sl]
   1e018:	mov	r5, r6
   1e01c:	cmp	r8, #58	; 0x3a
   1e020:	moveq	r0, r8
   1e024:	ldreq	r9, [r4, #12]
   1e028:	ldrne	r9, [r4, #12]
   1e02c:	movne	r0, #63	; 0x3f
   1e030:	b	1df74 <argp_parse@@Base+0x4564>
   1e034:	andeq	r1, r3, r4, lsl r6
   1e038:	muleq	r3, ip, r6
   1e03c:	andeq	pc, r1, r0, ror r9	; <UNPREDICTABLE>
   1e040:	andeq	r1, r3, r4, ror #13
   1e044:	andeq	r1, r3, r8, lsr #12
   1e048:	andeq	pc, r1, r0, lsl #30
   1e04c:	andeq	pc, r1, ip, lsl pc	; <UNPREDICTABLE>
   1e050:	push	{r4, r5, r6, lr}
   1e054:	subs	r4, r2, #0
   1e058:	mov	r6, r0
   1e05c:	mov	r5, r1
   1e060:	beq	1e08c <argp_parse@@Base+0x467c>
   1e064:	mov	r1, r4
   1e068:	mvn	r0, #0
   1e06c:	bl	1e09c <argp_parse@@Base+0x468c>
   1e070:	cmp	r0, r5
   1e074:	bcs	1e08c <argp_parse@@Base+0x467c>
   1e078:	bl	11328 <__errno_location@plt>
   1e07c:	mov	r3, #12
   1e080:	str	r3, [r0]
   1e084:	mov	r0, #0
   1e088:	pop	{r4, r5, r6, pc}
   1e08c:	mul	r1, r5, r4
   1e090:	mov	r0, r6
   1e094:	pop	{r4, r5, r6, lr}
   1e098:	b	1bf9c <argp_parse@@Base+0x258c>
   1e09c:	subs	r2, r1, #1
   1e0a0:	bxeq	lr
   1e0a4:	bcc	1e27c <argp_parse@@Base+0x486c>
   1e0a8:	cmp	r0, r1
   1e0ac:	bls	1e260 <argp_parse@@Base+0x4850>
   1e0b0:	tst	r1, r2
   1e0b4:	beq	1e26c <argp_parse@@Base+0x485c>
   1e0b8:	clz	r3, r0
   1e0bc:	clz	r2, r1
   1e0c0:	sub	r3, r2, r3
   1e0c4:	rsbs	r3, r3, #31
   1e0c8:	addne	r3, r3, r3, lsl #1
   1e0cc:	mov	r2, #0
   1e0d0:	addne	pc, pc, r3, lsl #2
   1e0d4:	nop			; (mov r0, r0)
   1e0d8:	cmp	r0, r1, lsl #31
   1e0dc:	adc	r2, r2, r2
   1e0e0:	subcs	r0, r0, r1, lsl #31
   1e0e4:	cmp	r0, r1, lsl #30
   1e0e8:	adc	r2, r2, r2
   1e0ec:	subcs	r0, r0, r1, lsl #30
   1e0f0:	cmp	r0, r1, lsl #29
   1e0f4:	adc	r2, r2, r2
   1e0f8:	subcs	r0, r0, r1, lsl #29
   1e0fc:	cmp	r0, r1, lsl #28
   1e100:	adc	r2, r2, r2
   1e104:	subcs	r0, r0, r1, lsl #28
   1e108:	cmp	r0, r1, lsl #27
   1e10c:	adc	r2, r2, r2
   1e110:	subcs	r0, r0, r1, lsl #27
   1e114:	cmp	r0, r1, lsl #26
   1e118:	adc	r2, r2, r2
   1e11c:	subcs	r0, r0, r1, lsl #26
   1e120:	cmp	r0, r1, lsl #25
   1e124:	adc	r2, r2, r2
   1e128:	subcs	r0, r0, r1, lsl #25
   1e12c:	cmp	r0, r1, lsl #24
   1e130:	adc	r2, r2, r2
   1e134:	subcs	r0, r0, r1, lsl #24
   1e138:	cmp	r0, r1, lsl #23
   1e13c:	adc	r2, r2, r2
   1e140:	subcs	r0, r0, r1, lsl #23
   1e144:	cmp	r0, r1, lsl #22
   1e148:	adc	r2, r2, r2
   1e14c:	subcs	r0, r0, r1, lsl #22
   1e150:	cmp	r0, r1, lsl #21
   1e154:	adc	r2, r2, r2
   1e158:	subcs	r0, r0, r1, lsl #21
   1e15c:	cmp	r0, r1, lsl #20
   1e160:	adc	r2, r2, r2
   1e164:	subcs	r0, r0, r1, lsl #20
   1e168:	cmp	r0, r1, lsl #19
   1e16c:	adc	r2, r2, r2
   1e170:	subcs	r0, r0, r1, lsl #19
   1e174:	cmp	r0, r1, lsl #18
   1e178:	adc	r2, r2, r2
   1e17c:	subcs	r0, r0, r1, lsl #18
   1e180:	cmp	r0, r1, lsl #17
   1e184:	adc	r2, r2, r2
   1e188:	subcs	r0, r0, r1, lsl #17
   1e18c:	cmp	r0, r1, lsl #16
   1e190:	adc	r2, r2, r2
   1e194:	subcs	r0, r0, r1, lsl #16
   1e198:	cmp	r0, r1, lsl #15
   1e19c:	adc	r2, r2, r2
   1e1a0:	subcs	r0, r0, r1, lsl #15
   1e1a4:	cmp	r0, r1, lsl #14
   1e1a8:	adc	r2, r2, r2
   1e1ac:	subcs	r0, r0, r1, lsl #14
   1e1b0:	cmp	r0, r1, lsl #13
   1e1b4:	adc	r2, r2, r2
   1e1b8:	subcs	r0, r0, r1, lsl #13
   1e1bc:	cmp	r0, r1, lsl #12
   1e1c0:	adc	r2, r2, r2
   1e1c4:	subcs	r0, r0, r1, lsl #12
   1e1c8:	cmp	r0, r1, lsl #11
   1e1cc:	adc	r2, r2, r2
   1e1d0:	subcs	r0, r0, r1, lsl #11
   1e1d4:	cmp	r0, r1, lsl #10
   1e1d8:	adc	r2, r2, r2
   1e1dc:	subcs	r0, r0, r1, lsl #10
   1e1e0:	cmp	r0, r1, lsl #9
   1e1e4:	adc	r2, r2, r2
   1e1e8:	subcs	r0, r0, r1, lsl #9
   1e1ec:	cmp	r0, r1, lsl #8
   1e1f0:	adc	r2, r2, r2
   1e1f4:	subcs	r0, r0, r1, lsl #8
   1e1f8:	cmp	r0, r1, lsl #7
   1e1fc:	adc	r2, r2, r2
   1e200:	subcs	r0, r0, r1, lsl #7
   1e204:	cmp	r0, r1, lsl #6
   1e208:	adc	r2, r2, r2
   1e20c:	subcs	r0, r0, r1, lsl #6
   1e210:	cmp	r0, r1, lsl #5
   1e214:	adc	r2, r2, r2
   1e218:	subcs	r0, r0, r1, lsl #5
   1e21c:	cmp	r0, r1, lsl #4
   1e220:	adc	r2, r2, r2
   1e224:	subcs	r0, r0, r1, lsl #4
   1e228:	cmp	r0, r1, lsl #3
   1e22c:	adc	r2, r2, r2
   1e230:	subcs	r0, r0, r1, lsl #3
   1e234:	cmp	r0, r1, lsl #2
   1e238:	adc	r2, r2, r2
   1e23c:	subcs	r0, r0, r1, lsl #2
   1e240:	cmp	r0, r1, lsl #1
   1e244:	adc	r2, r2, r2
   1e248:	subcs	r0, r0, r1, lsl #1
   1e24c:	cmp	r0, r1
   1e250:	adc	r2, r2, r2
   1e254:	subcs	r0, r0, r1
   1e258:	mov	r0, r2
   1e25c:	bx	lr
   1e260:	moveq	r0, #1
   1e264:	movne	r0, #0
   1e268:	bx	lr
   1e26c:	clz	r2, r1
   1e270:	rsb	r2, r2, #31
   1e274:	lsr	r0, r0, r2
   1e278:	bx	lr
   1e27c:	cmp	r0, #0
   1e280:	mvnne	r0, #0
   1e284:	b	1e4e8 <argp_parse@@Base+0x4ad8>
   1e288:	cmp	r1, #0
   1e28c:	beq	1e27c <argp_parse@@Base+0x486c>
   1e290:	push	{r0, r1, lr}
   1e294:	bl	1e09c <argp_parse@@Base+0x468c>
   1e298:	pop	{r1, r2, lr}
   1e29c:	mul	r3, r2, r0
   1e2a0:	sub	r1, r1, r3
   1e2a4:	bx	lr
   1e2a8:	cmp	r1, #0
   1e2ac:	beq	1e4b8 <argp_parse@@Base+0x4aa8>
   1e2b0:	eor	ip, r0, r1
   1e2b4:	rsbmi	r1, r1, #0
   1e2b8:	subs	r2, r1, #1
   1e2bc:	beq	1e484 <argp_parse@@Base+0x4a74>
   1e2c0:	movs	r3, r0
   1e2c4:	rsbmi	r3, r0, #0
   1e2c8:	cmp	r3, r1
   1e2cc:	bls	1e490 <argp_parse@@Base+0x4a80>
   1e2d0:	tst	r1, r2
   1e2d4:	beq	1e4a0 <argp_parse@@Base+0x4a90>
   1e2d8:	clz	r2, r3
   1e2dc:	clz	r0, r1
   1e2e0:	sub	r2, r0, r2
   1e2e4:	rsbs	r2, r2, #31
   1e2e8:	addne	r2, r2, r2, lsl #1
   1e2ec:	mov	r0, #0
   1e2f0:	addne	pc, pc, r2, lsl #2
   1e2f4:	nop			; (mov r0, r0)
   1e2f8:	cmp	r3, r1, lsl #31
   1e2fc:	adc	r0, r0, r0
   1e300:	subcs	r3, r3, r1, lsl #31
   1e304:	cmp	r3, r1, lsl #30
   1e308:	adc	r0, r0, r0
   1e30c:	subcs	r3, r3, r1, lsl #30
   1e310:	cmp	r3, r1, lsl #29
   1e314:	adc	r0, r0, r0
   1e318:	subcs	r3, r3, r1, lsl #29
   1e31c:	cmp	r3, r1, lsl #28
   1e320:	adc	r0, r0, r0
   1e324:	subcs	r3, r3, r1, lsl #28
   1e328:	cmp	r3, r1, lsl #27
   1e32c:	adc	r0, r0, r0
   1e330:	subcs	r3, r3, r1, lsl #27
   1e334:	cmp	r3, r1, lsl #26
   1e338:	adc	r0, r0, r0
   1e33c:	subcs	r3, r3, r1, lsl #26
   1e340:	cmp	r3, r1, lsl #25
   1e344:	adc	r0, r0, r0
   1e348:	subcs	r3, r3, r1, lsl #25
   1e34c:	cmp	r3, r1, lsl #24
   1e350:	adc	r0, r0, r0
   1e354:	subcs	r3, r3, r1, lsl #24
   1e358:	cmp	r3, r1, lsl #23
   1e35c:	adc	r0, r0, r0
   1e360:	subcs	r3, r3, r1, lsl #23
   1e364:	cmp	r3, r1, lsl #22
   1e368:	adc	r0, r0, r0
   1e36c:	subcs	r3, r3, r1, lsl #22
   1e370:	cmp	r3, r1, lsl #21
   1e374:	adc	r0, r0, r0
   1e378:	subcs	r3, r3, r1, lsl #21
   1e37c:	cmp	r3, r1, lsl #20
   1e380:	adc	r0, r0, r0
   1e384:	subcs	r3, r3, r1, lsl #20
   1e388:	cmp	r3, r1, lsl #19
   1e38c:	adc	r0, r0, r0
   1e390:	subcs	r3, r3, r1, lsl #19
   1e394:	cmp	r3, r1, lsl #18
   1e398:	adc	r0, r0, r0
   1e39c:	subcs	r3, r3, r1, lsl #18
   1e3a0:	cmp	r3, r1, lsl #17
   1e3a4:	adc	r0, r0, r0
   1e3a8:	subcs	r3, r3, r1, lsl #17
   1e3ac:	cmp	r3, r1, lsl #16
   1e3b0:	adc	r0, r0, r0
   1e3b4:	subcs	r3, r3, r1, lsl #16
   1e3b8:	cmp	r3, r1, lsl #15
   1e3bc:	adc	r0, r0, r0
   1e3c0:	subcs	r3, r3, r1, lsl #15
   1e3c4:	cmp	r3, r1, lsl #14
   1e3c8:	adc	r0, r0, r0
   1e3cc:	subcs	r3, r3, r1, lsl #14
   1e3d0:	cmp	r3, r1, lsl #13
   1e3d4:	adc	r0, r0, r0
   1e3d8:	subcs	r3, r3, r1, lsl #13
   1e3dc:	cmp	r3, r1, lsl #12
   1e3e0:	adc	r0, r0, r0
   1e3e4:	subcs	r3, r3, r1, lsl #12
   1e3e8:	cmp	r3, r1, lsl #11
   1e3ec:	adc	r0, r0, r0
   1e3f0:	subcs	r3, r3, r1, lsl #11
   1e3f4:	cmp	r3, r1, lsl #10
   1e3f8:	adc	r0, r0, r0
   1e3fc:	subcs	r3, r3, r1, lsl #10
   1e400:	cmp	r3, r1, lsl #9
   1e404:	adc	r0, r0, r0
   1e408:	subcs	r3, r3, r1, lsl #9
   1e40c:	cmp	r3, r1, lsl #8
   1e410:	adc	r0, r0, r0
   1e414:	subcs	r3, r3, r1, lsl #8
   1e418:	cmp	r3, r1, lsl #7
   1e41c:	adc	r0, r0, r0
   1e420:	subcs	r3, r3, r1, lsl #7
   1e424:	cmp	r3, r1, lsl #6
   1e428:	adc	r0, r0, r0
   1e42c:	subcs	r3, r3, r1, lsl #6
   1e430:	cmp	r3, r1, lsl #5
   1e434:	adc	r0, r0, r0
   1e438:	subcs	r3, r3, r1, lsl #5
   1e43c:	cmp	r3, r1, lsl #4
   1e440:	adc	r0, r0, r0
   1e444:	subcs	r3, r3, r1, lsl #4
   1e448:	cmp	r3, r1, lsl #3
   1e44c:	adc	r0, r0, r0
   1e450:	subcs	r3, r3, r1, lsl #3
   1e454:	cmp	r3, r1, lsl #2
   1e458:	adc	r0, r0, r0
   1e45c:	subcs	r3, r3, r1, lsl #2
   1e460:	cmp	r3, r1, lsl #1
   1e464:	adc	r0, r0, r0
   1e468:	subcs	r3, r3, r1, lsl #1
   1e46c:	cmp	r3, r1
   1e470:	adc	r0, r0, r0
   1e474:	subcs	r3, r3, r1
   1e478:	cmp	ip, #0
   1e47c:	rsbmi	r0, r0, #0
   1e480:	bx	lr
   1e484:	teq	ip, r0
   1e488:	rsbmi	r0, r0, #0
   1e48c:	bx	lr
   1e490:	movcc	r0, #0
   1e494:	asreq	r0, ip, #31
   1e498:	orreq	r0, r0, #1
   1e49c:	bx	lr
   1e4a0:	clz	r2, r1
   1e4a4:	rsb	r2, r2, #31
   1e4a8:	cmp	ip, #0
   1e4ac:	lsr	r0, r3, r2
   1e4b0:	rsbmi	r0, r0, #0
   1e4b4:	bx	lr
   1e4b8:	cmp	r0, #0
   1e4bc:	mvngt	r0, #-2147483648	; 0x80000000
   1e4c0:	movlt	r0, #-2147483648	; 0x80000000
   1e4c4:	b	1e4e8 <argp_parse@@Base+0x4ad8>
   1e4c8:	cmp	r1, #0
   1e4cc:	beq	1e4b8 <argp_parse@@Base+0x4aa8>
   1e4d0:	push	{r0, r1, lr}
   1e4d4:	bl	1e2b0 <argp_parse@@Base+0x48a0>
   1e4d8:	pop	{r1, r2, lr}
   1e4dc:	mul	r3, r2, r0
   1e4e0:	sub	r1, r1, r3
   1e4e4:	bx	lr
   1e4e8:	push	{r1, lr}
   1e4ec:	mov	r0, #8
   1e4f0:	bl	11118 <raise@plt>
   1e4f4:	pop	{r1, pc}
   1e4f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e4fc:	mov	r7, r0
   1e500:	ldr	r6, [pc, #72]	; 1e550 <argp_parse@@Base+0x4b40>
   1e504:	ldr	r5, [pc, #72]	; 1e554 <argp_parse@@Base+0x4b44>
   1e508:	add	r6, pc, r6
   1e50c:	add	r5, pc, r5
   1e510:	sub	r6, r6, r5
   1e514:	mov	r8, r1
   1e518:	mov	r9, r2
   1e51c:	bl	110e0 <calloc@plt-0x20>
   1e520:	asrs	r6, r6, #2
   1e524:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e528:	mov	r4, #0
   1e52c:	add	r4, r4, #1
   1e530:	ldr	r3, [r5], #4
   1e534:	mov	r2, r9
   1e538:	mov	r1, r8
   1e53c:	mov	r0, r7
   1e540:	blx	r3
   1e544:	cmp	r6, r4
   1e548:	bne	1e52c <argp_parse@@Base+0x4b1c>
   1e54c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e550:	andeq	r2, r1, r0, lsl #20
   1e554:	strdeq	r2, [r1], -r8
   1e558:	bx	lr

Disassembly of section .fini:

0001e55c <.fini>:
   1e55c:	push	{r3, lr}
   1e560:	pop	{r3, pc}
