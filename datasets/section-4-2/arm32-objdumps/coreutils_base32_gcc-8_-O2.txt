
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010c7c <.init>:
   10c7c:	push	{r3, lr}
   10c80:	bl	1161c <__assert_fail@plt+0x71c>
   10c84:	pop	{r3, pc}

Disassembly of section .plt:

00010c88 <calloc@plt-0x14>:
   10c88:	push	{lr}		; (str lr, [sp, #-4]!)
   10c8c:	ldr	lr, [pc, #4]	; 10c98 <calloc@plt-0x4>
   10c90:	add	lr, pc, lr
   10c94:	ldr	pc, [lr, #8]!
   10c98:	andeq	r7, r1, r8, ror #6

00010c9c <calloc@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #94208	; 0x17000
   10ca4:	ldr	pc, [ip, #872]!	; 0x368

00010ca8 <fputs_unlocked@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #94208	; 0x17000
   10cb0:	ldr	pc, [ip, #864]!	; 0x360

00010cb4 <strcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #94208	; 0x17000
   10cbc:	ldr	pc, [ip, #856]!	; 0x358

00010cc0 <posix_fadvise64@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #94208	; 0x17000
   10cc8:	ldr	pc, [ip, #848]!	; 0x350

00010ccc <fflush@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #94208	; 0x17000
   10cd4:	ldr	pc, [ip, #840]!	; 0x348

00010cd8 <memmove@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #832]!	; 0x340

00010ce4 <free@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #824]!	; 0x338

00010cf0 <_exit@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #816]!	; 0x330

00010cfc <memcpy@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #808]!	; 0x328

00010d08 <mbsinit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #800]!	; 0x320

00010d14 <fwrite_unlocked@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #792]!	; 0x318

00010d20 <memcmp@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #94208	; 0x17000
   10d28:	ldr	pc, [ip, #784]!	; 0x310

00010d2c <fputc_unlocked@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #94208	; 0x17000
   10d34:	ldr	pc, [ip, #776]!	; 0x308

00010d38 <dcgettext@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #94208	; 0x17000
   10d40:	ldr	pc, [ip, #768]!	; 0x300

00010d44 <realloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #94208	; 0x17000
   10d4c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d50 <textdomain@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #94208	; 0x17000
   10d58:	ldr	pc, [ip, #752]!	; 0x2f0

00010d5c <iswprint@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #94208	; 0x17000
   10d64:	ldr	pc, [ip, #744]!	; 0x2e8

00010d68 <fwrite@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #94208	; 0x17000
   10d70:	ldr	pc, [ip, #736]!	; 0x2e0

00010d74 <lseek64@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #94208	; 0x17000
   10d7c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d80 <__ctype_get_mb_cur_max@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #94208	; 0x17000
   10d88:	ldr	pc, [ip, #720]!	; 0x2d0

00010d8c <__fpending@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #94208	; 0x17000
   10d94:	ldr	pc, [ip, #712]!	; 0x2c8

00010d98 <mbrtowc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #94208	; 0x17000
   10da0:	ldr	pc, [ip, #704]!	; 0x2c0

00010da4 <error@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #94208	; 0x17000
   10dac:	ldr	pc, [ip, #696]!	; 0x2b8

00010db0 <malloc@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #94208	; 0x17000
   10db8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dbc <__libc_start_main@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #94208	; 0x17000
   10dc4:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc8 <__freading@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #94208	; 0x17000
   10dd0:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd4 <__gmon_start__@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #664]!	; 0x298

00010de0 <getopt_long@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #94208	; 0x17000
   10de8:	ldr	pc, [ip, #656]!	; 0x290

00010dec <__ctype_b_loc@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #94208	; 0x17000
   10df4:	ldr	pc, [ip, #648]!	; 0x288

00010df8 <exit@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #94208	; 0x17000
   10e00:	ldr	pc, [ip, #640]!	; 0x280

00010e04 <strlen@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #94208	; 0x17000
   10e0c:	ldr	pc, [ip, #632]!	; 0x278

00010e10 <strchr@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #94208	; 0x17000
   10e18:	ldr	pc, [ip, #624]!	; 0x270

00010e1c <__errno_location@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #94208	; 0x17000
   10e24:	ldr	pc, [ip, #616]!	; 0x268

00010e28 <__cxa_atexit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #94208	; 0x17000
   10e30:	ldr	pc, [ip, #608]!	; 0x260

00010e34 <memset@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #94208	; 0x17000
   10e3c:	ldr	pc, [ip, #600]!	; 0x258

00010e40 <__printf_chk@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #592]!	; 0x250

00010e4c <fileno@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #584]!	; 0x248

00010e58 <__fprintf_chk@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #576]!	; 0x240

00010e64 <memchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #568]!	; 0x238

00010e70 <fclose@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #560]!	; 0x230

00010e7c <fseeko64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #552]!	; 0x228

00010e88 <__overflow@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #544]!	; 0x220

00010e94 <setlocale@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #536]!	; 0x218

00010ea0 <strrchr@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #528]!	; 0x210

00010eac <nl_langinfo@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #520]!	; 0x208

00010eb8 <__strtoll_internal@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #512]!	; 0x200

00010ec4 <fopen64@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #504]!	; 0x1f8

00010ed0 <bindtextdomain@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #496]!	; 0x1f0

00010edc <fread_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee8 <strncmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef4 <abort@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #472]!	; 0x1d8

00010f00 <__assert_fail@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #464]!	; 0x1d0

Disassembly of section .text:

00010f0c <.text>:
   10f0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f10:	strd	r6, [sp, #8]
   10f14:	mov	r7, #0
   10f18:	movw	r6, #27396	; 0x6b04
   10f1c:	movt	r6, #1
   10f20:	strd	r8, [sp, #16]
   10f24:	mov	r8, r1
   10f28:	strd	sl, [sp, #24]
   10f2c:	mov	sl, r0
   10f30:	movw	r9, #33104	; 0x8150
   10f34:	movt	r9, #2
   10f38:	str	lr, [sp, #32]
   10f3c:	sub	sp, sp, #68	; 0x44
   10f40:	ldr	r0, [r1]
   10f44:	mov	r4, r7
   10f48:	bl	126e0 <__assert_fail@plt+0x17e0>
   10f4c:	movw	r1, #26764	; 0x688c
   10f50:	movt	r1, #1
   10f54:	ldr	fp, [pc, #1664]	; 115dc <__assert_fail@plt+0x6dc>
   10f58:	mov	r0, #6
   10f5c:	bl	10e94 <setlocale@plt>
   10f60:	movw	r1, #27328	; 0x6ac0
   10f64:	movt	r1, #1
   10f68:	movw	r0, #27160	; 0x6a18
   10f6c:	movt	r0, #1
   10f70:	bl	10ed0 <bindtextdomain@plt>
   10f74:	movw	r0, #27160	; 0x6a18
   10f78:	movt	r0, #1
   10f7c:	bl	10d50 <textdomain@plt>
   10f80:	movw	r0, #9052	; 0x235c
   10f84:	movt	r0, #1
   10f88:	bl	16578 <__assert_fail@plt+0x5678>
   10f8c:	mov	r3, #76	; 0x4c
   10f90:	str	r3, [sp, #12]
   10f94:	mov	r5, #0
   10f98:	mov	r3, fp
   10f9c:	mov	r2, r6
   10fa0:	mov	r1, r8
   10fa4:	mov	r0, sl
   10fa8:	str	r5, [sp]
   10fac:	bl	10de0 <getopt_long@plt>
   10fb0:	cmn	r0, #1
   10fb4:	beq	11124 <__assert_fail@plt+0x224>
   10fb8:	cmp	r0, #100	; 0x64
   10fbc:	beq	110e0 <__assert_fail@plt+0x1e0>
   10fc0:	bgt	10fdc <__assert_fail@plt+0xdc>
   10fc4:	cmn	r0, #3
   10fc8:	beq	110a0 <__assert_fail@plt+0x1a0>
   10fcc:	cmn	r0, #2
   10fd0:	bne	11098 <__assert_fail@plt+0x198>
   10fd4:	mov	r0, r5
   10fd8:	bl	1175c <__assert_fail@plt+0x85c>
   10fdc:	cmp	r0, #105	; 0x69
   10fe0:	beq	11054 <__assert_fail@plt+0x154>
   10fe4:	cmp	r0, #119	; 0x77
   10fe8:	bne	11098 <__assert_fail@plt+0x198>
   10fec:	movw	r2, #26764	; 0x688c
   10ff0:	movt	r2, #1
   10ff4:	ldr	r0, [r9]
   10ff8:	mov	r1, r5
   10ffc:	add	r3, sp, #48	; 0x30
   11000:	str	r2, [sp]
   11004:	mov	r2, #10
   11008:	bl	15438 <__assert_fail@plt+0x4538>
   1100c:	cmp	r0, #1
   11010:	mov	ip, r0
   11014:	bhi	110e8 <__assert_fail@plt+0x1e8>
   11018:	ldrd	r2, [sp, #48]	; 0x30
   1101c:	cmp	r2, #0
   11020:	sbcs	r1, r3, #0
   11024:	blt	110e8 <__assert_fail@plt+0x1e8>
   11028:	mvn	r0, #-2147483648	; 0x80000000
   1102c:	mov	r1, #0
   11030:	cmp	r0, r2
   11034:	eor	ip, ip, #1
   11038:	sbcs	r1, r1, r3
   1103c:	movlt	ip, #0
   11040:	andge	ip, ip, #1
   11044:	cmp	ip, #0
   11048:	moveq	r2, #0
   1104c:	str	r2, [sp, #12]
   11050:	b	10f94 <__assert_fail@plt+0x94>
   11054:	mov	r7, #1
   11058:	b	10f94 <__assert_fail@plt+0x94>
   1105c:	mov	r2, #5
   11060:	movw	r1, #27404	; 0x6b0c
   11064:	movt	r1, #1
   11068:	mov	r0, r5
   1106c:	bl	10d38 <dcgettext@plt>
   11070:	ldr	r3, [r6]
   11074:	mov	r4, r0
   11078:	add	r3, r3, #1
   1107c:	ldr	r0, [r8, r3, lsl #2]
   11080:	bl	149d0 <__assert_fail@plt+0x3ad0>
   11084:	mov	r3, r0
   11088:	mov	r2, r4
   1108c:	mov	r1, r5
   11090:	mov	r0, r5
   11094:	bl	10da4 <error@plt>
   11098:	mov	r0, #1
   1109c:	bl	1175c <__assert_fail@plt+0x85c>
   110a0:	movw	r2, #27380	; 0x6af4
   110a4:	movt	r2, #1
   110a8:	movw	r3, #33000	; 0x80e8
   110ac:	movt	r3, #2
   110b0:	movw	r0, #33100	; 0x814c
   110b4:	movt	r0, #2
   110b8:	stm	sp, {r2, r5}
   110bc:	movw	r1, #26192	; 0x6650
   110c0:	movt	r1, #1
   110c4:	ldr	r0, [r0]
   110c8:	movw	r2, #27156	; 0x6a14
   110cc:	movt	r2, #1
   110d0:	ldr	r3, [r3]
   110d4:	bl	14e6c <__assert_fail@plt+0x3f6c>
   110d8:	mov	r0, r5
   110dc:	bl	10df8 <exit@plt>
   110e0:	mov	r4, #1
   110e4:	b	10f94 <__assert_fail@plt+0x94>
   110e8:	mov	r2, #5
   110ec:	movw	r1, #27352	; 0x6ad8
   110f0:	movt	r1, #1
   110f4:	mov	r0, #0
   110f8:	bl	10d38 <dcgettext@plt>
   110fc:	mov	r4, r0
   11100:	ldr	r0, [r9]
   11104:	bl	149d0 <__assert_fail@plt+0x3ad0>
   11108:	movw	r2, #27372	; 0x6aec
   1110c:	movt	r2, #1
   11110:	str	r0, [sp]
   11114:	mov	r3, r4
   11118:	mov	r1, #0
   1111c:	mov	r0, #1
   11120:	bl	10da4 <error@plt>
   11124:	movw	r6, #33080	; 0x8138
   11128:	movt	r6, #2
   1112c:	ldr	r3, [r6]
   11130:	sub	r2, sl, r3
   11134:	cmp	r2, #1
   11138:	bgt	1105c <__assert_fail@plt+0x15c>
   1113c:	cmp	r3, sl
   11140:	bge	11328 <__assert_fail@plt+0x428>
   11144:	ldr	r3, [r8, r3, lsl #2]
   11148:	movw	r1, #26164	; 0x6634
   1114c:	movt	r1, #1
   11150:	mov	r0, r3
   11154:	str	r3, [sp, #24]
   11158:	bl	10cb4 <strcmp@plt>
   1115c:	cmp	r0, #0
   11160:	beq	11334 <__assert_fail@plt+0x434>
   11164:	movw	r1, #27424	; 0x6b20
   11168:	movt	r1, #1
   1116c:	ldr	r0, [sp, #24]
   11170:	bl	10ec4 <fopen64@plt>
   11174:	subs	sl, r0, #0
   11178:	beq	11594 <__assert_fail@plt+0x694>
   1117c:	mov	r1, #2
   11180:	mov	r0, sl
   11184:	bl	1244c <__assert_fail@plt+0x154c>
   11188:	cmp	r4, #0
   1118c:	movw	r3, #33100	; 0x814c
   11190:	movt	r3, #2
   11194:	beq	11344 <__assert_fail@plt+0x444>
   11198:	ldr	r3, [r3]
   1119c:	mov	r0, #8192	; 0x2000
   111a0:	str	r3, [sp, #16]
   111a4:	bl	14f7c <__assert_fail@plt+0x407c>
   111a8:	mov	r6, r0
   111ac:	mov	r0, #5120	; 0x1400
   111b0:	bl	14f7c <__assert_fail@plt+0x407c>
   111b4:	mov	r8, r0
   111b8:	add	r0, sp, #48	; 0x30
   111bc:	bl	11fe4 <__assert_fail@plt+0x10e4>
   111c0:	str	r7, [sp, #12]
   111c4:	str	r8, [sp, #20]
   111c8:	mov	r5, #0
   111cc:	b	111f4 <__assert_fail@plt+0x2f4>
   111d0:	ldr	r3, [sl]
   111d4:	add	r5, r5, r4
   111d8:	ands	r4, r3, #32
   111dc:	bne	113b8 <__assert_fail@plt+0x4b8>
   111e0:	cmp	r5, #8192	; 0x2000
   111e4:	and	r2, r3, #16
   111e8:	bge	11274 <__assert_fail@plt+0x374>
   111ec:	cmp	r2, #0
   111f0:	bne	11274 <__assert_fail@plt+0x374>
   111f4:	mov	r3, sl
   111f8:	rsb	r2, r5, #8192	; 0x2000
   111fc:	mov	r1, #1
   11200:	add	r0, r6, r5
   11204:	bl	10edc <fread_unlocked@plt>
   11208:	ldr	r3, [sp, #12]
   1120c:	mov	r4, r0
   11210:	cmp	r3, #0
   11214:	beq	111d0 <__assert_fail@plt+0x2d0>
   11218:	cmp	r0, #0
   1121c:	ble	111d0 <__assert_fail@plt+0x2d0>
   11220:	mov	r8, #0
   11224:	b	11230 <__assert_fail@plt+0x330>
   11228:	cmp	r4, r8
   1122c:	ble	111d0 <__assert_fail@plt+0x2d0>
   11230:	add	r7, r5, r8
   11234:	ldrb	r9, [r6, r7]
   11238:	add	fp, r6, r7
   1123c:	mov	r0, r9
   11240:	bl	11fcc <__assert_fail@plt+0x10cc>
   11244:	cmp	r9, #61	; 0x3d
   11248:	orreq	r0, r0, #1
   1124c:	tst	r0, #255	; 0xff
   11250:	addne	r8, r8, #1
   11254:	bne	11228 <__assert_fail@plt+0x328>
   11258:	sub	r4, r4, #1
   1125c:	add	r1, r7, #1
   11260:	add	r1, r6, r1
   11264:	mov	r0, fp
   11268:	sub	r2, r4, r8
   1126c:	bl	10cd8 <memmove@plt>
   11270:	b	11228 <__assert_fail@plt+0x328>
   11274:	add	fp, sp, #44	; 0x2c
   11278:	ldr	r7, [sp, #16]
   1127c:	ldr	r8, [sp, #20]
   11280:	b	112e8 <__assert_fail@plt+0x3e8>
   11284:	cmp	r4, #0
   11288:	bne	111c8 <__assert_fail@plt+0x2c8>
   1128c:	cmp	r4, #0
   11290:	mov	r3, #5120	; 0x1400
   11294:	moveq	r2, r5
   11298:	movne	r2, #0
   1129c:	str	r3, [sp, #44]	; 0x2c
   112a0:	mov	r3, r8
   112a4:	mov	r1, r6
   112a8:	str	fp, [sp]
   112ac:	add	r0, sp, #48	; 0x30
   112b0:	bl	11ff0 <__assert_fail@plt+0x10f0>
   112b4:	mov	r9, r0
   112b8:	mov	r3, r7
   112bc:	ldr	r2, [sp, #44]	; 0x2c
   112c0:	mov	r1, #1
   112c4:	mov	r0, r8
   112c8:	bl	10d14 <fwrite_unlocked@plt>
   112cc:	ldr	r3, [sp, #44]	; 0x2c
   112d0:	cmp	r0, r3
   112d4:	bcc	11560 <__assert_fail@plt+0x660>
   112d8:	cmp	r9, #0
   112dc:	beq	11570 <__assert_fail@plt+0x670>
   112e0:	ldr	r3, [sl]
   112e4:	add	r4, r4, #1
   112e8:	tst	r3, #16
   112ec:	beq	11284 <__assert_fail@plt+0x384>
   112f0:	cmp	r4, #2
   112f4:	beq	1131c <__assert_fail@plt+0x41c>
   112f8:	cmp	r4, #1
   112fc:	bne	1128c <__assert_fail@plt+0x38c>
   11300:	ldr	r3, [sp, #48]	; 0x30
   11304:	cmp	r3, #0
   11308:	beq	1131c <__assert_fail@plt+0x41c>
   1130c:	mov	r3, #5120	; 0x1400
   11310:	mov	r2, #0
   11314:	str	r3, [sp, #44]	; 0x2c
   11318:	b	112a0 <__assert_fail@plt+0x3a0>
   1131c:	mov	r0, sl
   11320:	ldr	r1, [sp, #24]
   11324:	bl	116d0 <__assert_fail@plt+0x7d0>
   11328:	movw	r3, #26164	; 0x6634
   1132c:	movt	r3, #1
   11330:	str	r3, [sp, #24]
   11334:	movw	r3, #33096	; 0x8148
   11338:	movt	r3, #2
   1133c:	ldr	sl, [r3]
   11340:	b	1117c <__assert_fail@plt+0x27c>
   11344:	mov	r0, #30720	; 0x7800
   11348:	str	r3, [sp, #20]
   1134c:	ldr	r8, [r3]
   11350:	bl	14f7c <__assert_fail@plt+0x407c>
   11354:	mov	fp, r0
   11358:	mov	r0, #49152	; 0xc000
   1135c:	bl	14f7c <__assert_fail@plt+0x407c>
   11360:	str	r0, [sp, #16]
   11364:	mov	r5, #0
   11368:	b	11374 <__assert_fail@plt+0x474>
   1136c:	cmp	r5, #30720	; 0x7800
   11370:	bge	113e4 <__assert_fail@plt+0x4e4>
   11374:	mov	r3, sl
   11378:	rsb	r2, r5, #30720	; 0x7800
   1137c:	add	r0, fp, r5
   11380:	mov	r1, #1
   11384:	bl	10edc <fread_unlocked@plt>
   11388:	ldr	r3, [sl]
   1138c:	add	r5, r5, r0
   11390:	tst	r3, #48	; 0x30
   11394:	beq	1136c <__assert_fail@plt+0x46c>
   11398:	cmp	r5, #0
   1139c:	bgt	113e4 <__assert_fail@plt+0x4e4>
   113a0:	ldr	r2, [sp, #12]
   113a4:	cmp	r2, #0
   113a8:	cmpne	r4, #0
   113ac:	bgt	11524 <__assert_fail@plt+0x624>
   113b0:	tst	r3, #32
   113b4:	beq	1131c <__assert_fail@plt+0x41c>
   113b8:	bl	10e1c <__errno_location@plt>
   113bc:	movw	r1, #27428	; 0x6b24
   113c0:	movt	r1, #1
   113c4:	ldr	r4, [r0]
   113c8:	mov	r2, #5
   113cc:	mov	r0, #0
   113d0:	bl	10d38 <dcgettext@plt>
   113d4:	mov	r2, r0
   113d8:	mov	r1, r4
   113dc:	mov	r0, #1
   113e0:	bl	10da4 <error@plt>
   113e4:	add	r7, r5, #4
   113e8:	mov	r6, #5
   113ec:	ldr	r9, [sp, #16]
   113f0:	mov	r1, r5
   113f4:	mov	r0, fp
   113f8:	udiv	r7, r7, r6
   113fc:	mov	r2, r9
   11400:	lsl	r7, r7, #3
   11404:	mov	r3, r7
   11408:	bl	11ce8 <__assert_fail@plt+0xde8>
   1140c:	ldr	r3, [sp, #12]
   11410:	cmp	r3, #0
   11414:	bne	11450 <__assert_fail@plt+0x550>
   11418:	ldr	r3, [sp, #20]
   1141c:	mov	r2, r7
   11420:	mov	r1, #1
   11424:	mov	r0, r9
   11428:	ldr	r3, [r3]
   1142c:	bl	10d14 <fwrite_unlocked@plt>
   11430:	cmp	r7, r0
   11434:	bhi	115c4 <__assert_fail@plt+0x6c4>
   11438:	ldr	r3, [sl]
   1143c:	and	r2, r3, #48	; 0x30
   11440:	cmp	r5, #30720	; 0x7800
   11444:	cmpeq	r2, #0
   11448:	beq	11364 <__assert_fail@plt+0x464>
   1144c:	b	113a0 <__assert_fail@plt+0x4a0>
   11450:	mov	r9, r4
   11454:	mov	r6, #0
   11458:	strd	sl, [sp, #28]
   1145c:	str	r5, [sp, #36]	; 0x24
   11460:	add	r5, sp, #12
   11464:	ldm	r5, {r5, sl, fp}
   11468:	b	11498 <__assert_fail@plt+0x598>
   1146c:	ldr	r3, [r8, #20]
   11470:	ldr	r2, [r8, #24]
   11474:	cmp	r3, r2
   11478:	addcc	r2, r3, #1
   1147c:	strcc	r2, [r8, #20]
   11480:	movcc	r2, #10
   11484:	strbcc	r2, [r3]
   11488:	bcs	114d8 <__assert_fail@plt+0x5d8>
   1148c:	cmp	r6, r7
   11490:	bge	11518 <__assert_fail@plt+0x618>
   11494:	mov	r9, r4
   11498:	sub	r4, r5, r4
   1149c:	sub	r3, r7, r6
   114a0:	cmp	r3, r4
   114a4:	movlt	r4, r3
   114a8:	cmp	r4, #0
   114ac:	beq	1146c <__assert_fail@plt+0x56c>
   114b0:	mov	r2, r4
   114b4:	mov	r1, #1
   114b8:	ldr	r3, [fp]
   114bc:	add	r0, sl, r6
   114c0:	bl	10d14 <fwrite_unlocked@plt>
   114c4:	cmp	r4, r0
   114c8:	bhi	11560 <__assert_fail@plt+0x660>
   114cc:	add	r6, r6, r4
   114d0:	add	r4, r4, r9
   114d4:	b	1148c <__assert_fail@plt+0x58c>
   114d8:	mov	r1, #10
   114dc:	mov	r0, r8
   114e0:	bl	10e88 <__overflow@plt>
   114e4:	cmn	r0, #1
   114e8:	bne	1148c <__assert_fail@plt+0x58c>
   114ec:	bl	10e1c <__errno_location@plt>
   114f0:	ldr	r5, [r0]
   114f4:	mov	r2, #5
   114f8:	movw	r1, #27440	; 0x6b30
   114fc:	movt	r1, #1
   11500:	mov	r0, r4
   11504:	bl	10d38 <dcgettext@plt>
   11508:	mov	r2, r0
   1150c:	mov	r0, #1
   11510:	mov	r1, r5
   11514:	bl	10da4 <error@plt>
   11518:	ldrd	sl, [sp, #28]
   1151c:	ldr	r5, [sp, #36]	; 0x24
   11520:	b	11438 <__assert_fail@plt+0x538>
   11524:	ldr	r3, [r8, #20]
   11528:	ldr	r2, [r8, #24]
   1152c:	cmp	r3, r2
   11530:	addcc	r1, r3, #1
   11534:	movcc	r2, #10
   11538:	strcc	r1, [r8, #20]
   1153c:	strbcc	r2, [r3]
   11540:	bcs	1154c <__assert_fail@plt+0x64c>
   11544:	ldr	r3, [sl]
   11548:	b	113b0 <__assert_fail@plt+0x4b0>
   1154c:	mov	r0, r8
   11550:	mov	r1, #10
   11554:	bl	10e88 <__overflow@plt>
   11558:	cmn	r0, #1
   1155c:	bne	11544 <__assert_fail@plt+0x644>
   11560:	bl	10e1c <__errno_location@plt>
   11564:	movw	r1, #27440	; 0x6b30
   11568:	movt	r1, #1
   1156c:	b	113c4 <__assert_fail@plt+0x4c4>
   11570:	mov	r2, #5
   11574:	movw	r1, #27452	; 0x6b3c
   11578:	movt	r1, #1
   1157c:	mov	r0, r9
   11580:	bl	10d38 <dcgettext@plt>
   11584:	mov	r2, r0
   11588:	mov	r1, r9
   1158c:	mov	r0, #1
   11590:	bl	10da4 <error@plt>
   11594:	bl	10e1c <__errno_location@plt>
   11598:	ldr	r4, [r0]
   1159c:	mov	r1, #3
   115a0:	mov	r0, sl
   115a4:	ldr	r2, [sp, #24]
   115a8:	bl	147f8 <__assert_fail@plt+0x38f8>
   115ac:	mov	r3, r0
   115b0:	movw	r2, #27376	; 0x6af0
   115b4:	movt	r2, #1
   115b8:	mov	r0, #1
   115bc:	mov	r1, r4
   115c0:	bl	10da4 <error@plt>
   115c4:	bl	10e1c <__errno_location@plt>
   115c8:	movw	r1, #27440	; 0x6b30
   115cc:	movt	r1, #1
   115d0:	ldr	r4, [r0]
   115d4:	mov	r2, r6
   115d8:	b	113cc <__assert_fail@plt+0x4cc>
   115dc:	ldrdeq	r6, [r1], -r4
   115e0:	mov	fp, #0
   115e4:	mov	lr, #0
   115e8:	pop	{r1}		; (ldr r1, [sp], #4)
   115ec:	mov	r2, sp
   115f0:	push	{r2}		; (str r2, [sp, #-4]!)
   115f4:	push	{r0}		; (str r0, [sp, #-4]!)
   115f8:	ldr	ip, [pc, #16]	; 11610 <__assert_fail@plt+0x710>
   115fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11600:	ldr	r0, [pc, #12]	; 11614 <__assert_fail@plt+0x714>
   11604:	ldr	r3, [pc, #12]	; 11618 <__assert_fail@plt+0x718>
   11608:	bl	10dbc <__libc_start_main@plt>
   1160c:	bl	10ef4 <abort@plt>
   11610:	andeq	r6, r1, r4, ror r5
   11614:	andeq	r0, r1, ip, lsl #30
   11618:	andeq	r6, r1, r4, lsl r5
   1161c:	ldr	r3, [pc, #20]	; 11638 <__assert_fail@plt+0x738>
   11620:	ldr	r2, [pc, #20]	; 1163c <__assert_fail@plt+0x73c>
   11624:	add	r3, pc, r3
   11628:	ldr	r2, [r3, r2]
   1162c:	cmp	r2, #0
   11630:	bxeq	lr
   11634:	b	10dd4 <__gmon_start__@plt>
   11638:	ldrdeq	r6, [r1], -r4
   1163c:	ldrdeq	r0, [r0], -ip
   11640:	ldr	r0, [pc, #24]	; 11660 <__assert_fail@plt+0x760>
   11644:	ldr	r3, [pc, #24]	; 11664 <__assert_fail@plt+0x764>
   11648:	cmp	r3, r0
   1164c:	bxeq	lr
   11650:	ldr	r3, [pc, #16]	; 11668 <__assert_fail@plt+0x768>
   11654:	cmp	r3, #0
   11658:	bxeq	lr
   1165c:	bx	r3
   11660:	andeq	r8, r2, r0, lsr r1
   11664:	andeq	r8, r2, r0, lsr r1
   11668:	andeq	r0, r0, r0
   1166c:	ldr	r0, [pc, #36]	; 11698 <__assert_fail@plt+0x798>
   11670:	ldr	r1, [pc, #36]	; 1169c <__assert_fail@plt+0x79c>
   11674:	sub	r1, r1, r0
   11678:	asr	r1, r1, #2
   1167c:	add	r1, r1, r1, lsr #31
   11680:	asrs	r1, r1, #1
   11684:	bxeq	lr
   11688:	ldr	r3, [pc, #16]	; 116a0 <__assert_fail@plt+0x7a0>
   1168c:	cmp	r3, #0
   11690:	bxeq	lr
   11694:	bx	r3
   11698:	andeq	r8, r2, r0, lsr r1
   1169c:	andeq	r8, r2, r0, lsr r1
   116a0:	andeq	r0, r0, r0
   116a4:	push	{r4, lr}
   116a8:	ldr	r4, [pc, #24]	; 116c8 <__assert_fail@plt+0x7c8>
   116ac:	ldrb	r3, [r4]
   116b0:	cmp	r3, #0
   116b4:	popne	{r4, pc}
   116b8:	bl	11640 <__assert_fail@plt+0x740>
   116bc:	mov	r3, #1
   116c0:	strb	r3, [r4]
   116c4:	pop	{r4, pc}
   116c8:	andeq	r8, r2, r4, asr r1
   116cc:	b	1166c <__assert_fail@plt+0x76c>
   116d0:	str	r4, [sp, #-8]!
   116d4:	mov	r4, r1
   116d8:	str	lr, [sp, #4]
   116dc:	bl	1249c <__assert_fail@plt+0x159c>
   116e0:	cmp	r0, #0
   116e4:	beq	11758 <__assert_fail@plt+0x858>
   116e8:	movw	r1, #26164	; 0x6634
   116ec:	movt	r1, #1
   116f0:	mov	r0, r4
   116f4:	bl	10cb4 <strcmp@plt>
   116f8:	mov	r5, r0
   116fc:	bl	10e1c <__errno_location@plt>
   11700:	cmp	r5, #0
   11704:	ldr	r6, [r0]
   11708:	bne	11730 <__assert_fail@plt+0x830>
   1170c:	mov	r2, #5
   11710:	mov	r0, r5
   11714:	movw	r1, #26168	; 0x6638
   11718:	movt	r1, #1
   1171c:	bl	10d38 <dcgettext@plt>
   11720:	mov	r2, r0
   11724:	mov	r1, r6
   11728:	mov	r0, #1
   1172c:	bl	10da4 <error@plt>
   11730:	mov	r2, r4
   11734:	mov	r1, #3
   11738:	mov	r0, #0
   1173c:	bl	147f8 <__assert_fail@plt+0x38f8>
   11740:	mov	r3, r0
   11744:	movw	r2, #27376	; 0x6af0
   11748:	movt	r2, #1
   1174c:	mov	r1, r6
   11750:	mov	r0, #1
   11754:	bl	10da4 <error@plt>
   11758:	bl	10df8 <exit@plt>
   1175c:	subs	r6, r0, #0
   11760:	str	r7, [sp, #-8]!
   11764:	str	lr, [sp, #4]
   11768:	sub	sp, sp, #56	; 0x38
   1176c:	beq	117b4 <__assert_fail@plt+0x8b4>
   11770:	movw	r3, #33088	; 0x8140
   11774:	movt	r3, #2
   11778:	ldr	r4, [r3]
   1177c:	mov	r2, #5
   11780:	movw	r1, #26200	; 0x6658
   11784:	movt	r1, #1
   11788:	mov	r0, #0
   1178c:	bl	10d38 <dcgettext@plt>
   11790:	movw	r3, #33120	; 0x8160
   11794:	movt	r3, #2
   11798:	mov	r2, r0
   1179c:	mov	r1, #1
   117a0:	ldr	r3, [r3]
   117a4:	mov	r0, r4
   117a8:	bl	10e58 <__fprintf_chk@plt>
   117ac:	mov	r0, r6
   117b0:	bl	10df8 <exit@plt>
   117b4:	mov	r2, #5
   117b8:	movw	r1, #26240	; 0x6680
   117bc:	movt	r1, #1
   117c0:	movw	r7, #33100	; 0x814c
   117c4:	movt	r7, #2
   117c8:	bl	10d38 <dcgettext@plt>
   117cc:	movw	r3, #33120	; 0x8160
   117d0:	movt	r3, #2
   117d4:	mov	r1, r0
   117d8:	mov	r0, #1
   117dc:	ldr	r2, [r3]
   117e0:	bl	10e40 <__printf_chk@plt>
   117e4:	mov	r2, #5
   117e8:	movw	r1, #26272	; 0x66a0
   117ec:	movt	r1, #1
   117f0:	mov	r0, r6
   117f4:	bl	10d38 <dcgettext@plt>
   117f8:	mov	r1, r0
   117fc:	mov	r2, #32
   11800:	mov	r0, #1
   11804:	bl	10e40 <__printf_chk@plt>
   11808:	mov	r2, #5
   1180c:	movw	r1, #26344	; 0x66e8
   11810:	movt	r1, #1
   11814:	mov	r0, r6
   11818:	bl	10d38 <dcgettext@plt>
   1181c:	ldr	r1, [r7]
   11820:	bl	10ca8 <fputs_unlocked@plt>
   11824:	mov	r2, #5
   11828:	movw	r1, #26400	; 0x6720
   1182c:	movt	r1, #1
   11830:	mov	r0, r6
   11834:	bl	10d38 <dcgettext@plt>
   11838:	ldr	r1, [r7]
   1183c:	bl	10ca8 <fputs_unlocked@plt>
   11840:	mov	r2, #5
   11844:	movw	r1, #26476	; 0x676c
   11848:	movt	r1, #1
   1184c:	mov	r0, r6
   11850:	bl	10d38 <dcgettext@plt>
   11854:	ldr	r1, [r7]
   11858:	bl	10ca8 <fputs_unlocked@plt>
   1185c:	mov	r2, #5
   11860:	movw	r1, #26720	; 0x6860
   11864:	movt	r1, #1
   11868:	mov	r0, r6
   1186c:	bl	10d38 <dcgettext@plt>
   11870:	ldr	r1, [r7]
   11874:	bl	10ca8 <fputs_unlocked@plt>
   11878:	mov	r2, #5
   1187c:	movw	r1, #26768	; 0x6890
   11880:	movt	r1, #1
   11884:	mov	r0, r6
   11888:	bl	10d38 <dcgettext@plt>
   1188c:	ldr	r1, [r7]
   11890:	bl	10ca8 <fputs_unlocked@plt>
   11894:	mov	r2, #5
   11898:	movw	r1, #26824	; 0x68c8
   1189c:	movt	r1, #1
   118a0:	mov	r0, r6
   118a4:	bl	10d38 <dcgettext@plt>
   118a8:	movw	r3, #26192	; 0x6650
   118ac:	movt	r3, #1
   118b0:	mov	r1, r0
   118b4:	mov	r2, r3
   118b8:	mov	r0, #1
   118bc:	bl	10e40 <__printf_chk@plt>
   118c0:	movw	lr, #26012	; 0x659c
   118c4:	movt	lr, #1
   118c8:	ldr	ip, [lr]
   118cc:	ldr	r4, [lr, #4]
   118d0:	ldrd	r8, [lr, #8]
   118d4:	subs	r1, ip, #0
   118d8:	str	ip, [sp]
   118dc:	ldrd	r2, [lr, #16]
   118e0:	str	r4, [sp, #4]
   118e4:	ldrd	r4, [lr, #24]
   118e8:	strd	r8, [sp, #8]
   118ec:	ldrd	r8, [lr, #32]
   118f0:	strd	r2, [sp, #16]
   118f4:	ldrd	r2, [lr, #40]	; 0x28
   118f8:	strd	r4, [sp, #24]
   118fc:	ldrd	r4, [lr, #48]	; 0x30
   11900:	strd	r8, [sp, #32]
   11904:	strd	r2, [sp, #40]	; 0x28
   11908:	strd	r4, [sp, #48]	; 0x30
   1190c:	movwne	r5, #26192	; 0x6650
   11910:	mov	r4, sp
   11914:	movtne	r5, #1
   11918:	bne	11a10 <__assert_fail@plt+0xb10>
   1191c:	ldr	r4, [r4, #4]
   11920:	movw	r1, #27092	; 0x69d4
   11924:	movt	r1, #1
   11928:	mov	r2, #5
   1192c:	cmp	r4, #0
   11930:	beq	11a24 <__assert_fail@plt+0xb24>
   11934:	mov	r0, #0
   11938:	bl	10d38 <dcgettext@plt>
   1193c:	mov	r1, r0
   11940:	movw	r3, #27116	; 0x69ec
   11944:	movt	r3, #1
   11948:	movw	r2, #27156	; 0x6a14
   1194c:	movt	r2, #1
   11950:	mov	r0, #1
   11954:	bl	10e40 <__printf_chk@plt>
   11958:	mov	r1, #0
   1195c:	mov	r0, #5
   11960:	bl	10e94 <setlocale@plt>
   11964:	cmp	r0, #0
   11968:	movweq	r5, #26192	; 0x6650
   1196c:	movteq	r5, #1
   11970:	beq	11994 <__assert_fail@plt+0xa94>
   11974:	movw	r1, #27172	; 0x6a24
   11978:	movt	r1, #1
   1197c:	mov	r2, #3
   11980:	movw	r5, #26192	; 0x6650
   11984:	movt	r5, #1
   11988:	bl	10ee8 <strncmp@plt>
   1198c:	cmp	r0, #0
   11990:	bne	11adc <__assert_fail@plt+0xbdc>
   11994:	mov	r2, #5
   11998:	movw	r1, #27248	; 0x6a70
   1199c:	movt	r1, #1
   119a0:	mov	r0, #0
   119a4:	bl	10d38 <dcgettext@plt>
   119a8:	mov	r1, r0
   119ac:	movw	r3, #26192	; 0x6650
   119b0:	movt	r3, #1
   119b4:	movw	r2, #27116	; 0x69ec
   119b8:	movt	r2, #1
   119bc:	mov	r0, #1
   119c0:	bl	10e40 <__printf_chk@plt>
   119c4:	mov	r2, #5
   119c8:	movw	r1, #27276	; 0x6a8c
   119cc:	movt	r1, #1
   119d0:	mov	r0, #0
   119d4:	bl	10d38 <dcgettext@plt>
   119d8:	movw	r2, #27476	; 0x6b54
   119dc:	movt	r2, #1
   119e0:	cmp	r4, r5
   119e4:	movw	r3, #26764	; 0x688c
   119e8:	movt	r3, #1
   119ec:	mov	r1, r0
   119f0:	moveq	r3, r2
   119f4:	mov	r2, r4
   119f8:	mov	r0, #1
   119fc:	bl	10e40 <__printf_chk@plt>
   11a00:	b	117ac <__assert_fail@plt+0x8ac>
   11a04:	ldr	r1, [r4, #8]!
   11a08:	cmp	r1, #0
   11a0c:	beq	1191c <__assert_fail@plt+0xa1c>
   11a10:	mov	r0, r5
   11a14:	bl	10cb4 <strcmp@plt>
   11a18:	cmp	r0, #0
   11a1c:	bne	11a04 <__assert_fail@plt+0xb04>
   11a20:	b	1191c <__assert_fail@plt+0xa1c>
   11a24:	mov	r0, r4
   11a28:	bl	10d38 <dcgettext@plt>
   11a2c:	mov	r1, r0
   11a30:	movw	r3, #27116	; 0x69ec
   11a34:	movt	r3, #1
   11a38:	movw	r2, #27156	; 0x6a14
   11a3c:	movt	r2, #1
   11a40:	mov	r0, #1
   11a44:	bl	10e40 <__printf_chk@plt>
   11a48:	mov	r1, r4
   11a4c:	mov	r0, #5
   11a50:	bl	10e94 <setlocale@plt>
   11a54:	cmp	r0, #0
   11a58:	beq	11a74 <__assert_fail@plt+0xb74>
   11a5c:	movw	r1, #27172	; 0x6a24
   11a60:	movt	r1, #1
   11a64:	mov	r2, #3
   11a68:	bl	10ee8 <strncmp@plt>
   11a6c:	cmp	r0, #0
   11a70:	bne	11ad0 <__assert_fail@plt+0xbd0>
   11a74:	mov	r2, #5
   11a78:	movw	r1, #27248	; 0x6a70
   11a7c:	movt	r1, #1
   11a80:	mov	r0, #0
   11a84:	bl	10d38 <dcgettext@plt>
   11a88:	mov	r1, r0
   11a8c:	movw	r3, #26192	; 0x6650
   11a90:	movt	r3, #1
   11a94:	movw	r2, #27116	; 0x69ec
   11a98:	movt	r2, #1
   11a9c:	mov	r0, #1
   11aa0:	bl	10e40 <__printf_chk@plt>
   11aa4:	movw	r1, #27276	; 0x6a8c
   11aa8:	movt	r1, #1
   11aac:	mov	r2, #5
   11ab0:	mov	r0, #0
   11ab4:	bl	10d38 <dcgettext@plt>
   11ab8:	movw	r4, #26192	; 0x6650
   11abc:	movt	r4, #1
   11ac0:	movw	r3, #27476	; 0x6b54
   11ac4:	movt	r3, #1
   11ac8:	mov	r1, r0
   11acc:	b	119f4 <__assert_fail@plt+0xaf4>
   11ad0:	movw	r5, #26192	; 0x6650
   11ad4:	movt	r5, #1
   11ad8:	mov	r4, r5
   11adc:	mov	r2, #5
   11ae0:	movw	r1, #27176	; 0x6a28
   11ae4:	movt	r1, #1
   11ae8:	mov	r0, #0
   11aec:	bl	10d38 <dcgettext@plt>
   11af0:	ldr	r1, [r7]
   11af4:	bl	10ca8 <fputs_unlocked@plt>
   11af8:	b	11994 <__assert_fail@plt+0xa94>
   11afc:	cmp	r1, #7
   11b00:	ble	11c9c <__assert_fail@plt+0xd9c>
   11b04:	strd	r4, [sp, #-16]!
   11b08:	movw	r1, #27640	; 0x6bf8
   11b0c:	movt	r1, #1
   11b10:	str	r6, [sp, #8]
   11b14:	str	lr, [sp, #12]
   11b18:	ldrb	ip, [r0]
   11b1c:	ldrsb	r4, [r1, ip]
   11b20:	cmp	r4, #0
   11b24:	blt	11c58 <__assert_fail@plt+0xd58>
   11b28:	ldrb	ip, [r0, #1]
   11b2c:	ldrsb	r5, [r1, ip]
   11b30:	cmp	r5, #0
   11b34:	blt	11c58 <__assert_fail@plt+0xd58>
   11b38:	ldr	lr, [r3]
   11b3c:	ldr	ip, [r2]
   11b40:	cmp	lr, #0
   11b44:	bne	11ca4 <__assert_fail@plt+0xda4>
   11b48:	ldrb	r4, [r0, #2]
   11b4c:	cmp	r4, #61	; 0x3d
   11b50:	beq	11c6c <__assert_fail@plt+0xd6c>
   11b54:	ldrsb	r4, [r1, r4]
   11b58:	cmp	r4, #0
   11b5c:	blt	11c84 <__assert_fail@plt+0xd84>
   11b60:	ldrb	r6, [r0, #3]
   11b64:	ldrsb	r6, [r1, r6]
   11b68:	cmp	r6, #0
   11b6c:	blt	11c84 <__assert_fail@plt+0xd84>
   11b70:	cmp	lr, #0
   11b74:	beq	11b94 <__assert_fail@plt+0xc94>
   11b78:	lsl	r4, r4, #1
   11b7c:	orr	r5, r4, r5, lsl #6
   11b80:	orr	r5, r5, r6, asr #4
   11b84:	strb	r5, [ip], #1
   11b88:	ldr	lr, [r3]
   11b8c:	sub	lr, lr, #1
   11b90:	str	lr, [r3]
   11b94:	ldrb	r4, [r0, #4]
   11b98:	cmp	r4, #61	; 0x3d
   11b9c:	beq	11cc0 <__assert_fail@plt+0xdc0>
   11ba0:	ldrsb	r4, [r1, r4]
   11ba4:	cmp	r4, #0
   11ba8:	blt	11c84 <__assert_fail@plt+0xd84>
   11bac:	cmp	lr, #0
   11bb0:	beq	11bcc <__assert_fail@plt+0xccc>
   11bb4:	asr	lr, r4, #1
   11bb8:	orr	r6, lr, r6, lsl #4
   11bbc:	strb	r6, [ip], #1
   11bc0:	ldr	lr, [r3]
   11bc4:	sub	lr, lr, #1
   11bc8:	str	lr, [r3]
   11bcc:	ldrb	r5, [r0, #5]
   11bd0:	cmp	r5, #61	; 0x3d
   11bd4:	beq	11ccc <__assert_fail@plt+0xdcc>
   11bd8:	ldrsb	r5, [r1, r5]
   11bdc:	cmp	r5, #0
   11be0:	blt	11c84 <__assert_fail@plt+0xd84>
   11be4:	ldrb	r6, [r0, #6]
   11be8:	ldrsb	r6, [r1, r6]
   11bec:	cmp	r6, #0
   11bf0:	blt	11c84 <__assert_fail@plt+0xd84>
   11bf4:	cmp	lr, #0
   11bf8:	beq	11c18 <__assert_fail@plt+0xd18>
   11bfc:	lsl	lr, r5, #2
   11c00:	orr	lr, lr, r4, lsl #7
   11c04:	orr	lr, lr, r6, asr #3
   11c08:	strb	lr, [ip], #1
   11c0c:	ldr	lr, [r3]
   11c10:	sub	lr, lr, #1
   11c14:	str	lr, [r3]
   11c18:	ldrb	r0, [r0, #7]
   11c1c:	cmp	r0, #61	; 0x3d
   11c20:	beq	11c4c <__assert_fail@plt+0xd4c>
   11c24:	ldrsb	r1, [r1, r0]
   11c28:	cmp	r1, #0
   11c2c:	blt	11c84 <__assert_fail@plt+0xd84>
   11c30:	cmp	lr, #0
   11c34:	beq	11c4c <__assert_fail@plt+0xd4c>
   11c38:	orr	r1, r1, r6, lsl #5
   11c3c:	strb	r1, [ip], #1
   11c40:	ldr	r1, [r3]
   11c44:	sub	r1, r1, #1
   11c48:	str	r1, [r3]
   11c4c:	mov	r0, #1
   11c50:	str	ip, [r2]
   11c54:	b	11c5c <__assert_fail@plt+0xd5c>
   11c58:	mov	r0, #0
   11c5c:	ldrd	r4, [sp]
   11c60:	ldr	r6, [sp, #8]
   11c64:	add	sp, sp, #12
   11c68:	pop	{pc}		; (ldr pc, [sp], #4)
   11c6c:	ldrb	r3, [r0, #3]
   11c70:	cmp	r3, #61	; 0x3d
   11c74:	bne	11c84 <__assert_fail@plt+0xd84>
   11c78:	ldrb	r3, [r0, #4]
   11c7c:	cmp	r3, #61	; 0x3d
   11c80:	beq	11cc0 <__assert_fail@plt+0xdc0>
   11c84:	ldrd	r4, [sp]
   11c88:	mov	r0, #0
   11c8c:	str	ip, [r2]
   11c90:	ldr	r6, [sp, #8]
   11c94:	add	sp, sp, #12
   11c98:	pop	{pc}		; (ldr pc, [sp], #4)
   11c9c:	mov	r0, #0
   11ca0:	bx	lr
   11ca4:	asr	lr, r5, #2
   11ca8:	orr	r4, lr, r4, lsl #3
   11cac:	strb	r4, [ip], #1
   11cb0:	ldr	lr, [r3]
   11cb4:	sub	lr, lr, #1
   11cb8:	str	lr, [r3]
   11cbc:	b	11b48 <__assert_fail@plt+0xc48>
   11cc0:	ldrb	r3, [r0, #5]
   11cc4:	cmp	r3, #61	; 0x3d
   11cc8:	bne	11c84 <__assert_fail@plt+0xd84>
   11ccc:	ldrb	r3, [r0, #6]
   11cd0:	cmp	r3, #61	; 0x3d
   11cd4:	bne	11c84 <__assert_fail@plt+0xd84>
   11cd8:	ldrb	r3, [r0, #7]
   11cdc:	cmp	r3, #61	; 0x3d
   11ce0:	beq	11c4c <__assert_fail@plt+0xd4c>
   11ce4:	b	11c84 <__assert_fail@plt+0xd84>
   11ce8:	add	r2, r2, #8
   11cec:	strd	r4, [sp, #-12]!
   11cf0:	mov	r5, #61	; 0x3d
   11cf4:	str	lr, [sp, #8]
   11cf8:	movw	lr, #27640	; 0x6bf8
   11cfc:	movt	lr, #1
   11d00:	b	11e00 <__assert_fail@plt+0xf00>
   11d04:	ldrb	r4, [r0, #1]
   11d08:	cmp	r3, #2
   11d0c:	add	ip, ip, r4, lsr #6
   11d10:	and	ip, ip, #31
   11d14:	add	ip, lr, ip
   11d18:	ldrb	ip, [ip, #256]	; 0x100
   11d1c:	strb	ip, [r2, #-7]
   11d20:	beq	11ebc <__assert_fail@plt+0xfbc>
   11d24:	ubfx	ip, r4, #1, #5
   11d28:	cmp	r3, #3
   11d2c:	add	ip, lr, ip
   11d30:	ldrb	ip, [ip, #256]	; 0x100
   11d34:	strb	ip, [r2, #-6]
   11d38:	beq	11ebc <__assert_fail@plt+0xfbc>
   11d3c:	cmp	r1, #2
   11d40:	lsl	r4, r4, #4
   11d44:	beq	11ea4 <__assert_fail@plt+0xfa4>
   11d48:	ldrb	ip, [r0, #2]
   11d4c:	cmp	r3, #4
   11d50:	add	r4, r4, ip, lsr #4
   11d54:	and	r4, r4, #31
   11d58:	add	r4, lr, r4
   11d5c:	ldrb	r4, [r4, #256]	; 0x100
   11d60:	strb	r4, [r2, #-5]
   11d64:	beq	11ebc <__assert_fail@plt+0xfbc>
   11d68:	cmp	r1, #3
   11d6c:	lsl	r4, ip, #1
   11d70:	beq	11ec8 <__assert_fail@plt+0xfc8>
   11d74:	ldrb	ip, [r0, #3]
   11d78:	cmp	r3, #5
   11d7c:	add	r4, r4, ip, lsr #7
   11d80:	and	r4, r4, #31
   11d84:	add	r4, lr, r4
   11d88:	ldrb	r4, [r4, #256]	; 0x100
   11d8c:	strb	r4, [r2, #-4]
   11d90:	beq	11ebc <__assert_fail@plt+0xfbc>
   11d94:	ubfx	r4, ip, #2, #5
   11d98:	cmp	r3, #6
   11d9c:	add	r4, lr, r4
   11da0:	ldrb	r4, [r4, #256]	; 0x100
   11da4:	strb	r4, [r2, #-3]
   11da8:	beq	11ebc <__assert_fail@plt+0xfbc>
   11dac:	cmp	r1, #4
   11db0:	lsl	ip, ip, #3
   11db4:	beq	11eec <__assert_fail@plt+0xfec>
   11db8:	ldrb	r4, [r0, #4]
   11dbc:	cmp	r3, #7
   11dc0:	add	ip, ip, r4, lsr #5
   11dc4:	and	ip, ip, #31
   11dc8:	add	ip, lr, ip
   11dcc:	ldrb	ip, [ip, #256]	; 0x100
   11dd0:	strb	ip, [r2, #-2]
   11dd4:	beq	11ebc <__assert_fail@plt+0xfbc>
   11dd8:	and	r4, r4, #31
   11ddc:	cmp	r3, #8
   11de0:	add	r4, lr, r4
   11de4:	ldrb	ip, [r4, #256]	; 0x100
   11de8:	strb	ip, [r2, #-1]
   11dec:	beq	11ebc <__assert_fail@plt+0xfbc>
   11df0:	subs	r1, r1, #5
   11df4:	addne	r0, r0, #5
   11df8:	sub	r3, r3, #8
   11dfc:	add	r2, r2, #8
   11e00:	adds	ip, r3, #0
   11e04:	movne	ip, #1
   11e08:	cmp	r1, #0
   11e0c:	moveq	ip, #0
   11e10:	cmp	ip, #0
   11e14:	beq	11f08 <__assert_fail@plt+0x1008>
   11e18:	ldrb	ip, [r0]
   11e1c:	cmp	r3, #1
   11e20:	add	r4, lr, ip, lsr #3
   11e24:	ldrb	r4, [r4, #256]	; 0x100
   11e28:	strb	r4, [r2, #-8]
   11e2c:	beq	11ebc <__assert_fail@plt+0xfbc>
   11e30:	cmp	r1, #1
   11e34:	lsl	ip, ip, #2
   11e38:	bne	11d04 <__assert_fail@plt+0xe04>
   11e3c:	and	ip, ip, #31
   11e40:	cmp	r3, #2
   11e44:	add	ip, lr, ip
   11e48:	ldrb	r1, [ip, #256]	; 0x100
   11e4c:	strb	r1, [r2, #-7]
   11e50:	beq	11ebc <__assert_fail@plt+0xfbc>
   11e54:	cmp	r3, #3
   11e58:	strb	r5, [r2, #-6]
   11e5c:	beq	11ebc <__assert_fail@plt+0xfbc>
   11e60:	cmp	r3, #4
   11e64:	strb	r5, [r2, #-5]
   11e68:	beq	11ebc <__assert_fail@plt+0xfbc>
   11e6c:	cmp	r3, #5
   11e70:	strb	r5, [r2, #-4]
   11e74:	beq	11ebc <__assert_fail@plt+0xfbc>
   11e78:	cmp	r3, #6
   11e7c:	strb	r5, [r2, #-3]
   11e80:	beq	11ebc <__assert_fail@plt+0xfbc>
   11e84:	cmp	r3, #7
   11e88:	strb	r5, [r2, #-2]
   11e8c:	beq	11ebc <__assert_fail@plt+0xfbc>
   11e90:	cmp	r3, #8
   11e94:	strb	r5, [r2, #-1]
   11e98:	beq	11ebc <__assert_fail@plt+0xfbc>
   11e9c:	mov	r1, #0
   11ea0:	b	11df8 <__assert_fail@plt+0xef8>
   11ea4:	and	r4, r4, #31
   11ea8:	cmp	r3, #4
   11eac:	add	r4, lr, r4
   11eb0:	ldrb	r1, [r4, #256]	; 0x100
   11eb4:	strb	r1, [r2, #-5]
   11eb8:	bne	11e6c <__assert_fail@plt+0xf6c>
   11ebc:	ldrd	r4, [sp]
   11ec0:	add	sp, sp, #8
   11ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ec8:	and	ip, r4, #31
   11ecc:	cmp	r3, #5
   11ed0:	add	ip, lr, ip
   11ed4:	ldrb	r1, [ip, #256]	; 0x100
   11ed8:	strb	r1, [r2, #-4]
   11edc:	bne	11e78 <__assert_fail@plt+0xf78>
   11ee0:	ldrd	r4, [sp]
   11ee4:	add	sp, sp, #8
   11ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   11eec:	and	ip, ip, #31
   11ef0:	cmp	r3, #7
   11ef4:	add	ip, lr, ip
   11ef8:	ldrb	r1, [ip, #256]	; 0x100
   11efc:	strb	r1, [r2, #-2]
   11f00:	beq	11ebc <__assert_fail@plt+0xfbc>
   11f04:	b	11e90 <__assert_fail@plt+0xf90>
   11f08:	cmp	r3, #0
   11f0c:	strbne	ip, [r2, #-8]
   11f10:	b	11ebc <__assert_fail@plt+0xfbc>
   11f14:	movw	ip, #26215	; 0x6667
   11f18:	movt	ip, #26214	; 0x6666
   11f1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11f20:	asr	r3, r1, #31
   11f24:	strd	r6, [sp, #8]
   11f28:	str	lr, [sp, #20]
   11f2c:	smull	lr, ip, ip, r1
   11f30:	str	r8, [sp, #16]
   11f34:	rsb	r3, r3, ip, asr #1
   11f38:	add	ip, r3, r3, lsl #2
   11f3c:	cmp	r1, ip
   11f40:	addne	r3, r3, #1
   11f44:	asr	r7, r3, #31
   11f48:	lsl	r5, r3, #3
   11f4c:	lsl	ip, r7, #3
   11f50:	orr	ip, ip, r3, lsr #29
   11f54:	cmp	ip, r5, asr #31
   11f58:	movne	r3, #1
   11f5c:	moveq	r3, #0
   11f60:	orrs	r3, r3, r1, lsr #31
   11f64:	beq	11f8c <__assert_fail@plt+0x108c>
   11f68:	mov	r3, #0
   11f6c:	mov	r5, r3
   11f70:	str	r3, [r2]
   11f74:	mov	r0, r5
   11f78:	ldrd	r4, [sp]
   11f7c:	ldrd	r6, [sp, #8]
   11f80:	ldr	r8, [sp, #16]
   11f84:	add	sp, sp, #20
   11f88:	pop	{pc}		; (ldr pc, [sp], #4)
   11f8c:	add	r8, r5, #1
   11f90:	mov	r7, r0
   11f94:	mov	r0, r8
   11f98:	mov	r6, r2
   11f9c:	mov	r4, r1
   11fa0:	bl	161e8 <__assert_fail@plt+0x52e8>
   11fa4:	cmp	r0, #0
   11fa8:	str	r0, [r6]
   11fac:	moveq	r5, r8
   11fb0:	beq	11f74 <__assert_fail@plt+0x1074>
   11fb4:	mov	r2, r0
   11fb8:	mov	r3, r8
   11fbc:	mov	r1, r4
   11fc0:	mov	r0, r7
   11fc4:	bl	11ce8 <__assert_fail@plt+0xde8>
   11fc8:	b	11f74 <__assert_fail@plt+0x1074>
   11fcc:	movw	r3, #27640	; 0x6bf8
   11fd0:	movt	r3, #1
   11fd4:	ldrb	r0, [r3, r0]
   11fd8:	mvn	r0, r0
   11fdc:	ubfx	r0, r0, #7, #1
   11fe0:	bx	lr
   11fe4:	mov	r3, #0
   11fe8:	str	r3, [r0]
   11fec:	bx	lr
   11ff0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11ff4:	strd	r6, [sp, #8]
   11ff8:	mov	r6, r1
   11ffc:	mov	r1, r2
   12000:	strd	r8, [sp, #16]
   12004:	subs	r8, r0, #0
   12008:	strd	sl, [sp, #24]
   1200c:	movne	fp, #1
   12010:	moveq	fp, #0
   12014:	str	lr, [sp, #32]
   12018:	sub	sp, sp, #20
   1201c:	str	r3, [sp, #4]
   12020:	ldr	r3, [sp, #56]	; 0x38
   12024:	ldr	r7, [r3]
   12028:	str	r7, [sp, #12]
   1202c:	beq	12244 <__assert_fail@plt+0x1344>
   12030:	ldr	sl, [r8]
   12034:	adds	r9, r2, #0
   12038:	movne	r9, #1
   1203c:	cmp	sl, #0
   12040:	moveq	sl, r9
   12044:	movne	sl, #0
   12048:	and	fp, fp, r9
   1204c:	b	1209c <__assert_fail@plt+0x119c>
   12050:	ldrb	r2, [r6]
   12054:	cmp	r2, #10
   12058:	beq	12184 <__assert_fail@plt+0x1284>
   1205c:	ldr	r2, [sp, #4]
   12060:	sub	r3, r7, r3
   12064:	cmp	r8, #0
   12068:	add	r4, r6, r1
   1206c:	str	r7, [sp, #12]
   12070:	sub	r3, r2, r3
   12074:	str	r3, [sp, #4]
   12078:	bne	12274 <__assert_fail@plt+0x1374>
   1207c:	mov	r0, r6
   12080:	add	r3, sp, #12
   12084:	add	r2, sp, #4
   12088:	bl	11afc <__assert_fail@plt+0xbfc>
   1208c:	cmp	r0, #0
   12090:	beq	1225c <__assert_fail@plt+0x135c>
   12094:	ldr	r7, [sp, #12]
   12098:	sub	r1, r4, r6
   1209c:	cmp	sl, #0
   120a0:	moveq	r3, r7
   120a4:	bne	12148 <__assert_fail@plt+0x1248>
   120a8:	cmp	r1, #0
   120ac:	moveq	r0, r9
   120b0:	movne	r0, #0
   120b4:	cmp	r0, #0
   120b8:	bne	12118 <__assert_fail@plt+0x1218>
   120bc:	cmp	r1, #0
   120c0:	bne	12050 <__assert_fail@plt+0x1150>
   120c4:	ldr	r2, [sp, #4]
   120c8:	sub	r3, r7, r3
   120cc:	cmp	r8, #0
   120d0:	str	r7, [sp, #12]
   120d4:	sub	r3, r2, r3
   120d8:	str	r3, [sp, #4]
   120dc:	beq	12250 <__assert_fail@plt+0x1350>
   120e0:	ldr	r3, [r8]
   120e4:	cmp	r3, #8
   120e8:	beq	1219c <__assert_fail@plt+0x129c>
   120ec:	mov	r1, r3
   120f0:	mov	r4, r6
   120f4:	cmp	r1, #0
   120f8:	add	r0, r8, #4
   120fc:	beq	12110 <__assert_fail@plt+0x1210>
   12100:	cmp	r1, #7
   12104:	bgt	12080 <__assert_fail@plt+0x1180>
   12108:	cmp	fp, #0
   1210c:	beq	12080 <__assert_fail@plt+0x1180>
   12110:	ldr	r3, [sp, #12]
   12114:	mov	r0, #1
   12118:	ldr	r2, [sp, #56]	; 0x38
   1211c:	ldr	r2, [r2]
   12120:	sub	r3, r2, r3
   12124:	ldr	r2, [sp, #56]	; 0x38
   12128:	str	r3, [r2]
   1212c:	add	sp, sp, #20
   12130:	ldrd	r4, [sp]
   12134:	ldrd	r6, [sp, #8]
   12138:	ldrd	r8, [sp, #16]
   1213c:	ldrd	sl, [sp, #24]
   12140:	add	sp, sp, #32
   12144:	pop	{pc}		; (ldr pc, [sp], #4)
   12148:	add	r5, r6, r1
   1214c:	b	12158 <__assert_fail@plt+0x1258>
   12150:	ldr	r7, [sp, #12]
   12154:	add	r6, r6, #8
   12158:	sub	r4, r5, r6
   1215c:	add	r3, sp, #12
   12160:	mov	r1, r4
   12164:	add	r2, sp, #4
   12168:	mov	r0, r6
   1216c:	bl	11afc <__assert_fail@plt+0xbfc>
   12170:	cmp	r0, #0
   12174:	bne	12150 <__assert_fail@plt+0x1250>
   12178:	mov	r1, r4
   1217c:	ldr	r3, [sp, #12]
   12180:	b	120a8 <__assert_fail@plt+0x11a8>
   12184:	cmp	r8, #0
   12188:	beq	12224 <__assert_fail@plt+0x1324>
   1218c:	add	r6, r6, #1
   12190:	sub	r1, r1, #1
   12194:	mov	r7, r3
   12198:	b	1209c <__assert_fail@plt+0x119c>
   1219c:	mov	r4, r6
   121a0:	mov	r2, #0
   121a4:	mov	r3, #1
   121a8:	mov	r5, r2
   121ac:	str	r2, [r8]
   121b0:	cmp	r1, #7
   121b4:	movle	r1, #0
   121b8:	andgt	r1, r3, #1
   121bc:	cmp	r1, #0
   121c0:	beq	121dc <__assert_fail@plt+0x12dc>
   121c4:	mov	r2, #8
   121c8:	mov	r1, #10
   121cc:	mov	r0, r6
   121d0:	bl	10e64 <memchr@plt>
   121d4:	cmp	r0, #0
   121d8:	beq	12264 <__assert_fail@plt+0x1364>
   121dc:	cmp	r4, r6
   121e0:	movls	r1, r5
   121e4:	bls	120f4 <__assert_fail@plt+0x11f4>
   121e8:	ldrb	r2, [r6], #1
   121ec:	add	r1, r5, #1
   121f0:	mov	r3, r8
   121f4:	cmp	r2, #10
   121f8:	beq	12210 <__assert_fail@plt+0x1310>
   121fc:	cmp	r1, #8
   12200:	str	r1, [r3], r5
   12204:	mov	r5, r1
   12208:	strb	r2, [r3, #4]
   1220c:	beq	120f4 <__assert_fail@plt+0x11f4>
   12210:	cmp	r4, r6
   12214:	bne	121e8 <__assert_fail@plt+0x12e8>
   12218:	mov	r1, r5
   1221c:	mov	r6, r4
   12220:	b	120f4 <__assert_fail@plt+0x11f4>
   12224:	ldr	r2, [sp, #4]
   12228:	sub	r3, r7, r3
   1222c:	add	r4, r6, r1
   12230:	mov	r0, r6
   12234:	str	r7, [sp, #12]
   12238:	sub	r3, r2, r3
   1223c:	str	r3, [sp, #4]
   12240:	b	12100 <__assert_fail@plt+0x1200>
   12244:	mov	sl, #1
   12248:	mov	r9, sl
   1224c:	b	12048 <__assert_fail@plt+0x1148>
   12250:	mov	r3, r7
   12254:	mov	r0, #1
   12258:	b	12118 <__assert_fail@plt+0x1218>
   1225c:	ldr	r3, [sp, #12]
   12260:	b	12118 <__assert_fail@plt+0x1218>
   12264:	mov	r1, #8
   12268:	mov	r0, r6
   1226c:	add	r6, r6, r1
   12270:	b	12080 <__assert_fail@plt+0x1180>
   12274:	ldr	r5, [r8]
   12278:	cmp	r5, #8
   1227c:	beq	121a0 <__assert_fail@plt+0x12a0>
   12280:	clz	r3, r5
   12284:	lsr	r3, r3, #5
   12288:	b	121b0 <__assert_fail@plt+0x12b0>
   1228c:	strd	r4, [sp, #-20]!	; 0xffffffec
   12290:	mov	r5, r3
   12294:	mov	r4, r2
   12298:	strd	r6, [sp, #8]
   1229c:	mov	r6, r0
   122a0:	asr	r0, r2, #3
   122a4:	str	lr, [sp, #16]
   122a8:	sub	sp, sp, #20
   122ac:	mov	r7, r1
   122b0:	add	r3, r0, #1
   122b4:	add	r3, r3, r3, lsl #2
   122b8:	mov	r0, r3
   122bc:	str	r3, [sp, #12]
   122c0:	bl	161e8 <__assert_fail@plt+0x52e8>
   122c4:	cmp	r0, #0
   122c8:	str	r0, [r5]
   122cc:	beq	12324 <__assert_fail@plt+0x1424>
   122d0:	add	ip, sp, #12
   122d4:	mov	r3, r0
   122d8:	mov	r2, r4
   122dc:	mov	r1, r7
   122e0:	mov	r0, r6
   122e4:	str	ip, [sp]
   122e8:	bl	11ff0 <__assert_fail@plt+0x10f0>
   122ec:	subs	r4, r0, #0
   122f0:	beq	1232c <__assert_fail@plt+0x142c>
   122f4:	ldr	r3, [sp, #40]	; 0x28
   122f8:	cmp	r3, #0
   122fc:	beq	12324 <__assert_fail@plt+0x1424>
   12300:	ldr	r3, [sp, #12]
   12304:	ldr	r2, [sp, #40]	; 0x28
   12308:	str	r3, [r2]
   1230c:	mov	r0, r4
   12310:	add	sp, sp, #20
   12314:	ldrd	r4, [sp]
   12318:	ldrd	r6, [sp, #8]
   1231c:	add	sp, sp, #16
   12320:	pop	{pc}		; (ldr pc, [sp], #4)
   12324:	mov	r4, #1
   12328:	b	1230c <__assert_fail@plt+0x140c>
   1232c:	ldr	r0, [r5]
   12330:	bl	125b0 <__assert_fail@plt+0x16b0>
   12334:	str	r4, [r5]
   12338:	b	1230c <__assert_fail@plt+0x140c>
   1233c:	movw	r3, #33112	; 0x8158
   12340:	movt	r3, #2
   12344:	str	r0, [r3]
   12348:	bx	lr
   1234c:	movw	r3, #33112	; 0x8158
   12350:	movt	r3, #2
   12354:	strb	r0, [r3, #4]
   12358:	bx	lr
   1235c:	movw	r3, #33100	; 0x814c
   12360:	movt	r3, #2
   12364:	strd	r4, [sp, #-16]!
   12368:	ldr	r0, [r3]
   1236c:	str	r6, [sp, #8]
   12370:	str	lr, [sp, #12]
   12374:	sub	sp, sp, #8
   12378:	bl	1627c <__assert_fail@plt+0x537c>
   1237c:	cmp	r0, #0
   12380:	beq	123ac <__assert_fail@plt+0x14ac>
   12384:	movw	r4, #33112	; 0x8158
   12388:	movt	r4, #2
   1238c:	ldrb	r6, [r4, #4]
   12390:	bl	10e1c <__errno_location@plt>
   12394:	mov	r5, r0
   12398:	cmp	r6, #0
   1239c:	beq	123d8 <__assert_fail@plt+0x14d8>
   123a0:	ldr	r3, [r0]
   123a4:	cmp	r3, #32
   123a8:	bne	123d8 <__assert_fail@plt+0x14d8>
   123ac:	movw	r3, #33088	; 0x8140
   123b0:	movt	r3, #2
   123b4:	ldr	r0, [r3]
   123b8:	bl	1627c <__assert_fail@plt+0x537c>
   123bc:	cmp	r0, #0
   123c0:	bne	12420 <__assert_fail@plt+0x1520>
   123c4:	add	sp, sp, #8
   123c8:	ldrd	r4, [sp]
   123cc:	ldr	r6, [sp, #8]
   123d0:	add	sp, sp, #12
   123d4:	pop	{pc}		; (ldr pc, [sp], #4)
   123d8:	movw	r1, #27440	; 0x6b30
   123dc:	movt	r1, #1
   123e0:	mov	r2, #5
   123e4:	mov	r0, #0
   123e8:	bl	10d38 <dcgettext@plt>
   123ec:	mov	r6, r0
   123f0:	ldr	r0, [r4]
   123f4:	cmp	r0, #0
   123f8:	beq	12430 <__assert_fail@plt+0x1530>
   123fc:	ldr	r4, [r5]
   12400:	bl	147e4 <__assert_fail@plt+0x38e4>
   12404:	mov	r3, r0
   12408:	movw	r2, #27372	; 0x6aec
   1240c:	movt	r2, #1
   12410:	mov	r0, #0
   12414:	str	r6, [sp]
   12418:	mov	r1, r4
   1241c:	bl	10da4 <error@plt>
   12420:	movw	r3, #33004	; 0x80ec
   12424:	movt	r3, #2
   12428:	ldr	r0, [r3]
   1242c:	bl	10cf0 <_exit@plt>
   12430:	mov	r3, r6
   12434:	movw	r2, #27376	; 0x6af0
   12438:	movt	r2, #1
   1243c:	ldr	r1, [r5]
   12440:	bl	10da4 <error@plt>
   12444:	b	12420 <__assert_fail@plt+0x1520>
   12448:	b	10cc0 <posix_fadvise64@plt>
   1244c:	cmp	r0, #0
   12450:	bxeq	lr
   12454:	str	r4, [sp, #-16]!
   12458:	mov	r4, r1
   1245c:	strd	r6, [sp, #4]
   12460:	mov	r6, #0
   12464:	mov	r7, #0
   12468:	str	lr, [sp, #12]
   1246c:	sub	sp, sp, #16
   12470:	bl	10e4c <fileno@plt>
   12474:	mov	r2, r6
   12478:	mov	r3, r7
   1247c:	strd	r6, [sp]
   12480:	str	r4, [sp, #8]
   12484:	bl	10cc0 <posix_fadvise64@plt>
   12488:	add	sp, sp, #16
   1248c:	ldr	r4, [sp]
   12490:	ldrd	r6, [sp, #4]
   12494:	add	sp, sp, #12
   12498:	pop	{pc}		; (ldr pc, [sp], #4)
   1249c:	strd	r4, [sp, #-12]!
   124a0:	mov	r4, r0
   124a4:	str	lr, [sp, #8]
   124a8:	sub	sp, sp, #12
   124ac:	bl	10e4c <fileno@plt>
   124b0:	cmp	r0, #0
   124b4:	mov	r0, r4
   124b8:	blt	1253c <__assert_fail@plt+0x163c>
   124bc:	bl	10dc8 <__freading@plt>
   124c0:	cmp	r0, #0
   124c4:	bne	12508 <__assert_fail@plt+0x1608>
   124c8:	mov	r0, r4
   124cc:	bl	12550 <__assert_fail@plt+0x1650>
   124d0:	cmp	r0, #0
   124d4:	beq	12538 <__assert_fail@plt+0x1638>
   124d8:	bl	10e1c <__errno_location@plt>
   124dc:	mov	r5, r0
   124e0:	mov	r0, r4
   124e4:	ldr	r4, [r5]
   124e8:	bl	10e70 <fclose@plt>
   124ec:	cmp	r4, #0
   124f0:	mvnne	r0, #0
   124f4:	strne	r4, [r5]
   124f8:	add	sp, sp, #12
   124fc:	ldrd	r4, [sp]
   12500:	add	sp, sp, #8
   12504:	pop	{pc}		; (ldr pc, [sp], #4)
   12508:	mov	r0, r4
   1250c:	bl	10e4c <fileno@plt>
   12510:	mov	r1, #1
   12514:	mov	r2, #0
   12518:	mov	r3, #0
   1251c:	str	r1, [sp]
   12520:	bl	10d74 <lseek64@plt>
   12524:	mvn	r3, #0
   12528:	mvn	r2, #0
   1252c:	cmp	r1, r3
   12530:	cmpeq	r0, r2
   12534:	bne	124c8 <__assert_fail@plt+0x15c8>
   12538:	mov	r0, r4
   1253c:	add	sp, sp, #12
   12540:	ldrd	r4, [sp]
   12544:	ldr	lr, [sp, #8]
   12548:	add	sp, sp, #12
   1254c:	b	10e70 <fclose@plt>
   12550:	str	r4, [sp, #-8]!
   12554:	subs	r4, r0, #0
   12558:	str	lr, [sp, #4]
   1255c:	sub	sp, sp, #8
   12560:	beq	1257c <__assert_fail@plt+0x167c>
   12564:	bl	10dc8 <__freading@plt>
   12568:	cmp	r0, #0
   1256c:	beq	1257c <__assert_fail@plt+0x167c>
   12570:	ldr	r3, [r4]
   12574:	tst	r3, #256	; 0x100
   12578:	bne	12594 <__assert_fail@plt+0x1694>
   1257c:	mov	r0, r4
   12580:	add	sp, sp, #8
   12584:	ldr	r4, [sp]
   12588:	ldr	lr, [sp, #4]
   1258c:	add	sp, sp, #8
   12590:	b	10ccc <fflush@plt>
   12594:	mov	r1, #1
   12598:	mov	r2, #0
   1259c:	mov	r3, #0
   125a0:	mov	r0, r4
   125a4:	str	r1, [sp]
   125a8:	bl	12610 <__assert_fail@plt+0x1710>
   125ac:	b	1257c <__assert_fail@plt+0x167c>
   125b0:	strd	r4, [sp, #-12]!
   125b4:	mov	r5, r0
   125b8:	str	lr, [sp, #8]
   125bc:	sub	sp, sp, #12
   125c0:	bl	10e1c <__errno_location@plt>
   125c4:	mov	r4, r0
   125c8:	mov	r2, #0
   125cc:	ldr	r3, [r4]
   125d0:	mov	r0, r5
   125d4:	str	r2, [r4]
   125d8:	str	r3, [sp]
   125dc:	str	r3, [sp, #4]
   125e0:	bl	10ce4 <free@plt>
   125e4:	ldr	r3, [r4]
   125e8:	add	r2, sp, #8
   125ec:	clz	r3, r3
   125f0:	lsr	r3, r3, #5
   125f4:	add	r3, r2, r3, lsl #2
   125f8:	ldr	r3, [r3, #-8]
   125fc:	str	r3, [r4]
   12600:	add	sp, sp, #12
   12604:	ldrd	r4, [sp]
   12608:	add	sp, sp, #8
   1260c:	pop	{pc}		; (ldr pc, [sp], #4)
   12610:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12614:	mov	r4, r0
   12618:	ldr	ip, [r0, #4]
   1261c:	strd	r6, [sp, #8]
   12620:	str	lr, [sp, #20]
   12624:	ldr	lr, [r0, #8]
   12628:	str	r8, [sp, #16]
   1262c:	sub	sp, sp, #8
   12630:	ldr	r5, [sp, #32]
   12634:	cmp	lr, ip
   12638:	beq	12660 <__assert_fail@plt+0x1760>
   1263c:	mov	r0, r4
   12640:	str	r5, [sp, #32]
   12644:	add	sp, sp, #8
   12648:	ldrd	r4, [sp]
   1264c:	ldrd	r6, [sp, #8]
   12650:	ldr	r8, [sp, #16]
   12654:	ldr	lr, [sp, #20]
   12658:	add	sp, sp, #24
   1265c:	b	10e7c <fseeko64@plt>
   12660:	ldr	ip, [r0, #16]
   12664:	ldr	lr, [r0, #20]
   12668:	cmp	lr, ip
   1266c:	bne	1263c <__assert_fail@plt+0x173c>
   12670:	ldr	r8, [r0, #36]	; 0x24
   12674:	cmp	r8, #0
   12678:	bne	1263c <__assert_fail@plt+0x173c>
   1267c:	mov	r6, r2
   12680:	mov	r7, r3
   12684:	bl	10e4c <fileno@plt>
   12688:	mov	r2, r6
   1268c:	mov	r3, r7
   12690:	str	r5, [sp]
   12694:	bl	10d74 <lseek64@plt>
   12698:	mvn	r3, #0
   1269c:	mvn	r2, #0
   126a0:	cmp	r1, r3
   126a4:	cmpeq	r0, r2
   126a8:	beq	126d8 <__assert_fail@plt+0x17d8>
   126ac:	ldr	r3, [r4]
   126b0:	strd	r0, [r4, #80]	; 0x50
   126b4:	bic	r3, r3, #16
   126b8:	str	r3, [r4]
   126bc:	mov	r0, r8
   126c0:	add	sp, sp, #8
   126c4:	ldrd	r4, [sp]
   126c8:	ldrd	r6, [sp, #8]
   126cc:	ldr	r8, [sp, #16]
   126d0:	add	sp, sp, #20
   126d4:	pop	{pc}		; (ldr pc, [sp], #4)
   126d8:	mvn	r8, #0
   126dc:	b	126bc <__assert_fail@plt+0x17bc>
   126e0:	strd	r4, [sp, #-16]!
   126e4:	subs	r4, r0, #0
   126e8:	str	r6, [sp, #8]
   126ec:	str	lr, [sp, #12]
   126f0:	beq	12788 <__assert_fail@plt+0x1888>
   126f4:	mov	r1, #47	; 0x2f
   126f8:	bl	10ea0 <strrchr@plt>
   126fc:	subs	r5, r0, #0
   12700:	beq	12760 <__assert_fail@plt+0x1860>
   12704:	add	r6, r5, #1
   12708:	sub	r3, r6, r4
   1270c:	cmp	r3, #6
   12710:	ble	12760 <__assert_fail@plt+0x1860>
   12714:	movw	r1, #27984	; 0x6d50
   12718:	movt	r1, #1
   1271c:	mov	r2, #7
   12720:	sub	r0, r5, #6
   12724:	bl	10ee8 <strncmp@plt>
   12728:	cmp	r0, #0
   1272c:	bne	12760 <__assert_fail@plt+0x1860>
   12730:	movw	r1, #27992	; 0x6d58
   12734:	movt	r1, #1
   12738:	mov	r2, #3
   1273c:	mov	r0, r6
   12740:	bl	10ee8 <strncmp@plt>
   12744:	cmp	r0, #0
   12748:	movne	r4, r6
   1274c:	bne	12760 <__assert_fail@plt+0x1860>
   12750:	add	r4, r5, #4
   12754:	movw	r3, #33072	; 0x8130
   12758:	movt	r3, #2
   1275c:	str	r4, [r3]
   12760:	movw	r2, #33120	; 0x8160
   12764:	movt	r2, #2
   12768:	ldr	r6, [sp, #8]
   1276c:	movw	r3, #33076	; 0x8134
   12770:	movt	r3, #2
   12774:	str	r4, [r2]
   12778:	str	r4, [r3]
   1277c:	ldrd	r4, [sp]
   12780:	add	sp, sp, #12
   12784:	pop	{pc}		; (ldr pc, [sp], #4)
   12788:	movw	r3, #33088	; 0x8140
   1278c:	movt	r3, #2
   12790:	movw	r0, #27928	; 0x6d18
   12794:	movt	r0, #1
   12798:	ldr	r3, [r3]
   1279c:	mov	r2, #55	; 0x37
   127a0:	mov	r1, #1
   127a4:	bl	10d68 <fwrite@plt>
   127a8:	bl	10ef4 <abort@plt>
   127ac:	strd	r4, [sp, #-16]!
   127b0:	mov	r4, #0
   127b4:	mov	r5, #0
   127b8:	cmp	r1, #10
   127bc:	str	r6, [sp, #8]
   127c0:	strd	r4, [r0]
   127c4:	strd	r4, [r0, #8]
   127c8:	str	lr, [sp, #12]
   127cc:	strd	r4, [r0, #16]
   127d0:	strd	r4, [r0, #24]
   127d4:	strd	r4, [r0, #32]
   127d8:	strd	r4, [r0, #40]	; 0x28
   127dc:	beq	127f4 <__assert_fail@plt+0x18f4>
   127e0:	ldrd	r4, [sp]
   127e4:	str	r1, [r0]
   127e8:	ldr	r6, [sp, #8]
   127ec:	add	sp, sp, #12
   127f0:	pop	{pc}		; (ldr pc, [sp], #4)
   127f4:	bl	10ef4 <abort@plt>
   127f8:	mov	r2, #5
   127fc:	strd	r4, [sp, #-16]!
   12800:	mov	r5, r0
   12804:	str	r6, [sp, #8]
   12808:	mov	r6, r1
   1280c:	mov	r1, r0
   12810:	mov	r0, #0
   12814:	str	lr, [sp, #12]
   12818:	bl	10d38 <dcgettext@plt>
   1281c:	cmp	r5, r0
   12820:	mov	r4, r0
   12824:	beq	1283c <__assert_fail@plt+0x193c>
   12828:	mov	r0, r4
   1282c:	ldrd	r4, [sp]
   12830:	ldr	r6, [sp, #8]
   12834:	add	sp, sp, #12
   12838:	pop	{pc}		; (ldr pc, [sp], #4)
   1283c:	bl	16304 <__assert_fail@plt+0x5404>
   12840:	ldrb	r3, [r0]
   12844:	bic	r3, r3, #32
   12848:	cmp	r3, #85	; 0x55
   1284c:	bne	128b4 <__assert_fail@plt+0x19b4>
   12850:	ldrb	r3, [r0, #1]
   12854:	bic	r3, r3, #32
   12858:	cmp	r3, #84	; 0x54
   1285c:	bne	12934 <__assert_fail@plt+0x1a34>
   12860:	ldrb	r3, [r0, #2]
   12864:	bic	r3, r3, #32
   12868:	cmp	r3, #70	; 0x46
   1286c:	bne	12934 <__assert_fail@plt+0x1a34>
   12870:	ldrb	r3, [r0, #3]
   12874:	cmp	r3, #45	; 0x2d
   12878:	bne	12934 <__assert_fail@plt+0x1a34>
   1287c:	ldrb	r3, [r0, #4]
   12880:	cmp	r3, #56	; 0x38
   12884:	bne	12934 <__assert_fail@plt+0x1a34>
   12888:	ldrb	r3, [r0, #5]
   1288c:	cmp	r3, #0
   12890:	bne	12934 <__assert_fail@plt+0x1a34>
   12894:	ldrb	r2, [r4]
   12898:	movw	r3, #28084	; 0x6db4
   1289c:	movt	r3, #1
   128a0:	movw	r4, #28096	; 0x6dc0
   128a4:	movt	r4, #1
   128a8:	cmp	r2, #96	; 0x60
   128ac:	movne	r4, r3
   128b0:	b	12828 <__assert_fail@plt+0x1928>
   128b4:	cmp	r3, #71	; 0x47
   128b8:	bne	12934 <__assert_fail@plt+0x1a34>
   128bc:	ldrb	r3, [r0, #1]
   128c0:	bic	r3, r3, #32
   128c4:	cmp	r3, #66	; 0x42
   128c8:	bne	12934 <__assert_fail@plt+0x1a34>
   128cc:	ldrb	r3, [r0, #2]
   128d0:	cmp	r3, #49	; 0x31
   128d4:	bne	12934 <__assert_fail@plt+0x1a34>
   128d8:	ldrb	r3, [r0, #3]
   128dc:	cmp	r3, #56	; 0x38
   128e0:	bne	12934 <__assert_fail@plt+0x1a34>
   128e4:	ldrb	r3, [r0, #4]
   128e8:	cmp	r3, #48	; 0x30
   128ec:	bne	12934 <__assert_fail@plt+0x1a34>
   128f0:	ldrb	r3, [r0, #5]
   128f4:	cmp	r3, #51	; 0x33
   128f8:	bne	12934 <__assert_fail@plt+0x1a34>
   128fc:	ldrb	r3, [r0, #6]
   12900:	cmp	r3, #48	; 0x30
   12904:	bne	12934 <__assert_fail@plt+0x1a34>
   12908:	ldrb	r3, [r0, #7]
   1290c:	cmp	r3, #0
   12910:	bne	12934 <__assert_fail@plt+0x1a34>
   12914:	ldrb	r2, [r4]
   12918:	movw	r3, #28088	; 0x6db8
   1291c:	movt	r3, #1
   12920:	movw	r4, #28092	; 0x6dbc
   12924:	movt	r4, #1
   12928:	cmp	r2, #96	; 0x60
   1292c:	movne	r4, r3
   12930:	b	12828 <__assert_fail@plt+0x1928>
   12934:	movw	r3, #28100	; 0x6dc4
   12938:	movt	r3, #1
   1293c:	cmp	r6, #9
   12940:	movw	r4, #28080	; 0x6db0
   12944:	movt	r4, #1
   12948:	movne	r4, r3
   1294c:	b	12828 <__assert_fail@plt+0x1928>
   12950:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12954:	strd	r6, [sp, #8]
   12958:	strd	r8, [sp, #16]
   1295c:	strd	sl, [sp, #24]
   12960:	mov	fp, r0
   12964:	mov	sl, r1
   12968:	str	lr, [sp, #32]
   1296c:	sub	sp, sp, #116	; 0x74
   12970:	ldr	r8, [sp, #152]	; 0x98
   12974:	str	r3, [sp, #28]
   12978:	ldr	r3, [sp, #156]	; 0x9c
   1297c:	str	r2, [sp, #32]
   12980:	and	r4, r3, #2
   12984:	ubfx	r3, r3, #1, #1
   12988:	str	r3, [sp, #44]	; 0x2c
   1298c:	bl	10d80 <__ctype_get_mb_cur_max@plt>
   12990:	str	r0, [sp, #64]	; 0x40
   12994:	cmp	r8, #10
   12998:	ldrls	pc, [pc, r8, lsl #2]
   1299c:	b	1410c <__assert_fail@plt+0x320c>
   129a0:	andeq	r2, r1, r4, lsr #27
   129a4:	andeq	r2, r1, r0, asr #28
   129a8:	andeq	r3, r1, ip, lsl r4
   129ac:	andeq	r2, r1, r0, ror #28
   129b0:	andeq	r2, r1, r8, lsl #26
   129b4:	andeq	r2, r1, r4, asr sp
   129b8:	ldrdeq	r2, [r1], -r4
   129bc:	andeq	r2, r1, r0, lsl lr
   129c0:	andeq	r2, r1, ip, asr #19
   129c4:	andeq	r2, r1, ip, asr #19
   129c8:	andeq	r2, r1, ip, asr #19
   129cc:	cmp	r8, #10
   129d0:	beq	129fc <__assert_fail@plt+0x1afc>
   129d4:	mov	r1, r8
   129d8:	movw	r0, #28104	; 0x6dc8
   129dc:	movt	r0, #1
   129e0:	bl	127f8 <__assert_fail@plt+0x18f8>
   129e4:	mov	r1, r8
   129e8:	str	r0, [sp, #164]	; 0xa4
   129ec:	movw	r0, #28100	; 0x6dc4
   129f0:	movt	r0, #1
   129f4:	bl	127f8 <__assert_fail@plt+0x18f8>
   129f8:	str	r0, [sp, #168]	; 0xa8
   129fc:	cmp	r4, #0
   12a00:	movne	r4, #0
   12a04:	beq	13de8 <__assert_fail@plt+0x2ee8>
   12a08:	mov	r3, #1
   12a0c:	mov	r5, #0
   12a10:	ldr	r0, [sp, #168]	; 0xa8
   12a14:	str	r3, [sp, #36]	; 0x24
   12a18:	str	r3, [sp, #40]	; 0x28
   12a1c:	str	r5, [sp, #68]	; 0x44
   12a20:	bl	10e04 <strlen@plt>
   12a24:	ldr	r3, [sp, #168]	; 0xa8
   12a28:	str	r5, [sp, #48]	; 0x30
   12a2c:	str	r0, [sp, #56]	; 0x38
   12a30:	str	r3, [sp, #60]	; 0x3c
   12a34:	str	r5, [sp, #72]	; 0x48
   12a38:	str	r8, [sp, #152]	; 0x98
   12a3c:	mov	r8, fp
   12a40:	mov	r9, #0
   12a44:	ldr	fp, [sp, #152]	; 0x98
   12a48:	ldr	r3, [sp, #28]
   12a4c:	cmn	r3, #1
   12a50:	beq	12fb0 <__assert_fail@plt+0x20b0>
   12a54:	ldr	r3, [sp, #28]
   12a58:	subs	r6, r3, r9
   12a5c:	movne	r6, #1
   12a60:	cmp	r6, #0
   12a64:	beq	12fc8 <__assert_fail@plt+0x20c8>
   12a68:	ldr	r0, [sp, #32]
   12a6c:	ldr	r7, [sp, #40]	; 0x28
   12a70:	add	r3, r0, r9
   12a74:	cmp	fp, #2
   12a78:	moveq	r7, #0
   12a7c:	andne	r7, r7, #1
   12a80:	str	r3, [sp, #52]	; 0x34
   12a84:	cmp	r7, #0
   12a88:	beq	13464 <__assert_fail@plt+0x2564>
   12a8c:	ldr	r2, [sp, #56]	; 0x38
   12a90:	cmp	r2, #0
   12a94:	beq	13700 <__assert_fail@plt+0x2800>
   12a98:	ldr	r1, [sp, #28]
   12a9c:	cmp	r2, #1
   12aa0:	mov	r3, r2
   12aa4:	movls	r3, #0
   12aa8:	movhi	r3, #1
   12aac:	add	r5, r9, r2
   12ab0:	cmn	r1, #1
   12ab4:	movne	r3, #0
   12ab8:	cmp	r3, #0
   12abc:	beq	12ac8 <__assert_fail@plt+0x1bc8>
   12ac0:	bl	10e04 <strlen@plt>
   12ac4:	str	r0, [sp, #28]
   12ac8:	ldr	r3, [sp, #28]
   12acc:	cmp	r5, r3
   12ad0:	bhi	13700 <__assert_fail@plt+0x2800>
   12ad4:	ldr	r0, [sp, #52]	; 0x34
   12ad8:	ldr	r2, [sp, #56]	; 0x38
   12adc:	ldr	r1, [sp, #60]	; 0x3c
   12ae0:	bl	10d20 <memcmp@plt>
   12ae4:	cmp	r0, #0
   12ae8:	bne	13700 <__assert_fail@plt+0x2800>
   12aec:	ldr	r3, [sp, #44]	; 0x2c
   12af0:	cmp	r3, #0
   12af4:	bne	14030 <__assert_fail@plt+0x3130>
   12af8:	ldr	r3, [sp, #52]	; 0x34
   12afc:	ldrb	r5, [r3]
   12b00:	cmp	r5, #126	; 0x7e
   12b04:	ldrls	pc, [pc, r5, lsl #2]
   12b08:	b	133c0 <__assert_fail@plt+0x24c0>
   12b0c:	andeq	r3, r1, r4, asr #5
   12b10:	andeq	r3, r1, r0, asr #7
   12b14:	andeq	r3, r1, r0, asr #7
   12b18:	andeq	r3, r1, r0, asr #7
   12b1c:	andeq	r3, r1, r0, asr #7
   12b20:	andeq	r3, r1, r0, asr #7
   12b24:	andeq	r3, r1, r0, asr #7
   12b28:	muleq	r1, r8, r2
   12b2c:	muleq	r1, r0, r2
   12b30:	ldrdeq	r3, [r1], -r8
   12b34:	andeq	r3, r1, r4, lsl #5
   12b38:	ldrdeq	r3, [r1], -r0
   12b3c:	andeq	r3, r1, r0, ror #4
   12b40:	andeq	r3, r1, ip, lsr #5
   12b44:	andeq	r3, r1, r0, asr #7
   12b48:	andeq	r3, r1, r0, asr #7
   12b4c:	andeq	r3, r1, r0, asr #7
   12b50:	andeq	r3, r1, r0, asr #7
   12b54:	andeq	r3, r1, r0, asr #7
   12b58:	andeq	r3, r1, r0, asr #7
   12b5c:	andeq	r3, r1, r0, asr #7
   12b60:	andeq	r3, r1, r0, asr #7
   12b64:	andeq	r3, r1, r0, asr #7
   12b68:	andeq	r3, r1, r0, asr #7
   12b6c:	andeq	r3, r1, r0, asr #7
   12b70:	andeq	r3, r1, r0, asr #7
   12b74:	andeq	r3, r1, r0, asr #7
   12b78:	andeq	r3, r1, r0, asr #7
   12b7c:	andeq	r3, r1, r0, asr #7
   12b80:	andeq	r3, r1, r0, asr #7
   12b84:	andeq	r3, r1, r0, asr #7
   12b88:	andeq	r3, r1, r0, asr #7
   12b8c:	muleq	r1, ip, r3
   12b90:	andeq	r3, r1, r4, lsr #5
   12b94:	andeq	r3, r1, r4, lsr #5
   12b98:	andeq	r3, r1, r0, lsl #7
   12b9c:	andeq	r3, r1, r4, lsr #5
   12ba0:			; <UNDEFINED> instruction: 0x000133b4
   12ba4:	andeq	r3, r1, r4, lsr #5
   12ba8:	andeq	r3, r1, r0, lsl #2
   12bac:	andeq	r3, r1, r4, lsr #5
   12bb0:	andeq	r3, r1, r4, lsr #5
   12bb4:	andeq	r3, r1, r4, lsr #5
   12bb8:			; <UNDEFINED> instruction: 0x000133b4
   12bbc:			; <UNDEFINED> instruction: 0x000133b4
   12bc0:			; <UNDEFINED> instruction: 0x000133b4
   12bc4:			; <UNDEFINED> instruction: 0x000133b4
   12bc8:			; <UNDEFINED> instruction: 0x000133b4
   12bcc:			; <UNDEFINED> instruction: 0x000133b4
   12bd0:			; <UNDEFINED> instruction: 0x000133b4
   12bd4:			; <UNDEFINED> instruction: 0x000133b4
   12bd8:			; <UNDEFINED> instruction: 0x000133b4
   12bdc:			; <UNDEFINED> instruction: 0x000133b4
   12be0:			; <UNDEFINED> instruction: 0x000133b4
   12be4:			; <UNDEFINED> instruction: 0x000133b4
   12be8:			; <UNDEFINED> instruction: 0x000133b4
   12bec:			; <UNDEFINED> instruction: 0x000133b4
   12bf0:			; <UNDEFINED> instruction: 0x000133b4
   12bf4:			; <UNDEFINED> instruction: 0x000133b4
   12bf8:	andeq	r3, r1, r4, lsr #5
   12bfc:	andeq	r3, r1, r4, lsr #5
   12c00:	andeq	r3, r1, r4, lsr #5
   12c04:	andeq	r3, r1, r4, lsr #5
   12c08:	ldrdeq	r3, [r1], -r4
   12c0c:	andeq	r3, r1, r0, asr #7
   12c10:			; <UNDEFINED> instruction: 0x000133b4
   12c14:			; <UNDEFINED> instruction: 0x000133b4
   12c18:			; <UNDEFINED> instruction: 0x000133b4
   12c1c:			; <UNDEFINED> instruction: 0x000133b4
   12c20:			; <UNDEFINED> instruction: 0x000133b4
   12c24:			; <UNDEFINED> instruction: 0x000133b4
   12c28:			; <UNDEFINED> instruction: 0x000133b4
   12c2c:			; <UNDEFINED> instruction: 0x000133b4
   12c30:			; <UNDEFINED> instruction: 0x000133b4
   12c34:			; <UNDEFINED> instruction: 0x000133b4
   12c38:			; <UNDEFINED> instruction: 0x000133b4
   12c3c:			; <UNDEFINED> instruction: 0x000133b4
   12c40:			; <UNDEFINED> instruction: 0x000133b4
   12c44:			; <UNDEFINED> instruction: 0x000133b4
   12c48:			; <UNDEFINED> instruction: 0x000133b4
   12c4c:			; <UNDEFINED> instruction: 0x000133b4
   12c50:			; <UNDEFINED> instruction: 0x000133b4
   12c54:			; <UNDEFINED> instruction: 0x000133b4
   12c58:			; <UNDEFINED> instruction: 0x000133b4
   12c5c:			; <UNDEFINED> instruction: 0x000133b4
   12c60:			; <UNDEFINED> instruction: 0x000133b4
   12c64:			; <UNDEFINED> instruction: 0x000133b4
   12c68:			; <UNDEFINED> instruction: 0x000133b4
   12c6c:			; <UNDEFINED> instruction: 0x000133b4
   12c70:			; <UNDEFINED> instruction: 0x000133b4
   12c74:			; <UNDEFINED> instruction: 0x000133b4
   12c78:	andeq	r3, r1, r4, lsr #5
   12c7c:	andeq	r3, r1, ip, ror r0
   12c80:			; <UNDEFINED> instruction: 0x000133b4
   12c84:	andeq	r3, r1, r4, lsr #5
   12c88:			; <UNDEFINED> instruction: 0x000133b4
   12c8c:	andeq	r3, r1, r4, lsr #5
   12c90:			; <UNDEFINED> instruction: 0x000133b4
   12c94:			; <UNDEFINED> instruction: 0x000133b4
   12c98:			; <UNDEFINED> instruction: 0x000133b4
   12c9c:			; <UNDEFINED> instruction: 0x000133b4
   12ca0:			; <UNDEFINED> instruction: 0x000133b4
   12ca4:			; <UNDEFINED> instruction: 0x000133b4
   12ca8:			; <UNDEFINED> instruction: 0x000133b4
   12cac:			; <UNDEFINED> instruction: 0x000133b4
   12cb0:			; <UNDEFINED> instruction: 0x000133b4
   12cb4:			; <UNDEFINED> instruction: 0x000133b4
   12cb8:			; <UNDEFINED> instruction: 0x000133b4
   12cbc:			; <UNDEFINED> instruction: 0x000133b4
   12cc0:			; <UNDEFINED> instruction: 0x000133b4
   12cc4:			; <UNDEFINED> instruction: 0x000133b4
   12cc8:			; <UNDEFINED> instruction: 0x000133b4
   12ccc:			; <UNDEFINED> instruction: 0x000133b4
   12cd0:			; <UNDEFINED> instruction: 0x000133b4
   12cd4:			; <UNDEFINED> instruction: 0x000133b4
   12cd8:			; <UNDEFINED> instruction: 0x000133b4
   12cdc:			; <UNDEFINED> instruction: 0x000133b4
   12ce0:			; <UNDEFINED> instruction: 0x000133b4
   12ce4:			; <UNDEFINED> instruction: 0x000133b4
   12ce8:			; <UNDEFINED> instruction: 0x000133b4
   12cec:			; <UNDEFINED> instruction: 0x000133b4
   12cf0:			; <UNDEFINED> instruction: 0x000133b4
   12cf4:			; <UNDEFINED> instruction: 0x000133b4
   12cf8:	andeq	r2, r1, r0, lsr #29
   12cfc:	andeq	r3, r1, r4, lsr #5
   12d00:	andeq	r2, r1, r0, lsr #29
   12d04:	andeq	r3, r1, r0, lsl #7
   12d08:	cmp	r4, #0
   12d0c:	moveq	r3, #1
   12d10:	streq	r3, [sp, #40]	; 0x28
   12d14:	beq	13428 <__assert_fail@plt+0x2528>
   12d18:	mov	r3, #0
   12d1c:	mov	r2, #1
   12d20:	mov	r4, r3
   12d24:	str	r2, [sp, #36]	; 0x24
   12d28:	str	r2, [sp, #44]	; 0x2c
   12d2c:	str	r2, [sp, #56]	; 0x38
   12d30:	str	r3, [sp, #68]	; 0x44
   12d34:	movw	r3, #28100	; 0x6dc4
   12d38:	movt	r3, #1
   12d3c:	str	r4, [sp, #40]	; 0x28
   12d40:	mov	r8, #2
   12d44:	str	r4, [sp, #48]	; 0x30
   12d48:	str	r3, [sp, #60]	; 0x3c
   12d4c:	str	r4, [sp, #72]	; 0x48
   12d50:	b	12a38 <__assert_fail@plt+0x1b38>
   12d54:	cmp	r4, #0
   12d58:	bne	13fa4 <__assert_fail@plt+0x30a4>
   12d5c:	cmp	sl, #0
   12d60:	beq	13d64 <__assert_fail@plt+0x2e64>
   12d64:	mov	r3, #34	; 0x22
   12d68:	mov	r1, r4
   12d6c:	mov	r2, #1
   12d70:	strb	r3, [fp]
   12d74:	movw	r3, #28080	; 0x6db0
   12d78:	movt	r3, #1
   12d7c:	mov	r4, r2
   12d80:	str	r2, [sp, #36]	; 0x24
   12d84:	str	r2, [sp, #40]	; 0x28
   12d88:	str	r1, [sp, #44]	; 0x2c
   12d8c:	str	r1, [sp, #48]	; 0x30
   12d90:	str	r2, [sp, #56]	; 0x38
   12d94:	str	r3, [sp, #60]	; 0x3c
   12d98:	str	r1, [sp, #68]	; 0x44
   12d9c:	str	r1, [sp, #72]	; 0x48
   12da0:	b	12a38 <__assert_fail@plt+0x1b38>
   12da4:	mov	r3, #0
   12da8:	mov	r4, r8
   12dac:	str	r3, [sp, #40]	; 0x28
   12db0:	str	r3, [sp, #44]	; 0x2c
   12db4:	str	r3, [sp, #48]	; 0x30
   12db8:	str	r8, [sp, #56]	; 0x38
   12dbc:	str	r3, [sp, #60]	; 0x3c
   12dc0:	str	r3, [sp, #68]	; 0x44
   12dc4:	mov	r3, #1
   12dc8:	str	r3, [sp, #36]	; 0x24
   12dcc:	str	r8, [sp, #72]	; 0x48
   12dd0:	b	12a38 <__assert_fail@plt+0x1b38>
   12dd4:	mov	r3, #1
   12dd8:	mov	r2, #0
   12ddc:	mov	r4, r2
   12de0:	mov	r8, #5
   12de4:	str	r3, [sp, #36]	; 0x24
   12de8:	str	r3, [sp, #40]	; 0x28
   12dec:	str	r3, [sp, #44]	; 0x2c
   12df0:	str	r2, [sp, #48]	; 0x30
   12df4:	str	r3, [sp, #56]	; 0x38
   12df8:	movw	r3, #28080	; 0x6db0
   12dfc:	movt	r3, #1
   12e00:	str	r3, [sp, #60]	; 0x3c
   12e04:	str	r2, [sp, #68]	; 0x44
   12e08:	str	r2, [sp, #72]	; 0x48
   12e0c:	b	12a38 <__assert_fail@plt+0x1b38>
   12e10:	mov	r3, #0
   12e14:	mov	r2, #1
   12e18:	mov	r4, r3
   12e1c:	str	r2, [sp, #36]	; 0x24
   12e20:	str	r2, [sp, #40]	; 0x28
   12e24:	str	r3, [sp, #44]	; 0x2c
   12e28:	str	r3, [sp, #48]	; 0x30
   12e2c:	str	r3, [sp, #56]	; 0x38
   12e30:	str	r3, [sp, #60]	; 0x3c
   12e34:	str	r3, [sp, #68]	; 0x44
   12e38:	str	r3, [sp, #72]	; 0x48
   12e3c:	b	12a38 <__assert_fail@plt+0x1b38>
   12e40:	mov	r2, #1
   12e44:	mov	r3, #0
   12e48:	mov	r4, r3
   12e4c:	str	r2, [sp, #36]	; 0x24
   12e50:	str	r2, [sp, #44]	; 0x2c
   12e54:	str	r8, [sp, #56]	; 0x38
   12e58:	str	r3, [sp, #68]	; 0x44
   12e5c:	b	12d34 <__assert_fail@plt+0x1e34>
   12e60:	mov	r3, #1
   12e64:	mov	r2, #0
   12e68:	mov	r4, r2
   12e6c:	mov	r8, #2
   12e70:	str	r3, [sp, #36]	; 0x24
   12e74:	str	r3, [sp, #40]	; 0x28
   12e78:	str	r3, [sp, #44]	; 0x2c
   12e7c:	str	r2, [sp, #48]	; 0x30
   12e80:	str	r3, [sp, #56]	; 0x38
   12e84:	movw	r3, #28100	; 0x6dc4
   12e88:	movt	r3, #1
   12e8c:	str	r3, [sp, #60]	; 0x3c
   12e90:	str	r2, [sp, #68]	; 0x44
   12e94:	str	r2, [sp, #72]	; 0x48
   12e98:	b	12a38 <__assert_fail@plt+0x1b38>
   12e9c:	mov	r7, #0
   12ea0:	ldr	r3, [sp, #28]
   12ea4:	cmn	r3, #1
   12ea8:	beq	13980 <__assert_fail@plt+0x2a80>
   12eac:	ldr	r3, [sp, #28]
   12eb0:	subs	r2, r3, #1
   12eb4:	movne	r2, #1
   12eb8:	sub	r3, fp, #2
   12ebc:	cmp	r2, #0
   12ec0:	clz	r3, r3
   12ec4:	lsr	r3, r3, #5
   12ec8:	bne	12ed4 <__assert_fail@plt+0x1fd4>
   12ecc:	cmp	r9, #0
   12ed0:	beq	136e0 <__assert_fail@plt+0x27e0>
   12ed4:	mov	r6, #0
   12ed8:	ldr	r2, [sp, #40]	; 0x28
   12edc:	eor	r2, r2, #1
   12ee0:	orrs	r3, r3, r2
   12ee4:	bne	130bc <__assert_fail@plt+0x21bc>
   12ee8:	ldr	r2, [sp, #160]	; 0xa0
   12eec:	cmp	r2, #0
   12ef0:	beq	12f10 <__assert_fail@plt+0x2010>
   12ef4:	ldr	r0, [sp, #160]	; 0xa0
   12ef8:	ubfx	r1, r5, #5, #8
   12efc:	and	r2, r5, #31
   12f00:	ldr	r1, [r0, r1, lsl #2]
   12f04:	lsr	r2, r1, r2
   12f08:	tst	r2, #1
   12f0c:	bne	12f18 <__assert_fail@plt+0x2018>
   12f10:	cmp	r7, #0
   12f14:	beq	13188 <__assert_fail@plt+0x2288>
   12f18:	ldr	r2, [sp, #44]	; 0x2c
   12f1c:	sub	r3, fp, #2
   12f20:	clz	r3, r3
   12f24:	lsr	r3, r3, #5
   12f28:	cmp	r2, #0
   12f2c:	bne	13cd4 <__assert_fail@plt+0x2dd4>
   12f30:	ldr	r2, [sp, #48]	; 0x30
   12f34:	eor	r2, r2, #1
   12f38:	ands	r3, r3, r2
   12f3c:	beq	12f74 <__assert_fail@plt+0x2074>
   12f40:	cmp	sl, r4
   12f44:	str	r3, [sp, #48]	; 0x30
   12f48:	movhi	r2, #39	; 0x27
   12f4c:	strbhi	r2, [r8, r4]
   12f50:	add	r2, r4, #1
   12f54:	cmp	sl, r2
   12f58:	movhi	r1, #36	; 0x24
   12f5c:	strbhi	r1, [r8, r2]
   12f60:	add	r2, r4, #2
   12f64:	add	r4, r4, #3
   12f68:	cmp	sl, r2
   12f6c:	movhi	r1, #39	; 0x27
   12f70:	strbhi	r1, [r8, r2]
   12f74:	cmp	r4, sl
   12f78:	add	r9, r9, #1
   12f7c:	movcc	r3, #92	; 0x5c
   12f80:	strbcc	r3, [r8, r4]
   12f84:	add	r4, r4, #1
   12f88:	cmp	r4, sl
   12f8c:	ldr	r3, [sp, #36]	; 0x24
   12f90:	strbcc	r5, [r8, r4]
   12f94:	cmp	r6, #0
   12f98:	add	r4, r4, #1
   12f9c:	moveq	r3, #0
   12fa0:	str	r3, [sp, #36]	; 0x24
   12fa4:	ldr	r3, [sp, #28]
   12fa8:	cmn	r3, #1
   12fac:	bne	12a54 <__assert_fail@plt+0x1b54>
   12fb0:	ldr	r3, [sp, #32]
   12fb4:	ldrb	r6, [r3, r9]
   12fb8:	adds	r6, r6, #0
   12fbc:	movne	r6, #1
   12fc0:	cmp	r6, #0
   12fc4:	bne	12a68 <__assert_fail@plt+0x1b68>
   12fc8:	str	fp, [sp, #152]	; 0x98
   12fcc:	mov	fp, r8
   12fd0:	cmp	r4, #0
   12fd4:	ldr	r1, [sp, #44]	; 0x2c
   12fd8:	movne	r3, #0
   12fdc:	ldr	r8, [sp, #152]	; 0x98
   12fe0:	sub	r2, r8, #2
   12fe4:	clz	r2, r2
   12fe8:	lsr	r2, r2, #5
   12fec:	andeq	r3, r2, r1
   12ff0:	cmp	r3, #0
   12ff4:	bne	140b0 <__assert_fail@plt+0x31b0>
   12ff8:	eor	r3, r1, #1
   12ffc:	ands	r2, r2, r3
   13000:	beq	13fdc <__assert_fail@plt+0x30dc>
   13004:	ldr	r3, [sp, #68]	; 0x44
   13008:	cmp	r3, #0
   1300c:	beq	13fe0 <__assert_fail@plt+0x30e0>
   13010:	ldr	r3, [sp, #36]	; 0x24
   13014:	cmp	r3, #0
   13018:	bne	1406c <__assert_fail@plt+0x316c>
   1301c:	ldr	r3, [sp, #72]	; 0x48
   13020:	adds	r3, r3, #0
   13024:	movne	r3, #1
   13028:	cmp	sl, #0
   1302c:	movne	r3, #0
   13030:	cmp	r3, #0
   13034:	ldreq	r2, [sp, #68]	; 0x44
   13038:	beq	13fe0 <__assert_fail@plt+0x30e0>
   1303c:	ldr	r2, [sp, #72]	; 0x48
   13040:	str	r3, [sp, #68]	; 0x44
   13044:	movw	r3, #28100	; 0x6dc4
   13048:	movt	r3, #1
   1304c:	mov	r1, #39	; 0x27
   13050:	mov	r4, #1
   13054:	ldr	sl, [sp, #72]	; 0x48
   13058:	mov	r8, #2
   1305c:	str	r3, [sp, #60]	; 0x3c
   13060:	mov	r3, #0
   13064:	strb	r1, [fp]
   13068:	str	r3, [sp, #44]	; 0x2c
   1306c:	str	r4, [sp, #56]	; 0x38
   13070:	str	r2, [sp, #72]	; 0x48
   13074:	b	12a38 <__assert_fail@plt+0x1b38>
   13078:	mov	r7, #0
   1307c:	cmp	fp, #2
   13080:	beq	13960 <__assert_fail@plt+0x2a60>
   13084:	ldr	r2, [sp, #40]	; 0x28
   13088:	ldr	r3, [sp, #56]	; 0x38
   1308c:	ldr	r1, [sp, #44]	; 0x2c
   13090:	cmp	r3, #0
   13094:	moveq	r3, #0
   13098:	andne	r3, r2, r1
   1309c:	cmp	r3, #0
   130a0:	moveq	r5, #92	; 0x5c
   130a4:	moveq	r3, r5
   130a8:	bne	1396c <__assert_fail@plt+0x2a6c>
   130ac:	ldr	r2, [sp, #40]	; 0x28
   130b0:	cmp	r2, #0
   130b4:	bne	13da8 <__assert_fail@plt+0x2ea8>
   130b8:	mov	r6, #0
   130bc:	ldr	r3, [sp, #44]	; 0x2c
   130c0:	cmp	r3, #0
   130c4:	beq	13958 <__assert_fail@plt+0x2a58>
   130c8:	mov	r3, #0
   130cc:	b	12ee8 <__assert_fail@plt+0x1fe8>
   130d0:	mov	r7, #0
   130d4:	cmp	fp, #2
   130d8:	beq	139d0 <__assert_fail@plt+0x2ad0>
   130dc:	cmp	fp, #5
   130e0:	beq	13994 <__assert_fail@plt+0x2a94>
   130e4:	sub	r3, fp, #2
   130e8:	mov	r6, #0
   130ec:	clz	r3, r3
   130f0:	mov	r5, #63	; 0x3f
   130f4:	lsr	r3, r3, #5
   130f8:	b	12ed8 <__assert_fail@plt+0x1fd8>
   130fc:	mov	r7, #0
   13100:	cmp	fp, #2
   13104:	movne	r3, #0
   13108:	movne	r5, #39	; 0x27
   1310c:	strne	r6, [sp, #68]	; 0x44
   13110:	bne	12ed8 <__assert_fail@plt+0x1fd8>
   13114:	ldr	r3, [sp, #44]	; 0x2c
   13118:	cmp	r3, #0
   1311c:	bne	13dd8 <__assert_fail@plt+0x2ed8>
   13120:	ldr	r3, [sp, #72]	; 0x48
   13124:	cmp	sl, #0
   13128:	clz	r3, r3
   1312c:	lsr	r3, r3, #5
   13130:	moveq	r3, #0
   13134:	cmp	r3, #0
   13138:	bne	13d04 <__assert_fail@plt+0x2e04>
   1313c:	cmp	sl, r4
   13140:	movhi	r3, #39	; 0x27
   13144:	strbhi	r3, [r8, r4]
   13148:	add	r3, r4, #1
   1314c:	cmp	sl, r3
   13150:	movhi	r2, #92	; 0x5c
   13154:	strbhi	r2, [r8, r3]
   13158:	add	r3, r4, #2
   1315c:	cmp	sl, r3
   13160:	bls	1316c <__assert_fail@plt+0x226c>
   13164:	mov	r2, #39	; 0x27
   13168:	strb	r2, [r8, r3]
   1316c:	mov	r3, #0
   13170:	cmp	r7, #0
   13174:	add	r4, r4, #3
   13178:	mov	r5, #39	; 0x27
   1317c:	str	r3, [sp, #48]	; 0x30
   13180:	str	r6, [sp, #68]	; 0x44
   13184:	bne	12f18 <__assert_fail@plt+0x2018>
   13188:	ldr	r2, [sp, #48]	; 0x30
   1318c:	eor	r3, r3, #1
   13190:	add	r9, r9, #1
   13194:	and	r3, r3, r2
   13198:	uxtb	r3, r3
   1319c:	cmp	r3, #0
   131a0:	beq	12f88 <__assert_fail@plt+0x2088>
   131a4:	cmp	sl, r4
   131a8:	movhi	r3, #39	; 0x27
   131ac:	strbhi	r3, [r8, r4]
   131b0:	add	r3, r4, #1
   131b4:	add	r4, r4, #2
   131b8:	cmp	sl, r3
   131bc:	movhi	r2, #39	; 0x27
   131c0:	strbhi	r2, [r8, r3]
   131c4:	mov	r3, #0
   131c8:	str	r3, [sp, #48]	; 0x30
   131cc:	b	12f88 <__assert_fail@plt+0x2088>
   131d0:	mov	r3, #118	; 0x76
   131d4:	b	130ac <__assert_fail@plt+0x21ac>
   131d8:	mov	r3, #116	; 0x74
   131dc:	ldr	r2, [sp, #44]	; 0x2c
   131e0:	cmp	fp, #2
   131e4:	movne	r2, #0
   131e8:	andeq	r2, r2, #1
   131ec:	cmp	r2, #0
   131f0:	beq	130ac <__assert_fail@plt+0x21ac>
   131f4:	mov	fp, r8
   131f8:	mov	r8, #2
   131fc:	ldr	r3, [sp, #40]	; 0x28
   13200:	cmp	r3, #0
   13204:	movne	r8, #4
   13208:	mov	lr, #0
   1320c:	mov	r0, fp
   13210:	ldr	r2, [sp, #32]
   13214:	ldr	r3, [sp, #156]	; 0x9c
   13218:	ldr	r1, [sp, #164]	; 0xa4
   1321c:	bic	ip, r3, #2
   13220:	ldr	r3, [sp, #28]
   13224:	stm	sp, {r8, ip, lr}
   13228:	ldr	ip, [sp, #168]	; 0xa8
   1322c:	str	r1, [sp, #12]
   13230:	mov	r1, sl
   13234:	str	ip, [sp, #16]
   13238:	bl	12950 <__assert_fail@plt+0x1a50>
   1323c:	mov	r4, r0
   13240:	mov	r0, r4
   13244:	add	sp, sp, #116	; 0x74
   13248:	ldrd	r4, [sp]
   1324c:	ldrd	r6, [sp, #8]
   13250:	ldrd	r8, [sp, #16]
   13254:	ldrd	sl, [sp, #24]
   13258:	add	sp, sp, #32
   1325c:	pop	{pc}		; (ldr pc, [sp], #4)
   13260:	mov	r5, #102	; 0x66
   13264:	ldr	r2, [sp, #44]	; 0x2c
   13268:	sub	r3, fp, #2
   1326c:	clz	r3, r3
   13270:	lsr	r3, r3, #5
   13274:	cmp	r2, #0
   13278:	bne	13cd4 <__assert_fail@plt+0x2dd4>
   1327c:	mov	r6, r2
   13280:	b	12f74 <__assert_fail@plt+0x2074>
   13284:	mov	r5, #110	; 0x6e
   13288:	mov	r6, #0
   1328c:	b	12f18 <__assert_fail@plt+0x2018>
   13290:	mov	r5, #98	; 0x62
   13294:	b	13264 <__assert_fail@plt+0x2364>
   13298:	mov	r5, #97	; 0x61
   1329c:	b	13264 <__assert_fail@plt+0x2364>
   132a0:	mov	r7, #0
   132a4:	mov	r6, #0
   132a8:	b	130c8 <__assert_fail@plt+0x21c8>
   132ac:	mov	r5, #114	; 0x72
   132b0:	b	13288 <__assert_fail@plt+0x2388>
   132b4:	ldr	r3, [sp, #44]	; 0x2c
   132b8:	cmp	r3, #0
   132bc:	bne	1404c <__assert_fail@plt+0x314c>
   132c0:	mov	r7, r3
   132c4:	ldr	r3, [sp, #48]	; 0x30
   132c8:	sub	r2, fp, #2
   132cc:	clz	r2, r2
   132d0:	lsr	r2, r2, #5
   132d4:	eor	r3, r3, #1
   132d8:	ands	r3, r2, r3
   132dc:	beq	13cf0 <__assert_fail@plt+0x2df0>
   132e0:	cmp	sl, r4
   132e4:	movhi	r1, #39	; 0x27
   132e8:	strbhi	r1, [r8, r4]
   132ec:	add	r1, r4, #1
   132f0:	cmp	sl, r1
   132f4:	movhi	r0, #36	; 0x24
   132f8:	strbhi	r0, [r8, r1]
   132fc:	add	r1, r4, #2
   13300:	cmp	sl, r1
   13304:	movhi	r0, #39	; 0x27
   13308:	strbhi	r0, [r8, r1]
   1330c:	add	r1, r4, #3
   13310:	cmp	sl, r1
   13314:	bls	13d48 <__assert_fail@plt+0x2e48>
   13318:	mov	r4, r1
   1331c:	mov	r1, #92	; 0x5c
   13320:	mov	r0, r4
   13324:	str	r3, [sp, #48]	; 0x30
   13328:	strb	r1, [r8, r4]
   1332c:	cmp	fp, #2
   13330:	add	r4, r4, #1
   13334:	beq	13d98 <__assert_fail@plt+0x2e98>
   13338:	ldr	r1, [sp, #28]
   1333c:	add	r3, r9, #1
   13340:	cmp	r3, r1
   13344:	bcs	1335c <__assert_fail@plt+0x245c>
   13348:	ldr	r1, [sp, #32]
   1334c:	ldrb	r3, [r1, r3]
   13350:	sub	r3, r3, #48	; 0x30
   13354:	cmp	r3, #9
   13358:	bls	13db0 <__assert_fail@plt+0x2eb0>
   1335c:	mov	r5, #48	; 0x30
   13360:	ldr	r3, [sp, #40]	; 0x28
   13364:	eor	r3, r3, #1
   13368:	orrs	r2, r2, r3
   1336c:	mov	r3, r6
   13370:	moveq	r6, r2
   13374:	beq	12ee8 <__assert_fail@plt+0x1fe8>
   13378:	mov	r6, #0
   1337c:	b	12f10 <__assert_fail@plt+0x2010>
   13380:	cmp	r9, #0
   13384:	mov	r2, r7
   13388:	bne	13928 <__assert_fail@plt+0x2a28>
   1338c:	mov	r6, r7
   13390:	mov	r3, r9
   13394:	mov	r7, r2
   13398:	b	12ed8 <__assert_fail@plt+0x1fd8>
   1339c:	mov	r2, r7
   133a0:	mov	r6, r7
   133a4:	mov	r3, #0
   133a8:	mov	r7, r2
   133ac:	mov	r5, #32
   133b0:	b	12ed8 <__assert_fail@plt+0x1fd8>
   133b4:	mov	r6, r7
   133b8:	b	130c8 <__assert_fail@plt+0x21c8>
   133bc:	mov	r7, #0
   133c0:	ldr	r3, [sp, #64]	; 0x40
   133c4:	cmp	r3, #1
   133c8:	bne	139e8 <__assert_fail@plt+0x2ae8>
   133cc:	bl	10dec <__ctype_b_loc@plt>
   133d0:	ldr	r2, [r0]
   133d4:	sxth	r3, r5
   133d8:	lsl	r3, r3, #1
   133dc:	ldr	r1, [sp, #64]	; 0x40
   133e0:	ldrh	r3, [r2, r3]
   133e4:	mov	ip, r1
   133e8:	and	r3, r3, #16384	; 0x4000
   133ec:	cmp	r3, #0
   133f0:	ldr	r3, [sp, #40]	; 0x28
   133f4:	movne	r6, #1
   133f8:	moveq	r6, #0
   133fc:	movne	r2, #0
   13400:	andeq	r2, r3, #1
   13404:	cmp	r2, #0
   13408:	bne	13d30 <__assert_fail@plt+0x2e30>
   1340c:	sub	r3, fp, #2
   13410:	clz	r3, r3
   13414:	lsr	r3, r3, #5
   13418:	b	12ed8 <__assert_fail@plt+0x1fd8>
   1341c:	cmp	r4, #0
   13420:	bne	140c0 <__assert_fail@plt+0x31c0>
   13424:	str	r4, [sp, #40]	; 0x28
   13428:	cmp	sl, #0
   1342c:	bne	140f0 <__assert_fail@plt+0x31f0>
   13430:	mov	r3, #1
   13434:	movw	r2, #28100	; 0x6dc4
   13438:	movt	r2, #1
   1343c:	mov	r4, r3
   13440:	mov	r8, #2
   13444:	str	r3, [sp, #36]	; 0x24
   13448:	str	sl, [sp, #44]	; 0x2c
   1344c:	str	sl, [sp, #48]	; 0x30
   13450:	str	r3, [sp, #56]	; 0x38
   13454:	str	r2, [sp, #60]	; 0x3c
   13458:	str	sl, [sp, #68]	; 0x44
   1345c:	str	sl, [sp, #72]	; 0x48
   13460:	b	12a38 <__assert_fail@plt+0x1b38>
   13464:	ldr	r3, [sp, #32]
   13468:	ldrb	r5, [r3, r9]
   1346c:	cmp	r5, #126	; 0x7e
   13470:	ldrls	pc, [pc, r5, lsl #2]
   13474:	b	133c0 <__assert_fail@plt+0x24c0>
   13478:	muleq	r1, ip, r6
   1347c:	andeq	r3, r1, r0, asr #7
   13480:	andeq	r3, r1, r0, asr #7
   13484:	andeq	r3, r1, r0, asr #7
   13488:	andeq	r3, r1, r0, asr #7
   1348c:	andeq	r3, r1, r0, asr #7
   13490:	andeq	r3, r1, r0, asr #7
   13494:	muleq	r1, r4, r6
   13498:	andeq	r3, r1, ip, lsl #13
   1349c:	ldrdeq	r3, [r1], -r8
   134a0:	andeq	r3, r1, r4, lsl #13
   134a4:	ldrdeq	r3, [r1], -r0
   134a8:	andeq	r3, r1, ip, ror r6
   134ac:	andeq	r3, r1, r4, ror r6
   134b0:	andeq	r3, r1, r0, asr #7
   134b4:	andeq	r3, r1, r0, asr #7
   134b8:	andeq	r3, r1, r0, asr #7
   134bc:	andeq	r3, r1, r0, asr #7
   134c0:	andeq	r3, r1, r0, asr #7
   134c4:	andeq	r3, r1, r0, asr #7
   134c8:	andeq	r3, r1, r0, asr #7
   134cc:	andeq	r3, r1, r0, asr #7
   134d0:	andeq	r3, r1, r0, asr #7
   134d4:	andeq	r3, r1, r0, asr #7
   134d8:	andeq	r3, r1, r0, asr #7
   134dc:	andeq	r3, r1, r0, asr #7
   134e0:	andeq	r3, r1, r0, asr #7
   134e4:	andeq	r3, r1, r0, asr #7
   134e8:	andeq	r3, r1, r0, asr #7
   134ec:	andeq	r3, r1, r0, asr #7
   134f0:	andeq	r3, r1, r0, asr #7
   134f4:	andeq	r3, r1, r0, asr #7
   134f8:	strdeq	r3, [r1], -r0
   134fc:	ldrdeq	r3, [r1], -r0
   13500:	ldrdeq	r3, [r1], -r0
   13504:	andeq	r3, r1, r0, asr #13
   13508:	ldrdeq	r3, [r1], -r0
   1350c:	andeq	r3, r1, ip, lsl #8
   13510:	ldrdeq	r3, [r1], -r0
   13514:	andeq	r3, r1, r0, lsl #2
   13518:	ldrdeq	r3, [r1], -r0
   1351c:	ldrdeq	r3, [r1], -r0
   13520:	ldrdeq	r3, [r1], -r0
   13524:	andeq	r3, r1, ip, lsl #8
   13528:	andeq	r3, r1, ip, lsl #8
   1352c:	andeq	r3, r1, ip, lsl #8
   13530:	andeq	r3, r1, ip, lsl #8
   13534:	andeq	r3, r1, ip, lsl #8
   13538:	andeq	r3, r1, ip, lsl #8
   1353c:	andeq	r3, r1, ip, lsl #8
   13540:	andeq	r3, r1, ip, lsl #8
   13544:	andeq	r3, r1, ip, lsl #8
   13548:	andeq	r3, r1, ip, lsl #8
   1354c:	andeq	r3, r1, ip, lsl #8
   13550:	andeq	r3, r1, ip, lsl #8
   13554:	andeq	r3, r1, ip, lsl #8
   13558:	andeq	r3, r1, ip, lsl #8
   1355c:	andeq	r3, r1, ip, lsl #8
   13560:	andeq	r3, r1, ip, lsl #8
   13564:	ldrdeq	r3, [r1], -r0
   13568:	ldrdeq	r3, [r1], -r0
   1356c:	ldrdeq	r3, [r1], -r0
   13570:	ldrdeq	r3, [r1], -r0
   13574:	ldrdeq	r3, [r1], -r4
   13578:	andeq	r3, r1, r0, asr #7
   1357c:	andeq	r3, r1, ip, lsl #8
   13580:	andeq	r3, r1, ip, lsl #8
   13584:	andeq	r3, r1, ip, lsl #8
   13588:	andeq	r3, r1, ip, lsl #8
   1358c:	andeq	r3, r1, ip, lsl #8
   13590:	andeq	r3, r1, ip, lsl #8
   13594:	andeq	r3, r1, ip, lsl #8
   13598:	andeq	r3, r1, ip, lsl #8
   1359c:	andeq	r3, r1, ip, lsl #8
   135a0:	andeq	r3, r1, ip, lsl #8
   135a4:	andeq	r3, r1, ip, lsl #8
   135a8:	andeq	r3, r1, ip, lsl #8
   135ac:	andeq	r3, r1, ip, lsl #8
   135b0:	andeq	r3, r1, ip, lsl #8
   135b4:	andeq	r3, r1, ip, lsl #8
   135b8:	andeq	r3, r1, ip, lsl #8
   135bc:	andeq	r3, r1, ip, lsl #8
   135c0:	andeq	r3, r1, ip, lsl #8
   135c4:	andeq	r3, r1, ip, lsl #8
   135c8:	andeq	r3, r1, ip, lsl #8
   135cc:	andeq	r3, r1, ip, lsl #8
   135d0:	andeq	r3, r1, ip, lsl #8
   135d4:	andeq	r3, r1, ip, lsl #8
   135d8:	andeq	r3, r1, ip, lsl #8
   135dc:	andeq	r3, r1, ip, lsl #8
   135e0:	andeq	r3, r1, ip, lsl #8
   135e4:	ldrdeq	r3, [r1], -r0
   135e8:	andeq	r3, r1, ip, ror r0
   135ec:	andeq	r3, r1, ip, lsl #8
   135f0:	ldrdeq	r3, [r1], -r0
   135f4:	andeq	r3, r1, ip, lsl #8
   135f8:	ldrdeq	r3, [r1], -r0
   135fc:	andeq	r3, r1, ip, lsl #8
   13600:	andeq	r3, r1, ip, lsl #8
   13604:	andeq	r3, r1, ip, lsl #8
   13608:	andeq	r3, r1, ip, lsl #8
   1360c:	andeq	r3, r1, ip, lsl #8
   13610:	andeq	r3, r1, ip, lsl #8
   13614:	andeq	r3, r1, ip, lsl #8
   13618:	andeq	r3, r1, ip, lsl #8
   1361c:	andeq	r3, r1, ip, lsl #8
   13620:	andeq	r3, r1, ip, lsl #8
   13624:	andeq	r3, r1, ip, lsl #8
   13628:	andeq	r3, r1, ip, lsl #8
   1362c:	andeq	r3, r1, ip, lsl #8
   13630:	andeq	r3, r1, ip, lsl #8
   13634:	andeq	r3, r1, ip, lsl #8
   13638:	andeq	r3, r1, ip, lsl #8
   1363c:	andeq	r3, r1, ip, lsl #8
   13640:	andeq	r3, r1, ip, lsl #8
   13644:	andeq	r3, r1, ip, lsl #8
   13648:	andeq	r3, r1, ip, lsl #8
   1364c:	andeq	r3, r1, ip, lsl #8
   13650:	andeq	r3, r1, ip, lsl #8
   13654:	andeq	r3, r1, ip, lsl #8
   13658:	andeq	r3, r1, ip, lsl #8
   1365c:	andeq	r3, r1, ip, lsl #8
   13660:	andeq	r3, r1, ip, lsl #8
   13664:	andeq	r2, r1, r0, lsr #29
   13668:	ldrdeq	r3, [r1], -r0
   1366c:	andeq	r2, r1, r0, lsr #29
   13670:	andeq	r3, r1, r0, asr #13
   13674:	mov	r3, #114	; 0x72
   13678:	b	131dc <__assert_fail@plt+0x22dc>
   1367c:	mov	r3, #102	; 0x66
   13680:	b	130ac <__assert_fail@plt+0x21ac>
   13684:	mov	r3, #110	; 0x6e
   13688:	b	131dc <__assert_fail@plt+0x22dc>
   1368c:	mov	r3, #98	; 0x62
   13690:	b	130ac <__assert_fail@plt+0x21ac>
   13694:	mov	r3, #97	; 0x61
   13698:	b	130ac <__assert_fail@plt+0x21ac>
   1369c:	ldr	r3, [sp, #40]	; 0x28
   136a0:	cmp	r3, #0
   136a4:	bne	132b4 <__assert_fail@plt+0x23b4>
   136a8:	ldr	r3, [sp, #156]	; 0x9c
   136ac:	tst	r3, #1
   136b0:	addne	r9, r9, #1
   136b4:	bne	12a48 <__assert_fail@plt+0x1b48>
   136b8:	ldr	r7, [sp, #40]	; 0x28
   136bc:	b	130b8 <__assert_fail@plt+0x21b8>
   136c0:	sub	r3, fp, #2
   136c4:	clz	r3, r3
   136c8:	lsr	r3, r3, #5
   136cc:	b	12ecc <__assert_fail@plt+0x1fcc>
   136d0:	sub	r3, fp, #2
   136d4:	mov	r6, #0
   136d8:	clz	r3, r3
   136dc:	lsr	r3, r3, #5
   136e0:	ldr	r2, [sp, #44]	; 0x2c
   136e4:	tst	r2, r3
   136e8:	beq	12ed8 <__assert_fail@plt+0x1fd8>
   136ec:	b	131f4 <__assert_fail@plt+0x22f4>
   136f0:	sub	r3, fp, #2
   136f4:	clz	r3, r3
   136f8:	lsr	r3, r3, #5
   136fc:	b	136e0 <__assert_fail@plt+0x27e0>
   13700:	ldr	r3, [sp, #52]	; 0x34
   13704:	ldrb	r5, [r3]
   13708:	cmp	r5, #126	; 0x7e
   1370c:	ldrls	pc, [pc, r5, lsl #2]
   13710:	b	133bc <__assert_fail@plt+0x24bc>
   13714:			; <UNDEFINED> instruction: 0x000132b4
   13718:			; <UNDEFINED> instruction: 0x000133bc
   1371c:			; <UNDEFINED> instruction: 0x000133bc
   13720:			; <UNDEFINED> instruction: 0x000133bc
   13724:			; <UNDEFINED> instruction: 0x000133bc
   13728:			; <UNDEFINED> instruction: 0x000133bc
   1372c:			; <UNDEFINED> instruction: 0x000133bc
   13730:	muleq	r1, r8, r2
   13734:	muleq	r1, r0, r2
   13738:	andeq	r3, r1, ip, asr #18
   1373c:	andeq	r3, r1, r4, lsl #5
   13740:	andeq	r3, r1, r0, asr #18
   13744:	andeq	r3, r1, r0, ror #4
   13748:	andeq	r3, r1, ip, lsr #5
   1374c:			; <UNDEFINED> instruction: 0x000133bc
   13750:			; <UNDEFINED> instruction: 0x000133bc
   13754:			; <UNDEFINED> instruction: 0x000133bc
   13758:			; <UNDEFINED> instruction: 0x000133bc
   1375c:			; <UNDEFINED> instruction: 0x000133bc
   13760:			; <UNDEFINED> instruction: 0x000133bc
   13764:			; <UNDEFINED> instruction: 0x000133bc
   13768:			; <UNDEFINED> instruction: 0x000133bc
   1376c:			; <UNDEFINED> instruction: 0x000133bc
   13770:			; <UNDEFINED> instruction: 0x000133bc
   13774:			; <UNDEFINED> instruction: 0x000133bc
   13778:			; <UNDEFINED> instruction: 0x000133bc
   1377c:			; <UNDEFINED> instruction: 0x000133bc
   13780:			; <UNDEFINED> instruction: 0x000133bc
   13784:			; <UNDEFINED> instruction: 0x000133bc
   13788:			; <UNDEFINED> instruction: 0x000133bc
   1378c:			; <UNDEFINED> instruction: 0x000133bc
   13790:			; <UNDEFINED> instruction: 0x000133bc
   13794:	andeq	r3, r1, r8, lsr r9
   13798:	andeq	r3, r1, r0, lsr #5
   1379c:	andeq	r3, r1, r0, lsr #5
   137a0:	andeq	r3, r1, ip, lsl r9
   137a4:	andeq	r3, r1, r0, lsr #5
   137a8:	andeq	r3, r1, r0, lsl r9
   137ac:	andeq	r3, r1, r0, lsr #5
   137b0:	strdeq	r3, [r1], -ip
   137b4:	andeq	r3, r1, r0, lsr #5
   137b8:	andeq	r3, r1, r0, lsr #5
   137bc:	andeq	r3, r1, r0, lsr #5
   137c0:	andeq	r3, r1, r0, lsl r9
   137c4:	andeq	r3, r1, r0, lsl r9
   137c8:	andeq	r3, r1, r0, lsl r9
   137cc:	andeq	r3, r1, r0, lsl r9
   137d0:	andeq	r3, r1, r0, lsl r9
   137d4:	andeq	r3, r1, r0, lsl r9
   137d8:	andeq	r3, r1, r0, lsl r9
   137dc:	andeq	r3, r1, r0, lsl r9
   137e0:	andeq	r3, r1, r0, lsl r9
   137e4:	andeq	r3, r1, r0, lsl r9
   137e8:	andeq	r3, r1, r0, lsl r9
   137ec:	andeq	r3, r1, r0, lsl r9
   137f0:	andeq	r3, r1, r0, lsl r9
   137f4:	andeq	r3, r1, r0, lsl r9
   137f8:	andeq	r3, r1, r0, lsl r9
   137fc:	andeq	r3, r1, r0, lsl r9
   13800:	andeq	r3, r1, r0, lsr #5
   13804:	andeq	r3, r1, r0, lsr #5
   13808:	andeq	r3, r1, r0, lsr #5
   1380c:	andeq	r3, r1, r0, lsr #5
   13810:	ldrdeq	r3, [r1], -r0
   13814:			; <UNDEFINED> instruction: 0x000133bc
   13818:	andeq	r3, r1, r0, lsl r9
   1381c:	andeq	r3, r1, r0, lsl r9
   13820:	andeq	r3, r1, r0, lsl r9
   13824:	andeq	r3, r1, r0, lsl r9
   13828:	andeq	r3, r1, r0, lsl r9
   1382c:	andeq	r3, r1, r0, lsl r9
   13830:	andeq	r3, r1, r0, lsl r9
   13834:	andeq	r3, r1, r0, lsl r9
   13838:	andeq	r3, r1, r0, lsl r9
   1383c:	andeq	r3, r1, r0, lsl r9
   13840:	andeq	r3, r1, r0, lsl r9
   13844:	andeq	r3, r1, r0, lsl r9
   13848:	andeq	r3, r1, r0, lsl r9
   1384c:	andeq	r3, r1, r0, lsl r9
   13850:	andeq	r3, r1, r0, lsl r9
   13854:	andeq	r3, r1, r0, lsl r9
   13858:	andeq	r3, r1, r0, lsl r9
   1385c:	andeq	r3, r1, r0, lsl r9
   13860:	andeq	r3, r1, r0, lsl r9
   13864:	andeq	r3, r1, r0, lsl r9
   13868:	andeq	r3, r1, r0, lsl r9
   1386c:	andeq	r3, r1, r0, lsl r9
   13870:	andeq	r3, r1, r0, lsl r9
   13874:	andeq	r3, r1, r0, lsl r9
   13878:	andeq	r3, r1, r0, lsl r9
   1387c:	andeq	r3, r1, r0, lsl r9
   13880:	andeq	r3, r1, r0, lsr #5
   13884:	andeq	r3, r1, r8, ror r0
   13888:	andeq	r3, r1, r0, lsl r9
   1388c:	andeq	r3, r1, r0, lsr #5
   13890:	andeq	r3, r1, r0, lsl r9
   13894:	andeq	r3, r1, r0, lsr #5
   13898:	andeq	r3, r1, r0, lsl r9
   1389c:	andeq	r3, r1, r0, lsl r9
   138a0:	andeq	r3, r1, r0, lsl r9
   138a4:	andeq	r3, r1, r0, lsl r9
   138a8:	andeq	r3, r1, r0, lsl r9
   138ac:	andeq	r3, r1, r0, lsl r9
   138b0:	andeq	r3, r1, r0, lsl r9
   138b4:	andeq	r3, r1, r0, lsl r9
   138b8:	andeq	r3, r1, r0, lsl r9
   138bc:	andeq	r3, r1, r0, lsl r9
   138c0:	andeq	r3, r1, r0, lsl r9
   138c4:	andeq	r3, r1, r0, lsl r9
   138c8:	andeq	r3, r1, r0, lsl r9
   138cc:	andeq	r3, r1, r0, lsl r9
   138d0:	andeq	r3, r1, r0, lsl r9
   138d4:	andeq	r3, r1, r0, lsl r9
   138d8:	andeq	r3, r1, r0, lsl r9
   138dc:	andeq	r3, r1, r0, lsl r9
   138e0:	andeq	r3, r1, r0, lsl r9
   138e4:	andeq	r3, r1, r0, lsl r9
   138e8:	andeq	r3, r1, r0, lsl r9
   138ec:	andeq	r3, r1, r0, lsl r9
   138f0:	andeq	r3, r1, r0, lsl r9
   138f4:	andeq	r3, r1, r0, lsl r9
   138f8:	andeq	r3, r1, r0, lsl r9
   138fc:	andeq	r3, r1, r0, lsl r9
   13900:	muleq	r1, ip, lr
   13904:	andeq	r3, r1, r0, lsr #5
   13908:	muleq	r1, ip, lr
   1390c:	andeq	r3, r1, ip, lsl r9
   13910:	mov	r6, r7
   13914:	mov	r7, #0
   13918:	b	130c8 <__assert_fail@plt+0x21c8>
   1391c:	cmp	r9, #0
   13920:	mov	r2, #0
   13924:	beq	1338c <__assert_fail@plt+0x248c>
   13928:	mov	r6, #0
   1392c:	mov	r7, r2
   13930:	mov	r3, r6
   13934:	b	12ee8 <__assert_fail@plt+0x1fe8>
   13938:	mov	r2, #0
   1393c:	b	133a0 <__assert_fail@plt+0x24a0>
   13940:	mov	r7, #0
   13944:	mov	r3, #118	; 0x76
   13948:	b	130ac <__assert_fail@plt+0x21ac>
   1394c:	mov	r7, #0
   13950:	mov	r3, #116	; 0x74
   13954:	b	131dc <__assert_fail@plt+0x22dc>
   13958:	ldr	r3, [sp, #44]	; 0x2c
   1395c:	b	12f10 <__assert_fail@plt+0x2010>
   13960:	ldr	r3, [sp, #44]	; 0x2c
   13964:	cmp	r3, #0
   13968:	bne	13dd8 <__assert_fail@plt+0x2ed8>
   1396c:	add	r9, r9, #1
   13970:	mov	r6, #0
   13974:	ldr	r3, [sp, #48]	; 0x30
   13978:	mov	r5, #92	; 0x5c
   1397c:	b	1319c <__assert_fail@plt+0x229c>
   13980:	ldr	r3, [sp, #32]
   13984:	ldrb	r2, [r3, #1]
   13988:	adds	r2, r2, #0
   1398c:	movne	r2, #1
   13990:	b	12eb8 <__assert_fail@plt+0x1fb8>
   13994:	ldr	r3, [sp, #156]	; 0x9c
   13998:	ands	r3, r3, #4
   1399c:	beq	139c4 <__assert_fail@plt+0x2ac4>
   139a0:	ldr	r2, [sp, #28]
   139a4:	add	r3, r9, #2
   139a8:	cmp	r3, r2
   139ac:	bcs	139c0 <__assert_fail@plt+0x2ac0>
   139b0:	ldr	r2, [sp, #52]	; 0x34
   139b4:	ldrb	r5, [r2, #1]
   139b8:	cmp	r5, #63	; 0x3f
   139bc:	beq	13e3c <__assert_fail@plt+0x2f3c>
   139c0:	mov	r3, #0
   139c4:	mov	r5, #63	; 0x3f
   139c8:	mov	r6, r3
   139cc:	b	12ed8 <__assert_fail@plt+0x1fd8>
   139d0:	ldr	r3, [sp, #44]	; 0x2c
   139d4:	cmp	r3, #0
   139d8:	bne	13dd8 <__assert_fail@plt+0x2ed8>
   139dc:	mov	r6, r3
   139e0:	mov	r5, #63	; 0x3f
   139e4:	b	12f10 <__assert_fail@plt+0x2010>
   139e8:	ldr	r1, [sp, #28]
   139ec:	mov	r2, #0
   139f0:	mov	r3, #0
   139f4:	strd	r2, [sp, #104]	; 0x68
   139f8:	cmn	r1, #1
   139fc:	bne	13a0c <__assert_fail@plt+0x2b0c>
   13a00:	ldr	r0, [sp, #32]
   13a04:	bl	10e04 <strlen@plt>
   13a08:	str	r0, [sp, #28]
   13a0c:	str	r8, [sp, #76]	; 0x4c
   13a10:	mov	r3, #0
   13a14:	str	sl, [sp, #80]	; 0x50
   13a18:	ldr	sl, [sp, #32]
   13a1c:	str	r5, [sp, #84]	; 0x54
   13a20:	mov	r5, r3
   13a24:	ldr	r8, [sp, #44]	; 0x2c
   13a28:	str	r7, [sp, #88]	; 0x58
   13a2c:	str	r4, [sp, #92]	; 0x5c
   13a30:	ldr	r2, [sp, #28]
   13a34:	add	r4, r9, r5
   13a38:	add	r3, sp, #104	; 0x68
   13a3c:	add	r7, sl, r4
   13a40:	add	r0, sp, #100	; 0x64
   13a44:	mov	r1, r7
   13a48:	sub	r2, r2, r4
   13a4c:	bl	16350 <__assert_fail@plt+0x5450>
   13a50:	subs	r1, r0, #0
   13a54:	beq	13aa0 <__assert_fail@plt+0x2ba0>
   13a58:	cmn	r1, #1
   13a5c:	beq	13e18 <__assert_fail@plt+0x2f18>
   13a60:	cmn	r1, #2
   13a64:	beq	13f38 <__assert_fail@plt+0x3038>
   13a68:	cmp	fp, #2
   13a6c:	movne	r3, #0
   13a70:	andeq	r3, r8, #1
   13a74:	cmp	r3, #0
   13a78:	bne	13c04 <__assert_fail@plt+0x2d04>
   13a7c:	ldr	r0, [sp, #100]	; 0x64
   13a80:	add	r5, r5, r1
   13a84:	bl	10d5c <iswprint@plt>
   13a88:	cmp	r0, #0
   13a8c:	add	r0, sp, #104	; 0x68
   13a90:	moveq	r6, #0
   13a94:	bl	10d08 <mbsinit@plt>
   13a98:	cmp	r0, #0
   13a9c:	beq	13a30 <__assert_fail@plt+0x2b30>
   13aa0:	ldr	r3, [sp, #40]	; 0x28
   13aa4:	mov	ip, r5
   13aa8:	eor	r2, r6, #1
   13aac:	ldr	r8, [sp, #76]	; 0x4c
   13ab0:	ldr	sl, [sp, #80]	; 0x50
   13ab4:	and	r2, r2, r3
   13ab8:	ldr	r5, [sp, #84]	; 0x54
   13abc:	ldr	r7, [sp, #88]	; 0x58
   13ac0:	ldr	r4, [sp, #92]	; 0x5c
   13ac4:	cmp	ip, #1
   13ac8:	bls	13404 <__assert_fail@plt+0x2504>
   13acc:	add	r1, ip, r9
   13ad0:	mov	r0, #39	; 0x27
   13ad4:	ldr	lr, [sp, #52]	; 0x34
   13ad8:	mov	ip, #0
   13adc:	str	r6, [sp, #52]	; 0x34
   13ae0:	ldr	r6, [sp, #48]	; 0x30
   13ae4:	b	13ba0 <__assert_fail@plt+0x2ca0>
   13ae8:	ldr	ip, [sp, #44]	; 0x2c
   13aec:	sub	r3, fp, #2
   13af0:	clz	r3, r3
   13af4:	lsr	r3, r3, #5
   13af8:	cmp	ip, #0
   13afc:	bne	13d10 <__assert_fail@plt+0x2e10>
   13b00:	eor	ip, r6, #1
   13b04:	ands	r3, r3, ip
   13b08:	beq	13b38 <__assert_fail@plt+0x2c38>
   13b0c:	cmp	sl, r4
   13b10:	add	ip, r4, #1
   13b14:	strbhi	r0, [r8, r4]
   13b18:	cmp	sl, ip
   13b1c:	movhi	r6, #36	; 0x24
   13b20:	strbhi	r6, [r8, ip]
   13b24:	add	ip, r4, #2
   13b28:	mov	r6, r3
   13b2c:	cmp	sl, ip
   13b30:	add	r4, r4, #3
   13b34:	strbhi	r0, [r8, ip]
   13b38:	cmp	sl, r4
   13b3c:	movhi	r3, #92	; 0x5c
   13b40:	strbhi	r3, [r8, r4]
   13b44:	add	r3, r4, #1
   13b48:	cmp	sl, r3
   13b4c:	bls	13b5c <__assert_fail@plt+0x2c5c>
   13b50:	lsr	ip, r5, #6
   13b54:	add	ip, ip, #48	; 0x30
   13b58:	strb	ip, [r8, r3]
   13b5c:	add	r3, r4, #2
   13b60:	cmp	sl, r3
   13b64:	bls	13b74 <__assert_fail@plt+0x2c74>
   13b68:	ubfx	ip, r5, #3, #3
   13b6c:	add	ip, ip, #48	; 0x30
   13b70:	strb	ip, [r8, r3]
   13b74:	add	r9, r9, #1
   13b78:	and	r5, r5, #7
   13b7c:	cmp	r9, r1
   13b80:	add	r5, r5, #48	; 0x30
   13b84:	add	r4, r4, #3
   13b88:	bcs	13d3c <__assert_fail@plt+0x2e3c>
   13b8c:	mov	ip, r2
   13b90:	cmp	sl, r4
   13b94:	strbhi	r5, [r8, r4]
   13b98:	add	r4, r4, #1
   13b9c:	ldrb	r5, [lr, #1]!
   13ba0:	cmp	r2, #0
   13ba4:	bne	13ae8 <__assert_fail@plt+0x2be8>
   13ba8:	eor	r3, ip, #1
   13bac:	cmp	r7, #0
   13bb0:	and	r3, r3, r6
   13bb4:	uxtb	r3, r3
   13bb8:	beq	13bcc <__assert_fail@plt+0x2ccc>
   13bbc:	cmp	sl, r4
   13bc0:	movhi	r7, #92	; 0x5c
   13bc4:	strbhi	r7, [r8, r4]
   13bc8:	add	r4, r4, #1
   13bcc:	add	r9, r9, #1
   13bd0:	cmp	r9, r1
   13bd4:	bcs	13d24 <__assert_fail@plt+0x2e24>
   13bd8:	cmp	r3, #0
   13bdc:	beq	13d5c <__assert_fail@plt+0x2e5c>
   13be0:	cmp	sl, r4
   13be4:	add	r3, r4, #1
   13be8:	mov	r7, #0
   13bec:	strbhi	r0, [r8, r4]
   13bf0:	cmp	sl, r3
   13bf4:	add	r4, r4, #2
   13bf8:	mov	r6, r7
   13bfc:	strbhi	r0, [r8, r3]
   13c00:	b	13b90 <__assert_fail@plt+0x2c90>
   13c04:	cmp	r1, #1
   13c08:	beq	13a7c <__assert_fail@plt+0x2b7c>
   13c0c:	add	r2, r4, #1
   13c10:	add	r3, sl, r1
   13c14:	add	r2, sl, r2
   13c18:	add	r4, r3, r4
   13c1c:	ldrb	r3, [r2], #1
   13c20:	sub	r3, r3, #91	; 0x5b
   13c24:	cmp	r3, #33	; 0x21
   13c28:	ldrls	pc, [pc, r3, lsl #2]
   13c2c:	b	13cb8 <__assert_fail@plt+0x2db8>
   13c30:	andeq	r3, r1, r4, asr #25
   13c34:	andeq	r3, r1, r4, asr #25
   13c38:			; <UNDEFINED> instruction: 0x00013cb8
   13c3c:	andeq	r3, r1, r4, asr #25
   13c40:			; <UNDEFINED> instruction: 0x00013cb8
   13c44:	andeq	r3, r1, r4, asr #25
   13c48:			; <UNDEFINED> instruction: 0x00013cb8
   13c4c:			; <UNDEFINED> instruction: 0x00013cb8
   13c50:			; <UNDEFINED> instruction: 0x00013cb8
   13c54:			; <UNDEFINED> instruction: 0x00013cb8
   13c58:			; <UNDEFINED> instruction: 0x00013cb8
   13c5c:			; <UNDEFINED> instruction: 0x00013cb8
   13c60:			; <UNDEFINED> instruction: 0x00013cb8
   13c64:			; <UNDEFINED> instruction: 0x00013cb8
   13c68:			; <UNDEFINED> instruction: 0x00013cb8
   13c6c:			; <UNDEFINED> instruction: 0x00013cb8
   13c70:			; <UNDEFINED> instruction: 0x00013cb8
   13c74:			; <UNDEFINED> instruction: 0x00013cb8
   13c78:			; <UNDEFINED> instruction: 0x00013cb8
   13c7c:			; <UNDEFINED> instruction: 0x00013cb8
   13c80:			; <UNDEFINED> instruction: 0x00013cb8
   13c84:			; <UNDEFINED> instruction: 0x00013cb8
   13c88:			; <UNDEFINED> instruction: 0x00013cb8
   13c8c:			; <UNDEFINED> instruction: 0x00013cb8
   13c90:			; <UNDEFINED> instruction: 0x00013cb8
   13c94:			; <UNDEFINED> instruction: 0x00013cb8
   13c98:			; <UNDEFINED> instruction: 0x00013cb8
   13c9c:			; <UNDEFINED> instruction: 0x00013cb8
   13ca0:			; <UNDEFINED> instruction: 0x00013cb8
   13ca4:			; <UNDEFINED> instruction: 0x00013cb8
   13ca8:			; <UNDEFINED> instruction: 0x00013cb8
   13cac:			; <UNDEFINED> instruction: 0x00013cb8
   13cb0:			; <UNDEFINED> instruction: 0x00013cb8
   13cb4:	andeq	r3, r1, r4, asr #25
   13cb8:	cmp	r4, r2
   13cbc:	bne	13c1c <__assert_fail@plt+0x2d1c>
   13cc0:	b	13a7c <__assert_fail@plt+0x2b7c>
   13cc4:	mov	r8, #2
   13cc8:	ldr	fp, [sp, #76]	; 0x4c
   13ccc:	ldr	sl, [sp, #80]	; 0x50
   13cd0:	b	131fc <__assert_fail@plt+0x22fc>
   13cd4:	ldr	r2, [sp, #40]	; 0x28
   13cd8:	str	fp, [sp, #152]	; 0x98
   13cdc:	mov	fp, r8
   13ce0:	ldr	r8, [sp, #152]	; 0x98
   13ce4:	and	r2, r2, r3
   13ce8:	str	r2, [sp, #40]	; 0x28
   13cec:	b	131fc <__assert_fail@plt+0x22fc>
   13cf0:	cmp	sl, r4
   13cf4:	movls	r0, r4
   13cf8:	bls	1332c <__assert_fail@plt+0x242c>
   13cfc:	ldr	r3, [sp, #48]	; 0x30
   13d00:	b	1331c <__assert_fail@plt+0x241c>
   13d04:	str	sl, [sp, #72]	; 0x48
   13d08:	ldr	sl, [sp, #44]	; 0x2c
   13d0c:	b	1316c <__assert_fail@plt+0x226c>
   13d10:	str	r3, [sp, #40]	; 0x28
   13d14:	str	fp, [sp, #152]	; 0x98
   13d18:	mov	fp, r8
   13d1c:	ldr	r8, [sp, #152]	; 0x98
   13d20:	b	131fc <__assert_fail@plt+0x22fc>
   13d24:	str	r6, [sp, #48]	; 0x30
   13d28:	ldr	r6, [sp, #52]	; 0x34
   13d2c:	b	1319c <__assert_fail@plt+0x229c>
   13d30:	mov	r6, #0
   13d34:	ldr	r2, [sp, #40]	; 0x28
   13d38:	b	13acc <__assert_fail@plt+0x2bcc>
   13d3c:	str	r6, [sp, #48]	; 0x30
   13d40:	ldr	r6, [sp, #52]	; 0x34
   13d44:	b	12f88 <__assert_fail@plt+0x2088>
   13d48:	add	r4, r4, #4
   13d4c:	mov	r6, #0
   13d50:	str	r3, [sp, #48]	; 0x30
   13d54:	mov	r5, #48	; 0x30
   13d58:	b	12f10 <__assert_fail@plt+0x2010>
   13d5c:	mov	r7, r3
   13d60:	b	13b90 <__assert_fail@plt+0x2c90>
   13d64:	mov	r3, #1
   13d68:	movw	r2, #28080	; 0x6db0
   13d6c:	movt	r2, #1
   13d70:	mov	r4, r3
   13d74:	str	r3, [sp, #36]	; 0x24
   13d78:	str	r3, [sp, #40]	; 0x28
   13d7c:	str	sl, [sp, #44]	; 0x2c
   13d80:	str	sl, [sp, #48]	; 0x30
   13d84:	str	r3, [sp, #56]	; 0x38
   13d88:	str	r2, [sp, #60]	; 0x3c
   13d8c:	str	sl, [sp, #68]	; 0x44
   13d90:	str	sl, [sp, #72]	; 0x48
   13d94:	b	12a38 <__assert_fail@plt+0x1b38>
   13d98:	mov	r3, r6
   13d9c:	mov	r5, #48	; 0x30
   13da0:	mov	r6, #0
   13da4:	b	12f10 <__assert_fail@plt+0x2010>
   13da8:	mov	r5, r3
   13dac:	b	13288 <__assert_fail@plt+0x2388>
   13db0:	cmp	sl, r4
   13db4:	mov	r5, #48	; 0x30
   13db8:	movhi	r3, #48	; 0x30
   13dbc:	strbhi	r3, [r8, r4]
   13dc0:	add	r3, r0, #2
   13dc4:	add	r4, r0, #3
   13dc8:	cmp	sl, r3
   13dcc:	movhi	r1, #48	; 0x30
   13dd0:	strbhi	r1, [r8, r3]
   13dd4:	b	13360 <__assert_fail@plt+0x2460>
   13dd8:	str	fp, [sp, #152]	; 0x98
   13ddc:	mov	fp, r8
   13de0:	ldr	r8, [sp, #152]	; 0x98
   13de4:	b	131fc <__assert_fail@plt+0x22fc>
   13de8:	ldr	r3, [sp, #164]	; 0xa4
   13dec:	ldrb	r3, [r3]
   13df0:	cmp	r3, #0
   13df4:	beq	12a08 <__assert_fail@plt+0x1b08>
   13df8:	ldr	r2, [sp, #164]	; 0xa4
   13dfc:	cmp	sl, r4
   13e00:	strbhi	r3, [fp, r4]
   13e04:	add	r4, r4, #1
   13e08:	ldrb	r3, [r2, #1]!
   13e0c:	cmp	r3, #0
   13e10:	bne	13dfc <__assert_fail@plt+0x2efc>
   13e14:	b	12a08 <__assert_fail@plt+0x1b08>
   13e18:	mov	ip, r5
   13e1c:	mov	r6, #0
   13e20:	ldr	r2, [sp, #40]	; 0x28
   13e24:	ldr	r8, [sp, #76]	; 0x4c
   13e28:	ldr	sl, [sp, #80]	; 0x50
   13e2c:	ldr	r5, [sp, #84]	; 0x54
   13e30:	ldr	r7, [sp, #88]	; 0x58
   13e34:	ldr	r4, [sp, #92]	; 0x5c
   13e38:	b	13ac4 <__assert_fail@plt+0x2bc4>
   13e3c:	ldr	r2, [sp, #32]
   13e40:	ldrb	r1, [r2, r3]
   13e44:	sub	r2, r1, #33	; 0x21
   13e48:	cmp	r2, #29
   13e4c:	ldrls	pc, [pc, r2, lsl #2]
   13e50:	b	13f2c <__assert_fail@plt+0x302c>
   13e54:	andeq	r3, r1, ip, asr #29
   13e58:	andeq	r3, r1, ip, lsr #30
   13e5c:	andeq	r3, r1, ip, lsr #30
   13e60:	andeq	r3, r1, ip, lsr #30
   13e64:	andeq	r3, r1, ip, lsr #30
   13e68:	andeq	r3, r1, ip, lsr #30
   13e6c:	andeq	r3, r1, ip, asr #29
   13e70:	andeq	r3, r1, ip, asr #29
   13e74:	andeq	r3, r1, ip, asr #29
   13e78:	andeq	r3, r1, ip, lsr #30
   13e7c:	andeq	r3, r1, ip, lsr #30
   13e80:	andeq	r3, r1, ip, lsr #30
   13e84:	andeq	r3, r1, ip, asr #29
   13e88:	andeq	r3, r1, ip, lsr #30
   13e8c:	andeq	r3, r1, ip, asr #29
   13e90:	andeq	r3, r1, ip, lsr #30
   13e94:	andeq	r3, r1, ip, lsr #30
   13e98:	andeq	r3, r1, ip, lsr #30
   13e9c:	andeq	r3, r1, ip, lsr #30
   13ea0:	andeq	r3, r1, ip, lsr #30
   13ea4:	andeq	r3, r1, ip, lsr #30
   13ea8:	andeq	r3, r1, ip, lsr #30
   13eac:	andeq	r3, r1, ip, lsr #30
   13eb0:	andeq	r3, r1, ip, lsr #30
   13eb4:	andeq	r3, r1, ip, lsr #30
   13eb8:	andeq	r3, r1, ip, lsr #30
   13ebc:	andeq	r3, r1, ip, lsr #30
   13ec0:	andeq	r3, r1, ip, asr #29
   13ec4:	andeq	r3, r1, ip, asr #29
   13ec8:	andeq	r3, r1, ip, asr #29
   13ecc:	ldr	r2, [sp, #44]	; 0x2c
   13ed0:	cmp	r2, #0
   13ed4:	bne	14030 <__assert_fail@plt+0x3130>
   13ed8:	cmp	sl, r4
   13edc:	mov	r5, r1
   13ee0:	movhi	r2, #63	; 0x3f
   13ee4:	mov	r9, r3
   13ee8:	strbhi	r2, [r8, r4]
   13eec:	add	r2, r4, #1
   13ef0:	cmp	sl, r2
   13ef4:	movhi	r0, #34	; 0x22
   13ef8:	strbhi	r0, [r8, r2]
   13efc:	add	r2, r4, #2
   13f00:	cmp	sl, r2
   13f04:	movhi	r0, #34	; 0x22
   13f08:	strbhi	r0, [r8, r2]
   13f0c:	add	r2, r4, #3
   13f10:	add	r4, r4, #4
   13f14:	cmp	sl, r2
   13f18:	movhi	r0, #63	; 0x3f
   13f1c:	strbhi	r0, [r8, r2]
   13f20:	mov	r2, #0
   13f24:	mov	r6, r2
   13f28:	b	13360 <__assert_fail@plt+0x2460>
   13f2c:	mov	r3, #0
   13f30:	mov	r6, r3
   13f34:	b	12ed8 <__assert_fail@plt+0x1fd8>
   13f38:	ldr	r0, [sp, #28]
   13f3c:	mov	r1, r4
   13f40:	mov	r2, r7
   13f44:	mov	r3, r5
   13f48:	mov	ip, r5
   13f4c:	ldr	r8, [sp, #76]	; 0x4c
   13f50:	ldr	sl, [sp, #80]	; 0x50
   13f54:	cmp	r1, r0
   13f58:	ldr	r5, [sp, #84]	; 0x54
   13f5c:	ldr	r7, [sp, #88]	; 0x58
   13f60:	ldr	r4, [sp, #92]	; 0x5c
   13f64:	bcs	13f98 <__assert_fail@plt+0x3098>
   13f68:	ldrb	r6, [r2]
   13f6c:	cmp	r6, #0
   13f70:	bne	13f84 <__assert_fail@plt+0x3084>
   13f74:	b	140b8 <__assert_fail@plt+0x31b8>
   13f78:	ldrb	r6, [r2, #1]!
   13f7c:	cmp	r6, #0
   13f80:	beq	14040 <__assert_fail@plt+0x3140>
   13f84:	add	r3, r3, #1
   13f88:	add	r1, r9, r3
   13f8c:	cmp	r1, r0
   13f90:	bcc	13f78 <__assert_fail@plt+0x3078>
   13f94:	mov	ip, r3
   13f98:	mov	r6, #0
   13f9c:	ldr	r2, [sp, #40]	; 0x28
   13fa0:	b	13ac4 <__assert_fail@plt+0x2bc4>
   13fa4:	mov	r3, #1
   13fa8:	mov	r2, #0
   13fac:	mov	r4, r2
   13fb0:	str	r3, [sp, #36]	; 0x24
   13fb4:	str	r3, [sp, #40]	; 0x28
   13fb8:	str	r3, [sp, #44]	; 0x2c
   13fbc:	str	r2, [sp, #48]	; 0x30
   13fc0:	str	r3, [sp, #56]	; 0x38
   13fc4:	movw	r3, #28080	; 0x6db0
   13fc8:	movt	r3, #1
   13fcc:	str	r3, [sp, #60]	; 0x3c
   13fd0:	str	r2, [sp, #68]	; 0x44
   13fd4:	str	r2, [sp, #72]	; 0x48
   13fd8:	b	12a38 <__assert_fail@plt+0x1b38>
   13fdc:	mov	r2, r3
   13fe0:	ldr	r3, [sp, #60]	; 0x3c
   13fe4:	cmp	r3, #0
   13fe8:	moveq	r2, #0
   13fec:	andne	r2, r2, #1
   13ff0:	cmp	r2, #0
   13ff4:	beq	14020 <__assert_fail@plt+0x3120>
   13ff8:	mov	r2, r3
   13ffc:	ldrb	r3, [r3]
   14000:	cmp	r3, #0
   14004:	beq	14020 <__assert_fail@plt+0x3120>
   14008:	cmp	sl, r4
   1400c:	strbhi	r3, [fp, r4]
   14010:	add	r4, r4, #1
   14014:	ldrb	r3, [r2, #1]!
   14018:	cmp	r3, #0
   1401c:	bne	14008 <__assert_fail@plt+0x3108>
   14020:	cmp	sl, r4
   14024:	movhi	r3, #0
   14028:	strbhi	r3, [fp, r4]
   1402c:	b	13240 <__assert_fail@plt+0x2340>
   14030:	str	fp, [sp, #152]	; 0x98
   14034:	mov	fp, r8
   14038:	ldr	r8, [sp, #152]	; 0x98
   1403c:	b	13208 <__assert_fail@plt+0x2308>
   14040:	mov	ip, r3
   14044:	ldr	r2, [sp, #40]	; 0x28
   14048:	b	13ac4 <__assert_fail@plt+0x2bc4>
   1404c:	str	fp, [sp, #152]	; 0x98
   14050:	mov	fp, r8
   14054:	ldr	r8, [sp, #152]	; 0x98
   14058:	sub	r3, r8, #2
   1405c:	clz	r3, r3
   14060:	lsr	r3, r3, #5
   14064:	str	r3, [sp, #40]	; 0x28
   14068:	b	131fc <__assert_fail@plt+0x22fc>
   1406c:	mov	ip, #5
   14070:	ldr	r3, [sp, #28]
   14074:	str	ip, [sp]
   14078:	ldr	r2, [sp, #156]	; 0x9c
   1407c:	ldr	ip, [sp, #164]	; 0xa4
   14080:	ldr	r0, [sp, #160]	; 0xa0
   14084:	str	r2, [sp, #4]
   14088:	ldr	r2, [sp, #32]
   1408c:	ldr	r1, [sp, #72]	; 0x48
   14090:	str	ip, [sp, #12]
   14094:	ldr	ip, [sp, #168]	; 0xa8
   14098:	str	r0, [sp, #8]
   1409c:	mov	r0, fp
   140a0:	str	ip, [sp, #16]
   140a4:	bl	12950 <__assert_fail@plt+0x1a50>
   140a8:	mov	r4, r0
   140ac:	b	13240 <__assert_fail@plt+0x2340>
   140b0:	mov	r8, #2
   140b4:	b	131fc <__assert_fail@plt+0x22fc>
   140b8:	ldr	r2, [sp, #40]	; 0x28
   140bc:	b	13ac4 <__assert_fail@plt+0x2bc4>
   140c0:	mov	r3, #0
   140c4:	mov	r2, #1
   140c8:	mov	r4, r3
   140cc:	strd	r2, [sp, #36]	; 0x24
   140d0:	strd	r2, [sp, #44]	; 0x2c
   140d4:	str	r2, [sp, #56]	; 0x38
   140d8:	str	r3, [sp, #68]	; 0x44
   140dc:	str	r3, [sp, #72]	; 0x48
   140e0:	movw	r3, #28100	; 0x6dc4
   140e4:	movt	r3, #1
   140e8:	str	r3, [sp, #60]	; 0x3c
   140ec:	b	12a38 <__assert_fail@plt+0x1b38>
   140f0:	mov	r3, #0
   140f4:	mov	r1, #1
   140f8:	mov	r2, r3
   140fc:	str	r1, [sp, #36]	; 0x24
   14100:	str	r3, [sp, #48]	; 0x30
   14104:	str	sl, [sp, #72]	; 0x48
   14108:	b	13040 <__assert_fail@plt+0x2140>
   1410c:	bl	10ef4 <abort@plt>
   14110:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14114:	mov	r4, r0
   14118:	mov	r5, r3
   1411c:	strd	r6, [sp, #8]
   14120:	movw	r7, #33008	; 0x80f0
   14124:	movt	r7, #2
   14128:	strd	r8, [sp, #16]
   1412c:	strd	sl, [sp, #24]
   14130:	mov	sl, r1
   14134:	mov	fp, r2
   14138:	str	lr, [sp, #32]
   1413c:	sub	sp, sp, #60	; 0x3c
   14140:	bl	10e1c <__errno_location@plt>
   14144:	mov	r8, r0
   14148:	cmn	r4, #-2147483647	; 0x80000001
   1414c:	ldr	r6, [r7]
   14150:	movne	r0, #0
   14154:	moveq	r0, #1
   14158:	ldr	r3, [r8]
   1415c:	orrs	r0, r0, r4, lsr #31
   14160:	str	r3, [sp, #28]
   14164:	bne	142f4 <__assert_fail@plt+0x33f4>
   14168:	ldr	r3, [r7, #4]
   1416c:	cmp	r3, r4
   14170:	bgt	141d0 <__assert_fail@plt+0x32d0>
   14174:	add	r1, r7, #8
   14178:	sub	r2, r4, r3
   1417c:	str	r3, [sp, #52]	; 0x34
   14180:	cmp	r6, r1
   14184:	add	r2, r2, #1
   14188:	beq	142cc <__assert_fail@plt+0x33cc>
   1418c:	mov	r1, #8
   14190:	mov	r0, r6
   14194:	mvn	r3, #-2147483648	; 0x80000000
   14198:	str	r1, [sp]
   1419c:	add	r1, sp, #52	; 0x34
   141a0:	bl	15174 <__assert_fail@plt+0x4274>
   141a4:	mov	r6, r0
   141a8:	str	r0, [r7]
   141ac:	ldr	r0, [r7, #4]
   141b0:	mov	r1, #0
   141b4:	ldr	r2, [sp, #52]	; 0x34
   141b8:	sub	r2, r2, r0
   141bc:	add	r0, r6, r0, lsl #3
   141c0:	lsl	r2, r2, #3
   141c4:	bl	10e34 <memset@plt>
   141c8:	ldr	r3, [sp, #52]	; 0x34
   141cc:	str	r3, [r7, #4]
   141d0:	ldr	r1, [r5, #4]
   141d4:	add	r0, r6, r4, lsl #3
   141d8:	add	ip, r5, #8
   141dc:	mov	r3, fp
   141e0:	mov	r2, sl
   141e4:	ldr	r7, [r0, #4]
   141e8:	str	r0, [sp, #36]	; 0x24
   141ec:	str	ip, [sp, #40]	; 0x28
   141f0:	orr	r0, r1, #1
   141f4:	ldr	r9, [r6, r4, lsl #3]
   141f8:	str	ip, [sp, #8]
   141fc:	ldr	lr, [r5, #44]	; 0x2c
   14200:	str	r0, [sp, #4]
   14204:	ldr	ip, [r5]
   14208:	mov	r1, r9
   1420c:	str	ip, [sp, #32]
   14210:	ldr	ip, [r5, #40]	; 0x28
   14214:	str	ip, [sp, #12]
   14218:	ldr	ip, [sp, #32]
   1421c:	str	lr, [sp, #16]
   14220:	str	r0, [sp, #44]	; 0x2c
   14224:	mov	r0, r7
   14228:	str	ip, [sp]
   1422c:	bl	12950 <__assert_fail@plt+0x1a50>
   14230:	cmp	r9, r0
   14234:	bhi	142a4 <__assert_fail@plt+0x33a4>
   14238:	add	r9, r0, #1
   1423c:	movw	r3, #33124	; 0x8164
   14240:	movt	r3, #2
   14244:	cmp	r7, r3
   14248:	str	r9, [r6, r4, lsl #3]
   1424c:	beq	14258 <__assert_fail@plt+0x3358>
   14250:	mov	r0, r7
   14254:	bl	125b0 <__assert_fail@plt+0x16b0>
   14258:	mov	r0, r9
   1425c:	bl	14fc4 <__assert_fail@plt+0x40c4>
   14260:	ldr	ip, [r5]
   14264:	mov	r3, fp
   14268:	mov	r2, sl
   1426c:	mov	r1, r9
   14270:	mov	r7, r0
   14274:	ldr	lr, [sp, #36]	; 0x24
   14278:	ldr	r4, [r5, #40]	; 0x28
   1427c:	str	r0, [lr, #4]
   14280:	ldr	lr, [r5, #44]	; 0x2c
   14284:	str	ip, [sp]
   14288:	ldr	ip, [sp, #44]	; 0x2c
   1428c:	str	ip, [sp, #4]
   14290:	ldr	ip, [sp, #40]	; 0x28
   14294:	str	r4, [sp, #12]
   14298:	str	lr, [sp, #16]
   1429c:	str	ip, [sp, #8]
   142a0:	bl	12950 <__assert_fail@plt+0x1a50>
   142a4:	ldr	r3, [sp, #28]
   142a8:	mov	r0, r7
   142ac:	str	r3, [r8]
   142b0:	add	sp, sp, #60	; 0x3c
   142b4:	ldrd	r4, [sp]
   142b8:	ldrd	r6, [sp, #8]
   142bc:	ldrd	r8, [sp, #16]
   142c0:	ldrd	sl, [sp, #24]
   142c4:	add	sp, sp, #32
   142c8:	pop	{pc}		; (ldr pc, [sp], #4)
   142cc:	mov	r1, #8
   142d0:	mvn	r3, #-2147483648	; 0x80000000
   142d4:	str	r1, [sp]
   142d8:	add	r1, sp, #52	; 0x34
   142dc:	bl	15174 <__assert_fail@plt+0x4274>
   142e0:	ldrd	r2, [r7, #8]
   142e4:	mov	r6, r0
   142e8:	str	r0, [r7]
   142ec:	strd	r2, [r0]
   142f0:	b	141ac <__assert_fail@plt+0x32ac>
   142f4:	bl	10ef4 <abort@plt>
   142f8:	strd	r4, [sp, #-16]!
   142fc:	mov	r5, r0
   14300:	str	r6, [sp, #8]
   14304:	str	lr, [sp, #12]
   14308:	bl	10e1c <__errno_location@plt>
   1430c:	mov	r4, r0
   14310:	cmp	r5, #0
   14314:	ldr	r0, [pc, #32]	; 1433c <__assert_fail@plt+0x343c>
   14318:	mov	r1, #48	; 0x30
   1431c:	movne	r0, r5
   14320:	ldr	r6, [r4]
   14324:	bl	152ec <__assert_fail@plt+0x43ec>
   14328:	str	r6, [r4]
   1432c:	ldrd	r4, [sp]
   14330:	ldr	r6, [sp, #8]
   14334:	add	sp, sp, #12
   14338:	pop	{pc}		; (ldr pc, [sp], #4)
   1433c:	andeq	r8, r2, r4, ror #4
   14340:	ldr	r3, [pc, #12]	; 14354 <__assert_fail@plt+0x3454>
   14344:	cmp	r0, #0
   14348:	moveq	r0, r3
   1434c:	ldr	r0, [r0]
   14350:	bx	lr
   14354:	andeq	r8, r2, r4, ror #4
   14358:	ldr	r3, [pc, #12]	; 1436c <__assert_fail@plt+0x346c>
   1435c:	cmp	r0, #0
   14360:	moveq	r0, r3
   14364:	str	r1, [r0]
   14368:	bx	lr
   1436c:	andeq	r8, r2, r4, ror #4
   14370:	ldr	r3, [pc, #52]	; 143ac <__assert_fail@plt+0x34ac>
   14374:	cmp	r0, #0
   14378:	push	{lr}		; (str lr, [sp, #-4]!)
   1437c:	lsr	lr, r1, #5
   14380:	and	r1, r1, #31
   14384:	moveq	r0, r3
   14388:	add	r3, r0, #8
   1438c:	ldr	ip, [r3, lr, lsl #2]
   14390:	lsr	r0, ip, r1
   14394:	eor	r2, r2, r0
   14398:	and	r0, r0, #1
   1439c:	and	r2, r2, #1
   143a0:	eor	r1, ip, r2, lsl r1
   143a4:	str	r1, [r3, lr, lsl #2]
   143a8:	pop	{pc}		; (ldr pc, [sp], #4)
   143ac:	andeq	r8, r2, r4, ror #4
   143b0:	ldr	r3, [pc, #16]	; 143c8 <__assert_fail@plt+0x34c8>
   143b4:	cmp	r0, #0
   143b8:	movne	r3, r0
   143bc:	ldr	r0, [r3, #4]
   143c0:	str	r1, [r3, #4]
   143c4:	bx	lr
   143c8:	andeq	r8, r2, r4, ror #4
   143cc:	ldr	r3, [pc, #48]	; 14404 <__assert_fail@plt+0x3504>
   143d0:	cmp	r0, #0
   143d4:	mov	ip, #10
   143d8:	moveq	r0, r3
   143dc:	cmp	r2, #0
   143e0:	cmpne	r1, #0
   143e4:	str	ip, [r0]
   143e8:	beq	143f8 <__assert_fail@plt+0x34f8>
   143ec:	str	r1, [r0, #40]	; 0x28
   143f0:	str	r2, [r0, #44]	; 0x2c
   143f4:	bx	lr
   143f8:	str	r4, [sp, #-8]!
   143fc:	str	lr, [sp, #4]
   14400:	bl	10ef4 <abort@plt>
   14404:	andeq	r8, r2, r4, ror #4
   14408:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1440c:	strd	r6, [sp, #8]
   14410:	mov	r7, r0
   14414:	mov	r6, r1
   14418:	strd	r8, [sp, #16]
   1441c:	mov	r8, r2
   14420:	mov	r9, r3
   14424:	str	lr, [sp, #24]
   14428:	sub	sp, sp, #28
   1442c:	ldr	r4, [sp, #56]	; 0x38
   14430:	ldr	ip, [pc, #104]	; 144a0 <__assert_fail@plt+0x35a0>
   14434:	cmp	r4, #0
   14438:	moveq	r4, ip
   1443c:	bl	10e1c <__errno_location@plt>
   14440:	ldr	ip, [r4, #44]	; 0x2c
   14444:	mov	r5, r0
   14448:	mov	r1, r6
   1444c:	add	lr, r4, #8
   14450:	mov	r3, r9
   14454:	ldr	r6, [r5]
   14458:	mov	r2, r8
   1445c:	mov	r0, r7
   14460:	str	ip, [sp, #16]
   14464:	ldr	ip, [r4, #40]	; 0x28
   14468:	str	lr, [sp, #8]
   1446c:	str	ip, [sp, #12]
   14470:	ldr	ip, [r4, #4]
   14474:	str	ip, [sp, #4]
   14478:	ldr	ip, [r4]
   1447c:	str	ip, [sp]
   14480:	bl	12950 <__assert_fail@plt+0x1a50>
   14484:	str	r6, [r5]
   14488:	add	sp, sp, #28
   1448c:	ldrd	r4, [sp]
   14490:	ldrd	r6, [sp, #8]
   14494:	ldrd	r8, [sp, #16]
   14498:	add	sp, sp, #24
   1449c:	pop	{pc}		; (ldr pc, [sp], #4)
   144a0:	andeq	r8, r2, r4, ror #4
   144a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   144a8:	cmp	r3, #0
   144ac:	ldr	r4, [pc, #220]	; 14590 <__assert_fail@plt+0x3690>
   144b0:	movne	r4, r3
   144b4:	strd	r6, [sp, #8]
   144b8:	mov	r6, r2
   144bc:	strd	r8, [sp, #16]
   144c0:	mov	r9, r0
   144c4:	strd	sl, [sp, #24]
   144c8:	mov	sl, r1
   144cc:	str	lr, [sp, #32]
   144d0:	sub	sp, sp, #44	; 0x2c
   144d4:	bl	10e1c <__errno_location@plt>
   144d8:	ldr	r5, [r4, #4]
   144dc:	mov	r7, r0
   144e0:	mov	r1, #0
   144e4:	add	r8, r4, #8
   144e8:	mov	r3, sl
   144ec:	ldr	ip, [r4, #44]	; 0x2c
   144f0:	mov	r2, r9
   144f4:	mov	r0, r1
   144f8:	ldr	lr, [r7]
   144fc:	cmp	r6, r1
   14500:	orreq	r5, r5, #1
   14504:	str	ip, [sp, #16]
   14508:	ldr	ip, [r4, #40]	; 0x28
   1450c:	stmib	sp, {r5, r8, ip}
   14510:	ldr	ip, [r4]
   14514:	str	lr, [sp, #28]
   14518:	str	ip, [sp]
   1451c:	bl	12950 <__assert_fail@plt+0x1a50>
   14520:	add	r1, r0, #1
   14524:	mov	fp, r0
   14528:	mov	r0, r1
   1452c:	str	r1, [sp, #36]	; 0x24
   14530:	bl	14fc4 <__assert_fail@plt+0x40c4>
   14534:	ldr	ip, [r4, #44]	; 0x2c
   14538:	mov	r3, sl
   1453c:	mov	r2, r9
   14540:	ldr	r1, [sp, #36]	; 0x24
   14544:	str	ip, [sp, #16]
   14548:	ldr	ip, [r4, #40]	; 0x28
   1454c:	str	r0, [sp, #32]
   14550:	stmib	sp, {r5, r8, ip}
   14554:	ldr	ip, [r4]
   14558:	str	ip, [sp]
   1455c:	bl	12950 <__assert_fail@plt+0x1a50>
   14560:	ldr	lr, [sp, #28]
   14564:	cmp	r6, #0
   14568:	ldr	r0, [sp, #32]
   1456c:	str	lr, [r7]
   14570:	strne	fp, [r6]
   14574:	add	sp, sp, #44	; 0x2c
   14578:	ldrd	r4, [sp]
   1457c:	ldrd	r6, [sp, #8]
   14580:	ldrd	r8, [sp, #16]
   14584:	ldrd	sl, [sp, #24]
   14588:	add	sp, sp, #32
   1458c:	pop	{pc}		; (ldr pc, [sp], #4)
   14590:	andeq	r8, r2, r4, ror #4
   14594:	mov	r3, r2
   14598:	mov	r2, #0
   1459c:	b	144a4 <__assert_fail@plt+0x35a4>
   145a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   145a4:	movw	r5, #33008	; 0x80f0
   145a8:	movt	r5, #2
   145ac:	ldr	r3, [r5, #4]
   145b0:	strd	r6, [sp, #8]
   145b4:	str	r8, [sp, #16]
   145b8:	str	lr, [sp, #20]
   145bc:	ldr	r7, [r5]
   145c0:	cmp	r3, #1
   145c4:	ble	145e8 <__assert_fail@plt+0x36e8>
   145c8:	mov	r4, #1
   145cc:	add	r6, r7, #4
   145d0:	ldr	r0, [r6, r4, lsl #3]
   145d4:	add	r4, r4, #1
   145d8:	bl	125b0 <__assert_fail@plt+0x16b0>
   145dc:	ldr	r3, [r5, #4]
   145e0:	cmp	r3, r4
   145e4:	bgt	145d0 <__assert_fail@plt+0x36d0>
   145e8:	ldr	r0, [r7, #4]
   145ec:	movw	r4, #33124	; 0x8164
   145f0:	movt	r4, #2
   145f4:	cmp	r0, r4
   145f8:	beq	1460c <__assert_fail@plt+0x370c>
   145fc:	bl	125b0 <__assert_fail@plt+0x16b0>
   14600:	mov	r3, #256	; 0x100
   14604:	str	r3, [r5, #8]
   14608:	str	r4, [r5, #12]
   1460c:	ldr	r4, [pc, #44]	; 14640 <__assert_fail@plt+0x3740>
   14610:	cmp	r7, r4
   14614:	beq	14624 <__assert_fail@plt+0x3724>
   14618:	mov	r0, r7
   1461c:	bl	125b0 <__assert_fail@plt+0x16b0>
   14620:	str	r4, [r5]
   14624:	mov	r3, #1
   14628:	ldrd	r6, [sp, #8]
   1462c:	str	r3, [r5, #4]
   14630:	ldrd	r4, [sp]
   14634:	ldr	r8, [sp, #16]
   14638:	add	sp, sp, #20
   1463c:	pop	{pc}		; (ldr pc, [sp], #4)
   14640:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14644:	ldr	r3, [pc, #4]	; 14650 <__assert_fail@plt+0x3750>
   14648:	mvn	r2, #0
   1464c:	b	14110 <__assert_fail@plt+0x3210>
   14650:	andeq	r8, r2, r4, ror #4
   14654:	ldr	r3, [pc]	; 1465c <__assert_fail@plt+0x375c>
   14658:	b	14110 <__assert_fail@plt+0x3210>
   1465c:	andeq	r8, r2, r4, ror #4
   14660:	mov	r1, r0
   14664:	ldr	r3, [pc, #8]	; 14674 <__assert_fail@plt+0x3774>
   14668:	mvn	r2, #0
   1466c:	mov	r0, #0
   14670:	b	14110 <__assert_fail@plt+0x3210>
   14674:	andeq	r8, r2, r4, ror #4
   14678:	mov	r2, r1
   1467c:	ldr	r3, [pc, #8]	; 1468c <__assert_fail@plt+0x378c>
   14680:	mov	r1, r0
   14684:	mov	r0, #0
   14688:	b	14110 <__assert_fail@plt+0x3210>
   1468c:	andeq	r8, r2, r4, ror #4
   14690:	strd	r4, [sp, #-12]!
   14694:	mov	r5, r2
   14698:	mov	r4, r0
   1469c:	str	lr, [sp, #8]
   146a0:	sub	sp, sp, #52	; 0x34
   146a4:	mov	r0, sp
   146a8:	bl	127ac <__assert_fail@plt+0x18ac>
   146ac:	mov	r3, sp
   146b0:	mov	r1, r5
   146b4:	mov	r0, r4
   146b8:	mvn	r2, #0
   146bc:	bl	14110 <__assert_fail@plt+0x3210>
   146c0:	add	sp, sp, #52	; 0x34
   146c4:	ldrd	r4, [sp]
   146c8:	add	sp, sp, #8
   146cc:	pop	{pc}		; (ldr pc, [sp], #4)
   146d0:	strd	r4, [sp, #-16]!
   146d4:	mov	r5, r2
   146d8:	mov	r4, r0
   146dc:	str	r6, [sp, #8]
   146e0:	mov	r6, r3
   146e4:	str	lr, [sp, #12]
   146e8:	sub	sp, sp, #48	; 0x30
   146ec:	mov	r0, sp
   146f0:	bl	127ac <__assert_fail@plt+0x18ac>
   146f4:	mov	r3, sp
   146f8:	mov	r2, r6
   146fc:	mov	r1, r5
   14700:	mov	r0, r4
   14704:	bl	14110 <__assert_fail@plt+0x3210>
   14708:	add	sp, sp, #48	; 0x30
   1470c:	ldrd	r4, [sp]
   14710:	ldr	r6, [sp, #8]
   14714:	add	sp, sp, #12
   14718:	pop	{pc}		; (ldr pc, [sp], #4)
   1471c:	mov	r2, r1
   14720:	mov	r1, r0
   14724:	mov	r0, #0
   14728:	b	14690 <__assert_fail@plt+0x3790>
   1472c:	mov	r3, r2
   14730:	mov	r2, r1
   14734:	mov	r1, r0
   14738:	mov	r0, #0
   1473c:	b	146d0 <__assert_fail@plt+0x37d0>
   14740:	ldr	ip, [pc, #140]	; 147d4 <__assert_fail@plt+0x38d4>
   14744:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14748:	ldrd	r4, [ip]
   1474c:	strd	r6, [sp, #8]
   14750:	ldrd	r6, [ip, #8]
   14754:	strd	r8, [sp, #16]
   14758:	lsr	r9, r2, #5
   1475c:	str	lr, [sp, #24]
   14760:	sub	sp, sp, #52	; 0x34
   14764:	and	lr, r2, #31
   14768:	add	r8, sp, #8
   1476c:	mov	r2, r1
   14770:	strd	r4, [sp]
   14774:	mov	r1, r0
   14778:	mov	r3, sp
   1477c:	strd	r6, [sp, #8]
   14780:	mov	r0, #0
   14784:	ldrd	r4, [ip, #16]
   14788:	ldrd	r6, [ip, #24]
   1478c:	strd	r4, [sp, #16]
   14790:	ldrd	r4, [ip, #32]
   14794:	strd	r6, [sp, #24]
   14798:	ldrd	r6, [ip, #40]	; 0x28
   1479c:	strd	r4, [sp, #32]
   147a0:	strd	r6, [sp, #40]	; 0x28
   147a4:	ldr	ip, [r8, r9, lsl #2]
   147a8:	mvn	r4, ip, lsr lr
   147ac:	and	r4, r4, #1
   147b0:	eor	lr, ip, r4, lsl lr
   147b4:	str	lr, [r8, r9, lsl #2]
   147b8:	bl	14110 <__assert_fail@plt+0x3210>
   147bc:	add	sp, sp, #52	; 0x34
   147c0:	ldrd	r4, [sp]
   147c4:	ldrd	r6, [sp, #8]
   147c8:	ldrd	r8, [sp, #16]
   147cc:	add	sp, sp, #24
   147d0:	pop	{pc}		; (ldr pc, [sp], #4)
   147d4:	andeq	r8, r2, r4, ror #4
   147d8:	mov	r2, r1
   147dc:	mvn	r1, #0
   147e0:	b	14740 <__assert_fail@plt+0x3840>
   147e4:	mov	r2, #58	; 0x3a
   147e8:	mvn	r1, #0
   147ec:	b	14740 <__assert_fail@plt+0x3840>
   147f0:	mov	r2, #58	; 0x3a
   147f4:	b	14740 <__assert_fail@plt+0x3840>
   147f8:	strd	r4, [sp, #-20]!	; 0xffffffec
   147fc:	strd	r6, [sp, #8]
   14800:	mov	r6, r0
   14804:	mov	r7, r2
   14808:	str	lr, [sp, #16]
   1480c:	sub	sp, sp, #100	; 0x64
   14810:	mov	r0, sp
   14814:	bl	127ac <__assert_fail@plt+0x18ac>
   14818:	ldrd	r4, [sp, #8]
   1481c:	mov	r1, r7
   14820:	mov	r0, r6
   14824:	add	r3, sp, #48	; 0x30
   14828:	mvn	r2, #0
   1482c:	ldrd	r6, [sp]
   14830:	strd	r4, [sp, #56]	; 0x38
   14834:	ldrd	r4, [sp, #16]
   14838:	strd	r6, [sp, #48]	; 0x30
   1483c:	ldrd	r6, [sp, #32]
   14840:	ldr	lr, [sp, #60]	; 0x3c
   14844:	strd	r4, [sp, #64]	; 0x40
   14848:	ldrd	r4, [sp, #24]
   1484c:	mvn	ip, lr
   14850:	and	ip, ip, #67108864	; 0x4000000
   14854:	strd	r4, [sp, #72]	; 0x48
   14858:	eor	ip, ip, lr
   1485c:	ldrd	r4, [sp, #40]	; 0x28
   14860:	str	ip, [sp, #60]	; 0x3c
   14864:	strd	r6, [sp, #80]	; 0x50
   14868:	strd	r4, [sp, #88]	; 0x58
   1486c:	bl	14110 <__assert_fail@plt+0x3210>
   14870:	add	sp, sp, #100	; 0x64
   14874:	ldrd	r4, [sp]
   14878:	ldrd	r6, [sp, #8]
   1487c:	add	sp, sp, #16
   14880:	pop	{pc}		; (ldr pc, [sp], #4)
   14884:	ldr	ip, [pc, #156]	; 14928 <__assert_fail@plt+0x3a28>
   14888:	cmp	r2, #0
   1488c:	cmpne	r1, #0
   14890:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14894:	strd	r6, [sp, #8]
   14898:	mov	r6, r2
   1489c:	str	r8, [sp, #16]
   148a0:	mov	r8, r3
   148a4:	strd	sl, [sp, #20]
   148a8:	ldrd	r4, [ip]
   148ac:	str	lr, [sp, #28]
   148b0:	sub	sp, sp, #48	; 0x30
   148b4:	mov	lr, #10
   148b8:	ldrd	r2, [ip, #8]
   148bc:	ldrd	sl, [ip, #16]
   148c0:	strd	r4, [sp]
   148c4:	ldrd	r4, [ip, #32]
   148c8:	str	lr, [sp]
   148cc:	strd	r2, [sp, #8]
   148d0:	strd	sl, [sp, #16]
   148d4:	ldrd	r2, [ip, #24]
   148d8:	ldrd	sl, [ip, #40]	; 0x28
   148dc:	strd	r2, [sp, #24]
   148e0:	strd	r4, [sp, #32]
   148e4:	strd	sl, [sp, #40]	; 0x28
   148e8:	beq	14924 <__assert_fail@plt+0x3a24>
   148ec:	ldr	r2, [sp, #80]	; 0x50
   148f0:	mov	r7, r1
   148f4:	mov	r3, sp
   148f8:	mov	r1, r8
   148fc:	str	r7, [sp, #40]	; 0x28
   14900:	str	r6, [sp, #44]	; 0x2c
   14904:	bl	14110 <__assert_fail@plt+0x3210>
   14908:	add	sp, sp, #48	; 0x30
   1490c:	ldrd	r4, [sp]
   14910:	ldrd	r6, [sp, #8]
   14914:	ldr	r8, [sp, #16]
   14918:	ldrd	sl, [sp, #20]
   1491c:	add	sp, sp, #28
   14920:	pop	{pc}		; (ldr pc, [sp], #4)
   14924:	bl	10ef4 <abort@plt>
   14928:	andeq	r8, r2, r4, ror #4
   1492c:	mvn	ip, #0
   14930:	push	{lr}		; (str lr, [sp, #-4]!)
   14934:	sub	sp, sp, #12
   14938:	str	ip, [sp]
   1493c:	bl	14884 <__assert_fail@plt+0x3984>
   14940:	add	sp, sp, #12
   14944:	pop	{pc}		; (ldr pc, [sp], #4)
   14948:	mvn	ip, #0
   1494c:	push	{lr}		; (str lr, [sp, #-4]!)
   14950:	sub	sp, sp, #12
   14954:	mov	r3, r2
   14958:	mov	r2, r1
   1495c:	mov	r1, r0
   14960:	mov	r0, #0
   14964:	str	ip, [sp]
   14968:	bl	14884 <__assert_fail@plt+0x3984>
   1496c:	add	sp, sp, #12
   14970:	pop	{pc}		; (ldr pc, [sp], #4)
   14974:	push	{lr}		; (str lr, [sp, #-4]!)
   14978:	sub	sp, sp, #12
   1497c:	str	r3, [sp]
   14980:	mov	r3, r2
   14984:	mov	r2, r1
   14988:	mov	r1, r0
   1498c:	mov	r0, #0
   14990:	bl	14884 <__assert_fail@plt+0x3984>
   14994:	add	sp, sp, #12
   14998:	pop	{pc}		; (ldr pc, [sp], #4)
   1499c:	ldr	r3, [pc]	; 149a4 <__assert_fail@plt+0x3aa4>
   149a0:	b	14110 <__assert_fail@plt+0x3210>
   149a4:	andeq	r8, r2, r0, lsl #2
   149a8:	mov	r2, r1
   149ac:	ldr	r3, [pc, #8]	; 149bc <__assert_fail@plt+0x3abc>
   149b0:	mov	r1, r0
   149b4:	mov	r0, #0
   149b8:	b	14110 <__assert_fail@plt+0x3210>
   149bc:	andeq	r8, r2, r0, lsl #2
   149c0:	ldr	r3, [pc, #4]	; 149cc <__assert_fail@plt+0x3acc>
   149c4:	mvn	r2, #0
   149c8:	b	14110 <__assert_fail@plt+0x3210>
   149cc:	andeq	r8, r2, r0, lsl #2
   149d0:	mov	r1, r0
   149d4:	ldr	r3, [pc, #8]	; 149e4 <__assert_fail@plt+0x3ae4>
   149d8:	mvn	r2, #0
   149dc:	mov	r0, #0
   149e0:	b	14110 <__assert_fail@plt+0x3210>
   149e4:	andeq	r8, r2, r0, lsl #2
   149e8:	cmp	r1, #0
   149ec:	strd	r4, [sp, #-16]!
   149f0:	mov	ip, r3
   149f4:	str	r6, [sp, #8]
   149f8:	mov	r4, r0
   149fc:	str	lr, [sp, #12]
   14a00:	sub	sp, sp, #32
   14a04:	ldr	r5, [sp, #48]	; 0x30
   14a08:	ldr	r6, [sp, #52]	; 0x34
   14a0c:	beq	14b50 <__assert_fail@plt+0x3c50>
   14a10:	mov	r3, r1
   14a14:	mov	r1, #1
   14a18:	stm	sp, {r2, ip}
   14a1c:	movw	r2, #28208	; 0x6e30
   14a20:	movt	r2, #1
   14a24:	bl	10e58 <__fprintf_chk@plt>
   14a28:	mov	r2, #5
   14a2c:	movw	r1, #28228	; 0x6e44
   14a30:	movt	r1, #1
   14a34:	mov	r0, #0
   14a38:	bl	10d38 <dcgettext@plt>
   14a3c:	movw	ip, #2022	; 0x7e6
   14a40:	mov	r3, r0
   14a44:	mov	r1, #1
   14a48:	movw	r2, #28956	; 0x711c
   14a4c:	movt	r2, #1
   14a50:	mov	r0, r4
   14a54:	str	ip, [sp]
   14a58:	bl	10e58 <__fprintf_chk@plt>
   14a5c:	mov	r1, r4
   14a60:	mov	r0, #10
   14a64:	bl	10d2c <fputc_unlocked@plt>
   14a68:	mov	r2, #5
   14a6c:	movw	r1, #28232	; 0x6e48
   14a70:	movt	r1, #1
   14a74:	mov	r0, #0
   14a78:	bl	10d38 <dcgettext@plt>
   14a7c:	mov	r2, r0
   14a80:	mov	r1, #1
   14a84:	movw	r3, #28404	; 0x6ef4
   14a88:	movt	r3, #1
   14a8c:	mov	r0, r4
   14a90:	bl	10e58 <__fprintf_chk@plt>
   14a94:	mov	r1, r4
   14a98:	mov	r0, #10
   14a9c:	bl	10d2c <fputc_unlocked@plt>
   14aa0:	cmp	r6, #9
   14aa4:	ldrls	pc, [pc, r6, lsl #2]
   14aa8:	b	14dbc <__assert_fail@plt+0x3ebc>
   14aac:	andeq	r4, r1, ip, lsr fp
   14ab0:	andeq	r4, r1, ip, ror #22
   14ab4:	andeq	r4, r1, r8, lsr #23
   14ab8:	andeq	r4, r1, r8, ror #23
   14abc:	andeq	r4, r1, r0, lsr ip
   14ac0:	andeq	r4, r1, r8, ror #24
   14ac4:			; <UNDEFINED> instruction: 0x00014cb0
   14ac8:	andeq	r4, r1, r4, lsl #26
   14acc:	andeq	r4, r1, ip, asr sp
   14ad0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ad4:	movw	r1, #28708	; 0x7024
   14ad8:	movt	r1, #1
   14adc:	mov	r2, #5
   14ae0:	mov	r0, #0
   14ae4:	bl	10d38 <dcgettext@plt>
   14ae8:	ldr	lr, [r5, #4]
   14aec:	mov	r2, r0
   14af0:	mov	r1, #1
   14af4:	mov	r0, r4
   14af8:	ldr	r3, [r5, #8]
   14afc:	ldr	ip, [r5, #32]
   14b00:	str	lr, [sp]
   14b04:	ldr	lr, [r5, #12]
   14b08:	str	ip, [sp, #28]
   14b0c:	ldr	ip, [r5, #28]
   14b10:	str	r3, [sp, #4]
   14b14:	ldr	r3, [r5, #16]
   14b18:	str	lr, [sp, #8]
   14b1c:	ldr	lr, [r5, #20]
   14b20:	str	ip, [sp, #24]
   14b24:	ldr	ip, [r5, #24]
   14b28:	str	r3, [sp, #12]
   14b2c:	ldr	r3, [r5]
   14b30:	str	lr, [sp, #16]
   14b34:	str	ip, [sp, #20]
   14b38:	bl	10e58 <__fprintf_chk@plt>
   14b3c:	add	sp, sp, #32
   14b40:	ldrd	r4, [sp]
   14b44:	ldr	r6, [sp, #8]
   14b48:	add	sp, sp, #12
   14b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b50:	mov	r3, r2
   14b54:	mov	r1, #1
   14b58:	str	ip, [sp]
   14b5c:	movw	r2, #28220	; 0x6e3c
   14b60:	movt	r2, #1
   14b64:	bl	10e58 <__fprintf_chk@plt>
   14b68:	b	14a28 <__assert_fail@plt+0x3b28>
   14b6c:	mov	r2, #5
   14b70:	movw	r1, #28440	; 0x6f18
   14b74:	movt	r1, #1
   14b78:	mov	r0, #0
   14b7c:	bl	10d38 <dcgettext@plt>
   14b80:	ldr	r3, [r5]
   14b84:	mov	r2, r0
   14b88:	mov	r1, #1
   14b8c:	mov	r0, r4
   14b90:	add	sp, sp, #32
   14b94:	ldrd	r4, [sp]
   14b98:	ldr	r6, [sp, #8]
   14b9c:	ldr	lr, [sp, #12]
   14ba0:	add	sp, sp, #16
   14ba4:	b	10e58 <__fprintf_chk@plt>
   14ba8:	mov	r2, #5
   14bac:	movw	r1, #28456	; 0x6f28
   14bb0:	movt	r1, #1
   14bb4:	mov	r0, #0
   14bb8:	bl	10d38 <dcgettext@plt>
   14bbc:	ldm	r5, {r3, ip}
   14bc0:	mov	r2, r0
   14bc4:	mov	r1, #1
   14bc8:	mov	r0, r4
   14bcc:	str	ip, [sp, #48]	; 0x30
   14bd0:	add	sp, sp, #32
   14bd4:	ldrd	r4, [sp]
   14bd8:	ldr	r6, [sp, #8]
   14bdc:	ldr	lr, [sp, #12]
   14be0:	add	sp, sp, #16
   14be4:	b	10e58 <__fprintf_chk@plt>
   14be8:	mov	r2, #5
   14bec:	movw	r1, #28480	; 0x6f40
   14bf0:	movt	r1, #1
   14bf4:	mov	r0, #0
   14bf8:	bl	10d38 <dcgettext@plt>
   14bfc:	ldm	r5, {r3, lr}
   14c00:	mov	r2, r0
   14c04:	mov	r1, #1
   14c08:	mov	r0, r4
   14c0c:	ldr	ip, [r5, #8]
   14c10:	str	lr, [sp, #48]	; 0x30
   14c14:	str	ip, [sp, #52]	; 0x34
   14c18:	add	sp, sp, #32
   14c1c:	ldrd	r4, [sp]
   14c20:	ldr	r6, [sp, #8]
   14c24:	ldr	lr, [sp, #12]
   14c28:	add	sp, sp, #16
   14c2c:	b	10e58 <__fprintf_chk@plt>
   14c30:	mov	r2, #5
   14c34:	movw	r1, #28508	; 0x6f5c
   14c38:	movt	r1, #1
   14c3c:	mov	r0, #0
   14c40:	bl	10d38 <dcgettext@plt>
   14c44:	ldmib	r5, {r3, ip, lr}
   14c48:	mov	r2, r0
   14c4c:	mov	r1, #1
   14c50:	mov	r0, r4
   14c54:	str	r3, [sp]
   14c58:	ldr	r3, [r5]
   14c5c:	stmib	sp, {ip, lr}
   14c60:	bl	10e58 <__fprintf_chk@plt>
   14c64:	b	14b3c <__assert_fail@plt+0x3c3c>
   14c68:	mov	r2, #5
   14c6c:	movw	r1, #28540	; 0x6f7c
   14c70:	movt	r1, #1
   14c74:	mov	r0, #0
   14c78:	bl	10d38 <dcgettext@plt>
   14c7c:	ldmib	r5, {ip, lr}
   14c80:	mov	r2, r0
   14c84:	mov	r1, #1
   14c88:	mov	r0, r4
   14c8c:	ldr	r3, [r5, #16]
   14c90:	str	ip, [sp]
   14c94:	ldr	ip, [r5, #12]
   14c98:	str	r3, [sp, #12]
   14c9c:	ldr	r3, [r5]
   14ca0:	str	lr, [sp, #4]
   14ca4:	str	ip, [sp, #8]
   14ca8:	bl	10e58 <__fprintf_chk@plt>
   14cac:	b	14b3c <__assert_fail@plt+0x3c3c>
   14cb0:	mov	r2, #5
   14cb4:	movw	r1, #28576	; 0x6fa0
   14cb8:	movt	r1, #1
   14cbc:	mov	r0, #0
   14cc0:	bl	10d38 <dcgettext@plt>
   14cc4:	ldr	lr, [r5, #4]
   14cc8:	mov	r2, r0
   14ccc:	mov	r1, #1
   14cd0:	mov	r0, r4
   14cd4:	ldr	r3, [r5, #8]
   14cd8:	ldr	ip, [r5, #20]
   14cdc:	str	lr, [sp]
   14ce0:	ldr	lr, [r5, #12]
   14ce4:	str	ip, [sp, #16]
   14ce8:	ldr	ip, [r5, #16]
   14cec:	str	r3, [sp, #4]
   14cf0:	ldr	r3, [r5]
   14cf4:	str	lr, [sp, #8]
   14cf8:	str	ip, [sp, #12]
   14cfc:	bl	10e58 <__fprintf_chk@plt>
   14d00:	b	14b3c <__assert_fail@plt+0x3c3c>
   14d04:	mov	r2, #5
   14d08:	movw	r1, #28616	; 0x6fc8
   14d0c:	movt	r1, #1
   14d10:	mov	r0, #0
   14d14:	bl	10d38 <dcgettext@plt>
   14d18:	ldmib	r5, {r3, ip}
   14d1c:	mov	r2, r0
   14d20:	mov	r1, #1
   14d24:	mov	r0, r4
   14d28:	ldr	lr, [r5, #24]
   14d2c:	str	r3, [sp]
   14d30:	ldr	r3, [r5, #12]
   14d34:	str	lr, [sp, #20]
   14d38:	ldr	lr, [r5, #20]
   14d3c:	str	ip, [sp, #4]
   14d40:	ldr	ip, [r5, #16]
   14d44:	str	r3, [sp, #8]
   14d48:	ldr	r3, [r5]
   14d4c:	str	ip, [sp, #12]
   14d50:	str	lr, [sp, #16]
   14d54:	bl	10e58 <__fprintf_chk@plt>
   14d58:	b	14b3c <__assert_fail@plt+0x3c3c>
   14d5c:	mov	r2, #5
   14d60:	movw	r1, #28660	; 0x6ff4
   14d64:	movt	r1, #1
   14d68:	mov	r0, #0
   14d6c:	bl	10d38 <dcgettext@plt>
   14d70:	ldmib	r5, {ip, lr}
   14d74:	mov	r2, r0
   14d78:	mov	r1, #1
   14d7c:	mov	r0, r4
   14d80:	ldr	r3, [r5, #28]
   14d84:	str	ip, [sp]
   14d88:	ldr	ip, [r5, #12]
   14d8c:	str	r3, [sp, #24]
   14d90:	ldr	r3, [r5, #24]
   14d94:	str	lr, [sp, #4]
   14d98:	ldr	lr, [r5, #16]
   14d9c:	str	ip, [sp, #8]
   14da0:	ldr	ip, [r5, #20]
   14da4:	str	r3, [sp, #20]
   14da8:	ldr	r3, [r5]
   14dac:	str	lr, [sp, #12]
   14db0:	str	ip, [sp, #16]
   14db4:	bl	10e58 <__fprintf_chk@plt>
   14db8:	b	14b3c <__assert_fail@plt+0x3c3c>
   14dbc:	movw	r1, #28760	; 0x7058
   14dc0:	movt	r1, #1
   14dc4:	b	14adc <__assert_fail@plt+0x3bdc>
   14dc8:	strd	r4, [sp, #-12]!
   14dcc:	str	lr, [sp, #8]
   14dd0:	sub	sp, sp, #12
   14dd4:	ldr	r5, [sp, #24]
   14dd8:	ldr	ip, [r5]
   14ddc:	cmp	ip, #0
   14de0:	beq	14dfc <__assert_fail@plt+0x3efc>
   14de4:	mov	lr, r5
   14de8:	mov	ip, #0
   14dec:	ldr	r4, [lr, #4]!
   14df0:	add	ip, ip, #1
   14df4:	cmp	r4, #0
   14df8:	bne	14dec <__assert_fail@plt+0x3eec>
   14dfc:	stm	sp, {r5, ip}
   14e00:	bl	149e8 <__assert_fail@plt+0x3ae8>
   14e04:	add	sp, sp, #12
   14e08:	ldrd	r4, [sp]
   14e0c:	add	sp, sp, #8
   14e10:	pop	{pc}		; (ldr pc, [sp], #4)
   14e14:	strd	r4, [sp, #-16]!
   14e18:	mov	ip, #0
   14e1c:	str	r6, [sp, #8]
   14e20:	str	lr, [sp, #12]
   14e24:	sub	sp, sp, #48	; 0x30
   14e28:	ldr	r5, [sp, #64]	; 0x40
   14e2c:	add	r6, sp, #8
   14e30:	mov	r4, r6
   14e34:	ldr	lr, [r5], #4
   14e38:	cmp	lr, #0
   14e3c:	str	lr, [r4], #4
   14e40:	beq	14e50 <__assert_fail@plt+0x3f50>
   14e44:	add	ip, ip, #1
   14e48:	cmp	ip, #10
   14e4c:	bne	14e34 <__assert_fail@plt+0x3f34>
   14e50:	stm	sp, {r6, ip}
   14e54:	bl	149e8 <__assert_fail@plt+0x3ae8>
   14e58:	add	sp, sp, #48	; 0x30
   14e5c:	ldrd	r4, [sp]
   14e60:	ldr	r6, [sp, #8]
   14e64:	add	sp, sp, #12
   14e68:	pop	{pc}		; (ldr pc, [sp], #4)
   14e6c:	push	{r3}		; (str r3, [sp, #-4]!)
   14e70:	mov	ip, #0
   14e74:	strd	r4, [sp, #-12]!
   14e78:	str	lr, [sp, #8]
   14e7c:	sub	sp, sp, #56	; 0x38
   14e80:	add	r3, sp, #72	; 0x48
   14e84:	add	r5, sp, #16
   14e88:	mov	r4, r3
   14e8c:	mov	lr, r5
   14e90:	str	r3, [sp, #12]
   14e94:	ldr	r3, [r4], #4
   14e98:	cmp	r3, #0
   14e9c:	str	r3, [lr], #4
   14ea0:	beq	14eb0 <__assert_fail@plt+0x3fb0>
   14ea4:	add	ip, ip, #1
   14ea8:	cmp	ip, #10
   14eac:	bne	14e94 <__assert_fail@plt+0x3f94>
   14eb0:	ldr	r3, [sp, #68]	; 0x44
   14eb4:	stm	sp, {r5, ip}
   14eb8:	bl	149e8 <__assert_fail@plt+0x3ae8>
   14ebc:	add	sp, sp, #56	; 0x38
   14ec0:	ldrd	r4, [sp]
   14ec4:	ldr	lr, [sp, #8]
   14ec8:	add	sp, sp, #12
   14ecc:	add	sp, sp, #4
   14ed0:	bx	lr
   14ed4:	movw	r3, #33100	; 0x814c
   14ed8:	movt	r3, #2
   14edc:	str	r4, [sp, #-8]!
   14ee0:	mov	r0, #10
   14ee4:	ldr	r1, [r3]
   14ee8:	str	lr, [sp, #4]
   14eec:	bl	10d2c <fputc_unlocked@plt>
   14ef0:	mov	r2, #5
   14ef4:	movw	r1, #28820	; 0x7094
   14ef8:	movt	r1, #1
   14efc:	mov	r0, #0
   14f00:	bl	10d38 <dcgettext@plt>
   14f04:	mov	r1, r0
   14f08:	movw	r2, #28840	; 0x70a8
   14f0c:	movt	r2, #1
   14f10:	mov	r0, #1
   14f14:	bl	10e40 <__printf_chk@plt>
   14f18:	mov	r2, #5
   14f1c:	movw	r1, #28864	; 0x70c0
   14f20:	movt	r1, #1
   14f24:	mov	r0, #0
   14f28:	bl	10d38 <dcgettext@plt>
   14f2c:	mov	r1, r0
   14f30:	movw	r3, #27116	; 0x69ec
   14f34:	movt	r3, #1
   14f38:	movw	r2, #27156	; 0x6a14
   14f3c:	movt	r2, #1
   14f40:	mov	r0, #1
   14f44:	bl	10e40 <__printf_chk@plt>
   14f48:	mov	r2, #5
   14f4c:	movw	r1, #28884	; 0x70d4
   14f50:	movt	r1, #1
   14f54:	mov	r0, #0
   14f58:	bl	10d38 <dcgettext@plt>
   14f5c:	mov	r1, r0
   14f60:	movw	r2, #28924	; 0x70fc
   14f64:	movt	r2, #1
   14f68:	mov	r0, #1
   14f6c:	ldr	r4, [sp]
   14f70:	ldr	lr, [sp, #4]
   14f74:	add	sp, sp, #8
   14f78:	b	10e40 <__printf_chk@plt>
   14f7c:	str	r4, [sp, #-8]!
   14f80:	str	lr, [sp, #4]
   14f84:	bl	161e8 <__assert_fail@plt+0x52e8>
   14f88:	cmp	r0, #0
   14f8c:	beq	14f9c <__assert_fail@plt+0x409c>
   14f90:	ldr	r4, [sp]
   14f94:	add	sp, sp, #4
   14f98:	pop	{pc}		; (ldr pc, [sp], #4)
   14f9c:	bl	153f4 <__assert_fail@plt+0x44f4>
   14fa0:	str	r4, [sp, #-8]!
   14fa4:	str	lr, [sp, #4]
   14fa8:	bl	161e8 <__assert_fail@plt+0x52e8>
   14fac:	cmp	r0, #0
   14fb0:	beq	14fc0 <__assert_fail@plt+0x40c0>
   14fb4:	ldr	r4, [sp]
   14fb8:	add	sp, sp, #4
   14fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14fc0:	bl	153f4 <__assert_fail@plt+0x44f4>
   14fc4:	str	r4, [sp, #-8]!
   14fc8:	str	lr, [sp, #4]
   14fcc:	bl	161e8 <__assert_fail@plt+0x52e8>
   14fd0:	cmp	r0, #0
   14fd4:	beq	14fe4 <__assert_fail@plt+0x40e4>
   14fd8:	ldr	r4, [sp]
   14fdc:	add	sp, sp, #4
   14fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fe4:	bl	153f4 <__assert_fail@plt+0x44f4>
   14fe8:	strd	r4, [sp, #-16]!
   14fec:	mov	r5, r0
   14ff0:	mov	r4, r1
   14ff4:	str	r6, [sp, #8]
   14ff8:	str	lr, [sp, #12]
   14ffc:	bl	16224 <__assert_fail@plt+0x5324>
   15000:	cmp	r0, #0
   15004:	beq	15018 <__assert_fail@plt+0x4118>
   15008:	ldrd	r4, [sp]
   1500c:	ldr	r6, [sp, #8]
   15010:	add	sp, sp, #12
   15014:	pop	{pc}		; (ldr pc, [sp], #4)
   15018:	adds	r4, r4, #0
   1501c:	movne	r4, #1
   15020:	cmp	r5, #0
   15024:	moveq	r4, #1
   15028:	cmp	r4, #0
   1502c:	beq	15008 <__assert_fail@plt+0x4108>
   15030:	bl	153f4 <__assert_fail@plt+0x44f4>
   15034:	cmp	r1, #0
   15038:	orreq	r1, r1, #1
   1503c:	str	r4, [sp, #-8]!
   15040:	str	lr, [sp, #4]
   15044:	bl	16224 <__assert_fail@plt+0x5324>
   15048:	cmp	r0, #0
   1504c:	beq	1505c <__assert_fail@plt+0x415c>
   15050:	ldr	r4, [sp]
   15054:	add	sp, sp, #4
   15058:	pop	{pc}		; (ldr pc, [sp], #4)
   1505c:	bl	153f4 <__assert_fail@plt+0x44f4>
   15060:	strd	r4, [sp, #-16]!
   15064:	mov	r4, r0
   15068:	mov	r5, r2
   1506c:	str	r6, [sp, #8]
   15070:	mov	r6, r1
   15074:	str	lr, [sp, #12]
   15078:	bl	163c0 <__assert_fail@plt+0x54c0>
   1507c:	cmp	r0, #0
   15080:	beq	15094 <__assert_fail@plt+0x4194>
   15084:	ldrd	r4, [sp]
   15088:	ldr	r6, [sp, #8]
   1508c:	add	sp, sp, #12
   15090:	pop	{pc}		; (ldr pc, [sp], #4)
   15094:	cmp	r4, #0
   15098:	beq	150a8 <__assert_fail@plt+0x41a8>
   1509c:	cmp	r6, #0
   150a0:	cmpne	r5, #0
   150a4:	beq	15084 <__assert_fail@plt+0x4184>
   150a8:	bl	153f4 <__assert_fail@plt+0x44f4>
   150ac:	b	15060 <__assert_fail@plt+0x4160>
   150b0:	cmp	r2, #0
   150b4:	cmpne	r1, #0
   150b8:	str	r4, [sp, #-8]!
   150bc:	moveq	r2, #1
   150c0:	str	lr, [sp, #4]
   150c4:	moveq	r1, r2
   150c8:	bl	163c0 <__assert_fail@plt+0x54c0>
   150cc:	cmp	r0, #0
   150d0:	beq	150e0 <__assert_fail@plt+0x41e0>
   150d4:	ldr	r4, [sp]
   150d8:	add	sp, sp, #4
   150dc:	pop	{pc}		; (ldr pc, [sp], #4)
   150e0:	bl	153f4 <__assert_fail@plt+0x44f4>
   150e4:	mov	r2, r1
   150e8:	mov	r1, r0
   150ec:	mov	r0, #0
   150f0:	b	15060 <__assert_fail@plt+0x4160>
   150f4:	mov	r2, r1
   150f8:	mov	r1, r0
   150fc:	mov	r0, #0
   15100:	b	150b0 <__assert_fail@plt+0x41b0>
   15104:	cmp	r0, #0
   15108:	strd	r4, [sp, #-16]!
   1510c:	mov	r5, r1
   15110:	ldr	r4, [r1]
   15114:	str	r6, [sp, #8]
   15118:	str	lr, [sp, #12]
   1511c:	beq	1514c <__assert_fail@plt+0x424c>
   15120:	lsr	r3, r4, #1
   15124:	add	r3, r3, #1
   15128:	adds	r4, r4, r3
   1512c:	bcs	15168 <__assert_fail@plt+0x4268>
   15130:	mov	r1, r4
   15134:	bl	15060 <__assert_fail@plt+0x4160>
   15138:	ldr	r6, [sp, #8]
   1513c:	str	r4, [r5]
   15140:	ldrd	r4, [sp]
   15144:	add	sp, sp, #12
   15148:	pop	{pc}		; (ldr pc, [sp], #4)
   1514c:	cmp	r4, #0
   15150:	bne	15130 <__assert_fail@plt+0x4230>
   15154:	mov	r4, #64	; 0x40
   15158:	udiv	r4, r4, r2
   1515c:	cmp	r2, #64	; 0x40
   15160:	addhi	r4, r4, #1
   15164:	b	15130 <__assert_fail@plt+0x4230>
   15168:	bl	153f4 <__assert_fail@plt+0x44f4>
   1516c:	mov	r2, #1
   15170:	b	15104 <__assert_fail@plt+0x4204>
   15174:	ldr	ip, [r1]
   15178:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1517c:	mov	r5, r1
   15180:	strd	r6, [sp, #8]
   15184:	str	lr, [sp, #28]
   15188:	strd	r8, [sp, #16]
   1518c:	asr	lr, ip, #1
   15190:	ldr	r8, [sp, #32]
   15194:	str	sl, [sp, #24]
   15198:	adds	r4, ip, lr
   1519c:	mvn	lr, r3
   151a0:	lsr	lr, lr, #31
   151a4:	mvnvs	r4, #-2147483648	; 0x80000000
   151a8:	cmp	r3, r4
   151ac:	movge	r1, #0
   151b0:	andlt	r1, lr, #1
   151b4:	cmp	r1, #0
   151b8:	movne	r4, r3
   151bc:	smull	r6, r7, r4, r8
   151c0:	cmp	r7, r6, asr #31
   151c4:	bne	1524c <__assert_fail@plt+0x434c>
   151c8:	cmp	r6, #63	; 0x3f
   151cc:	mov	r1, r6
   151d0:	ble	15234 <__assert_fail@plt+0x4334>
   151d4:	cmp	r0, #0
   151d8:	sub	r6, r4, ip
   151dc:	streq	r0, [r5]
   151e0:	cmp	r6, r2
   151e4:	bge	15214 <__assert_fail@plt+0x4314>
   151e8:	adds	r4, ip, r2
   151ec:	bvs	15248 <__assert_fail@plt+0x4348>
   151f0:	cmp	r4, r3
   151f4:	movle	r3, #0
   151f8:	andgt	r3, lr, #1
   151fc:	cmp	r3, #0
   15200:	bne	15248 <__assert_fail@plt+0x4348>
   15204:	smull	r8, r9, r4, r8
   15208:	cmp	r9, r8, asr #31
   1520c:	mov	r1, r8
   15210:	bne	15248 <__assert_fail@plt+0x4348>
   15214:	bl	14fe8 <__assert_fail@plt+0x40e8>
   15218:	ldrd	r6, [sp, #8]
   1521c:	ldrd	r8, [sp, #16]
   15220:	ldr	sl, [sp, #24]
   15224:	str	r4, [r5]
   15228:	ldrd	r4, [sp]
   1522c:	add	sp, sp, #28
   15230:	pop	{pc}		; (ldr pc, [sp], #4)
   15234:	mov	r6, #64	; 0x40
   15238:	sdiv	r4, r6, r8
   1523c:	mls	r1, r8, r4, r6
   15240:	sub	r1, r6, r1
   15244:	b	151d4 <__assert_fail@plt+0x42d4>
   15248:	bl	153f4 <__assert_fail@plt+0x44f4>
   1524c:	mvn	r6, #-2147483648	; 0x80000000
   15250:	b	15238 <__assert_fail@plt+0x4338>
   15254:	mov	r1, #1
   15258:	str	r4, [sp, #-8]!
   1525c:	str	lr, [sp, #4]
   15260:	bl	16174 <__assert_fail@plt+0x5274>
   15264:	cmp	r0, #0
   15268:	beq	15278 <__assert_fail@plt+0x4378>
   1526c:	ldr	r4, [sp]
   15270:	add	sp, sp, #4
   15274:	pop	{pc}		; (ldr pc, [sp], #4)
   15278:	bl	153f4 <__assert_fail@plt+0x44f4>
   1527c:	mov	r1, #1
   15280:	str	r4, [sp, #-8]!
   15284:	str	lr, [sp, #4]
   15288:	bl	16174 <__assert_fail@plt+0x5274>
   1528c:	cmp	r0, #0
   15290:	beq	152a0 <__assert_fail@plt+0x43a0>
   15294:	ldr	r4, [sp]
   15298:	add	sp, sp, #4
   1529c:	pop	{pc}		; (ldr pc, [sp], #4)
   152a0:	bl	153f4 <__assert_fail@plt+0x44f4>
   152a4:	str	r4, [sp, #-8]!
   152a8:	str	lr, [sp, #4]
   152ac:	bl	16174 <__assert_fail@plt+0x5274>
   152b0:	cmp	r0, #0
   152b4:	beq	152c4 <__assert_fail@plt+0x43c4>
   152b8:	ldr	r4, [sp]
   152bc:	add	sp, sp, #4
   152c0:	pop	{pc}		; (ldr pc, [sp], #4)
   152c4:	bl	153f4 <__assert_fail@plt+0x44f4>
   152c8:	str	r4, [sp, #-8]!
   152cc:	str	lr, [sp, #4]
   152d0:	bl	16174 <__assert_fail@plt+0x5274>
   152d4:	cmp	r0, #0
   152d8:	beq	152e8 <__assert_fail@plt+0x43e8>
   152dc:	ldr	r4, [sp]
   152e0:	add	sp, sp, #4
   152e4:	pop	{pc}		; (ldr pc, [sp], #4)
   152e8:	bl	153f4 <__assert_fail@plt+0x44f4>
   152ec:	strd	r4, [sp, #-16]!
   152f0:	mov	r4, r1
   152f4:	str	r6, [sp, #8]
   152f8:	mov	r6, r0
   152fc:	mov	r0, r1
   15300:	str	lr, [sp, #12]
   15304:	bl	161e8 <__assert_fail@plt+0x52e8>
   15308:	subs	r5, r0, #0
   1530c:	beq	15330 <__assert_fail@plt+0x4430>
   15310:	mov	r2, r4
   15314:	mov	r1, r6
   15318:	bl	10cfc <memcpy@plt>
   1531c:	mov	r0, r5
   15320:	ldrd	r4, [sp]
   15324:	ldr	r6, [sp, #8]
   15328:	add	sp, sp, #12
   1532c:	pop	{pc}		; (ldr pc, [sp], #4)
   15330:	bl	153f4 <__assert_fail@plt+0x44f4>
   15334:	strd	r4, [sp, #-16]!
   15338:	mov	r4, r1
   1533c:	str	r6, [sp, #8]
   15340:	mov	r6, r0
   15344:	mov	r0, r1
   15348:	str	lr, [sp, #12]
   1534c:	bl	161e8 <__assert_fail@plt+0x52e8>
   15350:	subs	r5, r0, #0
   15354:	beq	15378 <__assert_fail@plt+0x4478>
   15358:	mov	r2, r4
   1535c:	mov	r1, r6
   15360:	bl	10cfc <memcpy@plt>
   15364:	mov	r0, r5
   15368:	ldrd	r4, [sp]
   1536c:	ldr	r6, [sp, #8]
   15370:	add	sp, sp, #12
   15374:	pop	{pc}		; (ldr pc, [sp], #4)
   15378:	bl	153f4 <__assert_fail@plt+0x44f4>
   1537c:	strd	r4, [sp, #-16]!
   15380:	mov	r4, r1
   15384:	str	r6, [sp, #8]
   15388:	mov	r6, r0
   1538c:	add	r0, r1, #1
   15390:	str	lr, [sp, #12]
   15394:	bl	161e8 <__assert_fail@plt+0x52e8>
   15398:	subs	r5, r0, #0
   1539c:	beq	153c8 <__assert_fail@plt+0x44c8>
   153a0:	mov	r3, #0
   153a4:	mov	r1, r6
   153a8:	mov	r2, r4
   153ac:	strb	r3, [r5, r4]
   153b0:	bl	10cfc <memcpy@plt>
   153b4:	mov	r0, r5
   153b8:	ldrd	r4, [sp]
   153bc:	ldr	r6, [sp, #8]
   153c0:	add	sp, sp, #12
   153c4:	pop	{pc}		; (ldr pc, [sp], #4)
   153c8:	bl	153f4 <__assert_fail@plt+0x44f4>
   153cc:	str	r4, [sp, #-8]!
   153d0:	mov	r4, r0
   153d4:	str	lr, [sp, #4]
   153d8:	bl	10e04 <strlen@plt>
   153dc:	add	r1, r0, #1
   153e0:	mov	r0, r4
   153e4:	ldr	r4, [sp]
   153e8:	ldr	lr, [sp, #4]
   153ec:	add	sp, sp, #8
   153f0:	b	152ec <__assert_fail@plt+0x43ec>
   153f4:	movw	r3, #33004	; 0x80ec
   153f8:	movt	r3, #2
   153fc:	str	r4, [sp, #-8]!
   15400:	ldr	r4, [r3]
   15404:	mov	r2, #5
   15408:	movw	r1, #29004	; 0x714c
   1540c:	movt	r1, #1
   15410:	mov	r0, #0
   15414:	str	lr, [sp, #4]
   15418:	bl	10d38 <dcgettext@plt>
   1541c:	mov	r3, r0
   15420:	movw	r2, #27376	; 0x6af0
   15424:	movt	r2, #1
   15428:	mov	r1, #0
   1542c:	mov	r0, r4
   15430:	bl	10da4 <error@plt>
   15434:	bl	10ef4 <abort@plt>
   15438:	cmp	r2, #36	; 0x24
   1543c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15440:	strd	r6, [sp, #8]
   15444:	strd	r8, [sp, #16]
   15448:	strd	sl, [sp, #24]
   1544c:	str	lr, [sp, #32]
   15450:	sub	sp, sp, #44	; 0x2c
   15454:	bhi	16040 <__assert_fail@plt+0x5140>
   15458:	cmp	r1, #0
   1545c:	mov	r5, r1
   15460:	mov	r6, r2
   15464:	addeq	r5, sp, #36	; 0x24
   15468:	mov	sl, r0
   1546c:	mov	r7, r3
   15470:	bl	10e1c <__errno_location@plt>
   15474:	mov	fp, r0
   15478:	mov	r4, #0
   1547c:	mov	r2, r6
   15480:	mov	r3, r4
   15484:	mov	r1, r5
   15488:	mov	r0, sl
   1548c:	str	r4, [fp]
   15490:	bl	10eb8 <__strtoll_internal@plt>
   15494:	ldr	r6, [r5]
   15498:	mov	r8, r0
   1549c:	mov	r9, r1
   154a0:	cmp	r6, sl
   154a4:	beq	154fc <__assert_fail@plt+0x45fc>
   154a8:	ldr	r4, [fp]
   154ac:	cmp	r4, #0
   154b0:	beq	154c0 <__assert_fail@plt+0x45c0>
   154b4:	cmp	r4, #34	; 0x22
   154b8:	bne	15600 <__assert_fail@plt+0x4700>
   154bc:	mov	r4, #1
   154c0:	ldr	r3, [sp, #80]	; 0x50
   154c4:	cmp	r3, #0
   154c8:	beq	154d8 <__assert_fail@plt+0x45d8>
   154cc:	ldrb	sl, [r6]
   154d0:	cmp	sl, #0
   154d4:	bne	15704 <__assert_fail@plt+0x4804>
   154d8:	strd	r8, [r7]
   154dc:	mov	r0, r4
   154e0:	add	sp, sp, #44	; 0x2c
   154e4:	ldrd	r4, [sp]
   154e8:	ldrd	r6, [sp, #8]
   154ec:	ldrd	r8, [sp, #16]
   154f0:	ldrd	sl, [sp, #24]
   154f4:	add	sp, sp, #32
   154f8:	pop	{pc}		; (ldr pc, [sp], #4)
   154fc:	ldr	r3, [sp, #80]	; 0x50
   15500:	cmp	r3, r4
   15504:	beq	15600 <__assert_fail@plt+0x4700>
   15508:	ldrb	sl, [sl]
   1550c:	cmp	sl, r4
   15510:	beq	15600 <__assert_fail@plt+0x4700>
   15514:	mov	r1, sl
   15518:	mov	r0, r3
   1551c:	bl	10e10 <strchr@plt>
   15520:	cmp	r0, r4
   15524:	movne	r8, #1
   15528:	movne	r9, #0
   1552c:	beq	15600 <__assert_fail@plt+0x4700>
   15530:	sub	fp, sl, #69	; 0x45
   15534:	cmp	fp, #47	; 0x2f
   15538:	ldrls	pc, [pc, fp, lsl #2]
   1553c:	b	15720 <__assert_fail@plt+0x4820>
   15540:	andeq	r5, r1, r8, lsl #12
   15544:	andeq	r5, r1, r0, lsr #14
   15548:	andeq	r5, r1, r8, lsl #12
   1554c:	andeq	r5, r1, r0, lsr #14
   15550:	andeq	r5, r1, r0, lsr #14
   15554:	andeq	r5, r1, r0, lsr #14
   15558:	andeq	r5, r1, r8, lsl #12
   1555c:	andeq	r5, r1, r0, lsr #14
   15560:	andeq	r5, r1, r8, lsl #12
   15564:	andeq	r5, r1, r0, lsr #14
   15568:	andeq	r5, r1, r0, lsr #14
   1556c:	andeq	r5, r1, r8, lsl #12
   15570:	andeq	r5, r1, r0, lsr #14
   15574:	andeq	r5, r1, r0, lsr #14
   15578:	andeq	r5, r1, r0, lsr #14
   1557c:	andeq	r5, r1, r8, lsl #12
   15580:	andeq	r5, r1, r0, lsr #14
   15584:	andeq	r5, r1, r0, lsr #14
   15588:	andeq	r5, r1, r0, lsr #14
   1558c:	andeq	r5, r1, r0, lsr #14
   15590:	andeq	r5, r1, r8, lsl #12
   15594:	andeq	r5, r1, r8, lsl #12
   15598:	andeq	r5, r1, r0, lsr #14
   1559c:	andeq	r5, r1, r0, lsr #14
   155a0:	andeq	r5, r1, r0, lsr #14
   155a4:	andeq	r5, r1, r0, lsr #14
   155a8:	andeq	r5, r1, r0, lsr #14
   155ac:	andeq	r5, r1, r0, lsr #14
   155b0:	andeq	r5, r1, r0, lsr #14
   155b4:	andeq	r5, r1, r0, lsr #14
   155b8:	andeq	r5, r1, r0, lsr #14
   155bc:	andeq	r5, r1, r0, lsr #14
   155c0:	andeq	r5, r1, r0, lsr #14
   155c4:	andeq	r5, r1, r0, lsr #14
   155c8:	andeq	r5, r1, r8, lsl #12
   155cc:	andeq	r5, r1, r0, lsr #14
   155d0:	andeq	r5, r1, r0, lsr #14
   155d4:	andeq	r5, r1, r0, lsr #14
   155d8:	andeq	r5, r1, r8, lsl #12
   155dc:	andeq	r5, r1, r0, lsr #14
   155e0:	andeq	r5, r1, r8, lsl #12
   155e4:	andeq	r5, r1, r0, lsr #14
   155e8:	andeq	r5, r1, r0, lsr #14
   155ec:	andeq	r5, r1, r0, lsr #14
   155f0:	andeq	r5, r1, r0, lsr #14
   155f4:	andeq	r5, r1, r0, lsr #14
   155f8:	andeq	r5, r1, r0, lsr #14
   155fc:	andeq	r5, r1, r8, lsl #12
   15600:	mov	r4, #4
   15604:	b	154dc <__assert_fail@plt+0x45dc>
   15608:	mov	r1, #48	; 0x30
   1560c:	ldr	r0, [sp, #80]	; 0x50
   15610:	bl	10e10 <strchr@plt>
   15614:	cmp	r0, #0
   15618:	beq	15720 <__assert_fail@plt+0x4820>
   1561c:	ldrb	r3, [r6, #1]
   15620:	cmp	r3, #68	; 0x44
   15624:	beq	15ce8 <__assert_fail@plt+0x4de8>
   15628:	cmp	r3, #105	; 0x69
   1562c:	beq	15e98 <__assert_fail@plt+0x4f98>
   15630:	cmp	r3, #66	; 0x42
   15634:	beq	15ce8 <__assert_fail@plt+0x4de8>
   15638:	cmp	fp, #47	; 0x2f
   1563c:	ldrls	pc, [pc, fp, lsl #2]
   15640:	b	15718 <__assert_fail@plt+0x4818>
   15644:	andeq	r5, r1, r0, asr #24
   15648:	andeq	r5, r1, r8, lsl r7
   1564c:	andeq	r5, r1, r0, lsr ip
   15650:	andeq	r5, r1, r8, lsl r7
   15654:	andeq	r5, r1, r8, lsl r7
   15658:	andeq	r5, r1, r8, lsl r7
   1565c:	andeq	r5, r1, ip, lsr #25
   15660:	andeq	r5, r1, r8, lsl r7
   15664:	muleq	r1, ip, ip
   15668:	andeq	r5, r1, r8, lsl r7
   1566c:	andeq	r5, r1, r8, lsl r7
   15670:	andeq	r5, r1, ip, ror #24
   15674:	andeq	r5, r1, r8, lsl r7
   15678:	andeq	r5, r1, r8, lsl r7
   1567c:	andeq	r5, r1, r8, lsl r7
   15680:	andeq	r5, r1, ip, asr ip
   15684:	andeq	r5, r1, r8, lsl r7
   15688:	andeq	r5, r1, r8, lsl r7
   1568c:	andeq	r5, r1, r8, lsl r7
   15690:	andeq	r5, r1, r8, lsl r7
   15694:	andeq	r5, r1, ip, lsl #25
   15698:	andeq	r5, r1, ip, ror ip
   1569c:	andeq	r5, r1, r8, lsl r7
   156a0:	andeq	r5, r1, r8, lsl r7
   156a4:	andeq	r5, r1, r8, lsl r7
   156a8:	andeq	r5, r1, r8, lsl r7
   156ac:	andeq	r5, r1, r8, lsl r7
   156b0:	andeq	r5, r1, r8, lsl r7
   156b4:	andeq	r5, r1, r8, lsl r7
   156b8:	andeq	r5, r1, r0, lsl r8
   156bc:	andeq	r5, r1, r0, asr ip
   156c0:	andeq	r5, r1, r8, lsl r7
   156c4:	andeq	r5, r1, r8, lsl r7
   156c8:	andeq	r5, r1, r8, lsl r7
   156cc:	andeq	r5, r1, r0, lsr ip
   156d0:	andeq	r5, r1, r8, lsl r7
   156d4:	andeq	r5, r1, r8, lsl r7
   156d8:	andeq	r5, r1, r8, lsl r7
   156dc:	andeq	r5, r1, ip, lsr #25
   156e0:	andeq	r5, r1, r8, lsl r7
   156e4:	muleq	r1, ip, ip
   156e8:	andeq	r5, r1, r8, lsl r7
   156ec:	andeq	r5, r1, r8, lsl r7
   156f0:	andeq	r5, r1, r8, lsl r7
   156f4:	andeq	r5, r1, r8, lsl r7
   156f8:	andeq	r5, r1, r8, lsl r7
   156fc:	andeq	r5, r1, r8, lsl r7
   15700:	andeq	r5, r1, ip, asr ip
   15704:	mov	r1, sl
   15708:	ldr	r0, [sp, #80]	; 0x50
   1570c:	bl	10e10 <strchr@plt>
   15710:	cmp	r0, #0
   15714:	bne	15530 <__assert_fail@plt+0x4630>
   15718:	orr	r4, r4, #2
   1571c:	b	154d8 <__assert_fail@plt+0x45d8>
   15720:	mov	r3, #1
   15724:	mov	fp, #1024	; 0x400
   15728:	sub	sl, sl, #66	; 0x42
   1572c:	cmp	sl, #53	; 0x35
   15730:	ldrls	pc, [pc, sl, lsl #2]
   15734:	b	15718 <__assert_fail@plt+0x4818>
   15738:	andeq	r5, r1, ip, asr r8
   1573c:	andeq	r5, r1, r8, lsl r7
   15740:	andeq	r5, r1, r8, lsl r7
   15744:	andeq	r5, r1, r8, asr #20
   15748:	andeq	r5, r1, r8, lsl r7
   1574c:	ldrdeq	r5, [r1], -r0
   15750:	andeq	r5, r1, r8, lsl r7
   15754:	andeq	r5, r1, r8, lsl r7
   15758:	andeq	r5, r1, r8, lsl r7
   1575c:	muleq	r1, r4, r9
   15760:	andeq	r5, r1, r8, lsl r7
   15764:	andeq	r5, r1, r8, lsr r9
   15768:	andeq	r5, r1, r8, lsl r7
   1576c:	andeq	r5, r1, r8, lsl r7
   15770:	andeq	r5, r1, r8, lsr fp
   15774:	andeq	r5, r1, r8, lsl r7
   15778:	andeq	r5, r1, r8, lsl r7
   1577c:	andeq	r5, r1, r8, lsl r7
   15780:	andeq	r5, r1, r0, asr #21
   15784:	andeq	r5, r1, r8, lsl r7
   15788:	andeq	r5, r1, r8, lsl r7
   1578c:	andeq	r5, r1, r8, lsl r7
   15790:	andeq	r5, r1, r8, lsl r7
   15794:			; <UNDEFINED> instruction: 0x00015bb0
   15798:	andeq	r5, r1, r0, asr #17
   1579c:	andeq	r5, r1, r8, lsl r7
   157a0:	andeq	r5, r1, r8, lsl r7
   157a4:	andeq	r5, r1, r8, lsl r7
   157a8:	andeq	r5, r1, r8, lsl r7
   157ac:	andeq	r5, r1, r8, lsl r7
   157b0:	andeq	r5, r1, r8, lsl r7
   157b4:	andeq	r5, r1, r8, lsl r7
   157b8:	andeq	r5, r1, r4, lsl r8
   157bc:	andeq	r5, r1, r8, lsr #24
   157c0:	andeq	r5, r1, r8, lsl r7
   157c4:	andeq	r5, r1, r8, lsl r7
   157c8:	andeq	r5, r1, r8, lsl r7
   157cc:	ldrdeq	r5, [r1], -r0
   157d0:	andeq	r5, r1, r8, lsl r7
   157d4:	andeq	r5, r1, r8, lsl r7
   157d8:	andeq	r5, r1, r8, lsl r7
   157dc:	muleq	r1, r4, r9
   157e0:	andeq	r5, r1, r8, lsl r7
   157e4:	andeq	r5, r1, r8, lsr r9
   157e8:	andeq	r5, r1, r8, lsl r7
   157ec:	andeq	r5, r1, r8, lsl r7
   157f0:	andeq	r5, r1, r8, lsl r7
   157f4:	andeq	r5, r1, r8, lsl r7
   157f8:	andeq	r5, r1, r8, lsl r7
   157fc:	andeq	r5, r1, r8, lsl r7
   15800:	andeq	r5, r1, r0, asr #21
   15804:	andeq	r5, r1, r8, lsl r7
   15808:	andeq	r5, r1, r8, lsl r7
   1580c:	andeq	r5, r1, ip, ror r8
   15810:	mov	r3, #1
   15814:	cmp	r9, r8, asr #31
   15818:	mov	ip, #0
   1581c:	str	r3, [sp, #4]
   15820:	bne	15eb0 <__assert_fail@plt+0x4fb0>
   15824:	lsl	r3, r9, #9
   15828:	lsl	r2, r8, #9
   1582c:	orr	r3, r3, r8, lsr #23
   15830:	cmp	ip, #0
   15834:	bne	158a4 <__assert_fail@plt+0x49a4>
   15838:	mov	r8, r2
   1583c:	mov	r9, r3
   15840:	ldr	r2, [sp, #4]
   15844:	add	r3, r6, r2
   15848:	str	r3, [r5]
   1584c:	ldrb	r3, [r6, r2]
   15850:	cmp	r3, #0
   15854:	beq	154d8 <__assert_fail@plt+0x45d8>
   15858:	b	15718 <__assert_fail@plt+0x4818>
   1585c:	cmp	r9, r8, asr #31
   15860:	mov	ip, #0
   15864:	str	r3, [sp, #4]
   15868:	bne	15ef8 <__assert_fail@plt+0x4ff8>
   1586c:	lsl	r3, r9, #10
   15870:	lsl	r2, r8, #10
   15874:	orr	r3, r3, r8, lsr #22
   15878:	b	15830 <__assert_fail@plt+0x4930>
   1587c:	cmp	r9, r8, asr #31
   15880:	mov	r1, #0
   15884:	str	r3, [sp, #4]
   15888:	bne	15f7c <__assert_fail@plt+0x507c>
   1588c:	adds	ip, r8, r8
   15890:	adc	r3, r9, r9
   15894:	cmp	r1, #0
   15898:	moveq	r8, ip
   1589c:	moveq	r9, r3
   158a0:	beq	15840 <__assert_fail@plt+0x4940>
   158a4:	cmp	r8, #0
   158a8:	mov	r4, #1
   158ac:	sbcs	r3, r9, #0
   158b0:	blt	15cdc <__assert_fail@plt+0x4ddc>
   158b4:	mvn	r8, #0
   158b8:	mvn	r9, #-2147483648	; 0x80000000
   158bc:	b	15840 <__assert_fail@plt+0x4940>
   158c0:	str	r3, [sp, #4]
   158c4:	asr	r1, fp, #31
   158c8:	mov	r0, fp
   158cc:	mov	r3, #0
   158d0:	mov	ip, #7
   158d4:	mov	lr, r3
   158d8:	strd	r0, [sp, #8]
   158dc:	str	r4, [sp, #16]
   158e0:	str	r5, [sp, #24]
   158e4:	b	158f8 <__assert_fail@plt+0x49f8>
   158e8:	mov	r8, fp
   158ec:	mov	r9, r2
   158f0:	subs	ip, ip, #1
   158f4:	beq	15cbc <__assert_fail@plt+0x4dbc>
   158f8:	cmp	r9, r8, asr #31
   158fc:	mov	r1, #0
   15900:	bne	15df0 <__assert_fail@plt+0x4ef0>
   15904:	smull	r2, r3, r8, r0
   15908:	mov	fp, r2
   1590c:	mov	r2, r3
   15910:	cmp	r1, #0
   15914:	beq	158e8 <__assert_fail@plt+0x49e8>
   15918:	cmp	r8, #0
   1591c:	mov	lr, #1
   15920:	sbcs	r3, r9, #0
   15924:	mvnge	r8, #0
   15928:	mvnge	r9, #-2147483648	; 0x80000000
   1592c:	movlt	r8, #0
   15930:	movlt	r9, #-2147483648	; 0x80000000
   15934:	b	158f0 <__assert_fail@plt+0x49f0>
   15938:	str	r3, [sp, #4]
   1593c:	asr	r3, fp, #31
   15940:	mov	r2, fp
   15944:	mov	r1, #0
   15948:	cmp	r9, r8, asr #31
   1594c:	strd	r2, [sp, #8]
   15950:	bne	15f3c <__assert_fail@plt+0x503c>
   15954:	smull	r2, r3, r8, fp
   15958:	mov	lr, r2
   1595c:	subs	ip, r1, #0
   15960:	bne	158a4 <__assert_fail@plt+0x49a4>
   15964:	cmp	r3, lr, asr #31
   15968:	mov	r0, lr
   1596c:	mov	r1, r3
   15970:	bne	15fd0 <__assert_fail@plt+0x50d0>
   15974:	smull	r2, r3, lr, fp
   15978:	mov	sl, r2
   1597c:	mov	r2, r3
   15980:	cmp	ip, #0
   15984:	bne	15ccc <__assert_fail@plt+0x4dcc>
   15988:	mov	r8, sl
   1598c:	mov	r9, r2
   15990:	b	15840 <__assert_fail@plt+0x4940>
   15994:	str	r3, [sp, #4]
   15998:	asr	r3, fp, #31
   1599c:	mov	r2, fp
   159a0:	mov	ip, #0
   159a4:	cmp	r9, r8, asr #31
   159a8:	strd	r2, [sp, #8]
   159ac:	bne	15d64 <__assert_fail@plt+0x4e64>
   159b0:	smull	r2, r3, r8, fp
   159b4:	mov	r1, r2
   159b8:	mov	r2, r3
   159bc:	cmp	ip, #0
   159c0:	bne	158a4 <__assert_fail@plt+0x49a4>
   159c4:	mov	r8, r1
   159c8:	mov	r9, r2
   159cc:	b	15840 <__assert_fail@plt+0x4940>
   159d0:	str	r3, [sp, #4]
   159d4:	asr	r1, fp, #31
   159d8:	mov	r0, fp
   159dc:	mov	r3, #0
   159e0:	mov	ip, #3
   159e4:	mov	lr, r3
   159e8:	strd	r0, [sp, #8]
   159ec:	str	r4, [sp, #16]
   159f0:	str	r5, [sp, #24]
   159f4:	b	15a08 <__assert_fail@plt+0x4b08>
   159f8:	mov	r8, fp
   159fc:	mov	r9, r2
   15a00:	subs	ip, ip, #1
   15a04:	beq	15cbc <__assert_fail@plt+0x4dbc>
   15a08:	cmp	r9, r8, asr #31
   15a0c:	mov	r1, #0
   15a10:	bne	15d2c <__assert_fail@plt+0x4e2c>
   15a14:	smull	r2, r3, r8, r0
   15a18:	mov	fp, r2
   15a1c:	mov	r2, r3
   15a20:	cmp	r1, #0
   15a24:	beq	159f8 <__assert_fail@plt+0x4af8>
   15a28:	cmp	r8, #0
   15a2c:	mov	lr, #1
   15a30:	sbcs	r3, r9, #0
   15a34:	mvnge	r8, #0
   15a38:	mvnge	r9, #-2147483648	; 0x80000000
   15a3c:	movlt	r8, #0
   15a40:	movlt	r9, #-2147483648	; 0x80000000
   15a44:	b	15a00 <__assert_fail@plt+0x4b00>
   15a48:	str	r3, [sp, #4]
   15a4c:	asr	r1, fp, #31
   15a50:	mov	r0, fp
   15a54:	mov	r3, #0
   15a58:	mov	ip, #6
   15a5c:	mov	lr, r3
   15a60:	strd	r0, [sp, #8]
   15a64:	str	r4, [sp, #16]
   15a68:	str	r5, [sp, #24]
   15a6c:	b	15a80 <__assert_fail@plt+0x4b80>
   15a70:	mov	r8, fp
   15a74:	mov	r9, r2
   15a78:	subs	ip, ip, #1
   15a7c:	beq	15cbc <__assert_fail@plt+0x4dbc>
   15a80:	cmp	r9, r8, asr #31
   15a84:	mov	r1, #0
   15a88:	bne	15e60 <__assert_fail@plt+0x4f60>
   15a8c:	smull	r2, r3, r8, r0
   15a90:	mov	fp, r2
   15a94:	mov	r2, r3
   15a98:	cmp	r1, #0
   15a9c:	beq	15a70 <__assert_fail@plt+0x4b70>
   15aa0:	cmp	r8, #0
   15aa4:	mov	lr, #1
   15aa8:	sbcs	r3, r9, #0
   15aac:	mvnge	r8, #0
   15ab0:	mvnge	r9, #-2147483648	; 0x80000000
   15ab4:	movlt	r8, #0
   15ab8:	movlt	r9, #-2147483648	; 0x80000000
   15abc:	b	15a78 <__assert_fail@plt+0x4b78>
   15ac0:	str	r3, [sp, #4]
   15ac4:	asr	r1, fp, #31
   15ac8:	mov	r0, fp
   15acc:	mov	r3, #0
   15ad0:	mov	ip, #4
   15ad4:	mov	lr, r3
   15ad8:	strd	r0, [sp, #8]
   15adc:	str	r4, [sp, #16]
   15ae0:	str	r5, [sp, #24]
   15ae4:	b	15af8 <__assert_fail@plt+0x4bf8>
   15ae8:	mov	r8, fp
   15aec:	mov	r9, r2
   15af0:	subs	ip, ip, #1
   15af4:	beq	15cbc <__assert_fail@plt+0x4dbc>
   15af8:	cmp	r9, r8, asr #31
   15afc:	mov	r1, #0
   15b00:	bne	15e28 <__assert_fail@plt+0x4f28>
   15b04:	smull	r2, r3, r8, r0
   15b08:	mov	fp, r2
   15b0c:	mov	r2, r3
   15b10:	cmp	r1, #0
   15b14:	beq	15ae8 <__assert_fail@plt+0x4be8>
   15b18:	cmp	r8, #0
   15b1c:	mov	lr, #1
   15b20:	sbcs	r3, r9, #0
   15b24:	mvnge	r8, #0
   15b28:	mvnge	r9, #-2147483648	; 0x80000000
   15b2c:	movlt	r8, #0
   15b30:	movlt	r9, #-2147483648	; 0x80000000
   15b34:	b	15af0 <__assert_fail@plt+0x4bf0>
   15b38:	str	r3, [sp, #4]
   15b3c:	asr	r1, fp, #31
   15b40:	mov	r0, fp
   15b44:	mov	r3, #0
   15b48:	mov	ip, #5
   15b4c:	mov	lr, r3
   15b50:	strd	r0, [sp, #8]
   15b54:	str	r4, [sp, #16]
   15b58:	str	r5, [sp, #24]
   15b5c:	b	15b70 <__assert_fail@plt+0x4c70>
   15b60:	mov	r8, fp
   15b64:	mov	r9, r2
   15b68:	subs	ip, ip, #1
   15b6c:	beq	15cbc <__assert_fail@plt+0x4dbc>
   15b70:	cmp	r9, r8, asr #31
   15b74:	mov	r1, #0
   15b78:	bne	15db8 <__assert_fail@plt+0x4eb8>
   15b7c:	smull	r2, r3, r8, r0
   15b80:	mov	fp, r2
   15b84:	mov	r2, r3
   15b88:	cmp	r1, #0
   15b8c:	beq	15b60 <__assert_fail@plt+0x4c60>
   15b90:	cmp	r8, #0
   15b94:	mov	lr, #1
   15b98:	sbcs	r3, r9, #0
   15b9c:	mvnge	r8, #0
   15ba0:	mvnge	r9, #-2147483648	; 0x80000000
   15ba4:	movlt	r8, #0
   15ba8:	movlt	r9, #-2147483648	; 0x80000000
   15bac:	b	15b68 <__assert_fail@plt+0x4c68>
   15bb0:	str	r3, [sp, #4]
   15bb4:	asr	r1, fp, #31
   15bb8:	mov	r0, fp
   15bbc:	mov	r3, #0
   15bc0:	mov	ip, #8
   15bc4:	mov	lr, r3
   15bc8:	strd	r0, [sp, #8]
   15bcc:	str	r4, [sp, #16]
   15bd0:	str	r5, [sp, #24]
   15bd4:	b	15be8 <__assert_fail@plt+0x4ce8>
   15bd8:	mov	r8, fp
   15bdc:	mov	r9, r2
   15be0:	subs	ip, ip, #1
   15be4:	beq	15cbc <__assert_fail@plt+0x4dbc>
   15be8:	cmp	r9, r8, asr #31
   15bec:	mov	r1, #0
   15bf0:	bne	15cf4 <__assert_fail@plt+0x4df4>
   15bf4:	smull	r2, r3, r8, r0
   15bf8:	mov	fp, r2
   15bfc:	mov	r2, r3
   15c00:	cmp	r1, #0
   15c04:	beq	15bd8 <__assert_fail@plt+0x4cd8>
   15c08:	cmp	r8, #0
   15c0c:	mov	lr, #1
   15c10:	sbcs	r3, r9, #0
   15c14:	mvnge	r8, #0
   15c18:	mvnge	r9, #-2147483648	; 0x80000000
   15c1c:	movlt	r8, #0
   15c20:	movlt	r9, #-2147483648	; 0x80000000
   15c24:	b	15be0 <__assert_fail@plt+0x4ce0>
   15c28:	str	r3, [sp, #4]
   15c2c:	b	15840 <__assert_fail@plt+0x4940>
   15c30:	mov	r3, #1
   15c34:	mov	fp, #1024	; 0x400
   15c38:	str	r3, [sp, #4]
   15c3c:	b	159d4 <__assert_fail@plt+0x4ad4>
   15c40:	mov	r3, #1
   15c44:	mov	fp, #1024	; 0x400
   15c48:	str	r3, [sp, #4]
   15c4c:	b	15a4c <__assert_fail@plt+0x4b4c>
   15c50:	mov	r3, #1
   15c54:	str	r3, [sp, #4]
   15c58:	b	15840 <__assert_fail@plt+0x4940>
   15c5c:	mov	r3, #1
   15c60:	mov	fp, #1024	; 0x400
   15c64:	str	r3, [sp, #4]
   15c68:	b	15ac4 <__assert_fail@plt+0x4bc4>
   15c6c:	mov	r3, #1
   15c70:	mov	fp, #1024	; 0x400
   15c74:	str	r3, [sp, #4]
   15c78:	b	15b3c <__assert_fail@plt+0x4c3c>
   15c7c:	mov	r3, #1
   15c80:	mov	fp, #1024	; 0x400
   15c84:	str	r3, [sp, #4]
   15c88:	b	158c4 <__assert_fail@plt+0x49c4>
   15c8c:	mov	r3, #1
   15c90:	mov	fp, #1024	; 0x400
   15c94:	str	r3, [sp, #4]
   15c98:	b	15bb4 <__assert_fail@plt+0x4cb4>
   15c9c:	mov	r3, #1
   15ca0:	mov	fp, #1024	; 0x400
   15ca4:	str	r3, [sp, #4]
   15ca8:	b	1593c <__assert_fail@plt+0x4a3c>
   15cac:	mov	r3, #1
   15cb0:	mov	fp, #1024	; 0x400
   15cb4:	str	r3, [sp, #4]
   15cb8:	b	15998 <__assert_fail@plt+0x4a98>
   15cbc:	ldr	r4, [sp, #16]
   15cc0:	ldr	r5, [sp, #24]
   15cc4:	orr	r4, r4, lr
   15cc8:	b	15840 <__assert_fail@plt+0x4940>
   15ccc:	cmp	r0, #0
   15cd0:	mov	r4, #1
   15cd4:	sbcs	r3, r1, #0
   15cd8:	bge	158b4 <__assert_fail@plt+0x49b4>
   15cdc:	mov	r8, #0
   15ce0:	mov	r9, #-2147483648	; 0x80000000
   15ce4:	b	15840 <__assert_fail@plt+0x4940>
   15ce8:	mov	r3, #2
   15cec:	mov	fp, #1000	; 0x3e8
   15cf0:	b	15728 <__assert_fail@plt+0x4828>
   15cf4:	cmp	r9, #0
   15cf8:	umull	r4, r5, r8, r0
   15cfc:	umull	sl, fp, r0, r9
   15d00:	bge	15d10 <__assert_fail@plt+0x4e10>
   15d04:	mov	r3, #0
   15d08:	subs	sl, sl, r3
   15d0c:	sbc	fp, fp, r0
   15d10:	adds	r2, sl, r5
   15d14:	mov	r3, #0
   15d18:	adc	r3, fp, r3
   15d1c:	cmp	r3, r2, asr #31
   15d20:	bne	160b0 <__assert_fail@plt+0x51b0>
   15d24:	mov	fp, r4
   15d28:	b	15c00 <__assert_fail@plt+0x4d00>
   15d2c:	cmp	r9, #0
   15d30:	umull	r4, r5, r8, r0
   15d34:	umull	sl, fp, r0, r9
   15d38:	bge	15d48 <__assert_fail@plt+0x4e48>
   15d3c:	mov	r3, #0
   15d40:	subs	sl, sl, r3
   15d44:	sbc	fp, fp, r0
   15d48:	adds	r2, sl, r5
   15d4c:	mov	r3, #0
   15d50:	adc	r3, fp, r3
   15d54:	cmp	r3, r2, asr #31
   15d58:	bne	160d0 <__assert_fail@plt+0x51d0>
   15d5c:	mov	fp, r4
   15d60:	b	15a20 <__assert_fail@plt+0x4b20>
   15d64:	umull	r0, r1, fp, r9
   15d68:	cmp	r9, #0
   15d6c:	umull	r2, r3, r8, fp
   15d70:	strd	r0, [sp, #16]
   15d74:	bge	15d8c <__assert_fail@plt+0x4e8c>
   15d78:	subs	r1, r0, ip
   15d7c:	str	r1, [sp, #16]
   15d80:	ldr	r1, [sp, #20]
   15d84:	sbc	r1, r1, fp
   15d88:	str	r1, [sp, #20]
   15d8c:	mov	r1, r3
   15d90:	ldr	r3, [sp, #16]
   15d94:	mov	r0, r2
   15d98:	mov	lr, #0
   15d9c:	adds	r2, r3, r1
   15da0:	ldr	r3, [sp, #20]
   15da4:	adc	lr, r3, lr
   15da8:	cmp	lr, r2, asr #31
   15dac:	bne	16130 <__assert_fail@plt+0x5230>
   15db0:	mov	r1, r0
   15db4:	b	159bc <__assert_fail@plt+0x4abc>
   15db8:	cmp	r9, #0
   15dbc:	umull	r4, r5, r8, r0
   15dc0:	umull	sl, fp, r0, r9
   15dc4:	bge	15dd4 <__assert_fail@plt+0x4ed4>
   15dc8:	mov	r3, #0
   15dcc:	subs	sl, sl, r3
   15dd0:	sbc	fp, fp, r0
   15dd4:	adds	r2, sl, r5
   15dd8:	mov	r3, #0
   15ddc:	adc	r3, fp, r3
   15de0:	cmp	r3, r2, asr #31
   15de4:	bne	16070 <__assert_fail@plt+0x5170>
   15de8:	mov	fp, r4
   15dec:	b	15b88 <__assert_fail@plt+0x4c88>
   15df0:	cmp	r9, #0
   15df4:	umull	r4, r5, r8, r0
   15df8:	umull	sl, fp, r0, r9
   15dfc:	bge	15e0c <__assert_fail@plt+0x4f0c>
   15e00:	mov	r3, #0
   15e04:	subs	sl, sl, r3
   15e08:	sbc	fp, fp, r0
   15e0c:	adds	r2, sl, r5
   15e10:	mov	r3, #0
   15e14:	adc	r3, fp, r3
   15e18:	cmp	r3, r2, asr #31
   15e1c:	bne	160f0 <__assert_fail@plt+0x51f0>
   15e20:	mov	fp, r4
   15e24:	b	15910 <__assert_fail@plt+0x4a10>
   15e28:	cmp	r9, #0
   15e2c:	umull	r4, r5, r8, r0
   15e30:	umull	sl, fp, r0, r9
   15e34:	bge	15e44 <__assert_fail@plt+0x4f44>
   15e38:	mov	r3, #0
   15e3c:	subs	sl, sl, r3
   15e40:	sbc	fp, fp, r0
   15e44:	adds	r2, sl, r5
   15e48:	mov	r3, #0
   15e4c:	adc	r3, fp, r3
   15e50:	cmp	r3, r2, asr #31
   15e54:	bne	16110 <__assert_fail@plt+0x5210>
   15e58:	mov	fp, r4
   15e5c:	b	15b10 <__assert_fail@plt+0x4c10>
   15e60:	cmp	r9, #0
   15e64:	umull	r4, r5, r8, r0
   15e68:	umull	sl, fp, r0, r9
   15e6c:	bge	15e7c <__assert_fail@plt+0x4f7c>
   15e70:	mov	r3, #0
   15e74:	subs	sl, sl, r3
   15e78:	sbc	fp, fp, r0
   15e7c:	adds	r2, sl, r5
   15e80:	mov	r3, #0
   15e84:	adc	r3, fp, r3
   15e88:	cmp	r3, r2, asr #31
   15e8c:	bne	16090 <__assert_fail@plt+0x5190>
   15e90:	mov	fp, r4
   15e94:	b	15a98 <__assert_fail@plt+0x4b98>
   15e98:	ldrb	r3, [r6, #2]
   15e9c:	mov	fp, #1024	; 0x400
   15ea0:	cmp	r3, #66	; 0x42
   15ea4:	movne	r3, #1
   15ea8:	moveq	r3, #3
   15eac:	b	15728 <__assert_fail@plt+0x4828>
   15eb0:	mov	lr, #512	; 0x200
   15eb4:	cmp	r9, #0
   15eb8:	lsr	r3, r8, #23
   15ebc:	lsl	r2, r8, #9
   15ec0:	umull	r0, r1, lr, r9
   15ec4:	bge	15ed0 <__assert_fail@plt+0x4fd0>
   15ec8:	subs	r0, r0, ip
   15ecc:	sbc	r1, r1, lr
   15ed0:	adds	r3, r0, r3
   15ed4:	mov	lr, #0
   15ed8:	adc	r1, r1, lr
   15edc:	cmp	r1, r3, asr #31
   15ee0:	beq	15830 <__assert_fail@plt+0x4930>
   15ee4:	lsl	r3, r9, #9
   15ee8:	mov	ip, #1
   15eec:	lsl	r2, r8, #9
   15ef0:	orr	r3, r3, r8, lsr #23
   15ef4:	b	15830 <__assert_fail@plt+0x4930>
   15ef8:	mov	lr, #1024	; 0x400
   15efc:	cmp	r9, #0
   15f00:	lsr	r3, r8, #22
   15f04:	lsl	r2, r8, #10
   15f08:	umull	r0, r1, lr, r9
   15f0c:	bge	15f18 <__assert_fail@plt+0x5018>
   15f10:	subs	r0, r0, ip
   15f14:	sbc	r1, r1, lr
   15f18:	adds	r3, r0, r3
   15f1c:	mov	lr, #0
   15f20:	adc	r1, r1, lr
   15f24:	cmp	r1, r3, asr #31
   15f28:	lslne	r3, r9, #10
   15f2c:	movne	ip, #1
   15f30:	lslne	r2, r8, #10
   15f34:	orrne	r3, r3, r8, lsr #22
   15f38:	b	15830 <__assert_fail@plt+0x4930>
   15f3c:	umull	r2, r3, r8, fp
   15f40:	cmp	r9, #0
   15f44:	strd	r2, [sp, #16]
   15f48:	umull	r2, r3, fp, r9
   15f4c:	bge	15f58 <__assert_fail@plt+0x5058>
   15f50:	subs	r2, r2, r1
   15f54:	sbc	r3, r3, fp
   15f58:	ldr	r0, [sp, #20]
   15f5c:	mov	ip, #0
   15f60:	adds	r0, r2, r0
   15f64:	adc	ip, r3, ip
   15f68:	cmp	ip, r0, asr #31
   15f6c:	bne	16150 <__assert_fail@plt+0x5250>
   15f70:	mov	r3, r0
   15f74:	ldr	lr, [sp, #16]
   15f78:	b	1595c <__assert_fail@plt+0x4a5c>
   15f7c:	mov	lr, #2
   15f80:	mov	r3, #0
   15f84:	adds	ip, r8, r8
   15f88:	adc	r0, r3, r3
   15f8c:	umull	r2, r3, lr, r9
   15f90:	cmp	r9, #0
   15f94:	strd	r2, [sp, #8]
   15f98:	bge	15fb0 <__assert_fail@plt+0x50b0>
   15f9c:	subs	r3, r2, r1
   15fa0:	str	r3, [sp, #8]
   15fa4:	ldr	r3, [sp, #12]
   15fa8:	sbc	r3, r3, lr
   15fac:	str	r3, [sp, #12]
   15fb0:	ldrd	sl, [sp, #8]
   15fb4:	mov	lr, #0
   15fb8:	adds	r2, sl, r0
   15fbc:	adc	r3, fp, lr
   15fc0:	cmp	r3, r2, asr #31
   15fc4:	bne	16060 <__assert_fail@plt+0x5160>
   15fc8:	mov	r3, r2
   15fcc:	b	15894 <__assert_fail@plt+0x4994>
   15fd0:	cmp	r3, #0
   15fd4:	umull	r8, r9, lr, fp
   15fd8:	umull	r2, r3, fp, r3
   15fdc:	strd	r2, [sp, #16]
   15fe0:	strd	r8, [sp, #24]
   15fe4:	bge	15ffc <__assert_fail@plt+0x50fc>
   15fe8:	subs	r3, r2, ip
   15fec:	str	r3, [sp, #16]
   15ff0:	ldr	r3, [sp, #20]
   15ff4:	sbc	r3, r3, fp
   15ff8:	str	r3, [sp, #20]
   15ffc:	ldr	r3, [sp, #16]
   16000:	mov	lr, #0
   16004:	ldrd	sl, [sp, #24]
   16008:	adds	r2, r3, fp
   1600c:	ldr	r3, [sp, #20]
   16010:	adc	lr, r3, lr
   16014:	cmp	lr, r2, asr #31
   16018:	beq	15980 <__assert_fail@plt+0x4a80>
   1601c:	ldrd	r8, [sp, #8]
   16020:	mov	ip, #1
   16024:	mul	lr, r0, r9
   16028:	umull	r2, r3, r0, r8
   1602c:	mla	lr, r8, r1, lr
   16030:	mov	sl, r2
   16034:	add	r3, lr, r3
   16038:	mov	r2, r3
   1603c:	b	15980 <__assert_fail@plt+0x4a80>
   16040:	movw	r3, #29024	; 0x7160
   16044:	movt	r3, #1
   16048:	movw	r1, #29036	; 0x716c
   1604c:	movt	r1, #1
   16050:	movw	r0, #29052	; 0x717c
   16054:	movt	r0, #1
   16058:	mov	r2, #85	; 0x55
   1605c:	bl	10f00 <__assert_fail@plt>
   16060:	adds	ip, r8, r8
   16064:	mov	r1, #1
   16068:	adc	r3, r9, r9
   1606c:	b	15894 <__assert_fail@plt+0x4994>
   16070:	ldrd	r4, [sp, #8]
   16074:	mov	r1, #1
   16078:	mul	sl, r8, r5
   1607c:	umull	r2, r3, r8, r4
   16080:	mla	sl, r4, r9, sl
   16084:	mov	fp, r2
   16088:	add	r2, sl, r3
   1608c:	b	15b88 <__assert_fail@plt+0x4c88>
   16090:	ldrd	r4, [sp, #8]
   16094:	mov	r1, #1
   16098:	mul	sl, r8, r5
   1609c:	umull	r2, r3, r8, r4
   160a0:	mla	sl, r4, r9, sl
   160a4:	mov	fp, r2
   160a8:	add	r2, sl, r3
   160ac:	b	15a98 <__assert_fail@plt+0x4b98>
   160b0:	ldrd	r4, [sp, #8]
   160b4:	mov	r1, #1
   160b8:	mul	sl, r8, r5
   160bc:	umull	r2, r3, r8, r4
   160c0:	mla	sl, r4, r9, sl
   160c4:	mov	fp, r2
   160c8:	add	r2, sl, r3
   160cc:	b	15c00 <__assert_fail@plt+0x4d00>
   160d0:	ldrd	r4, [sp, #8]
   160d4:	mov	r1, #1
   160d8:	mul	sl, r8, r5
   160dc:	umull	r2, r3, r8, r4
   160e0:	mla	sl, r4, r9, sl
   160e4:	mov	fp, r2
   160e8:	add	r2, sl, r3
   160ec:	b	15a20 <__assert_fail@plt+0x4b20>
   160f0:	ldrd	r4, [sp, #8]
   160f4:	mov	r1, #1
   160f8:	mul	sl, r8, r5
   160fc:	umull	r2, r3, r8, r4
   16100:	mla	sl, r4, r9, sl
   16104:	mov	fp, r2
   16108:	add	r2, sl, r3
   1610c:	b	15910 <__assert_fail@plt+0x4a10>
   16110:	ldrd	r4, [sp, #8]
   16114:	mov	r1, #1
   16118:	mul	sl, r8, r5
   1611c:	umull	r2, r3, r8, r4
   16120:	mla	sl, r4, r9, sl
   16124:	mov	fp, r2
   16128:	add	r2, sl, r3
   1612c:	b	15b10 <__assert_fail@plt+0x4c10>
   16130:	ldrd	sl, [sp, #8]
   16134:	mov	ip, #1
   16138:	mul	r1, r8, fp
   1613c:	umull	r2, r3, r8, sl
   16140:	mla	r0, sl, r9, r1
   16144:	mov	r1, r2
   16148:	add	r2, r0, r3
   1614c:	b	159bc <__assert_fail@plt+0x4abc>
   16150:	ldrd	r2, [sp, #8]
   16154:	mov	r1, #1
   16158:	ldr	ip, [sp, #8]
   1615c:	mul	r0, r8, r3
   16160:	umull	r2, r3, r8, r2
   16164:	mla	r0, ip, r9, r0
   16168:	mov	lr, r2
   1616c:	add	r3, r0, r3
   16170:	b	1595c <__assert_fail@plt+0x4a5c>
   16174:	cmp	r1, #0
   16178:	cmpne	r0, #0
   1617c:	beq	161c8 <__assert_fail@plt+0x52c8>
   16180:	strd	r4, [sp, #-16]!
   16184:	umull	r4, r5, r0, r1
   16188:	str	r6, [sp, #8]
   1618c:	str	lr, [sp, #12]
   16190:	adds	r3, r5, #0
   16194:	movne	r3, #1
   16198:	cmp	r4, #0
   1619c:	blt	161a8 <__assert_fail@plt+0x52a8>
   161a0:	cmp	r3, #0
   161a4:	beq	161d4 <__assert_fail@plt+0x52d4>
   161a8:	bl	10e1c <__errno_location@plt>
   161ac:	mov	r3, #12
   161b0:	ldrd	r4, [sp]
   161b4:	ldr	r6, [sp, #8]
   161b8:	add	sp, sp, #12
   161bc:	str	r3, [r0]
   161c0:	mov	r0, #0
   161c4:	pop	{pc}		; (ldr pc, [sp], #4)
   161c8:	mov	r1, #1
   161cc:	mov	r0, r1
   161d0:	b	10c9c <calloc@plt>
   161d4:	ldrd	r4, [sp]
   161d8:	ldr	r6, [sp, #8]
   161dc:	ldr	lr, [sp, #12]
   161e0:	add	sp, sp, #16
   161e4:	b	10c9c <calloc@plt>
   161e8:	cmp	r0, #0
   161ec:	beq	161f8 <__assert_fail@plt+0x52f8>
   161f0:	blt	16200 <__assert_fail@plt+0x5300>
   161f4:	b	10db0 <malloc@plt>
   161f8:	mov	r0, #1
   161fc:	b	10db0 <malloc@plt>
   16200:	str	r4, [sp, #-8]!
   16204:	str	lr, [sp, #4]
   16208:	bl	10e1c <__errno_location@plt>
   1620c:	mov	r3, #12
   16210:	ldr	r4, [sp]
   16214:	add	sp, sp, #4
   16218:	str	r3, [r0]
   1621c:	mov	r0, #0
   16220:	pop	{pc}		; (ldr pc, [sp], #4)
   16224:	cmp	r0, #0
   16228:	beq	16250 <__assert_fail@plt+0x5350>
   1622c:	cmp	r1, #0
   16230:	str	r4, [sp, #-8]!
   16234:	str	lr, [sp, #4]
   16238:	beq	16258 <__assert_fail@plt+0x5358>
   1623c:	blt	1626c <__assert_fail@plt+0x536c>
   16240:	ldr	r4, [sp]
   16244:	ldr	lr, [sp, #4]
   16248:	add	sp, sp, #8
   1624c:	b	10d44 <realloc@plt>
   16250:	mov	r0, r1
   16254:	b	161e8 <__assert_fail@plt+0x52e8>
   16258:	bl	125b0 <__assert_fail@plt+0x16b0>
   1625c:	ldr	r4, [sp]
   16260:	add	sp, sp, #4
   16264:	mov	r0, #0
   16268:	pop	{pc}		; (ldr pc, [sp], #4)
   1626c:	bl	10e1c <__errno_location@plt>
   16270:	mov	r3, #12
   16274:	str	r3, [r0]
   16278:	b	1625c <__assert_fail@plt+0x535c>
   1627c:	strd	r4, [sp, #-16]!
   16280:	mov	r4, r0
   16284:	str	r6, [sp, #8]
   16288:	str	lr, [sp, #12]
   1628c:	bl	10d8c <__fpending@plt>
   16290:	ldr	r5, [r4]
   16294:	mov	r6, r0
   16298:	mov	r0, r4
   1629c:	bl	1249c <__assert_fail@plt+0x159c>
   162a0:	mov	r4, r0
   162a4:	and	r5, r5, #32
   162a8:	cmp	r5, #0
   162ac:	bne	162e4 <__assert_fail@plt+0x53e4>
   162b0:	cmp	r0, #0
   162b4:	beq	162d0 <__assert_fail@plt+0x53d0>
   162b8:	cmp	r6, #0
   162bc:	bne	162fc <__assert_fail@plt+0x53fc>
   162c0:	bl	10e1c <__errno_location@plt>
   162c4:	ldr	r4, [r0]
   162c8:	subs	r4, r4, #9
   162cc:	mvnne	r4, #0
   162d0:	mov	r0, r4
   162d4:	ldrd	r4, [sp]
   162d8:	ldr	r6, [sp, #8]
   162dc:	add	sp, sp, #12
   162e0:	pop	{pc}		; (ldr pc, [sp], #4)
   162e4:	cmp	r0, #0
   162e8:	bne	162fc <__assert_fail@plt+0x53fc>
   162ec:	bl	10e1c <__errno_location@plt>
   162f0:	str	r4, [r0]
   162f4:	mvn	r4, #0
   162f8:	b	162d0 <__assert_fail@plt+0x53d0>
   162fc:	mvn	r4, #0
   16300:	b	162d0 <__assert_fail@plt+0x53d0>
   16304:	mov	r0, #14
   16308:	str	r4, [sp, #-8]!
   1630c:	str	lr, [sp, #4]
   16310:	bl	10eac <nl_langinfo@plt>
   16314:	cmp	r0, #0
   16318:	beq	1633c <__assert_fail@plt+0x543c>
   1631c:	ldrb	r2, [r0]
   16320:	movw	r3, #29092	; 0x71a4
   16324:	movt	r3, #1
   16328:	ldr	r4, [sp]
   1632c:	add	sp, sp, #4
   16330:	cmp	r2, #0
   16334:	moveq	r0, r3
   16338:	pop	{pc}		; (ldr pc, [sp], #4)
   1633c:	ldr	r4, [sp]
   16340:	add	sp, sp, #4
   16344:	movw	r0, #29092	; 0x71a4
   16348:	movt	r0, #1
   1634c:	pop	{pc}		; (ldr pc, [sp], #4)
   16350:	strd	r4, [sp, #-20]!	; 0xffffffec
   16354:	mov	r5, r2
   16358:	strd	r6, [sp, #8]
   1635c:	subs	r6, r0, #0
   16360:	mov	r7, r1
   16364:	str	lr, [sp, #16]
   16368:	sub	sp, sp, #12
   1636c:	addeq	r6, sp, #4
   16370:	mov	r0, r6
   16374:	bl	10d98 <mbrtowc@plt>
   16378:	cmp	r5, #0
   1637c:	cmnne	r0, #3
   16380:	mov	r4, r0
   16384:	bhi	163a0 <__assert_fail@plt+0x54a0>
   16388:	mov	r0, r4
   1638c:	add	sp, sp, #12
   16390:	ldrd	r4, [sp]
   16394:	ldrd	r6, [sp, #8]
   16398:	add	sp, sp, #16
   1639c:	pop	{pc}		; (ldr pc, [sp], #4)
   163a0:	mov	r0, #0
   163a4:	bl	163f8 <__assert_fail@plt+0x54f8>
   163a8:	cmp	r0, #0
   163ac:	bne	16388 <__assert_fail@plt+0x5488>
   163b0:	ldrb	r3, [r7]
   163b4:	mov	r4, #1
   163b8:	str	r3, [r6]
   163bc:	b	16388 <__assert_fail@plt+0x5488>
   163c0:	umull	r2, r3, r1, r2
   163c4:	cmp	r3, #0
   163c8:	bne	163d4 <__assert_fail@plt+0x54d4>
   163cc:	mov	r1, r2
   163d0:	b	16224 <__assert_fail@plt+0x5324>
   163d4:	str	r4, [sp, #-8]!
   163d8:	str	lr, [sp, #4]
   163dc:	bl	10e1c <__errno_location@plt>
   163e0:	mov	r3, #12
   163e4:	ldr	r4, [sp]
   163e8:	add	sp, sp, #4
   163ec:	str	r3, [r0]
   163f0:	mov	r0, #0
   163f4:	pop	{pc}		; (ldr pc, [sp], #4)
   163f8:	push	{lr}		; (str lr, [sp, #-4]!)
   163fc:	sub	sp, sp, #268	; 0x10c
   16400:	movw	r2, #257	; 0x101
   16404:	add	r1, sp, #4
   16408:	bl	16450 <__assert_fail@plt+0x5550>
   1640c:	cmp	r0, #0
   16410:	movne	r0, #0
   16414:	bne	16448 <__assert_fail@plt+0x5548>
   16418:	movw	r1, #29100	; 0x71ac
   1641c:	movt	r1, #1
   16420:	add	r0, sp, #4
   16424:	bl	10cb4 <strcmp@plt>
   16428:	cmp	r0, #0
   1642c:	beq	16448 <__assert_fail@plt+0x5548>
   16430:	add	r0, sp, #4
   16434:	movw	r1, #29104	; 0x71b0
   16438:	movt	r1, #1
   1643c:	bl	10cb4 <strcmp@plt>
   16440:	adds	r0, r0, #0
   16444:	movne	r0, #1
   16448:	add	sp, sp, #268	; 0x10c
   1644c:	pop	{pc}		; (ldr pc, [sp], #4)
   16450:	strd	r4, [sp, #-16]!
   16454:	mov	r5, r1
   16458:	mov	r1, #0
   1645c:	mov	r4, r2
   16460:	str	r6, [sp, #8]
   16464:	str	lr, [sp, #12]
   16468:	bl	10e94 <setlocale@plt>
   1646c:	subs	r6, r0, #0
   16470:	beq	164f0 <__assert_fail@plt+0x55f0>
   16474:	bl	10e04 <strlen@plt>
   16478:	cmp	r4, r0
   1647c:	bhi	1649c <__assert_fail@plt+0x559c>
   16480:	cmp	r4, #0
   16484:	moveq	r0, #34	; 0x22
   16488:	bne	164c0 <__assert_fail@plt+0x55c0>
   1648c:	ldrd	r4, [sp]
   16490:	ldr	r6, [sp, #8]
   16494:	add	sp, sp, #12
   16498:	pop	{pc}		; (ldr pc, [sp], #4)
   1649c:	add	r2, r0, #1
   164a0:	mov	r1, r6
   164a4:	mov	r0, r5
   164a8:	bl	10cfc <memcpy@plt>
   164ac:	ldrd	r4, [sp]
   164b0:	mov	r0, #0
   164b4:	ldr	r6, [sp, #8]
   164b8:	add	sp, sp, #12
   164bc:	pop	{pc}		; (ldr pc, [sp], #4)
   164c0:	sub	r4, r4, #1
   164c4:	mov	r1, r6
   164c8:	mov	r2, r4
   164cc:	mov	r0, r5
   164d0:	bl	10cfc <memcpy@plt>
   164d4:	mov	r3, #0
   164d8:	mov	r0, #34	; 0x22
   164dc:	strb	r3, [r5, r4]
   164e0:	ldrd	r4, [sp]
   164e4:	ldr	r6, [sp, #8]
   164e8:	add	sp, sp, #12
   164ec:	pop	{pc}		; (ldr pc, [sp], #4)
   164f0:	cmp	r4, #0
   164f4:	mov	r0, #22
   164f8:	strbne	r6, [r5]
   164fc:	ldrd	r4, [sp]
   16500:	ldr	r6, [sp, #8]
   16504:	add	sp, sp, #12
   16508:	pop	{pc}		; (ldr pc, [sp], #4)
   1650c:	mov	r1, #0
   16510:	b	10e94 <setlocale@plt>
   16514:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16518:	mov	r7, r0
   1651c:	ldr	r6, [pc, #72]	; 1656c <__assert_fail@plt+0x566c>
   16520:	ldr	r5, [pc, #72]	; 16570 <__assert_fail@plt+0x5670>
   16524:	add	r6, pc, r6
   16528:	add	r5, pc, r5
   1652c:	sub	r6, r6, r5
   16530:	mov	r8, r1
   16534:	mov	r9, r2
   16538:	bl	10c7c <calloc@plt-0x20>
   1653c:	asrs	r6, r6, #2
   16540:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16544:	mov	r4, #0
   16548:	add	r4, r4, #1
   1654c:	ldr	r3, [r5], #4
   16550:	mov	r2, r9
   16554:	mov	r1, r8
   16558:	mov	r0, r7
   1655c:	blx	r3
   16560:	cmp	r6, r4
   16564:	bne	16548 <__assert_fail@plt+0x5648>
   16568:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1656c:	andeq	r1, r1, r8, ror #19
   16570:	andeq	r1, r1, r0, ror #19
   16574:	bx	lr
   16578:	ldr	r3, [pc, #12]	; 1658c <__assert_fail@plt+0x568c>
   1657c:	mov	r1, #0
   16580:	add	r3, pc, r3
   16584:	ldr	r2, [r3]
   16588:	b	10e28 <__cxa_atexit@plt>
   1658c:	andeq	r1, r1, ip, asr fp

Disassembly of section .fini:

00016590 <.fini>:
   16590:	push	{r3, lr}
   16594:	pop	{r3, pc}
