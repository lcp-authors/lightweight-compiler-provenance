
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	110d0 <__assert_fail@plt+0x48>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <calloc@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <calloc@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	r8, r1, r0, ror #3

00010e24 <calloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <fputs_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <raise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <strcmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <posix_fadvise64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <memmove@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <_exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <memcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <mbsinit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <fwrite_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <dcgettext@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <realloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <textdomain@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <iswprint@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <fwrite@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <lseek64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <__ctype_get_mb_cur_max@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <__fpending@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <mbrtowc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <error@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <malloc@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <__libc_start_main@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <__freading@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <__gmon_start__@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <getopt_long@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <__ctype_b_loc@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <exit@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <bcmp@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <strlen@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <strchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <__errno_location@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <__cxa_atexit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <memset@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <__printf_chk@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <fileno@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__fprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

00010fec <memchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #176]!	; 0xb0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #168]!	; 0xa8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #160]!	; 0xa0

00011010 <__overflow@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #152]!	; 0x98

0001101c <setlocale@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #144]!	; 0x90

00011028 <strrchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #136]!	; 0x88

00011034 <nl_langinfo@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #128]!	; 0x80

00011040 <__strtoll_internal@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #120]!	; 0x78

0001104c <fopen64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #112]!	; 0x70

00011058 <bindtextdomain@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #104]!	; 0x68

00011064 <fread_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #96]!	; 0x60

00011070 <strncmp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #88]!	; 0x58

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #80]!	; 0x50

00011088 <__assert_fail@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #72]!	; 0x48

Disassembly of section .text:

00011094 <.text>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <__assert_fail@plt+0x3c>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <__assert_fail@plt+0x40>
   110b8:	ldr	r3, [pc, #12]	; 110cc <__assert_fail@plt+0x44>
   110bc:	bl	10f38 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	andeq	r7, r1, r8, ror #9
   110c8:	andeq	r1, r1, ip, asr #8
   110cc:	andeq	r7, r1, r8, lsl #9
   110d0:	ldr	r3, [pc, #20]	; 110ec <__assert_fail@plt+0x64>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <__assert_fail@plt+0x68>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10f50 <__gmon_start__@plt>
   110ec:	andeq	r7, r1, r0, lsr #30
   110f0:	ldrdeq	r0, [r0], -ip
   110f4:	ldr	r0, [pc, #24]	; 11114 <__assert_fail@plt+0x8c>
   110f8:	ldr	r3, [pc, #24]	; 11118 <__assert_fail@plt+0x90>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__assert_fail@plt+0x94>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	r9, r2, r0, lsr r1
   11118:	andeq	r9, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <__assert_fail@plt+0xc4>
   11124:	ldr	r1, [pc, #36]	; 11150 <__assert_fail@plt+0xc8>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0xcc>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r9, r2, r0, lsr r1
   11150:	andeq	r9, r2, r0, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <__assert_fail@plt+0xf4>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <__assert_fail@plt+0x6c>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	r9, r2, r4, asr r1
   11180:	b	11120 <__assert_fail@plt+0x98>
   11184:	push	{fp, lr}
   11188:	mov	fp, sp
   1118c:	sub	sp, sp, #56	; 0x38
   11190:	mov	r4, r0
   11194:	cmp	r0, #0
   11198:	bne	11408 <__assert_fail@plt+0x380>
   1119c:	movw	r1, #30011	; 0x753b
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10eb4 <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	movw	r0, #37216	; 0x9160
   111b8:	movt	r0, #2
   111bc:	ldr	r2, [r0]
   111c0:	mov	r0, #1
   111c4:	bl	10fc8 <__printf_chk@plt>
   111c8:	movw	r1, #30041	; 0x7559
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10eb4 <dcgettext@plt>
   111dc:	mov	r1, r0
   111e0:	mov	r0, #1
   111e4:	mov	r2, #32
   111e8:	bl	10fc8 <__printf_chk@plt>
   111ec:	movw	r1, #30831	; 0x786f
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10eb4 <dcgettext@plt>
   11200:	movw	r7, #37196	; 0x914c
   11204:	movt	r7, #2
   11208:	ldr	r1, [r7]
   1120c:	bl	10e30 <fputs_unlocked@plt>
   11210:	movw	r1, #30887	; 0x78a7
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10eb4 <dcgettext@plt>
   11224:	ldr	r1, [r7]
   11228:	bl	10e30 <fputs_unlocked@plt>
   1122c:	movw	r1, #30111	; 0x759f
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10eb4 <dcgettext@plt>
   11240:	ldr	r1, [r7]
   11244:	bl	10e30 <fputs_unlocked@plt>
   11248:	movw	r1, #30353	; 0x7691
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10eb4 <dcgettext@plt>
   1125c:	ldr	r1, [r7]
   11260:	bl	10e30 <fputs_unlocked@plt>
   11264:	movw	r1, #30398	; 0x76be
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10eb4 <dcgettext@plt>
   11278:	ldr	r1, [r7]
   1127c:	bl	10e30 <fputs_unlocked@plt>
   11280:	movw	r1, #30452	; 0x76f4
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10eb4 <dcgettext@plt>
   11294:	movw	r5, #30720	; 0x7800
   11298:	mov	r1, r0
   1129c:	mov	r0, #1
   112a0:	movt	r5, #1
   112a4:	mov	r2, r5
   112a8:	mov	r3, r5
   112ac:	bl	10fc8 <__printf_chk@plt>
   112b0:	movw	r0, #31472	; 0x7af0
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movt	r0, #1
   112c0:	add	r1, r0, #32
   112c4:	add	r3, r0, #16
   112c8:	vld1.64	{d18-d19}, [r0], r2
   112cc:	vld1.64	{d16-d17}, [r1]
   112d0:	vld1.64	{d20-d21}, [r3]
   112d4:	vldr	d22, [r0]
   112d8:	add	r1, r6, #32
   112dc:	add	r0, r6, #16
   112e0:	vst1.64	{d16-d17}, [r1]
   112e4:	movw	r1, #30962	; 0x78f2
   112e8:	vst1.64	{d20-d21}, [r0]
   112ec:	mov	r0, r6
   112f0:	movt	r1, #1
   112f4:	vst1.64	{d18-d19}, [r0], r2
   112f8:	vstr	d22, [r0]
   112fc:	mov	r0, r5
   11300:	bl	10e48 <strcmp@plt>
   11304:	cmp	r0, #0
   11308:	ldrne	r1, [r6, #8]!
   1130c:	cmpne	r1, #0
   11310:	bne	112fc <__assert_fail@plt+0x274>
   11314:	movw	r1, #31057	; 0x7951
   11318:	ldr	r6, [r6, #4]
   1131c:	mov	r0, #0
   11320:	mov	r2, #5
   11324:	movt	r1, #1
   11328:	bl	10eb4 <dcgettext@plt>
   1132c:	movw	r2, #30781	; 0x783d
   11330:	movw	r3, #31080	; 0x7968
   11334:	mov	r1, r0
   11338:	mov	r0, #1
   1133c:	movt	r2, #1
   11340:	movt	r3, #1
   11344:	bl	10fc8 <__printf_chk@plt>
   11348:	cmp	r6, #0
   1134c:	mov	r0, #5
   11350:	mov	r1, #0
   11354:	moveq	r6, r5
   11358:	bl	1101c <setlocale@plt>
   1135c:	cmp	r0, #0
   11360:	beq	11398 <__assert_fail@plt+0x310>
   11364:	movw	r1, #31120	; 0x7990
   11368:	mov	r2, #3
   1136c:	movt	r1, #1
   11370:	bl	11070 <strncmp@plt>
   11374:	cmp	r0, #0
   11378:	beq	11398 <__assert_fail@plt+0x310>
   1137c:	movw	r1, #31124	; 0x7994
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10eb4 <dcgettext@plt>
   11390:	ldr	r1, [r7]
   11394:	bl	10e30 <fputs_unlocked@plt>
   11398:	movw	r1, #31195	; 0x79db
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10eb4 <dcgettext@plt>
   113ac:	movw	r2, #31080	; 0x7968
   113b0:	mov	r1, r0
   113b4:	mov	r0, #1
   113b8:	mov	r3, r5
   113bc:	movt	r2, #1
   113c0:	bl	10fc8 <__printf_chk@plt>
   113c4:	movw	r1, #31222	; 0x79f6
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	movt	r1, #1
   113d4:	bl	10eb4 <dcgettext@plt>
   113d8:	mov	r1, r0
   113dc:	movw	r0, #30990	; 0x790e
   113e0:	movw	r3, #31272	; 0x7a28
   113e4:	cmp	r6, r5
   113e8:	mov	r2, r6
   113ec:	movt	r0, #1
   113f0:	movt	r3, #1
   113f4:	moveq	r3, r0
   113f8:	mov	r0, #1
   113fc:	bl	10fc8 <__printf_chk@plt>
   11400:	mov	r0, r4
   11404:	bl	10f74 <exit@plt>
   11408:	movw	r0, #37184	; 0x9140
   1140c:	movw	r1, #29972	; 0x7514
   11410:	mov	r2, #5
   11414:	movt	r0, #2
   11418:	movt	r1, #1
   1141c:	ldr	r5, [r0]
   11420:	mov	r0, #0
   11424:	bl	10eb4 <dcgettext@plt>
   11428:	mov	r2, r0
   1142c:	movw	r0, #37216	; 0x9160
   11430:	mov	r1, #1
   11434:	movt	r0, #2
   11438:	ldr	r3, [r0]
   1143c:	mov	r0, r5
   11440:	bl	10fe0 <__fprintf_chk@plt>
   11444:	mov	r0, r4
   11448:	bl	10f74 <exit@plt>
   1144c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11450:	add	fp, sp, #28
   11454:	sub	sp, sp, #28
   11458:	mov	r5, r0
   1145c:	ldr	r0, [r1]
   11460:	mov	r4, r1
   11464:	bl	12984 <__assert_fail@plt+0x18fc>
   11468:	movw	r1, #31272	; 0x7a28
   1146c:	mov	r0, #6
   11470:	movt	r1, #1
   11474:	bl	1101c <setlocale@plt>
   11478:	movw	r6, #30785	; 0x7841
   1147c:	movw	r1, #30727	; 0x7807
   11480:	movt	r6, #1
   11484:	movt	r1, #1
   11488:	mov	r0, r6
   1148c:	bl	11058 <bindtextdomain@plt>
   11490:	mov	r0, r6
   11494:	bl	10ecc <textdomain@plt>
   11498:	movw	r0, #9872	; 0x2690
   1149c:	movt	r0, #1
   114a0:	bl	174ec <__assert_fail@plt+0x6464>
   114a4:	movw	r9, #30751	; 0x781f
   114a8:	movw	r7, #31376	; 0x7a90
   114ac:	mov	r6, #76	; 0x4c
   114b0:	mov	r8, #0
   114b4:	mov	sl, #0
   114b8:	mov	r0, #0
   114bc:	movt	r9, #1
   114c0:	movt	r7, #1
   114c4:	str	r0, [sp, #12]
   114c8:	mov	r0, r5
   114cc:	mov	r1, r4
   114d0:	mov	r2, r9
   114d4:	mov	r3, r7
   114d8:	str	r8, [sp]
   114dc:	bl	10f5c <getopt_long@plt>
   114e0:	cmp	r0, #99	; 0x63
   114e4:	ble	1156c <__assert_fail@plt+0x4e4>
   114e8:	cmp	r0, #100	; 0x64
   114ec:	beq	1155c <__assert_fail@plt+0x4d4>
   114f0:	cmp	r0, #105	; 0x69
   114f4:	beq	11564 <__assert_fail@plt+0x4dc>
   114f8:	cmp	r0, #119	; 0x77
   114fc:	bne	11744 <__assert_fail@plt+0x6bc>
   11500:	movw	r0, #37200	; 0x9150
   11504:	movw	r1, #31272	; 0x7a28
   11508:	mov	r2, #10
   1150c:	add	r3, sp, #16
   11510:	movt	r0, #2
   11514:	movt	r1, #1
   11518:	ldr	r0, [r0]
   1151c:	str	r1, [sp]
   11520:	mov	r1, #0
   11524:	bl	155a0 <__assert_fail@plt+0x4518>
   11528:	cmp	r0, #1
   1152c:	bhi	11700 <__assert_fail@plt+0x678>
   11530:	ldr	r1, [sp, #20]
   11534:	cmn	r1, #1
   11538:	ble	11700 <__assert_fail@plt+0x678>
   1153c:	ldr	r2, [sp, #16]
   11540:	mvn	r3, #-2147483648	; 0x80000000
   11544:	subs	r3, r3, r2
   11548:	rscs	r1, r1, #0
   1154c:	movwlt	r2, #0
   11550:	subs	r6, r0, #1
   11554:	movne	r6, r2
   11558:	b	114c8 <__assert_fail@plt+0x440>
   1155c:	mov	sl, #1
   11560:	b	114c8 <__assert_fail@plt+0x440>
   11564:	mov	r0, #1
   11568:	b	114c4 <__assert_fail@plt+0x43c>
   1156c:	cmn	r0, #3
   11570:	beq	11584 <__assert_fail@plt+0x4fc>
   11574:	cmn	r0, #2
   11578:	bne	115cc <__assert_fail@plt+0x544>
   1157c:	mov	r0, #0
   11580:	bl	11184 <__assert_fail@plt+0xfc>
   11584:	movw	r0, #37096	; 0x90e8
   11588:	movw	r2, #30795	; 0x784b
   1158c:	mov	r1, #0
   11590:	movt	r0, #2
   11594:	movt	r2, #1
   11598:	str	r1, [sp, #4]
   1159c:	movw	r1, #30720	; 0x7800
   115a0:	movt	r1, #1
   115a4:	ldr	r3, [r0]
   115a8:	movw	r0, #37196	; 0x914c
   115ac:	str	r2, [sp]
   115b0:	movw	r2, #30781	; 0x783d
   115b4:	movt	r0, #2
   115b8:	movt	r2, #1
   115bc:	ldr	r0, [r0]
   115c0:	bl	14dec <__assert_fail@plt+0x3d64>
   115c4:	mov	r0, #0
   115c8:	bl	10f74 <exit@plt>
   115cc:	cmn	r0, #1
   115d0:	bne	11744 <__assert_fail@plt+0x6bc>
   115d4:	movw	r7, #37176	; 0x9138
   115d8:	movt	r7, #2
   115dc:	ldr	r0, [r7]
   115e0:	sub	r1, r5, r0
   115e4:	cmp	r1, #2
   115e8:	blt	11630 <__assert_fail@plt+0x5a8>
   115ec:	movw	r1, #30811	; 0x785b
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	movt	r1, #1
   115fc:	bl	10eb4 <dcgettext@plt>
   11600:	mov	r5, r0
   11604:	ldr	r0, [r7]
   11608:	add	r0, r4, r0, lsl #2
   1160c:	ldr	r0, [r0, #4]
   11610:	bl	14948 <__assert_fail@plt+0x38c0>
   11614:	mov	r3, r0
   11618:	mov	r0, #0
   1161c:	mov	r1, #0
   11620:	mov	r2, r5
   11624:	bl	10f20 <error@plt>
   11628:	mov	r0, #1
   1162c:	bl	11184 <__assert_fail@plt+0xfc>
   11630:	cmp	r0, r5
   11634:	bge	11640 <__assert_fail@plt+0x5b8>
   11638:	ldr	r4, [r4, r0, lsl #2]
   1163c:	b	11648 <__assert_fail@plt+0x5c0>
   11640:	movw	r4, #31897	; 0x7c99
   11644:	movt	r4, #1
   11648:	movw	r1, #31897	; 0x7c99
   1164c:	mov	r0, r4
   11650:	movt	r1, #1
   11654:	bl	10e48 <strcmp@plt>
   11658:	cmp	r0, #0
   1165c:	bne	11670 <__assert_fail@plt+0x5e8>
   11660:	movw	r0, #37192	; 0x9148
   11664:	movt	r0, #2
   11668:	ldr	r5, [r0]
   1166c:	b	116bc <__assert_fail@plt+0x634>
   11670:	movw	r1, #30828	; 0x786c
   11674:	mov	r0, r4
   11678:	movt	r1, #1
   1167c:	bl	1104c <fopen64@plt>
   11680:	mov	r5, r0
   11684:	cmp	r0, #0
   11688:	bne	116bc <__assert_fail@plt+0x634>
   1168c:	bl	10fa4 <__errno_location@plt>
   11690:	ldr	r5, [r0]
   11694:	mov	r0, #0
   11698:	mov	r1, #3
   1169c:	mov	r2, r4
   116a0:	bl	1469c <__assert_fail@plt+0x3614>
   116a4:	movw	r2, #30760	; 0x7828
   116a8:	mov	r3, r0
   116ac:	mov	r0, #1
   116b0:	mov	r1, r5
   116b4:	movt	r2, #1
   116b8:	bl	10f20 <error@plt>
   116bc:	mov	r0, r5
   116c0:	mov	r1, #2
   116c4:	bl	12780 <__assert_fail@plt+0x16f8>
   116c8:	movw	r0, #37196	; 0x914c
   116cc:	tst	sl, #1
   116d0:	movt	r0, #2
   116d4:	ldr	r2, [r0]
   116d8:	beq	116f0 <__assert_fail@plt+0x668>
   116dc:	ldr	r0, [sp, #12]
   116e0:	mov	r1, r4
   116e4:	and	r3, r0, #1
   116e8:	mov	r0, r5
   116ec:	bl	1174c <__assert_fail@plt+0x6c4>
   116f0:	mov	r0, r5
   116f4:	mov	r1, r4
   116f8:	mov	r3, r6
   116fc:	bl	11990 <__assert_fail@plt+0x908>
   11700:	movw	r1, #30763	; 0x782b
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	movt	r1, #1
   11710:	bl	10eb4 <dcgettext@plt>
   11714:	mov	r4, r0
   11718:	movw	r0, #37200	; 0x9150
   1171c:	movt	r0, #2
   11720:	ldr	r0, [r0]
   11724:	bl	14948 <__assert_fail@plt+0x38c0>
   11728:	movw	r2, #30756	; 0x7824
   1172c:	str	r0, [sp]
   11730:	mov	r0, #1
   11734:	mov	r1, #0
   11738:	mov	r3, r4
   1173c:	movt	r2, #1
   11740:	bl	10f20 <error@plt>
   11744:	mov	r0, #1
   11748:	bl	11184 <__assert_fail@plt+0xfc>
   1174c:	push	{fp, lr}
   11750:	mov	fp, sp
   11754:	sub	sp, sp, #40	; 0x28
   11758:	mov	r6, r0
   1175c:	mov	r0, #8192	; 0x2000
   11760:	str	r3, [sp, #12]
   11764:	str	r2, [sp, #20]
   11768:	str	r1, [sp, #8]
   1176c:	bl	15020 <__assert_fail@plt+0x3f98>
   11770:	mov	r4, r0
   11774:	mov	r0, #5120	; 0x1400
   11778:	bl	15020 <__assert_fail@plt+0x3f98>
   1177c:	str	r0, [sp, #16]
   11780:	sub	r0, fp, #12
   11784:	bl	11f9c <__assert_fail@plt+0xf14>
   11788:	ldr	r0, [sp, #12]
   1178c:	mov	sl, #0
   11790:	cmp	r0, #0
   11794:	bne	117b4 <__assert_fail@plt+0x72c>
   11798:	b	11854 <__assert_fail@plt+0x7cc>
   1179c:	cmp	r0, #0
   117a0:	bne	11984 <__assert_fail@plt+0x8fc>
   117a4:	ldr	r0, [sp, #12]
   117a8:	mov	sl, #0
   117ac:	cmp	r0, #0
   117b0:	beq	11854 <__assert_fail@plt+0x7cc>
   117b4:	add	r9, r4, sl
   117b8:	rsb	r2, sl, #8192	; 0x2000
   117bc:	mov	r1, #1
   117c0:	mov	r3, r6
   117c4:	mov	r0, r9
   117c8:	bl	11064 <fread_unlocked@plt>
   117cc:	mov	r8, r0
   117d0:	cmp	r0, #1
   117d4:	blt	11830 <__assert_fail@plt+0x7a8>
   117d8:	mov	r5, #0
   117dc:	add	r0, r5, sl
   117e0:	ldrb	r7, [r4, r0]
   117e4:	mov	r0, r7
   117e8:	bl	11f7c <__assert_fail@plt+0xef4>
   117ec:	cmp	r0, #0
   117f0:	bne	11824 <__assert_fail@plt+0x79c>
   117f4:	cmp	r7, #61	; 0x3d
   117f8:	beq	11824 <__assert_fail@plt+0x79c>
   117fc:	sub	r8, r8, #1
   11800:	add	r0, r9, r5
   11804:	sub	r2, r8, r5
   11808:	add	r1, r0, #1
   1180c:	bl	10e6c <memmove@plt>
   11810:	cmp	r8, #1
   11814:	blt	11830 <__assert_fail@plt+0x7a8>
   11818:	cmp	r5, r8
   1181c:	blt	117dc <__assert_fail@plt+0x754>
   11820:	b	11830 <__assert_fail@plt+0x7a8>
   11824:	add	r5, r5, #1
   11828:	cmp	r8, #1
   1182c:	bge	11818 <__assert_fail@plt+0x790>
   11830:	ldr	r0, [r6]
   11834:	tst	r0, #32
   11838:	bne	11920 <__assert_fail@plt+0x898>
   1183c:	add	sl, r8, sl
   11840:	cmp	sl, #8192	; 0x2000
   11844:	bge	11888 <__assert_fail@plt+0x800>
   11848:	ands	r0, r0, #16
   1184c:	beq	117b4 <__assert_fail@plt+0x72c>
   11850:	b	11888 <__assert_fail@plt+0x800>
   11854:	add	r0, r4, sl
   11858:	rsb	r2, sl, #8192	; 0x2000
   1185c:	mov	r1, #1
   11860:	mov	r3, r6
   11864:	bl	11064 <fread_unlocked@plt>
   11868:	ldr	r1, [r6]
   1186c:	tst	r1, #32
   11870:	bne	11920 <__assert_fail@plt+0x898>
   11874:	add	sl, r0, sl
   11878:	cmp	sl, #8192	; 0x2000
   1187c:	bge	11888 <__assert_fail@plt+0x800>
   11880:	ands	r0, r1, #16
   11884:	beq	11854 <__assert_fail@plt+0x7cc>
   11888:	mov	r1, #0
   1188c:	mov	r8, r6
   11890:	ldr	r6, [sp, #16]
   11894:	mov	r0, #5120	; 0x1400
   11898:	cmp	r1, #0
   1189c:	mov	r2, sl
   118a0:	mov	r5, r1
   118a4:	mov	r1, r4
   118a8:	str	r0, [fp, #-16]
   118ac:	sub	r0, fp, #16
   118b0:	movne	r2, #0
   118b4:	str	r0, [sp]
   118b8:	sub	r0, fp, #12
   118bc:	mov	r3, r6
   118c0:	bl	11fa8 <__assert_fail@plt+0xf20>
   118c4:	ldr	r2, [fp, #-16]
   118c8:	ldr	r3, [sp, #20]
   118cc:	mov	r7, r0
   118d0:	mov	r0, r6
   118d4:	mov	r1, #1
   118d8:	bl	10ea8 <fwrite_unlocked@plt>
   118dc:	ldr	r1, [fp, #-16]
   118e0:	cmp	r0, r1
   118e4:	bcc	11934 <__assert_fail@plt+0x8ac>
   118e8:	cmp	r7, #0
   118ec:	beq	11960 <__assert_fail@plt+0x8d8>
   118f0:	ldr	r0, [r8]
   118f4:	mov	r2, #2
   118f8:	add	r1, r5, #1
   118fc:	mov	r6, r8
   11900:	ands	r0, r0, #16
   11904:	movweq	r2, #1
   11908:	cmp	r1, r2
   1190c:	bcs	1179c <__assert_fail@plt+0x714>
   11910:	ldr	r2, [fp, #-12]
   11914:	orrs	r2, r5, r2
   11918:	bne	1188c <__assert_fail@plt+0x804>
   1191c:	b	1179c <__assert_fail@plt+0x714>
   11920:	bl	10fa4 <__errno_location@plt>
   11924:	ldr	r4, [r0]
   11928:	movw	r1, #31313	; 0x7a51
   1192c:	movt	r1, #1
   11930:	b	11944 <__assert_fail@plt+0x8bc>
   11934:	bl	10fa4 <__errno_location@plt>
   11938:	ldr	r4, [r0]
   1193c:	movw	r1, #31324	; 0x7a5c
   11940:	movt	r1, #1
   11944:	mov	r0, #0
   11948:	mov	r2, #5
   1194c:	bl	10eb4 <dcgettext@plt>
   11950:	mov	r2, r0
   11954:	mov	r0, #1
   11958:	mov	r1, r4
   1195c:	bl	10f20 <error@plt>
   11960:	movw	r1, #31336	; 0x7a68
   11964:	mov	r0, #0
   11968:	mov	r2, #5
   1196c:	movt	r1, #1
   11970:	bl	10eb4 <dcgettext@plt>
   11974:	mov	r2, r0
   11978:	mov	r0, #1
   1197c:	mov	r1, #0
   11980:	bl	10f20 <error@plt>
   11984:	ldr	r1, [sp, #8]
   11988:	mov	r0, r6
   1198c:	bl	11bd8 <__assert_fail@plt+0xb50>
   11990:	push	{fp, lr}
   11994:	mov	fp, sp
   11998:	sub	sp, sp, #16
   1199c:	mov	r5, r0
   119a0:	mov	r0, #30720	; 0x7800
   119a4:	str	r3, [fp, #-4]
   119a8:	stm	sp, {r1, r2}
   119ac:	bl	15020 <__assert_fail@plt+0x3f98>
   119b0:	mov	r4, r0
   119b4:	mov	r0, #49152	; 0xc000
   119b8:	bl	15020 <__assert_fail@plt+0x3f98>
   119bc:	mov	r7, r0
   119c0:	mov	sl, #0
   119c4:	str	r0, [sp, #8]
   119c8:	mov	r6, #0
   119cc:	add	r0, r4, r6
   119d0:	rsb	r2, r6, #30720	; 0x7800
   119d4:	mov	r1, #1
   119d8:	mov	r3, r5
   119dc:	bl	11064 <fread_unlocked@plt>
   119e0:	add	r6, r0, r6
   119e4:	ldr	r0, [r5]
   119e8:	tst	r0, #16
   119ec:	bne	11a00 <__assert_fail@plt+0x978>
   119f0:	cmp	r6, #30720	; 0x7800
   119f4:	bge	11a00 <__assert_fail@plt+0x978>
   119f8:	ands	r0, r0, #32
   119fc:	beq	119cc <__assert_fail@plt+0x944>
   11a00:	cmp	r6, #1
   11a04:	blt	11b18 <__assert_fail@plt+0xa90>
   11a08:	movw	r1, #26215	; 0x6667
   11a0c:	add	r0, r6, #4
   11a10:	mov	r2, r7
   11a14:	movt	r1, #26214	; 0x6666
   11a18:	smmul	r0, r0, r1
   11a1c:	lsr	r1, r0, #1
   11a20:	add	r0, r1, r0, lsr #31
   11a24:	mov	r1, r6
   11a28:	lsl	r8, r0, #3
   11a2c:	mov	r0, r4
   11a30:	mov	r3, r8
   11a34:	bl	11c68 <__assert_fail@plt+0xbe0>
   11a38:	ldr	r0, [fp, #-4]
   11a3c:	cmp	r0, #0
   11a40:	beq	11a4c <__assert_fail@plt+0x9c4>
   11a44:	mov	r7, #0
   11a48:	b	11a90 <__assert_fail@plt+0xa08>
   11a4c:	movw	r0, #37196	; 0x914c
   11a50:	mov	r1, #1
   11a54:	mov	r2, r8
   11a58:	movt	r0, #2
   11a5c:	ldr	r3, [r0]
   11a60:	mov	r0, r7
   11a64:	bl	10ea8 <fwrite_unlocked@plt>
   11a68:	cmp	r0, r8
   11a6c:	bcs	11b18 <__assert_fail@plt+0xa90>
   11a70:	b	11b80 <__assert_fail@plt+0xaf8>
   11a74:	mov	r1, #10
   11a78:	bl	11010 <__overflow@plt>
   11a7c:	mov	sl, #0
   11a80:	cmn	r0, #1
   11a84:	beq	11b80 <__assert_fail@plt+0xaf8>
   11a88:	cmp	r7, r8
   11a8c:	bge	11b18 <__assert_fail@plt+0xa90>
   11a90:	ldr	r0, [fp, #-4]
   11a94:	sub	r9, r8, r7
   11a98:	sub	r0, r0, sl
   11a9c:	cmp	r0, r9
   11aa0:	movlt	r9, r0
   11aa4:	cmp	r9, #0
   11aa8:	beq	11ae8 <__assert_fail@plt+0xa60>
   11aac:	movw	r1, #37196	; 0x914c
   11ab0:	ldr	r0, [sp, #8]
   11ab4:	mov	r2, r9
   11ab8:	movt	r1, #2
   11abc:	ldr	r3, [r1]
   11ac0:	mov	r1, #1
   11ac4:	add	r0, r0, r7
   11ac8:	bl	10ea8 <fwrite_unlocked@plt>
   11acc:	cmp	r0, r9
   11ad0:	bcc	11b80 <__assert_fail@plt+0xaf8>
   11ad4:	add	r7, r9, r7
   11ad8:	add	sl, r9, sl
   11adc:	cmp	r7, r8
   11ae0:	blt	11a90 <__assert_fail@plt+0xa08>
   11ae4:	b	11b18 <__assert_fail@plt+0xa90>
   11ae8:	ldr	r0, [sp, #4]
   11aec:	ldr	r2, [r0, #20]
   11af0:	ldr	r1, [r0, #24]
   11af4:	cmp	r2, r1
   11af8:	bcs	11a74 <__assert_fail@plt+0x9ec>
   11afc:	add	r1, r2, #1
   11b00:	mov	sl, #0
   11b04:	str	r1, [r0, #20]
   11b08:	mov	r0, #10
   11b0c:	strb	r0, [r2]
   11b10:	cmp	r7, r8
   11b14:	blt	11a90 <__assert_fail@plt+0xa08>
   11b18:	ldr	r0, [r5]
   11b1c:	ldr	r7, [sp, #8]
   11b20:	tst	r0, #16
   11b24:	cmpeq	r6, #30720	; 0x7800
   11b28:	bne	11b34 <__assert_fail@plt+0xaac>
   11b2c:	ands	r0, r0, #32
   11b30:	beq	119c8 <__assert_fail@plt+0x940>
   11b34:	ldr	r0, [fp, #-4]
   11b38:	cmp	r0, #0
   11b3c:	beq	11b94 <__assert_fail@plt+0xb0c>
   11b40:	cmp	sl, #1
   11b44:	blt	11b94 <__assert_fail@plt+0xb0c>
   11b48:	ldr	r0, [sp, #4]
   11b4c:	ldr	r2, [r0, #20]
   11b50:	ldr	r1, [r0, #24]
   11b54:	cmp	r2, r1
   11b58:	bcs	11b70 <__assert_fail@plt+0xae8>
   11b5c:	add	r1, r2, #1
   11b60:	str	r1, [r0, #20]
   11b64:	mov	r1, #10
   11b68:	strb	r1, [r2]
   11b6c:	b	11b94 <__assert_fail@plt+0xb0c>
   11b70:	mov	r1, #10
   11b74:	bl	11010 <__overflow@plt>
   11b78:	cmn	r0, #1
   11b7c:	bne	11b94 <__assert_fail@plt+0xb0c>
   11b80:	bl	10fa4 <__errno_location@plt>
   11b84:	ldr	r4, [r0]
   11b88:	movw	r1, #31324	; 0x7a5c
   11b8c:	movt	r1, #1
   11b90:	b	11bbc <__assert_fail@plt+0xb34>
   11b94:	ldrb	r0, [r5]
   11b98:	tst	r0, #32
   11b9c:	bne	11bac <__assert_fail@plt+0xb24>
   11ba0:	ldr	r1, [sp]
   11ba4:	mov	r0, r5
   11ba8:	bl	11bd8 <__assert_fail@plt+0xb50>
   11bac:	bl	10fa4 <__errno_location@plt>
   11bb0:	ldr	r4, [r0]
   11bb4:	movw	r1, #31313	; 0x7a51
   11bb8:	movt	r1, #1
   11bbc:	mov	r0, #0
   11bc0:	mov	r2, #5
   11bc4:	bl	10eb4 <dcgettext@plt>
   11bc8:	mov	r2, r0
   11bcc:	mov	r0, #1
   11bd0:	mov	r1, r4
   11bd4:	bl	10f20 <error@plt>
   11bd8:	push	{fp, lr}
   11bdc:	mov	fp, sp
   11be0:	mov	r5, r1
   11be4:	bl	127bc <__assert_fail@plt+0x1734>
   11be8:	cmp	r0, #0
   11bec:	bne	11bf8 <__assert_fail@plt+0xb70>
   11bf0:	mov	r0, #0
   11bf4:	bl	10f74 <exit@plt>
   11bf8:	movw	r1, #31897	; 0x7c99
   11bfc:	mov	r0, r5
   11c00:	movt	r1, #1
   11c04:	bl	10e48 <strcmp@plt>
   11c08:	mov	r6, r0
   11c0c:	bl	10fa4 <__errno_location@plt>
   11c10:	ldr	r4, [r0]
   11c14:	cmp	r6, #0
   11c18:	bne	11c40 <__assert_fail@plt+0xbb8>
   11c1c:	movw	r1, #31350	; 0x7a76
   11c20:	mov	r0, #0
   11c24:	mov	r2, #5
   11c28:	movt	r1, #1
   11c2c:	bl	10eb4 <dcgettext@plt>
   11c30:	mov	r2, r0
   11c34:	mov	r0, #1
   11c38:	mov	r1, r4
   11c3c:	bl	10f20 <error@plt>
   11c40:	mov	r0, #0
   11c44:	mov	r1, #3
   11c48:	mov	r2, r5
   11c4c:	bl	1469c <__assert_fail@plt+0x3614>
   11c50:	movw	r2, #30760	; 0x7828
   11c54:	mov	r3, r0
   11c58:	mov	r0, #1
   11c5c:	mov	r1, r4
   11c60:	movt	r2, #1
   11c64:	bl	10f20 <error@plt>
   11c68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11c6c:	add	fp, sp, #24
   11c70:	cmp	r1, #0
   11c74:	cmpne	r3, #0
   11c78:	bne	11c90 <__assert_fail@plt+0xc08>
   11c7c:	cmp	r3, #0
   11c80:	beq	11c8c <__assert_fail@plt+0xc04>
   11c84:	mov	r0, #0
   11c88:	strb	r0, [r2]
   11c8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c90:	movw	r8, #31543	; 0x7b37
   11c94:	add	r0, r0, #2
   11c98:	rsb	lr, r3, #0
   11c9c:	mov	ip, #0
   11ca0:	mov	r9, #0
   11ca4:	movt	r8, #1
   11ca8:	ldrb	r3, [r0, #-2]
   11cac:	mov	r5, r2
   11cb0:	add	r6, lr, r9
   11cb4:	ldrb	r3, [r8, r3, lsr #3]
   11cb8:	strb	r3, [r5, r9]!
   11cbc:	adds	r3, r6, #1
   11cc0:	bcs	11c8c <__assert_fail@plt+0xc04>
   11cc4:	cmp	r1, #1
   11cc8:	ldrb	r3, [r0, #-2]
   11ccc:	mov	r4, #0
   11cd0:	add	r7, r6, #2
   11cd4:	ldrbne	r4, [r0, #-1]
   11cd8:	lsl	r3, r3, #2
   11cdc:	lsrne	r4, r4, #6
   11ce0:	cmp	r7, #0
   11ce4:	add	r3, r4, r3
   11ce8:	and	r3, r3, #31
   11cec:	ldrb	r3, [r8, r3]
   11cf0:	strb	r3, [r5, #1]
   11cf4:	beq	11c8c <__assert_fail@plt+0xc04>
   11cf8:	add	r7, r6, #3
   11cfc:	mov	r3, #61	; 0x3d
   11d00:	cmp	r1, #1
   11d04:	beq	11d14 <__assert_fail@plt+0xc8c>
   11d08:	ldrb	r3, [r0, #-1]
   11d0c:	ubfx	r3, r3, #1, #5
   11d10:	ldrb	r3, [r8, r3]
   11d14:	cmp	r7, #0
   11d18:	strb	r3, [r5, #2]
   11d1c:	beq	11c8c <__assert_fail@plt+0xc04>
   11d20:	add	r7, r6, #4
   11d24:	cmp	r1, #1
   11d28:	beq	11d48 <__assert_fail@plt+0xcc0>
   11d2c:	ldrb	r3, [r0, #-1]
   11d30:	subs	r1, r1, #2
   11d34:	lsl	r3, r3, #4
   11d38:	beq	11ea0 <__assert_fail@plt+0xe18>
   11d3c:	ldrb	r4, [r0]
   11d40:	lsr	r4, r4, #4
   11d44:	b	11ea4 <__assert_fail@plt+0xe1c>
   11d48:	mov	r3, #61	; 0x3d
   11d4c:	mov	r1, #0
   11d50:	cmp	r7, #0
   11d54:	strb	r3, [r5, #3]
   11d58:	beq	11c8c <__assert_fail@plt+0xc04>
   11d5c:	add	r7, r6, #5
   11d60:	cmp	r1, #0
   11d64:	beq	11d84 <__assert_fail@plt+0xcfc>
   11d68:	ldrb	r3, [r0]
   11d6c:	subs	r1, r1, #1
   11d70:	lsl	r3, r3, #1
   11d74:	beq	11d9c <__assert_fail@plt+0xd14>
   11d78:	ldrb	r4, [r0, #1]
   11d7c:	lsr	r4, r4, #7
   11d80:	b	11da0 <__assert_fail@plt+0xd18>
   11d84:	mov	r3, #61	; 0x3d
   11d88:	mov	r1, #0
   11d8c:	cmp	r7, #0
   11d90:	strb	r3, [r5, #4]
   11d94:	bne	11db8 <__assert_fail@plt+0xd30>
   11d98:	b	11c8c <__assert_fail@plt+0xc04>
   11d9c:	mov	r4, #0
   11da0:	add	r3, r4, r3
   11da4:	and	r3, r3, #31
   11da8:	ldrb	r3, [r8, r3]
   11dac:	cmp	r7, #0
   11db0:	strb	r3, [r5, #4]
   11db4:	beq	11c8c <__assert_fail@plt+0xc04>
   11db8:	add	r7, r6, #6
   11dbc:	cmp	r1, #0
   11dc0:	beq	11e04 <__assert_fail@plt+0xd7c>
   11dc4:	ldrb	r3, [r0, #1]
   11dc8:	ubfx	r3, r3, #2, #5
   11dcc:	ldrb	r3, [r8, r3]
   11dd0:	cmp	r7, #0
   11dd4:	strb	r3, [r5, #5]
   11dd8:	beq	11c8c <__assert_fail@plt+0xc04>
   11ddc:	add	r7, r6, #7
   11de0:	cmp	r1, #0
   11de4:	beq	11e18 <__assert_fail@plt+0xd90>
   11de8:	ldrb	r3, [r0, #1]
   11dec:	subs	r1, r1, #1
   11df0:	lsl	r3, r3, #3
   11df4:	beq	11e30 <__assert_fail@plt+0xda8>
   11df8:	ldrb	r4, [r0, #2]
   11dfc:	lsr	r4, r4, #5
   11e00:	b	11e34 <__assert_fail@plt+0xdac>
   11e04:	mov	r3, #61	; 0x3d
   11e08:	cmp	r7, #0
   11e0c:	strb	r3, [r5, #5]
   11e10:	bne	11ddc <__assert_fail@plt+0xd54>
   11e14:	b	11c8c <__assert_fail@plt+0xc04>
   11e18:	mov	r3, #61	; 0x3d
   11e1c:	mov	r1, #0
   11e20:	cmp	r7, #0
   11e24:	strb	r3, [r5, #6]
   11e28:	bne	11e4c <__assert_fail@plt+0xdc4>
   11e2c:	b	11c8c <__assert_fail@plt+0xc04>
   11e30:	mov	r4, #0
   11e34:	add	r3, r4, r3
   11e38:	and	r3, r3, #31
   11e3c:	ldrb	r3, [r8, r3]
   11e40:	cmp	r7, #0
   11e44:	strb	r3, [r5, #6]
   11e48:	beq	11c8c <__assert_fail@plt+0xc04>
   11e4c:	cmp	r1, #0
   11e50:	beq	11e70 <__assert_fail@plt+0xde8>
   11e54:	ldrb	r3, [r0, #2]
   11e58:	and	r3, r3, #31
   11e5c:	ldrb	r3, [r8, r3]
   11e60:	cmn	r6, #8
   11e64:	strb	r3, [r5, #7]
   11e68:	bne	11e80 <__assert_fail@plt+0xdf8>
   11e6c:	b	11c8c <__assert_fail@plt+0xc04>
   11e70:	mov	r3, #61	; 0x3d
   11e74:	cmn	r6, #8
   11e78:	strb	r3, [r5, #7]
   11e7c:	beq	11c8c <__assert_fail@plt+0xc04>
   11e80:	subs	r1, r1, #1
   11e84:	add	r9, r9, #8
   11e88:	adc	r3, ip, #0
   11e8c:	cmp	r1, #0
   11e90:	addne	r0, r0, #5
   11e94:	cmpne	r3, #0
   11e98:	bne	11ca8 <__assert_fail@plt+0xc20>
   11e9c:	b	11ec0 <__assert_fail@plt+0xe38>
   11ea0:	mov	r4, #0
   11ea4:	add	r3, r4, r3
   11ea8:	and	r3, r3, #31
   11eac:	ldrb	r3, [r8, r3]
   11eb0:	cmp	r7, #0
   11eb4:	strb	r3, [r5, #3]
   11eb8:	bne	11d5c <__assert_fail@plt+0xcd4>
   11ebc:	b	11c8c <__assert_fail@plt+0xc04>
   11ec0:	add	r2, r2, r9
   11ec4:	b	11c84 <__assert_fail@plt+0xbfc>
   11ec8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11ecc:	add	fp, sp, #24
   11ed0:	mov	r8, r0
   11ed4:	movw	r0, #26215	; 0x6667
   11ed8:	mov	r4, r1
   11edc:	mov	r6, r2
   11ee0:	movt	r0, #26214	; 0x6666
   11ee4:	smmul	r0, r1, r0
   11ee8:	asr	r1, r0, #1
   11eec:	add	r0, r1, r0, lsr #31
   11ef0:	add	r1, r0, r0, lsl #2
   11ef4:	subs	r1, r4, r1
   11ef8:	addne	r0, r0, #1
   11efc:	cmn	r0, #1
   11f00:	ble	11f10 <__assert_fail@plt+0xe88>
   11f04:	cmn	r0, #-268435455	; 0xf0000001
   11f08:	ble	11f24 <__assert_fail@plt+0xe9c>
   11f0c:	b	11f64 <__assert_fail@plt+0xedc>
   11f10:	beq	11f24 <__assert_fail@plt+0xe9c>
   11f14:	mov	r1, #-2147483648	; 0x80000000
   11f18:	sdiv	r1, r1, r0
   11f1c:	cmp	r1, #8
   11f20:	blt	11f64 <__assert_fail@plt+0xedc>
   11f24:	cmn	r4, #1
   11f28:	ble	11f64 <__assert_fail@plt+0xedc>
   11f2c:	lsl	r7, r0, #3
   11f30:	orr	r5, r7, #1
   11f34:	mov	r0, r5
   11f38:	bl	16f54 <__assert_fail@plt+0x5ecc>
   11f3c:	cmp	r0, #0
   11f40:	str	r0, [r6]
   11f44:	beq	11f74 <__assert_fail@plt+0xeec>
   11f48:	mov	r2, r0
   11f4c:	mov	r0, r8
   11f50:	mov	r1, r4
   11f54:	mov	r3, r5
   11f58:	bl	11c68 <__assert_fail@plt+0xbe0>
   11f5c:	mov	r0, r7
   11f60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f64:	mov	r7, #0
   11f68:	mov	r0, r7
   11f6c:	str	r7, [r6]
   11f70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f74:	mov	r0, r5
   11f78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f7c:	movw	r1, #31575	; 0x7b57
   11f80:	movt	r1, #1
   11f84:	add	r0, r1, r0
   11f88:	ldrsb	r1, [r0]
   11f8c:	mov	r0, #0
   11f90:	cmn	r1, #1
   11f94:	movwgt	r0, #1
   11f98:	bx	lr
   11f9c:	mov	r1, #0
   11fa0:	str	r1, [r0]
   11fa4:	bx	lr
   11fa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fac:	add	fp, sp, #28
   11fb0:	sub	sp, sp, #20
   11fb4:	mov	r5, r1
   11fb8:	ldr	r1, [fp, #8]
   11fbc:	str	r3, [sp, #16]
   11fc0:	mov	r6, r2
   11fc4:	cmp	r0, #0
   11fc8:	ldr	sl, [r1]
   11fcc:	str	sl, [sp, #12]
   11fd0:	beq	11fec <__assert_fail@plt+0xf64>
   11fd4:	ldr	r2, [r0]
   11fd8:	clz	r1, r6
   11fdc:	lsr	r9, r1, #5
   11fe0:	cmp	r2, #0
   11fe4:	movwne	r2, #1
   11fe8:	b	11ff4 <__assert_fail@plt+0xf6c>
   11fec:	mov	r2, #0
   11ff0:	mov	r9, #0
   11ff4:	add	r1, r0, #4
   11ff8:	cmp	r2, #0
   11ffc:	str	r0, [sp, #4]
   12000:	str	r1, [sp]
   12004:	clz	r1, r0
   12008:	cmpeq	r9, #0
   1200c:	lsr	r0, r1, #5
   12010:	str	r0, [sp, #8]
   12014:	beq	121b8 <__assert_fail@plt+0x1130>
   12018:	cmp	r6, #0
   1201c:	mov	r0, r6
   12020:	movwne	r0, #1
   12024:	orr	r0, r9, r0
   12028:	cmp	r0, #1
   1202c:	bne	12350 <__assert_fail@plt+0x12c8>
   12030:	ldr	r4, [sp, #4]
   12034:	clz	r0, r6
   12038:	mov	r8, r6
   1203c:	lsr	r0, r0, #5
   12040:	tst	r0, #1
   12044:	bne	12094 <__assert_fail@plt+0x100c>
   12048:	b	1207c <__assert_fail@plt+0xff4>
   1204c:	sub	r8, r8, #1
   12050:	add	r5, r5, #1
   12054:	cmp	r8, #0
   12058:	ldr	sl, [sp, #12]
   1205c:	mov	r0, r8
   12060:	movwne	r0, #1
   12064:	orrs	r0, r9, r0
   12068:	clz	r0, r8
   1206c:	lsr	r0, r0, #5
   12070:	beq	1235c <__assert_fail@plt+0x12d4>
   12074:	tst	r0, #1
   12078:	bne	12094 <__assert_fail@plt+0x100c>
   1207c:	ldrb	r0, [r5]
   12080:	ldr	r1, [sp, #8]
   12084:	subs	r0, r0, #10
   12088:	movwne	r0, #1
   1208c:	orrs	r0, r0, r1
   12090:	beq	1204c <__assert_fail@plt+0xfc4>
   12094:	add	r7, r5, r8
   12098:	cmp	r4, #0
   1209c:	str	sl, [sp, #12]
   120a0:	beq	1214c <__assert_fail@plt+0x10c4>
   120a4:	ldr	r6, [r4]
   120a8:	cmp	r6, #0
   120ac:	beq	120c0 <__assert_fail@plt+0x1038>
   120b0:	cmp	r6, #8
   120b4:	bne	120e8 <__assert_fail@plt+0x1060>
   120b8:	mov	r0, #0
   120bc:	str	r0, [r4]
   120c0:	sub	r0, r7, r5
   120c4:	mov	r6, #0
   120c8:	cmp	r0, #8
   120cc:	blt	120e8 <__assert_fail@plt+0x1060>
   120d0:	mov	r0, r5
   120d4:	mov	r1, #10
   120d8:	mov	r2, #8
   120dc:	bl	10fec <memchr@plt>
   120e0:	cmp	r0, #0
   120e4:	beq	121a4 <__assert_fail@plt+0x111c>
   120e8:	cmp	r8, #1
   120ec:	blt	12138 <__assert_fail@plt+0x10b0>
   120f0:	mov	r0, r5
   120f4:	ldrb	r1, [r5], #1
   120f8:	cmp	r1, #10
   120fc:	bne	1210c <__assert_fail@plt+0x1084>
   12100:	cmp	r5, r7
   12104:	bcc	120f0 <__assert_fail@plt+0x1068>
   12108:	b	12134 <__assert_fail@plt+0x10ac>
   1210c:	add	r2, r6, #1
   12110:	mov	r3, r4
   12114:	add	r5, r0, #1
   12118:	str	r2, [r3], r6
   1211c:	cmp	r5, r7
   12120:	strb	r1, [r3, #4]
   12124:	ldr	r6, [r4]
   12128:	bcs	12134 <__assert_fail@plt+0x10ac>
   1212c:	cmp	r6, #8
   12130:	bne	120f0 <__assert_fail@plt+0x1068>
   12134:	add	r5, r0, #1
   12138:	ldr	r0, [sp]
   1213c:	mov	r8, #0
   12140:	cmp	r6, #0
   12144:	bne	12160 <__assert_fail@plt+0x10d8>
   12148:	b	1235c <__assert_fail@plt+0x12d4>
   1214c:	mov	r6, r8
   12150:	mov	r0, r5
   12154:	mov	r8, #0
   12158:	cmp	r6, #0
   1215c:	beq	1235c <__assert_fail@plt+0x12d4>
   12160:	ldr	r2, [sp, #8]
   12164:	cmp	r6, #7
   12168:	mov	r1, #0
   1216c:	movwgt	r1, #1
   12170:	orr	r1, r9, r1
   12174:	orr	r1, r1, r2
   12178:	cmp	r1, #1
   1217c:	bne	1235c <__assert_fail@plt+0x12d4>
   12180:	mov	r1, r6
   12184:	add	r2, sp, #16
   12188:	add	r3, sp, #12
   1218c:	bl	12384 <__assert_fail@plt+0x12fc>
   12190:	cmp	r0, #0
   12194:	mov	r8, r6
   12198:	beq	1235c <__assert_fail@plt+0x12d4>
   1219c:	sub	r8, r7, r5
   121a0:	b	12054 <__assert_fail@plt+0xfcc>
   121a4:	add	r1, r5, #8
   121a8:	mov	r0, r5
   121ac:	mov	r6, #8
   121b0:	mov	r5, r1
   121b4:	b	12180 <__assert_fail@plt+0x10f8>
   121b8:	add	r9, sp, #16
   121bc:	add	r4, sp, #12
   121c0:	b	121d0 <__assert_fail@plt+0x1148>
   121c4:	ldr	sl, [sp, #12]
   121c8:	add	r5, r5, #8
   121cc:	sub	r6, r6, #8
   121d0:	mov	r0, r5
   121d4:	mov	r1, r6
   121d8:	mov	r2, r9
   121dc:	mov	r3, r4
   121e0:	bl	12384 <__assert_fail@plt+0x12fc>
   121e4:	cmp	r0, #0
   121e8:	bne	121c4 <__assert_fail@plt+0x113c>
   121ec:	cmp	r6, #0
   121f0:	beq	12358 <__assert_fail@plt+0x12d0>
   121f4:	ldrb	r0, [r5]
   121f8:	ldr	r1, [sp, #8]
   121fc:	subs	r0, r0, #10
   12200:	movwne	r0, #1
   12204:	orrs	r0, r0, r1
   12208:	beq	122d0 <__assert_fail@plt+0x1248>
   1220c:	ldr	r0, [sp, #12]
   12210:	str	sl, [sp, #12]
   12214:	ldr	r1, [sp, #16]
   12218:	add	r7, r5, r6
   1221c:	sub	r0, r0, sl
   12220:	ldr	sl, [sp, #4]
   12224:	add	r0, r1, r0
   12228:	str	r0, [sp, #16]
   1222c:	cmp	sl, #0
   12230:	beq	122e0 <__assert_fail@plt+0x1258>
   12234:	ldr	r8, [sl]
   12238:	cmp	r8, #0
   1223c:	beq	12250 <__assert_fail@plt+0x11c8>
   12240:	cmp	r8, #8
   12244:	bne	12278 <__assert_fail@plt+0x11f0>
   12248:	mov	r0, #0
   1224c:	str	r0, [sl]
   12250:	sub	r0, r7, r5
   12254:	mov	r8, #0
   12258:	cmp	r0, #8
   1225c:	blt	12278 <__assert_fail@plt+0x11f0>
   12260:	mov	r0, r5
   12264:	mov	r1, #10
   12268:	mov	r2, #8
   1226c:	bl	10fec <memchr@plt>
   12270:	cmp	r0, #0
   12274:	beq	1233c <__assert_fail@plt+0x12b4>
   12278:	cmp	r6, #1
   1227c:	blt	122e8 <__assert_fail@plt+0x1260>
   12280:	mov	r6, r8
   12284:	mov	r0, r5
   12288:	ldrb	r1, [r5], #1
   1228c:	cmp	r1, #10
   12290:	bne	122a0 <__assert_fail@plt+0x1218>
   12294:	cmp	r5, r7
   12298:	bcc	12284 <__assert_fail@plt+0x11fc>
   1229c:	b	122c8 <__assert_fail@plt+0x1240>
   122a0:	add	r2, r6, #1
   122a4:	mov	r3, sl
   122a8:	add	r5, r0, #1
   122ac:	str	r2, [r3], r6
   122b0:	cmp	r5, r7
   122b4:	strb	r1, [r3, #4]
   122b8:	ldr	r6, [sl]
   122bc:	bcs	122c8 <__assert_fail@plt+0x1240>
   122c0:	cmp	r6, #8
   122c4:	bne	12284 <__assert_fail@plt+0x11fc>
   122c8:	add	r5, r0, #1
   122cc:	b	122ec <__assert_fail@plt+0x1264>
   122d0:	ldr	sl, [sp, #12]
   122d4:	sub	r6, r6, #1
   122d8:	add	r5, r5, #1
   122dc:	b	121d0 <__assert_fail@plt+0x1148>
   122e0:	mov	r0, r5
   122e4:	b	12314 <__assert_fail@plt+0x128c>
   122e8:	mov	r6, r8
   122ec:	cmp	r6, #7
   122f0:	mov	r0, #0
   122f4:	mov	r8, #0
   122f8:	movwgt	r0, #1
   122fc:	cmp	r6, #0
   12300:	beq	1235c <__assert_fail@plt+0x12d4>
   12304:	ldr	r1, [sp, #8]
   12308:	orrs	r0, r0, r1
   1230c:	ldr	r0, [sp]
   12310:	beq	1235c <__assert_fail@plt+0x12d4>
   12314:	mov	r1, r6
   12318:	mov	r2, r9
   1231c:	mov	r3, r4
   12320:	bl	12384 <__assert_fail@plt+0x12fc>
   12324:	cmp	r0, #0
   12328:	mov	r8, r6
   1232c:	beq	1235c <__assert_fail@plt+0x12d4>
   12330:	ldr	sl, [sp, #12]
   12334:	sub	r6, r7, r5
   12338:	b	121d0 <__assert_fail@plt+0x1148>
   1233c:	add	r1, r5, #8
   12340:	mov	r0, r5
   12344:	mov	r6, #8
   12348:	mov	r5, r1
   1234c:	b	12314 <__assert_fail@plt+0x128c>
   12350:	mov	r8, r6
   12354:	b	1235c <__assert_fail@plt+0x12d4>
   12358:	mov	r8, #0
   1235c:	ldr	r0, [fp, #8]
   12360:	ldr	r1, [sp, #12]
   12364:	mov	r2, r0
   12368:	ldr	r0, [r0]
   1236c:	sub	r0, r0, r1
   12370:	str	r0, [r2]
   12374:	clz	r0, r8
   12378:	lsr	r0, r0, #5
   1237c:	sub	sp, fp, #28
   12380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12384:	push	{r4, r5, r6, sl, fp, lr}
   12388:	add	fp, sp, #16
   1238c:	mov	ip, #0
   12390:	cmp	r1, #8
   12394:	blt	12518 <__assert_fail@plt+0x1490>
   12398:	ldrb	r1, [r0]
   1239c:	movw	lr, #31575	; 0x7b57
   123a0:	movt	lr, #1
   123a4:	add	r1, lr, r1
   123a8:	ldrsb	r4, [r1]
   123ac:	cmp	r4, #0
   123b0:	bmi	12518 <__assert_fail@plt+0x1490>
   123b4:	ldrb	r1, [r0, #1]
   123b8:	add	r1, lr, r1
   123bc:	ldrsb	r1, [r1]
   123c0:	cmp	r1, #0
   123c4:	bmi	12518 <__assert_fail@plt+0x1490>
   123c8:	ldr	r5, [r3]
   123cc:	ldr	ip, [r2]
   123d0:	cmp	r5, #0
   123d4:	beq	1241c <__assert_fail@plt+0x1394>
   123d8:	uxtb	r5, r1
   123dc:	lsr	r5, r5, #2
   123e0:	orr	r4, r5, r4, lsl #3
   123e4:	strb	r4, [ip], #1
   123e8:	ldr	r4, [r3]
   123ec:	sub	r5, r4, #1
   123f0:	str	r5, [r3]
   123f4:	ldrb	r4, [r0, #2]
   123f8:	cmp	r4, #61	; 0x3d
   123fc:	bne	1242c <__assert_fail@plt+0x13a4>
   12400:	ldrb	r1, [r0, #3]
   12404:	cmp	r1, #61	; 0x3d
   12408:	bne	125c4 <__assert_fail@plt+0x153c>
   1240c:	ldrb	r1, [r0, #4]
   12410:	cmp	r1, #61	; 0x3d
   12414:	beq	12484 <__assert_fail@plt+0x13fc>
   12418:	b	125c4 <__assert_fail@plt+0x153c>
   1241c:	mov	r5, #0
   12420:	ldrb	r4, [r0, #2]
   12424:	cmp	r4, #61	; 0x3d
   12428:	beq	12400 <__assert_fail@plt+0x1378>
   1242c:	add	r4, lr, r4
   12430:	ldrsb	r6, [r4]
   12434:	cmp	r6, #0
   12438:	bmi	125c4 <__assert_fail@plt+0x153c>
   1243c:	ldrb	r4, [r0, #3]
   12440:	add	r4, lr, r4
   12444:	ldrsb	r4, [r4]
   12448:	cmn	r4, #1
   1244c:	ble	125c4 <__assert_fail@plt+0x153c>
   12450:	cmp	r5, #0
   12454:	beq	12494 <__assert_fail@plt+0x140c>
   12458:	lsl	r5, r6, #1
   1245c:	orr	r1, r5, r1, lsl #6
   12460:	uxtb	r5, r4
   12464:	orr	r1, r1, r5, lsr #4
   12468:	strb	r1, [ip], #1
   1246c:	ldr	r1, [r3]
   12470:	sub	r5, r1, #1
   12474:	str	r5, [r3]
   12478:	ldrb	r1, [r0, #4]
   1247c:	cmp	r1, #61	; 0x3d
   12480:	bne	124a4 <__assert_fail@plt+0x141c>
   12484:	ldrb	r1, [r0, #5]
   12488:	cmp	r1, #61	; 0x3d
   1248c:	beq	124f8 <__assert_fail@plt+0x1470>
   12490:	b	125c4 <__assert_fail@plt+0x153c>
   12494:	mov	r5, #0
   12498:	ldrb	r1, [r0, #4]
   1249c:	cmp	r1, #61	; 0x3d
   124a0:	beq	12484 <__assert_fail@plt+0x13fc>
   124a4:	add	r1, lr, r1
   124a8:	ldrsb	r1, [r1]
   124ac:	cmn	r1, #1
   124b0:	ble	125c4 <__assert_fail@plt+0x153c>
   124b4:	cmp	r5, #0
   124b8:	beq	124e8 <__assert_fail@plt+0x1460>
   124bc:	uxtb	r5, r1
   124c0:	lsr	r5, r5, #1
   124c4:	orr	r4, r5, r4, lsl #4
   124c8:	strb	r4, [ip], #1
   124cc:	ldr	r4, [r3]
   124d0:	sub	r4, r4, #1
   124d4:	str	r4, [r3]
   124d8:	ldrb	r5, [r0, #5]
   124dc:	cmp	r5, #61	; 0x3d
   124e0:	beq	124f8 <__assert_fail@plt+0x1470>
   124e4:	b	12520 <__assert_fail@plt+0x1498>
   124e8:	mov	r4, #0
   124ec:	ldrb	r5, [r0, #5]
   124f0:	cmp	r5, #61	; 0x3d
   124f4:	bne	12520 <__assert_fail@plt+0x1498>
   124f8:	ldrb	r1, [r0, #6]
   124fc:	cmp	r1, #61	; 0x3d
   12500:	bne	125c4 <__assert_fail@plt+0x153c>
   12504:	ldrb	r0, [r0, #7]
   12508:	cmp	r0, #61	; 0x3d
   1250c:	bne	125c4 <__assert_fail@plt+0x153c>
   12510:	str	ip, [r2]
   12514:	mov	ip, #1
   12518:	mov	r0, ip
   1251c:	pop	{r4, r5, r6, sl, fp, pc}
   12520:	add	r5, lr, r5
   12524:	ldrsb	r5, [r5]
   12528:	cmp	r5, #0
   1252c:	bmi	125c4 <__assert_fail@plt+0x153c>
   12530:	ldrb	r6, [r0, #6]
   12534:	add	r6, lr, r6
   12538:	ldrsb	r6, [r6]
   1253c:	cmn	r6, #1
   12540:	ble	125c4 <__assert_fail@plt+0x153c>
   12544:	cmp	r4, #0
   12548:	beq	1257c <__assert_fail@plt+0x14f4>
   1254c:	uxtb	r4, r6
   12550:	lsr	r4, r4, #3
   12554:	orr	r4, r4, r5, lsl #2
   12558:	orr	r1, r4, r1, lsl #7
   1255c:	strb	r1, [ip], #1
   12560:	ldr	r1, [r3]
   12564:	sub	r1, r1, #1
   12568:	str	r1, [r3]
   1256c:	ldrb	r4, [r0, #7]
   12570:	cmp	r4, #61	; 0x3d
   12574:	beq	12510 <__assert_fail@plt+0x1488>
   12578:	b	1258c <__assert_fail@plt+0x1504>
   1257c:	mov	r1, #0
   12580:	ldrb	r4, [r0, #7]
   12584:	cmp	r4, #61	; 0x3d
   12588:	beq	12510 <__assert_fail@plt+0x1488>
   1258c:	add	r4, lr, r4
   12590:	ldrsb	r4, [r4]
   12594:	cmn	r4, #1
   12598:	ble	125c4 <__assert_fail@plt+0x153c>
   1259c:	cmp	r1, #0
   125a0:	beq	12510 <__assert_fail@plt+0x1488>
   125a4:	ldrb	r0, [r0, #6]
   125a8:	ldrb	r0, [lr, r0]
   125ac:	orr	r0, r4, r0, lsl #5
   125b0:	strb	r0, [ip], #1
   125b4:	ldr	r0, [r3]
   125b8:	sub	r0, r0, #1
   125bc:	str	r0, [r3]
   125c0:	b	12510 <__assert_fail@plt+0x1488>
   125c4:	str	ip, [r2]
   125c8:	mov	ip, #0
   125cc:	mov	r0, ip
   125d0:	pop	{r4, r5, r6, sl, fp, pc}
   125d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   125d8:	add	fp, sp, #24
   125dc:	sub	sp, sp, #8
   125e0:	mov	r7, r0
   125e4:	asr	r0, r2, #3
   125e8:	mov	r4, r3
   125ec:	mov	r6, r2
   125f0:	mov	r8, r1
   125f4:	add	r0, r0, r0, lsl #2
   125f8:	add	r0, r0, #5
   125fc:	str	r0, [sp, #4]
   12600:	bl	16f54 <__assert_fail@plt+0x5ecc>
   12604:	mov	r5, #1
   12608:	cmp	r0, #0
   1260c:	str	r0, [r4]
   12610:	beq	12648 <__assert_fail@plt+0x15c0>
   12614:	mov	r3, r0
   12618:	add	r0, sp, #4
   1261c:	mov	r1, r8
   12620:	mov	r2, r6
   12624:	str	r0, [sp]
   12628:	mov	r0, r7
   1262c:	bl	11fa8 <__assert_fail@plt+0xf20>
   12630:	cmp	r0, #0
   12634:	beq	12654 <__assert_fail@plt+0x15cc>
   12638:	ldr	r0, [fp, #8]
   1263c:	cmp	r0, #0
   12640:	ldrne	r1, [sp, #4]
   12644:	strne	r1, [r0]
   12648:	mov	r0, r5
   1264c:	sub	sp, fp, #24
   12650:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12654:	ldr	r0, [r4]
   12658:	bl	128b4 <__assert_fail@plt+0x182c>
   1265c:	mov	r5, #0
   12660:	str	r5, [r4]
   12664:	mov	r0, r5
   12668:	sub	sp, fp, #24
   1266c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12670:	movw	r1, #37208	; 0x9158
   12674:	movt	r1, #2
   12678:	str	r0, [r1, #4]
   1267c:	bx	lr
   12680:	movw	r1, #37208	; 0x9158
   12684:	movt	r1, #2
   12688:	strb	r0, [r1]
   1268c:	bx	lr
   12690:	push	{r4, r5, r6, sl, fp, lr}
   12694:	add	fp, sp, #16
   12698:	sub	sp, sp, #8
   1269c:	movw	r0, #37196	; 0x914c
   126a0:	movt	r0, #2
   126a4:	ldr	r0, [r0]
   126a8:	bl	16fd8 <__assert_fail@plt+0x5f50>
   126ac:	cmp	r0, #0
   126b0:	beq	126d8 <__assert_fail@plt+0x1650>
   126b4:	movw	r5, #37208	; 0x9158
   126b8:	movt	r5, #2
   126bc:	ldrb	r0, [r5]
   126c0:	cmp	r0, #0
   126c4:	beq	12704 <__assert_fail@plt+0x167c>
   126c8:	bl	10fa4 <__errno_location@plt>
   126cc:	ldr	r0, [r0]
   126d0:	cmp	r0, #32
   126d4:	bne	12704 <__assert_fail@plt+0x167c>
   126d8:	movw	r0, #37184	; 0x9140
   126dc:	movt	r0, #2
   126e0:	ldr	r0, [r0]
   126e4:	bl	16fd8 <__assert_fail@plt+0x5f50>
   126e8:	cmp	r0, #0
   126ec:	subeq	sp, fp, #16
   126f0:	popeq	{r4, r5, r6, sl, fp, pc}
   126f4:	movw	r0, #37100	; 0x90ec
   126f8:	movt	r0, #2
   126fc:	ldr	r0, [r0]
   12700:	bl	10e84 <_exit@plt>
   12704:	movw	r1, #31324	; 0x7a5c
   12708:	mov	r0, #0
   1270c:	mov	r2, #5
   12710:	movt	r1, #1
   12714:	bl	10eb4 <dcgettext@plt>
   12718:	ldr	r6, [r5, #4]
   1271c:	mov	r4, r0
   12720:	bl	10fa4 <__errno_location@plt>
   12724:	ldr	r5, [r0]
   12728:	cmp	r6, #0
   1272c:	bne	12748 <__assert_fail@plt+0x16c0>
   12730:	movw	r2, #30760	; 0x7828
   12734:	mov	r0, #0
   12738:	mov	r1, r5
   1273c:	mov	r3, r4
   12740:	movt	r2, #1
   12744:	b	12768 <__assert_fail@plt+0x16e0>
   12748:	mov	r0, r6
   1274c:	bl	145c0 <__assert_fail@plt+0x3538>
   12750:	movw	r2, #30756	; 0x7824
   12754:	mov	r3, r0
   12758:	str	r4, [sp]
   1275c:	mov	r0, #0
   12760:	mov	r1, r5
   12764:	movt	r2, #1
   12768:	bl	10f20 <error@plt>
   1276c:	movw	r0, #37100	; 0x90ec
   12770:	movt	r0, #2
   12774:	ldr	r0, [r0]
   12778:	bl	10e84 <_exit@plt>
   1277c:	b	10e54 <posix_fadvise64@plt>
   12780:	cmp	r0, #0
   12784:	bxeq	lr
   12788:	push	{r4, sl, fp, lr}
   1278c:	add	fp, sp, #8
   12790:	sub	sp, sp, #16
   12794:	mov	r4, r1
   12798:	bl	10fd4 <fileno@plt>
   1279c:	mov	r1, #0
   127a0:	mov	r2, #0
   127a4:	mov	r3, #0
   127a8:	str	r1, [sp]
   127ac:	stmib	sp, {r1, r4}
   127b0:	bl	10e54 <posix_fadvise64@plt>
   127b4:	sub	sp, fp, #8
   127b8:	pop	{r4, sl, fp, pc}
   127bc:	push	{r4, r5, r6, sl, fp, lr}
   127c0:	add	fp, sp, #16
   127c4:	sub	sp, sp, #8
   127c8:	mov	r4, r0
   127cc:	bl	10fd4 <fileno@plt>
   127d0:	cmn	r0, #1
   127d4:	ble	12848 <__assert_fail@plt+0x17c0>
   127d8:	mov	r0, r4
   127dc:	bl	10f44 <__freading@plt>
   127e0:	cmp	r0, #0
   127e4:	beq	12810 <__assert_fail@plt+0x1788>
   127e8:	mov	r0, r4
   127ec:	bl	10fd4 <fileno@plt>
   127f0:	mov	r1, #1
   127f4:	mov	r2, #0
   127f8:	mov	r3, #0
   127fc:	str	r1, [sp]
   12800:	bl	10ef0 <lseek64@plt>
   12804:	and	r0, r0, r1
   12808:	cmn	r0, #1
   1280c:	beq	12848 <__assert_fail@plt+0x17c0>
   12810:	mov	r0, r4
   12814:	bl	12858 <__assert_fail@plt+0x17d0>
   12818:	cmp	r0, #0
   1281c:	beq	12848 <__assert_fail@plt+0x17c0>
   12820:	bl	10fa4 <__errno_location@plt>
   12824:	ldr	r6, [r0]
   12828:	mov	r5, r0
   1282c:	mov	r0, r4
   12830:	bl	10ff8 <fclose@plt>
   12834:	cmp	r6, #0
   12838:	strne	r6, [r5]
   1283c:	mvnne	r0, #0
   12840:	sub	sp, fp, #16
   12844:	pop	{r4, r5, r6, sl, fp, pc}
   12848:	mov	r0, r4
   1284c:	sub	sp, fp, #16
   12850:	pop	{r4, r5, r6, sl, fp, lr}
   12854:	b	10ff8 <fclose@plt>
   12858:	push	{r4, sl, fp, lr}
   1285c:	add	fp, sp, #8
   12860:	sub	sp, sp, #8
   12864:	mov	r4, r0
   12868:	cmp	r0, #0
   1286c:	beq	128a4 <__assert_fail@plt+0x181c>
   12870:	mov	r0, r4
   12874:	bl	10f44 <__freading@plt>
   12878:	cmp	r0, #0
   1287c:	beq	128a4 <__assert_fail@plt+0x181c>
   12880:	ldrb	r0, [r4, #1]
   12884:	tst	r0, #1
   12888:	beq	128a4 <__assert_fail@plt+0x181c>
   1288c:	mov	r0, #1
   12890:	mov	r2, #0
   12894:	mov	r3, #0
   12898:	str	r0, [sp]
   1289c:	mov	r0, r4
   128a0:	bl	128dc <__assert_fail@plt+0x1854>
   128a4:	mov	r0, r4
   128a8:	sub	sp, fp, #8
   128ac:	pop	{r4, sl, fp, lr}
   128b0:	b	10e60 <fflush@plt>
   128b4:	push	{r4, r5, r6, sl, fp, lr}
   128b8:	add	fp, sp, #16
   128bc:	mov	r4, r0
   128c0:	bl	10fa4 <__errno_location@plt>
   128c4:	ldr	r6, [r0]
   128c8:	mov	r5, r0
   128cc:	mov	r0, r4
   128d0:	bl	10e78 <free@plt>
   128d4:	str	r6, [r5]
   128d8:	pop	{r4, r5, r6, sl, fp, pc}
   128dc:	push	{r4, r5, r6, r7, fp, lr}
   128e0:	add	fp, sp, #16
   128e4:	sub	sp, sp, #8
   128e8:	mov	r4, r0
   128ec:	ldr	r0, [r0, #4]
   128f0:	mov	r5, r3
   128f4:	mov	r6, r2
   128f8:	ldr	r1, [r4, #8]
   128fc:	cmp	r1, r0
   12900:	bne	1291c <__assert_fail@plt+0x1894>
   12904:	ldrd	r0, [r4, #16]
   12908:	cmp	r1, r0
   1290c:	bne	1291c <__assert_fail@plt+0x1894>
   12910:	ldr	r0, [r4, #36]	; 0x24
   12914:	cmp	r0, #0
   12918:	beq	12934 <__assert_fail@plt+0x18ac>
   1291c:	mov	r0, r4
   12920:	mov	r2, r6
   12924:	mov	r3, r5
   12928:	sub	sp, fp, #16
   1292c:	pop	{r4, r5, r6, r7, fp, lr}
   12930:	b	11004 <fseeko64@plt>
   12934:	ldr	r7, [fp, #8]
   12938:	mov	r0, r4
   1293c:	bl	10fd4 <fileno@plt>
   12940:	mov	r2, r6
   12944:	mov	r3, r5
   12948:	str	r7, [sp]
   1294c:	bl	10ef0 <lseek64@plt>
   12950:	and	r2, r0, r1
   12954:	cmn	r2, #1
   12958:	beq	12978 <__assert_fail@plt+0x18f0>
   1295c:	strd	r0, [r4, #80]	; 0x50
   12960:	ldr	r0, [r4]
   12964:	bic	r0, r0, #16
   12968:	str	r0, [r4]
   1296c:	mov	r0, #0
   12970:	sub	sp, fp, #16
   12974:	pop	{r4, r5, r6, r7, fp, pc}
   12978:	mvn	r0, #0
   1297c:	sub	sp, fp, #16
   12980:	pop	{r4, r5, r6, r7, fp, pc}
   12984:	push	{r4, r5, fp, lr}
   12988:	add	fp, sp, #8
   1298c:	cmp	r0, #0
   12990:	beq	12a24 <__assert_fail@plt+0x199c>
   12994:	mov	r1, #47	; 0x2f
   12998:	mov	r4, r0
   1299c:	bl	11028 <strrchr@plt>
   129a0:	cmp	r0, #0
   129a4:	mov	r5, r4
   129a8:	addne	r5, r0, #1
   129ac:	sub	r0, r5, r4
   129b0:	cmp	r0, #7
   129b4:	blt	12a08 <__assert_fail@plt+0x1980>
   129b8:	movw	r1, #31887	; 0x7c8f
   129bc:	sub	r0, r5, #7
   129c0:	mov	r2, #7
   129c4:	movt	r1, #1
   129c8:	bl	11070 <strncmp@plt>
   129cc:	cmp	r0, #0
   129d0:	bne	12a08 <__assert_fail@plt+0x1980>
   129d4:	movw	r1, #31895	; 0x7c97
   129d8:	mov	r0, r5
   129dc:	mov	r2, #3
   129e0:	movt	r1, #1
   129e4:	bl	11070 <strncmp@plt>
   129e8:	cmp	r0, #0
   129ec:	beq	129f8 <__assert_fail@plt+0x1970>
   129f0:	mov	r4, r5
   129f4:	b	12a08 <__assert_fail@plt+0x1980>
   129f8:	movw	r0, #37168	; 0x9130
   129fc:	add	r4, r5, #3
   12a00:	movt	r0, #2
   12a04:	str	r4, [r0]
   12a08:	movw	r0, #37172	; 0x9134
   12a0c:	movt	r0, #2
   12a10:	str	r4, [r0]
   12a14:	movw	r0, #37216	; 0x9160
   12a18:	movt	r0, #2
   12a1c:	str	r4, [r0]
   12a20:	pop	{r4, r5, fp, pc}
   12a24:	movw	r0, #37184	; 0x9140
   12a28:	mov	r1, #55	; 0x37
   12a2c:	mov	r2, #1
   12a30:	movt	r0, #2
   12a34:	ldr	r3, [r0]
   12a38:	movw	r0, #31831	; 0x7c57
   12a3c:	movt	r0, #1
   12a40:	bl	10ee4 <fwrite@plt>
   12a44:	bl	1107c <abort@plt>
   12a48:	push	{r4, r5, r6, sl, fp, lr}
   12a4c:	add	fp, sp, #16
   12a50:	mov	r4, r0
   12a54:	movw	r0, #37224	; 0x9168
   12a58:	movt	r0, #2
   12a5c:	cmp	r4, #0
   12a60:	moveq	r4, r0
   12a64:	bl	10fa4 <__errno_location@plt>
   12a68:	ldr	r6, [r0]
   12a6c:	mov	r5, r0
   12a70:	mov	r0, r4
   12a74:	mov	r1, #48	; 0x30
   12a78:	bl	15480 <__assert_fail@plt+0x43f8>
   12a7c:	str	r6, [r5]
   12a80:	pop	{r4, r5, r6, sl, fp, pc}
   12a84:	movw	r1, #37224	; 0x9168
   12a88:	cmp	r0, #0
   12a8c:	movt	r1, #2
   12a90:	movne	r1, r0
   12a94:	ldr	r0, [r1]
   12a98:	bx	lr
   12a9c:	movw	r2, #37224	; 0x9168
   12aa0:	cmp	r0, #0
   12aa4:	movt	r2, #2
   12aa8:	movne	r2, r0
   12aac:	str	r1, [r2]
   12ab0:	bx	lr
   12ab4:	movw	r3, #37224	; 0x9168
   12ab8:	cmp	r0, #0
   12abc:	and	r2, r2, #1
   12ac0:	movt	r3, #2
   12ac4:	movne	r3, r0
   12ac8:	ubfx	r0, r1, #5, #3
   12acc:	and	r1, r1, #31
   12ad0:	add	ip, r3, r0, lsl #2
   12ad4:	mov	r0, #1
   12ad8:	ldr	r3, [ip, #8]
   12adc:	and	r0, r0, r3, lsr r1
   12ae0:	eor	r2, r0, r2
   12ae4:	eor	r1, r3, r2, lsl r1
   12ae8:	str	r1, [ip, #8]
   12aec:	bx	lr
   12af0:	movw	r2, #37224	; 0x9168
   12af4:	cmp	r0, #0
   12af8:	movt	r2, #2
   12afc:	movne	r2, r0
   12b00:	ldr	r0, [r2, #4]
   12b04:	str	r1, [r2, #4]
   12b08:	bx	lr
   12b0c:	push	{fp, lr}
   12b10:	mov	fp, sp
   12b14:	movw	r3, #37224	; 0x9168
   12b18:	cmp	r0, #0
   12b1c:	movt	r3, #2
   12b20:	movne	r3, r0
   12b24:	cmp	r1, #0
   12b28:	mov	r0, #10
   12b2c:	cmpne	r2, #0
   12b30:	str	r0, [r3]
   12b34:	bne	12b3c <__assert_fail@plt+0x1ab4>
   12b38:	bl	1107c <abort@plt>
   12b3c:	str	r1, [r3, #40]	; 0x28
   12b40:	str	r2, [r3, #44]	; 0x2c
   12b44:	pop	{fp, pc}
   12b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b4c:	add	fp, sp, #28
   12b50:	sub	sp, sp, #20
   12b54:	mov	r7, r0
   12b58:	ldr	r0, [fp, #8]
   12b5c:	movw	r5, #37224	; 0x9168
   12b60:	mov	r8, r3
   12b64:	mov	r9, r2
   12b68:	mov	sl, r1
   12b6c:	movt	r5, #2
   12b70:	cmp	r0, #0
   12b74:	movne	r5, r0
   12b78:	bl	10fa4 <__errno_location@plt>
   12b7c:	ldr	r2, [r5, #40]	; 0x28
   12b80:	ldr	r3, [r5, #44]	; 0x2c
   12b84:	mov	r4, r0
   12b88:	ldm	r5, {r0, r1}
   12b8c:	add	r5, r5, #8
   12b90:	ldr	r6, [r4]
   12b94:	stm	sp, {r0, r1, r5}
   12b98:	mov	r0, r7
   12b9c:	mov	r1, sl
   12ba0:	str	r2, [sp, #12]
   12ba4:	str	r3, [sp, #16]
   12ba8:	mov	r2, r9
   12bac:	mov	r3, r8
   12bb0:	bl	12bc0 <__assert_fail@plt+0x1b38>
   12bb4:	str	r6, [r4]
   12bb8:	sub	sp, fp, #28
   12bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bc4:	add	fp, sp, #28
   12bc8:	sub	sp, sp, #156	; 0x9c
   12bcc:	str	r0, [fp, #-84]	; 0xffffffac
   12bd0:	add	r0, r2, #1
   12bd4:	mov	r6, r1
   12bd8:	mov	r7, r3
   12bdc:	str	r2, [fp, #-80]	; 0xffffffb0
   12be0:	str	r0, [sp, #80]	; 0x50
   12be4:	ldr	r0, [fp, #12]
   12be8:	and	r1, r0, #1
   12bec:	str	r1, [sp, #36]	; 0x24
   12bf0:	and	r1, r0, #4
   12bf4:	str	r1, [sp, #32]
   12bf8:	ubfx	r8, r0, #1, #1
   12bfc:	bl	10efc <__ctype_get_mb_cur_max@plt>
   12c00:	str	r0, [sp, #40]	; 0x28
   12c04:	ldr	r0, [fp, #24]
   12c08:	ldr	r4, [fp, #8]
   12c0c:	mov	r1, #0
   12c10:	str	r1, [fp, #-52]	; 0xffffffcc
   12c14:	mov	r1, #0
   12c18:	str	r1, [sp, #60]	; 0x3c
   12c1c:	mov	r1, #1
   12c20:	str	r1, [sp, #84]	; 0x54
   12c24:	str	r0, [sp, #76]	; 0x4c
   12c28:	ldr	r0, [fp, #20]
   12c2c:	str	r0, [sp, #72]	; 0x48
   12c30:	mov	r0, #0
   12c34:	str	r0, [sp, #56]	; 0x38
   12c38:	mov	r0, #0
   12c3c:	str	r0, [fp, #-88]	; 0xffffffa8
   12c40:	mov	r0, #0
   12c44:	str	r0, [fp, #-72]	; 0xffffffb8
   12c48:	mov	r0, #0
   12c4c:	cmp	r4, #10
   12c50:	bhi	13f6c <__assert_fail@plt+0x2ee4>
   12c54:	add	r1, pc, #24
   12c58:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c5c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12c60:	mov	r5, r6
   12c64:	mov	r9, #0
   12c68:	mov	r2, #1
   12c6c:	mov	r3, #0
   12c70:	ldr	pc, [r1, r4, lsl #2]
   12c74:	andeq	r2, r1, ip, lsr sp
   12c78:	andeq	r2, r1, r8, ror sp
   12c7c:	andeq	r2, r1, ip, asr #26
   12c80:	andeq	r2, r1, r4, lsr sp
   12c84:	andeq	r2, r1, ip, ror #26
   12c88:	ldrdeq	r2, [r1], -r0
   12c8c:	andeq	r2, r1, ip, asr sp
   12c90:	andeq	r3, r1, r8, asr #32
   12c94:	andeq	r2, r1, r0, lsr #25
   12c98:	andeq	r2, r1, r0, lsr #25
   12c9c:	ldrdeq	r2, [r1], -r8
   12ca0:	movw	r6, #31977	; 0x7ce9
   12ca4:	mov	r0, #0
   12ca8:	mov	r2, #5
   12cac:	movt	r6, #1
   12cb0:	mov	r1, r6
   12cb4:	bl	10eb4 <dcgettext@plt>
   12cb8:	cmp	r0, r6
   12cbc:	str	r0, [sp, #72]	; 0x48
   12cc0:	bne	12eb0 <__assert_fail@plt+0x1e28>
   12cc4:	bl	1705c <__assert_fail@plt+0x5fd4>
   12cc8:	ldrb	r1, [r0]
   12ccc:	and	r1, r1, #223	; 0xdf
   12cd0:	cmp	r1, #71	; 0x47
   12cd4:	beq	12e30 <__assert_fail@plt+0x1da8>
   12cd8:	cmp	r1, #85	; 0x55
   12cdc:	bne	12e94 <__assert_fail@plt+0x1e0c>
   12ce0:	ldrb	r1, [r0, #1]
   12ce4:	and	r1, r1, #223	; 0xdf
   12ce8:	cmp	r1, #84	; 0x54
   12cec:	bne	12e94 <__assert_fail@plt+0x1e0c>
   12cf0:	ldrb	r1, [r0, #2]
   12cf4:	and	r1, r1, #223	; 0xdf
   12cf8:	cmp	r1, #70	; 0x46
   12cfc:	bne	12e94 <__assert_fail@plt+0x1e0c>
   12d00:	ldrb	r1, [r0, #3]
   12d04:	cmp	r1, #45	; 0x2d
   12d08:	bne	12e94 <__assert_fail@plt+0x1e0c>
   12d0c:	ldrb	r1, [r0, #4]
   12d10:	cmp	r1, #56	; 0x38
   12d14:	bne	12e94 <__assert_fail@plt+0x1e0c>
   12d18:	ldrb	r0, [r0, #5]
   12d1c:	cmp	r0, #0
   12d20:	movw	r0, #31981	; 0x7ced
   12d24:	movt	r0, #1
   12d28:	str	r0, [sp, #72]	; 0x48
   12d2c:	bne	12e94 <__assert_fail@plt+0x1e0c>
   12d30:	b	12eb0 <__assert_fail@plt+0x1e28>
   12d34:	mov	r0, #1
   12d38:	b	12d78 <__assert_fail@plt+0x1cf0>
   12d3c:	mov	r4, #0
   12d40:	mov	r9, #0
   12d44:	mov	r2, r0
   12d48:	b	12dc8 <__assert_fail@plt+0x1d40>
   12d4c:	tst	r8, #1
   12d50:	bne	12d78 <__assert_fail@plt+0x1cf0>
   12d54:	mov	r2, r0
   12d58:	b	12da0 <__assert_fail@plt+0x1d18>
   12d5c:	mov	r0, #1
   12d60:	mov	r9, #0
   12d64:	mov	r4, #5
   12d68:	b	12de4 <__assert_fail@plt+0x1d5c>
   12d6c:	mov	r2, #1
   12d70:	tst	r8, #1
   12d74:	beq	12da0 <__assert_fail@plt+0x1d18>
   12d78:	mov	r1, #1
   12d7c:	mov	r9, #0
   12d80:	mov	r4, #2
   12d84:	mov	r2, r0
   12d88:	mov	r3, #1
   12d8c:	str	r1, [fp, #-72]	; 0xffffffb8
   12d90:	movw	r1, #31979	; 0x7ceb
   12d94:	movt	r1, #1
   12d98:	str	r1, [fp, #-88]	; 0xffffffa8
   12d9c:	b	13048 <__assert_fail@plt+0x1fc0>
   12da0:	cmp	r5, #0
   12da4:	mov	r9, #1
   12da8:	mov	r4, #2
   12dac:	movne	r0, #39	; 0x27
   12db0:	strbne	r0, [ip]
   12db4:	movw	r0, #31979	; 0x7ceb
   12db8:	movt	r0, #1
   12dbc:	str	r0, [fp, #-88]	; 0xffffffa8
   12dc0:	mov	r0, #1
   12dc4:	str	r0, [fp, #-72]	; 0xffffffb8
   12dc8:	mov	r3, #0
   12dcc:	b	13048 <__assert_fail@plt+0x1fc0>
   12dd0:	mov	r4, #5
   12dd4:	tst	r8, #1
   12dd8:	beq	12e00 <__assert_fail@plt+0x1d78>
   12ddc:	mov	r0, #1
   12de0:	mov	r9, #0
   12de4:	str	r0, [fp, #-72]	; 0xffffffb8
   12de8:	movw	r0, #31975	; 0x7ce7
   12dec:	mov	r2, #1
   12df0:	mov	r3, #1
   12df4:	movt	r0, #1
   12df8:	str	r0, [fp, #-88]	; 0xffffffa8
   12dfc:	b	13048 <__assert_fail@plt+0x1fc0>
   12e00:	cmp	r5, #0
   12e04:	mov	r3, #0
   12e08:	mov	r9, #1
   12e0c:	mov	r2, #1
   12e10:	movne	r0, #34	; 0x22
   12e14:	strbne	r0, [ip]
   12e18:	movw	r0, #31975	; 0x7ce7
   12e1c:	movt	r0, #1
   12e20:	str	r0, [fp, #-88]	; 0xffffffa8
   12e24:	mov	r0, #1
   12e28:	str	r0, [fp, #-72]	; 0xffffffb8
   12e2c:	b	13048 <__assert_fail@plt+0x1fc0>
   12e30:	ldrb	r1, [r0, #1]
   12e34:	and	r1, r1, #223	; 0xdf
   12e38:	cmp	r1, #66	; 0x42
   12e3c:	bne	12e94 <__assert_fail@plt+0x1e0c>
   12e40:	ldrb	r1, [r0, #2]
   12e44:	cmp	r1, #49	; 0x31
   12e48:	bne	12e94 <__assert_fail@plt+0x1e0c>
   12e4c:	ldrb	r1, [r0, #3]
   12e50:	cmp	r1, #56	; 0x38
   12e54:	bne	12e94 <__assert_fail@plt+0x1e0c>
   12e58:	ldrb	r1, [r0, #4]
   12e5c:	cmp	r1, #48	; 0x30
   12e60:	bne	12e94 <__assert_fail@plt+0x1e0c>
   12e64:	ldrb	r1, [r0, #5]
   12e68:	cmp	r1, #51	; 0x33
   12e6c:	bne	12e94 <__assert_fail@plt+0x1e0c>
   12e70:	ldrb	r1, [r0, #6]
   12e74:	cmp	r1, #48	; 0x30
   12e78:	bne	12e94 <__assert_fail@plt+0x1e0c>
   12e7c:	ldrb	r0, [r0, #7]
   12e80:	cmp	r0, #0
   12e84:	movw	r0, #31989	; 0x7cf5
   12e88:	movt	r0, #1
   12e8c:	str	r0, [sp, #72]	; 0x48
   12e90:	beq	12eb0 <__assert_fail@plt+0x1e28>
   12e94:	movw	r1, #31975	; 0x7ce7
   12e98:	movw	r0, #31979	; 0x7ceb
   12e9c:	cmp	r4, #9
   12ea0:	movt	r1, #1
   12ea4:	movt	r0, #1
   12ea8:	moveq	r0, r1
   12eac:	str	r0, [sp, #72]	; 0x48
   12eb0:	movw	r6, #31979	; 0x7ceb
   12eb4:	mov	r0, #0
   12eb8:	mov	r2, #5
   12ebc:	movt	r6, #1
   12ec0:	mov	r1, r6
   12ec4:	bl	10eb4 <dcgettext@plt>
   12ec8:	cmp	r0, r6
   12ecc:	str	r0, [sp, #76]	; 0x4c
   12ed0:	beq	12f1c <__assert_fail@plt+0x1e94>
   12ed4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ed8:	mov	r9, #0
   12edc:	tst	r8, #1
   12ee0:	bne	13024 <__assert_fail@plt+0x1f9c>
   12ee4:	ldr	r0, [sp, #72]	; 0x48
   12ee8:	ldrb	r0, [r0]
   12eec:	cmp	r0, #0
   12ef0:	beq	13024 <__assert_fail@plt+0x1f9c>
   12ef4:	ldr	r1, [sp, #72]	; 0x48
   12ef8:	mov	r9, #0
   12efc:	add	r1, r1, #1
   12f00:	cmp	r9, r5
   12f04:	strbcc	r0, [ip, r9]
   12f08:	ldrb	r0, [r1, r9]
   12f0c:	add	r9, r9, #1
   12f10:	cmp	r0, #0
   12f14:	bne	12f00 <__assert_fail@plt+0x1e78>
   12f18:	b	13024 <__assert_fail@plt+0x1f9c>
   12f1c:	bl	1705c <__assert_fail@plt+0x5fd4>
   12f20:	ldrb	r1, [r0]
   12f24:	and	r1, r1, #223	; 0xdf
   12f28:	cmp	r1, #71	; 0x47
   12f2c:	beq	12f9c <__assert_fail@plt+0x1f14>
   12f30:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f34:	cmp	r1, #85	; 0x55
   12f38:	bne	12ff8 <__assert_fail@plt+0x1f70>
   12f3c:	ldrb	r1, [r0, #1]
   12f40:	and	r1, r1, #223	; 0xdf
   12f44:	cmp	r1, #84	; 0x54
   12f48:	bne	12ff8 <__assert_fail@plt+0x1f70>
   12f4c:	ldrb	r1, [r0, #2]
   12f50:	and	r1, r1, #223	; 0xdf
   12f54:	cmp	r1, #70	; 0x46
   12f58:	bne	12ff8 <__assert_fail@plt+0x1f70>
   12f5c:	ldrb	r1, [r0, #3]
   12f60:	cmp	r1, #45	; 0x2d
   12f64:	bne	12ff8 <__assert_fail@plt+0x1f70>
   12f68:	ldrb	r1, [r0, #4]
   12f6c:	cmp	r1, #56	; 0x38
   12f70:	bne	12ff8 <__assert_fail@plt+0x1f70>
   12f74:	ldrb	r0, [r0, #5]
   12f78:	cmp	r0, #0
   12f7c:	bne	12ff8 <__assert_fail@plt+0x1f70>
   12f80:	movw	r0, #31985	; 0x7cf1
   12f84:	movt	r0, #1
   12f88:	str	r0, [sp, #76]	; 0x4c
   12f8c:	mov	r9, #0
   12f90:	tst	r8, #1
   12f94:	beq	12ee4 <__assert_fail@plt+0x1e5c>
   12f98:	b	13024 <__assert_fail@plt+0x1f9c>
   12f9c:	ldrb	r1, [r0, #1]
   12fa0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12fa4:	and	r1, r1, #223	; 0xdf
   12fa8:	cmp	r1, #66	; 0x42
   12fac:	bne	12ff8 <__assert_fail@plt+0x1f70>
   12fb0:	ldrb	r1, [r0, #2]
   12fb4:	cmp	r1, #49	; 0x31
   12fb8:	bne	12ff8 <__assert_fail@plt+0x1f70>
   12fbc:	ldrb	r1, [r0, #3]
   12fc0:	cmp	r1, #56	; 0x38
   12fc4:	bne	12ff8 <__assert_fail@plt+0x1f70>
   12fc8:	ldrb	r1, [r0, #4]
   12fcc:	cmp	r1, #48	; 0x30
   12fd0:	bne	12ff8 <__assert_fail@plt+0x1f70>
   12fd4:	ldrb	r1, [r0, #5]
   12fd8:	cmp	r1, #51	; 0x33
   12fdc:	bne	12ff8 <__assert_fail@plt+0x1f70>
   12fe0:	ldrb	r1, [r0, #6]
   12fe4:	cmp	r1, #48	; 0x30
   12fe8:	bne	12ff8 <__assert_fail@plt+0x1f70>
   12fec:	ldrb	r0, [r0, #7]
   12ff0:	cmp	r0, #0
   12ff4:	beq	13e0c <__assert_fail@plt+0x2d84>
   12ff8:	movw	r0, #31979	; 0x7ceb
   12ffc:	cmp	r4, #9
   13000:	movt	r0, #1
   13004:	mov	r1, r0
   13008:	movw	r0, #31975	; 0x7ce7
   1300c:	movt	r0, #1
   13010:	moveq	r1, r0
   13014:	str	r1, [sp, #76]	; 0x4c
   13018:	mov	r9, #0
   1301c:	tst	r8, #1
   13020:	beq	12ee4 <__assert_fail@plt+0x1e5c>
   13024:	ldr	r6, [sp, #76]	; 0x4c
   13028:	mov	r0, r6
   1302c:	bl	10f8c <strlen@plt>
   13030:	ldr	ip, [fp, #-84]	; 0xffffffac
   13034:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13038:	str	r0, [fp, #-72]	; 0xffffffb8
   1303c:	str	r6, [fp, #-88]	; 0xffffffa8
   13040:	mov	r2, #1
   13044:	mov	r3, r8
   13048:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1304c:	str	r4, [fp, #-64]	; 0xffffffc0
   13050:	mov	sl, #0
   13054:	str	r3, [fp, #-76]	; 0xffffffb4
   13058:	str	r2, [sp, #88]	; 0x58
   1305c:	cmp	r0, #0
   13060:	movwne	r0, #1
   13064:	and	r1, r0, r3
   13068:	and	r1, r2, r1
   1306c:	str	r1, [sp, #48]	; 0x30
   13070:	sub	r1, r4, #2
   13074:	clz	r1, r1
   13078:	lsr	r1, r1, #5
   1307c:	and	r1, r1, r3
   13080:	str	r1, [sp, #44]	; 0x2c
   13084:	subs	r1, r4, #2
   13088:	eor	r4, r3, #1
   1308c:	movwne	r1, #1
   13090:	str	r4, [sp, #92]	; 0x5c
   13094:	orr	r4, r1, r4
   13098:	and	r1, r1, r2
   1309c:	and	r0, r0, r1
   130a0:	str	r4, [sp, #64]	; 0x40
   130a4:	ldr	r4, [sp, #84]	; 0x54
   130a8:	str	r0, [fp, #-60]	; 0xffffffc4
   130ac:	orr	r0, r1, r3
   130b0:	ldr	r1, [fp, #16]
   130b4:	eor	r0, r0, #1
   130b8:	clz	r1, r1
   130bc:	lsr	r1, r1, #5
   130c0:	orr	r0, r1, r0
   130c4:	str	r0, [fp, #-68]	; 0xffffffbc
   130c8:	eor	r0, r2, #1
   130cc:	str	r0, [sp, #52]	; 0x34
   130d0:	cmn	r7, #1
   130d4:	beq	130e4 <__assert_fail@plt+0x205c>
   130d8:	cmp	sl, r7
   130dc:	bne	130f0 <__assert_fail@plt+0x2068>
   130e0:	b	13d84 <__assert_fail@plt+0x2cfc>
   130e4:	ldrb	r0, [lr, sl]
   130e8:	cmp	r0, #0
   130ec:	beq	13d8c <__assert_fail@plt+0x2d04>
   130f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   130f4:	cmp	r0, #0
   130f8:	beq	13158 <__assert_fail@plt+0x20d0>
   130fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13100:	mov	r6, r5
   13104:	add	r5, sl, r0
   13108:	cmp	r0, #2
   1310c:	bcc	13178 <__assert_fail@plt+0x20f0>
   13110:	mov	r0, #0
   13114:	cmn	r7, #1
   13118:	str	r0, [fp, #-56]	; 0xffffffc8
   1311c:	bne	13134 <__assert_fail@plt+0x20ac>
   13120:	mov	r0, lr
   13124:	bl	10f8c <strlen@plt>
   13128:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1312c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13130:	mov	r7, r0
   13134:	cmp	r5, r7
   13138:	bls	13188 <__assert_fail@plt+0x2100>
   1313c:	mov	r0, #0
   13140:	mov	r5, r6
   13144:	str	r0, [fp, #-48]	; 0xffffffd0
   13148:	ldrb	r6, [lr, sl]
   1314c:	cmp	r6, #126	; 0x7e
   13150:	bls	131d8 <__assert_fail@plt+0x2150>
   13154:	b	13734 <__assert_fail@plt+0x26ac>
   13158:	mov	r0, #0
   1315c:	str	r0, [fp, #-56]	; 0xffffffc8
   13160:	mov	r0, #0
   13164:	str	r0, [fp, #-48]	; 0xffffffd0
   13168:	ldrb	r6, [lr, sl]
   1316c:	cmp	r6, #126	; 0x7e
   13170:	bls	131d8 <__assert_fail@plt+0x2150>
   13174:	b	13734 <__assert_fail@plt+0x26ac>
   13178:	mov	r0, #0
   1317c:	str	r0, [fp, #-56]	; 0xffffffc8
   13180:	cmp	r5, r7
   13184:	bhi	1313c <__assert_fail@plt+0x20b4>
   13188:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1318c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13190:	add	r0, lr, sl
   13194:	bl	10f80 <bcmp@plt>
   13198:	ldr	r2, [sp, #92]	; 0x5c
   1319c:	cmp	r0, #0
   131a0:	mov	r1, r0
   131a4:	mov	r5, r6
   131a8:	movwne	r1, #1
   131ac:	orr	r1, r1, r2
   131b0:	tst	r1, #1
   131b4:	beq	13e4c <__assert_fail@plt+0x2dc4>
   131b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   131bc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   131c0:	clz	r0, r0
   131c4:	lsr	r0, r0, #5
   131c8:	str	r0, [fp, #-48]	; 0xffffffd0
   131cc:	ldrb	r6, [lr, sl]
   131d0:	cmp	r6, #126	; 0x7e
   131d4:	bhi	13734 <__assert_fail@plt+0x26ac>
   131d8:	add	r3, pc, #16
   131dc:	mov	r8, #1
   131e0:	mov	r2, #110	; 0x6e
   131e4:	mov	r0, #97	; 0x61
   131e8:	mov	r1, #0
   131ec:	ldr	pc, [r3, r6, lsl #2]
   131f0:	andeq	r3, r1, ip, ror #9
   131f4:	andeq	r3, r1, r4, lsr r7
   131f8:	andeq	r3, r1, r4, lsr r7
   131fc:	andeq	r3, r1, r4, lsr r7
   13200:	andeq	r3, r1, r4, lsr r7
   13204:	andeq	r3, r1, r4, lsr r7
   13208:	andeq	r3, r1, r4, lsr r7
   1320c:	andeq	r3, r1, r8, ror #15
   13210:	andeq	r3, r1, ip, asr #9
   13214:	andeq	r3, r1, r4, asr #9
   13218:	ldrdeq	r3, [r1], -r8
   1321c:	andeq	r3, r1, r8, lsl #12
   13220:			; <UNDEFINED> instruction: 0x000134bc
   13224:	ldrdeq	r3, [r1], -r4
   13228:	andeq	r3, r1, r4, lsr r7
   1322c:	andeq	r3, r1, r4, lsr r7
   13230:	andeq	r3, r1, r4, lsr r7
   13234:	andeq	r3, r1, r4, lsr r7
   13238:	andeq	r3, r1, r4, lsr r7
   1323c:	andeq	r3, r1, r4, lsr r7
   13240:	andeq	r3, r1, r4, lsr r7
   13244:	andeq	r3, r1, r4, lsr r7
   13248:	andeq	r3, r1, r4, lsr r7
   1324c:	andeq	r3, r1, r4, lsr r7
   13250:	andeq	r3, r1, r4, lsr r7
   13254:	andeq	r3, r1, r4, lsr r7
   13258:	andeq	r3, r1, r4, lsr r7
   1325c:	andeq	r3, r1, r4, lsr r7
   13260:	andeq	r3, r1, r4, lsr r7
   13264:	andeq	r3, r1, r4, lsr r7
   13268:	andeq	r3, r1, r4, lsr r7
   1326c:	andeq	r3, r1, r4, lsr r7
   13270:	andeq	r3, r1, r0, ror #8
   13274:	andeq	r3, r1, r4, ror #8
   13278:	andeq	r3, r1, r4, ror #8
   1327c:	andeq	r3, r1, r4, asr r4
   13280:	andeq	r3, r1, r4, ror #8
   13284:	andeq	r3, r1, ip, ror #7
   13288:	andeq	r3, r1, r4, ror #8
   1328c:	andeq	r3, r1, r0, lsl r6
   13290:	andeq	r3, r1, r4, ror #8
   13294:	andeq	r3, r1, r4, ror #8
   13298:	andeq	r3, r1, r4, ror #8
   1329c:	andeq	r3, r1, ip, ror #7
   132a0:	andeq	r3, r1, ip, ror #7
   132a4:	andeq	r3, r1, ip, ror #7
   132a8:	andeq	r3, r1, ip, ror #7
   132ac:	andeq	r3, r1, ip, ror #7
   132b0:	andeq	r3, r1, ip, ror #7
   132b4:	andeq	r3, r1, ip, ror #7
   132b8:	andeq	r3, r1, ip, ror #7
   132bc:	andeq	r3, r1, ip, ror #7
   132c0:	andeq	r3, r1, ip, ror #7
   132c4:	andeq	r3, r1, ip, ror #7
   132c8:	andeq	r3, r1, ip, ror #7
   132cc:	andeq	r3, r1, ip, ror #7
   132d0:	andeq	r3, r1, ip, ror #7
   132d4:	andeq	r3, r1, ip, ror #7
   132d8:	andeq	r3, r1, ip, ror #7
   132dc:	andeq	r3, r1, r4, ror #8
   132e0:	andeq	r3, r1, r4, ror #8
   132e4:	andeq	r3, r1, r4, ror #8
   132e8:	andeq	r3, r1, r4, ror #8
   132ec:	ldrdeq	r3, [r1], -r4
   132f0:	andeq	r3, r1, r4, lsr r7
   132f4:	andeq	r3, r1, ip, ror #7
   132f8:	andeq	r3, r1, ip, ror #7
   132fc:	andeq	r3, r1, ip, ror #7
   13300:	andeq	r3, r1, ip, ror #7
   13304:	andeq	r3, r1, ip, ror #7
   13308:	andeq	r3, r1, ip, ror #7
   1330c:	andeq	r3, r1, ip, ror #7
   13310:	andeq	r3, r1, ip, ror #7
   13314:	andeq	r3, r1, ip, ror #7
   13318:	andeq	r3, r1, ip, ror #7
   1331c:	andeq	r3, r1, ip, ror #7
   13320:	andeq	r3, r1, ip, ror #7
   13324:	andeq	r3, r1, ip, ror #7
   13328:	andeq	r3, r1, ip, ror #7
   1332c:	andeq	r3, r1, ip, ror #7
   13330:	andeq	r3, r1, ip, ror #7
   13334:	andeq	r3, r1, ip, ror #7
   13338:	andeq	r3, r1, ip, ror #7
   1333c:	andeq	r3, r1, ip, ror #7
   13340:	andeq	r3, r1, ip, ror #7
   13344:	andeq	r3, r1, ip, ror #7
   13348:	andeq	r3, r1, ip, ror #7
   1334c:	andeq	r3, r1, ip, ror #7
   13350:	andeq	r3, r1, ip, ror #7
   13354:	andeq	r3, r1, ip, ror #7
   13358:	andeq	r3, r1, ip, ror #7
   1335c:	andeq	r3, r1, r4, ror #8
   13360:	muleq	r1, r8, r4
   13364:	andeq	r3, r1, ip, ror #7
   13368:	andeq	r3, r1, r4, ror #8
   1336c:	andeq	r3, r1, ip, ror #7
   13370:	andeq	r3, r1, r4, ror #8
   13374:	andeq	r3, r1, ip, ror #7
   13378:	andeq	r3, r1, ip, ror #7
   1337c:	andeq	r3, r1, ip, ror #7
   13380:	andeq	r3, r1, ip, ror #7
   13384:	andeq	r3, r1, ip, ror #7
   13388:	andeq	r3, r1, ip, ror #7
   1338c:	andeq	r3, r1, ip, ror #7
   13390:	andeq	r3, r1, ip, ror #7
   13394:	andeq	r3, r1, ip, ror #7
   13398:	andeq	r3, r1, ip, ror #7
   1339c:	andeq	r3, r1, ip, ror #7
   133a0:	andeq	r3, r1, ip, ror #7
   133a4:	andeq	r3, r1, ip, ror #7
   133a8:	andeq	r3, r1, ip, ror #7
   133ac:	andeq	r3, r1, ip, ror #7
   133b0:	andeq	r3, r1, ip, ror #7
   133b4:	andeq	r3, r1, ip, ror #7
   133b8:	andeq	r3, r1, ip, ror #7
   133bc:	andeq	r3, r1, ip, ror #7
   133c0:	andeq	r3, r1, ip, ror #7
   133c4:	andeq	r3, r1, ip, ror #7
   133c8:	andeq	r3, r1, ip, ror #7
   133cc:	andeq	r3, r1, ip, ror #7
   133d0:	andeq	r3, r1, ip, ror #7
   133d4:	andeq	r3, r1, ip, ror #7
   133d8:	andeq	r3, r1, ip, ror #7
   133dc:	andeq	r3, r1, ip, lsr #8
   133e0:	andeq	r3, r1, r4, ror #8
   133e4:	andeq	r3, r1, ip, lsr #8
   133e8:	andeq	r3, r1, r4, asr r4
   133ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   133f0:	tst	r0, #1
   133f4:	bne	136ac <__assert_fail@plt+0x2624>
   133f8:	ldr	r1, [fp, #16]
   133fc:	ubfx	r0, r6, #5, #3
   13400:	mov	r2, #1
   13404:	ldr	r0, [r1, r0, lsl #2]
   13408:	and	r1, r6, #31
   1340c:	tst	r0, r2, lsl r1
   13410:	beq	136ac <__assert_fail@plt+0x2624>
   13414:	mov	r0, r6
   13418:	mov	r1, r8
   1341c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13420:	tst	r2, #1
   13424:	beq	136cc <__assert_fail@plt+0x2644>
   13428:	b	13e28 <__assert_fail@plt+0x2da0>
   1342c:	cmp	r7, #1
   13430:	beq	13454 <__assert_fail@plt+0x23cc>
   13434:	mov	r8, #0
   13438:	cmn	r7, #1
   1343c:	bne	13698 <__assert_fail@plt+0x2610>
   13440:	ldrb	r0, [lr, #1]
   13444:	cmp	r0, #0
   13448:	beq	13454 <__assert_fail@plt+0x23cc>
   1344c:	mvn	r7, #0
   13450:	b	13698 <__assert_fail@plt+0x2610>
   13454:	mov	r8, #0
   13458:	cmp	sl, #0
   1345c:	bne	13698 <__assert_fail@plt+0x2610>
   13460:	mov	r1, #1
   13464:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13468:	cmp	r0, #2
   1346c:	bne	13484 <__assert_fail@plt+0x23fc>
   13470:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13474:	mov	r8, r1
   13478:	tst	r0, #1
   1347c:	beq	133ec <__assert_fail@plt+0x2364>
   13480:	b	13e28 <__assert_fail@plt+0x2da0>
   13484:	mov	r8, r1
   13488:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1348c:	tst	r0, #1
   13490:	beq	133f8 <__assert_fail@plt+0x2370>
   13494:	b	136ac <__assert_fail@plt+0x2624>
   13498:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1349c:	cmp	r0, #2
   134a0:	bne	13760 <__assert_fail@plt+0x26d8>
   134a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   134a8:	tst	r0, #1
   134ac:	bne	13e28 <__assert_fail@plt+0x2da0>
   134b0:	mov	r0, #0
   134b4:	str	r0, [fp, #-56]	; 0xffffffc8
   134b8:	b	13778 <__assert_fail@plt+0x26f0>
   134bc:	mov	r0, #102	; 0x66
   134c0:	b	137e8 <__assert_fail@plt+0x2760>
   134c4:	mov	r2, #116	; 0x74
   134c8:	b	134d8 <__assert_fail@plt+0x2450>
   134cc:	mov	r0, #98	; 0x62
   134d0:	b	137e8 <__assert_fail@plt+0x2760>
   134d4:	mov	r2, #114	; 0x72
   134d8:	ldr	r0, [sp, #64]	; 0x40
   134dc:	tst	r0, #1
   134e0:	mov	r0, r2
   134e4:	bne	137e8 <__assert_fail@plt+0x2760>
   134e8:	b	13e28 <__assert_fail@plt+0x2da0>
   134ec:	ldr	r0, [sp, #88]	; 0x58
   134f0:	tst	r0, #1
   134f4:	beq	13808 <__assert_fail@plt+0x2780>
   134f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   134fc:	tst	r0, #1
   13500:	bne	13f64 <__assert_fail@plt+0x2edc>
   13504:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13508:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1350c:	subs	r0, r0, #2
   13510:	movwne	r0, #1
   13514:	orr	r0, r0, r1
   13518:	tst	r0, #1
   1351c:	bne	13558 <__assert_fail@plt+0x24d0>
   13520:	cmp	r9, r5
   13524:	movcc	r0, #39	; 0x27
   13528:	strbcc	r0, [ip, r9]
   1352c:	add	r0, r9, #1
   13530:	cmp	r0, r5
   13534:	movcc	r1, #36	; 0x24
   13538:	strbcc	r1, [ip, r0]
   1353c:	add	r0, r9, #2
   13540:	add	r9, r9, #3
   13544:	cmp	r0, r5
   13548:	movcc	r1, #39	; 0x27
   1354c:	strbcc	r1, [ip, r0]
   13550:	mov	r0, #1
   13554:	str	r0, [fp, #-52]	; 0xffffffcc
   13558:	mov	r1, #1
   1355c:	cmp	r9, r5
   13560:	mov	r8, #0
   13564:	mov	r6, #48	; 0x30
   13568:	str	r1, [fp, #-56]	; 0xffffffc8
   1356c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13570:	movcc	r0, #92	; 0x5c
   13574:	strbcc	r0, [ip, r9]
   13578:	add	r0, r9, #1
   1357c:	cmp	r1, #2
   13580:	beq	139d4 <__assert_fail@plt+0x294c>
   13584:	add	r1, sl, #1
   13588:	cmp	r1, r7
   1358c:	bcs	139d4 <__assert_fail@plt+0x294c>
   13590:	ldrb	r1, [lr, r1]
   13594:	sub	r1, r1, #48	; 0x30
   13598:	uxtb	r1, r1
   1359c:	cmp	r1, #9
   135a0:	bhi	139d4 <__assert_fail@plt+0x294c>
   135a4:	cmp	r0, r5
   135a8:	movcc	r1, #48	; 0x30
   135ac:	strbcc	r1, [ip, r0]
   135b0:	add	r0, r9, #2
   135b4:	add	r9, r9, #3
   135b8:	cmp	r0, r5
   135bc:	movcc	r1, #48	; 0x30
   135c0:	strbcc	r1, [ip, r0]
   135c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   135c8:	tst	r0, #1
   135cc:	beq	133f8 <__assert_fail@plt+0x2370>
   135d0:	b	136ac <__assert_fail@plt+0x2624>
   135d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   135d8:	mov	r6, #63	; 0x3f
   135dc:	cmp	r0, #5
   135e0:	beq	139e8 <__assert_fail@plt+0x2960>
   135e4:	mov	r1, #0
   135e8:	cmp	r0, #2
   135ec:	str	r1, [fp, #-56]	; 0xffffffc8
   135f0:	bne	13ab0 <__assert_fail@plt+0x2a28>
   135f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   135f8:	mov	r8, #0
   135fc:	tst	r0, #1
   13600:	beq	133ec <__assert_fail@plt+0x2364>
   13604:	b	13e28 <__assert_fail@plt+0x2da0>
   13608:	mov	r0, #118	; 0x76
   1360c:	b	137e8 <__assert_fail@plt+0x2760>
   13610:	mov	r0, #1
   13614:	mov	r6, #39	; 0x27
   13618:	str	r0, [sp, #60]	; 0x3c
   1361c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13620:	cmp	r0, #2
   13624:	bne	13828 <__assert_fail@plt+0x27a0>
   13628:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1362c:	tst	r0, #1
   13630:	bne	13e28 <__assert_fail@plt+0x2da0>
   13634:	ldr	r2, [sp, #56]	; 0x38
   13638:	clz	r1, r5
   1363c:	mov	r8, #1
   13640:	lsr	r1, r1, #5
   13644:	cmp	r2, #0
   13648:	mov	r0, r2
   1364c:	movwne	r0, #1
   13650:	orrs	r0, r0, r1
   13654:	moveq	r2, r5
   13658:	moveq	r5, r0
   1365c:	cmp	r9, r5
   13660:	str	r2, [sp, #56]	; 0x38
   13664:	movcc	r0, #39	; 0x27
   13668:	strbcc	r0, [ip, r9]
   1366c:	add	r0, r9, #1
   13670:	cmp	r0, r5
   13674:	movcc	r1, #92	; 0x5c
   13678:	strbcc	r1, [ip, r0]
   1367c:	add	r0, r9, #2
   13680:	add	r9, r9, #3
   13684:	cmp	r0, r5
   13688:	movcc	r1, #39	; 0x27
   1368c:	strbcc	r1, [ip, r0]
   13690:	mov	r0, #0
   13694:	str	r0, [fp, #-52]	; 0xffffffcc
   13698:	mov	r0, #0
   1369c:	str	r0, [fp, #-56]	; 0xffffffc8
   136a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136a4:	tst	r0, #1
   136a8:	beq	133f8 <__assert_fail@plt+0x2370>
   136ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   136b0:	mov	r1, r8
   136b4:	cmp	r0, #0
   136b8:	mov	r0, r6
   136bc:	beq	13780 <__assert_fail@plt+0x26f8>
   136c0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   136c4:	tst	r2, #1
   136c8:	bne	13e28 <__assert_fail@plt+0x2da0>
   136cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   136d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   136d4:	subs	r2, r2, #2
   136d8:	movwne	r2, #1
   136dc:	orr	r2, r2, r3
   136e0:	tst	r2, #1
   136e4:	bne	13720 <__assert_fail@plt+0x2698>
   136e8:	cmp	r9, r5
   136ec:	movcc	r2, #39	; 0x27
   136f0:	strbcc	r2, [ip, r9]
   136f4:	add	r2, r9, #1
   136f8:	cmp	r2, r5
   136fc:	movcc	r3, #36	; 0x24
   13700:	strbcc	r3, [ip, r2]
   13704:	add	r2, r9, #2
   13708:	add	r9, r9, #3
   1370c:	cmp	r2, r5
   13710:	movcc	r3, #39	; 0x27
   13714:	strbcc	r3, [ip, r2]
   13718:	mov	r2, #1
   1371c:	str	r2, [fp, #-52]	; 0xffffffcc
   13720:	cmp	r9, r5
   13724:	movcc	r2, #92	; 0x5c
   13728:	strbcc	r2, [ip, r9]
   1372c:	add	r9, r9, #1
   13730:	b	137c8 <__assert_fail@plt+0x2740>
   13734:	ldr	r0, [sp, #40]	; 0x28
   13738:	cmp	r0, #1
   1373c:	bne	1383c <__assert_fail@plt+0x27b4>
   13740:	bl	10f68 <__ctype_b_loc@plt>
   13744:	ldr	r0, [r0]
   13748:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1374c:	mov	r1, #1
   13750:	add	r0, r0, r6, lsl #1
   13754:	ldrb	r0, [r0, #1]
   13758:	ubfx	r8, r0, #6, #1
   1375c:	b	13b94 <__assert_fail@plt+0x2b0c>
   13760:	ldr	r1, [sp, #48]	; 0x30
   13764:	mov	r0, #0
   13768:	str	r0, [fp, #-56]	; 0xffffffc8
   1376c:	mov	r0, #92	; 0x5c
   13770:	cmp	r1, #0
   13774:	beq	137e8 <__assert_fail@plt+0x2760>
   13778:	mov	r6, #92	; 0x5c
   1377c:	mov	r8, #0
   13780:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13784:	cmp	r0, #0
   13788:	bne	137c0 <__assert_fail@plt+0x2738>
   1378c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13790:	tst	r0, #1
   13794:	beq	137c0 <__assert_fail@plt+0x2738>
   13798:	cmp	r9, r5
   1379c:	movcc	r0, #39	; 0x27
   137a0:	strbcc	r0, [ip, r9]
   137a4:	add	r0, r9, #1
   137a8:	add	r9, r9, #2
   137ac:	cmp	r0, r5
   137b0:	movcc	r1, #39	; 0x27
   137b4:	strbcc	r1, [ip, r0]
   137b8:	mov	r0, #0
   137bc:	str	r0, [fp, #-52]	; 0xffffffcc
   137c0:	mov	r1, r8
   137c4:	mov	r0, r6
   137c8:	cmp	r9, r5
   137cc:	and	r4, r4, r1
   137d0:	strbcc	r0, [ip, r9]
   137d4:	add	r9, r9, #1
   137d8:	add	sl, sl, #1
   137dc:	cmn	r7, #1
   137e0:	bne	130d8 <__assert_fail@plt+0x2050>
   137e4:	b	130e4 <__assert_fail@plt+0x205c>
   137e8:	mov	r1, #0
   137ec:	mov	r8, #0
   137f0:	str	r1, [fp, #-56]	; 0xffffffc8
   137f4:	ldr	r1, [sp, #88]	; 0x58
   137f8:	tst	r1, #1
   137fc:	mov	r1, #0
   13800:	beq	133ec <__assert_fail@plt+0x2364>
   13804:	b	136c0 <__assert_fail@plt+0x2638>
   13808:	ldr	r0, [sp, #36]	; 0x24
   1380c:	mov	r6, #0
   13810:	mov	r8, #0
   13814:	cmp	r0, #0
   13818:	mov	r0, #0
   1381c:	str	r0, [fp, #-56]	; 0xffffffc8
   13820:	bne	137d8 <__assert_fail@plt+0x2750>
   13824:	b	133ec <__assert_fail@plt+0x2364>
   13828:	mov	r8, #1
   1382c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13830:	tst	r0, #1
   13834:	beq	133f8 <__assert_fail@plt+0x2370>
   13838:	b	136ac <__assert_fail@plt+0x2624>
   1383c:	mov	r0, #0
   13840:	cmn	r7, #1
   13844:	str	r0, [fp, #-36]	; 0xffffffdc
   13848:	str	r0, [fp, #-40]	; 0xffffffd8
   1384c:	bne	13860 <__assert_fail@plt+0x27d8>
   13850:	mov	r0, lr
   13854:	bl	10f8c <strlen@plt>
   13858:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1385c:	mov	r7, r0
   13860:	ldr	r0, [sp, #44]	; 0x2c
   13864:	str	r4, [sp, #84]	; 0x54
   13868:	str	r5, [sp, #28]
   1386c:	cmp	r0, #0
   13870:	beq	13ac4 <__assert_fail@plt+0x2a3c>
   13874:	ldr	r0, [sp, #80]	; 0x50
   13878:	mov	r8, #1
   1387c:	mov	r5, #0
   13880:	add	r0, r0, sl
   13884:	str	r0, [sp, #24]
   13888:	sub	r0, fp, #40	; 0x28
   1388c:	mov	r3, r0
   13890:	b	138cc <__assert_fail@plt+0x2844>
   13894:	ldr	r5, [sp, #68]	; 0x44
   13898:	add	r5, r0, r5
   1389c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   138a0:	bl	10ed8 <iswprint@plt>
   138a4:	cmp	r0, #0
   138a8:	sub	r4, fp, #40	; 0x28
   138ac:	movwne	r0, #1
   138b0:	and	r8, r8, r0
   138b4:	mov	r0, r4
   138b8:	bl	10e9c <mbsinit@plt>
   138bc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   138c0:	mov	r3, r4
   138c4:	cmp	r0, #0
   138c8:	bne	13b88 <__assert_fail@plt+0x2b00>
   138cc:	str	r5, [sp, #68]	; 0x44
   138d0:	add	r5, r5, sl
   138d4:	sub	r0, fp, #44	; 0x2c
   138d8:	add	r1, lr, r5
   138dc:	sub	r2, r7, r5
   138e0:	bl	17094 <__assert_fail@plt+0x600c>
   138e4:	cmn	r0, #2
   138e8:	beq	13b48 <__assert_fail@plt+0x2ac0>
   138ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   138f0:	cmn	r0, #1
   138f4:	beq	13b3c <__assert_fail@plt+0x2ab4>
   138f8:	cmp	r0, #0
   138fc:	beq	13b40 <__assert_fail@plt+0x2ab8>
   13900:	cmp	r0, #2
   13904:	bcc	13894 <__assert_fail@plt+0x280c>
   13908:	ldr	r1, [sp, #68]	; 0x44
   1390c:	ldr	r2, [sp, #24]
   13910:	add	r1, r2, r1
   13914:	sub	r2, r0, #1
   13918:	ldrb	r3, [r1]
   1391c:	sub	r3, r3, #91	; 0x5b
   13920:	cmp	r3, #33	; 0x21
   13924:	bls	13944 <__assert_fail@plt+0x28bc>
   13928:	add	r1, r1, #1
   1392c:	subs	r2, r2, #1
   13930:	beq	13894 <__assert_fail@plt+0x280c>
   13934:	ldrb	r3, [r1]
   13938:	sub	r3, r3, #91	; 0x5b
   1393c:	cmp	r3, #33	; 0x21
   13940:	bhi	13928 <__assert_fail@plt+0x28a0>
   13944:	add	r5, pc, #0
   13948:	ldr	pc, [r5, r3, lsl #2]
   1394c:	andeq	r3, r1, r0, ror #28
   13950:	andeq	r3, r1, r0, ror #28
   13954:	andeq	r3, r1, r8, lsr #18
   13958:	andeq	r3, r1, r0, ror #28
   1395c:	andeq	r3, r1, r8, lsr #18
   13960:	andeq	r3, r1, r0, ror #28
   13964:	andeq	r3, r1, r8, lsr #18
   13968:	andeq	r3, r1, r8, lsr #18
   1396c:	andeq	r3, r1, r8, lsr #18
   13970:	andeq	r3, r1, r8, lsr #18
   13974:	andeq	r3, r1, r8, lsr #18
   13978:	andeq	r3, r1, r8, lsr #18
   1397c:	andeq	r3, r1, r8, lsr #18
   13980:	andeq	r3, r1, r8, lsr #18
   13984:	andeq	r3, r1, r8, lsr #18
   13988:	andeq	r3, r1, r8, lsr #18
   1398c:	andeq	r3, r1, r8, lsr #18
   13990:	andeq	r3, r1, r8, lsr #18
   13994:	andeq	r3, r1, r8, lsr #18
   13998:	andeq	r3, r1, r8, lsr #18
   1399c:	andeq	r3, r1, r8, lsr #18
   139a0:	andeq	r3, r1, r8, lsr #18
   139a4:	andeq	r3, r1, r8, lsr #18
   139a8:	andeq	r3, r1, r8, lsr #18
   139ac:	andeq	r3, r1, r8, lsr #18
   139b0:	andeq	r3, r1, r8, lsr #18
   139b4:	andeq	r3, r1, r8, lsr #18
   139b8:	andeq	r3, r1, r8, lsr #18
   139bc:	andeq	r3, r1, r8, lsr #18
   139c0:	andeq	r3, r1, r8, lsr #18
   139c4:	andeq	r3, r1, r8, lsr #18
   139c8:	andeq	r3, r1, r8, lsr #18
   139cc:	andeq	r3, r1, r8, lsr #18
   139d0:	andeq	r3, r1, r0, ror #28
   139d4:	mov	r9, r0
   139d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   139dc:	tst	r0, #1
   139e0:	beq	133f8 <__assert_fail@plt+0x2370>
   139e4:	b	136ac <__assert_fail@plt+0x2624>
   139e8:	mov	r0, #0
   139ec:	str	r0, [fp, #-56]	; 0xffffffc8
   139f0:	ldr	r0, [sp, #32]
   139f4:	cmp	r0, #0
   139f8:	beq	13ab0 <__assert_fail@plt+0x2a28>
   139fc:	add	r0, sl, #2
   13a00:	mov	r1, r7
   13a04:	cmp	r0, r7
   13a08:	bcs	13ab0 <__assert_fail@plt+0x2a28>
   13a0c:	add	r1, sl, lr
   13a10:	ldrb	r1, [r1, #1]
   13a14:	cmp	r1, #63	; 0x3f
   13a18:	bne	13ab0 <__assert_fail@plt+0x2a28>
   13a1c:	ldrb	r8, [lr, r0]
   13a20:	sub	r2, r8, #33	; 0x21
   13a24:	cmp	r2, #29
   13a28:	bhi	13ab0 <__assert_fail@plt+0x2a28>
   13a2c:	mov	r1, r4
   13a30:	movw	r4, #20929	; 0x51c1
   13a34:	mov	r3, #1
   13a38:	movt	r4, #14336	; 0x3800
   13a3c:	tst	r4, r3, lsl r2
   13a40:	beq	13d6c <__assert_fail@plt+0x2ce4>
   13a44:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13a48:	tst	r2, #1
   13a4c:	bne	13e28 <__assert_fail@plt+0x2da0>
   13a50:	cmp	r9, r5
   13a54:	mov	r6, r8
   13a58:	mov	r4, r1
   13a5c:	mov	sl, r0
   13a60:	mov	r8, #0
   13a64:	movcc	r2, #63	; 0x3f
   13a68:	strbcc	r2, [ip, r9]
   13a6c:	add	r2, r9, #1
   13a70:	cmp	r2, r5
   13a74:	movcc	r3, #34	; 0x22
   13a78:	strbcc	r3, [ip, r2]
   13a7c:	add	r2, r9, #2
   13a80:	cmp	r2, r5
   13a84:	movcc	r3, #34	; 0x22
   13a88:	strbcc	r3, [ip, r2]
   13a8c:	add	r2, r9, #3
   13a90:	add	r9, r9, #4
   13a94:	cmp	r2, r5
   13a98:	movcc	r3, #63	; 0x3f
   13a9c:	strbcc	r3, [ip, r2]
   13aa0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13aa4:	tst	r0, #1
   13aa8:	beq	133f8 <__assert_fail@plt+0x2370>
   13aac:	b	136ac <__assert_fail@plt+0x2624>
   13ab0:	mov	r8, #0
   13ab4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ab8:	tst	r0, #1
   13abc:	beq	133f8 <__assert_fail@plt+0x2370>
   13ac0:	b	136ac <__assert_fail@plt+0x2624>
   13ac4:	mov	r8, #1
   13ac8:	mov	r5, #0
   13acc:	sub	r4, fp, #40	; 0x28
   13ad0:	str	r5, [sp, #68]	; 0x44
   13ad4:	add	r5, r5, sl
   13ad8:	sub	r0, fp, #44	; 0x2c
   13adc:	mov	r3, r4
   13ae0:	add	r1, lr, r5
   13ae4:	sub	r2, r7, r5
   13ae8:	bl	17094 <__assert_fail@plt+0x600c>
   13aec:	cmn	r0, #2
   13af0:	beq	13b48 <__assert_fail@plt+0x2ac0>
   13af4:	cmn	r0, #1
   13af8:	beq	13b3c <__assert_fail@plt+0x2ab4>
   13afc:	ldr	r5, [sp, #68]	; 0x44
   13b00:	cmp	r0, #0
   13b04:	beq	13b84 <__assert_fail@plt+0x2afc>
   13b08:	add	r5, r0, r5
   13b0c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13b10:	bl	10ed8 <iswprint@plt>
   13b14:	cmp	r0, #0
   13b18:	sub	r4, fp, #40	; 0x28
   13b1c:	movwne	r0, #1
   13b20:	and	r8, r8, r0
   13b24:	mov	r0, r4
   13b28:	bl	10e9c <mbsinit@plt>
   13b2c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13b30:	cmp	r0, #0
   13b34:	beq	13ad0 <__assert_fail@plt+0x2a48>
   13b38:	b	13b88 <__assert_fail@plt+0x2b00>
   13b3c:	mov	r8, #0
   13b40:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13b44:	b	13b7c <__assert_fail@plt+0x2af4>
   13b48:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13b4c:	mov	r8, #0
   13b50:	cmp	r5, r7
   13b54:	bcs	13b7c <__assert_fail@plt+0x2af4>
   13b58:	ldrb	r0, [lr, r5]
   13b5c:	cmp	r0, #0
   13b60:	beq	13b7c <__assert_fail@plt+0x2af4>
   13b64:	ldr	r0, [sp, #68]	; 0x44
   13b68:	add	r0, r0, #1
   13b6c:	add	r5, r0, sl
   13b70:	str	r0, [sp, #68]	; 0x44
   13b74:	cmp	r5, r7
   13b78:	bcc	13b58 <__assert_fail@plt+0x2ad0>
   13b7c:	ldr	r5, [sp, #68]	; 0x44
   13b80:	b	13b88 <__assert_fail@plt+0x2b00>
   13b84:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13b88:	mov	r1, r5
   13b8c:	ldr	r5, [sp, #28]
   13b90:	ldr	r4, [sp, #84]	; 0x54
   13b94:	ldr	r0, [sp, #52]	; 0x34
   13b98:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b9c:	cmp	r1, #1
   13ba0:	orr	r2, r8, r0
   13ba4:	mov	r0, r1
   13ba8:	bhi	13bb4 <__assert_fail@plt+0x2b2c>
   13bac:	tst	r2, #1
   13bb0:	bne	133ec <__assert_fail@plt+0x2364>
   13bb4:	add	r0, r0, sl
   13bb8:	str	r2, [sp, #84]	; 0x54
   13bbc:	str	r0, [fp, #-56]	; 0xffffffc8
   13bc0:	mov	r0, #0
   13bc4:	tst	r2, #1
   13bc8:	bne	13ca8 <__assert_fail@plt+0x2c20>
   13bcc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13bd0:	tst	r1, #1
   13bd4:	bne	13e28 <__assert_fail@plt+0x2da0>
   13bd8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13bdc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13be0:	subs	r2, r1, #2
   13be4:	movwne	r2, #1
   13be8:	orr	r2, r2, r0
   13bec:	tst	r2, #1
   13bf0:	bne	13c2c <__assert_fail@plt+0x2ba4>
   13bf4:	cmp	r9, r5
   13bf8:	add	r2, r9, #1
   13bfc:	mov	r0, #1
   13c00:	movcc	r1, #39	; 0x27
   13c04:	str	r0, [fp, #-52]	; 0xffffffcc
   13c08:	strbcc	r1, [ip, r9]
   13c0c:	cmp	r2, r5
   13c10:	movcc	r1, #36	; 0x24
   13c14:	strbcc	r1, [ip, r2]
   13c18:	add	r2, r9, #2
   13c1c:	add	r9, r9, #3
   13c20:	cmp	r2, r5
   13c24:	movcc	r1, #39	; 0x27
   13c28:	strbcc	r1, [ip, r2]
   13c2c:	cmp	r9, r5
   13c30:	add	r2, r9, #1
   13c34:	movcc	r1, #92	; 0x5c
   13c38:	strbcc	r1, [ip, r9]
   13c3c:	cmp	r2, r5
   13c40:	bcs	13c54 <__assert_fail@plt+0x2bcc>
   13c44:	uxtb	r3, r6
   13c48:	mov	r1, #48	; 0x30
   13c4c:	orr	r3, r1, r3, lsr #6
   13c50:	strb	r3, [ip, r2]
   13c54:	add	r2, r9, #2
   13c58:	add	r9, r9, #3
   13c5c:	cmp	r2, r5
   13c60:	lsrcc	r3, r6, #3
   13c64:	movcc	r1, #6
   13c68:	bficc	r3, r1, #3, #29
   13c6c:	mov	r1, #6
   13c70:	bfi	r6, r1, #3, #29
   13c74:	strbcc	r3, [ip, r2]
   13c78:	mov	r2, #1
   13c7c:	b	13cdc <__assert_fail@plt+0x2c54>
   13c80:	ldr	r1, [sp, #80]	; 0x50
   13c84:	cmp	r9, r2
   13c88:	mov	r5, r2
   13c8c:	ldr	r2, [sp, #84]	; 0x54
   13c90:	strbcc	r6, [ip, r9]
   13c94:	add	r9, r9, #1
   13c98:	ldrb	r6, [r1, sl]
   13c9c:	mov	sl, r3
   13ca0:	tst	r2, #1
   13ca4:	beq	13bcc <__assert_fail@plt+0x2b44>
   13ca8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13cac:	tst	r1, #1
   13cb0:	beq	13cd0 <__assert_fail@plt+0x2c48>
   13cb4:	cmp	r9, r5
   13cb8:	mov	r2, r0
   13cbc:	movcc	r1, #92	; 0x5c
   13cc0:	strbcc	r1, [ip, r9]
   13cc4:	add	r9, r9, #1
   13cc8:	mov	r1, #0
   13ccc:	b	13cd8 <__assert_fail@plt+0x2c50>
   13cd0:	mov	r1, #0
   13cd4:	mov	r2, r0
   13cd8:	str	r1, [fp, #-48]	; 0xffffffd0
   13cdc:	mov	r0, r2
   13ce0:	and	r1, r2, #1
   13ce4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13ce8:	add	r3, sl, #1
   13cec:	cmp	r2, r3
   13cf0:	bls	13d50 <__assert_fail@plt+0x2cc8>
   13cf4:	mov	r2, r5
   13cf8:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13cfc:	cmp	r1, #0
   13d00:	movwne	r1, #1
   13d04:	mvn	r5, r5
   13d08:	orr	r5, r5, r1
   13d0c:	tst	r5, #1
   13d10:	bne	13c80 <__assert_fail@plt+0x2bf8>
   13d14:	cmp	r9, r2
   13d18:	movcc	r5, r4
   13d1c:	movcc	r4, #39	; 0x27
   13d20:	strbcc	r4, [ip, r9]
   13d24:	movcc	r4, r5
   13d28:	add	r5, r9, #1
   13d2c:	add	r9, r9, #2
   13d30:	cmp	r5, r2
   13d34:	movcc	r1, r4
   13d38:	movcc	r4, #39	; 0x27
   13d3c:	strbcc	r4, [ip, r5]
   13d40:	movcc	r4, r1
   13d44:	mov	r1, #0
   13d48:	str	r1, [fp, #-52]	; 0xffffffcc
   13d4c:	b	13c80 <__assert_fail@plt+0x2bf8>
   13d50:	cmp	r1, #0
   13d54:	movwne	r1, #1
   13d58:	str	r1, [fp, #-56]	; 0xffffffc8
   13d5c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13d60:	cmp	r0, #0
   13d64:	beq	1378c <__assert_fail@plt+0x2704>
   13d68:	b	137c0 <__assert_fail@plt+0x2738>
   13d6c:	mov	r8, #0
   13d70:	mov	r4, r1
   13d74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d78:	tst	r0, #1
   13d7c:	beq	133f8 <__assert_fail@plt+0x2370>
   13d80:	b	136ac <__assert_fail@plt+0x2624>
   13d84:	mov	r7, sl
   13d88:	b	13d90 <__assert_fail@plt+0x2d08>
   13d8c:	mvn	r7, #0
   13d90:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13d94:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13d98:	ldr	r2, [sp, #88]	; 0x58
   13d9c:	eor	r0, r1, #2
   13da0:	orr	r0, r0, r9
   13da4:	clz	r0, r0
   13da8:	lsr	r0, r0, #5
   13dac:	tst	r3, r0
   13db0:	bne	13e28 <__assert_fail@plt+0x2da0>
   13db4:	subs	r0, r1, #2
   13db8:	movwne	r0, #1
   13dbc:	orr	r0, r3, r0
   13dc0:	tst	r0, #1
   13dc4:	ldreq	r0, [sp, #60]	; 0x3c
   13dc8:	eoreq	r0, r0, #1
   13dcc:	tsteq	r0, #1
   13dd0:	bne	13f04 <__assert_fail@plt+0x2e7c>
   13dd4:	tst	r4, #1
   13dd8:	bne	13ec8 <__assert_fail@plt+0x2e40>
   13ddc:	ldr	r6, [sp, #56]	; 0x38
   13de0:	mov	r8, #0
   13de4:	cmp	r6, #0
   13de8:	beq	13f00 <__assert_fail@plt+0x2e78>
   13dec:	mov	r1, #0
   13df0:	mov	r4, #2
   13df4:	cmp	r5, #0
   13df8:	mov	r0, r2
   13dfc:	mov	r3, #0
   13e00:	str	r1, [sp, #84]	; 0x54
   13e04:	beq	12c4c <__assert_fail@plt+0x1bc4>
   13e08:	b	13f04 <__assert_fail@plt+0x2e7c>
   13e0c:	movw	r0, #31993	; 0x7cf9
   13e10:	movt	r0, #1
   13e14:	str	r0, [sp, #76]	; 0x4c
   13e18:	mov	r9, #0
   13e1c:	tst	r8, #1
   13e20:	beq	12ee4 <__assert_fail@plt+0x1e5c>
   13e24:	b	13024 <__assert_fail@plt+0x1f9c>
   13e28:	ldr	r1, [sp, #88]	; 0x58
   13e2c:	mov	r0, #2
   13e30:	tst	r1, #1
   13e34:	movwne	r0, #4
   13e38:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13e3c:	ldr	r1, [fp, #12]
   13e40:	cmp	r2, #2
   13e44:	moveq	r2, r0
   13e48:	b	13e80 <__assert_fail@plt+0x2df8>
   13e4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e50:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13e54:	ldr	r1, [fp, #12]
   13e58:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13e5c:	b	13e80 <__assert_fail@plt+0x2df8>
   13e60:	ldr	r1, [sp, #88]	; 0x58
   13e64:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13e68:	ldr	r5, [sp, #28]
   13e6c:	mov	r0, #2
   13e70:	tst	r1, #1
   13e74:	ldr	r1, [fp, #12]
   13e78:	movwne	r0, #4
   13e7c:	mov	r2, r0
   13e80:	mov	r0, #0
   13e84:	bic	r1, r1, #2
   13e88:	str	r2, [sp]
   13e8c:	mov	r2, lr
   13e90:	str	r0, [sp, #8]
   13e94:	ldr	r0, [sp, #72]	; 0x48
   13e98:	str	r1, [sp, #4]
   13e9c:	mov	r1, r5
   13ea0:	str	r0, [sp, #12]
   13ea4:	ldr	r0, [sp, #76]	; 0x4c
   13ea8:	str	r0, [sp, #16]
   13eac:	mov	r0, ip
   13eb0:	mov	r3, r7
   13eb4:	bl	12bc0 <__assert_fail@plt+0x1b38>
   13eb8:	mov	r9, r0
   13ebc:	mov	r0, r9
   13ec0:	sub	sp, fp, #28
   13ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec8:	mov	r0, #5
   13ecc:	ldr	r1, [sp, #56]	; 0x38
   13ed0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13ed4:	str	r0, [sp]
   13ed8:	ldr	r0, [fp, #12]
   13edc:	str	r0, [sp, #4]
   13ee0:	ldr	r0, [fp, #16]
   13ee4:	str	r0, [sp, #8]
   13ee8:	ldr	r0, [sp, #72]	; 0x48
   13eec:	str	r0, [sp, #12]
   13ef0:	ldr	r0, [sp, #76]	; 0x4c
   13ef4:	str	r0, [sp, #16]
   13ef8:	ldr	r0, [fp, #-84]	; 0xffffffac
   13efc:	b	13eb0 <__assert_fail@plt+0x2e28>
   13f00:	mov	r3, #0
   13f04:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13f08:	cmp	r1, #0
   13f0c:	beq	13f48 <__assert_fail@plt+0x2ec0>
   13f10:	ldr	r2, [fp, #-84]	; 0xffffffac
   13f14:	tst	r3, #1
   13f18:	bne	13f4c <__assert_fail@plt+0x2ec4>
   13f1c:	ldrb	r0, [r1]
   13f20:	cmp	r0, #0
   13f24:	beq	13f4c <__assert_fail@plt+0x2ec4>
   13f28:	add	r1, r1, #1
   13f2c:	cmp	r9, r5
   13f30:	strbcc	r0, [r2, r9]
   13f34:	add	r9, r9, #1
   13f38:	ldrb	r0, [r1], #1
   13f3c:	cmp	r0, #0
   13f40:	bne	13f2c <__assert_fail@plt+0x2ea4>
   13f44:	b	13f4c <__assert_fail@plt+0x2ec4>
   13f48:	ldr	r2, [fp, #-84]	; 0xffffffac
   13f4c:	cmp	r9, r5
   13f50:	movcc	r0, #0
   13f54:	strbcc	r0, [r2, r9]
   13f58:	mov	r0, r9
   13f5c:	sub	sp, fp, #28
   13f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f64:	mov	r0, #4
   13f68:	b	13e38 <__assert_fail@plt+0x2db0>
   13f6c:	bl	1107c <abort@plt>
   13f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f74:	add	fp, sp, #28
   13f78:	sub	sp, sp, #28
   13f7c:	movw	r5, #37224	; 0x9168
   13f80:	cmp	r2, #0
   13f84:	mov	r4, r1
   13f88:	mov	r7, r0
   13f8c:	str	r0, [sp, #20]
   13f90:	movt	r5, #2
   13f94:	movne	r5, r2
   13f98:	bl	10fa4 <__errno_location@plt>
   13f9c:	mov	sl, r0
   13fa0:	ldr	r2, [r5, #40]	; 0x28
   13fa4:	ldr	r3, [r5, #44]	; 0x2c
   13fa8:	ldm	r5, {r0, r1}
   13fac:	orr	r8, r1, #1
   13fb0:	add	r9, r5, #8
   13fb4:	mov	r1, #0
   13fb8:	ldr	r6, [sl]
   13fbc:	stm	sp, {r0, r8, r9}
   13fc0:	mov	r0, #0
   13fc4:	str	r2, [sp, #12]
   13fc8:	str	r3, [sp, #16]
   13fcc:	mov	r2, r7
   13fd0:	mov	r3, r4
   13fd4:	str	r6, [sp, #24]
   13fd8:	mov	r6, r4
   13fdc:	bl	12bc0 <__assert_fail@plt+0x1b38>
   13fe0:	add	r7, r0, #1
   13fe4:	mov	r0, r7
   13fe8:	bl	15050 <__assert_fail@plt+0x3fc8>
   13fec:	mov	r4, r0
   13ff0:	ldr	r0, [r5]
   13ff4:	ldr	r2, [r5, #44]	; 0x2c
   13ff8:	ldr	r1, [r5, #40]	; 0x28
   13ffc:	mov	r3, r6
   14000:	stm	sp, {r0, r8, r9}
   14004:	str	r2, [sp, #16]
   14008:	ldr	r2, [sp, #20]
   1400c:	str	r1, [sp, #12]
   14010:	mov	r0, r4
   14014:	mov	r1, r7
   14018:	bl	12bc0 <__assert_fail@plt+0x1b38>
   1401c:	ldr	r0, [sp, #24]
   14020:	str	r0, [sl]
   14024:	mov	r0, r4
   14028:	sub	sp, fp, #28
   1402c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14034:	add	fp, sp, #28
   14038:	sub	sp, sp, #36	; 0x24
   1403c:	movw	r8, #37224	; 0x9168
   14040:	cmp	r3, #0
   14044:	mov	r4, r2
   14048:	str	r2, [sp, #24]
   1404c:	mov	r5, r1
   14050:	mov	r6, r0
   14054:	str	r0, [sp, #20]
   14058:	movt	r8, #2
   1405c:	movne	r8, r3
   14060:	bl	10fa4 <__errno_location@plt>
   14064:	str	r0, [sp, #28]
   14068:	ldr	r1, [r8, #40]	; 0x28
   1406c:	ldr	r2, [r8, #44]	; 0x2c
   14070:	ldr	r7, [r0]
   14074:	cmp	r4, #0
   14078:	add	sl, r8, #8
   1407c:	mov	r0, #0
   14080:	ldm	r8, {r3, r9}
   14084:	orreq	r9, r9, #1
   14088:	stm	sp, {r3, r9, sl}
   1408c:	str	r1, [sp, #12]
   14090:	str	r2, [sp, #16]
   14094:	mov	r1, #0
   14098:	mov	r2, r6
   1409c:	mov	r3, r5
   140a0:	str	r7, [sp, #32]
   140a4:	mov	r7, r5
   140a8:	bl	12bc0 <__assert_fail@plt+0x1b38>
   140ac:	add	r4, r0, #1
   140b0:	mov	r5, r0
   140b4:	mov	r0, r4
   140b8:	bl	15050 <__assert_fail@plt+0x3fc8>
   140bc:	mov	r6, r0
   140c0:	ldr	r0, [r8]
   140c4:	ldr	r2, [r8, #44]	; 0x2c
   140c8:	ldr	r1, [r8, #40]	; 0x28
   140cc:	mov	r3, r7
   140d0:	stm	sp, {r0, r9, sl}
   140d4:	str	r2, [sp, #16]
   140d8:	ldr	r2, [sp, #20]
   140dc:	str	r1, [sp, #12]
   140e0:	mov	r0, r6
   140e4:	mov	r1, r4
   140e8:	bl	12bc0 <__assert_fail@plt+0x1b38>
   140ec:	ldr	r0, [sp, #24]
   140f0:	ldr	r1, [sp, #32]
   140f4:	ldr	r2, [sp, #28]
   140f8:	cmp	r0, #0
   140fc:	str	r1, [r2]
   14100:	strne	r5, [r0]
   14104:	mov	r0, r6
   14108:	sub	sp, fp, #28
   1410c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14110:	push	{r4, r5, r6, r7, fp, lr}
   14114:	add	fp, sp, #16
   14118:	movw	r4, #37152	; 0x9120
   1411c:	movt	r4, #2
   14120:	ldrd	r6, [r4]
   14124:	cmp	r7, #2
   14128:	blt	14154 <__assert_fail@plt+0x30cc>
   1412c:	add	r5, r6, #12
   14130:	mov	r7, #0
   14134:	ldr	r0, [r5, r7, lsl #3]
   14138:	bl	128b4 <__assert_fail@plt+0x182c>
   1413c:	ldr	r1, [r4, #4]
   14140:	add	r2, r7, #2
   14144:	add	r0, r7, #1
   14148:	mov	r7, r0
   1414c:	cmp	r2, r1
   14150:	blt	14134 <__assert_fail@plt+0x30ac>
   14154:	ldr	r0, [r6, #4]
   14158:	movw	r5, #37272	; 0x9198
   1415c:	movt	r5, #2
   14160:	cmp	r0, r5
   14164:	beq	14178 <__assert_fail@plt+0x30f0>
   14168:	bl	128b4 <__assert_fail@plt+0x182c>
   1416c:	mov	r0, #256	; 0x100
   14170:	str	r0, [r4, #8]
   14174:	str	r5, [r4, #12]
   14178:	add	r5, r4, #8
   1417c:	cmp	r6, r5
   14180:	beq	14190 <__assert_fail@plt+0x3108>
   14184:	mov	r0, r6
   14188:	bl	128b4 <__assert_fail@plt+0x182c>
   1418c:	str	r5, [r4]
   14190:	mov	r0, #1
   14194:	str	r0, [r4, #4]
   14198:	pop	{r4, r5, r6, r7, fp, pc}
   1419c:	movw	r3, #37224	; 0x9168
   141a0:	mvn	r2, #0
   141a4:	movt	r3, #2
   141a8:	b	141ac <__assert_fail@plt+0x3124>
   141ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141b0:	add	fp, sp, #28
   141b4:	sub	sp, sp, #44	; 0x2c
   141b8:	mov	r7, r3
   141bc:	str	r2, [sp, #36]	; 0x24
   141c0:	str	r1, [sp, #32]
   141c4:	mov	r5, r0
   141c8:	bl	10fa4 <__errno_location@plt>
   141cc:	cmp	r5, #0
   141d0:	bmi	14338 <__assert_fail@plt+0x32b0>
   141d4:	cmn	r5, #-2147483647	; 0x80000001
   141d8:	beq	14338 <__assert_fail@plt+0x32b0>
   141dc:	movw	r8, #37152	; 0x9120
   141e0:	mov	r4, r0
   141e4:	ldr	r0, [r0]
   141e8:	movt	r8, #2
   141ec:	str	r4, [sp, #28]
   141f0:	ldr	r1, [r8, #4]
   141f4:	ldr	r6, [r8]
   141f8:	str	r0, [sp, #24]
   141fc:	cmp	r1, r5
   14200:	ble	1420c <__assert_fail@plt+0x3184>
   14204:	mov	sl, r6
   14208:	b	14274 <__assert_fail@plt+0x31ec>
   1420c:	mov	r0, #8
   14210:	add	r9, r8, #8
   14214:	str	r1, [fp, #-32]	; 0xffffffe0
   14218:	sub	r1, r5, r1
   1421c:	mvn	r3, #-2147483648	; 0x80000000
   14220:	str	r0, [sp]
   14224:	subs	r0, r6, r9
   14228:	add	r2, r1, #1
   1422c:	sub	r1, fp, #32
   14230:	movne	r0, r6
   14234:	bl	15250 <__assert_fail@plt+0x41c8>
   14238:	mov	sl, r0
   1423c:	cmp	r6, r9
   14240:	str	r0, [r8]
   14244:	bne	14250 <__assert_fail@plt+0x31c8>
   14248:	ldrd	r0, [r8, #8]
   1424c:	stm	sl, {r0, r1}
   14250:	ldr	r1, [r8, #4]
   14254:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14258:	add	r0, sl, r1, lsl #3
   1425c:	sub	r1, r2, r1
   14260:	lsl	r2, r1, #3
   14264:	mov	r1, #0
   14268:	bl	10fbc <memset@plt>
   1426c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14270:	str	r0, [r8, #4]
   14274:	mov	r9, sl
   14278:	ldm	r7, {r0, r1}
   1427c:	orr	r8, r1, #1
   14280:	add	r1, r7, #8
   14284:	ldr	r2, [r7, #40]	; 0x28
   14288:	ldr	r3, [r7, #44]	; 0x2c
   1428c:	ldr	r6, [r9, r5, lsl #3]!
   14290:	str	r1, [sp, #20]
   14294:	ldr	r4, [r9, #4]!
   14298:	stm	sp, {r0, r8}
   1429c:	add	r0, sp, #8
   142a0:	stm	r0, {r1, r2, r3}
   142a4:	ldr	r2, [sp, #32]
   142a8:	ldr	r3, [sp, #36]	; 0x24
   142ac:	mov	r1, r6
   142b0:	mov	r0, r4
   142b4:	bl	12bc0 <__assert_fail@plt+0x1b38>
   142b8:	cmp	r6, r0
   142bc:	bhi	14320 <__assert_fail@plt+0x3298>
   142c0:	add	r6, r0, #1
   142c4:	movw	r0, #37272	; 0x9198
   142c8:	movt	r0, #2
   142cc:	str	r6, [sl, r5, lsl #3]
   142d0:	cmp	r4, r0
   142d4:	beq	142e0 <__assert_fail@plt+0x3258>
   142d8:	mov	r0, r4
   142dc:	bl	128b4 <__assert_fail@plt+0x182c>
   142e0:	mov	r0, r6
   142e4:	bl	15050 <__assert_fail@plt+0x3fc8>
   142e8:	str	r0, [r9]
   142ec:	mov	r4, r0
   142f0:	add	r3, sp, #8
   142f4:	ldr	r0, [r7]
   142f8:	ldr	r1, [r7, #40]	; 0x28
   142fc:	ldr	r2, [r7, #44]	; 0x2c
   14300:	stm	sp, {r0, r8}
   14304:	ldr	r0, [sp, #20]
   14308:	stm	r3, {r0, r1, r2}
   1430c:	ldr	r2, [sp, #32]
   14310:	ldr	r3, [sp, #36]	; 0x24
   14314:	mov	r0, r4
   14318:	mov	r1, r6
   1431c:	bl	12bc0 <__assert_fail@plt+0x1b38>
   14320:	ldr	r1, [sp, #24]
   14324:	ldr	r0, [sp, #28]
   14328:	str	r1, [r0]
   1432c:	mov	r0, r4
   14330:	sub	sp, fp, #28
   14334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14338:	bl	1107c <abort@plt>
   1433c:	movw	r3, #37224	; 0x9168
   14340:	movt	r3, #2
   14344:	b	141ac <__assert_fail@plt+0x3124>
   14348:	movw	r3, #37224	; 0x9168
   1434c:	mov	r1, r0
   14350:	mov	r0, #0
   14354:	mvn	r2, #0
   14358:	movt	r3, #2
   1435c:	b	141ac <__assert_fail@plt+0x3124>
   14360:	movw	r3, #37224	; 0x9168
   14364:	mov	r2, r1
   14368:	mov	r1, r0
   1436c:	mov	r0, #0
   14370:	movt	r3, #2
   14374:	b	141ac <__assert_fail@plt+0x3124>
   14378:	push	{fp, lr}
   1437c:	mov	fp, sp
   14380:	sub	sp, sp, #48	; 0x30
   14384:	vmov.i32	q8, #0	; 0x00000000
   14388:	mov	ip, #32
   1438c:	mov	r3, sp
   14390:	mov	lr, r2
   14394:	cmp	r1, #10
   14398:	add	r2, r3, #16
   1439c:	vst1.64	{d16-d17}, [r3], ip
   143a0:	vst1.64	{d16-d17}, [r2]
   143a4:	vst1.64	{d16-d17}, [r3]
   143a8:	beq	143c8 <__assert_fail@plt+0x3340>
   143ac:	str	r1, [sp]
   143b0:	mov	r3, sp
   143b4:	mov	r1, lr
   143b8:	mvn	r2, #0
   143bc:	bl	141ac <__assert_fail@plt+0x3124>
   143c0:	mov	sp, fp
   143c4:	pop	{fp, pc}
   143c8:	bl	1107c <abort@plt>
   143cc:	push	{r4, sl, fp, lr}
   143d0:	add	fp, sp, #8
   143d4:	sub	sp, sp, #48	; 0x30
   143d8:	vmov.i32	q8, #0	; 0x00000000
   143dc:	mov	ip, r3
   143e0:	mov	r3, sp
   143e4:	mov	lr, #32
   143e8:	cmp	r1, #10
   143ec:	add	r4, r3, #16
   143f0:	vst1.64	{d16-d17}, [r3], lr
   143f4:	vst1.64	{d16-d17}, [r4]
   143f8:	vst1.64	{d16-d17}, [r3]
   143fc:	beq	1441c <__assert_fail@plt+0x3394>
   14400:	str	r1, [sp]
   14404:	mov	r1, r2
   14408:	mov	r3, sp
   1440c:	mov	r2, ip
   14410:	bl	141ac <__assert_fail@plt+0x3124>
   14414:	sub	sp, fp, #8
   14418:	pop	{r4, sl, fp, pc}
   1441c:	bl	1107c <abort@plt>
   14420:	push	{fp, lr}
   14424:	mov	fp, sp
   14428:	sub	sp, sp, #48	; 0x30
   1442c:	vmov.i32	q8, #0	; 0x00000000
   14430:	mov	r3, sp
   14434:	mov	ip, #32
   14438:	cmp	r0, #10
   1443c:	add	r2, r3, #16
   14440:	vst1.64	{d16-d17}, [r3], ip
   14444:	vst1.64	{d16-d17}, [r2]
   14448:	vst1.64	{d16-d17}, [r3]
   1444c:	beq	1446c <__assert_fail@plt+0x33e4>
   14450:	str	r0, [sp]
   14454:	mov	r3, sp
   14458:	mov	r0, #0
   1445c:	mvn	r2, #0
   14460:	bl	141ac <__assert_fail@plt+0x3124>
   14464:	mov	sp, fp
   14468:	pop	{fp, pc}
   1446c:	bl	1107c <abort@plt>
   14470:	push	{fp, lr}
   14474:	mov	fp, sp
   14478:	sub	sp, sp, #48	; 0x30
   1447c:	vmov.i32	q8, #0	; 0x00000000
   14480:	mov	r3, sp
   14484:	mov	ip, #32
   14488:	cmp	r0, #10
   1448c:	add	lr, r3, #16
   14490:	vst1.64	{d16-d17}, [r3], ip
   14494:	vst1.64	{d16-d17}, [lr]
   14498:	vst1.64	{d16-d17}, [r3]
   1449c:	beq	144b8 <__assert_fail@plt+0x3430>
   144a0:	str	r0, [sp]
   144a4:	mov	r3, sp
   144a8:	mov	r0, #0
   144ac:	bl	141ac <__assert_fail@plt+0x3124>
   144b0:	mov	sp, fp
   144b4:	pop	{fp, pc}
   144b8:	bl	1107c <abort@plt>
   144bc:	push	{r4, sl, fp, lr}
   144c0:	add	fp, sp, #8
   144c4:	sub	sp, sp, #48	; 0x30
   144c8:	mov	lr, r0
   144cc:	movw	r0, #37224	; 0x9168
   144d0:	mov	ip, r1
   144d4:	mov	r1, #32
   144d8:	mov	r4, #1
   144dc:	movt	r0, #2
   144e0:	add	r3, r0, #16
   144e4:	vld1.64	{d16-d17}, [r0], r1
   144e8:	vld1.64	{d20-d21}, [r0]
   144ec:	vld1.64	{d18-d19}, [r3]
   144f0:	mov	r3, sp
   144f4:	add	r0, r3, #32
   144f8:	add	r1, r3, #16
   144fc:	vst1.64	{d20-d21}, [r0]
   14500:	mov	r0, #28
   14504:	vst1.64	{d18-d19}, [r1]
   14508:	mov	r1, r3
   1450c:	and	r0, r0, r2, lsr #3
   14510:	and	r2, r2, #31
   14514:	vst1.64	{d16-d17}, [r1], r0
   14518:	ldr	r0, [r1, #8]
   1451c:	bic	r4, r4, r0, lsr r2
   14520:	eor	r0, r0, r4, lsl r2
   14524:	mov	r2, ip
   14528:	str	r0, [r1, #8]
   1452c:	mov	r0, #0
   14530:	mov	r1, lr
   14534:	bl	141ac <__assert_fail@plt+0x3124>
   14538:	sub	sp, fp, #8
   1453c:	pop	{r4, sl, fp, pc}
   14540:	push	{fp, lr}
   14544:	mov	fp, sp
   14548:	sub	sp, sp, #48	; 0x30
   1454c:	mov	ip, r0
   14550:	movw	r0, #37224	; 0x9168
   14554:	mov	r2, #32
   14558:	movt	r0, #2
   1455c:	add	r3, r0, #16
   14560:	vld1.64	{d16-d17}, [r0], r2
   14564:	vld1.64	{d20-d21}, [r0]
   14568:	vld1.64	{d18-d19}, [r3]
   1456c:	mov	r3, sp
   14570:	add	r0, r3, #32
   14574:	add	r2, r3, #16
   14578:	vst1.64	{d20-d21}, [r0]
   1457c:	mov	r0, #28
   14580:	vst1.64	{d18-d19}, [r2]
   14584:	mov	r2, r3
   14588:	and	r0, r0, r1, lsr #3
   1458c:	and	r1, r1, #31
   14590:	vst1.64	{d16-d17}, [r2], r0
   14594:	mov	r0, #1
   14598:	ldr	lr, [r2, #8]
   1459c:	bic	r0, r0, lr, lsr r1
   145a0:	eor	r0, lr, r0, lsl r1
   145a4:	mov	r1, ip
   145a8:	str	r0, [r2, #8]
   145ac:	mov	r0, #0
   145b0:	mvn	r2, #0
   145b4:	bl	141ac <__assert_fail@plt+0x3124>
   145b8:	mov	sp, fp
   145bc:	pop	{fp, pc}
   145c0:	push	{fp, lr}
   145c4:	mov	fp, sp
   145c8:	sub	sp, sp, #48	; 0x30
   145cc:	mov	r1, r0
   145d0:	movw	r0, #37224	; 0x9168
   145d4:	mov	r3, #32
   145d8:	movt	r0, #2
   145dc:	add	r2, r0, #16
   145e0:	vld1.64	{d16-d17}, [r0], r3
   145e4:	mov	r3, sp
   145e8:	vld1.64	{d18-d19}, [r2]
   145ec:	vld1.64	{d20-d21}, [r0]
   145f0:	add	r2, r3, #16
   145f4:	add	r0, r3, #32
   145f8:	vst1.64	{d18-d19}, [r2]
   145fc:	vst1.64	{d20-d21}, [r0]
   14600:	mov	r0, #12
   14604:	mov	r2, r3
   14608:	vst1.64	{d16-d17}, [r2], r0
   1460c:	ldr	r0, [r2]
   14610:	orr	r0, r0, #67108864	; 0x4000000
   14614:	str	r0, [r2]
   14618:	mov	r0, #0
   1461c:	mvn	r2, #0
   14620:	bl	141ac <__assert_fail@plt+0x3124>
   14624:	mov	sp, fp
   14628:	pop	{fp, pc}
   1462c:	push	{fp, lr}
   14630:	mov	fp, sp
   14634:	sub	sp, sp, #48	; 0x30
   14638:	mov	ip, r1
   1463c:	mov	r1, r0
   14640:	movw	r0, #37224	; 0x9168
   14644:	mov	r2, #32
   14648:	movt	r0, #2
   1464c:	add	r3, r0, #16
   14650:	vld1.64	{d16-d17}, [r0], r2
   14654:	vld1.64	{d18-d19}, [r3]
   14658:	vld1.64	{d20-d21}, [r0]
   1465c:	mov	r3, sp
   14660:	add	r2, r3, #16
   14664:	add	r0, r3, #32
   14668:	vst1.64	{d18-d19}, [r2]
   1466c:	vst1.64	{d20-d21}, [r0]
   14670:	mov	r0, #12
   14674:	mov	r2, r3
   14678:	vst1.64	{d16-d17}, [r2], r0
   1467c:	ldr	r0, [r2]
   14680:	orr	r0, r0, #67108864	; 0x4000000
   14684:	str	r0, [r2]
   14688:	mov	r0, #0
   1468c:	mov	r2, ip
   14690:	bl	141ac <__assert_fail@plt+0x3124>
   14694:	mov	sp, fp
   14698:	pop	{fp, pc}
   1469c:	push	{r4, sl, fp, lr}
   146a0:	add	fp, sp, #8
   146a4:	sub	sp, sp, #96	; 0x60
   146a8:	vmov.i32	q8, #0	; 0x00000000
   146ac:	mov	ip, r2
   146b0:	mov	r2, sp
   146b4:	mov	r4, #28
   146b8:	cmp	r1, #10
   146bc:	mov	r3, r2
   146c0:	add	lr, r2, #16
   146c4:	vst1.64	{d16-d17}, [r3], r4
   146c8:	vst1.64	{d16-d17}, [lr]
   146cc:	vst1.32	{d16-d17}, [r3]
   146d0:	beq	14720 <__assert_fail@plt+0x3698>
   146d4:	vld1.64	{d16-d17}, [r2], r4
   146d8:	vld1.64	{d18-d19}, [lr]
   146dc:	add	r3, sp, #48	; 0x30
   146e0:	vld1.32	{d20-d21}, [r2]
   146e4:	add	r2, r3, #20
   146e8:	add	r4, r3, #4
   146ec:	vst1.32	{d18-d19}, [r2]
   146f0:	add	r2, r3, #32
   146f4:	vst1.32	{d16-d17}, [r4]
   146f8:	vst1.32	{d20-d21}, [r2]
   146fc:	str	r1, [sp, #48]	; 0x30
   14700:	mvn	r2, #0
   14704:	ldr	r1, [sp, #60]	; 0x3c
   14708:	orr	r1, r1, #67108864	; 0x4000000
   1470c:	str	r1, [sp, #60]	; 0x3c
   14710:	mov	r1, ip
   14714:	bl	141ac <__assert_fail@plt+0x3124>
   14718:	sub	sp, fp, #8
   1471c:	pop	{r4, sl, fp, pc}
   14720:	bl	1107c <abort@plt>
   14724:	push	{r4, r5, r6, sl, fp, lr}
   14728:	add	fp, sp, #16
   1472c:	sub	sp, sp, #48	; 0x30
   14730:	mov	ip, r3
   14734:	movw	r3, #37224	; 0x9168
   14738:	mov	r6, #32
   1473c:	cmp	r1, #0
   14740:	mov	r4, sp
   14744:	movt	r3, #2
   14748:	cmpne	r2, #0
   1474c:	add	r5, r4, #16
   14750:	add	lr, r3, #16
   14754:	vld1.64	{d16-d17}, [r3], r6
   14758:	vld1.64	{d18-d19}, [lr]
   1475c:	vld1.64	{d20-d21}, [r3]
   14760:	mov	r3, #10
   14764:	vst1.64	{d16-d17}, [r4], r6
   14768:	vst1.64	{d18-d19}, [r5]
   1476c:	vst1.64	{d20-d21}, [r4]
   14770:	str	r3, [sp]
   14774:	bne	1477c <__assert_fail@plt+0x36f4>
   14778:	bl	1107c <abort@plt>
   1477c:	str	r2, [sp, #44]	; 0x2c
   14780:	str	r1, [sp, #40]	; 0x28
   14784:	mov	r3, sp
   14788:	mov	r1, ip
   1478c:	mvn	r2, #0
   14790:	bl	141ac <__assert_fail@plt+0x3124>
   14794:	sub	sp, fp, #16
   14798:	pop	{r4, r5, r6, sl, fp, pc}
   1479c:	push	{r4, r5, r6, sl, fp, lr}
   147a0:	add	fp, sp, #16
   147a4:	sub	sp, sp, #48	; 0x30
   147a8:	mov	lr, r3
   147ac:	movw	r3, #37224	; 0x9168
   147b0:	mov	r6, #32
   147b4:	cmp	r1, #0
   147b8:	mov	r4, sp
   147bc:	movt	r3, #2
   147c0:	cmpne	r2, #0
   147c4:	add	r5, r4, #16
   147c8:	add	ip, r3, #16
   147cc:	vld1.64	{d16-d17}, [r3], r6
   147d0:	vld1.64	{d18-d19}, [ip]
   147d4:	vld1.64	{d20-d21}, [r3]
   147d8:	mov	r3, #10
   147dc:	vst1.64	{d16-d17}, [r4], r6
   147e0:	vst1.64	{d18-d19}, [r5]
   147e4:	vst1.64	{d20-d21}, [r4]
   147e8:	str	r3, [sp]
   147ec:	bne	147f4 <__assert_fail@plt+0x376c>
   147f0:	bl	1107c <abort@plt>
   147f4:	ldr	ip, [fp, #8]
   147f8:	str	r2, [sp, #44]	; 0x2c
   147fc:	str	r1, [sp, #40]	; 0x28
   14800:	mov	r3, sp
   14804:	mov	r1, lr
   14808:	mov	r2, ip
   1480c:	bl	141ac <__assert_fail@plt+0x3124>
   14810:	sub	sp, fp, #16
   14814:	pop	{r4, r5, r6, sl, fp, pc}
   14818:	push	{r4, sl, fp, lr}
   1481c:	add	fp, sp, #8
   14820:	sub	sp, sp, #48	; 0x30
   14824:	movw	r3, #37224	; 0x9168
   14828:	mov	lr, #32
   1482c:	mov	ip, r2
   14830:	cmp	r0, #0
   14834:	movt	r3, #2
   14838:	cmpne	r1, #0
   1483c:	add	r2, r3, #16
   14840:	vld1.64	{d16-d17}, [r3], lr
   14844:	vld1.64	{d20-d21}, [r3]
   14848:	vld1.64	{d18-d19}, [r2]
   1484c:	mov	r2, sp
   14850:	add	r4, r2, #16
   14854:	vst1.64	{d16-d17}, [r2], lr
   14858:	vst1.64	{d20-d21}, [r2]
   1485c:	mov	r2, #10
   14860:	vst1.64	{d18-d19}, [r4]
   14864:	str	r2, [sp]
   14868:	bne	14870 <__assert_fail@plt+0x37e8>
   1486c:	bl	1107c <abort@plt>
   14870:	str	r1, [sp, #44]	; 0x2c
   14874:	str	r0, [sp, #40]	; 0x28
   14878:	mov	r3, sp
   1487c:	mov	r0, #0
   14880:	mov	r1, ip
   14884:	mvn	r2, #0
   14888:	bl	141ac <__assert_fail@plt+0x3124>
   1488c:	sub	sp, fp, #8
   14890:	pop	{r4, sl, fp, pc}
   14894:	push	{r4, r5, fp, lr}
   14898:	add	fp, sp, #8
   1489c:	sub	sp, sp, #48	; 0x30
   148a0:	mov	ip, r3
   148a4:	movw	r3, #37224	; 0x9168
   148a8:	mov	r4, #32
   148ac:	mov	lr, r2
   148b0:	cmp	r0, #0
   148b4:	movt	r3, #2
   148b8:	cmpne	r1, #0
   148bc:	add	r2, r3, #16
   148c0:	vld1.64	{d16-d17}, [r3], r4
   148c4:	vld1.64	{d20-d21}, [r3]
   148c8:	vld1.64	{d18-d19}, [r2]
   148cc:	mov	r2, sp
   148d0:	add	r5, r2, #16
   148d4:	vst1.64	{d16-d17}, [r2], r4
   148d8:	vst1.64	{d20-d21}, [r2]
   148dc:	mov	r2, #10
   148e0:	vst1.64	{d18-d19}, [r5]
   148e4:	str	r2, [sp]
   148e8:	bne	148f0 <__assert_fail@plt+0x3868>
   148ec:	bl	1107c <abort@plt>
   148f0:	str	r1, [sp, #44]	; 0x2c
   148f4:	str	r0, [sp, #40]	; 0x28
   148f8:	mov	r3, sp
   148fc:	mov	r0, #0
   14900:	mov	r1, lr
   14904:	mov	r2, ip
   14908:	bl	141ac <__assert_fail@plt+0x3124>
   1490c:	sub	sp, fp, #8
   14910:	pop	{r4, r5, fp, pc}
   14914:	movw	r3, #37104	; 0x90f0
   14918:	movt	r3, #2
   1491c:	b	141ac <__assert_fail@plt+0x3124>
   14920:	movw	r3, #37104	; 0x90f0
   14924:	mov	r2, r1
   14928:	mov	r1, r0
   1492c:	mov	r0, #0
   14930:	movt	r3, #2
   14934:	b	141ac <__assert_fail@plt+0x3124>
   14938:	movw	r3, #37104	; 0x90f0
   1493c:	mvn	r2, #0
   14940:	movt	r3, #2
   14944:	b	141ac <__assert_fail@plt+0x3124>
   14948:	movw	r3, #37104	; 0x90f0
   1494c:	mov	r1, r0
   14950:	mov	r0, #0
   14954:	mvn	r2, #0
   14958:	movt	r3, #2
   1495c:	b	141ac <__assert_fail@plt+0x3124>
   14960:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14964:	add	fp, sp, #24
   14968:	sub	sp, sp, #32
   1496c:	ldr	r6, [fp, #12]
   14970:	ldr	r7, [fp, #8]
   14974:	mov	r4, r2
   14978:	mov	r8, r0
   1497c:	cmp	r1, #0
   14980:	beq	149a8 <__assert_fail@plt+0x3920>
   14984:	movw	r2, #32080	; 0x7d50
   14988:	mov	r5, r1
   1498c:	str	r3, [sp, #4]
   14990:	str	r4, [sp]
   14994:	mov	r0, r8
   14998:	mov	r1, #1
   1499c:	movt	r2, #1
   149a0:	mov	r3, r5
   149a4:	b	149c0 <__assert_fail@plt+0x3938>
   149a8:	movw	r2, #32092	; 0x7d5c
   149ac:	str	r3, [sp]
   149b0:	mov	r0, r8
   149b4:	mov	r1, #1
   149b8:	mov	r3, r4
   149bc:	movt	r2, #1
   149c0:	bl	10fe0 <__fprintf_chk@plt>
   149c4:	movw	r1, #32099	; 0x7d63
   149c8:	mov	r0, #0
   149cc:	mov	r2, #5
   149d0:	movt	r1, #1
   149d4:	bl	10eb4 <dcgettext@plt>
   149d8:	movw	r2, #32817	; 0x8031
   149dc:	mov	r3, r0
   149e0:	movw	r0, #2022	; 0x7e6
   149e4:	mov	r1, #1
   149e8:	movt	r2, #1
   149ec:	str	r0, [sp]
   149f0:	mov	r0, r8
   149f4:	bl	10fe0 <__fprintf_chk@plt>
   149f8:	movw	r4, #31271	; 0x7a27
   149fc:	mov	r1, r8
   14a00:	movt	r4, #1
   14a04:	mov	r0, r4
   14a08:	bl	10e30 <fputs_unlocked@plt>
   14a0c:	movw	r1, #32103	; 0x7d67
   14a10:	mov	r0, #0
   14a14:	mov	r2, #5
   14a18:	movt	r1, #1
   14a1c:	bl	10eb4 <dcgettext@plt>
   14a20:	movw	r3, #32274	; 0x7e12
   14a24:	mov	r2, r0
   14a28:	mov	r0, r8
   14a2c:	mov	r1, #1
   14a30:	movt	r3, #1
   14a34:	bl	10fe0 <__fprintf_chk@plt>
   14a38:	mov	r0, r4
   14a3c:	mov	r1, r8
   14a40:	bl	10e30 <fputs_unlocked@plt>
   14a44:	cmp	r6, #9
   14a48:	bhi	14a84 <__assert_fail@plt+0x39fc>
   14a4c:	add	r0, pc, #0
   14a50:	ldr	pc, [r0, r6, lsl #2]
   14a54:	andeq	r4, r1, ip, ror sl
   14a58:	muleq	r1, r0, sl
   14a5c:	andeq	r4, r1, r0, asr #21
   14a60:	andeq	r4, r1, r8, ror #21
   14a64:	andeq	r4, r1, r0, lsl fp
   14a68:	andeq	r4, r1, r8, lsr fp
   14a6c:	andeq	r4, r1, r0, ror #22
   14a70:	muleq	r1, r8, fp
   14a74:	andeq	r4, r1, r0, asr #24
   14a78:	andeq	r4, r1, r8, ror #23
   14a7c:	sub	sp, fp, #24
   14a80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a84:	movw	r1, #32627	; 0x7f73
   14a88:	movt	r1, #1
   14a8c:	b	14bf0 <__assert_fail@plt+0x3b68>
   14a90:	movw	r1, #32308	; 0x7e34
   14a94:	mov	r0, #0
   14a98:	mov	r2, #5
   14a9c:	movt	r1, #1
   14aa0:	bl	10eb4 <dcgettext@plt>
   14aa4:	ldr	r3, [r7]
   14aa8:	mov	r2, r0
   14aac:	mov	r0, r8
   14ab0:	mov	r1, #1
   14ab4:	sub	sp, fp, #24
   14ab8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14abc:	b	10fe0 <__fprintf_chk@plt>
   14ac0:	movw	r1, #32324	; 0x7e44
   14ac4:	mov	r0, #0
   14ac8:	mov	r2, #5
   14acc:	movt	r1, #1
   14ad0:	bl	10eb4 <dcgettext@plt>
   14ad4:	mov	r2, r0
   14ad8:	ldr	r3, [r7]
   14adc:	ldr	r0, [r7, #4]
   14ae0:	str	r0, [sp]
   14ae4:	b	14bd4 <__assert_fail@plt+0x3b4c>
   14ae8:	movw	r1, #32347	; 0x7e5b
   14aec:	mov	r0, #0
   14af0:	mov	r2, #5
   14af4:	movt	r1, #1
   14af8:	bl	10eb4 <dcgettext@plt>
   14afc:	mov	r2, r0
   14b00:	ldr	r3, [r7]
   14b04:	ldmib	r7, {r0, r1}
   14b08:	stm	sp, {r0, r1}
   14b0c:	b	14bd4 <__assert_fail@plt+0x3b4c>
   14b10:	movw	r1, #32375	; 0x7e77
   14b14:	mov	r0, #0
   14b18:	mov	r2, #5
   14b1c:	movt	r1, #1
   14b20:	bl	10eb4 <dcgettext@plt>
   14b24:	ldr	r3, [r7]
   14b28:	mov	r2, r0
   14b2c:	ldmib	r7, {r0, r1, r7}
   14b30:	stm	sp, {r0, r1, r7}
   14b34:	b	14bd4 <__assert_fail@plt+0x3b4c>
   14b38:	movw	r1, #32407	; 0x7e97
   14b3c:	mov	r0, #0
   14b40:	mov	r2, #5
   14b44:	movt	r1, #1
   14b48:	bl	10eb4 <dcgettext@plt>
   14b4c:	ldr	r3, [r7]
   14b50:	mov	r2, r0
   14b54:	ldmib	r7, {r0, r1, r6, r7}
   14b58:	stm	sp, {r0, r1, r6, r7}
   14b5c:	b	14bd4 <__assert_fail@plt+0x3b4c>
   14b60:	movw	r1, #32443	; 0x7ebb
   14b64:	mov	r0, #0
   14b68:	mov	r2, #5
   14b6c:	movt	r1, #1
   14b70:	bl	10eb4 <dcgettext@plt>
   14b74:	mov	r2, r0
   14b78:	ldr	r3, [r7]
   14b7c:	ldmib	r7, {r0, r1, r6}
   14b80:	ldr	r5, [r7, #16]
   14b84:	ldr	r7, [r7, #20]
   14b88:	stm	sp, {r0, r1, r6}
   14b8c:	str	r5, [sp, #12]
   14b90:	str	r7, [sp, #16]
   14b94:	b	14bd4 <__assert_fail@plt+0x3b4c>
   14b98:	movw	r1, #32483	; 0x7ee3
   14b9c:	mov	r0, #0
   14ba0:	mov	r2, #5
   14ba4:	movt	r1, #1
   14ba8:	bl	10eb4 <dcgettext@plt>
   14bac:	mov	r2, r0
   14bb0:	ldr	r3, [r7]
   14bb4:	ldmib	r7, {r0, r1, r6}
   14bb8:	ldr	r5, [r7, #16]
   14bbc:	ldr	r4, [r7, #20]
   14bc0:	ldr	r7, [r7, #24]
   14bc4:	stm	sp, {r0, r1, r6}
   14bc8:	str	r5, [sp, #12]
   14bcc:	str	r4, [sp, #16]
   14bd0:	str	r7, [sp, #20]
   14bd4:	mov	r0, r8
   14bd8:	mov	r1, #1
   14bdc:	bl	10fe0 <__fprintf_chk@plt>
   14be0:	sub	sp, fp, #24
   14be4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14be8:	movw	r1, #32575	; 0x7f3f
   14bec:	movt	r1, #1
   14bf0:	mov	r0, #0
   14bf4:	mov	r2, #5
   14bf8:	bl	10eb4 <dcgettext@plt>
   14bfc:	mov	ip, r0
   14c00:	ldr	r3, [r7]
   14c04:	ldr	r0, [r7, #4]
   14c08:	ldr	r1, [r7, #8]
   14c0c:	ldr	r6, [r7, #12]
   14c10:	ldr	r5, [r7, #16]
   14c14:	ldr	r4, [r7, #20]
   14c18:	ldr	r2, [r7, #24]
   14c1c:	ldr	lr, [r7, #28]
   14c20:	ldr	r7, [r7, #32]
   14c24:	stm	sp, {r0, r1, r6}
   14c28:	str	r5, [sp, #12]
   14c2c:	str	r4, [sp, #16]
   14c30:	str	r2, [sp, #20]
   14c34:	str	lr, [sp, #24]
   14c38:	str	r7, [sp, #28]
   14c3c:	b	14c84 <__assert_fail@plt+0x3bfc>
   14c40:	movw	r1, #32527	; 0x7f0f
   14c44:	mov	r0, #0
   14c48:	mov	r2, #5
   14c4c:	movt	r1, #1
   14c50:	bl	10eb4 <dcgettext@plt>
   14c54:	mov	ip, r0
   14c58:	ldr	r3, [r7]
   14c5c:	ldmib	r7, {r0, r1, r6}
   14c60:	ldr	r5, [r7, #16]
   14c64:	ldr	r4, [r7, #20]
   14c68:	ldr	r2, [r7, #24]
   14c6c:	ldr	r7, [r7, #28]
   14c70:	stm	sp, {r0, r1, r6}
   14c74:	str	r5, [sp, #12]
   14c78:	str	r4, [sp, #16]
   14c7c:	str	r2, [sp, #20]
   14c80:	str	r7, [sp, #24]
   14c84:	mov	r0, r8
   14c88:	mov	r1, #1
   14c8c:	mov	r2, ip
   14c90:	bl	10fe0 <__fprintf_chk@plt>
   14c94:	sub	sp, fp, #24
   14c98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c9c:	push	{r4, sl, fp, lr}
   14ca0:	add	fp, sp, #8
   14ca4:	sub	sp, sp, #8
   14ca8:	ldr	ip, [fp, #8]
   14cac:	mov	lr, #0
   14cb0:	ldr	r4, [ip, lr, lsl #2]
   14cb4:	add	lr, lr, #1
   14cb8:	cmp	r4, #0
   14cbc:	bne	14cb0 <__assert_fail@plt+0x3c28>
   14cc0:	sub	r4, lr, #1
   14cc4:	str	ip, [sp]
   14cc8:	str	r4, [sp, #4]
   14ccc:	bl	14960 <__assert_fail@plt+0x38d8>
   14cd0:	sub	sp, fp, #8
   14cd4:	pop	{r4, sl, fp, pc}
   14cd8:	push	{fp, lr}
   14cdc:	mov	fp, sp
   14ce0:	sub	sp, sp, #48	; 0x30
   14ce4:	ldr	ip, [fp, #8]
   14ce8:	ldr	lr, [ip]
   14cec:	cmp	lr, #0
   14cf0:	str	lr, [sp, #8]
   14cf4:	beq	14d90 <__assert_fail@plt+0x3d08>
   14cf8:	ldr	lr, [ip, #4]
   14cfc:	cmp	lr, #0
   14d00:	str	lr, [sp, #12]
   14d04:	beq	14d98 <__assert_fail@plt+0x3d10>
   14d08:	ldr	lr, [ip, #8]
   14d0c:	cmp	lr, #0
   14d10:	str	lr, [sp, #16]
   14d14:	beq	14da0 <__assert_fail@plt+0x3d18>
   14d18:	ldr	lr, [ip, #12]
   14d1c:	cmp	lr, #0
   14d20:	str	lr, [sp, #20]
   14d24:	beq	14da8 <__assert_fail@plt+0x3d20>
   14d28:	ldr	lr, [ip, #16]
   14d2c:	cmp	lr, #0
   14d30:	str	lr, [sp, #24]
   14d34:	beq	14db0 <__assert_fail@plt+0x3d28>
   14d38:	ldr	lr, [ip, #20]
   14d3c:	cmp	lr, #0
   14d40:	str	lr, [sp, #28]
   14d44:	beq	14db8 <__assert_fail@plt+0x3d30>
   14d48:	ldr	lr, [ip, #24]
   14d4c:	cmp	lr, #0
   14d50:	str	lr, [sp, #32]
   14d54:	beq	14dc0 <__assert_fail@plt+0x3d38>
   14d58:	ldr	lr, [ip, #28]
   14d5c:	cmp	lr, #0
   14d60:	str	lr, [sp, #36]	; 0x24
   14d64:	beq	14dc8 <__assert_fail@plt+0x3d40>
   14d68:	ldr	lr, [ip, #32]
   14d6c:	cmp	lr, #0
   14d70:	str	lr, [sp, #40]	; 0x28
   14d74:	beq	14dd0 <__assert_fail@plt+0x3d48>
   14d78:	ldr	lr, [ip, #36]	; 0x24
   14d7c:	mov	ip, #10
   14d80:	cmp	lr, #0
   14d84:	str	lr, [sp, #44]	; 0x2c
   14d88:	movweq	ip, #9
   14d8c:	b	14dd4 <__assert_fail@plt+0x3d4c>
   14d90:	mov	ip, #0
   14d94:	b	14dd4 <__assert_fail@plt+0x3d4c>
   14d98:	mov	ip, #1
   14d9c:	b	14dd4 <__assert_fail@plt+0x3d4c>
   14da0:	mov	ip, #2
   14da4:	b	14dd4 <__assert_fail@plt+0x3d4c>
   14da8:	mov	ip, #3
   14dac:	b	14dd4 <__assert_fail@plt+0x3d4c>
   14db0:	mov	ip, #4
   14db4:	b	14dd4 <__assert_fail@plt+0x3d4c>
   14db8:	mov	ip, #5
   14dbc:	b	14dd4 <__assert_fail@plt+0x3d4c>
   14dc0:	mov	ip, #6
   14dc4:	b	14dd4 <__assert_fail@plt+0x3d4c>
   14dc8:	mov	ip, #7
   14dcc:	b	14dd4 <__assert_fail@plt+0x3d4c>
   14dd0:	mov	ip, #8
   14dd4:	add	lr, sp, #8
   14dd8:	str	ip, [sp, #4]
   14ddc:	str	lr, [sp]
   14de0:	bl	14960 <__assert_fail@plt+0x38d8>
   14de4:	mov	sp, fp
   14de8:	pop	{fp, pc}
   14dec:	push	{fp, lr}
   14df0:	mov	fp, sp
   14df4:	sub	sp, sp, #56	; 0x38
   14df8:	add	ip, fp, #8
   14dfc:	str	ip, [sp, #12]
   14e00:	ldr	lr, [fp, #8]
   14e04:	cmp	lr, #0
   14e08:	str	lr, [sp, #16]
   14e0c:	beq	14ea8 <__assert_fail@plt+0x3e20>
   14e10:	ldr	lr, [ip, #4]
   14e14:	cmp	lr, #0
   14e18:	str	lr, [sp, #20]
   14e1c:	beq	14eb0 <__assert_fail@plt+0x3e28>
   14e20:	ldr	lr, [ip, #8]
   14e24:	cmp	lr, #0
   14e28:	str	lr, [sp, #24]
   14e2c:	beq	14eb8 <__assert_fail@plt+0x3e30>
   14e30:	ldr	lr, [ip, #12]
   14e34:	cmp	lr, #0
   14e38:	str	lr, [sp, #28]
   14e3c:	beq	14ec0 <__assert_fail@plt+0x3e38>
   14e40:	ldr	lr, [ip, #16]
   14e44:	cmp	lr, #0
   14e48:	str	lr, [sp, #32]
   14e4c:	beq	14ec8 <__assert_fail@plt+0x3e40>
   14e50:	ldr	lr, [ip, #20]
   14e54:	cmp	lr, #0
   14e58:	str	lr, [sp, #36]	; 0x24
   14e5c:	beq	14ed0 <__assert_fail@plt+0x3e48>
   14e60:	ldr	lr, [ip, #24]
   14e64:	cmp	lr, #0
   14e68:	str	lr, [sp, #40]	; 0x28
   14e6c:	beq	14ed8 <__assert_fail@plt+0x3e50>
   14e70:	ldr	lr, [ip, #28]
   14e74:	cmp	lr, #0
   14e78:	str	lr, [sp, #44]	; 0x2c
   14e7c:	beq	14ee0 <__assert_fail@plt+0x3e58>
   14e80:	ldr	lr, [ip, #32]
   14e84:	cmp	lr, #0
   14e88:	str	lr, [sp, #48]	; 0x30
   14e8c:	beq	14ee8 <__assert_fail@plt+0x3e60>
   14e90:	ldr	lr, [ip, #36]	; 0x24
   14e94:	mov	ip, #10
   14e98:	cmp	lr, #0
   14e9c:	str	lr, [sp, #52]	; 0x34
   14ea0:	movweq	ip, #9
   14ea4:	b	14eec <__assert_fail@plt+0x3e64>
   14ea8:	mov	ip, #0
   14eac:	b	14eec <__assert_fail@plt+0x3e64>
   14eb0:	mov	ip, #1
   14eb4:	b	14eec <__assert_fail@plt+0x3e64>
   14eb8:	mov	ip, #2
   14ebc:	b	14eec <__assert_fail@plt+0x3e64>
   14ec0:	mov	ip, #3
   14ec4:	b	14eec <__assert_fail@plt+0x3e64>
   14ec8:	mov	ip, #4
   14ecc:	b	14eec <__assert_fail@plt+0x3e64>
   14ed0:	mov	ip, #5
   14ed4:	b	14eec <__assert_fail@plt+0x3e64>
   14ed8:	mov	ip, #6
   14edc:	b	14eec <__assert_fail@plt+0x3e64>
   14ee0:	mov	ip, #7
   14ee4:	b	14eec <__assert_fail@plt+0x3e64>
   14ee8:	mov	ip, #8
   14eec:	add	lr, sp, #16
   14ef0:	str	ip, [sp, #4]
   14ef4:	str	lr, [sp]
   14ef8:	bl	14960 <__assert_fail@plt+0x38d8>
   14efc:	mov	sp, fp
   14f00:	pop	{fp, pc}
   14f04:	push	{fp, lr}
   14f08:	mov	fp, sp
   14f0c:	movw	r0, #37196	; 0x914c
   14f10:	movt	r0, #2
   14f14:	ldr	r1, [r0]
   14f18:	movw	r0, #31271	; 0x7a27
   14f1c:	movt	r0, #1
   14f20:	bl	10e30 <fputs_unlocked@plt>
   14f24:	movw	r1, #32687	; 0x7faf
   14f28:	mov	r0, #0
   14f2c:	mov	r2, #5
   14f30:	movt	r1, #1
   14f34:	bl	10eb4 <dcgettext@plt>
   14f38:	movw	r2, #32707	; 0x7fc3
   14f3c:	mov	r1, r0
   14f40:	mov	r0, #1
   14f44:	movt	r2, #1
   14f48:	bl	10fc8 <__printf_chk@plt>
   14f4c:	movw	r1, #32729	; 0x7fd9
   14f50:	mov	r0, #0
   14f54:	mov	r2, #5
   14f58:	movt	r1, #1
   14f5c:	bl	10eb4 <dcgettext@plt>
   14f60:	movw	r2, #30781	; 0x783d
   14f64:	movw	r3, #31080	; 0x7968
   14f68:	mov	r1, r0
   14f6c:	mov	r0, #1
   14f70:	movt	r2, #1
   14f74:	movt	r3, #1
   14f78:	bl	10fc8 <__printf_chk@plt>
   14f7c:	movw	r1, #32749	; 0x7fed
   14f80:	mov	r0, #0
   14f84:	mov	r2, #5
   14f88:	movt	r1, #1
   14f8c:	bl	10eb4 <dcgettext@plt>
   14f90:	movw	r2, #32788	; 0x8014
   14f94:	mov	r1, r0
   14f98:	mov	r0, #1
   14f9c:	movt	r2, #1
   14fa0:	pop	{fp, lr}
   14fa4:	b	10fc8 <__printf_chk@plt>
   14fa8:	push	{r4, r5, r6, sl, fp, lr}
   14fac:	add	fp, sp, #16
   14fb0:	mov	r4, r2
   14fb4:	mov	r5, r1
   14fb8:	mov	r6, r0
   14fbc:	bl	170f8 <__assert_fail@plt+0x6070>
   14fc0:	cmp	r0, #0
   14fc4:	popne	{r4, r5, r6, sl, fp, pc}
   14fc8:	cmp	r6, #0
   14fcc:	beq	14fe0 <__assert_fail@plt+0x3f58>
   14fd0:	cmp	r5, #0
   14fd4:	cmpne	r4, #0
   14fd8:	bne	14fe0 <__assert_fail@plt+0x3f58>
   14fdc:	pop	{r4, r5, r6, sl, fp, pc}
   14fe0:	bl	1555c <__assert_fail@plt+0x44d4>
   14fe4:	push	{r4, r5, r6, sl, fp, lr}
   14fe8:	add	fp, sp, #16
   14fec:	mov	r4, r2
   14ff0:	mov	r5, r1
   14ff4:	mov	r6, r0
   14ff8:	bl	170f8 <__assert_fail@plt+0x6070>
   14ffc:	cmp	r0, #0
   15000:	popne	{r4, r5, r6, sl, fp, pc}
   15004:	cmp	r6, #0
   15008:	beq	1501c <__assert_fail@plt+0x3f94>
   1500c:	cmp	r5, #0
   15010:	cmpne	r4, #0
   15014:	bne	1501c <__assert_fail@plt+0x3f94>
   15018:	pop	{r4, r5, r6, sl, fp, pc}
   1501c:	bl	1555c <__assert_fail@plt+0x44d4>
   15020:	push	{fp, lr}
   15024:	mov	fp, sp
   15028:	bl	16f54 <__assert_fail@plt+0x5ecc>
   1502c:	cmp	r0, #0
   15030:	popne	{fp, pc}
   15034:	bl	1555c <__assert_fail@plt+0x44d4>
   15038:	push	{fp, lr}
   1503c:	mov	fp, sp
   15040:	bl	16f54 <__assert_fail@plt+0x5ecc>
   15044:	cmp	r0, #0
   15048:	popne	{fp, pc}
   1504c:	bl	1555c <__assert_fail@plt+0x44d4>
   15050:	push	{fp, lr}
   15054:	mov	fp, sp
   15058:	bl	16f54 <__assert_fail@plt+0x5ecc>
   1505c:	cmp	r0, #0
   15060:	popne	{fp, pc}
   15064:	bl	1555c <__assert_fail@plt+0x44d4>
   15068:	push	{r4, r5, fp, lr}
   1506c:	add	fp, sp, #8
   15070:	mov	r4, r1
   15074:	mov	r5, r0
   15078:	bl	16f84 <__assert_fail@plt+0x5efc>
   1507c:	cmp	r0, #0
   15080:	popne	{r4, r5, fp, pc}
   15084:	cmp	r5, #0
   15088:	beq	15098 <__assert_fail@plt+0x4010>
   1508c:	cmp	r4, #0
   15090:	bne	15098 <__assert_fail@plt+0x4010>
   15094:	pop	{r4, r5, fp, pc}
   15098:	bl	1555c <__assert_fail@plt+0x44d4>
   1509c:	push	{fp, lr}
   150a0:	mov	fp, sp
   150a4:	cmp	r1, #0
   150a8:	orreq	r1, r1, #1
   150ac:	bl	16f84 <__assert_fail@plt+0x5efc>
   150b0:	cmp	r0, #0
   150b4:	popne	{fp, pc}
   150b8:	bl	1555c <__assert_fail@plt+0x44d4>
   150bc:	push	{fp, lr}
   150c0:	mov	fp, sp
   150c4:	clz	r3, r2
   150c8:	lsr	ip, r3, #5
   150cc:	clz	r3, r1
   150d0:	lsr	r3, r3, #5
   150d4:	orrs	r3, r3, ip
   150d8:	movwne	r1, #1
   150dc:	movwne	r2, #1
   150e0:	bl	170f8 <__assert_fail@plt+0x6070>
   150e4:	cmp	r0, #0
   150e8:	popne	{fp, pc}
   150ec:	bl	1555c <__assert_fail@plt+0x44d4>
   150f0:	push	{fp, lr}
   150f4:	mov	fp, sp
   150f8:	mov	r2, r1
   150fc:	mov	r1, r0
   15100:	mov	r0, #0
   15104:	bl	170f8 <__assert_fail@plt+0x6070>
   15108:	cmp	r0, #0
   1510c:	popne	{fp, pc}
   15110:	bl	1555c <__assert_fail@plt+0x44d4>
   15114:	push	{fp, lr}
   15118:	mov	fp, sp
   1511c:	mov	r2, r1
   15120:	mov	r1, r0
   15124:	clz	r0, r2
   15128:	clz	r3, r1
   1512c:	lsr	r0, r0, #5
   15130:	lsr	r3, r3, #5
   15134:	orrs	r0, r3, r0
   15138:	mov	r0, #0
   1513c:	movwne	r1, #1
   15140:	movwne	r2, #1
   15144:	bl	170f8 <__assert_fail@plt+0x6070>
   15148:	cmp	r0, #0
   1514c:	popne	{fp, pc}
   15150:	bl	1555c <__assert_fail@plt+0x44d4>
   15154:	push	{r4, r5, r6, sl, fp, lr}
   15158:	add	fp, sp, #16
   1515c:	ldr	r5, [r1]
   15160:	mov	r4, r1
   15164:	mov	r6, r0
   15168:	cmp	r0, #0
   1516c:	beq	15184 <__assert_fail@plt+0x40fc>
   15170:	mov	r0, #1
   15174:	add	r0, r0, r5, lsr #1
   15178:	adds	r5, r5, r0
   1517c:	bcc	1518c <__assert_fail@plt+0x4104>
   15180:	b	151c8 <__assert_fail@plt+0x4140>
   15184:	cmp	r5, #0
   15188:	movweq	r5, #64	; 0x40
   1518c:	mov	r0, r6
   15190:	mov	r1, r5
   15194:	mov	r2, #1
   15198:	bl	170f8 <__assert_fail@plt+0x6070>
   1519c:	cmp	r5, #0
   151a0:	mov	r1, r5
   151a4:	movwne	r1, #1
   151a8:	cmp	r0, #0
   151ac:	bne	151c0 <__assert_fail@plt+0x4138>
   151b0:	clz	r2, r6
   151b4:	lsr	r2, r2, #5
   151b8:	orrs	r1, r2, r1
   151bc:	bne	151c8 <__assert_fail@plt+0x4140>
   151c0:	str	r5, [r4]
   151c4:	pop	{r4, r5, r6, sl, fp, pc}
   151c8:	bl	1555c <__assert_fail@plt+0x44d4>
   151cc:	push	{r4, r5, r6, r7, fp, lr}
   151d0:	add	fp, sp, #16
   151d4:	ldr	r5, [r1]
   151d8:	mov	r6, r2
   151dc:	mov	r4, r1
   151e0:	mov	r7, r0
   151e4:	cmp	r0, #0
   151e8:	beq	15200 <__assert_fail@plt+0x4178>
   151ec:	mov	r0, #1
   151f0:	add	r0, r0, r5, lsr #1
   151f4:	adds	r5, r5, r0
   151f8:	bcc	15218 <__assert_fail@plt+0x4190>
   151fc:	b	1524c <__assert_fail@plt+0x41c4>
   15200:	cmp	r5, #0
   15204:	bne	15218 <__assert_fail@plt+0x4190>
   15208:	mov	r0, #64	; 0x40
   1520c:	cmp	r6, #64	; 0x40
   15210:	udiv	r5, r0, r6
   15214:	addhi	r5, r5, #1
   15218:	mov	r0, r7
   1521c:	mov	r1, r5
   15220:	mov	r2, r6
   15224:	bl	170f8 <__assert_fail@plt+0x6070>
   15228:	cmp	r0, #0
   1522c:	bne	15244 <__assert_fail@plt+0x41bc>
   15230:	cmp	r7, #0
   15234:	beq	1524c <__assert_fail@plt+0x41c4>
   15238:	cmp	r6, #0
   1523c:	cmpne	r5, #0
   15240:	bne	1524c <__assert_fail@plt+0x41c4>
   15244:	str	r5, [r4]
   15248:	pop	{r4, r5, r6, r7, fp, pc}
   1524c:	bl	1555c <__assert_fail@plt+0x44d4>
   15250:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15254:	add	fp, sp, #24
   15258:	mov	r8, r1
   1525c:	ldr	r1, [r1]
   15260:	mov	r5, r0
   15264:	add	r0, r1, r1, asr #1
   15268:	cmp	r0, r1
   1526c:	mvnvs	r0, #-2147483648	; 0x80000000
   15270:	cmp	r0, r3
   15274:	mov	r7, r0
   15278:	movgt	r7, r3
   1527c:	cmn	r3, #1
   15280:	movle	r7, r0
   15284:	ldr	r0, [fp, #8]
   15288:	cmn	r0, #1
   1528c:	ble	152b4 <__assert_fail@plt+0x422c>
   15290:	cmp	r0, #0
   15294:	beq	15308 <__assert_fail@plt+0x4280>
   15298:	cmn	r7, #1
   1529c:	ble	152dc <__assert_fail@plt+0x4254>
   152a0:	mvn	r4, #-2147483648	; 0x80000000
   152a4:	udiv	r6, r4, r0
   152a8:	cmp	r6, r7
   152ac:	bge	15308 <__assert_fail@plt+0x4280>
   152b0:	b	15318 <__assert_fail@plt+0x4290>
   152b4:	cmn	r7, #1
   152b8:	ble	152f8 <__assert_fail@plt+0x4270>
   152bc:	cmn	r0, #1
   152c0:	beq	15308 <__assert_fail@plt+0x4280>
   152c4:	mov	r6, #-2147483648	; 0x80000000
   152c8:	mvn	r4, #-2147483648	; 0x80000000
   152cc:	sdiv	r6, r6, r0
   152d0:	cmp	r6, r7
   152d4:	bge	15308 <__assert_fail@plt+0x4280>
   152d8:	b	15318 <__assert_fail@plt+0x4290>
   152dc:	beq	15308 <__assert_fail@plt+0x4280>
   152e0:	mov	r6, #-2147483648	; 0x80000000
   152e4:	mvn	r4, #-2147483648	; 0x80000000
   152e8:	sdiv	r6, r6, r7
   152ec:	cmp	r6, r0
   152f0:	bge	15308 <__assert_fail@plt+0x4280>
   152f4:	b	15318 <__assert_fail@plt+0x4290>
   152f8:	mvn	r4, #-2147483648	; 0x80000000
   152fc:	sdiv	r6, r4, r0
   15300:	cmp	r7, r6
   15304:	blt	15318 <__assert_fail@plt+0x4290>
   15308:	mul	r6, r7, r0
   1530c:	mov	r4, #64	; 0x40
   15310:	cmp	r6, #63	; 0x3f
   15314:	bgt	15320 <__assert_fail@plt+0x4298>
   15318:	sdiv	r7, r4, r0
   1531c:	mul	r6, r7, r0
   15320:	cmp	r5, #0
   15324:	moveq	r4, #0
   15328:	streq	r4, [r8]
   1532c:	sub	r4, r7, r1
   15330:	cmp	r4, r2
   15334:	bge	153e0 <__assert_fail@plt+0x4358>
   15338:	add	r7, r1, r2
   1533c:	mov	r6, #0
   15340:	mov	r2, #0
   15344:	cmp	r7, r3
   15348:	movwgt	r6, #1
   1534c:	cmn	r3, #1
   15350:	movwgt	r2, #1
   15354:	cmp	r7, r1
   15358:	bvs	15414 <__assert_fail@plt+0x438c>
   1535c:	ands	r1, r2, r6
   15360:	bne	15414 <__assert_fail@plt+0x438c>
   15364:	cmn	r0, #1
   15368:	ble	15390 <__assert_fail@plt+0x4308>
   1536c:	cmp	r0, #0
   15370:	beq	153dc <__assert_fail@plt+0x4354>
   15374:	cmn	r7, #1
   15378:	ble	153b4 <__assert_fail@plt+0x432c>
   1537c:	mvn	r1, #-2147483648	; 0x80000000
   15380:	udiv	r1, r1, r0
   15384:	cmp	r1, r7
   15388:	bge	153dc <__assert_fail@plt+0x4354>
   1538c:	b	15414 <__assert_fail@plt+0x438c>
   15390:	cmn	r7, #1
   15394:	ble	153cc <__assert_fail@plt+0x4344>
   15398:	cmn	r0, #1
   1539c:	beq	153dc <__assert_fail@plt+0x4354>
   153a0:	mov	r1, #-2147483648	; 0x80000000
   153a4:	sdiv	r1, r1, r0
   153a8:	cmp	r1, r7
   153ac:	bge	153dc <__assert_fail@plt+0x4354>
   153b0:	b	15414 <__assert_fail@plt+0x438c>
   153b4:	beq	153dc <__assert_fail@plt+0x4354>
   153b8:	mov	r1, #-2147483648	; 0x80000000
   153bc:	sdiv	r1, r1, r7
   153c0:	cmp	r1, r0
   153c4:	bge	153dc <__assert_fail@plt+0x4354>
   153c8:	b	15414 <__assert_fail@plt+0x438c>
   153cc:	mvn	r1, #-2147483648	; 0x80000000
   153d0:	sdiv	r1, r1, r0
   153d4:	cmp	r7, r1
   153d8:	blt	15414 <__assert_fail@plt+0x438c>
   153dc:	mul	r6, r7, r0
   153e0:	mov	r0, r5
   153e4:	mov	r1, r6
   153e8:	bl	16f84 <__assert_fail@plt+0x5efc>
   153ec:	cmp	r6, #0
   153f0:	movwne	r6, #1
   153f4:	cmp	r0, #0
   153f8:	bne	1540c <__assert_fail@plt+0x4384>
   153fc:	clz	r1, r5
   15400:	lsr	r1, r1, #5
   15404:	orrs	r1, r1, r6
   15408:	bne	15414 <__assert_fail@plt+0x438c>
   1540c:	str	r7, [r8]
   15410:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15414:	bl	1555c <__assert_fail@plt+0x44d4>
   15418:	push	{fp, lr}
   1541c:	mov	fp, sp
   15420:	mov	r1, #1
   15424:	bl	16f00 <__assert_fail@plt+0x5e78>
   15428:	cmp	r0, #0
   1542c:	popne	{fp, pc}
   15430:	bl	1555c <__assert_fail@plt+0x44d4>
   15434:	push	{fp, lr}
   15438:	mov	fp, sp
   1543c:	bl	16f00 <__assert_fail@plt+0x5e78>
   15440:	cmp	r0, #0
   15444:	popne	{fp, pc}
   15448:	bl	1555c <__assert_fail@plt+0x44d4>
   1544c:	push	{fp, lr}
   15450:	mov	fp, sp
   15454:	mov	r1, #1
   15458:	bl	16f00 <__assert_fail@plt+0x5e78>
   1545c:	cmp	r0, #0
   15460:	popne	{fp, pc}
   15464:	bl	1555c <__assert_fail@plt+0x44d4>
   15468:	push	{fp, lr}
   1546c:	mov	fp, sp
   15470:	bl	16f00 <__assert_fail@plt+0x5e78>
   15474:	cmp	r0, #0
   15478:	popne	{fp, pc}
   1547c:	bl	1555c <__assert_fail@plt+0x44d4>
   15480:	push	{r4, r5, fp, lr}
   15484:	add	fp, sp, #8
   15488:	mov	r5, r0
   1548c:	mov	r0, r1
   15490:	mov	r4, r1
   15494:	bl	16f54 <__assert_fail@plt+0x5ecc>
   15498:	cmp	r0, #0
   1549c:	beq	154b0 <__assert_fail@plt+0x4428>
   154a0:	mov	r1, r5
   154a4:	mov	r2, r4
   154a8:	pop	{r4, r5, fp, lr}
   154ac:	b	10e90 <memcpy@plt>
   154b0:	bl	1555c <__assert_fail@plt+0x44d4>
   154b4:	push	{r4, r5, fp, lr}
   154b8:	add	fp, sp, #8
   154bc:	mov	r5, r0
   154c0:	mov	r0, r1
   154c4:	mov	r4, r1
   154c8:	bl	16f54 <__assert_fail@plt+0x5ecc>
   154cc:	cmp	r0, #0
   154d0:	beq	154e4 <__assert_fail@plt+0x445c>
   154d4:	mov	r1, r5
   154d8:	mov	r2, r4
   154dc:	pop	{r4, r5, fp, lr}
   154e0:	b	10e90 <memcpy@plt>
   154e4:	bl	1555c <__assert_fail@plt+0x44d4>
   154e8:	push	{r4, r5, fp, lr}
   154ec:	add	fp, sp, #8
   154f0:	mov	r5, r0
   154f4:	add	r0, r1, #1
   154f8:	mov	r4, r1
   154fc:	bl	16f54 <__assert_fail@plt+0x5ecc>
   15500:	cmp	r0, #0
   15504:	beq	15520 <__assert_fail@plt+0x4498>
   15508:	mov	r1, #0
   1550c:	mov	r2, r4
   15510:	strb	r1, [r0, r4]
   15514:	mov	r1, r5
   15518:	pop	{r4, r5, fp, lr}
   1551c:	b	10e90 <memcpy@plt>
   15520:	bl	1555c <__assert_fail@plt+0x44d4>
   15524:	push	{r4, r5, fp, lr}
   15528:	add	fp, sp, #8
   1552c:	mov	r4, r0
   15530:	bl	10f8c <strlen@plt>
   15534:	add	r5, r0, #1
   15538:	mov	r0, r5
   1553c:	bl	16f54 <__assert_fail@plt+0x5ecc>
   15540:	cmp	r0, #0
   15544:	beq	15558 <__assert_fail@plt+0x44d0>
   15548:	mov	r1, r4
   1554c:	mov	r2, r5
   15550:	pop	{r4, r5, fp, lr}
   15554:	b	10e90 <memcpy@plt>
   15558:	bl	1555c <__assert_fail@plt+0x44d4>
   1555c:	push	{fp, lr}
   15560:	mov	fp, sp
   15564:	movw	r0, #37100	; 0x90ec
   15568:	movw	r1, #32864	; 0x8060
   1556c:	mov	r2, #5
   15570:	movt	r0, #2
   15574:	movt	r1, #1
   15578:	ldr	r4, [r0]
   1557c:	mov	r0, #0
   15580:	bl	10eb4 <dcgettext@plt>
   15584:	movw	r2, #30760	; 0x7828
   15588:	mov	r3, r0
   1558c:	mov	r0, r4
   15590:	mov	r1, #0
   15594:	movt	r2, #1
   15598:	bl	10f20 <error@plt>
   1559c:	bl	1107c <abort@plt>
   155a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155a4:	add	fp, sp, #28
   155a8:	sub	sp, sp, #36	; 0x24
   155ac:	cmp	r2, #37	; 0x25
   155b0:	bcs	16ee0 <__assert_fail@plt+0x5e58>
   155b4:	ldr	r8, [fp, #8]
   155b8:	mov	r9, r3
   155bc:	mov	r6, r2
   155c0:	mov	r7, r1
   155c4:	mov	r4, r0
   155c8:	bl	10fa4 <__errno_location@plt>
   155cc:	cmp	r7, #0
   155d0:	add	sl, sp, #32
   155d4:	mov	r5, r0
   155d8:	mov	r0, #0
   155dc:	mov	r2, r6
   155e0:	mov	r3, #0
   155e4:	movne	sl, r7
   155e8:	str	r0, [r5]
   155ec:	mov	r0, r4
   155f0:	mov	r1, sl
   155f4:	bl	11040 <__strtoll_internal@plt>
   155f8:	mov	r7, r1
   155fc:	ldr	r1, [sl]
   15600:	cmp	r1, r4
   15604:	beq	15640 <__assert_fail@plt+0x45b8>
   15608:	mov	r6, r0
   1560c:	ldr	r0, [r5]
   15610:	cmp	r0, #0
   15614:	beq	157cc <__assert_fail@plt+0x4744>
   15618:	mov	r5, #4
   1561c:	cmp	r0, #34	; 0x22
   15620:	bne	15a24 <__assert_fail@plt+0x499c>
   15624:	mov	r5, #1
   15628:	cmp	r8, #0
   1562c:	beq	157d8 <__assert_fail@plt+0x4750>
   15630:	ldrb	r4, [r1]
   15634:	cmp	r4, #0
   15638:	bne	15688 <__assert_fail@plt+0x4600>
   1563c:	b	157d8 <__assert_fail@plt+0x4750>
   15640:	mov	r5, #4
   15644:	cmp	r8, #0
   15648:	beq	15a24 <__assert_fail@plt+0x499c>
   1564c:	mov	r6, r1
   15650:	ldrb	r1, [r4]
   15654:	cmp	r1, #0
   15658:	beq	15a24 <__assert_fail@plt+0x499c>
   1565c:	mov	r0, r8
   15660:	bl	10f98 <strchr@plt>
   15664:	cmp	r0, #0
   15668:	beq	15a24 <__assert_fail@plt+0x499c>
   1566c:	mov	r1, r6
   15670:	mov	r5, #0
   15674:	mov	r6, #1
   15678:	mov	r7, #0
   1567c:	ldrb	r4, [r1]
   15680:	cmp	r4, #0
   15684:	beq	157d8 <__assert_fail@plt+0x4750>
   15688:	str	r1, [sp, #20]
   1568c:	mov	r0, r8
   15690:	mov	r1, r4
   15694:	bl	10f98 <strchr@plt>
   15698:	cmp	r0, #0
   1569c:	beq	15a1c <__assert_fail@plt+0x4994>
   156a0:	sub	r0, r4, #69	; 0x45
   156a4:	mov	r1, #1
   156a8:	mov	r3, #0
   156ac:	mov	r2, #1024	; 0x400
   156b0:	cmp	r0, #47	; 0x2f
   156b4:	str	r1, [sp, #16]
   156b8:	bhi	157f0 <__assert_fail@plt+0x4768>
   156bc:	add	r1, pc, #0
   156c0:	ldr	pc, [r1, r0, lsl #2]
   156c4:	andeq	r5, r1, r4, lsl #15
   156c8:	strdeq	r5, [r1], -r0
   156cc:	andeq	r5, r1, r4, lsl #15
   156d0:	strdeq	r5, [r1], -r0
   156d4:	strdeq	r5, [r1], -r0
   156d8:	strdeq	r5, [r1], -r0
   156dc:	andeq	r5, r1, r4, lsl #15
   156e0:	strdeq	r5, [r1], -r0
   156e4:	andeq	r5, r1, r4, lsl #15
   156e8:	strdeq	r5, [r1], -r0
   156ec:	strdeq	r5, [r1], -r0
   156f0:	andeq	r5, r1, r4, lsl #15
   156f4:	strdeq	r5, [r1], -r0
   156f8:	strdeq	r5, [r1], -r0
   156fc:	strdeq	r5, [r1], -r0
   15700:	andeq	r5, r1, r4, lsl #15
   15704:	strdeq	r5, [r1], -r0
   15708:	strdeq	r5, [r1], -r0
   1570c:	strdeq	r5, [r1], -r0
   15710:	strdeq	r5, [r1], -r0
   15714:	andeq	r5, r1, r4, lsl #15
   15718:	andeq	r5, r1, r4, lsl #15
   1571c:	strdeq	r5, [r1], -r0
   15720:	strdeq	r5, [r1], -r0
   15724:	strdeq	r5, [r1], -r0
   15728:	strdeq	r5, [r1], -r0
   1572c:	strdeq	r5, [r1], -r0
   15730:	strdeq	r5, [r1], -r0
   15734:	strdeq	r5, [r1], -r0
   15738:	strdeq	r5, [r1], -r0
   1573c:	strdeq	r5, [r1], -r0
   15740:	strdeq	r5, [r1], -r0
   15744:	strdeq	r5, [r1], -r0
   15748:	strdeq	r5, [r1], -r0
   1574c:	andeq	r5, r1, r4, lsl #15
   15750:	strdeq	r5, [r1], -r0
   15754:	strdeq	r5, [r1], -r0
   15758:	strdeq	r5, [r1], -r0
   1575c:	andeq	r5, r1, r4, lsl #15
   15760:	strdeq	r5, [r1], -r0
   15764:	andeq	r5, r1, r4, lsl #15
   15768:	strdeq	r5, [r1], -r0
   1576c:	strdeq	r5, [r1], -r0
   15770:	strdeq	r5, [r1], -r0
   15774:	strdeq	r5, [r1], -r0
   15778:	strdeq	r5, [r1], -r0
   1577c:	strdeq	r5, [r1], -r0
   15780:	andeq	r5, r1, r4, lsl #15
   15784:	mov	r0, r8
   15788:	mov	r1, #48	; 0x30
   1578c:	bl	10f98 <strchr@plt>
   15790:	cmp	r0, #0
   15794:	beq	157e8 <__assert_fail@plt+0x4760>
   15798:	ldr	r1, [sp, #20]
   1579c:	ldrb	r0, [r1, #1]
   157a0:	cmp	r0, #66	; 0x42
   157a4:	cmpne	r0, #68	; 0x44
   157a8:	bne	15924 <__assert_fail@plt+0x489c>
   157ac:	mov	r0, #2
   157b0:	mov	r2, #1000	; 0x3e8
   157b4:	mov	r3, #0
   157b8:	str	r0, [sp, #16]
   157bc:	sub	r0, r4, #66	; 0x42
   157c0:	cmp	r0, #53	; 0x35
   157c4:	bls	157fc <__assert_fail@plt+0x4774>
   157c8:	b	15a1c <__assert_fail@plt+0x4994>
   157cc:	mov	r5, r0
   157d0:	cmp	r8, #0
   157d4:	bne	15630 <__assert_fail@plt+0x45a8>
   157d8:	strd	r6, [r9]
   157dc:	mov	r0, r5
   157e0:	sub	sp, fp, #28
   157e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157e8:	mov	r3, #0
   157ec:	mov	r2, #1024	; 0x400
   157f0:	sub	r0, r4, #66	; 0x42
   157f4:	cmp	r0, #53	; 0x35
   157f8:	bhi	15a1c <__assert_fail@plt+0x4994>
   157fc:	add	r1, pc, #8
   15800:	str	r3, [sp, #28]
   15804:	str	r2, [sp, #24]
   15808:	ldr	pc, [r1, r0, lsl #2]
   1580c:	andeq	r5, r1, r4, ror sl
   15810:	andeq	r5, r1, ip, lsl sl
   15814:	andeq	r5, r1, ip, lsl sl
   15818:	andeq	r5, r1, r8, lsl #21
   1581c:	andeq	r5, r1, ip, lsl sl
   15820:	andeq	r5, r1, r4, ror #17
   15824:	andeq	r5, r1, ip, lsl sl
   15828:	andeq	r5, r1, ip, lsl sl
   1582c:	andeq	r5, r1, ip, lsl sl
   15830:	andeq	r5, r1, r8, asr r9
   15834:	andeq	r5, r1, ip, lsl sl
   15838:	andeq	r5, r1, r8, lsl #19
   1583c:	andeq	r5, r1, ip, lsl sl
   15840:	andeq	r5, r1, ip, lsl sl
   15844:	andeq	r5, r1, ip, asr #21
   15848:	andeq	r5, r1, ip, lsl sl
   1584c:	andeq	r5, r1, ip, lsl sl
   15850:	andeq	r5, r1, ip, lsl sl
   15854:	andeq	r5, r1, r8, asr #19
   15858:	andeq	r5, r1, ip, lsl sl
   1585c:	andeq	r5, r1, ip, lsl sl
   15860:	andeq	r5, r1, ip, lsl sl
   15864:	andeq	r5, r1, ip, lsl sl
   15868:	andeq	r5, r1, r0, lsl fp
   1586c:	andeq	r5, r1, r0, lsr sl
   15870:	andeq	r5, r1, ip, lsl sl
   15874:	andeq	r5, r1, ip, lsl sl
   15878:	andeq	r5, r1, ip, lsl sl
   1587c:	andeq	r5, r1, ip, lsl sl
   15880:	andeq	r5, r1, ip, lsl sl
   15884:	andeq	r5, r1, ip, lsl sl
   15888:	andeq	r5, r1, ip, lsl sl
   1588c:	andeq	r5, r1, r4, asr fp
   15890:	andeq	r6, r1, ip, asr #21
   15894:	andeq	r5, r1, ip, lsl sl
   15898:	andeq	r5, r1, ip, lsl sl
   1589c:	andeq	r5, r1, ip, lsl sl
   158a0:	andeq	r5, r1, r4, ror #17
   158a4:	andeq	r5, r1, ip, lsl sl
   158a8:	andeq	r5, r1, ip, lsl sl
   158ac:	andeq	r5, r1, ip, lsl sl
   158b0:	andeq	r5, r1, r8, asr r9
   158b4:	andeq	r5, r1, ip, lsl sl
   158b8:	andeq	r5, r1, r8, lsl #19
   158bc:	andeq	r5, r1, ip, lsl sl
   158c0:	andeq	r5, r1, ip, lsl sl
   158c4:	andeq	r5, r1, ip, lsl sl
   158c8:	andeq	r5, r1, ip, lsl sl
   158cc:	andeq	r5, r1, ip, lsl sl
   158d0:	andeq	r5, r1, ip, lsl sl
   158d4:	andeq	r5, r1, r8, asr #19
   158d8:	andeq	r5, r1, ip, lsl sl
   158dc:	andeq	r5, r1, ip, lsl sl
   158e0:	andeq	r5, r1, r8, ror #22
   158e4:	cmn	r7, #1
   158e8:	str	r9, [sp, #12]
   158ec:	ble	15b7c <__assert_fail@plt+0x4af4>
   158f0:	ldr	r3, [sp, #28]
   158f4:	mvn	r0, #0
   158f8:	mvn	r1, #-2147483648	; 0x80000000
   158fc:	mvn	r8, #0
   15900:	mvn	r9, #-2147483648	; 0x80000000
   15904:	bl	17314 <__assert_fail@plt+0x628c>
   15908:	ldr	r2, [sp, #24]
   1590c:	ldr	r3, [sp, #28]
   15910:	subs	r0, r0, r6
   15914:	mov	r4, #1
   15918:	sbcs	r0, r1, r7
   1591c:	bge	15bbc <__assert_fail@plt+0x4b34>
   15920:	b	15bd4 <__assert_fail@plt+0x4b4c>
   15924:	cmp	r0, #105	; 0x69
   15928:	mov	r3, #0
   1592c:	bne	15a0c <__assert_fail@plt+0x4984>
   15930:	ldrb	r0, [r1, #2]
   15934:	mov	r1, #1
   15938:	mov	r2, #1024	; 0x400
   1593c:	cmp	r0, #66	; 0x42
   15940:	movweq	r1, #3
   15944:	str	r1, [sp, #16]
   15948:	sub	r0, r4, #66	; 0x42
   1594c:	cmp	r0, #53	; 0x35
   15950:	bls	157fc <__assert_fail@plt+0x4774>
   15954:	b	15a1c <__assert_fail@plt+0x4994>
   15958:	cmn	r7, #1
   1595c:	ble	15c10 <__assert_fail@plt+0x4b88>
   15960:	ldr	r3, [sp, #28]
   15964:	mvn	r0, #0
   15968:	mvn	r1, #-2147483648	; 0x80000000
   1596c:	bl	17314 <__assert_fail@plt+0x628c>
   15970:	ldr	r2, [sp, #24]
   15974:	ldr	r3, [sp, #28]
   15978:	subs	r0, r0, r6
   1597c:	sbcs	r0, r1, r7
   15980:	bge	15c44 <__assert_fail@plt+0x4bbc>
   15984:	b	16354 <__assert_fail@plt+0x52cc>
   15988:	cmn	r7, #1
   1598c:	str	r9, [sp, #12]
   15990:	ble	15c58 <__assert_fail@plt+0x4bd0>
   15994:	ldr	r3, [sp, #28]
   15998:	mvn	r0, #0
   1599c:	mvn	r1, #-2147483648	; 0x80000000
   159a0:	mvn	r8, #0
   159a4:	mvn	r9, #-2147483648	; 0x80000000
   159a8:	bl	17314 <__assert_fail@plt+0x628c>
   159ac:	ldr	r2, [sp, #24]
   159b0:	ldr	r3, [sp, #28]
   159b4:	subs	r0, r0, r6
   159b8:	mov	r4, #1
   159bc:	sbcs	r0, r1, r7
   159c0:	bge	15c98 <__assert_fail@plt+0x4c10>
   159c4:	b	15cb0 <__assert_fail@plt+0x4c28>
   159c8:	cmn	r7, #1
   159cc:	str	r9, [sp, #12]
   159d0:	ble	15ce8 <__assert_fail@plt+0x4c60>
   159d4:	ldr	r3, [sp, #28]
   159d8:	mvn	r0, #0
   159dc:	mvn	r1, #-2147483648	; 0x80000000
   159e0:	mvn	r9, #-2147483648	; 0x80000000
   159e4:	str	r0, [sp, #8]
   159e8:	mvn	r0, #0
   159ec:	bl	17314 <__assert_fail@plt+0x628c>
   159f0:	ldr	r2, [sp, #24]
   159f4:	ldr	r3, [sp, #28]
   159f8:	subs	r0, r0, r6
   159fc:	mov	r4, #1
   15a00:	sbcs	r0, r1, r7
   15a04:	bge	15d2c <__assert_fail@plt+0x4ca4>
   15a08:	b	15d48 <__assert_fail@plt+0x4cc0>
   15a0c:	mov	r2, #1024	; 0x400
   15a10:	sub	r0, r4, #66	; 0x42
   15a14:	cmp	r0, #53	; 0x35
   15a18:	bls	157fc <__assert_fail@plt+0x4774>
   15a1c:	orr	r5, r5, #2
   15a20:	strd	r6, [r9]
   15a24:	mov	r0, r5
   15a28:	sub	sp, fp, #28
   15a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a30:	cmp	r7, #0
   15a34:	str	r9, [sp, #12]
   15a38:	bmi	16030 <__assert_fail@plt+0x4fa8>
   15a3c:	ldr	r3, [sp, #28]
   15a40:	mvn	r0, #0
   15a44:	mvn	r1, #-2147483648	; 0x80000000
   15a48:	mvn	r9, #-2147483648	; 0x80000000
   15a4c:	str	r0, [sp, #8]
   15a50:	mvn	r0, #0
   15a54:	bl	17314 <__assert_fail@plt+0x628c>
   15a58:	ldr	r2, [sp, #24]
   15a5c:	ldr	r3, [sp, #28]
   15a60:	subs	r0, r0, r6
   15a64:	mov	r4, #1
   15a68:	sbcs	r0, r1, r7
   15a6c:	bge	16074 <__assert_fail@plt+0x4fec>
   15a70:	b	16090 <__assert_fail@plt+0x5008>
   15a74:	cmn	r7, #1
   15a78:	ble	160cc <__assert_fail@plt+0x5044>
   15a7c:	cmp	r7, #2097152	; 0x200000
   15a80:	blt	160fc <__assert_fail@plt+0x5074>
   15a84:	b	16354 <__assert_fail@plt+0x52cc>
   15a88:	cmp	r7, #0
   15a8c:	str	r9, [sp, #12]
   15a90:	bmi	1610c <__assert_fail@plt+0x5084>
   15a94:	ldr	r3, [sp, #28]
   15a98:	mvn	r0, #0
   15a9c:	mvn	r1, #-2147483648	; 0x80000000
   15aa0:	mvn	r9, #-2147483648	; 0x80000000
   15aa4:	str	r0, [sp, #8]
   15aa8:	mvn	r0, #0
   15aac:	bl	17314 <__assert_fail@plt+0x628c>
   15ab0:	ldr	r2, [sp, #24]
   15ab4:	ldr	r3, [sp, #28]
   15ab8:	subs	r0, r0, r6
   15abc:	mov	r4, #1
   15ac0:	sbcs	r0, r1, r7
   15ac4:	bge	16150 <__assert_fail@plt+0x50c8>
   15ac8:	b	1616c <__assert_fail@plt+0x50e4>
   15acc:	cmp	r7, #0
   15ad0:	str	r9, [sp, #12]
   15ad4:	bmi	161a8 <__assert_fail@plt+0x5120>
   15ad8:	ldr	r3, [sp, #28]
   15adc:	mvn	r0, #0
   15ae0:	mvn	r1, #-2147483648	; 0x80000000
   15ae4:	mvn	r8, #-2147483648	; 0x80000000
   15ae8:	str	r0, [sp, #8]
   15aec:	mvn	r0, #0
   15af0:	bl	17314 <__assert_fail@plt+0x628c>
   15af4:	ldr	r2, [sp, #24]
   15af8:	ldr	r3, [sp, #28]
   15afc:	subs	r0, r0, r6
   15b00:	mov	r4, #1
   15b04:	sbcs	r0, r1, r7
   15b08:	bge	161ec <__assert_fail@plt+0x5164>
   15b0c:	b	16208 <__assert_fail@plt+0x5180>
   15b10:	cmp	r7, #0
   15b14:	str	r9, [sp, #12]
   15b18:	bmi	16244 <__assert_fail@plt+0x51bc>
   15b1c:	ldr	r3, [sp, #28]
   15b20:	mvn	r0, #0
   15b24:	mvn	r1, #-2147483648	; 0x80000000
   15b28:	mvn	r9, #-2147483648	; 0x80000000
   15b2c:	str	r0, [sp, #8]
   15b30:	mvn	r0, #0
   15b34:	bl	17314 <__assert_fail@plt+0x628c>
   15b38:	ldr	r2, [sp, #24]
   15b3c:	ldr	r3, [sp, #28]
   15b40:	subs	r0, r0, r6
   15b44:	mov	r4, #1
   15b48:	sbcs	r0, r1, r7
   15b4c:	bge	16288 <__assert_fail@plt+0x5200>
   15b50:	b	162a4 <__assert_fail@plt+0x521c>
   15b54:	cmn	r7, #1
   15b58:	ble	162e4 <__assert_fail@plt+0x525c>
   15b5c:	cmp	r7, #4194304	; 0x400000
   15b60:	blt	16314 <__assert_fail@plt+0x528c>
   15b64:	b	16354 <__assert_fail@plt+0x52cc>
   15b68:	cmn	r7, #1
   15b6c:	ble	16324 <__assert_fail@plt+0x529c>
   15b70:	cmp	r7, #1073741824	; 0x40000000
   15b74:	bge	16354 <__assert_fail@plt+0x52cc>
   15b78:	b	16374 <__assert_fail@plt+0x52ec>
   15b7c:	and	r0, r6, r7
   15b80:	cmn	r0, #1
   15b84:	beq	15bbc <__assert_fail@plt+0x4b34>
   15b88:	mov	r0, #0
   15b8c:	mov	r1, #-2147483648	; 0x80000000
   15b90:	mov	r2, r6
   15b94:	mov	r3, r7
   15b98:	mov	r8, #0
   15b9c:	mov	r9, #-2147483648	; 0x80000000
   15ba0:	bl	17240 <__assert_fail@plt+0x61b8>
   15ba4:	ldr	r2, [sp, #24]
   15ba8:	ldr	r3, [sp, #28]
   15bac:	mov	r4, #1
   15bb0:	subs	r0, r0, r2
   15bb4:	sbcs	r0, r1, r3
   15bb8:	blt	15d84 <__assert_fail@plt+0x4cfc>
   15bbc:	umull	r8, r0, r6, r2
   15bc0:	mov	r4, #0
   15bc4:	mla	r0, r6, r3, r0
   15bc8:	mla	r9, r7, r2, r0
   15bcc:	cmp	r9, #0
   15bd0:	bmi	15d84 <__assert_fail@plt+0x4cfc>
   15bd4:	ldr	r3, [sp, #28]
   15bd8:	mvn	r0, #-2147483648	; 0x80000000
   15bdc:	mvn	r1, #-2147483648	; 0x80000000
   15be0:	mov	r6, r4
   15be4:	mvn	r4, #0
   15be8:	str	r0, [sp, #8]
   15bec:	mvn	r0, #0
   15bf0:	bl	17314 <__assert_fail@plt+0x628c>
   15bf4:	ldr	r2, [sp, #24]
   15bf8:	ldr	r3, [sp, #28]
   15bfc:	subs	r0, r0, r8
   15c00:	mov	r7, #1
   15c04:	sbcs	r0, r1, r9
   15c08:	bge	15dc0 <__assert_fail@plt+0x4d38>
   15c0c:	b	15ddc <__assert_fail@plt+0x4d54>
   15c10:	and	r0, r6, r7
   15c14:	cmn	r0, #1
   15c18:	beq	15c44 <__assert_fail@plt+0x4bbc>
   15c1c:	mov	r0, #0
   15c20:	mov	r1, #-2147483648	; 0x80000000
   15c24:	mov	r2, r6
   15c28:	mov	r3, r7
   15c2c:	bl	17240 <__assert_fail@plt+0x61b8>
   15c30:	ldr	r2, [sp, #24]
   15c34:	ldr	r3, [sp, #28]
   15c38:	subs	r0, r0, r2
   15c3c:	sbcs	r0, r1, r3
   15c40:	blt	16354 <__assert_fail@plt+0x52cc>
   15c44:	umull	r0, r1, r6, r2
   15c48:	mla	r1, r6, r3, r1
   15c4c:	mla	r7, r7, r2, r1
   15c50:	mov	r6, r0
   15c54:	b	16acc <__assert_fail@plt+0x5a44>
   15c58:	and	r0, r6, r7
   15c5c:	cmn	r0, #1
   15c60:	beq	15c98 <__assert_fail@plt+0x4c10>
   15c64:	mov	r0, #0
   15c68:	mov	r1, #-2147483648	; 0x80000000
   15c6c:	mov	r2, r6
   15c70:	mov	r3, r7
   15c74:	mov	r8, #0
   15c78:	mov	r9, #-2147483648	; 0x80000000
   15c7c:	bl	17240 <__assert_fail@plt+0x61b8>
   15c80:	ldr	r2, [sp, #24]
   15c84:	ldr	r3, [sp, #28]
   15c88:	mov	r4, #1
   15c8c:	subs	r0, r0, r2
   15c90:	sbcs	r0, r1, r3
   15c94:	blt	15e70 <__assert_fail@plt+0x4de8>
   15c98:	umull	r8, r0, r6, r2
   15c9c:	mov	r4, #0
   15ca0:	mla	r0, r6, r3, r0
   15ca4:	mla	r9, r7, r2, r0
   15ca8:	cmp	r9, #0
   15cac:	bmi	15e70 <__assert_fail@plt+0x4de8>
   15cb0:	ldr	r3, [sp, #28]
   15cb4:	mvn	r0, #0
   15cb8:	mvn	r1, #-2147483648	; 0x80000000
   15cbc:	str	r4, [sp, #8]
   15cc0:	mvn	r6, #0
   15cc4:	mvn	r7, #-2147483648	; 0x80000000
   15cc8:	bl	17314 <__assert_fail@plt+0x628c>
   15ccc:	ldr	r4, [sp, #24]
   15cd0:	ldr	r3, [sp, #28]
   15cd4:	subs	r0, r0, r8
   15cd8:	mov	r2, #1
   15cdc:	sbcs	r0, r1, r9
   15ce0:	bge	15ea8 <__assert_fail@plt+0x4e20>
   15ce4:	b	15fe0 <__assert_fail@plt+0x4f58>
   15ce8:	and	r0, r6, r7
   15cec:	cmn	r0, #1
   15cf0:	beq	15d2c <__assert_fail@plt+0x4ca4>
   15cf4:	mov	r0, #0
   15cf8:	mov	r1, #-2147483648	; 0x80000000
   15cfc:	mov	r2, r6
   15d00:	mov	r3, r7
   15d04:	bl	17240 <__assert_fail@plt+0x61b8>
   15d08:	ldr	r2, [sp, #24]
   15d0c:	ldr	r3, [sp, #28]
   15d10:	mov	r4, #1
   15d14:	mov	r9, #-2147483648	; 0x80000000
   15d18:	subs	r0, r0, r2
   15d1c:	sbcs	r0, r1, r3
   15d20:	mov	r0, #0
   15d24:	str	r0, [sp, #8]
   15d28:	blt	15ebc <__assert_fail@plt+0x4e34>
   15d2c:	umull	r1, r0, r6, r2
   15d30:	mov	r4, #0
   15d34:	mla	r0, r6, r3, r0
   15d38:	mla	r9, r7, r2, r0
   15d3c:	str	r1, [sp, #8]
   15d40:	cmp	r9, #0
   15d44:	bmi	15ebc <__assert_fail@plt+0x4e34>
   15d48:	ldr	r3, [sp, #28]
   15d4c:	mvn	r0, #0
   15d50:	mvn	r1, #-2147483648	; 0x80000000
   15d54:	str	r4, [sp, #4]
   15d58:	mvn	r6, #0
   15d5c:	mvn	r8, #-2147483648	; 0x80000000
   15d60:	bl	17314 <__assert_fail@plt+0x628c>
   15d64:	ldr	r4, [sp, #8]
   15d68:	ldr	r2, [sp, #24]
   15d6c:	ldr	r3, [sp, #28]
   15d70:	mov	r7, #1
   15d74:	subs	r0, r0, r4
   15d78:	sbcs	r0, r1, r9
   15d7c:	bge	15ef8 <__assert_fail@plt+0x4e70>
   15d80:	b	15f10 <__assert_fail@plt+0x4e88>
   15d84:	mov	r0, #-2147483648	; 0x80000000
   15d88:	mov	r1, #-2147483648	; 0x80000000
   15d8c:	mov	r2, r8
   15d90:	mov	r3, r9
   15d94:	mov	r6, r4
   15d98:	mov	r4, #0
   15d9c:	str	r0, [sp, #8]
   15da0:	mov	r0, #0
   15da4:	bl	17240 <__assert_fail@plt+0x61b8>
   15da8:	ldr	r2, [sp, #24]
   15dac:	ldr	r3, [sp, #28]
   15db0:	mov	r7, #1
   15db4:	subs	r0, r0, r2
   15db8:	sbcs	r0, r1, r3
   15dbc:	blt	15e30 <__assert_fail@plt+0x4da8>
   15dc0:	umull	r4, r0, r8, r2
   15dc4:	mov	r7, r6
   15dc8:	mla	r0, r8, r3, r0
   15dcc:	mla	r0, r9, r2, r0
   15dd0:	cmp	r0, #0
   15dd4:	str	r0, [sp, #8]
   15dd8:	bmi	15e30 <__assert_fail@plt+0x4da8>
   15ddc:	ldr	r3, [sp, #28]
   15de0:	mvn	r0, #0
   15de4:	mvn	r1, #-2147483648	; 0x80000000
   15de8:	mov	r9, r7
   15dec:	mvn	r6, #0
   15df0:	mvn	r7, #-2147483648	; 0x80000000
   15df4:	bl	17314 <__assert_fail@plt+0x628c>
   15df8:	ldr	r8, [sp, #8]
   15dfc:	ldr	r3, [sp, #24]
   15e00:	ldr	ip, [sp, #28]
   15e04:	subs	r0, r0, r4
   15e08:	mov	r2, #1
   15e0c:	sbcs	r0, r1, r8
   15e10:	blt	15e24 <__assert_fail@plt+0x4d9c>
   15e14:	umull	r6, r0, r4, r3
   15e18:	mov	r2, #0
   15e1c:	mla	r0, r4, ip, r0
   15e20:	mla	r7, r8, r3, r0
   15e24:	orr	r3, r2, r9
   15e28:	ldr	r9, [sp, #12]
   15e2c:	b	16acc <__assert_fail@plt+0x5a44>
   15e30:	ldr	r8, [sp, #8]
   15e34:	mov	r0, #0
   15e38:	mov	r1, #-2147483648	; 0x80000000
   15e3c:	mov	r2, r4
   15e40:	mov	r9, r7
   15e44:	mov	r6, #0
   15e48:	mov	r7, #-2147483648	; 0x80000000
   15e4c:	mov	r3, r8
   15e50:	bl	17240 <__assert_fail@plt+0x61b8>
   15e54:	ldr	r3, [sp, #24]
   15e58:	ldr	ip, [sp, #28]
   15e5c:	mov	r2, #1
   15e60:	subs	r0, r0, r3
   15e64:	sbcs	r0, r1, ip
   15e68:	bge	15e14 <__assert_fail@plt+0x4d8c>
   15e6c:	b	15e24 <__assert_fail@plt+0x4d9c>
   15e70:	mov	r0, #0
   15e74:	mov	r1, #-2147483648	; 0x80000000
   15e78:	mov	r2, r8
   15e7c:	mov	r3, r9
   15e80:	str	r4, [sp, #8]
   15e84:	mov	r6, #0
   15e88:	mov	r7, #-2147483648	; 0x80000000
   15e8c:	bl	17240 <__assert_fail@plt+0x61b8>
   15e90:	ldr	r4, [sp, #24]
   15e94:	ldr	r3, [sp, #28]
   15e98:	mov	r2, #1
   15e9c:	subs	r0, r0, r4
   15ea0:	sbcs	r0, r1, r3
   15ea4:	blt	15fe0 <__assert_fail@plt+0x4f58>
   15ea8:	umull	r6, r0, r8, r4
   15eac:	mov	r2, #0
   15eb0:	mla	r0, r8, r3, r0
   15eb4:	mla	r7, r9, r4, r0
   15eb8:	b	15fe0 <__assert_fail@plt+0x4f58>
   15ebc:	str	r4, [sp, #4]
   15ec0:	ldr	r4, [sp, #8]
   15ec4:	mov	r0, #0
   15ec8:	mov	r1, #-2147483648	; 0x80000000
   15ecc:	mov	r3, r9
   15ed0:	mov	r2, r4
   15ed4:	bl	17240 <__assert_fail@plt+0x61b8>
   15ed8:	ldr	r2, [sp, #24]
   15edc:	ldr	r3, [sp, #28]
   15ee0:	mov	r7, #1
   15ee4:	mov	r6, #0
   15ee8:	mov	r8, #-2147483648	; 0x80000000
   15eec:	subs	r0, r0, r2
   15ef0:	sbcs	r0, r1, r3
   15ef4:	blt	15f48 <__assert_fail@plt+0x4ec0>
   15ef8:	umull	r6, r0, r4, r2
   15efc:	ldr	r7, [sp, #4]
   15f00:	mla	r0, r4, r3, r0
   15f04:	mla	r8, r9, r2, r0
   15f08:	cmp	r8, #0
   15f0c:	bmi	15f48 <__assert_fail@plt+0x4ec0>
   15f10:	ldr	r3, [sp, #28]
   15f14:	mvn	r0, #0
   15f18:	mvn	r1, #-2147483648	; 0x80000000
   15f1c:	str	r7, [sp, #8]
   15f20:	mvn	r4, #0
   15f24:	mvn	r9, #-2147483648	; 0x80000000
   15f28:	bl	17314 <__assert_fail@plt+0x628c>
   15f2c:	ldr	r2, [sp, #24]
   15f30:	ldr	r3, [sp, #28]
   15f34:	subs	r0, r0, r6
   15f38:	mov	r7, #1
   15f3c:	sbcs	r0, r1, r8
   15f40:	bge	15f80 <__assert_fail@plt+0x4ef8>
   15f44:	b	15f98 <__assert_fail@plt+0x4f10>
   15f48:	mov	r0, #0
   15f4c:	mov	r1, #-2147483648	; 0x80000000
   15f50:	mov	r2, r6
   15f54:	mov	r3, r8
   15f58:	str	r7, [sp, #8]
   15f5c:	bl	17240 <__assert_fail@plt+0x61b8>
   15f60:	ldr	r2, [sp, #24]
   15f64:	ldr	r3, [sp, #28]
   15f68:	mov	r7, #1
   15f6c:	mov	r4, #0
   15f70:	mov	r9, #-2147483648	; 0x80000000
   15f74:	subs	r0, r0, r2
   15f78:	sbcs	r0, r1, r3
   15f7c:	blt	15ff0 <__assert_fail@plt+0x4f68>
   15f80:	umull	r4, r0, r6, r2
   15f84:	ldr	r7, [sp, #8]
   15f88:	mla	r0, r6, r3, r0
   15f8c:	mla	r9, r8, r2, r0
   15f90:	cmp	r9, #0
   15f94:	bmi	15ff0 <__assert_fail@plt+0x4f68>
   15f98:	ldr	r3, [sp, #28]
   15f9c:	mvn	r0, #0
   15fa0:	mvn	r1, #-2147483648	; 0x80000000
   15fa4:	str	r7, [sp, #8]
   15fa8:	mvn	r6, #0
   15fac:	mvn	r7, #-2147483648	; 0x80000000
   15fb0:	bl	17314 <__assert_fail@plt+0x628c>
   15fb4:	ldr	r3, [sp, #24]
   15fb8:	ldr	ip, [sp, #28]
   15fbc:	subs	r0, r0, r4
   15fc0:	mov	r2, #1
   15fc4:	mov	r8, r4
   15fc8:	sbcs	r0, r1, r9
   15fcc:	blt	15fe0 <__assert_fail@plt+0x4f58>
   15fd0:	umull	r6, r0, r8, r3
   15fd4:	mov	r2, #0
   15fd8:	mla	r0, r8, ip, r0
   15fdc:	mla	r7, r9, r3, r0
   15fe0:	ldr	r0, [sp, #8]
   15fe4:	ldr	r9, [sp, #12]
   15fe8:	orr	r3, r2, r0
   15fec:	b	16acc <__assert_fail@plt+0x5a44>
   15ff0:	mov	r0, #0
   15ff4:	mov	r1, #-2147483648	; 0x80000000
   15ff8:	mov	r2, r4
   15ffc:	mov	r3, r9
   16000:	str	r7, [sp, #8]
   16004:	mov	r8, r4
   16008:	bl	17240 <__assert_fail@plt+0x61b8>
   1600c:	ldr	r3, [sp, #24]
   16010:	ldr	ip, [sp, #28]
   16014:	mov	r2, #1
   16018:	mov	r6, #0
   1601c:	mov	r7, #-2147483648	; 0x80000000
   16020:	subs	r0, r0, r3
   16024:	sbcs	r0, r1, ip
   16028:	bge	15fd0 <__assert_fail@plt+0x4f48>
   1602c:	b	15fe0 <__assert_fail@plt+0x4f58>
   16030:	and	r0, r6, r7
   16034:	cmn	r0, #1
   16038:	beq	16074 <__assert_fail@plt+0x4fec>
   1603c:	mov	r0, #0
   16040:	mov	r1, #-2147483648	; 0x80000000
   16044:	mov	r2, r6
   16048:	mov	r3, r7
   1604c:	bl	17240 <__assert_fail@plt+0x61b8>
   16050:	ldr	r2, [sp, #24]
   16054:	ldr	r3, [sp, #28]
   16058:	mov	r4, #1
   1605c:	mov	r9, #-2147483648	; 0x80000000
   16060:	subs	r0, r0, r2
   16064:	sbcs	r0, r1, r3
   16068:	mov	r0, #0
   1606c:	str	r0, [sp, #8]
   16070:	blt	16384 <__assert_fail@plt+0x52fc>
   16074:	umull	r1, r0, r6, r2
   16078:	mov	r4, #0
   1607c:	mla	r0, r6, r3, r0
   16080:	mla	r9, r7, r2, r0
   16084:	str	r1, [sp, #8]
   16088:	cmp	r9, #0
   1608c:	bmi	16384 <__assert_fail@plt+0x52fc>
   16090:	ldr	r3, [sp, #28]
   16094:	mvn	r0, #0
   16098:	mvn	r1, #-2147483648	; 0x80000000
   1609c:	str	r4, [sp, #4]
   160a0:	mvn	r8, #0
   160a4:	mvn	r4, #-2147483648	; 0x80000000
   160a8:	bl	17314 <__assert_fail@plt+0x628c>
   160ac:	ldr	r6, [sp, #8]
   160b0:	ldr	r2, [sp, #24]
   160b4:	ldr	r3, [sp, #28]
   160b8:	mov	r7, #1
   160bc:	subs	r0, r0, r6
   160c0:	sbcs	r0, r1, r9
   160c4:	bge	163c0 <__assert_fail@plt+0x5338>
   160c8:	b	163d8 <__assert_fail@plt+0x5350>
   160cc:	and	r0, r6, r7
   160d0:	cmn	r0, #1
   160d4:	beq	160fc <__assert_fail@plt+0x5074>
   160d8:	mov	r0, #0
   160dc:	mov	r1, #-2147483648	; 0x80000000
   160e0:	mov	r2, r6
   160e4:	mov	r3, r7
   160e8:	bl	17240 <__assert_fail@plt+0x61b8>
   160ec:	ldr	r3, [sp, #28]
   160f0:	subs	r0, r0, #1024	; 0x400
   160f4:	sbcs	r0, r1, #0
   160f8:	blt	16354 <__assert_fail@plt+0x52cc>
   160fc:	lsl	r0, r7, #10
   16100:	orr	r7, r0, r6, lsr #22
   16104:	lsl	r6, r6, #10
   16108:	b	16acc <__assert_fail@plt+0x5a44>
   1610c:	and	r0, r6, r7
   16110:	cmn	r0, #1
   16114:	beq	16150 <__assert_fail@plt+0x50c8>
   16118:	mov	r0, #0
   1611c:	mov	r1, #-2147483648	; 0x80000000
   16120:	mov	r2, r6
   16124:	mov	r3, r7
   16128:	bl	17240 <__assert_fail@plt+0x61b8>
   1612c:	ldr	r2, [sp, #24]
   16130:	ldr	r3, [sp, #28]
   16134:	mov	r4, #1
   16138:	mov	r9, #-2147483648	; 0x80000000
   1613c:	subs	r0, r0, r2
   16140:	sbcs	r0, r1, r3
   16144:	mov	r0, #0
   16148:	str	r0, [sp, #8]
   1614c:	blt	1669c <__assert_fail@plt+0x5614>
   16150:	umull	r1, r0, r6, r2
   16154:	mov	r4, #0
   16158:	mla	r0, r6, r3, r0
   1615c:	mla	r9, r7, r2, r0
   16160:	str	r1, [sp, #8]
   16164:	cmp	r9, #0
   16168:	bmi	1669c <__assert_fail@plt+0x5614>
   1616c:	ldr	r3, [sp, #28]
   16170:	mvn	r0, #0
   16174:	mvn	r1, #-2147483648	; 0x80000000
   16178:	str	r4, [sp, #4]
   1617c:	mvn	r8, #0
   16180:	mvn	r4, #-2147483648	; 0x80000000
   16184:	bl	17314 <__assert_fail@plt+0x628c>
   16188:	ldr	r6, [sp, #8]
   1618c:	ldr	r2, [sp, #24]
   16190:	ldr	r3, [sp, #28]
   16194:	mov	r7, #1
   16198:	subs	r0, r0, r6
   1619c:	sbcs	r0, r1, r9
   161a0:	bge	166d8 <__assert_fail@plt+0x5650>
   161a4:	b	166f0 <__assert_fail@plt+0x5668>
   161a8:	and	r0, r6, r7
   161ac:	cmn	r0, #1
   161b0:	beq	161ec <__assert_fail@plt+0x5164>
   161b4:	mov	r0, #0
   161b8:	mov	r1, #-2147483648	; 0x80000000
   161bc:	mov	r2, r6
   161c0:	mov	r3, r7
   161c4:	bl	17240 <__assert_fail@plt+0x61b8>
   161c8:	ldr	r2, [sp, #24]
   161cc:	ldr	r3, [sp, #28]
   161d0:	mov	r4, #1
   161d4:	mov	r8, #-2147483648	; 0x80000000
   161d8:	subs	r0, r0, r2
   161dc:	sbcs	r0, r1, r3
   161e0:	mov	r0, #0
   161e4:	str	r0, [sp, #8]
   161e8:	blt	16918 <__assert_fail@plt+0x5890>
   161ec:	umull	r1, r0, r6, r2
   161f0:	mov	r4, #0
   161f4:	mla	r0, r6, r3, r0
   161f8:	mla	r8, r7, r2, r0
   161fc:	str	r1, [sp, #8]
   16200:	cmp	r8, #0
   16204:	bmi	16918 <__assert_fail@plt+0x5890>
   16208:	ldr	r3, [sp, #28]
   1620c:	mvn	r0, #0
   16210:	mvn	r1, #-2147483648	; 0x80000000
   16214:	str	r4, [sp, #4]
   16218:	mvn	r9, #0
   1621c:	mvn	r4, #-2147483648	; 0x80000000
   16220:	bl	17314 <__assert_fail@plt+0x628c>
   16224:	ldr	r6, [sp, #8]
   16228:	ldr	r2, [sp, #24]
   1622c:	ldr	r3, [sp, #28]
   16230:	mov	r7, #1
   16234:	subs	r0, r0, r6
   16238:	sbcs	r0, r1, r8
   1623c:	bge	16954 <__assert_fail@plt+0x58cc>
   16240:	b	1696c <__assert_fail@plt+0x58e4>
   16244:	and	r0, r6, r7
   16248:	cmn	r0, #1
   1624c:	beq	16288 <__assert_fail@plt+0x5200>
   16250:	mov	r0, #0
   16254:	mov	r1, #-2147483648	; 0x80000000
   16258:	mov	r2, r6
   1625c:	mov	r3, r7
   16260:	bl	17240 <__assert_fail@plt+0x61b8>
   16264:	ldr	r2, [sp, #24]
   16268:	ldr	r3, [sp, #28]
   1626c:	mov	r4, #1
   16270:	mov	r9, #-2147483648	; 0x80000000
   16274:	subs	r0, r0, r2
   16278:	sbcs	r0, r1, r3
   1627c:	mov	r0, #0
   16280:	str	r0, [sp, #8]
   16284:	blt	16b34 <__assert_fail@plt+0x5aac>
   16288:	umull	r1, r0, r6, r2
   1628c:	mov	r4, #0
   16290:	mla	r0, r6, r3, r0
   16294:	mla	r9, r7, r2, r0
   16298:	str	r1, [sp, #8]
   1629c:	cmp	r9, #0
   162a0:	bmi	16b34 <__assert_fail@plt+0x5aac>
   162a4:	ldr	r3, [sp, #28]
   162a8:	mvn	r0, #0
   162ac:	mvn	r1, #-2147483648	; 0x80000000
   162b0:	str	r4, [sp]
   162b4:	mvn	r8, #-2147483648	; 0x80000000
   162b8:	str	r0, [sp, #4]
   162bc:	mvn	r0, #0
   162c0:	bl	17314 <__assert_fail@plt+0x628c>
   162c4:	ldr	r6, [sp, #8]
   162c8:	ldr	r2, [sp, #24]
   162cc:	ldr	r3, [sp, #28]
   162d0:	mov	r7, #1
   162d4:	subs	r0, r0, r6
   162d8:	sbcs	r0, r1, r9
   162dc:	bge	16b74 <__assert_fail@plt+0x5aec>
   162e0:	b	16b90 <__assert_fail@plt+0x5b08>
   162e4:	and	r0, r6, r7
   162e8:	cmn	r0, #1
   162ec:	beq	16314 <__assert_fail@plt+0x528c>
   162f0:	mov	r0, #0
   162f4:	mov	r1, #-2147483648	; 0x80000000
   162f8:	mov	r2, r6
   162fc:	mov	r3, r7
   16300:	bl	17240 <__assert_fail@plt+0x61b8>
   16304:	ldr	r3, [sp, #28]
   16308:	subs	r0, r0, #512	; 0x200
   1630c:	sbcs	r0, r1, #0
   16310:	blt	16354 <__assert_fail@plt+0x52cc>
   16314:	lsl	r0, r7, #9
   16318:	orr	r7, r0, r6, lsr #23
   1631c:	lsl	r6, r6, #9
   16320:	b	16acc <__assert_fail@plt+0x5a44>
   16324:	and	r0, r6, r7
   16328:	cmn	r0, #1
   1632c:	beq	16374 <__assert_fail@plt+0x52ec>
   16330:	mov	r0, #0
   16334:	mov	r1, #-2147483648	; 0x80000000
   16338:	mov	r2, r6
   1633c:	mov	r3, r7
   16340:	bl	17240 <__assert_fail@plt+0x61b8>
   16344:	ldr	r3, [sp, #28]
   16348:	subs	r0, r0, #2
   1634c:	sbcs	r0, r1, #0
   16350:	bge	16374 <__assert_fail@plt+0x52ec>
   16354:	cmp	r7, #0
   16358:	mvn	r0, #-2147483648	; 0x80000000
   1635c:	mvn	r6, #0
   16360:	mov	r3, #1
   16364:	movmi	r0, #-2147483648	; 0x80000000
   16368:	movwmi	r6, #0
   1636c:	mov	r7, r0
   16370:	b	16acc <__assert_fail@plt+0x5a44>
   16374:	lsl	r0, r7, #1
   16378:	orr	r7, r0, r6, lsr #31
   1637c:	lsl	r6, r6, #1
   16380:	b	16acc <__assert_fail@plt+0x5a44>
   16384:	ldr	r6, [sp, #8]
   16388:	mov	r0, #0
   1638c:	mov	r1, #-2147483648	; 0x80000000
   16390:	mov	r3, r9
   16394:	str	r4, [sp, #4]
   16398:	mov	r2, r6
   1639c:	bl	17240 <__assert_fail@plt+0x61b8>
   163a0:	ldr	r2, [sp, #24]
   163a4:	ldr	r3, [sp, #28]
   163a8:	mov	r7, #1
   163ac:	mov	r8, #0
   163b0:	mov	r4, #-2147483648	; 0x80000000
   163b4:	subs	r0, r0, r2
   163b8:	sbcs	r0, r1, r3
   163bc:	blt	16410 <__assert_fail@plt+0x5388>
   163c0:	umull	r8, r0, r6, r2
   163c4:	ldr	r7, [sp, #4]
   163c8:	mla	r0, r6, r3, r0
   163cc:	mla	r4, r9, r2, r0
   163d0:	cmp	r4, #0
   163d4:	bmi	16410 <__assert_fail@plt+0x5388>
   163d8:	ldr	r3, [sp, #28]
   163dc:	mvn	r0, #0
   163e0:	mvn	r1, #-2147483648	; 0x80000000
   163e4:	str	r7, [sp, #8]
   163e8:	mvn	r7, #0
   163ec:	mvn	r9, #-2147483648	; 0x80000000
   163f0:	bl	17314 <__assert_fail@plt+0x628c>
   163f4:	ldr	r2, [sp, #24]
   163f8:	ldr	r3, [sp, #28]
   163fc:	subs	r0, r0, r8
   16400:	mov	r6, #1
   16404:	sbcs	r0, r1, r4
   16408:	bge	16448 <__assert_fail@plt+0x53c0>
   1640c:	b	16460 <__assert_fail@plt+0x53d8>
   16410:	mov	r0, #0
   16414:	mov	r1, #-2147483648	; 0x80000000
   16418:	mov	r2, r8
   1641c:	mov	r3, r4
   16420:	str	r7, [sp, #8]
   16424:	bl	17240 <__assert_fail@plt+0x61b8>
   16428:	ldr	r2, [sp, #24]
   1642c:	ldr	r3, [sp, #28]
   16430:	mov	r6, #1
   16434:	mov	r7, #0
   16438:	mov	r9, #-2147483648	; 0x80000000
   1643c:	subs	r0, r0, r2
   16440:	sbcs	r0, r1, r3
   16444:	blt	164a0 <__assert_fail@plt+0x5418>
   16448:	umull	r7, r0, r8, r2
   1644c:	ldr	r6, [sp, #8]
   16450:	mla	r0, r8, r3, r0
   16454:	mla	r9, r4, r2, r0
   16458:	cmp	r9, #0
   1645c:	bmi	164a0 <__assert_fail@plt+0x5418>
   16460:	ldr	r3, [sp, #28]
   16464:	mvn	r0, #0
   16468:	mvn	r1, #-2147483648	; 0x80000000
   1646c:	str	r6, [sp, #8]
   16470:	mvn	r8, #0
   16474:	mvn	r4, #-2147483648	; 0x80000000
   16478:	bl	17314 <__assert_fail@plt+0x628c>
   1647c:	ldr	r2, [sp, #24]
   16480:	ldr	r3, [sp, #28]
   16484:	subs	r0, r0, r7
   16488:	sbcs	r0, r1, r9
   1648c:	bge	164e4 <__assert_fail@plt+0x545c>
   16490:	mov	r0, #1
   16494:	mov	r6, #0
   16498:	str	r0, [sp, #8]
   1649c:	b	164fc <__assert_fail@plt+0x5474>
   164a0:	mov	r0, #0
   164a4:	mov	r1, #-2147483648	; 0x80000000
   164a8:	mov	r2, r7
   164ac:	mov	r3, r9
   164b0:	str	r6, [sp, #8]
   164b4:	bl	17240 <__assert_fail@plt+0x61b8>
   164b8:	ldr	r2, [sp, #24]
   164bc:	ldr	r3, [sp, #28]
   164c0:	subs	r0, r0, r2
   164c4:	sbcs	r0, r1, r3
   164c8:	bge	164e4 <__assert_fail@plt+0x545c>
   164cc:	mov	r0, #1
   164d0:	mov	r8, #0
   164d4:	mov	r4, #-2147483648	; 0x80000000
   164d8:	mov	r6, #0
   164dc:	str	r0, [sp, #8]
   164e0:	b	16534 <__assert_fail@plt+0x54ac>
   164e4:	umull	r8, r0, r7, r2
   164e8:	mov	r6, #0
   164ec:	mla	r0, r7, r3, r0
   164f0:	mla	r4, r9, r2, r0
   164f4:	cmp	r4, #0
   164f8:	bmi	16534 <__assert_fail@plt+0x54ac>
   164fc:	ldr	r3, [sp, #28]
   16500:	mvn	r0, #0
   16504:	mvn	r1, #-2147483648	; 0x80000000
   16508:	mvn	r9, #0
   1650c:	mvn	r7, #-2147483648	; 0x80000000
   16510:	bl	17314 <__assert_fail@plt+0x628c>
   16514:	ldr	r2, [sp, #24]
   16518:	ldr	r3, [sp, #28]
   1651c:	subs	r0, r0, r8
   16520:	sbcs	r0, r1, r4
   16524:	bge	16570 <__assert_fail@plt+0x54e8>
   16528:	mov	r0, #1
   1652c:	str	r0, [sp, #8]
   16530:	b	16584 <__assert_fail@plt+0x54fc>
   16534:	mov	r0, #0
   16538:	mov	r1, #-2147483648	; 0x80000000
   1653c:	mov	r2, r8
   16540:	mov	r3, r4
   16544:	bl	17240 <__assert_fail@plt+0x61b8>
   16548:	ldr	r2, [sp, #24]
   1654c:	ldr	r3, [sp, #28]
   16550:	subs	r0, r0, r2
   16554:	sbcs	r0, r1, r3
   16558:	bge	16570 <__assert_fail@plt+0x54e8>
   1655c:	mov	r0, #1
   16560:	mov	r9, #0
   16564:	mov	r7, #-2147483648	; 0x80000000
   16568:	str	r0, [sp, #8]
   1656c:	b	165c0 <__assert_fail@plt+0x5538>
   16570:	umull	r9, r0, r8, r2
   16574:	mla	r0, r8, r3, r0
   16578:	mla	r7, r4, r2, r0
   1657c:	cmp	r7, #0
   16580:	bmi	165c0 <__assert_fail@plt+0x5538>
   16584:	ldr	r3, [sp, #28]
   16588:	mvn	r0, #0
   1658c:	mvn	r1, #-2147483648	; 0x80000000
   16590:	mvn	r8, #0
   16594:	mvn	r4, #-2147483648	; 0x80000000
   16598:	bl	17314 <__assert_fail@plt+0x628c>
   1659c:	ldr	r2, [sp, #24]
   165a0:	ldr	r3, [sp, #28]
   165a4:	subs	r0, r0, r9
   165a8:	sbcs	r0, r1, r7
   165ac:	bge	16600 <__assert_fail@plt+0x5578>
   165b0:	ldr	r9, [sp, #12]
   165b4:	mov	r0, #1
   165b8:	str	r0, [sp, #8]
   165bc:	b	16618 <__assert_fail@plt+0x5590>
   165c0:	mov	r0, #0
   165c4:	mov	r1, #-2147483648	; 0x80000000
   165c8:	mov	r2, r9
   165cc:	mov	r3, r7
   165d0:	bl	17240 <__assert_fail@plt+0x61b8>
   165d4:	ldr	r2, [sp, #24]
   165d8:	ldr	r3, [sp, #28]
   165dc:	subs	r0, r0, r2
   165e0:	sbcs	r0, r1, r3
   165e4:	bge	16600 <__assert_fail@plt+0x5578>
   165e8:	ldr	r9, [sp, #12]
   165ec:	mov	r0, #1
   165f0:	mov	r8, #0
   165f4:	mov	r4, #-2147483648	; 0x80000000
   165f8:	str	r0, [sp, #8]
   165fc:	b	16668 <__assert_fail@plt+0x55e0>
   16600:	umull	r8, r0, r9, r2
   16604:	mla	r0, r9, r3, r0
   16608:	ldr	r9, [sp, #12]
   1660c:	mla	r4, r7, r2, r0
   16610:	cmp	r4, #0
   16614:	bmi	16668 <__assert_fail@plt+0x55e0>
   16618:	ldr	r3, [sp, #28]
   1661c:	mvn	r0, #0
   16620:	mvn	r1, #-2147483648	; 0x80000000
   16624:	mvn	r6, #0
   16628:	bl	17314 <__assert_fail@plt+0x628c>
   1662c:	ldr	r7, [sp, #24]
   16630:	ldr	r3, [sp, #28]
   16634:	subs	r0, r0, r8
   16638:	mov	r2, #1
   1663c:	sbcs	r0, r1, r4
   16640:	mvn	r0, #-2147483648	; 0x80000000
   16644:	blt	16658 <__assert_fail@plt+0x55d0>
   16648:	umull	r6, r0, r8, r7
   1664c:	mov	r2, #0
   16650:	mla	r0, r8, r3, r0
   16654:	mla	r0, r4, r7, r0
   16658:	ldr	r1, [sp, #8]
   1665c:	mov	r7, r0
   16660:	orr	r3, r2, r1
   16664:	b	16acc <__assert_fail@plt+0x5a44>
   16668:	mov	r0, #0
   1666c:	mov	r1, #-2147483648	; 0x80000000
   16670:	mov	r2, r8
   16674:	mov	r3, r4
   16678:	bl	17240 <__assert_fail@plt+0x61b8>
   1667c:	ldr	r7, [sp, #24]
   16680:	ldr	r3, [sp, #28]
   16684:	mov	r2, #1
   16688:	subs	r0, r0, r7
   1668c:	sbcs	r0, r1, r3
   16690:	mov	r0, #-2147483648	; 0x80000000
   16694:	bge	16648 <__assert_fail@plt+0x55c0>
   16698:	b	16658 <__assert_fail@plt+0x55d0>
   1669c:	ldr	r6, [sp, #8]
   166a0:	mov	r0, #0
   166a4:	mov	r1, #-2147483648	; 0x80000000
   166a8:	mov	r3, r9
   166ac:	str	r4, [sp, #4]
   166b0:	mov	r2, r6
   166b4:	bl	17240 <__assert_fail@plt+0x61b8>
   166b8:	ldr	r2, [sp, #24]
   166bc:	ldr	r3, [sp, #28]
   166c0:	mov	r7, #1
   166c4:	mov	r8, #0
   166c8:	mov	r4, #-2147483648	; 0x80000000
   166cc:	subs	r0, r0, r2
   166d0:	sbcs	r0, r1, r3
   166d4:	blt	1672c <__assert_fail@plt+0x56a4>
   166d8:	umull	r8, r0, r6, r2
   166dc:	ldr	r7, [sp, #4]
   166e0:	mla	r0, r6, r3, r0
   166e4:	mla	r4, r9, r2, r0
   166e8:	cmp	r4, #0
   166ec:	bmi	1672c <__assert_fail@plt+0x56a4>
   166f0:	ldr	r3, [sp, #28]
   166f4:	mvn	r0, #0
   166f8:	mvn	r1, #-2147483648	; 0x80000000
   166fc:	str	r7, [sp, #4]
   16700:	mvn	r7, #0
   16704:	mvn	r9, #-2147483648	; 0x80000000
   16708:	bl	17314 <__assert_fail@plt+0x628c>
   1670c:	ldr	r2, [sp, #24]
   16710:	ldr	r3, [sp, #28]
   16714:	subs	r0, r0, r8
   16718:	mov	r6, #1
   1671c:	sbcs	r0, r1, r4
   16720:	str	r6, [sp, #8]
   16724:	bge	16768 <__assert_fail@plt+0x56e0>
   16728:	b	16784 <__assert_fail@plt+0x56fc>
   1672c:	mov	r0, #0
   16730:	mov	r1, #-2147483648	; 0x80000000
   16734:	mov	r2, r8
   16738:	mov	r3, r4
   1673c:	str	r7, [sp, #4]
   16740:	bl	17240 <__assert_fail@plt+0x61b8>
   16744:	ldr	r2, [sp, #24]
   16748:	ldr	r3, [sp, #28]
   1674c:	mov	r7, #1
   16750:	mov	r9, #-2147483648	; 0x80000000
   16754:	str	r7, [sp, #8]
   16758:	mov	r7, #0
   1675c:	subs	r0, r0, r2
   16760:	sbcs	r0, r1, r3
   16764:	blt	167bc <__assert_fail@plt+0x5734>
   16768:	umull	r7, r0, r8, r2
   1676c:	mla	r0, r8, r3, r0
   16770:	mla	r9, r4, r2, r0
   16774:	ldr	r0, [sp, #4]
   16778:	cmp	r9, #0
   1677c:	str	r0, [sp, #8]
   16780:	bmi	167bc <__assert_fail@plt+0x5734>
   16784:	ldr	r3, [sp, #28]
   16788:	mvn	r0, #0
   1678c:	mvn	r1, #-2147483648	; 0x80000000
   16790:	mvn	r4, #0
   16794:	mvn	r8, #-2147483648	; 0x80000000
   16798:	bl	17314 <__assert_fail@plt+0x628c>
   1679c:	ldr	r2, [sp, #24]
   167a0:	ldr	r3, [sp, #28]
   167a4:	subs	r0, r0, r7
   167a8:	sbcs	r0, r1, r9
   167ac:	bge	167f8 <__assert_fail@plt+0x5770>
   167b0:	mov	r0, #1
   167b4:	str	r0, [sp, #8]
   167b8:	b	1680c <__assert_fail@plt+0x5784>
   167bc:	mov	r0, #0
   167c0:	mov	r1, #-2147483648	; 0x80000000
   167c4:	mov	r2, r7
   167c8:	mov	r3, r9
   167cc:	bl	17240 <__assert_fail@plt+0x61b8>
   167d0:	ldr	r2, [sp, #24]
   167d4:	ldr	r3, [sp, #28]
   167d8:	subs	r0, r0, r2
   167dc:	sbcs	r0, r1, r3
   167e0:	bge	167f8 <__assert_fail@plt+0x5770>
   167e4:	mov	r0, #1
   167e8:	mov	r4, #0
   167ec:	mov	r8, #-2147483648	; 0x80000000
   167f0:	str	r0, [sp, #8]
   167f4:	b	16840 <__assert_fail@plt+0x57b8>
   167f8:	umull	r4, r0, r7, r2
   167fc:	mla	r0, r7, r3, r0
   16800:	mla	r8, r9, r2, r0
   16804:	cmp	r8, #0
   16808:	bmi	16840 <__assert_fail@plt+0x57b8>
   1680c:	ldr	r3, [sp, #28]
   16810:	mvn	r0, #0
   16814:	mvn	r1, #-2147483648	; 0x80000000
   16818:	mvn	r6, #0
   1681c:	mvn	r9, #-2147483648	; 0x80000000
   16820:	bl	17314 <__assert_fail@plt+0x628c>
   16824:	ldr	r2, [sp, #24]
   16828:	ldr	r3, [sp, #28]
   1682c:	subs	r0, r0, r4
   16830:	sbcs	r0, r1, r8
   16834:	bge	16878 <__assert_fail@plt+0x57f0>
   16838:	mov	r8, #1
   1683c:	b	16890 <__assert_fail@plt+0x5808>
   16840:	mov	r0, #0
   16844:	mov	r1, #-2147483648	; 0x80000000
   16848:	mov	r2, r4
   1684c:	mov	r3, r8
   16850:	bl	17240 <__assert_fail@plt+0x61b8>
   16854:	ldr	r2, [sp, #24]
   16858:	ldr	r3, [sp, #28]
   1685c:	subs	r0, r0, r2
   16860:	sbcs	r0, r1, r3
   16864:	bge	16878 <__assert_fail@plt+0x57f0>
   16868:	mov	r8, #1
   1686c:	mov	r6, #0
   16870:	mov	r9, #-2147483648	; 0x80000000
   16874:	b	168e0 <__assert_fail@plt+0x5858>
   16878:	umull	r6, r0, r4, r2
   1687c:	mla	r0, r4, r3, r0
   16880:	mla	r9, r8, r2, r0
   16884:	ldr	r8, [sp, #8]
   16888:	cmp	r9, #0
   1688c:	bmi	168e0 <__assert_fail@plt+0x5858>
   16890:	ldr	r3, [sp, #28]
   16894:	mvn	r0, #0
   16898:	mvn	r1, #-2147483648	; 0x80000000
   1689c:	mvn	r4, #0
   168a0:	mvn	r7, #-2147483648	; 0x80000000
   168a4:	bl	17314 <__assert_fail@plt+0x628c>
   168a8:	ldr	r3, [sp, #24]
   168ac:	ldr	ip, [sp, #28]
   168b0:	subs	r0, r0, r6
   168b4:	mov	r2, #1
   168b8:	sbcs	r0, r1, r9
   168bc:	blt	168d0 <__assert_fail@plt+0x5848>
   168c0:	umull	r4, r0, r6, r3
   168c4:	mov	r2, #0
   168c8:	mla	r0, r6, ip, r0
   168cc:	mla	r7, r9, r3, r0
   168d0:	ldr	r9, [sp, #12]
   168d4:	orr	r3, r2, r8
   168d8:	mov	r6, r4
   168dc:	b	16acc <__assert_fail@plt+0x5a44>
   168e0:	mov	r0, #0
   168e4:	mov	r1, #-2147483648	; 0x80000000
   168e8:	mov	r2, r6
   168ec:	mov	r3, r9
   168f0:	bl	17240 <__assert_fail@plt+0x61b8>
   168f4:	ldr	r3, [sp, #24]
   168f8:	ldr	ip, [sp, #28]
   168fc:	mov	r2, #1
   16900:	mov	r4, #0
   16904:	mov	r7, #-2147483648	; 0x80000000
   16908:	subs	r0, r0, r3
   1690c:	sbcs	r0, r1, ip
   16910:	bge	168c0 <__assert_fail@plt+0x5838>
   16914:	b	168d0 <__assert_fail@plt+0x5848>
   16918:	ldr	r6, [sp, #8]
   1691c:	mov	r0, #0
   16920:	mov	r1, #-2147483648	; 0x80000000
   16924:	mov	r3, r8
   16928:	str	r4, [sp, #4]
   1692c:	mov	r2, r6
   16930:	bl	17240 <__assert_fail@plt+0x61b8>
   16934:	ldr	r2, [sp, #24]
   16938:	ldr	r3, [sp, #28]
   1693c:	mov	r7, #1
   16940:	mov	r9, #0
   16944:	mov	r4, #-2147483648	; 0x80000000
   16948:	subs	r0, r0, r2
   1694c:	sbcs	r0, r1, r3
   16950:	blt	169a8 <__assert_fail@plt+0x5920>
   16954:	umull	r9, r0, r6, r2
   16958:	ldr	r7, [sp, #4]
   1695c:	mla	r0, r6, r3, r0
   16960:	mla	r4, r8, r2, r0
   16964:	cmp	r4, #0
   16968:	bmi	169a8 <__assert_fail@plt+0x5920>
   1696c:	ldr	r3, [sp, #28]
   16970:	mvn	r0, #0
   16974:	mvn	r1, #-2147483648	; 0x80000000
   16978:	str	r7, [sp, #4]
   1697c:	mvn	r8, #0
   16980:	mvn	r7, #-2147483648	; 0x80000000
   16984:	bl	17314 <__assert_fail@plt+0x628c>
   16988:	ldr	r2, [sp, #24]
   1698c:	ldr	r3, [sp, #28]
   16990:	subs	r0, r0, r9
   16994:	mov	r6, #1
   16998:	sbcs	r0, r1, r4
   1699c:	str	r6, [sp, #8]
   169a0:	bge	169e4 <__assert_fail@plt+0x595c>
   169a4:	b	16a00 <__assert_fail@plt+0x5978>
   169a8:	mov	r0, #0
   169ac:	mov	r1, #-2147483648	; 0x80000000
   169b0:	mov	r2, r9
   169b4:	mov	r3, r4
   169b8:	str	r7, [sp, #4]
   169bc:	bl	17240 <__assert_fail@plt+0x61b8>
   169c0:	ldr	r2, [sp, #24]
   169c4:	ldr	r3, [sp, #28]
   169c8:	mov	r7, #1
   169cc:	mov	r8, #0
   169d0:	str	r7, [sp, #8]
   169d4:	mov	r7, #-2147483648	; 0x80000000
   169d8:	subs	r0, r0, r2
   169dc:	sbcs	r0, r1, r3
   169e0:	blt	16a34 <__assert_fail@plt+0x59ac>
   169e4:	umull	r8, r0, r9, r2
   169e8:	mla	r0, r9, r3, r0
   169ec:	mla	r7, r4, r2, r0
   169f0:	ldr	r0, [sp, #4]
   169f4:	cmp	r7, #0
   169f8:	str	r0, [sp, #8]
   169fc:	bmi	16a34 <__assert_fail@plt+0x59ac>
   16a00:	ldr	r3, [sp, #28]
   16a04:	mvn	r0, #0
   16a08:	mvn	r1, #-2147483648	; 0x80000000
   16a0c:	mvn	r4, #0
   16a10:	mvn	r9, #-2147483648	; 0x80000000
   16a14:	bl	17314 <__assert_fail@plt+0x628c>
   16a18:	ldr	r2, [sp, #24]
   16a1c:	ldr	r3, [sp, #28]
   16a20:	subs	r0, r0, r8
   16a24:	sbcs	r0, r1, r7
   16a28:	bge	16a6c <__assert_fail@plt+0x59e4>
   16a2c:	mov	r8, #1
   16a30:	b	16a84 <__assert_fail@plt+0x59fc>
   16a34:	mov	r0, #0
   16a38:	mov	r1, #-2147483648	; 0x80000000
   16a3c:	mov	r2, r8
   16a40:	mov	r3, r7
   16a44:	bl	17240 <__assert_fail@plt+0x61b8>
   16a48:	ldr	r2, [sp, #24]
   16a4c:	ldr	r3, [sp, #28]
   16a50:	subs	r0, r0, r2
   16a54:	sbcs	r0, r1, r3
   16a58:	bge	16a6c <__assert_fail@plt+0x59e4>
   16a5c:	mov	r8, #1
   16a60:	mov	r4, #0
   16a64:	mov	r9, #-2147483648	; 0x80000000
   16a68:	b	16afc <__assert_fail@plt+0x5a74>
   16a6c:	umull	r4, r0, r8, r2
   16a70:	mla	r0, r8, r3, r0
   16a74:	ldr	r8, [sp, #8]
   16a78:	mla	r9, r7, r2, r0
   16a7c:	cmp	r9, #0
   16a80:	bmi	16afc <__assert_fail@plt+0x5a74>
   16a84:	ldr	r3, [sp, #28]
   16a88:	mvn	r0, #0
   16a8c:	mvn	r1, #-2147483648	; 0x80000000
   16a90:	mvn	r6, #0
   16a94:	mvn	r7, #-2147483648	; 0x80000000
   16a98:	bl	17314 <__assert_fail@plt+0x628c>
   16a9c:	ldr	r3, [sp, #24]
   16aa0:	ldr	ip, [sp, #28]
   16aa4:	subs	r0, r0, r4
   16aa8:	mov	r2, #1
   16aac:	sbcs	r0, r1, r9
   16ab0:	blt	16ac4 <__assert_fail@plt+0x5a3c>
   16ab4:	umull	r6, r0, r4, r3
   16ab8:	mov	r2, #0
   16abc:	mla	r0, r4, ip, r0
   16ac0:	mla	r7, r9, r3, r0
   16ac4:	ldr	r9, [sp, #12]
   16ac8:	orr	r3, r2, r8
   16acc:	ldr	r1, [sp, #20]
   16ad0:	ldr	r2, [sp, #16]
   16ad4:	orr	r5, r3, r5
   16ad8:	add	r0, r1, r2
   16adc:	str	r0, [sl]
   16ae0:	ldrb	r0, [r1, r2]
   16ae4:	cmp	r0, #0
   16ae8:	orrne	r5, r5, #2
   16aec:	strd	r6, [r9]
   16af0:	mov	r0, r5
   16af4:	sub	sp, fp, #28
   16af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16afc:	mov	r0, #0
   16b00:	mov	r1, #-2147483648	; 0x80000000
   16b04:	mov	r2, r4
   16b08:	mov	r3, r9
   16b0c:	bl	17240 <__assert_fail@plt+0x61b8>
   16b10:	ldr	r3, [sp, #24]
   16b14:	ldr	ip, [sp, #28]
   16b18:	mov	r2, #1
   16b1c:	mov	r6, #0
   16b20:	mov	r7, #-2147483648	; 0x80000000
   16b24:	subs	r0, r0, r3
   16b28:	sbcs	r0, r1, ip
   16b2c:	bge	16ab4 <__assert_fail@plt+0x5a2c>
   16b30:	b	16ac4 <__assert_fail@plt+0x5a3c>
   16b34:	ldr	r6, [sp, #8]
   16b38:	mov	r0, #0
   16b3c:	mov	r1, #-2147483648	; 0x80000000
   16b40:	mov	r3, r9
   16b44:	str	r4, [sp]
   16b48:	mov	r2, r6
   16b4c:	bl	17240 <__assert_fail@plt+0x61b8>
   16b50:	ldr	r2, [sp, #24]
   16b54:	ldr	r3, [sp, #28]
   16b58:	mov	r7, #1
   16b5c:	mov	r8, #-2147483648	; 0x80000000
   16b60:	subs	r0, r0, r2
   16b64:	sbcs	r0, r1, r3
   16b68:	mov	r0, #0
   16b6c:	str	r0, [sp, #4]
   16b70:	blt	16bd0 <__assert_fail@plt+0x5b48>
   16b74:	umull	r1, r0, r6, r2
   16b78:	ldr	r7, [sp]
   16b7c:	mla	r0, r6, r3, r0
   16b80:	mla	r8, r9, r2, r0
   16b84:	str	r1, [sp, #4]
   16b88:	cmp	r8, #0
   16b8c:	bmi	16bd0 <__assert_fail@plt+0x5b48>
   16b90:	ldr	r3, [sp, #28]
   16b94:	mvn	r0, #0
   16b98:	mvn	r1, #-2147483648	; 0x80000000
   16b9c:	str	r7, [sp]
   16ba0:	mvn	r7, #0
   16ba4:	mvn	r4, #-2147483648	; 0x80000000
   16ba8:	bl	17314 <__assert_fail@plt+0x628c>
   16bac:	mov	r6, #1
   16bb0:	ldr	r2, [sp, #24]
   16bb4:	ldr	r3, [sp, #28]
   16bb8:	str	r6, [sp, #8]
   16bbc:	ldr	r6, [sp, #4]
   16bc0:	subs	r0, r0, r6
   16bc4:	sbcs	r0, r1, r8
   16bc8:	bge	16c10 <__assert_fail@plt+0x5b88>
   16bcc:	b	16c2c <__assert_fail@plt+0x5ba4>
   16bd0:	ldr	r6, [sp, #4]
   16bd4:	mov	r0, #0
   16bd8:	mov	r1, #-2147483648	; 0x80000000
   16bdc:	mov	r3, r8
   16be0:	str	r7, [sp]
   16be4:	mov	r2, r6
   16be8:	bl	17240 <__assert_fail@plt+0x61b8>
   16bec:	ldr	r2, [sp, #24]
   16bf0:	ldr	r3, [sp, #28]
   16bf4:	mov	r7, #1
   16bf8:	mov	r4, #-2147483648	; 0x80000000
   16bfc:	str	r7, [sp, #8]
   16c00:	mov	r7, #0
   16c04:	subs	r0, r0, r2
   16c08:	sbcs	r0, r1, r3
   16c0c:	blt	16c64 <__assert_fail@plt+0x5bdc>
   16c10:	umull	r7, r0, r6, r2
   16c14:	mla	r0, r6, r3, r0
   16c18:	mla	r4, r8, r2, r0
   16c1c:	ldr	r0, [sp]
   16c20:	cmp	r4, #0
   16c24:	str	r0, [sp, #8]
   16c28:	bmi	16c64 <__assert_fail@plt+0x5bdc>
   16c2c:	ldr	r3, [sp, #28]
   16c30:	mvn	r0, #0
   16c34:	mvn	r1, #-2147483648	; 0x80000000
   16c38:	mvn	r9, #0
   16c3c:	mvn	r8, #-2147483648	; 0x80000000
   16c40:	bl	17314 <__assert_fail@plt+0x628c>
   16c44:	ldr	r2, [sp, #24]
   16c48:	ldr	r3, [sp, #28]
   16c4c:	subs	r0, r0, r7
   16c50:	sbcs	r0, r1, r4
   16c54:	bge	16ca0 <__assert_fail@plt+0x5c18>
   16c58:	mov	r0, #1
   16c5c:	str	r0, [sp, #8]
   16c60:	b	16cb4 <__assert_fail@plt+0x5c2c>
   16c64:	mov	r0, #0
   16c68:	mov	r1, #-2147483648	; 0x80000000
   16c6c:	mov	r2, r7
   16c70:	mov	r3, r4
   16c74:	bl	17240 <__assert_fail@plt+0x61b8>
   16c78:	ldr	r2, [sp, #24]
   16c7c:	ldr	r3, [sp, #28]
   16c80:	subs	r0, r0, r2
   16c84:	sbcs	r0, r1, r3
   16c88:	bge	16ca0 <__assert_fail@plt+0x5c18>
   16c8c:	mov	r0, #1
   16c90:	mov	r9, #0
   16c94:	mov	r8, #-2147483648	; 0x80000000
   16c98:	str	r0, [sp, #8]
   16c9c:	b	16cec <__assert_fail@plt+0x5c64>
   16ca0:	umull	r9, r0, r7, r2
   16ca4:	mla	r0, r7, r3, r0
   16ca8:	mla	r8, r4, r2, r0
   16cac:	cmp	r8, #0
   16cb0:	bmi	16cec <__assert_fail@plt+0x5c64>
   16cb4:	ldr	r3, [sp, #28]
   16cb8:	mvn	r0, #0
   16cbc:	mvn	r1, #-2147483648	; 0x80000000
   16cc0:	mvn	r4, #0
   16cc4:	mvn	r7, #-2147483648	; 0x80000000
   16cc8:	bl	17314 <__assert_fail@plt+0x628c>
   16ccc:	ldr	r2, [sp, #24]
   16cd0:	ldr	r3, [sp, #28]
   16cd4:	subs	r0, r0, r9
   16cd8:	sbcs	r0, r1, r8
   16cdc:	bge	16d28 <__assert_fail@plt+0x5ca0>
   16ce0:	mov	r0, #1
   16ce4:	str	r0, [sp, #8]
   16ce8:	b	16d3c <__assert_fail@plt+0x5cb4>
   16cec:	mov	r0, #0
   16cf0:	mov	r1, #-2147483648	; 0x80000000
   16cf4:	mov	r2, r9
   16cf8:	mov	r3, r8
   16cfc:	bl	17240 <__assert_fail@plt+0x61b8>
   16d00:	ldr	r2, [sp, #24]
   16d04:	ldr	r3, [sp, #28]
   16d08:	subs	r0, r0, r2
   16d0c:	sbcs	r0, r1, r3
   16d10:	bge	16d28 <__assert_fail@plt+0x5ca0>
   16d14:	mov	r0, #1
   16d18:	mov	r4, #0
   16d1c:	mov	r7, #-2147483648	; 0x80000000
   16d20:	str	r0, [sp, #8]
   16d24:	b	16d74 <__assert_fail@plt+0x5cec>
   16d28:	umull	r4, r0, r9, r2
   16d2c:	mla	r0, r9, r3, r0
   16d30:	mla	r7, r8, r2, r0
   16d34:	cmp	r7, #0
   16d38:	bmi	16d74 <__assert_fail@plt+0x5cec>
   16d3c:	ldr	r3, [sp, #28]
   16d40:	mvn	r0, #0
   16d44:	mvn	r1, #-2147483648	; 0x80000000
   16d48:	mvn	r8, #0
   16d4c:	mvn	r9, #-2147483648	; 0x80000000
   16d50:	bl	17314 <__assert_fail@plt+0x628c>
   16d54:	ldr	r2, [sp, #24]
   16d58:	ldr	r3, [sp, #28]
   16d5c:	subs	r0, r0, r4
   16d60:	sbcs	r0, r1, r7
   16d64:	bge	16db0 <__assert_fail@plt+0x5d28>
   16d68:	mov	r0, #1
   16d6c:	str	r0, [sp, #8]
   16d70:	b	16dc4 <__assert_fail@plt+0x5d3c>
   16d74:	mov	r0, #0
   16d78:	mov	r1, #-2147483648	; 0x80000000
   16d7c:	mov	r2, r4
   16d80:	mov	r3, r7
   16d84:	bl	17240 <__assert_fail@plt+0x61b8>
   16d88:	ldr	r2, [sp, #24]
   16d8c:	ldr	r3, [sp, #28]
   16d90:	subs	r0, r0, r2
   16d94:	sbcs	r0, r1, r3
   16d98:	bge	16db0 <__assert_fail@plt+0x5d28>
   16d9c:	mov	r0, #1
   16da0:	mov	r8, #0
   16da4:	mov	r9, #-2147483648	; 0x80000000
   16da8:	str	r0, [sp, #8]
   16dac:	b	16e00 <__assert_fail@plt+0x5d78>
   16db0:	umull	r8, r0, r4, r2
   16db4:	mla	r0, r4, r3, r0
   16db8:	mla	r9, r7, r2, r0
   16dbc:	cmp	r9, #0
   16dc0:	bmi	16e00 <__assert_fail@plt+0x5d78>
   16dc4:	ldr	r3, [sp, #28]
   16dc8:	mvn	r0, #0
   16dcc:	mvn	r1, #-2147483648	; 0x80000000
   16dd0:	mvn	r4, #0
   16dd4:	mvn	r6, #-2147483648	; 0x80000000
   16dd8:	bl	17314 <__assert_fail@plt+0x628c>
   16ddc:	ldr	r2, [sp, #24]
   16de0:	ldr	r3, [sp, #28]
   16de4:	subs	r0, r0, r8
   16de8:	sbcs	r0, r1, r9
   16dec:	bge	16e40 <__assert_fail@plt+0x5db8>
   16df0:	ldr	r9, [sp, #12]
   16df4:	mov	r0, #1
   16df8:	str	r0, [sp, #8]
   16dfc:	b	16e58 <__assert_fail@plt+0x5dd0>
   16e00:	mov	r0, #0
   16e04:	mov	r1, #-2147483648	; 0x80000000
   16e08:	mov	r2, r8
   16e0c:	mov	r3, r9
   16e10:	bl	17240 <__assert_fail@plt+0x61b8>
   16e14:	ldr	r2, [sp, #24]
   16e18:	ldr	r3, [sp, #28]
   16e1c:	subs	r0, r0, r2
   16e20:	sbcs	r0, r1, r3
   16e24:	bge	16e40 <__assert_fail@plt+0x5db8>
   16e28:	ldr	r9, [sp, #12]
   16e2c:	mov	r0, #1
   16e30:	mov	r4, #0
   16e34:	mov	r6, #-2147483648	; 0x80000000
   16e38:	str	r0, [sp, #8]
   16e3c:	b	16ea4 <__assert_fail@plt+0x5e1c>
   16e40:	umull	r4, r0, r8, r2
   16e44:	mla	r0, r8, r3, r0
   16e48:	mla	r6, r9, r2, r0
   16e4c:	ldr	r9, [sp, #12]
   16e50:	cmp	r6, #0
   16e54:	bmi	16ea4 <__assert_fail@plt+0x5e1c>
   16e58:	ldr	r3, [sp, #28]
   16e5c:	mvn	r0, #0
   16e60:	mvn	r1, #-2147483648	; 0x80000000
   16e64:	mov	r8, r6
   16e68:	mvn	r6, #0
   16e6c:	mvn	r7, #-2147483648	; 0x80000000
   16e70:	bl	17314 <__assert_fail@plt+0x628c>
   16e74:	ldr	r3, [sp, #24]
   16e78:	ldr	ip, [sp, #28]
   16e7c:	subs	r0, r0, r4
   16e80:	mov	r2, #1
   16e84:	sbcs	r0, r1, r8
   16e88:	blt	16e9c <__assert_fail@plt+0x5e14>
   16e8c:	umull	r6, r0, r4, r3
   16e90:	mov	r2, #0
   16e94:	mla	r0, r4, ip, r0
   16e98:	mla	r7, r8, r3, r0
   16e9c:	ldr	r0, [sp, #8]
   16ea0:	b	15fe8 <__assert_fail@plt+0x4f60>
   16ea4:	mov	r0, #0
   16ea8:	mov	r1, #-2147483648	; 0x80000000
   16eac:	mov	r2, r4
   16eb0:	mov	r3, r6
   16eb4:	bl	17240 <__assert_fail@plt+0x61b8>
   16eb8:	ldr	r3, [sp, #24]
   16ebc:	ldr	ip, [sp, #28]
   16ec0:	mov	r8, r6
   16ec4:	mov	r2, #1
   16ec8:	mov	r6, #0
   16ecc:	mov	r7, #-2147483648	; 0x80000000
   16ed0:	subs	r0, r0, r3
   16ed4:	sbcs	r0, r1, ip
   16ed8:	bge	16e8c <__assert_fail@plt+0x5e04>
   16edc:	b	16e9c <__assert_fail@plt+0x5e14>
   16ee0:	movw	r0, #32881	; 0x8071
   16ee4:	movw	r1, #32919	; 0x8097
   16ee8:	movw	r3, #32935	; 0x80a7
   16eec:	mov	r2, #85	; 0x55
   16ef0:	movt	r0, #1
   16ef4:	movt	r1, #1
   16ef8:	movt	r3, #1
   16efc:	bl	11088 <__assert_fail@plt>
   16f00:	clz	r2, r1
   16f04:	clz	r3, r0
   16f08:	lsr	r2, r2, #5
   16f0c:	lsr	r3, r3, #5
   16f10:	orrs	r2, r3, r2
   16f14:	movwne	r1, #1
   16f18:	movwne	r0, #1
   16f1c:	cmp	r1, #0
   16f20:	beq	16f50 <__assert_fail@plt+0x5ec8>
   16f24:	mvn	r2, #-2147483648	; 0x80000000
   16f28:	udiv	r2, r2, r1
   16f2c:	cmp	r2, r0
   16f30:	bcs	16f50 <__assert_fail@plt+0x5ec8>
   16f34:	push	{fp, lr}
   16f38:	mov	fp, sp
   16f3c:	bl	10fa4 <__errno_location@plt>
   16f40:	mov	r1, #12
   16f44:	str	r1, [r0]
   16f48:	mov	r0, #0
   16f4c:	pop	{fp, pc}
   16f50:	b	10e24 <calloc@plt>
   16f54:	cmp	r0, #0
   16f58:	movweq	r0, #1
   16f5c:	cmn	r0, #1
   16f60:	ble	16f68 <__assert_fail@plt+0x5ee0>
   16f64:	b	10f2c <malloc@plt>
   16f68:	push	{fp, lr}
   16f6c:	mov	fp, sp
   16f70:	bl	10fa4 <__errno_location@plt>
   16f74:	mov	r1, #12
   16f78:	str	r1, [r0]
   16f7c:	mov	r0, #0
   16f80:	pop	{fp, pc}
   16f84:	push	{fp, lr}
   16f88:	mov	fp, sp
   16f8c:	cmp	r0, #0
   16f90:	beq	16fac <__assert_fail@plt+0x5f24>
   16f94:	cmp	r1, #0
   16f98:	beq	16fb8 <__assert_fail@plt+0x5f30>
   16f9c:	cmn	r1, #1
   16fa0:	ble	16fc4 <__assert_fail@plt+0x5f3c>
   16fa4:	pop	{fp, lr}
   16fa8:	b	10ec0 <realloc@plt>
   16fac:	mov	r0, r1
   16fb0:	pop	{fp, lr}
   16fb4:	b	16f54 <__assert_fail@plt+0x5ecc>
   16fb8:	bl	128b4 <__assert_fail@plt+0x182c>
   16fbc:	mov	r0, #0
   16fc0:	pop	{fp, pc}
   16fc4:	bl	10fa4 <__errno_location@plt>
   16fc8:	mov	r1, #12
   16fcc:	str	r1, [r0]
   16fd0:	mov	r0, #0
   16fd4:	pop	{fp, pc}
   16fd8:	push	{r4, r5, r6, sl, fp, lr}
   16fdc:	add	fp, sp, #16
   16fe0:	mov	r4, r0
   16fe4:	bl	10f08 <__fpending@plt>
   16fe8:	ldr	r6, [r4]
   16fec:	mov	r5, r0
   16ff0:	mov	r0, r4
   16ff4:	bl	127bc <__assert_fail@plt+0x1734>
   16ff8:	tst	r6, #32
   16ffc:	bne	17034 <__assert_fail@plt+0x5fac>
   17000:	cmp	r0, #0
   17004:	mov	r4, r0
   17008:	mvnne	r4, #0
   1700c:	cmp	r5, #0
   17010:	bne	17040 <__assert_fail@plt+0x5fb8>
   17014:	cmp	r0, #0
   17018:	beq	17040 <__assert_fail@plt+0x5fb8>
   1701c:	bl	10fa4 <__errno_location@plt>
   17020:	ldr	r0, [r0]
   17024:	subs	r4, r0, #9
   17028:	mvnne	r4, #0
   1702c:	mov	r0, r4
   17030:	pop	{r4, r5, r6, sl, fp, pc}
   17034:	mvn	r4, #0
   17038:	cmp	r0, #0
   1703c:	beq	17048 <__assert_fail@plt+0x5fc0>
   17040:	mov	r0, r4
   17044:	pop	{r4, r5, r6, sl, fp, pc}
   17048:	bl	10fa4 <__errno_location@plt>
   1704c:	mov	r1, #0
   17050:	str	r1, [r0]
   17054:	mov	r0, r4
   17058:	pop	{r4, r5, r6, sl, fp, pc}
   1705c:	push	{fp, lr}
   17060:	mov	fp, sp
   17064:	mov	r0, #14
   17068:	bl	11034 <nl_langinfo@plt>
   1706c:	movw	r1, #31272	; 0x7a28
   17070:	cmp	r0, #0
   17074:	movt	r1, #1
   17078:	movne	r1, r0
   1707c:	movw	r0, #33013	; 0x80f5
   17080:	ldrb	r2, [r1]
   17084:	movt	r0, #1
   17088:	cmp	r2, #0
   1708c:	movne	r0, r1
   17090:	pop	{fp, pc}
   17094:	push	{r4, r5, r6, r7, fp, lr}
   17098:	add	fp, sp, #16
   1709c:	sub	sp, sp, #8
   170a0:	cmp	r0, #0
   170a4:	add	r5, sp, #4
   170a8:	mov	r7, r2
   170ac:	mov	r4, r1
   170b0:	movne	r5, r0
   170b4:	mov	r0, r5
   170b8:	bl	10f14 <mbrtowc@plt>
   170bc:	mov	r6, r0
   170c0:	cmp	r7, #0
   170c4:	beq	170ec <__assert_fail@plt+0x6064>
   170c8:	cmn	r6, #2
   170cc:	bcc	170ec <__assert_fail@plt+0x6064>
   170d0:	mov	r0, #0
   170d4:	bl	17134 <__assert_fail@plt+0x60ac>
   170d8:	cmp	r0, #0
   170dc:	bne	170ec <__assert_fail@plt+0x6064>
   170e0:	ldrb	r0, [r4]
   170e4:	mov	r6, #1
   170e8:	str	r0, [r5]
   170ec:	mov	r0, r6
   170f0:	sub	sp, fp, #16
   170f4:	pop	{r4, r5, r6, r7, fp, pc}
   170f8:	cmp	r2, #0
   170fc:	beq	1712c <__assert_fail@plt+0x60a4>
   17100:	mvn	r3, #0
   17104:	udiv	r3, r3, r2
   17108:	cmp	r3, r1
   1710c:	bcs	1712c <__assert_fail@plt+0x60a4>
   17110:	push	{fp, lr}
   17114:	mov	fp, sp
   17118:	bl	10fa4 <__errno_location@plt>
   1711c:	mov	r1, #12
   17120:	str	r1, [r0]
   17124:	mov	r0, #0
   17128:	pop	{fp, pc}
   1712c:	mul	r1, r2, r1
   17130:	b	16f84 <__assert_fail@plt+0x5efc>
   17134:	push	{r4, sl, fp, lr}
   17138:	add	fp, sp, #8
   1713c:	sub	sp, sp, #264	; 0x108
   17140:	add	r1, sp, #7
   17144:	movw	r2, #257	; 0x101
   17148:	bl	171a0 <__assert_fail@plt+0x6118>
   1714c:	mov	r4, #0
   17150:	cmp	r0, #0
   17154:	bne	17194 <__assert_fail@plt+0x610c>
   17158:	movw	r1, #33019	; 0x80fb
   1715c:	add	r0, sp, #7
   17160:	mov	r2, #2
   17164:	movt	r1, #1
   17168:	bl	10f80 <bcmp@plt>
   1716c:	cmp	r0, #0
   17170:	beq	17194 <__assert_fail@plt+0x610c>
   17174:	movw	r1, #33021	; 0x80fd
   17178:	add	r0, sp, #7
   1717c:	mov	r2, #6
   17180:	movt	r1, #1
   17184:	bl	10f80 <bcmp@plt>
   17188:	cmp	r0, #0
   1718c:	mov	r4, r0
   17190:	movwne	r4, #1
   17194:	mov	r0, r4
   17198:	sub	sp, fp, #8
   1719c:	pop	{r4, sl, fp, pc}
   171a0:	push	{r4, r5, r6, r7, fp, lr}
   171a4:	add	fp, sp, #16
   171a8:	mov	r4, r1
   171ac:	mov	r1, #0
   171b0:	mov	r6, r2
   171b4:	bl	1101c <setlocale@plt>
   171b8:	cmp	r0, #0
   171bc:	beq	171ec <__assert_fail@plt+0x6164>
   171c0:	mov	r7, r0
   171c4:	bl	10f8c <strlen@plt>
   171c8:	cmp	r0, r6
   171cc:	bcs	17208 <__assert_fail@plt+0x6180>
   171d0:	add	r2, r0, #1
   171d4:	mov	r0, r4
   171d8:	mov	r1, r7
   171dc:	bl	10e90 <memcpy@plt>
   171e0:	mov	r5, #0
   171e4:	mov	r0, r5
   171e8:	pop	{r4, r5, r6, r7, fp, pc}
   171ec:	mov	r5, #22
   171f0:	cmp	r6, #0
   171f4:	beq	17230 <__assert_fail@plt+0x61a8>
   171f8:	mov	r0, #0
   171fc:	strb	r0, [r4]
   17200:	mov	r0, r5
   17204:	pop	{r4, r5, r6, r7, fp, pc}
   17208:	mov	r5, #34	; 0x22
   1720c:	cmp	r6, #0
   17210:	beq	17230 <__assert_fail@plt+0x61a8>
   17214:	sub	r6, r6, #1
   17218:	mov	r0, r4
   1721c:	mov	r1, r7
   17220:	mov	r2, r6
   17224:	bl	10e90 <memcpy@plt>
   17228:	mov	r0, #0
   1722c:	strb	r0, [r4, r6]
   17230:	mov	r0, r5
   17234:	pop	{r4, r5, r6, r7, fp, pc}
   17238:	mov	r1, #0
   1723c:	b	1101c <setlocale@plt>
   17240:	cmp	r3, #0
   17244:	cmpeq	r2, #0
   17248:	bne	1726c <__assert_fail@plt+0x61e4>
   1724c:	cmp	r1, #0
   17250:	movlt	r1, #-2147483648	; 0x80000000
   17254:	movlt	r0, #0
   17258:	blt	17268 <__assert_fail@plt+0x61e0>
   1725c:	cmpeq	r0, #0
   17260:	mvnne	r1, #-2147483648	; 0x80000000
   17264:	mvnne	r0, #0
   17268:	b	17350 <__assert_fail@plt+0x62c8>
   1726c:	sub	sp, sp, #8
   17270:	push	{sp, lr}
   17274:	cmp	r1, #0
   17278:	blt	17298 <__assert_fail@plt+0x6210>
   1727c:	cmp	r3, #0
   17280:	blt	172cc <__assert_fail@plt+0x6244>
   17284:	bl	17360 <__assert_fail@plt+0x62d8>
   17288:	ldr	lr, [sp, #4]
   1728c:	add	sp, sp, #8
   17290:	pop	{r2, r3}
   17294:	bx	lr
   17298:	rsbs	r0, r0, #0
   1729c:	sbc	r1, r1, r1, lsl #1
   172a0:	cmp	r3, #0
   172a4:	blt	172f0 <__assert_fail@plt+0x6268>
   172a8:	bl	17360 <__assert_fail@plt+0x62d8>
   172ac:	ldr	lr, [sp, #4]
   172b0:	add	sp, sp, #8
   172b4:	pop	{r2, r3}
   172b8:	rsbs	r0, r0, #0
   172bc:	sbc	r1, r1, r1, lsl #1
   172c0:	rsbs	r2, r2, #0
   172c4:	sbc	r3, r3, r3, lsl #1
   172c8:	bx	lr
   172cc:	rsbs	r2, r2, #0
   172d0:	sbc	r3, r3, r3, lsl #1
   172d4:	bl	17360 <__assert_fail@plt+0x62d8>
   172d8:	ldr	lr, [sp, #4]
   172dc:	add	sp, sp, #8
   172e0:	pop	{r2, r3}
   172e4:	rsbs	r0, r0, #0
   172e8:	sbc	r1, r1, r1, lsl #1
   172ec:	bx	lr
   172f0:	rsbs	r2, r2, #0
   172f4:	sbc	r3, r3, r3, lsl #1
   172f8:	bl	17360 <__assert_fail@plt+0x62d8>
   172fc:	ldr	lr, [sp, #4]
   17300:	add	sp, sp, #8
   17304:	pop	{r2, r3}
   17308:	rsbs	r2, r2, #0
   1730c:	sbc	r3, r3, r3, lsl #1
   17310:	bx	lr
   17314:	cmp	r3, #0
   17318:	cmpeq	r2, #0
   1731c:	bne	17334 <__assert_fail@plt+0x62ac>
   17320:	cmp	r1, #0
   17324:	cmpeq	r0, #0
   17328:	mvnne	r1, #0
   1732c:	mvnne	r0, #0
   17330:	b	17350 <__assert_fail@plt+0x62c8>
   17334:	sub	sp, sp, #8
   17338:	push	{sp, lr}
   1733c:	bl	17360 <__assert_fail@plt+0x62d8>
   17340:	ldr	lr, [sp, #4]
   17344:	add	sp, sp, #8
   17348:	pop	{r2, r3}
   1734c:	bx	lr
   17350:	push	{r1, lr}
   17354:	mov	r0, #8
   17358:	bl	10e3c <raise@plt>
   1735c:	pop	{r1, pc}
   17360:	cmp	r1, r3
   17364:	cmpeq	r0, r2
   17368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1736c:	mov	r4, r0
   17370:	movcc	r0, #0
   17374:	mov	r5, r1
   17378:	ldr	lr, [sp, #36]	; 0x24
   1737c:	movcc	r1, r0
   17380:	bcc	1747c <__assert_fail@plt+0x63f4>
   17384:	cmp	r3, #0
   17388:	clzeq	ip, r2
   1738c:	clzne	ip, r3
   17390:	addeq	ip, ip, #32
   17394:	cmp	r5, #0
   17398:	clzeq	r1, r4
   1739c:	addeq	r1, r1, #32
   173a0:	clzne	r1, r5
   173a4:	sub	ip, ip, r1
   173a8:	sub	sl, ip, #32
   173ac:	lsl	r9, r3, ip
   173b0:	rsb	fp, ip, #32
   173b4:	orr	r9, r9, r2, lsl sl
   173b8:	orr	r9, r9, r2, lsr fp
   173bc:	lsl	r8, r2, ip
   173c0:	cmp	r5, r9
   173c4:	cmpeq	r4, r8
   173c8:	movcc	r0, #0
   173cc:	movcc	r1, r0
   173d0:	bcc	173ec <__assert_fail@plt+0x6364>
   173d4:	mov	r0, #1
   173d8:	subs	r4, r4, r8
   173dc:	lsl	r1, r0, sl
   173e0:	orr	r1, r1, r0, lsr fp
   173e4:	lsl	r0, r0, ip
   173e8:	sbc	r5, r5, r9
   173ec:	cmp	ip, #0
   173f0:	beq	1747c <__assert_fail@plt+0x63f4>
   173f4:	lsr	r6, r8, #1
   173f8:	orr	r6, r6, r9, lsl #31
   173fc:	lsr	r7, r9, #1
   17400:	mov	r2, ip
   17404:	b	17428 <__assert_fail@plt+0x63a0>
   17408:	subs	r3, r4, r6
   1740c:	sbc	r8, r5, r7
   17410:	adds	r3, r3, r3
   17414:	adc	r8, r8, r8
   17418:	adds	r4, r3, #1
   1741c:	adc	r5, r8, #0
   17420:	subs	r2, r2, #1
   17424:	beq	17444 <__assert_fail@plt+0x63bc>
   17428:	cmp	r5, r7
   1742c:	cmpeq	r4, r6
   17430:	bcs	17408 <__assert_fail@plt+0x6380>
   17434:	adds	r4, r4, r4
   17438:	adc	r5, r5, r5
   1743c:	subs	r2, r2, #1
   17440:	bne	17428 <__assert_fail@plt+0x63a0>
   17444:	lsr	r3, r4, ip
   17448:	orr	r3, r3, r5, lsl fp
   1744c:	lsr	r2, r5, ip
   17450:	orr	r3, r3, r5, lsr sl
   17454:	adds	r0, r0, r4
   17458:	mov	r4, r3
   1745c:	lsl	r3, r2, ip
   17460:	orr	r3, r3, r4, lsl sl
   17464:	lsl	ip, r4, ip
   17468:	orr	r3, r3, r4, lsr fp
   1746c:	adc	r1, r1, r5
   17470:	subs	r0, r0, ip
   17474:	mov	r5, r2
   17478:	sbc	r1, r1, r3
   1747c:	cmp	lr, #0
   17480:	strdne	r4, [lr]
   17484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17488:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1748c:	mov	r7, r0
   17490:	ldr	r6, [pc, #72]	; 174e0 <__assert_fail@plt+0x6458>
   17494:	ldr	r5, [pc, #72]	; 174e4 <__assert_fail@plt+0x645c>
   17498:	add	r6, pc, r6
   1749c:	add	r5, pc, r5
   174a0:	sub	r6, r6, r5
   174a4:	mov	r8, r1
   174a8:	mov	r9, r2
   174ac:	bl	10e04 <calloc@plt-0x20>
   174b0:	asrs	r6, r6, #2
   174b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   174b8:	mov	r4, #0
   174bc:	add	r4, r4, #1
   174c0:	ldr	r3, [r5], #4
   174c4:	mov	r2, r9
   174c8:	mov	r1, r8
   174cc:	mov	r0, r7
   174d0:	blx	r3
   174d4:	cmp	r6, r4
   174d8:	bne	174bc <__assert_fail@plt+0x6434>
   174dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   174e0:	andeq	r1, r1, ip, ror #20
   174e4:	andeq	r1, r1, r4, ror #20
   174e8:	bx	lr
   174ec:	ldr	r3, [pc, #12]	; 17500 <__assert_fail@plt+0x6478>
   174f0:	mov	r1, #0
   174f4:	add	r3, pc, r3
   174f8:	ldr	r2, [r3]
   174fc:	b	10fb0 <__cxa_atexit@plt>
   17500:	andeq	r1, r1, r8, ror #23

Disassembly of section .fini:

00017504 <.fini>:
   17504:	push	{r3, lr}
   17508:	pop	{r3, pc}
