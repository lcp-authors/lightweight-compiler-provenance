
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011274 <.init>:
   11274:	push	{r3, lr}
   11278:	bl	115fc <__assert_fail@plt+0x50>
   1127c:	pop	{r3, pc}

Disassembly of section .plt:

00011280 <calloc@plt-0x14>:
   11280:	push	{lr}		; (str lr, [sp, #-4]!)
   11284:	ldr	lr, [pc, #4]	; 11290 <calloc@plt-0x4>
   11288:	add	lr, pc, lr
   1128c:	ldr	pc, [lr, #8]!
   11290:	andeq	r7, r1, r0, ror sp

00011294 <calloc@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #94208	; 0x17000
   1129c:	ldr	pc, [ip, #3440]!	; 0xd70

000112a0 <fputs_unlocked@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #94208	; 0x17000
   112a8:	ldr	pc, [ip, #3432]!	; 0xd68

000112ac <raise@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #94208	; 0x17000
   112b4:	ldr	pc, [ip, #3424]!	; 0xd60

000112b8 <strcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #94208	; 0x17000
   112c0:	ldr	pc, [ip, #3416]!	; 0xd58

000112c4 <posix_fadvise64@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #94208	; 0x17000
   112cc:	ldr	pc, [ip, #3408]!	; 0xd50

000112d0 <read@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #94208	; 0x17000
   112d8:	ldr	pc, [ip, #3400]!	; 0xd48

000112dc <fflush@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #94208	; 0x17000
   112e4:	ldr	pc, [ip, #3392]!	; 0xd40

000112e8 <wcwidth@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #94208	; 0x17000
   112f0:	ldr	pc, [ip, #3384]!	; 0xd38

000112f4 <memmove@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #94208	; 0x17000
   112fc:	ldr	pc, [ip, #3376]!	; 0xd30

00011300 <free@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #94208	; 0x17000
   11308:	ldr	pc, [ip, #3368]!	; 0xd28

0001130c <ferror@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #94208	; 0x17000
   11314:	ldr	pc, [ip, #3360]!	; 0xd20

00011318 <_exit@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #94208	; 0x17000
   11320:	ldr	pc, [ip, #3352]!	; 0xd18

00011324 <memcpy@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #94208	; 0x17000
   1132c:	ldr	pc, [ip, #3344]!	; 0xd10

00011330 <mbsinit@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #94208	; 0x17000
   11338:	ldr	pc, [ip, #3336]!	; 0xd08

0001133c <dcgettext@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #94208	; 0x17000
   11344:	ldr	pc, [ip, #3328]!	; 0xd00

00011348 <sysconf@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #94208	; 0x17000
   11350:	ldr	pc, [ip, #3320]!	; 0xcf8

00011354 <realloc@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #94208	; 0x17000
   1135c:	ldr	pc, [ip, #3312]!	; 0xcf0

00011360 <textdomain@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #94208	; 0x17000
   11368:	ldr	pc, [ip, #3304]!	; 0xce8

0001136c <iswcntrl@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #94208	; 0x17000
   11374:	ldr	pc, [ip, #3296]!	; 0xce0

00011378 <rawmemchr@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #94208	; 0x17000
   11380:	ldr	pc, [ip, #3288]!	; 0xcd8

00011384 <iswprint@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #94208	; 0x17000
   1138c:	ldr	pc, [ip, #3280]!	; 0xcd0

00011390 <__fxstat64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #94208	; 0x17000
   11398:	ldr	pc, [ip, #3272]!	; 0xcc8

0001139c <fwrite@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #94208	; 0x17000
   113a4:	ldr	pc, [ip, #3264]!	; 0xcc0

000113a8 <lseek64@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #94208	; 0x17000
   113b0:	ldr	pc, [ip, #3256]!	; 0xcb8

000113b4 <__ctype_get_mb_cur_max@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #94208	; 0x17000
   113bc:	ldr	pc, [ip, #3248]!	; 0xcb0

000113c0 <__fpending@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #94208	; 0x17000
   113c8:	ldr	pc, [ip, #3240]!	; 0xca8

000113cc <mbrtowc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #94208	; 0x17000
   113d4:	ldr	pc, [ip, #3232]!	; 0xca0

000113d8 <error@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #94208	; 0x17000
   113e0:	ldr	pc, [ip, #3224]!	; 0xc98

000113e4 <open64@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #94208	; 0x17000
   113ec:	ldr	pc, [ip, #3216]!	; 0xc90

000113f0 <getenv@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #94208	; 0x17000
   113f8:	ldr	pc, [ip, #3208]!	; 0xc88

000113fc <sysinfo@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #94208	; 0x17000
   11404:	ldr	pc, [ip, #3200]!	; 0xc80

00011408 <malloc@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #94208	; 0x17000
   11410:	ldr	pc, [ip, #3192]!	; 0xc78

00011414 <__libc_start_main@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #94208	; 0x17000
   1141c:	ldr	pc, [ip, #3184]!	; 0xc70

00011420 <__freading@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #94208	; 0x17000
   11428:	ldr	pc, [ip, #3176]!	; 0xc68

0001142c <__gmon_start__@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #94208	; 0x17000
   11434:	ldr	pc, [ip, #3168]!	; 0xc60

00011438 <getopt_long@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #94208	; 0x17000
   11440:	ldr	pc, [ip, #3160]!	; 0xc58

00011444 <__ctype_b_loc@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #94208	; 0x17000
   1144c:	ldr	pc, [ip, #3152]!	; 0xc50

00011450 <exit@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #94208	; 0x17000
   11458:	ldr	pc, [ip, #3144]!	; 0xc48

0001145c <feof@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #94208	; 0x17000
   11464:	ldr	pc, [ip, #3136]!	; 0xc40

00011468 <iswspace@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #94208	; 0x17000
   11470:	ldr	pc, [ip, #3128]!	; 0xc38

00011474 <bcmp@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #94208	; 0x17000
   1147c:	ldr	pc, [ip, #3120]!	; 0xc30

00011480 <strlen@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #94208	; 0x17000
   11488:	ldr	pc, [ip, #3112]!	; 0xc28

0001148c <strchr@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #94208	; 0x17000
   11494:	ldr	pc, [ip, #3104]!	; 0xc20

00011498 <getpagesize@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #94208	; 0x17000
   114a0:	ldr	pc, [ip, #3096]!	; 0xc18

000114a4 <__errno_location@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #94208	; 0x17000
   114ac:	ldr	pc, [ip, #3088]!	; 0xc10

000114b0 <__cxa_atexit@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #94208	; 0x17000
   114b8:	ldr	pc, [ip, #3080]!	; 0xc08

000114bc <setvbuf@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #94208	; 0x17000
   114c4:	ldr	pc, [ip, #3072]!	; 0xc00

000114c8 <memset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #94208	; 0x17000
   114d0:	ldr	pc, [ip, #3064]!	; 0xbf8

000114d4 <btowc@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #94208	; 0x17000
   114dc:	ldr	pc, [ip, #3056]!	; 0xbf0

000114e0 <fgetc@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #94208	; 0x17000
   114e8:	ldr	pc, [ip, #3048]!	; 0xbe8

000114ec <__printf_chk@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #94208	; 0x17000
   114f4:	ldr	pc, [ip, #3040]!	; 0xbe0

000114f8 <fileno@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #94208	; 0x17000
   11500:	ldr	pc, [ip, #3032]!	; 0xbd8

00011504 <__fprintf_chk@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #94208	; 0x17000
   1150c:	ldr	pc, [ip, #3024]!	; 0xbd0

00011510 <fclose@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #94208	; 0x17000
   11518:	ldr	pc, [ip, #3016]!	; 0xbc8

0001151c <fseeko64@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #94208	; 0x17000
   11524:	ldr	pc, [ip, #3008]!	; 0xbc0

00011528 <__overflow@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #94208	; 0x17000
   11530:	ldr	pc, [ip, #3000]!	; 0xbb8

00011534 <setlocale@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #94208	; 0x17000
   1153c:	ldr	pc, [ip, #2992]!	; 0xbb0

00011540 <strrchr@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #94208	; 0x17000
   11548:	ldr	pc, [ip, #2984]!	; 0xba8

0001154c <nl_langinfo@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #94208	; 0x17000
   11554:	ldr	pc, [ip, #2976]!	; 0xba0

00011558 <fopen64@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #94208	; 0x17000
   11560:	ldr	pc, [ip, #2968]!	; 0xb98

00011564 <bindtextdomain@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #94208	; 0x17000
   1156c:	ldr	pc, [ip, #2960]!	; 0xb90

00011570 <getdelim@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #94208	; 0x17000
   11578:	ldr	pc, [ip, #2952]!	; 0xb88

0001157c <__xstat64@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #94208	; 0x17000
   11584:	ldr	pc, [ip, #2944]!	; 0xb80

00011588 <strncmp@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #94208	; 0x17000
   11590:	ldr	pc, [ip, #2936]!	; 0xb78

00011594 <abort@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #94208	; 0x17000
   1159c:	ldr	pc, [ip, #2928]!	; 0xb70

000115a0 <close@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #94208	; 0x17000
   115a8:	ldr	pc, [ip, #2920]!	; 0xb68

000115ac <__assert_fail@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #94208	; 0x17000
   115b4:	ldr	pc, [ip, #2912]!	; 0xb60

Disassembly of section .text:

000115c0 <_obstack_begin@@Base-0x57c4>:
   115c0:	mov	fp, #0
   115c4:	mov	lr, #0
   115c8:	pop	{r1}		; (ldr r1, [sp], #4)
   115cc:	mov	r2, sp
   115d0:	push	{r2}		; (str r2, [sp, #-4]!)
   115d4:	push	{r0}		; (str r0, [sp, #-4]!)
   115d8:	ldr	ip, [pc, #16]	; 115f0 <__assert_fail@plt+0x44>
   115dc:	push	{ip}		; (str ip, [sp, #-4]!)
   115e0:	ldr	r0, [pc, #12]	; 115f4 <__assert_fail@plt+0x48>
   115e4:	ldr	r3, [pc, #12]	; 115f8 <__assert_fail@plt+0x4c>
   115e8:	bl	11414 <__libc_start_main@plt>
   115ec:	bl	11594 <abort@plt>
   115f0:	strdeq	r7, [r1], -r0
   115f4:	andeq	r1, r1, r0, asr r9
   115f8:	muleq	r1, r0, r7
   115fc:	ldr	r3, [pc, #20]	; 11618 <__assert_fail@plt+0x6c>
   11600:	ldr	r2, [pc, #20]	; 1161c <__assert_fail@plt+0x70>
   11604:	add	r3, pc, r3
   11608:	ldr	r2, [r3, r2]
   1160c:	cmp	r2, #0
   11610:	bxeq	lr
   11614:	b	1142c <__gmon_start__@plt>
   11618:	strdeq	r7, [r1], -r4
   1161c:	andeq	r0, r0, r8, lsl r1
   11620:	ldr	r0, [pc, #24]	; 11640 <__assert_fail@plt+0x94>
   11624:	ldr	r3, [pc, #24]	; 11644 <__assert_fail@plt+0x98>
   11628:	cmp	r3, r0
   1162c:	bxeq	lr
   11630:	ldr	r3, [pc, #16]	; 11648 <__assert_fail@plt+0x9c>
   11634:	cmp	r3, #0
   11638:	bxeq	lr
   1163c:	bx	r3
   11640:	andeq	r9, r2, r4, ror r1
   11644:	andeq	r9, r2, r4, ror r1
   11648:	andeq	r0, r0, r0
   1164c:	ldr	r0, [pc, #36]	; 11678 <__assert_fail@plt+0xcc>
   11650:	ldr	r1, [pc, #36]	; 1167c <__assert_fail@plt+0xd0>
   11654:	sub	r1, r1, r0
   11658:	asr	r1, r1, #2
   1165c:	add	r1, r1, r1, lsr #31
   11660:	asrs	r1, r1, #1
   11664:	bxeq	lr
   11668:	ldr	r3, [pc, #16]	; 11680 <__assert_fail@plt+0xd4>
   1166c:	cmp	r3, #0
   11670:	bxeq	lr
   11674:	bx	r3
   11678:	andeq	r9, r2, r4, ror r1
   1167c:	andeq	r9, r2, r4, ror r1
   11680:	andeq	r0, r0, r0
   11684:	push	{r4, lr}
   11688:	ldr	r4, [pc, #24]	; 116a8 <__assert_fail@plt+0xfc>
   1168c:	ldrb	r3, [r4]
   11690:	cmp	r3, #0
   11694:	popne	{r4, pc}
   11698:	bl	11620 <__assert_fail@plt+0x74>
   1169c:	mov	r3, #1
   116a0:	strb	r3, [r4]
   116a4:	pop	{r4, pc}
   116a8:	muleq	r2, ip, r1
   116ac:	b	1164c <__assert_fail@plt+0xa0>
   116b0:	push	{fp, lr}
   116b4:	mov	fp, sp
   116b8:	sub	sp, sp, #56	; 0x38
   116bc:	mov	r4, r0
   116c0:	cmp	r0, #0
   116c4:	bne	11908 <__assert_fail@plt+0x35c>
   116c8:	movw	r1, #30787	; 0x7843
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	movt	r1, #1
   116d8:	bl	1133c <dcgettext@plt>
   116dc:	mov	r1, r0
   116e0:	movw	r0, #37356	; 0x91ec
   116e4:	movt	r0, #2
   116e8:	ldr	r2, [r0]
   116ec:	mov	r0, #1
   116f0:	mov	r3, r2
   116f4:	bl	114ec <__printf_chk@plt>
   116f8:	movw	r1, #30858	; 0x788a
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	1133c <dcgettext@plt>
   1170c:	movw	r7, #37268	; 0x9194
   11710:	movt	r7, #2
   11714:	ldr	r1, [r7]
   11718:	bl	112a0 <fputs_unlocked@plt>
   1171c:	movw	r1, #32167	; 0x7da7
   11720:	mov	r0, #0
   11724:	mov	r2, #5
   11728:	movt	r1, #1
   1172c:	bl	1133c <dcgettext@plt>
   11730:	ldr	r1, [r7]
   11734:	bl	112a0 <fputs_unlocked@plt>
   11738:	movw	r1, #31052	; 0x794c
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	movt	r1, #1
   11748:	bl	1133c <dcgettext@plt>
   1174c:	ldr	r1, [r7]
   11750:	bl	112a0 <fputs_unlocked@plt>
   11754:	movw	r1, #31353	; 0x7a79
   11758:	mov	r0, #0
   1175c:	mov	r2, #5
   11760:	movt	r1, #1
   11764:	bl	1133c <dcgettext@plt>
   11768:	ldr	r1, [r7]
   1176c:	bl	112a0 <fputs_unlocked@plt>
   11770:	movw	r1, #31654	; 0x7ba6
   11774:	mov	r0, #0
   11778:	mov	r2, #5
   1177c:	movt	r1, #1
   11780:	bl	1133c <dcgettext@plt>
   11784:	ldr	r1, [r7]
   11788:	bl	112a0 <fputs_unlocked@plt>
   1178c:	movw	r1, #31699	; 0x7bd3
   11790:	mov	r0, #0
   11794:	mov	r2, #5
   11798:	movt	r1, #1
   1179c:	bl	1133c <dcgettext@plt>
   117a0:	ldr	r1, [r7]
   117a4:	bl	112a0 <fputs_unlocked@plt>
   117a8:	movw	r0, #32768	; 0x8000
   117ac:	mov	r2, #48	; 0x30
   117b0:	mov	r6, sp
   117b4:	movw	r5, #31753	; 0x7c09
   117b8:	movt	r0, #1
   117bc:	movt	r5, #1
   117c0:	add	r1, r0, #32
   117c4:	add	r3, r0, #16
   117c8:	vld1.64	{d18-d19}, [r0], r2
   117cc:	vld1.64	{d16-d17}, [r1]
   117d0:	vld1.64	{d20-d21}, [r3]
   117d4:	vldr	d22, [r0]
   117d8:	add	r1, r6, #32
   117dc:	add	r0, r6, #16
   117e0:	vst1.64	{d16-d17}, [r1]
   117e4:	movw	r1, #32223	; 0x7ddf
   117e8:	vst1.64	{d20-d21}, [r0]
   117ec:	mov	r0, r6
   117f0:	movt	r1, #1
   117f4:	vst1.64	{d18-d19}, [r0], r2
   117f8:	vstr	d22, [r0]
   117fc:	mov	r0, r5
   11800:	bl	112b8 <strcmp@plt>
   11804:	cmp	r0, #0
   11808:	ldrne	r1, [r6, #8]!
   1180c:	cmpne	r1, #0
   11810:	bne	117fc <__assert_fail@plt+0x250>
   11814:	movw	r1, #32318	; 0x7e3e
   11818:	ldr	r6, [r6, #4]
   1181c:	mov	r0, #0
   11820:	mov	r2, #5
   11824:	movt	r1, #1
   11828:	bl	1133c <dcgettext@plt>
   1182c:	movw	r2, #31802	; 0x7c3a
   11830:	movw	r3, #32341	; 0x7e55
   11834:	mov	r1, r0
   11838:	mov	r0, #1
   1183c:	movt	r2, #1
   11840:	movt	r3, #1
   11844:	bl	114ec <__printf_chk@plt>
   11848:	cmp	r6, #0
   1184c:	mov	r0, #5
   11850:	mov	r1, #0
   11854:	moveq	r6, r5
   11858:	bl	11534 <setlocale@plt>
   1185c:	cmp	r0, #0
   11860:	beq	11898 <__assert_fail@plt+0x2ec>
   11864:	movw	r1, #32381	; 0x7e7d
   11868:	mov	r2, #3
   1186c:	movt	r1, #1
   11870:	bl	11588 <strncmp@plt>
   11874:	cmp	r0, #0
   11878:	beq	11898 <__assert_fail@plt+0x2ec>
   1187c:	movw	r1, #32385	; 0x7e81
   11880:	mov	r0, #0
   11884:	mov	r2, #5
   11888:	movt	r1, #1
   1188c:	bl	1133c <dcgettext@plt>
   11890:	ldr	r1, [r7]
   11894:	bl	112a0 <fputs_unlocked@plt>
   11898:	movw	r1, #32456	; 0x7ec8
   1189c:	mov	r0, #0
   118a0:	mov	r2, #5
   118a4:	movt	r1, #1
   118a8:	bl	1133c <dcgettext@plt>
   118ac:	movw	r2, #32341	; 0x7e55
   118b0:	mov	r1, r0
   118b4:	mov	r0, #1
   118b8:	mov	r3, r5
   118bc:	movt	r2, #1
   118c0:	bl	114ec <__printf_chk@plt>
   118c4:	movw	r1, #32483	; 0x7ee3
   118c8:	mov	r0, #0
   118cc:	mov	r2, #5
   118d0:	movt	r1, #1
   118d4:	bl	1133c <dcgettext@plt>
   118d8:	mov	r1, r0
   118dc:	movw	r0, #32251	; 0x7dfb
   118e0:	movw	r3, #32533	; 0x7f15
   118e4:	cmp	r6, r5
   118e8:	mov	r2, r6
   118ec:	movt	r0, #1
   118f0:	movt	r3, #1
   118f4:	moveq	r3, r0
   118f8:	mov	r0, #1
   118fc:	bl	114ec <__printf_chk@plt>
   11900:	mov	r0, r4
   11904:	bl	11450 <exit@plt>
   11908:	movw	r0, #37256	; 0x9188
   1190c:	movw	r1, #30748	; 0x781c
   11910:	mov	r2, #5
   11914:	movt	r0, #2
   11918:	movt	r1, #1
   1191c:	ldr	r5, [r0]
   11920:	mov	r0, #0
   11924:	bl	1133c <dcgettext@plt>
   11928:	mov	r2, r0
   1192c:	movw	r0, #37356	; 0x91ec
   11930:	mov	r1, #1
   11934:	movt	r0, #2
   11938:	ldr	r3, [r0]
   1193c:	mov	r0, r5
   11940:	bl	11504 <__fprintf_chk@plt>
   11944:	mov	r0, r4
   11948:	bl	11450 <exit@plt>
   1194c:	nop	{0}
   11950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11954:	add	fp, sp, #28
   11958:	sub	sp, sp, #4
   1195c:	vpush	{d8-d10}
   11960:	sub	sp, sp, #312	; 0x138
   11964:	mov	r6, r0
   11968:	ldr	r0, [r1]
   1196c:	mov	r5, r1
   11970:	bl	13e18 <__assert_fail@plt+0x286c>
   11974:	movw	r1, #32533	; 0x7f15
   11978:	mov	r0, #6
   1197c:	movt	r1, #1
   11980:	bl	11534 <setlocale@plt>
   11984:	movw	r4, #31806	; 0x7c3e
   11988:	movw	r1, #31756	; 0x7c0c
   1198c:	movt	r4, #1
   11990:	movt	r1, #1
   11994:	mov	r0, r4
   11998:	bl	11564 <bindtextdomain@plt>
   1199c:	mov	r0, r4
   119a0:	bl	11360 <textdomain@plt>
   119a4:	movw	r0, #14396	; 0x383c
   119a8:	movt	r0, #1
   119ac:	bl	177f4 <_obstack_memory_used@@Base+0x6ec>
   119b0:	bl	11498 <getpagesize@plt>
   119b4:	movw	r1, #37280	; 0x91a0
   119b8:	mov	r2, #1
   119bc:	mov	r3, #0
   119c0:	mov	r4, #0
   119c4:	movt	r1, #2
   119c8:	str	r0, [r1]
   119cc:	movw	r0, #37268	; 0x9194
   119d0:	mov	r1, #0
   119d4:	movt	r0, #2
   119d8:	ldr	r0, [r0]
   119dc:	bl	114bc <setvbuf@plt>
   119e0:	movw	r0, #31780	; 0x7c24
   119e4:	movt	r0, #1
   119e8:	bl	113f0 <getenv@plt>
   119ec:	movw	r1, #37296	; 0x91b0
   119f0:	movw	r9, #37285	; 0x91a5
   119f4:	movw	r8, #37289	; 0x91a9
   119f8:	cmp	r0, #0
   119fc:	movw	sl, #31796	; 0x7c34
   11a00:	movw	r7, #32608	; 0x7f60
   11a04:	movt	r1, #2
   11a08:	movt	r9, #2
   11a0c:	movt	r8, #2
   11a10:	movwne	r0, #1
   11a14:	movt	sl, #1
   11a18:	movt	r7, #1
   11a1c:	str	r4, [r1]
   11a20:	str	r4, [r1, #4]
   11a24:	movw	r1, #37304	; 0x91b8
   11a28:	strb	r4, [r9]
   11a2c:	strb	r4, [r8]
   11a30:	movt	r1, #2
   11a34:	str	r4, [r1]
   11a38:	str	r4, [r1, #4]
   11a3c:	movw	r1, #37312	; 0x91c0
   11a40:	movt	r1, #2
   11a44:	str	r4, [r1]
   11a48:	str	r4, [r1, #4]
   11a4c:	movw	r1, #37320	; 0x91c8
   11a50:	movt	r1, #2
   11a54:	str	r4, [r1]
   11a58:	str	r4, [r1, #4]
   11a5c:	movw	r1, #37328	; 0x91d0
   11a60:	movt	r1, #2
   11a64:	str	r4, [r1]
   11a68:	str	r4, [r1, #4]
   11a6c:	movw	r1, #37286	; 0x91a6
   11a70:	movt	r1, #2
   11a74:	strb	r4, [r1]
   11a78:	movw	r1, #37287	; 0x91a7
   11a7c:	movt	r1, #2
   11a80:	strb	r4, [r1]
   11a84:	movw	r1, #37288	; 0x91a8
   11a88:	movt	r1, #2
   11a8c:	strb	r4, [r1]
   11a90:	movw	r1, #37284	; 0x91a4
   11a94:	movt	r1, #2
   11a98:	strb	r0, [r1]
   11a9c:	mov	r0, #0
   11aa0:	str	r0, [sp, #44]	; 0x2c
   11aa4:	mov	r0, r6
   11aa8:	mov	r1, r5
   11aac:	mov	r2, sl
   11ab0:	mov	r3, r7
   11ab4:	str	r4, [sp]
   11ab8:	bl	11438 <getopt_long@plt>
   11abc:	cmp	r0, #75	; 0x4b
   11ac0:	ble	11be8 <__assert_fail@plt+0x63c>
   11ac4:	sub	r1, r0, #76	; 0x4c
   11ac8:	cmp	r1, #43	; 0x2b
   11acc:	bhi	11b94 <__assert_fail@plt+0x5e8>
   11ad0:	add	r2, pc, #4
   11ad4:	mov	r0, r9
   11ad8:	ldr	pc, [r2, r1, lsl #2]
   11adc:	andeq	r1, r1, ip, lsl #23
   11ae0:	andeq	r2, r1, ip, asr #9
   11ae4:	andeq	r2, r1, ip, asr #9
   11ae8:	andeq	r2, r1, ip, asr #9
   11aec:	andeq	r2, r1, ip, asr #9
   11af0:	andeq	r2, r1, ip, asr #9
   11af4:	andeq	r2, r1, ip, asr #9
   11af8:	andeq	r2, r1, ip, asr #9
   11afc:	andeq	r2, r1, ip, asr #9
   11b00:	andeq	r2, r1, ip, asr #9
   11b04:	andeq	r2, r1, ip, asr #9
   11b08:	andeq	r2, r1, ip, asr #9
   11b0c:	andeq	r2, r1, ip, asr #9
   11b10:	andeq	r2, r1, ip, asr #9
   11b14:	andeq	r2, r1, ip, asr #9
   11b18:	andeq	r2, r1, ip, asr #9
   11b1c:	andeq	r2, r1, ip, asr #9
   11b20:	andeq	r2, r1, ip, asr #9
   11b24:	andeq	r2, r1, ip, asr #9
   11b28:	andeq	r2, r1, ip, asr #9
   11b2c:	andeq	r2, r1, ip, asr #9
   11b30:	andeq	r2, r1, ip, asr #9
   11b34:	andeq	r2, r1, ip, asr #9
   11b38:	andeq	r1, r1, r0, asr #23
   11b3c:	andeq	r2, r1, ip, asr #9
   11b40:	andeq	r2, r1, ip, asr #9
   11b44:	andeq	r2, r1, ip, asr #9
   11b48:	andeq	r2, r1, ip, asr #9
   11b4c:	andeq	r2, r1, ip, asr #9
   11b50:	andeq	r2, r1, ip, asr #9
   11b54:	andeq	r2, r1, ip, asr #9
   11b58:	andeq	r2, r1, ip, asr #9
   11b5c:	andeq	r1, r1, ip, lsr #23
   11b60:	andeq	r1, r1, r0, lsr #23
   11b64:	andeq	r2, r1, ip, asr #9
   11b68:	andeq	r2, r1, ip, asr #9
   11b6c:	andeq	r2, r1, ip, asr #9
   11b70:	andeq	r2, r1, ip, asr #9
   11b74:	andeq	r2, r1, ip, asr #9
   11b78:	andeq	r2, r1, ip, asr #9
   11b7c:	andeq	r2, r1, ip, asr #9
   11b80:	andeq	r2, r1, ip, asr #9
   11b84:	andeq	r2, r1, ip, asr #9
   11b88:			; <UNDEFINED> instruction: 0x00011bb8
   11b8c:	mov	r0, r8
   11b90:	b	11bc0 <__assert_fail@plt+0x614>
   11b94:	cmp	r0, #256	; 0x100
   11b98:	beq	11aa4 <__assert_fail@plt+0x4f8>
   11b9c:	b	11bcc <__assert_fail@plt+0x620>
   11ba0:	movw	r0, #37286	; 0x91a6
   11ba4:	movt	r0, #2
   11ba8:	b	11bc0 <__assert_fail@plt+0x614>
   11bac:	movw	r0, #37288	; 0x91a8
   11bb0:	movt	r0, #2
   11bb4:	b	11bc0 <__assert_fail@plt+0x614>
   11bb8:	movw	r0, #37287	; 0x91a7
   11bbc:	movt	r0, #2
   11bc0:	mov	r1, #1
   11bc4:	strb	r1, [r0]
   11bc8:	b	11aa4 <__assert_fail@plt+0x4f8>
   11bcc:	movw	r1, #257	; 0x101
   11bd0:	cmp	r0, r1
   11bd4:	bne	124cc <__assert_fail@plt+0xf20>
   11bd8:	movw	r0, #37272	; 0x9198
   11bdc:	movt	r0, #2
   11be0:	ldr	r0, [r0]
   11be4:	b	11aa0 <__assert_fail@plt+0x4f4>
   11be8:	cmn	r0, #1
   11bec:	bne	12454 <__assert_fail@plt+0xea8>
   11bf0:	movw	r4, #37288	; 0x91a8
   11bf4:	movt	r4, #2
   11bf8:	ldrb	r0, [r4]
   11bfc:	cmp	r0, #0
   11c00:	bne	11c60 <__assert_fail@plt+0x6b4>
   11c04:	movw	r0, #37287	; 0x91a7
   11c08:	movt	r0, #2
   11c0c:	ldrb	r1, [r0]
   11c10:	cmp	r1, #0
   11c14:	bne	11c60 <__assert_fail@plt+0x6b4>
   11c18:	movw	r1, #37286	; 0x91a6
   11c1c:	movt	r1, #2
   11c20:	ldrb	r1, [r1]
   11c24:	cmp	r1, #0
   11c28:	bne	11c60 <__assert_fail@plt+0x6b4>
   11c2c:	movw	r1, #37285	; 0x91a5
   11c30:	movt	r1, #2
   11c34:	ldrb	r2, [r1]
   11c38:	cmp	r2, #0
   11c3c:	bne	11c60 <__assert_fail@plt+0x6b4>
   11c40:	movw	r2, #37289	; 0x91a9
   11c44:	movt	r2, #2
   11c48:	ldrb	r2, [r2]
   11c4c:	cmp	r2, #0
   11c50:	moveq	r2, #1
   11c54:	strbeq	r2, [r0]
   11c58:	strbeq	r2, [r1]
   11c5c:	strbeq	r2, [r4]
   11c60:	movw	r7, #37248	; 0x9180
   11c64:	ldr	r1, [sp, #44]	; 0x2c
   11c68:	movt	r7, #2
   11c6c:	ldr	r0, [r7]
   11c70:	cmp	r1, #0
   11c74:	beq	11cf8 <__assert_fail@plt+0x74c>
   11c78:	cmp	r0, r6
   11c7c:	blt	124f4 <__assert_fail@plt+0xf48>
   11c80:	ldr	r6, [sp, #44]	; 0x2c
   11c84:	movw	r1, #32962	; 0x80c2
   11c88:	movt	r1, #1
   11c8c:	mov	r0, r6
   11c90:	bl	112b8 <strcmp@plt>
   11c94:	cmp	r0, #0
   11c98:	beq	11d18 <__assert_fail@plt+0x76c>
   11c9c:	movw	r1, #31983	; 0x7cef
   11ca0:	mov	r0, r6
   11ca4:	movt	r1, #1
   11ca8:	bl	11558 <fopen64@plt>
   11cac:	mov	r5, r0
   11cb0:	cmp	r0, #0
   11cb4:	bne	11d24 <__assert_fail@plt+0x778>
   11cb8:	bl	114a4 <__errno_location@plt>
   11cbc:	movw	r1, #31912	; 0x7ca8
   11cc0:	ldr	r4, [r0]
   11cc4:	mov	r0, #0
   11cc8:	mov	r2, #5
   11ccc:	movt	r1, #1
   11cd0:	bl	1133c <dcgettext@plt>
   11cd4:	mov	r5, r0
   11cd8:	mov	r0, #4
   11cdc:	mov	r1, r6
   11ce0:	bl	15544 <__assert_fail@plt+0x3f98>
   11ce4:	mov	r3, r0
   11ce8:	mov	r0, #1
   11cec:	mov	r1, r4
   11cf0:	mov	r2, r5
   11cf4:	bl	113d8 <error@plt>
   11cf8:	subs	r9, r6, r0
   11cfc:	movw	r7, #37336	; 0x91d8
   11d00:	movt	r7, #2
   11d04:	addgt	r7, r5, r0, lsl #2
   11d08:	movle	r9, #1
   11d0c:	mov	r0, r7
   11d10:	bl	136ac <__assert_fail@plt+0x2100>
   11d14:	b	11da4 <__assert_fail@plt+0x7f8>
   11d18:	movw	r0, #37264	; 0x9190
   11d1c:	movt	r0, #2
   11d20:	ldr	r5, [r0]
   11d24:	mov	r0, r5
   11d28:	bl	114f8 <fileno@plt>
   11d2c:	mov	r1, r0
   11d30:	add	r2, sp, #56	; 0x38
   11d34:	mov	r0, #3
   11d38:	bl	11390 <__fxstat64@plt>
   11d3c:	cmp	r0, #0
   11d40:	bne	11d94 <__assert_fail@plt+0x7e8>
   11d44:	ldr	r0, [sp, #72]	; 0x48
   11d48:	and	r0, r0, #61440	; 0xf000
   11d4c:	cmp	r0, #32768	; 0x8000
   11d50:	bne	11d94 <__assert_fail@plt+0x7e8>
   11d54:	ldr	r0, [sp, #104]	; 0x68
   11d58:	ldr	r1, [sp, #108]	; 0x6c
   11d5c:	bl	175bc <_obstack_memory_used@@Base+0x4b4>
   11d60:	vldr	d9, [pc, #608]	; 11fc8 <__assert_fail@plt+0xa1c>
   11d64:	vmov	d8, r0, r1
   11d68:	bl	13d20 <__assert_fail@plt+0x2774>
   11d6c:	vmov.f64	d10, #96	; 0x3f000000  0.5
   11d70:	vmul.f64	d16, d0, d10
   11d74:	vcmpe.f64	d16, d9
   11d78:	vmrs	APSR_nzcv, fpscr
   11d7c:	bgt	11d88 <__assert_fail@plt+0x7dc>
   11d80:	bl	13d20 <__assert_fail@plt+0x2774>
   11d84:	vmul.f64	d9, d0, d10
   11d88:	vcmpe.f64	d9, d8
   11d8c:	vmrs	APSR_nzcv, fpscr
   11d90:	bge	12404 <__assert_fail@plt+0xe58>
   11d94:	mov	r0, r5
   11d98:	bl	136dc <__assert_fail@plt+0x2130>
   11d9c:	mov	r7, #0
   11da0:	mov	r9, #0
   11da4:	mov	r1, #0
   11da8:	cmp	r0, #0
   11dac:	beq	124c8 <__assert_fail@plt+0xf1c>
   11db0:	cmp	r9, #0
   11db4:	str	r1, [sp, #40]	; 0x28
   11db8:	str	r0, [sp, #48]	; 0x30
   11dbc:	mov	r0, r9
   11dc0:	mov	r1, #112	; 0x70
   11dc4:	movweq	r0, #1
   11dc8:	bl	166d4 <__assert_fail@plt+0x5128>
   11dcc:	cmp	r9, #0
   11dd0:	str	r0, [sp, #52]	; 0x34
   11dd4:	beq	11e2c <__assert_fail@plt+0x880>
   11dd8:	cmp	r9, #1
   11ddc:	bne	11e3c <__assert_fail@plt+0x890>
   11de0:	movw	r1, #37287	; 0x91a7
   11de4:	ldrb	r0, [r4]
   11de8:	movt	r1, #2
   11dec:	ldrb	r1, [r1]
   11df0:	add	r0, r1, r0
   11df4:	movw	r1, #37286	; 0x91a6
   11df8:	movt	r1, #2
   11dfc:	ldrb	r1, [r1]
   11e00:	add	r0, r0, r1
   11e04:	movw	r1, #37285	; 0x91a5
   11e08:	movt	r1, #2
   11e0c:	ldrb	r1, [r1]
   11e10:	add	r0, r0, r1
   11e14:	movw	r1, #37289	; 0x91a9
   11e18:	movt	r1, #2
   11e1c:	ldrb	r1, [r1]
   11e20:	add	r0, r0, r1
   11e24:	cmp	r0, #1
   11e28:	bne	11e3c <__assert_fail@plt+0x890>
   11e2c:	ldr	r1, [sp, #52]	; 0x34
   11e30:	mov	r0, #1
   11e34:	str	r0, [r1]
   11e38:	b	11eac <__assert_fail@plt+0x900>
   11e3c:	ldr	r0, [sp, #52]	; 0x34
   11e40:	movw	r8, #32962	; 0x80c2
   11e44:	mov	r5, r9
   11e48:	movt	r8, #1
   11e4c:	add	r6, r0, #8
   11e50:	b	11e78 <__assert_fail@plt+0x8cc>
   11e54:	mov	r0, #3
   11e58:	mov	r1, #0
   11e5c:	mov	r2, r6
   11e60:	bl	11390 <__fxstat64@plt>
   11e64:	str	r0, [r6, #-8]
   11e68:	add	r7, r7, #4
   11e6c:	subs	r5, r5, #1
   11e70:	add	r6, r6, #112	; 0x70
   11e74:	beq	11eac <__assert_fail@plt+0x900>
   11e78:	ldr	r4, [r7]
   11e7c:	cmp	r4, #0
   11e80:	beq	11e54 <__assert_fail@plt+0x8a8>
   11e84:	mov	r0, r4
   11e88:	mov	r1, r8
   11e8c:	bl	112b8 <strcmp@plt>
   11e90:	cmp	r0, #0
   11e94:	beq	11e54 <__assert_fail@plt+0x8a8>
   11e98:	mov	r0, #3
   11e9c:	mov	r1, r4
   11ea0:	mov	r2, r6
   11ea4:	bl	1157c <__xstat64@plt>
   11ea8:	b	11e64 <__assert_fail@plt+0x8b8>
   11eac:	mov	r4, #1
   11eb0:	cmp	r9, #0
   11eb4:	mov	r5, #1
   11eb8:	beq	11f8c <__assert_fail@plt+0x9e0>
   11ebc:	ldr	r0, [sp, #52]	; 0x34
   11ec0:	mov	r5, #1
   11ec4:	ldr	r2, [r0]
   11ec8:	cmp	r2, #0
   11ecc:	bgt	11f8c <__assert_fail@plt+0x9e0>
   11ed0:	ldr	r1, [sp, #52]	; 0x34
   11ed4:	sub	r0, r9, #1
   11ed8:	mov	r7, #0
   11edc:	mov	r8, #1
   11ee0:	mov	r6, #0
   11ee4:	add	r1, r1, #112	; 0x70
   11ee8:	cmp	r2, #0
   11eec:	bne	11f3c <__assert_fail@plt+0x990>
   11ef0:	b	11f04 <__assert_fail@plt+0x958>
   11ef4:	ldr	r2, [r1], #112	; 0x70
   11ef8:	sub	r0, r0, #1
   11efc:	cmp	r2, #0
   11f00:	bne	11f3c <__assert_fail@plt+0x990>
   11f04:	ldr	r2, [r1, #-88]	; 0xffffffa8
   11f08:	and	r2, r2, #61440	; 0xf000
   11f0c:	cmp	r2, #32768	; 0x8000
   11f10:	bne	11f2c <__assert_fail@plt+0x980>
   11f14:	ldrd	r2, [r1, #-56]	; 0xffffffc8
   11f18:	adds	r7, r2, r7
   11f1c:	adc	r6, r3, r6
   11f20:	cmp	r0, #0
   11f24:	bne	11ef4 <__assert_fail@plt+0x948>
   11f28:	b	11f44 <__assert_fail@plt+0x998>
   11f2c:	mov	r8, #7
   11f30:	cmp	r0, #0
   11f34:	bne	11ef4 <__assert_fail@plt+0x948>
   11f38:	b	11f44 <__assert_fail@plt+0x998>
   11f3c:	cmp	r0, #0
   11f40:	bne	11ef4 <__assert_fail@plt+0x948>
   11f44:	subs	r0, r7, #10
   11f48:	mov	r5, #1
   11f4c:	sbcs	r0, r6, #0
   11f50:	bcc	11f84 <__assert_fail@plt+0x9d8>
   11f54:	mov	r5, #1
   11f58:	mov	r0, r7
   11f5c:	mov	r1, r6
   11f60:	mov	r2, #10
   11f64:	mov	r3, #0
   11f68:	bl	1761c <_obstack_memory_used@@Base+0x514>
   11f6c:	rsbs	r2, r7, #99	; 0x63
   11f70:	add	r5, r5, #1
   11f74:	mov	r7, r0
   11f78:	rscs	r2, r6, #0
   11f7c:	mov	r6, r1
   11f80:	bcc	11f58 <__assert_fail@plt+0x9ac>
   11f84:	cmp	r5, r8
   11f88:	movlt	r5, r8
   11f8c:	movw	r0, #37340	; 0x91dc
   11f90:	add	r1, sp, #56	; 0x38
   11f94:	movt	r0, #2
   11f98:	str	r5, [r0]
   11f9c:	ldr	r5, [sp, #48]	; 0x30
   11fa0:	mov	r0, r5
   11fa4:	bl	13714 <__assert_fail@plt+0x2168>
   11fa8:	ldr	r6, [sp, #44]	; 0x2c
   11fac:	cmp	r0, #0
   11fb0:	beq	12244 <__assert_fail@plt+0xc98>
   11fb4:	mov	sl, r0
   11fb8:	mov	r8, #1
   11fbc:	mov	r7, #0
   11fc0:	b	12068 <__assert_fail@plt+0xabc>
   11fc4:	nop	{0}
   11fc8:	andeq	r0, r0, r0
   11fcc:	cmnmi	r4, r0
   11fd0:	cmp	r6, #0
   11fd4:	beq	121b8 <__assert_fail@plt+0xc0c>
   11fd8:	mov	r0, r5
   11fdc:	bl	137cc <__assert_fail@plt+0x2220>
   11fe0:	mov	r5, r0
   11fe4:	mov	r0, #0
   11fe8:	mov	r1, #3
   11fec:	mov	r2, r6
   11ff0:	mov	r4, #0
   11ff4:	bl	157c0 <__assert_fail@plt+0x4214>
   11ff8:	movw	r1, #32120	; 0x7d78
   11ffc:	mov	r6, r0
   12000:	mov	r0, #0
   12004:	mov	r2, #5
   12008:	movt	r1, #1
   1200c:	bl	1133c <dcgettext@plt>
   12010:	movw	r2, #32150	; 0x7d96
   12014:	str	r5, [sp]
   12018:	mov	r3, r6
   1201c:	ldr	r5, [sp, #48]	; 0x30
   12020:	ldr	r6, [sp, #44]	; 0x2c
   12024:	str	r0, [sp, #4]
   12028:	mov	r0, #0
   1202c:	mov	r1, #0
   12030:	movt	r2, #1
   12034:	bl	113d8 <error@plt>
   12038:	cmp	r9, #0
   1203c:	beq	12234 <__assert_fail@plt+0xc88>
   12040:	mov	r0, r5
   12044:	add	r1, sp, #56	; 0x38
   12048:	bl	13714 <__assert_fail@plt+0x2168>
   1204c:	cmp	r4, #0
   12050:	mov	sl, r0
   12054:	add	r7, r7, #1
   12058:	movwne	r4, #1
   1205c:	cmp	r0, #0
   12060:	mov	r8, r4
   12064:	beq	12244 <__assert_fail@plt+0xc98>
   12068:	cmp	r6, #0
   1206c:	mov	r0, #0
   12070:	beq	120ec <__assert_fail@plt+0xb40>
   12074:	movw	r1, #32962	; 0x80c2
   12078:	mov	r0, r6
   1207c:	movt	r1, #1
   12080:	bl	112b8 <strcmp@plt>
   12084:	cmp	r0, #0
   12088:	mov	r0, #0
   1208c:	bne	120ec <__assert_fail@plt+0xb40>
   12090:	movw	r1, #32962	; 0x80c2
   12094:	mov	r0, sl
   12098:	movt	r1, #1
   1209c:	bl	112b8 <strcmp@plt>
   120a0:	cmp	r0, #0
   120a4:	mov	r0, #0
   120a8:	bne	120ec <__assert_fail@plt+0xb40>
   120ac:	movw	r1, #32057	; 0x7d39
   120b0:	mov	r0, #0
   120b4:	mov	r2, #5
   120b8:	movt	r1, #1
   120bc:	bl	1133c <dcgettext@plt>
   120c0:	mov	r5, r0
   120c4:	mov	r0, #4
   120c8:	mov	r1, sl
   120cc:	bl	15544 <__assert_fail@plt+0x3f98>
   120d0:	mov	r2, r5
   120d4:	ldr	r5, [sp, #48]	; 0x30
   120d8:	mov	r3, r0
   120dc:	mov	r0, #0
   120e0:	mov	r1, #0
   120e4:	bl	113d8 <error@plt>
   120e8:	mov	r0, #1
   120ec:	ldrb	r1, [sl]
   120f0:	cmp	r1, #0
   120f4:	beq	11fd0 <__assert_fail@plt+0xa24>
   120f8:	mov	r4, #0
   120fc:	cmp	r0, #0
   12100:	bne	12038 <__assert_fail@plt+0xa8c>
   12104:	cmp	r9, #0
   12108:	ldr	r1, [sp, #52]	; 0x34
   1210c:	mov	r0, r9
   12110:	movne	r0, r7
   12114:	rsb	r0, r0, r0, lsl #3
   12118:	add	r5, r1, r0, lsl #4
   1211c:	movw	r1, #32962	; 0x80c2
   12120:	mov	r0, sl
   12124:	movt	r1, #1
   12128:	bl	112b8 <strcmp@plt>
   1212c:	cmp	r0, #0
   12130:	beq	121f4 <__assert_fail@plt+0xc48>
   12134:	mov	r0, sl
   12138:	mov	r1, #0
   1213c:	bl	113e4 <open64@plt>
   12140:	cmn	r0, #1
   12144:	beq	1217c <__assert_fail@plt+0xbd0>
   12148:	mov	r6, r0
   1214c:	mov	r0, #0
   12150:	mov	r1, sl
   12154:	mov	r2, r5
   12158:	str	r0, [sp]
   1215c:	str	r0, [sp, #4]
   12160:	mov	r0, r6
   12164:	bl	127c0 <__assert_fail@plt+0x1214>
   12168:	mov	r5, r0
   1216c:	mov	r0, r6
   12170:	bl	115a0 <close@plt>
   12174:	cmp	r0, #0
   12178:	beq	121b0 <__assert_fail@plt+0xc04>
   1217c:	bl	114a4 <__errno_location@plt>
   12180:	ldr	r6, [r0]
   12184:	mov	r0, #0
   12188:	mov	r1, #3
   1218c:	mov	r2, sl
   12190:	mov	r5, #0
   12194:	bl	157c0 <__assert_fail@plt+0x4214>
   12198:	movw	r2, #32860	; 0x805c
   1219c:	mov	r3, r0
   121a0:	mov	r0, #0
   121a4:	mov	r1, r6
   121a8:	movt	r2, #1
   121ac:	bl	113d8 <error@plt>
   121b0:	ldr	r6, [sp, #44]	; 0x2c
   121b4:	b	12224 <__assert_fail@plt+0xc78>
   121b8:	movw	r1, #32120	; 0x7d78
   121bc:	mov	r0, #0
   121c0:	mov	r2, #5
   121c4:	mov	r4, #0
   121c8:	movt	r1, #1
   121cc:	bl	1133c <dcgettext@plt>
   121d0:	movw	r2, #32860	; 0x805c
   121d4:	mov	r3, r0
   121d8:	mov	r0, #0
   121dc:	mov	r1, #0
   121e0:	movt	r2, #1
   121e4:	bl	113d8 <error@plt>
   121e8:	cmp	r9, #0
   121ec:	bne	12040 <__assert_fail@plt+0xa94>
   121f0:	b	12234 <__assert_fail@plt+0xc88>
   121f4:	movw	r0, #37344	; 0x91e0
   121f8:	mov	r1, #1
   121fc:	mov	r2, r5
   12200:	movt	r0, #2
   12204:	strb	r1, [r0]
   12208:	mvn	r0, #0
   1220c:	mov	r1, sl
   12210:	str	r0, [sp]
   12214:	str	r0, [sp, #4]
   12218:	mov	r0, #0
   1221c:	bl	127c0 <__assert_fail@plt+0x1214>
   12220:	mov	r5, r0
   12224:	and	r4, r8, r5
   12228:	ldr	r5, [sp, #48]	; 0x30
   1222c:	cmp	r9, #0
   12230:	bne	12040 <__assert_fail@plt+0xa94>
   12234:	ldr	r0, [sp, #52]	; 0x34
   12238:	mov	r1, #1
   1223c:	str	r1, [r0]
   12240:	b	12040 <__assert_fail@plt+0xa94>
   12244:	ldr	r0, [sp, #56]	; 0x38
   12248:	cmp	r0, #2
   1224c:	beq	122b4 <__assert_fail@plt+0xd08>
   12250:	cmp	r0, #4
   12254:	bne	124c0 <__assert_fail@plt+0xf14>
   12258:	bl	114a4 <__errno_location@plt>
   1225c:	movw	r1, #31970	; 0x7ce2
   12260:	ldr	r6, [r0]
   12264:	mov	r0, #0
   12268:	mov	r2, #5
   1226c:	mov	r4, #0
   12270:	movt	r1, #1
   12274:	bl	1133c <dcgettext@plt>
   12278:	ldr	r2, [sp, #44]	; 0x2c
   1227c:	mov	r5, r0
   12280:	mov	r0, #0
   12284:	mov	r1, #3
   12288:	bl	157c0 <__assert_fail@plt+0x4214>
   1228c:	mov	r3, r0
   12290:	mov	r0, #0
   12294:	mov	r1, r6
   12298:	mov	r2, r5
   1229c:	bl	113d8 <error@plt>
   122a0:	ldr	r5, [sp, #48]	; 0x30
   122a4:	ldr	r6, [sp, #40]	; 0x28
   122a8:	cmp	r6, #0
   122ac:	bne	12310 <__assert_fail@plt+0xd64>
   122b0:	b	12318 <__assert_fail@plt+0xd6c>
   122b4:	cmp	r6, #0
   122b8:	bne	122a4 <__assert_fail@plt+0xcf8>
   122bc:	ldr	r6, [sp, #40]	; 0x28
   122c0:	eors	r0, r4, #1
   122c4:	bne	12308 <__assert_fail@plt+0xd5c>
   122c8:	mov	r0, r5
   122cc:	bl	137cc <__assert_fail@plt+0x2220>
   122d0:	cmp	r0, #0
   122d4:	bne	12308 <__assert_fail@plt+0xd5c>
   122d8:	movw	r1, #37344	; 0x91e0
   122dc:	ldr	r2, [sp, #52]	; 0x34
   122e0:	mov	r0, #1
   122e4:	movt	r1, #2
   122e8:	strb	r0, [r1]
   122ec:	mvn	r0, #0
   122f0:	mov	r1, #0
   122f4:	str	r0, [sp]
   122f8:	str	r0, [sp, #4]
   122fc:	mov	r0, #0
   12300:	bl	127c0 <__assert_fail@plt+0x1214>
   12304:	and	r4, r4, r0
   12308:	cmp	r6, #0
   1230c:	beq	12318 <__assert_fail@plt+0xd6c>
   12310:	add	r0, sp, #164	; 0xa4
   12314:	bl	15c38 <__assert_fail@plt+0x468c>
   12318:	mov	r0, r5
   1231c:	bl	137cc <__assert_fail@plt+0x2220>
   12320:	cmp	r0, #2
   12324:	bcc	123bc <__assert_fail@plt+0xe10>
   12328:	movw	r0, #37320	; 0x91c8
   1232c:	mov	r2, #5
   12330:	movt	r0, #2
   12334:	ldr	r1, [r0]
   12338:	ldr	r0, [r0, #4]
   1233c:	str	r0, [sp, #44]	; 0x2c
   12340:	movw	r0, #37328	; 0x91d0
   12344:	str	r1, [sp, #40]	; 0x28
   12348:	movt	r0, #2
   1234c:	ldr	r1, [r0]
   12350:	ldr	r0, [r0, #4]
   12354:	str	r0, [sp, #36]	; 0x24
   12358:	movw	r0, #37312	; 0x91c0
   1235c:	str	r1, [sp, #32]
   12360:	movw	r1, #32161	; 0x7da1
   12364:	movt	r0, #2
   12368:	movt	r1, #1
   1236c:	ldm	r0, {r5, r7}
   12370:	movw	r0, #37304	; 0x91b8
   12374:	movt	r0, #2
   12378:	ldm	r0, {r6, r9}
   1237c:	movw	r0, #37296	; 0x91b0
   12380:	movt	r0, #2
   12384:	ldm	r0, {r8, sl}
   12388:	mov	r0, #0
   1238c:	bl	1133c <dcgettext@plt>
   12390:	add	r3, sp, #32
   12394:	str	r0, [sp, #24]
   12398:	str	r5, [sp]
   1239c:	ldr	r5, [sp, #48]	; 0x30
   123a0:	str	r7, [sp, #4]
   123a4:	str	r6, [sp, #8]
   123a8:	str	r9, [sp, #12]
   123ac:	str	r8, [sp, #16]
   123b0:	str	sl, [sp, #20]
   123b4:	ldm	r3, {r0, r1, r2, r3}
   123b8:	bl	125c0 <__assert_fail@plt+0x1014>
   123bc:	mov	r0, r5
   123c0:	bl	137f0 <__assert_fail@plt+0x2244>
   123c4:	ldr	r0, [sp, #52]	; 0x34
   123c8:	bl	13a5c <__assert_fail@plt+0x24b0>
   123cc:	movw	r0, #37344	; 0x91e0
   123d0:	movt	r0, #2
   123d4:	ldrb	r0, [r0]
   123d8:	cmp	r0, #1
   123dc:	bne	123f0 <__assert_fail@plt+0xe44>
   123e0:	mov	r0, #0
   123e4:	bl	115a0 <close@plt>
   123e8:	cmp	r0, #0
   123ec:	bne	12570 <__assert_fail@plt+0xfc4>
   123f0:	eor	r0, r4, #1
   123f4:	sub	sp, fp, #56	; 0x38
   123f8:	vpop	{d8-d10}
   123fc:	add	sp, sp, #4
   12400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12404:	add	r6, sp, #164	; 0xa4
   12408:	mov	r0, r6
   1240c:	bl	15bb8 <__assert_fail@plt+0x460c>
   12410:	mov	r0, r5
   12414:	mov	r1, r6
   12418:	bl	15c6c <__assert_fail@plt+0x46c0>
   1241c:	cmp	r0, #0
   12420:	beq	12588 <__assert_fail@plt+0xfdc>
   12424:	mov	r0, r5
   12428:	bl	13964 <__assert_fail@plt+0x23b8>
   1242c:	cmp	r0, #0
   12430:	bne	12588 <__assert_fail@plt+0xfdc>
   12434:	ldr	r7, [sp, #168]	; 0xa8
   12438:	ldr	r9, [sp, #164]	; 0xa4
   1243c:	mov	r0, r7
   12440:	bl	136ac <__assert_fail@plt+0x2100>
   12444:	mov	r1, #1
   12448:	cmp	r0, #0
   1244c:	bne	11db0 <__assert_fail@plt+0x804>
   12450:	b	124c8 <__assert_fail@plt+0xf1c>
   12454:	cmn	r0, #3
   12458:	bne	124b0 <__assert_fail@plt+0xf04>
   1245c:	movw	r0, #37160	; 0x9128
   12460:	movw	r2, #31827	; 0x7c53
   12464:	mov	r1, #0
   12468:	movw	r7, #31816	; 0x7c48
   1246c:	movt	r0, #2
   12470:	movt	r2, #1
   12474:	str	r1, [sp, #8]
   12478:	movw	r1, #31753	; 0x7c09
   1247c:	movt	r7, #1
   12480:	movt	r1, #1
   12484:	ldr	r3, [r0]
   12488:	movw	r0, #37268	; 0x9194
   1248c:	str	r2, [sp, #4]
   12490:	movw	r2, #31802	; 0x7c3a
   12494:	str	r7, [sp]
   12498:	movt	r0, #2
   1249c:	movt	r2, #1
   124a0:	ldr	r0, [r0]
   124a4:	bl	163d0 <__assert_fail@plt+0x4e24>
   124a8:	mov	r0, #0
   124ac:	bl	11450 <exit@plt>
   124b0:	cmn	r0, #2
   124b4:	bne	124cc <__assert_fail@plt+0xf20>
   124b8:	mov	r0, #0
   124bc:	bl	116b0 <__assert_fail@plt+0x104>
   124c0:	cmp	r0, #3
   124c4:	bne	124d4 <__assert_fail@plt+0xf28>
   124c8:	bl	16b40 <__assert_fail@plt+0x5594>
   124cc:	mov	r0, #1
   124d0:	bl	116b0 <__assert_fail@plt+0x104>
   124d4:	movw	r0, #31985	; 0x7cf1
   124d8:	movw	r1, #32025	; 0x7d19
   124dc:	movw	r3, #32034	; 0x7d22
   124e0:	movw	r2, #938	; 0x3aa
   124e4:	movt	r0, #1
   124e8:	movt	r1, #1
   124ec:	movt	r3, #1
   124f0:	bl	115ac <__assert_fail@plt>
   124f4:	movw	r1, #31843	; 0x7c63
   124f8:	mov	r0, #0
   124fc:	mov	r2, #5
   12500:	movt	r1, #1
   12504:	bl	1133c <dcgettext@plt>
   12508:	mov	r4, r0
   1250c:	ldr	r0, [r7]
   12510:	ldr	r1, [r5, r0, lsl #2]
   12514:	mov	r0, #4
   12518:	bl	15544 <__assert_fail@plt+0x3f98>
   1251c:	mov	r3, r0
   12520:	mov	r0, #0
   12524:	mov	r1, #0
   12528:	mov	r2, r4
   1252c:	bl	113d8 <error@plt>
   12530:	movw	r0, #37256	; 0x9188
   12534:	movw	r1, #31860	; 0x7c74
   12538:	mov	r2, #5
   1253c:	movt	r0, #2
   12540:	movt	r1, #1
   12544:	ldr	r4, [r0]
   12548:	mov	r0, #0
   1254c:	bl	1133c <dcgettext@plt>
   12550:	movw	r2, #33152	; 0x8180
   12554:	mov	r3, r0
   12558:	mov	r0, r4
   1255c:	mov	r1, #1
   12560:	movt	r2, #1
   12564:	bl	11504 <__fprintf_chk@plt>
   12568:	mov	r0, #1
   1256c:	bl	116b0 <__assert_fail@plt+0x104>
   12570:	bl	114a4 <__errno_location@plt>
   12574:	ldr	r1, [r0]
   12578:	movw	r2, #32962	; 0x80c2
   1257c:	mov	r0, #1
   12580:	movt	r2, #1
   12584:	bl	113d8 <error@plt>
   12588:	movw	r1, #31939	; 0x7cc3
   1258c:	mov	r0, #0
   12590:	mov	r2, #5
   12594:	movt	r1, #1
   12598:	bl	1133c <dcgettext@plt>
   1259c:	ldr	r1, [sp, #44]	; 0x2c
   125a0:	mov	r4, r0
   125a4:	mov	r0, #4
   125a8:	bl	15544 <__assert_fail@plt+0x3f98>
   125ac:	mov	r3, r0
   125b0:	mov	r0, #1
   125b4:	mov	r1, #0
   125b8:	mov	r2, r4
   125bc:	bl	113d8 <error@plt>
   125c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   125c4:	add	fp, sp, #24
   125c8:	sub	sp, sp, #24
   125cc:	mov	r7, r2
   125d0:	movw	r2, #37288	; 0x91a8
   125d4:	movw	r8, #32824	; 0x8038
   125d8:	movw	r9, #37340	; 0x91dc
   125dc:	mov	r6, r3
   125e0:	movt	r2, #2
   125e4:	movt	r8, #1
   125e8:	movt	r9, #2
   125ec:	ldrb	r2, [r2]
   125f0:	cmp	r2, #1
   125f4:	bne	12624 <__assert_fail@plt+0x1078>
   125f8:	ldr	r4, [r9]
   125fc:	add	r2, sp, #3
   12600:	bl	13b2c <__assert_fail@plt+0x2580>
   12604:	movw	r5, #32824	; 0x8038
   12608:	mov	r3, r0
   1260c:	mov	r0, #1
   12610:	mov	r2, r4
   12614:	movt	r5, #1
   12618:	add	r1, r5, #1
   1261c:	bl	114ec <__printf_chk@plt>
   12620:	b	12628 <__assert_fail@plt+0x107c>
   12624:	add	r5, r8, #1
   12628:	movw	r0, #37287	; 0x91a7
   1262c:	movt	r0, #2
   12630:	ldrb	r0, [r0]
   12634:	cmp	r0, #1
   12638:	bne	1266c <__assert_fail@plt+0x10c0>
   1263c:	ldr	r4, [r9]
   12640:	add	r2, sp, #3
   12644:	mov	r0, r7
   12648:	mov	r1, r6
   1264c:	bl	13b2c <__assert_fail@plt+0x2580>
   12650:	mov	r3, r0
   12654:	mov	r0, #1
   12658:	mov	r1, r5
   1265c:	mov	r2, r4
   12660:	bl	114ec <__printf_chk@plt>
   12664:	movw	r5, #32824	; 0x8038
   12668:	movt	r5, #1
   1266c:	movw	r0, #37286	; 0x91a6
   12670:	movt	r0, #2
   12674:	ldrb	r0, [r0]
   12678:	cmp	r0, #1
   1267c:	bne	126b0 <__assert_fail@plt+0x1104>
   12680:	ldr	r1, [fp, #12]
   12684:	ldr	r0, [fp, #8]
   12688:	ldr	r4, [r9]
   1268c:	add	r2, sp, #3
   12690:	bl	13b2c <__assert_fail@plt+0x2580>
   12694:	mov	r3, r0
   12698:	mov	r0, #1
   1269c:	mov	r1, r5
   126a0:	mov	r2, r4
   126a4:	bl	114ec <__printf_chk@plt>
   126a8:	movw	r5, #32824	; 0x8038
   126ac:	movt	r5, #1
   126b0:	movw	r0, #37285	; 0x91a5
   126b4:	movt	r0, #2
   126b8:	ldrb	r0, [r0]
   126bc:	cmp	r0, #1
   126c0:	bne	126f0 <__assert_fail@plt+0x1144>
   126c4:	ldr	r1, [fp, #20]
   126c8:	ldr	r0, [fp, #16]
   126cc:	ldr	r4, [r9]
   126d0:	add	r2, sp, #3
   126d4:	bl	13b2c <__assert_fail@plt+0x2580>
   126d8:	mov	r3, r0
   126dc:	mov	r0, #1
   126e0:	mov	r1, r5
   126e4:	mov	r2, r4
   126e8:	bl	114ec <__printf_chk@plt>
   126ec:	b	126f4 <__assert_fail@plt+0x1148>
   126f0:	mov	r8, r5
   126f4:	movw	r0, #37289	; 0x91a9
   126f8:	ldr	r5, [fp, #32]
   126fc:	movt	r0, #2
   12700:	ldrb	r0, [r0]
   12704:	cmp	r0, #1
   12708:	bne	12734 <__assert_fail@plt+0x1188>
   1270c:	ldr	r1, [fp, #28]
   12710:	ldr	r0, [fp, #24]
   12714:	ldr	r4, [r9]
   12718:	add	r2, sp, #3
   1271c:	bl	13b2c <__assert_fail@plt+0x2580>
   12720:	mov	r3, r0
   12724:	mov	r0, #1
   12728:	mov	r1, r8
   1272c:	mov	r2, r4
   12730:	bl	114ec <__printf_chk@plt>
   12734:	cmp	r5, #0
   12738:	beq	12778 <__assert_fail@plt+0x11cc>
   1273c:	mov	r0, r5
   12740:	mov	r1, #10
   12744:	bl	1148c <strchr@plt>
   12748:	cmp	r0, #0
   1274c:	beq	12764 <__assert_fail@plt+0x11b8>
   12750:	mov	r0, #0
   12754:	mov	r1, #3
   12758:	mov	r2, r5
   1275c:	bl	157c0 <__assert_fail@plt+0x4214>
   12760:	mov	r5, r0
   12764:	movw	r1, #32859	; 0x805b
   12768:	mov	r0, #1
   1276c:	mov	r2, r5
   12770:	movt	r1, #1
   12774:	bl	114ec <__printf_chk@plt>
   12778:	movw	r0, #37268	; 0x9194
   1277c:	movt	r0, #2
   12780:	ldr	r0, [r0]
   12784:	ldr	r1, [r0, #20]
   12788:	ldr	r2, [r0, #24]
   1278c:	cmp	r1, r2
   12790:	addcc	r2, r1, #1
   12794:	strcc	r2, [r0, #20]
   12798:	movcc	r0, #10
   1279c:	strbcc	r0, [r1]
   127a0:	subcc	sp, fp, #24
   127a4:	popcc	{r4, r5, r6, r7, r8, r9, fp, pc}
   127a8:	mov	r1, #10
   127ac:	bl	11528 <__overflow@plt>
   127b0:	sub	sp, fp, #24
   127b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   127b8:	nop	{0}
   127bc:	nop	{0}
   127c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c4:	add	fp, sp, #28
   127c8:	sub	sp, sp, #4
   127cc:	vpush	{d8-d10}
   127d0:	sub	sp, sp, #120	; 0x78
   127d4:	sub	sp, sp, #16384	; 0x4000
   127d8:	str	r0, [sp, #48]	; 0x30
   127dc:	mov	r4, r2
   127e0:	cmp	r1, #0
   127e4:	mov	r0, r1
   127e8:	str	r1, [sp, #32]
   127ec:	bne	12804 <__assert_fail@plt+0x1258>
   127f0:	movw	r1, #32593	; 0x7f51
   127f4:	mov	r0, #0
   127f8:	mov	r2, #5
   127fc:	movt	r1, #1
   12800:	bl	1133c <dcgettext@plt>
   12804:	str	r0, [sp, #28]
   12808:	bl	113b4 <__ctype_get_mb_cur_max@plt>
   1280c:	movw	r3, #37286	; 0x91a6
   12810:	cmp	r0, #1
   12814:	mov	r2, #0
   12818:	movw	r7, #37288	; 0x91a8
   1281c:	mov	r1, #0
   12820:	movt	r3, #2
   12824:	movwhi	r2, #1
   12828:	cmp	r0, #2
   1282c:	mov	r0, #0
   12830:	movt	r7, #2
   12834:	movwcc	r0, #1
   12838:	ldrb	r3, [r3]
   1283c:	and	sl, r2, r3
   12840:	movw	r2, #37285	; 0x91a5
   12844:	and	r0, r3, r0
   12848:	movt	r2, #2
   1284c:	ldrb	r2, [r2]
   12850:	orr	r0, r2, r0
   12854:	movw	r2, #37287	; 0x91a7
   12858:	eor	r0, r0, #1
   1285c:	movt	r2, #2
   12860:	orr	r6, sl, r0
   12864:	movw	r0, #37289	; 0x91a9
   12868:	movt	r0, #2
   1286c:	ldrb	r2, [r2]
   12870:	tst	r6, #1
   12874:	ldrb	r0, [r0]
   12878:	orr	r5, r2, r0
   1287c:	ldrbeq	r0, [r7]
   12880:	cmpeq	r0, #0
   12884:	beq	128b4 <__assert_fail@plt+0x1308>
   12888:	mov	r0, #2
   1288c:	mov	r1, #0
   12890:	mov	r2, #0
   12894:	mov	r3, #0
   12898:	str	r0, [sp, #8]
   1289c:	ldr	r0, [sp, #48]	; 0x30
   128a0:	str	r1, [sp]
   128a4:	str	r1, [sp, #4]
   128a8:	bl	13924 <__assert_fail@plt+0x2378>
   128ac:	ldrb	r1, [r7]
   128b0:	b	128bc <__assert_fail@plt+0x1310>
   128b4:	tst	r5, #1
   128b8:	bne	12888 <__assert_fail@plt+0x12dc>
   128bc:	orr	r0, r5, r1
   128c0:	str	sl, [sp, #36]	; 0x24
   128c4:	orr	r0, r6, r0
   128c8:	tst	r0, #1
   128cc:	beq	12ce4 <__assert_fail@plt+0x1738>
   128d0:	orr	r0, sl, r5
   128d4:	tst	r0, #1
   128d8:	beq	12d50 <__assert_fail@plt+0x17a4>
   128dc:	bl	113b4 <__ctype_get_mb_cur_max@plt>
   128e0:	cmp	r0, #1
   128e4:	bls	12f74 <__assert_fail@plt+0x19c8>
   128e8:	mov	r0, #0
   128ec:	mov	r1, #0
   128f0:	mov	r8, #0
   128f4:	mov	r4, #0
   128f8:	mov	r7, #0
   128fc:	str	r0, [sp, #108]	; 0x6c
   12900:	str	r0, [sp, #104]	; 0x68
   12904:	mov	r0, #0
   12908:	str	r1, [sp, #44]	; 0x2c
   1290c:	str	r0, [sp, #40]	; 0x28
   12910:	mov	r0, #0
   12914:	str	r0, [sp, #64]	; 0x40
   12918:	mov	r0, #0
   1291c:	str	r0, [sp, #52]	; 0x34
   12920:	mov	r0, #0
   12924:	str	r0, [sp, #76]	; 0x4c
   12928:	mov	r0, #0
   1292c:	str	r0, [sp, #84]	; 0x54
   12930:	mov	r0, #0
   12934:	str	r0, [sp, #72]	; 0x48
   12938:	mov	r0, #0
   1293c:	str	r0, [sp, #68]	; 0x44
   12940:	mov	r0, #0
   12944:	str	r0, [sp, #80]	; 0x50
   12948:	mov	r0, #0
   1294c:	str	r0, [sp, #60]	; 0x3c
   12950:	mov	r0, #0
   12954:	str	r0, [sp, #56]	; 0x38
   12958:	mov	r5, #0
   1295c:	add	r0, sp, #112	; 0x70
   12960:	rsb	r2, r5, #16384	; 0x4000
   12964:	add	r1, r0, r5
   12968:	ldr	r0, [sp, #48]	; 0x30
   1296c:	bl	15ee8 <__assert_fail@plt+0x493c>
   12970:	cmp	r0, #0
   12974:	beq	13368 <__assert_fail@plt+0x1dbc>
   12978:	cmn	r0, #1
   1297c:	beq	13374 <__assert_fail@plt+0x1dc8>
   12980:	ldr	r1, [sp, #44]	; 0x2c
   12984:	add	r9, r0, r5
   12988:	add	sl, sp, #112	; 0x70
   1298c:	adds	r1, r1, r0
   12990:	ldr	r0, [sp, #40]	; 0x28
   12994:	str	r1, [sp, #44]	; 0x2c
   12998:	adc	r0, r0, #0
   1299c:	str	r0, [sp, #40]	; 0x28
   129a0:	tst	r7, #1
   129a4:	beq	129c8 <__assert_fail@plt+0x141c>
   129a8:	b	12a00 <__assert_fail@plt+0x1454>
   129ac:	sub	r9, r9, #1
   129b0:	add	sl, sl, #1
   129b4:	mov	r7, #1
   129b8:	cmp	r9, #0
   129bc:	beq	12958 <__assert_fail@plt+0x13ac>
   129c0:	tst	r7, #1
   129c4:	bne	12a00 <__assert_fail@plt+0x1454>
   129c8:	ldrb	r0, [sl]
   129cc:	movw	r2, #32864	; 0x8060
   129d0:	mov	r3, #1
   129d4:	movt	r2, #1
   129d8:	ubfx	r1, r0, #5, #3
   129dc:	ldr	r1, [r2, r1, lsl #2]
   129e0:	and	r2, r0, #31
   129e4:	tst	r1, r3, lsl r2
   129e8:	beq	12a00 <__assert_fail@plt+0x1454>
   129ec:	str	r0, [sp, #100]	; 0x64
   129f0:	mov	r6, #1
   129f4:	mov	r7, #0
   129f8:	mov	r1, #0
   129fc:	b	12a50 <__assert_fail@plt+0x14a4>
   12a00:	ldr	r5, [sp, #104]	; 0x68
   12a04:	ldr	r7, [sp, #108]	; 0x6c
   12a08:	add	r0, sp, #100	; 0x64
   12a0c:	mov	r1, sl
   12a10:	mov	r2, r9
   12a14:	add	r3, sp, #104	; 0x68
   12a18:	bl	13c38 <__assert_fail@plt+0x268c>
   12a1c:	cmn	r0, #1
   12a20:	beq	129ac <__assert_fail@plt+0x1400>
   12a24:	mov	r6, r0
   12a28:	cmn	r0, #2
   12a2c:	beq	12ca8 <__assert_fail@plt+0x16fc>
   12a30:	add	r0, sp, #104	; 0x68
   12a34:	bl	11330 <mbsinit@plt>
   12a38:	clz	r0, r0
   12a3c:	cmp	r6, #0
   12a40:	lsr	r7, r0, #5
   12a44:	beq	12ae8 <__assert_fail@plt+0x153c>
   12a48:	ldr	r0, [sp, #100]	; 0x64
   12a4c:	mov	r1, #1
   12a50:	sub	r2, r0, #9
   12a54:	cmp	r2, #23
   12a58:	bhi	12b4c <__assert_fail@plt+0x15a0>
   12a5c:	add	r3, pc, #0
   12a60:	ldr	pc, [r3, r2, lsl #2]
   12a64:	andeq	r2, r1, r4, asr #21
   12a68:	strdeq	r2, [r1], -r8
   12a6c:	strdeq	r2, [r1], -ip
   12a70:	andeq	r2, r1, r0, lsl fp
   12a74:	andeq	r2, r1, r0, lsl fp
   12a78:	andeq	r2, r1, ip, asr #22
   12a7c:	andeq	r2, r1, ip, asr #22
   12a80:	andeq	r2, r1, ip, asr #22
   12a84:	andeq	r2, r1, ip, asr #22
   12a88:	andeq	r2, r1, ip, asr #22
   12a8c:	andeq	r2, r1, ip, asr #22
   12a90:	andeq	r2, r1, ip, asr #22
   12a94:	andeq	r2, r1, ip, asr #22
   12a98:	andeq	r2, r1, ip, asr #22
   12a9c:	andeq	r2, r1, ip, asr #22
   12aa0:	andeq	r2, r1, ip, asr #22
   12aa4:	andeq	r2, r1, ip, asr #22
   12aa8:	andeq	r2, r1, ip, asr #22
   12aac:	andeq	r2, r1, ip, asr #22
   12ab0:	andeq	r2, r1, ip, asr #22
   12ab4:	andeq	r2, r1, ip, asr #22
   12ab8:	andeq	r2, r1, ip, asr #22
   12abc:	andeq	r2, r1, ip, asr #22
   12ac0:	andeq	r2, r1, r4, ror #23
   12ac4:	ldr	r1, [sp, #60]	; 0x3c
   12ac8:	and	r0, r1, #7
   12acc:	subs	r0, r1, r0
   12ad0:	ldr	r1, [sp, #56]	; 0x38
   12ad4:	sbc	r1, r1, #0
   12ad8:	adds	r0, r0, #8
   12adc:	str	r0, [sp, #60]	; 0x3c
   12ae0:	adc	r0, r1, #0
   12ae4:	b	12bf8 <__assert_fail@plt+0x164c>
   12ae8:	mov	r0, #0
   12aec:	mov	r6, #1
   12af0:	str	r0, [sp, #100]	; 0x64
   12af4:	b	12b54 <__assert_fail@plt+0x15a8>
   12af8:	ldr	r0, [sp, #64]	; 0x40
   12afc:	adds	r0, r0, #1
   12b00:	str	r0, [sp, #64]	; 0x40
   12b04:	ldr	r0, [sp, #52]	; 0x34
   12b08:	adc	r0, r0, #0
   12b0c:	str	r0, [sp, #52]	; 0x34
   12b10:	ldr	r2, [sp, #60]	; 0x3c
   12b14:	ldr	r1, [sp, #76]	; 0x4c
   12b18:	ldr	r3, [sp, #56]	; 0x38
   12b1c:	subs	r0, r8, r2
   12b20:	sbcs	r0, r1, r3
   12b24:	mov	r0, #0
   12b28:	movwcc	r0, #1
   12b2c:	cmp	r0, #0
   12b30:	mov	r0, #0
   12b34:	movne	r1, r3
   12b38:	str	r0, [sp, #60]	; 0x3c
   12b3c:	movne	r8, r2
   12b40:	mov	r0, #0
   12b44:	str	r1, [sp, #76]	; 0x4c
   12b48:	b	12bf8 <__assert_fail@plt+0x164c>
   12b4c:	cmp	r1, #0
   12b50:	beq	12c48 <__assert_fail@plt+0x169c>
   12b54:	bl	11384 <iswprint@plt>
   12b58:	cmp	r0, #0
   12b5c:	beq	12c24 <__assert_fail@plt+0x1678>
   12b60:	movw	r0, #37289	; 0x91a9
   12b64:	movt	r0, #2
   12b68:	ldrb	r0, [r0]
   12b6c:	cmp	r0, #1
   12b70:	bne	12b98 <__assert_fail@plt+0x15ec>
   12b74:	ldr	r0, [sp, #100]	; 0x64
   12b78:	bl	112e8 <wcwidth@plt>
   12b7c:	ldr	r1, [sp, #60]	; 0x3c
   12b80:	bic	r0, r0, r0, asr #31
   12b84:	adds	r1, r1, r0
   12b88:	ldr	r0, [sp, #56]	; 0x38
   12b8c:	str	r1, [sp, #60]	; 0x3c
   12b90:	adc	r0, r0, #0
   12b94:	str	r0, [sp, #56]	; 0x38
   12b98:	ldr	r0, [sp, #100]	; 0x64
   12b9c:	bl	11468 <iswspace@plt>
   12ba0:	cmp	r0, #0
   12ba4:	bne	12bfc <__assert_fail@plt+0x1650>
   12ba8:	movw	r0, #37284	; 0x91a4
   12bac:	movt	r0, #2
   12bb0:	ldrb	r0, [r0]
   12bb4:	cmp	r0, #0
   12bb8:	bne	12c84 <__assert_fail@plt+0x16d8>
   12bbc:	ldr	r0, [sp, #100]	; 0x64
   12bc0:	movw	r1, #8238	; 0x202e
   12bc4:	cmp	r0, r1
   12bc8:	bgt	12c8c <__assert_fail@plt+0x16e0>
   12bcc:	cmp	r0, #160	; 0xa0
   12bd0:	beq	12bfc <__assert_fail@plt+0x1650>
   12bd4:	movw	r1, #8199	; 0x2007
   12bd8:	cmp	r0, r1
   12bdc:	beq	12bfc <__assert_fail@plt+0x1650>
   12be0:	b	12c84 <__assert_fail@plt+0x16d8>
   12be4:	ldr	r0, [sp, #60]	; 0x3c
   12be8:	adds	r0, r0, #1
   12bec:	str	r0, [sp, #60]	; 0x3c
   12bf0:	ldr	r0, [sp, #56]	; 0x38
   12bf4:	adc	r0, r0, #0
   12bf8:	str	r0, [sp, #56]	; 0x38
   12bfc:	ldr	r0, [sp, #80]	; 0x50
   12c00:	ldr	r1, [sp, #72]	; 0x48
   12c04:	and	r0, r0, #1
   12c08:	adds	r1, r1, r0
   12c0c:	ldr	r0, [sp, #68]	; 0x44
   12c10:	str	r1, [sp, #72]	; 0x48
   12c14:	adc	r0, r0, #0
   12c18:	str	r0, [sp, #68]	; 0x44
   12c1c:	mov	r0, #0
   12c20:	str	r0, [sp, #80]	; 0x50
   12c24:	ldr	r0, [sp, #84]	; 0x54
   12c28:	adds	r4, r4, #1
   12c2c:	sub	r9, r9, r6
   12c30:	add	sl, sl, r6
   12c34:	adc	r0, r0, #0
   12c38:	str	r0, [sp, #84]	; 0x54
   12c3c:	cmp	r9, #0
   12c40:	bne	129c0 <__assert_fail@plt+0x1414>
   12c44:	b	12958 <__assert_fail@plt+0x13ac>
   12c48:	bl	11444 <__ctype_b_loc@plt>
   12c4c:	ldrb	r1, [sl]
   12c50:	ldr	r0, [r0]
   12c54:	add	r0, r0, r1, lsl #1
   12c58:	ldrh	r0, [r0]
   12c5c:	tst	r0, #16384	; 0x4000
   12c60:	beq	12c24 <__assert_fail@plt+0x1678>
   12c64:	ldr	r1, [sp, #60]	; 0x3c
   12c68:	adds	r1, r1, #1
   12c6c:	str	r1, [sp, #60]	; 0x3c
   12c70:	ldr	r1, [sp, #56]	; 0x38
   12c74:	adc	r1, r1, #0
   12c78:	tst	r0, #8192	; 0x2000
   12c7c:	str	r1, [sp, #56]	; 0x38
   12c80:	bne	12bfc <__assert_fail@plt+0x1650>
   12c84:	mov	r0, #1
   12c88:	b	12c20 <__assert_fail@plt+0x1674>
   12c8c:	movw	r1, #8239	; 0x202f
   12c90:	cmp	r0, r1
   12c94:	beq	12bfc <__assert_fail@plt+0x1650>
   12c98:	movw	r1, #8288	; 0x2060
   12c9c:	cmp	r0, r1
   12ca0:	beq	12bfc <__assert_fail@plt+0x1650>
   12ca4:	b	12c84 <__assert_fail@plt+0x16d8>
   12ca8:	str	r5, [sp, #104]	; 0x68
   12cac:	str	r7, [sp, #108]	; 0x6c
   12cb0:	mov	r7, #1
   12cb4:	cmp	r9, #0
   12cb8:	mov	r5, #0
   12cbc:	beq	1295c <__assert_fail@plt+0x13b0>
   12cc0:	cmp	r9, #16384	; 0x4000
   12cc4:	add	r0, sp, #112	; 0x70
   12cc8:	addeq	sl, sl, #1
   12ccc:	movweq	r9, #16383	; 0x3fff
   12cd0:	mov	r1, sl
   12cd4:	mov	r2, r9
   12cd8:	bl	112f4 <memmove@plt>
   12cdc:	mov	r5, r9
   12ce0:	b	1295c <__assert_fail@plt+0x13b0>
   12ce4:	ldr	r0, [r4]
   12ce8:	cmp	r0, #1
   12cec:	blt	12d04 <__assert_fail@plt+0x1758>
   12cf0:	ldr	r1, [sp, #48]	; 0x30
   12cf4:	add	r2, r4, #8
   12cf8:	mov	r0, #3
   12cfc:	bl	11390 <__fxstat64@plt>
   12d00:	str	r0, [r4]
   12d04:	mov	r7, #0
   12d08:	cmp	r0, #0
   12d0c:	mov	r6, #0
   12d10:	mov	r8, #0
   12d14:	bne	132a8 <__assert_fail@plt+0x1cfc>
   12d18:	ldr	r0, [r4, #24]
   12d1c:	and	r0, r0, #53248	; 0xd000
   12d20:	orr	r0, r0, #8192	; 0x2000
   12d24:	cmp	r0, #40960	; 0xa000
   12d28:	bne	132a0 <__assert_fail@plt+0x1cf4>
   12d2c:	ldr	r0, [r4, #60]	; 0x3c
   12d30:	cmp	r0, #0
   12d34:	bmi	132a0 <__assert_fail@plt+0x1cf4>
   12d38:	ldr	r5, [fp, #12]
   12d3c:	ldr	r6, [r4, #56]	; 0x38
   12d40:	cmn	r5, #1
   12d44:	ble	1359c <__assert_fail@plt+0x1ff0>
   12d48:	ldr	r3, [fp, #8]
   12d4c:	b	135bc <__assert_fail@plt+0x2010>
   12d50:	vmov.i32	d9, #0	; 0x00000000
   12d54:	vmov.i32	d10, #10	; 0x0000000a
   12d58:	mov	r0, #0
   12d5c:	add	r4, sp, #112	; 0x70
   12d60:	mov	r8, #0
   12d64:	mov	r5, #0
   12d68:	mov	sl, #0
   12d6c:	mov	r7, #0
   12d70:	str	r0, [sp, #44]	; 0x2c
   12d74:	b	12da4 <__assert_fail@plt+0x17f8>
   12d78:	movw	r2, #34953	; 0x8889
   12d7c:	ldr	r0, [sp, #64]	; 0x40
   12d80:	ldr	r8, [sp, #40]	; 0x28
   12d84:	mov	r5, #0
   12d88:	movt	r2, #34952	; 0x8888
   12d8c:	umull	r2, r3, r6, r2
   12d90:	subs	r0, sl, r0
   12d94:	sbc	r1, r7, r9
   12d98:	rsbs	r0, r0, r3, lsr #3
   12d9c:	rscs	r0, r1, #0
   12da0:	movwcs	r5, #1
   12da4:	ldr	r0, [sp, #48]	; 0x30
   12da8:	mov	r1, r4
   12dac:	mov	r2, #16384	; 0x4000
   12db0:	bl	15ee8 <__assert_fail@plt+0x493c>
   12db4:	cmp	r0, #0
   12db8:	beq	13210 <__assert_fail@plt+0x1c64>
   12dbc:	mov	r6, r0
   12dc0:	cmn	r0, #1
   12dc4:	beq	13220 <__assert_fail@plt+0x1c74>
   12dc8:	ldr	r0, [sp, #44]	; 0x2c
   12dcc:	mov	r1, r8
   12dd0:	add	r8, r4, r6
   12dd4:	str	sl, [sp, #64]	; 0x40
   12dd8:	adds	r0, r0, r6
   12ddc:	adc	r1, r1, #0
   12de0:	tst	r5, #1
   12de4:	str	r0, [sp, #44]	; 0x2c
   12de8:	str	r1, [sp, #40]	; 0x28
   12dec:	beq	12e38 <__assert_fail@plt+0x188c>
   12df0:	mov	r0, #10
   12df4:	mov	r1, #10
   12df8:	strb	r0, [r8]
   12dfc:	mov	r0, r4
   12e00:	bl	11378 <rawmemchr@plt>
   12e04:	cmp	r0, r8
   12e08:	mov	r9, r7
   12e0c:	bcs	12d78 <__assert_fail@plt+0x17cc>
   12e10:	ldr	sl, [sp, #64]	; 0x40
   12e14:	mov	r7, r9
   12e18:	adds	sl, sl, #1
   12e1c:	add	r0, r0, #1
   12e20:	mov	r1, #10
   12e24:	adc	r7, r7, #0
   12e28:	bl	11378 <rawmemchr@plt>
   12e2c:	cmp	r0, r8
   12e30:	bcc	12e18 <__assert_fail@plt+0x186c>
   12e34:	b	12d78 <__assert_fail@plt+0x17cc>
   12e38:	cmp	r6, #2
   12e3c:	mov	r9, r7
   12e40:	mov	r0, r4
   12e44:	bcc	12f3c <__assert_fail@plt+0x1990>
   12e48:	ldr	r0, [sp, #64]	; 0x40
   12e4c:	bic	ip, r6, #1
   12e50:	mov	r1, r9
   12e54:	mov	r2, #1
   12e58:	subs	r1, ip, #2
   12e5c:	add	r2, r2, r1, lsr #1
   12e60:	vmov.32	d8[0], r0
   12e64:	and	lr, r2, #1
   12e68:	vmov.32	d8[1], r9
   12e6c:	beq	12f60 <__assert_fail@plt+0x19b4>
   12e70:	vorr	q8, q4, q4
   12e74:	sub	r3, r2, lr
   12e78:	mov	r2, #0
   12e7c:	add	r0, sp, #96	; 0x60
   12e80:	add	r1, sp, #92	; 0x5c
   12e84:	add	r7, r4, r2
   12e88:	subs	r3, r3, #2
   12e8c:	add	r2, r2, #4
   12e90:	ldrh	r5, [r7]
   12e94:	strh	r5, [sp, #92]	; 0x5c
   12e98:	ldrh	r7, [r7, #2]
   12e9c:	strh	r7, [sp, #96]	; 0x60
   12ea0:	vld1.16	{d18[0]}, [r1 :16]
   12ea4:	vld1.16	{d19[0]}, [r0 :16]
   12ea8:	add	r7, pc, #992	; 0x3e0
   12eac:	vld1.64	{d22-d23}, [r7 :128]
   12eb0:	vmovl.u8	q10, d18
   12eb4:	vmovl.u8	q9, d19
   12eb8:	vmovl.u16	q10, d20
   12ebc:	vmovl.u16	q9, d18
   12ec0:	vceq.i32	d20, d20, d10
   12ec4:	vceq.i32	d18, d18, d10
   12ec8:	vmovl.u32	q10, d20
   12ecc:	vmovl.u32	q9, d18
   12ed0:	vand	q10, q10, q11
   12ed4:	vand	q9, q9, q11
   12ed8:	vadd.i64	q8, q8, q10
   12edc:	vadd.i64	q8, q8, q9
   12ee0:	bne	12e84 <__assert_fail@plt+0x18d8>
   12ee4:	cmp	lr, #0
   12ee8:	beq	12f20 <__assert_fail@plt+0x1974>
   12eec:	add	r1, r4, r2
   12ef0:	ldrh	r1, [r1]
   12ef4:	strh	r1, [sp, #88]	; 0x58
   12ef8:	add	r1, sp, #88	; 0x58
   12efc:	vld1.16	{d18[0]}, [r1 :16]
   12f00:	add	r1, pc, #904	; 0x388
   12f04:	vld1.64	{d20-d21}, [r1 :128]
   12f08:	vmovl.u8	q9, d18
   12f0c:	vmovl.u16	q9, d18
   12f10:	vceq.i32	d18, d18, d10
   12f14:	vmovl.u32	q9, d18
   12f18:	vand	q9, q9, q10
   12f1c:	vadd.i64	q8, q8, q9
   12f20:	vorr	d18, d17, d17
   12f24:	cmp	r6, ip
   12f28:	vadd.i64	q8, q8, q9
   12f2c:	vmov.32	r7, d16[1]
   12f30:	vmov.32	sl, d16[0]
   12f34:	beq	12d78 <__assert_fail@plt+0x17cc>
   12f38:	add	r0, r4, ip
   12f3c:	ldrb	r3, [r0], #1
   12f40:	adds	r1, sl, #1
   12f44:	adc	r2, r7, #0
   12f48:	cmp	r3, #10
   12f4c:	moveq	sl, r1
   12f50:	moveq	r7, r2
   12f54:	cmp	r8, r0
   12f58:	bne	12f3c <__assert_fail@plt+0x1990>
   12f5c:	b	12d78 <__assert_fail@plt+0x17cc>
   12f60:	mov	r2, #0
   12f64:	vorr	q8, q4, q4
   12f68:	cmp	lr, #0
   12f6c:	bne	12eec <__assert_fail@plt+0x1940>
   12f70:	b	12f20 <__assert_fail@plt+0x1974>
   12f74:	mov	r0, #0
   12f78:	mov	r7, #0
   12f7c:	add	r8, sp, #112	; 0x70
   12f80:	mov	r6, #0
   12f84:	mov	r4, #0
   12f88:	mov	sl, #0
   12f8c:	mov	r9, #0
   12f90:	str	r0, [sp, #40]	; 0x28
   12f94:	mov	r0, #0
   12f98:	str	r0, [sp, #64]	; 0x40
   12f9c:	mov	r0, #0
   12fa0:	str	r0, [sp, #52]	; 0x34
   12fa4:	mov	r0, #0
   12fa8:	str	r0, [sp, #76]	; 0x4c
   12fac:	mov	r0, #0
   12fb0:	str	r0, [sp, #80]	; 0x50
   12fb4:	mov	r0, #0
   12fb8:	str	r0, [sp, #84]	; 0x54
   12fbc:	b	12fec <__assert_fail@plt+0x1a40>
   12fc0:	add	r0, sp, #76	; 0x4c
   12fc4:	mov	r4, r2
   12fc8:	add	r8, sp, #112	; 0x70
   12fcc:	stm	r0, {r3, r6, r7}
   12fd0:	ldr	r7, [sp, #44]	; 0x2c
   12fd4:	ldr	r0, [sp, #72]	; 0x48
   12fd8:	mov	r6, ip
   12fdc:	adds	r7, r7, r0
   12fe0:	ldr	r0, [sp, #40]	; 0x28
   12fe4:	adc	r0, r0, #0
   12fe8:	str	r0, [sp, #40]	; 0x28
   12fec:	ldr	r0, [sp, #48]	; 0x30
   12ff0:	mov	r1, r8
   12ff4:	mov	r2, #16384	; 0x4000
   12ff8:	bl	15ee8 <__assert_fail@plt+0x493c>
   12ffc:	cmp	r0, #0
   13000:	beq	1340c <__assert_fail@plt+0x1e60>
   13004:	cmn	r0, #1
   13008:	beq	13418 <__assert_fail@plt+0x1e6c>
   1300c:	str	r7, [sp, #44]	; 0x2c
   13010:	add	r7, sp, #76	; 0x4c
   13014:	mov	ip, r6
   13018:	mov	r5, r0
   1301c:	mov	r2, r4
   13020:	str	r0, [sp, #72]	; 0x48
   13024:	ldm	r7, {r3, r6, r7}
   13028:	b	13080 <__assert_fail@plt+0x1ad4>
   1302c:	ldr	r0, [sp, #64]	; 0x40
   13030:	adds	r0, r0, #1
   13034:	str	r0, [sp, #64]	; 0x40
   13038:	ldr	r0, [sp, #52]	; 0x34
   1303c:	adc	r0, r0, #0
   13040:	str	r0, [sp, #52]	; 0x34
   13044:	subs	r0, ip, sl
   13048:	sbcs	r0, r3, r9
   1304c:	mov	r0, #0
   13050:	movwcc	r0, #1
   13054:	cmp	r0, #0
   13058:	movne	r3, r9
   1305c:	movne	ip, sl
   13060:	mov	sl, #0
   13064:	mov	r9, #0
   13068:	and	r0, r2, #1
   1306c:	mov	r2, #0
   13070:	adds	r6, r6, r0
   13074:	adc	r7, r7, #0
   13078:	subs	r5, r5, #1
   1307c:	beq	12fc0 <__assert_fail@plt+0x1a14>
   13080:	ldrb	r4, [r8], #1
   13084:	sub	r0, r4, #9
   13088:	cmp	r0, #23
   1308c:	bhi	13110 <__assert_fail@plt+0x1b64>
   13090:	add	r1, pc, #0
   13094:	ldr	pc, [r1, r0, lsl #2]
   13098:	strdeq	r3, [r1], -r8
   1309c:	andeq	r3, r1, ip, lsr #32
   130a0:	andeq	r3, r1, r8, rrx
   130a4:	andeq	r3, r1, r4, asr #32
   130a8:	andeq	r3, r1, r4, asr #32
   130ac:	andeq	r3, r1, r0, lsl r1
   130b0:	andeq	r3, r1, r0, lsl r1
   130b4:	andeq	r3, r1, r0, lsl r1
   130b8:	andeq	r3, r1, r0, lsl r1
   130bc:	andeq	r3, r1, r0, lsl r1
   130c0:	andeq	r3, r1, r0, lsl r1
   130c4:	andeq	r3, r1, r0, lsl r1
   130c8:	andeq	r3, r1, r0, lsl r1
   130cc:	andeq	r3, r1, r0, lsl r1
   130d0:	andeq	r3, r1, r0, lsl r1
   130d4:	andeq	r3, r1, r0, lsl r1
   130d8:	andeq	r3, r1, r0, lsl r1
   130dc:	andeq	r3, r1, r0, lsl r1
   130e0:	andeq	r3, r1, r0, lsl r1
   130e4:	andeq	r3, r1, r0, lsl r1
   130e8:	andeq	r3, r1, r0, lsl r1
   130ec:	andeq	r3, r1, r0, lsl r1
   130f0:	andeq	r3, r1, r0, lsl r1
   130f4:	andeq	r3, r1, ip, asr #2
   130f8:	and	r0, sl, #7
   130fc:	subs	r0, sl, r0
   13100:	sbc	r1, r9, #0
   13104:	adds	sl, r0, #8
   13108:	adc	r9, r1, #0
   1310c:	b	13068 <__assert_fail@plt+0x1abc>
   13110:	str	r2, [sp, #80]	; 0x50
   13114:	str	r3, [sp, #76]	; 0x4c
   13118:	str	ip, [sp, #84]	; 0x54
   1311c:	bl	11444 <__ctype_b_loc@plt>
   13120:	ldr	r0, [r0]
   13124:	add	r0, r0, r4, lsl #1
   13128:	ldrh	r0, [r0]
   1312c:	tst	r0, #16384	; 0x4000
   13130:	bne	13158 <__assert_fail@plt+0x1bac>
   13134:	ldr	ip, [sp, #84]	; 0x54
   13138:	ldr	r3, [sp, #76]	; 0x4c
   1313c:	ldr	r2, [sp, #80]	; 0x50
   13140:	subs	r5, r5, #1
   13144:	bne	13080 <__assert_fail@plt+0x1ad4>
   13148:	b	12fc0 <__assert_fail@plt+0x1a14>
   1314c:	adds	sl, sl, #1
   13150:	adc	r9, r9, #0
   13154:	b	13068 <__assert_fail@plt+0x1abc>
   13158:	adds	sl, sl, #1
   1315c:	adc	r9, r9, #0
   13160:	tst	r0, #8192	; 0x2000
   13164:	bne	1319c <__assert_fail@plt+0x1bf0>
   13168:	mov	r0, r4
   1316c:	bl	114d4 <btowc@plt>
   13170:	movw	r1, #37284	; 0x91a4
   13174:	movt	r1, #2
   13178:	ldrb	r1, [r1]
   1317c:	cmp	r1, #0
   13180:	beq	131ac <__assert_fail@plt+0x1c00>
   13184:	ldr	ip, [sp, #84]	; 0x54
   13188:	ldr	r3, [sp, #76]	; 0x4c
   1318c:	mov	r2, #1
   13190:	subs	r5, r5, #1
   13194:	bne	13080 <__assert_fail@plt+0x1ad4>
   13198:	b	12fc0 <__assert_fail@plt+0x1a14>
   1319c:	ldr	ip, [sp, #84]	; 0x54
   131a0:	ldr	r3, [sp, #76]	; 0x4c
   131a4:	ldr	r2, [sp, #80]	; 0x50
   131a8:	b	13068 <__assert_fail@plt+0x1abc>
   131ac:	movw	r1, #8238	; 0x202e
   131b0:	cmp	r0, r1
   131b4:	bgt	131dc <__assert_fail@plt+0x1c30>
   131b8:	ldr	ip, [sp, #84]	; 0x54
   131bc:	ldr	r3, [sp, #76]	; 0x4c
   131c0:	ldr	r2, [sp, #80]	; 0x50
   131c4:	cmp	r0, #160	; 0xa0
   131c8:	beq	13068 <__assert_fail@plt+0x1abc>
   131cc:	movw	r1, #8199	; 0x2007
   131d0:	cmp	r0, r1
   131d4:	beq	13068 <__assert_fail@plt+0x1abc>
   131d8:	b	13200 <__assert_fail@plt+0x1c54>
   131dc:	ldr	ip, [sp, #84]	; 0x54
   131e0:	ldr	r3, [sp, #76]	; 0x4c
   131e4:	ldr	r2, [sp, #80]	; 0x50
   131e8:	movw	r1, #8239	; 0x202f
   131ec:	cmp	r0, r1
   131f0:	beq	13068 <__assert_fail@plt+0x1abc>
   131f4:	movw	r1, #8288	; 0x2060
   131f8:	cmp	r0, r1
   131fc:	beq	13068 <__assert_fail@plt+0x1abc>
   13200:	mov	r2, #1
   13204:	subs	r5, r5, #1
   13208:	bne	13080 <__assert_fail@plt+0x1ad4>
   1320c:	b	12fc0 <__assert_fail@plt+0x1a14>
   13210:	mov	lr, r7
   13214:	ldr	r7, [sp, #44]	; 0x2c
   13218:	mov	r0, #1
   1321c:	b	13264 <__assert_fail@plt+0x1cb8>
   13220:	bl	114a4 <__errno_location@plt>
   13224:	ldr	r2, [sp, #28]
   13228:	ldr	r4, [r0]
   1322c:	mov	r0, #0
   13230:	mov	r1, #3
   13234:	mov	r7, #0
   13238:	bl	157c0 <__assert_fail@plt+0x4214>
   1323c:	movw	r2, #32860	; 0x805c
   13240:	mov	r3, r0
   13244:	mov	r0, #0
   13248:	mov	r1, r4
   1324c:	movt	r2, #1
   13250:	bl	113d8 <error@plt>
   13254:	mov	r0, #0
   13258:	mov	r8, #0
   1325c:	mov	sl, #0
   13260:	mov	lr, #0
   13264:	str	r0, [sp, #48]	; 0x30
   13268:	ldr	r9, [sp, #32]
   1326c:	movw	r0, #37286	; 0x91a6
   13270:	mov	ip, #0
   13274:	mov	r6, #0
   13278:	mov	r5, #0
   1327c:	mov	r2, #0
   13280:	mov	r3, #0
   13284:	mov	r4, #0
   13288:	b	134a4 <__assert_fail@plt+0x1ef8>
   1328c:	nop	{0}
   13290:	andeq	r0, r0, r1
   13294:	andeq	r0, r0, r0
   13298:	andeq	r0, r0, r1
   1329c:	andeq	r0, r0, r0
   132a0:	mov	r6, #0
   132a4:	mov	r8, #0
   132a8:	mov	r0, #2
   132ac:	mov	r2, #0
   132b0:	mov	r3, #0
   132b4:	str	r7, [sp]
   132b8:	str	r7, [sp, #4]
   132bc:	str	r0, [sp, #8]
   132c0:	ldr	r0, [sp, #48]	; 0x30
   132c4:	bl	13924 <__assert_fail@plt+0x2378>
   132c8:	ldr	r9, [sp, #32]
   132cc:	add	r4, sp, #112	; 0x70
   132d0:	mov	r7, r6
   132d4:	ldr	r0, [sp, #48]	; 0x30
   132d8:	mov	r1, r4
   132dc:	mov	r2, #16384	; 0x4000
   132e0:	bl	15ee8 <__assert_fail@plt+0x493c>
   132e4:	cmp	r0, #0
   132e8:	beq	13300 <__assert_fail@plt+0x1d54>
   132ec:	cmn	r0, #1
   132f0:	beq	1330c <__assert_fail@plt+0x1d60>
   132f4:	adds	r7, r7, r0
   132f8:	adc	r8, r8, #0
   132fc:	b	132d4 <__assert_fail@plt+0x1d28>
   13300:	mov	r0, #1
   13304:	mov	sl, #0
   13308:	b	13344 <__assert_fail@plt+0x1d98>
   1330c:	bl	114a4 <__errno_location@plt>
   13310:	ldr	r2, [sp, #28]
   13314:	ldr	r4, [r0]
   13318:	mov	r0, #0
   1331c:	mov	r1, #3
   13320:	mov	sl, #0
   13324:	bl	157c0 <__assert_fail@plt+0x4214>
   13328:	movw	r2, #32860	; 0x805c
   1332c:	mov	r3, r0
   13330:	mov	r0, #0
   13334:	mov	r1, r4
   13338:	movt	r2, #1
   1333c:	bl	113d8 <error@plt>
   13340:	mov	r0, #0
   13344:	mov	lr, #0
   13348:	mov	ip, #0
   1334c:	mov	r6, #0
   13350:	mov	r5, #0
   13354:	mov	r4, #0
   13358:	mov	r2, #0
   1335c:	mov	r3, #0
   13360:	str	r0, [sp, #48]	; 0x30
   13364:	b	134a0 <__assert_fail@plt+0x1ef4>
   13368:	mov	r0, #1
   1336c:	str	r0, [sp, #48]	; 0x30
   13370:	b	133ac <__assert_fail@plt+0x1e00>
   13374:	bl	114a4 <__errno_location@plt>
   13378:	ldr	r2, [sp, #28]
   1337c:	ldr	r6, [r0]
   13380:	mov	r0, #0
   13384:	mov	r1, #3
   13388:	str	r0, [sp, #48]	; 0x30
   1338c:	mov	r0, #0
   13390:	bl	157c0 <__assert_fail@plt+0x4214>
   13394:	movw	r2, #32860	; 0x805c
   13398:	mov	r3, r0
   1339c:	mov	r0, #0
   133a0:	mov	r1, r6
   133a4:	movt	r2, #1
   133a8:	bl	113d8 <error@plt>
   133ac:	ldr	r7, [sp, #60]	; 0x3c
   133b0:	ldr	r6, [sp, #76]	; 0x4c
   133b4:	ldr	r2, [sp, #56]	; 0x38
   133b8:	mov	r0, #0
   133bc:	mov	ip, r8
   133c0:	mov	r5, r4
   133c4:	ldr	r9, [sp, #32]
   133c8:	ldr	sl, [sp, #64]	; 0x40
   133cc:	ldr	lr, [sp, #52]	; 0x34
   133d0:	ldr	r4, [sp, #84]	; 0x54
   133d4:	subs	r1, r8, r7
   133d8:	ldr	r8, [sp, #40]	; 0x28
   133dc:	sbcs	r1, r6, r2
   133e0:	ldr	r1, [sp, #72]	; 0x48
   133e4:	movwcc	r0, #1
   133e8:	cmp	r0, #0
   133ec:	ldr	r0, [sp, #80]	; 0x50
   133f0:	movne	ip, r7
   133f4:	movne	r6, r2
   133f8:	ldr	r7, [sp, #44]	; 0x2c
   133fc:	and	r0, r0, #1
   13400:	adds	r2, r1, r0
   13404:	ldr	r0, [sp, #68]	; 0x44
   13408:	b	1349c <__assert_fail@plt+0x1ef0>
   1340c:	mov	r0, #1
   13410:	str	r0, [sp, #48]	; 0x30
   13414:	b	13450 <__assert_fail@plt+0x1ea4>
   13418:	bl	114a4 <__errno_location@plt>
   1341c:	ldr	r2, [sp, #28]
   13420:	ldr	r5, [r0]
   13424:	mov	r0, #0
   13428:	mov	r1, #3
   1342c:	str	r0, [sp, #48]	; 0x30
   13430:	mov	r0, #0
   13434:	bl	157c0 <__assert_fail@plt+0x4214>
   13438:	movw	r2, #32860	; 0x805c
   1343c:	mov	r3, r0
   13440:	mov	r0, #0
   13444:	mov	r1, r5
   13448:	movt	r2, #1
   1344c:	bl	113d8 <error@plt>
   13450:	mov	ip, r6
   13454:	subs	r0, r6, sl
   13458:	ldr	r6, [sp, #76]	; 0x4c
   1345c:	ldr	r1, [sp, #80]	; 0x50
   13460:	ldr	r8, [sp, #40]	; 0x28
   13464:	ldr	lr, [sp, #52]	; 0x34
   13468:	mov	r5, #0
   1346c:	sbcs	r0, r6, r9
   13470:	mov	r0, #0
   13474:	movwcc	r0, #1
   13478:	cmp	r0, #0
   1347c:	and	r0, r4, #1
   13480:	mov	r4, #0
   13484:	movne	r6, r9
   13488:	movne	ip, sl
   1348c:	adds	r2, r1, r0
   13490:	ldr	r0, [sp, #84]	; 0x54
   13494:	ldr	r9, [sp, #32]
   13498:	ldr	sl, [sp, #64]	; 0x40
   1349c:	adc	r3, r0, #0
   134a0:	movw	r0, #37286	; 0x91a6
   134a4:	movt	r0, #2
   134a8:	ldr	r1, [sp, #36]	; 0x24
   134ac:	ldrb	r0, [r0]
   134b0:	str	ip, [sp, #84]	; 0x54
   134b4:	str	r6, [sp, #76]	; 0x4c
   134b8:	eor	r1, r1, #1
   134bc:	ands	r0, r0, r1
   134c0:	mov	r1, lr
   134c4:	movne	r4, r8
   134c8:	cmp	r0, #0
   134cc:	mov	r0, sl
   134d0:	movne	r5, r7
   134d4:	str	r5, [sp]
   134d8:	stmib	sp, {r4, r7, r8, ip}
   134dc:	str	r5, [sp, #80]	; 0x50
   134e0:	str	r6, [sp, #20]
   134e4:	str	r9, [sp, #24]
   134e8:	mov	r5, r2
   134ec:	mov	r6, r3
   134f0:	mov	r9, lr
   134f4:	bl	125c0 <__assert_fail@plt+0x1014>
   134f8:	movw	r0, #37328	; 0x91d0
   134fc:	ldr	r1, [sp, #80]	; 0x50
   13500:	movt	r0, #2
   13504:	ldrd	r2, [r0]
   13508:	adds	r2, r2, sl
   1350c:	ldr	sl, [sp, #76]	; 0x4c
   13510:	adc	r3, r3, r9
   13514:	strd	r2, [r0]
   13518:	movw	r0, #37320	; 0x91c8
   1351c:	movt	r0, #2
   13520:	ldrd	r2, [r0]
   13524:	adds	r2, r2, r5
   13528:	adc	r3, r3, r6
   1352c:	ldr	r6, [sp, #84]	; 0x54
   13530:	strd	r2, [r0]
   13534:	movw	r0, #37312	; 0x91c0
   13538:	movt	r0, #2
   1353c:	ldrd	r2, [r0]
   13540:	adds	r1, r2, r1
   13544:	movw	r2, #37304	; 0x91b8
   13548:	movt	r2, #2
   1354c:	str	r1, [r0]
   13550:	adc	r1, r3, r4
   13554:	str	r1, [r0, #4]
   13558:	movw	r0, #37296	; 0x91b0
   1355c:	ldr	r1, [sp, #84]	; 0x54
   13560:	ldrd	r4, [r2]
   13564:	movt	r0, #2
   13568:	adds	r4, r4, r7
   1356c:	adc	r5, r5, r8
   13570:	strd	r4, [r2]
   13574:	ldrd	r2, [r0]
   13578:	subs	r1, r2, r1
   1357c:	ldr	r1, [sp, #76]	; 0x4c
   13580:	sbcs	r1, r3, r1
   13584:	stmcc	r0, {r6, sl}
   13588:	ldr	r0, [sp, #48]	; 0x30
   1358c:	sub	sp, fp, #56	; 0x38
   13590:	vpop	{d8-d10}
   13594:	add	sp, sp, #4
   13598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1359c:	mov	r0, #1
   135a0:	mov	r2, #0
   135a4:	mov	r3, #0
   135a8:	str	r0, [sp]
   135ac:	ldr	r0, [sp, #48]	; 0x30
   135b0:	bl	113a8 <lseek64@plt>
   135b4:	mov	r3, r0
   135b8:	mov	r5, r1
   135bc:	movw	r0, #37280	; 0x91a0
   135c0:	movt	r0, #2
   135c4:	ldr	r0, [r0]
   135c8:	udiv	r1, r6, r0
   135cc:	mls	r0, r1, r0, r6
   135d0:	cmp	r0, #0
   135d4:	beq	13628 <__assert_fail@plt+0x207c>
   135d8:	subs	r7, r6, r3
   135dc:	ldr	r9, [sp, #32]
   135e0:	mov	r0, #0
   135e4:	mov	sl, #0
   135e8:	mov	lr, #0
   135ec:	mov	ip, #0
   135f0:	mov	r6, #0
   135f4:	mov	r4, #0
   135f8:	mov	r2, #0
   135fc:	mov	r3, #0
   13600:	rscs	r8, r5, #0
   13604:	mov	r5, #0
   13608:	movwlt	r0, #1
   1360c:	cmp	r0, #0
   13610:	mov	r0, #1
   13614:	str	r0, [sp, #48]	; 0x30
   13618:	movw	r0, #37286	; 0x91a6
   1361c:	movwne	r8, #0
   13620:	movwne	r7, #0
   13624:	b	134a4 <__assert_fail@plt+0x1ef8>
   13628:	ldr	r0, [r4, #64]	; 0x40
   1362c:	movw	r1, #513	; 0x201
   13630:	movw	r2, #513	; 0x201
   13634:	mov	r8, #0
   13638:	cmp	r0, #536870913	; 0x20000001
   1363c:	addcc	r2, r0, #1
   13640:	cmp	r0, #0
   13644:	movle	r2, r1
   13648:	udiv	r0, r6, r2
   1364c:	mov	r6, #0
   13650:	mul	r4, r0, r2
   13654:	subs	r0, r3, r4
   13658:	sbcs	r0, r5, #0
   1365c:	bcs	132a8 <__assert_fail@plt+0x1cfc>
   13660:	mov	r0, #1
   13664:	mov	r8, r3
   13668:	mov	r2, r4
   1366c:	mov	r3, #0
   13670:	mvn	r9, #0
   13674:	mov	r6, #0
   13678:	str	r0, [sp]
   1367c:	ldr	r0, [sp, #48]	; 0x30
   13680:	bl	113a8 <lseek64@plt>
   13684:	subs	r0, r9, r0
   13688:	sbcs	r0, r9, r1
   1368c:	movwlt	r6, #1
   13690:	subs	r0, r4, r8
   13694:	rsc	r8, r5, #0
   13698:	cmp	r6, #0
   1369c:	moveq	r0, r6
   136a0:	moveq	r8, r6
   136a4:	mov	r6, r0
   136a8:	b	132a8 <__assert_fail@plt+0x1cfc>
   136ac:	push	{r4, sl, fp, lr}
   136b0:	add	fp, sp, #8
   136b4:	mov	r4, r0
   136b8:	mov	r0, #24
   136bc:	bl	16bd8 <__assert_fail@plt+0x562c>
   136c0:	cmp	r0, #0
   136c4:	moveq	r0, #0
   136c8:	movne	r1, #0
   136cc:	strne	r4, [r0, #16]
   136d0:	strne	r4, [r0, #20]
   136d4:	strne	r1, [r0]
   136d8:	pop	{r4, sl, fp, pc}
   136dc:	push	{r4, sl, fp, lr}
   136e0:	add	fp, sp, #8
   136e4:	mov	r4, r0
   136e8:	mov	r0, #24
   136ec:	bl	16bd8 <__assert_fail@plt+0x562c>
   136f0:	cmp	r0, #0
   136f4:	beq	1370c <__assert_fail@plt+0x2160>
   136f8:	vmov.i32	q8, #0	; 0x00000000
   136fc:	mov	r1, r0
   13700:	str	r4, [r1], #4
   13704:	vst1.32	{d16-d17}, [r1]
   13708:	pop	{r4, sl, fp, pc}
   1370c:	mov	r0, #0
   13710:	pop	{r4, sl, fp, pc}
   13714:	push	{r4, r5, r6, sl, fp, lr}
   13718:	add	fp, sp, #16
   1371c:	ldr	r3, [r0]
   13720:	mov	r4, r1
   13724:	mov	r5, r0
   13728:	cmp	r3, #0
   1372c:	beq	13768 <__assert_fail@plt+0x21bc>
   13730:	add	r0, r5, #8
   13734:	add	r1, r5, #12
   13738:	mov	r2, #0
   1373c:	mov	r6, #0
   13740:	bl	11570 <getdelim@plt>
   13744:	cmn	r0, #1
   13748:	ble	13798 <__assert_fail@plt+0x21ec>
   1374c:	mov	r0, #1
   13750:	str	r0, [r4]
   13754:	ldmib	r5, {r0, r6}
   13758:	add	r0, r0, #1
   1375c:	str	r0, [r5, #4]
   13760:	mov	r0, r6
   13764:	pop	{r4, r5, r6, sl, fp, pc}
   13768:	ldr	r0, [r5, #20]
   1376c:	ldr	r0, [r0]
   13770:	cmp	r0, #0
   13774:	beq	137b8 <__assert_fail@plt+0x220c>
   13778:	mov	r0, #1
   1377c:	str	r0, [r4]
   13780:	ldr	r0, [r5, #20]
   13784:	add	r1, r0, #4
   13788:	str	r1, [r5, #20]
   1378c:	ldr	r6, [r0]
   13790:	mov	r0, r6
   13794:	pop	{r4, r5, r6, sl, fp, pc}
   13798:	ldr	r0, [r5]
   1379c:	bl	1145c <feof@plt>
   137a0:	cmp	r0, #0
   137a4:	mov	r1, #2
   137a8:	mov	r0, r6
   137ac:	movweq	r1, #4
   137b0:	str	r1, [r4]
   137b4:	pop	{r4, r5, r6, sl, fp, pc}
   137b8:	mov	r0, #2
   137bc:	mov	r6, #0
   137c0:	str	r0, [r4]
   137c4:	mov	r0, r6
   137c8:	pop	{r4, r5, r6, sl, fp, pc}
   137cc:	ldr	r1, [r0]
   137d0:	cmp	r1, #0
   137d4:	ldrne	r0, [r0, #4]
   137d8:	bxne	lr
   137dc:	ldr	r1, [r0, #16]
   137e0:	ldr	r0, [r0, #20]
   137e4:	sub	r0, r0, r1
   137e8:	asr	r0, r0, #2
   137ec:	bx	lr
   137f0:	push	{r4, sl, fp, lr}
   137f4:	add	fp, sp, #8
   137f8:	mov	r4, r0
   137fc:	ldr	r0, [r0]
   13800:	cmp	r0, #0
   13804:	beq	13810 <__assert_fail@plt+0x2264>
   13808:	ldr	r0, [r4, #8]
   1380c:	bl	13a5c <__assert_fail@plt+0x24b0>
   13810:	mov	r0, r4
   13814:	pop	{r4, sl, fp, lr}
   13818:	b	13a5c <__assert_fail@plt+0x24b0>
   1381c:	movw	r1, #37348	; 0x91e4
   13820:	movt	r1, #2
   13824:	str	r0, [r1]
   13828:	bx	lr
   1382c:	movw	r1, #37352	; 0x91e8
   13830:	movt	r1, #2
   13834:	strb	r0, [r1]
   13838:	bx	lr
   1383c:	push	{r4, r5, r6, sl, fp, lr}
   13840:	add	fp, sp, #16
   13844:	sub	sp, sp, #8
   13848:	movw	r0, #37268	; 0x9194
   1384c:	movt	r0, #2
   13850:	ldr	r0, [r0]
   13854:	bl	16c5c <__assert_fail@plt+0x56b0>
   13858:	cmp	r0, #0
   1385c:	beq	13884 <__assert_fail@plt+0x22d8>
   13860:	movw	r0, #37352	; 0x91e8
   13864:	movt	r0, #2
   13868:	ldrb	r0, [r0]
   1386c:	cmp	r0, #0
   13870:	beq	138a4 <__assert_fail@plt+0x22f8>
   13874:	bl	114a4 <__errno_location@plt>
   13878:	ldr	r0, [r0]
   1387c:	cmp	r0, #32
   13880:	bne	138a4 <__assert_fail@plt+0x22f8>
   13884:	movw	r0, #37256	; 0x9188
   13888:	movt	r0, #2
   1388c:	ldr	r0, [r0]
   13890:	bl	16c5c <__assert_fail@plt+0x56b0>
   13894:	cmp	r0, #0
   13898:	subeq	sp, fp, #16
   1389c:	popeq	{r4, r5, r6, sl, fp, pc}
   138a0:	b	13914 <__assert_fail@plt+0x2368>
   138a4:	movw	r1, #32844	; 0x804c
   138a8:	mov	r0, #0
   138ac:	mov	r2, #5
   138b0:	movt	r1, #1
   138b4:	bl	1133c <dcgettext@plt>
   138b8:	mov	r4, r0
   138bc:	movw	r0, #37348	; 0x91e4
   138c0:	movt	r0, #2
   138c4:	ldr	r6, [r0]
   138c8:	bl	114a4 <__errno_location@plt>
   138cc:	ldr	r5, [r0]
   138d0:	cmp	r6, #0
   138d4:	bne	138f0 <__assert_fail@plt+0x2344>
   138d8:	movw	r2, #32860	; 0x805c
   138dc:	mov	r0, #0
   138e0:	mov	r1, r5
   138e4:	mov	r3, r4
   138e8:	movt	r2, #1
   138ec:	b	13910 <__assert_fail@plt+0x2364>
   138f0:	mov	r0, r6
   138f4:	bl	156e4 <__assert_fail@plt+0x4138>
   138f8:	movw	r2, #32856	; 0x8058
   138fc:	mov	r3, r0
   13900:	str	r4, [sp]
   13904:	mov	r0, #0
   13908:	mov	r1, r5
   1390c:	movt	r2, #1
   13910:	bl	113d8 <error@plt>
   13914:	movw	r0, #37164	; 0x912c
   13918:	movt	r0, #2
   1391c:	ldr	r0, [r0]
   13920:	bl	11318 <_exit@plt>
   13924:	b	112c4 <posix_fadvise64@plt>
   13928:	cmp	r0, #0
   1392c:	bxeq	lr
   13930:	push	{r4, sl, fp, lr}
   13934:	add	fp, sp, #8
   13938:	sub	sp, sp, #16
   1393c:	mov	r4, r1
   13940:	bl	114f8 <fileno@plt>
   13944:	mov	r1, #0
   13948:	mov	r2, #0
   1394c:	mov	r3, #0
   13950:	str	r1, [sp]
   13954:	stmib	sp, {r1, r4}
   13958:	bl	112c4 <posix_fadvise64@plt>
   1395c:	sub	sp, fp, #8
   13960:	pop	{r4, sl, fp, pc}
   13964:	push	{r4, r5, r6, sl, fp, lr}
   13968:	add	fp, sp, #16
   1396c:	sub	sp, sp, #8
   13970:	mov	r4, r0
   13974:	bl	114f8 <fileno@plt>
   13978:	cmn	r0, #1
   1397c:	ble	139f0 <__assert_fail@plt+0x2444>
   13980:	mov	r0, r4
   13984:	bl	11420 <__freading@plt>
   13988:	cmp	r0, #0
   1398c:	beq	139b8 <__assert_fail@plt+0x240c>
   13990:	mov	r0, r4
   13994:	bl	114f8 <fileno@plt>
   13998:	mov	r1, #1
   1399c:	mov	r2, #0
   139a0:	mov	r3, #0
   139a4:	str	r1, [sp]
   139a8:	bl	113a8 <lseek64@plt>
   139ac:	and	r0, r0, r1
   139b0:	cmn	r0, #1
   139b4:	beq	139f0 <__assert_fail@plt+0x2444>
   139b8:	mov	r0, r4
   139bc:	bl	13a00 <__assert_fail@plt+0x2454>
   139c0:	cmp	r0, #0
   139c4:	beq	139f0 <__assert_fail@plt+0x2444>
   139c8:	bl	114a4 <__errno_location@plt>
   139cc:	ldr	r6, [r0]
   139d0:	mov	r5, r0
   139d4:	mov	r0, r4
   139d8:	bl	11510 <fclose@plt>
   139dc:	cmp	r6, #0
   139e0:	strne	r6, [r5]
   139e4:	mvnne	r0, #0
   139e8:	sub	sp, fp, #16
   139ec:	pop	{r4, r5, r6, sl, fp, pc}
   139f0:	mov	r0, r4
   139f4:	sub	sp, fp, #16
   139f8:	pop	{r4, r5, r6, sl, fp, lr}
   139fc:	b	11510 <fclose@plt>
   13a00:	push	{r4, sl, fp, lr}
   13a04:	add	fp, sp, #8
   13a08:	sub	sp, sp, #8
   13a0c:	mov	r4, r0
   13a10:	cmp	r0, #0
   13a14:	beq	13a4c <__assert_fail@plt+0x24a0>
   13a18:	mov	r0, r4
   13a1c:	bl	11420 <__freading@plt>
   13a20:	cmp	r0, #0
   13a24:	beq	13a4c <__assert_fail@plt+0x24a0>
   13a28:	ldrb	r0, [r4, #1]
   13a2c:	tst	r0, #1
   13a30:	beq	13a4c <__assert_fail@plt+0x24a0>
   13a34:	mov	r0, #1
   13a38:	mov	r2, #0
   13a3c:	mov	r3, #0
   13a40:	str	r0, [sp]
   13a44:	mov	r0, r4
   13a48:	bl	13a84 <__assert_fail@plt+0x24d8>
   13a4c:	mov	r0, r4
   13a50:	sub	sp, fp, #8
   13a54:	pop	{r4, sl, fp, lr}
   13a58:	b	112dc <fflush@plt>
   13a5c:	push	{r4, r5, r6, sl, fp, lr}
   13a60:	add	fp, sp, #16
   13a64:	mov	r4, r0
   13a68:	bl	114a4 <__errno_location@plt>
   13a6c:	ldr	r6, [r0]
   13a70:	mov	r5, r0
   13a74:	mov	r0, r4
   13a78:	bl	11300 <free@plt>
   13a7c:	str	r6, [r5]
   13a80:	pop	{r4, r5, r6, sl, fp, pc}
   13a84:	push	{r4, r5, r6, r7, fp, lr}
   13a88:	add	fp, sp, #16
   13a8c:	sub	sp, sp, #8
   13a90:	mov	r4, r0
   13a94:	ldr	r0, [r0, #4]
   13a98:	mov	r5, r3
   13a9c:	mov	r6, r2
   13aa0:	ldr	r1, [r4, #8]
   13aa4:	cmp	r1, r0
   13aa8:	bne	13ac4 <__assert_fail@plt+0x2518>
   13aac:	ldrd	r0, [r4, #16]
   13ab0:	cmp	r1, r0
   13ab4:	bne	13ac4 <__assert_fail@plt+0x2518>
   13ab8:	ldr	r0, [r4, #36]	; 0x24
   13abc:	cmp	r0, #0
   13ac0:	beq	13adc <__assert_fail@plt+0x2530>
   13ac4:	mov	r0, r4
   13ac8:	mov	r2, r6
   13acc:	mov	r3, r5
   13ad0:	sub	sp, fp, #16
   13ad4:	pop	{r4, r5, r6, r7, fp, lr}
   13ad8:	b	1151c <fseeko64@plt>
   13adc:	ldr	r7, [fp, #8]
   13ae0:	mov	r0, r4
   13ae4:	bl	114f8 <fileno@plt>
   13ae8:	mov	r2, r6
   13aec:	mov	r3, r5
   13af0:	str	r7, [sp]
   13af4:	bl	113a8 <lseek64@plt>
   13af8:	and	r2, r0, r1
   13afc:	cmn	r2, #1
   13b00:	beq	13b20 <__assert_fail@plt+0x2574>
   13b04:	strd	r0, [r4, #80]	; 0x50
   13b08:	ldr	r0, [r4]
   13b0c:	bic	r0, r0, #16
   13b10:	str	r0, [r4]
   13b14:	mov	r0, #0
   13b18:	sub	sp, fp, #16
   13b1c:	pop	{r4, r5, r6, r7, fp, pc}
   13b20:	mvn	r0, #0
   13b24:	sub	sp, fp, #16
   13b28:	pop	{r4, r5, r6, r7, fp, pc}
   13b2c:	push	{r4, r5, r6, sl, fp, lr}
   13b30:	add	fp, sp, #16
   13b34:	mov	r5, r0
   13b38:	mov	r0, #0
   13b3c:	mov	r4, r1
   13b40:	add	r6, r2, #19
   13b44:	strb	r0, [r2, #20]
   13b48:	mov	r0, r5
   13b4c:	mov	r1, r4
   13b50:	mov	r2, #10
   13b54:	mov	r3, #0
   13b58:	bl	1761c <_obstack_memory_used@@Base+0x514>
   13b5c:	add	r2, r0, r0, lsl #2
   13b60:	sub	r2, r5, r2, lsl #1
   13b64:	orr	r2, r2, #48	; 0x30
   13b68:	strb	r2, [r6], #-1
   13b6c:	rsbs	r2, r5, #9
   13b70:	mov	r5, r0
   13b74:	rscs	r2, r4, #0
   13b78:	mov	r4, r1
   13b7c:	bcc	13b48 <__assert_fail@plt+0x259c>
   13b80:	add	r0, r6, #1
   13b84:	pop	{r4, r5, r6, sl, fp, pc}
   13b88:	push	{r4, sl, fp, lr}
   13b8c:	add	fp, sp, #8
   13b90:	mov	r4, r0
   13b94:	bl	112e8 <wcwidth@plt>
   13b98:	cmn	r0, #1
   13b9c:	popgt	{r4, sl, fp, pc}
   13ba0:	mov	r0, r4
   13ba4:	bl	1136c <iswcntrl@plt>
   13ba8:	clz	r0, r0
   13bac:	lsr	r0, r0, #5
   13bb0:	pop	{r4, sl, fp, pc}
   13bb4:	push	{r4, r5, r6, sl, fp, lr}
   13bb8:	add	fp, sp, #16
   13bbc:	mov	r4, r0
   13bc0:	mov	r0, r1
   13bc4:	mov	r5, r1
   13bc8:	ldr	r1, [r0], #16
   13bcc:	cmp	r1, r0
   13bd0:	beq	13bdc <__assert_fail@plt+0x2630>
   13bd4:	mov	r6, r1
   13bd8:	b	13bec <__assert_fail@plt+0x2640>
   13bdc:	ldr	r2, [r5, #4]
   13be0:	add	r6, r4, #16
   13be4:	mov	r0, r6
   13be8:	bl	11324 <memcpy@plt>
   13bec:	str	r6, [r4]
   13bf0:	ldr	r0, [r5, #4]
   13bf4:	str	r0, [r4, #4]
   13bf8:	ldrb	r0, [r5, #8]
   13bfc:	strb	r0, [r4, #8]
   13c00:	cmp	r0, #0
   13c04:	ldrne	r0, [r5, #12]
   13c08:	strne	r0, [r4, #12]
   13c0c:	pop	{r4, r5, r6, sl, fp, pc}
   13c10:	movw	r2, #32864	; 0x8060
   13c14:	ubfx	r1, r0, #5, #3
   13c18:	and	r0, r0, #31
   13c1c:	movt	r2, #1
   13c20:	ldr	r1, [r2, r1, lsl #2]
   13c24:	mov	r2, #1
   13c28:	and	r0, r1, r2, lsl r0
   13c2c:	cmp	r0, #0
   13c30:	movwne	r0, #1
   13c34:	bx	lr
   13c38:	push	{r4, r5, r6, r7, fp, lr}
   13c3c:	add	fp, sp, #16
   13c40:	sub	sp, sp, #8
   13c44:	cmp	r0, #0
   13c48:	add	r5, sp, #4
   13c4c:	mov	r7, r2
   13c50:	mov	r4, r1
   13c54:	movne	r5, r0
   13c58:	mov	r0, r5
   13c5c:	bl	113cc <mbrtowc@plt>
   13c60:	mov	r6, r0
   13c64:	cmp	r7, #0
   13c68:	beq	13c90 <__assert_fail@plt+0x26e4>
   13c6c:	cmn	r6, #2
   13c70:	bcc	13c90 <__assert_fail@plt+0x26e4>
   13c74:	mov	r0, #0
   13c78:	bl	16ce0 <__assert_fail@plt+0x5734>
   13c7c:	cmp	r0, #0
   13c80:	bne	13c90 <__assert_fail@plt+0x26e4>
   13c84:	ldrb	r0, [r4]
   13c88:	mov	r6, #1
   13c8c:	str	r0, [r5]
   13c90:	mov	r0, r6
   13c94:	sub	sp, fp, #16
   13c98:	pop	{r4, r5, r6, r7, fp, pc}
   13c9c:	andeq	r0, r0, r0
   13ca0:	push	{r4, sl, fp, lr}
   13ca4:	add	fp, sp, #8
   13ca8:	sub	sp, sp, #64	; 0x40
   13cac:	mov	r0, #85	; 0x55
   13cb0:	bl	11348 <sysconf@plt>
   13cb4:	mov	r4, r0
   13cb8:	mov	r0, #30
   13cbc:	bl	11348 <sysconf@plt>
   13cc0:	orr	r1, r0, r4
   13cc4:	cmn	r1, #1
   13cc8:	ble	13ce8 <__assert_fail@plt+0x273c>
   13ccc:	vmov	s0, r0
   13cd0:	vcvt.f64.s32	d16, s0
   13cd4:	vmov	s0, r4
   13cd8:	vcvt.f64.s32	d17, s0
   13cdc:	vmul.f64	d0, d17, d16
   13ce0:	sub	sp, fp, #8
   13ce4:	pop	{r4, sl, fp, pc}
   13ce8:	mov	r0, sp
   13cec:	bl	113fc <sysinfo@plt>
   13cf0:	cmp	r0, #0
   13cf4:	beq	13d04 <__assert_fail@plt+0x2758>
   13cf8:	vldr	d0, [pc, #24]	; 13d18 <__assert_fail@plt+0x276c>
   13cfc:	sub	sp, fp, #8
   13d00:	pop	{r4, sl, fp, pc}
   13d04:	vldr	s0, [sp, #16]
   13d08:	vldr	s2, [sp, #52]	; 0x34
   13d0c:	vcvt.f64.u32	d16, s2
   13d10:	vcvt.f64.u32	d17, s0
   13d14:	b	13cdc <__assert_fail@plt+0x2730>
   13d18:	andeq	r0, r0, r0
   13d1c:	orrsmi	r0, r0, r0
   13d20:	push	{r4, sl, fp, lr}
   13d24:	add	fp, sp, #8
   13d28:	sub	sp, sp, #64	; 0x40
   13d2c:	mov	r0, #86	; 0x56
   13d30:	bl	11348 <sysconf@plt>
   13d34:	mov	r4, r0
   13d38:	mov	r0, #30
   13d3c:	bl	11348 <sysconf@plt>
   13d40:	orrs	r1, r0, r4
   13d44:	bmi	13d64 <__assert_fail@plt+0x27b8>
   13d48:	vmov	s0, r0
   13d4c:	vcvt.f64.s32	d16, s0
   13d50:	vmov	s0, r4
   13d54:	vcvt.f64.s32	d17, s0
   13d58:	vmul.f64	d0, d17, d16
   13d5c:	sub	sp, fp, #8
   13d60:	pop	{r4, sl, fp, pc}
   13d64:	mov	r0, sp
   13d68:	bl	113fc <sysinfo@plt>
   13d6c:	cmp	r0, #0
   13d70:	beq	13dac <__assert_fail@plt+0x2800>
   13d74:	mov	r0, #85	; 0x55
   13d78:	bl	11348 <sysconf@plt>
   13d7c:	mov	r4, r0
   13d80:	mov	r0, #30
   13d84:	bl	11348 <sysconf@plt>
   13d88:	orr	r1, r0, r4
   13d8c:	cmn	r1, #1
   13d90:	ble	13dd4 <__assert_fail@plt+0x2828>
   13d94:	vmov	s0, r0
   13d98:	vcvt.f64.s32	d16, s0
   13d9c:	vmov	s0, r4
   13da0:	vcvt.f64.s32	d17, s0
   13da4:	vmul.f64	d16, d17, d16
   13da8:	b	13de8 <__assert_fail@plt+0x283c>
   13dac:	vldr	s0, [sp, #20]
   13db0:	vldr	s2, [sp, #28]
   13db4:	vldr	s4, [sp, #52]	; 0x34
   13db8:	vcvt.f64.u32	d16, s2
   13dbc:	vcvt.f64.u32	d17, s0
   13dc0:	vcvt.f64.u32	d18, s4
   13dc4:	vadd.f64	d16, d17, d16
   13dc8:	vmul.f64	d0, d16, d18
   13dcc:	sub	sp, fp, #8
   13dd0:	pop	{r4, sl, fp, pc}
   13dd4:	mov	r0, sp
   13dd8:	bl	113fc <sysinfo@plt>
   13ddc:	cmp	r0, #0
   13de0:	beq	13df8 <__assert_fail@plt+0x284c>
   13de4:	vldr	d16, [pc, #36]	; 13e10 <__assert_fail@plt+0x2864>
   13de8:	vmov.f64	d17, #80	; 0x3e800000  0.250
   13dec:	vmul.f64	d0, d16, d17
   13df0:	sub	sp, fp, #8
   13df4:	pop	{r4, sl, fp, pc}
   13df8:	vldr	s0, [sp, #16]
   13dfc:	vldr	s2, [sp, #52]	; 0x34
   13e00:	vcvt.f64.u32	d16, s2
   13e04:	vcvt.f64.u32	d17, s0
   13e08:	b	13da4 <__assert_fail@plt+0x27f8>
   13e0c:	nop	{0}
   13e10:	andeq	r0, r0, r0
   13e14:	orrsmi	r0, r0, r0
   13e18:	push	{r4, r5, fp, lr}
   13e1c:	add	fp, sp, #8
   13e20:	cmp	r0, #0
   13e24:	beq	13eb8 <__assert_fail@plt+0x290c>
   13e28:	mov	r1, #47	; 0x2f
   13e2c:	mov	r4, r0
   13e30:	bl	11540 <strrchr@plt>
   13e34:	cmp	r0, #0
   13e38:	mov	r5, r4
   13e3c:	addne	r5, r0, #1
   13e40:	sub	r0, r5, r4
   13e44:	cmp	r0, #7
   13e48:	blt	13e9c <__assert_fail@plt+0x28f0>
   13e4c:	movw	r1, #32952	; 0x80b8
   13e50:	sub	r0, r5, #7
   13e54:	mov	r2, #7
   13e58:	movt	r1, #1
   13e5c:	bl	11588 <strncmp@plt>
   13e60:	cmp	r0, #0
   13e64:	bne	13e9c <__assert_fail@plt+0x28f0>
   13e68:	movw	r1, #32960	; 0x80c0
   13e6c:	mov	r0, r5
   13e70:	mov	r2, #3
   13e74:	movt	r1, #1
   13e78:	bl	11588 <strncmp@plt>
   13e7c:	cmp	r0, #0
   13e80:	beq	13e8c <__assert_fail@plt+0x28e0>
   13e84:	mov	r4, r5
   13e88:	b	13e9c <__assert_fail@plt+0x28f0>
   13e8c:	movw	r0, #37240	; 0x9178
   13e90:	add	r4, r5, #3
   13e94:	movt	r0, #2
   13e98:	str	r4, [r0]
   13e9c:	movw	r0, #37244	; 0x917c
   13ea0:	movt	r0, #2
   13ea4:	str	r4, [r0]
   13ea8:	movw	r0, #37356	; 0x91ec
   13eac:	movt	r0, #2
   13eb0:	str	r4, [r0]
   13eb4:	pop	{r4, r5, fp, pc}
   13eb8:	movw	r0, #37256	; 0x9188
   13ebc:	mov	r1, #55	; 0x37
   13ec0:	mov	r2, #1
   13ec4:	movt	r0, #2
   13ec8:	ldr	r3, [r0]
   13ecc:	movw	r0, #32896	; 0x8080
   13ed0:	movt	r0, #1
   13ed4:	bl	1139c <fwrite@plt>
   13ed8:	bl	11594 <abort@plt>
   13edc:	push	{r4, r5, r6, sl, fp, lr}
   13ee0:	add	fp, sp, #16
   13ee4:	mov	r4, r0
   13ee8:	movw	r0, #37360	; 0x91f0
   13eec:	movt	r0, #2
   13ef0:	cmp	r4, #0
   13ef4:	moveq	r4, r0
   13ef8:	bl	114a4 <__errno_location@plt>
   13efc:	ldr	r6, [r0]
   13f00:	mov	r5, r0
   13f04:	mov	r0, r4
   13f08:	mov	r1, #48	; 0x30
   13f0c:	bl	16a64 <__assert_fail@plt+0x54b8>
   13f10:	str	r6, [r5]
   13f14:	pop	{r4, r5, r6, sl, fp, pc}
   13f18:	movw	r1, #37360	; 0x91f0
   13f1c:	cmp	r0, #0
   13f20:	movt	r1, #2
   13f24:	movne	r1, r0
   13f28:	ldr	r0, [r1]
   13f2c:	bx	lr
   13f30:	movw	r2, #37360	; 0x91f0
   13f34:	cmp	r0, #0
   13f38:	movt	r2, #2
   13f3c:	movne	r2, r0
   13f40:	str	r1, [r2]
   13f44:	bx	lr
   13f48:	movw	r3, #37360	; 0x91f0
   13f4c:	cmp	r0, #0
   13f50:	and	r2, r2, #1
   13f54:	movt	r3, #2
   13f58:	movne	r3, r0
   13f5c:	ubfx	r0, r1, #5, #3
   13f60:	and	r1, r1, #31
   13f64:	add	ip, r3, r0, lsl #2
   13f68:	mov	r0, #1
   13f6c:	ldr	r3, [ip, #8]
   13f70:	and	r0, r0, r3, lsr r1
   13f74:	eor	r2, r0, r2
   13f78:	eor	r1, r3, r2, lsl r1
   13f7c:	str	r1, [ip, #8]
   13f80:	bx	lr
   13f84:	movw	r2, #37360	; 0x91f0
   13f88:	cmp	r0, #0
   13f8c:	movt	r2, #2
   13f90:	movne	r2, r0
   13f94:	ldr	r0, [r2, #4]
   13f98:	str	r1, [r2, #4]
   13f9c:	bx	lr
   13fa0:	push	{fp, lr}
   13fa4:	mov	fp, sp
   13fa8:	movw	r3, #37360	; 0x91f0
   13fac:	cmp	r0, #0
   13fb0:	movt	r3, #2
   13fb4:	movne	r3, r0
   13fb8:	cmp	r1, #0
   13fbc:	mov	r0, #10
   13fc0:	cmpne	r2, #0
   13fc4:	str	r0, [r3]
   13fc8:	bne	13fd0 <__assert_fail@plt+0x2a24>
   13fcc:	bl	11594 <abort@plt>
   13fd0:	str	r1, [r3, #40]	; 0x28
   13fd4:	str	r2, [r3, #44]	; 0x2c
   13fd8:	pop	{fp, pc}
   13fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fe0:	add	fp, sp, #28
   13fe4:	sub	sp, sp, #20
   13fe8:	mov	r7, r0
   13fec:	ldr	r0, [fp, #8]
   13ff0:	movw	r5, #37360	; 0x91f0
   13ff4:	mov	r8, r3
   13ff8:	mov	r9, r2
   13ffc:	mov	sl, r1
   14000:	movt	r5, #2
   14004:	cmp	r0, #0
   14008:	movne	r5, r0
   1400c:	bl	114a4 <__errno_location@plt>
   14010:	ldr	r2, [r5, #40]	; 0x28
   14014:	ldr	r3, [r5, #44]	; 0x2c
   14018:	mov	r4, r0
   1401c:	ldm	r5, {r0, r1}
   14020:	add	r5, r5, #8
   14024:	ldr	r6, [r4]
   14028:	stm	sp, {r0, r1, r5}
   1402c:	mov	r0, r7
   14030:	mov	r1, sl
   14034:	str	r2, [sp, #12]
   14038:	str	r3, [sp, #16]
   1403c:	mov	r2, r9
   14040:	mov	r3, r8
   14044:	bl	14054 <__assert_fail@plt+0x2aa8>
   14048:	str	r6, [r4]
   1404c:	sub	sp, fp, #28
   14050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14058:	add	fp, sp, #28
   1405c:	sub	sp, sp, #156	; 0x9c
   14060:	mov	r5, r0
   14064:	add	r0, r2, #1
   14068:	mov	r6, r1
   1406c:	mov	sl, r3
   14070:	str	r2, [fp, #-80]	; 0xffffffb0
   14074:	str	r0, [sp, #72]	; 0x48
   14078:	ldr	r0, [fp, #12]
   1407c:	and	r1, r0, #1
   14080:	str	r1, [sp, #36]	; 0x24
   14084:	and	r1, r0, #4
   14088:	str	r1, [sp, #32]
   1408c:	ubfx	r9, r0, #1, #1
   14090:	bl	113b4 <__ctype_get_mb_cur_max@plt>
   14094:	str	r0, [sp, #40]	; 0x28
   14098:	ldr	r0, [fp, #24]
   1409c:	ldr	r7, [fp, #8]
   140a0:	mov	r1, #0
   140a4:	str	r5, [fp, #-84]	; 0xffffffac
   140a8:	str	r1, [fp, #-56]	; 0xffffffc8
   140ac:	mov	r1, #0
   140b0:	str	r1, [sp, #60]	; 0x3c
   140b4:	mov	r1, #1
   140b8:	str	r1, [fp, #-48]	; 0xffffffd0
   140bc:	str	r0, [sp, #80]	; 0x50
   140c0:	ldr	r0, [fp, #20]
   140c4:	str	r0, [sp, #76]	; 0x4c
   140c8:	mov	r0, #0
   140cc:	str	r0, [sp, #56]	; 0x38
   140d0:	mov	r0, #0
   140d4:	str	r0, [fp, #-88]	; 0xffffffa8
   140d8:	mov	r0, #0
   140dc:	str	r0, [fp, #-72]	; 0xffffffb8
   140e0:	mov	r0, #0
   140e4:	cmp	r7, #10
   140e8:	bhi	1507c <__assert_fail@plt+0x3ad0>
   140ec:	add	r1, pc, #24
   140f0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   140f4:	mov	r4, r6
   140f8:	mov	r8, #0
   140fc:	mov	r2, #1
   14100:	mov	r3, #0
   14104:	mov	lr, sl
   14108:	ldr	pc, [r1, r7, lsl #2]
   1410c:	ldrdeq	r4, [r1], -r0
   14110:	andeq	r4, r1, r4, lsr #4
   14114:	andeq	r4, r1, r4, ror #3
   14118:	andeq	r4, r1, r8, asr #3
   1411c:	andeq	r4, r1, r8, lsl r2
   14120:	andeq	r4, r1, ip, asr #4
   14124:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14128:	ldrdeq	r4, [r1], -r0
   1412c:	andeq	r4, r1, r8, lsr r1
   14130:	andeq	r4, r1, r8, lsr r1
   14134:	andeq	r4, r1, r0, ror #2
   14138:	movw	r0, #33040	; 0x8110
   1413c:	mov	r1, r7
   14140:	movt	r0, #1
   14144:	bl	15a84 <__assert_fail@plt+0x44d8>
   14148:	str	r0, [sp, #76]	; 0x4c
   1414c:	movw	r0, #33042	; 0x8112
   14150:	mov	r1, r7
   14154:	movt	r0, #1
   14158:	bl	15a84 <__assert_fail@plt+0x44d8>
   1415c:	str	r0, [sp, #80]	; 0x50
   14160:	mov	r8, #0
   14164:	tst	r9, #1
   14168:	bne	141a0 <__assert_fail@plt+0x2bf4>
   1416c:	ldr	r0, [sp, #76]	; 0x4c
   14170:	ldrb	r0, [r0]
   14174:	cmp	r0, #0
   14178:	beq	141a0 <__assert_fail@plt+0x2bf4>
   1417c:	ldr	r1, [sp, #76]	; 0x4c
   14180:	mov	r8, #0
   14184:	add	r1, r1, #1
   14188:	cmp	r8, r4
   1418c:	strbcc	r0, [r5, r8]
   14190:	ldrb	r0, [r1, r8]
   14194:	add	r8, r8, #1
   14198:	cmp	r0, #0
   1419c:	bne	14188 <__assert_fail@plt+0x2bdc>
   141a0:	ldr	r6, [sp, #80]	; 0x50
   141a4:	mov	r0, r6
   141a8:	bl	11480 <strlen@plt>
   141ac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   141b0:	str	r0, [fp, #-72]	; 0xffffffb8
   141b4:	str	r6, [fp, #-88]	; 0xffffffa8
   141b8:	mov	r2, #1
   141bc:	mov	r3, r9
   141c0:	mov	lr, sl
   141c4:	b	142d0 <__assert_fail@plt+0x2d24>
   141c8:	mov	r0, #1
   141cc:	b	14224 <__assert_fail@plt+0x2c78>
   141d0:	mov	r7, #0
   141d4:	mov	r8, #0
   141d8:	mov	r2, r0
   141dc:	mov	r3, #0
   141e0:	b	142d0 <__assert_fail@plt+0x2d24>
   141e4:	tst	r9, #1
   141e8:	bne	14224 <__assert_fail@plt+0x2c78>
   141ec:	mov	r2, r0
   141f0:	b	1427c <__assert_fail@plt+0x2cd0>
   141f4:	mov	r0, #1
   141f8:	mov	r8, #0
   141fc:	mov	r7, #5
   14200:	mov	r2, #1
   14204:	str	r0, [fp, #-72]	; 0xffffffb8
   14208:	movw	r0, #32023	; 0x7d17
   1420c:	movt	r0, #1
   14210:	str	r0, [fp, #-88]	; 0xffffffa8
   14214:	b	14244 <__assert_fail@plt+0x2c98>
   14218:	mov	r2, #1
   1421c:	tst	r9, #1
   14220:	beq	1427c <__assert_fail@plt+0x2cd0>
   14224:	mov	r1, #1
   14228:	mov	r8, #0
   1422c:	mov	r7, #2
   14230:	mov	r2, r0
   14234:	str	r1, [fp, #-72]	; 0xffffffb8
   14238:	movw	r1, #33042	; 0x8112
   1423c:	movt	r1, #1
   14240:	str	r1, [fp, #-88]	; 0xffffffa8
   14244:	mov	r3, #1
   14248:	b	142d0 <__assert_fail@plt+0x2d24>
   1424c:	tst	r9, #1
   14250:	beq	142a0 <__assert_fail@plt+0x2cf4>
   14254:	mov	r0, #1
   14258:	mov	r8, #0
   1425c:	mov	r2, #1
   14260:	mov	r3, #1
   14264:	mov	r7, #5
   14268:	str	r0, [fp, #-72]	; 0xffffffb8
   1426c:	movw	r0, #32023	; 0x7d17
   14270:	movt	r0, #1
   14274:	str	r0, [fp, #-88]	; 0xffffffa8
   14278:	b	142d0 <__assert_fail@plt+0x2d24>
   1427c:	cmp	r4, #0
   14280:	mov	r8, #1
   14284:	mov	r3, #0
   14288:	mov	r7, #2
   1428c:	movne	r0, #39	; 0x27
   14290:	strbne	r0, [r5]
   14294:	movw	r0, #33042	; 0x8112
   14298:	movt	r0, #1
   1429c:	b	142c4 <__assert_fail@plt+0x2d18>
   142a0:	cmp	r4, #0
   142a4:	mov	r8, #1
   142a8:	mov	r2, #1
   142ac:	mov	r7, #5
   142b0:	mov	r3, #0
   142b4:	movne	r0, #34	; 0x22
   142b8:	strbne	r0, [r5]
   142bc:	movw	r0, #32023	; 0x7d17
   142c0:	movt	r0, #1
   142c4:	str	r0, [fp, #-88]	; 0xffffffa8
   142c8:	mov	r0, #1
   142cc:	str	r0, [fp, #-72]	; 0xffffffb8
   142d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   142d4:	eor	r6, r3, #1
   142d8:	str	r7, [fp, #-68]	; 0xffffffbc
   142dc:	str	r3, [fp, #-76]	; 0xffffffb4
   142e0:	str	r2, [sp, #84]	; 0x54
   142e4:	str	r6, [sp, #92]	; 0x5c
   142e8:	cmp	r0, #0
   142ec:	movwne	r0, #1
   142f0:	and	r1, r0, r3
   142f4:	and	r1, r2, r1
   142f8:	str	r1, [sp, #48]	; 0x30
   142fc:	sub	r1, r7, #2
   14300:	clz	r1, r1
   14304:	lsr	r1, r1, #5
   14308:	and	r1, r1, r3
   1430c:	str	r1, [sp, #64]	; 0x40
   14310:	subs	r1, r7, #2
   14314:	mov	r7, #0
   14318:	movwne	r1, #1
   1431c:	orr	r6, r1, r6
   14320:	and	r1, r1, r2
   14324:	and	r0, r0, r1
   14328:	str	r6, [sp, #68]	; 0x44
   1432c:	str	r0, [fp, #-60]	; 0xffffffc4
   14330:	orr	r0, r1, r3
   14334:	ldr	r1, [fp, #16]
   14338:	eor	r0, r0, #1
   1433c:	clz	r1, r1
   14340:	lsr	r1, r1, #5
   14344:	orr	r0, r1, r0
   14348:	str	r0, [fp, #-64]	; 0xffffffc0
   1434c:	eor	r0, r2, #1
   14350:	str	r0, [sp, #52]	; 0x34
   14354:	cmn	lr, #1
   14358:	beq	14368 <__assert_fail@plt+0x2dbc>
   1435c:	cmp	r7, lr
   14360:	bne	14374 <__assert_fail@plt+0x2dc8>
   14364:	b	14ebc <__assert_fail@plt+0x3910>
   14368:	ldrb	r0, [ip, r7]
   1436c:	cmp	r0, #0
   14370:	beq	14ec4 <__assert_fail@plt+0x3918>
   14374:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14378:	mov	sl, #0
   1437c:	cmp	r0, #0
   14380:	beq	143b8 <__assert_fail@plt+0x2e0c>
   14384:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14388:	add	r5, r7, r0
   1438c:	cmp	r0, #2
   14390:	bcc	143ac <__assert_fail@plt+0x2e00>
   14394:	cmn	lr, #1
   14398:	bne	143ac <__assert_fail@plt+0x2e00>
   1439c:	mov	r0, ip
   143a0:	bl	11480 <strlen@plt>
   143a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   143a8:	mov	lr, r0
   143ac:	cmp	r5, lr
   143b0:	bls	143c0 <__assert_fail@plt+0x2e14>
   143b4:	ldr	r5, [fp, #-84]	; 0xffffffac
   143b8:	mov	r0, #0
   143bc:	b	1440c <__assert_fail@plt+0x2e60>
   143c0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   143c4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   143c8:	add	r0, ip, r7
   143cc:	mov	r6, r4
   143d0:	mov	r4, lr
   143d4:	bl	11474 <bcmp@plt>
   143d8:	ldr	r2, [sp, #92]	; 0x5c
   143dc:	cmp	r0, #0
   143e0:	ldr	r5, [fp, #-84]	; 0xffffffac
   143e4:	mov	r1, r0
   143e8:	movwne	r1, #1
   143ec:	orr	r1, r1, r2
   143f0:	tst	r1, #1
   143f4:	beq	14f4c <__assert_fail@plt+0x39a0>
   143f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   143fc:	clz	r0, r0
   14400:	mov	lr, r4
   14404:	mov	r4, r6
   14408:	lsr	r0, r0, #5
   1440c:	str	r0, [fp, #-52]	; 0xffffffcc
   14410:	ldrb	r6, [ip, r7]
   14414:	cmp	r6, #126	; 0x7e
   14418:	bhi	14948 <__assert_fail@plt+0x339c>
   1441c:	add	r3, pc, #16
   14420:	mov	r9, #1
   14424:	mov	r2, #110	; 0x6e
   14428:	mov	r0, #97	; 0x61
   1442c:	mov	r1, #0
   14430:	ldr	pc, [r3, r6, lsl #2]
   14434:	andeq	r4, r1, r8, lsr #15
   14438:	andeq	r4, r1, r8, asr #18
   1443c:	andeq	r4, r1, r8, asr #18
   14440:	andeq	r4, r1, r8, asr #18
   14444:	andeq	r4, r1, r8, asr #18
   14448:	andeq	r4, r1, r8, asr #18
   1444c:	andeq	r4, r1, r8, asr #18
   14450:	andeq	r4, r1, r4, lsr #20
   14454:	andeq	r4, r1, r8, lsl #15
   14458:	andeq	r4, r1, r0, lsl #15
   1445c:	muleq	r1, r4, r7
   14460:			; <UNDEFINED> instruction: 0x000148b0
   14464:	andeq	r4, r1, r8, ror r7
   14468:	muleq	r1, r0, r7
   1446c:	andeq	r4, r1, r8, asr #18
   14470:	andeq	r4, r1, r8, asr #18
   14474:	andeq	r4, r1, r8, asr #18
   14478:	andeq	r4, r1, r8, asr #18
   1447c:	andeq	r4, r1, r8, asr #18
   14480:	andeq	r4, r1, r8, asr #18
   14484:	andeq	r4, r1, r8, asr #18
   14488:	andeq	r4, r1, r8, asr #18
   1448c:	andeq	r4, r1, r8, asr #18
   14490:	andeq	r4, r1, r8, asr #18
   14494:	andeq	r4, r1, r8, asr #18
   14498:	andeq	r4, r1, r8, asr #18
   1449c:	andeq	r4, r1, r8, asr #18
   144a0:	andeq	r4, r1, r8, asr #18
   144a4:	andeq	r4, r1, r8, asr #18
   144a8:	andeq	r4, r1, r8, asr #18
   144ac:	andeq	r4, r1, r8, asr #18
   144b0:	andeq	r4, r1, r8, asr #18
   144b4:	andeq	r4, r1, ip, lsr #14
   144b8:	andeq	r4, r1, r0, lsr r7
   144bc:	andeq	r4, r1, r0, lsr r7
   144c0:	andeq	r4, r1, r8, lsl r7
   144c4:	andeq	r4, r1, r0, lsr r7
   144c8:	andeq	r4, r1, r0, lsr r6
   144cc:	andeq	r4, r1, r0, lsr r7
   144d0:			; <UNDEFINED> instruction: 0x000148b8
   144d4:	andeq	r4, r1, r0, lsr r7
   144d8:	andeq	r4, r1, r0, lsr r7
   144dc:	andeq	r4, r1, r0, lsr r7
   144e0:	andeq	r4, r1, r0, lsr r6
   144e4:	andeq	r4, r1, r0, lsr r6
   144e8:	andeq	r4, r1, r0, lsr r6
   144ec:	andeq	r4, r1, r0, lsr r6
   144f0:	andeq	r4, r1, r0, lsr r6
   144f4:	andeq	r4, r1, r0, lsr r6
   144f8:	andeq	r4, r1, r0, lsr r6
   144fc:	andeq	r4, r1, r0, lsr r6
   14500:	andeq	r4, r1, r0, lsr r6
   14504:	andeq	r4, r1, r0, lsr r6
   14508:	andeq	r4, r1, r0, lsr r6
   1450c:	andeq	r4, r1, r0, lsr r6
   14510:	andeq	r4, r1, r0, lsr r6
   14514:	andeq	r4, r1, r0, lsr r6
   14518:	andeq	r4, r1, r0, lsr r6
   1451c:	andeq	r4, r1, r0, lsr r6
   14520:	andeq	r4, r1, r0, lsr r7
   14524:	andeq	r4, r1, r0, lsr r7
   14528:	andeq	r4, r1, r0, lsr r7
   1452c:	andeq	r4, r1, r0, lsr r7
   14530:	andeq	r4, r1, r0, lsl #17
   14534:	andeq	r4, r1, r8, asr #18
   14538:	andeq	r4, r1, r0, lsr r6
   1453c:	andeq	r4, r1, r0, lsr r6
   14540:	andeq	r4, r1, r0, lsr r6
   14544:	andeq	r4, r1, r0, lsr r6
   14548:	andeq	r4, r1, r0, lsr r6
   1454c:	andeq	r4, r1, r0, lsr r6
   14550:	andeq	r4, r1, r0, lsr r6
   14554:	andeq	r4, r1, r0, lsr r6
   14558:	andeq	r4, r1, r0, lsr r6
   1455c:	andeq	r4, r1, r0, lsr r6
   14560:	andeq	r4, r1, r0, lsr r6
   14564:	andeq	r4, r1, r0, lsr r6
   14568:	andeq	r4, r1, r0, lsr r6
   1456c:	andeq	r4, r1, r0, lsr r6
   14570:	andeq	r4, r1, r0, lsr r6
   14574:	andeq	r4, r1, r0, lsr r6
   14578:	andeq	r4, r1, r0, lsr r6
   1457c:	andeq	r4, r1, r0, lsr r6
   14580:	andeq	r4, r1, r0, lsr r6
   14584:	andeq	r4, r1, r0, lsr r6
   14588:	andeq	r4, r1, r0, lsr r6
   1458c:	andeq	r4, r1, r0, lsr r6
   14590:	andeq	r4, r1, r0, lsr r6
   14594:	andeq	r4, r1, r0, lsr r6
   14598:	andeq	r4, r1, r0, lsr r6
   1459c:	andeq	r4, r1, r0, lsr r6
   145a0:	andeq	r4, r1, r0, lsr r7
   145a4:	andeq	r4, r1, r8, asr r7
   145a8:	andeq	r4, r1, r0, lsr r6
   145ac:	andeq	r4, r1, r0, lsr r7
   145b0:	andeq	r4, r1, r0, lsr r6
   145b4:	andeq	r4, r1, r0, lsr r7
   145b8:	andeq	r4, r1, r0, lsr r6
   145bc:	andeq	r4, r1, r0, lsr r6
   145c0:	andeq	r4, r1, r0, lsr r6
   145c4:	andeq	r4, r1, r0, lsr r6
   145c8:	andeq	r4, r1, r0, lsr r6
   145cc:	andeq	r4, r1, r0, lsr r6
   145d0:	andeq	r4, r1, r0, lsr r6
   145d4:	andeq	r4, r1, r0, lsr r6
   145d8:	andeq	r4, r1, r0, lsr r6
   145dc:	andeq	r4, r1, r0, lsr r6
   145e0:	andeq	r4, r1, r0, lsr r6
   145e4:	andeq	r4, r1, r0, lsr r6
   145e8:	andeq	r4, r1, r0, lsr r6
   145ec:	andeq	r4, r1, r0, lsr r6
   145f0:	andeq	r4, r1, r0, lsr r6
   145f4:	andeq	r4, r1, r0, lsr r6
   145f8:	andeq	r4, r1, r0, lsr r6
   145fc:	andeq	r4, r1, r0, lsr r6
   14600:	andeq	r4, r1, r0, lsr r6
   14604:	andeq	r4, r1, r0, lsr r6
   14608:	andeq	r4, r1, r0, lsr r6
   1460c:	andeq	r4, r1, r0, lsr r6
   14610:	andeq	r4, r1, r0, lsr r6
   14614:	andeq	r4, r1, r0, lsr r6
   14618:	andeq	r4, r1, r0, lsr r6
   1461c:	andeq	r4, r1, r0, lsr r6
   14620:	andeq	r4, r1, ip, ror #13
   14624:	andeq	r4, r1, r0, lsr r7
   14628:	andeq	r4, r1, ip, ror #13
   1462c:	andeq	r4, r1, r8, lsl r7
   14630:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14634:	tst	r0, #1
   14638:	bne	14664 <__assert_fail@plt+0x30b8>
   1463c:	ldr	r1, [fp, #16]
   14640:	ubfx	r0, r6, #5, #3
   14644:	mov	r2, #1
   14648:	ldr	r0, [r1, r0, lsl #2]
   1464c:	and	r1, r6, #31
   14650:	tst	r0, r2, lsl r1
   14654:	beq	14664 <__assert_fail@plt+0x30b8>
   14658:	mov	r0, r6
   1465c:	mov	r1, r9
   14660:	b	14678 <__assert_fail@plt+0x30cc>
   14664:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14668:	mov	r1, r9
   1466c:	cmp	r0, #0
   14670:	mov	r0, r6
   14674:	beq	149b8 <__assert_fail@plt+0x340c>
   14678:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1467c:	tst	r2, #1
   14680:	bne	14f88 <__assert_fail@plt+0x39dc>
   14684:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14688:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1468c:	subs	r2, r2, #2
   14690:	movwne	r2, #1
   14694:	orr	r2, r2, r3
   14698:	tst	r2, #1
   1469c:	bne	146d8 <__assert_fail@plt+0x312c>
   146a0:	cmp	r8, r4
   146a4:	movcc	r2, #39	; 0x27
   146a8:	strbcc	r2, [r5, r8]
   146ac:	add	r2, r8, #1
   146b0:	cmp	r2, r4
   146b4:	movcc	r3, #36	; 0x24
   146b8:	strbcc	r3, [r5, r2]
   146bc:	add	r2, r8, #2
   146c0:	add	r8, r8, #3
   146c4:	cmp	r2, r4
   146c8:	movcc	r3, #39	; 0x27
   146cc:	strbcc	r3, [r5, r2]
   146d0:	mov	r2, #1
   146d4:	str	r2, [fp, #-56]	; 0xffffffc8
   146d8:	cmp	r8, r4
   146dc:	movcc	r2, #92	; 0x5c
   146e0:	strbcc	r2, [r5, r8]
   146e4:	add	r8, r8, #1
   146e8:	b	149fc <__assert_fail@plt+0x3450>
   146ec:	cmp	lr, #1
   146f0:	beq	14718 <__assert_fail@plt+0x316c>
   146f4:	mov	r9, #0
   146f8:	cmn	lr, #1
   146fc:	bne	14724 <__assert_fail@plt+0x3178>
   14700:	ldrb	r0, [ip, #1]
   14704:	cmp	r0, #0
   14708:	beq	14718 <__assert_fail@plt+0x316c>
   1470c:	mvn	lr, #0
   14710:	mov	sl, #0
   14714:	b	14630 <__assert_fail@plt+0x3084>
   14718:	mov	r9, #0
   1471c:	cmp	r7, #0
   14720:	beq	1472c <__assert_fail@plt+0x3180>
   14724:	mov	sl, #0
   14728:	b	14630 <__assert_fail@plt+0x3084>
   1472c:	mov	r1, #1
   14730:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14734:	cmp	r0, #2
   14738:	bne	14750 <__assert_fail@plt+0x31a4>
   1473c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14740:	mov	r9, r1
   14744:	tst	r0, #1
   14748:	beq	14630 <__assert_fail@plt+0x3084>
   1474c:	b	14f88 <__assert_fail@plt+0x39dc>
   14750:	mov	r9, r1
   14754:	b	14630 <__assert_fail@plt+0x3084>
   14758:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1475c:	cmp	r0, #2
   14760:	bne	1499c <__assert_fail@plt+0x33f0>
   14764:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14768:	tst	r0, #1
   1476c:	bne	14f88 <__assert_fail@plt+0x39dc>
   14770:	mov	sl, #0
   14774:	b	149b0 <__assert_fail@plt+0x3404>
   14778:	mov	r0, #102	; 0x66
   1477c:	b	14a24 <__assert_fail@plt+0x3478>
   14780:	mov	r2, #116	; 0x74
   14784:	b	14794 <__assert_fail@plt+0x31e8>
   14788:	mov	r0, #98	; 0x62
   1478c:	b	14a24 <__assert_fail@plt+0x3478>
   14790:	mov	r2, #114	; 0x72
   14794:	ldr	r0, [sp, #68]	; 0x44
   14798:	tst	r0, #1
   1479c:	mov	r0, r2
   147a0:	bne	14a24 <__assert_fail@plt+0x3478>
   147a4:	b	14f88 <__assert_fail@plt+0x39dc>
   147a8:	ldr	r0, [sp, #84]	; 0x54
   147ac:	tst	r0, #1
   147b0:	beq	14a40 <__assert_fail@plt+0x3494>
   147b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   147b8:	tst	r0, #1
   147bc:	bne	15074 <__assert_fail@plt+0x3ac8>
   147c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   147c4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   147c8:	subs	r0, r0, #2
   147cc:	movwne	r0, #1
   147d0:	orr	r0, r0, r1
   147d4:	tst	r0, #1
   147d8:	bne	14814 <__assert_fail@plt+0x3268>
   147dc:	cmp	r8, r4
   147e0:	movcc	r0, #39	; 0x27
   147e4:	strbcc	r0, [r5, r8]
   147e8:	add	r0, r8, #1
   147ec:	cmp	r0, r4
   147f0:	movcc	r1, #36	; 0x24
   147f4:	strbcc	r1, [r5, r0]
   147f8:	add	r0, r8, #2
   147fc:	add	r8, r8, #3
   14800:	cmp	r0, r4
   14804:	movcc	r1, #39	; 0x27
   14808:	strbcc	r1, [r5, r0]
   1480c:	mov	r0, #1
   14810:	str	r0, [fp, #-56]	; 0xffffffc8
   14814:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14818:	cmp	r8, r4
   1481c:	mov	r9, #0
   14820:	mov	sl, #1
   14824:	mov	r6, #48	; 0x30
   14828:	movcc	r0, #92	; 0x5c
   1482c:	strbcc	r0, [r5, r8]
   14830:	add	r0, r8, #1
   14834:	cmp	r1, #2
   14838:	beq	14c08 <__assert_fail@plt+0x365c>
   1483c:	add	r1, r7, #1
   14840:	cmp	r1, lr
   14844:	bcs	14c08 <__assert_fail@plt+0x365c>
   14848:	ldrb	r1, [ip, r1]
   1484c:	sub	r1, r1, #48	; 0x30
   14850:	uxtb	r1, r1
   14854:	cmp	r1, #9
   14858:	bhi	14c08 <__assert_fail@plt+0x365c>
   1485c:	cmp	r0, r4
   14860:	movcc	r1, #48	; 0x30
   14864:	strbcc	r1, [r5, r0]
   14868:	add	r0, r8, #2
   1486c:	add	r8, r8, #3
   14870:	cmp	r0, r4
   14874:	movcc	r1, #48	; 0x30
   14878:	strbcc	r1, [r5, r0]
   1487c:	b	14630 <__assert_fail@plt+0x3084>
   14880:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14884:	mov	sl, #0
   14888:	mov	r6, #63	; 0x3f
   1488c:	cmp	r0, #5
   14890:	beq	14c10 <__assert_fail@plt+0x3664>
   14894:	cmp	r0, #2
   14898:	bne	14cb8 <__assert_fail@plt+0x370c>
   1489c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   148a0:	mov	r9, #0
   148a4:	tst	r0, #1
   148a8:	beq	14630 <__assert_fail@plt+0x3084>
   148ac:	b	14f88 <__assert_fail@plt+0x39dc>
   148b0:	mov	r0, #118	; 0x76
   148b4:	b	14a24 <__assert_fail@plt+0x3478>
   148b8:	mov	r0, #1
   148bc:	mov	r6, #39	; 0x27
   148c0:	str	r0, [sp, #60]	; 0x3c
   148c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   148c8:	cmp	r0, #2
   148cc:	bne	14a5c <__assert_fail@plt+0x34b0>
   148d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   148d4:	tst	r0, #1
   148d8:	bne	14f88 <__assert_fail@plt+0x39dc>
   148dc:	ldr	r2, [sp, #56]	; 0x38
   148e0:	clz	r1, r4
   148e4:	mov	sl, #0
   148e8:	mov	r9, #1
   148ec:	lsr	r1, r1, #5
   148f0:	cmp	r2, #0
   148f4:	mov	r0, r2
   148f8:	movwne	r0, #1
   148fc:	orrs	r0, r0, r1
   14900:	moveq	r2, r4
   14904:	moveq	r4, r0
   14908:	cmp	r8, r4
   1490c:	str	r2, [sp, #56]	; 0x38
   14910:	movcc	r0, #39	; 0x27
   14914:	strbcc	r0, [r5, r8]
   14918:	add	r0, r8, #1
   1491c:	cmp	r0, r4
   14920:	movcc	r1, #92	; 0x5c
   14924:	strbcc	r1, [r5, r0]
   14928:	add	r0, r8, #2
   1492c:	add	r8, r8, #3
   14930:	cmp	r0, r4
   14934:	movcc	r1, #39	; 0x27
   14938:	strbcc	r1, [r5, r0]
   1493c:	mov	r0, #0
   14940:	str	r0, [fp, #-56]	; 0xffffffc8
   14944:	b	14630 <__assert_fail@plt+0x3084>
   14948:	ldr	r0, [sp, #40]	; 0x28
   1494c:	str	r4, [sp, #88]	; 0x58
   14950:	cmp	r0, #1
   14954:	bne	14a64 <__assert_fail@plt+0x34b8>
   14958:	str	lr, [sp, #28]
   1495c:	bl	11444 <__ctype_b_loc@plt>
   14960:	ldr	r0, [r0]
   14964:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14968:	mov	r2, #1
   1496c:	add	r0, r0, r6, lsl #1
   14970:	ldrb	r0, [r0, #1]
   14974:	ubfx	r9, r0, #6, #1
   14978:	ldr	r0, [sp, #52]	; 0x34
   1497c:	cmp	r2, #1
   14980:	orr	r0, r9, r0
   14984:	bhi	14cc0 <__assert_fail@plt+0x3714>
   14988:	tst	r0, #1
   1498c:	beq	14cc0 <__assert_fail@plt+0x3714>
   14990:	ldr	lr, [sp, #28]
   14994:	ldr	r4, [sp, #88]	; 0x58
   14998:	b	14630 <__assert_fail@plt+0x3084>
   1499c:	ldr	r1, [sp, #48]	; 0x30
   149a0:	mov	sl, #0
   149a4:	mov	r0, #92	; 0x5c
   149a8:	cmp	r1, #0
   149ac:	beq	14a24 <__assert_fail@plt+0x3478>
   149b0:	mov	r6, #92	; 0x5c
   149b4:	mov	r9, #0
   149b8:	cmp	sl, #0
   149bc:	bne	149f4 <__assert_fail@plt+0x3448>
   149c0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   149c4:	tst	r0, #1
   149c8:	beq	149f4 <__assert_fail@plt+0x3448>
   149cc:	cmp	r8, r4
   149d0:	movcc	r0, #39	; 0x27
   149d4:	strbcc	r0, [r5, r8]
   149d8:	add	r0, r8, #1
   149dc:	add	r8, r8, #2
   149e0:	cmp	r0, r4
   149e4:	movcc	r1, #39	; 0x27
   149e8:	strbcc	r1, [r5, r0]
   149ec:	mov	r0, #0
   149f0:	str	r0, [fp, #-56]	; 0xffffffc8
   149f4:	mov	r1, r9
   149f8:	mov	r0, r6
   149fc:	cmp	r8, r4
   14a00:	strbcc	r0, [r5, r8]
   14a04:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14a08:	add	r8, r8, #1
   14a0c:	and	r0, r0, r1
   14a10:	str	r0, [fp, #-48]	; 0xffffffd0
   14a14:	add	r7, r7, #1
   14a18:	cmn	lr, #1
   14a1c:	bne	1435c <__assert_fail@plt+0x2db0>
   14a20:	b	14368 <__assert_fail@plt+0x2dbc>
   14a24:	ldr	r1, [sp, #84]	; 0x54
   14a28:	mov	sl, #0
   14a2c:	mov	r9, #0
   14a30:	tst	r1, #1
   14a34:	mov	r1, #0
   14a38:	beq	14630 <__assert_fail@plt+0x3084>
   14a3c:	b	14678 <__assert_fail@plt+0x30cc>
   14a40:	ldr	r0, [sp, #36]	; 0x24
   14a44:	mov	r6, #0
   14a48:	mov	sl, #0
   14a4c:	mov	r9, #0
   14a50:	cmp	r0, #0
   14a54:	beq	14630 <__assert_fail@plt+0x3084>
   14a58:	b	14a14 <__assert_fail@plt+0x3468>
   14a5c:	mov	r9, #1
   14a60:	b	14630 <__assert_fail@plt+0x3084>
   14a64:	mov	r0, #0
   14a68:	cmn	lr, #1
   14a6c:	sub	r4, fp, #40	; 0x28
   14a70:	str	r0, [fp, #-36]	; 0xffffffdc
   14a74:	str	r0, [fp, #-40]	; 0xffffffd8
   14a78:	bne	14a8c <__assert_fail@plt+0x34e0>
   14a7c:	mov	r0, ip
   14a80:	bl	11480 <strlen@plt>
   14a84:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14a88:	mov	lr, r0
   14a8c:	ldr	r0, [sp, #72]	; 0x48
   14a90:	mov	r9, #1
   14a94:	mov	r2, #0
   14a98:	str	lr, [sp, #28]
   14a9c:	add	r0, r0, r7
   14aa0:	str	r0, [sp, #20]
   14aa4:	b	14ae8 <__assert_fail@plt+0x353c>
   14aa8:	ldr	r5, [sp, #44]	; 0x2c
   14aac:	add	r5, r0, r5
   14ab0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14ab4:	bl	11384 <iswprint@plt>
   14ab8:	cmp	r0, #0
   14abc:	sub	r4, fp, #40	; 0x28
   14ac0:	movwne	r0, #1
   14ac4:	and	r9, r9, r0
   14ac8:	mov	r0, r4
   14acc:	bl	11330 <mbsinit@plt>
   14ad0:	mov	r2, r5
   14ad4:	ldr	lr, [sp, #28]
   14ad8:	ldr	r5, [fp, #-84]	; 0xffffffac
   14adc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14ae0:	cmp	r0, #0
   14ae4:	bne	14978 <__assert_fail@plt+0x33cc>
   14ae8:	add	r0, r2, r7
   14aec:	str	r2, [sp, #44]	; 0x2c
   14af0:	mov	r3, r4
   14af4:	add	r1, ip, r0
   14af8:	str	r0, [sp, #24]
   14afc:	sub	r2, lr, r0
   14b00:	sub	r0, fp, #44	; 0x2c
   14b04:	bl	13c38 <__assert_fail@plt+0x268c>
   14b08:	cmp	r0, #0
   14b0c:	beq	14eb0 <__assert_fail@plt+0x3904>
   14b10:	cmn	r0, #1
   14b14:	beq	14e6c <__assert_fail@plt+0x38c0>
   14b18:	ldr	lr, [sp, #28]
   14b1c:	cmn	r0, #2
   14b20:	beq	14e74 <__assert_fail@plt+0x38c8>
   14b24:	ldr	r2, [sp, #64]	; 0x40
   14b28:	ldr	r4, [sp, #88]	; 0x58
   14b2c:	ldr	ip, [sp, #84]	; 0x54
   14b30:	cmp	r0, #2
   14b34:	mov	r1, #0
   14b38:	movwcc	r1, #1
   14b3c:	eor	r2, r2, #1
   14b40:	orrs	r1, r2, r1
   14b44:	bne	14aa8 <__assert_fail@plt+0x34fc>
   14b48:	ldr	r1, [sp, #44]	; 0x2c
   14b4c:	ldr	r2, [sp, #20]
   14b50:	add	r1, r2, r1
   14b54:	sub	r2, r0, #1
   14b58:	b	14b68 <__assert_fail@plt+0x35bc>
   14b5c:	add	r1, r1, #1
   14b60:	subs	r2, r2, #1
   14b64:	beq	14aa8 <__assert_fail@plt+0x34fc>
   14b68:	ldrb	r3, [r1]
   14b6c:	sub	r3, r3, #91	; 0x5b
   14b70:	cmp	r3, #33	; 0x21
   14b74:	bhi	14b5c <__assert_fail@plt+0x35b0>
   14b78:	add	r5, pc, #0
   14b7c:	ldr	pc, [r5, r3, lsl #2]
   14b80:	andeq	r4, r1, r4, ror #30
   14b84:	andeq	r4, r1, r4, ror #30
   14b88:	andeq	r4, r1, ip, asr fp
   14b8c:	andeq	r4, r1, r4, ror #30
   14b90:	andeq	r4, r1, ip, asr fp
   14b94:	andeq	r4, r1, r4, ror #30
   14b98:	andeq	r4, r1, ip, asr fp
   14b9c:	andeq	r4, r1, ip, asr fp
   14ba0:	andeq	r4, r1, ip, asr fp
   14ba4:	andeq	r4, r1, ip, asr fp
   14ba8:	andeq	r4, r1, ip, asr fp
   14bac:	andeq	r4, r1, ip, asr fp
   14bb0:	andeq	r4, r1, ip, asr fp
   14bb4:	andeq	r4, r1, ip, asr fp
   14bb8:	andeq	r4, r1, ip, asr fp
   14bbc:	andeq	r4, r1, ip, asr fp
   14bc0:	andeq	r4, r1, ip, asr fp
   14bc4:	andeq	r4, r1, ip, asr fp
   14bc8:	andeq	r4, r1, ip, asr fp
   14bcc:	andeq	r4, r1, ip, asr fp
   14bd0:	andeq	r4, r1, ip, asr fp
   14bd4:	andeq	r4, r1, ip, asr fp
   14bd8:	andeq	r4, r1, ip, asr fp
   14bdc:	andeq	r4, r1, ip, asr fp
   14be0:	andeq	r4, r1, ip, asr fp
   14be4:	andeq	r4, r1, ip, asr fp
   14be8:	andeq	r4, r1, ip, asr fp
   14bec:	andeq	r4, r1, ip, asr fp
   14bf0:	andeq	r4, r1, ip, asr fp
   14bf4:	andeq	r4, r1, ip, asr fp
   14bf8:	andeq	r4, r1, ip, asr fp
   14bfc:	andeq	r4, r1, ip, asr fp
   14c00:	andeq	r4, r1, ip, asr fp
   14c04:	andeq	r4, r1, r4, ror #30
   14c08:	mov	r8, r0
   14c0c:	b	14630 <__assert_fail@plt+0x3084>
   14c10:	ldr	r0, [sp, #32]
   14c14:	cmp	r0, #0
   14c18:	beq	14cb8 <__assert_fail@plt+0x370c>
   14c1c:	add	r0, r7, #2
   14c20:	cmp	r0, lr
   14c24:	bcs	14cb8 <__assert_fail@plt+0x370c>
   14c28:	add	r1, r7, ip
   14c2c:	ldrb	r1, [r1, #1]
   14c30:	cmp	r1, #63	; 0x3f
   14c34:	bne	14cb8 <__assert_fail@plt+0x370c>
   14c38:	ldrb	r9, [ip, r0]
   14c3c:	sub	r2, r9, #33	; 0x21
   14c40:	cmp	r2, #29
   14c44:	bhi	14cb8 <__assert_fail@plt+0x370c>
   14c48:	movw	r1, #20929	; 0x51c1
   14c4c:	mov	r3, #1
   14c50:	movt	r1, #14336	; 0x3800
   14c54:	tst	r1, r3, lsl r2
   14c58:	beq	14cb8 <__assert_fail@plt+0x370c>
   14c5c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14c60:	tst	r1, #1
   14c64:	bne	14f88 <__assert_fail@plt+0x39dc>
   14c68:	cmp	r8, r4
   14c6c:	add	r2, r8, #1
   14c70:	mov	r6, r9
   14c74:	mov	r7, r0
   14c78:	mov	r9, #0
   14c7c:	movcc	r1, #63	; 0x3f
   14c80:	strbcc	r1, [r5, r8]
   14c84:	cmp	r2, r4
   14c88:	movcc	r1, #34	; 0x22
   14c8c:	strbcc	r1, [r5, r2]
   14c90:	add	r2, r8, #2
   14c94:	cmp	r2, r4
   14c98:	movcc	r1, #34	; 0x22
   14c9c:	strbcc	r1, [r5, r2]
   14ca0:	add	r2, r8, #3
   14ca4:	add	r8, r8, #4
   14ca8:	cmp	r2, r4
   14cac:	movcc	r1, #63	; 0x3f
   14cb0:	strbcc	r1, [r5, r2]
   14cb4:	b	14630 <__assert_fail@plt+0x3084>
   14cb8:	mov	r9, #0
   14cbc:	b	14630 <__assert_fail@plt+0x3084>
   14cc0:	ldr	lr, [sp, #28]
   14cc4:	ldr	r4, [fp, #-56]	; 0xffffffc8
   14cc8:	add	r1, r2, r7
   14ccc:	mov	r2, #0
   14cd0:	str	r1, [sp, #44]	; 0x2c
   14cd4:	tst	r0, #1
   14cd8:	bne	14df4 <__assert_fail@plt+0x3848>
   14cdc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14ce0:	tst	r1, #1
   14ce4:	bne	14f84 <__assert_fail@plt+0x39d8>
   14ce8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14cec:	subs	r2, r1, #2
   14cf0:	movwne	r2, #1
   14cf4:	orr	r2, r2, r4
   14cf8:	tst	r2, #1
   14cfc:	bne	14d40 <__assert_fail@plt+0x3794>
   14d00:	ldr	r1, [sp, #88]	; 0x58
   14d04:	add	r2, r8, #1
   14d08:	mov	r4, #1
   14d0c:	cmp	r8, r1
   14d10:	movcc	r1, #39	; 0x27
   14d14:	strbcc	r1, [r5, r8]
   14d18:	ldr	r1, [sp, #88]	; 0x58
   14d1c:	cmp	r2, r1
   14d20:	movcc	r1, #36	; 0x24
   14d24:	strbcc	r1, [r5, r2]
   14d28:	ldr	r1, [sp, #88]	; 0x58
   14d2c:	add	r2, r8, #2
   14d30:	add	r8, r8, #3
   14d34:	cmp	r2, r1
   14d38:	movcc	r1, #39	; 0x27
   14d3c:	strbcc	r1, [r5, r2]
   14d40:	ldr	r1, [sp, #88]	; 0x58
   14d44:	add	r2, r8, #1
   14d48:	cmp	r8, r1
   14d4c:	movcc	r1, #92	; 0x5c
   14d50:	strbcc	r1, [r5, r8]
   14d54:	ldr	r1, [sp, #88]	; 0x58
   14d58:	cmp	r2, r1
   14d5c:	bcs	14d70 <__assert_fail@plt+0x37c4>
   14d60:	uxtb	r3, r6
   14d64:	mov	r1, #48	; 0x30
   14d68:	orr	r3, r1, r3, lsr #6
   14d6c:	strb	r3, [r5, r2]
   14d70:	ldr	r1, [sp, #88]	; 0x58
   14d74:	add	r2, r8, #2
   14d78:	add	r8, r8, #3
   14d7c:	cmp	r2, r1
   14d80:	lsrcc	r3, r6, #3
   14d84:	movcc	r1, #6
   14d88:	bficc	r3, r1, #3, #29
   14d8c:	mov	r1, #6
   14d90:	bfi	r6, r1, #3, #29
   14d94:	strbcc	r3, [r5, r2]
   14d98:	mov	r2, #1
   14d9c:	b	14e1c <__assert_fail@plt+0x3870>
   14da0:	ldr	r1, [sp, #88]	; 0x58
   14da4:	ldr	r5, [fp, #-84]	; 0xffffffac
   14da8:	ldr	r4, [sp, #88]	; 0x58
   14dac:	cmp	r8, r1
   14db0:	movcc	r1, #39	; 0x27
   14db4:	strbcc	r1, [r5, r8]
   14db8:	add	r1, r8, #1
   14dbc:	add	r8, r8, #2
   14dc0:	cmp	r1, r4
   14dc4:	movcc	r4, #39	; 0x27
   14dc8:	strbcc	r4, [r5, r1]
   14dcc:	mov	r4, #0
   14dd0:	ldr	r1, [sp, #88]	; 0x58
   14dd4:	cmp	r8, r1
   14dd8:	ldr	r1, [sp, #72]	; 0x48
   14ddc:	strbcc	r6, [r5, r8]
   14de0:	add	r8, r8, #1
   14de4:	ldrb	r6, [r1, r7]
   14de8:	mov	r7, r3
   14dec:	tst	r0, #1
   14df0:	beq	14cdc <__assert_fail@plt+0x3730>
   14df4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14df8:	tst	r1, #1
   14dfc:	beq	14e14 <__assert_fail@plt+0x3868>
   14e00:	ldr	r1, [sp, #88]	; 0x58
   14e04:	cmp	r8, r1
   14e08:	movcc	r1, #92	; 0x5c
   14e0c:	strbcc	r1, [r5, r8]
   14e10:	add	r8, r8, #1
   14e14:	mov	r1, #0
   14e18:	str	r1, [fp, #-52]	; 0xffffffcc
   14e1c:	ldr	r1, [sp, #44]	; 0x2c
   14e20:	add	r3, r7, #1
   14e24:	and	sl, r2, #1
   14e28:	cmp	r1, r3
   14e2c:	bls	14e50 <__assert_fail@plt+0x38a4>
   14e30:	cmp	sl, #0
   14e34:	mvn	r5, r4
   14e38:	movwne	sl, #1
   14e3c:	orr	r5, r5, sl
   14e40:	tst	r5, #1
   14e44:	beq	14da0 <__assert_fail@plt+0x37f4>
   14e48:	ldr	r5, [fp, #-84]	; 0xffffffac
   14e4c:	b	14dd0 <__assert_fail@plt+0x3824>
   14e50:	str	r4, [fp, #-56]	; 0xffffffc8
   14e54:	ldr	r4, [sp, #88]	; 0x58
   14e58:	cmp	sl, #0
   14e5c:	movwne	sl, #1
   14e60:	cmp	sl, #0
   14e64:	beq	149c0 <__assert_fail@plt+0x3414>
   14e68:	b	149f4 <__assert_fail@plt+0x3448>
   14e6c:	mov	r9, #0
   14e70:	b	14eb0 <__assert_fail@plt+0x3904>
   14e74:	ldr	r0, [sp, #24]
   14e78:	mov	r9, #0
   14e7c:	cmp	lr, r0
   14e80:	bls	14eb0 <__assert_fail@plt+0x3904>
   14e84:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14e88:	ldr	r2, [sp, #44]	; 0x2c
   14e8c:	add	r0, ip, r7
   14e90:	ldrb	r1, [r0, r2]
   14e94:	cmp	r1, #0
   14e98:	beq	14978 <__assert_fail@plt+0x33cc>
   14e9c:	add	r2, r2, #1
   14ea0:	add	r1, r7, r2
   14ea4:	cmp	r1, lr
   14ea8:	bcc	14e90 <__assert_fail@plt+0x38e4>
   14eac:	b	14978 <__assert_fail@plt+0x33cc>
   14eb0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14eb4:	ldr	r2, [sp, #44]	; 0x2c
   14eb8:	b	14978 <__assert_fail@plt+0x33cc>
   14ebc:	mov	lr, r7
   14ec0:	b	14ec8 <__assert_fail@plt+0x391c>
   14ec4:	mvn	lr, #0
   14ec8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14ecc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14ed0:	eor	r0, r1, #2
   14ed4:	orr	r0, r0, r8
   14ed8:	clz	r0, r0
   14edc:	lsr	r0, r0, #5
   14ee0:	tst	r2, r0
   14ee4:	bne	14f88 <__assert_fail@plt+0x39dc>
   14ee8:	subs	r0, r1, #2
   14eec:	movwne	r0, #1
   14ef0:	orr	r0, r2, r0
   14ef4:	tst	r0, #1
   14ef8:	ldreq	r0, [sp, #60]	; 0x3c
   14efc:	eoreq	r0, r0, #1
   14f00:	tsteq	r0, #1
   14f04:	bne	1501c <__assert_fail@plt+0x3a70>
   14f08:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14f0c:	mov	sl, lr
   14f10:	tst	r0, #1
   14f14:	bne	14fe8 <__assert_fail@plt+0x3a3c>
   14f18:	ldr	r6, [sp, #56]	; 0x38
   14f1c:	mov	r9, #0
   14f20:	cmp	r6, #0
   14f24:	beq	15014 <__assert_fail@plt+0x3a68>
   14f28:	ldr	r0, [sp, #84]	; 0x54
   14f2c:	mov	r1, #0
   14f30:	mov	r7, #2
   14f34:	cmp	r4, #0
   14f38:	str	r1, [fp, #-48]	; 0xffffffd0
   14f3c:	mov	r1, #0
   14f40:	str	r1, [fp, #-76]	; 0xffffffb4
   14f44:	beq	140e4 <__assert_fail@plt+0x2b38>
   14f48:	b	1501c <__assert_fail@plt+0x3a70>
   14f4c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14f50:	ldr	r1, [fp, #12]
   14f54:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14f58:	mov	lr, r4
   14f5c:	mov	r4, r6
   14f60:	b	14fa8 <__assert_fail@plt+0x39fc>
   14f64:	tst	ip, #1
   14f68:	ldr	r5, [fp, #-84]	; 0xffffffac
   14f6c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14f70:	ldr	r1, [fp, #12]
   14f74:	mov	r0, #2
   14f78:	movwne	r0, #4
   14f7c:	mov	r2, r0
   14f80:	b	14fa8 <__assert_fail@plt+0x39fc>
   14f84:	ldr	r4, [sp, #88]	; 0x58
   14f88:	ldr	r1, [sp, #84]	; 0x54
   14f8c:	mov	r0, #2
   14f90:	tst	r1, #1
   14f94:	movwne	r0, #4
   14f98:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14f9c:	ldr	r1, [fp, #12]
   14fa0:	cmp	r2, #2
   14fa4:	moveq	r2, r0
   14fa8:	mov	r0, #0
   14fac:	bic	r1, r1, #2
   14fb0:	str	r2, [sp]
   14fb4:	mov	r2, ip
   14fb8:	mov	r3, lr
   14fbc:	str	r0, [sp, #8]
   14fc0:	ldr	r0, [sp, #76]	; 0x4c
   14fc4:	str	r1, [sp, #4]
   14fc8:	mov	r1, r4
   14fcc:	str	r0, [sp, #12]
   14fd0:	ldr	r0, [sp, #80]	; 0x50
   14fd4:	str	r0, [sp, #16]
   14fd8:	mov	r0, r5
   14fdc:	bl	14054 <__assert_fail@plt+0x2aa8>
   14fe0:	mov	r8, r0
   14fe4:	b	15068 <__assert_fail@plt+0x3abc>
   14fe8:	mov	r0, #5
   14fec:	ldr	r1, [sp, #56]	; 0x38
   14ff0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14ff4:	mov	r3, sl
   14ff8:	str	r0, [sp]
   14ffc:	ldr	r0, [fp, #12]
   15000:	str	r0, [sp, #4]
   15004:	ldr	r0, [fp, #16]
   15008:	str	r0, [sp, #8]
   1500c:	ldr	r0, [sp, #76]	; 0x4c
   15010:	b	14fcc <__assert_fail@plt+0x3a20>
   15014:	mov	r0, #0
   15018:	str	r0, [fp, #-76]	; 0xffffffb4
   1501c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15020:	cmp	r1, #0
   15024:	beq	1505c <__assert_fail@plt+0x3ab0>
   15028:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1502c:	tst	r0, #1
   15030:	bne	1505c <__assert_fail@plt+0x3ab0>
   15034:	ldrb	r0, [r1]
   15038:	cmp	r0, #0
   1503c:	beq	1505c <__assert_fail@plt+0x3ab0>
   15040:	add	r1, r1, #1
   15044:	cmp	r8, r4
   15048:	strbcc	r0, [r5, r8]
   1504c:	add	r8, r8, #1
   15050:	ldrb	r0, [r1], #1
   15054:	cmp	r0, #0
   15058:	bne	15044 <__assert_fail@plt+0x3a98>
   1505c:	cmp	r8, r4
   15060:	movcc	r0, #0
   15064:	strbcc	r0, [r5, r8]
   15068:	mov	r0, r8
   1506c:	sub	sp, fp, #28
   15070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15074:	mov	r0, #4
   15078:	b	14f98 <__assert_fail@plt+0x39ec>
   1507c:	bl	11594 <abort@plt>
   15080:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15084:	add	fp, sp, #28
   15088:	sub	sp, sp, #28
   1508c:	movw	r5, #37360	; 0x91f0
   15090:	cmp	r2, #0
   15094:	mov	r4, r1
   15098:	mov	r7, r0
   1509c:	str	r0, [sp, #20]
   150a0:	movt	r5, #2
   150a4:	movne	r5, r2
   150a8:	bl	114a4 <__errno_location@plt>
   150ac:	mov	sl, r0
   150b0:	ldr	r2, [r5, #40]	; 0x28
   150b4:	ldr	r3, [r5, #44]	; 0x2c
   150b8:	ldm	r5, {r0, r1}
   150bc:	orr	r8, r1, #1
   150c0:	add	r9, r5, #8
   150c4:	mov	r1, #0
   150c8:	ldr	r6, [sl]
   150cc:	stm	sp, {r0, r8, r9}
   150d0:	mov	r0, #0
   150d4:	str	r2, [sp, #12]
   150d8:	str	r3, [sp, #16]
   150dc:	mov	r2, r7
   150e0:	mov	r3, r4
   150e4:	str	r6, [sp, #24]
   150e8:	mov	r6, r4
   150ec:	bl	14054 <__assert_fail@plt+0x2aa8>
   150f0:	add	r7, r0, #1
   150f4:	mov	r0, r7
   150f8:	bl	16634 <__assert_fail@plt+0x5088>
   150fc:	mov	r4, r0
   15100:	ldr	r0, [r5]
   15104:	ldr	r2, [r5, #44]	; 0x2c
   15108:	ldr	r1, [r5, #40]	; 0x28
   1510c:	mov	r3, r6
   15110:	stm	sp, {r0, r8, r9}
   15114:	str	r2, [sp, #16]
   15118:	ldr	r2, [sp, #20]
   1511c:	str	r1, [sp, #12]
   15120:	mov	r0, r4
   15124:	mov	r1, r7
   15128:	bl	14054 <__assert_fail@plt+0x2aa8>
   1512c:	ldr	r0, [sp, #24]
   15130:	str	r0, [sl]
   15134:	mov	r0, r4
   15138:	sub	sp, fp, #28
   1513c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15144:	add	fp, sp, #28
   15148:	sub	sp, sp, #36	; 0x24
   1514c:	movw	r8, #37360	; 0x91f0
   15150:	cmp	r3, #0
   15154:	mov	r4, r2
   15158:	str	r2, [sp, #24]
   1515c:	mov	r5, r1
   15160:	mov	r6, r0
   15164:	str	r0, [sp, #20]
   15168:	movt	r8, #2
   1516c:	movne	r8, r3
   15170:	bl	114a4 <__errno_location@plt>
   15174:	str	r0, [sp, #28]
   15178:	ldr	r1, [r8, #40]	; 0x28
   1517c:	ldr	r2, [r8, #44]	; 0x2c
   15180:	ldr	r7, [r0]
   15184:	cmp	r4, #0
   15188:	add	sl, r8, #8
   1518c:	mov	r0, #0
   15190:	ldm	r8, {r3, r9}
   15194:	orreq	r9, r9, #1
   15198:	stm	sp, {r3, r9, sl}
   1519c:	str	r1, [sp, #12]
   151a0:	str	r2, [sp, #16]
   151a4:	mov	r1, #0
   151a8:	mov	r2, r6
   151ac:	mov	r3, r5
   151b0:	str	r7, [sp, #32]
   151b4:	mov	r7, r5
   151b8:	bl	14054 <__assert_fail@plt+0x2aa8>
   151bc:	add	r4, r0, #1
   151c0:	mov	r5, r0
   151c4:	mov	r0, r4
   151c8:	bl	16634 <__assert_fail@plt+0x5088>
   151cc:	mov	r6, r0
   151d0:	ldr	r0, [r8]
   151d4:	ldr	r2, [r8, #44]	; 0x2c
   151d8:	ldr	r1, [r8, #40]	; 0x28
   151dc:	mov	r3, r7
   151e0:	stm	sp, {r0, r9, sl}
   151e4:	str	r2, [sp, #16]
   151e8:	ldr	r2, [sp, #20]
   151ec:	str	r1, [sp, #12]
   151f0:	mov	r0, r6
   151f4:	mov	r1, r4
   151f8:	bl	14054 <__assert_fail@plt+0x2aa8>
   151fc:	ldr	r0, [sp, #24]
   15200:	ldr	r1, [sp, #32]
   15204:	ldr	r2, [sp, #28]
   15208:	cmp	r0, #0
   1520c:	str	r1, [r2]
   15210:	strne	r5, [r0]
   15214:	mov	r0, r6
   15218:	sub	sp, fp, #28
   1521c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15220:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15224:	add	fp, sp, #24
   15228:	movw	r5, #37172	; 0x9134
   1522c:	movw	r8, #37168	; 0x9130
   15230:	movt	r5, #2
   15234:	movt	r8, #2
   15238:	ldr	r0, [r5]
   1523c:	ldr	r4, [r8]
   15240:	cmp	r0, #2
   15244:	blt	15270 <__assert_fail@plt+0x3cc4>
   15248:	add	r7, r4, #12
   1524c:	mov	r6, #0
   15250:	ldr	r0, [r7, r6, lsl #3]
   15254:	bl	13a5c <__assert_fail@plt+0x24b0>
   15258:	ldr	r1, [r5]
   1525c:	add	r2, r6, #2
   15260:	add	r0, r6, #1
   15264:	mov	r6, r0
   15268:	cmp	r2, r1
   1526c:	blt	15250 <__assert_fail@plt+0x3ca4>
   15270:	ldr	r0, [r4, #4]
   15274:	movw	r9, #37408	; 0x9220
   15278:	movw	r7, #37176	; 0x9138
   1527c:	movt	r9, #2
   15280:	movt	r7, #2
   15284:	cmp	r0, r9
   15288:	beq	15298 <__assert_fail@plt+0x3cec>
   1528c:	bl	13a5c <__assert_fail@plt+0x24b0>
   15290:	mov	r0, #256	; 0x100
   15294:	stm	r7, {r0, r9}
   15298:	cmp	r4, r7
   1529c:	beq	152ac <__assert_fail@plt+0x3d00>
   152a0:	mov	r0, r4
   152a4:	bl	13a5c <__assert_fail@plt+0x24b0>
   152a8:	str	r7, [r8]
   152ac:	mov	r0, #1
   152b0:	str	r0, [r5]
   152b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   152b8:	movw	r3, #37360	; 0x91f0
   152bc:	mvn	r2, #0
   152c0:	movt	r3, #2
   152c4:	b	152c8 <__assert_fail@plt+0x3d1c>
   152c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152cc:	add	fp, sp, #28
   152d0:	sub	sp, sp, #44	; 0x2c
   152d4:	mov	r7, r3
   152d8:	str	r2, [sp, #36]	; 0x24
   152dc:	str	r1, [sp, #32]
   152e0:	mov	r5, r0
   152e4:	bl	114a4 <__errno_location@plt>
   152e8:	cmp	r5, #0
   152ec:	bmi	1545c <__assert_fail@plt+0x3eb0>
   152f0:	cmn	r5, #-2147483647	; 0x80000001
   152f4:	beq	1545c <__assert_fail@plt+0x3eb0>
   152f8:	movw	r8, #37172	; 0x9134
   152fc:	movw	r4, #37168	; 0x9130
   15300:	str	r0, [sp, #28]
   15304:	ldr	r0, [r0]
   15308:	movt	r8, #2
   1530c:	movt	r4, #2
   15310:	ldr	r1, [r8]
   15314:	ldr	r6, [r4]
   15318:	str	r0, [sp, #24]
   1531c:	cmp	r1, r5
   15320:	ble	1532c <__assert_fail@plt+0x3d80>
   15324:	mov	sl, r6
   15328:	b	15398 <__assert_fail@plt+0x3dec>
   1532c:	movw	r9, #37176	; 0x9138
   15330:	mov	r0, #8
   15334:	str	r1, [fp, #-32]	; 0xffffffe0
   15338:	sub	r1, r5, r1
   1533c:	mvn	r3, #-2147483648	; 0x80000000
   15340:	movt	r9, #2
   15344:	str	r0, [sp]
   15348:	add	r2, r1, #1
   1534c:	sub	r1, fp, #32
   15350:	subs	r0, r6, r9
   15354:	movne	r0, r6
   15358:	bl	16834 <__assert_fail@plt+0x5288>
   1535c:	mov	sl, r0
   15360:	cmp	r6, r9
   15364:	str	r0, [r4]
   15368:	bne	15374 <__assert_fail@plt+0x3dc8>
   1536c:	ldrd	r0, [r9]
   15370:	stm	sl, {r0, r1}
   15374:	ldr	r1, [r8]
   15378:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1537c:	add	r0, sl, r1, lsl #3
   15380:	sub	r1, r2, r1
   15384:	lsl	r2, r1, #3
   15388:	mov	r1, #0
   1538c:	bl	114c8 <memset@plt>
   15390:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15394:	str	r0, [r8]
   15398:	mov	r9, sl
   1539c:	ldm	r7, {r0, r1}
   153a0:	orr	r8, r1, #1
   153a4:	add	r1, r7, #8
   153a8:	ldr	r2, [r7, #40]	; 0x28
   153ac:	ldr	r3, [r7, #44]	; 0x2c
   153b0:	ldr	r6, [r9, r5, lsl #3]!
   153b4:	str	r1, [sp, #20]
   153b8:	ldr	r4, [r9, #4]!
   153bc:	stm	sp, {r0, r8}
   153c0:	add	r0, sp, #8
   153c4:	stm	r0, {r1, r2, r3}
   153c8:	ldr	r2, [sp, #32]
   153cc:	ldr	r3, [sp, #36]	; 0x24
   153d0:	mov	r1, r6
   153d4:	mov	r0, r4
   153d8:	bl	14054 <__assert_fail@plt+0x2aa8>
   153dc:	cmp	r6, r0
   153e0:	bhi	15444 <__assert_fail@plt+0x3e98>
   153e4:	add	r6, r0, #1
   153e8:	movw	r0, #37408	; 0x9220
   153ec:	movt	r0, #2
   153f0:	str	r6, [sl, r5, lsl #3]
   153f4:	cmp	r4, r0
   153f8:	beq	15404 <__assert_fail@plt+0x3e58>
   153fc:	mov	r0, r4
   15400:	bl	13a5c <__assert_fail@plt+0x24b0>
   15404:	mov	r0, r6
   15408:	bl	16634 <__assert_fail@plt+0x5088>
   1540c:	str	r0, [r9]
   15410:	mov	r4, r0
   15414:	add	r3, sp, #8
   15418:	ldr	r0, [r7]
   1541c:	ldr	r1, [r7, #40]	; 0x28
   15420:	ldr	r2, [r7, #44]	; 0x2c
   15424:	stm	sp, {r0, r8}
   15428:	ldr	r0, [sp, #20]
   1542c:	stm	r3, {r0, r1, r2}
   15430:	ldr	r2, [sp, #32]
   15434:	ldr	r3, [sp, #36]	; 0x24
   15438:	mov	r0, r4
   1543c:	mov	r1, r6
   15440:	bl	14054 <__assert_fail@plt+0x2aa8>
   15444:	ldr	r0, [sp, #28]
   15448:	ldr	r1, [sp, #24]
   1544c:	str	r1, [r0]
   15450:	mov	r0, r4
   15454:	sub	sp, fp, #28
   15458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1545c:	bl	11594 <abort@plt>
   15460:	movw	r3, #37360	; 0x91f0
   15464:	movt	r3, #2
   15468:	b	152c8 <__assert_fail@plt+0x3d1c>
   1546c:	movw	r3, #37360	; 0x91f0
   15470:	mov	r1, r0
   15474:	mov	r0, #0
   15478:	mvn	r2, #0
   1547c:	movt	r3, #2
   15480:	b	152c8 <__assert_fail@plt+0x3d1c>
   15484:	movw	r3, #37360	; 0x91f0
   15488:	mov	r2, r1
   1548c:	mov	r1, r0
   15490:	mov	r0, #0
   15494:	movt	r3, #2
   15498:	b	152c8 <__assert_fail@plt+0x3d1c>
   1549c:	push	{fp, lr}
   154a0:	mov	fp, sp
   154a4:	sub	sp, sp, #48	; 0x30
   154a8:	vmov.i32	q8, #0	; 0x00000000
   154ac:	mov	ip, #32
   154b0:	mov	r3, sp
   154b4:	mov	lr, r2
   154b8:	cmp	r1, #10
   154bc:	add	r2, r3, #16
   154c0:	vst1.64	{d16-d17}, [r3], ip
   154c4:	vst1.64	{d16-d17}, [r2]
   154c8:	vst1.64	{d16-d17}, [r3]
   154cc:	beq	154ec <__assert_fail@plt+0x3f40>
   154d0:	str	r1, [sp]
   154d4:	mov	r3, sp
   154d8:	mov	r1, lr
   154dc:	mvn	r2, #0
   154e0:	bl	152c8 <__assert_fail@plt+0x3d1c>
   154e4:	mov	sp, fp
   154e8:	pop	{fp, pc}
   154ec:	bl	11594 <abort@plt>
   154f0:	push	{r4, sl, fp, lr}
   154f4:	add	fp, sp, #8
   154f8:	sub	sp, sp, #48	; 0x30
   154fc:	vmov.i32	q8, #0	; 0x00000000
   15500:	mov	ip, r3
   15504:	mov	r3, sp
   15508:	mov	lr, #32
   1550c:	cmp	r1, #10
   15510:	add	r4, r3, #16
   15514:	vst1.64	{d16-d17}, [r3], lr
   15518:	vst1.64	{d16-d17}, [r4]
   1551c:	vst1.64	{d16-d17}, [r3]
   15520:	beq	15540 <__assert_fail@plt+0x3f94>
   15524:	str	r1, [sp]
   15528:	mov	r1, r2
   1552c:	mov	r3, sp
   15530:	mov	r2, ip
   15534:	bl	152c8 <__assert_fail@plt+0x3d1c>
   15538:	sub	sp, fp, #8
   1553c:	pop	{r4, sl, fp, pc}
   15540:	bl	11594 <abort@plt>
   15544:	push	{fp, lr}
   15548:	mov	fp, sp
   1554c:	sub	sp, sp, #48	; 0x30
   15550:	vmov.i32	q8, #0	; 0x00000000
   15554:	mov	r3, sp
   15558:	mov	ip, #32
   1555c:	cmp	r0, #10
   15560:	add	r2, r3, #16
   15564:	vst1.64	{d16-d17}, [r3], ip
   15568:	vst1.64	{d16-d17}, [r2]
   1556c:	vst1.64	{d16-d17}, [r3]
   15570:	beq	15590 <__assert_fail@plt+0x3fe4>
   15574:	str	r0, [sp]
   15578:	mov	r3, sp
   1557c:	mov	r0, #0
   15580:	mvn	r2, #0
   15584:	bl	152c8 <__assert_fail@plt+0x3d1c>
   15588:	mov	sp, fp
   1558c:	pop	{fp, pc}
   15590:	bl	11594 <abort@plt>
   15594:	push	{fp, lr}
   15598:	mov	fp, sp
   1559c:	sub	sp, sp, #48	; 0x30
   155a0:	vmov.i32	q8, #0	; 0x00000000
   155a4:	mov	r3, sp
   155a8:	mov	ip, #32
   155ac:	cmp	r0, #10
   155b0:	add	lr, r3, #16
   155b4:	vst1.64	{d16-d17}, [r3], ip
   155b8:	vst1.64	{d16-d17}, [lr]
   155bc:	vst1.64	{d16-d17}, [r3]
   155c0:	beq	155dc <__assert_fail@plt+0x4030>
   155c4:	str	r0, [sp]
   155c8:	mov	r3, sp
   155cc:	mov	r0, #0
   155d0:	bl	152c8 <__assert_fail@plt+0x3d1c>
   155d4:	mov	sp, fp
   155d8:	pop	{fp, pc}
   155dc:	bl	11594 <abort@plt>
   155e0:	push	{r4, sl, fp, lr}
   155e4:	add	fp, sp, #8
   155e8:	sub	sp, sp, #48	; 0x30
   155ec:	mov	lr, r0
   155f0:	movw	r0, #37360	; 0x91f0
   155f4:	mov	ip, r1
   155f8:	mov	r1, #32
   155fc:	mov	r4, #1
   15600:	movt	r0, #2
   15604:	add	r3, r0, #16
   15608:	vld1.64	{d16-d17}, [r0], r1
   1560c:	vld1.64	{d20-d21}, [r0]
   15610:	vld1.64	{d18-d19}, [r3]
   15614:	mov	r3, sp
   15618:	add	r0, r3, #32
   1561c:	add	r1, r3, #16
   15620:	vst1.64	{d20-d21}, [r0]
   15624:	mov	r0, #28
   15628:	vst1.64	{d18-d19}, [r1]
   1562c:	mov	r1, r3
   15630:	and	r0, r0, r2, lsr #3
   15634:	and	r2, r2, #31
   15638:	vst1.64	{d16-d17}, [r1], r0
   1563c:	ldr	r0, [r1, #8]
   15640:	bic	r4, r4, r0, lsr r2
   15644:	eor	r0, r0, r4, lsl r2
   15648:	mov	r2, ip
   1564c:	str	r0, [r1, #8]
   15650:	mov	r0, #0
   15654:	mov	r1, lr
   15658:	bl	152c8 <__assert_fail@plt+0x3d1c>
   1565c:	sub	sp, fp, #8
   15660:	pop	{r4, sl, fp, pc}
   15664:	push	{fp, lr}
   15668:	mov	fp, sp
   1566c:	sub	sp, sp, #48	; 0x30
   15670:	mov	ip, r0
   15674:	movw	r0, #37360	; 0x91f0
   15678:	mov	r2, #32
   1567c:	movt	r0, #2
   15680:	add	r3, r0, #16
   15684:	vld1.64	{d16-d17}, [r0], r2
   15688:	vld1.64	{d20-d21}, [r0]
   1568c:	vld1.64	{d18-d19}, [r3]
   15690:	mov	r3, sp
   15694:	add	r0, r3, #32
   15698:	add	r2, r3, #16
   1569c:	vst1.64	{d20-d21}, [r0]
   156a0:	mov	r0, #28
   156a4:	vst1.64	{d18-d19}, [r2]
   156a8:	mov	r2, r3
   156ac:	and	r0, r0, r1, lsr #3
   156b0:	and	r1, r1, #31
   156b4:	vst1.64	{d16-d17}, [r2], r0
   156b8:	mov	r0, #1
   156bc:	ldr	lr, [r2, #8]
   156c0:	bic	r0, r0, lr, lsr r1
   156c4:	eor	r0, lr, r0, lsl r1
   156c8:	mov	r1, ip
   156cc:	str	r0, [r2, #8]
   156d0:	mov	r0, #0
   156d4:	mvn	r2, #0
   156d8:	bl	152c8 <__assert_fail@plt+0x3d1c>
   156dc:	mov	sp, fp
   156e0:	pop	{fp, pc}
   156e4:	push	{fp, lr}
   156e8:	mov	fp, sp
   156ec:	sub	sp, sp, #48	; 0x30
   156f0:	mov	r1, r0
   156f4:	movw	r0, #37360	; 0x91f0
   156f8:	mov	r3, #32
   156fc:	movt	r0, #2
   15700:	add	r2, r0, #16
   15704:	vld1.64	{d16-d17}, [r0], r3
   15708:	mov	r3, sp
   1570c:	vld1.64	{d18-d19}, [r2]
   15710:	vld1.64	{d20-d21}, [r0]
   15714:	add	r2, r3, #16
   15718:	add	r0, r3, #32
   1571c:	vst1.64	{d18-d19}, [r2]
   15720:	vst1.64	{d20-d21}, [r0]
   15724:	mov	r0, #12
   15728:	mov	r2, r3
   1572c:	vst1.64	{d16-d17}, [r2], r0
   15730:	ldr	r0, [r2]
   15734:	orr	r0, r0, #67108864	; 0x4000000
   15738:	str	r0, [r2]
   1573c:	mov	r0, #0
   15740:	mvn	r2, #0
   15744:	bl	152c8 <__assert_fail@plt+0x3d1c>
   15748:	mov	sp, fp
   1574c:	pop	{fp, pc}
   15750:	push	{fp, lr}
   15754:	mov	fp, sp
   15758:	sub	sp, sp, #48	; 0x30
   1575c:	mov	ip, r1
   15760:	mov	r1, r0
   15764:	movw	r0, #37360	; 0x91f0
   15768:	mov	r2, #32
   1576c:	movt	r0, #2
   15770:	add	r3, r0, #16
   15774:	vld1.64	{d16-d17}, [r0], r2
   15778:	vld1.64	{d18-d19}, [r3]
   1577c:	vld1.64	{d20-d21}, [r0]
   15780:	mov	r3, sp
   15784:	add	r2, r3, #16
   15788:	add	r0, r3, #32
   1578c:	vst1.64	{d18-d19}, [r2]
   15790:	vst1.64	{d20-d21}, [r0]
   15794:	mov	r0, #12
   15798:	mov	r2, r3
   1579c:	vst1.64	{d16-d17}, [r2], r0
   157a0:	ldr	r0, [r2]
   157a4:	orr	r0, r0, #67108864	; 0x4000000
   157a8:	str	r0, [r2]
   157ac:	mov	r0, #0
   157b0:	mov	r2, ip
   157b4:	bl	152c8 <__assert_fail@plt+0x3d1c>
   157b8:	mov	sp, fp
   157bc:	pop	{fp, pc}
   157c0:	push	{r4, sl, fp, lr}
   157c4:	add	fp, sp, #8
   157c8:	sub	sp, sp, #96	; 0x60
   157cc:	vmov.i32	q8, #0	; 0x00000000
   157d0:	mov	ip, r2
   157d4:	mov	r2, sp
   157d8:	mov	r4, #28
   157dc:	cmp	r1, #10
   157e0:	mov	r3, r2
   157e4:	add	lr, r2, #16
   157e8:	vst1.64	{d16-d17}, [r3], r4
   157ec:	vst1.64	{d16-d17}, [lr]
   157f0:	vst1.32	{d16-d17}, [r3]
   157f4:	beq	15844 <__assert_fail@plt+0x4298>
   157f8:	vld1.64	{d16-d17}, [r2], r4
   157fc:	vld1.64	{d18-d19}, [lr]
   15800:	add	r3, sp, #48	; 0x30
   15804:	vld1.32	{d20-d21}, [r2]
   15808:	add	r2, r3, #20
   1580c:	add	r4, r3, #4
   15810:	vst1.32	{d18-d19}, [r2]
   15814:	add	r2, r3, #32
   15818:	vst1.32	{d16-d17}, [r4]
   1581c:	vst1.32	{d20-d21}, [r2]
   15820:	str	r1, [sp, #48]	; 0x30
   15824:	mvn	r2, #0
   15828:	ldr	r1, [sp, #60]	; 0x3c
   1582c:	orr	r1, r1, #67108864	; 0x4000000
   15830:	str	r1, [sp, #60]	; 0x3c
   15834:	mov	r1, ip
   15838:	bl	152c8 <__assert_fail@plt+0x3d1c>
   1583c:	sub	sp, fp, #8
   15840:	pop	{r4, sl, fp, pc}
   15844:	bl	11594 <abort@plt>
   15848:	push	{r4, r5, r6, sl, fp, lr}
   1584c:	add	fp, sp, #16
   15850:	sub	sp, sp, #48	; 0x30
   15854:	mov	ip, r3
   15858:	movw	r3, #37360	; 0x91f0
   1585c:	mov	r6, #32
   15860:	cmp	r1, #0
   15864:	mov	r4, sp
   15868:	movt	r3, #2
   1586c:	cmpne	r2, #0
   15870:	add	r5, r4, #16
   15874:	add	lr, r3, #16
   15878:	vld1.64	{d16-d17}, [r3], r6
   1587c:	vld1.64	{d18-d19}, [lr]
   15880:	vld1.64	{d20-d21}, [r3]
   15884:	mov	r3, #10
   15888:	vst1.64	{d16-d17}, [r4], r6
   1588c:	vst1.64	{d18-d19}, [r5]
   15890:	vst1.64	{d20-d21}, [r4]
   15894:	str	r3, [sp]
   15898:	bne	158a0 <__assert_fail@plt+0x42f4>
   1589c:	bl	11594 <abort@plt>
   158a0:	str	r2, [sp, #44]	; 0x2c
   158a4:	str	r1, [sp, #40]	; 0x28
   158a8:	mov	r3, sp
   158ac:	mov	r1, ip
   158b0:	mvn	r2, #0
   158b4:	bl	152c8 <__assert_fail@plt+0x3d1c>
   158b8:	sub	sp, fp, #16
   158bc:	pop	{r4, r5, r6, sl, fp, pc}
   158c0:	push	{r4, r5, r6, sl, fp, lr}
   158c4:	add	fp, sp, #16
   158c8:	sub	sp, sp, #48	; 0x30
   158cc:	mov	lr, r3
   158d0:	movw	r3, #37360	; 0x91f0
   158d4:	mov	r6, #32
   158d8:	cmp	r1, #0
   158dc:	mov	r4, sp
   158e0:	movt	r3, #2
   158e4:	cmpne	r2, #0
   158e8:	add	r5, r4, #16
   158ec:	add	ip, r3, #16
   158f0:	vld1.64	{d16-d17}, [r3], r6
   158f4:	vld1.64	{d18-d19}, [ip]
   158f8:	vld1.64	{d20-d21}, [r3]
   158fc:	mov	r3, #10
   15900:	vst1.64	{d16-d17}, [r4], r6
   15904:	vst1.64	{d18-d19}, [r5]
   15908:	vst1.64	{d20-d21}, [r4]
   1590c:	str	r3, [sp]
   15910:	bne	15918 <__assert_fail@plt+0x436c>
   15914:	bl	11594 <abort@plt>
   15918:	ldr	ip, [fp, #8]
   1591c:	str	r2, [sp, #44]	; 0x2c
   15920:	str	r1, [sp, #40]	; 0x28
   15924:	mov	r3, sp
   15928:	mov	r1, lr
   1592c:	mov	r2, ip
   15930:	bl	152c8 <__assert_fail@plt+0x3d1c>
   15934:	sub	sp, fp, #16
   15938:	pop	{r4, r5, r6, sl, fp, pc}
   1593c:	push	{r4, sl, fp, lr}
   15940:	add	fp, sp, #8
   15944:	sub	sp, sp, #48	; 0x30
   15948:	movw	r3, #37360	; 0x91f0
   1594c:	mov	lr, #32
   15950:	mov	ip, r2
   15954:	cmp	r0, #0
   15958:	movt	r3, #2
   1595c:	cmpne	r1, #0
   15960:	add	r2, r3, #16
   15964:	vld1.64	{d16-d17}, [r3], lr
   15968:	vld1.64	{d20-d21}, [r3]
   1596c:	vld1.64	{d18-d19}, [r2]
   15970:	mov	r2, sp
   15974:	add	r4, r2, #16
   15978:	vst1.64	{d16-d17}, [r2], lr
   1597c:	vst1.64	{d20-d21}, [r2]
   15980:	mov	r2, #10
   15984:	vst1.64	{d18-d19}, [r4]
   15988:	str	r2, [sp]
   1598c:	bne	15994 <__assert_fail@plt+0x43e8>
   15990:	bl	11594 <abort@plt>
   15994:	str	r1, [sp, #44]	; 0x2c
   15998:	str	r0, [sp, #40]	; 0x28
   1599c:	mov	r3, sp
   159a0:	mov	r0, #0
   159a4:	mov	r1, ip
   159a8:	mvn	r2, #0
   159ac:	bl	152c8 <__assert_fail@plt+0x3d1c>
   159b0:	sub	sp, fp, #8
   159b4:	pop	{r4, sl, fp, pc}
   159b8:	push	{r4, r5, fp, lr}
   159bc:	add	fp, sp, #8
   159c0:	sub	sp, sp, #48	; 0x30
   159c4:	mov	ip, r3
   159c8:	movw	r3, #37360	; 0x91f0
   159cc:	mov	r4, #32
   159d0:	mov	lr, r2
   159d4:	cmp	r0, #0
   159d8:	movt	r3, #2
   159dc:	cmpne	r1, #0
   159e0:	add	r2, r3, #16
   159e4:	vld1.64	{d16-d17}, [r3], r4
   159e8:	vld1.64	{d20-d21}, [r3]
   159ec:	vld1.64	{d18-d19}, [r2]
   159f0:	mov	r2, sp
   159f4:	add	r5, r2, #16
   159f8:	vst1.64	{d16-d17}, [r2], r4
   159fc:	vst1.64	{d20-d21}, [r2]
   15a00:	mov	r2, #10
   15a04:	vst1.64	{d18-d19}, [r5]
   15a08:	str	r2, [sp]
   15a0c:	bne	15a14 <__assert_fail@plt+0x4468>
   15a10:	bl	11594 <abort@plt>
   15a14:	str	r1, [sp, #44]	; 0x2c
   15a18:	str	r0, [sp, #40]	; 0x28
   15a1c:	mov	r3, sp
   15a20:	mov	r0, #0
   15a24:	mov	r1, lr
   15a28:	mov	r2, ip
   15a2c:	bl	152c8 <__assert_fail@plt+0x3d1c>
   15a30:	sub	sp, fp, #8
   15a34:	pop	{r4, r5, fp, pc}
   15a38:	movw	r3, #37184	; 0x9140
   15a3c:	movt	r3, #2
   15a40:	b	152c8 <__assert_fail@plt+0x3d1c>
   15a44:	movw	r3, #37184	; 0x9140
   15a48:	mov	r2, r1
   15a4c:	mov	r1, r0
   15a50:	mov	r0, #0
   15a54:	movt	r3, #2
   15a58:	b	152c8 <__assert_fail@plt+0x3d1c>
   15a5c:	movw	r3, #37184	; 0x9140
   15a60:	mvn	r2, #0
   15a64:	movt	r3, #2
   15a68:	b	152c8 <__assert_fail@plt+0x3d1c>
   15a6c:	movw	r3, #37184	; 0x9140
   15a70:	mov	r1, r0
   15a74:	mov	r0, #0
   15a78:	mvn	r2, #0
   15a7c:	movt	r3, #2
   15a80:	b	152c8 <__assert_fail@plt+0x3d1c>
   15a84:	push	{r4, r5, fp, lr}
   15a88:	add	fp, sp, #8
   15a8c:	mov	r5, r0
   15a90:	mov	r4, r1
   15a94:	mov	r0, #0
   15a98:	mov	r2, #5
   15a9c:	mov	r1, r5
   15aa0:	bl	1133c <dcgettext@plt>
   15aa4:	cmp	r0, r5
   15aa8:	popne	{r4, r5, fp, pc}
   15aac:	bl	16d4c <__assert_fail@plt+0x57a0>
   15ab0:	ldrb	r1, [r0]
   15ab4:	and	r1, r1, #223	; 0xdf
   15ab8:	cmp	r1, #71	; 0x47
   15abc:	beq	15b24 <__assert_fail@plt+0x4578>
   15ac0:	cmp	r1, #85	; 0x55
   15ac4:	bne	15b7c <__assert_fail@plt+0x45d0>
   15ac8:	ldrb	r1, [r0, #1]
   15acc:	and	r1, r1, #223	; 0xdf
   15ad0:	cmp	r1, #84	; 0x54
   15ad4:	bne	15b7c <__assert_fail@plt+0x45d0>
   15ad8:	ldrb	r1, [r0, #2]
   15adc:	and	r1, r1, #223	; 0xdf
   15ae0:	cmp	r1, #70	; 0x46
   15ae4:	bne	15b7c <__assert_fail@plt+0x45d0>
   15ae8:	ldrb	r1, [r0, #3]
   15aec:	cmp	r1, #45	; 0x2d
   15af0:	bne	15b7c <__assert_fail@plt+0x45d0>
   15af4:	ldrb	r1, [r0, #4]
   15af8:	cmp	r1, #56	; 0x38
   15afc:	bne	15b7c <__assert_fail@plt+0x45d0>
   15b00:	ldrb	r0, [r0, #5]
   15b04:	cmp	r0, #0
   15b08:	bne	15b7c <__assert_fail@plt+0x45d0>
   15b0c:	ldrb	r1, [r5]
   15b10:	movw	r2, #33044	; 0x8114
   15b14:	movw	r0, #33048	; 0x8118
   15b18:	movt	r2, #1
   15b1c:	movt	r0, #1
   15b20:	b	15bac <__assert_fail@plt+0x4600>
   15b24:	ldrb	r1, [r0, #1]
   15b28:	and	r1, r1, #223	; 0xdf
   15b2c:	cmp	r1, #66	; 0x42
   15b30:	bne	15b7c <__assert_fail@plt+0x45d0>
   15b34:	ldrb	r1, [r0, #2]
   15b38:	cmp	r1, #49	; 0x31
   15b3c:	bne	15b7c <__assert_fail@plt+0x45d0>
   15b40:	ldrb	r1, [r0, #3]
   15b44:	cmp	r1, #56	; 0x38
   15b48:	bne	15b7c <__assert_fail@plt+0x45d0>
   15b4c:	ldrb	r1, [r0, #4]
   15b50:	cmp	r1, #48	; 0x30
   15b54:	bne	15b7c <__assert_fail@plt+0x45d0>
   15b58:	ldrb	r1, [r0, #5]
   15b5c:	cmp	r1, #51	; 0x33
   15b60:	bne	15b7c <__assert_fail@plt+0x45d0>
   15b64:	ldrb	r1, [r0, #6]
   15b68:	cmp	r1, #48	; 0x30
   15b6c:	bne	15b7c <__assert_fail@plt+0x45d0>
   15b70:	ldrb	r0, [r0, #7]
   15b74:	cmp	r0, #0
   15b78:	beq	15b98 <__assert_fail@plt+0x45ec>
   15b7c:	movw	r1, #32023	; 0x7d17
   15b80:	movw	r0, #33042	; 0x8112
   15b84:	cmp	r4, #9
   15b88:	movt	r1, #1
   15b8c:	movt	r0, #1
   15b90:	moveq	r0, r1
   15b94:	pop	{r4, r5, fp, pc}
   15b98:	ldrb	r1, [r5]
   15b9c:	movw	r2, #33052	; 0x811c
   15ba0:	movw	r0, #33056	; 0x8120
   15ba4:	movt	r2, #1
   15ba8:	movt	r0, #1
   15bac:	cmp	r1, #96	; 0x60
   15bb0:	moveq	r0, r2
   15bb4:	pop	{r4, r5, fp, pc}
   15bb8:	push	{r4, r5, r6, sl, fp, lr}
   15bbc:	add	fp, sp, #16
   15bc0:	sub	sp, sp, #8
   15bc4:	movw	r5, #27608	; 0x6bd8
   15bc8:	movw	r6, #14940	; 0x3a5c
   15bcc:	mov	r4, r0
   15bd0:	mov	r0, #0
   15bd4:	mov	r1, #0
   15bd8:	mov	r2, #0
   15bdc:	movt	r5, #1
   15be0:	movt	r6, #1
   15be4:	str	r0, [r4]
   15be8:	str	r0, [r4, #4]
   15bec:	str	r0, [r4, #8]
   15bf0:	add	r0, r4, #12
   15bf4:	mov	r3, r5
   15bf8:	str	r6, [sp]
   15bfc:	bl	16d84 <_obstack_begin@@Base>
   15c00:	add	r0, r4, #56	; 0x38
   15c04:	mov	r1, #0
   15c08:	mov	r2, #0
   15c0c:	mov	r3, r5
   15c10:	str	r6, [sp]
   15c14:	bl	16d84 <_obstack_begin@@Base>
   15c18:	add	r0, r4, #100	; 0x64
   15c1c:	mov	r1, #0
   15c20:	mov	r2, #0
   15c24:	mov	r3, r5
   15c28:	str	r6, [sp]
   15c2c:	bl	16d84 <_obstack_begin@@Base>
   15c30:	sub	sp, fp, #16
   15c34:	pop	{r4, r5, r6, sl, fp, pc}
   15c38:	push	{r4, sl, fp, lr}
   15c3c:	add	fp, sp, #8
   15c40:	mov	r4, r0
   15c44:	add	r0, r0, #12
   15c48:	mov	r1, #0
   15c4c:	bl	17064 <_obstack_free@@Base>
   15c50:	add	r0, r4, #56	; 0x38
   15c54:	mov	r1, #0
   15c58:	bl	17064 <_obstack_free@@Base>
   15c5c:	add	r0, r4, #100	; 0x64
   15c60:	mov	r1, #0
   15c64:	pop	{r4, sl, fp, lr}
   15c68:	b	17064 <_obstack_free@@Base>
   15c6c:	push	{r4, r5, r6, r7, fp, lr}
   15c70:	add	fp, sp, #16
   15c74:	mov	r5, r1
   15c78:	mov	r4, r0
   15c7c:	bl	114e0 <fgetc@plt>
   15c80:	cmn	r0, #1
   15c84:	beq	15ce4 <__assert_fail@plt+0x4738>
   15c88:	mov	r7, r0
   15c8c:	add	r6, r5, #12
   15c90:	b	15cc0 <__assert_fail@plt+0x4714>
   15c94:	add	r1, r0, #1
   15c98:	cmp	r7, #0
   15c9c:	str	r1, [r5, #24]
   15ca0:	strb	r7, [r0]
   15ca4:	moveq	r0, r5
   15ca8:	bleq	15e10 <__assert_fail@plt+0x4864>
   15cac:	mov	r0, r4
   15cb0:	bl	114e0 <fgetc@plt>
   15cb4:	mov	r7, r0
   15cb8:	cmn	r0, #1
   15cbc:	beq	15ce4 <__assert_fail@plt+0x4738>
   15cc0:	ldr	r0, [r5, #24]
   15cc4:	ldr	r1, [r5, #28]
   15cc8:	cmp	r1, r0
   15ccc:	bne	15c94 <__assert_fail@plt+0x46e8>
   15cd0:	mov	r0, r6
   15cd4:	mov	r1, #1
   15cd8:	bl	16ed8 <_obstack_newchunk@@Base>
   15cdc:	ldr	r0, [r5, #24]
   15ce0:	b	15c94 <__assert_fail@plt+0x46e8>
   15ce4:	ldr	r1, [r5, #20]
   15ce8:	ldr	r0, [r5, #24]
   15cec:	cmp	r0, r1
   15cf0:	beq	15d28 <__assert_fail@plt+0x477c>
   15cf4:	ldr	r1, [r5, #28]
   15cf8:	cmp	r1, r0
   15cfc:	bne	15d10 <__assert_fail@plt+0x4764>
   15d00:	add	r0, r5, #12
   15d04:	mov	r1, #1
   15d08:	bl	16ed8 <_obstack_newchunk@@Base>
   15d0c:	ldr	r0, [r5, #24]
   15d10:	add	r1, r0, #1
   15d14:	str	r1, [r5, #24]
   15d18:	mov	r1, #0
   15d1c:	strb	r1, [r0]
   15d20:	mov	r0, r5
   15d24:	bl	15e10 <__assert_fail@plt+0x4864>
   15d28:	ldr	r0, [r5, #68]	; 0x44
   15d2c:	ldr	r1, [r5, #72]	; 0x48
   15d30:	sub	r1, r1, r0
   15d34:	cmp	r1, #4
   15d38:	bcs	15d4c <__assert_fail@plt+0x47a0>
   15d3c:	add	r0, r5, #56	; 0x38
   15d40:	mov	r1, #4
   15d44:	bl	16ed8 <_obstack_newchunk@@Base>
   15d48:	ldr	r0, [r5, #68]	; 0x44
   15d4c:	mov	r1, #0
   15d50:	str	r1, [r0]
   15d54:	ldr	r1, [r5, #68]	; 0x44
   15d58:	ldr	r0, [r5, #64]	; 0x40
   15d5c:	add	r2, r1, #4
   15d60:	cmp	r2, r0
   15d64:	str	r2, [r5, #68]	; 0x44
   15d68:	bne	15d78 <__assert_fail@plt+0x47cc>
   15d6c:	ldrb	r1, [r5, #96]	; 0x60
   15d70:	orr	r1, r1, #2
   15d74:	strb	r1, [r5, #96]	; 0x60
   15d78:	ldr	r7, [r5, #80]	; 0x50
   15d7c:	ldr	r3, [r5, #60]	; 0x3c
   15d80:	ldr	r1, [r5, #72]	; 0x48
   15d84:	add	r2, r7, r2
   15d88:	bic	r2, r2, r7
   15d8c:	sub	r7, r2, r3
   15d90:	sub	r3, r1, r3
   15d94:	str	r2, [r5, #68]	; 0x44
   15d98:	cmp	r7, r3
   15d9c:	movhi	r2, r1
   15da0:	strhi	r1, [r5, #68]	; 0x44
   15da4:	str	r0, [r5, #4]
   15da8:	str	r2, [r5, #64]	; 0x40
   15dac:	ldr	r0, [r5, #108]	; 0x6c
   15db0:	ldr	r2, [r5, #112]	; 0x70
   15db4:	cmp	r2, r0
   15db8:	bne	15dc8 <__assert_fail@plt+0x481c>
   15dbc:	ldrb	r1, [r5, #140]	; 0x8c
   15dc0:	orr	r1, r1, #2
   15dc4:	strb	r1, [r5, #140]	; 0x8c
   15dc8:	ldr	r7, [r5, #124]	; 0x7c
   15dcc:	ldr	r3, [r5, #104]	; 0x68
   15dd0:	ldr	r1, [r5, #116]	; 0x74
   15dd4:	add	r2, r7, r2
   15dd8:	bic	r2, r2, r7
   15ddc:	sub	r7, r2, r3
   15de0:	sub	r3, r1, r3
   15de4:	str	r2, [r5, #112]	; 0x70
   15de8:	cmp	r7, r3
   15dec:	strhi	r1, [r5, #112]	; 0x70
   15df0:	str	r0, [r5, #8]
   15df4:	movhi	r2, r1
   15df8:	mov	r0, r4
   15dfc:	str	r2, [r5, #108]	; 0x6c
   15e00:	bl	1130c <ferror@plt>
   15e04:	clz	r0, r0
   15e08:	lsr	r0, r0, #5
   15e0c:	pop	{r4, r5, r6, r7, fp, pc}
   15e10:	push	{r4, r5, r6, r7, fp, lr}
   15e14:	add	fp, sp, #16
   15e18:	ldr	r5, [r0, #20]
   15e1c:	ldr	r6, [r0, #24]
   15e20:	mov	r4, r0
   15e24:	cmp	r6, r5
   15e28:	bne	15e38 <__assert_fail@plt+0x488c>
   15e2c:	ldrb	r0, [r4, #52]	; 0x34
   15e30:	orr	r0, r0, #2
   15e34:	strb	r0, [r4, #52]	; 0x34
   15e38:	ldr	r1, [r4, #36]	; 0x24
   15e3c:	ldr	r2, [r4, #16]
   15e40:	ldr	r0, [r4, #28]
   15e44:	mvn	r7, r5
   15e48:	add	r3, r1, r6
   15e4c:	bic	r1, r3, r1
   15e50:	sub	r3, r1, r2
   15e54:	sub	r2, r0, r2
   15e58:	str	r1, [r4, #24]
   15e5c:	cmp	r3, r2
   15e60:	movhi	r1, r0
   15e64:	strhi	r0, [r4, #24]
   15e68:	str	r1, [r4, #20]
   15e6c:	ldr	r0, [r4, #68]	; 0x44
   15e70:	ldr	r1, [r4, #72]	; 0x48
   15e74:	sub	r1, r1, r0
   15e78:	cmp	r1, #4
   15e7c:	bcs	15e90 <__assert_fail@plt+0x48e4>
   15e80:	add	r0, r4, #56	; 0x38
   15e84:	mov	r1, #4
   15e88:	bl	16ed8 <_obstack_newchunk@@Base>
   15e8c:	ldr	r0, [r4, #68]	; 0x44
   15e90:	str	r5, [r0]
   15e94:	add	r6, r6, r7
   15e98:	ldr	r1, [r4, #68]	; 0x44
   15e9c:	ldr	r0, [r4, #112]	; 0x70
   15ea0:	ldr	r2, [r4, #116]	; 0x74
   15ea4:	add	r1, r1, #4
   15ea8:	str	r1, [r4, #68]	; 0x44
   15eac:	sub	r1, r2, r0
   15eb0:	cmp	r1, #4
   15eb4:	bcs	15ec8 <__assert_fail@plt+0x491c>
   15eb8:	add	r0, r4, #100	; 0x64
   15ebc:	mov	r1, #4
   15ec0:	bl	16ed8 <_obstack_newchunk@@Base>
   15ec4:	ldr	r0, [r4, #112]	; 0x70
   15ec8:	str	r6, [r0]
   15ecc:	ldr	r0, [r4]
   15ed0:	ldr	r1, [r4, #112]	; 0x70
   15ed4:	add	r1, r1, #4
   15ed8:	add	r0, r0, #1
   15edc:	str	r1, [r4, #112]	; 0x70
   15ee0:	str	r0, [r4]
   15ee4:	pop	{r4, r5, r6, r7, fp, pc}
   15ee8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15eec:	add	fp, sp, #24
   15ef0:	movw	r8, #0
   15ef4:	mov	r6, r2
   15ef8:	mov	r4, r1
   15efc:	mov	r5, r0
   15f00:	movt	r8, #32752	; 0x7ff0
   15f04:	mov	r0, r5
   15f08:	mov	r1, r4
   15f0c:	mov	r2, r6
   15f10:	bl	112d0 <read@plt>
   15f14:	mov	r7, r0
   15f18:	cmn	r0, #1
   15f1c:	bgt	15f44 <__assert_fail@plt+0x4998>
   15f20:	bl	114a4 <__errno_location@plt>
   15f24:	ldr	r0, [r0]
   15f28:	cmp	r0, #4
   15f2c:	beq	15f04 <__assert_fail@plt+0x4958>
   15f30:	cmp	r6, r8
   15f34:	bls	15f44 <__assert_fail@plt+0x4998>
   15f38:	cmp	r0, #22
   15f3c:	mov	r6, r8
   15f40:	beq	15f04 <__assert_fail@plt+0x4958>
   15f44:	mov	r0, r7
   15f48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f50:	add	fp, sp, #24
   15f54:	sub	sp, sp, #32
   15f58:	ldr	r6, [fp, #12]
   15f5c:	ldr	r7, [fp, #8]
   15f60:	mov	r4, r2
   15f64:	mov	r8, r0
   15f68:	cmp	r1, #0
   15f6c:	beq	15f94 <__assert_fail@plt+0x49e8>
   15f70:	movw	r2, #33144	; 0x8178
   15f74:	mov	r5, r1
   15f78:	str	r3, [sp, #4]
   15f7c:	str	r4, [sp]
   15f80:	mov	r0, r8
   15f84:	mov	r1, #1
   15f88:	movt	r2, #1
   15f8c:	mov	r3, r5
   15f90:	b	15fac <__assert_fail@plt+0x4a00>
   15f94:	movw	r2, #33156	; 0x8184
   15f98:	str	r3, [sp]
   15f9c:	mov	r0, r8
   15fa0:	mov	r1, #1
   15fa4:	mov	r3, r4
   15fa8:	movt	r2, #1
   15fac:	bl	11504 <__fprintf_chk@plt>
   15fb0:	movw	r1, #33163	; 0x818b
   15fb4:	mov	r0, #0
   15fb8:	mov	r2, #5
   15fbc:	movt	r1, #1
   15fc0:	bl	1133c <dcgettext@plt>
   15fc4:	movw	r2, #33881	; 0x8459
   15fc8:	mov	r3, r0
   15fcc:	movw	r0, #2022	; 0x7e6
   15fd0:	mov	r1, #1
   15fd4:	movt	r2, #1
   15fd8:	str	r0, [sp]
   15fdc:	mov	r0, r8
   15fe0:	bl	11504 <__fprintf_chk@plt>
   15fe4:	movw	r4, #32532	; 0x7f14
   15fe8:	mov	r1, r8
   15fec:	movt	r4, #1
   15ff0:	mov	r0, r4
   15ff4:	bl	112a0 <fputs_unlocked@plt>
   15ff8:	movw	r1, #33167	; 0x818f
   15ffc:	mov	r0, #0
   16000:	mov	r2, #5
   16004:	movt	r1, #1
   16008:	bl	1133c <dcgettext@plt>
   1600c:	movw	r3, #33338	; 0x823a
   16010:	mov	r2, r0
   16014:	mov	r0, r8
   16018:	mov	r1, #1
   1601c:	movt	r3, #1
   16020:	bl	11504 <__fprintf_chk@plt>
   16024:	mov	r0, r4
   16028:	mov	r1, r8
   1602c:	bl	112a0 <fputs_unlocked@plt>
   16030:	cmp	r6, #9
   16034:	bhi	16070 <__assert_fail@plt+0x4ac4>
   16038:	add	r0, pc, #0
   1603c:	ldr	pc, [r0, r6, lsl #2]
   16040:	andeq	r6, r1, r8, rrx
   16044:	andeq	r6, r1, ip, ror r0
   16048:	andeq	r6, r1, ip, lsr #1
   1604c:	ldrdeq	r6, [r1], -r4
   16050:	strdeq	r6, [r1], -ip
   16054:	andeq	r6, r1, r4, lsr #2
   16058:	andeq	r6, r1, ip, asr #2
   1605c:	andeq	r6, r1, r4, lsl #3
   16060:	andeq	r6, r1, r4, lsr #4
   16064:	andeq	r6, r1, ip, asr #3
   16068:	sub	sp, fp, #24
   1606c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16070:	movw	r1, #33691	; 0x839b
   16074:	movt	r1, #1
   16078:	b	161d4 <__assert_fail@plt+0x4c28>
   1607c:	movw	r1, #33372	; 0x825c
   16080:	mov	r0, #0
   16084:	mov	r2, #5
   16088:	movt	r1, #1
   1608c:	bl	1133c <dcgettext@plt>
   16090:	ldr	r3, [r7]
   16094:	mov	r2, r0
   16098:	mov	r0, r8
   1609c:	mov	r1, #1
   160a0:	sub	sp, fp, #24
   160a4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   160a8:	b	11504 <__fprintf_chk@plt>
   160ac:	movw	r1, #33388	; 0x826c
   160b0:	mov	r0, #0
   160b4:	mov	r2, #5
   160b8:	movt	r1, #1
   160bc:	bl	1133c <dcgettext@plt>
   160c0:	mov	r2, r0
   160c4:	ldr	r3, [r7]
   160c8:	ldr	r0, [r7, #4]
   160cc:	str	r0, [sp]
   160d0:	b	161c0 <__assert_fail@plt+0x4c14>
   160d4:	movw	r1, #33411	; 0x8283
   160d8:	mov	r0, #0
   160dc:	mov	r2, #5
   160e0:	movt	r1, #1
   160e4:	bl	1133c <dcgettext@plt>
   160e8:	mov	r2, r0
   160ec:	ldr	r3, [r7]
   160f0:	ldmib	r7, {r0, r1}
   160f4:	stm	sp, {r0, r1}
   160f8:	b	161c0 <__assert_fail@plt+0x4c14>
   160fc:	movw	r1, #33439	; 0x829f
   16100:	mov	r0, #0
   16104:	mov	r2, #5
   16108:	movt	r1, #1
   1610c:	bl	1133c <dcgettext@plt>
   16110:	ldr	r3, [r7]
   16114:	mov	r2, r0
   16118:	ldmib	r7, {r0, r1, r7}
   1611c:	stm	sp, {r0, r1, r7}
   16120:	b	161c0 <__assert_fail@plt+0x4c14>
   16124:	movw	r1, #33471	; 0x82bf
   16128:	mov	r0, #0
   1612c:	mov	r2, #5
   16130:	movt	r1, #1
   16134:	bl	1133c <dcgettext@plt>
   16138:	ldr	r3, [r7]
   1613c:	mov	r2, r0
   16140:	ldmib	r7, {r0, r1, r6, r7}
   16144:	stm	sp, {r0, r1, r6, r7}
   16148:	b	161c0 <__assert_fail@plt+0x4c14>
   1614c:	movw	r1, #33507	; 0x82e3
   16150:	mov	r0, #0
   16154:	mov	r2, #5
   16158:	movt	r1, #1
   1615c:	bl	1133c <dcgettext@plt>
   16160:	mov	r2, r0
   16164:	ldr	r3, [r7]
   16168:	ldmib	r7, {r0, r1, r6}
   1616c:	ldr	r5, [r7, #16]
   16170:	ldr	r7, [r7, #20]
   16174:	stm	sp, {r0, r1, r6}
   16178:	str	r5, [sp, #12]
   1617c:	str	r7, [sp, #16]
   16180:	b	161c0 <__assert_fail@plt+0x4c14>
   16184:	movw	r1, #33547	; 0x830b
   16188:	mov	r0, #0
   1618c:	mov	r2, #5
   16190:	movt	r1, #1
   16194:	bl	1133c <dcgettext@plt>
   16198:	mov	r2, r0
   1619c:	ldr	r3, [r7]
   161a0:	ldmib	r7, {r0, r1, r6}
   161a4:	ldr	r5, [r7, #16]
   161a8:	ldr	r4, [r7, #20]
   161ac:	ldr	r7, [r7, #24]
   161b0:	stm	sp, {r0, r1, r6}
   161b4:	str	r5, [sp, #12]
   161b8:	str	r4, [sp, #16]
   161bc:	str	r7, [sp, #20]
   161c0:	mov	r0, r8
   161c4:	mov	r1, #1
   161c8:	b	16274 <__assert_fail@plt+0x4cc8>
   161cc:	movw	r1, #33639	; 0x8367
   161d0:	movt	r1, #1
   161d4:	mov	r0, #0
   161d8:	mov	r2, #5
   161dc:	bl	1133c <dcgettext@plt>
   161e0:	mov	ip, r0
   161e4:	ldr	r3, [r7]
   161e8:	ldr	r0, [r7, #4]
   161ec:	ldr	r1, [r7, #8]
   161f0:	ldr	r6, [r7, #12]
   161f4:	ldr	r5, [r7, #16]
   161f8:	ldr	r4, [r7, #20]
   161fc:	ldr	r2, [r7, #24]
   16200:	ldr	lr, [r7, #28]
   16204:	ldr	r7, [r7, #32]
   16208:	stm	sp, {r0, r1, r6}
   1620c:	str	r5, [sp, #12]
   16210:	str	r4, [sp, #16]
   16214:	str	r2, [sp, #20]
   16218:	str	lr, [sp, #24]
   1621c:	str	r7, [sp, #28]
   16220:	b	16268 <__assert_fail@plt+0x4cbc>
   16224:	movw	r1, #33591	; 0x8337
   16228:	mov	r0, #0
   1622c:	mov	r2, #5
   16230:	movt	r1, #1
   16234:	bl	1133c <dcgettext@plt>
   16238:	mov	ip, r0
   1623c:	ldr	r3, [r7]
   16240:	ldmib	r7, {r0, r1, r6}
   16244:	ldr	r5, [r7, #16]
   16248:	ldr	r4, [r7, #20]
   1624c:	ldr	r2, [r7, #24]
   16250:	ldr	r7, [r7, #28]
   16254:	stm	sp, {r0, r1, r6}
   16258:	str	r5, [sp, #12]
   1625c:	str	r4, [sp, #16]
   16260:	str	r2, [sp, #20]
   16264:	str	r7, [sp, #24]
   16268:	mov	r0, r8
   1626c:	mov	r1, #1
   16270:	mov	r2, ip
   16274:	bl	11504 <__fprintf_chk@plt>
   16278:	sub	sp, fp, #24
   1627c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16280:	push	{r4, sl, fp, lr}
   16284:	add	fp, sp, #8
   16288:	sub	sp, sp, #8
   1628c:	ldr	ip, [fp, #8]
   16290:	mov	lr, #0
   16294:	ldr	r4, [ip, lr, lsl #2]
   16298:	add	lr, lr, #1
   1629c:	cmp	r4, #0
   162a0:	bne	16294 <__assert_fail@plt+0x4ce8>
   162a4:	sub	r4, lr, #1
   162a8:	str	ip, [sp]
   162ac:	str	r4, [sp, #4]
   162b0:	bl	15f4c <__assert_fail@plt+0x49a0>
   162b4:	sub	sp, fp, #8
   162b8:	pop	{r4, sl, fp, pc}
   162bc:	push	{fp, lr}
   162c0:	mov	fp, sp
   162c4:	sub	sp, sp, #48	; 0x30
   162c8:	ldr	ip, [fp, #8]
   162cc:	ldr	lr, [ip]
   162d0:	cmp	lr, #0
   162d4:	str	lr, [sp, #8]
   162d8:	beq	16374 <__assert_fail@plt+0x4dc8>
   162dc:	ldr	lr, [ip, #4]
   162e0:	cmp	lr, #0
   162e4:	str	lr, [sp, #12]
   162e8:	beq	1637c <__assert_fail@plt+0x4dd0>
   162ec:	ldr	lr, [ip, #8]
   162f0:	cmp	lr, #0
   162f4:	str	lr, [sp, #16]
   162f8:	beq	16384 <__assert_fail@plt+0x4dd8>
   162fc:	ldr	lr, [ip, #12]
   16300:	cmp	lr, #0
   16304:	str	lr, [sp, #20]
   16308:	beq	1638c <__assert_fail@plt+0x4de0>
   1630c:	ldr	lr, [ip, #16]
   16310:	cmp	lr, #0
   16314:	str	lr, [sp, #24]
   16318:	beq	16394 <__assert_fail@plt+0x4de8>
   1631c:	ldr	lr, [ip, #20]
   16320:	cmp	lr, #0
   16324:	str	lr, [sp, #28]
   16328:	beq	1639c <__assert_fail@plt+0x4df0>
   1632c:	ldr	lr, [ip, #24]
   16330:	cmp	lr, #0
   16334:	str	lr, [sp, #32]
   16338:	beq	163a4 <__assert_fail@plt+0x4df8>
   1633c:	ldr	lr, [ip, #28]
   16340:	cmp	lr, #0
   16344:	str	lr, [sp, #36]	; 0x24
   16348:	beq	163ac <__assert_fail@plt+0x4e00>
   1634c:	ldr	lr, [ip, #32]
   16350:	cmp	lr, #0
   16354:	str	lr, [sp, #40]	; 0x28
   16358:	beq	163b4 <__assert_fail@plt+0x4e08>
   1635c:	ldr	lr, [ip, #36]	; 0x24
   16360:	mov	ip, #10
   16364:	cmp	lr, #0
   16368:	str	lr, [sp, #44]	; 0x2c
   1636c:	movweq	ip, #9
   16370:	b	163b8 <__assert_fail@plt+0x4e0c>
   16374:	mov	ip, #0
   16378:	b	163b8 <__assert_fail@plt+0x4e0c>
   1637c:	mov	ip, #1
   16380:	b	163b8 <__assert_fail@plt+0x4e0c>
   16384:	mov	ip, #2
   16388:	b	163b8 <__assert_fail@plt+0x4e0c>
   1638c:	mov	ip, #3
   16390:	b	163b8 <__assert_fail@plt+0x4e0c>
   16394:	mov	ip, #4
   16398:	b	163b8 <__assert_fail@plt+0x4e0c>
   1639c:	mov	ip, #5
   163a0:	b	163b8 <__assert_fail@plt+0x4e0c>
   163a4:	mov	ip, #6
   163a8:	b	163b8 <__assert_fail@plt+0x4e0c>
   163ac:	mov	ip, #7
   163b0:	b	163b8 <__assert_fail@plt+0x4e0c>
   163b4:	mov	ip, #8
   163b8:	add	lr, sp, #8
   163bc:	str	ip, [sp, #4]
   163c0:	str	lr, [sp]
   163c4:	bl	15f4c <__assert_fail@plt+0x49a0>
   163c8:	mov	sp, fp
   163cc:	pop	{fp, pc}
   163d0:	push	{fp, lr}
   163d4:	mov	fp, sp
   163d8:	sub	sp, sp, #56	; 0x38
   163dc:	add	ip, fp, #8
   163e0:	str	ip, [sp, #12]
   163e4:	ldr	lr, [fp, #8]
   163e8:	cmp	lr, #0
   163ec:	str	lr, [sp, #16]
   163f0:	beq	1648c <__assert_fail@plt+0x4ee0>
   163f4:	ldr	lr, [ip, #4]
   163f8:	cmp	lr, #0
   163fc:	str	lr, [sp, #20]
   16400:	beq	16494 <__assert_fail@plt+0x4ee8>
   16404:	ldr	lr, [ip, #8]
   16408:	cmp	lr, #0
   1640c:	str	lr, [sp, #24]
   16410:	beq	1649c <__assert_fail@plt+0x4ef0>
   16414:	ldr	lr, [ip, #12]
   16418:	cmp	lr, #0
   1641c:	str	lr, [sp, #28]
   16420:	beq	164a4 <__assert_fail@plt+0x4ef8>
   16424:	ldr	lr, [ip, #16]
   16428:	cmp	lr, #0
   1642c:	str	lr, [sp, #32]
   16430:	beq	164ac <__assert_fail@plt+0x4f00>
   16434:	ldr	lr, [ip, #20]
   16438:	cmp	lr, #0
   1643c:	str	lr, [sp, #36]	; 0x24
   16440:	beq	164b4 <__assert_fail@plt+0x4f08>
   16444:	ldr	lr, [ip, #24]
   16448:	cmp	lr, #0
   1644c:	str	lr, [sp, #40]	; 0x28
   16450:	beq	164bc <__assert_fail@plt+0x4f10>
   16454:	ldr	lr, [ip, #28]
   16458:	cmp	lr, #0
   1645c:	str	lr, [sp, #44]	; 0x2c
   16460:	beq	164c4 <__assert_fail@plt+0x4f18>
   16464:	ldr	lr, [ip, #32]
   16468:	cmp	lr, #0
   1646c:	str	lr, [sp, #48]	; 0x30
   16470:	beq	164cc <__assert_fail@plt+0x4f20>
   16474:	ldr	lr, [ip, #36]	; 0x24
   16478:	mov	ip, #10
   1647c:	cmp	lr, #0
   16480:	str	lr, [sp, #52]	; 0x34
   16484:	movweq	ip, #9
   16488:	b	164d0 <__assert_fail@plt+0x4f24>
   1648c:	mov	ip, #0
   16490:	b	164d0 <__assert_fail@plt+0x4f24>
   16494:	mov	ip, #1
   16498:	b	164d0 <__assert_fail@plt+0x4f24>
   1649c:	mov	ip, #2
   164a0:	b	164d0 <__assert_fail@plt+0x4f24>
   164a4:	mov	ip, #3
   164a8:	b	164d0 <__assert_fail@plt+0x4f24>
   164ac:	mov	ip, #4
   164b0:	b	164d0 <__assert_fail@plt+0x4f24>
   164b4:	mov	ip, #5
   164b8:	b	164d0 <__assert_fail@plt+0x4f24>
   164bc:	mov	ip, #6
   164c0:	b	164d0 <__assert_fail@plt+0x4f24>
   164c4:	mov	ip, #7
   164c8:	b	164d0 <__assert_fail@plt+0x4f24>
   164cc:	mov	ip, #8
   164d0:	add	lr, sp, #16
   164d4:	str	ip, [sp, #4]
   164d8:	str	lr, [sp]
   164dc:	bl	15f4c <__assert_fail@plt+0x49a0>
   164e0:	mov	sp, fp
   164e4:	pop	{fp, pc}
   164e8:	push	{fp, lr}
   164ec:	mov	fp, sp
   164f0:	movw	r0, #37268	; 0x9194
   164f4:	movt	r0, #2
   164f8:	ldr	r1, [r0]
   164fc:	movw	r0, #32532	; 0x7f14
   16500:	movt	r0, #1
   16504:	bl	112a0 <fputs_unlocked@plt>
   16508:	movw	r1, #33751	; 0x83d7
   1650c:	mov	r0, #0
   16510:	mov	r2, #5
   16514:	movt	r1, #1
   16518:	bl	1133c <dcgettext@plt>
   1651c:	movw	r2, #33771	; 0x83eb
   16520:	mov	r1, r0
   16524:	mov	r0, #1
   16528:	movt	r2, #1
   1652c:	bl	114ec <__printf_chk@plt>
   16530:	movw	r1, #33793	; 0x8401
   16534:	mov	r0, #0
   16538:	mov	r2, #5
   1653c:	movt	r1, #1
   16540:	bl	1133c <dcgettext@plt>
   16544:	movw	r2, #31802	; 0x7c3a
   16548:	movw	r3, #32341	; 0x7e55
   1654c:	mov	r1, r0
   16550:	mov	r0, #1
   16554:	movt	r2, #1
   16558:	movt	r3, #1
   1655c:	bl	114ec <__printf_chk@plt>
   16560:	movw	r1, #33813	; 0x8415
   16564:	mov	r0, #0
   16568:	mov	r2, #5
   1656c:	movt	r1, #1
   16570:	bl	1133c <dcgettext@plt>
   16574:	movw	r2, #33852	; 0x843c
   16578:	mov	r1, r0
   1657c:	mov	r0, #1
   16580:	movt	r2, #1
   16584:	pop	{fp, lr}
   16588:	b	114ec <__printf_chk@plt>
   1658c:	push	{r4, r5, r6, sl, fp, lr}
   16590:	add	fp, sp, #16
   16594:	mov	r4, r2
   16598:	mov	r5, r1
   1659c:	mov	r6, r0
   165a0:	bl	17180 <_obstack_memory_used@@Base+0x78>
   165a4:	cmp	r0, #0
   165a8:	popne	{r4, r5, r6, sl, fp, pc}
   165ac:	cmp	r6, #0
   165b0:	beq	165c4 <__assert_fail@plt+0x5018>
   165b4:	cmp	r5, #0
   165b8:	cmpne	r4, #0
   165bc:	bne	165c4 <__assert_fail@plt+0x5018>
   165c0:	pop	{r4, r5, r6, sl, fp, pc}
   165c4:	bl	16b40 <__assert_fail@plt+0x5594>
   165c8:	push	{r4, r5, r6, sl, fp, lr}
   165cc:	add	fp, sp, #16
   165d0:	mov	r4, r2
   165d4:	mov	r5, r1
   165d8:	mov	r6, r0
   165dc:	bl	17180 <_obstack_memory_used@@Base+0x78>
   165e0:	cmp	r0, #0
   165e4:	popne	{r4, r5, r6, sl, fp, pc}
   165e8:	cmp	r6, #0
   165ec:	beq	16600 <__assert_fail@plt+0x5054>
   165f0:	cmp	r5, #0
   165f4:	cmpne	r4, #0
   165f8:	bne	16600 <__assert_fail@plt+0x5054>
   165fc:	pop	{r4, r5, r6, sl, fp, pc}
   16600:	bl	16b40 <__assert_fail@plt+0x5594>
   16604:	push	{fp, lr}
   16608:	mov	fp, sp
   1660c:	bl	16bd8 <__assert_fail@plt+0x562c>
   16610:	cmp	r0, #0
   16614:	popne	{fp, pc}
   16618:	bl	16b40 <__assert_fail@plt+0x5594>
   1661c:	push	{fp, lr}
   16620:	mov	fp, sp
   16624:	bl	16bd8 <__assert_fail@plt+0x562c>
   16628:	cmp	r0, #0
   1662c:	popne	{fp, pc}
   16630:	bl	16b40 <__assert_fail@plt+0x5594>
   16634:	push	{fp, lr}
   16638:	mov	fp, sp
   1663c:	bl	16bd8 <__assert_fail@plt+0x562c>
   16640:	cmp	r0, #0
   16644:	popne	{fp, pc}
   16648:	bl	16b40 <__assert_fail@plt+0x5594>
   1664c:	push	{r4, r5, fp, lr}
   16650:	add	fp, sp, #8
   16654:	mov	r4, r1
   16658:	mov	r5, r0
   1665c:	bl	16c08 <__assert_fail@plt+0x565c>
   16660:	cmp	r0, #0
   16664:	popne	{r4, r5, fp, pc}
   16668:	cmp	r5, #0
   1666c:	beq	1667c <__assert_fail@plt+0x50d0>
   16670:	cmp	r4, #0
   16674:	bne	1667c <__assert_fail@plt+0x50d0>
   16678:	pop	{r4, r5, fp, pc}
   1667c:	bl	16b40 <__assert_fail@plt+0x5594>
   16680:	push	{fp, lr}
   16684:	mov	fp, sp
   16688:	cmp	r1, #0
   1668c:	orreq	r1, r1, #1
   16690:	bl	16c08 <__assert_fail@plt+0x565c>
   16694:	cmp	r0, #0
   16698:	popne	{fp, pc}
   1669c:	bl	16b40 <__assert_fail@plt+0x5594>
   166a0:	push	{fp, lr}
   166a4:	mov	fp, sp
   166a8:	clz	r3, r2
   166ac:	lsr	ip, r3, #5
   166b0:	clz	r3, r1
   166b4:	lsr	r3, r3, #5
   166b8:	orrs	r3, r3, ip
   166bc:	movwne	r1, #1
   166c0:	movwne	r2, #1
   166c4:	bl	17180 <_obstack_memory_used@@Base+0x78>
   166c8:	cmp	r0, #0
   166cc:	popne	{fp, pc}
   166d0:	bl	16b40 <__assert_fail@plt+0x5594>
   166d4:	push	{fp, lr}
   166d8:	mov	fp, sp
   166dc:	mov	r2, r1
   166e0:	mov	r1, r0
   166e4:	mov	r0, #0
   166e8:	bl	17180 <_obstack_memory_used@@Base+0x78>
   166ec:	cmp	r0, #0
   166f0:	popne	{fp, pc}
   166f4:	bl	16b40 <__assert_fail@plt+0x5594>
   166f8:	push	{fp, lr}
   166fc:	mov	fp, sp
   16700:	mov	r2, r1
   16704:	mov	r1, r0
   16708:	clz	r0, r2
   1670c:	clz	r3, r1
   16710:	lsr	r0, r0, #5
   16714:	lsr	r3, r3, #5
   16718:	orrs	r0, r3, r0
   1671c:	mov	r0, #0
   16720:	movwne	r1, #1
   16724:	movwne	r2, #1
   16728:	bl	17180 <_obstack_memory_used@@Base+0x78>
   1672c:	cmp	r0, #0
   16730:	popne	{fp, pc}
   16734:	bl	16b40 <__assert_fail@plt+0x5594>
   16738:	push	{r4, r5, r6, sl, fp, lr}
   1673c:	add	fp, sp, #16
   16740:	ldr	r5, [r1]
   16744:	mov	r4, r1
   16748:	mov	r6, r0
   1674c:	cmp	r0, #0
   16750:	beq	16768 <__assert_fail@plt+0x51bc>
   16754:	mov	r0, #1
   16758:	add	r0, r0, r5, lsr #1
   1675c:	adds	r5, r5, r0
   16760:	bcc	16770 <__assert_fail@plt+0x51c4>
   16764:	b	167ac <__assert_fail@plt+0x5200>
   16768:	cmp	r5, #0
   1676c:	movweq	r5, #64	; 0x40
   16770:	mov	r0, r6
   16774:	mov	r1, r5
   16778:	mov	r2, #1
   1677c:	bl	17180 <_obstack_memory_used@@Base+0x78>
   16780:	cmp	r5, #0
   16784:	mov	r1, r5
   16788:	movwne	r1, #1
   1678c:	cmp	r0, #0
   16790:	bne	167a4 <__assert_fail@plt+0x51f8>
   16794:	clz	r2, r6
   16798:	lsr	r2, r2, #5
   1679c:	orrs	r1, r2, r1
   167a0:	bne	167ac <__assert_fail@plt+0x5200>
   167a4:	str	r5, [r4]
   167a8:	pop	{r4, r5, r6, sl, fp, pc}
   167ac:	bl	16b40 <__assert_fail@plt+0x5594>
   167b0:	push	{r4, r5, r6, r7, fp, lr}
   167b4:	add	fp, sp, #16
   167b8:	ldr	r5, [r1]
   167bc:	mov	r6, r2
   167c0:	mov	r4, r1
   167c4:	mov	r7, r0
   167c8:	cmp	r0, #0
   167cc:	beq	167e4 <__assert_fail@plt+0x5238>
   167d0:	mov	r0, #1
   167d4:	add	r0, r0, r5, lsr #1
   167d8:	adds	r5, r5, r0
   167dc:	bcc	167fc <__assert_fail@plt+0x5250>
   167e0:	b	16830 <__assert_fail@plt+0x5284>
   167e4:	cmp	r5, #0
   167e8:	bne	167fc <__assert_fail@plt+0x5250>
   167ec:	mov	r0, #64	; 0x40
   167f0:	cmp	r6, #64	; 0x40
   167f4:	udiv	r5, r0, r6
   167f8:	addhi	r5, r5, #1
   167fc:	mov	r0, r7
   16800:	mov	r1, r5
   16804:	mov	r2, r6
   16808:	bl	17180 <_obstack_memory_used@@Base+0x78>
   1680c:	cmp	r0, #0
   16810:	bne	16828 <__assert_fail@plt+0x527c>
   16814:	cmp	r7, #0
   16818:	beq	16830 <__assert_fail@plt+0x5284>
   1681c:	cmp	r6, #0
   16820:	cmpne	r5, #0
   16824:	bne	16830 <__assert_fail@plt+0x5284>
   16828:	str	r5, [r4]
   1682c:	pop	{r4, r5, r6, r7, fp, pc}
   16830:	bl	16b40 <__assert_fail@plt+0x5594>
   16834:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16838:	add	fp, sp, #24
   1683c:	mov	r8, r1
   16840:	ldr	r1, [r1]
   16844:	mov	r5, r0
   16848:	add	r0, r1, r1, asr #1
   1684c:	cmp	r0, r1
   16850:	mvnvs	r0, #-2147483648	; 0x80000000
   16854:	cmp	r0, r3
   16858:	mov	r7, r0
   1685c:	movgt	r7, r3
   16860:	cmn	r3, #1
   16864:	movle	r7, r0
   16868:	ldr	r0, [fp, #8]
   1686c:	cmn	r0, #1
   16870:	ble	16898 <__assert_fail@plt+0x52ec>
   16874:	cmp	r0, #0
   16878:	beq	168ec <__assert_fail@plt+0x5340>
   1687c:	cmn	r7, #1
   16880:	ble	168c0 <__assert_fail@plt+0x5314>
   16884:	mvn	r4, #-2147483648	; 0x80000000
   16888:	udiv	r6, r4, r0
   1688c:	cmp	r6, r7
   16890:	bge	168ec <__assert_fail@plt+0x5340>
   16894:	b	168fc <__assert_fail@plt+0x5350>
   16898:	cmn	r7, #1
   1689c:	ble	168dc <__assert_fail@plt+0x5330>
   168a0:	cmn	r0, #1
   168a4:	beq	168ec <__assert_fail@plt+0x5340>
   168a8:	mov	r6, #-2147483648	; 0x80000000
   168ac:	mvn	r4, #-2147483648	; 0x80000000
   168b0:	sdiv	r6, r6, r0
   168b4:	cmp	r6, r7
   168b8:	bge	168ec <__assert_fail@plt+0x5340>
   168bc:	b	168fc <__assert_fail@plt+0x5350>
   168c0:	beq	168ec <__assert_fail@plt+0x5340>
   168c4:	mov	r6, #-2147483648	; 0x80000000
   168c8:	mvn	r4, #-2147483648	; 0x80000000
   168cc:	sdiv	r6, r6, r7
   168d0:	cmp	r6, r0
   168d4:	bge	168ec <__assert_fail@plt+0x5340>
   168d8:	b	168fc <__assert_fail@plt+0x5350>
   168dc:	mvn	r4, #-2147483648	; 0x80000000
   168e0:	sdiv	r6, r4, r0
   168e4:	cmp	r7, r6
   168e8:	blt	168fc <__assert_fail@plt+0x5350>
   168ec:	mul	r6, r7, r0
   168f0:	mov	r4, #64	; 0x40
   168f4:	cmp	r6, #63	; 0x3f
   168f8:	bgt	16904 <__assert_fail@plt+0x5358>
   168fc:	sdiv	r7, r4, r0
   16900:	mul	r6, r7, r0
   16904:	cmp	r5, #0
   16908:	moveq	r4, #0
   1690c:	streq	r4, [r8]
   16910:	sub	r4, r7, r1
   16914:	cmp	r4, r2
   16918:	bge	169c4 <__assert_fail@plt+0x5418>
   1691c:	add	r7, r1, r2
   16920:	mov	r6, #0
   16924:	mov	r2, #0
   16928:	cmp	r7, r3
   1692c:	movwgt	r6, #1
   16930:	cmn	r3, #1
   16934:	movwgt	r2, #1
   16938:	cmp	r7, r1
   1693c:	bvs	169f8 <__assert_fail@plt+0x544c>
   16940:	ands	r1, r2, r6
   16944:	bne	169f8 <__assert_fail@plt+0x544c>
   16948:	cmn	r0, #1
   1694c:	ble	16974 <__assert_fail@plt+0x53c8>
   16950:	cmp	r0, #0
   16954:	beq	169c0 <__assert_fail@plt+0x5414>
   16958:	cmn	r7, #1
   1695c:	ble	16998 <__assert_fail@plt+0x53ec>
   16960:	mvn	r1, #-2147483648	; 0x80000000
   16964:	udiv	r1, r1, r0
   16968:	cmp	r1, r7
   1696c:	bge	169c0 <__assert_fail@plt+0x5414>
   16970:	b	169f8 <__assert_fail@plt+0x544c>
   16974:	cmn	r7, #1
   16978:	ble	169b0 <__assert_fail@plt+0x5404>
   1697c:	cmn	r0, #1
   16980:	beq	169c0 <__assert_fail@plt+0x5414>
   16984:	mov	r1, #-2147483648	; 0x80000000
   16988:	sdiv	r1, r1, r0
   1698c:	cmp	r1, r7
   16990:	bge	169c0 <__assert_fail@plt+0x5414>
   16994:	b	169f8 <__assert_fail@plt+0x544c>
   16998:	beq	169c0 <__assert_fail@plt+0x5414>
   1699c:	mov	r1, #-2147483648	; 0x80000000
   169a0:	sdiv	r1, r1, r7
   169a4:	cmp	r1, r0
   169a8:	bge	169c0 <__assert_fail@plt+0x5414>
   169ac:	b	169f8 <__assert_fail@plt+0x544c>
   169b0:	mvn	r1, #-2147483648	; 0x80000000
   169b4:	sdiv	r1, r1, r0
   169b8:	cmp	r7, r1
   169bc:	blt	169f8 <__assert_fail@plt+0x544c>
   169c0:	mul	r6, r7, r0
   169c4:	mov	r0, r5
   169c8:	mov	r1, r6
   169cc:	bl	16c08 <__assert_fail@plt+0x565c>
   169d0:	cmp	r6, #0
   169d4:	movwne	r6, #1
   169d8:	cmp	r0, #0
   169dc:	bne	169f0 <__assert_fail@plt+0x5444>
   169e0:	clz	r1, r5
   169e4:	lsr	r1, r1, #5
   169e8:	orrs	r1, r1, r6
   169ec:	bne	169f8 <__assert_fail@plt+0x544c>
   169f0:	str	r7, [r8]
   169f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   169f8:	bl	16b40 <__assert_fail@plt+0x5594>
   169fc:	push	{fp, lr}
   16a00:	mov	fp, sp
   16a04:	mov	r1, #1
   16a08:	bl	16b84 <__assert_fail@plt+0x55d8>
   16a0c:	cmp	r0, #0
   16a10:	popne	{fp, pc}
   16a14:	bl	16b40 <__assert_fail@plt+0x5594>
   16a18:	push	{fp, lr}
   16a1c:	mov	fp, sp
   16a20:	bl	16b84 <__assert_fail@plt+0x55d8>
   16a24:	cmp	r0, #0
   16a28:	popne	{fp, pc}
   16a2c:	bl	16b40 <__assert_fail@plt+0x5594>
   16a30:	push	{fp, lr}
   16a34:	mov	fp, sp
   16a38:	mov	r1, #1
   16a3c:	bl	16b84 <__assert_fail@plt+0x55d8>
   16a40:	cmp	r0, #0
   16a44:	popne	{fp, pc}
   16a48:	bl	16b40 <__assert_fail@plt+0x5594>
   16a4c:	push	{fp, lr}
   16a50:	mov	fp, sp
   16a54:	bl	16b84 <__assert_fail@plt+0x55d8>
   16a58:	cmp	r0, #0
   16a5c:	popne	{fp, pc}
   16a60:	bl	16b40 <__assert_fail@plt+0x5594>
   16a64:	push	{r4, r5, fp, lr}
   16a68:	add	fp, sp, #8
   16a6c:	mov	r5, r0
   16a70:	mov	r0, r1
   16a74:	mov	r4, r1
   16a78:	bl	16bd8 <__assert_fail@plt+0x562c>
   16a7c:	cmp	r0, #0
   16a80:	beq	16a94 <__assert_fail@plt+0x54e8>
   16a84:	mov	r1, r5
   16a88:	mov	r2, r4
   16a8c:	pop	{r4, r5, fp, lr}
   16a90:	b	11324 <memcpy@plt>
   16a94:	bl	16b40 <__assert_fail@plt+0x5594>
   16a98:	push	{r4, r5, fp, lr}
   16a9c:	add	fp, sp, #8
   16aa0:	mov	r5, r0
   16aa4:	mov	r0, r1
   16aa8:	mov	r4, r1
   16aac:	bl	16bd8 <__assert_fail@plt+0x562c>
   16ab0:	cmp	r0, #0
   16ab4:	beq	16ac8 <__assert_fail@plt+0x551c>
   16ab8:	mov	r1, r5
   16abc:	mov	r2, r4
   16ac0:	pop	{r4, r5, fp, lr}
   16ac4:	b	11324 <memcpy@plt>
   16ac8:	bl	16b40 <__assert_fail@plt+0x5594>
   16acc:	push	{r4, r5, fp, lr}
   16ad0:	add	fp, sp, #8
   16ad4:	mov	r5, r0
   16ad8:	add	r0, r1, #1
   16adc:	mov	r4, r1
   16ae0:	bl	16bd8 <__assert_fail@plt+0x562c>
   16ae4:	cmp	r0, #0
   16ae8:	beq	16b04 <__assert_fail@plt+0x5558>
   16aec:	mov	r1, #0
   16af0:	mov	r2, r4
   16af4:	strb	r1, [r0, r4]
   16af8:	mov	r1, r5
   16afc:	pop	{r4, r5, fp, lr}
   16b00:	b	11324 <memcpy@plt>
   16b04:	bl	16b40 <__assert_fail@plt+0x5594>
   16b08:	push	{r4, r5, fp, lr}
   16b0c:	add	fp, sp, #8
   16b10:	mov	r4, r0
   16b14:	bl	11480 <strlen@plt>
   16b18:	add	r5, r0, #1
   16b1c:	mov	r0, r5
   16b20:	bl	16bd8 <__assert_fail@plt+0x562c>
   16b24:	cmp	r0, #0
   16b28:	beq	16b3c <__assert_fail@plt+0x5590>
   16b2c:	mov	r1, r4
   16b30:	mov	r2, r5
   16b34:	pop	{r4, r5, fp, lr}
   16b38:	b	11324 <memcpy@plt>
   16b3c:	bl	16b40 <__assert_fail@plt+0x5594>
   16b40:	push	{fp, lr}
   16b44:	mov	fp, sp
   16b48:	movw	r0, #37164	; 0x912c
   16b4c:	movw	r1, #33928	; 0x8488
   16b50:	mov	r2, #5
   16b54:	movt	r0, #2
   16b58:	movt	r1, #1
   16b5c:	ldr	r4, [r0]
   16b60:	mov	r0, #0
   16b64:	bl	1133c <dcgettext@plt>
   16b68:	movw	r2, #32860	; 0x805c
   16b6c:	mov	r3, r0
   16b70:	mov	r0, r4
   16b74:	mov	r1, #0
   16b78:	movt	r2, #1
   16b7c:	bl	113d8 <error@plt>
   16b80:	bl	11594 <abort@plt>
   16b84:	clz	r2, r1
   16b88:	clz	r3, r0
   16b8c:	lsr	r2, r2, #5
   16b90:	lsr	r3, r3, #5
   16b94:	orrs	r2, r3, r2
   16b98:	movwne	r1, #1
   16b9c:	movwne	r0, #1
   16ba0:	cmp	r1, #0
   16ba4:	beq	16bd4 <__assert_fail@plt+0x5628>
   16ba8:	mvn	r2, #-2147483648	; 0x80000000
   16bac:	udiv	r2, r2, r1
   16bb0:	cmp	r2, r0
   16bb4:	bcs	16bd4 <__assert_fail@plt+0x5628>
   16bb8:	push	{fp, lr}
   16bbc:	mov	fp, sp
   16bc0:	bl	114a4 <__errno_location@plt>
   16bc4:	mov	r1, #12
   16bc8:	str	r1, [r0]
   16bcc:	mov	r0, #0
   16bd0:	pop	{fp, pc}
   16bd4:	b	11294 <calloc@plt>
   16bd8:	cmp	r0, #0
   16bdc:	movweq	r0, #1
   16be0:	cmn	r0, #1
   16be4:	ble	16bec <__assert_fail@plt+0x5640>
   16be8:	b	11408 <malloc@plt>
   16bec:	push	{fp, lr}
   16bf0:	mov	fp, sp
   16bf4:	bl	114a4 <__errno_location@plt>
   16bf8:	mov	r1, #12
   16bfc:	str	r1, [r0]
   16c00:	mov	r0, #0
   16c04:	pop	{fp, pc}
   16c08:	push	{fp, lr}
   16c0c:	mov	fp, sp
   16c10:	cmp	r0, #0
   16c14:	beq	16c30 <__assert_fail@plt+0x5684>
   16c18:	cmp	r1, #0
   16c1c:	beq	16c3c <__assert_fail@plt+0x5690>
   16c20:	cmn	r1, #1
   16c24:	ble	16c48 <__assert_fail@plt+0x569c>
   16c28:	pop	{fp, lr}
   16c2c:	b	11354 <realloc@plt>
   16c30:	mov	r0, r1
   16c34:	pop	{fp, lr}
   16c38:	b	16bd8 <__assert_fail@plt+0x562c>
   16c3c:	bl	13a5c <__assert_fail@plt+0x24b0>
   16c40:	mov	r0, #0
   16c44:	pop	{fp, pc}
   16c48:	bl	114a4 <__errno_location@plt>
   16c4c:	mov	r1, #12
   16c50:	str	r1, [r0]
   16c54:	mov	r0, #0
   16c58:	pop	{fp, pc}
   16c5c:	push	{r4, r5, r6, sl, fp, lr}
   16c60:	add	fp, sp, #16
   16c64:	mov	r4, r0
   16c68:	bl	113c0 <__fpending@plt>
   16c6c:	ldr	r6, [r4]
   16c70:	mov	r5, r0
   16c74:	mov	r0, r4
   16c78:	bl	13964 <__assert_fail@plt+0x23b8>
   16c7c:	tst	r6, #32
   16c80:	bne	16cb8 <__assert_fail@plt+0x570c>
   16c84:	cmp	r0, #0
   16c88:	mov	r4, r0
   16c8c:	mvnne	r4, #0
   16c90:	cmp	r5, #0
   16c94:	bne	16cc4 <__assert_fail@plt+0x5718>
   16c98:	cmp	r0, #0
   16c9c:	beq	16cc4 <__assert_fail@plt+0x5718>
   16ca0:	bl	114a4 <__errno_location@plt>
   16ca4:	ldr	r0, [r0]
   16ca8:	subs	r4, r0, #9
   16cac:	mvnne	r4, #0
   16cb0:	mov	r0, r4
   16cb4:	pop	{r4, r5, r6, sl, fp, pc}
   16cb8:	mvn	r4, #0
   16cbc:	cmp	r0, #0
   16cc0:	beq	16ccc <__assert_fail@plt+0x5720>
   16cc4:	mov	r0, r4
   16cc8:	pop	{r4, r5, r6, sl, fp, pc}
   16ccc:	bl	114a4 <__errno_location@plt>
   16cd0:	mov	r1, #0
   16cd4:	str	r1, [r0]
   16cd8:	mov	r0, r4
   16cdc:	pop	{r4, r5, r6, sl, fp, pc}
   16ce0:	push	{r4, sl, fp, lr}
   16ce4:	add	fp, sp, #8
   16ce8:	sub	sp, sp, #264	; 0x108
   16cec:	add	r1, sp, #7
   16cf0:	movw	r2, #257	; 0x101
   16cf4:	bl	171bc <_obstack_memory_used@@Base+0xb4>
   16cf8:	mov	r4, #0
   16cfc:	cmp	r0, #0
   16d00:	bne	16d40 <__assert_fail@plt+0x5794>
   16d04:	movw	r1, #33945	; 0x8499
   16d08:	add	r0, sp, #7
   16d0c:	mov	r2, #2
   16d10:	movt	r1, #1
   16d14:	bl	11474 <bcmp@plt>
   16d18:	cmp	r0, #0
   16d1c:	beq	16d40 <__assert_fail@plt+0x5794>
   16d20:	movw	r1, #33947	; 0x849b
   16d24:	add	r0, sp, #7
   16d28:	mov	r2, #6
   16d2c:	movt	r1, #1
   16d30:	bl	11474 <bcmp@plt>
   16d34:	cmp	r0, #0
   16d38:	mov	r4, r0
   16d3c:	movwne	r4, #1
   16d40:	mov	r0, r4
   16d44:	sub	sp, fp, #8
   16d48:	pop	{r4, sl, fp, pc}
   16d4c:	push	{fp, lr}
   16d50:	mov	fp, sp
   16d54:	mov	r0, #14
   16d58:	bl	1154c <nl_langinfo@plt>
   16d5c:	movw	r1, #32533	; 0x7f15
   16d60:	cmp	r0, #0
   16d64:	movt	r1, #1
   16d68:	movne	r1, r0
   16d6c:	movw	r0, #33953	; 0x84a1
   16d70:	ldrb	r2, [r1]
   16d74:	movt	r0, #1
   16d78:	cmp	r2, #0
   16d7c:	movne	r0, r1
   16d80:	pop	{fp, pc}

00016d84 <_obstack_begin@@Base>:
   16d84:	push	{r4, r5, r6, sl, fp, lr}
   16d88:	add	fp, sp, #16
   16d8c:	cmp	r1, #0
   16d90:	mov	r4, r0
   16d94:	str	r3, [r0, #28]
   16d98:	mov	r5, r2
   16d9c:	movweq	r1, #4072	; 0xfe8
   16da0:	cmp	r2, #0
   16da4:	str	r1, [r0]
   16da8:	ldr	r0, [fp, #8]
   16dac:	movweq	r5, #8
   16db0:	sub	r6, r5, #1
   16db4:	str	r0, [r4, #32]
   16db8:	str	r6, [r4, #24]
   16dbc:	ldrb	r0, [r4, #40]	; 0x28
   16dc0:	and	r0, r0, #254	; 0xfe
   16dc4:	strb	r0, [r4, #40]	; 0x28
   16dc8:	mov	r0, r1
   16dcc:	blx	r3
   16dd0:	cmp	r0, #0
   16dd4:	str	r0, [r4, #4]
   16dd8:	addne	r1, r0, r6
   16ddc:	rsbne	r2, r5, #0
   16de0:	addne	r1, r1, #8
   16de4:	andne	r1, r1, r2
   16de8:	strne	r1, [r4, #12]
   16dec:	strne	r1, [r4, #8]
   16df0:	ldrne	r1, [r4]
   16df4:	addne	r1, r0, r1
   16df8:	strne	r1, [r0]
   16dfc:	strne	r1, [r4, #16]
   16e00:	movne	r1, #0
   16e04:	strne	r1, [r0, #4]
   16e08:	ldrbne	r0, [r4, #40]	; 0x28
   16e0c:	andne	r0, r0, #249	; 0xf9
   16e10:	strbne	r0, [r4, #40]	; 0x28
   16e14:	movne	r0, #1
   16e18:	popne	{r4, r5, r6, sl, fp, pc}
   16e1c:	movw	r0, #37232	; 0x9170
   16e20:	movt	r0, #2
   16e24:	ldr	r0, [r0]
   16e28:	blx	r0

00016e2c <_obstack_begin_1@@Base>:
   16e2c:	push	{r4, r5, r6, sl, fp, lr}
   16e30:	add	fp, sp, #16
   16e34:	cmp	r1, #0
   16e38:	mov	r5, r2
   16e3c:	mov	r4, r0
   16e40:	str	r3, [r0, #28]
   16e44:	ldr	r2, [fp, #8]
   16e48:	movweq	r1, #4072	; 0xfe8
   16e4c:	cmp	r5, #0
   16e50:	str	r1, [r0]
   16e54:	ldr	r0, [fp, #12]
   16e58:	movweq	r5, #8
   16e5c:	sub	r6, r5, #1
   16e60:	str	r0, [r4, #36]	; 0x24
   16e64:	str	r2, [r4, #32]
   16e68:	str	r6, [r4, #24]
   16e6c:	ldrb	r2, [r4, #40]	; 0x28
   16e70:	orr	r2, r2, #1
   16e74:	strb	r2, [r4, #40]	; 0x28
   16e78:	blx	r3
   16e7c:	cmp	r0, #0
   16e80:	str	r0, [r4, #4]
   16e84:	addne	r1, r0, r6
   16e88:	rsbne	r2, r5, #0
   16e8c:	addne	r1, r1, #8
   16e90:	andne	r1, r1, r2
   16e94:	strne	r1, [r4, #12]
   16e98:	strne	r1, [r4, #8]
   16e9c:	ldrne	r1, [r4]
   16ea0:	addne	r1, r0, r1
   16ea4:	strne	r1, [r0]
   16ea8:	strne	r1, [r4, #16]
   16eac:	movne	r1, #0
   16eb0:	strne	r1, [r0, #4]
   16eb4:	ldrbne	r0, [r4, #40]	; 0x28
   16eb8:	andne	r0, r0, #249	; 0xf9
   16ebc:	strbne	r0, [r4, #40]	; 0x28
   16ec0:	movne	r0, #1
   16ec4:	popne	{r4, r5, r6, sl, fp, pc}
   16ec8:	movw	r0, #37232	; 0x9170
   16ecc:	movt	r0, #2
   16ed0:	ldr	r0, [r0]
   16ed4:	blx	r0

00016ed8 <_obstack_newchunk@@Base>:
   16ed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16edc:	add	fp, sp, #28
   16ee0:	sub	sp, sp, #4
   16ee4:	mov	r4, r0
   16ee8:	ldr	r2, [r0]
   16eec:	ldr	r0, [r0, #8]
   16ef0:	ldr	r3, [r4, #12]
   16ef4:	sub	r9, r3, r0
   16ef8:	ldr	r0, [r4, #24]
   16efc:	mov	r3, #0
   16f00:	add	r1, r9, r1
   16f04:	adds	r6, r1, r0
   16f08:	adc	r0, r3, #0
   16f0c:	mov	r3, #100	; 0x64
   16f10:	add	r3, r3, r9, lsr #3
   16f14:	adds	r7, r3, r6
   16f18:	movcs	r7, r6
   16f1c:	cmp	r7, r2
   16f20:	movcc	r7, r2
   16f24:	cmp	r1, r9
   16f28:	bcc	17020 <_obstack_newchunk@@Base+0x148>
   16f2c:	cmp	r0, #0
   16f30:	bne	17020 <_obstack_newchunk@@Base+0x148>
   16f34:	ldrb	r0, [r4, #40]	; 0x28
   16f38:	ldr	r8, [r4, #4]
   16f3c:	tst	r0, #1
   16f40:	bne	16f54 <_obstack_newchunk@@Base+0x7c>
   16f44:	ldr	r1, [r4, #28]
   16f48:	mov	r0, r7
   16f4c:	blx	r1
   16f50:	b	16f64 <_obstack_newchunk@@Base+0x8c>
   16f54:	ldr	r2, [r4, #28]
   16f58:	ldr	r0, [r4, #36]	; 0x24
   16f5c:	mov	r1, r7
   16f60:	blx	r2
   16f64:	mov	r6, r0
   16f68:	cmp	r0, #0
   16f6c:	beq	17020 <_obstack_newchunk@@Base+0x148>
   16f70:	add	r0, r6, r7
   16f74:	str	r6, [r4, #4]
   16f78:	str	r8, [r6, #4]
   16f7c:	mov	r2, r9
   16f80:	str	r0, [r4, #16]
   16f84:	str	r0, [r6]
   16f88:	ldr	r5, [r4, #24]
   16f8c:	ldr	sl, [r4, #8]
   16f90:	add	r0, r6, r5
   16f94:	mov	r1, sl
   16f98:	add	r0, r0, #8
   16f9c:	bic	r7, r0, r5
   16fa0:	mov	r0, r7
   16fa4:	bl	11324 <memcpy@plt>
   16fa8:	ldrb	r0, [r4, #40]	; 0x28
   16fac:	tst	r0, #2
   16fb0:	bne	17000 <_obstack_newchunk@@Base+0x128>
   16fb4:	add	r1, r8, r5
   16fb8:	mvn	r0, r5
   16fbc:	add	r1, r1, #8
   16fc0:	and	r0, r1, r0
   16fc4:	cmp	sl, r0
   16fc8:	bne	17000 <_obstack_newchunk@@Base+0x128>
   16fcc:	ldr	r0, [r8, #4]
   16fd0:	str	r0, [r6, #4]
   16fd4:	ldrb	r0, [r4, #40]	; 0x28
   16fd8:	tst	r0, #1
   16fdc:	bne	16ff0 <_obstack_newchunk@@Base+0x118>
   16fe0:	ldr	r1, [r4, #32]
   16fe4:	mov	r0, r8
   16fe8:	blx	r1
   16fec:	b	17000 <_obstack_newchunk@@Base+0x128>
   16ff0:	ldr	r2, [r4, #32]
   16ff4:	ldr	r0, [r4, #36]	; 0x24
   16ff8:	mov	r1, r8
   16ffc:	blx	r2
   17000:	add	r0, r7, r9
   17004:	str	r7, [r4, #8]
   17008:	str	r0, [r4, #12]
   1700c:	ldrb	r0, [r4, #40]	; 0x28
   17010:	and	r0, r0, #253	; 0xfd
   17014:	strb	r0, [r4, #40]	; 0x28
   17018:	sub	sp, fp, #28
   1701c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17020:	movw	r0, #37232	; 0x9170
   17024:	movt	r0, #2
   17028:	ldr	r0, [r0]
   1702c:	blx	r0

00017030 <_obstack_allocated_p@@Base>:
   17030:	ldr	r2, [r0, #4]
   17034:	mov	r0, #0
   17038:	b	17040 <_obstack_allocated_p@@Base+0x10>
   1703c:	ldr	r2, [r2, #4]
   17040:	cmp	r2, #0
   17044:	bxeq	lr
   17048:	cmp	r2, r1
   1704c:	bcs	1703c <_obstack_allocated_p@@Base+0xc>
   17050:	ldr	r3, [r2]
   17054:	cmp	r3, r1
   17058:	bcc	1703c <_obstack_allocated_p@@Base+0xc>
   1705c:	mov	r0, #1
   17060:	bx	lr

00017064 <_obstack_free@@Base>:
   17064:	push	{r4, r5, r6, sl, fp, lr}
   17068:	add	fp, sp, #16
   1706c:	mov	r5, r1
   17070:	ldr	r1, [r0, #4]
   17074:	cmp	r1, #0
   17078:	beq	170e4 <_obstack_free@@Base+0x80>
   1707c:	mov	r4, r0
   17080:	cmp	r1, r5
   17084:	bcs	170c4 <_obstack_free@@Base+0x60>
   17088:	b	170b8 <_obstack_free@@Base+0x54>
   1708c:	ldr	r2, [r4, #32]
   17090:	mov	r0, r1
   17094:	blx	r2
   17098:	ldrb	r0, [r4, #40]	; 0x28
   1709c:	cmp	r6, #0
   170a0:	mov	r1, r6
   170a4:	orr	r0, r0, #2
   170a8:	strb	r0, [r4, #40]	; 0x28
   170ac:	beq	170e4 <_obstack_free@@Base+0x80>
   170b0:	cmp	r1, r5
   170b4:	bcs	170c4 <_obstack_free@@Base+0x60>
   170b8:	ldr	r0, [r1]
   170bc:	cmp	r0, r5
   170c0:	bcs	170f0 <_obstack_free@@Base+0x8c>
   170c4:	ldrb	r0, [r4, #40]	; 0x28
   170c8:	ldr	r6, [r1, #4]
   170cc:	tst	r0, #1
   170d0:	beq	1708c <_obstack_free@@Base+0x28>
   170d4:	ldr	r2, [r4, #32]
   170d8:	ldr	r0, [r4, #36]	; 0x24
   170dc:	blx	r2
   170e0:	b	17098 <_obstack_free@@Base+0x34>
   170e4:	cmp	r5, #0
   170e8:	popeq	{r4, r5, r6, sl, fp, pc}
   170ec:	bl	11594 <abort@plt>
   170f0:	str	r5, [r4, #8]
   170f4:	str	r5, [r4, #12]
   170f8:	ldr	r0, [r1]
   170fc:	str	r1, [r4, #4]
   17100:	str	r0, [r4, #16]
   17104:	pop	{r4, r5, r6, sl, fp, pc}

00017108 <_obstack_memory_used@@Base>:
   17108:	ldr	r1, [r0, #4]
   1710c:	mov	r0, #0
   17110:	b	17124 <_obstack_memory_used@@Base+0x1c>
   17114:	ldr	r2, [r1]
   17118:	sub	r0, r0, r1
   1711c:	ldr	r1, [r1, #4]
   17120:	add	r0, r0, r2
   17124:	cmp	r1, #0
   17128:	bxeq	lr
   1712c:	b	17114 <_obstack_memory_used@@Base+0xc>
   17130:	push	{fp, lr}
   17134:	mov	fp, sp
   17138:	movw	r0, #37256	; 0x9188
   1713c:	movw	r1, #33928	; 0x8488
   17140:	mov	r2, #5
   17144:	movt	r0, #2
   17148:	movt	r1, #1
   1714c:	ldr	r4, [r0]
   17150:	mov	r0, #0
   17154:	bl	1133c <dcgettext@plt>
   17158:	movw	r2, #33152	; 0x8180
   1715c:	mov	r3, r0
   17160:	mov	r0, r4
   17164:	mov	r1, #1
   17168:	movt	r2, #1
   1716c:	bl	11504 <__fprintf_chk@plt>
   17170:	movw	r0, #37164	; 0x912c
   17174:	movt	r0, #2
   17178:	ldr	r0, [r0]
   1717c:	bl	11450 <exit@plt>
   17180:	cmp	r2, #0
   17184:	beq	171b4 <_obstack_memory_used@@Base+0xac>
   17188:	mvn	r3, #0
   1718c:	udiv	r3, r3, r2
   17190:	cmp	r3, r1
   17194:	bcs	171b4 <_obstack_memory_used@@Base+0xac>
   17198:	push	{fp, lr}
   1719c:	mov	fp, sp
   171a0:	bl	114a4 <__errno_location@plt>
   171a4:	mov	r1, #12
   171a8:	str	r1, [r0]
   171ac:	mov	r0, #0
   171b0:	pop	{fp, pc}
   171b4:	mul	r1, r2, r1
   171b8:	b	16c08 <__assert_fail@plt+0x565c>
   171bc:	push	{r4, r5, r6, r7, fp, lr}
   171c0:	add	fp, sp, #16
   171c4:	mov	r4, r1
   171c8:	mov	r1, #0
   171cc:	mov	r6, r2
   171d0:	bl	11534 <setlocale@plt>
   171d4:	cmp	r0, #0
   171d8:	beq	17208 <_obstack_memory_used@@Base+0x100>
   171dc:	mov	r7, r0
   171e0:	bl	11480 <strlen@plt>
   171e4:	cmp	r0, r6
   171e8:	bcs	17224 <_obstack_memory_used@@Base+0x11c>
   171ec:	add	r2, r0, #1
   171f0:	mov	r0, r4
   171f4:	mov	r1, r7
   171f8:	bl	11324 <memcpy@plt>
   171fc:	mov	r5, #0
   17200:	mov	r0, r5
   17204:	pop	{r4, r5, r6, r7, fp, pc}
   17208:	mov	r5, #22
   1720c:	cmp	r6, #0
   17210:	beq	1724c <_obstack_memory_used@@Base+0x144>
   17214:	mov	r0, #0
   17218:	strb	r0, [r4]
   1721c:	mov	r0, r5
   17220:	pop	{r4, r5, r6, r7, fp, pc}
   17224:	mov	r5, #34	; 0x22
   17228:	cmp	r6, #0
   1722c:	beq	1724c <_obstack_memory_used@@Base+0x144>
   17230:	sub	r6, r6, #1
   17234:	mov	r0, r4
   17238:	mov	r1, r7
   1723c:	mov	r2, r6
   17240:	bl	11324 <memcpy@plt>
   17244:	mov	r0, #0
   17248:	strb	r0, [r4, r6]
   1724c:	mov	r0, r5
   17250:	pop	{r4, r5, r6, r7, fp, pc}
   17254:	mov	r1, #0
   17258:	b	11534 <setlocale@plt>
   1725c:	eor	r1, r1, #-2147483648	; 0x80000000
   17260:	b	17268 <_obstack_memory_used@@Base+0x160>
   17264:	eor	r3, r3, #-2147483648	; 0x80000000
   17268:	push	{r4, r5, lr}
   1726c:	lsl	r4, r1, #1
   17270:	lsl	r5, r3, #1
   17274:	teq	r4, r5
   17278:	teqeq	r0, r2
   1727c:	orrsne	ip, r4, r0
   17280:	orrsne	ip, r5, r2
   17284:	mvnsne	ip, r4, asr #21
   17288:	mvnsne	ip, r5, asr #21
   1728c:	beq	17478 <_obstack_memory_used@@Base+0x370>
   17290:	lsr	r4, r4, #21
   17294:	rsbs	r5, r4, r5, lsr #21
   17298:	rsblt	r5, r5, #0
   1729c:	ble	172bc <_obstack_memory_used@@Base+0x1b4>
   172a0:	add	r4, r4, r5
   172a4:	eor	r2, r0, r2
   172a8:	eor	r3, r1, r3
   172ac:	eor	r0, r2, r0
   172b0:	eor	r1, r3, r1
   172b4:	eor	r2, r0, r2
   172b8:	eor	r3, r1, r3
   172bc:	cmp	r5, #54	; 0x36
   172c0:	pophi	{r4, r5, pc}
   172c4:	tst	r1, #-2147483648	; 0x80000000
   172c8:	lsl	r1, r1, #12
   172cc:	mov	ip, #1048576	; 0x100000
   172d0:	orr	r1, ip, r1, lsr #12
   172d4:	beq	172e0 <_obstack_memory_used@@Base+0x1d8>
   172d8:	rsbs	r0, r0, #0
   172dc:	rsc	r1, r1, #0
   172e0:	tst	r3, #-2147483648	; 0x80000000
   172e4:	lsl	r3, r3, #12
   172e8:	orr	r3, ip, r3, lsr #12
   172ec:	beq	172f8 <_obstack_memory_used@@Base+0x1f0>
   172f0:	rsbs	r2, r2, #0
   172f4:	rsc	r3, r3, #0
   172f8:	teq	r4, r5
   172fc:	beq	17460 <_obstack_memory_used@@Base+0x358>
   17300:	sub	r4, r4, #1
   17304:	rsbs	lr, r5, #32
   17308:	blt	17324 <_obstack_memory_used@@Base+0x21c>
   1730c:	lsl	ip, r2, lr
   17310:	adds	r0, r0, r2, lsr r5
   17314:	adc	r1, r1, #0
   17318:	adds	r0, r0, r3, lsl lr
   1731c:	adcs	r1, r1, r3, asr r5
   17320:	b	17340 <_obstack_memory_used@@Base+0x238>
   17324:	sub	r5, r5, #32
   17328:	add	lr, lr, #32
   1732c:	cmp	r2, #1
   17330:	lsl	ip, r3, lr
   17334:	orrcs	ip, ip, #2
   17338:	adds	r0, r0, r3, asr r5
   1733c:	adcs	r1, r1, r3, asr #31
   17340:	and	r5, r1, #-2147483648	; 0x80000000
   17344:	bpl	17354 <_obstack_memory_used@@Base+0x24c>
   17348:	rsbs	ip, ip, #0
   1734c:	rscs	r0, r0, #0
   17350:	rsc	r1, r1, #0
   17354:	cmp	r1, #1048576	; 0x100000
   17358:	bcc	17398 <_obstack_memory_used@@Base+0x290>
   1735c:	cmp	r1, #2097152	; 0x200000
   17360:	bcc	17380 <_obstack_memory_used@@Base+0x278>
   17364:	lsrs	r1, r1, #1
   17368:	rrxs	r0, r0
   1736c:	rrx	ip, ip
   17370:	add	r4, r4, #1
   17374:	lsl	r2, r4, #21
   17378:	cmn	r2, #4194304	; 0x400000
   1737c:	bcs	174d8 <_obstack_memory_used@@Base+0x3d0>
   17380:	cmp	ip, #-2147483648	; 0x80000000
   17384:	lsrseq	ip, r0, #1
   17388:	adcs	r0, r0, #0
   1738c:	adc	r1, r1, r4, lsl #20
   17390:	orr	r1, r1, r5
   17394:	pop	{r4, r5, pc}
   17398:	lsls	ip, ip, #1
   1739c:	adcs	r0, r0, r0
   173a0:	adc	r1, r1, r1
   173a4:	tst	r1, #1048576	; 0x100000
   173a8:	sub	r4, r4, #1
   173ac:	bne	17380 <_obstack_memory_used@@Base+0x278>
   173b0:	teq	r1, #0
   173b4:	moveq	r1, r0
   173b8:	moveq	r0, #0
   173bc:	clz	r3, r1
   173c0:	addeq	r3, r3, #32
   173c4:	sub	r3, r3, #11
   173c8:	subs	r2, r3, #32
   173cc:	bge	173f0 <_obstack_memory_used@@Base+0x2e8>
   173d0:	adds	r2, r2, #12
   173d4:	ble	173ec <_obstack_memory_used@@Base+0x2e4>
   173d8:	add	ip, r2, #20
   173dc:	rsb	r2, r2, #12
   173e0:	lsl	r0, r1, ip
   173e4:	lsr	r1, r1, r2
   173e8:	b	17400 <_obstack_memory_used@@Base+0x2f8>
   173ec:	add	r2, r2, #20
   173f0:	rsble	ip, r2, #32
   173f4:	lsl	r1, r1, r2
   173f8:	orrle	r1, r1, r0, lsr ip
   173fc:	lslle	r0, r0, r2
   17400:	subs	r4, r4, r3
   17404:	addge	r1, r1, r4, lsl #20
   17408:	orrge	r1, r1, r5
   1740c:	popge	{r4, r5, pc}
   17410:	mvn	r4, r4
   17414:	subs	r4, r4, #31
   17418:	bge	17454 <_obstack_memory_used@@Base+0x34c>
   1741c:	adds	r4, r4, #12
   17420:	bgt	1743c <_obstack_memory_used@@Base+0x334>
   17424:	add	r4, r4, #20
   17428:	rsb	r2, r4, #32
   1742c:	lsr	r0, r0, r4
   17430:	orr	r0, r0, r1, lsl r2
   17434:	orr	r1, r5, r1, lsr r4
   17438:	pop	{r4, r5, pc}
   1743c:	rsb	r4, r4, #12
   17440:	rsb	r2, r4, #32
   17444:	lsr	r0, r0, r2
   17448:	orr	r0, r0, r1, lsl r4
   1744c:	mov	r1, r5
   17450:	pop	{r4, r5, pc}
   17454:	lsr	r0, r1, r4
   17458:	mov	r1, r5
   1745c:	pop	{r4, r5, pc}
   17460:	teq	r4, #0
   17464:	eor	r3, r3, #1048576	; 0x100000
   17468:	eoreq	r1, r1, #1048576	; 0x100000
   1746c:	addeq	r4, r4, #1
   17470:	subne	r5, r5, #1
   17474:	b	17300 <_obstack_memory_used@@Base+0x1f8>
   17478:	mvns	ip, r4, asr #21
   1747c:	mvnsne	ip, r5, asr #21
   17480:	beq	174e8 <_obstack_memory_used@@Base+0x3e0>
   17484:	teq	r4, r5
   17488:	teqeq	r0, r2
   1748c:	beq	174a0 <_obstack_memory_used@@Base+0x398>
   17490:	orrs	ip, r4, r0
   17494:	moveq	r1, r3
   17498:	moveq	r0, r2
   1749c:	pop	{r4, r5, pc}
   174a0:	teq	r1, r3
   174a4:	movne	r1, #0
   174a8:	movne	r0, #0
   174ac:	popne	{r4, r5, pc}
   174b0:	lsrs	ip, r4, #21
   174b4:	bne	174c8 <_obstack_memory_used@@Base+0x3c0>
   174b8:	lsls	r0, r0, #1
   174bc:	adcs	r1, r1, r1
   174c0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   174c4:	pop	{r4, r5, pc}
   174c8:	adds	r4, r4, #4194304	; 0x400000
   174cc:	addcc	r1, r1, #1048576	; 0x100000
   174d0:	popcc	{r4, r5, pc}
   174d4:	and	r5, r1, #-2147483648	; 0x80000000
   174d8:	orr	r1, r5, #2130706432	; 0x7f000000
   174dc:	orr	r1, r1, #15728640	; 0xf00000
   174e0:	mov	r0, #0
   174e4:	pop	{r4, r5, pc}
   174e8:	mvns	ip, r4, asr #21
   174ec:	movne	r1, r3
   174f0:	movne	r0, r2
   174f4:	mvnseq	ip, r5, asr #21
   174f8:	movne	r3, r1
   174fc:	movne	r2, r0
   17500:	orrs	r4, r0, r1, lsl #12
   17504:	orrseq	r5, r2, r3, lsl #12
   17508:	teqeq	r1, r3
   1750c:	orrne	r1, r1, #524288	; 0x80000
   17510:	pop	{r4, r5, pc}
   17514:	teq	r0, #0
   17518:	moveq	r1, #0
   1751c:	bxeq	lr
   17520:	push	{r4, r5, lr}
   17524:	mov	r4, #1024	; 0x400
   17528:	add	r4, r4, #50	; 0x32
   1752c:	mov	r5, #0
   17530:	mov	r1, #0
   17534:	b	173b0 <_obstack_memory_used@@Base+0x2a8>
   17538:	teq	r0, #0
   1753c:	moveq	r1, #0
   17540:	bxeq	lr
   17544:	push	{r4, r5, lr}
   17548:	mov	r4, #1024	; 0x400
   1754c:	add	r4, r4, #50	; 0x32
   17550:	ands	r5, r0, #-2147483648	; 0x80000000
   17554:	rsbmi	r0, r0, #0
   17558:	mov	r1, #0
   1755c:	b	173b0 <_obstack_memory_used@@Base+0x2a8>
   17560:	lsls	r2, r0, #1
   17564:	asr	r1, r2, #3
   17568:	rrx	r1, r1
   1756c:	lsl	r0, r2, #28
   17570:	andsne	r3, r2, #-16777216	; 0xff000000
   17574:	teqne	r3, #-16777216	; 0xff000000
   17578:	eorne	r1, r1, #939524096	; 0x38000000
   1757c:	bxne	lr
   17580:	bics	r2, r2, #-16777216	; 0xff000000
   17584:	bxeq	lr
   17588:	teq	r3, #-16777216	; 0xff000000
   1758c:	orreq	r1, r1, #524288	; 0x80000
   17590:	bxeq	lr
   17594:	push	{r4, r5, lr}
   17598:	mov	r4, #896	; 0x380
   1759c:	and	r5, r1, #-2147483648	; 0x80000000
   175a0:	bic	r1, r1, #-2147483648	; 0x80000000
   175a4:	b	173b0 <_obstack_memory_used@@Base+0x2a8>
   175a8:	orrs	r2, r0, r1
   175ac:	bxeq	lr
   175b0:	push	{r4, r5, lr}
   175b4:	mov	r5, #0
   175b8:	b	175d8 <_obstack_memory_used@@Base+0x4d0>
   175bc:	orrs	r2, r0, r1
   175c0:	bxeq	lr
   175c4:	push	{r4, r5, lr}
   175c8:	ands	r5, r1, #-2147483648	; 0x80000000
   175cc:	bpl	175d8 <_obstack_memory_used@@Base+0x4d0>
   175d0:	rsbs	r0, r0, #0
   175d4:	rsc	r1, r1, #0
   175d8:	mov	r4, #1024	; 0x400
   175dc:	add	r4, r4, #50	; 0x32
   175e0:	lsrs	ip, r1, #22
   175e4:	beq	17354 <_obstack_memory_used@@Base+0x24c>
   175e8:	mov	r2, #3
   175ec:	lsrs	ip, ip, #3
   175f0:	addne	r2, r2, #3
   175f4:	lsrs	ip, ip, #3
   175f8:	addne	r2, r2, #3
   175fc:	add	r2, r2, ip, lsr #3
   17600:	rsb	r3, r2, #32
   17604:	lsl	ip, r0, r3
   17608:	lsr	r0, r0, r2
   1760c:	orr	r0, r0, r1, lsl r3
   17610:	lsr	r1, r1, r2
   17614:	add	r4, r4, r2
   17618:	b	17354 <_obstack_memory_used@@Base+0x24c>
   1761c:	cmp	r3, #0
   17620:	cmpeq	r2, #0
   17624:	bne	1763c <_obstack_memory_used@@Base+0x534>
   17628:	cmp	r1, #0
   1762c:	cmpeq	r0, #0
   17630:	mvnne	r1, #0
   17634:	mvnne	r0, #0
   17638:	b	17658 <_obstack_memory_used@@Base+0x550>
   1763c:	sub	sp, sp, #8
   17640:	push	{sp, lr}
   17644:	bl	17668 <_obstack_memory_used@@Base+0x560>
   17648:	ldr	lr, [sp, #4]
   1764c:	add	sp, sp, #8
   17650:	pop	{r2, r3}
   17654:	bx	lr
   17658:	push	{r1, lr}
   1765c:	mov	r0, #8
   17660:	bl	112ac <raise@plt>
   17664:	pop	{r1, pc}
   17668:	cmp	r1, r3
   1766c:	cmpeq	r0, r2
   17670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17674:	mov	r4, r0
   17678:	movcc	r0, #0
   1767c:	mov	r5, r1
   17680:	ldr	lr, [sp, #36]	; 0x24
   17684:	movcc	r1, r0
   17688:	bcc	17784 <_obstack_memory_used@@Base+0x67c>
   1768c:	cmp	r3, #0
   17690:	clzeq	ip, r2
   17694:	clzne	ip, r3
   17698:	addeq	ip, ip, #32
   1769c:	cmp	r5, #0
   176a0:	clzeq	r1, r4
   176a4:	addeq	r1, r1, #32
   176a8:	clzne	r1, r5
   176ac:	sub	ip, ip, r1
   176b0:	sub	sl, ip, #32
   176b4:	lsl	r9, r3, ip
   176b8:	rsb	fp, ip, #32
   176bc:	orr	r9, r9, r2, lsl sl
   176c0:	orr	r9, r9, r2, lsr fp
   176c4:	lsl	r8, r2, ip
   176c8:	cmp	r5, r9
   176cc:	cmpeq	r4, r8
   176d0:	movcc	r0, #0
   176d4:	movcc	r1, r0
   176d8:	bcc	176f4 <_obstack_memory_used@@Base+0x5ec>
   176dc:	mov	r0, #1
   176e0:	subs	r4, r4, r8
   176e4:	lsl	r1, r0, sl
   176e8:	orr	r1, r1, r0, lsr fp
   176ec:	lsl	r0, r0, ip
   176f0:	sbc	r5, r5, r9
   176f4:	cmp	ip, #0
   176f8:	beq	17784 <_obstack_memory_used@@Base+0x67c>
   176fc:	lsr	r6, r8, #1
   17700:	orr	r6, r6, r9, lsl #31
   17704:	lsr	r7, r9, #1
   17708:	mov	r2, ip
   1770c:	b	17730 <_obstack_memory_used@@Base+0x628>
   17710:	subs	r3, r4, r6
   17714:	sbc	r8, r5, r7
   17718:	adds	r3, r3, r3
   1771c:	adc	r8, r8, r8
   17720:	adds	r4, r3, #1
   17724:	adc	r5, r8, #0
   17728:	subs	r2, r2, #1
   1772c:	beq	1774c <_obstack_memory_used@@Base+0x644>
   17730:	cmp	r5, r7
   17734:	cmpeq	r4, r6
   17738:	bcs	17710 <_obstack_memory_used@@Base+0x608>
   1773c:	adds	r4, r4, r4
   17740:	adc	r5, r5, r5
   17744:	subs	r2, r2, #1
   17748:	bne	17730 <_obstack_memory_used@@Base+0x628>
   1774c:	lsr	r3, r4, ip
   17750:	orr	r3, r3, r5, lsl fp
   17754:	lsr	r2, r5, ip
   17758:	orr	r3, r3, r5, lsr sl
   1775c:	adds	r0, r0, r4
   17760:	mov	r4, r3
   17764:	lsl	r3, r2, ip
   17768:	orr	r3, r3, r4, lsl sl
   1776c:	lsl	ip, r4, ip
   17770:	orr	r3, r3, r4, lsr fp
   17774:	adc	r1, r1, r5
   17778:	subs	r0, r0, ip
   1777c:	mov	r5, r2
   17780:	sbc	r1, r1, r3
   17784:	cmp	lr, #0
   17788:	strdne	r4, [lr]
   1778c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17790:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17794:	mov	r7, r0
   17798:	ldr	r6, [pc, #72]	; 177e8 <_obstack_memory_used@@Base+0x6e0>
   1779c:	ldr	r5, [pc, #72]	; 177ec <_obstack_memory_used@@Base+0x6e4>
   177a0:	add	r6, pc, r6
   177a4:	add	r5, pc, r5
   177a8:	sub	r6, r6, r5
   177ac:	mov	r8, r1
   177b0:	mov	r9, r2
   177b4:	bl	11274 <calloc@plt-0x20>
   177b8:	asrs	r6, r6, #2
   177bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   177c0:	mov	r4, #0
   177c4:	add	r4, r4, #1
   177c8:	ldr	r3, [r5], #4
   177cc:	mov	r2, r9
   177d0:	mov	r1, r8
   177d4:	mov	r0, r7
   177d8:	blx	r3
   177dc:	cmp	r6, r4
   177e0:	bne	177c4 <_obstack_memory_used@@Base+0x6bc>
   177e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   177e8:	andeq	r1, r1, r4, ror #14
   177ec:	andeq	r1, r1, ip, asr r7
   177f0:	bx	lr
   177f4:	ldr	r3, [pc, #12]	; 17808 <_obstack_memory_used@@Base+0x700>
   177f8:	mov	r1, #0
   177fc:	add	r3, pc, r3
   17800:	ldr	r2, [r3]
   17804:	b	114b0 <__cxa_atexit@plt>
   17808:	andeq	r1, r1, r0, lsr #18

Disassembly of section .fini:

0001780c <.fini>:
   1780c:	push	{r3, lr}
   17810:	pop	{r3, pc}
