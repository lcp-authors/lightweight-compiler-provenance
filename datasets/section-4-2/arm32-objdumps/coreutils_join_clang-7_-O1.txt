
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

0001106c <.init>:
   1106c:	push	{r3, lr}
   11070:	bl	11398 <__assert_fail@plt+0x48>
   11074:	pop	{r3, pc}

Disassembly of section .plt:

00011078 <fdopen@plt-0x14>:
   11078:	push	{lr}		; (str lr, [sp, #-4]!)
   1107c:	ldr	lr, [pc, #4]	; 11088 <fdopen@plt-0x4>
   11080:	add	lr, pc, lr
   11084:	ldr	pc, [lr, #8]!
   11088:	andeq	r7, r1, r8, ror pc

0001108c <fdopen@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #3960]!	; 0xf78

00011098 <calloc@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #3952]!	; 0xf70

000110a4 <fputs_unlocked@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #3944]!	; 0xf68

000110b0 <raise@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #3936]!	; 0xf60

000110bc <strcmp@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #94208	; 0x17000
   110c4:	ldr	pc, [ip, #3928]!	; 0xf58

000110c8 <posix_fadvise64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #94208	; 0x17000
   110d0:	ldr	pc, [ip, #3920]!	; 0xf50

000110d4 <fflush@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #94208	; 0x17000
   110dc:	ldr	pc, [ip, #3912]!	; 0xf48

000110e0 <free@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #94208	; 0x17000
   110e8:	ldr	pc, [ip, #3904]!	; 0xf40

000110ec <_exit@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #94208	; 0x17000
   110f4:	ldr	pc, [ip, #3896]!	; 0xf38

000110f8 <memcpy@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #94208	; 0x17000
   11100:	ldr	pc, [ip, #3888]!	; 0xf30

00011104 <mbsinit@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #94208	; 0x17000
   1110c:	ldr	pc, [ip, #3880]!	; 0xf28

00011110 <fwrite_unlocked@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #94208	; 0x17000
   11118:	ldr	pc, [ip, #3872]!	; 0xf20

0001111c <memcmp@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #94208	; 0x17000
   11124:	ldr	pc, [ip, #3864]!	; 0xf18

00011128 <getc_unlocked@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #94208	; 0x17000
   11130:	ldr	pc, [ip, #3856]!	; 0xf10

00011134 <dcgettext@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #94208	; 0x17000
   1113c:	ldr	pc, [ip, #3848]!	; 0xf08

00011140 <realloc@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #94208	; 0x17000
   11148:	ldr	pc, [ip, #3840]!	; 0xf00

0001114c <textdomain@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #94208	; 0x17000
   11154:	ldr	pc, [ip, #3832]!	; 0xef8

00011158 <iswprint@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #94208	; 0x17000
   11160:	ldr	pc, [ip, #3824]!	; 0xef0

00011164 <fwrite@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #94208	; 0x17000
   1116c:	ldr	pc, [ip, #3816]!	; 0xee8

00011170 <lseek64@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #94208	; 0x17000
   11178:	ldr	pc, [ip, #3808]!	; 0xee0

0001117c <__ctype_get_mb_cur_max@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #94208	; 0x17000
   11184:	ldr	pc, [ip, #3800]!	; 0xed8

00011188 <__fpending@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #94208	; 0x17000
   11190:	ldr	pc, [ip, #3792]!	; 0xed0

00011194 <ferror_unlocked@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #94208	; 0x17000
   1119c:	ldr	pc, [ip, #3784]!	; 0xec8

000111a0 <mbrtowc@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #94208	; 0x17000
   111a8:	ldr	pc, [ip, #3776]!	; 0xec0

000111ac <error@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #94208	; 0x17000
   111b4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111b8 <strcoll@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #94208	; 0x17000
   111c0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111c4 <malloc@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #94208	; 0x17000
   111cc:	ldr	pc, [ip, #3752]!	; 0xea8

000111d0 <__libc_start_main@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #94208	; 0x17000
   111d8:	ldr	pc, [ip, #3744]!	; 0xea0

000111dc <__freading@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #94208	; 0x17000
   111e4:	ldr	pc, [ip, #3736]!	; 0xe98

000111e8 <__ctype_toupper_loc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #94208	; 0x17000
   111f0:	ldr	pc, [ip, #3728]!	; 0xe90

000111f4 <__gmon_start__@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #94208	; 0x17000
   111fc:	ldr	pc, [ip, #3720]!	; 0xe88

00011200 <getopt_long@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #94208	; 0x17000
   11208:	ldr	pc, [ip, #3712]!	; 0xe80

0001120c <__ctype_b_loc@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #94208	; 0x17000
   11214:	ldr	pc, [ip, #3704]!	; 0xe78

00011218 <exit@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #94208	; 0x17000
   11220:	ldr	pc, [ip, #3696]!	; 0xe70

00011224 <strtoul@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #94208	; 0x17000
   1122c:	ldr	pc, [ip, #3688]!	; 0xe68

00011230 <strlen@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #94208	; 0x17000
   11238:	ldr	pc, [ip, #3680]!	; 0xe60

0001123c <strchr@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #94208	; 0x17000
   11244:	ldr	pc, [ip, #3672]!	; 0xe58

00011248 <__errno_location@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #94208	; 0x17000
   11250:	ldr	pc, [ip, #3664]!	; 0xe50

00011254 <__cxa_atexit@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #94208	; 0x17000
   1125c:	ldr	pc, [ip, #3656]!	; 0xe48

00011260 <memset@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #94208	; 0x17000
   11268:	ldr	pc, [ip, #3648]!	; 0xe40

0001126c <__printf_chk@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #94208	; 0x17000
   11274:	ldr	pc, [ip, #3640]!	; 0xe38

00011278 <fileno@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #94208	; 0x17000
   11280:	ldr	pc, [ip, #3632]!	; 0xe30

00011284 <strtoumax@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #94208	; 0x17000
   1128c:	ldr	pc, [ip, #3624]!	; 0xe28

00011290 <__fprintf_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #94208	; 0x17000
   11298:	ldr	pc, [ip, #3616]!	; 0xe20

0001129c <memchr@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #94208	; 0x17000
   112a4:	ldr	pc, [ip, #3608]!	; 0xe18

000112a8 <fclose@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #94208	; 0x17000
   112b0:	ldr	pc, [ip, #3600]!	; 0xe10

000112b4 <fseeko64@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #94208	; 0x17000
   112bc:	ldr	pc, [ip, #3592]!	; 0xe08

000112c0 <fcntl64@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #94208	; 0x17000
   112c8:	ldr	pc, [ip, #3584]!	; 0xe00

000112cc <setlocale@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #94208	; 0x17000
   112d4:	ldr	pc, [ip, #3576]!	; 0xdf8

000112d8 <strrchr@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #94208	; 0x17000
   112e0:	ldr	pc, [ip, #3568]!	; 0xdf0

000112e4 <nl_langinfo@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #94208	; 0x17000
   112ec:	ldr	pc, [ip, #3560]!	; 0xde8

000112f0 <fopen64@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #94208	; 0x17000
   112f8:	ldr	pc, [ip, #3552]!	; 0xde0

000112fc <strpbrk@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #94208	; 0x17000
   11304:	ldr	pc, [ip, #3544]!	; 0xdd8

00011308 <bindtextdomain@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #94208	; 0x17000
   11310:	ldr	pc, [ip, #3536]!	; 0xdd0

00011314 <strncmp@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #94208	; 0x17000
   1131c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011320 <abort@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #94208	; 0x17000
   11328:	ldr	pc, [ip, #3520]!	; 0xdc0

0001132c <feof_unlocked@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #94208	; 0x17000
   11334:	ldr	pc, [ip, #3512]!	; 0xdb8

00011338 <close@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #94208	; 0x17000
   11340:	ldr	pc, [ip, #3504]!	; 0xdb0

00011344 <putchar_unlocked@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #94208	; 0x17000
   1134c:	ldr	pc, [ip, #3496]!	; 0xda8

00011350 <__assert_fail@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #94208	; 0x17000
   11358:	ldr	pc, [ip, #3488]!	; 0xda0

Disassembly of section .text:

0001135c <.text>:
   1135c:	mov	fp, #0
   11360:	mov	lr, #0
   11364:	pop	{r1}		; (ldr r1, [sp], #4)
   11368:	mov	r2, sp
   1136c:	push	{r2}		; (str r2, [sp, #-4]!)
   11370:	push	{r0}		; (str r0, [sp, #-4]!)
   11374:	ldr	ip, [pc, #16]	; 1138c <__assert_fail@plt+0x3c>
   11378:	push	{ip}		; (str ip, [sp, #-4]!)
   1137c:	ldr	r0, [pc, #12]	; 11390 <__assert_fail@plt+0x40>
   11380:	ldr	r3, [pc, #12]	; 11394 <__assert_fail@plt+0x44>
   11384:	bl	111d0 <__libc_start_main@plt>
   11388:	bl	11320 <abort@plt>
   1138c:	andeq	r7, r1, ip, lsl #12
   11390:	andeq	r1, r1, r4, ror #14
   11394:	andeq	r7, r1, ip, lsr #11
   11398:	ldr	r3, [pc, #20]	; 113b4 <__assert_fail@plt+0x64>
   1139c:	ldr	r2, [pc, #20]	; 113b8 <__assert_fail@plt+0x68>
   113a0:	add	r3, pc, r3
   113a4:	ldr	r2, [r3, r2]
   113a8:	cmp	r2, #0
   113ac:	bxeq	lr
   113b0:	b	111f4 <__gmon_start__@plt>
   113b4:	andeq	r7, r1, r8, asr ip
   113b8:	strdeq	r0, [r0], -ip
   113bc:	ldr	r0, [pc, #24]	; 113dc <__assert_fail@plt+0x8c>
   113c0:	ldr	r3, [pc, #24]	; 113e0 <__assert_fail@plt+0x90>
   113c4:	cmp	r3, r0
   113c8:	bxeq	lr
   113cc:	ldr	r3, [pc, #16]	; 113e4 <__assert_fail@plt+0x94>
   113d0:	cmp	r3, #0
   113d4:	bxeq	lr
   113d8:	bx	r3
   113dc:	andeq	r9, r2, r0, ror #2
   113e0:	andeq	r9, r2, r0, ror #2
   113e4:	andeq	r0, r0, r0
   113e8:	ldr	r0, [pc, #36]	; 11414 <__assert_fail@plt+0xc4>
   113ec:	ldr	r1, [pc, #36]	; 11418 <__assert_fail@plt+0xc8>
   113f0:	sub	r1, r1, r0
   113f4:	asr	r1, r1, #2
   113f8:	add	r1, r1, r1, lsr #31
   113fc:	asrs	r1, r1, #1
   11400:	bxeq	lr
   11404:	ldr	r3, [pc, #16]	; 1141c <__assert_fail@plt+0xcc>
   11408:	cmp	r3, #0
   1140c:	bxeq	lr
   11410:	bx	r3
   11414:	andeq	r9, r2, r0, ror #2
   11418:	andeq	r9, r2, r0, ror #2
   1141c:	andeq	r0, r0, r0
   11420:	push	{r4, lr}
   11424:	ldr	r4, [pc, #24]	; 11444 <__assert_fail@plt+0xf4>
   11428:	ldrb	r3, [r4]
   1142c:	cmp	r3, #0
   11430:	popne	{r4, pc}
   11434:	bl	113bc <__assert_fail@plt+0x6c>
   11438:	mov	r3, #1
   1143c:	strb	r3, [r4]
   11440:	pop	{r4, pc}
   11444:	andeq	r9, r2, r4, lsl #3
   11448:	b	113e8 <__assert_fail@plt+0x98>
   1144c:	push	{fp, lr}
   11450:	mov	fp, sp
   11454:	mov	r4, r0
   11458:	cmp	r0, #0
   1145c:	bne	1159c <__assert_fail@plt+0x24c>
   11460:	movw	r1, #30299	; 0x765b
   11464:	movt	r1, #1
   11468:	mov	r0, #0
   1146c:	mov	r2, #5
   11470:	bl	11134 <dcgettext@plt>
   11474:	mov	r1, r0
   11478:	movw	r0, #37376	; 0x9200
   1147c:	movt	r0, #2
   11480:	ldr	r2, [r0]
   11484:	mov	r0, #1
   11488:	bl	1126c <__printf_chk@plt>
   1148c:	movw	r1, #30334	; 0x767e
   11490:	movt	r1, #1
   11494:	mov	r0, #0
   11498:	mov	r2, #5
   1149c:	bl	11134 <dcgettext@plt>
   114a0:	movw	r5, #37244	; 0x917c
   114a4:	movt	r5, #2
   114a8:	ldr	r1, [r5]
   114ac:	bl	110a4 <fputs_unlocked@plt>
   114b0:	movw	r1, #30484	; 0x7714
   114b4:	movt	r1, #1
   114b8:	mov	r0, #0
   114bc:	mov	r2, #5
   114c0:	bl	11134 <dcgettext@plt>
   114c4:	ldr	r1, [r5]
   114c8:	bl	110a4 <fputs_unlocked@plt>
   114cc:	movw	r1, #30544	; 0x7750
   114d0:	movt	r1, #1
   114d4:	mov	r0, #0
   114d8:	mov	r2, #5
   114dc:	bl	11134 <dcgettext@plt>
   114e0:	ldr	r1, [r5]
   114e4:	bl	110a4 <fputs_unlocked@plt>
   114e8:	movw	r1, #30767	; 0x782f
   114ec:	movt	r1, #1
   114f0:	mov	r0, #0
   114f4:	mov	r2, #5
   114f8:	bl	11134 <dcgettext@plt>
   114fc:	ldr	r1, [r5]
   11500:	bl	110a4 <fputs_unlocked@plt>
   11504:	movw	r1, #31039	; 0x793f
   11508:	movt	r1, #1
   1150c:	mov	r0, #0
   11510:	mov	r2, #5
   11514:	bl	11134 <dcgettext@plt>
   11518:	ldr	r1, [r5]
   1151c:	bl	110a4 <fputs_unlocked@plt>
   11520:	movw	r1, #31570	; 0x7b52
   11524:	movt	r1, #1
   11528:	mov	r0, #0
   1152c:	mov	r2, #5
   11530:	bl	11134 <dcgettext@plt>
   11534:	ldr	r1, [r5]
   11538:	bl	110a4 <fputs_unlocked@plt>
   1153c:	movw	r1, #31631	; 0x7b8f
   11540:	movt	r1, #1
   11544:	mov	r0, #0
   11548:	mov	r2, #5
   1154c:	bl	11134 <dcgettext@plt>
   11550:	ldr	r1, [r5]
   11554:	bl	110a4 <fputs_unlocked@plt>
   11558:	movw	r1, #31676	; 0x7bbc
   1155c:	movt	r1, #1
   11560:	mov	r0, #0
   11564:	mov	r2, #5
   11568:	bl	11134 <dcgettext@plt>
   1156c:	ldr	r1, [r5]
   11570:	bl	110a4 <fputs_unlocked@plt>
   11574:	movw	r1, #31730	; 0x7bf2
   11578:	movt	r1, #1
   1157c:	mov	r0, #0
   11580:	mov	r2, #5
   11584:	bl	11134 <dcgettext@plt>
   11588:	ldr	r1, [r5]
   1158c:	bl	110a4 <fputs_unlocked@plt>
   11590:	bl	115e0 <__assert_fail@plt+0x290>
   11594:	mov	r0, r4
   11598:	bl	11218 <exit@plt>
   1159c:	movw	r0, #37232	; 0x9170
   115a0:	movt	r0, #2
   115a4:	ldr	r5, [r0]
   115a8:	movw	r1, #30260	; 0x7634
   115ac:	movt	r1, #1
   115b0:	mov	r0, #0
   115b4:	mov	r2, #5
   115b8:	bl	11134 <dcgettext@plt>
   115bc:	mov	r2, r0
   115c0:	movw	r0, #37376	; 0x9200
   115c4:	movt	r0, #2
   115c8:	ldr	r3, [r0]
   115cc:	mov	r0, r5
   115d0:	mov	r1, #1
   115d4:	bl	11290 <__fprintf_chk@plt>
   115d8:	mov	r0, r4
   115dc:	bl	11218 <exit@plt>
   115e0:	push	{r4, r5, fp, lr}
   115e4:	add	fp, sp, #8
   115e8:	sub	sp, sp, #56	; 0x38
   115ec:	movw	r0, #33616	; 0x8350
   115f0:	movt	r0, #1
   115f4:	add	r1, r0, #32
   115f8:	mov	r5, sp
   115fc:	mov	r2, #48	; 0x30
   11600:	vld1.64	{d16-d17}, [r1]
   11604:	add	r1, r5, #32
   11608:	add	r3, r0, #16
   1160c:	vld1.64	{d18-d19}, [r0], r2
   11610:	vld1.64	{d20-d21}, [r3]
   11614:	vldr	d22, [r0]
   11618:	vst1.64	{d16-d17}, [r1]
   1161c:	add	r0, r5, #16
   11620:	vst1.64	{d20-d21}, [r0]
   11624:	mov	r0, r5
   11628:	vst1.64	{d18-d19}, [r0], r2
   1162c:	vstr	d22, [r0]
   11630:	ldr	r1, [sp]
   11634:	cmp	r1, #0
   11638:	beq	11660 <__assert_fail@plt+0x310>
   1163c:	mov	r5, sp
   11640:	movw	r4, #32548	; 0x7f24
   11644:	movt	r4, #1
   11648:	mov	r0, r4
   1164c:	bl	110bc <strcmp@plt>
   11650:	cmp	r0, #0
   11654:	ldrne	r1, [r5, #8]!
   11658:	cmpne	r1, #0
   1165c:	bne	11648 <__assert_fail@plt+0x2f8>
   11660:	ldr	r4, [r5, #4]
   11664:	movw	r1, #32943	; 0x80af
   11668:	movt	r1, #1
   1166c:	mov	r0, #0
   11670:	mov	r2, #5
   11674:	bl	11134 <dcgettext@plt>
   11678:	mov	r1, r0
   1167c:	movw	r2, #32715	; 0x7fcb
   11680:	movt	r2, #1
   11684:	movw	r3, #32966	; 0x80c6
   11688:	movt	r3, #1
   1168c:	mov	r0, #1
   11690:	bl	1126c <__printf_chk@plt>
   11694:	movw	r5, #32548	; 0x7f24
   11698:	movt	r5, #1
   1169c:	cmp	r4, #0
   116a0:	moveq	r4, r5
   116a4:	mov	r0, #5
   116a8:	mov	r1, #0
   116ac:	bl	112cc <setlocale@plt>
   116b0:	cmp	r0, #0
   116b4:	beq	116f4 <__assert_fail@plt+0x3a4>
   116b8:	movw	r1, #33006	; 0x80ee
   116bc:	movt	r1, #1
   116c0:	mov	r2, #3
   116c4:	bl	11314 <strncmp@plt>
   116c8:	cmp	r0, #0
   116cc:	beq	116f4 <__assert_fail@plt+0x3a4>
   116d0:	movw	r1, #33010	; 0x80f2
   116d4:	movt	r1, #1
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	bl	11134 <dcgettext@plt>
   116e4:	movw	r1, #37244	; 0x917c
   116e8:	movt	r1, #2
   116ec:	ldr	r1, [r1]
   116f0:	bl	110a4 <fputs_unlocked@plt>
   116f4:	movw	r1, #33081	; 0x8139
   116f8:	movt	r1, #1
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	bl	11134 <dcgettext@plt>
   11708:	mov	r1, r0
   1170c:	movw	r2, #32966	; 0x80c6
   11710:	movt	r2, #1
   11714:	mov	r0, #1
   11718:	mov	r3, r5
   1171c:	bl	1126c <__printf_chk@plt>
   11720:	movw	r1, #33108	; 0x8154
   11724:	movt	r1, #1
   11728:	mov	r0, #0
   1172c:	mov	r2, #5
   11730:	bl	11134 <dcgettext@plt>
   11734:	mov	r1, r0
   11738:	movw	r0, #32876	; 0x806c
   1173c:	movt	r0, #1
   11740:	movw	r3, #33258	; 0x81ea
   11744:	movt	r3, #1
   11748:	cmp	r4, r5
   1174c:	moveq	r3, r0
   11750:	mov	r0, #1
   11754:	mov	r2, r4
   11758:	bl	1126c <__printf_chk@plt>
   1175c:	sub	sp, fp, #8
   11760:	pop	{r4, r5, fp, pc}
   11764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11768:	add	fp, sp, #28
   1176c:	sub	sp, sp, #44	; 0x2c
   11770:	mov	sl, r1
   11774:	mov	r7, r0
   11778:	mov	r6, #0
   1177c:	str	r6, [sp, #36]	; 0x24
   11780:	str	r6, [sp, #20]
   11784:	str	r6, [sp, #16]
   11788:	str	r6, [sp, #12]
   1178c:	ldr	r0, [r1]
   11790:	bl	139c4 <__assert_fail@plt+0x2674>
   11794:	movw	r1, #33258	; 0x81ea
   11798:	movt	r1, #1
   1179c:	mov	r0, #6
   117a0:	bl	112cc <setlocale@plt>
   117a4:	movw	r5, #32719	; 0x7fcf
   117a8:	movt	r5, #1
   117ac:	movw	r1, #32553	; 0x7f29
   117b0:	movt	r1, #1
   117b4:	mov	r0, r5
   117b8:	bl	11308 <bindtextdomain@plt>
   117bc:	mov	r0, r5
   117c0:	bl	1114c <textdomain@plt>
   117c4:	mov	r0, #3
   117c8:	bl	1380c <__assert_fail@plt+0x24bc>
   117cc:	movw	r1, #37256	; 0x9188
   117d0:	movt	r1, #2
   117d4:	strb	r0, [r1]
   117d8:	movw	r0, #13404	; 0x345c
   117dc:	movt	r0, #1
   117e0:	bl	17610 <__assert_fail@plt+0x62c0>
   117e4:	movw	r0, #8400	; 0x20d0
   117e8:	movt	r0, #1
   117ec:	bl	17610 <__assert_fail@plt+0x62c0>
   117f0:	movw	r0, #37257	; 0x9189
   117f4:	movt	r0, #2
   117f8:	mov	r5, #1
   117fc:	strb	r5, [r0]
   11800:	movw	r0, #37258	; 0x918a
   11804:	movt	r0, #2
   11808:	strb	r6, [r0]
   1180c:	movw	r0, #37259	; 0x918b
   11810:	movt	r0, #2
   11814:	strh	r6, [r0]
   11818:	movw	r0, #37264	; 0x9190
   1181c:	movt	r0, #2
   11820:	str	r6, [r0]
   11824:	str	r6, [sp]
   11828:	movw	r2, #32577	; 0x7f41
   1182c:	movt	r2, #1
   11830:	movw	r3, #33488	; 0x82d0
   11834:	movt	r3, #1
   11838:	mov	r0, r7
   1183c:	mov	r1, sl
   11840:	bl	11200 <getopt_long@plt>
   11844:	cmn	r0, #1
   11848:	beq	11d5c <__assert_fail@plt+0xa0c>
   1184c:	movw	r4, #37248	; 0x9180
   11850:	movt	r4, #2
   11854:	movw	r9, #37132	; 0x910c
   11858:	movt	r9, #2
   1185c:	add	r8, sp, #8
   11860:	b	118d4 <__assert_fail@plt+0x584>
   11864:	mov	r1, #10
   11868:	movw	r0, #37136	; 0x9110
   1186c:	movt	r0, #2
   11870:	ldr	r0, [r0]
   11874:	cmp	r0, #0
   11878:	blt	11884 <__assert_fail@plt+0x534>
   1187c:	cmp	r0, r1
   11880:	bne	12040 <__assert_fail@plt+0xcf0>
   11884:	movw	r0, #37136	; 0x9110
   11888:	movt	r0, #2
   1188c:	str	r1, [r0]
   11890:	b	11d2c <__assert_fail@plt+0x9dc>
   11894:	mov	r5, #1
   11898:	movw	r0, #37277	; 0x919d
   1189c:	movt	r0, #2
   118a0:	b	11d28 <__assert_fail@plt+0x9d8>
   118a4:	subs	r0, r1, #50	; 0x32
   118a8:	clz	r0, r0
   118ac:	lsr	r0, r0, #5
   118b0:	add	r1, sp, #16
   118b4:	orr	r0, r1, r0, lsl #2
   118b8:	ldr	r1, [r0]
   118bc:	add	r1, r1, #1
   118c0:	str	r1, [r0]
   118c4:	mov	r0, #1
   118c8:	movweq	r0, #2
   118cc:	str	r0, [fp, #-32]	; 0xffffffe0
   118d0:	b	11d2c <__assert_fail@plt+0x9dc>
   118d4:	str	r6, [fp, #-32]	; 0xffffffe0
   118d8:	cmp	r0, #255	; 0xff
   118dc:	bgt	11b14 <__assert_fail@plt+0x7c4>
   118e0:	add	r0, r0, #3
   118e4:	cmp	r0, #125	; 0x7d
   118e8:	bhi	120c8 <__assert_fail@plt+0xd78>
   118ec:	add	r1, pc, #0
   118f0:	ldr	pc, [r1, r0, lsl #2]
   118f4:	andeq	r1, r1, r8, asr pc
   118f8:	andeq	r1, r1, r0, lsr #31
   118fc:	andeq	r2, r1, r8, asr #1
   11900:	andeq	r2, r1, r8, asr #1
   11904:	andeq	r1, r1, ip, ror #21
   11908:	andeq	r2, r1, r8, asr #1
   1190c:	andeq	r2, r1, r8, asr #1
   11910:	andeq	r2, r1, r8, asr #1
   11914:	andeq	r2, r1, r8, asr #1
   11918:	andeq	r2, r1, r8, asr #1
   1191c:	andeq	r2, r1, r8, asr #1
   11920:	andeq	r2, r1, r8, asr #1
   11924:	andeq	r2, r1, r8, asr #1
   11928:	andeq	r2, r1, r8, asr #1
   1192c:	andeq	r2, r1, r8, asr #1
   11930:	andeq	r2, r1, r8, asr #1
   11934:	andeq	r2, r1, r8, asr #1
   11938:	andeq	r2, r1, r8, asr #1
   1193c:	andeq	r2, r1, r8, asr #1
   11940:	andeq	r2, r1, r8, asr #1
   11944:	andeq	r2, r1, r8, asr #1
   11948:	andeq	r2, r1, r8, asr #1
   1194c:	andeq	r2, r1, r8, asr #1
   11950:	andeq	r2, r1, r8, asr #1
   11954:	andeq	r2, r1, r8, asr #1
   11958:	andeq	r2, r1, r8, asr #1
   1195c:	andeq	r2, r1, r8, asr #1
   11960:	andeq	r2, r1, r8, asr #1
   11964:	andeq	r2, r1, r8, asr #1
   11968:	andeq	r2, r1, r8, asr #1
   1196c:	andeq	r2, r1, r8, asr #1
   11970:	andeq	r2, r1, r8, asr #1
   11974:	andeq	r2, r1, r8, asr #1
   11978:	andeq	r2, r1, r8, asr #1
   1197c:	andeq	r2, r1, r8, asr #1
   11980:	andeq	r2, r1, r8, asr #1
   11984:	andeq	r2, r1, r8, asr #1
   11988:	andeq	r2, r1, r8, asr #1
   1198c:	andeq	r2, r1, r8, asr #1
   11990:	andeq	r2, r1, r8, asr #1
   11994:	andeq	r2, r1, r8, asr #1
   11998:	andeq	r2, r1, r8, asr #1
   1199c:	andeq	r2, r1, r8, asr #1
   119a0:	andeq	r2, r1, r8, asr #1
   119a4:	andeq	r2, r1, r8, asr #1
   119a8:	andeq	r2, r1, r8, asr #1
   119ac:	andeq	r2, r1, r8, asr #1
   119b0:	andeq	r2, r1, r8, asr #1
   119b4:	andeq	r2, r1, r8, asr #1
   119b8:	andeq	r2, r1, r8, asr #1
   119bc:	andeq	r2, r1, r8, asr #1
   119c0:	andeq	r2, r1, r8, asr #1
   119c4:	strdeq	r1, [r1], -ip
   119c8:	andeq	r1, r1, r8, lsl ip
   119cc:	andeq	r2, r1, r8, asr #1
   119d0:	andeq	r2, r1, r8, asr #1
   119d4:	andeq	r2, r1, r8, asr #1
   119d8:	andeq	r2, r1, r8, asr #1
   119dc:	andeq	r2, r1, r8, asr #1
   119e0:	andeq	r2, r1, r8, asr #1
   119e4:	andeq	r2, r1, r8, asr #1
   119e8:	andeq	r2, r1, r8, asr #1
   119ec:	andeq	r2, r1, r8, asr #1
   119f0:	andeq	r2, r1, r8, asr #1
   119f4:	andeq	r2, r1, r8, asr #1
   119f8:	andeq	r2, r1, r8, asr #1
   119fc:	andeq	r2, r1, r8, asr #1
   11a00:	andeq	r2, r1, r8, asr #1
   11a04:	andeq	r2, r1, r8, asr #1
   11a08:	andeq	r2, r1, r8, asr #1
   11a0c:	andeq	r2, r1, r8, asr #1
   11a10:	andeq	r2, r1, r8, asr #1
   11a14:	andeq	r2, r1, r8, asr #1
   11a18:	andeq	r2, r1, r8, asr #1
   11a1c:	andeq	r2, r1, r8, asr #1
   11a20:	andeq	r2, r1, r8, asr #1
   11a24:	andeq	r2, r1, r8, asr #1
   11a28:	andeq	r2, r1, r8, asr #1
   11a2c:	andeq	r2, r1, r8, asr #1
   11a30:	andeq	r2, r1, r8, asr #1
   11a34:	andeq	r2, r1, r8, asr #1
   11a38:	andeq	r2, r1, r8, asr #1
   11a3c:	andeq	r2, r1, r8, asr #1
   11a40:	andeq	r2, r1, r8, asr #1
   11a44:	andeq	r2, r1, r8, asr #1
   11a48:	andeq	r2, r1, r8, asr #1
   11a4c:	andeq	r2, r1, r8, asr #1
   11a50:	andeq	r2, r1, r8, asr #1
   11a54:	andeq	r2, r1, r8, asr #1
   11a58:	andeq	r2, r1, r8, asr #1
   11a5c:	andeq	r2, r1, r8, asr #1
   11a60:	andeq	r2, r1, r8, asr #1
   11a64:	andeq	r2, r1, r8, asr #1
   11a68:	andeq	r2, r1, r8, asr #1
   11a6c:	andeq	r2, r1, r8, asr #1
   11a70:	andeq	r2, r1, r8, asr #1
   11a74:	andeq	r2, r1, r8, asr #1
   11a78:	andeq	r2, r1, r8, asr #1
   11a7c:	andeq	r2, r1, r8, asr #1
   11a80:	andeq	r2, r1, r8, asr #1
   11a84:	ldrdeq	r1, [r1], -r8
   11a88:	andeq	r2, r1, r8, asr #1
   11a8c:	andeq	r2, r1, r8, asr #1
   11a90:	andeq	r2, r1, r8, asr #1
   11a94:	andeq	r1, r1, r4, asr ip
   11a98:	andeq	r2, r1, r8, asr #1
   11a9c:	andeq	r2, r1, r8, asr #1
   11aa0:	andeq	r2, r1, r8, asr #1
   11aa4:	andeq	r1, r1, ip, lsl #25
   11aa8:	andeq	r1, r1, ip, lsr fp
   11aac:	andeq	r2, r1, r8, asr #1
   11ab0:	andeq	r2, r1, r8, asr #1
   11ab4:	andeq	r2, r1, r8, asr #1
   11ab8:	andeq	r2, r1, r8, asr #1
   11abc:	muleq	r1, r8, ip
   11ac0:	andeq	r2, r1, r8, asr #1
   11ac4:	andeq	r2, r1, r8, asr #1
   11ac8:	andeq	r2, r1, r8, asr #1
   11acc:	andeq	r2, r1, r8, asr #1
   11ad0:	andeq	r1, r1, r4, asr #23
   11ad4:	andeq	r2, r1, r8, asr #1
   11ad8:	andeq	r1, r1, ip, asr #25
   11adc:	andeq	r2, r1, r8, asr #1
   11ae0:	andeq	r2, r1, r8, asr #1
   11ae4:	andeq	r2, r1, r8, asr #1
   11ae8:	andeq	r1, r1, r0, lsr ip
   11aec:	ldr	r0, [r4]
   11af0:	add	r1, sp, #36	; 0x24
   11af4:	str	r1, [sp]
   11af8:	sub	r1, fp, #32
   11afc:	str	r1, [sp, #4]
   11b00:	add	r1, sp, #28
   11b04:	add	r2, sp, #16
   11b08:	add	r3, sp, #12
   11b0c:	bl	12294 <__assert_fail@plt+0xf44>
   11b10:	b	11d2c <__assert_fail@plt+0x9dc>
   11b14:	cmp	r0, #256	; 0x100
   11b18:	beq	11bb4 <__assert_fail@plt+0x864>
   11b1c:	movw	r1, #257	; 0x101
   11b20:	cmp	r0, r1
   11b24:	bne	11c3c <__assert_fail@plt+0x8ec>
   11b28:	movw	r0, #37264	; 0x9190
   11b2c:	movt	r0, #2
   11b30:	mov	r1, #2
   11b34:	str	r1, [r0]
   11b38:	b	11d2c <__assert_fail@plt+0x9dc>
   11b3c:	ldr	r0, [r4]
   11b40:	ldrb	r1, [r0]
   11b44:	sub	r2, r1, #49	; 0x31
   11b48:	uxtb	r2, r2
   11b4c:	cmp	r2, #1
   11b50:	bhi	11b80 <__assert_fail@plt+0x830>
   11b54:	ldrb	r2, [r0, #1]
   11b58:	cmp	r2, #0
   11b5c:	bne	11b80 <__assert_fail@plt+0x830>
   11b60:	movw	r2, #37224	; 0x9168
   11b64:	movt	r2, #2
   11b68:	ldr	r2, [r2]
   11b6c:	add	r2, sl, r2, lsl #2
   11b70:	ldr	r2, [r2, #-4]
   11b74:	add	r2, r2, #2
   11b78:	cmp	r0, r2
   11b7c:	beq	118a4 <__assert_fail@plt+0x554>
   11b80:	bl	1216c <__assert_fail@plt+0xe1c>
   11b84:	mov	r1, r0
   11b88:	mov	r5, r8
   11b8c:	mov	r8, r9
   11b90:	movw	r9, #37128	; 0x9108
   11b94:	movt	r9, #2
   11b98:	mov	r0, r9
   11b9c:	bl	12110 <__assert_fail@plt+0xdc0>
   11ba0:	ldr	r1, [r9]
   11ba4:	mov	r9, r8
   11ba8:	mov	r8, r5
   11bac:	mov	r5, #1
   11bb0:	b	11c24 <__assert_fail@plt+0x8d4>
   11bb4:	movw	r0, #37264	; 0x9190
   11bb8:	movt	r0, #2
   11bbc:	str	r5, [r0]
   11bc0:	b	11d2c <__assert_fail@plt+0x9dc>
   11bc4:	ldr	r0, [r4]
   11bc8:	ldrb	r1, [r0]
   11bcc:	cmp	r1, #0
   11bd0:	beq	11864 <__assert_fail@plt+0x514>
   11bd4:	ldrb	r2, [r0, #1]
   11bd8:	cmp	r2, #0
   11bdc:	beq	11868 <__assert_fail@plt+0x518>
   11be0:	movw	r1, #32671	; 0x7f9f
   11be4:	movt	r1, #1
   11be8:	bl	110bc <strcmp@plt>
   11bec:	mov	r1, #0
   11bf0:	cmp	r0, #0
   11bf4:	beq	11868 <__assert_fail@plt+0x518>
   11bf8:	b	1204c <__assert_fail@plt+0xcfc>
   11bfc:	ldr	r0, [r4]
   11c00:	bl	1216c <__assert_fail@plt+0xe1c>
   11c04:	mov	r1, r0
   11c08:	movw	r0, #37128	; 0x9108
   11c0c:	movt	r0, #2
   11c10:	bl	12110 <__assert_fail@plt+0xdc0>
   11c14:	b	11d2c <__assert_fail@plt+0x9dc>
   11c18:	ldr	r0, [r4]
   11c1c:	bl	1216c <__assert_fail@plt+0xe1c>
   11c20:	mov	r1, r0
   11c24:	mov	r0, r9
   11c28:	bl	12110 <__assert_fail@plt+0xdc0>
   11c2c:	b	11d2c <__assert_fail@plt+0x9dc>
   11c30:	movw	r0, #37278	; 0x919e
   11c34:	movt	r0, #2
   11c38:	b	11d28 <__assert_fail@plt+0x9d8>
   11c3c:	movw	r1, #258	; 0x102
   11c40:	cmp	r0, r1
   11c44:	bne	120c8 <__assert_fail@plt+0xd78>
   11c48:	movw	r0, #37288	; 0x91a8
   11c4c:	movt	r0, #2
   11c50:	b	11d28 <__assert_fail@plt+0x9d8>
   11c54:	movw	r0, #37272	; 0x9198
   11c58:	movt	r0, #2
   11c5c:	ldr	r0, [r0]
   11c60:	cmp	r0, #0
   11c64:	beq	11c78 <__assert_fail@plt+0x928>
   11c68:	ldr	r1, [r4]
   11c6c:	bl	110bc <strcmp@plt>
   11c70:	cmp	r0, #0
   11c74:	bne	12058 <__assert_fail@plt+0xd08>
   11c78:	ldr	r0, [r4]
   11c7c:	movw	r1, #37272	; 0x9198
   11c80:	movt	r1, #2
   11c84:	str	r0, [r1]
   11c88:	b	11d2c <__assert_fail@plt+0x9dc>
   11c8c:	movw	r0, #37276	; 0x919c
   11c90:	movt	r0, #2
   11c94:	b	11d28 <__assert_fail@plt+0x9d8>
   11c98:	ldr	r5, [r4]
   11c9c:	mov	r0, r5
   11ca0:	movw	r1, #32666	; 0x7f9a
   11ca4:	movt	r1, #1
   11ca8:	bl	110bc <strcmp@plt>
   11cac:	cmp	r0, #0
   11cb0:	beq	11894 <__assert_fail@plt+0x544>
   11cb4:	mov	r0, r5
   11cb8:	bl	12224 <__assert_fail@plt+0xed4>
   11cbc:	mov	r0, #3
   11cc0:	str	r0, [fp, #-32]	; 0xffffffe0
   11cc4:	mov	r5, #1
   11cc8:	b	11d2c <__assert_fail@plt+0x9dc>
   11ccc:	movw	r0, #37257	; 0x9189
   11cd0:	movt	r0, #2
   11cd4:	strb	r6, [r0]
   11cd8:	ldr	r0, [r4]
   11cdc:	movw	r1, #33258	; 0x81ea
   11ce0:	movt	r1, #1
   11ce4:	str	r1, [sp]
   11ce8:	mov	r1, #0
   11cec:	mov	r2, #10
   11cf0:	mov	r3, r8
   11cf4:	bl	160fc <__assert_fail@plt+0x4dac>
   11cf8:	cmp	r0, #0
   11cfc:	bne	11fa8 <__assert_fail@plt+0xc58>
   11d00:	ldr	r0, [sp, #8]
   11d04:	sub	r1, r0, #1
   11d08:	cmp	r1, #2
   11d0c:	bcs	11fa8 <__assert_fail@plt+0xc58>
   11d10:	cmp	r0, #1
   11d14:	movw	r0, #37269	; 0x9195
   11d18:	movt	r0, #2
   11d1c:	movw	r1, #37268	; 0x9194
   11d20:	movt	r1, #2
   11d24:	moveq	r0, r1
   11d28:	strb	r5, [r0]
   11d2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11d30:	str	r0, [sp, #36]	; 0x24
   11d34:	str	r6, [sp]
   11d38:	mov	r0, r7
   11d3c:	mov	r1, sl
   11d40:	movw	r2, #32577	; 0x7f41
   11d44:	movt	r2, #1
   11d48:	movw	r3, #33488	; 0x82d0
   11d4c:	movt	r3, #1
   11d50:	bl	11200 <getopt_long@plt>
   11d54:	cmn	r0, #1
   11d58:	bne	118d4 <__assert_fail@plt+0x584>
   11d5c:	str	r6, [sp, #36]	; 0x24
   11d60:	movw	r4, #37224	; 0x9168
   11d64:	movt	r4, #2
   11d68:	ldr	r0, [r4]
   11d6c:	cmp	r0, r7
   11d70:	bge	11db8 <__assert_fail@plt+0xa68>
   11d74:	add	r9, sp, #36	; 0x24
   11d78:	add	r6, sp, #28
   11d7c:	add	r8, sp, #16
   11d80:	add	r5, sp, #12
   11d84:	add	r1, r0, #1
   11d88:	str	r1, [r4]
   11d8c:	ldr	r0, [sl, r0, lsl #2]
   11d90:	str	r9, [sp]
   11d94:	sub	r1, fp, #32
   11d98:	str	r1, [sp, #4]
   11d9c:	mov	r1, r6
   11da0:	mov	r2, r8
   11da4:	mov	r3, r5
   11da8:	bl	12294 <__assert_fail@plt+0xf44>
   11dac:	ldr	r0, [r4]
   11db0:	cmp	r0, r7
   11db4:	blt	11d84 <__assert_fail@plt+0xa34>
   11db8:	ldr	r0, [sp, #12]
   11dbc:	cmp	r0, #2
   11dc0:	bne	11fdc <__assert_fail@plt+0xc8c>
   11dc4:	mov	r6, #0
   11dc8:	add	r7, sp, #16
   11dcc:	movw	r5, #37128	; 0x9108
   11dd0:	movt	r5, #2
   11dd4:	movw	r4, #37132	; 0x910c
   11dd8:	movt	r4, #2
   11ddc:	ldr	r0, [r7, r6, lsl #2]
   11de0:	cmp	r0, #0
   11de4:	beq	11e00 <__assert_fail@plt+0xab0>
   11de8:	mov	r0, r5
   11dec:	mov	r1, r6
   11df0:	bl	12110 <__assert_fail@plt+0xdc0>
   11df4:	mov	r0, r4
   11df8:	mov	r1, r6
   11dfc:	bl	12110 <__assert_fail@plt+0xdc0>
   11e00:	add	r6, r6, #1
   11e04:	cmp	r6, #2
   11e08:	bne	11ddc <__assert_fail@plt+0xa8c>
   11e0c:	ldr	r0, [r5]
   11e10:	cmn	r0, #1
   11e14:	moveq	r0, #0
   11e18:	streq	r0, [r5]
   11e1c:	ldr	r0, [r4]
   11e20:	cmn	r0, #1
   11e24:	movw	r7, #37259	; 0x918b
   11e28:	movt	r7, #2
   11e2c:	moveq	r0, #0
   11e30:	streq	r0, [r4]
   11e34:	movw	r6, #37280	; 0x91a0
   11e38:	movt	r6, #2
   11e3c:	ldr	r4, [r6]
   11e40:	movw	r1, #33780	; 0x83f4
   11e44:	movt	r1, #1
   11e48:	mov	r0, r4
   11e4c:	bl	110bc <strcmp@plt>
   11e50:	cmp	r0, #0
   11e54:	beq	11e78 <__assert_fail@plt+0xb28>
   11e58:	movw	r1, #33206	; 0x81b6
   11e5c:	movt	r1, #1
   11e60:	mov	r0, r4
   11e64:	bl	1368c <__assert_fail@plt+0x233c>
   11e68:	mov	r4, r0
   11e6c:	cmp	r4, #0
   11e70:	bne	11e8c <__assert_fail@plt+0xb3c>
   11e74:	b	12010 <__assert_fail@plt+0xcc0>
   11e78:	movw	r0, #37240	; 0x9178
   11e7c:	movt	r0, #2
   11e80:	ldr	r4, [r0]
   11e84:	cmp	r4, #0
   11e88:	beq	12010 <__assert_fail@plt+0xcc0>
   11e8c:	ldr	r5, [r6, #4]
   11e90:	movw	r1, #33780	; 0x83f4
   11e94:	movt	r1, #1
   11e98:	mov	r0, r5
   11e9c:	bl	110bc <strcmp@plt>
   11ea0:	cmp	r0, #0
   11ea4:	beq	11f34 <__assert_fail@plt+0xbe4>
   11ea8:	movw	r1, #33206	; 0x81b6
   11eac:	movt	r1, #1
   11eb0:	mov	r0, r5
   11eb4:	bl	1368c <__assert_fail@plt+0x233c>
   11eb8:	mov	r5, r0
   11ebc:	cmp	r5, #0
   11ec0:	beq	11f48 <__assert_fail@plt+0xbf8>
   11ec4:	cmp	r4, r5
   11ec8:	beq	12064 <__assert_fail@plt+0xd14>
   11ecc:	mov	r0, r4
   11ed0:	mov	r1, r5
   11ed4:	bl	123cc <__assert_fail@plt+0x107c>
   11ed8:	mov	r0, r4
   11edc:	bl	13584 <__assert_fail@plt+0x2234>
   11ee0:	cmp	r0, #0
   11ee4:	bne	12010 <__assert_fail@plt+0xcc0>
   11ee8:	mov	r0, r5
   11eec:	bl	13584 <__assert_fail@plt+0x2234>
   11ef0:	cmp	r0, #0
   11ef4:	bne	11f48 <__assert_fail@plt+0xbf8>
   11ef8:	ldrb	r0, [r7]
   11efc:	ldrb	r1, [r7, #1]
   11f00:	orrs	r0, r1, r0
   11f04:	moveq	r0, #0
   11f08:	subeq	sp, fp, #28
   11f0c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f10:	movw	r1, #32819	; 0x8033
   11f14:	movt	r1, #1
   11f18:	mov	r0, #0
   11f1c:	mov	r2, #5
   11f20:	bl	11134 <dcgettext@plt>
   11f24:	mov	r2, r0
   11f28:	mov	r0, #1
   11f2c:	mov	r1, #0
   11f30:	bl	111ac <error@plt>
   11f34:	movw	r0, #37240	; 0x9178
   11f38:	movt	r0, #2
   11f3c:	ldr	r5, [r0]
   11f40:	cmp	r5, #0
   11f44:	bne	11ec4 <__assert_fail@plt+0xb74>
   11f48:	bl	11248 <__errno_location@plt>
   11f4c:	ldr	r4, [r0]
   11f50:	ldr	r2, [r6, #4]
   11f54:	b	1201c <__assert_fail@plt+0xccc>
   11f58:	movw	r0, #37144	; 0x9118
   11f5c:	movt	r0, #2
   11f60:	ldr	r3, [r0]
   11f64:	movw	r0, #37244	; 0x917c
   11f68:	movt	r0, #2
   11f6c:	ldr	r0, [r0]
   11f70:	mov	r1, #0
   11f74:	movw	r2, #32729	; 0x7fd9
   11f78:	movt	r2, #1
   11f7c:	str	r2, [sp]
   11f80:	str	r1, [sp, #4]
   11f84:	movw	r1, #32548	; 0x7f24
   11f88:	movt	r1, #1
   11f8c:	movw	r2, #32715	; 0x7fcb
   11f90:	movt	r2, #1
   11f94:	bl	15a80 <__assert_fail@plt+0x4730>
   11f98:	mov	r0, #0
   11f9c:	bl	11218 <exit@plt>
   11fa0:	mov	r0, #0
   11fa4:	bl	1144c <__assert_fail@plt+0xfc>
   11fa8:	movw	r1, #32597	; 0x7f55
   11fac:	movt	r1, #1
   11fb0:	mov	r0, #0
   11fb4:	mov	r2, #5
   11fb8:	bl	11134 <dcgettext@plt>
   11fbc:	mov	r5, r0
   11fc0:	ldr	r0, [r4]
   11fc4:	bl	151fc <__assert_fail@plt+0x3eac>
   11fc8:	mov	r3, r0
   11fcc:	mov	r0, #1
   11fd0:	mov	r1, #0
   11fd4:	mov	r2, r5
   11fd8:	bl	111ac <error@plt>
   11fdc:	cmp	r0, #0
   11fe0:	bne	12090 <__assert_fail@plt+0xd40>
   11fe4:	movw	r1, #32742	; 0x7fe6
   11fe8:	movt	r1, #1
   11fec:	mov	r0, #0
   11ff0:	mov	r2, #5
   11ff4:	bl	11134 <dcgettext@plt>
   11ff8:	mov	r2, r0
   11ffc:	mov	r0, #0
   12000:	mov	r1, #0
   12004:	bl	111ac <error@plt>
   12008:	mov	r0, #1
   1200c:	bl	1144c <__assert_fail@plt+0xfc>
   12010:	bl	11248 <__errno_location@plt>
   12014:	ldr	r4, [r0]
   12018:	ldr	r2, [r6]
   1201c:	mov	r0, #0
   12020:	mov	r1, #3
   12024:	bl	150bc <__assert_fail@plt+0x3d6c>
   12028:	mov	r3, r0
   1202c:	movw	r2, #33322	; 0x822a
   12030:	movt	r2, #1
   12034:	mov	r0, #1
   12038:	mov	r1, r4
   1203c:	bl	111ac <error@plt>
   12040:	movw	r1, #32697	; 0x7fb9
   12044:	movt	r1, #1
   12048:	b	11f18 <__assert_fail@plt+0xbc8>
   1204c:	movw	r1, #32674	; 0x7fa2
   12050:	movt	r1, #1
   12054:	b	11fb0 <__assert_fail@plt+0xc60>
   12058:	movw	r1, #32622	; 0x7f6e
   1205c:	movt	r1, #1
   12060:	b	11f18 <__assert_fail@plt+0xbc8>
   12064:	bl	11248 <__errno_location@plt>
   12068:	ldr	r4, [r0]
   1206c:	movw	r1, #32783	; 0x800f
   12070:	movt	r1, #1
   12074:	mov	r0, #0
   12078:	mov	r2, #5
   1207c:	bl	11134 <dcgettext@plt>
   12080:	mov	r2, r0
   12084:	mov	r0, #1
   12088:	mov	r1, r4
   1208c:	bl	111ac <error@plt>
   12090:	movw	r1, #32758	; 0x7ff6
   12094:	movt	r1, #1
   12098:	mov	r0, #0
   1209c:	mov	r2, #5
   120a0:	bl	11134 <dcgettext@plt>
   120a4:	mov	r5, r0
   120a8:	add	r0, sl, r7, lsl #2
   120ac:	ldr	r0, [r0, #-4]
   120b0:	bl	151fc <__assert_fail@plt+0x3eac>
   120b4:	mov	r3, r0
   120b8:	mov	r0, #0
   120bc:	mov	r1, #0
   120c0:	mov	r2, r5
   120c4:	bl	111ac <error@plt>
   120c8:	mov	r0, #1
   120cc:	bl	1144c <__assert_fail@plt+0xfc>
   120d0:	push	{r4, r5, fp, lr}
   120d4:	add	fp, sp, #8
   120d8:	mov	r4, #0
   120dc:	movw	r5, #37292	; 0x91ac
   120e0:	movt	r5, #2
   120e4:	b	120f4 <__assert_fail@plt+0xda4>
   120e8:	add	r4, r4, #1
   120ec:	cmp	r4, #2
   120f0:	popeq	{r4, r5, fp, pc}
   120f4:	ldr	r0, [r5, r4, lsl #2]
   120f8:	cmp	r0, #0
   120fc:	beq	120e8 <__assert_fail@plt+0xd98>
   12100:	bl	129e8 <__assert_fail@plt+0x1698>
   12104:	ldr	r0, [r5, r4, lsl #2]
   12108:	bl	13740 <__assert_fail@plt+0x23f0>
   1210c:	b	120e8 <__assert_fail@plt+0xd98>
   12110:	push	{r4, r5, fp, lr}
   12114:	add	fp, sp, #8
   12118:	sub	sp, sp, #8
   1211c:	mov	r4, r1
   12120:	ldr	r5, [r0]
   12124:	cmn	r5, #1
   12128:	cmpne	r5, r4
   1212c:	bne	1213c <__assert_fail@plt+0xdec>
   12130:	str	r4, [r0]
   12134:	sub	sp, fp, #8
   12138:	pop	{r4, r5, fp, pc}
   1213c:	movw	r1, #33221	; 0x81c5
   12140:	movt	r1, #1
   12144:	mov	r0, #0
   12148:	mov	r2, #5
   1214c:	bl	11134 <dcgettext@plt>
   12150:	mov	r2, r0
   12154:	add	r0, r4, #1
   12158:	str	r0, [sp]
   1215c:	add	r3, r5, #1
   12160:	mov	r0, #1
   12164:	mov	r1, #0
   12168:	bl	111ac <error@plt>
   1216c:	push	{r4, r5, fp, lr}
   12170:	add	fp, sp, #8
   12174:	sub	sp, sp, #16
   12178:	mov	r4, r0
   1217c:	movw	r0, #33258	; 0x81ea
   12180:	movt	r0, #1
   12184:	str	r0, [sp]
   12188:	mov	r5, #0
   1218c:	add	r3, sp, #8
   12190:	mov	r0, r4
   12194:	mov	r1, #0
   12198:	mov	r2, #10
   1219c:	bl	165fc <__assert_fail@plt+0x52ac>
   121a0:	cmp	r0, #1
   121a4:	beq	121c0 <__assert_fail@plt+0xe70>
   121a8:	ldr	r1, [sp, #8]
   121ac:	ldr	r2, [sp, #12]
   121b0:	cmp	r0, #0
   121b4:	bne	121d0 <__assert_fail@plt+0xe80>
   121b8:	cmp	r2, #0
   121bc:	beq	121d0 <__assert_fail@plt+0xe80>
   121c0:	str	r5, [sp, #12]
   121c4:	mvn	r0, #0
   121c8:	str	r0, [sp, #8]
   121cc:	b	121e0 <__assert_fail@plt+0xe90>
   121d0:	cmp	r0, #0
   121d4:	bne	121f0 <__assert_fail@plt+0xea0>
   121d8:	orrs	r0, r1, r2
   121dc:	beq	121f0 <__assert_fail@plt+0xea0>
   121e0:	ldr	r0, [sp, #8]
   121e4:	sub	r0, r0, #1
   121e8:	sub	sp, fp, #8
   121ec:	pop	{r4, r5, fp, pc}
   121f0:	movw	r1, #32597	; 0x7f55
   121f4:	movt	r1, #1
   121f8:	mov	r0, #0
   121fc:	mov	r2, #5
   12200:	bl	11134 <dcgettext@plt>
   12204:	mov	r5, r0
   12208:	mov	r0, r4
   1220c:	bl	151fc <__assert_fail@plt+0x3eac>
   12210:	mov	r3, r0
   12214:	mov	r0, #1
   12218:	mov	r1, #0
   1221c:	mov	r2, r5
   12220:	bl	111ac <error@plt>
   12224:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12228:	add	fp, sp, #24
   1222c:	sub	sp, sp, #8
   12230:	mov	r7, r0
   12234:	movw	r9, #33255	; 0x81e7
   12238:	movt	r9, #1
   1223c:	add	r5, sp, #4
   12240:	mov	r6, sp
   12244:	mov	r8, #0
   12248:	mov	r0, r7
   1224c:	mov	r1, r9
   12250:	bl	112fc <strpbrk@plt>
   12254:	cmp	r0, #0
   12258:	mov	r4, #0
   1225c:	strbne	r8, [r0], #1
   12260:	movne	r4, r0
   12264:	mov	r0, r7
   12268:	mov	r1, r5
   1226c:	mov	r2, r6
   12270:	bl	12a20 <__assert_fail@plt+0x16d0>
   12274:	ldr	r1, [sp]
   12278:	ldr	r0, [sp, #4]
   1227c:	bl	12ac4 <__assert_fail@plt+0x1774>
   12280:	cmp	r4, #0
   12284:	mov	r7, r4
   12288:	subeq	sp, fp, #24
   1228c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   12290:	b	12248 <__assert_fail@plt+0xef8>
   12294:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12298:	add	fp, sp, #24
   1229c:	mov	r5, r3
   122a0:	mov	r6, r1
   122a4:	mov	r4, r0
   122a8:	ldr	r0, [r3]
   122ac:	cmp	r0, #2
   122b0:	bne	12354 <__assert_fail@plt+0x1004>
   122b4:	ldr	r7, [r6]
   122b8:	clz	r0, r7
   122bc:	lsr	r0, r0, #5
   122c0:	movw	r8, #37280	; 0x91a0
   122c4:	movt	r8, #2
   122c8:	ldr	r1, [r6, r0, lsl #2]
   122cc:	cmp	r1, #3
   122d0:	bhi	1233c <__assert_fail@plt+0xfec>
   122d4:	ldr	r0, [r8, r0, lsl #2]
   122d8:	add	r3, pc, #0
   122dc:	ldr	pc, [r3, r1, lsl #2]
   122e0:	andeq	r2, r1, ip, lsl #7
   122e4:	strdeq	r2, [r1], -r0
   122e8:	andeq	r2, r1, r4, lsl r3
   122ec:	andeq	r2, r1, r8, lsr r3
   122f0:	ldr	r1, [r2]
   122f4:	sub	r1, r1, #1
   122f8:	str	r1, [r2]
   122fc:	bl	1216c <__assert_fail@plt+0xe1c>
   12300:	mov	r1, r0
   12304:	movw	r0, #37128	; 0x9108
   12308:	movt	r0, #2
   1230c:	bl	12110 <__assert_fail@plt+0xdc0>
   12310:	b	1233c <__assert_fail@plt+0xfec>
   12314:	ldr	r1, [r2, #4]
   12318:	sub	r1, r1, #1
   1231c:	str	r1, [r2, #4]
   12320:	bl	1216c <__assert_fail@plt+0xe1c>
   12324:	mov	r1, r0
   12328:	movw	r0, #37132	; 0x910c
   1232c:	movt	r0, #2
   12330:	bl	12110 <__assert_fail@plt+0xdc0>
   12334:	b	1233c <__assert_fail@plt+0xfec>
   12338:	bl	12224 <__assert_fail@plt+0xed4>
   1233c:	mov	r0, #1
   12340:	cmp	r7, #0
   12344:	ldrne	r1, [r6, #4]
   12348:	strne	r1, [r6]
   1234c:	ldrne	r1, [r8, #4]
   12350:	strne	r1, [r8]
   12354:	ldr	r1, [fp, #8]
   12358:	ldr	r2, [r1]
   1235c:	str	r2, [r6, r0, lsl #2]
   12360:	movw	r2, #37280	; 0x91a0
   12364:	movt	r2, #2
   12368:	str	r4, [r2, r0, lsl #2]
   1236c:	add	r0, r0, #1
   12370:	str	r0, [r5]
   12374:	ldr	r0, [r1]
   12378:	cmp	r0, #3
   1237c:	ldreq	r0, [fp, #12]
   12380:	moveq	r1, #3
   12384:	streq	r1, [r0]
   12388:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1238c:	movw	r1, #33424	; 0x8290
   12390:	movt	r1, #1
   12394:	mov	r0, #0
   12398:	mov	r2, #5
   1239c:	bl	11134 <dcgettext@plt>
   123a0:	mov	r5, r0
   123a4:	mov	r0, #4
   123a8:	mov	r1, r4
   123ac:	bl	15008 <__assert_fail@plt+0x3cb8>
   123b0:	mov	r3, r0
   123b4:	mov	r0, #0
   123b8:	mov	r1, #0
   123bc:	mov	r2, r5
   123c0:	bl	111ac <error@plt>
   123c4:	mov	r0, #1
   123c8:	bl	1144c <__assert_fail@plt+0xfc>
   123cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123d0:	add	fp, sp, #28
   123d4:	sub	sp, sp, #36	; 0x24
   123d8:	mov	r8, r1
   123dc:	mov	sl, r0
   123e0:	mov	r1, #2
   123e4:	bl	13548 <__assert_fail@plt+0x21f8>
   123e8:	mov	r0, r8
   123ec:	mov	r1, #2
   123f0:	bl	13548 <__assert_fail@plt+0x21f8>
   123f4:	add	r6, sp, #24
   123f8:	mov	r0, r6
   123fc:	bl	12b5c <__assert_fail@plt+0x180c>
   12400:	mov	r0, sl
   12404:	mov	r1, r6
   12408:	mov	r2, #1
   1240c:	bl	12b70 <__assert_fail@plt+0x1820>
   12410:	add	r6, sp, #12
   12414:	mov	r0, r6
   12418:	bl	12b5c <__assert_fail@plt+0x180c>
   1241c:	mov	r0, r8
   12420:	mov	r1, r6
   12424:	mov	r2, #2
   12428:	bl	12b70 <__assert_fail@plt+0x1820>
   1242c:	movw	r0, #37277	; 0x919d
   12430:	movt	r0, #2
   12434:	ldrb	r0, [r0]
   12438:	cmp	r0, #1
   1243c:	bne	12488 <__assert_fail@plt+0x1138>
   12440:	mov	r0, #0
   12444:	ldr	r1, [sp, #24]
   12448:	cmp	r1, #0
   1244c:	mov	r1, #0
   12450:	ldrne	r1, [sp, #32]
   12454:	ldrne	r1, [r1]
   12458:	ldrne	r1, [r1, #12]
   1245c:	movw	r2, #37312	; 0x91c0
   12460:	movt	r2, #2
   12464:	str	r1, [r2]
   12468:	ldr	r1, [sp, #12]
   1246c:	cmp	r1, #0
   12470:	ldrne	r0, [sp, #20]
   12474:	ldrne	r0, [r0]
   12478:	ldrne	r0, [r0, #12]
   1247c:	movw	r1, #37316	; 0x91c4
   12480:	movt	r1, #2
   12484:	str	r0, [r1]
   12488:	movw	r0, #37288	; 0x91a8
   1248c:	movt	r0, #2
   12490:	ldrb	r0, [r0]
   12494:	cmp	r0, #1
   12498:	bne	12540 <__assert_fail@plt+0x11f0>
   1249c:	ldr	r0, [sp, #24]
   124a0:	cmp	r0, #0
   124a4:	beq	124b4 <__assert_fail@plt+0x1164>
   124a8:	ldr	r0, [sp, #32]
   124ac:	ldr	r0, [r0]
   124b0:	b	124c8 <__assert_fail@plt+0x1178>
   124b4:	ldr	r0, [sp, #12]
   124b8:	cmp	r0, #0
   124bc:	beq	12540 <__assert_fail@plt+0x11f0>
   124c0:	movw	r0, #37320	; 0x91c8
   124c4:	movt	r0, #2
   124c8:	ldr	r1, [sp, #12]
   124cc:	cmp	r1, #0
   124d0:	beq	124e0 <__assert_fail@plt+0x1190>
   124d4:	ldr	r1, [sp, #20]
   124d8:	ldr	r1, [r1]
   124dc:	b	124e8 <__assert_fail@plt+0x1198>
   124e0:	movw	r1, #37320	; 0x91c8
   124e4:	movt	r1, #2
   124e8:	bl	12c0c <__assert_fail@plt+0x18bc>
   124ec:	movw	r0, #37344	; 0x91e0
   124f0:	movt	r0, #2
   124f4:	mov	r1, #0
   124f8:	str	r1, [r0]
   124fc:	str	r1, [r0, #4]
   12500:	ldr	r0, [sp, #24]
   12504:	cmp	r0, #0
   12508:	beq	12520 <__assert_fail@plt+0x11d0>
   1250c:	add	r1, sp, #24
   12510:	mov	r0, sl
   12514:	mov	r2, #1
   12518:	mov	r3, #1
   1251c:	bl	12d78 <__assert_fail@plt+0x1a28>
   12520:	ldr	r0, [sp, #12]
   12524:	cmp	r0, #0
   12528:	beq	12540 <__assert_fail@plt+0x11f0>
   1252c:	add	r1, sp, #12
   12530:	mov	r0, r8
   12534:	mov	r2, #1
   12538:	mov	r3, #2
   1253c:	bl	12d78 <__assert_fail@plt+0x1a28>
   12540:	ldr	r0, [sp, #24]
   12544:	cmp	r0, #0
   12548:	ldrne	r1, [sp, #12]
   1254c:	cmpne	r1, #0
   12550:	beq	127f8 <__assert_fail@plt+0x14a8>
   12554:	movw	r4, #37132	; 0x910c
   12558:	movt	r4, #2
   1255c:	movw	r7, #37128	; 0x9108
   12560:	movt	r7, #2
   12564:	add	r5, sp, #24
   12568:	mov	r9, #1
   1256c:	movw	r6, #37258	; 0x918a
   12570:	movt	r6, #2
   12574:	str	r8, [sp, #4]
   12578:	ldr	r3, [r4]
   1257c:	ldr	r2, [r7]
   12580:	ldr	r0, [sp, #20]
   12584:	ldr	r1, [r0]
   12588:	ldr	r0, [sp, #32]
   1258c:	ldr	r0, [r0]
   12590:	bl	12d8c <__assert_fail@plt+0x1a3c>
   12594:	cmn	r0, #1
   12598:	ble	12630 <__assert_fail@plt+0x12e0>
   1259c:	cmp	r0, #0
   125a0:	beq	125e0 <__assert_fail@plt+0x1290>
   125a4:	movw	r0, #37269	; 0x9195
   125a8:	movt	r0, #2
   125ac:	ldrb	r0, [r0]
   125b0:	cmp	r0, #1
   125b4:	bne	125cc <__assert_fail@plt+0x127c>
   125b8:	ldr	r0, [sp, #20]
   125bc:	ldr	r1, [r0]
   125c0:	movw	r0, #37320	; 0x91c8
   125c4:	movt	r0, #2
   125c8:	bl	12c0c <__assert_fail@plt+0x18bc>
   125cc:	mov	r0, r8
   125d0:	add	r1, sp, #12
   125d4:	mov	r2, #1
   125d8:	mov	r3, #2
   125dc:	b	12668 <__assert_fail@plt+0x1318>
   125e0:	mov	r0, sl
   125e4:	mov	r1, r5
   125e8:	mov	r2, #0
   125ec:	mov	r3, #1
   125f0:	bl	12d78 <__assert_fail@plt+0x1a28>
   125f4:	cmp	r0, #0
   125f8:	beq	12674 <__assert_fail@plt+0x1324>
   125fc:	ldr	r3, [r4]
   12600:	ldr	r2, [r7]
   12604:	ldr	r0, [sp, #20]
   12608:	ldr	r1, [r0]
   1260c:	ldr	r0, [sp, #24]
   12610:	ldr	r6, [sp, #32]
   12614:	add	r0, r6, r0, lsl #2
   12618:	ldr	r0, [r0, #-4]
   1261c:	bl	12d8c <__assert_fail@plt+0x1a3c>
   12620:	cmp	r0, #0
   12624:	beq	125e0 <__assert_fail@plt+0x1290>
   12628:	mov	r9, #0
   1262c:	b	12684 <__assert_fail@plt+0x1334>
   12630:	movw	r0, #37268	; 0x9194
   12634:	movt	r0, #2
   12638:	ldrb	r0, [r0]
   1263c:	cmp	r0, #1
   12640:	bne	12658 <__assert_fail@plt+0x1308>
   12644:	ldr	r0, [sp, #32]
   12648:	ldr	r0, [r0]
   1264c:	movw	r1, #37320	; 0x91c8
   12650:	movt	r1, #2
   12654:	bl	12c0c <__assert_fail@plt+0x18bc>
   12658:	mov	r0, sl
   1265c:	mov	r1, r5
   12660:	mov	r2, #1
   12664:	mov	r3, #1
   12668:	bl	12d78 <__assert_fail@plt+0x1a28>
   1266c:	strb	r9, [r6]
   12670:	b	127e4 <__assert_fail@plt+0x1494>
   12674:	ldr	r0, [sp, #24]
   12678:	add	r0, r0, #1
   1267c:	str	r0, [sp, #24]
   12680:	mov	r9, #1
   12684:	add	r5, sp, #12
   12688:	mov	r0, r8
   1268c:	mov	r1, r5
   12690:	mov	r2, #0
   12694:	mov	r3, #2
   12698:	bl	12d78 <__assert_fail@plt+0x1a28>
   1269c:	cmp	r0, #0
   126a0:	beq	126d8 <__assert_fail@plt+0x1388>
   126a4:	ldr	r3, [r4]
   126a8:	ldr	r2, [r7]
   126ac:	ldr	r0, [sp, #32]
   126b0:	ldr	r0, [r0]
   126b4:	ldr	r1, [sp, #12]
   126b8:	ldr	r6, [sp, #20]
   126bc:	add	r1, r6, r1, lsl #2
   126c0:	ldr	r1, [r1, #-4]
   126c4:	bl	12d8c <__assert_fail@plt+0x1a3c>
   126c8:	cmp	r0, #0
   126cc:	beq	12688 <__assert_fail@plt+0x1338>
   126d0:	mov	r6, #0
   126d4:	b	126e8 <__assert_fail@plt+0x1398>
   126d8:	ldr	r0, [sp, #12]
   126dc:	add	r0, r0, #1
   126e0:	str	r0, [sp, #12]
   126e4:	mov	r6, #1
   126e8:	mov	r5, r9
   126ec:	ldr	r0, [sp, #24]
   126f0:	cmp	r0, #1
   126f4:	movwne	r0, #37257	; 0x9189
   126f8:	movtne	r0, #2
   126fc:	ldrbne	r0, [r0]
   12700:	cmpne	r0, #0
   12704:	beq	12758 <__assert_fail@plt+0x1408>
   12708:	mov	r8, #0
   1270c:	ldr	r0, [sp, #12]
   12710:	cmp	r0, #1
   12714:	beq	12744 <__assert_fail@plt+0x13f4>
   12718:	mov	r9, #0
   1271c:	ldr	r0, [sp, #20]
   12720:	ldr	r1, [r0, r9, lsl #2]
   12724:	ldr	r0, [sp, #32]
   12728:	ldr	r0, [r0, r8, lsl #2]
   1272c:	bl	12c0c <__assert_fail@plt+0x18bc>
   12730:	add	r9, r9, #1
   12734:	ldr	r0, [sp, #12]
   12738:	sub	r0, r0, #1
   1273c:	cmp	r9, r0
   12740:	bcc	1271c <__assert_fail@plt+0x13cc>
   12744:	add	r8, r8, #1
   12748:	ldr	r0, [sp, #24]
   1274c:	sub	r0, r0, #1
   12750:	cmp	r8, r0
   12754:	bcc	1270c <__assert_fail@plt+0x13bc>
   12758:	mov	r0, #0
   1275c:	cmp	r5, #0
   12760:	mov	r1, #0
   12764:	bne	12798 <__assert_fail@plt+0x1448>
   12768:	ldr	r1, [sp, #24]
   1276c:	ldr	r2, [sp, #32]
   12770:	mvn	r3, #3
   12774:	add	r1, r3, r1, lsl #2
   12778:	ldr	r3, [r2, r1]
   1277c:	mov	r5, r6
   12780:	ldr	r6, [r2]
   12784:	str	r3, [r2]
   12788:	ldr	r2, [sp, #32]
   1278c:	str	r6, [r2, r1]
   12790:	mov	r6, r5
   12794:	mov	r1, #1
   12798:	str	r1, [sp, #24]
   1279c:	cmp	r6, #0
   127a0:	ldr	r8, [sp, #4]
   127a4:	add	r5, sp, #24
   127a8:	mov	r9, #1
   127ac:	movw	r6, #37258	; 0x918a
   127b0:	movt	r6, #2
   127b4:	bne	127e0 <__assert_fail@plt+0x1490>
   127b8:	ldr	r0, [sp, #12]
   127bc:	ldr	r1, [sp, #20]
   127c0:	mvn	r2, #3
   127c4:	add	r0, r2, r0, lsl #2
   127c8:	ldr	r2, [r1, r0]
   127cc:	ldr	r3, [r1]
   127d0:	str	r2, [r1]
   127d4:	ldr	r1, [sp, #20]
   127d8:	str	r3, [r1, r0]
   127dc:	mov	r0, #1
   127e0:	str	r0, [sp, #12]
   127e4:	ldr	r0, [sp, #24]
   127e8:	cmp	r0, #0
   127ec:	ldrne	r1, [sp, #12]
   127f0:	cmpne	r1, #0
   127f4:	bne	12578 <__assert_fail@plt+0x1228>
   127f8:	mov	r9, #0
   127fc:	str	r9, [sp, #8]
   12800:	movw	r1, #37264	; 0x9190
   12804:	movt	r1, #2
   12808:	ldr	r1, [r1]
   1280c:	cmp	r1, #2
   12810:	beq	12838 <__assert_fail@plt+0x14e8>
   12814:	movw	r1, #37259	; 0x918b
   12818:	movt	r1, #2
   1281c:	ldrb	r2, [r1]
   12820:	ldrb	r1, [r1, #1]
   12824:	clz	r1, r1
   12828:	lsr	r1, r1, #5
   1282c:	clz	r2, r2
   12830:	lsr	r2, r2, #5
   12834:	orr	r9, r2, r1
   12838:	cmp	r0, #0
   1283c:	movwne	r6, #37268	; 0x9194
   12840:	movtne	r6, #2
   12844:	ldrbne	r0, [r6]
   12848:	orrsne	r1, r9, r0
   1284c:	bne	12898 <__assert_fail@plt+0x1548>
   12850:	ldr	r0, [sp, #12]
   12854:	cmp	r0, #0
   12858:	movwne	r7, #37269	; 0x9195
   1285c:	movtne	r7, #2
   12860:	ldrbne	r0, [r7]
   12864:	orrsne	r1, r9, r0
   12868:	bne	12940 <__assert_fail@plt+0x15f0>
   1286c:	ldr	r4, [sp, #8]
   12870:	mov	r0, r4
   12874:	bl	129e8 <__assert_fail@plt+0x1698>
   12878:	mov	r0, r4
   1287c:	bl	13740 <__assert_fail@plt+0x23f0>
   12880:	add	r0, sp, #24
   12884:	bl	12fa4 <__assert_fail@plt+0x1c54>
   12888:	add	r0, sp, #12
   1288c:	bl	12fa4 <__assert_fail@plt+0x1c54>
   12890:	sub	sp, fp, #28
   12894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12898:	cmp	r0, #0
   1289c:	beq	128b4 <__assert_fail@plt+0x1564>
   128a0:	ldr	r0, [sp, #32]
   128a4:	ldr	r0, [r0]
   128a8:	movw	r1, #37320	; 0x91c8
   128ac:	movt	r1, #2
   128b0:	bl	12c0c <__assert_fail@plt+0x18bc>
   128b4:	ldr	r0, [sp, #12]
   128b8:	cmp	r0, #0
   128bc:	movwne	r0, #37258	; 0x918a
   128c0:	movtne	r0, #2
   128c4:	movne	r1, #1
   128c8:	strbne	r1, [r0]
   128cc:	add	r1, sp, #8
   128d0:	mov	r0, sl
   128d4:	mov	r2, #1
   128d8:	bl	12e74 <__assert_fail@plt+0x1b24>
   128dc:	cmp	r0, #0
   128e0:	beq	12850 <__assert_fail@plt+0x1500>
   128e4:	movw	r5, #37320	; 0x91c8
   128e8:	movt	r5, #2
   128ec:	movw	r4, #37259	; 0x918b
   128f0:	movt	r4, #2
   128f4:	add	r7, sp, #8
   128f8:	ldrb	r0, [r6]
   128fc:	cmp	r0, #1
   12900:	bne	12910 <__assert_fail@plt+0x15c0>
   12904:	ldr	r0, [sp, #8]
   12908:	mov	r1, r5
   1290c:	bl	12c0c <__assert_fail@plt+0x18bc>
   12910:	ldrb	r0, [r4]
   12914:	cmp	r0, #0
   12918:	ldrbne	r0, [r6]
   1291c:	cmpne	r0, #1
   12920:	bne	12850 <__assert_fail@plt+0x1500>
   12924:	mov	r0, sl
   12928:	mov	r1, r7
   1292c:	mov	r2, #1
   12930:	bl	12e74 <__assert_fail@plt+0x1b24>
   12934:	cmp	r0, #0
   12938:	bne	128f8 <__assert_fail@plt+0x15a8>
   1293c:	b	12850 <__assert_fail@plt+0x1500>
   12940:	cmp	r0, #0
   12944:	beq	1295c <__assert_fail@plt+0x160c>
   12948:	ldr	r0, [sp, #20]
   1294c:	ldr	r1, [r0]
   12950:	movw	r0, #37320	; 0x91c8
   12954:	movt	r0, #2
   12958:	bl	12c0c <__assert_fail@plt+0x18bc>
   1295c:	ldr	r0, [sp, #24]
   12960:	cmp	r0, #0
   12964:	movwne	r0, #37258	; 0x918a
   12968:	movtne	r0, #2
   1296c:	movne	r1, #1
   12970:	strbne	r1, [r0]
   12974:	add	r1, sp, #8
   12978:	mov	r0, r8
   1297c:	mov	r2, #2
   12980:	bl	12e74 <__assert_fail@plt+0x1b24>
   12984:	cmp	r0, #0
   12988:	beq	1286c <__assert_fail@plt+0x151c>
   1298c:	movw	r5, #37320	; 0x91c8
   12990:	movt	r5, #2
   12994:	movw	r4, #37259	; 0x918b
   12998:	movt	r4, #2
   1299c:	add	r6, sp, #8
   129a0:	ldrb	r0, [r7]
   129a4:	cmp	r0, #1
   129a8:	bne	129b8 <__assert_fail@plt+0x1668>
   129ac:	ldr	r1, [sp, #8]
   129b0:	mov	r0, r5
   129b4:	bl	12c0c <__assert_fail@plt+0x18bc>
   129b8:	ldrb	r0, [r4, #1]
   129bc:	cmp	r0, #0
   129c0:	ldrbne	r0, [r7]
   129c4:	cmpne	r0, #1
   129c8:	bne	1286c <__assert_fail@plt+0x151c>
   129cc:	mov	r0, r8
   129d0:	mov	r1, r6
   129d4:	mov	r2, #2
   129d8:	bl	12e74 <__assert_fail@plt+0x1b24>
   129dc:	cmp	r0, #0
   129e0:	bne	129a0 <__assert_fail@plt+0x1650>
   129e4:	b	1286c <__assert_fail@plt+0x151c>
   129e8:	cmp	r0, #0
   129ec:	bxeq	lr
   129f0:	push	{r4, r5, fp, lr}
   129f4:	add	fp, sp, #8
   129f8:	mov	r4, r0
   129fc:	ldr	r0, [r0, #20]
   12a00:	bl	13740 <__assert_fail@plt+0x23f0>
   12a04:	mov	r5, #0
   12a08:	str	r5, [r4, #20]
   12a0c:	ldr	r0, [r4, #8]
   12a10:	bl	13740 <__assert_fail@plt+0x23f0>
   12a14:	str	r5, [r4, #8]
   12a18:	pop	{r4, r5, fp, lr}
   12a1c:	bx	lr
   12a20:	push	{r4, r5, fp, lr}
   12a24:	add	fp, sp, #8
   12a28:	mov	r5, r2
   12a2c:	mov	r4, r0
   12a30:	ldrb	r0, [r0]
   12a34:	sub	r2, r0, #49	; 0x31
   12a38:	cmp	r2, #2
   12a3c:	bcs	12a64 <__assert_fail@plt+0x1714>
   12a40:	ldrb	r2, [r4, #1]
   12a44:	cmp	r2, #46	; 0x2e
   12a48:	bne	12a84 <__assert_fail@plt+0x1734>
   12a4c:	sub	r0, r0, #48	; 0x30
   12a50:	str	r0, [r1]
   12a54:	add	r0, r4, #2
   12a58:	bl	1216c <__assert_fail@plt+0xe1c>
   12a5c:	str	r0, [r5]
   12a60:	pop	{r4, r5, fp, pc}
   12a64:	cmp	r0, #48	; 0x30
   12a68:	bne	12ab8 <__assert_fail@plt+0x1768>
   12a6c:	ldrb	r0, [r4, #1]
   12a70:	cmp	r0, #0
   12a74:	moveq	r0, #0
   12a78:	streq	r0, [r1]
   12a7c:	streq	r0, [r5]
   12a80:	popeq	{r4, r5, fp, pc}
   12a84:	movw	r1, #33259	; 0x81eb
   12a88:	movt	r1, #1
   12a8c:	mov	r0, #0
   12a90:	mov	r2, #5
   12a94:	bl	11134 <dcgettext@plt>
   12a98:	mov	r5, r0
   12a9c:	mov	r0, r4
   12aa0:	bl	151fc <__assert_fail@plt+0x3eac>
   12aa4:	mov	r3, r0
   12aa8:	mov	r0, #1
   12aac:	mov	r1, #0
   12ab0:	mov	r2, r5
   12ab4:	bl	111ac <error@plt>
   12ab8:	movw	r1, #33287	; 0x8207
   12abc:	movt	r1, #1
   12ac0:	b	12a8c <__assert_fail@plt+0x173c>
   12ac4:	push	{r4, r5, fp, lr}
   12ac8:	add	fp, sp, #8
   12acc:	cmp	r0, #3
   12ad0:	bcs	12b1c <__assert_fail@plt+0x17cc>
   12ad4:	mov	r4, r1
   12ad8:	mov	r5, r0
   12adc:	cmp	r0, #0
   12ae0:	bne	12aec <__assert_fail@plt+0x179c>
   12ae4:	cmp	r4, #0
   12ae8:	bne	12b3c <__assert_fail@plt+0x17ec>
   12aec:	mov	r0, #12
   12af0:	bl	15b88 <__assert_fail@plt+0x4838>
   12af4:	mov	r1, #0
   12af8:	str	r5, [r0]
   12afc:	str	r4, [r0, #4]
   12b00:	str	r1, [r0, #8]
   12b04:	movw	r1, #37140	; 0x9114
   12b08:	movt	r1, #2
   12b0c:	ldr	r2, [r1]
   12b10:	str	r0, [r2, #8]
   12b14:	str	r0, [r1]
   12b18:	pop	{r4, r5, fp, pc}
   12b1c:	movw	r0, #33325	; 0x822d
   12b20:	movt	r0, #1
   12b24:	movw	r1, #33361	; 0x8251
   12b28:	movt	r1, #1
   12b2c:	movw	r3, #33372	; 0x825c
   12b30:	movt	r3, #1
   12b34:	movw	r2, #819	; 0x333
   12b38:	bl	11350 <__assert_fail@plt>
   12b3c:	movw	r0, #33400	; 0x8278
   12b40:	movt	r0, #1
   12b44:	movw	r1, #33361	; 0x8251
   12b48:	movt	r1, #1
   12b4c:	movw	r3, #33372	; 0x825c
   12b50:	movt	r3, #1
   12b54:	mov	r2, #820	; 0x334
   12b58:	bl	11350 <__assert_fail@plt>
   12b5c:	mov	r1, #0
   12b60:	str	r1, [r0]
   12b64:	str	r1, [r0, #4]
   12b68:	str	r1, [r0, #8]
   12b6c:	bx	lr
   12b70:	push	{r4, r5, r6, r7, fp, lr}
   12b74:	add	fp, sp, #16
   12b78:	mov	r5, r2
   12b7c:	mov	r4, r1
   12b80:	mov	r6, r0
   12b84:	mov	r7, r1
   12b88:	ldr	r0, [r7, #4]!
   12b8c:	ldr	r1, [r1]
   12b90:	cmp	r1, r0
   12b94:	bne	12bd4 <__assert_fail@plt+0x1884>
   12b98:	ldr	r0, [r4, #8]
   12b9c:	mov	r1, r7
   12ba0:	mov	r2, #4
   12ba4:	bl	15c58 <__assert_fail@plt+0x4908>
   12ba8:	str	r0, [r4, #8]
   12bac:	ldm	r4, {r0, r1}
   12bb0:	cmp	r0, r1
   12bb4:	bcs	12bd4 <__assert_fail@plt+0x1884>
   12bb8:	ldr	r1, [r7]
   12bbc:	mov	r2, #0
   12bc0:	ldr	r3, [r4, #8]
   12bc4:	str	r2, [r3, r0, lsl #2]
   12bc8:	add	r0, r0, #1
   12bcc:	cmp	r0, r1
   12bd0:	bcc	12bc0 <__assert_fail@plt+0x1870>
   12bd4:	ldr	r0, [r4]
   12bd8:	ldr	r1, [r4, #8]
   12bdc:	add	r1, r1, r0, lsl #2
   12be0:	mov	r0, r6
   12be4:	mov	r2, r5
   12be8:	bl	12e74 <__assert_fail@plt+0x1b24>
   12bec:	mov	r1, r0
   12bf0:	mov	r0, #0
   12bf4:	cmp	r1, #0
   12bf8:	ldrne	r0, [r4]
   12bfc:	addne	r0, r0, #1
   12c00:	strne	r0, [r4]
   12c04:	movne	r0, #1
   12c08:	pop	{r4, r5, r6, r7, fp, pc}
   12c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c10:	add	fp, sp, #28
   12c14:	sub	sp, sp, #4
   12c18:	mov	r8, r1
   12c1c:	mov	sl, r0
   12c20:	movw	r0, #37300	; 0x91b4
   12c24:	movt	r0, #2
   12c28:	ldr	r9, [r0, #8]
   12c2c:	cmp	r9, #0
   12c30:	beq	12cf0 <__assert_fail@plt+0x19a0>
   12c34:	movw	r0, #37136	; 0x9110
   12c38:	movt	r0, #2
   12c3c:	ldr	r5, [r0]
   12c40:	movw	r0, #37320	; 0x91c8
   12c44:	movt	r0, #2
   12c48:	cmp	sl, r0
   12c4c:	mov	r7, sl
   12c50:	moveq	r7, r8
   12c54:	ldr	r2, [r9]
   12c58:	cmp	r2, #1
   12c5c:	mov	r1, r8
   12c60:	moveq	r1, sl
   12c64:	cmp	r2, #0
   12c68:	moveq	r1, r7
   12c6c:	movw	r3, #37132	; 0x910c
   12c70:	movt	r3, #2
   12c74:	movw	r4, #37128	; 0x9108
   12c78:	movt	r4, #2
   12c7c:	cmp	sl, r0
   12c80:	moveq	r4, r3
   12c84:	cmp	r2, #0
   12c88:	mov	r0, r4
   12c8c:	addne	r0, r9, #4
   12c90:	ldr	r0, [r0]
   12c94:	bl	12ff4 <__assert_fail@plt+0x1ca4>
   12c98:	uxtb	r6, r5
   12c9c:	cmp	r5, #0
   12ca0:	movwlt	r6, #32
   12ca4:	ldr	r5, [r9, #8]
   12ca8:	cmp	r5, #0
   12cac:	beq	12d54 <__assert_fail@plt+0x1a04>
   12cb0:	mov	r0, r6
   12cb4:	bl	11344 <putchar_unlocked@plt>
   12cb8:	ldr	r0, [r5]
   12cbc:	cmp	r0, #1
   12cc0:	mov	r1, r8
   12cc4:	moveq	r1, sl
   12cc8:	cmp	r0, #0
   12ccc:	moveq	r1, r7
   12cd0:	mov	r0, r4
   12cd4:	addne	r0, r5, #4
   12cd8:	ldr	r0, [r0]
   12cdc:	bl	12ff4 <__assert_fail@plt+0x1ca4>
   12ce0:	ldr	r5, [r5, #8]
   12ce4:	cmp	r5, #0
   12ce8:	bne	12cb0 <__assert_fail@plt+0x1960>
   12cec:	b	12d54 <__assert_fail@plt+0x1a04>
   12cf0:	movw	r0, #37320	; 0x91c8
   12cf4:	movt	r0, #2
   12cf8:	movw	r4, #37132	; 0x910c
   12cfc:	movt	r4, #2
   12d00:	movw	r5, #37128	; 0x9108
   12d04:	movt	r5, #2
   12d08:	cmp	sl, r0
   12d0c:	mov	r0, r5
   12d10:	moveq	r0, r4
   12d14:	ldr	r0, [r0]
   12d18:	mov	r1, sl
   12d1c:	moveq	r1, r8
   12d20:	bl	12ff4 <__assert_fail@plt+0x1ca4>
   12d24:	movw	r0, #37312	; 0x91c0
   12d28:	movt	r0, #2
   12d2c:	ldr	r2, [r0]
   12d30:	ldr	r1, [r5]
   12d34:	mov	r0, sl
   12d38:	bl	13050 <__assert_fail@plt+0x1d00>
   12d3c:	movw	r0, #37316	; 0x91c4
   12d40:	movt	r0, #2
   12d44:	ldr	r2, [r0]
   12d48:	ldr	r1, [r4]
   12d4c:	mov	r0, r8
   12d50:	bl	13050 <__assert_fail@plt+0x1d00>
   12d54:	movw	r0, #37278	; 0x919e
   12d58:	movt	r0, #2
   12d5c:	ldrb	r1, [r0]
   12d60:	mov	r0, #10
   12d64:	cmp	r1, #0
   12d68:	movwne	r0, #0
   12d6c:	sub	sp, fp, #28
   12d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d74:	b	11344 <putchar_unlocked@plt>
   12d78:	cmp	r2, #0
   12d7c:	movne	r2, #0
   12d80:	strne	r2, [r1]
   12d84:	mov	r2, r3
   12d88:	b	12b70 <__assert_fail@plt+0x1820>
   12d8c:	push	{r4, r5, fp, lr}
   12d90:	add	fp, sp, #8
   12d94:	mov	r5, r0
   12d98:	ldr	r0, [r0, #12]
   12d9c:	mov	ip, #0
   12da0:	cmp	r0, r2
   12da4:	mov	r0, #0
   12da8:	mov	r4, #0
   12dac:	ldrhi	r5, [r5, #20]
   12db0:	ldrhi	r0, [r5, r2, lsl #3]!
   12db4:	ldrhi	r4, [r5, #4]
   12db8:	ldr	r2, [r1, #12]
   12dbc:	cmp	r2, r3
   12dc0:	mov	r5, #0
   12dc4:	ldrhi	r1, [r1, #20]
   12dc8:	ldrhi	ip, [r1, r3, lsl #3]!
   12dcc:	ldrhi	r5, [r1, #4]
   12dd0:	cmp	r4, #0
   12dd4:	beq	12e10 <__assert_fail@plt+0x1ac0>
   12dd8:	cmp	r5, #0
   12ddc:	moveq	r0, #1
   12de0:	popeq	{r4, r5, fp, pc}
   12de4:	movw	r1, #37276	; 0x919c
   12de8:	movt	r1, #2
   12dec:	ldrb	r1, [r1]
   12df0:	cmp	r1, #1
   12df4:	bne	12e20 <__assert_fail@plt+0x1ad0>
   12df8:	cmp	r4, r5
   12dfc:	mov	r2, r5
   12e00:	movcc	r2, r4
   12e04:	mov	r1, ip
   12e08:	bl	1396c <__assert_fail@plt+0x261c>
   12e0c:	b	12e5c <__assert_fail@plt+0x1b0c>
   12e10:	cmp	r5, #0
   12e14:	mvnne	r5, #0
   12e18:	mov	r0, r5
   12e1c:	pop	{r4, r5, fp, pc}
   12e20:	movw	r1, #37256	; 0x9188
   12e24:	movt	r1, #2
   12e28:	ldrb	r1, [r1]
   12e2c:	cmp	r1, #0
   12e30:	beq	12e48 <__assert_fail@plt+0x1af8>
   12e34:	mov	r1, r4
   12e38:	mov	r2, ip
   12e3c:	mov	r3, r5
   12e40:	pop	{r4, r5, fp, lr}
   12e44:	b	15f7c <__assert_fail@plt+0x4c2c>
   12e48:	cmp	r4, r5
   12e4c:	mov	r2, r5
   12e50:	movcc	r2, r4
   12e54:	mov	r1, ip
   12e58:	bl	1111c <memcmp@plt>
   12e5c:	cmp	r0, #0
   12e60:	popne	{r4, r5, fp, pc}
   12e64:	subs	r0, r4, r5
   12e68:	movwne	r0, #1
   12e6c:	mvncc	r0, #0
   12e70:	pop	{r4, r5, fp, pc}
   12e74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12e78:	add	fp, sp, #24
   12e7c:	mov	r4, r2
   12e80:	mov	r6, r0
   12e84:	sub	r7, r2, #1
   12e88:	movw	r8, #37344	; 0x91e0
   12e8c:	movt	r8, #2
   12e90:	ldr	r2, [r8, r7, lsl #2]
   12e94:	ldr	r0, [r1]
   12e98:	cmp	r0, r2
   12e9c:	beq	12eb8 <__assert_fail@plt+0x1b68>
   12ea0:	mov	r5, r0
   12ea4:	cmp	r5, #0
   12ea8:	beq	12ed4 <__assert_fail@plt+0x1b84>
   12eac:	mov	r0, r5
   12eb0:	bl	13100 <__assert_fail@plt+0x1db0>
   12eb4:	b	12ee0 <__assert_fail@plt+0x1b90>
   12eb8:	movw	r2, #37292	; 0x91ac
   12ebc:	movt	r2, #2
   12ec0:	ldr	r5, [r2, r7, lsl #2]
   12ec4:	str	r0, [r2, r7, lsl #2]
   12ec8:	str	r5, [r1]
   12ecc:	cmp	r5, #0
   12ed0:	bne	12eac <__assert_fail@plt+0x1b5c>
   12ed4:	mov	r0, r1
   12ed8:	bl	1310c <__assert_fail@plt+0x1dbc>
   12edc:	mov	r5, r0
   12ee0:	movw	r0, #37278	; 0x919e
   12ee4:	movt	r0, #2
   12ee8:	ldrb	r0, [r0]
   12eec:	mov	r2, #10
   12ef0:	cmp	r0, #0
   12ef4:	movwne	r2, #0
   12ef8:	mov	r0, r5
   12efc:	mov	r1, r6
   12f00:	bl	1388c <__assert_fail@plt+0x253c>
   12f04:	cmp	r0, #0
   12f08:	beq	12f58 <__assert_fail@plt+0x1c08>
   12f0c:	movw	r0, #37352	; 0x91e8
   12f10:	movt	r0, #2
   12f14:	ldr	r1, [r0, r7, lsl #3]!
   12f18:	adds	r1, r1, #1
   12f1c:	str	r1, [r0]
   12f20:	ldr	r1, [r0, #4]
   12f24:	adc	r1, r1, #0
   12f28:	str	r1, [r0, #4]
   12f2c:	mov	r0, r5
   12f30:	bl	1312c <__assert_fail@plt+0x1ddc>
   12f34:	ldr	r0, [r8, r7, lsl #2]
   12f38:	cmp	r0, #0
   12f3c:	beq	12f4c <__assert_fail@plt+0x1bfc>
   12f40:	mov	r1, r5
   12f44:	mov	r2, r4
   12f48:	bl	1328c <__assert_fail@plt+0x1f3c>
   12f4c:	str	r5, [r8, r7, lsl #2]
   12f50:	mov	r0, #1
   12f54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f58:	mov	r0, r6
   12f5c:	bl	11194 <ferror_unlocked@plt>
   12f60:	cmp	r0, #0
   12f64:	bne	12f78 <__assert_fail@plt+0x1c28>
   12f68:	mov	r0, r5
   12f6c:	bl	129e8 <__assert_fail@plt+0x1698>
   12f70:	mov	r0, #0
   12f74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f78:	bl	11248 <__errno_location@plt>
   12f7c:	ldr	r4, [r0]
   12f80:	movw	r1, #33441	; 0x82a1
   12f84:	movt	r1, #1
   12f88:	mov	r0, #0
   12f8c:	mov	r2, #5
   12f90:	bl	11134 <dcgettext@plt>
   12f94:	mov	r2, r0
   12f98:	mov	r0, #1
   12f9c:	mov	r1, r4
   12fa0:	bl	111ac <error@plt>
   12fa4:	push	{r4, r5, fp, lr}
   12fa8:	add	fp, sp, #8
   12fac:	mov	r4, r0
   12fb0:	ldr	r0, [r0, #4]
   12fb4:	cmp	r0, #0
   12fb8:	beq	12fe8 <__assert_fail@plt+0x1c98>
   12fbc:	mov	r5, #0
   12fc0:	ldr	r0, [r4, #8]
   12fc4:	ldr	r0, [r0, r5, lsl #2]
   12fc8:	bl	129e8 <__assert_fail@plt+0x1698>
   12fcc:	ldr	r0, [r4, #8]
   12fd0:	ldr	r0, [r0, r5, lsl #2]
   12fd4:	bl	13740 <__assert_fail@plt+0x23f0>
   12fd8:	add	r5, r5, #1
   12fdc:	ldr	r0, [r4, #4]
   12fe0:	cmp	r5, r0
   12fe4:	bcc	12fc0 <__assert_fail@plt+0x1c70>
   12fe8:	ldr	r0, [r4, #8]
   12fec:	pop	{r4, r5, fp, lr}
   12ff0:	b	13740 <__assert_fail@plt+0x23f0>
   12ff4:	ldr	r2, [r1, #12]
   12ff8:	cmp	r2, r0
   12ffc:	bls	1302c <__assert_fail@plt+0x1cdc>
   13000:	ldr	r1, [r1, #20]
   13004:	add	r2, r1, r0, lsl #3
   13008:	ldr	r2, [r2, #4]
   1300c:	cmp	r2, #0
   13010:	beq	1302c <__assert_fail@plt+0x1cdc>
   13014:	ldr	r0, [r1, r0, lsl #3]
   13018:	movw	r1, #37244	; 0x917c
   1301c:	movt	r1, #2
   13020:	ldr	r3, [r1]
   13024:	mov	r1, #1
   13028:	b	11110 <fwrite_unlocked@plt>
   1302c:	movw	r0, #37272	; 0x9198
   13030:	movt	r0, #2
   13034:	ldr	r0, [r0]
   13038:	cmp	r0, #0
   1303c:	bxeq	lr
   13040:	movw	r1, #37244	; 0x917c
   13044:	movt	r1, #2
   13048:	ldr	r1, [r1]
   1304c:	b	110a4 <fputs_unlocked@plt>
   13050:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13054:	add	fp, sp, #24
   13058:	mov	r4, r2
   1305c:	mov	r8, r1
   13060:	mov	r5, r0
   13064:	movw	r0, #37277	; 0x919d
   13068:	movt	r0, #2
   1306c:	ldrb	r0, [r0]
   13070:	cmp	r0, #0
   13074:	ldreq	r4, [r5, #12]
   13078:	movw	r0, #37136	; 0x9110
   1307c:	movt	r0, #2
   13080:	ldr	r9, [r0]
   13084:	cmp	r9, #0
   13088:	movwlt	r9, #32
   1308c:	cmp	r8, #0
   13090:	cmpne	r4, #0
   13094:	bne	130cc <__assert_fail@plt+0x1d7c>
   13098:	add	r6, r8, #1
   1309c:	cmp	r6, r4
   130a0:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   130a4:	uxtb	r7, r9
   130a8:	mov	r0, r7
   130ac:	bl	11344 <putchar_unlocked@plt>
   130b0:	mov	r0, r6
   130b4:	mov	r1, r5
   130b8:	bl	12ff4 <__assert_fail@plt+0x1ca4>
   130bc:	add	r6, r6, #1
   130c0:	cmp	r4, r6
   130c4:	bne	130a8 <__assert_fail@plt+0x1d58>
   130c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   130cc:	uxtb	r7, r9
   130d0:	mov	r6, #0
   130d4:	mov	r0, r7
   130d8:	bl	11344 <putchar_unlocked@plt>
   130dc:	mov	r0, r6
   130e0:	mov	r1, r5
   130e4:	bl	12ff4 <__assert_fail@plt+0x1ca4>
   130e8:	add	r6, r6, #1
   130ec:	cmp	r6, r8
   130f0:	bcs	13098 <__assert_fail@plt+0x1d48>
   130f4:	cmp	r6, r4
   130f8:	bcc	130d4 <__assert_fail@plt+0x1d84>
   130fc:	b	13098 <__assert_fail@plt+0x1d48>
   13100:	mov	r1, #0
   13104:	str	r1, [r0, #12]
   13108:	bx	lr
   1310c:	push	{r4, sl, fp, lr}
   13110:	add	fp, sp, #8
   13114:	mov	r4, r0
   13118:	mov	r0, #1
   1311c:	mov	r1, #24
   13120:	bl	15e4c <__assert_fail@plt+0x4afc>
   13124:	str	r0, [r4]
   13128:	pop	{r4, sl, fp, pc}
   1312c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13130:	add	fp, sp, #24
   13134:	mov	r4, r0
   13138:	ldr	r0, [r0, #4]
   1313c:	ldr	r5, [r4, #8]
   13140:	add	r6, r5, r0
   13144:	sub	r8, r6, #1
   13148:	cmp	r5, r8
   1314c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   13150:	movw	r7, #37136	; 0x9110
   13154:	movt	r7, #2
   13158:	ldr	r1, [r7]
   1315c:	cmp	r1, #0
   13160:	blt	131bc <__assert_fail@plt+0x1e6c>
   13164:	cmp	r1, #10
   13168:	beq	131bc <__assert_fail@plt+0x1e6c>
   1316c:	sub	r2, r8, r5
   13170:	ldr	r1, [r7]
   13174:	mov	r0, r5
   13178:	bl	1129c <memchr@plt>
   1317c:	cmp	r0, #0
   13180:	beq	131c4 <__assert_fail@plt+0x1e74>
   13184:	mov	r6, r0
   13188:	sub	r2, r6, r5
   1318c:	mov	r0, r4
   13190:	mov	r1, r5
   13194:	bl	133b8 <__assert_fail@plt+0x2068>
   13198:	add	r5, r6, #1
   1319c:	sub	r2, r8, r5
   131a0:	ldr	r1, [r7]
   131a4:	mov	r0, r5
   131a8:	bl	1129c <memchr@plt>
   131ac:	mov	r6, r0
   131b0:	cmp	r0, #0
   131b4:	bne	13188 <__assert_fail@plt+0x1e38>
   131b8:	b	131c4 <__assert_fail@plt+0x1e74>
   131bc:	cmn	r1, #1
   131c0:	ble	131d8 <__assert_fail@plt+0x1e88>
   131c4:	sub	r2, r8, r5
   131c8:	mov	r0, r4
   131cc:	mov	r1, r5
   131d0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   131d4:	b	133b8 <__assert_fail@plt+0x2068>
   131d8:	sub	r7, r0, #1
   131dc:	ldrb	r0, [r5]
   131e0:	bl	1340c <__assert_fail@plt+0x20bc>
   131e4:	cmp	r0, #0
   131e8:	beq	131fc <__assert_fail@plt+0x1eac>
   131ec:	subs	r7, r7, #1
   131f0:	add	r5, r5, #1
   131f4:	bne	131dc <__assert_fail@plt+0x1e8c>
   131f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131fc:	sub	r9, r6, #2
   13200:	add	r1, r5, #1
   13204:	mov	r0, r5
   13208:	cmp	r9, r0
   1320c:	beq	13280 <__assert_fail@plt+0x1f30>
   13210:	mov	r7, r1
   13214:	add	r6, r0, #1
   13218:	ldrb	r0, [r0, #1]
   1321c:	bl	1340c <__assert_fail@plt+0x20bc>
   13220:	add	r1, r7, #1
   13224:	cmp	r0, #0
   13228:	mov	r0, r6
   1322c:	beq	13208 <__assert_fail@plt+0x1eb8>
   13230:	sub	r2, r6, r5
   13234:	mov	r0, r4
   13238:	mov	r1, r5
   1323c:	bl	133b8 <__assert_fail@plt+0x2068>
   13240:	cmp	r9, r6
   13244:	beq	13270 <__assert_fail@plt+0x1f20>
   13248:	ldrb	r0, [r7, #1]
   1324c:	bl	1340c <__assert_fail@plt+0x20bc>
   13250:	cmp	r0, #0
   13254:	addne	r7, r7, #1
   13258:	cmpne	r9, r7
   1325c:	bne	13248 <__assert_fail@plt+0x1ef8>
   13260:	add	r5, r7, #1
   13264:	cmp	r5, r8
   13268:	bne	13200 <__assert_fail@plt+0x1eb0>
   1326c:	b	131c4 <__assert_fail@plt+0x1e74>
   13270:	add	r5, r6, #1
   13274:	cmp	r5, r8
   13278:	bne	13200 <__assert_fail@plt+0x1eb0>
   1327c:	b	131c4 <__assert_fail@plt+0x1e74>
   13280:	add	r0, r0, #1
   13284:	sub	r2, r0, r5
   13288:	b	131c8 <__assert_fail@plt+0x1e78>
   1328c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13290:	add	fp, sp, #24
   13294:	sub	sp, sp, #16
   13298:	mov	r4, r1
   1329c:	movw	r7, #37264	; 0x9190
   132a0:	movt	r7, #2
   132a4:	ldr	r1, [r7]
   132a8:	cmp	r1, #1
   132ac:	beq	132cc <__assert_fail@plt+0x1f7c>
   132b0:	cmp	r1, #2
   132b4:	beq	133b0 <__assert_fail@plt+0x2060>
   132b8:	movw	r1, #37258	; 0x918a
   132bc:	movt	r1, #2
   132c0:	ldrb	r1, [r1]
   132c4:	cmp	r1, #1
   132c8:	bne	133b0 <__assert_fail@plt+0x2060>
   132cc:	sub	r5, r2, #1
   132d0:	movw	r6, #37259	; 0x918b
   132d4:	movt	r6, #2
   132d8:	ldrb	r1, [r6, r5]
   132dc:	cmp	r1, #0
   132e0:	bne	133b0 <__assert_fail@plt+0x2060>
   132e4:	movw	r1, #37128	; 0x9108
   132e8:	movt	r1, #2
   132ec:	movw	r3, #37132	; 0x910c
   132f0:	movt	r3, #2
   132f4:	cmp	r2, #1
   132f8:	moveq	r3, r1
   132fc:	ldr	r2, [r3]
   13300:	mov	r1, r4
   13304:	mov	r3, r2
   13308:	bl	12d8c <__assert_fail@plt+0x1a3c>
   1330c:	cmp	r0, #1
   13310:	blt	133b0 <__assert_fail@plt+0x2060>
   13314:	ldr	r0, [r4, #4]
   13318:	cmp	r0, #0
   1331c:	beq	13344 <__assert_fail@plt+0x1ff4>
   13320:	ldr	r1, [r4, #8]
   13324:	sub	r2, r0, #1
   13328:	ldrb	r1, [r1, r2]
   1332c:	cmp	r1, #10
   13330:	moveq	r0, r2
   13334:	mvn	r8, #-2147483648	; 0x80000000
   13338:	cmn	r0, #-2147483646	; 0x80000002
   1333c:	movls	r8, r0
   13340:	b	1334c <__assert_fail@plt+0x1ffc>
   13344:	mov	r0, #0
   13348:	mov	r8, r0
   1334c:	ldr	r7, [r7]
   13350:	movw	r1, #33452	; 0x82ac
   13354:	movt	r1, #1
   13358:	mov	r0, #0
   1335c:	mov	r2, #5
   13360:	bl	11134 <dcgettext@plt>
   13364:	mov	r2, r0
   13368:	movw	r0, #37280	; 0x91a0
   1336c:	movt	r0, #2
   13370:	ldr	r3, [r0, r5, lsl #2]
   13374:	movw	r0, #37352	; 0x91e8
   13378:	movt	r0, #2
   1337c:	ldr	r1, [r0, r5, lsl #3]!
   13380:	ldr	r0, [r0, #4]
   13384:	ldr	r4, [r4, #8]
   13388:	str	r1, [sp]
   1338c:	stmib	sp, {r0, r8}
   13390:	str	r4, [sp, #12]
   13394:	sub	r0, r7, #1
   13398:	clz	r0, r0
   1339c:	lsr	r0, r0, #5
   133a0:	mov	r1, #0
   133a4:	bl	111ac <error@plt>
   133a8:	mov	r0, #1
   133ac:	strb	r0, [r6, r5]
   133b0:	sub	sp, fp, #24
   133b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   133b8:	push	{r4, r5, r6, sl, fp, lr}
   133bc:	add	fp, sp, #16
   133c0:	mov	r5, r2
   133c4:	mov	r6, r1
   133c8:	mov	r4, r0
   133cc:	mov	r1, r0
   133d0:	ldr	r0, [r1, #16]!
   133d4:	ldr	r2, [r1, #-4]
   133d8:	cmp	r2, r0
   133dc:	bcc	133f0 <__assert_fail@plt+0x20a0>
   133e0:	ldr	r0, [r4, #20]
   133e4:	mov	r2, #8
   133e8:	bl	15c58 <__assert_fail@plt+0x4908>
   133ec:	str	r0, [r4, #20]
   133f0:	ldr	r0, [r4, #12]
   133f4:	ldr	r1, [r4, #20]
   133f8:	str	r6, [r1, r0, lsl #3]!
   133fc:	str	r5, [r1, #4]
   13400:	add	r0, r0, #1
   13404:	str	r0, [r4, #12]
   13408:	pop	{r4, r5, r6, sl, fp, pc}
   1340c:	push	{r4, sl, fp, lr}
   13410:	add	fp, sp, #8
   13414:	mov	r4, r0
   13418:	bl	1120c <__ctype_b_loc@plt>
   1341c:	ldr	r0, [r0]
   13420:	ldrb	r0, [r0, r4, lsl #1]
   13424:	and	r0, r0, #1
   13428:	sub	r1, r4, #10
   1342c:	clz	r1, r1
   13430:	lsr	r1, r1, #5
   13434:	orr	r0, r1, r0
   13438:	pop	{r4, sl, fp, pc}
   1343c:	movw	r1, #37368	; 0x91f8
   13440:	movt	r1, #2
   13444:	str	r0, [r1]
   13448:	bx	lr
   1344c:	movw	r1, #37372	; 0x91fc
   13450:	movt	r1, #2
   13454:	strb	r0, [r1]
   13458:	bx	lr
   1345c:	push	{r4, r5, r6, sl, fp, lr}
   13460:	add	fp, sp, #16
   13464:	sub	sp, sp, #8
   13468:	movw	r0, #37244	; 0x917c
   1346c:	movt	r0, #2
   13470:	ldr	r0, [r0]
   13474:	bl	16f2c <__assert_fail@plt+0x5bdc>
   13478:	cmp	r0, #0
   1347c:	beq	134a4 <__assert_fail@plt+0x2154>
   13480:	movw	r0, #37372	; 0x91fc
   13484:	movt	r0, #2
   13488:	ldrb	r0, [r0]
   1348c:	cmp	r0, #0
   13490:	beq	134c4 <__assert_fail@plt+0x2174>
   13494:	bl	11248 <__errno_location@plt>
   13498:	ldr	r0, [r0]
   1349c:	cmp	r0, #32
   134a0:	bne	134c4 <__assert_fail@plt+0x2174>
   134a4:	movw	r0, #37232	; 0x9170
   134a8:	movt	r0, #2
   134ac:	ldr	r0, [r0]
   134b0:	bl	16f2c <__assert_fail@plt+0x5bdc>
   134b4:	cmp	r0, #0
   134b8:	subeq	sp, fp, #16
   134bc:	popeq	{r4, r5, r6, sl, fp, pc}
   134c0:	b	13534 <__assert_fail@plt+0x21e4>
   134c4:	movw	r1, #33687	; 0x8397
   134c8:	movt	r1, #1
   134cc:	mov	r0, #0
   134d0:	mov	r2, #5
   134d4:	bl	11134 <dcgettext@plt>
   134d8:	mov	r4, r0
   134dc:	movw	r0, #37368	; 0x91f8
   134e0:	movt	r0, #2
   134e4:	ldr	r6, [r0]
   134e8:	bl	11248 <__errno_location@plt>
   134ec:	ldr	r5, [r0]
   134f0:	cmp	r6, #0
   134f4:	bne	13510 <__assert_fail@plt+0x21c0>
   134f8:	movw	r2, #33322	; 0x822a
   134fc:	movt	r2, #1
   13500:	mov	r0, #0
   13504:	mov	r1, r5
   13508:	mov	r3, r4
   1350c:	b	13530 <__assert_fail@plt+0x21e0>
   13510:	mov	r0, r6
   13514:	bl	150ac <__assert_fail@plt+0x3d5c>
   13518:	mov	r3, r0
   1351c:	str	r4, [sp]
   13520:	movw	r2, #33699	; 0x83a3
   13524:	movt	r2, #1
   13528:	mov	r0, #0
   1352c:	mov	r1, r5
   13530:	bl	111ac <error@plt>
   13534:	movw	r0, #37148	; 0x911c
   13538:	movt	r0, #2
   1353c:	ldr	r0, [r0]
   13540:	bl	110ec <_exit@plt>
   13544:	b	110c8 <posix_fadvise64@plt>
   13548:	cmp	r0, #0
   1354c:	bxeq	lr
   13550:	push	{r4, sl, fp, lr}
   13554:	add	fp, sp, #8
   13558:	sub	sp, sp, #16
   1355c:	mov	r4, r1
   13560:	bl	11278 <fileno@plt>
   13564:	mov	r1, #0
   13568:	str	r1, [sp]
   1356c:	stmib	sp, {r1, r4}
   13570:	mov	r2, #0
   13574:	mov	r3, #0
   13578:	bl	13544 <__assert_fail@plt+0x21f4>
   1357c:	sub	sp, fp, #8
   13580:	pop	{r4, sl, fp, pc}
   13584:	push	{r4, r5, fp, lr}
   13588:	add	fp, sp, #8
   1358c:	sub	sp, sp, #8
   13590:	mov	r4, r0
   13594:	bl	11278 <fileno@plt>
   13598:	cmn	r0, #1
   1359c:	ble	13614 <__assert_fail@plt+0x22c4>
   135a0:	mov	r0, r4
   135a4:	bl	111dc <__freading@plt>
   135a8:	cmp	r0, #0
   135ac:	beq	135d8 <__assert_fail@plt+0x2288>
   135b0:	mov	r0, r4
   135b4:	bl	11278 <fileno@plt>
   135b8:	mov	r1, #1
   135bc:	str	r1, [sp]
   135c0:	mov	r2, #0
   135c4:	mov	r3, #0
   135c8:	bl	11170 <lseek64@plt>
   135cc:	and	r0, r0, r1
   135d0:	cmn	r0, #1
   135d4:	beq	13614 <__assert_fail@plt+0x22c4>
   135d8:	mov	r0, r4
   135dc:	bl	13624 <__assert_fail@plt+0x22d4>
   135e0:	cmp	r0, #0
   135e4:	beq	13614 <__assert_fail@plt+0x22c4>
   135e8:	bl	11248 <__errno_location@plt>
   135ec:	ldr	r5, [r0]
   135f0:	mov	r0, r4
   135f4:	bl	112a8 <fclose@plt>
   135f8:	cmp	r5, #0
   135fc:	beq	1360c <__assert_fail@plt+0x22bc>
   13600:	bl	11248 <__errno_location@plt>
   13604:	str	r5, [r0]
   13608:	mvn	r0, #0
   1360c:	sub	sp, fp, #8
   13610:	pop	{r4, r5, fp, pc}
   13614:	mov	r0, r4
   13618:	sub	sp, fp, #8
   1361c:	pop	{r4, r5, fp, lr}
   13620:	b	112a8 <fclose@plt>
   13624:	push	{r4, sl, fp, lr}
   13628:	add	fp, sp, #8
   1362c:	mov	r4, r0
   13630:	cmp	r0, #0
   13634:	beq	1364c <__assert_fail@plt+0x22fc>
   13638:	mov	r0, r4
   1363c:	bl	111dc <__freading@plt>
   13640:	cmp	r0, #0
   13644:	movne	r0, r4
   13648:	blne	13658 <__assert_fail@plt+0x2308>
   1364c:	mov	r0, r4
   13650:	pop	{r4, sl, fp, lr}
   13654:	b	110d4 <fflush@plt>
   13658:	ldrb	r1, [r0, #1]
   1365c:	tst	r1, #1
   13660:	bxeq	lr
   13664:	push	{fp, lr}
   13668:	mov	fp, sp
   1366c:	sub	sp, sp, #8
   13670:	mov	r1, #1
   13674:	str	r1, [sp]
   13678:	mov	r2, #0
   1367c:	mov	r3, #0
   13680:	bl	13768 <__assert_fail@plt+0x2418>
   13684:	mov	sp, fp
   13688:	pop	{fp, pc}
   1368c:	push	{r4, r5, r6, r7, fp, lr}
   13690:	add	fp, sp, #16
   13694:	mov	r5, r1
   13698:	bl	112f0 <fopen64@plt>
   1369c:	mov	r4, #0
   136a0:	cmp	r0, #0
   136a4:	beq	136f4 <__assert_fail@plt+0x23a4>
   136a8:	mov	r6, r0
   136ac:	bl	11278 <fileno@plt>
   136b0:	cmp	r0, #2
   136b4:	movhi	r0, r6
   136b8:	pophi	{r4, r5, r6, r7, fp, pc}
   136bc:	bl	156b8 <__assert_fail@plt+0x4368>
   136c0:	cmn	r0, #1
   136c4:	ble	13720 <__assert_fail@plt+0x23d0>
   136c8:	mov	r7, r0
   136cc:	mov	r0, r6
   136d0:	bl	13584 <__assert_fail@plt+0x2234>
   136d4:	cmp	r0, #0
   136d8:	bne	136fc <__assert_fail@plt+0x23ac>
   136dc:	mov	r0, r7
   136e0:	mov	r1, r5
   136e4:	bl	1108c <fdopen@plt>
   136e8:	mov	r4, r0
   136ec:	cmp	r0, #0
   136f0:	beq	136fc <__assert_fail@plt+0x23ac>
   136f4:	mov	r0, r4
   136f8:	pop	{r4, r5, r6, r7, fp, pc}
   136fc:	bl	11248 <__errno_location@plt>
   13700:	mov	r4, r0
   13704:	ldr	r5, [r0]
   13708:	mov	r0, r7
   1370c:	bl	11338 <close@plt>
   13710:	str	r5, [r4]
   13714:	mov	r4, #0
   13718:	mov	r0, r4
   1371c:	pop	{r4, r5, r6, r7, fp, pc}
   13720:	bl	11248 <__errno_location@plt>
   13724:	mov	r5, r0
   13728:	ldr	r7, [r0]
   1372c:	mov	r0, r6
   13730:	bl	13584 <__assert_fail@plt+0x2234>
   13734:	str	r7, [r5]
   13738:	mov	r0, r4
   1373c:	pop	{r4, r5, r6, r7, fp, pc}
   13740:	push	{r4, r5, r6, sl, fp, lr}
   13744:	add	fp, sp, #16
   13748:	mov	r4, r0
   1374c:	bl	11248 <__errno_location@plt>
   13750:	mov	r5, r0
   13754:	ldr	r6, [r0]
   13758:	mov	r0, r4
   1375c:	bl	110e0 <free@plt>
   13760:	str	r6, [r5]
   13764:	pop	{r4, r5, r6, sl, fp, pc}
   13768:	push	{r4, r5, r6, r7, fp, lr}
   1376c:	add	fp, sp, #16
   13770:	sub	sp, sp, #8
   13774:	mov	r5, r3
   13778:	mov	r6, r2
   1377c:	mov	r4, r0
   13780:	ldr	r0, [r0, #4]
   13784:	ldr	r1, [r4, #8]
   13788:	cmp	r1, r0
   1378c:	bne	137a8 <__assert_fail@plt+0x2458>
   13790:	ldrd	r0, [r4, #16]
   13794:	cmp	r1, r0
   13798:	bne	137a8 <__assert_fail@plt+0x2458>
   1379c:	ldr	r0, [r4, #36]	; 0x24
   137a0:	cmp	r0, #0
   137a4:	beq	137c0 <__assert_fail@plt+0x2470>
   137a8:	mov	r0, r4
   137ac:	mov	r2, r6
   137b0:	mov	r3, r5
   137b4:	sub	sp, fp, #16
   137b8:	pop	{r4, r5, r6, r7, fp, lr}
   137bc:	b	112b4 <fseeko64@plt>
   137c0:	ldr	r7, [fp, #8]
   137c4:	mov	r0, r4
   137c8:	bl	11278 <fileno@plt>
   137cc:	str	r7, [sp]
   137d0:	mov	r2, r6
   137d4:	mov	r3, r5
   137d8:	bl	11170 <lseek64@plt>
   137dc:	and	r2, r0, r1
   137e0:	cmn	r2, #1
   137e4:	mvneq	r0, #0
   137e8:	subeq	sp, fp, #16
   137ec:	popeq	{r4, r5, r6, r7, fp, pc}
   137f0:	strd	r0, [r4, #80]	; 0x50
   137f4:	ldr	r0, [r4]
   137f8:	bic	r0, r0, #16
   137fc:	str	r0, [r4]
   13800:	mov	r0, #0
   13804:	sub	sp, fp, #16
   13808:	pop	{r4, r5, r6, r7, fp, pc}
   1380c:	push	{r4, sl, fp, lr}
   13810:	add	fp, sp, #8
   13814:	sub	sp, sp, #264	; 0x108
   13818:	add	r1, sp, #7
   1381c:	movw	r2, #257	; 0x101
   13820:	bl	15610 <__assert_fail@plt+0x42c0>
   13824:	mov	r4, #0
   13828:	cmp	r0, #0
   1382c:	bne	13864 <__assert_fail@plt+0x2514>
   13830:	add	r0, sp, #7
   13834:	movw	r1, #33706	; 0x83aa
   13838:	movt	r1, #1
   1383c:	bl	110bc <strcmp@plt>
   13840:	cmp	r0, #0
   13844:	beq	13864 <__assert_fail@plt+0x2514>
   13848:	add	r0, sp, #7
   1384c:	movw	r1, #33708	; 0x83ac
   13850:	movt	r1, #1
   13854:	bl	110bc <strcmp@plt>
   13858:	mov	r4, r0
   1385c:	cmp	r0, #0
   13860:	movwne	r4, #1
   13864:	mov	r0, r4
   13868:	sub	sp, fp, #8
   1386c:	pop	{r4, sl, fp, pc}
   13870:	mov	r1, #0
   13874:	str	r1, [r0]
   13878:	str	r1, [r0, #4]
   1387c:	str	r1, [r0, #8]
   13880:	bx	lr
   13884:	mov	r2, #10
   13888:	b	1388c <__assert_fail@plt+0x253c>
   1388c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13890:	add	fp, sp, #28
   13894:	sub	sp, sp, #4
   13898:	mov	sl, r2
   1389c:	mov	r8, r1
   138a0:	mov	r4, r0
   138a4:	ldr	r5, [r0]
   138a8:	ldr	r6, [r0, #8]
   138ac:	mov	r0, r1
   138b0:	bl	1132c <feof_unlocked@plt>
   138b4:	cmp	r0, #0
   138b8:	beq	138c4 <__assert_fail@plt+0x2574>
   138bc:	mov	r4, #0
   138c0:	b	13958 <__assert_fail@plt+0x2608>
   138c4:	add	r9, r6, r5
   138c8:	mov	r7, r6
   138cc:	mov	r0, r8
   138d0:	bl	11128 <getc_unlocked@plt>
   138d4:	mov	r5, r0
   138d8:	cmn	r0, #1
   138dc:	bne	13908 <__assert_fail@plt+0x25b8>
   138e0:	cmp	r7, r6
   138e4:	beq	138bc <__assert_fail@plt+0x256c>
   138e8:	mov	r0, r8
   138ec:	bl	11194 <ferror_unlocked@plt>
   138f0:	cmp	r0, #0
   138f4:	bne	138bc <__assert_fail@plt+0x256c>
   138f8:	ldrb	r0, [r7, #-1]
   138fc:	cmp	r0, sl
   13900:	mov	r5, sl
   13904:	beq	13950 <__assert_fail@plt+0x2600>
   13908:	cmp	r7, r9
   1390c:	bne	13944 <__assert_fail@plt+0x25f4>
   13910:	ldr	r7, [r4]
   13914:	mov	r0, #1
   13918:	str	r0, [sp]
   1391c:	mov	r0, r6
   13920:	mov	r1, r4
   13924:	mov	r2, #1
   13928:	mvn	r3, #0
   1392c:	bl	15cac <__assert_fail@plt+0x495c>
   13930:	mov	r6, r0
   13934:	str	r0, [r4, #8]
   13938:	add	r7, r0, r7
   1393c:	ldr	r0, [r4]
   13940:	add	r9, r6, r0
   13944:	strb	r5, [r7], #1
   13948:	cmp	r5, sl
   1394c:	bne	138cc <__assert_fail@plt+0x257c>
   13950:	sub	r0, r7, r6
   13954:	str	r0, [r4, #4]
   13958:	mov	r0, r4
   1395c:	sub	sp, fp, #28
   13960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13964:	ldr	r0, [r0, #8]
   13968:	b	13740 <__assert_fail@plt+0x23f0>
   1396c:	push	{r4, r5, r6, sl, fp, lr}
   13970:	add	fp, sp, #16
   13974:	cmp	r2, #0
   13978:	moveq	r0, #0
   1397c:	popeq	{r4, r5, r6, sl, fp, pc}
   13980:	mov	r4, r2
   13984:	mov	r5, r1
   13988:	mov	r6, r0
   1398c:	bl	111e8 <__ctype_toupper_loc@plt>
   13990:	ldr	r1, [r0]
   13994:	mov	r2, #0
   13998:	ldrb	r0, [r5, r2]
   1399c:	ldr	r0, [r1, r0, lsl #2]
   139a0:	ldrb	r3, [r6, r2]
   139a4:	ldr	r3, [r1, r3, lsl #2]
   139a8:	subs	r0, r3, r0
   139ac:	popne	{r4, r5, r6, sl, fp, pc}
   139b0:	add	r2, r2, #1
   139b4:	cmp	r2, r4
   139b8:	movcs	r0, #0
   139bc:	popcs	{r4, r5, r6, sl, fp, pc}
   139c0:	b	13998 <__assert_fail@plt+0x2648>
   139c4:	push	{r4, r5, fp, lr}
   139c8:	add	fp, sp, #8
   139cc:	cmp	r0, #0
   139d0:	beq	13a64 <__assert_fail@plt+0x2714>
   139d4:	mov	r4, r0
   139d8:	mov	r1, #47	; 0x2f
   139dc:	bl	112d8 <strrchr@plt>
   139e0:	cmp	r0, #0
   139e4:	mov	r5, r4
   139e8:	addne	r5, r0, #1
   139ec:	sub	r0, r5, r4
   139f0:	cmp	r0, #7
   139f4:	blt	13a48 <__assert_fail@plt+0x26f8>
   139f8:	sub	r0, r5, #7
   139fc:	movw	r1, #33770	; 0x83ea
   13a00:	movt	r1, #1
   13a04:	mov	r2, #7
   13a08:	bl	11314 <strncmp@plt>
   13a0c:	cmp	r0, #0
   13a10:	bne	13a48 <__assert_fail@plt+0x26f8>
   13a14:	movw	r1, #33778	; 0x83f2
   13a18:	movt	r1, #1
   13a1c:	mov	r0, r5
   13a20:	mov	r2, #3
   13a24:	bl	11314 <strncmp@plt>
   13a28:	cmp	r0, #0
   13a2c:	beq	13a38 <__assert_fail@plt+0x26e8>
   13a30:	mov	r4, r5
   13a34:	b	13a48 <__assert_fail@plt+0x26f8>
   13a38:	add	r4, r5, #3
   13a3c:	movw	r0, #37216	; 0x9160
   13a40:	movt	r0, #2
   13a44:	str	r4, [r0]
   13a48:	movw	r0, #37220	; 0x9164
   13a4c:	movt	r0, #2
   13a50:	str	r4, [r0]
   13a54:	movw	r0, #37376	; 0x9200
   13a58:	movt	r0, #2
   13a5c:	str	r4, [r0]
   13a60:	pop	{r4, r5, fp, pc}
   13a64:	movw	r0, #37232	; 0x9170
   13a68:	movt	r0, #2
   13a6c:	ldr	r3, [r0]
   13a70:	movw	r0, #33714	; 0x83b2
   13a74:	movt	r0, #1
   13a78:	mov	r1, #55	; 0x37
   13a7c:	mov	r2, #1
   13a80:	bl	11164 <fwrite@plt>
   13a84:	bl	11320 <abort@plt>
   13a88:	push	{r4, r5, r6, sl, fp, lr}
   13a8c:	add	fp, sp, #16
   13a90:	mov	r4, r0
   13a94:	movw	r0, #37384	; 0x9208
   13a98:	movt	r0, #2
   13a9c:	cmp	r4, #0
   13aa0:	moveq	r4, r0
   13aa4:	bl	11248 <__errno_location@plt>
   13aa8:	mov	r5, r0
   13aac:	ldr	r6, [r0]
   13ab0:	mov	r0, r4
   13ab4:	mov	r1, #48	; 0x30
   13ab8:	bl	15e7c <__assert_fail@plt+0x4b2c>
   13abc:	str	r6, [r5]
   13ac0:	pop	{r4, r5, r6, sl, fp, pc}
   13ac4:	movw	r1, #37384	; 0x9208
   13ac8:	movt	r1, #2
   13acc:	cmp	r0, #0
   13ad0:	movne	r1, r0
   13ad4:	ldr	r0, [r1]
   13ad8:	bx	lr
   13adc:	movw	r2, #37384	; 0x9208
   13ae0:	movt	r2, #2
   13ae4:	cmp	r0, #0
   13ae8:	movne	r2, r0
   13aec:	str	r1, [r2]
   13af0:	bx	lr
   13af4:	movw	r3, #37384	; 0x9208
   13af8:	movt	r3, #2
   13afc:	cmp	r0, #0
   13b00:	movne	r3, r0
   13b04:	ubfx	r0, r1, #5, #3
   13b08:	add	r0, r3, r0, lsl #2
   13b0c:	ldr	r3, [r0, #8]
   13b10:	and	r1, r1, #31
   13b14:	eor	r2, r2, r3, lsr r1
   13b18:	and	r2, r2, #1
   13b1c:	eor	r2, r3, r2, lsl r1
   13b20:	str	r2, [r0, #8]
   13b24:	mov	r0, #1
   13b28:	and	r0, r0, r3, lsr r1
   13b2c:	bx	lr
   13b30:	movw	r2, #37384	; 0x9208
   13b34:	movt	r2, #2
   13b38:	cmp	r0, #0
   13b3c:	movne	r2, r0
   13b40:	ldr	r0, [r2, #4]
   13b44:	str	r1, [r2, #4]
   13b48:	bx	lr
   13b4c:	movw	r3, #37384	; 0x9208
   13b50:	movt	r3, #2
   13b54:	cmp	r0, #0
   13b58:	movne	r3, r0
   13b5c:	mov	r0, #10
   13b60:	str	r0, [r3]
   13b64:	cmp	r1, #0
   13b68:	cmpne	r2, #0
   13b6c:	bne	13b7c <__assert_fail@plt+0x282c>
   13b70:	push	{fp, lr}
   13b74:	mov	fp, sp
   13b78:	bl	11320 <abort@plt>
   13b7c:	str	r1, [r3, #40]	; 0x28
   13b80:	str	r2, [r3, #44]	; 0x2c
   13b84:	bx	lr
   13b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b8c:	add	fp, sp, #28
   13b90:	sub	sp, sp, #20
   13b94:	mov	r8, r3
   13b98:	mov	r9, r2
   13b9c:	mov	sl, r1
   13ba0:	mov	r7, r0
   13ba4:	ldr	r0, [fp, #8]
   13ba8:	movw	r5, #37384	; 0x9208
   13bac:	movt	r5, #2
   13bb0:	cmp	r0, #0
   13bb4:	movne	r5, r0
   13bb8:	bl	11248 <__errno_location@plt>
   13bbc:	mov	r4, r0
   13bc0:	ldm	r5, {r0, r1}
   13bc4:	ldr	r2, [r5, #40]	; 0x28
   13bc8:	ldr	r3, [r5, #44]	; 0x2c
   13bcc:	ldr	r6, [r4]
   13bd0:	add	r5, r5, #8
   13bd4:	stm	sp, {r0, r1, r5}
   13bd8:	str	r2, [sp, #12]
   13bdc:	str	r3, [sp, #16]
   13be0:	mov	r0, r7
   13be4:	mov	r1, sl
   13be8:	mov	r2, r9
   13bec:	mov	r3, r8
   13bf0:	bl	13c00 <__assert_fail@plt+0x28b0>
   13bf4:	str	r6, [r4]
   13bf8:	sub	sp, fp, #28
   13bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c04:	add	fp, sp, #28
   13c08:	sub	sp, sp, #156	; 0x9c
   13c0c:	mov	r9, r3
   13c10:	str	r2, [fp, #-84]	; 0xffffffac
   13c14:	mov	r6, r1
   13c18:	mov	r7, r0
   13c1c:	ldr	r0, [fp, #12]
   13c20:	and	r1, r0, #4
   13c24:	str	r1, [sp, #32]
   13c28:	and	r1, r0, #1
   13c2c:	str	r1, [sp, #36]	; 0x24
   13c30:	ubfx	sl, r0, #1, #1
   13c34:	bl	1117c <__ctype_get_mb_cur_max@plt>
   13c38:	str	r0, [sp, #40]	; 0x28
   13c3c:	ldr	r0, [fp, #24]
   13c40:	str	r0, [sp, #76]	; 0x4c
   13c44:	ldr	r0, [fp, #20]
   13c48:	str	r0, [sp, #68]	; 0x44
   13c4c:	ldr	r0, [fp, #8]
   13c50:	str	r0, [fp, #-60]	; 0xffffffc4
   13c54:	mov	r0, #0
   13c58:	str	r0, [sp, #72]	; 0x48
   13c5c:	mov	r0, #0
   13c60:	str	r0, [sp, #92]	; 0x5c
   13c64:	mov	r0, #0
   13c68:	str	r0, [fp, #-72]	; 0xffffffb8
   13c6c:	mov	r0, #0
   13c70:	mov	r1, #0
   13c74:	str	r1, [fp, #-56]	; 0xffffffc8
   13c78:	mov	r1, #0
   13c7c:	str	r1, [sp, #56]	; 0x38
   13c80:	mov	r5, #1
   13c84:	str	r7, [sp, #80]	; 0x50
   13c88:	mov	r4, r6
   13c8c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13c90:	cmp	r6, #10
   13c94:	bhi	14bfc <__assert_fail@plt+0x38ac>
   13c98:	add	r1, pc, #20
   13c9c:	mov	r8, #0
   13ca0:	mov	r2, #1
   13ca4:	mov	r3, #0
   13ca8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13cac:	mov	lr, r9
   13cb0:	ldr	pc, [r1, r6, lsl #2]
   13cb4:	andeq	r3, r1, ip, lsl #27
   13cb8:			; <UNDEFINED> instruction: 0x00013dbc
   13cbc:	andeq	r3, r1, ip, ror sp
   13cc0:	andeq	r3, r1, r4, ror sp
   13cc4:			; <UNDEFINED> instruction: 0x00013db0
   13cc8:	andeq	r3, r1, r0, lsl lr
   13ccc:	muleq	r1, ip, sp
   13cd0:	andeq	r3, r1, ip, ror #28
   13cd4:	andeq	r3, r1, r0, ror #25
   13cd8:	andeq	r3, r1, r0, ror #25
   13cdc:	andeq	r3, r1, r8, lsl #26
   13ce0:	movw	r0, #33860	; 0x8444
   13ce4:	movt	r0, #1
   13ce8:	mov	r1, r6
   13cec:	bl	15208 <__assert_fail@plt+0x3eb8>
   13cf0:	str	r0, [sp, #68]	; 0x44
   13cf4:	movw	r0, #33862	; 0x8446
   13cf8:	movt	r0, #1
   13cfc:	mov	r1, r6
   13d00:	bl	15208 <__assert_fail@plt+0x3eb8>
   13d04:	str	r0, [sp, #76]	; 0x4c
   13d08:	mov	r8, #0
   13d0c:	tst	sl, #1
   13d10:	bne	13d48 <__assert_fail@plt+0x29f8>
   13d14:	ldr	r0, [sp, #68]	; 0x44
   13d18:	ldrb	r0, [r0]
   13d1c:	cmp	r0, #0
   13d20:	beq	13d48 <__assert_fail@plt+0x29f8>
   13d24:	ldr	r1, [sp, #68]	; 0x44
   13d28:	add	r1, r1, #1
   13d2c:	mov	r8, #0
   13d30:	cmp	r8, r4
   13d34:	strbcc	r0, [r7, r8]
   13d38:	ldrb	r0, [r1, r8]
   13d3c:	add	r8, r8, #1
   13d40:	cmp	r0, #0
   13d44:	bne	13d30 <__assert_fail@plt+0x29e0>
   13d48:	ldr	r6, [sp, #76]	; 0x4c
   13d4c:	mov	r0, r6
   13d50:	bl	11230 <strlen@plt>
   13d54:	str	r0, [fp, #-72]	; 0xffffffb8
   13d58:	str	r6, [sp, #92]	; 0x5c
   13d5c:	mov	r2, #1
   13d60:	mov	r3, sl
   13d64:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d68:	mov	lr, r9
   13d6c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13d70:	b	13e6c <__assert_fail@plt+0x2b1c>
   13d74:	mov	r0, #1
   13d78:	b	13dbc <__assert_fail@plt+0x2a6c>
   13d7c:	tst	sl, #1
   13d80:	bne	13dbc <__assert_fail@plt+0x2a6c>
   13d84:	mov	r2, r0
   13d88:	b	13de4 <__assert_fail@plt+0x2a94>
   13d8c:	mov	r6, #0
   13d90:	mov	r8, #0
   13d94:	mov	r2, r0
   13d98:	b	13e68 <__assert_fail@plt+0x2b18>
   13d9c:	mov	r0, #1
   13da0:	str	r0, [fp, #-72]	; 0xffffffb8
   13da4:	mov	r8, #0
   13da8:	mov	r6, #5
   13dac:	b	13e28 <__assert_fail@plt+0x2ad8>
   13db0:	mov	r2, #1
   13db4:	tst	sl, #1
   13db8:	beq	13de4 <__assert_fail@plt+0x2a94>
   13dbc:	mov	r1, #1
   13dc0:	str	r1, [fp, #-72]	; 0xffffffb8
   13dc4:	mov	r8, #0
   13dc8:	mov	r6, #2
   13dcc:	movw	r1, #33862	; 0x8446
   13dd0:	movt	r1, #1
   13dd4:	str	r1, [sp, #92]	; 0x5c
   13dd8:	mov	r2, r0
   13ddc:	mov	r3, #1
   13de0:	b	13e6c <__assert_fail@plt+0x2b1c>
   13de4:	mov	r8, #1
   13de8:	mov	r6, #2
   13dec:	cmp	r4, #0
   13df0:	movne	r0, #39	; 0x27
   13df4:	strbne	r0, [r7]
   13df8:	movw	r0, #33862	; 0x8446
   13dfc:	movt	r0, #1
   13e00:	str	r0, [sp, #92]	; 0x5c
   13e04:	mov	r0, #1
   13e08:	str	r0, [fp, #-72]	; 0xffffffb8
   13e0c:	b	13e68 <__assert_fail@plt+0x2b18>
   13e10:	mov	r6, #5
   13e14:	tst	sl, #1
   13e18:	beq	13e40 <__assert_fail@plt+0x2af0>
   13e1c:	mov	r0, #1
   13e20:	str	r0, [fp, #-72]	; 0xffffffb8
   13e24:	mov	r8, #0
   13e28:	movw	r0, #33858	; 0x8442
   13e2c:	movt	r0, #1
   13e30:	str	r0, [sp, #92]	; 0x5c
   13e34:	mov	r2, #1
   13e38:	mov	r3, #1
   13e3c:	b	13e6c <__assert_fail@plt+0x2b1c>
   13e40:	cmp	r4, #0
   13e44:	movne	r0, #34	; 0x22
   13e48:	strbne	r0, [r7]
   13e4c:	mov	r8, #1
   13e50:	movw	r0, #33858	; 0x8442
   13e54:	movt	r0, #1
   13e58:	str	r0, [sp, #92]	; 0x5c
   13e5c:	mov	r0, #1
   13e60:	str	r0, [fp, #-72]	; 0xffffffb8
   13e64:	mov	r2, #1
   13e68:	mov	r3, #0
   13e6c:	ldr	r0, [fp, #16]
   13e70:	cmp	r0, #0
   13e74:	movwne	r0, #1
   13e78:	and	r0, r0, r3
   13e7c:	str	r0, [fp, #-88]	; 0xffffffa8
   13e80:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13e84:	cmp	r0, #0
   13e88:	movwne	r0, #1
   13e8c:	and	r1, r0, r3
   13e90:	and	r1, r2, r1
   13e94:	str	r1, [sp, #48]	; 0x30
   13e98:	str	r6, [fp, #-60]	; 0xffffffc4
   13e9c:	subs	r6, r6, #2
   13ea0:	clz	r1, r6
   13ea4:	lsr	r1, r1, #5
   13ea8:	and	r1, r1, r3
   13eac:	str	r1, [sp, #60]	; 0x3c
   13eb0:	str	r6, [fp, #-80]	; 0xffffffb0
   13eb4:	mov	r1, r6
   13eb8:	movwne	r1, #1
   13ebc:	str	r3, [fp, #-76]	; 0xffffffb4
   13ec0:	eor	r3, r3, #1
   13ec4:	str	r3, [sp, #88]	; 0x58
   13ec8:	orr	r3, r1, r3
   13ecc:	str	r3, [sp, #64]	; 0x40
   13ed0:	and	r1, r1, r2
   13ed4:	str	r1, [fp, #-68]	; 0xffffffbc
   13ed8:	and	r0, r0, r1
   13edc:	str	r0, [fp, #-64]	; 0xffffffc0
   13ee0:	str	r2, [sp, #84]	; 0x54
   13ee4:	eor	r0, r2, #1
   13ee8:	str	r0, [sp, #52]	; 0x34
   13eec:	mov	r6, #0
   13ef0:	cmn	lr, #1
   13ef4:	beq	13f04 <__assert_fail@plt+0x2bb4>
   13ef8:	cmp	r6, lr
   13efc:	bne	13f10 <__assert_fail@plt+0x2bc0>
   13f00:	b	14a7c <__assert_fail@plt+0x372c>
   13f04:	ldrb	r0, [ip, r6]
   13f08:	cmp	r0, #0
   13f0c:	beq	14a7c <__assert_fail@plt+0x372c>
   13f10:	str	r5, [fp, #-48]	; 0xffffffd0
   13f14:	mov	sl, #0
   13f18:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f1c:	cmp	r0, #0
   13f20:	beq	13f54 <__assert_fail@plt+0x2c04>
   13f24:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13f28:	add	r5, r6, r0
   13f2c:	cmp	r0, #2
   13f30:	bcc	13f4c <__assert_fail@plt+0x2bfc>
   13f34:	cmn	lr, #1
   13f38:	bne	13f4c <__assert_fail@plt+0x2bfc>
   13f3c:	mov	r0, ip
   13f40:	bl	11230 <strlen@plt>
   13f44:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f48:	mov	lr, r0
   13f4c:	cmp	r5, lr
   13f50:	bls	13f60 <__assert_fail@plt+0x2c10>
   13f54:	mov	r0, #0
   13f58:	str	r0, [fp, #-52]	; 0xffffffcc
   13f5c:	b	13fac <__assert_fail@plt+0x2c5c>
   13f60:	mov	r5, r4
   13f64:	mov	r4, lr
   13f68:	add	r0, ip, r6
   13f6c:	ldr	r1, [sp, #92]	; 0x5c
   13f70:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13f74:	bl	1111c <memcmp@plt>
   13f78:	cmp	r0, #0
   13f7c:	mov	r1, r0
   13f80:	movwne	r1, #1
   13f84:	ldr	r2, [sp, #88]	; 0x58
   13f88:	orr	r1, r1, r2
   13f8c:	tst	r1, #1
   13f90:	beq	14b40 <__assert_fail@plt+0x37f0>
   13f94:	clz	r0, r0
   13f98:	lsr	r0, r0, #5
   13f9c:	str	r0, [fp, #-52]	; 0xffffffcc
   13fa0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13fa4:	mov	lr, r4
   13fa8:	mov	r4, r5
   13fac:	ldrb	r5, [ip, r6]
   13fb0:	cmp	r5, #126	; 0x7e
   13fb4:	bhi	14370 <__assert_fail@plt+0x3020>
   13fb8:	mov	r9, #1
   13fbc:	mov	r2, #110	; 0x6e
   13fc0:	mov	r0, #97	; 0x61
   13fc4:	add	r3, pc, #4
   13fc8:	mov	r1, #0
   13fcc:	ldr	pc, [r3, r5, lsl #2]
   13fd0:	andeq	r4, r1, r8, ror #4
   13fd4:	andeq	r4, r1, r0, ror r3
   13fd8:	andeq	r4, r1, r0, ror r3
   13fdc:	andeq	r4, r1, r0, ror r3
   13fe0:	andeq	r4, r1, r0, ror r3
   13fe4:	andeq	r4, r1, r0, ror r3
   13fe8:	andeq	r4, r1, r0, ror r3
   13fec:	andeq	r4, r1, r4, lsr r4
   13ff0:	andeq	r4, r1, r8, asr #4
   13ff4:	andeq	r4, r1, r0, asr #4
   13ff8:	andeq	r4, r1, r4, asr r2
   13ffc:	ldrdeq	r4, [r1], -r8
   14000:	andeq	r4, r1, r8, lsr r2
   14004:	andeq	r4, r1, r0, asr r2
   14008:	andeq	r4, r1, r0, ror r3
   1400c:	andeq	r4, r1, r0, ror r3
   14010:	andeq	r4, r1, r0, ror r3
   14014:	andeq	r4, r1, r0, ror r3
   14018:	andeq	r4, r1, r0, ror r3
   1401c:	andeq	r4, r1, r0, ror r3
   14020:	andeq	r4, r1, r0, ror r3
   14024:	andeq	r4, r1, r0, ror r3
   14028:	andeq	r4, r1, r0, ror r3
   1402c:	andeq	r4, r1, r0, ror r3
   14030:	andeq	r4, r1, r0, ror r3
   14034:	andeq	r4, r1, r0, ror r3
   14038:	andeq	r4, r1, r0, ror r3
   1403c:	andeq	r4, r1, r0, ror r3
   14040:	andeq	r4, r1, r0, ror r3
   14044:	andeq	r4, r1, r0, ror r3
   14048:	andeq	r4, r1, r0, ror r3
   1404c:	andeq	r4, r1, r0, ror r3
   14050:	andeq	r4, r1, r4, ror #7
   14054:	andeq	r4, r1, r8, ror #7
   14058:	andeq	r4, r1, r8, ror #7
   1405c:	andeq	r4, r1, r0, ror #3
   14060:	andeq	r4, r1, r8, ror #7
   14064:	andeq	r4, r1, ip, asr #3
   14068:	andeq	r4, r1, r8, ror #7
   1406c:	andeq	r4, r1, r0, ror #5
   14070:	andeq	r4, r1, r8, ror #7
   14074:	andeq	r4, r1, r8, ror #7
   14078:	andeq	r4, r1, r8, ror #7
   1407c:	andeq	r4, r1, ip, asr #3
   14080:	andeq	r4, r1, ip, asr #3
   14084:	andeq	r4, r1, ip, asr #3
   14088:	andeq	r4, r1, ip, asr #3
   1408c:	andeq	r4, r1, ip, asr #3
   14090:	andeq	r4, r1, ip, asr #3
   14094:	andeq	r4, r1, ip, asr #3
   14098:	andeq	r4, r1, ip, asr #3
   1409c:	andeq	r4, r1, ip, asr #3
   140a0:	andeq	r4, r1, ip, asr #3
   140a4:	andeq	r4, r1, ip, asr #3
   140a8:	andeq	r4, r1, ip, asr #3
   140ac:	andeq	r4, r1, ip, asr #3
   140b0:	andeq	r4, r1, ip, asr #3
   140b4:	andeq	r4, r1, ip, asr #3
   140b8:	andeq	r4, r1, ip, asr #3
   140bc:	andeq	r4, r1, r8, ror #7
   140c0:	andeq	r4, r1, r8, ror #7
   140c4:	andeq	r4, r1, r8, ror #7
   140c8:	andeq	r4, r1, r8, ror #7
   140cc:	andeq	r4, r1, r8, lsr #5
   140d0:	andeq	r4, r1, r0, ror r3
   140d4:	andeq	r4, r1, ip, asr #3
   140d8:	andeq	r4, r1, ip, asr #3
   140dc:	andeq	r4, r1, ip, asr #3
   140e0:	andeq	r4, r1, ip, asr #3
   140e4:	andeq	r4, r1, ip, asr #3
   140e8:	andeq	r4, r1, ip, asr #3
   140ec:	andeq	r4, r1, ip, asr #3
   140f0:	andeq	r4, r1, ip, asr #3
   140f4:	andeq	r4, r1, ip, asr #3
   140f8:	andeq	r4, r1, ip, asr #3
   140fc:	andeq	r4, r1, ip, asr #3
   14100:	andeq	r4, r1, ip, asr #3
   14104:	andeq	r4, r1, ip, asr #3
   14108:	andeq	r4, r1, ip, asr #3
   1410c:	andeq	r4, r1, ip, asr #3
   14110:	andeq	r4, r1, ip, asr #3
   14114:	andeq	r4, r1, ip, asr #3
   14118:	andeq	r4, r1, ip, asr #3
   1411c:	andeq	r4, r1, ip, asr #3
   14120:	andeq	r4, r1, ip, asr #3
   14124:	andeq	r4, r1, ip, asr #3
   14128:	andeq	r4, r1, ip, asr #3
   1412c:	andeq	r4, r1, ip, asr #3
   14130:	andeq	r4, r1, ip, asr #3
   14134:	andeq	r4, r1, ip, asr #3
   14138:	andeq	r4, r1, ip, asr #3
   1413c:	andeq	r4, r1, r8, ror #7
   14140:	andeq	r4, r1, r4, lsl r2
   14144:	andeq	r4, r1, ip, asr #3
   14148:	andeq	r4, r1, r8, ror #7
   1414c:	andeq	r4, r1, ip, asr #3
   14150:	andeq	r4, r1, r8, ror #7
   14154:	andeq	r4, r1, ip, asr #3
   14158:	andeq	r4, r1, ip, asr #3
   1415c:	andeq	r4, r1, ip, asr #3
   14160:	andeq	r4, r1, ip, asr #3
   14164:	andeq	r4, r1, ip, asr #3
   14168:	andeq	r4, r1, ip, asr #3
   1416c:	andeq	r4, r1, ip, asr #3
   14170:	andeq	r4, r1, ip, asr #3
   14174:	andeq	r4, r1, ip, asr #3
   14178:	andeq	r4, r1, ip, asr #3
   1417c:	andeq	r4, r1, ip, asr #3
   14180:	andeq	r4, r1, ip, asr #3
   14184:	andeq	r4, r1, ip, asr #3
   14188:	andeq	r4, r1, ip, asr #3
   1418c:	andeq	r4, r1, ip, asr #3
   14190:	andeq	r4, r1, ip, asr #3
   14194:	andeq	r4, r1, ip, asr #3
   14198:	andeq	r4, r1, ip, asr #3
   1419c:	andeq	r4, r1, ip, asr #3
   141a0:	andeq	r4, r1, ip, asr #3
   141a4:	andeq	r4, r1, ip, asr #3
   141a8:	andeq	r4, r1, ip, asr #3
   141ac:	andeq	r4, r1, ip, asr #3
   141b0:	andeq	r4, r1, ip, asr #3
   141b4:	andeq	r4, r1, ip, asr #3
   141b8:	andeq	r4, r1, ip, asr #3
   141bc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141c0:	andeq	r4, r1, r8, ror #7
   141c4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141c8:	andeq	r4, r1, r0, ror #3
   141cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   141d0:	cmp	r0, #0
   141d4:	beq	14448 <__assert_fail@plt+0x30f8>
   141d8:	ldr	r0, [fp, #16]
   141dc:	b	1444c <__assert_fail@plt+0x30fc>
   141e0:	mov	r9, #0
   141e4:	cmp	r6, #0
   141e8:	beq	143e4 <__assert_fail@plt+0x3094>
   141ec:	mov	sl, #0
   141f0:	b	141cc <__assert_fail@plt+0x2e7c>
   141f4:	mov	r9, #0
   141f8:	cmn	lr, #1
   141fc:	beq	143c8 <__assert_fail@plt+0x3078>
   14200:	cmp	r6, #0
   14204:	bne	141ec <__assert_fail@plt+0x2e9c>
   14208:	cmp	lr, #1
   1420c:	beq	143e4 <__assert_fail@plt+0x3094>
   14210:	b	141ec <__assert_fail@plt+0x2e9c>
   14214:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14218:	cmp	r0, #2
   1421c:	bne	14410 <__assert_fail@plt+0x30c0>
   14220:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14224:	tst	r0, #1
   14228:	bne	14b58 <__assert_fail@plt+0x3808>
   1422c:	mov	sl, #0
   14230:	mov	r0, #92	; 0x5c
   14234:	b	14424 <__assert_fail@plt+0x30d4>
   14238:	mov	r0, #102	; 0x66
   1423c:	b	14434 <__assert_fail@plt+0x30e4>
   14240:	mov	r2, #116	; 0x74
   14244:	b	14254 <__assert_fail@plt+0x2f04>
   14248:	mov	r0, #98	; 0x62
   1424c:	b	14434 <__assert_fail@plt+0x30e4>
   14250:	mov	r2, #114	; 0x72
   14254:	ldr	r0, [sp, #64]	; 0x40
   14258:	tst	r0, #1
   1425c:	mov	r0, r2
   14260:	bne	14434 <__assert_fail@plt+0x30e4>
   14264:	b	14b58 <__assert_fail@plt+0x3808>
   14268:	ldr	r0, [sp, #84]	; 0x54
   1426c:	tst	r0, #1
   14270:	beq	14524 <__assert_fail@plt+0x31d4>
   14274:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14278:	tst	r0, #1
   1427c:	bne	14b58 <__assert_fail@plt+0x3808>
   14280:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14284:	cmp	r0, #2
   14288:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1428c:	movwne	r0, #1
   14290:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14294:	orr	r0, r0, r2
   14298:	tst	r0, #1
   1429c:	beq	14918 <__assert_fail@plt+0x35c8>
   142a0:	mov	r0, r8
   142a4:	b	1494c <__assert_fail@plt+0x35fc>
   142a8:	mov	sl, #0
   142ac:	mov	r5, #63	; 0x3f
   142b0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   142b4:	cmp	r0, #5
   142b8:	beq	146d8 <__assert_fail@plt+0x3388>
   142bc:	cmp	r0, #2
   142c0:	bne	14778 <__assert_fail@plt+0x3428>
   142c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   142c8:	tst	r0, #1
   142cc:	mov	r9, #0
   142d0:	beq	141cc <__assert_fail@plt+0x2e7c>
   142d4:	b	14b58 <__assert_fail@plt+0x3808>
   142d8:	mov	r0, #118	; 0x76
   142dc:	b	14434 <__assert_fail@plt+0x30e4>
   142e0:	mov	r5, #39	; 0x27
   142e4:	mov	r0, #1
   142e8:	str	r0, [sp, #56]	; 0x38
   142ec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   142f0:	cmp	r0, #2
   142f4:	bne	14544 <__assert_fail@plt+0x31f4>
   142f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   142fc:	tst	r0, #1
   14300:	bne	14b58 <__assert_fail@plt+0x3808>
   14304:	ldr	r2, [sp, #72]	; 0x48
   14308:	cmp	r2, #0
   1430c:	mov	r0, r2
   14310:	movwne	r0, #1
   14314:	clz	r1, r4
   14318:	lsr	r1, r1, #5
   1431c:	orrs	r0, r0, r1
   14320:	moveq	r2, r4
   14324:	str	r2, [sp, #72]	; 0x48
   14328:	moveq	r4, r0
   1432c:	cmp	r8, r4
   14330:	movcc	r0, #39	; 0x27
   14334:	strbcc	r0, [r7, r8]
   14338:	add	r0, r8, #1
   1433c:	cmp	r0, r4
   14340:	movcc	r1, #92	; 0x5c
   14344:	strbcc	r1, [r7, r0]
   14348:	add	r0, r8, #2
   1434c:	cmp	r0, r4
   14350:	movcc	r1, #39	; 0x27
   14354:	strbcc	r1, [r7, r0]
   14358:	add	r8, r8, #3
   1435c:	mov	r0, #0
   14360:	str	r0, [fp, #-56]	; 0xffffffc8
   14364:	mov	sl, #0
   14368:	mov	r9, #1
   1436c:	b	141cc <__assert_fail@plt+0x2e7c>
   14370:	str	r4, [sp, #24]
   14374:	ldr	r0, [sp, #40]	; 0x28
   14378:	cmp	r0, #1
   1437c:	bne	1454c <__assert_fail@plt+0x31fc>
   14380:	str	lr, [sp, #28]
   14384:	bl	1120c <__ctype_b_loc@plt>
   14388:	ldr	ip, [fp, #-84]	; 0xffffffac
   1438c:	ldr	r0, [r0]
   14390:	add	r0, r0, r5, lsl #1
   14394:	ldrb	r0, [r0, #1]
   14398:	ubfx	r9, r0, #6, #1
   1439c:	mov	r1, #1
   143a0:	ldr	r4, [sp, #24]
   143a4:	ldr	r0, [sp, #52]	; 0x34
   143a8:	orr	r0, r9, r0
   143ac:	mov	r2, r1
   143b0:	cmp	r1, #1
   143b4:	bhi	14780 <__assert_fail@plt+0x3430>
   143b8:	tst	r0, #1
   143bc:	beq	14780 <__assert_fail@plt+0x3430>
   143c0:	ldr	lr, [sp, #28]
   143c4:	b	141cc <__assert_fail@plt+0x2e7c>
   143c8:	cmp	r6, #0
   143cc:	ldrbeq	r0, [ip, #1]
   143d0:	cmpeq	r0, #0
   143d4:	beq	143e4 <__assert_fail@plt+0x3094>
   143d8:	mvn	lr, #0
   143dc:	mov	sl, #0
   143e0:	b	141cc <__assert_fail@plt+0x2e7c>
   143e4:	mov	r1, #1
   143e8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   143ec:	cmp	r0, #2
   143f0:	bne	14408 <__assert_fail@plt+0x30b8>
   143f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   143f8:	tst	r0, #1
   143fc:	mov	r9, r1
   14400:	beq	141cc <__assert_fail@plt+0x2e7c>
   14404:	b	14b58 <__assert_fail@plt+0x3808>
   14408:	mov	r9, r1
   1440c:	b	141cc <__assert_fail@plt+0x2e7c>
   14410:	mov	sl, #0
   14414:	mov	r0, #92	; 0x5c
   14418:	ldr	r1, [sp, #48]	; 0x30
   1441c:	cmp	r1, #0
   14420:	beq	14434 <__assert_fail@plt+0x30e4>
   14424:	mov	r9, #0
   14428:	cmp	sl, #0
   1442c:	beq	149e4 <__assert_fail@plt+0x3694>
   14430:	b	14a20 <__assert_fail@plt+0x36d0>
   14434:	mov	r9, #0
   14438:	ldr	r1, [sp, #84]	; 0x54
   1443c:	tst	r1, #1
   14440:	mov	sl, #0
   14444:	bne	14484 <__assert_fail@plt+0x3134>
   14448:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1444c:	cmp	r0, #0
   14450:	mov	r0, r5
   14454:	beq	14478 <__assert_fail@plt+0x3128>
   14458:	ubfx	r0, r5, #5, #3
   1445c:	ldr	r1, [fp, #16]
   14460:	ldr	r0, [r1, r0, lsl #2]
   14464:	and	r1, r5, #31
   14468:	mov	r2, #1
   1446c:	tst	r0, r2, lsl r1
   14470:	mov	r0, r5
   14474:	bne	14484 <__assert_fail@plt+0x3134>
   14478:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1447c:	cmp	r1, #0
   14480:	beq	149dc <__assert_fail@plt+0x368c>
   14484:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14488:	tst	r1, #1
   1448c:	bne	14b58 <__assert_fail@plt+0x3808>
   14490:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14494:	cmp	r1, #2
   14498:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1449c:	movwne	r1, #1
   144a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   144a4:	orr	r1, r1, r2
   144a8:	tst	r1, #1
   144ac:	beq	144b8 <__assert_fail@plt+0x3168>
   144b0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   144b4:	b	144f4 <__assert_fail@plt+0x31a4>
   144b8:	cmp	r8, r4
   144bc:	movcc	r1, #39	; 0x27
   144c0:	strbcc	r1, [r7, r8]
   144c4:	add	r1, r8, #1
   144c8:	cmp	r1, r4
   144cc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   144d0:	movcc	r2, #36	; 0x24
   144d4:	strbcc	r2, [r7, r1]
   144d8:	add	r1, r8, #2
   144dc:	cmp	r1, r4
   144e0:	movcc	r2, #39	; 0x27
   144e4:	strbcc	r2, [r7, r1]
   144e8:	add	r8, r8, #3
   144ec:	mov	r1, #1
   144f0:	str	r1, [fp, #-56]	; 0xffffffc8
   144f4:	cmp	r8, r4
   144f8:	movcc	r1, #92	; 0x5c
   144fc:	strbcc	r1, [r7, r8]
   14500:	add	r8, r8, #1
   14504:	cmp	r8, r4
   14508:	strbcc	r0, [r7, r8]
   1450c:	and	r5, r5, r9
   14510:	add	r8, r8, #1
   14514:	add	r6, r6, #1
   14518:	cmn	lr, #1
   1451c:	bne	13ef8 <__assert_fail@plt+0x2ba8>
   14520:	b	13f04 <__assert_fail@plt+0x2bb4>
   14524:	mov	r9, #0
   14528:	ldr	r0, [sp, #36]	; 0x24
   1452c:	cmp	r0, #0
   14530:	mov	sl, #0
   14534:	mov	r5, #0
   14538:	beq	14448 <__assert_fail@plt+0x30f8>
   1453c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14540:	b	14514 <__assert_fail@plt+0x31c4>
   14544:	mov	r9, #1
   14548:	b	141cc <__assert_fail@plt+0x2e7c>
   1454c:	mov	r0, #0
   14550:	str	r0, [fp, #-36]	; 0xffffffdc
   14554:	str	r0, [fp, #-40]	; 0xffffffd8
   14558:	cmn	lr, #1
   1455c:	bne	14570 <__assert_fail@plt+0x3220>
   14560:	mov	r0, ip
   14564:	bl	11230 <strlen@plt>
   14568:	ldr	ip, [fp, #-84]	; 0xffffffac
   1456c:	mov	lr, r0
   14570:	add	r0, ip, r6
   14574:	str	r0, [sp, #20]
   14578:	mov	r9, #1
   1457c:	mov	r7, #0
   14580:	sub	r4, fp, #40	; 0x28
   14584:	str	lr, [sp, #28]
   14588:	str	r7, [sp, #44]	; 0x2c
   1458c:	add	r7, r7, r6
   14590:	add	r1, ip, r7
   14594:	sub	r2, lr, r7
   14598:	sub	r0, fp, #44	; 0x2c
   1459c:	mov	r3, r4
   145a0:	bl	17220 <__assert_fail@plt+0x5ed0>
   145a4:	cmp	r0, #0
   145a8:	beq	14a68 <__assert_fail@plt+0x3718>
   145ac:	cmn	r0, #1
   145b0:	beq	14a28 <__assert_fail@plt+0x36d8>
   145b4:	cmn	r0, #2
   145b8:	ldr	lr, [sp, #28]
   145bc:	beq	14a30 <__assert_fail@plt+0x36e0>
   145c0:	cmp	r0, #2
   145c4:	mov	r1, #0
   145c8:	movwcc	r1, #1
   145cc:	ldr	r2, [sp, #60]	; 0x3c
   145d0:	eor	r2, r2, #1
   145d4:	orrs	r1, r2, r1
   145d8:	ldr	r4, [sp, #24]
   145dc:	bne	1469c <__assert_fail@plt+0x334c>
   145e0:	ldr	r1, [sp, #44]	; 0x2c
   145e4:	ldr	r2, [sp, #20]
   145e8:	add	r1, r2, r1
   145ec:	mov	r2, #1
   145f0:	ldrb	r3, [r1, r2]
   145f4:	sub	r3, r3, #91	; 0x5b
   145f8:	cmp	r3, #33	; 0x21
   145fc:	bhi	14690 <__assert_fail@plt+0x3340>
   14600:	add	r7, pc, #0
   14604:	ldr	pc, [r7, r3, lsl #2]
   14608:	andeq	r4, r1, r0, asr fp
   1460c:	andeq	r4, r1, r0, asr fp
   14610:	muleq	r1, r0, r6
   14614:	andeq	r4, r1, r0, asr fp
   14618:	muleq	r1, r0, r6
   1461c:	andeq	r4, r1, r0, asr fp
   14620:	muleq	r1, r0, r6
   14624:	muleq	r1, r0, r6
   14628:	muleq	r1, r0, r6
   1462c:	muleq	r1, r0, r6
   14630:	muleq	r1, r0, r6
   14634:	muleq	r1, r0, r6
   14638:	muleq	r1, r0, r6
   1463c:	muleq	r1, r0, r6
   14640:	muleq	r1, r0, r6
   14644:	muleq	r1, r0, r6
   14648:	muleq	r1, r0, r6
   1464c:	muleq	r1, r0, r6
   14650:	muleq	r1, r0, r6
   14654:	muleq	r1, r0, r6
   14658:	muleq	r1, r0, r6
   1465c:	muleq	r1, r0, r6
   14660:	muleq	r1, r0, r6
   14664:	muleq	r1, r0, r6
   14668:	muleq	r1, r0, r6
   1466c:	muleq	r1, r0, r6
   14670:	muleq	r1, r0, r6
   14674:	muleq	r1, r0, r6
   14678:	muleq	r1, r0, r6
   1467c:	muleq	r1, r0, r6
   14680:	muleq	r1, r0, r6
   14684:	muleq	r1, r0, r6
   14688:	muleq	r1, r0, r6
   1468c:	andeq	r4, r1, r0, asr fp
   14690:	add	r2, r2, #1
   14694:	cmp	r2, r0
   14698:	bcc	145f0 <__assert_fail@plt+0x32a0>
   1469c:	ldr	r7, [sp, #44]	; 0x2c
   146a0:	add	r7, r0, r7
   146a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   146a8:	bl	11158 <iswprint@plt>
   146ac:	cmp	r0, #0
   146b0:	movwne	r0, #1
   146b4:	and	r9, r9, r0
   146b8:	sub	r4, fp, #40	; 0x28
   146bc:	mov	r0, r4
   146c0:	bl	11104 <mbsinit@plt>
   146c4:	ldr	lr, [sp, #28]
   146c8:	cmp	r0, #0
   146cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   146d0:	beq	14588 <__assert_fail@plt+0x3238>
   146d4:	b	14a70 <__assert_fail@plt+0x3720>
   146d8:	ldr	r0, [sp, #32]
   146dc:	cmp	r0, #0
   146e0:	beq	14778 <__assert_fail@plt+0x3428>
   146e4:	add	r0, r6, #2
   146e8:	cmp	r0, lr
   146ec:	bcs	14778 <__assert_fail@plt+0x3428>
   146f0:	add	r1, ip, r6
   146f4:	ldrb	r1, [r1, #1]
   146f8:	cmp	r1, #63	; 0x3f
   146fc:	bne	14778 <__assert_fail@plt+0x3428>
   14700:	ldrb	r9, [ip, r0]
   14704:	sub	r2, r9, #33	; 0x21
   14708:	cmp	r2, #29
   1470c:	bhi	14778 <__assert_fail@plt+0x3428>
   14710:	mov	r3, #1
   14714:	movw	r1, #20929	; 0x51c1
   14718:	movt	r1, #14336	; 0x3800
   1471c:	tst	r1, r3, lsl r2
   14720:	beq	14778 <__assert_fail@plt+0x3428>
   14724:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14728:	tst	r1, #1
   1472c:	bne	14b58 <__assert_fail@plt+0x3808>
   14730:	cmp	r8, r4
   14734:	movcc	r1, #63	; 0x3f
   14738:	strbcc	r1, [r7, r8]
   1473c:	add	r2, r8, #1
   14740:	cmp	r2, r4
   14744:	movcc	r1, #34	; 0x22
   14748:	strbcc	r1, [r7, r2]
   1474c:	add	r2, r8, #2
   14750:	cmp	r2, r4
   14754:	movcc	r1, #34	; 0x22
   14758:	strbcc	r1, [r7, r2]
   1475c:	add	r2, r8, #3
   14760:	cmp	r2, r4
   14764:	movcc	r1, #63	; 0x3f
   14768:	strbcc	r1, [r7, r2]
   1476c:	add	r8, r8, #4
   14770:	mov	r6, r0
   14774:	mov	r5, r9
   14778:	mov	r9, #0
   1477c:	b	141cc <__assert_fail@plt+0x2e7c>
   14780:	add	r1, r2, r6
   14784:	str	r1, [sp, #44]	; 0x2c
   14788:	add	r1, r6, #1
   1478c:	mov	r3, #0
   14790:	ldr	lr, [sp, #28]
   14794:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14798:	tst	r0, #1
   1479c:	bne	14890 <__assert_fail@plt+0x3540>
   147a0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   147a4:	tst	r2, #1
   147a8:	bne	14b58 <__assert_fail@plt+0x3808>
   147ac:	cmp	r6, #2
   147b0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   147b4:	movwne	r3, #1
   147b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   147bc:	orr	r3, r3, r2
   147c0:	tst	r3, #1
   147c4:	bne	14800 <__assert_fail@plt+0x34b0>
   147c8:	cmp	r8, r4
   147cc:	movcc	r2, #39	; 0x27
   147d0:	strbcc	r2, [r7, r8]
   147d4:	add	r3, r8, #1
   147d8:	cmp	r3, r4
   147dc:	movcc	r2, #36	; 0x24
   147e0:	strbcc	r2, [r7, r3]
   147e4:	add	r3, r8, #2
   147e8:	cmp	r3, r4
   147ec:	movcc	r2, #39	; 0x27
   147f0:	strbcc	r2, [r7, r3]
   147f4:	add	r8, r8, #3
   147f8:	mov	r2, #1
   147fc:	str	r2, [fp, #-56]	; 0xffffffc8
   14800:	cmp	r8, r4
   14804:	movcc	r2, #92	; 0x5c
   14808:	strbcc	r2, [r7, r8]
   1480c:	add	r3, r8, #1
   14810:	cmp	r3, r4
   14814:	bcs	14834 <__assert_fail@plt+0x34e4>
   14818:	and	r7, r5, #192	; 0xc0
   1481c:	mov	r2, #48	; 0x30
   14820:	orr	r7, r2, r7, lsr #6
   14824:	ldr	r6, [sp, #80]	; 0x50
   14828:	strb	r7, [r6, r3]
   1482c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14830:	ldr	r7, [sp, #80]	; 0x50
   14834:	add	r3, r8, #2
   14838:	cmp	r3, r4
   1483c:	bcs	1485c <__assert_fail@plt+0x350c>
   14840:	lsr	r7, r5, #3
   14844:	mov	r2, #6
   14848:	bfi	r7, r2, #3, #29
   1484c:	ldr	r6, [sp, #80]	; 0x50
   14850:	strb	r7, [r6, r3]
   14854:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14858:	ldr	r7, [sp, #80]	; 0x50
   1485c:	mov	r2, #6
   14860:	bfi	r5, r2, #3, #29
   14864:	add	r8, r8, #3
   14868:	mov	r3, #1
   1486c:	b	148b4 <__assert_fail@plt+0x3564>
   14870:	ldr	r7, [sp, #80]	; 0x50
   14874:	cmp	r8, r4
   14878:	strbcc	r5, [r7, r8]
   1487c:	ldrb	r5, [ip, r1]
   14880:	add	r1, r1, #1
   14884:	add	r8, r8, #1
   14888:	tst	r0, #1
   1488c:	beq	147a0 <__assert_fail@plt+0x3450>
   14890:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14894:	tst	r2, #1
   14898:	beq	148ac <__assert_fail@plt+0x355c>
   1489c:	cmp	r8, r4
   148a0:	movcc	r2, #92	; 0x5c
   148a4:	strbcc	r2, [r7, r8]
   148a8:	add	r8, r8, #1
   148ac:	mov	r2, #0
   148b0:	str	r2, [fp, #-52]	; 0xffffffcc
   148b4:	and	sl, r3, #1
   148b8:	ldr	r2, [sp, #44]	; 0x2c
   148bc:	cmp	r2, r1
   148c0:	bls	149cc <__assert_fail@plt+0x367c>
   148c4:	cmp	sl, #0
   148c8:	movwne	sl, #1
   148cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   148d0:	mvn	r7, r2
   148d4:	orr	r7, r7, sl
   148d8:	tst	r7, #1
   148dc:	bne	14870 <__assert_fail@plt+0x3520>
   148e0:	cmp	r8, r4
   148e4:	ldrcc	r7, [sp, #80]	; 0x50
   148e8:	movcc	r2, #39	; 0x27
   148ec:	strbcc	r2, [r7, r8]
   148f0:	add	r7, r8, #1
   148f4:	cmp	r7, r4
   148f8:	ldrcc	r6, [sp, #80]	; 0x50
   148fc:	movcc	r2, #39	; 0x27
   14900:	strbcc	r2, [r6, r7]
   14904:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   14908:	add	r8, r8, #2
   1490c:	mov	r2, #0
   14910:	str	r2, [fp, #-56]	; 0xffffffc8
   14914:	b	14870 <__assert_fail@plt+0x3520>
   14918:	cmp	r8, r4
   1491c:	movcc	r0, #39	; 0x27
   14920:	strbcc	r0, [r7, r8]
   14924:	add	r0, r8, #1
   14928:	cmp	r0, r4
   1492c:	movcc	r1, #36	; 0x24
   14930:	strbcc	r1, [r7, r0]
   14934:	add	r0, r8, #2
   14938:	cmp	r0, r4
   1493c:	movcc	r1, #39	; 0x27
   14940:	strbcc	r1, [r7, r0]
   14944:	add	r0, r8, #3
   14948:	mov	r2, #1
   1494c:	cmp	r0, r4
   14950:	movcc	r1, #92	; 0x5c
   14954:	strbcc	r1, [r7, r0]
   14958:	str	r2, [fp, #-56]	; 0xffffffc8
   1495c:	add	r8, r0, #1
   14960:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14964:	cmp	r1, #2
   14968:	beq	149bc <__assert_fail@plt+0x366c>
   1496c:	add	r1, r6, #1
   14970:	mov	r9, #0
   14974:	mov	sl, #1
   14978:	mov	r5, #48	; 0x30
   1497c:	cmp	r1, lr
   14980:	bcs	141cc <__assert_fail@plt+0x2e7c>
   14984:	ldrb	r1, [ip, r1]
   14988:	sub	r1, r1, #48	; 0x30
   1498c:	uxtb	r1, r1
   14990:	cmp	r1, #9
   14994:	bhi	141cc <__assert_fail@plt+0x2e7c>
   14998:	cmp	r8, r4
   1499c:	movcc	r1, #48	; 0x30
   149a0:	strbcc	r1, [r7, r8]
   149a4:	add	r1, r0, #2
   149a8:	cmp	r1, r4
   149ac:	movcc	r2, #48	; 0x30
   149b0:	strbcc	r2, [r7, r1]
   149b4:	add	r8, r0, #3
   149b8:	b	141cc <__assert_fail@plt+0x2e7c>
   149bc:	mov	r0, #48	; 0x30
   149c0:	mov	sl, #1
   149c4:	mov	r9, #0
   149c8:	b	14478 <__assert_fail@plt+0x3128>
   149cc:	sub	r6, r1, #1
   149d0:	cmp	sl, #0
   149d4:	movwne	sl, #1
   149d8:	mov	r0, r5
   149dc:	cmp	sl, #0
   149e0:	bne	14a20 <__assert_fail@plt+0x36d0>
   149e4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   149e8:	tst	r1, #1
   149ec:	beq	14a20 <__assert_fail@plt+0x36d0>
   149f0:	cmp	r8, r4
   149f4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   149f8:	movcc	r1, #39	; 0x27
   149fc:	strbcc	r1, [r7, r8]
   14a00:	add	r1, r8, #1
   14a04:	cmp	r1, r4
   14a08:	movcc	r2, #39	; 0x27
   14a0c:	strbcc	r2, [r7, r1]
   14a10:	add	r8, r8, #2
   14a14:	mov	r1, #0
   14a18:	str	r1, [fp, #-56]	; 0xffffffc8
   14a1c:	b	14504 <__assert_fail@plt+0x31b4>
   14a20:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14a24:	b	14504 <__assert_fail@plt+0x31b4>
   14a28:	mov	r9, #0
   14a2c:	b	14a68 <__assert_fail@plt+0x3718>
   14a30:	mov	r9, #0
   14a34:	cmp	r7, lr
   14a38:	bcs	14a68 <__assert_fail@plt+0x3718>
   14a3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a40:	ldr	r7, [sp, #44]	; 0x2c
   14a44:	ldr	r0, [sp, #20]
   14a48:	ldrb	r0, [r0, r7]
   14a4c:	cmp	r0, #0
   14a50:	beq	14a70 <__assert_fail@plt+0x3720>
   14a54:	add	r7, r7, #1
   14a58:	add	r0, r6, r7
   14a5c:	cmp	r0, lr
   14a60:	bcc	14a44 <__assert_fail@plt+0x36f4>
   14a64:	b	14a70 <__assert_fail@plt+0x3720>
   14a68:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a6c:	ldr	r7, [sp, #44]	; 0x2c
   14a70:	mov	r1, r7
   14a74:	ldr	r7, [sp, #80]	; 0x50
   14a78:	b	143a0 <__assert_fail@plt+0x3050>
   14a7c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14a80:	eor	r0, r1, #2
   14a84:	orr	r0, r0, r8
   14a88:	clz	r0, r0
   14a8c:	lsr	r0, r0, #5
   14a90:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14a94:	tst	r2, r0
   14a98:	bne	14b58 <__assert_fail@plt+0x3808>
   14a9c:	cmp	r1, #2
   14aa0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14aa4:	movwne	r0, #1
   14aa8:	orr	r0, r2, r0
   14aac:	tst	r0, #1
   14ab0:	ldreq	r0, [sp, #56]	; 0x38
   14ab4:	eoreq	r0, r0, #1
   14ab8:	tsteq	r0, #1
   14abc:	bne	14af0 <__assert_fail@plt+0x37a0>
   14ac0:	mov	r9, lr
   14ac4:	tst	r5, #1
   14ac8:	bne	14bc0 <__assert_fail@plt+0x3870>
   14acc:	ldr	r0, [sp, #72]	; 0x48
   14ad0:	cmp	r0, #0
   14ad4:	beq	14af0 <__assert_fail@plt+0x37a0>
   14ad8:	mov	r5, #0
   14adc:	cmp	r4, #0
   14ae0:	ldr	r0, [sp, #84]	; 0x54
   14ae4:	mov	sl, r2
   14ae8:	ldr	r6, [sp, #72]	; 0x48
   14aec:	beq	13c88 <__assert_fail@plt+0x2938>
   14af0:	ldr	r1, [sp, #92]	; 0x5c
   14af4:	clz	r0, r1
   14af8:	lsr	r0, r0, #5
   14afc:	orr	r0, r0, r2
   14b00:	tst	r0, #1
   14b04:	bne	14b30 <__assert_fail@plt+0x37e0>
   14b08:	ldrb	r0, [r1]
   14b0c:	cmp	r0, #0
   14b10:	beq	14b30 <__assert_fail@plt+0x37e0>
   14b14:	add	r1, r1, #1
   14b18:	cmp	r8, r4
   14b1c:	strbcc	r0, [r7, r8]
   14b20:	add	r8, r8, #1
   14b24:	ldrb	r0, [r1], #1
   14b28:	cmp	r0, #0
   14b2c:	bne	14b18 <__assert_fail@plt+0x37c8>
   14b30:	cmp	r8, r4
   14b34:	movcc	r0, #0
   14b38:	strbcc	r0, [r7, r8]
   14b3c:	b	14bb4 <__assert_fail@plt+0x3864>
   14b40:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b44:	mov	lr, r4
   14b48:	mov	r4, r5
   14b4c:	b	14b58 <__assert_fail@plt+0x3808>
   14b50:	ldr	r7, [sp, #80]	; 0x50
   14b54:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b58:	mov	r0, #0
   14b5c:	ldr	r1, [fp, #12]
   14b60:	bic	r1, r1, #2
   14b64:	ldr	r2, [sp, #84]	; 0x54
   14b68:	tst	r2, #1
   14b6c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14b70:	mov	r2, r3
   14b74:	movwne	r2, #4
   14b78:	cmp	r3, #2
   14b7c:	movne	r2, r3
   14b80:	str	r2, [sp]
   14b84:	str	r1, [sp, #4]
   14b88:	str	r0, [sp, #8]
   14b8c:	ldr	r0, [sp, #68]	; 0x44
   14b90:	str	r0, [sp, #12]
   14b94:	ldr	r0, [sp, #76]	; 0x4c
   14b98:	str	r0, [sp, #16]
   14b9c:	mov	r0, r7
   14ba0:	mov	r1, r4
   14ba4:	mov	r2, ip
   14ba8:	mov	r3, lr
   14bac:	bl	13c00 <__assert_fail@plt+0x28b0>
   14bb0:	mov	r8, r0
   14bb4:	mov	r0, r8
   14bb8:	sub	sp, fp, #28
   14bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bc0:	mov	r0, #5
   14bc4:	str	r0, [sp]
   14bc8:	ldr	r0, [fp, #12]
   14bcc:	str	r0, [sp, #4]
   14bd0:	ldr	r0, [fp, #16]
   14bd4:	str	r0, [sp, #8]
   14bd8:	ldr	r0, [sp, #68]	; 0x44
   14bdc:	str	r0, [sp, #12]
   14be0:	ldr	r0, [sp, #76]	; 0x4c
   14be4:	str	r0, [sp, #16]
   14be8:	mov	r0, r7
   14bec:	ldr	r1, [sp, #72]	; 0x48
   14bf0:	ldr	r2, [fp, #-84]	; 0xffffffac
   14bf4:	mov	r3, r9
   14bf8:	b	14bac <__assert_fail@plt+0x385c>
   14bfc:	bl	11320 <abort@plt>
   14c00:	mov	r3, r2
   14c04:	mov	r2, #0
   14c08:	b	14c0c <__assert_fail@plt+0x38bc>
   14c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c10:	add	fp, sp, #28
   14c14:	sub	sp, sp, #36	; 0x24
   14c18:	mov	r4, r2
   14c1c:	str	r2, [sp, #24]
   14c20:	mov	r5, r1
   14c24:	mov	r6, r0
   14c28:	str	r0, [sp, #20]
   14c2c:	movw	r8, #37384	; 0x9208
   14c30:	movt	r8, #2
   14c34:	cmp	r3, #0
   14c38:	movne	r8, r3
   14c3c:	bl	11248 <__errno_location@plt>
   14c40:	str	r0, [sp, #28]
   14c44:	ldm	r8, {r3, r9}
   14c48:	ldr	r1, [r8, #40]	; 0x28
   14c4c:	ldr	r2, [r8, #44]	; 0x2c
   14c50:	ldr	r7, [r0]
   14c54:	str	r7, [sp, #32]
   14c58:	add	sl, r8, #8
   14c5c:	cmp	r4, #0
   14c60:	orreq	r9, r9, #1
   14c64:	stm	sp, {r3, r9, sl}
   14c68:	str	r1, [sp, #12]
   14c6c:	str	r2, [sp, #16]
   14c70:	mov	r0, #0
   14c74:	mov	r1, #0
   14c78:	mov	r2, r6
   14c7c:	mov	r3, r5
   14c80:	mov	r7, r5
   14c84:	bl	13c00 <__assert_fail@plt+0x28b0>
   14c88:	mov	r5, r0
   14c8c:	add	r4, r0, #1
   14c90:	mov	r0, r4
   14c94:	bl	15bc4 <__assert_fail@plt+0x4874>
   14c98:	mov	r6, r0
   14c9c:	ldr	r0, [r8]
   14ca0:	ldr	r1, [r8, #40]	; 0x28
   14ca4:	ldr	r2, [r8, #44]	; 0x2c
   14ca8:	stm	sp, {r0, r9, sl}
   14cac:	str	r1, [sp, #12]
   14cb0:	str	r2, [sp, #16]
   14cb4:	mov	r0, r6
   14cb8:	mov	r1, r4
   14cbc:	ldr	r2, [sp, #20]
   14cc0:	mov	r3, r7
   14cc4:	bl	13c00 <__assert_fail@plt+0x28b0>
   14cc8:	ldr	r0, [sp, #24]
   14ccc:	ldr	r1, [sp, #32]
   14cd0:	ldr	r2, [sp, #28]
   14cd4:	str	r1, [r2]
   14cd8:	cmp	r0, #0
   14cdc:	strne	r5, [r0]
   14ce0:	mov	r0, r6
   14ce4:	sub	sp, fp, #28
   14ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14cf0:	add	fp, sp, #24
   14cf4:	movw	r8, #37152	; 0x9120
   14cf8:	movt	r8, #2
   14cfc:	ldr	r4, [r8]
   14d00:	movw	r5, #37156	; 0x9124
   14d04:	movt	r5, #2
   14d08:	ldr	r0, [r5]
   14d0c:	cmp	r0, #2
   14d10:	blt	14d3c <__assert_fail@plt+0x39ec>
   14d14:	add	r7, r4, #12
   14d18:	mov	r6, #0
   14d1c:	ldr	r0, [r7, r6, lsl #3]
   14d20:	bl	13740 <__assert_fail@plt+0x23f0>
   14d24:	add	r0, r6, #1
   14d28:	ldr	r1, [r5]
   14d2c:	add	r2, r6, #2
   14d30:	cmp	r2, r1
   14d34:	mov	r6, r0
   14d38:	blt	14d1c <__assert_fail@plt+0x39cc>
   14d3c:	ldr	r0, [r4, #4]
   14d40:	movw	r7, #37432	; 0x9238
   14d44:	movt	r7, #2
   14d48:	cmp	r0, r7
   14d4c:	beq	14d64 <__assert_fail@plt+0x3a14>
   14d50:	bl	13740 <__assert_fail@plt+0x23f0>
   14d54:	movw	r0, #37160	; 0x9128
   14d58:	movt	r0, #2
   14d5c:	mov	r6, #256	; 0x100
   14d60:	strd	r6, [r0]
   14d64:	movw	r6, #37160	; 0x9128
   14d68:	movt	r6, #2
   14d6c:	cmp	r4, r6
   14d70:	beq	14d80 <__assert_fail@plt+0x3a30>
   14d74:	mov	r0, r4
   14d78:	bl	13740 <__assert_fail@plt+0x23f0>
   14d7c:	str	r6, [r8]
   14d80:	mov	r0, #1
   14d84:	str	r0, [r5]
   14d88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d8c:	movw	r3, #37384	; 0x9208
   14d90:	movt	r3, #2
   14d94:	mvn	r2, #0
   14d98:	b	14d9c <__assert_fail@plt+0x3a4c>
   14d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14da0:	add	fp, sp, #28
   14da4:	sub	sp, sp, #44	; 0x2c
   14da8:	mov	r7, r3
   14dac:	str	r2, [sp, #36]	; 0x24
   14db0:	str	r1, [sp, #32]
   14db4:	mov	r5, r0
   14db8:	bl	11248 <__errno_location@plt>
   14dbc:	cmp	r5, #0
   14dc0:	blt	14f2c <__assert_fail@plt+0x3bdc>
   14dc4:	cmn	r5, #-2147483647	; 0x80000001
   14dc8:	beq	14f2c <__assert_fail@plt+0x3bdc>
   14dcc:	movw	r4, #37152	; 0x9120
   14dd0:	movt	r4, #2
   14dd4:	ldr	r6, [r4]
   14dd8:	str	r0, [sp, #28]
   14ddc:	ldr	r0, [r0]
   14de0:	str	r0, [sp, #24]
   14de4:	movw	r8, #37156	; 0x9124
   14de8:	movt	r8, #2
   14dec:	ldr	r1, [r8]
   14df0:	cmp	r1, r5
   14df4:	ble	14e00 <__assert_fail@plt+0x3ab0>
   14df8:	mov	sl, r6
   14dfc:	b	14e68 <__assert_fail@plt+0x3b18>
   14e00:	str	r1, [fp, #-32]	; 0xffffffe0
   14e04:	mov	r0, #8
   14e08:	str	r0, [sp]
   14e0c:	movw	r9, #37160	; 0x9128
   14e10:	movt	r9, #2
   14e14:	subs	r0, r6, r9
   14e18:	movne	r0, r6
   14e1c:	add	r2, r5, #1
   14e20:	sub	r2, r2, r1
   14e24:	sub	r1, fp, #32
   14e28:	mvn	r3, #-2147483648	; 0x80000000
   14e2c:	bl	15cac <__assert_fail@plt+0x495c>
   14e30:	mov	sl, r0
   14e34:	str	r0, [r4]
   14e38:	cmp	r6, r9
   14e3c:	ldrdeq	r0, [r9]
   14e40:	stmeq	sl, {r0, r1}
   14e44:	ldr	r1, [r8]
   14e48:	add	r0, sl, r1, lsl #3
   14e4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14e50:	sub	r1, r2, r1
   14e54:	lsl	r2, r1, #3
   14e58:	mov	r1, #0
   14e5c:	bl	11260 <memset@plt>
   14e60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14e64:	str	r0, [r8]
   14e68:	mov	r9, sl
   14e6c:	ldr	r6, [r9, r5, lsl #3]!
   14e70:	ldr	r4, [r9, #4]!
   14e74:	ldm	r7, {r0, r1}
   14e78:	ldr	r2, [r7, #40]	; 0x28
   14e7c:	ldr	r3, [r7, #44]	; 0x2c
   14e80:	orr	r8, r1, #1
   14e84:	add	r1, r7, #8
   14e88:	stm	sp, {r0, r8}
   14e8c:	str	r1, [sp, #20]
   14e90:	add	r0, sp, #8
   14e94:	stm	r0, {r1, r2, r3}
   14e98:	mov	r0, r4
   14e9c:	mov	r1, r6
   14ea0:	ldr	r2, [sp, #32]
   14ea4:	ldr	r3, [sp, #36]	; 0x24
   14ea8:	bl	13c00 <__assert_fail@plt+0x28b0>
   14eac:	cmp	r6, r0
   14eb0:	bhi	14f14 <__assert_fail@plt+0x3bc4>
   14eb4:	add	r6, r0, #1
   14eb8:	str	r6, [sl, r5, lsl #3]
   14ebc:	movw	r0, #37432	; 0x9238
   14ec0:	movt	r0, #2
   14ec4:	cmp	r4, r0
   14ec8:	beq	14ed4 <__assert_fail@plt+0x3b84>
   14ecc:	mov	r0, r4
   14ed0:	bl	13740 <__assert_fail@plt+0x23f0>
   14ed4:	mov	r0, r6
   14ed8:	bl	15bc4 <__assert_fail@plt+0x4874>
   14edc:	mov	r4, r0
   14ee0:	str	r0, [r9]
   14ee4:	ldr	r0, [r7]
   14ee8:	ldr	r1, [r7, #40]	; 0x28
   14eec:	ldr	r2, [r7, #44]	; 0x2c
   14ef0:	stm	sp, {r0, r8}
   14ef4:	ldr	r0, [sp, #20]
   14ef8:	add	r3, sp, #8
   14efc:	stm	r3, {r0, r1, r2}
   14f00:	mov	r0, r4
   14f04:	mov	r1, r6
   14f08:	ldr	r2, [sp, #32]
   14f0c:	ldr	r3, [sp, #36]	; 0x24
   14f10:	bl	13c00 <__assert_fail@plt+0x28b0>
   14f14:	ldr	r0, [sp, #28]
   14f18:	ldr	r1, [sp, #24]
   14f1c:	str	r1, [r0]
   14f20:	mov	r0, r4
   14f24:	sub	sp, fp, #28
   14f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f2c:	bl	11320 <abort@plt>
   14f30:	movw	r3, #37384	; 0x9208
   14f34:	movt	r3, #2
   14f38:	b	14d9c <__assert_fail@plt+0x3a4c>
   14f3c:	mov	r1, r0
   14f40:	mov	r0, #0
   14f44:	b	14d8c <__assert_fail@plt+0x3a3c>
   14f48:	mov	r2, r1
   14f4c:	mov	r1, r0
   14f50:	mov	r0, #0
   14f54:	b	14f30 <__assert_fail@plt+0x3be0>
   14f58:	push	{r4, r5, r6, sl, fp, lr}
   14f5c:	add	fp, sp, #16
   14f60:	sub	sp, sp, #48	; 0x30
   14f64:	mov	r4, r2
   14f68:	mov	r5, r0
   14f6c:	mov	r6, sp
   14f70:	mov	r0, r6
   14f74:	bl	14f94 <__assert_fail@plt+0x3c44>
   14f78:	mov	r0, r5
   14f7c:	mov	r1, r4
   14f80:	mvn	r2, #0
   14f84:	mov	r3, r6
   14f88:	bl	14d9c <__assert_fail@plt+0x3a4c>
   14f8c:	sub	sp, fp, #16
   14f90:	pop	{r4, r5, r6, sl, fp, pc}
   14f94:	vmov.i32	q8, #0	; 0x00000000
   14f98:	mov	r2, #32
   14f9c:	mov	r3, r0
   14fa0:	vst1.32	{d16-d17}, [r3], r2
   14fa4:	vst1.32	{d16-d17}, [r3]
   14fa8:	add	r2, r0, #16
   14fac:	vst1.32	{d16-d17}, [r2]
   14fb0:	cmp	r1, #10
   14fb4:	strne	r1, [r0]
   14fb8:	bxne	lr
   14fbc:	push	{fp, lr}
   14fc0:	mov	fp, sp
   14fc4:	bl	11320 <abort@plt>
   14fc8:	push	{r4, r5, r6, r7, fp, lr}
   14fcc:	add	fp, sp, #16
   14fd0:	sub	sp, sp, #48	; 0x30
   14fd4:	mov	r4, r3
   14fd8:	mov	r5, r2
   14fdc:	mov	r6, r0
   14fe0:	mov	r7, sp
   14fe4:	mov	r0, r7
   14fe8:	bl	14f94 <__assert_fail@plt+0x3c44>
   14fec:	mov	r0, r6
   14ff0:	mov	r1, r5
   14ff4:	mov	r2, r4
   14ff8:	mov	r3, r7
   14ffc:	bl	14d9c <__assert_fail@plt+0x3a4c>
   15000:	sub	sp, fp, #16
   15004:	pop	{r4, r5, r6, r7, fp, pc}
   15008:	mov	r2, r1
   1500c:	mov	r1, r0
   15010:	mov	r0, #0
   15014:	b	14f58 <__assert_fail@plt+0x3c08>
   15018:	mov	r3, r2
   1501c:	mov	r2, r1
   15020:	mov	r1, r0
   15024:	mov	r0, #0
   15028:	b	14fc8 <__assert_fail@plt+0x3c78>
   1502c:	push	{r4, r5, r6, sl, fp, lr}
   15030:	add	fp, sp, #16
   15034:	sub	sp, sp, #48	; 0x30
   15038:	mov	r4, r1
   1503c:	mov	r5, r0
   15040:	mov	r0, #32
   15044:	movw	r1, #37384	; 0x9208
   15048:	movt	r1, #2
   1504c:	add	r3, r1, #16
   15050:	vld1.64	{d16-d17}, [r1], r0
   15054:	mov	r6, sp
   15058:	vld1.64	{d18-d19}, [r3]
   1505c:	add	r3, r6, #16
   15060:	vld1.64	{d20-d21}, [r1]
   15064:	vst1.64	{d18-d19}, [r3]
   15068:	mov	r1, r6
   1506c:	vst1.64	{d16-d17}, [r1], r0
   15070:	vst1.64	{d20-d21}, [r1]
   15074:	mov	r0, r6
   15078:	mov	r1, r2
   1507c:	mov	r2, #1
   15080:	bl	13af4 <__assert_fail@plt+0x27a4>
   15084:	mov	r0, #0
   15088:	mov	r1, r5
   1508c:	mov	r2, r4
   15090:	mov	r3, r6
   15094:	bl	14d9c <__assert_fail@plt+0x3a4c>
   15098:	sub	sp, fp, #16
   1509c:	pop	{r4, r5, r6, sl, fp, pc}
   150a0:	mov	r2, r1
   150a4:	mvn	r1, #0
   150a8:	b	1502c <__assert_fail@plt+0x3cdc>
   150ac:	mov	r1, #58	; 0x3a
   150b0:	b	150a0 <__assert_fail@plt+0x3d50>
   150b4:	mov	r2, #58	; 0x3a
   150b8:	b	1502c <__assert_fail@plt+0x3cdc>
   150bc:	push	{r4, r5, r6, sl, fp, lr}
   150c0:	add	fp, sp, #16
   150c4:	sub	sp, sp, #48	; 0x30
   150c8:	mov	r4, r2
   150cc:	mov	r5, r0
   150d0:	mov	r6, sp
   150d4:	mov	r0, r6
   150d8:	bl	14f94 <__assert_fail@plt+0x3c44>
   150dc:	mov	r0, r6
   150e0:	mov	r1, #58	; 0x3a
   150e4:	mov	r2, #1
   150e8:	bl	13af4 <__assert_fail@plt+0x27a4>
   150ec:	mov	r0, r5
   150f0:	mov	r1, r4
   150f4:	mvn	r2, #0
   150f8:	mov	r3, r6
   150fc:	bl	14d9c <__assert_fail@plt+0x3a4c>
   15100:	sub	sp, fp, #16
   15104:	pop	{r4, r5, r6, sl, fp, pc}
   15108:	push	{fp, lr}
   1510c:	mov	fp, sp
   15110:	sub	sp, sp, #8
   15114:	mvn	ip, #0
   15118:	str	ip, [sp]
   1511c:	bl	15128 <__assert_fail@plt+0x3dd8>
   15120:	mov	sp, fp
   15124:	pop	{fp, pc}
   15128:	push	{r4, r5, r6, r7, fp, lr}
   1512c:	add	fp, sp, #16
   15130:	sub	sp, sp, #48	; 0x30
   15134:	mov	r7, r3
   15138:	mov	r5, r0
   1513c:	mov	r0, #32
   15140:	movw	r3, #37384	; 0x9208
   15144:	movt	r3, #2
   15148:	add	r4, r3, #16
   1514c:	vld1.64	{d16-d17}, [r3], r0
   15150:	mov	r6, sp
   15154:	vld1.64	{d18-d19}, [r4]
   15158:	add	r4, r6, #16
   1515c:	vld1.64	{d20-d21}, [r3]
   15160:	vst1.64	{d18-d19}, [r4]
   15164:	mov	r3, r6
   15168:	vst1.64	{d16-d17}, [r3], r0
   1516c:	vst1.64	{d20-d21}, [r3]
   15170:	mov	r0, r6
   15174:	bl	13b4c <__assert_fail@plt+0x27fc>
   15178:	ldr	r2, [fp, #8]
   1517c:	mov	r0, r5
   15180:	mov	r1, r7
   15184:	mov	r3, r6
   15188:	bl	14d9c <__assert_fail@plt+0x3a4c>
   1518c:	sub	sp, fp, #16
   15190:	pop	{r4, r5, r6, r7, fp, pc}
   15194:	mov	r3, r2
   15198:	mov	r2, r1
   1519c:	mov	r1, r0
   151a0:	mov	r0, #0
   151a4:	b	15108 <__assert_fail@plt+0x3db8>
   151a8:	push	{fp, lr}
   151ac:	mov	fp, sp
   151b0:	sub	sp, sp, #8
   151b4:	mov	ip, r2
   151b8:	mov	r2, r1
   151bc:	mov	r1, r0
   151c0:	str	r3, [sp]
   151c4:	mov	r0, #0
   151c8:	mov	r3, ip
   151cc:	bl	15128 <__assert_fail@plt+0x3dd8>
   151d0:	mov	sp, fp
   151d4:	pop	{fp, pc}
   151d8:	movw	r3, #37168	; 0x9130
   151dc:	movt	r3, #2
   151e0:	b	14d9c <__assert_fail@plt+0x3a4c>
   151e4:	mov	r2, r1
   151e8:	mov	r1, r0
   151ec:	mov	r0, #0
   151f0:	b	151d8 <__assert_fail@plt+0x3e88>
   151f4:	mvn	r2, #0
   151f8:	b	151d8 <__assert_fail@plt+0x3e88>
   151fc:	mov	r1, r0
   15200:	mov	r0, #0
   15204:	b	151f4 <__assert_fail@plt+0x3ea4>
   15208:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1520c:	add	fp, sp, #24
   15210:	sub	sp, sp, #16
   15214:	mov	r4, r1
   15218:	mov	r5, r0
   1521c:	mov	r7, #0
   15220:	mov	r0, #0
   15224:	mov	r1, r5
   15228:	mov	r2, #5
   1522c:	bl	11134 <dcgettext@plt>
   15230:	cmp	r0, r5
   15234:	beq	15240 <__assert_fail@plt+0x3ef0>
   15238:	sub	sp, fp, #24
   1523c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15240:	bl	171e8 <__assert_fail@plt+0x5e98>
   15244:	mov	r6, r0
   15248:	mov	r8, #56	; 0x38
   1524c:	mov	r0, #45	; 0x2d
   15250:	stm	sp, {r0, r8}
   15254:	str	r7, [sp, #8]
   15258:	str	r7, [sp, #12]
   1525c:	mov	r0, r6
   15260:	mov	r1, #85	; 0x55
   15264:	mov	r2, #84	; 0x54
   15268:	mov	r3, #70	; 0x46
   1526c:	bl	15304 <__assert_fail@plt+0x3fb4>
   15270:	cmp	r0, #0
   15274:	beq	15290 <__assert_fail@plt+0x3f40>
   15278:	ldrb	r1, [r5]
   1527c:	movw	r2, #33864	; 0x8448
   15280:	movt	r2, #1
   15284:	movw	r0, #33868	; 0x844c
   15288:	movt	r0, #1
   1528c:	b	152d4 <__assert_fail@plt+0x3f84>
   15290:	mov	r0, #48	; 0x30
   15294:	mov	r1, #51	; 0x33
   15298:	str	r8, [sp]
   1529c:	stmib	sp, {r0, r1}
   152a0:	str	r0, [sp, #12]
   152a4:	mov	r0, r6
   152a8:	mov	r1, #71	; 0x47
   152ac:	mov	r2, #66	; 0x42
   152b0:	mov	r3, #49	; 0x31
   152b4:	bl	15304 <__assert_fail@plt+0x3fb4>
   152b8:	cmp	r0, #0
   152bc:	beq	152e4 <__assert_fail@plt+0x3f94>
   152c0:	ldrb	r1, [r5]
   152c4:	movw	r2, #33872	; 0x8450
   152c8:	movt	r2, #1
   152cc:	movw	r0, #33876	; 0x8454
   152d0:	movt	r0, #1
   152d4:	cmp	r1, #96	; 0x60
   152d8:	moveq	r0, r2
   152dc:	sub	sp, fp, #24
   152e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   152e4:	movw	r1, #33858	; 0x8442
   152e8:	movt	r1, #1
   152ec:	movw	r0, #33862	; 0x8446
   152f0:	movt	r0, #1
   152f4:	cmp	r4, #9
   152f8:	moveq	r0, r1
   152fc:	sub	sp, fp, #24
   15300:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15304:	push	{r4, r5, r6, r7, fp, lr}
   15308:	add	fp, sp, #16
   1530c:	sub	sp, sp, #16
   15310:	mov	r4, r3
   15314:	mov	r5, r2
   15318:	mov	r7, r1
   1531c:	mov	r6, r0
   15320:	mov	r0, r1
   15324:	bl	16ebc <__assert_fail@plt+0x5b6c>
   15328:	ldrb	r1, [r6]
   1532c:	cmp	r0, #0
   15330:	andne	r1, r1, #223	; 0xdf
   15334:	mov	r0, #0
   15338:	cmp	r1, r7
   1533c:	bne	1537c <__assert_fail@plt+0x402c>
   15340:	cmp	r7, #0
   15344:	moveq	r0, #1
   15348:	subeq	sp, fp, #16
   1534c:	popeq	{r4, r5, r6, r7, fp, pc}
   15350:	ldr	r0, [fp, #20]
   15354:	ldr	r1, [fp, #16]
   15358:	ldr	r2, [fp, #12]
   1535c:	ldr	r3, [fp, #8]
   15360:	str	r2, [sp]
   15364:	str	r1, [sp, #4]
   15368:	str	r0, [sp, #8]
   1536c:	mov	r0, r6
   15370:	mov	r1, r5
   15374:	mov	r2, r4
   15378:	bl	15384 <__assert_fail@plt+0x4034>
   1537c:	sub	sp, fp, #16
   15380:	pop	{r4, r5, r6, r7, fp, pc}
   15384:	push	{r4, r5, r6, r7, fp, lr}
   15388:	add	fp, sp, #16
   1538c:	sub	sp, sp, #8
   15390:	mov	r4, r3
   15394:	mov	r5, r2
   15398:	mov	r7, r1
   1539c:	mov	r6, r0
   153a0:	mov	r0, r1
   153a4:	bl	16ebc <__assert_fail@plt+0x5b6c>
   153a8:	ldrb	r1, [r6, #1]
   153ac:	cmp	r0, #0
   153b0:	andne	r1, r1, #223	; 0xdf
   153b4:	mov	r0, #0
   153b8:	cmp	r1, r7
   153bc:	bne	153f4 <__assert_fail@plt+0x40a4>
   153c0:	cmp	r7, #0
   153c4:	moveq	r0, #1
   153c8:	subeq	sp, fp, #16
   153cc:	popeq	{r4, r5, r6, r7, fp, pc}
   153d0:	ldr	r0, [fp, #16]
   153d4:	ldr	r1, [fp, #12]
   153d8:	ldr	r3, [fp, #8]
   153dc:	str	r1, [sp]
   153e0:	str	r0, [sp, #4]
   153e4:	mov	r0, r6
   153e8:	mov	r1, r5
   153ec:	mov	r2, r4
   153f0:	bl	153fc <__assert_fail@plt+0x40ac>
   153f4:	sub	sp, fp, #16
   153f8:	pop	{r4, r5, r6, r7, fp, pc}
   153fc:	push	{r4, r5, r6, r7, fp, lr}
   15400:	add	fp, sp, #16
   15404:	sub	sp, sp, #8
   15408:	mov	r4, r3
   1540c:	mov	r5, r2
   15410:	mov	r7, r1
   15414:	mov	r6, r0
   15418:	mov	r0, r1
   1541c:	bl	16ebc <__assert_fail@plt+0x5b6c>
   15420:	ldrb	r1, [r6, #2]
   15424:	cmp	r0, #0
   15428:	andne	r1, r1, #223	; 0xdf
   1542c:	mov	r0, #0
   15430:	cmp	r1, r7
   15434:	bne	15464 <__assert_fail@plt+0x4114>
   15438:	cmp	r7, #0
   1543c:	moveq	r0, #1
   15440:	subeq	sp, fp, #16
   15444:	popeq	{r4, r5, r6, r7, fp, pc}
   15448:	ldr	r0, [fp, #12]
   1544c:	ldr	r3, [fp, #8]
   15450:	str	r0, [sp]
   15454:	mov	r0, r6
   15458:	mov	r1, r5
   1545c:	mov	r2, r4
   15460:	bl	1546c <__assert_fail@plt+0x411c>
   15464:	sub	sp, fp, #16
   15468:	pop	{r4, r5, r6, r7, fp, pc}
   1546c:	push	{r4, r5, r6, r7, fp, lr}
   15470:	add	fp, sp, #16
   15474:	mov	r4, r3
   15478:	mov	r5, r2
   1547c:	mov	r7, r1
   15480:	mov	r6, r0
   15484:	mov	r0, r1
   15488:	bl	16ebc <__assert_fail@plt+0x5b6c>
   1548c:	ldrb	r1, [r6, #3]
   15490:	ldr	r3, [fp, #8]
   15494:	cmp	r0, #0
   15498:	andne	r1, r1, #223	; 0xdf
   1549c:	mov	r0, #0
   154a0:	cmp	r1, r7
   154a4:	popne	{r4, r5, r6, r7, fp, pc}
   154a8:	cmp	r7, #0
   154ac:	beq	154c4 <__assert_fail@plt+0x4174>
   154b0:	mov	r0, r6
   154b4:	mov	r1, r5
   154b8:	mov	r2, r4
   154bc:	pop	{r4, r5, r6, r7, fp, lr}
   154c0:	b	154cc <__assert_fail@plt+0x417c>
   154c4:	mov	r0, #1
   154c8:	pop	{r4, r5, r6, r7, fp, pc}
   154cc:	push	{r4, r5, r6, r7, fp, lr}
   154d0:	add	fp, sp, #16
   154d4:	mov	r4, r3
   154d8:	mov	r5, r2
   154dc:	mov	r7, r1
   154e0:	mov	r6, r0
   154e4:	mov	r0, r1
   154e8:	bl	16ebc <__assert_fail@plt+0x5b6c>
   154ec:	ldrb	r1, [r6, #4]
   154f0:	cmp	r0, #0
   154f4:	andne	r1, r1, #223	; 0xdf
   154f8:	mov	r0, #0
   154fc:	cmp	r1, r7
   15500:	popne	{r4, r5, r6, r7, fp, pc}
   15504:	cmp	r7, #0
   15508:	beq	15520 <__assert_fail@plt+0x41d0>
   1550c:	mov	r0, r6
   15510:	mov	r1, r5
   15514:	mov	r2, r4
   15518:	pop	{r4, r5, r6, r7, fp, lr}
   1551c:	b	15528 <__assert_fail@plt+0x41d8>
   15520:	mov	r0, #1
   15524:	pop	{r4, r5, r6, r7, fp, pc}
   15528:	push	{r4, r5, r6, sl, fp, lr}
   1552c:	add	fp, sp, #16
   15530:	mov	r4, r2
   15534:	mov	r6, r1
   15538:	mov	r5, r0
   1553c:	mov	r0, r1
   15540:	bl	16ebc <__assert_fail@plt+0x5b6c>
   15544:	ldrb	r1, [r5, #5]
   15548:	cmp	r0, #0
   1554c:	andne	r1, r1, #223	; 0xdf
   15550:	mov	r0, #0
   15554:	cmp	r1, r6
   15558:	popne	{r4, r5, r6, sl, fp, pc}
   1555c:	cmp	r6, #0
   15560:	beq	15574 <__assert_fail@plt+0x4224>
   15564:	mov	r0, r5
   15568:	mov	r1, r4
   1556c:	pop	{r4, r5, r6, sl, fp, lr}
   15570:	b	1557c <__assert_fail@plt+0x422c>
   15574:	mov	r0, #1
   15578:	pop	{r4, r5, r6, sl, fp, pc}
   1557c:	push	{r4, r5, fp, lr}
   15580:	add	fp, sp, #8
   15584:	mov	r5, r1
   15588:	mov	r4, r0
   1558c:	mov	r0, r1
   15590:	bl	16ebc <__assert_fail@plt+0x5b6c>
   15594:	ldrb	r1, [r4, #6]
   15598:	cmp	r0, #0
   1559c:	andne	r1, r1, #223	; 0xdf
   155a0:	mov	r0, #0
   155a4:	cmp	r1, r5
   155a8:	popne	{r4, r5, fp, pc}
   155ac:	cmp	r5, #0
   155b0:	beq	155c0 <__assert_fail@plt+0x4270>
   155b4:	mov	r0, r4
   155b8:	pop	{r4, r5, fp, lr}
   155bc:	b	155c8 <__assert_fail@plt+0x4278>
   155c0:	mov	r0, #1
   155c4:	pop	{r4, r5, fp, pc}
   155c8:	push	{r4, sl, fp, lr}
   155cc:	add	fp, sp, #8
   155d0:	mov	r4, r0
   155d4:	mov	r0, #0
   155d8:	bl	16ebc <__assert_fail@plt+0x5b6c>
   155dc:	ldrb	r1, [r4, #7]
   155e0:	cmp	r0, #0
   155e4:	beq	155fc <__assert_fail@plt+0x42ac>
   155e8:	tst	r1, #223	; 0xdf
   155ec:	moveq	r0, #1
   155f0:	popeq	{r4, sl, fp, pc}
   155f4:	mov	r0, #0
   155f8:	pop	{r4, sl, fp, pc}
   155fc:	cmp	r1, #0
   15600:	moveq	r0, #1
   15604:	popeq	{r4, sl, fp, pc}
   15608:	mov	r0, #0
   1560c:	pop	{r4, sl, fp, pc}
   15610:	b	15614 <__assert_fail@plt+0x42c4>
   15614:	push	{r4, r5, r6, r7, fp, lr}
   15618:	add	fp, sp, #16
   1561c:	mov	r6, r2
   15620:	mov	r4, r1
   15624:	bl	156b0 <__assert_fail@plt+0x4360>
   15628:	cmp	r0, #0
   1562c:	beq	1565c <__assert_fail@plt+0x430c>
   15630:	mov	r7, r0
   15634:	bl	11230 <strlen@plt>
   15638:	cmp	r0, r6
   1563c:	bcs	1567c <__assert_fail@plt+0x432c>
   15640:	add	r2, r0, #1
   15644:	mov	r0, r4
   15648:	mov	r1, r7
   1564c:	bl	110f8 <memcpy@plt>
   15650:	mov	r5, #0
   15654:	mov	r0, r5
   15658:	pop	{r4, r5, r6, r7, fp, pc}
   1565c:	mov	r5, #22
   15660:	cmp	r6, #0
   15664:	movne	r0, #0
   15668:	strbne	r0, [r4]
   1566c:	movne	r0, r5
   15670:	popne	{r4, r5, r6, r7, fp, pc}
   15674:	mov	r0, r5
   15678:	pop	{r4, r5, r6, r7, fp, pc}
   1567c:	mov	r5, #34	; 0x22
   15680:	cmp	r6, #0
   15684:	beq	156a4 <__assert_fail@plt+0x4354>
   15688:	sub	r6, r6, #1
   1568c:	mov	r0, r4
   15690:	mov	r1, r7
   15694:	mov	r2, r6
   15698:	bl	110f8 <memcpy@plt>
   1569c:	mov	r0, #0
   156a0:	strb	r0, [r4, r6]
   156a4:	mov	r0, r5
   156a8:	pop	{r4, r5, r6, r7, fp, pc}
   156ac:	b	156b0 <__assert_fail@plt+0x4360>
   156b0:	mov	r1, #0
   156b4:	b	112cc <setlocale@plt>
   156b8:	mov	r1, #0
   156bc:	mov	r2, #3
   156c0:	b	16fb4 <__assert_fail@plt+0x5c64>
   156c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156c8:	add	fp, sp, #24
   156cc:	sub	sp, sp, #32
   156d0:	mov	r4, r2
   156d4:	mov	r8, r0
   156d8:	ldr	r6, [fp, #12]
   156dc:	ldr	r7, [fp, #8]
   156e0:	cmp	r1, #0
   156e4:	beq	1570c <__assert_fail@plt+0x43bc>
   156e8:	mov	r5, r1
   156ec:	str	r4, [sp]
   156f0:	str	r3, [sp, #4]
   156f4:	movw	r2, #33964	; 0x84ac
   156f8:	movt	r2, #1
   156fc:	mov	r0, r8
   15700:	mov	r1, #1
   15704:	mov	r3, r5
   15708:	b	15724 <__assert_fail@plt+0x43d4>
   1570c:	str	r3, [sp]
   15710:	movw	r2, #33976	; 0x84b8
   15714:	movt	r2, #1
   15718:	mov	r0, r8
   1571c:	mov	r1, #1
   15720:	mov	r3, r4
   15724:	bl	11290 <__fprintf_chk@plt>
   15728:	movw	r1, #33983	; 0x84bf
   1572c:	movt	r1, #1
   15730:	mov	r0, #0
   15734:	mov	r2, #5
   15738:	bl	11134 <dcgettext@plt>
   1573c:	mov	r3, r0
   15740:	movw	r0, #2022	; 0x7e6
   15744:	str	r0, [sp]
   15748:	movw	r2, #34701	; 0x878d
   1574c:	movt	r2, #1
   15750:	mov	r0, r8
   15754:	mov	r1, #1
   15758:	bl	11290 <__fprintf_chk@plt>
   1575c:	movw	r4, #33157	; 0x8185
   15760:	movt	r4, #1
   15764:	mov	r0, r4
   15768:	mov	r1, r8
   1576c:	bl	110a4 <fputs_unlocked@plt>
   15770:	movw	r1, #33987	; 0x84c3
   15774:	movt	r1, #1
   15778:	mov	r0, #0
   1577c:	mov	r2, #5
   15780:	bl	11134 <dcgettext@plt>
   15784:	mov	r2, r0
   15788:	movw	r3, #34158	; 0x856e
   1578c:	movt	r3, #1
   15790:	mov	r0, r8
   15794:	mov	r1, #1
   15798:	bl	11290 <__fprintf_chk@plt>
   1579c:	mov	r0, r4
   157a0:	mov	r1, r8
   157a4:	bl	110a4 <fputs_unlocked@plt>
   157a8:	cmp	r6, #9
   157ac:	bhi	157e8 <__assert_fail@plt+0x4498>
   157b0:	add	r0, pc, #0
   157b4:	ldr	pc, [r0, r6, lsl #2]
   157b8:	andeq	r5, r1, r0, ror #15
   157bc:	strdeq	r5, [r1], -r4
   157c0:	andeq	r5, r1, r4, lsr #16
   157c4:	andeq	r5, r1, ip, asr #16
   157c8:	andeq	r5, r1, r4, ror r8
   157cc:	muleq	r1, ip, r8
   157d0:	andeq	r5, r1, r4, asr #17
   157d4:	strdeq	r5, [r1], -ip
   157d8:	muleq	r1, ip, r9
   157dc:	andeq	r5, r1, r4, asr #18
   157e0:	sub	sp, fp, #24
   157e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157e8:	movw	r1, #34511	; 0x86cf
   157ec:	movt	r1, #1
   157f0:	b	1594c <__assert_fail@plt+0x45fc>
   157f4:	movw	r1, #34192	; 0x8590
   157f8:	movt	r1, #1
   157fc:	mov	r0, #0
   15800:	mov	r2, #5
   15804:	bl	11134 <dcgettext@plt>
   15808:	mov	r2, r0
   1580c:	ldr	r3, [r7]
   15810:	mov	r0, r8
   15814:	mov	r1, #1
   15818:	sub	sp, fp, #24
   1581c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15820:	b	11290 <__fprintf_chk@plt>
   15824:	movw	r1, #34208	; 0x85a0
   15828:	movt	r1, #1
   1582c:	mov	r0, #0
   15830:	mov	r2, #5
   15834:	bl	11134 <dcgettext@plt>
   15838:	mov	r2, r0
   1583c:	ldr	r3, [r7]
   15840:	ldr	r0, [r7, #4]
   15844:	str	r0, [sp]
   15848:	b	15938 <__assert_fail@plt+0x45e8>
   1584c:	movw	r1, #34231	; 0x85b7
   15850:	movt	r1, #1
   15854:	mov	r0, #0
   15858:	mov	r2, #5
   1585c:	bl	11134 <dcgettext@plt>
   15860:	mov	r2, r0
   15864:	ldr	r3, [r7]
   15868:	ldmib	r7, {r0, r1}
   1586c:	stm	sp, {r0, r1}
   15870:	b	15938 <__assert_fail@plt+0x45e8>
   15874:	movw	r1, #34259	; 0x85d3
   15878:	movt	r1, #1
   1587c:	mov	r0, #0
   15880:	mov	r2, #5
   15884:	bl	11134 <dcgettext@plt>
   15888:	mov	r2, r0
   1588c:	ldr	r3, [r7]
   15890:	ldmib	r7, {r0, r1, r7}
   15894:	stm	sp, {r0, r1, r7}
   15898:	b	15938 <__assert_fail@plt+0x45e8>
   1589c:	movw	r1, #34291	; 0x85f3
   158a0:	movt	r1, #1
   158a4:	mov	r0, #0
   158a8:	mov	r2, #5
   158ac:	bl	11134 <dcgettext@plt>
   158b0:	mov	r2, r0
   158b4:	ldr	r3, [r7]
   158b8:	ldmib	r7, {r0, r1, r6, r7}
   158bc:	stm	sp, {r0, r1, r6, r7}
   158c0:	b	15938 <__assert_fail@plt+0x45e8>
   158c4:	movw	r1, #34327	; 0x8617
   158c8:	movt	r1, #1
   158cc:	mov	r0, #0
   158d0:	mov	r2, #5
   158d4:	bl	11134 <dcgettext@plt>
   158d8:	mov	r2, r0
   158dc:	ldr	r3, [r7]
   158e0:	ldmib	r7, {r0, r1, r6}
   158e4:	ldr	r5, [r7, #16]
   158e8:	ldr	r7, [r7, #20]
   158ec:	stm	sp, {r0, r1, r6}
   158f0:	str	r5, [sp, #12]
   158f4:	str	r7, [sp, #16]
   158f8:	b	15938 <__assert_fail@plt+0x45e8>
   158fc:	movw	r1, #34367	; 0x863f
   15900:	movt	r1, #1
   15904:	mov	r0, #0
   15908:	mov	r2, #5
   1590c:	bl	11134 <dcgettext@plt>
   15910:	mov	r2, r0
   15914:	ldr	r3, [r7]
   15918:	ldmib	r7, {r0, r1, r6}
   1591c:	ldr	r5, [r7, #16]
   15920:	ldr	r4, [r7, #20]
   15924:	ldr	r7, [r7, #24]
   15928:	stm	sp, {r0, r1, r6}
   1592c:	str	r5, [sp, #12]
   15930:	str	r4, [sp, #16]
   15934:	str	r7, [sp, #20]
   15938:	mov	r0, r8
   1593c:	mov	r1, #1
   15940:	b	159ec <__assert_fail@plt+0x469c>
   15944:	movw	r1, #34459	; 0x869b
   15948:	movt	r1, #1
   1594c:	mov	r0, #0
   15950:	mov	r2, #5
   15954:	bl	11134 <dcgettext@plt>
   15958:	mov	ip, r0
   1595c:	ldr	r3, [r7]
   15960:	ldr	r0, [r7, #4]
   15964:	ldr	r1, [r7, #8]
   15968:	ldr	r6, [r7, #12]
   1596c:	ldr	r5, [r7, #16]
   15970:	ldr	r4, [r7, #20]
   15974:	ldr	r2, [r7, #24]
   15978:	ldr	lr, [r7, #28]
   1597c:	ldr	r7, [r7, #32]
   15980:	stm	sp, {r0, r1, r6}
   15984:	str	r5, [sp, #12]
   15988:	str	r4, [sp, #16]
   1598c:	str	r2, [sp, #20]
   15990:	str	lr, [sp, #24]
   15994:	str	r7, [sp, #28]
   15998:	b	159e0 <__assert_fail@plt+0x4690>
   1599c:	movw	r1, #34411	; 0x866b
   159a0:	movt	r1, #1
   159a4:	mov	r0, #0
   159a8:	mov	r2, #5
   159ac:	bl	11134 <dcgettext@plt>
   159b0:	mov	ip, r0
   159b4:	ldr	r3, [r7]
   159b8:	ldmib	r7, {r0, r1, r6}
   159bc:	ldr	r5, [r7, #16]
   159c0:	ldr	r4, [r7, #20]
   159c4:	ldr	r2, [r7, #24]
   159c8:	ldr	r7, [r7, #28]
   159cc:	stm	sp, {r0, r1, r6}
   159d0:	str	r5, [sp, #12]
   159d4:	str	r4, [sp, #16]
   159d8:	str	r2, [sp, #20]
   159dc:	str	r7, [sp, #24]
   159e0:	mov	r0, r8
   159e4:	mov	r1, #1
   159e8:	mov	r2, ip
   159ec:	bl	11290 <__fprintf_chk@plt>
   159f0:	sub	sp, fp, #24
   159f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159f8:	push	{r4, sl, fp, lr}
   159fc:	add	fp, sp, #8
   15a00:	sub	sp, sp, #8
   15a04:	mov	lr, #0
   15a08:	ldr	ip, [fp, #8]
   15a0c:	ldr	r4, [ip, lr, lsl #2]
   15a10:	add	lr, lr, #1
   15a14:	cmp	r4, #0
   15a18:	bne	15a0c <__assert_fail@plt+0x46bc>
   15a1c:	sub	r4, lr, #1
   15a20:	str	ip, [sp]
   15a24:	str	r4, [sp, #4]
   15a28:	bl	156c4 <__assert_fail@plt+0x4374>
   15a2c:	sub	sp, fp, #8
   15a30:	pop	{r4, sl, fp, pc}
   15a34:	push	{r4, r5, fp, lr}
   15a38:	add	fp, sp, #8
   15a3c:	sub	sp, sp, #48	; 0x30
   15a40:	mov	ip, #0
   15a44:	ldr	r4, [fp, #8]
   15a48:	add	lr, sp, #8
   15a4c:	ldr	r5, [r4]
   15a50:	str	r5, [lr, ip, lsl #2]
   15a54:	cmp	r5, #0
   15a58:	beq	15a6c <__assert_fail@plt+0x471c>
   15a5c:	add	ip, ip, #1
   15a60:	add	r4, r4, #4
   15a64:	cmp	ip, #10
   15a68:	bcc	15a4c <__assert_fail@plt+0x46fc>
   15a6c:	str	lr, [sp]
   15a70:	str	ip, [sp, #4]
   15a74:	bl	156c4 <__assert_fail@plt+0x4374>
   15a78:	sub	sp, fp, #8
   15a7c:	pop	{r4, r5, fp, pc}
   15a80:	push	{fp, lr}
   15a84:	mov	fp, sp
   15a88:	sub	sp, sp, #8
   15a8c:	add	ip, fp, #8
   15a90:	str	ip, [sp, #4]
   15a94:	str	ip, [sp]
   15a98:	bl	15a34 <__assert_fail@plt+0x46e4>
   15a9c:	mov	sp, fp
   15aa0:	pop	{fp, pc}
   15aa4:	push	{fp, lr}
   15aa8:	mov	fp, sp
   15aac:	movw	r0, #37244	; 0x917c
   15ab0:	movt	r0, #2
   15ab4:	ldr	r1, [r0]
   15ab8:	movw	r0, #33157	; 0x8185
   15abc:	movt	r0, #1
   15ac0:	bl	110a4 <fputs_unlocked@plt>
   15ac4:	movw	r1, #34571	; 0x870b
   15ac8:	movt	r1, #1
   15acc:	mov	r0, #0
   15ad0:	mov	r2, #5
   15ad4:	bl	11134 <dcgettext@plt>
   15ad8:	mov	r1, r0
   15adc:	movw	r2, #34591	; 0x871f
   15ae0:	movt	r2, #1
   15ae4:	mov	r0, #1
   15ae8:	bl	1126c <__printf_chk@plt>
   15aec:	movw	r1, #34613	; 0x8735
   15af0:	movt	r1, #1
   15af4:	mov	r0, #0
   15af8:	mov	r2, #5
   15afc:	bl	11134 <dcgettext@plt>
   15b00:	mov	r1, r0
   15b04:	movw	r2, #32715	; 0x7fcb
   15b08:	movt	r2, #1
   15b0c:	movw	r3, #32966	; 0x80c6
   15b10:	movt	r3, #1
   15b14:	mov	r0, #1
   15b18:	bl	1126c <__printf_chk@plt>
   15b1c:	movw	r1, #34633	; 0x8749
   15b20:	movt	r1, #1
   15b24:	mov	r0, #0
   15b28:	mov	r2, #5
   15b2c:	bl	11134 <dcgettext@plt>
   15b30:	mov	r1, r0
   15b34:	movw	r2, #34672	; 0x8770
   15b38:	movt	r2, #1
   15b3c:	mov	r0, #1
   15b40:	pop	{fp, lr}
   15b44:	b	1126c <__printf_chk@plt>
   15b48:	b	15b4c <__assert_fail@plt+0x47fc>
   15b4c:	push	{r4, r5, r6, sl, fp, lr}
   15b50:	add	fp, sp, #16
   15b54:	mov	r4, r2
   15b58:	mov	r5, r1
   15b5c:	mov	r6, r0
   15b60:	bl	173fc <__assert_fail@plt+0x60ac>
   15b64:	cmp	r0, #0
   15b68:	popne	{r4, r5, r6, sl, fp, pc}
   15b6c:	cmp	r6, #0
   15b70:	beq	15b84 <__assert_fail@plt+0x4834>
   15b74:	cmp	r5, #0
   15b78:	cmpne	r4, #0
   15b7c:	bne	15b84 <__assert_fail@plt+0x4834>
   15b80:	pop	{r4, r5, r6, sl, fp, pc}
   15b84:	bl	15f38 <__assert_fail@plt+0x4be8>
   15b88:	push	{fp, lr}
   15b8c:	mov	fp, sp
   15b90:	bl	16b84 <__assert_fail@plt+0x5834>
   15b94:	bl	15b9c <__assert_fail@plt+0x484c>
   15b98:	pop	{fp, pc}
   15b9c:	cmp	r0, #0
   15ba0:	bxne	lr
   15ba4:	push	{fp, lr}
   15ba8:	mov	fp, sp
   15bac:	bl	15f38 <__assert_fail@plt+0x4be8>
   15bb0:	push	{fp, lr}
   15bb4:	mov	fp, sp
   15bb8:	bl	171b4 <__assert_fail@plt+0x5e64>
   15bbc:	bl	15b9c <__assert_fail@plt+0x484c>
   15bc0:	pop	{fp, pc}
   15bc4:	b	15b88 <__assert_fail@plt+0x4838>
   15bc8:	push	{r4, r5, fp, lr}
   15bcc:	add	fp, sp, #8
   15bd0:	mov	r4, r1
   15bd4:	mov	r5, r0
   15bd8:	bl	16bb4 <__assert_fail@plt+0x5864>
   15bdc:	cmp	r0, #0
   15be0:	popne	{r4, r5, fp, pc}
   15be4:	cmp	r5, #0
   15be8:	beq	15bf8 <__assert_fail@plt+0x48a8>
   15bec:	cmp	r4, #0
   15bf0:	bne	15bf8 <__assert_fail@plt+0x48a8>
   15bf4:	pop	{r4, r5, fp, pc}
   15bf8:	bl	15f38 <__assert_fail@plt+0x4be8>
   15bfc:	push	{fp, lr}
   15c00:	mov	fp, sp
   15c04:	bl	171b8 <__assert_fail@plt+0x5e68>
   15c08:	bl	15b9c <__assert_fail@plt+0x484c>
   15c0c:	pop	{fp, pc}
   15c10:	push	{fp, lr}
   15c14:	mov	fp, sp
   15c18:	bl	171c8 <__assert_fail@plt+0x5e78>
   15c1c:	bl	15b9c <__assert_fail@plt+0x484c>
   15c20:	pop	{fp, pc}
   15c24:	push	{fp, lr}
   15c28:	mov	fp, sp
   15c2c:	mov	r2, r1
   15c30:	mov	r1, r0
   15c34:	mov	r0, #0
   15c38:	bl	15b4c <__assert_fail@plt+0x47fc>
   15c3c:	pop	{fp, pc}
   15c40:	mov	r2, r1
   15c44:	mov	r1, r0
   15c48:	mov	r0, #0
   15c4c:	b	15c10 <__assert_fail@plt+0x48c0>
   15c50:	mov	r2, #1
   15c54:	b	15c58 <__assert_fail@plt+0x4908>
   15c58:	push	{r4, r5, fp, lr}
   15c5c:	add	fp, sp, #8
   15c60:	mov	r4, r1
   15c64:	ldr	r5, [r1]
   15c68:	cmp	r0, #0
   15c6c:	beq	15c84 <__assert_fail@plt+0x4934>
   15c70:	mov	r1, #1
   15c74:	add	r1, r1, r5, lsr #1
   15c78:	adds	r5, r5, r1
   15c7c:	bcc	15c9c <__assert_fail@plt+0x494c>
   15c80:	bl	15f38 <__assert_fail@plt+0x4be8>
   15c84:	cmp	r5, #0
   15c88:	bne	15c9c <__assert_fail@plt+0x494c>
   15c8c:	mov	r1, #64	; 0x40
   15c90:	udiv	r5, r1, r2
   15c94:	cmp	r2, #64	; 0x40
   15c98:	addhi	r5, r5, #1
   15c9c:	mov	r1, r5
   15ca0:	bl	15b4c <__assert_fail@plt+0x47fc>
   15ca4:	str	r5, [r4]
   15ca8:	pop	{r4, r5, fp, pc}
   15cac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15cb0:	add	fp, sp, #24
   15cb4:	mov	r8, r1
   15cb8:	ldr	r6, [r1]
   15cbc:	add	r1, r6, r6, asr #1
   15cc0:	cmp	r1, r6
   15cc4:	mvnvs	r1, #-2147483648	; 0x80000000
   15cc8:	cmp	r1, r3
   15ccc:	mov	r5, r1
   15cd0:	movgt	r5, r3
   15cd4:	cmn	r3, #1
   15cd8:	movle	r5, r1
   15cdc:	ldr	r4, [fp, #8]
   15ce0:	cmn	r4, #1
   15ce4:	ble	15d0c <__assert_fail@plt+0x49bc>
   15ce8:	cmp	r4, #0
   15cec:	beq	15d60 <__assert_fail@plt+0x4a10>
   15cf0:	cmn	r5, #1
   15cf4:	ble	15d34 <__assert_fail@plt+0x49e4>
   15cf8:	mvn	r7, #-2147483648	; 0x80000000
   15cfc:	udiv	r1, r7, r4
   15d00:	cmp	r1, r5
   15d04:	bge	15d60 <__assert_fail@plt+0x4a10>
   15d08:	b	15d70 <__assert_fail@plt+0x4a20>
   15d0c:	cmn	r5, #1
   15d10:	ble	15d50 <__assert_fail@plt+0x4a00>
   15d14:	cmn	r4, #1
   15d18:	beq	15d60 <__assert_fail@plt+0x4a10>
   15d1c:	mov	r1, #-2147483648	; 0x80000000
   15d20:	sdiv	r1, r1, r4
   15d24:	mvn	r7, #-2147483648	; 0x80000000
   15d28:	cmp	r1, r5
   15d2c:	bge	15d60 <__assert_fail@plt+0x4a10>
   15d30:	b	15d70 <__assert_fail@plt+0x4a20>
   15d34:	beq	15d60 <__assert_fail@plt+0x4a10>
   15d38:	mov	r1, #-2147483648	; 0x80000000
   15d3c:	sdiv	r1, r1, r5
   15d40:	mvn	r7, #-2147483648	; 0x80000000
   15d44:	cmp	r1, r4
   15d48:	bge	15d60 <__assert_fail@plt+0x4a10>
   15d4c:	b	15d70 <__assert_fail@plt+0x4a20>
   15d50:	mvn	r7, #-2147483648	; 0x80000000
   15d54:	sdiv	r1, r7, r4
   15d58:	cmp	r5, r1
   15d5c:	blt	15d70 <__assert_fail@plt+0x4a20>
   15d60:	mul	r1, r5, r4
   15d64:	mov	r7, #64	; 0x40
   15d68:	cmp	r1, #63	; 0x3f
   15d6c:	bgt	15d78 <__assert_fail@plt+0x4a28>
   15d70:	sdiv	r5, r7, r4
   15d74:	mul	r1, r5, r4
   15d78:	cmp	r0, #0
   15d7c:	moveq	r7, #0
   15d80:	streq	r7, [r8]
   15d84:	sub	r7, r5, r6
   15d88:	cmp	r7, r2
   15d8c:	bge	15e38 <__assert_fail@plt+0x4ae8>
   15d90:	add	r5, r6, r2
   15d94:	mov	r1, #0
   15d98:	cmp	r5, r3
   15d9c:	mov	r2, #0
   15da0:	movwgt	r2, #1
   15da4:	cmn	r3, #1
   15da8:	movwgt	r1, #1
   15dac:	cmp	r5, r6
   15db0:	bvs	15e20 <__assert_fail@plt+0x4ad0>
   15db4:	ands	r1, r1, r2
   15db8:	bne	15e20 <__assert_fail@plt+0x4ad0>
   15dbc:	cmn	r4, #1
   15dc0:	ble	15de8 <__assert_fail@plt+0x4a98>
   15dc4:	cmp	r4, #0
   15dc8:	beq	15e34 <__assert_fail@plt+0x4ae4>
   15dcc:	cmn	r5, #1
   15dd0:	ble	15e0c <__assert_fail@plt+0x4abc>
   15dd4:	mvn	r1, #-2147483648	; 0x80000000
   15dd8:	udiv	r1, r1, r4
   15ddc:	cmp	r1, r5
   15de0:	bge	15e34 <__assert_fail@plt+0x4ae4>
   15de4:	b	15e20 <__assert_fail@plt+0x4ad0>
   15de8:	cmn	r5, #1
   15dec:	ble	15e24 <__assert_fail@plt+0x4ad4>
   15df0:	cmn	r4, #1
   15df4:	beq	15e34 <__assert_fail@plt+0x4ae4>
   15df8:	mov	r1, #-2147483648	; 0x80000000
   15dfc:	sdiv	r1, r1, r4
   15e00:	cmp	r1, r5
   15e04:	bge	15e34 <__assert_fail@plt+0x4ae4>
   15e08:	b	15e20 <__assert_fail@plt+0x4ad0>
   15e0c:	beq	15e34 <__assert_fail@plt+0x4ae4>
   15e10:	mov	r1, #-2147483648	; 0x80000000
   15e14:	sdiv	r1, r1, r5
   15e18:	cmp	r1, r4
   15e1c:	bge	15e34 <__assert_fail@plt+0x4ae4>
   15e20:	bl	15f38 <__assert_fail@plt+0x4be8>
   15e24:	mvn	r1, #-2147483648	; 0x80000000
   15e28:	sdiv	r1, r1, r4
   15e2c:	cmp	r5, r1
   15e30:	blt	15e20 <__assert_fail@plt+0x4ad0>
   15e34:	mul	r1, r5, r4
   15e38:	bl	15bc8 <__assert_fail@plt+0x4878>
   15e3c:	str	r5, [r8]
   15e40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e44:	mov	r1, #1
   15e48:	b	15e4c <__assert_fail@plt+0x4afc>
   15e4c:	push	{fp, lr}
   15e50:	mov	fp, sp
   15e54:	bl	16b30 <__assert_fail@plt+0x57e0>
   15e58:	bl	15b9c <__assert_fail@plt+0x484c>
   15e5c:	pop	{fp, pc}
   15e60:	mov	r1, #1
   15e64:	b	15e68 <__assert_fail@plt+0x4b18>
   15e68:	push	{fp, lr}
   15e6c:	mov	fp, sp
   15e70:	bl	171c4 <__assert_fail@plt+0x5e74>
   15e74:	bl	15b9c <__assert_fail@plt+0x484c>
   15e78:	pop	{fp, pc}
   15e7c:	push	{r4, r5, r6, sl, fp, lr}
   15e80:	add	fp, sp, #16
   15e84:	mov	r4, r1
   15e88:	mov	r5, r0
   15e8c:	mov	r0, r1
   15e90:	bl	15b88 <__assert_fail@plt+0x4838>
   15e94:	mov	r6, r0
   15e98:	mov	r1, r5
   15e9c:	mov	r2, r4
   15ea0:	bl	110f8 <memcpy@plt>
   15ea4:	mov	r0, r6
   15ea8:	pop	{r4, r5, r6, sl, fp, pc}
   15eac:	push	{r4, r5, r6, sl, fp, lr}
   15eb0:	add	fp, sp, #16
   15eb4:	mov	r4, r1
   15eb8:	mov	r5, r0
   15ebc:	mov	r0, r1
   15ec0:	bl	15bb0 <__assert_fail@plt+0x4860>
   15ec4:	mov	r6, r0
   15ec8:	mov	r1, r5
   15ecc:	mov	r2, r4
   15ed0:	bl	110f8 <memcpy@plt>
   15ed4:	mov	r0, r6
   15ed8:	pop	{r4, r5, r6, sl, fp, pc}
   15edc:	push	{r4, r5, r6, sl, fp, lr}
   15ee0:	add	fp, sp, #16
   15ee4:	mov	r4, r1
   15ee8:	mov	r5, r0
   15eec:	add	r0, r1, #1
   15ef0:	bl	15bb0 <__assert_fail@plt+0x4860>
   15ef4:	mov	r6, r0
   15ef8:	mov	r0, #0
   15efc:	strb	r0, [r6, r4]
   15f00:	mov	r0, r6
   15f04:	mov	r1, r5
   15f08:	mov	r2, r4
   15f0c:	bl	110f8 <memcpy@plt>
   15f10:	mov	r0, r6
   15f14:	pop	{r4, r5, r6, sl, fp, pc}
   15f18:	push	{r4, sl, fp, lr}
   15f1c:	add	fp, sp, #8
   15f20:	mov	r4, r0
   15f24:	bl	11230 <strlen@plt>
   15f28:	add	r1, r0, #1
   15f2c:	mov	r0, r4
   15f30:	pop	{r4, sl, fp, lr}
   15f34:	b	15e7c <__assert_fail@plt+0x4b2c>
   15f38:	push	{fp, lr}
   15f3c:	mov	fp, sp
   15f40:	movw	r0, #37148	; 0x911c
   15f44:	movt	r0, #2
   15f48:	ldr	r4, [r0]
   15f4c:	movw	r1, #34748	; 0x87bc
   15f50:	movt	r1, #1
   15f54:	mov	r0, #0
   15f58:	mov	r2, #5
   15f5c:	bl	11134 <dcgettext@plt>
   15f60:	mov	r3, r0
   15f64:	movw	r2, #33322	; 0x822a
   15f68:	movt	r2, #1
   15f6c:	mov	r0, r4
   15f70:	mov	r1, #0
   15f74:	bl	111ac <error@plt>
   15f78:	bl	11320 <abort@plt>
   15f7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f80:	add	fp, sp, #24
   15f84:	sub	sp, sp, #8
   15f88:	mov	r6, r3
   15f8c:	mov	r4, r2
   15f90:	mov	r5, r1
   15f94:	mov	r7, r0
   15f98:	bl	17280 <__assert_fail@plt+0x5f30>
   15f9c:	mov	r8, r0
   15fa0:	bl	11248 <__errno_location@plt>
   15fa4:	ldr	r0, [r0]
   15fa8:	cmp	r0, #0
   15fac:	beq	15fc4 <__assert_fail@plt+0x4c74>
   15fb0:	str	r6, [sp]
   15fb4:	mov	r1, r7
   15fb8:	mov	r2, r5
   15fbc:	mov	r3, r4
   15fc0:	bl	15fd0 <__assert_fail@plt+0x4c80>
   15fc4:	mov	r0, r8
   15fc8:	sub	sp, fp, #24
   15fcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fd0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15fd4:	add	fp, sp, #24
   15fd8:	sub	sp, sp, #8
   15fdc:	mov	r8, r3
   15fe0:	mov	r5, r2
   15fe4:	mov	r6, r1
   15fe8:	mov	r7, r0
   15fec:	movw	r1, #34765	; 0x87cd
   15ff0:	movt	r1, #1
   15ff4:	mov	r0, #0
   15ff8:	mov	r2, #5
   15ffc:	bl	11134 <dcgettext@plt>
   16000:	mov	r2, r0
   16004:	mov	r0, #0
   16008:	mov	r1, r7
   1600c:	bl	111ac <error@plt>
   16010:	movw	r1, #34790	; 0x87e6
   16014:	movt	r1, #1
   16018:	mov	r0, #0
   1601c:	mov	r2, #5
   16020:	bl	11134 <dcgettext@plt>
   16024:	mov	r2, r0
   16028:	mov	r0, #0
   1602c:	mov	r1, #0
   16030:	bl	111ac <error@plt>
   16034:	movw	r0, #37148	; 0x911c
   16038:	movt	r0, #2
   1603c:	ldr	r7, [r0]
   16040:	movw	r1, #34833	; 0x8811
   16044:	movt	r1, #1
   16048:	mov	r0, #0
   1604c:	mov	r2, #5
   16050:	bl	11134 <dcgettext@plt>
   16054:	mov	r4, r0
   16058:	mov	r0, #0
   1605c:	mov	r1, #8
   16060:	mov	r2, r6
   16064:	mov	r3, r5
   16068:	bl	14fc8 <__assert_fail@plt+0x3c78>
   1606c:	mov	r5, r0
   16070:	ldr	r3, [fp, #8]
   16074:	mov	r0, #1
   16078:	mov	r1, #8
   1607c:	mov	r2, r8
   16080:	bl	14fc8 <__assert_fail@plt+0x3c78>
   16084:	str	r0, [sp]
   16088:	mov	r0, r7
   1608c:	mov	r1, #0
   16090:	mov	r2, r4
   16094:	mov	r3, r5
   16098:	bl	111ac <error@plt>
   1609c:	sub	sp, fp, #24
   160a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   160a8:	add	fp, sp, #24
   160ac:	sub	sp, sp, #8
   160b0:	mov	r7, r3
   160b4:	mov	r4, r2
   160b8:	mov	r6, r1
   160bc:	mov	r5, r0
   160c0:	bl	17398 <__assert_fail@plt+0x6048>
   160c4:	mov	r8, r0
   160c8:	bl	11248 <__errno_location@plt>
   160cc:	ldr	r0, [r0]
   160d0:	cmp	r0, #0
   160d4:	beq	160f0 <__assert_fail@plt+0x4da0>
   160d8:	sub	r1, r7, #1
   160dc:	str	r1, [sp]
   160e0:	sub	r2, r6, #1
   160e4:	mov	r1, r5
   160e8:	mov	r3, r4
   160ec:	bl	15fd0 <__assert_fail@plt+0x4c80>
   160f0:	mov	r0, r8
   160f4:	sub	sp, fp, #24
   160f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16100:	add	fp, sp, #28
   16104:	sub	sp, sp, #12
   16108:	cmp	r2, #37	; 0x25
   1610c:	bcs	1652c <__assert_fail@plt+0x51dc>
   16110:	mov	r7, r2
   16114:	mov	r6, r1
   16118:	mov	r4, r0
   1611c:	str	r3, [sp]
   16120:	ldr	sl, [fp, #8]
   16124:	bl	11248 <__errno_location@plt>
   16128:	mov	r5, r0
   1612c:	mov	r0, #0
   16130:	str	r0, [r5]
   16134:	bl	1120c <__ctype_b_loc@plt>
   16138:	ldr	r1, [r0]
   1613c:	mov	r2, r4
   16140:	ldrb	r0, [r2], #1
   16144:	add	r3, r1, r0, lsl #1
   16148:	ldrb	r3, [r3, #1]
   1614c:	tst	r3, #32
   16150:	bne	16140 <__assert_fail@plt+0x4df0>
   16154:	add	r9, sp, #8
   16158:	cmp	r6, #0
   1615c:	movne	r9, r6
   16160:	mov	r8, #4
   16164:	cmp	r0, #45	; 0x2d
   16168:	beq	16520 <__assert_fail@plt+0x51d0>
   1616c:	mov	r0, r4
   16170:	mov	r1, r9
   16174:	mov	r2, r7
   16178:	bl	11224 <strtoul@plt>
   1617c:	str	r0, [sp, #4]
   16180:	ldr	r7, [r9]
   16184:	cmp	r7, r4
   16188:	beq	161b0 <__assert_fail@plt+0x4e60>
   1618c:	ldr	r0, [r5]
   16190:	cmp	r0, #0
   16194:	beq	161e0 <__assert_fail@plt+0x4e90>
   16198:	cmp	r0, #34	; 0x22
   1619c:	bne	16520 <__assert_fail@plt+0x51d0>
   161a0:	mov	r8, #1
   161a4:	cmp	sl, #0
   161a8:	bne	161ec <__assert_fail@plt+0x4e9c>
   161ac:	b	16514 <__assert_fail@plt+0x51c4>
   161b0:	cmp	sl, #0
   161b4:	ldrbne	r1, [r7]
   161b8:	cmpne	r1, #0
   161bc:	beq	16520 <__assert_fail@plt+0x51d0>
   161c0:	mov	r0, sl
   161c4:	bl	1123c <strchr@plt>
   161c8:	cmp	r0, #0
   161cc:	beq	16520 <__assert_fail@plt+0x51d0>
   161d0:	mov	r0, #1
   161d4:	str	r0, [sp, #4]
   161d8:	mov	r8, #0
   161dc:	b	161ec <__assert_fail@plt+0x4e9c>
   161e0:	mov	r8, r0
   161e4:	cmp	sl, #0
   161e8:	beq	16514 <__assert_fail@plt+0x51c4>
   161ec:	ldrb	r4, [r7]
   161f0:	cmp	r4, #0
   161f4:	beq	16514 <__assert_fail@plt+0x51c4>
   161f8:	mov	r0, sl
   161fc:	mov	r1, r4
   16200:	bl	1123c <strchr@plt>
   16204:	cmp	r0, #0
   16208:	beq	16418 <__assert_fail@plt+0x50c8>
   1620c:	sub	r0, r4, #69	; 0x45
   16210:	mov	r6, #1
   16214:	mov	r5, #1024	; 0x400
   16218:	cmp	r0, #47	; 0x2f
   1621c:	bhi	16314 <__assert_fail@plt+0x4fc4>
   16220:	add	r1, pc, #0
   16224:	ldr	pc, [r1, r0, lsl #2]
   16228:	andeq	r6, r1, r8, ror #5
   1622c:	andeq	r6, r1, r4, lsl r3
   16230:	andeq	r6, r1, r8, ror #5
   16234:	andeq	r6, r1, r4, lsl r3
   16238:	andeq	r6, r1, r4, lsl r3
   1623c:	andeq	r6, r1, r4, lsl r3
   16240:	andeq	r6, r1, r8, ror #5
   16244:	andeq	r6, r1, r4, lsl r3
   16248:	andeq	r6, r1, r8, ror #5
   1624c:	andeq	r6, r1, r4, lsl r3
   16250:	andeq	r6, r1, r4, lsl r3
   16254:	andeq	r6, r1, r8, ror #5
   16258:	andeq	r6, r1, r4, lsl r3
   1625c:	andeq	r6, r1, r4, lsl r3
   16260:	andeq	r6, r1, r4, lsl r3
   16264:	andeq	r6, r1, r8, ror #5
   16268:	andeq	r6, r1, r4, lsl r3
   1626c:	andeq	r6, r1, r4, lsl r3
   16270:	andeq	r6, r1, r4, lsl r3
   16274:	andeq	r6, r1, r4, lsl r3
   16278:	andeq	r6, r1, r8, ror #5
   1627c:	andeq	r6, r1, r8, ror #5
   16280:	andeq	r6, r1, r4, lsl r3
   16284:	andeq	r6, r1, r4, lsl r3
   16288:	andeq	r6, r1, r4, lsl r3
   1628c:	andeq	r6, r1, r4, lsl r3
   16290:	andeq	r6, r1, r4, lsl r3
   16294:	andeq	r6, r1, r4, lsl r3
   16298:	andeq	r6, r1, r4, lsl r3
   1629c:	andeq	r6, r1, r4, lsl r3
   162a0:	andeq	r6, r1, r4, lsl r3
   162a4:	andeq	r6, r1, r4, lsl r3
   162a8:	andeq	r6, r1, r4, lsl r3
   162ac:	andeq	r6, r1, r4, lsl r3
   162b0:	andeq	r6, r1, r8, ror #5
   162b4:	andeq	r6, r1, r4, lsl r3
   162b8:	andeq	r6, r1, r4, lsl r3
   162bc:	andeq	r6, r1, r4, lsl r3
   162c0:	andeq	r6, r1, r8, ror #5
   162c4:	andeq	r6, r1, r4, lsl r3
   162c8:	andeq	r6, r1, r8, ror #5
   162cc:	andeq	r6, r1, r4, lsl r3
   162d0:	andeq	r6, r1, r4, lsl r3
   162d4:	andeq	r6, r1, r4, lsl r3
   162d8:	andeq	r6, r1, r4, lsl r3
   162dc:	andeq	r6, r1, r4, lsl r3
   162e0:	andeq	r6, r1, r4, lsl r3
   162e4:	andeq	r6, r1, r8, ror #5
   162e8:	mov	r0, sl
   162ec:	mov	r1, #48	; 0x30
   162f0:	bl	1123c <strchr@plt>
   162f4:	cmp	r0, #0
   162f8:	beq	16314 <__assert_fail@plt+0x4fc4>
   162fc:	ldrb	r0, [r7, #1]
   16300:	cmp	r0, #66	; 0x42
   16304:	cmpne	r0, #68	; 0x44
   16308:	bne	1642c <__assert_fail@plt+0x50dc>
   1630c:	mov	r6, #2
   16310:	mov	r5, #1000	; 0x3e8
   16314:	sub	r1, r4, #66	; 0x42
   16318:	cmp	r1, #53	; 0x35
   1631c:	bhi	16418 <__assert_fail@plt+0x50c8>
   16320:	mov	r0, #0
   16324:	add	r2, pc, #0
   16328:	ldr	pc, [r2, r1, lsl #2]
   1632c:	muleq	r1, r8, r4
   16330:	andeq	r6, r1, r8, lsl r4
   16334:	andeq	r6, r1, r8, lsl r4
   16338:	andeq	r6, r1, r4, lsr #9
   1633c:	andeq	r6, r1, r8, lsl r4
   16340:	andeq	r6, r1, r4, lsl #8
   16344:	andeq	r6, r1, r8, lsl r4
   16348:	andeq	r6, r1, r8, lsl r4
   1634c:	andeq	r6, r1, r8, lsl r4
   16350:	andeq	r6, r1, r8, asr #8
   16354:	andeq	r6, r1, r8, lsl r4
   16358:	andeq	r6, r1, ip, asr r4
   1635c:	andeq	r6, r1, r8, lsl r4
   16360:	andeq	r6, r1, r8, lsl r4
   16364:			; <UNDEFINED> instruction: 0x000164b8
   16368:	andeq	r6, r1, r8, lsl r4
   1636c:	andeq	r6, r1, r8, lsl r4
   16370:	andeq	r6, r1, r8, lsl r4
   16374:	andeq	r6, r1, r0, ror r4
   16378:	andeq	r6, r1, r8, lsl r4
   1637c:	andeq	r6, r1, r8, lsl r4
   16380:	andeq	r6, r1, r8, lsl r4
   16384:	andeq	r6, r1, r8, lsl r4
   16388:	andeq	r6, r1, ip, asr #9
   1638c:	andeq	r6, r1, r4, lsl #9
   16390:	andeq	r6, r1, r8, lsl r4
   16394:	andeq	r6, r1, r8, lsl r4
   16398:	andeq	r6, r1, r8, lsl r4
   1639c:	andeq	r6, r1, r8, lsl r4
   163a0:	andeq	r6, r1, r8, lsl r4
   163a4:	andeq	r6, r1, r8, lsl r4
   163a8:	andeq	r6, r1, r8, lsl r4
   163ac:	andeq	r6, r1, r0, ror #9
   163b0:	strdeq	r6, [r1], -r8
   163b4:	andeq	r6, r1, r8, lsl r4
   163b8:	andeq	r6, r1, r8, lsl r4
   163bc:	andeq	r6, r1, r8, lsl r4
   163c0:	andeq	r6, r1, r4, lsl #8
   163c4:	andeq	r6, r1, r8, lsl r4
   163c8:	andeq	r6, r1, r8, lsl r4
   163cc:	andeq	r6, r1, r8, lsl r4
   163d0:	andeq	r6, r1, r8, asr #8
   163d4:	andeq	r6, r1, r8, lsl r4
   163d8:	andeq	r6, r1, ip, asr r4
   163dc:	andeq	r6, r1, r8, lsl r4
   163e0:	andeq	r6, r1, r8, lsl r4
   163e4:	andeq	r6, r1, r8, lsl r4
   163e8:	andeq	r6, r1, r8, lsl r4
   163ec:	andeq	r6, r1, r8, lsl r4
   163f0:	andeq	r6, r1, r8, lsl r4
   163f4:	andeq	r6, r1, r0, ror r4
   163f8:	andeq	r6, r1, r8, lsl r4
   163fc:	andeq	r6, r1, r8, lsl r4
   16400:	andeq	r6, r1, ip, ror #9
   16404:	add	r0, sp, #4
   16408:	mov	r1, r5
   1640c:	mov	r2, #3
   16410:	bl	165b4 <__assert_fail@plt+0x5264>
   16414:	b	164f8 <__assert_fail@plt+0x51a8>
   16418:	ldr	r0, [sp, #4]
   1641c:	ldr	r1, [sp]
   16420:	str	r0, [r1]
   16424:	orr	r8, r8, #2
   16428:	b	16520 <__assert_fail@plt+0x51d0>
   1642c:	cmp	r0, #105	; 0x69
   16430:	bne	16314 <__assert_fail@plt+0x4fc4>
   16434:	ldrb	r0, [r7, #2]
   16438:	mov	r6, #1
   1643c:	cmp	r0, #66	; 0x42
   16440:	movweq	r6, #3
   16444:	b	16314 <__assert_fail@plt+0x4fc4>
   16448:	add	r0, sp, #4
   1644c:	mov	r1, r5
   16450:	mov	r2, #1
   16454:	bl	165b4 <__assert_fail@plt+0x5264>
   16458:	b	164f8 <__assert_fail@plt+0x51a8>
   1645c:	add	r0, sp, #4
   16460:	mov	r1, r5
   16464:	mov	r2, #2
   16468:	bl	165b4 <__assert_fail@plt+0x5264>
   1646c:	b	164f8 <__assert_fail@plt+0x51a8>
   16470:	add	r0, sp, #4
   16474:	mov	r1, r5
   16478:	mov	r2, #4
   1647c:	bl	165b4 <__assert_fail@plt+0x5264>
   16480:	b	164f8 <__assert_fail@plt+0x51a8>
   16484:	add	r0, sp, #4
   16488:	mov	r1, r5
   1648c:	mov	r2, #7
   16490:	bl	165b4 <__assert_fail@plt+0x5264>
   16494:	b	164f8 <__assert_fail@plt+0x51a8>
   16498:	add	r0, sp, #4
   1649c:	mov	r1, #1024	; 0x400
   164a0:	b	164f4 <__assert_fail@plt+0x51a4>
   164a4:	add	r0, sp, #4
   164a8:	mov	r1, r5
   164ac:	mov	r2, #6
   164b0:	bl	165b4 <__assert_fail@plt+0x5264>
   164b4:	b	164f8 <__assert_fail@plt+0x51a8>
   164b8:	add	r0, sp, #4
   164bc:	mov	r1, r5
   164c0:	mov	r2, #5
   164c4:	bl	165b4 <__assert_fail@plt+0x5264>
   164c8:	b	164f8 <__assert_fail@plt+0x51a8>
   164cc:	add	r0, sp, #4
   164d0:	mov	r1, r5
   164d4:	mov	r2, #8
   164d8:	bl	165b4 <__assert_fail@plt+0x5264>
   164dc:	b	164f8 <__assert_fail@plt+0x51a8>
   164e0:	add	r0, sp, #4
   164e4:	mov	r1, #512	; 0x200
   164e8:	b	164f4 <__assert_fail@plt+0x51a4>
   164ec:	add	r0, sp, #4
   164f0:	mov	r1, #2
   164f4:	bl	1654c <__assert_fail@plt+0x51fc>
   164f8:	ldr	r1, [r9]
   164fc:	add	r2, r1, r6
   16500:	str	r2, [r9]
   16504:	ldrb	r1, [r1, r6]
   16508:	orr	r8, r0, r8
   1650c:	cmp	r1, #0
   16510:	orrne	r8, r8, #2
   16514:	ldr	r0, [sp, #4]
   16518:	ldr	r1, [sp]
   1651c:	str	r0, [r1]
   16520:	mov	r0, r8
   16524:	sub	sp, fp, #28
   16528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1652c:	movw	r0, #34870	; 0x8836
   16530:	movt	r0, #1
   16534:	movw	r1, #34908	; 0x885c
   16538:	movt	r1, #1
   1653c:	movw	r3, #34924	; 0x886c
   16540:	movt	r3, #1
   16544:	mov	r2, #85	; 0x55
   16548:	bl	11350 <__assert_fail@plt>
   1654c:	cmn	r1, #1
   16550:	ble	16584 <__assert_fail@plt+0x5234>
   16554:	cmp	r1, #0
   16558:	beq	1659c <__assert_fail@plt+0x524c>
   1655c:	push	{fp, lr}
   16560:	mov	fp, sp
   16564:	mvn	r3, #0
   16568:	udiv	ip, r3, r1
   1656c:	ldr	lr, [r0]
   16570:	mov	r2, #1
   16574:	cmp	ip, lr
   16578:	pop	{fp, lr}
   1657c:	bcs	1659c <__assert_fail@plt+0x524c>
   16580:	b	165a8 <__assert_fail@plt+0x5258>
   16584:	ldr	r2, [r0]
   16588:	cmp	r2, #0
   1658c:	beq	1659c <__assert_fail@plt+0x524c>
   16590:	mov	r2, #1
   16594:	mvn	r3, #0
   16598:	b	165a8 <__assert_fail@plt+0x5258>
   1659c:	ldr	r2, [r0]
   165a0:	mul	r3, r2, r1
   165a4:	mov	r2, #0
   165a8:	str	r3, [r0]
   165ac:	mov	r0, r2
   165b0:	bx	lr
   165b4:	push	{r4, r5, r6, r7, fp, lr}
   165b8:	add	fp, sp, #16
   165bc:	cmp	r2, #0
   165c0:	moveq	r6, #0
   165c4:	moveq	r0, r6
   165c8:	popeq	{r4, r5, r6, r7, fp, pc}
   165cc:	mov	r4, r2
   165d0:	mov	r5, r1
   165d4:	mov	r7, r0
   165d8:	mov	r6, #0
   165dc:	mov	r0, r7
   165e0:	mov	r1, r5
   165e4:	bl	1654c <__assert_fail@plt+0x51fc>
   165e8:	orr	r6, r0, r6
   165ec:	subs	r4, r4, #1
   165f0:	bne	165dc <__assert_fail@plt+0x528c>
   165f4:	mov	r0, r6
   165f8:	pop	{r4, r5, r6, r7, fp, pc}
   165fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16600:	add	fp, sp, #28
   16604:	sub	sp, sp, #20
   16608:	cmp	r2, #37	; 0x25
   1660c:	bcs	16a3c <__assert_fail@plt+0x56ec>
   16610:	mov	r5, r2
   16614:	mov	r6, r1
   16618:	mov	r4, r0
   1661c:	str	r3, [sp, #4]
   16620:	ldr	sl, [fp, #8]
   16624:	bl	11248 <__errno_location@plt>
   16628:	mov	r7, r0
   1662c:	mov	r0, #0
   16630:	str	r0, [r7]
   16634:	bl	1120c <__ctype_b_loc@plt>
   16638:	ldr	r1, [r0]
   1663c:	mov	r2, r4
   16640:	ldrb	r0, [r2], #1
   16644:	add	r3, r1, r0, lsl #1
   16648:	ldrb	r3, [r3, #1]
   1664c:	tst	r3, #32
   16650:	bne	16640 <__assert_fail@plt+0x52f0>
   16654:	add	r9, sp, #16
   16658:	cmp	r6, #0
   1665c:	movne	r9, r6
   16660:	mov	r8, #4
   16664:	cmp	r0, #45	; 0x2d
   16668:	beq	16a30 <__assert_fail@plt+0x56e0>
   1666c:	mov	r0, r4
   16670:	mov	r1, r9
   16674:	mov	r2, r5
   16678:	bl	11284 <strtoumax@plt>
   1667c:	str	r1, [sp, #12]
   16680:	str	r0, [sp, #8]
   16684:	ldr	r6, [r9]
   16688:	cmp	r6, r4
   1668c:	beq	166b4 <__assert_fail@plt+0x5364>
   16690:	ldr	r0, [r7]
   16694:	cmp	r0, #0
   16698:	beq	166e8 <__assert_fail@plt+0x5398>
   1669c:	cmp	r0, #34	; 0x22
   166a0:	bne	16a30 <__assert_fail@plt+0x56e0>
   166a4:	mov	r8, #1
   166a8:	cmp	sl, #0
   166ac:	bne	166f4 <__assert_fail@plt+0x53a4>
   166b0:	b	16a20 <__assert_fail@plt+0x56d0>
   166b4:	cmp	sl, #0
   166b8:	ldrbne	r1, [r6]
   166bc:	cmpne	r1, #0
   166c0:	beq	16a30 <__assert_fail@plt+0x56e0>
   166c4:	mov	r0, sl
   166c8:	bl	1123c <strchr@plt>
   166cc:	cmp	r0, #0
   166d0:	beq	16a30 <__assert_fail@plt+0x56e0>
   166d4:	mov	r8, #0
   166d8:	str	r8, [sp, #12]
   166dc:	mov	r0, #1
   166e0:	str	r0, [sp, #8]
   166e4:	b	166f4 <__assert_fail@plt+0x53a4>
   166e8:	mov	r8, r0
   166ec:	cmp	sl, #0
   166f0:	beq	16a20 <__assert_fail@plt+0x56d0>
   166f4:	ldrb	r4, [r6]
   166f8:	cmp	r4, #0
   166fc:	beq	16a20 <__assert_fail@plt+0x56d0>
   16700:	mov	r0, sl
   16704:	mov	r1, r4
   16708:	bl	1123c <strchr@plt>
   1670c:	cmp	r0, #0
   16710:	beq	16920 <__assert_fail@plt+0x55d0>
   16714:	sub	r0, r4, #69	; 0x45
   16718:	mov	r7, #1
   1671c:	mov	r5, #1024	; 0x400
   16720:	cmp	r0, #47	; 0x2f
   16724:	bhi	1681c <__assert_fail@plt+0x54cc>
   16728:	add	r1, pc, #0
   1672c:	ldr	pc, [r1, r0, lsl #2]
   16730:	strdeq	r6, [r1], -r0
   16734:	andeq	r6, r1, ip, lsl r8
   16738:	strdeq	r6, [r1], -r0
   1673c:	andeq	r6, r1, ip, lsl r8
   16740:	andeq	r6, r1, ip, lsl r8
   16744:	andeq	r6, r1, ip, lsl r8
   16748:	strdeq	r6, [r1], -r0
   1674c:	andeq	r6, r1, ip, lsl r8
   16750:	strdeq	r6, [r1], -r0
   16754:	andeq	r6, r1, ip, lsl r8
   16758:	andeq	r6, r1, ip, lsl r8
   1675c:	strdeq	r6, [r1], -r0
   16760:	andeq	r6, r1, ip, lsl r8
   16764:	andeq	r6, r1, ip, lsl r8
   16768:	andeq	r6, r1, ip, lsl r8
   1676c:	strdeq	r6, [r1], -r0
   16770:	andeq	r6, r1, ip, lsl r8
   16774:	andeq	r6, r1, ip, lsl r8
   16778:	andeq	r6, r1, ip, lsl r8
   1677c:	andeq	r6, r1, ip, lsl r8
   16780:	strdeq	r6, [r1], -r0
   16784:	strdeq	r6, [r1], -r0
   16788:	andeq	r6, r1, ip, lsl r8
   1678c:	andeq	r6, r1, ip, lsl r8
   16790:	andeq	r6, r1, ip, lsl r8
   16794:	andeq	r6, r1, ip, lsl r8
   16798:	andeq	r6, r1, ip, lsl r8
   1679c:	andeq	r6, r1, ip, lsl r8
   167a0:	andeq	r6, r1, ip, lsl r8
   167a4:	andeq	r6, r1, ip, lsl r8
   167a8:	andeq	r6, r1, ip, lsl r8
   167ac:	andeq	r6, r1, ip, lsl r8
   167b0:	andeq	r6, r1, ip, lsl r8
   167b4:	andeq	r6, r1, ip, lsl r8
   167b8:	strdeq	r6, [r1], -r0
   167bc:	andeq	r6, r1, ip, lsl r8
   167c0:	andeq	r6, r1, ip, lsl r8
   167c4:	andeq	r6, r1, ip, lsl r8
   167c8:	strdeq	r6, [r1], -r0
   167cc:	andeq	r6, r1, ip, lsl r8
   167d0:	strdeq	r6, [r1], -r0
   167d4:	andeq	r6, r1, ip, lsl r8
   167d8:	andeq	r6, r1, ip, lsl r8
   167dc:	andeq	r6, r1, ip, lsl r8
   167e0:	andeq	r6, r1, ip, lsl r8
   167e4:	andeq	r6, r1, ip, lsl r8
   167e8:	andeq	r6, r1, ip, lsl r8
   167ec:	strdeq	r6, [r1], -r0
   167f0:	mov	r0, sl
   167f4:	mov	r1, #48	; 0x30
   167f8:	bl	1123c <strchr@plt>
   167fc:	cmp	r0, #0
   16800:	beq	1681c <__assert_fail@plt+0x54cc>
   16804:	ldrb	r0, [r6, #1]
   16808:	cmp	r0, #66	; 0x42
   1680c:	cmpne	r0, #68	; 0x44
   16810:	bne	16938 <__assert_fail@plt+0x55e8>
   16814:	mov	r7, #2
   16818:	mov	r5, #1000	; 0x3e8
   1681c:	sub	r1, r4, #66	; 0x42
   16820:	cmp	r1, #53	; 0x35
   16824:	bhi	16920 <__assert_fail@plt+0x55d0>
   16828:	mov	r0, #0
   1682c:	add	r2, pc, #0
   16830:	ldr	pc, [r2, r1, lsl #2]
   16834:	andeq	r6, r1, r4, lsr #19
   16838:	andeq	r6, r1, r0, lsr #18
   1683c:	andeq	r6, r1, r0, lsr #18
   16840:			; <UNDEFINED> instruction: 0x000169b0
   16844:	andeq	r6, r1, r0, lsr #18
   16848:	andeq	r6, r1, ip, lsl #18
   1684c:	andeq	r6, r1, r0, lsr #18
   16850:	andeq	r6, r1, r0, lsr #18
   16854:	andeq	r6, r1, r0, lsr #18
   16858:	andeq	r6, r1, r4, asr r9
   1685c:	andeq	r6, r1, r0, lsr #18
   16860:	andeq	r6, r1, r8, ror #18
   16864:	andeq	r6, r1, r0, lsr #18
   16868:	andeq	r6, r1, r0, lsr #18
   1686c:	andeq	r6, r1, r4, asr #19
   16870:	andeq	r6, r1, r0, lsr #18
   16874:	andeq	r6, r1, r0, lsr #18
   16878:	andeq	r6, r1, r0, lsr #18
   1687c:	andeq	r6, r1, ip, ror r9
   16880:	andeq	r6, r1, r0, lsr #18
   16884:	andeq	r6, r1, r0, lsr #18
   16888:	andeq	r6, r1, r0, lsr #18
   1688c:	andeq	r6, r1, r0, lsr #18
   16890:	ldrdeq	r6, [r1], -r8
   16894:	muleq	r1, r0, r9
   16898:	andeq	r6, r1, r0, lsr #18
   1689c:	andeq	r6, r1, r0, lsr #18
   168a0:	andeq	r6, r1, r0, lsr #18
   168a4:	andeq	r6, r1, r0, lsr #18
   168a8:	andeq	r6, r1, r0, lsr #18
   168ac:	andeq	r6, r1, r0, lsr #18
   168b0:	andeq	r6, r1, r0, lsr #18
   168b4:	andeq	r6, r1, ip, ror #19
   168b8:	andeq	r6, r1, r4, lsl #20
   168bc:	andeq	r6, r1, r0, lsr #18
   168c0:	andeq	r6, r1, r0, lsr #18
   168c4:	andeq	r6, r1, r0, lsr #18
   168c8:	andeq	r6, r1, ip, lsl #18
   168cc:	andeq	r6, r1, r0, lsr #18
   168d0:	andeq	r6, r1, r0, lsr #18
   168d4:	andeq	r6, r1, r0, lsr #18
   168d8:	andeq	r6, r1, r4, asr r9
   168dc:	andeq	r6, r1, r0, lsr #18
   168e0:	andeq	r6, r1, r8, ror #18
   168e4:	andeq	r6, r1, r0, lsr #18
   168e8:	andeq	r6, r1, r0, lsr #18
   168ec:	andeq	r6, r1, r0, lsr #18
   168f0:	andeq	r6, r1, r0, lsr #18
   168f4:	andeq	r6, r1, r0, lsr #18
   168f8:	andeq	r6, r1, r0, lsr #18
   168fc:	andeq	r6, r1, ip, ror r9
   16900:	andeq	r6, r1, r0, lsr #18
   16904:	andeq	r6, r1, r0, lsr #18
   16908:	strdeq	r6, [r1], -r8
   1690c:	add	r0, sp, #8
   16910:	mov	r1, r5
   16914:	mov	r2, #3
   16918:	bl	16ae8 <__assert_fail@plt+0x5798>
   1691c:	b	16a04 <__assert_fail@plt+0x56b4>
   16920:	ldr	r0, [sp, #8]
   16924:	ldr	r1, [sp, #12]
   16928:	ldr	r2, [sp, #4]
   1692c:	strd	r0, [r2]
   16930:	orr	r8, r8, #2
   16934:	b	16a30 <__assert_fail@plt+0x56e0>
   16938:	cmp	r0, #105	; 0x69
   1693c:	bne	1681c <__assert_fail@plt+0x54cc>
   16940:	ldrb	r0, [r6, #2]
   16944:	mov	r7, #1
   16948:	cmp	r0, #66	; 0x42
   1694c:	movweq	r7, #3
   16950:	b	1681c <__assert_fail@plt+0x54cc>
   16954:	add	r0, sp, #8
   16958:	mov	r1, r5
   1695c:	mov	r2, #1
   16960:	bl	16ae8 <__assert_fail@plt+0x5798>
   16964:	b	16a04 <__assert_fail@plt+0x56b4>
   16968:	add	r0, sp, #8
   1696c:	mov	r1, r5
   16970:	mov	r2, #2
   16974:	bl	16ae8 <__assert_fail@plt+0x5798>
   16978:	b	16a04 <__assert_fail@plt+0x56b4>
   1697c:	add	r0, sp, #8
   16980:	mov	r1, r5
   16984:	mov	r2, #4
   16988:	bl	16ae8 <__assert_fail@plt+0x5798>
   1698c:	b	16a04 <__assert_fail@plt+0x56b4>
   16990:	add	r0, sp, #8
   16994:	mov	r1, r5
   16998:	mov	r2, #7
   1699c:	bl	16ae8 <__assert_fail@plt+0x5798>
   169a0:	b	16a04 <__assert_fail@plt+0x56b4>
   169a4:	add	r0, sp, #8
   169a8:	mov	r1, #1024	; 0x400
   169ac:	b	16a00 <__assert_fail@plt+0x56b0>
   169b0:	add	r0, sp, #8
   169b4:	mov	r1, r5
   169b8:	mov	r2, #6
   169bc:	bl	16ae8 <__assert_fail@plt+0x5798>
   169c0:	b	16a04 <__assert_fail@plt+0x56b4>
   169c4:	add	r0, sp, #8
   169c8:	mov	r1, r5
   169cc:	mov	r2, #5
   169d0:	bl	16ae8 <__assert_fail@plt+0x5798>
   169d4:	b	16a04 <__assert_fail@plt+0x56b4>
   169d8:	add	r0, sp, #8
   169dc:	mov	r1, r5
   169e0:	mov	r2, #8
   169e4:	bl	16ae8 <__assert_fail@plt+0x5798>
   169e8:	b	16a04 <__assert_fail@plt+0x56b4>
   169ec:	add	r0, sp, #8
   169f0:	mov	r1, #512	; 0x200
   169f4:	b	16a00 <__assert_fail@plt+0x56b0>
   169f8:	add	r0, sp, #8
   169fc:	mov	r1, #2
   16a00:	bl	16a5c <__assert_fail@plt+0x570c>
   16a04:	ldr	r1, [r9]
   16a08:	add	r2, r1, r7
   16a0c:	str	r2, [r9]
   16a10:	ldrb	r1, [r1, r7]
   16a14:	orr	r8, r0, r8
   16a18:	cmp	r1, #0
   16a1c:	orrne	r8, r8, #2
   16a20:	ldr	r0, [sp, #8]
   16a24:	ldr	r1, [sp, #12]
   16a28:	ldr	r2, [sp, #4]
   16a2c:	strd	r0, [r2]
   16a30:	mov	r0, r8
   16a34:	sub	sp, fp, #28
   16a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a3c:	movw	r0, #34870	; 0x8836
   16a40:	movt	r0, #1
   16a44:	movw	r1, #34908	; 0x885c
   16a48:	movt	r1, #1
   16a4c:	movw	r3, #35005	; 0x88bd
   16a50:	movt	r3, #1
   16a54:	mov	r2, #85	; 0x55
   16a58:	bl	11350 <__assert_fail@plt>
   16a5c:	push	{r4, r5, r6, r7, fp, lr}
   16a60:	add	fp, sp, #16
   16a64:	mov	r5, r1
   16a68:	mov	r4, r0
   16a6c:	cmn	r1, #1
   16a70:	ble	16aa8 <__assert_fail@plt+0x5758>
   16a74:	cmp	r5, #0
   16a78:	beq	16ac8 <__assert_fail@plt+0x5778>
   16a7c:	asr	r3, r5, #31
   16a80:	mvn	r6, #0
   16a84:	mvn	r0, #0
   16a88:	mvn	r1, #0
   16a8c:	mov	r2, r5
   16a90:	bl	17438 <__assert_fail@plt+0x60e8>
   16a94:	ldrd	r2, [r4]
   16a98:	subs	r0, r0, r2
   16a9c:	sbcs	r0, r1, r3
   16aa0:	bcc	16ab8 <__assert_fail@plt+0x5768>
   16aa4:	b	16ac8 <__assert_fail@plt+0x5778>
   16aa8:	ldrd	r0, [r4]
   16aac:	orrs	r0, r0, r1
   16ab0:	beq	16ac8 <__assert_fail@plt+0x5778>
   16ab4:	mvn	r6, #0
   16ab8:	mov	r0, #1
   16abc:	mvn	r7, #0
   16ac0:	strd	r6, [r4]
   16ac4:	pop	{r4, r5, r6, r7, fp, pc}
   16ac8:	ldrd	r0, [r4]
   16acc:	umull	r6, r2, r0, r5
   16ad0:	asr	r3, r5, #31
   16ad4:	mla	r0, r0, r3, r2
   16ad8:	mla	r7, r1, r5, r0
   16adc:	mov	r0, #0
   16ae0:	strd	r6, [r4]
   16ae4:	pop	{r4, r5, r6, r7, fp, pc}
   16ae8:	push	{r4, r5, r6, r7, fp, lr}
   16aec:	add	fp, sp, #16
   16af0:	cmp	r2, #0
   16af4:	moveq	r6, #0
   16af8:	moveq	r0, r6
   16afc:	popeq	{r4, r5, r6, r7, fp, pc}
   16b00:	mov	r4, r2
   16b04:	mov	r5, r1
   16b08:	mov	r7, r0
   16b0c:	mov	r6, #0
   16b10:	mov	r0, r7
   16b14:	mov	r1, r5
   16b18:	bl	16a5c <__assert_fail@plt+0x570c>
   16b1c:	orr	r6, r0, r6
   16b20:	subs	r4, r4, #1
   16b24:	bne	16b10 <__assert_fail@plt+0x57c0>
   16b28:	mov	r0, r6
   16b2c:	pop	{r4, r5, r6, r7, fp, pc}
   16b30:	clz	r2, r1
   16b34:	lsr	r2, r2, #5
   16b38:	clz	r3, r0
   16b3c:	lsr	r3, r3, #5
   16b40:	orrs	r2, r3, r2
   16b44:	movwne	r1, #1
   16b48:	movwne	r0, #1
   16b4c:	cmp	r1, #0
   16b50:	beq	16b80 <__assert_fail@plt+0x5830>
   16b54:	mvn	r2, #-2147483648	; 0x80000000
   16b58:	udiv	r2, r2, r1
   16b5c:	cmp	r2, r0
   16b60:	bcs	16b80 <__assert_fail@plt+0x5830>
   16b64:	push	{fp, lr}
   16b68:	mov	fp, sp
   16b6c:	bl	11248 <__errno_location@plt>
   16b70:	mov	r1, #12
   16b74:	str	r1, [r0]
   16b78:	mov	r0, #0
   16b7c:	pop	{fp, pc}
   16b80:	b	11098 <calloc@plt>
   16b84:	cmp	r0, #0
   16b88:	movweq	r0, #1
   16b8c:	cmn	r0, #1
   16b90:	ble	16b98 <__assert_fail@plt+0x5848>
   16b94:	b	111c4 <malloc@plt>
   16b98:	push	{fp, lr}
   16b9c:	mov	fp, sp
   16ba0:	bl	11248 <__errno_location@plt>
   16ba4:	mov	r1, #12
   16ba8:	str	r1, [r0]
   16bac:	mov	r0, #0
   16bb0:	pop	{fp, pc}
   16bb4:	push	{fp, lr}
   16bb8:	mov	fp, sp
   16bbc:	cmp	r0, #0
   16bc0:	beq	16bdc <__assert_fail@plt+0x588c>
   16bc4:	cmp	r1, #0
   16bc8:	beq	16be8 <__assert_fail@plt+0x5898>
   16bcc:	cmn	r1, #1
   16bd0:	ble	16bf4 <__assert_fail@plt+0x58a4>
   16bd4:	pop	{fp, lr}
   16bd8:	b	11140 <realloc@plt>
   16bdc:	mov	r0, r1
   16be0:	pop	{fp, lr}
   16be4:	b	16b84 <__assert_fail@plt+0x5834>
   16be8:	bl	13740 <__assert_fail@plt+0x23f0>
   16bec:	mov	r0, #0
   16bf0:	pop	{fp, pc}
   16bf4:	bl	11248 <__errno_location@plt>
   16bf8:	mov	r1, #12
   16bfc:	str	r1, [r0]
   16c00:	mov	r0, #0
   16c04:	pop	{fp, pc}
   16c08:	mov	r1, r0
   16c0c:	sub	r2, r0, #65	; 0x41
   16c10:	mov	r0, #1
   16c14:	cmp	r2, #26
   16c18:	subcs	r2, r1, #97	; 0x61
   16c1c:	cmpcs	r2, #26
   16c20:	bcs	16c28 <__assert_fail@plt+0x58d8>
   16c24:	bx	lr
   16c28:	sub	r1, r1, #48	; 0x30
   16c2c:	cmp	r1, #10
   16c30:	movcs	r0, #0
   16c34:	bx	lr
   16c38:	mov	r1, r0
   16c3c:	sub	r2, r0, #65	; 0x41
   16c40:	mov	r0, #1
   16c44:	cmp	r2, #26
   16c48:	subcs	r1, r1, #97	; 0x61
   16c4c:	cmpcs	r1, #26
   16c50:	movcs	r0, #0
   16c54:	bx	lr
   16c58:	mov	r1, #0
   16c5c:	cmp	r0, #128	; 0x80
   16c60:	movwcc	r1, #1
   16c64:	mov	r0, r1
   16c68:	bx	lr
   16c6c:	sub	r1, r0, #9
   16c70:	clz	r1, r1
   16c74:	lsr	r1, r1, #5
   16c78:	sub	r0, r0, #32
   16c7c:	clz	r0, r0
   16c80:	lsr	r0, r0, #5
   16c84:	orr	r0, r0, r1
   16c88:	bx	lr
   16c8c:	mov	r1, r0
   16c90:	mov	r0, #1
   16c94:	cmp	r1, #32
   16c98:	bxcc	lr
   16c9c:	cmp	r1, #127	; 0x7f
   16ca0:	movne	r0, #0
   16ca4:	bx	lr
   16ca8:	sub	r1, r0, #48	; 0x30
   16cac:	mov	r0, #0
   16cb0:	cmp	r1, #10
   16cb4:	movwcc	r0, #1
   16cb8:	bx	lr
   16cbc:	sub	r1, r0, #33	; 0x21
   16cc0:	mov	r0, #0
   16cc4:	cmp	r1, #94	; 0x5e
   16cc8:	movwcc	r0, #1
   16ccc:	bx	lr
   16cd0:	sub	r1, r0, #97	; 0x61
   16cd4:	mov	r0, #0
   16cd8:	cmp	r1, #26
   16cdc:	movwcc	r0, #1
   16ce0:	bx	lr
   16ce4:	sub	r1, r0, #32
   16ce8:	mov	r0, #0
   16cec:	cmp	r1, #95	; 0x5f
   16cf0:	movwcc	r0, #1
   16cf4:	bx	lr
   16cf8:	sub	r1, r0, #33	; 0x21
   16cfc:	cmp	r1, #93	; 0x5d
   16d00:	bhi	16e8c <__assert_fail@plt+0x5b3c>
   16d04:	mov	r0, #1
   16d08:	add	r2, pc, #0
   16d0c:	ldr	pc, [r2, r1, lsl #2]
   16d10:	andeq	r6, r1, r8, lsl #29
   16d14:	andeq	r6, r1, r8, lsl #29
   16d18:	andeq	r6, r1, r8, lsl #29
   16d1c:	andeq	r6, r1, r8, lsl #29
   16d20:	andeq	r6, r1, r8, lsl #29
   16d24:	andeq	r6, r1, r8, lsl #29
   16d28:	andeq	r6, r1, r8, lsl #29
   16d2c:	andeq	r6, r1, r8, lsl #29
   16d30:	andeq	r6, r1, r8, lsl #29
   16d34:	andeq	r6, r1, r8, lsl #29
   16d38:	andeq	r6, r1, r8, lsl #29
   16d3c:	andeq	r6, r1, r8, lsl #29
   16d40:	andeq	r6, r1, r8, lsl #29
   16d44:	andeq	r6, r1, r8, lsl #29
   16d48:	andeq	r6, r1, r8, lsl #29
   16d4c:	andeq	r6, r1, ip, lsl #29
   16d50:	andeq	r6, r1, ip, lsl #29
   16d54:	andeq	r6, r1, ip, lsl #29
   16d58:	andeq	r6, r1, ip, lsl #29
   16d5c:	andeq	r6, r1, ip, lsl #29
   16d60:	andeq	r6, r1, ip, lsl #29
   16d64:	andeq	r6, r1, ip, lsl #29
   16d68:	andeq	r6, r1, ip, lsl #29
   16d6c:	andeq	r6, r1, ip, lsl #29
   16d70:	andeq	r6, r1, ip, lsl #29
   16d74:	andeq	r6, r1, r8, lsl #29
   16d78:	andeq	r6, r1, r8, lsl #29
   16d7c:	andeq	r6, r1, r8, lsl #29
   16d80:	andeq	r6, r1, r8, lsl #29
   16d84:	andeq	r6, r1, r8, lsl #29
   16d88:	andeq	r6, r1, r8, lsl #29
   16d8c:	andeq	r6, r1, r8, lsl #29
   16d90:	andeq	r6, r1, ip, lsl #29
   16d94:	andeq	r6, r1, ip, lsl #29
   16d98:	andeq	r6, r1, ip, lsl #29
   16d9c:	andeq	r6, r1, ip, lsl #29
   16da0:	andeq	r6, r1, ip, lsl #29
   16da4:	andeq	r6, r1, ip, lsl #29
   16da8:	andeq	r6, r1, ip, lsl #29
   16dac:	andeq	r6, r1, ip, lsl #29
   16db0:	andeq	r6, r1, ip, lsl #29
   16db4:	andeq	r6, r1, ip, lsl #29
   16db8:	andeq	r6, r1, ip, lsl #29
   16dbc:	andeq	r6, r1, ip, lsl #29
   16dc0:	andeq	r6, r1, ip, lsl #29
   16dc4:	andeq	r6, r1, ip, lsl #29
   16dc8:	andeq	r6, r1, ip, lsl #29
   16dcc:	andeq	r6, r1, ip, lsl #29
   16dd0:	andeq	r6, r1, ip, lsl #29
   16dd4:	andeq	r6, r1, ip, lsl #29
   16dd8:	andeq	r6, r1, ip, lsl #29
   16ddc:	andeq	r6, r1, ip, lsl #29
   16de0:	andeq	r6, r1, ip, lsl #29
   16de4:	andeq	r6, r1, ip, lsl #29
   16de8:	andeq	r6, r1, ip, lsl #29
   16dec:	andeq	r6, r1, ip, lsl #29
   16df0:	andeq	r6, r1, ip, lsl #29
   16df4:	andeq	r6, r1, ip, lsl #29
   16df8:	andeq	r6, r1, r8, lsl #29
   16dfc:	andeq	r6, r1, r8, lsl #29
   16e00:	andeq	r6, r1, r8, lsl #29
   16e04:	andeq	r6, r1, r8, lsl #29
   16e08:	andeq	r6, r1, r8, lsl #29
   16e0c:	andeq	r6, r1, r8, lsl #29
   16e10:	andeq	r6, r1, ip, lsl #29
   16e14:	andeq	r6, r1, ip, lsl #29
   16e18:	andeq	r6, r1, ip, lsl #29
   16e1c:	andeq	r6, r1, ip, lsl #29
   16e20:	andeq	r6, r1, ip, lsl #29
   16e24:	andeq	r6, r1, ip, lsl #29
   16e28:	andeq	r6, r1, ip, lsl #29
   16e2c:	andeq	r6, r1, ip, lsl #29
   16e30:	andeq	r6, r1, ip, lsl #29
   16e34:	andeq	r6, r1, ip, lsl #29
   16e38:	andeq	r6, r1, ip, lsl #29
   16e3c:	andeq	r6, r1, ip, lsl #29
   16e40:	andeq	r6, r1, ip, lsl #29
   16e44:	andeq	r6, r1, ip, lsl #29
   16e48:	andeq	r6, r1, ip, lsl #29
   16e4c:	andeq	r6, r1, ip, lsl #29
   16e50:	andeq	r6, r1, ip, lsl #29
   16e54:	andeq	r6, r1, ip, lsl #29
   16e58:	andeq	r6, r1, ip, lsl #29
   16e5c:	andeq	r6, r1, ip, lsl #29
   16e60:	andeq	r6, r1, ip, lsl #29
   16e64:	andeq	r6, r1, ip, lsl #29
   16e68:	andeq	r6, r1, ip, lsl #29
   16e6c:	andeq	r6, r1, ip, lsl #29
   16e70:	andeq	r6, r1, ip, lsl #29
   16e74:	andeq	r6, r1, ip, lsl #29
   16e78:	andeq	r6, r1, r8, lsl #29
   16e7c:	andeq	r6, r1, r8, lsl #29
   16e80:	andeq	r6, r1, r8, lsl #29
   16e84:	andeq	r6, r1, r8, lsl #29
   16e88:	bx	lr
   16e8c:	mov	r0, #0
   16e90:	bx	lr
   16e94:	sub	r0, r0, #9
   16e98:	cmp	r0, #23
   16e9c:	movhi	r0, #0
   16ea0:	bxhi	lr
   16ea4:	bic	r0, r0, #-16777216	; 0xff000000
   16ea8:	movw	r1, #31
   16eac:	movt	r1, #128	; 0x80
   16eb0:	mov	r2, #1
   16eb4:	and	r0, r2, r1, lsr r0
   16eb8:	bx	lr
   16ebc:	sub	r1, r0, #65	; 0x41
   16ec0:	mov	r0, #0
   16ec4:	cmp	r1, #26
   16ec8:	movwcc	r0, #1
   16ecc:	bx	lr
   16ed0:	mov	r1, r0
   16ed4:	sub	r2, r0, #48	; 0x30
   16ed8:	mov	r0, #1
   16edc:	cmp	r2, #22
   16ee0:	bhi	16ef8 <__assert_fail@plt+0x5ba8>
   16ee4:	mov	ip, #1
   16ee8:	movw	r3, #1023	; 0x3ff
   16eec:	movt	r3, #126	; 0x7e
   16ef0:	tst	r3, ip, lsl r2
   16ef4:	bxne	lr
   16ef8:	sub	r1, r1, #97	; 0x61
   16efc:	cmp	r1, #6
   16f00:	movcs	r0, #0
   16f04:	bxcs	lr
   16f08:	bx	lr
   16f0c:	sub	r1, r0, #65	; 0x41
   16f10:	cmp	r1, #26
   16f14:	addcc	r0, r0, #32
   16f18:	bx	lr
   16f1c:	sub	r1, r0, #97	; 0x61
   16f20:	cmp	r1, #26
   16f24:	subcc	r0, r0, #32
   16f28:	bx	lr
   16f2c:	push	{r4, r5, r6, sl, fp, lr}
   16f30:	add	fp, sp, #16
   16f34:	mov	r4, r0
   16f38:	bl	11188 <__fpending@plt>
   16f3c:	mov	r5, r0
   16f40:	mov	r0, r4
   16f44:	bl	11194 <ferror_unlocked@plt>
   16f48:	mov	r6, r0
   16f4c:	mov	r0, r4
   16f50:	bl	13584 <__assert_fail@plt+0x2234>
   16f54:	cmp	r6, #0
   16f58:	beq	16f78 <__assert_fail@plt+0x5c28>
   16f5c:	mvn	r4, #0
   16f60:	cmp	r0, #0
   16f64:	bne	16fac <__assert_fail@plt+0x5c5c>
   16f68:	bl	11248 <__errno_location@plt>
   16f6c:	mov	r1, #0
   16f70:	str	r1, [r0]
   16f74:	b	16fac <__assert_fail@plt+0x5c5c>
   16f78:	cmp	r0, #0
   16f7c:	mov	r4, r0
   16f80:	mvnne	r4, #0
   16f84:	cmp	r5, #0
   16f88:	bne	16fac <__assert_fail@plt+0x5c5c>
   16f8c:	cmp	r0, #0
   16f90:	beq	16fac <__assert_fail@plt+0x5c5c>
   16f94:	bl	11248 <__errno_location@plt>
   16f98:	ldr	r0, [r0]
   16f9c:	subs	r4, r0, #9
   16fa0:	mvnne	r4, #0
   16fa4:	mov	r0, r4
   16fa8:	pop	{r4, r5, r6, sl, fp, pc}
   16fac:	mov	r0, r4
   16fb0:	pop	{r4, r5, r6, sl, fp, pc}
   16fb4:	sub	sp, sp, #8
   16fb8:	push	{fp, lr}
   16fbc:	mov	fp, sp
   16fc0:	sub	sp, sp, #8
   16fc4:	str	r3, [fp, #12]
   16fc8:	str	r2, [fp, #8]
   16fcc:	add	r2, fp, #8
   16fd0:	str	r2, [sp, #4]
   16fd4:	cmp	r1, #11
   16fd8:	bhi	17018 <__assert_fail@plt+0x5cc8>
   16fdc:	mov	r2, #1
   16fe0:	movw	r3, #1300	; 0x514
   16fe4:	tst	r3, r2, lsl r1
   16fe8:	bne	17068 <__assert_fail@plt+0x5d18>
   16fec:	movw	r3, #2570	; 0xa0a
   16ff0:	tst	r3, r2, lsl r1
   16ff4:	bne	17040 <__assert_fail@plt+0x5cf0>
   16ff8:	cmp	r1, #0
   16ffc:	bne	17018 <__assert_fail@plt+0x5cc8>
   17000:	ldr	r1, [sp, #4]
   17004:	add	r2, r1, #4
   17008:	str	r2, [sp, #4]
   1700c:	ldr	r1, [r1]
   17010:	bl	1708c <__assert_fail@plt+0x5d3c>
   17014:	b	1707c <__assert_fail@plt+0x5d2c>
   17018:	sub	r2, r1, #1024	; 0x400
   1701c:	cmp	r2, #10
   17020:	bhi	17068 <__assert_fail@plt+0x5d18>
   17024:	mov	ip, #1
   17028:	movw	r3, #645	; 0x285
   1702c:	tst	r3, ip, lsl r2
   17030:	bne	17068 <__assert_fail@plt+0x5d18>
   17034:	movw	r3, #1282	; 0x502
   17038:	tst	r3, ip, lsl r2
   1703c:	beq	17048 <__assert_fail@plt+0x5cf8>
   17040:	bl	112c0 <fcntl64@plt>
   17044:	b	1707c <__assert_fail@plt+0x5d2c>
   17048:	cmp	r2, #6
   1704c:	bne	17068 <__assert_fail@plt+0x5d18>
   17050:	ldr	r1, [sp, #4]
   17054:	add	r2, r1, #4
   17058:	str	r2, [sp, #4]
   1705c:	ldr	r1, [r1]
   17060:	bl	17098 <__assert_fail@plt+0x5d48>
   17064:	b	1707c <__assert_fail@plt+0x5d2c>
   17068:	ldr	r2, [sp, #4]
   1706c:	add	r3, r2, #4
   17070:	str	r3, [sp, #4]
   17074:	ldr	r2, [r2]
   17078:	bl	112c0 <fcntl64@plt>
   1707c:	mov	sp, fp
   17080:	pop	{fp, lr}
   17084:	add	sp, sp, #8
   17088:	bx	lr
   1708c:	mov	r2, r1
   17090:	mov	r1, #0
   17094:	b	112c0 <fcntl64@plt>
   17098:	push	{r4, r5, r6, r7, fp, lr}
   1709c:	add	fp, sp, #16
   170a0:	mov	r5, r1
   170a4:	mov	r6, r0
   170a8:	movw	r7, #37688	; 0x9338
   170ac:	movt	r7, #2
   170b0:	ldr	r0, [r7]
   170b4:	cmp	r0, #0
   170b8:	blt	1711c <__assert_fail@plt+0x5dcc>
   170bc:	mov	r0, r6
   170c0:	movw	r1, #1030	; 0x406
   170c4:	mov	r2, r5
   170c8:	bl	112c0 <fcntl64@plt>
   170cc:	mov	r4, r0
   170d0:	cmn	r0, #1
   170d4:	bgt	17108 <__assert_fail@plt+0x5db8>
   170d8:	bl	11248 <__errno_location@plt>
   170dc:	ldr	r0, [r0]
   170e0:	cmp	r0, #22
   170e4:	bne	17108 <__assert_fail@plt+0x5db8>
   170e8:	mov	r0, r6
   170ec:	mov	r1, r5
   170f0:	bl	1708c <__assert_fail@plt+0x5d3c>
   170f4:	mov	r4, r0
   170f8:	cmp	r0, #0
   170fc:	blt	1716c <__assert_fail@plt+0x5e1c>
   17100:	mvn	r0, #0
   17104:	b	1710c <__assert_fail@plt+0x5dbc>
   17108:	mov	r0, #1
   1710c:	str	r0, [r7]
   17110:	cmp	r4, #0
   17114:	bge	17134 <__assert_fail@plt+0x5de4>
   17118:	b	1716c <__assert_fail@plt+0x5e1c>
   1711c:	mov	r0, r6
   17120:	mov	r1, r5
   17124:	bl	1708c <__assert_fail@plt+0x5d3c>
   17128:	mov	r4, r0
   1712c:	cmp	r4, #0
   17130:	blt	1716c <__assert_fail@plt+0x5e1c>
   17134:	ldr	r0, [r7]
   17138:	cmn	r0, #1
   1713c:	bne	1716c <__assert_fail@plt+0x5e1c>
   17140:	mov	r0, r4
   17144:	mov	r1, #1
   17148:	bl	112c0 <fcntl64@plt>
   1714c:	cmp	r0, #0
   17150:	blt	17174 <__assert_fail@plt+0x5e24>
   17154:	orr	r2, r0, #1
   17158:	mov	r0, r4
   1715c:	mov	r1, #2
   17160:	bl	112c0 <fcntl64@plt>
   17164:	cmn	r0, #1
   17168:	beq	17174 <__assert_fail@plt+0x5e24>
   1716c:	mov	r0, r4
   17170:	pop	{r4, r5, r6, r7, fp, pc}
   17174:	bl	11248 <__errno_location@plt>
   17178:	mov	r5, r0
   1717c:	ldr	r6, [r0]
   17180:	mov	r0, r4
   17184:	bl	11338 <close@plt>
   17188:	str	r6, [r5]
   1718c:	mvn	r4, #0
   17190:	mov	r0, r4
   17194:	pop	{r4, r5, r6, r7, fp, pc}
   17198:	push	{fp, lr}
   1719c:	mov	fp, sp
   171a0:	bl	11248 <__errno_location@plt>
   171a4:	mov	r1, #12
   171a8:	str	r1, [r0]
   171ac:	mov	r0, #0
   171b0:	pop	{fp, pc}
   171b4:	b	16b84 <__assert_fail@plt+0x5834>
   171b8:	cmp	r1, #0
   171bc:	orreq	r1, r1, #1
   171c0:	b	16bb4 <__assert_fail@plt+0x5864>
   171c4:	b	16b30 <__assert_fail@plt+0x57e0>
   171c8:	clz	r3, r2
   171cc:	lsr	ip, r3, #5
   171d0:	clz	r3, r1
   171d4:	lsr	r3, r3, #5
   171d8:	orrs	r3, r3, ip
   171dc:	movwne	r1, #1
   171e0:	movwne	r2, #1
   171e4:	b	173fc <__assert_fail@plt+0x60ac>
   171e8:	push	{fp, lr}
   171ec:	mov	fp, sp
   171f0:	mov	r0, #14
   171f4:	bl	112e4 <nl_langinfo@plt>
   171f8:	movw	r1, #33258	; 0x81ea
   171fc:	movt	r1, #1
   17200:	cmp	r0, #0
   17204:	movne	r1, r0
   17208:	ldrb	r2, [r1]
   1720c:	movw	r0, #35084	; 0x890c
   17210:	movt	r0, #1
   17214:	cmp	r2, #0
   17218:	movne	r0, r1
   1721c:	pop	{fp, pc}
   17220:	push	{r4, r5, r6, r7, fp, lr}
   17224:	add	fp, sp, #16
   17228:	sub	sp, sp, #8
   1722c:	mov	r7, r2
   17230:	mov	r4, r1
   17234:	add	r5, sp, #4
   17238:	cmp	r0, #0
   1723c:	movne	r5, r0
   17240:	mov	r0, r5
   17244:	bl	111a0 <mbrtowc@plt>
   17248:	mov	r6, r0
   1724c:	cmp	r7, #0
   17250:	beq	17274 <__assert_fail@plt+0x5f24>
   17254:	cmn	r6, #2
   17258:	bcc	17274 <__assert_fail@plt+0x5f24>
   1725c:	mov	r0, #0
   17260:	bl	1380c <__assert_fail@plt+0x24bc>
   17264:	cmp	r0, #0
   17268:	ldrbeq	r0, [r4]
   1726c:	streq	r0, [r5]
   17270:	moveq	r6, #1
   17274:	mov	r0, r6
   17278:	sub	sp, fp, #16
   1727c:	pop	{r4, r5, r6, r7, fp, pc}
   17280:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17284:	add	fp, sp, #24
   17288:	mov	r4, r3
   1728c:	mov	r5, r2
   17290:	mov	r6, r1
   17294:	mov	r7, r0
   17298:	cmp	r1, r3
   1729c:	bne	172b8 <__assert_fail@plt+0x5f68>
   172a0:	mov	r0, r7
   172a4:	mov	r1, r5
   172a8:	mov	r2, r6
   172ac:	bl	1111c <memcmp@plt>
   172b0:	cmp	r0, #0
   172b4:	beq	172ec <__assert_fail@plt+0x5f9c>
   172b8:	ldrb	r8, [r5, r4]
   172bc:	ldrb	r9, [r7, r6]
   172c0:	mov	r0, #0
   172c4:	strb	r0, [r7, r6]
   172c8:	strb	r0, [r5, r4]
   172cc:	add	r1, r6, #1
   172d0:	add	r3, r4, #1
   172d4:	mov	r0, r7
   172d8:	mov	r2, r5
   172dc:	bl	17300 <__assert_fail@plt+0x5fb0>
   172e0:	strb	r9, [r7, r6]
   172e4:	strb	r8, [r5, r4]
   172e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   172ec:	bl	11248 <__errno_location@plt>
   172f0:	mov	r1, #0
   172f4:	str	r1, [r0]
   172f8:	mov	r0, #0
   172fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17304:	add	fp, sp, #28
   17308:	sub	sp, sp, #4
   1730c:	mov	sl, r3
   17310:	mov	r5, r2
   17314:	mov	r6, r1
   17318:	mov	r7, r0
   1731c:	bl	11248 <__errno_location@plt>
   17320:	mov	r8, r0
   17324:	mov	r9, #0
   17328:	str	r9, [r8]
   1732c:	mov	r0, r7
   17330:	mov	r1, r5
   17334:	bl	111b8 <strcoll@plt>
   17338:	cmp	r0, #0
   1733c:	bne	1737c <__assert_fail@plt+0x602c>
   17340:	mov	r0, r7
   17344:	bl	11230 <strlen@plt>
   17348:	add	r4, r0, #1
   1734c:	sub	r6, r6, r4
   17350:	mov	r0, r5
   17354:	bl	11230 <strlen@plt>
   17358:	add	r0, r0, #1
   1735c:	sub	sl, sl, r0
   17360:	cmp	r6, #0
   17364:	beq	17384 <__assert_fail@plt+0x6034>
   17368:	add	r7, r7, r4
   1736c:	add	r5, r5, r0
   17370:	cmp	sl, #0
   17374:	bne	17328 <__assert_fail@plt+0x5fd8>
   17378:	mov	r0, #1
   1737c:	sub	sp, fp, #28
   17380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17384:	cmp	sl, #0
   17388:	mvnne	sl, #0
   1738c:	mov	r0, sl
   17390:	sub	sp, fp, #28
   17394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17398:	push	{r4, r5, r6, r7, fp, lr}
   1739c:	add	fp, sp, #16
   173a0:	mov	r4, r3
   173a4:	mov	r5, r2
   173a8:	mov	r6, r1
   173ac:	mov	r7, r0
   173b0:	cmp	r1, r3
   173b4:	bne	173d0 <__assert_fail@plt+0x6080>
   173b8:	mov	r0, r7
   173bc:	mov	r1, r5
   173c0:	mov	r2, r6
   173c4:	bl	1111c <memcmp@plt>
   173c8:	cmp	r0, #0
   173cc:	beq	173e8 <__assert_fail@plt+0x6098>
   173d0:	mov	r0, r7
   173d4:	mov	r1, r6
   173d8:	mov	r2, r5
   173dc:	mov	r3, r4
   173e0:	pop	{r4, r5, r6, r7, fp, lr}
   173e4:	b	17300 <__assert_fail@plt+0x5fb0>
   173e8:	bl	11248 <__errno_location@plt>
   173ec:	mov	r1, #0
   173f0:	str	r1, [r0]
   173f4:	mov	r0, #0
   173f8:	pop	{r4, r5, r6, r7, fp, pc}
   173fc:	cmp	r2, #0
   17400:	beq	17430 <__assert_fail@plt+0x60e0>
   17404:	mvn	r3, #0
   17408:	udiv	r3, r3, r2
   1740c:	cmp	r3, r1
   17410:	bcs	17430 <__assert_fail@plt+0x60e0>
   17414:	push	{fp, lr}
   17418:	mov	fp, sp
   1741c:	bl	11248 <__errno_location@plt>
   17420:	mov	r1, #12
   17424:	str	r1, [r0]
   17428:	mov	r0, #0
   1742c:	pop	{fp, pc}
   17430:	mul	r1, r2, r1
   17434:	b	16bb4 <__assert_fail@plt+0x5864>
   17438:	cmp	r3, #0
   1743c:	cmpeq	r2, #0
   17440:	bne	17458 <__assert_fail@plt+0x6108>
   17444:	cmp	r1, #0
   17448:	cmpeq	r0, #0
   1744c:	mvnne	r1, #0
   17450:	mvnne	r0, #0
   17454:	b	17474 <__assert_fail@plt+0x6124>
   17458:	sub	sp, sp, #8
   1745c:	push	{sp, lr}
   17460:	bl	17484 <__assert_fail@plt+0x6134>
   17464:	ldr	lr, [sp, #4]
   17468:	add	sp, sp, #8
   1746c:	pop	{r2, r3}
   17470:	bx	lr
   17474:	push	{r1, lr}
   17478:	mov	r0, #8
   1747c:	bl	110b0 <raise@plt>
   17480:	pop	{r1, pc}
   17484:	cmp	r1, r3
   17488:	cmpeq	r0, r2
   1748c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17490:	mov	r4, r0
   17494:	movcc	r0, #0
   17498:	mov	r5, r1
   1749c:	ldr	lr, [sp, #36]	; 0x24
   174a0:	movcc	r1, r0
   174a4:	bcc	175a0 <__assert_fail@plt+0x6250>
   174a8:	cmp	r3, #0
   174ac:	clzeq	ip, r2
   174b0:	clzne	ip, r3
   174b4:	addeq	ip, ip, #32
   174b8:	cmp	r5, #0
   174bc:	clzeq	r1, r4
   174c0:	addeq	r1, r1, #32
   174c4:	clzne	r1, r5
   174c8:	sub	ip, ip, r1
   174cc:	sub	sl, ip, #32
   174d0:	lsl	r9, r3, ip
   174d4:	rsb	fp, ip, #32
   174d8:	orr	r9, r9, r2, lsl sl
   174dc:	orr	r9, r9, r2, lsr fp
   174e0:	lsl	r8, r2, ip
   174e4:	cmp	r5, r9
   174e8:	cmpeq	r4, r8
   174ec:	movcc	r0, #0
   174f0:	movcc	r1, r0
   174f4:	bcc	17510 <__assert_fail@plt+0x61c0>
   174f8:	mov	r0, #1
   174fc:	subs	r4, r4, r8
   17500:	lsl	r1, r0, sl
   17504:	orr	r1, r1, r0, lsr fp
   17508:	lsl	r0, r0, ip
   1750c:	sbc	r5, r5, r9
   17510:	cmp	ip, #0
   17514:	beq	175a0 <__assert_fail@plt+0x6250>
   17518:	lsr	r6, r8, #1
   1751c:	orr	r6, r6, r9, lsl #31
   17520:	lsr	r7, r9, #1
   17524:	mov	r2, ip
   17528:	b	1754c <__assert_fail@plt+0x61fc>
   1752c:	subs	r3, r4, r6
   17530:	sbc	r8, r5, r7
   17534:	adds	r3, r3, r3
   17538:	adc	r8, r8, r8
   1753c:	adds	r4, r3, #1
   17540:	adc	r5, r8, #0
   17544:	subs	r2, r2, #1
   17548:	beq	17568 <__assert_fail@plt+0x6218>
   1754c:	cmp	r5, r7
   17550:	cmpeq	r4, r6
   17554:	bcs	1752c <__assert_fail@plt+0x61dc>
   17558:	adds	r4, r4, r4
   1755c:	adc	r5, r5, r5
   17560:	subs	r2, r2, #1
   17564:	bne	1754c <__assert_fail@plt+0x61fc>
   17568:	lsr	r3, r4, ip
   1756c:	orr	r3, r3, r5, lsl fp
   17570:	lsr	r2, r5, ip
   17574:	orr	r3, r3, r5, lsr sl
   17578:	adds	r0, r0, r4
   1757c:	mov	r4, r3
   17580:	lsl	r3, r2, ip
   17584:	orr	r3, r3, r4, lsl sl
   17588:	lsl	ip, r4, ip
   1758c:	orr	r3, r3, r4, lsr fp
   17590:	adc	r1, r1, r5
   17594:	subs	r0, r0, ip
   17598:	mov	r5, r2
   1759c:	sbc	r1, r1, r3
   175a0:	cmp	lr, #0
   175a4:	strdne	r4, [lr]
   175a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   175b0:	mov	r7, r0
   175b4:	ldr	r6, [pc, #72]	; 17604 <__assert_fail@plt+0x62b4>
   175b8:	ldr	r5, [pc, #72]	; 17608 <__assert_fail@plt+0x62b8>
   175bc:	add	r6, pc, r6
   175c0:	add	r5, pc, r5
   175c4:	sub	r6, r6, r5
   175c8:	mov	r8, r1
   175cc:	mov	r9, r2
   175d0:	bl	1106c <fdopen@plt-0x20>
   175d4:	asrs	r6, r6, #2
   175d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   175dc:	mov	r4, #0
   175e0:	add	r4, r4, #1
   175e4:	ldr	r3, [r5], #4
   175e8:	mov	r2, r9
   175ec:	mov	r1, r8
   175f0:	mov	r0, r7
   175f4:	blx	r3
   175f8:	cmp	r6, r4
   175fc:	bne	175e0 <__assert_fail@plt+0x6290>
   17600:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17604:	andeq	r1, r1, r8, asr #18
   17608:	andeq	r1, r1, r0, asr #18
   1760c:	bx	lr
   17610:	ldr	r3, [pc, #12]	; 17624 <__assert_fail@plt+0x62d4>
   17614:	mov	r1, #0
   17618:	add	r3, pc, r3
   1761c:	ldr	r2, [r3]
   17620:	b	11254 <__cxa_atexit@plt>
   17624:	andeq	r1, r1, r4, ror #21

Disassembly of section .fini:

00017628 <.fini>:
   17628:	push	{r3, lr}
   1762c:	pop	{r3, pc}
