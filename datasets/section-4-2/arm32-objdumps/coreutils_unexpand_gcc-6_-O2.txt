
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010c4c <.init>:
   10c4c:	push	{r3, lr}
   10c50:	bl	11454 <__assert_fail@plt+0x590>
   10c54:	pop	{r3, pc}

Disassembly of section .plt:

00010c58 <calloc@plt-0x14>:
   10c58:	push	{lr}		; (str lr, [sp, #-4]!)
   10c5c:	ldr	lr, [pc, #4]	; 10c68 <calloc@plt-0x4>
   10c60:	add	lr, pc, lr
   10c64:	ldr	pc, [lr, #8]!
   10c68:	muleq	r1, r8, r3

00010c6c <calloc@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #90112	; 0x16000
   10c74:	ldr	pc, [ip, #920]!	; 0x398

00010c78 <fputs_unlocked@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #90112	; 0x16000
   10c80:	ldr	pc, [ip, #912]!	; 0x390

00010c84 <raise@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #90112	; 0x16000
   10c8c:	ldr	pc, [ip, #904]!	; 0x388

00010c90 <strcmp@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #90112	; 0x16000
   10c98:	ldr	pc, [ip, #896]!	; 0x380

00010c9c <posix_fadvise64@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #888]!	; 0x378

00010ca8 <fflush@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #880]!	; 0x370

00010cb4 <free@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #872]!	; 0x368

00010cc0 <_exit@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #864]!	; 0x360

00010ccc <memcpy@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #856]!	; 0x358

00010cd8 <mbsinit@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #848]!	; 0x350

00010ce4 <fwrite_unlocked@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #840]!	; 0x348

00010cf0 <memcmp@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #832]!	; 0x340

00010cfc <fputc_unlocked@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #824]!	; 0x338

00010d08 <dcgettext@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #816]!	; 0x330

00010d14 <realloc@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #808]!	; 0x328

00010d20 <textdomain@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #800]!	; 0x320

00010d2c <iswprint@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #792]!	; 0x318

00010d38 <fwrite@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #784]!	; 0x310

00010d44 <lseek64@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #776]!	; 0x308

00010d50 <__ctype_get_mb_cur_max@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #768]!	; 0x300

00010d5c <__fpending@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #760]!	; 0x2f8

00010d68 <mbrtowc@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #752]!	; 0x2f0

00010d74 <error@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d80 <malloc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #736]!	; 0x2e0

00010d8c <__libc_start_main@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #728]!	; 0x2d8

00010d98 <__freading@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #720]!	; 0x2d0

00010da4 <__gmon_start__@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #712]!	; 0x2c8

00010db0 <getopt_long@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #704]!	; 0x2c0

00010dbc <__ctype_b_loc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #696]!	; 0x2b8

00010dc8 <exit@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #688]!	; 0x2b0

00010dd4 <strlen@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #680]!	; 0x2a8

00010de0 <__errno_location@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #672]!	; 0x2a0

00010dec <__cxa_atexit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #664]!	; 0x298

00010df8 <memset@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #656]!	; 0x290

00010e04 <__printf_chk@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #648]!	; 0x288

00010e10 <fileno@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #640]!	; 0x280

00010e1c <__fprintf_chk@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #632]!	; 0x278

00010e28 <fclose@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #624]!	; 0x270

00010e34 <fseeko64@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #616]!	; 0x268

00010e40 <__uflow@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #608]!	; 0x260

00010e4c <__overflow@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #600]!	; 0x258

00010e58 <setlocale@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #592]!	; 0x250

00010e64 <strrchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #584]!	; 0x248

00010e70 <nl_langinfo@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #576]!	; 0x240

00010e7c <clearerr_unlocked@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #568]!	; 0x238

00010e88 <fopen64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #560]!	; 0x230

00010e94 <bindtextdomain@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #552]!	; 0x228

00010ea0 <strncmp@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #544]!	; 0x220

00010eac <abort@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #536]!	; 0x218

00010eb8 <strspn@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #528]!	; 0x210

00010ec4 <__assert_fail@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #520]!	; 0x208

Disassembly of section .text:

00010ed0 <.text>:
   10ed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ed4:	mov	r6, r0
   10ed8:	sub	sp, sp, #36	; 0x24
   10edc:	ldr	r0, [r1]
   10ee0:	mov	r5, r1
   10ee4:	bl	124f0 <__assert_fail@plt+0x162c>
   10ee8:	ldr	r1, [pc, #1152]	; 11370 <__assert_fail@plt+0x4ac>
   10eec:	mov	r0, #6
   10ef0:	bl	10e58 <setlocale@plt>
   10ef4:	ldr	r1, [pc, #1144]	; 11374 <__assert_fail@plt+0x4b0>
   10ef8:	ldr	r0, [pc, #1144]	; 11378 <__assert_fail@plt+0x4b4>
   10efc:	bl	10e94 <bindtextdomain@plt>
   10f00:	ldr	r0, [pc, #1136]	; 11378 <__assert_fail@plt+0x4b4>
   10f04:	bl	10d20 <textdomain@plt>
   10f08:	ldr	r8, [pc, #1132]	; 1137c <__assert_fail@plt+0x4b8>
   10f0c:	ldr	r0, [pc, #1132]	; 11380 <__assert_fail@plt+0x4bc>
   10f10:	ldr	r7, [pc, #1132]	; 11384 <__assert_fail@plt+0x4c0>
   10f14:	bl	157a8 <__assert_fail@plt+0x48e4>
   10f18:	mov	r2, #0
   10f1c:	mov	r3, #0
   10f20:	mov	r9, #0
   10f24:	strd	r2, [sp, #16]
   10f28:	str	r9, [sp, #8]
   10f2c:	mov	r4, #0
   10f30:	str	r4, [sp]
   10f34:	mov	r3, r8
   10f38:	mov	r2, r7
   10f3c:	mov	r1, r5
   10f40:	mov	r0, r6
   10f44:	bl	10db0 <getopt_long@plt>
   10f48:	cmn	r0, #1
   10f4c:	beq	110b0 <__assert_fail@plt+0x1ec>
   10f50:	cmp	r0, #63	; 0x3f
   10f54:	beq	1106c <__assert_fail@plt+0x1a8>
   10f58:	bgt	10fa4 <__assert_fail@plt+0xe0>
   10f5c:	cmn	r0, #2
   10f60:	beq	11038 <__assert_fail@plt+0x174>
   10f64:	cmp	r0, #44	; 0x2c
   10f68:	beq	1101c <__assert_fail@plt+0x158>
   10f6c:	cmn	r0, #3
   10f70:	bne	10fbc <__assert_fail@plt+0xf8>
   10f74:	ldr	r1, [pc, #1036]	; 11388 <__assert_fail@plt+0x4c4>
   10f78:	ldr	r3, [pc, #1036]	; 1138c <__assert_fail@plt+0x4c8>
   10f7c:	ldr	r2, [pc, #1036]	; 11390 <__assert_fail@plt+0x4cc>
   10f80:	str	r4, [sp, #4]
   10f84:	ldr	r0, [r1]
   10f88:	ldr	r3, [r3]
   10f8c:	ldr	r1, [pc, #1024]	; 11394 <__assert_fail@plt+0x4d0>
   10f90:	str	r2, [sp]
   10f94:	ldr	r2, [pc, #1020]	; 11398 <__assert_fail@plt+0x4d4>
   10f98:	bl	147ec <__assert_fail@plt+0x3928>
   10f9c:	mov	r0, r4
   10fa0:	bl	10dc8 <exit@plt>
   10fa4:	cmp	r0, #116	; 0x74
   10fa8:	beq	11040 <__assert_fail@plt+0x17c>
   10fac:	cmp	r0, #256	; 0x100
   10fb0:	beq	11014 <__assert_fail@plt+0x150>
   10fb4:	cmp	r0, #97	; 0x61
   10fb8:	beq	1105c <__assert_fail@plt+0x198>
   10fbc:	ldr	r3, [sp, #8]
   10fc0:	cmp	r3, #0
   10fc4:	beq	11074 <__assert_fail@plt+0x1b0>
   10fc8:	ldrd	r2, [sp, #16]
   10fcc:	add	fp, pc, #916	; 0x394
   10fd0:	ldrd	sl, [fp]
   10fd4:	cmp	r3, fp
   10fd8:	cmpeq	r2, sl
   10fdc:	bhi	11090 <__assert_fail@plt+0x1cc>
   10fe0:	mov	r1, #10
   10fe4:	mov	fp, r3
   10fe8:	mov	sl, r2
   10fec:	umull	r2, r3, r2, r1
   10ff0:	mla	r3, r1, fp, r3
   10ff4:	sub	r0, r0, #48	; 0x30
   10ff8:	adds	r2, r2, r0
   10ffc:	adc	r3, r3, r0, asr #31
   11000:	cmp	r3, fp
   11004:	cmpeq	r2, sl
   11008:	bcc	11090 <__assert_fail@plt+0x1cc>
   1100c:	strd	r2, [sp, #16]
   11010:	b	10f2c <__assert_fail@plt+0x68>
   11014:	mov	r9, #1
   11018:	b	10f2c <__assert_fail@plt+0x68>
   1101c:	ldr	r3, [sp, #8]
   11020:	cmp	r3, #0
   11024:	beq	10f2c <__assert_fail@plt+0x68>
   11028:	ldrd	r0, [sp, #16]
   1102c:	str	r4, [sp, #8]
   11030:	bl	11908 <__assert_fail@plt+0xa44>
   11034:	b	10f2c <__assert_fail@plt+0x68>
   11038:	mov	r0, r4
   1103c:	bl	11540 <__assert_fail@plt+0x67c>
   11040:	ldr	r3, [pc, #852]	; 1139c <__assert_fail@plt+0x4d8>
   11044:	mov	r2, #1
   11048:	ldr	r0, [r3]
   1104c:	ldr	r3, [pc, #844]	; 113a0 <__assert_fail@plt+0x4dc>
   11050:	strb	r2, [r3]
   11054:	bl	119fc <__assert_fail@plt+0xb38>
   11058:	b	10f2c <__assert_fail@plt+0x68>
   1105c:	ldr	r3, [pc, #828]	; 113a0 <__assert_fail@plt+0x4dc>
   11060:	mov	r2, #1
   11064:	strb	r2, [r3]
   11068:	b	10f2c <__assert_fail@plt+0x68>
   1106c:	mov	r0, #1
   11070:	bl	11540 <__assert_fail@plt+0x67c>
   11074:	sub	r0, r0, #48	; 0x30
   11078:	mov	r2, r0
   1107c:	asr	r3, r0, #31
   11080:	strd	r2, [sp, #16]
   11084:	mov	r3, #1
   11088:	str	r3, [sp, #8]
   1108c:	b	10f2c <__assert_fail@plt+0x68>
   11090:	mov	r2, #5
   11094:	ldr	r1, [pc, #776]	; 113a4 <__assert_fail@plt+0x4e0>
   11098:	mov	r0, #0
   1109c:	bl	10d08 <dcgettext@plt>
   110a0:	mov	r1, #0
   110a4:	mov	r2, r0
   110a8:	mov	r0, #1
   110ac:	bl	10d74 <error@plt>
   110b0:	cmp	r9, r4
   110b4:	ldr	fp, [sp, #8]
   110b8:	ldrne	r3, [pc, #736]	; 113a0 <__assert_fail@plt+0x4dc>
   110bc:	strbne	r4, [r3]
   110c0:	cmp	fp, #0
   110c4:	bne	11260 <__assert_fail@plt+0x39c>
   110c8:	bl	11d0c <__assert_fail@plt+0xe48>
   110cc:	ldr	r3, [pc, #724]	; 113a8 <__assert_fail@plt+0x4e4>
   110d0:	ldr	r0, [r3]
   110d4:	cmp	r6, r0
   110d8:	addgt	r0, r5, r0, lsl #2
   110dc:	movle	r0, #0
   110e0:	bl	11f5c <__assert_fail@plt+0x1098>
   110e4:	mov	r0, #0
   110e8:	bl	11f84 <__assert_fail@plt+0x10c0>
   110ec:	subs	fp, r0, #0
   110f0:	beq	1124c <__assert_fail@plt+0x388>
   110f4:	ldr	r3, [pc, #688]	; 113ac <__assert_fail@plt+0x4e8>
   110f8:	ldr	r0, [r3]
   110fc:	bl	148e8 <__assert_fail@plt+0x3a24>
   11100:	str	r0, [sp, #16]
   11104:	mov	r2, #0
   11108:	mov	r3, #0
   1110c:	mov	r7, #0
   11110:	mov	sl, #1
   11114:	ldr	r8, [pc, #620]	; 11388 <__assert_fail@plt+0x4c4>
   11118:	mov	r9, r7
   1111c:	strd	r2, [sp, #8]
   11120:	mov	r6, sl
   11124:	str	r7, [sp, #28]
   11128:	b	111d8 <__assert_fail@plt+0x314>
   1112c:	cmp	r4, #8
   11130:	beq	11290 <__assert_fail@plt+0x3cc>
   11134:	ldrd	r0, [sp, #8]
   11138:	adds	r0, r0, #1
   1113c:	adc	r1, r1, #0
   11140:	orrs	r2, r0, r1
   11144:	strd	r0, [sp, #8]
   11148:	beq	113f0 <__assert_fail@plt+0x52c>
   1114c:	cmp	r7, #0
   11150:	beq	11190 <__assert_fail@plt+0x2cc>
   11154:	cmp	r7, #1
   11158:	movls	r9, #0
   1115c:	andhi	r9, r9, #1
   11160:	cmp	r9, #0
   11164:	movne	r2, #9
   11168:	ldrne	r3, [sp, #16]
   1116c:	mov	r1, #1
   11170:	ldr	r0, [sp, #16]
   11174:	strbne	r2, [r3]
   11178:	ldr	r3, [r8]
   1117c:	mov	r2, r7
   11180:	bl	10ce4 <fwrite_unlocked@plt>
   11184:	cmp	r7, r0
   11188:	bne	112e0 <__assert_fail@plt+0x41c>
   1118c:	mov	r9, #0
   11190:	ldr	r3, [pc, #520]	; 113a0 <__assert_fail@plt+0x4dc>
   11194:	mov	sl, r5
   11198:	mov	r7, #0
   1119c:	ldrb	r3, [r3]
   111a0:	orr	r5, r5, r3
   111a4:	and	r6, r6, r5
   111a8:	cmp	r4, #0
   111ac:	blt	11244 <__assert_fail@plt+0x380>
   111b0:	ldr	r0, [r8]
   111b4:	ldr	r3, [r0, #20]
   111b8:	ldr	r2, [r0, #24]
   111bc:	cmp	r3, r2
   111c0:	addcc	r2, r3, #1
   111c4:	strcc	r2, [r0, #20]
   111c8:	strbcc	r4, [r3]
   111cc:	bcs	112d0 <__assert_fail@plt+0x40c>
   111d0:	cmp	r4, #10
   111d4:	beq	11104 <__assert_fail@plt+0x240>
   111d8:	ldr	r3, [fp, #4]
   111dc:	ldr	r2, [fp, #8]
   111e0:	cmp	r3, r2
   111e4:	bcs	1126c <__assert_fail@plt+0x3a8>
   111e8:	add	r2, r3, #1
   111ec:	str	r2, [fp, #4]
   111f0:	ldrb	r4, [r3]
   111f4:	cmp	r6, #0
   111f8:	beq	111a8 <__assert_fail@plt+0x2e4>
   111fc:	bl	10dbc <__ctype_b_loc@plt>
   11200:	lsl	r3, r4, #1
   11204:	ldr	r2, [r0]
   11208:	ldrh	r5, [r2, r3]
   1120c:	and	r5, r5, #1
   11210:	uxth	r3, r5
   11214:	cmp	r3, #0
   11218:	uxtb	r5, r5
   1121c:	beq	1112c <__assert_fail@plt+0x268>
   11220:	add	r3, sp, #27
   11224:	add	r2, sp, #28
   11228:	ldrd	r0, [sp, #8]
   1122c:	bl	11e48 <__assert_fail@plt+0xf84>
   11230:	ldrb	ip, [sp, #27]
   11234:	cmp	ip, #0
   11238:	beq	11308 <__assert_fail@plt+0x444>
   1123c:	mov	r6, #0
   11240:	b	1114c <__assert_fail@plt+0x288>
   11244:	ldr	r0, [sp, #16]
   11248:	bl	123f8 <__assert_fail@plt+0x1534>
   1124c:	bl	12124 <__assert_fail@plt+0x1260>
   11250:	ldr	r3, [pc, #344]	; 113b0 <__assert_fail@plt+0x4ec>
   11254:	ldr	r0, [r3]
   11258:	add	sp, sp, #36	; 0x24
   1125c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11260:	ldrd	r0, [sp, #16]
   11264:	bl	11908 <__assert_fail@plt+0xa44>
   11268:	b	110c8 <__assert_fail@plt+0x204>
   1126c:	mov	r0, fp
   11270:	bl	10e40 <__uflow@plt>
   11274:	subs	r4, r0, #0
   11278:	bge	111f4 <__assert_fail@plt+0x330>
   1127c:	mov	r0, fp
   11280:	bl	11f84 <__assert_fail@plt+0x10c0>
   11284:	subs	fp, r0, #0
   11288:	bne	111d8 <__assert_fail@plt+0x314>
   1128c:	b	111f4 <__assert_fail@plt+0x330>
   11290:	ldrd	r0, [sp, #8]
   11294:	ldr	r2, [sp, #28]
   11298:	mov	ip, r0
   1129c:	orrs	r1, ip, r1
   112a0:	movne	r0, #1
   112a4:	moveq	r0, #0
   112a8:	mov	r1, r3
   112ac:	cmp	r2, #0
   112b0:	moveq	ip, r2
   112b4:	subne	ip, r2, #1
   112b8:	ldrd	r2, [sp, #8]
   112bc:	str	ip, [sp, #28]
   112c0:	subs	r2, r2, r0
   112c4:	sbc	r3, r3, r1
   112c8:	strd	r2, [sp, #8]
   112cc:	b	1114c <__assert_fail@plt+0x288>
   112d0:	uxtb	r1, r4
   112d4:	bl	10e4c <__overflow@plt>
   112d8:	cmp	r0, #0
   112dc:	bge	111d0 <__assert_fail@plt+0x30c>
   112e0:	bl	10de0 <__errno_location@plt>
   112e4:	mov	r2, #5
   112e8:	ldr	r1, [pc, #196]	; 113b4 <__assert_fail@plt+0x4f0>
   112ec:	ldr	r4, [r0]
   112f0:	mov	r0, #0
   112f4:	bl	10d08 <dcgettext@plt>
   112f8:	mov	r1, r4
   112fc:	mov	r2, r0
   11300:	mov	r0, #1
   11304:	bl	10d74 <error@plt>
   11308:	ldrd	r2, [sp, #8]
   1130c:	cmp	r3, r1
   11310:	cmpeq	r2, r0
   11314:	bhi	113ec <__assert_fail@plt+0x528>
   11318:	cmp	r4, #9
   1131c:	beq	113dc <__assert_fail@plt+0x518>
   11320:	ldrd	r2, [sp, #8]
   11324:	eor	sl, sl, #1
   11328:	adds	r2, r2, #1
   1132c:	adc	r3, r3, #0
   11330:	cmp	r1, r3
   11334:	cmpeq	r0, r2
   11338:	orrne	sl, sl, #1
   1133c:	cmp	sl, #0
   11340:	strd	r2, [sp, #8]
   11344:	beq	113bc <__assert_fail@plt+0x4f8>
   11348:	cmp	r1, r3
   1134c:	ldr	r3, [sp, #16]
   11350:	cmpeq	r0, r2
   11354:	moveq	r9, sl
   11358:	strb	r4, [r3, r7]
   1135c:	mov	r6, sl
   11360:	add	r7, r7, #1
   11364:	b	111d0 <__assert_fail@plt+0x30c>
   11368:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1136c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11370:	andeq	r5, r1, r0, ror #20
   11374:			; <UNDEFINED> instruction: 0x00015bb8
   11378:	andeq	r5, r1, r0, lsl fp
   1137c:	andeq	r5, r1, r4, lsl #16
   11380:	ldrdeq	r2, [r1], -r4
   11384:	andeq	r5, r1, r0, ror #23
   11388:	andeq	r7, r2, r4, asr r1
   1138c:	andeq	r7, r2, ip, ror #1
   11390:	ldrdeq	r5, [r1], -r0
   11394:	andeq	r5, r1, r4, ror #16
   11398:	andeq	r5, r1, ip, lsl #22
   1139c:	andeq	r7, r2, r8, asr r1
   113a0:	muleq	r2, r8, r1
   113a4:	andeq	r5, r1, r4, lsl ip
   113a8:	andeq	r7, r2, r0, asr #2
   113ac:	andeq	r7, r2, ip, ror r1
   113b0:	muleq	r2, r4, r1
   113b4:	andeq	r5, r1, r8, lsl #24
   113b8:	strdeq	r5, [r1], -r0
   113bc:	ldr	r3, [sp, #16]
   113c0:	ldrd	r0, [sp, #8]
   113c4:	mov	r2, #9
   113c8:	strb	r2, [r3]
   113cc:	strd	r0, [sp, #8]
   113d0:	mov	r7, r9
   113d4:	mov	r4, #9
   113d8:	b	1114c <__assert_fail@plt+0x288>
   113dc:	cmp	r7, #0
   113e0:	ldrne	r3, [sp, #16]
   113e4:	strbne	r4, [r3]
   113e8:	b	113cc <__assert_fail@plt+0x508>
   113ec:	mov	r3, ip
   113f0:	mov	r2, #5
   113f4:	ldr	r1, [pc, #-68]	; 113b8 <__assert_fail@plt+0x4f4>
   113f8:	mov	r0, r3
   113fc:	str	r3, [sp, #8]
   11400:	bl	10d08 <dcgettext@plt>
   11404:	ldr	r3, [sp, #8]
   11408:	mov	r1, r3
   1140c:	mov	r2, r0
   11410:	mov	r0, #1
   11414:	bl	10d74 <error@plt>
   11418:	mov	fp, #0
   1141c:	mov	lr, #0
   11420:	pop	{r1}		; (ldr r1, [sp], #4)
   11424:	mov	r2, sp
   11428:	push	{r2}		; (str r2, [sp, #-4]!)
   1142c:	push	{r0}		; (str r0, [sp, #-4]!)
   11430:	ldr	ip, [pc, #16]	; 11448 <__assert_fail@plt+0x584>
   11434:	push	{ip}		; (str ip, [sp, #-4]!)
   11438:	ldr	r0, [pc, #12]	; 1144c <__assert_fail@plt+0x588>
   1143c:	ldr	r3, [pc, #12]	; 11450 <__assert_fail@plt+0x58c>
   11440:	bl	10d8c <__libc_start_main@plt>
   11444:	bl	10eac <abort@plt>
   11448:	andeq	r5, r1, r4, lsr #15
   1144c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   11450:	andeq	r5, r1, r4, asr #14
   11454:	ldr	r3, [pc, #20]	; 11470 <__assert_fail@plt+0x5ac>
   11458:	ldr	r2, [pc, #20]	; 11474 <__assert_fail@plt+0x5b0>
   1145c:	add	r3, pc, r3
   11460:	ldr	r2, [r3, r2]
   11464:	cmp	r2, #0
   11468:	bxeq	lr
   1146c:	b	10da4 <__gmon_start__@plt>
   11470:	muleq	r1, ip, fp
   11474:	ldrdeq	r0, [r0], -r8
   11478:	ldr	r3, [pc, #28]	; 1149c <__assert_fail@plt+0x5d8>
   1147c:	ldr	r0, [pc, #28]	; 114a0 <__assert_fail@plt+0x5dc>
   11480:	sub	r3, r3, r0
   11484:	cmp	r3, #6
   11488:	bxls	lr
   1148c:	ldr	r3, [pc, #16]	; 114a4 <__assert_fail@plt+0x5e0>
   11490:	cmp	r3, #0
   11494:	bxeq	lr
   11498:	bx	r3
   1149c:	andeq	r7, r2, r7, lsr r1
   114a0:	andeq	r7, r2, r4, lsr r1
   114a4:	andeq	r0, r0, r0
   114a8:	ldr	r1, [pc, #36]	; 114d4 <__assert_fail@plt+0x610>
   114ac:	ldr	r0, [pc, #36]	; 114d8 <__assert_fail@plt+0x614>
   114b0:	sub	r1, r1, r0
   114b4:	asr	r1, r1, #2
   114b8:	add	r1, r1, r1, lsr #31
   114bc:	asrs	r1, r1, #1
   114c0:	bxeq	lr
   114c4:	ldr	r3, [pc, #16]	; 114dc <__assert_fail@plt+0x618>
   114c8:	cmp	r3, #0
   114cc:	bxeq	lr
   114d0:	bx	r3
   114d4:	andeq	r7, r2, r4, lsr r1
   114d8:	andeq	r7, r2, r4, lsr r1
   114dc:	andeq	r0, r0, r0
   114e0:	push	{r4, lr}
   114e4:	ldr	r4, [pc, #24]	; 11504 <__assert_fail@plt+0x640>
   114e8:	ldrb	r3, [r4]
   114ec:	cmp	r3, #0
   114f0:	popne	{r4, pc}
   114f4:	bl	11478 <__assert_fail@plt+0x5b4>
   114f8:	mov	r3, #1
   114fc:	strb	r3, [r4]
   11500:	pop	{r4, pc}
   11504:	andeq	r7, r2, ip, asr r1
   11508:	ldr	r0, [pc, #40]	; 11538 <__assert_fail@plt+0x674>
   1150c:	ldr	r3, [r0]
   11510:	cmp	r3, #0
   11514:	bne	1151c <__assert_fail@plt+0x658>
   11518:	b	114a8 <__assert_fail@plt+0x5e4>
   1151c:	ldr	r3, [pc, #24]	; 1153c <__assert_fail@plt+0x678>
   11520:	cmp	r3, #0
   11524:	beq	11518 <__assert_fail@plt+0x654>
   11528:	push	{r4, lr}
   1152c:	blx	r3
   11530:	pop	{r4, lr}
   11534:	b	114a8 <__assert_fail@plt+0x5e4>
   11538:	andeq	r6, r2, r4, lsl pc
   1153c:	andeq	r0, r0, r0
   11540:	subs	r6, r0, #0
   11544:	push	{r7, lr}
   11548:	sub	sp, sp, #56	; 0x38
   1154c:	beq	11588 <__assert_fail@plt+0x6c4>
   11550:	ldr	r3, [pc, #688]	; 11808 <__assert_fail@plt+0x944>
   11554:	mov	r2, #5
   11558:	ldr	r1, [pc, #684]	; 1180c <__assert_fail@plt+0x948>
   1155c:	mov	r0, #0
   11560:	ldr	r4, [r3]
   11564:	bl	10d08 <dcgettext@plt>
   11568:	ldr	r3, [pc, #672]	; 11810 <__assert_fail@plt+0x94c>
   1156c:	mov	r1, #1
   11570:	ldr	r3, [r3]
   11574:	mov	r2, r0
   11578:	mov	r0, r4
   1157c:	bl	10e1c <__fprintf_chk@plt>
   11580:	mov	r0, r6
   11584:	bl	10dc8 <exit@plt>
   11588:	mov	r2, #5
   1158c:	ldr	r1, [pc, #640]	; 11814 <__assert_fail@plt+0x950>
   11590:	bl	10d08 <dcgettext@plt>
   11594:	ldr	r3, [pc, #628]	; 11810 <__assert_fail@plt+0x94c>
   11598:	ldr	r7, [pc, #632]	; 11818 <__assert_fail@plt+0x954>
   1159c:	ldr	r4, [pc, #632]	; 1181c <__assert_fail@plt+0x958>
   115a0:	ldr	r2, [r3]
   115a4:	mov	r1, r0
   115a8:	mov	r0, #1
   115ac:	bl	10e04 <__printf_chk@plt>
   115b0:	mov	r2, #5
   115b4:	ldr	r1, [pc, #612]	; 11820 <__assert_fail@plt+0x95c>
   115b8:	mov	r0, r6
   115bc:	bl	10d08 <dcgettext@plt>
   115c0:	ldr	r1, [r7]
   115c4:	bl	10c78 <fputs_unlocked@plt>
   115c8:	mov	r2, #5
   115cc:	ldr	r1, [pc, #592]	; 11824 <__assert_fail@plt+0x960>
   115d0:	mov	r0, r6
   115d4:	bl	10d08 <dcgettext@plt>
   115d8:	ldr	r1, [r7]
   115dc:	bl	10c78 <fputs_unlocked@plt>
   115e0:	mov	r2, #5
   115e4:	ldr	r1, [pc, #572]	; 11828 <__assert_fail@plt+0x964>
   115e8:	mov	r0, r6
   115ec:	bl	10d08 <dcgettext@plt>
   115f0:	ldr	r1, [r7]
   115f4:	bl	10c78 <fputs_unlocked@plt>
   115f8:	mov	r2, #5
   115fc:	ldr	r1, [pc, #552]	; 1182c <__assert_fail@plt+0x968>
   11600:	mov	r0, r6
   11604:	bl	10d08 <dcgettext@plt>
   11608:	ldr	r1, [r7]
   1160c:	bl	10c78 <fputs_unlocked@plt>
   11610:	bl	1216c <__assert_fail@plt+0x12a8>
   11614:	mov	r2, #5
   11618:	ldr	r1, [pc, #528]	; 11830 <__assert_fail@plt+0x96c>
   1161c:	mov	r0, r6
   11620:	bl	10d08 <dcgettext@plt>
   11624:	ldr	r1, [r7]
   11628:	bl	10c78 <fputs_unlocked@plt>
   1162c:	mov	r2, #5
   11630:	ldr	r1, [pc, #508]	; 11834 <__assert_fail@plt+0x970>
   11634:	mov	r0, r6
   11638:	bl	10d08 <dcgettext@plt>
   1163c:	ldr	r1, [r7]
   11640:	bl	10c78 <fputs_unlocked@plt>
   11644:	ldm	r4!, {r0, r1, r2, r3}
   11648:	mov	lr, sp
   1164c:	stmia	lr!, {r0, r1, r2, r3}
   11650:	ldm	r4!, {r0, r1, r2, r3}
   11654:	ldr	ip, [sp]
   11658:	stmia	lr!, {r0, r1, r2, r3}
   1165c:	cmp	ip, #0
   11660:	ldm	r4!, {r0, r1, r2, r3}
   11664:	stmia	lr!, {r0, r1, r2, r3}
   11668:	ldm	r4, {r0, r1}
   1166c:	moveq	r4, sp
   11670:	stm	lr, {r0, r1}
   11674:	beq	116a4 <__assert_fail@plt+0x7e0>
   11678:	ldr	r5, [pc, #440]	; 11838 <__assert_fail@plt+0x974>
   1167c:	mov	r4, sp
   11680:	b	11690 <__assert_fail@plt+0x7cc>
   11684:	ldr	ip, [r4, #8]!
   11688:	cmp	ip, #0
   1168c:	beq	116a4 <__assert_fail@plt+0x7e0>
   11690:	mov	r1, ip
   11694:	mov	r0, r5
   11698:	bl	10c90 <strcmp@plt>
   1169c:	cmp	r0, #0
   116a0:	bne	11684 <__assert_fail@plt+0x7c0>
   116a4:	ldr	r4, [r4, #4]
   116a8:	mov	r2, #5
   116ac:	cmp	r4, #0
   116b0:	ldr	r1, [pc, #388]	; 1183c <__assert_fail@plt+0x978>
   116b4:	beq	1175c <__assert_fail@plt+0x898>
   116b8:	mov	r0, #0
   116bc:	bl	10d08 <dcgettext@plt>
   116c0:	ldr	r3, [pc, #376]	; 11840 <__assert_fail@plt+0x97c>
   116c4:	ldr	r2, [pc, #376]	; 11844 <__assert_fail@plt+0x980>
   116c8:	mov	r1, r0
   116cc:	mov	r0, #1
   116d0:	bl	10e04 <__printf_chk@plt>
   116d4:	mov	r1, #0
   116d8:	mov	r0, #5
   116dc:	bl	10e58 <setlocale@plt>
   116e0:	cmp	r0, #0
   116e4:	ldreq	r5, [pc, #332]	; 11838 <__assert_fail@plt+0x974>
   116e8:	beq	11704 <__assert_fail@plt+0x840>
   116ec:	mov	r2, #3
   116f0:	ldr	r1, [pc, #336]	; 11848 <__assert_fail@plt+0x984>
   116f4:	bl	10ea0 <strncmp@plt>
   116f8:	ldr	r5, [pc, #312]	; 11838 <__assert_fail@plt+0x974>
   116fc:	cmp	r0, #0
   11700:	bne	117ec <__assert_fail@plt+0x928>
   11704:	mov	r2, #5
   11708:	ldr	r1, [pc, #316]	; 1184c <__assert_fail@plt+0x988>
   1170c:	mov	r0, #0
   11710:	bl	10d08 <dcgettext@plt>
   11714:	ldr	r3, [pc, #284]	; 11838 <__assert_fail@plt+0x974>
   11718:	ldr	r2, [pc, #288]	; 11840 <__assert_fail@plt+0x97c>
   1171c:	mov	r1, r0
   11720:	mov	r0, #1
   11724:	bl	10e04 <__printf_chk@plt>
   11728:	mov	r2, #5
   1172c:	ldr	r1, [pc, #284]	; 11850 <__assert_fail@plt+0x98c>
   11730:	mov	r0, #0
   11734:	bl	10d08 <dcgettext@plt>
   11738:	ldr	r2, [pc, #276]	; 11854 <__assert_fail@plt+0x990>
   1173c:	cmp	r4, r5
   11740:	ldr	r3, [pc, #272]	; 11858 <__assert_fail@plt+0x994>
   11744:	movne	r3, r2
   11748:	mov	r1, r0
   1174c:	mov	r2, r4
   11750:	mov	r0, #1
   11754:	bl	10e04 <__printf_chk@plt>
   11758:	b	11580 <__assert_fail@plt+0x6bc>
   1175c:	mov	r0, r4
   11760:	bl	10d08 <dcgettext@plt>
   11764:	ldr	r3, [pc, #212]	; 11840 <__assert_fail@plt+0x97c>
   11768:	ldr	r2, [pc, #212]	; 11844 <__assert_fail@plt+0x980>
   1176c:	mov	r1, r0
   11770:	mov	r0, #1
   11774:	bl	10e04 <__printf_chk@plt>
   11778:	mov	r1, r4
   1177c:	mov	r0, #5
   11780:	bl	10e58 <setlocale@plt>
   11784:	cmp	r0, #0
   11788:	beq	117a0 <__assert_fail@plt+0x8dc>
   1178c:	mov	r2, #3
   11790:	ldr	r1, [pc, #176]	; 11848 <__assert_fail@plt+0x984>
   11794:	bl	10ea0 <strncmp@plt>
   11798:	cmp	r0, #0
   1179c:	bne	117e4 <__assert_fail@plt+0x920>
   117a0:	mov	r2, #5
   117a4:	ldr	r1, [pc, #160]	; 1184c <__assert_fail@plt+0x988>
   117a8:	mov	r0, #0
   117ac:	bl	10d08 <dcgettext@plt>
   117b0:	ldr	r3, [pc, #128]	; 11838 <__assert_fail@plt+0x974>
   117b4:	ldr	r2, [pc, #132]	; 11840 <__assert_fail@plt+0x97c>
   117b8:	mov	r4, r3
   117bc:	mov	r1, r0
   117c0:	mov	r0, #1
   117c4:	bl	10e04 <__printf_chk@plt>
   117c8:	ldr	r1, [pc, #128]	; 11850 <__assert_fail@plt+0x98c>
   117cc:	mov	r2, #5
   117d0:	mov	r0, #0
   117d4:	bl	10d08 <dcgettext@plt>
   117d8:	ldr	r3, [pc, #120]	; 11858 <__assert_fail@plt+0x994>
   117dc:	mov	r1, r0
   117e0:	b	1174c <__assert_fail@plt+0x888>
   117e4:	ldr	r5, [pc, #76]	; 11838 <__assert_fail@plt+0x974>
   117e8:	mov	r4, r5
   117ec:	mov	r2, #5
   117f0:	ldr	r1, [pc, #100]	; 1185c <__assert_fail@plt+0x998>
   117f4:	mov	r0, #0
   117f8:	bl	10d08 <dcgettext@plt>
   117fc:	ldr	r1, [r7]
   11800:	bl	10c78 <fputs_unlocked@plt>
   11804:	b	11704 <__assert_fail@plt+0x840>
   11808:	andeq	r7, r2, r8, asr #2
   1180c:	andeq	r5, r1, r0, ror r8
   11810:	andeq	r7, r2, r4, lsr #3
   11814:	muleq	r1, r8, r8
   11818:	andeq	r7, r2, r4, asr r1
   1181c:	andeq	r5, r1, ip, asr #15
   11820:			; <UNDEFINED> instruction: 0x000158bc
   11824:	andeq	r5, r1, r0, lsl #18
   11828:	andeq	r5, r1, r8, lsr r9
   1182c:	andeq	r5, r1, r4, lsl #19
   11830:	andeq	r5, r1, r4, ror #20
   11834:	muleq	r1, r4, sl
   11838:	andeq	r5, r1, r4, ror #16
   1183c:	andeq	r5, r1, ip, asr #21
   11840:	andeq	r5, r1, r4, ror #21
   11844:	andeq	r5, r1, ip, lsl #22
   11848:	andeq	r5, r1, ip, lsl fp
   1184c:	andeq	r5, r1, r8, ror #22
   11850:	andeq	r5, r1, r4, lsl #23
   11854:	andeq	r5, r1, r0, ror #20
   11858:	andeq	r5, r1, r8, lsr ip
   1185c:	andeq	r5, r1, r0, lsr #22
   11860:	push	{r4, r6, r7, lr}
   11864:	mov	r6, r0
   11868:	ldr	r4, [pc, #60]	; 118ac <__assert_fail@plt+0x9e8>
   1186c:	mov	r7, r1
   11870:	ldrd	r2, [r4]
   11874:	orrs	r3, r2, r3
   11878:	moveq	r0, #1
   1187c:	beq	118a4 <__assert_fail@plt+0x9e0>
   11880:	mov	r2, #5
   11884:	ldr	r1, [pc, #36]	; 118b0 <__assert_fail@plt+0x9ec>
   11888:	mov	r0, #0
   1188c:	bl	10d08 <dcgettext@plt>
   11890:	mov	r1, #0
   11894:	mov	r2, r0
   11898:	mov	r0, r1
   1189c:	bl	10d74 <error@plt>
   118a0:	mov	r0, #0
   118a4:	strd	r6, [r4]
   118a8:	pop	{r4, r6, r7, pc}
   118ac:	andeq	r7, r2, r0, ror #2
   118b0:	ldrdeq	r5, [r1], -r0
   118b4:	push	{r4, r6, r7, lr}
   118b8:	mov	r6, r0
   118bc:	ldr	r4, [pc, #60]	; 11900 <__assert_fail@plt+0xa3c>
   118c0:	mov	r7, r1
   118c4:	ldrd	r2, [r4, #8]
   118c8:	orrs	r3, r2, r3
   118cc:	moveq	r0, #1
   118d0:	beq	118f8 <__assert_fail@plt+0xa34>
   118d4:	mov	r2, #5
   118d8:	ldr	r1, [pc, #36]	; 11904 <__assert_fail@plt+0xa40>
   118dc:	mov	r0, #0
   118e0:	bl	10d08 <dcgettext@plt>
   118e4:	mov	r1, #0
   118e8:	mov	r2, r0
   118ec:	mov	r0, r1
   118f0:	bl	10d74 <error@plt>
   118f4:	mov	r0, #0
   118f8:	strd	r6, [r4, #8]
   118fc:	pop	{r4, r6, r7, pc}
   11900:	andeq	r7, r2, r0, ror #2
   11904:	andeq	r5, r1, r0, lsl #26
   11908:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1190c:	mov	r6, r0
   11910:	ldr	r8, [pc, #216]	; 119f0 <__assert_fail@plt+0xb2c>
   11914:	mov	r7, r1
   11918:	ldr	r3, [r8, #16]
   1191c:	cmp	r3, #0
   11920:	beq	11990 <__assert_fail@plt+0xacc>
   11924:	ldr	r2, [r8, #20]
   11928:	add	r1, r2, r3, lsl #3
   1192c:	ldrd	r4, [r1, #-8]
   11930:	cmp	r5, r7
   11934:	cmpeq	r4, r0
   11938:	movhi	r4, #0
   1193c:	movhi	r5, #0
   11940:	bls	11998 <__assert_fail@plt+0xad4>
   11944:	ldr	r1, [r8, #24]
   11948:	cmp	r3, r1
   1194c:	beq	119b0 <__assert_fail@plt+0xaec>
   11950:	ldr	sl, [r8, #28]
   11954:	mov	fp, #0
   11958:	cmp	r5, fp
   1195c:	lsl	r1, r3, #3
   11960:	cmpeq	r4, sl
   11964:	add	r3, r3, #1
   11968:	strd	r6, [r2, r1]
   1196c:	str	r3, [r8, #16]
   11970:	popls	{r4, r5, r6, r7, r8, sl, fp, pc}
   11974:	mov	r3, #0
   11978:	mvn	r2, #0
   1197c:	cmp	r5, r3
   11980:	cmpeq	r4, r2
   11984:	bhi	119d0 <__assert_fail@plt+0xb0c>
   11988:	str	r4, [r8, #28]
   1198c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11990:	mov	r4, #0
   11994:	mov	r5, #0
   11998:	ldr	r1, [r8, #24]
   1199c:	subs	r4, r6, r4
   119a0:	sbc	r5, r7, r5
   119a4:	cmp	r3, r1
   119a8:	ldr	r2, [r8, #20]
   119ac:	bne	11950 <__assert_fail@plt+0xa8c>
   119b0:	mov	r0, r2
   119b4:	ldr	r1, [pc, #56]	; 119f4 <__assert_fail@plt+0xb30>
   119b8:	mov	r2, #8
   119bc:	bl	149f0 <__assert_fail@plt+0x3b2c>
   119c0:	ldr	r3, [r8, #16]
   119c4:	mov	r2, r0
   119c8:	str	r0, [r8, #20]
   119cc:	b	11950 <__assert_fail@plt+0xa8c>
   119d0:	mov	r2, #5
   119d4:	ldr	r1, [pc, #28]	; 119f8 <__assert_fail@plt+0xb34>
   119d8:	mov	r0, #0
   119dc:	bl	10d08 <dcgettext@plt>
   119e0:	mov	r1, #0
   119e4:	mov	r2, r0
   119e8:	mov	r0, #1
   119ec:	bl	10d74 <error@plt>
   119f0:	andeq	r7, r2, r0, ror #2
   119f4:	andeq	r7, r2, r8, ror r1
   119f8:	andeq	r5, r1, r0, lsr sp
   119fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a00:	sub	sp, sp, #20
   11a04:	ldrb	fp, [r0]
   11a08:	cmp	fp, #0
   11a0c:	beq	11b68 <__assert_fail@plt+0xca4>
   11a10:	mov	r8, #0
   11a14:	mov	r3, #0
   11a18:	mov	r2, #0
   11a1c:	mov	r4, r0
   11a20:	mov	sl, r8
   11a24:	mov	r9, r8
   11a28:	mov	r6, r8
   11a2c:	mov	r7, r8
   11a30:	strd	r2, [sp]
   11a34:	mov	r3, #1
   11a38:	str	r3, [sp, #12]
   11a3c:	cmp	fp, #44	; 0x2c
   11a40:	beq	11b70 <__assert_fail@plt+0xcac>
   11a44:	bl	10dbc <__ctype_b_loc@plt>
   11a48:	lsl	r2, fp, #1
   11a4c:	ldr	r1, [r0]
   11a50:	ldrh	r5, [r1, r2]
   11a54:	ands	r5, r5, #1
   11a58:	bne	11b70 <__assert_fail@plt+0xcac>
   11a5c:	cmp	fp, #47	; 0x2f
   11a60:	beq	11bc0 <__assert_fail@plt+0xcfc>
   11a64:	cmp	fp, #43	; 0x2b
   11a68:	beq	11c3c <__assert_fail@plt+0xd78>
   11a6c:	sub	ip, fp, #48	; 0x30
   11a70:	cmp	ip, #9
   11a74:	bhi	11cb0 <__assert_fail@plt+0xdec>
   11a78:	cmp	r6, #0
   11a7c:	beq	11c24 <__assert_fail@plt+0xd60>
   11a80:	ldrd	r0, [sp]
   11a84:	add	r3, pc, #612	; 0x264
   11a88:	ldrd	r2, [r3]
   11a8c:	cmp	r1, r3
   11a90:	cmpeq	r0, r2
   11a94:	bhi	11ac0 <__assert_fail@plt+0xbfc>
   11a98:	mov	r2, #10
   11a9c:	ldr	r3, [sp, #4]
   11aa0:	umull	r0, r1, r0, r2
   11aa4:	mla	r1, r2, r3, r1
   11aa8:	ldrd	r2, [sp]
   11aac:	adds	r0, r0, ip
   11ab0:	adc	r1, r1, ip, asr #31
   11ab4:	cmp	r1, r3
   11ab8:	cmpeq	r0, r2
   11abc:	bcs	11ce8 <__assert_fail@plt+0xe24>
   11ac0:	ldr	r1, [pc, #560]	; 11cf8 <__assert_fail@plt+0xe34>
   11ac4:	mov	r0, r8
   11ac8:	bl	10eb8 <strspn@plt>
   11acc:	mov	r1, r0
   11ad0:	mov	r4, r0
   11ad4:	mov	r0, r8
   11ad8:	bl	14dd8 <__assert_fail@plt+0x3f14>
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #532]	; 11cfc <__assert_fail@plt+0xe38>
   11ae4:	sub	r4, r4, #1
   11ae8:	add	r4, r8, r4
   11aec:	add	r4, r4, #1
   11af0:	mov	r5, r0
   11af4:	mov	r0, r7
   11af8:	bl	10d08 <dcgettext@plt>
   11afc:	mov	fp, r0
   11b00:	mov	r0, r5
   11b04:	bl	143b0 <__assert_fail@plt+0x34ec>
   11b08:	mov	r2, fp
   11b0c:	mov	r1, r7
   11b10:	mov	r3, r0
   11b14:	mov	r0, #0
   11b18:	bl	10d74 <error@plt>
   11b1c:	mov	r0, r5
   11b20:	bl	123f8 <__assert_fail@plt+0x1534>
   11b24:	ldrb	fp, [r4]
   11b28:	str	r7, [sp, #12]
   11b2c:	cmp	fp, #0
   11b30:	bne	11a3c <__assert_fail@plt+0xb78>
   11b34:	ldr	r3, [sp, #12]
   11b38:	tst	r6, r3
   11b3c:	beq	11b5c <__assert_fail@plt+0xc98>
   11b40:	cmp	r9, #0
   11b44:	ldrd	r0, [sp]
   11b48:	bne	11c98 <__assert_fail@plt+0xdd4>
   11b4c:	cmp	sl, #0
   11b50:	beq	11c8c <__assert_fail@plt+0xdc8>
   11b54:	bl	118b4 <__assert_fail@plt+0x9f0>
   11b58:	str	r0, [sp, #12]
   11b5c:	ldr	r3, [sp, #12]
   11b60:	cmp	r3, #0
   11b64:	beq	11c1c <__assert_fail@plt+0xd58>
   11b68:	add	sp, sp, #20
   11b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b70:	cmp	r6, #0
   11b74:	beq	11b9c <__assert_fail@plt+0xcd8>
   11b78:	cmp	r9, #0
   11b7c:	ldrd	r0, [sp]
   11b80:	bne	11c10 <__assert_fail@plt+0xd4c>
   11b84:	cmp	sl, #0
   11b88:	beq	11bb0 <__assert_fail@plt+0xcec>
   11b8c:	bl	118b4 <__assert_fail@plt+0x9f0>
   11b90:	subs	sl, r0, #0
   11b94:	beq	11c1c <__assert_fail@plt+0xd58>
   11b98:	mov	r6, r7
   11b9c:	ldrb	fp, [r4, #1]
   11ba0:	add	r4, r4, #1
   11ba4:	cmp	fp, #0
   11ba8:	bne	11a3c <__assert_fail@plt+0xb78>
   11bac:	b	11b34 <__assert_fail@plt+0xc70>
   11bb0:	bl	11908 <__assert_fail@plt+0xa44>
   11bb4:	mov	r9, r7
   11bb8:	mov	r6, sl
   11bbc:	b	11b9c <__assert_fail@plt+0xcd8>
   11bc0:	cmp	r6, #0
   11bc4:	moveq	sl, r7
   11bc8:	moveq	r9, #1
   11bcc:	beq	11b9c <__assert_fail@plt+0xcd8>
   11bd0:	mov	r2, #5
   11bd4:	ldr	r1, [pc, #292]	; 11d00 <__assert_fail@plt+0xe3c>
   11bd8:	mov	r0, r7
   11bdc:	bl	10d08 <dcgettext@plt>
   11be0:	mov	sl, r5
   11be4:	mov	r9, r0
   11be8:	mov	r0, r4
   11bec:	bl	143b0 <__assert_fail@plt+0x34ec>
   11bf0:	mov	r2, r9
   11bf4:	mov	r1, r7
   11bf8:	mov	r9, r6
   11bfc:	mov	r3, r0
   11c00:	mov	r0, r5
   11c04:	bl	10d74 <error@plt>
   11c08:	str	r7, [sp, #12]
   11c0c:	b	11b9c <__assert_fail@plt+0xcd8>
   11c10:	bl	11860 <__assert_fail@plt+0x99c>
   11c14:	subs	r9, r0, #0
   11c18:	bne	11b98 <__assert_fail@plt+0xcd4>
   11c1c:	mov	r0, #1
   11c20:	bl	10dc8 <exit@plt>
   11c24:	mov	r0, ip
   11c28:	asr	r1, ip, #31
   11c2c:	mov	r8, r4
   11c30:	strd	r0, [sp]
   11c34:	mov	r6, #1
   11c38:	b	11b9c <__assert_fail@plt+0xcd8>
   11c3c:	cmp	r6, #0
   11c40:	moveq	r9, r7
   11c44:	moveq	sl, #1
   11c48:	beq	11b9c <__assert_fail@plt+0xcd8>
   11c4c:	mov	r2, #5
   11c50:	ldr	r1, [pc, #172]	; 11d04 <__assert_fail@plt+0xe40>
   11c54:	mov	r0, r7
   11c58:	bl	10d08 <dcgettext@plt>
   11c5c:	mov	sl, r6
   11c60:	mov	r9, r0
   11c64:	mov	r0, r4
   11c68:	bl	143b0 <__assert_fail@plt+0x34ec>
   11c6c:	mov	r2, r9
   11c70:	mov	r1, r7
   11c74:	mov	r9, r5
   11c78:	mov	r3, r0
   11c7c:	mov	r0, r5
   11c80:	bl	10d74 <error@plt>
   11c84:	str	r7, [sp, #12]
   11c88:	b	11b9c <__assert_fail@plt+0xcd8>
   11c8c:	add	sp, sp, #20
   11c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c94:	b	11908 <__assert_fail@plt+0xa44>
   11c98:	bl	11860 <__assert_fail@plt+0x99c>
   11c9c:	str	r0, [sp, #12]
   11ca0:	ldr	r3, [sp, #12]
   11ca4:	cmp	r3, #0
   11ca8:	bne	11b68 <__assert_fail@plt+0xca4>
   11cac:	b	11c1c <__assert_fail@plt+0xd58>
   11cb0:	mov	r2, #5
   11cb4:	ldr	r1, [pc, #76]	; 11d08 <__assert_fail@plt+0xe44>
   11cb8:	mov	r0, r5
   11cbc:	bl	10d08 <dcgettext@plt>
   11cc0:	mov	r6, r0
   11cc4:	mov	r0, r4
   11cc8:	bl	143b0 <__assert_fail@plt+0x34ec>
   11ccc:	mov	r2, r6
   11cd0:	mov	r1, r5
   11cd4:	mov	r3, r0
   11cd8:	mov	r0, r5
   11cdc:	bl	10d74 <error@plt>
   11ce0:	mov	r0, #1
   11ce4:	bl	10dc8 <exit@plt>
   11ce8:	strd	r0, [sp]
   11cec:	b	11b9c <__assert_fail@plt+0xcd8>
   11cf0:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11cf4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11cf8:	andeq	r5, r1, ip, asr #27
   11cfc:	ldrdeq	r5, [r1], -r8
   11d00:	andeq	r5, r1, r8, asr #26
   11d04:	andeq	r5, r1, r4, ror sp
   11d08:	andeq	r5, r1, r0, lsr #27
   11d0c:	ldr	ip, [pc, #292]	; 11e38 <__assert_fail@plt+0xf74>
   11d10:	push	{r4, r5, r6, r7, r8, lr}
   11d14:	ldr	lr, [ip, #16]
   11d18:	ldr	r0, [ip, #20]
   11d1c:	cmp	lr, #0
   11d20:	beq	11db8 <__assert_fail@plt+0xef4>
   11d24:	ldrd	r6, [r0]
   11d28:	orrs	r3, r6, r7
   11d2c:	mov	r4, r6
   11d30:	mov	r5, r7
   11d34:	movne	r1, #0
   11d38:	bne	11d60 <__assert_fail@plt+0xe9c>
   11d3c:	b	11e00 <__assert_fail@plt+0xf3c>
   11d40:	ldrd	r2, [r0, #8]!
   11d44:	orrs	r8, r2, r3
   11d48:	beq	11e00 <__assert_fail@plt+0xf3c>
   11d4c:	cmp	r3, r5
   11d50:	cmpeq	r2, r4
   11d54:	bls	11e20 <__assert_fail@plt+0xf5c>
   11d58:	mov	r4, r2
   11d5c:	mov	r5, r3
   11d60:	add	r1, r1, #1
   11d64:	cmp	lr, r1
   11d68:	bne	11d40 <__assert_fail@plt+0xe7c>
   11d6c:	ldrd	r0, [ip, #8]
   11d70:	orrs	r3, r0, r1
   11d74:	beq	11d84 <__assert_fail@plt+0xec0>
   11d78:	ldrd	r2, [ip]
   11d7c:	orrs	r3, r2, r3
   11d80:	bne	11e2c <__assert_fail@plt+0xf68>
   11d84:	cmp	lr, #1
   11d88:	beq	11d9c <__assert_fail@plt+0xed8>
   11d8c:	mov	r2, #0
   11d90:	mov	r3, #0
   11d94:	strd	r2, [ip, #32]
   11d98:	pop	{r4, r5, r6, r7, r8, pc}
   11d9c:	ldrd	r2, [ip]
   11da0:	orr	r2, r2, r0
   11da4:	orr	r3, r3, r1
   11da8:	orrs	r3, r2, r3
   11dac:	bne	11d8c <__assert_fail@plt+0xec8>
   11db0:	strd	r6, [ip, #32]
   11db4:	pop	{r4, r5, r6, r7, r8, pc}
   11db8:	ldrd	r2, [ip, #8]
   11dbc:	orrs	r1, r2, r3
   11dc0:	beq	11de4 <__assert_fail@plt+0xf20>
   11dc4:	ldrd	r0, [ip]
   11dc8:	orrs	r1, r0, r1
   11dcc:	bne	11e2c <__assert_fail@plt+0xf68>
   11dd0:	mov	r1, r2
   11dd4:	mov	r3, #0
   11dd8:	str	r1, [ip, #28]
   11ddc:	strd	r2, [ip, #32]
   11de0:	pop	{r4, r5, r6, r7, r8, pc}
   11de4:	ldrd	r2, [ip]
   11de8:	orrs	r1, r2, r3
   11dec:	bne	11dd0 <__assert_fail@plt+0xf0c>
   11df0:	mov	r2, #8
   11df4:	mov	r3, #0
   11df8:	mov	r1, #8
   11dfc:	b	11dd8 <__assert_fail@plt+0xf14>
   11e00:	ldr	r1, [pc, #52]	; 11e3c <__assert_fail@plt+0xf78>
   11e04:	mov	r2, #5
   11e08:	mov	r0, #0
   11e0c:	bl	10d08 <dcgettext@plt>
   11e10:	mov	r1, #0
   11e14:	mov	r2, r0
   11e18:	mov	r0, #1
   11e1c:	bl	10d74 <error@plt>
   11e20:	mov	r2, #5
   11e24:	ldr	r1, [pc, #20]	; 11e40 <__assert_fail@plt+0xf7c>
   11e28:	b	11e08 <__assert_fail@plt+0xf44>
   11e2c:	mov	r2, #5
   11e30:	ldr	r1, [pc, #12]	; 11e44 <__assert_fail@plt+0xf80>
   11e34:	b	11e08 <__assert_fail@plt+0xf44>
   11e38:	andeq	r7, r2, r0, ror #2
   11e3c:	strdeq	r5, [r1], -r4
   11e40:	andeq	r5, r1, ip, lsl #28
   11e44:	andeq	r5, r1, r8, lsr #28
   11e48:	push	{r4, r5, r6, r7, r8, lr}
   11e4c:	mov	ip, #0
   11e50:	ldr	lr, [pc, #256]	; 11f58 <__assert_fail@plt+0x1094>
   11e54:	strb	ip, [r3]
   11e58:	mov	r6, r0
   11e5c:	ldrd	r4, [lr, #32]
   11e60:	mov	r7, r1
   11e64:	orrs	ip, r4, r5
   11e68:	bne	11f1c <__assert_fail@plt+0x1058>
   11e6c:	ldr	r1, [r2]
   11e70:	ldr	ip, [lr, #16]
   11e74:	cmp	ip, r1
   11e78:	bls	11ec0 <__assert_fail@plt+0xffc>
   11e7c:	ldr	r5, [lr, #20]
   11e80:	lsl	r4, r1, #3
   11e84:	add	r0, r5, r4
   11e88:	add	r4, r5, r4
   11e8c:	ldrd	r4, [r4]
   11e90:	cmp	r7, r5
   11e94:	cmpeq	r6, r4
   11e98:	bcs	11eb0 <__assert_fail@plt+0xfec>
   11e9c:	b	11f10 <__assert_fail@plt+0x104c>
   11ea0:	ldrd	r4, [r0, #8]!
   11ea4:	cmp	r7, r5
   11ea8:	cmpeq	r6, r4
   11eac:	bcc	11f3c <__assert_fail@plt+0x1078>
   11eb0:	add	r1, r1, #1
   11eb4:	cmp	r1, ip
   11eb8:	bne	11ea0 <__assert_fail@plt+0xfdc>
   11ebc:	str	ip, [r2]
   11ec0:	ldrd	r4, [lr]
   11ec4:	orrs	r2, r4, r5
   11ec8:	bne	11f44 <__assert_fail@plt+0x1080>
   11ecc:	ldrd	r4, [lr, #8]
   11ed0:	orrs	r2, r4, r5
   11ed4:	moveq	r2, #1
   11ed8:	strbeq	r2, [r3]
   11edc:	beq	11f10 <__assert_fail@plt+0x104c>
   11ee0:	ldr	r1, [lr, #20]
   11ee4:	mov	r2, r4
   11ee8:	add	ip, r1, ip, lsl #3
   11eec:	adds	r4, r4, r6
   11ef0:	ldrd	r0, [ip, #-8]
   11ef4:	mov	r3, r5
   11ef8:	adc	r5, r5, r7
   11efc:	subs	r0, r6, r0
   11f00:	sbc	r1, r7, r1
   11f04:	bl	155d0 <__assert_fail@plt+0x470c>
   11f08:	subs	r4, r4, r2
   11f0c:	sbc	r5, r5, r3
   11f10:	mov	r0, r4
   11f14:	mov	r1, r5
   11f18:	pop	{r4, r5, r6, r7, r8, pc}
   11f1c:	mov	r2, r4
   11f20:	mov	r3, r5
   11f24:	adds	r4, r4, r6
   11f28:	adc	r5, r5, r7
   11f2c:	bl	155d0 <__assert_fail@plt+0x470c>
   11f30:	subs	r4, r4, r2
   11f34:	sbc	r5, r5, r3
   11f38:	b	11f10 <__assert_fail@plt+0x104c>
   11f3c:	str	r1, [r2]
   11f40:	b	11f10 <__assert_fail@plt+0x104c>
   11f44:	mov	r2, r4
   11f48:	mov	r3, r5
   11f4c:	mov	r0, r6
   11f50:	mov	r1, r7
   11f54:	b	11f24 <__assert_fail@plt+0x1060>
   11f58:	andeq	r7, r2, r0, ror #2
   11f5c:	ldr	r3, [pc, #24]	; 11f7c <__assert_fail@plt+0x10b8>
   11f60:	cmp	r0, #0
   11f64:	mov	r2, #0
   11f68:	strb	r2, [r3, #40]	; 0x28
   11f6c:	ldreq	r2, [pc, #12]	; 11f80 <__assert_fail@plt+0x10bc>
   11f70:	strne	r0, [r3, #44]	; 0x2c
   11f74:	streq	r2, [r3, #44]	; 0x2c
   11f78:	bx	lr
   11f7c:	andeq	r7, r2, r0, ror #2
   11f80:	andeq	r7, r2, r4, ror #1
   11f84:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f88:	subs	r6, r0, #0
   11f8c:	ldr	r5, [pc, #368]	; 12104 <__assert_fail@plt+0x1240>
   11f90:	beq	12010 <__assert_fail@plt+0x114c>
   11f94:	ldr	r7, [r5, #48]	; 0x30
   11f98:	cmp	r7, #0
   11f9c:	beq	120f0 <__assert_fail@plt+0x122c>
   11fa0:	bl	10de0 <__errno_location@plt>
   11fa4:	ldr	r3, [r6]
   11fa8:	ldr	r1, [pc, #344]	; 12108 <__assert_fail@plt+0x1244>
   11fac:	tst	r3, #32
   11fb0:	ldr	r4, [r0]
   11fb4:	mov	r8, r0
   11fb8:	mov	r0, r7
   11fbc:	moveq	r4, #0
   11fc0:	bl	10c90 <strcmp@plt>
   11fc4:	cmp	r0, #0
   11fc8:	mov	r0, r6
   11fcc:	beq	120e8 <__assert_fail@plt+0x1224>
   11fd0:	bl	122f8 <__assert_fail@plt+0x1434>
   11fd4:	cmp	r0, #0
   11fd8:	ldrne	r4, [r8]
   11fdc:	cmp	r4, #0
   11fe0:	beq	12010 <__assert_fail@plt+0x114c>
   11fe4:	ldr	r2, [r5, #48]	; 0x30
   11fe8:	mov	r1, #3
   11fec:	mov	r0, #0
   11ff0:	bl	1422c <__assert_fail@plt+0x3368>
   11ff4:	mov	r1, r4
   11ff8:	ldr	r2, [pc, #268]	; 1210c <__assert_fail@plt+0x1248>
   11ffc:	mov	r3, r0
   12000:	mov	r0, #0
   12004:	bl	10d74 <error@plt>
   12008:	mov	r3, #1
   1200c:	str	r3, [r5, #52]	; 0x34
   12010:	ldr	r3, [r5, #44]	; 0x2c
   12014:	add	r2, r3, #4
   12018:	ldr	r6, [r3]
   1201c:	str	r2, [r5, #44]	; 0x2c
   12020:	cmp	r6, #0
   12024:	beq	120dc <__assert_fail@plt+0x1218>
   12028:	ldr	r8, [pc, #216]	; 12108 <__assert_fail@plt+0x1244>
   1202c:	ldr	fp, [pc, #220]	; 12110 <__assert_fail@plt+0x124c>
   12030:	ldr	sl, [pc, #212]	; 1210c <__assert_fail@plt+0x1248>
   12034:	mov	r7, #1
   12038:	mov	r9, #3
   1203c:	b	12098 <__assert_fail@plt+0x11d4>
   12040:	ldr	r4, [fp]
   12044:	strb	r7, [r5, #40]	; 0x28
   12048:	cmp	r4, #0
   1204c:	bne	120c4 <__assert_fail@plt+0x1200>
   12050:	bl	10de0 <__errno_location@plt>
   12054:	mov	r2, r6
   12058:	mov	r1, r9
   1205c:	ldr	r6, [r0]
   12060:	mov	r0, r4
   12064:	bl	1422c <__assert_fail@plt+0x3368>
   12068:	mov	r2, sl
   1206c:	mov	r1, r6
   12070:	mov	r3, r0
   12074:	mov	r0, r4
   12078:	bl	10d74 <error@plt>
   1207c:	ldr	r3, [r5, #44]	; 0x2c
   12080:	str	r7, [r5, #52]	; 0x34
   12084:	add	r2, r3, #4
   12088:	ldr	r6, [r3]
   1208c:	str	r2, [r5, #44]	; 0x2c
   12090:	cmp	r6, #0
   12094:	beq	120dc <__assert_fail@plt+0x1218>
   12098:	mov	r1, r8
   1209c:	mov	r0, r6
   120a0:	bl	10c90 <strcmp@plt>
   120a4:	cmp	r0, #0
   120a8:	beq	12040 <__assert_fail@plt+0x117c>
   120ac:	ldr	r1, [pc, #96]	; 12114 <__assert_fail@plt+0x1250>
   120b0:	mov	r0, r6
   120b4:	bl	10e88 <fopen64@plt>
   120b8:	mov	r4, r0
   120bc:	cmp	r4, #0
   120c0:	beq	12050 <__assert_fail@plt+0x118c>
   120c4:	mov	r0, r4
   120c8:	mov	r1, #2
   120cc:	str	r6, [r5, #48]	; 0x30
   120d0:	bl	122c4 <__assert_fail@plt+0x1400>
   120d4:	mov	r0, r4
   120d8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120dc:	mov	r4, #0
   120e0:	mov	r0, r4
   120e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120e8:	bl	10e7c <clearerr_unlocked@plt>
   120ec:	b	11fdc <__assert_fail@plt+0x1118>
   120f0:	ldr	r3, [pc, #32]	; 12118 <__assert_fail@plt+0x1254>
   120f4:	mov	r2, #340	; 0x154
   120f8:	ldr	r1, [pc, #28]	; 1211c <__assert_fail@plt+0x1258>
   120fc:	ldr	r0, [pc, #28]	; 12120 <__assert_fail@plt+0x125c>
   12100:	bl	10ec4 <__assert_fail@plt>
   12104:	andeq	r7, r2, r0, ror #2
   12108:	andeq	r5, r1, r8, ror lr
   1210c:	andeq	r5, r1, r8, asr #27
   12110:	andeq	r7, r2, r0, asr r1
   12114:	andeq	r5, r1, ip, ror lr
   12118:	andeq	r5, r1, r4, asr #25
   1211c:	andeq	r5, r1, r8, asr lr
   12120:	andeq	r5, r1, ip, ror #28
   12124:	ldr	r3, [pc, #52]	; 12160 <__assert_fail@plt+0x129c>
   12128:	ldrb	r3, [r3, #40]	; 0x28
   1212c:	cmp	r3, #0
   12130:	bxeq	lr
   12134:	ldr	r3, [pc, #40]	; 12164 <__assert_fail@plt+0x12a0>
   12138:	push	{r4, lr}
   1213c:	ldr	r0, [r3]
   12140:	bl	122f8 <__assert_fail@plt+0x1434>
   12144:	cmp	r0, #0
   12148:	popeq	{r4, pc}
   1214c:	bl	10de0 <__errno_location@plt>
   12150:	ldr	r2, [pc, #16]	; 12168 <__assert_fail@plt+0x12a4>
   12154:	ldr	r1, [r0]
   12158:	mov	r0, #1
   1215c:	bl	10d74 <error@plt>
   12160:	andeq	r7, r2, r0, ror #2
   12164:	andeq	r7, r2, r0, asr r1
   12168:	andeq	r5, r1, r8, ror lr
   1216c:	push	{r4, lr}
   12170:	mov	r2, #5
   12174:	ldr	r4, [pc, #44]	; 121a8 <__assert_fail@plt+0x12e4>
   12178:	ldr	r1, [pc, #44]	; 121ac <__assert_fail@plt+0x12e8>
   1217c:	mov	r0, #0
   12180:	bl	10d08 <dcgettext@plt>
   12184:	ldr	r1, [r4]
   12188:	bl	10c78 <fputs_unlocked@plt>
   1218c:	ldr	r1, [pc, #28]	; 121b0 <__assert_fail@plt+0x12ec>
   12190:	mov	r2, #5
   12194:	mov	r0, #0
   12198:	bl	10d08 <dcgettext@plt>
   1219c:	ldr	r1, [r4]
   121a0:	pop	{r4, lr}
   121a4:	b	10c78 <fputs_unlocked@plt>
   121a8:	andeq	r7, r2, r4, asr r1
   121ac:	andeq	r5, r1, r0, lsl #29
   121b0:	andeq	r5, r1, r0, asr #29
   121b4:	ldr	r3, [pc, #4]	; 121c0 <__assert_fail@plt+0x12fc>
   121b8:	str	r0, [r3]
   121bc:	bx	lr
   121c0:	muleq	r2, ip, r1
   121c4:	ldr	r3, [pc, #4]	; 121d0 <__assert_fail@plt+0x130c>
   121c8:	strb	r0, [r3, #4]
   121cc:	bx	lr
   121d0:	muleq	r2, ip, r1
   121d4:	ldr	r3, [pc, #192]	; 1229c <__assert_fail@plt+0x13d8>
   121d8:	push	{r4, r5, r6, lr}
   121dc:	sub	sp, sp, #8
   121e0:	ldr	r0, [r3]
   121e4:	bl	14f40 <__assert_fail@plt+0x407c>
   121e8:	cmp	r0, #0
   121ec:	beq	12210 <__assert_fail@plt+0x134c>
   121f0:	ldr	r4, [pc, #168]	; 122a0 <__assert_fail@plt+0x13dc>
   121f4:	ldrb	r3, [r4, #4]
   121f8:	cmp	r3, #0
   121fc:	beq	1222c <__assert_fail@plt+0x1368>
   12200:	bl	10de0 <__errno_location@plt>
   12204:	ldr	r3, [r0]
   12208:	cmp	r3, #32
   1220c:	bne	1222c <__assert_fail@plt+0x1368>
   12210:	ldr	r3, [pc, #140]	; 122a4 <__assert_fail@plt+0x13e0>
   12214:	ldr	r0, [r3]
   12218:	bl	14f40 <__assert_fail@plt+0x407c>
   1221c:	cmp	r0, #0
   12220:	bne	12274 <__assert_fail@plt+0x13b0>
   12224:	add	sp, sp, #8
   12228:	pop	{r4, r5, r6, pc}
   1222c:	mov	r2, #5
   12230:	ldr	r1, [pc, #112]	; 122a8 <__assert_fail@plt+0x13e4>
   12234:	mov	r0, #0
   12238:	bl	10d08 <dcgettext@plt>
   1223c:	ldr	r4, [r4]
   12240:	cmp	r4, #0
   12244:	mov	r5, r0
   12248:	beq	12280 <__assert_fail@plt+0x13bc>
   1224c:	bl	10de0 <__errno_location@plt>
   12250:	ldr	r6, [r0]
   12254:	mov	r0, r4
   12258:	bl	14218 <__assert_fail@plt+0x3354>
   1225c:	mov	r1, r6
   12260:	str	r5, [sp]
   12264:	ldr	r2, [pc, #64]	; 122ac <__assert_fail@plt+0x13e8>
   12268:	mov	r3, r0
   1226c:	mov	r0, #0
   12270:	bl	10d74 <error@plt>
   12274:	ldr	r3, [pc, #52]	; 122b0 <__assert_fail@plt+0x13ec>
   12278:	ldr	r0, [r3]
   1227c:	bl	10cc0 <_exit@plt>
   12280:	bl	10de0 <__errno_location@plt>
   12284:	mov	r3, r5
   12288:	ldr	r2, [pc, #36]	; 122b4 <__assert_fail@plt+0x13f0>
   1228c:	ldr	r1, [r0]
   12290:	mov	r0, r4
   12294:	bl	10d74 <error@plt>
   12298:	b	12274 <__assert_fail@plt+0x13b0>
   1229c:	andeq	r7, r2, r4, asr r1
   122a0:	muleq	r2, ip, r1
   122a4:	andeq	r7, r2, r8, asr #2
   122a8:	andeq	r5, r1, r8, lsl #24
   122ac:	andeq	r6, r1, r0, asr #32
   122b0:	strdeq	r7, [r2], -r0
   122b4:	andeq	r5, r1, r8, asr #27
   122b8:	push	{r4, r5}
   122bc:	pop	{r4, r5}
   122c0:	b	10c9c <posix_fadvise64@plt>
   122c4:	cmp	r0, #0
   122c8:	bxeq	lr
   122cc:	push	{r4, lr}
   122d0:	sub	sp, sp, #16
   122d4:	mov	r4, r1
   122d8:	bl	10e10 <fileno@plt>
   122dc:	mov	r2, #0
   122e0:	mov	r3, #0
   122e4:	str	r4, [sp, #8]
   122e8:	strd	r2, [sp]
   122ec:	bl	10c9c <posix_fadvise64@plt>
   122f0:	add	sp, sp, #16
   122f4:	pop	{r4, pc}
   122f8:	push	{r4, r5, lr}
   122fc:	sub	sp, sp, #12
   12300:	mov	r4, r0
   12304:	bl	10e10 <fileno@plt>
   12308:	cmp	r0, #0
   1230c:	mov	r0, r4
   12310:	blt	1238c <__assert_fail@plt+0x14c8>
   12314:	bl	10d98 <__freading@plt>
   12318:	cmp	r0, #0
   1231c:	bne	12358 <__assert_fail@plt+0x1494>
   12320:	mov	r0, r4
   12324:	bl	12398 <__assert_fail@plt+0x14d4>
   12328:	cmp	r0, #0
   1232c:	beq	12388 <__assert_fail@plt+0x14c4>
   12330:	bl	10de0 <__errno_location@plt>
   12334:	mov	r5, r0
   12338:	mov	r0, r4
   1233c:	ldr	r4, [r5]
   12340:	bl	10e28 <fclose@plt>
   12344:	cmp	r4, #0
   12348:	mvnne	r0, #0
   1234c:	strne	r4, [r5]
   12350:	add	sp, sp, #12
   12354:	pop	{r4, r5, pc}
   12358:	mov	r0, r4
   1235c:	bl	10e10 <fileno@plt>
   12360:	mov	r3, #1
   12364:	str	r3, [sp]
   12368:	mov	r2, #0
   1236c:	mov	r3, #0
   12370:	bl	10d44 <lseek64@plt>
   12374:	mvn	r3, #0
   12378:	mvn	r2, #0
   1237c:	cmp	r1, r3
   12380:	cmpeq	r0, r2
   12384:	bne	12320 <__assert_fail@plt+0x145c>
   12388:	mov	r0, r4
   1238c:	add	sp, sp, #12
   12390:	pop	{r4, r5, lr}
   12394:	b	10e28 <fclose@plt>
   12398:	push	{r4, lr}
   1239c:	subs	r4, r0, #0
   123a0:	sub	sp, sp, #8
   123a4:	beq	123c0 <__assert_fail@plt+0x14fc>
   123a8:	bl	10d98 <__freading@plt>
   123ac:	cmp	r0, #0
   123b0:	beq	123c0 <__assert_fail@plt+0x14fc>
   123b4:	ldr	r3, [r4]
   123b8:	tst	r3, #256	; 0x100
   123bc:	bne	123d0 <__assert_fail@plt+0x150c>
   123c0:	mov	r0, r4
   123c4:	add	sp, sp, #8
   123c8:	pop	{r4, lr}
   123cc:	b	10ca8 <fflush@plt>
   123d0:	mov	r3, #1
   123d4:	str	r3, [sp]
   123d8:	mov	r2, #0
   123dc:	mov	r3, #0
   123e0:	mov	r0, r4
   123e4:	bl	12450 <__assert_fail@plt+0x158c>
   123e8:	mov	r0, r4
   123ec:	add	sp, sp, #8
   123f0:	pop	{r4, lr}
   123f4:	b	10ca8 <fflush@plt>
   123f8:	push	{r4, r5, lr}
   123fc:	sub	sp, sp, #12
   12400:	mov	r5, r0
   12404:	bl	10de0 <__errno_location@plt>
   12408:	mov	r2, #0
   1240c:	mov	r4, r0
   12410:	ldr	r3, [r0]
   12414:	str	r2, [r4]
   12418:	mov	r0, r5
   1241c:	str	r3, [sp]
   12420:	str	r3, [sp, #4]
   12424:	bl	10cb4 <free@plt>
   12428:	ldr	r3, [r4]
   1242c:	add	r2, sp, #8
   12430:	cmp	r3, #0
   12434:	moveq	r3, #4
   12438:	movne	r3, #0
   1243c:	add	r3, r2, r3
   12440:	ldr	r3, [r3, #-8]
   12444:	str	r3, [r4]
   12448:	add	sp, sp, #12
   1244c:	pop	{r4, r5, pc}
   12450:	push	{r4, r5, r6, r7, r8, lr}
   12454:	sub	sp, sp, #8
   12458:	ldmib	r0, {ip, lr}
   1245c:	mov	r4, r0
   12460:	ldr	r5, [sp, #32]
   12464:	cmp	lr, ip
   12468:	beq	12480 <__assert_fail@plt+0x15bc>
   1246c:	str	r5, [sp, #32]
   12470:	mov	r0, r4
   12474:	add	sp, sp, #8
   12478:	pop	{r4, r5, r6, r7, r8, lr}
   1247c:	b	10e34 <fseeko64@plt>
   12480:	ldr	lr, [r0, #20]
   12484:	ldr	ip, [r0, #16]
   12488:	cmp	lr, ip
   1248c:	bne	1246c <__assert_fail@plt+0x15a8>
   12490:	ldr	r8, [r0, #36]	; 0x24
   12494:	cmp	r8, #0
   12498:	bne	1246c <__assert_fail@plt+0x15a8>
   1249c:	mov	r6, r2
   124a0:	mov	r7, r3
   124a4:	bl	10e10 <fileno@plt>
   124a8:	mov	r2, r6
   124ac:	mov	r3, r7
   124b0:	str	r5, [sp]
   124b4:	bl	10d44 <lseek64@plt>
   124b8:	mvn	r3, #0
   124bc:	mvn	r2, #0
   124c0:	cmp	r1, r3
   124c4:	cmpeq	r0, r2
   124c8:	beq	124e8 <__assert_fail@plt+0x1624>
   124cc:	ldr	r3, [r4]
   124d0:	strd	r0, [r4, #80]	; 0x50
   124d4:	mov	r0, r8
   124d8:	bic	r3, r3, #16
   124dc:	str	r3, [r4]
   124e0:	add	sp, sp, #8
   124e4:	pop	{r4, r5, r6, r7, r8, pc}
   124e8:	mvn	r0, #0
   124ec:	b	124e0 <__assert_fail@plt+0x161c>
   124f0:	push	{r4, r5, r6, lr}
   124f4:	subs	r4, r0, #0
   124f8:	beq	1256c <__assert_fail@plt+0x16a8>
   124fc:	mov	r1, #47	; 0x2f
   12500:	bl	10e64 <strrchr@plt>
   12504:	subs	r5, r0, #0
   12508:	beq	12558 <__assert_fail@plt+0x1694>
   1250c:	add	r6, r5, #1
   12510:	sub	r3, r6, r4
   12514:	cmp	r3, #6
   12518:	ble	12558 <__assert_fail@plt+0x1694>
   1251c:	mov	r2, #7
   12520:	ldr	r1, [pc, #96]	; 12588 <__assert_fail@plt+0x16c4>
   12524:	sub	r0, r5, #6
   12528:	bl	10ea0 <strncmp@plt>
   1252c:	cmp	r0, #0
   12530:	bne	12558 <__assert_fail@plt+0x1694>
   12534:	mov	r2, #3
   12538:	ldr	r1, [pc, #76]	; 1258c <__assert_fail@plt+0x16c8>
   1253c:	mov	r0, r6
   12540:	bl	10ea0 <strncmp@plt>
   12544:	cmp	r0, #0
   12548:	movne	r4, r6
   1254c:	ldreq	r3, [pc, #60]	; 12590 <__assert_fail@plt+0x16cc>
   12550:	addeq	r4, r5, #4
   12554:	streq	r4, [r3]
   12558:	ldr	r2, [pc, #52]	; 12594 <__assert_fail@plt+0x16d0>
   1255c:	ldr	r3, [pc, #52]	; 12598 <__assert_fail@plt+0x16d4>
   12560:	str	r4, [r2]
   12564:	str	r4, [r3]
   12568:	pop	{r4, r5, r6, pc}
   1256c:	ldr	r3, [pc, #40]	; 1259c <__assert_fail@plt+0x16d8>
   12570:	mov	r2, #55	; 0x37
   12574:	mov	r1, #1
   12578:	ldr	r3, [r3]
   1257c:	ldr	r0, [pc, #28]	; 125a0 <__assert_fail@plt+0x16dc>
   12580:	bl	10d38 <fwrite@plt>
   12584:	bl	10eac <abort@plt>
   12588:	andeq	r6, r1, r0, lsl #1
   1258c:	andeq	r6, r1, r8, lsl #1
   12590:	andeq	r7, r2, r8, lsr r1
   12594:	andeq	r7, r2, r4, lsr #3
   12598:	andeq	r7, r2, ip, lsr r1
   1259c:	andeq	r7, r2, r8, asr #2
   125a0:	andeq	r6, r1, r8, asr #32
   125a4:	push	{r4, r5, r6, lr}
   125a8:	mov	r2, #48	; 0x30
   125ac:	mov	r4, r1
   125b0:	mov	r1, #0
   125b4:	mov	r5, r0
   125b8:	bl	10df8 <memset@plt>
   125bc:	cmp	r4, #10
   125c0:	beq	125d0 <__assert_fail@plt+0x170c>
   125c4:	str	r4, [r5]
   125c8:	mov	r0, r5
   125cc:	pop	{r4, r5, r6, pc}
   125d0:	bl	10eac <abort@plt>
   125d4:	push	{r4, r5, r6, lr}
   125d8:	mov	r4, r0
   125dc:	mov	r5, r1
   125e0:	bl	14fbc <__assert_fail@plt+0x40f8>
   125e4:	ldrb	r3, [r0]
   125e8:	bic	r3, r3, #32
   125ec:	cmp	r3, #85	; 0x55
   125f0:	bne	12650 <__assert_fail@plt+0x178c>
   125f4:	ldrb	r3, [r0, #1]
   125f8:	bic	r3, r3, #32
   125fc:	cmp	r3, #84	; 0x54
   12600:	bne	1268c <__assert_fail@plt+0x17c8>
   12604:	ldrb	r3, [r0, #2]
   12608:	bic	r3, r3, #32
   1260c:	cmp	r3, #70	; 0x46
   12610:	bne	1268c <__assert_fail@plt+0x17c8>
   12614:	ldrb	r3, [r0, #3]
   12618:	cmp	r3, #45	; 0x2d
   1261c:	bne	1268c <__assert_fail@plt+0x17c8>
   12620:	ldrb	r3, [r0, #4]
   12624:	cmp	r3, #56	; 0x38
   12628:	bne	1268c <__assert_fail@plt+0x17c8>
   1262c:	ldrb	r3, [r0, #5]
   12630:	cmp	r3, #0
   12634:	bne	1268c <__assert_fail@plt+0x17c8>
   12638:	ldrb	r2, [r4]
   1263c:	ldr	r3, [pc, #152]	; 126dc <__assert_fail@plt+0x1818>
   12640:	ldr	r0, [pc, #152]	; 126e0 <__assert_fail@plt+0x181c>
   12644:	cmp	r2, #96	; 0x60
   12648:	movne	r0, r3
   1264c:	pop	{r4, r5, r6, pc}
   12650:	cmp	r3, #71	; 0x47
   12654:	bne	1268c <__assert_fail@plt+0x17c8>
   12658:	ldrb	r3, [r0, #1]
   1265c:	bic	r3, r3, #32
   12660:	cmp	r3, #66	; 0x42
   12664:	bne	1268c <__assert_fail@plt+0x17c8>
   12668:	ldrb	r3, [r0, #2]
   1266c:	cmp	r3, #49	; 0x31
   12670:	bne	1268c <__assert_fail@plt+0x17c8>
   12674:	ldrb	r3, [r0, #3]
   12678:	cmp	r3, #56	; 0x38
   1267c:	bne	1268c <__assert_fail@plt+0x17c8>
   12680:	ldrb	r3, [r0, #4]
   12684:	cmp	r3, #48	; 0x30
   12688:	beq	126a0 <__assert_fail@plt+0x17dc>
   1268c:	ldr	r3, [pc, #80]	; 126e4 <__assert_fail@plt+0x1820>
   12690:	cmp	r5, #9
   12694:	ldr	r0, [pc, #76]	; 126e8 <__assert_fail@plt+0x1824>
   12698:	movne	r0, r3
   1269c:	pop	{r4, r5, r6, pc}
   126a0:	ldrb	r3, [r0, #5]
   126a4:	cmp	r3, #51	; 0x33
   126a8:	bne	1268c <__assert_fail@plt+0x17c8>
   126ac:	ldrb	r3, [r0, #6]
   126b0:	cmp	r3, #48	; 0x30
   126b4:	bne	1268c <__assert_fail@plt+0x17c8>
   126b8:	ldrb	r3, [r0, #7]
   126bc:	cmp	r3, #0
   126c0:	bne	1268c <__assert_fail@plt+0x17c8>
   126c4:	ldrb	r2, [r4]
   126c8:	ldr	r3, [pc, #28]	; 126ec <__assert_fail@plt+0x1828>
   126cc:	ldr	r0, [pc, #28]	; 126f0 <__assert_fail@plt+0x182c>
   126d0:	cmp	r2, #96	; 0x60
   126d4:	movne	r0, r3
   126d8:	pop	{r4, r5, r6, pc}
   126dc:	andeq	r6, r1, r4, ror #1
   126e0:	andeq	r6, r1, r0, ror #1
   126e4:	strdeq	r6, [r1], -r4
   126e8:	strdeq	r6, [r1], -r0
   126ec:	andeq	r6, r1, ip, ror #1
   126f0:	andeq	r6, r1, r8, ror #1
   126f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126f8:	sub	sp, sp, #116	; 0x74
   126fc:	mov	sl, r0
   12700:	str	r3, [sp, #24]
   12704:	mov	r3, #1
   12708:	mov	r8, r1
   1270c:	str	r2, [sp, #56]	; 0x38
   12710:	str	r3, [sp, #36]	; 0x24
   12714:	bl	10d50 <__ctype_get_mb_cur_max@plt>
   12718:	ldr	r3, [sp, #156]	; 0x9c
   1271c:	mov	fp, r8
   12720:	mov	r2, #0
   12724:	lsr	r3, r3, #1
   12728:	and	r3, r3, #1
   1272c:	str	r2, [sp, #68]	; 0x44
   12730:	str	r3, [sp, #28]
   12734:	str	r2, [sp, #40]	; 0x28
   12738:	str	r2, [sp, #44]	; 0x2c
   1273c:	str	r2, [sp, #52]	; 0x34
   12740:	str	r2, [sp, #64]	; 0x40
   12744:	str	r2, [sp, #72]	; 0x48
   12748:	str	sl, [sp, #32]
   1274c:	str	r0, [sp, #76]	; 0x4c
   12750:	ldr	r3, [sp, #152]	; 0x98
   12754:	cmp	r3, #10
   12758:	ldrls	pc, [pc, r3, lsl #2]
   1275c:	b	1391c <__assert_fail@plt+0x2a58>
   12760:	andeq	r2, r1, ip, lsl #15
   12764:	andeq	r2, r1, r4, ror sl
   12768:	muleq	r1, r8, sl
   1276c:			; <UNDEFINED> instruction: 0x00012abc
   12770:	andeq	r2, r1, r8, ror #23
   12774:			; <UNDEFINED> instruction: 0x00012bbc
   12778:	muleq	r1, r4, fp
   1277c:	ldrdeq	r2, [r1], -r0
   12780:	andeq	r2, r1, r8, ror #21
   12784:	andeq	r2, r1, r8, ror #21
   12788:	andeq	r2, r1, r8, ror #21
   1278c:	mov	r3, #0
   12790:	mov	r7, r3
   12794:	str	r3, [sp, #28]
   12798:	ldr	r3, [sp, #44]	; 0x2c
   1279c:	mov	sl, #0
   127a0:	eor	r3, r3, #1
   127a4:	str	r3, [sp, #60]	; 0x3c
   127a8:	ldr	r3, [sp, #24]
   127ac:	cmn	r3, #1
   127b0:	beq	12d14 <__assert_fail@plt+0x1e50>
   127b4:	ldr	r3, [sp, #24]
   127b8:	subs	r5, r3, sl
   127bc:	movne	r5, #1
   127c0:	cmp	r5, #0
   127c4:	beq	12d2c <__assert_fail@plt+0x1e68>
   127c8:	ldr	r3, [sp, #152]	; 0x98
   127cc:	ldr	r8, [sp, #44]	; 0x2c
   127d0:	cmp	r3, #2
   127d4:	moveq	r8, #0
   127d8:	andne	r8, r8, #1
   127dc:	ldr	r3, [sp, #52]	; 0x34
   127e0:	adds	r9, r3, #0
   127e4:	movne	r9, #1
   127e8:	ands	r6, r9, r8
   127ec:	beq	13194 <__assert_fail@plt+0x22d0>
   127f0:	ldr	r2, [sp, #52]	; 0x34
   127f4:	ldr	r1, [sp, #24]
   127f8:	cmp	r2, #1
   127fc:	mov	r3, r2
   12800:	movls	r3, #0
   12804:	movhi	r3, #1
   12808:	cmn	r1, #1
   1280c:	movne	r3, #0
   12810:	cmp	r3, #0
   12814:	add	r4, sl, r2
   12818:	beq	12828 <__assert_fail@plt+0x1964>
   1281c:	ldr	r0, [sp, #56]	; 0x38
   12820:	bl	10dd4 <strlen@plt>
   12824:	str	r0, [sp, #24]
   12828:	ldr	r3, [sp, #24]
   1282c:	cmp	r3, r4
   12830:	ldr	r3, [sp, #56]	; 0x38
   12834:	add	r3, r3, sl
   12838:	str	r3, [sp, #48]	; 0x30
   1283c:	bcc	131a0 <__assert_fail@plt+0x22dc>
   12840:	mov	r0, r3
   12844:	ldr	r2, [sp, #52]	; 0x34
   12848:	ldr	r1, [sp, #64]	; 0x40
   1284c:	bl	10cf0 <memcmp@plt>
   12850:	cmp	r0, #0
   12854:	bne	131a0 <__assert_fail@plt+0x22dc>
   12858:	ldr	r3, [sp, #28]
   1285c:	cmp	r3, #0
   12860:	bne	13a1c <__assert_fail@plt+0x2b58>
   12864:	ldr	r3, [sp, #48]	; 0x30
   12868:	ldrb	r4, [r3]
   1286c:	cmp	r4, #126	; 0x7e
   12870:	ldrls	pc, [pc, r4, lsl #2]
   12874:	b	13134 <__assert_fail@plt+0x2270>
   12878:	andeq	r2, r1, r8, asr pc
   1287c:	andeq	r3, r1, r4, lsr r1
   12880:	andeq	r3, r1, r4, lsr r1
   12884:	andeq	r3, r1, r4, lsr r1
   12888:	andeq	r3, r1, r4, lsr r1
   1288c:	andeq	r3, r1, r4, lsr r1
   12890:	andeq	r3, r1, r4, lsr r1
   12894:	andeq	r2, r1, ip, lsr pc
   12898:	andeq	r2, r1, r0, lsr #30
   1289c:	andeq	r3, r1, ip, lsl r1
   128a0:	andeq	r2, r1, r0, lsl #29
   128a4:	andeq	r2, r1, r4, ror #28
   128a8:	strdeq	r3, [r1], -r8
   128ac:	ldrdeq	r3, [r1], -r4
   128b0:	andeq	r3, r1, r4, lsr r1
   128b4:	andeq	r3, r1, r4, lsr r1
   128b8:	andeq	r3, r1, r4, lsr r1
   128bc:	andeq	r3, r1, r4, lsr r1
   128c0:	andeq	r3, r1, r4, lsr r1
   128c4:	andeq	r3, r1, r4, lsr r1
   128c8:	andeq	r3, r1, r4, lsr r1
   128cc:	andeq	r3, r1, r4, lsr r1
   128d0:	andeq	r3, r1, r4, lsr r1
   128d4:	andeq	r3, r1, r4, lsr r1
   128d8:	andeq	r3, r1, r4, lsr r1
   128dc:	andeq	r3, r1, r4, lsr r1
   128e0:	andeq	r3, r1, r4, lsr r1
   128e4:	andeq	r3, r1, r4, lsr r1
   128e8:	andeq	r3, r1, r4, lsr r1
   128ec:	andeq	r3, r1, r4, lsr r1
   128f0:	andeq	r3, r1, r4, lsr r1
   128f4:	andeq	r3, r1, r4, lsr r1
   128f8:	andeq	r3, r1, r4, lsl r1
   128fc:	andeq	r3, r1, r8, asr #32
   12900:	andeq	r3, r1, r8, asr #32
   12904:	andeq	r2, r1, r8, asr ip
   12908:	andeq	r3, r1, r8, asr #32
   1290c:	andeq	r3, r1, r0, ror #1
   12910:	andeq	r3, r1, r8, asr #32
   12914:	strheq	r3, [r1], -r4
   12918:	andeq	r3, r1, r8, asr #32
   1291c:	andeq	r3, r1, r8, asr #32
   12920:	andeq	r3, r1, r8, asr #32
   12924:	andeq	r3, r1, r0, ror #1
   12928:	andeq	r3, r1, r0, ror #1
   1292c:	andeq	r3, r1, r0, ror #1
   12930:	andeq	r3, r1, r0, ror #1
   12934:	andeq	r3, r1, r0, ror #1
   12938:	andeq	r3, r1, r0, ror #1
   1293c:	andeq	r3, r1, r0, ror #1
   12940:	andeq	r3, r1, r0, ror #1
   12944:	andeq	r3, r1, r0, ror #1
   12948:	andeq	r3, r1, r0, ror #1
   1294c:	andeq	r3, r1, r0, ror #1
   12950:	andeq	r3, r1, r0, ror #1
   12954:	andeq	r3, r1, r0, ror #1
   12958:	andeq	r3, r1, r0, ror #1
   1295c:	andeq	r3, r1, r0, ror #1
   12960:	andeq	r3, r1, r0, ror #1
   12964:	andeq	r3, r1, r8, asr #32
   12968:	andeq	r3, r1, r8, asr #32
   1296c:	andeq	r3, r1, r8, asr #32
   12970:	andeq	r3, r1, r8, asr #32
   12974:	andeq	r3, r1, r4, lsl #1
   12978:	andeq	r3, r1, r4, lsr r1
   1297c:	andeq	r3, r1, r0, ror #1
   12980:	andeq	r3, r1, r0, ror #1
   12984:	andeq	r3, r1, r0, ror #1
   12988:	andeq	r3, r1, r0, ror #1
   1298c:	andeq	r3, r1, r0, ror #1
   12990:	andeq	r3, r1, r0, ror #1
   12994:	andeq	r3, r1, r0, ror #1
   12998:	andeq	r3, r1, r0, ror #1
   1299c:	andeq	r3, r1, r0, ror #1
   129a0:	andeq	r3, r1, r0, ror #1
   129a4:	andeq	r3, r1, r0, ror #1
   129a8:	andeq	r3, r1, r0, ror #1
   129ac:	andeq	r3, r1, r0, ror #1
   129b0:	andeq	r3, r1, r0, ror #1
   129b4:	andeq	r3, r1, r0, ror #1
   129b8:	andeq	r3, r1, r0, ror #1
   129bc:	andeq	r3, r1, r0, ror #1
   129c0:	andeq	r3, r1, r0, ror #1
   129c4:	andeq	r3, r1, r0, ror #1
   129c8:	andeq	r3, r1, r0, ror #1
   129cc:	andeq	r3, r1, r0, ror #1
   129d0:	andeq	r3, r1, r0, ror #1
   129d4:	andeq	r3, r1, r0, ror #1
   129d8:	andeq	r3, r1, r0, ror #1
   129dc:	andeq	r3, r1, r0, ror #1
   129e0:	andeq	r3, r1, r0, ror #1
   129e4:	andeq	r3, r1, r8, asr #32
   129e8:	andeq	r2, r1, r4, lsr #27
   129ec:	andeq	r3, r1, r0, ror #1
   129f0:	andeq	r3, r1, r8, asr #32
   129f4:	andeq	r3, r1, r0, ror #1
   129f8:	andeq	r3, r1, r8, asr #32
   129fc:	andeq	r3, r1, r0, ror #1
   12a00:	andeq	r3, r1, r0, ror #1
   12a04:	andeq	r3, r1, r0, ror #1
   12a08:	andeq	r3, r1, r0, ror #1
   12a0c:	andeq	r3, r1, r0, ror #1
   12a10:	andeq	r3, r1, r0, ror #1
   12a14:	andeq	r3, r1, r0, ror #1
   12a18:	andeq	r3, r1, r0, ror #1
   12a1c:	andeq	r3, r1, r0, ror #1
   12a20:	andeq	r3, r1, r0, ror #1
   12a24:	andeq	r3, r1, r0, ror #1
   12a28:	andeq	r3, r1, r0, ror #1
   12a2c:	andeq	r3, r1, r0, ror #1
   12a30:	andeq	r3, r1, r0, ror #1
   12a34:	andeq	r3, r1, r0, ror #1
   12a38:	andeq	r3, r1, r0, ror #1
   12a3c:	andeq	r3, r1, r0, ror #1
   12a40:	andeq	r3, r1, r0, ror #1
   12a44:	andeq	r3, r1, r0, ror #1
   12a48:	andeq	r3, r1, r0, ror #1
   12a4c:	andeq	r3, r1, r0, ror #1
   12a50:	andeq	r3, r1, r0, ror #1
   12a54:	andeq	r3, r1, r0, ror #1
   12a58:	andeq	r3, r1, r0, ror #1
   12a5c:	andeq	r3, r1, r0, ror #1
   12a60:	andeq	r3, r1, r0, ror #1
   12a64:	andeq	r2, r1, r8, lsr ip
   12a68:	andeq	r3, r1, r8, asr #32
   12a6c:	andeq	r2, r1, r8, lsr ip
   12a70:	andeq	r2, r1, r8, asr ip
   12a74:	mov	r3, #1
   12a78:	str	r3, [sp, #28]
   12a7c:	str	r3, [sp, #52]	; 0x34
   12a80:	ldr	r3, [pc, #4000]	; 13a28 <__assert_fail@plt+0x2b64>
   12a84:	mov	r7, #0
   12a88:	str	r3, [sp, #64]	; 0x40
   12a8c:	mov	r3, #2
   12a90:	str	r3, [sp, #152]	; 0x98
   12a94:	b	12798 <__assert_fail@plt+0x18d4>
   12a98:	ldr	r3, [sp, #28]
   12a9c:	cmp	r3, #0
   12aa0:	beq	12bfc <__assert_fail@plt+0x1d38>
   12aa4:	mov	r3, #1
   12aa8:	str	r3, [sp, #52]	; 0x34
   12aac:	ldr	r3, [pc, #3956]	; 13a28 <__assert_fail@plt+0x2b64>
   12ab0:	mov	r7, #0
   12ab4:	str	r3, [sp, #64]	; 0x40
   12ab8:	b	12798 <__assert_fail@plt+0x18d4>
   12abc:	mov	r3, #1
   12ac0:	str	r3, [sp, #44]	; 0x2c
   12ac4:	str	r3, [sp, #52]	; 0x34
   12ac8:	str	r3, [sp, #28]
   12acc:	b	12a80 <__assert_fail@plt+0x1bbc>
   12ad0:	mov	r3, #0
   12ad4:	str	r3, [sp, #28]
   12ad8:	mov	r3, #1
   12adc:	str	r3, [sp, #44]	; 0x2c
   12ae0:	mov	r7, #0
   12ae4:	b	12798 <__assert_fail@plt+0x18d4>
   12ae8:	ldr	r3, [sp, #152]	; 0x98
   12aec:	cmp	r3, #10
   12af0:	beq	12b34 <__assert_fail@plt+0x1c70>
   12af4:	mov	r2, #5
   12af8:	ldr	r1, [pc, #3884]	; 13a2c <__assert_fail@plt+0x2b68>
   12afc:	mov	r0, #0
   12b00:	bl	10d08 <dcgettext@plt>
   12b04:	ldr	r2, [pc, #3872]	; 13a2c <__assert_fail@plt+0x2b68>
   12b08:	cmp	r0, r2
   12b0c:	str	r0, [sp, #164]	; 0xa4
   12b10:	beq	13b18 <__assert_fail@plt+0x2c54>
   12b14:	mov	r2, #5
   12b18:	ldr	r1, [pc, #3848]	; 13a28 <__assert_fail@plt+0x2b64>
   12b1c:	mov	r0, #0
   12b20:	bl	10d08 <dcgettext@plt>
   12b24:	ldr	r2, [pc, #3836]	; 13a28 <__assert_fail@plt+0x2b64>
   12b28:	cmp	r0, r2
   12b2c:	str	r0, [sp, #168]	; 0xa8
   12b30:	beq	13b08 <__assert_fail@plt+0x2c44>
   12b34:	ldr	r7, [sp, #28]
   12b38:	cmp	r7, #0
   12b3c:	movne	r7, #0
   12b40:	bne	12b74 <__assert_fail@plt+0x1cb0>
   12b44:	ldr	r3, [sp, #164]	; 0xa4
   12b48:	ldrb	r3, [r3]
   12b4c:	cmp	r3, #0
   12b50:	beq	13b28 <__assert_fail@plt+0x2c64>
   12b54:	ldr	r2, [sp, #164]	; 0xa4
   12b58:	ldr	r1, [sp, #32]
   12b5c:	cmp	fp, r7
   12b60:	strbhi	r3, [r1, r7]
   12b64:	ldrb	r3, [r2, #1]!
   12b68:	add	r7, r7, #1
   12b6c:	cmp	r3, #0
   12b70:	bne	12b5c <__assert_fail@plt+0x1c98>
   12b74:	ldr	r0, [sp, #168]	; 0xa8
   12b78:	bl	10dd4 <strlen@plt>
   12b7c:	ldr	r3, [sp, #168]	; 0xa8
   12b80:	str	r3, [sp, #64]	; 0x40
   12b84:	mov	r3, #1
   12b88:	str	r3, [sp, #44]	; 0x2c
   12b8c:	str	r0, [sp, #52]	; 0x34
   12b90:	b	12798 <__assert_fail@plt+0x18d4>
   12b94:	mov	r3, #1
   12b98:	str	r3, [sp, #44]	; 0x2c
   12b9c:	str	r3, [sp, #52]	; 0x34
   12ba0:	str	r3, [sp, #28]
   12ba4:	ldr	r3, [pc, #3716]	; 13a30 <__assert_fail@plt+0x2b6c>
   12ba8:	mov	r7, #0
   12bac:	str	r3, [sp, #64]	; 0x40
   12bb0:	mov	r3, #5
   12bb4:	str	r3, [sp, #152]	; 0x98
   12bb8:	b	12798 <__assert_fail@plt+0x18d4>
   12bbc:	ldr	r3, [sp, #28]
   12bc0:	cmp	r3, #0
   12bc4:	beq	138c4 <__assert_fail@plt+0x2a00>
   12bc8:	ldr	r3, [sp, #28]
   12bcc:	mov	r7, #0
   12bd0:	str	r3, [sp, #44]	; 0x2c
   12bd4:	mov	r3, #1
   12bd8:	str	r3, [sp, #52]	; 0x34
   12bdc:	ldr	r3, [pc, #3660]	; 13a30 <__assert_fail@plt+0x2b6c>
   12be0:	str	r3, [sp, #64]	; 0x40
   12be4:	b	12798 <__assert_fail@plt+0x18d4>
   12be8:	ldr	r3, [sp, #28]
   12bec:	cmp	r3, #0
   12bf0:	mov	r3, #1
   12bf4:	streq	r3, [sp, #44]	; 0x2c
   12bf8:	bne	12a7c <__assert_fail@plt+0x1bb8>
   12bfc:	cmp	fp, #0
   12c00:	beq	138f4 <__assert_fail@plt+0x2a30>
   12c04:	ldr	r3, [sp, #32]
   12c08:	mov	r2, #39	; 0x27
   12c0c:	mov	r7, #1
   12c10:	strb	r2, [r3]
   12c14:	mov	r3, #0
   12c18:	str	r3, [sp, #28]
   12c1c:	mov	r3, #1
   12c20:	str	r3, [sp, #52]	; 0x34
   12c24:	ldr	r3, [pc, #3580]	; 13a28 <__assert_fail@plt+0x2b64>
   12c28:	str	r3, [sp, #64]	; 0x40
   12c2c:	mov	r3, #2
   12c30:	str	r3, [sp, #152]	; 0x98
   12c34:	b	12798 <__assert_fail@plt+0x18d4>
   12c38:	ldr	r3, [sp, #24]
   12c3c:	cmn	r3, #1
   12c40:	beq	13858 <__assert_fail@plt+0x2994>
   12c44:	ldr	r3, [sp, #24]
   12c48:	subs	r3, r3, #1
   12c4c:	movne	r3, #1
   12c50:	cmp	r3, #0
   12c54:	bne	12c60 <__assert_fail@plt+0x1d9c>
   12c58:	cmp	sl, #0
   12c5c:	beq	1304c <__assert_fail@plt+0x2188>
   12c60:	ldr	r3, [sp, #152]	; 0x98
   12c64:	mov	r5, #0
   12c68:	sub	r2, r3, #2
   12c6c:	mov	r8, r5
   12c70:	clz	r2, r2
   12c74:	lsr	r2, r2, #5
   12c78:	ldr	r3, [sp, #60]	; 0x3c
   12c7c:	ldr	r1, [sp, #28]
   12c80:	orr	r3, r2, r3
   12c84:	eor	r3, r3, #1
   12c88:	orr	r3, r1, r3
   12c8c:	tst	r3, #255	; 0xff
   12c90:	bne	133bc <__assert_fail@plt+0x24f8>
   12c94:	cmp	r6, #0
   12c98:	bne	12de8 <__assert_fail@plt+0x1f24>
   12c9c:	ldr	r3, [sp, #40]	; 0x28
   12ca0:	eor	r8, r8, #1
   12ca4:	and	r8, r8, r3
   12ca8:	add	sl, sl, #1
   12cac:	uxtb	r6, r8
   12cb0:	cmp	r6, #0
   12cb4:	beq	12ce8 <__assert_fail@plt+0x1e24>
   12cb8:	cmp	fp, r7
   12cbc:	movhi	r2, #39	; 0x27
   12cc0:	ldrhi	r3, [sp, #32]
   12cc4:	strbhi	r2, [r3, r7]
   12cc8:	add	r3, r7, #1
   12ccc:	cmp	fp, r3
   12cd0:	movhi	r1, #39	; 0x27
   12cd4:	ldrhi	r2, [sp, #32]
   12cd8:	add	r7, r7, #2
   12cdc:	strbhi	r1, [r2, r3]
   12ce0:	mov	r3, #0
   12ce4:	str	r3, [sp, #40]	; 0x28
   12ce8:	cmp	r7, fp
   12cec:	ldrcc	r3, [sp, #32]
   12cf0:	strbcc	r4, [r3, r7]
   12cf4:	ldr	r3, [sp, #36]	; 0x24
   12cf8:	cmp	r5, #0
   12cfc:	moveq	r3, #0
   12d00:	str	r3, [sp, #36]	; 0x24
   12d04:	ldr	r3, [sp, #24]
   12d08:	add	r7, r7, #1
   12d0c:	cmn	r3, #1
   12d10:	bne	127b4 <__assert_fail@plt+0x18f0>
   12d14:	ldr	r3, [sp, #56]	; 0x38
   12d18:	ldrb	r5, [r3, sl]
   12d1c:	adds	r5, r5, #0
   12d20:	movne	r5, #1
   12d24:	cmp	r5, #0
   12d28:	bne	127c8 <__assert_fail@plt+0x1904>
   12d2c:	ldr	r3, [sp, #152]	; 0x98
   12d30:	ldr	r1, [sp, #28]
   12d34:	sub	r3, r3, #2
   12d38:	clz	r3, r3
   12d3c:	lsr	r3, r3, #5
   12d40:	and	r9, r1, r3
   12d44:	cmp	r7, #0
   12d48:	movne	r2, #0
   12d4c:	andeq	r2, r9, #1
   12d50:	cmp	r2, #0
   12d54:	bne	13730 <__assert_fail@plt+0x286c>
   12d58:	eor	r2, r1, #1
   12d5c:	ands	r3, r3, r2
   12d60:	beq	13bec <__assert_fail@plt+0x2d28>
   12d64:	ldr	r2, [sp, #68]	; 0x44
   12d68:	cmp	r2, #0
   12d6c:	beq	13bd8 <__assert_fail@plt+0x2d14>
   12d70:	ldr	r3, [sp, #36]	; 0x24
   12d74:	cmp	r3, #0
   12d78:	bne	13b90 <__assert_fail@plt+0x2ccc>
   12d7c:	ldr	r2, [sp, #72]	; 0x48
   12d80:	clz	r3, fp
   12d84:	cmp	r2, #0
   12d88:	lsr	r3, r3, #5
   12d8c:	moveq	r3, #0
   12d90:	cmp	r3, #0
   12d94:	beq	13b30 <__assert_fail@plt+0x2c6c>
   12d98:	str	r3, [sp, #68]	; 0x44
   12d9c:	ldr	fp, [sp, #72]	; 0x48
   12da0:	b	12750 <__assert_fail@plt+0x188c>
   12da4:	ldr	r3, [sp, #152]	; 0x98
   12da8:	cmp	r3, #2
   12dac:	beq	13400 <__assert_fail@plt+0x253c>
   12db0:	ldr	r3, [sp, #44]	; 0x2c
   12db4:	ldr	r2, [sp, #28]
   12db8:	and	r2, r3, r2
   12dbc:	ands	r2, r9, r2
   12dc0:	bne	1340c <__assert_fail@plt+0x2548>
   12dc4:	mov	r4, #92	; 0x5c
   12dc8:	mov	r3, r4
   12dcc:	ldr	r1, [sp, #44]	; 0x2c
   12dd0:	cmp	r1, #0
   12dd4:	moveq	r5, #0
   12dd8:	moveq	r8, r1
   12ddc:	beq	12c78 <__assert_fail@plt+0x1db4>
   12de0:	mov	r4, r3
   12de4:	mov	r5, #0
   12de8:	ldr	r3, [sp, #28]
   12dec:	cmp	r3, #0
   12df0:	bne	133f4 <__assert_fail@plt+0x2530>
   12df4:	ldr	r3, [sp, #40]	; 0x28
   12df8:	eor	r9, r3, #1
   12dfc:	and	r9, r9, r2
   12e00:	ands	r9, r9, #255	; 0xff
   12e04:	beq	12e48 <__assert_fail@plt+0x1f84>
   12e08:	cmp	fp, r7
   12e0c:	movhi	r2, #39	; 0x27
   12e10:	ldrhi	r3, [sp, #32]
   12e14:	str	r9, [sp, #40]	; 0x28
   12e18:	strbhi	r2, [r3, r7]
   12e1c:	add	r3, r7, #1
   12e20:	cmp	fp, r3
   12e24:	movhi	r1, #36	; 0x24
   12e28:	ldrhi	r2, [sp, #32]
   12e2c:	strbhi	r1, [r2, r3]
   12e30:	add	r3, r7, #2
   12e34:	cmp	fp, r3
   12e38:	add	r7, r7, #3
   12e3c:	ldrhi	r2, [sp, #32]
   12e40:	movhi	r1, #39	; 0x27
   12e44:	strbhi	r1, [r2, r3]
   12e48:	cmp	fp, r7
   12e4c:	movhi	r2, #92	; 0x5c
   12e50:	ldrhi	r3, [sp, #32]
   12e54:	add	sl, sl, #1
   12e58:	strbhi	r2, [r3, r7]
   12e5c:	add	r7, r7, #1
   12e60:	b	12ce8 <__assert_fail@plt+0x1e24>
   12e64:	ldr	r3, [sp, #152]	; 0x98
   12e68:	mov	r4, #11
   12e6c:	sub	r2, r3, #2
   12e70:	mov	r3, #118	; 0x76
   12e74:	clz	r2, r2
   12e78:	lsr	r2, r2, #5
   12e7c:	b	12dcc <__assert_fail@plt+0x1f08>
   12e80:	mov	r4, #10
   12e84:	mov	r3, #110	; 0x6e
   12e88:	ldr	r2, [sp, #152]	; 0x98
   12e8c:	ldr	r1, [sp, #28]
   12e90:	sub	r2, r2, #2
   12e94:	clz	r2, r2
   12e98:	lsr	r2, r2, #5
   12e9c:	ands	r1, r1, r2
   12ea0:	beq	12dcc <__assert_fail@plt+0x1f08>
   12ea4:	ldr	sl, [sp, #32]
   12ea8:	mov	r8, fp
   12eac:	mov	r2, r1
   12eb0:	mov	r3, #2
   12eb4:	str	r3, [sp, #152]	; 0x98
   12eb8:	ldr	r9, [sp, #44]	; 0x2c
   12ebc:	ldr	r3, [sp, #152]	; 0x98
   12ec0:	and	r9, r9, r2
   12ec4:	tst	r9, #255	; 0xff
   12ec8:	movne	r3, #4
   12ecc:	str	r3, [sp, #152]	; 0x98
   12ed0:	ldr	r3, [sp, #156]	; 0x9c
   12ed4:	mov	ip, #0
   12ed8:	bic	r3, r3, #2
   12edc:	str	r3, [sp, #4]
   12ee0:	ldr	r3, [sp, #168]	; 0xa8
   12ee4:	ldr	r2, [sp, #56]	; 0x38
   12ee8:	str	r3, [sp, #16]
   12eec:	ldr	r3, [sp, #164]	; 0xa4
   12ef0:	mov	r1, r8
   12ef4:	str	r3, [sp, #12]
   12ef8:	ldr	r3, [sp, #152]	; 0x98
   12efc:	mov	r0, sl
   12f00:	str	r3, [sp]
   12f04:	str	ip, [sp, #8]
   12f08:	ldr	r3, [sp, #24]
   12f0c:	bl	126f4 <__assert_fail@plt+0x1830>
   12f10:	mov	fp, r0
   12f14:	mov	r0, fp
   12f18:	add	sp, sp, #116	; 0x74
   12f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f20:	ldr	r3, [sp, #152]	; 0x98
   12f24:	mov	r4, #8
   12f28:	sub	r2, r3, #2
   12f2c:	mov	r3, #98	; 0x62
   12f30:	clz	r2, r2
   12f34:	lsr	r2, r2, #5
   12f38:	b	12dcc <__assert_fail@plt+0x1f08>
   12f3c:	ldr	r3, [sp, #152]	; 0x98
   12f40:	mov	r4, #7
   12f44:	sub	r2, r3, #2
   12f48:	mov	r3, #97	; 0x61
   12f4c:	clz	r2, r2
   12f50:	lsr	r2, r2, #5
   12f54:	b	12dcc <__assert_fail@plt+0x1f08>
   12f58:	ldr	r3, [sp, #44]	; 0x2c
   12f5c:	cmp	r3, #0
   12f60:	beq	13744 <__assert_fail@plt+0x2880>
   12f64:	ldr	r3, [sp, #28]
   12f68:	cmp	r3, #0
   12f6c:	bne	13a1c <__assert_fail@plt+0x2b58>
   12f70:	ldr	r3, [sp, #152]	; 0x98
   12f74:	sub	r2, r3, #2
   12f78:	ldr	r3, [sp, #40]	; 0x28
   12f7c:	clz	r2, r2
   12f80:	eor	r3, r3, #1
   12f84:	lsr	r2, r2, #5
   12f88:	ands	r3, r2, r3
   12f8c:	moveq	r1, r7
   12f90:	beq	12fd4 <__assert_fail@plt+0x2110>
   12f94:	cmp	fp, r7
   12f98:	movhi	r0, #39	; 0x27
   12f9c:	ldrhi	r1, [sp, #32]
   12fa0:	str	r3, [sp, #40]	; 0x28
   12fa4:	strbhi	r0, [r1, r7]
   12fa8:	add	r1, r7, #1
   12fac:	cmp	fp, r1
   12fb0:	movhi	ip, #36	; 0x24
   12fb4:	ldrhi	r0, [sp, #32]
   12fb8:	strbhi	ip, [r0, r1]
   12fbc:	add	r1, r7, #2
   12fc0:	cmp	fp, r1
   12fc4:	movhi	ip, #39	; 0x27
   12fc8:	ldrhi	r0, [sp, #32]
   12fcc:	strbhi	ip, [r0, r1]
   12fd0:	add	r1, r7, #3
   12fd4:	cmp	fp, r1
   12fd8:	movhi	r0, #92	; 0x5c
   12fdc:	ldrhi	r3, [sp, #32]
   12fe0:	add	r7, r1, #1
   12fe4:	strbhi	r0, [r3, r1]
   12fe8:	cmp	r8, #0
   12fec:	beq	13930 <__assert_fail@plt+0x2a6c>
   12ff0:	ldr	r0, [sp, #24]
   12ff4:	add	r3, sl, #1
   12ff8:	cmp	r3, r0
   12ffc:	bcs	1386c <__assert_fail@plt+0x29a8>
   13000:	ldr	r0, [sp, #56]	; 0x38
   13004:	ldrb	r3, [r0, r3]
   13008:	sub	r3, r3, #48	; 0x30
   1300c:	cmp	r3, #9
   13010:	bhi	1386c <__assert_fail@plt+0x29a8>
   13014:	cmp	fp, r7
   13018:	movhi	r3, #48	; 0x30
   1301c:	ldrhi	r0, [sp, #32]
   13020:	ldr	r5, [sp, #28]
   13024:	mov	r4, #48	; 0x30
   13028:	strbhi	r3, [r0, r7]
   1302c:	add	r3, r1, #2
   13030:	cmp	fp, r3
   13034:	movhi	r0, #48	; 0x30
   13038:	ldrhi	ip, [sp, #32]
   1303c:	add	r7, r1, #3
   13040:	strbhi	r0, [ip, r3]
   13044:	b	12c78 <__assert_fail@plt+0x1db4>
   13048:	mov	r5, #0
   1304c:	ldr	r3, [sp, #152]	; 0x98
   13050:	sub	r2, r3, #2
   13054:	ldr	r3, [sp, #28]
   13058:	clz	r2, r2
   1305c:	lsr	r2, r2, #5
   13060:	ands	r8, r3, r2
   13064:	beq	12c78 <__assert_fail@plt+0x1db4>
   13068:	mov	r3, r8
   1306c:	mov	r2, r3
   13070:	mov	r3, #2
   13074:	ldr	sl, [sp, #32]
   13078:	mov	r8, fp
   1307c:	str	r3, [sp, #152]	; 0x98
   13080:	b	12eb8 <__assert_fail@plt+0x1ff4>
   13084:	ldr	r3, [sp, #152]	; 0x98
   13088:	cmp	r3, #2
   1308c:	beq	137b0 <__assert_fail@plt+0x28ec>
   13090:	cmp	r3, #5
   13094:	beq	13770 <__assert_fail@plt+0x28ac>
   13098:	mov	r5, #0
   1309c:	sub	r2, r3, #2
   130a0:	mov	r8, r5
   130a4:	clz	r2, r2
   130a8:	mov	r4, #63	; 0x3f
   130ac:	lsr	r2, r2, #5
   130b0:	b	12c78 <__assert_fail@plt+0x1db4>
   130b4:	ldr	r3, [sp, #152]	; 0x98
   130b8:	cmp	r3, #2
   130bc:	beq	137d0 <__assert_fail@plt+0x290c>
   130c0:	mov	r2, #0
   130c4:	str	r5, [sp, #68]	; 0x44
   130c8:	mov	r8, r2
   130cc:	mov	r4, #39	; 0x27
   130d0:	b	12c78 <__assert_fail@plt+0x1db4>
   130d4:	mov	r4, #13
   130d8:	mov	r3, #114	; 0x72
   130dc:	b	12e88 <__assert_fail@plt+0x1fc4>
   130e0:	ldr	r3, [sp, #152]	; 0x98
   130e4:	mov	r8, #0
   130e8:	sub	r2, r3, #2
   130ec:	clz	r2, r2
   130f0:	lsr	r2, r2, #5
   130f4:	b	12c78 <__assert_fail@plt+0x1db4>
   130f8:	ldr	r3, [sp, #152]	; 0x98
   130fc:	mov	r4, #12
   13100:	sub	r2, r3, #2
   13104:	mov	r3, #102	; 0x66
   13108:	clz	r2, r2
   1310c:	lsr	r2, r2, #5
   13110:	b	12dcc <__assert_fail@plt+0x1f08>
   13114:	mov	r5, r6
   13118:	b	1304c <__assert_fail@plt+0x2188>
   1311c:	ldr	r3, [sp, #152]	; 0x98
   13120:	sub	r2, r3, #2
   13124:	mov	r3, #116	; 0x74
   13128:	clz	r2, r2
   1312c:	lsr	r2, r2, #5
   13130:	b	12dcc <__assert_fail@plt+0x1f08>
   13134:	ldr	r8, [sp, #76]	; 0x4c
   13138:	cmp	r8, #1
   1313c:	bne	135ec <__assert_fail@plt+0x2728>
   13140:	bl	10dbc <__ctype_b_loc@plt>
   13144:	sxth	r3, r4
   13148:	mov	ip, r8
   1314c:	lsl	r3, r3, #1
   13150:	ldr	r2, [r0]
   13154:	ldrh	r3, [r2, r3]
   13158:	and	r3, r3, #16384	; 0x4000
   1315c:	cmp	r3, #0
   13160:	movne	r5, #1
   13164:	moveq	r5, #0
   13168:	moveq	r3, #1
   1316c:	movne	r3, #0
   13170:	ldr	r2, [sp, #44]	; 0x2c
   13174:	and	r3, r3, r2
   13178:	ands	r8, r3, #255	; 0xff
   1317c:	bne	13480 <__assert_fail@plt+0x25bc>
   13180:	ldr	r3, [sp, #152]	; 0x98
   13184:	sub	r2, r3, #2
   13188:	clz	r2, r2
   1318c:	lsr	r2, r2, #5
   13190:	b	12c78 <__assert_fail@plt+0x1db4>
   13194:	ldr	r3, [sp, #56]	; 0x38
   13198:	add	r3, r3, sl
   1319c:	str	r3, [sp, #48]	; 0x30
   131a0:	ldr	r3, [sp, #48]	; 0x30
   131a4:	mov	r6, #0
   131a8:	ldrb	r4, [r3]
   131ac:	cmp	r4, #126	; 0x7e
   131b0:	ldrls	pc, [pc, r4, lsl #2]
   131b4:	b	13134 <__assert_fail@plt+0x2270>
   131b8:	andeq	r2, r1, r8, asr pc
   131bc:	andeq	r3, r1, r4, lsr r1
   131c0:	andeq	r3, r1, r4, lsr r1
   131c4:	andeq	r3, r1, r4, lsr r1
   131c8:	andeq	r3, r1, r4, lsr r1
   131cc:	andeq	r3, r1, r4, lsr r1
   131d0:	andeq	r3, r1, r4, lsr r1
   131d4:	andeq	r2, r1, ip, lsr pc
   131d8:	andeq	r2, r1, r0, lsr #30
   131dc:			; <UNDEFINED> instruction: 0x000133b4
   131e0:	andeq	r2, r1, r0, lsl #29
   131e4:	andeq	r2, r1, r4, ror #28
   131e8:	strdeq	r3, [r1], -r8
   131ec:	ldrdeq	r3, [r1], -r4
   131f0:	andeq	r3, r1, r4, lsr r1
   131f4:	andeq	r3, r1, r4, lsr r1
   131f8:	andeq	r3, r1, r4, lsr r1
   131fc:	andeq	r3, r1, r4, lsr r1
   13200:	andeq	r3, r1, r4, lsr r1
   13204:	andeq	r3, r1, r4, lsr r1
   13208:	andeq	r3, r1, r4, lsr r1
   1320c:	andeq	r3, r1, r4, lsr r1
   13210:	andeq	r3, r1, r4, lsr r1
   13214:	andeq	r3, r1, r4, lsr r1
   13218:	andeq	r3, r1, r4, lsr r1
   1321c:	andeq	r3, r1, r4, lsr r1
   13220:	andeq	r3, r1, r4, lsr r1
   13224:	andeq	r3, r1, r4, lsr r1
   13228:	andeq	r3, r1, r4, lsr r1
   1322c:	andeq	r3, r1, r4, lsr r1
   13230:	andeq	r3, r1, r4, lsr r1
   13234:	andeq	r3, r1, r4, lsr r1
   13238:	andeq	r3, r1, ip, asr #32
   1323c:	andeq	r3, r1, r8, asr #32
   13240:	andeq	r3, r1, r8, asr #32
   13244:	andeq	r2, r1, r8, asr ip
   13248:	andeq	r3, r1, r8, asr #32
   1324c:	andeq	r3, r1, r0, ror #1
   13250:	andeq	r3, r1, r8, asr #32
   13254:	strheq	r3, [r1], -r4
   13258:	andeq	r3, r1, r8, asr #32
   1325c:	andeq	r3, r1, r8, asr #32
   13260:	andeq	r3, r1, r8, asr #32
   13264:	andeq	r3, r1, r0, ror #1
   13268:	andeq	r3, r1, r0, ror #1
   1326c:	andeq	r3, r1, r0, ror #1
   13270:	andeq	r3, r1, r0, ror #1
   13274:	andeq	r3, r1, r0, ror #1
   13278:	andeq	r3, r1, r0, ror #1
   1327c:	andeq	r3, r1, r0, ror #1
   13280:	andeq	r3, r1, r0, ror #1
   13284:	andeq	r3, r1, r0, ror #1
   13288:	andeq	r3, r1, r0, ror #1
   1328c:	andeq	r3, r1, r0, ror #1
   13290:	andeq	r3, r1, r0, ror #1
   13294:	andeq	r3, r1, r0, ror #1
   13298:	andeq	r3, r1, r0, ror #1
   1329c:	andeq	r3, r1, r0, ror #1
   132a0:	andeq	r3, r1, r0, ror #1
   132a4:	andeq	r3, r1, r8, asr #32
   132a8:	andeq	r3, r1, r8, asr #32
   132ac:	andeq	r3, r1, r8, asr #32
   132b0:	andeq	r3, r1, r8, asr #32
   132b4:	andeq	r3, r1, r4, lsl #1
   132b8:	andeq	r3, r1, r4, lsr r1
   132bc:	andeq	r3, r1, r0, ror #1
   132c0:	andeq	r3, r1, r0, ror #1
   132c4:	andeq	r3, r1, r0, ror #1
   132c8:	andeq	r3, r1, r0, ror #1
   132cc:	andeq	r3, r1, r0, ror #1
   132d0:	andeq	r3, r1, r0, ror #1
   132d4:	andeq	r3, r1, r0, ror #1
   132d8:	andeq	r3, r1, r0, ror #1
   132dc:	andeq	r3, r1, r0, ror #1
   132e0:	andeq	r3, r1, r0, ror #1
   132e4:	andeq	r3, r1, r0, ror #1
   132e8:	andeq	r3, r1, r0, ror #1
   132ec:	andeq	r3, r1, r0, ror #1
   132f0:	andeq	r3, r1, r0, ror #1
   132f4:	andeq	r3, r1, r0, ror #1
   132f8:	andeq	r3, r1, r0, ror #1
   132fc:	andeq	r3, r1, r0, ror #1
   13300:	andeq	r3, r1, r0, ror #1
   13304:	andeq	r3, r1, r0, ror #1
   13308:	andeq	r3, r1, r0, ror #1
   1330c:	andeq	r3, r1, r0, ror #1
   13310:	andeq	r3, r1, r0, ror #1
   13314:	andeq	r3, r1, r0, ror #1
   13318:	andeq	r3, r1, r0, ror #1
   1331c:	andeq	r3, r1, r0, ror #1
   13320:	andeq	r3, r1, r0, ror #1
   13324:	andeq	r3, r1, r8, asr #32
   13328:	andeq	r2, r1, r4, lsr #27
   1332c:	andeq	r3, r1, r0, ror #1
   13330:	andeq	r3, r1, r8, asr #32
   13334:	andeq	r3, r1, r0, ror #1
   13338:	andeq	r3, r1, r8, asr #32
   1333c:	andeq	r3, r1, r0, ror #1
   13340:	andeq	r3, r1, r0, ror #1
   13344:	andeq	r3, r1, r0, ror #1
   13348:	andeq	r3, r1, r0, ror #1
   1334c:	andeq	r3, r1, r0, ror #1
   13350:	andeq	r3, r1, r0, ror #1
   13354:	andeq	r3, r1, r0, ror #1
   13358:	andeq	r3, r1, r0, ror #1
   1335c:	andeq	r3, r1, r0, ror #1
   13360:	andeq	r3, r1, r0, ror #1
   13364:	andeq	r3, r1, r0, ror #1
   13368:	andeq	r3, r1, r0, ror #1
   1336c:	andeq	r3, r1, r0, ror #1
   13370:	andeq	r3, r1, r0, ror #1
   13374:	andeq	r3, r1, r0, ror #1
   13378:	andeq	r3, r1, r0, ror #1
   1337c:	andeq	r3, r1, r0, ror #1
   13380:	andeq	r3, r1, r0, ror #1
   13384:	andeq	r3, r1, r0, ror #1
   13388:	andeq	r3, r1, r0, ror #1
   1338c:	andeq	r3, r1, r0, ror #1
   13390:	andeq	r3, r1, r0, ror #1
   13394:	andeq	r3, r1, r0, ror #1
   13398:	andeq	r3, r1, r0, ror #1
   1339c:	andeq	r3, r1, r0, ror #1
   133a0:	andeq	r3, r1, r0, ror #1
   133a4:	andeq	r2, r1, r8, lsr ip
   133a8:	andeq	r3, r1, r8, asr #32
   133ac:	andeq	r2, r1, r8, lsr ip
   133b0:	andeq	r2, r1, r8, asr ip
   133b4:	mov	r3, #116	; 0x74
   133b8:	b	12e88 <__assert_fail@plt+0x1fc4>
   133bc:	ldr	r3, [sp, #160]	; 0xa0
   133c0:	cmp	r3, #0
   133c4:	beq	12c94 <__assert_fail@plt+0x1dd0>
   133c8:	lsr	r3, r4, #5
   133cc:	ldr	r0, [sp, #160]	; 0xa0
   133d0:	uxtb	r3, r3
   133d4:	and	r1, r4, #31
   133d8:	ldr	r0, [r0, r3, lsl #2]
   133dc:	lsr	r3, r0, r1
   133e0:	tst	r3, #1
   133e4:	beq	12c94 <__assert_fail@plt+0x1dd0>
   133e8:	ldr	r3, [sp, #28]
   133ec:	cmp	r3, #0
   133f0:	beq	12df4 <__assert_fail@plt+0x1f30>
   133f4:	ldr	sl, [sp, #32]
   133f8:	mov	r8, fp
   133fc:	b	12eb8 <__assert_fail@plt+0x1ff4>
   13400:	ldr	r3, [sp, #28]
   13404:	cmp	r3, #0
   13408:	bne	1395c <__assert_fail@plt+0x2a98>
   1340c:	add	sl, sl, #1
   13410:	ldr	r6, [sp, #40]	; 0x28
   13414:	mov	r5, #0
   13418:	mov	r4, #92	; 0x5c
   1341c:	b	12cb0 <__assert_fail@plt+0x1dec>
   13420:	cmp	r9, r8
   13424:	bne	13694 <__assert_fail@plt+0x27d0>
   13428:	ldr	r0, [sp, #100]	; 0x64
   1342c:	bl	10d2c <iswprint@plt>
   13430:	add	r5, r5, r4
   13434:	cmp	r0, #0
   13438:	add	r0, sp, #104	; 0x68
   1343c:	moveq	r6, #0
   13440:	bl	10cd8 <mbsinit@plt>
   13444:	cmp	r0, #0
   13448:	beq	13628 <__assert_fail@plt+0x2764>
   1344c:	mov	r2, r6
   13450:	mov	ip, r5
   13454:	eor	r5, r2, #1
   13458:	ldr	r4, [sp, #80]	; 0x50
   1345c:	ldr	r6, [sp, #84]	; 0x54
   13460:	ldr	r7, [sp, #88]	; 0x58
   13464:	uxtb	r5, r5
   13468:	cmp	ip, #1
   1346c:	bls	1396c <__assert_fail@plt+0x2aa8>
   13470:	ldr	r3, [sp, #44]	; 0x2c
   13474:	and	r8, r3, r5
   13478:	mov	r5, r2
   1347c:	uxtb	r8, r8
   13480:	add	r2, sl, ip
   13484:	ldr	r0, [sp, #48]	; 0x30
   13488:	mov	r1, #0
   1348c:	str	r5, [sp, #48]	; 0x30
   13490:	ldr	r9, [sp, #28]
   13494:	ldr	ip, [sp, #40]	; 0x28
   13498:	ldr	r3, [sp, #32]
   1349c:	ldr	r5, [sp, #152]	; 0x98
   134a0:	b	1355c <__assert_fail@plt+0x2698>
   134a4:	cmp	r9, #0
   134a8:	bne	13880 <__assert_fail@plt+0x29bc>
   134ac:	eor	r1, ip, #1
   134b0:	cmp	r5, #2
   134b4:	movne	r1, #0
   134b8:	andeq	r1, r1, #1
   134bc:	cmp	r1, #0
   134c0:	beq	134f8 <__assert_fail@plt+0x2634>
   134c4:	cmp	fp, r7
   134c8:	movhi	ip, #39	; 0x27
   134cc:	strbhi	ip, [r3, r7]
   134d0:	add	ip, r7, #1
   134d4:	cmp	fp, ip
   134d8:	movhi	lr, #36	; 0x24
   134dc:	strbhi	lr, [r3, ip]
   134e0:	add	ip, r7, #2
   134e4:	cmp	fp, ip
   134e8:	movhi	lr, #39	; 0x27
   134ec:	strbhi	lr, [r3, ip]
   134f0:	add	r7, r7, #3
   134f4:	mov	ip, r1
   134f8:	cmp	fp, r7
   134fc:	movhi	r1, #92	; 0x5c
   13500:	strbhi	r1, [r3, r7]
   13504:	add	r1, r7, #1
   13508:	cmp	fp, r1
   1350c:	lsrhi	lr, r4, #6
   13510:	addhi	lr, lr, #48	; 0x30
   13514:	strbhi	lr, [r3, r1]
   13518:	add	lr, r7, #2
   1351c:	cmp	fp, lr
   13520:	lsrhi	r1, r4, #3
   13524:	andhi	r1, r1, #7
   13528:	addhi	r1, r1, #48	; 0x30
   1352c:	add	sl, sl, #1
   13530:	strbhi	r1, [r3, lr]
   13534:	and	r4, r4, #7
   13538:	cmp	r2, sl
   1353c:	add	r4, r4, #48	; 0x30
   13540:	add	r7, r7, #3
   13544:	bls	138a4 <__assert_fail@plt+0x29e0>
   13548:	mov	r1, r8
   1354c:	cmp	fp, r7
   13550:	strbhi	r4, [r3, r7]
   13554:	ldrb	r4, [r0, #1]!
   13558:	add	r7, r7, #1
   1355c:	cmp	r8, #0
   13560:	bne	134a4 <__assert_fail@plt+0x25e0>
   13564:	cmp	r6, #0
   13568:	bne	135b8 <__assert_fail@plt+0x26f4>
   1356c:	eor	r6, r1, #1
   13570:	and	r6, r6, ip
   13574:	add	sl, sl, #1
   13578:	cmp	r2, sl
   1357c:	uxtb	r6, r6
   13580:	bls	135e0 <__assert_fail@plt+0x271c>
   13584:	cmp	r6, #0
   13588:	beq	1354c <__assert_fail@plt+0x2688>
   1358c:	cmp	fp, r7
   13590:	movhi	ip, #39	; 0x27
   13594:	strbhi	ip, [r3, r7]
   13598:	add	ip, r7, #1
   1359c:	cmp	fp, ip
   135a0:	movhi	lr, #39	; 0x27
   135a4:	strbhi	lr, [r3, ip]
   135a8:	add	r7, r7, #2
   135ac:	mov	r6, r8
   135b0:	mov	ip, r8
   135b4:	b	1354c <__assert_fail@plt+0x2688>
   135b8:	cmp	fp, r7
   135bc:	eor	r6, r1, #1
   135c0:	movhi	lr, #92	; 0x5c
   135c4:	and	r6, r6, ip
   135c8:	add	sl, sl, #1
   135cc:	strbhi	lr, [r3, r7]
   135d0:	cmp	r2, sl
   135d4:	add	r7, r7, #1
   135d8:	uxtb	r6, r6
   135dc:	bhi	13584 <__assert_fail@plt+0x26c0>
   135e0:	str	ip, [sp, #40]	; 0x28
   135e4:	ldr	r5, [sp, #48]	; 0x30
   135e8:	b	12cb0 <__assert_fail@plt+0x1dec>
   135ec:	ldr	r3, [sp, #24]
   135f0:	cmn	r3, #1
   135f4:	mov	r3, #0
   135f8:	str	r3, [sp, #104]	; 0x68
   135fc:	str	r3, [sp, #108]	; 0x6c
   13600:	beq	13920 <__assert_fail@plt+0x2a5c>
   13604:	mov	r2, r5
   13608:	mov	r3, #0
   1360c:	str	r7, [sp, #88]	; 0x58
   13610:	ldr	r7, [sp, #152]	; 0x98
   13614:	str	r5, [sp, #92]	; 0x5c
   13618:	str	r6, [sp, #84]	; 0x54
   1361c:	mov	r5, r3
   13620:	mov	r6, r2
   13624:	str	r4, [sp, #80]	; 0x50
   13628:	ldr	r3, [sp, #56]	; 0x38
   1362c:	add	r9, sl, r5
   13630:	add	r8, r3, r9
   13634:	ldr	r3, [sp, #24]
   13638:	mov	r1, r8
   1363c:	sub	r2, r3, r9
   13640:	add	r0, sp, #100	; 0x64
   13644:	add	r3, sp, #104	; 0x68
   13648:	bl	14ff0 <__assert_fail@plt+0x412c>
   1364c:	subs	r4, r0, #0
   13650:	beq	139f8 <__assert_fail@plt+0x2b34>
   13654:	cmn	r4, #1
   13658:	beq	139d8 <__assert_fail@plt+0x2b14>
   1365c:	cmn	r4, #2
   13660:	beq	13978 <__assert_fail@plt+0x2ab4>
   13664:	ldr	r2, [sp, #28]
   13668:	cmp	r7, #2
   1366c:	movne	r2, #0
   13670:	andeq	r2, r2, #1
   13674:	cmp	r2, #0
   13678:	beq	13428 <__assert_fail@plt+0x2564>
   1367c:	cmp	r4, #1
   13680:	beq	13428 <__assert_fail@plt+0x2564>
   13684:	sub	r3, r4, #1
   13688:	add	r9, r3, r9
   1368c:	ldr	r3, [sp, #56]	; 0x38
   13690:	add	r9, r3, r9
   13694:	ldrb	r3, [r8, #1]!
   13698:	sub	r3, r3, #91	; 0x5b
   1369c:	cmp	r3, #33	; 0x21
   136a0:	ldrls	pc, [pc, r3, lsl #2]
   136a4:	b	13420 <__assert_fail@plt+0x255c>
   136a8:	andeq	r3, r1, r0, lsr r7
   136ac:	andeq	r3, r1, r0, lsr r7
   136b0:	andeq	r3, r1, r0, lsr #8
   136b4:	andeq	r3, r1, r0, lsr r7
   136b8:	andeq	r3, r1, r0, lsr #8
   136bc:	andeq	r3, r1, r0, lsr r7
   136c0:	andeq	r3, r1, r0, lsr #8
   136c4:	andeq	r3, r1, r0, lsr #8
   136c8:	andeq	r3, r1, r0, lsr #8
   136cc:	andeq	r3, r1, r0, lsr #8
   136d0:	andeq	r3, r1, r0, lsr #8
   136d4:	andeq	r3, r1, r0, lsr #8
   136d8:	andeq	r3, r1, r0, lsr #8
   136dc:	andeq	r3, r1, r0, lsr #8
   136e0:	andeq	r3, r1, r0, lsr #8
   136e4:	andeq	r3, r1, r0, lsr #8
   136e8:	andeq	r3, r1, r0, lsr #8
   136ec:	andeq	r3, r1, r0, lsr #8
   136f0:	andeq	r3, r1, r0, lsr #8
   136f4:	andeq	r3, r1, r0, lsr #8
   136f8:	andeq	r3, r1, r0, lsr #8
   136fc:	andeq	r3, r1, r0, lsr #8
   13700:	andeq	r3, r1, r0, lsr #8
   13704:	andeq	r3, r1, r0, lsr #8
   13708:	andeq	r3, r1, r0, lsr #8
   1370c:	andeq	r3, r1, r0, lsr #8
   13710:	andeq	r3, r1, r0, lsr #8
   13714:	andeq	r3, r1, r0, lsr #8
   13718:	andeq	r3, r1, r0, lsr #8
   1371c:	andeq	r3, r1, r0, lsr #8
   13720:	andeq	r3, r1, r0, lsr #8
   13724:	andeq	r3, r1, r0, lsr #8
   13728:	andeq	r3, r1, r0, lsr #8
   1372c:	andeq	r3, r1, r0, lsr r7
   13730:	mov	r3, #2
   13734:	ldr	sl, [sp, #32]
   13738:	mov	r8, fp
   1373c:	str	r3, [sp, #152]	; 0x98
   13740:	b	12eb8 <__assert_fail@plt+0x1ff4>
   13744:	ldr	r3, [sp, #156]	; 0x9c
   13748:	tst	r3, #1
   1374c:	bne	13878 <__assert_fail@plt+0x29b4>
   13750:	ldr	r3, [sp, #152]	; 0x98
   13754:	ldr	r4, [sp, #44]	; 0x2c
   13758:	sub	r2, r3, #2
   1375c:	mov	r5, #0
   13760:	clz	r2, r2
   13764:	mov	r8, r4
   13768:	lsr	r2, r2, #5
   1376c:	b	12c78 <__assert_fail@plt+0x1db4>
   13770:	ldr	r3, [sp, #156]	; 0x9c
   13774:	ands	r9, r3, #4
   13778:	beq	138b0 <__assert_fail@plt+0x29ec>
   1377c:	ldr	r2, [sp, #24]
   13780:	add	r3, sl, #2
   13784:	cmp	r3, r2
   13788:	bcs	1379c <__assert_fail@plt+0x28d8>
   1378c:	ldr	r2, [sp, #48]	; 0x30
   13790:	ldrb	r4, [r2, #1]
   13794:	cmp	r4, #63	; 0x3f
   13798:	beq	13a38 <__assert_fail@plt+0x2b74>
   1379c:	mov	r2, #0
   137a0:	mov	r8, r2
   137a4:	mov	r5, r2
   137a8:	mov	r4, #63	; 0x3f
   137ac:	b	12c78 <__assert_fail@plt+0x1db4>
   137b0:	ldr	r3, [sp, #28]
   137b4:	cmp	r3, #0
   137b8:	bne	13adc <__assert_fail@plt+0x2c18>
   137bc:	mov	r2, r5
   137c0:	mov	r8, r3
   137c4:	mov	r5, #0
   137c8:	mov	r4, #63	; 0x3f
   137cc:	b	12c78 <__assert_fail@plt+0x1db4>
   137d0:	ldr	r3, [sp, #28]
   137d4:	cmp	r3, #0
   137d8:	bne	13adc <__assert_fail@plt+0x2c18>
   137dc:	ldr	r2, [sp, #72]	; 0x48
   137e0:	adds	r3, fp, #0
   137e4:	movne	r3, #1
   137e8:	cmp	r2, #0
   137ec:	movne	r3, #0
   137f0:	cmp	r3, #0
   137f4:	strne	fp, [sp, #72]	; 0x48
   137f8:	movne	fp, #0
   137fc:	bne	13838 <__assert_fail@plt+0x2974>
   13800:	cmp	fp, r7
   13804:	movhi	r2, #39	; 0x27
   13808:	ldrhi	r3, [sp, #32]
   1380c:	strbhi	r2, [r3, r7]
   13810:	add	r3, r7, #1
   13814:	cmp	fp, r3
   13818:	movhi	r1, #92	; 0x5c
   1381c:	ldrhi	r2, [sp, #32]
   13820:	strbhi	r1, [r2, r3]
   13824:	add	r3, r7, #2
   13828:	cmp	fp, r3
   1382c:	movhi	r1, #39	; 0x27
   13830:	ldrhi	r2, [sp, #32]
   13834:	strbhi	r1, [r2, r3]
   13838:	ldr	r3, [sp, #28]
   1383c:	add	r7, r7, #3
   13840:	mov	r2, r5
   13844:	mov	r8, r3
   13848:	str	r5, [sp, #68]	; 0x44
   1384c:	str	r3, [sp, #40]	; 0x28
   13850:	mov	r4, #39	; 0x27
   13854:	b	12c78 <__assert_fail@plt+0x1db4>
   13858:	ldr	r3, [sp, #56]	; 0x38
   1385c:	ldrb	r3, [r3, #1]
   13860:	adds	r3, r3, #0
   13864:	movne	r3, #1
   13868:	b	12c50 <__assert_fail@plt+0x1d8c>
   1386c:	ldr	r5, [sp, #28]
   13870:	mov	r4, #48	; 0x30
   13874:	b	12c78 <__assert_fail@plt+0x1db4>
   13878:	add	sl, sl, #1
   1387c:	b	127a8 <__assert_fail@plt+0x18e4>
   13880:	mov	sl, r3
   13884:	ldr	r3, [sp, #28]
   13888:	mov	r8, fp
   1388c:	str	r3, [sp, #44]	; 0x2c
   13890:	ldr	r3, [sp, #152]	; 0x98
   13894:	sub	r2, r3, #2
   13898:	clz	r2, r2
   1389c:	lsr	r2, r2, #5
   138a0:	b	12eb8 <__assert_fail@plt+0x1ff4>
   138a4:	str	ip, [sp, #40]	; 0x28
   138a8:	ldr	r5, [sp, #48]	; 0x30
   138ac:	b	12ce8 <__assert_fail@plt+0x1e24>
   138b0:	mov	r2, r9
   138b4:	mov	r8, r9
   138b8:	mov	r5, #0
   138bc:	mov	r4, #63	; 0x3f
   138c0:	b	12c78 <__assert_fail@plt+0x1db4>
   138c4:	cmp	fp, #0
   138c8:	beq	13940 <__assert_fail@plt+0x2a7c>
   138cc:	ldr	r1, [sp, #32]
   138d0:	mov	r3, #34	; 0x22
   138d4:	mov	r2, #1
   138d8:	strb	r3, [r1]
   138dc:	ldr	r3, [pc, #332]	; 13a30 <__assert_fail@plt+0x2b6c>
   138e0:	str	r2, [sp, #52]	; 0x34
   138e4:	mov	r7, r2
   138e8:	str	r2, [sp, #44]	; 0x2c
   138ec:	str	r3, [sp, #64]	; 0x40
   138f0:	b	12798 <__assert_fail@plt+0x18d4>
   138f4:	ldr	r3, [pc, #300]	; 13a28 <__assert_fail@plt+0x2b64>
   138f8:	str	r3, [sp, #64]	; 0x40
   138fc:	mov	r3, #0
   13900:	str	r3, [sp, #28]
   13904:	mov	r3, #1
   13908:	str	r3, [sp, #52]	; 0x34
   1390c:	mov	r7, r3
   13910:	mov	r3, #2
   13914:	str	r3, [sp, #152]	; 0x98
   13918:	b	12798 <__assert_fail@plt+0x18d4>
   1391c:	bl	10eac <abort@plt>
   13920:	ldr	r0, [sp, #56]	; 0x38
   13924:	bl	10dd4 <strlen@plt>
   13928:	str	r0, [sp, #24]
   1392c:	b	13604 <__assert_fail@plt+0x2740>
   13930:	mov	r5, r8
   13934:	mov	r4, #48	; 0x30
   13938:	ldr	r8, [sp, #44]	; 0x2c
   1393c:	b	12c78 <__assert_fail@plt+0x1db4>
   13940:	mov	r3, #1
   13944:	str	r3, [sp, #52]	; 0x34
   13948:	mov	r7, r3
   1394c:	str	r3, [sp, #44]	; 0x2c
   13950:	ldr	r3, [pc, #216]	; 13a30 <__assert_fail@plt+0x2b6c>
   13954:	str	r3, [sp, #64]	; 0x40
   13958:	b	12798 <__assert_fail@plt+0x18d4>
   1395c:	ldr	sl, [sp, #32]
   13960:	mov	r8, fp
   13964:	mov	r2, r3
   13968:	b	12eb8 <__assert_fail@plt+0x1ff4>
   1396c:	mov	r3, r5
   13970:	mov	r5, r2
   13974:	b	13170 <__assert_fail@plt+0x22ac>
   13978:	ldr	r1, [sp, #24]
   1397c:	mov	r2, r5
   13980:	cmp	r1, r9
   13984:	mov	ip, r5
   13988:	ldr	r4, [sp, #80]	; 0x50
   1398c:	ldr	r5, [sp, #92]	; 0x5c
   13990:	ldr	r6, [sp, #84]	; 0x54
   13994:	ldr	r7, [sp, #88]	; 0x58
   13998:	bls	139cc <__assert_fail@plt+0x2b08>
   1399c:	ldrb	r3, [r8]
   139a0:	cmp	r3, #0
   139a4:	bne	139b8 <__assert_fail@plt+0x2af4>
   139a8:	b	139d0 <__assert_fail@plt+0x2b0c>
   139ac:	ldrb	r3, [r8, #1]!
   139b0:	cmp	r3, #0
   139b4:	beq	13ad0 <__assert_fail@plt+0x2c0c>
   139b8:	add	r2, r2, #1
   139bc:	add	r3, sl, r2
   139c0:	cmp	r1, r3
   139c4:	bhi	139ac <__assert_fail@plt+0x2ae8>
   139c8:	mov	ip, r2
   139cc:	mov	r3, #0
   139d0:	mov	r2, r3
   139d4:	b	13468 <__assert_fail@plt+0x25a4>
   139d8:	mov	r3, #0
   139dc:	mov	ip, r5
   139e0:	ldr	r4, [sp, #80]	; 0x50
   139e4:	ldr	r5, [sp, #92]	; 0x5c
   139e8:	ldr	r6, [sp, #84]	; 0x54
   139ec:	ldr	r7, [sp, #88]	; 0x58
   139f0:	mov	r2, r3
   139f4:	b	13468 <__assert_fail@plt+0x25a4>
   139f8:	mov	r3, r6
   139fc:	mov	ip, r5
   13a00:	eor	r5, r3, #1
   13a04:	mov	r2, r6
   13a08:	ldr	r4, [sp, #80]	; 0x50
   13a0c:	ldr	r6, [sp, #84]	; 0x54
   13a10:	ldr	r7, [sp, #88]	; 0x58
   13a14:	uxtb	r5, r5
   13a18:	b	13468 <__assert_fail@plt+0x25a4>
   13a1c:	ldr	sl, [sp, #32]
   13a20:	mov	r8, fp
   13a24:	b	1388c <__assert_fail@plt+0x29c8>
   13a28:	strdeq	r6, [r1], -r4
   13a2c:	strdeq	r6, [r1], -r8
   13a30:	strdeq	r6, [r1], -r0
   13a34:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13a38:	ldr	r2, [sp, #56]	; 0x38
   13a3c:	ldrb	r1, [r2, r3]
   13a40:	sub	r2, r1, #33	; 0x21
   13a44:	uxtb	r2, r2
   13a48:	cmp	r2, #29
   13a4c:	bhi	13aec <__assert_fail@plt+0x2c28>
   13a50:	ldr	r0, [pc, #-36]	; 13a34 <__assert_fail@plt+0x2b70>
   13a54:	mov	ip, #1
   13a58:	ands	r2, r0, ip, lsl r2
   13a5c:	beq	13afc <__assert_fail@plt+0x2c38>
   13a60:	ldr	r2, [sp, #28]
   13a64:	cmp	r2, #0
   13a68:	bne	13bfc <__assert_fail@plt+0x2d38>
   13a6c:	cmp	fp, r7
   13a70:	ldr	r8, [sp, #28]
   13a74:	ldrhi	r2, [sp, #32]
   13a78:	mov	sl, r3
   13a7c:	mov	r5, r8
   13a80:	strbhi	r4, [r2, r7]
   13a84:	add	r2, r7, #1
   13a88:	cmp	fp, r2
   13a8c:	movhi	r0, #34	; 0x22
   13a90:	ldrhi	ip, [sp, #32]
   13a94:	mov	r4, r1
   13a98:	strbhi	r0, [ip, r2]
   13a9c:	add	r2, r7, #2
   13aa0:	cmp	fp, r2
   13aa4:	movhi	r0, #34	; 0x22
   13aa8:	ldrhi	ip, [sp, #32]
   13aac:	strbhi	r0, [ip, r2]
   13ab0:	add	r2, r7, #3
   13ab4:	cmp	fp, r2
   13ab8:	movhi	r0, #63	; 0x3f
   13abc:	ldrhi	ip, [sp, #32]
   13ac0:	add	r7, r7, #4
   13ac4:	strbhi	r0, [ip, r2]
   13ac8:	mov	r2, r8
   13acc:	b	12c78 <__assert_fail@plt+0x1db4>
   13ad0:	mov	ip, r2
   13ad4:	mov	r2, r3
   13ad8:	b	13468 <__assert_fail@plt+0x25a4>
   13adc:	ldr	sl, [sp, #32]
   13ae0:	mov	r8, fp
   13ae4:	ldr	r2, [sp, #28]
   13ae8:	b	12eb8 <__assert_fail@plt+0x1ff4>
   13aec:	mov	r2, #0
   13af0:	mov	r8, r2
   13af4:	mov	r5, r2
   13af8:	b	12c78 <__assert_fail@plt+0x1db4>
   13afc:	mov	r8, r2
   13b00:	mov	r5, #0
   13b04:	b	12c78 <__assert_fail@plt+0x1db4>
   13b08:	ldr	r1, [sp, #152]	; 0x98
   13b0c:	bl	125d4 <__assert_fail@plt+0x1710>
   13b10:	str	r0, [sp, #168]	; 0xa8
   13b14:	b	12b34 <__assert_fail@plt+0x1c70>
   13b18:	ldr	r1, [sp, #152]	; 0x98
   13b1c:	bl	125d4 <__assert_fail@plt+0x1710>
   13b20:	str	r0, [sp, #164]	; 0xa4
   13b24:	b	12b14 <__assert_fail@plt+0x1c50>
   13b28:	ldr	r7, [sp, #28]
   13b2c:	b	12b74 <__assert_fail@plt+0x1cb0>
   13b30:	ldr	sl, [sp, #32]
   13b34:	ldr	r2, [sp, #68]	; 0x44
   13b38:	mov	r8, fp
   13b3c:	mov	fp, r7
   13b40:	ldr	r3, [sp, #64]	; 0x40
   13b44:	cmp	r3, #0
   13b48:	moveq	r2, #0
   13b4c:	andne	r2, r2, #1
   13b50:	cmp	r2, #0
   13b54:	beq	13b80 <__assert_fail@plt+0x2cbc>
   13b58:	mov	r2, r3
   13b5c:	ldrb	r3, [r3]
   13b60:	cmp	r3, #0
   13b64:	beq	13b80 <__assert_fail@plt+0x2cbc>
   13b68:	cmp	r8, fp
   13b6c:	strbhi	r3, [sl, fp]
   13b70:	ldrb	r3, [r2, #1]!
   13b74:	add	fp, fp, #1
   13b78:	cmp	r3, #0
   13b7c:	bne	13b68 <__assert_fail@plt+0x2ca4>
   13b80:	cmp	r8, fp
   13b84:	movhi	r3, #0
   13b88:	strbhi	r3, [sl, fp]
   13b8c:	b	12f14 <__assert_fail@plt+0x2050>
   13b90:	ldr	r3, [sp, #168]	; 0xa8
   13b94:	ldr	sl, [sp, #32]
   13b98:	str	r3, [sp, #16]
   13b9c:	ldr	r3, [sp, #164]	; 0xa4
   13ba0:	mov	ip, #5
   13ba4:	str	r3, [sp, #12]
   13ba8:	ldr	r3, [sp, #160]	; 0xa0
   13bac:	ldr	r2, [sp, #56]	; 0x38
   13bb0:	str	r3, [sp, #8]
   13bb4:	ldr	r3, [sp, #156]	; 0x9c
   13bb8:	ldr	r1, [sp, #72]	; 0x48
   13bbc:	str	r3, [sp, #4]
   13bc0:	mov	r0, sl
   13bc4:	ldr	r3, [sp, #24]
   13bc8:	str	ip, [sp]
   13bcc:	bl	126f4 <__assert_fail@plt+0x1830>
   13bd0:	mov	fp, r0
   13bd4:	b	12f14 <__assert_fail@plt+0x2050>
   13bd8:	mov	r8, fp
   13bdc:	ldr	sl, [sp, #32]
   13be0:	mov	fp, r7
   13be4:	mov	r2, r3
   13be8:	b	13b40 <__assert_fail@plt+0x2c7c>
   13bec:	mov	r8, fp
   13bf0:	ldr	sl, [sp, #32]
   13bf4:	mov	fp, r7
   13bf8:	b	13b40 <__assert_fail@plt+0x2c7c>
   13bfc:	ldr	sl, [sp, #32]
   13c00:	mov	r8, fp
   13c04:	b	12ed0 <__assert_fail@plt+0x200c>
   13c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c0c:	sub	sp, sp, #52	; 0x34
   13c10:	mov	r4, r0
   13c14:	mov	r5, r3
   13c18:	mov	sl, r1
   13c1c:	mov	fp, r2
   13c20:	bl	10de0 <__errno_location@plt>
   13c24:	ldr	r7, [pc, #412]	; 13dc8 <__assert_fail@plt+0x2f04>
   13c28:	cmn	r4, #-2147483647	; 0x80000001
   13c2c:	ldr	r6, [r7]
   13c30:	mov	r8, r0
   13c34:	movne	r0, #0
   13c38:	moveq	r0, #1
   13c3c:	ldr	r3, [r8]
   13c40:	orrs	r0, r0, r4, lsr #31
   13c44:	str	r3, [sp, #24]
   13c48:	bne	13dc4 <__assert_fail@plt+0x2f00>
   13c4c:	ldr	r2, [r7, #4]
   13c50:	cmp	r4, r2
   13c54:	blt	13cb4 <__assert_fail@plt+0x2df0>
   13c58:	add	r9, r7, #8
   13c5c:	cmp	r6, r9
   13c60:	str	r2, [sp, #44]	; 0x2c
   13c64:	beq	13d94 <__assert_fail@plt+0x2ed0>
   13c68:	mov	r3, #8
   13c6c:	sub	r2, r4, r2
   13c70:	mov	r0, r6
   13c74:	str	r3, [sp]
   13c78:	add	r2, r2, #1
   13c7c:	mvn	r3, #-2147483648	; 0x80000000
   13c80:	add	r1, sp, #44	; 0x2c
   13c84:	bl	14a74 <__assert_fail@plt+0x3bb0>
   13c88:	mov	r6, r0
   13c8c:	str	r0, [r7]
   13c90:	ldr	r0, [r7, #4]
   13c94:	ldr	r2, [sp, #44]	; 0x2c
   13c98:	mov	r1, #0
   13c9c:	sub	r2, r2, r0
   13ca0:	add	r0, r6, r0, lsl #3
   13ca4:	lsl	r2, r2, #3
   13ca8:	bl	10df8 <memset@plt>
   13cac:	ldr	r3, [sp, #44]	; 0x2c
   13cb0:	str	r3, [r7, #4]
   13cb4:	add	r3, r6, r4, lsl #3
   13cb8:	ldr	r1, [r5, #4]
   13cbc:	ldr	r7, [r3, #4]
   13cc0:	ldr	r9, [r6, r4, lsl #3]
   13cc4:	ldr	r2, [r5, #40]	; 0x28
   13cc8:	ldr	ip, [r5, #44]	; 0x2c
   13ccc:	add	r0, r5, #8
   13cd0:	str	r3, [sp, #28]
   13cd4:	ldr	r3, [r5]
   13cd8:	orr	r1, r1, #1
   13cdc:	mov	lr, r0
   13ce0:	str	r1, [sp, #32]
   13ce4:	str	r0, [sp, #36]	; 0x24
   13ce8:	str	r1, [sp, #4]
   13cec:	str	r2, [sp, #12]
   13cf0:	str	r3, [sp]
   13cf4:	mov	r0, r7
   13cf8:	mov	r1, r9
   13cfc:	str	ip, [sp, #16]
   13d00:	str	lr, [sp, #8]
   13d04:	mov	r3, fp
   13d08:	mov	r2, sl
   13d0c:	bl	126f4 <__assert_fail@plt+0x1830>
   13d10:	cmp	r9, r0
   13d14:	bhi	13d80 <__assert_fail@plt+0x2ebc>
   13d18:	ldr	r3, [pc, #172]	; 13dcc <__assert_fail@plt+0x2f08>
   13d1c:	add	r9, r0, #1
   13d20:	cmp	r7, r3
   13d24:	str	r9, [r6, r4, lsl #3]
   13d28:	beq	13d34 <__assert_fail@plt+0x2e70>
   13d2c:	mov	r0, r7
   13d30:	bl	123f8 <__assert_fail@plt+0x1534>
   13d34:	mov	r0, r9
   13d38:	bl	14910 <__assert_fail@plt+0x3a4c>
   13d3c:	ldr	lr, [sp, #28]
   13d40:	ldr	ip, [r5, #44]	; 0x2c
   13d44:	ldr	r4, [r5, #40]	; 0x28
   13d48:	mov	r3, fp
   13d4c:	mov	r2, sl
   13d50:	mov	r1, r9
   13d54:	str	r0, [lr, #4]
   13d58:	ldr	lr, [r5]
   13d5c:	ldr	r5, [sp, #36]	; 0x24
   13d60:	str	ip, [sp, #16]
   13d64:	str	r5, [sp, #8]
   13d68:	ldr	r5, [sp, #32]
   13d6c:	str	r4, [sp, #12]
   13d70:	str	r5, [sp, #4]
   13d74:	str	lr, [sp]
   13d78:	mov	r7, r0
   13d7c:	bl	126f4 <__assert_fail@plt+0x1830>
   13d80:	ldr	r3, [sp, #24]
   13d84:	mov	r0, r7
   13d88:	str	r3, [r8]
   13d8c:	add	sp, sp, #52	; 0x34
   13d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d94:	mov	r3, #8
   13d98:	sub	r2, r4, r2
   13d9c:	str	r3, [sp]
   13da0:	add	r1, sp, #44	; 0x2c
   13da4:	add	r2, r2, #1
   13da8:	mvn	r3, #-2147483648	; 0x80000000
   13dac:	bl	14a74 <__assert_fail@plt+0x3bb0>
   13db0:	mov	r6, r0
   13db4:	ldm	r9, {r0, r1}
   13db8:	str	r6, [r7]
   13dbc:	stm	r6, {r0, r1}
   13dc0:	b	13c90 <__assert_fail@plt+0x2dcc>
   13dc4:	bl	10eac <abort@plt>
   13dc8:	strdeq	r7, [r2], -r4
   13dcc:	andeq	r7, r2, r8, lsr #3
   13dd0:	push	{r4, r5, r6, lr}
   13dd4:	mov	r5, r0
   13dd8:	bl	10de0 <__errno_location@plt>
   13ddc:	cmp	r5, #0
   13de0:	mov	r1, #48	; 0x30
   13de4:	mov	r4, r0
   13de8:	ldr	r0, [pc, #16]	; 13e00 <__assert_fail@plt+0x2f3c>
   13dec:	ldr	r6, [r4]
   13df0:	movne	r0, r5
   13df4:	bl	14d70 <__assert_fail@plt+0x3eac>
   13df8:	str	r6, [r4]
   13dfc:	pop	{r4, r5, r6, pc}
   13e00:	andeq	r7, r2, r8, lsr #5
   13e04:	ldr	r3, [pc, #12]	; 13e18 <__assert_fail@plt+0x2f54>
   13e08:	cmp	r0, #0
   13e0c:	moveq	r0, r3
   13e10:	ldr	r0, [r0]
   13e14:	bx	lr
   13e18:	andeq	r7, r2, r8, lsr #5
   13e1c:	ldr	r3, [pc, #12]	; 13e30 <__assert_fail@plt+0x2f6c>
   13e20:	cmp	r0, #0
   13e24:	moveq	r0, r3
   13e28:	str	r1, [r0]
   13e2c:	bx	lr
   13e30:	andeq	r7, r2, r8, lsr #5
   13e34:	ldr	r3, [pc, #52]	; 13e70 <__assert_fail@plt+0x2fac>
   13e38:	cmp	r0, #0
   13e3c:	moveq	r0, r3
   13e40:	add	r3, r0, #8
   13e44:	push	{lr}		; (str lr, [sp, #-4]!)
   13e48:	lsr	lr, r1, #5
   13e4c:	and	r1, r1, #31
   13e50:	ldr	ip, [r3, lr, lsl #2]
   13e54:	lsr	r0, ip, r1
   13e58:	eor	r2, r2, r0
   13e5c:	and	r2, r2, #1
   13e60:	and	r0, r0, #1
   13e64:	eor	r1, ip, r2, lsl r1
   13e68:	str	r1, [r3, lr, lsl #2]
   13e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e70:	andeq	r7, r2, r8, lsr #5
   13e74:	ldr	r3, [pc, #16]	; 13e8c <__assert_fail@plt+0x2fc8>
   13e78:	cmp	r0, #0
   13e7c:	movne	r3, r0
   13e80:	ldr	r0, [r3, #4]
   13e84:	str	r1, [r3, #4]
   13e88:	bx	lr
   13e8c:	andeq	r7, r2, r8, lsr #5
   13e90:	ldr	r3, [pc, #44]	; 13ec4 <__assert_fail@plt+0x3000>
   13e94:	cmp	r0, #0
   13e98:	moveq	r0, r3
   13e9c:	mov	ip, #10
   13ea0:	cmp	r2, #0
   13ea4:	cmpne	r1, #0
   13ea8:	str	ip, [r0]
   13eac:	beq	13ebc <__assert_fail@plt+0x2ff8>
   13eb0:	str	r1, [r0, #40]	; 0x28
   13eb4:	str	r2, [r0, #44]	; 0x2c
   13eb8:	bx	lr
   13ebc:	push	{r4, lr}
   13ec0:	bl	10eac <abort@plt>
   13ec4:	andeq	r7, r2, r8, lsr #5
   13ec8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ecc:	sub	sp, sp, #24
   13ed0:	ldr	ip, [pc, #108]	; 13f44 <__assert_fail@plt+0x3080>
   13ed4:	ldr	r4, [sp, #56]	; 0x38
   13ed8:	mov	r9, r2
   13edc:	cmp	r4, #0
   13ee0:	moveq	r4, ip
   13ee4:	mov	sl, r3
   13ee8:	mov	r7, r0
   13eec:	mov	r8, r1
   13ef0:	bl	10de0 <__errno_location@plt>
   13ef4:	ldr	r3, [r4, #44]	; 0x2c
   13ef8:	mov	r1, r8
   13efc:	ldr	r6, [r0]
   13f00:	str	r3, [sp, #16]
   13f04:	ldr	r2, [r4, #40]	; 0x28
   13f08:	add	r3, r4, #8
   13f0c:	str	r3, [sp, #8]
   13f10:	str	r2, [sp, #12]
   13f14:	ldr	r2, [r4, #4]
   13f18:	mov	r5, r0
   13f1c:	str	r2, [sp, #4]
   13f20:	ldr	ip, [r4]
   13f24:	mov	r3, sl
   13f28:	mov	r2, r9
   13f2c:	mov	r0, r7
   13f30:	str	ip, [sp]
   13f34:	bl	126f4 <__assert_fail@plt+0x1830>
   13f38:	str	r6, [r5]
   13f3c:	add	sp, sp, #24
   13f40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f44:	andeq	r7, r2, r8, lsr #5
   13f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f4c:	cmp	r3, #0
   13f50:	sub	sp, sp, #44	; 0x2c
   13f54:	ldr	r4, [pc, #192]	; 1401c <__assert_fail@plt+0x3158>
   13f58:	mov	r6, r2
   13f5c:	movne	r4, r3
   13f60:	mov	r9, r1
   13f64:	mov	r8, r0
   13f68:	bl	10de0 <__errno_location@plt>
   13f6c:	ldr	r3, [r4, #44]	; 0x2c
   13f70:	ldr	r5, [r4, #4]
   13f74:	add	sl, r4, #8
   13f78:	cmp	r6, #0
   13f7c:	orreq	r5, r5, #1
   13f80:	mov	r1, #0
   13f84:	ldr	r2, [r0]
   13f88:	str	r3, [sp, #16]
   13f8c:	ldr	r3, [r4, #40]	; 0x28
   13f90:	stmib	sp, {r5, sl}
   13f94:	str	r3, [sp, #12]
   13f98:	ldr	r3, [r4]
   13f9c:	mov	r7, r0
   13fa0:	str	r2, [sp, #28]
   13fa4:	str	r3, [sp]
   13fa8:	mov	r2, r8
   13fac:	mov	r3, r9
   13fb0:	mov	r0, r1
   13fb4:	bl	126f4 <__assert_fail@plt+0x1830>
   13fb8:	add	r1, r0, #1
   13fbc:	mov	fp, r0
   13fc0:	mov	r0, r1
   13fc4:	str	r1, [sp, #36]	; 0x24
   13fc8:	bl	14910 <__assert_fail@plt+0x3a4c>
   13fcc:	ldr	r3, [r4, #44]	; 0x2c
   13fd0:	mov	r2, r8
   13fd4:	str	r3, [sp, #16]
   13fd8:	ldr	r3, [r4, #40]	; 0x28
   13fdc:	str	r5, [sp, #4]
   13fe0:	str	r3, [sp, #12]
   13fe4:	str	sl, [sp, #8]
   13fe8:	ldr	ip, [r4]
   13fec:	ldr	r1, [sp, #36]	; 0x24
   13ff0:	mov	r3, r9
   13ff4:	str	ip, [sp]
   13ff8:	str	r0, [sp, #32]
   13ffc:	bl	126f4 <__assert_fail@plt+0x1830>
   14000:	ldr	r2, [sp, #28]
   14004:	cmp	r6, #0
   14008:	str	r2, [r7]
   1400c:	ldr	r0, [sp, #32]
   14010:	strne	fp, [r6]
   14014:	add	sp, sp, #44	; 0x2c
   14018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1401c:	andeq	r7, r2, r8, lsr #5
   14020:	mov	r3, r2
   14024:	mov	r2, #0
   14028:	b	13f48 <__assert_fail@plt+0x3084>
   1402c:	push	{r4, r5, r6, r7, r8, lr}
   14030:	ldr	r6, [pc, #116]	; 140ac <__assert_fail@plt+0x31e8>
   14034:	ldr	r3, [r6, #4]
   14038:	ldr	r7, [r6]
   1403c:	cmp	r3, #1
   14040:	movgt	r5, r7
   14044:	movgt	r4, #1
   14048:	ble	14068 <__assert_fail@plt+0x31a4>
   1404c:	ldr	r0, [r5, #12]
   14050:	bl	123f8 <__assert_fail@plt+0x1534>
   14054:	ldr	r3, [r6, #4]
   14058:	add	r4, r4, #1
   1405c:	cmp	r3, r4
   14060:	add	r5, r5, #8
   14064:	bgt	1404c <__assert_fail@plt+0x3188>
   14068:	ldr	r0, [r7, #4]
   1406c:	ldr	r4, [pc, #60]	; 140b0 <__assert_fail@plt+0x31ec>
   14070:	cmp	r0, r4
   14074:	beq	14088 <__assert_fail@plt+0x31c4>
   14078:	bl	123f8 <__assert_fail@plt+0x1534>
   1407c:	mov	r3, #256	; 0x100
   14080:	str	r4, [r6, #12]
   14084:	str	r3, [r6, #8]
   14088:	ldr	r4, [pc, #36]	; 140b4 <__assert_fail@plt+0x31f0>
   1408c:	cmp	r7, r4
   14090:	beq	140a0 <__assert_fail@plt+0x31dc>
   14094:	mov	r0, r7
   14098:	bl	123f8 <__assert_fail@plt+0x1534>
   1409c:	str	r4, [r6]
   140a0:	mov	r3, #1
   140a4:	str	r3, [r6, #4]
   140a8:	pop	{r4, r5, r6, r7, r8, pc}
   140ac:	strdeq	r7, [r2], -r4
   140b0:	andeq	r7, r2, r8, lsr #3
   140b4:	strdeq	r7, [r2], -ip
   140b8:	ldr	r3, [pc, #4]	; 140c4 <__assert_fail@plt+0x3200>
   140bc:	mvn	r2, #0
   140c0:	b	13c08 <__assert_fail@plt+0x2d44>
   140c4:	andeq	r7, r2, r8, lsr #5
   140c8:	ldr	r3, [pc]	; 140d0 <__assert_fail@plt+0x320c>
   140cc:	b	13c08 <__assert_fail@plt+0x2d44>
   140d0:	andeq	r7, r2, r8, lsr #5
   140d4:	mov	r1, r0
   140d8:	ldr	r3, [pc, #8]	; 140e8 <__assert_fail@plt+0x3224>
   140dc:	mvn	r2, #0
   140e0:	mov	r0, #0
   140e4:	b	13c08 <__assert_fail@plt+0x2d44>
   140e8:	andeq	r7, r2, r8, lsr #5
   140ec:	mov	r2, r1
   140f0:	ldr	r3, [pc, #8]	; 14100 <__assert_fail@plt+0x323c>
   140f4:	mov	r1, r0
   140f8:	mov	r0, #0
   140fc:	b	13c08 <__assert_fail@plt+0x2d44>
   14100:	andeq	r7, r2, r8, lsr #5
   14104:	push	{r4, r5, lr}
   14108:	sub	sp, sp, #52	; 0x34
   1410c:	mov	r5, r2
   14110:	mov	r4, r0
   14114:	mov	r0, sp
   14118:	bl	125a4 <__assert_fail@plt+0x16e0>
   1411c:	mov	r3, sp
   14120:	mov	r1, r5
   14124:	mov	r0, r4
   14128:	mvn	r2, #0
   1412c:	bl	13c08 <__assert_fail@plt+0x2d44>
   14130:	add	sp, sp, #52	; 0x34
   14134:	pop	{r4, r5, pc}
   14138:	push	{r4, r5, r6, lr}
   1413c:	sub	sp, sp, #48	; 0x30
   14140:	mov	r5, r2
   14144:	mov	r6, r3
   14148:	mov	r4, r0
   1414c:	mov	r0, sp
   14150:	bl	125a4 <__assert_fail@plt+0x16e0>
   14154:	mov	r3, sp
   14158:	mov	r2, r6
   1415c:	mov	r1, r5
   14160:	mov	r0, r4
   14164:	bl	13c08 <__assert_fail@plt+0x2d44>
   14168:	add	sp, sp, #48	; 0x30
   1416c:	pop	{r4, r5, r6, pc}
   14170:	mov	r2, r1
   14174:	mov	r1, r0
   14178:	mov	r0, #0
   1417c:	b	14104 <__assert_fail@plt+0x3240>
   14180:	mov	r3, r2
   14184:	mov	r2, r1
   14188:	mov	r1, r0
   1418c:	mov	r0, #0
   14190:	b	14138 <__assert_fail@plt+0x3274>
   14194:	push	{r4, r5, r6, r7, r8, lr}
   14198:	mov	r7, r0
   1419c:	ldr	lr, [pc, #100]	; 14208 <__assert_fail@plt+0x3344>
   141a0:	mov	r8, r1
   141a4:	mov	r4, r2
   141a8:	ldm	lr!, {r0, r1, r2, r3}
   141ac:	sub	sp, sp, #48	; 0x30
   141b0:	mov	ip, sp
   141b4:	lsr	r5, r4, #5
   141b8:	stmia	ip!, {r0, r1, r2, r3}
   141bc:	add	r6, sp, #8
   141c0:	ldm	lr!, {r0, r1, r2, r3}
   141c4:	and	r4, r4, #31
   141c8:	stmia	ip!, {r0, r1, r2, r3}
   141cc:	ldm	lr, {r0, r1, r2, r3}
   141d0:	stm	ip, {r0, r1, r2, r3}
   141d4:	mov	r2, r8
   141d8:	ldr	lr, [r6, r5, lsl #2]
   141dc:	mov	r1, r7
   141e0:	mov	r3, sp
   141e4:	lsr	ip, lr, r4
   141e8:	eor	ip, ip, #1
   141ec:	and	ip, ip, #1
   141f0:	mov	r0, #0
   141f4:	eor	r4, lr, ip, lsl r4
   141f8:	str	r4, [r6, r5, lsl #2]
   141fc:	bl	13c08 <__assert_fail@plt+0x2d44>
   14200:	add	sp, sp, #48	; 0x30
   14204:	pop	{r4, r5, r6, r7, r8, pc}
   14208:	andeq	r7, r2, r8, lsr #5
   1420c:	mov	r2, r1
   14210:	mvn	r1, #0
   14214:	b	14194 <__assert_fail@plt+0x32d0>
   14218:	mov	r2, #58	; 0x3a
   1421c:	mvn	r1, #0
   14220:	b	14194 <__assert_fail@plt+0x32d0>
   14224:	mov	r2, #58	; 0x3a
   14228:	b	14194 <__assert_fail@plt+0x32d0>
   1422c:	push	{r4, r5, r6, r7, lr}
   14230:	sub	sp, sp, #100	; 0x64
   14234:	mov	r6, r0
   14238:	mov	r0, sp
   1423c:	mov	r7, r2
   14240:	bl	125a4 <__assert_fail@plt+0x16e0>
   14244:	mov	ip, sp
   14248:	add	lr, sp, #48	; 0x30
   1424c:	ldm	ip!, {r0, r1, r2, r3}
   14250:	stmia	lr!, {r0, r1, r2, r3}
   14254:	ldm	ip!, {r0, r1, r2, r3}
   14258:	ldr	r5, [sp, #60]	; 0x3c
   1425c:	stmia	lr!, {r0, r1, r2, r3}
   14260:	mvn	r4, r5
   14264:	ldm	ip, {r0, r1, r2, r3}
   14268:	and	ip, r4, #67108864	; 0x4000000
   1426c:	eor	ip, ip, r5
   14270:	str	ip, [sp, #60]	; 0x3c
   14274:	stm	lr, {r0, r1, r2, r3}
   14278:	mov	r1, r7
   1427c:	mov	r0, r6
   14280:	add	r3, sp, #48	; 0x30
   14284:	mvn	r2, #0
   14288:	bl	13c08 <__assert_fail@plt+0x2d44>
   1428c:	add	sp, sp, #100	; 0x64
   14290:	pop	{r4, r5, r6, r7, pc}
   14294:	push	{r4, r5, r6, r7, r8, lr}
   14298:	mov	r5, r1
   1429c:	ldr	lr, [pc, #100]	; 14308 <__assert_fail@plt+0x3444>
   142a0:	mov	r4, r2
   142a4:	mov	r7, r0
   142a8:	mov	r8, r3
   142ac:	ldm	lr!, {r0, r1, r2, r3}
   142b0:	sub	sp, sp, #48	; 0x30
   142b4:	mov	ip, sp
   142b8:	mov	r6, #10
   142bc:	stmia	ip!, {r0, r1, r2, r3}
   142c0:	cmp	r4, #0
   142c4:	cmpne	r5, #0
   142c8:	ldm	lr!, {r0, r1, r2, r3}
   142cc:	str	r6, [sp]
   142d0:	stmia	ip!, {r0, r1, r2, r3}
   142d4:	ldm	lr, {r0, r1, r2, r3}
   142d8:	stm	ip, {r0, r1, r2, r3}
   142dc:	beq	14304 <__assert_fail@plt+0x3440>
   142e0:	mov	r3, sp
   142e4:	mov	r1, r8
   142e8:	mov	r0, r7
   142ec:	ldr	r2, [sp, #72]	; 0x48
   142f0:	str	r5, [sp, #40]	; 0x28
   142f4:	str	r4, [sp, #44]	; 0x2c
   142f8:	bl	13c08 <__assert_fail@plt+0x2d44>
   142fc:	add	sp, sp, #48	; 0x30
   14300:	pop	{r4, r5, r6, r7, r8, pc}
   14304:	bl	10eac <abort@plt>
   14308:	andeq	r7, r2, r8, lsr #5
   1430c:	push	{lr}		; (str lr, [sp, #-4]!)
   14310:	sub	sp, sp, #12
   14314:	mvn	ip, #0
   14318:	str	ip, [sp]
   1431c:	bl	14294 <__assert_fail@plt+0x33d0>
   14320:	add	sp, sp, #12
   14324:	pop	{pc}		; (ldr pc, [sp], #4)
   14328:	push	{lr}		; (str lr, [sp, #-4]!)
   1432c:	sub	sp, sp, #12
   14330:	mvn	ip, #0
   14334:	mov	r3, r2
   14338:	str	ip, [sp]
   1433c:	mov	r2, r1
   14340:	mov	r1, r0
   14344:	mov	r0, #0
   14348:	bl	14294 <__assert_fail@plt+0x33d0>
   1434c:	add	sp, sp, #12
   14350:	pop	{pc}		; (ldr pc, [sp], #4)
   14354:	push	{lr}		; (str lr, [sp, #-4]!)
   14358:	sub	sp, sp, #12
   1435c:	str	r3, [sp]
   14360:	mov	r3, r2
   14364:	mov	r2, r1
   14368:	mov	r1, r0
   1436c:	mov	r0, #0
   14370:	bl	14294 <__assert_fail@plt+0x33d0>
   14374:	add	sp, sp, #12
   14378:	pop	{pc}		; (ldr pc, [sp], #4)
   1437c:	ldr	r3, [pc]	; 14384 <__assert_fail@plt+0x34c0>
   14380:	b	13c08 <__assert_fail@plt+0x2d44>
   14384:	andeq	r7, r2, r4, lsl #2
   14388:	mov	r2, r1
   1438c:	ldr	r3, [pc, #8]	; 1439c <__assert_fail@plt+0x34d8>
   14390:	mov	r1, r0
   14394:	mov	r0, #0
   14398:	b	13c08 <__assert_fail@plt+0x2d44>
   1439c:	andeq	r7, r2, r4, lsl #2
   143a0:	ldr	r3, [pc, #4]	; 143ac <__assert_fail@plt+0x34e8>
   143a4:	mvn	r2, #0
   143a8:	b	13c08 <__assert_fail@plt+0x2d44>
   143ac:	andeq	r7, r2, r4, lsl #2
   143b0:	mov	r1, r0
   143b4:	ldr	r3, [pc, #8]	; 143c4 <__assert_fail@plt+0x3500>
   143b8:	mvn	r2, #0
   143bc:	mov	r0, #0
   143c0:	b	13c08 <__assert_fail@plt+0x2d44>
   143c4:	andeq	r7, r2, r4, lsl #2
   143c8:	push	{r4, r5, r6, lr}
   143cc:	sub	sp, sp, #32
   143d0:	cmp	r1, #0
   143d4:	mov	r4, r0
   143d8:	ldr	r5, [sp, #48]	; 0x30
   143dc:	ldr	r6, [sp, #52]	; 0x34
   143e0:	beq	146f8 <__assert_fail@plt+0x3834>
   143e4:	stm	sp, {r2, r3}
   143e8:	mov	r3, r1
   143ec:	ldr	r2, [pc, #808]	; 1471c <__assert_fail@plt+0x3858>
   143f0:	mov	r1, #1
   143f4:	bl	10e1c <__fprintf_chk@plt>
   143f8:	mov	r2, #5
   143fc:	ldr	r1, [pc, #796]	; 14720 <__assert_fail@plt+0x385c>
   14400:	mov	r0, #0
   14404:	bl	10d08 <dcgettext@plt>
   14408:	ldr	r3, [pc, #788]	; 14724 <__assert_fail@plt+0x3860>
   1440c:	ldr	r2, [pc, #788]	; 14728 <__assert_fail@plt+0x3864>
   14410:	str	r3, [sp]
   14414:	mov	r1, #1
   14418:	mov	r3, r0
   1441c:	mov	r0, r4
   14420:	bl	10e1c <__fprintf_chk@plt>
   14424:	mov	r1, r4
   14428:	mov	r0, #10
   1442c:	bl	10cfc <fputc_unlocked@plt>
   14430:	mov	r2, #5
   14434:	ldr	r1, [pc, #752]	; 1472c <__assert_fail@plt+0x3868>
   14438:	mov	r0, #0
   1443c:	bl	10d08 <dcgettext@plt>
   14440:	mov	r1, #1
   14444:	ldr	r3, [pc, #740]	; 14730 <__assert_fail@plt+0x386c>
   14448:	mov	r2, r0
   1444c:	mov	r0, r4
   14450:	bl	10e1c <__fprintf_chk@plt>
   14454:	mov	r1, r4
   14458:	mov	r0, #10
   1445c:	bl	10cfc <fputc_unlocked@plt>
   14460:	cmp	r6, #9
   14464:	ldrls	pc, [pc, r6, lsl #2]
   14468:	b	14710 <__assert_fail@plt+0x384c>
   1446c:	strdeq	r4, [r1], -r0
   14470:	strdeq	r4, [r1], -r8
   14474:	andeq	r4, r1, r4, lsr #10
   14478:	andeq	r4, r1, r8, asr r5
   1447c:	muleq	r1, r4, r5
   14480:	ldrdeq	r4, [r1], -r0
   14484:	andeq	r4, r1, ip, lsl #12
   14488:	andeq	r4, r1, r0, asr r6
   1448c:	andeq	r4, r1, r0, lsr #13
   14490:	muleq	r1, r4, r4
   14494:	ldr	r1, [pc, #664]	; 14734 <__assert_fail@plt+0x3870>
   14498:	mov	r2, #5
   1449c:	mov	r0, #0
   144a0:	bl	10d08 <dcgettext@plt>
   144a4:	ldr	ip, [r5, #32]
   144a8:	ldr	r1, [r5, #28]
   144ac:	ldr	r2, [r5, #24]
   144b0:	ldr	r3, [r5]
   144b4:	ldr	r6, [r5, #20]
   144b8:	str	ip, [sp, #28]
   144bc:	ldr	lr, [r5, #16]
   144c0:	str	r1, [sp, #24]
   144c4:	ldr	ip, [r5, #12]
   144c8:	str	r2, [sp, #20]
   144cc:	ldr	r1, [r5, #8]
   144d0:	ldr	r2, [r5, #4]
   144d4:	str	r6, [sp, #16]
   144d8:	stmib	sp, {r1, ip, lr}
   144dc:	mov	r1, #1
   144e0:	str	r2, [sp]
   144e4:	mov	r2, r0
   144e8:	mov	r0, r4
   144ec:	bl	10e1c <__fprintf_chk@plt>
   144f0:	add	sp, sp, #32
   144f4:	pop	{r4, r5, r6, pc}
   144f8:	mov	r2, #5
   144fc:	ldr	r1, [pc, #564]	; 14738 <__assert_fail@plt+0x3874>
   14500:	mov	r0, #0
   14504:	bl	10d08 <dcgettext@plt>
   14508:	ldr	r3, [r5]
   1450c:	mov	r1, #1
   14510:	mov	r2, r0
   14514:	mov	r0, r4
   14518:	add	sp, sp, #32
   1451c:	pop	{r4, r5, r6, lr}
   14520:	b	10e1c <__fprintf_chk@plt>
   14524:	mov	r2, #5
   14528:	ldr	r1, [pc, #524]	; 1473c <__assert_fail@plt+0x3878>
   1452c:	mov	r0, #0
   14530:	bl	10d08 <dcgettext@plt>
   14534:	ldr	r2, [r5, #4]
   14538:	ldr	r3, [r5]
   1453c:	mov	r1, #1
   14540:	str	r2, [sp, #48]	; 0x30
   14544:	mov	r2, r0
   14548:	mov	r0, r4
   1454c:	add	sp, sp, #32
   14550:	pop	{r4, r5, r6, lr}
   14554:	b	10e1c <__fprintf_chk@plt>
   14558:	mov	r2, #5
   1455c:	ldr	r1, [pc, #476]	; 14740 <__assert_fail@plt+0x387c>
   14560:	mov	r0, #0
   14564:	bl	10d08 <dcgettext@plt>
   14568:	ldr	r1, [r5, #8]
   1456c:	ldr	r2, [r5, #4]
   14570:	ldr	r3, [r5]
   14574:	str	r1, [sp, #52]	; 0x34
   14578:	str	r2, [sp, #48]	; 0x30
   1457c:	mov	r1, #1
   14580:	mov	r2, r0
   14584:	mov	r0, r4
   14588:	add	sp, sp, #32
   1458c:	pop	{r4, r5, r6, lr}
   14590:	b	10e1c <__fprintf_chk@plt>
   14594:	mov	r2, #5
   14598:	ldr	r1, [pc, #420]	; 14744 <__assert_fail@plt+0x3880>
   1459c:	mov	r0, #0
   145a0:	bl	10d08 <dcgettext@plt>
   145a4:	ldr	r1, [r5, #8]
   145a8:	ldr	ip, [r5, #12]
   145ac:	ldr	r2, [r5, #4]
   145b0:	ldr	r3, [r5]
   145b4:	stmib	sp, {r1, ip}
   145b8:	str	r2, [sp]
   145bc:	mov	r1, #1
   145c0:	mov	r2, r0
   145c4:	mov	r0, r4
   145c8:	bl	10e1c <__fprintf_chk@plt>
   145cc:	b	144f0 <__assert_fail@plt+0x362c>
   145d0:	mov	r2, #5
   145d4:	ldr	r1, [pc, #364]	; 14748 <__assert_fail@plt+0x3884>
   145d8:	mov	r0, #0
   145dc:	bl	10d08 <dcgettext@plt>
   145e0:	add	r1, r5, #8
   145e4:	ldr	r2, [r5, #4]
   145e8:	ldm	r1, {r1, ip, lr}
   145ec:	ldr	r3, [r5]
   145f0:	str	r2, [sp]
   145f4:	stmib	sp, {r1, ip, lr}
   145f8:	mov	r1, #1
   145fc:	mov	r2, r0
   14600:	mov	r0, r4
   14604:	bl	10e1c <__fprintf_chk@plt>
   14608:	b	144f0 <__assert_fail@plt+0x362c>
   1460c:	mov	r2, #5
   14610:	ldr	r1, [pc, #308]	; 1474c <__assert_fail@plt+0x3888>
   14614:	mov	r0, #0
   14618:	bl	10d08 <dcgettext@plt>
   1461c:	add	r1, r5, #8
   14620:	ldr	r2, [r5, #4]
   14624:	ldm	r1, {r1, ip, lr}
   14628:	ldr	r6, [r5, #20]
   1462c:	ldr	r3, [r5]
   14630:	stmib	sp, {r1, ip, lr}
   14634:	mov	r1, #1
   14638:	str	r2, [sp]
   1463c:	str	r6, [sp, #16]
   14640:	mov	r2, r0
   14644:	mov	r0, r4
   14648:	bl	10e1c <__fprintf_chk@plt>
   1464c:	b	144f0 <__assert_fail@plt+0x362c>
   14650:	mov	r2, #5
   14654:	ldr	r1, [pc, #244]	; 14750 <__assert_fail@plt+0x388c>
   14658:	mov	r0, #0
   1465c:	bl	10d08 <dcgettext@plt>
   14660:	ldr	r2, [r5, #24]
   14664:	ldr	r3, [r5]
   14668:	ldr	r6, [r5, #20]
   1466c:	ldr	lr, [r5, #16]
   14670:	ldr	ip, [r5, #12]
   14674:	str	r2, [sp, #20]
   14678:	ldr	r1, [r5, #8]
   1467c:	ldr	r2, [r5, #4]
   14680:	str	r6, [sp, #16]
   14684:	stmib	sp, {r1, ip, lr}
   14688:	mov	r1, #1
   1468c:	str	r2, [sp]
   14690:	mov	r2, r0
   14694:	mov	r0, r4
   14698:	bl	10e1c <__fprintf_chk@plt>
   1469c:	b	144f0 <__assert_fail@plt+0x362c>
   146a0:	mov	r2, #5
   146a4:	ldr	r1, [pc, #168]	; 14754 <__assert_fail@plt+0x3890>
   146a8:	mov	r0, #0
   146ac:	bl	10d08 <dcgettext@plt>
   146b0:	ldr	r1, [r5, #28]
   146b4:	ldr	r2, [r5, #24]
   146b8:	ldr	r3, [r5]
   146bc:	ldr	r6, [r5, #20]
   146c0:	ldr	lr, [r5, #16]
   146c4:	str	r1, [sp, #24]
   146c8:	ldr	ip, [r5, #12]
   146cc:	str	r2, [sp, #20]
   146d0:	ldr	r1, [r5, #8]
   146d4:	ldr	r2, [r5, #4]
   146d8:	str	r6, [sp, #16]
   146dc:	stmib	sp, {r1, ip, lr}
   146e0:	mov	r1, #1
   146e4:	str	r2, [sp]
   146e8:	mov	r2, r0
   146ec:	mov	r0, r4
   146f0:	bl	10e1c <__fprintf_chk@plt>
   146f4:	b	144f0 <__assert_fail@plt+0x362c>
   146f8:	str	r3, [sp]
   146fc:	mov	r1, #1
   14700:	mov	r3, r2
   14704:	ldr	r2, [pc, #76]	; 14758 <__assert_fail@plt+0x3894>
   14708:	bl	10e1c <__fprintf_chk@plt>
   1470c:	b	143f8 <__assert_fail@plt+0x3534>
   14710:	mov	r2, #5
   14714:	ldr	r1, [pc, #64]	; 1475c <__assert_fail@plt+0x3898>
   14718:	b	1449c <__assert_fail@plt+0x35d8>
   1471c:	andeq	r6, r1, r4, ror #2
   14720:	andeq	r6, r1, r8, ror r1
   14724:	andeq	r0, r0, r6, ror #15
   14728:	andeq	r6, r1, r0, asr r4
   1472c:	andeq	r6, r1, ip, ror r1
   14730:	andeq	r6, r1, r8, lsr #4
   14734:	andeq	r6, r1, r8, asr r3
   14738:	andeq	r6, r1, ip, asr #4
   1473c:	andeq	r6, r1, ip, asr r2
   14740:	andeq	r6, r1, r4, ror r2
   14744:	muleq	r1, r0, r2
   14748:			; <UNDEFINED> instruction: 0x000162b0
   1474c:	ldrdeq	r6, [r1], -r4
   14750:	strdeq	r6, [r1], -ip
   14754:	andeq	r6, r1, r8, lsr #6
   14758:	andeq	r6, r1, r0, ror r1
   1475c:	andeq	r6, r1, ip, lsl #7
   14760:	push	{r4, r5, lr}
   14764:	sub	sp, sp, #12
   14768:	ldr	r5, [sp, #24]
   1476c:	ldr	ip, [r5]
   14770:	cmp	ip, #0
   14774:	beq	14790 <__assert_fail@plt+0x38cc>
   14778:	mov	lr, r5
   1477c:	mov	ip, #0
   14780:	ldr	r4, [lr, #4]!
   14784:	add	ip, ip, #1
   14788:	cmp	r4, #0
   1478c:	bne	14780 <__assert_fail@plt+0x38bc>
   14790:	stm	sp, {r5, ip}
   14794:	bl	143c8 <__assert_fail@plt+0x3504>
   14798:	add	sp, sp, #12
   1479c:	pop	{r4, r5, pc}
   147a0:	push	{r4, r5, lr}
   147a4:	sub	sp, sp, #52	; 0x34
   147a8:	add	r5, sp, #4
   147ac:	ldr	r4, [sp, #64]	; 0x40
   147b0:	mov	ip, #0
   147b4:	sub	r4, r4, #4
   147b8:	ldr	lr, [r4, #4]!
   147bc:	cmp	lr, #0
   147c0:	str	lr, [r5, #4]!
   147c4:	beq	147d4 <__assert_fail@plt+0x3910>
   147c8:	add	ip, ip, #1
   147cc:	cmp	ip, #10
   147d0:	bne	147b8 <__assert_fail@plt+0x38f4>
   147d4:	add	lr, sp, #8
   147d8:	str	ip, [sp, #4]
   147dc:	str	lr, [sp]
   147e0:	bl	143c8 <__assert_fail@plt+0x3504>
   147e4:	add	sp, sp, #52	; 0x34
   147e8:	pop	{r4, r5, pc}
   147ec:	push	{r3}		; (str r3, [sp, #-4]!)
   147f0:	push	{r4, lr}
   147f4:	sub	sp, sp, #60	; 0x3c
   147f8:	add	lr, sp, #56	; 0x38
   147fc:	add	r3, sp, #72	; 0x48
   14800:	str	r3, [lr, #-44]!	; 0xffffffd4
   14804:	add	r4, sp, #68	; 0x44
   14808:	mov	r3, #0
   1480c:	ldr	ip, [r4, #4]!
   14810:	cmp	ip, #0
   14814:	str	ip, [lr, #4]!
   14818:	beq	14828 <__assert_fail@plt+0x3964>
   1481c:	add	r3, r3, #1
   14820:	cmp	r3, #10
   14824:	bne	1480c <__assert_fail@plt+0x3948>
   14828:	add	ip, sp, #16
   1482c:	str	r3, [sp, #4]
   14830:	str	ip, [sp]
   14834:	ldr	r3, [sp, #68]	; 0x44
   14838:	bl	143c8 <__assert_fail@plt+0x3504>
   1483c:	add	sp, sp, #60	; 0x3c
   14840:	pop	{r4, lr}
   14844:	add	sp, sp, #4
   14848:	bx	lr
   1484c:	ldr	r3, [pc, #116]	; 148c8 <__assert_fail@plt+0x3a04>
   14850:	push	{r4, lr}
   14854:	mov	r0, #10
   14858:	ldr	r1, [r3]
   1485c:	bl	10cfc <fputc_unlocked@plt>
   14860:	mov	r2, #5
   14864:	ldr	r1, [pc, #96]	; 148cc <__assert_fail@plt+0x3a08>
   14868:	mov	r0, #0
   1486c:	bl	10d08 <dcgettext@plt>
   14870:	ldr	r2, [pc, #88]	; 148d0 <__assert_fail@plt+0x3a0c>
   14874:	mov	r1, r0
   14878:	mov	r0, #1
   1487c:	bl	10e04 <__printf_chk@plt>
   14880:	mov	r2, #5
   14884:	ldr	r1, [pc, #72]	; 148d4 <__assert_fail@plt+0x3a10>
   14888:	mov	r0, #0
   1488c:	bl	10d08 <dcgettext@plt>
   14890:	ldr	r3, [pc, #64]	; 148d8 <__assert_fail@plt+0x3a14>
   14894:	ldr	r2, [pc, #64]	; 148dc <__assert_fail@plt+0x3a18>
   14898:	mov	r1, r0
   1489c:	mov	r0, #1
   148a0:	bl	10e04 <__printf_chk@plt>
   148a4:	mov	r2, #5
   148a8:	ldr	r1, [pc, #48]	; 148e0 <__assert_fail@plt+0x3a1c>
   148ac:	mov	r0, #0
   148b0:	bl	10d08 <dcgettext@plt>
   148b4:	ldr	r2, [pc, #40]	; 148e4 <__assert_fail@plt+0x3a20>
   148b8:	pop	{r4, lr}
   148bc:	mov	r1, r0
   148c0:	mov	r0, #1
   148c4:	b	10e04 <__printf_chk@plt>
   148c8:	andeq	r7, r2, r4, asr r1
   148cc:	andeq	r6, r1, r8, asr #7
   148d0:	ldrdeq	r6, [r1], -ip
   148d4:	strdeq	r6, [r1], -r4
   148d8:	andeq	r5, r1, r4, ror #21
   148dc:	andeq	r5, r1, ip, lsl #22
   148e0:	andeq	r6, r1, r8, lsl #8
   148e4:	andeq	r6, r1, r0, lsr r4
   148e8:	push	{r4, lr}
   148ec:	bl	14eb8 <__assert_fail@plt+0x3ff4>
   148f0:	cmp	r0, #0
   148f4:	popne	{r4, pc}
   148f8:	bl	14e30 <__assert_fail@plt+0x3f6c>
   148fc:	push	{r4, lr}
   14900:	bl	14eb8 <__assert_fail@plt+0x3ff4>
   14904:	cmp	r0, #0
   14908:	popne	{r4, pc}
   1490c:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14910:	push	{r4, lr}
   14914:	bl	14eb8 <__assert_fail@plt+0x3ff4>
   14918:	cmp	r0, #0
   1491c:	popne	{r4, pc}
   14920:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14924:	push	{r4, r5, r6, lr}
   14928:	mov	r5, r0
   1492c:	mov	r4, r1
   14930:	bl	14ee4 <__assert_fail@plt+0x4020>
   14934:	cmp	r0, #0
   14938:	popne	{r4, r5, r6, pc}
   1493c:	adds	r4, r4, #0
   14940:	movne	r4, #1
   14944:	cmp	r5, #0
   14948:	orreq	r4, r4, #1
   1494c:	cmp	r4, #0
   14950:	popeq	{r4, r5, r6, pc}
   14954:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14958:	push	{r4, lr}
   1495c:	cmp	r1, #0
   14960:	orreq	r1, r1, #1
   14964:	bl	14ee4 <__assert_fail@plt+0x4020>
   14968:	cmp	r0, #0
   1496c:	popne	{r4, pc}
   14970:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14974:	push	{r4, r5, r6, lr}
   14978:	mov	r6, r0
   1497c:	mov	r5, r1
   14980:	mov	r4, r2
   14984:	bl	15044 <__assert_fail@plt+0x4180>
   14988:	cmp	r0, #0
   1498c:	popne	{r4, r5, r6, pc}
   14990:	cmp	r6, #0
   14994:	beq	149a4 <__assert_fail@plt+0x3ae0>
   14998:	cmp	r5, #0
   1499c:	cmpne	r4, #0
   149a0:	popeq	{r4, r5, r6, pc}
   149a4:	bl	14e30 <__assert_fail@plt+0x3f6c>
   149a8:	b	14974 <__assert_fail@plt+0x3ab0>
   149ac:	cmp	r2, #0
   149b0:	cmpne	r1, #0
   149b4:	moveq	r2, #1
   149b8:	moveq	r1, r2
   149bc:	push	{r4, lr}
   149c0:	bl	15044 <__assert_fail@plt+0x4180>
   149c4:	cmp	r0, #0
   149c8:	popne	{r4, pc}
   149cc:	bl	14e30 <__assert_fail@plt+0x3f6c>
   149d0:	mov	r2, r1
   149d4:	mov	r1, r0
   149d8:	mov	r0, #0
   149dc:	b	14974 <__assert_fail@plt+0x3ab0>
   149e0:	mov	r2, r1
   149e4:	mov	r1, r0
   149e8:	mov	r0, #0
   149ec:	b	149ac <__assert_fail@plt+0x3ae8>
   149f0:	push	{r4, r5, r6, lr}
   149f4:	subs	r6, r0, #0
   149f8:	sub	sp, sp, #8
   149fc:	mov	r5, r1
   14a00:	ldr	r4, [r1]
   14a04:	beq	14a40 <__assert_fail@plt+0x3b7c>
   14a08:	lsr	r1, r4, #1
   14a0c:	add	r3, r1, #1
   14a10:	mvn	r3, r3
   14a14:	cmp	r4, r3
   14a18:	bhi	14a3c <__assert_fail@plt+0x3b78>
   14a1c:	add	r4, r4, #1
   14a20:	add	r4, r4, r1
   14a24:	mov	r0, r6
   14a28:	mov	r1, r4
   14a2c:	bl	14974 <__assert_fail@plt+0x3ab0>
   14a30:	str	r4, [r5]
   14a34:	add	sp, sp, #8
   14a38:	pop	{r4, r5, r6, pc}
   14a3c:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14a40:	cmp	r4, #0
   14a44:	bne	14a24 <__assert_fail@plt+0x3b60>
   14a48:	mov	r1, r2
   14a4c:	mov	r0, #64	; 0x40
   14a50:	str	r2, [sp, #4]
   14a54:	bl	15184 <__assert_fail@plt+0x42c0>
   14a58:	ldr	r2, [sp, #4]
   14a5c:	cmp	r0, #0
   14a60:	movne	r4, r0
   14a64:	addeq	r4, r0, #1
   14a68:	b	14a24 <__assert_fail@plt+0x3b60>
   14a6c:	mov	r2, #1
   14a70:	b	149f0 <__assert_fail@plt+0x3b2c>
   14a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a78:	sub	sp, sp, #12
   14a7c:	ldr	r6, [r1]
   14a80:	mov	sl, r1
   14a84:	mov	r9, r0
   14a88:	asrs	r4, r6, #1
   14a8c:	mov	r5, r2
   14a90:	mov	fp, r3
   14a94:	ldr	r7, [sp, #48]	; 0x30
   14a98:	bmi	14c04 <__assert_fail@plt+0x3d40>
   14a9c:	mvn	r3, #-2147483648	; 0x80000000
   14aa0:	sub	r3, r3, r4
   14aa4:	cmp	r6, r3
   14aa8:	movle	r3, #0
   14aac:	movgt	r3, #1
   14ab0:	mvn	r8, fp
   14ab4:	cmp	r3, #0
   14ab8:	addeq	r4, r4, r6
   14abc:	mvnne	r4, #-2147483648	; 0x80000000
   14ac0:	lsr	r8, r8, #31
   14ac4:	cmp	fp, r4
   14ac8:	movge	r3, #0
   14acc:	andlt	r3, r8, #1
   14ad0:	cmp	r3, #0
   14ad4:	beq	14bbc <__assert_fail@plt+0x3cf8>
   14ad8:	cmp	r7, #0
   14adc:	blt	14c8c <__assert_fail@plt+0x3dc8>
   14ae0:	bne	14c84 <__assert_fail@plt+0x3dc0>
   14ae4:	mov	r2, #64	; 0x40
   14ae8:	mov	r1, r7
   14aec:	mov	r0, r2
   14af0:	str	r2, [sp, #4]
   14af4:	bl	15390 <__assert_fail@plt+0x44cc>
   14af8:	ldr	r2, [sp, #4]
   14afc:	mov	r1, r7
   14b00:	mov	r4, r0
   14b04:	mov	r0, r2
   14b08:	bl	155b0 <__assert_fail@plt+0x46ec>
   14b0c:	ldr	r2, [sp, #4]
   14b10:	sub	r1, r2, r1
   14b14:	cmp	r9, #0
   14b18:	sub	r3, r4, r6
   14b1c:	streq	r9, [sl]
   14b20:	cmp	r3, r5
   14b24:	bge	14ba8 <__assert_fail@plt+0x3ce4>
   14b28:	cmp	r5, #0
   14b2c:	blt	14c18 <__assert_fail@plt+0x3d54>
   14b30:	cmp	r6, #0
   14b34:	blt	14b54 <__assert_fail@plt+0x3c90>
   14b38:	mvn	r3, #-2147483648	; 0x80000000
   14b3c:	sub	r3, r3, r5
   14b40:	cmp	r6, r3
   14b44:	movle	r3, #0
   14b48:	movgt	r3, #1
   14b4c:	cmp	r3, #0
   14b50:	bne	14d14 <__assert_fail@plt+0x3e50>
   14b54:	add	r5, r6, r5
   14b58:	cmp	fp, r5
   14b5c:	movge	r8, #0
   14b60:	andlt	r8, r8, #1
   14b64:	cmp	r8, #0
   14b68:	mov	r4, r5
   14b6c:	bne	14d14 <__assert_fail@plt+0x3e50>
   14b70:	cmp	r7, #0
   14b74:	blt	14c2c <__assert_fail@plt+0x3d68>
   14b78:	beq	14ba4 <__assert_fail@plt+0x3ce0>
   14b7c:	cmp	r5, #0
   14b80:	blt	14cd4 <__assert_fail@plt+0x3e10>
   14b84:	mov	r1, r7
   14b88:	mvn	r0, #-2147483648	; 0x80000000
   14b8c:	bl	15390 <__assert_fail@plt+0x44cc>
   14b90:	cmp	r5, r0
   14b94:	movle	r0, #0
   14b98:	movgt	r0, #1
   14b9c:	cmp	r0, #0
   14ba0:	bne	14d14 <__assert_fail@plt+0x3e50>
   14ba4:	mul	r1, r5, r7
   14ba8:	mov	r0, r9
   14bac:	bl	14924 <__assert_fail@plt+0x3a60>
   14bb0:	str	r4, [sl]
   14bb4:	add	sp, sp, #12
   14bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bbc:	cmp	r7, #0
   14bc0:	blt	14c58 <__assert_fail@plt+0x3d94>
   14bc4:	beq	14ae4 <__assert_fail@plt+0x3c20>
   14bc8:	cmp	r4, #0
   14bcc:	blt	14c94 <__assert_fail@plt+0x3dd0>
   14bd0:	mov	r1, r7
   14bd4:	mvn	r0, #-2147483648	; 0x80000000
   14bd8:	bl	15390 <__assert_fail@plt+0x44cc>
   14bdc:	cmp	r0, r4
   14be0:	movge	r0, #0
   14be4:	movlt	r0, #1
   14be8:	cmp	r0, #0
   14bec:	mvnne	r2, #-2147483648	; 0x80000000
   14bf0:	bne	14ae8 <__assert_fail@plt+0x3c24>
   14bf4:	mul	r1, r7, r4
   14bf8:	cmp	r1, #63	; 0x3f
   14bfc:	bgt	14b14 <__assert_fail@plt+0x3c50>
   14c00:	b	14ae4 <__assert_fail@plt+0x3c20>
   14c04:	rsb	r3, r4, #-2147483648	; 0x80000000
   14c08:	cmp	r6, r3
   14c0c:	movge	r3, #0
   14c10:	movlt	r3, #1
   14c14:	b	14ab0 <__assert_fail@plt+0x3bec>
   14c18:	rsb	r3, r5, #-2147483648	; 0x80000000
   14c1c:	cmp	r6, r3
   14c20:	movge	r3, #0
   14c24:	movlt	r3, #1
   14c28:	b	14b4c <__assert_fail@plt+0x3c88>
   14c2c:	cmp	r5, #0
   14c30:	blt	14cb8 <__assert_fail@plt+0x3df4>
   14c34:	cmn	r7, #1
   14c38:	beq	14ba4 <__assert_fail@plt+0x3ce0>
   14c3c:	mov	r1, r7
   14c40:	mov	r0, #-2147483648	; 0x80000000
   14c44:	bl	15390 <__assert_fail@plt+0x44cc>
   14c48:	cmp	r5, r0
   14c4c:	movle	r0, #0
   14c50:	movgt	r0, #1
   14c54:	b	14b9c <__assert_fail@plt+0x3cd8>
   14c58:	cmp	r4, #0
   14c5c:	blt	14cf8 <__assert_fail@plt+0x3e34>
   14c60:	cmn	r7, #1
   14c64:	beq	14bf4 <__assert_fail@plt+0x3d30>
   14c68:	mov	r1, r7
   14c6c:	mov	r0, #-2147483648	; 0x80000000
   14c70:	bl	15390 <__assert_fail@plt+0x44cc>
   14c74:	cmp	r0, r4
   14c78:	movge	r0, #0
   14c7c:	movlt	r0, #1
   14c80:	b	14be8 <__assert_fail@plt+0x3d24>
   14c84:	mov	r4, fp
   14c88:	b	14bd0 <__assert_fail@plt+0x3d0c>
   14c8c:	mov	r4, fp
   14c90:	b	14c60 <__assert_fail@plt+0x3d9c>
   14c94:	cmn	r4, #1
   14c98:	beq	14bf4 <__assert_fail@plt+0x3d30>
   14c9c:	mov	r1, r4
   14ca0:	mov	r0, #-2147483648	; 0x80000000
   14ca4:	bl	15390 <__assert_fail@plt+0x44cc>
   14ca8:	cmp	r7, r0
   14cac:	movle	r0, #0
   14cb0:	movgt	r0, #1
   14cb4:	b	14be8 <__assert_fail@plt+0x3d24>
   14cb8:	mov	r1, r7
   14cbc:	mvn	r0, #-2147483648	; 0x80000000
   14cc0:	bl	15390 <__assert_fail@plt+0x44cc>
   14cc4:	cmp	r5, r0
   14cc8:	movge	r0, #0
   14ccc:	movlt	r0, #1
   14cd0:	b	14b9c <__assert_fail@plt+0x3cd8>
   14cd4:	cmn	r5, #1
   14cd8:	beq	14ba4 <__assert_fail@plt+0x3ce0>
   14cdc:	mov	r1, r5
   14ce0:	mov	r0, #-2147483648	; 0x80000000
   14ce4:	bl	15390 <__assert_fail@plt+0x44cc>
   14ce8:	cmp	r7, r0
   14cec:	movle	r0, #0
   14cf0:	movgt	r0, #1
   14cf4:	b	14b9c <__assert_fail@plt+0x3cd8>
   14cf8:	mov	r1, r7
   14cfc:	mvn	r0, #-2147483648	; 0x80000000
   14d00:	bl	15390 <__assert_fail@plt+0x44cc>
   14d04:	cmp	r0, r4
   14d08:	movle	r0, #0
   14d0c:	movgt	r0, #1
   14d10:	b	14be8 <__assert_fail@plt+0x3d24>
   14d14:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14d18:	push	{r4, lr}
   14d1c:	mov	r1, #1
   14d20:	bl	14e70 <__assert_fail@plt+0x3fac>
   14d24:	cmp	r0, #0
   14d28:	popne	{r4, pc}
   14d2c:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14d30:	push	{r4, lr}
   14d34:	mov	r1, #1
   14d38:	bl	14e70 <__assert_fail@plt+0x3fac>
   14d3c:	cmp	r0, #0
   14d40:	popne	{r4, pc}
   14d44:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14d48:	push	{r4, lr}
   14d4c:	bl	14e70 <__assert_fail@plt+0x3fac>
   14d50:	cmp	r0, #0
   14d54:	popne	{r4, pc}
   14d58:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14d5c:	push	{r4, lr}
   14d60:	bl	14e70 <__assert_fail@plt+0x3fac>
   14d64:	cmp	r0, #0
   14d68:	popne	{r4, pc}
   14d6c:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14d70:	push	{r4, r5, r6, lr}
   14d74:	mov	r6, r0
   14d78:	mov	r0, r1
   14d7c:	mov	r4, r1
   14d80:	bl	14eb8 <__assert_fail@plt+0x3ff4>
   14d84:	subs	r5, r0, #0
   14d88:	beq	14da0 <__assert_fail@plt+0x3edc>
   14d8c:	mov	r2, r4
   14d90:	mov	r1, r6
   14d94:	bl	10ccc <memcpy@plt>
   14d98:	mov	r0, r5
   14d9c:	pop	{r4, r5, r6, pc}
   14da0:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14da4:	push	{r4, r5, r6, lr}
   14da8:	mov	r6, r0
   14dac:	mov	r0, r1
   14db0:	mov	r4, r1
   14db4:	bl	14eb8 <__assert_fail@plt+0x3ff4>
   14db8:	subs	r5, r0, #0
   14dbc:	beq	14dd4 <__assert_fail@plt+0x3f10>
   14dc0:	mov	r2, r4
   14dc4:	mov	r1, r6
   14dc8:	bl	10ccc <memcpy@plt>
   14dcc:	mov	r0, r5
   14dd0:	pop	{r4, r5, r6, pc}
   14dd4:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14dd8:	push	{r4, r5, r6, lr}
   14ddc:	mov	r6, r0
   14de0:	add	r0, r1, #1
   14de4:	mov	r4, r1
   14de8:	bl	14eb8 <__assert_fail@plt+0x3ff4>
   14dec:	subs	r5, r0, #0
   14df0:	beq	14e10 <__assert_fail@plt+0x3f4c>
   14df4:	mov	r3, #0
   14df8:	mov	r1, r6
   14dfc:	strb	r3, [r5, r4]
   14e00:	mov	r2, r4
   14e04:	bl	10ccc <memcpy@plt>
   14e08:	mov	r0, r5
   14e0c:	pop	{r4, r5, r6, pc}
   14e10:	bl	14e30 <__assert_fail@plt+0x3f6c>
   14e14:	push	{r4, lr}
   14e18:	mov	r4, r0
   14e1c:	bl	10dd4 <strlen@plt>
   14e20:	add	r1, r0, #1
   14e24:	mov	r0, r4
   14e28:	pop	{r4, lr}
   14e2c:	b	14d70 <__assert_fail@plt+0x3eac>
   14e30:	ldr	r3, [pc, #44]	; 14e64 <__assert_fail@plt+0x3fa0>
   14e34:	push	{r4, lr}
   14e38:	mov	r2, #5
   14e3c:	ldr	r1, [pc, #36]	; 14e68 <__assert_fail@plt+0x3fa4>
   14e40:	mov	r0, #0
   14e44:	ldr	r4, [r3]
   14e48:	bl	10d08 <dcgettext@plt>
   14e4c:	ldr	r2, [pc, #24]	; 14e6c <__assert_fail@plt+0x3fa8>
   14e50:	mov	r1, #0
   14e54:	mov	r3, r0
   14e58:	mov	r0, r4
   14e5c:	bl	10d74 <error@plt>
   14e60:	bl	10eac <abort@plt>
   14e64:	strdeq	r7, [r2], -r0
   14e68:	andeq	r6, r1, r0, lsl #9
   14e6c:	andeq	r5, r1, r8, asr #27
   14e70:	cmp	r1, #0
   14e74:	cmpne	r0, #0
   14e78:	moveq	r1, #1
   14e7c:	moveq	r0, r1
   14e80:	umull	r2, r3, r0, r1
   14e84:	adds	r3, r3, #0
   14e88:	movne	r3, #1
   14e8c:	cmp	r2, #0
   14e90:	blt	14ea0 <__assert_fail@plt+0x3fdc>
   14e94:	cmp	r3, #0
   14e98:	bne	14ea0 <__assert_fail@plt+0x3fdc>
   14e9c:	b	10c6c <calloc@plt>
   14ea0:	push	{r4, lr}
   14ea4:	bl	10de0 <__errno_location@plt>
   14ea8:	mov	r3, #12
   14eac:	str	r3, [r0]
   14eb0:	mov	r0, #0
   14eb4:	pop	{r4, pc}
   14eb8:	cmp	r0, #0
   14ebc:	moveq	r0, #1
   14ec0:	cmp	r0, #0
   14ec4:	blt	14ecc <__assert_fail@plt+0x4008>
   14ec8:	b	10d80 <malloc@plt>
   14ecc:	push	{r4, lr}
   14ed0:	bl	10de0 <__errno_location@plt>
   14ed4:	mov	r3, #12
   14ed8:	str	r3, [r0]
   14edc:	mov	r0, #0
   14ee0:	pop	{r4, pc}
   14ee4:	cmp	r0, #0
   14ee8:	beq	14f0c <__assert_fail@plt+0x4048>
   14eec:	cmp	r1, #0
   14ef0:	push	{lr}		; (str lr, [sp, #-4]!)
   14ef4:	sub	sp, sp, #12
   14ef8:	beq	14f14 <__assert_fail@plt+0x4050>
   14efc:	blt	14f2c <__assert_fail@plt+0x4068>
   14f00:	add	sp, sp, #12
   14f04:	pop	{lr}		; (ldr lr, [sp], #4)
   14f08:	b	10d14 <realloc@plt>
   14f0c:	mov	r0, r1
   14f10:	b	14eb8 <__assert_fail@plt+0x3ff4>
   14f14:	str	r1, [sp, #4]
   14f18:	bl	123f8 <__assert_fail@plt+0x1534>
   14f1c:	ldr	r3, [sp, #4]
   14f20:	mov	r0, r3
   14f24:	add	sp, sp, #12
   14f28:	pop	{pc}		; (ldr pc, [sp], #4)
   14f2c:	bl	10de0 <__errno_location@plt>
   14f30:	mov	r2, #12
   14f34:	mov	r3, #0
   14f38:	str	r2, [r0]
   14f3c:	b	14f20 <__assert_fail@plt+0x405c>
   14f40:	push	{r4, r5, r6, lr}
   14f44:	mov	r4, r0
   14f48:	bl	10d5c <__fpending@plt>
   14f4c:	ldr	r5, [r4]
   14f50:	and	r5, r5, #32
   14f54:	mov	r6, r0
   14f58:	mov	r0, r4
   14f5c:	bl	122f8 <__assert_fail@plt+0x1434>
   14f60:	cmp	r5, #0
   14f64:	mov	r4, r0
   14f68:	bne	14f88 <__assert_fail@plt+0x40c4>
   14f6c:	cmp	r0, #0
   14f70:	beq	14f80 <__assert_fail@plt+0x40bc>
   14f74:	cmp	r6, #0
   14f78:	beq	14fa4 <__assert_fail@plt+0x40e0>
   14f7c:	mvn	r4, #0
   14f80:	mov	r0, r4
   14f84:	pop	{r4, r5, r6, pc}
   14f88:	cmp	r0, #0
   14f8c:	bne	14f7c <__assert_fail@plt+0x40b8>
   14f90:	bl	10de0 <__errno_location@plt>
   14f94:	str	r4, [r0]
   14f98:	mvn	r4, #0
   14f9c:	mov	r0, r4
   14fa0:	pop	{r4, r5, r6, pc}
   14fa4:	bl	10de0 <__errno_location@plt>
   14fa8:	ldr	r4, [r0]
   14fac:	subs	r4, r4, #9
   14fb0:	mvnne	r4, #0
   14fb4:	mov	r0, r4
   14fb8:	pop	{r4, r5, r6, pc}
   14fbc:	push	{r4, lr}
   14fc0:	mov	r0, #14
   14fc4:	bl	10e70 <nl_langinfo@plt>
   14fc8:	cmp	r0, #0
   14fcc:	beq	14fe4 <__assert_fail@plt+0x4120>
   14fd0:	ldrb	r2, [r0]
   14fd4:	ldr	r3, [pc, #16]	; 14fec <__assert_fail@plt+0x4128>
   14fd8:	cmp	r2, #0
   14fdc:	moveq	r0, r3
   14fe0:	pop	{r4, pc}
   14fe4:	ldr	r0, [pc]	; 14fec <__assert_fail@plt+0x4128>
   14fe8:	pop	{r4, pc}
   14fec:	muleq	r1, r4, r4
   14ff0:	push	{r4, r5, r6, r7, lr}
   14ff4:	subs	r6, r0, #0
   14ff8:	sub	sp, sp, #12
   14ffc:	addeq	r6, sp, #4
   15000:	mov	r0, r6
   15004:	mov	r5, r2
   15008:	mov	r7, r1
   1500c:	bl	10d68 <mbrtowc@plt>
   15010:	cmp	r5, #0
   15014:	cmnne	r0, #3
   15018:	mov	r4, r0
   1501c:	bls	15038 <__assert_fail@plt+0x4174>
   15020:	mov	r0, #0
   15024:	bl	15090 <__assert_fail@plt+0x41cc>
   15028:	cmp	r0, #0
   1502c:	moveq	r4, #1
   15030:	ldrbeq	r3, [r7]
   15034:	streq	r3, [r6]
   15038:	mov	r0, r4
   1503c:	add	sp, sp, #12
   15040:	pop	{r4, r5, r6, r7, pc}
   15044:	push	{r4, r5, r6, lr}
   15048:	subs	r4, r2, #0
   1504c:	mov	r6, r0
   15050:	mov	r5, r1
   15054:	beq	15080 <__assert_fail@plt+0x41bc>
   15058:	mov	r1, r4
   1505c:	mvn	r0, #0
   15060:	bl	15184 <__assert_fail@plt+0x42c0>
   15064:	cmp	r0, r5
   15068:	bcs	15080 <__assert_fail@plt+0x41bc>
   1506c:	bl	10de0 <__errno_location@plt>
   15070:	mov	r3, #12
   15074:	str	r3, [r0]
   15078:	mov	r0, #0
   1507c:	pop	{r4, r5, r6, pc}
   15080:	mul	r1, r5, r4
   15084:	mov	r0, r6
   15088:	pop	{r4, r5, r6, lr}
   1508c:	b	14ee4 <__assert_fail@plt+0x4020>
   15090:	push	{lr}		; (str lr, [sp, #-4]!)
   15094:	sub	sp, sp, #268	; 0x10c
   15098:	add	r1, sp, #4
   1509c:	ldr	r2, [pc, #60]	; 150e0 <__assert_fail@plt+0x421c>
   150a0:	bl	150ec <__assert_fail@plt+0x4228>
   150a4:	cmp	r0, #0
   150a8:	movne	r0, #0
   150ac:	bne	150d8 <__assert_fail@plt+0x4214>
   150b0:	ldr	r1, [pc, #44]	; 150e4 <__assert_fail@plt+0x4220>
   150b4:	add	r0, sp, #4
   150b8:	bl	10c90 <strcmp@plt>
   150bc:	cmp	r0, #0
   150c0:	beq	150d8 <__assert_fail@plt+0x4214>
   150c4:	add	r0, sp, #4
   150c8:	ldr	r1, [pc, #24]	; 150e8 <__assert_fail@plt+0x4224>
   150cc:	bl	10c90 <strcmp@plt>
   150d0:	adds	r0, r0, #0
   150d4:	movne	r0, #1
   150d8:	add	sp, sp, #268	; 0x10c
   150dc:	pop	{pc}		; (ldr pc, [sp], #4)
   150e0:	andeq	r0, r0, r1, lsl #2
   150e4:	muleq	r1, ip, r4
   150e8:	andeq	r6, r1, r0, lsr #9
   150ec:	push	{r4, r5, r6, lr}
   150f0:	mov	r5, r1
   150f4:	mov	r1, #0
   150f8:	mov	r4, r2
   150fc:	bl	10e58 <setlocale@plt>
   15100:	subs	r6, r0, #0
   15104:	beq	15160 <__assert_fail@plt+0x429c>
   15108:	bl	10dd4 <strlen@plt>
   1510c:	cmp	r4, r0
   15110:	bhi	15148 <__assert_fail@plt+0x4284>
   15114:	cmp	r4, #0
   15118:	bne	15124 <__assert_fail@plt+0x4260>
   1511c:	mov	r0, #34	; 0x22
   15120:	pop	{r4, r5, r6, pc}
   15124:	sub	r4, r4, #1
   15128:	mov	r1, r6
   1512c:	mov	r2, r4
   15130:	mov	r0, r5
   15134:	bl	10ccc <memcpy@plt>
   15138:	mov	r3, #0
   1513c:	strb	r3, [r5, r4]
   15140:	mov	r0, #34	; 0x22
   15144:	pop	{r4, r5, r6, pc}
   15148:	add	r2, r0, #1
   1514c:	mov	r1, r6
   15150:	mov	r0, r5
   15154:	bl	10ccc <memcpy@plt>
   15158:	mov	r0, #0
   1515c:	pop	{r4, r5, r6, pc}
   15160:	cmp	r4, #0
   15164:	beq	15174 <__assert_fail@plt+0x42b0>
   15168:	strb	r6, [r5]
   1516c:	mov	r0, #22
   15170:	pop	{r4, r5, r6, pc}
   15174:	mov	r0, #22
   15178:	pop	{r4, r5, r6, pc}
   1517c:	mov	r1, #0
   15180:	b	10e58 <setlocale@plt>
   15184:	subs	r2, r1, #1
   15188:	bxeq	lr
   1518c:	bcc	15364 <__assert_fail@plt+0x44a0>
   15190:	cmp	r0, r1
   15194:	bls	15348 <__assert_fail@plt+0x4484>
   15198:	tst	r1, r2
   1519c:	beq	15354 <__assert_fail@plt+0x4490>
   151a0:	clz	r3, r0
   151a4:	clz	r2, r1
   151a8:	sub	r3, r2, r3
   151ac:	rsbs	r3, r3, #31
   151b0:	addne	r3, r3, r3, lsl #1
   151b4:	mov	r2, #0
   151b8:	addne	pc, pc, r3, lsl #2
   151bc:	nop			; (mov r0, r0)
   151c0:	cmp	r0, r1, lsl #31
   151c4:	adc	r2, r2, r2
   151c8:	subcs	r0, r0, r1, lsl #31
   151cc:	cmp	r0, r1, lsl #30
   151d0:	adc	r2, r2, r2
   151d4:	subcs	r0, r0, r1, lsl #30
   151d8:	cmp	r0, r1, lsl #29
   151dc:	adc	r2, r2, r2
   151e0:	subcs	r0, r0, r1, lsl #29
   151e4:	cmp	r0, r1, lsl #28
   151e8:	adc	r2, r2, r2
   151ec:	subcs	r0, r0, r1, lsl #28
   151f0:	cmp	r0, r1, lsl #27
   151f4:	adc	r2, r2, r2
   151f8:	subcs	r0, r0, r1, lsl #27
   151fc:	cmp	r0, r1, lsl #26
   15200:	adc	r2, r2, r2
   15204:	subcs	r0, r0, r1, lsl #26
   15208:	cmp	r0, r1, lsl #25
   1520c:	adc	r2, r2, r2
   15210:	subcs	r0, r0, r1, lsl #25
   15214:	cmp	r0, r1, lsl #24
   15218:	adc	r2, r2, r2
   1521c:	subcs	r0, r0, r1, lsl #24
   15220:	cmp	r0, r1, lsl #23
   15224:	adc	r2, r2, r2
   15228:	subcs	r0, r0, r1, lsl #23
   1522c:	cmp	r0, r1, lsl #22
   15230:	adc	r2, r2, r2
   15234:	subcs	r0, r0, r1, lsl #22
   15238:	cmp	r0, r1, lsl #21
   1523c:	adc	r2, r2, r2
   15240:	subcs	r0, r0, r1, lsl #21
   15244:	cmp	r0, r1, lsl #20
   15248:	adc	r2, r2, r2
   1524c:	subcs	r0, r0, r1, lsl #20
   15250:	cmp	r0, r1, lsl #19
   15254:	adc	r2, r2, r2
   15258:	subcs	r0, r0, r1, lsl #19
   1525c:	cmp	r0, r1, lsl #18
   15260:	adc	r2, r2, r2
   15264:	subcs	r0, r0, r1, lsl #18
   15268:	cmp	r0, r1, lsl #17
   1526c:	adc	r2, r2, r2
   15270:	subcs	r0, r0, r1, lsl #17
   15274:	cmp	r0, r1, lsl #16
   15278:	adc	r2, r2, r2
   1527c:	subcs	r0, r0, r1, lsl #16
   15280:	cmp	r0, r1, lsl #15
   15284:	adc	r2, r2, r2
   15288:	subcs	r0, r0, r1, lsl #15
   1528c:	cmp	r0, r1, lsl #14
   15290:	adc	r2, r2, r2
   15294:	subcs	r0, r0, r1, lsl #14
   15298:	cmp	r0, r1, lsl #13
   1529c:	adc	r2, r2, r2
   152a0:	subcs	r0, r0, r1, lsl #13
   152a4:	cmp	r0, r1, lsl #12
   152a8:	adc	r2, r2, r2
   152ac:	subcs	r0, r0, r1, lsl #12
   152b0:	cmp	r0, r1, lsl #11
   152b4:	adc	r2, r2, r2
   152b8:	subcs	r0, r0, r1, lsl #11
   152bc:	cmp	r0, r1, lsl #10
   152c0:	adc	r2, r2, r2
   152c4:	subcs	r0, r0, r1, lsl #10
   152c8:	cmp	r0, r1, lsl #9
   152cc:	adc	r2, r2, r2
   152d0:	subcs	r0, r0, r1, lsl #9
   152d4:	cmp	r0, r1, lsl #8
   152d8:	adc	r2, r2, r2
   152dc:	subcs	r0, r0, r1, lsl #8
   152e0:	cmp	r0, r1, lsl #7
   152e4:	adc	r2, r2, r2
   152e8:	subcs	r0, r0, r1, lsl #7
   152ec:	cmp	r0, r1, lsl #6
   152f0:	adc	r2, r2, r2
   152f4:	subcs	r0, r0, r1, lsl #6
   152f8:	cmp	r0, r1, lsl #5
   152fc:	adc	r2, r2, r2
   15300:	subcs	r0, r0, r1, lsl #5
   15304:	cmp	r0, r1, lsl #4
   15308:	adc	r2, r2, r2
   1530c:	subcs	r0, r0, r1, lsl #4
   15310:	cmp	r0, r1, lsl #3
   15314:	adc	r2, r2, r2
   15318:	subcs	r0, r0, r1, lsl #3
   1531c:	cmp	r0, r1, lsl #2
   15320:	adc	r2, r2, r2
   15324:	subcs	r0, r0, r1, lsl #2
   15328:	cmp	r0, r1, lsl #1
   1532c:	adc	r2, r2, r2
   15330:	subcs	r0, r0, r1, lsl #1
   15334:	cmp	r0, r1
   15338:	adc	r2, r2, r2
   1533c:	subcs	r0, r0, r1
   15340:	mov	r0, r2
   15344:	bx	lr
   15348:	moveq	r0, #1
   1534c:	movne	r0, #0
   15350:	bx	lr
   15354:	clz	r2, r1
   15358:	rsb	r2, r2, #31
   1535c:	lsr	r0, r0, r2
   15360:	bx	lr
   15364:	cmp	r0, #0
   15368:	mvnne	r0, #0
   1536c:	b	1560c <__assert_fail@plt+0x4748>
   15370:	cmp	r1, #0
   15374:	beq	15364 <__assert_fail@plt+0x44a0>
   15378:	push	{r0, r1, lr}
   1537c:	bl	15184 <__assert_fail@plt+0x42c0>
   15380:	pop	{r1, r2, lr}
   15384:	mul	r3, r2, r0
   15388:	sub	r1, r1, r3
   1538c:	bx	lr
   15390:	cmp	r1, #0
   15394:	beq	155a0 <__assert_fail@plt+0x46dc>
   15398:	eor	ip, r0, r1
   1539c:	rsbmi	r1, r1, #0
   153a0:	subs	r2, r1, #1
   153a4:	beq	1556c <__assert_fail@plt+0x46a8>
   153a8:	movs	r3, r0
   153ac:	rsbmi	r3, r0, #0
   153b0:	cmp	r3, r1
   153b4:	bls	15578 <__assert_fail@plt+0x46b4>
   153b8:	tst	r1, r2
   153bc:	beq	15588 <__assert_fail@plt+0x46c4>
   153c0:	clz	r2, r3
   153c4:	clz	r0, r1
   153c8:	sub	r2, r0, r2
   153cc:	rsbs	r2, r2, #31
   153d0:	addne	r2, r2, r2, lsl #1
   153d4:	mov	r0, #0
   153d8:	addne	pc, pc, r2, lsl #2
   153dc:	nop			; (mov r0, r0)
   153e0:	cmp	r3, r1, lsl #31
   153e4:	adc	r0, r0, r0
   153e8:	subcs	r3, r3, r1, lsl #31
   153ec:	cmp	r3, r1, lsl #30
   153f0:	adc	r0, r0, r0
   153f4:	subcs	r3, r3, r1, lsl #30
   153f8:	cmp	r3, r1, lsl #29
   153fc:	adc	r0, r0, r0
   15400:	subcs	r3, r3, r1, lsl #29
   15404:	cmp	r3, r1, lsl #28
   15408:	adc	r0, r0, r0
   1540c:	subcs	r3, r3, r1, lsl #28
   15410:	cmp	r3, r1, lsl #27
   15414:	adc	r0, r0, r0
   15418:	subcs	r3, r3, r1, lsl #27
   1541c:	cmp	r3, r1, lsl #26
   15420:	adc	r0, r0, r0
   15424:	subcs	r3, r3, r1, lsl #26
   15428:	cmp	r3, r1, lsl #25
   1542c:	adc	r0, r0, r0
   15430:	subcs	r3, r3, r1, lsl #25
   15434:	cmp	r3, r1, lsl #24
   15438:	adc	r0, r0, r0
   1543c:	subcs	r3, r3, r1, lsl #24
   15440:	cmp	r3, r1, lsl #23
   15444:	adc	r0, r0, r0
   15448:	subcs	r3, r3, r1, lsl #23
   1544c:	cmp	r3, r1, lsl #22
   15450:	adc	r0, r0, r0
   15454:	subcs	r3, r3, r1, lsl #22
   15458:	cmp	r3, r1, lsl #21
   1545c:	adc	r0, r0, r0
   15460:	subcs	r3, r3, r1, lsl #21
   15464:	cmp	r3, r1, lsl #20
   15468:	adc	r0, r0, r0
   1546c:	subcs	r3, r3, r1, lsl #20
   15470:	cmp	r3, r1, lsl #19
   15474:	adc	r0, r0, r0
   15478:	subcs	r3, r3, r1, lsl #19
   1547c:	cmp	r3, r1, lsl #18
   15480:	adc	r0, r0, r0
   15484:	subcs	r3, r3, r1, lsl #18
   15488:	cmp	r3, r1, lsl #17
   1548c:	adc	r0, r0, r0
   15490:	subcs	r3, r3, r1, lsl #17
   15494:	cmp	r3, r1, lsl #16
   15498:	adc	r0, r0, r0
   1549c:	subcs	r3, r3, r1, lsl #16
   154a0:	cmp	r3, r1, lsl #15
   154a4:	adc	r0, r0, r0
   154a8:	subcs	r3, r3, r1, lsl #15
   154ac:	cmp	r3, r1, lsl #14
   154b0:	adc	r0, r0, r0
   154b4:	subcs	r3, r3, r1, lsl #14
   154b8:	cmp	r3, r1, lsl #13
   154bc:	adc	r0, r0, r0
   154c0:	subcs	r3, r3, r1, lsl #13
   154c4:	cmp	r3, r1, lsl #12
   154c8:	adc	r0, r0, r0
   154cc:	subcs	r3, r3, r1, lsl #12
   154d0:	cmp	r3, r1, lsl #11
   154d4:	adc	r0, r0, r0
   154d8:	subcs	r3, r3, r1, lsl #11
   154dc:	cmp	r3, r1, lsl #10
   154e0:	adc	r0, r0, r0
   154e4:	subcs	r3, r3, r1, lsl #10
   154e8:	cmp	r3, r1, lsl #9
   154ec:	adc	r0, r0, r0
   154f0:	subcs	r3, r3, r1, lsl #9
   154f4:	cmp	r3, r1, lsl #8
   154f8:	adc	r0, r0, r0
   154fc:	subcs	r3, r3, r1, lsl #8
   15500:	cmp	r3, r1, lsl #7
   15504:	adc	r0, r0, r0
   15508:	subcs	r3, r3, r1, lsl #7
   1550c:	cmp	r3, r1, lsl #6
   15510:	adc	r0, r0, r0
   15514:	subcs	r3, r3, r1, lsl #6
   15518:	cmp	r3, r1, lsl #5
   1551c:	adc	r0, r0, r0
   15520:	subcs	r3, r3, r1, lsl #5
   15524:	cmp	r3, r1, lsl #4
   15528:	adc	r0, r0, r0
   1552c:	subcs	r3, r3, r1, lsl #4
   15530:	cmp	r3, r1, lsl #3
   15534:	adc	r0, r0, r0
   15538:	subcs	r3, r3, r1, lsl #3
   1553c:	cmp	r3, r1, lsl #2
   15540:	adc	r0, r0, r0
   15544:	subcs	r3, r3, r1, lsl #2
   15548:	cmp	r3, r1, lsl #1
   1554c:	adc	r0, r0, r0
   15550:	subcs	r3, r3, r1, lsl #1
   15554:	cmp	r3, r1
   15558:	adc	r0, r0, r0
   1555c:	subcs	r3, r3, r1
   15560:	cmp	ip, #0
   15564:	rsbmi	r0, r0, #0
   15568:	bx	lr
   1556c:	teq	ip, r0
   15570:	rsbmi	r0, r0, #0
   15574:	bx	lr
   15578:	movcc	r0, #0
   1557c:	asreq	r0, ip, #31
   15580:	orreq	r0, r0, #1
   15584:	bx	lr
   15588:	clz	r2, r1
   1558c:	rsb	r2, r2, #31
   15590:	cmp	ip, #0
   15594:	lsr	r0, r3, r2
   15598:	rsbmi	r0, r0, #0
   1559c:	bx	lr
   155a0:	cmp	r0, #0
   155a4:	mvngt	r0, #-2147483648	; 0x80000000
   155a8:	movlt	r0, #-2147483648	; 0x80000000
   155ac:	b	1560c <__assert_fail@plt+0x4748>
   155b0:	cmp	r1, #0
   155b4:	beq	155a0 <__assert_fail@plt+0x46dc>
   155b8:	push	{r0, r1, lr}
   155bc:	bl	15398 <__assert_fail@plt+0x44d4>
   155c0:	pop	{r1, r2, lr}
   155c4:	mul	r3, r2, r0
   155c8:	sub	r1, r1, r3
   155cc:	bx	lr
   155d0:	cmp	r3, #0
   155d4:	cmpeq	r2, #0
   155d8:	bne	155f0 <__assert_fail@plt+0x472c>
   155dc:	cmp	r1, #0
   155e0:	cmpeq	r0, #0
   155e4:	mvnne	r1, #0
   155e8:	mvnne	r0, #0
   155ec:	b	1560c <__assert_fail@plt+0x4748>
   155f0:	sub	sp, sp, #8
   155f4:	push	{sp, lr}
   155f8:	bl	1561c <__assert_fail@plt+0x4758>
   155fc:	ldr	lr, [sp, #4]
   15600:	add	sp, sp, #8
   15604:	pop	{r2, r3}
   15608:	bx	lr
   1560c:	push	{r1, lr}
   15610:	mov	r0, #8
   15614:	bl	10c84 <raise@plt>
   15618:	pop	{r1, pc}
   1561c:	cmp	r1, r3
   15620:	push	{r4, r5, r6, r7, r8, r9, lr}
   15624:	cmpeq	r0, r2
   15628:	mov	r4, r0
   1562c:	mov	r5, r1
   15630:	ldr	r9, [sp, #28]
   15634:	movcc	r0, #0
   15638:	movcc	r1, #0
   1563c:	bcc	15734 <__assert_fail@plt+0x4870>
   15640:	cmp	r3, #0
   15644:	clzeq	ip, r2
   15648:	clzne	ip, r3
   1564c:	addeq	ip, ip, #32
   15650:	cmp	r5, #0
   15654:	clzeq	r1, r4
   15658:	addeq	r1, r1, #32
   1565c:	clzne	r1, r5
   15660:	sub	ip, ip, r1
   15664:	sub	lr, ip, #32
   15668:	lsl	r7, r3, ip
   1566c:	rsb	r8, ip, #32
   15670:	orr	r7, r7, r2, lsl lr
   15674:	orr	r7, r7, r2, lsr r8
   15678:	lsl	r6, r2, ip
   1567c:	cmp	r5, r7
   15680:	cmpeq	r4, r6
   15684:	movcc	r0, #0
   15688:	movcc	r1, #0
   1568c:	bcc	156a8 <__assert_fail@plt+0x47e4>
   15690:	mov	r3, #1
   15694:	subs	r4, r4, r6
   15698:	lsl	r1, r3, lr
   1569c:	lsl	r0, r3, ip
   156a0:	orr	r1, r1, r3, lsr r8
   156a4:	sbc	r5, r5, r7
   156a8:	cmp	ip, #0
   156ac:	beq	15734 <__assert_fail@plt+0x4870>
   156b0:	lsrs	r3, r7, #1
   156b4:	rrx	r2, r6
   156b8:	mov	r6, ip
   156bc:	b	156e0 <__assert_fail@plt+0x481c>
   156c0:	subs	r4, r4, r2
   156c4:	sbc	r5, r5, r3
   156c8:	adds	r4, r4, r4
   156cc:	adc	r5, r5, r5
   156d0:	adds	r4, r4, #1
   156d4:	adc	r5, r5, #0
   156d8:	subs	r6, r6, #1
   156dc:	beq	156fc <__assert_fail@plt+0x4838>
   156e0:	cmp	r5, r3
   156e4:	cmpeq	r4, r2
   156e8:	bcs	156c0 <__assert_fail@plt+0x47fc>
   156ec:	adds	r4, r4, r4
   156f0:	adc	r5, r5, r5
   156f4:	subs	r6, r6, #1
   156f8:	bne	156e0 <__assert_fail@plt+0x481c>
   156fc:	lsr	r6, r4, ip
   15700:	lsr	r7, r5, ip
   15704:	orr	r6, r6, r5, lsl r8
   15708:	adds	r2, r0, r4
   1570c:	orr	r6, r6, r5, lsr lr
   15710:	adc	r3, r1, r5
   15714:	lsl	r1, r7, ip
   15718:	orr	r1, r1, r6, lsl lr
   1571c:	lsl	r0, r6, ip
   15720:	orr	r1, r1, r6, lsr r8
   15724:	subs	r0, r2, r0
   15728:	mov	r4, r6
   1572c:	mov	r5, r7
   15730:	sbc	r1, r3, r1
   15734:	cmp	r9, #0
   15738:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1573c:	strd	r4, [r9]
   15740:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15744:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15748:	mov	r7, r0
   1574c:	ldr	r6, [pc, #72]	; 1579c <__assert_fail@plt+0x48d8>
   15750:	ldr	r5, [pc, #72]	; 157a0 <__assert_fail@plt+0x48dc>
   15754:	add	r6, pc, r6
   15758:	add	r5, pc, r5
   1575c:	sub	r6, r6, r5
   15760:	mov	r8, r1
   15764:	mov	r9, r2
   15768:	bl	10c4c <calloc@plt-0x20>
   1576c:	asrs	r6, r6, #2
   15770:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15774:	mov	r4, #0
   15778:	add	r4, r4, #1
   1577c:	ldr	r3, [r5], #4
   15780:	mov	r2, r9
   15784:	mov	r1, r8
   15788:	mov	r0, r7
   1578c:	blx	r3
   15790:	cmp	r6, r4
   15794:	bne	15778 <__assert_fail@plt+0x48b4>
   15798:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1579c:			; <UNDEFINED> instruction: 0x000117b4
   157a0:	andeq	r1, r1, ip, lsr #15
   157a4:	bx	lr
   157a8:	ldr	r3, [pc, #12]	; 157bc <__assert_fail@plt+0x48f8>
   157ac:	mov	r1, #0
   157b0:	add	r3, pc, r3
   157b4:	ldr	r2, [r3]
   157b8:	b	10dec <__cxa_atexit@plt>
   157bc:	andeq	r1, r1, r8, lsr #18

Disassembly of section .fini:

000157c0 <.fini>:
   157c0:	push	{r3, lr}
   157c4:	pop	{r3, pc}
