
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

0001120c <.init>:
   1120c:	push	{r3, lr}
   11210:	bl	124b8 <__assert_fail@plt+0xeb4>
   11214:	pop	{r3, pc}

Disassembly of section .plt:

00011218 <fstatfs64@plt-0x14>:
   11218:	push	{lr}		; (str lr, [sp, #-4]!)
   1121c:	ldr	lr, [pc, #4]	; 11228 <fstatfs64@plt-0x4>
   11220:	add	lr, pc, lr
   11224:	ldr	pc, [lr, #8]!
   11228:	ldrdeq	sl, [r1], -r8

0001122c <fstatfs64@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3544]!	; 0xdd8

00011238 <calloc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3536]!	; 0xdd0

00011244 <fputs_unlocked@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011250 <raise@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3520]!	; 0xdc0

0001125c <is_selinux_enabled@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3512]!	; 0xdb8

00011268 <strcmp@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3504]!	; 0xdb0

00011274 <fflush@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3496]!	; 0xda8

00011280 <lsetfilecon@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3488]!	; 0xda0

0001128c <memmove@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3480]!	; 0xd98

00011298 <free@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3472]!	; 0xd90

000112a4 <_exit@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3464]!	; 0xd88

000112b0 <memcpy@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3456]!	; 0xd80

000112bc <mbsinit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3448]!	; 0xd78

000112c8 <context_new@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3440]!	; 0xd70

000112d4 <memcmp@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3432]!	; 0xd68

000112e0 <fputc_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3424]!	; 0xd60

000112ec <context_role_set@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3416]!	; 0xd58

000112f8 <dcgettext@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3408]!	; 0xd50

00011304 <context_type_set@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3400]!	; 0xd48

00011310 <realloc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3392]!	; 0xd40

0001131c <fgetfilecon@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3384]!	; 0xd38

00011328 <textdomain@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3376]!	; 0xd30

00011334 <chdir@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3368]!	; 0xd28

00011340 <__fxstatat64@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #106496	; 0x1a000
   11348:	ldr	pc, [ip, #3360]!	; 0xd20

0001134c <iswprint@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #106496	; 0x1a000
   11354:	ldr	pc, [ip, #3352]!	; 0xd18

00011358 <__fxstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #106496	; 0x1a000
   11360:	ldr	pc, [ip, #3344]!	; 0xd10

00011364 <fwrite@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #106496	; 0x1a000
   1136c:	ldr	pc, [ip, #3336]!	; 0xd08

00011370 <lseek64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #106496	; 0x1a000
   11378:	ldr	pc, [ip, #3328]!	; 0xd00

0001137c <__ctype_get_mb_cur_max@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #106496	; 0x1a000
   11384:	ldr	pc, [ip, #3320]!	; 0xcf8

00011388 <strcpy@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #106496	; 0x1a000
   11390:	ldr	pc, [ip, #3312]!	; 0xcf0

00011394 <__fpending@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #106496	; 0x1a000
   1139c:	ldr	pc, [ip, #3304]!	; 0xce8

000113a0 <mbrtowc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #106496	; 0x1a000
   113a8:	ldr	pc, [ip, #3296]!	; 0xce0

000113ac <error@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #106496	; 0x1a000
   113b4:	ldr	pc, [ip, #3288]!	; 0xcd8

000113b8 <security_check_context@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #106496	; 0x1a000
   113c0:	ldr	pc, [ip, #3280]!	; 0xcd0

000113c4 <open64@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #106496	; 0x1a000
   113cc:	ldr	pc, [ip, #3272]!	; 0xcc8

000113d0 <lgetfilecon@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #106496	; 0x1a000
   113d8:	ldr	pc, [ip, #3264]!	; 0xcc0

000113dc <malloc@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #106496	; 0x1a000
   113e4:	ldr	pc, [ip, #3256]!	; 0xcb8

000113e8 <__libc_start_main@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #106496	; 0x1a000
   113f0:	ldr	pc, [ip, #3248]!	; 0xcb0

000113f4 <__freading@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #106496	; 0x1a000
   113fc:	ldr	pc, [ip, #3240]!	; 0xca8

00011400 <__gmon_start__@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #106496	; 0x1a000
   11408:	ldr	pc, [ip, #3232]!	; 0xca0

0001140c <context_free@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3224]!	; 0xc98

00011418 <getopt_long@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3216]!	; 0xc90

00011424 <__ctype_b_loc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3208]!	; 0xc88

00011430 <getcwd@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3200]!	; 0xc80

0001143c <exit@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3192]!	; 0xc78

00011448 <context_user_set@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3184]!	; 0xc70

00011454 <getfilecon@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3176]!	; 0xc68

00011460 <strlen@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3168]!	; 0xc60

0001146c <openat64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3160]!	; 0xc58

00011478 <memrchr@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #3152]!	; 0xc50

00011484 <__errno_location@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #3144]!	; 0xc48

00011490 <__sprintf_chk@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #3136]!	; 0xc40

0001149c <__cxa_atexit@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #3128]!	; 0xc38

000114a8 <memset@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #3120]!	; 0xc30

000114b4 <__printf_chk@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #3112]!	; 0xc28

000114c0 <fileno@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #3104]!	; 0xc20

000114cc <__fprintf_chk@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #3096]!	; 0xc18

000114d8 <memchr@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #3088]!	; 0xc10

000114e4 <setfilecon@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #3080]!	; 0xc08

000114f0 <access@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #3072]!	; 0xc00

000114fc <fclose@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #3064]!	; 0xbf8

00011508 <fseeko64@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #3056]!	; 0xbf0

00011514 <fcntl64@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011520 <setlocale@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #3040]!	; 0xbe0

0001152c <strrchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #3032]!	; 0xbd8

00011538 <nl_langinfo@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #3024]!	; 0xbd0

00011544 <readdir64@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011550 <fdopendir@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #3008]!	; 0xbc0

0001155c <dirfd@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #3000]!	; 0xbb8

00011568 <fchdir@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #2992]!	; 0xbb0

00011574 <qsort@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #106496	; 0x1a000
   1157c:	ldr	pc, [ip, #2984]!	; 0xba8

00011580 <freecon@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #106496	; 0x1a000
   11588:	ldr	pc, [ip, #2976]!	; 0xba0

0001158c <bindtextdomain@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #106496	; 0x1a000
   11594:	ldr	pc, [ip, #2968]!	; 0xb98

00011598 <context_range_set@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #106496	; 0x1a000
   115a0:	ldr	pc, [ip, #2960]!	; 0xb90

000115a4 <context_str@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #106496	; 0x1a000
   115ac:	ldr	pc, [ip, #2952]!	; 0xb88

000115b0 <__xstat64@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #106496	; 0x1a000
   115b8:	ldr	pc, [ip, #2944]!	; 0xb80

000115bc <strncmp@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #106496	; 0x1a000
   115c4:	ldr	pc, [ip, #2936]!	; 0xb78

000115c8 <abort@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #106496	; 0x1a000
   115d0:	ldr	pc, [ip, #2928]!	; 0xb70

000115d4 <close@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #106496	; 0x1a000
   115dc:	ldr	pc, [ip, #2920]!	; 0xb68

000115e0 <__lxstat64@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #106496	; 0x1a000
   115e8:	ldr	pc, [ip, #2912]!	; 0xb60

000115ec <closedir@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #106496	; 0x1a000
   115f4:	ldr	pc, [ip, #2904]!	; 0xb58

000115f8 <strspn@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #106496	; 0x1a000
   11600:	ldr	pc, [ip, #2896]!	; 0xb50

00011604 <__assert_fail@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #106496	; 0x1a000
   1160c:	ldr	pc, [ip, #2888]!	; 0xb48

Disassembly of section .text:

00011610 <.text>:
   11610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11614:	mov	r6, r0
   11618:	sub	sp, sp, #44	; 0x2c
   1161c:	ldr	r0, [r1]
   11620:	mov	r5, r1
   11624:	bl	15c7c <__assert_fail@plt+0x4678>
   11628:	ldr	r1, [pc, #3480]	; 123c8 <__assert_fail@plt+0xdc4>
   1162c:	mov	r0, #6
   11630:	bl	11520 <setlocale@plt>
   11634:	ldr	r1, [pc, #3472]	; 123cc <__assert_fail@plt+0xdc8>
   11638:	ldr	r0, [pc, #3472]	; 123d0 <__assert_fail@plt+0xdcc>
   1163c:	bl	1158c <bindtextdomain@plt>
   11640:	ldr	r0, [pc, #3464]	; 123d0 <__assert_fail@plt+0xdcc>
   11644:	bl	11328 <textdomain@plt>
   11648:	ldr	r8, [pc, #3460]	; 123d4 <__assert_fail@plt+0xdd0>
   1164c:	ldr	r0, [pc, #3460]	; 123d8 <__assert_fail@plt+0xdd4>
   11650:	ldr	r7, [pc, #3460]	; 123dc <__assert_fail@plt+0xdd8>
   11654:	ldr	sl, [pc, #3460]	; 123e0 <__assert_fail@plt+0xddc>
   11658:	ldr	fp, [pc, #3460]	; 123e4 <__assert_fail@plt+0xde0>
   1165c:	bl	1a244 <__assert_fail@plt+0x8c40>
   11660:	mvn	r3, #0
   11664:	mov	r9, #0
   11668:	str	r3, [sp, #24]
   1166c:	mov	r3, #16
   11670:	str	r9, [sp, #16]
   11674:	str	r9, [sp, #28]
   11678:	str	r3, [sp, #20]
   1167c:	mov	r4, #0
   11680:	str	r4, [sp]
   11684:	mov	r3, r8
   11688:	mov	r2, r7
   1168c:	mov	r1, r5
   11690:	mov	r0, r6
   11694:	bl	11418 <getopt_long@plt>
   11698:	cmn	r0, #1
   1169c:	beq	11848 <__assert_fail@plt+0x244>
   116a0:	cmp	r0, #108	; 0x6c
   116a4:	beq	11834 <__assert_fail@plt+0x230>
   116a8:	bgt	116dc <__assert_fail@plt+0xd8>
   116ac:	cmp	r0, #76	; 0x4c
   116b0:	beq	11828 <__assert_fail@plt+0x224>
   116b4:	ble	11718 <__assert_fail@plt+0x114>
   116b8:	cmp	r0, #82	; 0x52
   116bc:	beq	1181c <__assert_fail@plt+0x218>
   116c0:	ble	117a0 <__assert_fail@plt+0x19c>
   116c4:	cmp	r0, #102	; 0x66
   116c8:	beq	1167c <__assert_fail@plt+0x78>
   116cc:	cmp	r0, #104	; 0x68
   116d0:	bne	11730 <__assert_fail@plt+0x12c>
   116d4:	str	r4, [sp, #24]
   116d8:	b	1167c <__assert_fail@plt+0x78>
   116dc:	cmp	r0, #118	; 0x76
   116e0:	beq	11810 <__assert_fail@plt+0x20c>
   116e4:	ble	11738 <__assert_fail@plt+0x134>
   116e8:	ldr	r3, [pc, #3320]	; 123e8 <__assert_fail@plt+0xde4>
   116ec:	cmp	r0, r3
   116f0:	beq	11808 <__assert_fail@plt+0x204>
   116f4:	ble	1178c <__assert_fail@plt+0x188>
   116f8:	ldr	r3, [pc, #3308]	; 123ec <__assert_fail@plt+0xde8>
   116fc:	cmp	r0, r3
   11700:	beq	11760 <__assert_fail@plt+0x15c>
   11704:	add	r3, r3, #1
   11708:	cmp	r0, r3
   1170c:	bne	11730 <__assert_fail@plt+0x12c>
   11710:	ldr	r9, [fp]
   11714:	b	1167c <__assert_fail@plt+0x78>
   11718:	cmn	r0, #2
   1171c:	beq	11800 <__assert_fail@plt+0x1fc>
   11720:	cmp	r0, #72	; 0x48
   11724:	beq	11780 <__assert_fail@plt+0x17c>
   11728:	cmn	r0, #3
   1172c:	beq	117b4 <__assert_fail@plt+0x1b0>
   11730:	mov	r0, #1
   11734:	bl	125a4 <__assert_fail@plt+0xfa0>
   11738:	cmp	r0, #116	; 0x74
   1173c:	beq	117ec <__assert_fail@plt+0x1e8>
   11740:	bgt	1176c <__assert_fail@plt+0x168>
   11744:	cmp	r0, #114	; 0x72
   11748:	bne	11730 <__assert_fail@plt+0x12c>
   1174c:	ldr	r3, [fp]
   11750:	mov	r2, #1
   11754:	str	r2, [sp, #16]
   11758:	str	r3, [sl, #8]
   1175c:	b	1167c <__assert_fail@plt+0x78>
   11760:	mov	r3, #1
   11764:	str	r3, [sp, #28]
   11768:	b	1167c <__assert_fail@plt+0x78>
   1176c:	ldr	r3, [fp]
   11770:	mov	r2, #1
   11774:	str	r2, [sp, #16]
   11778:	str	r3, [sl, #4]
   1177c:	b	1167c <__assert_fail@plt+0x78>
   11780:	mov	r3, #17
   11784:	str	r3, [sp, #20]
   11788:	b	1167c <__assert_fail@plt+0x78>
   1178c:	cmp	r0, #256	; 0x100
   11790:	bne	11730 <__assert_fail@plt+0x12c>
   11794:	mov	r3, #1
   11798:	str	r3, [sp, #24]
   1179c:	b	1167c <__assert_fail@plt+0x78>
   117a0:	cmp	r0, #80	; 0x50
   117a4:	bne	11730 <__assert_fail@plt+0x12c>
   117a8:	mov	r3, #16
   117ac:	str	r3, [sp, #20]
   117b0:	b	1167c <__assert_fail@plt+0x78>
   117b4:	ldr	r3, [pc, #3124]	; 123f0 <__assert_fail@plt+0xdec>
   117b8:	ldr	r0, [pc, #3124]	; 123f4 <__assert_fail@plt+0xdf0>
   117bc:	ldr	r1, [pc, #3124]	; 123f8 <__assert_fail@plt+0xdf4>
   117c0:	ldr	r2, [pc, #3124]	; 123fc <__assert_fail@plt+0xdf8>
   117c4:	str	r4, [sp, #8]
   117c8:	ldr	r0, [r0]
   117cc:	ldr	r3, [r3]
   117d0:	str	r1, [sp, #4]
   117d4:	str	r2, [sp]
   117d8:	ldr	r1, [pc, #3104]	; 12400 <__assert_fail@plt+0xdfc>
   117dc:	ldr	r2, [pc, #3104]	; 12404 <__assert_fail@plt+0xe00>
   117e0:	bl	187dc <__assert_fail@plt+0x71d8>
   117e4:	mov	r0, r4
   117e8:	bl	1143c <exit@plt>
   117ec:	ldr	r3, [fp]
   117f0:	mov	r2, #1
   117f4:	str	r2, [sp, #16]
   117f8:	str	r3, [sl, #12]
   117fc:	b	1167c <__assert_fail@plt+0x78>
   11800:	mov	r0, r4
   11804:	bl	125a4 <__assert_fail@plt+0xfa0>
   11808:	str	r4, [sp, #28]
   1180c:	b	1167c <__assert_fail@plt+0x78>
   11810:	mov	r3, #1
   11814:	strb	r3, [sl, #1]
   11818:	b	1167c <__assert_fail@plt+0x78>
   1181c:	mov	r3, #1
   11820:	strb	r3, [sl]
   11824:	b	1167c <__assert_fail@plt+0x78>
   11828:	mov	r3, #2
   1182c:	str	r3, [sp, #20]
   11830:	b	1167c <__assert_fail@plt+0x78>
   11834:	ldr	r3, [fp]
   11838:	mov	r2, #1
   1183c:	str	r2, [sp, #16]
   11840:	str	r3, [sl, #16]
   11844:	b	1167c <__assert_fail@plt+0x78>
   11848:	ldr	r7, [pc, #2960]	; 123e0 <__assert_fail@plt+0xddc>
   1184c:	ldrb	r3, [r7]
   11850:	cmp	r3, r4
   11854:	beq	1189c <__assert_fail@plt+0x298>
   11858:	ldr	r3, [sp, #20]
   1185c:	cmp	r3, #16
   11860:	ldr	r3, [sp, #24]
   11864:	beq	11e34 <__assert_fail@plt+0x830>
   11868:	cmp	r3, #0
   1186c:	movne	r3, #1
   11870:	strbne	r3, [r7, #20]
   11874:	bne	118b4 <__assert_fail@plt+0x2b0>
   11878:	ldr	r1, [pc, #2952]	; 12408 <__assert_fail@plt+0xe04>
   1187c:	mov	r2, #5
   11880:	mov	r4, r3
   11884:	mov	r0, r4
   11888:	bl	112f8 <dcgettext@plt>
   1188c:	mov	r1, r4
   11890:	mov	r2, r0
   11894:	mov	r0, #1
   11898:	bl	113ac <error@plt>
   1189c:	mov	r3, #16
   118a0:	str	r3, [sp, #20]
   118a4:	ldr	r3, [sp, #24]
   118a8:	adds	r3, r3, #0
   118ac:	movne	r3, #1
   118b0:	strb	r3, [r7, #20]
   118b4:	ldr	r4, [pc, #2896]	; 1240c <__assert_fail@plt+0xe08>
   118b8:	ldr	r3, [sp, #16]
   118bc:	ldr	r2, [r4]
   118c0:	cmp	r9, #0
   118c4:	orrne	r3, r3, #1
   118c8:	cmp	r3, #0
   118cc:	moveq	r3, #2
   118d0:	movne	r3, #1
   118d4:	sub	r1, r6, r2
   118d8:	cmp	r3, r1
   118dc:	bgt	12320 <__assert_fail@plt+0xd1c>
   118e0:	cmp	r9, #0
   118e4:	beq	11e4c <__assert_fail@plt+0x848>
   118e8:	add	r1, sp, #40	; 0x28
   118ec:	mov	r6, #0
   118f0:	str	r6, [r1, #-4]!
   118f4:	mov	r0, r9
   118f8:	bl	18334 <__assert_fail@plt+0x6d30>
   118fc:	cmp	r0, r6
   11900:	blt	12370 <__assert_fail@plt+0xd6c>
   11904:	ldr	r2, [sp, #16]
   11908:	ldr	r3, [sp, #36]	; 0x24
   1190c:	cmp	r2, #0
   11910:	str	r3, [r7, #24]
   11914:	bne	1234c <__assert_fail@plt+0xd48>
   11918:	ldrb	r3, [r7]
   1191c:	ldr	r2, [sp, #28]
   11920:	ands	r3, r2, r3
   11924:	streq	r3, [r7, #48]	; 0x30
   11928:	bne	120dc <__assert_fail@plt+0xad8>
   1192c:	ldr	r0, [r4]
   11930:	ldr	r3, [sp, #20]
   11934:	mov	r2, #0
   11938:	orr	r1, r3, #8
   1193c:	add	r0, r5, r0, lsl #2
   11940:	bl	18e60 <__assert_fail@plt+0x785c>
   11944:	mov	fp, #1
   11948:	mov	r6, #0
   1194c:	mov	r9, r0
   11950:	mov	r0, r9
   11954:	bl	1432c <__assert_fail@plt+0x2d28>
   11958:	subs	r5, r0, #0
   1195c:	beq	11a24 <__assert_fail@plt+0x420>
   11960:	ldrh	r2, [r5, #56]	; 0x38
   11964:	ldr	r4, [r5, #28]
   11968:	sub	r3, r2, #1
   1196c:	cmp	r3, #9
   11970:	ldrls	pc, [pc, r3, lsl #2]
   11974:	b	11c5c <__assert_fail@plt+0x658>
   11978:	muleq	r1, r8, fp
   1197c:	andeq	r1, r1, r4, asr #22
   11980:	andeq	r1, r1, ip, asr ip
   11984:	andeq	r1, r1, r8, lsr fp
   11988:	andeq	r1, r1, ip, asr ip
   1198c:	andeq	r1, r1, r8, lsr #21
   11990:	andeq	r1, r1, ip, ror sl
   11994:	andeq	r1, r1, ip, asr ip
   11998:	andeq	r1, r1, ip, asr ip
   1199c:	andeq	r1, r1, r0, lsr #19
   119a0:	ldr	r3, [r5, #48]	; 0x30
   119a4:	cmp	r3, #0
   119a8:	bne	119b8 <__assert_fail@plt+0x3b4>
   119ac:	ldr	r3, [r5, #16]
   119b0:	cmp	r3, #0
   119b4:	beq	11ca8 <__assert_fail@plt+0x6a4>
   119b8:	ldr	r1, [pc, #2640]	; 12410 <__assert_fail@plt+0xe0c>
   119bc:	mov	r2, #5
   119c0:	mov	r0, r6
   119c4:	ldr	r8, [r5, #32]
   119c8:	bl	112f8 <dcgettext@plt>
   119cc:	mov	r1, r4
   119d0:	mov	sl, r0
   119d4:	mov	r0, #4
   119d8:	bl	178fc <__assert_fail@plt+0x62f8>
   119dc:	mov	r3, r0
   119e0:	mov	r2, sl
   119e4:	mov	r1, r8
   119e8:	mov	r0, r6
   119ec:	bl	113ac <error@plt>
   119f0:	mov	r8, r6
   119f4:	ldrb	r3, [r7]
   119f8:	cmp	r3, #0
   119fc:	bne	11a10 <__assert_fail@plt+0x40c>
   11a00:	mov	r1, r5
   11a04:	mov	r2, #4
   11a08:	mov	r0, r9
   11a0c:	bl	149e4 <__assert_fail@plt+0x33e0>
   11a10:	mov	r0, r9
   11a14:	bl	1432c <__assert_fail@plt+0x2d28>
   11a18:	and	fp, fp, r8
   11a1c:	subs	r5, r0, #0
   11a20:	bne	11960 <__assert_fail@plt+0x35c>
   11a24:	bl	11484 <__errno_location@plt>
   11a28:	ldr	r6, [r0]
   11a2c:	mov	r4, r0
   11a30:	cmp	r6, #0
   11a34:	bne	11ec0 <__assert_fail@plt+0x8bc>
   11a38:	mov	r0, r9
   11a3c:	bl	141cc <__assert_fail@plt+0x2bc8>
   11a40:	cmp	r0, #0
   11a44:	beq	11a70 <__assert_fail@plt+0x46c>
   11a48:	mov	r2, #5
   11a4c:	ldr	r1, [pc, #2496]	; 12414 <__assert_fail@plt+0xe10>
   11a50:	mov	r0, #0
   11a54:	ldr	r4, [r4]
   11a58:	bl	112f8 <dcgettext@plt>
   11a5c:	mov	r1, r4
   11a60:	mov	fp, #0
   11a64:	mov	r2, r0
   11a68:	mov	r0, #0
   11a6c:	bl	113ac <error@plt>
   11a70:	eor	r0, fp, #1
   11a74:	add	sp, sp, #44	; 0x2c
   11a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a7c:	mov	r2, r4
   11a80:	mov	r1, #3
   11a84:	mov	r0, r6
   11a88:	ldr	r8, [r5, #32]
   11a8c:	bl	179b8 <__assert_fail@plt+0x63b4>
   11a90:	mov	r1, r8
   11a94:	ldr	r2, [pc, #2428]	; 12418 <__assert_fail@plt+0xe14>
   11a98:	mov	r3, r0
   11a9c:	mov	r0, r6
   11aa0:	bl	113ac <error@plt>
   11aa4:	b	119f0 <__assert_fail@plt+0x3ec>
   11aa8:	ldrb	r3, [r7]
   11aac:	cmp	r3, #0
   11ab0:	beq	11cc0 <__assert_fail@plt+0x6bc>
   11ab4:	ldr	ip, [r7, #48]	; 0x30
   11ab8:	cmp	ip, #0
   11abc:	beq	11ad4 <__assert_fail@plt+0x4d0>
   11ac0:	ldrd	r0, [r5, #160]	; 0xa0
   11ac4:	ldrd	r2, [ip]
   11ac8:	cmp	r1, r3
   11acc:	cmpeq	r0, r2
   11ad0:	beq	11ee8 <__assert_fail@plt+0x8e4>
   11ad4:	ldrb	r3, [r7, #1]
   11ad8:	ldr	r8, [r5, #24]
   11adc:	cmp	r3, #0
   11ae0:	bne	11c68 <__assert_fail@plt+0x664>
   11ae4:	ldr	r4, [r7, #24]
   11ae8:	str	r6, [sp, #36]	; 0x24
   11aec:	cmp	r4, #0
   11af0:	ldr	sl, [r9, #32]
   11af4:	strne	r6, [sp, #16]
   11af8:	beq	11cc8 <__assert_fail@plt+0x6c4>
   11afc:	ldrb	r3, [r7, #20]
   11b00:	mov	r0, sl
   11b04:	mov	r2, r4
   11b08:	cmp	r3, #0
   11b0c:	mov	r1, r8
   11b10:	beq	11c9c <__assert_fail@plt+0x698>
   11b14:	bl	17f34 <__assert_fail@plt+0x6930>
   11b18:	mov	r3, r0
   11b1c:	cmp	r3, #0
   11b20:	bne	11da0 <__assert_fail@plt+0x79c>
   11b24:	ldr	r2, [r7, #24]
   11b28:	cmp	r2, #0
   11b2c:	beq	11e08 <__assert_fail@plt+0x804>
   11b30:	mov	r8, #1
   11b34:	b	119f4 <__assert_fail@plt+0x3f0>
   11b38:	mov	r2, #5
   11b3c:	ldr	r1, [pc, #2264]	; 1241c <__assert_fail@plt+0xe18>
   11b40:	b	119c0 <__assert_fail@plt+0x3bc>
   11b44:	mov	r1, r5
   11b48:	mov	r0, r9
   11b4c:	bl	18ea8 <__assert_fail@plt+0x78a4>
   11b50:	cmp	r0, #0
   11b54:	beq	11ad4 <__assert_fail@plt+0x4d0>
   11b58:	mov	r2, #5
   11b5c:	ldr	r1, [pc, #2236]	; 12420 <__assert_fail@plt+0xe1c>
   11b60:	mov	r0, r6
   11b64:	bl	112f8 <dcgettext@plt>
   11b68:	mov	r2, r4
   11b6c:	mov	r1, #3
   11b70:	mov	r8, r6
   11b74:	mov	r5, r0
   11b78:	mov	r0, r6
   11b7c:	bl	179b8 <__assert_fail@plt+0x63b4>
   11b80:	mov	r2, r5
   11b84:	mov	r1, r6
   11b88:	mov	r3, r0
   11b8c:	mov	r0, #0
   11b90:	bl	113ac <error@plt>
   11b94:	b	11a10 <__assert_fail@plt+0x40c>
   11b98:	ldrb	r8, [r7]
   11b9c:	cmp	r8, #0
   11ba0:	beq	11ad4 <__assert_fail@plt+0x4d0>
   11ba4:	ldr	ip, [r7, #48]	; 0x30
   11ba8:	cmp	ip, #0
   11bac:	beq	11a10 <__assert_fail@plt+0x40c>
   11bb0:	ldrd	r0, [r5, #160]	; 0xa0
   11bb4:	ldrd	r2, [ip]
   11bb8:	cmp	r1, r3
   11bbc:	cmpeq	r0, r2
   11bc0:	bne	11a10 <__assert_fail@plt+0x40c>
   11bc4:	ldrd	r0, [r5, #64]	; 0x40
   11bc8:	ldrd	r2, [ip, #8]
   11bcc:	cmp	r1, r3
   11bd0:	cmpeq	r0, r2
   11bd4:	bne	11a10 <__assert_fail@plt+0x40c>
   11bd8:	ldr	r1, [pc, #2116]	; 12424 <__assert_fail@plt+0xe20>
   11bdc:	mov	r0, r4
   11be0:	bl	11268 <strcmp@plt>
   11be4:	mov	r2, #5
   11be8:	subs	r8, r0, #0
   11bec:	bne	12258 <__assert_fail@plt+0xc54>
   11bf0:	ldr	r1, [pc, #2096]	; 12428 <__assert_fail@plt+0xe24>
   11bf4:	bl	112f8 <dcgettext@plt>
   11bf8:	mov	r1, r4
   11bfc:	mov	sl, r0
   11c00:	mov	r0, #4
   11c04:	bl	178fc <__assert_fail@plt+0x62f8>
   11c08:	mov	r2, sl
   11c0c:	mov	r1, r6
   11c10:	mov	r3, r0
   11c14:	mov	r0, r8
   11c18:	bl	113ac <error@plt>
   11c1c:	mov	r2, #5
   11c20:	ldr	r1, [pc, #2052]	; 1242c <__assert_fail@plt+0xe28>
   11c24:	mov	r0, r6
   11c28:	bl	112f8 <dcgettext@plt>
   11c2c:	mov	r1, r6
   11c30:	mov	r8, r6
   11c34:	mov	r2, r0
   11c38:	mov	r0, #0
   11c3c:	bl	113ac <error@plt>
   11c40:	mov	r1, r5
   11c44:	mov	r2, #4
   11c48:	mov	r0, r9
   11c4c:	bl	149e4 <__assert_fail@plt+0x33e0>
   11c50:	mov	r0, r9
   11c54:	bl	1432c <__assert_fail@plt+0x2d28>
   11c58:	b	11a10 <__assert_fail@plt+0x40c>
   11c5c:	cmp	r2, #6
   11c60:	bne	11ad4 <__assert_fail@plt+0x4d0>
   11c64:	b	11ab4 <__assert_fail@plt+0x4b0>
   11c68:	mov	r2, #5
   11c6c:	ldr	r1, [pc, #1980]	; 12430 <__assert_fail@plt+0xe2c>
   11c70:	mov	r0, r6
   11c74:	bl	112f8 <dcgettext@plt>
   11c78:	mov	r1, r4
   11c7c:	mov	sl, r0
   11c80:	mov	r0, #4
   11c84:	bl	178fc <__assert_fail@plt+0x62f8>
   11c88:	mov	r1, sl
   11c8c:	mov	r2, r0
   11c90:	mov	r0, #1
   11c94:	bl	114b4 <__printf_chk@plt>
   11c98:	b	11ae4 <__assert_fail@plt+0x4e0>
   11c9c:	bl	180fc <__assert_fail@plt+0x6af8>
   11ca0:	mov	r3, r0
   11ca4:	b	11b1c <__assert_fail@plt+0x518>
   11ca8:	mov	r3, #1
   11cac:	str	r3, [r5, #16]
   11cb0:	mov	r1, r5
   11cb4:	mov	r2, r3
   11cb8:	mov	r0, r9
   11cbc:	bl	149e4 <__assert_fail@plt+0x33e0>
   11cc0:	mov	r8, #1
   11cc4:	b	11a10 <__assert_fail@plt+0x40c>
   11cc8:	ldrb	r3, [r7, #20]
   11ccc:	add	r2, sp, #36	; 0x24
   11cd0:	mov	r1, r8
   11cd4:	cmp	r3, #0
   11cd8:	mov	r0, sl
   11cdc:	bne	11e2c <__assert_fail@plt+0x828>
   11ce0:	bl	17d6c <__assert_fail@plt+0x6768>
   11ce4:	cmp	r0, #0
   11ce8:	blt	11ffc <__assert_fail@plt+0x9f8>
   11cec:	ldr	r4, [sp, #36]	; 0x24
   11cf0:	cmp	r4, #0
   11cf4:	beq	1221c <__assert_fail@plt+0xc18>
   11cf8:	mov	r0, r4
   11cfc:	bl	112c8 <context_new@plt>
   11d00:	subs	r3, r0, #0
   11d04:	str	r3, [sp, #16]
   11d08:	beq	122f8 <__assert_fail@plt+0xcf4>
   11d0c:	ldr	r1, [r7, #4]
   11d10:	cmp	r1, #0
   11d14:	beq	12048 <__assert_fail@plt+0xa44>
   11d18:	bl	11448 <context_user_set@plt>
   11d1c:	cmp	r0, #0
   11d20:	bne	12120 <__assert_fail@plt+0xb1c>
   11d24:	ldr	r1, [r7, #16]
   11d28:	cmp	r1, #0
   11d2c:	beq	11f68 <__assert_fail@plt+0x964>
   11d30:	ldr	r0, [sp, #16]
   11d34:	bl	11598 <context_range_set@plt>
   11d38:	cmp	r0, #0
   11d3c:	bne	12060 <__assert_fail@plt+0xa5c>
   11d40:	ldr	r1, [r7, #8]
   11d44:	cmp	r1, #0
   11d48:	ldrne	r0, [sp, #16]
   11d4c:	beq	11d5c <__assert_fail@plt+0x758>
   11d50:	bl	112ec <context_role_set@plt>
   11d54:	cmp	r0, #0
   11d58:	bne	121d0 <__assert_fail@plt+0xbcc>
   11d5c:	ldr	r1, [r7, #12]
   11d60:	cmp	r1, #0
   11d64:	ldrne	r0, [sp, #16]
   11d68:	beq	11d78 <__assert_fail@plt+0x774>
   11d6c:	bl	11304 <context_type_set@plt>
   11d70:	cmp	r0, #0
   11d74:	bne	11fa4 <__assert_fail@plt+0x9a0>
   11d78:	ldr	r0, [sp, #16]
   11d7c:	bl	115a4 <context_str@plt>
   11d80:	ldr	r1, [sp, #36]	; 0x24
   11d84:	cmp	r1, #0
   11d88:	mov	r4, r0
   11d8c:	beq	11afc <__assert_fail@plt+0x4f8>
   11d90:	bl	11268 <strcmp@plt>
   11d94:	subs	r3, r0, #0
   11d98:	beq	11b24 <__assert_fail@plt+0x520>
   11d9c:	b	11afc <__assert_fail@plt+0x4f8>
   11da0:	bl	11484 <__errno_location@plt>
   11da4:	mov	r2, #5
   11da8:	ldr	r1, [pc, #1668]	; 12434 <__assert_fail@plt+0xe30>
   11dac:	ldr	r3, [r0]
   11db0:	mov	r0, r6
   11db4:	str	r3, [sp, #20]
   11db8:	bl	112f8 <dcgettext@plt>
   11dbc:	mov	r2, r8
   11dc0:	mov	r1, #4
   11dc4:	mov	sl, r0
   11dc8:	mov	r0, r6
   11dcc:	bl	17890 <__assert_fail@plt+0x628c>
   11dd0:	mov	r1, r4
   11dd4:	mov	r8, r0
   11dd8:	mov	r0, #1
   11ddc:	bl	17b2c <__assert_fail@plt+0x6528>
   11de0:	mov	r3, r8
   11de4:	ldr	r1, [sp, #20]
   11de8:	mov	r2, sl
   11dec:	str	r0, [sp]
   11df0:	mov	r0, r6
   11df4:	bl	113ac <error@plt>
   11df8:	ldr	r3, [r7, #24]
   11dfc:	cmp	r3, #0
   11e00:	bne	119f0 <__assert_fail@plt+0x3ec>
   11e04:	mov	r3, #1
   11e08:	ldr	r0, [sp, #16]
   11e0c:	str	r3, [sp, #20]
   11e10:	bl	1140c <context_free@plt>
   11e14:	ldr	r0, [sp, #36]	; 0x24
   11e18:	bl	11580 <freecon@plt>
   11e1c:	ldr	r3, [sp, #20]
   11e20:	eor	r3, r3, #1
   11e24:	and	r8, r3, #1
   11e28:	b	119f4 <__assert_fail@plt+0x3f0>
   11e2c:	bl	17ba4 <__assert_fail@plt+0x65a0>
   11e30:	b	11ce4 <__assert_fail@plt+0x6e0>
   11e34:	cmp	r3, #1
   11e38:	moveq	r2, #5
   11e3c:	ldreq	r1, [pc, #1524]	; 12438 <__assert_fail@plt+0xe34>
   11e40:	beq	11884 <__assert_fail@plt+0x280>
   11e44:	strb	r4, [r7, #20]
   11e48:	b	118b4 <__assert_fail@plt+0x2b0>
   11e4c:	ldr	r3, [sp, #16]
   11e50:	cmp	r3, #0
   11e54:	strne	r9, [r7, #24]
   11e58:	bne	11918 <__assert_fail@plt+0x314>
   11e5c:	ldr	r3, [r5, r2, lsl #2]
   11e60:	add	r2, r2, #1
   11e64:	str	r3, [r7, #24]
   11e68:	str	r2, [r4]
   11e6c:	bl	1125c <is_selinux_enabled@plt>
   11e70:	cmp	r0, #0
   11e74:	ble	11918 <__assert_fail@plt+0x314>
   11e78:	ldr	r0, [r7, #24]
   11e7c:	bl	113b8 <security_check_context@plt>
   11e80:	cmp	r0, #0
   11e84:	bge	11918 <__assert_fail@plt+0x314>
   11e88:	bl	11484 <__errno_location@plt>
   11e8c:	mov	r2, #5
   11e90:	ldr	r1, [pc, #1444]	; 1243c <__assert_fail@plt+0xe38>
   11e94:	ldr	r4, [r0]
   11e98:	ldr	r0, [sp, #16]
   11e9c:	bl	112f8 <dcgettext@plt>
   11ea0:	mov	r5, r0
   11ea4:	ldr	r0, [r7, #24]
   11ea8:	bl	17b3c <__assert_fail@plt+0x6538>
   11eac:	mov	r3, r0
   11eb0:	mov	r2, r5
   11eb4:	mov	r1, r4
   11eb8:	mov	r0, #1
   11ebc:	bl	113ac <error@plt>
   11ec0:	mov	r2, #5
   11ec4:	ldr	r1, [pc, #1396]	; 12440 <__assert_fail@plt+0xe3c>
   11ec8:	mov	r0, r5
   11ecc:	bl	112f8 <dcgettext@plt>
   11ed0:	mov	r1, r6
   11ed4:	mov	fp, r5
   11ed8:	mov	r2, r0
   11edc:	mov	r0, r5
   11ee0:	bl	113ac <error@plt>
   11ee4:	b	11a38 <__assert_fail@plt+0x434>
   11ee8:	ldrd	r0, [r5, #64]	; 0x40
   11eec:	ldrd	r2, [ip, #8]
   11ef0:	cmp	r1, r3
   11ef4:	cmpeq	r0, r2
   11ef8:	bne	11ad4 <__assert_fail@plt+0x4d0>
   11efc:	ldr	r1, [pc, #1312]	; 12424 <__assert_fail@plt+0xe20>
   11f00:	mov	r0, r4
   11f04:	bl	11268 <strcmp@plt>
   11f08:	mov	r2, #5
   11f0c:	subs	r8, r0, #0
   11f10:	bne	122a8 <__assert_fail@plt+0xca4>
   11f14:	ldr	r1, [pc, #1292]	; 12428 <__assert_fail@plt+0xe24>
   11f18:	bl	112f8 <dcgettext@plt>
   11f1c:	mov	r1, r4
   11f20:	mov	sl, r0
   11f24:	mov	r0, #4
   11f28:	bl	178fc <__assert_fail@plt+0x62f8>
   11f2c:	mov	r2, sl
   11f30:	mov	r1, r6
   11f34:	mov	r3, r0
   11f38:	mov	r0, r8
   11f3c:	bl	113ac <error@plt>
   11f40:	mov	r2, #5
   11f44:	ldr	r1, [pc, #1248]	; 1242c <__assert_fail@plt+0xe28>
   11f48:	mov	r0, r6
   11f4c:	bl	112f8 <dcgettext@plt>
   11f50:	mov	r1, r6
   11f54:	mov	r8, r6
   11f58:	mov	r2, r0
   11f5c:	mov	r0, #0
   11f60:	bl	113ac <error@plt>
   11f64:	b	119f4 <__assert_fail@plt+0x3f0>
   11f68:	ldr	r1, [r7, #8]
   11f6c:	cmp	r1, #0
   11f70:	beq	11d5c <__assert_fail@plt+0x758>
   11f74:	ldr	r4, [sp, #16]
   11f78:	mov	r0, r4
   11f7c:	bl	112ec <context_role_set@plt>
   11f80:	cmp	r0, #0
   11f84:	bne	121d0 <__assert_fail@plt+0xbcc>
   11f88:	ldr	r1, [r7, #12]
   11f8c:	cmp	r1, #0
   11f90:	beq	11d78 <__assert_fail@plt+0x774>
   11f94:	mov	r0, r4
   11f98:	bl	11304 <context_type_set@plt>
   11f9c:	cmp	r0, #0
   11fa0:	beq	11d78 <__assert_fail@plt+0x774>
   11fa4:	bl	11484 <__errno_location@plt>
   11fa8:	mov	r2, #5
   11fac:	ldr	r1, [pc, #1168]	; 12444 <__assert_fail@plt+0xe40>
   11fb0:	ldr	r8, [r0]
   11fb4:	mov	r0, r6
   11fb8:	bl	112f8 <dcgettext@plt>
   11fbc:	mov	r4, r0
   11fc0:	ldr	r0, [r7, #12]
   11fc4:	bl	17b3c <__assert_fail@plt+0x6538>
   11fc8:	mov	r1, r8
   11fcc:	mov	r2, r4
   11fd0:	ldr	r3, [pc, #1136]	; 12448 <__assert_fail@plt+0xe44>
   11fd4:	str	r0, [sp]
   11fd8:	mov	r0, r6
   11fdc:	bl	113ac <error@plt>
   11fe0:	bl	11484 <__errno_location@plt>
   11fe4:	mov	r4, r0
   11fe8:	ldr	r0, [sp, #16]
   11fec:	ldr	r8, [r4]
   11ff0:	bl	1140c <context_free@plt>
   11ff4:	str	r8, [r4]
   11ff8:	b	119f0 <__assert_fail@plt+0x3ec>
   11ffc:	bl	11484 <__errno_location@plt>
   12000:	ldr	r4, [r0]
   12004:	cmp	r4, #61	; 0x3d
   12008:	beq	11cec <__assert_fail@plt+0x6e8>
   1200c:	mov	r2, #5
   12010:	ldr	r1, [pc, #1076]	; 1244c <__assert_fail@plt+0xe48>
   12014:	mov	r0, r6
   12018:	bl	112f8 <dcgettext@plt>
   1201c:	mov	r1, r8
   12020:	mov	r8, r6
   12024:	mov	sl, r0
   12028:	mov	r0, #4
   1202c:	bl	178fc <__assert_fail@plt+0x62f8>
   12030:	mov	r2, sl
   12034:	mov	r1, r4
   12038:	mov	r3, r0
   1203c:	mov	r0, r6
   12040:	bl	113ac <error@plt>
   12044:	b	119f4 <__assert_fail@plt+0x3f0>
   12048:	ldr	r1, [r7, #16]
   1204c:	cmp	r1, #0
   12050:	beq	121b4 <__assert_fail@plt+0xbb0>
   12054:	bl	11598 <context_range_set@plt>
   12058:	cmp	r0, #0
   1205c:	beq	11d40 <__assert_fail@plt+0x73c>
   12060:	bl	11484 <__errno_location@plt>
   12064:	mov	r2, #5
   12068:	ldr	r1, [pc, #980]	; 12444 <__assert_fail@plt+0xe40>
   1206c:	ldr	r8, [r0]
   12070:	mov	r0, r6
   12074:	bl	112f8 <dcgettext@plt>
   12078:	mov	r4, r0
   1207c:	ldr	r0, [r7, #16]
   12080:	bl	17b3c <__assert_fail@plt+0x6538>
   12084:	mov	r1, r8
   12088:	mov	r2, r4
   1208c:	ldr	r3, [pc, #956]	; 12450 <__assert_fail@plt+0xe4c>
   12090:	str	r0, [sp]
   12094:	mov	r0, r6
   12098:	bl	113ac <error@plt>
   1209c:	ldr	r1, [r7, #8]
   120a0:	cmp	r1, #0
   120a4:	beq	12194 <__assert_fail@plt+0xb90>
   120a8:	ldr	r4, [sp, #16]
   120ac:	mov	r0, r4
   120b0:	bl	112ec <context_role_set@plt>
   120b4:	cmp	r0, #0
   120b8:	bne	121d0 <__assert_fail@plt+0xbcc>
   120bc:	ldr	r1, [r7, #12]
   120c0:	cmp	r1, #0
   120c4:	beq	11fe0 <__assert_fail@plt+0x9dc>
   120c8:	mov	r0, r4
   120cc:	bl	11304 <context_type_set@plt>
   120d0:	cmp	r0, #0
   120d4:	beq	11fe0 <__assert_fail@plt+0x9dc>
   120d8:	b	11fa4 <__assert_fail@plt+0x9a0>
   120dc:	ldr	r0, [pc, #880]	; 12454 <__assert_fail@plt+0xe50>
   120e0:	bl	17b54 <__assert_fail@plt+0x6550>
   120e4:	cmp	r0, #0
   120e8:	mov	r6, r0
   120ec:	str	r0, [r7, #48]	; 0x30
   120f0:	bne	1192c <__assert_fail@plt+0x328>
   120f4:	bl	11484 <__errno_location@plt>
   120f8:	ldr	r1, [pc, #856]	; 12458 <__assert_fail@plt+0xe54>
   120fc:	mov	r2, #5
   12100:	ldr	r4, [r0]
   12104:	mov	r0, r6
   12108:	bl	112f8 <dcgettext@plt>
   1210c:	ldr	r1, [pc, #784]	; 12424 <__assert_fail@plt+0xe20>
   12110:	mov	r5, r0
   12114:	mov	r0, #4
   12118:	bl	178fc <__assert_fail@plt+0x62f8>
   1211c:	b	11eac <__assert_fail@plt+0x8a8>
   12120:	bl	11484 <__errno_location@plt>
   12124:	mov	r2, #5
   12128:	ldr	r1, [pc, #788]	; 12444 <__assert_fail@plt+0xe40>
   1212c:	ldr	r8, [r0]
   12130:	mov	r0, r6
   12134:	bl	112f8 <dcgettext@plt>
   12138:	mov	r4, r0
   1213c:	ldr	r0, [r7, #4]
   12140:	bl	17b3c <__assert_fail@plt+0x6538>
   12144:	mov	r1, r8
   12148:	mov	r2, r4
   1214c:	ldr	r3, [pc, #776]	; 1245c <__assert_fail@plt+0xe58>
   12150:	str	r0, [sp]
   12154:	mov	r0, r6
   12158:	bl	113ac <error@plt>
   1215c:	ldr	r1, [r7, #16]
   12160:	cmp	r1, #0
   12164:	beq	12178 <__assert_fail@plt+0xb74>
   12168:	ldr	r0, [sp, #16]
   1216c:	bl	11598 <context_range_set@plt>
   12170:	cmp	r0, #0
   12174:	bne	12060 <__assert_fail@plt+0xa5c>
   12178:	ldr	r1, [r7, #8]
   1217c:	cmp	r1, #0
   12180:	beq	12194 <__assert_fail@plt+0xb90>
   12184:	ldr	r0, [sp, #16]
   12188:	bl	112ec <context_role_set@plt>
   1218c:	cmp	r0, #0
   12190:	bne	121d0 <__assert_fail@plt+0xbcc>
   12194:	ldr	r1, [r7, #12]
   12198:	cmp	r1, #0
   1219c:	beq	11fe0 <__assert_fail@plt+0x9dc>
   121a0:	ldr	r0, [sp, #16]
   121a4:	bl	11304 <context_type_set@plt>
   121a8:	cmp	r0, #0
   121ac:	beq	11fe0 <__assert_fail@plt+0x9dc>
   121b0:	b	11fa4 <__assert_fail@plt+0x9a0>
   121b4:	ldr	r1, [r7, #8]
   121b8:	cmp	r1, #0
   121bc:	bne	11d50 <__assert_fail@plt+0x74c>
   121c0:	ldr	r1, [r7, #12]
   121c4:	cmp	r1, #0
   121c8:	bne	11d6c <__assert_fail@plt+0x768>
   121cc:	b	11d78 <__assert_fail@plt+0x774>
   121d0:	bl	11484 <__errno_location@plt>
   121d4:	mov	r2, #5
   121d8:	ldr	r1, [pc, #612]	; 12444 <__assert_fail@plt+0xe40>
   121dc:	ldr	r8, [r0]
   121e0:	mov	r0, r6
   121e4:	bl	112f8 <dcgettext@plt>
   121e8:	mov	r4, r0
   121ec:	ldr	r0, [r7, #8]
   121f0:	bl	17b3c <__assert_fail@plt+0x6538>
   121f4:	mov	r1, r8
   121f8:	mov	r2, r4
   121fc:	ldr	r3, [pc, #604]	; 12460 <__assert_fail@plt+0xe5c>
   12200:	str	r0, [sp]
   12204:	mov	r0, r6
   12208:	bl	113ac <error@plt>
   1220c:	ldr	r1, [r7, #12]
   12210:	cmp	r1, #0
   12214:	bne	121a0 <__assert_fail@plt+0xb9c>
   12218:	b	11fe0 <__assert_fail@plt+0x9dc>
   1221c:	mov	r2, #5
   12220:	ldr	r1, [pc, #572]	; 12464 <__assert_fail@plt+0xe60>
   12224:	mov	r0, r6
   12228:	bl	112f8 <dcgettext@plt>
   1222c:	mov	r1, r8
   12230:	mov	r8, r6
   12234:	mov	sl, r0
   12238:	mov	r0, #4
   1223c:	bl	178fc <__assert_fail@plt+0x62f8>
   12240:	mov	r2, sl
   12244:	mov	r1, r6
   12248:	mov	r3, r0
   1224c:	mov	r0, r4
   12250:	bl	113ac <error@plt>
   12254:	b	119f4 <__assert_fail@plt+0x3f0>
   12258:	ldr	r1, [pc, #520]	; 12468 <__assert_fail@plt+0xe64>
   1225c:	mov	r0, r6
   12260:	bl	112f8 <dcgettext@plt>
   12264:	mov	r2, r4
   12268:	mov	r1, #4
   1226c:	mov	r8, r0
   12270:	mov	r0, r6
   12274:	bl	17890 <__assert_fail@plt+0x628c>
   12278:	ldr	r2, [pc, #420]	; 12424 <__assert_fail@plt+0xe20>
   1227c:	mov	r1, #4
   12280:	mov	r4, r0
   12284:	mov	r0, #1
   12288:	bl	17890 <__assert_fail@plt+0x628c>
   1228c:	mov	r3, r4
   12290:	mov	r2, r8
   12294:	mov	r1, r6
   12298:	str	r0, [sp]
   1229c:	mov	r0, #0
   122a0:	bl	113ac <error@plt>
   122a4:	b	11c1c <__assert_fail@plt+0x618>
   122a8:	ldr	r1, [pc, #440]	; 12468 <__assert_fail@plt+0xe64>
   122ac:	mov	r0, r6
   122b0:	bl	112f8 <dcgettext@plt>
   122b4:	mov	r2, r4
   122b8:	mov	r1, #4
   122bc:	mov	r8, r0
   122c0:	mov	r0, r6
   122c4:	bl	17890 <__assert_fail@plt+0x628c>
   122c8:	ldr	r2, [pc, #340]	; 12424 <__assert_fail@plt+0xe20>
   122cc:	mov	r1, #4
   122d0:	mov	r4, r0
   122d4:	mov	r0, #1
   122d8:	bl	17890 <__assert_fail@plt+0x628c>
   122dc:	mov	r3, r4
   122e0:	mov	r2, r8
   122e4:	mov	r1, r6
   122e8:	str	r0, [sp]
   122ec:	mov	r0, #0
   122f0:	bl	113ac <error@plt>
   122f4:	b	11f40 <__assert_fail@plt+0x93c>
   122f8:	bl	11484 <__errno_location@plt>
   122fc:	mov	r2, #5
   12300:	ldr	r1, [pc, #356]	; 1246c <__assert_fail@plt+0xe68>
   12304:	ldr	r8, [r0]
   12308:	mov	r0, r6
   1230c:	bl	112f8 <dcgettext@plt>
   12310:	mov	sl, r0
   12314:	mov	r0, r4
   12318:	bl	17b3c <__assert_fail@plt+0x6538>
   1231c:	b	119dc <__assert_fail@plt+0x3d8>
   12320:	cmp	r6, r2
   12324:	mov	r2, #5
   12328:	bgt	12394 <__assert_fail@plt+0xd90>
   1232c:	ldr	r1, [pc, #316]	; 12470 <__assert_fail@plt+0xe6c>
   12330:	mov	r0, #0
   12334:	bl	112f8 <dcgettext@plt>
   12338:	mov	r1, #0
   1233c:	mov	r2, r0
   12340:	mov	r0, r1
   12344:	bl	113ac <error@plt>
   12348:	b	11730 <__assert_fail@plt+0x12c>
   1234c:	mov	r2, #5
   12350:	ldr	r1, [pc, #284]	; 12474 <__assert_fail@plt+0xe70>
   12354:	mov	r0, r6
   12358:	bl	112f8 <dcgettext@plt>
   1235c:	mov	r1, r6
   12360:	mov	r2, r0
   12364:	mov	r0, r6
   12368:	bl	113ac <error@plt>
   1236c:	b	11730 <__assert_fail@plt+0x12c>
   12370:	bl	11484 <__errno_location@plt>
   12374:	ldr	r1, [pc, #208]	; 1244c <__assert_fail@plt+0xe48>
   12378:	mov	r2, #5
   1237c:	ldr	r4, [r0]
   12380:	mov	r0, r6
   12384:	bl	112f8 <dcgettext@plt>
   12388:	mov	r1, r9
   1238c:	mov	r5, r0
   12390:	b	12114 <__assert_fail@plt+0xb10>
   12394:	ldr	r1, [pc, #220]	; 12478 <__assert_fail@plt+0xe74>
   12398:	mov	r0, #0
   1239c:	bl	112f8 <dcgettext@plt>
   123a0:	sub	r6, r6, #-1073741823	; 0xc0000001
   123a4:	mov	r4, r0
   123a8:	ldr	r0, [r5, r6, lsl #2]
   123ac:	bl	17b3c <__assert_fail@plt+0x6538>
   123b0:	mov	r1, #0
   123b4:	mov	r2, r4
   123b8:	mov	r3, r0
   123bc:	mov	r0, r1
   123c0:	bl	113ac <error@plt>
   123c4:	b	11730 <__assert_fail@plt+0x12c>
   123c8:	andeq	sl, r1, r4, lsl #21
   123cc:	ldrdeq	sl, [r1], -ip
   123d0:	andeq	sl, r1, r4, lsr fp
   123d4:	andeq	sl, r1, r0, lsr #5
   123d8:	andeq	r2, r1, r4, ror r9
   123dc:	andeq	sl, r1, r4, lsl ip
   123e0:	ldrdeq	ip, [r2], -r0
   123e4:	andeq	ip, r2, r8, asr #3
   123e8:	andeq	r0, r0, r1, lsl #2
   123ec:	andeq	r0, r0, r2, lsl #2
   123f0:	andeq	ip, r2, r4, ror #2
   123f4:	andeq	ip, r2, r4, asr #3
   123f8:	strdeq	sl, [r1], -r4
   123fc:	andeq	sl, r1, r4, lsl #24
   12400:	andeq	sl, r1, r0, lsl #7
   12404:	andeq	sl, r1, r0, lsr fp
   12408:	andeq	sl, r1, r0, asr ip
   1240c:			; <UNDEFINED> instruction: 0x0002c1b8
   12410:	andeq	sl, r1, ip, asr #27
   12414:			; <UNDEFINED> instruction: 0x0001afb4
   12418:	andeq	fp, r1, r4, asr #1
   1241c:	andeq	sl, r1, r0, ror #27
   12420:	strdeq	sl, [r1], -ip
   12424:	andeq	fp, r1, r4, lsr r6
   12428:	andeq	sl, r1, ip, lsr #26
   1242c:	muleq	r1, r8, sp
   12430:			; <UNDEFINED> instruction: 0x0001aeb8
   12434:	andeq	sl, r1, ip, lsl #31
   12438:	andeq	sl, r1, r4, lsr #24
   1243c:			; <UNDEFINED> instruction: 0x0001acb8
   12440:	andeq	sl, r1, ip, lsl sp
   12444:	andeq	sl, r1, r8, lsr pc
   12448:	andeq	sl, r1, ip, ror pc
   1244c:	muleq	r1, r0, ip
   12450:	andeq	sl, r1, r4, lsl #31
   12454:	strdeq	ip, [r2], -r0
   12458:	strdeq	sl, [r1], -ip
   1245c:	andeq	sl, r1, ip, ror #30
   12460:	andeq	sl, r1, r4, ror pc
   12464:	ldrdeq	sl, [r1], -ip
   12468:	andeq	sl, r1, ip, asr sp
   1246c:	andeq	sl, r1, r0, lsl pc
   12470:	andeq	sl, r1, r4, ror #24
   12474:	andeq	sl, r1, ip, asr #25
   12478:	andeq	sl, r1, r4, ror ip
   1247c:	mov	fp, #0
   12480:	mov	lr, #0
   12484:	pop	{r1}		; (ldr r1, [sp], #4)
   12488:	mov	r2, sp
   1248c:	push	{r2}		; (str r2, [sp, #-4]!)
   12490:	push	{r0}		; (str r0, [sp, #-4]!)
   12494:	ldr	ip, [pc, #16]	; 124ac <__assert_fail@plt+0xea8>
   12498:	push	{ip}		; (str ip, [sp, #-4]!)
   1249c:	ldr	r0, [pc, #12]	; 124b0 <__assert_fail@plt+0xeac>
   124a0:	ldr	r3, [pc, #12]	; 124b4 <__assert_fail@plt+0xeb0>
   124a4:	bl	113e8 <__libc_start_main@plt>
   124a8:	bl	115c8 <abort@plt>
   124ac:	andeq	sl, r1, r0, asr #4
   124b0:	andeq	r1, r1, r0, lsl r6
   124b4:	andeq	sl, r1, r0, ror #3
   124b8:	ldr	r3, [pc, #20]	; 124d4 <__assert_fail@plt+0xed0>
   124bc:	ldr	r2, [pc, #20]	; 124d8 <__assert_fail@plt+0xed4>
   124c0:	add	r3, pc, r3
   124c4:	ldr	r2, [r3, r2]
   124c8:	cmp	r2, #0
   124cc:	bxeq	lr
   124d0:	b	11400 <__gmon_start__@plt>
   124d4:	andeq	r9, r1, r8, lsr fp
   124d8:	andeq	r0, r0, r8, asr r1
   124dc:	ldr	r3, [pc, #28]	; 12500 <__assert_fail@plt+0xefc>
   124e0:	ldr	r0, [pc, #28]	; 12504 <__assert_fail@plt+0xf00>
   124e4:	sub	r3, r3, r0
   124e8:	cmp	r3, #6
   124ec:	bxls	lr
   124f0:	ldr	r3, [pc, #16]	; 12508 <__assert_fail@plt+0xf04>
   124f4:	cmp	r3, #0
   124f8:	bxeq	lr
   124fc:	bx	r3
   12500:	andeq	ip, r2, pc, lsr #3
   12504:	andeq	ip, r2, ip, lsr #3
   12508:	andeq	r0, r0, r0
   1250c:	ldr	r1, [pc, #36]	; 12538 <__assert_fail@plt+0xf34>
   12510:	ldr	r0, [pc, #36]	; 1253c <__assert_fail@plt+0xf38>
   12514:	sub	r1, r1, r0
   12518:	asr	r1, r1, #2
   1251c:	add	r1, r1, r1, lsr #31
   12520:	asrs	r1, r1, #1
   12524:	bxeq	lr
   12528:	ldr	r3, [pc, #16]	; 12540 <__assert_fail@plt+0xf3c>
   1252c:	cmp	r3, #0
   12530:	bxeq	lr
   12534:	bx	r3
   12538:	andeq	ip, r2, ip, lsr #3
   1253c:	andeq	ip, r2, ip, lsr #3
   12540:	andeq	r0, r0, r0
   12544:	push	{r4, lr}
   12548:	ldr	r4, [pc, #24]	; 12568 <__assert_fail@plt+0xf64>
   1254c:	ldrb	r3, [r4]
   12550:	cmp	r3, #0
   12554:	popne	{r4, pc}
   12558:	bl	124dc <__assert_fail@plt+0xed8>
   1255c:	mov	r3, #1
   12560:	strb	r3, [r4]
   12564:	pop	{r4, pc}
   12568:	andeq	ip, r2, ip, asr #3
   1256c:	ldr	r0, [pc, #40]	; 1259c <__assert_fail@plt+0xf98>
   12570:	ldr	r3, [r0]
   12574:	cmp	r3, #0
   12578:	bne	12580 <__assert_fail@plt+0xf7c>
   1257c:	b	1250c <__assert_fail@plt+0xf08>
   12580:	ldr	r3, [pc, #24]	; 125a0 <__assert_fail@plt+0xf9c>
   12584:	cmp	r3, #0
   12588:	beq	1257c <__assert_fail@plt+0xf78>
   1258c:	push	{r4, lr}
   12590:	blx	r3
   12594:	pop	{r4, lr}
   12598:	b	1250c <__assert_fail@plt+0xf08>
   1259c:	andeq	fp, r2, ip, lsl #30
   125a0:	andeq	r0, r0, r0
   125a4:	subs	r5, r0, #0
   125a8:	push	{r7, lr}
   125ac:	sub	sp, sp, #64	; 0x40
   125b0:	beq	125ec <__assert_fail@plt+0xfe8>
   125b4:	ldr	r3, [pc, #812]	; 128e8 <__assert_fail@plt+0x12e4>
   125b8:	mov	r2, #5
   125bc:	ldr	r1, [pc, #808]	; 128ec <__assert_fail@plt+0x12e8>
   125c0:	mov	r0, #0
   125c4:	ldr	r4, [r3]
   125c8:	bl	112f8 <dcgettext@plt>
   125cc:	ldr	r3, [pc, #796]	; 128f0 <__assert_fail@plt+0x12ec>
   125d0:	mov	r1, #1
   125d4:	ldr	r3, [r3]
   125d8:	mov	r2, r0
   125dc:	mov	r0, r4
   125e0:	bl	114cc <__fprintf_chk@plt>
   125e4:	mov	r0, r5
   125e8:	bl	1143c <exit@plt>
   125ec:	mov	r2, #5
   125f0:	ldr	r1, [pc, #764]	; 128f4 <__assert_fail@plt+0x12f0>
   125f4:	bl	112f8 <dcgettext@plt>
   125f8:	ldr	r3, [pc, #752]	; 128f0 <__assert_fail@plt+0x12ec>
   125fc:	ldr	r6, [pc, #756]	; 128f8 <__assert_fail@plt+0x12f4>
   12600:	ldr	r4, [pc, #756]	; 128fc <__assert_fail@plt+0x12f8>
   12604:	ldr	r3, [r3]
   12608:	mov	r2, r3
   1260c:	str	r3, [sp]
   12610:	mov	r1, r0
   12614:	mov	r0, #1
   12618:	bl	114b4 <__printf_chk@plt>
   1261c:	mov	r2, #5
   12620:	ldr	r1, [pc, #728]	; 12900 <__assert_fail@plt+0x12fc>
   12624:	mov	r0, r5
   12628:	bl	112f8 <dcgettext@plt>
   1262c:	ldr	r1, [r6]
   12630:	bl	11244 <fputs_unlocked@plt>
   12634:	mov	r2, #5
   12638:	ldr	r1, [pc, #708]	; 12904 <__assert_fail@plt+0x1300>
   1263c:	mov	r0, r5
   12640:	bl	112f8 <dcgettext@plt>
   12644:	ldr	r1, [r6]
   12648:	bl	11244 <fputs_unlocked@plt>
   1264c:	mov	r2, #5
   12650:	ldr	r1, [pc, #688]	; 12908 <__assert_fail@plt+0x1304>
   12654:	mov	r0, r5
   12658:	bl	112f8 <dcgettext@plt>
   1265c:	ldr	r1, [r6]
   12660:	bl	11244 <fputs_unlocked@plt>
   12664:	mov	r2, #5
   12668:	ldr	r1, [pc, #668]	; 1290c <__assert_fail@plt+0x1308>
   1266c:	mov	r0, r5
   12670:	bl	112f8 <dcgettext@plt>
   12674:	ldr	r1, [r6]
   12678:	bl	11244 <fputs_unlocked@plt>
   1267c:	mov	r2, #5
   12680:	ldr	r1, [pc, #648]	; 12910 <__assert_fail@plt+0x130c>
   12684:	mov	r0, r5
   12688:	bl	112f8 <dcgettext@plt>
   1268c:	ldr	r1, [r6]
   12690:	bl	11244 <fputs_unlocked@plt>
   12694:	mov	r2, #5
   12698:	ldr	r1, [pc, #628]	; 12914 <__assert_fail@plt+0x1310>
   1269c:	mov	r0, r5
   126a0:	bl	112f8 <dcgettext@plt>
   126a4:	ldr	r1, [r6]
   126a8:	bl	11244 <fputs_unlocked@plt>
   126ac:	mov	r2, #5
   126b0:	ldr	r1, [pc, #608]	; 12918 <__assert_fail@plt+0x1314>
   126b4:	mov	r0, r5
   126b8:	bl	112f8 <dcgettext@plt>
   126bc:	ldr	r1, [r6]
   126c0:	bl	11244 <fputs_unlocked@plt>
   126c4:	mov	r2, #5
   126c8:	ldr	r1, [pc, #588]	; 1291c <__assert_fail@plt+0x1318>
   126cc:	mov	r0, r5
   126d0:	bl	112f8 <dcgettext@plt>
   126d4:	ldr	r1, [r6]
   126d8:	bl	11244 <fputs_unlocked@plt>
   126dc:	mov	r2, #5
   126e0:	ldr	r1, [pc, #568]	; 12920 <__assert_fail@plt+0x131c>
   126e4:	mov	r0, r5
   126e8:	bl	112f8 <dcgettext@plt>
   126ec:	ldr	r1, [r6]
   126f0:	bl	11244 <fputs_unlocked@plt>
   126f4:	mov	r2, #5
   126f8:	ldr	r1, [pc, #548]	; 12924 <__assert_fail@plt+0x1320>
   126fc:	mov	r0, r5
   12700:	bl	112f8 <dcgettext@plt>
   12704:	ldr	r1, [r6]
   12708:	bl	11244 <fputs_unlocked@plt>
   1270c:	mov	r2, #5
   12710:	ldr	r1, [pc, #528]	; 12928 <__assert_fail@plt+0x1324>
   12714:	mov	r0, r5
   12718:	bl	112f8 <dcgettext@plt>
   1271c:	ldr	r1, [r6]
   12720:	bl	11244 <fputs_unlocked@plt>
   12724:	ldm	r4!, {r0, r1, r2, r3}
   12728:	add	lr, sp, #8
   1272c:	stmia	lr!, {r0, r1, r2, r3}
   12730:	ldm	r4!, {r0, r1, r2, r3}
   12734:	ldr	ip, [sp, #8]
   12738:	stmia	lr!, {r0, r1, r2, r3}
   1273c:	cmp	ip, #0
   12740:	ldm	r4!, {r0, r1, r2, r3}
   12744:	stmia	lr!, {r0, r1, r2, r3}
   12748:	ldm	r4, {r0, r1}
   1274c:	addeq	r4, sp, #8
   12750:	stm	lr, {r0, r1}
   12754:	beq	12784 <__assert_fail@plt+0x1180>
   12758:	ldr	r7, [pc, #460]	; 1292c <__assert_fail@plt+0x1328>
   1275c:	add	r4, sp, #8
   12760:	b	12770 <__assert_fail@plt+0x116c>
   12764:	ldr	ip, [r4, #8]!
   12768:	cmp	ip, #0
   1276c:	beq	12784 <__assert_fail@plt+0x1180>
   12770:	mov	r1, ip
   12774:	mov	r0, r7
   12778:	bl	11268 <strcmp@plt>
   1277c:	cmp	r0, #0
   12780:	bne	12764 <__assert_fail@plt+0x1160>
   12784:	ldr	r4, [r4, #4]
   12788:	mov	r2, #5
   1278c:	cmp	r4, #0
   12790:	ldr	r1, [pc, #408]	; 12930 <__assert_fail@plt+0x132c>
   12794:	beq	1283c <__assert_fail@plt+0x1238>
   12798:	mov	r0, #0
   1279c:	bl	112f8 <dcgettext@plt>
   127a0:	ldr	r3, [pc, #396]	; 12934 <__assert_fail@plt+0x1330>
   127a4:	ldr	r2, [pc, #396]	; 12938 <__assert_fail@plt+0x1334>
   127a8:	mov	r1, r0
   127ac:	mov	r0, #1
   127b0:	bl	114b4 <__printf_chk@plt>
   127b4:	mov	r1, #0
   127b8:	mov	r0, #5
   127bc:	bl	11520 <setlocale@plt>
   127c0:	cmp	r0, #0
   127c4:	ldreq	r7, [pc, #352]	; 1292c <__assert_fail@plt+0x1328>
   127c8:	beq	127e4 <__assert_fail@plt+0x11e0>
   127cc:	mov	r2, #3
   127d0:	ldr	r1, [pc, #356]	; 1293c <__assert_fail@plt+0x1338>
   127d4:	bl	115bc <strncmp@plt>
   127d8:	ldr	r7, [pc, #332]	; 1292c <__assert_fail@plt+0x1328>
   127dc:	cmp	r0, #0
   127e0:	bne	128cc <__assert_fail@plt+0x12c8>
   127e4:	mov	r2, #5
   127e8:	ldr	r1, [pc, #336]	; 12940 <__assert_fail@plt+0x133c>
   127ec:	mov	r0, #0
   127f0:	bl	112f8 <dcgettext@plt>
   127f4:	ldr	r3, [pc, #304]	; 1292c <__assert_fail@plt+0x1328>
   127f8:	ldr	r2, [pc, #308]	; 12934 <__assert_fail@plt+0x1330>
   127fc:	mov	r1, r0
   12800:	mov	r0, #1
   12804:	bl	114b4 <__printf_chk@plt>
   12808:	mov	r2, #5
   1280c:	ldr	r1, [pc, #304]	; 12944 <__assert_fail@plt+0x1340>
   12810:	mov	r0, #0
   12814:	bl	112f8 <dcgettext@plt>
   12818:	ldr	r2, [pc, #296]	; 12948 <__assert_fail@plt+0x1344>
   1281c:	cmp	r4, r7
   12820:	ldr	r3, [pc, #292]	; 1294c <__assert_fail@plt+0x1348>
   12824:	movne	r3, r2
   12828:	mov	r1, r0
   1282c:	mov	r2, r4
   12830:	mov	r0, #1
   12834:	bl	114b4 <__printf_chk@plt>
   12838:	b	125e4 <__assert_fail@plt+0xfe0>
   1283c:	mov	r0, r4
   12840:	bl	112f8 <dcgettext@plt>
   12844:	ldr	r3, [pc, #232]	; 12934 <__assert_fail@plt+0x1330>
   12848:	ldr	r2, [pc, #232]	; 12938 <__assert_fail@plt+0x1334>
   1284c:	mov	r1, r0
   12850:	mov	r0, #1
   12854:	bl	114b4 <__printf_chk@plt>
   12858:	mov	r1, r4
   1285c:	mov	r0, #5
   12860:	bl	11520 <setlocale@plt>
   12864:	cmp	r0, #0
   12868:	beq	12880 <__assert_fail@plt+0x127c>
   1286c:	mov	r2, #3
   12870:	ldr	r1, [pc, #196]	; 1293c <__assert_fail@plt+0x1338>
   12874:	bl	115bc <strncmp@plt>
   12878:	cmp	r0, #0
   1287c:	bne	128c4 <__assert_fail@plt+0x12c0>
   12880:	mov	r2, #5
   12884:	ldr	r1, [pc, #180]	; 12940 <__assert_fail@plt+0x133c>
   12888:	mov	r0, #0
   1288c:	bl	112f8 <dcgettext@plt>
   12890:	ldr	r3, [pc, #148]	; 1292c <__assert_fail@plt+0x1328>
   12894:	ldr	r2, [pc, #152]	; 12934 <__assert_fail@plt+0x1330>
   12898:	mov	r4, r3
   1289c:	mov	r1, r0
   128a0:	mov	r0, #1
   128a4:	bl	114b4 <__printf_chk@plt>
   128a8:	ldr	r1, [pc, #148]	; 12944 <__assert_fail@plt+0x1340>
   128ac:	mov	r2, #5
   128b0:	mov	r0, #0
   128b4:	bl	112f8 <dcgettext@plt>
   128b8:	ldr	r3, [pc, #140]	; 1294c <__assert_fail@plt+0x1348>
   128bc:	mov	r1, r0
   128c0:	b	1282c <__assert_fail@plt+0x1228>
   128c4:	ldr	r7, [pc, #96]	; 1292c <__assert_fail@plt+0x1328>
   128c8:	mov	r4, r7
   128cc:	mov	r2, #5
   128d0:	ldr	r1, [pc, #120]	; 12950 <__assert_fail@plt+0x134c>
   128d4:	mov	r0, #0
   128d8:	bl	112f8 <dcgettext@plt>
   128dc:	ldr	r1, [r6]
   128e0:	bl	11244 <fputs_unlocked@plt>
   128e4:	b	127e4 <__assert_fail@plt+0x11e0>
   128e8:	andeq	ip, r2, r0, asr #3
   128ec:	andeq	sl, r1, r8, lsl #7
   128f0:	andeq	ip, r2, ip, lsl #4
   128f4:			; <UNDEFINED> instruction: 0x0001a3b0
   128f8:	andeq	ip, r2, r4, asr #3
   128fc:	andeq	sl, r1, r8, ror #4
   12900:	andeq	sl, r1, r0, asr r4
   12904:	ldrdeq	sl, [r1], -ip
   12908:	andeq	sl, r1, r8, lsr #10
   1290c:	andeq	sl, r1, r0, lsl r6
   12910:	andeq	sl, r1, ip, lsr #14
   12914:	andeq	sl, r1, ip, lsr #15
   12918:	andeq	sl, r1, r4, lsr #16
   1291c:	andeq	sl, r1, ip, ror #16
   12920:			; <UNDEFINED> instruction: 0x0001a8b4
   12924:	andeq	sl, r1, r8, lsl #21
   12928:			; <UNDEFINED> instruction: 0x0001aab8
   1292c:	andeq	sl, r1, r0, lsl #7
   12930:	strdeq	sl, [r1], -r0
   12934:	andeq	sl, r1, r8, lsl #22
   12938:	andeq	sl, r1, r0, lsr fp
   1293c:	andeq	sl, r1, r0, asr #22
   12940:	andeq	sl, r1, ip, lsl #23
   12944:	andeq	sl, r1, r8, lsr #23
   12948:	andeq	sl, r1, r4, lsl #21
   1294c:	ldrdeq	sl, [r1], -r0
   12950:	andeq	sl, r1, r4, asr #22
   12954:	ldr	r3, [pc, #4]	; 12960 <__assert_fail@plt+0x135c>
   12958:	str	r0, [r3]
   1295c:	bx	lr
   12960:	andeq	ip, r2, r4, lsl #4
   12964:	ldr	r3, [pc, #4]	; 12970 <__assert_fail@plt+0x136c>
   12968:	strb	r0, [r3, #4]
   1296c:	bx	lr
   12970:	andeq	ip, r2, r4, lsl #4
   12974:	ldr	r3, [pc, #192]	; 12a3c <__assert_fail@plt+0x1438>
   12978:	push	{r4, r5, r6, lr}
   1297c:	sub	sp, sp, #8
   12980:	ldr	r0, [r3]
   12984:	bl	190c0 <__assert_fail@plt+0x7abc>
   12988:	cmp	r0, #0
   1298c:	beq	129b0 <__assert_fail@plt+0x13ac>
   12990:	ldr	r4, [pc, #168]	; 12a40 <__assert_fail@plt+0x143c>
   12994:	ldrb	r3, [r4, #4]
   12998:	cmp	r3, #0
   1299c:	beq	129cc <__assert_fail@plt+0x13c8>
   129a0:	bl	11484 <__errno_location@plt>
   129a4:	ldr	r3, [r0]
   129a8:	cmp	r3, #32
   129ac:	bne	129cc <__assert_fail@plt+0x13c8>
   129b0:	ldr	r3, [pc, #140]	; 12a44 <__assert_fail@plt+0x1440>
   129b4:	ldr	r0, [r3]
   129b8:	bl	190c0 <__assert_fail@plt+0x7abc>
   129bc:	cmp	r0, #0
   129c0:	bne	12a14 <__assert_fail@plt+0x1410>
   129c4:	add	sp, sp, #8
   129c8:	pop	{r4, r5, r6, pc}
   129cc:	mov	r2, #5
   129d0:	ldr	r1, [pc, #112]	; 12a48 <__assert_fail@plt+0x1444>
   129d4:	mov	r0, #0
   129d8:	bl	112f8 <dcgettext@plt>
   129dc:	ldr	r4, [r4]
   129e0:	cmp	r4, #0
   129e4:	mov	r5, r0
   129e8:	beq	12a20 <__assert_fail@plt+0x141c>
   129ec:	bl	11484 <__errno_location@plt>
   129f0:	ldr	r6, [r0]
   129f4:	mov	r0, r4
   129f8:	bl	179a4 <__assert_fail@plt+0x63a0>
   129fc:	mov	r1, r6
   12a00:	str	r5, [sp]
   12a04:	ldr	r2, [pc, #64]	; 12a4c <__assert_fail@plt+0x1448>
   12a08:	mov	r3, r0
   12a0c:	mov	r0, #0
   12a10:	bl	113ac <error@plt>
   12a14:	ldr	r3, [pc, #52]	; 12a50 <__assert_fail@plt+0x144c>
   12a18:	ldr	r0, [r3]
   12a1c:	bl	112a4 <_exit@plt>
   12a20:	bl	11484 <__errno_location@plt>
   12a24:	mov	r3, r5
   12a28:	ldr	r2, [pc, #36]	; 12a54 <__assert_fail@plt+0x1450>
   12a2c:	ldr	r1, [r0]
   12a30:	mov	r0, r4
   12a34:	bl	113ac <error@plt>
   12a38:	b	12a14 <__assert_fail@plt+0x1410>
   12a3c:	andeq	ip, r2, r4, asr #3
   12a40:	andeq	ip, r2, r4, lsl #4
   12a44:	andeq	ip, r2, r0, asr #3
   12a48:	strheq	fp, [r1], -r4
   12a4c:	andeq	fp, r1, r0, asr #1
   12a50:	andeq	ip, r2, r8, ror #2
   12a54:	andeq	fp, r1, r4, asr #1
   12a58:	ldrd	r2, [r1, #8]
   12a5c:	push	{r4, r5}
   12a60:	ldrd	r4, [r0, #8]
   12a64:	cmp	r5, r3
   12a68:	cmpeq	r4, r2
   12a6c:	movne	r0, #0
   12a70:	beq	12a7c <__assert_fail@plt+0x1478>
   12a74:	pop	{r4, r5}
   12a78:	bx	lr
   12a7c:	ldrd	r4, [r0]
   12a80:	ldrd	r2, [r1]
   12a84:	cmp	r5, r3
   12a88:	cmpeq	r4, r2
   12a8c:	moveq	r0, #1
   12a90:	movne	r0, #0
   12a94:	pop	{r4, r5}
   12a98:	bx	lr
   12a9c:	push	{r4, lr}
   12aa0:	mov	r2, r1
   12aa4:	mov	r3, #0
   12aa8:	ldrd	r0, [r0, #8]
   12aac:	bl	1a06c <__assert_fail@plt+0x8a68>
   12ab0:	mov	r0, r2
   12ab4:	pop	{r4, pc}
   12ab8:	push	{r4, lr}
   12abc:	mov	r2, r1
   12ac0:	mov	r3, #0
   12ac4:	ldrd	r0, [r0]
   12ac8:	bl	1a06c <__assert_fail@plt+0x8a68>
   12acc:	mov	r0, r2
   12ad0:	pop	{r4, pc}
   12ad4:	push	{r4, r5}
   12ad8:	ldrd	r2, [r1]
   12adc:	ldrd	r4, [r0]
   12ae0:	cmp	r5, r3
   12ae4:	cmpeq	r4, r2
   12ae8:	moveq	r0, #1
   12aec:	movne	r0, #0
   12af0:	pop	{r4, r5}
   12af4:	bx	lr
   12af8:	ldr	r2, [r0]
   12afc:	ldr	r3, [r1]
   12b00:	ldrd	r0, [r2, #160]	; 0xa0
   12b04:	ldrd	r2, [r3, #160]	; 0xa0
   12b08:	cmp	r1, r3
   12b0c:	cmpeq	r0, r2
   12b10:	movhi	r0, #1
   12b14:	movls	r0, #0
   12b18:	movcc	r3, #1
   12b1c:	movcs	r3, #0
   12b20:	sub	r0, r0, r3
   12b24:	bx	lr
   12b28:	ldr	r3, [r0, #40]	; 0x28
   12b2c:	push	{r4, r5, r6, r7, r8, lr}
   12b30:	cmp	r3, r2
   12b34:	mov	r6, r0
   12b38:	mov	r5, r2
   12b3c:	mov	r4, r1
   12b40:	ldr	r7, [r0, #44]	; 0x2c
   12b44:	bcc	12bbc <__assert_fail@plt+0x15b8>
   12b48:	ldr	r0, [r0, #8]
   12b4c:	cmp	r4, #0
   12b50:	movne	r2, r0
   12b54:	beq	12b68 <__assert_fail@plt+0x1564>
   12b58:	str	r4, [r2], #4
   12b5c:	ldr	r4, [r4, #8]
   12b60:	cmp	r4, #0
   12b64:	bne	12b58 <__assert_fail@plt+0x1554>
   12b68:	mov	r3, r7
   12b6c:	mov	r2, #4
   12b70:	mov	r1, r5
   12b74:	bl	11574 <qsort@plt>
   12b78:	ldr	lr, [r6, #8]
   12b7c:	subs	r3, r5, #1
   12b80:	ldr	r0, [lr]
   12b84:	beq	12c00 <__assert_fail@plt+0x15fc>
   12b88:	mov	r2, lr
   12b8c:	mov	ip, r0
   12b90:	b	12b98 <__assert_fail@plt+0x1594>
   12b94:	ldr	ip, [r2, #4]!
   12b98:	ldr	r1, [r2, #4]
   12b9c:	subs	r3, r3, #1
   12ba0:	str	r1, [ip, #8]
   12ba4:	bne	12b94 <__assert_fail@plt+0x1590>
   12ba8:	add	r5, lr, r5, lsl #2
   12bac:	ldr	r2, [r5, #-4]
   12bb0:	mov	r3, #0
   12bb4:	str	r3, [r2, #8]
   12bb8:	pop	{r4, r5, r6, r7, r8, pc}
   12bbc:	add	r1, r2, #40	; 0x28
   12bc0:	cmn	r1, #-1073741823	; 0xc0000001
   12bc4:	str	r1, [r0, #40]	; 0x28
   12bc8:	bhi	12be4 <__assert_fail@plt+0x15e0>
   12bcc:	lsl	r1, r1, #2
   12bd0:	ldr	r0, [r0, #8]
   12bd4:	bl	18f54 <__assert_fail@plt+0x7950>
   12bd8:	cmp	r0, #0
   12bdc:	strne	r0, [r6, #8]
   12be0:	bne	12b4c <__assert_fail@plt+0x1548>
   12be4:	ldr	r0, [r6, #8]
   12be8:	bl	19538 <__assert_fail@plt+0x7f34>
   12bec:	mov	r3, #0
   12bf0:	mov	r0, r4
   12bf4:	str	r3, [r6, #8]
   12bf8:	str	r3, [r6, #40]	; 0x28
   12bfc:	pop	{r4, r5, r6, r7, r8, pc}
   12c00:	mov	r2, r0
   12c04:	b	12bb0 <__assert_fail@plt+0x15ac>
   12c08:	add	r3, r2, #176	; 0xb0
   12c0c:	push	{r4, r5, r6, r7, r8, lr}
   12c10:	mov	r6, r0
   12c14:	bic	r0, r3, #7
   12c18:	mov	r5, r2
   12c1c:	mov	r7, r1
   12c20:	bl	18f28 <__assert_fail@plt+0x7924>
   12c24:	subs	r4, r0, #0
   12c28:	beq	12c74 <__assert_fail@plt+0x1670>
   12c2c:	mov	r1, r7
   12c30:	mov	r2, r5
   12c34:	add	r0, r4, #168	; 0xa8
   12c38:	bl	112b0 <memcpy@plt>
   12c3c:	add	r0, r4, r5
   12c40:	ldr	r1, [r6, #24]
   12c44:	mov	r3, #0
   12c48:	mov	r2, #3
   12c4c:	strb	r3, [r0, #168]	; 0xa8
   12c50:	str	r3, [r4, #32]
   12c54:	str	r3, [r4, #12]
   12c58:	strh	r3, [r4, #58]	; 0x3a
   12c5c:	str	r3, [r4, #16]
   12c60:	str	r3, [r4, #20]
   12c64:	str	r5, [r4, #52]	; 0x34
   12c68:	str	r6, [r4, #44]	; 0x2c
   12c6c:	str	r1, [r4, #28]
   12c70:	strh	r2, [r4, #60]	; 0x3c
   12c74:	mov	r0, r4
   12c78:	pop	{r4, r5, r6, r7, r8, pc}
   12c7c:	push	{r4, r5, r6, lr}
   12c80:	subs	r4, r0, #0
   12c84:	popeq	{r4, r5, r6, pc}
   12c88:	ldr	r3, [r4, #12]
   12c8c:	ldr	r5, [r4, #8]
   12c90:	subs	r0, r3, #0
   12c94:	beq	12c9c <__assert_fail@plt+0x1698>
   12c98:	bl	115ec <closedir@plt>
   12c9c:	mov	r0, r4
   12ca0:	bl	19538 <__assert_fail@plt+0x7f34>
   12ca4:	subs	r4, r5, #0
   12ca8:	bne	12c88 <__assert_fail@plt+0x1684>
   12cac:	pop	{r4, r5, r6, pc}
   12cb0:	push	{r4, lr}
   12cb4:	mov	r4, r0
   12cb8:	b	12cc8 <__assert_fail@plt+0x16c4>
   12cbc:	bl	15ba8 <__assert_fail@plt+0x45a4>
   12cc0:	cmp	r0, #0
   12cc4:	bge	12ce0 <__assert_fail@plt+0x16dc>
   12cc8:	mov	r0, r4
   12ccc:	bl	15b5c <__assert_fail@plt+0x4558>
   12cd0:	cmp	r0, #0
   12cd4:	mov	r0, r4
   12cd8:	beq	12cbc <__assert_fail@plt+0x16b8>
   12cdc:	pop	{r4, pc}
   12ce0:	bl	115d4 <close@plt>
   12ce4:	b	12cc8 <__assert_fail@plt+0x16c4>
   12ce8:	push	{r4, r5, r6, r7, lr}
   12cec:	sub	sp, sp, #100	; 0x64
   12cf0:	ldr	r4, [r0, #44]	; 0x2c
   12cf4:	ldr	r3, [r4, #48]	; 0x30
   12cf8:	tst	r3, #512	; 0x200
   12cfc:	beq	12d70 <__assert_fail@plt+0x176c>
   12d00:	ldr	r6, [r4, #52]	; 0x34
   12d04:	mov	r7, r1
   12d08:	cmp	r6, #0
   12d0c:	mov	r5, r0
   12d10:	beq	12d3c <__assert_fail@plt+0x1738>
   12d14:	ldrd	r2, [r5, #64]	; 0x40
   12d18:	add	r1, sp, #96	; 0x60
   12d1c:	mov	r0, r6
   12d20:	strd	r2, [r1, #-88]!	; 0xffffffa8
   12d24:	bl	15158 <__assert_fail@plt+0x3b54>
   12d28:	cmp	r0, #0
   12d2c:	beq	12d68 <__assert_fail@plt+0x1764>
   12d30:	ldr	r0, [r0, #8]
   12d34:	add	sp, sp, #100	; 0x64
   12d38:	pop	{r4, r5, r6, r7, pc}
   12d3c:	ldr	r3, [pc, #168]	; 12dec <__assert_fail@plt+0x17e8>
   12d40:	mov	r1, r6
   12d44:	str	r3, [sp]
   12d48:	ldr	r2, [pc, #160]	; 12df0 <__assert_fail@plt+0x17ec>
   12d4c:	ldr	r3, [pc, #160]	; 12df4 <__assert_fail@plt+0x17f0>
   12d50:	mov	r0, #13
   12d54:	bl	153f8 <__assert_fail@plt+0x3df4>
   12d58:	cmp	r0, #0
   12d5c:	mov	r6, r0
   12d60:	str	r0, [r4, #52]	; 0x34
   12d64:	bne	12d14 <__assert_fail@plt+0x1710>
   12d68:	cmp	r7, #0
   12d6c:	bge	12d7c <__assert_fail@plt+0x1778>
   12d70:	mov	r0, #0
   12d74:	add	sp, sp, #100	; 0x64
   12d78:	pop	{r4, r5, r6, r7, pc}
   12d7c:	mov	r0, r7
   12d80:	add	r1, sp, #8
   12d84:	bl	1122c <fstatfs64@plt>
   12d88:	cmp	r0, #0
   12d8c:	bne	12d70 <__assert_fail@plt+0x176c>
   12d90:	cmp	r6, #0
   12d94:	beq	12de0 <__assert_fail@plt+0x17dc>
   12d98:	mov	r0, #16
   12d9c:	bl	18f28 <__assert_fail@plt+0x7924>
   12da0:	subs	r4, r0, #0
   12da4:	beq	12de0 <__assert_fail@plt+0x17dc>
   12da8:	ldrd	r2, [r5, #64]	; 0x40
   12dac:	ldr	r1, [sp, #8]
   12db0:	mov	r0, r6
   12db4:	str	r1, [r4, #8]
   12db8:	strd	r2, [r4]
   12dbc:	mov	r1, r4
   12dc0:	bl	159ec <__assert_fail@plt+0x43e8>
   12dc4:	cmp	r0, #0
   12dc8:	beq	12dd8 <__assert_fail@plt+0x17d4>
   12dcc:	cmp	r4, r0
   12dd0:	beq	12de0 <__assert_fail@plt+0x17dc>
   12dd4:	bl	115c8 <abort@plt>
   12dd8:	mov	r0, r4
   12ddc:	bl	19538 <__assert_fail@plt+0x7f34>
   12de0:	ldr	r0, [sp, #8]
   12de4:	add	sp, sp, #100	; 0x64
   12de8:	pop	{r4, r5, r6, r7, pc}
   12dec:	andeq	r9, r1, r8, lsr r5
   12df0:			; <UNDEFINED> instruction: 0x00012ab8
   12df4:	ldrdeq	r2, [r1], -r4
   12df8:	push	{r4, r5, r6, lr}
   12dfc:	mov	r5, r1
   12e00:	ldr	r1, [r0, #32]
   12e04:	cmn	r1, #100	; 0x64
   12e08:	sub	r3, r1, r5
   12e0c:	clz	r3, r3
   12e10:	lsr	r3, r3, #5
   12e14:	moveq	r3, #0
   12e18:	cmp	r3, #0
   12e1c:	bne	12e74 <__assert_fail@plt+0x1870>
   12e20:	cmp	r2, #0
   12e24:	mov	r4, r0
   12e28:	bne	12e5c <__assert_fail@plt+0x1858>
   12e2c:	ldr	r3, [r0, #48]	; 0x30
   12e30:	lsr	r3, r3, #2
   12e34:	eor	r3, r3, #1
   12e38:	cmp	r1, #0
   12e3c:	movlt	r3, #0
   12e40:	andge	r3, r3, #1
   12e44:	cmp	r3, #0
   12e48:	beq	12e54 <__assert_fail@plt+0x1850>
   12e4c:	mov	r0, r1
   12e50:	bl	115d4 <close@plt>
   12e54:	str	r5, [r4, #32]
   12e58:	pop	{r4, r5, r6, pc}
   12e5c:	add	r0, r0, #60	; 0x3c
   12e60:	bl	15b64 <__assert_fail@plt+0x4560>
   12e64:	cmp	r0, #0
   12e68:	bge	12e50 <__assert_fail@plt+0x184c>
   12e6c:	str	r5, [r4, #32]
   12e70:	pop	{r4, r5, r6, pc}
   12e74:	bl	115c8 <abort@plt>
   12e78:	ldr	r3, [r0, #48]	; 0x30
   12e7c:	push	{r4, r5, r6, lr}
   12e80:	ands	r5, r3, #4
   12e84:	mov	r4, r0
   12e88:	movne	r5, #0
   12e8c:	bne	12ea8 <__assert_fail@plt+0x18a4>
   12e90:	tst	r3, #512	; 0x200
   12e94:	bne	12eb8 <__assert_fail@plt+0x18b4>
   12e98:	ldr	r0, [r0, #28]
   12e9c:	bl	11568 <fchdir@plt>
   12ea0:	adds	r5, r0, #0
   12ea4:	movne	r5, #1
   12ea8:	add	r0, r4, #60	; 0x3c
   12eac:	bl	12cb0 <__assert_fail@plt+0x16ac>
   12eb0:	mov	r0, r5
   12eb4:	pop	{r4, r5, r6, pc}
   12eb8:	mov	r2, #1
   12ebc:	mvn	r1, #99	; 0x63
   12ec0:	bl	12df8 <__assert_fail@plt+0x17f4>
   12ec4:	b	12ea8 <__assert_fail@plt+0x18a4>
   12ec8:	push	{r4, r5, r6, lr}
   12ecc:	mov	r4, r2
   12ed0:	ldr	r2, [r2, #48]	; 0x30
   12ed4:	sub	sp, sp, #8
   12ed8:	cmp	r2, #0
   12edc:	add	r5, r4, #64	; 0x40
   12ee0:	bne	12f38 <__assert_fail@plt+0x1934>
   12ee4:	tst	r1, #1
   12ee8:	beq	12f38 <__assert_fail@plt+0x1934>
   12eec:	mov	r2, r5
   12ef0:	ldr	r1, [r4, #24]
   12ef4:	mov	r0, #3
   12ef8:	bl	115b0 <__xstat64@plt>
   12efc:	cmp	r0, #0
   12f00:	beq	12f74 <__assert_fail@plt+0x1970>
   12f04:	bl	11484 <__errno_location@plt>
   12f08:	ldr	r3, [r0]
   12f0c:	mov	r6, r0
   12f10:	cmp	r3, #2
   12f14:	beq	12fec <__assert_fail@plt+0x19e8>
   12f18:	str	r3, [r4, #32]
   12f1c:	mov	r0, r5
   12f20:	mov	r2, #104	; 0x68
   12f24:	mov	r1, #0
   12f28:	bl	114a8 <memset@plt>
   12f2c:	mov	r0, #10
   12f30:	add	sp, sp, #8
   12f34:	pop	{r4, r5, r6, pc}
   12f38:	lsl	r1, r1, #30
   12f3c:	orrs	r3, r3, r1, lsr #31
   12f40:	bne	12eec <__assert_fail@plt+0x18e8>
   12f44:	mov	r3, #256	; 0x100
   12f48:	ldr	r2, [r4, #24]
   12f4c:	mov	r1, r0
   12f50:	str	r3, [sp]
   12f54:	mov	r0, #3
   12f58:	mov	r3, r5
   12f5c:	bl	11340 <__fxstatat64@plt>
   12f60:	cmp	r0, #0
   12f64:	beq	12f74 <__assert_fail@plt+0x1970>
   12f68:	bl	11484 <__errno_location@plt>
   12f6c:	ldr	r3, [r0]
   12f70:	b	12f18 <__assert_fail@plt+0x1914>
   12f74:	ldr	r0, [r4, #80]	; 0x50
   12f78:	and	r0, r0, #61440	; 0xf000
   12f7c:	cmp	r0, #16384	; 0x4000
   12f80:	beq	12fa4 <__assert_fail@plt+0x19a0>
   12f84:	cmp	r0, #40960	; 0xa000
   12f88:	moveq	r0, #12
   12f8c:	beq	12f30 <__assert_fail@plt+0x192c>
   12f90:	cmp	r0, #32768	; 0x8000
   12f94:	movne	r0, #3
   12f98:	moveq	r0, #8
   12f9c:	add	sp, sp, #8
   12fa0:	pop	{r4, r5, r6, pc}
   12fa4:	ldrb	r3, [r4, #168]	; 0xa8
   12fa8:	cmp	r3, #46	; 0x2e
   12fac:	beq	12fb8 <__assert_fail@plt+0x19b4>
   12fb0:	mov	r0, #1
   12fb4:	b	12f30 <__assert_fail@plt+0x192c>
   12fb8:	ldrb	r3, [r4, #169]	; 0xa9
   12fbc:	cmp	r3, #0
   12fc0:	beq	12fd8 <__assert_fail@plt+0x19d4>
   12fc4:	ldr	r3, [r4, #168]	; 0xa8
   12fc8:	bic	r3, r3, #-16777216	; 0xff000000
   12fcc:	bic	r3, r3, #255	; 0xff
   12fd0:	cmp	r3, #11776	; 0x2e00
   12fd4:	bne	12fb0 <__assert_fail@plt+0x19ac>
   12fd8:	ldr	r0, [r4, #48]	; 0x30
   12fdc:	cmp	r0, #0
   12fe0:	movne	r0, #5
   12fe4:	moveq	r0, #1
   12fe8:	b	12f30 <__assert_fail@plt+0x192c>
   12fec:	mov	r2, r5
   12ff0:	ldr	r1, [r4, #24]
   12ff4:	mov	r0, #3
   12ff8:	bl	115e0 <__lxstat64@plt>
   12ffc:	cmp	r0, #0
   13000:	streq	r0, [r6]
   13004:	moveq	r0, #13
   13008:	beq	12f30 <__assert_fail@plt+0x192c>
   1300c:	ldr	r3, [r6]
   13010:	b	12f18 <__assert_fail@plt+0x1914>
   13014:	push	{r4, r5, r6, lr}
   13018:	mov	r5, r0
   1301c:	ldr	r0, [r1]
   13020:	add	r3, r0, #256	; 0x100
   13024:	add	r2, r3, r2
   13028:	cmp	r0, r2
   1302c:	bhi	13058 <__assert_fail@plt+0x1a54>
   13030:	str	r2, [r1]
   13034:	ldr	r0, [r5]
   13038:	mov	r1, r2
   1303c:	bl	18f54 <__assert_fail@plt+0x7950>
   13040:	subs	r4, r0, #0
   13044:	movne	r3, #1
   13048:	strne	r4, [r5]
   1304c:	beq	13080 <__assert_fail@plt+0x1a7c>
   13050:	mov	r0, r3
   13054:	pop	{r4, r5, r6, pc}
   13058:	ldr	r0, [r5]
   1305c:	mov	r4, #0
   13060:	bl	19538 <__assert_fail@plt+0x7f34>
   13064:	str	r4, [r5]
   13068:	bl	11484 <__errno_location@plt>
   1306c:	mov	r2, #36	; 0x24
   13070:	mov	r3, r4
   13074:	str	r2, [r0]
   13078:	mov	r0, r3
   1307c:	pop	{r4, r5, r6, pc}
   13080:	ldr	r0, [r5]
   13084:	bl	19538 <__assert_fail@plt+0x7f34>
   13088:	str	r4, [r5]
   1308c:	mov	r3, r4
   13090:	b	13050 <__assert_fail@plt+0x1a4c>
   13094:	ldr	r3, [pc, #104]	; 13104 <__assert_fail@plt+0x1b00>
   13098:	push	{r4, lr}
   1309c:	and	r3, r3, r0
   130a0:	cmp	r3, #0
   130a4:	sub	sp, sp, #8
   130a8:	mov	r4, r1
   130ac:	beq	130e0 <__assert_fail@plt+0x1adc>
   130b0:	ldr	r2, [pc, #80]	; 13108 <__assert_fail@plt+0x1b04>
   130b4:	ldr	r3, [pc, #80]	; 1310c <__assert_fail@plt+0x1b08>
   130b8:	str	r2, [sp]
   130bc:	mov	r1, #0
   130c0:	ldr	r2, [pc, #72]	; 13110 <__assert_fail@plt+0x1b0c>
   130c4:	mov	r0, #31
   130c8:	bl	153f8 <__assert_fail@plt+0x3df4>
   130cc:	str	r0, [r4]
   130d0:	adds	r0, r0, #0
   130d4:	movne	r0, #1
   130d8:	add	sp, sp, #8
   130dc:	pop	{r4, pc}
   130e0:	mov	r0, #32
   130e4:	bl	18f28 <__assert_fail@plt+0x7924>
   130e8:	cmp	r0, #0
   130ec:	str	r0, [r4]
   130f0:	beq	130d8 <__assert_fail@plt+0x1ad4>
   130f4:	bl	1913c <__assert_fail@plt+0x7b38>
   130f8:	mov	r0, #1
   130fc:	add	sp, sp, #8
   13100:	pop	{r4, pc}
   13104:	andeq	r0, r0, r2, lsl #2
   13108:	andeq	r9, r1, r8, lsr r5
   1310c:	andeq	r2, r1, r8, asr sl
   13110:	muleq	r1, ip, sl
   13114:	ldr	ip, [pc, #44]	; 13148 <__assert_fail@plt+0x1b44>
   13118:	tst	r1, #16
   1311c:	ldr	r3, [pc, #40]	; 1314c <__assert_fail@plt+0x1b48>
   13120:	moveq	r3, ip
   13124:	tst	r1, #512	; 0x200
   13128:	mov	ip, r2
   1312c:	bne	1313c <__assert_fail@plt+0x1b38>
   13130:	mov	r1, r3
   13134:	mov	r0, r2
   13138:	b	194a0 <__assert_fail@plt+0x7e9c>
   1313c:	mov	r2, r3
   13140:	mov	r1, ip
   13144:	b	15bf0 <__assert_fail@plt+0x45ec>
   13148:	andeq	r4, r8, r0, lsl #18
   1314c:	andeq	ip, r8, r0, lsl #18
   13150:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13154:	subs	sl, r3, #0
   13158:	sub	sp, sp, #104	; 0x68
   1315c:	mov	r5, r0
   13160:	mov	r6, r1
   13164:	mov	r4, r2
   13168:	ldr	r9, [r0, #48]	; 0x30
   1316c:	beq	131c0 <__assert_fail@plt+0x1bbc>
   13170:	ldr	r1, [pc, #432]	; 13328 <__assert_fail@plt+0x1d24>
   13174:	mov	r0, sl
   13178:	bl	11268 <strcmp@plt>
   1317c:	cmp	r0, #0
   13180:	bne	131c0 <__assert_fail@plt+0x1bbc>
   13184:	tst	r9, #4
   13188:	bne	131c8 <__assert_fail@plt+0x1bc4>
   1318c:	cmp	r4, #0
   13190:	bge	13314 <__assert_fail@plt+0x1d10>
   13194:	tst	r9, #512	; 0x200
   13198:	bne	132b4 <__assert_fail@plt+0x1cb0>
   1319c:	mov	r8, #1
   131a0:	mov	r1, r9
   131a4:	mov	r2, sl
   131a8:	ldr	r0, [r5, #32]
   131ac:	bl	13114 <__assert_fail@plt+0x1b10>
   131b0:	subs	r7, r0, #0
   131b4:	blt	1330c <__assert_fail@plt+0x1d08>
   131b8:	ldr	r9, [r5, #48]	; 0x30
   131bc:	b	131fc <__assert_fail@plt+0x1bf8>
   131c0:	ands	r8, r9, #4
   131c4:	beq	131f0 <__assert_fail@plt+0x1bec>
   131c8:	mvn	r3, r4
   131cc:	lsr	r3, r3, #31
   131d0:	ands	r9, r3, r9, lsr #9
   131d4:	beq	131e4 <__assert_fail@plt+0x1be0>
   131d8:	mov	r0, r4
   131dc:	bl	115d4 <close@plt>
   131e0:	mov	r9, #0
   131e4:	mov	r0, r9
   131e8:	add	sp, sp, #104	; 0x68
   131ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   131f0:	cmp	r4, #0
   131f4:	movge	r7, r4
   131f8:	blt	131a0 <__assert_fail@plt+0x1b9c>
   131fc:	tst	r9, #2
   13200:	bne	13220 <__assert_fail@plt+0x1c1c>
   13204:	cmp	sl, #0
   13208:	beq	13278 <__assert_fail@plt+0x1c74>
   1320c:	mov	r0, sl
   13210:	ldr	r1, [pc, #272]	; 13328 <__assert_fail@plt+0x1d24>
   13214:	bl	11268 <strcmp@plt>
   13218:	cmp	r0, #0
   1321c:	bne	13278 <__assert_fail@plt+0x1c74>
   13220:	mov	r2, sp
   13224:	mov	r1, r7
   13228:	mov	r0, #3
   1322c:	bl	11358 <__fxstat64@plt>
   13230:	cmp	r0, #0
   13234:	beq	13290 <__assert_fail@plt+0x1c8c>
   13238:	mvn	r9, #0
   1323c:	cmp	r4, #0
   13240:	bge	131e4 <__assert_fail@plt+0x1be0>
   13244:	bl	11484 <__errno_location@plt>
   13248:	mov	r4, r0
   1324c:	mov	r0, r7
   13250:	ldr	r5, [r4]
   13254:	bl	115d4 <close@plt>
   13258:	str	r5, [r4]
   1325c:	b	131e4 <__assert_fail@plt+0x1be0>
   13260:	ldrd	r0, [r6, #160]	; 0xa0
   13264:	ldrd	r2, [sp, #96]	; 0x60
   13268:	cmp	r1, r3
   1326c:	cmpeq	r0, r2
   13270:	bne	132a4 <__assert_fail@plt+0x1ca0>
   13274:	ldr	r9, [r5, #48]	; 0x30
   13278:	tst	r9, #512	; 0x200
   1327c:	bne	132f0 <__assert_fail@plt+0x1cec>
   13280:	mov	r0, r7
   13284:	bl	11568 <fchdir@plt>
   13288:	mov	r9, r0
   1328c:	b	1323c <__assert_fail@plt+0x1c38>
   13290:	ldrd	r0, [r6, #64]	; 0x40
   13294:	ldrd	r2, [sp]
   13298:	cmp	r1, r3
   1329c:	cmpeq	r0, r2
   132a0:	beq	13260 <__assert_fail@plt+0x1c5c>
   132a4:	bl	11484 <__errno_location@plt>
   132a8:	mov	r3, #2
   132ac:	str	r3, [r0]
   132b0:	b	13238 <__assert_fail@plt+0x1c34>
   132b4:	add	r7, r5, #60	; 0x3c
   132b8:	mov	r0, r7
   132bc:	bl	15b5c <__assert_fail@plt+0x4558>
   132c0:	subs	r8, r0, #0
   132c4:	bne	131a0 <__assert_fail@plt+0x1b9c>
   132c8:	mov	r0, r7
   132cc:	bl	15ba8 <__assert_fail@plt+0x45a4>
   132d0:	ldr	r9, [r5, #48]	; 0x30
   132d4:	subs	r7, r0, #0
   132d8:	blt	1319c <__assert_fail@plt+0x1b98>
   132dc:	tst	r9, #2
   132e0:	mov	r4, r7
   132e4:	mov	r8, #1
   132e8:	beq	13278 <__assert_fail@plt+0x1c74>
   132ec:	b	13220 <__assert_fail@plt+0x1c1c>
   132f0:	eor	r2, r8, #1
   132f4:	mov	r1, r7
   132f8:	uxtb	r2, r2
   132fc:	mov	r0, r5
   13300:	bl	12df8 <__assert_fail@plt+0x17f4>
   13304:	mov	r9, #0
   13308:	b	131e4 <__assert_fail@plt+0x1be0>
   1330c:	mvn	r9, #0
   13310:	b	131e4 <__assert_fail@plt+0x1be0>
   13314:	tst	r9, #2
   13318:	mov	r7, r4
   1331c:	mov	r8, #1
   13320:	beq	1320c <__assert_fail@plt+0x1c08>
   13324:	b	13220 <__assert_fail@plt+0x1c1c>
   13328:	strdeq	fp, [r1], -r8
   1332c:	ldr	r3, [pc, #164]	; 133d8 <__assert_fail@plt+0x1dd4>
   13330:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13334:	and	r3, r3, r0
   13338:	cmp	r3, #0
   1333c:	mov	sl, r1
   13340:	mov	r8, r2
   13344:	beq	133ac <__assert_fail@plt+0x1da8>
   13348:	mov	r0, #24
   1334c:	bl	18f28 <__assert_fail@plt+0x7924>
   13350:	subs	r9, r0, #0
   13354:	beq	133d0 <__assert_fail@plt+0x1dcc>
   13358:	ldrd	r4, [r8, #160]	; 0xa0
   1335c:	ldrd	r6, [r8, #64]	; 0x40
   13360:	str	r8, [r9, #16]
   13364:	strd	r4, [r9, #8]
   13368:	ldr	r0, [sl]
   1336c:	strd	r6, [r9]
   13370:	mov	r1, r9
   13374:	bl	159ec <__assert_fail@plt+0x43e8>
   13378:	cmp	r9, r0
   1337c:	mov	r4, r0
   13380:	beq	133a4 <__assert_fail@plt+0x1da0>
   13384:	mov	r0, r9
   13388:	bl	19538 <__assert_fail@plt+0x7f34>
   1338c:	cmp	r4, #0
   13390:	beq	133d0 <__assert_fail@plt+0x1dcc>
   13394:	ldr	r2, [r4, #16]
   13398:	mov	r3, #2
   1339c:	str	r2, [r8]
   133a0:	strh	r3, [r8, #56]	; 0x38
   133a4:	mov	r0, #1
   133a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133ac:	ldr	r0, [r1]
   133b0:	add	r1, r2, #64	; 0x40
   133b4:	bl	19160 <__assert_fail@plt+0x7b5c>
   133b8:	cmp	r0, #0
   133bc:	beq	133a4 <__assert_fail@plt+0x1da0>
   133c0:	mov	r3, #2
   133c4:	str	r8, [r8]
   133c8:	strh	r3, [r8, #56]	; 0x38
   133cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133d0:	mov	r0, #0
   133d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133d8:	andeq	r0, r0, r2, lsl #2
   133dc:	ldr	r3, [pc, #172]	; 13490 <__assert_fail@plt+0x1e8c>
   133e0:	push	{r4, r5, lr}
   133e4:	and	r3, r3, r0
   133e8:	cmp	r3, #0
   133ec:	sub	sp, sp, #28
   133f0:	bne	13438 <__assert_fail@plt+0x1e34>
   133f4:	ldr	r3, [r2, #4]
   133f8:	cmp	r3, #0
   133fc:	beq	13430 <__assert_fail@plt+0x1e2c>
   13400:	ldr	r0, [r3, #48]	; 0x30
   13404:	cmp	r0, #0
   13408:	blt	13430 <__assert_fail@plt+0x1e2c>
   1340c:	ldr	ip, [r1]
   13410:	ldrd	r0, [ip, #16]
   13414:	orrs	r1, r0, r1
   13418:	beq	1348c <__assert_fail@plt+0x1e88>
   1341c:	ldrd	r4, [ip]
   13420:	ldrd	r0, [r2, #160]	; 0xa0
   13424:	cmp	r5, r1
   13428:	cmpeq	r4, r0
   1342c:	beq	13468 <__assert_fail@plt+0x1e64>
   13430:	add	sp, sp, #28
   13434:	pop	{r4, r5, pc}
   13438:	ldrd	r4, [r2, #64]	; 0x40
   1343c:	ldrd	r2, [r2, #160]	; 0xa0
   13440:	ldr	r0, [r1]
   13444:	mov	r1, sp
   13448:	strd	r4, [sp]
   1344c:	strd	r2, [sp, #8]
   13450:	bl	15a24 <__assert_fail@plt+0x4420>
   13454:	cmp	r0, #0
   13458:	beq	1348c <__assert_fail@plt+0x1e88>
   1345c:	bl	19538 <__assert_fail@plt+0x7f34>
   13460:	add	sp, sp, #28
   13464:	pop	{r4, r5, pc}
   13468:	ldrd	r0, [ip, #8]
   1346c:	ldrd	r4, [r2, #64]	; 0x40
   13470:	cmp	r1, r5
   13474:	cmpeq	r0, r4
   13478:	ldrdeq	r0, [r3, #64]	; 0x40
   1347c:	ldrdeq	r2, [r3, #160]	; 0xa0
   13480:	strdeq	r0, [ip, #8]
   13484:	strdeq	r2, [ip]
   13488:	b	13430 <__assert_fail@plt+0x1e2c>
   1348c:	bl	115c8 <abort@plt>
   13490:	andeq	r0, r0, r2, lsl #2
   13494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13498:	sub	sp, sp, #68	; 0x44
   1349c:	ldr	sl, [r0]
   134a0:	mov	r5, r0
   134a4:	str	r1, [sp, #40]	; 0x28
   134a8:	ldr	r3, [sl, #12]
   134ac:	cmp	r3, #0
   134b0:	str	r3, [sp, #44]	; 0x2c
   134b4:	beq	13878 <__assert_fail@plt+0x2274>
   134b8:	mov	r0, r3
   134bc:	bl	1155c <dirfd@plt>
   134c0:	cmp	r0, #0
   134c4:	str	r0, [sp, #60]	; 0x3c
   134c8:	blt	13c54 <__assert_fail@plt+0x2650>
   134cc:	ldr	r3, [r5, #44]	; 0x2c
   134d0:	cmp	r3, #0
   134d4:	beq	13df0 <__assert_fail@plt+0x27ec>
   134d8:	mvn	r3, #0
   134dc:	str	r3, [sp, #20]
   134e0:	ldr	r0, [r5, #48]	; 0x30
   134e4:	mov	r3, #1
   134e8:	str	r3, [sp, #52]	; 0x34
   134ec:	ldr	r3, [sl, #40]	; 0x28
   134f0:	ldr	r2, [sl, #28]
   134f4:	mov	r1, r3
   134f8:	sub	r3, r3, #1
   134fc:	str	sl, [sp, #12]
   13500:	ldrb	r2, [r2, r3]
   13504:	cmp	r2, #47	; 0x2f
   13508:	moveq	r1, r3
   1350c:	ands	r0, r0, #4
   13510:	mov	r2, r1
   13514:	ldrne	r3, [r5, #24]
   13518:	movne	r0, r2
   1351c:	str	r1, [sp, #32]
   13520:	addne	r2, r3, r2
   13524:	movne	r1, #47	; 0x2f
   13528:	strbne	r1, [r3, r0]
   1352c:	addne	r3, r2, #1
   13530:	ldr	r2, [sp, #32]
   13534:	strne	r3, [sp, #28]
   13538:	add	r2, r2, #1
   1353c:	ldr	r3, [sl, #48]	; 0x30
   13540:	ldr	fp, [r5, #36]	; 0x24
   13544:	mov	r1, r2
   13548:	str	r2, [sp, #8]
   1354c:	sub	r1, fp, r1
   13550:	mov	r2, #0
   13554:	add	r3, r3, #1
   13558:	streq	r0, [sp, #28]
   1355c:	str	r2, [sp, #48]	; 0x30
   13560:	str	r1, [sp, #16]
   13564:	str	r3, [sp, #24]
   13568:	str	r2, [sp, #36]	; 0x24
   1356c:	mov	r7, r2
   13570:	str	r2, [sp, #4]
   13574:	mov	r8, r2
   13578:	mov	sl, r2
   1357c:	b	135fc <__assert_fail@plt+0x1ff8>
   13580:	tst	r3, #251	; 0xfb
   13584:	beq	136d0 <__assert_fail@plt+0x20cc>
   13588:	lsr	r2, r2, #4
   1358c:	cmp	r3, #10
   13590:	orrne	r2, r2, #1
   13594:	tst	r2, #1
   13598:	beq	139a0 <__assert_fail@plt+0x239c>
   1359c:	sub	r3, r3, #1
   135a0:	mov	r2, #11
   135a4:	cmp	r3, #11
   135a8:	strh	r2, [r4, #56]	; 0x38
   135ac:	bhi	13de0 <__assert_fail@plt+0x27dc>
   135b0:	ldr	r2, [pc, #2128]	; 13e08 <__assert_fail@plt+0x2804>
   135b4:	ldr	r1, [r2, r3, lsl #2]
   135b8:	mov	r2, #1
   135bc:	mov	r3, #0
   135c0:	str	r1, [r4, #80]	; 0x50
   135c4:	strd	r2, [r4, #112]	; 0x70
   135c8:	ldr	r3, [sp, #4]
   135cc:	str	r8, [r4, #8]
   135d0:	cmp	r3, #0
   135d4:	ldr	r3, [pc, #2096]	; 13e0c <__assert_fail@plt+0x2808>
   135d8:	strne	r4, [sl, #8]
   135dc:	streq	r4, [sp, #4]
   135e0:	cmp	r7, r3
   135e4:	beq	137e8 <__assert_fail@plt+0x21e4>
   135e8:	ldr	r3, [sp, #20]
   135ec:	add	r7, r7, #1
   135f0:	cmp	r7, r3
   135f4:	bcs	13c1c <__assert_fail@plt+0x2618>
   135f8:	mov	sl, r4
   135fc:	ldr	r3, [sp, #12]
   13600:	ldr	r4, [r3, #12]
   13604:	cmp	r4, #0
   13608:	beq	13a70 <__assert_fail@plt+0x246c>
   1360c:	bl	11484 <__errno_location@plt>
   13610:	mov	r9, r0
   13614:	mov	r0, r4
   13618:	str	r8, [r9]
   1361c:	bl	11544 <readdir64@plt>
   13620:	subs	fp, r0, #0
   13624:	beq	13b48 <__assert_fail@plt+0x2544>
   13628:	ldr	r2, [r5, #48]	; 0x30
   1362c:	tst	r2, #32
   13630:	bne	13640 <__assert_fail@plt+0x203c>
   13634:	ldrb	r2, [fp, #19]
   13638:	cmp	r2, #46	; 0x2e
   1363c:	beq	13850 <__assert_fail@plt+0x224c>
   13640:	add	r4, fp, #19
   13644:	mov	r0, r4
   13648:	bl	11460 <strlen@plt>
   1364c:	mov	r1, r4
   13650:	mov	r2, r0
   13654:	mov	r6, r0
   13658:	mov	r0, r5
   1365c:	bl	12c08 <__assert_fail@plt+0x1604>
   13660:	subs	r4, r0, #0
   13664:	beq	13a20 <__assert_fail@plt+0x241c>
   13668:	ldr	r3, [sp, #16]
   1366c:	cmp	r3, r6
   13670:	bls	13708 <__assert_fail@plt+0x2104>
   13674:	ldr	r3, [sp, #8]
   13678:	adds	r6, r3, r6
   1367c:	bcs	13774 <__assert_fail@plt+0x2170>
   13680:	ldrd	r0, [fp]
   13684:	ldr	r2, [r5, #48]	; 0x30
   13688:	ldr	ip, [r5]
   1368c:	tst	r2, #4
   13690:	ldr	r3, [sp, #24]
   13694:	strd	r0, [r4, #160]	; 0xa0
   13698:	addeq	r1, r4, #168	; 0xa8
   1369c:	str	r3, [r4, #48]	; 0x30
   136a0:	str	ip, [r4, #4]
   136a4:	str	r6, [r4, #40]	; 0x28
   136a8:	streq	r1, [r4, #24]
   136ac:	bne	137c4 <__assert_fail@plt+0x21c0>
   136b0:	ldr	r1, [r5, #44]	; 0x2c
   136b4:	cmp	r1, #0
   136b8:	beq	136c4 <__assert_fail@plt+0x20c0>
   136bc:	tst	r2, #1024	; 0x400
   136c0:	beq	13834 <__assert_fail@plt+0x2230>
   136c4:	tst	r2, #8
   136c8:	ldrb	r3, [fp, #18]
   136cc:	bne	13580 <__assert_fail@plt+0x1f7c>
   136d0:	sub	r3, r3, #1
   136d4:	cmp	r3, #11
   136d8:	mov	r2, #11
   136dc:	strh	r2, [r4, #56]	; 0x38
   136e0:	strhi	r8, [r4, #80]	; 0x50
   136e4:	movhi	r2, #2
   136e8:	movhi	r3, #0
   136ec:	bhi	135c4 <__assert_fail@plt+0x1fc0>
   136f0:	ldr	r2, [pc, #1808]	; 13e08 <__assert_fail@plt+0x2804>
   136f4:	ldr	r1, [r2, r3, lsl #2]
   136f8:	mov	r2, #2
   136fc:	mov	r3, #0
   13700:	str	r1, [r4, #80]	; 0x50
   13704:	b	135c4 <__assert_fail@plt+0x1fc0>
   13708:	ldr	r3, [sp, #32]
   1370c:	add	r1, r5, #36	; 0x24
   13710:	add	r2, r3, #2
   13714:	ldr	r3, [r5, #24]
   13718:	add	r2, r2, r6
   1371c:	add	r0, r5, #24
   13720:	str	r3, [sp, #16]
   13724:	bl	13014 <__assert_fail@plt+0x1a10>
   13728:	cmp	r0, #0
   1372c:	beq	13a20 <__assert_fail@plt+0x241c>
   13730:	ldr	r2, [r5, #24]
   13734:	ldr	r3, [sp, #16]
   13738:	cmp	r3, r2
   1373c:	beq	13870 <__assert_fail@plt+0x226c>
   13740:	ldr	r1, [r5, #48]	; 0x30
   13744:	tst	r1, #4
   13748:	ldrne	r3, [sp, #8]
   1374c:	addne	r3, r2, r3
   13750:	strne	r3, [sp, #28]
   13754:	ldr	r3, [r5, #36]	; 0x24
   13758:	ldr	r2, [sp, #8]
   1375c:	str	r0, [sp, #36]	; 0x24
   13760:	sub	r3, r3, r2
   13764:	str	r3, [sp, #16]
   13768:	ldr	r3, [sp, #8]
   1376c:	adds	r6, r3, r6
   13770:	bcc	13680 <__assert_fail@plt+0x207c>
   13774:	ldr	sl, [sp, #12]
   13778:	mov	r0, r4
   1377c:	bl	19538 <__assert_fail@plt+0x7f34>
   13780:	ldr	r0, [sp, #4]
   13784:	bl	12c7c <__assert_fail@plt+0x1678>
   13788:	ldr	r0, [sl, #12]
   1378c:	bl	115ec <closedir@plt>
   13790:	ldr	r3, [r5, #48]	; 0x30
   13794:	mov	r2, #0
   13798:	orr	r3, r3, #8192	; 0x2000
   1379c:	mov	r0, #7
   137a0:	mov	r1, #36	; 0x24
   137a4:	str	r2, [sp, #4]
   137a8:	strh	r0, [sl, #56]	; 0x38
   137ac:	str	r2, [sl, #12]
   137b0:	ldr	r0, [sp, #4]
   137b4:	str	r3, [r5, #48]	; 0x30
   137b8:	str	r1, [r9]
   137bc:	add	sp, sp, #68	; 0x44
   137c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137c4:	ldr	r1, [r4, #28]
   137c8:	ldr	r2, [r4, #52]	; 0x34
   137cc:	str	r1, [r4, #24]
   137d0:	add	r2, r2, #1
   137d4:	add	r1, r4, #168	; 0xa8
   137d8:	ldr	r0, [sp, #28]
   137dc:	bl	1128c <memmove@plt>
   137e0:	ldr	r2, [r5, #48]	; 0x30
   137e4:	b	136b0 <__assert_fail@plt+0x20ac>
   137e8:	ldr	r3, [r5, #44]	; 0x2c
   137ec:	cmp	r3, #0
   137f0:	bne	135e8 <__assert_fail@plt+0x1fe4>
   137f4:	ldr	r1, [sp, #60]	; 0x3c
   137f8:	ldr	r0, [sp, #12]
   137fc:	bl	12ce8 <__assert_fail@plt+0x16e4>
   13800:	ldr	r3, [pc, #1544]	; 13e10 <__assert_fail@plt+0x280c>
   13804:	cmp	r0, r3
   13808:	beq	1382c <__assert_fail@plt+0x2228>
   1380c:	ldr	r3, [pc, #1536]	; 13e14 <__assert_fail@plt+0x2810>
   13810:	cmp	r0, r3
   13814:	beq	1382c <__assert_fail@plt+0x2228>
   13818:	ldr	r3, [pc, #1528]	; 13e18 <__assert_fail@plt+0x2814>
   1381c:	cmp	r0, r3
   13820:	movne	r3, #1
   13824:	strne	r3, [sp, #48]	; 0x30
   13828:	bne	135e8 <__assert_fail@plt+0x1fe4>
   1382c:	str	r8, [sp, #48]	; 0x30
   13830:	b	135e8 <__assert_fail@plt+0x1fe4>
   13834:	mov	r1, r2
   13838:	mov	r3, r8
   1383c:	mov	r2, r4
   13840:	ldr	r0, [r5, #32]
   13844:	bl	12ec8 <__assert_fail@plt+0x18c4>
   13848:	strh	r0, [r4, #56]	; 0x38
   1384c:	b	135c8 <__assert_fail@plt+0x1fc4>
   13850:	ldrb	r2, [fp, #20]
   13854:	cmp	r2, #0
   13858:	beq	13868 <__assert_fail@plt+0x2264>
   1385c:	ldrh	r2, [fp, #20]
   13860:	cmp	r2, #46	; 0x2e
   13864:	bne	13640 <__assert_fail@plt+0x203c>
   13868:	mov	r4, sl
   1386c:	b	135f8 <__assert_fail@plt+0x1ff4>
   13870:	ldr	r0, [sp, #36]	; 0x24
   13874:	b	13754 <__assert_fail@plt+0x2150>
   13878:	ldr	r3, [r0, #48]	; 0x30
   1387c:	ldr	r1, [sl, #24]
   13880:	and	r2, r3, #516	; 0x204
   13884:	cmp	r2, #512	; 0x200
   13888:	mvnne	r0, #99	; 0x63
   1388c:	ldreq	r0, [r0, #32]
   13890:	ands	r2, r3, #16
   13894:	bne	139b0 <__assert_fail@plt+0x23ac>
   13898:	add	r3, sp, #60	; 0x3c
   1389c:	bl	15c28 <__assert_fail@plt+0x4624>
   138a0:	cmp	r0, #0
   138a4:	mov	r4, r0
   138a8:	str	r0, [sl, #12]
   138ac:	beq	13d08 <__assert_fail@plt+0x2704>
   138b0:	ldrh	r3, [sl, #56]	; 0x38
   138b4:	cmp	r3, #11
   138b8:	beq	13d30 <__assert_fail@plt+0x272c>
   138bc:	ldr	r0, [r5, #48]	; 0x30
   138c0:	tst	r0, #256	; 0x100
   138c4:	bne	139d0 <__assert_fail@plt+0x23cc>
   138c8:	ldr	r2, [r5, #44]	; 0x2c
   138cc:	ldr	r3, [pc, #1352]	; 13e1c <__assert_fail@plt+0x2818>
   138d0:	cmp	r2, #0
   138d4:	mvnne	r3, #0
   138d8:	str	r3, [sp, #20]
   138dc:	ldr	r3, [sp, #40]	; 0x28
   138e0:	cmp	r3, #2
   138e4:	beq	13cc4 <__assert_fail@plt+0x26c0>
   138e8:	ldr	r3, [r5, #48]	; 0x30
   138ec:	and	r3, r3, #56	; 0x38
   138f0:	cmp	r3, #24
   138f4:	beq	13d4c <__assert_fail@plt+0x2748>
   138f8:	ldr	r3, [sp, #40]	; 0x28
   138fc:	mov	r4, #1
   13900:	sub	r6, r3, #3
   13904:	clz	r6, r6
   13908:	lsr	r6, r6, #5
   1390c:	ldr	r3, [r5, #48]	; 0x30
   13910:	tst	r3, #512	; 0x200
   13914:	bne	13cec <__assert_fail@plt+0x26e8>
   13918:	ldr	r2, [sp, #60]	; 0x3c
   1391c:	cmp	r2, #0
   13920:	blt	1393c <__assert_fail@plt+0x2338>
   13924:	mov	r3, #0
   13928:	mov	r1, sl
   1392c:	mov	r0, r5
   13930:	bl	13150 <__assert_fail@plt+0x1b4c>
   13934:	cmp	r0, #0
   13938:	beq	134e0 <__assert_fail@plt+0x1edc>
   1393c:	tst	r4, r6
   13940:	beq	13950 <__assert_fail@plt+0x234c>
   13944:	bl	11484 <__errno_location@plt>
   13948:	ldr	r3, [r0]
   1394c:	str	r3, [sl, #32]
   13950:	ldrh	r3, [sl, #58]	; 0x3a
   13954:	ldr	r0, [sl, #12]
   13958:	orr	r3, r3, #1
   1395c:	strh	r3, [sl, #58]	; 0x3a
   13960:	bl	115ec <closedir@plt>
   13964:	ldr	r0, [r5, #48]	; 0x30
   13968:	mov	r3, #0
   1396c:	tst	r0, #512	; 0x200
   13970:	str	r3, [sl, #12]
   13974:	beq	13990 <__assert_fail@plt+0x238c>
   13978:	ldr	r3, [sp, #60]	; 0x3c
   1397c:	cmp	r3, #0
   13980:	blt	13990 <__assert_fail@plt+0x238c>
   13984:	mov	r0, r3
   13988:	bl	115d4 <close@plt>
   1398c:	ldr	r0, [r5, #48]	; 0x30
   13990:	mov	r3, #0
   13994:	str	r3, [sl, #12]
   13998:	str	r3, [sp, #52]	; 0x34
   1399c:	b	134ec <__assert_fail@plt+0x1ee8>
   139a0:	mov	r3, #11
   139a4:	strh	r3, [r4, #56]	; 0x38
   139a8:	mov	r3, #9
   139ac:	b	136f0 <__assert_fail@plt+0x20ec>
   139b0:	tst	r3, #1
   139b4:	moveq	r2, #32768	; 0x8000
   139b8:	beq	13898 <__assert_fail@plt+0x2294>
   139bc:	ldr	r2, [sl, #48]	; 0x30
   139c0:	cmp	r2, #0
   139c4:	movne	r2, #32768	; 0x8000
   139c8:	moveq	r2, #0
   139cc:	b	13898 <__assert_fail@plt+0x2294>
   139d0:	add	r4, r5, #56	; 0x38
   139d4:	mov	r1, r4
   139d8:	mov	r2, sl
   139dc:	bl	133dc <__assert_fail@plt+0x1dd8>
   139e0:	mov	r3, #0
   139e4:	mov	r2, sl
   139e8:	ldr	r1, [r5, #48]	; 0x30
   139ec:	ldr	r0, [r5, #32]
   139f0:	bl	12ec8 <__assert_fail@plt+0x18c4>
   139f4:	mov	r1, r4
   139f8:	mov	r2, sl
   139fc:	ldr	r0, [r5, #48]	; 0x30
   13a00:	bl	1332c <__assert_fail@plt+0x1d28>
   13a04:	subs	r4, r0, #0
   13a08:	bne	138c8 <__assert_fail@plt+0x22c4>
   13a0c:	bl	11484 <__errno_location@plt>
   13a10:	mov	r3, #12
   13a14:	str	r4, [sp, #4]
   13a18:	str	r3, [r0]
   13a1c:	b	13a64 <__assert_fail@plt+0x2460>
   13a20:	ldr	sl, [sp, #12]
   13a24:	mov	r0, r4
   13a28:	ldr	r4, [r9]
   13a2c:	bl	19538 <__assert_fail@plt+0x7f34>
   13a30:	ldr	r0, [sp, #4]
   13a34:	bl	12c7c <__assert_fail@plt+0x1678>
   13a38:	ldr	r0, [sl, #12]
   13a3c:	bl	115ec <closedir@plt>
   13a40:	ldr	r3, [r5, #48]	; 0x30
   13a44:	mov	r2, #0
   13a48:	orr	r3, r3, #8192	; 0x2000
   13a4c:	mov	r1, #7
   13a50:	str	r2, [sl, #12]
   13a54:	strh	r1, [sl, #56]	; 0x38
   13a58:	str	r2, [sp, #4]
   13a5c:	str	r3, [r5, #48]	; 0x30
   13a60:	str	r4, [r9]
   13a64:	ldr	r0, [sp, #4]
   13a68:	add	sp, sp, #68	; 0x44
   13a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a70:	mov	sl, r3
   13a74:	ldr	r3, [sp, #36]	; 0x24
   13a78:	cmp	r3, #0
   13a7c:	bne	13b98 <__assert_fail@plt+0x2594>
   13a80:	ldr	r3, [r5, #48]	; 0x30
   13a84:	tst	r3, #4
   13a88:	beq	13ab4 <__assert_fail@plt+0x24b0>
   13a8c:	ldr	r3, [r5, #36]	; 0x24
   13a90:	ldr	r2, [sp, #8]
   13a94:	cmp	r7, #0
   13a98:	cmpne	r3, r2
   13a9c:	ldreq	r3, [sp, #28]
   13aa0:	subeq	r3, r3, #1
   13aa4:	streq	r3, [sp, #28]
   13aa8:	ldr	r2, [sp, #28]
   13aac:	mov	r3, #0
   13ab0:	strb	r3, [r2]
   13ab4:	ldr	r3, [sp, #52]	; 0x34
   13ab8:	ldr	r2, [sp, #44]	; 0x2c
   13abc:	cmp	r2, #0
   13ac0:	movne	r3, #0
   13ac4:	andeq	r3, r3, #1
   13ac8:	cmp	r3, #0
   13acc:	beq	13b04 <__assert_fail@plt+0x2500>
   13ad0:	ldr	r3, [sp, #40]	; 0x28
   13ad4:	cmp	r7, #0
   13ad8:	cmpne	r3, #1
   13adc:	bne	13b0c <__assert_fail@plt+0x2508>
   13ae0:	ldr	r3, [sl, #48]	; 0x30
   13ae4:	cmp	r3, #0
   13ae8:	bne	13c84 <__assert_fail@plt+0x2680>
   13aec:	mov	r0, r5
   13af0:	bl	12e78 <__assert_fail@plt+0x1874>
   13af4:	adds	r0, r0, #0
   13af8:	movne	r0, #1
   13afc:	cmp	r0, #0
   13b00:	bne	13da4 <__assert_fail@plt+0x27a0>
   13b04:	cmp	r7, #0
   13b08:	beq	13ca4 <__assert_fail@plt+0x26a0>
   13b0c:	ldr	r3, [sp, #48]	; 0x30
   13b10:	cmp	r3, #0
   13b14:	bne	13c24 <__assert_fail@plt+0x2620>
   13b18:	ldr	r3, [r5, #44]	; 0x2c
   13b1c:	cmp	r3, #0
   13b20:	cmpne	r7, #1
   13b24:	bls	13a64 <__assert_fail@plt+0x2460>
   13b28:	mov	r2, r7
   13b2c:	ldr	r1, [sp, #4]
   13b30:	mov	r0, r5
   13b34:	bl	12b28 <__assert_fail@plt+0x1524>
   13b38:	str	r0, [sp, #4]
   13b3c:	ldr	r0, [sp, #4]
   13b40:	add	sp, sp, #68	; 0x44
   13b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b48:	ldr	r3, [r9]
   13b4c:	ldr	sl, [sp, #12]
   13b50:	cmp	r3, #0
   13b54:	beq	13b74 <__assert_fail@plt+0x2570>
   13b58:	ldr	r2, [sp, #44]	; 0x2c
   13b5c:	str	r3, [sl, #32]
   13b60:	cmp	r7, #0
   13b64:	cmpeq	r2, #0
   13b68:	moveq	r2, #4
   13b6c:	movne	r2, #7
   13b70:	strh	r2, [sl, #56]	; 0x38
   13b74:	ldr	r0, [sl, #12]
   13b78:	cmp	r0, #0
   13b7c:	beq	13a74 <__assert_fail@plt+0x2470>
   13b80:	bl	115ec <closedir@plt>
   13b84:	mov	r3, #0
   13b88:	str	r3, [sl, #12]
   13b8c:	ldr	r3, [sp, #36]	; 0x24
   13b90:	cmp	r3, #0
   13b94:	beq	13a80 <__assert_fail@plt+0x247c>
   13b98:	ldr	r1, [r5, #4]
   13b9c:	ldr	r0, [r5, #24]
   13ba0:	cmp	r1, #0
   13ba4:	beq	13bd4 <__assert_fail@plt+0x25d0>
   13ba8:	ldr	r3, [r1, #24]
   13bac:	add	r2, r1, #168	; 0xa8
   13bb0:	cmp	r3, r2
   13bb4:	ldrne	r2, [r1, #28]
   13bb8:	str	r0, [r1, #28]
   13bbc:	subne	r3, r3, r2
   13bc0:	addne	r3, r0, r3
   13bc4:	strne	r3, [r1, #24]
   13bc8:	ldr	r1, [r1, #8]
   13bcc:	cmp	r1, #0
   13bd0:	bne	13ba8 <__assert_fail@plt+0x25a4>
   13bd4:	ldr	r3, [sp, #4]
   13bd8:	b	13c08 <__assert_fail@plt+0x2604>
   13bdc:	ldr	r2, [r3, #24]
   13be0:	cmp	r2, r1
   13be4:	ldrne	r1, [r3, #28]
   13be8:	str	r0, [r3, #28]
   13bec:	subne	r2, r2, r1
   13bf0:	addne	r2, r0, r2
   13bf4:	strne	r2, [r3, #24]
   13bf8:	ldr	r2, [r3, #8]
   13bfc:	cmp	r2, #0
   13c00:	ldreq	r2, [r3, #4]
   13c04:	mov	r3, r2
   13c08:	ldr	r2, [r3, #48]	; 0x30
   13c0c:	add	r1, r3, #168	; 0xa8
   13c10:	cmp	r2, #0
   13c14:	bge	13bdc <__assert_fail@plt+0x25d8>
   13c18:	b	13a80 <__assert_fail@plt+0x247c>
   13c1c:	ldr	sl, [sp, #12]
   13c20:	b	13a74 <__assert_fail@plt+0x2470>
   13c24:	ldr	r3, [pc, #500]	; 13e20 <__assert_fail@plt+0x281c>
   13c28:	mov	r2, r7
   13c2c:	str	r3, [r5, #44]	; 0x2c
   13c30:	ldr	r1, [sp, #4]
   13c34:	mov	r0, r5
   13c38:	bl	12b28 <__assert_fail@plt+0x1524>
   13c3c:	mov	r3, #0
   13c40:	str	r3, [r5, #44]	; 0x2c
   13c44:	str	r0, [sp, #4]
   13c48:	ldr	r0, [sp, #4]
   13c4c:	add	sp, sp, #68	; 0x44
   13c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c54:	ldr	r0, [sl, #12]
   13c58:	bl	115ec <closedir@plt>
   13c5c:	ldr	r3, [sp, #40]	; 0x28
   13c60:	mov	r4, #0
   13c64:	cmp	r3, #3
   13c68:	str	r4, [sl, #12]
   13c6c:	beq	13d14 <__assert_fail@plt+0x2710>
   13c70:	mov	r3, #0
   13c74:	str	r3, [sp, #4]
   13c78:	ldr	r0, [sp, #4]
   13c7c:	add	sp, sp, #68	; 0x44
   13c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c84:	ldr	r3, [pc, #408]	; 13e24 <__assert_fail@plt+0x2820>
   13c88:	mvn	r2, #0
   13c8c:	ldr	r1, [sl, #4]
   13c90:	mov	r0, r5
   13c94:	bl	13150 <__assert_fail@plt+0x1b4c>
   13c98:	adds	r0, r0, #0
   13c9c:	movne	r0, #1
   13ca0:	b	13afc <__assert_fail@plt+0x24f8>
   13ca4:	ldr	r3, [sp, #40]	; 0x28
   13ca8:	cmp	r3, #3
   13cac:	beq	13cd4 <__assert_fail@plt+0x26d0>
   13cb0:	ldr	r0, [sp, #4]
   13cb4:	bl	12c7c <__assert_fail@plt+0x1678>
   13cb8:	mov	r3, #0
   13cbc:	str	r3, [sp, #4]
   13cc0:	b	13a64 <__assert_fail@plt+0x2460>
   13cc4:	mov	r3, #0
   13cc8:	str	r3, [sp, #52]	; 0x34
   13ccc:	ldr	r0, [r5, #48]	; 0x30
   13cd0:	b	134ec <__assert_fail@plt+0x1ee8>
   13cd4:	ldrh	r3, [sl, #56]	; 0x38
   13cd8:	cmp	r3, #4
   13cdc:	cmpne	r3, #7
   13ce0:	movne	r3, #6
   13ce4:	strhne	r3, [sl, #56]	; 0x38
   13ce8:	b	13cb0 <__assert_fail@plt+0x26ac>
   13cec:	mov	r2, #3
   13cf0:	ldr	r1, [pc, #304]	; 13e28 <__assert_fail@plt+0x2824>
   13cf4:	ldr	r0, [sp, #60]	; 0x3c
   13cf8:	bl	192cc <__assert_fail@plt+0x7cc8>
   13cfc:	mov	r2, r0
   13d00:	str	r0, [sp, #60]	; 0x3c
   13d04:	b	1391c <__assert_fail@plt+0x2318>
   13d08:	ldr	r3, [sp, #40]	; 0x28
   13d0c:	cmp	r3, #3
   13d10:	bne	13c70 <__assert_fail@plt+0x266c>
   13d14:	mov	r3, #4
   13d18:	strh	r3, [sl, #56]	; 0x38
   13d1c:	bl	11484 <__errno_location@plt>
   13d20:	str	r4, [sp, #4]
   13d24:	ldr	r3, [r0]
   13d28:	str	r3, [sl, #32]
   13d2c:	b	13a64 <__assert_fail@plt+0x2460>
   13d30:	mov	r3, #0
   13d34:	mov	r2, sl
   13d38:	ldr	r1, [r5, #48]	; 0x30
   13d3c:	ldr	r0, [r5, #32]
   13d40:	bl	12ec8 <__assert_fail@plt+0x18c4>
   13d44:	strh	r0, [sl, #56]	; 0x38
   13d48:	b	138c8 <__assert_fail@plt+0x22c4>
   13d4c:	ldr	r3, [sl, #84]	; 0x54
   13d50:	cmp	r3, #2
   13d54:	bne	138f8 <__assert_fail@plt+0x22f4>
   13d58:	ldr	r1, [sp, #60]	; 0x3c
   13d5c:	mov	r0, sl
   13d60:	bl	12ce8 <__assert_fail@plt+0x16e4>
   13d64:	ldr	r3, [pc, #164]	; 13e10 <__assert_fail@plt+0x280c>
   13d68:	cmp	r0, r3
   13d6c:	beq	138f8 <__assert_fail@plt+0x22f4>
   13d70:	bgt	13dc4 <__assert_fail@plt+0x27c0>
   13d74:	ldr	r3, [pc, #156]	; 13e18 <__assert_fail@plt+0x2814>
   13d78:	cmp	r0, r3
   13d7c:	beq	138f8 <__assert_fail@plt+0x22f4>
   13d80:	cmp	r0, #0
   13d84:	beq	138f8 <__assert_fail@plt+0x22f4>
   13d88:	ldr	r3, [sp, #40]	; 0x28
   13d8c:	cmp	r3, #3
   13d90:	moveq	r6, #1
   13d94:	movne	r6, #0
   13d98:	bne	13cc4 <__assert_fail@plt+0x26c0>
   13d9c:	mov	r4, #0
   13da0:	b	1390c <__assert_fail@plt+0x2308>
   13da4:	ldr	r3, [r5, #48]	; 0x30
   13da8:	mov	r2, #7
   13dac:	orr	r3, r3, #8192	; 0x2000
   13db0:	strh	r2, [sl, #56]	; 0x38
   13db4:	ldr	r0, [sp, #4]
   13db8:	str	r3, [r5, #48]	; 0x30
   13dbc:	bl	12c7c <__assert_fail@plt+0x1678>
   13dc0:	b	13c70 <__assert_fail@plt+0x266c>
   13dc4:	ldr	r3, [pc, #96]	; 13e2c <__assert_fail@plt+0x2828>
   13dc8:	cmp	r0, r3
   13dcc:	beq	138f8 <__assert_fail@plt+0x22f4>
   13dd0:	ldr	r3, [pc, #88]	; 13e30 <__assert_fail@plt+0x282c>
   13dd4:	cmp	r0, r3
   13dd8:	bne	13d88 <__assert_fail@plt+0x2784>
   13ddc:	b	138f8 <__assert_fail@plt+0x22f4>
   13de0:	str	r8, [r4, #80]	; 0x50
   13de4:	mov	r2, #1
   13de8:	mov	r3, #0
   13dec:	b	135c4 <__assert_fail@plt+0x1fc0>
   13df0:	ldr	r3, [pc, #36]	; 13e1c <__assert_fail@plt+0x2818>
   13df4:	ldr	r0, [r5, #48]	; 0x30
   13df8:	str	r3, [sp, #20]
   13dfc:	mov	r3, #1
   13e00:	str	r3, [sp, #52]	; 0x34
   13e04:	b	134ec <__assert_fail@plt+0x1ee8>
   13e08:	andeq	fp, r1, r8, asr #1
   13e0c:	andeq	r2, r0, r0, lsl r7
   13e10:	andeq	r6, r0, r9, ror #18
   13e14:			; <UNDEFINED> instruction: 0x01021994
   13e18:			; <UNDEFINED> instruction: 0xff534d42
   13e1c:	andeq	r8, r1, r0, lsr #13
   13e20:	strdeq	r2, [r1], -r8
   13e24:	strdeq	fp, [r1], -r8
   13e28:	andeq	r0, r0, r6, lsl #8
   13e2c:	andeq	r9, r0, r0, lsr #31
   13e30:	movtpl	r4, #24911	; 0x614f
   13e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e38:	bic	r5, r1, #4080	; 0xff0
   13e3c:	bic	r5, r5, #15
   13e40:	cmp	r5, #0
   13e44:	sub	sp, sp, #20
   13e48:	bne	14180 <__assert_fail@plt+0x2b7c>
   13e4c:	and	r3, r1, #516	; 0x204
   13e50:	cmp	r3, #516	; 0x204
   13e54:	mov	r6, r1
   13e58:	beq	14120 <__assert_fail@plt+0x2b1c>
   13e5c:	ands	r5, r1, #18
   13e60:	beq	14120 <__assert_fail@plt+0x2b1c>
   13e64:	mov	r7, r0
   13e68:	mov	r1, #96	; 0x60
   13e6c:	mov	r0, #1
   13e70:	mov	r9, r2
   13e74:	bl	18ee0 <__assert_fail@plt+0x78dc>
   13e78:	subs	r5, r0, #0
   13e7c:	beq	140c8 <__assert_fail@plt+0x2ac4>
   13e80:	tst	r6, #2
   13e84:	bicne	r3, r6, #512	; 0x200
   13e88:	orrne	r3, r3, #4
   13e8c:	strne	r3, [r5, #48]	; 0x30
   13e90:	ldr	r3, [r7]
   13e94:	streq	r6, [r5, #48]	; 0x30
   13e98:	mvn	r2, #99	; 0x63
   13e9c:	cmp	r3, #0
   13ea0:	str	r9, [r5, #44]	; 0x2c
   13ea4:	str	r2, [r5, #32]
   13ea8:	beq	141b4 <__assert_fail@plt+0x2bb0>
   13eac:	mov	r8, r7
   13eb0:	mov	r4, #0
   13eb4:	mov	r0, r3
   13eb8:	bl	11460 <strlen@plt>
   13ebc:	ldr	r3, [r8, #4]!
   13ec0:	cmp	r4, r0
   13ec4:	movcc	r4, r0
   13ec8:	cmp	r3, #0
   13ecc:	bne	13eb4 <__assert_fail@plt+0x28b0>
   13ed0:	add	r2, r4, #1
   13ed4:	cmp	r2, #4096	; 0x1000
   13ed8:	movcc	r2, #4096	; 0x1000
   13edc:	add	r1, r5, #36	; 0x24
   13ee0:	add	r0, r5, #24
   13ee4:	bl	13014 <__assert_fail@plt+0x1a10>
   13ee8:	subs	r3, r0, #0
   13eec:	str	r3, [sp, #4]
   13ef0:	beq	14108 <__assert_fail@plt+0x2b04>
   13ef4:	ldr	r4, [r7]
   13ef8:	cmp	r4, #0
   13efc:	beq	14138 <__assert_fail@plt+0x2b34>
   13f00:	mov	r2, #0
   13f04:	ldr	r1, [pc, #696]	; 141c4 <__assert_fail@plt+0x2bc0>
   13f08:	mov	r0, r5
   13f0c:	bl	12c08 <__assert_fail@plt+0x1604>
   13f10:	subs	fp, r0, #0
   13f14:	beq	14100 <__assert_fail@plt+0x2afc>
   13f18:	mvn	r3, #0
   13f1c:	cmp	r9, #0
   13f20:	str	r3, [fp, #48]	; 0x30
   13f24:	ldr	r4, [r7]
   13f28:	beq	13f3c <__assert_fail@plt+0x2938>
   13f2c:	ldr	r3, [r5, #48]	; 0x30
   13f30:	lsr	r3, r3, #10
   13f34:	and	r3, r3, #1
   13f38:	str	r3, [sp, #4]
   13f3c:	cmp	r4, #0
   13f40:	beq	141bc <__assert_fail@plt+0x2bb8>
   13f44:	lsr	r6, r6, #11
   13f48:	mov	r3, #0
   13f4c:	eor	r6, r6, #1
   13f50:	mov	sl, r3
   13f54:	str	r3, [sp, #12]
   13f58:	and	r3, r6, #1
   13f5c:	str	r3, [sp, #8]
   13f60:	mov	r8, sl
   13f64:	mov	r6, sl
   13f68:	b	13fa0 <__assert_fail@plt+0x299c>
   13f6c:	mov	r3, #11
   13f70:	strh	r3, [r4, #56]	; 0x38
   13f74:	mov	r2, #2
   13f78:	mov	r3, #0
   13f7c:	cmp	r9, #0
   13f80:	strd	r2, [r4, #112]	; 0x70
   13f84:	beq	14034 <__assert_fail@plt+0x2a30>
   13f88:	str	r6, [r4, #8]
   13f8c:	mov	r6, r4
   13f90:	ldr	r4, [r7, #4]!
   13f94:	add	r8, r8, #1
   13f98:	cmp	r4, #0
   13f9c:	beq	14060 <__assert_fail@plt+0x2a5c>
   13fa0:	mov	r0, r4
   13fa4:	bl	11460 <strlen@plt>
   13fa8:	ldr	r3, [sp, #8]
   13fac:	cmp	r0, #2
   13fb0:	movls	r3, #0
   13fb4:	andhi	r3, r3, #1
   13fb8:	cmp	r3, #0
   13fbc:	mov	r2, r0
   13fc0:	beq	13fd8 <__assert_fail@plt+0x29d4>
   13fc4:	sub	r1, r0, #1
   13fc8:	add	r3, r4, r1
   13fcc:	ldrb	r1, [r4, r1]
   13fd0:	cmp	r1, #47	; 0x2f
   13fd4:	beq	140d4 <__assert_fail@plt+0x2ad0>
   13fd8:	mov	r1, r4
   13fdc:	mov	r0, r5
   13fe0:	bl	12c08 <__assert_fail@plt+0x1604>
   13fe4:	subs	r4, r0, #0
   13fe8:	beq	140f0 <__assert_fail@plt+0x2aec>
   13fec:	ldr	r3, [sp, #4]
   13ff0:	str	sl, [r4, #48]	; 0x30
   13ff4:	cmp	r6, #0
   13ff8:	moveq	r3, #0
   13ffc:	andne	r3, r3, #1
   14000:	cmp	r3, #0
   14004:	add	r3, r4, #168	; 0xa8
   14008:	str	fp, [r4, #4]
   1400c:	str	r3, [r4, #24]
   14010:	bne	13f6c <__assert_fail@plt+0x2968>
   14014:	mov	r3, sl
   14018:	mov	r2, r4
   1401c:	ldr	r1, [r5, #48]	; 0x30
   14020:	ldr	r0, [r5, #32]
   14024:	bl	12ec8 <__assert_fail@plt+0x18c4>
   14028:	cmp	r9, #0
   1402c:	strh	r0, [r4, #56]	; 0x38
   14030:	bne	13f88 <__assert_fail@plt+0x2984>
   14034:	cmp	r6, #0
   14038:	str	r9, [r4, #8]
   1403c:	ldrne	r3, [sp, #12]
   14040:	streq	r4, [sp, #12]
   14044:	strne	r4, [sp, #12]
   14048:	strne	r4, [r3, #8]
   1404c:	moveq	r6, r4
   14050:	ldr	r4, [r7, #4]!
   14054:	add	r8, r8, #1
   14058:	cmp	r4, #0
   1405c:	bne	13fa0 <__assert_fail@plt+0x299c>
   14060:	cmp	r9, #0
   14064:	cmpne	r8, #1
   14068:	bhi	1419c <__assert_fail@plt+0x2b98>
   1406c:	mov	r2, #0
   14070:	ldr	r1, [pc, #332]	; 141c4 <__assert_fail@plt+0x2bc0>
   14074:	mov	r0, r5
   14078:	bl	12c08 <__assert_fail@plt+0x1604>
   1407c:	cmp	r0, #0
   14080:	str	r0, [r5]
   14084:	beq	140f0 <__assert_fail@plt+0x2aec>
   14088:	mov	r2, #1
   1408c:	mov	r3, #9
   14090:	str	r6, [r0, #8]
   14094:	str	r2, [r0, #48]	; 0x30
   14098:	strh	r3, [r0, #56]	; 0x38
   1409c:	add	r1, r5, #56	; 0x38
   140a0:	ldr	r0, [r5, #48]	; 0x30
   140a4:	bl	13094 <__assert_fail@plt+0x1a90>
   140a8:	cmp	r0, #0
   140ac:	beq	140f0 <__assert_fail@plt+0x2aec>
   140b0:	ldr	r1, [r5, #48]	; 0x30
   140b4:	tst	r1, #516	; 0x204
   140b8:	beq	14150 <__assert_fail@plt+0x2b4c>
   140bc:	mvn	r1, #0
   140c0:	add	r0, r5, #60	; 0x3c
   140c4:	bl	15b30 <__assert_fail@plt+0x452c>
   140c8:	mov	r0, r5
   140cc:	add	sp, sp, #20
   140d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140d4:	ldrb	r1, [r3, #-1]!
   140d8:	cmp	r1, #47	; 0x2f
   140dc:	bne	13fd8 <__assert_fail@plt+0x29d4>
   140e0:	sub	r2, r2, #1
   140e4:	cmp	r2, #1
   140e8:	bne	140d4 <__assert_fail@plt+0x2ad0>
   140ec:	b	13fd8 <__assert_fail@plt+0x29d4>
   140f0:	mov	r0, r6
   140f4:	bl	12c7c <__assert_fail@plt+0x1678>
   140f8:	mov	r0, fp
   140fc:	bl	19538 <__assert_fail@plt+0x7f34>
   14100:	ldr	r0, [r5, #24]
   14104:	bl	19538 <__assert_fail@plt+0x7f34>
   14108:	mov	r0, r5
   1410c:	bl	19538 <__assert_fail@plt+0x7f34>
   14110:	mov	r5, #0
   14114:	mov	r0, r5
   14118:	add	sp, sp, #20
   1411c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14120:	bl	11484 <__errno_location@plt>
   14124:	mov	r3, #22
   14128:	str	r3, [r0]
   1412c:	mov	r0, r5
   14130:	add	sp, sp, #20
   14134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14138:	cmp	r9, #0
   1413c:	movne	fp, r4
   14140:	bne	13f2c <__assert_fail@plt+0x2928>
   14144:	mov	fp, r9
   14148:	mov	r6, r9
   1414c:	b	1406c <__assert_fail@plt+0x2a68>
   14150:	ldr	r2, [pc, #112]	; 141c8 <__assert_fail@plt+0x2bc4>
   14154:	ldr	r0, [r5, #32]
   14158:	bl	13114 <__assert_fail@plt+0x1b10>
   1415c:	mvn	r1, #0
   14160:	cmp	r0, #0
   14164:	str	r0, [r5, #28]
   14168:	ldrlt	r3, [r5, #48]	; 0x30
   1416c:	add	r0, r5, #60	; 0x3c
   14170:	orrlt	r3, r3, #4
   14174:	strlt	r3, [r5, #48]	; 0x30
   14178:	bl	15b30 <__assert_fail@plt+0x452c>
   1417c:	b	140c8 <__assert_fail@plt+0x2ac4>
   14180:	bl	11484 <__errno_location@plt>
   14184:	mov	r5, #0
   14188:	mov	r3, #22
   1418c:	str	r3, [r0]
   14190:	mov	r0, r5
   14194:	add	sp, sp, #20
   14198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1419c:	mov	r1, r6
   141a0:	mov	r2, r8
   141a4:	mov	r0, r5
   141a8:	bl	12b28 <__assert_fail@plt+0x1524>
   141ac:	mov	r6, r0
   141b0:	b	1406c <__assert_fail@plt+0x2a68>
   141b4:	mov	r2, #4096	; 0x1000
   141b8:	b	13edc <__assert_fail@plt+0x28d8>
   141bc:	mov	r6, r4
   141c0:	b	1406c <__assert_fail@plt+0x2a68>
   141c4:	andeq	sl, r1, r4, lsl #21
   141c8:	strdeq	fp, [r1], -ip
   141cc:	ldr	r3, [r0]
   141d0:	push	{r4, r5, r6, lr}
   141d4:	cmp	r3, #0
   141d8:	mov	r5, r0
   141dc:	beq	14218 <__assert_fail@plt+0x2c14>
   141e0:	ldr	r2, [r3, #48]	; 0x30
   141e4:	cmp	r2, #0
   141e8:	blt	14308 <__assert_fail@plt+0x2d04>
   141ec:	ldr	r4, [r3, #8]
   141f0:	mov	r0, r3
   141f4:	cmp	r4, #0
   141f8:	ldreq	r4, [r3, #4]
   141fc:	bl	19538 <__assert_fail@plt+0x7f34>
   14200:	mov	r3, r4
   14204:	ldr	r2, [r4, #48]	; 0x30
   14208:	cmp	r2, #0
   1420c:	bge	141ec <__assert_fail@plt+0x2be8>
   14210:	mov	r0, r4
   14214:	bl	19538 <__assert_fail@plt+0x7f34>
   14218:	ldr	r0, [r5, #4]
   1421c:	cmp	r0, #0
   14220:	beq	14228 <__assert_fail@plt+0x2c24>
   14224:	bl	12c7c <__assert_fail@plt+0x1678>
   14228:	ldr	r0, [r5, #8]
   1422c:	bl	19538 <__assert_fail@plt+0x7f34>
   14230:	ldr	r0, [r5, #24]
   14234:	bl	19538 <__assert_fail@plt+0x7f34>
   14238:	ldr	r3, [r5, #48]	; 0x30
   1423c:	tst	r3, #512	; 0x200
   14240:	beq	142b4 <__assert_fail@plt+0x2cb0>
   14244:	ldr	r0, [r5, #32]
   14248:	cmp	r0, #0
   1424c:	blt	1425c <__assert_fail@plt+0x2c58>
   14250:	bl	115d4 <close@plt>
   14254:	cmp	r0, #0
   14258:	bne	142f4 <__assert_fail@plt+0x2cf0>
   1425c:	mov	r4, #0
   14260:	add	r0, r5, #60	; 0x3c
   14264:	bl	12cb0 <__assert_fail@plt+0x16ac>
   14268:	ldr	r0, [r5, #52]	; 0x34
   1426c:	cmp	r0, #0
   14270:	beq	14278 <__assert_fail@plt+0x2c74>
   14274:	bl	155f4 <__assert_fail@plt+0x3ff0>
   14278:	ldr	r2, [r5, #48]	; 0x30
   1427c:	ldr	r3, [pc, #164]	; 14328 <__assert_fail@plt+0x2d24>
   14280:	ldr	r0, [r5, #56]	; 0x38
   14284:	and	r3, r3, r2
   14288:	cmp	r3, #0
   1428c:	beq	14300 <__assert_fail@plt+0x2cfc>
   14290:	cmp	r0, #0
   14294:	beq	1429c <__assert_fail@plt+0x2c98>
   14298:	bl	155f4 <__assert_fail@plt+0x3ff0>
   1429c:	mov	r0, r5
   142a0:	bl	19538 <__assert_fail@plt+0x7f34>
   142a4:	cmp	r4, #0
   142a8:	bne	14318 <__assert_fail@plt+0x2d14>
   142ac:	mov	r0, r4
   142b0:	pop	{r4, r5, r6, pc}
   142b4:	tst	r3, #4
   142b8:	bne	1425c <__assert_fail@plt+0x2c58>
   142bc:	ldr	r0, [r5, #28]
   142c0:	bl	11568 <fchdir@plt>
   142c4:	cmp	r0, #0
   142c8:	beq	14310 <__assert_fail@plt+0x2d0c>
   142cc:	bl	11484 <__errno_location@plt>
   142d0:	ldr	r4, [r0]
   142d4:	ldr	r0, [r5, #28]
   142d8:	bl	115d4 <close@plt>
   142dc:	clz	r3, r4
   142e0:	lsr	r3, r3, #5
   142e4:	cmp	r0, #0
   142e8:	moveq	r3, #0
   142ec:	cmp	r3, #0
   142f0:	beq	14260 <__assert_fail@plt+0x2c5c>
   142f4:	bl	11484 <__errno_location@plt>
   142f8:	ldr	r4, [r0]
   142fc:	b	14260 <__assert_fail@plt+0x2c5c>
   14300:	bl	19538 <__assert_fail@plt+0x7f34>
   14304:	b	1429c <__assert_fail@plt+0x2c98>
   14308:	mov	r4, r3
   1430c:	b	14210 <__assert_fail@plt+0x2c0c>
   14310:	ldr	r0, [r5, #28]
   14314:	b	14250 <__assert_fail@plt+0x2c4c>
   14318:	bl	11484 <__errno_location@plt>
   1431c:	str	r4, [r0]
   14320:	mvn	r4, #0
   14324:	b	142ac <__assert_fail@plt+0x2ca8>
   14328:	andeq	r0, r0, r2, lsl #2
   1432c:	push	{r4, r5, r6, r7, r8, lr}
   14330:	ldr	r5, [r0]
   14334:	cmp	r5, #0
   14338:	beq	1446c <__assert_fail@plt+0x2e68>
   1433c:	ldr	r1, [r0, #48]	; 0x30
   14340:	ands	r3, r1, #8192	; 0x2000
   14344:	bne	1446c <__assert_fail@plt+0x2e68>
   14348:	ldrh	r2, [r5, #60]	; 0x3c
   1434c:	mov	r8, r0
   14350:	mov	r0, #3
   14354:	cmp	r2, #1
   14358:	strh	r0, [r5, #60]	; 0x3c
   1435c:	beq	146d8 <__assert_fail@plt+0x30d4>
   14360:	cmp	r2, #2
   14364:	ldrh	r3, [r5, #56]	; 0x38
   14368:	beq	14478 <__assert_fail@plt+0x2e74>
   1436c:	cmp	r3, #1
   14370:	bne	143a8 <__assert_fail@plt+0x2da4>
   14374:	cmp	r2, #4
   14378:	bne	1448c <__assert_fail@plt+0x2e88>
   1437c:	b	144a8 <__assert_fail@plt+0x2ea4>
   14380:	mov	r0, r5
   14384:	str	r4, [r8]
   14388:	bl	19538 <__assert_fail@plt+0x7f34>
   1438c:	ldr	r5, [r4, #48]	; 0x30
   14390:	cmp	r5, #0
   14394:	beq	144f0 <__assert_fail@plt+0x2eec>
   14398:	ldrh	r3, [r4, #60]	; 0x3c
   1439c:	mov	r5, r4
   143a0:	cmp	r3, #4
   143a4:	bne	145ec <__assert_fail@plt+0x2fe8>
   143a8:	ldr	r4, [r5, #8]
   143ac:	cmp	r4, #0
   143b0:	bne	14380 <__assert_fail@plt+0x2d7c>
   143b4:	ldr	r4, [r5, #4]
   143b8:	ldr	r3, [r4, #12]
   143bc:	cmp	r3, #0
   143c0:	bne	14868 <__assert_fail@plt+0x3264>
   143c4:	str	r4, [r8]
   143c8:	mov	r0, r5
   143cc:	bl	19538 <__assert_fail@plt+0x7f34>
   143d0:	ldr	r3, [r4, #48]	; 0x30
   143d4:	cmn	r3, #1
   143d8:	beq	147a4 <__assert_fail@plt+0x31a0>
   143dc:	ldrh	r3, [r4, #56]	; 0x38
   143e0:	cmp	r3, #11
   143e4:	beq	14660 <__assert_fail@plt+0x305c>
   143e8:	ldr	r3, [r4, #40]	; 0x28
   143ec:	ldr	r2, [r8, #24]
   143f0:	mov	r1, #0
   143f4:	strb	r1, [r2, r3]
   143f8:	ldr	r3, [r4, #48]	; 0x30
   143fc:	cmp	r3, r1
   14400:	beq	14730 <__assert_fail@plt+0x312c>
   14404:	ldrh	r3, [r4, #58]	; 0x3a
   14408:	tst	r3, #2
   1440c:	beq	146f0 <__assert_fail@plt+0x30ec>
   14410:	ldr	r3, [r8, #48]	; 0x30
   14414:	tst	r3, #4
   14418:	beq	14754 <__assert_fail@plt+0x3150>
   1441c:	ldr	r0, [r4, #36]	; 0x24
   14420:	bl	115d4 <close@plt>
   14424:	ldr	r3, [r8, #48]	; 0x30
   14428:	ldrh	r2, [r4, #56]	; 0x38
   1442c:	cmp	r2, #2
   14430:	beq	14464 <__assert_fail@plt+0x2e60>
   14434:	ldr	r2, [r4, #32]
   14438:	cmp	r2, #0
   1443c:	movne	r2, #7
   14440:	strhne	r2, [r4, #56]	; 0x38
   14444:	bne	14464 <__assert_fail@plt+0x2e60>
   14448:	mov	r2, #6
   1444c:	mov	r0, r3
   14450:	strh	r2, [r4, #56]	; 0x38
   14454:	add	r1, r8, #56	; 0x38
   14458:	mov	r2, r4
   1445c:	bl	133dc <__assert_fail@plt+0x1dd8>
   14460:	ldr	r3, [r8, #48]	; 0x30
   14464:	tst	r3, #8192	; 0x2000
   14468:	beq	144e8 <__assert_fail@plt+0x2ee4>
   1446c:	mov	r4, #0
   14470:	mov	r0, r4
   14474:	pop	{r4, r5, r6, r7, r8, pc}
   14478:	sub	r2, r3, #12
   1447c:	cmp	r2, #1
   14480:	bls	14770 <__assert_fail@plt+0x316c>
   14484:	cmp	r3, #1
   14488:	bne	143a8 <__assert_fail@plt+0x2da4>
   1448c:	tst	r1, #64	; 0x40
   14490:	beq	14664 <__assert_fail@plt+0x3060>
   14494:	ldrd	r6, [r5, #64]	; 0x40
   14498:	ldrd	r2, [r8, #16]
   1449c:	cmp	r7, r3
   144a0:	cmpeq	r6, r2
   144a4:	beq	14664 <__assert_fail@plt+0x3060>
   144a8:	ldrh	r3, [r5, #58]	; 0x3a
   144ac:	tst	r3, #2
   144b0:	bne	1485c <__assert_fail@plt+0x3258>
   144b4:	ldr	r0, [r8, #4]
   144b8:	cmp	r0, #0
   144bc:	beq	144cc <__assert_fail@plt+0x2ec8>
   144c0:	bl	12c7c <__assert_fail@plt+0x1678>
   144c4:	mov	r3, #0
   144c8:	str	r3, [r8, #4]
   144cc:	mov	r3, #6
   144d0:	strh	r3, [r5, #56]	; 0x38
   144d4:	mov	r2, r5
   144d8:	add	r1, r8, #56	; 0x38
   144dc:	ldr	r0, [r8, #48]	; 0x30
   144e0:	mov	r4, r5
   144e4:	bl	133dc <__assert_fail@plt+0x1dd8>
   144e8:	mov	r0, r4
   144ec:	pop	{r4, r5, r6, r7, r8, pc}
   144f0:	mov	r0, r8
   144f4:	bl	12e78 <__assert_fail@plt+0x1874>
   144f8:	cmp	r0, #0
   144fc:	bne	14848 <__assert_fail@plt+0x3244>
   14500:	ldr	r2, [r8, #48]	; 0x30
   14504:	ldr	r3, [pc, #1228]	; 149d8 <__assert_fail@plt+0x33d4>
   14508:	ldr	r0, [r8, #56]	; 0x38
   1450c:	and	r3, r3, r2
   14510:	cmp	r3, #0
   14514:	beq	147c4 <__assert_fail@plt+0x31c0>
   14518:	cmp	r0, #0
   1451c:	beq	14524 <__assert_fail@plt+0x2f20>
   14520:	bl	155f4 <__assert_fail@plt+0x3ff0>
   14524:	ldr	r2, [r4, #52]	; 0x34
   14528:	add	r6, r4, #168	; 0xa8
   1452c:	str	r2, [r4, #40]	; 0x28
   14530:	mov	r1, r6
   14534:	add	r2, r2, #1
   14538:	ldr	r0, [r8, #24]
   1453c:	bl	1128c <memmove@plt>
   14540:	mov	r0, r6
   14544:	mov	r1, #47	; 0x2f
   14548:	bl	1152c <strrchr@plt>
   1454c:	cmp	r0, #0
   14550:	beq	14580 <__assert_fail@plt+0x2f7c>
   14554:	cmp	r6, r0
   14558:	beq	14838 <__assert_fail@plt+0x3234>
   1455c:	add	r5, r0, #1
   14560:	mov	r0, r5
   14564:	bl	11460 <strlen@plt>
   14568:	mov	r1, r5
   1456c:	mov	r7, r0
   14570:	add	r2, r7, #1
   14574:	mov	r0, r6
   14578:	bl	1128c <memmove@plt>
   1457c:	str	r7, [r4, #52]	; 0x34
   14580:	ldr	r3, [r8, #24]
   14584:	add	r1, r8, #56	; 0x38
   14588:	str	r3, [r4, #28]
   1458c:	str	r3, [r4, #24]
   14590:	ldr	r0, [r8, #48]	; 0x30
   14594:	bl	13094 <__assert_fail@plt+0x1a90>
   14598:	ldrh	r3, [r4, #56]	; 0x38
   1459c:	cmp	r3, #11
   145a0:	str	r4, [r8]
   145a4:	beq	14644 <__assert_fail@plt+0x3040>
   145a8:	cmp	r3, #1
   145ac:	bne	144e8 <__assert_fail@plt+0x2ee4>
   145b0:	ldr	r3, [r4, #48]	; 0x30
   145b4:	cmp	r3, #0
   145b8:	ldrdeq	r2, [r4, #64]	; 0x40
   145bc:	strdeq	r2, [r8, #16]
   145c0:	mov	r2, r4
   145c4:	add	r1, r8, #56	; 0x38
   145c8:	ldr	r0, [r8, #48]	; 0x30
   145cc:	bl	1332c <__assert_fail@plt+0x1d28>
   145d0:	subs	r5, r0, #0
   145d4:	bne	144e8 <__assert_fail@plt+0x2ee4>
   145d8:	bl	11484 <__errno_location@plt>
   145dc:	mov	r3, #12
   145e0:	mov	r4, r5
   145e4:	str	r3, [r0]
   145e8:	b	144e8 <__assert_fail@plt+0x2ee4>
   145ec:	cmp	r3, #2
   145f0:	beq	1489c <__assert_fail@plt+0x3298>
   145f4:	ldr	r3, [r4, #4]
   145f8:	mov	ip, #47	; 0x2f
   145fc:	ldr	r2, [r8, #24]
   14600:	ldr	r0, [r3, #40]	; 0x28
   14604:	ldr	lr, [r3, #28]
   14608:	sub	r3, r0, #1
   1460c:	add	r1, r4, #168	; 0xa8
   14610:	ldrb	lr, [lr, r3]
   14614:	cmp	lr, ip
   14618:	movne	r3, r0
   1461c:	add	r0, r2, r3
   14620:	strb	ip, [r2, r3]
   14624:	ldr	r2, [r4, #52]	; 0x34
   14628:	add	r0, r0, #1
   1462c:	add	r2, r2, #1
   14630:	bl	1128c <memmove@plt>
   14634:	ldrh	r3, [r4, #56]	; 0x38
   14638:	str	r4, [r8]
   1463c:	cmp	r3, #11
   14640:	bne	145a8 <__assert_fail@plt+0x2fa4>
   14644:	ldrd	r2, [r4, #112]	; 0x70
   14648:	cmp	r3, #0
   1464c:	cmpeq	r2, #2
   14650:	beq	148c8 <__assert_fail@plt+0x32c4>
   14654:	cmp	r3, #0
   14658:	cmpeq	r2, #1
   1465c:	beq	144e8 <__assert_fail@plt+0x2ee4>
   14660:	bl	115c8 <abort@plt>
   14664:	ldr	r0, [r8, #4]
   14668:	cmp	r0, #0
   1466c:	beq	147e0 <__assert_fail@plt+0x31dc>
   14670:	tst	r1, #4096	; 0x1000
   14674:	bne	147cc <__assert_fail@plt+0x31c8>
   14678:	ldr	r3, [r5, #24]
   1467c:	mvn	r2, #0
   14680:	mov	r1, r5
   14684:	mov	r0, r8
   14688:	bl	13150 <__assert_fail@plt+0x1b4c>
   1468c:	cmp	r0, #0
   14690:	beq	14744 <__assert_fail@plt+0x3140>
   14694:	bl	11484 <__errno_location@plt>
   14698:	ldrh	r3, [r5, #58]	; 0x3a
   1469c:	ldr	r4, [r8, #4]
   146a0:	orr	r3, r3, #1
   146a4:	cmp	r4, #0
   146a8:	ldr	r2, [r0]
   146ac:	strh	r3, [r5, #58]	; 0x3a
   146b0:	str	r2, [r5, #32]
   146b4:	beq	14748 <__assert_fail@plt+0x3144>
   146b8:	mov	r3, r4
   146bc:	ldr	r2, [r3, #4]
   146c0:	ldr	r2, [r2, #24]
   146c4:	str	r2, [r3, #24]
   146c8:	ldr	r3, [r3, #8]
   146cc:	cmp	r3, #0
   146d0:	bne	146bc <__assert_fail@plt+0x30b8>
   146d4:	b	14748 <__assert_fail@plt+0x3144>
   146d8:	ldr	r0, [r8, #32]
   146dc:	mov	r2, r5
   146e0:	bl	12ec8 <__assert_fail@plt+0x18c4>
   146e4:	mov	r4, r5
   146e8:	strh	r0, [r5, #56]	; 0x38
   146ec:	b	144e8 <__assert_fail@plt+0x2ee4>
   146f0:	tst	r3, #1
   146f4:	bne	14424 <__assert_fail@plt+0x2e20>
   146f8:	ldr	r3, [pc, #732]	; 149dc <__assert_fail@plt+0x33d8>
   146fc:	mvn	r2, #0
   14700:	ldr	r1, [r4, #4]
   14704:	mov	r0, r8
   14708:	bl	13150 <__assert_fail@plt+0x1b4c>
   1470c:	cmp	r0, #0
   14710:	beq	14424 <__assert_fail@plt+0x2e20>
   14714:	bl	11484 <__errno_location@plt>
   14718:	ldr	r3, [r8, #48]	; 0x30
   1471c:	orr	r3, r3, #8192	; 0x2000
   14720:	ldr	r2, [r0]
   14724:	str	r2, [r4, #32]
   14728:	str	r3, [r8, #48]	; 0x30
   1472c:	b	14428 <__assert_fail@plt+0x2e24>
   14730:	mov	r0, r8
   14734:	bl	12e78 <__assert_fail@plt+0x1874>
   14738:	cmp	r0, #0
   1473c:	bne	14714 <__assert_fail@plt+0x3110>
   14740:	b	14424 <__assert_fail@plt+0x2e20>
   14744:	ldr	r4, [r8, #4]
   14748:	mov	r3, #0
   1474c:	str	r3, [r8, #4]
   14750:	b	145f4 <__assert_fail@plt+0x2ff0>
   14754:	tst	r3, #512	; 0x200
   14758:	beq	148e8 <__assert_fail@plt+0x32e4>
   1475c:	mov	r2, #1
   14760:	ldr	r1, [r4, #36]	; 0x24
   14764:	mov	r0, r8
   14768:	bl	12df8 <__assert_fail@plt+0x17f4>
   1476c:	b	1441c <__assert_fail@plt+0x2e18>
   14770:	mov	r3, #1
   14774:	mov	r2, r5
   14778:	ldr	r0, [r8, #32]
   1477c:	bl	12ec8 <__assert_fail@plt+0x18c4>
   14780:	cmp	r0, #1
   14784:	mov	r3, r0
   14788:	strh	r0, [r5, #56]	; 0x38
   1478c:	beq	14928 <__assert_fail@plt+0x3324>
   14790:	cmp	r0, #11
   14794:	mov	r4, r5
   14798:	str	r5, [r8]
   1479c:	bne	144e8 <__assert_fail@plt+0x2ee4>
   147a0:	b	14644 <__assert_fail@plt+0x3040>
   147a4:	mov	r0, r4
   147a8:	bl	19538 <__assert_fail@plt+0x7f34>
   147ac:	bl	11484 <__errno_location@plt>
   147b0:	mov	r3, #0
   147b4:	mov	r4, r3
   147b8:	str	r3, [r0]
   147bc:	str	r3, [r8]
   147c0:	b	144e8 <__assert_fail@plt+0x2ee4>
   147c4:	bl	19538 <__assert_fail@plt+0x7f34>
   147c8:	b	14524 <__assert_fail@plt+0x2f20>
   147cc:	bic	r1, r1, #4096	; 0x1000
   147d0:	str	r1, [r8, #48]	; 0x30
   147d4:	bl	12c7c <__assert_fail@plt+0x1678>
   147d8:	mov	r3, #0
   147dc:	str	r3, [r8, #4]
   147e0:	mov	r1, #3
   147e4:	mov	r0, r8
   147e8:	bl	13494 <__assert_fail@plt+0x1e90>
   147ec:	cmp	r0, #0
   147f0:	mov	r4, r0
   147f4:	str	r0, [r8, #4]
   147f8:	bne	14748 <__assert_fail@plt+0x3144>
   147fc:	ldr	r0, [r8, #48]	; 0x30
   14800:	tst	r0, #8192	; 0x2000
   14804:	bne	1446c <__assert_fail@plt+0x2e68>
   14808:	ldr	r3, [r5, #32]
   1480c:	cmp	r3, #0
   14810:	beq	14824 <__assert_fail@plt+0x3220>
   14814:	ldrh	r3, [r5, #56]	; 0x38
   14818:	cmp	r3, #4
   1481c:	movne	r3, #7
   14820:	strhne	r3, [r5, #56]	; 0x38
   14824:	add	r1, r8, #56	; 0x38
   14828:	mov	r2, r5
   1482c:	bl	133dc <__assert_fail@plt+0x1dd8>
   14830:	mov	r4, r5
   14834:	b	144e8 <__assert_fail@plt+0x2ee4>
   14838:	ldrb	r3, [r4, #169]	; 0xa9
   1483c:	cmp	r3, #0
   14840:	bne	1455c <__assert_fail@plt+0x2f58>
   14844:	b	14580 <__assert_fail@plt+0x2f7c>
   14848:	ldr	r3, [r8, #48]	; 0x30
   1484c:	mov	r4, r5
   14850:	orr	r3, r3, #8192	; 0x2000
   14854:	str	r3, [r8, #48]	; 0x30
   14858:	b	144e8 <__assert_fail@plt+0x2ee4>
   1485c:	ldr	r0, [r5, #36]	; 0x24
   14860:	bl	115d4 <close@plt>
   14864:	b	144b4 <__assert_fail@plt+0x2eb0>
   14868:	ldr	r3, [r4, #40]	; 0x28
   1486c:	ldr	r2, [r8, #24]
   14870:	mov	r0, #0
   14874:	str	r4, [r8]
   14878:	mov	r1, #3
   1487c:	strb	r0, [r2, r3]
   14880:	mov	r0, r8
   14884:	bl	13494 <__assert_fail@plt+0x1e90>
   14888:	subs	r4, r0, #0
   1488c:	beq	14914 <__assert_fail@plt+0x3310>
   14890:	mov	r0, r5
   14894:	bl	19538 <__assert_fail@plt+0x7f34>
   14898:	b	145f4 <__assert_fail@plt+0x2ff0>
   1489c:	mov	r3, #1
   148a0:	mov	r2, r4
   148a4:	ldr	r1, [r8, #48]	; 0x30
   148a8:	ldr	r0, [r8, #32]
   148ac:	bl	12ec8 <__assert_fail@plt+0x18c4>
   148b0:	cmp	r0, #1
   148b4:	strh	r0, [r4, #56]	; 0x38
   148b8:	beq	14940 <__assert_fail@plt+0x333c>
   148bc:	mov	r3, #3
   148c0:	strh	r3, [r4, #60]	; 0x3c
   148c4:	b	145f4 <__assert_fail@plt+0x2ff0>
   148c8:	mov	r3, #0
   148cc:	mov	r2, r4
   148d0:	ldr	r1, [r8, #48]	; 0x30
   148d4:	ldr	r0, [r8, #32]
   148d8:	bl	12ec8 <__assert_fail@plt+0x18c4>
   148dc:	mov	r3, r0
   148e0:	strh	r0, [r4, #56]	; 0x38
   148e4:	b	145a8 <__assert_fail@plt+0x2fa4>
   148e8:	ldr	r0, [r4, #36]	; 0x24
   148ec:	bl	11568 <fchdir@plt>
   148f0:	cmp	r0, #0
   148f4:	beq	1441c <__assert_fail@plt+0x2e18>
   148f8:	bl	11484 <__errno_location@plt>
   148fc:	ldr	r3, [r8, #48]	; 0x30
   14900:	orr	r3, r3, #8192	; 0x2000
   14904:	ldr	r2, [r0]
   14908:	str	r2, [r4, #32]
   1490c:	str	r3, [r8, #48]	; 0x30
   14910:	b	1441c <__assert_fail@plt+0x2e18>
   14914:	ldr	r3, [r8, #48]	; 0x30
   14918:	tst	r3, #8192	; 0x2000
   1491c:	bne	1446c <__assert_fail@plt+0x2e68>
   14920:	ldr	r4, [r5, #4]
   14924:	b	143c4 <__assert_fail@plt+0x2dc0>
   14928:	ldr	r1, [r8, #48]	; 0x30
   1492c:	tst	r1, #4
   14930:	beq	14974 <__assert_fail@plt+0x3370>
   14934:	str	r5, [r8]
   14938:	mov	r4, r5
   1493c:	b	145a8 <__assert_fail@plt+0x2fa4>
   14940:	ldr	r1, [r8, #48]	; 0x30
   14944:	tst	r1, #4
   14948:	bne	148bc <__assert_fail@plt+0x32b8>
   1494c:	ldr	r2, [pc, #140]	; 149e0 <__assert_fail@plt+0x33dc>
   14950:	ldr	r0, [r8, #32]
   14954:	bl	13114 <__assert_fail@plt+0x1b10>
   14958:	cmp	r0, #0
   1495c:	str	r0, [r4, #36]	; 0x24
   14960:	blt	149a4 <__assert_fail@plt+0x33a0>
   14964:	ldrh	r3, [r4, #58]	; 0x3a
   14968:	orr	r3, r3, #2
   1496c:	strh	r3, [r4, #58]	; 0x3a
   14970:	b	148bc <__assert_fail@plt+0x32b8>
   14974:	ldr	r2, [pc, #100]	; 149e0 <__assert_fail@plt+0x33dc>
   14978:	ldr	r0, [r8, #32]
   1497c:	bl	13114 <__assert_fail@plt+0x1b10>
   14980:	cmp	r0, #0
   14984:	str	r0, [r5, #36]	; 0x24
   14988:	blt	149bc <__assert_fail@plt+0x33b8>
   1498c:	ldrh	r2, [r5, #58]	; 0x3a
   14990:	ldrh	r3, [r5, #56]	; 0x38
   14994:	mov	r4, r5
   14998:	orr	r2, r2, #2
   1499c:	strh	r2, [r5, #58]	; 0x3a
   149a0:	b	1459c <__assert_fail@plt+0x2f98>
   149a4:	bl	11484 <__errno_location@plt>
   149a8:	mov	r2, #7
   149ac:	ldr	r3, [r0]
   149b0:	strh	r2, [r4, #56]	; 0x38
   149b4:	str	r3, [r4, #32]
   149b8:	b	148bc <__assert_fail@plt+0x32b8>
   149bc:	bl	11484 <__errno_location@plt>
   149c0:	mov	r2, #7
   149c4:	mov	r3, r2
   149c8:	ldr	r1, [r0]
   149cc:	strh	r2, [r5, #56]	; 0x38
   149d0:	str	r1, [r5, #32]
   149d4:	b	14934 <__assert_fail@plt+0x3330>
   149d8:	andeq	r0, r0, r2, lsl #2
   149dc:	strdeq	fp, [r1], -r8
   149e0:	strdeq	fp, [r1], -ip
   149e4:	cmp	r2, #4
   149e8:	bhi	149fc <__assert_fail@plt+0x33f8>
   149ec:	mov	r3, #0
   149f0:	strh	r2, [r1, #60]	; 0x3c
   149f4:	mov	r0, r3
   149f8:	bx	lr
   149fc:	push	{r4, lr}
   14a00:	bl	11484 <__errno_location@plt>
   14a04:	mov	r2, #22
   14a08:	mov	r3, #1
   14a0c:	str	r2, [r0]
   14a10:	mov	r0, r3
   14a14:	pop	{r4, pc}
   14a18:	push	{r4, r5, r6, r7, r8, lr}
   14a1c:	bics	r8, r1, #4096	; 0x1000
   14a20:	bne	14b20 <__assert_fail@plt+0x351c>
   14a24:	mov	r5, r0
   14a28:	mov	r4, r1
   14a2c:	bl	11484 <__errno_location@plt>
   14a30:	ldr	r6, [r5]
   14a34:	str	r8, [r0]
   14a38:	ldr	r3, [r5, #48]	; 0x30
   14a3c:	mov	r7, r0
   14a40:	ands	r3, r3, #8192	; 0x2000
   14a44:	bne	14b38 <__assert_fail@plt+0x3534>
   14a48:	ldrh	r2, [r6, #56]	; 0x38
   14a4c:	cmp	r2, #9
   14a50:	ldreq	r3, [r6, #8]
   14a54:	beq	14ac4 <__assert_fail@plt+0x34c0>
   14a58:	cmp	r2, #1
   14a5c:	bne	14ac4 <__assert_fail@plt+0x34c0>
   14a60:	ldr	r0, [r5, #4]
   14a64:	cmp	r0, #0
   14a68:	beq	14a70 <__assert_fail@plt+0x346c>
   14a6c:	bl	12c7c <__assert_fail@plt+0x1678>
   14a70:	cmp	r4, #4096	; 0x1000
   14a74:	moveq	r8, #2
   14a78:	ldreq	r3, [r5, #48]	; 0x30
   14a7c:	movne	r8, #1
   14a80:	orreq	r3, r3, #4096	; 0x1000
   14a84:	streq	r3, [r5, #48]	; 0x30
   14a88:	ldr	r3, [r6, #48]	; 0x30
   14a8c:	cmp	r3, #0
   14a90:	bne	14ab0 <__assert_fail@plt+0x34ac>
   14a94:	ldr	r3, [r6, #24]
   14a98:	ldrb	r3, [r3]
   14a9c:	cmp	r3, #47	; 0x2f
   14aa0:	beq	14ab0 <__assert_fail@plt+0x34ac>
   14aa4:	ldr	r1, [r5, #48]	; 0x30
   14aa8:	ands	r4, r1, #4
   14aac:	beq	14acc <__assert_fail@plt+0x34c8>
   14ab0:	mov	r1, r8
   14ab4:	mov	r0, r5
   14ab8:	bl	13494 <__assert_fail@plt+0x1e90>
   14abc:	mov	r3, r0
   14ac0:	str	r0, [r5, #4]
   14ac4:	mov	r0, r3
   14ac8:	pop	{r4, r5, r6, r7, r8, pc}
   14acc:	ldr	r2, [pc, #160]	; 14b74 <__assert_fail@plt+0x3570>
   14ad0:	ldr	r0, [r5, #32]
   14ad4:	bl	13114 <__assert_fail@plt+0x1b10>
   14ad8:	subs	r6, r0, #0
   14adc:	strlt	r4, [r5, #4]
   14ae0:	movlt	r3, r4
   14ae4:	blt	14ac4 <__assert_fail@plt+0x34c0>
   14ae8:	mov	r1, r8
   14aec:	mov	r0, r5
   14af0:	bl	13494 <__assert_fail@plt+0x1e90>
   14af4:	ldr	r3, [r5, #48]	; 0x30
   14af8:	ands	r4, r3, #512	; 0x200
   14afc:	str	r0, [r5, #4]
   14b00:	beq	14b40 <__assert_fail@plt+0x353c>
   14b04:	mov	r1, r6
   14b08:	mov	r2, #1
   14b0c:	mov	r0, r5
   14b10:	bl	12df8 <__assert_fail@plt+0x17f4>
   14b14:	ldr	r3, [r5, #4]
   14b18:	mov	r0, r3
   14b1c:	pop	{r4, r5, r6, r7, r8, pc}
   14b20:	bl	11484 <__errno_location@plt>
   14b24:	mov	r2, #22
   14b28:	mov	r3, #0
   14b2c:	str	r2, [r0]
   14b30:	mov	r0, r3
   14b34:	pop	{r4, r5, r6, r7, r8, pc}
   14b38:	mov	r3, r8
   14b3c:	b	14ac4 <__assert_fail@plt+0x34c0>
   14b40:	mov	r0, r6
   14b44:	bl	11568 <fchdir@plt>
   14b48:	cmp	r0, #0
   14b4c:	bne	14b5c <__assert_fail@plt+0x3558>
   14b50:	mov	r0, r6
   14b54:	bl	115d4 <close@plt>
   14b58:	b	14b14 <__assert_fail@plt+0x3510>
   14b5c:	ldr	r5, [r7]
   14b60:	mov	r0, r6
   14b64:	bl	115d4 <close@plt>
   14b68:	str	r5, [r7]
   14b6c:	mov	r3, r4
   14b70:	b	14ac4 <__assert_fail@plt+0x34c0>
   14b74:	strdeq	fp, [r1], -ip
   14b78:	cmp	r0, #10
   14b7c:	movcc	r0, #10
   14b80:	push	{r4, r5, r6, r7, r8, lr}
   14b84:	orr	r7, r0, #1
   14b88:	cmn	r7, #1
   14b8c:	ldrne	r8, [pc, #132]	; 14c18 <__assert_fail@plt+0x3614>
   14b90:	beq	14c08 <__assert_fail@plt+0x3604>
   14b94:	cmp	r7, #9
   14b98:	bls	14c10 <__assert_fail@plt+0x360c>
   14b9c:	umull	r2, r3, r8, r7
   14ba0:	lsr	r3, r3, #1
   14ba4:	add	r3, r3, r3, lsl #1
   14ba8:	cmp	r7, r3
   14bac:	beq	14bfc <__assert_fail@plt+0x35f8>
   14bb0:	mov	r6, #16
   14bb4:	mov	r5, #9
   14bb8:	mov	r4, #3
   14bbc:	b	14bd0 <__assert_fail@plt+0x35cc>
   14bc0:	bl	19e0c <__assert_fail@plt+0x8808>
   14bc4:	add	r6, r6, #8
   14bc8:	cmp	r1, #0
   14bcc:	beq	14bfc <__assert_fail@plt+0x35f8>
   14bd0:	add	r5, r5, r6
   14bd4:	add	r4, r4, #2
   14bd8:	cmp	r5, r7
   14bdc:	mov	r0, r7
   14be0:	mov	r1, r4
   14be4:	bcc	14bc0 <__assert_fail@plt+0x35bc>
   14be8:	mov	r1, r4
   14bec:	mov	r0, r7
   14bf0:	bl	19e0c <__assert_fail@plt+0x8808>
   14bf4:	cmp	r1, #0
   14bf8:	bne	14c08 <__assert_fail@plt+0x3604>
   14bfc:	add	r7, r7, #2
   14c00:	cmn	r7, #1
   14c04:	bne	14b94 <__assert_fail@plt+0x3590>
   14c08:	mov	r0, r7
   14c0c:	pop	{r4, r5, r6, r7, r8, pc}
   14c10:	mov	r4, #3
   14c14:	b	14be8 <__assert_fail@plt+0x35e4>
   14c18:	bge	feabf6cc <optarg@@GLIBC_2.4+0xfea93504>
   14c1c:	push	{r4, lr}
   14c20:	ror	r0, r0, #3
   14c24:	bl	19e0c <__assert_fail@plt+0x8808>
   14c28:	mov	r0, r1
   14c2c:	pop	{r4, pc}
   14c30:	sub	r0, r1, r0
   14c34:	clz	r0, r0
   14c38:	lsr	r0, r0, #5
   14c3c:	bx	lr
   14c40:	push	{r4, lr}
   14c44:	mov	r4, r0
   14c48:	mov	r0, r1
   14c4c:	ldr	r3, [r4, #24]
   14c50:	ldr	r1, [r4, #8]
   14c54:	blx	r3
   14c58:	ldr	r3, [r4, #8]
   14c5c:	cmp	r0, r3
   14c60:	bcs	14c70 <__assert_fail@plt+0x366c>
   14c64:	ldr	r3, [r4]
   14c68:	add	r0, r3, r0, lsl #3
   14c6c:	pop	{r4, pc}
   14c70:	bl	115c8 <abort@plt>
   14c74:	push	{r4, r5, r6, r7, r8, lr}
   14c78:	mov	r7, r2
   14c7c:	mov	r8, r3
   14c80:	mov	r6, r0
   14c84:	mov	r5, r1
   14c88:	bl	14c40 <__assert_fail@plt+0x363c>
   14c8c:	str	r0, [r7]
   14c90:	ldr	r3, [r0]
   14c94:	cmp	r3, #0
   14c98:	beq	14d30 <__assert_fail@plt+0x372c>
   14c9c:	cmp	r5, r3
   14ca0:	mov	r4, r0
   14ca4:	beq	14cc4 <__assert_fail@plt+0x36c0>
   14ca8:	mov	r1, r3
   14cac:	mov	r0, r5
   14cb0:	ldr	r3, [r6, #28]
   14cb4:	blx	r3
   14cb8:	cmp	r0, #0
   14cbc:	beq	14d24 <__assert_fail@plt+0x3720>
   14cc0:	ldr	r3, [r4]
   14cc4:	cmp	r8, #0
   14cc8:	beq	14cf4 <__assert_fail@plt+0x36f0>
   14ccc:	ldr	r2, [r4, #4]
   14cd0:	cmp	r2, #0
   14cd4:	movne	ip, #0
   14cd8:	ldmne	r2, {r0, r1}
   14cdc:	streq	r2, [r4]
   14ce0:	stmne	r4, {r0, r1}
   14ce4:	strne	ip, [r2]
   14ce8:	ldrne	r1, [r6, #36]	; 0x24
   14cec:	strne	r1, [r2, #4]
   14cf0:	strne	r2, [r6, #36]	; 0x24
   14cf4:	mov	r0, r3
   14cf8:	pop	{r4, r5, r6, r7, r8, pc}
   14cfc:	ldr	r3, [r2]
   14d00:	cmp	r5, r3
   14d04:	beq	14d44 <__assert_fail@plt+0x3740>
   14d08:	mov	r1, r3
   14d0c:	mov	r0, r5
   14d10:	ldr	r3, [r6, #28]
   14d14:	blx	r3
   14d18:	cmp	r0, #0
   14d1c:	bne	14d3c <__assert_fail@plt+0x3738>
   14d20:	ldr	r4, [r4, #4]
   14d24:	ldr	r2, [r4, #4]
   14d28:	cmp	r2, #0
   14d2c:	bne	14cfc <__assert_fail@plt+0x36f8>
   14d30:	mov	r3, #0
   14d34:	mov	r0, r3
   14d38:	pop	{r4, r5, r6, r7, r8, pc}
   14d3c:	ldr	r2, [r4, #4]
   14d40:	ldr	r3, [r2]
   14d44:	cmp	r8, #0
   14d48:	beq	14cf4 <__assert_fail@plt+0x36f0>
   14d4c:	ldr	r0, [r2, #4]
   14d50:	mov	r1, #0
   14d54:	str	r0, [r4, #4]
   14d58:	str	r1, [r2]
   14d5c:	ldr	r1, [r6, #36]	; 0x24
   14d60:	mov	r0, r3
   14d64:	str	r1, [r2, #4]
   14d68:	str	r2, [r6, #36]	; 0x24
   14d6c:	pop	{r4, r5, r6, r7, r8, pc}
   14d70:	ldr	r2, [pc, #164]	; 14e1c <__assert_fail@plt+0x3818>
   14d74:	ldr	r3, [r0]
   14d78:	cmp	r3, r2
   14d7c:	beq	14e04 <__assert_fail@plt+0x3800>
   14d80:	vldr	s15, [r3, #8]
   14d84:	vldr	s14, [pc, #128]	; 14e0c <__assert_fail@plt+0x3808>
   14d88:	vcmpe.f32	s15, s14
   14d8c:	vmrs	APSR_nzcv, fpscr
   14d90:	ble	14df8 <__assert_fail@plt+0x37f4>
   14d94:	vldr	s13, [pc, #116]	; 14e10 <__assert_fail@plt+0x380c>
   14d98:	vcmpe.f32	s15, s13
   14d9c:	vmrs	APSR_nzcv, fpscr
   14da0:	bpl	14df8 <__assert_fail@plt+0x37f4>
   14da4:	vldr	s13, [pc, #104]	; 14e14 <__assert_fail@plt+0x3810>
   14da8:	vldr	s12, [r3, #12]
   14dac:	vcmpe.f32	s12, s13
   14db0:	vmrs	APSR_nzcv, fpscr
   14db4:	ble	14df8 <__assert_fail@plt+0x37f4>
   14db8:	vldr	s13, [r3]
   14dbc:	vcmpe.f32	s13, #0.0
   14dc0:	vmrs	APSR_nzcv, fpscr
   14dc4:	blt	14df8 <__assert_fail@plt+0x37f4>
   14dc8:	vadd.f32	s14, s13, s14
   14dcc:	vldr	s13, [r3, #4]
   14dd0:	vcmpe.f32	s14, s13
   14dd4:	vmrs	APSR_nzcv, fpscr
   14dd8:	bpl	14df8 <__assert_fail@plt+0x37f4>
   14ddc:	vldr	s12, [pc, #52]	; 14e18 <__assert_fail@plt+0x3814>
   14de0:	vcmpe.f32	s13, s12
   14de4:	vmrs	APSR_nzcv, fpscr
   14de8:	bhi	14df8 <__assert_fail@plt+0x37f4>
   14dec:	vcmpe.f32	s15, s14
   14df0:	vmrs	APSR_nzcv, fpscr
   14df4:	bgt	14e04 <__assert_fail@plt+0x3800>
   14df8:	str	r2, [r0]
   14dfc:	mov	r0, #0
   14e00:	bx	lr
   14e04:	mov	r0, #1
   14e08:	bx	lr
   14e0c:	stclcc	12, cr12, [ip, #820]	; 0x334
   14e10:	svccc	0x00666666
   14e14:	svccc	0x008ccccd
   14e18:	svccc	0x00800000
   14e1c:	andeq	fp, r1, r0, lsl #2
   14e20:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e24:	ldm	r1, {r6, ip}
   14e28:	cmp	r6, ip
   14e2c:	bcs	14ee8 <__assert_fail@plt+0x38e4>
   14e30:	mov	sl, r2
   14e34:	mov	r5, r0
   14e38:	mov	r8, r1
   14e3c:	add	r6, r6, #8
   14e40:	mov	r9, #0
   14e44:	ldr	fp, [r6, #-8]
   14e48:	mov	r7, r6
   14e4c:	cmp	fp, #0
   14e50:	beq	14edc <__assert_fail@plt+0x38d8>
   14e54:	ldr	r4, [r6, #-4]
   14e58:	cmp	r4, #0
   14e5c:	bne	14e7c <__assert_fail@plt+0x3878>
   14e60:	b	14ecc <__assert_fail@plt+0x38c8>
   14e64:	ldr	r3, [r0, #4]
   14e68:	cmp	r2, #0
   14e6c:	str	r3, [r4, #4]
   14e70:	str	r4, [r0, #4]
   14e74:	mov	r4, r2
   14e78:	beq	14ec8 <__assert_fail@plt+0x38c4>
   14e7c:	ldr	fp, [r4]
   14e80:	mov	r0, r5
   14e84:	mov	r1, fp
   14e88:	bl	14c40 <__assert_fail@plt+0x363c>
   14e8c:	ldr	r2, [r4, #4]
   14e90:	ldr	r1, [r0]
   14e94:	cmp	r1, #0
   14e98:	bne	14e64 <__assert_fail@plt+0x3860>
   14e9c:	ldr	ip, [r5, #12]
   14ea0:	str	fp, [r0]
   14ea4:	add	r3, ip, #1
   14ea8:	str	r3, [r5, #12]
   14eac:	str	r1, [r4]
   14eb0:	ldr	r3, [r5, #36]	; 0x24
   14eb4:	cmp	r2, #0
   14eb8:	str	r3, [r4, #4]
   14ebc:	str	r4, [r5, #36]	; 0x24
   14ec0:	mov	r4, r2
   14ec4:	bne	14e7c <__assert_fail@plt+0x3878>
   14ec8:	ldr	fp, [r6, #-8]
   14ecc:	cmp	sl, #0
   14ed0:	str	r9, [r6, #-4]
   14ed4:	beq	14ef0 <__assert_fail@plt+0x38ec>
   14ed8:	ldr	ip, [r8, #4]
   14edc:	cmp	ip, r7
   14ee0:	add	r6, r6, #8
   14ee4:	bhi	14e44 <__assert_fail@plt+0x3840>
   14ee8:	mov	r0, #1
   14eec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ef0:	mov	r1, fp
   14ef4:	mov	r0, r5
   14ef8:	bl	14c40 <__assert_fail@plt+0x363c>
   14efc:	ldr	r2, [r0]
   14f00:	mov	r4, r0
   14f04:	cmp	r2, #0
   14f08:	beq	14f54 <__assert_fail@plt+0x3950>
   14f0c:	ldr	r0, [r5, #36]	; 0x24
   14f10:	cmp	r0, #0
   14f14:	beq	14f68 <__assert_fail@plt+0x3964>
   14f18:	ldr	r2, [r0, #4]
   14f1c:	str	r2, [r5, #36]	; 0x24
   14f20:	ldr	r2, [r4, #4]
   14f24:	str	fp, [r0]
   14f28:	str	r2, [r0, #4]
   14f2c:	str	r0, [r4, #4]
   14f30:	str	r9, [r6, #-8]
   14f34:	ldr	r3, [r8, #12]
   14f38:	ldr	ip, [r8, #4]
   14f3c:	sub	r3, r3, #1
   14f40:	cmp	ip, r7
   14f44:	str	r3, [r8, #12]
   14f48:	add	r6, r6, #8
   14f4c:	bhi	14e44 <__assert_fail@plt+0x3840>
   14f50:	b	14ee8 <__assert_fail@plt+0x38e4>
   14f54:	ldr	r2, [r5, #12]
   14f58:	str	fp, [r0]
   14f5c:	add	r3, r2, #1
   14f60:	str	r3, [r5, #12]
   14f64:	b	14f30 <__assert_fail@plt+0x392c>
   14f68:	mov	r0, #8
   14f6c:	bl	18f28 <__assert_fail@plt+0x7924>
   14f70:	cmp	r0, #0
   14f74:	bne	14f20 <__assert_fail@plt+0x391c>
   14f78:	mov	r0, sl
   14f7c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f80:	ldr	r0, [r0, #8]
   14f84:	bx	lr
   14f88:	ldr	r0, [r0, #12]
   14f8c:	bx	lr
   14f90:	ldr	r0, [r0, #16]
   14f94:	bx	lr
   14f98:	ldm	r0, {r1, ip}
   14f9c:	mov	r0, #0
   14fa0:	cmp	r1, ip
   14fa4:	bcs	14fec <__assert_fail@plt+0x39e8>
   14fa8:	ldr	r3, [r1]
   14fac:	cmp	r3, #0
   14fb0:	beq	14fdc <__assert_fail@plt+0x39d8>
   14fb4:	ldr	r3, [r1, #4]
   14fb8:	mov	r2, #1
   14fbc:	cmp	r3, #0
   14fc0:	beq	14fd4 <__assert_fail@plt+0x39d0>
   14fc4:	ldr	r3, [r3, #4]
   14fc8:	add	r2, r2, #1
   14fcc:	cmp	r3, #0
   14fd0:	bne	14fc4 <__assert_fail@plt+0x39c0>
   14fd4:	cmp	r0, r2
   14fd8:	movcc	r0, r2
   14fdc:	add	r1, r1, #8
   14fe0:	cmp	r1, ip
   14fe4:	bcc	14fa8 <__assert_fail@plt+0x39a4>
   14fe8:	bx	lr
   14fec:	bx	lr
   14ff0:	push	{lr}		; (str lr, [sp, #-4]!)
   14ff4:	mov	r2, #0
   14ff8:	ldm	r0, {r1, lr}
   14ffc:	mov	ip, r2
   15000:	cmp	r1, lr
   15004:	bcs	15044 <__assert_fail@plt+0x3a40>
   15008:	ldr	r3, [r1]
   1500c:	cmp	r3, #0
   15010:	beq	15038 <__assert_fail@plt+0x3a34>
   15014:	ldr	r3, [r1, #4]
   15018:	add	ip, ip, #1
   1501c:	cmp	r3, #0
   15020:	add	r2, r2, #1
   15024:	beq	15038 <__assert_fail@plt+0x3a34>
   15028:	ldr	r3, [r3, #4]
   1502c:	add	r2, r2, #1
   15030:	cmp	r3, #0
   15034:	bne	15028 <__assert_fail@plt+0x3a24>
   15038:	add	r1, r1, #8
   1503c:	cmp	r1, lr
   15040:	bcc	15008 <__assert_fail@plt+0x3a04>
   15044:	ldr	r3, [r0, #12]
   15048:	cmp	r3, ip
   1504c:	ldreq	r0, [r0, #16]
   15050:	subeq	r0, r0, r2
   15054:	clzeq	r0, r0
   15058:	lsreq	r0, r0, #5
   1505c:	movne	r0, #0
   15060:	pop	{pc}		; (ldr pc, [sp], #4)
   15064:	push	{r4, r5, r6, r7, lr}
   15068:	mov	r5, r1
   1506c:	ldm	r0, {ip, lr}
   15070:	sub	sp, sp, #12
   15074:	ldr	r3, [r0, #16]
   15078:	cmp	ip, lr
   1507c:	mov	r4, #0
   15080:	ldr	r6, [r0, #8]
   15084:	ldr	r7, [r0, #12]
   15088:	bcs	150cc <__assert_fail@plt+0x3ac8>
   1508c:	ldr	r2, [ip]
   15090:	cmp	r2, #0
   15094:	beq	150c0 <__assert_fail@plt+0x3abc>
   15098:	ldr	r2, [ip, #4]
   1509c:	mov	r1, #1
   150a0:	cmp	r2, #0
   150a4:	beq	150b8 <__assert_fail@plt+0x3ab4>
   150a8:	ldr	r2, [r2, #4]
   150ac:	add	r1, r1, #1
   150b0:	cmp	r2, #0
   150b4:	bne	150a8 <__assert_fail@plt+0x3aa4>
   150b8:	cmp	r4, r1
   150bc:	movcc	r4, r1
   150c0:	add	ip, ip, #8
   150c4:	cmp	ip, lr
   150c8:	bcc	1508c <__assert_fail@plt+0x3a88>
   150cc:	ldr	r2, [pc, #116]	; 15148 <__assert_fail@plt+0x3b44>
   150d0:	mov	r1, #1
   150d4:	mov	r0, r5
   150d8:	bl	114cc <__fprintf_chk@plt>
   150dc:	mov	r3, r6
   150e0:	ldr	r2, [pc, #100]	; 1514c <__assert_fail@plt+0x3b48>
   150e4:	mov	r1, #1
   150e8:	mov	r0, r5
   150ec:	bl	114cc <__fprintf_chk@plt>
   150f0:	vmov	s15, r7
   150f4:	vldr	d5, [pc, #68]	; 15140 <__assert_fail@plt+0x3b3c>
   150f8:	mov	r3, r7
   150fc:	ldr	r2, [pc, #76]	; 15150 <__assert_fail@plt+0x3b4c>
   15100:	vcvt.f64.u32	d6, s15
   15104:	vmov	s15, r6
   15108:	mov	r1, #1
   1510c:	mov	r0, r5
   15110:	vcvt.f64.u32	d7, s15
   15114:	vmul.f64	d6, d6, d5
   15118:	vdiv.f64	d5, d6, d7
   1511c:	vstr	d5, [sp]
   15120:	bl	114cc <__fprintf_chk@plt>
   15124:	mov	r3, r4
   15128:	mov	r0, r5
   1512c:	ldr	r2, [pc, #32]	; 15154 <__assert_fail@plt+0x3b50>
   15130:	mov	r1, #1
   15134:	add	sp, sp, #12
   15138:	pop	{r4, r5, r6, r7, lr}
   1513c:	b	114cc <__fprintf_chk@plt>
   15140:	andeq	r0, r0, r0
   15144:	subsmi	r0, r9, r0
   15148:	andeq	fp, r1, r4, lsl r1
   1514c:	andeq	fp, r1, ip, lsr #2
   15150:	andeq	fp, r1, r4, asr #2
   15154:	andeq	fp, r1, r8, ror #2
   15158:	push	{r4, r5, r6, lr}
   1515c:	mov	r6, r0
   15160:	mov	r5, r1
   15164:	bl	14c40 <__assert_fail@plt+0x363c>
   15168:	ldr	r3, [r0]
   1516c:	cmp	r3, #0
   15170:	movne	r4, r0
   15174:	bne	15180 <__assert_fail@plt+0x3b7c>
   15178:	b	151ac <__assert_fail@plt+0x3ba8>
   1517c:	ldr	r3, [r4]
   15180:	cmp	r5, r3
   15184:	mov	r1, r3
   15188:	mov	r0, r5
   1518c:	beq	151b4 <__assert_fail@plt+0x3bb0>
   15190:	ldr	r3, [r6, #28]
   15194:	blx	r3
   15198:	cmp	r0, #0
   1519c:	bne	151bc <__assert_fail@plt+0x3bb8>
   151a0:	ldr	r4, [r4, #4]
   151a4:	cmp	r4, #0
   151a8:	bne	1517c <__assert_fail@plt+0x3b78>
   151ac:	mov	r0, #0
   151b0:	pop	{r4, r5, r6, pc}
   151b4:	mov	r0, r5
   151b8:	pop	{r4, r5, r6, pc}
   151bc:	ldr	r0, [r4]
   151c0:	pop	{r4, r5, r6, pc}
   151c4:	ldr	r3, [r0, #16]
   151c8:	cmp	r3, #0
   151cc:	beq	15200 <__assert_fail@plt+0x3bfc>
   151d0:	ldr	r3, [r0]
   151d4:	ldr	r2, [r0, #4]
   151d8:	cmp	r3, r2
   151dc:	bcc	151f0 <__assert_fail@plt+0x3bec>
   151e0:	b	15208 <__assert_fail@plt+0x3c04>
   151e4:	add	r3, r3, #8
   151e8:	cmp	r3, r2
   151ec:	bcs	15208 <__assert_fail@plt+0x3c04>
   151f0:	ldr	r0, [r3]
   151f4:	cmp	r0, #0
   151f8:	beq	151e4 <__assert_fail@plt+0x3be0>
   151fc:	bx	lr
   15200:	mov	r0, r3
   15204:	bx	lr
   15208:	push	{r4, lr}
   1520c:	bl	115c8 <abort@plt>
   15210:	push	{r4, r5, r6, lr}
   15214:	mov	r5, r0
   15218:	mov	r4, r1
   1521c:	bl	14c40 <__assert_fail@plt+0x363c>
   15220:	mov	r2, r0
   15224:	mov	r3, r0
   15228:	b	15234 <__assert_fail@plt+0x3c30>
   1522c:	cmp	r3, #0
   15230:	beq	15248 <__assert_fail@plt+0x3c44>
   15234:	ldm	r3, {r1, r3}
   15238:	cmp	r4, r1
   1523c:	bne	1522c <__assert_fail@plt+0x3c28>
   15240:	cmp	r3, #0
   15244:	bne	15270 <__assert_fail@plt+0x3c6c>
   15248:	ldr	r3, [r5, #4]
   1524c:	b	1525c <__assert_fail@plt+0x3c58>
   15250:	ldr	r0, [r2]
   15254:	cmp	r0, #0
   15258:	popne	{r4, r5, r6, pc}
   1525c:	add	r2, r2, #8
   15260:	cmp	r2, r3
   15264:	bcc	15250 <__assert_fail@plt+0x3c4c>
   15268:	mov	r0, #0
   1526c:	pop	{r4, r5, r6, pc}
   15270:	ldr	r0, [r3]
   15274:	pop	{r4, r5, r6, pc}
   15278:	push	{r4, r5, r6, lr}
   1527c:	ldm	r0, {r5, lr}
   15280:	cmp	r5, lr
   15284:	bcs	15308 <__assert_fail@plt+0x3d04>
   15288:	add	r5, r5, #8
   1528c:	mov	ip, #0
   15290:	ldr	r3, [r5, #-8]
   15294:	mov	r6, r5
   15298:	cmp	r3, #0
   1529c:	beq	152e8 <__assert_fail@plt+0x3ce4>
   152a0:	cmp	r2, ip
   152a4:	bls	152f4 <__assert_fail@plt+0x3cf0>
   152a8:	str	r3, [r1, ip, lsl #2]
   152ac:	ldr	r3, [r5, #-4]
   152b0:	add	r4, ip, #1
   152b4:	cmp	r3, #0
   152b8:	add	lr, r1, ip, lsl #2
   152bc:	beq	152fc <__assert_fail@plt+0x3cf8>
   152c0:	mov	ip, r4
   152c4:	cmp	r2, ip
   152c8:	beq	152f4 <__assert_fail@plt+0x3cf0>
   152cc:	ldr	r4, [r3]
   152d0:	add	ip, ip, #1
   152d4:	str	r4, [lr, #4]!
   152d8:	ldr	r3, [r3, #4]
   152dc:	cmp	r3, #0
   152e0:	bne	152c4 <__assert_fail@plt+0x3cc0>
   152e4:	ldr	lr, [r0, #4]
   152e8:	cmp	lr, r6
   152ec:	add	r5, r5, #8
   152f0:	bhi	15290 <__assert_fail@plt+0x3c8c>
   152f4:	mov	r0, ip
   152f8:	pop	{r4, r5, r6, pc}
   152fc:	ldr	lr, [r0, #4]
   15300:	mov	ip, r4
   15304:	b	152e8 <__assert_fail@plt+0x3ce4>
   15308:	mov	ip, #0
   1530c:	b	152f4 <__assert_fail@plt+0x3cf0>
   15310:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15314:	ldr	r3, [r0, #4]
   15318:	ldr	r8, [r0]
   1531c:	cmp	r8, r3
   15320:	bcs	15384 <__assert_fail@plt+0x3d80>
   15324:	mov	r7, r2
   15328:	mov	r6, r1
   1532c:	mov	r9, r0
   15330:	mov	r5, #0
   15334:	ldr	r0, [r8]
   15338:	cmp	r0, #0
   1533c:	beq	15370 <__assert_fail@plt+0x3d6c>
   15340:	mov	r4, r8
   15344:	b	1534c <__assert_fail@plt+0x3d48>
   15348:	ldr	r0, [r4]
   1534c:	mov	r1, r7
   15350:	blx	r6
   15354:	cmp	r0, #0
   15358:	beq	1537c <__assert_fail@plt+0x3d78>
   1535c:	ldr	r4, [r4, #4]
   15360:	add	r5, r5, #1
   15364:	cmp	r4, #0
   15368:	bne	15348 <__assert_fail@plt+0x3d44>
   1536c:	ldr	r3, [r9, #4]
   15370:	add	r8, r8, #8
   15374:	cmp	r3, r8
   15378:	bhi	15334 <__assert_fail@plt+0x3d30>
   1537c:	mov	r0, r5
   15380:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15384:	mov	r5, #0
   15388:	b	1537c <__assert_fail@plt+0x3d78>
   1538c:	push	{r4, r5, r6, lr}
   15390:	mov	r4, r0
   15394:	ldrb	r0, [r0]
   15398:	cmp	r0, #0
   1539c:	beq	153cc <__assert_fail@plt+0x3dc8>
   153a0:	mov	r5, r1
   153a4:	mov	r1, #0
   153a8:	rsb	r1, r1, r1, lsl #5
   153ac:	add	r0, r1, r0
   153b0:	mov	r1, r5
   153b4:	bl	19e0c <__assert_fail@plt+0x8808>
   153b8:	ldrb	r0, [r4, #1]!
   153bc:	cmp	r0, #0
   153c0:	bne	153a8 <__assert_fail@plt+0x3da4>
   153c4:	mov	r0, r1
   153c8:	pop	{r4, r5, r6, pc}
   153cc:	mov	r1, r0
   153d0:	b	153c4 <__assert_fail@plt+0x3dc0>
   153d4:	push	{lr}		; (str lr, [sp, #-4]!)
   153d8:	mov	ip, r0
   153dc:	ldr	lr, [pc, #16]	; 153f4 <__assert_fail@plt+0x3df0>
   153e0:	ldm	lr!, {r0, r1, r2, r3}
   153e4:	ldr	lr, [lr]
   153e8:	stmia	ip!, {r0, r1, r2, r3}
   153ec:	str	lr, [ip]
   153f0:	pop	{pc}		; (ldr pc, [sp], #4)
   153f4:	andeq	fp, r1, r0, lsl #2
   153f8:	push	{r4, r5, r6, r7, lr}
   153fc:	sub	sp, sp, #12
   15400:	cmp	r2, #0
   15404:	str	r0, [sp, #4]
   15408:	ldr	r6, [pc, #304]	; 15540 <__assert_fail@plt+0x3f3c>
   1540c:	mov	r0, #40	; 0x28
   15410:	movne	r6, r2
   15414:	cmp	r3, #0
   15418:	ldr	r7, [pc, #292]	; 15544 <__assert_fail@plt+0x3f40>
   1541c:	mov	r5, r1
   15420:	movne	r7, r3
   15424:	bl	18f28 <__assert_fail@plt+0x7924>
   15428:	subs	r4, r0, #0
   1542c:	beq	154c4 <__assert_fail@plt+0x3ec0>
   15430:	cmp	r5, #0
   15434:	beq	15518 <__assert_fail@plt+0x3f14>
   15438:	mov	r0, r4
   1543c:	str	r5, [r0, #20]!
   15440:	bl	14d70 <__assert_fail@plt+0x376c>
   15444:	cmp	r0, #0
   15448:	beq	15500 <__assert_fail@plt+0x3efc>
   1544c:	ldrb	r3, [r5, #16]
   15450:	cmp	r3, #0
   15454:	beq	154d0 <__assert_fail@plt+0x3ecc>
   15458:	ldr	r0, [sp, #4]
   1545c:	bl	14b78 <__assert_fail@plt+0x3574>
   15460:	lsrs	r2, r0, #30
   15464:	movne	r5, #1
   15468:	moveq	r5, #0
   1546c:	tst	r0, #536870912	; 0x20000000
   15470:	bne	154f8 <__assert_fail@plt+0x3ef4>
   15474:	cmp	r5, #0
   15478:	bne	154f8 <__assert_fail@plt+0x3ef4>
   1547c:	cmp	r0, #0
   15480:	str	r0, [r4, #8]
   15484:	beq	15500 <__assert_fail@plt+0x3efc>
   15488:	mov	r1, #8
   1548c:	bl	18ee0 <__assert_fail@plt+0x78dc>
   15490:	cmp	r0, #0
   15494:	str	r0, [r4]
   15498:	beq	15500 <__assert_fail@plt+0x3efc>
   1549c:	ldr	r3, [r4, #8]
   154a0:	str	r5, [r4, #12]
   154a4:	str	r5, [r4, #16]
   154a8:	add	r0, r0, r3, lsl #3
   154ac:	ldr	r3, [sp, #32]
   154b0:	str	r6, [r4, #24]
   154b4:	str	r7, [r4, #28]
   154b8:	str	r3, [r4, #32]
   154bc:	str	r5, [r4, #36]	; 0x24
   154c0:	str	r0, [r4, #4]
   154c4:	mov	r0, r4
   154c8:	add	sp, sp, #12
   154cc:	pop	{r4, r5, r6, r7, pc}
   154d0:	vldr	s12, [r5, #8]
   154d4:	vldr	s15, [sp, #4]
   154d8:	vldr	s14, [pc, #88]	; 15538 <__assert_fail@plt+0x3f34>
   154dc:	vcvt.f32.u32	s13, s15
   154e0:	vdiv.f32	s15, s13, s12
   154e4:	vcmpe.f32	s15, s14
   154e8:	vmrs	APSR_nzcv, fpscr
   154ec:	vcvtlt.u32.f32	s15, s15
   154f0:	vstrlt	s15, [sp, #4]
   154f4:	blt	15458 <__assert_fail@plt+0x3e54>
   154f8:	mov	r3, #0
   154fc:	str	r3, [r4, #8]
   15500:	mov	r0, r4
   15504:	bl	19538 <__assert_fail@plt+0x7f34>
   15508:	mov	r4, #0
   1550c:	mov	r0, r4
   15510:	add	sp, sp, #12
   15514:	pop	{r4, r5, r6, r7, pc}
   15518:	ldr	r3, [pc, #40]	; 15548 <__assert_fail@plt+0x3f44>
   1551c:	mov	r0, r4
   15520:	str	r3, [r0, #20]!
   15524:	bl	14d70 <__assert_fail@plt+0x376c>
   15528:	cmp	r0, #0
   1552c:	vldrne	s12, [pc, #8]	; 1553c <__assert_fail@plt+0x3f38>
   15530:	bne	154d4 <__assert_fail@plt+0x3ed0>
   15534:	b	15500 <__assert_fail@plt+0x3efc>
   15538:	svcmi	0x00800000
   1553c:	svccc	0x004ccccd
   15540:	andeq	r4, r1, ip, lsl ip
   15544:	andeq	r4, r1, r0, lsr ip
   15548:	andeq	fp, r1, r0, lsl #2
   1554c:	push	{r4, r5, r6, r7, r8, lr}
   15550:	mov	r5, r0
   15554:	ldr	r7, [r0]
   15558:	ldr	r3, [r0, #4]
   1555c:	cmp	r7, r3
   15560:	addcc	r7, r7, #8
   15564:	movcc	r6, #0
   15568:	bcs	155e4 <__assert_fail@plt+0x3fe0>
   1556c:	ldr	r2, [r7, #-8]
   15570:	mov	r8, r7
   15574:	cmp	r2, #0
   15578:	beq	155d8 <__assert_fail@plt+0x3fd4>
   1557c:	ldr	r4, [r7, #-4]
   15580:	ldr	r2, [r5, #32]
   15584:	cmp	r4, #0
   15588:	beq	155bc <__assert_fail@plt+0x3fb8>
   1558c:	cmp	r2, #0
   15590:	beq	155a0 <__assert_fail@plt+0x3f9c>
   15594:	ldr	r0, [r4]
   15598:	blx	r2
   1559c:	ldr	r2, [r5, #32]
   155a0:	ldr	r3, [r4, #4]
   155a4:	ldr	r1, [r5, #36]	; 0x24
   155a8:	str	r6, [r4]
   155ac:	str	r1, [r4, #4]
   155b0:	str	r4, [r5, #36]	; 0x24
   155b4:	subs	r4, r3, #0
   155b8:	bne	1558c <__assert_fail@plt+0x3f88>
   155bc:	cmp	r2, #0
   155c0:	beq	155cc <__assert_fail@plt+0x3fc8>
   155c4:	ldr	r0, [r7, #-8]
   155c8:	blx	r2
   155cc:	str	r6, [r7, #-8]
   155d0:	str	r6, [r7, #-4]
   155d4:	ldr	r3, [r5, #4]
   155d8:	cmp	r3, r8
   155dc:	add	r7, r7, #8
   155e0:	bhi	1556c <__assert_fail@plt+0x3f68>
   155e4:	mov	r3, #0
   155e8:	str	r3, [r5, #12]
   155ec:	str	r3, [r5, #16]
   155f0:	pop	{r4, r5, r6, r7, r8, pc}
   155f4:	ldr	r3, [r0, #32]
   155f8:	push	{r4, r5, r6, lr}
   155fc:	cmp	r3, #0
   15600:	mov	r5, r0
   15604:	beq	15664 <__assert_fail@plt+0x4060>
   15608:	ldr	r3, [r0, #16]
   1560c:	cmp	r3, #0
   15610:	beq	15664 <__assert_fail@plt+0x4060>
   15614:	ldr	r6, [r0]
   15618:	ldr	r3, [r0, #4]
   1561c:	cmp	r6, r3
   15620:	bcs	156a0 <__assert_fail@plt+0x409c>
   15624:	ldr	r0, [r6]
   15628:	cmp	r0, #0
   1562c:	movne	r4, r6
   15630:	bne	1563c <__assert_fail@plt+0x4038>
   15634:	b	15654 <__assert_fail@plt+0x4050>
   15638:	ldr	r0, [r4]
   1563c:	ldr	r3, [r5, #32]
   15640:	blx	r3
   15644:	ldr	r4, [r4, #4]
   15648:	cmp	r4, #0
   1564c:	bne	15638 <__assert_fail@plt+0x4034>
   15650:	ldr	r3, [r5, #4]
   15654:	add	r6, r6, #8
   15658:	cmp	r3, r6
   1565c:	bhi	15624 <__assert_fail@plt+0x4020>
   15660:	b	15668 <__assert_fail@plt+0x4064>
   15664:	ldr	r3, [r5, #4]
   15668:	ldr	r6, [r5]
   1566c:	cmp	r3, r6
   15670:	bls	156a0 <__assert_fail@plt+0x409c>
   15674:	ldr	r0, [r6, #4]
   15678:	cmp	r0, #0
   1567c:	beq	15694 <__assert_fail@plt+0x4090>
   15680:	ldr	r4, [r0, #4]
   15684:	bl	19538 <__assert_fail@plt+0x7f34>
   15688:	subs	r0, r4, #0
   1568c:	bne	15680 <__assert_fail@plt+0x407c>
   15690:	ldr	r3, [r5, #4]
   15694:	add	r6, r6, #8
   15698:	cmp	r3, r6
   1569c:	bhi	15674 <__assert_fail@plt+0x4070>
   156a0:	ldr	r0, [r5, #36]	; 0x24
   156a4:	cmp	r0, #0
   156a8:	beq	156bc <__assert_fail@plt+0x40b8>
   156ac:	ldr	r4, [r0, #4]
   156b0:	bl	19538 <__assert_fail@plt+0x7f34>
   156b4:	subs	r0, r4, #0
   156b8:	bne	156ac <__assert_fail@plt+0x40a8>
   156bc:	ldr	r0, [r5]
   156c0:	bl	19538 <__assert_fail@plt+0x7f34>
   156c4:	mov	r0, r5
   156c8:	pop	{r4, r5, r6, lr}
   156cc:	b	19538 <__assert_fail@plt+0x7f34>
   156d0:	ldr	r3, [r0, #20]
   156d4:	push	{r4, r5, r6, r7, lr}
   156d8:	sub	sp, sp, #52	; 0x34
   156dc:	ldrb	r2, [r3, #16]
   156e0:	mov	r5, r0
   156e4:	str	r1, [sp, #4]
   156e8:	cmp	r2, #0
   156ec:	bne	15718 <__assert_fail@plt+0x4114>
   156f0:	vmov	s15, r1
   156f4:	vldr	s13, [r3, #8]
   156f8:	vldr	s14, [pc, #352]	; 15860 <__assert_fail@plt+0x425c>
   156fc:	vcvt.f32.u32	s12, s15
   15700:	vdiv.f32	s15, s12, s13
   15704:	vcmpe.f32	s15, s14
   15708:	vmrs	APSR_nzcv, fpscr
   1570c:	bge	1581c <__assert_fail@plt+0x4218>
   15710:	vcvt.u32.f32	s15, s15
   15714:	vstr	s15, [sp, #4]
   15718:	ldr	r0, [sp, #4]
   1571c:	bl	14b78 <__assert_fail@plt+0x3574>
   15720:	lsrs	r3, r0, #30
   15724:	movne	r2, #1
   15728:	moveq	r2, #0
   1572c:	tst	r0, #536870912	; 0x20000000
   15730:	movne	r2, #1
   15734:	cmp	r0, #0
   15738:	movne	r4, r2
   1573c:	orreq	r4, r2, #1
   15740:	cmp	r4, #0
   15744:	mov	r6, r0
   15748:	bne	1581c <__assert_fail@plt+0x4218>
   1574c:	ldr	r3, [r5, #8]
   15750:	cmp	r3, r0
   15754:	beq	1580c <__assert_fail@plt+0x4208>
   15758:	mov	r1, #8
   1575c:	bl	18ee0 <__assert_fail@plt+0x78dc>
   15760:	cmp	r0, #0
   15764:	str	r0, [sp, #8]
   15768:	beq	1581c <__assert_fail@plt+0x4218>
   1576c:	ldr	r1, [r5, #24]
   15770:	ldr	r7, [r5, #20]
   15774:	ldr	lr, [r5, #28]
   15778:	ldr	ip, [r5, #32]
   1577c:	add	r0, r0, r6, lsl #3
   15780:	ldr	r3, [r5, #36]	; 0x24
   15784:	str	r0, [sp, #12]
   15788:	mov	r2, r4
   1578c:	str	r1, [sp, #32]
   15790:	add	r0, sp, #8
   15794:	mov	r1, r5
   15798:	str	r4, [sp, #20]
   1579c:	str	r4, [sp, #24]
   157a0:	str	r6, [sp, #16]
   157a4:	str	r7, [sp, #28]
   157a8:	str	lr, [sp, #36]	; 0x24
   157ac:	str	ip, [sp, #40]	; 0x28
   157b0:	str	r3, [sp, #44]	; 0x2c
   157b4:	bl	14e20 <__assert_fail@plt+0x381c>
   157b8:	subs	r4, r0, #0
   157bc:	bne	1582c <__assert_fail@plt+0x4228>
   157c0:	ldr	r3, [sp, #44]	; 0x2c
   157c4:	mov	r2, #1
   157c8:	str	r3, [r5, #36]	; 0x24
   157cc:	add	r1, sp, #8
   157d0:	mov	r0, r5
   157d4:	bl	14e20 <__assert_fail@plt+0x381c>
   157d8:	cmp	r0, #0
   157dc:	beq	1585c <__assert_fail@plt+0x4258>
   157e0:	add	r1, sp, #8
   157e4:	mov	r0, r5
   157e8:	mov	r2, r4
   157ec:	bl	14e20 <__assert_fail@plt+0x381c>
   157f0:	cmp	r0, #0
   157f4:	beq	1585c <__assert_fail@plt+0x4258>
   157f8:	ldr	r0, [sp, #8]
   157fc:	bl	19538 <__assert_fail@plt+0x7f34>
   15800:	mov	r0, r4
   15804:	add	sp, sp, #52	; 0x34
   15808:	pop	{r4, r5, r6, r7, pc}
   1580c:	mov	r4, #1
   15810:	mov	r0, r4
   15814:	add	sp, sp, #52	; 0x34
   15818:	pop	{r4, r5, r6, r7, pc}
   1581c:	mov	r4, #0
   15820:	mov	r0, r4
   15824:	add	sp, sp, #52	; 0x34
   15828:	pop	{r4, r5, r6, r7, pc}
   1582c:	ldr	r0, [r5]
   15830:	bl	19538 <__assert_fail@plt+0x7f34>
   15834:	add	r0, sp, #12
   15838:	ldr	ip, [sp, #8]
   1583c:	ldm	r0, {r0, r1, r2}
   15840:	ldr	r3, [sp, #44]	; 0x2c
   15844:	str	ip, [r5]
   15848:	stmib	r5, {r0, r1, r2}
   1584c:	mov	r0, r4
   15850:	str	r3, [r5, #36]	; 0x24
   15854:	add	sp, sp, #52	; 0x34
   15858:	pop	{r4, r5, r6, r7, pc}
   1585c:	bl	115c8 <abort@plt>
   15860:	svcmi	0x00800000
   15864:	push	{r4, r5, r6, lr}
   15868:	subs	r6, r1, #0
   1586c:	sub	sp, sp, #8
   15870:	beq	159a4 <__assert_fail@plt+0x43a0>
   15874:	mov	r4, r2
   15878:	mov	r3, #0
   1587c:	add	r2, sp, #4
   15880:	mov	r5, r0
   15884:	bl	14c74 <__assert_fail@plt+0x3670>
   15888:	cmp	r0, #0
   1588c:	beq	158a8 <__assert_fail@plt+0x42a4>
   15890:	cmp	r4, #0
   15894:	moveq	r0, r4
   15898:	strne	r0, [r4]
   1589c:	movne	r0, #0
   158a0:	add	sp, sp, #8
   158a4:	pop	{r4, r5, r6, pc}
   158a8:	vldr	s15, [r5, #8]
   158ac:	ldr	r3, [r5, #20]
   158b0:	vldr	s14, [r5, #12]
   158b4:	vcvt.f32.u32	s15, s15
   158b8:	vldr	s13, [r3, #8]
   158bc:	vcvt.f32.u32	s14, s14
   158c0:	vmul.f32	s15, s15, s13
   158c4:	vcmpe.f32	s14, s15
   158c8:	vmrs	APSR_nzcv, fpscr
   158cc:	bgt	1591c <__assert_fail@plt+0x4318>
   158d0:	ldr	r2, [sp, #4]
   158d4:	ldr	r3, [r2]
   158d8:	cmp	r3, #0
   158dc:	beq	159a8 <__assert_fail@plt+0x43a4>
   158e0:	ldr	r3, [r5, #36]	; 0x24
   158e4:	cmp	r3, #0
   158e8:	beq	159cc <__assert_fail@plt+0x43c8>
   158ec:	ldr	r1, [r3, #4]
   158f0:	str	r1, [r5, #36]	; 0x24
   158f4:	ldr	r1, [r5, #16]
   158f8:	ldr	r0, [r2, #4]
   158fc:	add	r1, r1, #1
   15900:	str	r0, [r3, #4]
   15904:	str	r6, [r3]
   15908:	mov	r0, #1
   1590c:	str	r3, [r2, #4]
   15910:	str	r1, [r5, #16]
   15914:	add	sp, sp, #8
   15918:	pop	{r4, r5, r6, pc}
   1591c:	add	r0, r5, #20
   15920:	bl	14d70 <__assert_fail@plt+0x376c>
   15924:	vldr	s15, [r5, #8]
   15928:	ldr	r3, [r5, #20]
   1592c:	vldr	s14, [r5, #12]
   15930:	vcvt.f32.u32	s15, s15
   15934:	vldr	s13, [r3, #8]
   15938:	vcvt.f32.u32	s14, s14
   1593c:	vmul.f32	s12, s13, s15
   15940:	vcmpe.f32	s14, s12
   15944:	vmrs	APSR_nzcv, fpscr
   15948:	ble	158d0 <__assert_fail@plt+0x42cc>
   1594c:	vldr	s14, [r3, #12]
   15950:	ldrb	r2, [r3, #16]
   15954:	vmul.f32	s15, s15, s14
   15958:	cmp	r2, #0
   1595c:	vldr	s14, [pc, #132]	; 159e8 <__assert_fail@plt+0x43e4>
   15960:	vmuleq.f32	s15, s15, s13
   15964:	vcmpe.f32	s15, s14
   15968:	vmrs	APSR_nzcv, fpscr
   1596c:	bge	159e0 <__assert_fail@plt+0x43dc>
   15970:	vcvt.u32.f32	s15, s15
   15974:	mov	r0, r5
   15978:	vmov	r1, s15
   1597c:	bl	156d0 <__assert_fail@plt+0x40cc>
   15980:	cmp	r0, #0
   15984:	beq	159e0 <__assert_fail@plt+0x43dc>
   15988:	add	r2, sp, #4
   1598c:	mov	r3, #0
   15990:	mov	r1, r6
   15994:	mov	r0, r5
   15998:	bl	14c74 <__assert_fail@plt+0x3670>
   1599c:	cmp	r0, #0
   159a0:	beq	158d0 <__assert_fail@plt+0x42cc>
   159a4:	bl	115c8 <abort@plt>
   159a8:	ldr	r1, [r5, #16]
   159ac:	ldr	r3, [r5, #12]
   159b0:	add	r1, r1, #1
   159b4:	add	r3, r3, #1
   159b8:	str	r6, [r2]
   159bc:	mov	r0, #1
   159c0:	str	r1, [r5, #16]
   159c4:	str	r3, [r5, #12]
   159c8:	b	158a0 <__assert_fail@plt+0x429c>
   159cc:	mov	r0, #8
   159d0:	bl	18f28 <__assert_fail@plt+0x7924>
   159d4:	subs	r3, r0, #0
   159d8:	ldrne	r2, [sp, #4]
   159dc:	bne	158f4 <__assert_fail@plt+0x42f0>
   159e0:	mvn	r0, #0
   159e4:	b	158a0 <__assert_fail@plt+0x429c>
   159e8:	svcmi	0x00800000
   159ec:	push	{r4, lr}
   159f0:	sub	sp, sp, #8
   159f4:	add	r2, sp, #4
   159f8:	mov	r4, r1
   159fc:	bl	15864 <__assert_fail@plt+0x4260>
   15a00:	cmn	r0, #1
   15a04:	beq	15a1c <__assert_fail@plt+0x4418>
   15a08:	cmp	r0, #0
   15a0c:	movne	r0, r4
   15a10:	ldreq	r0, [sp, #4]
   15a14:	add	sp, sp, #8
   15a18:	pop	{r4, pc}
   15a1c:	mov	r0, #0
   15a20:	b	15a14 <__assert_fail@plt+0x4410>
   15a24:	push	{r4, r5, r6, lr}
   15a28:	sub	sp, sp, #8
   15a2c:	mov	r3, #1
   15a30:	add	r2, sp, #4
   15a34:	mov	r4, r0
   15a38:	bl	14c74 <__assert_fail@plt+0x3670>
   15a3c:	subs	r5, r0, #0
   15a40:	beq	15a60 <__assert_fail@plt+0x445c>
   15a44:	ldr	r2, [sp, #4]
   15a48:	ldr	r3, [r4, #16]
   15a4c:	ldr	r2, [r2]
   15a50:	sub	r3, r3, #1
   15a54:	cmp	r2, #0
   15a58:	str	r3, [r4, #16]
   15a5c:	beq	15a6c <__assert_fail@plt+0x4468>
   15a60:	mov	r0, r5
   15a64:	add	sp, sp, #8
   15a68:	pop	{r4, r5, r6, pc}
   15a6c:	vldr	s15, [r4, #8]
   15a70:	ldr	r3, [r4, #12]
   15a74:	ldr	r2, [r4, #20]
   15a78:	sub	r3, r3, #1
   15a7c:	vcvt.f32.u32	s14, s15
   15a80:	vldr	s13, [r2]
   15a84:	vmov	s15, r3
   15a88:	str	r3, [r4, #12]
   15a8c:	vcvt.f32.u32	s15, s15
   15a90:	vmul.f32	s14, s14, s13
   15a94:	vcmpe.f32	s15, s14
   15a98:	vmrs	APSR_nzcv, fpscr
   15a9c:	bpl	15a60 <__assert_fail@plt+0x445c>
   15aa0:	add	r0, r4, #20
   15aa4:	bl	14d70 <__assert_fail@plt+0x376c>
   15aa8:	vldr	s15, [r4, #8]
   15aac:	ldr	r3, [r4, #20]
   15ab0:	vldr	s13, [r4, #12]
   15ab4:	vcvt.f32.u32	s15, s15
   15ab8:	vldr	s14, [r3]
   15abc:	vcvt.f32.u32	s13, s13
   15ac0:	vmul.f32	s14, s15, s14
   15ac4:	vcmpe.f32	s13, s14
   15ac8:	vmrs	APSR_nzcv, fpscr
   15acc:	bpl	15a60 <__assert_fail@plt+0x445c>
   15ad0:	ldrb	r2, [r3, #16]
   15ad4:	mov	r0, r4
   15ad8:	cmp	r2, #0
   15adc:	vldreq	s13, [r3, #4]
   15ae0:	vldrne	s14, [r3, #4]
   15ae4:	vldreq	s14, [r3, #8]
   15ae8:	vmuleq.f32	s15, s15, s13
   15aec:	vmul.f32	s15, s15, s14
   15af0:	vcvt.u32.f32	s15, s15
   15af4:	vmov	r1, s15
   15af8:	bl	156d0 <__assert_fail@plt+0x40cc>
   15afc:	cmp	r0, #0
   15b00:	bne	15a60 <__assert_fail@plt+0x445c>
   15b04:	ldr	r0, [r4, #36]	; 0x24
   15b08:	cmp	r0, #0
   15b0c:	beq	15b20 <__assert_fail@plt+0x451c>
   15b10:	ldr	r6, [r0, #4]
   15b14:	bl	19538 <__assert_fail@plt+0x7f34>
   15b18:	subs	r0, r6, #0
   15b1c:	bne	15b10 <__assert_fail@plt+0x450c>
   15b20:	mov	r3, #0
   15b24:	str	r3, [r4, #36]	; 0x24
   15b28:	b	15a60 <__assert_fail@plt+0x445c>
   15b2c:	b	15a24 <__assert_fail@plt+0x4420>
   15b30:	mov	r3, #0
   15b34:	mov	r2, #1
   15b38:	str	r1, [r0]
   15b3c:	str	r1, [r0, #4]
   15b40:	str	r1, [r0, #8]
   15b44:	str	r1, [r0, #12]
   15b48:	str	r1, [r0, #16]
   15b4c:	strb	r2, [r0, #28]
   15b50:	str	r3, [r0, #20]
   15b54:	str	r3, [r0, #24]
   15b58:	bx	lr
   15b5c:	ldrb	r0, [r0, #28]
   15b60:	bx	lr
   15b64:	ldrb	ip, [r0, #28]
   15b68:	ldr	r3, [r0, #20]
   15b6c:	mov	r2, r0
   15b70:	eor	ip, ip, #1
   15b74:	add	r3, ip, r3
   15b78:	and	r3, r3, #3
   15b7c:	ldr	r0, [r0, r3, lsl #2]
   15b80:	str	r1, [r2, r3, lsl #2]
   15b84:	ldr	r1, [r2, #24]
   15b88:	str	r3, [r2, #20]
   15b8c:	cmp	r3, r1
   15b90:	addeq	r3, ip, r3
   15b94:	andeq	r3, r3, #3
   15b98:	streq	r3, [r2, #24]
   15b9c:	mov	r3, #0
   15ba0:	strb	r3, [r2, #28]
   15ba4:	bx	lr
   15ba8:	ldrb	r3, [r0, #28]
   15bac:	cmp	r3, #0
   15bb0:	bne	15be8 <__assert_fail@plt+0x45e4>
   15bb4:	ldr	r3, [r0, #20]
   15bb8:	ldr	r1, [r0, #16]
   15bbc:	ldr	r2, [r0, r3, lsl #2]
   15bc0:	str	r1, [r0, r3, lsl #2]
   15bc4:	ldr	r1, [r0, #24]
   15bc8:	cmp	r3, r1
   15bcc:	addne	r3, r3, #3
   15bd0:	moveq	r3, #1
   15bd4:	andne	r3, r3, #3
   15bd8:	strbeq	r3, [r0, #28]
   15bdc:	strne	r3, [r0, #20]
   15be0:	mov	r0, r2
   15be4:	bx	lr
   15be8:	push	{r4, lr}
   15bec:	bl	115c8 <abort@plt>
   15bf0:	push	{r2, r3}
   15bf4:	push	{lr}		; (str lr, [sp, #-4]!)
   15bf8:	sub	sp, sp, #12
   15bfc:	ldr	r2, [sp, #16]
   15c00:	ands	r3, r2, #64	; 0x40
   15c04:	addne	r3, sp, #20
   15c08:	strne	r3, [sp, #4]
   15c0c:	ldrne	r3, [sp, #20]
   15c10:	bl	1146c <openat64@plt>
   15c14:	bl	1837c <__assert_fail@plt+0x6d78>
   15c18:	add	sp, sp, #12
   15c1c:	pop	{lr}		; (ldr lr, [sp], #4)
   15c20:	add	sp, sp, #8
   15c24:	bx	lr
   15c28:	orr	r2, r2, #540672	; 0x84000
   15c2c:	push	{r4, r5, r6, lr}
   15c30:	orr	r2, r2, #2304	; 0x900
   15c34:	mov	r6, r3
   15c38:	bl	15bf0 <__assert_fail@plt+0x45ec>
   15c3c:	subs	r5, r0, #0
   15c40:	blt	15c74 <__assert_fail@plt+0x4670>
   15c44:	bl	11550 <fdopendir@plt>
   15c48:	subs	r4, r0, #0
   15c4c:	beq	15c5c <__assert_fail@plt+0x4658>
   15c50:	str	r5, [r6]
   15c54:	mov	r0, r4
   15c58:	pop	{r4, r5, r6, pc}
   15c5c:	bl	11484 <__errno_location@plt>
   15c60:	mov	r6, r0
   15c64:	mov	r0, r5
   15c68:	ldr	r5, [r6]
   15c6c:	bl	115d4 <close@plt>
   15c70:	b	15c50 <__assert_fail@plt+0x464c>
   15c74:	mov	r4, #0
   15c78:	b	15c54 <__assert_fail@plt+0x4650>
   15c7c:	push	{r4, r5, r6, lr}
   15c80:	subs	r4, r0, #0
   15c84:	beq	15cf8 <__assert_fail@plt+0x46f4>
   15c88:	mov	r1, #47	; 0x2f
   15c8c:	bl	1152c <strrchr@plt>
   15c90:	subs	r5, r0, #0
   15c94:	beq	15ce4 <__assert_fail@plt+0x46e0>
   15c98:	add	r6, r5, #1
   15c9c:	sub	r3, r6, r4
   15ca0:	cmp	r3, #6
   15ca4:	ble	15ce4 <__assert_fail@plt+0x46e0>
   15ca8:	mov	r2, #7
   15cac:	ldr	r1, [pc, #96]	; 15d14 <__assert_fail@plt+0x4710>
   15cb0:	sub	r0, r5, #6
   15cb4:	bl	115bc <strncmp@plt>
   15cb8:	cmp	r0, #0
   15cbc:	bne	15ce4 <__assert_fail@plt+0x46e0>
   15cc0:	mov	r2, #3
   15cc4:	ldr	r1, [pc, #76]	; 15d18 <__assert_fail@plt+0x4714>
   15cc8:	mov	r0, r6
   15ccc:	bl	115bc <strncmp@plt>
   15cd0:	cmp	r0, #0
   15cd4:	movne	r4, r6
   15cd8:	ldreq	r3, [pc, #60]	; 15d1c <__assert_fail@plt+0x4718>
   15cdc:	addeq	r4, r5, #4
   15ce0:	streq	r4, [r3]
   15ce4:	ldr	r2, [pc, #52]	; 15d20 <__assert_fail@plt+0x471c>
   15ce8:	ldr	r3, [pc, #52]	; 15d24 <__assert_fail@plt+0x4720>
   15cec:	str	r4, [r2]
   15cf0:	str	r4, [r3]
   15cf4:	pop	{r4, r5, r6, pc}
   15cf8:	ldr	r3, [pc, #40]	; 15d28 <__assert_fail@plt+0x4724>
   15cfc:	mov	r2, #55	; 0x37
   15d00:	mov	r1, #1
   15d04:	ldr	r3, [r3]
   15d08:	ldr	r0, [pc, #28]	; 15d2c <__assert_fail@plt+0x4728>
   15d0c:	bl	11364 <fwrite@plt>
   15d10:	bl	115c8 <abort@plt>
   15d14:			; <UNDEFINED> instruction: 0x0001b1b8
   15d18:	andeq	fp, r1, r0, asr #3
   15d1c:			; <UNDEFINED> instruction: 0x0002c1b0
   15d20:	andeq	ip, r2, ip, lsl #4
   15d24:			; <UNDEFINED> instruction: 0x0002c1b4
   15d28:	andeq	ip, r2, r0, asr #3
   15d2c:	andeq	fp, r1, r0, lsl #3
   15d30:	push	{r4, r5, r6, lr}
   15d34:	mov	r2, #48	; 0x30
   15d38:	mov	r4, r1
   15d3c:	mov	r1, #0
   15d40:	mov	r5, r0
   15d44:	bl	114a8 <memset@plt>
   15d48:	cmp	r4, #10
   15d4c:	beq	15d5c <__assert_fail@plt+0x4758>
   15d50:	str	r4, [r5]
   15d54:	mov	r0, r5
   15d58:	pop	{r4, r5, r6, pc}
   15d5c:	bl	115c8 <abort@plt>
   15d60:	push	{r4, r5, r6, lr}
   15d64:	mov	r4, r0
   15d68:	mov	r5, r1
   15d6c:	bl	19630 <__assert_fail@plt+0x802c>
   15d70:	ldrb	r3, [r0]
   15d74:	bic	r3, r3, #32
   15d78:	cmp	r3, #85	; 0x55
   15d7c:	bne	15ddc <__assert_fail@plt+0x47d8>
   15d80:	ldrb	r3, [r0, #1]
   15d84:	bic	r3, r3, #32
   15d88:	cmp	r3, #84	; 0x54
   15d8c:	bne	15e18 <__assert_fail@plt+0x4814>
   15d90:	ldrb	r3, [r0, #2]
   15d94:	bic	r3, r3, #32
   15d98:	cmp	r3, #70	; 0x46
   15d9c:	bne	15e18 <__assert_fail@plt+0x4814>
   15da0:	ldrb	r3, [r0, #3]
   15da4:	cmp	r3, #45	; 0x2d
   15da8:	bne	15e18 <__assert_fail@plt+0x4814>
   15dac:	ldrb	r3, [r0, #4]
   15db0:	cmp	r3, #56	; 0x38
   15db4:	bne	15e18 <__assert_fail@plt+0x4814>
   15db8:	ldrb	r3, [r0, #5]
   15dbc:	cmp	r3, #0
   15dc0:	bne	15e18 <__assert_fail@plt+0x4814>
   15dc4:	ldrb	r2, [r4]
   15dc8:	ldr	r3, [pc, #152]	; 15e68 <__assert_fail@plt+0x4864>
   15dcc:	ldr	r0, [pc, #152]	; 15e6c <__assert_fail@plt+0x4868>
   15dd0:	cmp	r2, #96	; 0x60
   15dd4:	movne	r0, r3
   15dd8:	pop	{r4, r5, r6, pc}
   15ddc:	cmp	r3, #71	; 0x47
   15de0:	bne	15e18 <__assert_fail@plt+0x4814>
   15de4:	ldrb	r3, [r0, #1]
   15de8:	bic	r3, r3, #32
   15dec:	cmp	r3, #66	; 0x42
   15df0:	bne	15e18 <__assert_fail@plt+0x4814>
   15df4:	ldrb	r3, [r0, #2]
   15df8:	cmp	r3, #49	; 0x31
   15dfc:	bne	15e18 <__assert_fail@plt+0x4814>
   15e00:	ldrb	r3, [r0, #3]
   15e04:	cmp	r3, #56	; 0x38
   15e08:	bne	15e18 <__assert_fail@plt+0x4814>
   15e0c:	ldrb	r3, [r0, #4]
   15e10:	cmp	r3, #48	; 0x30
   15e14:	beq	15e2c <__assert_fail@plt+0x4828>
   15e18:	ldr	r3, [pc, #80]	; 15e70 <__assert_fail@plt+0x486c>
   15e1c:	cmp	r5, #9
   15e20:	ldr	r0, [pc, #76]	; 15e74 <__assert_fail@plt+0x4870>
   15e24:	movne	r0, r3
   15e28:	pop	{r4, r5, r6, pc}
   15e2c:	ldrb	r3, [r0, #5]
   15e30:	cmp	r3, #51	; 0x33
   15e34:	bne	15e18 <__assert_fail@plt+0x4814>
   15e38:	ldrb	r3, [r0, #6]
   15e3c:	cmp	r3, #48	; 0x30
   15e40:	bne	15e18 <__assert_fail@plt+0x4814>
   15e44:	ldrb	r3, [r0, #7]
   15e48:	cmp	r3, #0
   15e4c:	bne	15e18 <__assert_fail@plt+0x4814>
   15e50:	ldrb	r2, [r4]
   15e54:	ldr	r3, [pc, #28]	; 15e78 <__assert_fail@plt+0x4874>
   15e58:	ldr	r0, [pc, #28]	; 15e7c <__assert_fail@plt+0x4878>
   15e5c:	cmp	r2, #96	; 0x60
   15e60:	movne	r0, r3
   15e64:	pop	{r4, r5, r6, pc}
   15e68:	andeq	fp, r1, ip, lsl r2
   15e6c:	andeq	fp, r1, r8, lsl r2
   15e70:	andeq	fp, r1, ip, lsr #4
   15e74:	andeq	fp, r1, r8, lsr #4
   15e78:	andeq	fp, r1, r4, lsr #4
   15e7c:	andeq	fp, r1, r0, lsr #4
   15e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e84:	sub	sp, sp, #116	; 0x74
   15e88:	mov	sl, r0
   15e8c:	str	r3, [sp, #24]
   15e90:	mov	r3, #1
   15e94:	mov	r8, r1
   15e98:	str	r2, [sp, #56]	; 0x38
   15e9c:	str	r3, [sp, #36]	; 0x24
   15ea0:	bl	1137c <__ctype_get_mb_cur_max@plt>
   15ea4:	ldr	r3, [sp, #156]	; 0x9c
   15ea8:	mov	fp, r8
   15eac:	mov	r2, #0
   15eb0:	lsr	r3, r3, #1
   15eb4:	and	r3, r3, #1
   15eb8:	str	r2, [sp, #68]	; 0x44
   15ebc:	str	r3, [sp, #28]
   15ec0:	str	r2, [sp, #40]	; 0x28
   15ec4:	str	r2, [sp, #44]	; 0x2c
   15ec8:	str	r2, [sp, #52]	; 0x34
   15ecc:	str	r2, [sp, #64]	; 0x40
   15ed0:	str	r2, [sp, #72]	; 0x48
   15ed4:	str	sl, [sp, #32]
   15ed8:	str	r0, [sp, #76]	; 0x4c
   15edc:	ldr	r3, [sp, #152]	; 0x98
   15ee0:	cmp	r3, #10
   15ee4:	ldrls	pc, [pc, r3, lsl #2]
   15ee8:	b	170a8 <__assert_fail@plt+0x5aa4>
   15eec:	andeq	r5, r1, r8, lsl pc
   15ef0:	andeq	r6, r1, r0, lsl #4
   15ef4:	andeq	r6, r1, r4, lsr #4
   15ef8:	andeq	r6, r1, r8, asr #4
   15efc:	andeq	r6, r1, r4, ror r3
   15f00:	andeq	r6, r1, r8, asr #6
   15f04:	andeq	r6, r1, r0, lsr #6
   15f08:	andeq	r6, r1, ip, asr r2
   15f0c:	andeq	r6, r1, r4, ror r2
   15f10:	andeq	r6, r1, r4, ror r2
   15f14:	andeq	r6, r1, r4, ror r2
   15f18:	mov	r3, #0
   15f1c:	mov	r7, r3
   15f20:	str	r3, [sp, #28]
   15f24:	ldr	r3, [sp, #44]	; 0x2c
   15f28:	mov	sl, #0
   15f2c:	eor	r3, r3, #1
   15f30:	str	r3, [sp, #60]	; 0x3c
   15f34:	ldr	r3, [sp, #24]
   15f38:	cmn	r3, #1
   15f3c:	beq	164a0 <__assert_fail@plt+0x4e9c>
   15f40:	ldr	r3, [sp, #24]
   15f44:	subs	r5, r3, sl
   15f48:	movne	r5, #1
   15f4c:	cmp	r5, #0
   15f50:	beq	164b8 <__assert_fail@plt+0x4eb4>
   15f54:	ldr	r3, [sp, #152]	; 0x98
   15f58:	ldr	r8, [sp, #44]	; 0x2c
   15f5c:	cmp	r3, #2
   15f60:	moveq	r8, #0
   15f64:	andne	r8, r8, #1
   15f68:	ldr	r3, [sp, #52]	; 0x34
   15f6c:	adds	r9, r3, #0
   15f70:	movne	r9, #1
   15f74:	ands	r6, r9, r8
   15f78:	beq	16920 <__assert_fail@plt+0x531c>
   15f7c:	ldr	r2, [sp, #52]	; 0x34
   15f80:	ldr	r1, [sp, #24]
   15f84:	cmp	r2, #1
   15f88:	mov	r3, r2
   15f8c:	movls	r3, #0
   15f90:	movhi	r3, #1
   15f94:	cmn	r1, #1
   15f98:	movne	r3, #0
   15f9c:	cmp	r3, #0
   15fa0:	add	r4, sl, r2
   15fa4:	beq	15fb4 <__assert_fail@plt+0x49b0>
   15fa8:	ldr	r0, [sp, #56]	; 0x38
   15fac:	bl	11460 <strlen@plt>
   15fb0:	str	r0, [sp, #24]
   15fb4:	ldr	r3, [sp, #24]
   15fb8:	cmp	r3, r4
   15fbc:	ldr	r3, [sp, #56]	; 0x38
   15fc0:	add	r3, r3, sl
   15fc4:	str	r3, [sp, #48]	; 0x30
   15fc8:	bcc	1692c <__assert_fail@plt+0x5328>
   15fcc:	mov	r0, r3
   15fd0:	ldr	r2, [sp, #52]	; 0x34
   15fd4:	ldr	r1, [sp, #64]	; 0x40
   15fd8:	bl	112d4 <memcmp@plt>
   15fdc:	cmp	r0, #0
   15fe0:	bne	1692c <__assert_fail@plt+0x5328>
   15fe4:	ldr	r3, [sp, #28]
   15fe8:	cmp	r3, #0
   15fec:	bne	171a8 <__assert_fail@plt+0x5ba4>
   15ff0:	ldr	r3, [sp, #48]	; 0x30
   15ff4:	ldrb	r4, [r3]
   15ff8:	cmp	r4, #126	; 0x7e
   15ffc:	ldrls	pc, [pc, r4, lsl #2]
   16000:	b	168c0 <__assert_fail@plt+0x52bc>
   16004:	andeq	r6, r1, r4, ror #13
   16008:	andeq	r6, r1, r0, asr #17
   1600c:	andeq	r6, r1, r0, asr #17
   16010:	andeq	r6, r1, r0, asr #17
   16014:	andeq	r6, r1, r0, asr #17
   16018:	andeq	r6, r1, r0, asr #17
   1601c:	andeq	r6, r1, r0, asr #17
   16020:	andeq	r6, r1, r8, asr #13
   16024:	andeq	r6, r1, ip, lsr #13
   16028:	andeq	r6, r1, r8, lsr #17
   1602c:	andeq	r6, r1, ip, lsl #12
   16030:	strdeq	r6, [r1], -r0
   16034:	andeq	r6, r1, r4, lsl #17
   16038:	andeq	r6, r1, r0, ror #16
   1603c:	andeq	r6, r1, r0, asr #17
   16040:	andeq	r6, r1, r0, asr #17
   16044:	andeq	r6, r1, r0, asr #17
   16048:	andeq	r6, r1, r0, asr #17
   1604c:	andeq	r6, r1, r0, asr #17
   16050:	andeq	r6, r1, r0, asr #17
   16054:	andeq	r6, r1, r0, asr #17
   16058:	andeq	r6, r1, r0, asr #17
   1605c:	andeq	r6, r1, r0, asr #17
   16060:	andeq	r6, r1, r0, asr #17
   16064:	andeq	r6, r1, r0, asr #17
   16068:	andeq	r6, r1, r0, asr #17
   1606c:	andeq	r6, r1, r0, asr #17
   16070:	andeq	r6, r1, r0, asr #17
   16074:	andeq	r6, r1, r0, asr #17
   16078:	andeq	r6, r1, r0, asr #17
   1607c:	andeq	r6, r1, r0, asr #17
   16080:	andeq	r6, r1, r0, asr #17
   16084:	andeq	r6, r1, r0, lsr #17
   16088:	ldrdeq	r6, [r1], -r4
   1608c:	ldrdeq	r6, [r1], -r4
   16090:	andeq	r6, r1, r4, ror #7
   16094:	ldrdeq	r6, [r1], -r4
   16098:	andeq	r6, r1, ip, ror #16
   1609c:	ldrdeq	r6, [r1], -r4
   160a0:	andeq	r6, r1, r0, asr #16
   160a4:	ldrdeq	r6, [r1], -r4
   160a8:	ldrdeq	r6, [r1], -r4
   160ac:	ldrdeq	r6, [r1], -r4
   160b0:	andeq	r6, r1, ip, ror #16
   160b4:	andeq	r6, r1, ip, ror #16
   160b8:	andeq	r6, r1, ip, ror #16
   160bc:	andeq	r6, r1, ip, ror #16
   160c0:	andeq	r6, r1, ip, ror #16
   160c4:	andeq	r6, r1, ip, ror #16
   160c8:	andeq	r6, r1, ip, ror #16
   160cc:	andeq	r6, r1, ip, ror #16
   160d0:	andeq	r6, r1, ip, ror #16
   160d4:	andeq	r6, r1, ip, ror #16
   160d8:	andeq	r6, r1, ip, ror #16
   160dc:	andeq	r6, r1, ip, ror #16
   160e0:	andeq	r6, r1, ip, ror #16
   160e4:	andeq	r6, r1, ip, ror #16
   160e8:	andeq	r6, r1, ip, ror #16
   160ec:	andeq	r6, r1, ip, ror #16
   160f0:	ldrdeq	r6, [r1], -r4
   160f4:	ldrdeq	r6, [r1], -r4
   160f8:	ldrdeq	r6, [r1], -r4
   160fc:	ldrdeq	r6, [r1], -r4
   16100:	andeq	r6, r1, r0, lsl r8
   16104:	andeq	r6, r1, r0, asr #17
   16108:	andeq	r6, r1, ip, ror #16
   1610c:	andeq	r6, r1, ip, ror #16
   16110:	andeq	r6, r1, ip, ror #16
   16114:	andeq	r6, r1, ip, ror #16
   16118:	andeq	r6, r1, ip, ror #16
   1611c:	andeq	r6, r1, ip, ror #16
   16120:	andeq	r6, r1, ip, ror #16
   16124:	andeq	r6, r1, ip, ror #16
   16128:	andeq	r6, r1, ip, ror #16
   1612c:	andeq	r6, r1, ip, ror #16
   16130:	andeq	r6, r1, ip, ror #16
   16134:	andeq	r6, r1, ip, ror #16
   16138:	andeq	r6, r1, ip, ror #16
   1613c:	andeq	r6, r1, ip, ror #16
   16140:	andeq	r6, r1, ip, ror #16
   16144:	andeq	r6, r1, ip, ror #16
   16148:	andeq	r6, r1, ip, ror #16
   1614c:	andeq	r6, r1, ip, ror #16
   16150:	andeq	r6, r1, ip, ror #16
   16154:	andeq	r6, r1, ip, ror #16
   16158:	andeq	r6, r1, ip, ror #16
   1615c:	andeq	r6, r1, ip, ror #16
   16160:	andeq	r6, r1, ip, ror #16
   16164:	andeq	r6, r1, ip, ror #16
   16168:	andeq	r6, r1, ip, ror #16
   1616c:	andeq	r6, r1, ip, ror #16
   16170:	ldrdeq	r6, [r1], -r4
   16174:	andeq	r6, r1, r0, lsr r5
   16178:	andeq	r6, r1, ip, ror #16
   1617c:	ldrdeq	r6, [r1], -r4
   16180:	andeq	r6, r1, ip, ror #16
   16184:	ldrdeq	r6, [r1], -r4
   16188:	andeq	r6, r1, ip, ror #16
   1618c:	andeq	r6, r1, ip, ror #16
   16190:	andeq	r6, r1, ip, ror #16
   16194:	andeq	r6, r1, ip, ror #16
   16198:	andeq	r6, r1, ip, ror #16
   1619c:	andeq	r6, r1, ip, ror #16
   161a0:	andeq	r6, r1, ip, ror #16
   161a4:	andeq	r6, r1, ip, ror #16
   161a8:	andeq	r6, r1, ip, ror #16
   161ac:	andeq	r6, r1, ip, ror #16
   161b0:	andeq	r6, r1, ip, ror #16
   161b4:	andeq	r6, r1, ip, ror #16
   161b8:	andeq	r6, r1, ip, ror #16
   161bc:	andeq	r6, r1, ip, ror #16
   161c0:	andeq	r6, r1, ip, ror #16
   161c4:	andeq	r6, r1, ip, ror #16
   161c8:	andeq	r6, r1, ip, ror #16
   161cc:	andeq	r6, r1, ip, ror #16
   161d0:	andeq	r6, r1, ip, ror #16
   161d4:	andeq	r6, r1, ip, ror #16
   161d8:	andeq	r6, r1, ip, ror #16
   161dc:	andeq	r6, r1, ip, ror #16
   161e0:	andeq	r6, r1, ip, ror #16
   161e4:	andeq	r6, r1, ip, ror #16
   161e8:	andeq	r6, r1, ip, ror #16
   161ec:	andeq	r6, r1, ip, ror #16
   161f0:	andeq	r6, r1, r4, asr #7
   161f4:	ldrdeq	r6, [r1], -r4
   161f8:	andeq	r6, r1, r4, asr #7
   161fc:	andeq	r6, r1, r4, ror #7
   16200:	mov	r3, #1
   16204:	str	r3, [sp, #28]
   16208:	str	r3, [sp, #52]	; 0x34
   1620c:	ldr	r3, [pc, #4000]	; 171b4 <__assert_fail@plt+0x5bb0>
   16210:	mov	r7, #0
   16214:	str	r3, [sp, #64]	; 0x40
   16218:	mov	r3, #2
   1621c:	str	r3, [sp, #152]	; 0x98
   16220:	b	15f24 <__assert_fail@plt+0x4920>
   16224:	ldr	r3, [sp, #28]
   16228:	cmp	r3, #0
   1622c:	beq	16388 <__assert_fail@plt+0x4d84>
   16230:	mov	r3, #1
   16234:	str	r3, [sp, #52]	; 0x34
   16238:	ldr	r3, [pc, #3956]	; 171b4 <__assert_fail@plt+0x5bb0>
   1623c:	mov	r7, #0
   16240:	str	r3, [sp, #64]	; 0x40
   16244:	b	15f24 <__assert_fail@plt+0x4920>
   16248:	mov	r3, #1
   1624c:	str	r3, [sp, #44]	; 0x2c
   16250:	str	r3, [sp, #52]	; 0x34
   16254:	str	r3, [sp, #28]
   16258:	b	1620c <__assert_fail@plt+0x4c08>
   1625c:	mov	r3, #0
   16260:	str	r3, [sp, #28]
   16264:	mov	r3, #1
   16268:	str	r3, [sp, #44]	; 0x2c
   1626c:	mov	r7, #0
   16270:	b	15f24 <__assert_fail@plt+0x4920>
   16274:	ldr	r3, [sp, #152]	; 0x98
   16278:	cmp	r3, #10
   1627c:	beq	162c0 <__assert_fail@plt+0x4cbc>
   16280:	mov	r2, #5
   16284:	ldr	r1, [pc, #3884]	; 171b8 <__assert_fail@plt+0x5bb4>
   16288:	mov	r0, #0
   1628c:	bl	112f8 <dcgettext@plt>
   16290:	ldr	r2, [pc, #3872]	; 171b8 <__assert_fail@plt+0x5bb4>
   16294:	cmp	r0, r2
   16298:	str	r0, [sp, #164]	; 0xa4
   1629c:	beq	172a4 <__assert_fail@plt+0x5ca0>
   162a0:	mov	r2, #5
   162a4:	ldr	r1, [pc, #3848]	; 171b4 <__assert_fail@plt+0x5bb0>
   162a8:	mov	r0, #0
   162ac:	bl	112f8 <dcgettext@plt>
   162b0:	ldr	r2, [pc, #3836]	; 171b4 <__assert_fail@plt+0x5bb0>
   162b4:	cmp	r0, r2
   162b8:	str	r0, [sp, #168]	; 0xa8
   162bc:	beq	17294 <__assert_fail@plt+0x5c90>
   162c0:	ldr	r7, [sp, #28]
   162c4:	cmp	r7, #0
   162c8:	movne	r7, #0
   162cc:	bne	16300 <__assert_fail@plt+0x4cfc>
   162d0:	ldr	r3, [sp, #164]	; 0xa4
   162d4:	ldrb	r3, [r3]
   162d8:	cmp	r3, #0
   162dc:	beq	172b4 <__assert_fail@plt+0x5cb0>
   162e0:	ldr	r2, [sp, #164]	; 0xa4
   162e4:	ldr	r1, [sp, #32]
   162e8:	cmp	fp, r7
   162ec:	strbhi	r3, [r1, r7]
   162f0:	ldrb	r3, [r2, #1]!
   162f4:	add	r7, r7, #1
   162f8:	cmp	r3, #0
   162fc:	bne	162e8 <__assert_fail@plt+0x4ce4>
   16300:	ldr	r0, [sp, #168]	; 0xa8
   16304:	bl	11460 <strlen@plt>
   16308:	ldr	r3, [sp, #168]	; 0xa8
   1630c:	str	r3, [sp, #64]	; 0x40
   16310:	mov	r3, #1
   16314:	str	r3, [sp, #44]	; 0x2c
   16318:	str	r0, [sp, #52]	; 0x34
   1631c:	b	15f24 <__assert_fail@plt+0x4920>
   16320:	mov	r3, #1
   16324:	str	r3, [sp, #44]	; 0x2c
   16328:	str	r3, [sp, #52]	; 0x34
   1632c:	str	r3, [sp, #28]
   16330:	ldr	r3, [pc, #3716]	; 171bc <__assert_fail@plt+0x5bb8>
   16334:	mov	r7, #0
   16338:	str	r3, [sp, #64]	; 0x40
   1633c:	mov	r3, #5
   16340:	str	r3, [sp, #152]	; 0x98
   16344:	b	15f24 <__assert_fail@plt+0x4920>
   16348:	ldr	r3, [sp, #28]
   1634c:	cmp	r3, #0
   16350:	beq	17050 <__assert_fail@plt+0x5a4c>
   16354:	ldr	r3, [sp, #28]
   16358:	mov	r7, #0
   1635c:	str	r3, [sp, #44]	; 0x2c
   16360:	mov	r3, #1
   16364:	str	r3, [sp, #52]	; 0x34
   16368:	ldr	r3, [pc, #3660]	; 171bc <__assert_fail@plt+0x5bb8>
   1636c:	str	r3, [sp, #64]	; 0x40
   16370:	b	15f24 <__assert_fail@plt+0x4920>
   16374:	ldr	r3, [sp, #28]
   16378:	cmp	r3, #0
   1637c:	mov	r3, #1
   16380:	streq	r3, [sp, #44]	; 0x2c
   16384:	bne	16208 <__assert_fail@plt+0x4c04>
   16388:	cmp	fp, #0
   1638c:	beq	17080 <__assert_fail@plt+0x5a7c>
   16390:	ldr	r3, [sp, #32]
   16394:	mov	r2, #39	; 0x27
   16398:	mov	r7, #1
   1639c:	strb	r2, [r3]
   163a0:	mov	r3, #0
   163a4:	str	r3, [sp, #28]
   163a8:	mov	r3, #1
   163ac:	str	r3, [sp, #52]	; 0x34
   163b0:	ldr	r3, [pc, #3580]	; 171b4 <__assert_fail@plt+0x5bb0>
   163b4:	str	r3, [sp, #64]	; 0x40
   163b8:	mov	r3, #2
   163bc:	str	r3, [sp, #152]	; 0x98
   163c0:	b	15f24 <__assert_fail@plt+0x4920>
   163c4:	ldr	r3, [sp, #24]
   163c8:	cmn	r3, #1
   163cc:	beq	16fe4 <__assert_fail@plt+0x59e0>
   163d0:	ldr	r3, [sp, #24]
   163d4:	subs	r3, r3, #1
   163d8:	movne	r3, #1
   163dc:	cmp	r3, #0
   163e0:	bne	163ec <__assert_fail@plt+0x4de8>
   163e4:	cmp	sl, #0
   163e8:	beq	167d8 <__assert_fail@plt+0x51d4>
   163ec:	ldr	r3, [sp, #152]	; 0x98
   163f0:	mov	r5, #0
   163f4:	sub	r2, r3, #2
   163f8:	mov	r8, r5
   163fc:	clz	r2, r2
   16400:	lsr	r2, r2, #5
   16404:	ldr	r3, [sp, #60]	; 0x3c
   16408:	ldr	r1, [sp, #28]
   1640c:	orr	r3, r2, r3
   16410:	eor	r3, r3, #1
   16414:	orr	r3, r1, r3
   16418:	tst	r3, #255	; 0xff
   1641c:	bne	16b48 <__assert_fail@plt+0x5544>
   16420:	cmp	r6, #0
   16424:	bne	16574 <__assert_fail@plt+0x4f70>
   16428:	ldr	r3, [sp, #40]	; 0x28
   1642c:	eor	r8, r8, #1
   16430:	and	r8, r8, r3
   16434:	add	sl, sl, #1
   16438:	uxtb	r6, r8
   1643c:	cmp	r6, #0
   16440:	beq	16474 <__assert_fail@plt+0x4e70>
   16444:	cmp	fp, r7
   16448:	movhi	r2, #39	; 0x27
   1644c:	ldrhi	r3, [sp, #32]
   16450:	strbhi	r2, [r3, r7]
   16454:	add	r3, r7, #1
   16458:	cmp	fp, r3
   1645c:	movhi	r1, #39	; 0x27
   16460:	ldrhi	r2, [sp, #32]
   16464:	add	r7, r7, #2
   16468:	strbhi	r1, [r2, r3]
   1646c:	mov	r3, #0
   16470:	str	r3, [sp, #40]	; 0x28
   16474:	cmp	r7, fp
   16478:	ldrcc	r3, [sp, #32]
   1647c:	strbcc	r4, [r3, r7]
   16480:	ldr	r3, [sp, #36]	; 0x24
   16484:	cmp	r5, #0
   16488:	moveq	r3, #0
   1648c:	str	r3, [sp, #36]	; 0x24
   16490:	ldr	r3, [sp, #24]
   16494:	add	r7, r7, #1
   16498:	cmn	r3, #1
   1649c:	bne	15f40 <__assert_fail@plt+0x493c>
   164a0:	ldr	r3, [sp, #56]	; 0x38
   164a4:	ldrb	r5, [r3, sl]
   164a8:	adds	r5, r5, #0
   164ac:	movne	r5, #1
   164b0:	cmp	r5, #0
   164b4:	bne	15f54 <__assert_fail@plt+0x4950>
   164b8:	ldr	r3, [sp, #152]	; 0x98
   164bc:	ldr	r1, [sp, #28]
   164c0:	sub	r3, r3, #2
   164c4:	clz	r3, r3
   164c8:	lsr	r3, r3, #5
   164cc:	and	r9, r1, r3
   164d0:	cmp	r7, #0
   164d4:	movne	r2, #0
   164d8:	andeq	r2, r9, #1
   164dc:	cmp	r2, #0
   164e0:	bne	16ebc <__assert_fail@plt+0x58b8>
   164e4:	eor	r2, r1, #1
   164e8:	ands	r3, r3, r2
   164ec:	beq	17378 <__assert_fail@plt+0x5d74>
   164f0:	ldr	r2, [sp, #68]	; 0x44
   164f4:	cmp	r2, #0
   164f8:	beq	17364 <__assert_fail@plt+0x5d60>
   164fc:	ldr	r3, [sp, #36]	; 0x24
   16500:	cmp	r3, #0
   16504:	bne	1731c <__assert_fail@plt+0x5d18>
   16508:	ldr	r2, [sp, #72]	; 0x48
   1650c:	clz	r3, fp
   16510:	cmp	r2, #0
   16514:	lsr	r3, r3, #5
   16518:	moveq	r3, #0
   1651c:	cmp	r3, #0
   16520:	beq	172bc <__assert_fail@plt+0x5cb8>
   16524:	str	r3, [sp, #68]	; 0x44
   16528:	ldr	fp, [sp, #72]	; 0x48
   1652c:	b	15edc <__assert_fail@plt+0x48d8>
   16530:	ldr	r3, [sp, #152]	; 0x98
   16534:	cmp	r3, #2
   16538:	beq	16b8c <__assert_fail@plt+0x5588>
   1653c:	ldr	r3, [sp, #44]	; 0x2c
   16540:	ldr	r2, [sp, #28]
   16544:	and	r2, r3, r2
   16548:	ands	r2, r9, r2
   1654c:	bne	16b98 <__assert_fail@plt+0x5594>
   16550:	mov	r4, #92	; 0x5c
   16554:	mov	r3, r4
   16558:	ldr	r1, [sp, #44]	; 0x2c
   1655c:	cmp	r1, #0
   16560:	moveq	r5, #0
   16564:	moveq	r8, r1
   16568:	beq	16404 <__assert_fail@plt+0x4e00>
   1656c:	mov	r4, r3
   16570:	mov	r5, #0
   16574:	ldr	r3, [sp, #28]
   16578:	cmp	r3, #0
   1657c:	bne	16b80 <__assert_fail@plt+0x557c>
   16580:	ldr	r3, [sp, #40]	; 0x28
   16584:	eor	r9, r3, #1
   16588:	and	r9, r9, r2
   1658c:	ands	r9, r9, #255	; 0xff
   16590:	beq	165d4 <__assert_fail@plt+0x4fd0>
   16594:	cmp	fp, r7
   16598:	movhi	r2, #39	; 0x27
   1659c:	ldrhi	r3, [sp, #32]
   165a0:	str	r9, [sp, #40]	; 0x28
   165a4:	strbhi	r2, [r3, r7]
   165a8:	add	r3, r7, #1
   165ac:	cmp	fp, r3
   165b0:	movhi	r1, #36	; 0x24
   165b4:	ldrhi	r2, [sp, #32]
   165b8:	strbhi	r1, [r2, r3]
   165bc:	add	r3, r7, #2
   165c0:	cmp	fp, r3
   165c4:	add	r7, r7, #3
   165c8:	ldrhi	r2, [sp, #32]
   165cc:	movhi	r1, #39	; 0x27
   165d0:	strbhi	r1, [r2, r3]
   165d4:	cmp	fp, r7
   165d8:	movhi	r2, #92	; 0x5c
   165dc:	ldrhi	r3, [sp, #32]
   165e0:	add	sl, sl, #1
   165e4:	strbhi	r2, [r3, r7]
   165e8:	add	r7, r7, #1
   165ec:	b	16474 <__assert_fail@plt+0x4e70>
   165f0:	ldr	r3, [sp, #152]	; 0x98
   165f4:	mov	r4, #11
   165f8:	sub	r2, r3, #2
   165fc:	mov	r3, #118	; 0x76
   16600:	clz	r2, r2
   16604:	lsr	r2, r2, #5
   16608:	b	16558 <__assert_fail@plt+0x4f54>
   1660c:	mov	r4, #10
   16610:	mov	r3, #110	; 0x6e
   16614:	ldr	r2, [sp, #152]	; 0x98
   16618:	ldr	r1, [sp, #28]
   1661c:	sub	r2, r2, #2
   16620:	clz	r2, r2
   16624:	lsr	r2, r2, #5
   16628:	ands	r1, r1, r2
   1662c:	beq	16558 <__assert_fail@plt+0x4f54>
   16630:	ldr	sl, [sp, #32]
   16634:	mov	r8, fp
   16638:	mov	r2, r1
   1663c:	mov	r3, #2
   16640:	str	r3, [sp, #152]	; 0x98
   16644:	ldr	r9, [sp, #44]	; 0x2c
   16648:	ldr	r3, [sp, #152]	; 0x98
   1664c:	and	r9, r9, r2
   16650:	tst	r9, #255	; 0xff
   16654:	movne	r3, #4
   16658:	str	r3, [sp, #152]	; 0x98
   1665c:	ldr	r3, [sp, #156]	; 0x9c
   16660:	mov	ip, #0
   16664:	bic	r3, r3, #2
   16668:	str	r3, [sp, #4]
   1666c:	ldr	r3, [sp, #168]	; 0xa8
   16670:	ldr	r2, [sp, #56]	; 0x38
   16674:	str	r3, [sp, #16]
   16678:	ldr	r3, [sp, #164]	; 0xa4
   1667c:	mov	r1, r8
   16680:	str	r3, [sp, #12]
   16684:	ldr	r3, [sp, #152]	; 0x98
   16688:	mov	r0, sl
   1668c:	str	r3, [sp]
   16690:	str	ip, [sp, #8]
   16694:	ldr	r3, [sp, #24]
   16698:	bl	15e80 <__assert_fail@plt+0x487c>
   1669c:	mov	fp, r0
   166a0:	mov	r0, fp
   166a4:	add	sp, sp, #116	; 0x74
   166a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166ac:	ldr	r3, [sp, #152]	; 0x98
   166b0:	mov	r4, #8
   166b4:	sub	r2, r3, #2
   166b8:	mov	r3, #98	; 0x62
   166bc:	clz	r2, r2
   166c0:	lsr	r2, r2, #5
   166c4:	b	16558 <__assert_fail@plt+0x4f54>
   166c8:	ldr	r3, [sp, #152]	; 0x98
   166cc:	mov	r4, #7
   166d0:	sub	r2, r3, #2
   166d4:	mov	r3, #97	; 0x61
   166d8:	clz	r2, r2
   166dc:	lsr	r2, r2, #5
   166e0:	b	16558 <__assert_fail@plt+0x4f54>
   166e4:	ldr	r3, [sp, #44]	; 0x2c
   166e8:	cmp	r3, #0
   166ec:	beq	16ed0 <__assert_fail@plt+0x58cc>
   166f0:	ldr	r3, [sp, #28]
   166f4:	cmp	r3, #0
   166f8:	bne	171a8 <__assert_fail@plt+0x5ba4>
   166fc:	ldr	r3, [sp, #152]	; 0x98
   16700:	sub	r2, r3, #2
   16704:	ldr	r3, [sp, #40]	; 0x28
   16708:	clz	r2, r2
   1670c:	eor	r3, r3, #1
   16710:	lsr	r2, r2, #5
   16714:	ands	r3, r2, r3
   16718:	moveq	r1, r7
   1671c:	beq	16760 <__assert_fail@plt+0x515c>
   16720:	cmp	fp, r7
   16724:	movhi	r0, #39	; 0x27
   16728:	ldrhi	r1, [sp, #32]
   1672c:	str	r3, [sp, #40]	; 0x28
   16730:	strbhi	r0, [r1, r7]
   16734:	add	r1, r7, #1
   16738:	cmp	fp, r1
   1673c:	movhi	ip, #36	; 0x24
   16740:	ldrhi	r0, [sp, #32]
   16744:	strbhi	ip, [r0, r1]
   16748:	add	r1, r7, #2
   1674c:	cmp	fp, r1
   16750:	movhi	ip, #39	; 0x27
   16754:	ldrhi	r0, [sp, #32]
   16758:	strbhi	ip, [r0, r1]
   1675c:	add	r1, r7, #3
   16760:	cmp	fp, r1
   16764:	movhi	r0, #92	; 0x5c
   16768:	ldrhi	r3, [sp, #32]
   1676c:	add	r7, r1, #1
   16770:	strbhi	r0, [r3, r1]
   16774:	cmp	r8, #0
   16778:	beq	170bc <__assert_fail@plt+0x5ab8>
   1677c:	ldr	r0, [sp, #24]
   16780:	add	r3, sl, #1
   16784:	cmp	r3, r0
   16788:	bcs	16ff8 <__assert_fail@plt+0x59f4>
   1678c:	ldr	r0, [sp, #56]	; 0x38
   16790:	ldrb	r3, [r0, r3]
   16794:	sub	r3, r3, #48	; 0x30
   16798:	cmp	r3, #9
   1679c:	bhi	16ff8 <__assert_fail@plt+0x59f4>
   167a0:	cmp	fp, r7
   167a4:	movhi	r3, #48	; 0x30
   167a8:	ldrhi	r0, [sp, #32]
   167ac:	ldr	r5, [sp, #28]
   167b0:	mov	r4, #48	; 0x30
   167b4:	strbhi	r3, [r0, r7]
   167b8:	add	r3, r1, #2
   167bc:	cmp	fp, r3
   167c0:	movhi	r0, #48	; 0x30
   167c4:	ldrhi	ip, [sp, #32]
   167c8:	add	r7, r1, #3
   167cc:	strbhi	r0, [ip, r3]
   167d0:	b	16404 <__assert_fail@plt+0x4e00>
   167d4:	mov	r5, #0
   167d8:	ldr	r3, [sp, #152]	; 0x98
   167dc:	sub	r2, r3, #2
   167e0:	ldr	r3, [sp, #28]
   167e4:	clz	r2, r2
   167e8:	lsr	r2, r2, #5
   167ec:	ands	r8, r3, r2
   167f0:	beq	16404 <__assert_fail@plt+0x4e00>
   167f4:	mov	r3, r8
   167f8:	mov	r2, r3
   167fc:	mov	r3, #2
   16800:	ldr	sl, [sp, #32]
   16804:	mov	r8, fp
   16808:	str	r3, [sp, #152]	; 0x98
   1680c:	b	16644 <__assert_fail@plt+0x5040>
   16810:	ldr	r3, [sp, #152]	; 0x98
   16814:	cmp	r3, #2
   16818:	beq	16f3c <__assert_fail@plt+0x5938>
   1681c:	cmp	r3, #5
   16820:	beq	16efc <__assert_fail@plt+0x58f8>
   16824:	mov	r5, #0
   16828:	sub	r2, r3, #2
   1682c:	mov	r8, r5
   16830:	clz	r2, r2
   16834:	mov	r4, #63	; 0x3f
   16838:	lsr	r2, r2, #5
   1683c:	b	16404 <__assert_fail@plt+0x4e00>
   16840:	ldr	r3, [sp, #152]	; 0x98
   16844:	cmp	r3, #2
   16848:	beq	16f5c <__assert_fail@plt+0x5958>
   1684c:	mov	r2, #0
   16850:	str	r5, [sp, #68]	; 0x44
   16854:	mov	r8, r2
   16858:	mov	r4, #39	; 0x27
   1685c:	b	16404 <__assert_fail@plt+0x4e00>
   16860:	mov	r4, #13
   16864:	mov	r3, #114	; 0x72
   16868:	b	16614 <__assert_fail@plt+0x5010>
   1686c:	ldr	r3, [sp, #152]	; 0x98
   16870:	mov	r8, #0
   16874:	sub	r2, r3, #2
   16878:	clz	r2, r2
   1687c:	lsr	r2, r2, #5
   16880:	b	16404 <__assert_fail@plt+0x4e00>
   16884:	ldr	r3, [sp, #152]	; 0x98
   16888:	mov	r4, #12
   1688c:	sub	r2, r3, #2
   16890:	mov	r3, #102	; 0x66
   16894:	clz	r2, r2
   16898:	lsr	r2, r2, #5
   1689c:	b	16558 <__assert_fail@plt+0x4f54>
   168a0:	mov	r5, r6
   168a4:	b	167d8 <__assert_fail@plt+0x51d4>
   168a8:	ldr	r3, [sp, #152]	; 0x98
   168ac:	sub	r2, r3, #2
   168b0:	mov	r3, #116	; 0x74
   168b4:	clz	r2, r2
   168b8:	lsr	r2, r2, #5
   168bc:	b	16558 <__assert_fail@plt+0x4f54>
   168c0:	ldr	r8, [sp, #76]	; 0x4c
   168c4:	cmp	r8, #1
   168c8:	bne	16d78 <__assert_fail@plt+0x5774>
   168cc:	bl	11424 <__ctype_b_loc@plt>
   168d0:	sxth	r3, r4
   168d4:	mov	ip, r8
   168d8:	lsl	r3, r3, #1
   168dc:	ldr	r2, [r0]
   168e0:	ldrh	r3, [r2, r3]
   168e4:	and	r3, r3, #16384	; 0x4000
   168e8:	cmp	r3, #0
   168ec:	movne	r5, #1
   168f0:	moveq	r5, #0
   168f4:	moveq	r3, #1
   168f8:	movne	r3, #0
   168fc:	ldr	r2, [sp, #44]	; 0x2c
   16900:	and	r3, r3, r2
   16904:	ands	r8, r3, #255	; 0xff
   16908:	bne	16c0c <__assert_fail@plt+0x5608>
   1690c:	ldr	r3, [sp, #152]	; 0x98
   16910:	sub	r2, r3, #2
   16914:	clz	r2, r2
   16918:	lsr	r2, r2, #5
   1691c:	b	16404 <__assert_fail@plt+0x4e00>
   16920:	ldr	r3, [sp, #56]	; 0x38
   16924:	add	r3, r3, sl
   16928:	str	r3, [sp, #48]	; 0x30
   1692c:	ldr	r3, [sp, #48]	; 0x30
   16930:	mov	r6, #0
   16934:	ldrb	r4, [r3]
   16938:	cmp	r4, #126	; 0x7e
   1693c:	ldrls	pc, [pc, r4, lsl #2]
   16940:	b	168c0 <__assert_fail@plt+0x52bc>
   16944:	andeq	r6, r1, r4, ror #13
   16948:	andeq	r6, r1, r0, asr #17
   1694c:	andeq	r6, r1, r0, asr #17
   16950:	andeq	r6, r1, r0, asr #17
   16954:	andeq	r6, r1, r0, asr #17
   16958:	andeq	r6, r1, r0, asr #17
   1695c:	andeq	r6, r1, r0, asr #17
   16960:	andeq	r6, r1, r8, asr #13
   16964:	andeq	r6, r1, ip, lsr #13
   16968:	andeq	r6, r1, r0, asr #22
   1696c:	andeq	r6, r1, ip, lsl #12
   16970:	strdeq	r6, [r1], -r0
   16974:	andeq	r6, r1, r4, lsl #17
   16978:	andeq	r6, r1, r0, ror #16
   1697c:	andeq	r6, r1, r0, asr #17
   16980:	andeq	r6, r1, r0, asr #17
   16984:	andeq	r6, r1, r0, asr #17
   16988:	andeq	r6, r1, r0, asr #17
   1698c:	andeq	r6, r1, r0, asr #17
   16990:	andeq	r6, r1, r0, asr #17
   16994:	andeq	r6, r1, r0, asr #17
   16998:	andeq	r6, r1, r0, asr #17
   1699c:	andeq	r6, r1, r0, asr #17
   169a0:	andeq	r6, r1, r0, asr #17
   169a4:	andeq	r6, r1, r0, asr #17
   169a8:	andeq	r6, r1, r0, asr #17
   169ac:	andeq	r6, r1, r0, asr #17
   169b0:	andeq	r6, r1, r0, asr #17
   169b4:	andeq	r6, r1, r0, asr #17
   169b8:	andeq	r6, r1, r0, asr #17
   169bc:	andeq	r6, r1, r0, asr #17
   169c0:	andeq	r6, r1, r0, asr #17
   169c4:	ldrdeq	r6, [r1], -r8
   169c8:	ldrdeq	r6, [r1], -r4
   169cc:	ldrdeq	r6, [r1], -r4
   169d0:	andeq	r6, r1, r4, ror #7
   169d4:	ldrdeq	r6, [r1], -r4
   169d8:	andeq	r6, r1, ip, ror #16
   169dc:	ldrdeq	r6, [r1], -r4
   169e0:	andeq	r6, r1, r0, asr #16
   169e4:	ldrdeq	r6, [r1], -r4
   169e8:	ldrdeq	r6, [r1], -r4
   169ec:	ldrdeq	r6, [r1], -r4
   169f0:	andeq	r6, r1, ip, ror #16
   169f4:	andeq	r6, r1, ip, ror #16
   169f8:	andeq	r6, r1, ip, ror #16
   169fc:	andeq	r6, r1, ip, ror #16
   16a00:	andeq	r6, r1, ip, ror #16
   16a04:	andeq	r6, r1, ip, ror #16
   16a08:	andeq	r6, r1, ip, ror #16
   16a0c:	andeq	r6, r1, ip, ror #16
   16a10:	andeq	r6, r1, ip, ror #16
   16a14:	andeq	r6, r1, ip, ror #16
   16a18:	andeq	r6, r1, ip, ror #16
   16a1c:	andeq	r6, r1, ip, ror #16
   16a20:	andeq	r6, r1, ip, ror #16
   16a24:	andeq	r6, r1, ip, ror #16
   16a28:	andeq	r6, r1, ip, ror #16
   16a2c:	andeq	r6, r1, ip, ror #16
   16a30:	ldrdeq	r6, [r1], -r4
   16a34:	ldrdeq	r6, [r1], -r4
   16a38:	ldrdeq	r6, [r1], -r4
   16a3c:	ldrdeq	r6, [r1], -r4
   16a40:	andeq	r6, r1, r0, lsl r8
   16a44:	andeq	r6, r1, r0, asr #17
   16a48:	andeq	r6, r1, ip, ror #16
   16a4c:	andeq	r6, r1, ip, ror #16
   16a50:	andeq	r6, r1, ip, ror #16
   16a54:	andeq	r6, r1, ip, ror #16
   16a58:	andeq	r6, r1, ip, ror #16
   16a5c:	andeq	r6, r1, ip, ror #16
   16a60:	andeq	r6, r1, ip, ror #16
   16a64:	andeq	r6, r1, ip, ror #16
   16a68:	andeq	r6, r1, ip, ror #16
   16a6c:	andeq	r6, r1, ip, ror #16
   16a70:	andeq	r6, r1, ip, ror #16
   16a74:	andeq	r6, r1, ip, ror #16
   16a78:	andeq	r6, r1, ip, ror #16
   16a7c:	andeq	r6, r1, ip, ror #16
   16a80:	andeq	r6, r1, ip, ror #16
   16a84:	andeq	r6, r1, ip, ror #16
   16a88:	andeq	r6, r1, ip, ror #16
   16a8c:	andeq	r6, r1, ip, ror #16
   16a90:	andeq	r6, r1, ip, ror #16
   16a94:	andeq	r6, r1, ip, ror #16
   16a98:	andeq	r6, r1, ip, ror #16
   16a9c:	andeq	r6, r1, ip, ror #16
   16aa0:	andeq	r6, r1, ip, ror #16
   16aa4:	andeq	r6, r1, ip, ror #16
   16aa8:	andeq	r6, r1, ip, ror #16
   16aac:	andeq	r6, r1, ip, ror #16
   16ab0:	ldrdeq	r6, [r1], -r4
   16ab4:	andeq	r6, r1, r0, lsr r5
   16ab8:	andeq	r6, r1, ip, ror #16
   16abc:	ldrdeq	r6, [r1], -r4
   16ac0:	andeq	r6, r1, ip, ror #16
   16ac4:	ldrdeq	r6, [r1], -r4
   16ac8:	andeq	r6, r1, ip, ror #16
   16acc:	andeq	r6, r1, ip, ror #16
   16ad0:	andeq	r6, r1, ip, ror #16
   16ad4:	andeq	r6, r1, ip, ror #16
   16ad8:	andeq	r6, r1, ip, ror #16
   16adc:	andeq	r6, r1, ip, ror #16
   16ae0:	andeq	r6, r1, ip, ror #16
   16ae4:	andeq	r6, r1, ip, ror #16
   16ae8:	andeq	r6, r1, ip, ror #16
   16aec:	andeq	r6, r1, ip, ror #16
   16af0:	andeq	r6, r1, ip, ror #16
   16af4:	andeq	r6, r1, ip, ror #16
   16af8:	andeq	r6, r1, ip, ror #16
   16afc:	andeq	r6, r1, ip, ror #16
   16b00:	andeq	r6, r1, ip, ror #16
   16b04:	andeq	r6, r1, ip, ror #16
   16b08:	andeq	r6, r1, ip, ror #16
   16b0c:	andeq	r6, r1, ip, ror #16
   16b10:	andeq	r6, r1, ip, ror #16
   16b14:	andeq	r6, r1, ip, ror #16
   16b18:	andeq	r6, r1, ip, ror #16
   16b1c:	andeq	r6, r1, ip, ror #16
   16b20:	andeq	r6, r1, ip, ror #16
   16b24:	andeq	r6, r1, ip, ror #16
   16b28:	andeq	r6, r1, ip, ror #16
   16b2c:	andeq	r6, r1, ip, ror #16
   16b30:	andeq	r6, r1, r4, asr #7
   16b34:	ldrdeq	r6, [r1], -r4
   16b38:	andeq	r6, r1, r4, asr #7
   16b3c:	andeq	r6, r1, r4, ror #7
   16b40:	mov	r3, #116	; 0x74
   16b44:	b	16614 <__assert_fail@plt+0x5010>
   16b48:	ldr	r3, [sp, #160]	; 0xa0
   16b4c:	cmp	r3, #0
   16b50:	beq	16420 <__assert_fail@plt+0x4e1c>
   16b54:	lsr	r3, r4, #5
   16b58:	ldr	r0, [sp, #160]	; 0xa0
   16b5c:	uxtb	r3, r3
   16b60:	and	r1, r4, #31
   16b64:	ldr	r0, [r0, r3, lsl #2]
   16b68:	lsr	r3, r0, r1
   16b6c:	tst	r3, #1
   16b70:	beq	16420 <__assert_fail@plt+0x4e1c>
   16b74:	ldr	r3, [sp, #28]
   16b78:	cmp	r3, #0
   16b7c:	beq	16580 <__assert_fail@plt+0x4f7c>
   16b80:	ldr	sl, [sp, #32]
   16b84:	mov	r8, fp
   16b88:	b	16644 <__assert_fail@plt+0x5040>
   16b8c:	ldr	r3, [sp, #28]
   16b90:	cmp	r3, #0
   16b94:	bne	170e8 <__assert_fail@plt+0x5ae4>
   16b98:	add	sl, sl, #1
   16b9c:	ldr	r6, [sp, #40]	; 0x28
   16ba0:	mov	r5, #0
   16ba4:	mov	r4, #92	; 0x5c
   16ba8:	b	1643c <__assert_fail@plt+0x4e38>
   16bac:	cmp	r9, r8
   16bb0:	bne	16e20 <__assert_fail@plt+0x581c>
   16bb4:	ldr	r0, [sp, #100]	; 0x64
   16bb8:	bl	1134c <iswprint@plt>
   16bbc:	add	r5, r5, r4
   16bc0:	cmp	r0, #0
   16bc4:	add	r0, sp, #104	; 0x68
   16bc8:	moveq	r6, #0
   16bcc:	bl	112bc <mbsinit@plt>
   16bd0:	cmp	r0, #0
   16bd4:	beq	16db4 <__assert_fail@plt+0x57b0>
   16bd8:	mov	r2, r6
   16bdc:	mov	ip, r5
   16be0:	eor	r5, r2, #1
   16be4:	ldr	r4, [sp, #80]	; 0x50
   16be8:	ldr	r6, [sp, #84]	; 0x54
   16bec:	ldr	r7, [sp, #88]	; 0x58
   16bf0:	uxtb	r5, r5
   16bf4:	cmp	ip, #1
   16bf8:	bls	170f8 <__assert_fail@plt+0x5af4>
   16bfc:	ldr	r3, [sp, #44]	; 0x2c
   16c00:	and	r8, r3, r5
   16c04:	mov	r5, r2
   16c08:	uxtb	r8, r8
   16c0c:	add	r2, sl, ip
   16c10:	ldr	r0, [sp, #48]	; 0x30
   16c14:	mov	r1, #0
   16c18:	str	r5, [sp, #48]	; 0x30
   16c1c:	ldr	r9, [sp, #28]
   16c20:	ldr	ip, [sp, #40]	; 0x28
   16c24:	ldr	r3, [sp, #32]
   16c28:	ldr	r5, [sp, #152]	; 0x98
   16c2c:	b	16ce8 <__assert_fail@plt+0x56e4>
   16c30:	cmp	r9, #0
   16c34:	bne	1700c <__assert_fail@plt+0x5a08>
   16c38:	eor	r1, ip, #1
   16c3c:	cmp	r5, #2
   16c40:	movne	r1, #0
   16c44:	andeq	r1, r1, #1
   16c48:	cmp	r1, #0
   16c4c:	beq	16c84 <__assert_fail@plt+0x5680>
   16c50:	cmp	fp, r7
   16c54:	movhi	ip, #39	; 0x27
   16c58:	strbhi	ip, [r3, r7]
   16c5c:	add	ip, r7, #1
   16c60:	cmp	fp, ip
   16c64:	movhi	lr, #36	; 0x24
   16c68:	strbhi	lr, [r3, ip]
   16c6c:	add	ip, r7, #2
   16c70:	cmp	fp, ip
   16c74:	movhi	lr, #39	; 0x27
   16c78:	strbhi	lr, [r3, ip]
   16c7c:	add	r7, r7, #3
   16c80:	mov	ip, r1
   16c84:	cmp	fp, r7
   16c88:	movhi	r1, #92	; 0x5c
   16c8c:	strbhi	r1, [r3, r7]
   16c90:	add	r1, r7, #1
   16c94:	cmp	fp, r1
   16c98:	lsrhi	lr, r4, #6
   16c9c:	addhi	lr, lr, #48	; 0x30
   16ca0:	strbhi	lr, [r3, r1]
   16ca4:	add	lr, r7, #2
   16ca8:	cmp	fp, lr
   16cac:	lsrhi	r1, r4, #3
   16cb0:	andhi	r1, r1, #7
   16cb4:	addhi	r1, r1, #48	; 0x30
   16cb8:	add	sl, sl, #1
   16cbc:	strbhi	r1, [r3, lr]
   16cc0:	and	r4, r4, #7
   16cc4:	cmp	r2, sl
   16cc8:	add	r4, r4, #48	; 0x30
   16ccc:	add	r7, r7, #3
   16cd0:	bls	17030 <__assert_fail@plt+0x5a2c>
   16cd4:	mov	r1, r8
   16cd8:	cmp	fp, r7
   16cdc:	strbhi	r4, [r3, r7]
   16ce0:	ldrb	r4, [r0, #1]!
   16ce4:	add	r7, r7, #1
   16ce8:	cmp	r8, #0
   16cec:	bne	16c30 <__assert_fail@plt+0x562c>
   16cf0:	cmp	r6, #0
   16cf4:	bne	16d44 <__assert_fail@plt+0x5740>
   16cf8:	eor	r6, r1, #1
   16cfc:	and	r6, r6, ip
   16d00:	add	sl, sl, #1
   16d04:	cmp	r2, sl
   16d08:	uxtb	r6, r6
   16d0c:	bls	16d6c <__assert_fail@plt+0x5768>
   16d10:	cmp	r6, #0
   16d14:	beq	16cd8 <__assert_fail@plt+0x56d4>
   16d18:	cmp	fp, r7
   16d1c:	movhi	ip, #39	; 0x27
   16d20:	strbhi	ip, [r3, r7]
   16d24:	add	ip, r7, #1
   16d28:	cmp	fp, ip
   16d2c:	movhi	lr, #39	; 0x27
   16d30:	strbhi	lr, [r3, ip]
   16d34:	add	r7, r7, #2
   16d38:	mov	r6, r8
   16d3c:	mov	ip, r8
   16d40:	b	16cd8 <__assert_fail@plt+0x56d4>
   16d44:	cmp	fp, r7
   16d48:	eor	r6, r1, #1
   16d4c:	movhi	lr, #92	; 0x5c
   16d50:	and	r6, r6, ip
   16d54:	add	sl, sl, #1
   16d58:	strbhi	lr, [r3, r7]
   16d5c:	cmp	r2, sl
   16d60:	add	r7, r7, #1
   16d64:	uxtb	r6, r6
   16d68:	bhi	16d10 <__assert_fail@plt+0x570c>
   16d6c:	str	ip, [sp, #40]	; 0x28
   16d70:	ldr	r5, [sp, #48]	; 0x30
   16d74:	b	1643c <__assert_fail@plt+0x4e38>
   16d78:	ldr	r3, [sp, #24]
   16d7c:	cmn	r3, #1
   16d80:	mov	r3, #0
   16d84:	str	r3, [sp, #104]	; 0x68
   16d88:	str	r3, [sp, #108]	; 0x6c
   16d8c:	beq	170ac <__assert_fail@plt+0x5aa8>
   16d90:	mov	r2, r5
   16d94:	mov	r3, #0
   16d98:	str	r7, [sp, #88]	; 0x58
   16d9c:	ldr	r7, [sp, #152]	; 0x98
   16da0:	str	r5, [sp, #92]	; 0x5c
   16da4:	str	r6, [sp, #84]	; 0x54
   16da8:	mov	r5, r3
   16dac:	mov	r6, r2
   16db0:	str	r4, [sp, #80]	; 0x50
   16db4:	ldr	r3, [sp, #56]	; 0x38
   16db8:	add	r9, sl, r5
   16dbc:	add	r8, r3, r9
   16dc0:	ldr	r3, [sp, #24]
   16dc4:	mov	r1, r8
   16dc8:	sub	r2, r3, r9
   16dcc:	add	r0, sp, #100	; 0x64
   16dd0:	add	r3, sp, #104	; 0x68
   16dd4:	bl	19664 <__assert_fail@plt+0x8060>
   16dd8:	subs	r4, r0, #0
   16ddc:	beq	17184 <__assert_fail@plt+0x5b80>
   16de0:	cmn	r4, #1
   16de4:	beq	17164 <__assert_fail@plt+0x5b60>
   16de8:	cmn	r4, #2
   16dec:	beq	17104 <__assert_fail@plt+0x5b00>
   16df0:	ldr	r2, [sp, #28]
   16df4:	cmp	r7, #2
   16df8:	movne	r2, #0
   16dfc:	andeq	r2, r2, #1
   16e00:	cmp	r2, #0
   16e04:	beq	16bb4 <__assert_fail@plt+0x55b0>
   16e08:	cmp	r4, #1
   16e0c:	beq	16bb4 <__assert_fail@plt+0x55b0>
   16e10:	sub	r3, r4, #1
   16e14:	add	r9, r3, r9
   16e18:	ldr	r3, [sp, #56]	; 0x38
   16e1c:	add	r9, r3, r9
   16e20:	ldrb	r3, [r8, #1]!
   16e24:	sub	r3, r3, #91	; 0x5b
   16e28:	cmp	r3, #33	; 0x21
   16e2c:	ldrls	pc, [pc, r3, lsl #2]
   16e30:	b	16bac <__assert_fail@plt+0x55a8>
   16e34:			; <UNDEFINED> instruction: 0x00016ebc
   16e38:			; <UNDEFINED> instruction: 0x00016ebc
   16e3c:	andeq	r6, r1, ip, lsr #23
   16e40:			; <UNDEFINED> instruction: 0x00016ebc
   16e44:	andeq	r6, r1, ip, lsr #23
   16e48:			; <UNDEFINED> instruction: 0x00016ebc
   16e4c:	andeq	r6, r1, ip, lsr #23
   16e50:	andeq	r6, r1, ip, lsr #23
   16e54:	andeq	r6, r1, ip, lsr #23
   16e58:	andeq	r6, r1, ip, lsr #23
   16e5c:	andeq	r6, r1, ip, lsr #23
   16e60:	andeq	r6, r1, ip, lsr #23
   16e64:	andeq	r6, r1, ip, lsr #23
   16e68:	andeq	r6, r1, ip, lsr #23
   16e6c:	andeq	r6, r1, ip, lsr #23
   16e70:	andeq	r6, r1, ip, lsr #23
   16e74:	andeq	r6, r1, ip, lsr #23
   16e78:	andeq	r6, r1, ip, lsr #23
   16e7c:	andeq	r6, r1, ip, lsr #23
   16e80:	andeq	r6, r1, ip, lsr #23
   16e84:	andeq	r6, r1, ip, lsr #23
   16e88:	andeq	r6, r1, ip, lsr #23
   16e8c:	andeq	r6, r1, ip, lsr #23
   16e90:	andeq	r6, r1, ip, lsr #23
   16e94:	andeq	r6, r1, ip, lsr #23
   16e98:	andeq	r6, r1, ip, lsr #23
   16e9c:	andeq	r6, r1, ip, lsr #23
   16ea0:	andeq	r6, r1, ip, lsr #23
   16ea4:	andeq	r6, r1, ip, lsr #23
   16ea8:	andeq	r6, r1, ip, lsr #23
   16eac:	andeq	r6, r1, ip, lsr #23
   16eb0:	andeq	r6, r1, ip, lsr #23
   16eb4:	andeq	r6, r1, ip, lsr #23
   16eb8:			; <UNDEFINED> instruction: 0x00016ebc
   16ebc:	mov	r3, #2
   16ec0:	ldr	sl, [sp, #32]
   16ec4:	mov	r8, fp
   16ec8:	str	r3, [sp, #152]	; 0x98
   16ecc:	b	16644 <__assert_fail@plt+0x5040>
   16ed0:	ldr	r3, [sp, #156]	; 0x9c
   16ed4:	tst	r3, #1
   16ed8:	bne	17004 <__assert_fail@plt+0x5a00>
   16edc:	ldr	r3, [sp, #152]	; 0x98
   16ee0:	ldr	r4, [sp, #44]	; 0x2c
   16ee4:	sub	r2, r3, #2
   16ee8:	mov	r5, #0
   16eec:	clz	r2, r2
   16ef0:	mov	r8, r4
   16ef4:	lsr	r2, r2, #5
   16ef8:	b	16404 <__assert_fail@plt+0x4e00>
   16efc:	ldr	r3, [sp, #156]	; 0x9c
   16f00:	ands	r9, r3, #4
   16f04:	beq	1703c <__assert_fail@plt+0x5a38>
   16f08:	ldr	r2, [sp, #24]
   16f0c:	add	r3, sl, #2
   16f10:	cmp	r3, r2
   16f14:	bcs	16f28 <__assert_fail@plt+0x5924>
   16f18:	ldr	r2, [sp, #48]	; 0x30
   16f1c:	ldrb	r4, [r2, #1]
   16f20:	cmp	r4, #63	; 0x3f
   16f24:	beq	171c4 <__assert_fail@plt+0x5bc0>
   16f28:	mov	r2, #0
   16f2c:	mov	r8, r2
   16f30:	mov	r5, r2
   16f34:	mov	r4, #63	; 0x3f
   16f38:	b	16404 <__assert_fail@plt+0x4e00>
   16f3c:	ldr	r3, [sp, #28]
   16f40:	cmp	r3, #0
   16f44:	bne	17268 <__assert_fail@plt+0x5c64>
   16f48:	mov	r2, r5
   16f4c:	mov	r8, r3
   16f50:	mov	r5, #0
   16f54:	mov	r4, #63	; 0x3f
   16f58:	b	16404 <__assert_fail@plt+0x4e00>
   16f5c:	ldr	r3, [sp, #28]
   16f60:	cmp	r3, #0
   16f64:	bne	17268 <__assert_fail@plt+0x5c64>
   16f68:	ldr	r2, [sp, #72]	; 0x48
   16f6c:	adds	r3, fp, #0
   16f70:	movne	r3, #1
   16f74:	cmp	r2, #0
   16f78:	movne	r3, #0
   16f7c:	cmp	r3, #0
   16f80:	strne	fp, [sp, #72]	; 0x48
   16f84:	movne	fp, #0
   16f88:	bne	16fc4 <__assert_fail@plt+0x59c0>
   16f8c:	cmp	fp, r7
   16f90:	movhi	r2, #39	; 0x27
   16f94:	ldrhi	r3, [sp, #32]
   16f98:	strbhi	r2, [r3, r7]
   16f9c:	add	r3, r7, #1
   16fa0:	cmp	fp, r3
   16fa4:	movhi	r1, #92	; 0x5c
   16fa8:	ldrhi	r2, [sp, #32]
   16fac:	strbhi	r1, [r2, r3]
   16fb0:	add	r3, r7, #2
   16fb4:	cmp	fp, r3
   16fb8:	movhi	r1, #39	; 0x27
   16fbc:	ldrhi	r2, [sp, #32]
   16fc0:	strbhi	r1, [r2, r3]
   16fc4:	ldr	r3, [sp, #28]
   16fc8:	add	r7, r7, #3
   16fcc:	mov	r2, r5
   16fd0:	mov	r8, r3
   16fd4:	str	r5, [sp, #68]	; 0x44
   16fd8:	str	r3, [sp, #40]	; 0x28
   16fdc:	mov	r4, #39	; 0x27
   16fe0:	b	16404 <__assert_fail@plt+0x4e00>
   16fe4:	ldr	r3, [sp, #56]	; 0x38
   16fe8:	ldrb	r3, [r3, #1]
   16fec:	adds	r3, r3, #0
   16ff0:	movne	r3, #1
   16ff4:	b	163dc <__assert_fail@plt+0x4dd8>
   16ff8:	ldr	r5, [sp, #28]
   16ffc:	mov	r4, #48	; 0x30
   17000:	b	16404 <__assert_fail@plt+0x4e00>
   17004:	add	sl, sl, #1
   17008:	b	15f34 <__assert_fail@plt+0x4930>
   1700c:	mov	sl, r3
   17010:	ldr	r3, [sp, #28]
   17014:	mov	r8, fp
   17018:	str	r3, [sp, #44]	; 0x2c
   1701c:	ldr	r3, [sp, #152]	; 0x98
   17020:	sub	r2, r3, #2
   17024:	clz	r2, r2
   17028:	lsr	r2, r2, #5
   1702c:	b	16644 <__assert_fail@plt+0x5040>
   17030:	str	ip, [sp, #40]	; 0x28
   17034:	ldr	r5, [sp, #48]	; 0x30
   17038:	b	16474 <__assert_fail@plt+0x4e70>
   1703c:	mov	r2, r9
   17040:	mov	r8, r9
   17044:	mov	r5, #0
   17048:	mov	r4, #63	; 0x3f
   1704c:	b	16404 <__assert_fail@plt+0x4e00>
   17050:	cmp	fp, #0
   17054:	beq	170cc <__assert_fail@plt+0x5ac8>
   17058:	ldr	r1, [sp, #32]
   1705c:	mov	r3, #34	; 0x22
   17060:	mov	r2, #1
   17064:	strb	r3, [r1]
   17068:	ldr	r3, [pc, #332]	; 171bc <__assert_fail@plt+0x5bb8>
   1706c:	str	r2, [sp, #52]	; 0x34
   17070:	mov	r7, r2
   17074:	str	r2, [sp, #44]	; 0x2c
   17078:	str	r3, [sp, #64]	; 0x40
   1707c:	b	15f24 <__assert_fail@plt+0x4920>
   17080:	ldr	r3, [pc, #300]	; 171b4 <__assert_fail@plt+0x5bb0>
   17084:	str	r3, [sp, #64]	; 0x40
   17088:	mov	r3, #0
   1708c:	str	r3, [sp, #28]
   17090:	mov	r3, #1
   17094:	str	r3, [sp, #52]	; 0x34
   17098:	mov	r7, r3
   1709c:	mov	r3, #2
   170a0:	str	r3, [sp, #152]	; 0x98
   170a4:	b	15f24 <__assert_fail@plt+0x4920>
   170a8:	bl	115c8 <abort@plt>
   170ac:	ldr	r0, [sp, #56]	; 0x38
   170b0:	bl	11460 <strlen@plt>
   170b4:	str	r0, [sp, #24]
   170b8:	b	16d90 <__assert_fail@plt+0x578c>
   170bc:	mov	r5, r8
   170c0:	mov	r4, #48	; 0x30
   170c4:	ldr	r8, [sp, #44]	; 0x2c
   170c8:	b	16404 <__assert_fail@plt+0x4e00>
   170cc:	mov	r3, #1
   170d0:	str	r3, [sp, #52]	; 0x34
   170d4:	mov	r7, r3
   170d8:	str	r3, [sp, #44]	; 0x2c
   170dc:	ldr	r3, [pc, #216]	; 171bc <__assert_fail@plt+0x5bb8>
   170e0:	str	r3, [sp, #64]	; 0x40
   170e4:	b	15f24 <__assert_fail@plt+0x4920>
   170e8:	ldr	sl, [sp, #32]
   170ec:	mov	r8, fp
   170f0:	mov	r2, r3
   170f4:	b	16644 <__assert_fail@plt+0x5040>
   170f8:	mov	r3, r5
   170fc:	mov	r5, r2
   17100:	b	168fc <__assert_fail@plt+0x52f8>
   17104:	ldr	r1, [sp, #24]
   17108:	mov	r2, r5
   1710c:	cmp	r1, r9
   17110:	mov	ip, r5
   17114:	ldr	r4, [sp, #80]	; 0x50
   17118:	ldr	r5, [sp, #92]	; 0x5c
   1711c:	ldr	r6, [sp, #84]	; 0x54
   17120:	ldr	r7, [sp, #88]	; 0x58
   17124:	bls	17158 <__assert_fail@plt+0x5b54>
   17128:	ldrb	r3, [r8]
   1712c:	cmp	r3, #0
   17130:	bne	17144 <__assert_fail@plt+0x5b40>
   17134:	b	1715c <__assert_fail@plt+0x5b58>
   17138:	ldrb	r3, [r8, #1]!
   1713c:	cmp	r3, #0
   17140:	beq	1725c <__assert_fail@plt+0x5c58>
   17144:	add	r2, r2, #1
   17148:	add	r3, sl, r2
   1714c:	cmp	r1, r3
   17150:	bhi	17138 <__assert_fail@plt+0x5b34>
   17154:	mov	ip, r2
   17158:	mov	r3, #0
   1715c:	mov	r2, r3
   17160:	b	16bf4 <__assert_fail@plt+0x55f0>
   17164:	mov	r3, #0
   17168:	mov	ip, r5
   1716c:	ldr	r4, [sp, #80]	; 0x50
   17170:	ldr	r5, [sp, #92]	; 0x5c
   17174:	ldr	r6, [sp, #84]	; 0x54
   17178:	ldr	r7, [sp, #88]	; 0x58
   1717c:	mov	r2, r3
   17180:	b	16bf4 <__assert_fail@plt+0x55f0>
   17184:	mov	r3, r6
   17188:	mov	ip, r5
   1718c:	eor	r5, r3, #1
   17190:	mov	r2, r6
   17194:	ldr	r4, [sp, #80]	; 0x50
   17198:	ldr	r6, [sp, #84]	; 0x54
   1719c:	ldr	r7, [sp, #88]	; 0x58
   171a0:	uxtb	r5, r5
   171a4:	b	16bf4 <__assert_fail@plt+0x55f0>
   171a8:	ldr	sl, [sp, #32]
   171ac:	mov	r8, fp
   171b0:	b	17018 <__assert_fail@plt+0x5a14>
   171b4:	andeq	fp, r1, ip, lsr #4
   171b8:	andeq	fp, r1, r0, lsr r2
   171bc:	andeq	fp, r1, r8, lsr #4
   171c0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   171c4:	ldr	r2, [sp, #56]	; 0x38
   171c8:	ldrb	r1, [r2, r3]
   171cc:	sub	r2, r1, #33	; 0x21
   171d0:	uxtb	r2, r2
   171d4:	cmp	r2, #29
   171d8:	bhi	17278 <__assert_fail@plt+0x5c74>
   171dc:	ldr	r0, [pc, #-36]	; 171c0 <__assert_fail@plt+0x5bbc>
   171e0:	mov	ip, #1
   171e4:	ands	r2, r0, ip, lsl r2
   171e8:	beq	17288 <__assert_fail@plt+0x5c84>
   171ec:	ldr	r2, [sp, #28]
   171f0:	cmp	r2, #0
   171f4:	bne	17388 <__assert_fail@plt+0x5d84>
   171f8:	cmp	fp, r7
   171fc:	ldr	r8, [sp, #28]
   17200:	ldrhi	r2, [sp, #32]
   17204:	mov	sl, r3
   17208:	mov	r5, r8
   1720c:	strbhi	r4, [r2, r7]
   17210:	add	r2, r7, #1
   17214:	cmp	fp, r2
   17218:	movhi	r0, #34	; 0x22
   1721c:	ldrhi	ip, [sp, #32]
   17220:	mov	r4, r1
   17224:	strbhi	r0, [ip, r2]
   17228:	add	r2, r7, #2
   1722c:	cmp	fp, r2
   17230:	movhi	r0, #34	; 0x22
   17234:	ldrhi	ip, [sp, #32]
   17238:	strbhi	r0, [ip, r2]
   1723c:	add	r2, r7, #3
   17240:	cmp	fp, r2
   17244:	movhi	r0, #63	; 0x3f
   17248:	ldrhi	ip, [sp, #32]
   1724c:	add	r7, r7, #4
   17250:	strbhi	r0, [ip, r2]
   17254:	mov	r2, r8
   17258:	b	16404 <__assert_fail@plt+0x4e00>
   1725c:	mov	ip, r2
   17260:	mov	r2, r3
   17264:	b	16bf4 <__assert_fail@plt+0x55f0>
   17268:	ldr	sl, [sp, #32]
   1726c:	mov	r8, fp
   17270:	ldr	r2, [sp, #28]
   17274:	b	16644 <__assert_fail@plt+0x5040>
   17278:	mov	r2, #0
   1727c:	mov	r8, r2
   17280:	mov	r5, r2
   17284:	b	16404 <__assert_fail@plt+0x4e00>
   17288:	mov	r8, r2
   1728c:	mov	r5, #0
   17290:	b	16404 <__assert_fail@plt+0x4e00>
   17294:	ldr	r1, [sp, #152]	; 0x98
   17298:	bl	15d60 <__assert_fail@plt+0x475c>
   1729c:	str	r0, [sp, #168]	; 0xa8
   172a0:	b	162c0 <__assert_fail@plt+0x4cbc>
   172a4:	ldr	r1, [sp, #152]	; 0x98
   172a8:	bl	15d60 <__assert_fail@plt+0x475c>
   172ac:	str	r0, [sp, #164]	; 0xa4
   172b0:	b	162a0 <__assert_fail@plt+0x4c9c>
   172b4:	ldr	r7, [sp, #28]
   172b8:	b	16300 <__assert_fail@plt+0x4cfc>
   172bc:	ldr	sl, [sp, #32]
   172c0:	ldr	r2, [sp, #68]	; 0x44
   172c4:	mov	r8, fp
   172c8:	mov	fp, r7
   172cc:	ldr	r3, [sp, #64]	; 0x40
   172d0:	cmp	r3, #0
   172d4:	moveq	r2, #0
   172d8:	andne	r2, r2, #1
   172dc:	cmp	r2, #0
   172e0:	beq	1730c <__assert_fail@plt+0x5d08>
   172e4:	mov	r2, r3
   172e8:	ldrb	r3, [r3]
   172ec:	cmp	r3, #0
   172f0:	beq	1730c <__assert_fail@plt+0x5d08>
   172f4:	cmp	r8, fp
   172f8:	strbhi	r3, [sl, fp]
   172fc:	ldrb	r3, [r2, #1]!
   17300:	add	fp, fp, #1
   17304:	cmp	r3, #0
   17308:	bne	172f4 <__assert_fail@plt+0x5cf0>
   1730c:	cmp	r8, fp
   17310:	movhi	r3, #0
   17314:	strbhi	r3, [sl, fp]
   17318:	b	166a0 <__assert_fail@plt+0x509c>
   1731c:	ldr	r3, [sp, #168]	; 0xa8
   17320:	ldr	sl, [sp, #32]
   17324:	str	r3, [sp, #16]
   17328:	ldr	r3, [sp, #164]	; 0xa4
   1732c:	mov	ip, #5
   17330:	str	r3, [sp, #12]
   17334:	ldr	r3, [sp, #160]	; 0xa0
   17338:	ldr	r2, [sp, #56]	; 0x38
   1733c:	str	r3, [sp, #8]
   17340:	ldr	r3, [sp, #156]	; 0x9c
   17344:	ldr	r1, [sp, #72]	; 0x48
   17348:	str	r3, [sp, #4]
   1734c:	mov	r0, sl
   17350:	ldr	r3, [sp, #24]
   17354:	str	ip, [sp]
   17358:	bl	15e80 <__assert_fail@plt+0x487c>
   1735c:	mov	fp, r0
   17360:	b	166a0 <__assert_fail@plt+0x509c>
   17364:	mov	r8, fp
   17368:	ldr	sl, [sp, #32]
   1736c:	mov	fp, r7
   17370:	mov	r2, r3
   17374:	b	172cc <__assert_fail@plt+0x5cc8>
   17378:	mov	r8, fp
   1737c:	ldr	sl, [sp, #32]
   17380:	mov	fp, r7
   17384:	b	172cc <__assert_fail@plt+0x5cc8>
   17388:	ldr	sl, [sp, #32]
   1738c:	mov	r8, fp
   17390:	b	1665c <__assert_fail@plt+0x5058>
   17394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17398:	sub	sp, sp, #52	; 0x34
   1739c:	mov	r4, r0
   173a0:	mov	r5, r3
   173a4:	mov	sl, r1
   173a8:	mov	fp, r2
   173ac:	bl	11484 <__errno_location@plt>
   173b0:	ldr	r7, [pc, #412]	; 17554 <__assert_fail@plt+0x5f50>
   173b4:	cmn	r4, #-2147483647	; 0x80000001
   173b8:	ldr	r6, [r7]
   173bc:	mov	r8, r0
   173c0:	movne	r0, #0
   173c4:	moveq	r0, #1
   173c8:	ldr	r3, [r8]
   173cc:	orrs	r0, r0, r4, lsr #31
   173d0:	str	r3, [sp, #24]
   173d4:	bne	17550 <__assert_fail@plt+0x5f4c>
   173d8:	ldr	r2, [r7, #4]
   173dc:	cmp	r4, r2
   173e0:	blt	17440 <__assert_fail@plt+0x5e3c>
   173e4:	add	r9, r7, #8
   173e8:	cmp	r6, r9
   173ec:	str	r2, [sp, #44]	; 0x2c
   173f0:	beq	17520 <__assert_fail@plt+0x5f1c>
   173f4:	mov	r3, #8
   173f8:	sub	r2, r4, r2
   173fc:	mov	r0, r6
   17400:	str	r3, [sp]
   17404:	add	r2, r2, #1
   17408:	mvn	r3, #-2147483648	; 0x80000000
   1740c:	add	r1, sp, #44	; 0x2c
   17410:	bl	18a64 <__assert_fail@plt+0x7460>
   17414:	mov	r6, r0
   17418:	str	r0, [r7]
   1741c:	ldr	r0, [r7, #4]
   17420:	ldr	r2, [sp, #44]	; 0x2c
   17424:	mov	r1, #0
   17428:	sub	r2, r2, r0
   1742c:	add	r0, r6, r0, lsl #3
   17430:	lsl	r2, r2, #3
   17434:	bl	114a8 <memset@plt>
   17438:	ldr	r3, [sp, #44]	; 0x2c
   1743c:	str	r3, [r7, #4]
   17440:	add	r3, r6, r4, lsl #3
   17444:	ldr	r1, [r5, #4]
   17448:	ldr	r7, [r3, #4]
   1744c:	ldr	r9, [r6, r4, lsl #3]
   17450:	ldr	r2, [r5, #40]	; 0x28
   17454:	ldr	ip, [r5, #44]	; 0x2c
   17458:	add	r0, r5, #8
   1745c:	str	r3, [sp, #28]
   17460:	ldr	r3, [r5]
   17464:	orr	r1, r1, #1
   17468:	mov	lr, r0
   1746c:	str	r1, [sp, #32]
   17470:	str	r0, [sp, #36]	; 0x24
   17474:	str	r1, [sp, #4]
   17478:	str	r2, [sp, #12]
   1747c:	str	r3, [sp]
   17480:	mov	r0, r7
   17484:	mov	r1, r9
   17488:	str	ip, [sp, #16]
   1748c:	str	lr, [sp, #8]
   17490:	mov	r3, fp
   17494:	mov	r2, sl
   17498:	bl	15e80 <__assert_fail@plt+0x487c>
   1749c:	cmp	r9, r0
   174a0:	bhi	1750c <__assert_fail@plt+0x5f08>
   174a4:	ldr	r3, [pc, #172]	; 17558 <__assert_fail@plt+0x5f54>
   174a8:	add	r9, r0, #1
   174ac:	cmp	r7, r3
   174b0:	str	r9, [r6, r4, lsl #3]
   174b4:	beq	174c0 <__assert_fail@plt+0x5ebc>
   174b8:	mov	r0, r7
   174bc:	bl	19538 <__assert_fail@plt+0x7f34>
   174c0:	mov	r0, r9
   174c4:	bl	18900 <__assert_fail@plt+0x72fc>
   174c8:	ldr	lr, [sp, #28]
   174cc:	ldr	ip, [r5, #44]	; 0x2c
   174d0:	ldr	r4, [r5, #40]	; 0x28
   174d4:	mov	r3, fp
   174d8:	mov	r2, sl
   174dc:	mov	r1, r9
   174e0:	str	r0, [lr, #4]
   174e4:	ldr	lr, [r5]
   174e8:	ldr	r5, [sp, #36]	; 0x24
   174ec:	str	ip, [sp, #16]
   174f0:	str	r5, [sp, #8]
   174f4:	ldr	r5, [sp, #32]
   174f8:	str	r4, [sp, #12]
   174fc:	str	r5, [sp, #4]
   17500:	str	lr, [sp]
   17504:	mov	r7, r0
   17508:	bl	15e80 <__assert_fail@plt+0x487c>
   1750c:	ldr	r3, [sp, #24]
   17510:	mov	r0, r7
   17514:	str	r3, [r8]
   17518:	add	sp, sp, #52	; 0x34
   1751c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17520:	mov	r3, #8
   17524:	sub	r2, r4, r2
   17528:	str	r3, [sp]
   1752c:	add	r1, sp, #44	; 0x2c
   17530:	add	r2, r2, #1
   17534:	mvn	r3, #-2147483648	; 0x80000000
   17538:	bl	18a64 <__assert_fail@plt+0x7460>
   1753c:	mov	r6, r0
   17540:	ldm	r9, {r0, r1}
   17544:	str	r6, [r7]
   17548:	stm	r6, {r0, r1}
   1754c:	b	1741c <__assert_fail@plt+0x5e18>
   17550:	bl	115c8 <abort@plt>
   17554:	andeq	ip, r2, ip, ror #2
   17558:	andeq	ip, r2, r0, lsl r2
   1755c:	push	{r4, r5, r6, lr}
   17560:	mov	r5, r0
   17564:	bl	11484 <__errno_location@plt>
   17568:	cmp	r5, #0
   1756c:	mov	r1, #48	; 0x30
   17570:	mov	r4, r0
   17574:	ldr	r0, [pc, #16]	; 1758c <__assert_fail@plt+0x5f88>
   17578:	ldr	r6, [r4]
   1757c:	movne	r0, r5
   17580:	bl	18d60 <__assert_fail@plt+0x775c>
   17584:	str	r6, [r4]
   17588:	pop	{r4, r5, r6, pc}
   1758c:	andeq	ip, r2, r0, lsl r3
   17590:	ldr	r3, [pc, #12]	; 175a4 <__assert_fail@plt+0x5fa0>
   17594:	cmp	r0, #0
   17598:	moveq	r0, r3
   1759c:	ldr	r0, [r0]
   175a0:	bx	lr
   175a4:	andeq	ip, r2, r0, lsl r3
   175a8:	ldr	r3, [pc, #12]	; 175bc <__assert_fail@plt+0x5fb8>
   175ac:	cmp	r0, #0
   175b0:	moveq	r0, r3
   175b4:	str	r1, [r0]
   175b8:	bx	lr
   175bc:	andeq	ip, r2, r0, lsl r3
   175c0:	ldr	r3, [pc, #52]	; 175fc <__assert_fail@plt+0x5ff8>
   175c4:	cmp	r0, #0
   175c8:	moveq	r0, r3
   175cc:	add	r3, r0, #8
   175d0:	push	{lr}		; (str lr, [sp, #-4]!)
   175d4:	lsr	lr, r1, #5
   175d8:	and	r1, r1, #31
   175dc:	ldr	ip, [r3, lr, lsl #2]
   175e0:	lsr	r0, ip, r1
   175e4:	eor	r2, r2, r0
   175e8:	and	r2, r2, #1
   175ec:	and	r0, r0, #1
   175f0:	eor	r1, ip, r2, lsl r1
   175f4:	str	r1, [r3, lr, lsl #2]
   175f8:	pop	{pc}		; (ldr pc, [sp], #4)
   175fc:	andeq	ip, r2, r0, lsl r3
   17600:	ldr	r3, [pc, #16]	; 17618 <__assert_fail@plt+0x6014>
   17604:	cmp	r0, #0
   17608:	movne	r3, r0
   1760c:	ldr	r0, [r3, #4]
   17610:	str	r1, [r3, #4]
   17614:	bx	lr
   17618:	andeq	ip, r2, r0, lsl r3
   1761c:	ldr	r3, [pc, #44]	; 17650 <__assert_fail@plt+0x604c>
   17620:	cmp	r0, #0
   17624:	moveq	r0, r3
   17628:	mov	ip, #10
   1762c:	cmp	r2, #0
   17630:	cmpne	r1, #0
   17634:	str	ip, [r0]
   17638:	beq	17648 <__assert_fail@plt+0x6044>
   1763c:	str	r1, [r0, #40]	; 0x28
   17640:	str	r2, [r0, #44]	; 0x2c
   17644:	bx	lr
   17648:	push	{r4, lr}
   1764c:	bl	115c8 <abort@plt>
   17650:	andeq	ip, r2, r0, lsl r3
   17654:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17658:	sub	sp, sp, #24
   1765c:	ldr	ip, [pc, #108]	; 176d0 <__assert_fail@plt+0x60cc>
   17660:	ldr	r4, [sp, #56]	; 0x38
   17664:	mov	r9, r2
   17668:	cmp	r4, #0
   1766c:	moveq	r4, ip
   17670:	mov	sl, r3
   17674:	mov	r7, r0
   17678:	mov	r8, r1
   1767c:	bl	11484 <__errno_location@plt>
   17680:	ldr	r3, [r4, #44]	; 0x2c
   17684:	mov	r1, r8
   17688:	ldr	r6, [r0]
   1768c:	str	r3, [sp, #16]
   17690:	ldr	r2, [r4, #40]	; 0x28
   17694:	add	r3, r4, #8
   17698:	str	r3, [sp, #8]
   1769c:	str	r2, [sp, #12]
   176a0:	ldr	r2, [r4, #4]
   176a4:	mov	r5, r0
   176a8:	str	r2, [sp, #4]
   176ac:	ldr	ip, [r4]
   176b0:	mov	r3, sl
   176b4:	mov	r2, r9
   176b8:	mov	r0, r7
   176bc:	str	ip, [sp]
   176c0:	bl	15e80 <__assert_fail@plt+0x487c>
   176c4:	str	r6, [r5]
   176c8:	add	sp, sp, #24
   176cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   176d0:	andeq	ip, r2, r0, lsl r3
   176d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176d8:	cmp	r3, #0
   176dc:	sub	sp, sp, #44	; 0x2c
   176e0:	ldr	r4, [pc, #192]	; 177a8 <__assert_fail@plt+0x61a4>
   176e4:	mov	r6, r2
   176e8:	movne	r4, r3
   176ec:	mov	r9, r1
   176f0:	mov	r8, r0
   176f4:	bl	11484 <__errno_location@plt>
   176f8:	ldr	r3, [r4, #44]	; 0x2c
   176fc:	ldr	r5, [r4, #4]
   17700:	add	sl, r4, #8
   17704:	cmp	r6, #0
   17708:	orreq	r5, r5, #1
   1770c:	mov	r1, #0
   17710:	ldr	r2, [r0]
   17714:	str	r3, [sp, #16]
   17718:	ldr	r3, [r4, #40]	; 0x28
   1771c:	stmib	sp, {r5, sl}
   17720:	str	r3, [sp, #12]
   17724:	ldr	r3, [r4]
   17728:	mov	r7, r0
   1772c:	str	r2, [sp, #28]
   17730:	str	r3, [sp]
   17734:	mov	r2, r8
   17738:	mov	r3, r9
   1773c:	mov	r0, r1
   17740:	bl	15e80 <__assert_fail@plt+0x487c>
   17744:	add	r1, r0, #1
   17748:	mov	fp, r0
   1774c:	mov	r0, r1
   17750:	str	r1, [sp, #36]	; 0x24
   17754:	bl	18900 <__assert_fail@plt+0x72fc>
   17758:	ldr	r3, [r4, #44]	; 0x2c
   1775c:	mov	r2, r8
   17760:	str	r3, [sp, #16]
   17764:	ldr	r3, [r4, #40]	; 0x28
   17768:	str	r5, [sp, #4]
   1776c:	str	r3, [sp, #12]
   17770:	str	sl, [sp, #8]
   17774:	ldr	ip, [r4]
   17778:	ldr	r1, [sp, #36]	; 0x24
   1777c:	mov	r3, r9
   17780:	str	ip, [sp]
   17784:	str	r0, [sp, #32]
   17788:	bl	15e80 <__assert_fail@plt+0x487c>
   1778c:	ldr	r2, [sp, #28]
   17790:	cmp	r6, #0
   17794:	str	r2, [r7]
   17798:	ldr	r0, [sp, #32]
   1779c:	strne	fp, [r6]
   177a0:	add	sp, sp, #44	; 0x2c
   177a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177a8:	andeq	ip, r2, r0, lsl r3
   177ac:	mov	r3, r2
   177b0:	mov	r2, #0
   177b4:	b	176d4 <__assert_fail@plt+0x60d0>
   177b8:	push	{r4, r5, r6, r7, r8, lr}
   177bc:	ldr	r6, [pc, #116]	; 17838 <__assert_fail@plt+0x6234>
   177c0:	ldr	r3, [r6, #4]
   177c4:	ldr	r7, [r6]
   177c8:	cmp	r3, #1
   177cc:	movgt	r5, r7
   177d0:	movgt	r4, #1
   177d4:	ble	177f4 <__assert_fail@plt+0x61f0>
   177d8:	ldr	r0, [r5, #12]
   177dc:	bl	19538 <__assert_fail@plt+0x7f34>
   177e0:	ldr	r3, [r6, #4]
   177e4:	add	r4, r4, #1
   177e8:	cmp	r3, r4
   177ec:	add	r5, r5, #8
   177f0:	bgt	177d8 <__assert_fail@plt+0x61d4>
   177f4:	ldr	r0, [r7, #4]
   177f8:	ldr	r4, [pc, #60]	; 1783c <__assert_fail@plt+0x6238>
   177fc:	cmp	r0, r4
   17800:	beq	17814 <__assert_fail@plt+0x6210>
   17804:	bl	19538 <__assert_fail@plt+0x7f34>
   17808:	mov	r3, #256	; 0x100
   1780c:	str	r4, [r6, #12]
   17810:	str	r3, [r6, #8]
   17814:	ldr	r4, [pc, #36]	; 17840 <__assert_fail@plt+0x623c>
   17818:	cmp	r7, r4
   1781c:	beq	1782c <__assert_fail@plt+0x6228>
   17820:	mov	r0, r7
   17824:	bl	19538 <__assert_fail@plt+0x7f34>
   17828:	str	r4, [r6]
   1782c:	mov	r3, #1
   17830:	str	r3, [r6, #4]
   17834:	pop	{r4, r5, r6, r7, r8, pc}
   17838:	andeq	ip, r2, ip, ror #2
   1783c:	andeq	ip, r2, r0, lsl r2
   17840:	andeq	ip, r2, r4, ror r1
   17844:	ldr	r3, [pc, #4]	; 17850 <__assert_fail@plt+0x624c>
   17848:	mvn	r2, #0
   1784c:	b	17394 <__assert_fail@plt+0x5d90>
   17850:	andeq	ip, r2, r0, lsl r3
   17854:	ldr	r3, [pc]	; 1785c <__assert_fail@plt+0x6258>
   17858:	b	17394 <__assert_fail@plt+0x5d90>
   1785c:	andeq	ip, r2, r0, lsl r3
   17860:	mov	r1, r0
   17864:	ldr	r3, [pc, #8]	; 17874 <__assert_fail@plt+0x6270>
   17868:	mvn	r2, #0
   1786c:	mov	r0, #0
   17870:	b	17394 <__assert_fail@plt+0x5d90>
   17874:	andeq	ip, r2, r0, lsl r3
   17878:	mov	r2, r1
   1787c:	ldr	r3, [pc, #8]	; 1788c <__assert_fail@plt+0x6288>
   17880:	mov	r1, r0
   17884:	mov	r0, #0
   17888:	b	17394 <__assert_fail@plt+0x5d90>
   1788c:	andeq	ip, r2, r0, lsl r3
   17890:	push	{r4, r5, lr}
   17894:	sub	sp, sp, #52	; 0x34
   17898:	mov	r5, r2
   1789c:	mov	r4, r0
   178a0:	mov	r0, sp
   178a4:	bl	15d30 <__assert_fail@plt+0x472c>
   178a8:	mov	r3, sp
   178ac:	mov	r1, r5
   178b0:	mov	r0, r4
   178b4:	mvn	r2, #0
   178b8:	bl	17394 <__assert_fail@plt+0x5d90>
   178bc:	add	sp, sp, #52	; 0x34
   178c0:	pop	{r4, r5, pc}
   178c4:	push	{r4, r5, r6, lr}
   178c8:	sub	sp, sp, #48	; 0x30
   178cc:	mov	r5, r2
   178d0:	mov	r6, r3
   178d4:	mov	r4, r0
   178d8:	mov	r0, sp
   178dc:	bl	15d30 <__assert_fail@plt+0x472c>
   178e0:	mov	r3, sp
   178e4:	mov	r2, r6
   178e8:	mov	r1, r5
   178ec:	mov	r0, r4
   178f0:	bl	17394 <__assert_fail@plt+0x5d90>
   178f4:	add	sp, sp, #48	; 0x30
   178f8:	pop	{r4, r5, r6, pc}
   178fc:	mov	r2, r1
   17900:	mov	r1, r0
   17904:	mov	r0, #0
   17908:	b	17890 <__assert_fail@plt+0x628c>
   1790c:	mov	r3, r2
   17910:	mov	r2, r1
   17914:	mov	r1, r0
   17918:	mov	r0, #0
   1791c:	b	178c4 <__assert_fail@plt+0x62c0>
   17920:	push	{r4, r5, r6, r7, r8, lr}
   17924:	mov	r7, r0
   17928:	ldr	lr, [pc, #100]	; 17994 <__assert_fail@plt+0x6390>
   1792c:	mov	r8, r1
   17930:	mov	r4, r2
   17934:	ldm	lr!, {r0, r1, r2, r3}
   17938:	sub	sp, sp, #48	; 0x30
   1793c:	mov	ip, sp
   17940:	lsr	r5, r4, #5
   17944:	stmia	ip!, {r0, r1, r2, r3}
   17948:	add	r6, sp, #8
   1794c:	ldm	lr!, {r0, r1, r2, r3}
   17950:	and	r4, r4, #31
   17954:	stmia	ip!, {r0, r1, r2, r3}
   17958:	ldm	lr, {r0, r1, r2, r3}
   1795c:	stm	ip, {r0, r1, r2, r3}
   17960:	mov	r2, r8
   17964:	ldr	lr, [r6, r5, lsl #2]
   17968:	mov	r1, r7
   1796c:	mov	r3, sp
   17970:	lsr	ip, lr, r4
   17974:	eor	ip, ip, #1
   17978:	and	ip, ip, #1
   1797c:	mov	r0, #0
   17980:	eor	r4, lr, ip, lsl r4
   17984:	str	r4, [r6, r5, lsl #2]
   17988:	bl	17394 <__assert_fail@plt+0x5d90>
   1798c:	add	sp, sp, #48	; 0x30
   17990:	pop	{r4, r5, r6, r7, r8, pc}
   17994:	andeq	ip, r2, r0, lsl r3
   17998:	mov	r2, r1
   1799c:	mvn	r1, #0
   179a0:	b	17920 <__assert_fail@plt+0x631c>
   179a4:	mov	r2, #58	; 0x3a
   179a8:	mvn	r1, #0
   179ac:	b	17920 <__assert_fail@plt+0x631c>
   179b0:	mov	r2, #58	; 0x3a
   179b4:	b	17920 <__assert_fail@plt+0x631c>
   179b8:	push	{r4, r5, r6, r7, lr}
   179bc:	sub	sp, sp, #100	; 0x64
   179c0:	mov	r6, r0
   179c4:	mov	r0, sp
   179c8:	mov	r7, r2
   179cc:	bl	15d30 <__assert_fail@plt+0x472c>
   179d0:	mov	ip, sp
   179d4:	add	lr, sp, #48	; 0x30
   179d8:	ldm	ip!, {r0, r1, r2, r3}
   179dc:	stmia	lr!, {r0, r1, r2, r3}
   179e0:	ldm	ip!, {r0, r1, r2, r3}
   179e4:	ldr	r5, [sp, #60]	; 0x3c
   179e8:	stmia	lr!, {r0, r1, r2, r3}
   179ec:	mvn	r4, r5
   179f0:	ldm	ip, {r0, r1, r2, r3}
   179f4:	and	ip, r4, #67108864	; 0x4000000
   179f8:	eor	ip, ip, r5
   179fc:	str	ip, [sp, #60]	; 0x3c
   17a00:	stm	lr, {r0, r1, r2, r3}
   17a04:	mov	r1, r7
   17a08:	mov	r0, r6
   17a0c:	add	r3, sp, #48	; 0x30
   17a10:	mvn	r2, #0
   17a14:	bl	17394 <__assert_fail@plt+0x5d90>
   17a18:	add	sp, sp, #100	; 0x64
   17a1c:	pop	{r4, r5, r6, r7, pc}
   17a20:	push	{r4, r5, r6, r7, r8, lr}
   17a24:	mov	r5, r1
   17a28:	ldr	lr, [pc, #100]	; 17a94 <__assert_fail@plt+0x6490>
   17a2c:	mov	r4, r2
   17a30:	mov	r7, r0
   17a34:	mov	r8, r3
   17a38:	ldm	lr!, {r0, r1, r2, r3}
   17a3c:	sub	sp, sp, #48	; 0x30
   17a40:	mov	ip, sp
   17a44:	mov	r6, #10
   17a48:	stmia	ip!, {r0, r1, r2, r3}
   17a4c:	cmp	r4, #0
   17a50:	cmpne	r5, #0
   17a54:	ldm	lr!, {r0, r1, r2, r3}
   17a58:	str	r6, [sp]
   17a5c:	stmia	ip!, {r0, r1, r2, r3}
   17a60:	ldm	lr, {r0, r1, r2, r3}
   17a64:	stm	ip, {r0, r1, r2, r3}
   17a68:	beq	17a90 <__assert_fail@plt+0x648c>
   17a6c:	mov	r3, sp
   17a70:	mov	r1, r8
   17a74:	mov	r0, r7
   17a78:	ldr	r2, [sp, #72]	; 0x48
   17a7c:	str	r5, [sp, #40]	; 0x28
   17a80:	str	r4, [sp, #44]	; 0x2c
   17a84:	bl	17394 <__assert_fail@plt+0x5d90>
   17a88:	add	sp, sp, #48	; 0x30
   17a8c:	pop	{r4, r5, r6, r7, r8, pc}
   17a90:	bl	115c8 <abort@plt>
   17a94:	andeq	ip, r2, r0, lsl r3
   17a98:	push	{lr}		; (str lr, [sp, #-4]!)
   17a9c:	sub	sp, sp, #12
   17aa0:	mvn	ip, #0
   17aa4:	str	ip, [sp]
   17aa8:	bl	17a20 <__assert_fail@plt+0x641c>
   17aac:	add	sp, sp, #12
   17ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ab4:	push	{lr}		; (str lr, [sp, #-4]!)
   17ab8:	sub	sp, sp, #12
   17abc:	mvn	ip, #0
   17ac0:	mov	r3, r2
   17ac4:	str	ip, [sp]
   17ac8:	mov	r2, r1
   17acc:	mov	r1, r0
   17ad0:	mov	r0, #0
   17ad4:	bl	17a20 <__assert_fail@plt+0x641c>
   17ad8:	add	sp, sp, #12
   17adc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ae0:	push	{lr}		; (str lr, [sp, #-4]!)
   17ae4:	sub	sp, sp, #12
   17ae8:	str	r3, [sp]
   17aec:	mov	r3, r2
   17af0:	mov	r2, r1
   17af4:	mov	r1, r0
   17af8:	mov	r0, #0
   17afc:	bl	17a20 <__assert_fail@plt+0x641c>
   17b00:	add	sp, sp, #12
   17b04:	pop	{pc}		; (ldr pc, [sp], #4)
   17b08:	ldr	r3, [pc]	; 17b10 <__assert_fail@plt+0x650c>
   17b0c:	b	17394 <__assert_fail@plt+0x5d90>
   17b10:	andeq	ip, r2, ip, ror r1
   17b14:	mov	r2, r1
   17b18:	ldr	r3, [pc, #8]	; 17b28 <__assert_fail@plt+0x6524>
   17b1c:	mov	r1, r0
   17b20:	mov	r0, #0
   17b24:	b	17394 <__assert_fail@plt+0x5d90>
   17b28:	andeq	ip, r2, ip, ror r1
   17b2c:	ldr	r3, [pc, #4]	; 17b38 <__assert_fail@plt+0x6534>
   17b30:	mvn	r2, #0
   17b34:	b	17394 <__assert_fail@plt+0x5d90>
   17b38:	andeq	ip, r2, ip, ror r1
   17b3c:	mov	r1, r0
   17b40:	ldr	r3, [pc, #8]	; 17b50 <__assert_fail@plt+0x654c>
   17b44:	mvn	r2, #0
   17b48:	mov	r0, #0
   17b4c:	b	17394 <__assert_fail@plt+0x5d90>
   17b50:	andeq	ip, r2, ip, ror r1
   17b54:	push	{r4, r6, r7, lr}
   17b58:	sub	sp, sp, #104	; 0x68
   17b5c:	mov	r4, r0
   17b60:	mov	r2, sp
   17b64:	ldr	r1, [pc, #52]	; 17ba0 <__assert_fail@plt+0x659c>
   17b68:	mov	r0, #3
   17b6c:	bl	115e0 <__lxstat64@plt>
   17b70:	cmp	r0, #0
   17b74:	bne	17b94 <__assert_fail@plt+0x6590>
   17b78:	ldrd	r6, [sp, #96]	; 0x60
   17b7c:	ldrd	r2, [sp]
   17b80:	mov	r0, r4
   17b84:	strd	r6, [r4]
   17b88:	strd	r2, [r4, #8]
   17b8c:	add	sp, sp, #104	; 0x68
   17b90:	pop	{r4, r6, r7, pc}
   17b94:	mov	r0, #0
   17b98:	add	sp, sp, #104	; 0x68
   17b9c:	pop	{r4, r6, r7, pc}
   17ba0:	andeq	fp, r1, r4, lsr r6
   17ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ba8:	cmn	r0, #100	; 0x64
   17bac:	sub	sp, sp, #4032	; 0xfc0
   17bb0:	sub	sp, sp, #4
   17bb4:	mov	r5, r1
   17bb8:	mov	r8, r2
   17bbc:	beq	17c90 <__assert_fail@plt+0x668c>
   17bc0:	ldrb	r3, [r1]
   17bc4:	cmp	r3, #47	; 0x2f
   17bc8:	beq	17c90 <__assert_fail@plt+0x668c>
   17bcc:	mov	r4, r0
   17bd0:	mov	r2, r1
   17bd4:	mov	r0, sp
   17bd8:	mov	r1, r4
   17bdc:	bl	18fb0 <__assert_fail@plt+0x79ac>
   17be0:	mov	r7, sp
   17be4:	subs	r9, r0, #0
   17be8:	beq	17c3c <__assert_fail@plt+0x6638>
   17bec:	mov	r1, r8
   17bf0:	bl	18334 <__assert_fail@plt+0x6d30>
   17bf4:	mov	r6, r0
   17bf8:	bl	11484 <__errno_location@plt>
   17bfc:	cmp	r9, r7
   17c00:	mov	sl, r0
   17c04:	ldr	fp, [r0]
   17c08:	beq	17c14 <__assert_fail@plt+0x6610>
   17c0c:	mov	r0, r9
   17c10:	bl	19538 <__assert_fail@plt+0x7f34>
   17c14:	cmn	r6, #1
   17c18:	beq	17cb0 <__assert_fail@plt+0x66ac>
   17c1c:	mov	r0, r6
   17c20:	add	sp, sp, #4032	; 0xfc0
   17c24:	add	sp, sp, #4
   17c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c2c:	ldr	r2, [pc, #308]	; 17d68 <__assert_fail@plt+0x6764>
   17c30:	mvn	r3, r2, lsr r3
   17c34:	tst	r3, #1
   17c38:	bne	17cbc <__assert_fail@plt+0x66b8>
   17c3c:	mov	r0, r7
   17c40:	bl	1977c <__assert_fail@plt+0x8178>
   17c44:	cmp	r0, #0
   17c48:	bne	17d5c <__assert_fail@plt+0x6758>
   17c4c:	cmp	r4, #0
   17c50:	blt	17c60 <__assert_fail@plt+0x665c>
   17c54:	ldr	r3, [sp]
   17c58:	cmp	r4, r3
   17c5c:	beq	17d40 <__assert_fail@plt+0x673c>
   17c60:	mov	r0, r4
   17c64:	bl	11568 <fchdir@plt>
   17c68:	cmp	r0, #0
   17c6c:	beq	17cd0 <__assert_fail@plt+0x66cc>
   17c70:	bl	11484 <__errno_location@plt>
   17c74:	mvn	r6, #0
   17c78:	mov	r4, r0
   17c7c:	mov	r0, r7
   17c80:	ldr	r5, [r4]
   17c84:	bl	197ec <__assert_fail@plt+0x81e8>
   17c88:	str	r5, [r4]
   17c8c:	b	17c1c <__assert_fail@plt+0x6618>
   17c90:	mov	r1, r8
   17c94:	mov	r0, r5
   17c98:	bl	18334 <__assert_fail@plt+0x6d30>
   17c9c:	mov	r6, r0
   17ca0:	mov	r0, r6
   17ca4:	add	sp, sp, #4032	; 0xfc0
   17ca8:	add	sp, sp, #4
   17cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cb0:	sub	r3, fp, #1
   17cb4:	cmp	r3, #19
   17cb8:	bls	17c2c <__assert_fail@plt+0x6628>
   17cbc:	cmp	fp, #38	; 0x26
   17cc0:	cmpne	fp, #95	; 0x5f
   17cc4:	strne	fp, [sl]
   17cc8:	bne	17c1c <__assert_fail@plt+0x6618>
   17ccc:	b	17c3c <__assert_fail@plt+0x6638>
   17cd0:	mov	r1, r8
   17cd4:	mov	r0, r5
   17cd8:	bl	18334 <__assert_fail@plt+0x6d30>
   17cdc:	cmn	r0, #1
   17ce0:	mov	r6, r0
   17ce4:	beq	17d10 <__assert_fail@plt+0x670c>
   17ce8:	mov	r0, r7
   17cec:	bl	197d0 <__assert_fail@plt+0x81cc>
   17cf0:	cmp	r0, #0
   17cf4:	bne	17d04 <__assert_fail@plt+0x6700>
   17cf8:	mov	r0, r7
   17cfc:	bl	197ec <__assert_fail@plt+0x81e8>
   17d00:	b	17c1c <__assert_fail@plt+0x6618>
   17d04:	bl	11484 <__errno_location@plt>
   17d08:	ldr	r0, [r0]
   17d0c:	bl	196f4 <__assert_fail@plt+0x80f0>
   17d10:	bl	11484 <__errno_location@plt>
   17d14:	mov	r5, r0
   17d18:	mov	r0, r7
   17d1c:	ldr	r4, [r5]
   17d20:	bl	197d0 <__assert_fail@plt+0x81cc>
   17d24:	cmp	r0, #0
   17d28:	bne	17d04 <__assert_fail@plt+0x6700>
   17d2c:	mov	r0, r7
   17d30:	bl	197ec <__assert_fail@plt+0x81e8>
   17d34:	cmp	r4, #0
   17d38:	strne	r4, [r5]
   17d3c:	b	17c1c <__assert_fail@plt+0x6618>
   17d40:	mov	r0, r7
   17d44:	bl	197ec <__assert_fail@plt+0x81e8>
   17d48:	bl	11484 <__errno_location@plt>
   17d4c:	mov	r3, #9
   17d50:	mvn	r6, #0
   17d54:	str	r3, [r0]
   17d58:	b	17c1c <__assert_fail@plt+0x6618>
   17d5c:	bl	11484 <__errno_location@plt>
   17d60:	ldr	r0, [r0]
   17d64:	bl	196b8 <__assert_fail@plt+0x80b4>
   17d68:	andeq	r1, r8, r3
   17d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d70:	cmn	r0, #100	; 0x64
   17d74:	sub	sp, sp, #4032	; 0xfc0
   17d78:	sub	sp, sp, #4
   17d7c:	mov	r5, r1
   17d80:	mov	r8, r2
   17d84:	beq	17e58 <__assert_fail@plt+0x6854>
   17d88:	ldrb	r3, [r1]
   17d8c:	cmp	r3, #47	; 0x2f
   17d90:	beq	17e58 <__assert_fail@plt+0x6854>
   17d94:	mov	r4, r0
   17d98:	mov	r2, r1
   17d9c:	mov	r0, sp
   17da0:	mov	r1, r4
   17da4:	bl	18fb0 <__assert_fail@plt+0x79ac>
   17da8:	mov	r7, sp
   17dac:	subs	r9, r0, #0
   17db0:	beq	17e04 <__assert_fail@plt+0x6800>
   17db4:	mov	r1, r8
   17db8:	bl	1834c <__assert_fail@plt+0x6d48>
   17dbc:	mov	r6, r0
   17dc0:	bl	11484 <__errno_location@plt>
   17dc4:	cmp	r9, r7
   17dc8:	mov	sl, r0
   17dcc:	ldr	fp, [r0]
   17dd0:	beq	17ddc <__assert_fail@plt+0x67d8>
   17dd4:	mov	r0, r9
   17dd8:	bl	19538 <__assert_fail@plt+0x7f34>
   17ddc:	cmn	r6, #1
   17de0:	beq	17e78 <__assert_fail@plt+0x6874>
   17de4:	mov	r0, r6
   17de8:	add	sp, sp, #4032	; 0xfc0
   17dec:	add	sp, sp, #4
   17df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17df4:	ldr	r2, [pc, #308]	; 17f30 <__assert_fail@plt+0x692c>
   17df8:	mvn	r3, r2, lsr r3
   17dfc:	tst	r3, #1
   17e00:	bne	17e84 <__assert_fail@plt+0x6880>
   17e04:	mov	r0, r7
   17e08:	bl	1977c <__assert_fail@plt+0x8178>
   17e0c:	cmp	r0, #0
   17e10:	bne	17f24 <__assert_fail@plt+0x6920>
   17e14:	cmp	r4, #0
   17e18:	blt	17e28 <__assert_fail@plt+0x6824>
   17e1c:	ldr	r3, [sp]
   17e20:	cmp	r4, r3
   17e24:	beq	17f08 <__assert_fail@plt+0x6904>
   17e28:	mov	r0, r4
   17e2c:	bl	11568 <fchdir@plt>
   17e30:	cmp	r0, #0
   17e34:	beq	17e98 <__assert_fail@plt+0x6894>
   17e38:	bl	11484 <__errno_location@plt>
   17e3c:	mvn	r6, #0
   17e40:	mov	r4, r0
   17e44:	mov	r0, r7
   17e48:	ldr	r5, [r4]
   17e4c:	bl	197ec <__assert_fail@plt+0x81e8>
   17e50:	str	r5, [r4]
   17e54:	b	17de4 <__assert_fail@plt+0x67e0>
   17e58:	mov	r1, r8
   17e5c:	mov	r0, r5
   17e60:	bl	1834c <__assert_fail@plt+0x6d48>
   17e64:	mov	r6, r0
   17e68:	mov	r0, r6
   17e6c:	add	sp, sp, #4032	; 0xfc0
   17e70:	add	sp, sp, #4
   17e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e78:	sub	r3, fp, #1
   17e7c:	cmp	r3, #19
   17e80:	bls	17df4 <__assert_fail@plt+0x67f0>
   17e84:	cmp	fp, #38	; 0x26
   17e88:	cmpne	fp, #95	; 0x5f
   17e8c:	strne	fp, [sl]
   17e90:	bne	17de4 <__assert_fail@plt+0x67e0>
   17e94:	b	17e04 <__assert_fail@plt+0x6800>
   17e98:	mov	r1, r8
   17e9c:	mov	r0, r5
   17ea0:	bl	1834c <__assert_fail@plt+0x6d48>
   17ea4:	cmn	r0, #1
   17ea8:	mov	r6, r0
   17eac:	beq	17ed8 <__assert_fail@plt+0x68d4>
   17eb0:	mov	r0, r7
   17eb4:	bl	197d0 <__assert_fail@plt+0x81cc>
   17eb8:	cmp	r0, #0
   17ebc:	bne	17ecc <__assert_fail@plt+0x68c8>
   17ec0:	mov	r0, r7
   17ec4:	bl	197ec <__assert_fail@plt+0x81e8>
   17ec8:	b	17de4 <__assert_fail@plt+0x67e0>
   17ecc:	bl	11484 <__errno_location@plt>
   17ed0:	ldr	r0, [r0]
   17ed4:	bl	196f4 <__assert_fail@plt+0x80f0>
   17ed8:	bl	11484 <__errno_location@plt>
   17edc:	mov	r5, r0
   17ee0:	mov	r0, r7
   17ee4:	ldr	r4, [r5]
   17ee8:	bl	197d0 <__assert_fail@plt+0x81cc>
   17eec:	cmp	r0, #0
   17ef0:	bne	17ecc <__assert_fail@plt+0x68c8>
   17ef4:	mov	r0, r7
   17ef8:	bl	197ec <__assert_fail@plt+0x81e8>
   17efc:	cmp	r4, #0
   17f00:	strne	r4, [r5]
   17f04:	b	17de4 <__assert_fail@plt+0x67e0>
   17f08:	mov	r0, r7
   17f0c:	bl	197ec <__assert_fail@plt+0x81e8>
   17f10:	bl	11484 <__errno_location@plt>
   17f14:	mov	r3, #9
   17f18:	mvn	r6, #0
   17f1c:	str	r3, [r0]
   17f20:	b	17de4 <__assert_fail@plt+0x67e0>
   17f24:	bl	11484 <__errno_location@plt>
   17f28:	ldr	r0, [r0]
   17f2c:	bl	196b8 <__assert_fail@plt+0x80b4>
   17f30:	andeq	r1, r8, r3
   17f34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f38:	cmn	r0, #100	; 0x64
   17f3c:	sub	sp, sp, #4032	; 0xfc0
   17f40:	sub	sp, sp, #4
   17f44:	mov	r5, r1
   17f48:	mov	r8, r2
   17f4c:	beq	18020 <__assert_fail@plt+0x6a1c>
   17f50:	ldrb	r3, [r1]
   17f54:	cmp	r3, #47	; 0x2f
   17f58:	beq	18020 <__assert_fail@plt+0x6a1c>
   17f5c:	mov	r4, r0
   17f60:	mov	r2, r1
   17f64:	mov	r0, sp
   17f68:	mov	r1, r4
   17f6c:	bl	18fb0 <__assert_fail@plt+0x79ac>
   17f70:	mov	r7, sp
   17f74:	subs	r9, r0, #0
   17f78:	beq	17fcc <__assert_fail@plt+0x69c8>
   17f7c:	mov	r1, r8
   17f80:	bl	114e4 <setfilecon@plt>
   17f84:	mov	r6, r0
   17f88:	bl	11484 <__errno_location@plt>
   17f8c:	cmp	r9, r7
   17f90:	mov	sl, r0
   17f94:	ldr	fp, [r0]
   17f98:	beq	17fa4 <__assert_fail@plt+0x69a0>
   17f9c:	mov	r0, r9
   17fa0:	bl	19538 <__assert_fail@plt+0x7f34>
   17fa4:	cmn	r6, #1
   17fa8:	beq	18040 <__assert_fail@plt+0x6a3c>
   17fac:	mov	r0, r6
   17fb0:	add	sp, sp, #4032	; 0xfc0
   17fb4:	add	sp, sp, #4
   17fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fbc:	ldr	r2, [pc, #308]	; 180f8 <__assert_fail@plt+0x6af4>
   17fc0:	mvn	r3, r2, lsr r3
   17fc4:	tst	r3, #1
   17fc8:	bne	1804c <__assert_fail@plt+0x6a48>
   17fcc:	mov	r0, r7
   17fd0:	bl	1977c <__assert_fail@plt+0x8178>
   17fd4:	cmp	r0, #0
   17fd8:	bne	180ec <__assert_fail@plt+0x6ae8>
   17fdc:	cmp	r4, #0
   17fe0:	blt	17ff0 <__assert_fail@plt+0x69ec>
   17fe4:	ldr	r3, [sp]
   17fe8:	cmp	r4, r3
   17fec:	beq	180d0 <__assert_fail@plt+0x6acc>
   17ff0:	mov	r0, r4
   17ff4:	bl	11568 <fchdir@plt>
   17ff8:	cmp	r0, #0
   17ffc:	beq	18060 <__assert_fail@plt+0x6a5c>
   18000:	bl	11484 <__errno_location@plt>
   18004:	mvn	r6, #0
   18008:	mov	r4, r0
   1800c:	mov	r0, r7
   18010:	ldr	r5, [r4]
   18014:	bl	197ec <__assert_fail@plt+0x81e8>
   18018:	str	r5, [r4]
   1801c:	b	17fac <__assert_fail@plt+0x69a8>
   18020:	mov	r1, r8
   18024:	mov	r0, r5
   18028:	bl	114e4 <setfilecon@plt>
   1802c:	mov	r6, r0
   18030:	mov	r0, r6
   18034:	add	sp, sp, #4032	; 0xfc0
   18038:	add	sp, sp, #4
   1803c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18040:	sub	r3, fp, #1
   18044:	cmp	r3, #19
   18048:	bls	17fbc <__assert_fail@plt+0x69b8>
   1804c:	cmp	fp, #38	; 0x26
   18050:	cmpne	fp, #95	; 0x5f
   18054:	strne	fp, [sl]
   18058:	bne	17fac <__assert_fail@plt+0x69a8>
   1805c:	b	17fcc <__assert_fail@plt+0x69c8>
   18060:	mov	r1, r8
   18064:	mov	r0, r5
   18068:	bl	114e4 <setfilecon@plt>
   1806c:	cmn	r0, #1
   18070:	mov	r6, r0
   18074:	beq	180a0 <__assert_fail@plt+0x6a9c>
   18078:	mov	r0, r7
   1807c:	bl	197d0 <__assert_fail@plt+0x81cc>
   18080:	cmp	r0, #0
   18084:	bne	18094 <__assert_fail@plt+0x6a90>
   18088:	mov	r0, r7
   1808c:	bl	197ec <__assert_fail@plt+0x81e8>
   18090:	b	17fac <__assert_fail@plt+0x69a8>
   18094:	bl	11484 <__errno_location@plt>
   18098:	ldr	r0, [r0]
   1809c:	bl	196f4 <__assert_fail@plt+0x80f0>
   180a0:	bl	11484 <__errno_location@plt>
   180a4:	mov	r5, r0
   180a8:	mov	r0, r7
   180ac:	ldr	r4, [r5]
   180b0:	bl	197d0 <__assert_fail@plt+0x81cc>
   180b4:	cmp	r0, #0
   180b8:	bne	18094 <__assert_fail@plt+0x6a90>
   180bc:	mov	r0, r7
   180c0:	bl	197ec <__assert_fail@plt+0x81e8>
   180c4:	cmp	r4, #0
   180c8:	strne	r4, [r5]
   180cc:	b	17fac <__assert_fail@plt+0x69a8>
   180d0:	mov	r0, r7
   180d4:	bl	197ec <__assert_fail@plt+0x81e8>
   180d8:	bl	11484 <__errno_location@plt>
   180dc:	mov	r3, #9
   180e0:	mvn	r6, #0
   180e4:	str	r3, [r0]
   180e8:	b	17fac <__assert_fail@plt+0x69a8>
   180ec:	bl	11484 <__errno_location@plt>
   180f0:	ldr	r0, [r0]
   180f4:	bl	196b8 <__assert_fail@plt+0x80b4>
   180f8:	andeq	r1, r8, r3
   180fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18100:	cmn	r0, #100	; 0x64
   18104:	sub	sp, sp, #4032	; 0xfc0
   18108:	sub	sp, sp, #4
   1810c:	mov	r5, r1
   18110:	mov	r8, r2
   18114:	beq	181e8 <__assert_fail@plt+0x6be4>
   18118:	ldrb	r3, [r1]
   1811c:	cmp	r3, #47	; 0x2f
   18120:	beq	181e8 <__assert_fail@plt+0x6be4>
   18124:	mov	r4, r0
   18128:	mov	r2, r1
   1812c:	mov	r0, sp
   18130:	mov	r1, r4
   18134:	bl	18fb0 <__assert_fail@plt+0x79ac>
   18138:	mov	r7, sp
   1813c:	subs	r9, r0, #0
   18140:	beq	18194 <__assert_fail@plt+0x6b90>
   18144:	mov	r1, r8
   18148:	bl	11280 <lsetfilecon@plt>
   1814c:	mov	r6, r0
   18150:	bl	11484 <__errno_location@plt>
   18154:	cmp	r9, r7
   18158:	mov	sl, r0
   1815c:	ldr	fp, [r0]
   18160:	beq	1816c <__assert_fail@plt+0x6b68>
   18164:	mov	r0, r9
   18168:	bl	19538 <__assert_fail@plt+0x7f34>
   1816c:	cmn	r6, #1
   18170:	beq	18208 <__assert_fail@plt+0x6c04>
   18174:	mov	r0, r6
   18178:	add	sp, sp, #4032	; 0xfc0
   1817c:	add	sp, sp, #4
   18180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18184:	ldr	r2, [pc, #308]	; 182c0 <__assert_fail@plt+0x6cbc>
   18188:	mvn	r3, r2, lsr r3
   1818c:	tst	r3, #1
   18190:	bne	18214 <__assert_fail@plt+0x6c10>
   18194:	mov	r0, r7
   18198:	bl	1977c <__assert_fail@plt+0x8178>
   1819c:	cmp	r0, #0
   181a0:	bne	182b4 <__assert_fail@plt+0x6cb0>
   181a4:	cmp	r4, #0
   181a8:	blt	181b8 <__assert_fail@plt+0x6bb4>
   181ac:	ldr	r3, [sp]
   181b0:	cmp	r4, r3
   181b4:	beq	18298 <__assert_fail@plt+0x6c94>
   181b8:	mov	r0, r4
   181bc:	bl	11568 <fchdir@plt>
   181c0:	cmp	r0, #0
   181c4:	beq	18228 <__assert_fail@plt+0x6c24>
   181c8:	bl	11484 <__errno_location@plt>
   181cc:	mvn	r6, #0
   181d0:	mov	r4, r0
   181d4:	mov	r0, r7
   181d8:	ldr	r5, [r4]
   181dc:	bl	197ec <__assert_fail@plt+0x81e8>
   181e0:	str	r5, [r4]
   181e4:	b	18174 <__assert_fail@plt+0x6b70>
   181e8:	mov	r1, r8
   181ec:	mov	r0, r5
   181f0:	bl	11280 <lsetfilecon@plt>
   181f4:	mov	r6, r0
   181f8:	mov	r0, r6
   181fc:	add	sp, sp, #4032	; 0xfc0
   18200:	add	sp, sp, #4
   18204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18208:	sub	r3, fp, #1
   1820c:	cmp	r3, #19
   18210:	bls	18184 <__assert_fail@plt+0x6b80>
   18214:	cmp	fp, #38	; 0x26
   18218:	cmpne	fp, #95	; 0x5f
   1821c:	strne	fp, [sl]
   18220:	bne	18174 <__assert_fail@plt+0x6b70>
   18224:	b	18194 <__assert_fail@plt+0x6b90>
   18228:	mov	r1, r8
   1822c:	mov	r0, r5
   18230:	bl	11280 <lsetfilecon@plt>
   18234:	cmn	r0, #1
   18238:	mov	r6, r0
   1823c:	beq	18268 <__assert_fail@plt+0x6c64>
   18240:	mov	r0, r7
   18244:	bl	197d0 <__assert_fail@plt+0x81cc>
   18248:	cmp	r0, #0
   1824c:	bne	1825c <__assert_fail@plt+0x6c58>
   18250:	mov	r0, r7
   18254:	bl	197ec <__assert_fail@plt+0x81e8>
   18258:	b	18174 <__assert_fail@plt+0x6b70>
   1825c:	bl	11484 <__errno_location@plt>
   18260:	ldr	r0, [r0]
   18264:	bl	196f4 <__assert_fail@plt+0x80f0>
   18268:	bl	11484 <__errno_location@plt>
   1826c:	mov	r5, r0
   18270:	mov	r0, r7
   18274:	ldr	r4, [r5]
   18278:	bl	197d0 <__assert_fail@plt+0x81cc>
   1827c:	cmp	r0, #0
   18280:	bne	1825c <__assert_fail@plt+0x6c58>
   18284:	mov	r0, r7
   18288:	bl	197ec <__assert_fail@plt+0x81e8>
   1828c:	cmp	r4, #0
   18290:	strne	r4, [r5]
   18294:	b	18174 <__assert_fail@plt+0x6b70>
   18298:	mov	r0, r7
   1829c:	bl	197ec <__assert_fail@plt+0x81e8>
   182a0:	bl	11484 <__errno_location@plt>
   182a4:	mov	r3, #9
   182a8:	mvn	r6, #0
   182ac:	str	r3, [r0]
   182b0:	b	18174 <__assert_fail@plt+0x6b70>
   182b4:	bl	11484 <__errno_location@plt>
   182b8:	ldr	r0, [r0]
   182bc:	bl	196b8 <__assert_fail@plt+0x80b4>
   182c0:	andeq	r1, r8, r3
   182c4:	push	{r4, r5, r6, r7, r8, lr}
   182c8:	subs	r4, r0, #0
   182cc:	beq	1831c <__assert_fail@plt+0x6d18>
   182d0:	cmp	r4, #10
   182d4:	beq	182e0 <__assert_fail@plt+0x6cdc>
   182d8:	mov	r0, r4
   182dc:	pop	{r4, r5, r6, r7, r8, pc}
   182e0:	ldr	r6, [r1]
   182e4:	mov	r5, r1
   182e8:	mov	r0, r6
   182ec:	ldr	r1, [pc, #60]	; 18330 <__assert_fail@plt+0x6d2c>
   182f0:	bl	11268 <strcmp@plt>
   182f4:	subs	r7, r0, #0
   182f8:	bne	182d8 <__assert_fail@plt+0x6cd4>
   182fc:	mov	r0, r6
   18300:	bl	11580 <freecon@plt>
   18304:	str	r7, [r5]
   18308:	bl	11484 <__errno_location@plt>
   1830c:	mov	r3, #61	; 0x3d
   18310:	mvn	r4, #0
   18314:	str	r3, [r0]
   18318:	b	182d8 <__assert_fail@plt+0x6cd4>
   1831c:	bl	11484 <__errno_location@plt>
   18320:	mov	r3, #95	; 0x5f
   18324:	mvn	r4, #0
   18328:	str	r3, [r0]
   1832c:	b	182d8 <__assert_fail@plt+0x6cd4>
   18330:	muleq	r1, r8, r2
   18334:	push	{r4, lr}
   18338:	mov	r4, r1
   1833c:	bl	11454 <getfilecon@plt>
   18340:	mov	r1, r4
   18344:	pop	{r4, lr}
   18348:	b	182c4 <__assert_fail@plt+0x6cc0>
   1834c:	push	{r4, lr}
   18350:	mov	r4, r1
   18354:	bl	113d0 <lgetfilecon@plt>
   18358:	mov	r1, r4
   1835c:	pop	{r4, lr}
   18360:	b	182c4 <__assert_fail@plt+0x6cc0>
   18364:	push	{r4, lr}
   18368:	mov	r4, r1
   1836c:	bl	1131c <fgetfilecon@plt>
   18370:	mov	r1, r4
   18374:	pop	{r4, lr}
   18378:	b	182c4 <__assert_fail@plt+0x6cc0>
   1837c:	cmp	r0, #2
   18380:	push	{r4, r5, r6, r7, r8, lr}
   18384:	mov	r4, r0
   18388:	bhi	183b0 <__assert_fail@plt+0x6dac>
   1838c:	bl	19810 <__assert_fail@plt+0x820c>
   18390:	mov	r7, r0
   18394:	bl	11484 <__errno_location@plt>
   18398:	mov	r5, r0
   1839c:	mov	r0, r4
   183a0:	ldr	r6, [r5]
   183a4:	mov	r4, r7
   183a8:	bl	115d4 <close@plt>
   183ac:	str	r6, [r5]
   183b0:	mov	r0, r4
   183b4:	pop	{r4, r5, r6, r7, r8, pc}
   183b8:	push	{r4, r5, r6, lr}
   183bc:	sub	sp, sp, #32
   183c0:	cmp	r1, #0
   183c4:	mov	r4, r0
   183c8:	ldr	r5, [sp, #48]	; 0x30
   183cc:	ldr	r6, [sp, #52]	; 0x34
   183d0:	beq	186e8 <__assert_fail@plt+0x70e4>
   183d4:	stm	sp, {r2, r3}
   183d8:	mov	r3, r1
   183dc:	ldr	r2, [pc, #808]	; 1870c <__assert_fail@plt+0x7108>
   183e0:	mov	r1, #1
   183e4:	bl	114cc <__fprintf_chk@plt>
   183e8:	mov	r2, #5
   183ec:	ldr	r1, [pc, #796]	; 18710 <__assert_fail@plt+0x710c>
   183f0:	mov	r0, #0
   183f4:	bl	112f8 <dcgettext@plt>
   183f8:	ldr	r3, [pc, #788]	; 18714 <__assert_fail@plt+0x7110>
   183fc:	ldr	r2, [pc, #788]	; 18718 <__assert_fail@plt+0x7114>
   18400:	str	r3, [sp]
   18404:	mov	r1, #1
   18408:	mov	r3, r0
   1840c:	mov	r0, r4
   18410:	bl	114cc <__fprintf_chk@plt>
   18414:	mov	r1, r4
   18418:	mov	r0, #10
   1841c:	bl	112e0 <fputc_unlocked@plt>
   18420:	mov	r2, #5
   18424:	ldr	r1, [pc, #752]	; 1871c <__assert_fail@plt+0x7118>
   18428:	mov	r0, #0
   1842c:	bl	112f8 <dcgettext@plt>
   18430:	mov	r1, #1
   18434:	ldr	r3, [pc, #740]	; 18720 <__assert_fail@plt+0x711c>
   18438:	mov	r2, r0
   1843c:	mov	r0, r4
   18440:	bl	114cc <__fprintf_chk@plt>
   18444:	mov	r1, r4
   18448:	mov	r0, #10
   1844c:	bl	112e0 <fputc_unlocked@plt>
   18450:	cmp	r6, #9
   18454:	ldrls	pc, [pc, r6, lsl #2]
   18458:	b	18700 <__assert_fail@plt+0x70fc>
   1845c:	andeq	r8, r1, r0, ror #9
   18460:	andeq	r8, r1, r8, ror #9
   18464:	andeq	r8, r1, r4, lsl r5
   18468:	andeq	r8, r1, r8, asr #10
   1846c:	andeq	r8, r1, r4, lsl #11
   18470:	andeq	r8, r1, r0, asr #11
   18474:	strdeq	r8, [r1], -ip
   18478:	andeq	r8, r1, r0, asr #12
   1847c:	muleq	r1, r0, r6
   18480:	andeq	r8, r1, r4, lsl #9
   18484:	ldr	r1, [pc, #664]	; 18724 <__assert_fail@plt+0x7120>
   18488:	mov	r2, #5
   1848c:	mov	r0, #0
   18490:	bl	112f8 <dcgettext@plt>
   18494:	ldr	ip, [r5, #32]
   18498:	ldr	r1, [r5, #28]
   1849c:	ldr	r2, [r5, #24]
   184a0:	ldr	r3, [r5]
   184a4:	ldr	r6, [r5, #20]
   184a8:	str	ip, [sp, #28]
   184ac:	ldr	lr, [r5, #16]
   184b0:	str	r1, [sp, #24]
   184b4:	ldr	ip, [r5, #12]
   184b8:	str	r2, [sp, #20]
   184bc:	ldr	r1, [r5, #8]
   184c0:	ldr	r2, [r5, #4]
   184c4:	str	r6, [sp, #16]
   184c8:	stmib	sp, {r1, ip, lr}
   184cc:	mov	r1, #1
   184d0:	str	r2, [sp]
   184d4:	mov	r2, r0
   184d8:	mov	r0, r4
   184dc:	bl	114cc <__fprintf_chk@plt>
   184e0:	add	sp, sp, #32
   184e4:	pop	{r4, r5, r6, pc}
   184e8:	mov	r2, #5
   184ec:	ldr	r1, [pc, #564]	; 18728 <__assert_fail@plt+0x7124>
   184f0:	mov	r0, #0
   184f4:	bl	112f8 <dcgettext@plt>
   184f8:	ldr	r3, [r5]
   184fc:	mov	r1, #1
   18500:	mov	r2, r0
   18504:	mov	r0, r4
   18508:	add	sp, sp, #32
   1850c:	pop	{r4, r5, r6, lr}
   18510:	b	114cc <__fprintf_chk@plt>
   18514:	mov	r2, #5
   18518:	ldr	r1, [pc, #524]	; 1872c <__assert_fail@plt+0x7128>
   1851c:	mov	r0, #0
   18520:	bl	112f8 <dcgettext@plt>
   18524:	ldr	r2, [r5, #4]
   18528:	ldr	r3, [r5]
   1852c:	mov	r1, #1
   18530:	str	r2, [sp, #48]	; 0x30
   18534:	mov	r2, r0
   18538:	mov	r0, r4
   1853c:	add	sp, sp, #32
   18540:	pop	{r4, r5, r6, lr}
   18544:	b	114cc <__fprintf_chk@plt>
   18548:	mov	r2, #5
   1854c:	ldr	r1, [pc, #476]	; 18730 <__assert_fail@plt+0x712c>
   18550:	mov	r0, #0
   18554:	bl	112f8 <dcgettext@plt>
   18558:	ldr	r1, [r5, #8]
   1855c:	ldr	r2, [r5, #4]
   18560:	ldr	r3, [r5]
   18564:	str	r1, [sp, #52]	; 0x34
   18568:	str	r2, [sp, #48]	; 0x30
   1856c:	mov	r1, #1
   18570:	mov	r2, r0
   18574:	mov	r0, r4
   18578:	add	sp, sp, #32
   1857c:	pop	{r4, r5, r6, lr}
   18580:	b	114cc <__fprintf_chk@plt>
   18584:	mov	r2, #5
   18588:	ldr	r1, [pc, #420]	; 18734 <__assert_fail@plt+0x7130>
   1858c:	mov	r0, #0
   18590:	bl	112f8 <dcgettext@plt>
   18594:	ldr	r1, [r5, #8]
   18598:	ldr	ip, [r5, #12]
   1859c:	ldr	r2, [r5, #4]
   185a0:	ldr	r3, [r5]
   185a4:	stmib	sp, {r1, ip}
   185a8:	str	r2, [sp]
   185ac:	mov	r1, #1
   185b0:	mov	r2, r0
   185b4:	mov	r0, r4
   185b8:	bl	114cc <__fprintf_chk@plt>
   185bc:	b	184e0 <__assert_fail@plt+0x6edc>
   185c0:	mov	r2, #5
   185c4:	ldr	r1, [pc, #364]	; 18738 <__assert_fail@plt+0x7134>
   185c8:	mov	r0, #0
   185cc:	bl	112f8 <dcgettext@plt>
   185d0:	add	r1, r5, #8
   185d4:	ldr	r2, [r5, #4]
   185d8:	ldm	r1, {r1, ip, lr}
   185dc:	ldr	r3, [r5]
   185e0:	str	r2, [sp]
   185e4:	stmib	sp, {r1, ip, lr}
   185e8:	mov	r1, #1
   185ec:	mov	r2, r0
   185f0:	mov	r0, r4
   185f4:	bl	114cc <__fprintf_chk@plt>
   185f8:	b	184e0 <__assert_fail@plt+0x6edc>
   185fc:	mov	r2, #5
   18600:	ldr	r1, [pc, #308]	; 1873c <__assert_fail@plt+0x7138>
   18604:	mov	r0, #0
   18608:	bl	112f8 <dcgettext@plt>
   1860c:	add	r1, r5, #8
   18610:	ldr	r2, [r5, #4]
   18614:	ldm	r1, {r1, ip, lr}
   18618:	ldr	r6, [r5, #20]
   1861c:	ldr	r3, [r5]
   18620:	stmib	sp, {r1, ip, lr}
   18624:	mov	r1, #1
   18628:	str	r2, [sp]
   1862c:	str	r6, [sp, #16]
   18630:	mov	r2, r0
   18634:	mov	r0, r4
   18638:	bl	114cc <__fprintf_chk@plt>
   1863c:	b	184e0 <__assert_fail@plt+0x6edc>
   18640:	mov	r2, #5
   18644:	ldr	r1, [pc, #244]	; 18740 <__assert_fail@plt+0x713c>
   18648:	mov	r0, #0
   1864c:	bl	112f8 <dcgettext@plt>
   18650:	ldr	r2, [r5, #24]
   18654:	ldr	r3, [r5]
   18658:	ldr	r6, [r5, #20]
   1865c:	ldr	lr, [r5, #16]
   18660:	ldr	ip, [r5, #12]
   18664:	str	r2, [sp, #20]
   18668:	ldr	r1, [r5, #8]
   1866c:	ldr	r2, [r5, #4]
   18670:	str	r6, [sp, #16]
   18674:	stmib	sp, {r1, ip, lr}
   18678:	mov	r1, #1
   1867c:	str	r2, [sp]
   18680:	mov	r2, r0
   18684:	mov	r0, r4
   18688:	bl	114cc <__fprintf_chk@plt>
   1868c:	b	184e0 <__assert_fail@plt+0x6edc>
   18690:	mov	r2, #5
   18694:	ldr	r1, [pc, #168]	; 18744 <__assert_fail@plt+0x7140>
   18698:	mov	r0, #0
   1869c:	bl	112f8 <dcgettext@plt>
   186a0:	ldr	r1, [r5, #28]
   186a4:	ldr	r2, [r5, #24]
   186a8:	ldr	r3, [r5]
   186ac:	ldr	r6, [r5, #20]
   186b0:	ldr	lr, [r5, #16]
   186b4:	str	r1, [sp, #24]
   186b8:	ldr	ip, [r5, #12]
   186bc:	str	r2, [sp, #20]
   186c0:	ldr	r1, [r5, #8]
   186c4:	ldr	r2, [r5, #4]
   186c8:	str	r6, [sp, #16]
   186cc:	stmib	sp, {r1, ip, lr}
   186d0:	mov	r1, #1
   186d4:	str	r2, [sp]
   186d8:	mov	r2, r0
   186dc:	mov	r0, r4
   186e0:	bl	114cc <__fprintf_chk@plt>
   186e4:	b	184e0 <__assert_fail@plt+0x6edc>
   186e8:	str	r3, [sp]
   186ec:	mov	r1, #1
   186f0:	mov	r3, r2
   186f4:	ldr	r2, [pc, #76]	; 18748 <__assert_fail@plt+0x7144>
   186f8:	bl	114cc <__fprintf_chk@plt>
   186fc:	b	183e8 <__assert_fail@plt+0x6de4>
   18700:	mov	r2, #5
   18704:	ldr	r1, [pc, #64]	; 1874c <__assert_fail@plt+0x7148>
   18708:	b	1848c <__assert_fail@plt+0x6e88>
   1870c:	andeq	fp, r1, r4, lsr #5
   18710:			; <UNDEFINED> instruction: 0x0001b2b8
   18714:	andeq	r0, r0, r6, ror #15
   18718:	muleq	r1, r0, r5
   1871c:			; <UNDEFINED> instruction: 0x0001b2bc
   18720:	andeq	fp, r1, r8, ror #6
   18724:	muleq	r1, r8, r4
   18728:	andeq	fp, r1, ip, lsl #7
   1872c:	muleq	r1, ip, r3
   18730:			; <UNDEFINED> instruction: 0x0001b3b4
   18734:	ldrdeq	fp, [r1], -r0
   18738:	strdeq	fp, [r1], -r0
   1873c:	andeq	fp, r1, r4, lsl r4
   18740:	andeq	fp, r1, ip, lsr r4
   18744:	andeq	fp, r1, r8, ror #8
   18748:			; <UNDEFINED> instruction: 0x0001b2b0
   1874c:	andeq	fp, r1, ip, asr #9
   18750:	push	{r4, r5, lr}
   18754:	sub	sp, sp, #12
   18758:	ldr	r5, [sp, #24]
   1875c:	ldr	ip, [r5]
   18760:	cmp	ip, #0
   18764:	beq	18780 <__assert_fail@plt+0x717c>
   18768:	mov	lr, r5
   1876c:	mov	ip, #0
   18770:	ldr	r4, [lr, #4]!
   18774:	add	ip, ip, #1
   18778:	cmp	r4, #0
   1877c:	bne	18770 <__assert_fail@plt+0x716c>
   18780:	stm	sp, {r5, ip}
   18784:	bl	183b8 <__assert_fail@plt+0x6db4>
   18788:	add	sp, sp, #12
   1878c:	pop	{r4, r5, pc}
   18790:	push	{r4, r5, lr}
   18794:	sub	sp, sp, #52	; 0x34
   18798:	add	r5, sp, #4
   1879c:	ldr	r4, [sp, #64]	; 0x40
   187a0:	mov	ip, #0
   187a4:	sub	r4, r4, #4
   187a8:	ldr	lr, [r4, #4]!
   187ac:	cmp	lr, #0
   187b0:	str	lr, [r5, #4]!
   187b4:	beq	187c4 <__assert_fail@plt+0x71c0>
   187b8:	add	ip, ip, #1
   187bc:	cmp	ip, #10
   187c0:	bne	187a8 <__assert_fail@plt+0x71a4>
   187c4:	add	lr, sp, #8
   187c8:	str	ip, [sp, #4]
   187cc:	str	lr, [sp]
   187d0:	bl	183b8 <__assert_fail@plt+0x6db4>
   187d4:	add	sp, sp, #52	; 0x34
   187d8:	pop	{r4, r5, pc}
   187dc:	push	{r3}		; (str r3, [sp, #-4]!)
   187e0:	push	{r4, lr}
   187e4:	sub	sp, sp, #60	; 0x3c
   187e8:	add	lr, sp, #56	; 0x38
   187ec:	add	r3, sp, #72	; 0x48
   187f0:	str	r3, [lr, #-44]!	; 0xffffffd4
   187f4:	add	r4, sp, #68	; 0x44
   187f8:	mov	r3, #0
   187fc:	ldr	ip, [r4, #4]!
   18800:	cmp	ip, #0
   18804:	str	ip, [lr, #4]!
   18808:	beq	18818 <__assert_fail@plt+0x7214>
   1880c:	add	r3, r3, #1
   18810:	cmp	r3, #10
   18814:	bne	187fc <__assert_fail@plt+0x71f8>
   18818:	add	ip, sp, #16
   1881c:	str	r3, [sp, #4]
   18820:	str	ip, [sp]
   18824:	ldr	r3, [sp, #68]	; 0x44
   18828:	bl	183b8 <__assert_fail@plt+0x6db4>
   1882c:	add	sp, sp, #60	; 0x3c
   18830:	pop	{r4, lr}
   18834:	add	sp, sp, #4
   18838:	bx	lr
   1883c:	ldr	r3, [pc, #116]	; 188b8 <__assert_fail@plt+0x72b4>
   18840:	push	{r4, lr}
   18844:	mov	r0, #10
   18848:	ldr	r1, [r3]
   1884c:	bl	112e0 <fputc_unlocked@plt>
   18850:	mov	r2, #5
   18854:	ldr	r1, [pc, #96]	; 188bc <__assert_fail@plt+0x72b8>
   18858:	mov	r0, #0
   1885c:	bl	112f8 <dcgettext@plt>
   18860:	ldr	r2, [pc, #88]	; 188c0 <__assert_fail@plt+0x72bc>
   18864:	mov	r1, r0
   18868:	mov	r0, #1
   1886c:	bl	114b4 <__printf_chk@plt>
   18870:	mov	r2, #5
   18874:	ldr	r1, [pc, #72]	; 188c4 <__assert_fail@plt+0x72c0>
   18878:	mov	r0, #0
   1887c:	bl	112f8 <dcgettext@plt>
   18880:	ldr	r3, [pc, #64]	; 188c8 <__assert_fail@plt+0x72c4>
   18884:	ldr	r2, [pc, #64]	; 188cc <__assert_fail@plt+0x72c8>
   18888:	mov	r1, r0
   1888c:	mov	r0, #1
   18890:	bl	114b4 <__printf_chk@plt>
   18894:	mov	r2, #5
   18898:	ldr	r1, [pc, #48]	; 188d0 <__assert_fail@plt+0x72cc>
   1889c:	mov	r0, #0
   188a0:	bl	112f8 <dcgettext@plt>
   188a4:	ldr	r2, [pc, #40]	; 188d4 <__assert_fail@plt+0x72d0>
   188a8:	pop	{r4, lr}
   188ac:	mov	r1, r0
   188b0:	mov	r0, #1
   188b4:	b	114b4 <__printf_chk@plt>
   188b8:	andeq	ip, r2, r4, asr #3
   188bc:	andeq	fp, r1, r8, lsl #10
   188c0:	andeq	fp, r1, ip, lsl r5
   188c4:	andeq	fp, r1, r4, lsr r5
   188c8:	andeq	sl, r1, r8, lsl #22
   188cc:	andeq	sl, r1, r0, lsr fp
   188d0:	andeq	fp, r1, r8, asr #10
   188d4:	andeq	fp, r1, r0, ror r5
   188d8:	push	{r4, lr}
   188dc:	bl	18f28 <__assert_fail@plt+0x7924>
   188e0:	cmp	r0, #0
   188e4:	popne	{r4, pc}
   188e8:	bl	18e20 <__assert_fail@plt+0x781c>
   188ec:	push	{r4, lr}
   188f0:	bl	18f28 <__assert_fail@plt+0x7924>
   188f4:	cmp	r0, #0
   188f8:	popne	{r4, pc}
   188fc:	bl	18e20 <__assert_fail@plt+0x781c>
   18900:	push	{r4, lr}
   18904:	bl	18f28 <__assert_fail@plt+0x7924>
   18908:	cmp	r0, #0
   1890c:	popne	{r4, pc}
   18910:	bl	18e20 <__assert_fail@plt+0x781c>
   18914:	push	{r4, r5, r6, lr}
   18918:	mov	r5, r0
   1891c:	mov	r4, r1
   18920:	bl	18f54 <__assert_fail@plt+0x7950>
   18924:	cmp	r0, #0
   18928:	popne	{r4, r5, r6, pc}
   1892c:	adds	r4, r4, #0
   18930:	movne	r4, #1
   18934:	cmp	r5, #0
   18938:	orreq	r4, r4, #1
   1893c:	cmp	r4, #0
   18940:	popeq	{r4, r5, r6, pc}
   18944:	bl	18e20 <__assert_fail@plt+0x781c>
   18948:	push	{r4, lr}
   1894c:	cmp	r1, #0
   18950:	orreq	r1, r1, #1
   18954:	bl	18f54 <__assert_fail@plt+0x7950>
   18958:	cmp	r0, #0
   1895c:	popne	{r4, pc}
   18960:	bl	18e20 <__assert_fail@plt+0x781c>
   18964:	push	{r4, r5, r6, lr}
   18968:	mov	r6, r0
   1896c:	mov	r5, r1
   18970:	mov	r4, r2
   18974:	bl	19730 <__assert_fail@plt+0x812c>
   18978:	cmp	r0, #0
   1897c:	popne	{r4, r5, r6, pc}
   18980:	cmp	r6, #0
   18984:	beq	18994 <__assert_fail@plt+0x7390>
   18988:	cmp	r5, #0
   1898c:	cmpne	r4, #0
   18990:	popeq	{r4, r5, r6, pc}
   18994:	bl	18e20 <__assert_fail@plt+0x781c>
   18998:	b	18964 <__assert_fail@plt+0x7360>
   1899c:	cmp	r2, #0
   189a0:	cmpne	r1, #0
   189a4:	moveq	r2, #1
   189a8:	moveq	r1, r2
   189ac:	push	{r4, lr}
   189b0:	bl	19730 <__assert_fail@plt+0x812c>
   189b4:	cmp	r0, #0
   189b8:	popne	{r4, pc}
   189bc:	bl	18e20 <__assert_fail@plt+0x781c>
   189c0:	mov	r2, r1
   189c4:	mov	r1, r0
   189c8:	mov	r0, #0
   189cc:	b	18964 <__assert_fail@plt+0x7360>
   189d0:	mov	r2, r1
   189d4:	mov	r1, r0
   189d8:	mov	r0, #0
   189dc:	b	1899c <__assert_fail@plt+0x7398>
   189e0:	push	{r4, r5, r6, lr}
   189e4:	subs	r6, r0, #0
   189e8:	sub	sp, sp, #8
   189ec:	mov	r5, r1
   189f0:	ldr	r4, [r1]
   189f4:	beq	18a30 <__assert_fail@plt+0x742c>
   189f8:	lsr	r1, r4, #1
   189fc:	add	r3, r1, #1
   18a00:	mvn	r3, r3
   18a04:	cmp	r4, r3
   18a08:	bhi	18a2c <__assert_fail@plt+0x7428>
   18a0c:	add	r4, r4, #1
   18a10:	add	r4, r4, r1
   18a14:	mov	r0, r6
   18a18:	mov	r1, r4
   18a1c:	bl	18964 <__assert_fail@plt+0x7360>
   18a20:	str	r4, [r5]
   18a24:	add	sp, sp, #8
   18a28:	pop	{r4, r5, r6, pc}
   18a2c:	bl	18e20 <__assert_fail@plt+0x781c>
   18a30:	cmp	r4, #0
   18a34:	bne	18a14 <__assert_fail@plt+0x7410>
   18a38:	mov	r1, r2
   18a3c:	mov	r0, #64	; 0x40
   18a40:	str	r2, [sp, #4]
   18a44:	bl	19c20 <__assert_fail@plt+0x861c>
   18a48:	ldr	r2, [sp, #4]
   18a4c:	cmp	r0, #0
   18a50:	movne	r4, r0
   18a54:	addeq	r4, r0, #1
   18a58:	b	18a14 <__assert_fail@plt+0x7410>
   18a5c:	mov	r2, #1
   18a60:	b	189e0 <__assert_fail@plt+0x73dc>
   18a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a68:	sub	sp, sp, #12
   18a6c:	ldr	r6, [r1]
   18a70:	mov	sl, r1
   18a74:	mov	r9, r0
   18a78:	asrs	r4, r6, #1
   18a7c:	mov	r5, r2
   18a80:	mov	fp, r3
   18a84:	ldr	r7, [sp, #48]	; 0x30
   18a88:	bmi	18bf4 <__assert_fail@plt+0x75f0>
   18a8c:	mvn	r3, #-2147483648	; 0x80000000
   18a90:	sub	r3, r3, r4
   18a94:	cmp	r6, r3
   18a98:	movle	r3, #0
   18a9c:	movgt	r3, #1
   18aa0:	mvn	r8, fp
   18aa4:	cmp	r3, #0
   18aa8:	addeq	r4, r4, r6
   18aac:	mvnne	r4, #-2147483648	; 0x80000000
   18ab0:	lsr	r8, r8, #31
   18ab4:	cmp	fp, r4
   18ab8:	movge	r3, #0
   18abc:	andlt	r3, r8, #1
   18ac0:	cmp	r3, #0
   18ac4:	beq	18bac <__assert_fail@plt+0x75a8>
   18ac8:	cmp	r7, #0
   18acc:	blt	18c7c <__assert_fail@plt+0x7678>
   18ad0:	bne	18c74 <__assert_fail@plt+0x7670>
   18ad4:	mov	r2, #64	; 0x40
   18ad8:	mov	r1, r7
   18adc:	mov	r0, r2
   18ae0:	str	r2, [sp, #4]
   18ae4:	bl	19e2c <__assert_fail@plt+0x8828>
   18ae8:	ldr	r2, [sp, #4]
   18aec:	mov	r1, r7
   18af0:	mov	r4, r0
   18af4:	mov	r0, r2
   18af8:	bl	1a04c <__assert_fail@plt+0x8a48>
   18afc:	ldr	r2, [sp, #4]
   18b00:	sub	r1, r2, r1
   18b04:	cmp	r9, #0
   18b08:	sub	r3, r4, r6
   18b0c:	streq	r9, [sl]
   18b10:	cmp	r3, r5
   18b14:	bge	18b98 <__assert_fail@plt+0x7594>
   18b18:	cmp	r5, #0
   18b1c:	blt	18c08 <__assert_fail@plt+0x7604>
   18b20:	cmp	r6, #0
   18b24:	blt	18b44 <__assert_fail@plt+0x7540>
   18b28:	mvn	r3, #-2147483648	; 0x80000000
   18b2c:	sub	r3, r3, r5
   18b30:	cmp	r6, r3
   18b34:	movle	r3, #0
   18b38:	movgt	r3, #1
   18b3c:	cmp	r3, #0
   18b40:	bne	18d04 <__assert_fail@plt+0x7700>
   18b44:	add	r5, r6, r5
   18b48:	cmp	fp, r5
   18b4c:	movge	r8, #0
   18b50:	andlt	r8, r8, #1
   18b54:	cmp	r8, #0
   18b58:	mov	r4, r5
   18b5c:	bne	18d04 <__assert_fail@plt+0x7700>
   18b60:	cmp	r7, #0
   18b64:	blt	18c1c <__assert_fail@plt+0x7618>
   18b68:	beq	18b94 <__assert_fail@plt+0x7590>
   18b6c:	cmp	r5, #0
   18b70:	blt	18cc4 <__assert_fail@plt+0x76c0>
   18b74:	mov	r1, r7
   18b78:	mvn	r0, #-2147483648	; 0x80000000
   18b7c:	bl	19e2c <__assert_fail@plt+0x8828>
   18b80:	cmp	r5, r0
   18b84:	movle	r0, #0
   18b88:	movgt	r0, #1
   18b8c:	cmp	r0, #0
   18b90:	bne	18d04 <__assert_fail@plt+0x7700>
   18b94:	mul	r1, r5, r7
   18b98:	mov	r0, r9
   18b9c:	bl	18914 <__assert_fail@plt+0x7310>
   18ba0:	str	r4, [sl]
   18ba4:	add	sp, sp, #12
   18ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bac:	cmp	r7, #0
   18bb0:	blt	18c48 <__assert_fail@plt+0x7644>
   18bb4:	beq	18ad4 <__assert_fail@plt+0x74d0>
   18bb8:	cmp	r4, #0
   18bbc:	blt	18c84 <__assert_fail@plt+0x7680>
   18bc0:	mov	r1, r7
   18bc4:	mvn	r0, #-2147483648	; 0x80000000
   18bc8:	bl	19e2c <__assert_fail@plt+0x8828>
   18bcc:	cmp	r0, r4
   18bd0:	movge	r0, #0
   18bd4:	movlt	r0, #1
   18bd8:	cmp	r0, #0
   18bdc:	mvnne	r2, #-2147483648	; 0x80000000
   18be0:	bne	18ad8 <__assert_fail@plt+0x74d4>
   18be4:	mul	r1, r7, r4
   18be8:	cmp	r1, #63	; 0x3f
   18bec:	bgt	18b04 <__assert_fail@plt+0x7500>
   18bf0:	b	18ad4 <__assert_fail@plt+0x74d0>
   18bf4:	rsb	r3, r4, #-2147483648	; 0x80000000
   18bf8:	cmp	r6, r3
   18bfc:	movge	r3, #0
   18c00:	movlt	r3, #1
   18c04:	b	18aa0 <__assert_fail@plt+0x749c>
   18c08:	rsb	r3, r5, #-2147483648	; 0x80000000
   18c0c:	cmp	r6, r3
   18c10:	movge	r3, #0
   18c14:	movlt	r3, #1
   18c18:	b	18b3c <__assert_fail@plt+0x7538>
   18c1c:	cmp	r5, #0
   18c20:	blt	18ca8 <__assert_fail@plt+0x76a4>
   18c24:	cmn	r7, #1
   18c28:	beq	18b94 <__assert_fail@plt+0x7590>
   18c2c:	mov	r1, r7
   18c30:	mov	r0, #-2147483648	; 0x80000000
   18c34:	bl	19e2c <__assert_fail@plt+0x8828>
   18c38:	cmp	r5, r0
   18c3c:	movle	r0, #0
   18c40:	movgt	r0, #1
   18c44:	b	18b8c <__assert_fail@plt+0x7588>
   18c48:	cmp	r4, #0
   18c4c:	blt	18ce8 <__assert_fail@plt+0x76e4>
   18c50:	cmn	r7, #1
   18c54:	beq	18be4 <__assert_fail@plt+0x75e0>
   18c58:	mov	r1, r7
   18c5c:	mov	r0, #-2147483648	; 0x80000000
   18c60:	bl	19e2c <__assert_fail@plt+0x8828>
   18c64:	cmp	r0, r4
   18c68:	movge	r0, #0
   18c6c:	movlt	r0, #1
   18c70:	b	18bd8 <__assert_fail@plt+0x75d4>
   18c74:	mov	r4, fp
   18c78:	b	18bc0 <__assert_fail@plt+0x75bc>
   18c7c:	mov	r4, fp
   18c80:	b	18c50 <__assert_fail@plt+0x764c>
   18c84:	cmn	r4, #1
   18c88:	beq	18be4 <__assert_fail@plt+0x75e0>
   18c8c:	mov	r1, r4
   18c90:	mov	r0, #-2147483648	; 0x80000000
   18c94:	bl	19e2c <__assert_fail@plt+0x8828>
   18c98:	cmp	r7, r0
   18c9c:	movle	r0, #0
   18ca0:	movgt	r0, #1
   18ca4:	b	18bd8 <__assert_fail@plt+0x75d4>
   18ca8:	mov	r1, r7
   18cac:	mvn	r0, #-2147483648	; 0x80000000
   18cb0:	bl	19e2c <__assert_fail@plt+0x8828>
   18cb4:	cmp	r5, r0
   18cb8:	movge	r0, #0
   18cbc:	movlt	r0, #1
   18cc0:	b	18b8c <__assert_fail@plt+0x7588>
   18cc4:	cmn	r5, #1
   18cc8:	beq	18b94 <__assert_fail@plt+0x7590>
   18ccc:	mov	r1, r5
   18cd0:	mov	r0, #-2147483648	; 0x80000000
   18cd4:	bl	19e2c <__assert_fail@plt+0x8828>
   18cd8:	cmp	r7, r0
   18cdc:	movle	r0, #0
   18ce0:	movgt	r0, #1
   18ce4:	b	18b8c <__assert_fail@plt+0x7588>
   18ce8:	mov	r1, r7
   18cec:	mvn	r0, #-2147483648	; 0x80000000
   18cf0:	bl	19e2c <__assert_fail@plt+0x8828>
   18cf4:	cmp	r0, r4
   18cf8:	movle	r0, #0
   18cfc:	movgt	r0, #1
   18d00:	b	18bd8 <__assert_fail@plt+0x75d4>
   18d04:	bl	18e20 <__assert_fail@plt+0x781c>
   18d08:	push	{r4, lr}
   18d0c:	mov	r1, #1
   18d10:	bl	18ee0 <__assert_fail@plt+0x78dc>
   18d14:	cmp	r0, #0
   18d18:	popne	{r4, pc}
   18d1c:	bl	18e20 <__assert_fail@plt+0x781c>
   18d20:	push	{r4, lr}
   18d24:	mov	r1, #1
   18d28:	bl	18ee0 <__assert_fail@plt+0x78dc>
   18d2c:	cmp	r0, #0
   18d30:	popne	{r4, pc}
   18d34:	bl	18e20 <__assert_fail@plt+0x781c>
   18d38:	push	{r4, lr}
   18d3c:	bl	18ee0 <__assert_fail@plt+0x78dc>
   18d40:	cmp	r0, #0
   18d44:	popne	{r4, pc}
   18d48:	bl	18e20 <__assert_fail@plt+0x781c>
   18d4c:	push	{r4, lr}
   18d50:	bl	18ee0 <__assert_fail@plt+0x78dc>
   18d54:	cmp	r0, #0
   18d58:	popne	{r4, pc}
   18d5c:	bl	18e20 <__assert_fail@plt+0x781c>
   18d60:	push	{r4, r5, r6, lr}
   18d64:	mov	r6, r0
   18d68:	mov	r0, r1
   18d6c:	mov	r4, r1
   18d70:	bl	18f28 <__assert_fail@plt+0x7924>
   18d74:	subs	r5, r0, #0
   18d78:	beq	18d90 <__assert_fail@plt+0x778c>
   18d7c:	mov	r2, r4
   18d80:	mov	r1, r6
   18d84:	bl	112b0 <memcpy@plt>
   18d88:	mov	r0, r5
   18d8c:	pop	{r4, r5, r6, pc}
   18d90:	bl	18e20 <__assert_fail@plt+0x781c>
   18d94:	push	{r4, r5, r6, lr}
   18d98:	mov	r6, r0
   18d9c:	mov	r0, r1
   18da0:	mov	r4, r1
   18da4:	bl	18f28 <__assert_fail@plt+0x7924>
   18da8:	subs	r5, r0, #0
   18dac:	beq	18dc4 <__assert_fail@plt+0x77c0>
   18db0:	mov	r2, r4
   18db4:	mov	r1, r6
   18db8:	bl	112b0 <memcpy@plt>
   18dbc:	mov	r0, r5
   18dc0:	pop	{r4, r5, r6, pc}
   18dc4:	bl	18e20 <__assert_fail@plt+0x781c>
   18dc8:	push	{r4, r5, r6, lr}
   18dcc:	mov	r6, r0
   18dd0:	add	r0, r1, #1
   18dd4:	mov	r4, r1
   18dd8:	bl	18f28 <__assert_fail@plt+0x7924>
   18ddc:	subs	r5, r0, #0
   18de0:	beq	18e00 <__assert_fail@plt+0x77fc>
   18de4:	mov	r3, #0
   18de8:	mov	r1, r6
   18dec:	strb	r3, [r5, r4]
   18df0:	mov	r2, r4
   18df4:	bl	112b0 <memcpy@plt>
   18df8:	mov	r0, r5
   18dfc:	pop	{r4, r5, r6, pc}
   18e00:	bl	18e20 <__assert_fail@plt+0x781c>
   18e04:	push	{r4, lr}
   18e08:	mov	r4, r0
   18e0c:	bl	11460 <strlen@plt>
   18e10:	add	r1, r0, #1
   18e14:	mov	r0, r4
   18e18:	pop	{r4, lr}
   18e1c:	b	18d60 <__assert_fail@plt+0x775c>
   18e20:	ldr	r3, [pc, #44]	; 18e54 <__assert_fail@plt+0x7850>
   18e24:	push	{r4, lr}
   18e28:	mov	r2, #5
   18e2c:	ldr	r1, [pc, #36]	; 18e58 <__assert_fail@plt+0x7854>
   18e30:	mov	r0, #0
   18e34:	ldr	r4, [r3]
   18e38:	bl	112f8 <dcgettext@plt>
   18e3c:	ldr	r2, [pc, #24]	; 18e5c <__assert_fail@plt+0x7858>
   18e40:	mov	r1, #0
   18e44:	mov	r3, r0
   18e48:	mov	r0, r4
   18e4c:	bl	113ac <error@plt>
   18e50:	bl	115c8 <abort@plt>
   18e54:	andeq	ip, r2, r8, ror #2
   18e58:	andeq	fp, r1, r0, asr #11
   18e5c:	andeq	fp, r1, r4, asr #1
   18e60:	push	{r4, lr}
   18e64:	orr	r1, r1, #512	; 0x200
   18e68:	bl	13e34 <__assert_fail@plt+0x2830>
   18e6c:	cmp	r0, #0
   18e70:	popne	{r4, pc}
   18e74:	bl	11484 <__errno_location@plt>
   18e78:	ldr	r3, [r0]
   18e7c:	cmp	r3, #22
   18e80:	beq	18e88 <__assert_fail@plt+0x7884>
   18e84:	bl	18e20 <__assert_fail@plt+0x781c>
   18e88:	ldr	r3, [pc, #12]	; 18e9c <__assert_fail@plt+0x7898>
   18e8c:	mov	r2, #41	; 0x29
   18e90:	ldr	r1, [pc, #8]	; 18ea0 <__assert_fail@plt+0x789c>
   18e94:	ldr	r0, [pc, #8]	; 18ea4 <__assert_fail@plt+0x78a0>
   18e98:	bl	11604 <__assert_fail@plt>
   18e9c:	ldrdeq	fp, [r1], -r4
   18ea0:	andeq	fp, r1, r0, ror #11
   18ea4:	andeq	fp, r1, ip, ror #11
   18ea8:	ldr	r3, [r0, #48]	; 0x30
   18eac:	and	r3, r3, #17
   18eb0:	cmp	r3, #16
   18eb4:	beq	18ed8 <__assert_fail@plt+0x78d4>
   18eb8:	cmp	r3, #17
   18ebc:	beq	18ec8 <__assert_fail@plt+0x78c4>
   18ec0:	mov	r0, #0
   18ec4:	bx	lr
   18ec8:	ldr	r0, [r1, #48]	; 0x30
   18ecc:	adds	r0, r0, #0
   18ed0:	movne	r0, #1
   18ed4:	bx	lr
   18ed8:	mov	r0, #1
   18edc:	bx	lr
   18ee0:	cmp	r1, #0
   18ee4:	cmpne	r0, #0
   18ee8:	moveq	r1, #1
   18eec:	moveq	r0, r1
   18ef0:	umull	r2, r3, r0, r1
   18ef4:	adds	r3, r3, #0
   18ef8:	movne	r3, #1
   18efc:	cmp	r2, #0
   18f00:	blt	18f10 <__assert_fail@plt+0x790c>
   18f04:	cmp	r3, #0
   18f08:	bne	18f10 <__assert_fail@plt+0x790c>
   18f0c:	b	11238 <calloc@plt>
   18f10:	push	{r4, lr}
   18f14:	bl	11484 <__errno_location@plt>
   18f18:	mov	r3, #12
   18f1c:	str	r3, [r0]
   18f20:	mov	r0, #0
   18f24:	pop	{r4, pc}
   18f28:	cmp	r0, #0
   18f2c:	moveq	r0, #1
   18f30:	cmp	r0, #0
   18f34:	blt	18f3c <__assert_fail@plt+0x7938>
   18f38:	b	113dc <malloc@plt>
   18f3c:	push	{r4, lr}
   18f40:	bl	11484 <__errno_location@plt>
   18f44:	mov	r3, #12
   18f48:	str	r3, [r0]
   18f4c:	mov	r0, #0
   18f50:	pop	{r4, pc}
   18f54:	cmp	r0, #0
   18f58:	beq	18f7c <__assert_fail@plt+0x7978>
   18f5c:	cmp	r1, #0
   18f60:	push	{lr}		; (str lr, [sp, #-4]!)
   18f64:	sub	sp, sp, #12
   18f68:	beq	18f84 <__assert_fail@plt+0x7980>
   18f6c:	blt	18f9c <__assert_fail@plt+0x7998>
   18f70:	add	sp, sp, #12
   18f74:	pop	{lr}		; (ldr lr, [sp], #4)
   18f78:	b	11310 <realloc@plt>
   18f7c:	mov	r0, r1
   18f80:	b	18f28 <__assert_fail@plt+0x7924>
   18f84:	str	r1, [sp, #4]
   18f88:	bl	19538 <__assert_fail@plt+0x7f34>
   18f8c:	ldr	r3, [sp, #4]
   18f90:	mov	r0, r3
   18f94:	add	sp, sp, #12
   18f98:	pop	{pc}		; (ldr pc, [sp], #4)
   18f9c:	bl	11484 <__errno_location@plt>
   18fa0:	mov	r2, #12
   18fa4:	mov	r3, #0
   18fa8:	str	r2, [r0]
   18fac:	b	18f90 <__assert_fail@plt+0x798c>
   18fb0:	push	{r4, r5, r6, r7, r8, r9, lr}
   18fb4:	mov	r4, r0
   18fb8:	ldrb	r3, [r2]
   18fbc:	sub	sp, sp, #44	; 0x2c
   18fc0:	cmp	r3, #0
   18fc4:	strbeq	r3, [r0]
   18fc8:	beq	19028 <__assert_fail@plt+0x7a24>
   18fcc:	ldr	r8, [pc, #216]	; 190ac <__assert_fail@plt+0x7aa8>
   18fd0:	mov	r5, r2
   18fd4:	mov	r7, r1
   18fd8:	ldr	r6, [r8]
   18fdc:	cmp	r6, #0
   18fe0:	beq	19044 <__assert_fail@plt+0x7a40>
   18fe4:	cmp	r6, #0
   18fe8:	blt	1903c <__assert_fail@plt+0x7a38>
   18fec:	mov	r0, r5
   18ff0:	bl	11460 <strlen@plt>
   18ff4:	add	r0, r0, #27
   18ff8:	cmp	r0, #4032	; 0xfc0
   18ffc:	bhi	19030 <__assert_fail@plt+0x7a2c>
   19000:	ldr	r3, [pc, #168]	; 190b0 <__assert_fail@plt+0x7aac>
   19004:	mvn	r2, #0
   19008:	mov	r1, #1
   1900c:	str	r7, [sp]
   19010:	mov	r0, r4
   19014:	bl	11490 <__sprintf_chk@plt>
   19018:	mov	r1, r5
   1901c:	add	r0, r4, r0
   19020:	bl	11388 <strcpy@plt>
   19024:	mov	r0, r4
   19028:	add	sp, sp, #44	; 0x2c
   1902c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19030:	bl	18f28 <__assert_fail@plt+0x7924>
   19034:	subs	r4, r0, #0
   19038:	bne	19000 <__assert_fail@plt+0x79fc>
   1903c:	mov	r0, #0
   19040:	b	19028 <__assert_fail@plt+0x7a24>
   19044:	ldr	r1, [pc, #104]	; 190b4 <__assert_fail@plt+0x7ab0>
   19048:	ldr	r0, [pc, #104]	; 190b8 <__assert_fail@plt+0x7ab4>
   1904c:	bl	113c4 <open64@plt>
   19050:	subs	r9, r0, #0
   19054:	blt	1909c <__assert_fail@plt+0x7a98>
   19058:	ldr	r3, [pc, #92]	; 190bc <__assert_fail@plt+0x7ab8>
   1905c:	mov	r2, #32
   19060:	mov	r1, #1
   19064:	str	r9, [sp]
   19068:	add	r0, sp, #8
   1906c:	bl	11490 <__sprintf_chk@plt>
   19070:	mov	r1, r6
   19074:	add	r0, sp, #8
   19078:	bl	114f0 <access@plt>
   1907c:	cmp	r0, #0
   19080:	moveq	r3, #1
   19084:	mvnne	r3, #0
   19088:	mov	r0, r9
   1908c:	str	r3, [r8]
   19090:	bl	115d4 <close@plt>
   19094:	ldr	r6, [r8]
   19098:	b	18fe4 <__assert_fail@plt+0x79e0>
   1909c:	mvn	r3, #0
   190a0:	mov	r0, r6
   190a4:	str	r3, [r8]
   190a8:	b	19028 <__assert_fail@plt+0x7a24>
   190ac:	andeq	ip, r2, r0, asr #6
   190b0:	andeq	fp, r1, r4, lsr #12
   190b4:	andeq	r4, r8, r0, lsl #18
   190b8:	strdeq	fp, [r1], -ip
   190bc:	andeq	fp, r1, ip, lsl #12
   190c0:	push	{r4, r5, r6, lr}
   190c4:	mov	r4, r0
   190c8:	bl	11394 <__fpending@plt>
   190cc:	ldr	r5, [r4]
   190d0:	and	r5, r5, #32
   190d4:	mov	r6, r0
   190d8:	mov	r0, r4
   190dc:	bl	1922c <__assert_fail@plt+0x7c28>
   190e0:	cmp	r5, #0
   190e4:	mov	r4, r0
   190e8:	bne	19108 <__assert_fail@plt+0x7b04>
   190ec:	cmp	r0, #0
   190f0:	beq	19100 <__assert_fail@plt+0x7afc>
   190f4:	cmp	r6, #0
   190f8:	beq	19124 <__assert_fail@plt+0x7b20>
   190fc:	mvn	r4, #0
   19100:	mov	r0, r4
   19104:	pop	{r4, r5, r6, pc}
   19108:	cmp	r0, #0
   1910c:	bne	190fc <__assert_fail@plt+0x7af8>
   19110:	bl	11484 <__errno_location@plt>
   19114:	str	r4, [r0]
   19118:	mvn	r4, #0
   1911c:	mov	r0, r4
   19120:	pop	{r4, r5, r6, pc}
   19124:	bl	11484 <__errno_location@plt>
   19128:	ldr	r4, [r0]
   1912c:	subs	r4, r4, #9
   19130:	mvnne	r4, #0
   19134:	mov	r0, r4
   19138:	pop	{r4, r5, r6, pc}
   1913c:	push	{r4, r5}
   19140:	mov	r4, #0
   19144:	mov	r5, #0
   19148:	ldr	r3, [pc, #12]	; 1915c <__assert_fail@plt+0x7b58>
   1914c:	strd	r4, [r0, #16]
   19150:	str	r3, [r0, #24]
   19154:	pop	{r4, r5}
   19158:	bx	lr
   1915c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   19160:	ldr	r3, [pc, #180]	; 1921c <__assert_fail@plt+0x7c18>
   19164:	ldr	r2, [r0, #24]
   19168:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1916c:	cmp	r2, r3
   19170:	bne	19208 <__assert_fail@plt+0x7c04>
   19174:	ldrd	r6, [r0, #16]
   19178:	orrs	r3, r6, r7
   1917c:	bne	191a8 <__assert_fail@plt+0x7ba4>
   19180:	mov	r2, #1
   19184:	mov	r3, #0
   19188:	ldrd	r8, [r1, #96]	; 0x60
   1918c:	strd	r2, [r0, #16]
   19190:	ldrd	r2, [r1]
   19194:	mov	r1, #0
   19198:	strd	r8, [r0]
   1919c:	strd	r2, [r0, #8]
   191a0:	mov	r0, r1
   191a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   191a8:	ldrd	r8, [r1, #96]	; 0x60
   191ac:	ldrd	r2, [r0]
   191b0:	cmp	r9, r3
   191b4:	cmpeq	r8, r2
   191b8:	beq	191f0 <__assert_fail@plt+0x7bec>
   191bc:	adds	r2, r6, #1
   191c0:	adc	r3, r7, #0
   191c4:	and	r6, r6, r2
   191c8:	and	r7, r7, r3
   191cc:	orrs	ip, r6, r7
   191d0:	strd	r2, [r0, #16]
   191d4:	movne	r1, #0
   191d8:	bne	191a0 <__assert_fail@plt+0x7b9c>
   191dc:	orrs	r3, r2, r3
   191e0:	bne	19190 <__assert_fail@plt+0x7b8c>
   191e4:	mov	r1, #1
   191e8:	mov	r0, r1
   191ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   191f0:	ldrd	r4, [r1]
   191f4:	ldrd	r2, [r0, #8]
   191f8:	cmp	r5, r3
   191fc:	cmpeq	r4, r2
   19200:	bne	191bc <__assert_fail@plt+0x7bb8>
   19204:	b	191e4 <__assert_fail@plt+0x7be0>
   19208:	ldr	r3, [pc, #16]	; 19220 <__assert_fail@plt+0x7c1c>
   1920c:	mov	r2, #60	; 0x3c
   19210:	ldr	r1, [pc, #12]	; 19224 <__assert_fail@plt+0x7c20>
   19214:	ldr	r0, [pc, #12]	; 19228 <__assert_fail@plt+0x7c24>
   19218:	bl	11604 <__assert_fail@plt>
   1921c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   19220:	andeq	fp, r1, r8, lsr r6
   19224:	andeq	fp, r1, r4, asr #12
   19228:	andeq	fp, r1, r8, asr r6
   1922c:	push	{r4, r5, lr}
   19230:	sub	sp, sp, #12
   19234:	mov	r4, r0
   19238:	bl	114c0 <fileno@plt>
   1923c:	cmp	r0, #0
   19240:	mov	r0, r4
   19244:	blt	192c0 <__assert_fail@plt+0x7cbc>
   19248:	bl	113f4 <__freading@plt>
   1924c:	cmp	r0, #0
   19250:	bne	1928c <__assert_fail@plt+0x7c88>
   19254:	mov	r0, r4
   19258:	bl	194d8 <__assert_fail@plt+0x7ed4>
   1925c:	cmp	r0, #0
   19260:	beq	192bc <__assert_fail@plt+0x7cb8>
   19264:	bl	11484 <__errno_location@plt>
   19268:	mov	r5, r0
   1926c:	mov	r0, r4
   19270:	ldr	r4, [r5]
   19274:	bl	114fc <fclose@plt>
   19278:	cmp	r4, #0
   1927c:	mvnne	r0, #0
   19280:	strne	r4, [r5]
   19284:	add	sp, sp, #12
   19288:	pop	{r4, r5, pc}
   1928c:	mov	r0, r4
   19290:	bl	114c0 <fileno@plt>
   19294:	mov	r3, #1
   19298:	str	r3, [sp]
   1929c:	mov	r2, #0
   192a0:	mov	r3, #0
   192a4:	bl	11370 <lseek64@plt>
   192a8:	mvn	r3, #0
   192ac:	mvn	r2, #0
   192b0:	cmp	r1, r3
   192b4:	cmpeq	r0, r2
   192b8:	bne	19254 <__assert_fail@plt+0x7c50>
   192bc:	mov	r0, r4
   192c0:	add	sp, sp, #12
   192c4:	pop	{r4, r5, lr}
   192c8:	b	114fc <fclose@plt>
   192cc:	push	{r1, r2, r3}
   192d0:	push	{r4, r5, r6, r7, lr}
   192d4:	sub	sp, sp, #8
   192d8:	add	r3, sp, #32
   192dc:	ldr	r1, [sp, #28]
   192e0:	str	r3, [sp, #4]
   192e4:	cmp	r1, #0
   192e8:	beq	19380 <__assert_fail@plt+0x7d7c>
   192ec:	ldr	r2, [pc, #412]	; 19490 <__assert_fail@plt+0x7e8c>
   192f0:	mov	r5, r0
   192f4:	cmp	r1, r2
   192f8:	bne	19344 <__assert_fail@plt+0x7d40>
   192fc:	ldr	r6, [pc, #400]	; 19494 <__assert_fail@plt+0x7e90>
   19300:	ldr	r7, [r3]
   19304:	add	r2, sp, #36	; 0x24
   19308:	ldr	r3, [r6]
   1930c:	str	r2, [sp, #4]
   19310:	cmp	r3, #0
   19314:	mov	r2, r7
   19318:	blt	19444 <__assert_fail@plt+0x7e40>
   1931c:	bl	11514 <fcntl64@plt>
   19320:	subs	r4, r0, #0
   19324:	blt	193c8 <__assert_fail@plt+0x7dc4>
   19328:	mov	r3, #1
   1932c:	str	r3, [r6]
   19330:	mov	r0, r4
   19334:	add	sp, sp, #8
   19338:	pop	{r4, r5, r6, r7, lr}
   1933c:	add	sp, sp, #12
   19340:	bx	lr
   19344:	cmp	r1, #11
   19348:	beq	19370 <__assert_fail@plt+0x7d6c>
   1934c:	bgt	19390 <__assert_fail@plt+0x7d8c>
   19350:	cmp	r1, #3
   19354:	beq	19370 <__assert_fail@plt+0x7d6c>
   19358:	ble	19484 <__assert_fail@plt+0x7e80>
   1935c:	cmp	r1, #8
   19360:	beq	193b0 <__assert_fail@plt+0x7dac>
   19364:	ble	193b0 <__assert_fail@plt+0x7dac>
   19368:	cmp	r1, #9
   1936c:	bne	193b0 <__assert_fail@plt+0x7dac>
   19370:	mov	r0, r5
   19374:	bl	11514 <fcntl64@plt>
   19378:	mov	r4, r0
   1937c:	b	19330 <__assert_fail@plt+0x7d2c>
   19380:	ldr	r2, [sp, #32]
   19384:	bl	11514 <fcntl64@plt>
   19388:	mov	r4, r0
   1938c:	b	19330 <__assert_fail@plt+0x7d2c>
   19390:	ldr	r3, [pc, #256]	; 19498 <__assert_fail@plt+0x7e94>
   19394:	cmp	r1, r3
   19398:	bgt	19464 <__assert_fail@plt+0x7e60>
   1939c:	cmp	r1, r2
   193a0:	bge	193b0 <__assert_fail@plt+0x7dac>
   193a4:	sub	r3, r3, #6
   193a8:	cmp	r1, r3
   193ac:	beq	19370 <__assert_fail@plt+0x7d6c>
   193b0:	ldr	r3, [sp, #4]
   193b4:	mov	r0, r5
   193b8:	ldr	r2, [r3]
   193bc:	bl	11514 <fcntl64@plt>
   193c0:	mov	r4, r0
   193c4:	b	19330 <__assert_fail@plt+0x7d2c>
   193c8:	bl	11484 <__errno_location@plt>
   193cc:	ldr	r3, [r0]
   193d0:	cmp	r3, #22
   193d4:	bne	19328 <__assert_fail@plt+0x7d24>
   193d8:	mov	r2, r7
   193dc:	mov	r0, r5
   193e0:	mov	r1, #0
   193e4:	bl	11514 <fcntl64@plt>
   193e8:	subs	r4, r0, #0
   193ec:	blt	19330 <__assert_fail@plt+0x7d2c>
   193f0:	mvn	r3, #0
   193f4:	str	r3, [r6]
   193f8:	mov	r1, #1
   193fc:	mov	r0, r4
   19400:	bl	11514 <fcntl64@plt>
   19404:	subs	r2, r0, #0
   19408:	blt	19424 <__assert_fail@plt+0x7e20>
   1940c:	orr	r2, r2, #1
   19410:	mov	r1, #2
   19414:	mov	r0, r4
   19418:	bl	11514 <fcntl64@plt>
   1941c:	cmn	r0, #1
   19420:	bne	19330 <__assert_fail@plt+0x7d2c>
   19424:	bl	11484 <__errno_location@plt>
   19428:	mov	r5, r0
   1942c:	mov	r0, r4
   19430:	ldr	r6, [r5]
   19434:	mvn	r4, #0
   19438:	bl	115d4 <close@plt>
   1943c:	str	r6, [r5]
   19440:	b	19330 <__assert_fail@plt+0x7d2c>
   19444:	mov	r1, #0
   19448:	bl	11514 <fcntl64@plt>
   1944c:	subs	r4, r0, #0
   19450:	blt	19330 <__assert_fail@plt+0x7d2c>
   19454:	ldr	r3, [r6]
   19458:	cmn	r3, #1
   1945c:	beq	193f8 <__assert_fail@plt+0x7df4>
   19460:	b	19330 <__assert_fail@plt+0x7d2c>
   19464:	ldr	r3, [pc, #48]	; 1949c <__assert_fail@plt+0x7e98>
   19468:	cmp	r1, r3
   1946c:	beq	193b0 <__assert_fail@plt+0x7dac>
   19470:	blt	19370 <__assert_fail@plt+0x7d6c>
   19474:	add	r3, r3, #1
   19478:	cmp	r1, r3
   1947c:	bne	193b0 <__assert_fail@plt+0x7dac>
   19480:	b	19370 <__assert_fail@plt+0x7d6c>
   19484:	cmp	r1, #1
   19488:	bne	193b0 <__assert_fail@plt+0x7dac>
   1948c:	b	19370 <__assert_fail@plt+0x7d6c>
   19490:	andeq	r0, r0, r6, lsl #8
   19494:	andeq	ip, r2, r4, asr #6
   19498:	andeq	r0, r0, r7, lsl #8
   1949c:	andeq	r0, r0, r9, lsl #8
   194a0:	push	{r1, r2, r3}
   194a4:	push	{lr}		; (str lr, [sp, #-4]!)
   194a8:	sub	sp, sp, #8
   194ac:	ldr	r1, [sp, #12]
   194b0:	ands	r2, r1, #64	; 0x40
   194b4:	addne	r3, sp, #16
   194b8:	ldrne	r2, [sp, #16]
   194bc:	strne	r3, [sp, #4]
   194c0:	bl	113c4 <open64@plt>
   194c4:	bl	1837c <__assert_fail@plt+0x6d78>
   194c8:	add	sp, sp, #8
   194cc:	pop	{lr}		; (ldr lr, [sp], #4)
   194d0:	add	sp, sp, #12
   194d4:	bx	lr
   194d8:	push	{r4, lr}
   194dc:	subs	r4, r0, #0
   194e0:	sub	sp, sp, #8
   194e4:	beq	19500 <__assert_fail@plt+0x7efc>
   194e8:	bl	113f4 <__freading@plt>
   194ec:	cmp	r0, #0
   194f0:	beq	19500 <__assert_fail@plt+0x7efc>
   194f4:	ldr	r3, [r4]
   194f8:	tst	r3, #256	; 0x100
   194fc:	bne	19510 <__assert_fail@plt+0x7f0c>
   19500:	mov	r0, r4
   19504:	add	sp, sp, #8
   19508:	pop	{r4, lr}
   1950c:	b	11274 <fflush@plt>
   19510:	mov	r3, #1
   19514:	str	r3, [sp]
   19518:	mov	r2, #0
   1951c:	mov	r3, #0
   19520:	mov	r0, r4
   19524:	bl	19590 <__assert_fail@plt+0x7f8c>
   19528:	mov	r0, r4
   1952c:	add	sp, sp, #8
   19530:	pop	{r4, lr}
   19534:	b	11274 <fflush@plt>
   19538:	push	{r4, r5, lr}
   1953c:	sub	sp, sp, #12
   19540:	mov	r5, r0
   19544:	bl	11484 <__errno_location@plt>
   19548:	mov	r2, #0
   1954c:	mov	r4, r0
   19550:	ldr	r3, [r0]
   19554:	str	r2, [r4]
   19558:	mov	r0, r5
   1955c:	str	r3, [sp]
   19560:	str	r3, [sp, #4]
   19564:	bl	11298 <free@plt>
   19568:	ldr	r3, [r4]
   1956c:	add	r2, sp, #8
   19570:	cmp	r3, #0
   19574:	moveq	r3, #4
   19578:	movne	r3, #0
   1957c:	add	r3, r2, r3
   19580:	ldr	r3, [r3, #-8]
   19584:	str	r3, [r4]
   19588:	add	sp, sp, #12
   1958c:	pop	{r4, r5, pc}
   19590:	push	{r4, r5, r6, r7, r8, lr}
   19594:	sub	sp, sp, #8
   19598:	ldmib	r0, {ip, lr}
   1959c:	mov	r4, r0
   195a0:	ldr	r5, [sp, #32]
   195a4:	cmp	lr, ip
   195a8:	beq	195c0 <__assert_fail@plt+0x7fbc>
   195ac:	str	r5, [sp, #32]
   195b0:	mov	r0, r4
   195b4:	add	sp, sp, #8
   195b8:	pop	{r4, r5, r6, r7, r8, lr}
   195bc:	b	11508 <fseeko64@plt>
   195c0:	ldr	lr, [r0, #20]
   195c4:	ldr	ip, [r0, #16]
   195c8:	cmp	lr, ip
   195cc:	bne	195ac <__assert_fail@plt+0x7fa8>
   195d0:	ldr	r8, [r0, #36]	; 0x24
   195d4:	cmp	r8, #0
   195d8:	bne	195ac <__assert_fail@plt+0x7fa8>
   195dc:	mov	r6, r2
   195e0:	mov	r7, r3
   195e4:	bl	114c0 <fileno@plt>
   195e8:	mov	r2, r6
   195ec:	mov	r3, r7
   195f0:	str	r5, [sp]
   195f4:	bl	11370 <lseek64@plt>
   195f8:	mvn	r3, #0
   195fc:	mvn	r2, #0
   19600:	cmp	r1, r3
   19604:	cmpeq	r0, r2
   19608:	beq	19628 <__assert_fail@plt+0x8024>
   1960c:	ldr	r3, [r4]
   19610:	strd	r0, [r4, #80]	; 0x50
   19614:	mov	r0, r8
   19618:	bic	r3, r3, #16
   1961c:	str	r3, [r4]
   19620:	add	sp, sp, #8
   19624:	pop	{r4, r5, r6, r7, r8, pc}
   19628:	mvn	r0, #0
   1962c:	b	19620 <__assert_fail@plt+0x801c>
   19630:	push	{r4, lr}
   19634:	mov	r0, #14
   19638:	bl	11538 <nl_langinfo@plt>
   1963c:	cmp	r0, #0
   19640:	beq	19658 <__assert_fail@plt+0x8054>
   19644:	ldrb	r2, [r0]
   19648:	ldr	r3, [pc, #16]	; 19660 <__assert_fail@plt+0x805c>
   1964c:	cmp	r2, #0
   19650:	moveq	r0, r3
   19654:	pop	{r4, pc}
   19658:	ldr	r0, [pc]	; 19660 <__assert_fail@plt+0x805c>
   1965c:	pop	{r4, pc}
   19660:	andeq	fp, r1, r0, ror r6
   19664:	push	{r4, r5, r6, r7, lr}
   19668:	subs	r6, r0, #0
   1966c:	sub	sp, sp, #12
   19670:	addeq	r6, sp, #4
   19674:	mov	r0, r6
   19678:	mov	r5, r2
   1967c:	mov	r7, r1
   19680:	bl	113a0 <mbrtowc@plt>
   19684:	cmp	r5, #0
   19688:	cmnne	r0, #3
   1968c:	mov	r4, r0
   19690:	bls	196ac <__assert_fail@plt+0x80a8>
   19694:	mov	r0, #0
   19698:	bl	19b2c <__assert_fail@plt+0x8528>
   1969c:	cmp	r0, #0
   196a0:	moveq	r4, #1
   196a4:	ldrbeq	r3, [r7]
   196a8:	streq	r3, [r6]
   196ac:	mov	r0, r4
   196b0:	add	sp, sp, #12
   196b4:	pop	{r4, r5, r6, r7, pc}
   196b8:	ldr	r3, [pc, #44]	; 196ec <__assert_fail@plt+0x80e8>
   196bc:	push	{r4, lr}
   196c0:	mov	r5, r0
   196c4:	mov	r2, #5
   196c8:	ldr	r1, [pc, #32]	; 196f0 <__assert_fail@plt+0x80ec>
   196cc:	mov	r0, #0
   196d0:	ldr	r4, [r3]
   196d4:	bl	112f8 <dcgettext@plt>
   196d8:	mov	r1, r5
   196dc:	mov	r2, r0
   196e0:	mov	r0, r4
   196e4:	bl	113ac <error@plt>
   196e8:	bl	115c8 <abort@plt>
   196ec:	andeq	ip, r2, r8, ror #2
   196f0:	andeq	fp, r1, r8, ror r6
   196f4:	ldr	r3, [pc, #44]	; 19728 <__assert_fail@plt+0x8124>
   196f8:	push	{r4, lr}
   196fc:	mov	r5, r0
   19700:	mov	r2, #5
   19704:	ldr	r1, [pc, #32]	; 1972c <__assert_fail@plt+0x8128>
   19708:	mov	r0, #0
   1970c:	ldr	r4, [r3]
   19710:	bl	112f8 <dcgettext@plt>
   19714:	mov	r1, r5
   19718:	mov	r2, r0
   1971c:	mov	r0, r4
   19720:	bl	113ac <error@plt>
   19724:	bl	115c8 <abort@plt>
   19728:	andeq	ip, r2, r8, ror #2
   1972c:	andeq	fp, r1, r4, lsr #13
   19730:	push	{r4, r5, r6, lr}
   19734:	subs	r4, r2, #0
   19738:	mov	r6, r0
   1973c:	mov	r5, r1
   19740:	beq	1976c <__assert_fail@plt+0x8168>
   19744:	mov	r1, r4
   19748:	mvn	r0, #0
   1974c:	bl	19c20 <__assert_fail@plt+0x861c>
   19750:	cmp	r0, r5
   19754:	bcs	1976c <__assert_fail@plt+0x8168>
   19758:	bl	11484 <__errno_location@plt>
   1975c:	mov	r3, #12
   19760:	str	r3, [r0]
   19764:	mov	r0, #0
   19768:	pop	{r4, r5, r6, pc}
   1976c:	mul	r1, r5, r4
   19770:	mov	r0, r6
   19774:	pop	{r4, r5, r6, lr}
   19778:	b	18f54 <__assert_fail@plt+0x7950>
   1977c:	push	{r4, r5, r6, lr}
   19780:	mov	r4, #0
   19784:	mov	r5, r0
   19788:	str	r4, [r0, #4]
   1978c:	mov	r1, #524288	; 0x80000
   19790:	ldr	r0, [pc, #52]	; 197cc <__assert_fail@plt+0x81c8>
   19794:	bl	194a0 <__assert_fail@plt+0x7e9c>
   19798:	cmp	r0, r4
   1979c:	str	r0, [r5]
   197a0:	blt	197ac <__assert_fail@plt+0x81a8>
   197a4:	mov	r0, r4
   197a8:	pop	{r4, r5, r6, pc}
   197ac:	mov	r1, r4
   197b0:	mov	r0, r4
   197b4:	bl	11430 <getcwd@plt>
   197b8:	cmp	r0, r4
   197bc:	str	r0, [r5, #4]
   197c0:	movne	r0, #0
   197c4:	mvneq	r0, #0
   197c8:	pop	{r4, r5, r6, pc}
   197cc:	strdeq	fp, [r1], -ip
   197d0:	ldr	r3, [r0]
   197d4:	cmp	r3, #0
   197d8:	blt	197e4 <__assert_fail@plt+0x81e0>
   197dc:	mov	r0, r3
   197e0:	b	11568 <fchdir@plt>
   197e4:	ldr	r0, [r0, #4]
   197e8:	b	19890 <__assert_fail@plt+0x828c>
   197ec:	push	{r4, lr}
   197f0:	mov	r4, r0
   197f4:	ldr	r0, [r0]
   197f8:	cmp	r0, #0
   197fc:	blt	19804 <__assert_fail@plt+0x8200>
   19800:	bl	115d4 <close@plt>
   19804:	ldr	r0, [r4, #4]
   19808:	pop	{r4, lr}
   1980c:	b	19538 <__assert_fail@plt+0x7f34>
   19810:	mov	r2, #3
   19814:	mov	r1, #0
   19818:	b	192cc <__assert_fail@plt+0x7cc8>
   1981c:	ldr	r0, [r0]
   19820:	cmp	r0, #0
   19824:	bxlt	lr
   19828:	push	{r4, lr}
   1982c:	bl	115d4 <close@plt>
   19830:	cmp	r0, #0
   19834:	popeq	{r4, pc}
   19838:	ldr	r3, [pc, #12]	; 1984c <__assert_fail@plt+0x8248>
   1983c:	mov	r2, #64	; 0x40
   19840:	ldr	r1, [pc, #8]	; 19850 <__assert_fail@plt+0x824c>
   19844:	ldr	r0, [pc, #8]	; 19854 <__assert_fail@plt+0x8250>
   19848:	bl	11604 <__assert_fail@plt>
   1984c:	ldrdeq	fp, [r1], -r4
   19850:	andeq	fp, r1, ip, ror #13
   19854:	andeq	fp, r1, r0, lsl #14
   19858:	push	{r4, r5, r6, lr}
   1985c:	mov	r2, #18688	; 0x4900
   19860:	mov	r4, r0
   19864:	ldr	r0, [r0]
   19868:	bl	1146c <openat64@plt>
   1986c:	subs	r5, r0, #0
   19870:	blt	19888 <__assert_fail@plt+0x8284>
   19874:	mov	r0, r4
   19878:	bl	1981c <__assert_fail@plt+0x8218>
   1987c:	str	r5, [r4]
   19880:	mov	r0, #0
   19884:	pop	{r4, r5, r6, pc}
   19888:	mvn	r0, #0
   1988c:	pop	{r4, r5, r6, pc}
   19890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19894:	sub	sp, sp, #20
   19898:	mov	r6, r0
   1989c:	bl	11334 <chdir@plt>
   198a0:	subs	r4, r0, #0
   198a4:	beq	198bc <__assert_fail@plt+0x82b8>
   198a8:	bl	11484 <__errno_location@plt>
   198ac:	ldr	r5, [r0]
   198b0:	str	r0, [sp, #4]
   198b4:	cmp	r5, #36	; 0x24
   198b8:	beq	198c8 <__assert_fail@plt+0x82c4>
   198bc:	mov	r0, r4
   198c0:	add	sp, sp, #20
   198c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198c8:	mov	r0, r6
   198cc:	bl	11460 <strlen@plt>
   198d0:	mvn	r3, #99	; 0x63
   198d4:	str	r3, [sp, #12]
   198d8:	subs	r4, r0, #0
   198dc:	beq	19ae0 <__assert_fail@plt+0x84dc>
   198e0:	cmp	r4, #4096	; 0x1000
   198e4:	bcc	19af4 <__assert_fail@plt+0x84f0>
   198e8:	ldr	r1, [pc, #536]	; 19b08 <__assert_fail@plt+0x8504>
   198ec:	mov	r0, r6
   198f0:	bl	115f8 <strspn@plt>
   198f4:	cmp	r0, #2
   198f8:	mov	fp, r0
   198fc:	beq	199c0 <__assert_fail@plt+0x83bc>
   19900:	cmp	r0, #0
   19904:	moveq	fp, r6
   19908:	bne	19a84 <__assert_fail@plt+0x8480>
   1990c:	ldrb	r2, [fp]
   19910:	cmp	r2, #47	; 0x2f
   19914:	beq	19ab8 <__assert_fail@plt+0x84b4>
   19918:	add	r6, r6, r4
   1991c:	cmp	fp, r6
   19920:	bhi	19acc <__assert_fail@plt+0x84c8>
   19924:	ldr	r4, [pc, #480]	; 19b0c <__assert_fail@plt+0x8508>
   19928:	sub	r2, r6, fp
   1992c:	cmp	r2, r4
   19930:	addle	r7, sp, #12
   19934:	ble	19a18 <__assert_fail@plt+0x8414>
   19938:	mov	r8, #4096	; 0x1000
   1993c:	mov	r5, #47	; 0x2f
   19940:	mov	r9, #0
   19944:	b	19994 <__assert_fail@plt+0x8390>
   19948:	sub	r1, sl, fp
   1994c:	cmp	r1, r4
   19950:	strb	r9, [sl]
   19954:	bgt	19aa4 <__assert_fail@plt+0x84a0>
   19958:	mov	r1, fp
   1995c:	add	r0, sp, #12
   19960:	bl	19858 <__assert_fail@plt+0x8254>
   19964:	add	r7, sp, #12
   19968:	strb	r5, [sl]
   1996c:	cmp	r0, #0
   19970:	bne	19a34 <__assert_fail@plt+0x8430>
   19974:	add	fp, sl, #1
   19978:	mov	r0, fp
   1997c:	ldr	r1, [pc, #388]	; 19b08 <__assert_fail@plt+0x8504>
   19980:	bl	115f8 <strspn@plt>
   19984:	add	fp, fp, r0
   19988:	sub	r2, r6, fp
   1998c:	cmp	r2, r4
   19990:	ble	19a18 <__assert_fail@plt+0x8414>
   19994:	mov	r2, r8
   19998:	mov	r1, r5
   1999c:	mov	r0, fp
   199a0:	bl	11478 <memrchr@plt>
   199a4:	subs	sl, r0, #0
   199a8:	bne	19948 <__assert_fail@plt+0x8344>
   199ac:	ldr	r2, [sp, #4]
   199b0:	mov	r3, #36	; 0x24
   199b4:	mvn	r4, #0
   199b8:	str	r3, [r2]
   199bc:	b	198bc <__assert_fail@plt+0x82b8>
   199c0:	sub	r2, r4, #3
   199c4:	mov	r1, #47	; 0x2f
   199c8:	add	r0, r6, #3
   199cc:	bl	114d8 <memchr@plt>
   199d0:	subs	r8, r0, #0
   199d4:	beq	19a74 <__assert_fail@plt+0x8470>
   199d8:	mov	r3, #0
   199dc:	add	r7, sp, #12
   199e0:	strb	r3, [r8]
   199e4:	mov	r0, r7
   199e8:	mov	r1, r6
   199ec:	bl	19858 <__assert_fail@plt+0x8254>
   199f0:	mov	r3, #47	; 0x2f
   199f4:	strb	r3, [r8]
   199f8:	cmp	r0, #0
   199fc:	bne	19a34 <__assert_fail@plt+0x8430>
   19a00:	add	r8, r8, #1
   19a04:	mov	r0, r8
   19a08:	ldr	r1, [pc, #248]	; 19b08 <__assert_fail@plt+0x8504>
   19a0c:	bl	115f8 <strspn@plt>
   19a10:	add	fp, r8, r0
   19a14:	b	1990c <__assert_fail@plt+0x8308>
   19a18:	cmp	r6, fp
   19a1c:	bls	19a58 <__assert_fail@plt+0x8454>
   19a20:	mov	r1, fp
   19a24:	mov	r0, r7
   19a28:	bl	19858 <__assert_fail@plt+0x8254>
   19a2c:	cmp	r0, #0
   19a30:	beq	19a58 <__assert_fail@plt+0x8454>
   19a34:	ldr	r6, [sp, #4]
   19a38:	mov	r0, r7
   19a3c:	mvn	r4, #0
   19a40:	ldr	r5, [r6]
   19a44:	bl	1981c <__assert_fail@plt+0x8218>
   19a48:	mov	r0, r4
   19a4c:	str	r5, [r6]
   19a50:	add	sp, sp, #20
   19a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a58:	ldr	r0, [sp, #12]
   19a5c:	bl	11568 <fchdir@plt>
   19a60:	subs	r4, r0, #0
   19a64:	bne	19a34 <__assert_fail@plt+0x8430>
   19a68:	mov	r0, r7
   19a6c:	bl	1981c <__assert_fail@plt+0x8218>
   19a70:	b	198bc <__assert_fail@plt+0x82b8>
   19a74:	ldr	r3, [sp, #4]
   19a78:	mvn	r4, #0
   19a7c:	str	r5, [r3]
   19a80:	b	198bc <__assert_fail@plt+0x82b8>
   19a84:	add	r7, sp, #12
   19a88:	mov	r0, r7
   19a8c:	ldr	r1, [pc, #116]	; 19b08 <__assert_fail@plt+0x8504>
   19a90:	bl	19858 <__assert_fail@plt+0x8254>
   19a94:	cmp	r0, #0
   19a98:	addeq	fp, r6, fp
   19a9c:	beq	1990c <__assert_fail@plt+0x8308>
   19aa0:	b	19a34 <__assert_fail@plt+0x8430>
   19aa4:	ldr	r3, [pc, #100]	; 19b10 <__assert_fail@plt+0x850c>
   19aa8:	mov	r2, #179	; 0xb3
   19aac:	ldr	r1, [pc, #96]	; 19b14 <__assert_fail@plt+0x8510>
   19ab0:	ldr	r0, [pc, #96]	; 19b18 <__assert_fail@plt+0x8514>
   19ab4:	bl	11604 <__assert_fail@plt>
   19ab8:	ldr	r3, [pc, #80]	; 19b10 <__assert_fail@plt+0x850c>
   19abc:	mov	r2, #162	; 0xa2
   19ac0:	ldr	r1, [pc, #76]	; 19b14 <__assert_fail@plt+0x8510>
   19ac4:	ldr	r0, [pc, #80]	; 19b1c <__assert_fail@plt+0x8518>
   19ac8:	bl	11604 <__assert_fail@plt>
   19acc:	ldr	r3, [pc, #60]	; 19b10 <__assert_fail@plt+0x850c>
   19ad0:	mov	r2, #163	; 0xa3
   19ad4:	ldr	r1, [pc, #56]	; 19b14 <__assert_fail@plt+0x8510>
   19ad8:	ldr	r0, [pc, #64]	; 19b20 <__assert_fail@plt+0x851c>
   19adc:	bl	11604 <__assert_fail@plt>
   19ae0:	ldr	r3, [pc, #40]	; 19b10 <__assert_fail@plt+0x850c>
   19ae4:	mov	r2, #126	; 0x7e
   19ae8:	ldr	r1, [pc, #36]	; 19b14 <__assert_fail@plt+0x8510>
   19aec:	ldr	r0, [pc, #48]	; 19b24 <__assert_fail@plt+0x8520>
   19af0:	bl	11604 <__assert_fail@plt>
   19af4:	ldr	r3, [pc, #20]	; 19b10 <__assert_fail@plt+0x850c>
   19af8:	mov	r2, #127	; 0x7f
   19afc:	ldr	r1, [pc, #16]	; 19b14 <__assert_fail@plt+0x8510>
   19b00:	ldr	r0, [pc, #32]	; 19b28 <__assert_fail@plt+0x8524>
   19b04:	bl	11604 <__assert_fail@plt>
   19b08:	andeq	fp, r1, r4, lsr r6
   19b0c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   19b10:	andeq	fp, r1, r0, ror #13
   19b14:	andeq	fp, r1, ip, ror #13
   19b18:	andeq	fp, r1, r0, asr #14
   19b1c:	andeq	fp, r1, r4, lsr #14
   19b20:	andeq	fp, r1, r0, lsr r7
   19b24:	andeq	fp, r1, r0, lsl r7
   19b28:	andeq	fp, r1, r8, lsl r7
   19b2c:	push	{lr}		; (str lr, [sp, #-4]!)
   19b30:	sub	sp, sp, #268	; 0x10c
   19b34:	add	r1, sp, #4
   19b38:	ldr	r2, [pc, #60]	; 19b7c <__assert_fail@plt+0x8578>
   19b3c:	bl	19b88 <__assert_fail@plt+0x8584>
   19b40:	cmp	r0, #0
   19b44:	movne	r0, #0
   19b48:	bne	19b74 <__assert_fail@plt+0x8570>
   19b4c:	ldr	r1, [pc, #44]	; 19b80 <__assert_fail@plt+0x857c>
   19b50:	add	r0, sp, #4
   19b54:	bl	11268 <strcmp@plt>
   19b58:	cmp	r0, #0
   19b5c:	beq	19b74 <__assert_fail@plt+0x8570>
   19b60:	add	r0, sp, #4
   19b64:	ldr	r1, [pc, #24]	; 19b84 <__assert_fail@plt+0x8580>
   19b68:	bl	11268 <strcmp@plt>
   19b6c:	adds	r0, r0, #0
   19b70:	movne	r0, #1
   19b74:	add	sp, sp, #268	; 0x10c
   19b78:	pop	{pc}		; (ldr pc, [sp], #4)
   19b7c:	andeq	r0, r0, r1, lsl #2
   19b80:	andeq	fp, r1, r4, asr r7
   19b84:	andeq	fp, r1, r8, asr r7
   19b88:	push	{r4, r5, r6, lr}
   19b8c:	mov	r5, r1
   19b90:	mov	r1, #0
   19b94:	mov	r4, r2
   19b98:	bl	11520 <setlocale@plt>
   19b9c:	subs	r6, r0, #0
   19ba0:	beq	19bfc <__assert_fail@plt+0x85f8>
   19ba4:	bl	11460 <strlen@plt>
   19ba8:	cmp	r4, r0
   19bac:	bhi	19be4 <__assert_fail@plt+0x85e0>
   19bb0:	cmp	r4, #0
   19bb4:	bne	19bc0 <__assert_fail@plt+0x85bc>
   19bb8:	mov	r0, #34	; 0x22
   19bbc:	pop	{r4, r5, r6, pc}
   19bc0:	sub	r4, r4, #1
   19bc4:	mov	r1, r6
   19bc8:	mov	r2, r4
   19bcc:	mov	r0, r5
   19bd0:	bl	112b0 <memcpy@plt>
   19bd4:	mov	r3, #0
   19bd8:	strb	r3, [r5, r4]
   19bdc:	mov	r0, #34	; 0x22
   19be0:	pop	{r4, r5, r6, pc}
   19be4:	add	r2, r0, #1
   19be8:	mov	r1, r6
   19bec:	mov	r0, r5
   19bf0:	bl	112b0 <memcpy@plt>
   19bf4:	mov	r0, #0
   19bf8:	pop	{r4, r5, r6, pc}
   19bfc:	cmp	r4, #0
   19c00:	beq	19c10 <__assert_fail@plt+0x860c>
   19c04:	strb	r6, [r5]
   19c08:	mov	r0, #22
   19c0c:	pop	{r4, r5, r6, pc}
   19c10:	mov	r0, #22
   19c14:	pop	{r4, r5, r6, pc}
   19c18:	mov	r1, #0
   19c1c:	b	11520 <setlocale@plt>
   19c20:	subs	r2, r1, #1
   19c24:	bxeq	lr
   19c28:	bcc	19e00 <__assert_fail@plt+0x87fc>
   19c2c:	cmp	r0, r1
   19c30:	bls	19de4 <__assert_fail@plt+0x87e0>
   19c34:	tst	r1, r2
   19c38:	beq	19df0 <__assert_fail@plt+0x87ec>
   19c3c:	clz	r3, r0
   19c40:	clz	r2, r1
   19c44:	sub	r3, r2, r3
   19c48:	rsbs	r3, r3, #31
   19c4c:	addne	r3, r3, r3, lsl #1
   19c50:	mov	r2, #0
   19c54:	addne	pc, pc, r3, lsl #2
   19c58:	nop			; (mov r0, r0)
   19c5c:	cmp	r0, r1, lsl #31
   19c60:	adc	r2, r2, r2
   19c64:	subcs	r0, r0, r1, lsl #31
   19c68:	cmp	r0, r1, lsl #30
   19c6c:	adc	r2, r2, r2
   19c70:	subcs	r0, r0, r1, lsl #30
   19c74:	cmp	r0, r1, lsl #29
   19c78:	adc	r2, r2, r2
   19c7c:	subcs	r0, r0, r1, lsl #29
   19c80:	cmp	r0, r1, lsl #28
   19c84:	adc	r2, r2, r2
   19c88:	subcs	r0, r0, r1, lsl #28
   19c8c:	cmp	r0, r1, lsl #27
   19c90:	adc	r2, r2, r2
   19c94:	subcs	r0, r0, r1, lsl #27
   19c98:	cmp	r0, r1, lsl #26
   19c9c:	adc	r2, r2, r2
   19ca0:	subcs	r0, r0, r1, lsl #26
   19ca4:	cmp	r0, r1, lsl #25
   19ca8:	adc	r2, r2, r2
   19cac:	subcs	r0, r0, r1, lsl #25
   19cb0:	cmp	r0, r1, lsl #24
   19cb4:	adc	r2, r2, r2
   19cb8:	subcs	r0, r0, r1, lsl #24
   19cbc:	cmp	r0, r1, lsl #23
   19cc0:	adc	r2, r2, r2
   19cc4:	subcs	r0, r0, r1, lsl #23
   19cc8:	cmp	r0, r1, lsl #22
   19ccc:	adc	r2, r2, r2
   19cd0:	subcs	r0, r0, r1, lsl #22
   19cd4:	cmp	r0, r1, lsl #21
   19cd8:	adc	r2, r2, r2
   19cdc:	subcs	r0, r0, r1, lsl #21
   19ce0:	cmp	r0, r1, lsl #20
   19ce4:	adc	r2, r2, r2
   19ce8:	subcs	r0, r0, r1, lsl #20
   19cec:	cmp	r0, r1, lsl #19
   19cf0:	adc	r2, r2, r2
   19cf4:	subcs	r0, r0, r1, lsl #19
   19cf8:	cmp	r0, r1, lsl #18
   19cfc:	adc	r2, r2, r2
   19d00:	subcs	r0, r0, r1, lsl #18
   19d04:	cmp	r0, r1, lsl #17
   19d08:	adc	r2, r2, r2
   19d0c:	subcs	r0, r0, r1, lsl #17
   19d10:	cmp	r0, r1, lsl #16
   19d14:	adc	r2, r2, r2
   19d18:	subcs	r0, r0, r1, lsl #16
   19d1c:	cmp	r0, r1, lsl #15
   19d20:	adc	r2, r2, r2
   19d24:	subcs	r0, r0, r1, lsl #15
   19d28:	cmp	r0, r1, lsl #14
   19d2c:	adc	r2, r2, r2
   19d30:	subcs	r0, r0, r1, lsl #14
   19d34:	cmp	r0, r1, lsl #13
   19d38:	adc	r2, r2, r2
   19d3c:	subcs	r0, r0, r1, lsl #13
   19d40:	cmp	r0, r1, lsl #12
   19d44:	adc	r2, r2, r2
   19d48:	subcs	r0, r0, r1, lsl #12
   19d4c:	cmp	r0, r1, lsl #11
   19d50:	adc	r2, r2, r2
   19d54:	subcs	r0, r0, r1, lsl #11
   19d58:	cmp	r0, r1, lsl #10
   19d5c:	adc	r2, r2, r2
   19d60:	subcs	r0, r0, r1, lsl #10
   19d64:	cmp	r0, r1, lsl #9
   19d68:	adc	r2, r2, r2
   19d6c:	subcs	r0, r0, r1, lsl #9
   19d70:	cmp	r0, r1, lsl #8
   19d74:	adc	r2, r2, r2
   19d78:	subcs	r0, r0, r1, lsl #8
   19d7c:	cmp	r0, r1, lsl #7
   19d80:	adc	r2, r2, r2
   19d84:	subcs	r0, r0, r1, lsl #7
   19d88:	cmp	r0, r1, lsl #6
   19d8c:	adc	r2, r2, r2
   19d90:	subcs	r0, r0, r1, lsl #6
   19d94:	cmp	r0, r1, lsl #5
   19d98:	adc	r2, r2, r2
   19d9c:	subcs	r0, r0, r1, lsl #5
   19da0:	cmp	r0, r1, lsl #4
   19da4:	adc	r2, r2, r2
   19da8:	subcs	r0, r0, r1, lsl #4
   19dac:	cmp	r0, r1, lsl #3
   19db0:	adc	r2, r2, r2
   19db4:	subcs	r0, r0, r1, lsl #3
   19db8:	cmp	r0, r1, lsl #2
   19dbc:	adc	r2, r2, r2
   19dc0:	subcs	r0, r0, r1, lsl #2
   19dc4:	cmp	r0, r1, lsl #1
   19dc8:	adc	r2, r2, r2
   19dcc:	subcs	r0, r0, r1, lsl #1
   19dd0:	cmp	r0, r1
   19dd4:	adc	r2, r2, r2
   19dd8:	subcs	r0, r0, r1
   19ddc:	mov	r0, r2
   19de0:	bx	lr
   19de4:	moveq	r0, #1
   19de8:	movne	r0, #0
   19dec:	bx	lr
   19df0:	clz	r2, r1
   19df4:	rsb	r2, r2, #31
   19df8:	lsr	r0, r0, r2
   19dfc:	bx	lr
   19e00:	cmp	r0, #0
   19e04:	mvnne	r0, #0
   19e08:	b	1a0a8 <__assert_fail@plt+0x8aa4>
   19e0c:	cmp	r1, #0
   19e10:	beq	19e00 <__assert_fail@plt+0x87fc>
   19e14:	push	{r0, r1, lr}
   19e18:	bl	19c20 <__assert_fail@plt+0x861c>
   19e1c:	pop	{r1, r2, lr}
   19e20:	mul	r3, r2, r0
   19e24:	sub	r1, r1, r3
   19e28:	bx	lr
   19e2c:	cmp	r1, #0
   19e30:	beq	1a03c <__assert_fail@plt+0x8a38>
   19e34:	eor	ip, r0, r1
   19e38:	rsbmi	r1, r1, #0
   19e3c:	subs	r2, r1, #1
   19e40:	beq	1a008 <__assert_fail@plt+0x8a04>
   19e44:	movs	r3, r0
   19e48:	rsbmi	r3, r0, #0
   19e4c:	cmp	r3, r1
   19e50:	bls	1a014 <__assert_fail@plt+0x8a10>
   19e54:	tst	r1, r2
   19e58:	beq	1a024 <__assert_fail@plt+0x8a20>
   19e5c:	clz	r2, r3
   19e60:	clz	r0, r1
   19e64:	sub	r2, r0, r2
   19e68:	rsbs	r2, r2, #31
   19e6c:	addne	r2, r2, r2, lsl #1
   19e70:	mov	r0, #0
   19e74:	addne	pc, pc, r2, lsl #2
   19e78:	nop			; (mov r0, r0)
   19e7c:	cmp	r3, r1, lsl #31
   19e80:	adc	r0, r0, r0
   19e84:	subcs	r3, r3, r1, lsl #31
   19e88:	cmp	r3, r1, lsl #30
   19e8c:	adc	r0, r0, r0
   19e90:	subcs	r3, r3, r1, lsl #30
   19e94:	cmp	r3, r1, lsl #29
   19e98:	adc	r0, r0, r0
   19e9c:	subcs	r3, r3, r1, lsl #29
   19ea0:	cmp	r3, r1, lsl #28
   19ea4:	adc	r0, r0, r0
   19ea8:	subcs	r3, r3, r1, lsl #28
   19eac:	cmp	r3, r1, lsl #27
   19eb0:	adc	r0, r0, r0
   19eb4:	subcs	r3, r3, r1, lsl #27
   19eb8:	cmp	r3, r1, lsl #26
   19ebc:	adc	r0, r0, r0
   19ec0:	subcs	r3, r3, r1, lsl #26
   19ec4:	cmp	r3, r1, lsl #25
   19ec8:	adc	r0, r0, r0
   19ecc:	subcs	r3, r3, r1, lsl #25
   19ed0:	cmp	r3, r1, lsl #24
   19ed4:	adc	r0, r0, r0
   19ed8:	subcs	r3, r3, r1, lsl #24
   19edc:	cmp	r3, r1, lsl #23
   19ee0:	adc	r0, r0, r0
   19ee4:	subcs	r3, r3, r1, lsl #23
   19ee8:	cmp	r3, r1, lsl #22
   19eec:	adc	r0, r0, r0
   19ef0:	subcs	r3, r3, r1, lsl #22
   19ef4:	cmp	r3, r1, lsl #21
   19ef8:	adc	r0, r0, r0
   19efc:	subcs	r3, r3, r1, lsl #21
   19f00:	cmp	r3, r1, lsl #20
   19f04:	adc	r0, r0, r0
   19f08:	subcs	r3, r3, r1, lsl #20
   19f0c:	cmp	r3, r1, lsl #19
   19f10:	adc	r0, r0, r0
   19f14:	subcs	r3, r3, r1, lsl #19
   19f18:	cmp	r3, r1, lsl #18
   19f1c:	adc	r0, r0, r0
   19f20:	subcs	r3, r3, r1, lsl #18
   19f24:	cmp	r3, r1, lsl #17
   19f28:	adc	r0, r0, r0
   19f2c:	subcs	r3, r3, r1, lsl #17
   19f30:	cmp	r3, r1, lsl #16
   19f34:	adc	r0, r0, r0
   19f38:	subcs	r3, r3, r1, lsl #16
   19f3c:	cmp	r3, r1, lsl #15
   19f40:	adc	r0, r0, r0
   19f44:	subcs	r3, r3, r1, lsl #15
   19f48:	cmp	r3, r1, lsl #14
   19f4c:	adc	r0, r0, r0
   19f50:	subcs	r3, r3, r1, lsl #14
   19f54:	cmp	r3, r1, lsl #13
   19f58:	adc	r0, r0, r0
   19f5c:	subcs	r3, r3, r1, lsl #13
   19f60:	cmp	r3, r1, lsl #12
   19f64:	adc	r0, r0, r0
   19f68:	subcs	r3, r3, r1, lsl #12
   19f6c:	cmp	r3, r1, lsl #11
   19f70:	adc	r0, r0, r0
   19f74:	subcs	r3, r3, r1, lsl #11
   19f78:	cmp	r3, r1, lsl #10
   19f7c:	adc	r0, r0, r0
   19f80:	subcs	r3, r3, r1, lsl #10
   19f84:	cmp	r3, r1, lsl #9
   19f88:	adc	r0, r0, r0
   19f8c:	subcs	r3, r3, r1, lsl #9
   19f90:	cmp	r3, r1, lsl #8
   19f94:	adc	r0, r0, r0
   19f98:	subcs	r3, r3, r1, lsl #8
   19f9c:	cmp	r3, r1, lsl #7
   19fa0:	adc	r0, r0, r0
   19fa4:	subcs	r3, r3, r1, lsl #7
   19fa8:	cmp	r3, r1, lsl #6
   19fac:	adc	r0, r0, r0
   19fb0:	subcs	r3, r3, r1, lsl #6
   19fb4:	cmp	r3, r1, lsl #5
   19fb8:	adc	r0, r0, r0
   19fbc:	subcs	r3, r3, r1, lsl #5
   19fc0:	cmp	r3, r1, lsl #4
   19fc4:	adc	r0, r0, r0
   19fc8:	subcs	r3, r3, r1, lsl #4
   19fcc:	cmp	r3, r1, lsl #3
   19fd0:	adc	r0, r0, r0
   19fd4:	subcs	r3, r3, r1, lsl #3
   19fd8:	cmp	r3, r1, lsl #2
   19fdc:	adc	r0, r0, r0
   19fe0:	subcs	r3, r3, r1, lsl #2
   19fe4:	cmp	r3, r1, lsl #1
   19fe8:	adc	r0, r0, r0
   19fec:	subcs	r3, r3, r1, lsl #1
   19ff0:	cmp	r3, r1
   19ff4:	adc	r0, r0, r0
   19ff8:	subcs	r3, r3, r1
   19ffc:	cmp	ip, #0
   1a000:	rsbmi	r0, r0, #0
   1a004:	bx	lr
   1a008:	teq	ip, r0
   1a00c:	rsbmi	r0, r0, #0
   1a010:	bx	lr
   1a014:	movcc	r0, #0
   1a018:	asreq	r0, ip, #31
   1a01c:	orreq	r0, r0, #1
   1a020:	bx	lr
   1a024:	clz	r2, r1
   1a028:	rsb	r2, r2, #31
   1a02c:	cmp	ip, #0
   1a030:	lsr	r0, r3, r2
   1a034:	rsbmi	r0, r0, #0
   1a038:	bx	lr
   1a03c:	cmp	r0, #0
   1a040:	mvngt	r0, #-2147483648	; 0x80000000
   1a044:	movlt	r0, #-2147483648	; 0x80000000
   1a048:	b	1a0a8 <__assert_fail@plt+0x8aa4>
   1a04c:	cmp	r1, #0
   1a050:	beq	1a03c <__assert_fail@plt+0x8a38>
   1a054:	push	{r0, r1, lr}
   1a058:	bl	19e34 <__assert_fail@plt+0x8830>
   1a05c:	pop	{r1, r2, lr}
   1a060:	mul	r3, r2, r0
   1a064:	sub	r1, r1, r3
   1a068:	bx	lr
   1a06c:	cmp	r3, #0
   1a070:	cmpeq	r2, #0
   1a074:	bne	1a08c <__assert_fail@plt+0x8a88>
   1a078:	cmp	r1, #0
   1a07c:	cmpeq	r0, #0
   1a080:	mvnne	r1, #0
   1a084:	mvnne	r0, #0
   1a088:	b	1a0a8 <__assert_fail@plt+0x8aa4>
   1a08c:	sub	sp, sp, #8
   1a090:	push	{sp, lr}
   1a094:	bl	1a0b8 <__assert_fail@plt+0x8ab4>
   1a098:	ldr	lr, [sp, #4]
   1a09c:	add	sp, sp, #8
   1a0a0:	pop	{r2, r3}
   1a0a4:	bx	lr
   1a0a8:	push	{r1, lr}
   1a0ac:	mov	r0, #8
   1a0b0:	bl	11250 <raise@plt>
   1a0b4:	pop	{r1, pc}
   1a0b8:	cmp	r1, r3
   1a0bc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a0c0:	cmpeq	r0, r2
   1a0c4:	mov	r4, r0
   1a0c8:	mov	r5, r1
   1a0cc:	ldr	r9, [sp, #28]
   1a0d0:	movcc	r0, #0
   1a0d4:	movcc	r1, #0
   1a0d8:	bcc	1a1d0 <__assert_fail@plt+0x8bcc>
   1a0dc:	cmp	r3, #0
   1a0e0:	clzeq	ip, r2
   1a0e4:	clzne	ip, r3
   1a0e8:	addeq	ip, ip, #32
   1a0ec:	cmp	r5, #0
   1a0f0:	clzeq	r1, r4
   1a0f4:	addeq	r1, r1, #32
   1a0f8:	clzne	r1, r5
   1a0fc:	sub	ip, ip, r1
   1a100:	sub	lr, ip, #32
   1a104:	lsl	r7, r3, ip
   1a108:	rsb	r8, ip, #32
   1a10c:	orr	r7, r7, r2, lsl lr
   1a110:	orr	r7, r7, r2, lsr r8
   1a114:	lsl	r6, r2, ip
   1a118:	cmp	r5, r7
   1a11c:	cmpeq	r4, r6
   1a120:	movcc	r0, #0
   1a124:	movcc	r1, #0
   1a128:	bcc	1a144 <__assert_fail@plt+0x8b40>
   1a12c:	mov	r3, #1
   1a130:	subs	r4, r4, r6
   1a134:	lsl	r1, r3, lr
   1a138:	lsl	r0, r3, ip
   1a13c:	orr	r1, r1, r3, lsr r8
   1a140:	sbc	r5, r5, r7
   1a144:	cmp	ip, #0
   1a148:	beq	1a1d0 <__assert_fail@plt+0x8bcc>
   1a14c:	lsrs	r3, r7, #1
   1a150:	rrx	r2, r6
   1a154:	mov	r6, ip
   1a158:	b	1a17c <__assert_fail@plt+0x8b78>
   1a15c:	subs	r4, r4, r2
   1a160:	sbc	r5, r5, r3
   1a164:	adds	r4, r4, r4
   1a168:	adc	r5, r5, r5
   1a16c:	adds	r4, r4, #1
   1a170:	adc	r5, r5, #0
   1a174:	subs	r6, r6, #1
   1a178:	beq	1a198 <__assert_fail@plt+0x8b94>
   1a17c:	cmp	r5, r3
   1a180:	cmpeq	r4, r2
   1a184:	bcs	1a15c <__assert_fail@plt+0x8b58>
   1a188:	adds	r4, r4, r4
   1a18c:	adc	r5, r5, r5
   1a190:	subs	r6, r6, #1
   1a194:	bne	1a17c <__assert_fail@plt+0x8b78>
   1a198:	lsr	r6, r4, ip
   1a19c:	lsr	r7, r5, ip
   1a1a0:	orr	r6, r6, r5, lsl r8
   1a1a4:	adds	r2, r0, r4
   1a1a8:	orr	r6, r6, r5, lsr lr
   1a1ac:	adc	r3, r1, r5
   1a1b0:	lsl	r1, r7, ip
   1a1b4:	orr	r1, r1, r6, lsl lr
   1a1b8:	lsl	r0, r6, ip
   1a1bc:	orr	r1, r1, r6, lsr r8
   1a1c0:	subs	r0, r2, r0
   1a1c4:	mov	r4, r6
   1a1c8:	mov	r5, r7
   1a1cc:	sbc	r1, r3, r1
   1a1d0:	cmp	r9, #0
   1a1d4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1a1d8:	strd	r4, [r9]
   1a1dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a1e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a1e4:	mov	r7, r0
   1a1e8:	ldr	r6, [pc, #72]	; 1a238 <__assert_fail@plt+0x8c34>
   1a1ec:	ldr	r5, [pc, #72]	; 1a23c <__assert_fail@plt+0x8c38>
   1a1f0:	add	r6, pc, r6
   1a1f4:	add	r5, pc, r5
   1a1f8:	sub	r6, r6, r5
   1a1fc:	mov	r8, r1
   1a200:	mov	r9, r2
   1a204:	bl	1120c <fstatfs64@plt-0x20>
   1a208:	asrs	r6, r6, #2
   1a20c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a210:	mov	r4, #0
   1a214:	add	r4, r4, #1
   1a218:	ldr	r3, [r5], #4
   1a21c:	mov	r2, r9
   1a220:	mov	r1, r8
   1a224:	mov	r0, r7
   1a228:	blx	r3
   1a22c:	cmp	r6, r4
   1a230:	bne	1a214 <__assert_fail@plt+0x8c10>
   1a234:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a238:	andeq	r1, r1, r0, lsl sp
   1a23c:	andeq	r1, r1, r8, lsl #26
   1a240:	bx	lr
   1a244:	ldr	r3, [pc, #12]	; 1a258 <__assert_fail@plt+0x8c54>
   1a248:	mov	r1, #0
   1a24c:	add	r3, pc, r3
   1a250:	ldr	r2, [r3]
   1a254:	b	1149c <__cxa_atexit@plt>
   1a258:	andeq	r1, r1, ip, lsl #30

Disassembly of section .fini:

0001a25c <.fini>:
   1a25c:	push	{r3, lr}
   1a260:	pop	{r3, pc}
