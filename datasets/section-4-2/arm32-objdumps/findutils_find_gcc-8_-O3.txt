
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00011e84 <.init>:
   11e84:	push	{r3, lr}
   11e88:	bl	12c64 <__assert_fail@plt+0x670>
   11e8c:	pop	{r3, pc}

Disassembly of section .plt:

00011e90 <pthread_mutex_unlock@plt-0x14>:
   11e90:	push	{lr}		; (str lr, [sp, #-4]!)
   11e94:	ldr	lr, [pc, #4]	; 11ea0 <pthread_mutex_unlock@plt-0x4>
   11e98:	add	lr, pc, lr
   11e9c:	ldr	pc, [lr, #8]!
   11ea0:	andeq	r5, r5, r0, ror #2

00011ea4 <pthread_mutex_unlock@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #348160	; 0x55000
   11eac:	ldr	pc, [ip, #352]!	; 0x160

00011eb0 <fdopen@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #348160	; 0x55000
   11eb8:	ldr	pc, [ip, #344]!	; 0x158

00011ebc <fstatfs64@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #348160	; 0x55000
   11ec4:	ldr	pc, [ip, #336]!	; 0x150

00011ec8 <calloc@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #348160	; 0x55000
   11ed0:	ldr	pc, [ip, #328]!	; 0x148

00011ed4 <endgrent@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #348160	; 0x55000
   11edc:	ldr	pc, [ip, #320]!	; 0x140

00011ee0 <wctype@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #348160	; 0x55000
   11ee8:	ldr	pc, [ip, #312]!	; 0x138

00011eec <raise@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #348160	; 0x55000
   11ef4:	ldr	pc, [ip, #304]!	; 0x130

00011ef8 <wcrtomb@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #348160	; 0x55000
   11f00:	ldr	pc, [ip, #296]!	; 0x128

00011f04 <gmtime_r@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #348160	; 0x55000
   11f0c:	ldr	pc, [ip, #288]!	; 0x120

00011f10 <__getdelim@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #348160	; 0x55000
   11f18:	ldr	pc, [ip, #280]!	; 0x118

00011f1c <getpwnam@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #348160	; 0x55000
   11f24:	ldr	pc, [ip, #272]!	; 0x110

00011f28 <is_selinux_enabled@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #348160	; 0x55000
   11f30:	ldr	pc, [ip, #264]!	; 0x108

00011f34 <iswctype@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #348160	; 0x55000
   11f3c:	ldr	pc, [ip, #256]!	; 0x100

00011f40 <strcmp@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #348160	; 0x55000
   11f48:	ldr	pc, [ip, #248]!	; 0xf8

00011f4c <strtol@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #348160	; 0x55000
   11f54:	ldr	pc, [ip, #240]!	; 0xf0

00011f58 <getpwuid@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #348160	; 0x55000
   11f60:	ldr	pc, [ip, #232]!	; 0xe8

00011f64 <printf@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #348160	; 0x55000
   11f6c:	ldr	pc, [ip, #224]!	; 0xe0

00011f70 <pthread_mutex_destroy@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #348160	; 0x55000
   11f78:	ldr	pc, [ip, #216]!	; 0xd8

00011f7c <mktime@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #348160	; 0x55000
   11f84:	ldr	pc, [ip, #208]!	; 0xd0

00011f88 <fflush@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #348160	; 0x55000
   11f90:	ldr	pc, [ip, #200]!	; 0xc8

00011f94 <unlinkat@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #348160	; 0x55000
   11f9c:	ldr	pc, [ip, #192]!	; 0xc0

00011fa0 <wcwidth@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #348160	; 0x55000
   11fa8:	ldr	pc, [ip, #184]!	; 0xb8

00011fac <lsetfilecon@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #348160	; 0x55000
   11fb4:	ldr	pc, [ip, #176]!	; 0xb0

00011fb8 <memmove@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #348160	; 0x55000
   11fc0:	ldr	pc, [ip, #168]!	; 0xa8

00011fc4 <free@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #348160	; 0x55000
   11fcc:	ldr	pc, [ip, #160]!	; 0xa0

00011fd0 <pthread_mutex_lock@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #348160	; 0x55000
   11fd8:	ldr	pc, [ip, #152]!	; 0x98

00011fdc <faccessat@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #348160	; 0x55000
   11fe4:	ldr	pc, [ip, #144]!	; 0x90

00011fe8 <ferror@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #348160	; 0x55000
   11ff0:	ldr	pc, [ip, #136]!	; 0x88

00011ff4 <thrd_exit@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #348160	; 0x55000
   11ffc:	ldr	pc, [ip, #128]!	; 0x80

00012000 <strndup@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #348160	; 0x55000
   12008:	ldr	pc, [ip, #120]!	; 0x78

0001200c <clock_gettime@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #348160	; 0x55000
   12014:	ldr	pc, [ip, #112]!	; 0x70

00012018 <_exit@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #348160	; 0x55000
   12020:	ldr	pc, [ip, #104]!	; 0x68

00012024 <memcpy@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #348160	; 0x55000
   1202c:	ldr	pc, [ip, #96]!	; 0x60

00012030 <execvp@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #348160	; 0x55000
   12038:	ldr	pc, [ip, #88]!	; 0x58

0001203c <pthread_mutex_init@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #348160	; 0x55000
   12044:	ldr	pc, [ip, #80]!	; 0x50

00012048 <__strtoull_internal@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #348160	; 0x55000
   12050:	ldr	pc, [ip, #72]!	; 0x48

00012054 <towlower@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #348160	; 0x55000
   1205c:	ldr	pc, [ip, #64]!	; 0x40

00012060 <mbsinit@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #348160	; 0x55000
   12068:	ldr	pc, [ip, #56]!	; 0x38

0001206c <signal@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #348160	; 0x55000
   12074:	ldr	pc, [ip, #48]!	; 0x30

00012078 <time@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #348160	; 0x55000
   12080:	ldr	pc, [ip, #40]!	; 0x28

00012084 <memcmp@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #348160	; 0x55000
   1208c:	ldr	pc, [ip, #32]!

00012090 <stpcpy@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #348160	; 0x55000
   12098:	ldr	pc, [ip, #24]!

0001209c <uname@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #348160	; 0x55000
   120a4:	ldr	pc, [ip, #16]!

000120a8 <ctime@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #348160	; 0x55000
   120b0:	ldr	pc, [ip, #8]!

000120b4 <dcgettext@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #348160	; 0x55000
   120bc:	ldr	pc, [ip, #0]!

000120c0 <strdup@plt>:
   120c0:	add	ip, pc, #0, 12
   120c4:	add	ip, ip, #84, 20	; 0x54000
   120c8:	ldr	pc, [ip, #4088]!	; 0xff8

000120cc <sysconf@plt>:
   120cc:	add	ip, pc, #0, 12
   120d0:	add	ip, ip, #84, 20	; 0x54000
   120d4:	ldr	pc, [ip, #4080]!	; 0xff0

000120d8 <getrlimit64@plt>:
   120d8:	add	ip, pc, #0, 12
   120dc:	add	ip, ip, #84, 20	; 0x54000
   120e0:	ldr	pc, [ip, #4072]!	; 0xfe8

000120e4 <realloc@plt>:
   120e4:	add	ip, pc, #0, 12
   120e8:	add	ip, ip, #84, 20	; 0x54000
   120ec:	ldr	pc, [ip, #4064]!	; 0xfe0

000120f0 <fgetfilecon@plt>:
   120f0:	add	ip, pc, #0, 12
   120f4:	add	ip, ip, #84, 20	; 0x54000
   120f8:	ldr	pc, [ip, #4056]!	; 0xfd8

000120fc <localtime_r@plt>:
   120fc:	add	ip, pc, #0, 12
   12100:	add	ip, ip, #84, 20	; 0x54000
   12104:	ldr	pc, [ip, #4048]!	; 0xfd0

00012108 <textdomain@plt>:
   12108:	add	ip, pc, #0, 12
   1210c:	add	ip, ip, #84, 20	; 0x54000
   12110:	ldr	pc, [ip, #4040]!	; 0xfc8

00012114 <iswcntrl@plt>:
   12114:	add	ip, pc, #0, 12
   12118:	add	ip, ip, #84, 20	; 0x54000
   1211c:	ldr	pc, [ip, #4032]!	; 0xfc0

00012120 <chdir@plt>:
   12120:	add	ip, pc, #0, 12
   12124:	add	ip, ip, #84, 20	; 0x54000
   12128:	ldr	pc, [ip, #4024]!	; 0xfb8

0001212c <__fxstatat64@plt>:
   1212c:	add	ip, pc, #0, 12
   12130:	add	ip, ip, #84, 20	; 0x54000
   12134:	ldr	pc, [ip, #4016]!	; 0xfb0

00012138 <iswprint@plt>:
   12138:	add	ip, pc, #0, 12
   1213c:	add	ip, ip, #84, 20	; 0x54000
   12140:	ldr	pc, [ip, #4008]!	; 0xfa8

00012144 <tzset@plt>:
   12144:	add	ip, pc, #0, 12
   12148:	add	ip, ip, #84, 20	; 0x54000
   1214c:	ldr	pc, [ip, #4000]!	; 0xfa0

00012150 <poll@plt>:
   12150:	add	ip, pc, #0, 12
   12154:	add	ip, ip, #84, 20	; 0x54000
   12158:	ldr	pc, [ip, #3992]!	; 0xf98

0001215c <__fxstat64@plt>:
   1215c:	add	ip, pc, #0, 12
   12160:	add	ip, ip, #84, 20	; 0x54000
   12164:	ldr	pc, [ip, #3984]!	; 0xf90

00012168 <fwrite@plt>:
   12168:	add	ip, pc, #0, 12
   1216c:	add	ip, ip, #84, 20	; 0x54000
   12170:	ldr	pc, [ip, #3976]!	; 0xf88

00012174 <strcat@plt>:
   12174:	add	ip, pc, #0, 12
   12178:	add	ip, ip, #84, 20	; 0x54000
   1217c:	ldr	pc, [ip, #3968]!	; 0xf80

00012180 <lseek64@plt>:
   12180:	add	ip, pc, #0, 12
   12184:	add	ip, ip, #84, 20	; 0x54000
   12188:	ldr	pc, [ip, #3960]!	; 0xf78

0001218c <waitpid@plt>:
   1218c:	add	ip, pc, #0, 12
   12190:	add	ip, ip, #84, 20	; 0x54000
   12194:	ldr	pc, [ip, #3952]!	; 0xf70

00012198 <__ctype_get_mb_cur_max@plt>:
   12198:	add	ip, pc, #0, 12
   1219c:	add	ip, ip, #84, 20	; 0x54000
   121a0:	ldr	pc, [ip, #3944]!	; 0xf68

000121a4 <hasmntopt@plt>:
   121a4:	add	ip, pc, #0, 12
   121a8:	add	ip, ip, #84, 20	; 0x54000
   121ac:	ldr	pc, [ip, #3936]!	; 0xf60

000121b0 <strcpy@plt>:
   121b0:	add	ip, pc, #0, 12
   121b4:	add	ip, ip, #84, 20	; 0x54000
   121b8:	ldr	pc, [ip, #3928]!	; 0xf58

000121bc <gettimeofday@plt>:
   121bc:	add	ip, pc, #0, 12
   121c0:	add	ip, ip, #84, 20	; 0x54000
   121c4:	ldr	pc, [ip, #3920]!	; 0xf50

000121c8 <__fpending@plt>:
   121c8:	add	ip, pc, #0, 12
   121cc:	add	ip, ip, #84, 20	; 0x54000
   121d0:	ldr	pc, [ip, #3912]!	; 0xf48

000121d4 <mbrtowc@plt>:
   121d4:	add	ip, pc, #0, 12
   121d8:	add	ip, ip, #84, 20	; 0x54000
   121dc:	ldr	pc, [ip, #3904]!	; 0xf40

000121e0 <strtok_r@plt>:
   121e0:	add	ip, pc, #0, 12
   121e4:	add	ip, ip, #84, 20	; 0x54000
   121e8:	ldr	pc, [ip, #3896]!	; 0xf38

000121ec <error@plt>:
   121ec:	add	ip, pc, #0, 12
   121f0:	add	ip, ip, #84, 20	; 0x54000
   121f4:	ldr	pc, [ip, #3888]!	; 0xf30

000121f8 <getmntent@plt>:
   121f8:	add	ip, pc, #0, 12
   121fc:	add	ip, ip, #84, 20	; 0x54000
   12200:	ldr	pc, [ip, #3880]!	; 0xf28

00012204 <opendir@plt>:
   12204:	add	ip, pc, #0, 12
   12208:	add	ip, ip, #84, 20	; 0x54000
   1220c:	ldr	pc, [ip, #3872]!	; 0xf20

00012210 <fnmatch@plt>:
   12210:	add	ip, pc, #0, 12
   12214:	add	ip, ip, #84, 20	; 0x54000
   12218:	ldr	pc, [ip, #3864]!	; 0xf18

0001221c <open64@plt>:
   1221c:	add	ip, pc, #0, 12
   12220:	add	ip, ip, #84, 20	; 0x54000
   12224:	ldr	pc, [ip, #3856]!	; 0xf10

00012228 <getenv@plt>:
   12228:	add	ip, pc, #0, 12
   1222c:	add	ip, ip, #84, 20	; 0x54000
   12230:	ldr	pc, [ip, #3848]!	; 0xf08

00012234 <lgetfilecon@plt>:
   12234:	add	ip, pc, #0, 12
   12238:	add	ip, ip, #84, 20	; 0x54000
   1223c:	ldr	pc, [ip, #3840]!	; 0xf00

00012240 <malloc@plt>:
   12240:	add	ip, pc, #0, 12
   12244:	add	ip, ip, #84, 20	; 0x54000
   12248:	ldr	pc, [ip, #3832]!	; 0xef8

0001224c <__libc_start_main@plt>:
   1224c:	add	ip, pc, #0, 12
   12250:	add	ip, ip, #84, 20	; 0x54000
   12254:	ldr	pc, [ip, #3824]!	; 0xef0

00012258 <readlinkat@plt>:
   12258:	add	ip, pc, #0, 12
   1225c:	add	ip, ip, #84, 20	; 0x54000
   12260:	ldr	pc, [ip, #3816]!	; 0xee8

00012264 <strftime@plt>:
   12264:	add	ip, pc, #0, 12
   12268:	add	ip, ip, #84, 20	; 0x54000
   1226c:	ldr	pc, [ip, #3808]!	; 0xee0

00012270 <__freading@plt>:
   12270:	add	ip, pc, #0, 12
   12274:	add	ip, ip, #84, 20	; 0x54000
   12278:	ldr	pc, [ip, #3800]!	; 0xed8

0001227c <localtime@plt>:
   1227c:	add	ip, pc, #0, 12
   12280:	add	ip, ip, #84, 20	; 0x54000
   12284:	ldr	pc, [ip, #3792]!	; 0xed0

00012288 <__ctype_tolower_loc@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #84, 20	; 0x54000
   12290:	ldr	pc, [ip, #3784]!	; 0xec8

00012294 <modf@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #84, 20	; 0x54000
   1229c:	ldr	pc, [ip, #3776]!	; 0xec0

000122a0 <__ctype_toupper_loc@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #84, 20	; 0x54000
   122a8:	ldr	pc, [ip, #3768]!	; 0xeb8

000122ac <__gmon_start__@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #84, 20	; 0x54000
   122b4:	ldr	pc, [ip, #3760]!	; 0xeb0

000122b8 <__ctype_b_loc@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #84, 20	; 0x54000
   122c0:	ldr	pc, [ip, #3752]!	; 0xea8

000122c4 <getcwd@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #84, 20	; 0x54000
   122cc:	ldr	pc, [ip, #3744]!	; 0xea0

000122d0 <exit@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #84, 20	; 0x54000
   122d8:	ldr	pc, [ip, #3736]!	; 0xe98

000122dc <feof@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #84, 20	; 0x54000
   122e4:	ldr	pc, [ip, #3728]!	; 0xe90

000122e8 <getfilecon@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #84, 20	; 0x54000
   122f0:	ldr	pc, [ip, #3720]!	; 0xe88

000122f4 <strtoul@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #84, 20	; 0x54000
   122fc:	ldr	pc, [ip, #3712]!	; 0xe80

00012300 <strlen@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #84, 20	; 0x54000
   12308:	ldr	pc, [ip, #3704]!	; 0xe78

0001230c <strchr@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #84, 20	; 0x54000
   12314:	ldr	pc, [ip, #3696]!	; 0xe70

00012318 <setenv@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #84, 20	; 0x54000
   12320:	ldr	pc, [ip, #3688]!	; 0xe68

00012324 <openat64@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #84, 20	; 0x54000
   1232c:	ldr	pc, [ip, #3680]!	; 0xe60

00012330 <memrchr@plt>:
   12330:	add	ip, pc, #0, 12
   12334:	add	ip, ip, #84, 20	; 0x54000
   12338:	ldr	pc, [ip, #3672]!	; 0xe58

0001233c <fprintf@plt>:
   1233c:	add	ip, pc, #0, 12
   12340:	add	ip, ip, #84, 20	; 0x54000
   12344:	ldr	pc, [ip, #3664]!	; 0xe50

00012348 <__errno_location@plt>:
   12348:	add	ip, pc, #0, 12
   1234c:	add	ip, ip, #84, 20	; 0x54000
   12350:	ldr	pc, [ip, #3656]!	; 0xe48

00012354 <iswalnum@plt>:
   12354:	add	ip, pc, #0, 12
   12358:	add	ip, ip, #84, 20	; 0x54000
   1235c:	ldr	pc, [ip, #3648]!	; 0xe40

00012360 <snprintf@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #84, 20	; 0x54000
   12368:	ldr	pc, [ip, #3640]!	; 0xe38

0001236c <__cxa_atexit@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #84, 20	; 0x54000
   12374:	ldr	pc, [ip, #3632]!	; 0xe30

00012378 <memset@plt>:
   12378:	add	ip, pc, #0, 12
   1237c:	add	ip, ip, #84, 20	; 0x54000
   12380:	ldr	pc, [ip, #3624]!	; 0xe28

00012384 <putchar@plt>:
   12384:	add	ip, pc, #0, 12
   12388:	add	ip, ip, #84, 20	; 0x54000
   1238c:	ldr	pc, [ip, #3616]!	; 0xe20

00012390 <strncpy@plt>:
   12390:	add	ip, pc, #0, 12
   12394:	add	ip, ip, #84, 20	; 0x54000
   12398:	ldr	pc, [ip, #3608]!	; 0xe18

0001239c <pthread_mutexattr_gettype@plt>:
   1239c:	add	ip, pc, #0, 12
   123a0:	add	ip, ip, #84, 20	; 0x54000
   123a4:	ldr	pc, [ip, #3600]!	; 0xe10

000123a8 <btowc@plt>:
   123a8:	add	ip, pc, #0, 12
   123ac:	add	ip, ip, #84, 20	; 0x54000
   123b0:	ldr	pc, [ip, #3592]!	; 0xe08

000123b4 <strtod@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #84, 20	; 0x54000
   123bc:	ldr	pc, [ip, #3584]!	; 0xe00

000123c0 <fileno@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #84, 20	; 0x54000
   123c8:	ldr	pc, [ip, #3576]!	; 0xdf8

000123cc <difftime@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #84, 20	; 0x54000
   123d4:	ldr	pc, [ip, #3568]!	; 0xdf0

000123d8 <memchr@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #84, 20	; 0x54000
   123e0:	ldr	pc, [ip, #3560]!	; 0xde8

000123e4 <setfilecon@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #84, 20	; 0x54000
   123ec:	ldr	pc, [ip, #3552]!	; 0xde0

000123f0 <access@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #84, 20	; 0x54000
   123f8:	ldr	pc, [ip, #3544]!	; 0xdd8

000123fc <fclose@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #84, 20	; 0x54000
   12404:	ldr	pc, [ip, #3536]!	; 0xdd0

00012408 <strnlen@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #84, 20	; 0x54000
   12410:	ldr	pc, [ip, #3528]!	; 0xdc8

00012414 <fseeko64@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #84, 20	; 0x54000
   1241c:	ldr	pc, [ip, #3520]!	; 0xdc0

00012420 <endmntent@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #84, 20	; 0x54000
   12428:	ldr	pc, [ip, #3512]!	; 0xdb8

0001242c <fcntl64@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #84, 20	; 0x54000
   12434:	ldr	pc, [ip, #3504]!	; 0xdb0

00012438 <rpmatch@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #84, 20	; 0x54000
   12440:	ldr	pc, [ip, #3496]!	; 0xda8

00012444 <setlocale@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #84, 20	; 0x54000
   1244c:	ldr	pc, [ip, #3488]!	; 0xda0

00012450 <fork@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #84, 20	; 0x54000
   12458:	ldr	pc, [ip, #3480]!	; 0xd98

0001245c <endpwent@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #84, 20	; 0x54000
   12464:	ldr	pc, [ip, #3472]!	; 0xd90

00012468 <strrchr@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #84, 20	; 0x54000
   12470:	ldr	pc, [ip, #3464]!	; 0xd88

00012474 <vfprintf@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #84, 20	; 0x54000
   1247c:	ldr	pc, [ip, #3456]!	; 0xd80

00012480 <nl_langinfo@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #84, 20	; 0x54000
   12488:	ldr	pc, [ip, #3448]!	; 0xd78

0001248c <fputc@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #84, 20	; 0x54000
   12494:	ldr	pc, [ip, #3440]!	; 0xd70

00012498 <sscanf@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #84, 20	; 0x54000
   124a0:	ldr	pc, [ip, #3432]!	; 0xd68

000124a4 <localeconv@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #84, 20	; 0x54000
   124ac:	ldr	pc, [ip, #3424]!	; 0xd60

000124b0 <sprintf@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #84, 20	; 0x54000
   124b8:	ldr	pc, [ip, #3416]!	; 0xd58

000124bc <readdir64@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #84, 20	; 0x54000
   124c4:	ldr	pc, [ip, #3408]!	; 0xd50

000124c8 <fdopendir@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #84, 20	; 0x54000
   124d0:	ldr	pc, [ip, #3400]!	; 0xd48

000124d4 <timegm@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #84, 20	; 0x54000
   124dc:	ldr	pc, [ip, #3392]!	; 0xd40

000124e0 <putc@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #84, 20	; 0x54000
   124e8:	ldr	pc, [ip, #3384]!	; 0xd38

000124ec <dirfd@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #84, 20	; 0x54000
   124f4:	ldr	pc, [ip, #3376]!	; 0xd30

000124f8 <fchdir@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #84, 20	; 0x54000
   12500:	ldr	pc, [ip, #3368]!	; 0xd28

00012504 <fopen64@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #84, 20	; 0x54000
   1250c:	ldr	pc, [ip, #3360]!	; 0xd20

00012510 <qsort@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #84, 20	; 0x54000
   12518:	ldr	pc, [ip, #3352]!	; 0xd18

0001251c <freecon@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #84, 20	; 0x54000
   12524:	ldr	pc, [ip, #3344]!	; 0xd10

00012528 <strpbrk@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #84, 20	; 0x54000
   12530:	ldr	pc, [ip, #3336]!	; 0xd08

00012534 <setmntent@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #84, 20	; 0x54000
   1253c:	ldr	pc, [ip, #3328]!	; 0xd00

00012540 <bindtextdomain@plt>:
   12540:	add	ip, pc, #0, 12
   12544:	add	ip, ip, #84, 20	; 0x54000
   12548:	ldr	pc, [ip, #3320]!	; 0xcf8

0001254c <getdelim@plt>:
   1254c:	add	ip, pc, #0, 12
   12550:	add	ip, ip, #84, 20	; 0x54000
   12554:	ldr	pc, [ip, #3312]!	; 0xcf0

00012558 <__xstat64@plt>:
   12558:	add	ip, pc, #0, 12
   1255c:	add	ip, ip, #84, 20	; 0x54000
   12560:	ldr	pc, [ip, #3304]!	; 0xce8

00012564 <isatty@plt>:
   12564:	add	ip, pc, #0, 12
   12568:	add	ip, ip, #84, 20	; 0x54000
   1256c:	ldr	pc, [ip, #3296]!	; 0xce0

00012570 <unsetenv@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #84, 20	; 0x54000
   12578:	ldr	pc, [ip, #3288]!	; 0xcd8

0001257c <towupper@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #84, 20	; 0x54000
   12584:	ldr	pc, [ip, #3280]!	; 0xcd0

00012588 <fputs@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #84, 20	; 0x54000
   12590:	ldr	pc, [ip, #3272]!	; 0xcc8

00012594 <strncmp@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #84, 20	; 0x54000
   1259c:	ldr	pc, [ip, #3264]!	; 0xcc0

000125a0 <abort@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #84, 20	; 0x54000
   125a8:	ldr	pc, [ip, #3256]!	; 0xcb8

000125ac <close@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #84, 20	; 0x54000
   125b4:	ldr	pc, [ip, #3248]!	; 0xcb0

000125b8 <__lxstat64@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #84, 20	; 0x54000
   125c0:	ldr	pc, [ip, #3240]!	; 0xca8

000125c4 <closedir@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #84, 20	; 0x54000
   125cc:	ldr	pc, [ip, #3232]!	; 0xca0

000125d0 <getgrgid@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #84, 20	; 0x54000
   125d8:	ldr	pc, [ip, #3224]!	; 0xc98

000125dc <getgrnam@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #84, 20	; 0x54000
   125e4:	ldr	pc, [ip, #3216]!	; 0xc90

000125e8 <strspn@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #84, 20	; 0x54000
   125f0:	ldr	pc, [ip, #3208]!	; 0xc88

000125f4 <__assert_fail@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #84, 20	; 0x54000
   125fc:	ldr	pc, [ip, #3200]!	; 0xc80

Disassembly of section .text:

00012600 <.text>:
   12600:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12604:	mov	r4, r0
   12608:	mov	r5, r1
   1260c:	ldr	r0, [r1]
   12610:	strd	r6, [sp, #8]
   12614:	movw	r6, #32320	; 0x7e40
   12618:	movt	r6, #6
   1261c:	strd	r8, [sp, #16]
   12620:	strd	sl, [sp, #24]
   12624:	str	lr, [sp, #32]
   12628:	sub	sp, sp, #244	; 0xf4
   1262c:	cmp	r0, #0
   12630:	movweq	r0, #2756	; 0xac4
   12634:	movteq	r0, #5
   12638:	bl	31db4 <__assert_fail@plt+0x1f7c0>
   1263c:	bl	1c690 <__assert_fail@plt+0xa09c>
   12640:	mov	r3, #0
   12644:	mvn	r2, #99	; 0x63
   12648:	str	r2, [r6, #16]
   1264c:	str	r3, [r6, #28]
   12650:	strb	r3, [r6, #32]
   12654:	strb	r3, [r6, #40]	; 0x28
   12658:	bl	27034 <__assert_fail@plt+0x14a40>
   1265c:	cmp	r0, #0
   12660:	bne	12a28 <__assert_fail@plt+0x434>
   12664:	movw	r0, #2764	; 0xacc
   12668:	movt	r0, #5
   1266c:	bl	1d968 <__assert_fail@plt+0xb374>
   12670:	cmp	r0, #0
   12674:	str	r0, [r6, #36]	; 0x24
   12678:	beq	12ae8 <__assert_fail@plt+0x4f4>
   1267c:	movw	r7, #32364	; 0x7e6c
   12680:	movt	r7, #6
   12684:	mov	r0, r7
   12688:	bl	1d438 <__assert_fail@plt+0xae44>
   1268c:	movw	r1, #9500	; 0x251c
   12690:	movt	r1, #5
   12694:	mov	r0, #6
   12698:	bl	12444 <setlocale@plt>
   1269c:	movw	r1, #2812	; 0xafc
   126a0:	movt	r1, #5
   126a4:	movw	r0, #19092	; 0x4a94
   126a8:	movt	r0, #5
   126ac:	bl	12540 <bindtextdomain@plt>
   126b0:	movw	r0, #19092	; 0x4a94
   126b4:	movt	r0, #5
   126b8:	bl	12108 <textdomain@plt>
   126bc:	movw	r0, #34564	; 0x8704
   126c0:	movt	r0, #2
   126c4:	bl	50774 <__assert_fail@plt+0x3e180>
   126c8:	cmp	r0, #0
   126cc:	bne	12b14 <__assert_fail@plt+0x520>
   126d0:	mov	r1, r5
   126d4:	mov	r0, r4
   126d8:	bl	1cf1c <__assert_fail@plt+0xa928>
   126dc:	ldr	r3, [r7, #44]	; 0x2c
   126e0:	mov	r8, r0
   126e4:	tst	r3, #2
   126e8:	bne	12864 <__assert_fail@plt+0x270>
   126ec:	tst	r3, #128	; 0x80
   126f0:	bne	12a30 <__assert_fail@plt+0x43c>
   126f4:	mov	r0, r4
   126f8:	mov	r2, r8
   126fc:	mov	r1, r5
   12700:	sub	r4, r4, r8
   12704:	bl	1b768 <__assert_fail@plt+0x9174>
   12708:	cmp	r4, #0
   1270c:	str	r0, [sp, #28]
   12710:	bgt	129e8 <__assert_fail@plt+0x3f4>
   12714:	ldr	r4, [r7, #76]	; 0x4c
   12718:	cmp	r4, #0
   1271c:	beq	12a5c <__assert_fail@plt+0x468>
   12720:	movw	r1, #2964	; 0xb94
   12724:	movt	r1, #5
   12728:	mov	r0, r4
   1272c:	bl	11f40 <strcmp@plt>
   12730:	subs	r5, r0, #0
   12734:	bne	12874 <__assert_fail@plt+0x280>
   12738:	ldrb	r4, [r7, #80]	; 0x50
   1273c:	cmp	r4, #0
   12740:	bne	12b84 <__assert_fail@plt+0x590>
   12744:	mov	r2, #5
   12748:	movw	r1, #3052	; 0xbec
   1274c:	movt	r1, #5
   12750:	bl	120b4 <dcgettext@plt>
   12754:	mov	r1, r0
   12758:	mov	r0, r4
   1275c:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   12760:	movw	r3, #30032	; 0x7550
   12764:	movt	r3, #6
   12768:	str	r0, [sp, #20]
   1276c:	ldr	r3, [r3]
   12770:	str	r3, [sp, #16]
   12774:	ldr	r0, [sp, #16]
   12778:	bl	28358 <__assert_fail@plt+0x15d64>
   1277c:	mov	r8, r0
   12780:	cmp	r8, #0
   12784:	beq	12ae4 <__assert_fail@plt+0x4f0>
   12788:	movw	r3, #3304	; 0xce8
   1278c:	movt	r3, #5
   12790:	movw	sl, #3272	; 0xcc8
   12794:	movt	sl, #5
   12798:	movw	fp, #20016	; 0x4e30
   1279c:	movt	fp, #5
   127a0:	str	r3, [sp, #24]
   127a4:	mov	r3, #1
   127a8:	str	r3, [sp, #12]
   127ac:	add	r1, sp, #136	; 0x88
   127b0:	mov	r0, r8
   127b4:	bl	28398 <__assert_fail@plt+0x15da4>
   127b8:	subs	r4, r0, #0
   127bc:	beq	1296c <__assert_fail@plt+0x378>
   127c0:	ldrb	r9, [r4]
   127c4:	ldr	r5, [r7, #76]	; 0x4c
   127c8:	cmp	r9, #0
   127cc:	beq	128f4 <__assert_fail@plt+0x300>
   127d0:	cmp	r5, #0
   127d4:	beq	128e0 <__assert_fail@plt+0x2ec>
   127d8:	mov	r0, r4
   127dc:	bl	12300 <strlen@plt>
   127e0:	str	r0, [r6, #20]
   127e4:	mov	r0, r4
   127e8:	bl	12d18 <__assert_fail@plt+0x724>
   127ec:	cmp	r0, #0
   127f0:	bne	127ac <__assert_fail@plt+0x1b8>
   127f4:	str	r0, [sp, #12]
   127f8:	mov	r0, r8
   127fc:	bl	28474 <__assert_fail@plt+0x15e80>
   12800:	ldr	r3, [sp, #12]
   12804:	cmp	r3, #0
   12808:	beq	12844 <__assert_fail@plt+0x250>
   1280c:	ldr	r3, [r7, #76]	; 0x4c
   12810:	cmp	r3, #0
   12814:	beq	12838 <__assert_fail@plt+0x244>
   12818:	ldr	r0, [sp, #16]
   1281c:	bl	11fe8 <ferror@plt>
   12820:	cmp	r0, #0
   12824:	bne	12bac <__assert_fail@plt+0x5b8>
   12828:	ldr	r0, [sp, #16]
   1282c:	bl	123fc <fclose@plt>
   12830:	cmp	r0, #0
   12834:	bne	12bac <__assert_fail@plt+0x5b8>
   12838:	ldr	r0, [sp, #28]
   1283c:	bl	15b14 <__assert_fail@plt+0x3520>
   12840:	bl	1c730 <__assert_fail@plt+0xa13c>
   12844:	ldr	r0, [r6, #28]
   12848:	add	sp, sp, #244	; 0xf4
   1284c:	ldrd	r4, [sp]
   12850:	ldrd	r6, [sp, #8]
   12854:	ldrd	r8, [sp, #16]
   12858:	ldrd	sl, [sp, #24]
   1285c:	add	sp, sp, #32
   12860:	pop	{pc}		; (ldr pc, [sp], #4)
   12864:	movw	r2, #52128	; 0xcba0
   12868:	movt	r2, #1
   1286c:	str	r2, [r7, #52]	; 0x34
   12870:	b	126ec <__assert_fail@plt+0xf8>
   12874:	mov	r1, r4
   12878:	mov	r0, #0
   1287c:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   12880:	movw	r1, #26112	; 0x6600
   12884:	movt	r1, #5
   12888:	str	r0, [sp, #20]
   1288c:	ldr	r0, [r7, #76]	; 0x4c
   12890:	bl	12504 <fopen64@plt>
   12894:	subs	r3, r0, #0
   12898:	str	r3, [sp, #16]
   1289c:	beq	12bd4 <__assert_fail@plt+0x5e0>
   128a0:	bl	123c0 <fileno@plt>
   128a4:	subs	r8, r0, #0
   128a8:	blt	12c04 <__assert_fail@plt+0x610>
   128ac:	ldrb	r3, [r7, #80]	; 0x50
   128b0:	cmp	r3, #0
   128b4:	beq	128d0 <__assert_fail@plt+0x2dc>
   128b8:	mov	r1, r8
   128bc:	add	r2, sp, #32
   128c0:	mov	r0, #3
   128c4:	bl	1215c <__fxstat64@plt>
   128c8:	subs	r1, r0, #0
   128cc:	beq	12a78 <__assert_fail@plt+0x484>
   128d0:	mov	r0, r8
   128d4:	mov	r1, #1
   128d8:	bl	28664 <__assert_fail@plt+0x16070>
   128dc:	b	12774 <__assert_fail@plt+0x180>
   128e0:	mov	r1, #1
   128e4:	bl	1ce98 <__assert_fail@plt+0xa8a4>
   128e8:	cmp	r0, #0
   128ec:	beq	127d8 <__assert_fail@plt+0x1e4>
   128f0:	b	127f8 <__assert_fail@plt+0x204>
   128f4:	cmp	r5, #0
   128f8:	beq	12948 <__assert_fail@plt+0x354>
   128fc:	mov	r0, r8
   12900:	bl	2844c <__assert_fail@plt+0x15e58>
   12904:	mov	r4, r0
   12908:	mov	r2, #5
   1290c:	mov	r1, sl
   12910:	mov	r0, r9
   12914:	bl	120b4 <dcgettext@plt>
   12918:	mov	r1, r9
   1291c:	str	r4, [sp]
   12920:	str	r0, [sp, #4]
   12924:	mov	r0, r9
   12928:	ldr	r3, [sp, #20]
   1292c:	ldr	r2, [sp, #24]
   12930:	bl	121ec <error@plt>
   12934:	mov	r3, #1
   12938:	mov	r2, #0
   1293c:	str	r2, [sp, #12]
   12940:	str	r3, [r6, #28]
   12944:	b	127ac <__assert_fail@plt+0x1b8>
   12948:	mov	r1, r4
   1294c:	mov	r0, r5
   12950:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   12954:	mov	r3, r0
   12958:	mov	r2, fp
   1295c:	mov	r0, r5
   12960:	mov	r1, #2
   12964:	bl	121ec <error@plt>
   12968:	b	12934 <__assert_fail@plt+0x340>
   1296c:	ldr	r3, [sp, #136]	; 0x88
   12970:	cmp	r3, #3
   12974:	beq	12ae4 <__assert_fail@plt+0x4f0>
   12978:	cmp	r3, #4
   1297c:	bne	129c4 <__assert_fail@plt+0x3d0>
   12980:	bl	12348 <__errno_location@plt>
   12984:	ldr	r5, [r0]
   12988:	mov	r2, #5
   1298c:	mov	r0, r4
   12990:	movw	r1, #3216	; 0xc90
   12994:	movt	r1, #5
   12998:	bl	120b4 <dcgettext@plt>
   1299c:	mov	r2, r0
   129a0:	mov	r0, r4
   129a4:	ldr	r3, [sp, #20]
   129a8:	mov	r1, r5
   129ac:	bl	121ec <error@plt>
   129b0:	mov	r3, #1
   129b4:	mov	r0, r8
   129b8:	str	r3, [r6, #28]
   129bc:	bl	28474 <__assert_fail@plt+0x15e80>
   129c0:	b	12844 <__assert_fail@plt+0x250>
   129c4:	cmp	r3, #2
   129c8:	beq	127f8 <__assert_fail@plt+0x204>
   129cc:	movw	r1, #2188	; 0x88c
   129d0:	movt	r1, #5
   129d4:	ldr	r3, [pc, #580]	; 12c20 <__assert_fail@plt+0x62c>
   129d8:	movw	r0, #3232	; 0xca0
   129dc:	movt	r0, #5
   129e0:	movw	r2, #675	; 0x2a3
   129e4:	bl	125f4 <__assert_fail@plt>
   129e8:	mov	r1, #1
   129ec:	ldr	r0, [r5, r8, lsl #2]
   129f0:	add	r4, r5, r8, lsl #2
   129f4:	bl	1ce98 <__assert_fail@plt+0xa8a4>
   129f8:	subs	r9, r0, #0
   129fc:	bne	12714 <__assert_fail@plt+0x120>
   12a00:	ldr	r3, [r7, #76]	; 0x4c
   12a04:	cmp	r3, #0
   12a08:	str	r3, [sp, #16]
   12a0c:	bne	12b24 <__assert_fail@plt+0x530>
   12a10:	ldr	r3, [sp, #16]
   12a14:	mov	r0, r4
   12a18:	str	r3, [sp, #20]
   12a1c:	bl	28320 <__assert_fail@plt+0x15d2c>
   12a20:	mov	r8, r0
   12a24:	b	12780 <__assert_fail@plt+0x18c>
   12a28:	bl	26e70 <__assert_fail@plt+0x1487c>
   12a2c:	b	12664 <__assert_fail@plt+0x70>
   12a30:	movw	r3, #30024	; 0x7548
   12a34:	movt	r3, #6
   12a38:	ldr	r0, [pc, #484]	; 12c24 <__assert_fail@plt+0x630>
   12a3c:	ldr	r9, [r3]
   12a40:	bl	120a8 <ctime@plt>
   12a44:	mov	r2, r0
   12a48:	movw	r1, #2872	; 0xb38
   12a4c:	movt	r1, #5
   12a50:	mov	r0, r9
   12a54:	bl	1233c <fprintf@plt>
   12a58:	b	126f4 <__assert_fail@plt+0x100>
   12a5c:	mov	r3, #46	; 0x2e
   12a60:	add	r0, sp, #136	; 0x88
   12a64:	strh	r3, [sp, #136]	; 0x88
   12a68:	bl	12d18 <__assert_fail@plt+0x724>
   12a6c:	cmp	r0, #0
   12a70:	beq	12844 <__assert_fail@plt+0x250>
   12a74:	b	12838 <__assert_fail@plt+0x244>
   12a78:	add	r2, sp, #136	; 0x88
   12a7c:	mov	r0, #3
   12a80:	bl	1215c <__fxstat64@plt>
   12a84:	subs	r9, r0, #0
   12a88:	bne	128d0 <__assert_fail@plt+0x2dc>
   12a8c:	ldrd	r4, [sp, #128]	; 0x80
   12a90:	ldrd	r2, [sp, #232]	; 0xe8
   12a94:	cmp	r5, r3
   12a98:	cmpeq	r4, r2
   12a9c:	bne	128d0 <__assert_fail@plt+0x2dc>
   12aa0:	ldrd	r4, [sp, #32]
   12aa4:	ldrd	r2, [sp, #136]	; 0x88
   12aa8:	cmp	r5, r3
   12aac:	cmpeq	r4, r2
   12ab0:	bne	128d0 <__assert_fail@plt+0x2dc>
   12ab4:	mov	r2, #5
   12ab8:	movw	r1, #3108	; 0xc24
   12abc:	movt	r1, #5
   12ac0:	bl	120b4 <dcgettext@plt>
   12ac4:	ldr	r2, [sp, #20]
   12ac8:	mov	r3, r0
   12acc:	mov	r1, r9
   12ad0:	mov	r0, #1
   12ad4:	str	r2, [sp]
   12ad8:	movw	r2, #3208	; 0xc88
   12adc:	movt	r2, #5
   12ae0:	bl	121ec <error@plt>
   12ae4:	bl	36e1c <__assert_fail@plt+0x24828>
   12ae8:	bl	12348 <__errno_location@plt>
   12aec:	movw	r1, #2768	; 0xad0
   12af0:	movt	r1, #5
   12af4:	ldr	r4, [r0]
   12af8:	mov	r2, #5
   12afc:	mov	r0, #0
   12b00:	bl	120b4 <dcgettext@plt>
   12b04:	mov	r2, r0
   12b08:	mov	r0, #1
   12b0c:	mov	r1, r4
   12b10:	bl	121ec <error@plt>
   12b14:	bl	12348 <__errno_location@plt>
   12b18:	movw	r1, #2836	; 0xb14
   12b1c:	movt	r1, #5
   12b20:	b	12af4 <__assert_fail@plt+0x500>
   12b24:	mov	r2, #5
   12b28:	movw	r1, #2892	; 0xb4c
   12b2c:	movt	r1, #5
   12b30:	bl	120b4 <dcgettext@plt>
   12b34:	mov	r4, r0
   12b38:	mov	r0, r9
   12b3c:	ldr	r1, [r5, r8, lsl #2]
   12b40:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   12b44:	mov	r3, r0
   12b48:	mov	r2, r4
   12b4c:	mov	r1, r9
   12b50:	mov	r0, r9
   12b54:	bl	121ec <error@plt>
   12b58:	mov	r2, #5
   12b5c:	movw	r1, #2912	; 0xb60
   12b60:	movt	r1, #5
   12b64:	mov	r0, r9
   12b68:	bl	120b4 <dcgettext@plt>
   12b6c:	mov	r3, r0
   12b70:	movw	r2, #20016	; 0x4e30
   12b74:	movt	r2, #5
   12b78:	mov	r1, r9
   12b7c:	mov	r0, #1
   12b80:	bl	121ec <error@plt>
   12b84:	mov	r2, #5
   12b88:	movw	r1, #2968	; 0xb98
   12b8c:	movt	r1, #5
   12b90:	bl	120b4 <dcgettext@plt>
   12b94:	mov	r3, r0
   12b98:	movw	r2, #24288	; 0x5ee0
   12b9c:	movt	r2, #5
   12ba0:	mov	r1, r5
   12ba4:	mov	r0, #1
   12ba8:	bl	121ec <error@plt>
   12bac:	mov	r2, #5
   12bb0:	movw	r1, #3316	; 0xcf4
   12bb4:	movt	r1, #5
   12bb8:	mov	r0, #0
   12bbc:	bl	120b4 <dcgettext@plt>
   12bc0:	mov	r2, r0
   12bc4:	mov	r1, #0
   12bc8:	ldr	r3, [sp, #20]
   12bcc:	mov	r0, #1
   12bd0:	bl	121ec <error@plt>
   12bd4:	bl	12348 <__errno_location@plt>
   12bd8:	ldr	r4, [r0]
   12bdc:	mov	r2, #5
   12be0:	movw	r1, #3072	; 0xc00
   12be4:	movt	r1, #5
   12be8:	ldr	r0, [sp, #16]
   12bec:	bl	120b4 <dcgettext@plt>
   12bf0:	mov	r2, r0
   12bf4:	mov	r0, #1
   12bf8:	ldr	r3, [sp, #20]
   12bfc:	mov	r1, r4
   12c00:	bl	121ec <error@plt>
   12c04:	movw	r1, #2188	; 0x88c
   12c08:	movt	r1, #5
   12c0c:	ldr	r3, [pc, #12]	; 12c20 <__assert_fail@plt+0x62c>
   12c10:	movw	r0, #3100	; 0xc1c
   12c14:	movt	r0, #5
   12c18:	movw	r2, #610	; 0x262
   12c1c:	bl	125f4 <__assert_fail@plt>
   12c20:	strdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   12c24:	andeq	r7, r6, r8, lsl #29
   12c28:	mov	fp, #0
   12c2c:	mov	lr, #0
   12c30:	pop	{r1}		; (ldr r1, [sp], #4)
   12c34:	mov	r2, sp
   12c38:	push	{r2}		; (str r2, [sp, #-4]!)
   12c3c:	push	{r0}		; (str r0, [sp, #-4]!)
   12c40:	ldr	ip, [pc, #16]	; 12c58 <__assert_fail@plt+0x664>
   12c44:	push	{ip}		; (str ip, [sp, #-4]!)
   12c48:	ldr	r0, [pc, #12]	; 12c5c <__assert_fail@plt+0x668>
   12c4c:	ldr	r3, [pc, #12]	; 12c60 <__assert_fail@plt+0x66c>
   12c50:	bl	1224c <__libc_start_main@plt>
   12c54:	bl	125a0 <abort@plt>
   12c58:	andeq	r0, r5, r0, ror r7
   12c5c:	andeq	r2, r1, r0, lsl #12
   12c60:	andeq	r0, r5, r0, lsl r7
   12c64:	ldr	r3, [pc, #20]	; 12c80 <__assert_fail@plt+0x68c>
   12c68:	ldr	r2, [pc, #20]	; 12c84 <__assert_fail@plt+0x690>
   12c6c:	add	r3, pc, r3
   12c70:	ldr	r2, [r3, r2]
   12c74:	cmp	r2, #0
   12c78:	bxeq	lr
   12c7c:	b	122ac <__gmon_start__@plt>
   12c80:	andeq	r4, r5, ip, lsl #7
   12c84:	andeq	r0, r0, r0, lsl #5
   12c88:	ldr	r0, [pc, #24]	; 12ca8 <__assert_fail@plt+0x6b4>
   12c8c:	ldr	r3, [pc, #24]	; 12cac <__assert_fail@plt+0x6b8>
   12c90:	cmp	r3, r0
   12c94:	bxeq	lr
   12c98:	ldr	r3, [pc, #16]	; 12cb0 <__assert_fail@plt+0x6bc>
   12c9c:	cmp	r3, #0
   12ca0:	bxeq	lr
   12ca4:	bx	r3
   12ca8:	andeq	r7, r6, r8, lsr r5
   12cac:	andeq	r7, r6, r8, lsr r5
   12cb0:	andeq	r0, r0, r0
   12cb4:	ldr	r0, [pc, #36]	; 12ce0 <__assert_fail@plt+0x6ec>
   12cb8:	ldr	r1, [pc, #36]	; 12ce4 <__assert_fail@plt+0x6f0>
   12cbc:	sub	r1, r1, r0
   12cc0:	asr	r1, r1, #2
   12cc4:	add	r1, r1, r1, lsr #31
   12cc8:	asrs	r1, r1, #1
   12ccc:	bxeq	lr
   12cd0:	ldr	r3, [pc, #16]	; 12ce8 <__assert_fail@plt+0x6f4>
   12cd4:	cmp	r3, #0
   12cd8:	bxeq	lr
   12cdc:	bx	r3
   12ce0:	andeq	r7, r6, r8, lsr r5
   12ce4:	andeq	r7, r6, r8, lsr r5
   12ce8:	andeq	r0, r0, r0
   12cec:	push	{r4, lr}
   12cf0:	ldr	r4, [pc, #24]	; 12d10 <__assert_fail@plt+0x71c>
   12cf4:	ldrb	r3, [r4]
   12cf8:	cmp	r3, #0
   12cfc:	popne	{r4, pc}
   12d00:	bl	12c88 <__assert_fail@plt+0x694>
   12d04:	mov	r3, #1
   12d08:	strb	r3, [r4]
   12d0c:	pop	{r4, pc}
   12d10:	andeq	r7, r6, r8, asr r5
   12d14:	b	12cb4 <__assert_fail@plt+0x6c0>
   12d18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12d1c:	movw	r5, #32320	; 0x7e40
   12d20:	movt	r5, #6
   12d24:	strd	r6, [sp, #8]
   12d28:	strd	r8, [sp, #16]
   12d2c:	movw	r9, #29324	; 0x728c
   12d30:	movt	r9, #6
   12d34:	strd	sl, [sp, #24]
   12d38:	str	lr, [sp, #32]
   12d3c:	sub	sp, sp, #276	; 0x114
   12d40:	str	r0, [sp, #48]	; 0x30
   12d44:	bl	12300 <strlen@plt>
   12d48:	ldr	r1, [r9]
   12d4c:	str	r0, [r5, #20]
   12d50:	tst	r1, #512	; 0x200
   12d54:	beq	12d6c <__assert_fail@plt+0x778>
   12d58:	ldr	r2, [r9, #4]
   12d5c:	mvn	r3, #99	; 0x63
   12d60:	str	r3, [r5, #16]
   12d64:	cmp	r2, #0
   12d68:	strlt	r3, [r9, #4]
   12d6c:	ldr	r3, [sp, #48]	; 0x30
   12d70:	movw	fp, #32364	; 0x7e6c
   12d74:	movt	fp, #6
   12d78:	mov	r2, #0
   12d7c:	str	r3, [sp, #56]	; 0x38
   12d80:	ldr	r3, [fp, #48]	; 0x30
   12d84:	str	r2, [sp, #60]	; 0x3c
   12d88:	cmp	r3, #1
   12d8c:	beq	134f8 <__assert_fail@plt+0xf04>
   12d90:	cmp	r3, r2
   12d94:	beq	134ec <__assert_fail@plt+0xef8>
   12d98:	cmp	r3, #2
   12d9c:	orreq	r1, r1, #17
   12da0:	streq	r1, [r9]
   12da4:	ldrb	r3, [fp, #13]
   12da8:	mov	r2, #0
   12dac:	add	r0, sp, #56	; 0x38
   12db0:	cmp	r3, #0
   12db4:	orrne	r1, r1, #64	; 0x40
   12db8:	strne	r1, [r9]
   12dbc:	bl	3a120 <__assert_fail@plt+0x27b2c>
   12dc0:	mov	sl, r0
   12dc4:	bl	12348 <__errno_location@plt>
   12dc8:	cmp	sl, #0
   12dcc:	str	r0, [sp, #20]
   12dd0:	beq	1359c <__assert_fail@plt+0xfa8>
   12dd4:	movw	r3, #30024	; 0x7548
   12dd8:	movt	r3, #6
   12ddc:	mov	r7, #-2147483648	; 0x80000000
   12de0:	mov	r8, sl
   12de4:	str	r3, [sp, #40]	; 0x28
   12de8:	movw	r3, #2084	; 0x824
   12dec:	movt	r3, #5
   12df0:	str	r3, [sp, #44]	; 0x2c
   12df4:	movw	r3, #2076	; 0x81c
   12df8:	movt	r3, #5
   12dfc:	str	r3, [sp, #52]	; 0x34
   12e00:	ldr	r2, [sp, #20]
   12e04:	mov	r3, #0
   12e08:	mov	r0, r8
   12e0c:	str	r3, [r2]
   12e10:	bl	3a888 <__assert_fail@plt+0x28294>
   12e14:	subs	r4, r0, #0
   12e18:	beq	13304 <__assert_fail@plt+0xd10>
   12e1c:	ldrb	r3, [r5, #32]
   12e20:	ldr	sl, [r4, #48]	; 0x30
   12e24:	cmp	r3, #0
   12e28:	beq	12e3c <__assert_fail@plt+0x848>
   12e2c:	cmp	r7, sl
   12e30:	beq	12e3c <__assert_fail@plt+0x848>
   12e34:	bl	1c64c <__assert_fail@plt+0xa058>
   12e38:	ldr	sl, [r4, #48]	; 0x30
   12e3c:	mov	r0, #0
   12e40:	ldr	r3, [r4, #80]	; 0x50
   12e44:	strb	r0, [r5, #4]
   12e48:	ldr	r2, [fp, #44]	; 0x2c
   12e4c:	str	r3, [r5, #8]
   12e50:	subs	r3, r3, r0
   12e54:	movne	r3, #1
   12e58:	tst	r2, #4
   12e5c:	strb	r3, [r5, #5]
   12e60:	strb	r0, [r5, #40]	; 0x28
   12e64:	bne	131a4 <__assert_fail@plt+0xbb0>
   12e68:	ldrh	r1, [r4, #56]	; 0x38
   12e6c:	ldr	r3, [r9]
   12e70:	cmp	r1, #6
   12e74:	and	r3, r3, #512	; 0x200
   12e78:	beq	13170 <__assert_fail@plt+0xb7c>
   12e7c:	ldr	r0, [r4, #48]	; 0x30
   12e80:	ldr	ip, [r9, #8]
   12e84:	clz	r2, r0
   12e88:	lsr	r2, r2, #5
   12e8c:	cmp	r0, ip
   12e90:	orrgt	r2, r2, #1
   12e94:	cmp	r2, #0
   12e98:	beq	13198 <__assert_fail@plt+0xba4>
   12e9c:	cmp	r3, #0
   12ea0:	beq	12ed8 <__assert_fail@plt+0x8e4>
   12ea4:	ldr	r0, [r9, #4]
   12ea8:	cmp	r0, #0
   12eac:	bge	13184 <__assert_fail@plt+0xb90>
   12eb0:	ldr	r0, [r8, #32]
   12eb4:	cmn	r0, #100	; 0x64
   12eb8:	cmpne	r0, #0
   12ebc:	blt	135ec <__assert_fail@plt+0xff8>
   12ec0:	ldr	r3, [r9, #4]
   12ec4:	str	r0, [r5, #16]
   12ec8:	cmp	r3, #0
   12ecc:	blt	13234 <__assert_fail@plt+0xc40>
   12ed0:	ldrh	r1, [r4, #56]	; 0x38
   12ed4:	ldr	r0, [r4, #48]	; 0x30
   12ed8:	cmp	r1, #7
   12edc:	str	r0, [r9, #8]
   12ee0:	ldrd	r2, [r4, #160]	; 0xa0
   12ee4:	strd	r2, [sp, #160]	; 0xa0
   12ee8:	beq	13270 <__assert_fail@plt+0xc7c>
   12eec:	cmp	r1, #4
   12ef0:	beq	13250 <__assert_fail@plt+0xc5c>
   12ef4:	cmp	r1, #2
   12ef8:	beq	133cc <__assert_fail@plt+0xdd8>
   12efc:	cmp	r1, #13
   12f00:	beq	132d0 <__assert_fail@plt+0xcdc>
   12f04:	cmp	r1, #10
   12f08:	bne	12f3c <__assert_fail@plt+0x948>
   12f0c:	cmp	r0, #0
   12f10:	beq	13270 <__assert_fail@plt+0xc7c>
   12f14:	add	r1, sp, #168	; 0xa8
   12f18:	ldr	r0, [r4, #24]
   12f1c:	ldr	r3, [fp, #52]	; 0x34
   12f20:	blx	r3
   12f24:	cmp	r0, #0
   12f28:	bne	1345c <__assert_fail@plt+0xe68>
   12f2c:	ldr	r1, [r4, #28]
   12f30:	ldr	r0, [r4, #32]
   12f34:	bl	1d704 <__assert_fail@plt+0xb110>
   12f38:	ldrh	r1, [r4, #56]	; 0x38
   12f3c:	sub	r3, r1, #10
   12f40:	cmp	r3, #1
   12f44:	bls	13080 <__assert_fail@plt+0xa8c>
   12f48:	add	r3, sp, #64	; 0x40
   12f4c:	movw	ip, #257	; 0x101
   12f50:	mov	r0, r3
   12f54:	mov	r2, #104	; 0x68
   12f58:	add	r1, r4, #64	; 0x40
   12f5c:	strh	ip, [r5, #4]
   12f60:	bl	12024 <memcpy@plt>
   12f64:	ldr	r6, [sp, #80]	; 0x50
   12f68:	mov	r3, r0
   12f6c:	cmp	r6, #0
   12f70:	str	r6, [r5, #8]
   12f74:	str	r6, [sp, #168]	; 0xa8
   12f78:	beq	13344 <__assert_fail@plt+0xd50>
   12f7c:	ldr	r2, [r4, #48]	; 0x30
   12f80:	str	r2, [r5]
   12f84:	mov	ip, #0
   12f88:	add	r2, r4, #168	; 0xa8
   12f8c:	ldr	r1, [r4, #28]
   12f90:	add	r0, sp, #168	; 0xa8
   12f94:	str	ip, [sp]
   12f98:	bl	1cd18 <__assert_fail@plt+0xa724>
   12f9c:	cmp	r0, #0
   12fa0:	beq	13078 <__assert_fail@plt+0xa84>
   12fa4:	ldr	r3, [sp, #168]	; 0xa8
   12fa8:	ldrh	r1, [r4, #56]	; 0x38
   12fac:	and	r3, r3, #61440	; 0xf000
   12fb0:	cmp	r3, #16384	; 0x4000
   12fb4:	mov	r3, r1
   12fb8:	bne	130b0 <__assert_fail@plt+0xabc>
   12fbc:	cmp	r1, #11
   12fc0:	beq	134a8 <__assert_fail@plt+0xeb4>
   12fc4:	ldr	r2, [fp, #4]
   12fc8:	mov	r7, #1
   12fcc:	cmp	r2, #0
   12fd0:	blt	12fe0 <__assert_fail@plt+0x9ec>
   12fd4:	ldr	r1, [r4, #48]	; 0x30
   12fd8:	cmp	r1, r2
   12fdc:	bge	133a0 <__assert_fail@plt+0xdac>
   12fe0:	mov	r6, #0
   12fe4:	ldr	r2, [fp, #44]	; 0x2c
   12fe8:	cmp	r3, #1
   12fec:	and	r2, r2, #4
   12ff0:	beq	13294 <__assert_fail@plt+0xca0>
   12ff4:	cmp	r3, #6
   12ff8:	bne	13008 <__assert_fail@plt+0xa14>
   12ffc:	ldrb	r1, [fp]
   13000:	cmp	r1, #0
   13004:	bne	13280 <__assert_fail@plt+0xc8c>
   13008:	ldr	r1, [fp, #8]
   1300c:	ldr	r0, [r4, #48]	; 0x30
   13010:	cmp	r0, r1
   13014:	blt	130f8 <__assert_fail@plt+0xb04>
   13018:	cmp	r2, #0
   1301c:	bne	13104 <__assert_fail@plt+0xb10>
   13020:	cmp	r6, #0
   13024:	bne	13070 <__assert_fail@plt+0xa7c>
   13028:	ldr	r1, [r4, #24]
   1302c:	sub	r3, r3, #10
   13030:	cmp	r3, #1
   13034:	ldr	r2, [r8, #32]
   13038:	movls	r3, #0
   1303c:	movhi	r3, #1
   13040:	strb	r3, [r5, #4]
   13044:	str	r1, [r5, #12]
   13048:	str	r2, [r5, #16]
   1304c:	bl	16cd0 <__assert_fail@plt+0x46dc>
   13050:	mov	r2, r0
   13054:	add	r1, sp, #64	; 0x40
   13058:	ldr	r0, [r4, #28]
   1305c:	bl	1d5a8 <__assert_fail@plt+0xafb4>
   13060:	ldrb	r3, [r5, #24]
   13064:	cmp	r3, #0
   13068:	bne	13494 <__assert_fail@plt+0xea0>
   1306c:	ldrh	r3, [r4, #56]	; 0x38
   13070:	cmp	r3, #6
   13074:	beq	13288 <__assert_fail@plt+0xc94>
   13078:	mov	r7, sl
   1307c:	b	12e00 <__assert_fail@plt+0x80c>
   13080:	ldrb	r3, [r5, #4]
   13084:	cmp	r3, #0
   13088:	bne	13608 <__assert_fail@plt+0x1014>
   1308c:	cmp	r1, #11
   13090:	ldr	r3, [r5, #8]
   13094:	bne	132ac <__assert_fail@plt+0xcb8>
   13098:	str	r3, [sp, #168]	; 0xa8
   1309c:	cmp	r3, #0
   130a0:	ldr	r3, [r4, #48]	; 0x30
   130a4:	str	r3, [r5]
   130a8:	bne	13624 <__assert_fail@plt+0x1030>
   130ac:	ldrh	r1, [r4, #56]	; 0x38
   130b0:	sub	r6, r1, #1
   130b4:	mov	r3, r1
   130b8:	cmp	r1, #6
   130bc:	cmpne	r6, #1
   130c0:	movls	r6, #1
   130c4:	movhi	r6, #0
   130c8:	bls	12fbc <__assert_fail@plt+0x9c8>
   130cc:	ldr	r2, [fp, #4]
   130d0:	cmp	r2, #0
   130d4:	movge	r7, r6
   130d8:	bge	12fd4 <__assert_fail@plt+0x9e0>
   130dc:	ldr	r1, [fp, #8]
   130e0:	mov	r7, r6
   130e4:	ldr	r0, [r4, #48]	; 0x30
   130e8:	ldr	r2, [fp, #44]	; 0x2c
   130ec:	cmp	r0, r1
   130f0:	and	r2, r2, #4
   130f4:	bge	13018 <__assert_fail@plt+0xa24>
   130f8:	cmp	r2, #0
   130fc:	beq	13070 <__assert_fail@plt+0xa7c>
   13100:	mov	r6, #1
   13104:	ldr	r3, [sp, #40]	; 0x28
   13108:	mov	r0, #0
   1310c:	ldr	r2, [r4, #28]
   13110:	ldr	r1, [fp, #72]	; 0x48
   13114:	ldr	r3, [r3]
   13118:	str	r3, [sp, #24]
   1311c:	bl	3431c <__assert_fail@plt+0x21d28>
   13120:	ldrh	r2, [r4, #56]	; 0x38
   13124:	str	r0, [sp, #28]
   13128:	sub	r3, r2, #1
   1312c:	cmp	r3, #13
   13130:	bhi	13478 <__assert_fail@plt+0xe84>
   13134:	movw	r2, #1944	; 0x798
   13138:	movt	r2, #5
   1313c:	ldr	r3, [r2, r3, lsl #2]
   13140:	movw	r1, #2548	; 0x9f4
   13144:	movt	r1, #5
   13148:	str	r7, [sp]
   1314c:	ldrb	ip, [r5, #5]
   13150:	ldrb	lr, [r5, #4]
   13154:	ldr	r0, [sp, #24]
   13158:	ldr	r2, [sp, #28]
   1315c:	stmib	sp, {r6, lr}
   13160:	str	ip, [sp, #12]
   13164:	bl	1233c <fprintf@plt>
   13168:	ldrh	r3, [r4, #56]	; 0x38
   1316c:	b	13020 <__assert_fail@plt+0xa2c>
   13170:	cmp	r3, #0
   13174:	bne	12ea4 <__assert_fail@plt+0x8b0>
   13178:	ldr	r3, [r4, #48]	; 0x30
   1317c:	str	r3, [r9, #8]
   13180:	b	12f48 <__assert_fail@plt+0x954>
   13184:	bl	125ac <close@plt>
   13188:	ldr	r3, [r9]
   1318c:	mvn	r2, #0
   13190:	str	r2, [r9, #4]
   13194:	and	r3, r3, #512	; 0x200
   13198:	cmp	r3, #0
   1319c:	bne	12eb0 <__assert_fail@plt+0x8bc>
   131a0:	b	12ed0 <__assert_fail@plt+0x8dc>
   131a4:	ldr	r3, [sp, #40]	; 0x28
   131a8:	ldr	r2, [r4, #28]
   131ac:	ldr	r1, [fp, #72]	; 0x48
   131b0:	ldr	r3, [r3]
   131b4:	str	r3, [sp, #24]
   131b8:	bl	3431c <__assert_fail@plt+0x21d28>
   131bc:	ldrh	r2, [r4, #56]	; 0x38
   131c0:	str	r0, [sp, #28]
   131c4:	sub	r1, r2, #1
   131c8:	cmp	r1, #13
   131cc:	bhi	13388 <__assert_fail@plt+0xd94>
   131d0:	movw	r3, #1944	; 0x798
   131d4:	movt	r3, #5
   131d8:	ldr	r6, [r3, r1, lsl #2]
   131dc:	mov	r0, #1
   131e0:	ldr	r2, [r4, #28]
   131e4:	ldr	r3, [r4, #48]	; 0x30
   131e8:	ldr	r1, [fp, #72]	; 0x48
   131ec:	ldr	r7, [r9, #8]
   131f0:	str	r3, [sp, #32]
   131f4:	bl	3431c <__assert_fail@plt+0x21d28>
   131f8:	str	r0, [sp, #36]	; 0x24
   131fc:	mov	r0, #2
   13200:	ldr	r2, [r4, #24]
   13204:	ldr	r1, [fp, #72]	; 0x48
   13208:	bl	3431c <__assert_fail@plt+0x21d28>
   1320c:	mov	r3, r6
   13210:	str	r0, [sp, #12]
   13214:	ldr	r1, [sp, #32]
   13218:	ldr	ip, [sp, #36]	; 0x24
   1321c:	ldr	r0, [sp, #24]
   13220:	ldr	r2, [sp, #28]
   13224:	stm	sp, {r1, r7, ip}
   13228:	ldr	r1, [sp, #44]	; 0x2c
   1322c:	bl	1233c <fprintf@plt>
   13230:	b	12e68 <__assert_fail@plt+0x874>
   13234:	cmn	r0, #100	; 0x64
   13238:	beq	13240 <__assert_fail@plt+0xc4c>
   1323c:	bl	286d8 <__assert_fail@plt+0x160e4>
   13240:	ldrh	r1, [r4, #56]	; 0x38
   13244:	str	r0, [r9, #4]
   13248:	ldr	r0, [r4, #48]	; 0x30
   1324c:	b	12ed8 <__assert_fail@plt+0x8e4>
   13250:	ldr	r1, [r4, #28]
   13254:	ldr	r0, [r4, #32]
   13258:	bl	1d704 <__assert_fail@plt+0xb110>
   1325c:	ldrb	r3, [fp]
   13260:	cmp	r3, #0
   13264:	bne	13078 <__assert_fail@plt+0xa84>
   13268:	ldrh	r1, [r4, #56]	; 0x38
   1326c:	b	12f3c <__assert_fail@plt+0x948>
   13270:	ldr	r1, [r4, #28]
   13274:	ldr	r0, [r4, #32]
   13278:	bl	1d704 <__assert_fail@plt+0xb110>
   1327c:	b	13078 <__assert_fail@plt+0xa84>
   13280:	cmp	r2, #0
   13284:	bne	13100 <__assert_fail@plt+0xb0c>
   13288:	mov	r3, #0
   1328c:	strb	r3, [r5, #24]
   13290:	b	13078 <__assert_fail@plt+0xa84>
   13294:	ldrb	r1, [fp]
   13298:	cmp	r1, #0
   1329c:	bne	13008 <__assert_fail@plt+0xa14>
   132a0:	cmp	r2, #0
   132a4:	beq	13078 <__assert_fail@plt+0xa84>
   132a8:	b	13100 <__assert_fail@plt+0xb0c>
   132ac:	cmp	r3, #0
   132b0:	beq	13098 <__assert_fail@plt+0xaa4>
   132b4:	movw	r1, #2188	; 0x88c
   132b8:	movt	r1, #5
   132bc:	ldr	r3, [pc, #872]	; 1362c <__assert_fail@plt+0x1038>
   132c0:	movw	r0, #2456	; 0x998
   132c4:	movt	r0, #5
   132c8:	movw	r2, #381	; 0x17d
   132cc:	bl	125f4 <__assert_fail@plt>
   132d0:	add	r1, sp, #168	; 0xa8
   132d4:	ldr	r0, [r4, #24]
   132d8:	ldr	r3, [fp, #52]	; 0x34
   132dc:	blx	r3
   132e0:	cmp	r0, #0
   132e4:	beq	13268 <__assert_fail@plt+0xc74>
   132e8:	ldr	r3, [sp, #20]
   132ec:	ldr	r0, [r3]
   132f0:	cmp	r0, #40	; 0x28
   132f4:	bne	13268 <__assert_fail@plt+0xc74>
   132f8:	ldr	r1, [r4, #28]
   132fc:	bl	1d704 <__assert_fail@plt+0xb110>
   13300:	b	13078 <__assert_fail@plt+0xa84>
   13304:	ldr	r3, [sp, #20]
   13308:	ldr	r6, [r3]
   1330c:	cmp	r6, #0
   13310:	bne	134bc <__assert_fail@plt+0xec8>
   13314:	mov	r0, r8
   13318:	bl	3a680 <__assert_fail@plt+0x2808c>
   1331c:	cmp	r0, #0
   13320:	moveq	r0, #1
   13324:	bne	1355c <__assert_fail@plt+0xf68>
   13328:	add	sp, sp, #276	; 0x114
   1332c:	ldrd	r4, [sp]
   13330:	ldrd	r6, [sp, #8]
   13334:	ldrd	r8, [sp, #16]
   13338:	ldrd	sl, [sp, #24]
   1333c:	add	sp, sp, #32
   13340:	pop	{pc}		; (ldr pc, [sp], #4)
   13344:	mov	r2, #5
   13348:	movw	r1, #2504	; 0x9c8
   1334c:	movt	r1, #5
   13350:	mov	r0, r6
   13354:	bl	120b4 <dcgettext@plt>
   13358:	mov	r7, r0
   1335c:	mov	r0, r6
   13360:	ldr	r2, [r4, #28]
   13364:	ldr	r1, [fp, #72]	; 0x48
   13368:	bl	3431c <__assert_fail@plt+0x21d28>
   1336c:	mov	r3, r0
   13370:	mov	r2, r7
   13374:	mov	r1, r6
   13378:	mov	r0, r6
   1337c:	bl	121ec <error@plt>
   13380:	ldr	r3, [sp, #168]	; 0xa8
   13384:	b	1309c <__assert_fail@plt+0xaa8>
   13388:	movw	r0, #30044	; 0x755c
   1338c:	movt	r0, #6
   13390:	ldr	r1, [sp, #52]	; 0x34
   13394:	mov	r6, r0
   13398:	bl	124b0 <sprintf@plt>
   1339c:	b	131dc <__assert_fail@plt+0xbe8>
   133a0:	mov	r2, #4
   133a4:	mov	r1, r4
   133a8:	mov	r0, r8
   133ac:	bl	3b09c <__assert_fail@plt+0x28aa8>
   133b0:	ldr	r2, [fp, #4]
   133b4:	ldr	r6, [r4, #48]	; 0x30
   133b8:	ldrh	r3, [r4, #56]	; 0x38
   133bc:	cmp	r6, r2
   133c0:	movle	r6, #0
   133c4:	movgt	r6, #1
   133c8:	b	12fe4 <__assert_fail@plt+0x9f0>
   133cc:	ldr	r3, [r4, #80]	; 0x50
   133d0:	and	r3, r3, #61440	; 0xf000
   133d4:	cmp	r3, #40960	; 0xa000
   133d8:	beq	13504 <__assert_fail@plt+0xf10>
   133dc:	mov	r2, #5
   133e0:	movw	r1, #2360	; 0x938
   133e4:	movt	r1, #5
   133e8:	mov	r0, #0
   133ec:	bl	120b4 <dcgettext@plt>
   133f0:	str	r0, [sp, #24]
   133f4:	mov	r0, #0
   133f8:	ldr	r1, [r4, #28]
   133fc:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   13400:	ldr	r3, [r4]
   13404:	mov	r7, r0
   13408:	ldr	r1, [fp, #72]	; 0x48
   1340c:	ldr	r4, [r3, #40]	; 0x28
   13410:	cmp	r4, #0
   13414:	beq	13548 <__assert_fail@plt+0xf54>
   13418:	ldr	r6, [r3, #28]
   1341c:	mov	r3, #0
   13420:	mov	r0, #1
   13424:	ldrb	r2, [r6, r4]
   13428:	strb	r3, [r6, r4]
   1342c:	str	r2, [sp, #28]
   13430:	mov	r2, r6
   13434:	bl	3431c <__assert_fail@plt+0x21d28>
   13438:	ldr	r2, [sp, #28]
   1343c:	strb	r2, [r6, r4]
   13440:	mov	r1, #0
   13444:	mov	r3, r7
   13448:	str	r0, [sp]
   1344c:	mov	r0, r1
   13450:	ldr	r2, [sp, #24]
   13454:	bl	121ec <error@plt>
   13458:	b	1353c <__assert_fail@plt+0xf48>
   1345c:	ldr	r3, [sp, #20]
   13460:	ldr	r1, [r4, #28]
   13464:	ldr	r0, [r3]
   13468:	cmp	r0, #40	; 0x28
   1346c:	bne	12f30 <__assert_fail@plt+0x93c>
   13470:	bl	1d704 <__assert_fail@plt+0xb110>
   13474:	b	13078 <__assert_fail@plt+0xa84>
   13478:	movw	r0, #30044	; 0x755c
   1347c:	movt	r0, #6
   13480:	ldr	r1, [sp, #52]	; 0x34
   13484:	bl	124b0 <sprintf@plt>
   13488:	movw	r3, #30044	; 0x755c
   1348c:	movt	r3, #6
   13490:	b	13140 <__assert_fail@plt+0xb4c>
   13494:	mov	r2, #4
   13498:	mov	r1, r4
   1349c:	mov	r0, r8
   134a0:	bl	3b09c <__assert_fail@plt+0x28aa8>
   134a4:	b	1306c <__assert_fail@plt+0xa78>
   134a8:	mov	r1, r4
   134ac:	mov	r2, #1
   134b0:	mov	r0, r8
   134b4:	bl	3b09c <__assert_fail@plt+0x28aa8>
   134b8:	b	13078 <__assert_fail@plt+0xa84>
   134bc:	ldr	r1, [sp, #48]	; 0x30
   134c0:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   134c4:	mov	r3, r0
   134c8:	mov	r1, r6
   134cc:	mov	r0, r4
   134d0:	movw	r2, #2640	; 0xa50
   134d4:	movt	r2, #5
   134d8:	bl	121ec <error@plt>
   134dc:	mov	r3, #1
   134e0:	mov	r0, r4
   134e4:	str	r3, [r5, #28]
   134e8:	b	13328 <__assert_fail@plt+0xd34>
   134ec:	orr	r1, r1, #16
   134f0:	str	r1, [r9]
   134f4:	b	12da4 <__assert_fail@plt+0x7b0>
   134f8:	orr	r1, r1, #3
   134fc:	str	r1, [r9]
   13500:	b	12da4 <__assert_fail@plt+0x7b0>
   13504:	mov	r2, #5
   13508:	movw	r1, #2236	; 0x8bc
   1350c:	movt	r1, #5
   13510:	mov	r0, #0
   13514:	bl	120b4 <dcgettext@plt>
   13518:	mov	r6, r0
   1351c:	mov	r0, #0
   13520:	ldr	r1, [r4, #28]
   13524:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   13528:	mov	r1, #0
   1352c:	mov	r3, r0
   13530:	mov	r2, r6
   13534:	mov	r0, r1
   13538:	bl	121ec <error@plt>
   1353c:	mov	r3, #1
   13540:	str	r3, [r5, #28]
   13544:	b	13078 <__assert_fail@plt+0xa84>
   13548:	movw	r2, #9500	; 0x251c
   1354c:	movt	r2, #5
   13550:	mov	r0, #1
   13554:	bl	3431c <__assert_fail@plt+0x21d28>
   13558:	b	13440 <__assert_fail@plt+0xe4c>
   1355c:	ldr	r3, [sp, #20]
   13560:	mov	r2, #5
   13564:	movw	r1, #2700	; 0xa8c
   13568:	movt	r1, #5
   1356c:	mov	r0, r6
   13570:	ldr	r4, [r3]
   13574:	bl	120b4 <dcgettext@plt>
   13578:	mov	r2, r0
   1357c:	mov	r0, r6
   13580:	ldr	r3, [sp, #48]	; 0x30
   13584:	mov	r1, r4
   13588:	bl	121ec <error@plt>
   1358c:	mov	r3, #1
   13590:	mov	r0, r6
   13594:	str	r3, [r5, #28]
   13598:	b	13328 <__assert_fail@plt+0xd34>
   1359c:	mov	r3, r0
   135a0:	mov	r2, #5
   135a4:	ldr	r4, [r3]
   135a8:	movw	r1, #2056	; 0x808
   135ac:	movt	r1, #5
   135b0:	mov	r0, sl
   135b4:	bl	120b4 <dcgettext@plt>
   135b8:	mov	r6, r0
   135bc:	mov	r0, sl
   135c0:	ldr	r1, [sp, #48]	; 0x30
   135c4:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   135c8:	mov	r3, r0
   135cc:	mov	r2, r6
   135d0:	mov	r0, sl
   135d4:	mov	r1, r4
   135d8:	bl	121ec <error@plt>
   135dc:	mov	r3, #1
   135e0:	mov	r0, r3
   135e4:	str	r3, [r5, #28]
   135e8:	b	13328 <__assert_fail@plt+0xd34>
   135ec:	movw	r1, #2188	; 0x88c
   135f0:	movt	r1, #5
   135f4:	ldr	r3, [pc, #52]	; 13630 <__assert_fail@plt+0x103c>
   135f8:	movw	r0, #2200	; 0x898
   135fc:	movt	r0, #5
   13600:	mov	r2, #107	; 0x6b
   13604:	bl	125f4 <__assert_fail@plt>
   13608:	movw	r1, #2188	; 0x88c
   1360c:	movt	r1, #5
   13610:	ldr	r3, [pc, #20]	; 1362c <__assert_fail@plt+0x1038>
   13614:	movw	r0, #2436	; 0x984
   13618:	movt	r0, #5
   1361c:	mov	r2, #380	; 0x17c
   13620:	bl	125f4 <__assert_fail@plt>
   13624:	add	r3, sp, #64	; 0x40
   13628:	b	12f84 <__assert_fail@plt+0x990>
   1362c:	ldrdeq	r0, [r5], -ip
   13630:	ldrdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   13634:	movw	r3, #29324	; 0x728c
   13638:	movt	r3, #6
   1363c:	ldr	r3, [r3]
   13640:	str	r3, [r0]
   13644:	mov	r0, #1
   13648:	bx	lr
   1364c:	andeq	r0, r0, r0
   13650:	str	r4, [sp, #-8]!
   13654:	str	lr, [sp, #4]
   13658:	bl	1c730 <__assert_fail@plt+0xa13c>
   1365c:	movw	r3, #32320	; 0x7e40
   13660:	movt	r3, #6
   13664:	ldr	r0, [r3, #28]
   13668:	bl	122d0 <exit@plt>
   1366c:	movw	r3, #32364	; 0x7e6c
   13670:	movt	r3, #6
   13674:	ldrb	r3, [r3]
   13678:	cmp	r3, #0
   1367c:	beq	136b0 <__assert_fail@plt+0x10bc>
   13680:	movw	r3, #32320	; 0x7e40
   13684:	movt	r3, #6
   13688:	ldrb	r2, [r3, #4]
   1368c:	cmp	r2, #0
   13690:	beq	136b8 <__assert_fail@plt+0x10c4>
   13694:	cmp	r1, #0
   13698:	beq	136b0 <__assert_fail@plt+0x10bc>
   1369c:	ldr	r2, [r1, #16]
   136a0:	and	r2, r2, #61440	; 0xf000
   136a4:	cmp	r2, #16384	; 0x4000
   136a8:	moveq	r2, #1
   136ac:	strbeq	r2, [r3, #24]
   136b0:	mov	r0, #1
   136b4:	bx	lr
   136b8:	movw	r3, #3464	; 0xd88
   136bc:	movt	r3, #5
   136c0:	str	r4, [sp, #-8]!
   136c4:	movw	r1, #3576	; 0xdf8
   136c8:	movt	r1, #5
   136cc:	str	lr, [sp, #4]
   136d0:	movw	r0, #3584	; 0xe00
   136d4:	movt	r0, #5
   136d8:	movw	r2, #853	; 0x355
   136dc:	bl	125f4 <__assert_fail@plt>
   136e0:	strd	r4, [sp, #-16]!
   136e4:	mov	r4, r2
   136e8:	mov	r5, r0
   136ec:	ldr	r2, [r2, #156]	; 0x9c
   136f0:	str	r6, [sp, #8]
   136f4:	mov	r6, r1
   136f8:	str	lr, [sp, #12]
   136fc:	cmp	r2, #0
   13700:	beq	13710 <__assert_fail@plt+0x111c>
   13704:	bl	1d5a8 <__assert_fail@plt+0xafb4>
   13708:	cmp	r0, #0
   1370c:	beq	13730 <__assert_fail@plt+0x113c>
   13710:	mov	r1, r6
   13714:	mov	r0, r5
   13718:	ldr	r6, [sp, #8]
   1371c:	ldr	lr, [sp, #12]
   13720:	ldr	r2, [r4, #160]	; 0xa0
   13724:	ldrd	r4, [sp]
   13728:	add	sp, sp, #16
   1372c:	b	1d5a8 <__assert_fail@plt+0xafb4>
   13730:	ldrd	r4, [sp]
   13734:	ldr	r6, [sp, #8]
   13738:	add	sp, sp, #12
   1373c:	pop	{pc}		; (ldr pc, [sp], #4)
   13740:	str	r4, [sp, #-8]!
   13744:	str	lr, [sp, #4]
   13748:	bl	12348 <__errno_location@plt>
   1374c:	ldr	r4, [r0]
   13750:	mov	r2, #5
   13754:	movw	r1, #3600	; 0xe10
   13758:	movt	r1, #5
   1375c:	mov	r0, #0
   13760:	bl	120b4 <dcgettext@plt>
   13764:	mov	r2, r0
   13768:	mov	r0, #1
   1376c:	mov	r1, r4
   13770:	bl	121ec <error@plt>
   13774:	movw	r1, #3576	; 0xdf8
   13778:	movt	r1, #5
   1377c:	ldr	r3, [pc, #20]	; 13798 <__assert_fail@plt+0x11a4>
   13780:	movw	r0, #3632	; 0xe30
   13784:	movt	r0, #5
   13788:	str	r4, [sp, #-8]!
   1378c:	movw	r2, #977	; 0x3d1
   13790:	str	lr, [sp, #4]
   13794:	bl	125f4 <__assert_fail@plt>
   13798:	muleq	r5, r4, sp
   1379c:	strd	r4, [sp, #-16]!
   137a0:	mov	r4, r2
   137a4:	mov	r5, r0
   137a8:	ldr	r2, [r2, #156]	; 0x9c
   137ac:	str	r6, [sp, #8]
   137b0:	mov	r6, r1
   137b4:	str	lr, [sp, #12]
   137b8:	cmp	r2, #0
   137bc:	beq	137cc <__assert_fail@plt+0x11d8>
   137c0:	bl	1d5a8 <__assert_fail@plt+0xafb4>
   137c4:	cmp	r0, #0
   137c8:	bne	137ec <__assert_fail@plt+0x11f8>
   137cc:	mov	r1, r6
   137d0:	mov	r0, r5
   137d4:	ldr	r6, [sp, #8]
   137d8:	ldr	lr, [sp, #12]
   137dc:	ldr	r2, [r4, #160]	; 0xa0
   137e0:	ldrd	r4, [sp]
   137e4:	add	sp, sp, #16
   137e8:	b	1d5a8 <__assert_fail@plt+0xafb4>
   137ec:	ldrd	r4, [sp]
   137f0:	ldr	r6, [sp, #8]
   137f4:	add	sp, sp, #12
   137f8:	pop	{pc}		; (ldr pc, [sp], #4)
   137fc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13800:	mov	r4, r1
   13804:	ldr	r5, [r1, #156]	; 0x9c
   13808:	strd	r6, [sp, #8]
   1380c:	mov	r6, r0
   13810:	strd	r8, [sp, #16]
   13814:	str	lr, [sp, #24]
   13818:	sub	sp, sp, #12
   1381c:	cmp	r5, #0
   13820:	beq	138b0 <__assert_fail@plt+0x12bc>
   13824:	ldr	r0, [r5]
   13828:	movw	r3, #14048	; 0x36e0
   1382c:	movt	r3, #1
   13830:	movw	r2, #14236	; 0x379c
   13834:	movt	r2, #1
   13838:	ldr	r1, [r5, #156]	; 0x9c
   1383c:	cmp	r0, r2
   13840:	cmpne	r0, r3
   13844:	beq	1386c <__assert_fail@plt+0x1278>
   13848:	b	13a64 <__assert_fail@plt+0x1470>
   1384c:	ldr	r5, [r5, #160]	; 0xa0
   13850:	cmp	r5, #0
   13854:	beq	138b0 <__assert_fail@plt+0x12bc>
   13858:	ldr	r0, [r5]
   1385c:	ldr	r1, [r5, #156]	; 0x9c
   13860:	cmp	r0, r3
   13864:	cmpne	r0, r2
   13868:	bne	13a64 <__assert_fail@plt+0x1470>
   1386c:	cmp	r1, #0
   13870:	beq	1384c <__assert_fail@plt+0x1258>
   13874:	mov	r3, r6
   13878:	mov	r2, #3
   1387c:	mov	r1, #1
   13880:	movw	r0, #3696	; 0xe70
   13884:	movt	r0, #5
   13888:	bl	12168 <fwrite@plt>
   1388c:	mov	r1, r5
   13890:	mov	r0, r6
   13894:	bl	137fc <__assert_fail@plt+0x1208>
   13898:	movw	r0, #3700	; 0xe74
   1389c:	movt	r0, #5
   138a0:	mov	r3, r6
   138a4:	mov	r2, #3
   138a8:	mov	r1, #1
   138ac:	bl	12168 <fwrite@plt>
   138b0:	movw	r9, #32364	; 0x7e6c
   138b4:	movt	r9, #6
   138b8:	movw	r8, #3648	; 0xe40
   138bc:	movt	r8, #5
   138c0:	movw	r5, #9500	; 0x251c
   138c4:	movt	r5, #5
   138c8:	movw	r7, #3664	; 0xe50
   138cc:	movt	r7, #5
   138d0:	ldrb	lr, [r4, #20]
   138d4:	movw	ip, #3680	; 0xe60
   138d8:	movt	ip, #5
   138dc:	movw	r1, #3704	; 0xe78
   138e0:	movt	r1, #5
   138e4:	ldrb	r2, [r4, #18]
   138e8:	mov	r0, r6
   138ec:	ldrb	r3, [r4, #19]
   138f0:	cmp	lr, #0
   138f4:	moveq	ip, r5
   138f8:	cmp	r2, #0
   138fc:	movne	r2, r8
   13900:	moveq	r2, r5
   13904:	str	ip, [sp]
   13908:	cmp	r3, #0
   1390c:	movne	r3, r7
   13910:	moveq	r3, r5
   13914:	bl	1233c <fprintf@plt>
   13918:	mov	r1, r4
   1391c:	mov	r0, r6
   13920:	bl	16ca8 <__assert_fail@plt+0x46b4>
   13924:	vldr	s15, [r4, #28]
   13928:	movw	r1, #3712	; 0xe80
   1392c:	movt	r1, #5
   13930:	mov	r0, r6
   13934:	vcvt.f64.f32	d7, s15
   13938:	vmov	r2, r3, d7
   1393c:	bl	1233c <fprintf@plt>
   13940:	ldr	r3, [r9, #44]	; 0x2c
   13944:	tst	r3, #64	; 0x40
   13948:	bne	13a14 <__assert_fail@plt+0x1420>
   1394c:	ldr	r4, [r4, #160]	; 0xa0
   13950:	cmp	r4, #0
   13954:	beq	139fc <__assert_fail@plt+0x1408>
   13958:	ldr	r0, [r4]
   1395c:	movw	r3, #14048	; 0x36e0
   13960:	movt	r3, #1
   13964:	movw	r2, #14236	; 0x379c
   13968:	movt	r2, #1
   1396c:	ldr	r1, [r4, #156]	; 0x9c
   13970:	cmp	r0, r2
   13974:	cmpne	r0, r3
   13978:	beq	139a0 <__assert_fail@plt+0x13ac>
   1397c:	b	13a88 <__assert_fail@plt+0x1494>
   13980:	ldr	r4, [r4, #160]	; 0xa0
   13984:	cmp	r4, #0
   13988:	beq	139fc <__assert_fail@plt+0x1408>
   1398c:	ldr	r0, [r4]
   13990:	ldr	r1, [r4, #156]	; 0x9c
   13994:	cmp	r0, r2
   13998:	cmpne	r0, r3
   1399c:	bne	13a88 <__assert_fail@plt+0x1494>
   139a0:	cmp	r1, #0
   139a4:	beq	13980 <__assert_fail@plt+0x138c>
   139a8:	mov	r3, r6
   139ac:	mov	r2, #3
   139b0:	mov	r1, #1
   139b4:	movw	r0, #3696	; 0xe70
   139b8:	movt	r0, #5
   139bc:	bl	12168 <fwrite@plt>
   139c0:	mov	r1, r4
   139c4:	mov	r0, r6
   139c8:	bl	137fc <__assert_fail@plt+0x1208>
   139cc:	mov	r3, r6
   139d0:	movw	r0, #3700	; 0xe74
   139d4:	movt	r0, #5
   139d8:	mov	r2, #3
   139dc:	mov	r1, #1
   139e0:	add	sp, sp, #12
   139e4:	ldrd	r4, [sp]
   139e8:	ldrd	r6, [sp, #8]
   139ec:	ldrd	r8, [sp, #16]
   139f0:	ldr	lr, [sp, #24]
   139f4:	add	sp, sp, #28
   139f8:	b	12168 <fwrite@plt>
   139fc:	add	sp, sp, #12
   13a00:	ldrd	r4, [sp]
   13a04:	ldrd	r6, [sp, #8]
   13a08:	ldrd	r8, [sp, #16]
   13a0c:	add	sp, sp, #24
   13a10:	pop	{pc}		; (ldr pc, [sp], #4)
   13a14:	movw	r1, #3740	; 0xe9c
   13a18:	movt	r1, #5
   13a1c:	ldr	r3, [r4, #164]	; 0xa4
   13a20:	mov	r0, r6
   13a24:	ldr	r2, [r4, #168]	; 0xa8
   13a28:	bl	1233c <fprintf@plt>
   13a2c:	ldr	r3, [r4, #164]	; 0xa4
   13a30:	cmp	r3, #0
   13a34:	beq	13aa0 <__assert_fail@plt+0x14ac>
   13a38:	vmov	s15, r3
   13a3c:	movw	r1, #3768	; 0xeb8
   13a40:	movt	r1, #5
   13a44:	vldr	s13, [r4, #168]	; 0xa8
   13a48:	mov	r0, r6
   13a4c:	vcvt.f64.u32	d6, s13
   13a50:	vcvt.f64.u32	d7, s15
   13a54:	vdiv.f64	d7, d6, d7
   13a58:	vmov	r2, r3, d7
   13a5c:	bl	1233c <fprintf@plt>
   13a60:	b	1394c <__assert_fail@plt+0x1358>
   13a64:	cmp	r1, #0
   13a68:	bne	13874 <__assert_fail@plt+0x1280>
   13a6c:	ldr	r3, [r5, #160]	; 0xa0
   13a70:	cmp	r3, #0
   13a74:	bne	13874 <__assert_fail@plt+0x1280>
   13a78:	mov	r1, r5
   13a7c:	mov	r0, r6
   13a80:	bl	137fc <__assert_fail@plt+0x1208>
   13a84:	b	138b0 <__assert_fail@plt+0x12bc>
   13a88:	cmp	r1, #0
   13a8c:	bne	139a8 <__assert_fail@plt+0x13b4>
   13a90:	ldr	r3, [r4, #160]	; 0xa0
   13a94:	cmp	r3, #0
   13a98:	bne	139a8 <__assert_fail@plt+0x13b4>
   13a9c:	b	138d0 <__assert_fail@plt+0x12dc>
   13aa0:	movw	r0, #3776	; 0xec0
   13aa4:	movt	r0, #5
   13aa8:	mov	r3, r6
   13aac:	mov	r2, #4
   13ab0:	mov	r1, #1
   13ab4:	bl	12168 <fwrite@plt>
   13ab8:	b	1394c <__assert_fail@plt+0x1358>
   13abc:	ldr	r3, [r2, #44]	; 0x2c
   13ac0:	strd	r4, [sp, #-16]!
   13ac4:	mov	r5, r2
   13ac8:	ldr	r0, [r1, #72]	; 0x48
   13acc:	ldr	r4, [r1, #76]	; 0x4c
   13ad0:	cmp	r3, #1
   13ad4:	str	r6, [sp, #8]
   13ad8:	str	lr, [sp, #12]
   13adc:	beq	13b54 <__assert_fail@plt+0x1560>
   13ae0:	cmp	r3, #0
   13ae4:	beq	13ba0 <__assert_fail@plt+0x15ac>
   13ae8:	cmp	r3, #2
   13aec:	bne	13bec <__assert_fail@plt+0x15f8>
   13af0:	ldr	r1, [r2, #48]	; 0x30
   13af4:	bl	123cc <difftime@plt>
   13af8:	ldr	r3, [r5, #52]	; 0x34
   13afc:	vldr	d6, [pc, #260]	; 13c08 <__assert_fail@plt+0x1614>
   13b00:	sub	r4, r4, r3
   13b04:	vmov	s15, r4
   13b08:	vcvt.f64.s32	d7, s15
   13b0c:	vmla.f64	d0, d7, d6
   13b10:	vcmpe.f64	d0, #0.0
   13b14:	vmrs	APSR_nzcv, fpscr
   13b18:	ble	13b40 <__assert_fail@plt+0x154c>
   13b1c:	vldr	d7, [pc, #236]	; 13c10 <__assert_fail@plt+0x161c>
   13b20:	ldrd	r4, [sp]
   13b24:	ldr	r6, [sp, #8]
   13b28:	add	sp, sp, #12
   13b2c:	vcmpe.f64	d0, d7
   13b30:	vmrs	APSR_nzcv, fpscr
   13b34:	movls	r0, #1
   13b38:	movhi	r0, #0
   13b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b40:	ldrd	r4, [sp]
   13b44:	mov	r0, #0
   13b48:	ldr	r6, [sp, #8]
   13b4c:	add	sp, sp, #12
   13b50:	pop	{pc}		; (ldr pc, [sp], #4)
   13b54:	ldr	r1, [r2, #48]	; 0x30
   13b58:	ldr	r5, [r2, #52]	; 0x34
   13b5c:	cmp	r4, r5
   13b60:	cmpeq	r0, r1
   13b64:	beq	13b40 <__assert_fail@plt+0x154c>
   13b68:	sub	r4, r4, r5
   13b6c:	bl	123cc <difftime@plt>
   13b70:	vmov	s15, r4
   13b74:	vldr	d6, [pc, #140]	; 13c08 <__assert_fail@plt+0x1614>
   13b78:	ldrd	r4, [sp]
   13b7c:	ldr	r6, [sp, #8]
   13b80:	add	sp, sp, #12
   13b84:	vcvt.f64.s32	d7, s15
   13b88:	vmla.f64	d0, d7, d6
   13b8c:	vcmpe.f64	d0, #0.0
   13b90:	vmrs	APSR_nzcv, fpscr
   13b94:	movmi	r0, #1
   13b98:	movpl	r0, #0
   13b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   13ba0:	ldr	r1, [r2, #48]	; 0x30
   13ba4:	ldr	r5, [r2, #52]	; 0x34
   13ba8:	cmp	r0, r1
   13bac:	cmpeq	r4, r5
   13bb0:	beq	13b40 <__assert_fail@plt+0x154c>
   13bb4:	sub	r4, r4, r5
   13bb8:	bl	123cc <difftime@plt>
   13bbc:	vmov	s15, r4
   13bc0:	vldr	d6, [pc, #64]	; 13c08 <__assert_fail@plt+0x1614>
   13bc4:	ldrd	r4, [sp]
   13bc8:	ldr	r6, [sp, #8]
   13bcc:	add	sp, sp, #12
   13bd0:	vcvt.f64.s32	d7, s15
   13bd4:	vmla.f64	d0, d7, d6
   13bd8:	vcmpe.f64	d0, #0.0
   13bdc:	vmrs	APSR_nzcv, fpscr
   13be0:	movpl	r0, #1
   13be4:	movmi	r0, #0
   13be8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bec:	movw	r1, #3576	; 0xdf8
   13bf0:	movt	r1, #5
   13bf4:	ldr	r3, [pc, #28]	; 13c18 <__assert_fail@plt+0x1624>
   13bf8:	movw	r0, #20308	; 0x4f54
   13bfc:	movt	r0, #5
   13c00:	mov	r2, #138	; 0x8a
   13c04:	bl	125f4 <__assert_fail@plt>
   13c08:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13c0c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13c10:	andeq	r0, r0, r0
   13c14:	submi	r0, lr, r0
   13c18:	andeq	r0, r5, r0, lsr #27
   13c1c:	ldr	r3, [r2, #44]	; 0x2c
   13c20:	strd	r4, [sp, #-16]!
   13c24:	str	r6, [sp, #8]
   13c28:	str	lr, [sp, #12]
   13c2c:	cmp	r3, #0
   13c30:	bne	13c90 <__assert_fail@plt+0x169c>
   13c34:	ldr	ip, [r2, #48]	; 0x30
   13c38:	ldr	r5, [r2, #52]	; 0x34
   13c3c:	ldr	r0, [r1, #72]	; 0x48
   13c40:	ldr	r4, [r1, #76]	; 0x4c
   13c44:	cmp	r0, ip
   13c48:	cmpeq	r4, r5
   13c4c:	moveq	r0, r3
   13c50:	beq	13c80 <__assert_fail@plt+0x168c>
   13c54:	sub	r4, r4, r5
   13c58:	mov	r1, ip
   13c5c:	bl	123cc <difftime@plt>
   13c60:	vmov	s15, r4
   13c64:	vldr	d6, [pc, #68]	; 13cb0 <__assert_fail@plt+0x16bc>
   13c68:	vcvt.f64.s32	d7, s15
   13c6c:	vmla.f64	d0, d7, d6
   13c70:	vcmpe.f64	d0, #0.0
   13c74:	vmrs	APSR_nzcv, fpscr
   13c78:	movpl	r0, #1
   13c7c:	movmi	r0, #0
   13c80:	ldrd	r4, [sp]
   13c84:	ldr	r6, [sp, #8]
   13c88:	add	sp, sp, #12
   13c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c90:	movw	r1, #3576	; 0xdf8
   13c94:	movt	r1, #5
   13c98:	ldr	r3, [pc, #24]	; 13cb8 <__assert_fail@plt+0x16c4>
   13c9c:	movw	r0, #3784	; 0xec8
   13ca0:	movt	r0, #5
   13ca4:	mov	r2, #166	; 0xa6
   13ca8:	bl	125f4 <__assert_fail@plt>
   13cac:	nop	{0}
   13cb0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13cb4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13cb8:			; <UNDEFINED> instruction: 0x00050db0
   13cbc:	ldr	r3, [r2, #44]	; 0x2c
   13cc0:	strd	r4, [sp, #-16]!
   13cc4:	mov	r5, r2
   13cc8:	ldr	r0, [r1, #72]	; 0x48
   13ccc:	ldr	r4, [r1, #76]	; 0x4c
   13cd0:	cmp	r3, #1
   13cd4:	str	r6, [sp, #8]
   13cd8:	str	lr, [sp, #12]
   13cdc:	beq	13d54 <__assert_fail@plt+0x1760>
   13ce0:	cmp	r3, #0
   13ce4:	beq	13da0 <__assert_fail@plt+0x17ac>
   13ce8:	cmp	r3, #2
   13cec:	bne	13dec <__assert_fail@plt+0x17f8>
   13cf0:	ldr	r1, [r2, #48]	; 0x30
   13cf4:	bl	123cc <difftime@plt>
   13cf8:	ldr	r3, [r5, #52]	; 0x34
   13cfc:	vldr	d6, [pc, #260]	; 13e08 <__assert_fail@plt+0x1814>
   13d00:	sub	r4, r4, r3
   13d04:	vmov	s15, r4
   13d08:	vcvt.f64.s32	d7, s15
   13d0c:	vmla.f64	d0, d7, d6
   13d10:	vcmpe.f64	d0, #0.0
   13d14:	vmrs	APSR_nzcv, fpscr
   13d18:	ble	13d40 <__assert_fail@plt+0x174c>
   13d1c:	vldr	d7, [pc, #236]	; 13e10 <__assert_fail@plt+0x181c>
   13d20:	ldrd	r4, [sp]
   13d24:	ldr	r6, [sp, #8]
   13d28:	add	sp, sp, #12
   13d2c:	vcmpe.f64	d0, d7
   13d30:	vmrs	APSR_nzcv, fpscr
   13d34:	movls	r0, #1
   13d38:	movhi	r0, #0
   13d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d40:	ldrd	r4, [sp]
   13d44:	mov	r0, #0
   13d48:	ldr	r6, [sp, #8]
   13d4c:	add	sp, sp, #12
   13d50:	pop	{pc}		; (ldr pc, [sp], #4)
   13d54:	ldr	r1, [r2, #48]	; 0x30
   13d58:	ldr	r5, [r2, #52]	; 0x34
   13d5c:	cmp	r4, r5
   13d60:	cmpeq	r0, r1
   13d64:	beq	13d40 <__assert_fail@plt+0x174c>
   13d68:	sub	r4, r4, r5
   13d6c:	bl	123cc <difftime@plt>
   13d70:	vmov	s15, r4
   13d74:	vldr	d6, [pc, #140]	; 13e08 <__assert_fail@plt+0x1814>
   13d78:	ldrd	r4, [sp]
   13d7c:	ldr	r6, [sp, #8]
   13d80:	add	sp, sp, #12
   13d84:	vcvt.f64.s32	d7, s15
   13d88:	vmla.f64	d0, d7, d6
   13d8c:	vcmpe.f64	d0, #0.0
   13d90:	vmrs	APSR_nzcv, fpscr
   13d94:	movmi	r0, #1
   13d98:	movpl	r0, #0
   13d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   13da0:	ldr	r1, [r2, #48]	; 0x30
   13da4:	ldr	r5, [r2, #52]	; 0x34
   13da8:	cmp	r0, r1
   13dac:	cmpeq	r4, r5
   13db0:	beq	13d40 <__assert_fail@plt+0x174c>
   13db4:	sub	r4, r4, r5
   13db8:	bl	123cc <difftime@plt>
   13dbc:	vmov	s15, r4
   13dc0:	vldr	d6, [pc, #64]	; 13e08 <__assert_fail@plt+0x1814>
   13dc4:	ldrd	r4, [sp]
   13dc8:	ldr	r6, [sp, #8]
   13dcc:	add	sp, sp, #12
   13dd0:	vcvt.f64.s32	d7, s15
   13dd4:	vmla.f64	d0, d7, d6
   13dd8:	vcmpe.f64	d0, #0.0
   13ddc:	vmrs	APSR_nzcv, fpscr
   13de0:	movpl	r0, #1
   13de4:	movmi	r0, #0
   13de8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dec:	movw	r1, #3576	; 0xdf8
   13df0:	movt	r1, #5
   13df4:	ldr	r3, [pc, #28]	; 13e18 <__assert_fail@plt+0x1824>
   13df8:	movw	r0, #20308	; 0x4f54
   13dfc:	movt	r0, #5
   13e00:	mov	r2, #138	; 0x8a
   13e04:	bl	125f4 <__assert_fail@plt>
   13e08:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13e0c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13e10:	andeq	r0, r0, r0
   13e14:	rscsmi	r1, r5, r0, lsl #16
   13e18:	andeq	r0, r5, r0, lsr #27
   13e1c:	mov	r0, #1
   13e20:	bx	lr
   13e24:	ldr	r3, [r2, #44]	; 0x2c
   13e28:	strd	r4, [sp, #-16]!
   13e2c:	mov	r5, r2
   13e30:	ldr	r0, [r1, #88]	; 0x58
   13e34:	ldr	r4, [r1, #92]	; 0x5c
   13e38:	cmp	r3, #1
   13e3c:	str	r6, [sp, #8]
   13e40:	str	lr, [sp, #12]
   13e44:	beq	13ebc <__assert_fail@plt+0x18c8>
   13e48:	cmp	r3, #0
   13e4c:	beq	13f08 <__assert_fail@plt+0x1914>
   13e50:	cmp	r3, #2
   13e54:	bne	13f54 <__assert_fail@plt+0x1960>
   13e58:	ldr	r1, [r2, #48]	; 0x30
   13e5c:	bl	123cc <difftime@plt>
   13e60:	ldr	r3, [r5, #52]	; 0x34
   13e64:	vldr	d6, [pc, #260]	; 13f70 <__assert_fail@plt+0x197c>
   13e68:	sub	r4, r4, r3
   13e6c:	vmov	s15, r4
   13e70:	vcvt.f64.s32	d7, s15
   13e74:	vmla.f64	d0, d7, d6
   13e78:	vcmpe.f64	d0, #0.0
   13e7c:	vmrs	APSR_nzcv, fpscr
   13e80:	ble	13ea8 <__assert_fail@plt+0x18b4>
   13e84:	vldr	d7, [pc, #236]	; 13f78 <__assert_fail@plt+0x1984>
   13e88:	ldrd	r4, [sp]
   13e8c:	ldr	r6, [sp, #8]
   13e90:	add	sp, sp, #12
   13e94:	vcmpe.f64	d0, d7
   13e98:	vmrs	APSR_nzcv, fpscr
   13e9c:	movls	r0, #1
   13ea0:	movhi	r0, #0
   13ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ea8:	ldrd	r4, [sp]
   13eac:	mov	r0, #0
   13eb0:	ldr	r6, [sp, #8]
   13eb4:	add	sp, sp, #12
   13eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ebc:	ldr	r1, [r2, #48]	; 0x30
   13ec0:	ldr	r5, [r2, #52]	; 0x34
   13ec4:	cmp	r4, r5
   13ec8:	cmpeq	r0, r1
   13ecc:	beq	13ea8 <__assert_fail@plt+0x18b4>
   13ed0:	sub	r4, r4, r5
   13ed4:	bl	123cc <difftime@plt>
   13ed8:	vmov	s15, r4
   13edc:	vldr	d6, [pc, #140]	; 13f70 <__assert_fail@plt+0x197c>
   13ee0:	ldrd	r4, [sp]
   13ee4:	ldr	r6, [sp, #8]
   13ee8:	add	sp, sp, #12
   13eec:	vcvt.f64.s32	d7, s15
   13ef0:	vmla.f64	d0, d7, d6
   13ef4:	vcmpe.f64	d0, #0.0
   13ef8:	vmrs	APSR_nzcv, fpscr
   13efc:	movmi	r0, #1
   13f00:	movpl	r0, #0
   13f04:	pop	{pc}		; (ldr pc, [sp], #4)
   13f08:	ldr	r1, [r2, #48]	; 0x30
   13f0c:	ldr	r5, [r2, #52]	; 0x34
   13f10:	cmp	r0, r1
   13f14:	cmpeq	r4, r5
   13f18:	beq	13ea8 <__assert_fail@plt+0x18b4>
   13f1c:	sub	r4, r4, r5
   13f20:	bl	123cc <difftime@plt>
   13f24:	vmov	s15, r4
   13f28:	vldr	d6, [pc, #64]	; 13f70 <__assert_fail@plt+0x197c>
   13f2c:	ldrd	r4, [sp]
   13f30:	ldr	r6, [sp, #8]
   13f34:	add	sp, sp, #12
   13f38:	vcvt.f64.s32	d7, s15
   13f3c:	vmla.f64	d0, d7, d6
   13f40:	vcmpe.f64	d0, #0.0
   13f44:	vmrs	APSR_nzcv, fpscr
   13f48:	movpl	r0, #1
   13f4c:	movmi	r0, #0
   13f50:	pop	{pc}		; (ldr pc, [sp], #4)
   13f54:	movw	r1, #3576	; 0xdf8
   13f58:	movt	r1, #5
   13f5c:	ldr	r3, [pc, #28]	; 13f80 <__assert_fail@plt+0x198c>
   13f60:	movw	r0, #20308	; 0x4f54
   13f64:	movt	r0, #5
   13f68:	mov	r2, #138	; 0x8a
   13f6c:	bl	125f4 <__assert_fail@plt>
   13f70:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13f74:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13f78:	andeq	r0, r0, r0
   13f7c:	submi	r0, lr, r0
   13f80:	andeq	r0, r5, r0, lsr #27
   13f84:	ldr	r3, [r2, #44]	; 0x2c
   13f88:	strd	r4, [sp, #-16]!
   13f8c:	str	r6, [sp, #8]
   13f90:	str	lr, [sp, #12]
   13f94:	cmp	r3, #0
   13f98:	bne	13ff8 <__assert_fail@plt+0x1a04>
   13f9c:	ldr	ip, [r2, #48]	; 0x30
   13fa0:	ldr	r5, [r2, #52]	; 0x34
   13fa4:	ldr	r0, [r1, #88]	; 0x58
   13fa8:	ldr	r4, [r1, #92]	; 0x5c
   13fac:	cmp	r0, ip
   13fb0:	cmpeq	r4, r5
   13fb4:	moveq	r0, r3
   13fb8:	beq	13fe8 <__assert_fail@plt+0x19f4>
   13fbc:	sub	r4, r4, r5
   13fc0:	mov	r1, ip
   13fc4:	bl	123cc <difftime@plt>
   13fc8:	vmov	s15, r4
   13fcc:	vldr	d6, [pc, #68]	; 14018 <__assert_fail@plt+0x1a24>
   13fd0:	vcvt.f64.s32	d7, s15
   13fd4:	vmla.f64	d0, d7, d6
   13fd8:	vcmpe.f64	d0, #0.0
   13fdc:	vmrs	APSR_nzcv, fpscr
   13fe0:	movpl	r0, #1
   13fe4:	movmi	r0, #0
   13fe8:	ldrd	r4, [sp]
   13fec:	ldr	r6, [sp, #8]
   13ff0:	add	sp, sp, #12
   13ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ff8:	movw	r1, #3576	; 0xdf8
   13ffc:	movt	r1, #5
   14000:	ldr	r3, [pc, #24]	; 14020 <__assert_fail@plt+0x1a2c>
   14004:	movw	r0, #3784	; 0xec8
   14008:	movt	r0, #5
   1400c:	mov	r2, #199	; 0xc7
   14010:	bl	125f4 <__assert_fail@plt>
   14014:	nop	{0}
   14018:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   1401c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14020:			; <UNDEFINED> instruction: 0x00050dbc
   14024:	strd	r4, [sp, #-16]!
   14028:	mov	r4, r2
   1402c:	mov	r5, r0
   14030:	ldr	r2, [r2, #156]	; 0x9c
   14034:	str	r6, [sp, #8]
   14038:	mov	r6, r1
   1403c:	str	lr, [sp, #12]
   14040:	cmp	r2, #0
   14044:	beq	1404c <__assert_fail@plt+0x1a58>
   14048:	bl	1d5a8 <__assert_fail@plt+0xafb4>
   1404c:	mov	r1, r6
   14050:	mov	r0, r5
   14054:	ldr	r6, [sp, #8]
   14058:	ldr	lr, [sp, #12]
   1405c:	ldr	r2, [r4, #160]	; 0xa0
   14060:	ldrd	r4, [sp]
   14064:	add	sp, sp, #16
   14068:	b	1d5a8 <__assert_fail@plt+0xafb4>
   1406c:	ldr	r3, [r2, #44]	; 0x2c
   14070:	strd	r4, [sp, #-16]!
   14074:	mov	r5, r2
   14078:	ldr	r0, [r1, #88]	; 0x58
   1407c:	ldr	r4, [r1, #92]	; 0x5c
   14080:	cmp	r3, #1
   14084:	str	r6, [sp, #8]
   14088:	str	lr, [sp, #12]
   1408c:	beq	14104 <__assert_fail@plt+0x1b10>
   14090:	cmp	r3, #0
   14094:	beq	14150 <__assert_fail@plt+0x1b5c>
   14098:	cmp	r3, #2
   1409c:	bne	1419c <__assert_fail@plt+0x1ba8>
   140a0:	ldr	r1, [r2, #48]	; 0x30
   140a4:	bl	123cc <difftime@plt>
   140a8:	ldr	r3, [r5, #52]	; 0x34
   140ac:	vldr	d6, [pc, #260]	; 141b8 <__assert_fail@plt+0x1bc4>
   140b0:	sub	r4, r4, r3
   140b4:	vmov	s15, r4
   140b8:	vcvt.f64.s32	d7, s15
   140bc:	vmla.f64	d0, d7, d6
   140c0:	vcmpe.f64	d0, #0.0
   140c4:	vmrs	APSR_nzcv, fpscr
   140c8:	ble	140f0 <__assert_fail@plt+0x1afc>
   140cc:	vldr	d7, [pc, #236]	; 141c0 <__assert_fail@plt+0x1bcc>
   140d0:	ldrd	r4, [sp]
   140d4:	ldr	r6, [sp, #8]
   140d8:	add	sp, sp, #12
   140dc:	vcmpe.f64	d0, d7
   140e0:	vmrs	APSR_nzcv, fpscr
   140e4:	movls	r0, #1
   140e8:	movhi	r0, #0
   140ec:	pop	{pc}		; (ldr pc, [sp], #4)
   140f0:	ldrd	r4, [sp]
   140f4:	mov	r0, #0
   140f8:	ldr	r6, [sp, #8]
   140fc:	add	sp, sp, #12
   14100:	pop	{pc}		; (ldr pc, [sp], #4)
   14104:	ldr	r1, [r2, #48]	; 0x30
   14108:	ldr	r5, [r2, #52]	; 0x34
   1410c:	cmp	r4, r5
   14110:	cmpeq	r0, r1
   14114:	beq	140f0 <__assert_fail@plt+0x1afc>
   14118:	sub	r4, r4, r5
   1411c:	bl	123cc <difftime@plt>
   14120:	vmov	s15, r4
   14124:	vldr	d6, [pc, #140]	; 141b8 <__assert_fail@plt+0x1bc4>
   14128:	ldrd	r4, [sp]
   1412c:	ldr	r6, [sp, #8]
   14130:	add	sp, sp, #12
   14134:	vcvt.f64.s32	d7, s15
   14138:	vmla.f64	d0, d7, d6
   1413c:	vcmpe.f64	d0, #0.0
   14140:	vmrs	APSR_nzcv, fpscr
   14144:	movmi	r0, #1
   14148:	movpl	r0, #0
   1414c:	pop	{pc}		; (ldr pc, [sp], #4)
   14150:	ldr	r1, [r2, #48]	; 0x30
   14154:	ldr	r5, [r2, #52]	; 0x34
   14158:	cmp	r0, r1
   1415c:	cmpeq	r4, r5
   14160:	beq	140f0 <__assert_fail@plt+0x1afc>
   14164:	sub	r4, r4, r5
   14168:	bl	123cc <difftime@plt>
   1416c:	vmov	s15, r4
   14170:	vldr	d6, [pc, #64]	; 141b8 <__assert_fail@plt+0x1bc4>
   14174:	ldrd	r4, [sp]
   14178:	ldr	r6, [sp, #8]
   1417c:	add	sp, sp, #12
   14180:	vcvt.f64.s32	d7, s15
   14184:	vmla.f64	d0, d7, d6
   14188:	vcmpe.f64	d0, #0.0
   1418c:	vmrs	APSR_nzcv, fpscr
   14190:	movpl	r0, #1
   14194:	movmi	r0, #0
   14198:	pop	{pc}		; (ldr pc, [sp], #4)
   1419c:	movw	r1, #3576	; 0xdf8
   141a0:	movt	r1, #5
   141a4:	ldr	r3, [pc, #28]	; 141c8 <__assert_fail@plt+0x1bd4>
   141a8:	movw	r0, #20308	; 0x4f54
   141ac:	movt	r0, #5
   141b0:	mov	r2, #138	; 0x8a
   141b4:	bl	125f4 <__assert_fail@plt>
   141b8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   141bc:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   141c0:	andeq	r0, r0, r0
   141c4:	rscsmi	r1, r5, r0, lsl #16
   141c8:	andeq	r0, r5, r0, lsr #27
   141cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   141d0:	movw	r4, #32320	; 0x7e40
   141d4:	movt	r4, #6
   141d8:	strd	r6, [sp, #8]
   141dc:	mov	r7, r1
   141e0:	movw	r1, #16940	; 0x422c
   141e4:	movt	r1, #5
   141e8:	ldr	r6, [r4, #12]
   141ec:	str	r8, [sp, #16]
   141f0:	mov	r8, r0
   141f4:	str	lr, [sp, #20]
   141f8:	mov	r0, r6
   141fc:	bl	11f40 <strcmp@plt>
   14200:	cmp	r0, #0
   14204:	beq	142b8 <__assert_fail@plt+0x1cc4>
   14208:	ldrb	r5, [r4, #4]
   1420c:	cmp	r5, #0
   14210:	moveq	r5, #1
   14214:	moveq	r2, #0
   14218:	beq	14234 <__assert_fail@plt+0x1c40>
   1421c:	ldr	r3, [r7, #16]
   14220:	and	r3, r3, #61440	; 0xf000
   14224:	cmp	r3, #16384	; 0x4000
   14228:	moveq	r5, #0
   1422c:	movne	r2, #0
   14230:	moveq	r2, #512	; 0x200
   14234:	mov	r1, r6
   14238:	ldr	r0, [r4, #16]
   1423c:	bl	11f94 <unlinkat@plt>
   14240:	cmp	r0, #0
   14244:	beq	142b8 <__assert_fail@plt+0x1cc4>
   14248:	bl	12348 <__errno_location@plt>
   1424c:	ldr	r6, [r0]
   14250:	mov	r7, r0
   14254:	cmp	r6, #2
   14258:	beq	142f0 <__assert_fail@plt+0x1cfc>
   1425c:	cmp	r6, #21
   14260:	movne	r5, #0
   14264:	andeq	r5, r5, #1
   14268:	cmp	r5, #0
   1426c:	bne	142d0 <__assert_fail@plt+0x1cdc>
   14270:	mov	r2, #5
   14274:	movw	r1, #3824	; 0xef0
   14278:	movt	r1, #5
   1427c:	mov	r0, #0
   14280:	bl	120b4 <dcgettext@plt>
   14284:	mov	r5, r0
   14288:	mov	r1, r8
   1428c:	mov	r0, #0
   14290:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   14294:	mov	r3, r0
   14298:	mov	r2, r5
   1429c:	mov	r0, #0
   142a0:	mov	r1, r6
   142a4:	bl	121ec <error@plt>
   142a8:	mov	r3, #1
   142ac:	mov	r0, #0
   142b0:	str	r3, [r4, #28]
   142b4:	b	142bc <__assert_fail@plt+0x1cc8>
   142b8:	mov	r0, #1
   142bc:	ldrd	r4, [sp]
   142c0:	ldrd	r6, [sp, #8]
   142c4:	ldr	r8, [sp, #16]
   142c8:	add	sp, sp, #20
   142cc:	pop	{pc}		; (ldr pc, [sp], #4)
   142d0:	mov	r2, #512	; 0x200
   142d4:	ldr	r1, [r4, #12]
   142d8:	ldr	r0, [r4, #16]
   142dc:	bl	11f94 <unlinkat@plt>
   142e0:	cmp	r0, #0
   142e4:	beq	142b8 <__assert_fail@plt+0x1cc4>
   142e8:	ldr	r6, [r7]
   142ec:	b	14270 <__assert_fail@plt+0x1c7c>
   142f0:	movw	r3, #32364	; 0x7e6c
   142f4:	movt	r3, #6
   142f8:	ldrb	r0, [r3, #14]
   142fc:	cmp	r0, #0
   14300:	movne	r3, #0
   14304:	strne	r3, [r7]
   14308:	beq	14270 <__assert_fail@plt+0x1c7c>
   1430c:	b	142bc <__assert_fail@plt+0x1cc8>
   14310:	ldr	r3, [r1, #16]
   14314:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14318:	strd	r6, [sp, #8]
   1431c:	strd	r8, [sp, #16]
   14320:	str	sl, [sp, #24]
   14324:	and	r3, r3, #61440	; 0xf000
   14328:	str	lr, [sp, #28]
   1432c:	cmp	r3, #16384	; 0x4000
   14330:	beq	1436c <__assert_fail@plt+0x1d78>
   14334:	cmp	r3, #32768	; 0x8000
   14338:	movne	r4, #0
   1433c:	bne	14350 <__assert_fail@plt+0x1d5c>
   14340:	ldrd	r2, [r1, #48]	; 0x30
   14344:	orrs	r3, r2, r3
   14348:	moveq	r4, #1
   1434c:	movne	r4, #0
   14350:	mov	r0, r4
   14354:	ldrd	r4, [sp]
   14358:	ldrd	r6, [sp, #8]
   1435c:	ldrd	r8, [sp, #16]
   14360:	ldr	sl, [sp, #24]
   14364:	add	sp, sp, #28
   14368:	pop	{pc}		; (ldr pc, [sp], #4)
   1436c:	mov	r4, #0
   14370:	mov	r5, r0
   14374:	movw	r7, #32320	; 0x7e40
   14378:	movt	r7, #6
   1437c:	bl	12348 <__errno_location@plt>
   14380:	mov	r8, r0
   14384:	mov	r2, #18688	; 0x4900
   14388:	movt	r2, #10
   1438c:	ldr	r1, [r7, #12]
   14390:	str	r4, [r0]
   14394:	ldr	r0, [r7, #16]
   14398:	bl	2da54 <__assert_fail@plt+0x1b460>
   1439c:	subs	r9, r0, #0
   143a0:	blt	14440 <__assert_fail@plt+0x1e4c>
   143a4:	bl	124c8 <fdopendir@plt>
   143a8:	subs	r6, r0, #0
   143ac:	strne	r4, [r8]
   143b0:	beq	144b8 <__assert_fail@plt+0x1ec4>
   143b4:	bl	124bc <readdir64@plt>
   143b8:	subs	r3, r0, #0
   143bc:	beq	14474 <__assert_fail@plt+0x1e80>
   143c0:	ldrb	r2, [r3, #19]
   143c4:	cmp	r2, #46	; 0x2e
   143c8:	bne	143e8 <__assert_fail@plt+0x1df4>
   143cc:	ldrb	r2, [r3, #20]
   143d0:	mov	r0, r6
   143d4:	cmp	r2, #0
   143d8:	beq	143b4 <__assert_fail@plt+0x1dc0>
   143dc:	ldrh	r3, [r3, #20]
   143e0:	cmp	r3, #46	; 0x2e
   143e4:	beq	143b4 <__assert_fail@plt+0x1dc0>
   143e8:	mov	r4, #0
   143ec:	ldr	r9, [r8]
   143f0:	cmp	r9, #0
   143f4:	bne	1447c <__assert_fail@plt+0x1e88>
   143f8:	mov	r0, r6
   143fc:	bl	125c4 <closedir@plt>
   14400:	cmp	r0, #0
   14404:	beq	14350 <__assert_fail@plt+0x1d5c>
   14408:	ldr	r6, [r8]
   1440c:	mov	r1, r5
   14410:	mov	r0, r9
   14414:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   14418:	mov	r3, r0
   1441c:	movw	r2, #20016	; 0x4e30
   14420:	movt	r2, #5
   14424:	mov	r0, r9
   14428:	mov	r4, r9
   1442c:	mov	r1, r6
   14430:	bl	121ec <error@plt>
   14434:	mov	r3, #1
   14438:	str	r3, [r7, #28]
   1443c:	b	14350 <__assert_fail@plt+0x1d5c>
   14440:	ldr	r6, [r8]
   14444:	mov	r1, r5
   14448:	mov	r0, r4
   1444c:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   14450:	mov	r3, r0
   14454:	movw	r2, #20016	; 0x4e30
   14458:	movt	r2, #5
   1445c:	mov	r0, r4
   14460:	mov	r1, r6
   14464:	bl	121ec <error@plt>
   14468:	mov	r3, #1
   1446c:	str	r3, [r7, #28]
   14470:	b	14350 <__assert_fail@plt+0x1d5c>
   14474:	mov	r4, #1
   14478:	b	143ec <__assert_fail@plt+0x1df8>
   1447c:	mov	r1, r5
   14480:	mov	r0, #0
   14484:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   14488:	mov	r3, r0
   1448c:	mov	r1, r9
   14490:	mov	r0, #0
   14494:	movw	r2, #20016	; 0x4e30
   14498:	movt	r2, #5
   1449c:	mov	r4, r0
   144a0:	bl	121ec <error@plt>
   144a4:	mov	r3, #1
   144a8:	mov	r0, r6
   144ac:	str	r3, [r7, #28]
   144b0:	bl	125c4 <closedir@plt>
   144b4:	b	14350 <__assert_fail@plt+0x1d5c>
   144b8:	ldr	r8, [r8]
   144bc:	mov	r1, r5
   144c0:	mov	r4, r6
   144c4:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   144c8:	mov	r3, r0
   144cc:	movw	r2, #20016	; 0x4e30
   144d0:	movt	r2, #5
   144d4:	mov	r0, r6
   144d8:	mov	r1, r8
   144dc:	bl	121ec <error@plt>
   144e0:	mov	r3, #1
   144e4:	mov	r0, r9
   144e8:	str	r3, [r7, #28]
   144ec:	bl	125ac <close@plt>
   144f0:	b	14350 <__assert_fail@plt+0x1d5c>
   144f4:	b	15d8c <__assert_fail@plt+0x3798>
   144f8:	movw	r3, #32320	; 0x7e40
   144fc:	movt	r3, #6
   14500:	ldr	r0, [r3, #12]
   14504:	b	15d8c <__assert_fail@plt+0x3798>
   14508:	mov	r0, #0
   1450c:	bx	lr
   14510:	str	r4, [sp, #-8]!
   14514:	movw	ip, #32364	; 0x7e6c
   14518:	movt	ip, #6
   1451c:	ldr	r4, [r2, #44]	; 0x2c
   14520:	mov	r3, r1
   14524:	movw	r1, #32320	; 0x7e40
   14528:	movt	r1, #6
   1452c:	ldrb	r2, [r2, #32]
   14530:	str	lr, [sp, #4]
   14534:	sub	sp, sp, #16
   14538:	ldr	lr, [ip, #20]
   1453c:	str	r4, [sp, #12]
   14540:	ldr	ip, [ip, #40]	; 0x28
   14544:	str	r2, [sp, #8]
   14548:	ldr	r2, [r1, #12]
   1454c:	str	lr, [sp]
   14550:	ldr	r1, [r1, #16]
   14554:	str	ip, [sp, #4]
   14558:	bl	273f4 <__assert_fail@plt+0x14e00>
   1455c:	mov	r0, #1
   14560:	add	sp, sp, #16
   14564:	ldr	r4, [sp]
   14568:	add	sp, sp, #4
   1456c:	pop	{pc}		; (ldr pc, [sp], #4)
   14570:	push	{lr}		; (str lr, [sp, #-4]!)
   14574:	sub	sp, sp, #12
   14578:	mov	r1, r2
   1457c:	ldrb	r2, [r2, #52]	; 0x34
   14580:	movw	r3, #24288	; 0x5ee0
   14584:	movt	r3, #5
   14588:	str	r0, [sp]
   1458c:	ldr	r0, [r1, #44]	; 0x2c
   14590:	ldr	r1, [r1, #56]	; 0x38
   14594:	bl	27ac8 <__assert_fail@plt+0x154d4>
   14598:	mov	r0, #1
   1459c:	add	sp, sp, #12
   145a0:	pop	{pc}		; (ldr pc, [sp], #4)
   145a4:	str	r4, [sp, #-8]!
   145a8:	ldr	r4, [r2, #44]	; 0x2c
   145ac:	str	lr, [sp, #4]
   145b0:	mov	r1, r4
   145b4:	bl	12588 <fputs@plt>
   145b8:	mov	r1, r4
   145bc:	mov	r0, #0
   145c0:	bl	124e0 <putc@plt>
   145c4:	ldr	r4, [sp]
   145c8:	add	sp, sp, #4
   145cc:	mov	r0, #1
   145d0:	pop	{pc}		; (ldr pc, [sp], #4)
   145d4:	mov	r3, r1
   145d8:	mov	r1, r0
   145dc:	str	r4, [sp, #-8]!
   145e0:	mov	r0, r3
   145e4:	mov	r4, r2
   145e8:	str	lr, [sp, #4]
   145ec:	bl	1f8f0 <__assert_fail@plt+0xd2fc>
   145f0:	ldr	r1, [r4, #40]	; 0x28
   145f4:	bl	11f40 <strcmp@plt>
   145f8:	clz	r0, r0
   145fc:	ldr	r4, [sp]
   14600:	add	sp, sp, #4
   14604:	lsr	r0, r0, #5
   14608:	pop	{pc}		; (ldr pc, [sp], #4)
   1460c:	ldr	r3, [r2, #40]	; 0x28
   14610:	cmp	r3, #1
   14614:	beq	14654 <__assert_fail@plt+0x2060>
   14618:	cmp	r3, #0
   1461c:	beq	14678 <__assert_fail@plt+0x2084>
   14620:	cmp	r3, #2
   14624:	bne	1464c <__assert_fail@plt+0x2058>
   14628:	ldr	r3, [r1, #28]
   1462c:	ldrd	r0, [r2, #48]	; 0x30
   14630:	mov	r2, r3
   14634:	mov	r3, #0
   14638:	cmp	r1, r3
   1463c:	cmpeq	r0, r2
   14640:	moveq	r0, #1
   14644:	movne	r0, #0
   14648:	bx	lr
   1464c:	mov	r0, #0
   14650:	bx	lr
   14654:	ldr	r3, [r1, #28]
   14658:	ldrd	r0, [r2, #48]	; 0x30
   1465c:	mov	r2, r3
   14660:	mov	r3, #0
   14664:	cmp	r3, r1
   14668:	cmpeq	r2, r0
   1466c:	movcc	r0, #1
   14670:	movcs	r0, #0
   14674:	bx	lr
   14678:	ldr	r3, [r1, #28]
   1467c:	ldrd	r0, [r2, #48]	; 0x30
   14680:	mov	r2, r3
   14684:	mov	r3, #0
   14688:	cmp	r3, r1
   1468c:	cmpeq	r2, r0
   14690:	movhi	r0, #1
   14694:	movls	r0, #0
   14698:	bx	lr
   1469c:	ldr	r3, [r1, #28]
   146a0:	ldr	r0, [r2, #40]	; 0x28
   146a4:	sub	r0, r0, r3
   146a8:	clz	r0, r0
   146ac:	lsr	r0, r0, #5
   146b0:	bx	lr
   146b4:	ldr	r3, [r1, #16]
   146b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   146bc:	strd	r6, [sp, #8]
   146c0:	str	r8, [sp, #16]
   146c4:	str	lr, [sp, #20]
   146c8:	and	r3, r3, #61440	; 0xf000
   146cc:	cmp	r3, #40960	; 0xa000
   146d0:	movne	r4, #0
   146d4:	beq	146f0 <__assert_fail@plt+0x20fc>
   146d8:	mov	r0, r4
   146dc:	ldrd	r4, [sp]
   146e0:	ldrd	r6, [sp, #8]
   146e4:	ldr	r8, [sp, #16]
   146e8:	add	sp, sp, #20
   146ec:	pop	{pc}		; (ldr pc, [sp], #4)
   146f0:	movw	r6, #32320	; 0x7e40
   146f4:	movt	r6, #6
   146f8:	mov	r5, r0
   146fc:	ldr	r1, [r6, #12]
   14700:	mov	r4, r2
   14704:	ldr	r0, [r6, #16]
   14708:	bl	282f0 <__assert_fail@plt+0x15cfc>
   1470c:	subs	r7, r0, #0
   14710:	beq	14738 <__assert_fail@plt+0x2144>
   14714:	mov	r2, #16
   14718:	mov	r1, r7
   1471c:	ldr	r0, [r4, #40]	; 0x28
   14720:	bl	12210 <fnmatch@plt>
   14724:	clz	r4, r0
   14728:	lsr	r4, r4, #5
   1472c:	mov	r0, r7
   14730:	bl	38b10 <__assert_fail@plt+0x2651c>
   14734:	b	146d8 <__assert_fail@plt+0x20e4>
   14738:	bl	12348 <__errno_location@plt>
   1473c:	mov	r1, r5
   14740:	ldr	r0, [r0]
   14744:	mov	r4, r7
   14748:	bl	1d704 <__assert_fail@plt+0xb110>
   1474c:	mov	r3, #1
   14750:	str	r3, [r6, #28]
   14754:	b	1472c <__assert_fail@plt+0x2138>
   14758:	strd	r4, [sp, #-16]!
   1475c:	ldr	r5, [r2, #40]	; 0x28
   14760:	str	r6, [sp, #8]
   14764:	str	lr, [sp, #12]
   14768:	bl	2888c <__assert_fail@plt+0x16298>
   1476c:	mov	r4, r0
   14770:	bl	28abc <__assert_fail@plt+0x164c8>
   14774:	mov	r1, r4
   14778:	mov	r2, #16
   1477c:	mov	r0, r5
   14780:	bl	12210 <fnmatch@plt>
   14784:	mov	r5, r0
   14788:	mov	r0, r4
   1478c:	bl	38b10 <__assert_fail@plt+0x2651c>
   14790:	clz	r0, r5
   14794:	ldrd	r4, [sp]
   14798:	lsr	r0, r0, #5
   1479c:	ldr	r6, [sp, #8]
   147a0:	add	sp, sp, #12
   147a4:	pop	{pc}		; (ldr pc, [sp], #4)
   147a8:	ldr	r3, [r2, #40]	; 0x28
   147ac:	cmp	r3, #1
   147b0:	beq	147e8 <__assert_fail@plt+0x21f4>
   147b4:	cmp	r3, #0
   147b8:	beq	14804 <__assert_fail@plt+0x2210>
   147bc:	cmp	r3, #2
   147c0:	bne	147e0 <__assert_fail@plt+0x21ec>
   147c4:	ldrd	r2, [r2, #48]	; 0x30
   147c8:	ldrd	r0, [r1, #96]	; 0x60
   147cc:	cmp	r1, r3
   147d0:	cmpeq	r0, r2
   147d4:	moveq	r0, #1
   147d8:	movne	r0, #0
   147dc:	bx	lr
   147e0:	mov	r0, #0
   147e4:	bx	lr
   147e8:	ldrd	r2, [r2, #48]	; 0x30
   147ec:	ldrd	r0, [r1, #96]	; 0x60
   147f0:	cmp	r1, r3
   147f4:	cmpeq	r0, r2
   147f8:	movcc	r0, #1
   147fc:	movcs	r0, #0
   14800:	bx	lr
   14804:	ldrd	r2, [r2, #48]	; 0x30
   14808:	ldrd	r0, [r1, #96]	; 0x60
   1480c:	cmp	r1, r3
   14810:	cmpeq	r0, r2
   14814:	movhi	r0, #1
   14818:	movls	r0, #0
   1481c:	bx	lr
   14820:	ldr	r3, [r2, #40]	; 0x28
   14824:	mov	r1, r0
   14828:	mov	r2, #16
   1482c:	str	r4, [sp, #-8]!
   14830:	str	lr, [sp, #4]
   14834:	mov	r0, r3
   14838:	bl	12210 <fnmatch@plt>
   1483c:	clz	r0, r0
   14840:	ldr	r4, [sp]
   14844:	add	sp, sp, #4
   14848:	lsr	r0, r0, #5
   1484c:	pop	{pc}		; (ldr pc, [sp], #4)
   14850:	ldr	r3, [r2, #40]	; 0x28
   14854:	cmp	r3, #1
   14858:	beq	14898 <__assert_fail@plt+0x22a4>
   1485c:	cmp	r3, #0
   14860:	beq	148bc <__assert_fail@plt+0x22c8>
   14864:	cmp	r3, #2
   14868:	bne	14890 <__assert_fail@plt+0x229c>
   1486c:	ldr	r3, [r1, #20]
   14870:	ldrd	r0, [r2, #48]	; 0x30
   14874:	mov	r2, r3
   14878:	mov	r3, #0
   1487c:	cmp	r1, r3
   14880:	cmpeq	r0, r2
   14884:	moveq	r0, #1
   14888:	movne	r0, #0
   1488c:	bx	lr
   14890:	mov	r0, #0
   14894:	bx	lr
   14898:	ldr	r3, [r1, #20]
   1489c:	ldrd	r0, [r2, #48]	; 0x30
   148a0:	mov	r2, r3
   148a4:	mov	r3, #0
   148a8:	cmp	r3, r1
   148ac:	cmpeq	r2, r0
   148b0:	movcc	r0, #1
   148b4:	movcs	r0, #0
   148b8:	bx	lr
   148bc:	ldr	r3, [r1, #20]
   148c0:	ldrd	r0, [r2, #48]	; 0x30
   148c4:	mov	r2, r3
   148c8:	mov	r3, #0
   148cc:	cmp	r3, r1
   148d0:	cmpeq	r2, r0
   148d4:	movhi	r0, #1
   148d8:	movls	r0, #0
   148dc:	bx	lr
   148e0:	ldr	r3, [r1, #16]
   148e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   148e8:	strd	r6, [sp, #8]
   148ec:	str	r8, [sp, #16]
   148f0:	str	lr, [sp, #20]
   148f4:	and	r3, r3, #61440	; 0xf000
   148f8:	cmp	r3, #40960	; 0xa000
   148fc:	movne	r4, #0
   14900:	beq	1491c <__assert_fail@plt+0x2328>
   14904:	mov	r0, r4
   14908:	ldrd	r4, [sp]
   1490c:	ldrd	r6, [sp, #8]
   14910:	ldr	r8, [sp, #16]
   14914:	add	sp, sp, #20
   14918:	pop	{pc}		; (ldr pc, [sp], #4)
   1491c:	movw	r6, #32320	; 0x7e40
   14920:	movt	r6, #6
   14924:	mov	r5, r0
   14928:	ldr	r1, [r6, #12]
   1492c:	mov	r4, r2
   14930:	ldr	r0, [r6, #16]
   14934:	bl	282f0 <__assert_fail@plt+0x15cfc>
   14938:	subs	r7, r0, #0
   1493c:	beq	14964 <__assert_fail@plt+0x2370>
   14940:	mov	r2, #0
   14944:	mov	r1, r7
   14948:	ldr	r0, [r4, #40]	; 0x28
   1494c:	bl	12210 <fnmatch@plt>
   14950:	clz	r4, r0
   14954:	lsr	r4, r4, #5
   14958:	mov	r0, r7
   1495c:	bl	38b10 <__assert_fail@plt+0x2651c>
   14960:	b	14904 <__assert_fail@plt+0x2310>
   14964:	bl	12348 <__errno_location@plt>
   14968:	mov	r1, r5
   1496c:	ldr	r0, [r0]
   14970:	mov	r4, r7
   14974:	bl	1d704 <__assert_fail@plt+0xb110>
   14978:	mov	r3, #1
   1497c:	str	r3, [r6, #28]
   14980:	b	14958 <__assert_fail@plt+0x2364>
   14984:	str	r4, [sp, #-8]!
   14988:	movw	ip, #32364	; 0x7e6c
   1498c:	movt	ip, #6
   14990:	ldr	r4, [r2, #44]	; 0x2c
   14994:	mov	r3, r1
   14998:	movw	r1, #32320	; 0x7e40
   1499c:	movt	r1, #6
   149a0:	ldrb	r2, [r2, #32]
   149a4:	str	lr, [sp, #4]
   149a8:	sub	sp, sp, #16
   149ac:	ldr	lr, [ip, #20]
   149b0:	str	r4, [sp, #12]
   149b4:	ldr	ip, [ip, #40]	; 0x28
   149b8:	str	r2, [sp, #8]
   149bc:	ldr	r2, [r1, #12]
   149c0:	str	lr, [sp]
   149c4:	ldr	r1, [r1, #16]
   149c8:	str	ip, [sp, #4]
   149cc:	bl	273f4 <__assert_fail@plt+0x14e00>
   149d0:	mov	r0, #1
   149d4:	add	sp, sp, #16
   149d8:	ldr	r4, [sp]
   149dc:	add	sp, sp, #4
   149e0:	pop	{pc}		; (ldr pc, [sp], #4)
   149e4:	ldr	r3, [r2, #44]	; 0x2c
   149e8:	strd	r4, [sp, #-16]!
   149ec:	mov	r5, r2
   149f0:	ldr	r0, [r1, #80]	; 0x50
   149f4:	ldr	r4, [r1, #84]	; 0x54
   149f8:	cmp	r3, #1
   149fc:	str	r6, [sp, #8]
   14a00:	str	lr, [sp, #12]
   14a04:	beq	14a7c <__assert_fail@plt+0x2488>
   14a08:	cmp	r3, #0
   14a0c:	beq	14ac8 <__assert_fail@plt+0x24d4>
   14a10:	cmp	r3, #2
   14a14:	bne	14b14 <__assert_fail@plt+0x2520>
   14a18:	ldr	r1, [r2, #48]	; 0x30
   14a1c:	bl	123cc <difftime@plt>
   14a20:	ldr	r3, [r5, #52]	; 0x34
   14a24:	vldr	d6, [pc, #260]	; 14b30 <__assert_fail@plt+0x253c>
   14a28:	sub	r4, r4, r3
   14a2c:	vmov	s15, r4
   14a30:	vcvt.f64.s32	d7, s15
   14a34:	vmla.f64	d0, d7, d6
   14a38:	vcmpe.f64	d0, #0.0
   14a3c:	vmrs	APSR_nzcv, fpscr
   14a40:	ble	14a68 <__assert_fail@plt+0x2474>
   14a44:	vldr	d7, [pc, #236]	; 14b38 <__assert_fail@plt+0x2544>
   14a48:	ldrd	r4, [sp]
   14a4c:	ldr	r6, [sp, #8]
   14a50:	add	sp, sp, #12
   14a54:	vcmpe.f64	d0, d7
   14a58:	vmrs	APSR_nzcv, fpscr
   14a5c:	movls	r0, #1
   14a60:	movhi	r0, #0
   14a64:	pop	{pc}		; (ldr pc, [sp], #4)
   14a68:	ldrd	r4, [sp]
   14a6c:	mov	r0, #0
   14a70:	ldr	r6, [sp, #8]
   14a74:	add	sp, sp, #12
   14a78:	pop	{pc}		; (ldr pc, [sp], #4)
   14a7c:	ldr	r1, [r2, #48]	; 0x30
   14a80:	ldr	r5, [r2, #52]	; 0x34
   14a84:	cmp	r4, r5
   14a88:	cmpeq	r0, r1
   14a8c:	beq	14a68 <__assert_fail@plt+0x2474>
   14a90:	sub	r4, r4, r5
   14a94:	bl	123cc <difftime@plt>
   14a98:	vmov	s15, r4
   14a9c:	vldr	d6, [pc, #140]	; 14b30 <__assert_fail@plt+0x253c>
   14aa0:	ldrd	r4, [sp]
   14aa4:	ldr	r6, [sp, #8]
   14aa8:	add	sp, sp, #12
   14aac:	vcvt.f64.s32	d7, s15
   14ab0:	vmla.f64	d0, d7, d6
   14ab4:	vcmpe.f64	d0, #0.0
   14ab8:	vmrs	APSR_nzcv, fpscr
   14abc:	movmi	r0, #1
   14ac0:	movpl	r0, #0
   14ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ac8:	ldr	r1, [r2, #48]	; 0x30
   14acc:	ldr	r5, [r2, #52]	; 0x34
   14ad0:	cmp	r0, r1
   14ad4:	cmpeq	r4, r5
   14ad8:	beq	14a68 <__assert_fail@plt+0x2474>
   14adc:	sub	r4, r4, r5
   14ae0:	bl	123cc <difftime@plt>
   14ae4:	vmov	s15, r4
   14ae8:	vldr	d6, [pc, #64]	; 14b30 <__assert_fail@plt+0x253c>
   14aec:	ldrd	r4, [sp]
   14af0:	ldr	r6, [sp, #8]
   14af4:	add	sp, sp, #12
   14af8:	vcvt.f64.s32	d7, s15
   14afc:	vmla.f64	d0, d7, d6
   14b00:	vcmpe.f64	d0, #0.0
   14b04:	vmrs	APSR_nzcv, fpscr
   14b08:	movpl	r0, #1
   14b0c:	movmi	r0, #0
   14b10:	pop	{pc}		; (ldr pc, [sp], #4)
   14b14:	movw	r1, #3576	; 0xdf8
   14b18:	movt	r1, #5
   14b1c:	ldr	r3, [pc, #28]	; 14b40 <__assert_fail@plt+0x254c>
   14b20:	movw	r0, #20308	; 0x4f54
   14b24:	movt	r0, #5
   14b28:	mov	r2, #138	; 0x8a
   14b2c:	bl	125f4 <__assert_fail@plt>
   14b30:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14b34:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14b38:	andeq	r0, r0, r0
   14b3c:	submi	r0, lr, r0
   14b40:	andeq	r0, r5, r0, lsr #27
   14b44:	ldr	r3, [r2, #44]	; 0x2c
   14b48:	strd	r4, [sp, #-16]!
   14b4c:	mov	r5, r2
   14b50:	ldr	r0, [r1, #80]	; 0x50
   14b54:	ldr	r4, [r1, #84]	; 0x54
   14b58:	cmp	r3, #1
   14b5c:	str	r6, [sp, #8]
   14b60:	str	lr, [sp, #12]
   14b64:	beq	14bdc <__assert_fail@plt+0x25e8>
   14b68:	cmp	r3, #0
   14b6c:	beq	14c28 <__assert_fail@plt+0x2634>
   14b70:	cmp	r3, #2
   14b74:	bne	14c74 <__assert_fail@plt+0x2680>
   14b78:	ldr	r1, [r2, #48]	; 0x30
   14b7c:	bl	123cc <difftime@plt>
   14b80:	ldr	r3, [r5, #52]	; 0x34
   14b84:	vldr	d6, [pc, #260]	; 14c90 <__assert_fail@plt+0x269c>
   14b88:	sub	r4, r4, r3
   14b8c:	vmov	s15, r4
   14b90:	vcvt.f64.s32	d7, s15
   14b94:	vmla.f64	d0, d7, d6
   14b98:	vcmpe.f64	d0, #0.0
   14b9c:	vmrs	APSR_nzcv, fpscr
   14ba0:	ble	14bc8 <__assert_fail@plt+0x25d4>
   14ba4:	vldr	d7, [pc, #236]	; 14c98 <__assert_fail@plt+0x26a4>
   14ba8:	ldrd	r4, [sp]
   14bac:	ldr	r6, [sp, #8]
   14bb0:	add	sp, sp, #12
   14bb4:	vcmpe.f64	d0, d7
   14bb8:	vmrs	APSR_nzcv, fpscr
   14bbc:	movls	r0, #1
   14bc0:	movhi	r0, #0
   14bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bc8:	ldrd	r4, [sp]
   14bcc:	mov	r0, #0
   14bd0:	ldr	r6, [sp, #8]
   14bd4:	add	sp, sp, #12
   14bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bdc:	ldr	r1, [r2, #48]	; 0x30
   14be0:	ldr	r5, [r2, #52]	; 0x34
   14be4:	cmp	r4, r5
   14be8:	cmpeq	r0, r1
   14bec:	beq	14bc8 <__assert_fail@plt+0x25d4>
   14bf0:	sub	r4, r4, r5
   14bf4:	bl	123cc <difftime@plt>
   14bf8:	vmov	s15, r4
   14bfc:	vldr	d6, [pc, #140]	; 14c90 <__assert_fail@plt+0x269c>
   14c00:	ldrd	r4, [sp]
   14c04:	ldr	r6, [sp, #8]
   14c08:	add	sp, sp, #12
   14c0c:	vcvt.f64.s32	d7, s15
   14c10:	vmla.f64	d0, d7, d6
   14c14:	vcmpe.f64	d0, #0.0
   14c18:	vmrs	APSR_nzcv, fpscr
   14c1c:	movmi	r0, #1
   14c20:	movpl	r0, #0
   14c24:	pop	{pc}		; (ldr pc, [sp], #4)
   14c28:	ldr	r1, [r2, #48]	; 0x30
   14c2c:	ldr	r5, [r2, #52]	; 0x34
   14c30:	cmp	r0, r1
   14c34:	cmpeq	r4, r5
   14c38:	beq	14bc8 <__assert_fail@plt+0x25d4>
   14c3c:	sub	r4, r4, r5
   14c40:	bl	123cc <difftime@plt>
   14c44:	vmov	s15, r4
   14c48:	vldr	d6, [pc, #64]	; 14c90 <__assert_fail@plt+0x269c>
   14c4c:	ldrd	r4, [sp]
   14c50:	ldr	r6, [sp, #8]
   14c54:	add	sp, sp, #12
   14c58:	vcvt.f64.s32	d7, s15
   14c5c:	vmla.f64	d0, d7, d6
   14c60:	vcmpe.f64	d0, #0.0
   14c64:	vmrs	APSR_nzcv, fpscr
   14c68:	movpl	r0, #1
   14c6c:	movmi	r0, #0
   14c70:	pop	{pc}		; (ldr pc, [sp], #4)
   14c74:	movw	r1, #3576	; 0xdf8
   14c78:	movt	r1, #5
   14c7c:	ldr	r3, [pc, #28]	; 14ca0 <__assert_fail@plt+0x26ac>
   14c80:	movw	r0, #20308	; 0x4f54
   14c84:	movt	r0, #5
   14c88:	mov	r2, #138	; 0x8a
   14c8c:	bl	125f4 <__assert_fail@plt>
   14c90:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14c94:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14c98:	andeq	r0, r0, r0
   14c9c:	rscsmi	r1, r5, r0, lsl #16
   14ca0:	andeq	r0, r5, r0, lsr #27
   14ca4:	strd	r4, [sp, #-16]!
   14ca8:	ldr	r5, [r2, #40]	; 0x28
   14cac:	str	r6, [sp, #8]
   14cb0:	str	lr, [sp, #12]
   14cb4:	bl	2888c <__assert_fail@plt+0x16298>
   14cb8:	mov	r4, r0
   14cbc:	bl	28abc <__assert_fail@plt+0x164c8>
   14cc0:	mov	r1, r4
   14cc4:	mov	r2, #0
   14cc8:	mov	r0, r5
   14ccc:	bl	12210 <fnmatch@plt>
   14cd0:	mov	r5, r0
   14cd4:	mov	r0, r4
   14cd8:	bl	38b10 <__assert_fail@plt+0x2651c>
   14cdc:	clz	r0, r5
   14ce0:	ldrd	r4, [sp]
   14ce4:	lsr	r0, r0, #5
   14ce8:	ldr	r6, [sp, #8]
   14cec:	add	sp, sp, #12
   14cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf4:	str	r4, [sp, #-8]!
   14cf8:	ldr	r2, [r2, #160]	; 0xa0
   14cfc:	str	lr, [sp, #4]
   14d00:	bl	1d5a8 <__assert_fail@plt+0xafb4>
   14d04:	eor	r0, r0, #1
   14d08:	ldr	r4, [sp]
   14d0c:	add	sp, sp, #4
   14d10:	uxtb	r0, r0
   14d14:	pop	{pc}		; (ldr pc, [sp], #4)
   14d18:	ldr	r3, [r2, #44]	; 0x2c
   14d1c:	strd	r4, [sp, #-16]!
   14d20:	str	r6, [sp, #8]
   14d24:	str	lr, [sp, #12]
   14d28:	cmp	r3, #0
   14d2c:	bne	14d8c <__assert_fail@plt+0x2798>
   14d30:	ldr	ip, [r2, #48]	; 0x30
   14d34:	ldr	r5, [r2, #52]	; 0x34
   14d38:	ldr	r0, [r1, #80]	; 0x50
   14d3c:	ldr	r4, [r1, #84]	; 0x54
   14d40:	cmp	r0, ip
   14d44:	cmpeq	r4, r5
   14d48:	moveq	r0, r3
   14d4c:	beq	14d7c <__assert_fail@plt+0x2788>
   14d50:	sub	r4, r4, r5
   14d54:	mov	r1, ip
   14d58:	bl	123cc <difftime@plt>
   14d5c:	vmov	s15, r4
   14d60:	vldr	d6, [pc, #64]	; 14da8 <__assert_fail@plt+0x27b4>
   14d64:	vcvt.f64.s32	d7, s15
   14d68:	vmla.f64	d0, d7, d6
   14d6c:	vcmpe.f64	d0, #0.0
   14d70:	vmrs	APSR_nzcv, fpscr
   14d74:	movpl	r0, #1
   14d78:	movmi	r0, #0
   14d7c:	ldrd	r4, [sp]
   14d80:	ldr	r6, [sp, #8]
   14d84:	add	sp, sp, #12
   14d88:	pop	{pc}		; (ldr pc, [sp], #4)
   14d8c:	movw	r1, #3576	; 0xdf8
   14d90:	movt	r1, #5
   14d94:	ldr	r3, [pc, #20]	; 14db0 <__assert_fail@plt+0x27bc>
   14d98:	movw	r0, #3784	; 0xec8
   14d9c:	movt	r0, #5
   14da0:	movw	r2, #621	; 0x26d
   14da4:	bl	125f4 <__assert_fail@plt>
   14da8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14dac:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14db0:	andeq	r0, r5, r8, asr #27
   14db4:	ldr	r3, [r2, #44]	; 0x2c
   14db8:	strd	r4, [sp, #-16]!
   14dbc:	str	r6, [sp, #8]
   14dc0:	str	lr, [sp, #12]
   14dc4:	cmp	r3, #0
   14dc8:	bne	14ecc <__assert_fail@plt+0x28d8>
   14dcc:	ldr	r3, [r2, #40]	; 0x28
   14dd0:	cmp	r3, #4
   14dd4:	ldrls	pc, [pc, r3, lsl #2]
   14dd8:	b	14ee8 <__assert_fail@plt+0x28f4>
   14ddc:	andeq	r4, r1, r8, asr #28
   14de0:	andeq	r4, r1, r4, asr lr
   14de4:	andeq	r4, r1, r4, lsr #29
   14de8:	strdeq	r4, [r1], -r0
   14dec:			; <UNDEFINED> instruction: 0x00014eb0
   14df0:	ldr	r0, [r1, #80]	; 0x50
   14df4:	ldr	r4, [r1, #84]	; 0x54
   14df8:	ldr	r1, [r2, #48]	; 0x30
   14dfc:	ldr	r5, [r2, #52]	; 0x34
   14e00:	cmp	r0, r1
   14e04:	cmpeq	r4, r5
   14e08:	moveq	r0, #0
   14e0c:	beq	14e38 <__assert_fail@plt+0x2844>
   14e10:	sub	r4, r4, r5
   14e14:	bl	123cc <difftime@plt>
   14e18:	vmov	s15, r4
   14e1c:	vldr	d6, [pc, #228]	; 14f08 <__assert_fail@plt+0x2914>
   14e20:	vcvt.f64.s32	d7, s15
   14e24:	vmla.f64	d0, d7, d6
   14e28:	vcmpe.f64	d0, #0.0
   14e2c:	vmrs	APSR_nzcv, fpscr
   14e30:	movpl	r0, #1
   14e34:	movmi	r0, #0
   14e38:	ldrd	r4, [sp]
   14e3c:	ldr	r6, [sp, #8]
   14e40:	add	sp, sp, #12
   14e44:	pop	{pc}		; (ldr pc, [sp], #4)
   14e48:	ldr	r0, [r1, #72]	; 0x48
   14e4c:	ldr	r4, [r1, #76]	; 0x4c
   14e50:	b	14df8 <__assert_fail@plt+0x2804>
   14e54:	mov	r4, r0
   14e58:	mov	r2, #5
   14e5c:	movw	r1, #3900	; 0xf3c
   14e60:	movt	r1, #5
   14e64:	mov	r0, #0
   14e68:	bl	120b4 <dcgettext@plt>
   14e6c:	mov	r5, r0
   14e70:	mov	r1, r4
   14e74:	mov	r0, #0
   14e78:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   14e7c:	mov	r1, #0
   14e80:	mov	r3, r0
   14e84:	mov	r2, r5
   14e88:	mov	r0, r1
   14e8c:	bl	121ec <error@plt>
   14e90:	ldrd	r4, [sp]
   14e94:	mov	r0, #0
   14e98:	ldr	r6, [sp, #8]
   14e9c:	add	sp, sp, #12
   14ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ea4:	ldr	r0, [r1, #88]	; 0x58
   14ea8:	ldr	r4, [r1, #92]	; 0x5c
   14eac:	b	14df8 <__assert_fail@plt+0x2804>
   14eb0:	movw	r1, #3576	; 0xdf8
   14eb4:	movt	r1, #5
   14eb8:	ldr	r3, [pc, #80]	; 14f10 <__assert_fail@plt+0x291c>
   14ebc:	movw	r0, #3856	; 0xf10
   14ec0:	movt	r0, #5
   14ec4:	mov	r2, #636	; 0x27c
   14ec8:	bl	125f4 <__assert_fail@plt>
   14ecc:	movw	r1, #3576	; 0xdf8
   14ed0:	movt	r1, #5
   14ed4:	ldr	r3, [pc, #52]	; 14f10 <__assert_fail@plt+0x291c>
   14ed8:	movw	r0, #3784	; 0xec8
   14edc:	movt	r0, #5
   14ee0:	movw	r2, #631	; 0x277
   14ee4:	bl	125f4 <__assert_fail@plt>
   14ee8:	movw	r1, #3576	; 0xdf8
   14eec:	movt	r1, #5
   14ef0:	ldr	r3, [pc, #24]	; 14f10 <__assert_fail@plt+0x291c>
   14ef4:	movw	r0, #3844	; 0xf04
   14ef8:	movt	r0, #5
   14efc:	movw	r2, #667	; 0x29b
   14f00:	bl	125f4 <__assert_fail@plt>
   14f04:	nop	{0}
   14f08:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14f0c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14f10:	ldrdeq	r0, [r5], -r4
   14f14:	str	r4, [sp, #-8]!
   14f18:	ldr	r0, [r1, #28]
   14f1c:	str	lr, [sp, #4]
   14f20:	bl	125d0 <getgrgid@plt>
   14f24:	clz	r0, r0
   14f28:	ldr	r4, [sp]
   14f2c:	add	sp, sp, #4
   14f30:	lsr	r0, r0, #5
   14f34:	pop	{pc}		; (ldr pc, [sp], #4)
   14f38:	str	r4, [sp, #-8]!
   14f3c:	ldr	r0, [r1, #24]
   14f40:	str	lr, [sp, #4]
   14f44:	bl	11f58 <getpwuid@plt>
   14f48:	clz	r0, r0
   14f4c:	ldr	r4, [sp]
   14f50:	add	sp, sp, #4
   14f54:	lsr	r0, r0, #5
   14f58:	pop	{pc}		; (ldr pc, [sp], #4)
   14f5c:	movw	r3, #30036	; 0x7554
   14f60:	movt	r3, #6
   14f64:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14f68:	mov	r5, r0
   14f6c:	ldr	r0, [r3]
   14f70:	movw	r4, #30024	; 0x7548
   14f74:	movt	r4, #6
   14f78:	strd	r6, [sp, #8]
   14f7c:	mov	r6, r2
   14f80:	ldr	r2, [r2, #132]	; 0x84
   14f84:	strd	r8, [sp, #16]
   14f88:	mov	r9, r1
   14f8c:	str	sl, [sp, #24]
   14f90:	str	lr, [sp, #28]
   14f94:	ldr	r8, [r2]
   14f98:	bl	38ab0 <__assert_fail@plt+0x264bc>
   14f9c:	ldr	r7, [r4]
   14fa0:	mov	r2, #5
   14fa4:	movw	r1, #3948	; 0xf6c
   14fa8:	movt	r1, #5
   14fac:	mov	r0, #0
   14fb0:	bl	120b4 <dcgettext@plt>
   14fb4:	mov	r1, r0
   14fb8:	mov	r3, r5
   14fbc:	mov	r2, r8
   14fc0:	mov	r0, r7
   14fc4:	bl	1233c <fprintf@plt>
   14fc8:	cmp	r0, #0
   14fcc:	blt	15024 <__assert_fail@plt+0x2a30>
   14fd0:	ldr	r0, [r4]
   14fd4:	bl	38ab0 <__assert_fail@plt+0x264bc>
   14fd8:	bl	38460 <__assert_fail@plt+0x25e6c>
   14fdc:	cmp	r0, #0
   14fe0:	bne	14ffc <__assert_fail@plt+0x2a08>
   14fe4:	ldrd	r4, [sp]
   14fe8:	ldrd	r6, [sp, #8]
   14fec:	ldrd	r8, [sp, #16]
   14ff0:	ldr	sl, [sp, #24]
   14ff4:	add	sp, sp, #28
   14ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ffc:	mov	r2, r6
   15000:	mov	r1, r9
   15004:	ldrd	r6, [sp, #8]
   15008:	mov	r0, r5
   1500c:	ldrd	r4, [sp]
   15010:	ldrd	r8, [sp, #16]
   15014:	ldr	sl, [sp, #24]
   15018:	ldr	lr, [sp, #28]
   1501c:	add	sp, sp, #32
   15020:	b	15d8c <__assert_fail@plt+0x3798>
   15024:	bl	13740 <__assert_fail@plt+0x114c>
   15028:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1502c:	mov	r5, r2
   15030:	movw	r2, #30036	; 0x7554
   15034:	movt	r2, #6
   15038:	ldr	r3, [r5, #132]	; 0x84
   1503c:	movw	r4, #30024	; 0x7548
   15040:	movt	r4, #6
   15044:	strd	r6, [sp, #8]
   15048:	strd	r8, [sp, #16]
   1504c:	mov	r8, r0
   15050:	mov	r9, r1
   15054:	ldr	r0, [r2]
   15058:	str	sl, [sp, #24]
   1505c:	str	lr, [sp, #28]
   15060:	ldr	r7, [r3]
   15064:	bl	38ab0 <__assert_fail@plt+0x264bc>
   15068:	ldr	r6, [r4]
   1506c:	mov	r2, #5
   15070:	movw	r1, #3948	; 0xf6c
   15074:	movt	r1, #5
   15078:	mov	r0, #0
   1507c:	bl	120b4 <dcgettext@plt>
   15080:	mov	r1, r0
   15084:	mov	r3, r8
   15088:	mov	r2, r7
   1508c:	mov	r0, r6
   15090:	bl	1233c <fprintf@plt>
   15094:	cmp	r0, #0
   15098:	blt	150f8 <__assert_fail@plt+0x2b04>
   1509c:	ldr	r0, [r4]
   150a0:	bl	38ab0 <__assert_fail@plt+0x264bc>
   150a4:	bl	38460 <__assert_fail@plt+0x25e6c>
   150a8:	cmp	r0, #0
   150ac:	bne	150c8 <__assert_fail@plt+0x2ad4>
   150b0:	ldrd	r4, [sp]
   150b4:	ldrd	r6, [sp, #8]
   150b8:	ldrd	r8, [sp, #16]
   150bc:	ldr	sl, [sp, #24]
   150c0:	add	sp, sp, #28
   150c4:	pop	{pc}		; (ldr pc, [sp], #4)
   150c8:	movw	r3, #32320	; 0x7e40
   150cc:	movt	r3, #6
   150d0:	ldrd	r6, [sp, #8]
   150d4:	mov	r2, r5
   150d8:	mov	r1, r9
   150dc:	ldrd	r4, [sp]
   150e0:	ldr	r0, [r3, #12]
   150e4:	ldrd	r8, [sp, #16]
   150e8:	ldr	sl, [sp, #24]
   150ec:	ldr	lr, [sp, #28]
   150f0:	add	sp, sp, #32
   150f4:	b	15d8c <__assert_fail@plt+0x3798>
   150f8:	bl	13740 <__assert_fail@plt+0x114c>
   150fc:	mov	r0, #1
   15100:	bx	lr
   15104:	ldr	r3, [r2, #40]	; 0x28
   15108:	mov	r1, r0
   1510c:	mov	r2, #0
   15110:	str	r4, [sp, #-8]!
   15114:	str	lr, [sp, #4]
   15118:	mov	r0, r3
   1511c:	bl	12210 <fnmatch@plt>
   15120:	clz	r0, r0
   15124:	ldr	r4, [sp]
   15128:	add	sp, sp, #4
   1512c:	lsr	r0, r0, #5
   15130:	pop	{pc}		; (ldr pc, [sp], #4)
   15134:	ldr	r1, [r1, #16]
   15138:	ldr	r0, [r2, #40]	; 0x28
   1513c:	and	r3, r1, #61440	; 0xf000
   15140:	cmp	r3, #16384	; 0x4000
   15144:	moveq	r3, #44	; 0x2c
   15148:	movne	r3, #40	; 0x28
   1514c:	add	r2, r2, r3
   15150:	cmp	r0, #1
   15154:	ldr	r3, [r2, #4]
   15158:	beq	15190 <__assert_fail@plt+0x2b9c>
   1515c:	cmp	r0, #0
   15160:	bne	15174 <__assert_fail@plt+0x2b80>
   15164:	bics	r3, r3, r1
   15168:	moveq	r0, #1
   1516c:	movne	r0, #0
   15170:	bx	lr
   15174:	cmp	r0, #2
   15178:	bne	151a8 <__assert_fail@plt+0x2bb4>
   1517c:	ubfx	r0, r1, #0, #12
   15180:	sub	r0, r0, r3
   15184:	clz	r0, r0
   15188:	lsr	r0, r0, #5
   1518c:	bx	lr
   15190:	cmp	r3, #0
   15194:	bxeq	lr
   15198:	tst	r1, r3
   1519c:	movne	r0, #1
   151a0:	moveq	r0, #0
   151a4:	bx	lr
   151a8:	str	r4, [sp, #-8]!
   151ac:	str	lr, [sp, #4]
   151b0:	bl	125a0 <abort@plt>
   151b4:	movw	r0, #32320	; 0x7e40
   151b8:	movt	r0, #6
   151bc:	str	r4, [sp, #-8]!
   151c0:	mov	r3, #0
   151c4:	mov	r2, #1
   151c8:	ldr	r1, [r0, #12]
   151cc:	ldr	r0, [r0, #16]
   151d0:	str	lr, [sp, #4]
   151d4:	bl	11fdc <faccessat@plt>
   151d8:	clz	r0, r0
   151dc:	ldr	r4, [sp]
   151e0:	add	sp, sp, #4
   151e4:	lsr	r0, r0, #5
   151e8:	pop	{pc}		; (ldr pc, [sp], #4)
   151ec:	movw	r0, #32320	; 0x7e40
   151f0:	movt	r0, #6
   151f4:	str	r4, [sp, #-8]!
   151f8:	mov	r3, #0
   151fc:	mov	r2, #4
   15200:	ldr	r1, [r0, #12]
   15204:	ldr	r0, [r0, #16]
   15208:	str	lr, [sp, #4]
   1520c:	bl	11fdc <faccessat@plt>
   15210:	clz	r0, r0
   15214:	ldr	r4, [sp]
   15218:	add	sp, sp, #4
   1521c:	lsr	r0, r0, #5
   15220:	pop	{pc}		; (ldr pc, [sp], #4)
   15224:	movw	r0, #32320	; 0x7e40
   15228:	movt	r0, #6
   1522c:	str	r4, [sp, #-8]!
   15230:	mov	r3, #0
   15234:	mov	r2, #2
   15238:	ldr	r1, [r0, #12]
   1523c:	ldr	r0, [r0, #16]
   15240:	str	lr, [sp, #4]
   15244:	bl	11fdc <faccessat@plt>
   15248:	clz	r0, r0
   1524c:	ldr	r4, [sp]
   15250:	add	sp, sp, #4
   15254:	lsr	r0, r0, #5
   15258:	pop	{pc}		; (ldr pc, [sp], #4)
   1525c:	push	{lr}		; (str lr, [sp, #-4]!)
   15260:	sub	sp, sp, #12
   15264:	mov	r1, r2
   15268:	ldrb	r2, [r2, #52]	; 0x34
   1526c:	movw	r3, #24288	; 0x5ee0
   15270:	movt	r3, #5
   15274:	str	r0, [sp]
   15278:	ldr	r0, [r1, #44]	; 0x2c
   1527c:	ldr	r1, [r1, #56]	; 0x38
   15280:	bl	27ac8 <__assert_fail@plt+0x154d4>
   15284:	mov	r0, #1
   15288:	add	sp, sp, #12
   1528c:	pop	{pc}		; (ldr pc, [sp], #4)
   15290:	str	r4, [sp, #-8]!
   15294:	ldr	r4, [r2, #44]	; 0x2c
   15298:	str	lr, [sp, #4]
   1529c:	mov	r1, r4
   152a0:	bl	12588 <fputs@plt>
   152a4:	mov	r1, r4
   152a8:	mov	r0, #0
   152ac:	bl	124e0 <putc@plt>
   152b0:	ldr	r4, [sp]
   152b4:	add	sp, sp, #4
   152b8:	mov	r0, #1
   152bc:	pop	{pc}		; (ldr pc, [sp], #4)
   152c0:	strd	r4, [sp, #-16]!
   152c4:	mov	r5, r0
   152c8:	str	r6, [sp, #8]
   152cc:	mov	r6, r2
   152d0:	str	lr, [sp, #12]
   152d4:	sub	sp, sp, #8
   152d8:	bl	12300 <strlen@plt>
   152dc:	mov	r3, #0
   152e0:	mov	r4, r0
   152e4:	mov	r2, r0
   152e8:	mov	r1, r5
   152ec:	ldr	r0, [r6, #40]	; 0x28
   152f0:	str	r3, [sp]
   152f4:	bl	4dc94 <__assert_fail@plt+0x3b6a0>
   152f8:	sub	r0, r0, r4
   152fc:	clz	r0, r0
   15300:	lsr	r0, r0, #5
   15304:	add	sp, sp, #8
   15308:	ldrd	r4, [sp]
   1530c:	ldr	r6, [sp, #8]
   15310:	add	sp, sp, #12
   15314:	pop	{pc}		; (ldr pc, [sp], #4)
   15318:	str	r4, [sp, #-16]!
   1531c:	mov	r4, r2
   15320:	ldr	r2, [r2, #44]	; 0x2c
   15324:	ldrd	r0, [r1, #48]	; 0x30
   15328:	strd	r6, [sp, #4]
   1532c:	str	lr, [sp, #12]
   15330:	asr	r3, r2, #31
   15334:	bl	50488 <__assert_fail@plt+0x3de94>
   15338:	ldr	ip, [r4, #40]	; 0x28
   1533c:	orrs	r3, r2, r3
   15340:	movne	r3, #1
   15344:	moveq	r3, #0
   15348:	adds	r6, r0, r3
   1534c:	adc	r7, r1, #0
   15350:	cmp	ip, #1
   15354:	beq	15390 <__assert_fail@plt+0x2d9c>
   15358:	cmp	ip, #0
   1535c:	beq	153b4 <__assert_fail@plt+0x2dc0>
   15360:	cmp	ip, #2
   15364:	movne	r0, #0
   15368:	bne	15380 <__assert_fail@plt+0x2d8c>
   1536c:	ldrd	r2, [r4, #48]	; 0x30
   15370:	cmp	r3, r7
   15374:	cmpeq	r2, r6
   15378:	moveq	r0, #1
   1537c:	movne	r0, #0
   15380:	ldr	r4, [sp]
   15384:	ldrd	r6, [sp, #4]
   15388:	add	sp, sp, #12
   1538c:	pop	{pc}		; (ldr pc, [sp], #4)
   15390:	ldrd	r2, [r4, #48]	; 0x30
   15394:	ldr	r4, [sp]
   15398:	cmp	r3, r7
   1539c:	cmpeq	r2, r6
   153a0:	ldrd	r6, [sp, #4]
   153a4:	add	sp, sp, #12
   153a8:	movhi	r0, #1
   153ac:	movls	r0, #0
   153b0:	pop	{pc}		; (ldr pc, [sp], #4)
   153b4:	ldrd	r2, [r4, #48]	; 0x30
   153b8:	ldr	r4, [sp]
   153bc:	cmp	r3, r7
   153c0:	cmpeq	r2, r6
   153c4:	ldrd	r6, [sp, #4]
   153c8:	add	sp, sp, #12
   153cc:	movcc	r0, #1
   153d0:	movcs	r0, #0
   153d4:	pop	{pc}		; (ldr pc, [sp], #4)
   153d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   153dc:	strd	r6, [sp, #8]
   153e0:	ldrd	r6, [r1, #96]	; 0x60
   153e4:	strd	r8, [sp, #16]
   153e8:	str	sl, [sp, #24]
   153ec:	str	lr, [sp, #28]
   153f0:	orrs	r3, r6, r7
   153f4:	beq	15424 <__assert_fail@plt+0x2e30>
   153f8:	ldrd	r4, [r2, #40]	; 0x28
   153fc:	cmp	r7, r5
   15400:	cmpeq	r6, r4
   15404:	beq	15424 <__assert_fail@plt+0x2e30>
   15408:	mov	r0, #0
   1540c:	ldrd	r4, [sp]
   15410:	ldrd	r6, [sp, #8]
   15414:	ldrd	r8, [sp, #16]
   15418:	ldr	sl, [sp, #24]
   1541c:	add	sp, sp, #28
   15420:	pop	{pc}		; (ldr pc, [sp], #4)
   15424:	movw	r3, #32320	; 0x7e40
   15428:	movt	r3, #6
   1542c:	mov	r5, r2
   15430:	mov	r4, r1
   15434:	mov	r2, r1
   15438:	ldr	r1, [r3, #12]
   1543c:	bl	1c45c <__assert_fail@plt+0x9e68>
   15440:	cmp	r0, #0
   15444:	bne	15408 <__assert_fail@plt+0x2e14>
   15448:	ldrd	r6, [r5, #40]	; 0x28
   1544c:	ldrd	r8, [r4, #96]	; 0x60
   15450:	cmp	r9, r7
   15454:	cmpeq	r8, r6
   15458:	bne	1540c <__assert_fail@plt+0x2e18>
   1545c:	ldrd	r0, [r4]
   15460:	ldrd	r2, [r5, #48]	; 0x30
   15464:	cmp	r1, r3
   15468:	cmpeq	r0, r2
   1546c:	moveq	r0, #1
   15470:	movne	r0, #0
   15474:	b	1540c <__assert_fail@plt+0x2e18>
   15478:	mov	r0, #1
   1547c:	bx	lr
   15480:	movw	r3, #32320	; 0x7e40
   15484:	movt	r3, #6
   15488:	ldrb	r0, [r3, #5]
   1548c:	cmp	r0, #0
   15490:	beq	1554c <__assert_fail@plt+0x2f58>
   15494:	ldr	r0, [r3, #8]
   15498:	cmp	r0, #0
   1549c:	bxeq	lr
   154a0:	ldrb	r3, [r3, #4]
   154a4:	cmp	r3, #0
   154a8:	ldrne	r0, [r1, #16]
   154ac:	and	r0, r0, #61440	; 0xf000
   154b0:	cmp	r0, #24576	; 0x6000
   154b4:	beq	15544 <__assert_fail@plt+0x2f50>
   154b8:	bhi	154dc <__assert_fail@plt+0x2ee8>
   154bc:	cmp	r0, #8192	; 0x2000
   154c0:	beq	15534 <__assert_fail@plt+0x2f40>
   154c4:	cmp	r0, #16384	; 0x4000
   154c8:	beq	15514 <__assert_fail@plt+0x2f20>
   154cc:	cmp	r0, #4096	; 0x1000
   154d0:	beq	15504 <__assert_fail@plt+0x2f10>
   154d4:	mov	r0, #0
   154d8:	bx	lr
   154dc:	cmp	r0, #40960	; 0xa000
   154e0:	beq	1553c <__assert_fail@plt+0x2f48>
   154e4:	cmp	r0, #49152	; 0xc000
   154e8:	beq	15524 <__assert_fail@plt+0x2f30>
   154ec:	cmp	r0, #32768	; 0x8000
   154f0:	moveq	r3, #3
   154f4:	bne	154d4 <__assert_fail@plt+0x2ee0>
   154f8:	add	r2, r2, r3
   154fc:	ldrb	r0, [r2, #40]	; 0x28
   15500:	bx	lr
   15504:	mov	r3, #5
   15508:	add	r2, r2, r3
   1550c:	ldrb	r0, [r2, #40]	; 0x28
   15510:	bx	lr
   15514:	mov	r3, #2
   15518:	add	r2, r2, r3
   1551c:	ldrb	r0, [r2, #40]	; 0x28
   15520:	bx	lr
   15524:	mov	r3, #6
   15528:	add	r2, r2, r3
   1552c:	ldrb	r0, [r2, #40]	; 0x28
   15530:	bx	lr
   15534:	mov	r3, #1
   15538:	b	154f8 <__assert_fail@plt+0x2f04>
   1553c:	mov	r3, #4
   15540:	b	154f8 <__assert_fail@plt+0x2f04>
   15544:	mov	r3, #0
   15548:	b	154f8 <__assert_fail@plt+0x2f04>
   1554c:	str	r4, [sp, #-8]!
   15550:	str	lr, [sp, #4]
   15554:	bl	13774 <__assert_fail@plt+0x1180>
   15558:	ldr	r3, [r2, #40]	; 0x28
   1555c:	cmp	r3, #1
   15560:	beq	155a0 <__assert_fail@plt+0x2fac>
   15564:	cmp	r3, #0
   15568:	beq	155c4 <__assert_fail@plt+0x2fd0>
   1556c:	cmp	r3, #2
   15570:	bne	15598 <__assert_fail@plt+0x2fa4>
   15574:	ldr	r3, [r1, #24]
   15578:	ldrd	r0, [r2, #48]	; 0x30
   1557c:	mov	r2, r3
   15580:	mov	r3, #0
   15584:	cmp	r1, r3
   15588:	cmpeq	r0, r2
   1558c:	moveq	r0, #1
   15590:	movne	r0, #0
   15594:	bx	lr
   15598:	mov	r0, #0
   1559c:	bx	lr
   155a0:	ldr	r3, [r1, #24]
   155a4:	ldrd	r0, [r2, #48]	; 0x30
   155a8:	mov	r2, r3
   155ac:	mov	r3, #0
   155b0:	cmp	r3, r1
   155b4:	cmpeq	r2, r0
   155b8:	movcc	r0, #1
   155bc:	movcs	r0, #0
   155c0:	bx	lr
   155c4:	ldr	r3, [r1, #24]
   155c8:	ldrd	r0, [r2, #48]	; 0x30
   155cc:	mov	r2, r3
   155d0:	mov	r3, #0
   155d4:	cmp	r3, r1
   155d8:	cmpeq	r2, r0
   155dc:	movhi	r0, #1
   155e0:	movls	r0, #0
   155e4:	bx	lr
   155e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   155ec:	ldr	r4, [r1, #88]	; 0x58
   155f0:	strd	r6, [sp, #8]
   155f4:	strd	r8, [sp, #16]
   155f8:	mov	r8, r2
   155fc:	ldr	r9, [r1, #72]	; 0x48
   15600:	str	sl, [sp, #24]
   15604:	ldr	r6, [r1, #76]	; 0x4c
   15608:	str	lr, [sp, #28]
   1560c:	ldr	r7, [r1, #92]	; 0x5c
   15610:	cmp	r6, r7
   15614:	cmpeq	r9, r4
   15618:	moveq	r6, #0
   1561c:	moveq	r5, #1
   15620:	movne	r5, #0
   15624:	moveq	r0, r6
   15628:	beq	15674 <__assert_fail@plt+0x3080>
   1562c:	mov	r1, r4
   15630:	mov	r0, r9
   15634:	bl	123cc <difftime@plt>
   15638:	sub	r3, r6, r7
   1563c:	vldr	d6, [pc, #332]	; 15790 <__assert_fail@plt+0x319c>
   15640:	vmov	s15, r3
   15644:	vcvt.f64.s32	d7, s15
   15648:	vmla.f64	d0, d7, d6
   1564c:	vcmpe.f64	d0, #0.0
   15650:	vmrs	APSR_nzcv, fpscr
   15654:	bmi	156d0 <__assert_fail@plt+0x30dc>
   15658:	subs	r6, r7, r6
   1565c:	sub	r0, r4, r9
   15660:	bpl	15674 <__assert_fail@plt+0x3080>
   15664:	add	r6, r6, #998244352	; 0x3b800000
   15668:	sub	r0, r0, #1
   1566c:	add	r6, r6, #1753088	; 0x1ac000
   15670:	add	r6, r6, #2560	; 0xa00
   15674:	ldr	r3, [r8, #44]	; 0x2c
   15678:	cmp	r3, #1
   1567c:	beq	1572c <__assert_fail@plt+0x3138>
   15680:	cmp	r3, #0
   15684:	beq	156ec <__assert_fail@plt+0x30f8>
   15688:	cmp	r3, #2
   1568c:	bne	15774 <__assert_fail@plt+0x3180>
   15690:	ldr	r1, [r8, #48]	; 0x30
   15694:	bl	123cc <difftime@plt>
   15698:	ldr	r7, [r8, #52]	; 0x34
   1569c:	vldr	d6, [pc, #236]	; 15790 <__assert_fail@plt+0x319c>
   156a0:	sub	r6, r6, r7
   156a4:	vmov	s15, r6
   156a8:	vcvt.f64.s32	d7, s15
   156ac:	vmla.f64	d0, d7, d6
   156b0:	vcmpe.f64	d0, #0.0
   156b4:	vmrs	APSR_nzcv, fpscr
   156b8:	ble	1576c <__assert_fail@plt+0x3178>
   156bc:	vldr	d7, [pc, #212]	; 15798 <__assert_fail@plt+0x31a4>
   156c0:	vcmpe.f64	d0, d7
   156c4:	vmrs	APSR_nzcv, fpscr
   156c8:	movls	r5, #1
   156cc:	movhi	r5, #0
   156d0:	mov	r0, r5
   156d4:	ldrd	r4, [sp]
   156d8:	ldrd	r6, [sp, #8]
   156dc:	ldrd	r8, [sp, #16]
   156e0:	ldr	sl, [sp, #24]
   156e4:	add	sp, sp, #28
   156e8:	pop	{pc}		; (ldr pc, [sp], #4)
   156ec:	ldr	r1, [r8, #48]	; 0x30
   156f0:	ldr	r7, [r8, #52]	; 0x34
   156f4:	cmp	r6, r7
   156f8:	cmpeq	r0, r1
   156fc:	beq	1576c <__assert_fail@plt+0x3178>
   15700:	sub	r6, r6, r7
   15704:	bl	123cc <difftime@plt>
   15708:	vmov	s15, r6
   1570c:	vldr	d6, [pc, #124]	; 15790 <__assert_fail@plt+0x319c>
   15710:	vcvt.f64.s32	d7, s15
   15714:	vmla.f64	d0, d7, d6
   15718:	vcmpe.f64	d0, #0.0
   1571c:	vmrs	APSR_nzcv, fpscr
   15720:	movpl	r5, #1
   15724:	movmi	r5, #0
   15728:	b	156d0 <__assert_fail@plt+0x30dc>
   1572c:	ldr	r1, [r8, #48]	; 0x30
   15730:	ldr	r7, [r8, #52]	; 0x34
   15734:	cmp	r6, r7
   15738:	cmpeq	r0, r1
   1573c:	beq	1576c <__assert_fail@plt+0x3178>
   15740:	sub	r6, r6, r7
   15744:	bl	123cc <difftime@plt>
   15748:	vmov	s15, r6
   1574c:	vldr	d6, [pc, #60]	; 15790 <__assert_fail@plt+0x319c>
   15750:	vcvt.f64.s32	d7, s15
   15754:	vmla.f64	d0, d7, d6
   15758:	vcmpe.f64	d0, #0.0
   1575c:	vmrs	APSR_nzcv, fpscr
   15760:	movmi	r5, #1
   15764:	movpl	r5, #0
   15768:	b	156d0 <__assert_fail@plt+0x30dc>
   1576c:	mov	r5, #0
   15770:	b	156d0 <__assert_fail@plt+0x30dc>
   15774:	movw	r1, #3576	; 0xdf8
   15778:	movt	r1, #5
   1577c:	ldr	r3, [pc, #28]	; 157a0 <__assert_fail@plt+0x31ac>
   15780:	movw	r0, #20308	; 0x4f54
   15784:	movt	r0, #5
   15788:	mov	r2, #138	; 0x8a
   1578c:	bl	125f4 <__assert_fail@plt>
   15790:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   15794:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   15798:	andeq	r0, r0, r0
   1579c:	rscsmi	r1, r5, r0, lsl #16
   157a0:	andeq	r0, r5, r0, lsr #27
   157a4:	ldr	r3, [r1, #24]
   157a8:	ldr	r0, [r2, #40]	; 0x28
   157ac:	sub	r0, r0, r3
   157b0:	clz	r0, r0
   157b4:	lsr	r0, r0, #5
   157b8:	bx	lr
   157bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   157c0:	movw	r5, #32320	; 0x7e40
   157c4:	movt	r5, #6
   157c8:	strd	r6, [sp, #8]
   157cc:	mov	r6, r2
   157d0:	mov	r7, r0
   157d4:	str	r8, [sp, #16]
   157d8:	mov	r8, r1
   157dc:	movw	r4, #51776	; 0xca40
   157e0:	movt	r4, #1
   157e4:	str	lr, [sp, #20]
   157e8:	sub	sp, sp, #104	; 0x68
   157ec:	bl	1ccdc <__assert_fail@plt+0xa6e8>
   157f0:	cmp	r0, #0
   157f4:	movw	r3, #52028	; 0xcb3c
   157f8:	movt	r3, #1
   157fc:	mov	r0, sp
   15800:	movne	r4, r3
   15804:	bl	1c458 <__assert_fail@plt+0x9e64>
   15808:	mov	r1, sp
   1580c:	ldr	r0, [r5, #12]
   15810:	blx	r4
   15814:	cmp	r0, #0
   15818:	beq	15884 <__assert_fail@plt+0x3290>
   1581c:	bl	1ccdc <__assert_fail@plt+0xa6e8>
   15820:	mov	r4, r0
   15824:	bl	12348 <__errno_location@plt>
   15828:	cmp	r4, #0
   1582c:	ldr	r4, [r0]
   15830:	beq	1583c <__assert_fail@plt+0x3248>
   15834:	cmp	r4, #2
   15838:	beq	15934 <__assert_fail@plt+0x3340>
   1583c:	mov	r1, r7
   15840:	mov	r0, #0
   15844:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   15848:	mov	r3, r0
   1584c:	mov	r1, r4
   15850:	mov	r0, #0
   15854:	movw	r2, #20016	; 0x4e30
   15858:	movt	r2, #5
   1585c:	bl	121ec <error@plt>
   15860:	mov	r3, #1
   15864:	mov	r0, #0
   15868:	str	r3, [r5, #28]
   1586c:	add	sp, sp, #104	; 0x68
   15870:	ldrd	r4, [sp]
   15874:	ldrd	r6, [sp, #8]
   15878:	ldr	r8, [sp, #16]
   1587c:	add	sp, sp, #20
   15880:	pop	{pc}		; (ldr pc, [sp], #4)
   15884:	ldrb	r3, [r5, #5]
   15888:	cmp	r3, #0
   1588c:	beq	15964 <__assert_fail@plt+0x3370>
   15890:	ldr	r3, [r5, #8]
   15894:	cmp	r3, #0
   15898:	beq	158d0 <__assert_fail@plt+0x32dc>
   1589c:	ldrb	r2, [r5, #4]
   158a0:	cmp	r2, #0
   158a4:	ldrne	r3, [sp, #16]
   158a8:	and	r3, r3, #61440	; 0xf000
   158ac:	cmp	r3, #24576	; 0x6000
   158b0:	beq	1595c <__assert_fail@plt+0x3368>
   158b4:	bls	158d8 <__assert_fail@plt+0x32e4>
   158b8:	cmp	r3, #40960	; 0xa000
   158bc:	beq	1592c <__assert_fail@plt+0x3338>
   158c0:	cmp	r3, #49152	; 0xc000
   158c4:	beq	1591c <__assert_fail@plt+0x3328>
   158c8:	cmp	r3, #32768	; 0x8000
   158cc:	beq	15914 <__assert_fail@plt+0x3320>
   158d0:	mov	r0, #0
   158d4:	b	1586c <__assert_fail@plt+0x3278>
   158d8:	cmp	r3, #8192	; 0x2000
   158dc:	beq	15924 <__assert_fail@plt+0x3330>
   158e0:	cmp	r3, #16384	; 0x4000
   158e4:	beq	1590c <__assert_fail@plt+0x3318>
   158e8:	cmp	r3, #4096	; 0x1000
   158ec:	bne	158d0 <__assert_fail@plt+0x32dc>
   158f0:	mov	r3, #5
   158f4:	add	r6, r6, r3
   158f8:	ldrb	r3, [r6, #40]	; 0x28
   158fc:	cmp	r3, #0
   15900:	movne	r0, #1
   15904:	bne	1586c <__assert_fail@plt+0x3278>
   15908:	b	158d0 <__assert_fail@plt+0x32dc>
   1590c:	mov	r3, #2
   15910:	b	158f4 <__assert_fail@plt+0x3300>
   15914:	mov	r3, #3
   15918:	b	158f4 <__assert_fail@plt+0x3300>
   1591c:	mov	r3, #6
   15920:	b	158f4 <__assert_fail@plt+0x3300>
   15924:	mov	r3, #1
   15928:	b	158f4 <__assert_fail@plt+0x3300>
   1592c:	mov	r3, #4
   15930:	b	158f4 <__assert_fail@plt+0x3300>
   15934:	ldrb	r3, [r5, #5]
   15938:	cmp	r3, #0
   1593c:	beq	15964 <__assert_fail@plt+0x3370>
   15940:	ldr	r3, [r5, #8]
   15944:	cmp	r3, #0
   15948:	beq	158d0 <__assert_fail@plt+0x32dc>
   1594c:	ldrb	r2, [r5, #4]
   15950:	cmp	r2, #0
   15954:	ldrne	r3, [r8, #16]
   15958:	b	158a8 <__assert_fail@plt+0x32b4>
   1595c:	mov	r3, #0
   15960:	b	158f4 <__assert_fail@plt+0x3300>
   15964:	bl	13774 <__assert_fail@plt+0x1180>
   15968:	movw	r3, #32320	; 0x7e40
   1596c:	movt	r3, #6
   15970:	strd	r4, [sp, #-20]!	; 0xffffffec
   15974:	movw	ip, #32364	; 0x7e6c
   15978:	movt	ip, #6
   1597c:	ldr	r1, [r3, #12]
   15980:	mov	r5, r0
   15984:	mov	r4, r2
   15988:	ldr	r0, [r3, #16]
   1598c:	strd	r6, [sp, #8]
   15990:	str	lr, [sp, #16]
   15994:	sub	sp, sp, #12
   15998:	add	r2, sp, #4
   1599c:	ldr	r3, [ip, #64]	; 0x40
   159a0:	blx	r3
   159a4:	cmp	r0, #0
   159a8:	blt	159e4 <__assert_fail@plt+0x33f0>
   159ac:	mov	r2, #0
   159b0:	ldr	r1, [sp, #4]
   159b4:	ldr	r0, [r4, #40]	; 0x28
   159b8:	bl	12210 <fnmatch@plt>
   159bc:	clz	r4, r0
   159c0:	ldr	r0, [sp, #4]
   159c4:	lsr	r4, r4, #5
   159c8:	bl	1251c <freecon@plt>
   159cc:	mov	r0, r4
   159d0:	add	sp, sp, #12
   159d4:	ldrd	r4, [sp]
   159d8:	ldrd	r6, [sp, #8]
   159dc:	add	sp, sp, #16
   159e0:	pop	{pc}		; (ldr pc, [sp], #4)
   159e4:	bl	12348 <__errno_location@plt>
   159e8:	ldr	r6, [r0]
   159ec:	mov	r2, #5
   159f0:	movw	r1, #3968	; 0xf80
   159f4:	movt	r1, #5
   159f8:	mov	r0, #0
   159fc:	bl	120b4 <dcgettext@plt>
   15a00:	mov	r7, r0
   15a04:	mov	r1, r5
   15a08:	mov	r0, #0
   15a0c:	mov	r4, r0
   15a10:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   15a14:	mov	r3, r0
   15a18:	mov	r2, r7
   15a1c:	mov	r1, r6
   15a20:	mov	r0, r4
   15a24:	bl	121ec <error@plt>
   15a28:	b	159cc <__assert_fail@plt+0x33d8>
   15a2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15a30:	strd	r6, [sp, #8]
   15a34:	mov	r6, r0
   15a38:	str	r8, [sp, #16]
   15a3c:	subs	r8, r1, #0
   15a40:	str	lr, [sp, #20]
   15a44:	sub	sp, sp, #256	; 0x100
   15a48:	beq	15ad8 <__assert_fail@plt+0x34e4>
   15a4c:	movw	r5, #3992	; 0xf98
   15a50:	movt	r5, #5
   15a54:	mov	r4, sp
   15a58:	mov	r7, #0
   15a5c:	ldr	r2, [r8, #4]
   15a60:	cmp	r2, #0
   15a64:	beq	15ac0 <__assert_fail@plt+0x34cc>
   15a68:	mov	r1, r2
   15a6c:	mov	r0, r4
   15a70:	bl	12090 <stpcpy@plt>
   15a74:	sub	r3, r0, r4
   15a78:	subs	r3, r3, #1
   15a7c:	bcc	15ab4 <__assert_fail@plt+0x34c0>
   15a80:	ldrb	r1, [r4, r3]
   15a84:	add	r2, r4, r3
   15a88:	cmp	r1, #9
   15a8c:	cmpne	r1, #32
   15a90:	beq	15aac <__assert_fail@plt+0x34b8>
   15a94:	b	15ab8 <__assert_fail@plt+0x34c4>
   15a98:	ldrb	r1, [r2, #-1]!
   15a9c:	cmp	r1, #9
   15aa0:	cmpne	r1, #32
   15aa4:	bne	15afc <__assert_fail@plt+0x3508>
   15aa8:	mov	r3, r0
   15aac:	subs	r0, r3, #1
   15ab0:	bcs	15a98 <__assert_fail@plt+0x34a4>
   15ab4:	mov	r0, r4
   15ab8:	mov	r2, r4
   15abc:	strb	r7, [r0]
   15ac0:	mov	r1, r5
   15ac4:	mov	r0, r6
   15ac8:	bl	1233c <fprintf@plt>
   15acc:	ldr	r8, [r8, #152]	; 0x98
   15ad0:	cmp	r8, #0
   15ad4:	bne	15a5c <__assert_fail@plt+0x3468>
   15ad8:	mov	r1, r6
   15adc:	mov	r0, #10
   15ae0:	bl	1248c <fputc@plt>
   15ae4:	add	sp, sp, #256	; 0x100
   15ae8:	ldrd	r4, [sp]
   15aec:	ldrd	r6, [sp, #8]
   15af0:	ldr	r8, [sp, #16]
   15af4:	add	sp, sp, #20
   15af8:	pop	{pc}		; (ldr pc, [sp], #4)
   15afc:	add	r0, r4, r3
   15b00:	b	15ab8 <__assert_fail@plt+0x34c4>
   15b04:	cmp	r1, #0
   15b08:	beq	15b10 <__assert_fail@plt+0x351c>
   15b0c:	b	137fc <__assert_fail@plt+0x1208>
   15b10:	bx	lr
   15b14:	movw	r3, #32364	; 0x7e6c
   15b18:	movt	r3, #6
   15b1c:	ldr	r3, [r3, #44]	; 0x2c
   15b20:	tst	r3, #64	; 0x40
   15b24:	bxeq	lr
   15b28:	strd	r4, [sp, #-16]!
   15b2c:	movw	r5, #30024	; 0x7548
   15b30:	movt	r5, #6
   15b34:	mov	r4, r0
   15b38:	mov	r2, #42	; 0x2a
   15b3c:	ldr	r3, [r5]
   15b40:	movw	r0, #4000	; 0xfa0
   15b44:	movt	r0, #5
   15b48:	str	r6, [sp, #8]
   15b4c:	mov	r1, #1
   15b50:	str	lr, [sp, #12]
   15b54:	bl	12168 <fwrite@plt>
   15b58:	cmp	r4, #0
   15b5c:	ldr	r0, [r5]
   15b60:	beq	15b70 <__assert_fail@plt+0x357c>
   15b64:	mov	r1, r4
   15b68:	bl	137fc <__assert_fail@plt+0x1208>
   15b6c:	ldr	r0, [r5]
   15b70:	mov	r1, r0
   15b74:	mov	r0, #10
   15b78:	ldrd	r4, [sp]
   15b7c:	ldr	r6, [sp, #8]
   15b80:	ldr	lr, [sp, #12]
   15b84:	add	sp, sp, #16
   15b88:	b	1248c <fputc@plt>
   15b8c:	cmp	r0, #0
   15b90:	bxeq	lr
   15b94:	str	r4, [sp, #-8]!
   15b98:	ldr	r2, [r0]
   15b9c:	str	lr, [sp, #4]
   15ba0:	cmp	r2, #0
   15ba4:	beq	15cfc <__assert_fail@plt+0x3708>
   15ba8:	ldr	r3, [r0, #172]	; 0xac
   15bac:	cmp	r3, #0
   15bb0:	beq	15ce0 <__assert_fail@plt+0x36ec>
   15bb4:	ldr	r1, [r3, #12]
   15bb8:	cmp	r1, #0
   15bbc:	cmpne	r2, r1
   15bc0:	bne	15c58 <__assert_fail@plt+0x3664>
   15bc4:	movw	lr, #13932	; 0x366c
   15bc8:	movt	lr, #1
   15bcc:	movw	ip, #13904	; 0x3650
   15bd0:	movt	ip, #1
   15bd4:	ldr	r3, [r3]
   15bd8:	cmp	r3, #6
   15bdc:	ldrls	pc, [pc, r3, lsl #2]
   15be0:	b	15c24 <__assert_fail@plt+0x3630>
   15be4:	andeq	r5, r1, r4, ror ip
   15be8:	andeq	r5, r1, r0, lsr #25
   15bec:	andeq	r5, r1, r4, ror ip
   15bf0:	andeq	r5, r1, r0, lsr #25
   15bf4:	andeq	r5, r1, r0, lsr #25
   15bf8:	andeq	r5, r1, r0, lsr #25
   15bfc:	andeq	r5, r1, r0, lsl #24
   15c00:	ldrb	r3, [r0, #16]
   15c04:	cmp	r3, #0
   15c08:	beq	15d50 <__assert_fail@plt+0x375c>
   15c0c:	cmp	r2, lr
   15c10:	cmpne	r2, ip
   15c14:	beq	15c24 <__assert_fail@plt+0x3630>
   15c18:	ldrb	r3, [r0, #17]
   15c1c:	cmp	r3, #0
   15c20:	beq	15d6c <__assert_fail@plt+0x3778>
   15c24:	ldr	r0, [r0, #152]	; 0x98
   15c28:	cmp	r0, #0
   15c2c:	beq	15cd4 <__assert_fail@plt+0x36e0>
   15c30:	ldr	r2, [r0]
   15c34:	cmp	r2, #0
   15c38:	beq	15cfc <__assert_fail@plt+0x3708>
   15c3c:	ldr	r3, [r0, #172]	; 0xac
   15c40:	cmp	r3, #0
   15c44:	beq	15ce0 <__assert_fail@plt+0x36ec>
   15c48:	ldr	r1, [r3, #12]
   15c4c:	cmp	r1, #0
   15c50:	cmpne	r2, r1
   15c54:	beq	15bd4 <__assert_fail@plt+0x35e0>
   15c58:	movw	r1, #3576	; 0xdf8
   15c5c:	movt	r1, #5
   15c60:	ldr	r3, [pc, #288]	; 15d88 <__assert_fail@plt+0x3794>
   15c64:	movw	r0, #4092	; 0xffc
   15c68:	movt	r0, #5
   15c6c:	movw	r2, #1322	; 0x52a
   15c70:	bl	125f4 <__assert_fail@plt>
   15c74:	cmp	r3, #0
   15c78:	beq	15d34 <__assert_fail@plt+0x3740>
   15c7c:	cmp	r3, #2
   15c80:	bne	15c24 <__assert_fail@plt+0x3630>
   15c84:	movw	r1, #3576	; 0xdf8
   15c88:	movt	r1, #5
   15c8c:	ldr	r3, [pc, #244]	; 15d88 <__assert_fail@plt+0x3794>
   15c90:	movw	r0, #4172	; 0x104c
   15c94:	movt	r0, #5
   15c98:	movw	r2, #1339	; 0x53b
   15c9c:	bl	125f4 <__assert_fail@plt>
   15ca0:	ldrb	r3, [r0, #17]
   15ca4:	cmp	r3, #0
   15ca8:	bne	15d18 <__assert_fail@plt+0x3724>
   15cac:	ldrb	r3, [r0, #16]
   15cb0:	cmp	r3, #0
   15cb4:	beq	15c24 <__assert_fail@plt+0x3630>
   15cb8:	movw	r1, #3576	; 0xdf8
   15cbc:	movt	r1, #5
   15cc0:	ldr	r3, [pc, #192]	; 15d88 <__assert_fail@plt+0x3794>
   15cc4:	movw	r0, #4280	; 0x10b8
   15cc8:	movt	r0, #5
   15ccc:	movw	r2, #1364	; 0x554
   15cd0:	bl	125f4 <__assert_fail@plt>
   15cd4:	ldr	r4, [sp]
   15cd8:	add	sp, sp, #4
   15cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce0:	movw	r1, #3576	; 0xdf8
   15ce4:	movt	r1, #5
   15ce8:	ldr	r3, [pc, #152]	; 15d88 <__assert_fail@plt+0x3794>
   15cec:	movw	r0, #4068	; 0xfe4
   15cf0:	movt	r0, #5
   15cf4:	movw	r2, #1313	; 0x521
   15cf8:	bl	125f4 <__assert_fail@plt>
   15cfc:	movw	r1, #3576	; 0xdf8
   15d00:	movt	r1, #5
   15d04:	ldr	r3, [pc, #124]	; 15d88 <__assert_fail@plt+0x3794>
   15d08:	movw	r0, #4044	; 0xfcc
   15d0c:	movt	r0, #5
   15d10:	movw	r2, #1310	; 0x51e
   15d14:	bl	125f4 <__assert_fail@plt>
   15d18:	movw	r1, #3576	; 0xdf8
   15d1c:	movt	r1, #5
   15d20:	ldr	r3, [pc, #96]	; 15d88 <__assert_fail@plt+0x3794>
   15d24:	movw	r0, #4256	; 0x10a0
   15d28:	movt	r0, #5
   15d2c:	movw	r2, #1363	; 0x553
   15d30:	bl	125f4 <__assert_fail@plt>
   15d34:	movw	r1, #3576	; 0xdf8
   15d38:	movt	r1, #5
   15d3c:	ldr	r3, [pc, #68]	; 15d88 <__assert_fail@plt+0x3794>
   15d40:	movw	r0, #4136	; 0x1028
   15d44:	movt	r0, #5
   15d48:	movw	r2, #1338	; 0x53a
   15d4c:	bl	125f4 <__assert_fail@plt>
   15d50:	movw	r1, #3576	; 0xdf8
   15d54:	movt	r1, #5
   15d58:	ldr	r3, [pc, #40]	; 15d88 <__assert_fail@plt+0x3794>
   15d5c:	movw	r0, #4220	; 0x107c
   15d60:	movt	r0, #5
   15d64:	movw	r2, #1343	; 0x53f
   15d68:	bl	125f4 <__assert_fail@plt>
   15d6c:	movw	r1, #3576	; 0xdf8
   15d70:	movt	r1, #5
   15d74:	ldr	r3, [pc, #12]	; 15d88 <__assert_fail@plt+0x3794>
   15d78:	movw	r0, #4236	; 0x108c
   15d7c:	movt	r0, #5
   15d80:	movw	r2, #1349	; 0x545
   15d84:	bl	125f4 <__assert_fail@plt>
   15d88:	andeq	r0, r5, r4, ror #27
   15d8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d90:	mov	r5, r2
   15d94:	strd	r6, [sp, #8]
   15d98:	mov	r6, r0
   15d9c:	strd	r8, [sp, #16]
   15da0:	strd	sl, [sp, #24]
   15da4:	str	lr, [sp, #32]
   15da8:	sub	sp, sp, #44	; 0x2c
   15dac:	ldr	r0, [r2]
   15db0:	bl	1d6cc <__assert_fail@plt+0xb0d8>
   15db4:	subs	r3, r0, #0
   15db8:	str	r3, [sp, #32]
   15dbc:	bne	15f54 <__assert_fail@plt+0x3960>
   15dc0:	movw	r3, #30060	; 0x756c
   15dc4:	movt	r3, #6
   15dc8:	ldr	r2, [r5, #144]	; 0x90
   15dcc:	ldr	r3, [r3]
   15dd0:	cmp	r2, r3
   15dd4:	bne	160c8 <__assert_fail@plt+0x3ad4>
   15dd8:	ldr	r3, [sp, #32]
   15ddc:	mov	r9, r3
   15de0:	str	r3, [sp, #28]
   15de4:	str	r3, [sp, #36]	; 0x24
   15de8:	ldrb	r4, [r5, #40]	; 0x28
   15dec:	add	r7, r5, #44	; 0x2c
   15df0:	add	r8, r5, #88	; 0x58
   15df4:	cmp	r4, #0
   15df8:	bne	15ee4 <__assert_fail@plt+0x38f0>
   15dfc:	ldr	r3, [r5, #136]	; 0x88
   15e00:	cmp	r3, #0
   15e04:	ble	15e60 <__assert_fail@plt+0x386c>
   15e08:	ldr	r3, [r5, #132]	; 0x84
   15e0c:	ldr	sl, [r3, r4, lsl #2]
   15e10:	add	r4, r4, #1
   15e14:	mov	r0, sl
   15e18:	bl	12300 <strlen@plt>
   15e1c:	mov	fp, r0
   15e20:	mov	r0, r6
   15e24:	bl	12300 <strlen@plt>
   15e28:	ldr	ip, [sp, #28]
   15e2c:	mov	r3, fp
   15e30:	mov	r2, sl
   15e34:	mov	r1, r8
   15e38:	stm	sp, {r9, ip}
   15e3c:	mov	ip, #0
   15e40:	str	r6, [sp, #8]
   15e44:	str	r0, [sp, #12]
   15e48:	mov	r0, r7
   15e4c:	str	ip, [sp, #16]
   15e50:	bl	25b5c <__assert_fail@plt+0x13568>
   15e54:	ldr	r3, [r5, #136]	; 0x88
   15e58:	cmp	r3, r4
   15e5c:	bgt	15e08 <__assert_fail@plt+0x3814>
   15e60:	mov	r1, r8
   15e64:	mov	r0, r7
   15e68:	bl	25de8 <__assert_fail@plt+0x137f4>
   15e6c:	ldr	r3, [r5, #148]	; 0x94
   15e70:	ubfx	r2, r3, #8, #8
   15e74:	and	r3, r3, #127	; 0x7f
   15e78:	orrs	r3, r2, r3
   15e7c:	ldr	r3, [sp, #32]
   15e80:	moveq	r4, #1
   15e84:	movne	r4, #0
   15e88:	cmp	r3, #0
   15e8c:	bne	15ebc <__assert_fail@plt+0x38c8>
   15e90:	ldr	r3, [sp, #36]	; 0x24
   15e94:	cmp	r3, #0
   15e98:	bne	15f34 <__assert_fail@plt+0x3940>
   15e9c:	mov	r0, r4
   15ea0:	add	sp, sp, #44	; 0x2c
   15ea4:	ldrd	r4, [sp]
   15ea8:	ldrd	r6, [sp, #8]
   15eac:	ldrd	r8, [sp, #16]
   15eb0:	ldrd	sl, [sp, #24]
   15eb4:	add	sp, sp, #32
   15eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ebc:	ldr	r0, [r5, #144]	; 0x90
   15ec0:	bl	35948 <__assert_fail@plt+0x23354>
   15ec4:	ldr	r3, [sp, #36]	; 0x24
   15ec8:	cmp	r3, #0
   15ecc:	strne	r4, [sp, #32]
   15ed0:	beq	15e9c <__assert_fail@plt+0x38a8>
   15ed4:	ldr	r4, [sp, #32]
   15ed8:	ldr	r0, [sp, #36]	; 0x24
   15edc:	bl	38b10 <__assert_fail@plt+0x2651c>
   15ee0:	b	15e9c <__assert_fail@plt+0x38a8>
   15ee4:	mov	r0, r6
   15ee8:	bl	12300 <strlen@plt>
   15eec:	add	r3, r0, #1
   15ef0:	ldr	r0, [sp, #28]
   15ef4:	mov	ip, #0
   15ef8:	mov	r2, r6
   15efc:	mov	r1, r8
   15f00:	str	r9, [sp]
   15f04:	stmib	sp, {r0, ip}
   15f08:	mov	r0, r7
   15f0c:	bl	2589c <__assert_fail@plt+0x132a8>
   15f10:	ldr	r3, [r5, #116]	; 0x74
   15f14:	cmp	r3, #0
   15f18:	bne	1600c <__assert_fail@plt+0x3a18>
   15f1c:	ldr	r3, [sp, #36]	; 0x24
   15f20:	cmp	r3, #0
   15f24:	beq	15e9c <__assert_fail@plt+0x38a8>
   15f28:	ldr	r3, [sp, #32]
   15f2c:	cmp	r3, #0
   15f30:	bne	15ed4 <__assert_fail@plt+0x38e0>
   15f34:	movw	r3, #4300	; 0x10cc
   15f38:	movt	r3, #5
   15f3c:	movw	r1, #4396	; 0x112c
   15f40:	movt	r1, #5
   15f44:	movw	r0, #4440	; 0x1158
   15f48:	movt	r0, #5
   15f4c:	mov	r2, #208	; 0xd0
   15f50:	bl	125f4 <__assert_fail@plt>
   15f54:	ldr	r8, [r5, #116]	; 0x74
   15f58:	movw	r4, #32320	; 0x7e40
   15f5c:	movt	r4, #6
   15f60:	ldr	r7, [r4, #12]
   15f64:	cmp	r8, #0
   15f68:	bne	15fdc <__assert_fail@plt+0x39e8>
   15f6c:	mov	r1, #47	; 0x2f
   15f70:	mov	r0, r7
   15f74:	bl	1230c <strchr@plt>
   15f78:	subs	r9, r0, #0
   15f7c:	beq	16030 <__assert_fail@plt+0x3a3c>
   15f80:	mov	r0, r7
   15f84:	bl	289a4 <__assert_fail@plt+0x163b0>
   15f88:	ldr	sl, [r4, #16]
   15f8c:	mov	r9, r0
   15f90:	mov	r0, #8
   15f94:	bl	36864 <__assert_fail@plt+0x24270>
   15f98:	mov	r7, r0
   15f9c:	mov	r2, r8
   15fa0:	mov	r1, r9
   15fa4:	str	r8, [r7, #4]
   15fa8:	mov	r0, sl
   15fac:	str	r7, [r5, #144]	; 0x90
   15fb0:	bl	2da54 <__assert_fail@plt+0x1b460>
   15fb4:	ldr	r3, [r5, #144]	; 0x90
   15fb8:	str	r0, [r7]
   15fbc:	ldr	r0, [r3]
   15fc0:	cmp	r0, #0
   15fc4:	blt	16080 <__assert_fail@plt+0x3a8c>
   15fc8:	mov	r1, #1
   15fcc:	bl	28664 <__assert_fail@plt+0x16070>
   15fd0:	mov	r0, r9
   15fd4:	bl	38b10 <__assert_fail@plt+0x2651c>
   15fd8:	ldr	r7, [r4, #12]
   15fdc:	mov	r0, r7
   15fe0:	bl	2888c <__assert_fail@plt+0x16298>
   15fe4:	ldrb	r3, [r0]
   15fe8:	mov	r6, r0
   15fec:	str	r0, [sp, #36]	; 0x24
   15ff0:	cmp	r3, #47	; 0x2f
   15ff4:	beq	16020 <__assert_fail@plt+0x3a2c>
   15ff8:	mov	r3, #2
   15ffc:	movw	r9, #4324	; 0x10e4
   16000:	movt	r9, #5
   16004:	str	r3, [sp, #28]
   16008:	b	15de8 <__assert_fail@plt+0x37f4>
   1600c:	movw	r3, #32320	; 0x7e40
   16010:	movt	r3, #6
   16014:	mov	r2, #1
   16018:	strb	r2, [r3, #32]
   1601c:	b	15f1c <__assert_fail@plt+0x3928>
   16020:	mov	r3, #0
   16024:	mov	r9, r3
   16028:	str	r3, [sp, #28]
   1602c:	b	15de8 <__assert_fail@plt+0x37f4>
   16030:	ldr	r8, [r4, #16]
   16034:	mov	r0, #8
   16038:	bl	36864 <__assert_fail@plt+0x24270>
   1603c:	mov	r7, r0
   16040:	mov	r2, r9
   16044:	movw	r1, #16940	; 0x422c
   16048:	movt	r1, #5
   1604c:	str	r9, [r7, #4]
   16050:	mov	r0, r8
   16054:	str	r7, [r5, #144]	; 0x90
   16058:	bl	2da54 <__assert_fail@plt+0x1b460>
   1605c:	ldr	r3, [r5, #144]	; 0x90
   16060:	str	r0, [r7]
   16064:	ldr	r0, [r3]
   16068:	cmp	r0, #0
   1606c:	blt	16088 <__assert_fail@plt+0x3a94>
   16070:	mov	r1, #1
   16074:	bl	28664 <__assert_fail@plt+0x16070>
   16078:	ldr	r7, [r4, #12]
   1607c:	b	15fdc <__assert_fail@plt+0x39e8>
   16080:	mov	r0, r9
   16084:	bl	38b10 <__assert_fail@plt+0x2651c>
   16088:	bl	12348 <__errno_location@plt>
   1608c:	ldr	r4, [r0]
   16090:	mov	r2, #5
   16094:	movw	r1, #4328	; 0x10e8
   16098:	movt	r1, #5
   1609c:	mov	r0, #0
   160a0:	bl	120b4 <dcgettext@plt>
   160a4:	mov	r5, r0
   160a8:	mov	r1, r6
   160ac:	mov	r0, #0
   160b0:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   160b4:	mov	r3, r0
   160b8:	mov	r2, r5
   160bc:	mov	r1, r4
   160c0:	mov	r0, #1
   160c4:	bl	121ec <error@plt>
   160c8:	movw	r3, #4300	; 0x10cc
   160cc:	movt	r3, #5
   160d0:	movw	r1, #4396	; 0x112c
   160d4:	movt	r1, #5
   160d8:	movw	r0, #4404	; 0x1134
   160dc:	movt	r0, #5
   160e0:	mov	r2, #148	; 0x94
   160e4:	bl	125f4 <__assert_fail@plt>
   160e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   160ec:	mov	r5, r1
   160f0:	strd	r6, [sp, #8]
   160f4:	movw	r7, #32364	; 0x7e6c
   160f8:	movt	r7, #6
   160fc:	ldr	r2, [r7, #44]	; 0x2c
   16100:	strd	r8, [sp, #16]
   16104:	mov	r8, r3
   16108:	str	sl, [sp, #24]
   1610c:	str	lr, [sp, #28]
   16110:	sub	sp, sp, #24
   16114:	tst	r2, #32
   16118:	bne	1626c <__assert_fail@plt+0x3c78>
   1611c:	movw	r6, #30024	; 0x7548
   16120:	movt	r6, #6
   16124:	movw	r3, #30036	; 0x7554
   16128:	movt	r3, #6
   1612c:	ldr	r0, [r3]
   16130:	bl	38ab0 <__assert_fail@plt+0x264bc>
   16134:	ldr	r0, [r6]
   16138:	bl	38ab0 <__assert_fail@plt+0x264bc>
   1613c:	movw	r3, #29336	; 0x7298
   16140:	movt	r3, #6
   16144:	ldr	r2, [r3]
   16148:	cmp	r2, #0
   1614c:	bne	16254 <__assert_fail@plt+0x3c60>
   16150:	bl	12450 <fork@plt>
   16154:	cmn	r0, #1
   16158:	mov	r9, r0
   1615c:	beq	16510 <__assert_fail@plt+0x3f1c>
   16160:	cmp	r0, #0
   16164:	bne	161ec <__assert_fail@plt+0x3bf8>
   16168:	ldr	r4, [r5, #104]	; 0x68
   1616c:	cmp	r4, #0
   16170:	beq	1653c <__assert_fail@plt+0x3f48>
   16174:	bl	12348 <__errno_location@plt>
   16178:	ldrb	r3, [r5, #100]	; 0x64
   1617c:	mov	r6, r0
   16180:	cmp	r3, #0
   16184:	bne	163e4 <__assert_fail@plt+0x3df0>
   16188:	mov	r0, r4
   1618c:	bl	3592c <__assert_fail@plt+0x23338>
   16190:	cmp	r0, #0
   16194:	bne	16458 <__assert_fail@plt+0x3e64>
   16198:	bl	27034 <__assert_fail@plt+0x14a40>
   1619c:	cmp	r0, #0
   161a0:	bne	1635c <__assert_fail@plt+0x3d68>
   161a4:	mov	r0, r8
   161a8:	bl	26418 <__assert_fail@plt+0x13e24>
   161ac:	cmp	r0, #0
   161b0:	beq	16364 <__assert_fail@plt+0x3d70>
   161b4:	mov	r3, #7
   161b8:	mov	r4, r3
   161bc:	str	r3, [r6]
   161c0:	mov	r0, #0
   161c4:	ldr	r1, [r8]
   161c8:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   161cc:	mov	r3, r0
   161d0:	movw	r2, #20016	; 0x4e30
   161d4:	movt	r2, #5
   161d8:	mov	r1, r4
   161dc:	mov	r0, #0
   161e0:	bl	121ec <error@plt>
   161e4:	mov	r0, #1
   161e8:	bl	12018 <_exit@plt>
   161ec:	add	sl, r5, #108	; 0x6c
   161f0:	b	16204 <__assert_fail@plt+0x3c10>
   161f4:	bl	12348 <__errno_location@plt>
   161f8:	ldr	r4, [r0]
   161fc:	cmp	r4, #4
   16200:	bne	162f4 <__assert_fail@plt+0x3d00>
   16204:	mov	r2, #0
   16208:	mov	r1, sl
   1620c:	mov	r0, r9
   16210:	bl	1218c <waitpid@plt>
   16214:	cmn	r0, #1
   16218:	beq	161f4 <__assert_fail@plt+0x3c00>
   1621c:	ldr	r2, [r5, #108]	; 0x6c
   16220:	and	r3, r2, #127	; 0x7f
   16224:	add	r3, r3, #1
   16228:	sbfx	r3, r3, #1, #7
   1622c:	cmp	r3, #0
   16230:	bgt	16378 <__assert_fail@plt+0x3d84>
   16234:	ldr	r3, [r7, #44]	; 0x2c
   16238:	ubfx	r4, r2, #8, #8
   1623c:	tst	r3, #32
   16240:	bne	164f4 <__assert_fail@plt+0x3f00>
   16244:	cmp	r4, #0
   16248:	bne	163c0 <__assert_fail@plt+0x3dcc>
   1624c:	mov	r0, #1
   16250:	b	16340 <__assert_fail@plt+0x3d4c>
   16254:	mov	r2, #0
   16258:	mov	r0, #17
   1625c:	mov	r1, r2
   16260:	str	r2, [r3]
   16264:	bl	1206c <signal@plt>
   16268:	b	16150 <__assert_fail@plt+0x3b5c>
   1626c:	ldr	r2, [r5, #48]	; 0x30
   16270:	mov	r3, #0
   16274:	movw	r6, #30024	; 0x7548
   16278:	movt	r6, #6
   1627c:	movw	r1, #4448	; 0x1160
   16280:	movt	r1, #5
   16284:	ldr	r0, [r6]
   16288:	subs	r2, r2, #1
   1628c:	sbc	r3, r3, #0
   16290:	bl	1233c <fprintf@plt>
   16294:	ldr	r3, [r5, #48]	; 0x30
   16298:	cmp	r3, #1
   1629c:	movwne	r9, #26300	; 0x66bc
   162a0:	movne	r4, #0
   162a4:	movtne	r9, #5
   162a8:	beq	162e4 <__assert_fail@plt+0x3cf0>
   162ac:	ldr	r3, [r5, #52]	; 0x34
   162b0:	mov	r0, #0
   162b4:	ldr	sl, [r6]
   162b8:	ldr	r1, [r3, r4, lsl #2]
   162bc:	add	r4, r4, #1
   162c0:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   162c4:	mov	r2, r0
   162c8:	mov	r1, r9
   162cc:	mov	r0, sl
   162d0:	bl	1233c <fprintf@plt>
   162d4:	ldr	r3, [r5, #48]	; 0x30
   162d8:	sub	r3, r3, #1
   162dc:	cmp	r3, r4
   162e0:	bhi	162ac <__assert_fail@plt+0x3cb8>
   162e4:	mov	r0, #10
   162e8:	ldr	r1, [r6]
   162ec:	bl	1248c <fputc@plt>
   162f0:	b	16124 <__assert_fail@plt+0x3b30>
   162f4:	mov	r2, #5
   162f8:	movw	r1, #4592	; 0x11f0
   162fc:	movt	r1, #5
   16300:	mov	r0, #0
   16304:	bl	120b4 <dcgettext@plt>
   16308:	mov	r5, r0
   1630c:	mov	r0, #0
   16310:	ldr	r1, [r8]
   16314:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   16318:	mov	r3, r0
   1631c:	mov	r2, r5
   16320:	mov	r0, #0
   16324:	mov	r1, r4
   16328:	bl	121ec <error@plt>
   1632c:	movw	r3, #32320	; 0x7e40
   16330:	movt	r3, #6
   16334:	mov	r2, #1
   16338:	mov	r0, #0
   1633c:	str	r2, [r3, #28]
   16340:	add	sp, sp, #24
   16344:	ldrd	r4, [sp]
   16348:	ldrd	r6, [sp, #8]
   1634c:	ldrd	r8, [sp, #16]
   16350:	ldr	sl, [sp, #24]
   16354:	add	sp, sp, #28
   16358:	pop	{pc}		; (ldr pc, [sp], #4)
   1635c:	bl	2705c <__assert_fail@plt+0x14a68>
   16360:	b	161a4 <__assert_fail@plt+0x3bb0>
   16364:	mov	r1, r8
   16368:	ldr	r0, [r8]
   1636c:	bl	12030 <execvp@plt>
   16370:	ldr	r4, [r6]
   16374:	b	161c0 <__assert_fail@plt+0x3bcc>
   16378:	mov	r2, #5
   1637c:	movw	r1, #4616	; 0x1208
   16380:	movt	r1, #5
   16384:	mov	r0, #0
   16388:	bl	120b4 <dcgettext@plt>
   1638c:	mov	r4, r0
   16390:	mov	r0, #0
   16394:	ldr	r2, [r8]
   16398:	ldr	r1, [r7, #72]	; 0x48
   1639c:	bl	3431c <__assert_fail@plt+0x21d28>
   163a0:	ldr	ip, [r5, #108]	; 0x6c
   163a4:	mov	r1, #0
   163a8:	mov	r3, r0
   163ac:	mov	r2, r4
   163b0:	mov	r0, r1
   163b4:	and	ip, ip, #127	; 0x7f
   163b8:	str	ip, [sp]
   163bc:	bl	121ec <error@plt>
   163c0:	ldrb	r3, [r5]
   163c4:	cmp	r3, #0
   163c8:	beq	1624c <__assert_fail@plt+0x3c58>
   163cc:	mov	r2, #1
   163d0:	movw	r3, #32320	; 0x7e40
   163d4:	movt	r3, #6
   163d8:	mov	r0, r2
   163dc:	str	r2, [r3, #28]
   163e0:	b	16340 <__assert_fail@plt+0x3d4c>
   163e4:	movw	r1, #4708	; 0x1264
   163e8:	movt	r1, #5
   163ec:	ldrd	r2, [r1]
   163f0:	mov	r0, r9
   163f4:	ldrh	r1, [r1, #8]
   163f8:	strd	r2, [sp, #12]
   163fc:	strh	r1, [sp, #20]
   16400:	bl	125ac <close@plt>
   16404:	cmp	r0, #0
   16408:	blt	164b8 <__assert_fail@plt+0x3ec4>
   1640c:	mov	r1, #131072	; 0x20000
   16410:	add	r0, sp, #12
   16414:	bl	28b00 <__assert_fail@plt+0x1650c>
   16418:	cmp	r0, #0
   1641c:	bge	16188 <__assert_fail@plt+0x3b94>
   16420:	ldr	r5, [r6]
   16424:	add	r1, sp, #12
   16428:	mov	r0, r9
   1642c:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   16430:	mov	r3, r0
   16434:	movw	r2, #20016	; 0x4e30
   16438:	movt	r2, #5
   1643c:	mov	r0, r9
   16440:	mov	r1, r5
   16444:	bl	121ec <error@plt>
   16448:	mov	r0, r4
   1644c:	bl	3592c <__assert_fail@plt+0x23338>
   16450:	cmp	r0, #0
   16454:	beq	16198 <__assert_fail@plt+0x3ba4>
   16458:	mov	r2, #5
   1645c:	movw	r1, #4532	; 0x11b4
   16460:	movt	r1, #5
   16464:	mov	r0, #0
   16468:	ldr	r5, [r6]
   1646c:	bl	120b4 <dcgettext@plt>
   16470:	ldr	r3, [r4]
   16474:	mov	r2, r0
   16478:	cmp	r3, #0
   1647c:	blt	164a0 <__assert_fail@plt+0x3eac>
   16480:	movw	r3, #9500	; 0x251c
   16484:	movt	r3, #5
   16488:	mov	r1, r3
   1648c:	mov	r0, #0
   16490:	str	r1, [sp]
   16494:	mov	r1, r5
   16498:	bl	121ec <error@plt>
   1649c:	b	161e4 <__assert_fail@plt+0x3bf0>
   164a0:	ldr	r1, [r4, #4]
   164a4:	cmp	r1, #0
   164a8:	movwne	r3, #13744	; 0x35b0
   164ac:	movtne	r3, #5
   164b0:	bne	1648c <__assert_fail@plt+0x3e98>
   164b4:	b	16480 <__assert_fail@plt+0x3e8c>
   164b8:	ldr	r5, [r6]
   164bc:	mov	r2, #5
   164c0:	movw	r1, #4564	; 0x11d4
   164c4:	movt	r1, #5
   164c8:	mov	r0, r9
   164cc:	bl	120b4 <dcgettext@plt>
   164d0:	mov	r2, r0
   164d4:	mov	r0, r9
   164d8:	mov	r1, r5
   164dc:	bl	121ec <error@plt>
   164e0:	mov	r0, r4
   164e4:	bl	3592c <__assert_fail@plt+0x23338>
   164e8:	cmp	r0, #0
   164ec:	beq	161e4 <__assert_fail@plt+0x3bf0>
   164f0:	b	16458 <__assert_fail@plt+0x3e64>
   164f4:	mov	r2, r9
   164f8:	movw	r1, #4644	; 0x1224
   164fc:	movt	r1, #5
   16500:	mov	r3, r4
   16504:	ldr	r0, [r6]
   16508:	bl	1233c <fprintf@plt>
   1650c:	b	16244 <__assert_fail@plt+0x3c50>
   16510:	bl	12348 <__errno_location@plt>
   16514:	ldr	r4, [r0]
   16518:	mov	r2, #5
   1651c:	movw	r1, #4492	; 0x118c
   16520:	movt	r1, #5
   16524:	mov	r0, #0
   16528:	bl	120b4 <dcgettext@plt>
   1652c:	mov	r2, r0
   16530:	mov	r0, #1
   16534:	mov	r1, r4
   16538:	bl	121ec <error@plt>
   1653c:	movw	r1, #4396	; 0x112c
   16540:	movt	r1, #5
   16544:	ldr	r3, [pc, #12]	; 16558 <__assert_fail@plt+0x3f64>
   16548:	movw	r0, #4504	; 0x1198
   1654c:	movt	r0, #5
   16550:	movw	r2, #321	; 0x141
   16554:	bl	125f4 <__assert_fail@plt>
   16558:	ldrdeq	r1, [r5], -ip
   1655c:	str	r4, [sp, #-8]!
   16560:	mov	r4, r0
   16564:	str	lr, [sp, #4]
   16568:	cmp	r4, #0
   1656c:	beq	16588 <__assert_fail@plt+0x3f94>
   16570:	ldrb	r0, [r4, #16]
   16574:	cmp	r0, #0
   16578:	beq	16598 <__assert_fail@plt+0x3fa4>
   1657c:	ldr	r4, [sp]
   16580:	add	sp, sp, #4
   16584:	pop	{pc}		; (ldr pc, [sp], #4)
   16588:	mov	r0, r4
   1658c:	ldr	r4, [sp]
   16590:	add	sp, sp, #4
   16594:	pop	{pc}		; (ldr pc, [sp], #4)
   16598:	ldr	r0, [r4, #156]	; 0x9c
   1659c:	bl	1655c <__assert_fail@plt+0x3f68>
   165a0:	cmp	r0, #0
   165a4:	bne	1657c <__assert_fail@plt+0x3f88>
   165a8:	ldr	r4, [r4, #160]	; 0xa0
   165ac:	b	16568 <__assert_fail@plt+0x3f74>
   165b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   165b4:	ldr	r4, [r0]
   165b8:	strd	r6, [sp, #8]
   165bc:	str	r8, [sp, #16]
   165c0:	str	lr, [sp, #20]
   165c4:	cmp	r4, #0
   165c8:	beq	167a4 <__assert_fail@plt+0x41b0>
   165cc:	ldr	r3, [r4, #8]
   165d0:	mov	r5, r0
   165d4:	mov	r6, r1
   165d8:	cmp	r3, #5
   165dc:	ldrls	pc, [pc, r3, lsl #2]
   165e0:	b	16868 <__assert_fail@plt+0x4274>
   165e4:	andeq	r6, r1, r4, lsr #15
   165e8:	strdeq	r6, [r1], -r4
   165ec:	andeq	r6, r1, ip, lsr #13
   165f0:	strdeq	r6, [r1], -ip
   165f4:	andeq	r6, r1, r0, asr r6
   165f8:	strdeq	r6, [r1], -ip
   165fc:	cmp	r2, #0
   16600:	mov	r7, r2
   16604:	movweq	r1, #5056	; 0x13c0
   16608:	movteq	r1, #5
   1660c:	beq	16804 <__assert_fail@plt+0x4210>
   16610:	ldr	r3, [r2, #8]
   16614:	ldrb	r4, [r4, #33]	; 0x21
   16618:	sub	r3, r3, #2
   1661c:	cmp	r3, #1
   16620:	bls	16734 <__assert_fail@plt+0x4140>
   16624:	cmp	r4, #0
   16628:	movweq	r1, #5212	; 0x145c
   1662c:	movteq	r1, #5
   16630:	bne	16744 <__assert_fail@plt+0x4150>
   16634:	mov	r2, #5
   16638:	mov	r0, #0
   1663c:	bl	120b4 <dcgettext@plt>
   16640:	mov	r2, r0
   16644:	mov	r1, #0
   16648:	mov	r0, #1
   1664c:	bl	121ec <error@plt>
   16650:	ldr	r3, [r4, #152]	; 0x98
   16654:	cmp	r3, #0
   16658:	beq	16824 <__assert_fail@plt+0x4230>
   1665c:	ldrb	r7, [r3, #33]	; 0x21
   16660:	cmp	r7, #0
   16664:	bne	16824 <__assert_fail@plt+0x4230>
   16668:	ldr	r2, [r3, #8]
   1666c:	str	r3, [r0]
   16670:	cmp	r2, #5
   16674:	bne	16700 <__assert_fail@plt+0x410c>
   16678:	ldrb	r4, [r4, #33]	; 0x21
   1667c:	cmp	r4, #0
   16680:	beq	167f0 <__assert_fail@plt+0x41fc>
   16684:	movw	r1, #5056	; 0x13c0
   16688:	movt	r1, #5
   1668c:	mov	r0, r7
   16690:	bl	120b4 <dcgettext@plt>
   16694:	ldr	r3, [r5]
   16698:	mov	r2, r0
   1669c:	mov	r1, r7
   166a0:	mov	r0, #1
   166a4:	ldr	r3, [r3, #4]
   166a8:	bl	121ec <error@plt>
   166ac:	ldr	r3, [r4, #152]	; 0x98
   166b0:	mov	r2, r4
   166b4:	mov	r1, #4
   166b8:	str	r3, [r0]
   166bc:	bl	165b0 <__assert_fail@plt+0x3fbc>
   166c0:	str	r0, [r4, #160]	; 0xa0
   166c4:	ldr	r2, [r5]
   166c8:	cmp	r2, #0
   166cc:	beq	166dc <__assert_fail@plt+0x40e8>
   166d0:	ldr	r3, [r2, #12]
   166d4:	cmp	r3, r6
   166d8:	bgt	1676c <__assert_fail@plt+0x4178>
   166dc:	mov	r0, r4
   166e0:	ldrd	r4, [sp]
   166e4:	ldrd	r6, [sp, #8]
   166e8:	ldr	r8, [sp, #16]
   166ec:	add	sp, sp, #20
   166f0:	pop	{pc}		; (ldr pc, [sp], #4)
   166f4:	ldr	r2, [r4, #152]	; 0x98
   166f8:	str	r2, [r0]
   166fc:	b	166c8 <__assert_fail@plt+0x40d4>
   16700:	mov	r2, r4
   16704:	mov	r1, r7
   16708:	bl	165b0 <__assert_fail@plt+0x3fbc>
   1670c:	ldr	r3, [r5]
   16710:	mov	r4, r0
   16714:	cmp	r3, #0
   16718:	beq	16830 <__assert_fail@plt+0x423c>
   1671c:	ldr	r2, [r3, #8]
   16720:	cmp	r2, #5
   16724:	bne	16830 <__assert_fail@plt+0x423c>
   16728:	ldr	r2, [r3, #152]	; 0x98
   1672c:	str	r2, [r5]
   16730:	b	166c8 <__assert_fail@plt+0x40d4>
   16734:	cmp	r4, #0
   16738:	movweq	r1, #5132	; 0x140c
   1673c:	movteq	r1, #5
   16740:	beq	1674c <__assert_fail@plt+0x4158>
   16744:	movw	r1, #5176	; 0x1438
   16748:	movt	r1, #5
   1674c:	mov	r2, #5
   16750:	mov	r0, #0
   16754:	bl	120b4 <dcgettext@plt>
   16758:	mov	r2, r0
   1675c:	mov	r1, #0
   16760:	ldr	r3, [r7, #4]
   16764:	mov	r0, #1
   16768:	bl	121ec <error@plt>
   1676c:	ldr	r3, [r2, #8]
   16770:	cmp	r3, #5
   16774:	beq	167a4 <__assert_fail@plt+0x41b0>
   16778:	cmp	r3, #5
   1677c:	ldrls	pc, [pc, r3, lsl #2]
   16780:	b	1683c <__assert_fail@plt+0x4248>
   16784:	andeq	r6, r1, r4, lsr #15
   16788:	andeq	r6, r1, r4, lsr #15
   1678c:	andeq	r6, r1, r4, lsr #15
   16790:			; <UNDEFINED> instruction: 0x000167b0
   16794:	andeq	r6, r1, r4, lsr #15
   16798:	muleq	r1, ip, r7
   1679c:	cmp	r4, #0
   167a0:	bne	166dc <__assert_fail@plt+0x40e8>
   167a4:	movw	r1, #4952	; 0x1358
   167a8:	movt	r1, #5
   167ac:	b	16634 <__assert_fail@plt+0x4040>
   167b0:	str	r4, [r2, #156]	; 0x9c
   167b4:	mov	r0, r5
   167b8:	ldr	r4, [r5]
   167bc:	ldr	r3, [r4, #152]	; 0x98
   167c0:	ldrsh	r1, [r4, #12]
   167c4:	str	r3, [r5]
   167c8:	bl	165b0 <__assert_fail@plt+0x3fbc>
   167cc:	str	r0, [r4, #160]	; 0xa0
   167d0:	ldr	r2, [r5]
   167d4:	cmp	r2, #0
   167d8:	beq	166dc <__assert_fail@plt+0x40e8>
   167dc:	ldr	r3, [r2, #12]
   167e0:	cmp	r6, r3
   167e4:	bge	166dc <__assert_fail@plt+0x40e8>
   167e8:	ldr	r3, [r2, #8]
   167ec:	b	16778 <__assert_fail@plt+0x4184>
   167f0:	movw	r1, #5368	; 0x14f8
   167f4:	movt	r1, #5
   167f8:	b	16638 <__assert_fail@plt+0x4044>
   167fc:	movw	r1, #4972	; 0x136c
   16800:	movt	r1, #5
   16804:	mov	r2, #5
   16808:	mov	r0, #0
   1680c:	bl	120b4 <dcgettext@plt>
   16810:	mov	r2, r0
   16814:	mov	r1, #0
   16818:	ldr	r3, [r4, #4]
   1681c:	mov	r0, #1
   16820:	bl	121ec <error@plt>
   16824:	movw	r1, #5256	; 0x1488
   16828:	movt	r1, #5
   1682c:	b	16804 <__assert_fail@plt+0x4210>
   16830:	movw	r1, #5424	; 0x1530
   16834:	movt	r1, #5
   16838:	b	16634 <__assert_fail@plt+0x4040>
   1683c:	mov	r2, #5
   16840:	movw	r1, #5544	; 0x15a8
   16844:	movt	r1, #5
   16848:	mov	r0, #0
   1684c:	bl	120b4 <dcgettext@plt>
   16850:	ldr	r3, [r5]
   16854:	mov	r2, r0
   16858:	mov	r1, #0
   1685c:	mov	r0, #1
   16860:	ldr	r3, [r3, #8]
   16864:	bl	121ec <error@plt>
   16868:	movw	r1, #5508	; 0x1584
   1686c:	movt	r1, #5
   16870:	b	16634 <__assert_fail@plt+0x4040>
   16874:	ldr	ip, [r0]
   16878:	mov	r2, #4
   1687c:	push	{lr}		; (str lr, [sp, #-4]!)
   16880:	sub	sp, sp, #12
   16884:	ldr	r3, [r1]
   16888:	mov	r0, sp
   1688c:	add	r1, sp, r2
   16890:	str	ip, [sp]
   16894:	str	r3, [sp, #4]
   16898:	bl	12084 <memcmp@plt>
   1689c:	add	sp, sp, #12
   168a0:	pop	{pc}		; (ldr pc, [sp], #4)
   168a4:	cmp	r1, #0
   168a8:	str	r4, [sp, #-8]!
   168ac:	mov	r4, r0
   168b0:	str	lr, [sp, #4]
   168b4:	beq	168c4 <__assert_fail@plt+0x42d0>
   168b8:	ldr	r3, [r0, #8]
   168bc:	cmp	r3, #3
   168c0:	bne	1691c <__assert_fail@plt+0x4328>
   168c4:	ldr	r0, [r4, #156]	; 0x9c
   168c8:	cmp	r0, #0
   168cc:	beq	168e4 <__assert_fail@plt+0x42f0>
   168d0:	ldr	r3, [r0, #8]
   168d4:	cmp	r3, #3
   168d8:	bne	168fc <__assert_fail@plt+0x4308>
   168dc:	mov	r1, #0
   168e0:	bl	168a4 <__assert_fail@plt+0x42b0>
   168e4:	ldr	r4, [r4, #160]	; 0xa0
   168e8:	cmp	r4, #0
   168ec:	bne	168c4 <__assert_fail@plt+0x42d0>
   168f0:	ldr	r4, [sp]
   168f4:	add	sp, sp, #4
   168f8:	pop	{pc}		; (ldr pc, [sp], #4)
   168fc:	movw	r3, #4720	; 0x1270
   16900:	movt	r3, #5
   16904:	movw	r1, #5584	; 0x15d0
   16908:	movt	r1, #5
   1690c:	movw	r0, #5612	; 0x15ec
   16910:	movt	r0, #5
   16914:	movw	r2, #1235	; 0x4d3
   16918:	bl	125f4 <__assert_fail@plt>
   1691c:	movw	r3, #4720	; 0x1270
   16920:	movt	r3, #5
   16924:	movw	r1, #5584	; 0x15d0
   16928:	movt	r1, #5
   1692c:	movw	r0, #5592	; 0x15d8
   16930:	movt	r0, #5
   16934:	movw	r2, #1230	; 0x4ce
   16938:	bl	125f4 <__assert_fail@plt>
   1693c:	strd	r4, [sp, #-16]!
   16940:	mov	r5, r0
   16944:	ldr	r0, [r0, #156]	; 0x9c
   16948:	str	r6, [sp, #8]
   1694c:	str	lr, [sp, #12]
   16950:	cmp	r0, #0
   16954:	moveq	r4, r0
   16958:	beq	16964 <__assert_fail@plt+0x4370>
   1695c:	bl	1693c <__assert_fail@plt+0x4348>
   16960:	mov	r4, r0
   16964:	ldr	r0, [r5, #160]	; 0xa0
   16968:	cmp	r0, #0
   1696c:	beq	16974 <__assert_fail@plt+0x4380>
   16970:	bl	1693c <__assert_fail@plt+0x4348>
   16974:	ldr	r3, [r5, #24]
   16978:	ldr	r6, [sp, #8]
   1697c:	cmp	r4, r3
   16980:	movcs	r3, r4
   16984:	ldrd	r4, [sp]
   16988:	add	sp, sp, #12
   1698c:	cmp	r3, r0
   16990:	movcs	r0, r3
   16994:	pop	{pc}		; (ldr pc, [sp], #4)
   16998:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1699c:	subs	r5, r0, #0
   169a0:	strd	r6, [sp, #8]
   169a4:	strd	r8, [sp, #16]
   169a8:	strd	sl, [sp, #24]
   169ac:	str	lr, [sp, #32]
   169b0:	sub	sp, sp, #20
   169b4:	beq	16a10 <__assert_fail@plt+0x441c>
   169b8:	ldr	r0, [r5, #160]	; 0xa0
   169bc:	bl	16998 <__assert_fail@plt+0x43a4>
   169c0:	ldr	r0, [r5, #156]	; 0x9c
   169c4:	bl	16998 <__assert_fail@plt+0x43a4>
   169c8:	ldrb	r3, [r5, #18]
   169cc:	cmp	r3, #0
   169d0:	movne	r3, #3
   169d4:	strne	r3, [sp]
   169d8:	beq	16a2c <__assert_fail@plt+0x4438>
   169dc:	ldr	fp, [r5]
   169e0:	movw	r1, #17656	; 0x44f8
   169e4:	movt	r1, #1
   169e8:	movw	r2, #17652	; 0x44f4
   169ec:	movt	r2, #1
   169f0:	cmp	fp, r2
   169f4:	cmpne	fp, r1
   169f8:	bne	16a58 <__assert_fail@plt+0x4464>
   169fc:	ldrb	r3, [r5, #40]	; 0x28
   16a00:	cmp	r3, #0
   16a04:	movne	r3, #7
   16a08:	moveq	r3, #8
   16a0c:	str	r3, [r5, #24]
   16a10:	add	sp, sp, #20
   16a14:	ldrd	r4, [sp]
   16a18:	ldrd	r6, [sp, #8]
   16a1c:	ldrd	r8, [sp, #16]
   16a20:	ldrd	sl, [sp, #24]
   16a24:	add	sp, sp, #32
   16a28:	pop	{pc}		; (ldr pc, [sp], #4)
   16a2c:	ldrb	r3, [r5, #20]
   16a30:	cmp	r3, #0
   16a34:	movne	r3, #1
   16a38:	strne	r3, [sp]
   16a3c:	bne	169dc <__assert_fail@plt+0x43e8>
   16a40:	ldrb	r3, [r5, #19]
   16a44:	cmp	r3, #0
   16a48:	movne	r3, #2
   16a4c:	moveq	r3, #0
   16a50:	str	r3, [sp]
   16a54:	b	169dc <__assert_fail@plt+0x43e8>
   16a58:	movw	r2, #60976	; 0xee30
   16a5c:	movt	r2, #1
   16a60:	cmp	fp, r2
   16a64:	beq	16b20 <__assert_fail@plt+0x452c>
   16a68:	movw	r7, #30064	; 0x7570
   16a6c:	movt	r7, #6
   16a70:	ldr	r2, [r7]
   16a74:	movw	sl, #29340	; 0x729c
   16a78:	movt	sl, #6
   16a7c:	cmp	r2, #0
   16a80:	beq	16b40 <__assert_fail@plt+0x454c>
   16a84:	add	r9, sp, #12
   16a88:	add	r8, sp, #8
   16a8c:	mov	r7, #59	; 0x3b
   16a90:	mov	r6, #0
   16a94:	str	r5, [sp, #4]
   16a98:	mov	r5, sl
   16a9c:	b	16ab0 <__assert_fail@plt+0x44bc>
   16aa0:	beq	16b34 <__assert_fail@plt+0x4540>
   16aa4:	add	r6, r4, #1
   16aa8:	cmp	r7, r6
   16aac:	bls	16aec <__assert_fail@plt+0x44f8>
   16ab0:	add	r4, r6, r7
   16ab4:	mov	r2, #4
   16ab8:	str	fp, [sp, #8]
   16abc:	lsr	r4, r4, #1
   16ac0:	mov	r1, r9
   16ac4:	mov	r0, r8
   16ac8:	ldr	ip, [r5, r4, lsl #3]
   16acc:	add	sl, r5, r4, lsl #3
   16ad0:	str	ip, [sp, #12]
   16ad4:	bl	12084 <memcmp@plt>
   16ad8:	cmp	r0, #0
   16adc:	bge	16aa0 <__assert_fail@plt+0x44ac>
   16ae0:	mov	r7, r4
   16ae4:	cmp	r7, r6
   16ae8:	bhi	16ab0 <__assert_fail@plt+0x44bc>
   16aec:	ldr	r5, [sp, #4]
   16af0:	mov	r2, #5
   16af4:	movw	r1, #5656	; 0x1618
   16af8:	movt	r1, #5
   16afc:	mov	r0, #0
   16b00:	bl	120b4 <dcgettext@plt>
   16b04:	mov	r1, #0
   16b08:	mov	r2, r0
   16b0c:	mov	r0, r1
   16b10:	ldr	r3, [r5, #4]
   16b14:	bl	121ec <error@plt>
   16b18:	mov	r3, #10
   16b1c:	b	16b24 <__assert_fail@plt+0x4530>
   16b20:	ldr	r3, [r5, #24]
   16b24:	ldr	r2, [sp]
   16b28:	cmp	r2, r3
   16b2c:	movcs	r3, r2
   16b30:	b	16a0c <__assert_fail@plt+0x4418>
   16b34:	ldr	r3, [sl, #4]
   16b38:	ldr	r5, [sp, #4]
   16b3c:	b	16b24 <__assert_fail@plt+0x4530>
   16b40:	movw	r3, #26740	; 0x6874
   16b44:	movt	r3, #1
   16b48:	mov	r0, sl
   16b4c:	mov	r2, #8
   16b50:	mov	r1, #59	; 0x3b
   16b54:	mov	r4, sl
   16b58:	add	r9, sp, #12
   16b5c:	add	r8, sp, #8
   16b60:	bl	12510 <qsort@plt>
   16b64:	ldr	fp, [r4]
   16b68:	mov	r2, #4
   16b6c:	mov	r1, r9
   16b70:	mov	r0, r8
   16b74:	ldr	r6, [r4, #8]
   16b78:	str	r6, [sp, #8]
   16b7c:	str	fp, [sp, #12]
   16b80:	bl	12084 <memcmp@plt>
   16b84:	cmp	r0, #0
   16b88:	blt	16be8 <__assert_fail@plt+0x45f4>
   16b8c:	mov	r2, #4
   16b90:	mov	r1, r9
   16b94:	str	fp, [sp, #8]
   16b98:	mov	r0, r8
   16b9c:	str	r6, [sp, #12]
   16ba0:	bl	12084 <memcmp@plt>
   16ba4:	cmp	r0, #0
   16ba8:	bgt	16bcc <__assert_fail@plt+0x45d8>
   16bac:	ldr	r3, [pc, #72]	; 16bfc <__assert_fail@plt+0x4608>
   16bb0:	add	r4, r4, #8
   16bb4:	cmp	r3, r4
   16bb8:	bne	16b64 <__assert_fail@plt+0x4570>
   16bbc:	mov	r2, #1
   16bc0:	ldr	fp, [r5]
   16bc4:	str	r2, [r7]
   16bc8:	b	16a8c <__assert_fail@plt+0x4498>
   16bcc:	movw	r1, #5584	; 0x15d0
   16bd0:	movt	r1, #5
   16bd4:	ldr	r3, [pc, #36]	; 16c00 <__assert_fail@plt+0x460c>
   16bd8:	movw	r0, #5644	; 0x160c
   16bdc:	movt	r0, #5
   16be0:	movw	r2, #1013	; 0x3f5
   16be4:	bl	125f4 <__assert_fail@plt>
   16be8:	movw	r2, #5768	; 0x1688
   16bec:	movt	r2, #5
   16bf0:	mov	r1, #0
   16bf4:	mov	r0, #1
   16bf8:	bl	121ec <error@plt>
   16bfc:	andeq	r7, r6, ip, ror #8
   16c00:	andeq	r1, r5, r4, lsl #5
   16c04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16c08:	movw	r5, #30064	; 0x7570
   16c0c:	movt	r5, #6
   16c10:	ldr	r3, [r5, #4]
   16c14:	cmp	r1, #0
   16c18:	strd	r6, [sp, #8]
   16c1c:	moveq	r6, #0
   16c20:	movne	r6, #16
   16c24:	str	r8, [sp, #16]
   16c28:	str	lr, [sp, #20]
   16c2c:	cmp	r3, #0
   16c30:	beq	16c8c <__assert_fail@plt+0x4698>
   16c34:	mov	r7, r0
   16c38:	mov	r4, #0
   16c3c:	b	16c4c <__assert_fail@plt+0x4658>
   16c40:	ldr	r3, [r5, #4]
   16c44:	cmp	r3, r4
   16c48:	bls	16c84 <__assert_fail@plt+0x4690>
   16c4c:	ldr	r3, [r5, #8]
   16c50:	mov	r2, r6
   16c54:	mov	r0, r7
   16c58:	ldr	r1, [r3, r4, lsl #2]
   16c5c:	add	r4, r4, #1
   16c60:	bl	12210 <fnmatch@plt>
   16c64:	cmp	r0, #0
   16c68:	bne	16c40 <__assert_fail@plt+0x464c>
   16c6c:	mov	r0, #1
   16c70:	ldrd	r4, [sp]
   16c74:	ldrd	r6, [sp, #8]
   16c78:	ldr	r8, [sp, #16]
   16c7c:	add	sp, sp, #20
   16c80:	pop	{pc}		; (ldr pc, [sp], #4)
   16c84:	mov	r0, #0
   16c88:	b	16c70 <__assert_fail@plt+0x467c>
   16c8c:	mov	r2, r6
   16c90:	movw	r1, #16940	; 0x422c
   16c94:	movt	r1, #5
   16c98:	bl	12210 <fnmatch@plt>
   16c9c:	clz	r0, r0
   16ca0:	lsr	r0, r0, #5
   16ca4:	b	16c70 <__assert_fail@plt+0x467c>
   16ca8:	ldr	r2, [r1, #4]
   16cac:	ldr	r3, [r1, #36]	; 0x24
   16cb0:	cmp	r3, #0
   16cb4:	beq	16cc4 <__assert_fail@plt+0x46d0>
   16cb8:	movw	r1, #5804	; 0x16ac
   16cbc:	movt	r1, #5
   16cc0:	b	1233c <fprintf@plt>
   16cc4:	mov	r1, r0
   16cc8:	mov	r0, r2
   16ccc:	b	12588 <fputs@plt>
   16cd0:	movw	r3, #30064	; 0x7570
   16cd4:	movt	r3, #6
   16cd8:	ldr	r0, [r3, #12]
   16cdc:	bx	lr
   16ce0:	str	r4, [sp, #-8]!
   16ce4:	subs	r4, r0, #0
   16ce8:	str	lr, [sp, #4]
   16cec:	beq	16eb4 <__assert_fail@plt+0x48c0>
   16cf0:	ldr	r0, [r4, #160]	; 0xa0
   16cf4:	cmp	r0, #0
   16cf8:	beq	16d00 <__assert_fail@plt+0x470c>
   16cfc:	bl	16ce0 <__assert_fail@plt+0x46ec>
   16d00:	ldr	r0, [r4, #156]	; 0x9c
   16d04:	cmp	r0, #0
   16d08:	beq	16d10 <__assert_fail@plt+0x471c>
   16d0c:	bl	16ce0 <__assert_fail@plt+0x46ec>
   16d10:	ldr	r3, [r4, #8]
   16d14:	cmp	r3, #5
   16d18:	beq	16e98 <__assert_fail@plt+0x48a4>
   16d1c:	cmp	r3, #4
   16d20:	beq	16ed0 <__assert_fail@plt+0x48dc>
   16d24:	cmp	r3, #3
   16d28:	ldrls	pc, [pc, r3, lsl #2]
   16d2c:	b	16f94 <__assert_fail@plt+0x49a0>
   16d30:	andeq	r6, r1, ip, asr #27
   16d34:	strdeq	r6, [r1], -r4
   16d38:	andeq	r6, r1, r8, lsr #28
   16d3c:	andeq	r6, r1, r0, asr #26
   16d40:	ldr	r2, [r4]
   16d44:	movw	r3, #14048	; 0x36e0
   16d48:	movt	r3, #1
   16d4c:	cmp	r2, r3
   16d50:	beq	16e68 <__assert_fail@plt+0x4874>
   16d54:	movw	r3, #16420	; 0x4024
   16d58:	movt	r3, #1
   16d5c:	cmp	r2, r3
   16d60:	beq	16e90 <__assert_fail@plt+0x489c>
   16d64:	movw	r3, #14236	; 0x379c
   16d68:	movt	r3, #1
   16d6c:	cmp	r2, r3
   16d70:	bne	16f78 <__assert_fail@plt+0x4984>
   16d74:	ldr	r3, [r4, #160]	; 0xa0
   16d78:	cmp	r3, #0
   16d7c:	vldrne	s15, [r3, #28]
   16d80:	ldr	r3, [r4, #156]	; 0x9c
   16d84:	vldreq	s15, [pc, #548]	; 16fb0 <__assert_fail@plt+0x49bc>
   16d88:	cmp	r3, #0
   16d8c:	vldrne	s0, [r3, #28]
   16d90:	vldreq	s0, [pc, #536]	; 16fb0 <__assert_fail@plt+0x49bc>
   16d94:	vadd.f32	s0, s0, s15
   16d98:	vldr	s15, [pc, #528]	; 16fb0 <__assert_fail@plt+0x49bc>
   16d9c:	vcmpe.f32	s0, s15
   16da0:	vmrs	APSR_nzcv, fpscr
   16da4:	vmovgt.f32	s0, s15
   16da8:	bgt	16dbc <__assert_fail@plt+0x47c8>
   16dac:	vcmp.f32	s0, #0.0
   16db0:	vldr	s15, [pc, #508]	; 16fb4 <__assert_fail@plt+0x49c0>
   16db4:	vmrs	APSR_nzcv, fpscr
   16db8:	vmovmi.f32	s0, s15
   16dbc:	vstr	s0, [r4, #28]
   16dc0:	ldr	r4, [sp]
   16dc4:	add	sp, sp, #4
   16dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   16dcc:	ldr	r3, [r4, #160]	; 0xa0
   16dd0:	cmp	r3, #0
   16dd4:	bne	16f5c <__assert_fail@plt+0x4968>
   16dd8:	ldr	r3, [r4, #156]	; 0x9c
   16ddc:	cmp	r3, #0
   16de0:	bne	16f40 <__assert_fail@plt+0x494c>
   16de4:	vldr	s0, [r4, #28]
   16de8:	ldr	r4, [sp]
   16dec:	add	sp, sp, #4
   16df0:	pop	{pc}		; (ldr pc, [sp], #4)
   16df4:	ldr	r3, [r4, #160]	; 0xa0
   16df8:	cmp	r3, #0
   16dfc:	bne	16f24 <__assert_fail@plt+0x4930>
   16e00:	ldr	r3, [r4, #156]	; 0x9c
   16e04:	cmp	r3, #0
   16e08:	beq	16de4 <__assert_fail@plt+0x47f0>
   16e0c:	movw	r1, #5584	; 0x15d0
   16e10:	movt	r1, #5
   16e14:	ldr	r3, [pc, #412]	; 16fb8 <__assert_fail@plt+0x49c4>
   16e18:	movw	r0, #5900	; 0x170c
   16e1c:	movt	r0, #5
   16e20:	movw	r2, #1175	; 0x497
   16e24:	bl	125f4 <__assert_fail@plt>
   16e28:	ldr	r2, [r4]
   16e2c:	movw	r3, #19700	; 0x4cf4
   16e30:	movt	r3, #1
   16e34:	cmp	r2, r3
   16e38:	bne	16f08 <__assert_fail@plt+0x4914>
   16e3c:	ldr	r3, [r4, #156]	; 0x9c
   16e40:	cmp	r3, #0
   16e44:	bne	16eec <__assert_fail@plt+0x48f8>
   16e48:	ldr	r3, [r4, #160]	; 0xa0
   16e4c:	vldr	s0, [pc, #348]	; 16fb0 <__assert_fail@plt+0x49bc>
   16e50:	vldr	s15, [r3, #28]
   16e54:	vsub.f32	s0, s0, s15
   16e58:	vstr	s0, [r4, #28]
   16e5c:	ldr	r4, [sp]
   16e60:	add	sp, sp, #4
   16e64:	pop	{pc}		; (ldr pc, [sp], #4)
   16e68:	ldr	r3, [r4, #160]	; 0xa0
   16e6c:	cmp	r3, #0
   16e70:	vldrne	s0, [r3, #28]
   16e74:	ldr	r3, [r4, #156]	; 0x9c
   16e78:	vldreq	s0, [pc, #304]	; 16fb0 <__assert_fail@plt+0x49bc>
   16e7c:	cmp	r3, #0
   16e80:	beq	16d98 <__assert_fail@plt+0x47a4>
   16e84:	vldr	s15, [r3, #28]
   16e88:	vmul.f32	s0, s0, s15
   16e8c:	b	16d98 <__assert_fail@plt+0x47a4>
   16e90:	vldr	s0, [pc, #280]	; 16fb0 <__assert_fail@plt+0x49bc>
   16e94:	b	16dbc <__assert_fail@plt+0x47c8>
   16e98:	movw	r1, #5584	; 0x15d0
   16e9c:	movt	r1, #5
   16ea0:	ldr	r3, [pc, #272]	; 16fb8 <__assert_fail@plt+0x49c4>
   16ea4:	movw	r0, #5824	; 0x16c0
   16ea8:	movt	r0, #5
   16eac:	movw	r2, #1163	; 0x48b
   16eb0:	bl	125f4 <__assert_fail@plt>
   16eb4:	movw	r1, #5584	; 0x15d0
   16eb8:	movt	r1, #5
   16ebc:	ldr	r3, [pc, #244]	; 16fb8 <__assert_fail@plt+0x49c4>
   16ec0:	movw	r0, #5812	; 0x16b4
   16ec4:	movt	r0, #5
   16ec8:	movw	r2, #1156	; 0x484
   16ecc:	bl	125f4 <__assert_fail@plt>
   16ed0:	movw	r1, #5584	; 0x15d0
   16ed4:	movt	r1, #5
   16ed8:	ldr	r3, [pc, #216]	; 16fb8 <__assert_fail@plt+0x49c4>
   16edc:	movw	r0, #5852	; 0x16dc
   16ee0:	movt	r0, #5
   16ee4:	movw	r2, #1164	; 0x48c
   16ee8:	bl	125f4 <__assert_fail@plt>
   16eec:	movw	r1, #5584	; 0x15d0
   16ef0:	movt	r1, #5
   16ef4:	ldr	r3, [pc, #188]	; 16fb8 <__assert_fail@plt+0x49c4>
   16ef8:	movw	r0, #5900	; 0x170c
   16efc:	movt	r0, #5
   16f00:	movw	r2, #1181	; 0x49d
   16f04:	bl	125f4 <__assert_fail@plt>
   16f08:	movw	r1, #5584	; 0x15d0
   16f0c:	movt	r1, #5
   16f10:	ldr	r3, [pc, #160]	; 16fb8 <__assert_fail@plt+0x49c4>
   16f14:	movw	r0, #5924	; 0x1724
   16f18:	movt	r0, #5
   16f1c:	movw	r2, #1180	; 0x49c
   16f20:	bl	125f4 <__assert_fail@plt>
   16f24:	movw	r1, #5584	; 0x15d0
   16f28:	movt	r1, #5
   16f2c:	ldr	r3, [pc, #132]	; 16fb8 <__assert_fail@plt+0x49c4>
   16f30:	movw	r0, #5876	; 0x16f4
   16f34:	movt	r0, #5
   16f38:	movw	r2, #1174	; 0x496
   16f3c:	bl	125f4 <__assert_fail@plt>
   16f40:	movw	r1, #5584	; 0x15d0
   16f44:	movt	r1, #5
   16f48:	ldr	r3, [pc, #104]	; 16fb8 <__assert_fail@plt+0x49c4>
   16f4c:	movw	r0, #5900	; 0x170c
   16f50:	movt	r0, #5
   16f54:	movw	r2, #1170	; 0x492
   16f58:	bl	125f4 <__assert_fail@plt>
   16f5c:	movw	r1, #5584	; 0x15d0
   16f60:	movt	r1, #5
   16f64:	ldr	r3, [pc, #76]	; 16fb8 <__assert_fail@plt+0x49c4>
   16f68:	movw	r0, #5876	; 0x16f4
   16f6c:	movt	r0, #5
   16f70:	movw	r2, #1169	; 0x491
   16f74:	bl	125f4 <__assert_fail@plt>
   16f78:	movw	r1, #5584	; 0x15d0
   16f7c:	movt	r1, #5
   16f80:	ldr	r3, [pc, #48]	; 16fb8 <__assert_fail@plt+0x49c4>
   16f84:	movw	r0, #20308	; 0x4f54
   16f88:	movt	r0, #5
   16f8c:	movw	r2, #1204	; 0x4b4
   16f90:	bl	125f4 <__assert_fail@plt>
   16f94:	movw	r1, #5584	; 0x15d0
   16f98:	movt	r1, #5
   16f9c:	ldr	r3, [pc, #20]	; 16fb8 <__assert_fail@plt+0x49c4>
   16fa0:	movw	r0, #20308	; 0x4f54
   16fa4:	movt	r0, #5
   16fa8:	mov	r2, #1216	; 0x4c0
   16fac:	bl	125f4 <__assert_fail@plt>
   16fb0:	svccc	0x00800000
   16fb4:	andeq	r0, r0, r0
   16fb8:	muleq	r5, r4, r2
   16fbc:	ldr	r3, [r0]
   16fc0:	str	r4, [sp, #-16]!
   16fc4:	strd	r6, [sp, #4]
   16fc8:	str	lr, [sp, #12]
   16fcc:	cmp	r3, #0
   16fd0:	beq	17068 <__assert_fail@plt+0x4a74>
   16fd4:	cmp	r3, #2
   16fd8:	beq	17084 <__assert_fail@plt+0x4a90>
   16fdc:	mov	r4, r0
   16fe0:	mov	r0, #176	; 0xb0
   16fe4:	bl	36c58 <__assert_fail@plt+0x24664>
   16fe8:	movw	r2, #30064	; 0x7570
   16fec:	movt	r2, #6
   16ff0:	ldr	r1, [r2, #16]
   16ff4:	mov	r3, r0
   16ff8:	mov	r6, #0
   16ffc:	mov	r7, #0
   17000:	mov	ip, #1065353216	; 0x3f800000
   17004:	movw	lr, #257	; 0x101
   17008:	cmp	r1, #0
   1700c:	ldrne	r1, [r2, #20]
   17010:	streq	r0, [r2, #16]
   17014:	str	r3, [r2, #20]
   17018:	mov	r2, #0
   1701c:	strne	r0, [r1, #152]	; 0x98
   17020:	movw	r1, #32364	; 0x7e6c
   17024:	movt	r1, #6
   17028:	ldrb	r1, [r1, #15]
   1702c:	mov	r0, #10
   17030:	strd	r6, [r3, #8]
   17034:	ldrd	r6, [sp, #4]
   17038:	str	r4, [r3, #172]	; 0xac
   1703c:	ldr	r4, [sp]
   17040:	add	sp, sp, #12
   17044:	strh	lr, [r3, #18]
   17048:	str	r0, [r3, #24]
   1704c:	mov	r0, r3
   17050:	str	ip, [r3, #28]
   17054:	strb	r1, [r3, #32]
   17058:	str	r2, [r3, #36]	; 0x24
   1705c:	str	r2, [r3, #164]	; 0xa4
   17060:	str	r2, [r3, #168]	; 0xa8
   17064:	pop	{pc}		; (ldr pc, [sp], #4)
   17068:	movw	r1, #5584	; 0x15d0
   1706c:	movt	r1, #5
   17070:	ldr	r3, [pc, #40]	; 170a0 <__assert_fail@plt+0x4aac>
   17074:	movw	r0, #5952	; 0x1740
   17078:	movt	r0, #5
   1707c:	movw	r2, #1485	; 0x5cd
   17080:	bl	125f4 <__assert_fail@plt>
   17084:	movw	r1, #5584	; 0x15d0
   17088:	movt	r1, #5
   1708c:	ldr	r3, [pc, #12]	; 170a0 <__assert_fail@plt+0x4aac>
   17090:	movw	r0, #5980	; 0x175c
   17094:	movt	r0, #5
   17098:	movw	r2, #1486	; 0x5ce
   1709c:	bl	125f4 <__assert_fail@plt>
   170a0:	andeq	r1, r5, ip, lsr #5
   170a4:	ldr	r3, [r0]
   170a8:	str	r4, [sp, #-16]!
   170ac:	strd	r6, [sp, #4]
   170b0:	str	lr, [sp, #12]
   170b4:	cmp	r3, #0
   170b8:	beq	17158 <__assert_fail@plt+0x4b64>
   170bc:	cmp	r3, #2
   170c0:	beq	17174 <__assert_fail@plt+0x4b80>
   170c4:	mov	r4, r0
   170c8:	mov	r0, #176	; 0xb0
   170cc:	bl	36c58 <__assert_fail@plt+0x24664>
   170d0:	movw	r2, #30064	; 0x7570
   170d4:	movt	r2, #6
   170d8:	ldr	r1, [r2, #16]
   170dc:	mov	r3, r0
   170e0:	mov	r6, #0
   170e4:	mov	r7, #0
   170e8:	mov	ip, #1065353216	; 0x3f800000
   170ec:	movw	lr, #257	; 0x101
   170f0:	cmp	r1, #0
   170f4:	ldrne	r1, [r2, #20]
   170f8:	streq	r0, [r2, #16]
   170fc:	str	r3, [r2, #20]
   17100:	movw	r2, #6020	; 0x1784
   17104:	movt	r2, #5
   17108:	strne	r0, [r1, #152]	; 0x98
   1710c:	movw	r1, #32364	; 0x7e6c
   17110:	movt	r1, #6
   17114:	ldrb	r1, [r1, #15]
   17118:	mov	r0, #10
   1711c:	strd	r6, [r3, #8]
   17120:	ldrd	r6, [sp, #4]
   17124:	str	r4, [r3, #172]	; 0xac
   17128:	ldr	r4, [sp]
   1712c:	add	sp, sp, #12
   17130:	strh	lr, [r3, #18]
   17134:	str	r2, [r3, #36]	; 0x24
   17138:	mov	r2, #0
   1713c:	str	r0, [r3, #24]
   17140:	mov	r0, r3
   17144:	str	ip, [r3, #28]
   17148:	strb	r1, [r3, #32]
   1714c:	str	r2, [r3, #164]	; 0xa4
   17150:	str	r2, [r3, #168]	; 0xa8
   17154:	pop	{pc}		; (ldr pc, [sp], #4)
   17158:	movw	r1, #5584	; 0x15d0
   1715c:	movt	r1, #5
   17160:	ldr	r3, [pc, #40]	; 17190 <__assert_fail@plt+0x4b9c>
   17164:	movw	r0, #5952	; 0x1740
   17168:	movt	r0, #5
   1716c:	movw	r2, #1485	; 0x5cd
   17170:	bl	125f4 <__assert_fail@plt>
   17174:	movw	r1, #5584	; 0x15d0
   17178:	movt	r1, #5
   1717c:	ldr	r3, [pc, #12]	; 17190 <__assert_fail@plt+0x4b9c>
   17180:	movw	r0, #5980	; 0x175c
   17184:	movt	r0, #5
   17188:	movw	r2, #1486	; 0x5ce
   1718c:	bl	125f4 <__assert_fail@plt>
   17190:	andeq	r1, r5, ip, lsr #5
   17194:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17198:	movw	r4, #30064	; 0x7570
   1719c:	movt	r4, #6
   171a0:	ldr	r3, [r4, #24]
   171a4:	strd	r6, [sp, #8]
   171a8:	mov	r6, r0
   171ac:	mov	r7, r1
   171b0:	strd	r8, [sp, #16]
   171b4:	str	sl, [sp, #24]
   171b8:	str	lr, [sp, #28]
   171bc:	cmp	r3, #0
   171c0:	beq	172cc <__assert_fail@plt+0x4cd8>
   171c4:	ldr	r2, [r4, #20]
   171c8:	cmp	r2, #0
   171cc:	beq	171ec <__assert_fail@plt+0x4bf8>
   171d0:	ldr	r5, [r2, #8]
   171d4:	cmp	r5, #1
   171d8:	beq	17288 <__assert_fail@plt+0x4c94>
   171dc:	cmp	r5, #0
   171e0:	beq	1733c <__assert_fail@plt+0x4d48>
   171e4:	cmp	r5, #5
   171e8:	beq	17288 <__assert_fail@plt+0x4c94>
   171ec:	ldr	r3, [r6]
   171f0:	cmp	r3, #0
   171f4:	beq	17320 <__assert_fail@plt+0x4d2c>
   171f8:	cmp	r3, #2
   171fc:	beq	17304 <__assert_fail@plt+0x4d10>
   17200:	mov	r0, #176	; 0xb0
   17204:	mov	r5, #0
   17208:	bl	36c58 <__assert_fail@plt+0x24664>
   1720c:	ldr	r2, [r4, #16]
   17210:	mov	r3, r0
   17214:	mov	ip, #1065353216	; 0x3f800000
   17218:	movw	lr, #257	; 0x101
   1721c:	cmp	r2, #0
   17220:	ldrne	r2, [r4, #20]
   17224:	streq	r0, [r4, #16]
   17228:	str	r3, [r4, #20]
   1722c:	mov	r4, #0
   17230:	strne	r0, [r2, #152]	; 0x98
   17234:	movw	r2, #32364	; 0x7e6c
   17238:	movt	r2, #6
   1723c:	ldrb	r1, [r2, #15]
   17240:	mov	r0, #10
   17244:	mov	r2, #0
   17248:	strd	r4, [r3, #8]
   1724c:	ldrd	r4, [sp]
   17250:	str	r7, [r3, #36]	; 0x24
   17254:	str	r6, [r3, #172]	; 0xac
   17258:	ldrd	r6, [sp, #8]
   1725c:	strh	lr, [r3, #18]
   17260:	ldrd	r8, [sp, #16]
   17264:	str	r0, [r3, #24]
   17268:	mov	r0, r3
   1726c:	ldr	sl, [sp, #24]
   17270:	add	sp, sp, #28
   17274:	str	ip, [r3, #28]
   17278:	strb	r1, [r3, #32]
   1727c:	str	r2, [r3, #164]	; 0xa4
   17280:	str	r2, [r3, #168]	; 0xa8
   17284:	pop	{pc}		; (ldr pc, [sp], #4)
   17288:	mov	r0, r3
   1728c:	mov	r8, #3
   17290:	bl	170a4 <__assert_fail@plt+0x4ab0>
   17294:	movw	r3, #14048	; 0x36e0
   17298:	movt	r3, #1
   1729c:	movw	r2, #6120	; 0x17e8
   172a0:	movt	r2, #5
   172a4:	mov	r9, #3
   172a8:	str	r3, [r0]
   172ac:	mov	r3, #0
   172b0:	str	r2, [r0, #4]
   172b4:	strd	r8, [r0, #8]
   172b8:	str	r3, [r0, #16]
   172bc:	strb	r3, [r0, #20]
   172c0:	str	r3, [r0, #36]	; 0x24
   172c4:	str	r3, [r0, #40]	; 0x28
   172c8:	b	171ec <__assert_fail@plt+0x4bf8>
   172cc:	movw	r0, #6052	; 0x17a4
   172d0:	movt	r0, #5
   172d4:	bl	2555c <__assert_fail@plt+0x12f68>
   172d8:	cmp	r0, #0
   172dc:	mov	r3, r0
   172e0:	str	r0, [r4, #24]
   172e4:	bne	171c4 <__assert_fail@plt+0x4bd0>
   172e8:	movw	r1, #5584	; 0x15d0
   172ec:	movt	r1, #5
   172f0:	ldr	r3, [pc, #104]	; 17360 <__assert_fail@plt+0x4d6c>
   172f4:	movw	r0, #6056	; 0x17a8
   172f8:	movt	r0, #5
   172fc:	movw	r2, #1528	; 0x5f8
   17300:	bl	125f4 <__assert_fail@plt>
   17304:	movw	r1, #5584	; 0x15d0
   17308:	movt	r1, #5
   1730c:	ldr	r3, [pc, #80]	; 17364 <__assert_fail@plt+0x4d70>
   17310:	movw	r0, #5980	; 0x175c
   17314:	movt	r0, #5
   17318:	movw	r2, #1486	; 0x5ce
   1731c:	bl	125f4 <__assert_fail@plt>
   17320:	movw	r1, #5584	; 0x15d0
   17324:	movt	r1, #5
   17328:	ldr	r3, [pc, #52]	; 17364 <__assert_fail@plt+0x4d70>
   1732c:	movw	r0, #5952	; 0x1740
   17330:	movt	r0, #5
   17334:	movw	r2, #1485	; 0x5cd
   17338:	bl	125f4 <__assert_fail@plt>
   1733c:	mov	r2, #5
   17340:	movw	r1, #6076	; 0x17bc
   17344:	movt	r1, #5
   17348:	mov	r0, r5
   1734c:	bl	120b4 <dcgettext@plt>
   17350:	mov	r2, r0
   17354:	mov	r1, r5
   17358:	mov	r0, #1
   1735c:	bl	121ec <error@plt>
   17360:			; <UNDEFINED> instruction: 0x000512bc
   17364:	andeq	r1, r5, ip, lsr #5
   17368:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1736c:	strd	r6, [sp, #8]
   17370:	strd	r8, [sp, #16]
   17374:	subs	r8, r1, #0
   17378:	str	sl, [sp, #24]
   1737c:	str	lr, [sp, #28]
   17380:	sub	sp, sp, #16
   17384:	beq	176c8 <__assert_fail@plt+0x50d4>
   17388:	movw	r9, #29340	; 0x729c
   1738c:	movt	r9, #6
   17390:	movw	r7, #6152	; 0x1808
   17394:	movt	r7, #5
   17398:	movw	sl, #6144	; 0x1800
   1739c:	movt	sl, #5
   173a0:	mov	r4, r0
   173a4:	mov	r5, r2
   173a8:	cmp	r5, #0
   173ac:	movgt	r6, #0
   173b0:	ble	173d4 <__assert_fail@plt+0x4de0>
   173b4:	add	r6, r6, #1
   173b8:	mov	r3, r4
   173bc:	mov	r2, #4
   173c0:	mov	r1, #1
   173c4:	mov	r0, r7
   173c8:	bl	12168 <fwrite@plt>
   173cc:	cmp	r6, r5
   173d0:	bne	173b4 <__assert_fail@plt+0x4dc0>
   173d4:	mov	r3, r4
   173d8:	mov	r2, #6
   173dc:	mov	r1, #1
   173e0:	mov	r0, sl
   173e4:	bl	12168 <fwrite@plt>
   173e8:	ldr	r3, [r8, #36]	; 0x24
   173ec:	cmp	r3, #0
   173f0:	beq	1771c <__assert_fail@plt+0x5128>
   173f4:	movw	r1, #5804	; 0x16ac
   173f8:	movt	r1, #5
   173fc:	ldr	r2, [r8, #4]
   17400:	mov	r0, r4
   17404:	bl	1233c <fprintf@plt>
   17408:	ldrsh	r3, [r8, #8]
   1740c:	cmp	r3, #0
   17410:	beq	17734 <__assert_fail@plt+0x5140>
   17414:	cmp	r3, #1
   17418:	beq	17440 <__assert_fail@plt+0x4e4c>
   1741c:	cmp	r3, #2
   17420:	beq	17440 <__assert_fail@plt+0x4e4c>
   17424:	cmp	r3, #3
   17428:	beq	17440 <__assert_fail@plt+0x4e4c>
   1742c:	cmp	r3, #4
   17430:	beq	17440 <__assert_fail@plt+0x4e4c>
   17434:	cmp	r3, #5
   17438:	movne	r3, #6
   1743c:	moveq	r3, #5
   17440:	movw	r2, #4720	; 0x1270
   17444:	movt	r2, #5
   17448:	add	r3, r2, r3, lsl #3
   1744c:	ldr	r2, [r3, #100]	; 0x64
   17450:	ldrsh	r3, [r8, #12]
   17454:	cmp	r3, #0
   17458:	beq	17748 <__assert_fail@plt+0x5154>
   1745c:	cmp	r3, #1
   17460:	beq	17488 <__assert_fail@plt+0x4e94>
   17464:	cmp	r3, #2
   17468:	beq	17488 <__assert_fail@plt+0x4e94>
   1746c:	cmp	r3, #3
   17470:	beq	17488 <__assert_fail@plt+0x4e94>
   17474:	cmp	r3, #4
   17478:	beq	17488 <__assert_fail@plt+0x4e94>
   1747c:	cmp	r3, #5
   17480:	movne	r3, #6
   17484:	moveq	r3, #5
   17488:	movw	r1, #4720	; 0x1270
   1748c:	movt	r1, #5
   17490:	add	r3, r1, r3, lsl #3
   17494:	ldr	r3, [r3, #156]	; 0x9c
   17498:	movw	r1, #6160	; 0x1810
   1749c:	movt	r1, #5
   174a0:	mov	r0, r4
   174a4:	bl	1233c <fprintf@plt>
   174a8:	ldr	r3, [r8, #24]
   174ac:	ldr	r2, [r9, #472]	; 0x1d8
   174b0:	cmp	r3, r2
   174b4:	beq	177e0 <__assert_fail@plt+0x51ec>
   174b8:	ldr	r2, [r9, #480]	; 0x1e0
   174bc:	cmp	r3, r2
   174c0:	beq	177f0 <__assert_fail@plt+0x51fc>
   174c4:	ldr	r2, [r9, #488]	; 0x1e8
   174c8:	cmp	r3, r2
   174cc:	beq	17800 <__assert_fail@plt+0x520c>
   174d0:	ldr	r2, [r9, #496]	; 0x1f0
   174d4:	cmp	r3, r2
   174d8:	beq	17810 <__assert_fail@plt+0x521c>
   174dc:	ldr	r2, [r9, #504]	; 0x1f8
   174e0:	cmp	r3, r2
   174e4:	beq	176e4 <__assert_fail@plt+0x50f0>
   174e8:	ldr	r2, [r9, #512]	; 0x200
   174ec:	cmp	r3, r2
   174f0:	beq	17820 <__assert_fail@plt+0x522c>
   174f4:	ldr	r2, [r9, #520]	; 0x208
   174f8:	cmp	r3, r2
   174fc:	beq	17830 <__assert_fail@plt+0x523c>
   17500:	ldr	r2, [r9, #528]	; 0x210
   17504:	cmp	r3, r2
   17508:	beq	17840 <__assert_fail@plt+0x524c>
   1750c:	ldr	r2, [r9, #536]	; 0x218
   17510:	cmp	r3, r2
   17514:	beq	17850 <__assert_fail@plt+0x525c>
   17518:	ldr	r2, [r9, #544]	; 0x220
   1751c:	cmp	r3, r2
   17520:	beq	17860 <__assert_fail@plt+0x526c>
   17524:	ldr	r2, [r9, #552]	; 0x228
   17528:	cmp	r3, r2
   1752c:	moveq	r3, #10
   17530:	beq	176e8 <__assert_fail@plt+0x50f4>
   17534:	movw	r2, #6128	; 0x17f0
   17538:	movt	r2, #5
   1753c:	vldr	s14, [r8, #28]
   17540:	movw	ip, #6136	; 0x17f8
   17544:	movt	ip, #5
   17548:	movw	r3, #9500	; 0x251c
   1754c:	movt	r3, #5
   17550:	ldrb	lr, [r8, #16]
   17554:	movw	r1, #6180	; 0x1824
   17558:	movt	r1, #5
   1755c:	mov	r0, r4
   17560:	vcvt.f64.f32	d7, s14
   17564:	cmp	lr, #0
   17568:	moveq	r3, ip
   1756c:	vstr	d7, [sp]
   17570:	str	r3, [sp, #8]
   17574:	bl	1233c <fprintf@plt>
   17578:	ldrh	r3, [r8, #18]
   1757c:	cmp	r3, #0
   17580:	bne	17590 <__assert_fail@plt+0x4f9c>
   17584:	ldrb	r3, [r8, #20]
   17588:	cmp	r3, #0
   1758c:	beq	175fc <__assert_fail@plt+0x5008>
   17590:	mov	r3, r4
   17594:	movw	r0, #6228	; 0x1854
   17598:	movt	r0, #5
   1759c:	mov	r2, #6
   175a0:	mov	r1, #1
   175a4:	bl	12168 <fwrite@plt>
   175a8:	ldrb	r3, [r8, #18]
   175ac:	cmp	r3, #0
   175b0:	bne	1776c <__assert_fail@plt+0x5178>
   175b4:	ldrb	r3, [r8, #20]
   175b8:	cmp	r3, #0
   175bc:	beq	17754 <__assert_fail@plt+0x5160>
   175c0:	movw	r2, #9500	; 0x251c
   175c4:	movt	r2, #5
   175c8:	movw	r1, #6236	; 0x185c
   175cc:	movt	r1, #5
   175d0:	mov	r0, r4
   175d4:	bl	1233c <fprintf@plt>
   175d8:	ldrb	r3, [r8, #19]
   175dc:	cmp	r3, #0
   175e0:	beq	175fc <__assert_fail@plt+0x5008>
   175e4:	movw	r2, #6140	; 0x17fc
   175e8:	movt	r2, #5
   175ec:	movw	r1, #6244	; 0x1864
   175f0:	movt	r1, #5
   175f4:	mov	r0, r4
   175f8:	bl	1233c <fprintf@plt>
   175fc:	mov	r1, r4
   17600:	mov	r0, #10
   17604:	bl	1248c <fputc@plt>
   17608:	cmp	r5, #0
   1760c:	movgt	r6, #0
   17610:	ble	17634 <__assert_fail@plt+0x5040>
   17614:	add	r6, r6, #1
   17618:	mov	r3, r4
   1761c:	mov	r2, #4
   17620:	mov	r1, #1
   17624:	mov	r0, r7
   17628:	bl	12168 <fwrite@plt>
   1762c:	cmp	r6, r5
   17630:	bne	17614 <__assert_fail@plt+0x5020>
   17634:	ldr	r3, [r8, #156]	; 0x9c
   17638:	cmp	r3, #0
   1763c:	beq	176f4 <__assert_fail@plt+0x5100>
   17640:	mov	r2, #6
   17644:	mov	r1, #1
   17648:	movw	r0, #6268	; 0x187c
   1764c:	movt	r0, #5
   17650:	mov	r3, r4
   17654:	bl	12168 <fwrite@plt>
   17658:	add	r2, r5, #1
   1765c:	mov	r0, r4
   17660:	ldr	r1, [r8, #156]	; 0x9c
   17664:	bl	17368 <__assert_fail@plt+0x4d74>
   17668:	cmp	r5, #0
   1766c:	movgt	r6, #0
   17670:	ble	17694 <__assert_fail@plt+0x50a0>
   17674:	add	r6, r6, #1
   17678:	mov	r3, r4
   1767c:	mov	r2, #4
   17680:	mov	r1, #1
   17684:	mov	r0, r7
   17688:	bl	12168 <fwrite@plt>
   1768c:	cmp	r6, r5
   17690:	bne	17674 <__assert_fail@plt+0x5080>
   17694:	ldr	r3, [r8, #160]	; 0xa0
   17698:	cmp	r3, #0
   1769c:	beq	177ac <__assert_fail@plt+0x51b8>
   176a0:	mov	r1, #1
   176a4:	movw	r0, #6288	; 0x1890
   176a8:	movt	r0, #5
   176ac:	mov	r3, r4
   176b0:	mov	r2, #7
   176b4:	add	r5, r5, r1
   176b8:	bl	12168 <fwrite@plt>
   176bc:	ldr	r8, [r8, #160]	; 0xa0
   176c0:	cmp	r8, #0
   176c4:	bne	173a8 <__assert_fail@plt+0x4db4>
   176c8:	add	sp, sp, #16
   176cc:	ldrd	r4, [sp]
   176d0:	ldrd	r6, [sp, #8]
   176d4:	ldrd	r8, [sp, #16]
   176d8:	ldr	sl, [sp, #24]
   176dc:	add	sp, sp, #28
   176e0:	pop	{pc}		; (ldr pc, [sp], #4)
   176e4:	mov	r3, #4
   176e8:	add	r3, r9, r3, lsl #3
   176ec:	ldr	r2, [r3, #476]	; 0x1dc
   176f0:	b	1753c <__assert_fail@plt+0x4f48>
   176f4:	ldr	r3, [r8, #160]	; 0xa0
   176f8:	cmp	r3, #0
   176fc:	beq	17870 <__assert_fail@plt+0x527c>
   17700:	movw	r0, #6276	; 0x1884
   17704:	movt	r0, #5
   17708:	mov	r3, r4
   1770c:	mov	r2, #9
   17710:	mov	r1, #1
   17714:	bl	12168 <fwrite@plt>
   17718:	b	17668 <__assert_fail@plt+0x5074>
   1771c:	mov	r1, r4
   17720:	ldr	r0, [r8, #4]
   17724:	bl	12588 <fputs@plt>
   17728:	ldrsh	r3, [r8, #8]
   1772c:	cmp	r3, #0
   17730:	bne	17414 <__assert_fail@plt+0x4e20>
   17734:	ldrsh	r3, [r8, #12]
   17738:	movw	r2, #6124	; 0x17ec
   1773c:	movt	r2, #5
   17740:	cmp	r3, #0
   17744:	bne	1745c <__assert_fail@plt+0x4e68>
   17748:	movw	r3, #6124	; 0x17ec
   1774c:	movt	r3, #5
   17750:	b	17498 <__assert_fail@plt+0x4ea4>
   17754:	ldrb	r3, [r8, #19]
   17758:	cmp	r3, #0
   1775c:	beq	175fc <__assert_fail@plt+0x5008>
   17760:	movw	r2, #9500	; 0x251c
   17764:	movt	r2, #5
   17768:	b	175ec <__assert_fail@plt+0x4ff8>
   1776c:	mov	r3, r4
   17770:	movw	r0, #2448	; 0x990
   17774:	movt	r0, #5
   17778:	mov	r2, #4
   1777c:	mov	r1, #1
   17780:	bl	12168 <fwrite@plt>
   17784:	ldrb	r3, [r8, #20]
   17788:	cmp	r3, #0
   1778c:	bne	177a0 <__assert_fail@plt+0x51ac>
   17790:	ldrb	r3, [r8, #19]
   17794:	cmp	r3, #0
   17798:	beq	175fc <__assert_fail@plt+0x5008>
   1779c:	b	175e4 <__assert_fail@plt+0x4ff0>
   177a0:	movw	r2, #6140	; 0x17fc
   177a4:	movt	r2, #5
   177a8:	b	175c8 <__assert_fail@plt+0x4fd4>
   177ac:	movw	r0, #6296	; 0x1898
   177b0:	movt	r0, #5
   177b4:	mov	r3, r4
   177b8:	mov	r2, #10
   177bc:	mov	r1, #1
   177c0:	add	sp, sp, #16
   177c4:	ldrd	r4, [sp]
   177c8:	ldrd	r6, [sp, #8]
   177cc:	ldrd	r8, [sp, #16]
   177d0:	ldr	sl, [sp, #24]
   177d4:	ldr	lr, [sp, #28]
   177d8:	add	sp, sp, #32
   177dc:	b	12168 <fwrite@plt>
   177e0:	mov	r3, #0
   177e4:	add	r3, r9, r3, lsl #3
   177e8:	ldr	r2, [r3, #476]	; 0x1dc
   177ec:	b	1753c <__assert_fail@plt+0x4f48>
   177f0:	mov	r3, #1
   177f4:	add	r3, r9, r3, lsl #3
   177f8:	ldr	r2, [r3, #476]	; 0x1dc
   177fc:	b	1753c <__assert_fail@plt+0x4f48>
   17800:	mov	r3, #2
   17804:	add	r3, r9, r3, lsl #3
   17808:	ldr	r2, [r3, #476]	; 0x1dc
   1780c:	b	1753c <__assert_fail@plt+0x4f48>
   17810:	mov	r3, #3
   17814:	add	r3, r9, r3, lsl #3
   17818:	ldr	r2, [r3, #476]	; 0x1dc
   1781c:	b	1753c <__assert_fail@plt+0x4f48>
   17820:	mov	r3, #5
   17824:	add	r3, r9, r3, lsl #3
   17828:	ldr	r2, [r3, #476]	; 0x1dc
   1782c:	b	1753c <__assert_fail@plt+0x4f48>
   17830:	mov	r3, #6
   17834:	add	r3, r9, r3, lsl #3
   17838:	ldr	r2, [r3, #476]	; 0x1dc
   1783c:	b	1753c <__assert_fail@plt+0x4f48>
   17840:	mov	r3, #7
   17844:	add	r3, r9, r3, lsl #3
   17848:	ldr	r2, [r3, #476]	; 0x1dc
   1784c:	b	1753c <__assert_fail@plt+0x4f48>
   17850:	mov	r3, #8
   17854:	add	r3, r9, r3, lsl #3
   17858:	ldr	r2, [r3, #476]	; 0x1dc
   1785c:	b	1753c <__assert_fail@plt+0x4f48>
   17860:	mov	r3, #9
   17864:	add	r3, r9, r3, lsl #3
   17868:	ldr	r2, [r3, #476]	; 0x1dc
   1786c:	b	1753c <__assert_fail@plt+0x4f48>
   17870:	movw	r0, #6252	; 0x186c
   17874:	movt	r0, #5
   17878:	mov	r3, r4
   1787c:	mov	r2, #13
   17880:	b	177bc <__assert_fail@plt+0x51c8>
   17884:	ldr	r3, [r0]
   17888:	cmp	r3, #0
   1788c:	bxeq	lr
   17890:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17894:	strd	r6, [sp, #8]
   17898:	mov	r7, r1
   1789c:	mov	r6, r0
   178a0:	strd	r8, [sp, #16]
   178a4:	movw	r8, #32364	; 0x7e6c
   178a8:	movt	r8, #6
   178ac:	ldr	r2, [r8, #44]	; 0x2c
   178b0:	str	sl, [sp, #24]
   178b4:	str	lr, [sp, #28]
   178b8:	tst	r2, #8
   178bc:	bne	179d4 <__assert_fail@plt+0x53e0>
   178c0:	mov	r0, r3
   178c4:	bl	16ce0 <__assert_fail@plt+0x46ec>
   178c8:	ldr	r3, [r6]
   178cc:	cmp	r3, #0
   178d0:	beq	17a40 <__assert_fail@plt+0x544c>
   178d4:	mov	r5, #0
   178d8:	mov	r4, r5
   178dc:	mov	sl, r5
   178e0:	cmp	r4, #0
   178e4:	ldr	r1, [r3, #156]	; 0x9c
   178e8:	str	sl, [r3, #156]	; 0x9c
   178ec:	beq	17944 <__assert_fail@plt+0x5350>
   178f0:	ldr	r0, [r3, #160]	; 0xa0
   178f4:	mov	r2, r4
   178f8:	ldr	r9, [r0, #24]
   178fc:	ldr	ip, [r2, #160]	; 0xa0
   17900:	ldr	lr, [ip, #24]
   17904:	cmp	lr, r9
   17908:	bne	179ac <__assert_fail@plt+0x53b8>
   1790c:	vldr	s14, [ip, #28]
   17910:	vldr	s15, [r0, #28]
   17914:	ldr	ip, [r2, #12]
   17918:	vcmp.f32	s14, s15
   1791c:	vmrs	APSR_nzcv, fpscr
   17920:	beq	179b0 <__assert_fail@plt+0x53bc>
   17924:	cmp	ip, #2
   17928:	vcmpe.f32	s14, s15
   1792c:	beq	179c8 <__assert_fail@plt+0x53d4>
   17930:	vmrs	APSR_nzcv, fpscr
   17934:	bpl	179b0 <__assert_fail@plt+0x53bc>
   17938:	ldr	r2, [r2, #156]	; 0x9c
   1793c:	cmp	r2, #0
   17940:	bne	178fc <__assert_fail@plt+0x5308>
   17944:	cmp	r5, #0
   17948:	str	r4, [r3, #156]	; 0x9c
   1794c:	moveq	r5, r3
   17950:	moveq	r4, r5
   17954:	movne	r4, r3
   17958:	cmp	r1, #0
   1795c:	mov	r3, r1
   17960:	bne	178e0 <__assert_fail@plt+0x52ec>
   17964:	str	r1, [r6]
   17968:	ldr	r3, [r8, #44]	; 0x2c
   1796c:	tst	r3, #8
   17970:	bne	17a0c <__assert_fail@plt+0x5418>
   17974:	mov	r0, r4
   17978:	bl	16ce0 <__assert_fail@plt+0x46ec>
   1797c:	ldr	r2, [r7]
   17980:	mov	r3, #0
   17984:	ldrd	r8, [sp, #16]
   17988:	ldr	sl, [sp, #24]
   1798c:	str	r2, [r5, #156]	; 0x9c
   17990:	str	r4, [r7]
   17994:	str	r3, [r6]
   17998:	str	r3, [r6, #4]
   1799c:	ldrd	r4, [sp]
   179a0:	ldrd	r6, [sp, #8]
   179a4:	add	sp, sp, #28
   179a8:	pop	{pc}		; (ldr pc, [sp], #4)
   179ac:	bcc	17938 <__assert_fail@plt+0x5344>
   179b0:	ldr	r0, [r2, #156]	; 0x9c
   179b4:	cmp	r0, #0
   179b8:	str	r0, [r3, #156]	; 0x9c
   179bc:	moveq	r5, r3
   179c0:	str	r3, [r2, #156]	; 0x9c
   179c4:	b	17958 <__assert_fail@plt+0x5364>
   179c8:	vmrs	APSR_nzcv, fpscr
   179cc:	bmi	179b0 <__assert_fail@plt+0x53bc>
   179d0:	b	17938 <__assert_fail@plt+0x5344>
   179d4:	movw	r4, #30024	; 0x7548
   179d8:	movt	r4, #6
   179dc:	movw	r2, #6308	; 0x18a4
   179e0:	movt	r2, #5
   179e4:	ldr	r0, [r4]
   179e8:	movw	r1, #6336	; 0x18c0
   179ec:	movt	r1, #5
   179f0:	bl	1233c <fprintf@plt>
   179f4:	mov	r2, #2
   179f8:	ldr	r0, [r4]
   179fc:	ldr	r1, [r6]
   17a00:	bl	17368 <__assert_fail@plt+0x4d74>
   17a04:	ldr	r3, [r6]
   17a08:	b	178c0 <__assert_fail@plt+0x52cc>
   17a0c:	movw	r8, #30024	; 0x7548
   17a10:	movt	r8, #6
   17a14:	movw	r2, #6344	; 0x18c8
   17a18:	movt	r2, #5
   17a1c:	ldr	r0, [r8]
   17a20:	movw	r1, #6336	; 0x18c0
   17a24:	movt	r1, #5
   17a28:	bl	1233c <fprintf@plt>
   17a2c:	mov	r2, #2
   17a30:	mov	r1, r4
   17a34:	ldr	r0, [r8]
   17a38:	bl	17368 <__assert_fail@plt+0x4d74>
   17a3c:	b	17974 <__assert_fail@plt+0x5380>
   17a40:	mov	r5, r3
   17a44:	mov	r4, r3
   17a48:	b	17968 <__assert_fail@plt+0x5374>
   17a4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17a50:	mov	r2, #0
   17a54:	mov	r3, #0
   17a58:	ldr	r4, [r0]
   17a5c:	strd	r6, [sp, #8]
   17a60:	strd	r8, [sp, #16]
   17a64:	strd	sl, [sp, #24]
   17a68:	str	lr, [sp, #32]
   17a6c:	vpush	{d8}
   17a70:	sub	sp, sp, #108	; 0x6c
   17a74:	cmp	r4, #0
   17a78:	strd	r2, [sp]
   17a7c:	strd	r2, [sp, #8]
   17a80:	beq	17fcc <__assert_fail@plt+0x59d8>
   17a84:	ldr	r5, [r4, #156]	; 0x9c
   17a88:	mov	r6, r0
   17a8c:	strd	r2, [sp, #16]
   17a90:	strd	r2, [sp, #24]
   17a94:	strd	r2, [sp, #32]
   17a98:	strd	r2, [sp, #40]	; 0x28
   17a9c:	cmp	r5, #0
   17aa0:	strd	r2, [sp, #48]	; 0x30
   17aa4:	strd	r2, [sp, #56]	; 0x38
   17aa8:	strd	r2, [sp, #64]	; 0x40
   17aac:	strd	r2, [sp, #72]	; 0x48
   17ab0:	strd	r2, [sp, #80]	; 0x50
   17ab4:	strd	r2, [sp, #88]	; 0x58
   17ab8:	strd	r2, [sp, #96]	; 0x60
   17abc:	beq	17eec <__assert_fail@plt+0x58f8>
   17ac0:	mov	r3, r4
   17ac4:	b	17ad0 <__assert_fail@plt+0x54dc>
   17ac8:	mov	r3, r5
   17acc:	mov	r5, r7
   17ad0:	ldr	r7, [r5, #156]	; 0x9c
   17ad4:	cmp	r7, #0
   17ad8:	bne	17ac8 <__assert_fail@plt+0x54d4>
   17adc:	ldr	r2, [r5, #8]
   17ae0:	cmp	r2, #3
   17ae4:	bne	17cfc <__assert_fail@plt+0x5708>
   17ae8:	movw	r9, #32364	; 0x7e6c
   17aec:	movt	r9, #6
   17af0:	ldr	r3, [r9, #44]	; 0x2c
   17af4:	tst	r3, #9
   17af8:	bne	17f0c <__assert_fail@plt+0x5918>
   17afc:	ldr	r3, [r4, #8]
   17b00:	cmp	r3, #3
   17b04:	movne	r8, #0
   17b08:	beq	17fd4 <__assert_fail@plt+0x59e0>
   17b0c:	vldr	s16, [pc, #980]	; 17ee8 <__assert_fail@plt+0x58f4>
   17b10:	movw	sl, #14236	; 0x379c
   17b14:	movt	sl, #1
   17b18:	mov	r5, #0
   17b1c:	vldr	s17, [pc, #960]	; 17ee4 <__assert_fail@plt+0x58f0>
   17b20:	ldr	r7, [r4, #8]
   17b24:	cmp	r7, #3
   17b28:	beq	17d64 <__assert_fail@plt+0x5770>
   17b2c:	ldr	r7, [r4, #160]	; 0xa0
   17b30:	ldr	r3, [r7, #8]
   17b34:	cmp	r3, #3
   17b38:	ldrls	pc, [pc, r3, lsl #2]
   17b3c:	b	181fc <__assert_fail@plt+0x5c08>
   17b40:	andeq	r7, r1, ip, ror #24
   17b44:	andeq	r7, r1, ip, ror #24
   17b48:	strdeq	r7, [r1], -r4
   17b4c:	andeq	r7, r1, r0, asr fp
   17b50:	add	r0, r4, #160	; 0xa0
   17b54:	bl	17a4c <__assert_fail@plt+0x5458>
   17b58:	ldr	r3, [r4, #160]	; 0xa0
   17b5c:	strb	r0, [r7, #16]
   17b60:	ldrb	r3, [r3, #16]
   17b64:	cmp	r3, #0
   17b68:	bne	17c10 <__assert_fail@plt+0x561c>
   17b6c:	add	r6, r4, #156	; 0x9c
   17b70:	ldr	r4, [r6]
   17b74:	cmp	r4, #0
   17b78:	bne	17b20 <__assert_fail@plt+0x552c>
   17b7c:	movw	r7, #30064	; 0x7570
   17b80:	movt	r7, #6
   17b84:	movw	r3, #30852	; 0x7884
   17b88:	movt	r3, #1
   17b8c:	mov	r1, r6
   17b90:	add	r0, sp, #8
   17b94:	str	r3, [r7, #28]
   17b98:	add	r4, sp, #16
   17b9c:	add	r8, sp, #104	; 0x68
   17ba0:	bl	17884 <__assert_fail@plt+0x5290>
   17ba4:	mov	r1, r6
   17ba8:	mov	r0, sp
   17bac:	ldr	r3, [r7, #28]
   17bb0:	blx	r3
   17bb4:	mov	r0, r4
   17bb8:	mov	r1, r6
   17bbc:	ldr	r3, [r7, #28]
   17bc0:	add	r4, r4, #8
   17bc4:	blx	r3
   17bc8:	cmp	r8, r4
   17bcc:	bne	17bb4 <__assert_fail@plt+0x55c0>
   17bd0:	mov	r0, r5
   17bd4:	add	sp, sp, #108	; 0x6c
   17bd8:	vpop	{d8}
   17bdc:	ldrd	r4, [sp]
   17be0:	ldrd	r6, [sp, #8]
   17be4:	ldrd	r8, [sp, #16]
   17be8:	ldrd	sl, [sp, #24]
   17bec:	add	sp, sp, #32
   17bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   17bf4:	add	r0, r7, #160	; 0xa0
   17bf8:	bl	17a4c <__assert_fail@plt+0x5458>
   17bfc:	ldr	r3, [r4, #160]	; 0xa0
   17c00:	strb	r0, [r7, #16]
   17c04:	ldrb	r3, [r3, #16]
   17c08:	cmp	r3, #0
   17c0c:	beq	17b6c <__assert_fail@plt+0x5578>
   17c10:	movw	r7, #30064	; 0x7570
   17c14:	movt	r7, #6
   17c18:	movw	r3, #30852	; 0x7884
   17c1c:	movt	r3, #1
   17c20:	mov	r1, r6
   17c24:	add	r0, sp, #8
   17c28:	str	r3, [r7, #28]
   17c2c:	add	r5, sp, #16
   17c30:	add	fp, sp, #104	; 0x68
   17c34:	bl	17884 <__assert_fail@plt+0x5290>
   17c38:	mov	r1, r6
   17c3c:	mov	r0, sp
   17c40:	ldr	r3, [r7, #28]
   17c44:	blx	r3
   17c48:	mov	r0, r5
   17c4c:	mov	r1, r6
   17c50:	ldr	r3, [r7, #28]
   17c54:	add	r5, r5, #8
   17c58:	blx	r3
   17c5c:	cmp	r5, fp
   17c60:	bne	17c48 <__assert_fail@plt+0x5654>
   17c64:	mov	r5, #1
   17c68:	b	17b6c <__assert_fail@plt+0x5578>
   17c6c:	cmp	r8, #1
   17c70:	ldrb	r3, [r7, #16]
   17c74:	beq	17b64 <__assert_fail@plt+0x5570>
   17c78:	cmp	r3, #0
   17c7c:	bne	17c10 <__assert_fail@plt+0x561c>
   17c80:	ldr	r1, [r7]
   17c84:	movw	r3, #19620	; 0x4ca4
   17c88:	movt	r3, #1
   17c8c:	movw	ip, #20740	; 0x5104
   17c90:	movt	ip, #1
   17c94:	movw	r0, #18264	; 0x4758
   17c98:	movt	r0, #1
   17c9c:	movw	r2, #18464	; 0x4820
   17ca0:	movt	r2, #1
   17ca4:	cmp	r1, ip
   17ca8:	cmpne	r1, r3
   17cac:	moveq	r3, #1
   17cb0:	movne	r3, #0
   17cb4:	cmp	r1, r0
   17cb8:	orreq	r3, r3, #1
   17cbc:	cmp	r1, r2
   17cc0:	orreq	r3, r3, #1
   17cc4:	cmp	r3, #0
   17cc8:	beq	17db0 <__assert_fail@plt+0x57bc>
   17ccc:	ldr	r3, [r9, #44]	; 0x2c
   17cd0:	tst	r3, #8
   17cd4:	bne	17f70 <__assert_fail@plt+0x597c>
   17cd8:	ldr	r3, [r4, #156]	; 0x9c
   17cdc:	str	r3, [r6]
   17ce0:	ldr	r3, [sp, #8]
   17ce4:	str	r4, [sp, #8]
   17ce8:	ldr	r2, [sp, #12]
   17cec:	str	r3, [r4, #156]	; 0x9c
   17cf0:	cmp	r2, #0
   17cf4:	streq	r4, [sp, #12]
   17cf8:	b	17b70 <__assert_fail@plt+0x557c>
   17cfc:	ldr	r4, [r3, #12]
   17d00:	mov	r0, #176	; 0xb0
   17d04:	add	r8, r3, #156	; 0x9c
   17d08:	bl	36c58 <__assert_fail@plt+0x24664>
   17d0c:	mov	r3, #3
   17d10:	str	r3, [r0, #8]
   17d14:	cmp	r4, #2
   17d18:	str	r4, [r0, #12]
   17d1c:	str	r7, [r0, #24]
   17d20:	beq	18040 <__assert_fail@plt+0x5a4c>
   17d24:	cmp	r4, r3
   17d28:	beq	17ffc <__assert_fail@plt+0x5a08>
   17d2c:	cmp	r4, #1
   17d30:	beq	17f40 <__assert_fail@plt+0x594c>
   17d34:	movw	r9, #32364	; 0x7e6c
   17d38:	movt	r9, #6
   17d3c:	str	r5, [r0, #160]	; 0xa0
   17d40:	ldr	r3, [r9, #44]	; 0x2c
   17d44:	str	r0, [r8]
   17d48:	tst	r3, #9
   17d4c:	bne	17f0c <__assert_fail@plt+0x5918>
   17d50:	ldr	r4, [r6]
   17d54:	cmp	r4, #0
   17d58:	bne	17afc <__assert_fail@plt+0x5508>
   17d5c:	mov	r5, r4
   17d60:	b	17b7c <__assert_fail@plt+0x5588>
   17d64:	ldr	r3, [r4, #12]
   17d68:	cmp	r3, r8
   17d6c:	beq	17b2c <__assert_fail@plt+0x5538>
   17d70:	mov	r0, #176	; 0xb0
   17d74:	bl	36c58 <__assert_fail@plt+0x24664>
   17d78:	mov	r3, #0
   17d7c:	cmp	r8, #2
   17d80:	str	r7, [r0, #8]
   17d84:	str	r8, [r0, #12]
   17d88:	str	r3, [r0, #24]
   17d8c:	beq	17ebc <__assert_fail@plt+0x58c8>
   17d90:	cmp	r8, #3
   17d94:	beq	17e84 <__assert_fail@plt+0x5890>
   17d98:	cmp	r8, #1
   17d9c:	beq	17e68 <__assert_fail@plt+0x5874>
   17da0:	str	r4, [r0, #160]	; 0xa0
   17da4:	mov	r4, r0
   17da8:	str	r0, [r6]
   17dac:	b	17b2c <__assert_fail@plt+0x5538>
   17db0:	ldrh	r2, [r9, #68]	; 0x44
   17db4:	movw	r3, #14048	; 0x36e0
   17db8:	movt	r3, #1
   17dbc:	movw	r0, #19700	; 0x4cf4
   17dc0:	movt	r0, #1
   17dc4:	cmp	r1, r0
   17dc8:	cmpne	r1, r3
   17dcc:	movw	r0, #16420	; 0x4024
   17dd0:	movt	r0, #1
   17dd4:	moveq	r3, #1
   17dd8:	movne	r3, #0
   17ddc:	cmp	r2, #0
   17de0:	moveq	r3, #1
   17de4:	cmp	r1, r0
   17de8:	orreq	r3, r3, #1
   17dec:	cmp	r1, sl
   17df0:	orreq	r3, r3, #1
   17df4:	cmp	r3, #0
   17df8:	beq	17f60 <__assert_fail@plt+0x596c>
   17dfc:	movw	r3, #21184	; 0x52c0
   17e00:	movt	r3, #1
   17e04:	cmp	r1, r3
   17e08:	beq	18068 <__assert_fail@plt+0x5a74>
   17e0c:	cmp	r2, #1
   17e10:	bls	17b6c <__assert_fail@plt+0x5578>
   17e14:	ldr	r3, [r7, #24]
   17e18:	sub	r1, r3, #1
   17e1c:	cmp	r1, #1
   17e20:	bls	18058 <__assert_fail@plt+0x5a64>
   17e24:	cmp	r2, #2
   17e28:	beq	17b6c <__assert_fail@plt+0x5578>
   17e2c:	ldr	r1, [r9, #44]	; 0x2c
   17e30:	tst	r1, #8
   17e34:	bne	1809c <__assert_fail@plt+0x5aa8>
   17e38:	ldr	r0, [r4, #156]	; 0x9c
   17e3c:	add	r2, sp, #16
   17e40:	add	r1, sp, #104	; 0x68
   17e44:	add	r1, r1, r3, lsl #3
   17e48:	str	r0, [r6]
   17e4c:	ldr	r0, [r2, r3, lsl #3]
   17e50:	str	r0, [r4, #156]	; 0x9c
   17e54:	str	r4, [r2, r3, lsl #3]
   17e58:	ldr	r3, [r1, #-84]	; 0xffffffac
   17e5c:	cmp	r3, #0
   17e60:	streq	r4, [r1, #-84]	; 0xffffffac
   17e64:	b	17b70 <__assert_fail@plt+0x557c>
   17e68:	movw	r2, #16420	; 0x4024
   17e6c:	movt	r2, #1
   17e70:	vstr	s16, [r0, #28]
   17e74:	movw	r3, #6140	; 0x17fc
   17e78:	movt	r3, #5
   17e7c:	strd	r2, [r0]
   17e80:	b	17da0 <__assert_fail@plt+0x57ac>
   17e84:	vldr	s15, [r4, #28]
   17e88:	movw	r2, #14048	; 0x36e0
   17e8c:	movt	r2, #1
   17e90:	movw	r3, #6120	; 0x17e8
   17e94:	movt	r3, #5
   17e98:	strd	r2, [r0]
   17e9c:	vcmpe.f32	s15, s16
   17ea0:	vmrs	APSR_nzcv, fpscr
   17ea4:	bgt	17edc <__assert_fail@plt+0x58e8>
   17ea8:	vcmp.f32	s15, #0.0
   17eac:	vmrs	APSR_nzcv, fpscr
   17eb0:	vmovmi.f32	s15, s17
   17eb4:	vstr	s15, [r0, #28]
   17eb8:	b	17da0 <__assert_fail@plt+0x57ac>
   17ebc:	vldr	s15, [r4, #28]
   17ec0:	movw	r3, #6372	; 0x18e4
   17ec4:	movt	r3, #5
   17ec8:	str	sl, [r0]
   17ecc:	str	r3, [r0, #4]
   17ed0:	vcmpe.f32	s15, s16
   17ed4:	vmrs	APSR_nzcv, fpscr
   17ed8:	ble	17ea8 <__assert_fail@plt+0x58b4>
   17edc:	vldr	s15, [pc, #4]	; 17ee8 <__assert_fail@plt+0x58f4>
   17ee0:	b	17eb4 <__assert_fail@plt+0x58c0>
   17ee4:	andeq	r0, r0, r0
   17ee8:	svccc	0x00800000
   17eec:	ldr	r3, [r4, #8]
   17ef0:	cmp	r3, #3
   17ef4:	bne	17fdc <__assert_fail@plt+0x59e8>
   17ef8:	movw	r9, #32364	; 0x7e6c
   17efc:	movt	r9, #6
   17f00:	ldr	r3, [r9, #44]	; 0x2c
   17f04:	tst	r3, #9
   17f08:	beq	17fd4 <__assert_fail@plt+0x59e0>
   17f0c:	movw	r4, #30024	; 0x7548
   17f10:	movt	r4, #6
   17f14:	mov	r2, #22
   17f18:	mov	r1, #1
   17f1c:	ldr	r3, [r4]
   17f20:	movw	r0, #6376	; 0x18e8
   17f24:	movt	r0, #5
   17f28:	bl	12168 <fwrite@plt>
   17f2c:	mov	r2, #0
   17f30:	ldr	r0, [r4]
   17f34:	ldr	r1, [r6]
   17f38:	bl	17368 <__assert_fail@plt+0x4d74>
   17f3c:	b	17d50 <__assert_fail@plt+0x575c>
   17f40:	mov	r1, #1065353216	; 0x3f800000
   17f44:	movw	r2, #16420	; 0x4024
   17f48:	movt	r2, #1
   17f4c:	movw	r3, #6140	; 0x17fc
   17f50:	movt	r3, #5
   17f54:	strd	r2, [r0]
   17f58:	str	r1, [r0, #28]
   17f5c:	b	17d34 <__assert_fail@plt+0x5740>
   17f60:	ldr	r3, [r7, #24]
   17f64:	cmp	r3, #0
   17f68:	bne	17dfc <__assert_fail@plt+0x5808>
   17f6c:	b	17ccc <__assert_fail@plt+0x56d8>
   17f70:	movw	r7, #30024	; 0x7548
   17f74:	movt	r7, #6
   17f78:	ldrh	r2, [r9, #68]	; 0x44
   17f7c:	movw	r1, #6400	; 0x1900
   17f80:	movt	r1, #5
   17f84:	ldr	r0, [r7]
   17f88:	bl	1233c <fprintf@plt>
   17f8c:	ldr	r2, [r4, #160]	; 0xa0
   17f90:	ldr	r0, [r7]
   17f94:	ldr	r3, [r2, #36]	; 0x24
   17f98:	cmp	r3, #0
   17f9c:	beq	1808c <__assert_fail@plt+0x5a98>
   17fa0:	movw	r1, #5804	; 0x16ac
   17fa4:	movt	r1, #5
   17fa8:	ldr	r2, [r2, #4]
   17fac:	bl	1233c <fprintf@plt>
   17fb0:	movw	r0, #6436	; 0x1924
   17fb4:	movt	r0, #5
   17fb8:	ldr	r3, [r7]
   17fbc:	mov	r2, #16
   17fc0:	mov	r1, #1
   17fc4:	bl	12168 <fwrite@plt>
   17fc8:	b	17cd8 <__assert_fail@plt+0x56e4>
   17fcc:	mov	r5, r4
   17fd0:	b	17bd0 <__assert_fail@plt+0x55dc>
   17fd4:	ldr	r8, [r4, #12]
   17fd8:	b	17b0c <__assert_fail@plt+0x5518>
   17fdc:	mov	r0, #176	; 0xb0
   17fe0:	mov	r8, r6
   17fe4:	bl	36c58 <__assert_fail@plt+0x24664>
   17fe8:	mov	r2, #3
   17fec:	mov	r3, #3
   17ff0:	str	r5, [r0, #24]
   17ff4:	mov	r5, r4
   17ff8:	strd	r2, [r0, #8]
   17ffc:	vldr	s14, [pc, #-284]	; 17ee8 <__assert_fail@plt+0x58f4>
   18000:	movw	r2, #14048	; 0x36e0
   18004:	movt	r2, #1
   18008:	movw	r3, #6120	; 0x17e8
   1800c:	movt	r3, #5
   18010:	vldr	s15, [r5, #28]
   18014:	strd	r2, [r0]
   18018:	vcmpe.f32	s15, s14
   1801c:	vmrs	APSR_nzcv, fpscr
   18020:	vmovgt.f32	s15, s14
   18024:	bgt	18038 <__assert_fail@plt+0x5a44>
   18028:	vcmp.f32	s15, #0.0
   1802c:	vldr	s14, [pc, #-336]	; 17ee4 <__assert_fail@plt+0x58f0>
   18030:	vmrs	APSR_nzcv, fpscr
   18034:	vmovmi.f32	s15, s14
   18038:	vstr	s15, [r0, #28]
   1803c:	b	17d34 <__assert_fail@plt+0x5740>
   18040:	movw	r2, #14236	; 0x379c
   18044:	movt	r2, #1
   18048:	vldr	s14, [pc, #-360]	; 17ee8 <__assert_fail@plt+0x58f4>
   1804c:	movw	r3, #6372	; 0x18e4
   18050:	movt	r3, #5
   18054:	b	18010 <__assert_fail@plt+0x5a1c>
   18058:	ldrb	r1, [r7, #18]
   1805c:	cmp	r1, #0
   18060:	beq	17e2c <__assert_fail@plt+0x5838>
   18064:	b	17e24 <__assert_fail@plt+0x5830>
   18068:	ldr	r3, [r4, #156]	; 0x9c
   1806c:	str	r3, [r6]
   18070:	ldr	r3, [sp]
   18074:	str	r4, [sp]
   18078:	ldr	r2, [sp, #4]
   1807c:	str	r3, [r4, #156]	; 0x9c
   18080:	cmp	r2, #0
   18084:	streq	r4, [sp, #4]
   18088:	b	17b70 <__assert_fail@plt+0x557c>
   1808c:	mov	r1, r0
   18090:	ldr	r0, [r2, #4]
   18094:	bl	12588 <fputs@plt>
   18098:	b	17fb0 <__assert_fail@plt+0x59bc>
   1809c:	movw	r7, #30024	; 0x7548
   180a0:	movt	r7, #6
   180a4:	movw	r1, #6456	; 0x1938
   180a8:	movt	r1, #5
   180ac:	ldr	r0, [r7]
   180b0:	bl	1233c <fprintf@plt>
   180b4:	ldr	r2, [r4, #160]	; 0xa0
   180b8:	ldr	r1, [r7]
   180bc:	ldr	r3, [r2, #36]	; 0x24
   180c0:	cmp	r3, #0
   180c4:	beq	181a8 <__assert_fail@plt+0x5bb4>
   180c8:	mov	r0, r1
   180cc:	movw	r1, #5804	; 0x16ac
   180d0:	movt	r1, #5
   180d4:	ldr	r2, [r2, #4]
   180d8:	bl	1233c <fprintf@plt>
   180dc:	ldr	r2, [r4, #160]	; 0xa0
   180e0:	movw	r3, #29340	; 0x729c
   180e4:	movt	r3, #6
   180e8:	ldr	r1, [r3, #472]	; 0x1d8
   180ec:	ldr	r0, [r7]
   180f0:	ldr	r2, [r2, #24]
   180f4:	cmp	r2, r1
   180f8:	beq	181bc <__assert_fail@plt+0x5bc8>
   180fc:	ldr	r1, [r3, #480]	; 0x1e0
   18100:	cmp	r2, r1
   18104:	beq	181b4 <__assert_fail@plt+0x5bc0>
   18108:	ldr	r1, [r3, #488]	; 0x1e8
   1810c:	cmp	r2, r1
   18110:	beq	181f4 <__assert_fail@plt+0x5c00>
   18114:	ldr	r1, [r3, #496]	; 0x1f0
   18118:	cmp	r2, r1
   1811c:	beq	181ec <__assert_fail@plt+0x5bf8>
   18120:	ldr	r1, [r3, #504]	; 0x1f8
   18124:	cmp	r2, r1
   18128:	beq	18198 <__assert_fail@plt+0x5ba4>
   1812c:	ldr	r1, [r3, #512]	; 0x200
   18130:	cmp	r2, r1
   18134:	beq	181e4 <__assert_fail@plt+0x5bf0>
   18138:	ldr	r1, [r3, #520]	; 0x208
   1813c:	cmp	r2, r1
   18140:	beq	181dc <__assert_fail@plt+0x5be8>
   18144:	ldr	r1, [r3, #528]	; 0x210
   18148:	cmp	r2, r1
   1814c:	beq	181d4 <__assert_fail@plt+0x5be0>
   18150:	ldr	r1, [r3, #536]	; 0x218
   18154:	cmp	r2, r1
   18158:	beq	181cc <__assert_fail@plt+0x5bd8>
   1815c:	ldr	r1, [r3, #544]	; 0x220
   18160:	cmp	r2, r1
   18164:	beq	181c4 <__assert_fail@plt+0x5bd0>
   18168:	ldr	r1, [r3, #552]	; 0x228
   1816c:	cmp	r2, r1
   18170:	moveq	r2, #10
   18174:	beq	1819c <__assert_fail@plt+0x5ba8>
   18178:	movw	r2, #6128	; 0x17f0
   1817c:	movt	r2, #5
   18180:	movw	r1, #6488	; 0x1958
   18184:	movt	r1, #5
   18188:	bl	1233c <fprintf@plt>
   1818c:	ldr	r3, [r4, #160]	; 0xa0
   18190:	ldr	r3, [r3, #24]
   18194:	b	17e38 <__assert_fail@plt+0x5844>
   18198:	mov	r2, #4
   1819c:	add	r3, r3, r2, lsl #3
   181a0:	ldr	r2, [r3, #476]	; 0x1dc
   181a4:	b	18180 <__assert_fail@plt+0x5b8c>
   181a8:	ldr	r0, [r2, #4]
   181ac:	bl	12588 <fputs@plt>
   181b0:	b	180dc <__assert_fail@plt+0x5ae8>
   181b4:	mov	r2, #1
   181b8:	b	1819c <__assert_fail@plt+0x5ba8>
   181bc:	mov	r2, #0
   181c0:	b	1819c <__assert_fail@plt+0x5ba8>
   181c4:	mov	r2, #9
   181c8:	b	1819c <__assert_fail@plt+0x5ba8>
   181cc:	mov	r2, #8
   181d0:	b	1819c <__assert_fail@plt+0x5ba8>
   181d4:	mov	r2, #7
   181d8:	b	1819c <__assert_fail@plt+0x5ba8>
   181dc:	mov	r2, #6
   181e0:	b	1819c <__assert_fail@plt+0x5ba8>
   181e4:	mov	r2, #5
   181e8:	b	1819c <__assert_fail@plt+0x5ba8>
   181ec:	mov	r2, #3
   181f0:	b	1819c <__assert_fail@plt+0x5ba8>
   181f4:	mov	r2, #2
   181f8:	b	1819c <__assert_fail@plt+0x5ba8>
   181fc:	mov	r2, #5
   18200:	movw	r1, #5508	; 0x1584
   18204:	movt	r1, #5
   18208:	mov	r0, #0
   1820c:	bl	120b4 <dcgettext@plt>
   18210:	mov	r2, r0
   18214:	mov	r1, #0
   18218:	mov	r0, #1
   1821c:	bl	121ec <error@plt>
   18220:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18224:	strd	r6, [sp, #8]
   18228:	subs	r7, r0, #0
   1822c:	strd	r8, [sp, #16]
   18230:	strd	sl, [sp, #24]
   18234:	str	lr, [sp, #32]
   18238:	vpush	{d8}
   1823c:	sub	sp, sp, #68	; 0x44
   18240:	beq	182d8 <__assert_fail@plt+0x5ce4>
   18244:	movw	r3, #32364	; 0x7e6c
   18248:	movt	r3, #6
   1824c:	mov	r9, r7
   18250:	str	r3, [sp, #40]	; 0x28
   18254:	movw	r3, #6624	; 0x19e0
   18258:	movt	r3, #5
   1825c:	str	r3, [sp, #16]
   18260:	movw	r3, #14236	; 0x379c
   18264:	movt	r3, #1
   18268:	str	r3, [sp, #44]	; 0x2c
   1826c:	movw	r3, #30024	; 0x7548
   18270:	movt	r3, #6
   18274:	str	r3, [sp, #36]	; 0x24
   18278:	movw	r3, #6600	; 0x19c8
   1827c:	movt	r3, #5
   18280:	mov	r7, r9
   18284:	str	r3, [sp, #52]	; 0x34
   18288:	ldr	r3, [sp, #40]	; 0x28
   1828c:	ldr	r2, [r7, #8]
   18290:	ldr	r3, [r3, #44]	; 0x2c
   18294:	cmp	r2, #3
   18298:	and	r3, r3, #8
   1829c:	str	r3, [sp, #12]
   182a0:	beq	18334 <__assert_fail@plt+0x5d40>
   182a4:	ldr	r2, [sp, #16]
   182a8:	ldr	r3, [sp, #12]
   182ac:	cmp	r3, #0
   182b0:	bne	182fc <__assert_fail@plt+0x5d08>
   182b4:	ldr	r0, [r7, #156]	; 0x9c
   182b8:	bl	18220 <__assert_fail@plt+0x5c2c>
   182bc:	cmp	r0, #0
   182c0:	bne	18288 <__assert_fail@plt+0x5c94>
   182c4:	ldr	r0, [r7, #160]	; 0xa0
   182c8:	mov	r9, r7
   182cc:	bl	18220 <__assert_fail@plt+0x5c2c>
   182d0:	cmp	r0, #0
   182d4:	bne	18278 <__assert_fail@plt+0x5c84>
   182d8:	mov	r0, #0
   182dc:	add	sp, sp, #68	; 0x44
   182e0:	vpop	{d8}
   182e4:	ldrd	r4, [sp]
   182e8:	ldrd	r6, [sp, #8]
   182ec:	ldrd	r8, [sp, #16]
   182f0:	ldrd	sl, [sp, #24]
   182f4:	add	sp, sp, #32
   182f8:	pop	{pc}		; (ldr pc, [sp], #4)
   182fc:	ldr	r4, [sp, #36]	; 0x24
   18300:	movw	r1, #6832	; 0x1ab0
   18304:	movt	r1, #5
   18308:	ldr	r0, [r4]
   1830c:	bl	1233c <fprintf@plt>
   18310:	mov	r2, #0
   18314:	mov	r1, r7
   18318:	ldr	r0, [r4]
   1831c:	bl	17368 <__assert_fail@plt+0x4d74>
   18320:	ldr	r0, [r7, #156]	; 0x9c
   18324:	bl	18220 <__assert_fail@plt+0x5c2c>
   18328:	cmp	r0, #0
   1832c:	bne	18288 <__assert_fail@plt+0x5c94>
   18330:	b	182c4 <__assert_fail@plt+0x5cd0>
   18334:	ldr	r3, [r7, #156]	; 0x9c
   18338:	cmp	r3, #0
   1833c:	beq	1a18c <__assert_fail@plt+0x7b98>
   18340:	ldr	r1, [r7, #160]	; 0xa0
   18344:	cmp	r1, #0
   18348:	beq	1a1f0 <__assert_fail@plt+0x7bfc>
   1834c:	ldr	fp, [r3, #160]	; 0xa0
   18350:	cmp	fp, #0
   18354:	beq	1a194 <__assert_fail@plt+0x7ba0>
   18358:	movw	r3, #14048	; 0x36e0
   1835c:	movt	r3, #1
   18360:	str	r3, [sp, #48]	; 0x30
   18364:	ldrb	r3, [fp, #16]
   18368:	cmp	r3, #0
   1836c:	beq	1837c <__assert_fail@plt+0x5d88>
   18370:	movw	r2, #6536	; 0x1988
   18374:	movt	r2, #5
   18378:	b	182a8 <__assert_fail@plt+0x5cb4>
   1837c:	ldr	r3, [fp, #156]	; 0x9c
   18380:	cmp	r3, #0
   18384:	str	r3, [sp, #20]
   18388:	beq	183a4 <__assert_fail@plt+0x5db0>
   1838c:	ldrb	r3, [r3, #16]
   18390:	cmp	r3, #0
   18394:	beq	1a1a0 <__assert_fail@plt+0x7bac>
   18398:	movw	r2, #6536	; 0x1988
   1839c:	movt	r2, #5
   183a0:	b	182a8 <__assert_fail@plt+0x5cb4>
   183a4:	ldr	r3, [fp, #160]	; 0xa0
   183a8:	cmp	r3, #0
   183ac:	str	r3, [sp, #28]
   183b0:	beq	183cc <__assert_fail@plt+0x5dd8>
   183b4:	ldrb	r3, [r3, #16]
   183b8:	cmp	r3, #0
   183bc:	beq	1a220 <__assert_fail@plt+0x7c2c>
   183c0:	movw	r2, #6536	; 0x1988
   183c4:	movt	r2, #5
   183c8:	b	182a8 <__assert_fail@plt+0x5cb4>
   183cc:	ldrb	r3, [r1, #16]
   183d0:	cmp	r3, #0
   183d4:	beq	183e4 <__assert_fail@plt+0x5df0>
   183d8:	movw	r2, #6504	; 0x1968
   183dc:	movt	r2, #5
   183e0:	b	182a8 <__assert_fail@plt+0x5cb4>
   183e4:	ldr	r3, [r1, #156]	; 0x9c
   183e8:	cmp	r3, #0
   183ec:	str	r3, [sp, #24]
   183f0:	beq	1840c <__assert_fail@plt+0x5e18>
   183f4:	ldrb	r3, [r3, #16]
   183f8:	cmp	r3, #0
   183fc:	beq	1a1c8 <__assert_fail@plt+0x7bd4>
   18400:	movw	r2, #6504	; 0x1968
   18404:	movt	r2, #5
   18408:	b	182a8 <__assert_fail@plt+0x5cb4>
   1840c:	ldr	r3, [r1, #160]	; 0xa0
   18410:	cmp	r3, #0
   18414:	str	r3, [sp, #32]
   18418:	beq	18434 <__assert_fail@plt+0x5e40>
   1841c:	ldrb	r3, [r3, #16]
   18420:	cmp	r3, #0
   18424:	beq	1a1f8 <__assert_fail@plt+0x7c04>
   18428:	movw	r2, #6504	; 0x1968
   1842c:	movt	r2, #5
   18430:	b	182a8 <__assert_fail@plt+0x5cb4>
   18434:	ldr	r2, [sp, #20]
   18438:	cmp	r2, #0
   1843c:	beq	18ad4 <__assert_fail@plt+0x64e0>
   18440:	ldr	r4, [r2, #156]	; 0x9c
   18444:	mov	r3, r2
   18448:	cmp	r4, #0
   1844c:	beq	1876c <__assert_fail@plt+0x6178>
   18450:	ldr	r5, [r4, #156]	; 0x9c
   18454:	cmp	r5, #0
   18458:	beq	185d0 <__assert_fail@plt+0x5fdc>
   1845c:	ldr	r2, [r5, #156]	; 0x9c
   18460:	cmp	r2, #0
   18464:	beq	1850c <__assert_fail@plt+0x5f18>
   18468:	ldr	r6, [r2, #156]	; 0x9c
   1846c:	cmp	r6, #0
   18470:	beq	184b0 <__assert_fail@plt+0x5ebc>
   18474:	ldr	r0, [r6, #156]	; 0x9c
   18478:	cmp	r0, #0
   1847c:	moveq	r8, r0
   18480:	beq	1848c <__assert_fail@plt+0x5e98>
   18484:	bl	1693c <__assert_fail@plt+0x4348>
   18488:	mov	r8, r0
   1848c:	ldr	r0, [r6, #160]	; 0xa0
   18490:	cmp	r0, #0
   18494:	beq	1849c <__assert_fail@plt+0x5ea8>
   18498:	bl	1693c <__assert_fail@plt+0x4348>
   1849c:	ldr	r6, [r6, #24]
   184a0:	cmp	r8, r6
   184a4:	movcs	r6, r8
   184a8:	cmp	r6, r0
   184ac:	movcc	r6, r0
   184b0:	ldr	r8, [r2, #160]	; 0xa0
   184b4:	cmp	r8, #0
   184b8:	beq	184f8 <__assert_fail@plt+0x5f04>
   184bc:	ldr	r0, [r8, #156]	; 0x9c
   184c0:	cmp	r0, #0
   184c4:	moveq	r9, r0
   184c8:	beq	184d4 <__assert_fail@plt+0x5ee0>
   184cc:	bl	1693c <__assert_fail@plt+0x4348>
   184d0:	mov	r9, r0
   184d4:	ldr	r0, [r8, #160]	; 0xa0
   184d8:	cmp	r0, #0
   184dc:	beq	184e4 <__assert_fail@plt+0x5ef0>
   184e0:	bl	1693c <__assert_fail@plt+0x4348>
   184e4:	ldr	r8, [r8, #24]
   184e8:	cmp	r9, r8
   184ec:	movcs	r8, r9
   184f0:	cmp	r8, r0
   184f4:	movcc	r8, r0
   184f8:	ldr	r2, [r2, #24]
   184fc:	cmp	r6, r2
   18500:	movcs	r2, r6
   18504:	cmp	r2, r8
   18508:	movcc	r2, r8
   1850c:	ldr	r6, [r5, #160]	; 0xa0
   18510:	cmp	r6, #0
   18514:	beq	185bc <__assert_fail@plt+0x5fc8>
   18518:	ldr	r8, [r6, #156]	; 0x9c
   1851c:	cmp	r8, #0
   18520:	beq	18560 <__assert_fail@plt+0x5f6c>
   18524:	ldr	r0, [r8, #156]	; 0x9c
   18528:	cmp	r0, #0
   1852c:	moveq	r9, r0
   18530:	beq	1853c <__assert_fail@plt+0x5f48>
   18534:	bl	1693c <__assert_fail@plt+0x4348>
   18538:	mov	r9, r0
   1853c:	ldr	r0, [r8, #160]	; 0xa0
   18540:	cmp	r0, #0
   18544:	beq	1854c <__assert_fail@plt+0x5f58>
   18548:	bl	1693c <__assert_fail@plt+0x4348>
   1854c:	ldr	r8, [r8, #24]
   18550:	cmp	r9, r8
   18554:	movcs	r8, r9
   18558:	cmp	r8, r0
   1855c:	movcc	r8, r0
   18560:	ldr	r9, [r6, #160]	; 0xa0
   18564:	cmp	r9, #0
   18568:	beq	185a8 <__assert_fail@plt+0x5fb4>
   1856c:	ldr	r0, [r9, #156]	; 0x9c
   18570:	cmp	r0, #0
   18574:	moveq	sl, r0
   18578:	beq	18584 <__assert_fail@plt+0x5f90>
   1857c:	bl	1693c <__assert_fail@plt+0x4348>
   18580:	mov	sl, r0
   18584:	ldr	r0, [r9, #160]	; 0xa0
   18588:	cmp	r0, #0
   1858c:	beq	18594 <__assert_fail@plt+0x5fa0>
   18590:	bl	1693c <__assert_fail@plt+0x4348>
   18594:	ldr	r9, [r9, #24]
   18598:	cmp	sl, r9
   1859c:	movcs	r9, sl
   185a0:	cmp	r9, r0
   185a4:	movcc	r9, r0
   185a8:	ldr	r6, [r6, #24]
   185ac:	cmp	r8, r6
   185b0:	movcs	r6, r8
   185b4:	cmp	r6, r9
   185b8:	movcc	r6, r9
   185bc:	ldr	r5, [r5, #24]
   185c0:	cmp	r2, r5
   185c4:	movcs	r5, r2
   185c8:	cmp	r5, r6
   185cc:	movcc	r5, r6
   185d0:	ldr	r2, [r4, #160]	; 0xa0
   185d4:	cmp	r2, #0
   185d8:	beq	18758 <__assert_fail@plt+0x6164>
   185dc:	ldr	r6, [r2, #156]	; 0x9c
   185e0:	cmp	r6, #0
   185e4:	beq	1868c <__assert_fail@plt+0x6098>
   185e8:	ldr	r8, [r6, #156]	; 0x9c
   185ec:	cmp	r8, #0
   185f0:	beq	18630 <__assert_fail@plt+0x603c>
   185f4:	ldr	r0, [r8, #156]	; 0x9c
   185f8:	cmp	r0, #0
   185fc:	moveq	r9, r0
   18600:	beq	1860c <__assert_fail@plt+0x6018>
   18604:	bl	1693c <__assert_fail@plt+0x4348>
   18608:	mov	r9, r0
   1860c:	ldr	r0, [r8, #160]	; 0xa0
   18610:	cmp	r0, #0
   18614:	beq	1861c <__assert_fail@plt+0x6028>
   18618:	bl	1693c <__assert_fail@plt+0x4348>
   1861c:	ldr	r8, [r8, #24]
   18620:	cmp	r9, r8
   18624:	movcs	r8, r9
   18628:	cmp	r8, r0
   1862c:	movcc	r8, r0
   18630:	ldr	r9, [r6, #160]	; 0xa0
   18634:	cmp	r9, #0
   18638:	beq	18678 <__assert_fail@plt+0x6084>
   1863c:	ldr	r0, [r9, #156]	; 0x9c
   18640:	cmp	r0, #0
   18644:	moveq	sl, r0
   18648:	beq	18654 <__assert_fail@plt+0x6060>
   1864c:	bl	1693c <__assert_fail@plt+0x4348>
   18650:	mov	sl, r0
   18654:	ldr	r0, [r9, #160]	; 0xa0
   18658:	cmp	r0, #0
   1865c:	beq	18664 <__assert_fail@plt+0x6070>
   18660:	bl	1693c <__assert_fail@plt+0x4348>
   18664:	ldr	r9, [r9, #24]
   18668:	cmp	sl, r9
   1866c:	movcs	r9, sl
   18670:	cmp	r9, r0
   18674:	movcc	r9, r0
   18678:	ldr	r6, [r6, #24]
   1867c:	cmp	r8, r6
   18680:	movcs	r6, r8
   18684:	cmp	r6, r9
   18688:	movcc	r6, r9
   1868c:	ldr	r8, [r2, #160]	; 0xa0
   18690:	cmp	r8, #0
   18694:	beq	18744 <__assert_fail@plt+0x6150>
   18698:	ldr	r9, [r8, #156]	; 0x9c
   1869c:	cmp	r9, #0
   186a0:	beq	186e0 <__assert_fail@plt+0x60ec>
   186a4:	ldr	r0, [r9, #156]	; 0x9c
   186a8:	cmp	r0, #0
   186ac:	moveq	sl, r0
   186b0:	beq	186bc <__assert_fail@plt+0x60c8>
   186b4:	bl	1693c <__assert_fail@plt+0x4348>
   186b8:	mov	sl, r0
   186bc:	ldr	r0, [r9, #160]	; 0xa0
   186c0:	cmp	r0, #0
   186c4:	beq	186cc <__assert_fail@plt+0x60d8>
   186c8:	bl	1693c <__assert_fail@plt+0x4348>
   186cc:	ldr	r9, [r9, #24]
   186d0:	cmp	sl, r9
   186d4:	movcs	r9, sl
   186d8:	cmp	r9, r0
   186dc:	movcc	r9, r0
   186e0:	ldr	sl, [r8, #160]	; 0xa0
   186e4:	cmp	sl, #0
   186e8:	beq	18730 <__assert_fail@plt+0x613c>
   186ec:	ldr	r0, [sl, #156]	; 0x9c
   186f0:	cmp	r0, #0
   186f4:	moveq	r3, r0
   186f8:	beq	18704 <__assert_fail@plt+0x6110>
   186fc:	bl	1693c <__assert_fail@plt+0x4348>
   18700:	mov	r3, r0
   18704:	ldr	r0, [sl, #160]	; 0xa0
   18708:	cmp	r0, #0
   1870c:	beq	1871c <__assert_fail@plt+0x6128>
   18710:	str	r3, [sp, #56]	; 0x38
   18714:	bl	1693c <__assert_fail@plt+0x4348>
   18718:	ldr	r3, [sp, #56]	; 0x38
   1871c:	ldr	sl, [sl, #24]
   18720:	cmp	r3, sl
   18724:	movcs	sl, r3
   18728:	cmp	sl, r0
   1872c:	movcc	sl, r0
   18730:	ldr	r8, [r8, #24]
   18734:	cmp	r9, r8
   18738:	movcs	r8, r9
   1873c:	cmp	r8, sl
   18740:	movcc	r8, sl
   18744:	ldr	r2, [r2, #24]
   18748:	cmp	r6, r2
   1874c:	movcs	r2, r6
   18750:	cmp	r2, r8
   18754:	movcc	r2, r8
   18758:	ldr	r4, [r4, #24]
   1875c:	cmp	r5, r4
   18760:	movcs	r4, r5
   18764:	cmp	r4, r2
   18768:	movcc	r4, r2
   1876c:	ldr	r3, [sp, #20]
   18770:	ldr	r2, [r3, #160]	; 0xa0
   18774:	cmp	r2, #0
   18778:	beq	18abc <__assert_fail@plt+0x64c8>
   1877c:	ldr	r5, [r2, #156]	; 0x9c
   18780:	cmp	r5, #0
   18784:	beq	18904 <__assert_fail@plt+0x6310>
   18788:	ldr	r6, [r5, #156]	; 0x9c
   1878c:	cmp	r6, #0
   18790:	beq	18838 <__assert_fail@plt+0x6244>
   18794:	ldr	r8, [r6, #156]	; 0x9c
   18798:	cmp	r8, #0
   1879c:	beq	187dc <__assert_fail@plt+0x61e8>
   187a0:	ldr	r0, [r8, #156]	; 0x9c
   187a4:	cmp	r0, #0
   187a8:	moveq	r9, r0
   187ac:	beq	187b8 <__assert_fail@plt+0x61c4>
   187b0:	bl	1693c <__assert_fail@plt+0x4348>
   187b4:	mov	r9, r0
   187b8:	ldr	r0, [r8, #160]	; 0xa0
   187bc:	cmp	r0, #0
   187c0:	beq	187c8 <__assert_fail@plt+0x61d4>
   187c4:	bl	1693c <__assert_fail@plt+0x4348>
   187c8:	ldr	r8, [r8, #24]
   187cc:	cmp	r9, r8
   187d0:	movcs	r8, r9
   187d4:	cmp	r8, r0
   187d8:	movcc	r8, r0
   187dc:	ldr	r9, [r6, #160]	; 0xa0
   187e0:	cmp	r9, #0
   187e4:	beq	18824 <__assert_fail@plt+0x6230>
   187e8:	ldr	r0, [r9, #156]	; 0x9c
   187ec:	cmp	r0, #0
   187f0:	moveq	sl, r0
   187f4:	beq	18800 <__assert_fail@plt+0x620c>
   187f8:	bl	1693c <__assert_fail@plt+0x4348>
   187fc:	mov	sl, r0
   18800:	ldr	r0, [r9, #160]	; 0xa0
   18804:	cmp	r0, #0
   18808:	beq	18810 <__assert_fail@plt+0x621c>
   1880c:	bl	1693c <__assert_fail@plt+0x4348>
   18810:	ldr	r9, [r9, #24]
   18814:	cmp	sl, r9
   18818:	movcs	r9, sl
   1881c:	cmp	r9, r0
   18820:	movcc	r9, r0
   18824:	ldr	r6, [r6, #24]
   18828:	cmp	r8, r6
   1882c:	movcs	r6, r8
   18830:	cmp	r6, r9
   18834:	movcc	r6, r9
   18838:	ldr	r8, [r5, #160]	; 0xa0
   1883c:	cmp	r8, #0
   18840:	beq	188f0 <__assert_fail@plt+0x62fc>
   18844:	ldr	r9, [r8, #156]	; 0x9c
   18848:	cmp	r9, #0
   1884c:	beq	1888c <__assert_fail@plt+0x6298>
   18850:	ldr	r0, [r9, #156]	; 0x9c
   18854:	cmp	r0, #0
   18858:	moveq	sl, r0
   1885c:	beq	18868 <__assert_fail@plt+0x6274>
   18860:	bl	1693c <__assert_fail@plt+0x4348>
   18864:	mov	sl, r0
   18868:	ldr	r0, [r9, #160]	; 0xa0
   1886c:	cmp	r0, #0
   18870:	beq	18878 <__assert_fail@plt+0x6284>
   18874:	bl	1693c <__assert_fail@plt+0x4348>
   18878:	ldr	r9, [r9, #24]
   1887c:	cmp	sl, r9
   18880:	movcs	r9, sl
   18884:	cmp	r9, r0
   18888:	movcc	r9, r0
   1888c:	ldr	sl, [r8, #160]	; 0xa0
   18890:	cmp	sl, #0
   18894:	beq	188dc <__assert_fail@plt+0x62e8>
   18898:	ldr	r0, [sl, #156]	; 0x9c
   1889c:	cmp	r0, #0
   188a0:	moveq	r3, r0
   188a4:	beq	188b0 <__assert_fail@plt+0x62bc>
   188a8:	bl	1693c <__assert_fail@plt+0x4348>
   188ac:	mov	r3, r0
   188b0:	ldr	r0, [sl, #160]	; 0xa0
   188b4:	cmp	r0, #0
   188b8:	beq	188c8 <__assert_fail@plt+0x62d4>
   188bc:	str	r3, [sp, #56]	; 0x38
   188c0:	bl	1693c <__assert_fail@plt+0x4348>
   188c4:	ldr	r3, [sp, #56]	; 0x38
   188c8:	ldr	sl, [sl, #24]
   188cc:	cmp	r3, sl
   188d0:	movcs	sl, r3
   188d4:	cmp	sl, r0
   188d8:	movcc	sl, r0
   188dc:	ldr	r8, [r8, #24]
   188e0:	cmp	r9, r8
   188e4:	movcs	r8, r9
   188e8:	cmp	r8, sl
   188ec:	movcc	r8, sl
   188f0:	ldr	r5, [r5, #24]
   188f4:	cmp	r6, r5
   188f8:	movcs	r5, r6
   188fc:	cmp	r5, r8
   18900:	movcc	r5, r8
   18904:	ldr	r6, [r2, #160]	; 0xa0
   18908:	cmp	r6, #0
   1890c:	beq	18aa8 <__assert_fail@plt+0x64b4>
   18910:	ldr	r8, [r6, #156]	; 0x9c
   18914:	cmp	r8, #0
   18918:	beq	189c8 <__assert_fail@plt+0x63d4>
   1891c:	ldr	r9, [r8, #156]	; 0x9c
   18920:	cmp	r9, #0
   18924:	beq	18964 <__assert_fail@plt+0x6370>
   18928:	ldr	r0, [r9, #156]	; 0x9c
   1892c:	cmp	r0, #0
   18930:	moveq	sl, r0
   18934:	beq	18940 <__assert_fail@plt+0x634c>
   18938:	bl	1693c <__assert_fail@plt+0x4348>
   1893c:	mov	sl, r0
   18940:	ldr	r0, [r9, #160]	; 0xa0
   18944:	cmp	r0, #0
   18948:	beq	18950 <__assert_fail@plt+0x635c>
   1894c:	bl	1693c <__assert_fail@plt+0x4348>
   18950:	ldr	r9, [r9, #24]
   18954:	cmp	sl, r9
   18958:	movcs	r9, sl
   1895c:	cmp	r9, r0
   18960:	movcc	r9, r0
   18964:	ldr	sl, [r8, #160]	; 0xa0
   18968:	cmp	sl, #0
   1896c:	beq	189b4 <__assert_fail@plt+0x63c0>
   18970:	ldr	r0, [sl, #156]	; 0x9c
   18974:	cmp	r0, #0
   18978:	moveq	r3, r0
   1897c:	beq	18988 <__assert_fail@plt+0x6394>
   18980:	bl	1693c <__assert_fail@plt+0x4348>
   18984:	mov	r3, r0
   18988:	ldr	r0, [sl, #160]	; 0xa0
   1898c:	cmp	r0, #0
   18990:	beq	189a0 <__assert_fail@plt+0x63ac>
   18994:	str	r3, [sp, #56]	; 0x38
   18998:	bl	1693c <__assert_fail@plt+0x4348>
   1899c:	ldr	r3, [sp, #56]	; 0x38
   189a0:	ldr	sl, [sl, #24]
   189a4:	cmp	r3, sl
   189a8:	movcs	sl, r3
   189ac:	cmp	sl, r0
   189b0:	movcc	sl, r0
   189b4:	ldr	r8, [r8, #24]
   189b8:	cmp	r9, r8
   189bc:	movcs	r8, r9
   189c0:	cmp	r8, sl
   189c4:	movcc	r8, sl
   189c8:	ldr	r9, [r6, #160]	; 0xa0
   189cc:	cmp	r9, #0
   189d0:	beq	18a94 <__assert_fail@plt+0x64a0>
   189d4:	ldr	sl, [r9, #156]	; 0x9c
   189d8:	cmp	sl, #0
   189dc:	beq	18a24 <__assert_fail@plt+0x6430>
   189e0:	ldr	r0, [sl, #156]	; 0x9c
   189e4:	cmp	r0, #0
   189e8:	moveq	r3, r0
   189ec:	beq	189f8 <__assert_fail@plt+0x6404>
   189f0:	bl	1693c <__assert_fail@plt+0x4348>
   189f4:	mov	r3, r0
   189f8:	ldr	r0, [sl, #160]	; 0xa0
   189fc:	cmp	r0, #0
   18a00:	beq	18a10 <__assert_fail@plt+0x641c>
   18a04:	str	r3, [sp, #56]	; 0x38
   18a08:	bl	1693c <__assert_fail@plt+0x4348>
   18a0c:	ldr	r3, [sp, #56]	; 0x38
   18a10:	ldr	sl, [sl, #24]
   18a14:	cmp	r3, sl
   18a18:	movcs	sl, r3
   18a1c:	cmp	sl, r0
   18a20:	movcc	sl, r0
   18a24:	ldr	r3, [r9, #160]	; 0xa0
   18a28:	cmp	r3, #0
   18a2c:	beq	18a80 <__assert_fail@plt+0x648c>
   18a30:	ldr	r0, [r3, #156]	; 0x9c
   18a34:	cmp	r0, #0
   18a38:	streq	r0, [sp, #56]	; 0x38
   18a3c:	beq	18a50 <__assert_fail@plt+0x645c>
   18a40:	str	r3, [sp, #60]	; 0x3c
   18a44:	bl	1693c <__assert_fail@plt+0x4348>
   18a48:	ldr	r3, [sp, #60]	; 0x3c
   18a4c:	str	r0, [sp, #56]	; 0x38
   18a50:	ldr	r0, [r3, #160]	; 0xa0
   18a54:	cmp	r0, #0
   18a58:	beq	18a68 <__assert_fail@plt+0x6474>
   18a5c:	str	r3, [sp, #60]	; 0x3c
   18a60:	bl	1693c <__assert_fail@plt+0x4348>
   18a64:	ldr	r3, [sp, #60]	; 0x3c
   18a68:	ldr	r3, [r3, #24]
   18a6c:	ldr	ip, [sp, #56]	; 0x38
   18a70:	cmp	ip, r3
   18a74:	movcs	r3, ip
   18a78:	cmp	r3, r0
   18a7c:	movcc	r3, r0
   18a80:	ldr	r9, [r9, #24]
   18a84:	cmp	sl, r9
   18a88:	movcs	r9, sl
   18a8c:	cmp	r9, r3
   18a90:	movcc	r9, r3
   18a94:	ldr	r6, [r6, #24]
   18a98:	cmp	r8, r6
   18a9c:	movcs	r6, r8
   18aa0:	cmp	r6, r9
   18aa4:	movcc	r6, r9
   18aa8:	ldr	r2, [r2, #24]
   18aac:	cmp	r5, r2
   18ab0:	movcs	r2, r5
   18ab4:	cmp	r2, r6
   18ab8:	movcc	r2, r6
   18abc:	ldr	r3, [sp, #20]
   18ac0:	ldr	r3, [r3, #24]
   18ac4:	cmp	r4, r3
   18ac8:	movcc	r4, r3
   18acc:	cmp	r4, r2
   18ad0:	movcs	r2, r4
   18ad4:	ldr	r3, [sp, #28]
   18ad8:	cmp	r3, #0
   18adc:	moveq	r4, r3
   18ae0:	beq	19214 <__assert_fail@plt+0x6c20>
   18ae4:	ldr	r5, [r3, #156]	; 0x9c
   18ae8:	cmp	r5, #0
   18aec:	moveq	r3, r5
   18af0:	beq	18e38 <__assert_fail@plt+0x6844>
   18af4:	ldr	r4, [r5, #156]	; 0x9c
   18af8:	cmp	r4, #0
   18afc:	beq	18c7c <__assert_fail@plt+0x6688>
   18b00:	ldr	r6, [r4, #156]	; 0x9c
   18b04:	cmp	r6, #0
   18b08:	beq	18bb0 <__assert_fail@plt+0x65bc>
   18b0c:	ldr	r8, [r6, #156]	; 0x9c
   18b10:	cmp	r8, #0
   18b14:	beq	18b54 <__assert_fail@plt+0x6560>
   18b18:	ldr	r0, [r8, #156]	; 0x9c
   18b1c:	cmp	r0, #0
   18b20:	moveq	r9, r0
   18b24:	beq	18b30 <__assert_fail@plt+0x653c>
   18b28:	bl	1693c <__assert_fail@plt+0x4348>
   18b2c:	mov	r9, r0
   18b30:	ldr	r0, [r8, #160]	; 0xa0
   18b34:	cmp	r0, #0
   18b38:	beq	18b40 <__assert_fail@plt+0x654c>
   18b3c:	bl	1693c <__assert_fail@plt+0x4348>
   18b40:	ldr	r8, [r8, #24]
   18b44:	cmp	r9, r8
   18b48:	movcs	r8, r9
   18b4c:	cmp	r8, r0
   18b50:	movcc	r8, r0
   18b54:	ldr	r9, [r6, #160]	; 0xa0
   18b58:	cmp	r9, #0
   18b5c:	beq	18b9c <__assert_fail@plt+0x65a8>
   18b60:	ldr	r0, [r9, #156]	; 0x9c
   18b64:	cmp	r0, #0
   18b68:	moveq	sl, r0
   18b6c:	beq	18b78 <__assert_fail@plt+0x6584>
   18b70:	bl	1693c <__assert_fail@plt+0x4348>
   18b74:	mov	sl, r0
   18b78:	ldr	r0, [r9, #160]	; 0xa0
   18b7c:	cmp	r0, #0
   18b80:	beq	18b88 <__assert_fail@plt+0x6594>
   18b84:	bl	1693c <__assert_fail@plt+0x4348>
   18b88:	ldr	r9, [r9, #24]
   18b8c:	cmp	sl, r9
   18b90:	movcs	r9, sl
   18b94:	cmp	r9, r0
   18b98:	movcc	r9, r0
   18b9c:	ldr	r6, [r6, #24]
   18ba0:	cmp	r8, r6
   18ba4:	movcs	r6, r8
   18ba8:	cmp	r6, r9
   18bac:	movcc	r6, r9
   18bb0:	ldr	r8, [r4, #160]	; 0xa0
   18bb4:	cmp	r8, #0
   18bb8:	beq	18c68 <__assert_fail@plt+0x6674>
   18bbc:	ldr	r9, [r8, #156]	; 0x9c
   18bc0:	cmp	r9, #0
   18bc4:	beq	18c04 <__assert_fail@plt+0x6610>
   18bc8:	ldr	r0, [r9, #156]	; 0x9c
   18bcc:	cmp	r0, #0
   18bd0:	moveq	sl, r0
   18bd4:	beq	18be0 <__assert_fail@plt+0x65ec>
   18bd8:	bl	1693c <__assert_fail@plt+0x4348>
   18bdc:	mov	sl, r0
   18be0:	ldr	r0, [r9, #160]	; 0xa0
   18be4:	cmp	r0, #0
   18be8:	beq	18bf0 <__assert_fail@plt+0x65fc>
   18bec:	bl	1693c <__assert_fail@plt+0x4348>
   18bf0:	ldr	r9, [r9, #24]
   18bf4:	cmp	sl, r9
   18bf8:	movcs	r9, sl
   18bfc:	cmp	r9, r0
   18c00:	movcc	r9, r0
   18c04:	ldr	sl, [r8, #160]	; 0xa0
   18c08:	cmp	sl, #0
   18c0c:	beq	18c54 <__assert_fail@plt+0x6660>
   18c10:	ldr	r0, [sl, #156]	; 0x9c
   18c14:	cmp	r0, #0
   18c18:	moveq	r3, r0
   18c1c:	beq	18c28 <__assert_fail@plt+0x6634>
   18c20:	bl	1693c <__assert_fail@plt+0x4348>
   18c24:	mov	r3, r0
   18c28:	ldr	r0, [sl, #160]	; 0xa0
   18c2c:	cmp	r0, #0
   18c30:	beq	18c40 <__assert_fail@plt+0x664c>
   18c34:	str	r3, [sp, #20]
   18c38:	bl	1693c <__assert_fail@plt+0x4348>
   18c3c:	ldr	r3, [sp, #20]
   18c40:	ldr	sl, [sl, #24]
   18c44:	cmp	r3, sl
   18c48:	movcs	sl, r3
   18c4c:	cmp	sl, r0
   18c50:	movcc	sl, r0
   18c54:	ldr	r8, [r8, #24]
   18c58:	cmp	r9, r8
   18c5c:	movcs	r8, r9
   18c60:	cmp	r8, sl
   18c64:	movcc	r8, sl
   18c68:	ldr	r4, [r4, #24]
   18c6c:	cmp	r6, r4
   18c70:	movcs	r4, r6
   18c74:	cmp	r4, r8
   18c78:	movcc	r4, r8
   18c7c:	ldr	r6, [r5, #160]	; 0xa0
   18c80:	cmp	r6, #0
   18c84:	beq	18e20 <__assert_fail@plt+0x682c>
   18c88:	ldr	r8, [r6, #156]	; 0x9c
   18c8c:	cmp	r8, #0
   18c90:	beq	18d40 <__assert_fail@plt+0x674c>
   18c94:	ldr	r9, [r8, #156]	; 0x9c
   18c98:	cmp	r9, #0
   18c9c:	beq	18cdc <__assert_fail@plt+0x66e8>
   18ca0:	ldr	r0, [r9, #156]	; 0x9c
   18ca4:	cmp	r0, #0
   18ca8:	moveq	sl, r0
   18cac:	beq	18cb8 <__assert_fail@plt+0x66c4>
   18cb0:	bl	1693c <__assert_fail@plt+0x4348>
   18cb4:	mov	sl, r0
   18cb8:	ldr	r0, [r9, #160]	; 0xa0
   18cbc:	cmp	r0, #0
   18cc0:	beq	18cc8 <__assert_fail@plt+0x66d4>
   18cc4:	bl	1693c <__assert_fail@plt+0x4348>
   18cc8:	ldr	r9, [r9, #24]
   18ccc:	cmp	sl, r9
   18cd0:	movcs	r9, sl
   18cd4:	cmp	r9, r0
   18cd8:	movcc	r9, r0
   18cdc:	ldr	sl, [r8, #160]	; 0xa0
   18ce0:	cmp	sl, #0
   18ce4:	beq	18d2c <__assert_fail@plt+0x6738>
   18ce8:	ldr	r0, [sl, #156]	; 0x9c
   18cec:	cmp	r0, #0
   18cf0:	moveq	r3, r0
   18cf4:	beq	18d00 <__assert_fail@plt+0x670c>
   18cf8:	bl	1693c <__assert_fail@plt+0x4348>
   18cfc:	mov	r3, r0
   18d00:	ldr	r0, [sl, #160]	; 0xa0
   18d04:	cmp	r0, #0
   18d08:	beq	18d18 <__assert_fail@plt+0x6724>
   18d0c:	str	r3, [sp, #20]
   18d10:	bl	1693c <__assert_fail@plt+0x4348>
   18d14:	ldr	r3, [sp, #20]
   18d18:	ldr	sl, [sl, #24]
   18d1c:	cmp	r3, sl
   18d20:	movcs	sl, r3
   18d24:	cmp	sl, r0
   18d28:	movcc	sl, r0
   18d2c:	ldr	r8, [r8, #24]
   18d30:	cmp	r9, r8
   18d34:	movcs	r8, r9
   18d38:	cmp	r8, sl
   18d3c:	movcc	r8, sl
   18d40:	ldr	r9, [r6, #160]	; 0xa0
   18d44:	cmp	r9, #0
   18d48:	beq	18e0c <__assert_fail@plt+0x6818>
   18d4c:	ldr	sl, [r9, #156]	; 0x9c
   18d50:	cmp	sl, #0
   18d54:	beq	18d9c <__assert_fail@plt+0x67a8>
   18d58:	ldr	r0, [sl, #156]	; 0x9c
   18d5c:	cmp	r0, #0
   18d60:	moveq	r3, r0
   18d64:	beq	18d70 <__assert_fail@plt+0x677c>
   18d68:	bl	1693c <__assert_fail@plt+0x4348>
   18d6c:	mov	r3, r0
   18d70:	ldr	r0, [sl, #160]	; 0xa0
   18d74:	cmp	r0, #0
   18d78:	beq	18d88 <__assert_fail@plt+0x6794>
   18d7c:	str	r3, [sp, #20]
   18d80:	bl	1693c <__assert_fail@plt+0x4348>
   18d84:	ldr	r3, [sp, #20]
   18d88:	ldr	sl, [sl, #24]
   18d8c:	cmp	r3, sl
   18d90:	movcs	sl, r3
   18d94:	cmp	sl, r0
   18d98:	movcc	sl, r0
   18d9c:	ldr	r3, [r9, #160]	; 0xa0
   18da0:	cmp	r3, #0
   18da4:	beq	18df8 <__assert_fail@plt+0x6804>
   18da8:	ldr	r0, [r3, #156]	; 0x9c
   18dac:	cmp	r0, #0
   18db0:	streq	r0, [sp, #20]
   18db4:	beq	18dc8 <__assert_fail@plt+0x67d4>
   18db8:	str	r3, [sp, #56]	; 0x38
   18dbc:	bl	1693c <__assert_fail@plt+0x4348>
   18dc0:	ldr	r3, [sp, #56]	; 0x38
   18dc4:	str	r0, [sp, #20]
   18dc8:	ldr	r0, [r3, #160]	; 0xa0
   18dcc:	cmp	r0, #0
   18dd0:	beq	18de0 <__assert_fail@plt+0x67ec>
   18dd4:	str	r3, [sp, #56]	; 0x38
   18dd8:	bl	1693c <__assert_fail@plt+0x4348>
   18ddc:	ldr	r3, [sp, #56]	; 0x38
   18de0:	ldr	ip, [sp, #20]
   18de4:	ldr	r3, [r3, #24]
   18de8:	cmp	ip, r3
   18dec:	movcs	r3, ip
   18df0:	cmp	r3, r0
   18df4:	movcc	r3, r0
   18df8:	ldr	r9, [r9, #24]
   18dfc:	cmp	sl, r9
   18e00:	movcs	r9, sl
   18e04:	cmp	r9, r3
   18e08:	movcc	r9, r3
   18e0c:	ldr	r6, [r6, #24]
   18e10:	cmp	r8, r6
   18e14:	movcs	r6, r8
   18e18:	cmp	r6, r9
   18e1c:	movcc	r6, r9
   18e20:	ldr	r3, [r5, #24]
   18e24:	cmp	r4, r3
   18e28:	movcc	r4, r3
   18e2c:	cmp	r4, r6
   18e30:	movcs	r3, r4
   18e34:	movcc	r3, r6
   18e38:	ldr	r0, [sp, #28]
   18e3c:	ldr	r4, [r0, #160]	; 0xa0
   18e40:	cmp	r4, #0
   18e44:	beq	191fc <__assert_fail@plt+0x6c08>
   18e48:	ldr	r5, [r4, #156]	; 0x9c
   18e4c:	cmp	r5, #0
   18e50:	beq	1900c <__assert_fail@plt+0x6a18>
   18e54:	ldr	r6, [r5, #156]	; 0x9c
   18e58:	cmp	r6, #0
   18e5c:	beq	18f24 <__assert_fail@plt+0x6930>
   18e60:	ldr	r8, [r6, #156]	; 0x9c
   18e64:	cmp	r8, #0
   18e68:	beq	18eb8 <__assert_fail@plt+0x68c4>
   18e6c:	ldr	r0, [r8, #156]	; 0x9c
   18e70:	cmp	r0, #0
   18e74:	moveq	r9, r0
   18e78:	beq	18e8c <__assert_fail@plt+0x6898>
   18e7c:	str	r3, [sp, #20]
   18e80:	bl	1693c <__assert_fail@plt+0x4348>
   18e84:	ldr	r3, [sp, #20]
   18e88:	mov	r9, r0
   18e8c:	ldr	r0, [r8, #160]	; 0xa0
   18e90:	cmp	r0, #0
   18e94:	beq	18ea4 <__assert_fail@plt+0x68b0>
   18e98:	str	r3, [sp, #20]
   18e9c:	bl	1693c <__assert_fail@plt+0x4348>
   18ea0:	ldr	r3, [sp, #20]
   18ea4:	ldr	r8, [r8, #24]
   18ea8:	cmp	r9, r8
   18eac:	movcs	r8, r9
   18eb0:	cmp	r8, r0
   18eb4:	movcc	r8, r0
   18eb8:	ldr	r9, [r6, #160]	; 0xa0
   18ebc:	cmp	r9, #0
   18ec0:	beq	18f10 <__assert_fail@plt+0x691c>
   18ec4:	ldr	r0, [r9, #156]	; 0x9c
   18ec8:	cmp	r0, #0
   18ecc:	moveq	sl, r0
   18ed0:	beq	18ee4 <__assert_fail@plt+0x68f0>
   18ed4:	str	r3, [sp, #20]
   18ed8:	bl	1693c <__assert_fail@plt+0x4348>
   18edc:	ldr	r3, [sp, #20]
   18ee0:	mov	sl, r0
   18ee4:	ldr	r0, [r9, #160]	; 0xa0
   18ee8:	cmp	r0, #0
   18eec:	beq	18efc <__assert_fail@plt+0x6908>
   18ef0:	str	r3, [sp, #20]
   18ef4:	bl	1693c <__assert_fail@plt+0x4348>
   18ef8:	ldr	r3, [sp, #20]
   18efc:	ldr	r9, [r9, #24]
   18f00:	cmp	sl, r9
   18f04:	movcs	r9, sl
   18f08:	cmp	r9, r0
   18f0c:	movcc	r9, r0
   18f10:	ldr	r6, [r6, #24]
   18f14:	cmp	r8, r6
   18f18:	movcs	r6, r8
   18f1c:	cmp	r6, r9
   18f20:	movcc	r6, r9
   18f24:	ldr	r8, [r5, #160]	; 0xa0
   18f28:	cmp	r8, #0
   18f2c:	beq	18ff8 <__assert_fail@plt+0x6a04>
   18f30:	ldr	r9, [r8, #156]	; 0x9c
   18f34:	cmp	r9, #0
   18f38:	beq	18f88 <__assert_fail@plt+0x6994>
   18f3c:	ldr	r0, [r9, #156]	; 0x9c
   18f40:	cmp	r0, #0
   18f44:	moveq	sl, r0
   18f48:	beq	18f5c <__assert_fail@plt+0x6968>
   18f4c:	str	r3, [sp, #20]
   18f50:	bl	1693c <__assert_fail@plt+0x4348>
   18f54:	ldr	r3, [sp, #20]
   18f58:	mov	sl, r0
   18f5c:	ldr	r0, [r9, #160]	; 0xa0
   18f60:	cmp	r0, #0
   18f64:	beq	18f74 <__assert_fail@plt+0x6980>
   18f68:	str	r3, [sp, #20]
   18f6c:	bl	1693c <__assert_fail@plt+0x4348>
   18f70:	ldr	r3, [sp, #20]
   18f74:	ldr	r9, [r9, #24]
   18f78:	cmp	sl, r9
   18f7c:	movcs	r9, sl
   18f80:	cmp	r9, r0
   18f84:	movcc	r9, r0
   18f88:	ldr	sl, [r8, #160]	; 0xa0
   18f8c:	cmp	sl, #0
   18f90:	beq	18fe4 <__assert_fail@plt+0x69f0>
   18f94:	ldr	r0, [sl, #156]	; 0x9c
   18f98:	cmp	r0, #0
   18f9c:	streq	r0, [sp, #20]
   18fa0:	beq	18fb4 <__assert_fail@plt+0x69c0>
   18fa4:	str	r3, [sp, #56]	; 0x38
   18fa8:	bl	1693c <__assert_fail@plt+0x4348>
   18fac:	ldr	r3, [sp, #56]	; 0x38
   18fb0:	str	r0, [sp, #20]
   18fb4:	ldr	r0, [sl, #160]	; 0xa0
   18fb8:	cmp	r0, #0
   18fbc:	beq	18fcc <__assert_fail@plt+0x69d8>
   18fc0:	str	r3, [sp, #56]	; 0x38
   18fc4:	bl	1693c <__assert_fail@plt+0x4348>
   18fc8:	ldr	r3, [sp, #56]	; 0x38
   18fcc:	ldr	ip, [sp, #20]
   18fd0:	ldr	sl, [sl, #24]
   18fd4:	cmp	ip, sl
   18fd8:	movcs	sl, ip
   18fdc:	cmp	sl, r0
   18fe0:	movcc	sl, r0
   18fe4:	ldr	r8, [r8, #24]
   18fe8:	cmp	r9, r8
   18fec:	movcs	r8, r9
   18ff0:	cmp	r8, sl
   18ff4:	movcc	r8, sl
   18ff8:	ldr	r5, [r5, #24]
   18ffc:	cmp	r6, r5
   19000:	movcs	r5, r6
   19004:	cmp	r5, r8
   19008:	movcc	r5, r8
   1900c:	ldr	r6, [r4, #160]	; 0xa0
   19010:	cmp	r6, #0
   19014:	beq	191e8 <__assert_fail@plt+0x6bf4>
   19018:	ldr	r8, [r6, #156]	; 0x9c
   1901c:	cmp	r8, #0
   19020:	beq	190ec <__assert_fail@plt+0x6af8>
   19024:	ldr	r9, [r8, #156]	; 0x9c
   19028:	cmp	r9, #0
   1902c:	beq	1907c <__assert_fail@plt+0x6a88>
   19030:	ldr	r0, [r9, #156]	; 0x9c
   19034:	cmp	r0, #0
   19038:	moveq	sl, r0
   1903c:	beq	19050 <__assert_fail@plt+0x6a5c>
   19040:	str	r3, [sp, #20]
   19044:	bl	1693c <__assert_fail@plt+0x4348>
   19048:	ldr	r3, [sp, #20]
   1904c:	mov	sl, r0
   19050:	ldr	r0, [r9, #160]	; 0xa0
   19054:	cmp	r0, #0
   19058:	beq	19068 <__assert_fail@plt+0x6a74>
   1905c:	str	r3, [sp, #20]
   19060:	bl	1693c <__assert_fail@plt+0x4348>
   19064:	ldr	r3, [sp, #20]
   19068:	ldr	r9, [r9, #24]
   1906c:	cmp	sl, r9
   19070:	movcs	r9, sl
   19074:	cmp	r9, r0
   19078:	movcc	r9, r0
   1907c:	ldr	sl, [r8, #160]	; 0xa0
   19080:	cmp	sl, #0
   19084:	beq	190d8 <__assert_fail@plt+0x6ae4>
   19088:	ldr	r0, [sl, #156]	; 0x9c
   1908c:	cmp	r0, #0
   19090:	streq	r0, [sp, #20]
   19094:	beq	190a8 <__assert_fail@plt+0x6ab4>
   19098:	str	r3, [sp, #56]	; 0x38
   1909c:	bl	1693c <__assert_fail@plt+0x4348>
   190a0:	ldr	r3, [sp, #56]	; 0x38
   190a4:	str	r0, [sp, #20]
   190a8:	ldr	r0, [sl, #160]	; 0xa0
   190ac:	cmp	r0, #0
   190b0:	beq	190c0 <__assert_fail@plt+0x6acc>
   190b4:	str	r3, [sp, #56]	; 0x38
   190b8:	bl	1693c <__assert_fail@plt+0x4348>
   190bc:	ldr	r3, [sp, #56]	; 0x38
   190c0:	ldr	ip, [sp, #20]
   190c4:	ldr	sl, [sl, #24]
   190c8:	cmp	ip, sl
   190cc:	movcs	sl, ip
   190d0:	cmp	sl, r0
   190d4:	movcc	sl, r0
   190d8:	ldr	r8, [r8, #24]
   190dc:	cmp	r9, r8
   190e0:	movcs	r8, r9
   190e4:	cmp	r8, sl
   190e8:	movcc	r8, sl
   190ec:	ldr	r9, [r6, #160]	; 0xa0
   190f0:	cmp	r9, #0
   190f4:	beq	191d4 <__assert_fail@plt+0x6be0>
   190f8:	ldr	sl, [r9, #156]	; 0x9c
   190fc:	cmp	sl, #0
   19100:	streq	sl, [sp, #20]
   19104:	beq	1915c <__assert_fail@plt+0x6b68>
   19108:	ldr	r0, [sl, #156]	; 0x9c
   1910c:	cmp	r0, #0
   19110:	streq	r0, [sp, #20]
   19114:	beq	19128 <__assert_fail@plt+0x6b34>
   19118:	str	r3, [sp, #56]	; 0x38
   1911c:	bl	1693c <__assert_fail@plt+0x4348>
   19120:	ldr	r3, [sp, #56]	; 0x38
   19124:	str	r0, [sp, #20]
   19128:	ldr	r0, [sl, #160]	; 0xa0
   1912c:	cmp	r0, #0
   19130:	beq	19140 <__assert_fail@plt+0x6b4c>
   19134:	str	r3, [sp, #56]	; 0x38
   19138:	bl	1693c <__assert_fail@plt+0x4348>
   1913c:	ldr	r3, [sp, #56]	; 0x38
   19140:	ldr	ip, [sp, #20]
   19144:	ldr	sl, [sl, #24]
   19148:	cmp	ip, sl
   1914c:	movcs	sl, ip
   19150:	cmp	sl, r0
   19154:	movcs	r0, sl
   19158:	str	r0, [sp, #20]
   1915c:	ldr	sl, [r9, #160]	; 0xa0
   19160:	cmp	sl, #0
   19164:	moveq	r0, sl
   19168:	beq	191bc <__assert_fail@plt+0x6bc8>
   1916c:	ldr	r0, [sl, #156]	; 0x9c
   19170:	cmp	r0, #0
   19174:	streq	r0, [sp, #56]	; 0x38
   19178:	beq	1918c <__assert_fail@plt+0x6b98>
   1917c:	str	r3, [sp, #60]	; 0x3c
   19180:	bl	1693c <__assert_fail@plt+0x4348>
   19184:	ldr	r3, [sp, #60]	; 0x3c
   19188:	str	r0, [sp, #56]	; 0x38
   1918c:	ldr	r0, [sl, #160]	; 0xa0
   19190:	cmp	r0, #0
   19194:	beq	191a4 <__assert_fail@plt+0x6bb0>
   19198:	str	r3, [sp, #60]	; 0x3c
   1919c:	bl	1693c <__assert_fail@plt+0x4348>
   191a0:	ldr	r3, [sp, #60]	; 0x3c
   191a4:	ldr	ip, [sl, #24]
   191a8:	ldr	lr, [sp, #56]	; 0x38
   191ac:	cmp	lr, ip
   191b0:	movcs	ip, lr
   191b4:	cmp	ip, r0
   191b8:	movcs	r0, ip
   191bc:	ldr	ip, [sp, #20]
   191c0:	ldr	r9, [r9, #24]
   191c4:	cmp	ip, r9
   191c8:	movcs	r9, ip
   191cc:	cmp	r9, r0
   191d0:	movcc	r9, r0
   191d4:	ldr	r6, [r6, #24]
   191d8:	cmp	r8, r6
   191dc:	movcs	r6, r8
   191e0:	cmp	r6, r9
   191e4:	movcc	r6, r9
   191e8:	ldr	r4, [r4, #24]
   191ec:	cmp	r5, r4
   191f0:	movcs	r4, r5
   191f4:	cmp	r4, r6
   191f8:	movcc	r4, r6
   191fc:	ldr	r0, [sp, #28]
   19200:	ldr	r5, [r0, #24]
   19204:	cmp	r3, r5
   19208:	movcs	r5, r3
   1920c:	cmp	r5, r4
   19210:	movcs	r4, r5
   19214:	ldr	r3, [fp, #24]
   19218:	cmp	r2, r3
   1921c:	movcc	r2, r3
   19220:	cmp	r2, r4
   19224:	movcs	r3, r2
   19228:	ldr	r2, [sp, #24]
   1922c:	movcc	r3, r4
   19230:	str	r3, [sp, #20]
   19234:	cmp	r2, #0
   19238:	beq	198d0 <__assert_fail@plt+0x72dc>
   1923c:	ldr	r4, [r2, #156]	; 0x9c
   19240:	mov	r3, r2
   19244:	cmp	r4, #0
   19248:	beq	19568 <__assert_fail@plt+0x6f74>
   1924c:	ldr	r5, [r4, #156]	; 0x9c
   19250:	cmp	r5, #0
   19254:	beq	193cc <__assert_fail@plt+0x6dd8>
   19258:	ldr	r2, [r5, #156]	; 0x9c
   1925c:	cmp	r2, #0
   19260:	beq	19308 <__assert_fail@plt+0x6d14>
   19264:	ldr	r6, [r2, #156]	; 0x9c
   19268:	cmp	r6, #0
   1926c:	beq	192ac <__assert_fail@plt+0x6cb8>
   19270:	ldr	r0, [r6, #156]	; 0x9c
   19274:	cmp	r0, #0
   19278:	moveq	r8, r0
   1927c:	beq	19288 <__assert_fail@plt+0x6c94>
   19280:	bl	1693c <__assert_fail@plt+0x4348>
   19284:	mov	r8, r0
   19288:	ldr	r0, [r6, #160]	; 0xa0
   1928c:	cmp	r0, #0
   19290:	beq	19298 <__assert_fail@plt+0x6ca4>
   19294:	bl	1693c <__assert_fail@plt+0x4348>
   19298:	ldr	r6, [r6, #24]
   1929c:	cmp	r8, r6
   192a0:	movcs	r6, r8
   192a4:	cmp	r6, r0
   192a8:	movcc	r6, r0
   192ac:	ldr	r8, [r2, #160]	; 0xa0
   192b0:	cmp	r8, #0
   192b4:	beq	192f4 <__assert_fail@plt+0x6d00>
   192b8:	ldr	r0, [r8, #156]	; 0x9c
   192bc:	cmp	r0, #0
   192c0:	moveq	r9, r0
   192c4:	beq	192d0 <__assert_fail@plt+0x6cdc>
   192c8:	bl	1693c <__assert_fail@plt+0x4348>
   192cc:	mov	r9, r0
   192d0:	ldr	r0, [r8, #160]	; 0xa0
   192d4:	cmp	r0, #0
   192d8:	beq	192e0 <__assert_fail@plt+0x6cec>
   192dc:	bl	1693c <__assert_fail@plt+0x4348>
   192e0:	ldr	r8, [r8, #24]
   192e4:	cmp	r9, r8
   192e8:	movcs	r8, r9
   192ec:	cmp	r8, r0
   192f0:	movcc	r8, r0
   192f4:	ldr	r2, [r2, #24]
   192f8:	cmp	r6, r2
   192fc:	movcs	r2, r6
   19300:	cmp	r2, r8
   19304:	movcc	r2, r8
   19308:	ldr	r6, [r5, #160]	; 0xa0
   1930c:	cmp	r6, #0
   19310:	beq	193b8 <__assert_fail@plt+0x6dc4>
   19314:	ldr	r8, [r6, #156]	; 0x9c
   19318:	cmp	r8, #0
   1931c:	beq	1935c <__assert_fail@plt+0x6d68>
   19320:	ldr	r0, [r8, #156]	; 0x9c
   19324:	cmp	r0, #0
   19328:	moveq	r9, r0
   1932c:	beq	19338 <__assert_fail@plt+0x6d44>
   19330:	bl	1693c <__assert_fail@plt+0x4348>
   19334:	mov	r9, r0
   19338:	ldr	r0, [r8, #160]	; 0xa0
   1933c:	cmp	r0, #0
   19340:	beq	19348 <__assert_fail@plt+0x6d54>
   19344:	bl	1693c <__assert_fail@plt+0x4348>
   19348:	ldr	r8, [r8, #24]
   1934c:	cmp	r9, r8
   19350:	movcs	r8, r9
   19354:	cmp	r8, r0
   19358:	movcc	r8, r0
   1935c:	ldr	r9, [r6, #160]	; 0xa0
   19360:	cmp	r9, #0
   19364:	beq	193a4 <__assert_fail@plt+0x6db0>
   19368:	ldr	r0, [r9, #156]	; 0x9c
   1936c:	cmp	r0, #0
   19370:	moveq	sl, r0
   19374:	beq	19380 <__assert_fail@plt+0x6d8c>
   19378:	bl	1693c <__assert_fail@plt+0x4348>
   1937c:	mov	sl, r0
   19380:	ldr	r0, [r9, #160]	; 0xa0
   19384:	cmp	r0, #0
   19388:	beq	19390 <__assert_fail@plt+0x6d9c>
   1938c:	bl	1693c <__assert_fail@plt+0x4348>
   19390:	ldr	r9, [r9, #24]
   19394:	cmp	sl, r9
   19398:	movcs	r9, sl
   1939c:	cmp	r9, r0
   193a0:	movcc	r9, r0
   193a4:	ldr	r6, [r6, #24]
   193a8:	cmp	r8, r6
   193ac:	movcs	r6, r8
   193b0:	cmp	r6, r9
   193b4:	movcc	r6, r9
   193b8:	ldr	r5, [r5, #24]
   193bc:	cmp	r2, r5
   193c0:	movcs	r5, r2
   193c4:	cmp	r5, r6
   193c8:	movcc	r5, r6
   193cc:	ldr	r2, [r4, #160]	; 0xa0
   193d0:	cmp	r2, #0
   193d4:	beq	19554 <__assert_fail@plt+0x6f60>
   193d8:	ldr	r6, [r2, #156]	; 0x9c
   193dc:	cmp	r6, #0
   193e0:	beq	19488 <__assert_fail@plt+0x6e94>
   193e4:	ldr	r8, [r6, #156]	; 0x9c
   193e8:	cmp	r8, #0
   193ec:	beq	1942c <__assert_fail@plt+0x6e38>
   193f0:	ldr	r0, [r8, #156]	; 0x9c
   193f4:	cmp	r0, #0
   193f8:	moveq	r9, r0
   193fc:	beq	19408 <__assert_fail@plt+0x6e14>
   19400:	bl	1693c <__assert_fail@plt+0x4348>
   19404:	mov	r9, r0
   19408:	ldr	r0, [r8, #160]	; 0xa0
   1940c:	cmp	r0, #0
   19410:	beq	19418 <__assert_fail@plt+0x6e24>
   19414:	bl	1693c <__assert_fail@plt+0x4348>
   19418:	ldr	r8, [r8, #24]
   1941c:	cmp	r9, r8
   19420:	movcs	r8, r9
   19424:	cmp	r8, r0
   19428:	movcc	r8, r0
   1942c:	ldr	r9, [r6, #160]	; 0xa0
   19430:	cmp	r9, #0
   19434:	beq	19474 <__assert_fail@plt+0x6e80>
   19438:	ldr	r0, [r9, #156]	; 0x9c
   1943c:	cmp	r0, #0
   19440:	moveq	sl, r0
   19444:	beq	19450 <__assert_fail@plt+0x6e5c>
   19448:	bl	1693c <__assert_fail@plt+0x4348>
   1944c:	mov	sl, r0
   19450:	ldr	r0, [r9, #160]	; 0xa0
   19454:	cmp	r0, #0
   19458:	beq	19460 <__assert_fail@plt+0x6e6c>
   1945c:	bl	1693c <__assert_fail@plt+0x4348>
   19460:	ldr	r9, [r9, #24]
   19464:	cmp	sl, r9
   19468:	movcs	r9, sl
   1946c:	cmp	r9, r0
   19470:	movcc	r9, r0
   19474:	ldr	r6, [r6, #24]
   19478:	cmp	r8, r6
   1947c:	movcs	r6, r8
   19480:	cmp	r6, r9
   19484:	movcc	r6, r9
   19488:	ldr	r8, [r2, #160]	; 0xa0
   1948c:	cmp	r8, #0
   19490:	beq	19540 <__assert_fail@plt+0x6f4c>
   19494:	ldr	r9, [r8, #156]	; 0x9c
   19498:	cmp	r9, #0
   1949c:	beq	194dc <__assert_fail@plt+0x6ee8>
   194a0:	ldr	r0, [r9, #156]	; 0x9c
   194a4:	cmp	r0, #0
   194a8:	moveq	sl, r0
   194ac:	beq	194b8 <__assert_fail@plt+0x6ec4>
   194b0:	bl	1693c <__assert_fail@plt+0x4348>
   194b4:	mov	sl, r0
   194b8:	ldr	r0, [r9, #160]	; 0xa0
   194bc:	cmp	r0, #0
   194c0:	beq	194c8 <__assert_fail@plt+0x6ed4>
   194c4:	bl	1693c <__assert_fail@plt+0x4348>
   194c8:	ldr	r9, [r9, #24]
   194cc:	cmp	sl, r9
   194d0:	movcs	r9, sl
   194d4:	cmp	r9, r0
   194d8:	movcc	r9, r0
   194dc:	ldr	sl, [r8, #160]	; 0xa0
   194e0:	cmp	sl, #0
   194e4:	beq	1952c <__assert_fail@plt+0x6f38>
   194e8:	ldr	r0, [sl, #156]	; 0x9c
   194ec:	cmp	r0, #0
   194f0:	moveq	r3, r0
   194f4:	beq	19500 <__assert_fail@plt+0x6f0c>
   194f8:	bl	1693c <__assert_fail@plt+0x4348>
   194fc:	mov	r3, r0
   19500:	ldr	r0, [sl, #160]	; 0xa0
   19504:	cmp	r0, #0
   19508:	beq	19518 <__assert_fail@plt+0x6f24>
   1950c:	str	r3, [sp, #28]
   19510:	bl	1693c <__assert_fail@plt+0x4348>
   19514:	ldr	r3, [sp, #28]
   19518:	ldr	sl, [sl, #24]
   1951c:	cmp	r3, sl
   19520:	movcs	sl, r3
   19524:	cmp	sl, r0
   19528:	movcc	sl, r0
   1952c:	ldr	r8, [r8, #24]
   19530:	cmp	r9, r8
   19534:	movcs	r8, r9
   19538:	cmp	r8, sl
   1953c:	movcc	r8, sl
   19540:	ldr	r2, [r2, #24]
   19544:	cmp	r6, r2
   19548:	movcs	r2, r6
   1954c:	cmp	r2, r8
   19550:	movcc	r2, r8
   19554:	ldr	r4, [r4, #24]
   19558:	cmp	r5, r4
   1955c:	movcs	r4, r5
   19560:	cmp	r4, r2
   19564:	movcc	r4, r2
   19568:	ldr	r3, [sp, #24]
   1956c:	ldr	r2, [r3, #160]	; 0xa0
   19570:	cmp	r2, #0
   19574:	beq	198b8 <__assert_fail@plt+0x72c4>
   19578:	ldr	r5, [r2, #156]	; 0x9c
   1957c:	cmp	r5, #0
   19580:	beq	19700 <__assert_fail@plt+0x710c>
   19584:	ldr	r6, [r5, #156]	; 0x9c
   19588:	cmp	r6, #0
   1958c:	beq	19634 <__assert_fail@plt+0x7040>
   19590:	ldr	r8, [r6, #156]	; 0x9c
   19594:	cmp	r8, #0
   19598:	beq	195d8 <__assert_fail@plt+0x6fe4>
   1959c:	ldr	r0, [r8, #156]	; 0x9c
   195a0:	cmp	r0, #0
   195a4:	moveq	r9, r0
   195a8:	beq	195b4 <__assert_fail@plt+0x6fc0>
   195ac:	bl	1693c <__assert_fail@plt+0x4348>
   195b0:	mov	r9, r0
   195b4:	ldr	r0, [r8, #160]	; 0xa0
   195b8:	cmp	r0, #0
   195bc:	beq	195c4 <__assert_fail@plt+0x6fd0>
   195c0:	bl	1693c <__assert_fail@plt+0x4348>
   195c4:	ldr	r8, [r8, #24]
   195c8:	cmp	r9, r8
   195cc:	movcs	r8, r9
   195d0:	cmp	r8, r0
   195d4:	movcc	r8, r0
   195d8:	ldr	r9, [r6, #160]	; 0xa0
   195dc:	cmp	r9, #0
   195e0:	beq	19620 <__assert_fail@plt+0x702c>
   195e4:	ldr	r0, [r9, #156]	; 0x9c
   195e8:	cmp	r0, #0
   195ec:	moveq	sl, r0
   195f0:	beq	195fc <__assert_fail@plt+0x7008>
   195f4:	bl	1693c <__assert_fail@plt+0x4348>
   195f8:	mov	sl, r0
   195fc:	ldr	r0, [r9, #160]	; 0xa0
   19600:	cmp	r0, #0
   19604:	beq	1960c <__assert_fail@plt+0x7018>
   19608:	bl	1693c <__assert_fail@plt+0x4348>
   1960c:	ldr	r9, [r9, #24]
   19610:	cmp	sl, r9
   19614:	movcs	r9, sl
   19618:	cmp	r9, r0
   1961c:	movcc	r9, r0
   19620:	ldr	r6, [r6, #24]
   19624:	cmp	r8, r6
   19628:	movcs	r6, r8
   1962c:	cmp	r6, r9
   19630:	movcc	r6, r9
   19634:	ldr	r8, [r5, #160]	; 0xa0
   19638:	cmp	r8, #0
   1963c:	beq	196ec <__assert_fail@plt+0x70f8>
   19640:	ldr	r9, [r8, #156]	; 0x9c
   19644:	cmp	r9, #0
   19648:	beq	19688 <__assert_fail@plt+0x7094>
   1964c:	ldr	r0, [r9, #156]	; 0x9c
   19650:	cmp	r0, #0
   19654:	moveq	sl, r0
   19658:	beq	19664 <__assert_fail@plt+0x7070>
   1965c:	bl	1693c <__assert_fail@plt+0x4348>
   19660:	mov	sl, r0
   19664:	ldr	r0, [r9, #160]	; 0xa0
   19668:	cmp	r0, #0
   1966c:	beq	19674 <__assert_fail@plt+0x7080>
   19670:	bl	1693c <__assert_fail@plt+0x4348>
   19674:	ldr	r9, [r9, #24]
   19678:	cmp	sl, r9
   1967c:	movcs	r9, sl
   19680:	cmp	r9, r0
   19684:	movcc	r9, r0
   19688:	ldr	sl, [r8, #160]	; 0xa0
   1968c:	cmp	sl, #0
   19690:	beq	196d8 <__assert_fail@plt+0x70e4>
   19694:	ldr	r0, [sl, #156]	; 0x9c
   19698:	cmp	r0, #0
   1969c:	moveq	r3, r0
   196a0:	beq	196ac <__assert_fail@plt+0x70b8>
   196a4:	bl	1693c <__assert_fail@plt+0x4348>
   196a8:	mov	r3, r0
   196ac:	ldr	r0, [sl, #160]	; 0xa0
   196b0:	cmp	r0, #0
   196b4:	beq	196c4 <__assert_fail@plt+0x70d0>
   196b8:	str	r3, [sp, #28]
   196bc:	bl	1693c <__assert_fail@plt+0x4348>
   196c0:	ldr	r3, [sp, #28]
   196c4:	ldr	sl, [sl, #24]
   196c8:	cmp	r3, sl
   196cc:	movcs	sl, r3
   196d0:	cmp	sl, r0
   196d4:	movcc	sl, r0
   196d8:	ldr	r8, [r8, #24]
   196dc:	cmp	r9, r8
   196e0:	movcs	r8, r9
   196e4:	cmp	r8, sl
   196e8:	movcc	r8, sl
   196ec:	ldr	r5, [r5, #24]
   196f0:	cmp	r6, r5
   196f4:	movcs	r5, r6
   196f8:	cmp	r5, r8
   196fc:	movcc	r5, r8
   19700:	ldr	r6, [r2, #160]	; 0xa0
   19704:	cmp	r6, #0
   19708:	beq	198a4 <__assert_fail@plt+0x72b0>
   1970c:	ldr	r8, [r6, #156]	; 0x9c
   19710:	cmp	r8, #0
   19714:	beq	197c4 <__assert_fail@plt+0x71d0>
   19718:	ldr	r9, [r8, #156]	; 0x9c
   1971c:	cmp	r9, #0
   19720:	beq	19760 <__assert_fail@plt+0x716c>
   19724:	ldr	r0, [r9, #156]	; 0x9c
   19728:	cmp	r0, #0
   1972c:	moveq	sl, r0
   19730:	beq	1973c <__assert_fail@plt+0x7148>
   19734:	bl	1693c <__assert_fail@plt+0x4348>
   19738:	mov	sl, r0
   1973c:	ldr	r0, [r9, #160]	; 0xa0
   19740:	cmp	r0, #0
   19744:	beq	1974c <__assert_fail@plt+0x7158>
   19748:	bl	1693c <__assert_fail@plt+0x4348>
   1974c:	ldr	r9, [r9, #24]
   19750:	cmp	sl, r9
   19754:	movcs	r9, sl
   19758:	cmp	r9, r0
   1975c:	movcc	r9, r0
   19760:	ldr	sl, [r8, #160]	; 0xa0
   19764:	cmp	sl, #0
   19768:	beq	197b0 <__assert_fail@plt+0x71bc>
   1976c:	ldr	r0, [sl, #156]	; 0x9c
   19770:	cmp	r0, #0
   19774:	moveq	r3, r0
   19778:	beq	19784 <__assert_fail@plt+0x7190>
   1977c:	bl	1693c <__assert_fail@plt+0x4348>
   19780:	mov	r3, r0
   19784:	ldr	r0, [sl, #160]	; 0xa0
   19788:	cmp	r0, #0
   1978c:	beq	1979c <__assert_fail@plt+0x71a8>
   19790:	str	r3, [sp, #28]
   19794:	bl	1693c <__assert_fail@plt+0x4348>
   19798:	ldr	r3, [sp, #28]
   1979c:	ldr	sl, [sl, #24]
   197a0:	cmp	r3, sl
   197a4:	movcs	sl, r3
   197a8:	cmp	sl, r0
   197ac:	movcc	sl, r0
   197b0:	ldr	r8, [r8, #24]
   197b4:	cmp	r9, r8
   197b8:	movcs	r8, r9
   197bc:	cmp	r8, sl
   197c0:	movcc	r8, sl
   197c4:	ldr	r9, [r6, #160]	; 0xa0
   197c8:	cmp	r9, #0
   197cc:	beq	19890 <__assert_fail@plt+0x729c>
   197d0:	ldr	sl, [r9, #156]	; 0x9c
   197d4:	cmp	sl, #0
   197d8:	beq	19820 <__assert_fail@plt+0x722c>
   197dc:	ldr	r0, [sl, #156]	; 0x9c
   197e0:	cmp	r0, #0
   197e4:	moveq	r3, r0
   197e8:	beq	197f4 <__assert_fail@plt+0x7200>
   197ec:	bl	1693c <__assert_fail@plt+0x4348>
   197f0:	mov	r3, r0
   197f4:	ldr	r0, [sl, #160]	; 0xa0
   197f8:	cmp	r0, #0
   197fc:	beq	1980c <__assert_fail@plt+0x7218>
   19800:	str	r3, [sp, #28]
   19804:	bl	1693c <__assert_fail@plt+0x4348>
   19808:	ldr	r3, [sp, #28]
   1980c:	ldr	sl, [sl, #24]
   19810:	cmp	r3, sl
   19814:	movcs	sl, r3
   19818:	cmp	sl, r0
   1981c:	movcc	sl, r0
   19820:	ldr	r3, [r9, #160]	; 0xa0
   19824:	cmp	r3, #0
   19828:	beq	1987c <__assert_fail@plt+0x7288>
   1982c:	ldr	r0, [r3, #156]	; 0x9c
   19830:	cmp	r0, #0
   19834:	streq	r0, [sp, #28]
   19838:	beq	1984c <__assert_fail@plt+0x7258>
   1983c:	str	r3, [sp, #56]	; 0x38
   19840:	bl	1693c <__assert_fail@plt+0x4348>
   19844:	ldr	r3, [sp, #56]	; 0x38
   19848:	str	r0, [sp, #28]
   1984c:	ldr	r0, [r3, #160]	; 0xa0
   19850:	cmp	r0, #0
   19854:	beq	19864 <__assert_fail@plt+0x7270>
   19858:	str	r3, [sp, #56]	; 0x38
   1985c:	bl	1693c <__assert_fail@plt+0x4348>
   19860:	ldr	r3, [sp, #56]	; 0x38
   19864:	ldr	r3, [r3, #24]
   19868:	ldr	ip, [sp, #28]
   1986c:	cmp	ip, r3
   19870:	movcs	r3, ip
   19874:	cmp	r3, r0
   19878:	movcc	r3, r0
   1987c:	ldr	r9, [r9, #24]
   19880:	cmp	sl, r9
   19884:	movcs	r9, sl
   19888:	cmp	r9, r3
   1988c:	movcc	r9, r3
   19890:	ldr	r6, [r6, #24]
   19894:	cmp	r8, r6
   19898:	movcs	r6, r8
   1989c:	cmp	r6, r9
   198a0:	movcc	r6, r9
   198a4:	ldr	r2, [r2, #24]
   198a8:	cmp	r5, r2
   198ac:	movcs	r2, r5
   198b0:	cmp	r2, r6
   198b4:	movcc	r2, r6
   198b8:	ldr	r3, [sp, #24]
   198bc:	ldr	r3, [r3, #24]
   198c0:	cmp	r4, r3
   198c4:	movcc	r4, r3
   198c8:	cmp	r4, r2
   198cc:	movcs	r2, r4
   198d0:	ldr	r3, [sp, #32]
   198d4:	cmp	r3, #0
   198d8:	moveq	r4, r3
   198dc:	beq	1a010 <__assert_fail@plt+0x7a1c>
   198e0:	ldr	r5, [r3, #156]	; 0x9c
   198e4:	cmp	r5, #0
   198e8:	moveq	r3, r5
   198ec:	beq	19c34 <__assert_fail@plt+0x7640>
   198f0:	ldr	r4, [r5, #156]	; 0x9c
   198f4:	cmp	r4, #0
   198f8:	beq	19a78 <__assert_fail@plt+0x7484>
   198fc:	ldr	r6, [r4, #156]	; 0x9c
   19900:	cmp	r6, #0
   19904:	beq	199ac <__assert_fail@plt+0x73b8>
   19908:	ldr	r8, [r6, #156]	; 0x9c
   1990c:	cmp	r8, #0
   19910:	beq	19950 <__assert_fail@plt+0x735c>
   19914:	ldr	r0, [r8, #156]	; 0x9c
   19918:	cmp	r0, #0
   1991c:	moveq	r9, r0
   19920:	beq	1992c <__assert_fail@plt+0x7338>
   19924:	bl	1693c <__assert_fail@plt+0x4348>
   19928:	mov	r9, r0
   1992c:	ldr	r0, [r8, #160]	; 0xa0
   19930:	cmp	r0, #0
   19934:	beq	1993c <__assert_fail@plt+0x7348>
   19938:	bl	1693c <__assert_fail@plt+0x4348>
   1993c:	ldr	r8, [r8, #24]
   19940:	cmp	r9, r8
   19944:	movcs	r8, r9
   19948:	cmp	r8, r0
   1994c:	movcc	r8, r0
   19950:	ldr	r9, [r6, #160]	; 0xa0
   19954:	cmp	r9, #0
   19958:	beq	19998 <__assert_fail@plt+0x73a4>
   1995c:	ldr	r0, [r9, #156]	; 0x9c
   19960:	cmp	r0, #0
   19964:	moveq	sl, r0
   19968:	beq	19974 <__assert_fail@plt+0x7380>
   1996c:	bl	1693c <__assert_fail@plt+0x4348>
   19970:	mov	sl, r0
   19974:	ldr	r0, [r9, #160]	; 0xa0
   19978:	cmp	r0, #0
   1997c:	beq	19984 <__assert_fail@plt+0x7390>
   19980:	bl	1693c <__assert_fail@plt+0x4348>
   19984:	ldr	r9, [r9, #24]
   19988:	cmp	sl, r9
   1998c:	movcs	r9, sl
   19990:	cmp	r9, r0
   19994:	movcc	r9, r0
   19998:	ldr	r6, [r6, #24]
   1999c:	cmp	r8, r6
   199a0:	movcs	r6, r8
   199a4:	cmp	r6, r9
   199a8:	movcc	r6, r9
   199ac:	ldr	r8, [r4, #160]	; 0xa0
   199b0:	cmp	r8, #0
   199b4:	beq	19a64 <__assert_fail@plt+0x7470>
   199b8:	ldr	r9, [r8, #156]	; 0x9c
   199bc:	cmp	r9, #0
   199c0:	beq	19a00 <__assert_fail@plt+0x740c>
   199c4:	ldr	r0, [r9, #156]	; 0x9c
   199c8:	cmp	r0, #0
   199cc:	moveq	sl, r0
   199d0:	beq	199dc <__assert_fail@plt+0x73e8>
   199d4:	bl	1693c <__assert_fail@plt+0x4348>
   199d8:	mov	sl, r0
   199dc:	ldr	r0, [r9, #160]	; 0xa0
   199e0:	cmp	r0, #0
   199e4:	beq	199ec <__assert_fail@plt+0x73f8>
   199e8:	bl	1693c <__assert_fail@plt+0x4348>
   199ec:	ldr	r9, [r9, #24]
   199f0:	cmp	sl, r9
   199f4:	movcs	r9, sl
   199f8:	cmp	r9, r0
   199fc:	movcc	r9, r0
   19a00:	ldr	sl, [r8, #160]	; 0xa0
   19a04:	cmp	sl, #0
   19a08:	beq	19a50 <__assert_fail@plt+0x745c>
   19a0c:	ldr	r0, [sl, #156]	; 0x9c
   19a10:	cmp	r0, #0
   19a14:	moveq	r3, r0
   19a18:	beq	19a24 <__assert_fail@plt+0x7430>
   19a1c:	bl	1693c <__assert_fail@plt+0x4348>
   19a20:	mov	r3, r0
   19a24:	ldr	r0, [sl, #160]	; 0xa0
   19a28:	cmp	r0, #0
   19a2c:	beq	19a3c <__assert_fail@plt+0x7448>
   19a30:	str	r3, [sp, #24]
   19a34:	bl	1693c <__assert_fail@plt+0x4348>
   19a38:	ldr	r3, [sp, #24]
   19a3c:	ldr	sl, [sl, #24]
   19a40:	cmp	r3, sl
   19a44:	movcs	sl, r3
   19a48:	cmp	sl, r0
   19a4c:	movcc	sl, r0
   19a50:	ldr	r8, [r8, #24]
   19a54:	cmp	r9, r8
   19a58:	movcs	r8, r9
   19a5c:	cmp	r8, sl
   19a60:	movcc	r8, sl
   19a64:	ldr	r4, [r4, #24]
   19a68:	cmp	r6, r4
   19a6c:	movcs	r4, r6
   19a70:	cmp	r4, r8
   19a74:	movcc	r4, r8
   19a78:	ldr	r6, [r5, #160]	; 0xa0
   19a7c:	cmp	r6, #0
   19a80:	beq	19c1c <__assert_fail@plt+0x7628>
   19a84:	ldr	r8, [r6, #156]	; 0x9c
   19a88:	cmp	r8, #0
   19a8c:	beq	19b3c <__assert_fail@plt+0x7548>
   19a90:	ldr	r9, [r8, #156]	; 0x9c
   19a94:	cmp	r9, #0
   19a98:	beq	19ad8 <__assert_fail@plt+0x74e4>
   19a9c:	ldr	r0, [r9, #156]	; 0x9c
   19aa0:	cmp	r0, #0
   19aa4:	moveq	sl, r0
   19aa8:	beq	19ab4 <__assert_fail@plt+0x74c0>
   19aac:	bl	1693c <__assert_fail@plt+0x4348>
   19ab0:	mov	sl, r0
   19ab4:	ldr	r0, [r9, #160]	; 0xa0
   19ab8:	cmp	r0, #0
   19abc:	beq	19ac4 <__assert_fail@plt+0x74d0>
   19ac0:	bl	1693c <__assert_fail@plt+0x4348>
   19ac4:	ldr	r9, [r9, #24]
   19ac8:	cmp	sl, r9
   19acc:	movcs	r9, sl
   19ad0:	cmp	r9, r0
   19ad4:	movcc	r9, r0
   19ad8:	ldr	sl, [r8, #160]	; 0xa0
   19adc:	cmp	sl, #0
   19ae0:	beq	19b28 <__assert_fail@plt+0x7534>
   19ae4:	ldr	r0, [sl, #156]	; 0x9c
   19ae8:	cmp	r0, #0
   19aec:	moveq	r3, r0
   19af0:	beq	19afc <__assert_fail@plt+0x7508>
   19af4:	bl	1693c <__assert_fail@plt+0x4348>
   19af8:	mov	r3, r0
   19afc:	ldr	r0, [sl, #160]	; 0xa0
   19b00:	cmp	r0, #0
   19b04:	beq	19b14 <__assert_fail@plt+0x7520>
   19b08:	str	r3, [sp, #24]
   19b0c:	bl	1693c <__assert_fail@plt+0x4348>
   19b10:	ldr	r3, [sp, #24]
   19b14:	ldr	sl, [sl, #24]
   19b18:	cmp	r3, sl
   19b1c:	movcs	sl, r3
   19b20:	cmp	sl, r0
   19b24:	movcc	sl, r0
   19b28:	ldr	r8, [r8, #24]
   19b2c:	cmp	r9, r8
   19b30:	movcs	r8, r9
   19b34:	cmp	r8, sl
   19b38:	movcc	r8, sl
   19b3c:	ldr	r9, [r6, #160]	; 0xa0
   19b40:	cmp	r9, #0
   19b44:	beq	19c08 <__assert_fail@plt+0x7614>
   19b48:	ldr	sl, [r9, #156]	; 0x9c
   19b4c:	cmp	sl, #0
   19b50:	beq	19b98 <__assert_fail@plt+0x75a4>
   19b54:	ldr	r0, [sl, #156]	; 0x9c
   19b58:	cmp	r0, #0
   19b5c:	moveq	r3, r0
   19b60:	beq	19b6c <__assert_fail@plt+0x7578>
   19b64:	bl	1693c <__assert_fail@plt+0x4348>
   19b68:	mov	r3, r0
   19b6c:	ldr	r0, [sl, #160]	; 0xa0
   19b70:	cmp	r0, #0
   19b74:	beq	19b84 <__assert_fail@plt+0x7590>
   19b78:	str	r3, [sp, #24]
   19b7c:	bl	1693c <__assert_fail@plt+0x4348>
   19b80:	ldr	r3, [sp, #24]
   19b84:	ldr	sl, [sl, #24]
   19b88:	cmp	r3, sl
   19b8c:	movcs	sl, r3
   19b90:	cmp	sl, r0
   19b94:	movcc	sl, r0
   19b98:	ldr	r3, [r9, #160]	; 0xa0
   19b9c:	cmp	r3, #0
   19ba0:	beq	19bf4 <__assert_fail@plt+0x7600>
   19ba4:	ldr	r0, [r3, #156]	; 0x9c
   19ba8:	cmp	r0, #0
   19bac:	streq	r0, [sp, #24]
   19bb0:	beq	19bc4 <__assert_fail@plt+0x75d0>
   19bb4:	str	r3, [sp, #28]
   19bb8:	bl	1693c <__assert_fail@plt+0x4348>
   19bbc:	ldr	r3, [sp, #28]
   19bc0:	str	r0, [sp, #24]
   19bc4:	ldr	r0, [r3, #160]	; 0xa0
   19bc8:	cmp	r0, #0
   19bcc:	beq	19bdc <__assert_fail@plt+0x75e8>
   19bd0:	str	r3, [sp, #28]
   19bd4:	bl	1693c <__assert_fail@plt+0x4348>
   19bd8:	ldr	r3, [sp, #28]
   19bdc:	ldr	r3, [r3, #24]
   19be0:	ldr	ip, [sp, #24]
   19be4:	cmp	ip, r3
   19be8:	movcs	r3, ip
   19bec:	cmp	r3, r0
   19bf0:	movcc	r3, r0
   19bf4:	ldr	r9, [r9, #24]
   19bf8:	cmp	sl, r9
   19bfc:	movcs	r9, sl
   19c00:	cmp	r9, r3
   19c04:	movcc	r9, r3
   19c08:	ldr	r6, [r6, #24]
   19c0c:	cmp	r8, r6
   19c10:	movcs	r6, r8
   19c14:	cmp	r6, r9
   19c18:	movcc	r6, r9
   19c1c:	ldr	r3, [r5, #24]
   19c20:	cmp	r4, r3
   19c24:	movcc	r4, r3
   19c28:	cmp	r4, r6
   19c2c:	movcs	r3, r4
   19c30:	movcc	r3, r6
   19c34:	ldr	r0, [sp, #32]
   19c38:	ldr	r4, [r0, #160]	; 0xa0
   19c3c:	cmp	r4, #0
   19c40:	beq	19ff8 <__assert_fail@plt+0x7a04>
   19c44:	ldr	r5, [r4, #156]	; 0x9c
   19c48:	cmp	r5, #0
   19c4c:	beq	19e08 <__assert_fail@plt+0x7814>
   19c50:	ldr	r6, [r5, #156]	; 0x9c
   19c54:	cmp	r6, #0
   19c58:	beq	19d20 <__assert_fail@plt+0x772c>
   19c5c:	ldr	r8, [r6, #156]	; 0x9c
   19c60:	cmp	r8, #0
   19c64:	beq	19cb4 <__assert_fail@plt+0x76c0>
   19c68:	ldr	r0, [r8, #156]	; 0x9c
   19c6c:	cmp	r0, #0
   19c70:	moveq	r9, r0
   19c74:	beq	19c88 <__assert_fail@plt+0x7694>
   19c78:	str	r3, [sp, #24]
   19c7c:	bl	1693c <__assert_fail@plt+0x4348>
   19c80:	ldr	r3, [sp, #24]
   19c84:	mov	r9, r0
   19c88:	ldr	r0, [r8, #160]	; 0xa0
   19c8c:	cmp	r0, #0
   19c90:	beq	19ca0 <__assert_fail@plt+0x76ac>
   19c94:	str	r3, [sp, #24]
   19c98:	bl	1693c <__assert_fail@plt+0x4348>
   19c9c:	ldr	r3, [sp, #24]
   19ca0:	ldr	r8, [r8, #24]
   19ca4:	cmp	r9, r8
   19ca8:	movcs	r8, r9
   19cac:	cmp	r8, r0
   19cb0:	movcc	r8, r0
   19cb4:	ldr	r9, [r6, #160]	; 0xa0
   19cb8:	cmp	r9, #0
   19cbc:	beq	19d0c <__assert_fail@plt+0x7718>
   19cc0:	ldr	r0, [r9, #156]	; 0x9c
   19cc4:	cmp	r0, #0
   19cc8:	moveq	sl, r0
   19ccc:	beq	19ce0 <__assert_fail@plt+0x76ec>
   19cd0:	str	r3, [sp, #24]
   19cd4:	bl	1693c <__assert_fail@plt+0x4348>
   19cd8:	ldr	r3, [sp, #24]
   19cdc:	mov	sl, r0
   19ce0:	ldr	r0, [r9, #160]	; 0xa0
   19ce4:	cmp	r0, #0
   19ce8:	beq	19cf8 <__assert_fail@plt+0x7704>
   19cec:	str	r3, [sp, #24]
   19cf0:	bl	1693c <__assert_fail@plt+0x4348>
   19cf4:	ldr	r3, [sp, #24]
   19cf8:	ldr	r9, [r9, #24]
   19cfc:	cmp	sl, r9
   19d00:	movcs	r9, sl
   19d04:	cmp	r9, r0
   19d08:	movcc	r9, r0
   19d0c:	ldr	r6, [r6, #24]
   19d10:	cmp	r8, r6
   19d14:	movcs	r6, r8
   19d18:	cmp	r6, r9
   19d1c:	movcc	r6, r9
   19d20:	ldr	r8, [r5, #160]	; 0xa0
   19d24:	cmp	r8, #0
   19d28:	beq	19df4 <__assert_fail@plt+0x7800>
   19d2c:	ldr	r9, [r8, #156]	; 0x9c
   19d30:	cmp	r9, #0
   19d34:	beq	19d84 <__assert_fail@plt+0x7790>
   19d38:	ldr	r0, [r9, #156]	; 0x9c
   19d3c:	cmp	r0, #0
   19d40:	moveq	sl, r0
   19d44:	beq	19d58 <__assert_fail@plt+0x7764>
   19d48:	str	r3, [sp, #24]
   19d4c:	bl	1693c <__assert_fail@plt+0x4348>
   19d50:	ldr	r3, [sp, #24]
   19d54:	mov	sl, r0
   19d58:	ldr	r0, [r9, #160]	; 0xa0
   19d5c:	cmp	r0, #0
   19d60:	beq	19d70 <__assert_fail@plt+0x777c>
   19d64:	str	r3, [sp, #24]
   19d68:	bl	1693c <__assert_fail@plt+0x4348>
   19d6c:	ldr	r3, [sp, #24]
   19d70:	ldr	r9, [r9, #24]
   19d74:	cmp	sl, r9
   19d78:	movcs	r9, sl
   19d7c:	cmp	r9, r0
   19d80:	movcc	r9, r0
   19d84:	ldr	sl, [r8, #160]	; 0xa0
   19d88:	cmp	sl, #0
   19d8c:	beq	19de0 <__assert_fail@plt+0x77ec>
   19d90:	ldr	r0, [sl, #156]	; 0x9c
   19d94:	cmp	r0, #0
   19d98:	streq	r0, [sp, #24]
   19d9c:	beq	19db0 <__assert_fail@plt+0x77bc>
   19da0:	str	r3, [sp, #28]
   19da4:	bl	1693c <__assert_fail@plt+0x4348>
   19da8:	ldr	r3, [sp, #28]
   19dac:	str	r0, [sp, #24]
   19db0:	ldr	r0, [sl, #160]	; 0xa0
   19db4:	cmp	r0, #0
   19db8:	beq	19dc8 <__assert_fail@plt+0x77d4>
   19dbc:	str	r3, [sp, #28]
   19dc0:	bl	1693c <__assert_fail@plt+0x4348>
   19dc4:	ldr	r3, [sp, #28]
   19dc8:	ldr	sl, [sl, #24]
   19dcc:	ldr	ip, [sp, #24]
   19dd0:	cmp	ip, sl
   19dd4:	movcs	sl, ip
   19dd8:	cmp	sl, r0
   19ddc:	movcc	sl, r0
   19de0:	ldr	r8, [r8, #24]
   19de4:	cmp	r9, r8
   19de8:	movcs	r8, r9
   19dec:	cmp	r8, sl
   19df0:	movcc	r8, sl
   19df4:	ldr	r5, [r5, #24]
   19df8:	cmp	r6, r5
   19dfc:	movcs	r5, r6
   19e00:	cmp	r5, r8
   19e04:	movcc	r5, r8
   19e08:	ldr	r6, [r4, #160]	; 0xa0
   19e0c:	cmp	r6, #0
   19e10:	beq	19fe4 <__assert_fail@plt+0x79f0>
   19e14:	ldr	r8, [r6, #156]	; 0x9c
   19e18:	cmp	r8, #0
   19e1c:	beq	19ee8 <__assert_fail@plt+0x78f4>
   19e20:	ldr	r9, [r8, #156]	; 0x9c
   19e24:	cmp	r9, #0
   19e28:	beq	19e78 <__assert_fail@plt+0x7884>
   19e2c:	ldr	r0, [r9, #156]	; 0x9c
   19e30:	cmp	r0, #0
   19e34:	moveq	sl, r0
   19e38:	beq	19e4c <__assert_fail@plt+0x7858>
   19e3c:	str	r3, [sp, #24]
   19e40:	bl	1693c <__assert_fail@plt+0x4348>
   19e44:	ldr	r3, [sp, #24]
   19e48:	mov	sl, r0
   19e4c:	ldr	r0, [r9, #160]	; 0xa0
   19e50:	cmp	r0, #0
   19e54:	beq	19e64 <__assert_fail@plt+0x7870>
   19e58:	str	r3, [sp, #24]
   19e5c:	bl	1693c <__assert_fail@plt+0x4348>
   19e60:	ldr	r3, [sp, #24]
   19e64:	ldr	r9, [r9, #24]
   19e68:	cmp	sl, r9
   19e6c:	movcs	r9, sl
   19e70:	cmp	r9, r0
   19e74:	movcc	r9, r0
   19e78:	ldr	sl, [r8, #160]	; 0xa0
   19e7c:	cmp	sl, #0
   19e80:	beq	19ed4 <__assert_fail@plt+0x78e0>
   19e84:	ldr	r0, [sl, #156]	; 0x9c
   19e88:	cmp	r0, #0
   19e8c:	streq	r0, [sp, #24]
   19e90:	beq	19ea4 <__assert_fail@plt+0x78b0>
   19e94:	str	r3, [sp, #28]
   19e98:	bl	1693c <__assert_fail@plt+0x4348>
   19e9c:	ldr	r3, [sp, #28]
   19ea0:	str	r0, [sp, #24]
   19ea4:	ldr	r0, [sl, #160]	; 0xa0
   19ea8:	cmp	r0, #0
   19eac:	beq	19ebc <__assert_fail@plt+0x78c8>
   19eb0:	str	r3, [sp, #28]
   19eb4:	bl	1693c <__assert_fail@plt+0x4348>
   19eb8:	ldr	r3, [sp, #28]
   19ebc:	ldr	sl, [sl, #24]
   19ec0:	ldr	ip, [sp, #24]
   19ec4:	cmp	ip, sl
   19ec8:	movcs	sl, ip
   19ecc:	cmp	sl, r0
   19ed0:	movcc	sl, r0
   19ed4:	ldr	r8, [r8, #24]
   19ed8:	cmp	r9, r8
   19edc:	movcs	r8, r9
   19ee0:	cmp	r8, sl
   19ee4:	movcc	r8, sl
   19ee8:	ldr	r9, [r6, #160]	; 0xa0
   19eec:	cmp	r9, #0
   19ef0:	beq	19fd0 <__assert_fail@plt+0x79dc>
   19ef4:	ldr	sl, [r9, #156]	; 0x9c
   19ef8:	cmp	sl, #0
   19efc:	streq	sl, [sp, #24]
   19f00:	beq	19f58 <__assert_fail@plt+0x7964>
   19f04:	ldr	r0, [sl, #156]	; 0x9c
   19f08:	cmp	r0, #0
   19f0c:	streq	r0, [sp, #24]
   19f10:	beq	19f24 <__assert_fail@plt+0x7930>
   19f14:	str	r3, [sp, #28]
   19f18:	bl	1693c <__assert_fail@plt+0x4348>
   19f1c:	ldr	r3, [sp, #28]
   19f20:	str	r0, [sp, #24]
   19f24:	ldr	r0, [sl, #160]	; 0xa0
   19f28:	cmp	r0, #0
   19f2c:	beq	19f3c <__assert_fail@plt+0x7948>
   19f30:	str	r3, [sp, #28]
   19f34:	bl	1693c <__assert_fail@plt+0x4348>
   19f38:	ldr	r3, [sp, #28]
   19f3c:	ldr	sl, [sl, #24]
   19f40:	ldr	ip, [sp, #24]
   19f44:	cmp	ip, sl
   19f48:	movcs	sl, ip
   19f4c:	cmp	sl, r0
   19f50:	movcs	r0, sl
   19f54:	str	r0, [sp, #24]
   19f58:	ldr	sl, [r9, #160]	; 0xa0
   19f5c:	cmp	sl, #0
   19f60:	moveq	r0, sl
   19f64:	beq	19fb8 <__assert_fail@plt+0x79c4>
   19f68:	ldr	r0, [sl, #156]	; 0x9c
   19f6c:	cmp	r0, #0
   19f70:	streq	r0, [sp, #28]
   19f74:	beq	19f88 <__assert_fail@plt+0x7994>
   19f78:	str	r3, [sp, #56]	; 0x38
   19f7c:	bl	1693c <__assert_fail@plt+0x4348>
   19f80:	ldr	r3, [sp, #56]	; 0x38
   19f84:	str	r0, [sp, #28]
   19f88:	ldr	r0, [sl, #160]	; 0xa0
   19f8c:	cmp	r0, #0
   19f90:	beq	19fa0 <__assert_fail@plt+0x79ac>
   19f94:	str	r3, [sp, #56]	; 0x38
   19f98:	bl	1693c <__assert_fail@plt+0x4348>
   19f9c:	ldr	r3, [sp, #56]	; 0x38
   19fa0:	ldr	ip, [sl, #24]
   19fa4:	ldr	lr, [sp, #28]
   19fa8:	cmp	lr, ip
   19fac:	movcs	ip, lr
   19fb0:	cmp	ip, r0
   19fb4:	movcs	r0, ip
   19fb8:	ldr	r9, [r9, #24]
   19fbc:	ldr	ip, [sp, #24]
   19fc0:	cmp	ip, r9
   19fc4:	movcs	r9, ip
   19fc8:	cmp	r9, r0
   19fcc:	movcc	r9, r0
   19fd0:	ldr	r6, [r6, #24]
   19fd4:	cmp	r8, r6
   19fd8:	movcs	r6, r8
   19fdc:	cmp	r6, r9
   19fe0:	movcc	r6, r9
   19fe4:	ldr	r4, [r4, #24]
   19fe8:	cmp	r5, r4
   19fec:	movcs	r4, r5
   19ff0:	cmp	r4, r6
   19ff4:	movcc	r4, r6
   19ff8:	ldr	r0, [sp, #32]
   19ffc:	ldr	r5, [r0, #24]
   1a000:	cmp	r3, r5
   1a004:	movcs	r5, r3
   1a008:	cmp	r5, r4
   1a00c:	movcs	r4, r5
   1a010:	ldr	r3, [r1, #24]
   1a014:	cmp	r2, r3
   1a018:	movcc	r2, r3
   1a01c:	ldr	r3, [sp, #20]
   1a020:	cmp	r2, r4
   1a024:	movcc	r2, r4
   1a028:	cmp	r2, r3
   1a02c:	ble	1a03c <__assert_fail@plt+0x7a48>
   1a030:	movw	r2, #6668	; 0x1a0c
   1a034:	movt	r2, #5
   1a038:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a03c:	beq	1a094 <__assert_fail@plt+0x7aa0>
   1a040:	ldr	r3, [sp, #12]
   1a044:	cmp	r3, #0
   1a048:	bne	1a0d8 <__assert_fail@plt+0x7ae4>
   1a04c:	ldr	r0, [r7, #8]
   1a050:	ldr	r3, [r7, #156]	; 0x9c
   1a054:	ldr	r2, [r7, #160]	; 0xa0
   1a058:	cmp	r0, #3
   1a05c:	ldr	r1, [r3, #160]	; 0xa0
   1a060:	str	r2, [r3, #160]	; 0xa0
   1a064:	str	r1, [r7, #160]	; 0xa0
   1a068:	beq	1a074 <__assert_fail@plt+0x7a80>
   1a06c:	ldr	r2, [sp, #16]
   1a070:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a074:	cmp	r1, #0
   1a078:	beq	1a0d0 <__assert_fail@plt+0x7adc>
   1a07c:	ldr	fp, [r3, #160]	; 0xa0
   1a080:	cmp	fp, #0
   1a084:	bne	18364 <__assert_fail@plt+0x5d70>
   1a088:	movw	r2, #6568	; 0x19a8
   1a08c:	movt	r2, #5
   1a090:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a094:	ldr	r3, [sp, #12]
   1a098:	vldr	s16, [r1, #28]
   1a09c:	vldr	s17, [fp, #28]
   1a0a0:	cmp	r3, #0
   1a0a4:	bne	1a118 <__assert_fail@plt+0x7b24>
   1a0a8:	ldr	r3, [r7]
   1a0ac:	ldr	r2, [sp, #44]	; 0x2c
   1a0b0:	cmp	r3, r2
   1a0b4:	beq	1a15c <__assert_fail@plt+0x7b68>
   1a0b8:	ldr	r2, [sp, #48]	; 0x30
   1a0bc:	cmp	r3, r2
   1a0c0:	beq	1a174 <__assert_fail@plt+0x7b80>
   1a0c4:	movw	r2, #6648	; 0x19f8
   1a0c8:	movt	r2, #5
   1a0cc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a0d0:	ldr	r2, [sp, #52]	; 0x34
   1a0d4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a0d8:	ldr	r4, [sp, #36]	; 0x24
   1a0dc:	mov	r2, #24
   1a0e0:	mov	r1, #1
   1a0e4:	movw	r0, #6804	; 0x1a94
   1a0e8:	movt	r0, #5
   1a0ec:	ldr	r3, [r4]
   1a0f0:	bl	12168 <fwrite@plt>
   1a0f4:	mov	r2, #0
   1a0f8:	mov	r1, r7
   1a0fc:	ldr	r0, [r4]
   1a100:	bl	17368 <__assert_fail@plt+0x4d74>
   1a104:	ldr	r3, [sp, #40]	; 0x28
   1a108:	ldr	r3, [r3, #44]	; 0x2c
   1a10c:	and	r3, r3, #8
   1a110:	str	r3, [sp, #12]
   1a114:	b	1a04c <__assert_fail@plt+0x7a58>
   1a118:	vcvt.f64.f32	d7, s16
   1a11c:	vcvt.f64.f32	d6, s17
   1a120:	ldr	r0, [sp, #36]	; 0x24
   1a124:	movw	r1, #6776	; 0x1a78
   1a128:	movt	r1, #5
   1a12c:	ldr	r0, [r0]
   1a130:	vmov	r2, r3, d6
   1a134:	vstr	d7, [sp]
   1a138:	bl	1233c <fprintf@plt>
   1a13c:	ldr	r3, [sp, #40]	; 0x28
   1a140:	ldr	r2, [sp, #44]	; 0x2c
   1a144:	ldr	r3, [r3, #44]	; 0x2c
   1a148:	and	r3, r3, #8
   1a14c:	str	r3, [sp, #12]
   1a150:	ldr	r3, [r7]
   1a154:	cmp	r3, r2
   1a158:	bne	1a0b8 <__assert_fail@plt+0x7ac4>
   1a15c:	vcmpe.f32	s17, s16
   1a160:	vmrs	APSR_nzcv, fpscr
   1a164:	bgt	1a040 <__assert_fail@plt+0x7a4c>
   1a168:	movw	r2, #6684	; 0x1a1c
   1a16c:	movt	r2, #5
   1a170:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a174:	vcmpe.f32	s17, s16
   1a178:	vmrs	APSR_nzcv, fpscr
   1a17c:	bmi	1a040 <__assert_fail@plt+0x7a4c>
   1a180:	movw	r2, #6728	; 0x1a48
   1a184:	movt	r2, #5
   1a188:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a18c:	ldr	r2, [sp, #52]	; 0x34
   1a190:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a194:	movw	r2, #6568	; 0x19a8
   1a198:	movt	r2, #5
   1a19c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a1a0:	ldr	r3, [sp, #20]
   1a1a4:	ldr	r3, [r3, #156]	; 0x9c
   1a1a8:	cmp	r3, #0
   1a1ac:	beq	1a270 <__assert_fail@plt+0x7c7c>
   1a1b0:	ldrb	r2, [r3, #16]
   1a1b4:	cmp	r2, #0
   1a1b8:	beq	1a2bc <__assert_fail@plt+0x7cc8>
   1a1bc:	movw	r2, #6536	; 0x1988
   1a1c0:	movt	r2, #5
   1a1c4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a1c8:	ldr	r3, [sp, #24]
   1a1cc:	ldr	r3, [r3, #156]	; 0x9c
   1a1d0:	cmp	r3, #0
   1a1d4:	beq	1a248 <__assert_fail@plt+0x7c54>
   1a1d8:	ldrb	r2, [r3, #16]
   1a1dc:	cmp	r2, #0
   1a1e0:	beq	1a298 <__assert_fail@plt+0x7ca4>
   1a1e4:	movw	r2, #6504	; 0x1968
   1a1e8:	movt	r2, #5
   1a1ec:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a1f0:	ldr	r2, [sp, #52]	; 0x34
   1a1f4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a1f8:	ldr	r3, [sp, #32]
   1a1fc:	ldr	r3, [r3, #156]	; 0x9c
   1a200:	cmp	r3, #0
   1a204:	beq	1a3e0 <__assert_fail@plt+0x7dec>
   1a208:	ldrb	r2, [r3, #16]
   1a20c:	cmp	r2, #0
   1a210:	beq	1a304 <__assert_fail@plt+0x7d10>
   1a214:	movw	r2, #6504	; 0x1968
   1a218:	movt	r2, #5
   1a21c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a220:	ldr	r3, [sp, #28]
   1a224:	ldr	r3, [r3, #156]	; 0x9c
   1a228:	cmp	r3, #0
   1a22c:	beq	1a3b8 <__assert_fail@plt+0x7dc4>
   1a230:	ldrb	r2, [r3, #16]
   1a234:	cmp	r2, #0
   1a238:	beq	1a2e0 <__assert_fail@plt+0x7cec>
   1a23c:	movw	r2, #6536	; 0x1988
   1a240:	movt	r2, #5
   1a244:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a248:	ldr	r3, [sp, #24]
   1a24c:	ldr	r3, [r3, #160]	; 0xa0
   1a250:	cmp	r3, #0
   1a254:	beq	1840c <__assert_fail@plt+0x5e18>
   1a258:	ldrb	r2, [r3, #16]
   1a25c:	cmp	r2, #0
   1a260:	beq	1a34c <__assert_fail@plt+0x7d58>
   1a264:	movw	r2, #6504	; 0x1968
   1a268:	movt	r2, #5
   1a26c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a270:	ldr	r3, [sp, #20]
   1a274:	ldr	r3, [r3, #160]	; 0xa0
   1a278:	cmp	r3, #0
   1a27c:	beq	183a4 <__assert_fail@plt+0x5db0>
   1a280:	ldrb	r2, [r3, #16]
   1a284:	cmp	r2, #0
   1a288:	beq	1a328 <__assert_fail@plt+0x7d34>
   1a28c:	movw	r2, #6536	; 0x1988
   1a290:	movt	r2, #5
   1a294:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a298:	ldr	r2, [r3, #156]	; 0x9c
   1a29c:	cmp	r2, #0
   1a2a0:	beq	1a370 <__assert_fail@plt+0x7d7c>
   1a2a4:	ldrb	r0, [r2, #16]
   1a2a8:	cmp	r0, #0
   1a2ac:	beq	1a42c <__assert_fail@plt+0x7e38>
   1a2b0:	movw	r2, #6504	; 0x1968
   1a2b4:	movt	r2, #5
   1a2b8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a2bc:	ldr	r2, [r3, #156]	; 0x9c
   1a2c0:	cmp	r2, #0
   1a2c4:	beq	1a394 <__assert_fail@plt+0x7da0>
   1a2c8:	ldrb	r0, [r2, #16]
   1a2cc:	cmp	r0, #0
   1a2d0:	beq	1a408 <__assert_fail@plt+0x7e14>
   1a2d4:	movw	r2, #6536	; 0x1988
   1a2d8:	movt	r2, #5
   1a2dc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a2e0:	ldr	r2, [r3, #156]	; 0x9c
   1a2e4:	cmp	r2, #0
   1a2e8:	beq	1a570 <__assert_fail@plt+0x7f7c>
   1a2ec:	ldrb	r0, [r2, #16]
   1a2f0:	cmp	r0, #0
   1a2f4:	beq	1a4e0 <__assert_fail@plt+0x7eec>
   1a2f8:	movw	r2, #6536	; 0x1988
   1a2fc:	movt	r2, #5
   1a300:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a304:	ldr	r5, [r3, #156]	; 0x9c
   1a308:	cmp	r5, #0
   1a30c:	beq	1a624 <__assert_fail@plt+0x8030>
   1a310:	ldrb	r2, [r5, #16]
   1a314:	cmp	r2, #0
   1a318:	beq	1a504 <__assert_fail@plt+0x7f10>
   1a31c:	movw	r2, #6504	; 0x1968
   1a320:	movt	r2, #5
   1a324:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a328:	ldr	r2, [r3, #156]	; 0x9c
   1a32c:	cmp	r2, #0
   1a330:	beq	1a5dc <__assert_fail@plt+0x7fe8>
   1a334:	ldrb	r0, [r2, #16]
   1a338:	cmp	r0, #0
   1a33c:	beq	1a450 <__assert_fail@plt+0x7e5c>
   1a340:	movw	r2, #6536	; 0x1988
   1a344:	movt	r2, #5
   1a348:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a34c:	ldr	r2, [r3, #156]	; 0x9c
   1a350:	cmp	r2, #0
   1a354:	beq	1a5b8 <__assert_fail@plt+0x7fc4>
   1a358:	ldrb	r0, [r2, #16]
   1a35c:	cmp	r0, #0
   1a360:	beq	1a474 <__assert_fail@plt+0x7e80>
   1a364:	movw	r2, #6504	; 0x1968
   1a368:	movt	r2, #5
   1a36c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a370:	ldr	r3, [r3, #160]	; 0xa0
   1a374:	cmp	r3, #0
   1a378:	beq	1a248 <__assert_fail@plt+0x7c54>
   1a37c:	ldrb	r2, [r3, #16]
   1a380:	cmp	r2, #0
   1a384:	beq	1a498 <__assert_fail@plt+0x7ea4>
   1a388:	movw	r2, #6504	; 0x1968
   1a38c:	movt	r2, #5
   1a390:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a394:	ldr	r3, [r3, #160]	; 0xa0
   1a398:	cmp	r3, #0
   1a39c:	beq	1a270 <__assert_fail@plt+0x7c7c>
   1a3a0:	ldrb	r2, [r3, #16]
   1a3a4:	cmp	r2, #0
   1a3a8:	beq	1a4bc <__assert_fail@plt+0x7ec8>
   1a3ac:	movw	r2, #6536	; 0x1988
   1a3b0:	movt	r2, #5
   1a3b4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a3b8:	ldr	r3, [sp, #28]
   1a3bc:	ldr	r3, [r3, #160]	; 0xa0
   1a3c0:	cmp	r3, #0
   1a3c4:	beq	183cc <__assert_fail@plt+0x5dd8>
   1a3c8:	ldrb	r2, [r3, #16]
   1a3cc:	cmp	r2, #0
   1a3d0:	beq	1a594 <__assert_fail@plt+0x7fa0>
   1a3d4:	movw	r2, #6536	; 0x1988
   1a3d8:	movt	r2, #5
   1a3dc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a3e0:	ldr	r3, [sp, #32]
   1a3e4:	ldr	r5, [r3, #160]	; 0xa0
   1a3e8:	cmp	r5, #0
   1a3ec:	beq	18434 <__assert_fail@plt+0x5e40>
   1a3f0:	ldrb	r3, [r5, #16]
   1a3f4:	cmp	r3, #0
   1a3f8:	beq	1a600 <__assert_fail@plt+0x800c>
   1a3fc:	movw	r2, #6504	; 0x1968
   1a400:	movt	r2, #5
   1a404:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a408:	ldr	r4, [r2, #156]	; 0x9c
   1a40c:	cmp	r4, #0
   1a410:	beq	1a54c <__assert_fail@plt+0x7f58>
   1a414:	ldrb	r0, [r4, #16]
   1a418:	cmp	r0, #0
   1a41c:	beq	1a690 <__assert_fail@plt+0x809c>
   1a420:	movw	r2, #6536	; 0x1988
   1a424:	movt	r2, #5
   1a428:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a42c:	ldr	r6, [r2, #156]	; 0x9c
   1a430:	cmp	r6, #0
   1a434:	beq	1a528 <__assert_fail@plt+0x7f34>
   1a438:	ldrb	r0, [r6, #16]
   1a43c:	cmp	r0, #0
   1a440:	beq	1a7d4 <__assert_fail@plt+0x81e0>
   1a444:	movw	r2, #6504	; 0x1968
   1a448:	movt	r2, #5
   1a44c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a450:	ldr	r4, [r2, #156]	; 0x9c
   1a454:	cmp	r4, #0
   1a458:	beq	1a720 <__assert_fail@plt+0x812c>
   1a45c:	ldrb	r0, [r4, #16]
   1a460:	cmp	r0, #0
   1a464:	beq	1afbc <__assert_fail@plt+0x89c8>
   1a468:	movw	r2, #6536	; 0x1988
   1a46c:	movt	r2, #5
   1a470:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a474:	ldr	r4, [r2, #156]	; 0x9c
   1a478:	cmp	r4, #0
   1a47c:	beq	1a7b0 <__assert_fail@plt+0x81bc>
   1a480:	ldrb	r0, [r4, #16]
   1a484:	cmp	r0, #0
   1a488:	beq	1b26c <__assert_fail@plt+0x8c78>
   1a48c:	movw	r2, #6504	; 0x1968
   1a490:	movt	r2, #5
   1a494:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a498:	ldr	r2, [r3, #156]	; 0x9c
   1a49c:	cmp	r2, #0
   1a4a0:	beq	1a744 <__assert_fail@plt+0x8150>
   1a4a4:	ldrb	r0, [r2, #16]
   1a4a8:	cmp	r0, #0
   1a4ac:	beq	1b07c <__assert_fail@plt+0x8a88>
   1a4b0:	movw	r2, #6504	; 0x1968
   1a4b4:	movt	r2, #5
   1a4b8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a4bc:	ldr	r2, [r3, #156]	; 0x9c
   1a4c0:	cmp	r2, #0
   1a4c4:	beq	1a768 <__assert_fail@plt+0x8174>
   1a4c8:	ldrb	r0, [r2, #16]
   1a4cc:	cmp	r0, #0
   1a4d0:	beq	1b0a0 <__assert_fail@plt+0x8aac>
   1a4d4:	movw	r2, #6536	; 0x1988
   1a4d8:	movt	r2, #5
   1a4dc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a4e0:	ldr	r4, [r2, #156]	; 0x9c
   1a4e4:	cmp	r4, #0
   1a4e8:	beq	1a78c <__assert_fail@plt+0x8198>
   1a4ec:	ldrb	r0, [r4, #16]
   1a4f0:	cmp	r0, #0
   1a4f4:	beq	1b1d0 <__assert_fail@plt+0x8bdc>
   1a4f8:	movw	r2, #6536	; 0x1988
   1a4fc:	movt	r2, #5
   1a500:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a504:	ldr	r2, [r5, #156]	; 0x9c
   1a508:	cmp	r2, #0
   1a50c:	beq	1a7f8 <__assert_fail@plt+0x8204>
   1a510:	ldrb	r0, [r2, #16]
   1a514:	cmp	r0, #0
   1a518:	beq	1a938 <__assert_fail@plt+0x8344>
   1a51c:	movw	r2, #6504	; 0x1968
   1a520:	movt	r2, #5
   1a524:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a528:	ldr	r2, [r2, #160]	; 0xa0
   1a52c:	cmp	r2, #0
   1a530:	beq	1a370 <__assert_fail@plt+0x7d7c>
   1a534:	ldrb	r0, [r2, #16]
   1a538:	cmp	r0, #0
   1a53c:	beq	1ac10 <__assert_fail@plt+0x861c>
   1a540:	movw	r2, #6504	; 0x1968
   1a544:	movt	r2, #5
   1a548:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a54c:	ldr	r2, [r2, #160]	; 0xa0
   1a550:	cmp	r2, #0
   1a554:	beq	1a394 <__assert_fail@plt+0x7da0>
   1a558:	ldrb	r0, [r2, #16]
   1a55c:	cmp	r0, #0
   1a560:	beq	1ac34 <__assert_fail@plt+0x8640>
   1a564:	movw	r2, #6536	; 0x1988
   1a568:	movt	r2, #5
   1a56c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a570:	ldr	r3, [r3, #160]	; 0xa0
   1a574:	cmp	r3, #0
   1a578:	beq	1a3b8 <__assert_fail@plt+0x7dc4>
   1a57c:	ldrb	r2, [r3, #16]
   1a580:	cmp	r2, #0
   1a584:	beq	1a6b4 <__assert_fail@plt+0x80c0>
   1a588:	movw	r2, #6536	; 0x1988
   1a58c:	movt	r2, #5
   1a590:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a594:	ldr	r2, [r3, #156]	; 0x9c
   1a598:	cmp	r2, #0
   1a59c:	beq	1a6fc <__assert_fail@plt+0x8108>
   1a5a0:	ldrb	r0, [r2, #16]
   1a5a4:	cmp	r0, #0
   1a5a8:	beq	1a6d8 <__assert_fail@plt+0x80e4>
   1a5ac:	movw	r2, #6536	; 0x1988
   1a5b0:	movt	r2, #5
   1a5b4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a5b8:	ldr	r3, [r3, #160]	; 0xa0
   1a5bc:	cmp	r3, #0
   1a5c0:	beq	1840c <__assert_fail@plt+0x5e18>
   1a5c4:	ldrb	r2, [r3, #16]
   1a5c8:	cmp	r2, #0
   1a5cc:	beq	1a648 <__assert_fail@plt+0x8054>
   1a5d0:	movw	r2, #6504	; 0x1968
   1a5d4:	movt	r2, #5
   1a5d8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a5dc:	ldr	r3, [r3, #160]	; 0xa0
   1a5e0:	cmp	r3, #0
   1a5e4:	beq	183a4 <__assert_fail@plt+0x5db0>
   1a5e8:	ldrb	r2, [r3, #16]
   1a5ec:	cmp	r2, #0
   1a5f0:	beq	1a840 <__assert_fail@plt+0x824c>
   1a5f4:	movw	r2, #6536	; 0x1988
   1a5f8:	movt	r2, #5
   1a5fc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a600:	ldr	r3, [r5, #156]	; 0x9c
   1a604:	cmp	r3, #0
   1a608:	beq	1a864 <__assert_fail@plt+0x8270>
   1a60c:	ldrb	r2, [r3, #16]
   1a610:	cmp	r2, #0
   1a614:	beq	1a81c <__assert_fail@plt+0x8228>
   1a618:	movw	r2, #6504	; 0x1968
   1a61c:	movt	r2, #5
   1a620:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a624:	ldr	r3, [r3, #160]	; 0xa0
   1a628:	cmp	r3, #0
   1a62c:	beq	1a3e0 <__assert_fail@plt+0x7dec>
   1a630:	ldrb	r2, [r3, #16]
   1a634:	cmp	r2, #0
   1a638:	beq	1a66c <__assert_fail@plt+0x8078>
   1a63c:	movw	r2, #6504	; 0x1968
   1a640:	movt	r2, #5
   1a644:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a648:	ldr	r2, [r3, #156]	; 0x9c
   1a64c:	cmp	r2, #0
   1a650:	beq	1ae5c <__assert_fail@plt+0x8868>
   1a654:	ldrb	r0, [r2, #16]
   1a658:	cmp	r0, #0
   1a65c:	beq	1acec <__assert_fail@plt+0x86f8>
   1a660:	movw	r2, #6504	; 0x1968
   1a664:	movt	r2, #5
   1a668:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a66c:	ldr	r2, [r3, #156]	; 0x9c
   1a670:	cmp	r2, #0
   1a674:	beq	1aed4 <__assert_fail@plt+0x88e0>
   1a678:	ldrb	r0, [r2, #16]
   1a67c:	cmp	r0, #0
   1a680:	beq	1acd0 <__assert_fail@plt+0x86dc>
   1a684:	movw	r2, #6504	; 0x1968
   1a688:	movt	r2, #5
   1a68c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a690:	ldr	r5, [r4, #156]	; 0x9c
   1a694:	cmp	r5, #0
   1a698:	beq	1ab28 <__assert_fail@plt+0x8534>
   1a69c:	ldrb	r0, [r5, #16]
   1a6a0:	cmp	r0, #0
   1a6a4:	beq	1aacc <__assert_fail@plt+0x84d8>
   1a6a8:	movw	r2, #6536	; 0x1988
   1a6ac:	movt	r2, #5
   1a6b0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a6b4:	ldr	r2, [r3, #156]	; 0x9c
   1a6b8:	cmp	r2, #0
   1a6bc:	beq	1ad34 <__assert_fail@plt+0x8740>
   1a6c0:	ldrb	r0, [r2, #16]
   1a6c4:	cmp	r0, #0
   1a6c8:	beq	1ad10 <__assert_fail@plt+0x871c>
   1a6cc:	movw	r2, #6536	; 0x1988
   1a6d0:	movt	r2, #5
   1a6d4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a6d8:	ldr	r4, [r2, #156]	; 0x9c
   1a6dc:	cmp	r4, #0
   1a6e0:	beq	1aa8c <__assert_fail@plt+0x8498>
   1a6e4:	ldrb	r0, [r4, #16]
   1a6e8:	cmp	r0, #0
   1a6ec:	beq	1aa68 <__assert_fail@plt+0x8474>
   1a6f0:	movw	r2, #6536	; 0x1988
   1a6f4:	movt	r2, #5
   1a6f8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a6fc:	ldr	r3, [r3, #160]	; 0xa0
   1a700:	cmp	r3, #0
   1a704:	beq	183cc <__assert_fail@plt+0x5dd8>
   1a708:	ldrb	r2, [r3, #16]
   1a70c:	cmp	r2, #0
   1a710:	beq	1afe0 <__assert_fail@plt+0x89ec>
   1a714:	movw	r2, #6536	; 0x1988
   1a718:	movt	r2, #5
   1a71c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a720:	ldr	r2, [r2, #160]	; 0xa0
   1a724:	cmp	r2, #0
   1a728:	beq	1a5dc <__assert_fail@plt+0x7fe8>
   1a72c:	ldrb	r0, [r2, #16]
   1a730:	cmp	r0, #0
   1a734:	beq	1b4a8 <__assert_fail@plt+0x8eb4>
   1a738:	movw	r2, #6536	; 0x1988
   1a73c:	movt	r2, #5
   1a740:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a744:	ldr	r3, [r3, #160]	; 0xa0
   1a748:	cmp	r3, #0
   1a74c:	beq	1a248 <__assert_fail@plt+0x7c54>
   1a750:	ldrb	r2, [r3, #16]
   1a754:	cmp	r2, #0
   1a758:	beq	1b0c4 <__assert_fail@plt+0x8ad0>
   1a75c:	movw	r2, #6504	; 0x1968
   1a760:	movt	r2, #5
   1a764:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a768:	ldr	r3, [r3, #160]	; 0xa0
   1a76c:	cmp	r3, #0
   1a770:	beq	1a270 <__assert_fail@plt+0x7c7c>
   1a774:	ldrb	r2, [r3, #16]
   1a778:	cmp	r2, #0
   1a77c:	beq	1b1f4 <__assert_fail@plt+0x8c00>
   1a780:	movw	r2, #6536	; 0x1988
   1a784:	movt	r2, #5
   1a788:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a78c:	ldr	r2, [r2, #160]	; 0xa0
   1a790:	cmp	r2, #0
   1a794:	beq	1a570 <__assert_fail@plt+0x7f7c>
   1a798:	ldrb	r0, [r2, #16]
   1a79c:	cmp	r0, #0
   1a7a0:	beq	1b290 <__assert_fail@plt+0x8c9c>
   1a7a4:	movw	r2, #6536	; 0x1988
   1a7a8:	movt	r2, #5
   1a7ac:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a7b0:	ldr	r2, [r2, #160]	; 0xa0
   1a7b4:	cmp	r2, #0
   1a7b8:	beq	1a5b8 <__assert_fail@plt+0x7fc4>
   1a7bc:	ldrb	r0, [r2, #16]
   1a7c0:	cmp	r0, #0
   1a7c4:	beq	1a95c <__assert_fail@plt+0x8368>
   1a7c8:	movw	r2, #6504	; 0x1968
   1a7cc:	movt	r2, #5
   1a7d0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a7d4:	ldr	r4, [r6, #156]	; 0x9c
   1a7d8:	cmp	r4, #0
   1a7dc:	beq	1b310 <__assert_fail@plt+0x8d1c>
   1a7e0:	ldrb	r0, [r4, #16]
   1a7e4:	cmp	r0, #0
   1a7e8:	beq	1b2ec <__assert_fail@plt+0x8cf8>
   1a7ec:	movw	r2, #6504	; 0x1968
   1a7f0:	movt	r2, #5
   1a7f4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a7f8:	ldr	r2, [r5, #160]	; 0xa0
   1a7fc:	cmp	r2, #0
   1a800:	beq	1a624 <__assert_fail@plt+0x8030>
   1a804:	ldrb	r0, [r2, #16]
   1a808:	cmp	r0, #0
   1a80c:	beq	1a888 <__assert_fail@plt+0x8294>
   1a810:	movw	r2, #6504	; 0x1968
   1a814:	movt	r2, #5
   1a818:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a81c:	ldr	r2, [r3, #156]	; 0x9c
   1a820:	cmp	r2, #0
   1a824:	beq	1b53c <__assert_fail@plt+0x8f48>
   1a828:	ldrb	r0, [r2, #16]
   1a82c:	cmp	r0, #0
   1a830:	beq	1b2c8 <__assert_fail@plt+0x8cd4>
   1a834:	movw	r2, #6504	; 0x1968
   1a838:	movt	r2, #5
   1a83c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a840:	ldr	r2, [r3, #156]	; 0x9c
   1a844:	cmp	r2, #0
   1a848:	beq	1b3dc <__assert_fail@plt+0x8de8>
   1a84c:	ldrb	r0, [r2, #16]
   1a850:	cmp	r0, #0
   1a854:	beq	1b3c0 <__assert_fail@plt+0x8dcc>
   1a858:	movw	r2, #6536	; 0x1988
   1a85c:	movt	r2, #5
   1a860:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a864:	ldr	r3, [r5, #160]	; 0xa0
   1a868:	cmp	r3, #0
   1a86c:	beq	18434 <__assert_fail@plt+0x5e40>
   1a870:	ldrb	r2, [r3, #16]
   1a874:	cmp	r2, #0
   1a878:	beq	1a8a4 <__assert_fail@plt+0x82b0>
   1a87c:	movw	r2, #6504	; 0x1968
   1a880:	movt	r2, #5
   1a884:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a888:	ldr	r0, [r2, #156]	; 0x9c
   1a88c:	bl	1655c <__assert_fail@plt+0x3f68>
   1a890:	cmp	r0, #0
   1a894:	beq	1a8c8 <__assert_fail@plt+0x82d4>
   1a898:	movw	r2, #6504	; 0x1968
   1a89c:	movt	r2, #5
   1a8a0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a8a4:	ldr	r2, [r3, #156]	; 0x9c
   1a8a8:	cmp	r2, #0
   1a8ac:	beq	1a900 <__assert_fail@plt+0x830c>
   1a8b0:	ldrb	r0, [r2, #16]
   1a8b4:	cmp	r0, #0
   1a8b8:	beq	1a8e4 <__assert_fail@plt+0x82f0>
   1a8bc:	movw	r2, #6504	; 0x1968
   1a8c0:	movt	r2, #5
   1a8c4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a8c8:	ldr	r0, [r2, #160]	; 0xa0
   1a8cc:	bl	1655c <__assert_fail@plt+0x3f68>
   1a8d0:	cmp	r0, #0
   1a8d4:	beq	1a624 <__assert_fail@plt+0x8030>
   1a8d8:	movw	r2, #6504	; 0x1968
   1a8dc:	movt	r2, #5
   1a8e0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a8e4:	ldr	r0, [r2, #156]	; 0x9c
   1a8e8:	bl	1655c <__assert_fail@plt+0x3f68>
   1a8ec:	cmp	r0, #0
   1a8f0:	beq	1a91c <__assert_fail@plt+0x8328>
   1a8f4:	movw	r2, #6504	; 0x1968
   1a8f8:	movt	r2, #5
   1a8fc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a900:	ldr	r0, [r3, #160]	; 0xa0
   1a904:	bl	1655c <__assert_fail@plt+0x3f68>
   1a908:	cmp	r0, #0
   1a90c:	beq	18434 <__assert_fail@plt+0x5e40>
   1a910:	movw	r2, #6504	; 0x1968
   1a914:	movt	r2, #5
   1a918:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a91c:	ldr	r0, [r2, #160]	; 0xa0
   1a920:	bl	1655c <__assert_fail@plt+0x3f68>
   1a924:	cmp	r0, #0
   1a928:	beq	1a900 <__assert_fail@plt+0x830c>
   1a92c:	movw	r2, #6504	; 0x1968
   1a930:	movt	r2, #5
   1a934:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a938:	ldr	r4, [r2, #156]	; 0x9c
   1a93c:	cmp	r4, #0
   1a940:	beq	1a99c <__assert_fail@plt+0x83a8>
   1a944:	ldrb	r0, [r4, #16]
   1a948:	cmp	r0, #0
   1a94c:	beq	1a980 <__assert_fail@plt+0x838c>
   1a950:	movw	r2, #6504	; 0x1968
   1a954:	movt	r2, #5
   1a958:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a95c:	ldr	r4, [r2, #156]	; 0x9c
   1a960:	cmp	r4, #0
   1a964:	beq	1aa14 <__assert_fail@plt+0x8420>
   1a968:	ldrb	r0, [r4, #16]
   1a96c:	cmp	r0, #0
   1a970:	beq	1a9f8 <__assert_fail@plt+0x8404>
   1a974:	movw	r2, #6504	; 0x1968
   1a978:	movt	r2, #5
   1a97c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a980:	ldr	r0, [r4, #156]	; 0x9c
   1a984:	bl	1655c <__assert_fail@plt+0x3f68>
   1a988:	cmp	r0, #0
   1a98c:	beq	1a9c0 <__assert_fail@plt+0x83cc>
   1a990:	movw	r2, #6504	; 0x1968
   1a994:	movt	r2, #5
   1a998:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a99c:	ldr	r2, [r2, #160]	; 0xa0
   1a9a0:	cmp	r2, #0
   1a9a4:	beq	1a7f8 <__assert_fail@plt+0x8204>
   1a9a8:	ldrb	r0, [r2, #16]
   1a9ac:	cmp	r0, #0
   1a9b0:	beq	1a9dc <__assert_fail@plt+0x83e8>
   1a9b4:	movw	r2, #6504	; 0x1968
   1a9b8:	movt	r2, #5
   1a9bc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a9c0:	ldr	r0, [r4, #160]	; 0xa0
   1a9c4:	bl	1655c <__assert_fail@plt+0x3f68>
   1a9c8:	cmp	r0, #0
   1a9cc:	beq	1a99c <__assert_fail@plt+0x83a8>
   1a9d0:	movw	r2, #6504	; 0x1968
   1a9d4:	movt	r2, #5
   1a9d8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a9dc:	ldr	r0, [r2, #156]	; 0x9c
   1a9e0:	bl	1655c <__assert_fail@plt+0x3f68>
   1a9e4:	cmp	r0, #0
   1a9e8:	beq	1aa30 <__assert_fail@plt+0x843c>
   1a9ec:	movw	r2, #6504	; 0x1968
   1a9f0:	movt	r2, #5
   1a9f4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1a9f8:	ldr	r0, [r4, #156]	; 0x9c
   1a9fc:	bl	1655c <__assert_fail@plt+0x3f68>
   1aa00:	cmp	r0, #0
   1aa04:	beq	1aa4c <__assert_fail@plt+0x8458>
   1aa08:	movw	r2, #6504	; 0x1968
   1aa0c:	movt	r2, #5
   1aa10:	b	182a8 <__assert_fail@plt+0x5cb4>
   1aa14:	ldr	r0, [r2, #160]	; 0xa0
   1aa18:	bl	1655c <__assert_fail@plt+0x3f68>
   1aa1c:	cmp	r0, #0
   1aa20:	beq	1a5b8 <__assert_fail@plt+0x7fc4>
   1aa24:	movw	r2, #6504	; 0x1968
   1aa28:	movt	r2, #5
   1aa2c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1aa30:	ldr	r0, [r2, #160]	; 0xa0
   1aa34:	bl	1655c <__assert_fail@plt+0x3f68>
   1aa38:	cmp	r0, #0
   1aa3c:	beq	1a7f8 <__assert_fail@plt+0x8204>
   1aa40:	movw	r2, #6504	; 0x1968
   1aa44:	movt	r2, #5
   1aa48:	b	182a8 <__assert_fail@plt+0x5cb4>
   1aa4c:	ldr	r0, [r4, #160]	; 0xa0
   1aa50:	bl	1655c <__assert_fail@plt+0x3f68>
   1aa54:	cmp	r0, #0
   1aa58:	beq	1aa14 <__assert_fail@plt+0x8420>
   1aa5c:	movw	r2, #6504	; 0x1968
   1aa60:	movt	r2, #5
   1aa64:	b	182a8 <__assert_fail@plt+0x5cb4>
   1aa68:	ldr	r5, [r4, #156]	; 0x9c
   1aa6c:	cmp	r5, #0
   1aa70:	beq	1aaf0 <__assert_fail@plt+0x84fc>
   1aa74:	ldrb	r0, [r5, #16]
   1aa78:	cmp	r0, #0
   1aa7c:	beq	1aab0 <__assert_fail@plt+0x84bc>
   1aa80:	movw	r2, #6536	; 0x1988
   1aa84:	movt	r2, #5
   1aa88:	b	182a8 <__assert_fail@plt+0x5cb4>
   1aa8c:	ldr	r2, [r2, #160]	; 0xa0
   1aa90:	cmp	r2, #0
   1aa94:	beq	1a6fc <__assert_fail@plt+0x8108>
   1aa98:	ldrb	r0, [r2, #16]
   1aa9c:	cmp	r0, #0
   1aaa0:	beq	1ab0c <__assert_fail@plt+0x8518>
   1aaa4:	movw	r2, #6536	; 0x1988
   1aaa8:	movt	r2, #5
   1aaac:	b	182a8 <__assert_fail@plt+0x5cb4>
   1aab0:	ldr	r0, [r5, #156]	; 0x9c
   1aab4:	bl	1655c <__assert_fail@plt+0x3f68>
   1aab8:	cmp	r0, #0
   1aabc:	beq	1ab68 <__assert_fail@plt+0x8574>
   1aac0:	movw	r2, #6536	; 0x1988
   1aac4:	movt	r2, #5
   1aac8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1aacc:	ldr	r6, [r5, #156]	; 0x9c
   1aad0:	cmp	r6, #0
   1aad4:	beq	1ab84 <__assert_fail@plt+0x8590>
   1aad8:	ldrb	r0, [r6, #16]
   1aadc:	cmp	r0, #0
   1aae0:	beq	1ab4c <__assert_fail@plt+0x8558>
   1aae4:	movw	r2, #6536	; 0x1988
   1aae8:	movt	r2, #5
   1aaec:	b	182a8 <__assert_fail@plt+0x5cb4>
   1aaf0:	ldr	r0, [r4, #160]	; 0xa0
   1aaf4:	bl	1655c <__assert_fail@plt+0x3f68>
   1aaf8:	cmp	r0, #0
   1aafc:	beq	1aa8c <__assert_fail@plt+0x8498>
   1ab00:	movw	r2, #6536	; 0x1988
   1ab04:	movt	r2, #5
   1ab08:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ab0c:	ldr	r0, [r2, #156]	; 0x9c
   1ab10:	bl	1655c <__assert_fail@plt+0x3f68>
   1ab14:	cmp	r0, #0
   1ab18:	beq	1abbc <__assert_fail@plt+0x85c8>
   1ab1c:	movw	r2, #6536	; 0x1988
   1ab20:	movt	r2, #5
   1ab24:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ab28:	ldr	r4, [r4, #160]	; 0xa0
   1ab2c:	cmp	r4, #0
   1ab30:	beq	1a54c <__assert_fail@plt+0x7f58>
   1ab34:	ldrb	r0, [r4, #16]
   1ab38:	cmp	r0, #0
   1ab3c:	beq	1aba0 <__assert_fail@plt+0x85ac>
   1ab40:	movw	r2, #6536	; 0x1988
   1ab44:	movt	r2, #5
   1ab48:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ab4c:	ldr	r0, [r6, #156]	; 0x9c
   1ab50:	bl	1655c <__assert_fail@plt+0x3f68>
   1ab54:	cmp	r0, #0
   1ab58:	beq	1abd8 <__assert_fail@plt+0x85e4>
   1ab5c:	movw	r2, #6536	; 0x1988
   1ab60:	movt	r2, #5
   1ab64:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ab68:	ldr	r0, [r5, #160]	; 0xa0
   1ab6c:	bl	1655c <__assert_fail@plt+0x3f68>
   1ab70:	cmp	r0, #0
   1ab74:	beq	1aaf0 <__assert_fail@plt+0x84fc>
   1ab78:	movw	r2, #6536	; 0x1988
   1ab7c:	movt	r2, #5
   1ab80:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ab84:	ldr	r0, [r5, #160]	; 0xa0
   1ab88:	bl	1655c <__assert_fail@plt+0x3f68>
   1ab8c:	cmp	r0, #0
   1ab90:	beq	1ab28 <__assert_fail@plt+0x8534>
   1ab94:	movw	r2, #6536	; 0x1988
   1ab98:	movt	r2, #5
   1ab9c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1aba0:	ldr	r0, [r4, #156]	; 0x9c
   1aba4:	bl	1655c <__assert_fail@plt+0x3f68>
   1aba8:	cmp	r0, #0
   1abac:	beq	1abf4 <__assert_fail@plt+0x8600>
   1abb0:	movw	r2, #6536	; 0x1988
   1abb4:	movt	r2, #5
   1abb8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1abbc:	ldr	r0, [r2, #160]	; 0xa0
   1abc0:	bl	1655c <__assert_fail@plt+0x3f68>
   1abc4:	cmp	r0, #0
   1abc8:	beq	1a6fc <__assert_fail@plt+0x8108>
   1abcc:	movw	r2, #6536	; 0x1988
   1abd0:	movt	r2, #5
   1abd4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1abd8:	ldr	r0, [r6, #160]	; 0xa0
   1abdc:	bl	1655c <__assert_fail@plt+0x3f68>
   1abe0:	cmp	r0, #0
   1abe4:	beq	1ab84 <__assert_fail@plt+0x8590>
   1abe8:	movw	r2, #6536	; 0x1988
   1abec:	movt	r2, #5
   1abf0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1abf4:	ldr	r0, [r4, #160]	; 0xa0
   1abf8:	bl	1655c <__assert_fail@plt+0x3f68>
   1abfc:	cmp	r0, #0
   1ac00:	beq	1a54c <__assert_fail@plt+0x7f58>
   1ac04:	movw	r2, #6536	; 0x1988
   1ac08:	movt	r2, #5
   1ac0c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ac10:	ldr	r4, [r2, #156]	; 0x9c
   1ac14:	cmp	r4, #0
   1ac18:	beq	1ac74 <__assert_fail@plt+0x8680>
   1ac1c:	ldrb	r0, [r4, #16]
   1ac20:	cmp	r0, #0
   1ac24:	beq	1ac58 <__assert_fail@plt+0x8664>
   1ac28:	movw	r2, #6504	; 0x1968
   1ac2c:	movt	r2, #5
   1ac30:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ac34:	ldr	r4, [r2, #156]	; 0x9c
   1ac38:	cmp	r4, #0
   1ac3c:	beq	1ae00 <__assert_fail@plt+0x880c>
   1ac40:	ldrb	r0, [r4, #16]
   1ac44:	cmp	r0, #0
   1ac48:	beq	1ade4 <__assert_fail@plt+0x87f0>
   1ac4c:	movw	r2, #6536	; 0x1988
   1ac50:	movt	r2, #5
   1ac54:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ac58:	ldr	r0, [r4, #156]	; 0x9c
   1ac5c:	bl	1655c <__assert_fail@plt+0x3f68>
   1ac60:	cmp	r0, #0
   1ac64:	beq	1ac98 <__assert_fail@plt+0x86a4>
   1ac68:	movw	r2, #6504	; 0x1968
   1ac6c:	movt	r2, #5
   1ac70:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ac74:	ldr	r2, [r2, #160]	; 0xa0
   1ac78:	cmp	r2, #0
   1ac7c:	beq	1a370 <__assert_fail@plt+0x7d7c>
   1ac80:	ldrb	r0, [r2, #16]
   1ac84:	cmp	r0, #0
   1ac88:	beq	1acb4 <__assert_fail@plt+0x86c0>
   1ac8c:	movw	r2, #6504	; 0x1968
   1ac90:	movt	r2, #5
   1ac94:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ac98:	ldr	r0, [r4, #160]	; 0xa0
   1ac9c:	bl	1655c <__assert_fail@plt+0x3f68>
   1aca0:	cmp	r0, #0
   1aca4:	beq	1ac74 <__assert_fail@plt+0x8680>
   1aca8:	movw	r2, #6504	; 0x1968
   1acac:	movt	r2, #5
   1acb0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1acb4:	ldr	r0, [r2, #156]	; 0x9c
   1acb8:	bl	1655c <__assert_fail@plt+0x3f68>
   1acbc:	cmp	r0, #0
   1acc0:	beq	1af14 <__assert_fail@plt+0x8920>
   1acc4:	movw	r2, #6504	; 0x1968
   1acc8:	movt	r2, #5
   1accc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1acd0:	ldr	r0, [r2, #156]	; 0x9c
   1acd4:	bl	1655c <__assert_fail@plt+0x3f68>
   1acd8:	cmp	r0, #0
   1acdc:	beq	1ae80 <__assert_fail@plt+0x888c>
   1ace0:	movw	r2, #6504	; 0x1968
   1ace4:	movt	r2, #5
   1ace8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1acec:	ldr	r4, [r2, #156]	; 0x9c
   1acf0:	cmp	r4, #0
   1acf4:	beq	1af30 <__assert_fail@plt+0x893c>
   1acf8:	ldrb	r0, [r4, #16]
   1acfc:	cmp	r0, #0
   1ad00:	beq	1aef8 <__assert_fail@plt+0x8904>
   1ad04:	movw	r2, #6504	; 0x1968
   1ad08:	movt	r2, #5
   1ad0c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ad10:	ldr	r4, [r2, #156]	; 0x9c
   1ad14:	cmp	r4, #0
   1ad18:	beq	1ad74 <__assert_fail@plt+0x8780>
   1ad1c:	ldrb	r0, [r4, #16]
   1ad20:	cmp	r0, #0
   1ad24:	beq	1ad58 <__assert_fail@plt+0x8764>
   1ad28:	movw	r2, #6536	; 0x1988
   1ad2c:	movt	r2, #5
   1ad30:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ad34:	ldr	r3, [r3, #160]	; 0xa0
   1ad38:	cmp	r3, #0
   1ad3c:	beq	1a3b8 <__assert_fail@plt+0x7dc4>
   1ad40:	ldrb	r2, [r3, #16]
   1ad44:	cmp	r2, #0
   1ad48:	beq	1ad90 <__assert_fail@plt+0x879c>
   1ad4c:	movw	r2, #6536	; 0x1988
   1ad50:	movt	r2, #5
   1ad54:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ad58:	ldr	r0, [r4, #156]	; 0x9c
   1ad5c:	bl	1655c <__assert_fail@plt+0x3f68>
   1ad60:	cmp	r0, #0
   1ad64:	beq	1adac <__assert_fail@plt+0x87b8>
   1ad68:	movw	r2, #6536	; 0x1988
   1ad6c:	movt	r2, #5
   1ad70:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ad74:	ldr	r0, [r2, #160]	; 0xa0
   1ad78:	bl	1655c <__assert_fail@plt+0x3f68>
   1ad7c:	cmp	r0, #0
   1ad80:	beq	1ad34 <__assert_fail@plt+0x8740>
   1ad84:	movw	r2, #6536	; 0x1988
   1ad88:	movt	r2, #5
   1ad8c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ad90:	ldr	r0, [r3, #156]	; 0x9c
   1ad94:	bl	1655c <__assert_fail@plt+0x3f68>
   1ad98:	cmp	r0, #0
   1ad9c:	beq	1adc8 <__assert_fail@plt+0x87d4>
   1ada0:	movw	r2, #6536	; 0x1988
   1ada4:	movt	r2, #5
   1ada8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1adac:	ldr	r0, [r4, #160]	; 0xa0
   1adb0:	bl	1655c <__assert_fail@plt+0x3f68>
   1adb4:	cmp	r0, #0
   1adb8:	beq	1ad74 <__assert_fail@plt+0x8780>
   1adbc:	movw	r2, #6536	; 0x1988
   1adc0:	movt	r2, #5
   1adc4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1adc8:	ldr	r0, [r3, #160]	; 0xa0
   1adcc:	bl	1655c <__assert_fail@plt+0x3f68>
   1add0:	cmp	r0, #0
   1add4:	beq	1a3b8 <__assert_fail@plt+0x7dc4>
   1add8:	movw	r2, #6536	; 0x1988
   1addc:	movt	r2, #5
   1ade0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ade4:	ldr	r0, [r4, #156]	; 0x9c
   1ade8:	bl	1655c <__assert_fail@plt+0x3f68>
   1adec:	cmp	r0, #0
   1adf0:	beq	1ae24 <__assert_fail@plt+0x8830>
   1adf4:	movw	r2, #6536	; 0x1988
   1adf8:	movt	r2, #5
   1adfc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ae00:	ldr	r2, [r2, #160]	; 0xa0
   1ae04:	cmp	r2, #0
   1ae08:	beq	1a394 <__assert_fail@plt+0x7da0>
   1ae0c:	ldrb	r0, [r2, #16]
   1ae10:	cmp	r0, #0
   1ae14:	beq	1ae40 <__assert_fail@plt+0x884c>
   1ae18:	movw	r2, #6536	; 0x1988
   1ae1c:	movt	r2, #5
   1ae20:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ae24:	ldr	r0, [r4, #160]	; 0xa0
   1ae28:	bl	1655c <__assert_fail@plt+0x3f68>
   1ae2c:	cmp	r0, #0
   1ae30:	beq	1ae00 <__assert_fail@plt+0x880c>
   1ae34:	movw	r2, #6536	; 0x1988
   1ae38:	movt	r2, #5
   1ae3c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ae40:	ldr	r0, [r2, #156]	; 0x9c
   1ae44:	bl	1655c <__assert_fail@plt+0x3f68>
   1ae48:	cmp	r0, #0
   1ae4c:	beq	1ae9c <__assert_fail@plt+0x88a8>
   1ae50:	movw	r2, #6536	; 0x1988
   1ae54:	movt	r2, #5
   1ae58:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ae5c:	ldr	r3, [r3, #160]	; 0xa0
   1ae60:	cmp	r3, #0
   1ae64:	beq	1840c <__assert_fail@plt+0x5e18>
   1ae68:	ldrb	r2, [r3, #16]
   1ae6c:	cmp	r2, #0
   1ae70:	beq	1aeb8 <__assert_fail@plt+0x88c4>
   1ae74:	movw	r2, #6504	; 0x1968
   1ae78:	movt	r2, #5
   1ae7c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ae80:	ldr	r0, [r2, #160]	; 0xa0
   1ae84:	bl	1655c <__assert_fail@plt+0x3f68>
   1ae88:	cmp	r0, #0
   1ae8c:	beq	1aed4 <__assert_fail@plt+0x88e0>
   1ae90:	movw	r2, #6504	; 0x1968
   1ae94:	movt	r2, #5
   1ae98:	b	182a8 <__assert_fail@plt+0x5cb4>
   1ae9c:	ldr	r0, [r2, #160]	; 0xa0
   1aea0:	bl	1655c <__assert_fail@plt+0x3f68>
   1aea4:	cmp	r0, #0
   1aea8:	beq	1a394 <__assert_fail@plt+0x7da0>
   1aeac:	movw	r2, #6536	; 0x1988
   1aeb0:	movt	r2, #5
   1aeb4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1aeb8:	ldr	r0, [r3, #156]	; 0x9c
   1aebc:	bl	1655c <__assert_fail@plt+0x3f68>
   1aec0:	cmp	r0, #0
   1aec4:	beq	1af68 <__assert_fail@plt+0x8974>
   1aec8:	movw	r2, #6504	; 0x1968
   1aecc:	movt	r2, #5
   1aed0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1aed4:	ldr	r3, [r3, #160]	; 0xa0
   1aed8:	cmp	r3, #0
   1aedc:	beq	1a3e0 <__assert_fail@plt+0x7dec>
   1aee0:	ldrb	r2, [r3, #16]
   1aee4:	cmp	r2, #0
   1aee8:	beq	1af4c <__assert_fail@plt+0x8958>
   1aeec:	movw	r2, #6504	; 0x1968
   1aef0:	movt	r2, #5
   1aef4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1aef8:	ldr	r0, [r4, #156]	; 0x9c
   1aefc:	bl	1655c <__assert_fail@plt+0x3f68>
   1af00:	cmp	r0, #0
   1af04:	beq	1af84 <__assert_fail@plt+0x8990>
   1af08:	movw	r2, #6504	; 0x1968
   1af0c:	movt	r2, #5
   1af10:	b	182a8 <__assert_fail@plt+0x5cb4>
   1af14:	ldr	r0, [r2, #160]	; 0xa0
   1af18:	bl	1655c <__assert_fail@plt+0x3f68>
   1af1c:	cmp	r0, #0
   1af20:	beq	1a370 <__assert_fail@plt+0x7d7c>
   1af24:	movw	r2, #6504	; 0x1968
   1af28:	movt	r2, #5
   1af2c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1af30:	ldr	r0, [r2, #160]	; 0xa0
   1af34:	bl	1655c <__assert_fail@plt+0x3f68>
   1af38:	cmp	r0, #0
   1af3c:	beq	1ae5c <__assert_fail@plt+0x8868>
   1af40:	movw	r2, #6504	; 0x1968
   1af44:	movt	r2, #5
   1af48:	b	182a8 <__assert_fail@plt+0x5cb4>
   1af4c:	ldr	r0, [r3, #156]	; 0x9c
   1af50:	bl	1655c <__assert_fail@plt+0x3f68>
   1af54:	cmp	r0, #0
   1af58:	beq	1afa0 <__assert_fail@plt+0x89ac>
   1af5c:	movw	r2, #6504	; 0x1968
   1af60:	movt	r2, #5
   1af64:	b	182a8 <__assert_fail@plt+0x5cb4>
   1af68:	ldr	r0, [r3, #160]	; 0xa0
   1af6c:	bl	1655c <__assert_fail@plt+0x3f68>
   1af70:	cmp	r0, #0
   1af74:	beq	1840c <__assert_fail@plt+0x5e18>
   1af78:	movw	r2, #6504	; 0x1968
   1af7c:	movt	r2, #5
   1af80:	b	182a8 <__assert_fail@plt+0x5cb4>
   1af84:	ldr	r0, [r4, #160]	; 0xa0
   1af88:	bl	1655c <__assert_fail@plt+0x3f68>
   1af8c:	cmp	r0, #0
   1af90:	beq	1af30 <__assert_fail@plt+0x893c>
   1af94:	movw	r2, #6504	; 0x1968
   1af98:	movt	r2, #5
   1af9c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1afa0:	ldr	r0, [r3, #160]	; 0xa0
   1afa4:	bl	1655c <__assert_fail@plt+0x3f68>
   1afa8:	cmp	r0, #0
   1afac:	beq	1a3e0 <__assert_fail@plt+0x7dec>
   1afb0:	movw	r2, #6504	; 0x1968
   1afb4:	movt	r2, #5
   1afb8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1afbc:	ldr	r5, [r4, #156]	; 0x9c
   1afc0:	cmp	r5, #0
   1afc4:	beq	1b020 <__assert_fail@plt+0x8a2c>
   1afc8:	ldrb	r0, [r5, #16]
   1afcc:	cmp	r0, #0
   1afd0:	beq	1b004 <__assert_fail@plt+0x8a10>
   1afd4:	movw	r2, #6536	; 0x1988
   1afd8:	movt	r2, #5
   1afdc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1afe0:	ldr	r2, [r3, #156]	; 0x9c
   1afe4:	cmp	r2, #0
   1afe8:	beq	1b610 <__assert_fail@plt+0x901c>
   1afec:	ldrb	r0, [r2, #16]
   1aff0:	cmp	r0, #0
   1aff4:	beq	1b598 <__assert_fail@plt+0x8fa4>
   1aff8:	movw	r2, #6536	; 0x1988
   1affc:	movt	r2, #5
   1b000:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b004:	ldr	r0, [r5, #156]	; 0x9c
   1b008:	bl	1655c <__assert_fail@plt+0x3f68>
   1b00c:	cmp	r0, #0
   1b010:	beq	1b044 <__assert_fail@plt+0x8a50>
   1b014:	movw	r2, #6536	; 0x1988
   1b018:	movt	r2, #5
   1b01c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b020:	ldr	r4, [r4, #160]	; 0xa0
   1b024:	cmp	r4, #0
   1b028:	beq	1a720 <__assert_fail@plt+0x812c>
   1b02c:	ldrb	r0, [r4, #16]
   1b030:	cmp	r0, #0
   1b034:	beq	1b060 <__assert_fail@plt+0x8a6c>
   1b038:	movw	r2, #6536	; 0x1988
   1b03c:	movt	r2, #5
   1b040:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b044:	ldr	r0, [r5, #160]	; 0xa0
   1b048:	bl	1655c <__assert_fail@plt+0x3f68>
   1b04c:	cmp	r0, #0
   1b050:	beq	1b020 <__assert_fail@plt+0x8a2c>
   1b054:	movw	r2, #6536	; 0x1988
   1b058:	movt	r2, #5
   1b05c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b060:	ldr	r0, [r4, #156]	; 0x9c
   1b064:	bl	1655c <__assert_fail@plt+0x3f68>
   1b068:	cmp	r0, #0
   1b06c:	beq	1b4cc <__assert_fail@plt+0x8ed8>
   1b070:	movw	r2, #6536	; 0x1988
   1b074:	movt	r2, #5
   1b078:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b07c:	ldr	r4, [r2, #156]	; 0x9c
   1b080:	cmp	r4, #0
   1b084:	beq	1b62c <__assert_fail@plt+0x9038>
   1b088:	ldrb	r0, [r4, #16]
   1b08c:	cmp	r0, #0
   1b090:	beq	1b5b4 <__assert_fail@plt+0x8fc0>
   1b094:	movw	r2, #6504	; 0x1968
   1b098:	movt	r2, #5
   1b09c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b0a0:	ldr	r4, [r2, #156]	; 0x9c
   1b0a4:	cmp	r4, #0
   1b0a8:	beq	1b104 <__assert_fail@plt+0x8b10>
   1b0ac:	ldrb	r0, [r4, #16]
   1b0b0:	cmp	r0, #0
   1b0b4:	beq	1b0e8 <__assert_fail@plt+0x8af4>
   1b0b8:	movw	r2, #6536	; 0x1988
   1b0bc:	movt	r2, #5
   1b0c0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b0c4:	ldr	r2, [r3, #156]	; 0x9c
   1b0c8:	cmp	r2, #0
   1b0cc:	beq	1b17c <__assert_fail@plt+0x8b88>
   1b0d0:	ldrb	r0, [r2, #16]
   1b0d4:	cmp	r0, #0
   1b0d8:	beq	1b160 <__assert_fail@plt+0x8b6c>
   1b0dc:	movw	r2, #6504	; 0x1968
   1b0e0:	movt	r2, #5
   1b0e4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b0e8:	ldr	r0, [r4, #156]	; 0x9c
   1b0ec:	bl	1655c <__assert_fail@plt+0x3f68>
   1b0f0:	cmp	r0, #0
   1b0f4:	beq	1b128 <__assert_fail@plt+0x8b34>
   1b0f8:	movw	r2, #6536	; 0x1988
   1b0fc:	movt	r2, #5
   1b100:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b104:	ldr	r2, [r2, #160]	; 0xa0
   1b108:	cmp	r2, #0
   1b10c:	beq	1a768 <__assert_fail@plt+0x8174>
   1b110:	ldrb	r0, [r2, #16]
   1b114:	cmp	r0, #0
   1b118:	beq	1b144 <__assert_fail@plt+0x8b50>
   1b11c:	movw	r2, #6536	; 0x1988
   1b120:	movt	r2, #5
   1b124:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b128:	ldr	r0, [r4, #160]	; 0xa0
   1b12c:	bl	1655c <__assert_fail@plt+0x3f68>
   1b130:	cmp	r0, #0
   1b134:	beq	1b104 <__assert_fail@plt+0x8b10>
   1b138:	movw	r2, #6536	; 0x1988
   1b13c:	movt	r2, #5
   1b140:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b144:	ldr	r0, [r2, #156]	; 0x9c
   1b148:	bl	1655c <__assert_fail@plt+0x3f68>
   1b14c:	cmp	r0, #0
   1b150:	beq	1b198 <__assert_fail@plt+0x8ba4>
   1b154:	movw	r2, #6536	; 0x1988
   1b158:	movt	r2, #5
   1b15c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b160:	ldr	r0, [r2, #156]	; 0x9c
   1b164:	bl	1655c <__assert_fail@plt+0x3f68>
   1b168:	cmp	r0, #0
   1b16c:	beq	1b1b4 <__assert_fail@plt+0x8bc0>
   1b170:	movw	r2, #6504	; 0x1968
   1b174:	movt	r2, #5
   1b178:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b17c:	ldr	r0, [r3, #160]	; 0xa0
   1b180:	bl	1655c <__assert_fail@plt+0x3f68>
   1b184:	cmp	r0, #0
   1b188:	beq	1a248 <__assert_fail@plt+0x7c54>
   1b18c:	movw	r2, #6504	; 0x1968
   1b190:	movt	r2, #5
   1b194:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b198:	ldr	r0, [r2, #160]	; 0xa0
   1b19c:	bl	1655c <__assert_fail@plt+0x3f68>
   1b1a0:	cmp	r0, #0
   1b1a4:	beq	1a768 <__assert_fail@plt+0x8174>
   1b1a8:	movw	r2, #6536	; 0x1988
   1b1ac:	movt	r2, #5
   1b1b0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b1b4:	ldr	r0, [r2, #160]	; 0xa0
   1b1b8:	bl	1655c <__assert_fail@plt+0x3f68>
   1b1bc:	cmp	r0, #0
   1b1c0:	beq	1b17c <__assert_fail@plt+0x8b88>
   1b1c4:	movw	r2, #6504	; 0x1968
   1b1c8:	movt	r2, #5
   1b1cc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b1d0:	ldr	r5, [r4, #156]	; 0x9c
   1b1d4:	cmp	r5, #0
   1b1d8:	beq	1b234 <__assert_fail@plt+0x8c40>
   1b1dc:	ldrb	r0, [r5, #16]
   1b1e0:	cmp	r0, #0
   1b1e4:	beq	1b218 <__assert_fail@plt+0x8c24>
   1b1e8:	movw	r2, #6536	; 0x1988
   1b1ec:	movt	r2, #5
   1b1f0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b1f4:	ldr	r2, [r3, #156]	; 0x9c
   1b1f8:	cmp	r2, #0
   1b1fc:	beq	1b454 <__assert_fail@plt+0x8e60>
   1b200:	ldrb	r0, [r2, #16]
   1b204:	cmp	r0, #0
   1b208:	beq	1b438 <__assert_fail@plt+0x8e44>
   1b20c:	movw	r2, #6536	; 0x1988
   1b210:	movt	r2, #5
   1b214:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b218:	ldr	r0, [r5, #156]	; 0x9c
   1b21c:	bl	1655c <__assert_fail@plt+0x3f68>
   1b220:	cmp	r0, #0
   1b224:	beq	1b250 <__assert_fail@plt+0x8c5c>
   1b228:	movw	r2, #6536	; 0x1988
   1b22c:	movt	r2, #5
   1b230:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b234:	ldr	r0, [r4, #160]	; 0xa0
   1b238:	bl	1655c <__assert_fail@plt+0x3f68>
   1b23c:	cmp	r0, #0
   1b240:	beq	1a78c <__assert_fail@plt+0x8198>
   1b244:	movw	r2, #6536	; 0x1988
   1b248:	movt	r2, #5
   1b24c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b250:	ldr	r0, [r5, #160]	; 0xa0
   1b254:	bl	1655c <__assert_fail@plt+0x3f68>
   1b258:	cmp	r0, #0
   1b25c:	beq	1b234 <__assert_fail@plt+0x8c40>
   1b260:	movw	r2, #6536	; 0x1988
   1b264:	movt	r2, #5
   1b268:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b26c:	ldr	r5, [r4, #156]	; 0x9c
   1b270:	cmp	r5, #0
   1b274:	beq	1b5d0 <__assert_fail@plt+0x8fdc>
   1b278:	ldrb	r0, [r5, #16]
   1b27c:	cmp	r0, #0
   1b280:	beq	1b2ac <__assert_fail@plt+0x8cb8>
   1b284:	movw	r2, #6504	; 0x1968
   1b288:	movt	r2, #5
   1b28c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b290:	ldr	r0, [r2, #156]	; 0x9c
   1b294:	bl	1655c <__assert_fail@plt+0x3f68>
   1b298:	cmp	r0, #0
   1b29c:	beq	1b6f8 <__assert_fail@plt+0x9104>
   1b2a0:	movw	r2, #6536	; 0x1988
   1b2a4:	movt	r2, #5
   1b2a8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b2ac:	ldr	r0, [r5, #156]	; 0x9c
   1b2b0:	bl	1655c <__assert_fail@plt+0x3f68>
   1b2b4:	cmp	r0, #0
   1b2b8:	beq	1b560 <__assert_fail@plt+0x8f6c>
   1b2bc:	movw	r2, #6504	; 0x1968
   1b2c0:	movt	r2, #5
   1b2c4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b2c8:	ldr	r4, [r2, #156]	; 0x9c
   1b2cc:	cmp	r4, #0
   1b2d0:	beq	1b688 <__assert_fail@plt+0x9094>
   1b2d4:	ldrb	r0, [r4, #16]
   1b2d8:	cmp	r0, #0
   1b2dc:	beq	1b5f4 <__assert_fail@plt+0x9000>
   1b2e0:	movw	r2, #6504	; 0x1968
   1b2e4:	movt	r2, #5
   1b2e8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b2ec:	ldr	r5, [r4, #156]	; 0x9c
   1b2f0:	cmp	r5, #0
   1b2f4:	beq	1b350 <__assert_fail@plt+0x8d5c>
   1b2f8:	ldrb	r0, [r5, #16]
   1b2fc:	cmp	r0, #0
   1b300:	beq	1b334 <__assert_fail@plt+0x8d40>
   1b304:	movw	r2, #6504	; 0x1968
   1b308:	movt	r2, #5
   1b30c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b310:	ldr	r4, [r6, #160]	; 0xa0
   1b314:	cmp	r4, #0
   1b318:	beq	1a528 <__assert_fail@plt+0x7f34>
   1b31c:	ldrb	r0, [r4, #16]
   1b320:	cmp	r0, #0
   1b324:	beq	1b36c <__assert_fail@plt+0x8d78>
   1b328:	movw	r2, #6504	; 0x1968
   1b32c:	movt	r2, #5
   1b330:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b334:	ldr	r0, [r5, #156]	; 0x9c
   1b338:	bl	1655c <__assert_fail@plt+0x3f68>
   1b33c:	cmp	r0, #0
   1b340:	beq	1b388 <__assert_fail@plt+0x8d94>
   1b344:	movw	r2, #6504	; 0x1968
   1b348:	movt	r2, #5
   1b34c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b350:	ldr	r0, [r4, #160]	; 0xa0
   1b354:	bl	1655c <__assert_fail@plt+0x3f68>
   1b358:	cmp	r0, #0
   1b35c:	beq	1b310 <__assert_fail@plt+0x8d1c>
   1b360:	movw	r2, #6504	; 0x1968
   1b364:	movt	r2, #5
   1b368:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b36c:	ldr	r0, [r4, #156]	; 0x9c
   1b370:	bl	1655c <__assert_fail@plt+0x3f68>
   1b374:	cmp	r0, #0
   1b378:	beq	1b3a4 <__assert_fail@plt+0x8db0>
   1b37c:	movw	r2, #6504	; 0x1968
   1b380:	movt	r2, #5
   1b384:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b388:	ldr	r0, [r5, #160]	; 0xa0
   1b38c:	bl	1655c <__assert_fail@plt+0x3f68>
   1b390:	cmp	r0, #0
   1b394:	beq	1b350 <__assert_fail@plt+0x8d5c>
   1b398:	movw	r2, #6504	; 0x1968
   1b39c:	movt	r2, #5
   1b3a0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b3a4:	ldr	r0, [r4, #160]	; 0xa0
   1b3a8:	bl	1655c <__assert_fail@plt+0x3f68>
   1b3ac:	cmp	r0, #0
   1b3b0:	beq	1a528 <__assert_fail@plt+0x7f34>
   1b3b4:	movw	r2, #6504	; 0x1968
   1b3b8:	movt	r2, #5
   1b3bc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b3c0:	ldr	r0, [r2, #156]	; 0x9c
   1b3c4:	bl	1655c <__assert_fail@plt+0x3f68>
   1b3c8:	cmp	r0, #0
   1b3cc:	beq	1b400 <__assert_fail@plt+0x8e0c>
   1b3d0:	movw	r2, #6536	; 0x1988
   1b3d4:	movt	r2, #5
   1b3d8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b3dc:	ldr	r3, [r3, #160]	; 0xa0
   1b3e0:	cmp	r3, #0
   1b3e4:	beq	183a4 <__assert_fail@plt+0x5db0>
   1b3e8:	ldrb	r2, [r3, #16]
   1b3ec:	cmp	r2, #0
   1b3f0:	beq	1b41c <__assert_fail@plt+0x8e28>
   1b3f4:	movw	r2, #6536	; 0x1988
   1b3f8:	movt	r2, #5
   1b3fc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b400:	ldr	r0, [r2, #160]	; 0xa0
   1b404:	bl	1655c <__assert_fail@plt+0x3f68>
   1b408:	cmp	r0, #0
   1b40c:	beq	1b3dc <__assert_fail@plt+0x8de8>
   1b410:	movw	r2, #6536	; 0x1988
   1b414:	movt	r2, #5
   1b418:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b41c:	ldr	r0, [r3, #156]	; 0x9c
   1b420:	bl	1655c <__assert_fail@plt+0x3f68>
   1b424:	cmp	r0, #0
   1b428:	beq	1b470 <__assert_fail@plt+0x8e7c>
   1b42c:	movw	r2, #6536	; 0x1988
   1b430:	movt	r2, #5
   1b434:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b438:	ldr	r0, [r2, #156]	; 0x9c
   1b43c:	bl	1655c <__assert_fail@plt+0x3f68>
   1b440:	cmp	r0, #0
   1b444:	beq	1b48c <__assert_fail@plt+0x8e98>
   1b448:	movw	r2, #6536	; 0x1988
   1b44c:	movt	r2, #5
   1b450:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b454:	ldr	r0, [r3, #160]	; 0xa0
   1b458:	bl	1655c <__assert_fail@plt+0x3f68>
   1b45c:	cmp	r0, #0
   1b460:	beq	1a270 <__assert_fail@plt+0x7c7c>
   1b464:	movw	r2, #6536	; 0x1988
   1b468:	movt	r2, #5
   1b46c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b470:	ldr	r0, [r3, #160]	; 0xa0
   1b474:	bl	1655c <__assert_fail@plt+0x3f68>
   1b478:	cmp	r0, #0
   1b47c:	beq	183a4 <__assert_fail@plt+0x5db0>
   1b480:	movw	r2, #6536	; 0x1988
   1b484:	movt	r2, #5
   1b488:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b48c:	ldr	r0, [r2, #160]	; 0xa0
   1b490:	bl	1655c <__assert_fail@plt+0x3f68>
   1b494:	cmp	r0, #0
   1b498:	beq	1b454 <__assert_fail@plt+0x8e60>
   1b49c:	movw	r2, #6536	; 0x1988
   1b4a0:	movt	r2, #5
   1b4a4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b4a8:	ldr	r4, [r2, #156]	; 0x9c
   1b4ac:	cmp	r4, #0
   1b4b0:	beq	1b504 <__assert_fail@plt+0x8f10>
   1b4b4:	ldrb	r0, [r4, #16]
   1b4b8:	cmp	r0, #0
   1b4bc:	beq	1b4e8 <__assert_fail@plt+0x8ef4>
   1b4c0:	movw	r2, #6536	; 0x1988
   1b4c4:	movt	r2, #5
   1b4c8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b4cc:	ldr	r0, [r4, #160]	; 0xa0
   1b4d0:	bl	1655c <__assert_fail@plt+0x3f68>
   1b4d4:	cmp	r0, #0
   1b4d8:	beq	1a720 <__assert_fail@plt+0x812c>
   1b4dc:	movw	r2, #6536	; 0x1988
   1b4e0:	movt	r2, #5
   1b4e4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b4e8:	ldr	r0, [r4, #156]	; 0x9c
   1b4ec:	bl	1655c <__assert_fail@plt+0x3f68>
   1b4f0:	cmp	r0, #0
   1b4f4:	beq	1b520 <__assert_fail@plt+0x8f2c>
   1b4f8:	movw	r2, #6536	; 0x1988
   1b4fc:	movt	r2, #5
   1b500:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b504:	ldr	r0, [r2, #160]	; 0xa0
   1b508:	bl	1655c <__assert_fail@plt+0x3f68>
   1b50c:	cmp	r0, #0
   1b510:	beq	1a5dc <__assert_fail@plt+0x7fe8>
   1b514:	movw	r2, #6536	; 0x1988
   1b518:	movt	r2, #5
   1b51c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b520:	ldr	r0, [r4, #160]	; 0xa0
   1b524:	bl	1655c <__assert_fail@plt+0x3f68>
   1b528:	cmp	r0, #0
   1b52c:	beq	1b504 <__assert_fail@plt+0x8f10>
   1b530:	movw	r2, #6536	; 0x1988
   1b534:	movt	r2, #5
   1b538:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b53c:	ldr	r3, [r3, #160]	; 0xa0
   1b540:	cmp	r3, #0
   1b544:	beq	1a864 <__assert_fail@plt+0x8270>
   1b548:	ldrb	r2, [r3, #16]
   1b54c:	cmp	r2, #0
   1b550:	beq	1b57c <__assert_fail@plt+0x8f88>
   1b554:	movw	r2, #6504	; 0x1968
   1b558:	movt	r2, #5
   1b55c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b560:	ldr	r0, [r5, #160]	; 0xa0
   1b564:	bl	1655c <__assert_fail@plt+0x3f68>
   1b568:	cmp	r0, #0
   1b56c:	beq	1b5d0 <__assert_fail@plt+0x8fdc>
   1b570:	movw	r2, #6504	; 0x1968
   1b574:	movt	r2, #5
   1b578:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b57c:	ldr	r0, [r3, #156]	; 0x9c
   1b580:	bl	1655c <__assert_fail@plt+0x3f68>
   1b584:	cmp	r0, #0
   1b588:	beq	1b730 <__assert_fail@plt+0x913c>
   1b58c:	movw	r2, #6504	; 0x1968
   1b590:	movt	r2, #5
   1b594:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b598:	ldr	r0, [r2, #156]	; 0x9c
   1b59c:	bl	1655c <__assert_fail@plt+0x3f68>
   1b5a0:	cmp	r0, #0
   1b5a4:	beq	1b650 <__assert_fail@plt+0x905c>
   1b5a8:	movw	r2, #6536	; 0x1988
   1b5ac:	movt	r2, #5
   1b5b0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b5b4:	ldr	r0, [r4, #156]	; 0x9c
   1b5b8:	bl	1655c <__assert_fail@plt+0x3f68>
   1b5bc:	cmp	r0, #0
   1b5c0:	beq	1b714 <__assert_fail@plt+0x9120>
   1b5c4:	movw	r2, #6504	; 0x1968
   1b5c8:	movt	r2, #5
   1b5cc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b5d0:	ldr	r4, [r4, #160]	; 0xa0
   1b5d4:	cmp	r4, #0
   1b5d8:	beq	1a7b0 <__assert_fail@plt+0x81bc>
   1b5dc:	ldrb	r0, [r4, #16]
   1b5e0:	cmp	r0, #0
   1b5e4:	beq	1b6a4 <__assert_fail@plt+0x90b0>
   1b5e8:	movw	r2, #6504	; 0x1968
   1b5ec:	movt	r2, #5
   1b5f0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b5f4:	ldr	r0, [r4, #156]	; 0x9c
   1b5f8:	bl	1655c <__assert_fail@plt+0x3f68>
   1b5fc:	cmp	r0, #0
   1b600:	beq	1b74c <__assert_fail@plt+0x9158>
   1b604:	movw	r2, #6504	; 0x1968
   1b608:	movt	r2, #5
   1b60c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b610:	ldr	r0, [r3, #160]	; 0xa0
   1b614:	bl	1655c <__assert_fail@plt+0x3f68>
   1b618:	cmp	r0, #0
   1b61c:	beq	183cc <__assert_fail@plt+0x5dd8>
   1b620:	movw	r2, #6536	; 0x1988
   1b624:	movt	r2, #5
   1b628:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b62c:	ldr	r2, [r2, #160]	; 0xa0
   1b630:	cmp	r2, #0
   1b634:	beq	1a744 <__assert_fail@plt+0x8150>
   1b638:	ldrb	r0, [r2, #16]
   1b63c:	cmp	r0, #0
   1b640:	beq	1b66c <__assert_fail@plt+0x9078>
   1b644:	movw	r2, #6504	; 0x1968
   1b648:	movt	r2, #5
   1b64c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b650:	ldr	r0, [r2, #160]	; 0xa0
   1b654:	bl	1655c <__assert_fail@plt+0x3f68>
   1b658:	cmp	r0, #0
   1b65c:	beq	1b610 <__assert_fail@plt+0x901c>
   1b660:	movw	r2, #6536	; 0x1988
   1b664:	movt	r2, #5
   1b668:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b66c:	ldr	r0, [r2, #156]	; 0x9c
   1b670:	bl	1655c <__assert_fail@plt+0x3f68>
   1b674:	cmp	r0, #0
   1b678:	beq	1b6c0 <__assert_fail@plt+0x90cc>
   1b67c:	movw	r2, #6504	; 0x1968
   1b680:	movt	r2, #5
   1b684:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b688:	ldr	r0, [r2, #160]	; 0xa0
   1b68c:	bl	1655c <__assert_fail@plt+0x3f68>
   1b690:	cmp	r0, #0
   1b694:	beq	1b53c <__assert_fail@plt+0x8f48>
   1b698:	movw	r2, #6504	; 0x1968
   1b69c:	movt	r2, #5
   1b6a0:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b6a4:	ldr	r0, [r4, #156]	; 0x9c
   1b6a8:	bl	1655c <__assert_fail@plt+0x3f68>
   1b6ac:	cmp	r0, #0
   1b6b0:	beq	1b6dc <__assert_fail@plt+0x90e8>
   1b6b4:	movw	r2, #6504	; 0x1968
   1b6b8:	movt	r2, #5
   1b6bc:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b6c0:	ldr	r0, [r2, #160]	; 0xa0
   1b6c4:	bl	1655c <__assert_fail@plt+0x3f68>
   1b6c8:	cmp	r0, #0
   1b6cc:	beq	1a744 <__assert_fail@plt+0x8150>
   1b6d0:	movw	r2, #6504	; 0x1968
   1b6d4:	movt	r2, #5
   1b6d8:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b6dc:	ldr	r0, [r4, #160]	; 0xa0
   1b6e0:	bl	1655c <__assert_fail@plt+0x3f68>
   1b6e4:	cmp	r0, #0
   1b6e8:	beq	1a7b0 <__assert_fail@plt+0x81bc>
   1b6ec:	movw	r2, #6504	; 0x1968
   1b6f0:	movt	r2, #5
   1b6f4:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b6f8:	ldr	r0, [r2, #160]	; 0xa0
   1b6fc:	bl	1655c <__assert_fail@plt+0x3f68>
   1b700:	cmp	r0, #0
   1b704:	beq	1a570 <__assert_fail@plt+0x7f7c>
   1b708:	movw	r2, #6536	; 0x1988
   1b70c:	movt	r2, #5
   1b710:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b714:	ldr	r0, [r4, #160]	; 0xa0
   1b718:	bl	1655c <__assert_fail@plt+0x3f68>
   1b71c:	cmp	r0, #0
   1b720:	beq	1b62c <__assert_fail@plt+0x9038>
   1b724:	movw	r2, #6504	; 0x1968
   1b728:	movt	r2, #5
   1b72c:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b730:	ldr	r0, [r3, #160]	; 0xa0
   1b734:	bl	1655c <__assert_fail@plt+0x3f68>
   1b738:	cmp	r0, #0
   1b73c:	beq	1a864 <__assert_fail@plt+0x8270>
   1b740:	movw	r2, #6504	; 0x1968
   1b744:	movt	r2, #5
   1b748:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b74c:	ldr	r0, [r4, #160]	; 0xa0
   1b750:	bl	1655c <__assert_fail@plt+0x3f68>
   1b754:	cmp	r0, #0
   1b758:	beq	1b688 <__assert_fail@plt+0x9094>
   1b75c:	movw	r2, #6504	; 0x1968
   1b760:	movt	r2, #5
   1b764:	b	182a8 <__assert_fail@plt+0x5cb4>
   1b768:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b76c:	mov	r4, r1
   1b770:	add	r1, r1, r2, lsl #2
   1b774:	mov	r3, #0
   1b778:	strd	r6, [sp, #8]
   1b77c:	movw	r6, #30064	; 0x7570
   1b780:	movt	r6, #6
   1b784:	strd	r8, [sp, #16]
   1b788:	cmp	r2, r0
   1b78c:	strd	sl, [sp, #24]
   1b790:	str	lr, [sp, #32]
   1b794:	sub	sp, sp, #36	; 0x24
   1b798:	str	r1, [r6, #8]
   1b79c:	str	r3, [r6, #16]
   1b7a0:	str	r0, [sp, #20]
   1b7a4:	str	r2, [sp, #28]
   1b7a8:	blt	1b7d4 <__assert_fail@plt+0x91e0>
   1b7ac:	b	1b7e8 <__assert_fail@plt+0x91f4>
   1b7b0:	ldr	r3, [r6, #4]
   1b7b4:	ldr	r1, [sp, #20]
   1b7b8:	ldr	r2, [sp, #28]
   1b7bc:	add	r3, r3, #1
   1b7c0:	str	r3, [r6, #4]
   1b7c4:	add	r2, r2, #1
   1b7c8:	cmp	r2, r1
   1b7cc:	str	r2, [sp, #28]
   1b7d0:	bge	1b7e8 <__assert_fail@plt+0x91f4>
   1b7d4:	mov	r1, #1
   1b7d8:	ldr	r0, [r4, r2, lsl #2]
   1b7dc:	bl	1ce98 <__assert_fail@plt+0xa8a4>
   1b7e0:	cmp	r0, #0
   1b7e4:	beq	1b7b0 <__assert_fail@plt+0x91bc>
   1b7e8:	movw	r5, #6868	; 0x1ad4
   1b7ec:	movt	r5, #5
   1b7f0:	mov	r0, r5
   1b7f4:	bl	2555c <__assert_fail@plt+0x12f68>
   1b7f8:	mov	r7, r0
   1b7fc:	movw	r0, #10932	; 0x2ab4
   1b800:	movt	r0, #5
   1b804:	bl	2555c <__assert_fail@plt+0x12f68>
   1b808:	str	r0, [sp, #16]
   1b80c:	movw	r0, #6872	; 0x1ad8
   1b810:	movt	r0, #5
   1b814:	bl	2555c <__assert_fail@plt+0x12f68>
   1b818:	cmp	r7, #0
   1b81c:	str	r0, [sp, #12]
   1b820:	beq	1be68 <__assert_fail@plt+0x9874>
   1b824:	ldr	r3, [sp, #16]
   1b828:	cmp	r3, #0
   1b82c:	beq	1be4c <__assert_fail@plt+0x9858>
   1b830:	cmp	r0, #0
   1b834:	beq	1be30 <__assert_fail@plt+0x983c>
   1b838:	add	r2, sp, #20
   1b83c:	mov	r1, r4
   1b840:	mov	r0, r7
   1b844:	bl	21ad0 <__assert_fail@plt+0xf4dc>
   1b848:	ldr	ip, [r6, #16]
   1b84c:	mov	lr, #1
   1b850:	mov	r0, r4
   1b854:	ldr	r2, [r6, #20]
   1b858:	ldr	r1, [sp, #20]
   1b85c:	mov	r3, ip
   1b860:	str	r5, [r2, #4]
   1b864:	strb	lr, [ip, #33]	; 0x21
   1b868:	bl	25544 <__assert_fail@plt+0x12f50>
   1b86c:	ldr	r0, [r6, #20]
   1b870:	bl	15b8c <__assert_fail@plt+0x3598>
   1b874:	ldr	r1, [sp, #20]
   1b878:	ldr	r3, [sp, #28]
   1b87c:	cmp	r3, r1
   1b880:	bge	1b92c <__assert_fail@plt+0x9338>
   1b884:	movw	r9, #32320	; 0x7e40
   1b888:	movt	r9, #6
   1b88c:	mov	r8, #0
   1b890:	mov	r1, #0
   1b894:	ldr	r0, [r4, r3, lsl #2]
   1b898:	strb	r8, [r9, #40]	; 0x28
   1b89c:	bl	1ce98 <__assert_fail@plt+0xa8a4>
   1b8a0:	subs	r5, r0, #0
   1b8a4:	beq	1bd28 <__assert_fail@plt+0x9734>
   1b8a8:	ldr	r3, [sp, #28]
   1b8ac:	ldr	r7, [r4, r3, lsl #2]
   1b8b0:	mov	r0, r7
   1b8b4:	bl	2555c <__assert_fail@plt+0x12f68>
   1b8b8:	subs	r5, r0, #0
   1b8bc:	beq	1bd70 <__assert_fail@plt+0x977c>
   1b8c0:	ldr	r3, [r5]
   1b8c4:	add	r2, sp, #28
   1b8c8:	mov	r1, r4
   1b8cc:	mov	r0, r5
   1b8d0:	ldr	fp, [sp, #28]
   1b8d4:	cmp	r3, #4
   1b8d8:	ldr	r3, [r5, #8]
   1b8dc:	addne	fp, fp, #1
   1b8e0:	strne	fp, [sp, #28]
   1b8e4:	blx	r3
   1b8e8:	subs	sl, r0, #0
   1b8ec:	beq	1ba84 <__assert_fail@plt+0x9490>
   1b8f0:	ldr	r2, [sp, #28]
   1b8f4:	ldr	r3, [r6, #20]
   1b8f8:	cmp	r2, fp
   1b8fc:	str	r7, [r3, #4]
   1b900:	beq	1ba5c <__assert_fail@plt+0x9468>
   1b904:	ldr	r2, [r4, fp, lsl #2]
   1b908:	mov	r0, r3
   1b90c:	str	r2, [r3, #36]	; 0x24
   1b910:	bl	15b8c <__assert_fail@plt+0x3598>
   1b914:	ldr	r0, [r6, #16]
   1b918:	bl	15b8c <__assert_fail@plt+0x3598>
   1b91c:	ldr	r1, [sp, #20]
   1b920:	ldr	r3, [sp, #28]
   1b924:	cmp	r1, r3
   1b928:	bgt	1b890 <__assert_fail@plt+0x929c>
   1b92c:	mov	r0, r4
   1b930:	ldr	r3, [r6, #16]
   1b934:	ldr	r2, [r6, #20]
   1b938:	bl	25558 <__assert_fail@plt+0x12f64>
   1b93c:	ldr	r2, [r6, #16]
   1b940:	ldr	r3, [r2, #152]	; 0x98
   1b944:	cmp	r3, #0
   1b948:	beq	1bbfc <__assert_fail@plt+0x9608>
   1b94c:	mov	r0, r3
   1b950:	bl	1ce58 <__assert_fail@plt+0xa864>
   1b954:	cmp	r0, #0
   1b958:	beq	1bad8 <__assert_fail@plt+0x94e4>
   1b95c:	mov	r1, r4
   1b960:	add	r2, sp, #20
   1b964:	ldr	r0, [sp, #16]
   1b968:	bl	21878 <__assert_fail@plt+0xf284>
   1b96c:	ldr	r3, [r6, #20]
   1b970:	mov	r5, #1
   1b974:	movw	r2, #10932	; 0x2ab4
   1b978:	movt	r2, #5
   1b97c:	mov	r0, r3
   1b980:	str	r2, [r3, #4]
   1b984:	strb	r5, [r3, #33]	; 0x21
   1b988:	bl	15b8c <__assert_fail@plt+0x3598>
   1b98c:	add	r2, sp, #20
   1b990:	mov	r1, r4
   1b994:	ldr	r0, [sp, #12]
   1b998:	bl	20bb8 <__assert_fail@plt+0xe5c4>
   1b99c:	ldr	r3, [r6, #20]
   1b9a0:	movw	r2, #7132	; 0x1bdc
   1b9a4:	movt	r2, #5
   1b9a8:	mov	r0, r3
   1b9ac:	str	r2, [r3, #4]
   1b9b0:	strb	r5, [r3, #33]	; 0x21
   1b9b4:	bl	15b8c <__assert_fail@plt+0x3598>
   1b9b8:	ldr	r0, [r6, #16]
   1b9bc:	bl	15b8c <__assert_fail@plt+0x3598>
   1b9c0:	movw	r5, #32364	; 0x7e6c
   1b9c4:	movt	r5, #6
   1b9c8:	ldr	r3, [r5, #44]	; 0x2c
   1b9cc:	tst	r3, #9
   1b9d0:	bne	1bafc <__assert_fail@plt+0x9508>
   1b9d4:	ldr	r0, [r6, #16]
   1b9d8:	bl	25414 <__assert_fail@plt+0x12e20>
   1b9dc:	ldr	r0, [r6, #16]
   1b9e0:	bl	15b8c <__assert_fail@plt+0x3598>
   1b9e4:	ldr	r3, [r6, #16]
   1b9e8:	mov	r2, #0
   1b9ec:	add	r0, sp, #24
   1b9f0:	mov	r1, r2
   1b9f4:	str	r3, [sp, #24]
   1b9f8:	bl	165b0 <__assert_fail@plt+0x3fbc>
   1b9fc:	str	r0, [r6, #12]
   1ba00:	bl	16ce0 <__assert_fail@plt+0x46ec>
   1ba04:	ldr	r4, [sp, #24]
   1ba08:	cmp	r4, #0
   1ba0c:	beq	1bb2c <__assert_fail@plt+0x9538>
   1ba10:	ldr	r2, [r4]
   1ba14:	movw	r3, #15900	; 0x3e1c
   1ba18:	movt	r3, #1
   1ba1c:	cmp	r2, r3
   1ba20:	beq	1bde0 <__assert_fail@plt+0x97ec>
   1ba24:	ldr	r4, [r4, #4]
   1ba28:	cmp	r4, #0
   1ba2c:	beq	1bc44 <__assert_fail@plt+0x9650>
   1ba30:	mov	r2, #5
   1ba34:	movw	r1, #7160	; 0x1bf8
   1ba38:	movt	r1, #5
   1ba3c:	mov	r0, #0
   1ba40:	bl	120b4 <dcgettext@plt>
   1ba44:	ldr	r3, [sp, #24]
   1ba48:	mov	r2, r0
   1ba4c:	mov	r1, #0
   1ba50:	mov	r0, #1
   1ba54:	ldr	r3, [r3, #4]
   1ba58:	bl	121ec <error@plt>
   1ba5c:	mov	r0, r3
   1ba60:	str	r8, [r3, #36]	; 0x24
   1ba64:	bl	15b8c <__assert_fail@plt+0x3598>
   1ba68:	ldr	r0, [r6, #16]
   1ba6c:	bl	15b8c <__assert_fail@plt+0x3598>
   1ba70:	ldr	r1, [sp, #20]
   1ba74:	ldr	r3, [sp, #28]
   1ba78:	cmp	r3, r1
   1ba7c:	blt	1b890 <__assert_fail@plt+0x929c>
   1ba80:	b	1b92c <__assert_fail@plt+0x9338>
   1ba84:	ldr	r1, [sp, #28]
   1ba88:	ldr	r6, [r4, r1, lsl #2]
   1ba8c:	cmp	r6, #0
   1ba90:	beq	1bdec <__assert_fail@plt+0x97f8>
   1ba94:	ldr	r2, [r5]
   1ba98:	cmp	r2, #4
   1ba9c:	cmpeq	r1, fp
   1baa0:	moveq	r5, #1
   1baa4:	movne	r5, #0
   1baa8:	beq	1bc68 <__assert_fail@plt+0x9674>
   1baac:	mov	r2, #5
   1bab0:	movw	r1, #7072	; 0x1ba0
   1bab4:	movt	r1, #5
   1bab8:	bl	120b4 <dcgettext@plt>
   1babc:	ldr	r3, [sp, #28]
   1bac0:	mov	r2, r0
   1bac4:	mov	r1, r5
   1bac8:	mov	r0, #1
   1bacc:	str	r7, [sp]
   1bad0:	ldr	r3, [r4, r3, lsl #2]
   1bad4:	bl	121ec <error@plt>
   1bad8:	ldr	r2, [r6, #16]
   1badc:	ldr	r3, [r2, #152]	; 0x98
   1bae0:	str	r2, [sp, #24]
   1bae4:	mov	r0, r3
   1bae8:	str	r3, [r6, #16]
   1baec:	bl	15b8c <__assert_fail@plt+0x3598>
   1baf0:	ldr	r0, [sp, #24]
   1baf4:	bl	38b10 <__assert_fail@plt+0x2651c>
   1baf8:	b	1b9c0 <__assert_fail@plt+0x93cc>
   1bafc:	movw	r4, #30024	; 0x7548
   1bb00:	movt	r4, #6
   1bb04:	mov	r2, #16
   1bb08:	mov	r1, #1
   1bb0c:	ldr	r3, [r4]
   1bb10:	movw	r0, #7140	; 0x1be4
   1bb14:	movt	r0, #5
   1bb18:	bl	12168 <fwrite@plt>
   1bb1c:	ldr	r0, [r4]
   1bb20:	ldr	r1, [r6, #16]
   1bb24:	bl	15a2c <__assert_fail@plt+0x3438>
   1bb28:	b	1b9d4 <__assert_fail@plt+0x93e0>
   1bb2c:	ldr	r3, [r5, #44]	; 0x2c
   1bb30:	tst	r3, #9
   1bb34:	bne	1bc8c <__assert_fail@plt+0x9698>
   1bb38:	ldr	r0, [r6, #12]
   1bb3c:	bl	16998 <__assert_fail@plt+0x43a4>
   1bb40:	ldr	r0, [pc, #828]	; 1be84 <__assert_fail@plt+0x9890>
   1bb44:	bl	17a4c <__assert_fail@plt+0x5458>
   1bb48:	ldr	r7, [r6, #12]
   1bb4c:	ldr	r3, [r7, #8]
   1bb50:	cmp	r3, #3
   1bb54:	moveq	r4, r7
   1bb58:	bne	1be10 <__assert_fail@plt+0x981c>
   1bb5c:	ldr	r0, [r4, #156]	; 0x9c
   1bb60:	cmp	r0, #0
   1bb64:	beq	1bb7c <__assert_fail@plt+0x9588>
   1bb68:	ldr	r3, [r0, #8]
   1bb6c:	cmp	r3, #3
   1bb70:	bne	1bd94 <__assert_fail@plt+0x97a0>
   1bb74:	mov	r1, #0
   1bb78:	bl	168a4 <__assert_fail@plt+0x42b0>
   1bb7c:	ldr	r4, [r4, #160]	; 0xa0
   1bb80:	cmp	r4, #0
   1bb84:	bne	1bb5c <__assert_fail@plt+0x9568>
   1bb88:	mov	r0, r7
   1bb8c:	bl	18220 <__assert_fail@plt+0x5c2c>
   1bb90:	ldr	r7, [r6, #12]
   1bb94:	ldr	r3, [r7, #8]
   1bb98:	cmp	r3, #3
   1bb9c:	bne	1be10 <__assert_fail@plt+0x981c>
   1bba0:	mov	r4, r7
   1bba4:	ldr	r0, [r4, #156]	; 0x9c
   1bba8:	cmp	r0, #0
   1bbac:	beq	1bbc4 <__assert_fail@plt+0x95d0>
   1bbb0:	ldr	r3, [r0, #8]
   1bbb4:	cmp	r3, #3
   1bbb8:	bne	1bd94 <__assert_fail@plt+0x97a0>
   1bbbc:	mov	r1, #0
   1bbc0:	bl	168a4 <__assert_fail@plt+0x42b0>
   1bbc4:	ldr	r4, [r4, #160]	; 0xa0
   1bbc8:	cmp	r4, #0
   1bbcc:	bne	1bba4 <__assert_fail@plt+0x95b0>
   1bbd0:	ldr	r3, [r5, #44]	; 0x2c
   1bbd4:	tst	r3, #9
   1bbd8:	bne	1bcc0 <__assert_fail@plt+0x96cc>
   1bbdc:	mov	r0, r7
   1bbe0:	add	sp, sp, #36	; 0x24
   1bbe4:	ldrd	r4, [sp]
   1bbe8:	ldrd	r6, [sp, #8]
   1bbec:	ldrd	r8, [sp, #16]
   1bbf0:	ldrd	sl, [sp, #24]
   1bbf4:	add	sp, sp, #32
   1bbf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbfc:	mov	r0, r2
   1bc00:	str	r3, [r6, #16]
   1bc04:	str	r3, [r6, #20]
   1bc08:	str	r2, [sp, #24]
   1bc0c:	bl	38b10 <__assert_fail@plt+0x2651c>
   1bc10:	add	r2, sp, #20
   1bc14:	mov	r1, r4
   1bc18:	ldr	r0, [sp, #12]
   1bc1c:	bl	20bb8 <__assert_fail@plt+0xe5c4>
   1bc20:	ldr	r2, [r6, #20]
   1bc24:	movw	r3, #7132	; 0x1bdc
   1bc28:	movt	r3, #5
   1bc2c:	mov	r0, r2
   1bc30:	str	r3, [r2, #4]
   1bc34:	bl	15b8c <__assert_fail@plt+0x3598>
   1bc38:	ldr	r0, [r6, #16]
   1bc3c:	bl	15b8c <__assert_fail@plt+0x3598>
   1bc40:	b	1b9c0 <__assert_fail@plt+0x93cc>
   1bc44:	movw	r1, #7192	; 0x1c18
   1bc48:	movt	r1, #5
   1bc4c:	mov	r2, #5
   1bc50:	mov	r0, #0
   1bc54:	bl	120b4 <dcgettext@plt>
   1bc58:	mov	r2, r0
   1bc5c:	mov	r1, #0
   1bc60:	mov	r0, #1
   1bc64:	bl	121ec <error@plt>
   1bc68:	mov	r2, #5
   1bc6c:	movw	r1, #7048	; 0x1b88
   1bc70:	movt	r1, #5
   1bc74:	bl	120b4 <dcgettext@plt>
   1bc78:	mov	r2, r0
   1bc7c:	mov	r3, r7
   1bc80:	mov	r1, sl
   1bc84:	mov	r0, #1
   1bc88:	bl	121ec <error@plt>
   1bc8c:	movw	r7, #30024	; 0x7548
   1bc90:	movt	r7, #6
   1bc94:	mov	r2, #11
   1bc98:	mov	r1, #1
   1bc9c:	ldr	r3, [r7]
   1bca0:	movw	r0, #7220	; 0x1c34
   1bca4:	movt	r0, #5
   1bca8:	bl	12168 <fwrite@plt>
   1bcac:	mov	r2, r4
   1bcb0:	ldr	r0, [r7]
   1bcb4:	ldr	r1, [r6, #12]
   1bcb8:	bl	17368 <__assert_fail@plt+0x4d74>
   1bcbc:	b	1bb38 <__assert_fail@plt+0x9544>
   1bcc0:	movw	r5, #30024	; 0x7548
   1bcc4:	movt	r5, #6
   1bcc8:	mov	r2, #21
   1bccc:	mov	r1, #1
   1bcd0:	ldr	r3, [r5]
   1bcd4:	movw	r0, #7232	; 0x1c40
   1bcd8:	movt	r0, #5
   1bcdc:	bl	12168 <fwrite@plt>
   1bce0:	mov	r2, r4
   1bce4:	ldr	r0, [r5]
   1bce8:	ldr	r1, [r6, #12]
   1bcec:	bl	17368 <__assert_fail@plt+0x4d74>
   1bcf0:	mov	r2, #24
   1bcf4:	mov	r1, #1
   1bcf8:	ldr	r3, [r5]
   1bcfc:	movw	r0, #7256	; 0x1c58
   1bd00:	movt	r0, #5
   1bd04:	bl	12168 <fwrite@plt>
   1bd08:	ldr	r0, [r5]
   1bd0c:	ldr	r1, [r6, #12]
   1bd10:	bl	15b04 <__assert_fail@plt+0x3510>
   1bd14:	mov	r0, #10
   1bd18:	ldr	r1, [r5]
   1bd1c:	bl	1248c <fputc@plt>
   1bd20:	ldr	r7, [r6, #12]
   1bd24:	b	1bbdc <__assert_fail@plt+0x95e8>
   1bd28:	mov	r2, #5
   1bd2c:	movw	r1, #6940	; 0x1b1c
   1bd30:	movt	r1, #5
   1bd34:	bl	120b4 <dcgettext@plt>
   1bd38:	ldr	r3, [sp, #28]
   1bd3c:	mov	r2, r0
   1bd40:	mov	r1, r5
   1bd44:	mov	r0, r5
   1bd48:	ldr	r3, [r4, r3, lsl #2]
   1bd4c:	bl	121ec <error@plt>
   1bd50:	ldr	r3, [sp, #28]
   1bd54:	mov	r1, r5
   1bd58:	ldr	r0, [r4, r3, lsl #2]
   1bd5c:	bl	123f0 <access@plt>
   1bd60:	subs	r4, r0, #0
   1bd64:	beq	1bdb4 <__assert_fail@plt+0x97c0>
   1bd68:	mov	r0, #1
   1bd6c:	bl	122d0 <exit@plt>
   1bd70:	mov	r2, #5
   1bd74:	movw	r1, #7024	; 0x1b70
   1bd78:	movt	r1, #5
   1bd7c:	bl	120b4 <dcgettext@plt>
   1bd80:	mov	r2, r0
   1bd84:	mov	r3, r7
   1bd88:	mov	r1, r5
   1bd8c:	mov	r0, #1
   1bd90:	bl	121ec <error@plt>
   1bd94:	movw	r3, #4720	; 0x1270
   1bd98:	movt	r3, #5
   1bd9c:	movw	r1, #5584	; 0x15d0
   1bda0:	movt	r1, #5
   1bda4:	movw	r0, #5612	; 0x15ec
   1bda8:	movt	r0, #5
   1bdac:	movw	r2, #1235	; 0x4d3
   1bdb0:	bl	125f4 <__assert_fail@plt>
   1bdb4:	mov	r2, #5
   1bdb8:	movw	r1, #6976	; 0x1b40
   1bdbc:	movt	r1, #5
   1bdc0:	bl	120b4 <dcgettext@plt>
   1bdc4:	ldr	r3, [r6, #20]
   1bdc8:	mov	r2, r0
   1bdcc:	mov	r1, r4
   1bdd0:	mov	r0, r4
   1bdd4:	ldr	r3, [r3, #4]
   1bdd8:	bl	121ec <error@plt>
   1bddc:	b	1bd68 <__assert_fail@plt+0x9774>
   1bde0:	movw	r1, #5232	; 0x1470
   1bde4:	movt	r1, #5
   1bde8:	b	1bc4c <__assert_fail@plt+0x9658>
   1bdec:	mov	r2, #5
   1bdf0:	movw	r1, #7104	; 0x1bc0
   1bdf4:	movt	r1, #5
   1bdf8:	bl	120b4 <dcgettext@plt>
   1bdfc:	mov	r2, r0
   1be00:	mov	r3, r7
   1be04:	mov	r1, r6
   1be08:	mov	r0, #1
   1be0c:	bl	121ec <error@plt>
   1be10:	movw	r3, #4720	; 0x1270
   1be14:	movt	r3, #5
   1be18:	movw	r1, #5584	; 0x15d0
   1be1c:	movt	r1, #5
   1be20:	movw	r0, #5592	; 0x15d8
   1be24:	movt	r0, #5
   1be28:	movw	r2, #1230	; 0x4ce
   1be2c:	bl	125f4 <__assert_fail@plt>
   1be30:	movw	r1, #5584	; 0x15d0
   1be34:	movt	r1, #5
   1be38:	ldr	r3, [pc, #72]	; 1be88 <__assert_fail@plt+0x9894>
   1be3c:	movw	r0, #6920	; 0x1b08
   1be40:	movt	r0, #5
   1be44:	movw	r2, #1272	; 0x4f8
   1be48:	bl	125f4 <__assert_fail@plt>
   1be4c:	movw	r1, #5584	; 0x15d0
   1be50:	movt	r1, #5
   1be54:	ldr	r3, [pc, #44]	; 1be88 <__assert_fail@plt+0x9894>
   1be58:	movw	r0, #6900	; 0x1af4
   1be5c:	movt	r0, #5
   1be60:	movw	r2, #1271	; 0x4f7
   1be64:	bl	125f4 <__assert_fail@plt>
   1be68:	movw	r1, #5584	; 0x15d0
   1be6c:	movt	r1, #5
   1be70:	ldr	r3, [pc, #16]	; 1be88 <__assert_fail@plt+0x9894>
   1be74:	movw	r0, #6880	; 0x1ae0
   1be78:	movt	r0, #5
   1be7c:	movw	r2, #1270	; 0x4f6
   1be80:	bl	125f4 <__assert_fail@plt>
   1be84:	andeq	r7, r6, ip, ror r5
   1be88:	andeq	r1, r5, r0, asr #6
   1be8c:	strd	r4, [sp, #-16]!
   1be90:	mov	r4, r0
   1be94:	mov	r5, r1
   1be98:	str	r6, [sp, #8]
   1be9c:	str	lr, [sp, #12]
   1bea0:	ldr	r3, [r4, #156]	; 0x9c
   1bea4:	mov	r1, r5
   1bea8:	mov	r0, r4
   1beac:	cmp	r3, #0
   1beb0:	beq	1bee0 <__assert_fail@plt+0x98ec>
   1beb4:	mov	r0, r3
   1beb8:	bl	1be8c <__assert_fail@plt+0x9898>
   1bebc:	mov	r0, r4
   1bec0:	blx	r5
   1bec4:	ldr	r4, [r4, #160]	; 0xa0
   1bec8:	cmp	r4, #0
   1becc:	bne	1bea0 <__assert_fail@plt+0x98ac>
   1bed0:	ldrd	r4, [sp]
   1bed4:	ldr	r6, [sp, #8]
   1bed8:	add	sp, sp, #12
   1bedc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bee0:	blx	r5
   1bee4:	ldr	r4, [r4, #160]	; 0xa0
   1bee8:	cmp	r4, #0
   1beec:	bne	1bea0 <__assert_fail@plt+0x98ac>
   1bef0:	ldrd	r4, [sp]
   1bef4:	ldr	r6, [sp, #8]
   1bef8:	add	sp, sp, #12
   1befc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf00:	ldr	r2, [r0]
   1bf04:	movw	r3, #17776	; 0x4570
   1bf08:	movt	r3, #1
   1bf0c:	push	{lr}		; (str lr, [sp, #-4]!)
   1bf10:	movw	lr, #60976	; 0xee30
   1bf14:	movt	lr, #1
   1bf18:	movw	ip, #17680	; 0x4510
   1bf1c:	movt	ip, #1
   1bf20:	movw	r1, #17828	; 0x45a4
   1bf24:	movt	r1, #1
   1bf28:	cmp	r2, lr
   1bf2c:	cmpne	r2, r3
   1bf30:	moveq	r3, #1
   1bf34:	movne	r3, #0
   1bf38:	cmp	r2, ip
   1bf3c:	orreq	r3, r3, #1
   1bf40:	cmp	r2, r1
   1bf44:	orreq	r3, r3, #1
   1bf48:	cmp	r3, #0
   1bf4c:	movne	r3, #0
   1bf50:	strne	r3, [r0, #44]	; 0x2c
   1bf54:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf58:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1bf5c:	subs	r4, r0, #0
   1bf60:	strd	r6, [sp, #8]
   1bf64:	strd	r8, [sp, #16]
   1bf68:	str	sl, [sp, #24]
   1bf6c:	str	lr, [sp, #28]
   1bf70:	beq	1bff8 <__assert_fail@plt+0x9a04>
   1bf74:	movw	r7, #32320	; 0x7e40
   1bf78:	movt	r7, #6
   1bf7c:	ldrb	r3, [r7, #32]
   1bf80:	cmp	r3, #0
   1bf84:	beq	1c044 <__assert_fail@plt+0x9a50>
   1bf88:	movw	r6, #17656	; 0x44f8
   1bf8c:	movt	r6, #1
   1bf90:	movw	r5, #20520	; 0x5028
   1bf94:	movt	r5, #1
   1bf98:	movw	r9, #49252	; 0xc064
   1bf9c:	movt	r9, #1
   1bfa0:	movw	r8, #30060	; 0x756c
   1bfa4:	movt	r8, #6
   1bfa8:	mov	sl, #0
   1bfac:	b	1bfbc <__assert_fail@plt+0x99c8>
   1bfb0:	ldrb	r3, [r7, #32]
   1bfb4:	cmp	r3, #0
   1bfb8:	beq	1c044 <__assert_fail@plt+0x9a50>
   1bfbc:	ldr	r0, [r4, #156]	; 0x9c
   1bfc0:	bl	1bf58 <__assert_fail@plt+0x9964>
   1bfc4:	ldr	r3, [r4]
   1bfc8:	cmp	r3, r5
   1bfcc:	cmpne	r3, r6
   1bfd0:	bne	1bfec <__assert_fail@plt+0x99f8>
   1bfd4:	ldrb	r3, [r4, #40]	; 0x28
   1bfd8:	cmp	r3, #0
   1bfdc:	beq	1bfec <__assert_fail@plt+0x99f8>
   1bfe0:	ldr	r3, [r4, #116]	; 0x74
   1bfe4:	cmp	r3, #0
   1bfe8:	bne	1c010 <__assert_fail@plt+0x9a1c>
   1bfec:	ldr	r4, [r4, #160]	; 0xa0
   1bff0:	cmp	r4, #0
   1bff4:	bne	1bfb0 <__assert_fail@plt+0x99bc>
   1bff8:	ldrd	r4, [sp]
   1bffc:	ldrd	r6, [sp, #8]
   1c000:	ldrd	r8, [sp, #16]
   1c004:	ldr	sl, [sp, #24]
   1c008:	add	sp, sp, #28
   1c00c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c010:	add	r2, r4, #40	; 0x28
   1c014:	mov	r1, r9
   1c018:	ldr	r0, [r4, #144]	; 0x90
   1c01c:	bl	26524 <__assert_fail@plt+0x13f30>
   1c020:	ldr	r3, [r8]
   1c024:	ldr	r0, [r4, #144]	; 0x90
   1c028:	cmp	r0, r3
   1c02c:	beq	1bfec <__assert_fail@plt+0x99f8>
   1c030:	bl	35948 <__assert_fail@plt+0x23354>
   1c034:	ldr	r0, [r4, #144]	; 0x90
   1c038:	bl	38b10 <__assert_fail@plt+0x2651c>
   1c03c:	str	sl, [r4, #144]	; 0x90
   1c040:	b	1bfec <__assert_fail@plt+0x99f8>
   1c044:	movw	r3, #7504	; 0x1d50
   1c048:	movt	r3, #5
   1c04c:	movw	r1, #7724	; 0x1e2c
   1c050:	movt	r1, #5
   1c054:	movw	r0, #7732	; 0x1e34
   1c058:	movt	r0, #5
   1c05c:	mov	r2, #396	; 0x18c
   1c060:	bl	125f4 <__assert_fail@plt>
   1c064:	add	r1, r0, #48	; 0x30
   1c068:	add	r0, r0, #4
   1c06c:	str	r4, [sp, #-8]!
   1c070:	str	lr, [sp, #4]
   1c074:	bl	25de8 <__assert_fail@plt+0x137f4>
   1c078:	ldr	r4, [sp]
   1c07c:	add	sp, sp, #4
   1c080:	mov	r0, #0
   1c084:	pop	{pc}		; (ldr pc, [sp], #4)
   1c088:	strd	r4, [sp, #-16]!
   1c08c:	subs	r4, r0, #0
   1c090:	str	r6, [sp, #8]
   1c094:	str	lr, [sp, #12]
   1c098:	beq	1c0c4 <__assert_fail@plt+0x9ad0>
   1c09c:	movw	r5, #17652	; 0x44f4
   1c0a0:	movt	r5, #1
   1c0a4:	ldr	r0, [r4, #156]	; 0x9c
   1c0a8:	bl	1c088 <__assert_fail@plt+0x9a94>
   1c0ac:	ldr	r3, [r4]
   1c0b0:	cmp	r3, r5
   1c0b4:	beq	1c0d4 <__assert_fail@plt+0x9ae0>
   1c0b8:	ldr	r4, [r4, #160]	; 0xa0
   1c0bc:	cmp	r4, #0
   1c0c0:	bne	1c0a4 <__assert_fail@plt+0x9ab0>
   1c0c4:	ldrd	r4, [sp]
   1c0c8:	ldr	r6, [sp, #8]
   1c0cc:	add	sp, sp, #12
   1c0d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0d4:	ldrb	r3, [r4, #40]	; 0x28
   1c0d8:	cmp	r3, #0
   1c0dc:	beq	1c0b8 <__assert_fail@plt+0x9ac4>
   1c0e0:	ldr	r3, [r4, #116]	; 0x74
   1c0e4:	cmp	r3, #0
   1c0e8:	beq	1c0b8 <__assert_fail@plt+0x9ac4>
   1c0ec:	add	r1, r4, #88	; 0x58
   1c0f0:	add	r0, r4, #44	; 0x2c
   1c0f4:	bl	25de8 <__assert_fail@plt+0x137f4>
   1c0f8:	b	1c0b8 <__assert_fail@plt+0x9ac4>
   1c0fc:	movw	r1, #7724	; 0x1e2c
   1c100:	movt	r1, #5
   1c104:	ldr	r3, [pc, #20]	; 1c120 <__assert_fail@plt+0x9b2c>
   1c108:	movw	r0, #7760	; 0x1e50
   1c10c:	movt	r0, #5
   1c110:	str	r4, [sp, #-8]!
   1c114:	mov	r2, #123	; 0x7b
   1c118:	str	lr, [sp, #4]
   1c11c:	bl	125f4 <__assert_fail@plt>
   1c120:	andeq	r1, r5, r0, ror sp
   1c124:	strd	r4, [sp, #-16]!
   1c128:	mov	r4, r0
   1c12c:	mov	r5, #0
   1c130:	str	r6, [sp, #8]
   1c134:	mov	r6, r1
   1c138:	mov	r1, r2
   1c13c:	str	lr, [sp, #12]
   1c140:	bl	17194 <__assert_fail@plt+0x4ba0>
   1c144:	ldr	r2, [r4, #4]
   1c148:	mov	r4, #1
   1c14c:	mov	r1, #0
   1c150:	str	r6, [r0]
   1c154:	strd	r4, [r0, #8]
   1c158:	ldrd	r4, [sp]
   1c15c:	str	r2, [r0, #4]
   1c160:	ldr	r6, [sp, #8]
   1c164:	add	sp, sp, #12
   1c168:	str	r1, [r0, #40]	; 0x28
   1c16c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c170:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c174:	ldr	r4, [r0, #12]
   1c178:	strd	r6, [sp, #8]
   1c17c:	str	r8, [sp, #16]
   1c180:	str	lr, [sp, #20]
   1c184:	cmp	r4, #0
   1c188:	beq	1c1c8 <__assert_fail@plt+0x9bd4>
   1c18c:	mov	r5, r0
   1c190:	mov	r6, #1
   1c194:	bl	17194 <__assert_fail@plt+0x4ba0>
   1c198:	ldr	r2, [r5, #4]
   1c19c:	mov	r7, #0
   1c1a0:	mov	r1, #0
   1c1a4:	str	r4, [r0]
   1c1a8:	strd	r6, [r0, #8]
   1c1ac:	ldrd	r4, [sp]
   1c1b0:	str	r2, [r0, #4]
   1c1b4:	ldrd	r6, [sp, #8]
   1c1b8:	str	r1, [r0, #40]	; 0x28
   1c1bc:	ldr	r8, [sp, #16]
   1c1c0:	add	sp, sp, #20
   1c1c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1c8:	bl	1c0fc <__assert_fail@plt+0x9b08>
   1c1cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c1d0:	ldr	r4, [r0, #12]
   1c1d4:	strd	r6, [sp, #8]
   1c1d8:	str	r8, [sp, #16]
   1c1dc:	str	lr, [sp, #20]
   1c1e0:	cmp	r4, #0
   1c1e4:	beq	1c228 <__assert_fail@plt+0x9c34>
   1c1e8:	mov	r5, r0
   1c1ec:	mov	r1, #0
   1c1f0:	bl	17194 <__assert_fail@plt+0x4ba0>
   1c1f4:	ldr	r2, [r5, #4]
   1c1f8:	mov	r6, #1
   1c1fc:	mov	r7, #0
   1c200:	mov	r1, #0
   1c204:	str	r4, [r0]
   1c208:	strd	r6, [r0, #8]
   1c20c:	ldrd	r4, [sp]
   1c210:	str	r2, [r0, #4]
   1c214:	ldrd	r6, [sp, #8]
   1c218:	str	r1, [r0, #40]	; 0x28
   1c21c:	ldr	r8, [sp, #16]
   1c220:	add	sp, sp, #20
   1c224:	pop	{pc}		; (ldr pc, [sp], #4)
   1c228:	bl	1c0fc <__assert_fail@plt+0x9b08>
   1c22c:	subs	r4, r0, #0
   1c230:	str	r7, [sp, #-8]!
   1c234:	str	lr, [sp, #4]
   1c238:	beq	1c27c <__assert_fail@plt+0x9c88>
   1c23c:	movw	r3, #30024	; 0x7548
   1c240:	movt	r3, #6
   1c244:	ldr	r5, [r3]
   1c248:	mov	r2, #5
   1c24c:	movw	r1, #7788	; 0x1e6c
   1c250:	movt	r1, #5
   1c254:	mov	r0, #0
   1c258:	bl	120b4 <dcgettext@plt>
   1c25c:	movw	r3, #32004	; 0x7d04
   1c260:	movt	r3, #6
   1c264:	mov	r1, r0
   1c268:	ldr	r2, [r3]
   1c26c:	mov	r0, r5
   1c270:	bl	1233c <fprintf@plt>
   1c274:	mov	r0, r4
   1c278:	bl	122d0 <exit@plt>
   1c27c:	movw	r5, #30036	; 0x7554
   1c280:	movt	r5, #6
   1c284:	ldr	r7, [pc, #456]	; 1c454 <__assert_fail@plt+0x9e60>
   1c288:	mov	r2, #5
   1c28c:	movw	r1, #7828	; 0x1e94
   1c290:	movt	r1, #5
   1c294:	ldr	r6, [r5]
   1c298:	movw	r8, #32004	; 0x7d04
   1c29c:	movt	r8, #6
   1c2a0:	movw	sl, #9500	; 0x251c
   1c2a4:	movt	sl, #5
   1c2a8:	movw	r9, #9532	; 0x253c
   1c2ac:	movt	r9, #5
   1c2b0:	bl	120b4 <dcgettext@plt>
   1c2b4:	mov	r1, r0
   1c2b8:	mov	r0, r6
   1c2bc:	ldr	r2, [r8]
   1c2c0:	bl	1233c <fprintf@plt>
   1c2c4:	mov	r2, #5
   1c2c8:	mov	r0, r4
   1c2cc:	movw	r1, #7904	; 0x1ee0
   1c2d0:	movt	r1, #5
   1c2d4:	bl	120b4 <dcgettext@plt>
   1c2d8:	ldr	r1, [r5]
   1c2dc:	movw	r6, #9660	; 0x25bc
   1c2e0:	movt	r6, #5
   1c2e4:	bl	12588 <fputs@plt>
   1c2e8:	mov	r2, #5
   1c2ec:	mov	r0, r4
   1c2f0:	movw	r1, #8044	; 0x1f6c
   1c2f4:	movt	r1, #5
   1c2f8:	bl	120b4 <dcgettext@plt>
   1c2fc:	ldr	r1, [r5]
   1c300:	bl	12588 <fputs@plt>
   1c304:	mov	r2, #5
   1c308:	mov	r0, r4
   1c30c:	movw	r1, #8252	; 0x203c
   1c310:	movt	r1, #5
   1c314:	bl	120b4 <dcgettext@plt>
   1c318:	ldr	r1, [r5]
   1c31c:	bl	12588 <fputs@plt>
   1c320:	mov	r2, #5
   1c324:	mov	r0, r4
   1c328:	movw	r1, #8340	; 0x2094
   1c32c:	movt	r1, #5
   1c330:	bl	120b4 <dcgettext@plt>
   1c334:	ldr	r1, [r5]
   1c338:	bl	12588 <fputs@plt>
   1c33c:	mov	r2, #5
   1c340:	mov	r0, r4
   1c344:	movw	r1, #8548	; 0x2164
   1c348:	movt	r1, #5
   1c34c:	bl	120b4 <dcgettext@plt>
   1c350:	ldr	r1, [r5]
   1c354:	bl	12588 <fputs@plt>
   1c358:	mov	r2, #5
   1c35c:	mov	r0, r4
   1c360:	movw	r1, #9092	; 0x2384
   1c364:	movt	r1, #5
   1c368:	bl	120b4 <dcgettext@plt>
   1c36c:	ldr	r1, [r5]
   1c370:	bl	12588 <fputs@plt>
   1c374:	mov	r2, #5
   1c378:	mov	r0, r4
   1c37c:	movw	r1, #9348	; 0x2484
   1c380:	movt	r1, #5
   1c384:	bl	120b4 <dcgettext@plt>
   1c388:	ldr	r1, [r5]
   1c38c:	bl	12588 <fputs@plt>
   1c390:	mov	r2, #5
   1c394:	mov	r0, r4
   1c398:	movw	r1, #9372	; 0x249c
   1c39c:	movt	r1, #5
   1c3a0:	bl	120b4 <dcgettext@plt>
   1c3a4:	ldr	r1, [r5]
   1c3a8:	bl	12588 <fputs@plt>
   1c3ac:	mov	r2, #5
   1c3b0:	mov	r0, r4
   1c3b4:	movw	r1, #9432	; 0x24d8
   1c3b8:	movt	r1, #5
   1c3bc:	bl	120b4 <dcgettext@plt>
   1c3c0:	ldr	r1, [r5]
   1c3c4:	bl	12588 <fputs@plt>
   1c3c8:	mov	r2, #5
   1c3cc:	mov	r0, r4
   1c3d0:	movw	r1, #9504	; 0x2520
   1c3d4:	movt	r1, #5
   1c3d8:	bl	120b4 <dcgettext@plt>
   1c3dc:	ldr	r1, [r5]
   1c3e0:	bl	12588 <fputs@plt>
   1c3e4:	b	1c400 <__assert_fail@plt+0x9e0c>
   1c3e8:	mov	r2, r9
   1c3ec:	mov	r1, r6
   1c3f0:	bl	1233c <fprintf@plt>
   1c3f4:	cmp	r4, #9
   1c3f8:	beq	1c424 <__assert_fail@plt+0x9e30>
   1c3fc:	add	r7, r7, #12
   1c400:	cmp	r4, #0
   1c404:	add	r4, r4, #1
   1c408:	ldr	r0, [r5]
   1c40c:	ldr	r3, [r7]
   1c410:	bne	1c3e8 <__assert_fail@plt+0x9df4>
   1c414:	mov	r2, sl
   1c418:	mov	r1, r6
   1c41c:	bl	1233c <fprintf@plt>
   1c420:	b	1c3fc <__assert_fail@plt+0x9e08>
   1c424:	mov	r2, #5
   1c428:	movw	r1, #9536	; 0x2540
   1c42c:	movt	r1, #5
   1c430:	mov	r0, #0
   1c434:	bl	120b4 <dcgettext@plt>
   1c438:	ldr	r1, [r5]
   1c43c:	bl	12588 <fputs@plt>
   1c440:	ldr	r0, [r5]
   1c444:	ldr	r1, [r8]
   1c448:	bl	2827c <__assert_fail@plt+0x15c88>
   1c44c:	mov	r0, #0
   1c450:	bl	122d0 <exit@plt>
   1c454:	andeq	r1, r5, r0, lsl #27
   1c458:	bx	lr
   1c45c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c460:	movw	r4, #32320	; 0x7e40
   1c464:	movt	r4, #6
   1c468:	ldrb	r3, [r4, #4]
   1c46c:	strd	r6, [sp, #8]
   1c470:	strd	r8, [sp, #16]
   1c474:	str	sl, [sp, #24]
   1c478:	str	lr, [sp, #28]
   1c47c:	cmp	r3, #0
   1c480:	bne	1c504 <__assert_fail@plt+0x9f10>
   1c484:	mov	r8, r1
   1c488:	movw	r7, #32364	; 0x7e6c
   1c48c:	movt	r7, #6
   1c490:	mov	r6, r0
   1c494:	mov	r1, r2
   1c498:	mov	r0, r8
   1c49c:	ldr	r3, [r7, #52]	; 0x34
   1c4a0:	mov	r5, r2
   1c4a4:	blx	r3
   1c4a8:	cmp	r0, #0
   1c4ac:	bne	1c530 <__assert_fail@plt+0x9f3c>
   1c4b0:	ldr	r6, [r5, #16]
   1c4b4:	cmp	r6, #0
   1c4b8:	bne	1c508 <__assert_fail@plt+0x9f14>
   1c4bc:	mov	r2, #5
   1c4c0:	movw	r1, #2504	; 0x9c8
   1c4c4:	movt	r1, #5
   1c4c8:	bl	120b4 <dcgettext@plt>
   1c4cc:	mov	r9, r0
   1c4d0:	mov	r2, r8
   1c4d4:	ldr	r1, [r7, #72]	; 0x48
   1c4d8:	mov	r0, r6
   1c4dc:	bl	3431c <__assert_fail@plt+0x21d28>
   1c4e0:	mov	r3, r0
   1c4e4:	mov	r1, r6
   1c4e8:	mov	r0, r6
   1c4ec:	mov	r2, r9
   1c4f0:	bl	121ec <error@plt>
   1c4f4:	mov	r3, #1
   1c4f8:	ldr	r6, [r5, #16]
   1c4fc:	str	r3, [r4, #28]
   1c500:	b	1c508 <__assert_fail@plt+0x9f14>
   1c504:	ldr	r6, [r2, #16]
   1c508:	movw	r3, #257	; 0x101
   1c50c:	mov	r0, #0
   1c510:	strh	r3, [r4, #4]
   1c514:	str	r6, [r4, #8]
   1c518:	ldrd	r4, [sp]
   1c51c:	ldrd	r6, [sp, #8]
   1c520:	ldrd	r8, [sp, #16]
   1c524:	ldr	sl, [sp, #24]
   1c528:	add	sp, sp, #28
   1c52c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c530:	ldrb	r5, [r7, #14]
   1c534:	bl	12348 <__errno_location@plt>
   1c538:	ldr	r8, [r0]
   1c53c:	cmp	r5, #0
   1c540:	beq	1c550 <__assert_fail@plt+0x9f5c>
   1c544:	cmp	r8, #2
   1c548:	mvneq	r0, #0
   1c54c:	beq	1c518 <__assert_fail@plt+0x9f24>
   1c550:	ldrb	r5, [r4, #40]	; 0x28
   1c554:	cmp	r5, #0
   1c558:	bne	1c58c <__assert_fail@plt+0x9f98>
   1c55c:	mov	r2, r6
   1c560:	mov	r0, r5
   1c564:	ldr	r1, [r7, #72]	; 0x48
   1c568:	bl	3431c <__assert_fail@plt+0x21d28>
   1c56c:	mov	r3, r0
   1c570:	mov	r1, r8
   1c574:	mov	r0, r5
   1c578:	movw	r2, #20016	; 0x4e30
   1c57c:	movt	r2, #5
   1c580:	bl	121ec <error@plt>
   1c584:	mov	r3, #1
   1c588:	str	r3, [r4, #28]
   1c58c:	mov	r3, #1
   1c590:	mvn	r0, #0
   1c594:	strb	r3, [r4, #40]	; 0x28
   1c598:	b	1c518 <__assert_fail@plt+0x9f24>
   1c59c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c5a0:	vpush	{d8}
   1c5a4:	sub	sp, sp, #396	; 0x18c
   1c5a8:	mov	r0, sp
   1c5ac:	bl	1209c <uname@plt>
   1c5b0:	subs	r1, r0, #0
   1c5b4:	bne	1c5f4 <__assert_fail@plt+0xa000>
   1c5b8:	add	r0, sp, #130	; 0x82
   1c5bc:	bl	123b4 <strtod@plt>
   1c5c0:	movw	r0, #9604	; 0x2584
   1c5c4:	movt	r0, #5
   1c5c8:	vcvt.f32.f64	s16, d0
   1c5cc:	mov	r1, sp
   1c5d0:	bl	11f40 <strcmp@plt>
   1c5d4:	cmp	r0, #0
   1c5d8:	beq	1c604 <__assert_fail@plt+0xa010>
   1c5dc:	mov	r1, sp
   1c5e0:	movw	r0, #9612	; 0x258c
   1c5e4:	movt	r0, #5
   1c5e8:	bl	11f40 <strcmp@plt>
   1c5ec:	cmp	r0, #0
   1c5f0:	beq	1c624 <__assert_fail@plt+0xa030>
   1c5f4:	mov	r0, #1
   1c5f8:	add	sp, sp, #396	; 0x18c
   1c5fc:	vpop	{d8}
   1c600:	pop	{pc}		; (ldr pc, [sp], #4)
   1c604:	vldr	s15, [pc, #56]	; 1c644 <__assert_fail@plt+0xa050>
   1c608:	vcmpe.f32	s16, s15
   1c60c:	vmrs	APSR_nzcv, fpscr
   1c610:	movge	r0, #1
   1c614:	movlt	r0, #0
   1c618:	add	sp, sp, #396	; 0x18c
   1c61c:	vpop	{d8}
   1c620:	pop	{pc}		; (ldr pc, [sp], #4)
   1c624:	vldr	s15, [pc, #28]	; 1c648 <__assert_fail@plt+0xa054>
   1c628:	vcmpe.f32	s16, s15
   1c62c:	vmrs	APSR_nzcv, fpscr
   1c630:	movge	r0, #1
   1c634:	movlt	r0, #0
   1c638:	add	sp, sp, #396	; 0x18c
   1c63c:	vpop	{d8}
   1c640:	pop	{pc}		; (ldr pc, [sp], #4)
   1c644:	andmi	ip, ip, sp, asr #25
   1c648:	submi	r6, r6, r6, ror #12
   1c64c:	str	r4, [sp, #-8]!
   1c650:	movw	r4, #32320	; 0x7e40
   1c654:	movt	r4, #6
   1c658:	ldrb	r3, [r4, #32]
   1c65c:	str	lr, [sp, #4]
   1c660:	cmp	r3, #0
   1c664:	bne	1c674 <__assert_fail@plt+0xa080>
   1c668:	ldr	r4, [sp]
   1c66c:	add	sp, sp, #4
   1c670:	pop	{pc}		; (ldr pc, [sp], #4)
   1c674:	bl	16cd0 <__assert_fail@plt+0x46dc>
   1c678:	bl	1bf58 <__assert_fail@plt+0x9964>
   1c67c:	mov	r3, #0
   1c680:	strb	r3, [r4, #32]
   1c684:	ldr	r4, [sp]
   1c688:	add	sp, sp, #4
   1c68c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c690:	mov	r0, #8
   1c694:	strd	r4, [sp, #-12]!
   1c698:	movw	r4, #30060	; 0x756c
   1c69c:	movt	r4, #6
   1c6a0:	str	lr, [sp, #8]
   1c6a4:	sub	sp, sp, #12
   1c6a8:	bl	36864 <__assert_fail@plt+0x24270>
   1c6ac:	str	r0, [r4]
   1c6b0:	bl	358b8 <__assert_fail@plt+0x232c4>
   1c6b4:	cmp	r0, #0
   1c6b8:	bne	1c6cc <__assert_fail@plt+0xa0d8>
   1c6bc:	add	sp, sp, #12
   1c6c0:	ldrd	r4, [sp]
   1c6c4:	add	sp, sp, #8
   1c6c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6cc:	bl	12348 <__errno_location@plt>
   1c6d0:	mov	r2, #5
   1c6d4:	movw	r1, #9620	; 0x2594
   1c6d8:	movt	r1, #5
   1c6dc:	ldr	r5, [r0]
   1c6e0:	mov	r0, #0
   1c6e4:	bl	120b4 <dcgettext@plt>
   1c6e8:	ldr	r3, [r4]
   1c6ec:	mov	r2, r0
   1c6f0:	ldr	r1, [r3]
   1c6f4:	cmp	r1, #0
   1c6f8:	blt	1c718 <__assert_fail@plt+0xa124>
   1c6fc:	movw	r3, #9500	; 0x251c
   1c700:	movt	r3, #5
   1c704:	mov	r1, r3
   1c708:	mov	r0, #1
   1c70c:	str	r1, [sp]
   1c710:	mov	r1, r5
   1c714:	bl	121ec <error@plt>
   1c718:	ldr	r1, [r3, #4]
   1c71c:	cmp	r1, #0
   1c720:	movwne	r3, #13744	; 0x35b0
   1c724:	movtne	r3, #5
   1c728:	bne	1c708 <__assert_fail@plt+0xa114>
   1c72c:	b	1c6fc <__assert_fail@plt+0xa108>
   1c730:	strd	r4, [sp, #-16]!
   1c734:	str	r6, [sp, #8]
   1c738:	str	lr, [sp, #12]
   1c73c:	sub	sp, sp, #8
   1c740:	bl	16cd0 <__assert_fail@plt+0x46dc>
   1c744:	subs	r4, r0, #0
   1c748:	beq	1c830 <__assert_fail@plt+0xa23c>
   1c74c:	movw	r6, #49288	; 0xc088
   1c750:	movt	r6, #1
   1c754:	mov	r5, r4
   1c758:	ldr	r0, [r5, #156]	; 0x9c
   1c75c:	cmp	r0, #0
   1c760:	beq	1c76c <__assert_fail@plt+0xa178>
   1c764:	mov	r1, r6
   1c768:	bl	1be8c <__assert_fail@plt+0x9898>
   1c76c:	mov	r0, r5
   1c770:	bl	1c088 <__assert_fail@plt+0x9a94>
   1c774:	ldr	r5, [r5, #160]	; 0xa0
   1c778:	cmp	r5, #0
   1c77c:	bne	1c758 <__assert_fail@plt+0xa164>
   1c780:	movw	r5, #32320	; 0x7e40
   1c784:	movt	r5, #6
   1c788:	ldrb	r3, [r5, #32]
   1c78c:	cmp	r3, #0
   1c790:	bne	1c898 <__assert_fail@plt+0xa2a4>
   1c794:	ldr	r0, [r5, #36]	; 0x24
   1c798:	movw	r6, #48896	; 0xbf00
   1c79c:	movt	r6, #1
   1c7a0:	bl	1da14 <__assert_fail@plt+0xb420>
   1c7a4:	ldr	r0, [r4, #156]	; 0x9c
   1c7a8:	cmp	r0, #0
   1c7ac:	beq	1c7b8 <__assert_fail@plt+0xa1c4>
   1c7b0:	mov	r1, r6
   1c7b4:	bl	1be8c <__assert_fail@plt+0x9898>
   1c7b8:	mov	r0, r4
   1c7bc:	bl	1bf00 <__assert_fail@plt+0x990c>
   1c7c0:	ldr	r4, [r4, #160]	; 0xa0
   1c7c4:	cmp	r4, #0
   1c7c8:	bne	1c7a4 <__assert_fail@plt+0xa1b0>
   1c7cc:	movw	r4, #30060	; 0x756c
   1c7d0:	movt	r4, #6
   1c7d4:	ldr	r0, [r4]
   1c7d8:	bl	3592c <__assert_fail@plt+0x23338>
   1c7dc:	subs	r6, r0, #0
   1c7e0:	bne	1c8ac <__assert_fail@plt+0xa2b8>
   1c7e4:	ldr	r0, [r4]
   1c7e8:	bl	35948 <__assert_fail@plt+0x23354>
   1c7ec:	ldr	r0, [r4]
   1c7f0:	bl	38b10 <__assert_fail@plt+0x2651c>
   1c7f4:	str	r6, [r4]
   1c7f8:	bl	27034 <__assert_fail@plt+0x14a40>
   1c7fc:	cmp	r0, #0
   1c800:	bne	1c844 <__assert_fail@plt+0xa250>
   1c804:	movw	r3, #30036	; 0x7554
   1c808:	movt	r3, #6
   1c80c:	ldr	r0, [r3]
   1c810:	bl	38ab0 <__assert_fail@plt+0x264bc>
   1c814:	cmn	r0, #1
   1c818:	beq	1c850 <__assert_fail@plt+0xa25c>
   1c81c:	add	sp, sp, #8
   1c820:	ldrd	r4, [sp]
   1c824:	ldr	r6, [sp, #8]
   1c828:	add	sp, sp, #12
   1c82c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c830:	movw	r5, #32320	; 0x7e40
   1c834:	movt	r5, #6
   1c838:	ldr	r0, [r5, #36]	; 0x24
   1c83c:	bl	1da14 <__assert_fail@plt+0xb420>
   1c840:	b	1c7cc <__assert_fail@plt+0xa1d8>
   1c844:	bl	2705c <__assert_fail@plt+0x14a68>
   1c848:	bl	27004 <__assert_fail@plt+0x14a10>
   1c84c:	b	1c804 <__assert_fail@plt+0xa210>
   1c850:	bl	12348 <__errno_location@plt>
   1c854:	ldr	r4, [r0]
   1c858:	movw	r3, #32364	; 0x7e6c
   1c85c:	movt	r3, #6
   1c860:	movw	r2, #9716	; 0x25f4
   1c864:	movt	r2, #5
   1c868:	mov	r0, #0
   1c86c:	ldr	r1, [r3, #72]	; 0x48
   1c870:	bl	3431c <__assert_fail@plt+0x21d28>
   1c874:	mov	r3, r0
   1c878:	movw	r2, #20016	; 0x4e30
   1c87c:	movt	r2, #5
   1c880:	mov	r1, r4
   1c884:	mov	r0, #0
   1c888:	bl	121ec <error@plt>
   1c88c:	mov	r3, #1
   1c890:	str	r3, [r5, #28]
   1c894:	b	1c81c <__assert_fail@plt+0xa228>
   1c898:	bl	16cd0 <__assert_fail@plt+0x46dc>
   1c89c:	bl	1bf58 <__assert_fail@plt+0x9964>
   1c8a0:	mov	r3, #0
   1c8a4:	strb	r3, [r5, #32]
   1c8a8:	b	1c794 <__assert_fail@plt+0xa1a0>
   1c8ac:	bl	12348 <__errno_location@plt>
   1c8b0:	mov	r2, #5
   1c8b4:	movw	r1, #9668	; 0x25c4
   1c8b8:	movt	r1, #5
   1c8bc:	ldr	r5, [r0]
   1c8c0:	mov	r0, #0
   1c8c4:	bl	120b4 <dcgettext@plt>
   1c8c8:	ldr	r3, [r4]
   1c8cc:	mov	r2, r0
   1c8d0:	ldr	r1, [r3]
   1c8d4:	cmp	r1, #0
   1c8d8:	blt	1c900 <__assert_fail@plt+0xa30c>
   1c8dc:	movw	r3, #9500	; 0x251c
   1c8e0:	movt	r3, #5
   1c8e4:	mov	r1, r3
   1c8e8:	mov	r0, #0
   1c8ec:	str	r1, [sp]
   1c8f0:	mov	r1, r5
   1c8f4:	bl	121ec <error@plt>
   1c8f8:	mov	r0, #1
   1c8fc:	bl	12018 <_exit@plt>
   1c900:	ldr	r1, [r3, #4]
   1c904:	cmp	r1, #0
   1c908:	movwne	r3, #13744	; 0x35b0
   1c90c:	movtne	r3, #5
   1c910:	bne	1c8e8 <__assert_fail@plt+0xa2f4>
   1c914:	b	1c8dc <__assert_fail@plt+0xa2e8>
   1c918:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c91c:	movw	r4, #32320	; 0x7e40
   1c920:	movt	r4, #6
   1c924:	ldr	ip, [r4, #16]
   1c928:	strd	r6, [sp, #8]
   1c92c:	str	lr, [sp, #16]
   1c930:	sub	sp, sp, #12
   1c934:	cmn	ip, #100	; 0x64
   1c938:	cmpne	ip, #0
   1c93c:	blt	1ca20 <__assert_fail@plt+0xa42c>
   1c940:	ldr	r2, [r4]
   1c944:	mov	r5, r0
   1c948:	mov	r6, r1
   1c94c:	cmp	r2, #0
   1c950:	bne	1c9dc <__assert_fail@plt+0xa3e8>
   1c954:	mov	r1, ip
   1c958:	mov	r3, r6
   1c95c:	str	r2, [sp]
   1c960:	mov	r0, #3
   1c964:	mov	r2, r5
   1c968:	bl	1212c <__fxstatat64@plt>
   1c96c:	subs	r7, r0, #0
   1c970:	bne	1c98c <__assert_fail@plt+0xa398>
   1c974:	mov	r0, r7
   1c978:	add	sp, sp, #12
   1c97c:	ldrd	r4, [sp]
   1c980:	ldrd	r6, [sp, #8]
   1c984:	add	sp, sp, #16
   1c988:	pop	{pc}		; (ldr pc, [sp], #4)
   1c98c:	bl	12348 <__errno_location@plt>
   1c990:	ldr	r3, [r0]
   1c994:	cmp	r3, #2
   1c998:	beq	1c9a4 <__assert_fail@plt+0xa3b0>
   1c99c:	cmp	r3, #20
   1c9a0:	bne	1c974 <__assert_fail@plt+0xa380>
   1c9a4:	movw	r3, #32364	; 0x7e6c
   1c9a8:	movt	r3, #6
   1c9ac:	ldr	r3, [r3, #44]	; 0x2c
   1c9b0:	tst	r3, #2
   1c9b4:	bne	1ca00 <__assert_fail@plt+0xa40c>
   1c9b8:	mov	ip, #256	; 0x100
   1c9bc:	mov	r3, r6
   1c9c0:	ldr	r1, [r4, #16]
   1c9c4:	mov	r2, r5
   1c9c8:	mov	r0, #3
   1c9cc:	str	ip, [sp]
   1c9d0:	bl	1212c <__fxstatat64@plt>
   1c9d4:	mov	r7, r0
   1c9d8:	b	1c974 <__assert_fail@plt+0xa380>
   1c9dc:	mov	lr, #256	; 0x100
   1c9e0:	mov	r3, r1
   1c9e4:	mov	r2, r0
   1c9e8:	mov	r1, ip
   1c9ec:	mov	r0, #3
   1c9f0:	str	lr, [sp]
   1c9f4:	bl	1212c <__fxstatat64@plt>
   1c9f8:	mov	r7, r0
   1c9fc:	b	1c974 <__assert_fail@plt+0xa380>
   1ca00:	movw	r3, #30024	; 0x7548
   1ca04:	movt	r3, #6
   1ca08:	movw	r1, #9756	; 0x261c
   1ca0c:	movt	r1, #5
   1ca10:	ldr	r0, [r3]
   1ca14:	mov	r2, r5
   1ca18:	bl	1233c <fprintf@plt>
   1ca1c:	b	1c9b8 <__assert_fail@plt+0xa3c4>
   1ca20:	movw	r1, #7724	; 0x1e2c
   1ca24:	movt	r1, #5
   1ca28:	ldr	r3, [pc, #12]	; 1ca3c <__assert_fail@plt+0xa448>
   1ca2c:	movw	r0, #9732	; 0x2604
   1ca30:	movt	r0, #5
   1ca34:	movw	r2, #605	; 0x25d
   1ca38:	bl	125f4 <__assert_fail@plt>
   1ca3c:	andeq	r1, r5, ip, ror #27
   1ca40:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ca44:	movw	r4, #32320	; 0x7e40
   1ca48:	movt	r4, #6
   1ca4c:	ldr	r3, [r4, #16]
   1ca50:	strd	r6, [sp, #8]
   1ca54:	str	lr, [sp, #16]
   1ca58:	sub	sp, sp, #12
   1ca5c:	cmn	r3, #100	; 0x64
   1ca60:	cmpne	r3, #0
   1ca64:	blt	1cb1c <__assert_fail@plt+0xa528>
   1ca68:	mov	r5, r0
   1ca6c:	mov	r0, #0
   1ca70:	mov	r6, r1
   1ca74:	mov	r2, r5
   1ca78:	mov	r1, r3
   1ca7c:	mov	r3, r6
   1ca80:	str	r0, [sp]
   1ca84:	mov	r0, #3
   1ca88:	bl	1212c <__fxstatat64@plt>
   1ca8c:	subs	r7, r0, #0
   1ca90:	bne	1caac <__assert_fail@plt+0xa4b8>
   1ca94:	mov	r0, r7
   1ca98:	add	sp, sp, #12
   1ca9c:	ldrd	r4, [sp]
   1caa0:	ldrd	r6, [sp, #8]
   1caa4:	add	sp, sp, #16
   1caa8:	pop	{pc}		; (ldr pc, [sp], #4)
   1caac:	bl	12348 <__errno_location@plt>
   1cab0:	ldr	r3, [r0]
   1cab4:	cmp	r3, #2
   1cab8:	beq	1cac4 <__assert_fail@plt+0xa4d0>
   1cabc:	cmp	r3, #20
   1cac0:	bne	1ca94 <__assert_fail@plt+0xa4a0>
   1cac4:	movw	r3, #32364	; 0x7e6c
   1cac8:	movt	r3, #6
   1cacc:	ldr	r3, [r3, #44]	; 0x2c
   1cad0:	tst	r3, #2
   1cad4:	bne	1cafc <__assert_fail@plt+0xa508>
   1cad8:	mov	ip, #256	; 0x100
   1cadc:	mov	r3, r6
   1cae0:	ldr	r1, [r4, #16]
   1cae4:	mov	r2, r5
   1cae8:	mov	r0, #3
   1caec:	str	ip, [sp]
   1caf0:	bl	1212c <__fxstatat64@plt>
   1caf4:	mov	r7, r0
   1caf8:	b	1ca94 <__assert_fail@plt+0xa4a0>
   1cafc:	movw	r3, #30024	; 0x7548
   1cb00:	movt	r3, #6
   1cb04:	movw	r1, #9756	; 0x261c
   1cb08:	movt	r1, #5
   1cb0c:	ldr	r0, [r3]
   1cb10:	mov	r2, r5
   1cb14:	bl	1233c <fprintf@plt>
   1cb18:	b	1cad8 <__assert_fail@plt+0xa4e4>
   1cb1c:	movw	r1, #7724	; 0x1e2c
   1cb20:	movt	r1, #5
   1cb24:	ldr	r3, [pc, #12]	; 1cb38 <__assert_fail@plt+0xa544>
   1cb28:	movw	r0, #9732	; 0x2604
   1cb2c:	movt	r0, #5
   1cb30:	mov	r2, #636	; 0x27c
   1cb34:	bl	125f4 <__assert_fail@plt>
   1cb38:	strdeq	r1, [r5], -ip
   1cb3c:	movw	r3, #32320	; 0x7e40
   1cb40:	movt	r3, #6
   1cb44:	push	{lr}		; (str lr, [sp, #-4]!)
   1cb48:	ldr	ip, [r3, #16]
   1cb4c:	sub	sp, sp, #12
   1cb50:	cmn	ip, #100	; 0x64
   1cb54:	cmpne	ip, #0
   1cb58:	blt	1cb80 <__assert_fail@plt+0xa58c>
   1cb5c:	mov	lr, #256	; 0x100
   1cb60:	mov	r3, r1
   1cb64:	mov	r2, r0
   1cb68:	mov	r1, ip
   1cb6c:	mov	r0, #3
   1cb70:	str	lr, [sp]
   1cb74:	bl	1212c <__fxstatat64@plt>
   1cb78:	add	sp, sp, #12
   1cb7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb80:	movw	r1, #7724	; 0x1e2c
   1cb84:	movt	r1, #5
   1cb88:	ldr	r3, [pc, #12]	; 1cb9c <__assert_fail@plt+0xa5a8>
   1cb8c:	movw	r0, #9816	; 0x2658
   1cb90:	movt	r0, #5
   1cb94:	movw	r2, #653	; 0x28d
   1cb98:	bl	125f4 <__assert_fail@plt>
   1cb9c:	andeq	r1, r5, ip, lsl #28
   1cba0:	movw	ip, #30096	; 0x7590
   1cba4:	movt	ip, #6
   1cba8:	strd	r4, [sp, #-16]!
   1cbac:	movw	r3, #30024	; 0x7548
   1cbb0:	movt	r3, #6
   1cbb4:	ldr	r4, [ip, #4]
   1cbb8:	mov	r2, r0
   1cbbc:	mov	r5, r0
   1cbc0:	ldr	r0, [r3]
   1cbc4:	str	r6, [sp, #8]
   1cbc8:	mov	r6, r1
   1cbcc:	movw	r1, #9872	; 0x2690
   1cbd0:	movt	r1, #5
   1cbd4:	str	lr, [sp, #12]
   1cbd8:	sub	sp, sp, #8
   1cbdc:	ldr	lr, [ip]
   1cbe0:	adds	lr, lr, #1
   1cbe4:	adc	r4, r4, #0
   1cbe8:	str	lr, [ip]
   1cbec:	str	r4, [ip, #4]
   1cbf0:	bl	1233c <fprintf@plt>
   1cbf4:	movw	r2, #32364	; 0x7e6c
   1cbf8:	movt	r2, #6
   1cbfc:	ldr	r2, [r2, #48]	; 0x30
   1cc00:	cmp	r2, #1
   1cc04:	beq	1cc38 <__assert_fail@plt+0xa644>
   1cc08:	cmp	r2, #0
   1cc0c:	beq	1cc58 <__assert_fail@plt+0xa664>
   1cc10:	cmp	r2, #2
   1cc14:	bne	1cc9c <__assert_fail@plt+0xa6a8>
   1cc18:	mov	r1, r6
   1cc1c:	mov	r0, r5
   1cc20:	add	sp, sp, #8
   1cc24:	ldrd	r4, [sp]
   1cc28:	ldr	r6, [sp, #8]
   1cc2c:	ldr	lr, [sp, #12]
   1cc30:	add	sp, sp, #16
   1cc34:	b	1c918 <__assert_fail@plt+0xa324>
   1cc38:	mov	r1, r6
   1cc3c:	mov	r0, r5
   1cc40:	add	sp, sp, #8
   1cc44:	ldrd	r4, [sp]
   1cc48:	ldr	r6, [sp, #8]
   1cc4c:	ldr	lr, [sp, #12]
   1cc50:	add	sp, sp, #16
   1cc54:	b	1ca40 <__assert_fail@plt+0xa44c>
   1cc58:	movw	r3, #32320	; 0x7e40
   1cc5c:	movt	r3, #6
   1cc60:	ldr	r1, [r3, #16]
   1cc64:	cmn	r1, #100	; 0x64
   1cc68:	cmpne	r1, #0
   1cc6c:	blt	1ccb8 <__assert_fail@plt+0xa6c4>
   1cc70:	mov	ip, #256	; 0x100
   1cc74:	mov	r3, r6
   1cc78:	mov	r2, r5
   1cc7c:	mov	r0, #3
   1cc80:	str	ip, [sp]
   1cc84:	bl	1212c <__fxstatat64@plt>
   1cc88:	add	sp, sp, #8
   1cc8c:	ldrd	r4, [sp]
   1cc90:	ldr	r6, [sp, #8]
   1cc94:	add	sp, sp, #12
   1cc98:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc9c:	movw	r1, #7724	; 0x1e2c
   1cca0:	movt	r1, #5
   1cca4:	ldr	r3, [pc, #40]	; 1ccd4 <__assert_fail@plt+0xa6e0>
   1cca8:	movw	r0, #20308	; 0x4f54
   1ccac:	movt	r0, #5
   1ccb0:	movw	r2, #677	; 0x2a5
   1ccb4:	bl	125f4 <__assert_fail@plt>
   1ccb8:	movw	r1, #7724	; 0x1e2c
   1ccbc:	movt	r1, #5
   1ccc0:	ldr	r3, [pc, #16]	; 1ccd8 <__assert_fail@plt+0xa6e4>
   1ccc4:	movw	r0, #9816	; 0x2658
   1ccc8:	movt	r0, #5
   1cccc:	movw	r2, #653	; 0x28d
   1ccd0:	bl	125f4 <__assert_fail@plt>
   1ccd4:	andeq	r1, r5, ip, lsl lr
   1ccd8:	andeq	r1, r5, ip, lsl #28
   1ccdc:	movw	r3, #32364	; 0x7e6c
   1cce0:	movt	r3, #6
   1cce4:	ldr	r0, [r3, #48]	; 0x30
   1cce8:	cmp	r0, #1
   1ccec:	beq	1cd14 <__assert_fail@plt+0xa720>
   1ccf0:	cmp	r0, #2
   1ccf4:	bne	1cd10 <__assert_fail@plt+0xa71c>
   1ccf8:	movw	r3, #32320	; 0x7e40
   1ccfc:	movt	r3, #6
   1cd00:	ldr	r0, [r3]
   1cd04:	clz	r0, r0
   1cd08:	lsr	r0, r0, #5
   1cd0c:	bx	lr
   1cd10:	mov	r0, #0
   1cd14:	bx	lr
   1cd18:	strd	r4, [sp, #-16]!
   1cd1c:	mov	r4, r0
   1cd20:	mov	r5, r3
   1cd24:	ldr	ip, [r4]
   1cd28:	mov	r0, r1
   1cd2c:	str	r6, [sp, #8]
   1cd30:	str	lr, [sp, #12]
   1cd34:	ldrb	lr, [sp, #16]
   1cd38:	cmp	ip, #0
   1cd3c:	beq	1cd78 <__assert_fail@plt+0xa784>
   1cd40:	and	r3, ip, #61440	; 0xf000
   1cd44:	cmp	r3, #40960	; 0xa000
   1cd48:	beq	1cda4 <__assert_fail@plt+0xa7b0>
   1cd4c:	movw	lr, #32320	; 0x7e40
   1cd50:	movt	lr, #6
   1cd54:	mov	r3, #1
   1cd58:	str	ip, [r5, #16]
   1cd5c:	mov	r0, r3
   1cd60:	strb	r3, [lr, #5]
   1cd64:	str	ip, [lr, #8]
   1cd68:	ldrd	r4, [sp]
   1cd6c:	ldr	r6, [sp, #8]
   1cd70:	add	sp, sp, #12
   1cd74:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd78:	cmp	lr, #0
   1cd7c:	beq	1ce0c <__assert_fail@plt+0xa818>
   1cd80:	movw	r3, #32320	; 0x7e40
   1cd84:	movt	r3, #6
   1cd88:	ldrd	r4, [sp]
   1cd8c:	mov	r0, lr
   1cd90:	ldr	r6, [sp, #8]
   1cd94:	add	sp, sp, #12
   1cd98:	strh	ip, [r3, #4]
   1cd9c:	str	ip, [r3, #8]
   1cda0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cda4:	movw	r3, #32364	; 0x7e6c
   1cda8:	movt	r3, #6
   1cdac:	ldr	r3, [r3, #48]	; 0x30
   1cdb0:	cmp	r3, #1
   1cdb4:	beq	1cdd4 <__assert_fail@plt+0xa7e0>
   1cdb8:	cmp	r3, #2
   1cdbc:	movw	lr, #32320	; 0x7e40
   1cdc0:	movt	lr, #6
   1cdc4:	bne	1cd54 <__assert_fail@plt+0xa760>
   1cdc8:	ldr	r3, [lr]
   1cdcc:	cmp	r3, #0
   1cdd0:	bne	1cd54 <__assert_fail@plt+0xa760>
   1cdd4:	mov	r1, r2
   1cdd8:	mov	r2, r5
   1cddc:	bl	1c45c <__assert_fail@plt+0x9e68>
   1cde0:	cmp	r0, #0
   1cde4:	bne	1ce50 <__assert_fail@plt+0xa85c>
   1cde8:	ldr	r1, [r5, #16]
   1cdec:	mov	r2, #1
   1cdf0:	movw	r3, #32320	; 0x7e40
   1cdf4:	movt	r3, #6
   1cdf8:	mov	r0, r2
   1cdfc:	str	r1, [r3, #8]
   1ce00:	str	r1, [r4]
   1ce04:	strb	r2, [r3, #5]
   1ce08:	b	1cd68 <__assert_fail@plt+0xa774>
   1ce0c:	mov	r1, r2
   1ce10:	mov	r2, r3
   1ce14:	bl	1c45c <__assert_fail@plt+0x9e68>
   1ce18:	cmp	r0, #0
   1ce1c:	bne	1ce50 <__assert_fail@plt+0xa85c>
   1ce20:	ldr	r2, [r5, #16]
   1ce24:	mov	r1, #1
   1ce28:	movw	r3, #32320	; 0x7e40
   1ce2c:	movt	r3, #6
   1ce30:	mov	r0, r1
   1ce34:	ldr	r6, [sp, #8]
   1ce38:	str	r2, [r4]
   1ce3c:	ldrd	r4, [sp]
   1ce40:	add	sp, sp, #12
   1ce44:	strb	r1, [r3, #5]
   1ce48:	str	r2, [r3, #8]
   1ce4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce50:	mov	r0, #0
   1ce54:	b	1cd68 <__assert_fail@plt+0xa774>
   1ce58:	subs	r3, r0, #0
   1ce5c:	beq	1ce88 <__assert_fail@plt+0xa894>
   1ce60:	ldrb	r0, [r3, #17]
   1ce64:	cmp	r0, #0
   1ce68:	beq	1ce7c <__assert_fail@plt+0xa888>
   1ce6c:	b	1ce90 <__assert_fail@plt+0xa89c>
   1ce70:	ldrb	r2, [r3, #17]
   1ce74:	cmp	r2, #0
   1ce78:	bne	1ce94 <__assert_fail@plt+0xa8a0>
   1ce7c:	ldr	r3, [r3, #152]	; 0x98
   1ce80:	cmp	r3, #0
   1ce84:	bne	1ce70 <__assert_fail@plt+0xa87c>
   1ce88:	mov	r0, #1
   1ce8c:	bx	lr
   1ce90:	mov	r0, #0
   1ce94:	bx	lr
   1ce98:	ldrb	r3, [r0]
   1ce9c:	sub	r3, r3, #33	; 0x21
   1cea0:	cmp	r3, #12
   1cea4:	ldrls	pc, [pc, r3, lsl #2]
   1cea8:	b	1cefc <__assert_fail@plt+0xa908>
   1ceac:	andeq	ip, r1, r4, lsl #30
   1ceb0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ceb4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ceb8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cebc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cec0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cec4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cec8:	andeq	ip, r1, r4, lsl #30
   1cecc:	strdeq	ip, [r1], -r0
   1ced0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ced4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ced8:	strdeq	ip, [r1], -r0
   1cedc:	andeq	ip, r1, r0, ror #29
   1cee0:	ldrb	r0, [r0, #1]
   1cee4:	adds	r0, r0, #0
   1cee8:	movne	r0, #1
   1ceec:	bx	lr
   1cef0:	ldrb	r3, [r0, #1]
   1cef4:	cmp	r3, #0
   1cef8:	beq	1cf14 <__assert_fail@plt+0xa920>
   1cefc:	mov	r0, #0
   1cf00:	bx	lr
   1cf04:	ldrb	r0, [r0, #1]
   1cf08:	clz	r0, r0
   1cf0c:	lsr	r0, r0, #5
   1cf10:	bx	lr
   1cf14:	eor	r0, r1, #1
   1cf18:	bx	lr
   1cf1c:	cmp	r0, #1
   1cf20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cf24:	strd	r6, [sp, #8]
   1cf28:	strd	r8, [sp, #16]
   1cf2c:	strd	sl, [sp, #24]
   1cf30:	str	lr, [sp, #32]
   1cf34:	sub	sp, sp, #20
   1cf38:	ble	1d370 <__assert_fail@plt+0xad7c>
   1cf3c:	movw	sl, #9892	; 0x26a4
   1cf40:	movt	sl, #5
   1cf44:	movw	r3, #7504	; 0x1d50
   1cf48:	movt	r3, #5
   1cf4c:	mov	r9, r1
   1cf50:	mov	r8, r0
   1cf54:	mov	r5, #1
   1cf58:	str	r3, [sp]
   1cf5c:	ldr	r4, [r9, r5, lsl #2]
   1cf60:	mov	r0, sl
   1cf64:	lsl	r6, r5, #2
   1cf68:	mov	r1, r4
   1cf6c:	bl	11f40 <strcmp@plt>
   1cf70:	cmp	r0, #0
   1cf74:	beq	1d1a8 <__assert_fail@plt+0xabb4>
   1cf78:	movw	r0, #9896	; 0x26a8
   1cf7c:	movt	r0, #5
   1cf80:	mov	r1, r4
   1cf84:	bl	11f40 <strcmp@plt>
   1cf88:	cmp	r0, #0
   1cf8c:	beq	1d1b4 <__assert_fail@plt+0xabc0>
   1cf90:	movw	r0, #9900	; 0x26ac
   1cf94:	movt	r0, #5
   1cf98:	mov	r1, r4
   1cf9c:	bl	11f40 <strcmp@plt>
   1cfa0:	cmp	r0, #0
   1cfa4:	beq	1d1c0 <__assert_fail@plt+0xabcc>
   1cfa8:	movw	r0, #9904	; 0x26b0
   1cfac:	movt	r0, #5
   1cfb0:	mov	r1, r4
   1cfb4:	bl	11f40 <strcmp@plt>
   1cfb8:	cmp	r0, #0
   1cfbc:	beq	1d368 <__assert_fail@plt+0xad74>
   1cfc0:	movw	r0, #9908	; 0x26b4
   1cfc4:	movt	r0, #5
   1cfc8:	mov	r1, r4
   1cfcc:	bl	11f40 <strcmp@plt>
   1cfd0:	subs	r7, r0, #0
   1cfd4:	bne	1d1c8 <__assert_fail@plt+0xabd4>
   1cfd8:	add	r5, r5, #1
   1cfdc:	cmp	r5, r8
   1cfe0:	bge	1d3e4 <__assert_fail@plt+0xadf0>
   1cfe4:	add	r6, r9, r6
   1cfe8:	mov	r3, #44	; 0x2c
   1cfec:	ldr	fp, [r6, #4]
   1cff0:	add	r2, sp, #12
   1cff4:	add	r1, sp, #8
   1cff8:	strh	r3, [sp, #8]
   1cffc:	str	r7, [sp, #12]
   1d000:	mov	r0, fp
   1d004:	bl	121e0 <strtok_r@plt>
   1d008:	subs	r4, r0, #0
   1d00c:	beq	1d340 <__assert_fail@plt+0xad4c>
   1d010:	movw	r6, #32364	; 0x7e6c
   1d014:	movt	r6, #6
   1d018:	movw	r7, #9952	; 0x26e0
   1d01c:	movt	r7, #5
   1d020:	mov	r1, r4
   1d024:	mov	r0, r7
   1d028:	bl	11f40 <strcmp@plt>
   1d02c:	cmp	r0, #0
   1d030:	beq	1d188 <__assert_fail@plt+0xab94>
   1d034:	movw	r0, #9960	; 0x26e8
   1d038:	movt	r0, #5
   1d03c:	mov	r1, r4
   1d040:	bl	11f40 <strcmp@plt>
   1d044:	cmp	r0, #0
   1d048:	beq	1d2bc <__assert_fail@plt+0xacc8>
   1d04c:	movw	r0, #9964	; 0x26ec
   1d050:	movt	r0, #5
   1d054:	mov	r1, r4
   1d058:	bl	11f40 <strcmp@plt>
   1d05c:	cmp	r0, #0
   1d060:	beq	1d2c4 <__assert_fail@plt+0xacd0>
   1d064:	movw	r0, #9972	; 0x26f4
   1d068:	movt	r0, #5
   1d06c:	mov	r1, r4
   1d070:	bl	11f40 <strcmp@plt>
   1d074:	cmp	r0, #0
   1d078:	beq	1d2cc <__assert_fail@plt+0xacd8>
   1d07c:	movw	r0, #2448	; 0x990
   1d080:	movt	r0, #5
   1d084:	mov	r1, r4
   1d088:	bl	11f40 <strcmp@plt>
   1d08c:	cmp	r0, #0
   1d090:	beq	1d2d4 <__assert_fail@plt+0xace0>
   1d094:	movw	r0, #23180	; 0x5a8c
   1d098:	movt	r0, #5
   1d09c:	mov	r1, r4
   1d0a0:	bl	11f40 <strcmp@plt>
   1d0a4:	cmp	r0, #0
   1d0a8:	beq	1d2dc <__assert_fail@plt+0xace8>
   1d0ac:	movw	r0, #9980	; 0x26fc
   1d0b0:	movt	r0, #5
   1d0b4:	mov	r1, r4
   1d0b8:	bl	11f40 <strcmp@plt>
   1d0bc:	cmp	r0, #0
   1d0c0:	beq	1d338 <__assert_fail@plt+0xad44>
   1d0c4:	movw	r0, #9988	; 0x2704
   1d0c8:	movt	r0, #5
   1d0cc:	mov	r1, r4
   1d0d0:	bl	11f40 <strcmp@plt>
   1d0d4:	cmp	r0, #0
   1d0d8:	beq	1d184 <__assert_fail@plt+0xab90>
   1d0dc:	mov	r1, r4
   1d0e0:	movw	r0, #9992	; 0x2708
   1d0e4:	movt	r0, #5
   1d0e8:	bl	11f40 <strcmp@plt>
   1d0ec:	cmp	r0, #0
   1d0f0:	moveq	r0, #8
   1d0f4:	beq	1d188 <__assert_fail@plt+0xab94>
   1d0f8:	mov	r2, #5
   1d0fc:	movw	r1, #10308	; 0x2844
   1d100:	movt	r1, #5
   1d104:	mov	r0, #0
   1d108:	bl	120b4 <dcgettext@plt>
   1d10c:	mov	r4, r0
   1d110:	mov	r2, fp
   1d114:	ldr	r1, [r6, #72]	; 0x48
   1d118:	mov	r0, #0
   1d11c:	bl	3431c <__assert_fail@plt+0x21d28>
   1d120:	mov	r1, #0
   1d124:	mov	r3, r0
   1d128:	mov	r2, r4
   1d12c:	mov	r0, r1
   1d130:	bl	121ec <error@plt>
   1d134:	add	r2, sp, #12
   1d138:	add	r1, sp, #8
   1d13c:	mov	r0, #0
   1d140:	bl	121e0 <strtok_r@plt>
   1d144:	subs	r4, r0, #0
   1d148:	bne	1d020 <__assert_fail@plt+0xaa2c>
   1d14c:	ldr	r3, [r6, #44]	; 0x2c
   1d150:	tst	r3, #16
   1d154:	bne	1d2e4 <__assert_fail@plt+0xacf0>
   1d158:	add	r5, r5, #1
   1d15c:	cmp	r8, r5
   1d160:	bgt	1cf5c <__assert_fail@plt+0xa968>
   1d164:	mov	r0, r5
   1d168:	add	sp, sp, #20
   1d16c:	ldrd	r4, [sp]
   1d170:	ldrd	r6, [sp, #8]
   1d174:	ldrd	r8, [sp, #16]
   1d178:	ldrd	sl, [sp, #24]
   1d17c:	add	sp, sp, #32
   1d180:	pop	{pc}		; (ldr pc, [sp], #4)
   1d184:	mov	r0, #7
   1d188:	ldr	r2, [sp]
   1d18c:	add	r0, r0, r0, lsl #1
   1d190:	ldr	r3, [r6, #44]	; 0x2c
   1d194:	add	r0, r2, r0, lsl #2
   1d198:	ldr	r2, [r0, #52]	; 0x34
   1d19c:	orr	r3, r3, r2
   1d1a0:	str	r3, [r6, #44]	; 0x2c
   1d1a4:	b	1d134 <__assert_fail@plt+0xab40>
   1d1a8:	mov	r0, #2
   1d1ac:	bl	254a8 <__assert_fail@plt+0x12eb4>
   1d1b0:	b	1d158 <__assert_fail@plt+0xab64>
   1d1b4:	mov	r0, #1
   1d1b8:	bl	254a8 <__assert_fail@plt+0x12eb4>
   1d1bc:	b	1d158 <__assert_fail@plt+0xab64>
   1d1c0:	bl	254a8 <__assert_fail@plt+0x12eb4>
   1d1c4:	b	1d158 <__assert_fail@plt+0xab64>
   1d1c8:	movw	r0, #10048	; 0x2740
   1d1cc:	movt	r0, #5
   1d1d0:	mov	r2, #2
   1d1d4:	mov	r1, r4
   1d1d8:	bl	12594 <strncmp@plt>
   1d1dc:	subs	r6, r0, #0
   1d1e0:	bne	1d164 <__assert_fail@plt+0xab70>
   1d1e4:	ldrb	r7, [r4, #2]
   1d1e8:	add	r4, r4, #2
   1d1ec:	cmp	r7, #0
   1d1f0:	beq	1d3d4 <__assert_fail@plt+0xade0>
   1d1f4:	bl	122b8 <__ctype_b_loc@plt>
   1d1f8:	ldr	r3, [r0]
   1d1fc:	lsl	r7, r7, #1
   1d200:	ldrh	r3, [r3, r7]
   1d204:	ands	r7, r3, #2048	; 0x800
   1d208:	beq	1d3c0 <__assert_fail@plt+0xadcc>
   1d20c:	bl	12348 <__errno_location@plt>
   1d210:	mov	r7, r0
   1d214:	mov	r2, #10
   1d218:	ldr	r3, [r7]
   1d21c:	add	r1, sp, #12
   1d220:	mov	r0, r4
   1d224:	str	r6, [r7]
   1d228:	str	r3, [sp, #4]
   1d22c:	bl	122f4 <strtoul@plt>
   1d230:	subs	fp, r0, #0
   1d234:	ldr	r3, [sp, #12]
   1d238:	bne	1d268 <__assert_fail@plt+0xac74>
   1d23c:	cmp	r4, r3
   1d240:	beq	1d3a0 <__assert_fail@plt+0xadac>
   1d244:	ldrb	r3, [r3]
   1d248:	cmp	r3, #0
   1d24c:	bne	1d378 <__assert_fail@plt+0xad84>
   1d250:	ldr	r3, [sp, #4]
   1d254:	movw	r6, #32364	; 0x7e6c
   1d258:	movt	r6, #6
   1d25c:	strh	fp, [r6, #68]	; 0x44
   1d260:	str	r3, [r7]
   1d264:	b	1d158 <__assert_fail@plt+0xab64>
   1d268:	ldrb	r3, [r3]
   1d26c:	cmp	r3, #0
   1d270:	bne	1d378 <__assert_fail@plt+0xad84>
   1d274:	cmn	fp, #1
   1d278:	bne	1d2b0 <__assert_fail@plt+0xacbc>
   1d27c:	ldr	r5, [r7]
   1d280:	cmp	r5, #0
   1d284:	bne	1d40c <__assert_fail@plt+0xae18>
   1d288:	mov	r2, #5
   1d28c:	movw	r1, #10204	; 0x27dc
   1d290:	movt	r1, #5
   1d294:	mov	r0, #0
   1d298:	bl	120b4 <dcgettext@plt>
   1d29c:	mov	r2, r0
   1d2a0:	mov	r3, fp
   1d2a4:	mov	r1, #0
   1d2a8:	mov	r0, #1
   1d2ac:	bl	121ec <error@plt>
   1d2b0:	cmp	fp, #65536	; 0x10000
   1d2b4:	bcc	1d250 <__assert_fail@plt+0xac5c>
   1d2b8:	b	1d288 <__assert_fail@plt+0xac94>
   1d2bc:	mov	r0, #1
   1d2c0:	b	1d188 <__assert_fail@plt+0xab94>
   1d2c4:	mov	r0, #2
   1d2c8:	b	1d188 <__assert_fail@plt+0xab94>
   1d2cc:	mov	r0, #3
   1d2d0:	b	1d188 <__assert_fail@plt+0xab94>
   1d2d4:	mov	r0, #4
   1d2d8:	b	1d188 <__assert_fail@plt+0xab94>
   1d2dc:	mov	r0, #5
   1d2e0:	b	1d188 <__assert_fail@plt+0xab94>
   1d2e4:	ldr	r4, [pc, #328]	; 1d434 <__assert_fail@plt+0xae40>
   1d2e8:	movw	r1, #9504	; 0x2520
   1d2ec:	movt	r1, #5
   1d2f0:	mov	r2, #5
   1d2f4:	movw	r5, #30036	; 0x7554
   1d2f8:	movt	r5, #6
   1d2fc:	movw	r6, #10036	; 0x2734
   1d300:	movt	r6, #5
   1d304:	bl	120b4 <dcgettext@plt>
   1d308:	ldr	r1, [r5]
   1d30c:	add	r7, r4, #108	; 0x6c
   1d310:	bl	12588 <fputs@plt>
   1d314:	ldr	r3, [r4, #8]
   1d318:	mov	r1, r6
   1d31c:	ldr	r2, [r4], #12
   1d320:	ldr	r0, [r5]
   1d324:	bl	1233c <fprintf@plt>
   1d328:	cmp	r4, r7
   1d32c:	bne	1d314 <__assert_fail@plt+0xad20>
   1d330:	mov	r0, #0
   1d334:	bl	122d0 <exit@plt>
   1d338:	mov	r0, #6
   1d33c:	b	1d188 <__assert_fail@plt+0xab94>
   1d340:	mov	r2, #5
   1d344:	movw	r1, #10000	; 0x2710
   1d348:	movt	r1, #5
   1d34c:	bl	120b4 <dcgettext@plt>
   1d350:	mov	r2, r0
   1d354:	mov	r1, r4
   1d358:	mov	r0, r4
   1d35c:	bl	121ec <error@plt>
   1d360:	mov	r0, #1
   1d364:	bl	1c22c <__assert_fail@plt+0x9c38>
   1d368:	add	r5, r5, #1
   1d36c:	b	1d164 <__assert_fail@plt+0xab70>
   1d370:	mov	r5, #1
   1d374:	b	1d164 <__assert_fail@plt+0xab70>
   1d378:	mov	r2, #5
   1d37c:	movw	r1, #10172	; 0x27bc
   1d380:	movt	r1, #5
   1d384:	mov	r0, #0
   1d388:	bl	120b4 <dcgettext@plt>
   1d38c:	mov	r2, r0
   1d390:	mov	r3, r4
   1d394:	mov	r1, #0
   1d398:	mov	r0, #1
   1d39c:	bl	121ec <error@plt>
   1d3a0:	movw	r1, #10116	; 0x2784
   1d3a4:	movt	r1, #5
   1d3a8:	mov	r2, #5
   1d3ac:	bl	120b4 <dcgettext@plt>
   1d3b0:	mov	r2, r0
   1d3b4:	mov	r1, #0
   1d3b8:	mov	r0, #1
   1d3bc:	bl	121ec <error@plt>
   1d3c0:	movw	r1, #10116	; 0x2784
   1d3c4:	movt	r1, #5
   1d3c8:	mov	r2, #5
   1d3cc:	mov	r0, r7
   1d3d0:	b	1d3ac <__assert_fail@plt+0xadb8>
   1d3d4:	movw	r1, #10052	; 0x2744
   1d3d8:	movt	r1, #5
   1d3dc:	mov	r2, #5
   1d3e0:	b	1d3ac <__assert_fail@plt+0xadb8>
   1d3e4:	mov	r2, #5
   1d3e8:	movw	r1, #9912	; 0x26b8
   1d3ec:	movt	r1, #5
   1d3f0:	bl	120b4 <dcgettext@plt>
   1d3f4:	mov	r2, r0
   1d3f8:	mov	r1, r7
   1d3fc:	mov	r0, r7
   1d400:	bl	121ec <error@plt>
   1d404:	mov	r0, #1
   1d408:	bl	1c22c <__assert_fail@plt+0x9c38>
   1d40c:	mov	r2, #5
   1d410:	movw	r1, #10172	; 0x27bc
   1d414:	movt	r1, #5
   1d418:	mov	r0, #0
   1d41c:	bl	120b4 <dcgettext@plt>
   1d420:	mov	r2, r0
   1d424:	mov	r3, r4
   1d428:	mov	r1, r5
   1d42c:	mov	r0, #1
   1d430:	bl	121ec <error@plt>
   1d434:	andeq	r1, r5, r0, lsl #27
   1d438:	strd	r4, [sp, #-16]!
   1d43c:	mov	r4, r0
   1d440:	movw	r0, #10344	; 0x2868
   1d444:	movt	r0, #5
   1d448:	str	r6, [sp, #8]
   1d44c:	mov	r5, #0
   1d450:	str	lr, [sp, #12]
   1d454:	sub	sp, sp, #8
   1d458:	bl	12228 <getenv@plt>
   1d45c:	subs	r0, r0, r5
   1d460:	movne	r0, #1
   1d464:	strb	r0, [r4, #17]
   1d468:	bl	1c59c <__assert_fail@plt+0x9fa8>
   1d46c:	strb	r0, [r4, #56]	; 0x38
   1d470:	mov	r0, r5
   1d474:	str	r5, [r4, #60]	; 0x3c
   1d478:	bl	12564 <isatty@plt>
   1d47c:	ldrb	ip, [r4, #17]
   1d480:	subs	r3, r0, r5
   1d484:	mvn	r2, #0
   1d488:	movne	r3, #1
   1d48c:	mov	r1, #1
   1d490:	mov	r0, sp
   1d494:	strh	r1, [r4]
   1d498:	mov	r1, r5
   1d49c:	str	r2, [r4, #4]
   1d4a0:	cmp	ip, r5
   1d4a4:	str	r2, [r4, #8]
   1d4a8:	movne	r3, r5
   1d4ac:	strb	r5, [r4, #15]
   1d4b0:	strb	r3, [r4, #16]
   1d4b4:	bl	121bc <gettimeofday@plt>
   1d4b8:	cmp	r0, r5
   1d4bc:	bne	1d554 <__assert_fail@plt+0xaf60>
   1d4c0:	ldm	sp, {r0, r3}
   1d4c4:	mov	r5, #1000	; 0x3e8
   1d4c8:	mul	r5, r5, r3
   1d4cc:	ldrb	r1, [r4, #17]
   1d4d0:	sub	r3, r0, #86016	; 0x15000
   1d4d4:	mov	r6, #0
   1d4d8:	sub	r3, r3, #384	; 0x180
   1d4dc:	mov	r2, #2
   1d4e0:	strb	r6, [r4, #13]
   1d4e4:	strb	r6, [r4, #14]
   1d4e8:	str	r3, [r4, #28]
   1d4ec:	cmp	r1, r6
   1d4f0:	str	r0, [r4, #20]
   1d4f4:	movw	r0, #10376	; 0x2888
   1d4f8:	movt	r0, #5
   1d4fc:	movne	r3, #512	; 0x200
   1d500:	str	r5, [r4, #24]
   1d504:	moveq	r3, #1024	; 0x400
   1d508:	str	r5, [r4, #32]
   1d50c:	strb	r6, [r4, #36]	; 0x24
   1d510:	str	r3, [r4, #40]	; 0x28
   1d514:	str	r6, [r4, #44]	; 0x2c
   1d518:	strh	r2, [r4, #68]	; 0x44
   1d51c:	bl	12228 <getenv@plt>
   1d520:	subs	r5, r0, #0
   1d524:	bne	1d580 <__assert_fail@plt+0xaf8c>
   1d528:	strb	r5, [r4, #12]
   1d52c:	bl	254a8 <__assert_fail@plt+0x12eb4>
   1d530:	mov	r3, #8
   1d534:	str	r3, [r4, #72]	; 0x48
   1d538:	str	r5, [r4, #76]	; 0x4c
   1d53c:	strb	r5, [r4, #80]	; 0x50
   1d540:	add	sp, sp, #8
   1d544:	ldrd	r4, [sp]
   1d548:	ldr	r6, [sp, #8]
   1d54c:	add	sp, sp, #12
   1d550:	pop	{pc}		; (ldr pc, [sp], #4)
   1d554:	mov	r0, r5
   1d558:	bl	12078 <time@plt>
   1d55c:	cmn	r0, #1
   1d560:	bne	1d4cc <__assert_fail@plt+0xaed8>
   1d564:	movw	r1, #7724	; 0x1e2c
   1d568:	movt	r1, #5
   1d56c:	ldr	r3, [pc, #48]	; 1d5a4 <__assert_fail@plt+0xafb0>
   1d570:	movw	r0, #10360	; 0x2878
   1d574:	movt	r0, #5
   1d578:	movw	r2, #978	; 0x3d2
   1d57c:	bl	125f4 <__assert_fail@plt>
   1d580:	mov	r2, #5
   1d584:	movw	r1, #10392	; 0x2898
   1d588:	movt	r1, #5
   1d58c:	mov	r0, r6
   1d590:	bl	120b4 <dcgettext@plt>
   1d594:	mov	r2, r0
   1d598:	mov	r1, r6
   1d59c:	mov	r0, #1
   1d5a0:	bl	121ec <error@plt>
   1d5a4:	andeq	r1, r5, r8, lsr #28
   1d5a8:	ldr	r3, [r2, #164]	; 0xa4
   1d5ac:	strd	r4, [sp, #-16]!
   1d5b0:	mov	r4, r2
   1d5b4:	mov	r5, r1
   1d5b8:	ldrh	r2, [r2, #18]
   1d5bc:	str	r6, [sp, #8]
   1d5c0:	mov	r6, r0
   1d5c4:	str	lr, [sp, #12]
   1d5c8:	add	r3, r3, #1
   1d5cc:	cmp	r2, #0
   1d5d0:	str	r3, [r4, #164]	; 0xa4
   1d5d4:	bne	1d5e4 <__assert_fail@plt+0xaff0>
   1d5d8:	ldrb	r3, [r4, #20]
   1d5dc:	cmp	r3, #0
   1d5e0:	beq	1d628 <__assert_fail@plt+0xb034>
   1d5e4:	ldrb	r3, [r4, #18]
   1d5e8:	cmp	r3, #0
   1d5ec:	bne	1d674 <__assert_fail@plt+0xb080>
   1d5f0:	ldrb	r3, [r4, #19]
   1d5f4:	cmp	r3, #0
   1d5f8:	beq	1d68c <__assert_fail@plt+0xb098>
   1d5fc:	movw	r3, #32320	; 0x7e40
   1d600:	movt	r3, #6
   1d604:	ldrb	r2, [r3, #5]
   1d608:	cmp	r2, #0
   1d60c:	bne	1d68c <__assert_fail@plt+0xb098>
   1d610:	mov	r2, r5
   1d614:	mov	r0, r6
   1d618:	ldr	r1, [r3, #12]
   1d61c:	bl	1c45c <__assert_fail@plt+0x9e68>
   1d620:	cmp	r0, #0
   1d624:	bne	1d644 <__assert_fail@plt+0xb050>
   1d628:	mov	r1, r5
   1d62c:	mov	r0, r6
   1d630:	ldr	r3, [r4]
   1d634:	mov	r2, r4
   1d638:	blx	r3
   1d63c:	cmp	r0, #0
   1d640:	bne	1d658 <__assert_fail@plt+0xb064>
   1d644:	ldrd	r4, [sp]
   1d648:	mov	r0, #0
   1d64c:	ldr	r6, [sp, #8]
   1d650:	add	sp, sp, #12
   1d654:	pop	{pc}		; (ldr pc, [sp], #4)
   1d658:	ldr	r3, [r4, #168]	; 0xa8
   1d65c:	ldr	r6, [sp, #8]
   1d660:	add	r3, r3, #1
   1d664:	str	r3, [r4, #168]	; 0xa8
   1d668:	ldrd	r4, [sp]
   1d66c:	add	sp, sp, #12
   1d670:	pop	{pc}		; (ldr pc, [sp], #4)
   1d674:	movw	r3, #32320	; 0x7e40
   1d678:	movt	r3, #6
   1d67c:	ldrb	r2, [r3, #4]
   1d680:	cmp	r2, #0
   1d684:	beq	1d610 <__assert_fail@plt+0xb01c>
   1d688:	b	1d5f0 <__assert_fail@plt+0xaffc>
   1d68c:	ldrb	r3, [r4, #20]
   1d690:	cmp	r3, #0
   1d694:	beq	1d628 <__assert_fail@plt+0xb034>
   1d698:	ldrd	r2, [r5, #96]	; 0x60
   1d69c:	orrs	r3, r2, r3
   1d6a0:	movw	r3, #32320	; 0x7e40
   1d6a4:	movt	r3, #6
   1d6a8:	beq	1d610 <__assert_fail@plt+0xb01c>
   1d6ac:	ldrb	r2, [r3, #5]
   1d6b0:	cmp	r2, #0
   1d6b4:	beq	1d610 <__assert_fail@plt+0xb01c>
   1d6b8:	ldr	r2, [r5, #16]
   1d6bc:	and	r2, r2, #61440	; 0xf000
   1d6c0:	cmp	r2, #16384	; 0x4000
   1d6c4:	bne	1d628 <__assert_fail@plt+0xb034>
   1d6c8:	b	1d610 <__assert_fail@plt+0xb01c>
   1d6cc:	movw	r2, #20520	; 0x5028
   1d6d0:	movt	r2, #1
   1d6d4:	movw	r3, #17656	; 0x44f8
   1d6d8:	movt	r3, #1
   1d6dc:	cmp	r3, r0
   1d6e0:	cmpne	r2, r0
   1d6e4:	moveq	r0, #1
   1d6e8:	movne	r0, #0
   1d6ec:	bx	lr
   1d6f0:	movw	r3, #32364	; 0x7e6c
   1d6f4:	movt	r3, #6
   1d6f8:	mov	r2, r1
   1d6fc:	ldr	r1, [r3, #72]	; 0x48
   1d700:	b	3431c <__assert_fail@plt+0x21d28>
   1d704:	strd	r4, [sp, #-16]!
   1d708:	movw	r4, #32320	; 0x7e40
   1d70c:	movt	r4, #6
   1d710:	ldrb	r5, [r4, #40]	; 0x28
   1d714:	str	r6, [sp, #8]
   1d718:	str	lr, [sp, #12]
   1d71c:	cmp	r5, #0
   1d720:	bne	1d760 <__assert_fail@plt+0xb16c>
   1d724:	movw	r3, #32364	; 0x7e6c
   1d728:	movt	r3, #6
   1d72c:	mov	r2, r1
   1d730:	mov	r6, r0
   1d734:	ldr	r1, [r3, #72]	; 0x48
   1d738:	mov	r0, r5
   1d73c:	bl	3431c <__assert_fail@plt+0x21d28>
   1d740:	mov	r3, r0
   1d744:	mov	r1, r6
   1d748:	mov	r0, r5
   1d74c:	movw	r2, #20016	; 0x4e30
   1d750:	movt	r2, #5
   1d754:	bl	121ec <error@plt>
   1d758:	mov	r3, #1
   1d75c:	str	r3, [r4, #28]
   1d760:	mov	r3, #1
   1d764:	ldr	r6, [sp, #8]
   1d768:	strb	r3, [r4, #40]	; 0x28
   1d76c:	ldrd	r4, [sp]
   1d770:	add	sp, sp, #12
   1d774:	pop	{pc}		; (ldr pc, [sp], #4)
   1d778:	str	r4, [sp, #-8]!
   1d77c:	movw	r4, #32320	; 0x7e40
   1d780:	movt	r4, #6
   1d784:	ldrb	r3, [r4, #40]	; 0x28
   1d788:	str	lr, [sp, #4]
   1d78c:	cmp	r3, #0
   1d790:	bne	1d7d0 <__assert_fail@plt+0xb1dc>
   1d794:	movw	ip, #32364	; 0x7e6c
   1d798:	movt	ip, #6
   1d79c:	mov	r2, r1
   1d7a0:	mov	r5, r0
   1d7a4:	ldr	r1, [ip, #72]	; 0x48
   1d7a8:	mov	r0, r3
   1d7ac:	bl	3431c <__assert_fail@plt+0x21d28>
   1d7b0:	mov	r3, r0
   1d7b4:	mov	r1, r5
   1d7b8:	movw	r2, #20016	; 0x4e30
   1d7bc:	movt	r2, #5
   1d7c0:	mov	r0, #1
   1d7c4:	bl	121ec <error@plt>
   1d7c8:	mov	r3, #1
   1d7cc:	str	r3, [r4, #28]
   1d7d0:	mov	r3, #1
   1d7d4:	strb	r3, [r4, #40]	; 0x28
   1d7d8:	bl	125a0 <abort@plt>
   1d7dc:	movw	r3, #32364	; 0x7e6c
   1d7e0:	movt	r3, #6
   1d7e4:	str	r4, [sp, #-8]!
   1d7e8:	mov	r2, r1
   1d7ec:	mov	r4, r0
   1d7f0:	ldr	r1, [r3, #72]	; 0x48
   1d7f4:	mov	r0, #0
   1d7f8:	str	lr, [sp, #4]
   1d7fc:	bl	3431c <__assert_fail@plt+0x21d28>
   1d800:	mov	r3, r0
   1d804:	mov	r1, r4
   1d808:	movw	r2, #20016	; 0x4e30
   1d80c:	movt	r2, #5
   1d810:	mov	r0, #0
   1d814:	bl	121ec <error@plt>
   1d818:	movw	r3, #32320	; 0x7e40
   1d81c:	movt	r3, #6
   1d820:	ldr	r4, [sp]
   1d824:	mov	r2, #1
   1d828:	add	sp, sp, #4
   1d82c:	str	r2, [r3, #28]
   1d830:	pop	{pc}		; (ldr pc, [sp], #4)
   1d834:	mov	ip, #0
   1d838:	movw	r3, #32364	; 0x7e6c
   1d83c:	movt	r3, #6
   1d840:	str	r4, [sp, #-8]!
   1d844:	movw	r4, #32320	; 0x7e40
   1d848:	movt	r4, #6
   1d84c:	mov	r2, r1
   1d850:	ldr	r1, [r3, #72]	; 0x48
   1d854:	mov	r5, r0
   1d858:	mov	r0, ip
   1d85c:	str	lr, [sp, #4]
   1d860:	strb	ip, [r4, #40]	; 0x28
   1d864:	bl	3431c <__assert_fail@plt+0x21d28>
   1d868:	mov	r3, r0
   1d86c:	mov	r1, r5
   1d870:	movw	r2, #20016	; 0x4e30
   1d874:	movt	r2, #5
   1d878:	mov	r0, #1
   1d87c:	bl	121ec <error@plt>
   1d880:	mov	r3, #1
   1d884:	str	r3, [r4, #28]
   1d888:	bl	125a0 <abort@plt>
   1d88c:	strd	r4, [sp, #-8]!
   1d890:	ldrd	r2, [r1, #8]
   1d894:	ldrd	r4, [r0, #8]
   1d898:	cmp	r5, r3
   1d89c:	cmpeq	r4, r2
   1d8a0:	movne	r0, #0
   1d8a4:	bne	1d8c0 <__assert_fail@plt+0xb2cc>
   1d8a8:	ldrd	r4, [r0]
   1d8ac:	ldrd	r2, [r1]
   1d8b0:	cmp	r5, r3
   1d8b4:	cmpeq	r4, r2
   1d8b8:	moveq	r0, #1
   1d8bc:	movne	r0, #0
   1d8c0:	ldrd	r4, [sp]
   1d8c4:	add	sp, sp, #8
   1d8c8:	bx	lr
   1d8cc:	mov	r2, r1
   1d8d0:	str	r4, [sp, #-8]!
   1d8d4:	mov	r3, #0
   1d8d8:	ldm	r0, {r4, ip}
   1d8dc:	ldr	r1, [r0, #12]
   1d8e0:	str	lr, [sp, #4]
   1d8e4:	ldr	lr, [r0, #8]
   1d8e8:	eor	r1, r1, ip
   1d8ec:	eor	r0, r4, lr
   1d8f0:	bl	5055c <__assert_fail@plt+0x3df68>
   1d8f4:	ldr	r4, [sp]
   1d8f8:	add	sp, sp, #4
   1d8fc:	mov	r0, r2
   1d900:	pop	{pc}		; (ldr pc, [sp], #4)
   1d904:	str	r4, [sp, #-8]!
   1d908:	mov	r4, r0
   1d90c:	str	lr, [sp, #4]
   1d910:	bl	12348 <__errno_location@plt>
   1d914:	ldr	r0, [r0]
   1d918:	ldr	r1, [r4, #16]
   1d91c:	bl	1d834 <__assert_fail@plt+0xb240>
   1d920:	str	r4, [sp, #-8]!
   1d924:	mov	r4, r0
   1d928:	ldr	r0, [r0, #20]
   1d92c:	str	lr, [sp, #4]
   1d930:	cmp	r0, #0
   1d934:	beq	1d944 <__assert_fail@plt+0xb350>
   1d938:	bl	123fc <fclose@plt>
   1d93c:	cmp	r0, #0
   1d940:	bne	1d960 <__assert_fail@plt+0xb36c>
   1d944:	ldr	r0, [r4, #16]
   1d948:	bl	38b10 <__assert_fail@plt+0x2651c>
   1d94c:	mov	r0, r4
   1d950:	ldr	r4, [sp]
   1d954:	ldr	lr, [sp, #4]
   1d958:	add	sp, sp, #8
   1d95c:	b	38b10 <__assert_fail@plt+0x2651c>
   1d960:	mov	r0, r4
   1d964:	bl	1d904 <__assert_fail@plt+0xb310>
   1d968:	strd	r4, [sp, #-12]!
   1d96c:	mov	r5, r0
   1d970:	mov	r0, #8
   1d974:	str	lr, [sp, #8]
   1d978:	sub	sp, sp, #12
   1d97c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   1d980:	subs	r4, r0, #0
   1d984:	beq	1d9d8 <__assert_fail@plt+0xb3e4>
   1d988:	mov	r0, r5
   1d98c:	bl	120c0 <strdup@plt>
   1d990:	cmp	r0, #0
   1d994:	mov	r3, r0
   1d998:	str	r0, [r4]
   1d99c:	beq	1d9ec <__assert_fail@plt+0xb3f8>
   1d9a0:	movw	r1, #55584	; 0xd920
   1d9a4:	movt	r1, #1
   1d9a8:	movw	r3, #55436	; 0xd88c
   1d9ac:	movt	r3, #1
   1d9b0:	movw	r2, #55500	; 0xd8cc
   1d9b4:	movt	r2, #1
   1d9b8:	str	r1, [sp]
   1d9bc:	mov	r0, #11
   1d9c0:	mov	r1, #0
   1d9c4:	bl	297c4 <__assert_fail@plt+0x171d0>
   1d9c8:	cmp	r0, #0
   1d9cc:	mov	r5, r0
   1d9d0:	str	r0, [r4, #4]
   1d9d4:	beq	1d9fc <__assert_fail@plt+0xb408>
   1d9d8:	mov	r0, r4
   1d9dc:	add	sp, sp, #12
   1d9e0:	ldrd	r4, [sp]
   1d9e4:	add	sp, sp, #8
   1d9e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9ec:	mov	r0, r4
   1d9f0:	mov	r4, r3
   1d9f4:	bl	38b10 <__assert_fail@plt+0x2651c>
   1d9f8:	b	1d9d8 <__assert_fail@plt+0xb3e4>
   1d9fc:	ldr	r0, [r4]
   1da00:	bl	38b10 <__assert_fail@plt+0x2651c>
   1da04:	mov	r0, r4
   1da08:	mov	r4, r5
   1da0c:	bl	38b10 <__assert_fail@plt+0x2651c>
   1da10:	b	1d9d8 <__assert_fail@plt+0xb3e4>
   1da14:	str	r4, [sp, #-8]!
   1da18:	mov	r4, r0
   1da1c:	ldr	r0, [r0]
   1da20:	str	lr, [sp, #4]
   1da24:	bl	38b10 <__assert_fail@plt+0x2651c>
   1da28:	ldr	r0, [r4, #4]
   1da2c:	ldr	r4, [sp]
   1da30:	ldr	lr, [sp, #4]
   1da34:	add	sp, sp, #8
   1da38:	b	29b04 <__assert_fail@plt+0x17510>
   1da3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1da40:	mov	r5, r1
   1da44:	strd	r6, [sp, #8]
   1da48:	str	r8, [sp, #16]
   1da4c:	mov	r8, r0
   1da50:	mov	r0, #24
   1da54:	str	lr, [sp, #20]
   1da58:	sub	sp, sp, #104	; 0x68
   1da5c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   1da60:	subs	r4, r0, #0
   1da64:	beq	1db10 <__assert_fail@plt+0xb51c>
   1da68:	mov	r0, r5
   1da6c:	bl	120c0 <strdup@plt>
   1da70:	cmp	r0, #0
   1da74:	str	r0, [r4, #16]
   1da78:	beq	1db68 <__assert_fail@plt+0xb574>
   1da7c:	mov	r0, r5
   1da80:	ldr	r1, [r8]
   1da84:	bl	28dec <__assert_fail@plt+0x167f8>
   1da88:	cmp	r0, #0
   1da8c:	str	r0, [r4, #20]
   1da90:	beq	1db60 <__assert_fail@plt+0xb56c>
   1da94:	bl	123c0 <fileno@plt>
   1da98:	subs	r5, r0, #0
   1da9c:	blt	1dbc0 <__assert_fail@plt+0xb5cc>
   1daa0:	mov	r1, #1
   1daa4:	bl	28664 <__assert_fail@plt+0x16070>
   1daa8:	mov	r1, r5
   1daac:	mov	r2, sp
   1dab0:	mov	r0, #3
   1dab4:	bl	1215c <__fxstat64@plt>
   1dab8:	cmp	r0, #0
   1dabc:	blt	1db48 <__assert_fail@plt+0xb554>
   1dac0:	ldrd	r6, [sp]
   1dac4:	mov	r1, r4
   1dac8:	ldrd	r2, [sp, #96]	; 0x60
   1dacc:	ldr	r0, [r8, #4]
   1dad0:	strd	r6, [r4]
   1dad4:	strd	r2, [r4, #8]
   1dad8:	bl	29440 <__assert_fail@plt+0x16e4c>
   1dadc:	subs	r5, r0, #0
   1dae0:	beq	1db2c <__assert_fail@plt+0xb538>
   1dae4:	ldr	r0, [r4, #20]
   1dae8:	cmp	r0, #0
   1daec:	beq	1dafc <__assert_fail@plt+0xb508>
   1daf0:	bl	123fc <fclose@plt>
   1daf4:	cmp	r0, #0
   1daf8:	bne	1dbb8 <__assert_fail@plt+0xb5c4>
   1dafc:	ldr	r0, [r4, #16]
   1db00:	bl	38b10 <__assert_fail@plt+0x2651c>
   1db04:	mov	r0, r4
   1db08:	bl	38b10 <__assert_fail@plt+0x2651c>
   1db0c:	ldr	r4, [r5, #20]
   1db10:	mov	r0, r4
   1db14:	add	sp, sp, #104	; 0x68
   1db18:	ldrd	r4, [sp]
   1db1c:	ldrd	r6, [sp, #8]
   1db20:	ldr	r8, [sp, #16]
   1db24:	add	sp, sp, #20
   1db28:	pop	{pc}		; (ldr pc, [sp], #4)
   1db2c:	mov	r1, r4
   1db30:	ldr	r0, [r8, #4]
   1db34:	bl	2a02c <__assert_fail@plt+0x17a38>
   1db38:	cmp	r0, #0
   1db3c:	beq	1db78 <__assert_fail@plt+0xb584>
   1db40:	ldr	r4, [r4, #20]
   1db44:	b	1db10 <__assert_fail@plt+0xb51c>
   1db48:	ldr	r0, [r4, #20]
   1db4c:	cmp	r0, #0
   1db50:	beq	1db60 <__assert_fail@plt+0xb56c>
   1db54:	bl	123fc <fclose@plt>
   1db58:	cmp	r0, #0
   1db5c:	bne	1dbb8 <__assert_fail@plt+0xb5c4>
   1db60:	ldr	r0, [r4, #16]
   1db64:	bl	38b10 <__assert_fail@plt+0x2651c>
   1db68:	mov	r0, r4
   1db6c:	mov	r4, #0
   1db70:	bl	38b10 <__assert_fail@plt+0x2651c>
   1db74:	b	1db10 <__assert_fail@plt+0xb51c>
   1db78:	bl	12348 <__errno_location@plt>
   1db7c:	mov	r5, r0
   1db80:	ldr	r0, [r4, #20]
   1db84:	ldr	r6, [r5]
   1db88:	cmp	r0, #0
   1db8c:	beq	1db9c <__assert_fail@plt+0xb5a8>
   1db90:	bl	123fc <fclose@plt>
   1db94:	cmp	r0, #0
   1db98:	bne	1dbb8 <__assert_fail@plt+0xb5c4>
   1db9c:	ldr	r0, [r4, #16]
   1dba0:	bl	38b10 <__assert_fail@plt+0x2651c>
   1dba4:	mov	r0, r4
   1dba8:	mov	r4, #0
   1dbac:	bl	38b10 <__assert_fail@plt+0x2651c>
   1dbb0:	str	r6, [r5]
   1dbb4:	b	1db10 <__assert_fail@plt+0xb51c>
   1dbb8:	mov	r0, r4
   1dbbc:	bl	1d904 <__assert_fail@plt+0xb310>
   1dbc0:	movw	r3, #10968	; 0x2ad8
   1dbc4:	movt	r3, #5
   1dbc8:	movw	r1, #10984	; 0x2ae8
   1dbcc:	movt	r1, #5
   1dbd0:	movw	r0, #3100	; 0xc1c
   1dbd4:	movt	r0, #5
   1dbd8:	mov	r2, #166	; 0xa6
   1dbdc:	bl	125f4 <__assert_fail@plt>
   1dbe0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1dbe4:	cmp	r2, #43	; 0x2b
   1dbe8:	strd	r6, [sp, #8]
   1dbec:	strd	r8, [sp, #16]
   1dbf0:	strd	sl, [sp, #24]
   1dbf4:	str	lr, [sp, #32]
   1dbf8:	sub	sp, sp, #156	; 0x9c
   1dbfc:	add	r5, sp, #56	; 0x38
   1dc00:	stm	r5, {r0, r1}
   1dc04:	beq	1df9c <__assert_fail@plt+0xb9a8>
   1dc08:	mov	r4, r2
   1dc0c:	mov	r1, #37	; 0x25
   1dc10:	mov	r2, #0
   1dc14:	sub	r3, r4, #64	; 0x40
   1dc18:	strb	r1, [sp, #64]	; 0x40
   1dc1c:	strb	r4, [sp, #65]	; 0x41
   1dc20:	strb	r2, [sp, #66]	; 0x42
   1dc24:	cmp	r3, #24
   1dc28:	ldrls	pc, [pc, r3, lsl #2]
   1dc2c:	b	1dd94 <__assert_fail@plt+0xb7a0>
   1dc30:	muleq	r1, r4, ip
   1dc34:	muleq	r1, r4, sp
   1dc38:	muleq	r1, r4, sp
   1dc3c:	muleq	r1, r4, sp
   1dc40:	muleq	r1, r4, sp
   1dc44:	muleq	r1, r4, sp
   1dc48:	muleq	r1, r4, sp
   1dc4c:	muleq	r1, r4, sp
   1dc50:	muleq	r1, r4, sp
   1dc54:	muleq	r1, r4, sp
   1dc58:	muleq	r1, r4, sp
   1dc5c:	muleq	r1, r4, sp
   1dc60:	muleq	r1, r4, sp
   1dc64:	muleq	r1, r4, sp
   1dc68:	muleq	r1, r4, sp
   1dc6c:	muleq	r1, r4, sp
   1dc70:	muleq	r1, r4, sp
   1dc74:	muleq	r1, r4, sp
   1dc78:	muleq	r1, r4, sp
   1dc7c:	muleq	r1, r4, ip
   1dc80:	muleq	r1, r4, ip
   1dc84:	muleq	r1, r4, sp
   1dc88:	muleq	r1, r4, sp
   1dc8c:	muleq	r1, r4, sp
   1dc90:	muleq	r1, r4, ip
   1dc94:	movw	r2, #11176	; 0x2ba8
   1dc98:	movt	r2, #5
   1dc9c:	ldr	r3, [sp, #60]	; 0x3c
   1dca0:	mov	r1, #32
   1dca4:	add	r0, sp, #76	; 0x4c
   1dca8:	bl	12360 <snprintf@plt>
   1dcac:	mov	r3, #1
   1dcb0:	cmp	r4, #64	; 0x40
   1dcb4:	str	r3, [sp, #20]
   1dcb8:	str	r0, [sp, #24]
   1dcbc:	bne	1ddac <__assert_fail@plt+0xb7b8>
   1dcc0:	ldr	r0, [sp, #56]	; 0x38
   1dcc4:	cmp	r0, #0
   1dcc8:	asr	r1, r0, #31
   1dccc:	bge	1dcd8 <__assert_fail@plt+0xb6e4>
   1dcd0:	rsbs	r0, r0, #0
   1dcd4:	rsc	r1, r1, #0
   1dcd8:	ldr	r5, [pc, #1148]	; 1e15c <__assert_fail@plt+0xbb68>
   1dcdc:	mov	r6, #1
   1dce0:	mov	r7, #0
   1dce4:	mov	r3, #0
   1dce8:	strd	r6, [sp]
   1dcec:	strd	r6, [sp, #8]
   1dcf0:	add	r2, r5, #1
   1dcf4:	bl	2a590 <__assert_fail@plt+0x17f9c>
   1dcf8:	cmp	r0, r5
   1dcfc:	mov	r4, r0
   1dd00:	bls	1e104 <__assert_fail@plt+0xbb10>
   1dd04:	add	r3, r5, #788	; 0x314
   1dd08:	add	r3, r3, #3
   1dd0c:	cmp	r0, r3
   1dd10:	bcs	1e0e8 <__assert_fail@plt+0xbaf4>
   1dd14:	ldr	r3, [sp, #56]	; 0x38
   1dd18:	cmp	r3, #0
   1dd1c:	bge	1dd2c <__assert_fail@plt+0xb738>
   1dd20:	mov	r3, #45	; 0x2d
   1dd24:	sub	r4, r0, #1
   1dd28:	strb	r3, [r0, #-1]
   1dd2c:	ldr	r3, [sp, #20]
   1dd30:	cmp	r3, #0
   1dd34:	beq	1dd74 <__assert_fail@plt+0xb780>
   1dd38:	mov	r0, r4
   1dd3c:	sub	r5, r4, r5
   1dd40:	bl	12300 <strlen@plt>
   1dd44:	add	r5, r5, r0
   1dd48:	movw	r3, #790	; 0x316
   1dd4c:	cmp	r5, r3
   1dd50:	bhi	1e120 <__assert_fail@plt+0xbb2c>
   1dd54:	add	r0, sp, #76	; 0x4c
   1dd58:	sub	r5, r3, r5
   1dd5c:	bl	12300 <strlen@plt>
   1dd60:	cmp	r0, r5
   1dd64:	bcs	1e078 <__assert_fail@plt+0xba84>
   1dd68:	add	r1, sp, #76	; 0x4c
   1dd6c:	mov	r0, r4
   1dd70:	bl	12174 <strcat@plt>
   1dd74:	mov	r0, r4
   1dd78:	add	sp, sp, #156	; 0x9c
   1dd7c:	ldrd	r4, [sp]
   1dd80:	ldrd	r6, [sp, #8]
   1dd84:	ldrd	r8, [sp, #16]
   1dd88:	ldrd	sl, [sp, #24]
   1dd8c:	add	sp, sp, #32
   1dd90:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd94:	mov	r3, #0
   1dd98:	cmp	r4, #64	; 0x40
   1dd9c:	str	r3, [sp, #20]
   1dda0:	str	r3, [sp, #24]
   1dda4:	strb	r3, [sp, #76]	; 0x4c
   1dda8:	beq	1dcc0 <__assert_fail@plt+0xb6cc>
   1ddac:	mov	r0, r5
   1ddb0:	bl	1227c <localtime@plt>
   1ddb4:	subs	r5, r0, #0
   1ddb8:	beq	1dcc0 <__assert_fail@plt+0xb6cc>
   1ddbc:	add	r0, sp, #64	; 0x40
   1ddc0:	movw	r7, #30104	; 0x7598
   1ddc4:	movt	r7, #6
   1ddc8:	bl	12300 <strlen@plt>
   1ddcc:	mov	r4, r0
   1ddd0:	add	r0, r0, #2
   1ddd4:	bl	36864 <__assert_fail@plt+0x24270>
   1ddd8:	mov	r3, #95	; 0x5f
   1dddc:	add	r2, r4, #1
   1dde0:	str	r0, [sp, #32]
   1dde4:	add	r1, sp, #64	; 0x40
   1dde8:	strb	r3, [r0], #1
   1ddec:	bl	12024 <memcpy@plt>
   1ddf0:	ldrd	r2, [r5]
   1ddf4:	ldr	r4, [r7]
   1ddf8:	strd	r2, [sp, #108]	; 0x6c
   1ddfc:	ldrd	r2, [r5, #8]
   1de00:	ldr	r1, [sp, #108]	; 0x6c
   1de04:	strd	r2, [sp, #116]	; 0x74
   1de08:	ldrd	r2, [r5, #16]
   1de0c:	cmp	r1, #10
   1de10:	subgt	r1, r1, #11
   1de14:	addle	r1, r1, #11
   1de18:	cmp	r4, #0
   1de1c:	str	r1, [sp, #108]	; 0x6c
   1de20:	strd	r2, [sp, #124]	; 0x7c
   1de24:	ldrd	r2, [r5, #24]
   1de28:	strd	r2, [sp, #132]	; 0x84
   1de2c:	ldrd	r2, [r5, #32]
   1de30:	strd	r2, [sp, #140]	; 0x8c
   1de34:	ldr	r3, [r5, #40]	; 0x28
   1de38:	str	r3, [sp, #148]	; 0x94
   1de3c:	beq	1e0cc <__assert_fail@plt+0xbad8>
   1de40:	ldr	r6, [pc, #792]	; 1e160 <__assert_fail@plt+0xbb6c>
   1de44:	ldr	r8, [sp, #32]
   1de48:	b	1de64 <__assert_fail@plt+0xb870>
   1de4c:	mov	r0, r4
   1de50:	mov	r2, #1
   1de54:	mov	r1, r6
   1de58:	bl	36ab8 <__assert_fail@plt+0x244c4>
   1de5c:	mov	r4, r0
   1de60:	str	r0, [r7]
   1de64:	mov	r3, r5
   1de68:	mov	r2, r8
   1de6c:	ldr	r1, [r7, #4]
   1de70:	mov	r0, r4
   1de74:	bl	12264 <strftime@plt>
   1de78:	cmp	r0, #0
   1de7c:	beq	1de4c <__assert_fail@plt+0xb858>
   1de80:	ldr	r3, [r7, #4]
   1de84:	cmp	r0, r3
   1de88:	bcs	1de4c <__assert_fail@plt+0xb858>
   1de8c:	ldr	r3, [sp, #24]
   1de90:	mov	sl, r0
   1de94:	mov	r0, r4
   1de98:	add	r3, r3, #1
   1de9c:	add	r3, r3, sl
   1dea0:	mov	r4, r3
   1dea4:	mov	r1, r3
   1dea8:	str	r3, [sp, #52]	; 0x34
   1deac:	bl	368d0 <__assert_fail@plt+0x242dc>
   1deb0:	mov	r3, r4
   1deb4:	stm	r7, {r0, r3}
   1deb8:	mov	r0, r4
   1debc:	bl	36864 <__assert_fail@plt+0x24270>
   1dec0:	add	r3, sp, #108	; 0x6c
   1dec4:	ldr	r1, [r7, #4]
   1dec8:	mov	r4, r0
   1decc:	str	r0, [sp, #36]	; 0x24
   1ded0:	ldr	r2, [sp, #32]
   1ded4:	bl	12264 <strftime@plt>
   1ded8:	ldr	r1, [r7]
   1dedc:	ldrb	r5, [r1]
   1dee0:	str	r1, [sp, #44]	; 0x2c
   1dee4:	cmp	r5, #0
   1dee8:	beq	1e058 <__assert_fail@plt+0xba64>
   1deec:	mov	r2, r4
   1def0:	ldrb	r4, [r4]
   1def4:	cmp	r4, #0
   1def8:	beq	1e058 <__assert_fail@plt+0xba64>
   1defc:	add	r9, r2, #1
   1df00:	mvn	r2, r2
   1df04:	mov	r6, #0
   1df08:	mov	fp, r6
   1df0c:	str	r2, [sp, #28]
   1df10:	str	r7, [sp, #40]	; 0x28
   1df14:	mov	r7, r6
   1df18:	str	sl, [sp, #48]	; 0x30
   1df1c:	mov	sl, r1
   1df20:	b	1df4c <__assert_fail@plt+0xb958>
   1df24:	sub	r8, r8, fp
   1df28:	cmp	r8, r6
   1df2c:	bne	1e0c4 <__assert_fail@plt+0xbad0>
   1df30:	add	r6, r6, #1
   1df34:	ldrb	r5, [sl, #1]!
   1df38:	ldrb	r4, [r9], #1
   1df3c:	cmp	r5, #0
   1df40:	beq	1dfdc <__assert_fail@plt+0xb9e8>
   1df44:	cmp	r4, #0
   1df48:	beq	1e0c4 <__assert_fail@plt+0xbad0>
   1df4c:	ldr	r3, [sp, #28]
   1df50:	cmp	r4, r5
   1df54:	add	r8, r3, r9
   1df58:	beq	1df34 <__assert_fail@plt+0xb940>
   1df5c:	bl	122b8 <__ctype_b_loc@plt>
   1df60:	ldr	r0, [r0]
   1df64:	lsl	r5, r5, #1
   1df68:	ldrh	ip, [r0, r5]
   1df6c:	tst	ip, #2048	; 0x800
   1df70:	beq	1e0c4 <__assert_fail@plt+0xbad0>
   1df74:	lsl	r4, r4, #1
   1df78:	ldrh	r0, [r0, r4]
   1df7c:	tst	r0, #2048	; 0x800
   1df80:	beq	1e0c4 <__assert_fail@plt+0xbad0>
   1df84:	cmp	r7, #0
   1df88:	bne	1df24 <__assert_fail@plt+0xb930>
   1df8c:	mov	r6, #1
   1df90:	mov	fp, r8
   1df94:	mov	r7, r6
   1df98:	b	1df34 <__assert_fail@plt+0xb940>
   1df9c:	movw	r1, #11376	; 0x2c70
   1dfa0:	movt	r1, #5
   1dfa4:	ldr	r3, [sp, #60]	; 0x3c
   1dfa8:	mov	lr, #1
   1dfac:	movw	r2, #11176	; 0x2ba8
   1dfb0:	movt	r2, #5
   1dfb4:	ldrd	r6, [r1]
   1dfb8:	add	r0, sp, #76	; 0x4c
   1dfbc:	str	lr, [sp, #20]
   1dfc0:	ldr	ip, [r1, #8]
   1dfc4:	mov	r1, #32
   1dfc8:	strd	r6, [sp, #64]	; 0x40
   1dfcc:	str	ip, [sp, #72]	; 0x48
   1dfd0:	bl	12360 <snprintf@plt>
   1dfd4:	str	r0, [sp, #24]
   1dfd8:	b	1ddac <__assert_fail@plt+0xb7b8>
   1dfdc:	cmp	r6, #2
   1dfe0:	cmpeq	r4, #0
   1dfe4:	ldr	r7, [sp, #40]	; 0x28
   1dfe8:	ldr	sl, [sp, #48]	; 0x30
   1dfec:	bne	1e058 <__assert_fail@plt+0xba64>
   1dff0:	bl	122b8 <__ctype_b_loc@plt>
   1dff4:	ldr	r3, [sp, #44]	; 0x2c
   1dff8:	add	r2, fp, #2
   1dffc:	ldr	r1, [r0]
   1e000:	add	r4, r3, r2
   1e004:	ldrb	r3, [r3, r2]
   1e008:	lsl	r3, r3, #1
   1e00c:	ldrh	r3, [r1, r3]
   1e010:	tst	r3, #2048	; 0x800
   1e014:	bne	1e058 <__assert_fail@plt+0xba64>
   1e018:	ldr	r3, [sp, #24]
   1e01c:	add	sl, sl, #1
   1e020:	ldr	r1, [sp, #52]	; 0x34
   1e024:	add	r0, r3, r2
   1e028:	add	r3, r3, sl
   1e02c:	sub	r2, sl, r2
   1e030:	cmp	r1, r3
   1e034:	bne	1e13c <__assert_fail@plt+0xbb48>
   1e038:	ldr	r3, [sp, #44]	; 0x2c
   1e03c:	mov	r1, r4
   1e040:	add	r0, r3, r0
   1e044:	bl	11fb8 <memmove@plt>
   1e048:	mov	r0, r4
   1e04c:	add	r1, sp, #76	; 0x4c
   1e050:	ldr	r2, [sp, #24]
   1e054:	bl	12024 <memcpy@plt>
   1e058:	ldr	r0, [sp, #32]
   1e05c:	bl	38b10 <__assert_fail@plt+0x2651c>
   1e060:	ldr	r0, [sp, #36]	; 0x24
   1e064:	bl	38b10 <__assert_fail@plt+0x2651c>
   1e068:	ldr	r4, [r7]
   1e06c:	adds	r4, r4, #1
   1e070:	bne	1dd74 <__assert_fail@plt+0xb780>
   1e074:	b	1dcc0 <__assert_fail@plt+0xb6cc>
   1e078:	add	ip, sp, #76	; 0x4c
   1e07c:	mov	r1, #0
   1e080:	ldr	r3, [sp, #24]
   1e084:	mov	r0, r1
   1e088:	movw	r2, #11300	; 0x2c24
   1e08c:	movt	r2, #5
   1e090:	stm	sp, {r5, ip}
   1e094:	bl	121ec <error@plt>
   1e098:	add	r0, sp, #76	; 0x4c
   1e09c:	bl	12300 <strlen@plt>
   1e0a0:	cmp	r0, r5
   1e0a4:	bcc	1dd68 <__assert_fail@plt+0xb774>
   1e0a8:	movw	r1, #11184	; 0x2bb0
   1e0ac:	movt	r1, #5
   1e0b0:	ldr	r3, [pc, #172]	; 1e164 <__assert_fail@plt+0xbb70>
   1e0b4:	movw	r0, #11348	; 0x2c54
   1e0b8:	movt	r0, #5
   1e0bc:	mov	r2, #720	; 0x2d0
   1e0c0:	bl	125f4 <__assert_fail@plt>
   1e0c4:	ldr	r7, [sp, #40]	; 0x28
   1e0c8:	b	1e058 <__assert_fail@plt+0xba64>
   1e0cc:	mov	r3, #1
   1e0d0:	mov	r0, r3
   1e0d4:	str	r3, [r7, #4]
   1e0d8:	bl	36864 <__assert_fail@plt+0x24270>
   1e0dc:	mov	r4, r0
   1e0e0:	str	r0, [r7]
   1e0e4:	b	1de40 <__assert_fail@plt+0xb84c>
   1e0e8:	movw	r1, #11184	; 0x2bb0
   1e0ec:	movt	r1, #5
   1e0f0:	ldr	r3, [pc, #108]	; 1e164 <__assert_fail@plt+0xbb70>
   1e0f4:	movw	r0, #11252	; 0x2bf4
   1e0f8:	movt	r0, #5
   1e0fc:	movw	r2, #698	; 0x2ba
   1e100:	bl	125f4 <__assert_fail@plt>
   1e104:	movw	r1, #11184	; 0x2bb0
   1e108:	movt	r1, #5
   1e10c:	ldr	r3, [pc, #80]	; 1e164 <__assert_fail@plt+0xbb70>
   1e110:	movw	r0, #11244	; 0x2bec
   1e114:	movt	r0, #5
   1e118:	movw	r2, #697	; 0x2b9
   1e11c:	bl	125f4 <__assert_fail@plt>
   1e120:	movw	r1, #11184	; 0x2bb0
   1e124:	movt	r1, #5
   1e128:	ldr	r3, [pc, #52]	; 1e164 <__assert_fail@plt+0xbb70>
   1e12c:	movw	r0, #11280	; 0x2c10
   1e130:	movt	r0, #5
   1e134:	movw	r2, #711	; 0x2c7
   1e138:	bl	125f4 <__assert_fail@plt>
   1e13c:	movw	r3, #10996	; 0x2af4
   1e140:	movt	r3, #5
   1e144:	movw	r1, #11184	; 0x2bb0
   1e148:	movt	r1, #5
   1e14c:	movw	r0, #11192	; 0x2bb8
   1e150:	movt	r0, #5
   1e154:	movw	r2, #549	; 0x225
   1e158:	bl	125f4 <__assert_fail@plt>
   1e15c:	andeq	r7, r6, r0, lsr #11
   1e160:	muleq	r6, ip, r5
   1e164:	andeq	r2, r5, r4, lsl #22
   1e168:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e16c:	strd	r6, [sp, #8]
   1e170:	str	lr, [sp, #16]
   1e174:	sub	sp, sp, #44	; 0x2c
   1e178:	add	r4, sp, #32
   1e17c:	stm	r4, {r0, r1}
   1e180:	mov	r0, r4
   1e184:	bl	1227c <localtime@plt>
   1e188:	cmp	r0, #0
   1e18c:	beq	1e25c <__assert_fail@plt+0xbc68>
   1e190:	ldr	r1, [r0, #24]
   1e194:	cmp	r1, #0
   1e198:	blt	1e26c <__assert_fail@plt+0xbc78>
   1e19c:	cmp	r1, #6
   1e1a0:	bgt	1e34c <__assert_fail@plt+0xbd58>
   1e1a4:	ldr	r2, [r0, #16]
   1e1a8:	cmp	r2, #0
   1e1ac:	blt	1e330 <__assert_fail@plt+0xbd3c>
   1e1b0:	cmp	r2, #11
   1e1b4:	bgt	1e314 <__assert_fail@plt+0xbd20>
   1e1b8:	ldr	r4, [r0, #8]
   1e1bc:	cmp	r4, #0
   1e1c0:	blt	1e2f8 <__assert_fail@plt+0xbd04>
   1e1c4:	cmp	r4, #23
   1e1c8:	bgt	1e2dc <__assert_fail@plt+0xbce8>
   1e1cc:	ldr	r6, [r0, #4]
   1e1d0:	cmp	r6, #59	; 0x3b
   1e1d4:	bgt	1e2c0 <__assert_fail@plt+0xbccc>
   1e1d8:	ldr	r5, [r0]
   1e1dc:	cmp	r5, #61	; 0x3d
   1e1e0:	bgt	1e2a4 <__assert_fail@plt+0xbcb0>
   1e1e4:	ldr	lr, [r0, #20]
   1e1e8:	movw	r3, #10996	; 0x2af4
   1e1ec:	movt	r3, #5
   1e1f0:	add	ip, r3, r2, lsl #2
   1e1f4:	str	r4, [sp, #8]
   1e1f8:	movw	r2, #11548	; 0x2d1c
   1e1fc:	movt	r2, #5
   1e200:	ldr	r7, [sp, #36]	; 0x24
   1e204:	add	r3, r3, r1, lsl #2
   1e208:	str	r6, [sp, #12]
   1e20c:	mov	r1, #1024	; 0x400
   1e210:	str	r5, [sp, #16]
   1e214:	add	lr, lr, #1888	; 0x760
   1e218:	ldr	r4, [ip, #72]	; 0x48
   1e21c:	add	lr, lr, #12
   1e220:	str	r7, [sp, #20]
   1e224:	str	lr, [sp, #24]
   1e228:	ldr	ip, [r0, #12]
   1e22c:	ldr	r0, [pc, #308]	; 1e368 <__assert_fail@plt+0xbd74>
   1e230:	ldr	r3, [r3, #44]	; 0x2c
   1e234:	stm	sp, {r4, ip}
   1e238:	bl	12360 <snprintf@plt>
   1e23c:	cmp	r0, #1024	; 0x400
   1e240:	ldrlt	r0, [pc, #288]	; 1e368 <__assert_fail@plt+0xbd74>
   1e244:	bge	1e288 <__assert_fail@plt+0xbc94>
   1e248:	add	sp, sp, #44	; 0x2c
   1e24c:	ldrd	r4, [sp]
   1e250:	ldrd	r6, [sp, #8]
   1e254:	add	sp, sp, #16
   1e258:	pop	{pc}		; (ldr pc, [sp], #4)
   1e25c:	mov	r2, #64	; 0x40
   1e260:	ldm	r4, {r0, r1}
   1e264:	bl	1dbe0 <__assert_fail@plt+0xb5ec>
   1e268:	b	1e248 <__assert_fail@plt+0xbc54>
   1e26c:	movw	r1, #11184	; 0x2bb0
   1e270:	movt	r1, #5
   1e274:	ldr	r3, [pc, #240]	; 1e36c <__assert_fail@plt+0xbd78>
   1e278:	movw	r0, #11388	; 0x2c7c
   1e27c:	movt	r0, #5
   1e280:	movw	r2, #749	; 0x2ed
   1e284:	bl	125f4 <__assert_fail@plt>
   1e288:	movw	r1, #11184	; 0x2bb0
   1e28c:	movt	r1, #5
   1e290:	ldr	r3, [pc, #212]	; 1e36c <__assert_fail@plt+0xbd78>
   1e294:	movw	r0, #11588	; 0x2d44
   1e298:	movt	r0, #5
   1e29c:	movw	r2, #770	; 0x302
   1e2a0:	bl	125f4 <__assert_fail@plt>
   1e2a4:	movw	r1, #11184	; 0x2bb0
   1e2a8:	movt	r1, #5
   1e2ac:	ldr	r3, [pc, #184]	; 1e36c <__assert_fail@plt+0xbd78>
   1e2b0:	movw	r0, #11528	; 0x2d08
   1e2b4:	movt	r0, #5
   1e2b8:	mov	r2, #756	; 0x2f4
   1e2bc:	bl	125f4 <__assert_fail@plt>
   1e2c0:	movw	r1, #11184	; 0x2bb0
   1e2c4:	movt	r1, #5
   1e2c8:	ldr	r3, [pc, #156]	; 1e36c <__assert_fail@plt+0xbd78>
   1e2cc:	movw	r0, #11508	; 0x2cf4
   1e2d0:	movt	r0, #5
   1e2d4:	movw	r2, #755	; 0x2f3
   1e2d8:	bl	125f4 <__assert_fail@plt>
   1e2dc:	movw	r1, #11184	; 0x2bb0
   1e2e0:	movt	r1, #5
   1e2e4:	ldr	r3, [pc, #128]	; 1e36c <__assert_fail@plt+0xbd78>
   1e2e8:	movw	r0, #11488	; 0x2ce0
   1e2ec:	movt	r0, #5
   1e2f0:	movw	r2, #754	; 0x2f2
   1e2f4:	bl	125f4 <__assert_fail@plt>
   1e2f8:	movw	r1, #11184	; 0x2bb0
   1e2fc:	movt	r1, #5
   1e300:	ldr	r3, [pc, #100]	; 1e36c <__assert_fail@plt+0xbd78>
   1e304:	movw	r0, #11468	; 0x2ccc
   1e308:	movt	r0, #5
   1e30c:	movw	r2, #753	; 0x2f1
   1e310:	bl	125f4 <__assert_fail@plt>
   1e314:	movw	r1, #11184	; 0x2bb0
   1e318:	movt	r1, #5
   1e31c:	ldr	r3, [pc, #72]	; 1e36c <__assert_fail@plt+0xbd78>
   1e320:	movw	r0, #11448	; 0x2cb8
   1e324:	movt	r0, #5
   1e328:	mov	r2, #752	; 0x2f0
   1e32c:	bl	125f4 <__assert_fail@plt>
   1e330:	movw	r1, #11184	; 0x2bb0
   1e334:	movt	r1, #5
   1e338:	ldr	r3, [pc, #44]	; 1e36c <__assert_fail@plt+0xbd78>
   1e33c:	movw	r0, #11428	; 0x2ca4
   1e340:	movt	r0, #5
   1e344:	movw	r2, #751	; 0x2ef
   1e348:	bl	125f4 <__assert_fail@plt>
   1e34c:	movw	r1, #11184	; 0x2bb0
   1e350:	movt	r1, #5
   1e354:	ldr	r3, [pc, #16]	; 1e36c <__assert_fail@plt+0xbd78>
   1e358:	movw	r0, #11408	; 0x2c90
   1e35c:	movt	r0, #5
   1e360:	movw	r2, #750	; 0x2ee
   1e364:	bl	125f4 <__assert_fail@plt>
   1e368:			; <UNDEFINED> instruction: 0x000678b8
   1e36c:	andeq	r2, r5, r0, lsl fp
   1e370:	push	{r1, r2, r3}
   1e374:	str	r4, [sp, #-8]!
   1e378:	mov	r4, r0
   1e37c:	ldr	r0, [r0, #4]
   1e380:	str	lr, [sp, #4]
   1e384:	sub	sp, sp, #12
   1e388:	add	r3, sp, #24
   1e38c:	ldr	r1, [sp, #20]
   1e390:	mov	r2, r3
   1e394:	str	r3, [sp, #4]
   1e398:	bl	12474 <vfprintf@plt>
   1e39c:	cmp	r0, #0
   1e3a0:	blt	1e3bc <__assert_fail@plt+0xbdc8>
   1e3a4:	add	sp, sp, #12
   1e3a8:	ldr	r4, [sp]
   1e3ac:	ldr	lr, [sp, #4]
   1e3b0:	add	sp, sp, #8
   1e3b4:	add	sp, sp, #12
   1e3b8:	bx	lr
   1e3bc:	bl	12348 <__errno_location@plt>
   1e3c0:	ldr	r0, [r0]
   1e3c4:	ldr	r1, [r4, #8]
   1e3c8:	bl	1d7dc <__assert_fail@plt+0xb1e8>
   1e3cc:	b	1e3a4 <__assert_fail@plt+0xbdb0>
   1e3d0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1e3d4:	mov	r4, r1
   1e3d8:	mov	r5, r0
   1e3dc:	ldr	r1, [r1]
   1e3e0:	strd	r6, [sp, #8]
   1e3e4:	strd	r8, [sp, #16]
   1e3e8:	str	lr, [sp, #24]
   1e3ec:	vpush	{d8}
   1e3f0:	sub	sp, sp, #692	; 0x2b4
   1e3f4:	cmp	r1, #1
   1e3f8:	beq	1e6b8 <__assert_fail@plt+0xc0c4>
   1e3fc:	cmp	r1, #0
   1e400:	beq	1e684 <__assert_fail@plt+0xc090>
   1e404:	cmp	r1, #2
   1e408:	bne	1e668 <__assert_fail@plt+0xc074>
   1e40c:	mov	r6, r3
   1e410:	ldrb	r3, [r4, #4]
   1e414:	mov	r7, r2
   1e418:	cmp	r3, #121	; 0x79
   1e41c:	ldrls	pc, [pc, r3, lsl #2]
   1e420:	b	1e668 <__assert_fail@plt+0xc074>
   1e424:	strdeq	lr, [r1], -ip
   1e428:	andeq	lr, r1, r8, ror #12
   1e42c:	andeq	lr, r1, r8, ror #12
   1e430:	andeq	lr, r1, r8, ror #12
   1e434:	andeq	lr, r1, r8, ror #12
   1e438:	andeq	lr, r1, r8, ror #12
   1e43c:	andeq	lr, r1, r8, ror #12
   1e440:	andeq	lr, r1, r8, ror #12
   1e444:	andeq	lr, r1, r8, ror #12
   1e448:	andeq	lr, r1, r8, ror #12
   1e44c:	andeq	lr, r1, r8, ror #12
   1e450:	andeq	lr, r1, r8, ror #12
   1e454:	andeq	lr, r1, r8, ror #12
   1e458:	andeq	lr, r1, r8, ror #12
   1e45c:	andeq	lr, r1, r8, ror #12
   1e460:	andeq	lr, r1, r8, ror #12
   1e464:	andeq	lr, r1, r8, ror #12
   1e468:	andeq	lr, r1, r8, ror #12
   1e46c:	andeq	lr, r1, r8, ror #12
   1e470:	andeq	lr, r1, r8, ror #12
   1e474:	andeq	lr, r1, r8, ror #12
   1e478:	andeq	lr, r1, r8, ror #12
   1e47c:	andeq	lr, r1, r8, ror #12
   1e480:	andeq	lr, r1, r8, ror #12
   1e484:	andeq	lr, r1, r8, ror #12
   1e488:	andeq	lr, r1, r8, ror #12
   1e48c:	andeq	lr, r1, r8, ror #12
   1e490:	andeq	lr, r1, r8, ror #12
   1e494:	andeq	lr, r1, r8, ror #12
   1e498:	andeq	lr, r1, r8, ror #12
   1e49c:	andeq	lr, r1, r8, ror #12
   1e4a0:	andeq	lr, r1, r8, ror #12
   1e4a4:	andeq	lr, r1, r8, ror #12
   1e4a8:	andeq	lr, r1, r8, ror #12
   1e4ac:	andeq	lr, r1, r8, ror #12
   1e4b0:	andeq	lr, r1, r8, ror #12
   1e4b4:	andeq	lr, r1, r8, ror #12
   1e4b8:	andeq	lr, r1, r4, lsl #13
   1e4bc:	andeq	lr, r1, r8, ror #12
   1e4c0:	andeq	lr, r1, r8, ror #12
   1e4c4:	andeq	lr, r1, r8, ror #12
   1e4c8:	andeq	lr, r1, r8, ror #12
   1e4cc:	andeq	lr, r1, r8, ror #12
   1e4d0:	andeq	lr, r1, r8, ror #12
   1e4d4:	andeq	lr, r1, r8, ror #12
   1e4d8:	andeq	lr, r1, r8, ror #12
   1e4dc:	andeq	lr, r1, r8, ror #12
   1e4e0:	andeq	lr, r1, r8, ror #12
   1e4e4:	andeq	lr, r1, r8, ror #12
   1e4e8:	andeq	lr, r1, r8, ror #12
   1e4ec:	andeq	lr, r1, r8, ror #12
   1e4f0:	andeq	lr, r1, r8, ror #12
   1e4f4:	andeq	lr, r1, r8, ror #12
   1e4f8:	andeq	lr, r1, r8, ror #12
   1e4fc:	andeq	lr, r1, r8, ror #12
   1e500:	andeq	lr, r1, r8, ror #12
   1e504:	andeq	lr, r1, r8, ror #12
   1e508:	andeq	lr, r1, r8, ror #12
   1e50c:	andeq	lr, r1, r8, ror #12
   1e510:	andeq	lr, r1, r8, ror #12
   1e514:	andeq	lr, r1, r8, ror #12
   1e518:	andeq	lr, r1, r8, ror #12
   1e51c:	andeq	lr, r1, r8, ror #12
   1e520:	andeq	lr, r1, r8, ror #12
   1e524:	andeq	lr, r1, r8, ror #12
   1e528:	andeq	lr, r1, r8, ror #12
   1e52c:	andeq	lr, r1, r8, ror #12
   1e530:	andeq	lr, r1, r8, ror #12
   1e534:			; <UNDEFINED> instruction: 0x0001e8b0
   1e538:	andeq	lr, r1, r8, ror #12
   1e53c:	andeq	lr, r1, r8, lsl #19
   1e540:	andeq	lr, r1, r0, asr r7
   1e544:	andeq	lr, r1, r8, asr #22
   1e548:	andeq	lr, r1, r8, ror #12
   1e54c:	andeq	lr, r1, r8, ror #12
   1e550:	andeq	lr, r1, r8, ror #12
   1e554:	andeq	lr, r1, r8, ror #12
   1e558:	andeq	lr, r1, r0, lsr #22
   1e55c:	andeq	lr, r1, r8, ror #12
   1e560:	andeq	lr, r1, r8, ror #12
   1e564:	strdeq	lr, [r1], -ip
   1e568:	andeq	lr, r1, r8, ror #12
   1e56c:	andeq	lr, r1, r8, ror #12
   1e570:	ldrdeq	lr, [r1], -r4
   1e574:	andeq	lr, r1, r8, ror #12
   1e578:	muleq	r1, ip, r7
   1e57c:	andeq	lr, r1, r8, ror #12
   1e580:	andeq	lr, r1, r8, ror #12
   1e584:	andeq	lr, r1, r8, ror #12
   1e588:	andeq	lr, r1, ip, lsl #12
   1e58c:	andeq	lr, r1, r8, lsl r9
   1e590:	andeq	lr, r1, r8, ror #12
   1e594:	andeq	lr, r1, r8, ror #12
   1e598:	andeq	lr, r1, r8, ror #12
   1e59c:	andeq	lr, r1, r8, ror #12
   1e5a0:	andeq	lr, r1, r8, ror #12
   1e5a4:	andeq	lr, r1, r8, ror #12
   1e5a8:	andeq	lr, r1, r4, asr #20
   1e5ac:	strdeq	lr, [r1], -ip
   1e5b0:	andeq	lr, r1, r8, ror #21
   1e5b4:	ldrdeq	lr, [r1], -r0
   1e5b8:	andeq	lr, r1, r8, ror #12
   1e5bc:	andeq	lr, r1, ip, lsl #20
   1e5c0:	andeq	lr, r1, ip, ror r8
   1e5c4:	andeq	lr, r1, r4, asr #15
   1e5c8:	andeq	lr, r1, r8, ror #19
   1e5cc:	andeq	lr, r1, r8, ror #12
   1e5d0:			; <UNDEFINED> instruction: 0x0001e9bc
   1e5d4:	andeq	lr, r1, ip, ror sl
   1e5d8:	andeq	lr, r1, r8, ror #20
   1e5dc:	andeq	lr, r1, r0, ror #18
   1e5e0:	andeq	lr, r1, r8, ror #12
   1e5e4:	andeq	lr, r1, ip, lsr #14
   1e5e8:	andeq	lr, r1, r8, ror #12
   1e5ec:	andeq	lr, r1, r8, ror #12
   1e5f0:	ldrdeq	lr, [r1], -r8
   1e5f4:	andeq	lr, r1, r4, asr #23
   1e5f8:	andeq	lr, r1, ip, lsl #15
   1e5fc:	andeq	lr, r1, r8, ror #12
   1e600:	andeq	lr, r1, r8, ror #12
   1e604:	andeq	lr, r1, r8, ror #12
   1e608:	muleq	r1, r4, fp
   1e60c:	ldr	r3, [r6, #16]
   1e610:	and	r3, r3, #61440	; 0xf000
   1e614:	cmp	r3, #40960	; 0xa000
   1e618:	beq	1ecc8 <__assert_fail@plt+0xc6d4>
   1e61c:	cmp	r3, #32768	; 0x8000
   1e620:	ldr	r1, [r4, #8]
   1e624:	beq	1ec98 <__assert_fail@plt+0xc6a4>
   1e628:	cmp	r3, #16384	; 0x4000
   1e62c:	beq	1ede0 <__assert_fail@plt+0xc7ec>
   1e630:	cmp	r3, #49152	; 0xc000
   1e634:	beq	1edec <__assert_fail@plt+0xc7f8>
   1e638:	cmp	r3, #24576	; 0x6000
   1e63c:	beq	1edf8 <__assert_fail@plt+0xc804>
   1e640:	cmp	r3, #8192	; 0x2000
   1e644:	beq	1ee04 <__assert_fail@plt+0xc810>
   1e648:	movw	r0, #5820	; 0x16bc
   1e64c:	movt	r0, #5
   1e650:	cmp	r3, #4096	; 0x1000
   1e654:	movw	r2, #11608	; 0x2d58
   1e658:	movt	r2, #5
   1e65c:	moveq	r2, r0
   1e660:	mov	r0, r5
   1e664:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1e668:	add	sp, sp, #692	; 0x2b4
   1e66c:	vpop	{d8}
   1e670:	ldrd	r4, [sp]
   1e674:	ldrd	r6, [sp, #8]
   1e678:	ldrd	r8, [sp, #16]
   1e67c:	add	sp, sp, #24
   1e680:	pop	{pc}		; (ldr pc, [sp], #4)
   1e684:	mov	r1, #1
   1e688:	ldr	r3, [r5, #4]
   1e68c:	ldr	r6, [r4, #12]
   1e690:	ldr	r0, [r4, #8]
   1e694:	mov	r2, r6
   1e698:	bl	12168 <fwrite@plt>
   1e69c:	cmp	r6, r0
   1e6a0:	bls	1e668 <__assert_fail@plt+0xc074>
   1e6a4:	bl	12348 <__errno_location@plt>
   1e6a8:	ldr	r0, [r0]
   1e6ac:	ldr	r1, [r5, #8]
   1e6b0:	bl	1d7dc <__assert_fail@plt+0xb1e8>
   1e6b4:	b	1e668 <__assert_fail@plt+0xc074>
   1e6b8:	ldr	r3, [r5, #4]
   1e6bc:	ldr	r6, [r4, #12]
   1e6c0:	ldr	r0, [r4, #8]
   1e6c4:	mov	r2, r6
   1e6c8:	bl	12168 <fwrite@plt>
   1e6cc:	cmp	r6, r0
   1e6d0:	bhi	1e6e8 <__assert_fail@plt+0xc0f4>
   1e6d4:	ldr	r0, [r5, #4]
   1e6d8:	bl	38ab0 <__assert_fail@plt+0x264bc>
   1e6dc:	cmp	r0, #0
   1e6e0:	beq	1e668 <__assert_fail@plt+0xc074>
   1e6e4:	b	1e6a4 <__assert_fail@plt+0xc0b0>
   1e6e8:	bl	12348 <__errno_location@plt>
   1e6ec:	ldr	r0, [r0]
   1e6f0:	ldr	r1, [r5, #8]
   1e6f4:	bl	1d7dc <__assert_fail@plt+0xb1e8>
   1e6f8:	b	1e6d4 <__assert_fail@plt+0xc0e0>
   1e6fc:	movw	r3, #32320	; 0x7e40
   1e700:	movt	r3, #6
   1e704:	ldr	r2, [r3]
   1e708:	cmp	r2, #0
   1e70c:	movwle	r7, #9500	; 0x251c
   1e710:	movtle	r7, #5
   1e714:	ble	1e72c <__assert_fail@plt+0xc138>
   1e718:	ldr	r3, [r3, #20]
   1e71c:	ldrb	r2, [r7, r3]
   1e720:	add	r7, r7, r3
   1e724:	cmp	r2, #47	; 0x2f
   1e728:	addeq	r7, r7, #1
   1e72c:	ldrb	r2, [r5, #12]
   1e730:	str	r7, [sp]
   1e734:	ldr	r0, [r5, #4]
   1e738:	ldr	r3, [r4, #8]
   1e73c:	ldr	r1, [r5, #16]
   1e740:	bl	27ac8 <__assert_fail@plt+0x154d4>
   1e744:	cmp	r0, #0
   1e748:	bge	1e668 <__assert_fail@plt+0xc074>
   1e74c:	b	1e6a4 <__assert_fail@plt+0xc0b0>
   1e750:	mov	r8, #1
   1e754:	mov	r9, #0
   1e758:	ldr	r4, [r4, #8]
   1e75c:	mov	r3, #0
   1e760:	add	r2, sp, #32
   1e764:	strd	r8, [sp]
   1e768:	mov	r1, r3
   1e76c:	strd	r8, [sp, #8]
   1e770:	ldr	r0, [r6, #28]
   1e774:	bl	2a590 <__assert_fail@plt+0x17f9c>
   1e778:	mov	r2, r0
   1e77c:	mov	r1, r4
   1e780:	mov	r0, r5
   1e784:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1e788:	b	1e668 <__assert_fail@plt+0xc074>
   1e78c:	ldr	r0, [r6, #24]
   1e790:	bl	11f58 <getpwuid@plt>
   1e794:	subs	r3, r0, #0
   1e798:	bne	1e88c <__assert_fail@plt+0xc298>
   1e79c:	mov	r8, #1
   1e7a0:	mov	r9, #0
   1e7a4:	ldr	r4, [r4, #8]
   1e7a8:	mov	r3, #0
   1e7ac:	add	r2, sp, #32
   1e7b0:	mov	r1, r3
   1e7b4:	strd	r8, [sp]
   1e7b8:	strd	r8, [sp, #8]
   1e7bc:	ldr	r0, [r6, #24]
   1e7c0:	b	1e774 <__assert_fail@plt+0xc180>
   1e7c4:	mov	r0, r2
   1e7c8:	bl	36dd0 <__assert_fail@plt+0x247dc>
   1e7cc:	mov	r6, r0
   1e7d0:	bl	12300 <strlen@plt>
   1e7d4:	sub	r0, r0, #1
   1e7d8:	adds	r2, r6, r0
   1e7dc:	bcs	1e814 <__assert_fail@plt+0xc220>
   1e7e0:	ldrb	r3, [r6, r0]
   1e7e4:	cmp	r3, #47	; 0x2f
   1e7e8:	bne	1e814 <__assert_fail@plt+0xc220>
   1e7ec:	sub	r3, r2, #1
   1e7f0:	sub	r0, r6, #1
   1e7f4:	b	1e808 <__assert_fail@plt+0xc214>
   1e7f8:	ldrb	r1, [r2]
   1e7fc:	sub	r3, r3, #1
   1e800:	cmp	r1, #47	; 0x2f
   1e804:	bne	1e814 <__assert_fail@plt+0xc220>
   1e808:	cmp	r3, r0
   1e80c:	mov	r2, r3
   1e810:	bne	1e7f8 <__assert_fail@plt+0xc204>
   1e814:	cmp	r2, r6
   1e818:	bls	1e82c <__assert_fail@plt+0xc238>
   1e81c:	ldrb	r3, [r2, #1]
   1e820:	cmp	r3, #47	; 0x2f
   1e824:	moveq	r3, #0
   1e828:	strbeq	r3, [r2, #1]
   1e82c:	mov	r1, #47	; 0x2f
   1e830:	mov	r0, r6
   1e834:	bl	12468 <strrchr@plt>
   1e838:	subs	ip, r0, #0
   1e83c:	ldrb	r2, [r5, #12]
   1e840:	ldr	r0, [r5, #4]
   1e844:	ldr	r3, [r4, #8]
   1e848:	ldr	r1, [r5, #16]
   1e84c:	beq	1edc4 <__assert_fail@plt+0xc7d0>
   1e850:	mov	lr, #0
   1e854:	strb	lr, [ip]
   1e858:	str	r6, [sp]
   1e85c:	bl	27ac8 <__assert_fail@plt+0x154d4>
   1e860:	cmp	r0, #0
   1e864:	bge	1ea38 <__assert_fail@plt+0xc444>
   1e868:	bl	12348 <__errno_location@plt>
   1e86c:	ldr	r0, [r0]
   1e870:	ldr	r1, [r5, #8]
   1e874:	bl	1d7dc <__assert_fail@plt+0xb1e8>
   1e878:	b	1ea38 <__assert_fail@plt+0xc444>
   1e87c:	ldr	r0, [r6, #28]
   1e880:	bl	125d0 <getgrgid@plt>
   1e884:	subs	r3, r0, #0
   1e888:	beq	1e750 <__assert_fail@plt+0xc15c>
   1e88c:	ldr	r1, [r4, #8]
   1e890:	mov	ip, #115	; 0x73
   1e894:	mov	r0, r5
   1e898:	ldr	r2, [r4, #12]
   1e89c:	strb	ip, [r1, r2]
   1e8a0:	ldr	r2, [r3]
   1e8a4:	ldr	r1, [r4, #8]
   1e8a8:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1e8ac:	b	1e668 <__assert_fail@plt+0xc074>
   1e8b0:	mov	r0, #1
   1e8b4:	mov	r1, #0
   1e8b8:	ldr	r4, [r4, #8]
   1e8bc:	mov	r3, #0
   1e8c0:	add	r2, sp, #32
   1e8c4:	strd	r0, [sp]
   1e8c8:	strd	r0, [sp, #8]
   1e8cc:	ldrd	r0, [r6]
   1e8d0:	b	1e774 <__assert_fail@plt+0xc180>
   1e8d4:	ldrd	r8, [r6, #48]	; 0x30
   1e8d8:	ldr	r4, [r4, #8]
   1e8dc:	ldrd	r0, [r6, #64]	; 0x40
   1e8e0:	orrs	r3, r8, r9
   1e8e4:	bne	1ed94 <__assert_fail@plt+0xc7a0>
   1e8e8:	orrs	r3, r0, r1
   1e8ec:	beq	1edbc <__assert_fail@plt+0xc7c8>
   1e8f0:	vldr	d7, [pc, #944]	; 1eca8 <__assert_fail@plt+0xc6b4>
   1e8f4:	cmp	r0, #0
   1e8f8:	sbcs	r3, r1, #0
   1e8fc:	vldr	d6, [pc, #940]	; 1ecb0 <__assert_fail@plt+0xc6bc>
   1e900:	vmovge.f64	d7, d6
   1e904:	mov	r1, r4
   1e908:	mov	r0, r5
   1e90c:	vmov	r2, r3, d7
   1e910:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1e914:	b	1e668 <__assert_fail@plt+0xc074>
   1e918:	movw	r6, #32320	; 0x7e40
   1e91c:	movt	r6, #6
   1e920:	movw	r3, #32364	; 0x7e6c
   1e924:	movt	r3, #6
   1e928:	ldr	r1, [r6, #12]
   1e92c:	add	r2, sp, #32
   1e930:	ldr	r0, [r6, #16]
   1e934:	ldr	r3, [r3, #64]	; 0x40
   1e938:	blx	r3
   1e93c:	cmp	r0, #0
   1e940:	mov	r0, r5
   1e944:	blt	1ec28 <__assert_fail@plt+0xc634>
   1e948:	ldr	r1, [r4, #8]
   1e94c:	ldr	r2, [sp, #32]
   1e950:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1e954:	ldr	r0, [sp, #32]
   1e958:	bl	1251c <freecon@plt>
   1e95c:	b	1e668 <__assert_fail@plt+0xc074>
   1e960:	mov	r8, #1
   1e964:	mov	r9, #0
   1e968:	ldr	r4, [r4, #8]
   1e96c:	mov	r3, #0
   1e970:	add	r2, sp, #32
   1e974:	mov	r1, r3
   1e978:	strd	r8, [sp]
   1e97c:	strd	r8, [sp, #8]
   1e980:	ldr	r0, [r6, #20]
   1e984:	b	1e774 <__assert_fail@plt+0xc180>
   1e988:	ldr	r4, [r4, #8]
   1e98c:	mov	r1, r2
   1e990:	mov	r0, r6
   1e994:	bl	1f8f0 <__assert_fail@plt+0xd2fc>
   1e998:	ldrb	r2, [r5, #12]
   1e99c:	str	r0, [sp]
   1e9a0:	ldr	r0, [r5, #4]
   1e9a4:	mov	r3, r4
   1e9a8:	ldr	r1, [r5, #16]
   1e9ac:	bl	27ac8 <__assert_fail@plt+0x154d4>
   1e9b0:	cmp	r0, #0
   1e9b4:	bge	1e668 <__assert_fail@plt+0xc074>
   1e9b8:	b	1e6a4 <__assert_fail@plt+0xc0b0>
   1e9bc:	mov	r0, #1024	; 0x400
   1e9c0:	mov	r1, #0
   1e9c4:	ldr	r4, [r4, #8]
   1e9c8:	mov	r2, #512	; 0x200
   1e9cc:	mov	r3, #0
   1e9d0:	strd	r2, [sp]
   1e9d4:	mov	r3, #0
   1e9d8:	add	r2, sp, #32
   1e9dc:	strd	r0, [sp, #8]
   1e9e0:	ldrd	r0, [r6, #64]	; 0x40
   1e9e4:	b	1e774 <__assert_fail@plt+0xc180>
   1e9e8:	mov	r0, #1
   1e9ec:	mov	r1, #0
   1e9f0:	ldr	r4, [r4, #8]
   1e9f4:	mov	r3, #0
   1e9f8:	add	r2, sp, #32
   1e9fc:	strd	r0, [sp]
   1ea00:	strd	r0, [sp, #8]
   1ea04:	ldrd	r0, [r6, #96]	; 0x60
   1ea08:	b	1e774 <__assert_fail@plt+0xc180>
   1ea0c:	mov	r0, r2
   1ea10:	bl	2888c <__assert_fail@plt+0x16298>
   1ea14:	mov	r6, r0
   1ea18:	ldrb	r2, [r5, #12]
   1ea1c:	str	r6, [sp]
   1ea20:	ldr	r0, [r5, #4]
   1ea24:	ldr	r3, [r4, #8]
   1ea28:	ldr	r1, [r5, #16]
   1ea2c:	bl	27ac8 <__assert_fail@plt+0x154d4>
   1ea30:	cmp	r0, #0
   1ea34:	blt	1e868 <__assert_fail@plt+0xc274>
   1ea38:	mov	r0, r6
   1ea3c:	bl	38b10 <__assert_fail@plt+0x2651c>
   1ea40:	b	1e668 <__assert_fail@plt+0xc074>
   1ea44:	ldr	r4, [r4, #8]
   1ea48:	add	r3, sp, #16
   1ea4c:	ldrd	r0, [r6, #72]	; 0x48
   1ea50:	strd	r0, [sp, #16]
   1ea54:	ldm	r3, {r0, r1}
   1ea58:	bl	1e168 <__assert_fail@plt+0xbb74>
   1ea5c:	mov	r2, r0
   1ea60:	mov	r1, r4
   1ea64:	b	1e660 <__assert_fail@plt+0xc06c>
   1ea68:	ldr	r2, [r6, #16]
   1ea6c:	ldr	r1, [r4, #8]
   1ea70:	ubfx	r2, r2, #0, #12
   1ea74:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1ea78:	b	1e668 <__assert_fail@plt+0xc074>
   1ea7c:	ldr	r3, [r6, #16]
   1ea80:	and	r3, r3, #61440	; 0xf000
   1ea84:	cmp	r3, #40960	; 0xa000
   1ea88:	beq	1ed5c <__assert_fail@plt+0xc768>
   1ea8c:	movw	r3, #9500	; 0x251c
   1ea90:	movt	r3, #5
   1ea94:	ldrb	r2, [r5, #12]
   1ea98:	str	r3, [sp]
   1ea9c:	ldr	r0, [r5, #4]
   1eaa0:	ldr	r3, [r4, #8]
   1eaa4:	ldr	r1, [r5, #16]
   1eaa8:	bl	27ac8 <__assert_fail@plt+0x154d4>
   1eaac:	cmp	r0, #0
   1eab0:	movge	r6, #0
   1eab4:	bge	1ea38 <__assert_fail@plt+0xc444>
   1eab8:	bl	12348 <__errno_location@plt>
   1eabc:	ldr	r0, [r0]
   1eac0:	mov	r6, #0
   1eac4:	ldr	r1, [r5, #8]
   1eac8:	bl	1d7dc <__assert_fail@plt+0xb1e8>
   1eacc:	b	1ea38 <__assert_fail@plt+0xc444>
   1ead0:	movw	r3, #32320	; 0x7e40
   1ead4:	movt	r3, #6
   1ead8:	ldr	r1, [r4, #8]
   1eadc:	ldr	r2, [r3]
   1eae0:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1eae4:	b	1e668 <__assert_fail@plt+0xc074>
   1eae8:	ldrd	r0, [r6, #88]	; 0x58
   1eaec:	add	r3, sp, #24
   1eaf0:	ldr	r4, [r4, #8]
   1eaf4:	strd	r0, [sp, #24]
   1eaf8:	b	1ea54 <__assert_fail@plt+0xc460>
   1eafc:	mov	r0, #512	; 0x200
   1eb00:	mov	r1, #0
   1eb04:	ldr	r4, [r4, #8]
   1eb08:	mov	r3, #0
   1eb0c:	add	r2, sp, #32
   1eb10:	strd	r0, [sp]
   1eb14:	strd	r0, [sp, #8]
   1eb18:	ldrd	r0, [r6, #64]	; 0x40
   1eb1c:	b	1e774 <__assert_fail@plt+0xc180>
   1eb20:	mov	r0, r6
   1eb24:	add	r1, sp, #32
   1eb28:	bl	28c94 <__assert_fail@plt+0x166a0>
   1eb2c:	mov	r3, #0
   1eb30:	add	r2, sp, #32
   1eb34:	ldr	r1, [r4, #8]
   1eb38:	mov	r0, r5
   1eb3c:	strb	r3, [sp, #42]	; 0x2a
   1eb40:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1eb44:	b	1e668 <__assert_fail@plt+0xc074>
   1eb48:	movw	r6, #32320	; 0x7e40
   1eb4c:	movt	r6, #6
   1eb50:	ldr	r0, [r6, #20]
   1eb54:	add	r0, r0, #1
   1eb58:	bl	36864 <__assert_fail@plt+0x24270>
   1eb5c:	ldr	r6, [r6, #20]
   1eb60:	mov	r1, r7
   1eb64:	mov	r8, r0
   1eb68:	mov	r2, r6
   1eb6c:	bl	12024 <memcpy@plt>
   1eb70:	mov	r3, #0
   1eb74:	mov	r0, r5
   1eb78:	ldr	r1, [r4, #8]
   1eb7c:	mov	r2, r8
   1eb80:	strb	r3, [r8, r6]
   1eb84:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1eb88:	mov	r0, r8
   1eb8c:	bl	38b10 <__assert_fail@plt+0x2651c>
   1eb90:	b	1e668 <__assert_fail@plt+0xc074>
   1eb94:	ldr	r3, [r6, #16]
   1eb98:	ldr	r1, [r4, #8]
   1eb9c:	and	r3, r3, #61440	; 0xf000
   1eba0:	cmp	r3, #32768	; 0x8000
   1eba4:	beq	1ec98 <__assert_fail@plt+0xc6a4>
   1eba8:	cmp	r3, #16384	; 0x4000
   1ebac:	beq	1ede0 <__assert_fail@plt+0xc7ec>
   1ebb0:	cmp	r3, #40960	; 0xa000
   1ebb4:	bne	1e630 <__assert_fail@plt+0xc03c>
   1ebb8:	movw	r2, #4444	; 0x115c
   1ebbc:	movt	r2, #5
   1ebc0:	b	1e660 <__assert_fail@plt+0xc06c>
   1ebc4:	ldrd	r0, [r6, #80]	; 0x50
   1ebc8:	add	r3, sp, #32
   1ebcc:	ldr	r4, [r4, #8]
   1ebd0:	strd	r0, [sp, #32]
   1ebd4:	b	1ea54 <__assert_fail@plt+0xc460>
   1ebd8:	mov	r0, #1
   1ebdc:	mov	r1, #0
   1ebe0:	ldr	r4, [r4, #8]
   1ebe4:	mov	r3, #0
   1ebe8:	add	r2, sp, #32
   1ebec:	strd	r0, [sp]
   1ebf0:	strd	r0, [sp, #8]
   1ebf4:	ldrd	r0, [r6, #48]	; 0x30
   1ebf8:	b	1e774 <__assert_fail@plt+0xc180>
   1ebfc:	mov	r2, #5
   1ec00:	movw	r1, #11612	; 0x2d5c
   1ec04:	movt	r1, #5
   1ec08:	mov	r0, #0
   1ec0c:	bl	120b4 <dcgettext@plt>
   1ec10:	mov	r2, r0
   1ec14:	movw	r3, #11648	; 0x2d80
   1ec18:	movt	r3, #5
   1ec1c:	mov	r1, #0
   1ec20:	mov	r0, #1
   1ec24:	bl	121ec <error@plt>
   1ec28:	movw	r2, #9500	; 0x251c
   1ec2c:	movt	r2, #5
   1ec30:	ldr	r1, [r4, #8]
   1ec34:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1ec38:	bl	12348 <__errno_location@plt>
   1ec3c:	ldr	r4, [r0]
   1ec40:	mov	r2, #5
   1ec44:	movw	r1, #3968	; 0xf80
   1ec48:	movt	r1, #5
   1ec4c:	mov	r0, #0
   1ec50:	bl	120b4 <dcgettext@plt>
   1ec54:	mov	r5, r0
   1ec58:	mov	r1, r7
   1ec5c:	mov	r0, #0
   1ec60:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   1ec64:	mov	r3, r0
   1ec68:	mov	r2, r5
   1ec6c:	mov	r1, r4
   1ec70:	mov	r0, #0
   1ec74:	bl	121ec <error@plt>
   1ec78:	mov	r3, #1
   1ec7c:	str	r3, [r6, #28]
   1ec80:	b	1e668 <__assert_fail@plt+0xc074>
   1ec84:	ldr	r3, [sp, #48]	; 0x30
   1ec88:	ldr	r1, [r4, #8]
   1ec8c:	and	r3, r3, #61440	; 0xf000
   1ec90:	cmp	r3, #32768	; 0x8000
   1ec94:	bne	1eba8 <__assert_fail@plt+0xc5b4>
   1ec98:	movw	r2, #20184	; 0x4ed8
   1ec9c:	movt	r2, #5
   1eca0:	b	1e660 <__assert_fail@plt+0xc06c>
   1eca4:	nop	{0}
   1eca8:	andeq	r0, r0, r0
   1ecac:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1ecb0:	andeq	r0, r0, r0
   1ecb4:	svcvc	0x00f00000	; IMB
   1ecb8:	andeq	r0, r0, r0
   1ecbc:	addmi	r0, r0, r0
   1ecc0:	andeq	r0, r0, r0
   1ecc4:	svccc	0x00f00000	; IMB
   1ecc8:	mov	r2, #0
   1eccc:	movw	r1, #32320	; 0x7e40
   1ecd0:	movt	r1, #6
   1ecd4:	add	r3, sp, #32
   1ecd8:	mov	r0, #3
   1ecdc:	str	r2, [sp]
   1ece0:	ldr	r2, [r1, #12]
   1ece4:	ldr	r1, [r1, #16]
   1ece8:	bl	1212c <__fxstatat64@plt>
   1ecec:	cmp	r0, #0
   1ecf0:	beq	1ec84 <__assert_fail@plt+0xc690>
   1ecf4:	bl	12348 <__errno_location@plt>
   1ecf8:	mov	r6, r0
   1ecfc:	mov	r0, r5
   1ed00:	ldr	r1, [r4, #8]
   1ed04:	ldr	r3, [r6]
   1ed08:	cmp	r3, #20
   1ed0c:	cmpne	r3, #2
   1ed10:	moveq	r4, #1
   1ed14:	movne	r4, #0
   1ed18:	beq	1ee10 <__assert_fail@plt+0xc81c>
   1ed1c:	cmp	r3, #40	; 0x28
   1ed20:	beq	1ee20 <__assert_fail@plt+0xc82c>
   1ed24:	movw	r2, #16536	; 0x4098
   1ed28:	movt	r2, #5
   1ed2c:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1ed30:	ldr	r5, [r6]
   1ed34:	mov	r1, r7
   1ed38:	mov	r0, r4
   1ed3c:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   1ed40:	mov	r3, r0
   1ed44:	movw	r2, #20016	; 0x4e30
   1ed48:	movt	r2, #5
   1ed4c:	mov	r0, r4
   1ed50:	mov	r1, r5
   1ed54:	bl	121ec <error@plt>
   1ed58:	b	1e668 <__assert_fail@plt+0xc074>
   1ed5c:	movw	r8, #32320	; 0x7e40
   1ed60:	movt	r8, #6
   1ed64:	ldr	r1, [r8, #12]
   1ed68:	ldr	r0, [r8, #16]
   1ed6c:	bl	282f0 <__assert_fail@plt+0x15cfc>
   1ed70:	subs	r6, r0, #0
   1ed74:	bne	1ea18 <__assert_fail@plt+0xc424>
   1ed78:	bl	12348 <__errno_location@plt>
   1ed7c:	mov	r1, r7
   1ed80:	ldr	r0, [r0]
   1ed84:	bl	1d704 <__assert_fail@plt+0xb110>
   1ed88:	mov	r3, #1
   1ed8c:	str	r3, [r8, #28]
   1ed90:	b	1ea8c <__assert_fail@plt+0xc498>
   1ed94:	bl	50428 <__assert_fail@plt+0x3de34>
   1ed98:	vmov	d7, r0, r1
   1ed9c:	mov	r0, r8
   1eda0:	mov	r1, r9
   1eda4:	vldr	d8, [pc, #-244]	; 1ecb8 <__assert_fail@plt+0xc6c4>
   1eda8:	vmul.f64	d8, d7, d8
   1edac:	bl	50428 <__assert_fail@plt+0x3de34>
   1edb0:	vmov	d7, r0, r1
   1edb4:	vdiv.f64	d7, d8, d7
   1edb8:	b	1e904 <__assert_fail@plt+0xc310>
   1edbc:	vldr	d7, [pc, #-260]	; 1ecc0 <__assert_fail@plt+0xc6cc>
   1edc0:	b	1e904 <__assert_fail@plt+0xc310>
   1edc4:	movw	ip, #16940	; 0x422c
   1edc8:	movt	ip, #5
   1edcc:	str	ip, [sp]
   1edd0:	bl	27ac8 <__assert_fail@plt+0x154d4>
   1edd4:	cmp	r0, #0
   1edd8:	bge	1ea38 <__assert_fail@plt+0xc444>
   1eddc:	b	1e868 <__assert_fail@plt+0xc274>
   1ede0:	movw	r2, #25332	; 0x62f4
   1ede4:	movt	r2, #5
   1ede8:	b	1e660 <__assert_fail@plt+0xc06c>
   1edec:	movw	r2, #16604	; 0x40dc
   1edf0:	movt	r2, #5
   1edf4:	b	1e660 <__assert_fail@plt+0xc06c>
   1edf8:	movw	r2, #25604	; 0x6404
   1edfc:	movt	r2, #5
   1ee00:	b	1e660 <__assert_fail@plt+0xc06c>
   1ee04:	movw	r2, #2196	; 0x894
   1ee08:	movt	r2, #5
   1ee0c:	b	1e660 <__assert_fail@plt+0xc06c>
   1ee10:	movw	r2, #5976	; 0x1758
   1ee14:	movt	r2, #5
   1ee18:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1ee1c:	b	1e668 <__assert_fail@plt+0xc074>
   1ee20:	movw	r2, #23800	; 0x5cf8
   1ee24:	movt	r2, #5
   1ee28:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1ee2c:	b	1e668 <__assert_fail@plt+0xc074>
   1ee30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1ee34:	ldr	r4, [r2, #40]	; 0x28
   1ee38:	strd	r6, [sp, #8]
   1ee3c:	str	r8, [sp, #16]
   1ee40:	strd	sl, [sp, #20]
   1ee44:	str	lr, [sp, #28]
   1ee48:	sub	sp, sp, #8
   1ee4c:	cmp	r4, #0
   1ee50:	beq	1ef1c <__assert_fail@plt+0xc928>
   1ee54:	movw	fp, #9500	; 0x251c
   1ee58:	movt	fp, #5
   1ee5c:	add	r6, r2, #40	; 0x28
   1ee60:	mov	r5, r1
   1ee64:	mov	r7, r0
   1ee68:	mov	sl, sp
   1ee6c:	ldr	r3, [r4]
   1ee70:	cmp	r3, #2
   1ee74:	bne	1ef90 <__assert_fail@plt+0xc99c>
   1ee78:	ldrb	r2, [r4, #5]
   1ee7c:	cmp	r2, #0
   1ee80:	beq	1ef90 <__assert_fail@plt+0xc99c>
   1ee84:	ldrb	r3, [r4, #4]
   1ee88:	sub	r3, r3, #65	; 0x41
   1ee8c:	cmp	r3, #19
   1ee90:	ldrls	pc, [pc, r3, lsl #2]
   1ee94:	b	1efa8 <__assert_fail@plt+0xc9b4>
   1ee98:	andeq	lr, r1, ip, ror pc
   1ee9c:	andeq	lr, r1, ip, asr #30
   1eea0:	andeq	lr, r1, ip, lsr pc
   1eea4:	andeq	lr, r1, r8, lsr #31
   1eea8:	andeq	lr, r1, r8, lsr #31
   1eeac:	andeq	lr, r1, r8, lsr #31
   1eeb0:	andeq	lr, r1, r8, lsr #31
   1eeb4:	andeq	lr, r1, r8, lsr #31
   1eeb8:	andeq	lr, r1, r8, lsr #31
   1eebc:	andeq	lr, r1, r8, lsr #31
   1eec0:	andeq	lr, r1, r8, lsr #31
   1eec4:	andeq	lr, r1, r8, lsr #31
   1eec8:	andeq	lr, r1, r8, lsr #31
   1eecc:	andeq	lr, r1, r8, lsr #31
   1eed0:	andeq	lr, r1, r8, lsr #31
   1eed4:	andeq	lr, r1, r8, lsr #31
   1eed8:	andeq	lr, r1, r8, lsr #31
   1eedc:	andeq	lr, r1, r8, lsr #31
   1eee0:	andeq	lr, r1, r8, lsr #31
   1eee4:	andeq	lr, r1, r8, ror #29
   1eee8:	ldr	r8, [r4, #8]
   1eeec:	ldrd	r0, [r5, #80]	; 0x50
   1eef0:	str	r0, [sp]
   1eef4:	str	r1, [sp, #4]
   1eef8:	ldm	sl, {r0, r1}
   1eefc:	bl	1dbe0 <__assert_fail@plt+0xb5ec>
   1ef00:	mov	r2, r0
   1ef04:	mov	r1, r8
   1ef08:	mov	r0, r6
   1ef0c:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1ef10:	ldr	r4, [r4, #16]
   1ef14:	cmp	r4, #0
   1ef18:	bne	1ee6c <__assert_fail@plt+0xc878>
   1ef1c:	mov	r0, #1
   1ef20:	add	sp, sp, #8
   1ef24:	ldrd	r4, [sp]
   1ef28:	ldrd	r6, [sp, #8]
   1ef2c:	ldr	r8, [sp, #16]
   1ef30:	ldrd	sl, [sp, #20]
   1ef34:	add	sp, sp, #28
   1ef38:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef3c:	ldrd	r0, [r5, #88]	; 0x58
   1ef40:	ldr	r8, [r4, #8]
   1ef44:	str	r0, [sp]
   1ef48:	b	1eef4 <__assert_fail@plt+0xc900>
   1ef4c:	mvn	r1, #0
   1ef50:	mvn	r0, #0
   1ef54:	ldr	r8, [r4, #8]
   1ef58:	cmp	r2, #64	; 0x40
   1ef5c:	strd	r0, [sp]
   1ef60:	mvneq	r1, #0
   1ef64:	beq	1eef4 <__assert_fail@plt+0xc900>
   1ef68:	mov	r1, r8
   1ef6c:	mov	r2, fp
   1ef70:	mov	r0, r6
   1ef74:	bl	1e370 <__assert_fail@plt+0xbd7c>
   1ef78:	b	1ef10 <__assert_fail@plt+0xc91c>
   1ef7c:	ldrd	r0, [r5, #72]	; 0x48
   1ef80:	ldr	r8, [r4, #8]
   1ef84:	strd	r0, [sl]
   1ef88:	ldr	r1, [r5, #76]	; 0x4c
   1ef8c:	b	1eef4 <__assert_fail@plt+0xc900>
   1ef90:	mov	r3, r5
   1ef94:	mov	r2, r7
   1ef98:	mov	r1, r4
   1ef9c:	mov	r0, r6
   1efa0:	bl	1e3d0 <__assert_fail@plt+0xbddc>
   1efa4:	b	1ef10 <__assert_fail@plt+0xc91c>
   1efa8:	movw	r1, #11184	; 0x2bb0
   1efac:	movt	r1, #5
   1efb0:	ldr	r3, [pc, #12]	; 1efc4 <__assert_fail@plt+0xc9d0>
   1efb4:	movw	r0, #20308	; 0x4f54
   1efb8:	movt	r0, #5
   1efbc:	movw	r2, #1304	; 0x518
   1efc0:	bl	125f4 <__assert_fail@plt>
   1efc4:	andeq	r2, r5, ip, ror #22
   1efc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1efcc:	strd	r6, [sp, #8]
   1efd0:	strd	r8, [sp, #16]
   1efd4:	strd	sl, [sp, #24]
   1efd8:	str	lr, [sp, #32]
   1efdc:	sub	sp, sp, #4
   1efe0:	ldrb	r5, [sp, #40]	; 0x28
   1efe4:	ldrb	r8, [sp, #44]	; 0x2c
   1efe8:	ldr	r9, [sp, #48]	; 0x30
   1efec:	cmp	r5, #123	; 0x7b
   1eff0:	beq	1f358 <__assert_fail@plt+0xcd64>
   1eff4:	cmp	r5, #91	; 0x5b
   1eff8:	beq	1f33c <__assert_fail@plt+0xcd48>
   1effc:	cmp	r5, #40	; 0x28
   1f000:	beq	1f374 <__assert_fail@plt+0xcd80>
   1f004:	mov	r7, r0
   1f008:	mov	r0, #20
   1f00c:	mov	r6, r2
   1f010:	mov	sl, r3
   1f014:	mov	fp, r1
   1f018:	bl	36864 <__assert_fail@plt+0x24270>
   1f01c:	mov	r4, r0
   1f020:	mov	r3, #0
   1f024:	add	r0, r6, #2
   1f028:	str	r4, [r7]
   1f02c:	str	sl, [r4]
   1f030:	strb	r5, [r4, #4]
   1f034:	strb	r8, [r4, #5]
   1f038:	str	r6, [r4, #12]
   1f03c:	str	r3, [r4, #16]
   1f040:	bl	36864 <__assert_fail@plt+0x24270>
   1f044:	mov	r2, r6
   1f048:	mov	r1, fp
   1f04c:	str	r0, [r4, #8]
   1f050:	bl	12390 <strncpy@plt>
   1f054:	cmp	sl, #1
   1f058:	mov	r3, r0
   1f05c:	add	r2, r0, r6
   1f060:	bls	1f1d0 <__assert_fail@plt+0xcbdc>
   1f064:	cmp	sl, #2
   1f068:	bne	1f3ac <__assert_fail@plt+0xcdb8>
   1f06c:	sub	r5, r5, #37	; 0x25
   1f070:	cmp	r5, #84	; 0x54
   1f074:	ldrls	pc, [pc, r5, lsl #2]
   1f078:	b	1f334 <__assert_fail@plt+0xcd40>
   1f07c:	andeq	pc, r1, r8, lsl #6
   1f080:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f084:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f088:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f08c:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f090:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f094:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f098:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f09c:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0a0:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0a4:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0a8:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0ac:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0b0:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0b4:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0b8:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0bc:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0c0:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0c4:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0c8:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0cc:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0d0:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0d4:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0d8:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0dc:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0e0:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0e4:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0e8:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f0ec:	andeq	pc, r1, r8, lsr #4
   1f0f0:	andeq	pc, r1, r8, lsr #4
   1f0f4:	andeq	pc, r1, r8, lsr #4
   1f0f8:	andeq	pc, r1, r8, lsr #4
   1f0fc:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f100:	andeq	pc, r1, r8, lsr #4
   1f104:	andeq	pc, r1, r8, lsr #4
   1f108:	andeq	pc, r1, r8, lsl #4
   1f10c:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f110:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f114:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f118:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f11c:	andeq	pc, r1, r8, lsr #4
   1f120:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f124:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f128:	andeq	pc, r1, r8, lsl #4
   1f12c:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f130:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f134:	andeq	pc, r1, r4, ror r2	; <UNPREDICTABLE>
   1f138:	andeq	pc, r1, r8, lsr #4
   1f13c:	andeq	pc, r1, r8, lsr #4
   1f140:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f144:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f148:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f14c:	andeq	pc, r1, ip, ror #5
   1f150:	ldrdeq	pc, [r1], -r8
   1f154:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f158:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f15c:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f160:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f164:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f168:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f16c:	andeq	pc, r1, r8, lsr #4
   1f170:	andeq	pc, r1, r8, lsr #4
   1f174:	andeq	pc, r1, r8, lsr #4
   1f178:	andeq	pc, r1, r8, asr #5
   1f17c:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f180:	andeq	pc, r1, r8, lsl #4
   1f184:	andeq	pc, r1, r8, lsr #4
   1f188:	andeq	pc, r1, r8, lsl #4
   1f18c:	andeq	pc, r1, ip, lsr #5
   1f190:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f194:	andeq	pc, r1, r8, lsr #4
   1f198:	andeq	pc, r1, r8, lsl r3	; <UNPREDICTABLE>
   1f19c:	muleq	r1, r0, r2
   1f1a0:	andeq	pc, r1, r8, lsr #4
   1f1a4:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f1a8:	andeq	pc, r1, r8, lsl #4
   1f1ac:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f1b0:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f1b4:	andeq	pc, r1, r8, lsr #4
   1f1b8:	andeq	pc, r1, r8, lsr #4
   1f1bc:	andeq	pc, r1, r8, lsr #4
   1f1c0:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f1c4:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f1c8:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f1cc:	andeq	pc, r1, r8, asr r2	; <UNPREDICTABLE>
   1f1d0:	cmp	r5, #0
   1f1d4:	bne	1f390 <__assert_fail@plt+0xcd9c>
   1f1d8:	cmp	r8, #0
   1f1dc:	bne	1f3c8 <__assert_fail@plt+0xcdd4>
   1f1e0:	strb	r8, [r0, r6]
   1f1e4:	ldr	r0, [r7]
   1f1e8:	add	r0, r0, #16
   1f1ec:	add	sp, sp, #4
   1f1f0:	ldrd	r4, [sp]
   1f1f4:	ldrd	r6, [sp, #8]
   1f1f8:	ldrd	r8, [sp, #16]
   1f1fc:	ldrd	sl, [sp, #24]
   1f200:	add	sp, sp, #32
   1f204:	pop	{pc}		; (ldr pc, [sp], #4)
   1f208:	mov	r1, #115	; 0x73
   1f20c:	add	r2, r2, #1
   1f210:	strb	r1, [r0, r6]
   1f214:	mov	r3, #0
   1f218:	strb	r3, [r2]
   1f21c:	ldr	r0, [r7]
   1f220:	add	r0, r0, #16
   1f224:	b	1f1ec <__assert_fail@plt+0xcbf8>
   1f228:	mov	r1, #115	; 0x73
   1f22c:	mov	r0, #1
   1f230:	add	r2, r2, r0
   1f234:	strb	r1, [r3, r6]
   1f238:	mov	r1, #3
   1f23c:	strb	r0, [r9, #18]
   1f240:	ldr	r3, [r9, #24]
   1f244:	mov	r0, #0
   1f248:	strb	r0, [r2]
   1f24c:	cmp	r3, r1
   1f250:	strcc	r1, [r9, #24]
   1f254:	b	1f21c <__assert_fail@plt+0xcc28>
   1f258:	mov	r0, #1
   1f25c:	mov	r1, #115	; 0x73
   1f260:	add	r2, r2, r0
   1f264:	strb	r1, [r3, r6]
   1f268:	mov	r1, #2
   1f26c:	strb	r0, [r9, #19]
   1f270:	b	1f240 <__assert_fail@plt+0xcc4c>
   1f274:	mov	r0, #1
   1f278:	mov	r1, #103	; 0x67
   1f27c:	add	r2, r2, r0
   1f280:	strb	r1, [r3, r6]
   1f284:	mov	r1, #3
   1f288:	strb	r0, [r9, #18]
   1f28c:	b	1f240 <__assert_fail@plt+0xcc4c>
   1f290:	mov	r1, #111	; 0x6f
   1f294:	mov	r0, #1
   1f298:	add	r2, r2, r0
   1f29c:	strb	r1, [r3, r6]
   1f2a0:	mov	r1, #3
   1f2a4:	strb	r0, [r9, #18]
   1f2a8:	b	1f240 <__assert_fail@plt+0xcc4c>
   1f2ac:	mov	r0, #1
   1f2b0:	mov	ip, #115	; 0x73
   1f2b4:	add	r2, r2, r0
   1f2b8:	mov	r1, r0
   1f2bc:	strb	ip, [r3, r6]
   1f2c0:	strb	r0, [r9, #20]
   1f2c4:	b	1f240 <__assert_fail@plt+0xcc4c>
   1f2c8:	mov	r1, #100	; 0x64
   1f2cc:	add	r2, r2, #1
   1f2d0:	strb	r1, [r0, r6]
   1f2d4:	b	1f214 <__assert_fail@plt+0xcc20>
   1f2d8:	mov	r0, #115	; 0x73
   1f2dc:	add	r2, r2, #1
   1f2e0:	mov	r1, #5
   1f2e4:	strb	r0, [r3, r6]
   1f2e8:	b	1f240 <__assert_fail@plt+0xcc4c>
   1f2ec:	mov	r0, #1
   1f2f0:	mov	r1, #115	; 0x73
   1f2f4:	add	r2, r2, r0
   1f2f8:	strb	r1, [r3, r6]
   1f2fc:	mov	r1, #2
   1f300:	strb	r0, [r9, #18]
   1f304:	b	1f240 <__assert_fail@plt+0xcc4c>
   1f308:	mov	r1, #37	; 0x25
   1f30c:	add	r2, r2, #1
   1f310:	strb	r1, [r0, r6]
   1f314:	b	1f214 <__assert_fail@plt+0xcc20>
   1f318:	mov	r0, #1
   1f31c:	mov	r1, #115	; 0x73
   1f320:	add	r2, r2, r0
   1f324:	strb	r1, [r3, r6]
   1f328:	mov	r1, #4
   1f32c:	strb	r0, [r9, #18]
   1f330:	b	1f240 <__assert_fail@plt+0xcc4c>
   1f334:	mov	r1, #0
   1f338:	b	1f240 <__assert_fail@plt+0xcc4c>
   1f33c:	movw	r1, #11184	; 0x2bb0
   1f340:	movt	r1, #5
   1f344:	ldr	r3, [pc, #152]	; 1f3e4 <__assert_fail@plt+0xcdf0>
   1f348:	movw	r0, #11672	; 0x2d98
   1f34c:	movt	r0, #5
   1f350:	mov	r2, #79	; 0x4f
   1f354:	bl	125f4 <__assert_fail@plt>
   1f358:	movw	r1, #11184	; 0x2bb0
   1f35c:	movt	r1, #5
   1f360:	ldr	r3, [pc, #124]	; 1f3e4 <__assert_fail@plt+0xcdf0>
   1f364:	movw	r0, #11652	; 0x2d84
   1f368:	movt	r0, #5
   1f36c:	mov	r2, #78	; 0x4e
   1f370:	bl	125f4 <__assert_fail@plt>
   1f374:	movw	r1, #11184	; 0x2bb0
   1f378:	movt	r1, #5
   1f37c:	ldr	r3, [pc, #96]	; 1f3e4 <__assert_fail@plt+0xcdf0>
   1f380:	movw	r0, #11692	; 0x2dac
   1f384:	movt	r0, #5
   1f388:	mov	r2, #80	; 0x50
   1f38c:	bl	125f4 <__assert_fail@plt>
   1f390:	movw	r1, #11184	; 0x2bb0
   1f394:	movt	r1, #5
   1f398:	ldr	r3, [pc, #68]	; 1f3e4 <__assert_fail@plt+0xcdf0>
   1f39c:	movw	r0, #11712	; 0x2dc0
   1f3a0:	movt	r0, #5
   1f3a4:	mov	r2, #97	; 0x61
   1f3a8:	bl	125f4 <__assert_fail@plt>
   1f3ac:	movw	r1, #11184	; 0x2bb0
   1f3b0:	movt	r1, #5
   1f3b4:	ldr	r3, [pc, #40]	; 1f3e4 <__assert_fail@plt+0xcdf0>
   1f3b8:	movw	r0, #11756	; 0x2dec
   1f3bc:	movt	r0, #5
   1f3c0:	mov	r2, #105	; 0x69
   1f3c4:	bl	125f4 <__assert_fail@plt>
   1f3c8:	movw	r1, #11184	; 0x2bb0
   1f3cc:	movt	r1, #5
   1f3d0:	ldr	r3, [pc, #12]	; 1f3e4 <__assert_fail@plt+0xcdf0>
   1f3d4:	movw	r0, #11732	; 0x2dd4
   1f3d8:	movt	r0, #5
   1f3dc:	mov	r2, #98	; 0x62
   1f3e0:	bl	125f4 <__assert_fail@plt>
   1f3e4:	andeq	r2, r5, ip, ror fp
   1f3e8:	mov	r3, r1
   1f3ec:	movw	r1, #60976	; 0xee30
   1f3f0:	movt	r1, #1
   1f3f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f3f8:	mov	r4, r0
   1f3fc:	mov	r0, r3
   1f400:	strd	r6, [sp, #8]
   1f404:	mov	r5, r2
   1f408:	strd	r8, [sp, #16]
   1f40c:	strd	sl, [sp, #24]
   1f410:	str	lr, [sp, #32]
   1f414:	sub	sp, sp, #28
   1f418:	bl	1c124 <__assert_fail@plt+0x9b30>
   1f41c:	ldrd	r2, [r4]
   1f420:	mov	sl, r0
   1f424:	movw	ip, #257	; 0x101
   1f428:	add	r1, r0, #40	; 0x28
   1f42c:	mov	r0, #0
   1f430:	strd	r2, [sl, #40]	; 0x28
   1f434:	ldrd	r2, [r4, #8]
   1f438:	strd	r2, [sl, #48]	; 0x30
   1f43c:	ldr	r3, [r4, #16]
   1f440:	str	ip, [sl, #16]
   1f444:	str	r0, [sl, #24]
   1f448:	str	r0, [sl, #40]	; 0x28
   1f44c:	str	r3, [sl, #56]	; 0x38
   1f450:	ldrb	r3, [r5]
   1f454:	cmp	r3, r0
   1f458:	beq	1f548 <__assert_fail@plt+0xcf54>
   1f45c:	movw	r2, #11868	; 0x2e5c
   1f460:	movt	r2, #5
   1f464:	movw	r8, #11860	; 0x2e54
   1f468:	movt	r8, #5
   1f46c:	str	r2, [sp, #20]
   1f470:	movw	r2, #12048	; 0x2f10
   1f474:	movt	r2, #5
   1f478:	mov	r9, r1
   1f47c:	mov	r6, r5
   1f480:	str	r2, [sp, #16]
   1f484:	b	1f4a0 <__assert_fail@plt+0xceac>
   1f488:	cmp	r3, #37	; 0x25
   1f48c:	beq	1f568 <__assert_fail@plt+0xcf74>
   1f490:	add	r5, r5, #1
   1f494:	mov	r3, r4
   1f498:	cmp	r3, #0
   1f49c:	beq	1f540 <__assert_fail@plt+0xcf4c>
   1f4a0:	cmp	r3, #92	; 0x5c
   1f4a4:	ldrb	r4, [r5, #1]
   1f4a8:	bne	1f488 <__assert_fail@plt+0xce94>
   1f4ac:	cmp	r4, #99	; 0x63
   1f4b0:	beq	1f850 <__assert_fail@plt+0xd25c>
   1f4b4:	cmp	r4, #0
   1f4b8:	beq	1f678 <__assert_fail@plt+0xd084>
   1f4bc:	sub	r1, r4, #48	; 0x30
   1f4c0:	uxtb	r3, r1
   1f4c4:	cmp	r3, #7
   1f4c8:	bls	1f794 <__assert_fail@plt+0xd1a0>
   1f4cc:	sub	r4, r4, #92	; 0x5c
   1f4d0:	add	r7, r5, #1
   1f4d4:	uxtb	r4, r4
   1f4d8:	cmp	r4, #26
   1f4dc:	bhi	1f6a8 <__assert_fail@plt+0xd0b4>
   1f4e0:	movw	r3, #10996	; 0x2af4
   1f4e4:	movt	r3, #5
   1f4e8:	add	r4, r3, r4
   1f4ec:	ldrb	r3, [r4, #152]	; 0x98
   1f4f0:	cmp	r3, #0
   1f4f4:	beq	1f6a8 <__assert_fail@plt+0xd0b4>
   1f4f8:	mov	ip, #2
   1f4fc:	strb	r3, [r5]
   1f500:	mov	lr, #0
   1f504:	sub	r2, r5, r6
   1f508:	mov	r0, r9
   1f50c:	mov	r3, lr
   1f510:	mov	r1, r6
   1f514:	add	r2, r2, #1
   1f518:	str	lr, [sp]
   1f51c:	str	lr, [sp, #4]
   1f520:	add	r5, r5, ip
   1f524:	str	sl, [sp, #8]
   1f528:	mov	r6, r5
   1f52c:	bl	1efc8 <__assert_fail@plt+0xc9d4>
   1f530:	ldrb	r3, [r7, #1]
   1f534:	mov	r9, r0
   1f538:	cmp	r3, #0
   1f53c:	bne	1f4a0 <__assert_fail@plt+0xceac>
   1f540:	cmp	r6, r5
   1f544:	bcc	1f834 <__assert_fail@plt+0xd240>
   1f548:	mov	r0, #1
   1f54c:	add	sp, sp, #28
   1f550:	ldrd	r4, [sp]
   1f554:	ldrd	r6, [sp, #8]
   1f558:	ldrd	r8, [sp, #16]
   1f55c:	ldrd	sl, [sp, #24]
   1f560:	add	sp, sp, #32
   1f564:	pop	{pc}		; (ldr pc, [sp], #4)
   1f568:	cmp	r4, #0
   1f56c:	beq	1f8c8 <__assert_fail@plt+0xd2d4>
   1f570:	cmp	r4, #37	; 0x25
   1f574:	beq	1f6dc <__assert_fail@plt+0xd0e8>
   1f578:	add	r7, r5, #1
   1f57c:	mov	fp, #1
   1f580:	b	1f594 <__assert_fail@plt+0xcfa0>
   1f584:	ldrb	r4, [r7, #1]!
   1f588:	add	fp, fp, #1
   1f58c:	cmp	r4, #0
   1f590:	beq	1f710 <__assert_fail@plt+0xd11c>
   1f594:	mov	r1, r4
   1f598:	mov	r0, r8
   1f59c:	bl	1230c <strchr@plt>
   1f5a0:	cmp	r0, #0
   1f5a4:	bne	1f584 <__assert_fail@plt+0xcf90>
   1f5a8:	bl	122b8 <__ctype_b_loc@plt>
   1f5ac:	ldr	r0, [r0]
   1f5b0:	lsl	r2, r4, #1
   1f5b4:	ldrh	r2, [r0, r2]
   1f5b8:	tst	r2, #2048	; 0x800
   1f5bc:	beq	1f5e0 <__assert_fail@plt+0xcfec>
   1f5c0:	add	r2, r5, fp
   1f5c4:	rsb	ip, r5, #1
   1f5c8:	add	fp, ip, r2
   1f5cc:	ldrb	r4, [r2, #1]!
   1f5d0:	lsl	r1, r4, #1
   1f5d4:	ldrh	r1, [r0, r1]
   1f5d8:	tst	r1, #2048	; 0x800
   1f5dc:	bne	1f5c8 <__assert_fail@plt+0xcfd4>
   1f5e0:	cmp	r4, #46	; 0x2e
   1f5e4:	beq	1f7e8 <__assert_fail@plt+0xd1f4>
   1f5e8:	add	r7, r5, fp
   1f5ec:	mov	r1, r4
   1f5f0:	ldr	r0, [sp, #20]
   1f5f4:	bl	1230c <strchr@plt>
   1f5f8:	cmp	r0, #0
   1f5fc:	beq	1f728 <__assert_fail@plt+0xd134>
   1f600:	cmp	r4, #0
   1f604:	bne	1f828 <__assert_fail@plt+0xd234>
   1f608:	mov	r1, r4
   1f60c:	ldr	r0, [sp, #16]
   1f610:	bl	1230c <strchr@plt>
   1f614:	subs	r4, r0, #0
   1f618:	bne	1f8a0 <__assert_fail@plt+0xd2ac>
   1f61c:	mov	r2, #5
   1f620:	movw	r1, #12052	; 0x2f14
   1f624:	movt	r1, #5
   1f628:	mov	r5, r7
   1f62c:	bl	120b4 <dcgettext@plt>
   1f630:	mov	r2, r0
   1f634:	ldrb	r3, [r5], #1
   1f638:	mov	r1, r4
   1f63c:	mov	r0, r4
   1f640:	bl	121ec <error@plt>
   1f644:	mov	ip, #0
   1f648:	mov	r0, r9
   1f64c:	mov	r3, ip
   1f650:	sub	r2, r5, r6
   1f654:	mov	r1, r6
   1f658:	str	ip, [sp]
   1f65c:	str	ip, [sp, #4]
   1f660:	str	sl, [sp, #8]
   1f664:	bl	1efc8 <__assert_fail@plt+0xc9d4>
   1f668:	mov	r9, r0
   1f66c:	ldrb	r3, [r7, #1]
   1f670:	mov	r6, r5
   1f674:	b	1f498 <__assert_fail@plt+0xcea4>
   1f678:	mov	r2, #5
   1f67c:	movw	r1, #11776	; 0x2e00
   1f680:	movt	r1, #5
   1f684:	mov	r0, r4
   1f688:	bl	120b4 <dcgettext@plt>
   1f68c:	mov	r2, r0
   1f690:	mov	r1, r4
   1f694:	mov	r0, r4
   1f698:	mov	r7, r5
   1f69c:	bl	121ec <error@plt>
   1f6a0:	mov	ip, #1
   1f6a4:	b	1f500 <__assert_fail@plt+0xcf0c>
   1f6a8:	mov	r2, #5
   1f6ac:	movw	r1, #11824	; 0x2e30
   1f6b0:	movt	r1, #5
   1f6b4:	mov	r0, #0
   1f6b8:	bl	120b4 <dcgettext@plt>
   1f6bc:	mov	r1, #0
   1f6c0:	ldrb	r3, [r5, #1]
   1f6c4:	mov	r2, r0
   1f6c8:	mov	r0, r1
   1f6cc:	add	r5, r5, #2
   1f6d0:	bl	121ec <error@plt>
   1f6d4:	ldrb	r3, [r5]
   1f6d8:	b	1f498 <__assert_fail@plt+0xcea4>
   1f6dc:	add	r2, r5, #1
   1f6e0:	mov	ip, #0
   1f6e4:	mov	r7, r2
   1f6e8:	mov	r0, r9
   1f6ec:	sub	r2, r2, r6
   1f6f0:	stm	sp, {r4, ip}
   1f6f4:	mov	r1, r6
   1f6f8:	mov	r3, #2
   1f6fc:	str	sl, [sp, #8]
   1f700:	bl	1efc8 <__assert_fail@plt+0xc9d4>
   1f704:	add	r5, r7, #1
   1f708:	mov	r9, r0
   1f70c:	b	1f66c <__assert_fail@plt+0xd078>
   1f710:	bl	122b8 <__ctype_b_loc@plt>
   1f714:	ldr	r0, [r0]
   1f718:	ldrh	r2, [r0]
   1f71c:	tst	r2, #2048	; 0x800
   1f720:	bne	1f5c0 <__assert_fail@plt+0xcfcc>
   1f724:	b	1f5e8 <__assert_fail@plt+0xcff4>
   1f728:	movw	r0, #11900	; 0x2e7c
   1f72c:	movt	r0, #5
   1f730:	mov	r1, r4
   1f734:	bl	1230c <strchr@plt>
   1f738:	cmp	r0, #0
   1f73c:	beq	1f608 <__assert_fail@plt+0xd014>
   1f740:	ldrb	ip, [r7, #1]
   1f744:	add	r5, r7, #1
   1f748:	cmp	ip, #0
   1f74c:	movne	r2, r7
   1f750:	movne	r7, r5
   1f754:	bne	1f6e8 <__assert_fail@plt+0xd0f4>
   1f758:	mov	r1, r4
   1f75c:	ldr	r0, [sp, #16]
   1f760:	bl	1230c <strchr@plt>
   1f764:	subs	r4, r0, #0
   1f768:	bne	1f8a0 <__assert_fail@plt+0xd2ac>
   1f76c:	mov	r2, #5
   1f770:	movw	r1, #11972	; 0x2ec4
   1f774:	movt	r1, #5
   1f778:	bl	120b4 <dcgettext@plt>
   1f77c:	mov	r2, r0
   1f780:	ldrb	r3, [r7]
   1f784:	mov	r1, r4
   1f788:	mov	r0, r4
   1f78c:	bl	121ec <error@plt>
   1f790:	b	1f644 <__assert_fail@plt+0xd050>
   1f794:	ldrb	r0, [r5, #2]
   1f798:	sub	r2, r0, #48	; 0x30
   1f79c:	cmp	r2, #7
   1f7a0:	bhi	1f894 <__assert_fail@plt+0xd2a0>
   1f7a4:	ldrb	r2, [r5, #3]
   1f7a8:	add	r3, r0, r1, lsl #3
   1f7ac:	sub	r3, r3, #48	; 0x30
   1f7b0:	sub	r1, r2, #48	; 0x30
   1f7b4:	cmp	r1, #7
   1f7b8:	uxtbhi	r3, r3
   1f7bc:	movhi	ip, #3
   1f7c0:	movhi	r2, #2
   1f7c4:	bhi	1f7dc <__assert_fail@plt+0xd1e8>
   1f7c8:	add	r3, r2, r3, lsl #3
   1f7cc:	mov	ip, #4
   1f7d0:	mov	r2, #3
   1f7d4:	sub	r3, r3, #48	; 0x30
   1f7d8:	uxtb	r3, r3
   1f7dc:	mov	r7, r5
   1f7e0:	strb	r3, [r7], r2
   1f7e4:	b	1f500 <__assert_fail@plt+0xcf0c>
   1f7e8:	add	r7, fp, #1
   1f7ec:	ldrb	r4, [r5, r7]
   1f7f0:	add	r7, r5, r7
   1f7f4:	lsl	r2, r4, #1
   1f7f8:	ldrh	r2, [r0, r2]
   1f7fc:	tst	r2, #2048	; 0x800
   1f800:	beq	1f5ec <__assert_fail@plt+0xcff8>
   1f804:	add	r3, fp, #2
   1f808:	add	r5, r5, r3
   1f80c:	mov	r7, r5
   1f810:	ldrb	r4, [r5], #1
   1f814:	lsl	r3, r4, #1
   1f818:	ldrh	r3, [r0, r3]
   1f81c:	tst	r3, #2048	; 0x800
   1f820:	bne	1f80c <__assert_fail@plt+0xd218>
   1f824:	b	1f5ec <__assert_fail@plt+0xcff8>
   1f828:	mov	r2, r7
   1f82c:	mov	ip, #0
   1f830:	b	1f6e8 <__assert_fail@plt+0xd0f4>
   1f834:	sub	r2, r5, r6
   1f838:	mov	r1, r6
   1f83c:	str	r3, [sp]
   1f840:	mov	r0, r9
   1f844:	stmib	sp, {r3, sl}
   1f848:	bl	1efc8 <__assert_fail@plt+0xc9d4>
   1f84c:	b	1f548 <__assert_fail@plt+0xcf54>
   1f850:	mov	ip, #0
   1f854:	mov	r3, #1
   1f858:	sub	r2, r5, r6
   1f85c:	mov	r1, r6
   1f860:	mov	r0, r9
   1f864:	str	ip, [sp]
   1f868:	str	ip, [sp, #4]
   1f86c:	str	sl, [sp, #8]
   1f870:	bl	1efc8 <__assert_fail@plt+0xc9d4>
   1f874:	ldrb	r3, [sl, #18]
   1f878:	cmp	r3, #0
   1f87c:	beq	1f548 <__assert_fail@plt+0xcf54>
   1f880:	ldr	r3, [sl, #24]
   1f884:	cmp	r3, #2
   1f888:	movls	r3, #3
   1f88c:	strls	r3, [sl, #24]
   1f890:	b	1f548 <__assert_fail@plt+0xcf54>
   1f894:	mov	ip, #2
   1f898:	mov	r2, #1
   1f89c:	b	1f7dc <__assert_fail@plt+0xd1e8>
   1f8a0:	mov	r2, #5
   1f8a4:	movw	r1, #11908	; 0x2e84
   1f8a8:	movt	r1, #5
   1f8ac:	mov	r0, #0
   1f8b0:	bl	120b4 <dcgettext@plt>
   1f8b4:	mov	r2, r0
   1f8b8:	ldrb	r3, [r7]
   1f8bc:	mov	r1, #0
   1f8c0:	mov	r0, #1
   1f8c4:	bl	121ec <error@plt>
   1f8c8:	mov	r2, #5
   1f8cc:	movw	r1, #11612	; 0x2d5c
   1f8d0:	movt	r1, #5
   1f8d4:	mov	r0, r4
   1f8d8:	bl	120b4 <dcgettext@plt>
   1f8dc:	mov	r2, r0
   1f8e0:	mov	r3, r5
   1f8e4:	mov	r1, r4
   1f8e8:	mov	r0, #1
   1f8ec:	bl	121ec <error@plt>
   1f8f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f8f4:	movw	r5, #31928	; 0x7cb8
   1f8f8:	movt	r5, #6
   1f8fc:	ldr	ip, [r5]
   1f900:	strd	r6, [sp, #8]
   1f904:	mov	r6, r0
   1f908:	strd	r8, [sp, #16]
   1f90c:	strd	sl, [sp, #24]
   1f910:	str	lr, [sp, #32]
   1f914:	sub	sp, sp, #108	; 0x6c
   1f918:	cmp	ip, #0
   1f91c:	beq	1f948 <__assert_fail@plt+0xd354>
   1f920:	ldrb	r3, [r5, #4]
   1f924:	cmp	r3, #0
   1f928:	beq	1f940 <__assert_fail@plt+0xd34c>
   1f92c:	ldrd	r0, [r0]
   1f930:	ldrd	r2, [r5, #8]
   1f934:	cmp	r1, r3
   1f938:	cmpeq	r0, r2
   1f93c:	beq	1fa6c <__assert_fail@plt+0xd478>
   1f940:	mov	r0, ip
   1f944:	bl	38b10 <__assert_fail@plt+0x2651c>
   1f948:	ldr	r4, [r5, #16]
   1f94c:	ldrd	r2, [r6]
   1f950:	cmp	r4, #0
   1f954:	strd	r2, [r5, #8]
   1f958:	beq	1fa0c <__assert_fail@plt+0xd418>
   1f95c:	ldrb	r3, [r5, #20]
   1f960:	cmp	r3, #0
   1f964:	beq	1f9f4 <__assert_fail@plt+0xd400>
   1f968:	movw	r9, #12216	; 0x2fb8
   1f96c:	movt	r9, #5
   1f970:	movw	r7, #32364	; 0x7e6c
   1f974:	movt	r7, #6
   1f978:	mov	r8, #0
   1f97c:	mvn	sl, #0
   1f980:	mvn	fp, #0
   1f984:	b	1f9a4 <__assert_fail@plt+0xd3b0>
   1f988:	ldrd	r2, [r6]
   1f98c:	cmp	r3, r1
   1f990:	cmpeq	r2, r0
   1f994:	moveq	r8, r4
   1f998:	ldr	r4, [r4, #28]
   1f99c:	cmp	r4, #0
   1f9a0:	beq	1fa4c <__assert_fail@plt+0xd458>
   1f9a4:	mov	r1, r9
   1f9a8:	ldr	r0, [r4, #12]
   1f9ac:	bl	11f40 <strcmp@plt>
   1f9b0:	cmp	r0, #0
   1f9b4:	beq	1f998 <__assert_fail@plt+0xd3a4>
   1f9b8:	ldrd	r0, [r4, #16]
   1f9bc:	cmp	r1, fp
   1f9c0:	cmpeq	r0, sl
   1f9c4:	bne	1f988 <__assert_fail@plt+0xd394>
   1f9c8:	mov	r0, sp
   1f9cc:	bl	1c458 <__assert_fail@plt+0x9e64>
   1f9d0:	mov	r1, sp
   1f9d4:	ldr	r0, [r4, #4]
   1f9d8:	ldr	r3, [r7, #52]	; 0x34
   1f9dc:	blx	r3
   1f9e0:	cmp	r0, #0
   1f9e4:	bne	1f998 <__assert_fail@plt+0xd3a4>
   1f9e8:	ldrd	r0, [sp]
   1f9ec:	strd	r0, [r4, #16]
   1f9f0:	b	1f988 <__assert_fail@plt+0xd394>
   1f9f4:	ldr	r7, [r4, #28]
   1f9f8:	mov	r0, r4
   1f9fc:	bl	3bf68 <__assert_fail@plt+0x29974>
   1fa00:	subs	r4, r7, #0
   1fa04:	bne	1f9f4 <__assert_fail@plt+0xd400>
   1fa08:	str	r4, [r5, #16]
   1fa0c:	mov	r0, #1
   1fa10:	mov	r7, r0
   1fa14:	bl	3b604 <__assert_fail@plt+0x29010>
   1fa18:	cmp	r0, #0
   1fa1c:	mov	r4, r0
   1fa20:	str	r0, [r5, #16]
   1fa24:	strb	r7, [r5, #20]
   1fa28:	bne	1f968 <__assert_fail@plt+0xd374>
   1fa2c:	mov	r2, #5
   1fa30:	movw	r1, #12176	; 0x2f90
   1fa34:	movt	r1, #5
   1fa38:	bl	120b4 <dcgettext@plt>
   1fa3c:	mov	r2, r0
   1fa40:	mov	r1, r4
   1fa44:	mov	r0, r7
   1fa48:	bl	121ec <error@plt>
   1fa4c:	cmp	r8, #0
   1fa50:	beq	1fa8c <__assert_fail@plt+0xd498>
   1fa54:	ldr	r0, [r8, #12]
   1fa58:	bl	36dd0 <__assert_fail@plt+0x247dc>
   1fa5c:	mov	ip, r0
   1fa60:	mov	r3, #1
   1fa64:	strb	r3, [r5, #4]
   1fa68:	str	ip, [r5]
   1fa6c:	mov	r0, ip
   1fa70:	add	sp, sp, #108	; 0x6c
   1fa74:	ldrd	r4, [sp]
   1fa78:	ldrd	r6, [sp, #8]
   1fa7c:	ldrd	r8, [sp, #16]
   1fa80:	ldrd	sl, [sp, #24]
   1fa84:	add	sp, sp, #32
   1fa88:	pop	{pc}		; (ldr pc, [sp], #4)
   1fa8c:	mov	r2, #5
   1fa90:	mov	r0, r8
   1fa94:	strb	r8, [r5, #4]
   1fa98:	movw	r1, #6128	; 0x17f0
   1fa9c:	movt	r1, #5
   1faa0:	bl	120b4 <dcgettext@plt>
   1faa4:	bl	36dd0 <__assert_fail@plt+0x247dc>
   1faa8:	mov	ip, r0
   1faac:	b	1fa68 <__assert_fail@plt+0xd474>
   1fab0:	strd	r4, [sp, #-16]!
   1fab4:	mov	r5, r0
   1fab8:	movw	r0, #12224	; 0x2fc0
   1fabc:	movt	r0, #5
   1fac0:	mov	r1, r5
   1fac4:	str	r6, [sp, #8]
   1fac8:	str	lr, [sp, #12]
   1facc:	bl	11f40 <strcmp@plt>
   1fad0:	cmp	r0, #0
   1fad4:	bne	1faec <__assert_fail@plt+0xd4f8>
   1fad8:	ldrd	r4, [sp]
   1fadc:	mov	r0, #1
   1fae0:	ldr	r6, [sp, #8]
   1fae4:	add	sp, sp, #12
   1fae8:	pop	{pc}		; (ldr pc, [sp], #4)
   1faec:	movw	r6, #31928	; 0x7cb8
   1faf0:	movt	r6, #6
   1faf4:	ldr	r4, [r6, #16]
   1faf8:	cmp	r4, #0
   1fafc:	beq	1fb34 <__assert_fail@plt+0xd540>
   1fb00:	mov	r0, r5
   1fb04:	ldr	r1, [r4, #12]
   1fb08:	bl	11f40 <strcmp@plt>
   1fb0c:	cmp	r0, #0
   1fb10:	beq	1fad8 <__assert_fail@plt+0xd4e4>
   1fb14:	ldr	r4, [r4, #28]
   1fb18:	cmp	r4, #0
   1fb1c:	bne	1fb00 <__assert_fail@plt+0xd50c>
   1fb20:	mov	r0, r4
   1fb24:	ldrd	r4, [sp]
   1fb28:	ldr	r6, [sp, #8]
   1fb2c:	add	sp, sp, #12
   1fb30:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb34:	mov	r0, r4
   1fb38:	bl	3b604 <__assert_fail@plt+0x29010>
   1fb3c:	mov	r3, #0
   1fb40:	mov	r4, r0
   1fb44:	str	r0, [r6, #16]
   1fb48:	cmp	r0, r3
   1fb4c:	strb	r3, [r6, #20]
   1fb50:	beq	1fad8 <__assert_fail@plt+0xd4e4>
   1fb54:	b	1fb00 <__assert_fail@plt+0xd50c>
   1fb58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fb5c:	strd	r6, [sp, #8]
   1fb60:	strd	r8, [sp, #16]
   1fb64:	mov	r9, #0
   1fb68:	strd	sl, [sp, #24]
   1fb6c:	str	lr, [sp, #32]
   1fb70:	sub	sp, sp, #124	; 0x7c
   1fb74:	str	r0, [sp, #4]
   1fb78:	mov	r0, r9
   1fb7c:	str	r9, [sp, #12]
   1fb80:	bl	3b604 <__assert_fail@plt+0x29010>
   1fb84:	subs	r8, r0, #0
   1fb88:	beq	1fc7c <__assert_fail@plt+0xd688>
   1fb8c:	movw	r7, #32364	; 0x7e6c
   1fb90:	movt	r7, #6
   1fb94:	mov	sl, r9
   1fb98:	mov	r4, r8
   1fb9c:	b	1fbd4 <__assert_fail@plt+0xd5e0>
   1fba0:	ldrd	r2, [r4, #16]
   1fba4:	mvn	r1, #0
   1fba8:	mvn	r0, #0
   1fbac:	cmp	r3, r1
   1fbb0:	cmpeq	r2, r0
   1fbb4:	beq	1fc50 <__assert_fail@plt+0xd65c>
   1fbb8:	add	r5, fp, r5
   1fbbc:	mov	sl, r6
   1fbc0:	mov	r9, fp
   1fbc4:	strd	r2, [r5, #-8]
   1fbc8:	ldr	r4, [r4, #28]
   1fbcc:	cmp	r4, #0
   1fbd0:	beq	1fc0c <__assert_fail@plt+0xd618>
   1fbd4:	add	r6, sl, #1
   1fbd8:	add	r2, sp, #12
   1fbdc:	lsl	r5, r6, #3
   1fbe0:	mov	r0, r9
   1fbe4:	mov	r1, r5
   1fbe8:	bl	266e4 <__assert_fail@plt+0x140f0>
   1fbec:	subs	fp, r0, #0
   1fbf0:	bne	1fba0 <__assert_fail@plt+0xd5ac>
   1fbf4:	mov	r0, r9
   1fbf8:	mov	r9, fp
   1fbfc:	bl	38b10 <__assert_fail@plt+0x2651c>
   1fc00:	ldr	r4, [r4, #28]
   1fc04:	cmp	r4, #0
   1fc08:	bne	1fbd4 <__assert_fail@plt+0xd5e0>
   1fc0c:	mov	r0, r8
   1fc10:	ldr	r4, [r0, #28]
   1fc14:	bl	3bf68 <__assert_fail@plt+0x29974>
   1fc18:	subs	r0, r4, #0
   1fc1c:	bne	1fc10 <__assert_fail@plt+0xd61c>
   1fc20:	cmp	fp, #0
   1fc24:	beq	1fc30 <__assert_fail@plt+0xd63c>
   1fc28:	ldr	r3, [sp, #4]
   1fc2c:	str	sl, [r3]
   1fc30:	mov	r0, r9
   1fc34:	add	sp, sp, #124	; 0x7c
   1fc38:	ldrd	r4, [sp]
   1fc3c:	ldrd	r6, [sp, #8]
   1fc40:	ldrd	r8, [sp, #16]
   1fc44:	ldrd	sl, [sp, #24]
   1fc48:	add	sp, sp, #32
   1fc4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc50:	add	r0, sp, #16
   1fc54:	bl	1c458 <__assert_fail@plt+0x9e64>
   1fc58:	add	r1, sp, #16
   1fc5c:	ldr	r0, [r4, #4]
   1fc60:	ldr	r3, [r7, #52]	; 0x34
   1fc64:	blx	r3
   1fc68:	cmp	r0, #0
   1fc6c:	bne	1fc84 <__assert_fail@plt+0xd690>
   1fc70:	ldrd	r2, [sp, #16]
   1fc74:	strd	r2, [r4, #16]
   1fc78:	b	1fbb8 <__assert_fail@plt+0xd5c4>
   1fc7c:	mov	r9, r8
   1fc80:	b	1fc30 <__assert_fail@plt+0xd63c>
   1fc84:	mov	r9, fp
   1fc88:	b	1fbc8 <__assert_fail@plt+0xd5d4>
   1fc8c:	andeq	r0, r0, r0
   1fc90:	subs	r0, r1, #0
   1fc94:	beq	1fcc8 <__assert_fail@plt+0xd6d4>
   1fc98:	ldr	r3, [r2]
   1fc9c:	ldr	r1, [r0, r3, lsl #2]
   1fca0:	cmp	r1, #0
   1fca4:	beq	1fcc4 <__assert_fail@plt+0xd6d0>
   1fca8:	add	r3, r3, #1
   1fcac:	movw	ip, #32364	; 0x7e6c
   1fcb0:	movt	ip, #6
   1fcb4:	mov	r0, #1
   1fcb8:	str	r3, [r2]
   1fcbc:	str	r1, [ip, #76]	; 0x4c
   1fcc0:	bx	lr
   1fcc4:	mov	r0, r1
   1fcc8:	bx	lr
   1fccc:	b	35b4c <__assert_fail@plt+0x23558>
   1fcd0:	movw	r0, #2756	; 0xac4
   1fcd4:	movt	r0, #5
   1fcd8:	push	{lr}		; (str lr, [sp, #-4]!)
   1fcdc:	sub	sp, sp, #12
   1fce0:	movw	r4, #32364	; 0x7e6c
   1fce4:	movt	r4, #6
   1fce8:	bl	271a8 <__assert_fail@plt+0x14bb4>
   1fcec:	mov	r2, #5
   1fcf0:	movw	r1, #13728	; 0x35a0
   1fcf4:	movt	r1, #5
   1fcf8:	mov	r0, #0
   1fcfc:	bl	120b4 <dcgettext@plt>
   1fd00:	bl	11f64 <printf@plt>
   1fd04:	movw	r0, #13748	; 0x35b4
   1fd08:	movt	r0, #5
   1fd0c:	bl	11f64 <printf@plt>
   1fd10:	ldrb	r1, [r4, #56]	; 0x38
   1fd14:	movw	r2, #13708	; 0x358c
   1fd18:	movt	r2, #5
   1fd1c:	movw	r3, #13716	; 0x3594
   1fd20:	movt	r3, #5
   1fd24:	movw	r0, #13756	; 0x35bc
   1fd28:	movt	r0, #5
   1fd2c:	cmp	r1, #0
   1fd30:	movne	r1, r2
   1fd34:	moveq	r1, r3
   1fd38:	bl	11f64 <printf@plt>
   1fd3c:	movw	r0, #13772	; 0x35cc
   1fd40:	movt	r0, #5
   1fd44:	bl	11f64 <printf@plt>
   1fd48:	bl	11f28 <is_selinux_enabled@plt>
   1fd4c:	cmp	r0, #0
   1fd50:	ble	1fd60 <__assert_fail@plt+0xd76c>
   1fd54:	movw	r0, #13792	; 0x35e0
   1fd58:	movt	r0, #5
   1fd5c:	bl	11f64 <printf@plt>
   1fd60:	mov	r3, #0
   1fd64:	add	r0, sp, #4
   1fd68:	str	r3, [sp, #4]
   1fd6c:	bl	13634 <__assert_fail@plt+0x1040>
   1fd70:	cmp	r0, #0
   1fd74:	bne	1fd98 <__assert_fail@plt+0xd7a4>
   1fd78:	ldrh	r1, [r4, #68]	; 0x44
   1fd7c:	movw	r0, #13824	; 0x3600
   1fd80:	movt	r0, #5
   1fd84:	bl	11f64 <printf@plt>
   1fd88:	mov	r0, #10
   1fd8c:	bl	12384 <putchar@plt>
   1fd90:	mov	r0, #0
   1fd94:	bl	122d0 <exit@plt>
   1fd98:	movw	r0, #13804	; 0x35ec
   1fd9c:	movt	r0, #5
   1fda0:	bl	11f64 <printf@plt>
   1fda4:	ldr	r3, [sp, #4]
   1fda8:	tst	r3, #512	; 0x200
   1fdac:	bne	1fdc0 <__assert_fail@plt+0xd7cc>
   1fdb0:	movw	r0, #13836	; 0x360c
   1fdb4:	movt	r0, #5
   1fdb8:	bl	11f64 <printf@plt>
   1fdbc:	b	1fd78 <__assert_fail@plt+0xd784>
   1fdc0:	movw	r0, #13812	; 0x35f4
   1fdc4:	movt	r0, #5
   1fdc8:	bl	11f64 <printf@plt>
   1fdcc:	b	1fdb0 <__assert_fail@plt+0xd7bc>
   1fdd0:	mov	r0, #0
   1fdd4:	str	r4, [sp, #-8]!
   1fdd8:	str	lr, [sp, #4]
   1fddc:	bl	1c22c <__assert_fail@plt+0x9c38>
   1fde0:	str	r4, [sp, #-8]!
   1fde4:	str	lr, [sp, #4]
   1fde8:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   1fdec:	mov	r3, r0
   1fdf0:	mov	r2, #1065353216	; 0x3f800000
   1fdf4:	ldr	r4, [sp]
   1fdf8:	mov	r1, #0
   1fdfc:	add	sp, sp, #4
   1fe00:	mov	r0, #1
   1fe04:	strh	r1, [r3, #18]
   1fe08:	str	r2, [r3, #28]
   1fe0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fe10:	str	r4, [sp, #-8]!
   1fe14:	str	lr, [sp, #4]
   1fe18:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   1fe1c:	mov	r3, r0
   1fe20:	mov	r2, #1
   1fe24:	ldr	r4, [sp]
   1fe28:	mov	r1, #1065353216	; 0x3f800000
   1fe2c:	add	sp, sp, #4
   1fe30:	mov	r0, r2
   1fe34:	str	r2, [r3, #16]
   1fe38:	str	r1, [r3, #28]
   1fe3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fe40:	str	r4, [sp, #-8]!
   1fe44:	str	lr, [sp, #4]
   1fe48:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   1fe4c:	movw	r3, #32364	; 0x7e6c
   1fe50:	movt	r3, #6
   1fe54:	ldr	r4, [sp]
   1fe58:	mov	r2, r0
   1fe5c:	add	sp, sp, #4
   1fe60:	ldrb	r3, [r3]
   1fe64:	cmp	r3, #0
   1fe68:	strheq	r3, [r0, #18]
   1fe6c:	mov	r3, #1
   1fe70:	mov	r0, r3
   1fe74:	strh	r3, [r2, #16]
   1fe78:	pop	{pc}		; (ldr pc, [sp], #4)
   1fe7c:	str	r4, [sp, #-8]!
   1fe80:	str	lr, [sp, #4]
   1fe84:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   1fe88:	movw	r3, #4719	; 0x126f
   1fe8c:	movt	r3, #14979	; 0x3a83
   1fe90:	ldr	r4, [sp]
   1fe94:	add	sp, sp, #4
   1fe98:	str	r3, [r0, #28]
   1fe9c:	mov	r0, #1
   1fea0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fea4:	str	r4, [sp, #-8]!
   1fea8:	str	lr, [sp, #4]
   1feac:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   1feb0:	mov	r3, r0
   1feb4:	vldr	s15, [pc, #48]	; 1feec <__assert_fail@plt+0xd8f8>
   1feb8:	movw	r2, #20916	; 0x51b4
   1febc:	movt	r2, #1
   1fec0:	mov	ip, #0
   1fec4:	ldr	r1, [r3]
   1fec8:	mov	r0, #1
   1fecc:	vldr	s14, [pc, #28]	; 1fef0 <__assert_fail@plt+0xd8fc>
   1fed0:	ldr	r4, [sp]
   1fed4:	add	sp, sp, #4
   1fed8:	cmp	r1, r2
   1fedc:	str	ip, [r3, #16]
   1fee0:	vmovne.f32	s15, s14
   1fee4:	vstr	s15, [r3, #28]
   1fee8:	pop	{pc}		; (ldr pc, [sp], #4)
   1feec:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1fef0:	svccc	0x00666666
   1fef4:	str	r4, [sp, #-8]!
   1fef8:	str	lr, [sp, #4]
   1fefc:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   1ff00:	movw	r3, #55050	; 0xd70a
   1ff04:	movt	r3, #15395	; 0x3c23
   1ff08:	ldr	r4, [sp]
   1ff0c:	add	sp, sp, #4
   1ff10:	str	r3, [r0, #28]
   1ff14:	mov	r0, #1
   1ff18:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff1c:	str	r4, [sp, #-8]!
   1ff20:	str	lr, [sp, #4]
   1ff24:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   1ff28:	mov	r2, r0
   1ff2c:	mov	r1, #1065353216	; 0x3f800000
   1ff30:	ldr	r4, [sp]
   1ff34:	movw	r0, #257	; 0x101
   1ff38:	mov	ip, #0
   1ff3c:	movw	r3, #32364	; 0x7e6c
   1ff40:	movt	r3, #6
   1ff44:	add	sp, sp, #4
   1ff48:	str	r0, [r2, #16]
   1ff4c:	mov	r0, #1
   1ff50:	strb	ip, [r3]
   1ff54:	str	r1, [r2, #28]
   1ff58:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ff60:	movw	r5, #21632	; 0x5480
   1ff64:	movt	r5, #1
   1ff68:	strd	r6, [sp, #8]
   1ff6c:	movw	r6, #22460	; 0x57bc
   1ff70:	movt	r6, #1
   1ff74:	cmp	r5, r6
   1ff78:	movw	r3, #13848	; 0x3618
   1ff7c:	movt	r3, #5
   1ff80:	movw	r7, #13840	; 0x3610
   1ff84:	movt	r7, #5
   1ff88:	movne	r7, r3
   1ff8c:	str	r8, [sp, #16]
   1ff90:	cmp	r1, #0
   1ff94:	str	lr, [sp, #20]
   1ff98:	sub	sp, sp, #8
   1ff9c:	beq	201d0 <__assert_fail@plt+0xdbdc>
   1ffa0:	ldr	r3, [r2]
   1ffa4:	ldr	r4, [r1, r3, lsl #2]
   1ffa8:	cmp	r4, #0
   1ffac:	beq	201c8 <__assert_fail@plt+0xdbd4>
   1ffb0:	add	r3, r3, #1
   1ffb4:	str	r3, [r2]
   1ffb8:	ldrb	r8, [r4]
   1ffbc:	cmp	r8, #0
   1ffc0:	beq	20254 <__assert_fail@plt+0xdc60>
   1ffc4:	mov	r2, r4
   1ffc8:	mov	r1, r5
   1ffcc:	bl	1c124 <__assert_fail@plt+0x9b30>
   1ffd0:	cmp	r5, r6
   1ffd4:	mov	r3, #0
   1ffd8:	movne	r2, #1
   1ffdc:	moveq	r2, #0
   1ffe0:	moveq	r1, #1
   1ffe4:	movne	r1, #0
   1ffe8:	strb	r1, [r0, #18]
   1ffec:	strb	r2, [r0, #19]
   1fff0:	str	r3, [r0, #28]
   1fff4:	ldrb	r6, [r4]
   1fff8:	cmp	r6, #0
   1fffc:	beq	20214 <__assert_fail@plt+0xdc20>
   20000:	vldr	s7, [pc, #628]	; 2027c <__assert_fail@plt+0xdc88>
   20004:	vldr	s8, [pc, #628]	; 20280 <__assert_fail@plt+0xdc8c>
   20008:	vldr	s9, [pc, #628]	; 20284 <__assert_fail@plt+0xdc90>
   2000c:	vldr	s10, [pc, #628]	; 20288 <__assert_fail@plt+0xdc94>
   20010:	vldr	s11, [pc, #628]	; 2028c <__assert_fail@plt+0xdc98>
   20014:	vldr	s12, [pc, #628]	; 20290 <__assert_fail@plt+0xdc9c>
   20018:	vldr	s13, [pc, #628]	; 20294 <__assert_fail@plt+0xdca0>
   2001c:	sub	r6, r6, #68	; 0x44
   20020:	cmp	r6, #47	; 0x2f
   20024:	ldrls	pc, [pc, r6, lsl #2]
   20028:	b	20208 <__assert_fail@plt+0xdc14>
   2002c:	ldrdeq	r0, [r2], -r8
   20030:	andeq	r0, r2, r8, lsl #4
   20034:	andeq	r0, r2, r8, lsl #4
   20038:	andeq	r0, r2, r8, lsl #4
   2003c:	andeq	r0, r2, r8, lsl #4
   20040:	andeq	r0, r2, r8, lsl #4
   20044:	andeq	r0, r2, r8, lsl #4
   20048:	andeq	r0, r2, r8, lsl #4
   2004c:	andeq	r0, r2, r8, lsl #4
   20050:	andeq	r0, r2, r8, lsl #4
   20054:	andeq	r0, r2, r8, lsl #4
   20058:	andeq	r0, r2, r8, lsl #4
   2005c:	andeq	r0, r2, r8, lsl #4
   20060:	andeq	r0, r2, r8, lsl #4
   20064:	andeq	r0, r2, r8, lsl #4
   20068:	andeq	r0, r2, r8, lsl #4
   2006c:	andeq	r0, r2, r8, lsl #4
   20070:	andeq	r0, r2, r8, lsl #4
   20074:	andeq	r0, r2, r8, lsl #4
   20078:	andeq	r0, r2, r8, lsl #4
   2007c:	andeq	r0, r2, r8, lsl #4
   20080:	andeq	r0, r2, r8, lsl #4
   20084:	andeq	r0, r2, r8, lsl #4
   20088:	andeq	r0, r2, r8, lsl #4
   2008c:	andeq	r0, r2, r8, lsl #4
   20090:	andeq	r0, r2, r8, lsl #4
   20094:	andeq	r0, r2, r8, lsl #4
   20098:	andeq	r0, r2, r8, lsl #4
   2009c:	andeq	r0, r2, r8, lsl #4
   200a0:	andeq	r0, r2, r8, lsl #4
   200a4:	andeq	r0, r2, r0, lsr #3
   200a8:	muleq	r2, r4, r1
   200ac:	andeq	r0, r2, r8, lsl #3
   200b0:	andeq	r0, r2, r8, lsl #4
   200b4:	andeq	r0, r2, ip, ror r1
   200b8:	andeq	r0, r2, r8, lsl #4
   200bc:	andeq	r0, r2, r8, lsl #4
   200c0:	andeq	r0, r2, r8, lsl #4
   200c4:	andeq	r0, r2, r8, lsl #4
   200c8:	andeq	r0, r2, r8, lsl #4
   200cc:	andeq	r0, r2, r0, ror r1
   200d0:	andeq	r0, r2, r8, lsl #4
   200d4:	andeq	r0, r2, r8, lsl #4
   200d8:	andeq	r0, r2, r8, lsl #4
   200dc:	andeq	r0, r2, r4, ror #2
   200e0:	andeq	r0, r2, r8, lsl #4
   200e4:	andeq	r0, r2, r8, lsl #4
   200e8:	andeq	r0, r2, ip, ror #1
   200ec:	vmov.f32	s15, s9
   200f0:	mov	r3, #6
   200f4:	add	r3, r0, r3
   200f8:	ldrb	r6, [r3, #40]	; 0x28
   200fc:	cmp	r6, #0
   20100:	bne	2021c <__assert_fail@plt+0xdc28>
   20104:	vldr	s14, [r0, #28]
   20108:	mov	r5, #1
   2010c:	vadd.f32	s15, s14, s15
   20110:	vstr	s15, [r0, #28]
   20114:	strb	r5, [r3, #40]	; 0x28
   20118:	ldrb	r3, [r4, #1]
   2011c:	cmp	r3, #0
   20120:	beq	201ac <__assert_fail@plt+0xdbb8>
   20124:	cmp	r3, #44	; 0x2c
   20128:	bne	20248 <__assert_fail@plt+0xdc54>
   2012c:	ldrb	r6, [r4, #2]
   20130:	add	r4, r4, #2
   20134:	cmp	r6, #0
   20138:	bne	2001c <__assert_fail@plt+0xda28>
   2013c:	movw	r1, #14148	; 0x3744
   20140:	movt	r1, #5
   20144:	mov	r2, #5
   20148:	mov	r0, r6
   2014c:	bl	120b4 <dcgettext@plt>
   20150:	mov	r2, r0
   20154:	mov	r3, r7
   20158:	mov	r1, r6
   2015c:	mov	r0, r5
   20160:	bl	121ec <error@plt>
   20164:	vmov.f32	s15, s10
   20168:	mov	r3, #5
   2016c:	b	200f4 <__assert_fail@plt+0xdb00>
   20170:	vmov.f32	s15, s11
   20174:	mov	r3, #4
   20178:	b	200f4 <__assert_fail@plt+0xdb00>
   2017c:	vmov.f32	s15, s12
   20180:	mov	r3, #3
   20184:	b	200f4 <__assert_fail@plt+0xdb00>
   20188:	vmov.f32	s15, s7
   2018c:	mov	r3, #2
   20190:	b	200f4 <__assert_fail@plt+0xdb00>
   20194:	vmov.f32	s15, s13
   20198:	mov	r3, #1
   2019c:	b	200f4 <__assert_fail@plt+0xdb00>
   201a0:	vmov.f32	s15, s8
   201a4:	mov	r3, #0
   201a8:	b	200f4 <__assert_fail@plt+0xdb00>
   201ac:	mov	r0, r5
   201b0:	add	sp, sp, #8
   201b4:	ldrd	r4, [sp]
   201b8:	ldrd	r6, [sp, #8]
   201bc:	ldr	r8, [sp, #16]
   201c0:	add	sp, sp, #20
   201c4:	pop	{pc}		; (ldr pc, [sp], #4)
   201c8:	mov	r0, r4
   201cc:	b	201b0 <__assert_fail@plt+0xdbbc>
   201d0:	mov	r0, r1
   201d4:	b	201b0 <__assert_fail@plt+0xdbbc>
   201d8:	movw	r1, #13908	; 0x3654
   201dc:	movt	r1, #5
   201e0:	mov	r2, #5
   201e4:	mov	r0, #0
   201e8:	bl	120b4 <dcgettext@plt>
   201ec:	ldrb	ip, [r4]
   201f0:	mov	r2, r0
   201f4:	mov	r3, r7
   201f8:	mov	r1, #0
   201fc:	mov	r0, #1
   20200:	str	ip, [sp]
   20204:	bl	121ec <error@plt>
   20208:	movw	r1, #14012	; 0x36bc
   2020c:	movt	r1, #5
   20210:	b	201e0 <__assert_fail@plt+0xdbec>
   20214:	mov	r0, #1
   20218:	b	201b0 <__assert_fail@plt+0xdbbc>
   2021c:	mov	r2, #5
   20220:	movw	r1, #14040	; 0x36d8
   20224:	movt	r1, #5
   20228:	mov	r0, #0
   2022c:	bl	120b4 <dcgettext@plt>
   20230:	mov	r2, r0
   20234:	ldrb	r3, [r4]
   20238:	mov	r1, #0
   2023c:	mov	r0, #1
   20240:	str	r7, [sp]
   20244:	bl	121ec <error@plt>
   20248:	movw	r1, #14096	; 0x3710
   2024c:	movt	r1, #5
   20250:	b	20144 <__assert_fail@plt+0xdb50>
   20254:	mov	r2, #5
   20258:	movw	r1, #13856	; 0x3620
   2025c:	movt	r1, #5
   20260:	mov	r0, r8
   20264:	bl	120b4 <dcgettext@plt>
   20268:	mov	r2, r0
   2026c:	mov	r3, r7
   20270:	mov	r1, r8
   20274:	mov	r0, #1
   20278:	bl	121ec <error@plt>
   2027c:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   20280:	bcc	1a52538 <stdout@@GLIBC_2.4+0x19eafe4>
   20284:			; <UNDEFINED> instruction: 0x378560fd
   20288:	usatcc	r7, #29, lr, asr #16
   2028c:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   20290:	svccc	0x00600000
   20294:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   20298:	cmp	r1, #0
   2029c:	beq	203cc <__assert_fail@plt+0xddd8>
   202a0:	ldr	r3, [r2]
   202a4:	strd	r4, [sp, #-16]!
   202a8:	ldr	r4, [r1, r3, lsl #2]
   202ac:	str	r6, [sp, #8]
   202b0:	str	lr, [sp, #12]
   202b4:	cmp	r4, #0
   202b8:	beq	20394 <__assert_fail@plt+0xdda0>
   202bc:	add	r3, r3, #1
   202c0:	mov	r5, r0
   202c4:	mov	r0, r4
   202c8:	str	r3, [r2]
   202cc:	bl	11f1c <getpwnam@plt>
   202d0:	mov	r6, r0
   202d4:	bl	1245c <endpwent@plt>
   202d8:	cmp	r6, #0
   202dc:	beq	20320 <__assert_fail@plt+0xdd2c>
   202e0:	ldr	r6, [r6, #8]
   202e4:	mov	r1, r4
   202e8:	mov	r0, r5
   202ec:	bl	1c170 <__assert_fail@plt+0x9b7c>
   202f0:	vldr	s15, [pc, #248]	; 203f0 <__assert_fail@plt+0xddfc>
   202f4:	cmp	r6, #100	; 0x64
   202f8:	mov	r3, r0
   202fc:	mov	r0, #1
   20300:	vldr	s14, [pc, #236]	; 203f4 <__assert_fail@plt+0xde00>
   20304:	str	r6, [r3, #40]	; 0x28
   20308:	ldrd	r4, [sp]
   2030c:	ldr	r6, [sp, #8]
   20310:	add	sp, sp, #12
   20314:	vmovcs.f32	s15, s14
   20318:	vstr	s15, [r3, #28]
   2031c:	pop	{pc}		; (ldr pc, [sp], #4)
   20320:	movw	r1, #14228	; 0x3794
   20324:	movt	r1, #5
   20328:	mov	r0, r4
   2032c:	bl	125e8 <strspn@plt>
   20330:	cmp	r0, #0
   20334:	beq	20344 <__assert_fail@plt+0xdd50>
   20338:	ldrb	r3, [r4, r0]
   2033c:	cmp	r3, #0
   20340:	beq	203d4 <__assert_fail@plt+0xdde0>
   20344:	ldrb	r5, [r4]
   20348:	cmp	r5, #0
   2034c:	beq	203a8 <__assert_fail@plt+0xddb4>
   20350:	mov	r2, #5
   20354:	movw	r1, #14240	; 0x37a0
   20358:	movt	r1, #5
   2035c:	mov	r0, #0
   20360:	bl	120b4 <dcgettext@plt>
   20364:	movw	r3, #32364	; 0x7e6c
   20368:	movt	r3, #6
   2036c:	mov	r5, r0
   20370:	mov	r2, r4
   20374:	ldr	r1, [r3, #72]	; 0x48
   20378:	mov	r0, #0
   2037c:	bl	3431c <__assert_fail@plt+0x21d28>
   20380:	mov	r3, r0
   20384:	mov	r2, r5
   20388:	mov	r1, #0
   2038c:	mov	r0, #1
   20390:	bl	121ec <error@plt>
   20394:	mov	r0, r4
   20398:	ldrd	r4, [sp]
   2039c:	ldr	r6, [sp, #8]
   203a0:	add	sp, sp, #12
   203a4:	pop	{pc}		; (ldr pc, [sp], #4)
   203a8:	mov	r2, #5
   203ac:	movw	r1, #14276	; 0x37c4
   203b0:	movt	r1, #5
   203b4:	mov	r0, r5
   203b8:	bl	120b4 <dcgettext@plt>
   203bc:	mov	r2, r0
   203c0:	mov	r1, r5
   203c4:	mov	r0, #1
   203c8:	bl	121ec <error@plt>
   203cc:	mov	r0, r1
   203d0:	bx	lr
   203d4:	movw	r3, #32364	; 0x7e6c
   203d8:	movt	r3, #6
   203dc:	mov	r0, r4
   203e0:	ldr	r1, [r3, #72]	; 0x48
   203e4:	bl	280a4 <__assert_fail@plt+0x15ab0>
   203e8:	mov	r6, r0
   203ec:	b	202e4 <__assert_fail@plt+0xdcf0>
   203f0:	svccc	0x007d70a4
   203f4:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   203f8:	mov	r1, #0
   203fc:	str	r4, [sp, #-8]!
   20400:	str	lr, [sp, #4]
   20404:	bl	1c170 <__assert_fail@plt+0x9b7c>
   20408:	movw	r3, #46871	; 0xb717
   2040c:	movt	r3, #14545	; 0x38d1
   20410:	ldr	r4, [sp]
   20414:	add	sp, sp, #4
   20418:	str	r3, [r0, #28]
   2041c:	mov	r0, #1
   20420:	pop	{pc}		; (ldr pc, [sp], #4)
   20424:	cmp	r1, #0
   20428:	beq	2049c <__assert_fail@plt+0xdea8>
   2042c:	ldr	r3, [r2]
   20430:	strd	r4, [sp, #-16]!
   20434:	ldr	r4, [r1, r3, lsl #2]
   20438:	str	r6, [sp, #8]
   2043c:	str	lr, [sp, #12]
   20440:	cmp	r4, #0
   20444:	moveq	r0, r4
   20448:	beq	2048c <__assert_fail@plt+0xde98>
   2044c:	add	r3, r3, #1
   20450:	mov	r1, r4
   20454:	str	r3, [r2]
   20458:	bl	1c170 <__assert_fail@plt+0x9b7c>
   2045c:	mov	r5, r0
   20460:	movw	r1, #14320	; 0x37f0
   20464:	movt	r1, #5
   20468:	mov	r0, r4
   2046c:	str	r4, [r5, #40]	; 0x28
   20470:	bl	12528 <strpbrk@plt>
   20474:	vldr	s15, [pc, #40]	; 204a4 <__assert_fail@plt+0xdeb0>
   20478:	cmp	r0, #0
   2047c:	mov	r0, #1
   20480:	vldr	s14, [pc, #32]	; 204a8 <__assert_fail@plt+0xdeb4>
   20484:	vmoveq.f32	s15, s14
   20488:	vstr	s15, [r5, #28]
   2048c:	ldrd	r4, [sp]
   20490:	ldr	r6, [sp, #8]
   20494:	add	sp, sp, #12
   20498:	pop	{pc}		; (ldr pc, [sp], #4)
   2049c:	mov	r0, r1
   204a0:	bx	lr
   204a4:	stccc	7, cr13, [r3, #44]!	; 0x2c
   204a8:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   204ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   204b0:	subs	r5, r1, #0
   204b4:	strd	r6, [sp, #8]
   204b8:	strd	r8, [sp, #16]
   204bc:	strd	sl, [sp, #24]
   204c0:	str	lr, [sp, #32]
   204c4:	sub	sp, sp, #28
   204c8:	beq	207d0 <__assert_fail@plt+0xe1dc>
   204cc:	ldr	r3, [r2]
   204d0:	ldr	r4, [r5, r3, lsl #2]
   204d4:	cmp	r4, #0
   204d8:	beq	207d8 <__assert_fail@plt+0xe1e4>
   204dc:	mov	r7, r0
   204e0:	mov	r0, r4
   204e4:	mov	r6, r2
   204e8:	bl	12300 <strlen@plt>
   204ec:	subs	r8, r0, #0
   204f0:	beq	2084c <__assert_fail@plt+0xe258>
   204f4:	sub	r8, r8, #1
   204f8:	ldrb	sl, [r4, r8]
   204fc:	sub	r3, sl, #48	; 0x30
   20500:	cmp	r3, #71	; 0x47
   20504:	ldrls	pc, [pc, r3, lsl #2]
   20508:	b	207e0 <__assert_fail@plt+0xe1ec>
   2050c:	andeq	r0, r2, r0, lsl r7
   20510:	andeq	r0, r2, r0, lsl r7
   20514:	andeq	r0, r2, r0, lsl r7
   20518:	andeq	r0, r2, r0, lsl r7
   2051c:	andeq	r0, r2, r0, lsl r7
   20520:	andeq	r0, r2, r0, lsl r7
   20524:	andeq	r0, r2, r0, lsl r7
   20528:	andeq	r0, r2, r0, lsl r7
   2052c:	andeq	r0, r2, r0, lsl r7
   20530:	andeq	r0, r2, r0, lsl r7
   20534:	andeq	r0, r2, r0, ror #15
   20538:	andeq	r0, r2, r0, ror #15
   2053c:	andeq	r0, r2, r0, ror #15
   20540:	andeq	r0, r2, r0, ror #15
   20544:	andeq	r0, r2, r0, ror #15
   20548:	andeq	r0, r2, r0, ror #15
   2054c:	andeq	r0, r2, r0, ror #15
   20550:	andeq	r0, r2, r0, ror #15
   20554:	andeq	r0, r2, r0, ror #15
   20558:	andeq	r0, r2, r0, ror #15
   2055c:	andeq	r0, r2, r0, ror #15
   20560:	andeq	r0, r2, r0, ror #15
   20564:	andeq	r0, r2, r0, ror #15
   20568:	andeq	r0, r2, r4, lsl #15
   2056c:	andeq	r0, r2, r0, ror #15
   20570:	andeq	r0, r2, r0, ror #15
   20574:	andeq	r0, r2, r0, ror #15
   20578:	andeq	r0, r2, r0, ror #15
   2057c:	andeq	r0, r2, r0, ror #15
   20580:	andeq	r0, r2, r4, lsr #14
   20584:	andeq	r0, r2, r0, ror #15
   20588:	andeq	r0, r2, r0, ror #15
   2058c:	andeq	r0, r2, r0, ror #15
   20590:	andeq	r0, r2, r0, ror #15
   20594:	andeq	r0, r2, r0, ror #15
   20598:	andeq	r0, r2, r0, ror #15
   2059c:	andeq	r0, r2, r0, ror #15
   205a0:	andeq	r0, r2, r0, ror #15
   205a4:	andeq	r0, r2, r0, ror #15
   205a8:	andeq	r0, r2, r0, ror #15
   205ac:	andeq	r0, r2, r0, ror #15
   205b0:	andeq	r0, r2, r0, ror #15
   205b4:	andeq	r0, r2, r0, ror #15
   205b8:	andeq	r0, r2, r0, ror #15
   205bc:	andeq	r0, r2, r0, ror #15
   205c0:	andeq	r0, r2, r0, ror #15
   205c4:	andeq	r0, r2, r0, ror #15
   205c8:	andeq	r0, r2, r0, ror #15
   205cc:	andeq	r0, r2, r0, ror #15
   205d0:	andeq	r0, r2, r0, ror #15
   205d4:	andeq	r0, r2, ip, lsr r7
   205d8:	andeq	r0, r2, r4, asr r7
   205dc:	andeq	r0, r2, r0, ror #15
   205e0:	andeq	r0, r2, r0, ror #15
   205e4:	andeq	r0, r2, r0, ror #15
   205e8:	andeq	r0, r2, r0, ror #15
   205ec:	andeq	r0, r2, r0, ror #15
   205f0:	andeq	r0, r2, r0, ror #15
   205f4:	andeq	r0, r2, r0, ror #15
   205f8:	andeq	r0, r2, ip, ror #14
   205fc:	andeq	r0, r2, r0, ror #15
   20600:	andeq	r0, r2, r0, ror #15
   20604:	andeq	r0, r2, r0, ror #15
   20608:	andeq	r0, r2, r0, ror #15
   2060c:	andeq	r0, r2, r0, ror #15
   20610:	andeq	r0, r2, r0, ror #15
   20614:	andeq	r0, r2, r0, ror #15
   20618:	andeq	r0, r2, r0, ror #15
   2061c:	andeq	r0, r2, r0, ror #15
   20620:	andeq	r0, r2, r0, ror #15
   20624:	andeq	r0, r2, r0, ror #15
   20628:	andeq	r0, r2, ip, lsr #12
   2062c:	mov	r3, #0
   20630:	mov	r9, #2
   20634:	mov	r5, r3
   20638:	mov	fp, r9
   2063c:	strb	r3, [r4, r8]
   20640:	ldrb	r3, [r4]
   20644:	cmp	r3, #43	; 0x2b
   20648:	beq	207c4 <__assert_fail@plt+0xe1d0>
   2064c:	cmp	r3, #45	; 0x2d
   20650:	movne	r0, r4
   20654:	movne	r8, #2
   20658:	bne	20664 <__assert_fail@plt+0xe070>
   2065c:	add	r0, r4, #1
   20660:	mov	r8, #1
   20664:	movw	r2, #9500	; 0x251c
   20668:	movt	r2, #5
   2066c:	add	r1, sp, #12
   20670:	add	r3, sp, #16
   20674:	str	r2, [sp]
   20678:	mov	r2, #10
   2067c:	bl	37528 <__assert_fail@plt+0x24f34>
   20680:	cmp	r0, #0
   20684:	bne	20810 <__assert_fail@plt+0xe21c>
   20688:	mov	r1, r4
   2068c:	mov	r0, r7
   20690:	bl	1c170 <__assert_fail@plt+0x9b7c>
   20694:	ldr	r2, [sp, #16]
   20698:	mov	r3, #1
   2069c:	cmp	r8, #0
   206a0:	ldr	r1, [sp, #20]
   206a4:	strh	r3, [r0, #18]
   206a8:	str	r8, [r0, #40]	; 0x28
   206ac:	str	fp, [r0, #44]	; 0x2c
   206b0:	str	r2, [r0, #48]	; 0x30
   206b4:	str	r1, [r0, #52]	; 0x34
   206b8:	bne	2079c <__assert_fail@plt+0xe1a8>
   206bc:	vldr	s15, [pc, #424]	; 2086c <__assert_fail@plt+0xe278>
   206c0:	mul	r5, r2, r5
   206c4:	umull	r2, r3, r2, r9
   206c8:	vldr	s14, [pc, #416]	; 20870 <__assert_fail@plt+0xe27c>
   206cc:	mla	r9, r9, r1, r5
   206d0:	add	r3, r9, r3
   206d4:	cmp	r3, #0
   206d8:	cmpeq	r2, #20480	; 0x5000
   206dc:	vmovls.f32	s15, s14
   206e0:	vstr	s15, [r0, #28]
   206e4:	ldr	r3, [r6]
   206e8:	mov	r0, #1
   206ec:	add	r3, r3, r0
   206f0:	str	r3, [r6]
   206f4:	add	sp, sp, #28
   206f8:	ldrd	r4, [sp]
   206fc:	ldrd	r6, [sp, #8]
   20700:	ldrd	r8, [sp, #16]
   20704:	ldrd	sl, [sp, #24]
   20708:	add	sp, sp, #32
   2070c:	pop	{pc}		; (ldr pc, [sp], #4)
   20710:	mov	r9, #512	; 0x200
   20714:	mov	r5, #0
   20718:	mov	fp, r9
   2071c:	mov	sl, r5
   20720:	b	20640 <__assert_fail@plt+0xe04c>
   20724:	mov	r3, #0
   20728:	mov	r9, #1048576	; 0x100000
   2072c:	mov	r5, r3
   20730:	mov	fp, r9
   20734:	strb	r3, [r4, r8]
   20738:	b	20640 <__assert_fail@plt+0xe04c>
   2073c:	mov	r3, #0
   20740:	mov	r9, #512	; 0x200
   20744:	mov	r5, r3
   20748:	mov	fp, r9
   2074c:	strb	r3, [r4, r8]
   20750:	b	20640 <__assert_fail@plt+0xe04c>
   20754:	mov	r3, #0
   20758:	mov	r9, #1
   2075c:	mov	r5, r3
   20760:	mov	fp, r9
   20764:	strb	r3, [r4, r8]
   20768:	b	20640 <__assert_fail@plt+0xe04c>
   2076c:	mov	r3, #0
   20770:	mov	r9, #1024	; 0x400
   20774:	mov	r5, r3
   20778:	mov	fp, r9
   2077c:	strb	r3, [r4, r8]
   20780:	b	20640 <__assert_fail@plt+0xe04c>
   20784:	mov	r3, #0
   20788:	mov	r9, #1073741824	; 0x40000000
   2078c:	mov	r5, r3
   20790:	mov	fp, r9
   20794:	strb	r3, [r4, r8]
   20798:	b	20640 <__assert_fail@plt+0xe04c>
   2079c:	cmp	r8, #1
   207a0:	movwne	r3, #55050	; 0xd70a
   207a4:	movtne	r3, #15395	; 0x3c23
   207a8:	strne	r3, [r0, #28]
   207ac:	bne	206e4 <__assert_fail@plt+0xe0f0>
   207b0:	mul	r5, r2, r5
   207b4:	vldr	s15, [pc, #180]	; 20870 <__assert_fail@plt+0xe27c>
   207b8:	umull	r2, r3, r2, r9
   207bc:	vldr	s14, [pc, #168]	; 2086c <__assert_fail@plt+0xe278>
   207c0:	b	206cc <__assert_fail@plt+0xe0d8>
   207c4:	add	r0, r4, #1
   207c8:	mov	r8, #0
   207cc:	b	20664 <__assert_fail@plt+0xe070>
   207d0:	mov	r0, r5
   207d4:	b	206f4 <__assert_fail@plt+0xe100>
   207d8:	mov	r0, r4
   207dc:	b	206f4 <__assert_fail@plt+0xe100>
   207e0:	mov	r2, #5
   207e4:	movw	r1, #14356	; 0x3814
   207e8:	movt	r1, #5
   207ec:	mov	r0, #0
   207f0:	bl	120b4 <dcgettext@plt>
   207f4:	ldr	r3, [r6]
   207f8:	mov	r2, r0
   207fc:	mov	r1, #0
   20800:	mov	r0, #1
   20804:	ldr	r3, [r5, r3, lsl #2]
   20808:	ldrb	r3, [r3, r8]
   2080c:	bl	121ec <error@plt>
   20810:	mov	r5, #0
   20814:	mov	r2, #5
   20818:	strb	sl, [sp, #12]
   2081c:	movw	r1, #14380	; 0x382c
   20820:	movt	r1, #5
   20824:	mov	r0, r5
   20828:	strb	r5, [sp, #13]
   2082c:	bl	120b4 <dcgettext@plt>
   20830:	add	r3, sp, #12
   20834:	mov	r2, r0
   20838:	mov	r1, r5
   2083c:	mov	r0, #1
   20840:	str	r3, [sp]
   20844:	mov	r3, r4
   20848:	bl	121ec <error@plt>
   2084c:	mov	r2, #5
   20850:	movw	r1, #14324	; 0x37f4
   20854:	movt	r1, #5
   20858:	bl	120b4 <dcgettext@plt>
   2085c:	mov	r2, r0
   20860:	mov	r1, r8
   20864:	mov	r0, #1
   20868:	bl	121ec <error@plt>
   2086c:	stclcc	12, cr12, [ip, #820]	; 0x334
   20870:	svccc	0x00666666
   20874:	strd	r4, [sp, #-28]!	; 0xffffffe4
   20878:	mov	r4, r1
   2087c:	mov	r5, r0
   20880:	strd	r6, [sp, #8]
   20884:	mov	r6, r2
   20888:	strd	r8, [sp, #16]
   2088c:	str	lr, [sp, #24]
   20890:	sub	sp, sp, #212	; 0xd4
   20894:	mov	r0, sp
   20898:	bl	1c458 <__assert_fail@plt+0x9e64>
   2089c:	cmp	r4, #0
   208a0:	beq	20980 <__assert_fail@plt+0xe38c>
   208a4:	ldr	r3, [r6]
   208a8:	ldr	r4, [r4, r3, lsl #2]
   208ac:	cmp	r4, #0
   208b0:	beq	20980 <__assert_fail@plt+0xe38c>
   208b4:	add	r3, r3, #1
   208b8:	movw	r7, #32364	; 0x7e6c
   208bc:	movt	r7, #6
   208c0:	mov	r1, sp
   208c4:	mov	r0, r4
   208c8:	str	r3, [r6]
   208cc:	ldr	r3, [r7, #52]	; 0x34
   208d0:	blx	r3
   208d4:	subs	r6, r0, #0
   208d8:	bne	20a2c <__assert_fail@plt+0xe438>
   208dc:	add	r0, sp, #104	; 0x68
   208e0:	bl	1c458 <__assert_fail@plt+0x9e64>
   208e4:	ldr	r3, [r7, #48]	; 0x30
   208e8:	cmp	r3, #0
   208ec:	bne	20918 <__assert_fail@plt+0xe324>
   208f0:	ldrb	r3, [r7, #56]	; 0x38
   208f4:	cmp	r3, #0
   208f8:	bne	20914 <__assert_fail@plt+0xe320>
   208fc:	ldr	r3, [sp, #16]
   20900:	and	r3, r3, #61440	; 0xf000
   20904:	cmp	r3, #40960	; 0xa000
   20908:	bne	20918 <__assert_fail@plt+0xe324>
   2090c:	mvn	r6, #1
   20910:	b	2092c <__assert_fail@plt+0xe338>
   20914:	mov	r6, #32768	; 0x8000
   20918:	mov	r1, r6
   2091c:	mov	r0, r4
   20920:	bl	26f18 <__assert_fail@plt+0x14924>
   20924:	subs	r6, r0, #0
   20928:	bge	20988 <__assert_fail@plt+0xe394>
   2092c:	mov	r1, r4
   20930:	mov	r0, r5
   20934:	bl	1c170 <__assert_fail@plt+0x9b7c>
   20938:	ldrd	r2, [sp]
   2093c:	mov	r4, #1
   20940:	mov	r1, r0
   20944:	movw	ip, #55050	; 0xd70a
   20948:	movt	ip, #15395	; 0x3c23
   2094c:	ldrd	r8, [sp, #96]	; 0x60
   20950:	mov	r0, r4
   20954:	strh	r4, [r1, #18]
   20958:	str	ip, [r1, #28]
   2095c:	strd	r8, [r1, #40]	; 0x28
   20960:	strd	r2, [r1, #48]	; 0x30
   20964:	str	r6, [r1, #56]	; 0x38
   20968:	add	sp, sp, #212	; 0xd4
   2096c:	ldrd	r4, [sp]
   20970:	ldrd	r6, [sp, #8]
   20974:	ldrd	r8, [sp, #16]
   20978:	add	sp, sp, #24
   2097c:	pop	{pc}		; (ldr pc, [sp], #4)
   20980:	mov	r0, r4
   20984:	b	20968 <__assert_fail@plt+0xe374>
   20988:	add	r2, sp, #104	; 0x68
   2098c:	mov	r1, r6
   20990:	mov	r0, #3
   20994:	bl	1215c <__fxstat64@plt>
   20998:	cmp	r0, #0
   2099c:	bne	20a2c <__assert_fail@plt+0xe438>
   209a0:	mov	r1, sp
   209a4:	mov	r0, r4
   209a8:	ldr	r3, [r7, #52]	; 0x34
   209ac:	blx	r3
   209b0:	cmp	r0, #0
   209b4:	bne	20a2c <__assert_fail@plt+0xe438>
   209b8:	ldr	r3, [r7, #48]	; 0x30
   209bc:	cmp	r3, #0
   209c0:	bne	20a18 <__assert_fail@plt+0xe424>
   209c4:	ldrb	r3, [r7, #56]	; 0x38
   209c8:	cmp	r3, #0
   209cc:	bne	20a18 <__assert_fail@plt+0xe424>
   209d0:	ldr	r3, [sp, #16]
   209d4:	and	r3, r3, #61440	; 0xf000
   209d8:	cmp	r3, #40960	; 0xa000
   209dc:	beq	20a08 <__assert_fail@plt+0xe414>
   209e0:	ldrd	r0, [sp]
   209e4:	ldrd	r2, [sp, #104]	; 0x68
   209e8:	cmp	r1, r3
   209ec:	cmpeq	r0, r2
   209f0:	bne	20a08 <__assert_fail@plt+0xe414>
   209f4:	ldrd	r0, [sp, #96]	; 0x60
   209f8:	ldrd	r2, [sp, #200]	; 0xc8
   209fc:	cmp	r1, r3
   20a00:	cmpeq	r0, r2
   20a04:	beq	2092c <__assert_fail@plt+0xe338>
   20a08:	mov	r0, r6
   20a0c:	mvn	r6, #0
   20a10:	bl	125ac <close@plt>
   20a14:	b	2092c <__assert_fail@plt+0xe338>
   20a18:	add	r1, sp, #104	; 0x68
   20a1c:	mov	r0, sp
   20a20:	mov	r2, #104	; 0x68
   20a24:	bl	12024 <memcpy@plt>
   20a28:	b	2092c <__assert_fail@plt+0xe338>
   20a2c:	bl	12348 <__errno_location@plt>
   20a30:	mov	r1, r4
   20a34:	ldr	r0, [r0]
   20a38:	bl	1d778 <__assert_fail@plt+0xb184>
   20a3c:	mov	r3, #0
   20a40:	strd	r4, [sp, #-16]!
   20a44:	mov	r4, r1
   20a48:	mov	r5, r0
   20a4c:	mov	r0, r3
   20a50:	str	r6, [sp, #8]
   20a54:	str	lr, [sp, #12]
   20a58:	str	r3, [r1]
   20a5c:	bl	33bac <__assert_fail@plt+0x215b8>
   20a60:	movw	r1, #14416	; 0x3850
   20a64:	movt	r1, #5
   20a68:	str	r0, [r4, #16]
   20a6c:	mov	r0, r5
   20a70:	bl	11f40 <strcmp@plt>
   20a74:	cmp	r0, #0
   20a78:	beq	20b10 <__assert_fail@plt+0xe51c>
   20a7c:	movw	r1, #14444	; 0x386c
   20a80:	movt	r1, #5
   20a84:	mov	r0, r5
   20a88:	bl	11f40 <strcmp@plt>
   20a8c:	cmp	r0, #0
   20a90:	beq	20ae4 <__assert_fail@plt+0xe4f0>
   20a94:	movw	r3, #32320	; 0x7e40
   20a98:	movt	r3, #6
   20a9c:	mov	r1, r5
   20aa0:	ldr	r0, [r3, #36]	; 0x24
   20aa4:	bl	1da3c <__assert_fail@plt+0xb448>
   20aa8:	cmp	r0, #0
   20aac:	stmib	r4, {r0, r5}
   20ab0:	beq	20b28 <__assert_fail@plt+0xe534>
   20ab4:	bl	123c0 <fileno@plt>
   20ab8:	cmn	r0, #1
   20abc:	moveq	r0, #0
   20ac0:	beq	20ad0 <__assert_fail@plt+0xe4dc>
   20ac4:	bl	12564 <isatty@plt>
   20ac8:	adds	r0, r0, #0
   20acc:	movne	r0, #1
   20ad0:	ldr	r6, [sp, #8]
   20ad4:	strb	r0, [r4, #12]
   20ad8:	ldrd	r4, [sp]
   20adc:	add	sp, sp, #12
   20ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   20ae4:	movw	r3, #30036	; 0x7554
   20ae8:	movt	r3, #6
   20aec:	ldr	r3, [r3]
   20af0:	movw	r1, #9716	; 0x25f4
   20af4:	movt	r1, #5
   20af8:	mov	r2, #5
   20afc:	str	r3, [r4, #4]
   20b00:	bl	120b4 <dcgettext@plt>
   20b04:	str	r0, [r4, #8]
   20b08:	ldr	r0, [r4, #4]
   20b0c:	b	20ab4 <__assert_fail@plt+0xe4c0>
   20b10:	movw	r3, #30024	; 0x7548
   20b14:	movt	r3, #6
   20b18:	movw	r1, #14428	; 0x385c
   20b1c:	movt	r1, #5
   20b20:	ldr	r3, [r3]
   20b24:	b	20af8 <__assert_fail@plt+0xe504>
   20b28:	bl	12348 <__errno_location@plt>
   20b2c:	mov	r1, r5
   20b30:	ldr	r0, [r0]
   20b34:	bl	1d834 <__assert_fail@plt+0xb240>
   20b38:	cmp	r1, #0
   20b3c:	beq	20bb0 <__assert_fail@plt+0xe5bc>
   20b40:	strd	r4, [sp, #-20]!	; 0xffffffec
   20b44:	strd	r6, [sp, #8]
   20b48:	ldr	r7, [r2]
   20b4c:	str	lr, [sp, #16]
   20b50:	sub	sp, sp, #28
   20b54:	ldr	r4, [r1, r7, lsl #2]
   20b58:	cmp	r4, #0
   20b5c:	moveq	r0, r4
   20b60:	beq	20b9c <__assert_fail@plt+0xe5a8>
   20b64:	add	r3, r7, #1
   20b68:	mov	r6, r0
   20b6c:	add	r1, sp, #4
   20b70:	movw	r0, #14444	; 0x386c
   20b74:	movt	r0, #5
   20b78:	str	r3, [r2]
   20b7c:	mov	r5, r2
   20b80:	bl	20a3c <__assert_fail@plt+0xe448>
   20b84:	mov	r2, r4
   20b88:	mov	r1, r6
   20b8c:	add	r0, sp, #4
   20b90:	bl	1f3e8 <__assert_fail@plt+0xcdf4>
   20b94:	cmp	r0, #0
   20b98:	streq	r7, [r5]
   20b9c:	add	sp, sp, #28
   20ba0:	ldrd	r4, [sp]
   20ba4:	ldrd	r6, [sp, #8]
   20ba8:	add	sp, sp, #16
   20bac:	pop	{pc}		; (ldr pc, [sp], #4)
   20bb0:	mov	r0, r1
   20bb4:	bx	lr
   20bb8:	str	r4, [sp, #-8]!
   20bbc:	str	lr, [sp, #4]
   20bc0:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   20bc4:	mov	r3, r0
   20bc8:	movw	r2, #257	; 0x101
   20bcc:	add	r1, r0, #40	; 0x28
   20bd0:	movw	r0, #14444	; 0x386c
   20bd4:	movt	r0, #5
   20bd8:	str	r2, [r3, #16]
   20bdc:	bl	20a3c <__assert_fail@plt+0xe448>
   20be0:	ldr	r4, [sp]
   20be4:	add	sp, sp, #4
   20be8:	mov	r0, #1
   20bec:	pop	{pc}		; (ldr pc, [sp], #4)
   20bf0:	cmp	r1, #0
   20bf4:	beq	20c5c <__assert_fail@plt+0xe668>
   20bf8:	ldr	r3, [r2]
   20bfc:	strd	r4, [sp, #-16]!
   20c00:	ldr	r4, [r1, r3, lsl #2]
   20c04:	str	r6, [sp, #8]
   20c08:	str	lr, [sp, #12]
   20c0c:	cmp	r4, #0
   20c10:	moveq	r0, r4
   20c14:	beq	20c4c <__assert_fail@plt+0xe658>
   20c18:	add	r3, r3, #1
   20c1c:	mov	r1, r4
   20c20:	str	r3, [r2]
   20c24:	bl	1c170 <__assert_fail@plt+0x9b7c>
   20c28:	mov	r5, r0
   20c2c:	mov	r0, r4
   20c30:	add	r1, r5, #40	; 0x28
   20c34:	bl	20a3c <__assert_fail@plt+0xe448>
   20c38:	mov	r3, #1065353216	; 0x3f800000
   20c3c:	movw	r2, #257	; 0x101
   20c40:	mov	r0, #1
   20c44:	str	r2, [r5, #16]
   20c48:	str	r3, [r5, #28]
   20c4c:	ldrd	r4, [sp]
   20c50:	ldr	r6, [sp, #8]
   20c54:	add	sp, sp, #12
   20c58:	pop	{pc}		; (ldr pc, [sp], #4)
   20c5c:	mov	r0, r1
   20c60:	bx	lr
   20c64:	cmp	r1, #0
   20c68:	beq	20ccc <__assert_fail@plt+0xe6d8>
   20c6c:	ldr	r3, [r2]
   20c70:	strd	r4, [sp, #-16]!
   20c74:	ldr	r4, [r1, r3, lsl #2]
   20c78:	str	r6, [sp, #8]
   20c7c:	str	lr, [sp, #12]
   20c80:	cmp	r4, #0
   20c84:	moveq	r0, r4
   20c88:	beq	20cbc <__assert_fail@plt+0xe6c8>
   20c8c:	add	r3, r3, #1
   20c90:	str	r3, [r2]
   20c94:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   20c98:	mov	r5, r0
   20c9c:	mov	r0, r4
   20ca0:	add	r1, r5, #40	; 0x28
   20ca4:	bl	20a3c <__assert_fail@plt+0xe448>
   20ca8:	mov	r3, #1065353216	; 0x3f800000
   20cac:	movw	r2, #257	; 0x101
   20cb0:	mov	r0, #1
   20cb4:	strh	r2, [r5, #16]
   20cb8:	str	r3, [r5, #28]
   20cbc:	ldrd	r4, [sp]
   20cc0:	ldr	r6, [sp, #8]
   20cc4:	add	sp, sp, #12
   20cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   20ccc:	mov	r0, r1
   20cd0:	bx	lr
   20cd4:	cmp	r1, #0
   20cd8:	strd	r4, [sp, #-20]!	; 0xffffffec
   20cdc:	mov	r5, r2
   20ce0:	ldr	r4, [r2]
   20ce4:	strd	r6, [sp, #8]
   20ce8:	str	lr, [sp, #16]
   20cec:	sub	sp, sp, #28
   20cf0:	beq	20d4c <__assert_fail@plt+0xe758>
   20cf4:	mov	r7, r0
   20cf8:	ldr	r0, [r1, r4, lsl #2]
   20cfc:	lsl	r3, r4, #2
   20d00:	cmp	r0, #0
   20d04:	beq	20d4c <__assert_fail@plt+0xe758>
   20d08:	add	r1, r1, r3
   20d0c:	add	r3, r4, #1
   20d10:	ldr	r6, [r1, #4]
   20d14:	str	r3, [r2]
   20d18:	cmp	r6, #0
   20d1c:	beq	20d4c <__assert_fail@plt+0xe758>
   20d20:	add	r4, r4, #2
   20d24:	add	r1, sp, #4
   20d28:	str	r4, [r2]
   20d2c:	bl	20a3c <__assert_fail@plt+0xe448>
   20d30:	add	r0, sp, #4
   20d34:	mov	r2, r6
   20d38:	ldr	r4, [r5]
   20d3c:	mov	r1, r7
   20d40:	bl	1f3e8 <__assert_fail@plt+0xcdf4>
   20d44:	cmp	r0, #0
   20d48:	bne	20d54 <__assert_fail@plt+0xe760>
   20d4c:	mov	r0, #0
   20d50:	str	r4, [r5]
   20d54:	add	sp, sp, #28
   20d58:	ldrd	r4, [sp]
   20d5c:	ldrd	r6, [sp, #8]
   20d60:	add	sp, sp, #16
   20d64:	pop	{pc}		; (ldr pc, [sp], #4)
   20d68:	cmp	r1, #0
   20d6c:	beq	20dd4 <__assert_fail@plt+0xe7e0>
   20d70:	ldr	r3, [r2]
   20d74:	strd	r4, [sp, #-16]!
   20d78:	ldr	r4, [r1, r3, lsl #2]
   20d7c:	str	r6, [sp, #8]
   20d80:	str	lr, [sp, #12]
   20d84:	cmp	r4, #0
   20d88:	moveq	r0, r4
   20d8c:	beq	20dc4 <__assert_fail@plt+0xe7d0>
   20d90:	add	r3, r3, #1
   20d94:	mov	r1, r4
   20d98:	str	r3, [r2]
   20d9c:	bl	1c170 <__assert_fail@plt+0x9b7c>
   20da0:	mov	r5, r0
   20da4:	mov	r0, r4
   20da8:	add	r1, r5, #40	; 0x28
   20dac:	bl	20a3c <__assert_fail@plt+0xe448>
   20db0:	mov	r3, #1065353216	; 0x3f800000
   20db4:	movw	r2, #257	; 0x101
   20db8:	mov	r0, #1
   20dbc:	str	r2, [r5, #16]
   20dc0:	str	r3, [r5, #28]
   20dc4:	ldrd	r4, [sp]
   20dc8:	ldr	r6, [sp, #8]
   20dcc:	add	sp, sp, #12
   20dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   20dd4:	mov	r0, r1
   20dd8:	bx	lr
   20ddc:	cmp	r1, #0
   20de0:	beq	20f40 <__assert_fail@plt+0xe94c>
   20de4:	ldr	r3, [r2]
   20de8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20dec:	ldr	r4, [r1, r3, lsl #2]
   20df0:	strd	r6, [sp, #8]
   20df4:	strd	r8, [sp, #16]
   20df8:	strd	sl, [sp, #24]
   20dfc:	str	lr, [sp, #32]
   20e00:	sub	sp, sp, #20
   20e04:	cmp	r4, #0
   20e08:	beq	20f38 <__assert_fail@plt+0xe944>
   20e0c:	add	r3, r3, #1
   20e10:	str	r3, [r2]
   20e14:	ldrb	r3, [r4]
   20e18:	cmp	r3, #45	; 0x2d
   20e1c:	beq	20f24 <__assert_fail@plt+0xe930>
   20e20:	cmp	r3, #47	; 0x2f
   20e24:	beq	20f10 <__assert_fail@plt+0xe91c>
   20e28:	movw	fp, #55050	; 0xd70a
   20e2c:	movt	fp, #15395	; 0x3c23
   20e30:	mov	r3, r4
   20e34:	mov	r8, #2
   20e38:	mov	sl, r0
   20e3c:	mov	r0, r3
   20e40:	bl	2d448 <__assert_fail@plt+0x1ae54>
   20e44:	subs	r7, r0, #0
   20e48:	beq	20f80 <__assert_fail@plt+0xe98c>
   20e4c:	ldrb	r3, [r4]
   20e50:	cmp	r3, #43	; 0x2b
   20e54:	bne	20e68 <__assert_fail@plt+0xe874>
   20e58:	ldrb	r3, [r4, #1]
   20e5c:	sub	r3, r3, #48	; 0x30
   20e60:	cmp	r3, #7
   20e64:	bls	20f80 <__assert_fail@plt+0xe98c>
   20e68:	mov	r5, #0
   20e6c:	mov	r3, r7
   20e70:	mov	r2, r5
   20e74:	mov	r1, r5
   20e78:	mov	r0, r5
   20e7c:	str	r5, [sp]
   20e80:	bl	2d844 <__assert_fail@plt+0x1b250>
   20e84:	mov	r6, r0
   20e88:	mov	r3, r7
   20e8c:	str	r5, [sp]
   20e90:	mov	r2, r5
   20e94:	mov	r1, #1
   20e98:	mov	r0, r5
   20e9c:	str	r6, [sp, #8]
   20ea0:	bl	2d844 <__assert_fail@plt+0x1b250>
   20ea4:	mov	r9, r0
   20ea8:	mov	r0, r7
   20eac:	orr	r6, r6, r9
   20eb0:	str	r9, [sp, #12]
   20eb4:	bl	38b10 <__assert_fail@plt+0x2651c>
   20eb8:	ldrb	r3, [r4]
   20ebc:	cmp	r3, #47	; 0x2f
   20ec0:	cmpeq	r6, r5
   20ec4:	beq	20f48 <__assert_fail@plt+0xe954>
   20ec8:	mov	r1, r4
   20ecc:	mov	r0, sl
   20ed0:	bl	1c170 <__assert_fail@plt+0x9b7c>
   20ed4:	ldr	r1, [sp, #8]
   20ed8:	mov	r3, r0
   20edc:	mov	r0, #1
   20ee0:	ldr	r2, [sp, #12]
   20ee4:	str	fp, [r3, #28]
   20ee8:	str	r8, [r3, #40]	; 0x28
   20eec:	str	r1, [r3, #44]	; 0x2c
   20ef0:	str	r2, [r3, #48]	; 0x30
   20ef4:	add	sp, sp, #20
   20ef8:	ldrd	r4, [sp]
   20efc:	ldrd	r6, [sp, #8]
   20f00:	ldrd	r8, [sp, #16]
   20f04:	ldrd	sl, [sp, #24]
   20f08:	add	sp, sp, #32
   20f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   20f10:	movw	fp, #39322	; 0x999a
   20f14:	movt	fp, #16025	; 0x3e99
   20f18:	add	r3, r4, #1
   20f1c:	mov	r8, #1
   20f20:	b	20e38 <__assert_fail@plt+0xe844>
   20f24:	movw	fp, #52429	; 0xcccd
   20f28:	movt	fp, #15948	; 0x3e4c
   20f2c:	add	r3, r4, #1
   20f30:	mov	r8, #0
   20f34:	b	20e38 <__assert_fail@plt+0xe844>
   20f38:	mov	r0, r4
   20f3c:	b	20ef4 <__assert_fail@plt+0xe900>
   20f40:	mov	r0, r1
   20f44:	bx	lr
   20f48:	mov	r2, #5
   20f4c:	mov	r0, r5
   20f50:	movw	r1, #14472	; 0x3888
   20f54:	movt	r1, #5
   20f58:	bl	120b4 <dcgettext@plt>
   20f5c:	mov	r2, r0
   20f60:	mov	r3, r4
   20f64:	mov	r1, r5
   20f68:	mov	r0, r5
   20f6c:	movw	fp, #42048	; 0xa440
   20f70:	movt	fp, #16255	; 0x3f7f
   20f74:	mov	r8, r5
   20f78:	bl	121ec <error@plt>
   20f7c:	b	20ec8 <__assert_fail@plt+0xe8d4>
   20f80:	mov	r2, #5
   20f84:	movw	r1, #14456	; 0x3878
   20f88:	movt	r1, #5
   20f8c:	mov	r0, #0
   20f90:	bl	120b4 <dcgettext@plt>
   20f94:	movw	r3, #32364	; 0x7e6c
   20f98:	movt	r3, #6
   20f9c:	mov	r5, r0
   20fa0:	mov	r2, r4
   20fa4:	ldr	r1, [r3, #72]	; 0x48
   20fa8:	mov	r0, #0
   20fac:	bl	3431c <__assert_fail@plt+0x21d28>
   20fb0:	mov	r3, r0
   20fb4:	mov	r2, r5
   20fb8:	mov	r1, #0
   20fbc:	mov	r0, #1
   20fc0:	bl	121ec <error@plt>
   20fc4:	cmp	r2, #0
   20fc8:	beq	21490 <__assert_fail@plt+0xee9c>
   20fcc:	ldr	ip, [r3]
   20fd0:	ldr	ip, [r2, ip, lsl #2]
   20fd4:	cmp	ip, #0
   20fd8:	beq	21378 <__assert_fail@plt+0xed84>
   20fdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20fe0:	strd	r6, [sp, #8]
   20fe4:	movw	r7, #20520	; 0x5028
   20fe8:	movt	r7, #1
   20fec:	strd	r8, [sp, #16]
   20ff0:	mov	r8, r0
   20ff4:	mov	r0, r1
   20ff8:	strd	sl, [sp, #24]
   20ffc:	movw	r9, #20316	; 0x4f5c
   21000:	movt	r9, #1
   21004:	str	lr, [sp, #32]
   21008:	sub	sp, sp, #76	; 0x4c
   2100c:	str	r2, [sp, #24]
   21010:	movw	r2, #14700	; 0x396c
   21014:	movt	r2, #5
   21018:	str	r3, [sp, #32]
   2101c:	ldr	r3, [r1, #12]
   21020:	mov	r1, r3
   21024:	mov	r4, r3
   21028:	str	r3, [sp, #28]
   2102c:	bl	1c124 <__assert_fail@plt+0x9b30>
   21030:	movw	r2, #257	; 0x101
   21034:	mov	r3, #0
   21038:	str	r0, [sp, #16]
   2103c:	cmp	r4, r9
   21040:	cmpne	r4, r7
   21044:	movne	r9, #1
   21048:	moveq	r9, #0
   2104c:	str	r2, [r0, #16]
   21050:	mov	r2, r0
   21054:	str	r3, [r0, #144]	; 0x90
   21058:	bne	21150 <__assert_fail@plt+0xeb5c>
   2105c:	ldr	r0, [sp, #28]
   21060:	movw	r2, #17656	; 0x44f8
   21064:	movt	r2, #1
   21068:	mov	r1, r2
   2106c:	movw	r3, #32364	; 0x7e6c
   21070:	movt	r3, #6
   21074:	mov	r2, #1
   21078:	str	r1, [sp, #36]	; 0x24
   2107c:	strb	r2, [r3, #80]	; 0x50
   21080:	cmp	r0, r1
   21084:	ldr	r1, [sp, #16]
   21088:	strb	r2, [r1, #140]	; 0x8c
   2108c:	beq	21098 <__assert_fail@plt+0xeaa4>
   21090:	cmp	r0, r7
   21094:	bne	21170 <__assert_fail@plt+0xeb7c>
   21098:	mov	r2, #0
   2109c:	movw	r0, #15136	; 0x3b20
   210a0:	movt	r0, #5
   210a4:	strb	r2, [r3, #14]
   210a8:	bl	12228 <getenv@plt>
   210ac:	subs	r4, r0, #0
   210b0:	beq	2118c <__assert_fail@plt+0xeb98>
   210b4:	add	r6, sp, #52	; 0x34
   210b8:	add	r3, sp, #48	; 0x30
   210bc:	movw	r1, #4488	; 0x1188
   210c0:	movt	r1, #5
   210c4:	mov	r2, #1
   210c8:	str	r6, [sp]
   210cc:	mov	r5, r1
   210d0:	bl	281cc <__assert_fail@plt+0x15bd8>
   210d4:	b	21100 <__assert_fail@plt+0xeb0c>
   210d8:	cmp	r3, #47	; 0x2f
   210dc:	bne	215b0 <__assert_fail@plt+0xefbc>
   210e0:	add	r3, sp, #48	; 0x30
   210e4:	mov	r2, #0
   210e8:	str	r6, [sp]
   210ec:	mov	r1, r5
   210f0:	mov	r0, r4
   210f4:	bl	281cc <__assert_fail@plt+0x15bd8>
   210f8:	cmp	r0, #0
   210fc:	beq	2118c <__assert_fail@plt+0xeb98>
   21100:	ldr	r1, [sp, #52]	; 0x34
   21104:	cmp	r1, #0
   21108:	beq	21128 <__assert_fail@plt+0xeb34>
   2110c:	ldr	r3, [sp, #48]	; 0x30
   21110:	cmp	r1, #1
   21114:	add	r0, r4, r3
   21118:	ldrb	r3, [r4, r3]
   2111c:	bne	210d8 <__assert_fail@plt+0xeae4>
   21120:	cmp	r3, #46	; 0x2e
   21124:	bne	210d8 <__assert_fail@plt+0xeae4>
   21128:	mov	r2, #5
   2112c:	movw	r1, #14724	; 0x3984
   21130:	movt	r1, #5
   21134:	mov	r0, #0
   21138:	bl	120b4 <dcgettext@plt>
   2113c:	mov	r2, r0
   21140:	mov	r3, r8
   21144:	mov	r1, #0
   21148:	mov	r0, #1
   2114c:	bl	121ec <error@plt>
   21150:	movw	r0, #17656	; 0x44f8
   21154:	movt	r0, #1
   21158:	strb	r3, [r2, #140]	; 0x8c
   2115c:	cmp	r4, r0
   21160:	movweq	r3, #32364	; 0x7e6c
   21164:	str	r0, [sp, #36]	; 0x24
   21168:	movteq	r3, #6
   2116c:	beq	21098 <__assert_fail@plt+0xeaa4>
   21170:	movw	r3, #30060	; 0x756c
   21174:	movt	r3, #6
   21178:	ldr	r3, [r3]
   2117c:	cmp	r3, #0
   21180:	beq	21600 <__assert_fail@plt+0xf00c>
   21184:	ldr	r2, [sp, #16]
   21188:	str	r3, [r2, #144]	; 0x90
   2118c:	ldr	r3, [sp, #16]
   21190:	mov	r2, #0
   21194:	ldr	r1, [sp, #24]
   21198:	strb	r2, [r3, #40]	; 0x28
   2119c:	ldr	r3, [sp, #32]
   211a0:	ldr	r3, [r3]
   211a4:	ldr	fp, [r1, r3, lsl #2]
   211a8:	str	r3, [sp, #20]
   211ac:	lsl	r3, r3, #2
   211b0:	str	r3, [sp, #44]	; 0x2c
   211b4:	add	r3, r1, r3
   211b8:	cmp	fp, r2
   211bc:	str	r3, [sp, #40]	; 0x28
   211c0:	beq	21498 <__assert_fail@plt+0xeea4>
   211c4:	ldr	r3, [sp, #28]
   211c8:	ldr	r1, [sp, #36]	; 0x24
   211cc:	cmp	r3, r7
   211d0:	cmpne	r3, r1
   211d4:	moveq	r7, #1
   211d8:	movne	r7, #0
   211dc:	beq	2166c <__assert_fail@plt+0xf078>
   211e0:	movw	r8, #15176	; 0x3b48
   211e4:	movt	r8, #5
   211e8:	ldr	r4, [sp, #20]
   211ec:	mov	r6, r7
   211f0:	mov	r0, r7
   211f4:	ldr	r5, [sp, #40]	; 0x28
   211f8:	mov	sl, r5
   211fc:	b	21248 <__assert_fail@plt+0xec54>
   21200:	cmp	r3, #43	; 0x2b
   21204:	movne	r3, #0
   21208:	andeq	r3, r9, #1
   2120c:	cmp	r3, #0
   21210:	bne	21350 <__assert_fail@plt+0xed5c>
   21214:	mov	r1, r8
   21218:	mov	r0, fp
   2121c:	bl	2c4d4 <__assert_fail@plt+0x19ee0>
   21220:	cmp	r0, #0
   21224:	beq	21234 <__assert_fail@plt+0xec40>
   21228:	add	r6, r6, #1
   2122c:	mov	r7, fp
   21230:	mov	r0, #1
   21234:	ldr	fp, [sl, #4]!
   21238:	add	r4, r4, #1
   2123c:	add	r5, r5, #4
   21240:	cmp	fp, #0
   21244:	beq	2149c <__assert_fail@plt+0xeea8>
   21248:	ldrb	r3, [fp]
   2124c:	cmp	r3, #59	; 0x3b
   21250:	bne	21200 <__assert_fail@plt+0xec0c>
   21254:	ldrb	r3, [fp, #1]
   21258:	cmp	r3, #0
   2125c:	bne	21214 <__assert_fail@plt+0xec20>
   21260:	mov	r2, #0
   21264:	ldr	r3, [sp, #20]
   21268:	cmp	r3, r4
   2126c:	beq	2149c <__assert_fail@plt+0xeea8>
   21270:	ldr	r3, [r5]
   21274:	cmp	r3, #0
   21278:	beq	2149c <__assert_fail@plt+0xeea8>
   2127c:	cmp	r2, #0
   21280:	beq	21380 <__assert_fail@plt+0xed8c>
   21284:	ldr	r1, [sp, #28]
   21288:	movw	r2, #17728	; 0x4540
   2128c:	movt	r2, #5
   21290:	movw	r3, #9500	; 0x251c
   21294:	movt	r3, #5
   21298:	ldr	r0, [sp, #36]	; 0x24
   2129c:	cmp	r1, r0
   212a0:	moveq	sl, r2
   212a4:	movne	sl, r3
   212a8:	cmp	r6, #1
   212ac:	bgt	21620 <__assert_fail@plt+0xf02c>
   212b0:	mov	r0, r7
   212b4:	bl	12300 <strlen@plt>
   212b8:	cmp	r0, #2
   212bc:	beq	21380 <__assert_fail@plt+0xed8c>
   212c0:	mov	r3, sl
   212c4:	mov	r1, #19
   212c8:	add	r0, sp, #52	; 0x34
   212cc:	movw	r2, #15352	; 0x3bf8
   212d0:	movt	r2, #5
   212d4:	movw	r4, #32364	; 0x7e6c
   212d8:	movt	r4, #6
   212dc:	bl	12360 <snprintf@plt>
   212e0:	mov	r2, #5
   212e4:	movw	r1, #15372	; 0x3c0c
   212e8:	movt	r1, #5
   212ec:	mov	r0, #0
   212f0:	bl	120b4 <dcgettext@plt>
   212f4:	mov	r6, r0
   212f8:	add	r2, sp, #52	; 0x34
   212fc:	ldr	r1, [r4, #72]	; 0x48
   21300:	mov	r0, #0
   21304:	bl	3431c <__assert_fail@plt+0x21d28>
   21308:	mov	r8, r0
   2130c:	movw	r2, #15176	; 0x3b48
   21310:	movt	r2, #5
   21314:	mov	r0, #1
   21318:	ldr	r1, [r4, #72]	; 0x48
   2131c:	bl	3431c <__assert_fail@plt+0x21d28>
   21320:	mov	r5, r0
   21324:	mov	r2, r7
   21328:	ldr	r1, [r4, #72]	; 0x48
   2132c:	mov	r0, #2
   21330:	bl	3431c <__assert_fail@plt+0x21d28>
   21334:	mov	r3, r8
   21338:	mov	r2, r6
   2133c:	str	r5, [sp]
   21340:	mov	r1, #0
   21344:	str	r0, [sp, #4]
   21348:	mov	r0, #1
   2134c:	bl	121ec <error@plt>
   21350:	ldrb	r3, [fp, #1]
   21354:	cmp	r3, #0
   21358:	movne	r0, #0
   2135c:	cmp	r0, #0
   21360:	beq	21214 <__assert_fail@plt+0xec20>
   21364:	ldr	r1, [sp, #16]
   21368:	mov	r3, #1
   2136c:	mov	r2, r3
   21370:	strb	r3, [r1, #40]	; 0x28
   21374:	b	21264 <__assert_fail@plt+0xec70>
   21378:	mov	r0, ip
   2137c:	bx	lr
   21380:	ldr	r3, [sp, #16]
   21384:	mov	r1, #2048	; 0x800
   21388:	add	r6, r3, #44	; 0x2c
   2138c:	add	r8, r3, #40	; 0x28
   21390:	mov	r0, r6
   21394:	bl	261e0 <__assert_fail@plt+0x13bec>
   21398:	sub	r0, r0, #1
   2139c:	cmp	r0, #1
   213a0:	bls	21648 <__assert_fail@plt+0xf054>
   213a4:	ldr	r9, [sp, #16]
   213a8:	mov	r0, r6
   213ac:	bl	2633c <__assert_fail@plt+0x13d48>
   213b0:	ldr	sl, [sp, #20]
   213b4:	movw	r3, #24808	; 0x60e8
   213b8:	movt	r3, #1
   213bc:	ldrb	r1, [r9, #40]	; 0x28
   213c0:	add	r7, r9, #88	; 0x58
   213c4:	mov	r0, r9
   213c8:	mov	ip, r9
   213cc:	str	r3, [r9, #76]	; 0x4c
   213d0:	sub	r2, r4, sl
   213d4:	cmp	r1, #0
   213d8:	beq	214b4 <__assert_fail@plt+0xeec0>
   213dc:	mov	r9, #0
   213e0:	sub	r3, r2, #1
   213e4:	mov	r1, r7
   213e8:	mov	r2, r8
   213ec:	str	r9, [r0, #64]	; 0x40
   213f0:	str	r9, [r0, #68]	; 0x44
   213f4:	str	r3, [r0, #72]	; 0x48
   213f8:	mov	r0, r6
   213fc:	str	r9, [ip, #80]	; 0x50
   21400:	str	r9, [ip, #84]	; 0x54
   21404:	str	r9, [ip, #132]	; 0x84
   21408:	bl	2635c <__assert_fail@plt+0x13d68>
   2140c:	sub	r3, r4, #1
   21410:	cmp	r3, sl
   21414:	ble	2145c <__assert_fail@plt+0xee68>
   21418:	ldr	r3, [sp, #24]
   2141c:	ldr	r8, [sp, #40]	; 0x28
   21420:	sub	sl, r3, #4
   21424:	add	sl, sl, r4, lsl #2
   21428:	ldr	fp, [r8], #4
   2142c:	mov	r0, fp
   21430:	bl	12300 <strlen@plt>
   21434:	mov	ip, #1
   21438:	add	r3, r0, #1
   2143c:	str	r9, [sp]
   21440:	mov	r2, fp
   21444:	mov	r1, r7
   21448:	mov	r0, r6
   2144c:	stmib	sp, {r9, ip}
   21450:	bl	2589c <__assert_fail@plt+0x132a8>
   21454:	cmp	r8, sl
   21458:	bne	21428 <__assert_fail@plt+0xee34>
   2145c:	ldr	r3, [r5]
   21460:	mov	r0, #1
   21464:	cmp	r3, #0
   21468:	ldr	r3, [sp, #32]
   2146c:	addne	r4, r4, #1
   21470:	str	r4, [r3]
   21474:	add	sp, sp, #76	; 0x4c
   21478:	ldrd	r4, [sp]
   2147c:	ldrd	r6, [sp, #8]
   21480:	ldrd	r8, [sp, #16]
   21484:	ldrd	sl, [sp, #24]
   21488:	add	sp, sp, #32
   2148c:	pop	{pc}		; (ldr pc, [sp], #4)
   21490:	mov	r0, r2
   21494:	bx	lr
   21498:	ldr	r4, [sp, #20]
   2149c:	ldr	r0, [sp, #16]
   214a0:	ldr	r3, [sp, #32]
   214a4:	str	r4, [r3]
   214a8:	bl	38b10 <__assert_fail@plt+0x2651c>
   214ac:	mov	r0, #0
   214b0:	b	21474 <__assert_fail@plt+0xee80>
   214b4:	ldr	r9, [sp, #16]
   214b8:	movw	r3, #15176	; 0x3b48
   214bc:	movt	r3, #5
   214c0:	str	r3, [r9, #68]	; 0x44
   214c4:	str	r1, [r9, #80]	; 0x50
   214c8:	str	r1, [r9, #84]	; 0x54
   214cc:	mov	r1, #2
   214d0:	lsl	r0, r2, r1
   214d4:	str	r1, [r9, #64]	; 0x40
   214d8:	str	r2, [r9, #136]	; 0x88
   214dc:	bl	36864 <__assert_fail@plt+0x24270>
   214e0:	mov	r1, r7
   214e4:	mov	r2, r8
   214e8:	str	r0, [r9, #132]	; 0x84
   214ec:	mov	r0, r6
   214f0:	bl	2635c <__assert_fail@plt+0x13d68>
   214f4:	ldr	r1, [r9, #136]	; 0x88
   214f8:	cmp	r1, #0
   214fc:	ble	2145c <__assert_fail@plt+0xee68>
   21500:	ldr	ip, [sp, #24]
   21504:	ldr	r3, [sp, #44]	; 0x2c
   21508:	ldr	r0, [r9, #132]	; 0x84
   2150c:	ldr	lr, [sp, #40]	; 0x28
   21510:	add	r2, r3, #8
   21514:	sub	r3, r1, #1
   21518:	add	r2, ip, r2
   2151c:	add	ip, r0, #8
   21520:	cmp	lr, ip
   21524:	cmpcc	r0, r2
   21528:	orr	ip, r0, lr
   2152c:	movcs	r2, #1
   21530:	movcc	r2, #0
   21534:	cmp	r3, #3
   21538:	movls	r3, #0
   2153c:	andhi	r3, r2, #1
   21540:	tst	ip, #7
   21544:	movne	r3, #0
   21548:	cmp	r3, #0
   2154c:	beq	21594 <__assert_fail@plt+0xefa0>
   21550:	lsr	r6, r1, #1
   21554:	sub	lr, lr, #8
   21558:	mov	ip, r0
   2155c:	add	r6, r0, r6, lsl #3
   21560:	ldrd	r2, [lr, #8]!
   21564:	strd	r2, [ip], #8
   21568:	cmp	ip, r6
   2156c:	bne	21560 <__assert_fail@plt+0xef6c>
   21570:	bic	r2, r1, #1
   21574:	cmp	r1, r2
   21578:	beq	2145c <__assert_fail@plt+0xee68>
   2157c:	ldr	r3, [sp, #20]
   21580:	ldr	r1, [sp, #24]
   21584:	add	r3, r3, r2
   21588:	ldr	r3, [r1, r3, lsl #2]
   2158c:	str	r3, [r0, r2, lsl #2]
   21590:	b	2145c <__assert_fail@plt+0xee68>
   21594:	add	r1, r0, r1, lsl #2
   21598:	mov	r3, lr
   2159c:	ldr	r2, [r3], #4
   215a0:	str	r2, [r0], #4
   215a4:	cmp	r0, r1
   215a8:	bne	2159c <__assert_fail@plt+0xefa8>
   215ac:	b	2145c <__assert_fail@plt+0xee68>
   215b0:	bl	12000 <strndup@plt>
   215b4:	mov	r5, r0
   215b8:	mov	r2, #5
   215bc:	movw	r1, #14976	; 0x3a80
   215c0:	movt	r1, #5
   215c4:	mov	r0, #0
   215c8:	bl	120b4 <dcgettext@plt>
   215cc:	cmp	r5, #0
   215d0:	mov	r6, r0
   215d4:	ldreq	r5, [sp, #48]	; 0x30
   215d8:	mov	r0, #0
   215dc:	addeq	r5, r4, r5
   215e0:	mov	r1, r5
   215e4:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   215e8:	mov	r3, r0
   215ec:	mov	r2, r6
   215f0:	str	r8, [sp]
   215f4:	mov	r1, #0
   215f8:	mov	r0, #1
   215fc:	bl	121ec <error@plt>
   21600:	movw	r3, #12228	; 0x2fc4
   21604:	movt	r3, #5
   21608:	movw	r1, #15144	; 0x3b28
   2160c:	movt	r1, #5
   21610:	movw	r0, #15156	; 0x3b34
   21614:	movt	r0, #5
   21618:	movw	r2, #2937	; 0xb79
   2161c:	bl	125f4 <__assert_fail@plt>
   21620:	mov	r2, #5
   21624:	movw	r1, #15296	; 0x3bc0
   21628:	movt	r1, #5
   2162c:	mov	r0, #0
   21630:	bl	120b4 <dcgettext@plt>
   21634:	mov	r2, r0
   21638:	mov	r3, sl
   2163c:	mov	r1, #0
   21640:	mov	r0, #1
   21644:	bl	121ec <error@plt>
   21648:	mov	r2, #5
   2164c:	movw	r1, #15432	; 0x3c48
   21650:	movt	r1, #5
   21654:	mov	r0, #0
   21658:	bl	120b4 <dcgettext@plt>
   2165c:	mov	r2, r0
   21660:	mov	r1, #0
   21664:	mov	r0, #1
   21668:	bl	121ec <error@plt>
   2166c:	ldr	r4, [sp, #20]
   21670:	movw	r8, #15176	; 0x3b48
   21674:	movt	r8, #5
   21678:	mov	r7, r2
   2167c:	mov	r6, r2
   21680:	ldr	r5, [sp, #40]	; 0x28
   21684:	mov	r1, r2
   21688:	mov	sl, r5
   2168c:	ldrb	r3, [fp]
   21690:	cmp	r3, #59	; 0x3b
   21694:	beq	21710 <__assert_fail@plt+0xf11c>
   21698:	cmp	r3, #43	; 0x2b
   2169c:	movne	r3, #0
   216a0:	andeq	r3, r9, #1
   216a4:	cmp	r3, #0
   216a8:	bne	21720 <__assert_fail@plt+0xf12c>
   216ac:	mov	r1, r8
   216b0:	mov	r0, fp
   216b4:	bl	2c4d4 <__assert_fail@plt+0x19ee0>
   216b8:	subs	r1, r0, #0
   216bc:	beq	216f8 <__assert_fail@plt+0xf104>
   216c0:	cmp	r4, #0
   216c4:	add	r6, r6, #1
   216c8:	bne	216f0 <__assert_fail@plt+0xf0fc>
   216cc:	mov	r2, #5
   216d0:	movw	r1, #15180	; 0x3b4c
   216d4:	movt	r1, #5
   216d8:	mov	r0, r4
   216dc:	bl	120b4 <dcgettext@plt>
   216e0:	mov	r2, r0
   216e4:	mov	r1, r4
   216e8:	mov	r0, #1
   216ec:	bl	121ec <error@plt>
   216f0:	mov	r7, fp
   216f4:	mov	r1, #1
   216f8:	ldr	fp, [sl, #4]!
   216fc:	add	r4, r4, #1
   21700:	add	r5, r5, #4
   21704:	cmp	fp, #0
   21708:	bne	2168c <__assert_fail@plt+0xf098>
   2170c:	b	2149c <__assert_fail@plt+0xeea8>
   21710:	ldrb	r3, [fp, #1]
   21714:	cmp	r3, #0
   21718:	bne	216ac <__assert_fail@plt+0xf0b8>
   2171c:	b	21260 <__assert_fail@plt+0xec6c>
   21720:	ldrb	r3, [fp, #1]
   21724:	cmp	r3, #0
   21728:	movne	r1, #0
   2172c:	cmp	r1, #0
   21730:	beq	216ac <__assert_fail@plt+0xf0b8>
   21734:	b	21364 <__assert_fail@plt+0xed70>
   21738:	mov	r3, r2
   2173c:	mov	r2, r1
   21740:	mov	r1, r0
   21744:	movw	r0, #3200	; 0xc80
   21748:	movt	r0, #5
   2174c:	b	20fc4 <__assert_fail@plt+0xe9d0>
   21750:	mov	r3, r2
   21754:	mov	r2, r1
   21758:	mov	r1, r0
   2175c:	movw	r0, #15476	; 0x3c74
   21760:	movt	r0, #5
   21764:	b	20fc4 <__assert_fail@plt+0xe9d0>
   21768:	mov	r3, r2
   2176c:	mov	r2, r1
   21770:	mov	r1, r0
   21774:	movw	r0, #15480	; 0x3c78
   21778:	movt	r0, #5
   2177c:	b	20fc4 <__assert_fail@plt+0xe9d0>
   21780:	mov	r3, r2
   21784:	mov	r2, r1
   21788:	mov	r1, r0
   2178c:	movw	r0, #15492	; 0x3c84
   21790:	movt	r0, #5
   21794:	b	20fc4 <__assert_fail@plt+0xe9d0>
   21798:	strd	r4, [sp, #-16]!
   2179c:	mov	r4, #3
   217a0:	mov	r5, #2
   217a4:	str	r6, [sp, #8]
   217a8:	str	lr, [sp, #12]
   217ac:	bl	16fbc <__assert_fail@plt+0x49c8>
   217b0:	mov	r3, r0
   217b4:	movw	r2, #14236	; 0x379c
   217b8:	movt	r2, #1
   217bc:	mov	r1, #0
   217c0:	mov	r0, #1
   217c4:	strd	r4, [r3, #8]
   217c8:	ldrd	r4, [sp]
   217cc:	str	r2, [r3]
   217d0:	ldr	r6, [sp, #8]
   217d4:	add	sp, sp, #12
   217d8:	strh	r1, [r3, #18]
   217dc:	pop	{pc}		; (ldr pc, [sp], #4)
   217e0:	strd	r4, [sp, #-16]!
   217e4:	mov	r4, #3
   217e8:	mov	r5, #3
   217ec:	str	r6, [sp, #8]
   217f0:	str	lr, [sp, #12]
   217f4:	bl	16fbc <__assert_fail@plt+0x49c8>
   217f8:	mov	r3, r0
   217fc:	movw	r2, #14048	; 0x36e0
   21800:	movt	r2, #1
   21804:	mov	r1, #0
   21808:	mov	r0, #1
   2180c:	strd	r4, [r3, #8]
   21810:	ldrd	r4, [sp]
   21814:	str	r2, [r3]
   21818:	ldr	r6, [sp, #8]
   2181c:	add	sp, sp, #12
   21820:	strh	r1, [r3, #18]
   21824:	pop	{pc}		; (ldr pc, [sp], #4)
   21828:	strd	r4, [sp, #-16]!
   2182c:	mov	r4, #3
   21830:	mov	r5, #1
   21834:	str	r6, [sp, #8]
   21838:	str	lr, [sp, #12]
   2183c:	bl	16fbc <__assert_fail@plt+0x49c8>
   21840:	mov	r3, r0
   21844:	mov	r1, #1065353216	; 0x3f800000
   21848:	movw	r2, #16420	; 0x4024
   2184c:	movt	r2, #1
   21850:	mov	ip, #0
   21854:	mov	r0, #1
   21858:	str	r2, [r3]
   2185c:	strd	r4, [r3, #8]
   21860:	ldrd	r4, [sp]
   21864:	strh	ip, [r3, #18]
   21868:	ldr	r6, [sp, #8]
   2186c:	add	sp, sp, #12
   21870:	str	r1, [r3, #28]
   21874:	pop	{pc}		; (ldr pc, [sp], #4)
   21878:	strd	r4, [sp, #-16]!
   2187c:	mov	r4, #5
   21880:	mov	r5, #0
   21884:	str	r6, [sp, #8]
   21888:	str	lr, [sp, #12]
   2188c:	bl	16fbc <__assert_fail@plt+0x49c8>
   21890:	mov	r3, r0
   21894:	movw	r2, #15900	; 0x3e1c
   21898:	movt	r2, #1
   2189c:	mov	r1, #0
   218a0:	mov	r0, #1
   218a4:	strd	r4, [r3, #8]
   218a8:	ldrd	r4, [sp]
   218ac:	str	r2, [r3]
   218b0:	ldr	r6, [sp, #8]
   218b4:	add	sp, sp, #12
   218b8:	strh	r1, [r3, #18]
   218bc:	pop	{pc}		; (ldr pc, [sp], #4)
   218c0:	cmp	r1, #0
   218c4:	beq	219f8 <__assert_fail@plt+0xf404>
   218c8:	ldr	r3, [r2]
   218cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   218d0:	ldr	r4, [r1, r3, lsl #2]
   218d4:	strd	r6, [sp, #8]
   218d8:	str	r8, [sp, #16]
   218dc:	str	lr, [sp, #20]
   218e0:	sub	sp, sp, #8
   218e4:	cmp	r4, #0
   218e8:	beq	219a4 <__assert_fail@plt+0xf3b0>
   218ec:	add	r3, r3, #1
   218f0:	mov	r5, r0
   218f4:	mov	r0, r4
   218f8:	str	r3, [r2]
   218fc:	bl	125dc <getgrnam@plt>
   21900:	mov	r6, r0
   21904:	bl	11ed4 <endgrent@plt>
   21908:	cmp	r6, #0
   2190c:	beq	21960 <__assert_fail@plt+0xf36c>
   21910:	ldr	r6, [r6, #8]
   21914:	mov	r1, r4
   21918:	mov	r0, r5
   2191c:	bl	1c170 <__assert_fail@plt+0x9b7c>
   21920:	mov	r3, r0
   21924:	vldr	s15, [pc, #336]	; 21a7c <__assert_fail@plt+0xf488>
   21928:	mov	r0, #1
   2192c:	ldrd	r4, [r3, #48]	; 0x30
   21930:	str	r6, [r3, #40]	; 0x28
   21934:	vldr	s14, [pc, #324]	; 21a80 <__assert_fail@plt+0xf48c>
   21938:	cmp	r5, #0
   2193c:	cmpeq	r4, #100	; 0x64
   21940:	vmovcs.f32	s15, s14
   21944:	vstr	s15, [r3, #28]
   21948:	add	sp, sp, #8
   2194c:	ldrd	r4, [sp]
   21950:	ldrd	r6, [sp, #8]
   21954:	ldr	r8, [sp, #16]
   21958:	add	sp, sp, #20
   2195c:	pop	{pc}		; (ldr pc, [sp], #4)
   21960:	movw	r1, #14228	; 0x3794
   21964:	movt	r1, #5
   21968:	mov	r0, r4
   2196c:	bl	125e8 <strspn@plt>
   21970:	subs	r7, r0, #0
   21974:	beq	219ac <__assert_fail@plt+0xf3b8>
   21978:	ldrb	r3, [r4, r7]
   2197c:	add	r7, r4, r7
   21980:	cmp	r3, #0
   21984:	bne	21a20 <__assert_fail@plt+0xf42c>
   21988:	movw	r3, #32364	; 0x7e6c
   2198c:	movt	r3, #6
   21990:	mov	r0, r4
   21994:	ldr	r1, [r3, #72]	; 0x48
   21998:	bl	280a4 <__assert_fail@plt+0x15ab0>
   2199c:	mov	r6, r0
   219a0:	b	21914 <__assert_fail@plt+0xf320>
   219a4:	mov	r0, r4
   219a8:	b	21948 <__assert_fail@plt+0xf354>
   219ac:	ldrb	r5, [r4]
   219b0:	cmp	r5, #0
   219b4:	beq	21a00 <__assert_fail@plt+0xf40c>
   219b8:	mov	r2, #5
   219bc:	movw	r1, #15628	; 0x3d0c
   219c0:	movt	r1, #5
   219c4:	bl	120b4 <dcgettext@plt>
   219c8:	movw	r3, #32364	; 0x7e6c
   219cc:	movt	r3, #6
   219d0:	mov	r5, r0
   219d4:	mov	r2, r4
   219d8:	ldr	r1, [r3, #72]	; 0x48
   219dc:	mov	r0, r7
   219e0:	bl	3431c <__assert_fail@plt+0x21d28>
   219e4:	mov	r3, r0
   219e8:	mov	r2, r5
   219ec:	mov	r1, r7
   219f0:	mov	r0, #1
   219f4:	bl	121ec <error@plt>
   219f8:	mov	r0, r1
   219fc:	bx	lr
   21a00:	mov	r2, #5
   21a04:	movw	r1, #15668	; 0x3d34
   21a08:	movt	r1, #5
   21a0c:	bl	120b4 <dcgettext@plt>
   21a10:	mov	r2, r0
   21a14:	mov	r1, r5
   21a18:	mov	r0, #1
   21a1c:	bl	121ec <error@plt>
   21a20:	mov	r2, #5
   21a24:	movw	r1, #15500	; 0x3c8c
   21a28:	movt	r1, #5
   21a2c:	mov	r0, r6
   21a30:	bl	120b4 <dcgettext@plt>
   21a34:	movw	r5, #32364	; 0x7e6c
   21a38:	movt	r5, #6
   21a3c:	mov	r2, r4
   21a40:	mov	r8, r0
   21a44:	ldr	r1, [r5, #72]	; 0x48
   21a48:	mov	r0, r6
   21a4c:	bl	3431c <__assert_fail@plt+0x21d28>
   21a50:	mov	r4, r0
   21a54:	mov	r2, r7
   21a58:	ldr	r1, [r5, #72]	; 0x48
   21a5c:	mov	r0, #1
   21a60:	bl	3431c <__assert_fail@plt+0x21d28>
   21a64:	mov	r3, r4
   21a68:	mov	r2, r8
   21a6c:	str	r0, [sp]
   21a70:	mov	r1, r6
   21a74:	mov	r0, #1
   21a78:	bl	121ec <error@plt>
   21a7c:	svccc	0x007d70a4
   21a80:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   21a84:	mov	r1, #0
   21a88:	strd	r4, [sp, #-16]!
   21a8c:	mov	r4, #2
   21a90:	str	r6, [sp, #8]
   21a94:	mov	r5, #4
   21a98:	str	lr, [sp, #12]
   21a9c:	bl	17194 <__assert_fail@plt+0x4ba0>
   21aa0:	mov	r3, r0
   21aa4:	movw	r2, #19700	; 0x4cf4
   21aa8:	movt	r2, #1
   21aac:	mov	r1, #0
   21ab0:	mov	r0, #1
   21ab4:	strd	r4, [r3, #8]
   21ab8:	ldrd	r4, [sp]
   21abc:	str	r2, [r3]
   21ac0:	ldr	r6, [sp, #8]
   21ac4:	add	sp, sp, #12
   21ac8:	strh	r1, [r3, #18]
   21acc:	pop	{pc}		; (ldr pc, [sp], #4)
   21ad0:	mov	r1, #0
   21ad4:	strd	r4, [sp, #-16]!
   21ad8:	mov	r4, #4
   21adc:	str	r6, [sp, #8]
   21ae0:	mov	r5, #0
   21ae4:	str	lr, [sp, #12]
   21ae8:	bl	17194 <__assert_fail@plt+0x4ba0>
   21aec:	mov	r3, r0
   21af0:	movw	r2, #20732	; 0x50fc
   21af4:	movt	r2, #1
   21af8:	mov	r1, #0
   21afc:	mov	r0, #1
   21b00:	strd	r4, [r3, #8]
   21b04:	ldrd	r4, [sp]
   21b08:	str	r2, [r3]
   21b0c:	ldr	r6, [sp, #8]
   21b10:	add	sp, sp, #12
   21b14:	strh	r1, [r3, #18]
   21b18:	pop	{pc}		; (ldr pc, [sp], #4)
   21b1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21b20:	strd	r6, [sp, #8]
   21b24:	subs	r6, r1, #0
   21b28:	strd	r8, [sp, #16]
   21b2c:	strd	sl, [sp, #24]
   21b30:	str	lr, [sp, #32]
   21b34:	sub	sp, sp, #124	; 0x7c
   21b38:	beq	21d54 <__assert_fail@plt+0xf760>
   21b3c:	ldr	r7, [r2]
   21b40:	ldr	r4, [r6, r7, lsl #2]
   21b44:	lsl	r9, r7, #2
   21b48:	cmp	r4, #0
   21b4c:	beq	21d58 <__assert_fail@plt+0xf764>
   21b50:	mov	r8, r0
   21b54:	mov	r0, r4
   21b58:	mov	r5, r2
   21b5c:	bl	12300 <strlen@plt>
   21b60:	cmp	r0, #8
   21b64:	bne	21d54 <__assert_fail@plt+0xf760>
   21b68:	movw	r3, #16084	; 0x3ed4
   21b6c:	movt	r3, #5
   21b70:	ldrh	ip, [r3, #4]
   21b74:	movw	r0, #15724	; 0x3d6c
   21b78:	movt	r0, #5
   21b7c:	mov	r2, #6
   21b80:	mov	r1, r4
   21b84:	ldr	r3, [r3]
   21b88:	str	r3, [sp, #8]
   21b8c:	strh	ip, [sp, #12]
   21b90:	bl	12594 <strncmp@plt>
   21b94:	subs	r3, r0, #0
   21b98:	bne	21f08 <__assert_fail@plt+0xf914>
   21b9c:	ldrb	sl, [r4, #6]
   21ba0:	ldrb	fp, [r4, #7]
   21ba4:	cmp	fp, #66	; 0x42
   21ba8:	cmpne	sl, #66	; 0x42
   21bac:	moveq	r4, #1
   21bb0:	movne	r4, #0
   21bb4:	beq	21e04 <__assert_fail@plt+0xf810>
   21bb8:	cmp	sl, #116	; 0x74
   21bbc:	beq	21d58 <__assert_fail@plt+0xf764>
   21bc0:	mov	r1, sl
   21bc4:	add	r0, sp, #8
   21bc8:	bl	1230c <strchr@plt>
   21bcc:	cmp	r0, #0
   21bd0:	beq	21d58 <__assert_fail@plt+0xf764>
   21bd4:	mov	r1, fp
   21bd8:	add	r0, sp, #8
   21bdc:	bl	1230c <strchr@plt>
   21be0:	cmp	r0, #0
   21be4:	beq	21d58 <__assert_fail@plt+0xf764>
   21be8:	add	r9, r6, r9
   21bec:	add	r7, r7, #1
   21bf0:	ldr	r4, [r9, #4]
   21bf4:	cmp	r4, #0
   21bf8:	beq	21ec0 <__assert_fail@plt+0xf8cc>
   21bfc:	mov	r1, r4
   21c00:	mov	r0, r8
   21c04:	str	r7, [r5]
   21c08:	bl	1c170 <__assert_fail@plt+0x9b7c>
   21c0c:	cmp	sl, #97	; 0x61
   21c10:	mov	r4, r0
   21c14:	beq	21e88 <__assert_fail@plt+0xf894>
   21c18:	bls	21dc4 <__assert_fail@plt+0xf7d0>
   21c1c:	cmp	sl, #99	; 0x63
   21c20:	beq	21e7c <__assert_fail@plt+0xf888>
   21c24:	cmp	sl, #109	; 0x6d
   21c28:	moveq	r2, #3
   21c2c:	streq	r2, [r0, #40]	; 0x28
   21c30:	bne	21dd4 <__assert_fail@plt+0xf7e0>
   21c34:	cmp	fp, #116	; 0x74
   21c38:	beq	21e48 <__assert_fail@plt+0xf854>
   21c3c:	add	r0, sp, #16
   21c40:	movw	r7, #32364	; 0x7e6c
   21c44:	movt	r7, #6
   21c48:	bl	1c458 <__assert_fail@plt+0x9e64>
   21c4c:	ldr	r0, [r5]
   21c50:	add	r1, sp, #16
   21c54:	ldr	r2, [r7, #52]	; 0x34
   21c58:	ldr	r0, [r6, r0, lsl #2]
   21c5c:	blx	r2
   21c60:	subs	r8, r0, #0
   21c64:	bne	21fa0 <__assert_fail@plt+0xf9ac>
   21c68:	cmp	fp, #97	; 0x61
   21c6c:	beq	21e9c <__assert_fail@plt+0xf8a8>
   21c70:	bls	21d78 <__assert_fail@plt+0xf784>
   21c74:	cmp	fp, #99	; 0x63
   21c78:	beq	21e34 <__assert_fail@plt+0xf840>
   21c7c:	cmp	fp, #109	; 0x6d
   21c80:	bne	21f24 <__assert_fail@plt+0xf930>
   21c84:	ldr	r3, [sp, #96]	; 0x60
   21c88:	ldr	r2, [sp, #100]	; 0x64
   21c8c:	str	r3, [r4, #48]	; 0x30
   21c90:	str	r2, [r4, #52]	; 0x34
   21c94:	ldr	r1, [r7, #28]
   21c98:	mov	r0, #0
   21c9c:	movw	r2, #17671	; 0x4507
   21ca0:	movt	r2, #49710	; 0xc22e
   21ca4:	str	r0, [r4, #44]	; 0x2c
   21ca8:	vldr	s14, [pc, #800]	; 21fd0 <__assert_fail@plt+0xf9dc>
   21cac:	sub	r1, r1, r3
   21cb0:	asr	r3, r1, #31
   21cb4:	smull	r0, r2, r2, r1
   21cb8:	add	r2, r2, r1
   21cbc:	rsb	r3, r3, r2, asr #16
   21cc0:	vmov	s15, r3
   21cc4:	vcvt.f32.s32	s15, s15
   21cc8:	vcmpe.f32	s15, s14
   21ccc:	vmrs	APSR_nzcv, fpscr
   21cd0:	bmi	21e74 <__assert_fail@plt+0xf880>
   21cd4:	vldr	s14, [pc, #760]	; 21fd4 <__assert_fail@plt+0xf9e0>
   21cd8:	vcmpe.f32	s15, s14
   21cdc:	vmrs	APSR_nzcv, fpscr
   21ce0:	bmi	21e94 <__assert_fail@plt+0xf8a0>
   21ce4:	vldr	s12, [pc, #748]	; 21fd8 <__assert_fail@plt+0xf9e4>
   21ce8:	vldr	s14, [pc, #748]	; 21fdc <__assert_fail@plt+0xf9e8>
   21cec:	vldr	s13, [pc, #748]	; 21fe0 <__assert_fail@plt+0xf9ec>
   21cf0:	vcmpe.f32	s15, s12
   21cf4:	vmrs	APSR_nzcv, fpscr
   21cf8:	vmovle.f32	s15, s13
   21cfc:	vmovgt.f32	s15, s14
   21d00:	ldr	r3, [r5]
   21d04:	vstr	s15, [r4, #28]
   21d08:	ldr	r2, [r4]
   21d0c:	add	r3, r3, #1
   21d10:	cmp	r2, #0
   21d14:	str	r3, [r5]
   21d18:	beq	21f84 <__assert_fail@plt+0xf990>
   21d1c:	movw	r3, #19892	; 0x4db4
   21d20:	movt	r3, #1
   21d24:	cmp	r2, r3
   21d28:	bne	21fb4 <__assert_fail@plt+0xf9c0>
   21d2c:	ldrb	r4, [r4, #18]
   21d30:	cmp	r4, #0
   21d34:	bne	21d58 <__assert_fail@plt+0xf764>
   21d38:	movw	r1, #15144	; 0x3b28
   21d3c:	movt	r1, #5
   21d40:	ldr	r3, [pc, #672]	; 21fe8 <__assert_fail@plt+0xf9f4>
   21d44:	movw	r0, #16064	; 0x3ec0
   21d48:	movt	r0, #5
   21d4c:	movw	r2, #1649	; 0x671
   21d50:	bl	125f4 <__assert_fail@plt>
   21d54:	mov	r4, #0
   21d58:	mov	r0, r4
   21d5c:	add	sp, sp, #124	; 0x7c
   21d60:	ldrd	r4, [sp]
   21d64:	ldrd	r6, [sp, #8]
   21d68:	ldrd	r8, [sp, #16]
   21d6c:	ldrd	sl, [sp, #24]
   21d70:	add	sp, sp, #32
   21d74:	pop	{pc}		; (ldr pc, [sp], #4)
   21d78:	cmp	fp, #66	; 0x42
   21d7c:	bne	21f24 <__assert_fail@plt+0xf930>
   21d80:	mvn	r3, #0
   21d84:	mov	r2, #5
   21d88:	movw	r1, #15964	; 0x3e5c
   21d8c:	movt	r1, #5
   21d90:	str	r3, [r4, #48]	; 0x30
   21d94:	str	r3, [r4, #52]	; 0x34
   21d98:	bl	120b4 <dcgettext@plt>
   21d9c:	ldr	r3, [r5]
   21da0:	mov	r4, r0
   21da4:	mov	r0, r8
   21da8:	ldr	r1, [r6, r3, lsl #2]
   21dac:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   21db0:	mov	r3, r0
   21db4:	mov	r2, r4
   21db8:	mov	r1, r8
   21dbc:	mov	r0, #1
   21dc0:	bl	121ec <error@plt>
   21dc4:	cmp	sl, #66	; 0x42
   21dc8:	moveq	r2, #1
   21dcc:	streq	r2, [r0, #40]	; 0x28
   21dd0:	beq	21c34 <__assert_fail@plt+0xf640>
   21dd4:	mov	r1, sl
   21dd8:	add	r0, sp, #8
   21ddc:	bl	1230c <strchr@plt>
   21de0:	cmp	r0, #0
   21de4:	movw	r1, #15144	; 0x3b28
   21de8:	movt	r1, #5
   21dec:	ldr	r3, [pc, #500]	; 21fe8 <__assert_fail@plt+0xf9f4>
   21df0:	beq	21eb0 <__assert_fail@plt+0xf8bc>
   21df4:	movw	r0, #20308	; 0x4f54
   21df8:	movt	r0, #5
   21dfc:	movw	r2, #1612	; 0x64c
   21e00:	bl	125f4 <__assert_fail@plt>
   21e04:	mov	r2, #5
   21e08:	movw	r1, #15776	; 0x3da0
   21e0c:	movt	r1, #5
   21e10:	mov	r4, r3
   21e14:	str	r3, [sp, #4]
   21e18:	bl	120b4 <dcgettext@plt>
   21e1c:	ldr	r3, [sp, #4]
   21e20:	mov	r2, r0
   21e24:	mov	r1, r3
   21e28:	mov	r0, r3
   21e2c:	bl	121ec <error@plt>
   21e30:	b	21d58 <__assert_fail@plt+0xf764>
   21e34:	ldr	r3, [sp, #104]	; 0x68
   21e38:	ldr	r2, [sp, #108]	; 0x6c
   21e3c:	str	r3, [r4, #48]	; 0x30
   21e40:	str	r2, [r4, #52]	; 0x34
   21e44:	b	21c94 <__assert_fail@plt+0xf6a0>
   21e48:	ldr	r3, [r5]
   21e4c:	add	r0, r4, #48	; 0x30
   21e50:	ldr	r2, [pc, #404]	; 21fec <__assert_fail@plt+0xf9f8>
   21e54:	ldr	r1, [r6, r3, lsl #2]
   21e58:	bl	31d44 <__assert_fail@plt+0x1f750>
   21e5c:	subs	r7, r0, #0
   21e60:	beq	21f40 <__assert_fail@plt+0xf94c>
   21e64:	movw	r7, #32364	; 0x7e6c
   21e68:	movt	r7, #6
   21e6c:	ldr	r3, [r4, #48]	; 0x30
   21e70:	b	21c94 <__assert_fail@plt+0xf6a0>
   21e74:	vldr	s15, [pc, #360]	; 21fe4 <__assert_fail@plt+0xf9f0>
   21e78:	b	21d00 <__assert_fail@plt+0xf70c>
   21e7c:	mov	r2, #2
   21e80:	str	r2, [r0, #40]	; 0x28
   21e84:	b	21c34 <__assert_fail@plt+0xf640>
   21e88:	mov	r2, #0
   21e8c:	str	r2, [r0, #40]	; 0x28
   21e90:	b	21c34 <__assert_fail@plt+0xf640>
   21e94:	vldr	s15, [pc, #320]	; 21fdc <__assert_fail@plt+0xf9e8>
   21e98:	b	21d00 <__assert_fail@plt+0xf70c>
   21e9c:	ldr	r3, [sp, #88]	; 0x58
   21ea0:	ldr	r2, [sp, #92]	; 0x5c
   21ea4:	str	r3, [r4, #48]	; 0x30
   21ea8:	str	r2, [r4, #52]	; 0x34
   21eac:	b	21c94 <__assert_fail@plt+0xf6a0>
   21eb0:	movw	r0, #15880	; 0x3e08
   21eb4:	movt	r0, #5
   21eb8:	movw	r2, #1611	; 0x64b
   21ebc:	bl	125f4 <__assert_fail@plt>
   21ec0:	mov	r2, #5
   21ec4:	movw	r1, #15848	; 0x3de8
   21ec8:	movt	r1, #5
   21ecc:	mov	r0, r4
   21ed0:	bl	120b4 <dcgettext@plt>
   21ed4:	ldr	r2, [r5]
   21ed8:	movw	r3, #32364	; 0x7e6c
   21edc:	movt	r3, #6
   21ee0:	mov	r7, r0
   21ee4:	mov	r0, r4
   21ee8:	ldr	r1, [r3, #72]	; 0x48
   21eec:	ldr	r2, [r6, r2, lsl #2]
   21ef0:	bl	3431c <__assert_fail@plt+0x21d28>
   21ef4:	mov	r3, r0
   21ef8:	mov	r2, r7
   21efc:	mov	r1, r4
   21f00:	mov	r0, #1
   21f04:	bl	121ec <error@plt>
   21f08:	movw	r1, #15144	; 0x3b28
   21f0c:	movt	r1, #5
   21f10:	ldr	r3, [pc, #208]	; 21fe8 <__assert_fail@plt+0xf9f4>
   21f14:	movw	r0, #15732	; 0x3d74
   21f18:	movt	r0, #5
   21f1c:	movw	r2, #1555	; 0x613
   21f20:	bl	125f4 <__assert_fail@plt>
   21f24:	movw	r1, #15144	; 0x3b28
   21f28:	movt	r1, #5
   21f2c:	ldr	r3, [pc, #188]	; 21ff0 <__assert_fail@plt+0xf9fc>
   21f30:	movw	r0, #20308	; 0x4f54
   21f34:	movt	r0, #5
   21f38:	movw	r2, #498	; 0x1f2
   21f3c:	bl	125f4 <__assert_fail@plt>
   21f40:	mov	r2, #5
   21f44:	movw	r1, #15904	; 0x3e20
   21f48:	movt	r1, #5
   21f4c:	bl	120b4 <dcgettext@plt>
   21f50:	ldr	r2, [r5]
   21f54:	movw	r3, #32364	; 0x7e6c
   21f58:	movt	r3, #6
   21f5c:	mov	r4, r0
   21f60:	mov	r0, r7
   21f64:	ldr	r1, [r3, #72]	; 0x48
   21f68:	ldr	r2, [r6, r2, lsl #2]
   21f6c:	bl	3431c <__assert_fail@plt+0x21d28>
   21f70:	mov	r3, r0
   21f74:	mov	r2, r4
   21f78:	mov	r1, r7
   21f7c:	mov	r0, #1
   21f80:	bl	121ec <error@plt>
   21f84:	movw	r1, #15144	; 0x3b28
   21f88:	movt	r1, #5
   21f8c:	ldr	r3, [pc, #84]	; 21fe8 <__assert_fail@plt+0xf9f4>
   21f90:	movw	r0, #16000	; 0x3e80
   21f94:	movt	r0, #5
   21f98:	movw	r2, #1647	; 0x66f
   21f9c:	bl	125f4 <__assert_fail@plt>
   21fa0:	bl	12348 <__errno_location@plt>
   21fa4:	ldr	r3, [r5]
   21fa8:	ldr	r0, [r0]
   21fac:	ldr	r1, [r6, r3, lsl #2]
   21fb0:	bl	1d778 <__assert_fail@plt+0xb184>
   21fb4:	movw	r1, #15144	; 0x3b28
   21fb8:	movt	r1, #5
   21fbc:	ldr	r3, [pc, #36]	; 21fe8 <__assert_fail@plt+0xf9f4>
   21fc0:	movw	r0, #16028	; 0x3e9c
   21fc4:	movt	r0, #5
   21fc8:	mov	r2, #1648	; 0x670
   21fcc:	bl	125f4 <__assert_fail@plt>
   21fd0:	stclcc	12, cr12, [ip, #820]	; 0x334
   21fd4:	svccc	0x00800000
   21fd8:	sbcmi	r0, r8, #0
   21fdc:			; <UNDEFINED> instruction: 0x3e99999a
   21fe0:	mcrcc	14, 6, sl, cr7, cr4, {0}
   21fe4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   21fe8:	ldrdeq	r2, [r5], -r4
   21fec:	andeq	r7, r6, r0, lsl #29
   21ff0:	andeq	r2, r5, r4, ror #31
   21ff4:	movw	r3, #32320	; 0x7e40
   21ff8:	movt	r3, #6
   21ffc:	ldr	ip, [r3]
   22000:	cmp	ip, #0
   22004:	bne	22098 <__assert_fail@plt+0xfaa4>
   22008:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2200c:	mov	r5, r1
   22010:	mov	r4, r0
   22014:	strd	r6, [sp, #8]
   22018:	mov	r6, r2
   2201c:	str	r8, [sp, #16]
   22020:	str	lr, [sp, #20]
   22024:	bl	35978 <__assert_fail@plt+0x23384>
   22028:	subs	r7, r0, #0
   2202c:	bne	22048 <__assert_fail@plt+0xfa54>
   22030:	mov	r0, r7
   22034:	ldrd	r4, [sp]
   22038:	ldrd	r6, [sp, #8]
   2203c:	ldr	r8, [sp, #16]
   22040:	add	sp, sp, #20
   22044:	pop	{pc}		; (ldr pc, [sp], #4)
   22048:	bl	12348 <__errno_location@plt>
   2204c:	ldr	r3, [r0]
   22050:	cmp	r3, #2
   22054:	beq	22060 <__assert_fail@plt+0xfa6c>
   22058:	cmp	r3, #20
   2205c:	bne	22030 <__assert_fail@plt+0xfa3c>
   22060:	movw	r3, #32364	; 0x7e6c
   22064:	movt	r3, #6
   22068:	ldr	r3, [r3, #44]	; 0x2c
   2206c:	tst	r3, #2
   22070:	bne	2209c <__assert_fail@plt+0xfaa8>
   22074:	mov	r2, r6
   22078:	mov	r1, r5
   2207c:	ldrd	r6, [sp, #8]
   22080:	mov	r0, r4
   22084:	ldrd	r4, [sp]
   22088:	ldr	r8, [sp, #16]
   2208c:	ldr	lr, [sp, #20]
   22090:	add	sp, sp, #24
   22094:	b	35b4c <__assert_fail@plt+0x23558>
   22098:	b	35b4c <__assert_fail@plt+0x23558>
   2209c:	movw	r3, #30024	; 0x7548
   220a0:	movt	r3, #6
   220a4:	movw	r1, #16092	; 0x3edc
   220a8:	movt	r1, #5
   220ac:	ldr	r0, [r3]
   220b0:	mov	r2, r5
   220b4:	bl	1233c <fprintf@plt>
   220b8:	b	22074 <__assert_fail@plt+0xfa80>
   220bc:	subs	r0, r1, #0
   220c0:	bxeq	lr
   220c4:	ldr	r3, [r2]
   220c8:	ldr	r0, [r0, r3, lsl #2]
   220cc:	cmp	r0, #0
   220d0:	bxeq	lr
   220d4:	add	r3, r3, #1
   220d8:	str	r4, [sp, #-8]!
   220dc:	str	lr, [sp, #4]
   220e0:	str	r3, [r2]
   220e4:	bl	27e68 <__assert_fail@plt+0x15874>
   220e8:	movw	r1, #31952	; 0x7cd0
   220ec:	movt	r1, #6
   220f0:	ldr	r3, [r1]
   220f4:	movw	r2, #32364	; 0x7e6c
   220f8:	movt	r2, #6
   220fc:	str	r0, [r2, #60]	; 0x3c
   22100:	cmp	r3, #0
   22104:	beq	22134 <__assert_fail@plt+0xfb40>
   22108:	mov	r0, r3
   2210c:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   22110:	mov	r3, r0
   22114:	mov	r2, #1065353216	; 0x3f800000
   22118:	ldr	r4, [sp]
   2211c:	mov	r1, #0
   22120:	add	sp, sp, #4
   22124:	mov	r0, #1
   22128:	strh	r1, [r3, #18]
   2212c:	str	r2, [r3, #28]
   22130:	pop	{pc}		; (ldr pc, [sp], #4)
   22134:	ldr	ip, [pc, #52]	; 22170 <__assert_fail@plt+0xfb7c>
   22138:	mov	r0, r3
   2213c:	mov	r2, ip
   22140:	b	22150 <__assert_fail@plt+0xfb5c>
   22144:	ldr	r3, [r2, #16]!
   22148:	cmp	r3, #1
   2214c:	beq	22164 <__assert_fail@plt+0xfb70>
   22150:	ldr	r3, [r2, #20]
   22154:	add	r0, r0, #1
   22158:	cmp	r3, #0
   2215c:	bne	22144 <__assert_fail@plt+0xfb50>
   22160:	b	22108 <__assert_fail@plt+0xfb14>
   22164:	add	r3, ip, r0, lsl #4
   22168:	str	r3, [r1]
   2216c:	b	22108 <__assert_fail@plt+0xfb14>
   22170:	strdeq	r2, [r5], -r4
   22174:	str	r4, [sp, #-8]!
   22178:	movw	r4, #31952	; 0x7cd0
   2217c:	movt	r4, #6
   22180:	ldrb	r2, [r4, #4]
   22184:	str	lr, [sp, #4]
   22188:	cmp	r2, #0
   2218c:	beq	221a0 <__assert_fail@plt+0xfbac>
   22190:	ldr	r4, [sp]
   22194:	add	sp, sp, #4
   22198:	mov	r0, #1
   2219c:	pop	{pc}		; (ldr pc, [sp], #4)
   221a0:	movw	r1, #16172	; 0x3f2c
   221a4:	movt	r1, #5
   221a8:	mov	r0, r1
   221ac:	bl	12210 <fnmatch@plt>
   221b0:	subs	r2, r0, #0
   221b4:	bne	2220c <__assert_fail@plt+0xfc18>
   221b8:	movw	r1, #16172	; 0x3f2c
   221bc:	movt	r1, #5
   221c0:	movw	r0, #16232	; 0x3f68
   221c4:	movt	r0, #5
   221c8:	bl	12210 <fnmatch@plt>
   221cc:	cmp	r0, #0
   221d0:	beq	2220c <__assert_fail@plt+0xfc18>
   221d4:	movw	r1, #16172	; 0x3f2c
   221d8:	movt	r1, #5
   221dc:	movw	r0, #16232	; 0x3f68
   221e0:	movt	r0, #5
   221e4:	mov	r2, #16
   221e8:	bl	12210 <fnmatch@plt>
   221ec:	cmp	r0, #0
   221f0:	bne	2220c <__assert_fail@plt+0xfc18>
   221f4:	mov	r3, #1
   221f8:	mov	r0, #1
   221fc:	strb	r3, [r4, #4]
   22200:	ldr	r4, [sp]
   22204:	add	sp, sp, #4
   22208:	pop	{pc}		; (ldr pc, [sp], #4)
   2220c:	mov	r2, #5
   22210:	movw	r1, #16176	; 0x3f30
   22214:	movt	r1, #5
   22218:	mov	r0, #0
   2221c:	bl	120b4 <dcgettext@plt>
   22220:	mov	r2, r0
   22224:	mov	r1, #0
   22228:	mov	r0, #1
   2222c:	bl	121ec <error@plt>
   22230:	strd	r4, [sp, #-16]!
   22234:	mov	r4, r1
   22238:	mov	r5, r2
   2223c:	str	r6, [sp, #8]
   22240:	mov	r6, r0
   22244:	str	lr, [sp, #12]
   22248:	sub	sp, sp, #8
   2224c:	bl	22174 <__assert_fail@plt+0xfb80>
   22250:	cmp	r4, #0
   22254:	beq	222e4 <__assert_fail@plt+0xfcf0>
   22258:	ldr	r3, [r5]
   2225c:	ldr	r4, [r4, r3, lsl #2]
   22260:	cmp	r4, #0
   22264:	beq	222e4 <__assert_fail@plt+0xfcf0>
   22268:	add	r3, r3, #1
   2226c:	mov	r2, r4
   22270:	mov	r0, r6
   22274:	movw	r1, #18464	; 0x4820
   22278:	movt	r1, #1
   2227c:	str	r3, [r5]
   22280:	bl	1c124 <__assert_fail@plt+0x9b30>
   22284:	mov	r5, r0
   22288:	mov	r3, #0
   2228c:	movw	r1, #14320	; 0x37f0
   22290:	movt	r1, #5
   22294:	mov	r0, r4
   22298:	strh	r3, [r5, #18]
   2229c:	str	r4, [r5, #40]	; 0x28
   222a0:	bl	12528 <strpbrk@plt>
   222a4:	vldr	s15, [pc, #180]	; 22360 <__assert_fail@plt+0xfd6c>
   222a8:	movw	r3, #32364	; 0x7e6c
   222ac:	movt	r3, #6
   222b0:	cmp	r0, #0
   222b4:	vldr	s14, [pc, #168]	; 22364 <__assert_fail@plt+0xfd70>
   222b8:	ldrb	r3, [r3, #17]
   222bc:	vmoveq.f32	s15, s14
   222c0:	cmp	r3, #0
   222c4:	vstr	s15, [r5, #28]
   222c8:	beq	222ec <__assert_fail@plt+0xfcf8>
   222cc:	mov	r0, #1
   222d0:	add	sp, sp, #8
   222d4:	ldrd	r4, [sp]
   222d8:	ldr	r6, [sp, #8]
   222dc:	add	sp, sp, #12
   222e0:	pop	{pc}		; (ldr pc, [sp], #4)
   222e4:	mov	r0, r4
   222e8:	b	222d0 <__assert_fail@plt+0xfcdc>
   222ec:	mov	r1, #47	; 0x2f
   222f0:	mov	r0, r4
   222f4:	bl	12468 <strrchr@plt>
   222f8:	cmp	r0, #0
   222fc:	beq	222cc <__assert_fail@plt+0xfcd8>
   22300:	ldrb	r3, [r0, #1]
   22304:	cmp	r3, #0
   22308:	bne	222cc <__assert_fail@plt+0xfcd8>
   2230c:	mov	r1, #1
   22310:	mov	r0, r4
   22314:	bl	16c04 <__assert_fail@plt+0x4610>
   22318:	subs	r6, r0, #0
   2231c:	bne	222cc <__assert_fail@plt+0xfcd8>
   22320:	mov	r2, #5
   22324:	movw	r1, #16236	; 0x3f6c
   22328:	movt	r1, #5
   2232c:	bl	120b4 <dcgettext@plt>
   22330:	mov	r2, r0
   22334:	movw	r3, #16300	; 0x3fac
   22338:	movt	r3, #5
   2233c:	mov	r0, r6
   22340:	str	r4, [sp]
   22344:	mov	r1, r6
   22348:	bl	121ec <error@plt>
   2234c:	movw	r3, #52343	; 0xcc77
   22350:	movt	r3, #12843	; 0x322b
   22354:	mov	r0, #1
   22358:	str	r3, [r5, #28]
   2235c:	b	222d0 <__assert_fail@plt+0xfcdc>
   22360:	svccc	0x004ccccd
   22364:	stclcc	12, cr12, [ip, #820]	; 0x334
   22368:	strd	r4, [sp, #-16]!
   2236c:	subs	r4, r1, #0
   22370:	str	r6, [sp, #8]
   22374:	str	lr, [sp, #12]
   22378:	beq	22404 <__assert_fail@plt+0xfe10>
   2237c:	ldr	r3, [r2]
   22380:	ldr	r3, [r4, r3, lsl #2]
   22384:	cmp	r3, #0
   22388:	beq	223f0 <__assert_fail@plt+0xfdfc>
   2238c:	mov	r6, r2
   22390:	mov	r5, r0
   22394:	bl	11f28 <is_selinux_enabled@plt>
   22398:	cmp	r0, #0
   2239c:	ble	22418 <__assert_fail@plt+0xfe24>
   223a0:	mov	r0, r5
   223a4:	mov	r1, #0
   223a8:	bl	1c170 <__assert_fail@plt+0x9b7c>
   223ac:	ldr	r2, [r6]
   223b0:	mov	r3, r0
   223b4:	mov	r1, #0
   223b8:	mov	r0, #1
   223bc:	ldr	r2, [r4, r2, lsl #2]
   223c0:	strb	r1, [r3, #18]
   223c4:	movw	r1, #55050	; 0xd70a
   223c8:	movt	r1, #15395	; 0x3c23
   223cc:	ldrd	r4, [sp]
   223d0:	str	r1, [r3, #28]
   223d4:	str	r2, [r3, #40]	; 0x28
   223d8:	ldr	r3, [r6]
   223dc:	add	r3, r3, r0
   223e0:	str	r3, [r6]
   223e4:	ldr	r6, [sp, #8]
   223e8:	add	sp, sp, #12
   223ec:	pop	{pc}		; (ldr pc, [sp], #4)
   223f0:	ldrd	r4, [sp]
   223f4:	mov	r0, r3
   223f8:	ldr	r6, [sp, #8]
   223fc:	add	sp, sp, #12
   22400:	pop	{pc}		; (ldr pc, [sp], #4)
   22404:	mov	r0, r4
   22408:	ldrd	r4, [sp]
   2240c:	ldr	r6, [sp, #8]
   22410:	add	sp, sp, #12
   22414:	pop	{pc}		; (ldr pc, [sp], #4)
   22418:	mov	r2, #5
   2241c:	movw	r1, #16308	; 0x3fb4
   22420:	movt	r1, #5
   22424:	mov	r0, #0
   22428:	bl	120b4 <dcgettext@plt>
   2242c:	mov	r2, r0
   22430:	mov	r1, #0
   22434:	mov	r0, #1
   22438:	bl	121ec <error@plt>
   2243c:	cmp	r1, #0
   22440:	beq	2257c <__assert_fail@plt+0xff88>
   22444:	ldr	r3, [r2]
   22448:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2244c:	ldr	r4, [r1, r3, lsl #2]
   22450:	strd	r6, [sp, #8]
   22454:	strd	r8, [sp, #16]
   22458:	str	lr, [sp, #24]
   2245c:	sub	sp, sp, #12
   22460:	cmp	r4, #0
   22464:	moveq	r0, r4
   22468:	beq	224d4 <__assert_fail@plt+0xfee0>
   2246c:	add	r3, r3, #1
   22470:	mov	r5, r0
   22474:	str	r3, [r2]
   22478:	bl	22174 <__assert_fail@plt+0xfb80>
   2247c:	movw	r3, #32364	; 0x7e6c
   22480:	movt	r3, #6
   22484:	ldrb	r6, [r3, #17]
   22488:	cmp	r6, #0
   2248c:	beq	224ec <__assert_fail@plt+0xfef8>
   22490:	mov	r0, r5
   22494:	mov	r1, r4
   22498:	bl	1c170 <__assert_fail@plt+0x9b7c>
   2249c:	mov	r5, r0
   224a0:	mov	r3, #0
   224a4:	mov	r0, r4
   224a8:	movw	r1, #14320	; 0x37f0
   224ac:	movt	r1, #5
   224b0:	strh	r3, [r5, #18]
   224b4:	str	r4, [r5, #40]	; 0x28
   224b8:	bl	12528 <strpbrk@plt>
   224bc:	vldr	s15, [pc, #192]	; 22584 <__assert_fail@plt+0xff90>
   224c0:	cmp	r0, #0
   224c4:	mov	r0, #1
   224c8:	vldr	s14, [pc, #184]	; 22588 <__assert_fail@plt+0xff94>
   224cc:	vmoveq.f32	s15, s14
   224d0:	vstr	s15, [r5, #28]
   224d4:	add	sp, sp, #12
   224d8:	ldrd	r4, [sp]
   224dc:	ldrd	r6, [sp, #8]
   224e0:	ldrd	r8, [sp, #16]
   224e4:	add	sp, sp, #24
   224e8:	pop	{pc}		; (ldr pc, [sp], #4)
   224ec:	ldrb	r3, [r3, #16]
   224f0:	cmp	r3, #0
   224f4:	beq	22490 <__assert_fail@plt+0xfe9c>
   224f8:	mov	r1, #47	; 0x2f
   224fc:	mov	r0, r4
   22500:	bl	1230c <strchr@plt>
   22504:	cmp	r0, #0
   22508:	beq	22490 <__assert_fail@plt+0xfe9c>
   2250c:	mov	r2, #5
   22510:	mov	r0, r6
   22514:	movw	r1, #16360	; 0x3fe8
   22518:	movt	r1, #5
   2251c:	bl	120b4 <dcgettext@plt>
   22520:	mov	r8, r0
   22524:	movw	r1, #16540	; 0x409c
   22528:	movt	r1, #5
   2252c:	mov	r0, r6
   22530:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   22534:	mov	r9, r0
   22538:	movw	r1, #26352	; 0x66f0
   2253c:	movt	r1, #5
   22540:	mov	r0, #1
   22544:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   22548:	mov	r7, r0
   2254c:	movw	r1, #16548	; 0x40a4
   22550:	movt	r1, #5
   22554:	mov	r0, #2
   22558:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   2255c:	mov	r3, r9
   22560:	mov	r2, r8
   22564:	str	r7, [sp]
   22568:	mov	r1, r6
   2256c:	str	r0, [sp, #4]
   22570:	mov	r0, r6
   22574:	bl	121ec <error@plt>
   22578:	b	22490 <__assert_fail@plt+0xfe9c>
   2257c:	mov	r0, r1
   22580:	bx	lr
   22584:	svccc	0x004ccccd
   22588:	stclcc	12, cr12, [ip, #820]	; 0x334
   2258c:	str	r4, [sp, #-8]!
   22590:	movw	r4, #32364	; 0x7e6c
   22594:	movt	r4, #6
   22598:	ldrb	r3, [r4, #36]	; 0x24
   2259c:	str	lr, [sp, #4]
   225a0:	cmp	r3, #0
   225a4:	beq	225b8 <__assert_fail@plt+0xffc4>
   225a8:	ldr	r4, [sp]
   225ac:	add	sp, sp, #4
   225b0:	mov	r0, #1
   225b4:	pop	{pc}		; (ldr pc, [sp], #4)
   225b8:	ldr	r2, [r4, #28]
   225bc:	add	r0, r4, #28
   225c0:	str	r3, [r4, #32]
   225c4:	add	r3, r2, #86016	; 0x15000
   225c8:	add	r3, r3, #384	; 0x180
   225cc:	str	r3, [r4, #28]
   225d0:	bl	1227c <localtime@plt>
   225d4:	cmp	r0, #0
   225d8:	ldr	r3, [r4, #28]
   225dc:	beq	22618 <__assert_fail@plt+0x10024>
   225e0:	ldr	ip, [r0]
   225e4:	mov	lr, #3600	; 0xe10
   225e8:	ldmib	r0, {r1, r2}
   225ec:	rsb	r1, r1, r1, lsl #4
   225f0:	add	r1, ip, r1, lsl #2
   225f4:	mla	r2, lr, r2, r1
   225f8:	sub	r3, r3, r2
   225fc:	mov	r2, #1
   22600:	mov	r0, #1
   22604:	str	r3, [r4, #28]
   22608:	strb	r2, [r4, #36]	; 0x24
   2260c:	ldr	r4, [sp]
   22610:	add	sp, sp, #4
   22614:	pop	{pc}		; (ldr pc, [sp], #4)
   22618:	movw	r1, #17671	; 0x4507
   2261c:	movt	r1, #49710	; 0xc22e
   22620:	asr	r2, r3, #31
   22624:	movw	r0, #20864	; 0x5180
   22628:	movt	r0, #1
   2262c:	smull	ip, r1, r1, r3
   22630:	add	r1, r1, r3
   22634:	rsb	r2, r2, r1, asr #16
   22638:	mls	r2, r0, r2, r3
   2263c:	b	225f8 <__assert_fail@plt+0x10004>
   22640:	cmp	r1, #0
   22644:	beq	22760 <__assert_fail@plt+0x1016c>
   22648:	ldr	ip, [r2]
   2264c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22650:	ldr	r4, [r1, ip, lsl #2]
   22654:	strd	r6, [sp, #8]
   22658:	str	r8, [sp, #16]
   2265c:	str	lr, [sp, #20]
   22660:	sub	sp, sp, #8
   22664:	cmp	r4, #0
   22668:	beq	22758 <__assert_fail@plt+0x10164>
   2266c:	add	ip, ip, #1
   22670:	mov	r3, r2
   22674:	movw	r2, #32364	; 0x7e6c
   22678:	movt	r2, #6
   2267c:	movw	r1, #21184	; 0x52c0
   22680:	movt	r1, #1
   22684:	ldr	r6, [r2, #60]	; 0x3c
   22688:	mov	r2, r4
   2268c:	str	ip, [r3]
   22690:	mov	r7, #0
   22694:	bl	1c124 <__assert_fail@plt+0x9b30>
   22698:	mov	r8, r0
   2269c:	mov	r0, #32
   226a0:	strh	r7, [r8, #18]
   226a4:	orr	r6, r6, #4194304	; 0x400000
   226a8:	bl	36864 <__assert_fail@plt+0x24270>
   226ac:	mov	r5, r0
   226b0:	mov	r3, #100	; 0x64
   226b4:	mov	r0, r3
   226b8:	str	r5, [r8, #40]	; 0x28
   226bc:	str	r3, [r5, #4]
   226c0:	bl	36864 <__assert_fail@plt+0x24270>
   226c4:	str	r0, [r5]
   226c8:	mov	r0, r6
   226cc:	str	r7, [r5, #16]
   226d0:	bl	4d44c <__assert_fail@plt+0x3ae58>
   226d4:	mov	r0, r4
   226d8:	str	r6, [r5, #12]
   226dc:	str	r7, [r5, #20]
   226e0:	bl	12300 <strlen@plt>
   226e4:	mov	r1, r0
   226e8:	mov	r2, r5
   226ec:	mov	r0, r4
   226f0:	bl	4d3c8 <__assert_fail@plt+0x3add4>
   226f4:	subs	r5, r0, #0
   226f8:	bne	22768 <__assert_fail@plt+0x10174>
   226fc:	movw	r1, #14320	; 0x37f0
   22700:	movt	r1, #5
   22704:	mov	r0, r4
   22708:	bl	12528 <strpbrk@plt>
   2270c:	cmp	r0, #0
   22710:	beq	22738 <__assert_fail@plt+0x10144>
   22714:	vldr	s15, [pc, #120]	; 22794 <__assert_fail@plt+0x101a0>
   22718:	mov	r0, #1
   2271c:	vstr	s15, [r8, #28]
   22720:	add	sp, sp, #8
   22724:	ldrd	r4, [sp]
   22728:	ldrd	r6, [sp, #8]
   2272c:	ldr	r8, [sp, #16]
   22730:	add	sp, sp, #20
   22734:	pop	{pc}		; (ldr pc, [sp], #4)
   22738:	mov	r0, r4
   2273c:	mov	r1, #46	; 0x2e
   22740:	bl	1230c <strchr@plt>
   22744:	vldr	s15, [pc, #72]	; 22794 <__assert_fail@plt+0x101a0>
   22748:	cmp	r0, #0
   2274c:	vldr	s14, [pc, #68]	; 22798 <__assert_fail@plt+0x101a4>
   22750:	vmoveq.f32	s15, s14
   22754:	b	22718 <__assert_fail@plt+0x10124>
   22758:	mov	r0, r4
   2275c:	b	22720 <__assert_fail@plt+0x1012c>
   22760:	mov	r0, r1
   22764:	bx	lr
   22768:	mov	r2, #5
   2276c:	movw	r1, #16560	; 0x40b0
   22770:	movt	r1, #5
   22774:	mov	r0, r7
   22778:	bl	120b4 <dcgettext@plt>
   2277c:	mov	r2, r0
   22780:	mov	r3, r4
   22784:	str	r5, [sp]
   22788:	mov	r1, r7
   2278c:	mov	r0, #1
   22790:	bl	121ec <error@plt>
   22794:	svccc	0x004ccccd
   22798:	stclcc	12, cr12, [ip, #820]	; 0x334
   2279c:	str	r4, [sp, #-8]!
   227a0:	str	lr, [sp, #4]
   227a4:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   227a8:	mov	r4, r0
   227ac:	movw	r0, #14444	; 0x386c
   227b0:	movt	r0, #5
   227b4:	add	r1, r4, #40	; 0x28
   227b8:	bl	20a3c <__assert_fail@plt+0xe448>
   227bc:	mov	r3, #1065353216	; 0x3f800000
   227c0:	movw	r2, #257	; 0x101
   227c4:	mov	r0, #1
   227c8:	strh	r2, [r4, #16]
   227cc:	str	r3, [r4, #28]
   227d0:	ldr	r4, [sp]
   227d4:	add	sp, sp, #4
   227d8:	pop	{pc}		; (ldr pc, [sp], #4)
   227dc:	mov	r1, #0
   227e0:	str	r4, [sp, #-8]!
   227e4:	str	lr, [sp, #4]
   227e8:	bl	1c170 <__assert_fail@plt+0x9b7c>
   227ec:	mov	r4, r0
   227f0:	movw	r0, #14444	; 0x386c
   227f4:	movt	r0, #5
   227f8:	add	r1, r4, #40	; 0x28
   227fc:	bl	20a3c <__assert_fail@plt+0xe448>
   22800:	mov	r3, #1065353216	; 0x3f800000
   22804:	movw	r2, #257	; 0x101
   22808:	mov	r0, #1
   2280c:	str	r2, [r4, #16]
   22810:	str	r3, [r4, #28]
   22814:	ldr	r4, [sp]
   22818:	add	sp, sp, #4
   2281c:	pop	{pc}		; (ldr pc, [sp], #4)
   22820:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22824:	mov	r4, r1
   22828:	movw	r1, #16608	; 0x40e0
   2282c:	movt	r1, #5
   22830:	strd	r6, [sp, #8]
   22834:	strd	r8, [sp, #16]
   22838:	mov	r8, r2
   2283c:	mov	r2, #5
   22840:	strd	sl, [sp, #24]
   22844:	mov	sl, r0
   22848:	mov	r0, #0
   2284c:	str	lr, [sp, #32]
   22850:	sub	sp, sp, #44	; 0x2c
   22854:	bl	120b4 <dcgettext@plt>
   22858:	cmp	r4, #0
   2285c:	str	r0, [sp, #16]
   22860:	beq	22aa8 <__assert_fail@plt+0x104b4>
   22864:	ldr	r9, [r8]
   22868:	ldr	r6, [r4, r9, lsl #2]
   2286c:	cmp	r6, #0
   22870:	beq	22ae4 <__assert_fail@plt+0x104f0>
   22874:	add	r3, r9, #1
   22878:	movw	r5, #32364	; 0x7e6c
   2287c:	movt	r5, #6
   22880:	ldr	r7, [r5, #28]
   22884:	ldr	r2, [r5, #32]
   22888:	str	r3, [r8]
   2288c:	ldrb	r3, [r6]
   22890:	str	r2, [sp, #20]
   22894:	cmp	r3, #45	; 0x2d
   22898:	beq	22ac8 <__assert_fail@plt+0x104d4>
   2289c:	cmp	r3, #43	; 0x2b
   228a0:	moveq	r3, #1
   228a4:	movne	r3, #2
   228a8:	addeq	fp, r6, #1
   228ac:	movne	fp, r6
   228b0:	str	r3, [sp, #12]
   228b4:	movw	r3, #9140	; 0x23b4
   228b8:	movt	r3, #1
   228bc:	add	r2, sp, #24
   228c0:	mov	r1, #0
   228c4:	mov	r0, fp
   228c8:	bl	36e60 <__assert_fail@plt+0x2486c>
   228cc:	subs	r4, r0, #0
   228d0:	streq	r9, [r8]
   228d4:	beq	22aa8 <__assert_fail@plt+0x104b4>
   228d8:	vldr	d7, [pc, #712]	; 22ba8 <__assert_fail@plt+0x105b4>
   228dc:	add	r0, sp, #32
   228e0:	vldr	d0, [sp, #24]
   228e4:	vmul.f64	d0, d0, d7
   228e8:	bl	12294 <modf@plt>
   228ec:	vldr	d7, [pc, #700]	; 22bb0 <__assert_fail@plt+0x105bc>
   228f0:	vmul.f64	d0, d0, d7
   228f4:	vcmpe.f64	d0, d7
   228f8:	vmrs	APSR_nzcv, fpscr
   228fc:	bpl	22b74 <__assert_fail@plt+0x10580>
   22900:	vmov	s15, r7
   22904:	vldr	d6, [sp, #32]
   22908:	vcmpe.f64	d6, #0.0
   2290c:	vcvt.f64.s32	d7, s15
   22910:	vmrs	APSR_nzcv, fpscr
   22914:	vsub.f64	d7, d7, d6
   22918:	movmi	r3, #1
   2291c:	movpl	r3, #0
   22920:	vcvt.s32.f64	s15, d7
   22924:	vmov	r8, s15
   22928:	cmp	r8, r7
   2292c:	movle	r7, #0
   22930:	movgt	r7, #1
   22934:	cmp	r7, r3
   22938:	bne	22b90 <__assert_fail@plt+0x1059c>
   2293c:	vldr	s15, [sp, #20]
   22940:	vcvt.f64.s32	d7, s15
   22944:	vcmpe.f64	d0, d7
   22948:	vsub.f64	d7, d7, d0
   2294c:	vcvt.s32.f64	s15, d7
   22950:	vmrs	APSR_nzcv, fpscr
   22954:	vmov	r7, s15
   22958:	bgt	22aec <__assert_fail@plt+0x104f8>
   2295c:	mov	r1, r6
   22960:	mov	r0, sl
   22964:	bl	1c170 <__assert_fail@plt+0x9b7c>
   22968:	ldr	r3, [r5, #28]
   2296c:	movw	r2, #17671	; 0x4507
   22970:	movt	r2, #49710	; 0xc22e
   22974:	str	r8, [r0, #48]	; 0x30
   22978:	mov	r6, r0
   2297c:	ldr	r1, [sp, #12]
   22980:	vldr	s14, [pc, #560]	; 22bb8 <__assert_fail@plt+0x105c4>
   22984:	sub	r8, r3, r8
   22988:	asr	r3, r8, #31
   2298c:	str	r1, [r0, #44]	; 0x2c
   22990:	smull	r1, r2, r2, r8
   22994:	str	r7, [r0, #52]	; 0x34
   22998:	add	r8, r2, r8
   2299c:	rsb	r3, r3, r8, asr #16
   229a0:	vmov	s15, r3
   229a4:	vcvt.f32.s32	s15, s15
   229a8:	vcmpe.f32	s15, s14
   229ac:	vmrs	APSR_nzcv, fpscr
   229b0:	bmi	22b08 <__assert_fail@plt+0x10514>
   229b4:	vldr	s14, [pc, #512]	; 22bbc <__assert_fail@plt+0x105c8>
   229b8:	vcmpe.f32	s15, s14
   229bc:	vmrs	APSR_nzcv, fpscr
   229c0:	bmi	22b00 <__assert_fail@plt+0x1050c>
   229c4:	vldr	s12, [pc, #500]	; 22bc0 <__assert_fail@plt+0x105cc>
   229c8:	vldr	s14, [pc, #500]	; 22bc4 <__assert_fail@plt+0x105d0>
   229cc:	vldr	s13, [pc, #500]	; 22bc8 <__assert_fail@plt+0x105d4>
   229d0:	vcmpe.f32	s15, s12
   229d4:	vmrs	APSR_nzcv, fpscr
   229d8:	vmovle.f32	s15, s13
   229dc:	vmovgt.f32	s15, s14
   229e0:	ldr	r3, [r5, #44]	; 0x2c
   229e4:	vstr	s15, [r6, #28]
   229e8:	tst	r3, #1
   229ec:	beq	22aa8 <__assert_fail@plt+0x104b4>
   229f0:	movw	r5, #30024	; 0x7548
   229f4:	movt	r5, #6
   229f8:	ldr	r2, [r6, #4]
   229fc:	movw	r1, #16704	; 0x4140
   22a00:	movt	r1, #5
   22a04:	ldr	r0, [r5]
   22a08:	bl	1233c <fprintf@plt>
   22a0c:	ldr	r3, [sp, #12]
   22a10:	ldr	r0, [r5]
   22a14:	cmp	r3, #0
   22a18:	beq	22b10 <__assert_fail@plt+0x1051c>
   22a1c:	cmp	r3, #1
   22a20:	beq	22b60 <__assert_fail@plt+0x1056c>
   22a24:	movw	r3, #16760	; 0x4178
   22a28:	movt	r3, #5
   22a2c:	movw	r2, #16764	; 0x417c
   22a30:	movt	r2, #5
   22a34:	movw	r1, #16728	; 0x4158
   22a38:	movt	r1, #5
   22a3c:	bl	1233c <fprintf@plt>
   22a40:	ldr	r7, [r6, #48]	; 0x30
   22a44:	add	r0, sp, #32
   22a48:	ldr	r8, [r5]
   22a4c:	str	r7, [sp, #32]
   22a50:	bl	120a8 <ctime@plt>
   22a54:	asr	r3, r7, #31
   22a58:	mov	r2, r7
   22a5c:	movw	r1, #16788	; 0x4194
   22a60:	movt	r1, #5
   22a64:	str	r0, [sp]
   22a68:	mov	r0, r8
   22a6c:	bl	1233c <fprintf@plt>
   22a70:	ldr	r2, [r6, #48]	; 0x30
   22a74:	add	r0, sp, #32
   22a78:	ldr	r6, [r5]
   22a7c:	add	r5, r2, #86016	; 0x15000
   22a80:	add	r5, r5, #384	; 0x180
   22a84:	str	r5, [sp, #32]
   22a88:	bl	120a8 <ctime@plt>
   22a8c:	movw	r1, #16768	; 0x4180
   22a90:	movt	r1, #5
   22a94:	asr	r3, r5, #31
   22a98:	mov	r2, r5
   22a9c:	str	r0, [sp]
   22aa0:	mov	r0, r6
   22aa4:	bl	1233c <fprintf@plt>
   22aa8:	mov	r0, r4
   22aac:	add	sp, sp, #44	; 0x2c
   22ab0:	ldrd	r4, [sp]
   22ab4:	ldrd	r6, [sp, #8]
   22ab8:	ldrd	r8, [sp, #16]
   22abc:	ldrd	sl, [sp, #24]
   22ac0:	add	sp, sp, #32
   22ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   22ac8:	add	r7, r7, #86016	; 0x15000
   22acc:	mov	r3, #0
   22ad0:	add	r7, r7, #380	; 0x17c
   22ad4:	add	fp, r6, #1
   22ad8:	add	r7, r7, #3
   22adc:	str	r3, [sp, #12]
   22ae0:	b	228b4 <__assert_fail@plt+0x102c0>
   22ae4:	mov	r4, r6
   22ae8:	b	22aa8 <__assert_fail@plt+0x104b4>
   22aec:	add	r7, r7, #998244352	; 0x3b800000
   22af0:	sub	r8, r8, #1
   22af4:	add	r7, r7, #1753088	; 0x1ac000
   22af8:	add	r7, r7, #2560	; 0xa00
   22afc:	b	2295c <__assert_fail@plt+0x10368>
   22b00:	vldr	s15, [pc, #188]	; 22bc4 <__assert_fail@plt+0x105d0>
   22b04:	b	229e0 <__assert_fail@plt+0x103ec>
   22b08:	vldr	s15, [pc, #188]	; 22bcc <__assert_fail@plt+0x105d8>
   22b0c:	b	229e0 <__assert_fail@plt+0x103ec>
   22b10:	movw	r3, #16720	; 0x4150
   22b14:	movt	r3, #5
   22b18:	movw	r2, #16724	; 0x4154
   22b1c:	movt	r2, #5
   22b20:	movw	r1, #16728	; 0x4158
   22b24:	movt	r1, #5
   22b28:	bl	1233c <fprintf@plt>
   22b2c:	ldr	r6, [r6, #48]	; 0x30
   22b30:	add	r0, sp, #32
   22b34:	ldr	r5, [r5]
   22b38:	str	r6, [sp, #32]
   22b3c:	bl	120a8 <ctime@plt>
   22b40:	mov	r2, r6
   22b44:	asr	r3, r6, #31
   22b48:	movw	r1, #16788	; 0x4194
   22b4c:	movt	r1, #5
   22b50:	str	r0, [sp]
   22b54:	mov	r0, r5
   22b58:	bl	1233c <fprintf@plt>
   22b5c:	b	22aa8 <__assert_fail@plt+0x104b4>
   22b60:	movw	r3, #16752	; 0x4170
   22b64:	movt	r3, #5
   22b68:	movw	r2, #16756	; 0x4174
   22b6c:	movt	r2, #5
   22b70:	b	22b20 <__assert_fail@plt+0x1052c>
   22b74:	movw	r1, #15144	; 0x3b28
   22b78:	movt	r1, #5
   22b7c:	ldr	r3, [pc, #76]	; 22bd0 <__assert_fail@plt+0x105dc>
   22b80:	movw	r0, #16676	; 0x4124
   22b84:	movt	r0, #5
   22b88:	movw	r2, #3149	; 0xc4d
   22b8c:	bl	125f4 <__assert_fail@plt>
   22b90:	mov	r3, fp
   22b94:	mov	r1, #0
   22b98:	ldr	r2, [sp, #16]
   22b9c:	mov	r0, #1
   22ba0:	bl	121ec <error@plt>
   22ba4:	nop	{0}
   22ba8:	andeq	r0, r0, r0
   22bac:	rscsmi	r1, r5, r0, lsl #16
   22bb0:	andeq	r0, r0, r0
   22bb4:	bicmi	ip, sp, r5, ror #26
   22bb8:	stclcc	12, cr12, [ip, #820]	; 0x334
   22bbc:	svccc	0x00800000
   22bc0:	sbcmi	r0, r8, #0
   22bc4:			; <UNDEFINED> instruction: 0x3e99999a
   22bc8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   22bcc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   22bd0:	andeq	r3, r5, r4, ror #10
   22bd4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22bd8:	mov	r5, r1
   22bdc:	strd	r6, [sp, #8]
   22be0:	mov	r6, r0
   22be4:	mov	r7, r2
   22be8:	str	r8, [sp, #16]
   22bec:	str	lr, [sp, #20]
   22bf0:	bl	35978 <__assert_fail@plt+0x23384>
   22bf4:	subs	r4, r0, #0
   22bf8:	bne	22c14 <__assert_fail@plt+0x10620>
   22bfc:	mov	r0, r4
   22c00:	ldrd	r4, [sp]
   22c04:	ldrd	r6, [sp, #8]
   22c08:	ldr	r8, [sp, #16]
   22c0c:	add	sp, sp, #20
   22c10:	pop	{pc}		; (ldr pc, [sp], #4)
   22c14:	bl	12348 <__errno_location@plt>
   22c18:	ldr	r3, [r0]
   22c1c:	cmp	r3, #2
   22c20:	beq	22c2c <__assert_fail@plt+0x10638>
   22c24:	cmp	r3, #20
   22c28:	bne	22bfc <__assert_fail@plt+0x10608>
   22c2c:	movw	r3, #32364	; 0x7e6c
   22c30:	movt	r3, #6
   22c34:	ldr	r3, [r3, #44]	; 0x2c
   22c38:	tst	r3, #2
   22c3c:	bne	22c64 <__assert_fail@plt+0x10670>
   22c40:	mov	r2, r7
   22c44:	mov	r1, r5
   22c48:	ldrd	r4, [sp]
   22c4c:	mov	r0, r6
   22c50:	ldrd	r6, [sp, #8]
   22c54:	ldr	r8, [sp, #16]
   22c58:	ldr	lr, [sp, #20]
   22c5c:	add	sp, sp, #24
   22c60:	b	35b4c <__assert_fail@plt+0x23558>
   22c64:	movw	r3, #30024	; 0x7548
   22c68:	movt	r3, #6
   22c6c:	movw	r1, #16092	; 0x3edc
   22c70:	movt	r1, #5
   22c74:	ldr	r0, [r3]
   22c78:	mov	r2, r5
   22c7c:	bl	1233c <fprintf@plt>
   22c80:	b	22c40 <__assert_fail@plt+0x1064c>
   22c84:	cmp	r1, #0
   22c88:	strd	r4, [sp, #-20]!	; 0xffffffec
   22c8c:	mov	r4, r2
   22c90:	ldr	r3, [r2]
   22c94:	strd	r6, [sp, #8]
   22c98:	str	lr, [sp, #16]
   22c9c:	sub	sp, sp, #28
   22ca0:	beq	22d08 <__assert_fail@plt+0x10714>
   22ca4:	ldr	r5, [r1, r3, lsl #2]
   22ca8:	cmp	r5, #0
   22cac:	beq	22d08 <__assert_fail@plt+0x10714>
   22cb0:	add	r3, r3, #1
   22cb4:	mov	r6, r0
   22cb8:	str	r3, [r2]
   22cbc:	ldrb	r3, [r5]
   22cc0:	cmp	r3, #43	; 0x2b
   22cc4:	beq	22d9c <__assert_fail@plt+0x107a8>
   22cc8:	cmp	r3, #45	; 0x2d
   22ccc:	movne	r0, r5
   22cd0:	movne	r7, #2
   22cd4:	bne	22ce0 <__assert_fail@plt+0x106ec>
   22cd8:	add	r0, r5, #1
   22cdc:	mov	r7, #1
   22ce0:	movw	r1, #9500	; 0x251c
   22ce4:	movt	r1, #5
   22ce8:	add	r3, sp, #16
   22cec:	mov	r2, #10
   22cf0:	str	r1, [sp]
   22cf4:	add	r1, sp, #12
   22cf8:	bl	37528 <__assert_fail@plt+0x24f34>
   22cfc:	cmp	r0, #0
   22d00:	beq	22d28 <__assert_fail@plt+0x10734>
   22d04:	ldr	r3, [r4]
   22d08:	sub	r3, r3, #1
   22d0c:	mov	r0, #0
   22d10:	str	r3, [r4]
   22d14:	add	sp, sp, #28
   22d18:	ldrd	r4, [sp]
   22d1c:	ldrd	r6, [sp, #8]
   22d20:	add	sp, sp, #16
   22d24:	pop	{pc}		; (ldr pc, [sp], #4)
   22d28:	mov	r1, r5
   22d2c:	mov	r0, r6
   22d30:	bl	1c170 <__assert_fail@plt+0x9b7c>
   22d34:	movw	r1, #32364	; 0x7e6c
   22d38:	movt	r1, #6
   22d3c:	ldrd	r2, [sp, #16]
   22d40:	mov	r4, r0
   22d44:	ldr	r1, [r1, #44]	; 0x2c
   22d48:	str	r7, [r0, #40]	; 0x28
   22d4c:	strd	r2, [r0, #48]	; 0x30
   22d50:	tst	r1, #1
   22d54:	bne	22da8 <__assert_fail@plt+0x107b4>
   22d58:	cmp	r3, #0
   22d5c:	cmpeq	r2, #1
   22d60:	beq	22d88 <__assert_fail@plt+0x10794>
   22d64:	cmp	r3, #0
   22d68:	mov	r0, #1
   22d6c:	cmpeq	r2, #2
   22d70:	movweq	r3, #55050	; 0xd70a
   22d74:	movwne	r3, #4719	; 0x126f
   22d78:	movteq	r3, #15395	; 0x3c23
   22d7c:	movtne	r3, #14979	; 0x3a83
   22d80:	str	r3, [r4, #28]
   22d84:	b	22d14 <__assert_fail@plt+0x10720>
   22d88:	movw	r3, #28836	; 0x70a4
   22d8c:	movt	r3, #16253	; 0x3f7d
   22d90:	mov	r0, #1
   22d94:	str	r3, [r4, #28]
   22d98:	b	22d14 <__assert_fail@plt+0x10720>
   22d9c:	add	r0, r5, #1
   22da0:	mov	r7, #0
   22da4:	b	22ce0 <__assert_fail@plt+0x106ec>
   22da8:	movw	r5, #30024	; 0x7548
   22dac:	movt	r5, #6
   22db0:	ldr	r2, [r0, #4]
   22db4:	movw	r1, #16704	; 0x4140
   22db8:	movt	r1, #5
   22dbc:	ldr	r0, [r5]
   22dc0:	bl	1233c <fprintf@plt>
   22dc4:	cmp	r7, #0
   22dc8:	ldr	r0, [r5]
   22dcc:	bne	22e08 <__assert_fail@plt+0x10814>
   22dd0:	movw	r2, #16724	; 0x4154
   22dd4:	movt	r2, #5
   22dd8:	movw	r3, #16720	; 0x4150
   22ddc:	movt	r3, #5
   22de0:	movw	r1, #16728	; 0x4158
   22de4:	movt	r1, #5
   22de8:	bl	1233c <fprintf@plt>
   22dec:	movw	r1, #16800	; 0x41a0
   22df0:	movt	r1, #5
   22df4:	ldr	r0, [r5]
   22df8:	ldrd	r2, [r4, #48]	; 0x30
   22dfc:	bl	1233c <fprintf@plt>
   22e00:	ldrd	r2, [r4, #48]	; 0x30
   22e04:	b	22d58 <__assert_fail@plt+0x10764>
   22e08:	cmp	r7, #1
   22e0c:	movw	ip, #16764	; 0x417c
   22e10:	movt	ip, #5
   22e14:	movw	r1, #16796	; 0x419c
   22e18:	movt	r1, #5
   22e1c:	movw	r2, #16756	; 0x4174
   22e20:	movt	r2, #5
   22e24:	movw	r3, #16752	; 0x4170
   22e28:	movt	r3, #5
   22e2c:	movne	r2, ip
   22e30:	movne	r3, r1
   22e34:	b	22de0 <__assert_fail@plt+0x107ec>
   22e38:	strd	r4, [sp, #-20]!	; 0xffffffec
   22e3c:	mov	r4, r1
   22e40:	strd	r6, [sp, #8]
   22e44:	mov	r7, r0
   22e48:	mov	r6, r2
   22e4c:	str	lr, [sp, #16]
   22e50:	sub	sp, sp, #108	; 0x6c
   22e54:	mov	r0, sp
   22e58:	bl	1c458 <__assert_fail@plt+0x9e64>
   22e5c:	cmp	r4, #0
   22e60:	beq	22f34 <__assert_fail@plt+0x10940>
   22e64:	ldr	r3, [r6]
   22e68:	ldr	r4, [r4, r3, lsl #2]
   22e6c:	cmp	r4, #0
   22e70:	beq	22f34 <__assert_fail@plt+0x10940>
   22e74:	add	r3, r3, #1
   22e78:	movw	r5, #32364	; 0x7e6c
   22e7c:	movt	r5, #6
   22e80:	mov	r1, sp
   22e84:	mov	r0, r4
   22e88:	str	r3, [r6]
   22e8c:	ldr	r3, [r5, #52]	; 0x34
   22e90:	blx	r3
   22e94:	cmp	r0, #0
   22e98:	bne	22f5c <__assert_fail@plt+0x10968>
   22e9c:	mov	r1, r4
   22ea0:	mov	r0, r7
   22ea4:	bl	1c170 <__assert_fail@plt+0x9b7c>
   22ea8:	ldr	r1, [r5, #28]
   22eac:	movw	r3, #17671	; 0x4507
   22eb0:	movt	r3, #49710	; 0xc22e
   22eb4:	mov	ip, r0
   22eb8:	mov	r6, #0
   22ebc:	ldr	r2, [sp, #80]	; 0x50
   22ec0:	mov	r7, #0
   22ec4:	vldr	s14, [pc, #160]	; 22f6c <__assert_fail@plt+0x10978>
   22ec8:	ldrd	r4, [sp, #80]	; 0x50
   22ecc:	sub	r1, r1, r2
   22ed0:	strd	r6, [ip, #40]	; 0x28
   22ed4:	asr	r2, r1, #31
   22ed8:	smull	r0, r3, r3, r1
   22edc:	strd	r4, [ip, #48]	; 0x30
   22ee0:	add	r3, r3, r1
   22ee4:	rsb	r3, r2, r3, asr #16
   22ee8:	vmov	s15, r3
   22eec:	vcvt.f32.s32	s15, s15
   22ef0:	vcmpe.f32	s15, s14
   22ef4:	vmrs	APSR_nzcv, fpscr
   22ef8:	bmi	22f4c <__assert_fail@plt+0x10958>
   22efc:	vldr	s14, [pc, #108]	; 22f70 <__assert_fail@plt+0x1097c>
   22f00:	vcmpe.f32	s15, s14
   22f04:	vmrs	APSR_nzcv, fpscr
   22f08:	bmi	22f54 <__assert_fail@plt+0x10960>
   22f0c:	vldr	s12, [pc, #96]	; 22f74 <__assert_fail@plt+0x10980>
   22f10:	vldr	s14, [pc, #96]	; 22f78 <__assert_fail@plt+0x10984>
   22f14:	vldr	s13, [pc, #96]	; 22f7c <__assert_fail@plt+0x10988>
   22f18:	vcmpe.f32	s15, s12
   22f1c:	vmrs	APSR_nzcv, fpscr
   22f20:	vmovle.f32	s15, s13
   22f24:	vmovgt.f32	s15, s14
   22f28:	mov	r0, #1
   22f2c:	vstr	s15, [ip, #28]
   22f30:	b	22f38 <__assert_fail@plt+0x10944>
   22f34:	mov	r0, r4
   22f38:	add	sp, sp, #108	; 0x6c
   22f3c:	ldrd	r4, [sp]
   22f40:	ldrd	r6, [sp, #8]
   22f44:	add	sp, sp, #16
   22f48:	pop	{pc}		; (ldr pc, [sp], #4)
   22f4c:	vldr	s15, [pc, #44]	; 22f80 <__assert_fail@plt+0x1098c>
   22f50:	b	22f28 <__assert_fail@plt+0x10934>
   22f54:	vldr	s15, [pc, #28]	; 22f78 <__assert_fail@plt+0x10984>
   22f58:	b	22f28 <__assert_fail@plt+0x10934>
   22f5c:	bl	12348 <__errno_location@plt>
   22f60:	mov	r1, r4
   22f64:	ldr	r0, [r0]
   22f68:	bl	1d778 <__assert_fail@plt+0xb184>
   22f6c:	stclcc	12, cr12, [ip, #820]	; 0x334
   22f70:	svccc	0x00800000
   22f74:	sbcmi	r0, r8, #0
   22f78:			; <UNDEFINED> instruction: 0x3e99999a
   22f7c:	mcrcc	14, 6, sl, cr7, cr4, {0}
   22f80:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   22f84:	strd	r4, [sp, #-20]!	; 0xffffffec
   22f88:	mov	r4, r1
   22f8c:	strd	r6, [sp, #8]
   22f90:	mov	r7, r0
   22f94:	mov	r6, r2
   22f98:	str	lr, [sp, #16]
   22f9c:	sub	sp, sp, #108	; 0x6c
   22fa0:	mov	r0, sp
   22fa4:	bl	1c458 <__assert_fail@plt+0x9e64>
   22fa8:	cmp	r4, #0
   22fac:	beq	23080 <__assert_fail@plt+0x10a8c>
   22fb0:	ldr	r3, [r6]
   22fb4:	ldr	r4, [r4, r3, lsl #2]
   22fb8:	cmp	r4, #0
   22fbc:	beq	23080 <__assert_fail@plt+0x10a8c>
   22fc0:	add	r3, r3, #1
   22fc4:	movw	r5, #32364	; 0x7e6c
   22fc8:	movt	r5, #6
   22fcc:	mov	r1, sp
   22fd0:	mov	r0, r4
   22fd4:	str	r3, [r6]
   22fd8:	ldr	r3, [r5, #52]	; 0x34
   22fdc:	blx	r3
   22fe0:	cmp	r0, #0
   22fe4:	bne	230a8 <__assert_fail@plt+0x10ab4>
   22fe8:	mov	r1, r4
   22fec:	mov	r0, r7
   22ff0:	bl	1c170 <__assert_fail@plt+0x9b7c>
   22ff4:	ldr	r1, [r5, #28]
   22ff8:	movw	r3, #17671	; 0x4507
   22ffc:	movt	r3, #49710	; 0xc22e
   23000:	mov	ip, r0
   23004:	mov	r6, #3
   23008:	ldr	r2, [sp, #80]	; 0x50
   2300c:	mov	r7, #0
   23010:	vldr	s14, [pc, #160]	; 230b8 <__assert_fail@plt+0x10ac4>
   23014:	ldrd	r4, [sp, #80]	; 0x50
   23018:	sub	r1, r1, r2
   2301c:	strd	r6, [ip, #40]	; 0x28
   23020:	asr	r2, r1, #31
   23024:	smull	r0, r3, r3, r1
   23028:	strd	r4, [ip, #48]	; 0x30
   2302c:	add	r3, r3, r1
   23030:	rsb	r3, r2, r3, asr #16
   23034:	vmov	s15, r3
   23038:	vcvt.f32.s32	s15, s15
   2303c:	vcmpe.f32	s15, s14
   23040:	vmrs	APSR_nzcv, fpscr
   23044:	bmi	23098 <__assert_fail@plt+0x10aa4>
   23048:	vldr	s14, [pc, #108]	; 230bc <__assert_fail@plt+0x10ac8>
   2304c:	vcmpe.f32	s15, s14
   23050:	vmrs	APSR_nzcv, fpscr
   23054:	bmi	230a0 <__assert_fail@plt+0x10aac>
   23058:	vldr	s12, [pc, #96]	; 230c0 <__assert_fail@plt+0x10acc>
   2305c:	vldr	s14, [pc, #96]	; 230c4 <__assert_fail@plt+0x10ad0>
   23060:	vldr	s13, [pc, #96]	; 230c8 <__assert_fail@plt+0x10ad4>
   23064:	vcmpe.f32	s15, s12
   23068:	vmrs	APSR_nzcv, fpscr
   2306c:	vmovle.f32	s15, s13
   23070:	vmovgt.f32	s15, s14
   23074:	mov	r0, #1
   23078:	vstr	s15, [ip, #28]
   2307c:	b	23084 <__assert_fail@plt+0x10a90>
   23080:	mov	r0, r4
   23084:	add	sp, sp, #108	; 0x6c
   23088:	ldrd	r4, [sp]
   2308c:	ldrd	r6, [sp, #8]
   23090:	add	sp, sp, #16
   23094:	pop	{pc}		; (ldr pc, [sp], #4)
   23098:	vldr	s15, [pc, #44]	; 230cc <__assert_fail@plt+0x10ad8>
   2309c:	b	23074 <__assert_fail@plt+0x10a80>
   230a0:	vldr	s15, [pc, #28]	; 230c4 <__assert_fail@plt+0x10ad0>
   230a4:	b	23074 <__assert_fail@plt+0x10a80>
   230a8:	bl	12348 <__errno_location@plt>
   230ac:	mov	r1, r4
   230b0:	ldr	r0, [r0]
   230b4:	bl	1d778 <__assert_fail@plt+0xb184>
   230b8:	stclcc	12, cr12, [ip, #820]	; 0x334
   230bc:	svccc	0x00800000
   230c0:	sbcmi	r0, r8, #0
   230c4:			; <UNDEFINED> instruction: 0x3e99999a
   230c8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   230cc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   230d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   230d4:	mov	r4, r1
   230d8:	strd	r6, [sp, #8]
   230dc:	mov	r7, r0
   230e0:	mov	r6, r2
   230e4:	str	lr, [sp, #16]
   230e8:	sub	sp, sp, #108	; 0x6c
   230ec:	mov	r0, sp
   230f0:	bl	1c458 <__assert_fail@plt+0x9e64>
   230f4:	cmp	r4, #0
   230f8:	beq	231cc <__assert_fail@plt+0x10bd8>
   230fc:	ldr	r3, [r6]
   23100:	ldr	r4, [r4, r3, lsl #2]
   23104:	cmp	r4, #0
   23108:	beq	231cc <__assert_fail@plt+0x10bd8>
   2310c:	add	r3, r3, #1
   23110:	movw	r5, #32364	; 0x7e6c
   23114:	movt	r5, #6
   23118:	mov	r1, sp
   2311c:	mov	r0, r4
   23120:	str	r3, [r6]
   23124:	ldr	r3, [r5, #52]	; 0x34
   23128:	blx	r3
   2312c:	cmp	r0, #0
   23130:	bne	231f4 <__assert_fail@plt+0x10c00>
   23134:	mov	r1, r4
   23138:	mov	r0, r7
   2313c:	bl	1c170 <__assert_fail@plt+0x9b7c>
   23140:	ldr	r1, [r5, #28]
   23144:	movw	r3, #17671	; 0x4507
   23148:	movt	r3, #49710	; 0xc22e
   2314c:	mov	ip, r0
   23150:	mov	r6, #2
   23154:	ldr	r2, [sp, #80]	; 0x50
   23158:	mov	r7, #0
   2315c:	vldr	s14, [pc, #160]	; 23204 <__assert_fail@plt+0x10c10>
   23160:	ldrd	r4, [sp, #80]	; 0x50
   23164:	sub	r1, r1, r2
   23168:	strd	r6, [ip, #40]	; 0x28
   2316c:	asr	r2, r1, #31
   23170:	smull	r0, r3, r3, r1
   23174:	strd	r4, [ip, #48]	; 0x30
   23178:	add	r3, r3, r1
   2317c:	rsb	r3, r2, r3, asr #16
   23180:	vmov	s15, r3
   23184:	vcvt.f32.s32	s15, s15
   23188:	vcmpe.f32	s15, s14
   2318c:	vmrs	APSR_nzcv, fpscr
   23190:	bmi	231e4 <__assert_fail@plt+0x10bf0>
   23194:	vldr	s14, [pc, #108]	; 23208 <__assert_fail@plt+0x10c14>
   23198:	vcmpe.f32	s15, s14
   2319c:	vmrs	APSR_nzcv, fpscr
   231a0:	bmi	231ec <__assert_fail@plt+0x10bf8>
   231a4:	vldr	s12, [pc, #96]	; 2320c <__assert_fail@plt+0x10c18>
   231a8:	vldr	s14, [pc, #96]	; 23210 <__assert_fail@plt+0x10c1c>
   231ac:	vldr	s13, [pc, #96]	; 23214 <__assert_fail@plt+0x10c20>
   231b0:	vcmpe.f32	s15, s12
   231b4:	vmrs	APSR_nzcv, fpscr
   231b8:	vmovle.f32	s15, s13
   231bc:	vmovgt.f32	s15, s14
   231c0:	mov	r0, #1
   231c4:	vstr	s15, [ip, #28]
   231c8:	b	231d0 <__assert_fail@plt+0x10bdc>
   231cc:	mov	r0, r4
   231d0:	add	sp, sp, #108	; 0x6c
   231d4:	ldrd	r4, [sp]
   231d8:	ldrd	r6, [sp, #8]
   231dc:	add	sp, sp, #16
   231e0:	pop	{pc}		; (ldr pc, [sp], #4)
   231e4:	vldr	s15, [pc, #44]	; 23218 <__assert_fail@plt+0x10c24>
   231e8:	b	231c0 <__assert_fail@plt+0x10bcc>
   231ec:	vldr	s15, [pc, #28]	; 23210 <__assert_fail@plt+0x10c1c>
   231f0:	b	231c0 <__assert_fail@plt+0x10bcc>
   231f4:	bl	12348 <__errno_location@plt>
   231f8:	mov	r1, r4
   231fc:	ldr	r0, [r0]
   23200:	bl	1d778 <__assert_fail@plt+0xb184>
   23204:	stclcc	12, cr12, [ip, #820]	; 0x334
   23208:	svccc	0x00800000
   2320c:	sbcmi	r0, r8, #0
   23210:			; <UNDEFINED> instruction: 0x3e99999a
   23214:	mcrcc	14, 6, sl, cr7, cr4, {0}
   23218:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   2321c:	cmp	r1, #0
   23220:	beq	23338 <__assert_fail@plt+0x10d44>
   23224:	ldr	ip, [r2]
   23228:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2322c:	ldr	r4, [r1, ip, lsl #2]
   23230:	strd	r6, [sp, #8]
   23234:	str	r8, [sp, #16]
   23238:	str	lr, [sp, #20]
   2323c:	sub	sp, sp, #8
   23240:	cmp	r4, #0
   23244:	beq	23330 <__assert_fail@plt+0x10d3c>
   23248:	add	ip, ip, #1
   2324c:	mov	r3, r2
   23250:	movw	r2, #32364	; 0x7e6c
   23254:	movt	r2, #6
   23258:	movw	r1, #21184	; 0x52c0
   2325c:	movt	r1, #1
   23260:	ldr	r8, [r2, #60]	; 0x3c
   23264:	mov	r2, r4
   23268:	str	ip, [r3]
   2326c:	mov	r6, #0
   23270:	bl	1c124 <__assert_fail@plt+0x9b30>
   23274:	mov	r7, r0
   23278:	mov	r0, #32
   2327c:	strh	r6, [r7, #18]
   23280:	bl	36864 <__assert_fail@plt+0x24270>
   23284:	mov	r5, r0
   23288:	mov	r3, #100	; 0x64
   2328c:	mov	r0, r3
   23290:	str	r5, [r7, #40]	; 0x28
   23294:	str	r3, [r5, #4]
   23298:	bl	36864 <__assert_fail@plt+0x24270>
   2329c:	str	r0, [r5]
   232a0:	mov	r0, r8
   232a4:	str	r6, [r5, #16]
   232a8:	bl	4d44c <__assert_fail@plt+0x3ae58>
   232ac:	mov	r0, r4
   232b0:	str	r8, [r5, #12]
   232b4:	str	r6, [r5, #20]
   232b8:	bl	12300 <strlen@plt>
   232bc:	mov	r1, r0
   232c0:	mov	r2, r5
   232c4:	mov	r0, r4
   232c8:	bl	4d3c8 <__assert_fail@plt+0x3add4>
   232cc:	subs	r5, r0, #0
   232d0:	bne	23340 <__assert_fail@plt+0x10d4c>
   232d4:	movw	r1, #14320	; 0x37f0
   232d8:	movt	r1, #5
   232dc:	mov	r0, r4
   232e0:	bl	12528 <strpbrk@plt>
   232e4:	cmp	r0, #0
   232e8:	beq	23310 <__assert_fail@plt+0x10d1c>
   232ec:	vldr	s15, [pc, #120]	; 2336c <__assert_fail@plt+0x10d78>
   232f0:	mov	r0, #1
   232f4:	vstr	s15, [r7, #28]
   232f8:	add	sp, sp, #8
   232fc:	ldrd	r4, [sp]
   23300:	ldrd	r6, [sp, #8]
   23304:	ldr	r8, [sp, #16]
   23308:	add	sp, sp, #20
   2330c:	pop	{pc}		; (ldr pc, [sp], #4)
   23310:	mov	r0, r4
   23314:	mov	r1, #46	; 0x2e
   23318:	bl	1230c <strchr@plt>
   2331c:	vldr	s15, [pc, #72]	; 2336c <__assert_fail@plt+0x10d78>
   23320:	cmp	r0, #0
   23324:	vldr	s14, [pc, #68]	; 23370 <__assert_fail@plt+0x10d7c>
   23328:	vmoveq.f32	s15, s14
   2332c:	b	232f0 <__assert_fail@plt+0x10cfc>
   23330:	mov	r0, r4
   23334:	b	232f8 <__assert_fail@plt+0x10d04>
   23338:	mov	r0, r1
   2333c:	bx	lr
   23340:	mov	r2, #5
   23344:	movw	r1, #16560	; 0x40b0
   23348:	movt	r1, #5
   2334c:	mov	r0, r6
   23350:	bl	120b4 <dcgettext@plt>
   23354:	mov	r2, r0
   23358:	mov	r3, r4
   2335c:	str	r5, [sp]
   23360:	mov	r1, r6
   23364:	mov	r0, #1
   23368:	bl	121ec <error@plt>
   2336c:	svccc	0x004ccccd
   23370:	stclcc	12, cr12, [ip, #820]	; 0x334
   23374:	movw	r3, #31952	; 0x7cd0
   23378:	movt	r3, #6
   2337c:	str	r4, [sp, #-8]!
   23380:	ldr	r0, [r3]
   23384:	movw	r2, #32364	; 0x7e6c
   23388:	movt	r2, #6
   2338c:	mov	r1, #1
   23390:	str	lr, [sp, #4]
   23394:	strb	r1, [r2, #12]
   23398:	cmp	r0, #0
   2339c:	beq	233c8 <__assert_fail@plt+0x10dd4>
   233a0:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   233a4:	mov	r3, r0
   233a8:	mov	r2, #1065353216	; 0x3f800000
   233ac:	ldr	r4, [sp]
   233b0:	mov	r1, #0
   233b4:	add	sp, sp, #4
   233b8:	mov	r0, #1
   233bc:	strh	r1, [r3, #18]
   233c0:	str	r2, [r3, #28]
   233c4:	pop	{pc}		; (ldr pc, [sp], #4)
   233c8:	ldr	ip, [pc, #44]	; 233fc <__assert_fail@plt+0x10e08>
   233cc:	mov	r1, r0
   233d0:	mov	r2, ip
   233d4:	ldr	r0, [r2, #20]
   233d8:	add	r1, r1, #1
   233dc:	cmp	r0, #0
   233e0:	beq	233a0 <__assert_fail@plt+0x10dac>
   233e4:	ldr	r0, [r2, #16]!
   233e8:	cmp	r0, #1
   233ec:	bne	233d4 <__assert_fail@plt+0x10de0>
   233f0:	add	r0, ip, r1, lsl #4
   233f4:	str	r0, [r3]
   233f8:	b	233a0 <__assert_fail@plt+0x10dac>
   233fc:	strdeq	r2, [r5], -r4
   23400:	movw	r3, #31952	; 0x7cd0
   23404:	movt	r3, #6
   23408:	str	r4, [sp, #-8]!
   2340c:	ldr	r0, [r3]
   23410:	mov	r1, #0
   23414:	movw	r2, #32364	; 0x7e6c
   23418:	movt	r2, #6
   2341c:	str	lr, [sp, #4]
   23420:	strb	r1, [r2, #16]
   23424:	cmp	r0, r1
   23428:	beq	23454 <__assert_fail@plt+0x10e60>
   2342c:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   23430:	mov	r3, r0
   23434:	mov	r2, #1065353216	; 0x3f800000
   23438:	ldr	r4, [sp]
   2343c:	mov	r1, #0
   23440:	add	sp, sp, #4
   23444:	mov	r0, #1
   23448:	strh	r1, [r3, #18]
   2344c:	str	r2, [r3, #28]
   23450:	pop	{pc}		; (ldr pc, [sp], #4)
   23454:	ldr	ip, [pc, #44]	; 23488 <__assert_fail@plt+0x10e94>
   23458:	mov	r1, r0
   2345c:	mov	r2, ip
   23460:	ldr	r0, [r2, #20]
   23464:	add	r1, r1, #1
   23468:	cmp	r0, #0
   2346c:	beq	2342c <__assert_fail@plt+0x10e38>
   23470:	ldr	r0, [r2, #16]!
   23474:	cmp	r0, #1
   23478:	bne	23460 <__assert_fail@plt+0x10e6c>
   2347c:	add	r0, ip, r1, lsl #4
   23480:	str	r0, [r3]
   23484:	b	2342c <__assert_fail@plt+0x10e38>
   23488:	strdeq	r2, [r5], -r4
   2348c:	movw	r3, #31952	; 0x7cd0
   23490:	movt	r3, #6
   23494:	str	r4, [sp, #-8]!
   23498:	ldr	r0, [r3]
   2349c:	movw	r2, #32364	; 0x7e6c
   234a0:	movt	r2, #6
   234a4:	mov	r1, #1
   234a8:	str	lr, [sp, #4]
   234ac:	strb	r1, [r2, #13]
   234b0:	cmp	r0, #0
   234b4:	beq	234e0 <__assert_fail@plt+0x10eec>
   234b8:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   234bc:	mov	r3, r0
   234c0:	mov	r2, #1065353216	; 0x3f800000
   234c4:	ldr	r4, [sp]
   234c8:	mov	r1, #0
   234cc:	add	sp, sp, #4
   234d0:	mov	r0, #1
   234d4:	strh	r1, [r3, #18]
   234d8:	str	r2, [r3, #28]
   234dc:	pop	{pc}		; (ldr pc, [sp], #4)
   234e0:	ldr	ip, [pc, #44]	; 23514 <__assert_fail@plt+0x10f20>
   234e4:	mov	r1, r0
   234e8:	mov	r2, ip
   234ec:	ldr	r0, [r2, #20]
   234f0:	add	r1, r1, #1
   234f4:	cmp	r0, #0
   234f8:	beq	234b8 <__assert_fail@plt+0x10ec4>
   234fc:	ldr	r0, [r2, #16]!
   23500:	cmp	r0, #1
   23504:	bne	234ec <__assert_fail@plt+0x10ef8>
   23508:	add	r0, ip, r1, lsl #4
   2350c:	str	r0, [r3]
   23510:	b	234b8 <__assert_fail@plt+0x10ec4>
   23514:	strdeq	r2, [r5], -r4
   23518:	movw	r3, #31952	; 0x7cd0
   2351c:	movt	r3, #6
   23520:	str	r4, [sp, #-8]!
   23524:	ldr	r0, [r3]
   23528:	movw	r2, #32364	; 0x7e6c
   2352c:	movt	r2, #6
   23530:	mov	r1, #1
   23534:	str	lr, [sp, #4]
   23538:	strb	r1, [r2, #14]
   2353c:	cmp	r0, #0
   23540:	beq	2356c <__assert_fail@plt+0x10f78>
   23544:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   23548:	mov	r3, r0
   2354c:	mov	r2, #1065353216	; 0x3f800000
   23550:	ldr	r4, [sp]
   23554:	mov	r1, #0
   23558:	add	sp, sp, #4
   2355c:	mov	r0, #1
   23560:	strh	r1, [r3, #18]
   23564:	str	r2, [r3, #28]
   23568:	pop	{pc}		; (ldr pc, [sp], #4)
   2356c:	ldr	ip, [pc, #44]	; 235a0 <__assert_fail@plt+0x10fac>
   23570:	mov	r1, r0
   23574:	mov	r2, ip
   23578:	ldr	r0, [r2, #20]
   2357c:	add	r1, r1, #1
   23580:	cmp	r0, #0
   23584:	beq	23544 <__assert_fail@plt+0x10f50>
   23588:	ldr	r0, [r2, #16]!
   2358c:	cmp	r0, #1
   23590:	bne	23578 <__assert_fail@plt+0x10f84>
   23594:	add	r0, ip, r1, lsl #4
   23598:	str	r0, [r3]
   2359c:	b	23544 <__assert_fail@plt+0x10f50>
   235a0:	strdeq	r2, [r5], -r4
   235a4:	movw	r3, #31952	; 0x7cd0
   235a8:	movt	r3, #6
   235ac:	str	r4, [sp, #-8]!
   235b0:	ldr	r0, [r3]
   235b4:	mov	r1, #0
   235b8:	movw	r2, #32364	; 0x7e6c
   235bc:	movt	r2, #6
   235c0:	str	lr, [sp, #4]
   235c4:	strb	r1, [r2, #14]
   235c8:	cmp	r0, r1
   235cc:	beq	235f8 <__assert_fail@plt+0x11004>
   235d0:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   235d4:	mov	r3, r0
   235d8:	mov	r2, #1065353216	; 0x3f800000
   235dc:	ldr	r4, [sp]
   235e0:	mov	r1, #0
   235e4:	add	sp, sp, #4
   235e8:	mov	r0, #1
   235ec:	strh	r1, [r3, #18]
   235f0:	str	r2, [r3, #28]
   235f4:	pop	{pc}		; (ldr pc, [sp], #4)
   235f8:	ldr	ip, [pc, #44]	; 2362c <__assert_fail@plt+0x11038>
   235fc:	mov	r1, r0
   23600:	mov	r2, ip
   23604:	ldr	r0, [r2, #20]
   23608:	add	r1, r1, #1
   2360c:	cmp	r0, #0
   23610:	beq	235d0 <__assert_fail@plt+0x10fdc>
   23614:	ldr	r0, [r2, #16]!
   23618:	cmp	r0, #1
   2361c:	bne	23604 <__assert_fail@plt+0x11010>
   23620:	add	r0, ip, r1, lsl #4
   23624:	str	r0, [r3]
   23628:	b	235d0 <__assert_fail@plt+0x10fdc>
   2362c:	strdeq	r2, [r5], -r4
   23630:	movw	r3, #31952	; 0x7cd0
   23634:	movt	r3, #6
   23638:	str	r4, [sp, #-8]!
   2363c:	ldr	r0, [r3]
   23640:	movw	r2, #32364	; 0x7e6c
   23644:	movt	r2, #6
   23648:	mov	r1, #1
   2364c:	str	lr, [sp, #4]
   23650:	strb	r1, [r2, #16]
   23654:	cmp	r0, #0
   23658:	beq	23684 <__assert_fail@plt+0x11090>
   2365c:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   23660:	mov	r3, r0
   23664:	mov	r2, #1065353216	; 0x3f800000
   23668:	ldr	r4, [sp]
   2366c:	mov	r1, #0
   23670:	add	sp, sp, #4
   23674:	mov	r0, #1
   23678:	strh	r1, [r3, #18]
   2367c:	str	r2, [r3, #28]
   23680:	pop	{pc}		; (ldr pc, [sp], #4)
   23684:	ldr	ip, [pc, #44]	; 236b8 <__assert_fail@plt+0x110c4>
   23688:	mov	r1, r0
   2368c:	mov	r2, ip
   23690:	ldr	r0, [r2, #20]
   23694:	add	r1, r1, #1
   23698:	cmp	r0, #0
   2369c:	beq	2365c <__assert_fail@plt+0x11068>
   236a0:	ldr	r0, [r2, #16]!
   236a4:	cmp	r0, #1
   236a8:	bne	23690 <__assert_fail@plt+0x1109c>
   236ac:	add	r0, ip, r1, lsl #4
   236b0:	str	r0, [r3]
   236b4:	b	2365c <__assert_fail@plt+0x11068>
   236b8:	strdeq	r2, [r5], -r4
   236bc:	movw	r3, #31952	; 0x7cd0
   236c0:	movt	r3, #6
   236c4:	str	r4, [sp, #-8]!
   236c8:	ldr	r0, [r3]
   236cc:	movw	r2, #32364	; 0x7e6c
   236d0:	movt	r2, #6
   236d4:	mov	r1, #256	; 0x100
   236d8:	str	lr, [sp, #4]
   236dc:	strh	r1, [r2]
   236e0:	cmp	r0, #0
   236e4:	beq	23710 <__assert_fail@plt+0x1111c>
   236e8:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   236ec:	mov	r3, r0
   236f0:	mov	r2, #1065353216	; 0x3f800000
   236f4:	ldr	r4, [sp]
   236f8:	mov	r1, #0
   236fc:	add	sp, sp, #4
   23700:	mov	r0, #1
   23704:	strh	r1, [r3, #18]
   23708:	str	r2, [r3, #28]
   2370c:	pop	{pc}		; (ldr pc, [sp], #4)
   23710:	ldr	ip, [pc, #44]	; 23744 <__assert_fail@plt+0x11150>
   23714:	mov	r1, r0
   23718:	mov	r2, ip
   2371c:	ldr	r0, [r2, #20]
   23720:	add	r1, r1, #1
   23724:	cmp	r0, #0
   23728:	beq	236e8 <__assert_fail@plt+0x110f4>
   2372c:	ldr	r0, [r2, #16]!
   23730:	cmp	r0, #1
   23734:	bne	2371c <__assert_fail@plt+0x11128>
   23738:	add	r0, ip, r1, lsl #4
   2373c:	str	r0, [r3]
   23740:	b	236e8 <__assert_fail@plt+0x110f4>
   23744:	strdeq	r2, [r5], -r4
   23748:	movw	r3, #32364	; 0x7e6c
   2374c:	movt	r3, #6
   23750:	str	r4, [sp, #-8]!
   23754:	ldr	ip, [r3, #44]	; 0x2c
   23758:	mov	r0, #1
   2375c:	movw	r1, #51776	; 0xca40
   23760:	movt	r1, #1
   23764:	movw	r2, #11220	; 0x2bd4
   23768:	movt	r2, #2
   2376c:	str	lr, [sp, #4]
   23770:	strb	r0, [r3, #12]
   23774:	strd	r0, [r3, #48]	; 0x30
   23778:	tst	ip, #2
   2377c:	str	r2, [r3, #64]	; 0x40
   23780:	beq	23790 <__assert_fail@plt+0x1119c>
   23784:	movw	r2, #52128	; 0xcba0
   23788:	movt	r2, #1
   2378c:	str	r2, [r3, #52]	; 0x34
   23790:	movw	r3, #31952	; 0x7cd0
   23794:	movt	r3, #6
   23798:	ldr	r0, [r3]
   2379c:	cmp	r0, #0
   237a0:	beq	237cc <__assert_fail@plt+0x111d8>
   237a4:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   237a8:	mov	r3, r0
   237ac:	mov	r2, #1065353216	; 0x3f800000
   237b0:	ldr	r4, [sp]
   237b4:	mov	r1, #0
   237b8:	add	sp, sp, #4
   237bc:	mov	r0, #1
   237c0:	strh	r1, [r3, #18]
   237c4:	str	r2, [r3, #28]
   237c8:	pop	{pc}		; (ldr pc, [sp], #4)
   237cc:	ldr	ip, [pc, #44]	; 23800 <__assert_fail@plt+0x1120c>
   237d0:	mov	r1, r0
   237d4:	mov	r2, ip
   237d8:	ldr	r0, [r2, #20]
   237dc:	add	r1, r1, #1
   237e0:	cmp	r0, #0
   237e4:	beq	237a4 <__assert_fail@plt+0x111b0>
   237e8:	ldr	r0, [r2, #16]!
   237ec:	cmp	r0, #1
   237f0:	bne	237d8 <__assert_fail@plt+0x111e4>
   237f4:	add	r0, ip, r1, lsl #4
   237f8:	str	r0, [r3]
   237fc:	b	237a4 <__assert_fail@plt+0x111b0>
   23800:	strdeq	r2, [r5], -r4
   23804:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23808:	movw	r5, #31952	; 0x7cd0
   2380c:	movt	r5, #6
   23810:	ldrb	r3, [r5, #4]
   23814:	mov	r4, r1
   23818:	strd	r6, [sp, #8]
   2381c:	mov	r7, r0
   23820:	mov	r6, r2
   23824:	str	r8, [sp, #16]
   23828:	str	lr, [sp, #20]
   2382c:	cmp	r3, #0
   23830:	beq	238ac <__assert_fail@plt+0x112b8>
   23834:	cmp	r4, #0
   23838:	beq	238a4 <__assert_fail@plt+0x112b0>
   2383c:	ldr	r3, [r6]
   23840:	ldr	r4, [r4, r3, lsl #2]
   23844:	cmp	r4, #0
   23848:	beq	238a4 <__assert_fail@plt+0x112b0>
   2384c:	add	r3, r3, #1
   23850:	mov	r1, r4
   23854:	mov	r0, r7
   23858:	str	r3, [r6]
   2385c:	bl	1c170 <__assert_fail@plt+0x9b7c>
   23860:	mov	r5, r0
   23864:	movw	r1, #14320	; 0x37f0
   23868:	movt	r1, #5
   2386c:	mov	r0, r4
   23870:	str	r4, [r5, #40]	; 0x28
   23874:	bl	12528 <strpbrk@plt>
   23878:	vldr	s15, [pc, #180]	; 23934 <__assert_fail@plt+0x11340>
   2387c:	cmp	r0, #0
   23880:	mov	r0, #1
   23884:	vldr	s14, [pc, #172]	; 23938 <__assert_fail@plt+0x11344>
   23888:	vmoveq.f32	s15, s14
   2388c:	vstr	s15, [r5, #28]
   23890:	ldrd	r4, [sp]
   23894:	ldrd	r6, [sp, #8]
   23898:	ldr	r8, [sp, #16]
   2389c:	add	sp, sp, #20
   238a0:	pop	{pc}		; (ldr pc, [sp], #4)
   238a4:	mov	r0, r4
   238a8:	b	23890 <__assert_fail@plt+0x1129c>
   238ac:	movw	r1, #16172	; 0x3f2c
   238b0:	movt	r1, #5
   238b4:	mov	r2, r3
   238b8:	mov	r0, r1
   238bc:	bl	12210 <fnmatch@plt>
   238c0:	subs	r2, r0, #0
   238c4:	bne	23910 <__assert_fail@plt+0x1131c>
   238c8:	movw	r1, #16172	; 0x3f2c
   238cc:	movt	r1, #5
   238d0:	movw	r0, #16232	; 0x3f68
   238d4:	movt	r0, #5
   238d8:	bl	12210 <fnmatch@plt>
   238dc:	cmp	r0, #0
   238e0:	beq	23910 <__assert_fail@plt+0x1131c>
   238e4:	movw	r1, #16172	; 0x3f2c
   238e8:	movt	r1, #5
   238ec:	movw	r0, #16232	; 0x3f68
   238f0:	movt	r0, #5
   238f4:	mov	r2, #16
   238f8:	bl	12210 <fnmatch@plt>
   238fc:	cmp	r0, #0
   23900:	bne	23910 <__assert_fail@plt+0x1131c>
   23904:	mov	r3, #1
   23908:	strb	r3, [r5, #4]
   2390c:	b	23834 <__assert_fail@plt+0x11240>
   23910:	mov	r2, #5
   23914:	movw	r1, #16176	; 0x3f30
   23918:	movt	r1, #5
   2391c:	mov	r0, #0
   23920:	bl	120b4 <dcgettext@plt>
   23924:	mov	r2, r0
   23928:	mov	r1, #0
   2392c:	mov	r0, #1
   23930:	bl	121ec <error@plt>
   23934:	stccc	7, cr13, [r3, #44]!	; 0x2c
   23938:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   2393c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   23940:	movw	r5, #31952	; 0x7cd0
   23944:	movt	r5, #6
   23948:	ldrb	r3, [r5, #4]
   2394c:	mov	r4, r1
   23950:	strd	r6, [sp, #8]
   23954:	mov	r7, r0
   23958:	mov	r6, r2
   2395c:	strd	r8, [sp, #16]
   23960:	str	lr, [sp, #24]
   23964:	sub	sp, sp, #12
   23968:	cmp	r3, #0
   2396c:	beq	23a98 <__assert_fail@plt+0x114a4>
   23970:	cmp	r4, #0
   23974:	beq	23a90 <__assert_fail@plt+0x1149c>
   23978:	ldr	r3, [r6]
   2397c:	ldr	r4, [r4, r3, lsl #2]
   23980:	cmp	r4, #0
   23984:	beq	23a90 <__assert_fail@plt+0x1149c>
   23988:	movw	r2, #32364	; 0x7e6c
   2398c:	movt	r2, #6
   23990:	ldrb	r5, [r2, #17]
   23994:	add	r3, r3, #1
   23998:	str	r3, [r6]
   2399c:	cmp	r5, #0
   239a0:	beq	23a00 <__assert_fail@plt+0x1140c>
   239a4:	mov	r1, r4
   239a8:	mov	r0, r7
   239ac:	bl	1c170 <__assert_fail@plt+0x9b7c>
   239b0:	mov	r5, r0
   239b4:	mov	r3, #0
   239b8:	mov	r0, r4
   239bc:	movw	r1, #14320	; 0x37f0
   239c0:	movt	r1, #5
   239c4:	strh	r3, [r5, #18]
   239c8:	str	r4, [r5, #40]	; 0x28
   239cc:	bl	12528 <strpbrk@plt>
   239d0:	vldr	s15, [pc, #328]	; 23b20 <__assert_fail@plt+0x1152c>
   239d4:	cmp	r0, #0
   239d8:	mov	r0, #1
   239dc:	vldr	s14, [pc, #320]	; 23b24 <__assert_fail@plt+0x11530>
   239e0:	vmoveq.f32	s15, s14
   239e4:	vstr	s15, [r5, #28]
   239e8:	add	sp, sp, #12
   239ec:	ldrd	r4, [sp]
   239f0:	ldrd	r6, [sp, #8]
   239f4:	ldrd	r8, [sp, #16]
   239f8:	add	sp, sp, #24
   239fc:	pop	{pc}		; (ldr pc, [sp], #4)
   23a00:	ldrb	r3, [r2, #16]
   23a04:	cmp	r3, #0
   23a08:	beq	239a4 <__assert_fail@plt+0x113b0>
   23a0c:	mov	r1, #47	; 0x2f
   23a10:	mov	r0, r4
   23a14:	bl	1230c <strchr@plt>
   23a18:	cmp	r0, #0
   23a1c:	beq	239a4 <__assert_fail@plt+0x113b0>
   23a20:	mov	r2, #5
   23a24:	mov	r0, r5
   23a28:	movw	r1, #16360	; 0x3fe8
   23a2c:	movt	r1, #5
   23a30:	bl	120b4 <dcgettext@plt>
   23a34:	mov	r8, r0
   23a38:	movw	r1, #16808	; 0x41a8
   23a3c:	movt	r1, #5
   23a40:	mov	r0, r5
   23a44:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   23a48:	mov	r9, r0
   23a4c:	movw	r1, #26352	; 0x66f0
   23a50:	movt	r1, #5
   23a54:	mov	r0, #1
   23a58:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   23a5c:	mov	r6, r0
   23a60:	movw	r1, #16816	; 0x41b0
   23a64:	movt	r1, #5
   23a68:	mov	r0, #2
   23a6c:	bl	1d6f0 <__assert_fail@plt+0xb0fc>
   23a70:	mov	r3, r9
   23a74:	mov	r2, r8
   23a78:	str	r6, [sp]
   23a7c:	mov	r1, r5
   23a80:	str	r0, [sp, #4]
   23a84:	mov	r0, r5
   23a88:	bl	121ec <error@plt>
   23a8c:	b	239a4 <__assert_fail@plt+0x113b0>
   23a90:	mov	r0, r4
   23a94:	b	239e8 <__assert_fail@plt+0x113f4>
   23a98:	movw	r1, #16172	; 0x3f2c
   23a9c:	movt	r1, #5
   23aa0:	mov	r2, r3
   23aa4:	mov	r0, r1
   23aa8:	bl	12210 <fnmatch@plt>
   23aac:	subs	r2, r0, #0
   23ab0:	bne	23afc <__assert_fail@plt+0x11508>
   23ab4:	movw	r1, #16172	; 0x3f2c
   23ab8:	movt	r1, #5
   23abc:	movw	r0, #16232	; 0x3f68
   23ac0:	movt	r0, #5
   23ac4:	bl	12210 <fnmatch@plt>
   23ac8:	cmp	r0, #0
   23acc:	beq	23afc <__assert_fail@plt+0x11508>
   23ad0:	movw	r1, #16172	; 0x3f2c
   23ad4:	movt	r1, #5
   23ad8:	movw	r0, #16232	; 0x3f68
   23adc:	movt	r0, #5
   23ae0:	mov	r2, #16
   23ae4:	bl	12210 <fnmatch@plt>
   23ae8:	cmp	r0, #0
   23aec:	bne	23afc <__assert_fail@plt+0x11508>
   23af0:	mov	r3, #1
   23af4:	strb	r3, [r5, #4]
   23af8:	b	23970 <__assert_fail@plt+0x1137c>
   23afc:	mov	r2, #5
   23b00:	movw	r1, #16176	; 0x3f30
   23b04:	movt	r1, #5
   23b08:	mov	r0, #0
   23b0c:	bl	120b4 <dcgettext@plt>
   23b10:	mov	r2, r0
   23b14:	mov	r1, #0
   23b18:	mov	r0, #1
   23b1c:	bl	121ec <error@plt>
   23b20:	svccc	0x004ccccd
   23b24:	stclcc	12, cr12, [ip, #820]	; 0x334
   23b28:	strd	r4, [sp, #-16]!
   23b2c:	movw	r4, #32364	; 0x7e6c
   23b30:	movt	r4, #6
   23b34:	ldrb	r5, [r4, #17]
   23b38:	str	r6, [sp, #8]
   23b3c:	str	lr, [sp, #12]
   23b40:	cmp	r5, #0
   23b44:	bne	23b54 <__assert_fail@plt+0x11560>
   23b48:	ldrb	r3, [r4, #16]
   23b4c:	cmp	r3, #0
   23b50:	bne	23bd0 <__assert_fail@plt+0x115dc>
   23b54:	movw	r3, #31952	; 0x7cd0
   23b58:	movt	r3, #6
   23b5c:	ldr	r0, [r3]
   23b60:	mov	r2, #256	; 0x100
   23b64:	strh	r2, [r4]
   23b68:	cmp	r0, #0
   23b6c:	beq	23b9c <__assert_fail@plt+0x115a8>
   23b70:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   23b74:	mov	r3, r0
   23b78:	mov	r2, #1065353216	; 0x3f800000
   23b7c:	ldrd	r4, [sp]
   23b80:	mov	r1, #0
   23b84:	mov	r0, #1
   23b88:	ldr	r6, [sp, #8]
   23b8c:	add	sp, sp, #12
   23b90:	strh	r1, [r3, #18]
   23b94:	str	r2, [r3, #28]
   23b98:	pop	{pc}		; (ldr pc, [sp], #4)
   23b9c:	ldr	ip, [pc, #84]	; 23bf8 <__assert_fail@plt+0x11604>
   23ba0:	mov	r1, r0
   23ba4:	mov	r2, ip
   23ba8:	ldr	r0, [r2, #20]
   23bac:	add	r1, r1, #1
   23bb0:	cmp	r0, #0
   23bb4:	beq	23b70 <__assert_fail@plt+0x1157c>
   23bb8:	ldr	r0, [r2, #16]!
   23bbc:	cmp	r0, #1
   23bc0:	bne	23ba8 <__assert_fail@plt+0x115b4>
   23bc4:	add	r0, ip, r1, lsl #4
   23bc8:	str	r0, [r3]
   23bcc:	b	23b70 <__assert_fail@plt+0x1157c>
   23bd0:	mov	r2, #5
   23bd4:	mov	r0, r5
   23bd8:	movw	r1, #16828	; 0x41bc
   23bdc:	movt	r1, #5
   23be0:	bl	120b4 <dcgettext@plt>
   23be4:	mov	r2, r0
   23be8:	mov	r1, r5
   23bec:	mov	r0, r5
   23bf0:	bl	121ec <error@plt>
   23bf4:	b	23b54 <__assert_fail@plt+0x11560>
   23bf8:	strdeq	r2, [r5], -r4
   23bfc:	subs	r0, r1, #0
   23c00:	ldr	r3, [r2]
   23c04:	bxeq	lr
   23c08:	strd	r4, [sp, #-20]!	; 0xffffffec
   23c0c:	lsl	r1, r3, #2
   23c10:	ldr	r4, [r0, r3, lsl #2]
   23c14:	strd	r6, [sp, #8]
   23c18:	str	lr, [sp, #16]
   23c1c:	sub	sp, sp, #12
   23c20:	cmp	r4, #0
   23c24:	beq	23cc8 <__assert_fail@plt+0x116d4>
   23c28:	add	r3, r3, #1
   23c2c:	add	r0, r0, r1
   23c30:	movw	r1, #14228	; 0x3794
   23c34:	movt	r1, #5
   23c38:	ldr	r6, [r0, #-4]
   23c3c:	mov	r0, r4
   23c40:	str	r3, [r2]
   23c44:	bl	125e8 <strspn@plt>
   23c48:	cmp	r0, #0
   23c4c:	movwle	r5, #32364	; 0x7e6c
   23c50:	movtle	r5, #6
   23c54:	ble	23d0c <__assert_fail@plt+0x11718>
   23c58:	ldrb	r3, [r4, r0]
   23c5c:	movw	r5, #32364	; 0x7e6c
   23c60:	movt	r5, #6
   23c64:	cmp	r3, #0
   23c68:	bne	23d0c <__assert_fail@plt+0x11718>
   23c6c:	mov	r0, r4
   23c70:	ldr	r1, [r5, #72]	; 0x48
   23c74:	bl	280a4 <__assert_fail@plt+0x15ab0>
   23c78:	cmp	r0, #0
   23c7c:	str	r0, [r5, #8]
   23c80:	blt	23d0c <__assert_fail@plt+0x11718>
   23c84:	movw	r2, #31952	; 0x7cd0
   23c88:	movt	r2, #6
   23c8c:	ldr	r0, [r2]
   23c90:	cmp	r0, #0
   23c94:	beq	23cd0 <__assert_fail@plt+0x116dc>
   23c98:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   23c9c:	mov	r3, r0
   23ca0:	mov	r2, #1065353216	; 0x3f800000
   23ca4:	mov	r1, #0
   23ca8:	mov	r0, #1
   23cac:	strh	r1, [r3, #18]
   23cb0:	str	r2, [r3, #28]
   23cb4:	add	sp, sp, #12
   23cb8:	ldrd	r4, [sp]
   23cbc:	ldrd	r6, [sp, #8]
   23cc0:	add	sp, sp, #16
   23cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   23cc8:	mov	r0, r4
   23ccc:	b	23cb4 <__assert_fail@plt+0x116c0>
   23cd0:	ldr	ip, [pc, #116]	; 23d4c <__assert_fail@plt+0x11758>
   23cd4:	mov	r1, r0
   23cd8:	mov	r3, ip
   23cdc:	b	23cec <__assert_fail@plt+0x116f8>
   23ce0:	ldr	r0, [r3, #16]!
   23ce4:	cmp	r0, #1
   23ce8:	beq	23d00 <__assert_fail@plt+0x1170c>
   23cec:	ldr	r0, [r3, #20]
   23cf0:	add	r1, r1, #1
   23cf4:	cmp	r0, #0
   23cf8:	bne	23ce0 <__assert_fail@plt+0x116ec>
   23cfc:	b	23c98 <__assert_fail@plt+0x116a4>
   23d00:	add	r0, ip, r1, lsl #4
   23d04:	str	r0, [r2]
   23d08:	b	23c98 <__assert_fail@plt+0x116a4>
   23d0c:	mov	r2, #5
   23d10:	movw	r1, #16944	; 0x4230
   23d14:	movt	r1, #5
   23d18:	mov	r0, #0
   23d1c:	bl	120b4 <dcgettext@plt>
   23d20:	mov	r7, r0
   23d24:	mov	r2, r4
   23d28:	ldr	r1, [r5, #72]	; 0x48
   23d2c:	mov	r0, #0
   23d30:	bl	3431c <__assert_fail@plt+0x21d28>
   23d34:	mov	r2, r7
   23d38:	mov	r3, r6
   23d3c:	str	r0, [sp]
   23d40:	mov	r1, #0
   23d44:	mov	r0, #1
   23d48:	bl	121ec <error@plt>
   23d4c:	strdeq	r2, [r5], -r4
   23d50:	subs	r0, r1, #0
   23d54:	ldr	r3, [r2]
   23d58:	bxeq	lr
   23d5c:	strd	r4, [sp, #-20]!	; 0xffffffec
   23d60:	lsl	r1, r3, #2
   23d64:	ldr	r4, [r0, r3, lsl #2]
   23d68:	strd	r6, [sp, #8]
   23d6c:	str	lr, [sp, #16]
   23d70:	sub	sp, sp, #12
   23d74:	cmp	r4, #0
   23d78:	beq	23e1c <__assert_fail@plt+0x11828>
   23d7c:	add	r3, r3, #1
   23d80:	add	r0, r0, r1
   23d84:	movw	r1, #14228	; 0x3794
   23d88:	movt	r1, #5
   23d8c:	ldr	r6, [r0, #-4]
   23d90:	mov	r0, r4
   23d94:	str	r3, [r2]
   23d98:	bl	125e8 <strspn@plt>
   23d9c:	cmp	r0, #0
   23da0:	movwle	r5, #32364	; 0x7e6c
   23da4:	movtle	r5, #6
   23da8:	ble	23e60 <__assert_fail@plt+0x1186c>
   23dac:	ldrb	r3, [r4, r0]
   23db0:	movw	r5, #32364	; 0x7e6c
   23db4:	movt	r5, #6
   23db8:	cmp	r3, #0
   23dbc:	bne	23e60 <__assert_fail@plt+0x1186c>
   23dc0:	mov	r0, r4
   23dc4:	ldr	r1, [r5, #72]	; 0x48
   23dc8:	bl	280a4 <__assert_fail@plt+0x15ab0>
   23dcc:	cmp	r0, #0
   23dd0:	str	r0, [r5, #4]
   23dd4:	blt	23e60 <__assert_fail@plt+0x1186c>
   23dd8:	movw	r2, #31952	; 0x7cd0
   23ddc:	movt	r2, #6
   23de0:	ldr	r0, [r2]
   23de4:	cmp	r0, #0
   23de8:	beq	23e24 <__assert_fail@plt+0x11830>
   23dec:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   23df0:	mov	r3, r0
   23df4:	mov	r2, #1065353216	; 0x3f800000
   23df8:	mov	r1, #0
   23dfc:	mov	r0, #1
   23e00:	strh	r1, [r3, #18]
   23e04:	str	r2, [r3, #28]
   23e08:	add	sp, sp, #12
   23e0c:	ldrd	r4, [sp]
   23e10:	ldrd	r6, [sp, #8]
   23e14:	add	sp, sp, #16
   23e18:	pop	{pc}		; (ldr pc, [sp], #4)
   23e1c:	mov	r0, r4
   23e20:	b	23e08 <__assert_fail@plt+0x11814>
   23e24:	ldr	ip, [pc, #116]	; 23ea0 <__assert_fail@plt+0x118ac>
   23e28:	mov	r1, r0
   23e2c:	mov	r3, ip
   23e30:	b	23e40 <__assert_fail@plt+0x1184c>
   23e34:	ldr	r0, [r3, #16]!
   23e38:	cmp	r0, #1
   23e3c:	beq	23e54 <__assert_fail@plt+0x11860>
   23e40:	ldr	r0, [r3, #20]
   23e44:	add	r1, r1, #1
   23e48:	cmp	r0, #0
   23e4c:	bne	23e34 <__assert_fail@plt+0x11840>
   23e50:	b	23dec <__assert_fail@plt+0x117f8>
   23e54:	add	r0, ip, r1, lsl #4
   23e58:	str	r0, [r2]
   23e5c:	b	23dec <__assert_fail@plt+0x117f8>
   23e60:	mov	r2, #5
   23e64:	movw	r1, #16944	; 0x4230
   23e68:	movt	r1, #5
   23e6c:	mov	r0, #0
   23e70:	bl	120b4 <dcgettext@plt>
   23e74:	mov	r7, r0
   23e78:	mov	r2, r4
   23e7c:	ldr	r1, [r5, #72]	; 0x48
   23e80:	mov	r0, #0
   23e84:	bl	3431c <__assert_fail@plt+0x21d28>
   23e88:	mov	r2, r7
   23e8c:	mov	r3, r6
   23e90:	str	r0, [sp]
   23e94:	mov	r1, #0
   23e98:	mov	r0, #1
   23e9c:	bl	121ec <error@plt>
   23ea0:	strdeq	r2, [r5], -r4
   23ea4:	strd	r4, [sp, #-16]!
   23ea8:	mov	r4, r1
   23eac:	mov	r5, r2
   23eb0:	str	r6, [sp, #8]
   23eb4:	mov	r6, r0
   23eb8:	str	lr, [sp, #12]
   23ebc:	sub	sp, sp, #8
   23ec0:	bl	22174 <__assert_fail@plt+0xfb80>
   23ec4:	cmp	r4, #0
   23ec8:	beq	23f58 <__assert_fail@plt+0x11964>
   23ecc:	ldr	r3, [r5]
   23ed0:	ldr	r4, [r4, r3, lsl #2]
   23ed4:	cmp	r4, #0
   23ed8:	beq	23f58 <__assert_fail@plt+0x11964>
   23edc:	add	r3, r3, #1
   23ee0:	mov	r2, r4
   23ee4:	mov	r0, r6
   23ee8:	movw	r1, #20740	; 0x5104
   23eec:	movt	r1, #1
   23ef0:	str	r3, [r5]
   23ef4:	bl	1c124 <__assert_fail@plt+0x9b30>
   23ef8:	mov	r5, r0
   23efc:	mov	r3, #0
   23f00:	movw	r1, #14320	; 0x37f0
   23f04:	movt	r1, #5
   23f08:	mov	r0, r4
   23f0c:	strh	r3, [r5, #18]
   23f10:	str	r4, [r5, #40]	; 0x28
   23f14:	bl	12528 <strpbrk@plt>
   23f18:	vldr	s15, [pc, #204]	; 23fec <__assert_fail@plt+0x119f8>
   23f1c:	movw	r3, #32364	; 0x7e6c
   23f20:	movt	r3, #6
   23f24:	cmp	r0, #0
   23f28:	vldr	s14, [pc, #192]	; 23ff0 <__assert_fail@plt+0x119fc>
   23f2c:	ldrb	r3, [r3, #17]
   23f30:	vmoveq.f32	s15, s14
   23f34:	cmp	r3, #0
   23f38:	vstr	s15, [r5, #28]
   23f3c:	beq	23f60 <__assert_fail@plt+0x1196c>
   23f40:	mov	r0, #1
   23f44:	add	sp, sp, #8
   23f48:	ldrd	r4, [sp]
   23f4c:	ldr	r6, [sp, #8]
   23f50:	add	sp, sp, #12
   23f54:	pop	{pc}		; (ldr pc, [sp], #4)
   23f58:	mov	r0, r4
   23f5c:	b	23f44 <__assert_fail@plt+0x11950>
   23f60:	mov	r1, #47	; 0x2f
   23f64:	mov	r0, r4
   23f68:	bl	12468 <strrchr@plt>
   23f6c:	cmp	r0, #0
   23f70:	beq	23f40 <__assert_fail@plt+0x1194c>
   23f74:	ldrb	r3, [r0, #1]
   23f78:	cmp	r3, #0
   23f7c:	bne	23f40 <__assert_fail@plt+0x1194c>
   23f80:	movw	r1, #20740	; 0x5104
   23f84:	movt	r1, #1
   23f88:	movw	r3, #18464	; 0x4820
   23f8c:	movt	r3, #1
   23f90:	sub	r1, r1, r3
   23f94:	mov	r0, r4
   23f98:	clz	r1, r1
   23f9c:	lsr	r1, r1, #5
   23fa0:	bl	16c04 <__assert_fail@plt+0x4610>
   23fa4:	subs	r6, r0, #0
   23fa8:	bne	23f40 <__assert_fail@plt+0x1194c>
   23fac:	mov	r2, #5
   23fb0:	movw	r1, #16236	; 0x3f6c
   23fb4:	movt	r1, #5
   23fb8:	bl	120b4 <dcgettext@plt>
   23fbc:	mov	r2, r0
   23fc0:	movw	r3, #17008	; 0x4270
   23fc4:	movt	r3, #5
   23fc8:	mov	r0, r6
   23fcc:	str	r4, [sp]
   23fd0:	mov	r1, r6
   23fd4:	bl	121ec <error@plt>
   23fd8:	movw	r3, #52343	; 0xcc77
   23fdc:	movt	r3, #12843	; 0x322b
   23fe0:	mov	r0, #1
   23fe4:	str	r3, [r5, #28]
   23fe8:	b	23f44 <__assert_fail@plt+0x11950>
   23fec:	svccc	0x004ccccd
   23ff0:	stclcc	12, cr12, [ip, #820]	; 0x334
   23ff4:	strd	r4, [sp, #-16]!
   23ff8:	mov	r4, r1
   23ffc:	mov	r5, r2
   24000:	str	r6, [sp, #8]
   24004:	mov	r6, r0
   24008:	str	lr, [sp, #12]
   2400c:	sub	sp, sp, #8
   24010:	bl	22174 <__assert_fail@plt+0xfb80>
   24014:	cmp	r4, #0
   24018:	beq	240a8 <__assert_fail@plt+0x11ab4>
   2401c:	ldr	r3, [r5]
   24020:	ldr	r4, [r4, r3, lsl #2]
   24024:	cmp	r4, #0
   24028:	beq	240a8 <__assert_fail@plt+0x11ab4>
   2402c:	add	r3, r3, #1
   24030:	mov	r2, r4
   24034:	mov	r0, r6
   24038:	movw	r1, #18464	; 0x4820
   2403c:	movt	r1, #1
   24040:	str	r3, [r5]
   24044:	bl	1c124 <__assert_fail@plt+0x9b30>
   24048:	mov	r5, r0
   2404c:	mov	r3, #0
   24050:	movw	r1, #14320	; 0x37f0
   24054:	movt	r1, #5
   24058:	mov	r0, r4
   2405c:	strh	r3, [r5, #18]
   24060:	str	r4, [r5, #40]	; 0x28
   24064:	bl	12528 <strpbrk@plt>
   24068:	vldr	s15, [pc, #180]	; 24124 <__assert_fail@plt+0x11b30>
   2406c:	movw	r3, #32364	; 0x7e6c
   24070:	movt	r3, #6
   24074:	cmp	r0, #0
   24078:	vldr	s14, [pc, #168]	; 24128 <__assert_fail@plt+0x11b34>
   2407c:	ldrb	r3, [r3, #17]
   24080:	vmoveq.f32	s15, s14
   24084:	cmp	r3, #0
   24088:	vstr	s15, [r5, #28]
   2408c:	beq	240b0 <__assert_fail@plt+0x11abc>
   24090:	mov	r0, #1
   24094:	add	sp, sp, #8
   24098:	ldrd	r4, [sp]
   2409c:	ldr	r6, [sp, #8]
   240a0:	add	sp, sp, #12
   240a4:	pop	{pc}		; (ldr pc, [sp], #4)
   240a8:	mov	r0, r4
   240ac:	b	24094 <__assert_fail@plt+0x11aa0>
   240b0:	mov	r1, #47	; 0x2f
   240b4:	mov	r0, r4
   240b8:	bl	12468 <strrchr@plt>
   240bc:	cmp	r0, #0
   240c0:	beq	24090 <__assert_fail@plt+0x11a9c>
   240c4:	ldrb	r3, [r0, #1]
   240c8:	cmp	r3, #0
   240cc:	bne	24090 <__assert_fail@plt+0x11a9c>
   240d0:	mov	r1, #1
   240d4:	mov	r0, r4
   240d8:	bl	16c04 <__assert_fail@plt+0x4610>
   240dc:	subs	r6, r0, #0
   240e0:	bne	24090 <__assert_fail@plt+0x11a9c>
   240e4:	mov	r2, #5
   240e8:	movw	r1, #16236	; 0x3f6c
   240ec:	movt	r1, #5
   240f0:	bl	120b4 <dcgettext@plt>
   240f4:	mov	r2, r0
   240f8:	movw	r3, #17016	; 0x4278
   240fc:	movt	r3, #5
   24100:	mov	r0, r6
   24104:	str	r4, [sp]
   24108:	mov	r1, r6
   2410c:	bl	121ec <error@plt>
   24110:	movw	r3, #52343	; 0xcc77
   24114:	movt	r3, #12843	; 0x322b
   24118:	mov	r0, #1
   2411c:	str	r3, [r5, #28]
   24120:	b	24094 <__assert_fail@plt+0x11aa0>
   24124:	svccc	0x004ccccd
   24128:	stclcc	12, cr12, [ip, #820]	; 0x334
   2412c:	strd	r4, [sp, #-16]!
   24130:	mov	r4, r1
   24134:	mov	r5, r2
   24138:	str	r6, [sp, #8]
   2413c:	mov	r6, r0
   24140:	str	lr, [sp, #12]
   24144:	sub	sp, sp, #8
   24148:	bl	22174 <__assert_fail@plt+0xfb80>
   2414c:	cmp	r4, #0
   24150:	beq	241e0 <__assert_fail@plt+0x11bec>
   24154:	ldr	r3, [r5]
   24158:	ldr	r4, [r4, r3, lsl #2]
   2415c:	cmp	r4, #0
   24160:	beq	241e0 <__assert_fail@plt+0x11bec>
   24164:	add	r3, r3, #1
   24168:	mov	r2, r4
   2416c:	mov	r0, r6
   24170:	movw	r1, #20740	; 0x5104
   24174:	movt	r1, #1
   24178:	str	r3, [r5]
   2417c:	bl	1c124 <__assert_fail@plt+0x9b30>
   24180:	mov	r5, r0
   24184:	mov	r3, #0
   24188:	movw	r1, #14320	; 0x37f0
   2418c:	movt	r1, #5
   24190:	mov	r0, r4
   24194:	strh	r3, [r5, #18]
   24198:	str	r4, [r5, #40]	; 0x28
   2419c:	bl	12528 <strpbrk@plt>
   241a0:	vldr	s15, [pc, #204]	; 24274 <__assert_fail@plt+0x11c80>
   241a4:	movw	r3, #32364	; 0x7e6c
   241a8:	movt	r3, #6
   241ac:	cmp	r0, #0
   241b0:	vldr	s14, [pc, #192]	; 24278 <__assert_fail@plt+0x11c84>
   241b4:	ldrb	r3, [r3, #17]
   241b8:	vmoveq.f32	s15, s14
   241bc:	cmp	r3, #0
   241c0:	vstr	s15, [r5, #28]
   241c4:	beq	241e8 <__assert_fail@plt+0x11bf4>
   241c8:	mov	r0, #1
   241cc:	add	sp, sp, #8
   241d0:	ldrd	r4, [sp]
   241d4:	ldr	r6, [sp, #8]
   241d8:	add	sp, sp, #12
   241dc:	pop	{pc}		; (ldr pc, [sp], #4)
   241e0:	mov	r0, r4
   241e4:	b	241cc <__assert_fail@plt+0x11bd8>
   241e8:	mov	r1, #47	; 0x2f
   241ec:	mov	r0, r4
   241f0:	bl	12468 <strrchr@plt>
   241f4:	cmp	r0, #0
   241f8:	beq	241c8 <__assert_fail@plt+0x11bd4>
   241fc:	ldrb	r3, [r0, #1]
   24200:	cmp	r3, #0
   24204:	bne	241c8 <__assert_fail@plt+0x11bd4>
   24208:	movw	r1, #20740	; 0x5104
   2420c:	movt	r1, #1
   24210:	movw	r3, #18464	; 0x4820
   24214:	movt	r3, #1
   24218:	sub	r1, r1, r3
   2421c:	mov	r0, r4
   24220:	clz	r1, r1
   24224:	lsr	r1, r1, #5
   24228:	bl	16c04 <__assert_fail@plt+0x4610>
   2422c:	subs	r6, r0, #0
   24230:	bne	241c8 <__assert_fail@plt+0x11bd4>
   24234:	mov	r2, #5
   24238:	movw	r1, #16236	; 0x3f6c
   2423c:	movt	r1, #5
   24240:	bl	120b4 <dcgettext@plt>
   24244:	mov	r2, r0
   24248:	movw	r3, #17028	; 0x4284
   2424c:	movt	r3, #5
   24250:	mov	r0, r6
   24254:	str	r4, [sp]
   24258:	mov	r1, r6
   2425c:	bl	121ec <error@plt>
   24260:	movw	r3, #52343	; 0xcc77
   24264:	movt	r3, #12843	; 0x322b
   24268:	mov	r0, #1
   2426c:	str	r3, [r5, #28]
   24270:	b	241cc <__assert_fail@plt+0x11bd8>
   24274:	svccc	0x004ccccd
   24278:	stclcc	12, cr12, [ip, #820]	; 0x334
   2427c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24280:	strd	r6, [sp, #8]
   24284:	strd	r8, [sp, #16]
   24288:	subs	r9, r1, #0
   2428c:	strd	sl, [sp, #24]
   24290:	str	lr, [sp, #32]
   24294:	sub	sp, sp, #28
   24298:	beq	24318 <__assert_fail@plt+0x11d24>
   2429c:	ldr	r8, [r2]
   242a0:	ldr	r5, [r9, r8, lsl #2]
   242a4:	cmp	r5, #0
   242a8:	beq	24460 <__assert_fail@plt+0x11e6c>
   242ac:	add	r3, r8, #1
   242b0:	movw	r6, #32364	; 0x7e6c
   242b4:	movt	r6, #6
   242b8:	ldr	r7, [r6, #28]
   242bc:	ldr	r1, [r6, #32]
   242c0:	str	r3, [r2]
   242c4:	ldrb	r3, [r5]
   242c8:	str	r1, [sp]
   242cc:	cmp	r3, #43	; 0x2b
   242d0:	beq	24468 <__assert_fail@plt+0x11e74>
   242d4:	cmp	r3, #45	; 0x2d
   242d8:	movne	sl, r5
   242dc:	movne	fp, #2
   242e0:	bne	242ec <__assert_fail@plt+0x11cf8>
   242e4:	add	sl, r5, #1
   242e8:	mov	fp, #0
   242ec:	mov	r4, r2
   242f0:	movw	r3, #9140	; 0x23b4
   242f4:	movt	r3, #1
   242f8:	add	r2, sp, #8
   242fc:	str	r0, [sp, #4]
   24300:	mov	r1, #0
   24304:	mov	r0, sl
   24308:	bl	36e60 <__assert_fail@plt+0x2486c>
   2430c:	subs	r9, r0, #0
   24310:	streq	r8, [r4]
   24314:	bne	24338 <__assert_fail@plt+0x11d44>
   24318:	mov	r0, r9
   2431c:	add	sp, sp, #28
   24320:	ldrd	r4, [sp]
   24324:	ldrd	r6, [sp, #8]
   24328:	ldrd	r8, [sp, #16]
   2432c:	ldrd	sl, [sp, #24]
   24330:	add	sp, sp, #32
   24334:	pop	{pc}		; (ldr pc, [sp], #4)
   24338:	vldr	d7, [pc, #376]	; 244b8 <__assert_fail@plt+0x11ec4>
   2433c:	add	r0, sp, #16
   24340:	vldr	d0, [sp, #8]
   24344:	vmul.f64	d0, d0, d7
   24348:	bl	12294 <modf@plt>
   2434c:	vldr	d7, [pc, #364]	; 244c0 <__assert_fail@plt+0x11ecc>
   24350:	vmul.f64	d0, d0, d7
   24354:	vcmpe.f64	d0, d7
   24358:	vmrs	APSR_nzcv, fpscr
   2435c:	bpl	24484 <__assert_fail@plt+0x11e90>
   24360:	add	r7, r7, #86016	; 0x15000
   24364:	vldr	d6, [sp, #16]
   24368:	add	r7, r7, #384	; 0x180
   2436c:	vmov	s15, r7
   24370:	vcmpe.f64	d6, #0.0
   24374:	vcvt.f64.s32	d7, s15
   24378:	vmrs	APSR_nzcv, fpscr
   2437c:	movmi	r2, #1
   24380:	movpl	r2, #0
   24384:	vsub.f64	d7, d7, d6
   24388:	vcvt.s32.f64	s15, d7
   2438c:	vmov	r4, s15
   24390:	cmp	r7, r4
   24394:	movge	r7, #0
   24398:	movlt	r7, #1
   2439c:	cmp	r7, r2
   243a0:	bne	244a0 <__assert_fail@plt+0x11eac>
   243a4:	vldr	s15, [sp]
   243a8:	vcvt.f64.s32	d7, s15
   243ac:	vcmpe.f64	d0, d7
   243b0:	vsub.f64	d7, d7, d0
   243b4:	vcvt.s32.f64	s15, d7
   243b8:	vmrs	APSR_nzcv, fpscr
   243bc:	vmov	r7, s15
   243c0:	ble	243d4 <__assert_fail@plt+0x11de0>
   243c4:	add	r7, r7, #998244352	; 0x3b800000
   243c8:	add	r7, r7, #1753088	; 0x1ac000
   243cc:	sub	r4, r4, #1
   243d0:	add	r7, r7, #2560	; 0xa00
   243d4:	mov	r1, r5
   243d8:	ldr	r0, [sp, #4]
   243dc:	bl	1c170 <__assert_fail@plt+0x9b7c>
   243e0:	ldr	ip, [r6, #28]
   243e4:	movw	r1, #17671	; 0x4507
   243e8:	movt	r1, #49710	; 0xc22e
   243ec:	mov	r2, #2
   243f0:	vldr	s14, [pc, #208]	; 244c8 <__assert_fail@plt+0x11ed4>
   243f4:	str	r2, [r0, #40]	; 0x28
   243f8:	str	fp, [r0, #44]	; 0x2c
   243fc:	sub	ip, ip, r4
   24400:	str	r4, [r0, #48]	; 0x30
   24404:	asr	r2, ip, #31
   24408:	str	r7, [r0, #52]	; 0x34
   2440c:	smull	r3, r1, r1, ip
   24410:	add	r1, r1, ip
   24414:	rsb	r2, r2, r1, asr #16
   24418:	vmov	s15, r2
   2441c:	vcvt.f32.s32	s15, s15
   24420:	vcmpe.f32	s15, s14
   24424:	vmrs	APSR_nzcv, fpscr
   24428:	bmi	24474 <__assert_fail@plt+0x11e80>
   2442c:	vldr	s14, [pc, #152]	; 244cc <__assert_fail@plt+0x11ed8>
   24430:	vcmpe.f32	s15, s14
   24434:	vmrs	APSR_nzcv, fpscr
   24438:	bmi	2447c <__assert_fail@plt+0x11e88>
   2443c:	vldr	s12, [pc, #140]	; 244d0 <__assert_fail@plt+0x11edc>
   24440:	vldr	s14, [pc, #140]	; 244d4 <__assert_fail@plt+0x11ee0>
   24444:	vldr	s13, [pc, #140]	; 244d8 <__assert_fail@plt+0x11ee4>
   24448:	vcmpe.f32	s15, s12
   2444c:	vmrs	APSR_nzcv, fpscr
   24450:	vmovle.f32	s15, s13
   24454:	vmovgt.f32	s15, s14
   24458:	vstr	s15, [r0, #28]
   2445c:	b	24318 <__assert_fail@plt+0x11d24>
   24460:	mov	r9, r5
   24464:	b	24318 <__assert_fail@plt+0x11d24>
   24468:	add	sl, r5, #1
   2446c:	mov	fp, #1
   24470:	b	242ec <__assert_fail@plt+0x11cf8>
   24474:	vldr	s15, [pc, #96]	; 244dc <__assert_fail@plt+0x11ee8>
   24478:	b	24458 <__assert_fail@plt+0x11e64>
   2447c:	vldr	s15, [pc, #80]	; 244d4 <__assert_fail@plt+0x11ee0>
   24480:	b	24458 <__assert_fail@plt+0x11e64>
   24484:	movw	r1, #15144	; 0x3b28
   24488:	movt	r1, #5
   2448c:	ldr	r3, [pc, #76]	; 244e0 <__assert_fail@plt+0x11eec>
   24490:	movw	r0, #16676	; 0x4124
   24494:	movt	r0, #5
   24498:	movw	r2, #3149	; 0xc4d
   2449c:	bl	125f4 <__assert_fail@plt>
   244a0:	movw	r2, #17040	; 0x4290
   244a4:	movt	r2, #5
   244a8:	mov	r3, sl
   244ac:	mov	r1, #0
   244b0:	mov	r0, #1
   244b4:	bl	121ec <error@plt>
   244b8:	andeq	r0, r0, r0
   244bc:	submi	r0, lr, r0
   244c0:	andeq	r0, r0, r0
   244c4:	bicmi	ip, sp, r5, ror #26
   244c8:	stclcc	12, cr12, [ip, #820]	; 0x334
   244cc:	svccc	0x00800000
   244d0:	sbcmi	r0, r8, #0
   244d4:			; <UNDEFINED> instruction: 0x3e99999a
   244d8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   244dc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   244e0:	andeq	r3, r5, r4, ror #10
   244e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   244e8:	strd	r6, [sp, #8]
   244ec:	strd	r8, [sp, #16]
   244f0:	subs	r9, r1, #0
   244f4:	strd	sl, [sp, #24]
   244f8:	str	lr, [sp, #32]
   244fc:	sub	sp, sp, #28
   24500:	beq	24580 <__assert_fail@plt+0x11f8c>
   24504:	ldr	r8, [r2]
   24508:	ldr	r5, [r9, r8, lsl #2]
   2450c:	cmp	r5, #0
   24510:	beq	246c8 <__assert_fail@plt+0x120d4>
   24514:	add	r3, r8, #1
   24518:	movw	r6, #32364	; 0x7e6c
   2451c:	movt	r6, #6
   24520:	ldr	r7, [r6, #28]
   24524:	ldr	r1, [r6, #32]
   24528:	str	r3, [r2]
   2452c:	ldrb	r3, [r5]
   24530:	str	r1, [sp]
   24534:	cmp	r3, #43	; 0x2b
   24538:	beq	246d0 <__assert_fail@plt+0x120dc>
   2453c:	cmp	r3, #45	; 0x2d
   24540:	movne	sl, r5
   24544:	movne	fp, #2
   24548:	bne	24554 <__assert_fail@plt+0x11f60>
   2454c:	add	sl, r5, #1
   24550:	mov	fp, #0
   24554:	mov	r4, r2
   24558:	movw	r3, #9140	; 0x23b4
   2455c:	movt	r3, #1
   24560:	add	r2, sp, #8
   24564:	str	r0, [sp, #4]
   24568:	mov	r1, #0
   2456c:	mov	r0, sl
   24570:	bl	36e60 <__assert_fail@plt+0x2486c>
   24574:	subs	r9, r0, #0
   24578:	streq	r8, [r4]
   2457c:	bne	245a0 <__assert_fail@plt+0x11fac>
   24580:	mov	r0, r9
   24584:	add	sp, sp, #28
   24588:	ldrd	r4, [sp]
   2458c:	ldrd	r6, [sp, #8]
   24590:	ldrd	r8, [sp, #16]
   24594:	ldrd	sl, [sp, #24]
   24598:	add	sp, sp, #32
   2459c:	pop	{pc}		; (ldr pc, [sp], #4)
   245a0:	vldr	d7, [pc, #376]	; 24720 <__assert_fail@plt+0x1212c>
   245a4:	add	r0, sp, #16
   245a8:	vldr	d0, [sp, #8]
   245ac:	vmul.f64	d0, d0, d7
   245b0:	bl	12294 <modf@plt>
   245b4:	vldr	d7, [pc, #364]	; 24728 <__assert_fail@plt+0x12134>
   245b8:	vmul.f64	d0, d0, d7
   245bc:	vcmpe.f64	d0, d7
   245c0:	vmrs	APSR_nzcv, fpscr
   245c4:	bpl	246ec <__assert_fail@plt+0x120f8>
   245c8:	add	r7, r7, #86016	; 0x15000
   245cc:	vldr	d6, [sp, #16]
   245d0:	add	r7, r7, #384	; 0x180
   245d4:	vmov	s15, r7
   245d8:	vcmpe.f64	d6, #0.0
   245dc:	vcvt.f64.s32	d7, s15
   245e0:	vmrs	APSR_nzcv, fpscr
   245e4:	movmi	r2, #1
   245e8:	movpl	r2, #0
   245ec:	vsub.f64	d7, d7, d6
   245f0:	vcvt.s32.f64	s15, d7
   245f4:	vmov	r4, s15
   245f8:	cmp	r7, r4
   245fc:	movge	r7, #0
   24600:	movlt	r7, #1
   24604:	cmp	r7, r2
   24608:	bne	24708 <__assert_fail@plt+0x12114>
   2460c:	vldr	s15, [sp]
   24610:	vcvt.f64.s32	d7, s15
   24614:	vcmpe.f64	d0, d7
   24618:	vsub.f64	d7, d7, d0
   2461c:	vcvt.s32.f64	s15, d7
   24620:	vmrs	APSR_nzcv, fpscr
   24624:	vmov	r7, s15
   24628:	ble	2463c <__assert_fail@plt+0x12048>
   2462c:	add	r7, r7, #998244352	; 0x3b800000
   24630:	add	r7, r7, #1753088	; 0x1ac000
   24634:	sub	r4, r4, #1
   24638:	add	r7, r7, #2560	; 0xa00
   2463c:	mov	r1, r5
   24640:	ldr	r0, [sp, #4]
   24644:	bl	1c170 <__assert_fail@plt+0x9b7c>
   24648:	ldr	ip, [r6, #28]
   2464c:	movw	r1, #17671	; 0x4507
   24650:	movt	r1, #49710	; 0xc22e
   24654:	mov	r2, #0
   24658:	vldr	s14, [pc, #208]	; 24730 <__assert_fail@plt+0x1213c>
   2465c:	str	r2, [r0, #40]	; 0x28
   24660:	str	fp, [r0, #44]	; 0x2c
   24664:	sub	ip, ip, r4
   24668:	str	r4, [r0, #48]	; 0x30
   2466c:	asr	r2, ip, #31
   24670:	str	r7, [r0, #52]	; 0x34
   24674:	smull	r3, r1, r1, ip
   24678:	add	r1, r1, ip
   2467c:	rsb	r2, r2, r1, asr #16
   24680:	vmov	s15, r2
   24684:	vcvt.f32.s32	s15, s15
   24688:	vcmpe.f32	s15, s14
   2468c:	vmrs	APSR_nzcv, fpscr
   24690:	bmi	246dc <__assert_fail@plt+0x120e8>
   24694:	vldr	s14, [pc, #152]	; 24734 <__assert_fail@plt+0x12140>
   24698:	vcmpe.f32	s15, s14
   2469c:	vmrs	APSR_nzcv, fpscr
   246a0:	bmi	246e4 <__assert_fail@plt+0x120f0>
   246a4:	vldr	s12, [pc, #140]	; 24738 <__assert_fail@plt+0x12144>
   246a8:	vldr	s14, [pc, #140]	; 2473c <__assert_fail@plt+0x12148>
   246ac:	vldr	s13, [pc, #140]	; 24740 <__assert_fail@plt+0x1214c>
   246b0:	vcmpe.f32	s15, s12
   246b4:	vmrs	APSR_nzcv, fpscr
   246b8:	vmovle.f32	s15, s13
   246bc:	vmovgt.f32	s15, s14
   246c0:	vstr	s15, [r0, #28]
   246c4:	b	24580 <__assert_fail@plt+0x11f8c>
   246c8:	mov	r9, r5
   246cc:	b	24580 <__assert_fail@plt+0x11f8c>
   246d0:	add	sl, r5, #1
   246d4:	mov	fp, #1
   246d8:	b	24554 <__assert_fail@plt+0x11f60>
   246dc:	vldr	s15, [pc, #96]	; 24744 <__assert_fail@plt+0x12150>
   246e0:	b	246c0 <__assert_fail@plt+0x120cc>
   246e4:	vldr	s15, [pc, #80]	; 2473c <__assert_fail@plt+0x12148>
   246e8:	b	246c0 <__assert_fail@plt+0x120cc>
   246ec:	movw	r1, #15144	; 0x3b28
   246f0:	movt	r1, #5
   246f4:	ldr	r3, [pc, #76]	; 24748 <__assert_fail@plt+0x12154>
   246f8:	movw	r0, #16676	; 0x4124
   246fc:	movt	r0, #5
   24700:	movw	r2, #3149	; 0xc4d
   24704:	bl	125f4 <__assert_fail@plt>
   24708:	movw	r2, #17040	; 0x4290
   2470c:	movt	r2, #5
   24710:	mov	r3, sl
   24714:	mov	r1, #0
   24718:	mov	r0, #1
   2471c:	bl	121ec <error@plt>
   24720:	andeq	r0, r0, r0
   24724:	submi	r0, lr, r0
   24728:	andeq	r0, r0, r0
   2472c:	bicmi	ip, sp, r5, ror #26
   24730:	stclcc	12, cr12, [ip, #820]	; 0x334
   24734:	svccc	0x00800000
   24738:	sbcmi	r0, r8, #0
   2473c:			; <UNDEFINED> instruction: 0x3e99999a
   24740:	mcrcc	14, 6, sl, cr7, cr4, {0}
   24744:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   24748:	andeq	r3, r5, r4, ror #10
   2474c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24750:	strd	r6, [sp, #8]
   24754:	strd	r8, [sp, #16]
   24758:	subs	r9, r1, #0
   2475c:	strd	sl, [sp, #24]
   24760:	str	lr, [sp, #32]
   24764:	sub	sp, sp, #28
   24768:	beq	247e8 <__assert_fail@plt+0x121f4>
   2476c:	ldr	r8, [r2]
   24770:	ldr	r5, [r9, r8, lsl #2]
   24774:	cmp	r5, #0
   24778:	beq	24930 <__assert_fail@plt+0x1233c>
   2477c:	add	r3, r8, #1
   24780:	movw	r6, #32364	; 0x7e6c
   24784:	movt	r6, #6
   24788:	ldr	r7, [r6, #28]
   2478c:	ldr	r1, [r6, #32]
   24790:	str	r3, [r2]
   24794:	ldrb	r3, [r5]
   24798:	str	r1, [sp]
   2479c:	cmp	r3, #43	; 0x2b
   247a0:	beq	24938 <__assert_fail@plt+0x12344>
   247a4:	cmp	r3, #45	; 0x2d
   247a8:	movne	sl, r5
   247ac:	movne	fp, #2
   247b0:	bne	247bc <__assert_fail@plt+0x121c8>
   247b4:	add	sl, r5, #1
   247b8:	mov	fp, #0
   247bc:	mov	r4, r2
   247c0:	movw	r3, #9140	; 0x23b4
   247c4:	movt	r3, #1
   247c8:	add	r2, sp, #8
   247cc:	str	r0, [sp, #4]
   247d0:	mov	r1, #0
   247d4:	mov	r0, sl
   247d8:	bl	36e60 <__assert_fail@plt+0x2486c>
   247dc:	subs	r9, r0, #0
   247e0:	streq	r8, [r4]
   247e4:	bne	24808 <__assert_fail@plt+0x12214>
   247e8:	mov	r0, r9
   247ec:	add	sp, sp, #28
   247f0:	ldrd	r4, [sp]
   247f4:	ldrd	r6, [sp, #8]
   247f8:	ldrd	r8, [sp, #16]
   247fc:	ldrd	sl, [sp, #24]
   24800:	add	sp, sp, #32
   24804:	pop	{pc}		; (ldr pc, [sp], #4)
   24808:	vldr	d7, [pc, #376]	; 24988 <__assert_fail@plt+0x12394>
   2480c:	add	r0, sp, #16
   24810:	vldr	d0, [sp, #8]
   24814:	vmul.f64	d0, d0, d7
   24818:	bl	12294 <modf@plt>
   2481c:	vldr	d7, [pc, #364]	; 24990 <__assert_fail@plt+0x1239c>
   24820:	vmul.f64	d0, d0, d7
   24824:	vcmpe.f64	d0, d7
   24828:	vmrs	APSR_nzcv, fpscr
   2482c:	bpl	24954 <__assert_fail@plt+0x12360>
   24830:	add	r7, r7, #86016	; 0x15000
   24834:	vldr	d6, [sp, #16]
   24838:	add	r7, r7, #384	; 0x180
   2483c:	vmov	s15, r7
   24840:	vcmpe.f64	d6, #0.0
   24844:	vcvt.f64.s32	d7, s15
   24848:	vmrs	APSR_nzcv, fpscr
   2484c:	movmi	r2, #1
   24850:	movpl	r2, #0
   24854:	vsub.f64	d7, d7, d6
   24858:	vcvt.s32.f64	s15, d7
   2485c:	vmov	r4, s15
   24860:	cmp	r7, r4
   24864:	movge	r7, #0
   24868:	movlt	r7, #1
   2486c:	cmp	r7, r2
   24870:	bne	24970 <__assert_fail@plt+0x1237c>
   24874:	vldr	s15, [sp]
   24878:	vcvt.f64.s32	d7, s15
   2487c:	vcmpe.f64	d0, d7
   24880:	vsub.f64	d7, d7, d0
   24884:	vcvt.s32.f64	s15, d7
   24888:	vmrs	APSR_nzcv, fpscr
   2488c:	vmov	r7, s15
   24890:	ble	248a4 <__assert_fail@plt+0x122b0>
   24894:	add	r7, r7, #998244352	; 0x3b800000
   24898:	add	r7, r7, #1753088	; 0x1ac000
   2489c:	sub	r4, r4, #1
   248a0:	add	r7, r7, #2560	; 0xa00
   248a4:	mov	r1, r5
   248a8:	ldr	r0, [sp, #4]
   248ac:	bl	1c170 <__assert_fail@plt+0x9b7c>
   248b0:	ldr	ip, [r6, #28]
   248b4:	movw	r1, #17671	; 0x4507
   248b8:	movt	r1, #49710	; 0xc22e
   248bc:	mov	r2, #3
   248c0:	vldr	s14, [pc, #208]	; 24998 <__assert_fail@plt+0x123a4>
   248c4:	str	r2, [r0, #40]	; 0x28
   248c8:	str	fp, [r0, #44]	; 0x2c
   248cc:	sub	ip, ip, r4
   248d0:	str	r4, [r0, #48]	; 0x30
   248d4:	asr	r2, ip, #31
   248d8:	str	r7, [r0, #52]	; 0x34
   248dc:	smull	r3, r1, r1, ip
   248e0:	add	r1, r1, ip
   248e4:	rsb	r2, r2, r1, asr #16
   248e8:	vmov	s15, r2
   248ec:	vcvt.f32.s32	s15, s15
   248f0:	vcmpe.f32	s15, s14
   248f4:	vmrs	APSR_nzcv, fpscr
   248f8:	bmi	24944 <__assert_fail@plt+0x12350>
   248fc:	vldr	s14, [pc, #152]	; 2499c <__assert_fail@plt+0x123a8>
   24900:	vcmpe.f32	s15, s14
   24904:	vmrs	APSR_nzcv, fpscr
   24908:	bmi	2494c <__assert_fail@plt+0x12358>
   2490c:	vldr	s12, [pc, #140]	; 249a0 <__assert_fail@plt+0x123ac>
   24910:	vldr	s14, [pc, #140]	; 249a4 <__assert_fail@plt+0x123b0>
   24914:	vldr	s13, [pc, #140]	; 249a8 <__assert_fail@plt+0x123b4>
   24918:	vcmpe.f32	s15, s12
   2491c:	vmrs	APSR_nzcv, fpscr
   24920:	vmovle.f32	s15, s13
   24924:	vmovgt.f32	s15, s14
   24928:	vstr	s15, [r0, #28]
   2492c:	b	247e8 <__assert_fail@plt+0x121f4>
   24930:	mov	r9, r5
   24934:	b	247e8 <__assert_fail@plt+0x121f4>
   24938:	add	sl, r5, #1
   2493c:	mov	fp, #1
   24940:	b	247bc <__assert_fail@plt+0x121c8>
   24944:	vldr	s15, [pc, #96]	; 249ac <__assert_fail@plt+0x123b8>
   24948:	b	24928 <__assert_fail@plt+0x12334>
   2494c:	vldr	s15, [pc, #80]	; 249a4 <__assert_fail@plt+0x123b0>
   24950:	b	24928 <__assert_fail@plt+0x12334>
   24954:	movw	r1, #15144	; 0x3b28
   24958:	movt	r1, #5
   2495c:	ldr	r3, [pc, #76]	; 249b0 <__assert_fail@plt+0x123bc>
   24960:	movw	r0, #16676	; 0x4124
   24964:	movt	r0, #5
   24968:	movw	r2, #3149	; 0xc4d
   2496c:	bl	125f4 <__assert_fail@plt>
   24970:	movw	r2, #17040	; 0x4290
   24974:	movt	r2, #5
   24978:	mov	r3, sl
   2497c:	mov	r1, #0
   24980:	mov	r0, #1
   24984:	bl	121ec <error@plt>
   24988:	andeq	r0, r0, r0
   2498c:	submi	r0, lr, r0
   24990:	andeq	r0, r0, r0
   24994:	bicmi	ip, sp, r5, ror #26
   24998:	stclcc	12, cr12, [ip, #820]	; 0x334
   2499c:	svccc	0x00800000
   249a0:	sbcmi	r0, r8, #0
   249a4:			; <UNDEFINED> instruction: 0x3e99999a
   249a8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   249ac:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   249b0:	andeq	r3, r5, r4, ror #10
   249b4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   249b8:	subs	r4, r1, #0
   249bc:	strd	r6, [sp, #8]
   249c0:	strd	r8, [sp, #16]
   249c4:	str	lr, [sp, #24]
   249c8:	sub	sp, sp, #20
   249cc:	beq	24b50 <__assert_fail@plt+0x1255c>
   249d0:	ldr	r3, [r2]
   249d4:	ldr	r5, [r4, r3, lsl #2]
   249d8:	cmp	r5, #0
   249dc:	beq	24b6c <__assert_fail@plt+0x12578>
   249e0:	add	r3, r3, #1
   249e4:	str	r3, [r2]
   249e8:	ldrb	r3, [r5]
   249ec:	cmp	r3, #43	; 0x2b
   249f0:	beq	24b74 <__assert_fail@plt+0x12580>
   249f4:	cmp	r3, #45	; 0x2d
   249f8:	movne	r7, r5
   249fc:	movne	r8, #2
   24a00:	bne	24a0c <__assert_fail@plt+0x12418>
   24a04:	add	r7, r5, #1
   24a08:	mov	r8, #0
   24a0c:	mov	r9, r0
   24a10:	movw	r3, #9140	; 0x23b4
   24a14:	movt	r3, #1
   24a18:	mov	r2, sp
   24a1c:	mov	r1, #0
   24a20:	mov	r0, r7
   24a24:	bl	36e60 <__assert_fail@plt+0x2486c>
   24a28:	subs	r4, r0, #0
   24a2c:	bne	24a54 <__assert_fail@plt+0x12460>
   24a30:	mov	r2, #5
   24a34:	movw	r1, #17112	; 0x42d8
   24a38:	movt	r1, #5
   24a3c:	bl	120b4 <dcgettext@plt>
   24a40:	mov	r2, r0
   24a44:	mov	r3, r5
   24a48:	mov	r1, r4
   24a4c:	mov	r0, #1
   24a50:	bl	121ec <error@plt>
   24a54:	vldr	d7, [pc, #364]	; 24bc8 <__assert_fail@plt+0x125d4>
   24a58:	add	r0, sp, #8
   24a5c:	vldr	d0, [sp]
   24a60:	vmul.f64	d0, d0, d7
   24a64:	bl	12294 <modf@plt>
   24a68:	vldr	d7, [pc, #352]	; 24bd0 <__assert_fail@plt+0x125dc>
   24a6c:	vmul.f64	d0, d0, d7
   24a70:	vcmpe.f64	d0, d7
   24a74:	vmrs	APSR_nzcv, fpscr
   24a78:	bpl	24ba8 <__assert_fail@plt+0x125b4>
   24a7c:	vldr	d7, [pc, #340]	; 24bd8 <__assert_fail@plt+0x125e4>
   24a80:	vldr	d6, [sp, #8]
   24a84:	vsub.f64	d5, d7, d6
   24a88:	vcmpe.f64	d6, d7
   24a8c:	vcvt.s32.f64	s13, d5
   24a90:	vmrs	APSR_nzcv, fpscr
   24a94:	movmi	r3, #1
   24a98:	movpl	r3, #0
   24a9c:	vmov	r6, s13
   24aa0:	cmp	r6, #0
   24aa4:	movle	r2, #0
   24aa8:	movgt	r2, #1
   24aac:	cmp	r2, r3
   24ab0:	bne	24b90 <__assert_fail@plt+0x1259c>
   24ab4:	vsub.f64	d7, d7, d0
   24ab8:	vcmpe.f64	d0, #0.0
   24abc:	vcvt.s32.f64	s15, d7
   24ac0:	vmrs	APSR_nzcv, fpscr
   24ac4:	vmov	r7, s15
   24ac8:	ble	24adc <__assert_fail@plt+0x124e8>
   24acc:	add	r7, r7, #998244352	; 0x3b800000
   24ad0:	add	r7, r7, #1753088	; 0x1ac000
   24ad4:	sub	r6, r6, #1
   24ad8:	add	r7, r7, #2560	; 0xa00
   24adc:	mov	r1, r5
   24ae0:	mov	r0, r9
   24ae4:	bl	1c170 <__assert_fail@plt+0x9b7c>
   24ae8:	movw	r2, #17671	; 0x4507
   24aec:	movt	r2, #49710	; 0xc22e
   24af0:	asr	r3, r6, #31
   24af4:	vldr	s14, [pc, #228]	; 24be0 <__assert_fail@plt+0x125ec>
   24af8:	smull	r1, r2, r2, r6
   24afc:	str	r8, [r0, #44]	; 0x2c
   24b00:	strd	r6, [r0, #48]	; 0x30
   24b04:	add	r2, r2, r6
   24b08:	rsb	r3, r3, r2, asr #16
   24b0c:	vmov	s15, r3
   24b10:	vcvt.f32.s32	s15, s15
   24b14:	vcmpe.f32	s15, s14
   24b18:	vmrs	APSR_nzcv, fpscr
   24b1c:	bmi	24b80 <__assert_fail@plt+0x1258c>
   24b20:	vldr	s14, [pc, #188]	; 24be4 <__assert_fail@plt+0x125f0>
   24b24:	vcmpe.f32	s15, s14
   24b28:	vmrs	APSR_nzcv, fpscr
   24b2c:	bmi	24b88 <__assert_fail@plt+0x12594>
   24b30:	vldr	s12, [pc, #176]	; 24be8 <__assert_fail@plt+0x125f4>
   24b34:	vldr	s14, [pc, #176]	; 24bec <__assert_fail@plt+0x125f8>
   24b38:	vldr	s13, [pc, #176]	; 24bf0 <__assert_fail@plt+0x125fc>
   24b3c:	vcmpe.f32	s15, s12
   24b40:	vmrs	APSR_nzcv, fpscr
   24b44:	vmovle.f32	s15, s13
   24b48:	vmovgt.f32	s15, s14
   24b4c:	vstr	s15, [r0, #28]
   24b50:	mov	r0, r4
   24b54:	add	sp, sp, #20
   24b58:	ldrd	r4, [sp]
   24b5c:	ldrd	r6, [sp, #8]
   24b60:	ldrd	r8, [sp, #16]
   24b64:	add	sp, sp, #24
   24b68:	pop	{pc}		; (ldr pc, [sp], #4)
   24b6c:	mov	r4, r5
   24b70:	b	24b50 <__assert_fail@plt+0x1255c>
   24b74:	add	r7, r5, #1
   24b78:	mov	r8, #1
   24b7c:	b	24a0c <__assert_fail@plt+0x12418>
   24b80:	vldr	s15, [pc, #108]	; 24bf4 <__assert_fail@plt+0x12600>
   24b84:	b	24b4c <__assert_fail@plt+0x12558>
   24b88:	vldr	s15, [pc, #92]	; 24bec <__assert_fail@plt+0x125f8>
   24b8c:	b	24b4c <__assert_fail@plt+0x12558>
   24b90:	movw	r2, #16608	; 0x40e0
   24b94:	movt	r2, #5
   24b98:	mov	r3, r7
   24b9c:	mov	r1, #0
   24ba0:	mov	r0, #1
   24ba4:	bl	121ec <error@plt>
   24ba8:	movw	r1, #15144	; 0x3b28
   24bac:	movt	r1, #5
   24bb0:	ldr	r3, [pc, #64]	; 24bf8 <__assert_fail@plt+0x12604>
   24bb4:	movw	r0, #16676	; 0x4124
   24bb8:	movt	r0, #5
   24bbc:	movw	r2, #3149	; 0xc4d
   24bc0:	bl	125f4 <__assert_fail@plt>
   24bc4:	nop	{0}
   24bc8:	andeq	r0, r0, r0
   24bcc:	rscsmi	r1, r5, r0, lsl #16
   24bd0:	andeq	r0, r0, r0
   24bd4:	bicmi	ip, sp, r5, ror #26
	...
   24be0:	stclcc	12, cr12, [ip, #820]	; 0x334
   24be4:	svccc	0x00800000
   24be8:	sbcmi	r0, r8, #0
   24bec:			; <UNDEFINED> instruction: 0x3e99999a
   24bf0:	mcrcc	14, 6, sl, cr7, cr4, {0}
   24bf4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   24bf8:	andeq	r3, r5, r4, ror #10
   24bfc:	cmp	r1, #0
   24c00:	strd	r4, [sp, #-20]!	; 0xffffffec
   24c04:	mov	r4, r2
   24c08:	ldr	r3, [r2]
   24c0c:	strd	r6, [sp, #8]
   24c10:	str	lr, [sp, #16]
   24c14:	sub	sp, sp, #28
   24c18:	beq	24c80 <__assert_fail@plt+0x1268c>
   24c1c:	ldr	r5, [r1, r3, lsl #2]
   24c20:	cmp	r5, #0
   24c24:	beq	24c80 <__assert_fail@plt+0x1268c>
   24c28:	add	r3, r3, #1
   24c2c:	mov	r6, r0
   24c30:	str	r3, [r2]
   24c34:	ldrb	r3, [r5]
   24c38:	cmp	r3, #43	; 0x2b
   24c3c:	beq	24cf0 <__assert_fail@plt+0x126fc>
   24c40:	cmp	r3, #45	; 0x2d
   24c44:	movne	r0, r5
   24c48:	movne	r7, #2
   24c4c:	bne	24c58 <__assert_fail@plt+0x12664>
   24c50:	add	r0, r5, #1
   24c54:	mov	r7, #1
   24c58:	movw	r1, #9500	; 0x251c
   24c5c:	movt	r1, #5
   24c60:	add	r3, sp, #16
   24c64:	mov	r2, #10
   24c68:	str	r1, [sp]
   24c6c:	add	r1, sp, #12
   24c70:	bl	37528 <__assert_fail@plt+0x24f34>
   24c74:	cmp	r0, #0
   24c78:	beq	24ca0 <__assert_fail@plt+0x126ac>
   24c7c:	ldr	r3, [r4]
   24c80:	sub	r3, r3, #1
   24c84:	mov	r0, #0
   24c88:	str	r3, [r4]
   24c8c:	add	sp, sp, #28
   24c90:	ldrd	r4, [sp]
   24c94:	ldrd	r6, [sp, #8]
   24c98:	add	sp, sp, #16
   24c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   24ca0:	mov	r1, r5
   24ca4:	mov	r0, r6
   24ca8:	bl	1c170 <__assert_fail@plt+0x9b7c>
   24cac:	movw	r1, #32364	; 0x7e6c
   24cb0:	movt	r1, #6
   24cb4:	ldrd	r2, [sp, #16]
   24cb8:	mov	r4, r0
   24cbc:	ldr	r1, [r1, #44]	; 0x2c
   24cc0:	str	r7, [r0, #40]	; 0x28
   24cc4:	strd	r2, [r0, #48]	; 0x30
   24cc8:	tst	r1, #1
   24ccc:	bne	24cfc <__assert_fail@plt+0x12708>
   24cd0:	vldr	s15, [pc, #180]	; 24d8c <__assert_fail@plt+0x12798>
   24cd4:	cmp	r3, #0
   24cd8:	mov	r0, #1
   24cdc:	cmpeq	r2, #100	; 0x64
   24ce0:	vldr	s14, [pc, #168]	; 24d90 <__assert_fail@plt+0x1279c>
   24ce4:	vmovcs.f32	s15, s14
   24ce8:	vstr	s15, [r4, #28]
   24cec:	b	24c8c <__assert_fail@plt+0x12698>
   24cf0:	add	r0, r5, #1
   24cf4:	mov	r7, #0
   24cf8:	b	24c58 <__assert_fail@plt+0x12664>
   24cfc:	movw	r5, #30024	; 0x7548
   24d00:	movt	r5, #6
   24d04:	ldr	r2, [r0, #4]
   24d08:	movw	r1, #16704	; 0x4140
   24d0c:	movt	r1, #5
   24d10:	ldr	r0, [r5]
   24d14:	bl	1233c <fprintf@plt>
   24d18:	cmp	r7, #0
   24d1c:	ldr	r0, [r5]
   24d20:	bne	24d5c <__assert_fail@plt+0x12768>
   24d24:	movw	r2, #16724	; 0x4154
   24d28:	movt	r2, #5
   24d2c:	movw	r3, #16720	; 0x4150
   24d30:	movt	r3, #5
   24d34:	movw	r1, #16728	; 0x4158
   24d38:	movt	r1, #5
   24d3c:	bl	1233c <fprintf@plt>
   24d40:	movw	r1, #16800	; 0x41a0
   24d44:	movt	r1, #5
   24d48:	ldr	r0, [r5]
   24d4c:	ldrd	r2, [r4, #48]	; 0x30
   24d50:	bl	1233c <fprintf@plt>
   24d54:	ldrd	r2, [r4, #48]	; 0x30
   24d58:	b	24cd0 <__assert_fail@plt+0x126dc>
   24d5c:	cmp	r7, #1
   24d60:	movw	ip, #16764	; 0x417c
   24d64:	movt	ip, #5
   24d68:	movw	r1, #16796	; 0x419c
   24d6c:	movt	r1, #5
   24d70:	movw	r2, #16756	; 0x4174
   24d74:	movt	r2, #5
   24d78:	movw	r3, #16752	; 0x4170
   24d7c:	movt	r3, #5
   24d80:	movne	r2, ip
   24d84:	movne	r3, r1
   24d88:	b	24d34 <__assert_fail@plt+0x12740>
   24d8c:	svccc	0x007d70a4
   24d90:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   24d94:	cmp	r1, #0
   24d98:	strd	r4, [sp, #-20]!	; 0xffffffec
   24d9c:	mov	r4, r2
   24da0:	ldr	r3, [r2]
   24da4:	strd	r6, [sp, #8]
   24da8:	str	lr, [sp, #16]
   24dac:	sub	sp, sp, #28
   24db0:	beq	24e18 <__assert_fail@plt+0x12824>
   24db4:	ldr	r5, [r1, r3, lsl #2]
   24db8:	cmp	r5, #0
   24dbc:	beq	24e18 <__assert_fail@plt+0x12824>
   24dc0:	add	r3, r3, #1
   24dc4:	mov	r6, r0
   24dc8:	str	r3, [r2]
   24dcc:	ldrb	r3, [r5]
   24dd0:	cmp	r3, #43	; 0x2b
   24dd4:	beq	24e8c <__assert_fail@plt+0x12898>
   24dd8:	cmp	r3, #45	; 0x2d
   24ddc:	movne	r0, r5
   24de0:	movne	r7, #2
   24de4:	bne	24df0 <__assert_fail@plt+0x127fc>
   24de8:	add	r0, r5, #1
   24dec:	mov	r7, #1
   24df0:	movw	r1, #9500	; 0x251c
   24df4:	movt	r1, #5
   24df8:	add	r3, sp, #16
   24dfc:	mov	r2, #10
   24e00:	str	r1, [sp]
   24e04:	add	r1, sp, #12
   24e08:	bl	37528 <__assert_fail@plt+0x24f34>
   24e0c:	cmp	r0, #0
   24e10:	beq	24e38 <__assert_fail@plt+0x12844>
   24e14:	ldr	r3, [r4]
   24e18:	sub	r3, r3, #1
   24e1c:	mov	r0, #0
   24e20:	str	r3, [r4]
   24e24:	add	sp, sp, #28
   24e28:	ldrd	r4, [sp]
   24e2c:	ldrd	r6, [sp, #8]
   24e30:	add	sp, sp, #16
   24e34:	pop	{pc}		; (ldr pc, [sp], #4)
   24e38:	mov	r1, r5
   24e3c:	mov	r0, r6
   24e40:	bl	1c170 <__assert_fail@plt+0x9b7c>
   24e44:	movw	r1, #32364	; 0x7e6c
   24e48:	movt	r1, #6
   24e4c:	ldrd	r2, [sp, #16]
   24e50:	mov	r4, r0
   24e54:	ldr	r1, [r1, #44]	; 0x2c
   24e58:	str	r7, [r0, #40]	; 0x28
   24e5c:	strd	r2, [r0, #48]	; 0x30
   24e60:	tst	r1, #1
   24e64:	bne	24e98 <__assert_fail@plt+0x128a4>
   24e68:	mov	r3, #1
   24e6c:	movw	r2, #14269	; 0x37bd
   24e70:	movt	r2, #13702	; 0x3586
   24e74:	mov	r1, #0
   24e78:	mov	r0, r3
   24e7c:	strh	r1, [r4, #18]
   24e80:	strb	r3, [r4, #20]
   24e84:	str	r2, [r4, #28]
   24e88:	b	24e24 <__assert_fail@plt+0x12830>
   24e8c:	add	r0, r5, #1
   24e90:	mov	r7, #0
   24e94:	b	24df0 <__assert_fail@plt+0x127fc>
   24e98:	movw	r5, #30024	; 0x7548
   24e9c:	movt	r5, #6
   24ea0:	ldr	r2, [r0, #4]
   24ea4:	movw	r1, #16704	; 0x4140
   24ea8:	movt	r1, #5
   24eac:	ldr	r0, [r5]
   24eb0:	bl	1233c <fprintf@plt>
   24eb4:	cmp	r7, #0
   24eb8:	ldr	r0, [r5]
   24ebc:	bne	24ef4 <__assert_fail@plt+0x12900>
   24ec0:	movw	r2, #16724	; 0x4154
   24ec4:	movt	r2, #5
   24ec8:	movw	r3, #16720	; 0x4150
   24ecc:	movt	r3, #5
   24ed0:	movw	r1, #16728	; 0x4158
   24ed4:	movt	r1, #5
   24ed8:	bl	1233c <fprintf@plt>
   24edc:	movw	r1, #16800	; 0x41a0
   24ee0:	movt	r1, #5
   24ee4:	ldr	r0, [r5]
   24ee8:	ldrd	r2, [r4, #48]	; 0x30
   24eec:	bl	1233c <fprintf@plt>
   24ef0:	b	24e68 <__assert_fail@plt+0x12874>
   24ef4:	cmp	r7, #1
   24ef8:	movw	ip, #16764	; 0x417c
   24efc:	movt	ip, #5
   24f00:	movw	r1, #16796	; 0x419c
   24f04:	movt	r1, #5
   24f08:	movw	r2, #16756	; 0x4174
   24f0c:	movt	r2, #5
   24f10:	movw	r3, #16752	; 0x4170
   24f14:	movt	r3, #5
   24f18:	movne	r2, ip
   24f1c:	movne	r3, r1
   24f20:	b	24ed0 <__assert_fail@plt+0x128dc>
   24f24:	cmp	r1, #0
   24f28:	strd	r4, [sp, #-20]!	; 0xffffffec
   24f2c:	mov	r4, r2
   24f30:	ldr	r3, [r2]
   24f34:	strd	r6, [sp, #8]
   24f38:	str	lr, [sp, #16]
   24f3c:	sub	sp, sp, #28
   24f40:	beq	24fa8 <__assert_fail@plt+0x129b4>
   24f44:	ldr	r5, [r1, r3, lsl #2]
   24f48:	cmp	r5, #0
   24f4c:	beq	24fa8 <__assert_fail@plt+0x129b4>
   24f50:	add	r3, r3, #1
   24f54:	mov	r6, r0
   24f58:	str	r3, [r2]
   24f5c:	ldrb	r3, [r5]
   24f60:	cmp	r3, #43	; 0x2b
   24f64:	beq	25018 <__assert_fail@plt+0x12a24>
   24f68:	cmp	r3, #45	; 0x2d
   24f6c:	movne	r0, r5
   24f70:	movne	r7, #2
   24f74:	bne	24f80 <__assert_fail@plt+0x1298c>
   24f78:	add	r0, r5, #1
   24f7c:	mov	r7, #1
   24f80:	movw	r1, #9500	; 0x251c
   24f84:	movt	r1, #5
   24f88:	add	r3, sp, #16
   24f8c:	mov	r2, #10
   24f90:	str	r1, [sp]
   24f94:	add	r1, sp, #12
   24f98:	bl	37528 <__assert_fail@plt+0x24f34>
   24f9c:	cmp	r0, #0
   24fa0:	beq	24fc8 <__assert_fail@plt+0x129d4>
   24fa4:	ldr	r3, [r4]
   24fa8:	sub	r3, r3, #1
   24fac:	mov	r0, #0
   24fb0:	str	r3, [r4]
   24fb4:	add	sp, sp, #28
   24fb8:	ldrd	r4, [sp]
   24fbc:	ldrd	r6, [sp, #8]
   24fc0:	add	sp, sp, #16
   24fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   24fc8:	mov	r1, r5
   24fcc:	mov	r0, r6
   24fd0:	bl	1c170 <__assert_fail@plt+0x9b7c>
   24fd4:	movw	r1, #32364	; 0x7e6c
   24fd8:	movt	r1, #6
   24fdc:	ldrd	r2, [sp, #16]
   24fe0:	mov	r4, r0
   24fe4:	ldr	r1, [r1, #44]	; 0x2c
   24fe8:	str	r7, [r0, #40]	; 0x28
   24fec:	strd	r2, [r0, #48]	; 0x30
   24ff0:	tst	r1, #1
   24ff4:	bne	25024 <__assert_fail@plt+0x12a30>
   24ff8:	vldr	s15, [pc, #180]	; 250b4 <__assert_fail@plt+0x12ac0>
   24ffc:	cmp	r3, #0
   25000:	mov	r0, #1
   25004:	cmpeq	r2, #100	; 0x64
   25008:	vldr	s14, [pc, #168]	; 250b8 <__assert_fail@plt+0x12ac4>
   2500c:	vmovcs.f32	s15, s14
   25010:	vstr	s15, [r4, #28]
   25014:	b	24fb4 <__assert_fail@plt+0x129c0>
   25018:	add	r0, r5, #1
   2501c:	mov	r7, #0
   25020:	b	24f80 <__assert_fail@plt+0x1298c>
   25024:	movw	r5, #30024	; 0x7548
   25028:	movt	r5, #6
   2502c:	ldr	r2, [r0, #4]
   25030:	movw	r1, #16704	; 0x4140
   25034:	movt	r1, #5
   25038:	ldr	r0, [r5]
   2503c:	bl	1233c <fprintf@plt>
   25040:	cmp	r7, #0
   25044:	ldr	r0, [r5]
   25048:	bne	25084 <__assert_fail@plt+0x12a90>
   2504c:	movw	r2, #16724	; 0x4154
   25050:	movt	r2, #5
   25054:	movw	r3, #16720	; 0x4150
   25058:	movt	r3, #5
   2505c:	movw	r1, #16728	; 0x4158
   25060:	movt	r1, #5
   25064:	bl	1233c <fprintf@plt>
   25068:	movw	r1, #16800	; 0x41a0
   2506c:	movt	r1, #5
   25070:	ldr	r0, [r5]
   25074:	ldrd	r2, [r4, #48]	; 0x30
   25078:	bl	1233c <fprintf@plt>
   2507c:	ldrd	r2, [r4, #48]	; 0x30
   25080:	b	24ff8 <__assert_fail@plt+0x12a04>
   25084:	cmp	r7, #1
   25088:	movw	ip, #16764	; 0x417c
   2508c:	movt	ip, #5
   25090:	movw	r1, #16796	; 0x419c
   25094:	movt	r1, #5
   25098:	movw	r2, #16756	; 0x4174
   2509c:	movt	r2, #5
   250a0:	movw	r3, #16752	; 0x4170
   250a4:	movt	r3, #5
   250a8:	movne	r2, ip
   250ac:	movne	r3, r1
   250b0:	b	2505c <__assert_fail@plt+0x12a68>
   250b4:	svccc	0x007d70a4
   250b8:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   250bc:	cmp	r1, #0
   250c0:	beq	252f4 <__assert_fail@plt+0x12d00>
   250c4:	ldr	r3, [r2]
   250c8:	strd	r4, [sp, #-16]!
   250cc:	ldr	r5, [r1, r3, lsl #2]
   250d0:	str	r6, [sp, #8]
   250d4:	str	lr, [sp, #12]
   250d8:	sub	sp, sp, #8
   250dc:	cmp	r5, #0
   250e0:	beq	252ec <__assert_fail@plt+0x12cf8>
   250e4:	add	r3, r3, #1
   250e8:	str	r3, [r2]
   250ec:	ldrb	r4, [r5]
   250f0:	cmp	r4, #0
   250f4:	beq	253cc <__assert_fail@plt+0x12dd8>
   250f8:	movw	r1, #22460	; 0x57bc
   250fc:	movt	r1, #1
   25100:	mov	r2, r5
   25104:	bl	1c124 <__assert_fail@plt+0x9b30>
   25108:	mov	r3, #0
   2510c:	mov	r1, #1
   25110:	strh	r1, [r0, #18]
   25114:	str	r3, [r0, #28]
   25118:	ldrb	r6, [r5]
   2511c:	cmp	r6, #0
   25120:	beq	25364 <__assert_fail@plt+0x12d70>
   25124:	vldr	s7, [pc, #716]	; 253f8 <__assert_fail@plt+0x12e04>
   25128:	vldr	s8, [pc, #716]	; 253fc <__assert_fail@plt+0x12e08>
   2512c:	vldr	s9, [pc, #716]	; 25400 <__assert_fail@plt+0x12e0c>
   25130:	vldr	s10, [pc, #716]	; 25404 <__assert_fail@plt+0x12e10>
   25134:	vldr	s11, [pc, #716]	; 25408 <__assert_fail@plt+0x12e14>
   25138:	vldr	s12, [pc, #716]	; 2540c <__assert_fail@plt+0x12e18>
   2513c:	vldr	s13, [pc, #716]	; 25410 <__assert_fail@plt+0x12e1c>
   25140:	sub	r6, r6, #68	; 0x44
   25144:	cmp	r6, #47	; 0x2f
   25148:	ldrls	pc, [pc, r6, lsl #2]
   2514c:	b	25330 <__assert_fail@plt+0x12d3c>
   25150:	strdeq	r5, [r2], -ip
   25154:	andeq	r5, r2, r0, lsr r3
   25158:	andeq	r5, r2, r0, lsr r3
   2515c:	andeq	r5, r2, r0, lsr r3
   25160:	andeq	r5, r2, r0, lsr r3
   25164:	andeq	r5, r2, r0, lsr r3
   25168:	andeq	r5, r2, r0, lsr r3
   2516c:	andeq	r5, r2, r0, lsr r3
   25170:	andeq	r5, r2, r0, lsr r3
   25174:	andeq	r5, r2, r0, lsr r3
   25178:	andeq	r5, r2, r0, lsr r3
   2517c:	andeq	r5, r2, r0, lsr r3
   25180:	andeq	r5, r2, r0, lsr r3
   25184:	andeq	r5, r2, r0, lsr r3
   25188:	andeq	r5, r2, r0, lsr r3
   2518c:	andeq	r5, r2, r0, lsr r3
   25190:	andeq	r5, r2, r0, lsr r3
   25194:	andeq	r5, r2, r0, lsr r3
   25198:	andeq	r5, r2, r0, lsr r3
   2519c:	andeq	r5, r2, r0, lsr r3
   251a0:	andeq	r5, r2, r0, lsr r3
   251a4:	andeq	r5, r2, r0, lsr r3
   251a8:	andeq	r5, r2, r0, lsr r3
   251ac:	andeq	r5, r2, r0, lsr r3
   251b0:	andeq	r5, r2, r0, lsr r3
   251b4:	andeq	r5, r2, r0, lsr r3
   251b8:	andeq	r5, r2, r0, lsr r3
   251bc:	andeq	r5, r2, r0, lsr r3
   251c0:	andeq	r5, r2, r0, lsr r3
   251c4:	andeq	r5, r2, r0, lsr r3
   251c8:	andeq	r5, r2, r8, asr #5
   251cc:			; <UNDEFINED> instruction: 0x000252bc
   251d0:			; <UNDEFINED> instruction: 0x000252b0
   251d4:	andeq	r5, r2, r0, lsr r3
   251d8:	andeq	r5, r2, r4, lsr #5
   251dc:	andeq	r5, r2, r0, lsr r3
   251e0:	andeq	r5, r2, r0, lsr r3
   251e4:	andeq	r5, r2, r0, lsr r3
   251e8:	andeq	r5, r2, r0, lsr r3
   251ec:	andeq	r5, r2, r0, lsr r3
   251f0:	muleq	r2, r8, r2
   251f4:	andeq	r5, r2, r0, lsr r3
   251f8:	andeq	r5, r2, r0, lsr r3
   251fc:	andeq	r5, r2, r0, lsr r3
   25200:	andeq	r5, r2, ip, lsl #5
   25204:	andeq	r5, r2, r0, lsr r3
   25208:	andeq	r5, r2, r0, lsr r3
   2520c:	andeq	r5, r2, r0, lsl r2
   25210:	vmov.f32	s15, s9
   25214:	mov	r3, #6
   25218:	add	r3, r0, r3
   2521c:	ldrb	r6, [r3, #40]	; 0x28
   25220:	cmp	r6, #0
   25224:	bne	2536c <__assert_fail@plt+0x12d78>
   25228:	vldr	s14, [r0, #28]
   2522c:	mov	r4, #1
   25230:	vadd.f32	s15, s14, s15
   25234:	vstr	s15, [r0, #28]
   25238:	strb	r4, [r3, #40]	; 0x28
   2523c:	ldrb	r3, [r5, #1]
   25240:	cmp	r3, #0
   25244:	beq	252d4 <__assert_fail@plt+0x12ce0>
   25248:	cmp	r3, #44	; 0x2c
   2524c:	bne	253a0 <__assert_fail@plt+0x12dac>
   25250:	ldrb	r6, [r5, #2]
   25254:	add	r5, r5, #2
   25258:	cmp	r6, #0
   2525c:	bne	25140 <__assert_fail@plt+0x12b4c>
   25260:	mov	r2, #5
   25264:	movw	r1, #14148	; 0x3744
   25268:	movt	r1, #5
   2526c:	mov	r0, r6
   25270:	bl	120b4 <dcgettext@plt>
   25274:	mov	r2, r0
   25278:	movw	r3, #13840	; 0x3610
   2527c:	movt	r3, #5
   25280:	mov	r1, r6
   25284:	mov	r0, r4
   25288:	bl	121ec <error@plt>
   2528c:	vmov.f32	s15, s10
   25290:	mov	r3, #5
   25294:	b	25218 <__assert_fail@plt+0x12c24>
   25298:	vmov.f32	s15, s11
   2529c:	mov	r3, #4
   252a0:	b	25218 <__assert_fail@plt+0x12c24>
   252a4:	vmov.f32	s15, s12
   252a8:	mov	r3, #3
   252ac:	b	25218 <__assert_fail@plt+0x12c24>
   252b0:	vmov.f32	s15, s7
   252b4:	mov	r3, #2
   252b8:	b	25218 <__assert_fail@plt+0x12c24>
   252bc:	vmov.f32	s15, s13
   252c0:	mov	r3, #1
   252c4:	b	25218 <__assert_fail@plt+0x12c24>
   252c8:	vmov.f32	s15, s8
   252cc:	mov	r3, #0
   252d0:	b	25218 <__assert_fail@plt+0x12c24>
   252d4:	mov	r0, r4
   252d8:	add	sp, sp, #8
   252dc:	ldrd	r4, [sp]
   252e0:	ldr	r6, [sp, #8]
   252e4:	add	sp, sp, #12
   252e8:	pop	{pc}		; (ldr pc, [sp], #4)
   252ec:	mov	r0, r5
   252f0:	b	252d8 <__assert_fail@plt+0x12ce4>
   252f4:	mov	r0, r1
   252f8:	bx	lr
   252fc:	mov	r2, #5
   25300:	movw	r1, #13908	; 0x3654
   25304:	movt	r1, #5
   25308:	mov	r0, #0
   2530c:	bl	120b4 <dcgettext@plt>
   25310:	ldrb	ip, [r5]
   25314:	mov	r2, r0
   25318:	movw	r3, #13840	; 0x3610
   2531c:	movt	r3, #5
   25320:	mov	r1, #0
   25324:	mov	r0, #1
   25328:	str	ip, [sp]
   2532c:	bl	121ec <error@plt>
   25330:	mov	r2, #5
   25334:	movw	r1, #14012	; 0x36bc
   25338:	movt	r1, #5
   2533c:	mov	r0, #0
   25340:	bl	120b4 <dcgettext@plt>
   25344:	ldrb	ip, [r5]
   25348:	mov	r2, r0
   2534c:	movw	r3, #13840	; 0x3610
   25350:	movt	r3, #5
   25354:	mov	r1, #0
   25358:	mov	r0, #1
   2535c:	str	ip, [sp]
   25360:	bl	121ec <error@plt>
   25364:	mov	r0, r1
   25368:	b	252d8 <__assert_fail@plt+0x12ce4>
   2536c:	mov	r2, #5
   25370:	movw	r1, #14040	; 0x36d8
   25374:	movt	r1, #5
   25378:	mov	r0, #0
   2537c:	bl	120b4 <dcgettext@plt>
   25380:	movw	ip, #13840	; 0x3610
   25384:	movt	ip, #5
   25388:	ldrb	r3, [r5]
   2538c:	mov	r2, r0
   25390:	mov	r1, #0
   25394:	mov	r0, #1
   25398:	str	ip, [sp]
   2539c:	bl	121ec <error@plt>
   253a0:	mov	r2, #5
   253a4:	movw	r1, #14096	; 0x3710
   253a8:	movt	r1, #5
   253ac:	mov	r0, r6
   253b0:	bl	120b4 <dcgettext@plt>
   253b4:	mov	r2, r0
   253b8:	movw	r3, #13840	; 0x3610
   253bc:	movt	r3, #5
   253c0:	mov	r1, r6
   253c4:	mov	r0, r4
   253c8:	bl	121ec <error@plt>
   253cc:	mov	r2, #5
   253d0:	movw	r1, #13856	; 0x3620
   253d4:	movt	r1, #5
   253d8:	mov	r0, r4
   253dc:	bl	120b4 <dcgettext@plt>
   253e0:	mov	r2, r0
   253e4:	movw	r3, #13840	; 0x3610
   253e8:	movt	r3, #5
   253ec:	mov	r1, r4
   253f0:	mov	r0, #1
   253f4:	bl	121ec <error@plt>
   253f8:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   253fc:	bcc	1a576b4 <stdout@@GLIBC_2.4+0x19f0160>
   25400:			; <UNDEFINED> instruction: 0x378560fd
   25404:	usatcc	r7, #29, lr, asr #16
   25408:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   2540c:	svccc	0x00600000
   25410:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   25414:	str	r4, [sp, #-8]!
   25418:	subs	r4, r0, #0
   2541c:	str	lr, [sp, #4]
   25420:	beq	25464 <__assert_fail@plt+0x12e70>
   25424:	movw	r2, #16844	; 0x41cc
   25428:	movt	r2, #1
   2542c:	movw	r0, #13932	; 0x366c
   25430:	movt	r0, #1
   25434:	mov	r1, #0
   25438:	ldr	r3, [r4]
   2543c:	cmp	r3, r2
   25440:	orreq	r1, r1, #1
   25444:	beq	25450 <__assert_fail@plt+0x12e5c>
   25448:	cmp	r3, r0
   2544c:	orreq	r1, r1, #2
   25450:	ldr	r4, [r4, #152]	; 0x98
   25454:	cmp	r4, #0
   25458:	bne	25438 <__assert_fail@plt+0x12e44>
   2545c:	cmp	r1, #3
   25460:	beq	25470 <__assert_fail@plt+0x12e7c>
   25464:	ldr	r4, [sp]
   25468:	add	sp, sp, #4
   2546c:	pop	{pc}		; (ldr pc, [sp], #4)
   25470:	movw	r3, #32364	; 0x7e6c
   25474:	movt	r3, #6
   25478:	ldrb	r3, [r3, #1]
   2547c:	cmp	r3, #0
   25480:	bne	25464 <__assert_fail@plt+0x12e70>
   25484:	mov	r2, #5
   25488:	movw	r1, #17144	; 0x42f8
   2548c:	movt	r1, #5
   25490:	mov	r0, r4
   25494:	bl	120b4 <dcgettext@plt>
   25498:	mov	r2, r0
   2549c:	mov	r1, r4
   254a0:	mov	r0, #1
   254a4:	bl	121ec <error@plt>
   254a8:	cmp	r0, #1
   254ac:	movw	r3, #32364	; 0x7e6c
   254b0:	movt	r3, #6
   254b4:	beq	25508 <__assert_fail@plt+0x12f14>
   254b8:	cmp	r0, #0
   254bc:	beq	25528 <__assert_fail@plt+0x12f34>
   254c0:	cmp	r0, #2
   254c4:	bne	254e8 <__assert_fail@plt+0x12ef4>
   254c8:	movw	r1, #51480	; 0xc918
   254cc:	movt	r1, #1
   254d0:	movw	r2, #8180	; 0x1ff4
   254d4:	movt	r2, #2
   254d8:	mov	ip, #1
   254dc:	strb	ip, [r3, #12]
   254e0:	str	r1, [r3, #52]	; 0x34
   254e4:	str	r2, [r3, #64]	; 0x40
   254e8:	ldr	r2, [r3, #44]	; 0x2c
   254ec:	str	r0, [r3, #48]	; 0x30
   254f0:	tst	r2, #2
   254f4:	beq	25504 <__assert_fail@plt+0x12f10>
   254f8:	movw	r2, #52128	; 0xcba0
   254fc:	movt	r2, #1
   25500:	str	r2, [r3, #52]	; 0x34
   25504:	bx	lr
   25508:	movw	r1, #51776	; 0xca40
   2550c:	movt	r1, #1
   25510:	strb	r0, [r3, #12]
   25514:	movw	r2, #11220	; 0x2bd4
   25518:	movt	r2, #2
   2551c:	str	r1, [r3, #52]	; 0x34
   25520:	str	r2, [r3, #64]	; 0x40
   25524:	b	254e8 <__assert_fail@plt+0x12ef4>
   25528:	movw	r1, #52028	; 0xcb3c
   2552c:	movt	r1, #1
   25530:	movw	r2, #64716	; 0xfccc
   25534:	movt	r2, #1
   25538:	str	r1, [r3, #52]	; 0x34
   2553c:	str	r2, [r3, #64]	; 0x40
   25540:	b	254e8 <__assert_fail@plt+0x12ef4>
   25544:	movw	r3, #31952	; 0x7cd0
   25548:	movt	r3, #6
   2554c:	mov	r2, #0
   25550:	str	r2, [r3, #8]
   25554:	bx	lr
   25558:	bx	lr
   2555c:	mov	r1, r0
   25560:	mov	r2, #6
   25564:	strd	r4, [sp, #-24]!	; 0xffffffe8
   25568:	strd	r6, [sp, #8]
   2556c:	str	r8, [sp, #16]
   25570:	mov	r8, r0
   25574:	movw	r0, #15724	; 0x3d6c
   25578:	movt	r0, #5
   2557c:	str	lr, [sp, #20]
   25580:	sub	sp, sp, #8
   25584:	bl	12594 <strncmp@plt>
   25588:	cmp	r0, #0
   2558c:	bne	255a0 <__assert_fail@plt+0x12fac>
   25590:	mov	r0, r8
   25594:	bl	12300 <strlen@plt>
   25598:	cmp	r0, #8
   2559c:	beq	256a8 <__assert_fail@plt+0x130b4>
   255a0:	ldrb	r3, [r8]
   255a4:	movw	r4, #5580	; 0x15cc
   255a8:	movt	r4, #5
   255ac:	mov	r5, #0
   255b0:	ldr	r6, [pc, #276]	; 256cc <__assert_fail@plt+0x130d8>
   255b4:	cmp	r3, #45	; 0x2d
   255b8:	addeq	r7, r8, #1
   255bc:	movne	r7, r8
   255c0:	b	255d8 <__assert_fail@plt+0x12fe4>
   255c4:	add	r5, r5, #1
   255c8:	add	r3, r6, r5, lsl #4
   255cc:	ldr	r4, [r3, #4]
   255d0:	cmp	r4, #0
   255d4:	beq	25680 <__assert_fail@plt+0x1308c>
   255d8:	mov	r0, r4
   255dc:	mov	r1, r7
   255e0:	bl	11f40 <strcmp@plt>
   255e4:	subs	r3, r0, #0
   255e8:	bne	255c4 <__assert_fail@plt+0x12fd0>
   255ec:	lsl	r4, r5, #4
   255f0:	movw	r2, #12228	; 0x2fc4
   255f4:	movt	r2, #5
   255f8:	add	r2, r2, r4
   255fc:	add	r4, r6, r4
   25600:	ldr	r2, [r2, #48]	; 0x30
   25604:	cmp	r2, #2
   25608:	beq	25680 <__assert_fail@plt+0x1308c>
   2560c:	cmp	r2, #1
   25610:	beq	256c4 <__assert_fail@plt+0x130d0>
   25614:	movw	r5, #31952	; 0x7cd0
   25618:	movt	r5, #6
   2561c:	cmp	r2, #0
   25620:	ldr	r3, [r5, #8]
   25624:	bne	2569c <__assert_fail@plt+0x130a8>
   25628:	cmp	r3, #0
   2562c:	beq	25680 <__assert_fail@plt+0x1308c>
   25630:	movw	r3, #32364	; 0x7e6c
   25634:	movt	r3, #6
   25638:	ldrb	r6, [r3, #17]
   2563c:	cmp	r6, #0
   25640:	bne	25680 <__assert_fail@plt+0x1308c>
   25644:	ldrb	r3, [r3, #16]
   25648:	cmp	r3, #0
   2564c:	beq	25680 <__assert_fail@plt+0x1308c>
   25650:	mov	r2, #5
   25654:	movw	r1, #17316	; 0x43a4
   25658:	movt	r1, #5
   2565c:	bl	120b4 <dcgettext@plt>
   25660:	ldr	ip, [r5, #8]
   25664:	mov	r2, r0
   25668:	mov	r3, r8
   2566c:	mov	r1, r6
   25670:	mov	r0, r6
   25674:	str	ip, [sp]
   25678:	str	r8, [sp, #4]
   2567c:	bl	121ec <error@plt>
   25680:	mov	r0, r4
   25684:	add	sp, sp, #8
   25688:	ldrd	r4, [sp]
   2568c:	ldrd	r6, [sp, #8]
   25690:	ldr	r8, [sp, #16]
   25694:	add	sp, sp, #20
   25698:	pop	{pc}		; (ldr pc, [sp], #4)
   2569c:	cmp	r3, #0
   256a0:	streq	r8, [r5, #8]
   256a4:	b	25680 <__assert_fail@plt+0x1308c>
   256a8:	movw	r3, #31952	; 0x7cd0
   256ac:	movt	r3, #6
   256b0:	ldr	r4, [pc, #24]	; 256d0 <__assert_fail@plt+0x130dc>
   256b4:	ldr	r2, [r3, #8]
   256b8:	cmp	r2, #0
   256bc:	streq	r8, [r3, #8]
   256c0:	b	25680 <__assert_fail@plt+0x1308c>
   256c4:	mov	r4, r3
   256c8:	b	25680 <__assert_fail@plt+0x1308c>
   256cc:	strdeq	r2, [r5], -r4
   256d0:	andeq	r3, r5, ip, ror r5
   256d4:	cmp	r1, #0
   256d8:	beq	257d8 <__assert_fail@plt+0x131e4>
   256dc:	ldr	r3, [r2]
   256e0:	strd	r4, [sp, #-16]!
   256e4:	ldr	r4, [r1, r3, lsl #2]
   256e8:	str	r6, [sp, #8]
   256ec:	str	lr, [sp, #12]
   256f0:	sub	sp, sp, #104	; 0x68
   256f4:	cmp	r4, #0
   256f8:	moveq	r0, r4
   256fc:	beq	25764 <__assert_fail@plt+0x13170>
   25700:	movw	r6, #32364	; 0x7e6c
   25704:	movt	r6, #6
   25708:	ldrh	r1, [r6, #68]	; 0x44
   2570c:	add	r3, r3, #1
   25710:	mov	r5, r0
   25714:	str	r3, [r2]
   25718:	cmp	r1, #1
   2571c:	bls	25778 <__assert_fail@plt+0x13184>
   25720:	mov	r0, r4
   25724:	bl	1fab0 <__assert_fail@plt+0xd4bc>
   25728:	cmp	r0, #0
   2572c:	bne	25778 <__assert_fail@plt+0x13184>
   25730:	ldr	r3, [r6, #44]	; 0x2c
   25734:	tst	r3, #8
   25738:	bne	257b8 <__assert_fail@plt+0x131c4>
   2573c:	movw	r0, #17616	; 0x44d0
   25740:	movt	r0, #5
   25744:	bl	2555c <__assert_fail@plt+0x12f68>
   25748:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   2574c:	mov	r3, r0
   25750:	mov	r2, #0
   25754:	mov	r1, #0
   25758:	mov	r0, #1
   2575c:	str	r1, [r3, #16]
   25760:	str	r2, [r3, #28]
   25764:	add	sp, sp, #104	; 0x68
   25768:	ldrd	r4, [sp]
   2576c:	ldr	r6, [sp, #8]
   25770:	add	sp, sp, #12
   25774:	pop	{pc}		; (ldr pc, [sp], #4)
   25778:	mov	r0, r5
   2577c:	mov	r1, r4
   25780:	bl	1c170 <__assert_fail@plt+0x9b7c>
   25784:	mov	r5, r0
   25788:	mov	r2, sp
   2578c:	movw	r1, #26352	; 0x66f0
   25790:	movt	r1, #5
   25794:	mov	r0, #3
   25798:	str	r4, [r5, #40]	; 0x28
   2579c:	bl	12558 <__xstat64@plt>
   257a0:	cmp	r0, #0
   257a4:	beq	257e0 <__assert_fail@plt+0x131ec>
   257a8:	vldr	s15, [pc, #96]	; 25810 <__assert_fail@plt+0x1321c>
   257ac:	mov	r0, #1
   257b0:	vstr	s15, [r5, #28]
   257b4:	b	25764 <__assert_fail@plt+0x13170>
   257b8:	movw	r3, #30024	; 0x7548
   257bc:	movt	r3, #6
   257c0:	mov	r2, r4
   257c4:	movw	r1, #17564	; 0x449c
   257c8:	movt	r1, #5
   257cc:	ldr	r0, [r3]
   257d0:	bl	1233c <fprintf@plt>
   257d4:	b	2573c <__assert_fail@plt+0x13148>
   257d8:	mov	r0, r1
   257dc:	bx	lr
   257e0:	mov	r0, sp
   257e4:	movw	r1, #26352	; 0x66f0
   257e8:	movt	r1, #5
   257ec:	bl	1f8f0 <__assert_fail@plt+0xd2fc>
   257f0:	mov	r1, r0
   257f4:	mov	r0, r4
   257f8:	bl	11f40 <strcmp@plt>
   257fc:	vldr	s15, [pc, #16]	; 25814 <__assert_fail@plt+0x13220>
   25800:	cmp	r0, #0
   25804:	vldr	s14, [pc, #12]	; 25818 <__assert_fail@plt+0x13224>
   25808:	vmovne.f32	s15, s14
   2580c:	b	257ac <__assert_fail@plt+0x131b8>
   25810:	svccc	0x00800000
   25814:	svccc	0x00333333
   25818:			; <UNDEFINED> instruction: 0x3e99999a
   2581c:	movw	r0, #17616	; 0x44d0
   25820:	movt	r0, #5
   25824:	str	r4, [sp, #-8]!
   25828:	str	lr, [sp, #4]
   2582c:	bl	2555c <__assert_fail@plt+0x12f68>
   25830:	bl	1c1cc <__assert_fail@plt+0x9bd8>
   25834:	mov	r3, r0
   25838:	mov	r2, #0
   2583c:	ldr	r4, [sp]
   25840:	mov	r1, #0
   25844:	add	sp, sp, #4
   25848:	mov	r0, #1
   2584c:	str	r1, [r3, #16]
   25850:	str	r2, [r3, #28]
   25854:	pop	{pc}		; (ldr pc, [sp], #4)
   25858:	mov	r0, #0
   2585c:	bx	lr
   25860:	str	r4, [sp, #-8]!
   25864:	mov	r5, r0
   25868:	str	lr, [sp, #4]
   2586c:	bl	12348 <__errno_location@plt>
   25870:	ldr	r4, [r0]
   25874:	mov	r2, #5
   25878:	movw	r1, #18244	; 0x4744
   2587c:	movt	r1, #5
   25880:	mov	r0, #0
   25884:	bl	120b4 <dcgettext@plt>
   25888:	mov	r2, r0
   2588c:	mov	r3, r5
   25890:	mov	r0, #1
   25894:	mov	r1, r4
   25898:	bl	121ec <error@plt>
   2589c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   258a0:	strd	r6, [sp, #8]
   258a4:	str	sl, [sp, #24]
   258a8:	subs	sl, r2, #0
   258ac:	strd	r8, [sp, #16]
   258b0:	str	lr, [sp, #28]
   258b4:	ldr	r9, [sp, #36]	; 0x24
   258b8:	ldr	r7, [sp, #40]	; 0x28
   258bc:	beq	25b0c <__assert_fail@plt+0x13518>
   258c0:	movw	r6, #18332	; 0x479c
   258c4:	movt	r6, #5
   258c8:	cmp	sl, r6
   258cc:	mov	r5, r0
   258d0:	mov	r4, r1
   258d4:	mov	r8, r3
   258d8:	beq	25980 <__assert_fail@plt+0x1338c>
   258dc:	ldr	ip, [r1, #16]
   258e0:	add	r3, r3, r9
   258e4:	ldr	r2, [r0, #12]
   258e8:	add	r3, r3, ip
   258ec:	cmp	r3, r2
   258f0:	bls	25a98 <__assert_fail@plt+0x134a4>
   258f4:	cmp	r7, #0
   258f8:	bne	25b2c <__assert_fail@plt+0x13538>
   258fc:	ldr	r2, [r1]
   25900:	ldr	r3, [r0, #28]
   25904:	cmp	r2, r3
   25908:	beq	25b2c <__assert_fail@plt+0x13538>
   2590c:	ldr	r3, [r0, #24]
   25910:	cmp	r3, #0
   25914:	bne	25b50 <__assert_fail@plt+0x1355c>
   25918:	ldr	r3, [r0]
   2591c:	cmp	r3, #0
   25920:	beq	2593c <__assert_fail@plt+0x13348>
   25924:	ldr	r3, [r0, #36]	; 0x24
   25928:	cmp	r3, #0
   2592c:	bne	25b50 <__assert_fail@plt+0x1355c>
   25930:	ldr	r3, [r0, #40]	; 0x28
   25934:	cmp	r3, #0
   25938:	bne	25b50 <__assert_fail@plt+0x1355c>
   2593c:	mov	r1, r4
   25940:	mov	r0, r5
   25944:	bl	25de8 <__assert_fail@plt+0x137f4>
   25948:	ldr	r3, [r4]
   2594c:	ldr	r2, [r5, #40]	; 0x28
   25950:	cmp	r2, #0
   25954:	beq	25968 <__assert_fail@plt+0x13374>
   25958:	ldr	r1, [r5, #28]
   2595c:	sub	r1, r3, r1
   25960:	cmp	r2, r1
   25964:	beq	25974 <__assert_fail@plt+0x13380>
   25968:	ldr	r2, [r5, #16]
   2596c:	cmp	r2, r3
   25970:	bne	2598c <__assert_fail@plt+0x13398>
   25974:	mov	r1, r4
   25978:	mov	r0, r5
   2597c:	bl	25de8 <__assert_fail@plt+0x137f4>
   25980:	cmp	r7, #0
   25984:	ldr	r3, [r4]
   25988:	bne	25994 <__assert_fail@plt+0x133a0>
   2598c:	mov	r2, #1
   25990:	str	r2, [r4, #28]
   25994:	ldrd	r0, [r4, #4]
   25998:	cmp	r1, r3
   2599c:	bls	25a74 <__assert_fail@plt+0x13480>
   259a0:	cmp	sl, r6
   259a4:	add	r1, r0, r3, lsl #2
   259a8:	add	r2, r3, #1
   259ac:	moveq	r1, #0
   259b0:	streq	r2, [r4]
   259b4:	streq	r1, [r0, r3, lsl #2]
   259b8:	beq	25a54 <__assert_fail@plt+0x13460>
   259bc:	ldr	ip, [r4, #16]
   259c0:	str	r2, [r4]
   259c4:	ldr	r3, [sp, #32]
   259c8:	cmp	r3, #0
   259cc:	ldr	r3, [r4, #12]
   259d0:	add	r3, r3, ip
   259d4:	str	r3, [r1]
   259d8:	beq	259f8 <__assert_fail@plt+0x13404>
   259dc:	ldr	r0, [r4, #12]
   259e0:	ldr	r1, [sp, #32]
   259e4:	add	r0, r0, ip
   259e8:	bl	121b0 <strcpy@plt>
   259ec:	ldr	ip, [r4, #16]
   259f0:	add	ip, r9, ip
   259f4:	str	ip, [r4, #16]
   259f8:	ldr	r0, [r4, #12]
   259fc:	mov	r1, sl
   25a00:	add	r0, r0, ip
   25a04:	bl	121b0 <strcpy@plt>
   25a08:	cmp	r7, #0
   25a0c:	ldr	r2, [r4]
   25a10:	ldr	r3, [r4, #16]
   25a14:	add	r8, r8, r3
   25a18:	str	r8, [r4, #16]
   25a1c:	bne	25ac8 <__assert_fail@plt+0x134d4>
   25a20:	ldr	r3, [r5, #40]	; 0x28
   25a24:	cmp	r3, #0
   25a28:	beq	25a3c <__assert_fail@plt+0x13448>
   25a2c:	ldr	r1, [r5, #28]
   25a30:	sub	r1, r2, r1
   25a34:	cmp	r3, r1
   25a38:	beq	25a48 <__assert_fail@plt+0x13454>
   25a3c:	ldr	r3, [r5, #16]
   25a40:	cmp	r2, r3
   25a44:	bne	25a5c <__assert_fail@plt+0x13468>
   25a48:	mov	r0, r5
   25a4c:	mov	r1, r4
   25a50:	bl	25de8 <__assert_fail@plt+0x137f4>
   25a54:	cmp	r7, #0
   25a58:	bne	25ae4 <__assert_fail@plt+0x134f0>
   25a5c:	ldrd	r4, [sp]
   25a60:	ldrd	r6, [sp, #8]
   25a64:	ldrd	r8, [sp, #16]
   25a68:	ldr	sl, [sp, #24]
   25a6c:	add	sp, sp, #28
   25a70:	pop	{pc}		; (ldr pc, [sp], #4)
   25a74:	cmp	r0, #0
   25a78:	beq	25af0 <__assert_fail@plt+0x134fc>
   25a7c:	lsl	r3, r1, #1
   25a80:	lsl	r1, r1, #3
   25a84:	str	r3, [r4, #8]
   25a88:	bl	368d0 <__assert_fail@plt+0x242dc>
   25a8c:	str	r0, [r4, #4]
   25a90:	ldr	r3, [r4]
   25a94:	b	259a0 <__assert_fail@plt+0x133ac>
   25a98:	cmp	r7, #0
   25a9c:	ldr	r3, [r1]
   25aa0:	beq	2594c <__assert_fail@plt+0x13358>
   25aa4:	ldr	r2, [r0, #16]
   25aa8:	cmp	r3, r2
   25aac:	beq	25974 <__assert_fail@plt+0x13380>
   25ab0:	ldrd	r0, [r1, #4]
   25ab4:	cmp	r3, r1
   25ab8:	bcs	25a74 <__assert_fail@plt+0x13480>
   25abc:	add	r1, r0, r3, lsl #2
   25ac0:	add	r2, r3, #1
   25ac4:	b	259c0 <__assert_fail@plt+0x133cc>
   25ac8:	ldr	r3, [r5, #16]
   25acc:	cmp	r2, r3
   25ad0:	bne	25ae8 <__assert_fail@plt+0x134f4>
   25ad4:	mov	r0, r5
   25ad8:	mov	r1, r4
   25adc:	bl	25de8 <__assert_fail@plt+0x137f4>
   25ae0:	b	25a54 <__assert_fail@plt+0x13460>
   25ae4:	ldr	r8, [r4, #16]
   25ae8:	str	r8, [r4, #20]
   25aec:	b	25a5c <__assert_fail@plt+0x13468>
   25af0:	mov	r3, #64	; 0x40
   25af4:	mov	r0, #256	; 0x100
   25af8:	str	r3, [r4, #8]
   25afc:	bl	36864 <__assert_fail@plt+0x24270>
   25b00:	str	r0, [r4, #4]
   25b04:	ldr	r3, [r4]
   25b08:	b	259a0 <__assert_fail@plt+0x133ac>
   25b0c:	movw	r3, #18172	; 0x46fc
   25b10:	movt	r3, #5
   25b14:	movw	r1, #18308	; 0x4784
   25b18:	movt	r1, #5
   25b1c:	movw	r0, #18320	; 0x4790
   25b20:	movt	r0, #5
   25b24:	movw	r2, #341	; 0x155
   25b28:	bl	125f4 <__assert_fail@plt>
   25b2c:	movw	r1, #18344	; 0x47a8
   25b30:	movt	r1, #5
   25b34:	mov	r2, #5
   25b38:	mov	r0, #0
   25b3c:	bl	120b4 <dcgettext@plt>
   25b40:	mov	r2, r0
   25b44:	mov	r1, #0
   25b48:	mov	r0, #1
   25b4c:	bl	121ec <error@plt>
   25b50:	movw	r1, #18404	; 0x47e4
   25b54:	movt	r1, #5
   25b58:	b	25b34 <__assert_fail@plt+0x13540>
   25b5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25b60:	movw	r5, #31964	; 0x7cdc
   25b64:	movt	r5, #6
   25b68:	strd	r6, [sp, #8]
   25b6c:	mov	r7, r3
   25b70:	mov	r4, r2
   25b74:	strd	r8, [sp, #16]
   25b78:	mov	r9, r0
   25b7c:	strd	sl, [sp, #24]
   25b80:	str	lr, [sp, #32]
   25b84:	sub	sp, sp, #36	; 0x24
   25b88:	ldr	r0, [r0, #12]
   25b8c:	str	r1, [sp, #24]
   25b90:	ldr	r3, [sp, #76]	; 0x4c
   25b94:	ldr	r1, [r5]
   25b98:	sub	r6, r0, #1
   25b9c:	ldr	ip, [sp, #72]	; 0x48
   25ba0:	ldr	sl, [sp, #84]	; 0x54
   25ba4:	cmp	r1, #0
   25ba8:	str	r3, [sp, #12]
   25bac:	ldr	r3, [sp, #80]	; 0x50
   25bb0:	str	r3, [sp, #4]
   25bb4:	ldr	r3, [sp, #88]	; 0x58
   25bb8:	str	ip, [sp, #8]
   25bbc:	str	r1, [sp, #20]
   25bc0:	str	r3, [sp, #28]
   25bc4:	beq	25dd4 <__assert_fail@plt+0x137e0>
   25bc8:	ldr	r3, [sp, #8]
   25bcc:	cmp	r3, #0
   25bd0:	beq	25d20 <__assert_fail@plt+0x1372c>
   25bd4:	ldr	r3, [sp, #12]
   25bd8:	str	sl, [sp, #16]
   25bdc:	ldr	r5, [sp, #20]
   25be0:	add	fp, sl, r3
   25be4:	b	25c5c <__assert_fail@plt+0x13668>
   25be8:	sub	sl, r8, r4
   25bec:	cmp	r6, sl
   25bf0:	bls	25cf0 <__assert_fail@plt+0x136fc>
   25bf4:	mov	r0, r5
   25bf8:	mov	r1, r4
   25bfc:	sub	r6, r6, sl
   25c00:	mov	r2, sl
   25c04:	bl	12390 <strncpy@plt>
   25c08:	cmp	fp, r6
   25c0c:	add	r5, r5, sl
   25c10:	bcs	25cec <__assert_fail@plt+0x136f8>
   25c14:	mov	r0, r5
   25c18:	ldr	r1, [sp, #8]
   25c1c:	sub	r6, r6, fp
   25c20:	ldr	r3, [sp, #12]
   25c24:	add	r5, r5, r3
   25c28:	bl	121b0 <strcpy@plt>
   25c2c:	mov	r0, r5
   25c30:	ldr	r1, [sp, #4]
   25c34:	bl	121b0 <strcpy@plt>
   25c38:	ldr	r4, [r9, #20]
   25c3c:	ldr	r3, [sp, #16]
   25c40:	sub	r7, r7, r4
   25c44:	add	r4, r8, r4
   25c48:	sub	r7, r7, sl
   25c4c:	add	r5, r5, r3
   25c50:	ldrb	r3, [r4]
   25c54:	cmp	r3, #0
   25c58:	beq	25ca4 <__assert_fail@plt+0x136b0>
   25c5c:	mov	r0, r4
   25c60:	ldr	r1, [r9, #24]
   25c64:	bl	2c4d4 <__assert_fail@plt+0x19ee0>
   25c68:	subs	r8, r0, #0
   25c6c:	bne	25be8 <__assert_fail@plt+0x135f4>
   25c70:	cmp	r7, r6
   25c74:	bcs	25cf0 <__assert_fail@plt+0x136fc>
   25c78:	mov	r1, r4
   25c7c:	mov	r0, r5
   25c80:	mov	r2, r7
   25c84:	add	r4, r4, r7
   25c88:	bl	12390 <strncpy@plt>
   25c8c:	ldrb	r3, [r4]
   25c90:	sub	r6, r6, r7
   25c94:	add	r5, r5, r7
   25c98:	mov	r7, r8
   25c9c:	cmp	r3, #0
   25ca0:	bne	25c5c <__assert_fail@plt+0x13668>
   25ca4:	mov	ip, #0
   25ca8:	ldr	r2, [sp, #20]
   25cac:	mov	r0, r9
   25cb0:	strb	ip, [r5], #1
   25cb4:	str	ip, [sp, #72]	; 0x48
   25cb8:	str	ip, [sp, #76]	; 0x4c
   25cbc:	ldr	r1, [sp, #24]
   25cc0:	sub	r3, r5, r2
   25cc4:	ldr	ip, [sp, #28]
   25cc8:	str	ip, [sp, #80]	; 0x50
   25ccc:	add	sp, sp, #36	; 0x24
   25cd0:	ldrd	r4, [sp]
   25cd4:	ldrd	r6, [sp, #8]
   25cd8:	ldrd	r8, [sp, #16]
   25cdc:	ldrd	sl, [sp, #24]
   25ce0:	ldr	lr, [sp, #32]
   25ce4:	add	sp, sp, #36	; 0x24
   25ce8:	b	2589c <__assert_fail@plt+0x132a8>
   25cec:	mov	r4, r8
   25cf0:	ldrb	r3, [r4]
   25cf4:	cmp	r3, #0
   25cf8:	beq	25ca4 <__assert_fail@plt+0x136b0>
   25cfc:	mov	r2, #5
   25d00:	movw	r1, #18428	; 0x47fc
   25d04:	movt	r1, #5
   25d08:	mov	r0, #0
   25d0c:	bl	120b4 <dcgettext@plt>
   25d10:	mov	r2, r0
   25d14:	mov	r1, #0
   25d18:	mov	r0, #1
   25d1c:	bl	121ec <error@plt>
   25d20:	ldr	r3, [sp, #12]
   25d24:	str	sl, [sp, #8]
   25d28:	ldr	r5, [sp, #20]
   25d2c:	add	fp, sl, r3
   25d30:	b	25d94 <__assert_fail@plt+0x137a0>
   25d34:	sub	sl, r8, r4
   25d38:	cmp	sl, r6
   25d3c:	bcs	25cf0 <__assert_fail@plt+0x136fc>
   25d40:	mov	r0, r5
   25d44:	mov	r1, r4
   25d48:	sub	r6, r6, sl
   25d4c:	mov	r2, sl
   25d50:	bl	12390 <strncpy@plt>
   25d54:	cmp	fp, r6
   25d58:	add	r5, r5, sl
   25d5c:	bcs	25cec <__assert_fail@plt+0x136f8>
   25d60:	mov	r0, r5
   25d64:	ldr	r1, [sp, #4]
   25d68:	sub	r6, r6, fp
   25d6c:	bl	121b0 <strcpy@plt>
   25d70:	ldr	r4, [r9, #20]
   25d74:	ldr	r3, [sp, #8]
   25d78:	sub	r7, r7, r4
   25d7c:	add	r4, r8, r4
   25d80:	sub	r7, r7, sl
   25d84:	add	r5, r5, r3
   25d88:	ldrb	r3, [r4]
   25d8c:	cmp	r3, #0
   25d90:	beq	25ca4 <__assert_fail@plt+0x136b0>
   25d94:	mov	r0, r4
   25d98:	ldr	r1, [r9, #24]
   25d9c:	bl	2c4d4 <__assert_fail@plt+0x19ee0>
   25da0:	subs	r8, r0, #0
   25da4:	bne	25d34 <__assert_fail@plt+0x13740>
   25da8:	cmp	r6, r7
   25dac:	bls	25cf0 <__assert_fail@plt+0x136fc>
   25db0:	mov	r1, r4
   25db4:	mov	r0, r5
   25db8:	mov	r2, r7
   25dbc:	sub	r6, r6, r7
   25dc0:	add	r4, r4, r7
   25dc4:	add	r5, r5, r7
   25dc8:	bl	12390 <strncpy@plt>
   25dcc:	mov	r7, r8
   25dd0:	b	25d88 <__assert_fail@plt+0x13794>
   25dd4:	add	r0, r0, #1
   25dd8:	bl	36864 <__assert_fail@plt+0x24270>
   25ddc:	str	r0, [r5]
   25de0:	str	r0, [sp, #20]
   25de4:	b	25bc8 <__assert_fail@plt+0x135d4>
   25de8:	mov	ip, #0
   25dec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25df0:	movw	r2, #18332	; 0x479c
   25df4:	movt	r2, #5
   25df8:	strd	r6, [sp, #8]
   25dfc:	mov	r3, ip
   25e00:	strd	r8, [sp, #16]
   25e04:	mov	r8, r1
   25e08:	mov	r9, r0
   25e0c:	strd	sl, [sp, #24]
   25e10:	str	lr, [sp, #32]
   25e14:	sub	sp, sp, #28
   25e18:	str	ip, [sp]
   25e1c:	str	ip, [sp, #4]
   25e20:	str	ip, [sp, #8]
   25e24:	bl	2589c <__assert_fail@plt+0x132a8>
   25e28:	ldr	r3, [r8]
   25e2c:	cmp	r3, #0
   25e30:	beq	26138 <__assert_fail@plt+0x13b44>
   25e34:	ldr	r2, [r8, #4]
   25e38:	sub	r3, r3, #-1073741823	; 0xc0000001
   25e3c:	lsl	r0, r3, #2
   25e40:	ldr	r6, [r2, r3, lsl #2]
   25e44:	cmp	r6, #0
   25e48:	bne	2611c <__assert_fail@plt+0x13b28>
   25e4c:	add	r0, r0, #8
   25e50:	mov	sl, r6
   25e54:	bl	36864 <__assert_fail@plt+0x24270>
   25e58:	add	r3, r0, #8
   25e5c:	ldr	ip, [r8]
   25e60:	mov	r7, r0
   25e64:	str	r3, [sp, #20]
   25e68:	ldr	r3, [r9, #28]
   25e6c:	mov	r4, ip
   25e70:	cmp	r3, #0
   25e74:	beq	260d8 <__assert_fail@plt+0x13ae4>
   25e78:	ldr	r2, [r8, #4]
   25e7c:	sub	r1, r3, #1
   25e80:	ldr	r5, [sp, #20]
   25e84:	add	r0, r2, #8
   25e88:	orr	lr, r7, r2
   25e8c:	cmp	r2, r5
   25e90:	cmpcc	r7, r0
   25e94:	movcs	r0, #1
   25e98:	movcc	r0, #0
   25e9c:	tst	lr, #7
   25ea0:	movne	r0, #0
   25ea4:	cmp	r1, #5
   25ea8:	movls	r1, #0
   25eac:	andhi	r1, r0, #1
   25eb0:	cmp	r1, #0
   25eb4:	beq	260bc <__assert_fail@plt+0x13ac8>
   25eb8:	lsr	lr, r3, #1
   25ebc:	sub	fp, r2, #8
   25ec0:	mov	r5, r7
   25ec4:	add	lr, r7, lr, lsl #3
   25ec8:	ldrd	r0, [fp, #8]!
   25ecc:	strd	r0, [r5], #8
   25ed0:	cmp	r5, lr
   25ed4:	bne	25ec8 <__assert_fail@plt+0x138d4>
   25ed8:	bic	r1, r3, #1
   25edc:	cmp	r1, r3
   25ee0:	beq	25eec <__assert_fail@plt+0x138f8>
   25ee4:	ldr	r2, [r2, r1, lsl #2]
   25ee8:	str	r2, [r7, r1, lsl #2]
   25eec:	add	r0, r6, r3
   25ef0:	cmp	ip, r0
   25ef4:	cmphi	r4, r3
   25ef8:	movls	r5, r3
   25efc:	bls	25f48 <__assert_fail@plt+0x13954>
   25f00:	ldr	r1, [r8, #4]
   25f04:	add	lr, r7, r3, lsl #2
   25f08:	mov	r5, r3
   25f0c:	add	r1, r1, r0, lsl #2
   25f10:	add	r5, r5, #1
   25f14:	ldr	fp, [r1], #4
   25f18:	add	r2, r5, r0
   25f1c:	sub	r2, r2, r3
   25f20:	cmp	r2, ip
   25f24:	movcs	r2, #0
   25f28:	movcc	r2, #1
   25f2c:	cmp	r4, r5
   25f30:	str	fp, [lr], #4
   25f34:	movls	r2, #0
   25f38:	cmp	r2, #0
   25f3c:	bne	25f10 <__assert_fail@plt+0x1391c>
   25f40:	cmp	r5, r3
   25f44:	bcc	260e0 <__assert_fail@plt+0x13aec>
   25f48:	mov	r3, r7
   25f4c:	mov	r2, r5
   25f50:	str	sl, [r7, r5, lsl #2]
   25f54:	mov	r0, r9
   25f58:	ldr	r1, [r8, #24]
   25f5c:	ldr	fp, [r9, #32]
   25f60:	blx	fp
   25f64:	subs	fp, r0, #0
   25f68:	bne	26040 <__assert_fail@plt+0x13a4c>
   25f6c:	ldr	r1, [r9, #28]
   25f70:	add	ip, r1, #1
   25f74:	cmp	ip, r4
   25f78:	bcs	260fc <__assert_fail@plt+0x13b08>
   25f7c:	ldr	r0, [r8, #36]	; 0x24
   25f80:	ldr	r2, [r8, #40]	; 0x28
   25f84:	clz	r3, r2
   25f88:	lsr	r3, r3, #5
   25f8c:	cmp	r4, r2
   25f90:	orrcc	r3, r3, #1
   25f94:	cmp	r3, #0
   25f98:	movne	r2, r4
   25f9c:	moveq	r3, r1
   25fa0:	strne	r4, [r8, #40]	; 0x28
   25fa4:	ldrne	r3, [r9, #28]
   25fa8:	cmp	r0, #0
   25fac:	beq	26038 <__assert_fail@plt+0x13a44>
   25fb0:	cmp	r0, r2
   25fb4:	bcs	26038 <__assert_fail@plt+0x13a44>
   25fb8:	sub	r2, r2, r0
   25fbc:	cmp	r2, #1
   25fc0:	subne	r4, r4, r2, lsr #1
   25fc4:	subeq	r4, r4, #1
   25fc8:	cmp	r1, #0
   25fcc:	beq	25fdc <__assert_fail@plt+0x139e8>
   25fd0:	cmp	ip, r4
   25fd4:	bcc	25fe4 <__assert_fail@plt+0x139f0>
   25fd8:	mov	r4, ip
   25fdc:	cmp	r4, #0
   25fe0:	moveq	r4, #1
   25fe4:	ldr	ip, [r8]
   25fe8:	add	r2, r6, #1
   25fec:	sub	r1, ip, r3
   25ff0:	cmp	r2, r1
   25ff4:	bcc	25e70 <__assert_fail@plt+0x1387c>
   25ff8:	mov	r0, r7
   25ffc:	bl	38b10 <__assert_fail@plt+0x2651c>
   26000:	ldr	r2, [r8, #20]
   26004:	mov	r0, #0
   26008:	mvn	r1, #0
   2600c:	ldr	r3, [r9, #28]
   26010:	strd	r0, [r8, #28]
   26014:	str	r3, [r8]
   26018:	str	r2, [r8, #16]
   2601c:	add	sp, sp, #28
   26020:	ldrd	r4, [sp]
   26024:	ldrd	r6, [sp, #8]
   26028:	ldrd	r8, [sp, #16]
   2602c:	ldrd	sl, [sp, #24]
   26030:	add	sp, sp, #32
   26034:	pop	{pc}		; (ldr pc, [sp], #4)
   26038:	lsr	r4, r4, #1
   2603c:	b	25fc8 <__assert_fail@plt+0x139d4>
   26040:	ldr	r1, [r8, #36]	; 0x24
   26044:	ldr	r2, [r9, #28]
   26048:	cmp	r4, r1
   2604c:	movhi	r1, r4
   26050:	strhi	r4, [r8, #36]	; 0x24
   26054:	movls	r3, r2
   26058:	ldrhi	r3, [r9, #28]
   2605c:	cmp	r1, #0
   26060:	beq	260a8 <__assert_fail@plt+0x13ab4>
   26064:	ldr	r0, [r8, #40]	; 0x28
   26068:	cmp	r0, r1
   2606c:	bls	260a8 <__assert_fail@plt+0x13ab4>
   26070:	sub	r1, r0, r1
   26074:	cmp	r1, #1
   26078:	addne	r4, r4, r1, lsr #1
   2607c:	addeq	r4, r4, #1
   26080:	cmp	r2, #0
   26084:	beq	26094 <__assert_fail@plt+0x13aa0>
   26088:	add	r2, r2, #1
   2608c:	cmp	r4, r2
   26090:	movcc	r4, r2
   26094:	cmp	r4, #0
   26098:	moveq	r4, #1
   2609c:	add	r6, r6, r5
   260a0:	sub	r6, r6, r3
   260a4:	b	25fe4 <__assert_fail@plt+0x139f0>
   260a8:	cmn	r4, #1
   260ac:	addne	r4, r4, #1
   260b0:	cmp	r2, #0
   260b4:	bne	26088 <__assert_fail@plt+0x13a94>
   260b8:	b	2609c <__assert_fail@plt+0x13aa8>
   260bc:	add	lr, r2, r3, lsl #2
   260c0:	sub	r1, r7, #4
   260c4:	ldr	r0, [r2], #4
   260c8:	cmp	lr, r2
   260cc:	str	r0, [r1, #4]!
   260d0:	bne	260c4 <__assert_fail@plt+0x13ad0>
   260d4:	b	25eec <__assert_fail@plt+0x138f8>
   260d8:	mov	r0, r6
   260dc:	b	25ef0 <__assert_fail@plt+0x138fc>
   260e0:	movw	r1, #18308	; 0x4784
   260e4:	movt	r1, #5
   260e8:	ldr	r3, [pc, #100]	; 26154 <__assert_fail@plt+0x13b60>
   260ec:	movw	r0, #18512	; 0x4850
   260f0:	movt	r0, #5
   260f4:	mov	r2, #242	; 0xf2
   260f8:	bl	125f4 <__assert_fail@plt>
   260fc:	mov	r2, #5
   26100:	movw	r1, #18544	; 0x4870
   26104:	movt	r1, #5
   26108:	bl	120b4 <dcgettext@plt>
   2610c:	mov	r2, r0
   26110:	mov	r1, fp
   26114:	mov	r0, #1
   26118:	bl	121ec <error@plt>
   2611c:	movw	r1, #18308	; 0x4784
   26120:	movt	r1, #5
   26124:	ldr	r3, [pc, #44]	; 26158 <__assert_fail@plt+0x13b64>
   26128:	movw	r0, #18468	; 0x4824
   2612c:	movt	r0, #5
   26130:	movw	r2, #262	; 0x106
   26134:	bl	125f4 <__assert_fail@plt>
   26138:	movw	r1, #18308	; 0x4784
   2613c:	movt	r1, #5
   26140:	ldr	r3, [pc, #16]	; 26158 <__assert_fail@plt+0x13b64>
   26144:	movw	r0, #18448	; 0x4810
   26148:	movt	r0, #5
   2614c:	movw	r2, #261	; 0x105
   26150:	bl	125f4 <__assert_fail@plt>
   26154:	andeq	r4, r5, r4, lsl r7
   26158:	andeq	r4, r5, r8, lsl #14
   2615c:	mov	r0, #0
   26160:	str	r4, [sp, #-8]!
   26164:	str	lr, [sp, #4]
   26168:	bl	120cc <sysconf@plt>
   2616c:	cmp	r0, #0
   26170:	ldr	r4, [sp]
   26174:	add	sp, sp, #4
   26178:	mvnle	r0, #-2147483648	; 0x80000000
   2617c:	pop	{pc}		; (ldr pc, [sp], #4)
   26180:	movw	r3, #30012	; 0x753c
   26184:	movt	r3, #6
   26188:	strd	r4, [sp, #-16]!
   2618c:	ldr	r4, [r3]
   26190:	ldr	r3, [r4]
   26194:	str	r6, [sp, #8]
   26198:	str	lr, [sp, #12]
   2619c:	cmp	r3, #0
   261a0:	beq	261d8 <__assert_fail@plt+0x13be4>
   261a4:	mov	r5, #0
   261a8:	mov	r0, r3
   261ac:	bl	12300 <strlen@plt>
   261b0:	ldr	r3, [r4, #4]!
   261b4:	add	r0, r0, #1
   261b8:	add	r5, r5, r0
   261bc:	cmp	r3, #0
   261c0:	bne	261a8 <__assert_fail@plt+0x13bb4>
   261c4:	mov	r0, r5
   261c8:	ldrd	r4, [sp]
   261cc:	ldr	r6, [sp, #8]
   261d0:	add	sp, sp, #12
   261d4:	pop	{pc}		; (ldr pc, [sp], #4)
   261d8:	mov	r5, r3
   261dc:	b	261c4 <__assert_fail@plt+0x13bd0>
   261e0:	movw	r3, #30012	; 0x753c
   261e4:	movt	r3, #6
   261e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   261ec:	strd	r6, [sp, #8]
   261f0:	mov	r4, r0
   261f4:	ldr	r7, [r3]
   261f8:	str	r8, [sp, #16]
   261fc:	mov	r8, r1
   26200:	str	lr, [sp, #20]
   26204:	ldr	r5, [r7]
   26208:	cmp	r5, #0
   2620c:	beq	262d8 <__assert_fail@plt+0x13ce4>
   26210:	mov	r6, #0
   26214:	mov	r0, r5
   26218:	bl	12300 <strlen@plt>
   2621c:	ldr	r5, [r7, #4]!
   26220:	add	r0, r0, #1
   26224:	add	r6, r6, r0
   26228:	cmp	r5, #0
   2622c:	bne	26214 <__assert_fail@plt+0x13c20>
   26230:	mov	r3, #4096	; 0x1000
   26234:	mov	r0, r5
   26238:	str	r3, [r4, #8]
   2623c:	bl	120cc <sysconf@plt>
   26240:	cmp	r0, #0
   26244:	str	r5, [r4]
   26248:	mvnle	r0, #-2147483648	; 0x80000000
   2624c:	cmp	r6, r0
   26250:	mov	r3, r0
   26254:	str	r0, [r4, #4]
   26258:	bhi	262c8 <__assert_fail@plt+0x13cd4>
   2625c:	add	r2, r8, r6
   26260:	cmp	r3, r2
   26264:	bls	262d0 <__assert_fail@plt+0x13cdc>
   26268:	sub	r3, r3, r8
   2626c:	sub	r3, r3, r6
   26270:	lsr	r2, r3, #2
   26274:	str	r3, [r4, #4]
   26278:	sub	r2, r2, #2
   2627c:	cmp	r2, #0
   26280:	str	r2, [r4, #16]
   26284:	beq	2631c <__assert_fail@plt+0x13d28>
   26288:	str	r3, [r4, #12]
   2628c:	mov	r3, #0
   26290:	movw	r2, #22616	; 0x5858
   26294:	movt	r2, #2
   26298:	mov	r0, r3
   2629c:	str	r3, [r4, #20]
   262a0:	str	r3, [r4, #24]
   262a4:	str	r3, [r4, #28]
   262a8:	str	r2, [r4, #32]
   262ac:	str	r3, [r4, #36]	; 0x24
   262b0:	str	r3, [r4, #40]	; 0x28
   262b4:	ldrd	r4, [sp]
   262b8:	ldrd	r6, [sp, #8]
   262bc:	ldr	r8, [sp, #16]
   262c0:	add	sp, sp, #20
   262c4:	pop	{pc}		; (ldr pc, [sp], #4)
   262c8:	mov	r0, #1
   262cc:	b	262b4 <__assert_fail@plt+0x13cc0>
   262d0:	mov	r0, #2
   262d4:	b	262b4 <__assert_fail@plt+0x13cc0>
   262d8:	mov	r3, #4096	; 0x1000
   262dc:	mov	r0, r5
   262e0:	str	r3, [r4, #8]
   262e4:	bl	120cc <sysconf@plt>
   262e8:	subs	r3, r0, #0
   262ec:	ble	26304 <__assert_fail@plt+0x13d10>
   262f0:	mov	r6, r5
   262f4:	mov	r2, r8
   262f8:	str	r5, [r4]
   262fc:	str	r3, [r4, #4]
   26300:	b	26260 <__assert_fail@plt+0x13c6c>
   26304:	mvn	r2, #-2147483648	; 0x80000000
   26308:	mov	r6, r5
   2630c:	str	r5, [r4]
   26310:	mov	r3, r2
   26314:	str	r2, [r4, #4]
   26318:	b	2625c <__assert_fail@plt+0x13c68>
   2631c:	movw	r1, #18308	; 0x4784
   26320:	movt	r1, #5
   26324:	ldr	r3, [pc, #12]	; 26338 <__assert_fail@plt+0x13d44>
   26328:	movw	r0, #18596	; 0x48a4
   2632c:	movt	r0, #5
   26330:	movw	r2, #518	; 0x206
   26334:	bl	125f4 <__assert_fail@plt>
   26338:	andeq	r4, r5, r0, lsr #14
   2633c:	ldr	r3, [r0, #4]
   26340:	cmp	r3, #131072	; 0x20000
   26344:	bcc	26354 <__assert_fail@plt+0x13d60>
   26348:	ldr	r3, [r0, #8]
   2634c:	cmp	r3, #131072	; 0x20000
   26350:	movls	r3, #131072	; 0x20000
   26354:	str	r3, [r0, #12]
   26358:	bx	lr
   2635c:	ldr	r0, [r0, #12]
   26360:	movw	r3, #63487	; 0xf7ff
   26364:	movt	r3, #32767	; 0x7fff
   26368:	strd	r4, [sp, #-16]!
   2636c:	mov	r5, #0
   26370:	str	r6, [sp, #8]
   26374:	str	lr, [sp, #12]
   26378:	str	r5, [r1]
   2637c:	cmp	r0, r3
   26380:	str	r5, [r1, #4]
   26384:	str	r5, [r1, #8]
   26388:	str	r5, [r1, #16]
   2638c:	str	r5, [r1, #36]	; 0x24
   26390:	str	r5, [r1, #40]	; 0x28
   26394:	bhi	263d4 <__assert_fail@plt+0x13de0>
   26398:	add	r0, r0, #1
   2639c:	mov	r4, r1
   263a0:	mov	r6, r2
   263a4:	bl	36864 <__assert_fail@plt+0x24270>
   263a8:	mvn	r3, #0
   263ac:	str	r0, [r4, #12]
   263b0:	str	r5, [r4, #16]
   263b4:	str	r5, [r4, #20]
   263b8:	str	r6, [r4, #24]
   263bc:	str	r5, [r4, #28]
   263c0:	str	r3, [r4, #32]
   263c4:	ldrd	r4, [sp]
   263c8:	ldr	r6, [sp, #8]
   263cc:	add	sp, sp, #12
   263d0:	pop	{pc}		; (ldr pc, [sp], #4)
   263d4:	movw	r1, #18308	; 0x4784
   263d8:	movt	r1, #5
   263dc:	ldr	r3, [pc, #12]	; 263f0 <__assert_fail@plt+0x13dfc>
   263e0:	movw	r0, #18620	; 0x48bc
   263e4:	movt	r0, #5
   263e8:	mov	r2, #572	; 0x23c
   263ec:	bl	125f4 <__assert_fail@plt>
   263f0:	andeq	r4, r5, r4, lsr r7
   263f4:	ldr	r3, [r1, #20]
   263f8:	mov	ip, #0
   263fc:	ldr	r2, [r0, #28]
   26400:	mvn	r0, #0
   26404:	str	ip, [r1, #28]
   26408:	str	r0, [r1, #32]
   2640c:	str	r2, [r1]
   26410:	str	r3, [r1, #16]
   26414:	bx	lr
   26418:	ldr	r3, [r0]
   2641c:	strd	r4, [sp, #-16]!
   26420:	str	r6, [sp, #8]
   26424:	str	lr, [sp, #12]
   26428:	sub	sp, sp, #16
   2642c:	cmp	r3, #0
   26430:	beq	26500 <__assert_fail@plt+0x13f0c>
   26434:	mov	r4, #0
   26438:	mov	r5, r0
   2643c:	mov	r6, r4
   26440:	mov	r0, r3
   26444:	add	r4, r4, #1
   26448:	bl	12300 <strlen@plt>
   2644c:	ldr	r3, [r5, #4]!
   26450:	add	r6, r6, r0
   26454:	cmp	r3, #0
   26458:	bne	26440 <__assert_fail@plt+0x13e4c>
   2645c:	movw	r0, #18656	; 0x48e0
   26460:	movt	r0, #5
   26464:	bl	12228 <getenv@plt>
   26468:	cmp	r0, #0
   2646c:	beq	264a0 <__assert_fail@plt+0x13eac>
   26470:	mov	ip, #0
   26474:	add	r3, sp, #12
   26478:	mov	r2, #10
   2647c:	add	r1, sp, #8
   26480:	str	ip, [sp]
   26484:	bl	36f24 <__assert_fail@plt+0x24930>
   26488:	cmp	r0, #0
   2648c:	bne	26518 <__assert_fail@plt+0x13f24>
   26490:	ldr	r3, [sp, #12]
   26494:	cmp	r4, r3
   26498:	movhi	r0, #1
   2649c:	bhi	264e4 <__assert_fail@plt+0x13ef0>
   264a0:	movw	r0, #18696	; 0x4908
   264a4:	movt	r0, #5
   264a8:	bl	12228 <getenv@plt>
   264ac:	subs	r3, r0, #0
   264b0:	beq	264f8 <__assert_fail@plt+0x13f04>
   264b4:	mov	ip, #0
   264b8:	add	r3, sp, #12
   264bc:	mov	r2, #10
   264c0:	add	r1, sp, #8
   264c4:	str	ip, [sp]
   264c8:	bl	36f24 <__assert_fail@plt+0x24930>
   264cc:	cmp	r0, #0
   264d0:	bne	2650c <__assert_fail@plt+0x13f18>
   264d4:	ldr	r0, [sp, #12]
   264d8:	cmp	r6, r0
   264dc:	movls	r0, #0
   264e0:	movhi	r0, #1
   264e4:	add	sp, sp, #16
   264e8:	ldrd	r4, [sp]
   264ec:	ldr	r6, [sp, #8]
   264f0:	add	sp, sp, #12
   264f4:	pop	{pc}		; (ldr pc, [sp], #4)
   264f8:	mov	r0, r3
   264fc:	b	264e4 <__assert_fail@plt+0x13ef0>
   26500:	mov	r4, r3
   26504:	mov	r6, r3
   26508:	b	2645c <__assert_fail@plt+0x13e68>
   2650c:	movw	r0, #18696	; 0x4908
   26510:	movt	r0, #5
   26514:	bl	25860 <__assert_fail@plt+0x1326c>
   26518:	movw	r0, #18656	; 0x48e0
   2651c:	movt	r0, #5
   26520:	bl	25860 <__assert_fail@plt+0x1326c>
   26524:	strd	r4, [sp, #-16]!
   26528:	mov	r4, r1
   2652c:	mov	r5, r2
   26530:	str	r6, [sp, #8]
   26534:	mov	r6, r0
   26538:	str	lr, [sp, #12]
   2653c:	sub	sp, sp, #8
   26540:	mov	r0, sp
   26544:	bl	358b8 <__assert_fail@plt+0x232c4>
   26548:	cmp	r0, #0
   2654c:	bne	265dc <__assert_fail@plt+0x13fe8>
   26550:	mov	r0, r6
   26554:	bl	3592c <__assert_fail@plt+0x23338>
   26558:	cmp	r0, #0
   2655c:	bne	265d0 <__assert_fail@plt+0x13fdc>
   26560:	mov	r0, r5
   26564:	blx	r4
   26568:	subs	r4, r0, #0
   2656c:	blt	265a0 <__assert_fail@plt+0x13fac>
   26570:	mov	r0, sp
   26574:	bl	3592c <__assert_fail@plt+0x23338>
   26578:	cmp	r0, #0
   2657c:	bne	265d0 <__assert_fail@plt+0x13fdc>
   26580:	mov	r0, sp
   26584:	bl	35948 <__assert_fail@plt+0x23354>
   26588:	mov	r0, r4
   2658c:	add	sp, sp, #8
   26590:	ldrd	r4, [sp]
   26594:	ldr	r6, [sp, #8]
   26598:	add	sp, sp, #12
   2659c:	pop	{pc}		; (ldr pc, [sp], #4)
   265a0:	bl	12348 <__errno_location@plt>
   265a4:	mov	r5, r0
   265a8:	mov	r0, sp
   265ac:	ldr	r6, [r5]
   265b0:	bl	3592c <__assert_fail@plt+0x23338>
   265b4:	cmp	r0, #0
   265b8:	bne	265d0 <__assert_fail@plt+0x13fdc>
   265bc:	mov	r0, sp
   265c0:	bl	35948 <__assert_fail@plt+0x23354>
   265c4:	cmp	r6, #0
   265c8:	strne	r6, [r5]
   265cc:	b	26588 <__assert_fail@plt+0x13f94>
   265d0:	bl	12348 <__errno_location@plt>
   265d4:	ldr	r0, [r0]
   265d8:	bl	2da14 <__assert_fail@plt+0x1b420>
   265dc:	bl	12348 <__errno_location@plt>
   265e0:	ldr	r0, [r0]
   265e4:	bl	2d9d4 <__assert_fail@plt+0x1b3e0>
   265e8:	cmn	r0, #100	; 0x64
   265ec:	strd	r4, [sp, #-16]!
   265f0:	mov	r5, r1
   265f4:	str	r6, [sp, #8]
   265f8:	mov	r6, r2
   265fc:	str	lr, [sp, #12]
   26600:	sub	sp, sp, #8
   26604:	beq	2669c <__assert_fail@plt+0x140a8>
   26608:	mov	r4, r0
   2660c:	mov	r0, sp
   26610:	bl	358b8 <__assert_fail@plt+0x232c4>
   26614:	cmp	r0, #0
   26618:	bne	266cc <__assert_fail@plt+0x140d8>
   2661c:	mov	r0, r4
   26620:	bl	124f8 <fchdir@plt>
   26624:	cmp	r0, #0
   26628:	bne	266ac <__assert_fail@plt+0x140b8>
   2662c:	mov	r0, r6
   26630:	blx	r5
   26634:	subs	r4, r0, #0
   26638:	blt	2666c <__assert_fail@plt+0x14078>
   2663c:	mov	r0, sp
   26640:	bl	3592c <__assert_fail@plt+0x23338>
   26644:	cmp	r0, #0
   26648:	bne	266d8 <__assert_fail@plt+0x140e4>
   2664c:	mov	r0, sp
   26650:	bl	35948 <__assert_fail@plt+0x23354>
   26654:	mov	r0, r4
   26658:	add	sp, sp, #8
   2665c:	ldrd	r4, [sp]
   26660:	ldr	r6, [sp, #8]
   26664:	add	sp, sp, #12
   26668:	pop	{pc}		; (ldr pc, [sp], #4)
   2666c:	bl	12348 <__errno_location@plt>
   26670:	mov	r5, r0
   26674:	mov	r0, sp
   26678:	ldr	r6, [r5]
   2667c:	bl	3592c <__assert_fail@plt+0x23338>
   26680:	cmp	r0, #0
   26684:	bne	266d8 <__assert_fail@plt+0x140e4>
   26688:	mov	r0, sp
   2668c:	bl	35948 <__assert_fail@plt+0x23354>
   26690:	cmp	r6, #0
   26694:	strne	r6, [r5]
   26698:	b	26654 <__assert_fail@plt+0x14060>
   2669c:	mov	r0, r2
   266a0:	blx	r1
   266a4:	mov	r4, r0
   266a8:	b	26654 <__assert_fail@plt+0x14060>
   266ac:	bl	12348 <__errno_location@plt>
   266b0:	mov	r5, r0
   266b4:	mov	r0, sp
   266b8:	ldr	r6, [r5]
   266bc:	mvn	r4, #0
   266c0:	bl	35948 <__assert_fail@plt+0x23354>
   266c4:	str	r6, [r5]
   266c8:	b	26654 <__assert_fail@plt+0x14060>
   266cc:	bl	12348 <__errno_location@plt>
   266d0:	ldr	r0, [r0]
   266d4:	bl	2d9d4 <__assert_fail@plt+0x1b3e0>
   266d8:	bl	12348 <__errno_location@plt>
   266dc:	ldr	r0, [r0]
   266e0:	bl	2da14 <__assert_fail@plt+0x1b420>
   266e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   266e8:	mov	r4, r1
   266ec:	mov	r5, r0
   266f0:	strd	r6, [sp, #8]
   266f4:	mov	r6, r2
   266f8:	str	r8, [sp, #16]
   266fc:	str	lr, [sp, #20]
   26700:	bl	12348 <__errno_location@plt>
   26704:	cmp	r4, #0
   26708:	ldr	r8, [r0]
   2670c:	beq	26830 <__assert_fail@plt+0x1423c>
   26710:	ldr	r1, [r6]
   26714:	mov	r7, r0
   26718:	cmp	r1, #0
   2671c:	beq	267a0 <__assert_fail@plt+0x141ac>
   26720:	cmp	r1, r4
   26724:	bcs	267cc <__assert_fail@plt+0x141d8>
   26728:	lsl	r2, r1, #1
   2672c:	cmp	r1, r2
   26730:	bhi	267e8 <__assert_fail@plt+0x141f4>
   26734:	cmp	r4, r2
   26738:	bls	26808 <__assert_fail@plt+0x14214>
   2673c:	lsl	r3, r1, #2
   26740:	cmp	r3, r2
   26744:	bcs	2675c <__assert_fail@plt+0x14168>
   26748:	b	267c0 <__assert_fail@plt+0x141cc>
   2674c:	lsl	ip, r3, #1
   26750:	cmp	ip, r3
   26754:	bcc	267e0 <__assert_fail@plt+0x141ec>
   26758:	mov	r3, ip
   2675c:	cmp	r4, r3
   26760:	bhi	2674c <__assert_fail@plt+0x14158>
   26764:	cmp	r1, #0
   26768:	bne	267c4 <__assert_fail@plt+0x141d0>
   2676c:	cmp	r5, #0
   26770:	bne	26810 <__assert_fail@plt+0x1421c>
   26774:	mov	r0, r3
   26778:	str	r3, [r6]
   2677c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   26780:	cmp	r0, #0
   26784:	beq	267d8 <__assert_fail@plt+0x141e4>
   26788:	str	r8, [r7]
   2678c:	ldrd	r4, [sp]
   26790:	ldrd	r6, [sp, #8]
   26794:	ldr	r8, [sp, #16]
   26798:	add	sp, sp, #20
   2679c:	pop	{pc}		; (ldr pc, [sp], #4)
   267a0:	cmp	r4, #16
   267a4:	movls	r3, #16
   267a8:	bls	2676c <__assert_fail@plt+0x14178>
   267ac:	cmp	r4, #32
   267b0:	movls	r3, #32
   267b4:	bls	2676c <__assert_fail@plt+0x14178>
   267b8:	mov	r3, #64	; 0x40
   267bc:	b	2675c <__assert_fail@plt+0x14168>
   267c0:	mov	r3, r4
   267c4:	cmp	r1, r3
   267c8:	bne	267ec <__assert_fail@plt+0x141f8>
   267cc:	mov	r0, r5
   267d0:	cmp	r0, #0
   267d4:	bne	26788 <__assert_fail@plt+0x14194>
   267d8:	mov	r0, #0
   267dc:	b	2678c <__assert_fail@plt+0x14198>
   267e0:	mov	r3, r4
   267e4:	b	26764 <__assert_fail@plt+0x14170>
   267e8:	mov	r3, r4
   267ec:	mov	r0, r5
   267f0:	mov	r1, r3
   267f4:	str	r3, [r6]
   267f8:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   267fc:	cmp	r0, #0
   26800:	bne	26788 <__assert_fail@plt+0x14194>
   26804:	b	267d8 <__assert_fail@plt+0x141e4>
   26808:	mov	r3, r2
   2680c:	b	267c4 <__assert_fail@plt+0x141d0>
   26810:	movw	r3, #18736	; 0x4930
   26814:	movt	r3, #5
   26818:	movw	r1, #18748	; 0x493c
   2681c:	movt	r1, #5
   26820:	movw	r0, #18772	; 0x4954
   26824:	movt	r0, #5
   26828:	mov	r2, #79	; 0x4f
   2682c:	bl	125f4 <__assert_fail@plt>
   26830:	movw	r3, #18736	; 0x4930
   26834:	movt	r3, #5
   26838:	movw	r1, #18748	; 0x493c
   2683c:	movt	r1, #5
   26840:	movw	r0, #18760	; 0x4948
   26844:	movt	r0, #5
   26848:	mov	r2, #71	; 0x47
   2684c:	bl	125f4 <__assert_fail@plt>
   26850:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26854:	mov	r4, r1
   26858:	strd	r6, [sp, #8]
   2685c:	mov	r7, r0
   26860:	mov	r6, r2
   26864:	str	r8, [sp, #16]
   26868:	str	lr, [sp, #20]
   2686c:	bl	12348 <__errno_location@plt>
   26870:	cmp	r4, #0
   26874:	ldr	r8, [r0]
   26878:	beq	26978 <__assert_fail@plt+0x14384>
   2687c:	ldr	r3, [r6]
   26880:	mov	r5, r0
   26884:	cmp	r3, #0
   26888:	beq	2690c <__assert_fail@plt+0x14318>
   2688c:	cmp	r4, r3
   26890:	bls	26938 <__assert_fail@plt+0x14344>
   26894:	lsl	r2, r3, #1
   26898:	cmp	r3, r2
   2689c:	bhi	26958 <__assert_fail@plt+0x14364>
   268a0:	cmp	r4, r2
   268a4:	movls	r0, r2
   268a8:	bls	26930 <__assert_fail@plt+0x1433c>
   268ac:	lsl	r0, r3, #2
   268b0:	cmp	r2, r0
   268b4:	bls	268cc <__assert_fail@plt+0x142d8>
   268b8:	b	2692c <__assert_fail@plt+0x14338>
   268bc:	lsl	r1, r0, #1
   268c0:	cmp	r1, r0
   268c4:	bcc	26950 <__assert_fail@plt+0x1435c>
   268c8:	mov	r0, r1
   268cc:	cmp	r4, r0
   268d0:	bhi	268bc <__assert_fail@plt+0x142c8>
   268d4:	cmp	r3, #0
   268d8:	bne	26930 <__assert_fail@plt+0x1433c>
   268dc:	cmp	r7, #0
   268e0:	bne	26998 <__assert_fail@plt+0x143a4>
   268e4:	str	r0, [r6]
   268e8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   268ec:	cmp	r0, #0
   268f0:	beq	26944 <__assert_fail@plt+0x14350>
   268f4:	ldrd	r6, [sp, #8]
   268f8:	str	r8, [r5]
   268fc:	ldrd	r4, [sp]
   26900:	ldr	r8, [sp, #16]
   26904:	add	sp, sp, #20
   26908:	pop	{pc}		; (ldr pc, [sp], #4)
   2690c:	cmp	r4, #16
   26910:	movls	r0, #16
   26914:	bls	268dc <__assert_fail@plt+0x142e8>
   26918:	cmp	r4, #32
   2691c:	movls	r0, #32
   26920:	bls	268dc <__assert_fail@plt+0x142e8>
   26924:	mov	r0, #64	; 0x40
   26928:	b	268cc <__assert_fail@plt+0x142d8>
   2692c:	mov	r0, r4
   26930:	cmp	r3, r0
   26934:	bne	2695c <__assert_fail@plt+0x14368>
   26938:	mov	r0, r7
   2693c:	cmp	r0, #0
   26940:	bne	268f4 <__assert_fail@plt+0x14300>
   26944:	mov	r0, r7
   26948:	bl	38b10 <__assert_fail@plt+0x2651c>
   2694c:	bl	36e1c <__assert_fail@plt+0x24828>
   26950:	mov	r0, r4
   26954:	b	268d4 <__assert_fail@plt+0x142e0>
   26958:	mov	r0, r4
   2695c:	mov	r1, r0
   26960:	str	r0, [r6]
   26964:	mov	r0, r7
   26968:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   2696c:	cmp	r0, #0
   26970:	bne	268f4 <__assert_fail@plt+0x14300>
   26974:	b	26944 <__assert_fail@plt+0x14350>
   26978:	movw	r3, #18736	; 0x4930
   2697c:	movt	r3, #5
   26980:	movw	r1, #18748	; 0x493c
   26984:	movt	r1, #5
   26988:	movw	r0, #18760	; 0x4948
   2698c:	movt	r0, #5
   26990:	mov	r2, #71	; 0x47
   26994:	bl	125f4 <__assert_fail@plt>
   26998:	movw	r3, #18736	; 0x4930
   2699c:	movt	r3, #5
   269a0:	movw	r1, #18748	; 0x493c
   269a4:	movt	r1, #5
   269a8:	movw	r0, #18772	; 0x4954
   269ac:	movt	r0, #5
   269b0:	mov	r2, #79	; 0x4f
   269b4:	bl	125f4 <__assert_fail@plt>
   269b8:	movw	r0, #18820	; 0x4984
   269bc:	movt	r0, #5
   269c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   269c4:	strd	r6, [sp, #8]
   269c8:	strd	r8, [sp, #16]
   269cc:	str	sl, [sp, #24]
   269d0:	str	lr, [sp, #28]
   269d4:	bl	287f0 <__assert_fail@plt+0x161fc>
   269d8:	subs	r6, r0, #0
   269dc:	beq	26ab8 <__assert_fail@plt+0x144c4>
   269e0:	mov	r9, #0
   269e4:	mvn	r5, #0
   269e8:	bl	12348 <__errno_location@plt>
   269ec:	mov	r8, r9
   269f0:	mov	r7, r0
   269f4:	mov	r0, r6
   269f8:	str	r8, [r7]
   269fc:	bl	124bc <readdir64@plt>
   26a00:	subs	r4, r0, #0
   26a04:	mov	r1, #0
   26a08:	beq	26a48 <__assert_fail@plt+0x14454>
   26a0c:	ldrb	r3, [r4, #19]
   26a10:	add	r0, r4, #19
   26a14:	cmp	r3, #46	; 0x2e
   26a18:	bne	26a34 <__assert_fail@plt+0x14440>
   26a1c:	ldrb	r3, [r4, #20]
   26a20:	cmp	r3, #0
   26a24:	beq	269f4 <__assert_fail@plt+0x14400>
   26a28:	ldrh	r3, [r4, #20]
   26a2c:	cmp	r3, #46	; 0x2e
   26a30:	beq	269f4 <__assert_fail@plt+0x14400>
   26a34:	bl	280a4 <__assert_fail@plt+0x15ab0>
   26a38:	cmp	r5, r0
   26a3c:	mov	r9, #1
   26a40:	movlt	r5, r0
   26a44:	b	269f4 <__assert_fail@plt+0x14400>
   26a48:	ldr	r7, [r7]
   26a4c:	cmp	r7, r1
   26a50:	bne	26a80 <__assert_fail@plt+0x1448c>
   26a54:	mov	r0, r6
   26a58:	bl	125c4 <closedir@plt>
   26a5c:	cmp	r9, #0
   26a60:	beq	26ab8 <__assert_fail@plt+0x144c4>
   26a64:	mov	r0, r5
   26a68:	ldrd	r4, [sp]
   26a6c:	ldrd	r6, [sp, #8]
   26a70:	ldrd	r8, [sp, #16]
   26a74:	ldr	sl, [sp, #24]
   26a78:	add	sp, sp, #28
   26a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   26a80:	mov	r1, #8
   26a84:	movw	r2, #18820	; 0x4984
   26a88:	movt	r2, #5
   26a8c:	mvn	r5, #0
   26a90:	bl	3431c <__assert_fail@plt+0x21d28>
   26a94:	mov	r3, r0
   26a98:	mov	r1, r7
   26a9c:	mov	r0, r4
   26aa0:	movw	r2, #20016	; 0x4e30
   26aa4:	movt	r2, #5
   26aa8:	bl	121ec <error@plt>
   26aac:	mov	r0, r6
   26ab0:	bl	125c4 <closedir@plt>
   26ab4:	b	26a64 <__assert_fail@plt+0x14470>
   26ab8:	mvn	r5, #0
   26abc:	b	26a64 <__assert_fail@plt+0x14470>
   26ac0:	strd	r4, [sp, #-16]!
   26ac4:	mov	r4, r1
   26ac8:	mov	r1, #1
   26acc:	str	r6, [sp, #8]
   26ad0:	mov	r6, r0
   26ad4:	str	lr, [sp, #12]
   26ad8:	bl	388c8 <__assert_fail@plt+0x262d4>
   26adc:	ands	r5, r0, #1
   26ae0:	movne	r5, #0
   26ae4:	beq	26afc <__assert_fail@plt+0x14508>
   26ae8:	mov	r0, r5
   26aec:	ldrd	r4, [sp]
   26af0:	ldr	r6, [sp, #8]
   26af4:	add	sp, sp, #12
   26af8:	pop	{pc}		; (ldr pc, [sp], #4)
   26afc:	ldrd	r0, [r4]
   26b00:	add	r2, r4, #8
   26b04:	add	r1, r1, #1
   26b08:	lsl	r1, r1, #2
   26b0c:	bl	266e4 <__assert_fail@plt+0x140f0>
   26b10:	cmp	r0, #0
   26b14:	beq	26b34 <__assert_fail@plt+0x14540>
   26b18:	ldr	r3, [r4, #4]
   26b1c:	str	r0, [r4]
   26b20:	str	r6, [r0, r3, lsl #2]
   26b24:	ldr	r3, [r4, #4]
   26b28:	add	r3, r3, #1
   26b2c:	str	r3, [r4, #4]
   26b30:	b	26ae8 <__assert_fail@plt+0x144f4>
   26b34:	mvn	r5, #0
   26b38:	b	26ae8 <__assert_fail@plt+0x144f4>
   26b3c:	strd	r4, [sp, #-16]!
   26b40:	mov	r4, r1
   26b44:	mov	r1, #1
   26b48:	mov	r5, r0
   26b4c:	str	r6, [sp, #8]
   26b50:	str	lr, [sp, #12]
   26b54:	bl	388c8 <__assert_fail@plt+0x262d4>
   26b58:	tst	r0, #1
   26b5c:	bne	26bc4 <__assert_fail@plt+0x145d0>
   26b60:	ldmib	r4, {r0, r3}
   26b64:	cmp	r3, r0
   26b68:	bcs	26ba4 <__assert_fail@plt+0x145b0>
   26b6c:	ldr	r2, [r4]
   26b70:	ldr	r1, [r2, r3, lsl #2]
   26b74:	add	r2, r2, r3, lsl #2
   26b78:	cmp	r1, r5
   26b7c:	bge	26bbc <__assert_fail@plt+0x145c8>
   26b80:	add	r3, r3, #1
   26b84:	b	26b94 <__assert_fail@plt+0x145a0>
   26b88:	ldr	r1, [r2, #4]!
   26b8c:	cmp	r5, r1
   26b90:	ble	26bbc <__assert_fail@plt+0x145c8>
   26b94:	cmp	r0, r3
   26b98:	str	r3, [r4, #8]
   26b9c:	add	r3, r3, #1
   26ba0:	bne	26b88 <__assert_fail@plt+0x14594>
   26ba4:	str	r5, [r4, #12]
   26ba8:	mvn	r0, #0
   26bac:	ldrd	r4, [sp]
   26bb0:	ldr	r6, [sp, #8]
   26bb4:	add	sp, sp, #12
   26bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   26bbc:	cmp	r5, r1
   26bc0:	bne	26ba4 <__assert_fail@plt+0x145b0>
   26bc4:	ldrd	r4, [sp]
   26bc8:	mov	r0, #0
   26bcc:	ldr	r6, [sp, #8]
   26bd0:	add	sp, sp, #12
   26bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   26bd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26bdc:	strd	r6, [sp, #8]
   26be0:	strd	r8, [sp, #16]
   26be4:	subs	r9, r0, #0
   26be8:	movgt	r6, r1
   26bec:	movgt	r7, #0
   26bf0:	strd	sl, [sp, #24]
   26bf4:	movgt	r8, #5
   26bf8:	str	lr, [sp, #32]
   26bfc:	sub	sp, sp, #516	; 0x204
   26c00:	ble	26d0c <__assert_fail@plt+0x14718>
   26c04:	sub	r3, r9, r7
   26c08:	cmp	r3, #64	; 0x40
   26c0c:	movlt	sl, r3
   26c10:	movge	sl, #64	; 0x40
   26c14:	cmp	r3, #0
   26c18:	ble	26d14 <__assert_fail@plt+0x14720>
   26c1c:	mov	r4, sp
   26c20:	mov	r2, sp
   26c24:	mov	r3, #0
   26c28:	add	r1, r7, r3
   26c2c:	add	r3, r3, #1
   26c30:	str	r8, [r2, #4]
   26c34:	cmp	r3, sl
   26c38:	str	r1, [r2], #8
   26c3c:	blt	26c28 <__assert_fail@plt+0x14634>
   26c40:	mov	r2, #0
   26c44:	mov	r1, sl
   26c48:	mov	r0, sp
   26c4c:	bl	12150 <poll@plt>
   26c50:	cmn	r0, #1
   26c54:	beq	26d2c <__assert_fail@plt+0x14738>
   26c58:	mov	fp, #0
   26c5c:	ldrsh	r3, [r4, #6]
   26c60:	cmp	r3, #32
   26c64:	beq	26cf0 <__assert_fail@plt+0x146fc>
   26c68:	ldr	r5, [r4]
   26c6c:	mov	r1, #1
   26c70:	mov	r0, r5
   26c74:	bl	388c8 <__assert_fail@plt+0x262d4>
   26c78:	tst	r0, #1
   26c7c:	bne	26cf0 <__assert_fail@plt+0x146fc>
   26c80:	ldmib	r6, {r0, r3}
   26c84:	cmp	r0, r3
   26c88:	bls	26cc4 <__assert_fail@plt+0x146d0>
   26c8c:	ldr	r2, [r6]
   26c90:	ldr	r1, [r2, r3, lsl #2]
   26c94:	add	r2, r2, r3, lsl #2
   26c98:	cmp	r5, r1
   26c9c:	ble	26ce8 <__assert_fail@plt+0x146f4>
   26ca0:	add	r3, r3, #1
   26ca4:	b	26cb4 <__assert_fail@plt+0x146c0>
   26ca8:	ldr	r1, [r2, #4]!
   26cac:	cmp	r5, r1
   26cb0:	ble	26ce8 <__assert_fail@plt+0x146f4>
   26cb4:	cmp	r3, r0
   26cb8:	str	r3, [r6, #8]
   26cbc:	add	r3, r3, #1
   26cc0:	bne	26ca8 <__assert_fail@plt+0x146b4>
   26cc4:	mvn	r0, #0
   26cc8:	str	r5, [r6, #12]
   26ccc:	add	sp, sp, #516	; 0x204
   26cd0:	ldrd	r4, [sp]
   26cd4:	ldrd	r6, [sp, #8]
   26cd8:	ldrd	r8, [sp, #16]
   26cdc:	ldrd	sl, [sp, #24]
   26ce0:	add	sp, sp, #32
   26ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   26ce8:	cmp	r5, r1
   26cec:	bne	26cc4 <__assert_fail@plt+0x146d0>
   26cf0:	add	fp, fp, #1
   26cf4:	add	r4, r4, #8
   26cf8:	cmp	fp, sl
   26cfc:	blt	26c5c <__assert_fail@plt+0x14668>
   26d00:	add	r7, r7, sl
   26d04:	cmp	r9, r7
   26d08:	bgt	26c04 <__assert_fail@plt+0x14610>
   26d0c:	mov	r0, #0
   26d10:	b	26ccc <__assert_fail@plt+0x146d8>
   26d14:	mov	r2, #0
   26d18:	mov	r1, sl
   26d1c:	mov	r0, sp
   26d20:	bl	12150 <poll@plt>
   26d24:	cmn	r0, #1
   26d28:	bne	26d00 <__assert_fail@plt+0x1470c>
   26d2c:	mvn	r0, #0
   26d30:	b	26ccc <__assert_fail@plt+0x146d8>
   26d34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26d38:	strd	r6, [sp, #8]
   26d3c:	strd	r8, [sp, #16]
   26d40:	subs	r9, r0, #0
   26d44:	strd	sl, [sp, #24]
   26d48:	movgt	sl, r1
   26d4c:	movgt	r7, #0
   26d50:	addgt	r8, sl, #8
   26d54:	str	lr, [sp, #32]
   26d58:	sub	sp, sp, #516	; 0x204
   26d5c:	ble	26e30 <__assert_fail@plt+0x1483c>
   26d60:	sub	r3, r9, r7
   26d64:	cmp	r3, #64	; 0x40
   26d68:	movlt	r6, r3
   26d6c:	movge	r6, #64	; 0x40
   26d70:	cmp	r3, #0
   26d74:	ble	26e38 <__assert_fail@plt+0x14844>
   26d78:	mov	r4, sp
   26d7c:	mov	r2, sp
   26d80:	mov	r3, #0
   26d84:	mov	r0, #5
   26d88:	add	r1, r7, r3
   26d8c:	add	r3, r3, #1
   26d90:	str	r0, [r2, #4]
   26d94:	cmp	r3, r6
   26d98:	str	r1, [r2], #8
   26d9c:	blt	26d88 <__assert_fail@plt+0x14794>
   26da0:	mov	r2, #0
   26da4:	mov	r1, r6
   26da8:	mov	r0, sp
   26dac:	bl	12150 <poll@plt>
   26db0:	cmn	r0, #1
   26db4:	beq	26e50 <__assert_fail@plt+0x1485c>
   26db8:	mov	r5, #0
   26dbc:	ldrsh	r3, [r4, #6]
   26dc0:	mov	r1, #1
   26dc4:	add	r5, r5, r1
   26dc8:	cmp	r3, #32
   26dcc:	beq	26e18 <__assert_fail@plt+0x14824>
   26dd0:	ldr	fp, [r4]
   26dd4:	mov	r0, fp
   26dd8:	bl	388c8 <__assert_fail@plt+0x262d4>
   26ddc:	tst	r0, #1
   26de0:	mov	r2, r8
   26de4:	bne	26e18 <__assert_fail@plt+0x14824>
   26de8:	ldrd	r0, [sl]
   26dec:	add	r1, r1, #1
   26df0:	lsl	r1, r1, #2
   26df4:	bl	266e4 <__assert_fail@plt+0x140f0>
   26df8:	cmp	r0, #0
   26dfc:	beq	26e50 <__assert_fail@plt+0x1485c>
   26e00:	ldr	r3, [sl, #4]
   26e04:	str	r0, [sl]
   26e08:	str	fp, [r0, r3, lsl #2]
   26e0c:	ldr	r3, [sl, #4]
   26e10:	add	r3, r3, #1
   26e14:	str	r3, [sl, #4]
   26e18:	cmp	r6, r5
   26e1c:	add	r4, r4, #8
   26e20:	bgt	26dbc <__assert_fail@plt+0x147c8>
   26e24:	add	r7, r7, r6
   26e28:	cmp	r9, r7
   26e2c:	bgt	26d60 <__assert_fail@plt+0x1476c>
   26e30:	mov	r0, #0
   26e34:	b	26e54 <__assert_fail@plt+0x14860>
   26e38:	mov	r2, #0
   26e3c:	mov	r1, r6
   26e40:	mov	r0, sp
   26e44:	bl	12150 <poll@plt>
   26e48:	cmn	r0, #1
   26e4c:	bne	26e24 <__assert_fail@plt+0x14830>
   26e50:	mvn	r0, #0
   26e54:	add	sp, sp, #516	; 0x204
   26e58:	ldrd	r4, [sp]
   26e5c:	ldrd	r6, [sp, #8]
   26e60:	ldrd	r8, [sp, #16]
   26e64:	ldrd	sl, [sp, #24]
   26e68:	add	sp, sp, #32
   26e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   26e70:	strd	r4, [sp, #-12]!
   26e74:	str	lr, [sp, #8]
   26e78:	sub	sp, sp, #20
   26e7c:	bl	269b8 <__assert_fail@plt+0x143c4>
   26e80:	subs	r4, r0, #0
   26e84:	movge	r5, sp
   26e88:	blt	26ed0 <__assert_fail@plt+0x148dc>
   26e8c:	cmn	r4, #-2147483647	; 0x80000001
   26e90:	mov	r3, #0
   26e94:	addne	r4, r4, #1
   26e98:	mov	r1, r5
   26e9c:	mov	r0, r4
   26ea0:	str	r3, [sp]
   26ea4:	str	r3, [sp, #4]
   26ea8:	str	r3, [sp, #8]
   26eac:	bl	26d34 <__assert_fail@plt+0x14740>
   26eb0:	ldm	sp, {r1, r2}
   26eb4:	movw	r3, #31968	; 0x7ce0
   26eb8:	movt	r3, #6
   26ebc:	stm	r3, {r1, r2}
   26ec0:	add	sp, sp, #20
   26ec4:	ldrd	r4, [sp]
   26ec8:	add	sp, sp, #8
   26ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   26ed0:	mov	r0, #4
   26ed4:	mov	r5, sp
   26ed8:	bl	120cc <sysconf@plt>
   26edc:	cmn	r0, #1
   26ee0:	mov	r1, r5
   26ee4:	movne	r4, r0
   26ee8:	mov	r0, #7
   26eec:	moveq	r4, #20
   26ef0:	bl	120d8 <getrlimit64@plt>
   26ef4:	cmp	r0, #0
   26ef8:	bne	26e8c <__assert_fail@plt+0x14898>
   26efc:	ldrd	r2, [sp]
   26f00:	mvn	r1, #0
   26f04:	mvn	r0, #0
   26f08:	cmp	r3, r1
   26f0c:	cmpeq	r2, r0
   26f10:	movne	r4, r2
   26f14:	b	26e8c <__assert_fail@plt+0x14898>
   26f18:	push	{r1, r2, r3}
   26f1c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   26f20:	strd	r6, [sp, #8]
   26f24:	strd	r8, [sp, #16]
   26f28:	mov	r8, r0
   26f2c:	str	lr, [sp, #24]
   26f30:	sub	sp, sp, #8
   26f34:	ldr	r5, [sp, #36]	; 0x24
   26f38:	ands	r6, r5, #64	; 0x40
   26f3c:	bne	26fc4 <__assert_fail@plt+0x149d0>
   26f40:	movw	r4, #31968	; 0x7ce0
   26f44:	movt	r4, #6
   26f48:	ldrb	r7, [r4, #8]
   26f4c:	cmp	r7, #0
   26f50:	beq	26f9c <__assert_fail@plt+0x149a8>
   26f54:	orr	r1, r5, #524288	; 0x80000
   26f58:	mov	r2, r6
   26f5c:	mov	r0, r8
   26f60:	bl	28b00 <__assert_fail@plt+0x1650c>
   26f64:	subs	r5, r0, #0
   26f68:	blt	26f78 <__assert_fail@plt+0x14984>
   26f6c:	ldrb	r3, [r4, #9]
   26f70:	cmp	r3, #0
   26f74:	beq	26fd4 <__assert_fail@plt+0x149e0>
   26f78:	mov	r0, r5
   26f7c:	add	sp, sp, #8
   26f80:	ldrd	r4, [sp]
   26f84:	ldrd	r6, [sp, #8]
   26f88:	ldrd	r8, [sp, #16]
   26f8c:	ldr	lr, [sp, #24]
   26f90:	add	sp, sp, #28
   26f94:	add	sp, sp, #12
   26f98:	bx	lr
   26f9c:	movw	r0, #26352	; 0x66f0
   26fa0:	movt	r0, #5
   26fa4:	mov	r1, #524288	; 0x80000
   26fa8:	bl	28b00 <__assert_fail@plt+0x1650c>
   26fac:	subs	r9, r0, #0
   26fb0:	bge	26fe0 <__assert_fail@plt+0x149ec>
   26fb4:	mov	r3, #1
   26fb8:	strb	r3, [r4, #8]
   26fbc:	strb	r7, [r4, #9]
   26fc0:	b	26f54 <__assert_fail@plt+0x14960>
   26fc4:	add	r3, sp, #40	; 0x28
   26fc8:	ldr	r6, [sp, #40]	; 0x28
   26fcc:	str	r3, [sp, #4]
   26fd0:	b	26f40 <__assert_fail@plt+0x1494c>
   26fd4:	mov	r1, #1
   26fd8:	bl	28664 <__assert_fail@plt+0x16070>
   26fdc:	b	26f78 <__assert_fail@plt+0x14984>
   26fe0:	mov	r1, #1
   26fe4:	bl	388c8 <__assert_fail@plt+0x262d4>
   26fe8:	and	r7, r0, #1
   26fec:	mov	r0, r9
   26ff0:	bl	125ac <close@plt>
   26ff4:	mov	r3, #1
   26ff8:	strb	r3, [r4, #8]
   26ffc:	strb	r7, [r4, #9]
   27000:	b	26f54 <__assert_fail@plt+0x14960>
   27004:	str	r4, [sp, #-8]!
   27008:	movw	r4, #31968	; 0x7ce0
   2700c:	movt	r4, #6
   27010:	ldr	r0, [r4]
   27014:	str	lr, [sp, #4]
   27018:	bl	38b10 <__assert_fail@plt+0x2651c>
   2701c:	mov	r3, #0
   27020:	str	r3, [r4]
   27024:	str	r3, [r4, #4]
   27028:	ldr	r4, [sp]
   2702c:	add	sp, sp, #4
   27030:	pop	{pc}		; (ldr pc, [sp], #4)
   27034:	movw	r0, #18836	; 0x4994
   27038:	movt	r0, #5
   2703c:	str	r4, [sp, #-8]!
   27040:	str	lr, [sp, #4]
   27044:	bl	12228 <getenv@plt>
   27048:	adds	r0, r0, #0
   2704c:	ldr	r4, [sp]
   27050:	add	sp, sp, #4
   27054:	movne	r0, #1
   27058:	pop	{pc}		; (ldr pc, [sp], #4)
   2705c:	movw	r3, #31968	; 0x7ce0
   27060:	movt	r3, #6
   27064:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27068:	strd	r6, [sp, #8]
   2706c:	str	r8, [sp, #16]
   27070:	str	lr, [sp, #20]
   27074:	sub	sp, sp, #16
   27078:	ldr	r8, [r3]
   2707c:	ldr	r7, [r3, #4]
   27080:	bl	269b8 <__assert_fail@plt+0x143c4>
   27084:	subs	r4, r0, #0
   27088:	movge	r5, sp
   2708c:	blt	270e4 <__assert_fail@plt+0x14af0>
   27090:	cmn	r4, #-2147483647	; 0x80000001
   27094:	beq	2709c <__assert_fail@plt+0x14aa8>
   27098:	add	r4, r4, #1
   2709c:	mov	r6, #0
   270a0:	mvn	r3, #0
   270a4:	str	r8, [sp]
   270a8:	mov	r0, r4
   270ac:	mov	r1, r5
   270b0:	str	r7, [sp, #4]
   270b4:	str	r6, [sp, #8]
   270b8:	str	r3, [sp, #12]
   270bc:	bl	26bd8 <__assert_fail@plt+0x145e4>
   270c0:	ldr	r4, [sp, #12]
   270c4:	cmp	r4, r6
   270c8:	bge	27160 <__assert_fail@plt+0x14b6c>
   270cc:	add	sp, sp, #16
   270d0:	ldrd	r4, [sp]
   270d4:	ldrd	r6, [sp, #8]
   270d8:	ldr	r8, [sp, #16]
   270dc:	add	sp, sp, #20
   270e0:	pop	{pc}		; (ldr pc, [sp], #4)
   270e4:	mov	r0, #4
   270e8:	mov	r5, sp
   270ec:	bl	120cc <sysconf@plt>
   270f0:	mov	r4, r0
   270f4:	mov	r1, r5
   270f8:	cmn	r4, #1
   270fc:	mov	r0, #7
   27100:	beq	27130 <__assert_fail@plt+0x14b3c>
   27104:	bl	120d8 <getrlimit64@plt>
   27108:	cmp	r0, #0
   2710c:	bne	27090 <__assert_fail@plt+0x14a9c>
   27110:	ldrd	r2, [sp]
   27114:	mvn	r1, #0
   27118:	mvn	r0, #0
   2711c:	cmp	r3, r1
   27120:	cmpeq	r2, r0
   27124:	beq	27090 <__assert_fail@plt+0x14a9c>
   27128:	mov	r4, r2
   2712c:	b	27090 <__assert_fail@plt+0x14a9c>
   27130:	bl	120d8 <getrlimit64@plt>
   27134:	cmp	r0, #0
   27138:	movne	r4, #21
   2713c:	bne	2709c <__assert_fail@plt+0x14aa8>
   27140:	ldrd	r2, [sp]
   27144:	mvn	r1, #0
   27148:	mvn	r0, #0
   2714c:	cmp	r3, r1
   27150:	cmpeq	r2, r0
   27154:	moveq	r4, #20
   27158:	bne	27128 <__assert_fail@plt+0x14b34>
   2715c:	b	27098 <__assert_fail@plt+0x14aa4>
   27160:	mov	r2, #5
   27164:	movw	r1, #18864	; 0x49b0
   27168:	movt	r1, #5
   2716c:	mov	r0, r6
   27170:	bl	120b4 <dcgettext@plt>
   27174:	mov	r2, r0
   27178:	mov	r3, r4
   2717c:	mov	r1, r6
   27180:	mov	r0, r6
   27184:	bl	121ec <error@plt>
   27188:	movw	r3, #18792	; 0x4968
   2718c:	movt	r3, #5
   27190:	movw	r1, #19016	; 0x4a48
   27194:	movt	r1, #5
   27198:	movw	r0, #19028	; 0x4a54
   2719c:	movt	r0, #5
   271a0:	mov	r2, #396	; 0x18c
   271a4:	bl	125f4 <__assert_fail@plt>
   271a8:	movw	r3, #30024	; 0x7548
   271ac:	movt	r3, #6
   271b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   271b4:	strd	r6, [sp, #8]
   271b8:	mov	r6, r0
   271bc:	str	r8, [sp, #16]
   271c0:	str	lr, [sp, #20]
   271c4:	sub	sp, sp, #16
   271c8:	ldr	r0, [r3]
   271cc:	bl	38ab0 <__assert_fail@plt+0x264bc>
   271d0:	movw	r2, #30036	; 0x7554
   271d4:	movt	r2, #6
   271d8:	movw	r3, #29900	; 0x74cc
   271dc:	movt	r3, #6
   271e0:	ldr	r4, [r2]
   271e4:	movw	r1, #19040	; 0x4a60
   271e8:	movt	r1, #5
   271ec:	mov	r2, #5
   271f0:	mov	r0, #0
   271f4:	ldr	r8, [r3]
   271f8:	bl	120b4 <dcgettext@plt>
   271fc:	mov	r7, r0
   27200:	mov	r2, #5
   27204:	movw	r1, #19056	; 0x4a70
   27208:	movt	r1, #5
   2720c:	mov	r0, #0
   27210:	bl	120b4 <dcgettext@plt>
   27214:	mov	r5, r0
   27218:	mov	r2, #5
   2721c:	movw	r1, #19072	; 0x4a80
   27220:	movt	r1, #5
   27224:	mov	r0, #0
   27228:	bl	120b4 <dcgettext@plt>
   2722c:	mov	ip, #0
   27230:	mov	r3, r8
   27234:	str	r7, [sp]
   27238:	mov	r1, r6
   2723c:	movw	r2, #19088	; 0x4a90
   27240:	movt	r2, #5
   27244:	str	r5, [sp, #4]
   27248:	str	r0, [sp, #8]
   2724c:	mov	r0, r4
   27250:	str	ip, [sp, #12]
   27254:	bl	3666c <__assert_fail@plt+0x24078>
   27258:	add	sp, sp, #16
   2725c:	ldrd	r4, [sp]
   27260:	ldrd	r6, [sp, #8]
   27264:	ldr	r8, [sp, #16]
   27268:	add	sp, sp, #20
   2726c:	pop	{pc}		; (ldr pc, [sp], #4)
   27270:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27274:	mov	r4, r0
   27278:	mov	r5, r1
   2727c:	strd	r6, [sp, #8]
   27280:	movw	r7, #19140	; 0x4ac4
   27284:	movt	r7, #5
   27288:	movw	r6, #19144	; 0x4ac8
   2728c:	movt	r6, #5
   27290:	str	r8, [sp, #16]
   27294:	movw	r8, #19152	; 0x4ad0
   27298:	movt	r8, #5
   2729c:	str	lr, [sp, #20]
   272a0:	b	272c4 <__assert_fail@plt+0x14cd0>
   272a4:	cmp	r2, #92	; 0x5c
   272a8:	bne	27344 <__assert_fail@plt+0x14d50>
   272ac:	movw	r1, #19120	; 0x4ab0
   272b0:	movt	r1, #5
   272b4:	mov	r0, r5
   272b8:	bl	1233c <fprintf@plt>
   272bc:	cmp	r0, #0
   272c0:	blt	27308 <__assert_fail@plt+0x14d14>
   272c4:	ldrb	r2, [r4], #1
   272c8:	cmp	r2, #0
   272cc:	beq	27370 <__assert_fail@plt+0x14d7c>
   272d0:	cmp	r2, #12
   272d4:	beq	273d4 <__assert_fail@plt+0x14de0>
   272d8:	bls	2732c <__assert_fail@plt+0x14d38>
   272dc:	cmp	r2, #32
   272e0:	beq	273c4 <__assert_fail@plt+0x14dd0>
   272e4:	bls	27310 <__assert_fail@plt+0x14d1c>
   272e8:	cmp	r2, #34	; 0x22
   272ec:	bne	272a4 <__assert_fail@plt+0x14cb0>
   272f0:	movw	r1, #19148	; 0x4acc
   272f4:	movt	r1, #5
   272f8:	mov	r0, r5
   272fc:	bl	1233c <fprintf@plt>
   27300:	cmp	r0, #0
   27304:	bge	272c4 <__assert_fail@plt+0x14cd0>
   27308:	mov	r0, #0
   2730c:	b	27374 <__assert_fail@plt+0x14d80>
   27310:	cmp	r2, #13
   27314:	bne	27344 <__assert_fail@plt+0x14d50>
   27318:	movw	r1, #19132	; 0x4abc
   2731c:	movt	r1, #5
   27320:	mov	r0, r5
   27324:	bl	1233c <fprintf@plt>
   27328:	b	272bc <__assert_fail@plt+0x14cc8>
   2732c:	cmp	r2, #9
   27330:	beq	273b0 <__assert_fail@plt+0x14dbc>
   27334:	cmp	r2, #10
   27338:	beq	2739c <__assert_fail@plt+0x14da8>
   2733c:	cmp	r2, #8
   27340:	beq	27388 <__assert_fail@plt+0x14d94>
   27344:	sub	r3, r2, #33	; 0x21
   27348:	cmp	r3, #93	; 0x5d
   2734c:	bhi	273e4 <__assert_fail@plt+0x14df0>
   27350:	mov	r0, r2
   27354:	mov	r1, r5
   27358:	bl	124e0 <putc@plt>
   2735c:	cmn	r0, #1
   27360:	beq	27308 <__assert_fail@plt+0x14d14>
   27364:	ldrb	r2, [r4], #1
   27368:	cmp	r2, #0
   2736c:	bne	272d0 <__assert_fail@plt+0x14cdc>
   27370:	mov	r0, #1
   27374:	ldrd	r4, [sp]
   27378:	ldrd	r6, [sp, #8]
   2737c:	ldr	r8, [sp, #16]
   27380:	add	sp, sp, #20
   27384:	pop	{pc}		; (ldr pc, [sp], #4)
   27388:	movw	r1, #19128	; 0x4ab8
   2738c:	movt	r1, #5
   27390:	mov	r0, r5
   27394:	bl	1233c <fprintf@plt>
   27398:	b	272bc <__assert_fail@plt+0x14cc8>
   2739c:	movw	r1, #19124	; 0x4ab4
   273a0:	movt	r1, #5
   273a4:	mov	r0, r5
   273a8:	bl	1233c <fprintf@plt>
   273ac:	b	272bc <__assert_fail@plt+0x14cc8>
   273b0:	movw	r1, #19136	; 0x4ac0
   273b4:	movt	r1, #5
   273b8:	mov	r0, r5
   273bc:	bl	1233c <fprintf@plt>
   273c0:	b	272bc <__assert_fail@plt+0x14cc8>
   273c4:	mov	r1, r6
   273c8:	mov	r0, r5
   273cc:	bl	1233c <fprintf@plt>
   273d0:	b	272bc <__assert_fail@plt+0x14cc8>
   273d4:	mov	r1, r7
   273d8:	mov	r0, r5
   273dc:	bl	1233c <fprintf@plt>
   273e0:	b	272bc <__assert_fail@plt+0x14cc8>
   273e4:	mov	r1, r8
   273e8:	mov	r0, r5
   273ec:	bl	1233c <fprintf@plt>
   273f0:	b	272bc <__assert_fail@plt+0x14cc8>
   273f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   273f8:	movw	r4, #29904	; 0x74d0
   273fc:	movt	r4, #6
   27400:	strd	r6, [sp, #8]
   27404:	mov	r5, r3
   27408:	strd	r8, [sp, #16]
   2740c:	mov	r9, r0
   27410:	strd	sl, [sp, #24]
   27414:	add	fp, sp, #32
   27418:	mov	sl, r2
   2741c:	str	lr, [sp, #32]
   27420:	sub	sp, sp, #956	; 0x3bc
   27424:	str	r1, [fp, #-968]	; 0xfffffc38
   27428:	sub	r1, fp, #956	; 0x3bc
   2742c:	ldr	r0, [r3, #16]
   27430:	bl	28b40 <__assert_fail@plt+0x1654c>
   27434:	ldr	r6, [r4]
   27438:	mov	r0, #1
   2743c:	mov	r1, #0
   27440:	sub	r2, fp, #688	; 0x2b0
   27444:	mov	r3, #0
   27448:	strd	r0, [sp]
   2744c:	strd	r0, [sp, #8]
   27450:	ldrd	r0, [r5, #96]	; 0x60
   27454:	bl	2a590 <__assert_fail@plt+0x17f9c>
   27458:	mov	r3, r0
   2745c:	mov	r2, r6
   27460:	ldr	r0, [fp, #16]
   27464:	movw	r1, #19184	; 0x4af0
   27468:	movt	r1, #5
   2746c:	bl	1233c <fprintf@plt>
   27470:	cmp	r0, #0
   27474:	blt	27794 <__assert_fail@plt+0x151a0>
   27478:	ldr	r3, [r4]
   2747c:	ldr	r1, [fp, #16]
   27480:	cmp	r3, r0
   27484:	strlt	r0, [r4]
   27488:	mov	r0, #32
   2748c:	bl	124e0 <putc@plt>
   27490:	ldr	r2, [fp, #8]
   27494:	sub	r1, fp, #964	; 0x3c4
   27498:	cmn	r0, #1
   2749c:	mov	r0, #512	; 0x200
   274a0:	moveq	r6, #150	; 0x96
   274a4:	ldr	r7, [r4, #4]
   274a8:	movne	r8, #1
   274ac:	asr	r3, r2, #31
   274b0:	strd	r2, [r1]
   274b4:	mov	r1, #0
   274b8:	mov	r3, #0
   274bc:	sub	r2, fp, #688	; 0x2b0
   274c0:	movne	r6, r3
   274c4:	strd	r0, [sp]
   274c8:	sub	r1, fp, #964	; 0x3c4
   274cc:	moveq	r8, r3
   274d0:	ldrd	r0, [r1]
   274d4:	strd	r0, [sp, #8]
   274d8:	ldrd	r0, [r5, #64]	; 0x40
   274dc:	bl	2a590 <__assert_fail@plt+0x17f9c>
   274e0:	mov	r3, r0
   274e4:	mov	r2, r7
   274e8:	ldr	r0, [fp, #16]
   274ec:	movw	r1, #19184	; 0x4af0
   274f0:	movt	r1, #5
   274f4:	bl	1233c <fprintf@plt>
   274f8:	cmp	r0, #0
   274fc:	blt	277c8 <__assert_fail@plt+0x151d4>
   27500:	ldr	r3, [r4, #4]
   27504:	cmp	r3, r0
   27508:	strlt	r0, [r4, #4]
   2750c:	cmp	r8, #0
   27510:	beq	27798 <__assert_fail@plt+0x151a4>
   27514:	mov	r0, #32
   27518:	ldr	r1, [fp, #16]
   2751c:	bl	124e0 <putc@plt>
   27520:	cmn	r0, #1
   27524:	beq	2780c <__assert_fail@plt+0x15218>
   27528:	sub	r0, fp, #956	; 0x3bc
   2752c:	ldr	r1, [fp, #16]
   27530:	bl	12588 <fputs@plt>
   27534:	cmp	r0, #0
   27538:	blt	27a00 <__assert_fail@plt+0x1540c>
   2753c:	movw	r1, #19204	; 0x4b04
   27540:	movt	r1, #5
   27544:	ldr	r2, [r4, #8]
   27548:	ldr	r0, [fp, #16]
   2754c:	ldr	r3, [r5, #20]
   27550:	bl	1233c <fprintf@plt>
   27554:	cmp	r0, #0
   27558:	blt	27a08 <__assert_fail@plt+0x15414>
   2755c:	ldr	r3, [r4, #8]
   27560:	ldr	r1, [fp, #16]
   27564:	cmp	r3, r0
   27568:	strlt	r0, [r4, #8]
   2756c:	mov	r0, #32
   27570:	bl	124e0 <putc@plt>
   27574:	ldr	r0, [r5, #24]
   27578:	bl	2b668 <__assert_fail@plt+0x19074>
   2757c:	subs	r6, r0, #0
   27580:	beq	2781c <__assert_fail@plt+0x15228>
   27584:	mov	r1, #0
   27588:	bl	2d410 <__assert_fail@plt+0x1ae1c>
   2758c:	ldr	r2, [r4, #12]
   27590:	mov	r3, r6
   27594:	movw	r1, #19280	; 0x4b50
   27598:	movt	r1, #5
   2759c:	cmp	r2, r0
   275a0:	movlt	r2, r0
   275a4:	strlt	r0, [r4, #12]
   275a8:	ldr	r0, [fp, #16]
   275ac:	bl	1233c <fprintf@plt>
   275b0:	cmp	r0, #0
   275b4:	blt	27814 <__assert_fail@plt+0x15220>
   275b8:	ldr	r0, [r5, #28]
   275bc:	bl	2b844 <__assert_fail@plt+0x19250>
   275c0:	subs	r6, r0, #0
   275c4:	beq	27958 <__assert_fail@plt+0x15364>
   275c8:	mov	r1, #0
   275cc:	bl	2d410 <__assert_fail@plt+0x1ae1c>
   275d0:	ldr	r2, [r4, #16]
   275d4:	mov	r3, r6
   275d8:	movw	r1, #19280	; 0x4b50
   275dc:	movt	r1, #5
   275e0:	cmp	r2, r0
   275e4:	movlt	r2, r0
   275e8:	strlt	r0, [r4, #16]
   275ec:	ldr	r0, [fp, #16]
   275f0:	bl	1233c <fprintf@plt>
   275f4:	cmp	r0, #0
   275f8:	movlt	r6, #500	; 0x1f4
   275fc:	blt	27798 <__assert_fail@plt+0x151a4>
   27600:	ldr	r3, [r5, #16]
   27604:	and	r3, r3, #45056	; 0xb000
   27608:	cmp	r3, #8192	; 0x2000
   2760c:	beq	278b4 <__assert_fail@plt+0x152c0>
   27610:	ldr	r3, [fp, #8]
   27614:	cmp	r3, #0
   27618:	blt	2762c <__assert_fail@plt+0x15038>
   2761c:	mov	r2, #1
   27620:	mov	r3, #0
   27624:	sub	r1, fp, #964	; 0x3c4
   27628:	strd	r2, [r1]
   2762c:	sub	r2, fp, #964	; 0x3c4
   27630:	mov	r0, #1
   27634:	ldrd	r6, [r2]
   27638:	mov	r1, #0
   2763c:	mov	r3, #0
   27640:	sub	r2, fp, #688	; 0x2b0
   27644:	strd	r6, [sp, #8]
   27648:	ldr	r6, [r4, #28]
   2764c:	strd	r0, [sp]
   27650:	ldrd	r0, [r5, #48]	; 0x30
   27654:	bl	2a590 <__assert_fail@plt+0x17f9c>
   27658:	mov	r3, r0
   2765c:	movw	r1, #19184	; 0x4af0
   27660:	movt	r1, #5
   27664:	mov	r2, r6
   27668:	ldr	r0, [fp, #16]
   2766c:	bl	1233c <fprintf@plt>
   27670:	cmp	r0, #0
   27674:	blt	279a4 <__assert_fail@plt+0x153b0>
   27678:	ldr	r3, [r4, #28]
   2767c:	cmp	r3, r0
   27680:	strlt	r0, [r4, #28]
   27684:	mov	r0, #32
   27688:	ldr	r1, [fp, #16]
   2768c:	bl	124e0 <putc@plt>
   27690:	cmn	r0, #1
   27694:	beq	27a10 <__assert_fail@plt+0x1541c>
   27698:	add	r0, r5, #80	; 0x50
   2769c:	bl	1227c <localtime@plt>
   276a0:	subs	r8, r0, #0
   276a4:	beq	279ac <__assert_fail@plt+0x153b8>
   276a8:	ldr	r3, [fp, #4]
   276ac:	movw	r7, #19160	; 0x4ad8
   276b0:	movt	r7, #5
   276b4:	ldr	r2, [r5, #80]	; 0x50
   276b8:	sub	r3, r3, #15532032	; 0xed0000
   276bc:	sub	r3, r3, #19968	; 0x4e00
   276c0:	cmp	r3, r2
   276c4:	ble	277f0 <__assert_fail@plt+0x151fc>
   276c8:	mov	r4, #256	; 0x100
   276cc:	sub	r6, fp, #944	; 0x3b0
   276d0:	b	276e8 <__assert_fail@plt+0x150f4>
   276d4:	lsl	r4, r4, #1
   276d8:	add	r3, r4, #7
   276dc:	bic	r3, r3, #7
   276e0:	sub	sp, sp, r3
   276e4:	add	r6, sp, #16
   276e8:	mov	r3, r8
   276ec:	mov	r2, r7
   276f0:	mov	r1, r4
   276f4:	mov	r0, r6
   276f8:	bl	12264 <strftime@plt>
   276fc:	cmp	r0, #0
   27700:	beq	276d4 <__assert_fail@plt+0x150e0>
   27704:	mov	r2, r6
   27708:	movw	r1, #19212	; 0x4b0c
   2770c:	movt	r1, #5
   27710:	ldr	r0, [fp, #16]
   27714:	bl	1233c <fprintf@plt>
   27718:	cmp	r0, #0
   2771c:	movlt	r6, #900	; 0x384
   27720:	blt	27798 <__assert_fail@plt+0x151a4>
   27724:	ldr	r3, [fp, #12]
   27728:	cmp	r3, #0
   2772c:	bne	277d0 <__assert_fail@plt+0x151dc>
   27730:	mov	r0, r9
   27734:	ldr	r1, [fp, #16]
   27738:	bl	27270 <__assert_fail@plt+0x14c7c>
   2773c:	cmp	r0, #0
   27740:	moveq	r6, #1200	; 0x4b0
   27744:	beq	27798 <__assert_fail@plt+0x151a4>
   27748:	ldr	r3, [r5, #16]
   2774c:	and	r3, r3, #61440	; 0xf000
   27750:	cmp	r3, #40960	; 0xa000
   27754:	bne	27884 <__assert_fail@plt+0x15290>
   27758:	mov	r1, sl
   2775c:	ldr	r0, [fp, #-968]	; 0xfffffc38
   27760:	bl	282f0 <__assert_fail@plt+0x15cfc>
   27764:	subs	r4, r0, #0
   27768:	beq	27a78 <__assert_fail@plt+0x15484>
   2776c:	movw	r0, #19232	; 0x4b20
   27770:	movt	r0, #5
   27774:	ldr	r1, [fp, #16]
   27778:	bl	12588 <fputs@plt>
   2777c:	cmp	r0, #0
   27780:	bge	2784c <__assert_fail@plt+0x15258>
   27784:	mov	r0, r4
   27788:	movw	r6, #1300	; 0x514
   2778c:	bl	38b10 <__assert_fail@plt+0x2651c>
   27790:	b	27798 <__assert_fail@plt+0x151a4>
   27794:	mov	r6, #100	; 0x64
   27798:	bl	12348 <__errno_location@plt>
   2779c:	ldr	r4, [r0]
   277a0:	mov	r2, #5
   277a4:	movw	r1, #19240	; 0x4b28
   277a8:	movt	r1, #5
   277ac:	mov	r0, #0
   277b0:	bl	120b4 <dcgettext@plt>
   277b4:	mov	r2, r0
   277b8:	mov	r3, r6
   277bc:	mov	r0, #1
   277c0:	mov	r1, r4
   277c4:	bl	121ec <error@plt>
   277c8:	mov	r6, #200	; 0xc8
   277cc:	b	27798 <__assert_fail@plt+0x151a4>
   277d0:	movw	r1, #20016	; 0x4e30
   277d4:	movt	r1, #5
   277d8:	ldr	r0, [fp, #16]
   277dc:	mov	r2, r9
   277e0:	bl	1233c <fprintf@plt>
   277e4:	mvn	r0, r0
   277e8:	lsr	r0, r0, #31
   277ec:	b	2773c <__assert_fail@plt+0x15148>
   277f0:	ldr	r1, [fp, #4]
   277f4:	movw	r3, #19172	; 0x4ae4
   277f8:	movt	r3, #5
   277fc:	add	r1, r1, #3600	; 0xe10
   27800:	cmp	r2, r1
   27804:	movle	r7, r3
   27808:	b	276c8 <__assert_fail@plt+0x150d4>
   2780c:	mov	r6, #250	; 0xfa
   27810:	b	27798 <__assert_fail@plt+0x151a4>
   27814:	mov	r6, #400	; 0x190
   27818:	b	27798 <__assert_fail@plt+0x151a4>
   2781c:	movw	r1, #19188	; 0x4af4
   27820:	movt	r1, #5
   27824:	ldr	r0, [fp, #16]
   27828:	ldr	r2, [r5, #24]
   2782c:	bl	1233c <fprintf@plt>
   27830:	ldr	r3, [r4, #12]
   27834:	cmp	r3, r0
   27838:	strlt	r0, [r4, #12]
   2783c:	cmp	r0, #0
   27840:	bgt	275b8 <__assert_fail@plt+0x14fc4>
   27844:	movw	r6, #450	; 0x1c2
   27848:	b	27798 <__assert_fail@plt+0x151a4>
   2784c:	ldr	r3, [fp, #12]
   27850:	cmp	r3, #0
   27854:	beq	27aa8 <__assert_fail@plt+0x154b4>
   27858:	movw	r1, #20016	; 0x4e30
   2785c:	movt	r1, #5
   27860:	ldr	r0, [fp, #16]
   27864:	mov	r2, r4
   27868:	bl	1233c <fprintf@plt>
   2786c:	mvn	r0, r0
   27870:	lsr	r0, r0, #31
   27874:	cmp	r0, #0
   27878:	beq	27ab8 <__assert_fail@plt+0x154c4>
   2787c:	mov	r0, r4
   27880:	bl	38b10 <__assert_fail@plt+0x2651c>
   27884:	mov	r0, #10
   27888:	ldr	r1, [fp, #16]
   2788c:	bl	124e0 <putc@plt>
   27890:	cmn	r0, #1
   27894:	beq	27a18 <__assert_fail@plt+0x15424>
   27898:	sub	sp, fp, #32
   2789c:	ldrd	r4, [sp]
   278a0:	ldrd	r6, [sp, #8]
   278a4:	ldrd	r8, [sp, #16]
   278a8:	ldrd	sl, [sp, #24]
   278ac:	add	sp, sp, #32
   278b0:	pop	{pc}		; (ldr pc, [sp], #4)
   278b4:	ldr	ip, [r5, #32]
   278b8:	movw	r1, #19204	; 0x4b04
   278bc:	movt	r1, #5
   278c0:	ldr	r3, [r5, #36]	; 0x24
   278c4:	ldr	r0, [fp, #16]
   278c8:	ubfx	ip, ip, #8, #12
   278cc:	ldr	r2, [r4, #20]
   278d0:	bic	r3, r3, #4080	; 0xff0
   278d4:	bic	r3, r3, #15
   278d8:	orr	r3, r3, ip
   278dc:	bl	1233c <fprintf@plt>
   278e0:	cmp	r0, #0
   278e4:	movlt	r6, #600	; 0x258
   278e8:	blt	27798 <__assert_fail@plt+0x151a4>
   278ec:	ldr	r3, [r4, #20]
   278f0:	movw	r1, #9532	; 0x253c
   278f4:	movt	r1, #5
   278f8:	cmp	r0, r3
   278fc:	strgt	r0, [r4, #20]
   27900:	ldr	r0, [fp, #16]
   27904:	bl	1233c <fprintf@plt>
   27908:	cmp	r0, #0
   2790c:	blt	27aa0 <__assert_fail@plt+0x154ac>
   27910:	ldr	r3, [r5, #32]
   27914:	movw	r1, #19204	; 0x4b04
   27918:	movt	r1, #5
   2791c:	ldr	lr, [r5, #36]	; 0x24
   27920:	ldr	r0, [fp, #16]
   27924:	lsr	ip, r3, #12
   27928:	uxtb	r3, r3
   2792c:	ldr	r2, [r4, #24]
   27930:	orr	ip, ip, lr, lsl #20
   27934:	bic	ip, ip, #255	; 0xff
   27938:	orr	r3, ip, r3
   2793c:	bl	1233c <fprintf@plt>
   27940:	cmp	r0, #0
   27944:	blt	27a20 <__assert_fail@plt+0x1542c>
   27948:	ldr	r3, [r4, #24]
   2794c:	cmp	r3, r0
   27950:	strlt	r0, [r4, #24]
   27954:	b	27684 <__assert_fail@plt+0x15090>
   27958:	movw	r1, #19196	; 0x4afc
   2795c:	movt	r1, #5
   27960:	ldr	r2, [r4, #16]
   27964:	ldr	r0, [fp, #16]
   27968:	ldr	r3, [r5, #28]
   2796c:	bl	1233c <fprintf@plt>
   27970:	ldr	r3, [r4, #16]
   27974:	cmp	r3, r0
   27978:	strlt	r0, [r4, #16]
   2797c:	cmp	r0, #0
   27980:	movwlt	r6, #550	; 0x226
   27984:	blt	27798 <__assert_fail@plt+0x151a4>
   27988:	mov	r0, #32
   2798c:	ldr	r1, [fp, #16]
   27990:	bl	124e0 <putc@plt>
   27994:	cmn	r0, #1
   27998:	bne	27600 <__assert_fail@plt+0x1500c>
   2799c:	movw	r6, #525	; 0x20d
   279a0:	b	27798 <__assert_fail@plt+0x151a4>
   279a4:	mov	r6, #800	; 0x320
   279a8:	b	27798 <__assert_fail@plt+0x151a4>
   279ac:	ldr	r0, [r5, #80]	; 0x50
   279b0:	mov	r6, #1
   279b4:	mov	r7, #0
   279b8:	mov	r3, r8
   279bc:	sub	r2, fp, #688	; 0x2b0
   279c0:	cmp	r0, #0
   279c4:	asr	r1, r0, #31
   279c8:	blt	27a28 <__assert_fail@plt+0x15434>
   279cc:	strd	r6, [sp]
   279d0:	strd	r6, [sp, #8]
   279d4:	bl	2a590 <__assert_fail@plt+0x17f9c>
   279d8:	mov	r3, r0
   279dc:	movw	r1, #19224	; 0x4b18
   279e0:	movt	r1, #5
   279e4:	mov	r2, #12
   279e8:	ldr	r0, [fp, #16]
   279ec:	bl	1233c <fprintf@plt>
   279f0:	cmp	r0, #0
   279f4:	bge	27724 <__assert_fail@plt+0x15130>
   279f8:	movw	r6, #1100	; 0x44c
   279fc:	b	27798 <__assert_fail@plt+0x151a4>
   27a00:	movw	r6, #275	; 0x113
   27a04:	b	27798 <__assert_fail@plt+0x151a4>
   27a08:	mov	r6, #300	; 0x12c
   27a0c:	b	27798 <__assert_fail@plt+0x151a4>
   27a10:	movw	r6, #850	; 0x352
   27a14:	b	27798 <__assert_fail@plt+0x151a4>
   27a18:	movw	r6, #1400	; 0x578
   27a1c:	b	27798 <__assert_fail@plt+0x151a4>
   27a20:	movw	r6, #650	; 0x28a
   27a24:	b	27798 <__assert_fail@plt+0x151a4>
   27a28:	rsbs	r0, r0, #0
   27a2c:	strd	r6, [sp]
   27a30:	rsc	r1, r1, #0
   27a34:	strd	r6, [sp, #8]
   27a38:	bl	2a590 <__assert_fail@plt+0x17f9c>
   27a3c:	mov	r4, r0
   27a40:	bl	12300 <strlen@plt>
   27a44:	rsb	r2, r0, #12
   27a48:	movw	r3, #2964	; 0xb94
   27a4c:	movt	r3, #5
   27a50:	bic	r2, r2, r2, asr #31
   27a54:	movw	r1, #19216	; 0x4b10
   27a58:	movt	r1, #5
   27a5c:	str	r4, [sp]
   27a60:	ldr	r0, [fp, #16]
   27a64:	bl	1233c <fprintf@plt>
   27a68:	cmp	r0, #0
   27a6c:	bge	27724 <__assert_fail@plt+0x15130>
   27a70:	mov	r6, #1000	; 0x3e8
   27a74:	b	27798 <__assert_fail@plt+0x151a4>
   27a78:	bl	12348 <__errno_location@plt>
   27a7c:	mov	r3, r9
   27a80:	movw	r2, #20016	; 0x4e30
   27a84:	movt	r2, #5
   27a88:	ldr	r1, [r0]
   27a8c:	mov	r0, r4
   27a90:	bl	121ec <error@plt>
   27a94:	mov	r0, r4
   27a98:	bl	38b10 <__assert_fail@plt+0x2651c>
   27a9c:	b	27884 <__assert_fail@plt+0x15290>
   27aa0:	movw	r6, #625	; 0x271
   27aa4:	b	27798 <__assert_fail@plt+0x151a4>
   27aa8:	mov	r0, r4
   27aac:	ldr	r1, [fp, #16]
   27ab0:	bl	27270 <__assert_fail@plt+0x14c7c>
   27ab4:	b	27874 <__assert_fail@plt+0x15280>
   27ab8:	mov	r0, r4
   27abc:	movw	r6, #1350	; 0x546
   27ac0:	bl	38b10 <__assert_fail@plt+0x2651c>
   27ac4:	b	27798 <__assert_fail@plt+0x151a4>
   27ac8:	cmp	r2, #0
   27acc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   27ad0:	mov	r4, r3
   27ad4:	strd	r6, [sp, #8]
   27ad8:	strd	r8, [sp, #16]
   27adc:	str	lr, [sp, #24]
   27ae0:	sub	sp, sp, #8192	; 0x2000
   27ae4:	sub	sp, sp, #12
   27ae8:	beq	27bd0 <__assert_fail@plt+0x155dc>
   27aec:	mov	r5, r1
   27af0:	add	r2, sp, #8192	; 0x2000
   27af4:	add	r2, r2, #40	; 0x28
   27af8:	mov	r7, r0
   27afc:	mvn	r3, #0
   27b00:	add	r0, sp, #8
   27b04:	str	r5, [sp]
   27b08:	mov	r1, #8192	; 0x2000
   27b0c:	ldr	r2, [r2]
   27b10:	bl	33cbc <__assert_fail@plt+0x216c8>
   27b14:	cmp	r0, #8192	; 0x2000
   27b18:	mov	r6, r0
   27b1c:	bcs	27b6c <__assert_fail@plt+0x15578>
   27b20:	mov	r1, r0
   27b24:	add	r0, sp, #8
   27b28:	bl	27bec <__assert_fail@plt+0x155f8>
   27b2c:	mov	r3, r0
   27b30:	mov	ip, #0
   27b34:	add	r2, sp, #8
   27b38:	mov	r1, r4
   27b3c:	mov	r0, r7
   27b40:	strb	ip, [r2, r3]
   27b44:	bl	1233c <fprintf@plt>
   27b48:	mov	r4, r0
   27b4c:	mov	r0, r4
   27b50:	add	sp, sp, #8192	; 0x2000
   27b54:	add	sp, sp, #12
   27b58:	ldrd	r4, [sp]
   27b5c:	ldrd	r6, [sp, #8]
   27b60:	ldrd	r8, [sp, #16]
   27b64:	add	sp, sp, #24
   27b68:	pop	{pc}		; (ldr pc, [sp], #4)
   27b6c:	add	r9, r0, #1
   27b70:	mov	r0, r9
   27b74:	bl	36864 <__assert_fail@plt+0x24270>
   27b78:	add	r2, sp, #8192	; 0x2000
   27b7c:	mov	r8, r0
   27b80:	str	r5, [sp]
   27b84:	add	r2, r2, #40	; 0x28
   27b88:	mov	r1, r9
   27b8c:	mvn	r3, #0
   27b90:	ldr	r2, [r2]
   27b94:	bl	33cbc <__assert_fail@plt+0x216c8>
   27b98:	mov	r1, r6
   27b9c:	mov	r0, r8
   27ba0:	bl	27bec <__assert_fail@plt+0x155f8>
   27ba4:	mov	r3, r0
   27ba8:	mov	ip, #0
   27bac:	mov	r1, r4
   27bb0:	mov	r0, r7
   27bb4:	mov	r2, r8
   27bb8:	strb	ip, [r8, r3]
   27bbc:	bl	1233c <fprintf@plt>
   27bc0:	mov	r4, r0
   27bc4:	mov	r0, r8
   27bc8:	bl	38b10 <__assert_fail@plt+0x2651c>
   27bcc:	b	27b4c <__assert_fail@plt+0x15558>
   27bd0:	mov	r1, r3
   27bd4:	add	r3, sp, #8192	; 0x2000
   27bd8:	add	r3, r3, #40	; 0x28
   27bdc:	ldr	r2, [r3]
   27be0:	bl	1233c <fprintf@plt>
   27be4:	mov	r4, r0
   27be8:	b	27b4c <__assert_fail@plt+0x15558>
   27bec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   27bf0:	mov	r5, r1
   27bf4:	strd	r6, [sp, #8]
   27bf8:	str	r8, [sp, #16]
   27bfc:	strd	sl, [sp, #20]
   27c00:	mov	sl, r0
   27c04:	str	lr, [sp, #28]
   27c08:	sub	sp, sp, #16
   27c0c:	add	r7, sl, r5
   27c10:	bl	12198 <__ctype_get_mb_cur_max@plt>
   27c14:	cmp	r0, #1
   27c18:	bls	27e18 <__assert_fail@plt+0x15824>
   27c1c:	cmp	sl, r7
   27c20:	bcs	27e60 <__assert_fail@plt+0x1586c>
   27c24:	mov	r5, sl
   27c28:	mov	r4, sl
   27c2c:	mov	fp, #63	; 0x3f
   27c30:	b	27c5c <__assert_fail@plt+0x15668>
   27c34:	cmp	r3, #37	; 0x25
   27c38:	bcs	27c48 <__assert_fail@plt+0x15654>
   27c3c:	sub	r2, r3, #32
   27c40:	cmp	r2, #3
   27c44:	bhi	27c88 <__assert_fail@plt+0x15694>
   27c48:	add	r4, r4, #1
   27c4c:	strb	r3, [r5]
   27c50:	mov	r5, r6
   27c54:	cmp	r4, r7
   27c58:	bcs	27dc0 <__assert_fail@plt+0x157cc>
   27c5c:	ldrb	r3, [r4]
   27c60:	add	r6, r5, #1
   27c64:	cmp	r3, #63	; 0x3f
   27c68:	bls	27c34 <__assert_fail@plt+0x15640>
   27c6c:	cmp	r3, #65	; 0x41
   27c70:	bcc	27c88 <__assert_fail@plt+0x15694>
   27c74:	cmp	r3, #95	; 0x5f
   27c78:	bls	27c48 <__assert_fail@plt+0x15654>
   27c7c:	sub	r2, r3, #97	; 0x61
   27c80:	cmp	r2, #29
   27c84:	bls	27c48 <__assert_fail@plt+0x15654>
   27c88:	mov	r2, #0
   27c8c:	mov	r3, #0
   27c90:	strd	r2, [sp, #8]
   27c94:	b	27cc8 <__assert_fail@plt+0x156d4>
   27c98:	bl	11fa0 <wcwidth@plt>
   27c9c:	cmp	r0, #0
   27ca0:	addlt	r3, r4, r8
   27ca4:	bge	27d20 <__assert_fail@plt+0x1572c>
   27ca8:	mov	r4, r3
   27cac:	strb	fp, [r5]
   27cb0:	mov	r5, r6
   27cb4:	add	r0, sp, #8
   27cb8:	bl	12060 <mbsinit@plt>
   27cbc:	cmp	r0, #0
   27cc0:	bne	27c54 <__assert_fail@plt+0x15660>
   27cc4:	add	r6, r5, #1
   27cc8:	add	r3, sp, #8
   27ccc:	sub	r2, r7, r4
   27cd0:	mov	r1, r4
   27cd4:	add	r0, sp, #4
   27cd8:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   27cdc:	cmn	r0, #1
   27ce0:	mov	r8, r0
   27ce4:	beq	27de0 <__assert_fail@plt+0x157ec>
   27ce8:	cmn	r0, #2
   27cec:	beq	27df0 <__assert_fail@plt+0x157fc>
   27cf0:	cmp	r0, #0
   27cf4:	ldr	r0, [sp, #4]
   27cf8:	bne	27c98 <__assert_fail@plt+0x156a4>
   27cfc:	bl	11fa0 <wcwidth@plt>
   27d00:	cmp	r0, #0
   27d04:	add	r3, r4, #1
   27d08:	blt	27ca8 <__assert_fail@plt+0x156b4>
   27d0c:	ldrb	r2, [r4]
   27d10:	mov	r4, r3
   27d14:	strb	r2, [r5]
   27d18:	mov	r5, r6
   27d1c:	b	27cb4 <__assert_fail@plt+0x156c0>
   27d20:	add	r2, r5, #4
   27d24:	add	r1, r4, #4
   27d28:	cmp	r5, r1
   27d2c:	cmpcc	r4, r2
   27d30:	sub	r1, r8, #1
   27d34:	movcs	r2, #1
   27d38:	movcc	r2, #0
   27d3c:	cmp	r1, #7
   27d40:	movls	r2, #0
   27d44:	andhi	r2, r2, #1
   27d48:	cmp	r2, #0
   27d4c:	beq	27dfc <__assert_fail@plt+0x15808>
   27d50:	bic	ip, r8, #3
   27d54:	mov	r2, r5
   27d58:	add	ip, ip, r5
   27d5c:	mov	r1, r4
   27d60:	ldr	r0, [r1], #4
   27d64:	str	r0, [r2], #4
   27d68:	cmp	r2, ip
   27d6c:	bne	27d60 <__assert_fail@plt+0x1576c>
   27d70:	bic	r1, r8, #3
   27d74:	cmp	r1, r8
   27d78:	add	r2, r4, r1
   27d7c:	add	ip, r5, r1
   27d80:	sub	r0, r8, r1
   27d84:	beq	27db4 <__assert_fail@plt+0x157c0>
   27d88:	ldrb	lr, [r4, r1]
   27d8c:	cmp	r0, #1
   27d90:	strb	lr, [r5, r1]
   27d94:	beq	27e58 <__assert_fail@plt+0x15864>
   27d98:	ldrb	r1, [r2, #1]
   27d9c:	cmp	r0, #2
   27da0:	strb	r1, [ip, #1]
   27da4:	beq	27e58 <__assert_fail@plt+0x15864>
   27da8:	ldrb	r1, [r2, #2]
   27dac:	add	r2, r4, r8
   27db0:	strb	r1, [ip, #2]
   27db4:	mov	r4, r2
   27db8:	add	r5, r5, r8
   27dbc:	b	27cb4 <__assert_fail@plt+0x156c0>
   27dc0:	sub	r0, r5, sl
   27dc4:	add	sp, sp, #16
   27dc8:	ldrd	r4, [sp]
   27dcc:	ldrd	r6, [sp, #8]
   27dd0:	ldr	r8, [sp, #16]
   27dd4:	ldrd	sl, [sp, #20]
   27dd8:	add	sp, sp, #28
   27ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   27de0:	add	r4, r4, #1
   27de4:	strb	fp, [r5]
   27de8:	mov	r5, r6
   27dec:	b	27c54 <__assert_fail@plt+0x15660>
   27df0:	mov	r4, r7
   27df4:	strb	fp, [r5]
   27df8:	b	27de8 <__assert_fail@plt+0x157f4>
   27dfc:	sub	r1, r5, #1
   27e00:	add	r2, r4, r8
   27e04:	ldrb	r0, [r4], #1
   27e08:	cmp	r4, r2
   27e0c:	strb	r0, [r1, #1]!
   27e10:	bne	27e04 <__assert_fail@plt+0x15810>
   27e14:	b	27db4 <__assert_fail@plt+0x157c0>
   27e18:	cmp	sl, r7
   27e1c:	bcs	27e50 <__assert_fail@plt+0x1585c>
   27e20:	bl	122b8 <__ctype_b_loc@plt>
   27e24:	sub	sl, sl, #1
   27e28:	sub	r7, r7, #1
   27e2c:	mov	r1, #63	; 0x3f
   27e30:	ldrb	r3, [sl, #1]!
   27e34:	ldr	r2, [r0]
   27e38:	lsl	r3, r3, #1
   27e3c:	ldrh	r3, [r2, r3]
   27e40:	tst	r3, #16384	; 0x4000
   27e44:	strbeq	r1, [sl]
   27e48:	cmp	sl, r7
   27e4c:	bne	27e30 <__assert_fail@plt+0x1583c>
   27e50:	mov	r0, r5
   27e54:	b	27dc4 <__assert_fail@plt+0x157d0>
   27e58:	add	r2, r4, r8
   27e5c:	b	27db4 <__assert_fail@plt+0x157c0>
   27e60:	mov	r0, #0
   27e64:	b	27dc4 <__assert_fail@plt+0x157d0>
   27e68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27e6c:	movw	r4, #19288	; 0x4b58
   27e70:	movt	r4, #5
   27e74:	strd	r6, [sp, #8]
   27e78:	mov	r6, r4
   27e7c:	strd	r8, [sp, #16]
   27e80:	mov	r9, #0
   27e84:	mov	r8, r0
   27e88:	mov	r5, r9
   27e8c:	strd	sl, [sp, #24]
   27e90:	mov	sl, r4
   27e94:	str	lr, [sp, #32]
   27e98:	sub	sp, sp, #12
   27e9c:	ldr	r7, [r6]
   27ea0:	mov	r1, r8
   27ea4:	mov	r0, r7
   27ea8:	bl	11f40 <strcmp@plt>
   27eac:	cmp	r0, #0
   27eb0:	beq	27f9c <__assert_fail@plt+0x159a8>
   27eb4:	mov	r0, r7
   27eb8:	add	r5, r5, #1
   27ebc:	bl	35724 <__assert_fail@plt+0x23130>
   27ec0:	bl	12300 <strlen@plt>
   27ec4:	add	r0, r0, #2
   27ec8:	cmp	r5, #13
   27ecc:	add	r9, r9, r0
   27ed0:	add	r6, r6, #12
   27ed4:	bne	27e9c <__assert_fail@plt+0x158a8>
   27ed8:	add	r0, r9, #1
   27edc:	movw	sl, #9532	; 0x253c
   27ee0:	movt	sl, #5
   27ee4:	movw	r9, #20016	; 0x4e30
   27ee8:	movt	r9, #5
   27eec:	mov	r5, #0
   27ef0:	bl	36864 <__assert_fail@plt+0x24270>
   27ef4:	mov	fp, r0
   27ef8:	mov	r6, r0
   27efc:	b	27f24 <__assert_fail@plt+0x15930>
   27f00:	ldr	r0, [r4]
   27f04:	bl	35724 <__assert_fail@plt+0x23130>
   27f08:	mov	r2, r0
   27f0c:	mov	r1, r9
   27f10:	mov	r0, r6
   27f14:	bl	124b0 <sprintf@plt>
   27f18:	add	r6, r6, r0
   27f1c:	add	r5, r5, #1
   27f20:	add	r4, r4, #12
   27f24:	cmp	r5, #0
   27f28:	beq	27f00 <__assert_fail@plt+0x1590c>
   27f2c:	ldrh	r2, [sl]
   27f30:	mov	r7, r6
   27f34:	ldrb	r3, [sl, #2]
   27f38:	ldr	r0, [r4]
   27f3c:	strh	r2, [r6]
   27f40:	strb	r3, [r7, #2]!
   27f44:	bl	35724 <__assert_fail@plt+0x23130>
   27f48:	mov	r2, r0
   27f4c:	mov	r1, r9
   27f50:	mov	r0, r7
   27f54:	bl	124b0 <sprintf@plt>
   27f58:	cmp	r5, #12
   27f5c:	add	r6, r7, r0
   27f60:	bne	27f1c <__assert_fail@plt+0x15928>
   27f64:	mov	r2, #5
   27f68:	movw	r1, #19444	; 0x4bf4
   27f6c:	movt	r1, #5
   27f70:	mov	r0, #0
   27f74:	bl	120b4 <dcgettext@plt>
   27f78:	mov	r4, r0
   27f7c:	mov	r0, r8
   27f80:	bl	35724 <__assert_fail@plt+0x23130>
   27f84:	mov	r3, r0
   27f88:	mov	r2, r4
   27f8c:	str	fp, [sp]
   27f90:	mov	r1, #0
   27f94:	mov	r0, #1
   27f98:	bl	121ec <error@plt>
   27f9c:	add	r5, r5, r5, lsl #1
   27fa0:	add	r5, sl, r5, lsl #2
   27fa4:	ldr	r0, [r5, #8]
   27fa8:	add	sp, sp, #12
   27fac:	ldrd	r4, [sp]
   27fb0:	ldrd	r6, [sp, #8]
   27fb4:	ldrd	r8, [sp, #16]
   27fb8:	ldrd	sl, [sp, #24]
   27fbc:	add	sp, sp, #32
   27fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   27fc4:	cmp	r0, #12
   27fc8:	bhi	27fe0 <__assert_fail@plt+0x159ec>
   27fcc:	add	r0, r0, r0, lsl #1
   27fd0:	movw	r3, #19288	; 0x4b58
   27fd4:	movt	r3, #5
   27fd8:	ldr	r0, [r3, r0, lsl #2]
   27fdc:	bx	lr
   27fe0:	mov	r0, #0
   27fe4:	bx	lr
   27fe8:	cmp	r0, #12
   27fec:	bhi	28008 <__assert_fail@plt+0x15a14>
   27ff0:	add	r0, r0, r0, lsl #1
   27ff4:	movw	r3, #19288	; 0x4b58
   27ff8:	movt	r3, #5
   27ffc:	add	r0, r3, r0, lsl #2
   28000:	ldr	r0, [r0, #8]
   28004:	bx	lr
   28008:	mvn	r0, #0
   2800c:	bx	lr
   28010:	cmp	r0, #12
   28014:	bhi	28030 <__assert_fail@plt+0x15a3c>
   28018:	add	r0, r0, r0, lsl #1
   2801c:	movw	r3, #19288	; 0x4b58
   28020:	movt	r3, #5
   28024:	add	r0, r3, r0, lsl #2
   28028:	ldr	r0, [r0, #4]
   2802c:	bx	lr
   28030:	mov	r0, #0
   28034:	bx	lr
   28038:	cmp	r0, #12
   2803c:	bhi	2809c <__assert_fail@plt+0x15aa8>
   28040:	add	r2, r0, r0, lsl #1
   28044:	movw	r3, #19288	; 0x4b58
   28048:	movt	r3, #5
   2804c:	cmp	r0, #0
   28050:	push	{lr}		; (str lr, [sp, #-4]!)
   28054:	add	r2, r3, r2, lsl #2
   28058:	ldr	lr, [r2, #8]
   2805c:	beq	2808c <__assert_fail@plt+0x15a98>
   28060:	mov	r2, #0
   28064:	ldr	ip, [r3, #4]
   28068:	tst	r1, ip
   2806c:	beq	2807c <__assert_fail@plt+0x15a88>
   28070:	ldr	ip, [r3, #8]
   28074:	cmp	ip, lr
   28078:	beq	28094 <__assert_fail@plt+0x15aa0>
   2807c:	add	r2, r2, #1
   28080:	add	r3, r3, #12
   28084:	cmp	r0, r2
   28088:	bne	28064 <__assert_fail@plt+0x15a70>
   2808c:	mvn	r0, #0
   28090:	pop	{pc}		; (ldr pc, [sp], #4)
   28094:	mov	r0, r2
   28098:	pop	{pc}		; (ldr pc, [sp], #4)
   2809c:	mvn	r0, #0
   280a0:	bx	lr
   280a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   280a8:	mov	r4, r0
   280ac:	strd	r6, [sp, #8]
   280b0:	mov	r7, r1
   280b4:	mov	r6, #0
   280b8:	str	r8, [sp, #16]
   280bc:	str	lr, [sp, #20]
   280c0:	sub	sp, sp, #16
   280c4:	bl	12348 <__errno_location@plt>
   280c8:	mov	r5, r0
   280cc:	mov	r2, #10
   280d0:	mov	r0, r4
   280d4:	add	r1, sp, #12
   280d8:	str	r6, [r5]
   280dc:	bl	11f4c <strtol@plt>
   280e0:	sub	r3, r0, #-2147483647	; 0x80000001
   280e4:	cmn	r3, #3
   280e8:	bls	28104 <__assert_fail@plt+0x15b10>
   280ec:	ldr	r1, [r5]
   280f0:	movw	r2, #20016	; 0x4e30
   280f4:	movt	r2, #5
   280f8:	mov	r3, r4
   280fc:	mov	r0, #1
   28100:	bl	121ec <error@plt>
   28104:	ldr	r3, [sp, #12]
   28108:	ldrb	r8, [r3]
   2810c:	cmp	r8, #0
   28110:	bne	28134 <__assert_fail@plt+0x15b40>
   28114:	cmp	r4, r3
   28118:	beq	2818c <__assert_fail@plt+0x15b98>
   2811c:	add	sp, sp, #16
   28120:	ldrd	r4, [sp]
   28124:	ldrd	r6, [sp, #8]
   28128:	ldr	r8, [sp, #16]
   2812c:	add	sp, sp, #20
   28130:	pop	{pc}		; (ldr pc, [sp], #4)
   28134:	mov	r2, #5
   28138:	mov	r0, r6
   2813c:	ldr	r5, [r5]
   28140:	movw	r1, #19628	; 0x4cac
   28144:	movt	r1, #5
   28148:	bl	120b4 <dcgettext@plt>
   2814c:	mov	r8, r0
   28150:	mov	r1, r7
   28154:	ldr	r2, [sp, #12]
   28158:	mov	r0, r6
   2815c:	bl	3431c <__assert_fail@plt+0x21d28>
   28160:	mov	r6, r0
   28164:	mov	r2, r4
   28168:	mov	r1, r7
   2816c:	mov	r0, #1
   28170:	bl	3431c <__assert_fail@plt+0x21d28>
   28174:	mov	r3, r6
   28178:	mov	r2, r8
   2817c:	str	r0, [sp]
   28180:	mov	r1, r5
   28184:	mov	r0, #1
   28188:	bl	121ec <error@plt>
   2818c:	ldr	r5, [r5]
   28190:	mov	r2, #5
   28194:	movw	r1, #19656	; 0x4cc8
   28198:	movt	r1, #5
   2819c:	mov	r0, r8
   281a0:	bl	120b4 <dcgettext@plt>
   281a4:	mov	r6, r0
   281a8:	mov	r2, r4
   281ac:	mov	r1, r7
   281b0:	mov	r0, r8
   281b4:	bl	3431c <__assert_fail@plt+0x21d28>
   281b8:	mov	r3, r0
   281bc:	mov	r2, r6
   281c0:	mov	r1, r5
   281c4:	mov	r0, #1
   281c8:	b	28100 <__assert_fail@plt+0x15b0c>
   281cc:	cmp	r2, #0
   281d0:	strd	r4, [sp, #-16]!
   281d4:	str	r6, [sp, #8]
   281d8:	str	lr, [sp, #12]
   281dc:	ldr	r5, [sp, #16]
   281e0:	beq	28240 <__assert_fail@plt+0x15c4c>
   281e4:	mov	r2, #0
   281e8:	str	r2, [r3]
   281ec:	str	r2, [r5]
   281f0:	ldr	r4, [r3]
   281f4:	ldrb	r3, [r1]
   281f8:	add	r4, r0, r4
   281fc:	cmp	r3, #0
   28200:	bne	28228 <__assert_fail@plt+0x15c34>
   28204:	mov	r0, r4
   28208:	bl	12300 <strlen@plt>
   2820c:	mov	r4, r0
   28210:	mov	r0, #1
   28214:	str	r4, [r5]
   28218:	ldrd	r4, [sp]
   2821c:	ldr	r6, [sp, #8]
   28220:	add	sp, sp, #12
   28224:	pop	{pc}		; (ldr pc, [sp], #4)
   28228:	mov	r0, r4
   2822c:	bl	12528 <strpbrk@plt>
   28230:	cmp	r0, #0
   28234:	subne	r4, r0, r4
   28238:	bne	28210 <__assert_fail@plt+0x15c1c>
   2823c:	b	28204 <__assert_fail@plt+0x15c10>
   28240:	ldr	r2, [r5]
   28244:	ldr	r4, [r3]
   28248:	add	r4, r4, r2
   2824c:	str	r4, [r3]
   28250:	ldrb	r2, [r0, r4]
   28254:	cmp	r2, #0
   28258:	moveq	r0, r2
   2825c:	beq	28218 <__assert_fail@plt+0x15c24>
   28260:	add	r4, r4, #1
   28264:	str	r4, [r3]
   28268:	add	r4, r0, r4
   2826c:	ldrb	r3, [r1]
   28270:	cmp	r3, #0
   28274:	beq	28204 <__assert_fail@plt+0x15c10>
   28278:	b	28228 <__assert_fail@plt+0x15c34>
   2827c:	mov	r2, #5
   28280:	strd	r4, [sp, #-12]!
   28284:	mov	r5, r1
   28288:	mov	r4, r0
   2828c:	movw	r1, #19680	; 0x4ce0
   28290:	movt	r1, #5
   28294:	mov	r0, #0
   28298:	str	lr, [sp, #8]
   2829c:	sub	sp, sp, #20
   282a0:	bl	120b4 <dcgettext@plt>
   282a4:	movw	r1, #19928	; 0x4dd8
   282a8:	movt	r1, #5
   282ac:	movw	r2, #19952	; 0x4df0
   282b0:	movt	r2, #5
   282b4:	movw	ip, #19088	; 0x4a90
   282b8:	movt	ip, #5
   282bc:	mov	r3, r5
   282c0:	str	ip, [sp]
   282c4:	str	r2, [sp, #4]
   282c8:	movw	r2, #19888	; 0x4db0
   282cc:	movt	r2, #5
   282d0:	str	r1, [sp, #8]
   282d4:	mov	r1, r0
   282d8:	mov	r0, r4
   282dc:	bl	1233c <fprintf@plt>
   282e0:	add	sp, sp, #20
   282e4:	ldrd	r4, [sp]
   282e8:	add	sp, sp, #8
   282ec:	pop	{pc}		; (ldr pc, [sp], #4)
   282f0:	mov	ip, #0
   282f4:	movw	r2, #8792	; 0x2258
   282f8:	movt	r2, #1
   282fc:	push	{lr}		; (str lr, [sp, #-4]!)
   28300:	sub	sp, sp, #12
   28304:	mov	r3, ip
   28308:	str	ip, [sp]
   2830c:	str	r2, [sp, #4]
   28310:	mov	r2, ip
   28314:	bl	284a8 <__assert_fail@plt+0x15eb4>
   28318:	add	sp, sp, #12
   2831c:	pop	{pc}		; (ldr pc, [sp], #4)
   28320:	str	r4, [sp, #-8]!
   28324:	mov	r4, r0
   28328:	mov	r0, #24
   2832c:	str	lr, [sp, #4]
   28330:	bl	3b49c <__assert_fail@plt+0x28ea8>
   28334:	cmp	r0, #0
   28338:	beq	2834c <__assert_fail@plt+0x15d58>
   2833c:	mov	r3, #0
   28340:	str	r3, [r0]
   28344:	str	r4, [r0, #16]
   28348:	str	r4, [r0, #20]
   2834c:	ldr	r4, [sp]
   28350:	add	sp, sp, #4
   28354:	pop	{pc}		; (ldr pc, [sp], #4)
   28358:	str	r4, [sp, #-8]!
   2835c:	mov	r4, r0
   28360:	mov	r0, #24
   28364:	str	lr, [sp, #4]
   28368:	bl	3b49c <__assert_fail@plt+0x28ea8>
   2836c:	cmp	r0, #0
   28370:	beq	2838c <__assert_fail@plt+0x15d98>
   28374:	mov	r3, #0
   28378:	str	r4, [r0]
   2837c:	str	r3, [r0, #4]
   28380:	str	r3, [r0, #8]
   28384:	str	r3, [r0, #12]
   28388:	str	r3, [r0, #16]
   2838c:	ldr	r4, [sp]
   28390:	add	sp, sp, #4
   28394:	pop	{pc}		; (ldr pc, [sp], #4)
   28398:	ldr	r3, [r0]
   2839c:	cmp	r3, #0
   283a0:	beq	283fc <__assert_fail@plt+0x15e08>
   283a4:	mov	r2, #0
   283a8:	strd	r4, [sp, #-16]!
   283ac:	mov	r5, r1
   283b0:	mov	r4, r0
   283b4:	add	r1, r0, #12
   283b8:	str	r6, [sp, #8]
   283bc:	add	r0, r0, #8
   283c0:	str	lr, [sp, #12]
   283c4:	bl	1254c <getdelim@plt>
   283c8:	cmp	r0, #0
   283cc:	blt	2842c <__assert_fail@plt+0x15e38>
   283d0:	mov	r3, #1
   283d4:	ldr	r2, [r4, #4]
   283d8:	str	r3, [r5]
   283dc:	ldr	r3, [r4, #8]
   283e0:	add	r2, r2, #1
   283e4:	str	r2, [r4, #4]
   283e8:	ldrd	r4, [sp]
   283ec:	mov	r0, r3
   283f0:	ldr	r6, [sp, #8]
   283f4:	add	sp, sp, #12
   283f8:	pop	{pc}		; (ldr pc, [sp], #4)
   283fc:	ldr	r2, [r0, #20]
   28400:	ldr	r3, [r2]
   28404:	cmp	r3, #0
   28408:	moveq	r2, #2
   2840c:	streq	r2, [r1]
   28410:	beq	28424 <__assert_fail@plt+0x15e30>
   28414:	add	r2, r2, #4
   28418:	mov	ip, #1
   2841c:	str	ip, [r1]
   28420:	str	r2, [r0, #20]
   28424:	mov	r0, r3
   28428:	bx	lr
   2842c:	ldr	r0, [r4]
   28430:	bl	122dc <feof@plt>
   28434:	cmp	r0, #0
   28438:	mov	r3, #0
   2843c:	movne	r2, #2
   28440:	moveq	r2, #4
   28444:	str	r2, [r5]
   28448:	b	283e8 <__assert_fail@plt+0x15df4>
   2844c:	ldr	r3, [r0]
   28450:	cmp	r3, #0
   28454:	beq	28460 <__assert_fail@plt+0x15e6c>
   28458:	ldr	r0, [r0, #4]
   2845c:	bx	lr
   28460:	ldr	r3, [r0, #16]
   28464:	ldr	r0, [r0, #20]
   28468:	sub	r0, r0, r3
   2846c:	asr	r0, r0, #2
   28470:	bx	lr
   28474:	ldr	r3, [r0]
   28478:	str	r4, [sp, #-8]!
   2847c:	mov	r4, r0
   28480:	str	lr, [sp, #4]
   28484:	cmp	r3, #0
   28488:	beq	28494 <__assert_fail@plt+0x15ea0>
   2848c:	ldr	r0, [r0, #8]
   28490:	bl	38b10 <__assert_fail@plt+0x2651c>
   28494:	mov	r0, r4
   28498:	ldr	r4, [sp]
   2849c:	ldr	lr, [sp, #4]
   284a0:	add	sp, sp, #8
   284a4:	b	38b10 <__assert_fail@plt+0x2651c>
   284a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   284ac:	movw	ip, #26196	; 0x6654
   284b0:	movt	ip, #5
   284b4:	strd	r6, [sp, #8]
   284b8:	strd	r8, [sp, #16]
   284bc:	mov	r8, r0
   284c0:	mov	r9, r1
   284c4:	strd	sl, [sp, #24]
   284c8:	str	lr, [sp, #32]
   284cc:	sub	sp, sp, #1024	; 0x400
   284d0:	sub	sp, sp, #4
   284d4:	ldr	r6, [sp, #1064]	; 0x428
   284d8:	ldr	sl, [sp, #1068]	; 0x42c
   284dc:	cmp	r6, #0
   284e0:	moveq	r6, ip
   284e4:	subs	r7, r2, #0
   284e8:	beq	285a4 <__assert_fail@plt+0x15fb0>
   284ec:	mvn	r4, #-2147483648	; 0x80000000
   284f0:	cmp	r3, r4
   284f4:	movcc	r4, r3
   284f8:	mov	r5, r7
   284fc:	mov	r3, r4
   28500:	mov	r2, r5
   28504:	mov	r1, r9
   28508:	mov	r0, r8
   2850c:	blx	sl
   28510:	subs	r3, r0, #0
   28514:	mov	r0, r5
   28518:	blt	285b0 <__assert_fail@plt+0x15fbc>
   2851c:	cmp	r3, r4
   28520:	blt	285e0 <__assert_fail@plt+0x15fec>
   28524:	cmp	r7, r5
   28528:	beq	28534 <__assert_fail@plt+0x15f40>
   2852c:	ldr	r3, [r6, #8]
   28530:	blx	r3
   28534:	cmn	r4, #-1073741822	; 0xc0000002
   28538:	lsl	r3, r4, #1
   2853c:	bgt	28624 <__assert_fail@plt+0x16030>
   28540:	add	r4, r3, #1
   28544:	ldr	r3, [r6]
   28548:	mov	r0, r4
   2854c:	mov	fp, r4
   28550:	blx	r3
   28554:	subs	r5, r0, #0
   28558:	bne	284fc <__assert_fail@plt+0x15f08>
   2855c:	ldr	r3, [r6, #12]
   28560:	cmp	r3, #0
   28564:	beq	28570 <__assert_fail@plt+0x15f7c>
   28568:	mov	r0, fp
   2856c:	blx	r3
   28570:	bl	12348 <__errno_location@plt>
   28574:	mov	r5, #0
   28578:	mov	r3, #12
   2857c:	str	r3, [r0]
   28580:	mov	r0, r5
   28584:	add	sp, sp, #1024	; 0x400
   28588:	add	sp, sp, #4
   2858c:	ldrd	r4, [sp]
   28590:	ldrd	r6, [sp, #8]
   28594:	ldrd	r8, [sp, #16]
   28598:	ldrd	sl, [sp, #24]
   2859c:	add	sp, sp, #32
   285a0:	pop	{pc}		; (ldr pc, [sp], #4)
   285a4:	mov	r4, #1024	; 0x400
   285a8:	mov	r7, sp
   285ac:	b	284f8 <__assert_fail@plt+0x15f04>
   285b0:	cmp	r7, r5
   285b4:	moveq	r5, #0
   285b8:	beq	28580 <__assert_fail@plt+0x15f8c>
   285bc:	bl	12348 <__errno_location@plt>
   285c0:	mov	r4, r0
   285c4:	ldr	r3, [r6, #8]
   285c8:	mov	r0, r5
   285cc:	mov	r5, #0
   285d0:	ldr	r6, [r4]
   285d4:	blx	r3
   285d8:	str	r6, [r4]
   285dc:	b	28580 <__assert_fail@plt+0x15f8c>
   285e0:	mov	r2, #0
   285e4:	mov	r1, sp
   285e8:	cmp	r5, r1
   285ec:	add	r8, r3, #1
   285f0:	strb	r2, [r5, r3]
   285f4:	beq	28638 <__assert_fail@plt+0x16044>
   285f8:	cmp	r7, r5
   285fc:	cmpne	r8, r4
   28600:	bge	28580 <__assert_fail@plt+0x15f8c>
   28604:	ldr	r3, [r6, #4]
   28608:	cmp	r3, #0
   2860c:	beq	28580 <__assert_fail@plt+0x15f8c>
   28610:	mov	r1, r8
   28614:	blx	r3
   28618:	cmp	r0, #0
   2861c:	movne	r5, r0
   28620:	b	28580 <__assert_fail@plt+0x15f8c>
   28624:	bl	12348 <__errno_location@plt>
   28628:	mov	r3, #36	; 0x24
   2862c:	mov	r5, #0
   28630:	str	r3, [r0]
   28634:	b	28580 <__assert_fail@plt+0x15f8c>
   28638:	mov	r0, r8
   2863c:	ldr	r3, [r6]
   28640:	mov	fp, r8
   28644:	blx	r3
   28648:	cmp	r0, #0
   2864c:	beq	2855c <__assert_fail@plt+0x15f68>
   28650:	mov	r1, r5
   28654:	mov	r2, r8
   28658:	bl	12024 <memcpy@plt>
   2865c:	mov	r5, r0
   28660:	b	28580 <__assert_fail@plt+0x15f8c>
   28664:	mov	r2, #0
   28668:	strd	r4, [sp, #-16]!
   2866c:	mov	r4, r1
   28670:	mov	r1, #1
   28674:	mov	r5, r0
   28678:	str	r6, [sp, #8]
   2867c:	str	lr, [sp, #12]
   28680:	bl	388c8 <__assert_fail@plt+0x262d4>
   28684:	cmp	r0, #0
   28688:	blt	286d0 <__assert_fail@plt+0x160dc>
   2868c:	cmp	r4, #0
   28690:	biceq	r2, r0, #1
   28694:	orrne	r2, r0, #1
   28698:	cmp	r2, r0
   2869c:	moveq	r0, #0
   286a0:	beq	286c0 <__assert_fail@plt+0x160cc>
   286a4:	mov	r0, r5
   286a8:	mov	r1, #2
   286ac:	bl	388c8 <__assert_fail@plt+0x262d4>
   286b0:	cmn	r0, #1
   286b4:	movne	r0, #0
   286b8:	moveq	r0, #1
   286bc:	rsb	r0, r0, #0
   286c0:	ldrd	r4, [sp]
   286c4:	ldr	r6, [sp, #8]
   286c8:	add	sp, sp, #12
   286cc:	pop	{pc}		; (ldr pc, [sp], #4)
   286d0:	mvn	r0, #0
   286d4:	b	286c0 <__assert_fail@plt+0x160cc>
   286d8:	mov	r2, #0
   286dc:	movw	r1, #1030	; 0x406
   286e0:	b	388c8 <__assert_fail@plt+0x262d4>
   286e4:	movw	r3, #31980	; 0x7cec
   286e8:	movt	r3, #6
   286ec:	str	r0, [r3]
   286f0:	bx	lr
   286f4:	movw	r3, #31980	; 0x7cec
   286f8:	movt	r3, #6
   286fc:	strb	r0, [r3, #4]
   28700:	bx	lr
   28704:	movw	r3, #30036	; 0x7554
   28708:	movt	r3, #6
   2870c:	strd	r4, [sp, #-16]!
   28710:	ldr	r0, [r3]
   28714:	str	r6, [sp, #8]
   28718:	str	lr, [sp, #12]
   2871c:	sub	sp, sp, #8
   28720:	bl	4f828 <__assert_fail@plt+0x3d234>
   28724:	cmp	r0, #0
   28728:	beq	28754 <__assert_fail@plt+0x16160>
   2872c:	movw	r4, #31980	; 0x7cec
   28730:	movt	r4, #6
   28734:	ldrb	r6, [r4, #4]
   28738:	bl	12348 <__errno_location@plt>
   2873c:	mov	r5, r0
   28740:	cmp	r6, #0
   28744:	beq	28780 <__assert_fail@plt+0x1618c>
   28748:	ldr	r3, [r0]
   2874c:	cmp	r3, #32
   28750:	bne	28780 <__assert_fail@plt+0x1618c>
   28754:	movw	r3, #30024	; 0x7548
   28758:	movt	r3, #6
   2875c:	ldr	r0, [r3]
   28760:	bl	4f828 <__assert_fail@plt+0x3d234>
   28764:	cmp	r0, #0
   28768:	bne	287c8 <__assert_fail@plt+0x161d4>
   2876c:	add	sp, sp, #8
   28770:	ldrd	r4, [sp]
   28774:	ldr	r6, [sp, #8]
   28778:	add	sp, sp, #12
   2877c:	pop	{pc}		; (ldr pc, [sp], #4)
   28780:	movw	r1, #20000	; 0x4e20
   28784:	movt	r1, #5
   28788:	mov	r2, #5
   2878c:	mov	r0, #0
   28790:	bl	120b4 <dcgettext@plt>
   28794:	mov	r6, r0
   28798:	ldr	r0, [r4]
   2879c:	cmp	r0, #0
   287a0:	beq	287d8 <__assert_fail@plt+0x161e4>
   287a4:	ldr	r4, [r5]
   287a8:	bl	34ba8 <__assert_fail@plt+0x225b4>
   287ac:	mov	r3, r0
   287b0:	movw	r2, #20012	; 0x4e2c
   287b4:	movt	r2, #5
   287b8:	mov	r0, #0
   287bc:	str	r6, [sp]
   287c0:	mov	r1, r4
   287c4:	bl	121ec <error@plt>
   287c8:	movw	r3, #29936	; 0x74f0
   287cc:	movt	r3, #6
   287d0:	ldr	r0, [r3]
   287d4:	bl	12018 <_exit@plt>
   287d8:	mov	r3, r6
   287dc:	movw	r2, #20016	; 0x4e30
   287e0:	movt	r2, #5
   287e4:	ldr	r1, [r5]
   287e8:	bl	121ec <error@plt>
   287ec:	b	287c8 <__assert_fail@plt+0x161d4>
   287f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   287f4:	strd	r6, [sp, #8]
   287f8:	str	r8, [sp, #16]
   287fc:	str	lr, [sp, #20]
   28800:	bl	12204 <opendir@plt>
   28804:	subs	r4, r0, #0
   28808:	beq	28818 <__assert_fail@plt+0x16224>
   2880c:	bl	124ec <dirfd@plt>
   28810:	cmp	r0, #2
   28814:	bls	28830 <__assert_fail@plt+0x1623c>
   28818:	mov	r0, r4
   2881c:	ldrd	r4, [sp]
   28820:	ldrd	r6, [sp, #8]
   28824:	ldr	r8, [sp, #16]
   28828:	add	sp, sp, #20
   2882c:	pop	{pc}		; (ldr pc, [sp], #4)
   28830:	mov	r2, #3
   28834:	movw	r1, #1030	; 0x406
   28838:	bl	388c8 <__assert_fail@plt+0x262d4>
   2883c:	mov	r6, r0
   28840:	bl	12348 <__errno_location@plt>
   28844:	cmp	r6, #0
   28848:	mov	r5, r0
   2884c:	bge	2886c <__assert_fail@plt+0x16278>
   28850:	ldr	r7, [r0]
   28854:	mov	r8, #0
   28858:	mov	r0, r4
   2885c:	mov	r4, r8
   28860:	bl	125c4 <closedir@plt>
   28864:	str	r7, [r5]
   28868:	b	28818 <__assert_fail@plt+0x16224>
   2886c:	mov	r0, r6
   28870:	bl	124c8 <fdopendir@plt>
   28874:	subs	r8, r0, #0
   28878:	ldr	r7, [r5]
   2887c:	bne	28858 <__assert_fail@plt+0x16264>
   28880:	mov	r0, r6
   28884:	bl	125ac <close@plt>
   28888:	b	28858 <__assert_fail@plt+0x16264>
   2888c:	strd	r4, [sp, #-16]!
   28890:	mov	r5, r0
   28894:	str	r6, [sp, #8]
   28898:	str	lr, [sp, #12]
   2889c:	bl	4f754 <__assert_fail@plt+0x3d160>
   288a0:	ldrb	r3, [r0]
   288a4:	cmp	r3, #0
   288a8:	beq	288f0 <__assert_fail@plt+0x162fc>
   288ac:	mov	r4, r0
   288b0:	bl	4f7a4 <__assert_fail@plt+0x3d1b0>
   288b4:	ldrb	r3, [r4, r0]
   288b8:	cmp	r3, #47	; 0x2f
   288bc:	addeq	r0, r0, #1
   288c0:	mov	r5, r0
   288c4:	add	r0, r0, #1
   288c8:	bl	36888 <__assert_fail@plt+0x24294>
   288cc:	mov	r2, r5
   288d0:	mov	r1, r4
   288d4:	bl	12024 <memcpy@plt>
   288d8:	mov	r2, #0
   288dc:	strb	r2, [r0, r5]
   288e0:	ldrd	r4, [sp]
   288e4:	ldr	r6, [sp, #8]
   288e8:	add	sp, sp, #12
   288ec:	pop	{pc}		; (ldr pc, [sp], #4)
   288f0:	mov	r0, r5
   288f4:	mov	r4, r5
   288f8:	bl	4f7a4 <__assert_fail@plt+0x3d1b0>
   288fc:	mov	r5, r0
   28900:	b	288c4 <__assert_fail@plt+0x162d0>
   28904:	strd	r4, [sp, #-16]!
   28908:	mov	r4, r0
   2890c:	str	r6, [sp, #8]
   28910:	str	lr, [sp, #12]
   28914:	ldrb	ip, [r0]
   28918:	sub	r5, ip, #47	; 0x2f
   2891c:	clz	r5, r5
   28920:	bl	4f754 <__assert_fail@plt+0x3d160>
   28924:	lsr	r5, r5, #5
   28928:	sub	r0, r0, r4
   2892c:	cmp	r0, r5
   28930:	bls	2898c <__assert_fail@plt+0x16398>
   28934:	sub	r3, r0, #1
   28938:	ldrb	r2, [r4, r3]
   2893c:	cmp	r2, #47	; 0x2f
   28940:	bne	2898c <__assert_fail@plt+0x16398>
   28944:	cmp	r3, r5
   28948:	bls	2899c <__assert_fail@plt+0x163a8>
   2894c:	add	r2, r4, r0
   28950:	ldrb	r2, [r2, #-2]
   28954:	cmp	r2, #47	; 0x2f
   28958:	bne	2899c <__assert_fail@plt+0x163a8>
   2895c:	sub	r0, r0, #3
   28960:	sub	ip, r4, #1
   28964:	add	r3, r4, r0
   28968:	add	ip, ip, r5
   2896c:	rsb	r2, r4, #1
   28970:	b	28980 <__assert_fail@plt+0x1638c>
   28974:	ldrb	r1, [r3], #-1
   28978:	cmp	r1, #47	; 0x2f
   2897c:	bne	2898c <__assert_fail@plt+0x16398>
   28980:	cmp	r3, ip
   28984:	add	r0, r2, r3
   28988:	bne	28974 <__assert_fail@plt+0x16380>
   2898c:	ldrd	r4, [sp]
   28990:	ldr	r6, [sp, #8]
   28994:	add	sp, sp, #12
   28998:	pop	{pc}		; (ldr pc, [sp], #4)
   2899c:	mov	r0, r3
   289a0:	b	2898c <__assert_fail@plt+0x16398>
   289a4:	strd	r4, [sp, #-16]!
   289a8:	mov	r5, r0
   289ac:	str	r6, [sp, #8]
   289b0:	str	lr, [sp, #12]
   289b4:	ldrb	r6, [r0]
   289b8:	bl	4f754 <__assert_fail@plt+0x3d160>
   289bc:	sub	r4, r0, r5
   289c0:	sub	r6, r6, #47	; 0x2f
   289c4:	clz	r6, r6
   289c8:	lsr	r6, r6, #5
   289cc:	cmp	r4, r6
   289d0:	bls	28a2c <__assert_fail@plt+0x16438>
   289d4:	sub	r3, r4, #1
   289d8:	ldrb	r2, [r5, r3]
   289dc:	cmp	r2, #47	; 0x2f
   289e0:	bne	28a84 <__assert_fail@plt+0x16490>
   289e4:	cmp	r6, r3
   289e8:	bcs	28ab4 <__assert_fail@plt+0x164c0>
   289ec:	add	r2, r5, r4
   289f0:	ldrb	r2, [r2, #-2]
   289f4:	cmp	r2, #47	; 0x2f
   289f8:	bne	28a80 <__assert_fail@plt+0x1648c>
   289fc:	sub	r4, r4, #3
   28a00:	sub	r2, r5, #1
   28a04:	add	r3, r5, r4
   28a08:	add	r6, r2, r6
   28a0c:	rsb	r1, r5, #1
   28a10:	b	28a20 <__assert_fail@plt+0x1642c>
   28a14:	ldrb	r2, [r3], #-1
   28a18:	cmp	r2, #47	; 0x2f
   28a1c:	bne	28a84 <__assert_fail@plt+0x16490>
   28a20:	cmp	r3, r6
   28a24:	add	r4, r1, r3
   28a28:	bne	28a14 <__assert_fail@plt+0x16420>
   28a2c:	add	r0, r4, #1
   28a30:	cmp	r4, #0
   28a34:	addeq	r0, r0, #1
   28a38:	bl	3b49c <__assert_fail@plt+0x28ea8>
   28a3c:	subs	r6, r0, #0
   28a40:	beq	28aac <__assert_fail@plt+0x164b8>
   28a44:	mov	r1, r5
   28a48:	mov	r2, r4
   28a4c:	bl	12024 <memcpy@plt>
   28a50:	cmp	r4, #0
   28a54:	bne	28a64 <__assert_fail@plt+0x16470>
   28a58:	mov	r3, #46	; 0x2e
   28a5c:	mov	r4, #1
   28a60:	strb	r3, [r6]
   28a64:	mov	r3, #0
   28a68:	strb	r3, [r6, r4]
   28a6c:	mov	r0, r6
   28a70:	ldrd	r4, [sp]
   28a74:	ldr	r6, [sp, #8]
   28a78:	add	sp, sp, #12
   28a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   28a80:	mov	r4, r3
   28a84:	add	r0, r4, #1
   28a88:	cmp	r4, #0
   28a8c:	addeq	r0, r0, #1
   28a90:	bl	3b49c <__assert_fail@plt+0x28ea8>
   28a94:	subs	r6, r0, #0
   28a98:	beq	28aac <__assert_fail@plt+0x164b8>
   28a9c:	mov	r1, r5
   28aa0:	mov	r2, r4
   28aa4:	bl	12024 <memcpy@plt>
   28aa8:	b	28a64 <__assert_fail@plt+0x16470>
   28aac:	mov	r6, #0
   28ab0:	b	28a6c <__assert_fail@plt+0x16478>
   28ab4:	mov	r4, r3
   28ab8:	b	28a2c <__assert_fail@plt+0x16438>
   28abc:	str	r4, [sp, #-8]!
   28ac0:	mov	r4, r0
   28ac4:	str	lr, [sp, #4]
   28ac8:	bl	4f754 <__assert_fail@plt+0x3d160>
   28acc:	ldrb	r3, [r0]
   28ad0:	cmp	r3, #0
   28ad4:	movne	r4, r0
   28ad8:	mov	r0, r4
   28adc:	bl	4f7a4 <__assert_fail@plt+0x3d1b0>
   28ae0:	ldrb	r3, [r4, r0]
   28ae4:	mov	r2, #0
   28ae8:	strb	r2, [r4, r0]
   28aec:	ldr	r4, [sp]
   28af0:	add	sp, sp, #4
   28af4:	subs	r0, r3, r2
   28af8:	movne	r0, #1
   28afc:	pop	{pc}		; (ldr pc, [sp], #4)
   28b00:	push	{r1, r2, r3}
   28b04:	push	{lr}		; (str lr, [sp, #-4]!)
   28b08:	sub	sp, sp, #8
   28b0c:	ldr	r1, [sp, #12]
   28b10:	ands	r2, r1, #64	; 0x40
   28b14:	bne	28b30 <__assert_fail@plt+0x1653c>
   28b18:	bl	1221c <open64@plt>
   28b1c:	bl	36114 <__assert_fail@plt+0x23b20>
   28b20:	add	sp, sp, #8
   28b24:	pop	{lr}		; (ldr lr, [sp], #4)
   28b28:	add	sp, sp, #12
   28b2c:	bx	lr
   28b30:	add	r3, sp, #16
   28b34:	ldr	r2, [sp, #16]
   28b38:	str	r3, [sp, #4]
   28b3c:	b	28b18 <__assert_fail@plt+0x16524>
   28b40:	and	r3, r0, #61440	; 0xf000
   28b44:	cmp	r3, #32768	; 0x8000
   28b48:	moveq	r2, #45	; 0x2d
   28b4c:	beq	28b98 <__assert_fail@plt+0x165a4>
   28b50:	cmp	r3, #16384	; 0x4000
   28b54:	moveq	r2, #100	; 0x64
   28b58:	beq	28b98 <__assert_fail@plt+0x165a4>
   28b5c:	cmp	r3, #24576	; 0x6000
   28b60:	moveq	r2, #98	; 0x62
   28b64:	beq	28b98 <__assert_fail@plt+0x165a4>
   28b68:	cmp	r3, #8192	; 0x2000
   28b6c:	moveq	r2, #99	; 0x63
   28b70:	beq	28b98 <__assert_fail@plt+0x165a4>
   28b74:	cmp	r3, #40960	; 0xa000
   28b78:	moveq	r2, #108	; 0x6c
   28b7c:	beq	28b98 <__assert_fail@plt+0x165a4>
   28b80:	cmp	r3, #4096	; 0x1000
   28b84:	moveq	r2, #112	; 0x70
   28b88:	beq	28b98 <__assert_fail@plt+0x165a4>
   28b8c:	cmp	r3, #49152	; 0xc000
   28b90:	moveq	r2, #115	; 0x73
   28b94:	movne	r2, #63	; 0x3f
   28b98:	tst	r0, #256	; 0x100
   28b9c:	strb	r2, [r1]
   28ba0:	and	r3, r0, #64	; 0x40
   28ba4:	movne	ip, #114	; 0x72
   28ba8:	moveq	ip, #45	; 0x2d
   28bac:	tst	r0, #128	; 0x80
   28bb0:	movne	r2, #119	; 0x77
   28bb4:	moveq	r2, #45	; 0x2d
   28bb8:	strb	ip, [r1, #1]
   28bbc:	tst	r0, #2048	; 0x800
   28bc0:	strb	r2, [r1, #2]
   28bc4:	beq	28c64 <__assert_fail@plt+0x16670>
   28bc8:	cmp	r3, #0
   28bcc:	movne	r2, #115	; 0x73
   28bd0:	moveq	r2, #83	; 0x53
   28bd4:	tst	r0, #32
   28bd8:	strb	r2, [r1, #3]
   28bdc:	and	r3, r0, #8
   28be0:	movne	ip, #114	; 0x72
   28be4:	moveq	ip, #45	; 0x2d
   28be8:	tst	r0, #16
   28bec:	movne	r2, #119	; 0x77
   28bf0:	moveq	r2, #45	; 0x2d
   28bf4:	strb	ip, [r1, #4]
   28bf8:	tst	r0, #1024	; 0x400
   28bfc:	strb	r2, [r1, #5]
   28c00:	beq	28c74 <__assert_fail@plt+0x16680>
   28c04:	cmp	r3, #0
   28c08:	movne	r2, #115	; 0x73
   28c0c:	moveq	r2, #83	; 0x53
   28c10:	tst	r0, #4
   28c14:	strb	r2, [r1, #6]
   28c18:	and	r3, r0, #1
   28c1c:	movne	ip, #114	; 0x72
   28c20:	moveq	ip, #45	; 0x2d
   28c24:	tst	r0, #2
   28c28:	movne	r2, #119	; 0x77
   28c2c:	moveq	r2, #45	; 0x2d
   28c30:	strb	ip, [r1, #7]
   28c34:	tst	r0, #512	; 0x200
   28c38:	strb	r2, [r1, #8]
   28c3c:	beq	28c84 <__assert_fail@plt+0x16690>
   28c40:	cmp	r3, #0
   28c44:	movne	r0, #116	; 0x74
   28c48:	moveq	r0, #84	; 0x54
   28c4c:	mov	r2, #32
   28c50:	mov	r3, #0
   28c54:	strb	r0, [r1, #9]
   28c58:	strb	r2, [r1, #10]
   28c5c:	strb	r3, [r1, #11]
   28c60:	bx	lr
   28c64:	cmp	r3, #0
   28c68:	movne	r2, #120	; 0x78
   28c6c:	moveq	r2, #45	; 0x2d
   28c70:	b	28bd4 <__assert_fail@plt+0x165e0>
   28c74:	cmp	r3, #0
   28c78:	movne	r2, #120	; 0x78
   28c7c:	moveq	r2, #45	; 0x2d
   28c80:	b	28c10 <__assert_fail@plt+0x1661c>
   28c84:	cmp	r3, #0
   28c88:	movne	r0, #120	; 0x78
   28c8c:	moveq	r0, #45	; 0x2d
   28c90:	b	28c4c <__assert_fail@plt+0x16658>
   28c94:	ldr	r3, [r0, #16]
   28c98:	and	r2, r3, #61440	; 0xf000
   28c9c:	cmp	r2, #32768	; 0x8000
   28ca0:	moveq	r0, #45	; 0x2d
   28ca4:	beq	28cf0 <__assert_fail@plt+0x166fc>
   28ca8:	cmp	r2, #16384	; 0x4000
   28cac:	moveq	r0, #100	; 0x64
   28cb0:	beq	28cf0 <__assert_fail@plt+0x166fc>
   28cb4:	cmp	r2, #24576	; 0x6000
   28cb8:	moveq	r0, #98	; 0x62
   28cbc:	beq	28cf0 <__assert_fail@plt+0x166fc>
   28cc0:	cmp	r2, #8192	; 0x2000
   28cc4:	moveq	r0, #99	; 0x63
   28cc8:	beq	28cf0 <__assert_fail@plt+0x166fc>
   28ccc:	cmp	r2, #40960	; 0xa000
   28cd0:	moveq	r0, #108	; 0x6c
   28cd4:	beq	28cf0 <__assert_fail@plt+0x166fc>
   28cd8:	cmp	r2, #4096	; 0x1000
   28cdc:	moveq	r0, #112	; 0x70
   28ce0:	beq	28cf0 <__assert_fail@plt+0x166fc>
   28ce4:	cmp	r2, #49152	; 0xc000
   28ce8:	moveq	r0, #115	; 0x73
   28cec:	movne	r0, #63	; 0x3f
   28cf0:	tst	r3, #256	; 0x100
   28cf4:	strb	r0, [r1]
   28cf8:	and	r2, r3, #64	; 0x40
   28cfc:	movne	ip, #114	; 0x72
   28d00:	moveq	ip, #45	; 0x2d
   28d04:	tst	r3, #128	; 0x80
   28d08:	movne	r0, #119	; 0x77
   28d0c:	moveq	r0, #45	; 0x2d
   28d10:	strb	ip, [r1, #1]
   28d14:	tst	r3, #2048	; 0x800
   28d18:	strb	r0, [r1, #2]
   28d1c:	beq	28dbc <__assert_fail@plt+0x167c8>
   28d20:	cmp	r2, #0
   28d24:	movne	r0, #115	; 0x73
   28d28:	moveq	r0, #83	; 0x53
   28d2c:	tst	r3, #32
   28d30:	strb	r0, [r1, #3]
   28d34:	and	r2, r3, #8
   28d38:	movne	ip, #114	; 0x72
   28d3c:	moveq	ip, #45	; 0x2d
   28d40:	tst	r3, #16
   28d44:	movne	r0, #119	; 0x77
   28d48:	moveq	r0, #45	; 0x2d
   28d4c:	strb	ip, [r1, #4]
   28d50:	tst	r3, #1024	; 0x400
   28d54:	strb	r0, [r1, #5]
   28d58:	beq	28dcc <__assert_fail@plt+0x167d8>
   28d5c:	cmp	r2, #0
   28d60:	movne	r0, #115	; 0x73
   28d64:	moveq	r0, #83	; 0x53
   28d68:	tst	r3, #4
   28d6c:	strb	r0, [r1, #6]
   28d70:	and	r2, r3, #1
   28d74:	movne	ip, #114	; 0x72
   28d78:	moveq	ip, #45	; 0x2d
   28d7c:	tst	r3, #2
   28d80:	movne	r0, #119	; 0x77
   28d84:	moveq	r0, #45	; 0x2d
   28d88:	strb	ip, [r1, #7]
   28d8c:	tst	r3, #512	; 0x200
   28d90:	strb	r0, [r1, #8]
   28d94:	beq	28ddc <__assert_fail@plt+0x167e8>
   28d98:	cmp	r2, #0
   28d9c:	movne	r0, #116	; 0x74
   28da0:	moveq	r0, #84	; 0x54
   28da4:	mov	r2, #32
   28da8:	mov	r3, #0
   28dac:	strb	r0, [r1, #9]
   28db0:	strb	r2, [r1, #10]
   28db4:	strb	r3, [r1, #11]
   28db8:	bx	lr
   28dbc:	cmp	r2, #0
   28dc0:	movne	r0, #120	; 0x78
   28dc4:	moveq	r0, #45	; 0x2d
   28dc8:	b	28d2c <__assert_fail@plt+0x16738>
   28dcc:	cmp	r2, #0
   28dd0:	movne	r0, #120	; 0x78
   28dd4:	moveq	r0, #45	; 0x2d
   28dd8:	b	28d68 <__assert_fail@plt+0x16774>
   28ddc:	cmp	r2, #0
   28de0:	movne	r0, #120	; 0x78
   28de4:	moveq	r0, #45	; 0x2d
   28de8:	b	28da4 <__assert_fail@plt+0x167b0>
   28dec:	strd	r4, [sp, #-16]!
   28df0:	mov	r5, r1
   28df4:	str	r6, [sp, #8]
   28df8:	str	lr, [sp, #12]
   28dfc:	bl	12504 <fopen64@plt>
   28e00:	subs	r4, r0, #0
   28e04:	beq	28e14 <__assert_fail@plt+0x16820>
   28e08:	bl	123c0 <fileno@plt>
   28e0c:	cmp	r0, #2
   28e10:	bls	28e28 <__assert_fail@plt+0x16834>
   28e14:	mov	r0, r4
   28e18:	ldrd	r4, [sp]
   28e1c:	ldr	r6, [sp, #8]
   28e20:	add	sp, sp, #12
   28e24:	pop	{pc}		; (ldr pc, [sp], #4)
   28e28:	bl	36108 <__assert_fail@plt+0x23b14>
   28e2c:	subs	r6, r0, #0
   28e30:	blt	28e78 <__assert_fail@plt+0x16884>
   28e34:	mov	r0, r4
   28e38:	bl	123fc <fclose@plt>
   28e3c:	cmp	r0, #0
   28e40:	bne	28e58 <__assert_fail@plt+0x16864>
   28e44:	mov	r1, r5
   28e48:	mov	r0, r6
   28e4c:	bl	11eb0 <fdopen@plt>
   28e50:	subs	r4, r0, #0
   28e54:	bne	28e14 <__assert_fail@plt+0x16820>
   28e58:	bl	12348 <__errno_location@plt>
   28e5c:	mov	r5, r0
   28e60:	mov	r0, r6
   28e64:	ldr	r6, [r5]
   28e68:	mov	r4, #0
   28e6c:	bl	125ac <close@plt>
   28e70:	str	r6, [r5]
   28e74:	b	28e14 <__assert_fail@plt+0x16820>
   28e78:	bl	12348 <__errno_location@plt>
   28e7c:	mov	r5, r0
   28e80:	mov	r0, r4
   28e84:	ldr	r6, [r5]
   28e88:	mov	r4, #0
   28e8c:	bl	123fc <fclose@plt>
   28e90:	str	r6, [r5]
   28e94:	b	28e14 <__assert_fail@plt+0x16820>
   28e98:	ror	r0, r0, #3
   28e9c:	udiv	r3, r0, r1
   28ea0:	mls	r0, r3, r1, r0
   28ea4:	bx	lr
   28ea8:	sub	r0, r1, r0
   28eac:	clz	r0, r0
   28eb0:	lsr	r0, r0, #5
   28eb4:	bx	lr
   28eb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28ebc:	mov	r5, r1
   28ec0:	strd	r6, [sp, #8]
   28ec4:	mov	r6, r0
   28ec8:	mov	r7, r3
   28ecc:	mov	r0, r1
   28ed0:	strd	r8, [sp, #16]
   28ed4:	strd	sl, [sp, #24]
   28ed8:	mov	fp, r2
   28edc:	str	lr, [sp, #32]
   28ee0:	sub	sp, sp, #4
   28ee4:	ldr	r1, [r6, #8]
   28ee8:	ldr	r3, [r6, #24]
   28eec:	blx	r3
   28ef0:	ldr	r3, [r6, #8]
   28ef4:	cmp	r0, r3
   28ef8:	bcs	29014 <__assert_fail@plt+0x16a20>
   28efc:	ldr	r8, [r6]
   28f00:	lsl	r9, r0, #3
   28f04:	mov	sl, r0
   28f08:	add	r4, r8, r9
   28f0c:	str	r4, [fp]
   28f10:	ldr	r1, [r8, r0, lsl #3]
   28f14:	cmp	r1, #0
   28f18:	beq	2900c <__assert_fail@plt+0x16a18>
   28f1c:	cmp	r1, r5
   28f20:	beq	28fd4 <__assert_fail@plt+0x169e0>
   28f24:	mov	r0, r5
   28f28:	ldr	r3, [r6, #28]
   28f2c:	blx	r3
   28f30:	cmp	r0, #0
   28f34:	bne	28fd0 <__assert_fail@plt+0x169dc>
   28f38:	ldr	r3, [r4, #4]
   28f3c:	cmp	r3, #0
   28f40:	beq	2900c <__assert_fail@plt+0x16a18>
   28f44:	ldr	r1, [r3]
   28f48:	cmp	r5, r1
   28f4c:	bne	28f70 <__assert_fail@plt+0x1697c>
   28f50:	b	28f8c <__assert_fail@plt+0x16998>
   28f54:	ldr	r4, [r4, #4]
   28f58:	ldr	r3, [r4, #4]
   28f5c:	cmp	r3, #0
   28f60:	beq	2900c <__assert_fail@plt+0x16a18>
   28f64:	ldr	r1, [r3]
   28f68:	cmp	r1, r5
   28f6c:	beq	28f8c <__assert_fail@plt+0x16998>
   28f70:	mov	r0, r5
   28f74:	ldr	r3, [r6, #28]
   28f78:	blx	r3
   28f7c:	cmp	r0, #0
   28f80:	beq	28f54 <__assert_fail@plt+0x16960>
   28f84:	ldr	r3, [r4, #4]
   28f88:	ldr	r1, [r3]
   28f8c:	cmp	r7, #0
   28f90:	beq	28fb0 <__assert_fail@plt+0x169bc>
   28f94:	ldr	r0, [r3, #4]
   28f98:	mov	r2, #0
   28f9c:	str	r0, [r4, #4]
   28fa0:	str	r2, [r3]
   28fa4:	ldr	r2, [r6, #36]	; 0x24
   28fa8:	str	r2, [r3, #4]
   28fac:	str	r3, [r6, #36]	; 0x24
   28fb0:	mov	r0, r1
   28fb4:	add	sp, sp, #4
   28fb8:	ldrd	r4, [sp]
   28fbc:	ldrd	r6, [sp, #8]
   28fc0:	ldrd	r8, [sp, #16]
   28fc4:	ldrd	sl, [sp, #24]
   28fc8:	add	sp, sp, #32
   28fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   28fd0:	ldr	r1, [r8, sl, lsl #3]
   28fd4:	cmp	r7, #0
   28fd8:	beq	28fb0 <__assert_fail@plt+0x169bc>
   28fdc:	ldr	r0, [r4, #4]
   28fe0:	cmp	r0, #0
   28fe4:	streq	r0, [r8, sl, lsl #3]
   28fe8:	beq	28fb0 <__assert_fail@plt+0x169bc>
   28fec:	ldrd	r2, [r0]
   28ff0:	mov	ip, #0
   28ff4:	strd	r2, [r8, r9]
   28ff8:	str	ip, [r0]
   28ffc:	ldr	r3, [r6, #36]	; 0x24
   29000:	str	r3, [r0, #4]
   29004:	str	r0, [r6, #36]	; 0x24
   29008:	b	28fb0 <__assert_fail@plt+0x169bc>
   2900c:	mov	r1, #0
   29010:	b	28fb0 <__assert_fail@plt+0x169bc>
   29014:	bl	125a0 <abort@plt>
   29018:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2901c:	ldr	r3, [r1, #4]
   29020:	strd	r6, [sp, #8]
   29024:	ldr	r6, [r1]
   29028:	strd	r8, [sp, #16]
   2902c:	str	sl, [sp, #24]
   29030:	str	lr, [sp, #28]
   29034:	cmp	r6, r3
   29038:	bcs	29118 <__assert_fail@plt+0x16b24>
   2903c:	mov	r8, r2
   29040:	mov	r5, r0
   29044:	mov	r7, r1
   29048:	add	r6, r6, #8
   2904c:	mov	r9, #0
   29050:	b	29060 <__assert_fail@plt+0x16a6c>
   29054:	cmp	r3, r6
   29058:	add	r6, r6, #8
   2905c:	bls	29118 <__assert_fail@plt+0x16b24>
   29060:	ldr	sl, [r6, #-8]
   29064:	cmp	sl, #0
   29068:	beq	29054 <__assert_fail@plt+0x16a60>
   2906c:	ldr	r4, [r6, #-4]
   29070:	cmp	r4, #0
   29074:	beq	290fc <__assert_fail@plt+0x16b08>
   29078:	ldr	r1, [r5, #8]
   2907c:	b	29098 <__assert_fail@plt+0x16aa4>
   29080:	ldr	r3, [ip, #4]
   29084:	cmp	r2, #0
   29088:	str	r3, [r4, #4]
   2908c:	str	r4, [ip, #4]
   29090:	mov	r4, r2
   29094:	beq	290f8 <__assert_fail@plt+0x16b04>
   29098:	ldr	sl, [r4]
   2909c:	ldr	r3, [r5, #24]
   290a0:	mov	r0, sl
   290a4:	blx	r3
   290a8:	ldr	r1, [r5, #8]
   290ac:	cmp	r0, r1
   290b0:	bcs	291cc <__assert_fail@plt+0x16bd8>
   290b4:	ldr	r3, [r5]
   290b8:	ldr	r2, [r4, #4]
   290bc:	ldr	lr, [r3, r0, lsl #3]
   290c0:	add	ip, r3, r0, lsl #3
   290c4:	cmp	lr, #0
   290c8:	bne	29080 <__assert_fail@plt+0x16a8c>
   290cc:	ldr	ip, [r5, #12]
   290d0:	cmp	r2, #0
   290d4:	str	sl, [r3, r0, lsl #3]
   290d8:	add	ip, ip, #1
   290dc:	str	ip, [r5, #12]
   290e0:	str	lr, [r4]
   290e4:	ldr	r3, [r5, #36]	; 0x24
   290e8:	str	r3, [r4, #4]
   290ec:	str	r4, [r5, #36]	; 0x24
   290f0:	mov	r4, r2
   290f4:	bne	29098 <__assert_fail@plt+0x16aa4>
   290f8:	ldr	sl, [r6, #-8]
   290fc:	cmp	r8, #0
   29100:	str	r9, [r6, #-4]
   29104:	beq	29134 <__assert_fail@plt+0x16b40>
   29108:	ldr	r3, [r7, #4]
   2910c:	cmp	r3, r6
   29110:	add	r6, r6, #8
   29114:	bhi	29060 <__assert_fail@plt+0x16a6c>
   29118:	mov	r0, #1
   2911c:	ldrd	r4, [sp]
   29120:	ldrd	r6, [sp, #8]
   29124:	ldrd	r8, [sp, #16]
   29128:	ldr	sl, [sp, #24]
   2912c:	add	sp, sp, #28
   29130:	pop	{pc}		; (ldr pc, [sp], #4)
   29134:	mov	r0, sl
   29138:	ldr	r1, [r5, #8]
   2913c:	ldr	r3, [r5, #24]
   29140:	blx	r3
   29144:	ldr	r3, [r5, #8]
   29148:	cmp	r0, r3
   2914c:	bcs	291cc <__assert_fail@plt+0x16bd8>
   29150:	ldr	r3, [r5]
   29154:	ldr	r2, [r3, r0, lsl #3]
   29158:	add	r4, r3, r0, lsl #3
   2915c:	cmp	r2, #0
   29160:	beq	291a0 <__assert_fail@plt+0x16bac>
   29164:	ldr	r0, [r5, #36]	; 0x24
   29168:	cmp	r0, #0
   2916c:	beq	291b4 <__assert_fail@plt+0x16bc0>
   29170:	ldr	r3, [r0, #4]
   29174:	str	r3, [r5, #36]	; 0x24
   29178:	ldr	r3, [r4, #4]
   2917c:	str	sl, [r0]
   29180:	str	r3, [r0, #4]
   29184:	str	r0, [r4, #4]
   29188:	ldr	r2, [r7, #12]
   2918c:	str	r9, [r6, #-8]
   29190:	ldr	r3, [r7, #4]
   29194:	sub	r2, r2, #1
   29198:	str	r2, [r7, #12]
   2919c:	b	29054 <__assert_fail@plt+0x16a60>
   291a0:	ldr	r2, [r5, #12]
   291a4:	str	sl, [r3, r0, lsl #3]
   291a8:	add	r2, r2, #1
   291ac:	str	r2, [r5, #12]
   291b0:	b	29188 <__assert_fail@plt+0x16b94>
   291b4:	mov	r0, #8
   291b8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   291bc:	cmp	r0, #0
   291c0:	bne	29178 <__assert_fail@plt+0x16b84>
   291c4:	mov	r0, r8
   291c8:	b	2911c <__assert_fail@plt+0x16b28>
   291cc:	bl	125a0 <abort@plt>
   291d0:	ldr	r0, [r0, #8]
   291d4:	bx	lr
   291d8:	ldr	r0, [r0, #12]
   291dc:	bx	lr
   291e0:	ldr	r0, [r0, #16]
   291e4:	bx	lr
   291e8:	ldm	r0, {r1, r3}
   291ec:	cmp	r1, r3
   291f0:	bcs	29264 <__assert_fail@plt+0x16c70>
   291f4:	sub	ip, r3, #1
   291f8:	add	r3, r1, #16
   291fc:	sub	ip, ip, r1
   29200:	mov	r0, #0
   29204:	bic	ip, ip, #7
   29208:	add	r1, r1, #8
   2920c:	add	ip, ip, r3
   29210:	b	29220 <__assert_fail@plt+0x16c2c>
   29214:	add	r1, r1, #8
   29218:	cmp	r1, ip
   2921c:	beq	29260 <__assert_fail@plt+0x16c6c>
   29220:	ldr	r3, [r1, #-8]
   29224:	cmp	r3, #0
   29228:	beq	29214 <__assert_fail@plt+0x16c20>
   2922c:	ldr	r3, [r1, #-4]
   29230:	mov	r2, #1
   29234:	cmp	r3, #0
   29238:	beq	2924c <__assert_fail@plt+0x16c58>
   2923c:	ldr	r3, [r3, #4]
   29240:	add	r2, r2, #1
   29244:	cmp	r3, #0
   29248:	bne	2923c <__assert_fail@plt+0x16c48>
   2924c:	cmp	r0, r2
   29250:	add	r1, r1, #8
   29254:	movcc	r0, r2
   29258:	cmp	r1, ip
   2925c:	bne	29220 <__assert_fail@plt+0x16c2c>
   29260:	bx	lr
   29264:	mov	r0, #0
   29268:	bx	lr
   2926c:	ldm	r0, {r1, r3}
   29270:	push	{lr}		; (str lr, [sp, #-4]!)
   29274:	cmp	r1, r3
   29278:	bcs	2930c <__assert_fail@plt+0x16d18>
   2927c:	sub	ip, r3, #1
   29280:	mov	r2, #0
   29284:	sub	ip, ip, r1
   29288:	add	r3, r1, #16
   2928c:	bic	ip, ip, #7
   29290:	add	r1, r1, #8
   29294:	add	ip, ip, r3
   29298:	mov	lr, r2
   2929c:	b	292ac <__assert_fail@plt+0x16cb8>
   292a0:	add	r1, r1, #8
   292a4:	cmp	r1, ip
   292a8:	beq	292e8 <__assert_fail@plt+0x16cf4>
   292ac:	ldr	r3, [r1, #-8]
   292b0:	cmp	r3, #0
   292b4:	beq	292a0 <__assert_fail@plt+0x16cac>
   292b8:	ldr	r3, [r1, #-4]
   292bc:	add	lr, lr, #1
   292c0:	add	r2, r2, #1
   292c4:	cmp	r3, #0
   292c8:	beq	292a0 <__assert_fail@plt+0x16cac>
   292cc:	ldr	r3, [r3, #4]
   292d0:	add	r2, r2, #1
   292d4:	cmp	r3, #0
   292d8:	bne	292cc <__assert_fail@plt+0x16cd8>
   292dc:	add	r1, r1, #8
   292e0:	cmp	r1, ip
   292e4:	bne	292ac <__assert_fail@plt+0x16cb8>
   292e8:	ldr	r3, [r0, #12]
   292ec:	cmp	r3, lr
   292f0:	movne	r0, #0
   292f4:	bne	29308 <__assert_fail@plt+0x16d14>
   292f8:	ldr	r0, [r0, #16]
   292fc:	sub	r0, r0, r2
   29300:	clz	r0, r0
   29304:	lsr	r0, r0, #5
   29308:	pop	{pc}		; (ldr pc, [sp], #4)
   2930c:	mov	r2, #0
   29310:	mov	lr, r2
   29314:	b	292e8 <__assert_fail@plt+0x16cf4>
   29318:	strd	r4, [sp, #-20]!	; 0xffffffec
   2931c:	mov	r4, r1
   29320:	ldr	r3, [r0]
   29324:	ldr	r1, [r0, #4]
   29328:	ldr	r2, [r0, #16]
   2932c:	strd	r6, [sp, #8]
   29330:	str	lr, [sp, #16]
   29334:	sub	sp, sp, #12
   29338:	cmp	r3, r1
   2933c:	ldrd	r6, [r0, #8]
   29340:	bcs	29430 <__assert_fail@plt+0x16e3c>
   29344:	sub	ip, r1, #1
   29348:	add	r1, r3, #16
   2934c:	sub	ip, ip, r3
   29350:	add	r0, r3, #8
   29354:	bic	ip, ip, #7
   29358:	mov	r5, #0
   2935c:	add	ip, ip, r1
   29360:	b	29370 <__assert_fail@plt+0x16d7c>
   29364:	add	r0, r0, #8
   29368:	cmp	r0, ip
   2936c:	beq	293b0 <__assert_fail@plt+0x16dbc>
   29370:	ldr	r3, [r0, #-8]
   29374:	cmp	r3, #0
   29378:	beq	29364 <__assert_fail@plt+0x16d70>
   2937c:	ldr	r3, [r0, #-4]
   29380:	mov	r1, #1
   29384:	cmp	r3, #0
   29388:	beq	2939c <__assert_fail@plt+0x16da8>
   2938c:	ldr	r3, [r3, #4]
   29390:	add	r1, r1, #1
   29394:	cmp	r3, #0
   29398:	bne	2938c <__assert_fail@plt+0x16d98>
   2939c:	cmp	r5, r1
   293a0:	add	r0, r0, #8
   293a4:	movcc	r5, r1
   293a8:	cmp	r0, ip
   293ac:	bne	29370 <__assert_fail@plt+0x16d7c>
   293b0:	mov	r0, r4
   293b4:	movw	r1, #20040	; 0x4e48
   293b8:	movt	r1, #5
   293bc:	bl	1233c <fprintf@plt>
   293c0:	mov	r2, r6
   293c4:	mov	r0, r4
   293c8:	movw	r1, #20064	; 0x4e60
   293cc:	movt	r1, #5
   293d0:	bl	1233c <fprintf@plt>
   293d4:	vmov	s15, r7
   293d8:	mov	r2, r7
   293dc:	mov	r0, r4
   293e0:	vldr	d5, [pc, #80]	; 29438 <__assert_fail@plt+0x16e44>
   293e4:	movw	r1, #20088	; 0x4e78
   293e8:	movt	r1, #5
   293ec:	vcvt.f64.u32	d6, s15
   293f0:	vmov	s15, r6
   293f4:	vmul.f64	d6, d6, d5
   293f8:	vcvt.f64.u32	d7, s15
   293fc:	vdiv.f64	d5, d6, d7
   29400:	vstr	d5, [sp]
   29404:	bl	1233c <fprintf@plt>
   29408:	mov	r2, r5
   2940c:	mov	r0, r4
   29410:	movw	r1, #20124	; 0x4e9c
   29414:	movt	r1, #5
   29418:	add	sp, sp, #12
   2941c:	ldrd	r4, [sp]
   29420:	ldrd	r6, [sp, #8]
   29424:	ldr	lr, [sp, #16]
   29428:	add	sp, sp, #20
   2942c:	b	1233c <fprintf@plt>
   29430:	mov	r5, #0
   29434:	b	293b0 <__assert_fail@plt+0x16dbc>
   29438:	andeq	r0, r0, r0
   2943c:	subsmi	r0, r9, r0
   29440:	strd	r4, [sp, #-16]!
   29444:	mov	r5, r1
   29448:	str	r6, [sp, #8]
   2944c:	mov	r6, r0
   29450:	mov	r0, r1
   29454:	str	lr, [sp, #12]
   29458:	ldr	r1, [r6, #8]
   2945c:	ldr	r3, [r6, #24]
   29460:	blx	r3
   29464:	ldr	r3, [r6, #8]
   29468:	cmp	r0, r3
   2946c:	bcs	294dc <__assert_fail@plt+0x16ee8>
   29470:	ldr	r4, [r6]
   29474:	ldr	r1, [r4, r0, lsl #3]
   29478:	add	r4, r4, r0, lsl #3
   2947c:	cmp	r1, #0
   29480:	beq	294bc <__assert_fail@plt+0x16ec8>
   29484:	cmp	r1, r5
   29488:	bne	2949c <__assert_fail@plt+0x16ea8>
   2948c:	b	294c0 <__assert_fail@plt+0x16ecc>
   29490:	ldr	r1, [r4]
   29494:	cmp	r5, r1
   29498:	beq	294c0 <__assert_fail@plt+0x16ecc>
   2949c:	mov	r0, r5
   294a0:	ldr	r3, [r6, #28]
   294a4:	blx	r3
   294a8:	cmp	r0, #0
   294ac:	bne	294d4 <__assert_fail@plt+0x16ee0>
   294b0:	ldr	r4, [r4, #4]
   294b4:	cmp	r4, #0
   294b8:	bne	29490 <__assert_fail@plt+0x16e9c>
   294bc:	mov	r1, #0
   294c0:	ldrd	r4, [sp]
   294c4:	mov	r0, r1
   294c8:	ldr	r6, [sp, #8]
   294cc:	add	sp, sp, #12
   294d0:	pop	{pc}		; (ldr pc, [sp], #4)
   294d4:	ldr	r1, [r4]
   294d8:	b	294c0 <__assert_fail@plt+0x16ecc>
   294dc:	bl	125a0 <abort@plt>
   294e0:	ldr	r3, [r0, #16]
   294e4:	cmp	r3, #0
   294e8:	beq	2953c <__assert_fail@plt+0x16f48>
   294ec:	ldr	r3, [r0]
   294f0:	ldr	r2, [r0, #4]
   294f4:	cmp	r3, r2
   294f8:	bcs	29530 <__assert_fail@plt+0x16f3c>
   294fc:	ldr	r0, [r3]
   29500:	cmp	r0, #0
   29504:	bxne	lr
   29508:	sub	r2, r2, #1
   2950c:	sub	r2, r2, r3
   29510:	bic	r2, r2, #7
   29514:	add	r2, r3, r2
   29518:	b	29528 <__assert_fail@plt+0x16f34>
   2951c:	ldr	r0, [r3, #8]!
   29520:	cmp	r0, #0
   29524:	bxne	lr
   29528:	cmp	r3, r2
   2952c:	bne	2951c <__assert_fail@plt+0x16f28>
   29530:	str	r4, [sp, #-8]!
   29534:	str	lr, [sp, #4]
   29538:	bl	125a0 <abort@plt>
   2953c:	mov	r0, r3
   29540:	bx	lr
   29544:	strd	r4, [sp, #-16]!
   29548:	mov	r5, r0
   2954c:	mov	r4, r1
   29550:	mov	r0, r1
   29554:	ldr	r1, [r5, #8]
   29558:	ldr	r3, [r5, #24]
   2955c:	str	r6, [sp, #8]
   29560:	str	lr, [sp, #12]
   29564:	blx	r3
   29568:	ldr	r3, [r5, #8]
   2956c:	cmp	r0, r3
   29570:	bcs	295d8 <__assert_fail@plt+0x16fe4>
   29574:	ldr	r2, [r5]
   29578:	add	r2, r2, r0, lsl #3
   2957c:	mov	r3, r2
   29580:	b	2958c <__assert_fail@plt+0x16f98>
   29584:	cmp	r3, #0
   29588:	beq	295a4 <__assert_fail@plt+0x16fb0>
   2958c:	ldm	r3, {r1, r3}
   29590:	cmp	r1, r4
   29594:	bne	29584 <__assert_fail@plt+0x16f90>
   29598:	cmp	r3, #0
   2959c:	ldrne	r0, [r3]
   295a0:	bne	295c8 <__assert_fail@plt+0x16fd4>
   295a4:	ldr	r3, [r5, #4]
   295a8:	b	295b8 <__assert_fail@plt+0x16fc4>
   295ac:	ldr	r0, [r2]
   295b0:	cmp	r0, #0
   295b4:	bne	295c8 <__assert_fail@plt+0x16fd4>
   295b8:	add	r2, r2, #8
   295bc:	cmp	r3, r2
   295c0:	bhi	295ac <__assert_fail@plt+0x16fb8>
   295c4:	mov	r0, #0
   295c8:	ldrd	r4, [sp]
   295cc:	ldr	r6, [sp, #8]
   295d0:	add	sp, sp, #12
   295d4:	pop	{pc}		; (ldr pc, [sp], #4)
   295d8:	bl	125a0 <abort@plt>
   295dc:	strd	r4, [sp, #-16]!
   295e0:	mov	r3, #0
   295e4:	ldr	r5, [r0]
   295e8:	str	r6, [sp, #8]
   295ec:	str	lr, [sp, #12]
   295f0:	ldr	lr, [r0, #4]
   295f4:	cmp	lr, r5
   295f8:	bls	29614 <__assert_fail@plt+0x17020>
   295fc:	ldr	ip, [r5]
   29600:	cmp	ip, #0
   29604:	bne	29628 <__assert_fail@plt+0x17034>
   29608:	add	r5, r5, #8
   2960c:	cmp	r5, lr
   29610:	bcc	295fc <__assert_fail@plt+0x17008>
   29614:	ldrd	r4, [sp]
   29618:	mov	r0, r3
   2961c:	ldr	r6, [sp, #8]
   29620:	add	sp, sp, #12
   29624:	pop	{pc}		; (ldr pc, [sp], #4)
   29628:	cmp	r2, r3
   2962c:	bls	29614 <__assert_fail@plt+0x17020>
   29630:	str	ip, [r1, r3, lsl #2]
   29634:	add	r4, r3, #1
   29638:	lsl	lr, r3, #2
   2963c:	ldr	ip, [r5, #4]
   29640:	cmp	ip, #0
   29644:	beq	296a4 <__assert_fail@plt+0x170b0>
   29648:	cmp	r2, r4
   2964c:	bls	29698 <__assert_fail@plt+0x170a4>
   29650:	ldr	r6, [ip]
   29654:	add	r3, r3, #2
   29658:	str	r6, [r1, r4, lsl #2]
   2965c:	ldr	ip, [ip, #4]
   29660:	cmp	ip, #0
   29664:	beq	29690 <__assert_fail@plt+0x1709c>
   29668:	add	lr, lr, #4
   2966c:	add	lr, r1, lr
   29670:	cmp	r2, r3
   29674:	add	r3, r3, #1
   29678:	beq	2969c <__assert_fail@plt+0x170a8>
   2967c:	ldr	r4, [ip]
   29680:	str	r4, [lr, #4]!
   29684:	ldr	ip, [ip, #4]
   29688:	cmp	ip, #0
   2968c:	bne	29670 <__assert_fail@plt+0x1707c>
   29690:	ldr	lr, [r0, #4]
   29694:	b	29608 <__assert_fail@plt+0x17014>
   29698:	mov	r2, r4
   2969c:	mov	r3, r2
   296a0:	b	29614 <__assert_fail@plt+0x17020>
   296a4:	mov	r3, r4
   296a8:	ldr	lr, [r0, #4]
   296ac:	b	29608 <__assert_fail@plt+0x17014>
   296b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   296b4:	ldr	r3, [r0, #4]
   296b8:	strd	r6, [sp, #8]
   296bc:	strd	r8, [sp, #16]
   296c0:	ldr	r8, [r0]
   296c4:	str	sl, [sp, #24]
   296c8:	str	lr, [sp, #28]
   296cc:	cmp	r3, r8
   296d0:	bls	2974c <__assert_fail@plt+0x17158>
   296d4:	mov	r7, r2
   296d8:	mov	r6, r1
   296dc:	mov	r9, r0
   296e0:	mov	r5, #0
   296e4:	ldr	r0, [r8]
   296e8:	cmp	r0, #0
   296ec:	bne	29718 <__assert_fail@plt+0x17124>
   296f0:	add	r8, r8, #8
   296f4:	cmp	r8, r3
   296f8:	bcc	296e4 <__assert_fail@plt+0x170f0>
   296fc:	mov	r0, r5
   29700:	ldrd	r4, [sp]
   29704:	ldrd	r6, [sp, #8]
   29708:	ldrd	r8, [sp, #16]
   2970c:	ldr	sl, [sp, #24]
   29710:	add	sp, sp, #28
   29714:	pop	{pc}		; (ldr pc, [sp], #4)
   29718:	mov	r4, r8
   2971c:	b	29724 <__assert_fail@plt+0x17130>
   29720:	ldr	r0, [r4]
   29724:	mov	r1, r7
   29728:	blx	r6
   2972c:	cmp	r0, #0
   29730:	beq	296fc <__assert_fail@plt+0x17108>
   29734:	ldr	r4, [r4, #4]
   29738:	add	r5, r5, #1
   2973c:	cmp	r4, #0
   29740:	bne	29720 <__assert_fail@plt+0x1712c>
   29744:	ldr	r3, [r9, #4]
   29748:	b	296f0 <__assert_fail@plt+0x170fc>
   2974c:	mov	r5, #0
   29750:	b	296fc <__assert_fail@plt+0x17108>
   29754:	ldrb	r2, [r0]
   29758:	cmp	r2, #0
   2975c:	beq	29788 <__assert_fail@plt+0x17194>
   29760:	mov	r3, #0
   29764:	rsb	r3, r3, r3, lsl #5
   29768:	add	r3, r3, r2
   2976c:	ldrb	r2, [r0, #1]!
   29770:	udiv	ip, r3, r1
   29774:	cmp	r2, #0
   29778:	mls	r3, r1, ip, r3
   2977c:	bne	29764 <__assert_fail@plt+0x17170>
   29780:	mov	r0, r3
   29784:	bx	lr
   29788:	mov	r3, r2
   2978c:	mov	r0, r3
   29790:	bx	lr
   29794:	movw	r3, #20020	; 0x4e34
   29798:	movt	r3, #5
   2979c:	strd	r4, [sp, #-8]!
   297a0:	ldrd	r4, [r3]
   297a4:	ldr	r1, [r3, #16]
   297a8:	ldrd	r2, [r3, #8]
   297ac:	strd	r4, [r0]
   297b0:	ldrd	r4, [sp]
   297b4:	add	sp, sp, #8
   297b8:	strd	r2, [r0, #8]
   297bc:	str	r1, [r0, #16]
   297c0:	bx	lr
   297c4:	cmp	r2, #0
   297c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   297cc:	movw	r4, #36504	; 0x8e98
   297d0:	movt	r4, #2
   297d4:	movne	r4, r2
   297d8:	strd	r6, [sp, #8]
   297dc:	cmp	r3, #0
   297e0:	str	r8, [sp, #16]
   297e4:	mov	r8, r0
   297e8:	mov	r0, #40	; 0x28
   297ec:	movw	r5, #36520	; 0x8ea8
   297f0:	movt	r5, #2
   297f4:	mov	r7, r1
   297f8:	str	lr, [sp, #20]
   297fc:	movne	r5, r3
   29800:	bl	3b49c <__assert_fail@plt+0x28ea8>
   29804:	subs	r6, r0, #0
   29808:	beq	2984c <__assert_fail@plt+0x17258>
   2980c:	cmp	r7, #0
   29810:	movw	r3, #20020	; 0x4e34
   29814:	movt	r3, #5
   29818:	beq	298d8 <__assert_fail@plt+0x172e4>
   2981c:	cmp	r7, r3
   29820:	str	r7, [r6, #20]
   29824:	beq	298dc <__assert_fail@plt+0x172e8>
   29828:	vldr	s14, [pc, #456]	; 299f8 <__assert_fail@plt+0x17404>
   2982c:	vldr	s15, [r7, #8]
   29830:	vcmpe.f32	s15, s14
   29834:	vmrs	APSR_nzcv, fpscr
   29838:	bgt	29864 <__assert_fail@plt+0x17270>
   2983c:	str	r3, [r6, #20]
   29840:	mov	r0, r6
   29844:	mov	r6, #0
   29848:	bl	38b10 <__assert_fail@plt+0x2651c>
   2984c:	mov	r0, r6
   29850:	ldrd	r4, [sp]
   29854:	ldrd	r6, [sp, #8]
   29858:	ldr	r8, [sp, #16]
   2985c:	add	sp, sp, #20
   29860:	pop	{pc}		; (ldr pc, [sp], #4)
   29864:	vldr	s13, [pc, #400]	; 299fc <__assert_fail@plt+0x17408>
   29868:	vcmpe.f32	s15, s13
   2986c:	vmrs	APSR_nzcv, fpscr
   29870:	bpl	2983c <__assert_fail@plt+0x17248>
   29874:	vldr	s13, [pc, #388]	; 29a00 <__assert_fail@plt+0x1740c>
   29878:	vldr	s12, [r7, #12]
   2987c:	vcmpe.f32	s12, s13
   29880:	vmrs	APSR_nzcv, fpscr
   29884:	ble	2983c <__assert_fail@plt+0x17248>
   29888:	vldr	s13, [r7]
   2988c:	vcmpe.f32	s13, #0.0
   29890:	vmrs	APSR_nzcv, fpscr
   29894:	blt	2983c <__assert_fail@plt+0x17248>
   29898:	vadd.f32	s14, s13, s14
   2989c:	vldr	s13, [r7, #4]
   298a0:	vcmpe.f32	s14, s13
   298a4:	vmrs	APSR_nzcv, fpscr
   298a8:	bpl	2983c <__assert_fail@plt+0x17248>
   298ac:	vldr	s12, [pc, #336]	; 29a04 <__assert_fail@plt+0x17410>
   298b0:	vcmpe.f32	s13, s12
   298b4:	vmrs	APSR_nzcv, fpscr
   298b8:	bhi	2983c <__assert_fail@plt+0x17248>
   298bc:	vcmpe.f32	s15, s14
   298c0:	vmrs	APSR_nzcv, fpscr
   298c4:	ble	2983c <__assert_fail@plt+0x17248>
   298c8:	ldrb	r3, [r7, #16]
   298cc:	cmp	r3, #0
   298d0:	bne	29904 <__assert_fail@plt+0x17310>
   298d4:	b	298e0 <__assert_fail@plt+0x172ec>
   298d8:	str	r3, [r6, #20]
   298dc:	vldr	s15, [pc, #292]	; 29a08 <__assert_fail@plt+0x17414>
   298e0:	vmov	s14, r8
   298e4:	vldr	s13, [pc, #288]	; 29a0c <__assert_fail@plt+0x17418>
   298e8:	vcvt.f32.u32	s12, s14
   298ec:	vdiv.f32	s14, s12, s15
   298f0:	vcmpe.f32	s14, s13
   298f4:	vmrs	APSR_nzcv, fpscr
   298f8:	bge	2998c <__assert_fail@plt+0x17398>
   298fc:	vcvt.u32.f32	s15, s14
   29900:	vmov	r8, s15
   29904:	cmp	r8, #10
   29908:	movcs	r3, r8
   2990c:	movcc	r3, #10
   29910:	orr	r3, r3, #1
   29914:	cmn	r3, #1
   29918:	beq	2998c <__assert_fail@plt+0x17398>
   2991c:	movw	lr, #43691	; 0xaaab
   29920:	movt	lr, #43690	; 0xaaaa
   29924:	umull	r1, r2, lr, r3
   29928:	cmp	r3, #9
   2992c:	lsr	r2, r2, #1
   29930:	add	r2, r2, r2, lsl #1
   29934:	sub	r2, r3, r2
   29938:	bls	29978 <__assert_fail@plt+0x17384>
   2993c:	cmp	r2, #0
   29940:	beq	29980 <__assert_fail@plt+0x1738c>
   29944:	mov	ip, #16
   29948:	mov	r0, #9
   2994c:	mov	r1, #3
   29950:	b	2995c <__assert_fail@plt+0x17368>
   29954:	cmp	r2, #0
   29958:	beq	29980 <__assert_fail@plt+0x1738c>
   2995c:	add	r1, r1, #2
   29960:	add	r0, r0, ip
   29964:	cmp	r0, r3
   29968:	add	ip, ip, #8
   2996c:	udiv	r2, r3, r1
   29970:	mls	r2, r1, r2, r3
   29974:	bcc	29954 <__assert_fail@plt+0x17360>
   29978:	cmp	r2, #0
   2997c:	bne	29998 <__assert_fail@plt+0x173a4>
   29980:	add	r3, r3, #2
   29984:	cmn	r3, #1
   29988:	bne	29924 <__assert_fail@plt+0x17330>
   2998c:	mov	r3, #0
   29990:	str	r3, [r6, #8]
   29994:	b	29840 <__assert_fail@plt+0x1724c>
   29998:	lsrs	r2, r3, #30
   2999c:	movne	r7, #1
   299a0:	moveq	r7, #0
   299a4:	tst	r3, #536870912	; 0x20000000
   299a8:	bne	2998c <__assert_fail@plt+0x17398>
   299ac:	cmp	r7, #0
   299b0:	bne	2998c <__assert_fail@plt+0x17398>
   299b4:	mov	r0, r3
   299b8:	mov	r1, #8
   299bc:	str	r3, [r6, #8]
   299c0:	bl	384e0 <__assert_fail@plt+0x25eec>
   299c4:	cmp	r0, #0
   299c8:	str	r0, [r6]
   299cc:	beq	29840 <__assert_fail@plt+0x1724c>
   299d0:	ldr	r3, [r6, #8]
   299d4:	str	r7, [r6, #12]
   299d8:	str	r7, [r6, #16]
   299dc:	strd	r4, [r6, #24]
   299e0:	str	r7, [r6, #36]	; 0x24
   299e4:	add	r0, r0, r3, lsl #3
   299e8:	ldr	r3, [sp, #24]
   299ec:	str	r0, [r6, #4]
   299f0:	str	r3, [r6, #32]
   299f4:	b	2984c <__assert_fail@plt+0x17258>
   299f8:	stclcc	12, cr12, [ip, #820]	; 0x334
   299fc:	svccc	0x00666666
   29a00:	svccc	0x008ccccd
   29a04:	svccc	0x00800000
   29a08:	svccc	0x004ccccd
   29a0c:	svcmi	0x00800000
   29a10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   29a14:	mov	r5, r0
   29a18:	ldr	r2, [r0, #4]
   29a1c:	strd	r6, [sp, #8]
   29a20:	ldr	r6, [r0]
   29a24:	str	r8, [sp, #16]
   29a28:	str	lr, [sp, #20]
   29a2c:	cmp	r6, r2
   29a30:	addcc	r6, r6, #8
   29a34:	movcc	r7, #0
   29a38:	bcc	29a4c <__assert_fail@plt+0x17458>
   29a3c:	b	29ac0 <__assert_fail@plt+0x174cc>
   29a40:	cmp	r2, r6
   29a44:	add	r6, r6, #8
   29a48:	bls	29ac0 <__assert_fail@plt+0x174cc>
   29a4c:	ldr	r3, [r6, #-8]
   29a50:	cmp	r3, #0
   29a54:	beq	29a40 <__assert_fail@plt+0x1744c>
   29a58:	ldr	r4, [r6, #-4]
   29a5c:	ldr	r3, [r5, #32]
   29a60:	cmp	r4, #0
   29a64:	beq	29a98 <__assert_fail@plt+0x174a4>
   29a68:	cmp	r3, #0
   29a6c:	beq	29ae0 <__assert_fail@plt+0x174ec>
   29a70:	ldr	r0, [r4]
   29a74:	blx	r3
   29a78:	ldr	r1, [r4, #4]
   29a7c:	ldr	r3, [r5, #32]
   29a80:	ldr	r2, [r5, #36]	; 0x24
   29a84:	str	r7, [r4]
   29a88:	str	r2, [r4, #4]
   29a8c:	str	r4, [r5, #36]	; 0x24
   29a90:	subs	r4, r1, #0
   29a94:	bne	29a68 <__assert_fail@plt+0x17474>
   29a98:	cmp	r3, #0
   29a9c:	beq	29aa8 <__assert_fail@plt+0x174b4>
   29aa0:	ldr	r0, [r6, #-8]
   29aa4:	blx	r3
   29aa8:	str	r7, [r6, #-8]
   29aac:	str	r7, [r6, #-4]
   29ab0:	ldr	r2, [r5, #4]
   29ab4:	cmp	r2, r6
   29ab8:	add	r6, r6, #8
   29abc:	bhi	29a4c <__assert_fail@plt+0x17458>
   29ac0:	mov	r3, #0
   29ac4:	ldrd	r6, [sp, #8]
   29ac8:	ldr	r8, [sp, #16]
   29acc:	str	r3, [r5, #12]
   29ad0:	str	r3, [r5, #16]
   29ad4:	ldrd	r4, [sp]
   29ad8:	add	sp, sp, #20
   29adc:	pop	{pc}		; (ldr pc, [sp], #4)
   29ae0:	ldr	r2, [r5, #36]	; 0x24
   29ae4:	str	r7, [r4]
   29ae8:	ldr	r3, [r4, #4]
   29aec:	str	r2, [r4, #4]
   29af0:	mov	r2, r4
   29af4:	str	r2, [r5, #36]	; 0x24
   29af8:	subs	r4, r3, #0
   29afc:	bne	29ae4 <__assert_fail@plt+0x174f0>
   29b00:	b	29aa8 <__assert_fail@plt+0x174b4>
   29b04:	strd	r4, [sp, #-16]!
   29b08:	ldr	r2, [r0, #32]
   29b0c:	ldr	r5, [r0]
   29b10:	ldr	r3, [r0, #4]
   29b14:	cmp	r2, #0
   29b18:	str	r6, [sp, #8]
   29b1c:	mov	r6, r0
   29b20:	str	lr, [sp, #12]
   29b24:	beq	29b8c <__assert_fail@plt+0x17598>
   29b28:	ldr	r2, [r0, #16]
   29b2c:	cmp	r2, #0
   29b30:	beq	29b8c <__assert_fail@plt+0x17598>
   29b34:	cmp	r5, r3
   29b38:	bcc	29b4c <__assert_fail@plt+0x17558>
   29b3c:	b	29bc0 <__assert_fail@plt+0x175cc>
   29b40:	add	r5, r5, #8
   29b44:	cmp	r5, r3
   29b48:	bcs	29b88 <__assert_fail@plt+0x17594>
   29b4c:	ldr	r0, [r5]
   29b50:	cmp	r0, #0
   29b54:	beq	29b40 <__assert_fail@plt+0x1754c>
   29b58:	mov	r4, r5
   29b5c:	b	29b64 <__assert_fail@plt+0x17570>
   29b60:	ldr	r0, [r4]
   29b64:	ldr	r3, [r6, #32]
   29b68:	blx	r3
   29b6c:	ldr	r4, [r4, #4]
   29b70:	cmp	r4, #0
   29b74:	bne	29b60 <__assert_fail@plt+0x1756c>
   29b78:	ldr	r3, [r6, #4]
   29b7c:	add	r5, r5, #8
   29b80:	cmp	r5, r3
   29b84:	bcc	29b4c <__assert_fail@plt+0x17558>
   29b88:	ldr	r5, [r6]
   29b8c:	cmp	r3, r5
   29b90:	bls	29bc0 <__assert_fail@plt+0x175cc>
   29b94:	ldr	r0, [r5, #4]
   29b98:	cmp	r0, #0
   29b9c:	beq	29bb4 <__assert_fail@plt+0x175c0>
   29ba0:	ldr	r4, [r0, #4]
   29ba4:	bl	38b10 <__assert_fail@plt+0x2651c>
   29ba8:	subs	r0, r4, #0
   29bac:	bne	29ba0 <__assert_fail@plt+0x175ac>
   29bb0:	ldr	r3, [r6, #4]
   29bb4:	add	r5, r5, #8
   29bb8:	cmp	r5, r3
   29bbc:	bcc	29b94 <__assert_fail@plt+0x175a0>
   29bc0:	ldr	r0, [r6, #36]	; 0x24
   29bc4:	cmp	r0, #0
   29bc8:	beq	29bdc <__assert_fail@plt+0x175e8>
   29bcc:	ldr	r4, [r0, #4]
   29bd0:	bl	38b10 <__assert_fail@plt+0x2651c>
   29bd4:	subs	r0, r4, #0
   29bd8:	bne	29bcc <__assert_fail@plt+0x175d8>
   29bdc:	ldr	r0, [r6]
   29be0:	bl	38b10 <__assert_fail@plt+0x2651c>
   29be4:	mov	r0, r6
   29be8:	ldrd	r4, [sp]
   29bec:	ldr	r6, [sp, #8]
   29bf0:	ldr	lr, [sp, #12]
   29bf4:	add	sp, sp, #16
   29bf8:	b	38b10 <__assert_fail@plt+0x2651c>
   29bfc:	ldr	r3, [r0, #20]
   29c00:	strd	r4, [sp, #-20]!	; 0xffffffec
   29c04:	mov	r5, r0
   29c08:	ldrb	r2, [r3, #16]
   29c0c:	strd	r6, [sp, #8]
   29c10:	str	lr, [sp, #16]
   29c14:	sub	sp, sp, #44	; 0x2c
   29c18:	cmp	r2, #0
   29c1c:	bne	29c48 <__assert_fail@plt+0x17654>
   29c20:	vmov	s15, r1
   29c24:	vldr	s12, [r3, #8]
   29c28:	vldr	s13, [pc, #444]	; 29dec <__assert_fail@plt+0x177f8>
   29c2c:	vcvt.f32.u32	s15, s15
   29c30:	vdiv.f32	s14, s15, s12
   29c34:	vcmpe.f32	s14, s13
   29c38:	vmrs	APSR_nzcv, fpscr
   29c3c:	vcvtlt.u32.f32	s15, s14
   29c40:	vmovlt	r1, s15
   29c44:	bge	29ccc <__assert_fail@plt+0x176d8>
   29c48:	cmp	r1, #10
   29c4c:	movcc	r1, #10
   29c50:	orr	r4, r1, #1
   29c54:	cmn	r4, #1
   29c58:	beq	29ccc <__assert_fail@plt+0x176d8>
   29c5c:	movw	ip, #43691	; 0xaaab
   29c60:	movt	ip, #43690	; 0xaaaa
   29c64:	umull	r2, r3, ip, r4
   29c68:	cmp	r4, #9
   29c6c:	lsr	r3, r3, #1
   29c70:	add	r3, r3, r3, lsl #1
   29c74:	sub	r3, r4, r3
   29c78:	bls	29cb8 <__assert_fail@plt+0x176c4>
   29c7c:	cmp	r3, #0
   29c80:	beq	29cc0 <__assert_fail@plt+0x176cc>
   29c84:	mov	r0, #16
   29c88:	mov	r1, #9
   29c8c:	mov	r2, #3
   29c90:	b	29ca0 <__assert_fail@plt+0x176ac>
   29c94:	cmp	r3, #0
   29c98:	add	r0, r0, #8
   29c9c:	beq	29cc0 <__assert_fail@plt+0x176cc>
   29ca0:	add	r2, r2, #2
   29ca4:	add	r1, r1, r0
   29ca8:	cmp	r1, r4
   29cac:	udiv	r3, r4, r2
   29cb0:	mls	r3, r2, r3, r4
   29cb4:	bcc	29c94 <__assert_fail@plt+0x176a0>
   29cb8:	cmp	r3, #0
   29cbc:	bne	29ce8 <__assert_fail@plt+0x176f4>
   29cc0:	add	r4, r4, #2
   29cc4:	cmn	r4, #1
   29cc8:	bne	29c64 <__assert_fail@plt+0x17670>
   29ccc:	mov	r4, #0
   29cd0:	mov	r0, r4
   29cd4:	add	sp, sp, #44	; 0x2c
   29cd8:	ldrd	r4, [sp]
   29cdc:	ldrd	r6, [sp, #8]
   29ce0:	add	sp, sp, #16
   29ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   29ce8:	lsrs	r3, r4, #30
   29cec:	movne	r6, #1
   29cf0:	moveq	r6, #0
   29cf4:	tst	r4, #536870912	; 0x20000000
   29cf8:	bne	29ccc <__assert_fail@plt+0x176d8>
   29cfc:	cmp	r6, #0
   29d00:	bne	29ccc <__assert_fail@plt+0x176d8>
   29d04:	ldr	r3, [r5, #8]
   29d08:	cmp	r3, r4
   29d0c:	beq	29db4 <__assert_fail@plt+0x177c0>
   29d10:	mov	r1, #8
   29d14:	mov	r0, r4
   29d18:	bl	384e0 <__assert_fail@plt+0x25eec>
   29d1c:	cmp	r0, #0
   29d20:	str	r0, [sp]
   29d24:	beq	29ccc <__assert_fail@plt+0x176d8>
   29d28:	add	r3, r0, r4, lsl #3
   29d2c:	ldr	r7, [r5, #20]
   29d30:	mov	r2, r6
   29d34:	mov	r0, sp
   29d38:	mov	r1, r5
   29d3c:	ldr	lr, [r5, #28]
   29d40:	stmib	sp, {r3, r4, r6}
   29d44:	ldr	r4, [r5, #24]
   29d48:	strd	r6, [sp, #16]
   29d4c:	ldr	ip, [r5, #32]
   29d50:	ldr	r3, [r5, #36]	; 0x24
   29d54:	str	r4, [sp, #24]
   29d58:	str	lr, [sp, #28]
   29d5c:	str	ip, [sp, #32]
   29d60:	str	r3, [sp, #36]	; 0x24
   29d64:	bl	29018 <__assert_fail@plt+0x16a24>
   29d68:	subs	r4, r0, #0
   29d6c:	bne	29dbc <__assert_fail@plt+0x177c8>
   29d70:	ldr	r3, [sp, #36]	; 0x24
   29d74:	mov	r2, #1
   29d78:	mov	r1, sp
   29d7c:	mov	r0, r5
   29d80:	str	r3, [r5, #36]	; 0x24
   29d84:	bl	29018 <__assert_fail@plt+0x16a24>
   29d88:	cmp	r0, #0
   29d8c:	beq	29de8 <__assert_fail@plt+0x177f4>
   29d90:	mov	r1, sp
   29d94:	mov	r0, r5
   29d98:	mov	r2, r4
   29d9c:	bl	29018 <__assert_fail@plt+0x16a24>
   29da0:	cmp	r0, #0
   29da4:	beq	29de8 <__assert_fail@plt+0x177f4>
   29da8:	ldr	r0, [sp]
   29dac:	bl	38b10 <__assert_fail@plt+0x2651c>
   29db0:	b	29cd0 <__assert_fail@plt+0x176dc>
   29db4:	mov	r4, #1
   29db8:	b	29cd0 <__assert_fail@plt+0x176dc>
   29dbc:	ldr	r0, [r5]
   29dc0:	bl	38b10 <__assert_fail@plt+0x2651c>
   29dc4:	ldrd	r2, [sp]
   29dc8:	ldr	r1, [sp, #8]
   29dcc:	strd	r2, [r5]
   29dd0:	ldr	r2, [sp, #12]
   29dd4:	str	r1, [r5, #8]
   29dd8:	ldr	r3, [sp, #36]	; 0x24
   29ddc:	str	r2, [r5, #12]
   29de0:	str	r3, [r5, #36]	; 0x24
   29de4:	b	29cd0 <__assert_fail@plt+0x176dc>
   29de8:	bl	125a0 <abort@plt>
   29dec:	svcmi	0x00800000
   29df0:	strd	r4, [sp, #-16]!
   29df4:	str	r6, [sp, #8]
   29df8:	subs	r6, r1, #0
   29dfc:	str	lr, [sp, #12]
   29e00:	sub	sp, sp, #8
   29e04:	beq	29f90 <__assert_fail@plt+0x1799c>
   29e08:	mov	r3, #0
   29e0c:	mov	r5, r2
   29e10:	add	r2, sp, #4
   29e14:	mov	r4, r0
   29e18:	bl	28eb8 <__assert_fail@plt+0x168c4>
   29e1c:	subs	r3, r0, #0
   29e20:	beq	29e4c <__assert_fail@plt+0x17858>
   29e24:	cmp	r5, #0
   29e28:	moveq	r0, r5
   29e2c:	beq	29e38 <__assert_fail@plt+0x17844>
   29e30:	mov	r0, #0
   29e34:	str	r3, [r5]
   29e38:	add	sp, sp, #8
   29e3c:	ldrd	r4, [sp]
   29e40:	ldr	r6, [sp, #8]
   29e44:	add	sp, sp, #12
   29e48:	pop	{pc}		; (ldr pc, [sp], #4)
   29e4c:	vldr	s15, [r4, #8]
   29e50:	vldr	s14, [r4, #12]
   29e54:	ldr	r3, [r4, #20]
   29e58:	vcvt.f32.u32	s15, s15
   29e5c:	vcvt.f32.u32	s14, s14
   29e60:	vldr	s13, [r3, #8]
   29e64:	vmul.f32	s12, s13, s15
   29e68:	vcmpe.f32	s14, s12
   29e6c:	vmrs	APSR_nzcv, fpscr
   29e70:	bgt	29eb8 <__assert_fail@plt+0x178c4>
   29e74:	ldr	r2, [sp, #4]
   29e78:	ldr	r3, [r2]
   29e7c:	cmp	r3, #0
   29e80:	beq	29fbc <__assert_fail@plt+0x179c8>
   29e84:	ldr	r3, [r4, #36]	; 0x24
   29e88:	cmp	r3, #0
   29e8c:	beq	29fe0 <__assert_fail@plt+0x179ec>
   29e90:	ldr	r1, [r3, #4]
   29e94:	str	r1, [r4, #36]	; 0x24
   29e98:	ldr	r1, [r4, #16]
   29e9c:	mov	r0, #1
   29ea0:	ldr	ip, [r2, #4]
   29ea4:	add	r1, r1, r0
   29ea8:	stm	r3, {r6, ip}
   29eac:	str	r3, [r2, #4]
   29eb0:	str	r1, [r4, #16]
   29eb4:	b	29e38 <__assert_fail@plt+0x17844>
   29eb8:	movw	r2, #20020	; 0x4e34
   29ebc:	movt	r2, #5
   29ec0:	cmp	r3, r2
   29ec4:	beq	29ff8 <__assert_fail@plt+0x17a04>
   29ec8:	vldr	s12, [pc, #320]	; 2a010 <__assert_fail@plt+0x17a1c>
   29ecc:	vcmpe.f32	s13, s12
   29ed0:	vmrs	APSR_nzcv, fpscr
   29ed4:	ble	29f94 <__assert_fail@plt+0x179a0>
   29ed8:	vldr	s11, [pc, #308]	; 2a014 <__assert_fail@plt+0x17a20>
   29edc:	vcmpe.f32	s13, s11
   29ee0:	vmrs	APSR_nzcv, fpscr
   29ee4:	bpl	29f94 <__assert_fail@plt+0x179a0>
   29ee8:	vldr	s10, [pc, #296]	; 2a018 <__assert_fail@plt+0x17a24>
   29eec:	vldr	s11, [r3, #12]
   29ef0:	vcmpe.f32	s11, s10
   29ef4:	vmrs	APSR_nzcv, fpscr
   29ef8:	ble	29f94 <__assert_fail@plt+0x179a0>
   29efc:	vldr	s10, [r3]
   29f00:	vcmpe.f32	s10, #0.0
   29f04:	vmrs	APSR_nzcv, fpscr
   29f08:	blt	29f94 <__assert_fail@plt+0x179a0>
   29f0c:	vadd.f32	s12, s10, s12
   29f10:	vldr	s10, [r3, #4]
   29f14:	vcmpe.f32	s12, s10
   29f18:	vmrs	APSR_nzcv, fpscr
   29f1c:	bpl	29f94 <__assert_fail@plt+0x179a0>
   29f20:	vldr	s9, [pc, #244]	; 2a01c <__assert_fail@plt+0x17a28>
   29f24:	vcmpe.f32	s10, s9
   29f28:	vmrs	APSR_nzcv, fpscr
   29f2c:	bhi	29f94 <__assert_fail@plt+0x179a0>
   29f30:	vcmpe.f32	s13, s12
   29f34:	vmrs	APSR_nzcv, fpscr
   29f38:	ble	29f94 <__assert_fail@plt+0x179a0>
   29f3c:	ldrb	r3, [r3, #16]
   29f40:	vmul.f32	s15, s15, s11
   29f44:	cmp	r3, #0
   29f48:	beq	29fb4 <__assert_fail@plt+0x179c0>
   29f4c:	vldr	s14, [pc, #204]	; 2a020 <__assert_fail@plt+0x17a2c>
   29f50:	vcmpe.f32	s15, s14
   29f54:	vmrs	APSR_nzcv, fpscr
   29f58:	bge	29ff0 <__assert_fail@plt+0x179fc>
   29f5c:	vcvt.u32.f32	s15, s15
   29f60:	mov	r0, r4
   29f64:	vmov	r1, s15
   29f68:	bl	29bfc <__assert_fail@plt+0x17608>
   29f6c:	cmp	r0, #0
   29f70:	beq	29ff0 <__assert_fail@plt+0x179fc>
   29f74:	add	r2, sp, #4
   29f78:	mov	r3, #0
   29f7c:	mov	r1, r6
   29f80:	mov	r0, r4
   29f84:	bl	28eb8 <__assert_fail@plt+0x168c4>
   29f88:	cmp	r0, #0
   29f8c:	beq	29e74 <__assert_fail@plt+0x17880>
   29f90:	bl	125a0 <abort@plt>
   29f94:	vldr	s13, [pc, #136]	; 2a024 <__assert_fail@plt+0x17a30>
   29f98:	str	r2, [r4, #20]
   29f9c:	vmul.f32	s12, s15, s13
   29fa0:	vcmpe.f32	s14, s12
   29fa4:	vmrs	APSR_nzcv, fpscr
   29fa8:	ble	29e74 <__assert_fail@plt+0x17880>
   29fac:	vldr	s14, [pc, #116]	; 2a028 <__assert_fail@plt+0x17a34>
   29fb0:	vmul.f32	s15, s15, s14
   29fb4:	vmul.f32	s15, s15, s13
   29fb8:	b	29f4c <__assert_fail@plt+0x17958>
   29fbc:	ldr	r1, [r4, #12]
   29fc0:	mov	r0, #1
   29fc4:	ldr	r3, [r4, #16]
   29fc8:	str	r6, [r2]
   29fcc:	add	r2, r1, r0
   29fd0:	add	r3, r3, r0
   29fd4:	str	r2, [r4, #12]
   29fd8:	str	r3, [r4, #16]
   29fdc:	b	29e38 <__assert_fail@plt+0x17844>
   29fe0:	mov	r0, #8
   29fe4:	bl	3b49c <__assert_fail@plt+0x28ea8>
   29fe8:	subs	r3, r0, #0
   29fec:	bne	2a008 <__assert_fail@plt+0x17a14>
   29ff0:	mvn	r0, #0
   29ff4:	b	29e38 <__assert_fail@plt+0x17844>
   29ff8:	vldr	s14, [pc, #40]	; 2a028 <__assert_fail@plt+0x17a34>
   29ffc:	vldr	s13, [pc, #32]	; 2a024 <__assert_fail@plt+0x17a30>
   2a000:	vmul.f32	s15, s15, s14
   2a004:	b	29fb4 <__assert_fail@plt+0x179c0>
   2a008:	ldr	r2, [sp, #4]
   2a00c:	b	29e98 <__assert_fail@plt+0x178a4>
   2a010:	stclcc	12, cr12, [ip, #820]	; 0x334
   2a014:	svccc	0x00666666
   2a018:	svccc	0x008ccccd
   2a01c:	svccc	0x00800000
   2a020:	svcmi	0x00800000
   2a024:	svccc	0x004ccccd
   2a028:	svccc	0x00b4fdf4
   2a02c:	strd	r4, [sp, #-16]!
   2a030:	str	r6, [sp, #8]
   2a034:	subs	r6, r1, #0
   2a038:	str	lr, [sp, #12]
   2a03c:	sub	sp, sp, #8
   2a040:	beq	2a1bc <__assert_fail@plt+0x17bc8>
   2a044:	mov	r3, #0
   2a048:	add	r2, sp, #4
   2a04c:	mov	r4, r0
   2a050:	bl	28eb8 <__assert_fail@plt+0x168c4>
   2a054:	subs	r5, r0, #0
   2a058:	beq	2a074 <__assert_fail@plt+0x17a80>
   2a05c:	mov	r0, r5
   2a060:	add	sp, sp, #8
   2a064:	ldrd	r4, [sp]
   2a068:	ldr	r6, [sp, #8]
   2a06c:	add	sp, sp, #12
   2a070:	pop	{pc}		; (ldr pc, [sp], #4)
   2a074:	vldr	s15, [r4, #8]
   2a078:	vldr	s14, [r4, #12]
   2a07c:	ldr	r3, [r4, #20]
   2a080:	vcvt.f32.u32	s15, s15
   2a084:	vcvt.f32.u32	s14, s14
   2a088:	vldr	s13, [r3, #8]
   2a08c:	vmul.f32	s12, s13, s15
   2a090:	vcmpe.f32	s14, s12
   2a094:	vmrs	APSR_nzcv, fpscr
   2a098:	bgt	2a0e4 <__assert_fail@plt+0x17af0>
   2a09c:	ldr	r3, [sp, #4]
   2a0a0:	ldr	r2, [r3]
   2a0a4:	cmp	r2, #0
   2a0a8:	beq	2a1e8 <__assert_fail@plt+0x17bf4>
   2a0ac:	ldr	r0, [r4, #36]	; 0x24
   2a0b0:	cmp	r0, #0
   2a0b4:	beq	2a20c <__assert_fail@plt+0x17c18>
   2a0b8:	ldr	r2, [r0, #4]
   2a0bc:	str	r2, [r4, #36]	; 0x24
   2a0c0:	ldr	r2, [r4, #16]
   2a0c4:	mov	r5, r6
   2a0c8:	ldr	r1, [r3, #4]
   2a0cc:	str	r6, [r0]
   2a0d0:	add	r2, r2, #1
   2a0d4:	str	r1, [r0, #4]
   2a0d8:	str	r0, [r3, #4]
   2a0dc:	str	r2, [r4, #16]
   2a0e0:	b	2a05c <__assert_fail@plt+0x17a68>
   2a0e4:	movw	r2, #20020	; 0x4e34
   2a0e8:	movt	r2, #5
   2a0ec:	cmp	r3, r2
   2a0f0:	beq	2a224 <__assert_fail@plt+0x17c30>
   2a0f4:	vldr	s12, [pc, #312]	; 2a234 <__assert_fail@plt+0x17c40>
   2a0f8:	vcmpe.f32	s13, s12
   2a0fc:	vmrs	APSR_nzcv, fpscr
   2a100:	ble	2a1c0 <__assert_fail@plt+0x17bcc>
   2a104:	vldr	s11, [pc, #300]	; 2a238 <__assert_fail@plt+0x17c44>
   2a108:	vcmpe.f32	s13, s11
   2a10c:	vmrs	APSR_nzcv, fpscr
   2a110:	bpl	2a1c0 <__assert_fail@plt+0x17bcc>
   2a114:	vldr	s10, [pc, #288]	; 2a23c <__assert_fail@plt+0x17c48>
   2a118:	vldr	s11, [r3, #12]
   2a11c:	vcmpe.f32	s11, s10
   2a120:	vmrs	APSR_nzcv, fpscr
   2a124:	ble	2a1c0 <__assert_fail@plt+0x17bcc>
   2a128:	vldr	s10, [r3]
   2a12c:	vcmpe.f32	s10, #0.0
   2a130:	vmrs	APSR_nzcv, fpscr
   2a134:	blt	2a1c0 <__assert_fail@plt+0x17bcc>
   2a138:	vadd.f32	s12, s10, s12
   2a13c:	vldr	s10, [r3, #4]
   2a140:	vcmpe.f32	s12, s10
   2a144:	vmrs	APSR_nzcv, fpscr
   2a148:	bpl	2a1c0 <__assert_fail@plt+0x17bcc>
   2a14c:	vldr	s9, [pc, #236]	; 2a240 <__assert_fail@plt+0x17c4c>
   2a150:	vcmpe.f32	s10, s9
   2a154:	vmrs	APSR_nzcv, fpscr
   2a158:	bhi	2a1c0 <__assert_fail@plt+0x17bcc>
   2a15c:	vcmpe.f32	s13, s12
   2a160:	vmrs	APSR_nzcv, fpscr
   2a164:	ble	2a1c0 <__assert_fail@plt+0x17bcc>
   2a168:	ldrb	r3, [r3, #16]
   2a16c:	vmul.f32	s15, s15, s11
   2a170:	cmp	r3, #0
   2a174:	beq	2a1e0 <__assert_fail@plt+0x17bec>
   2a178:	vldr	s14, [pc, #196]	; 2a244 <__assert_fail@plt+0x17c50>
   2a17c:	vcmpe.f32	s15, s14
   2a180:	vmrs	APSR_nzcv, fpscr
   2a184:	bge	2a05c <__assert_fail@plt+0x17a68>
   2a188:	vcvt.u32.f32	s15, s15
   2a18c:	mov	r0, r4
   2a190:	vmov	r1, s15
   2a194:	bl	29bfc <__assert_fail@plt+0x17608>
   2a198:	cmp	r0, #0
   2a19c:	beq	2a05c <__assert_fail@plt+0x17a68>
   2a1a0:	add	r2, sp, #4
   2a1a4:	mov	r3, #0
   2a1a8:	mov	r1, r6
   2a1ac:	mov	r0, r4
   2a1b0:	bl	28eb8 <__assert_fail@plt+0x168c4>
   2a1b4:	cmp	r0, #0
   2a1b8:	beq	2a09c <__assert_fail@plt+0x17aa8>
   2a1bc:	bl	125a0 <abort@plt>
   2a1c0:	vldr	s13, [pc, #128]	; 2a248 <__assert_fail@plt+0x17c54>
   2a1c4:	str	r2, [r4, #20]
   2a1c8:	vmul.f32	s12, s15, s13
   2a1cc:	vcmpe.f32	s14, s12
   2a1d0:	vmrs	APSR_nzcv, fpscr
   2a1d4:	ble	2a09c <__assert_fail@plt+0x17aa8>
   2a1d8:	vldr	s14, [pc, #108]	; 2a24c <__assert_fail@plt+0x17c58>
   2a1dc:	vmul.f32	s15, s15, s14
   2a1e0:	vmul.f32	s15, s15, s13
   2a1e4:	b	2a178 <__assert_fail@plt+0x17b84>
   2a1e8:	ldr	r2, [r4, #12]
   2a1ec:	mov	r5, r6
   2a1f0:	str	r6, [r3]
   2a1f4:	ldr	r3, [r4, #16]
   2a1f8:	add	r2, r2, #1
   2a1fc:	add	r3, r3, #1
   2a200:	str	r2, [r4, #12]
   2a204:	str	r3, [r4, #16]
   2a208:	b	2a05c <__assert_fail@plt+0x17a68>
   2a20c:	mov	r0, #8
   2a210:	bl	3b49c <__assert_fail@plt+0x28ea8>
   2a214:	cmp	r0, #0
   2a218:	beq	2a05c <__assert_fail@plt+0x17a68>
   2a21c:	ldr	r3, [sp, #4]
   2a220:	b	2a0c0 <__assert_fail@plt+0x17acc>
   2a224:	vldr	s14, [pc, #32]	; 2a24c <__assert_fail@plt+0x17c58>
   2a228:	vldr	s13, [pc, #24]	; 2a248 <__assert_fail@plt+0x17c54>
   2a22c:	vmul.f32	s15, s15, s14
   2a230:	b	2a1e0 <__assert_fail@plt+0x17bec>
   2a234:	stclcc	12, cr12, [ip, #820]	; 0x334
   2a238:	svccc	0x00666666
   2a23c:	svccc	0x008ccccd
   2a240:	svccc	0x00800000
   2a244:	svcmi	0x00800000
   2a248:	svccc	0x004ccccd
   2a24c:	svccc	0x00b4fdf4
   2a250:	strd	r4, [sp, #-16]!
   2a254:	mov	r3, #1
   2a258:	mov	r4, r0
   2a25c:	str	r6, [sp, #8]
   2a260:	str	lr, [sp, #12]
   2a264:	sub	sp, sp, #8
   2a268:	add	r2, sp, #4
   2a26c:	bl	28eb8 <__assert_fail@plt+0x168c4>
   2a270:	subs	r5, r0, #0
   2a274:	beq	2a294 <__assert_fail@plt+0x17ca0>
   2a278:	ldr	r2, [sp, #4]
   2a27c:	ldr	r3, [r4, #16]
   2a280:	ldr	r2, [r2]
   2a284:	sub	r3, r3, #1
   2a288:	str	r3, [r4, #16]
   2a28c:	cmp	r2, #0
   2a290:	beq	2a2ac <__assert_fail@plt+0x17cb8>
   2a294:	mov	r0, r5
   2a298:	add	sp, sp, #8
   2a29c:	ldrd	r4, [sp]
   2a2a0:	ldr	r6, [sp, #8]
   2a2a4:	add	sp, sp, #12
   2a2a8:	pop	{pc}		; (ldr pc, [sp], #4)
   2a2ac:	vldr	s15, [r4, #8]
   2a2b0:	ldr	r3, [r4, #12]
   2a2b4:	ldr	r2, [r4, #20]
   2a2b8:	vcvt.f32.u32	s15, s15
   2a2bc:	sub	r3, r3, #1
   2a2c0:	vmov	s14, r3
   2a2c4:	vldr	s13, [r2]
   2a2c8:	str	r3, [r4, #12]
   2a2cc:	vmul.f32	s12, s13, s15
   2a2d0:	vcvt.f32.u32	s14, s14
   2a2d4:	vcmpe.f32	s14, s12
   2a2d8:	vmrs	APSR_nzcv, fpscr
   2a2dc:	bpl	2a294 <__assert_fail@plt+0x17ca0>
   2a2e0:	movw	r3, #20020	; 0x4e34
   2a2e4:	movt	r3, #5
   2a2e8:	cmp	r2, r3
   2a2ec:	beq	2a3cc <__assert_fail@plt+0x17dd8>
   2a2f0:	vldr	s11, [pc, #224]	; 2a3d8 <__assert_fail@plt+0x17de4>
   2a2f4:	vldr	s12, [r2, #8]
   2a2f8:	vcmpe.f32	s12, s11
   2a2fc:	vmrs	APSR_nzcv, fpscr
   2a300:	ble	2a3b4 <__assert_fail@plt+0x17dc0>
   2a304:	vldr	s10, [pc, #208]	; 2a3dc <__assert_fail@plt+0x17de8>
   2a308:	vcmpe.f32	s12, s10
   2a30c:	vmrs	APSR_nzcv, fpscr
   2a310:	bpl	2a3b4 <__assert_fail@plt+0x17dc0>
   2a314:	vldr	s10, [pc, #196]	; 2a3e0 <__assert_fail@plt+0x17dec>
   2a318:	vldr	s9, [r2, #12]
   2a31c:	vcmpe.f32	s9, s10
   2a320:	vmrs	APSR_nzcv, fpscr
   2a324:	ble	2a3b4 <__assert_fail@plt+0x17dc0>
   2a328:	vcmpe.f32	s13, #0.0
   2a32c:	vmrs	APSR_nzcv, fpscr
   2a330:	blt	2a3b4 <__assert_fail@plt+0x17dc0>
   2a334:	vadd.f32	s13, s13, s11
   2a338:	vldr	s11, [r2, #4]
   2a33c:	vcmpe.f32	s13, s11
   2a340:	vmrs	APSR_nzcv, fpscr
   2a344:	bpl	2a3b4 <__assert_fail@plt+0x17dc0>
   2a348:	vldr	s10, [pc, #148]	; 2a3e4 <__assert_fail@plt+0x17df0>
   2a34c:	vcmpe.f32	s11, s10
   2a350:	vmrs	APSR_nzcv, fpscr
   2a354:	bhi	2a3b4 <__assert_fail@plt+0x17dc0>
   2a358:	vcmpe.f32	s12, s13
   2a35c:	vmrs	APSR_nzcv, fpscr
   2a360:	ble	2a3b4 <__assert_fail@plt+0x17dc0>
   2a364:	ldrb	r3, [r2, #16]
   2a368:	vmul.f32	s15, s15, s11
   2a36c:	cmp	r3, #0
   2a370:	beq	2a3d0 <__assert_fail@plt+0x17ddc>
   2a374:	vcvt.u32.f32	s15, s15
   2a378:	mov	r0, r4
   2a37c:	vmov	r1, s15
   2a380:	bl	29bfc <__assert_fail@plt+0x17608>
   2a384:	cmp	r0, #0
   2a388:	bne	2a294 <__assert_fail@plt+0x17ca0>
   2a38c:	ldr	r0, [r4, #36]	; 0x24
   2a390:	cmp	r0, #0
   2a394:	beq	2a3a8 <__assert_fail@plt+0x17db4>
   2a398:	ldr	r6, [r0, #4]
   2a39c:	bl	38b10 <__assert_fail@plt+0x2651c>
   2a3a0:	subs	r0, r6, #0
   2a3a4:	bne	2a398 <__assert_fail@plt+0x17da4>
   2a3a8:	mov	r3, #0
   2a3ac:	str	r3, [r4, #36]	; 0x24
   2a3b0:	b	2a294 <__assert_fail@plt+0x17ca0>
   2a3b4:	vldr	s13, [pc, #44]	; 2a3e8 <__assert_fail@plt+0x17df4>
   2a3b8:	str	r3, [r4, #20]
   2a3bc:	vmul.f32	s13, s15, s13
   2a3c0:	vcmpe.f32	s14, s13
   2a3c4:	vmrs	APSR_nzcv, fpscr
   2a3c8:	bpl	2a294 <__assert_fail@plt+0x17ca0>
   2a3cc:	vldr	s12, [pc, #24]	; 2a3ec <__assert_fail@plt+0x17df8>
   2a3d0:	vmul.f32	s15, s15, s12
   2a3d4:	b	2a374 <__assert_fail@plt+0x17d80>
   2a3d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   2a3dc:	svccc	0x00666666
   2a3e0:	svccc	0x008ccccd
   2a3e4:	svccc	0x00800000
   2a3e8:	andeq	r0, r0, r0
   2a3ec:	svccc	0x004ccccd
   2a3f0:	strd	r4, [sp, #-16]!
   2a3f4:	mov	r3, #1
   2a3f8:	mov	r4, r0
   2a3fc:	str	r6, [sp, #8]
   2a400:	str	lr, [sp, #12]
   2a404:	sub	sp, sp, #8
   2a408:	add	r2, sp, #4
   2a40c:	bl	28eb8 <__assert_fail@plt+0x168c4>
   2a410:	subs	r5, r0, #0
   2a414:	beq	2a434 <__assert_fail@plt+0x17e40>
   2a418:	ldr	r2, [sp, #4]
   2a41c:	ldr	r3, [r4, #16]
   2a420:	ldr	r2, [r2]
   2a424:	sub	r3, r3, #1
   2a428:	str	r3, [r4, #16]
   2a42c:	cmp	r2, #0
   2a430:	beq	2a44c <__assert_fail@plt+0x17e58>
   2a434:	mov	r0, r5
   2a438:	add	sp, sp, #8
   2a43c:	ldrd	r4, [sp]
   2a440:	ldr	r6, [sp, #8]
   2a444:	add	sp, sp, #12
   2a448:	pop	{pc}		; (ldr pc, [sp], #4)
   2a44c:	vldr	s15, [r4, #8]
   2a450:	ldr	r3, [r4, #12]
   2a454:	ldr	r2, [r4, #20]
   2a458:	vcvt.f32.u32	s15, s15
   2a45c:	sub	r3, r3, #1
   2a460:	vmov	s14, r3
   2a464:	vldr	s13, [r2]
   2a468:	str	r3, [r4, #12]
   2a46c:	vmul.f32	s12, s13, s15
   2a470:	vcvt.f32.u32	s14, s14
   2a474:	vcmpe.f32	s14, s12
   2a478:	vmrs	APSR_nzcv, fpscr
   2a47c:	bpl	2a434 <__assert_fail@plt+0x17e40>
   2a480:	movw	r3, #20020	; 0x4e34
   2a484:	movt	r3, #5
   2a488:	cmp	r2, r3
   2a48c:	beq	2a56c <__assert_fail@plt+0x17f78>
   2a490:	vldr	s11, [pc, #224]	; 2a578 <__assert_fail@plt+0x17f84>
   2a494:	vldr	s12, [r2, #8]
   2a498:	vcmpe.f32	s12, s11
   2a49c:	vmrs	APSR_nzcv, fpscr
   2a4a0:	ble	2a554 <__assert_fail@plt+0x17f60>
   2a4a4:	vldr	s10, [pc, #208]	; 2a57c <__assert_fail@plt+0x17f88>
   2a4a8:	vcmpe.f32	s12, s10
   2a4ac:	vmrs	APSR_nzcv, fpscr
   2a4b0:	bpl	2a554 <__assert_fail@plt+0x17f60>
   2a4b4:	vldr	s10, [pc, #196]	; 2a580 <__assert_fail@plt+0x17f8c>
   2a4b8:	vldr	s9, [r2, #12]
   2a4bc:	vcmpe.f32	s9, s10
   2a4c0:	vmrs	APSR_nzcv, fpscr
   2a4c4:	ble	2a554 <__assert_fail@plt+0x17f60>
   2a4c8:	vcmpe.f32	s13, #0.0
   2a4cc:	vmrs	APSR_nzcv, fpscr
   2a4d0:	blt	2a554 <__assert_fail@plt+0x17f60>
   2a4d4:	vadd.f32	s13, s13, s11
   2a4d8:	vldr	s11, [r2, #4]
   2a4dc:	vcmpe.f32	s13, s11
   2a4e0:	vmrs	APSR_nzcv, fpscr
   2a4e4:	bpl	2a554 <__assert_fail@plt+0x17f60>
   2a4e8:	vldr	s10, [pc, #148]	; 2a584 <__assert_fail@plt+0x17f90>
   2a4ec:	vcmpe.f32	s11, s10
   2a4f0:	vmrs	APSR_nzcv, fpscr
   2a4f4:	bhi	2a554 <__assert_fail@plt+0x17f60>
   2a4f8:	vcmpe.f32	s12, s13
   2a4fc:	vmrs	APSR_nzcv, fpscr
   2a500:	ble	2a554 <__assert_fail@plt+0x17f60>
   2a504:	ldrb	r3, [r2, #16]
   2a508:	vmul.f32	s15, s15, s11
   2a50c:	cmp	r3, #0
   2a510:	beq	2a570 <__assert_fail@plt+0x17f7c>
   2a514:	vcvt.u32.f32	s15, s15
   2a518:	mov	r0, r4
   2a51c:	vmov	r1, s15
   2a520:	bl	29bfc <__assert_fail@plt+0x17608>
   2a524:	cmp	r0, #0
   2a528:	bne	2a434 <__assert_fail@plt+0x17e40>
   2a52c:	ldr	r0, [r4, #36]	; 0x24
   2a530:	cmp	r0, #0
   2a534:	beq	2a548 <__assert_fail@plt+0x17f54>
   2a538:	ldr	r6, [r0, #4]
   2a53c:	bl	38b10 <__assert_fail@plt+0x2651c>
   2a540:	subs	r0, r6, #0
   2a544:	bne	2a538 <__assert_fail@plt+0x17f44>
   2a548:	mov	r3, #0
   2a54c:	str	r3, [r4, #36]	; 0x24
   2a550:	b	2a434 <__assert_fail@plt+0x17e40>
   2a554:	vldr	s13, [pc, #44]	; 2a588 <__assert_fail@plt+0x17f94>
   2a558:	str	r3, [r4, #20]
   2a55c:	vmul.f32	s13, s15, s13
   2a560:	vcmpe.f32	s14, s13
   2a564:	vmrs	APSR_nzcv, fpscr
   2a568:	bpl	2a434 <__assert_fail@plt+0x17e40>
   2a56c:	vldr	s12, [pc, #24]	; 2a58c <__assert_fail@plt+0x17f98>
   2a570:	vmul.f32	s15, s15, s12
   2a574:	b	2a514 <__assert_fail@plt+0x17f20>
   2a578:	stclcc	12, cr12, [ip, #820]	; 0x334
   2a57c:	svccc	0x00666666
   2a580:	svccc	0x008ccccd
   2a584:	svccc	0x00800000
   2a588:	andeq	r0, r0, r0
   2a58c:	svccc	0x004ccccd
   2a590:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a594:	strd	r6, [sp, #8]
   2a598:	mov	r6, r3
   2a59c:	ands	r3, r3, #32
   2a5a0:	strd	r8, [sp, #16]
   2a5a4:	mov	r9, r1
   2a5a8:	moveq	r1, #1000	; 0x3e8
   2a5ac:	strd	sl, [sp, #24]
   2a5b0:	movne	r1, #1024	; 0x400
   2a5b4:	mov	r8, r0
   2a5b8:	str	lr, [sp, #32]
   2a5bc:	vpush	{d8-d9}
   2a5c0:	sub	sp, sp, #100	; 0x64
   2a5c4:	str	r2, [sp, #4]
   2a5c8:	moveq	r2, #1000	; 0x3e8
   2a5cc:	movne	r2, #1024	; 0x400
   2a5d0:	str	r3, [sp, #32]
   2a5d4:	and	r3, r6, #3
   2a5d8:	str	r1, [sp, #8]
   2a5dc:	str	r3, [sp, #24]
   2a5e0:	mov	r3, #0
   2a5e4:	strd	r2, [sp, #16]
   2a5e8:	str	r1, [sp, #28]
   2a5ec:	bl	124a4 <localeconv@plt>
   2a5f0:	ldr	r3, [sp, #4]
   2a5f4:	mov	r4, r0
   2a5f8:	add	r2, r3, #644	; 0x284
   2a5fc:	ldr	r3, [r0]
   2a600:	add	r2, r2, #3
   2a604:	str	r2, [sp, #24]
   2a608:	mov	r0, r3
   2a60c:	mov	r5, r3
   2a610:	bl	12300 <strlen@plt>
   2a614:	ldmib	r4, {r7, sl}
   2a618:	sub	r2, r0, #1
   2a61c:	movw	r3, #16940	; 0x422c
   2a620:	movt	r3, #5
   2a624:	cmp	r2, #16
   2a628:	movcc	r3, r5
   2a62c:	mov	fp, r0
   2a630:	movcs	fp, #1
   2a634:	str	r3, [sp, #36]	; 0x24
   2a638:	mov	r0, r7
   2a63c:	bl	12300 <strlen@plt>
   2a640:	cmp	r0, #16
   2a644:	movw	r3, #9500	; 0x251c
   2a648:	movt	r3, #5
   2a64c:	ldrd	r0, [sp, #152]	; 0x98
   2a650:	movhi	r7, r3
   2a654:	ldrd	r2, [sp, #160]	; 0xa0
   2a658:	cmp	r3, r1
   2a65c:	cmpeq	r2, r0
   2a660:	bhi	2a960 <__assert_fail@plt+0x1836c>
   2a664:	bl	5055c <__assert_fail@plt+0x3df68>
   2a668:	orrs	r3, r2, r3
   2a66c:	bne	2a6a0 <__assert_fail@plt+0x180ac>
   2a670:	mul	ip, r0, r9
   2a674:	mov	r3, r1
   2a678:	mov	r2, r0
   2a67c:	umull	r4, r5, r0, r8
   2a680:	mla	r1, r8, r1, ip
   2a684:	mov	r0, r4
   2a688:	add	r5, r1, r5
   2a68c:	mov	r1, r5
   2a690:	bl	5055c <__assert_fail@plt+0x3df68>
   2a694:	cmp	r1, r9
   2a698:	cmpeq	r0, r8
   2a69c:	beq	2af74 <__assert_fail@plt+0x18980>
   2a6a0:	ldrd	r0, [sp, #152]	; 0x98
   2a6a4:	bl	50414 <__assert_fail@plt+0x3de20>
   2a6a8:	vmov	d9, r0, r1
   2a6ac:	ldrd	r0, [sp, #160]	; 0xa0
   2a6b0:	bl	50414 <__assert_fail@plt+0x3de20>
   2a6b4:	vmov	d7, r0, r1
   2a6b8:	mov	r0, r8
   2a6bc:	mov	r1, r9
   2a6c0:	vdiv.f64	d8, d9, d7
   2a6c4:	bl	50414 <__assert_fail@plt+0x3de20>
   2a6c8:	vmov	d7, r0, r1
   2a6cc:	tst	r6, #16
   2a6d0:	vmul.f64	d8, d8, d7
   2a6d4:	beq	2a890 <__assert_fail@plt+0x1829c>
   2a6d8:	vldr	s15, [sp, #8]
   2a6dc:	vcvt.f64.s32	d7, s15
   2a6e0:	vmul.f64	d6, d7, d7
   2a6e4:	vcmpe.f64	d8, d6
   2a6e8:	vmrs	APSR_nzcv, fpscr
   2a6ec:	blt	2b1c8 <__assert_fail@plt+0x18bd4>
   2a6f0:	vmul.f64	d5, d7, d6
   2a6f4:	vcmpe.f64	d8, d5
   2a6f8:	vmrs	APSR_nzcv, fpscr
   2a6fc:	blt	2b1d4 <__assert_fail@plt+0x18be0>
   2a700:	vmul.f64	d6, d7, d5
   2a704:	vcmpe.f64	d8, d6
   2a708:	vmrs	APSR_nzcv, fpscr
   2a70c:	blt	2b1e4 <__assert_fail@plt+0x18bf0>
   2a710:	vmul.f64	d5, d7, d6
   2a714:	vcmpe.f64	d8, d5
   2a718:	vmrs	APSR_nzcv, fpscr
   2a71c:	blt	2b208 <__assert_fail@plt+0x18c14>
   2a720:	vmul.f64	d6, d7, d5
   2a724:	vcmpe.f64	d8, d6
   2a728:	vmrs	APSR_nzcv, fpscr
   2a72c:	blt	2b218 <__assert_fail@plt+0x18c24>
   2a730:	vmul.f64	d5, d7, d6
   2a734:	vcmpe.f64	d8, d5
   2a738:	vmrs	APSR_nzcv, fpscr
   2a73c:	blt	2b228 <__assert_fail@plt+0x18c34>
   2a740:	vmul.f64	d7, d7, d5
   2a744:	vcmpe.f64	d8, d7
   2a748:	vmrs	APSR_nzcv, fpscr
   2a74c:	movlt	r3, #7
   2a750:	vmovlt.f64	d7, d5
   2a754:	strlt	r3, [sp, #8]
   2a758:	blt	2a764 <__assert_fail@plt+0x18170>
   2a75c:	mov	r3, #8
   2a760:	str	r3, [sp, #8]
   2a764:	ands	r3, r6, #32
   2a768:	and	r8, r6, #3
   2a76c:	vdiv.f64	d9, d8, d7
   2a770:	clz	r4, r3
   2a774:	add	fp, fp, #1
   2a778:	lsr	r4, r4, #5
   2a77c:	cmp	r8, #1
   2a780:	add	r4, r4, #1
   2a784:	add	r4, r4, fp
   2a788:	beq	2b02c <__assert_fail@plt+0x18a38>
   2a78c:	vldr	d7, [pc, #444]	; 2a950 <__assert_fail@plt+0x1835c>
   2a790:	vcmpe.f64	d9, d7
   2a794:	vmrs	APSR_nzcv, fpscr
   2a798:	vmovpl.f64	d7, d9
   2a79c:	bpl	2a7dc <__assert_fail@plt+0x181e8>
   2a7a0:	vmov	r0, r1, d9
   2a7a4:	bl	505a8 <__assert_fail@plt+0x3dfb4>
   2a7a8:	mov	r5, r0
   2a7ac:	mov	r9, r1
   2a7b0:	bl	50414 <__assert_fail@plt+0x3de20>
   2a7b4:	cmp	r8, #0
   2a7b8:	vmov	d7, r0, r1
   2a7bc:	bne	2a7dc <__assert_fail@plt+0x181e8>
   2a7c0:	vcmp.f64	d9, d7
   2a7c4:	vmrs	APSR_nzcv, fpscr
   2a7c8:	beq	2a7dc <__assert_fail@plt+0x181e8>
   2a7cc:	adds	r0, r5, #1
   2a7d0:	adc	r1, r9, #0
   2a7d4:	bl	50414 <__assert_fail@plt+0x3de20>
   2a7d8:	vmov	d7, r0, r1
   2a7dc:	ldr	r5, [sp, #4]
   2a7e0:	movw	r1, #20188	; 0x4edc
   2a7e4:	movt	r1, #5
   2a7e8:	vmov	r2, r3, d7
   2a7ec:	mov	r0, r5
   2a7f0:	bl	124b0 <sprintf@plt>
   2a7f4:	mov	r0, r5
   2a7f8:	bl	12300 <strlen@plt>
   2a7fc:	cmp	r0, r4
   2a800:	bls	2af0c <__assert_fail@plt+0x18918>
   2a804:	vldr	d7, [pc, #332]	; 2a958 <__assert_fail@plt+0x18364>
   2a808:	vmul.f64	d9, d9, d7
   2a80c:	vldr	d7, [pc, #316]	; 2a950 <__assert_fail@plt+0x1835c>
   2a810:	vcmpe.f64	d9, d7
   2a814:	vmrs	APSR_nzcv, fpscr
   2a818:	bpl	2a860 <__assert_fail@plt+0x1826c>
   2a81c:	vmov	r0, r1, d9
   2a820:	bl	505a8 <__assert_fail@plt+0x3dfb4>
   2a824:	mov	r4, r0
   2a828:	mov	r5, r1
   2a82c:	bl	50414 <__assert_fail@plt+0x3de20>
   2a830:	and	r3, r6, #3
   2a834:	vmov	d7, r0, r1
   2a838:	cmp	r3, #0
   2a83c:	bne	2a85c <__assert_fail@plt+0x18268>
   2a840:	vcmp.f64	d9, d7
   2a844:	vmrs	APSR_nzcv, fpscr
   2a848:	beq	2a85c <__assert_fail@plt+0x18268>
   2a84c:	adds	r0, r4, #1
   2a850:	adc	r1, r5, #0
   2a854:	bl	50414 <__assert_fail@plt+0x3de20>
   2a858:	vmov	d7, r0, r1
   2a85c:	vmov.f64	d9, d7
   2a860:	vldr	d7, [pc, #240]	; 2a958 <__assert_fail@plt+0x18364>
   2a864:	movw	r1, #20180	; 0x4ed4
   2a868:	movt	r1, #5
   2a86c:	ldr	r4, [sp, #4]
   2a870:	vdiv.f64	d7, d9, d7
   2a874:	mov	r0, r4
   2a878:	vmov	r2, r3, d7
   2a87c:	bl	124b0 <sprintf@plt>
   2a880:	mov	r0, r4
   2a884:	bl	12300 <strlen@plt>
   2a888:	mov	r8, r0
   2a88c:	b	2a8d8 <__assert_fail@plt+0x182e4>
   2a890:	and	r8, r6, #3
   2a894:	cmp	r8, #1
   2a898:	beq	2a8ac <__assert_fail@plt+0x182b8>
   2a89c:	vldr	d7, [pc, #172]	; 2a950 <__assert_fail@plt+0x1835c>
   2a8a0:	vcmpe.f64	d8, d7
   2a8a4:	vmrs	APSR_nzcv, fpscr
   2a8a8:	bmi	2af30 <__assert_fail@plt+0x1893c>
   2a8ac:	ldr	r4, [sp, #4]
   2a8b0:	mvn	ip, #0
   2a8b4:	movw	r1, #20180	; 0x4ed4
   2a8b8:	movt	r1, #5
   2a8bc:	vmov	r2, r3, d8
   2a8c0:	str	ip, [sp, #8]
   2a8c4:	mov	r0, r4
   2a8c8:	bl	124b0 <sprintf@plt>
   2a8cc:	mov	r0, r4
   2a8d0:	bl	12300 <strlen@plt>
   2a8d4:	mov	r8, r0
   2a8d8:	mov	r2, r0
   2a8dc:	ldr	r1, [sp, #4]
   2a8e0:	ldr	r3, [sp, #24]
   2a8e4:	sub	r9, r3, r0
   2a8e8:	mov	r0, r9
   2a8ec:	add	r8, r9, r8
   2a8f0:	bl	11fb8 <memmove@plt>
   2a8f4:	tst	r6, #4
   2a8f8:	bne	2acec <__assert_fail@plt+0x186f8>
   2a8fc:	tst	r6, #128	; 0x80
   2a900:	beq	2a920 <__assert_fail@plt+0x1832c>
   2a904:	ldr	r3, [sp, #8]
   2a908:	cmn	r3, #1
   2a90c:	beq	2ad84 <__assert_fail@plt+0x18790>
   2a910:	ldr	r2, [sp, #8]
   2a914:	and	r3, r6, #256	; 0x100
   2a918:	orrs	r2, r3, r2
   2a91c:	bne	2b09c <__assert_fail@plt+0x18aa8>
   2a920:	ldr	r2, [sp, #24]
   2a924:	mov	r3, #0
   2a928:	mov	r0, r9
   2a92c:	strb	r3, [r2]
   2a930:	add	sp, sp, #100	; 0x64
   2a934:	vpop	{d8-d9}
   2a938:	ldrd	r4, [sp]
   2a93c:	ldrd	r6, [sp, #8]
   2a940:	ldrd	r8, [sp, #16]
   2a944:	ldrd	sl, [sp, #24]
   2a948:	add	sp, sp, #32
   2a94c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a950:	andeq	r0, r0, r0
   2a954:	mvnsmi	r0, #0
   2a958:	andeq	r0, r0, r0
   2a95c:	eormi	r0, r4, r0
   2a960:	mov	r2, r0
   2a964:	mov	r3, r1
   2a968:	orrs	r3, r2, r3
   2a96c:	beq	2a6a0 <__assert_fail@plt+0x180ac>
   2a970:	ldrd	r2, [sp, #152]	; 0x98
   2a974:	ldrd	r0, [sp, #160]	; 0xa0
   2a978:	bl	5055c <__assert_fail@plt+0x3df68>
   2a97c:	orrs	r3, r2, r3
   2a980:	mov	r4, r0
   2a984:	mov	r5, r1
   2a988:	bne	2a6a0 <__assert_fail@plt+0x180ac>
   2a98c:	mov	r0, r8
   2a990:	mov	r1, r9
   2a994:	mov	r2, r4
   2a998:	mov	r3, r5
   2a99c:	bl	5055c <__assert_fail@plt+0x3df68>
   2a9a0:	mov	lr, r2
   2a9a4:	mov	r8, r1
   2a9a8:	lsl	r1, r3, #2
   2a9ac:	mov	r9, r0
   2a9b0:	lsl	r0, lr, #2
   2a9b4:	mov	ip, r3
   2a9b8:	orr	r1, r1, lr, lsr #30
   2a9bc:	mov	r2, r4
   2a9c0:	mov	r3, r5
   2a9c4:	adds	r0, r0, lr
   2a9c8:	strd	r4, [sp, #8]
   2a9cc:	mov	r4, r9
   2a9d0:	adc	r1, r1, ip
   2a9d4:	adds	r0, r0, r0
   2a9d8:	adc	r1, r1, r1
   2a9dc:	mov	r5, r8
   2a9e0:	bl	5055c <__assert_fail@plt+0x3df68>
   2a9e4:	adds	r1, r2, r2
   2a9e8:	adc	r3, r3, r3
   2a9ec:	str	r1, [sp, #40]	; 0x28
   2a9f0:	str	r3, [sp, #44]	; 0x2c
   2a9f4:	ldrd	r2, [sp, #8]
   2a9f8:	ldrd	r8, [sp, #40]	; 0x28
   2a9fc:	str	r0, [sp, #40]	; 0x28
   2aa00:	cmp	r3, r9
   2aa04:	cmpeq	r2, r8
   2aa08:	bls	2b090 <__assert_fail@plt+0x18a9c>
   2aa0c:	mov	r3, r8
   2aa10:	orrs	r3, r3, r9
   2aa14:	movne	r9, #1
   2aa18:	moveq	r9, #0
   2aa1c:	ands	r3, r6, #16
   2aa20:	str	r3, [sp, #8]
   2aa24:	beq	2af88 <__assert_fail@plt+0x18994>
   2aa28:	ldrd	r2, [sp, #16]
   2aa2c:	cmp	r5, r3
   2aa30:	cmpeq	r4, r2
   2aa34:	bcc	2b0e8 <__assert_fail@plt+0x18af4>
   2aa38:	mov	r0, r4
   2aa3c:	mov	r1, r5
   2aa40:	bl	5055c <__assert_fail@plt+0x3df68>
   2aa44:	ldr	ip, [sp, #40]	; 0x28
   2aa48:	add	r2, r2, r2, lsl #2
   2aa4c:	mov	r4, r0
   2aa50:	asr	r3, r9, #1
   2aa54:	mov	r5, r1
   2aa58:	add	r2, ip, r2, lsl #1
   2aa5c:	ldr	ip, [sp, #28]
   2aa60:	udiv	r8, r2, ip
   2aa64:	mls	r2, ip, r8, r2
   2aa68:	str	r8, [sp, #40]	; 0x28
   2aa6c:	add	r2, r3, r2, lsl #1
   2aa70:	cmp	ip, r2
   2aa74:	add	r2, r9, r2
   2aa78:	bhi	2b120 <__assert_fail@plt+0x18b2c>
   2aa7c:	cmp	ip, r2
   2aa80:	mov	ip, #1
   2aa84:	movcc	r9, #3
   2aa88:	movcs	r9, #2
   2aa8c:	ldrd	r2, [sp, #16]
   2aa90:	cmp	r3, r1
   2aa94:	cmpeq	r2, r0
   2aa98:	bhi	2b36c <__assert_fail@plt+0x18d78>
   2aa9c:	bl	5055c <__assert_fail@plt+0x3df68>
   2aaa0:	add	r2, r2, r2, lsl #2
   2aaa4:	mov	r4, r0
   2aaa8:	mov	r5, r1
   2aaac:	asr	r3, r9, #1
   2aab0:	add	r8, r8, r2, lsl #1
   2aab4:	ldr	r2, [sp, #28]
   2aab8:	udiv	ip, r8, r2
   2aabc:	mls	r8, r2, ip, r8
   2aac0:	str	ip, [sp, #8]
   2aac4:	str	ip, [sp, #40]	; 0x28
   2aac8:	add	r3, r3, r8, lsl #1
   2aacc:	cmp	r2, r3
   2aad0:	add	r3, r9, r3
   2aad4:	bhi	2b160 <__assert_fail@plt+0x18b6c>
   2aad8:	cmp	r2, r3
   2aadc:	mov	ip, #1
   2aae0:	movcc	r9, #3
   2aae4:	movcs	r9, #2
   2aae8:	ldrd	r2, [sp, #16]
   2aaec:	cmp	r1, r3
   2aaf0:	cmpeq	r0, r2
   2aaf4:	bcc	2b384 <__assert_fail@plt+0x18d90>
   2aaf8:	bl	5055c <__assert_fail@plt+0x3df68>
   2aafc:	ldr	ip, [sp, #8]
   2ab00:	add	r2, r2, r2, lsl #2
   2ab04:	mov	r4, r0
   2ab08:	asr	r3, r9, #1
   2ab0c:	mov	r5, r1
   2ab10:	add	r2, ip, r2, lsl #1
   2ab14:	ldr	ip, [sp, #28]
   2ab18:	udiv	r8, r2, ip
   2ab1c:	mls	r2, ip, r8, r2
   2ab20:	str	r8, [sp, #40]	; 0x28
   2ab24:	add	r3, r3, r2, lsl #1
   2ab28:	cmp	ip, r3
   2ab2c:	add	r3, r9, r3
   2ab30:	bhi	2b170 <__assert_fail@plt+0x18b7c>
   2ab34:	cmp	ip, r3
   2ab38:	mov	ip, #1
   2ab3c:	movcc	r9, #3
   2ab40:	movcs	r9, #2
   2ab44:	ldrd	r2, [sp, #16]
   2ab48:	cmp	r1, r3
   2ab4c:	cmpeq	r0, r2
   2ab50:	bcc	2b378 <__assert_fail@plt+0x18d84>
   2ab54:	bl	5055c <__assert_fail@plt+0x3df68>
   2ab58:	add	r2, r2, r2, lsl #2
   2ab5c:	mov	r4, r0
   2ab60:	mov	r5, r1
   2ab64:	asr	r3, r9, #1
   2ab68:	add	r8, r8, r2, lsl #1
   2ab6c:	ldr	r2, [sp, #28]
   2ab70:	udiv	ip, r8, r2
   2ab74:	mls	r8, r2, ip, r8
   2ab78:	str	ip, [sp, #8]
   2ab7c:	str	ip, [sp, #40]	; 0x28
   2ab80:	add	r3, r3, r8, lsl #1
   2ab84:	cmp	r2, r3
   2ab88:	add	r3, r9, r3
   2ab8c:	bhi	2b198 <__assert_fail@plt+0x18ba4>
   2ab90:	cmp	r3, r2
   2ab94:	mov	ip, #1
   2ab98:	movhi	r9, #3
   2ab9c:	movls	r9, #2
   2aba0:	ldrd	r2, [sp, #16]
   2aba4:	cmp	r1, r3
   2aba8:	cmpeq	r0, r2
   2abac:	bcc	2b390 <__assert_fail@plt+0x18d9c>
   2abb0:	bl	5055c <__assert_fail@plt+0x3df68>
   2abb4:	ldr	ip, [sp, #8]
   2abb8:	add	r2, r2, r2, lsl #2
   2abbc:	mov	r4, r0
   2abc0:	asr	r3, r9, #1
   2abc4:	mov	r5, r1
   2abc8:	add	r2, ip, r2, lsl #1
   2abcc:	ldr	ip, [sp, #28]
   2abd0:	udiv	r8, r2, ip
   2abd4:	mls	r2, ip, r8, r2
   2abd8:	str	r8, [sp, #40]	; 0x28
   2abdc:	add	r3, r3, r2, lsl #1
   2abe0:	cmp	ip, r3
   2abe4:	add	r3, r9, r3
   2abe8:	bhi	2b1a8 <__assert_fail@plt+0x18bb4>
   2abec:	cmp	ip, r3
   2abf0:	mov	ip, #1
   2abf4:	movcc	r9, #3
   2abf8:	movcs	r9, #2
   2abfc:	ldrd	r2, [sp, #16]
   2ac00:	cmp	r3, r1
   2ac04:	cmpeq	r2, r0
   2ac08:	bhi	2b3a8 <__assert_fail@plt+0x18db4>
   2ac0c:	bl	5055c <__assert_fail@plt+0x3df68>
   2ac10:	add	r2, r2, r2, lsl #2
   2ac14:	mov	r5, r1
   2ac18:	ldr	r1, [sp, #28]
   2ac1c:	asr	r3, r9, #1
   2ac20:	mov	r4, r0
   2ac24:	add	r8, r8, r2, lsl #1
   2ac28:	udiv	r2, r8, r1
   2ac2c:	mls	r8, r1, r2, r8
   2ac30:	str	r2, [sp, #40]	; 0x28
   2ac34:	add	r3, r3, r8, lsl #1
   2ac38:	cmp	r1, r3
   2ac3c:	add	r3, r9, r3
   2ac40:	bhi	2b1b8 <__assert_fail@plt+0x18bc4>
   2ac44:	cmp	r1, r3
   2ac48:	mov	ip, #1
   2ac4c:	movcs	r9, #2
   2ac50:	movcc	r9, #3
   2ac54:	mov	r3, #6
   2ac58:	str	r3, [sp, #8]
   2ac5c:	cmp	r5, #0
   2ac60:	cmpeq	r4, #9
   2ac64:	bhi	2af90 <__assert_fail@plt+0x1899c>
   2ac68:	and	r3, r6, #3
   2ac6c:	cmp	r3, #1
   2ac70:	beq	2b238 <__assert_fail@plt+0x18c44>
   2ac74:	and	r3, r6, #3
   2ac78:	cmp	r3, #0
   2ac7c:	moveq	r3, ip
   2ac80:	movne	r3, #0
   2ac84:	cmp	r3, #0
   2ac88:	ldr	r3, [sp, #40]	; 0x28
   2ac8c:	bne	2b1f4 <__assert_fail@plt+0x18c00>
   2ac90:	cmp	r3, #0
   2ac94:	addne	r3, r3, #48	; 0x30
   2ac98:	uxtbne	r3, r3
   2ac9c:	bne	2acac <__assert_fail@plt+0x186b8>
   2aca0:	tst	r6, #8
   2aca4:	bne	2b340 <__assert_fail@plt+0x18d4c>
   2aca8:	mov	r3, #48	; 0x30
   2acac:	ldr	r1, [sp, #4]
   2acb0:	mov	r2, fp
   2acb4:	mov	r9, #0
   2acb8:	add	r8, r1, #644	; 0x284
   2acbc:	strb	r3, [r1, #646]	; 0x286
   2acc0:	add	r8, r8, #2
   2acc4:	ldr	r1, [sp, #36]	; 0x24
   2acc8:	sub	r8, r8, fp
   2accc:	mov	r0, r8
   2acd0:	bl	12024 <memcpy@plt>
   2acd4:	and	r3, r6, #3
   2acd8:	cmp	r3, #1
   2acdc:	beq	2afe0 <__assert_fail@plt+0x189ec>
   2ace0:	mov	r3, #0
   2ace4:	str	r3, [sp, #40]	; 0x28
   2ace8:	b	2afa0 <__assert_fail@plt+0x189ac>
   2acec:	mov	r0, r7
   2acf0:	sub	r4, r8, r9
   2acf4:	bl	12300 <strlen@plt>
   2acf8:	mov	r5, r0
   2acfc:	mvn	fp, #0
   2ad00:	mov	r1, r9
   2ad04:	mov	r2, r4
   2ad08:	add	r0, sp, #52	; 0x34
   2ad0c:	bl	12024 <memcpy@plt>
   2ad10:	ldrb	r3, [sl]
   2ad14:	cmp	r3, #0
   2ad18:	beq	2ad2c <__assert_fail@plt+0x18738>
   2ad1c:	cmp	r3, #255	; 0xff
   2ad20:	add	sl, sl, #1
   2ad24:	movne	fp, r3
   2ad28:	moveq	fp, r4
   2ad2c:	sub	r9, r8, fp
   2ad30:	cmp	fp, r4
   2ad34:	mov	r2, fp
   2ad38:	mov	r0, r9
   2ad3c:	bls	2ad58 <__assert_fail@plt+0x18764>
   2ad40:	sub	r9, r8, r4
   2ad44:	mov	r2, r4
   2ad48:	add	r1, sp, #52	; 0x34
   2ad4c:	mov	r0, r9
   2ad50:	bl	12024 <memcpy@plt>
   2ad54:	b	2a8fc <__assert_fail@plt+0x18308>
   2ad58:	sub	r4, r4, fp
   2ad5c:	add	r3, sp, #52	; 0x34
   2ad60:	add	r1, r3, r4
   2ad64:	sub	r8, r9, r5
   2ad68:	bl	12024 <memcpy@plt>
   2ad6c:	cmp	r4, #0
   2ad70:	mov	r2, r5
   2ad74:	mov	r1, r7
   2ad78:	mov	r0, r8
   2ad7c:	bne	2ad0c <__assert_fail@plt+0x18718>
   2ad80:	b	2a8fc <__assert_fail@plt+0x18308>
   2ad84:	ldrd	r2, [sp, #160]	; 0xa0
   2ad88:	cmp	r3, #0
   2ad8c:	cmpeq	r2, #1
   2ad90:	bls	2b154 <__assert_fail@plt+0x18b60>
   2ad94:	mov	r0, r2
   2ad98:	mov	r1, r3
   2ad9c:	ldrd	r2, [sp, #16]
   2ada0:	cmp	r1, r3
   2ada4:	cmpeq	r0, r2
   2ada8:	bls	2b3e8 <__assert_fail@plt+0x18df4>
   2adac:	mul	r1, r2, r3
   2adb0:	umull	r4, r5, r2, r2
   2adb4:	add	r5, r5, r1, lsl #1
   2adb8:	ldrd	r0, [sp, #160]	; 0xa0
   2adbc:	cmp	r1, r5
   2adc0:	cmpeq	r0, r4
   2adc4:	bls	2b254 <__assert_fail@plt+0x18c60>
   2adc8:	mov	r1, r3
   2adcc:	mul	r3, r2, r5
   2add0:	mov	r0, r2
   2add4:	umull	sl, fp, r0, r4
   2add8:	mla	r2, r4, r1, r3
   2addc:	add	fp, r2, fp
   2ade0:	ldrd	r2, [sp, #160]	; 0xa0
   2ade4:	cmp	r3, fp
   2ade8:	cmpeq	r2, sl
   2adec:	bls	2b288 <__assert_fail@plt+0x18c94>
   2adf0:	mov	r3, r1
   2adf4:	mul	r1, r0, fp
   2adf8:	mov	r2, r0
   2adfc:	umull	r4, r5, r0, sl
   2ae00:	mla	r0, sl, r3, r1
   2ae04:	add	r5, r0, r5
   2ae08:	ldrd	r0, [sp, #160]	; 0xa0
   2ae0c:	cmp	r1, r5
   2ae10:	cmpeq	r0, r4
   2ae14:	bls	2b3b4 <__assert_fail@plt+0x18dc0>
   2ae18:	mov	r1, r3
   2ae1c:	mul	r3, r2, r5
   2ae20:	mov	r0, r2
   2ae24:	umull	sl, fp, r2, r4
   2ae28:	mla	r2, r4, r1, r3
   2ae2c:	add	fp, r2, fp
   2ae30:	ldrd	r2, [sp, #160]	; 0xa0
   2ae34:	cmp	r3, fp
   2ae38:	cmpeq	r2, sl
   2ae3c:	bls	2b2bc <__assert_fail@plt+0x18cc8>
   2ae40:	umull	r4, r5, r0, sl
   2ae44:	mov	r3, r1
   2ae48:	mov	r2, r0
   2ae4c:	mul	r1, r0, fp
   2ae50:	strd	r4, [sp, #8]
   2ae54:	mov	r4, r0
   2ae58:	mov	r5, r3
   2ae5c:	mla	r0, sl, r3, r1
   2ae60:	ldr	r3, [sp, #12]
   2ae64:	add	r3, r0, r3
   2ae68:	ldrd	r0, [sp, #160]	; 0xa0
   2ae6c:	str	r3, [sp, #12]
   2ae70:	ldrd	sl, [sp, #8]
   2ae74:	cmp	r1, fp
   2ae78:	cmpeq	r0, sl
   2ae7c:	bls	2b2f0 <__assert_fail@plt+0x18cfc>
   2ae80:	mul	r3, r4, fp
   2ae84:	umull	r0, r1, r4, sl
   2ae88:	mla	r2, sl, r5, r3
   2ae8c:	add	r1, r2, r1
   2ae90:	ldrd	r2, [sp, #160]	; 0xa0
   2ae94:	cmp	r3, r1
   2ae98:	cmpeq	r2, r0
   2ae9c:	bls	2b438 <__assert_fail@plt+0x18e44>
   2aea0:	tst	r6, #64	; 0x40
   2aea4:	and	r3, r6, #256	; 0x100
   2aea8:	beq	2aec0 <__assert_fail@plt+0x188cc>
   2aeac:	ldr	r1, [sp, #4]
   2aeb0:	mov	r2, #32
   2aeb4:	add	r0, r1, #648	; 0x288
   2aeb8:	strb	r2, [r1, #647]	; 0x287
   2aebc:	str	r0, [sp, #24]
   2aec0:	mov	r2, #8
   2aec4:	str	r2, [sp, #8]
   2aec8:	ldr	r2, [sp, #32]
   2aecc:	adds	r1, r2, #0
   2aed0:	movne	r1, #1
   2aed4:	ldr	r0, [sp, #8]
   2aed8:	movw	r2, #20148	; 0x4eb4
   2aedc:	movt	r2, #5
   2aee0:	cmp	r3, #0
   2aee4:	ldrb	r0, [r2, r0]
   2aee8:	ldr	r2, [sp, #24]
   2aeec:	strb	r0, [r2], #1
   2aef0:	beq	2b0e0 <__assert_fail@plt+0x18aec>
   2aef4:	cmp	r1, #0
   2aef8:	bne	2b0f4 <__assert_fail@plt+0x18b00>
   2aefc:	mov	r3, #66	; 0x42
   2af00:	strb	r3, [r2], #1
   2af04:	str	r2, [sp, #24]
   2af08:	b	2a920 <__assert_fail@plt+0x1832c>
   2af0c:	tst	r6, #8
   2af10:	beq	2af28 <__assert_fail@plt+0x18934>
   2af14:	ldr	r3, [sp, #4]
   2af18:	add	r3, r3, r0
   2af1c:	ldrb	r3, [r3, #-1]
   2af20:	cmp	r3, #48	; 0x30
   2af24:	beq	2b180 <__assert_fail@plt+0x18b8c>
   2af28:	sub	r8, r0, fp
   2af2c:	b	2a8d8 <__assert_fail@plt+0x182e4>
   2af30:	vmov	r0, r1, d8
   2af34:	bl	505a8 <__assert_fail@plt+0x3dfb4>
   2af38:	mov	r4, r0
   2af3c:	mov	r5, r1
   2af40:	bl	50414 <__assert_fail@plt+0x3de20>
   2af44:	cmp	r8, #0
   2af48:	vmov	d7, r0, r1
   2af4c:	bne	2af6c <__assert_fail@plt+0x18978>
   2af50:	vcmp.f64	d8, d7
   2af54:	vmrs	APSR_nzcv, fpscr
   2af58:	beq	2af6c <__assert_fail@plt+0x18978>
   2af5c:	adds	r0, r4, #1
   2af60:	adc	r1, r5, #0
   2af64:	bl	50414 <__assert_fail@plt+0x3de20>
   2af68:	vmov	d7, r0, r1
   2af6c:	vmov.f64	d8, d7
   2af70:	b	2a8ac <__assert_fail@plt+0x182b8>
   2af74:	mov	r9, #0
   2af78:	ands	r3, r6, #16
   2af7c:	str	r3, [sp, #8]
   2af80:	str	r9, [sp, #40]	; 0x28
   2af84:	bne	2aa28 <__assert_fail@plt+0x18434>
   2af88:	mvn	r3, #0
   2af8c:	str	r3, [sp, #8]
   2af90:	and	r3, r6, #3
   2af94:	cmp	r3, #1
   2af98:	beq	2b060 <__assert_fail@plt+0x18a6c>
   2af9c:	ldr	r8, [sp, #24]
   2afa0:	and	r3, r6, #3
   2afa4:	cmp	r3, #0
   2afa8:	bne	2afe0 <__assert_fail@plt+0x189ec>
   2afac:	ldr	r3, [sp, #40]	; 0x28
   2afb0:	add	r3, r9, r3
   2afb4:	cmp	r3, #0
   2afb8:	ble	2afe0 <__assert_fail@plt+0x189ec>
   2afbc:	adds	r4, r4, #1
   2afc0:	adc	r5, r5, #0
   2afc4:	ands	r3, r6, #16
   2afc8:	cmp	r3, #0
   2afcc:	beq	2afe0 <__assert_fail@plt+0x189ec>
   2afd0:	ldrd	r2, [sp, #16]
   2afd4:	cmp	r5, r3
   2afd8:	cmpeq	r4, r2
   2afdc:	beq	2b130 <__assert_fail@plt+0x18b3c>
   2afe0:	mov	r9, r8
   2afe4:	mov	r0, r4
   2afe8:	mov	r1, r5
   2afec:	mov	r2, #10
   2aff0:	mov	r3, #0
   2aff4:	bl	5055c <__assert_fail@plt+0x3df68>
   2aff8:	add	r2, r2, #48	; 0x30
   2affc:	mov	r0, r4
   2b000:	mov	r1, r5
   2b004:	mov	r3, #0
   2b008:	strb	r2, [r9, #-1]!
   2b00c:	mov	r2, #10
   2b010:	bl	5055c <__assert_fail@plt+0x3df68>
   2b014:	cmp	r5, #0
   2b018:	mov	r5, r1
   2b01c:	cmpeq	r4, #9
   2b020:	mov	r4, r0
   2b024:	bhi	2afe4 <__assert_fail@plt+0x189f0>
   2b028:	b	2a8f4 <__assert_fail@plt+0x18300>
   2b02c:	ldr	r5, [sp, #4]
   2b030:	movw	r1, #20188	; 0x4edc
   2b034:	movt	r1, #5
   2b038:	vmov	r2, r3, d9
   2b03c:	mov	r0, r5
   2b040:	bl	124b0 <sprintf@plt>
   2b044:	mov	r0, r5
   2b048:	bl	12300 <strlen@plt>
   2b04c:	cmp	r4, r0
   2b050:	bcs	2af0c <__assert_fail@plt+0x18918>
   2b054:	vldr	d7, [pc, #980]	; 2b430 <__assert_fail@plt+0x18e3c>
   2b058:	vmul.f64	d9, d9, d7
   2b05c:	b	2a860 <__assert_fail@plt+0x1826c>
   2b060:	and	r0, r4, #1
   2b064:	mov	r1, #0
   2b068:	ldr	r8, [sp, #24]
   2b06c:	adds	r2, r0, r9
   2b070:	adc	r3, r1, r9, asr #31
   2b074:	orr	r2, r2, r3
   2b078:	ldr	r3, [sp, #40]	; 0x28
   2b07c:	cmp	r2, r1
   2b080:	addne	r3, r3, #1
   2b084:	cmp	r3, #5
   2b088:	bgt	2afbc <__assert_fail@plt+0x189c8>
   2b08c:	b	2afe0 <__assert_fail@plt+0x189ec>
   2b090:	movcs	r9, #2
   2b094:	movcc	r9, #3
   2b098:	b	2aa1c <__assert_fail@plt+0x18428>
   2b09c:	tst	r6, #64	; 0x40
   2b0a0:	bne	2b108 <__assert_fail@plt+0x18b14>
   2b0a4:	ldr	r2, [sp, #8]
   2b0a8:	cmp	r2, #0
   2b0ac:	beq	2b41c <__assert_fail@plt+0x18e28>
   2b0b0:	ldr	r0, [sp, #8]
   2b0b4:	ldr	r2, [sp, #32]
   2b0b8:	adds	r1, r2, #0
   2b0bc:	movne	r1, #1
   2b0c0:	cmp	r2, #0
   2b0c4:	cmpeq	r0, #1
   2b0c8:	bne	2aed4 <__assert_fail@plt+0x188e0>
   2b0cc:	ldr	r2, [sp, #24]
   2b0d0:	mov	r1, #107	; 0x6b
   2b0d4:	cmp	r3, #0
   2b0d8:	strb	r1, [r2], #1
   2b0dc:	bne	2aefc <__assert_fail@plt+0x18908>
   2b0e0:	str	r2, [sp, #24]
   2b0e4:	b	2a920 <__assert_fail@plt+0x1832c>
   2b0e8:	mov	r3, #0
   2b0ec:	str	r3, [sp, #8]
   2b0f0:	b	2af90 <__assert_fail@plt+0x1899c>
   2b0f4:	ldr	r1, [sp, #24]
   2b0f8:	mov	r3, #105	; 0x69
   2b0fc:	add	r2, r1, #2
   2b100:	strb	r3, [r1, #1]
   2b104:	b	2aefc <__assert_fail@plt+0x18908>
   2b108:	ldr	r1, [sp, #4]
   2b10c:	mov	r2, #32
   2b110:	add	r0, r1, #648	; 0x288
   2b114:	strb	r2, [r1, #647]	; 0x287
   2b118:	str	r0, [sp, #24]
   2b11c:	b	2b0a4 <__assert_fail@plt+0x18ab0>
   2b120:	adds	r9, r2, #0
   2b124:	movne	r9, #1
   2b128:	mov	ip, r9
   2b12c:	b	2aa8c <__assert_fail@plt+0x18498>
   2b130:	ldr	r3, [sp, #8]
   2b134:	tst	r6, #8
   2b138:	add	r3, r3, #1
   2b13c:	str	r3, [sp, #8]
   2b140:	beq	2b348 <__assert_fail@plt+0x18d54>
   2b144:	mov	r3, #49	; 0x31
   2b148:	sub	r9, r8, #1
   2b14c:	strb	r3, [r8, #-1]
   2b150:	b	2a8f4 <__assert_fail@plt+0x18300>
   2b154:	mov	r3, #0
   2b158:	str	r3, [sp, #8]
   2b15c:	b	2a910 <__assert_fail@plt+0x1831c>
   2b160:	adds	ip, r3, #0
   2b164:	movne	ip, #1
   2b168:	mov	r9, ip
   2b16c:	b	2aae8 <__assert_fail@plt+0x184f4>
   2b170:	adds	ip, r3, #0
   2b174:	movne	ip, #1
   2b178:	mov	r9, ip
   2b17c:	b	2ab44 <__assert_fail@plt+0x18550>
   2b180:	vldr	d7, [pc, #680]	; 2b430 <__assert_fail@plt+0x18e3c>
   2b184:	and	r3, r6, #3
   2b188:	cmp	r3, #1
   2b18c:	vmul.f64	d9, d9, d7
   2b190:	bne	2a80c <__assert_fail@plt+0x18218>
   2b194:	b	2a860 <__assert_fail@plt+0x1826c>
   2b198:	adds	ip, r3, #0
   2b19c:	movne	ip, #1
   2b1a0:	mov	r9, ip
   2b1a4:	b	2aba0 <__assert_fail@plt+0x185ac>
   2b1a8:	adds	ip, r3, #0
   2b1ac:	movne	ip, #1
   2b1b0:	mov	r9, ip
   2b1b4:	b	2abfc <__assert_fail@plt+0x18608>
   2b1b8:	adds	ip, r3, #0
   2b1bc:	movne	ip, #1
   2b1c0:	mov	r9, ip
   2b1c4:	b	2ac54 <__assert_fail@plt+0x18660>
   2b1c8:	mov	r3, #1
   2b1cc:	str	r3, [sp, #8]
   2b1d0:	b	2a764 <__assert_fail@plt+0x18170>
   2b1d4:	mov	r3, #2
   2b1d8:	vmov.f64	d7, d6
   2b1dc:	str	r3, [sp, #8]
   2b1e0:	b	2a764 <__assert_fail@plt+0x18170>
   2b1e4:	mov	r3, #3
   2b1e8:	vmov.f64	d7, d5
   2b1ec:	str	r3, [sp, #8]
   2b1f0:	b	2a764 <__assert_fail@plt+0x18170>
   2b1f4:	cmp	r3, #9
   2b1f8:	beq	2b324 <__assert_fail@plt+0x18d30>
   2b1fc:	add	r3, r3, #49	; 0x31
   2b200:	uxtb	r3, r3
   2b204:	b	2acac <__assert_fail@plt+0x186b8>
   2b208:	mov	r3, #4
   2b20c:	vmov.f64	d7, d6
   2b210:	str	r3, [sp, #8]
   2b214:	b	2a764 <__assert_fail@plt+0x18170>
   2b218:	mov	r3, #5
   2b21c:	vmov.f64	d7, d5
   2b220:	str	r3, [sp, #8]
   2b224:	b	2a764 <__assert_fail@plt+0x18170>
   2b228:	mov	r3, #6
   2b22c:	vmov.f64	d7, d6
   2b230:	str	r3, [sp, #8]
   2b234:	b	2a764 <__assert_fail@plt+0x18170>
   2b238:	ldr	r3, [sp, #40]	; 0x28
   2b23c:	and	r3, r3, #1
   2b240:	add	r3, r3, r9
   2b244:	cmp	r3, #2
   2b248:	movle	r3, #0
   2b24c:	movgt	r3, #1
   2b250:	b	2ac84 <__assert_fail@plt+0x18690>
   2b254:	tst	r6, #64	; 0x40
   2b258:	and	r3, r6, #256	; 0x100
   2b25c:	moveq	r2, #2
   2b260:	streq	r2, [sp, #8]
   2b264:	beq	2aec8 <__assert_fail@plt+0x188d4>
   2b268:	ldr	r1, [sp, #4]
   2b26c:	mov	r2, #32
   2b270:	add	r0, r1, #648	; 0x288
   2b274:	strb	r2, [r1, #647]	; 0x287
   2b278:	mov	r2, #2
   2b27c:	str	r2, [sp, #8]
   2b280:	str	r0, [sp, #24]
   2b284:	b	2aec8 <__assert_fail@plt+0x188d4>
   2b288:	tst	r6, #64	; 0x40
   2b28c:	and	r3, r6, #256	; 0x100
   2b290:	moveq	r2, #3
   2b294:	streq	r2, [sp, #8]
   2b298:	beq	2aec8 <__assert_fail@plt+0x188d4>
   2b29c:	ldr	r1, [sp, #4]
   2b2a0:	mov	r2, #32
   2b2a4:	add	r0, r1, #648	; 0x288
   2b2a8:	strb	r2, [r1, #647]	; 0x287
   2b2ac:	mov	r2, #3
   2b2b0:	str	r2, [sp, #8]
   2b2b4:	str	r0, [sp, #24]
   2b2b8:	b	2aec8 <__assert_fail@plt+0x188d4>
   2b2bc:	tst	r6, #64	; 0x40
   2b2c0:	and	r3, r6, #256	; 0x100
   2b2c4:	moveq	r2, #5
   2b2c8:	streq	r2, [sp, #8]
   2b2cc:	beq	2aec8 <__assert_fail@plt+0x188d4>
   2b2d0:	ldr	r1, [sp, #4]
   2b2d4:	mov	r2, #32
   2b2d8:	add	r0, r1, #648	; 0x288
   2b2dc:	strb	r2, [r1, #647]	; 0x287
   2b2e0:	mov	r2, #5
   2b2e4:	str	r2, [sp, #8]
   2b2e8:	str	r0, [sp, #24]
   2b2ec:	b	2aec8 <__assert_fail@plt+0x188d4>
   2b2f0:	tst	r6, #64	; 0x40
   2b2f4:	and	r3, r6, #256	; 0x100
   2b2f8:	moveq	r2, #6
   2b2fc:	streq	r2, [sp, #8]
   2b300:	beq	2aec8 <__assert_fail@plt+0x188d4>
   2b304:	ldr	r1, [sp, #4]
   2b308:	mov	r2, #32
   2b30c:	add	r0, r1, #648	; 0x288
   2b310:	strb	r2, [r1, #647]	; 0x287
   2b314:	mov	r2, #6
   2b318:	str	r2, [sp, #8]
   2b31c:	str	r0, [sp, #24]
   2b320:	b	2aec8 <__assert_fail@plt+0x188d4>
   2b324:	adds	r4, r4, #1
   2b328:	adc	r5, r5, #0
   2b32c:	cmp	r5, #0
   2b330:	cmpeq	r4, #10
   2b334:	beq	2b39c <__assert_fail@plt+0x18da8>
   2b338:	mov	r9, #0
   2b33c:	b	2aca0 <__assert_fail@plt+0x186ac>
   2b340:	ldr	r8, [sp, #24]
   2b344:	b	2acd4 <__assert_fail@plt+0x186e0>
   2b348:	mov	r0, #48	; 0x30
   2b34c:	mvn	r3, fp
   2b350:	ldr	r1, [sp, #36]	; 0x24
   2b354:	mov	r2, fp
   2b358:	strb	r0, [r8, #-1]
   2b35c:	add	r8, r8, r3
   2b360:	mov	r0, r8
   2b364:	bl	12024 <memcpy@plt>
   2b368:	b	2b144 <__assert_fail@plt+0x18b50>
   2b36c:	mov	r3, #1
   2b370:	str	r3, [sp, #8]
   2b374:	b	2ac5c <__assert_fail@plt+0x18668>
   2b378:	mov	r3, #3
   2b37c:	str	r3, [sp, #8]
   2b380:	b	2ac5c <__assert_fail@plt+0x18668>
   2b384:	mov	r3, #2
   2b388:	str	r3, [sp, #8]
   2b38c:	b	2ac5c <__assert_fail@plt+0x18668>
   2b390:	mov	r3, #4
   2b394:	str	r3, [sp, #8]
   2b398:	b	2ac5c <__assert_fail@plt+0x18668>
   2b39c:	mov	r9, #0
   2b3a0:	ldr	r8, [sp, #24]
   2b3a4:	b	2acd4 <__assert_fail@plt+0x186e0>
   2b3a8:	mov	r3, #5
   2b3ac:	str	r3, [sp, #8]
   2b3b0:	b	2ac5c <__assert_fail@plt+0x18668>
   2b3b4:	tst	r6, #64	; 0x40
   2b3b8:	and	r3, r6, #256	; 0x100
   2b3bc:	moveq	r2, #4
   2b3c0:	streq	r2, [sp, #8]
   2b3c4:	beq	2aec8 <__assert_fail@plt+0x188d4>
   2b3c8:	ldr	r1, [sp, #4]
   2b3cc:	mov	r2, #32
   2b3d0:	add	r0, r1, #648	; 0x288
   2b3d4:	strb	r2, [r1, #647]	; 0x287
   2b3d8:	mov	r2, #4
   2b3dc:	str	r2, [sp, #8]
   2b3e0:	str	r0, [sp, #24]
   2b3e4:	b	2aec8 <__assert_fail@plt+0x188d4>
   2b3e8:	tst	r6, #64	; 0x40
   2b3ec:	and	r3, r6, #256	; 0x100
   2b3f0:	moveq	r2, #1
   2b3f4:	streq	r2, [sp, #8]
   2b3f8:	beq	2b0b0 <__assert_fail@plt+0x18abc>
   2b3fc:	ldr	r1, [sp, #4]
   2b400:	mov	r2, #32
   2b404:	add	r0, r1, #648	; 0x288
   2b408:	strb	r2, [r1, #647]	; 0x287
   2b40c:	mov	r2, #1
   2b410:	str	r2, [sp, #8]
   2b414:	str	r0, [sp, #24]
   2b418:	b	2b0b0 <__assert_fail@plt+0x18abc>
   2b41c:	cmp	r3, #0
   2b420:	ldrne	r2, [sp, #24]
   2b424:	bne	2aefc <__assert_fail@plt+0x18908>
   2b428:	b	2a920 <__assert_fail@plt+0x1832c>
   2b42c:	nop	{0}
   2b430:	andeq	r0, r0, r0
   2b434:	eormi	r0, r4, r0
   2b438:	tst	r6, #64	; 0x40
   2b43c:	and	r3, r6, #256	; 0x100
   2b440:	moveq	r2, #7
   2b444:	streq	r2, [sp, #8]
   2b448:	beq	2aec8 <__assert_fail@plt+0x188d4>
   2b44c:	ldr	r1, [sp, #4]
   2b450:	mov	r2, #32
   2b454:	add	r0, r1, #648	; 0x288
   2b458:	strb	r2, [r1, #647]	; 0x287
   2b45c:	mov	r2, #7
   2b460:	str	r2, [sp, #8]
   2b464:	str	r0, [sp, #24]
   2b468:	b	2aec8 <__assert_fail@plt+0x188d4>
   2b46c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b470:	subs	r4, r0, #0
   2b474:	strd	r6, [sp, #8]
   2b478:	mov	r7, r1
   2b47c:	mov	r6, r2
   2b480:	strd	r8, [sp, #16]
   2b484:	strd	sl, [sp, #24]
   2b488:	str	lr, [sp, #32]
   2b48c:	sub	sp, sp, #20
   2b490:	beq	2b5d0 <__assert_fail@plt+0x18fdc>
   2b494:	ldrb	r3, [r4]
   2b498:	cmp	r3, #39	; 0x27
   2b49c:	beq	2b510 <__assert_fail@plt+0x18f1c>
   2b4a0:	mov	r9, #160	; 0xa0
   2b4a4:	mov	fp, #416	; 0x1a0
   2b4a8:	mov	sl, #384	; 0x180
   2b4ac:	mov	r8, #0
   2b4b0:	movw	r5, #20148	; 0x4eb4
   2b4b4:	movt	r5, #5
   2b4b8:	add	r2, r5, #12
   2b4bc:	add	r1, r5, #20
   2b4c0:	mov	r3, #4
   2b4c4:	mov	r0, r4
   2b4c8:	bl	4f20c <__assert_fail@plt+0x3cc18>
   2b4cc:	cmp	r0, #0
   2b4d0:	blt	2b528 <__assert_fail@plt+0x18f34>
   2b4d4:	add	r5, r5, r0, lsl #2
   2b4d8:	mov	r2, #1
   2b4dc:	mov	r3, #0
   2b4e0:	mov	r0, #0
   2b4e4:	ldr	r1, [r5, #12]
   2b4e8:	strd	r2, [r6]
   2b4ec:	orr	r8, r8, r1
   2b4f0:	str	r8, [r7]
   2b4f4:	add	sp, sp, #20
   2b4f8:	ldrd	r4, [sp]
   2b4fc:	ldrd	r6, [sp, #8]
   2b500:	ldrd	r8, [sp, #16]
   2b504:	ldrd	sl, [sp, #24]
   2b508:	add	sp, sp, #32
   2b50c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b510:	add	r4, r4, #1
   2b514:	mov	r9, #164	; 0xa4
   2b518:	mov	fp, #420	; 0x1a4
   2b51c:	mov	sl, #388	; 0x184
   2b520:	mov	r8, #4
   2b524:	b	2b4b0 <__assert_fail@plt+0x18ebc>
   2b528:	movw	r0, #20220	; 0x4efc
   2b52c:	movt	r0, #5
   2b530:	mov	r3, r6
   2b534:	mov	r2, #0
   2b538:	add	r1, sp, #12
   2b53c:	str	r0, [sp]
   2b540:	mov	r0, r4
   2b544:	bl	37528 <__assert_fail@plt+0x24f34>
   2b548:	cmp	r0, #0
   2b54c:	bne	2b594 <__assert_fail@plt+0x18fa0>
   2b550:	ldrb	r3, [r4]
   2b554:	sub	r3, r3, #48	; 0x30
   2b558:	cmp	r3, #9
   2b55c:	bls	2b588 <__assert_fail@plt+0x18f94>
   2b560:	ldr	r2, [sp, #12]
   2b564:	cmp	r4, r2
   2b568:	bne	2b578 <__assert_fail@plt+0x18f84>
   2b56c:	b	2b624 <__assert_fail@plt+0x19030>
   2b570:	cmp	r2, r4
   2b574:	beq	2b624 <__assert_fail@plt+0x19030>
   2b578:	ldrb	r3, [r4, #1]!
   2b57c:	sub	r3, r3, #48	; 0x30
   2b580:	cmp	r3, #9
   2b584:	bhi	2b570 <__assert_fail@plt+0x18f7c>
   2b588:	ldrd	r2, [r6]
   2b58c:	str	r8, [r7]
   2b590:	b	2b5a0 <__assert_fail@plt+0x18fac>
   2b594:	mov	r1, #0
   2b598:	ldrd	r2, [r6]
   2b59c:	str	r1, [r7]
   2b5a0:	orrs	r3, r2, r3
   2b5a4:	bne	2b4f4 <__assert_fail@plt+0x18f00>
   2b5a8:	movw	r0, #10344	; 0x2868
   2b5ac:	movt	r0, #5
   2b5b0:	bl	12228 <getenv@plt>
   2b5b4:	cmp	r0, #0
   2b5b8:	mov	r3, #0
   2b5bc:	moveq	r2, #1024	; 0x400
   2b5c0:	movne	r2, #512	; 0x200
   2b5c4:	mov	r0, #4
   2b5c8:	strd	r2, [r6]
   2b5cc:	b	2b4f4 <__assert_fail@plt+0x18f00>
   2b5d0:	movw	r0, #20196	; 0x4ee4
   2b5d4:	movt	r0, #5
   2b5d8:	bl	12228 <getenv@plt>
   2b5dc:	subs	r4, r0, #0
   2b5e0:	bne	2b494 <__assert_fail@plt+0x18ea0>
   2b5e4:	movw	r0, #20208	; 0x4ef0
   2b5e8:	movt	r0, #5
   2b5ec:	bl	12228 <getenv@plt>
   2b5f0:	subs	r4, r0, #0
   2b5f4:	bne	2b494 <__assert_fail@plt+0x18ea0>
   2b5f8:	movw	r0, #10344	; 0x2868
   2b5fc:	movt	r0, #5
   2b600:	bl	12228 <getenv@plt>
   2b604:	subs	r3, r0, #0
   2b608:	beq	2b650 <__assert_fail@plt+0x1905c>
   2b60c:	mov	r2, #512	; 0x200
   2b610:	mov	r3, #0
   2b614:	mov	r0, r4
   2b618:	strd	r2, [r6]
   2b61c:	str	r4, [r7]
   2b620:	b	2b4f4 <__assert_fail@plt+0x18f00>
   2b624:	ldrb	r3, [r2, #-1]
   2b628:	cmp	r3, #66	; 0x42
   2b62c:	beq	2b638 <__assert_fail@plt+0x19044>
   2b630:	mov	r8, r9
   2b634:	b	2b588 <__assert_fail@plt+0x18f94>
   2b638:	ldrb	r3, [r2, #-2]
   2b63c:	cmp	r3, #105	; 0x69
   2b640:	movne	r8, sl
   2b644:	bne	2b588 <__assert_fail@plt+0x18f94>
   2b648:	mov	r9, fp
   2b64c:	b	2b630 <__assert_fail@plt+0x1903c>
   2b650:	mov	r4, #1024	; 0x400
   2b654:	mov	r5, #0
   2b658:	mov	r0, r3
   2b65c:	strd	r4, [r6]
   2b660:	str	r3, [r7]
   2b664:	b	2b4f4 <__assert_fail@plt+0x18f00>
   2b668:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b66c:	strd	r6, [sp, #8]
   2b670:	movw	r6, #31988	; 0x7cf4
   2b674:	movt	r6, #6
   2b678:	ldr	r4, [r6]
   2b67c:	str	r8, [sp, #16]
   2b680:	str	lr, [sp, #20]
   2b684:	cmp	r4, #0
   2b688:	beq	2b6b4 <__assert_fail@plt+0x190c0>
   2b68c:	ldr	r3, [r4]
   2b690:	cmp	r0, r3
   2b694:	bne	2b6a8 <__assert_fail@plt+0x190b4>
   2b698:	b	2b704 <__assert_fail@plt+0x19110>
   2b69c:	ldr	r3, [r4]
   2b6a0:	cmp	r3, r0
   2b6a4:	beq	2b704 <__assert_fail@plt+0x19110>
   2b6a8:	ldr	r4, [r4, #4]
   2b6ac:	cmp	r4, #0
   2b6b0:	bne	2b69c <__assert_fail@plt+0x190a8>
   2b6b4:	mov	r5, r0
   2b6b8:	bl	11f58 <getpwuid@plt>
   2b6bc:	cmp	r0, #0
   2b6c0:	movweq	r7, #9500	; 0x251c
   2b6c4:	moveq	r0, #12
   2b6c8:	movteq	r7, #5
   2b6cc:	beq	2b6e4 <__assert_fail@plt+0x190f0>
   2b6d0:	ldr	r7, [r0]
   2b6d4:	mov	r0, r7
   2b6d8:	bl	12300 <strlen@plt>
   2b6dc:	add	r0, r0, #12
   2b6e0:	bic	r0, r0, #3
   2b6e4:	bl	36864 <__assert_fail@plt+0x24270>
   2b6e8:	mov	r4, r0
   2b6ec:	mov	r1, r7
   2b6f0:	str	r5, [r0], #8
   2b6f4:	bl	121b0 <strcpy@plt>
   2b6f8:	ldr	r3, [r6]
   2b6fc:	str	r4, [r6]
   2b700:	str	r3, [r4, #4]
   2b704:	ldrb	r0, [r4, #8]
   2b708:	ldrd	r6, [sp, #8]
   2b70c:	ldr	r8, [sp, #16]
   2b710:	cmp	r0, #0
   2b714:	addne	r0, r4, #8
   2b718:	ldrd	r4, [sp]
   2b71c:	add	sp, sp, #20
   2b720:	pop	{pc}		; (ldr pc, [sp], #4)
   2b724:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b728:	mov	r5, r0
   2b72c:	strd	r6, [sp, #8]
   2b730:	movw	r6, #31988	; 0x7cf4
   2b734:	movt	r6, #6
   2b738:	ldr	r4, [r6]
   2b73c:	str	r8, [sp, #16]
   2b740:	str	lr, [sp, #20]
   2b744:	cmp	r4, #0
   2b748:	beq	2b798 <__assert_fail@plt+0x191a4>
   2b74c:	ldrb	r7, [r0]
   2b750:	b	2b760 <__assert_fail@plt+0x1916c>
   2b754:	ldr	r4, [r4, #4]
   2b758:	cmp	r4, #0
   2b75c:	beq	2b798 <__assert_fail@plt+0x191a4>
   2b760:	ldrb	r3, [r4, #8]
   2b764:	cmp	r3, r7
   2b768:	bne	2b754 <__assert_fail@plt+0x19160>
   2b76c:	mov	r1, r5
   2b770:	add	r0, r4, #8
   2b774:	bl	11f40 <strcmp@plt>
   2b778:	cmp	r0, #0
   2b77c:	bne	2b754 <__assert_fail@plt+0x19160>
   2b780:	mov	r0, r4
   2b784:	ldrd	r4, [sp]
   2b788:	ldrd	r6, [sp, #8]
   2b78c:	ldr	r8, [sp, #16]
   2b790:	add	sp, sp, #20
   2b794:	pop	{pc}		; (ldr pc, [sp], #4)
   2b798:	ldr	r4, [r6, #4]
   2b79c:	cmp	r4, #0
   2b7a0:	beq	2b7e0 <__assert_fail@plt+0x191ec>
   2b7a4:	ldrb	r7, [r5]
   2b7a8:	b	2b7b8 <__assert_fail@plt+0x191c4>
   2b7ac:	ldr	r4, [r4, #4]
   2b7b0:	cmp	r4, #0
   2b7b4:	beq	2b7e0 <__assert_fail@plt+0x191ec>
   2b7b8:	ldrb	r3, [r4, #8]
   2b7bc:	cmp	r3, r7
   2b7c0:	bne	2b7ac <__assert_fail@plt+0x191b8>
   2b7c4:	mov	r1, r5
   2b7c8:	add	r0, r4, #8
   2b7cc:	bl	11f40 <strcmp@plt>
   2b7d0:	cmp	r0, #0
   2b7d4:	bne	2b7ac <__assert_fail@plt+0x191b8>
   2b7d8:	mov	r4, r0
   2b7dc:	b	2b780 <__assert_fail@plt+0x1918c>
   2b7e0:	mov	r0, r5
   2b7e4:	bl	11f1c <getpwnam@plt>
   2b7e8:	mov	r4, r0
   2b7ec:	mov	r0, r5
   2b7f0:	bl	12300 <strlen@plt>
   2b7f4:	add	r0, r0, #12
   2b7f8:	bic	r0, r0, #3
   2b7fc:	bl	36864 <__assert_fail@plt+0x24270>
   2b800:	mov	r7, r0
   2b804:	mov	r1, r5
   2b808:	add	r0, r0, #8
   2b80c:	bl	121b0 <strcpy@plt>
   2b810:	cmp	r4, #0
   2b814:	beq	2b834 <__assert_fail@plt+0x19240>
   2b818:	ldr	r2, [r6]
   2b81c:	str	r7, [r6]
   2b820:	ldr	r3, [r4, #8]
   2b824:	mov	r4, r7
   2b828:	str	r3, [r7]
   2b82c:	str	r2, [r7, #4]
   2b830:	b	2b780 <__assert_fail@plt+0x1918c>
   2b834:	ldr	r3, [r6, #4]
   2b838:	str	r7, [r6, #4]
   2b83c:	str	r3, [r7, #4]
   2b840:	b	2b780 <__assert_fail@plt+0x1918c>
   2b844:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b848:	strd	r6, [sp, #8]
   2b84c:	movw	r6, #31988	; 0x7cf4
   2b850:	movt	r6, #6
   2b854:	ldr	r4, [r6, #8]
   2b858:	str	r8, [sp, #16]
   2b85c:	str	lr, [sp, #20]
   2b860:	cmp	r4, #0
   2b864:	beq	2b890 <__assert_fail@plt+0x1929c>
   2b868:	ldr	r3, [r4]
   2b86c:	cmp	r0, r3
   2b870:	bne	2b884 <__assert_fail@plt+0x19290>
   2b874:	b	2b8e0 <__assert_fail@plt+0x192ec>
   2b878:	ldr	r3, [r4]
   2b87c:	cmp	r3, r0
   2b880:	beq	2b8e0 <__assert_fail@plt+0x192ec>
   2b884:	ldr	r4, [r4, #4]
   2b888:	cmp	r4, #0
   2b88c:	bne	2b878 <__assert_fail@plt+0x19284>
   2b890:	mov	r5, r0
   2b894:	bl	125d0 <getgrgid@plt>
   2b898:	cmp	r0, #0
   2b89c:	movweq	r7, #9500	; 0x251c
   2b8a0:	moveq	r0, #12
   2b8a4:	movteq	r7, #5
   2b8a8:	beq	2b8c0 <__assert_fail@plt+0x192cc>
   2b8ac:	ldr	r7, [r0]
   2b8b0:	mov	r0, r7
   2b8b4:	bl	12300 <strlen@plt>
   2b8b8:	add	r0, r0, #12
   2b8bc:	bic	r0, r0, #3
   2b8c0:	bl	36864 <__assert_fail@plt+0x24270>
   2b8c4:	mov	r4, r0
   2b8c8:	mov	r1, r7
   2b8cc:	str	r5, [r0], #8
   2b8d0:	bl	121b0 <strcpy@plt>
   2b8d4:	ldr	r3, [r6, #8]
   2b8d8:	str	r4, [r6, #8]
   2b8dc:	str	r3, [r4, #4]
   2b8e0:	ldrb	r0, [r4, #8]
   2b8e4:	ldrd	r6, [sp, #8]
   2b8e8:	ldr	r8, [sp, #16]
   2b8ec:	cmp	r0, #0
   2b8f0:	addne	r0, r4, #8
   2b8f4:	ldrd	r4, [sp]
   2b8f8:	add	sp, sp, #20
   2b8fc:	pop	{pc}		; (ldr pc, [sp], #4)
   2b900:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b904:	mov	r5, r0
   2b908:	strd	r6, [sp, #8]
   2b90c:	movw	r6, #31988	; 0x7cf4
   2b910:	movt	r6, #6
   2b914:	ldr	r4, [r6, #8]
   2b918:	str	r8, [sp, #16]
   2b91c:	str	lr, [sp, #20]
   2b920:	cmp	r4, #0
   2b924:	beq	2b974 <__assert_fail@plt+0x19380>
   2b928:	ldrb	r7, [r0]
   2b92c:	b	2b93c <__assert_fail@plt+0x19348>
   2b930:	ldr	r4, [r4, #4]
   2b934:	cmp	r4, #0
   2b938:	beq	2b974 <__assert_fail@plt+0x19380>
   2b93c:	ldrb	r3, [r4, #8]
   2b940:	cmp	r3, r7
   2b944:	bne	2b930 <__assert_fail@plt+0x1933c>
   2b948:	mov	r1, r5
   2b94c:	add	r0, r4, #8
   2b950:	bl	11f40 <strcmp@plt>
   2b954:	cmp	r0, #0
   2b958:	bne	2b930 <__assert_fail@plt+0x1933c>
   2b95c:	mov	r0, r4
   2b960:	ldrd	r4, [sp]
   2b964:	ldrd	r6, [sp, #8]
   2b968:	ldr	r8, [sp, #16]
   2b96c:	add	sp, sp, #20
   2b970:	pop	{pc}		; (ldr pc, [sp], #4)
   2b974:	ldr	r4, [r6, #12]
   2b978:	cmp	r4, #0
   2b97c:	beq	2b9bc <__assert_fail@plt+0x193c8>
   2b980:	ldrb	r7, [r5]
   2b984:	b	2b994 <__assert_fail@plt+0x193a0>
   2b988:	ldr	r4, [r4, #4]
   2b98c:	cmp	r4, #0
   2b990:	beq	2b9bc <__assert_fail@plt+0x193c8>
   2b994:	ldrb	r3, [r4, #8]
   2b998:	cmp	r3, r7
   2b99c:	bne	2b988 <__assert_fail@plt+0x19394>
   2b9a0:	mov	r1, r5
   2b9a4:	add	r0, r4, #8
   2b9a8:	bl	11f40 <strcmp@plt>
   2b9ac:	cmp	r0, #0
   2b9b0:	bne	2b988 <__assert_fail@plt+0x19394>
   2b9b4:	mov	r4, r0
   2b9b8:	b	2b95c <__assert_fail@plt+0x19368>
   2b9bc:	mov	r0, r5
   2b9c0:	bl	125dc <getgrnam@plt>
   2b9c4:	mov	r4, r0
   2b9c8:	mov	r0, r5
   2b9cc:	bl	12300 <strlen@plt>
   2b9d0:	add	r0, r0, #12
   2b9d4:	bic	r0, r0, #3
   2b9d8:	bl	36864 <__assert_fail@plt+0x24270>
   2b9dc:	mov	r7, r0
   2b9e0:	mov	r1, r5
   2b9e4:	add	r0, r0, #8
   2b9e8:	bl	121b0 <strcpy@plt>
   2b9ec:	cmp	r4, #0
   2b9f0:	beq	2ba0c <__assert_fail@plt+0x19418>
   2b9f4:	ldr	r2, [r4, #8]
   2b9f8:	mov	r4, r7
   2b9fc:	ldr	r3, [r6, #8]
   2ba00:	str	r7, [r6, #8]
   2ba04:	strd	r2, [r7]
   2ba08:	b	2b95c <__assert_fail@plt+0x19368>
   2ba0c:	ldr	r3, [r6, #12]
   2ba10:	str	r7, [r6, #12]
   2ba14:	str	r3, [r7, #4]
   2ba18:	b	2b95c <__assert_fail@plt+0x19368>
   2ba1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2ba20:	mov	r5, r0
   2ba24:	strd	r6, [sp, #8]
   2ba28:	mov	r6, r2
   2ba2c:	lsrs	r2, r6, #30
   2ba30:	str	fp, [sp, #16]
   2ba34:	add	fp, sp, #20
   2ba38:	movne	r2, #1
   2ba3c:	moveq	r2, #0
   2ba40:	lsls	r0, r6, #2
   2ba44:	str	lr, [sp, #20]
   2ba48:	bmi	2bb70 <__assert_fail@plt+0x1957c>
   2ba4c:	cmp	r2, #0
   2ba50:	bne	2bb70 <__assert_fail@plt+0x1957c>
   2ba54:	cmp	r0, #4016	; 0xfb0
   2ba58:	mov	r4, r1
   2ba5c:	mov	r7, r3
   2ba60:	bhi	2bb64 <__assert_fail@plt+0x19570>
   2ba64:	add	r3, r0, #22
   2ba68:	bic	r3, r3, #7
   2ba6c:	sub	sp, sp, r3
   2ba70:	add	r0, sp, #15
   2ba74:	bic	r0, r0, #15
   2ba78:	cmp	r0, #0
   2ba7c:	beq	2bb70 <__assert_fail@plt+0x1957c>
   2ba80:	mov	r3, #1
   2ba84:	cmp	r6, #2
   2ba88:	movhi	r2, r4
   2ba8c:	movhi	ip, #0
   2ba90:	str	r3, [r0, #4]
   2ba94:	movhi	r3, #2
   2ba98:	bls	2bae0 <__assert_fail@plt+0x194ec>
   2ba9c:	ldrb	r1, [r2, #1]!
   2baa0:	ldrb	lr, [r4, ip]
   2baa4:	cmp	lr, r1
   2baa8:	bne	2bac4 <__assert_fail@plt+0x194d0>
   2baac:	b	2bb88 <__assert_fail@plt+0x19594>
   2bab0:	ldr	lr, [r0, ip, lsl #2]
   2bab4:	sub	ip, ip, lr
   2bab8:	ldrb	lr, [r4, ip]
   2babc:	cmp	lr, r1
   2bac0:	beq	2bb88 <__assert_fail@plt+0x19594>
   2bac4:	cmp	ip, #0
   2bac8:	bne	2bab0 <__assert_fail@plt+0x194bc>
   2bacc:	mov	ip, #0
   2bad0:	str	r3, [r0, r3, lsl #2]
   2bad4:	add	r3, r3, #1
   2bad8:	cmp	r6, r3
   2badc:	bne	2ba9c <__assert_fail@plt+0x194a8>
   2bae0:	mov	r2, #0
   2bae4:	str	r2, [r7]
   2bae8:	ldrb	r3, [r5]
   2baec:	cmp	r3, r2
   2baf0:	movne	r1, r5
   2baf4:	beq	2bb44 <__assert_fail@plt+0x19550>
   2baf8:	ldrb	ip, [r4, r2]
   2bafc:	cmp	ip, r3
   2bb00:	beq	2bb24 <__assert_fail@plt+0x19530>
   2bb04:	cmp	r2, #0
   2bb08:	beq	2bb78 <__assert_fail@plt+0x19584>
   2bb0c:	ldr	ip, [r0, r2, lsl #2]
   2bb10:	sub	r2, r2, ip
   2bb14:	add	r5, r5, ip
   2bb18:	ldrb	ip, [r4, r2]
   2bb1c:	cmp	ip, r3
   2bb20:	bne	2bb04 <__assert_fail@plt+0x19510>
   2bb24:	add	r2, r2, #1
   2bb28:	add	ip, r1, #1
   2bb2c:	cmp	r6, r2
   2bb30:	beq	2bb98 <__assert_fail@plt+0x195a4>
   2bb34:	ldrb	r3, [r1, #1]
   2bb38:	mov	r1, ip
   2bb3c:	cmp	r3, #0
   2bb40:	bne	2baf8 <__assert_fail@plt+0x19504>
   2bb44:	bl	4fcac <__assert_fail@plt+0x3d6b8>
   2bb48:	mov	r0, #1
   2bb4c:	sub	sp, fp, #20
   2bb50:	ldrd	r4, [sp]
   2bb54:	ldrd	r6, [sp, #8]
   2bb58:	ldr	fp, [sp, #16]
   2bb5c:	add	sp, sp, #20
   2bb60:	pop	{pc}		; (ldr pc, [sp], #4)
   2bb64:	bl	4fc54 <__assert_fail@plt+0x3d660>
   2bb68:	cmp	r0, #0
   2bb6c:	bne	2ba80 <__assert_fail@plt+0x1948c>
   2bb70:	mov	r0, #0
   2bb74:	b	2bb4c <__assert_fail@plt+0x19558>
   2bb78:	ldrb	r3, [r1, #1]
   2bb7c:	add	r5, r5, #1
   2bb80:	add	r1, r1, #1
   2bb84:	b	2bb3c <__assert_fail@plt+0x19548>
   2bb88:	add	ip, ip, #1
   2bb8c:	sub	r1, r3, ip
   2bb90:	str	r1, [r0, r3, lsl #2]
   2bb94:	b	2bad4 <__assert_fail@plt+0x194e0>
   2bb98:	str	r5, [r7]
   2bb9c:	b	2bb44 <__assert_fail@plt+0x19550>
   2bba0:	movw	r3, #20260	; 0x4f24
   2bba4:	movt	r3, #5
   2bba8:	str	r4, [sp, #-8]!
   2bbac:	movw	r1, #20280	; 0x4f38
   2bbb0:	movt	r1, #5
   2bbb4:	str	lr, [sp, #4]
   2bbb8:	movw	r0, #20292	; 0x4f44
   2bbbc:	movt	r0, #5
   2bbc0:	mov	r2, #172	; 0xac
   2bbc4:	bl	125f4 <__assert_fail@plt>
   2bbc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bbcc:	mov	r4, r1
   2bbd0:	strd	r6, [sp, #8]
   2bbd4:	strd	r8, [sp, #16]
   2bbd8:	strd	sl, [sp, #24]
   2bbdc:	add	fp, sp, #32
   2bbe0:	str	lr, [sp, #32]
   2bbe4:	sub	sp, sp, #188	; 0xbc
   2bbe8:	str	r2, [fp, #-216]	; 0xffffff28
   2bbec:	str	r0, [fp, #-212]	; 0xffffff2c
   2bbf0:	mov	r0, r1
   2bbf4:	bl	4fd94 <__assert_fail@plt+0x3d7a0>
   2bbf8:	mov	r3, #44	; 0x2c
   2bbfc:	str	r0, [fp, #-208]	; 0xffffff30
   2bc00:	umull	r0, r1, r0, r3
   2bc04:	adds	r2, r1, #0
   2bc08:	movne	r2, #1
   2bc0c:	cmp	r0, #0
   2bc10:	blt	2bfdc <__assert_fail@plt+0x199e8>
   2bc14:	cmp	r2, #0
   2bc18:	bne	2bfdc <__assert_fail@plt+0x199e8>
   2bc1c:	ldr	r2, [fp, #-208]	; 0xffffff30
   2bc20:	mul	r0, r3, r2
   2bc24:	cmp	r0, #4016	; 0xfb0
   2bc28:	bhi	2bffc <__assert_fail@plt+0x19a08>
   2bc2c:	add	r3, r0, #22
   2bc30:	bic	r3, r3, #7
   2bc34:	sub	sp, sp, r3
   2bc38:	add	r3, sp, #15
   2bc3c:	bic	sl, r3, #15
   2bc40:	cmp	sl, #0
   2bc44:	beq	2bfdc <__assert_fail@plt+0x199e8>
   2bc48:	ldr	r3, [fp, #-208]	; 0xffffff30
   2bc4c:	mov	r0, #0
   2bc50:	mov	r1, #0
   2bc54:	movw	r8, #26424	; 0x6738
   2bc58:	movt	r8, #5
   2bc5c:	add	r5, sl, #16
   2bc60:	strd	r0, [fp, #-200]	; 0xffffff38
   2bc64:	str	r4, [fp, #-188]	; 0xffffff44
   2bc68:	add	r9, r3, r3, lsl #2
   2bc6c:	mov	r3, #0
   2bc70:	mov	r6, r3
   2bc74:	add	r9, sl, r9, lsl #3
   2bc78:	str	r9, [fp, #-220]	; 0xffffff24
   2bc7c:	strb	r3, [fp, #-204]	; 0xffffff34
   2bc80:	strb	r3, [fp, #-192]	; 0xffffff40
   2bc84:	b	2bd08 <__assert_fail@plt+0x19714>
   2bc88:	ldrb	r3, [r4]
   2bc8c:	lsr	r2, r3, #5
   2bc90:	and	r3, r3, #31
   2bc94:	ldr	r2, [r8, r2, lsl #2]
   2bc98:	lsr	r3, r2, r3
   2bc9c:	tst	r3, #1
   2bca0:	beq	2c008 <__assert_fail@plt+0x19a14>
   2bca4:	mov	r3, #1
   2bca8:	str	r3, [fp, #-184]	; 0xffffff48
   2bcac:	ldrb	r2, [r4]
   2bcb0:	strb	r3, [fp, #-192]	; 0xffffff40
   2bcb4:	strb	r3, [fp, #-180]	; 0xffffff4c
   2bcb8:	mov	r4, r2
   2bcbc:	str	r2, [fp, #-176]	; 0xffffff50
   2bcc0:	cmp	r4, #0
   2bcc4:	beq	2bd80 <__assert_fail@plt+0x1978c>
   2bcc8:	mov	r9, #1
   2bccc:	ldr	r4, [fp, #-188]	; 0xffffff44
   2bcd0:	sub	r2, fp, #172	; 0xac
   2bcd4:	ldr	r7, [fp, #-184]	; 0xffffff48
   2bcd8:	cmp	r4, r2
   2bcdc:	strne	r4, [r5, #-16]
   2bce0:	beq	2c028 <__assert_fail@plt+0x19a34>
   2bce4:	cmp	r9, #0
   2bce8:	add	r4, r4, r7
   2bcec:	str	r7, [r5, #-12]
   2bcf0:	ldrne	r3, [fp, #-176]	; 0xffffff50
   2bcf4:	add	r5, r5, #40	; 0x28
   2bcf8:	strb	r9, [r5, #-48]	; 0xffffffd0
   2bcfc:	strb	r6, [fp, #-192]	; 0xffffff40
   2bd00:	str	r4, [fp, #-188]	; 0xffffff44
   2bd04:	strne	r3, [r5, #-44]	; 0xffffffd4
   2bd08:	ldrb	r3, [fp, #-204]	; 0xffffff34
   2bd0c:	cmp	r3, #0
   2bd10:	subne	r7, fp, #200	; 0xc8
   2bd14:	beq	2bc88 <__assert_fail@plt+0x19694>
   2bd18:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2bd1c:	mov	r1, r0
   2bd20:	mov	r0, r4
   2bd24:	bl	360c8 <__assert_fail@plt+0x23ad4>
   2bd28:	mov	r2, r0
   2bd2c:	mov	r3, r7
   2bd30:	mov	r1, r4
   2bd34:	sub	r0, fp, #176	; 0xb0
   2bd38:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2bd3c:	cmn	r0, #1
   2bd40:	str	r0, [fp, #-184]	; 0xffffff48
   2bd44:	beq	2c040 <__assert_fail@plt+0x19a4c>
   2bd48:	cmn	r0, #2
   2bd4c:	beq	2c058 <__assert_fail@plt+0x19a64>
   2bd50:	cmp	r0, #0
   2bd54:	beq	2c078 <__assert_fail@plt+0x19a84>
   2bd58:	ldr	r4, [fp, #-176]	; 0xffffff50
   2bd5c:	mov	r9, #1
   2bd60:	mov	r0, r7
   2bd64:	strb	r9, [fp, #-180]	; 0xffffff4c
   2bd68:	bl	12060 <mbsinit@plt>
   2bd6c:	cmp	r0, #0
   2bd70:	strb	r9, [fp, #-192]	; 0xffffff40
   2bd74:	strbne	r6, [fp, #-204]	; 0xffffff34
   2bd78:	cmp	r4, #0
   2bd7c:	bne	2bcc8 <__assert_fail@plt+0x196d4>
   2bd80:	ldr	r9, [fp, #-220]	; 0xffffff24
   2bd84:	mov	r3, #1
   2bd88:	mov	r7, r4
   2bd8c:	ldr	r2, [fp, #-208]	; 0xffffff30
   2bd90:	str	r3, [r9, #4]
   2bd94:	cmp	r2, #2
   2bd98:	bls	2be20 <__assert_fail@plt+0x1982c>
   2bd9c:	mov	r6, r2
   2bda0:	mov	r5, sl
   2bda4:	str	r4, [fp, #-220]	; 0xffffff24
   2bda8:	mov	r8, #2
   2bdac:	ldrb	r3, [r5, #48]	; 0x30
   2bdb0:	cmp	r3, #0
   2bdb4:	bne	2c0c0 <__assert_fail@plt+0x19acc>
   2bdb8:	ldr	r7, [r5, #44]	; 0x2c
   2bdbc:	b	2bdd0 <__assert_fail@plt+0x197dc>
   2bdc0:	cmp	r4, #0
   2bdc4:	beq	2be04 <__assert_fail@plt+0x19810>
   2bdc8:	ldr	r3, [r9, r4, lsl #2]
   2bdcc:	sub	r4, r4, r3
   2bdd0:	add	r3, r4, r4, lsl #2
   2bdd4:	add	r2, sl, r3, lsl #3
   2bdd8:	ldr	r2, [r2, #4]
   2bddc:	cmp	r7, r2
   2bde0:	bne	2bdc0 <__assert_fail@plt+0x197cc>
   2bde4:	mov	r2, r7
   2bde8:	ldr	r1, [sl, r3, lsl #3]
   2bdec:	ldr	r0, [r5, #40]	; 0x28
   2bdf0:	bl	12084 <memcmp@plt>
   2bdf4:	cmp	r0, #0
   2bdf8:	beq	2c0f8 <__assert_fail@plt+0x19b04>
   2bdfc:	cmp	r4, #0
   2be00:	bne	2bdc8 <__assert_fail@plt+0x197d4>
   2be04:	str	r8, [r9, r8, lsl #2]
   2be08:	add	r8, r8, #1
   2be0c:	mov	r4, #0
   2be10:	cmp	r6, r8
   2be14:	add	r5, r5, #40	; 0x28
   2be18:	bne	2bdac <__assert_fail@plt+0x197b8>
   2be1c:	ldr	r7, [fp, #-220]	; 0xffffff24
   2be20:	mov	r1, #0
   2be24:	mov	r0, #0
   2be28:	ldr	r3, [fp, #-212]	; 0xffffff2c
   2be2c:	mov	r2, #0
   2be30:	movw	ip, #26424	; 0x6738
   2be34:	movt	ip, #5
   2be38:	mov	r6, #1
   2be3c:	str	r9, [fp, #-212]	; 0xffffff2c
   2be40:	strd	r0, [fp, #-144]	; 0xffffff70
   2be44:	mov	r9, ip
   2be48:	strd	r0, [fp, #-88]	; 0xffffffa8
   2be4c:	ldr	r1, [fp, #-216]	; 0xffffff28
   2be50:	strb	r2, [fp, #-148]	; 0xffffff6c
   2be54:	str	r3, [fp, #-132]	; 0xffffff7c
   2be58:	str	r3, [fp, #-76]	; 0xffffffb4
   2be5c:	mov	r3, r2
   2be60:	strb	r2, [fp, #-136]	; 0xffffff78
   2be64:	strb	r2, [fp, #-92]	; 0xffffffa4
   2be68:	strb	r2, [fp, #-80]	; 0xffffffb0
   2be6c:	str	r2, [r1]
   2be70:	cmp	r3, #0
   2be74:	ldreq	r5, [fp, #-76]	; 0xffffffb4
   2be78:	beq	2bf2c <__assert_fail@plt+0x19938>
   2be7c:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   2be80:	cmp	r3, #0
   2be84:	bne	2c430 <__assert_fail@plt+0x19e3c>
   2be88:	add	r3, r7, r7, lsl #2
   2be8c:	add	r3, sl, r3, lsl #3
   2be90:	ldr	r4, [fp, #-72]	; 0xffffffb8
   2be94:	ldr	r2, [r3, #4]
   2be98:	cmp	r2, r4
   2be9c:	beq	2c194 <__assert_fail@plt+0x19ba0>
   2bea0:	cmp	r7, #0
   2bea4:	bne	2c1b8 <__assert_fail@plt+0x19bc4>
   2bea8:	ldrb	r3, [fp, #-136]	; 0xffffff78
   2beac:	cmp	r3, #0
   2beb0:	bne	2c41c <__assert_fail@plt+0x19e28>
   2beb4:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   2beb8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2bebc:	cmp	r3, #0
   2bec0:	subne	r8, fp, #144	; 0x90
   2bec4:	bne	2c378 <__assert_fail@plt+0x19d84>
   2bec8:	ldrb	r3, [r4]
   2becc:	lsr	r2, r3, #5
   2bed0:	and	r3, r3, #31
   2bed4:	ldr	r2, [r9, r2, lsl #2]
   2bed8:	lsr	r3, r2, r3
   2bedc:	tst	r3, #1
   2bee0:	beq	2c360 <__assert_fail@plt+0x19d6c>
   2bee4:	str	r6, [fp, #-128]	; 0xffffff80
   2bee8:	ldrb	r4, [r4]
   2beec:	strb	r6, [fp, #-136]	; 0xffffff78
   2bef0:	strb	r6, [fp, #-124]	; 0xffffff84
   2bef4:	str	r4, [fp, #-120]	; 0xffffff88
   2bef8:	cmp	r4, #0
   2befc:	beq	2c254 <__assert_fail@plt+0x19c60>
   2bf00:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2bf04:	mov	r3, #0
   2bf08:	ldr	r2, [fp, #-128]	; 0xffffff80
   2bf0c:	strb	r3, [fp, #-136]	; 0xffffff78
   2bf10:	strb	r3, [fp, #-80]	; 0xffffffb0
   2bf14:	ldr	r5, [fp, #-76]	; 0xffffffb4
   2bf18:	ldr	r3, [fp, #-72]	; 0xffffffb8
   2bf1c:	add	r4, r4, r2
   2bf20:	str	r4, [fp, #-132]	; 0xffffff7c
   2bf24:	add	r5, r5, r3
   2bf28:	str	r5, [fp, #-76]	; 0xffffffb4
   2bf2c:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   2bf30:	cmp	r3, #0
   2bf34:	subne	r4, fp, #88	; 0x58
   2bf38:	bne	2c130 <__assert_fail@plt+0x19b3c>
   2bf3c:	ldrb	r3, [r5]
   2bf40:	lsr	r2, r3, #5
   2bf44:	and	r3, r3, #31
   2bf48:	ldr	r2, [r9, r2, lsl #2]
   2bf4c:	lsr	r3, r2, r3
   2bf50:	tst	r3, #1
   2bf54:	beq	2c118 <__assert_fail@plt+0x19b24>
   2bf58:	str	r6, [fp, #-72]	; 0xffffffb8
   2bf5c:	ldrb	r3, [r5]
   2bf60:	strb	r6, [fp, #-80]	; 0xffffffb0
   2bf64:	strb	r6, [fp, #-68]	; 0xffffffbc
   2bf68:	mov	r5, r3
   2bf6c:	str	r3, [fp, #-64]	; 0xffffffc0
   2bf70:	cmp	r5, #0
   2bf74:	beq	2bfcc <__assert_fail@plt+0x199d8>
   2bf78:	add	r3, r7, r7, lsl #2
   2bf7c:	add	r3, sl, r3, lsl #3
   2bf80:	ldrb	r2, [r3, #8]
   2bf84:	cmp	r2, #0
   2bf88:	beq	2be90 <__assert_fail@plt+0x1989c>
   2bf8c:	ldr	r3, [r3, #12]
   2bf90:	cmp	r3, r5
   2bf94:	bne	2bea0 <__assert_fail@plt+0x198ac>
   2bf98:	ldr	r5, [fp, #-76]	; 0xffffffb4
   2bf9c:	ldr	r4, [fp, #-72]	; 0xffffffb8
   2bfa0:	add	r7, r7, #1
   2bfa4:	add	r5, r5, r4
   2bfa8:	ldr	r2, [fp, #-208]	; 0xffffff30
   2bfac:	mov	r3, #0
   2bfb0:	strb	r3, [fp, #-80]	; 0xffffffb0
   2bfb4:	str	r5, [fp, #-76]	; 0xffffffb4
   2bfb8:	cmp	r2, r7
   2bfbc:	bne	2bf2c <__assert_fail@plt+0x19938>
   2bfc0:	ldr	r2, [fp, #-216]	; 0xffffff28
   2bfc4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   2bfc8:	str	r3, [r2]
   2bfcc:	mov	r0, sl
   2bfd0:	bl	4fcac <__assert_fail@plt+0x3d6b8>
   2bfd4:	mov	r0, #1
   2bfd8:	b	2bfe0 <__assert_fail@plt+0x199ec>
   2bfdc:	mov	r0, #0
   2bfe0:	sub	sp, fp, #32
   2bfe4:	ldrd	r4, [sp]
   2bfe8:	ldrd	r6, [sp, #8]
   2bfec:	ldrd	r8, [sp, #16]
   2bff0:	ldrd	sl, [sp, #24]
   2bff4:	add	sp, sp, #32
   2bff8:	pop	{pc}		; (ldr pc, [sp], #4)
   2bffc:	bl	4fc54 <__assert_fail@plt+0x3d660>
   2c000:	mov	sl, r0
   2c004:	b	2bc40 <__assert_fail@plt+0x1964c>
   2c008:	sub	r7, fp, #200	; 0xc8
   2c00c:	mov	r0, r7
   2c010:	bl	12060 <mbsinit@plt>
   2c014:	cmp	r0, #0
   2c018:	beq	2c494 <__assert_fail@plt+0x19ea0>
   2c01c:	mov	r3, #1
   2c020:	strb	r3, [fp, #-204]	; 0xffffff34
   2c024:	b	2bd18 <__assert_fail@plt+0x19724>
   2c028:	mov	r2, r7
   2c02c:	mov	r1, r4
   2c030:	mov	r0, r5
   2c034:	bl	12024 <memcpy@plt>
   2c038:	str	r5, [r5, #-16]
   2c03c:	b	2bce4 <__assert_fail@plt+0x196f0>
   2c040:	mov	r2, #1
   2c044:	mov	r9, #0
   2c048:	strb	r2, [fp, #-192]	; 0xffffff40
   2c04c:	str	r2, [fp, #-184]	; 0xffffff48
   2c050:	strb	r6, [fp, #-180]	; 0xffffff4c
   2c054:	b	2bccc <__assert_fail@plt+0x196d8>
   2c058:	ldr	r0, [fp, #-188]	; 0xffffff44
   2c05c:	mov	r9, #0
   2c060:	bl	12300 <strlen@plt>
   2c064:	mov	r2, #1
   2c068:	strb	r2, [fp, #-192]	; 0xffffff40
   2c06c:	str	r0, [fp, #-184]	; 0xffffff48
   2c070:	strb	r6, [fp, #-180]	; 0xffffff4c
   2c074:	b	2bccc <__assert_fail@plt+0x196d8>
   2c078:	ldr	r3, [fp, #-188]	; 0xffffff44
   2c07c:	mov	r2, #1
   2c080:	str	r2, [fp, #-184]	; 0xffffff48
   2c084:	ldrb	r3, [r3]
   2c088:	cmp	r3, #0
   2c08c:	bne	2c4b4 <__assert_fail@plt+0x19ec0>
   2c090:	ldr	r4, [fp, #-176]	; 0xffffff50
   2c094:	cmp	r4, #0
   2c098:	beq	2bd5c <__assert_fail@plt+0x19768>
   2c09c:	bl	2bba0 <__assert_fail@plt+0x195ac>
   2c0a0:	ldr	r3, [r3, #12]
   2c0a4:	ldr	r2, [r5, #52]	; 0x34
   2c0a8:	cmp	r2, r3
   2c0ac:	beq	2c0f8 <__assert_fail@plt+0x19b04>
   2c0b0:	cmp	r4, #0
   2c0b4:	beq	2be04 <__assert_fail@plt+0x19810>
   2c0b8:	ldr	r3, [r9, r4, lsl #2]
   2c0bc:	sub	r4, r4, r3
   2c0c0:	add	r3, r4, r4, lsl #2
   2c0c4:	add	r3, sl, r3, lsl #3
   2c0c8:	ldrb	r2, [r3, #8]
   2c0cc:	cmp	r2, #0
   2c0d0:	bne	2c0a0 <__assert_fail@plt+0x19aac>
   2c0d4:	ldr	r1, [r3, #4]
   2c0d8:	ldr	r2, [r5, #44]	; 0x2c
   2c0dc:	cmp	r2, r1
   2c0e0:	bne	2c0b0 <__assert_fail@plt+0x19abc>
   2c0e4:	ldr	r1, [r3]
   2c0e8:	ldr	r0, [r5, #40]	; 0x28
   2c0ec:	bl	12084 <memcmp@plt>
   2c0f0:	cmp	r0, #0
   2c0f4:	bne	2c0b0 <__assert_fail@plt+0x19abc>
   2c0f8:	add	r4, r4, #1
   2c0fc:	add	r5, r5, #40	; 0x28
   2c100:	sub	r3, r8, r4
   2c104:	str	r3, [r9, r8, lsl #2]
   2c108:	add	r8, r8, #1
   2c10c:	cmp	r6, r8
   2c110:	bne	2bdac <__assert_fail@plt+0x197b8>
   2c114:	b	2be1c <__assert_fail@plt+0x19828>
   2c118:	sub	r4, fp, #88	; 0x58
   2c11c:	mov	r0, r4
   2c120:	bl	12060 <mbsinit@plt>
   2c124:	cmp	r0, #0
   2c128:	beq	2c494 <__assert_fail@plt+0x19ea0>
   2c12c:	strb	r6, [fp, #-92]	; 0xffffffa4
   2c130:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2c134:	mov	r1, r0
   2c138:	mov	r0, r5
   2c13c:	bl	360c8 <__assert_fail@plt+0x23ad4>
   2c140:	mov	r2, r0
   2c144:	mov	r3, r4
   2c148:	mov	r1, r5
   2c14c:	sub	r0, fp, #64	; 0x40
   2c150:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2c154:	cmn	r0, #1
   2c158:	str	r0, [fp, #-72]	; 0xffffffb8
   2c15c:	beq	2c34c <__assert_fail@plt+0x19d58>
   2c160:	cmn	r0, #2
   2c164:	beq	2c3dc <__assert_fail@plt+0x19de8>
   2c168:	cmp	r0, #0
   2c16c:	beq	2c3f8 <__assert_fail@plt+0x19e04>
   2c170:	ldr	r5, [fp, #-64]	; 0xffffffc0
   2c174:	mov	r0, r4
   2c178:	strb	r6, [fp, #-68]	; 0xffffffbc
   2c17c:	bl	12060 <mbsinit@plt>
   2c180:	cmp	r0, #0
   2c184:	strb	r6, [fp, #-80]	; 0xffffffb0
   2c188:	movne	r3, #0
   2c18c:	strbne	r3, [fp, #-92]	; 0xffffffa4
   2c190:	b	2bf70 <__assert_fail@plt+0x1997c>
   2c194:	ldr	r5, [fp, #-76]	; 0xffffffb4
   2c198:	mov	r2, r4
   2c19c:	ldr	r0, [r3]
   2c1a0:	mov	r1, r5
   2c1a4:	bl	12084 <memcmp@plt>
   2c1a8:	cmp	r0, #0
   2c1ac:	beq	2bfa0 <__assert_fail@plt+0x199ac>
   2c1b0:	cmp	r7, #0
   2c1b4:	beq	2bea8 <__assert_fail@plt+0x198b4>
   2c1b8:	ldr	r3, [fp, #-212]	; 0xffffff2c
   2c1bc:	ldr	r5, [r3, r7, lsl #2]
   2c1c0:	cmp	r5, #0
   2c1c4:	sub	r7, r7, r5
   2c1c8:	beq	2be7c <__assert_fail@plt+0x19888>
   2c1cc:	ldrb	r3, [fp, #-136]	; 0xffffff78
   2c1d0:	cmp	r3, #0
   2c1d4:	beq	2c438 <__assert_fail@plt+0x19e44>
   2c1d8:	ldrb	r3, [fp, #-124]	; 0xffffff84
   2c1dc:	cmp	r3, #0
   2c1e0:	bne	2c344 <__assert_fail@plt+0x19d50>
   2c1e4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2c1e8:	mov	r2, #0
   2c1ec:	subs	r5, r5, #1
   2c1f0:	ldr	r3, [fp, #-128]	; 0xffffff80
   2c1f4:	strb	r2, [fp, #-136]	; 0xffffff78
   2c1f8:	add	r4, r4, r3
   2c1fc:	ldrbeq	r3, [fp, #-80]	; 0xffffffb0
   2c200:	str	r4, [fp, #-132]	; 0xffffff7c
   2c204:	beq	2be70 <__assert_fail@plt+0x1987c>
   2c208:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   2c20c:	cmp	r3, #0
   2c210:	subne	r8, fp, #144	; 0x90
   2c214:	bne	2c270 <__assert_fail@plt+0x19c7c>
   2c218:	ldrb	r3, [r4]
   2c21c:	lsr	r2, r3, #5
   2c220:	and	r3, r3, #31
   2c224:	ldr	r2, [r9, r2, lsl #2]
   2c228:	lsr	r3, r2, r3
   2c22c:	tst	r3, #1
   2c230:	beq	2c258 <__assert_fail@plt+0x19c64>
   2c234:	str	r6, [fp, #-128]	; 0xffffff80
   2c238:	ldrb	r3, [r4]
   2c23c:	strb	r6, [fp, #-136]	; 0xffffff78
   2c240:	strb	r6, [fp, #-124]	; 0xffffff84
   2c244:	mov	r4, r3
   2c248:	str	r3, [fp, #-120]	; 0xffffff88
   2c24c:	cmp	r4, #0
   2c250:	bne	2c1e4 <__assert_fail@plt+0x19bf0>
   2c254:	bl	125a0 <abort@plt>
   2c258:	sub	r8, fp, #144	; 0x90
   2c25c:	mov	r0, r8
   2c260:	bl	12060 <mbsinit@plt>
   2c264:	cmp	r0, #0
   2c268:	beq	2c494 <__assert_fail@plt+0x19ea0>
   2c26c:	strb	r6, [fp, #-148]	; 0xffffff6c
   2c270:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2c274:	mov	r1, r0
   2c278:	mov	r0, r4
   2c27c:	bl	360c8 <__assert_fail@plt+0x23ad4>
   2c280:	mov	r2, r0
   2c284:	mov	r3, r8
   2c288:	mov	r1, r4
   2c28c:	sub	r0, fp, #120	; 0x78
   2c290:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2c294:	cmn	r0, #1
   2c298:	str	r0, [fp, #-128]	; 0xffffff80
   2c29c:	beq	2c2d4 <__assert_fail@plt+0x19ce0>
   2c2a0:	cmn	r0, #2
   2c2a4:	beq	2c2e8 <__assert_fail@plt+0x19cf4>
   2c2a8:	cmp	r0, #0
   2c2ac:	beq	2c304 <__assert_fail@plt+0x19d10>
   2c2b0:	ldr	r4, [fp, #-120]	; 0xffffff88
   2c2b4:	mov	r0, r8
   2c2b8:	strb	r6, [fp, #-124]	; 0xffffff84
   2c2bc:	bl	12060 <mbsinit@plt>
   2c2c0:	cmp	r0, #0
   2c2c4:	strb	r6, [fp, #-136]	; 0xffffff78
   2c2c8:	movne	r3, #0
   2c2cc:	strbne	r3, [fp, #-148]	; 0xffffff6c
   2c2d0:	b	2c24c <__assert_fail@plt+0x19c58>
   2c2d4:	mov	r3, #0
   2c2d8:	str	r6, [fp, #-128]	; 0xffffff80
   2c2dc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2c2e0:	strb	r3, [fp, #-124]	; 0xffffff84
   2c2e4:	b	2c1e8 <__assert_fail@plt+0x19bf4>
   2c2e8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2c2ec:	mov	r0, r4
   2c2f0:	bl	12300 <strlen@plt>
   2c2f4:	mov	r3, #0
   2c2f8:	str	r0, [fp, #-128]	; 0xffffff80
   2c2fc:	strb	r3, [fp, #-124]	; 0xffffff84
   2c300:	b	2c1e8 <__assert_fail@plt+0x19bf4>
   2c304:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2c308:	str	r6, [fp, #-128]	; 0xffffff80
   2c30c:	ldrb	r3, [r4]
   2c310:	cmp	r3, #0
   2c314:	bne	2c4b4 <__assert_fail@plt+0x19ec0>
   2c318:	ldr	r4, [fp, #-120]	; 0xffffff88
   2c31c:	cmp	r4, #0
   2c320:	beq	2c2b4 <__assert_fail@plt+0x19cc0>
   2c324:	movw	r3, #20260	; 0x4f24
   2c328:	movt	r3, #5
   2c32c:	movw	r1, #20280	; 0x4f38
   2c330:	movt	r1, #5
   2c334:	movw	r0, #20292	; 0x4f44
   2c338:	movt	r0, #5
   2c33c:	mov	r2, #172	; 0xac
   2c340:	bl	125f4 <__assert_fail@plt>
   2c344:	ldr	r4, [fp, #-120]	; 0xffffff88
   2c348:	b	2c24c <__assert_fail@plt+0x19c58>
   2c34c:	mov	r3, #0
   2c350:	strb	r6, [fp, #-80]	; 0xffffffb0
   2c354:	str	r6, [fp, #-72]	; 0xffffffb8
   2c358:	strb	r3, [fp, #-68]	; 0xffffffbc
   2c35c:	b	2be88 <__assert_fail@plt+0x19894>
   2c360:	sub	r8, fp, #144	; 0x90
   2c364:	mov	r0, r8
   2c368:	bl	12060 <mbsinit@plt>
   2c36c:	cmp	r0, #0
   2c370:	beq	2c494 <__assert_fail@plt+0x19ea0>
   2c374:	strb	r6, [fp, #-148]	; 0xffffff6c
   2c378:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2c37c:	mov	r1, r0
   2c380:	mov	r0, r4
   2c384:	bl	360c8 <__assert_fail@plt+0x23ad4>
   2c388:	mov	r2, r0
   2c38c:	mov	r3, r8
   2c390:	mov	r1, r4
   2c394:	sub	r0, fp, #120	; 0x78
   2c398:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2c39c:	cmn	r0, #1
   2c3a0:	str	r0, [fp, #-128]	; 0xffffff80
   2c3a4:	beq	2c440 <__assert_fail@plt+0x19e4c>
   2c3a8:	cmn	r0, #2
   2c3ac:	beq	2c454 <__assert_fail@plt+0x19e60>
   2c3b0:	cmp	r0, #0
   2c3b4:	beq	2c470 <__assert_fail@plt+0x19e7c>
   2c3b8:	ldr	r4, [fp, #-120]	; 0xffffff88
   2c3bc:	mov	r0, r8
   2c3c0:	strb	r6, [fp, #-124]	; 0xffffff84
   2c3c4:	bl	12060 <mbsinit@plt>
   2c3c8:	cmp	r0, #0
   2c3cc:	strb	r6, [fp, #-136]	; 0xffffff78
   2c3d0:	movne	r3, #0
   2c3d4:	strbne	r3, [fp, #-148]	; 0xffffff6c
   2c3d8:	b	2bef8 <__assert_fail@plt+0x19904>
   2c3dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2c3e0:	bl	12300 <strlen@plt>
   2c3e4:	mov	r3, #0
   2c3e8:	strb	r6, [fp, #-80]	; 0xffffffb0
   2c3ec:	str	r0, [fp, #-72]	; 0xffffffb8
   2c3f0:	strb	r3, [fp, #-68]	; 0xffffffbc
   2c3f4:	b	2be88 <__assert_fail@plt+0x19894>
   2c3f8:	ldr	r5, [fp, #-76]	; 0xffffffb4
   2c3fc:	str	r6, [fp, #-72]	; 0xffffffb8
   2c400:	ldrb	r3, [r5]
   2c404:	cmp	r3, #0
   2c408:	bne	2c4b4 <__assert_fail@plt+0x19ec0>
   2c40c:	ldr	r5, [fp, #-64]	; 0xffffffc0
   2c410:	cmp	r5, #0
   2c414:	beq	2c174 <__assert_fail@plt+0x19b80>
   2c418:	b	2c09c <__assert_fail@plt+0x19aa8>
   2c41c:	ldrb	r3, [fp, #-124]	; 0xffffff84
   2c420:	cmp	r3, #0
   2c424:	beq	2bf00 <__assert_fail@plt+0x1990c>
   2c428:	ldr	r4, [fp, #-120]	; 0xffffff88
   2c42c:	b	2bef8 <__assert_fail@plt+0x19904>
   2c430:	ldr	r5, [fp, #-64]	; 0xffffffc0
   2c434:	b	2bf70 <__assert_fail@plt+0x1997c>
   2c438:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2c43c:	b	2c208 <__assert_fail@plt+0x19c14>
   2c440:	mov	r3, #0
   2c444:	str	r6, [fp, #-128]	; 0xffffff80
   2c448:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2c44c:	strb	r3, [fp, #-124]	; 0xffffff84
   2c450:	b	2bf04 <__assert_fail@plt+0x19910>
   2c454:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2c458:	mov	r0, r4
   2c45c:	bl	12300 <strlen@plt>
   2c460:	mov	r3, #0
   2c464:	str	r0, [fp, #-128]	; 0xffffff80
   2c468:	strb	r3, [fp, #-124]	; 0xffffff84
   2c46c:	b	2bf04 <__assert_fail@plt+0x19910>
   2c470:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2c474:	str	r6, [fp, #-128]	; 0xffffff80
   2c478:	ldrb	r3, [r4]
   2c47c:	cmp	r3, #0
   2c480:	bne	2c4b4 <__assert_fail@plt+0x19ec0>
   2c484:	ldr	r4, [fp, #-120]	; 0xffffff88
   2c488:	cmp	r4, #0
   2c48c:	beq	2c3bc <__assert_fail@plt+0x19dc8>
   2c490:	b	2c09c <__assert_fail@plt+0x19aa8>
   2c494:	movw	r3, #20260	; 0x4f24
   2c498:	movt	r3, #5
   2c49c:	movw	r1, #20280	; 0x4f38
   2c4a0:	movt	r1, #5
   2c4a4:	movw	r0, #20312	; 0x4f58
   2c4a8:	movt	r0, #5
   2c4ac:	mov	r2, #143	; 0x8f
   2c4b0:	bl	125f4 <__assert_fail@plt>
   2c4b4:	movw	r3, #20260	; 0x4f24
   2c4b8:	movt	r3, #5
   2c4bc:	movw	r1, #20280	; 0x4f38
   2c4c0:	movt	r1, #5
   2c4c4:	movw	r0, #20336	; 0x4f70
   2c4c8:	movt	r0, #5
   2c4cc:	mov	r2, #171	; 0xab
   2c4d0:	bl	125f4 <__assert_fail@plt>
   2c4d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c4d8:	mov	r4, r0
   2c4dc:	strd	r6, [sp, #8]
   2c4e0:	strd	r8, [sp, #16]
   2c4e4:	mov	r8, r1
   2c4e8:	strd	sl, [sp, #24]
   2c4ec:	str	lr, [sp, #32]
   2c4f0:	sub	sp, sp, #316	; 0x13c
   2c4f4:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2c4f8:	cmp	r0, #1
   2c4fc:	bhi	2c6ec <__assert_fail@plt+0x1a0f8>
   2c500:	ldrb	r9, [r8]
   2c504:	cmp	r9, #0
   2c508:	beq	2c668 <__assert_fail@plt+0x1a074>
   2c50c:	ldrb	r3, [r4]
   2c510:	add	r2, r8, #1
   2c514:	str	r2, [sp, #4]
   2c518:	cmp	r3, #0
   2c51c:	beq	2cbc4 <__assert_fail@plt+0x1a5d0>
   2c520:	mov	r6, #0
   2c524:	mov	fp, r8
   2c528:	mov	ip, r6
   2c52c:	mov	sl, r6
   2c530:	mov	r0, #1
   2c534:	b	2c58c <__assert_fail@plt+0x19f98>
   2c538:	cmp	fp, #0
   2c53c:	beq	2c55c <__assert_fail@plt+0x19f68>
   2c540:	mov	r0, fp
   2c544:	sub	r1, r5, sl
   2c548:	bl	12408 <strnlen@plt>
   2c54c:	ldrb	r3, [fp, r0]!
   2c550:	cmp	r3, #0
   2c554:	bne	2cea4 <__assert_fail@plt+0x1a8b0>
   2c558:	mov	sl, r5
   2c55c:	mov	r0, r8
   2c560:	bl	12300 <strlen@plt>
   2c564:	mov	r2, r0
   2c568:	add	r3, sp, #256	; 0x100
   2c56c:	mov	r1, r8
   2c570:	mov	r0, r7
   2c574:	bl	2ba1c <__assert_fail@plt+0x19428>
   2c578:	cmp	r0, #0
   2c57c:	bne	2d15c <__assert_fail@plt+0x1ab68>
   2c580:	mov	fp, r0
   2c584:	mov	r4, r7
   2c588:	mov	ip, r5
   2c58c:	mov	r7, r4
   2c590:	add	r6, r6, #1
   2c594:	ldrb	r3, [r7], #1
   2c598:	add	r5, ip, #1
   2c59c:	cmp	r3, r9
   2c5a0:	beq	2c688 <__assert_fail@plt+0x1a094>
   2c5a4:	ldrb	r3, [r4, #1]
   2c5a8:	cmp	r3, #0
   2c5ac:	beq	2cbc4 <__assert_fail@plt+0x1a5d0>
   2c5b0:	cmp	r6, #9
   2c5b4:	movls	r4, #0
   2c5b8:	andhi	r4, r0, #1
   2c5bc:	cmp	r4, #0
   2c5c0:	beq	2c584 <__assert_fail@plt+0x19f90>
   2c5c4:	add	r3, r6, r6, lsl #2
   2c5c8:	cmp	r5, r3
   2c5cc:	bcs	2c538 <__assert_fail@plt+0x19f44>
   2c5d0:	mov	r0, r4
   2c5d4:	b	2c584 <__assert_fail@plt+0x19f90>
   2c5d8:	add	r0, sp, #36	; 0x24
   2c5dc:	bl	12060 <mbsinit@plt>
   2c5e0:	cmp	r0, #0
   2c5e4:	beq	2d164 <__assert_fail@plt+0x1ab70>
   2c5e8:	mov	r6, #1
   2c5ec:	strb	r6, [sp, #32]
   2c5f0:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2c5f4:	mov	r1, r0
   2c5f8:	mov	r0, r8
   2c5fc:	bl	360c8 <__assert_fail@plt+0x23ad4>
   2c600:	mov	r2, r0
   2c604:	add	r3, sp, #36	; 0x24
   2c608:	mov	r1, r8
   2c60c:	add	r0, sp, #60	; 0x3c
   2c610:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2c614:	cmn	r0, #1
   2c618:	str	r0, [sp, #52]	; 0x34
   2c61c:	strbeq	r6, [sp, #44]	; 0x2c
   2c620:	streq	r6, [sp, #52]	; 0x34
   2c624:	strbeq	r5, [sp, #56]	; 0x38
   2c628:	beq	2c75c <__assert_fail@plt+0x1a168>
   2c62c:	cmn	r0, #2
   2c630:	beq	2c748 <__assert_fail@plt+0x1a154>
   2c634:	cmp	r0, #0
   2c638:	beq	2d0c8 <__assert_fail@plt+0x1aad4>
   2c63c:	ldr	r5, [sp, #60]	; 0x3c
   2c640:	mov	r6, #1
   2c644:	add	r0, sp, #36	; 0x24
   2c648:	strb	r6, [sp, #56]	; 0x38
   2c64c:	bl	12060 <mbsinit@plt>
   2c650:	cmp	r0, #0
   2c654:	strb	r6, [sp, #44]	; 0x2c
   2c658:	movne	r3, #0
   2c65c:	strbne	r3, [sp, #32]
   2c660:	cmp	r5, #0
   2c664:	bne	2c75c <__assert_fail@plt+0x1a168>
   2c668:	mov	r0, r4
   2c66c:	add	sp, sp, #316	; 0x13c
   2c670:	ldrd	r4, [sp]
   2c674:	ldrd	r6, [sp, #8]
   2c678:	ldrd	r8, [sp, #16]
   2c67c:	ldrd	sl, [sp, #24]
   2c680:	add	sp, sp, #32
   2c684:	pop	{pc}		; (ldr pc, [sp], #4)
   2c688:	ldrb	r3, [r8, #1]
   2c68c:	cmp	r3, #0
   2c690:	beq	2c668 <__assert_fail@plt+0x1a074>
   2c694:	ldrb	r2, [r7]
   2c698:	cmp	r2, #0
   2c69c:	beq	2cbc4 <__assert_fail@plt+0x1a5d0>
   2c6a0:	cmp	r3, r2
   2c6a4:	add	r5, ip, #2
   2c6a8:	bne	2c5b0 <__assert_fail@plt+0x19fbc>
   2c6ac:	ldr	r3, [sp, #4]
   2c6b0:	mov	r1, r7
   2c6b4:	add	r3, r3, #1
   2c6b8:	b	2c6dc <__assert_fail@plt+0x1a0e8>
   2c6bc:	ldrb	lr, [r1, #1]!
   2c6c0:	cmp	lr, #0
   2c6c4:	beq	2cbc4 <__assert_fail@plt+0x1a5d0>
   2c6c8:	add	r3, r3, #1
   2c6cc:	cmp	r2, lr
   2c6d0:	sub	r5, r3, r8
   2c6d4:	add	r5, r5, ip
   2c6d8:	bne	2c5b0 <__assert_fail@plt+0x19fbc>
   2c6dc:	ldrb	r2, [r3]
   2c6e0:	cmp	r2, #0
   2c6e4:	bne	2c6bc <__assert_fail@plt+0x1a0c8>
   2c6e8:	b	2c668 <__assert_fail@plt+0x1a074>
   2c6ec:	ldrb	r2, [r8]
   2c6f0:	mov	r3, #0
   2c6f4:	movw	sl, #26424	; 0x6738
   2c6f8:	movt	sl, #5
   2c6fc:	mov	r6, #0
   2c700:	strb	r3, [sp, #32]
   2c704:	mov	r7, #0
   2c708:	strb	r3, [sp, #44]	; 0x2c
   2c70c:	lsr	r3, r2, #5
   2c710:	and	r1, r2, #31
   2c714:	strd	r6, [sp, #36]	; 0x24
   2c718:	str	r8, [sp, #48]	; 0x30
   2c71c:	ldr	r3, [sl, r3, lsl #2]
   2c720:	lsr	r3, r3, r1
   2c724:	ands	r5, r3, #1
   2c728:	beq	2c5d8 <__assert_fail@plt+0x19fe4>
   2c72c:	mov	r3, #1
   2c730:	mov	r5, r2
   2c734:	strb	r3, [sp, #44]	; 0x2c
   2c738:	str	r3, [sp, #52]	; 0x34
   2c73c:	strb	r3, [sp, #56]	; 0x38
   2c740:	str	r2, [sp, #60]	; 0x3c
   2c744:	b	2c660 <__assert_fail@plt+0x1a06c>
   2c748:	ldr	r0, [sp, #48]	; 0x30
   2c74c:	bl	12300 <strlen@plt>
   2c750:	strb	r6, [sp, #44]	; 0x2c
   2c754:	str	r0, [sp, #52]	; 0x34
   2c758:	strb	r5, [sp, #56]	; 0x38
   2c75c:	mov	r3, #0
   2c760:	mov	r0, #1
   2c764:	mov	r7, r3
   2c768:	mov	r6, r4
   2c76c:	str	r3, [sp, #4]
   2c770:	mov	r5, r0
   2c774:	mov	fp, r0
   2c778:	str	r0, [sp, #8]
   2c77c:	str	r3, [sp, #16]
   2c780:	str	r3, [sp, #20]
   2c784:	str	r3, [sp, #24]
   2c788:	strb	r3, [sp, #88]	; 0x58
   2c78c:	str	r3, [sp, #92]	; 0x5c
   2c790:	str	r3, [sp, #96]	; 0x60
   2c794:	strb	r3, [sp, #100]	; 0x64
   2c798:	strb	r3, [sp, #144]	; 0x90
   2c79c:	str	r3, [sp, #148]	; 0x94
   2c7a0:	str	r3, [sp, #152]	; 0x98
   2c7a4:	strb	r3, [sp, #156]	; 0x9c
   2c7a8:	ldrb	r3, [sp, #144]	; 0x90
   2c7ac:	str	r8, [sp, #12]
   2c7b0:	str	r4, [sp, #28]
   2c7b4:	str	r8, [sp, #104]	; 0x68
   2c7b8:	str	r4, [sp, #160]	; 0xa0
   2c7bc:	cmp	r3, #0
   2c7c0:	addne	r4, sp, #148	; 0x94
   2c7c4:	bne	2cad8 <__assert_fail@plt+0x1a4e4>
   2c7c8:	ldrb	r3, [r6]
   2c7cc:	lsr	r2, r3, #5
   2c7d0:	and	r3, r3, #31
   2c7d4:	ldr	r2, [sl, r2, lsl #2]
   2c7d8:	lsr	r3, r2, r3
   2c7dc:	tst	r3, #1
   2c7e0:	beq	2cca4 <__assert_fail@plt+0x1a6b0>
   2c7e4:	str	fp, [sp, #164]	; 0xa4
   2c7e8:	ldrb	r6, [r6]
   2c7ec:	strb	r5, [sp, #156]	; 0x9c
   2c7f0:	strb	r5, [sp, #168]	; 0xa8
   2c7f4:	str	r6, [sp, #172]	; 0xac
   2c7f8:	cmp	r6, #0
   2c7fc:	beq	2cbc4 <__assert_fail@plt+0x1a5d0>
   2c800:	ldrd	r2, [sp, #4]
   2c804:	cmp	r2, #9
   2c808:	movls	r3, #0
   2c80c:	andhi	r3, r3, #1
   2c810:	cmp	r3, #0
   2c814:	addeq	r7, r7, #1
   2c818:	beq	2c830 <__assert_fail@plt+0x1a23c>
   2c81c:	add	r2, r2, r2, lsl #2
   2c820:	cmp	r7, r2
   2c824:	addcc	r7, r7, #1
   2c828:	strcc	r3, [sp, #8]
   2c82c:	bcs	2ccfc <__assert_fail@plt+0x1a708>
   2c830:	ldrb	r3, [sp, #56]	; 0x38
   2c834:	cmp	r3, #0
   2c838:	beq	2cc14 <__assert_fail@plt+0x1a620>
   2c83c:	ldr	r3, [sp, #60]	; 0x3c
   2c840:	ldr	r2, [sp, #172]	; 0xac
   2c844:	cmp	r2, r3
   2c848:	bne	2caa4 <__assert_fail@plt+0x1a4b0>
   2c84c:	ldr	ip, [sp, #12]
   2c850:	ldr	r3, [sp, #16]
   2c854:	ldr	r0, [sp, #160]	; 0xa0
   2c858:	ldrb	r1, [ip]
   2c85c:	str	r3, [sp, #260]	; 0x104
   2c860:	ldr	r3, [sp, #20]
   2c864:	str	ip, [sp, #272]	; 0x110
   2c868:	ldr	r2, [sp, #164]	; 0xa4
   2c86c:	and	ip, r1, #31
   2c870:	ldrd	r8, [sp, #168]	; 0xa8
   2c874:	str	r3, [sp, #264]	; 0x108
   2c878:	lsr	r3, r1, #5
   2c87c:	str	r2, [sp, #220]	; 0xdc
   2c880:	ldr	r6, [sl, r3, lsl #2]
   2c884:	strd	r8, [sp, #224]	; 0xe0
   2c888:	ldrd	r2, [sp, #152]	; 0x98
   2c88c:	ldrd	r8, [sp, #184]	; 0xb8
   2c890:	lsr	r6, r6, ip
   2c894:	mov	ip, #0
   2c898:	ldr	lr, [sp, #220]	; 0xdc
   2c89c:	strd	r2, [sp, #208]	; 0xd0
   2c8a0:	ands	r6, r6, #1
   2c8a4:	ldrd	r2, [sp, #144]	; 0x90
   2c8a8:	add	r0, lr, r0
   2c8ac:	strd	r2, [sp, #200]	; 0xc8
   2c8b0:	ldrd	r2, [sp, #176]	; 0xb0
   2c8b4:	strb	ip, [sp, #212]	; 0xd4
   2c8b8:	str	r0, [sp, #216]	; 0xd8
   2c8bc:	strd	r8, [sp, #240]	; 0xf0
   2c8c0:	strb	ip, [sp, #256]	; 0x100
   2c8c4:	strd	r2, [sp, #232]	; 0xe8
   2c8c8:	ldrd	r2, [sp, #192]	; 0xc0
   2c8cc:	strb	ip, [sp, #268]	; 0x10c
   2c8d0:	strd	r2, [sp, #248]	; 0xf8
   2c8d4:	beq	2cf7c <__assert_fail@plt+0x1a988>
   2c8d8:	mov	r4, r1
   2c8dc:	strb	r5, [sp, #268]	; 0x10c
   2c8e0:	cmp	r4, #0
   2c8e4:	str	fp, [sp, #276]	; 0x114
   2c8e8:	strb	r5, [sp, #280]	; 0x118
   2c8ec:	str	r1, [sp, #284]	; 0x11c
   2c8f0:	beq	2cffc <__assert_fail@plt+0x1aa08>
   2c8f4:	ldr	r4, [sp, #272]	; 0x110
   2c8f8:	mov	r3, #0
   2c8fc:	add	r7, r7, #1
   2c900:	ldr	r2, [sp, #276]	; 0x114
   2c904:	mov	r9, r3
   2c908:	strb	r3, [sp, #268]	; 0x10c
   2c90c:	add	r4, r4, r2
   2c910:	str	r4, [sp, #272]	; 0x110
   2c914:	b	2c9fc <__assert_fail@plt+0x1a408>
   2c918:	ldrb	r3, [r4]
   2c91c:	lsr	r2, r3, #5
   2c920:	and	r3, r3, #31
   2c924:	ldr	r2, [sl, r2, lsl #2]
   2c928:	lsr	r3, r2, r3
   2c92c:	tst	r3, #1
   2c930:	beq	2cbf8 <__assert_fail@plt+0x1a604>
   2c934:	str	fp, [sp, #276]	; 0x114
   2c938:	ldrb	r4, [r4]
   2c93c:	strb	r5, [sp, #268]	; 0x10c
   2c940:	strb	r5, [sp, #280]	; 0x118
   2c944:	cmp	r4, #0
   2c948:	str	r4, [sp, #284]	; 0x11c
   2c94c:	beq	2ca78 <__assert_fail@plt+0x1a484>
   2c950:	ldrb	r3, [sp, #212]	; 0xd4
   2c954:	cmp	r3, #0
   2c958:	bne	2cbcc <__assert_fail@plt+0x1a5d8>
   2c95c:	ldrb	r3, [sp, #200]	; 0xc8
   2c960:	ldr	r4, [sp, #216]	; 0xd8
   2c964:	cmp	r3, #0
   2c968:	addne	r8, sp, #204	; 0xcc
   2c96c:	bne	2cb54 <__assert_fail@plt+0x1a560>
   2c970:	ldrb	r3, [r4]
   2c974:	lsr	r2, r3, #5
   2c978:	and	r3, r3, #31
   2c97c:	ldr	r2, [sl, r2, lsl #2]
   2c980:	lsr	r3, r2, r3
   2c984:	tst	r3, #1
   2c988:	beq	2cb3c <__assert_fail@plt+0x1a548>
   2c98c:	str	fp, [sp, #220]	; 0xdc
   2c990:	ldrb	r0, [r4]
   2c994:	strb	r5, [sp, #212]	; 0xd4
   2c998:	strb	r5, [sp, #224]	; 0xe0
   2c99c:	mov	r6, r0
   2c9a0:	str	r0, [sp, #228]	; 0xe4
   2c9a4:	cmp	r6, #0
   2c9a8:	beq	2cbc4 <__assert_fail@plt+0x1a5d0>
   2c9ac:	ldrb	r3, [sp, #280]	; 0x118
   2c9b0:	cmp	r3, #0
   2c9b4:	beq	2ca94 <__assert_fail@plt+0x1a4a0>
   2c9b8:	ldr	r0, [sp, #284]	; 0x11c
   2c9bc:	subs	r0, r0, r6
   2c9c0:	movne	r0, #1
   2c9c4:	cmp	r0, #0
   2c9c8:	add	r2, r7, #1
   2c9cc:	bne	2caa4 <__assert_fail@plt+0x1a4b0>
   2c9d0:	mov	r7, r2
   2c9d4:	ldr	r3, [sp, #216]	; 0xd8
   2c9d8:	strb	r0, [sp, #212]	; 0xd4
   2c9dc:	ldr	r1, [sp, #220]	; 0xdc
   2c9e0:	strb	r0, [sp, #268]	; 0x10c
   2c9e4:	ldr	r4, [sp, #272]	; 0x110
   2c9e8:	ldr	r2, [sp, #276]	; 0x114
   2c9ec:	add	r3, r3, r1
   2c9f0:	str	r3, [sp, #216]	; 0xd8
   2c9f4:	add	r4, r4, r2
   2c9f8:	str	r4, [sp, #272]	; 0x110
   2c9fc:	ldrb	r3, [sp, #256]	; 0x100
   2ca00:	cmp	r3, #0
   2ca04:	beq	2c918 <__assert_fail@plt+0x1a324>
   2ca08:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2ca0c:	mov	r1, r0
   2ca10:	mov	r0, r4
   2ca14:	bl	360c8 <__assert_fail@plt+0x23ad4>
   2ca18:	mov	r2, r0
   2ca1c:	add	r3, sp, #260	; 0x104
   2ca20:	mov	r1, r4
   2ca24:	add	r0, sp, #284	; 0x11c
   2ca28:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2ca2c:	cmn	r0, #1
   2ca30:	str	r0, [sp, #276]	; 0x114
   2ca34:	strbeq	r5, [sp, #268]	; 0x10c
   2ca38:	streq	fp, [sp, #276]	; 0x114
   2ca3c:	strbeq	r9, [sp, #280]	; 0x118
   2ca40:	beq	2c950 <__assert_fail@plt+0x1a35c>
   2ca44:	cmn	r0, #2
   2ca48:	beq	2cc44 <__assert_fail@plt+0x1a650>
   2ca4c:	cmp	r0, #0
   2ca50:	beq	2cc5c <__assert_fail@plt+0x1a668>
   2ca54:	ldr	r4, [sp, #284]	; 0x11c
   2ca58:	add	r0, sp, #260	; 0x104
   2ca5c:	strb	r5, [sp, #280]	; 0x118
   2ca60:	bl	12060 <mbsinit@plt>
   2ca64:	cmp	r0, #0
   2ca68:	strb	r5, [sp, #268]	; 0x10c
   2ca6c:	strbne	r9, [sp, #256]	; 0x100
   2ca70:	cmp	r4, #0
   2ca74:	bne	2c950 <__assert_fail@plt+0x1a35c>
   2ca78:	ldr	r0, [sp, #160]	; 0xa0
   2ca7c:	b	2c66c <__assert_fail@plt+0x1a078>
   2ca80:	ldr	r0, [sp, #216]	; 0xd8
   2ca84:	bl	12300 <strlen@plt>
   2ca88:	strb	r5, [sp, #212]	; 0xd4
   2ca8c:	str	r0, [sp, #220]	; 0xdc
   2ca90:	strb	r9, [sp, #224]	; 0xe0
   2ca94:	ldr	r2, [sp, #220]	; 0xdc
   2ca98:	ldr	r3, [sp, #276]	; 0x114
   2ca9c:	cmp	r2, r3
   2caa0:	beq	2cbe0 <__assert_fail@plt+0x1a5ec>
   2caa4:	ldr	r6, [sp, #160]	; 0xa0
   2caa8:	ldr	r4, [sp, #164]	; 0xa4
   2caac:	mov	r3, #0
   2cab0:	add	r6, r6, r4
   2cab4:	ldr	r2, [sp, #4]
   2cab8:	strb	r3, [sp, #156]	; 0x9c
   2cabc:	ldrb	r3, [sp, #144]	; 0x90
   2cac0:	str	r6, [sp, #160]	; 0xa0
   2cac4:	add	r2, r2, #1
   2cac8:	cmp	r3, #0
   2cacc:	str	r2, [sp, #4]
   2cad0:	addne	r4, sp, #148	; 0x94
   2cad4:	beq	2c7c8 <__assert_fail@plt+0x1a1d4>
   2cad8:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2cadc:	mov	r1, r0
   2cae0:	mov	r0, r6
   2cae4:	bl	360c8 <__assert_fail@plt+0x23ad4>
   2cae8:	mov	r2, r0
   2caec:	mov	r3, r4
   2caf0:	mov	r1, r6
   2caf4:	add	r0, sp, #172	; 0xac
   2caf8:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2cafc:	cmn	r0, #1
   2cb00:	str	r0, [sp, #164]	; 0xa4
   2cb04:	beq	2ccc0 <__assert_fail@plt+0x1a6cc>
   2cb08:	cmn	r0, #2
   2cb0c:	beq	2cef0 <__assert_fail@plt+0x1a8fc>
   2cb10:	cmp	r0, #0
   2cb14:	bne	2cec0 <__assert_fail@plt+0x1a8cc>
   2cb18:	ldr	r6, [sp, #160]	; 0xa0
   2cb1c:	str	fp, [sp, #164]	; 0xa4
   2cb20:	ldrb	r3, [r6]
   2cb24:	cmp	r3, #0
   2cb28:	bne	2d184 <__assert_fail@plt+0x1ab90>
   2cb2c:	ldr	r6, [sp, #172]	; 0xac
   2cb30:	cmp	r6, #0
   2cb34:	beq	2cec4 <__assert_fail@plt+0x1a8d0>
   2cb38:	b	2d0e8 <__assert_fail@plt+0x1aaf4>
   2cb3c:	add	r8, sp, #204	; 0xcc
   2cb40:	mov	r0, r8
   2cb44:	bl	12060 <mbsinit@plt>
   2cb48:	cmp	r0, #0
   2cb4c:	beq	2d164 <__assert_fail@plt+0x1ab70>
   2cb50:	strb	r5, [sp, #200]	; 0xc8
   2cb54:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2cb58:	mov	r1, r0
   2cb5c:	mov	r0, r4
   2cb60:	bl	360c8 <__assert_fail@plt+0x23ad4>
   2cb64:	mov	r2, r0
   2cb68:	mov	r3, r8
   2cb6c:	mov	r1, r4
   2cb70:	add	r0, sp, #228	; 0xe4
   2cb74:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2cb78:	cmn	r0, #1
   2cb7c:	str	r0, [sp, #220]	; 0xdc
   2cb80:	strbeq	r5, [sp, #212]	; 0xd4
   2cb84:	streq	fp, [sp, #220]	; 0xdc
   2cb88:	strbeq	r9, [sp, #224]	; 0xe0
   2cb8c:	beq	2ca94 <__assert_fail@plt+0x1a4a0>
   2cb90:	cmn	r0, #2
   2cb94:	beq	2ca80 <__assert_fail@plt+0x1a48c>
   2cb98:	cmp	r0, #0
   2cb9c:	beq	2cc80 <__assert_fail@plt+0x1a68c>
   2cba0:	ldr	r6, [sp, #228]	; 0xe4
   2cba4:	mov	r0, r8
   2cba8:	strb	r5, [sp, #224]	; 0xe0
   2cbac:	bl	12060 <mbsinit@plt>
   2cbb0:	cmp	r0, #0
   2cbb4:	strb	r5, [sp, #212]	; 0xd4
   2cbb8:	strbne	r9, [sp, #200]	; 0xc8
   2cbbc:	cmp	r6, #0
   2cbc0:	bne	2c9ac <__assert_fail@plt+0x1a3b8>
   2cbc4:	mov	r0, #0
   2cbc8:	b	2c66c <__assert_fail@plt+0x1a078>
   2cbcc:	ldrb	r3, [sp, #224]	; 0xe0
   2cbd0:	cmp	r3, #0
   2cbd4:	beq	2ca94 <__assert_fail@plt+0x1a4a0>
   2cbd8:	ldr	r6, [sp, #228]	; 0xe4
   2cbdc:	b	2c9a4 <__assert_fail@plt+0x1a3b0>
   2cbe0:	ldr	r0, [sp, #216]	; 0xd8
   2cbe4:	ldr	r1, [sp, #272]	; 0x110
   2cbe8:	bl	12084 <memcmp@plt>
   2cbec:	adds	r0, r0, #0
   2cbf0:	movne	r0, #1
   2cbf4:	b	2c9c4 <__assert_fail@plt+0x1a3d0>
   2cbf8:	add	r0, sp, #260	; 0x104
   2cbfc:	bl	12060 <mbsinit@plt>
   2cc00:	cmp	r0, #0
   2cc04:	beq	2d164 <__assert_fail@plt+0x1ab70>
   2cc08:	strb	r5, [sp, #256]	; 0x100
   2cc0c:	b	2ca08 <__assert_fail@plt+0x1a414>
   2cc10:	add	r7, r7, #1
   2cc14:	ldr	r3, [sp, #52]	; 0x34
   2cc18:	ldr	r6, [sp, #160]	; 0xa0
   2cc1c:	ldr	r4, [sp, #164]	; 0xa4
   2cc20:	cmp	r4, r3
   2cc24:	bne	2caac <__assert_fail@plt+0x1a4b8>
   2cc28:	mov	r2, r4
   2cc2c:	mov	r0, r6
   2cc30:	ldr	r1, [sp, #48]	; 0x30
   2cc34:	bl	12084 <memcmp@plt>
   2cc38:	cmp	r0, #0
   2cc3c:	bne	2caac <__assert_fail@plt+0x1a4b8>
   2cc40:	b	2c84c <__assert_fail@plt+0x1a258>
   2cc44:	ldr	r0, [sp, #272]	; 0x110
   2cc48:	bl	12300 <strlen@plt>
   2cc4c:	strb	r5, [sp, #268]	; 0x10c
   2cc50:	str	r0, [sp, #276]	; 0x114
   2cc54:	strb	r9, [sp, #280]	; 0x118
   2cc58:	b	2c950 <__assert_fail@plt+0x1a35c>
   2cc5c:	ldr	r3, [sp, #272]	; 0x110
   2cc60:	str	fp, [sp, #276]	; 0x114
   2cc64:	ldrb	r3, [r3]
   2cc68:	cmp	r3, #0
   2cc6c:	bne	2d184 <__assert_fail@plt+0x1ab90>
   2cc70:	ldr	r4, [sp, #284]	; 0x11c
   2cc74:	cmp	r4, #0
   2cc78:	beq	2ca58 <__assert_fail@plt+0x1a464>
   2cc7c:	b	2d0e8 <__assert_fail@plt+0x1aaf4>
   2cc80:	ldr	r3, [sp, #216]	; 0xd8
   2cc84:	str	fp, [sp, #220]	; 0xdc
   2cc88:	ldrb	r3, [r3]
   2cc8c:	cmp	r3, #0
   2cc90:	bne	2d184 <__assert_fail@plt+0x1ab90>
   2cc94:	ldr	r6, [sp, #228]	; 0xe4
   2cc98:	cmp	r6, #0
   2cc9c:	beq	2cba4 <__assert_fail@plt+0x1a5b0>
   2cca0:	b	2d0e8 <__assert_fail@plt+0x1aaf4>
   2cca4:	add	r4, sp, #148	; 0x94
   2cca8:	mov	r0, r4
   2ccac:	bl	12060 <mbsinit@plt>
   2ccb0:	cmp	r0, #0
   2ccb4:	beq	2d164 <__assert_fail@plt+0x1ab70>
   2ccb8:	strb	r5, [sp, #144]	; 0x90
   2ccbc:	b	2cad8 <__assert_fail@plt+0x1a4e4>
   2ccc0:	mov	r3, #0
   2ccc4:	strb	r5, [sp, #156]	; 0x9c
   2ccc8:	str	fp, [sp, #164]	; 0xa4
   2cccc:	strb	r3, [sp, #168]	; 0xa8
   2ccd0:	ldrd	r2, [sp, #4]
   2ccd4:	cmp	r2, #9
   2ccd8:	movls	r3, #0
   2ccdc:	andhi	r3, r3, #1
   2cce0:	cmp	r3, #0
   2cce4:	beq	2cc10 <__assert_fail@plt+0x1a61c>
   2cce8:	add	r2, r2, r2, lsl #2
   2ccec:	cmp	r7, r2
   2ccf0:	addcc	r7, r7, #1
   2ccf4:	strcc	r3, [sp, #8]
   2ccf8:	bcc	2cc14 <__assert_fail@plt+0x1a620>
   2ccfc:	ldr	r3, [sp, #24]
   2cd00:	subs	r6, r7, r3
   2cd04:	ldrb	r3, [sp, #100]	; 0x64
   2cd08:	beq	2d140 <__assert_fail@plt+0x1ab4c>
   2cd0c:	cmp	r3, #0
   2cd10:	beq	2cee4 <__assert_fail@plt+0x1a8f0>
   2cd14:	ldrb	r3, [sp, #112]	; 0x70
   2cd18:	cmp	r3, #0
   2cd1c:	bne	2ceb0 <__assert_fail@plt+0x1a8bc>
   2cd20:	ldrb	r1, [sp, #88]	; 0x58
   2cd24:	ldr	r4, [sp, #104]	; 0x68
   2cd28:	mov	r2, #0
   2cd2c:	subs	r6, r6, #1
   2cd30:	ldr	r3, [sp, #108]	; 0x6c
   2cd34:	strb	r2, [sp, #100]	; 0x64
   2cd38:	add	r4, r4, r3
   2cd3c:	mov	r9, r4
   2cd40:	str	r4, [sp, #104]	; 0x68
   2cd44:	beq	2cf14 <__assert_fail@plt+0x1a920>
   2cd48:	cmp	r1, #0
   2cd4c:	addne	r8, sp, #92	; 0x5c
   2cd50:	bne	2cdc8 <__assert_fail@plt+0x1a7d4>
   2cd54:	ldrb	r3, [r4]
   2cd58:	lsr	r2, r3, #5
   2cd5c:	and	r3, r3, #31
   2cd60:	ldr	r2, [sl, r2, lsl #2]
   2cd64:	lsr	r3, r2, r3
   2cd68:	tst	r3, #1
   2cd6c:	beq	2cdb0 <__assert_fail@plt+0x1a7bc>
   2cd70:	str	fp, [sp, #108]	; 0x6c
   2cd74:	ldrb	r3, [r4]
   2cd78:	strb	r5, [sp, #100]	; 0x64
   2cd7c:	strb	r5, [sp, #112]	; 0x70
   2cd80:	cmp	r3, #0
   2cd84:	str	r3, [sp, #116]	; 0x74
   2cd88:	bne	2cd28 <__assert_fail@plt+0x1a734>
   2cd8c:	add	r2, sp, #256	; 0x100
   2cd90:	ldr	r1, [sp, #12]
   2cd94:	ldr	r0, [sp, #28]
   2cd98:	bl	2bbc8 <__assert_fail@plt+0x195d4>
   2cd9c:	subs	r3, r0, #0
   2cda0:	str	r3, [sp, #8]
   2cda4:	bne	2d15c <__assert_fail@plt+0x1ab68>
   2cda8:	ldrb	r3, [sp, #168]	; 0xa8
   2cdac:	b	2cf64 <__assert_fail@plt+0x1a970>
   2cdb0:	add	r8, sp, #92	; 0x5c
   2cdb4:	mov	r0, r8
   2cdb8:	bl	12060 <mbsinit@plt>
   2cdbc:	cmp	r0, #0
   2cdc0:	beq	2d164 <__assert_fail@plt+0x1ab70>
   2cdc4:	strb	r5, [sp, #88]	; 0x58
   2cdc8:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2cdcc:	mov	r1, r0
   2cdd0:	mov	r0, r4
   2cdd4:	bl	360c8 <__assert_fail@plt+0x23ad4>
   2cdd8:	mov	r2, r0
   2cddc:	mov	r3, r8
   2cde0:	mov	r1, r4
   2cde4:	add	r0, sp, #116	; 0x74
   2cde8:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2cdec:	cmn	r0, #1
   2cdf0:	str	r0, [sp, #108]	; 0x6c
   2cdf4:	beq	2ce30 <__assert_fail@plt+0x1a83c>
   2cdf8:	cmn	r0, #2
   2cdfc:	beq	2ce48 <__assert_fail@plt+0x1a854>
   2ce00:	cmp	r0, #0
   2ce04:	beq	2ce80 <__assert_fail@plt+0x1a88c>
   2ce08:	ldr	r4, [sp, #116]	; 0x74
   2ce0c:	mov	r0, r8
   2ce10:	strb	r5, [sp, #112]	; 0x70
   2ce14:	bl	12060 <mbsinit@plt>
   2ce18:	cmp	r0, #0
   2ce1c:	bne	2ce68 <__assert_fail@plt+0x1a874>
   2ce20:	cmp	r4, #0
   2ce24:	strb	r5, [sp, #100]	; 0x64
   2ce28:	bne	2cd20 <__assert_fail@plt+0x1a72c>
   2ce2c:	b	2cd8c <__assert_fail@plt+0x1a798>
   2ce30:	mov	r3, #0
   2ce34:	ldrb	r1, [sp, #88]	; 0x58
   2ce38:	str	fp, [sp, #108]	; 0x6c
   2ce3c:	strb	r3, [sp, #112]	; 0x70
   2ce40:	ldr	r4, [sp, #104]	; 0x68
   2ce44:	b	2cd28 <__assert_fail@plt+0x1a734>
   2ce48:	ldr	r4, [sp, #104]	; 0x68
   2ce4c:	mov	r0, r4
   2ce50:	bl	12300 <strlen@plt>
   2ce54:	mov	r3, #0
   2ce58:	ldrb	r1, [sp, #88]	; 0x58
   2ce5c:	str	r0, [sp, #108]	; 0x6c
   2ce60:	strb	r3, [sp, #112]	; 0x70
   2ce64:	b	2cd28 <__assert_fail@plt+0x1a734>
   2ce68:	mov	r1, #0
   2ce6c:	cmp	r4, r1
   2ce70:	strb	r1, [sp, #88]	; 0x58
   2ce74:	strb	r5, [sp, #100]	; 0x64
   2ce78:	bne	2cd24 <__assert_fail@plt+0x1a730>
   2ce7c:	b	2cd8c <__assert_fail@plt+0x1a798>
   2ce80:	ldr	r4, [sp, #104]	; 0x68
   2ce84:	str	fp, [sp, #108]	; 0x6c
   2ce88:	ldrb	r3, [r4]
   2ce8c:	cmp	r3, #0
   2ce90:	bne	2d184 <__assert_fail@plt+0x1ab90>
   2ce94:	ldr	r4, [sp, #116]	; 0x74
   2ce98:	cmp	r4, #0
   2ce9c:	beq	2ce0c <__assert_fail@plt+0x1a818>
   2cea0:	b	2d0e8 <__assert_fail@plt+0x1aaf4>
   2cea4:	mov	r0, r4
   2cea8:	mov	sl, r5
   2ceac:	b	2c584 <__assert_fail@plt+0x19f90>
   2ceb0:	ldr	r3, [sp, #116]	; 0x74
   2ceb4:	cmp	r3, #0
   2ceb8:	bne	2cd20 <__assert_fail@plt+0x1a72c>
   2cebc:	b	2cd8c <__assert_fail@plt+0x1a798>
   2cec0:	ldr	r6, [sp, #172]	; 0xac
   2cec4:	mov	r0, r4
   2cec8:	strb	r5, [sp, #168]	; 0xa8
   2cecc:	bl	12060 <mbsinit@plt>
   2ced0:	cmp	r0, #0
   2ced4:	strb	r5, [sp, #156]	; 0x9c
   2ced8:	movne	r3, #0
   2cedc:	strbne	r3, [sp, #144]	; 0x90
   2cee0:	b	2c7f8 <__assert_fail@plt+0x1a204>
   2cee4:	ldrb	r1, [sp, #88]	; 0x58
   2cee8:	ldr	r4, [sp, #104]	; 0x68
   2ceec:	b	2cd48 <__assert_fail@plt+0x1a754>
   2cef0:	ldr	r0, [sp, #160]	; 0xa0
   2cef4:	bl	12300 <strlen@plt>
   2cef8:	mov	r3, #0
   2cefc:	strb	r5, [sp, #156]	; 0x9c
   2cf00:	str	r0, [sp, #164]	; 0xa4
   2cf04:	strb	r3, [sp, #168]	; 0xa8
   2cf08:	b	2ccd0 <__assert_fail@plt+0x1a6dc>
   2cf0c:	ldrb	r1, [sp, #88]	; 0x58
   2cf10:	ldr	r9, [sp, #104]	; 0x68
   2cf14:	cmp	r1, #0
   2cf18:	addne	r8, sp, #92	; 0x5c
   2cf1c:	bne	2d018 <__assert_fail@plt+0x1aa24>
   2cf20:	ldrb	r3, [r9]
   2cf24:	lsr	r2, r3, #5
   2cf28:	and	r3, r3, #31
   2cf2c:	ldr	r2, [sl, r2, lsl #2]
   2cf30:	lsr	r3, r2, r3
   2cf34:	tst	r3, #1
   2cf38:	beq	2d000 <__assert_fail@plt+0x1aa0c>
   2cf3c:	str	fp, [sp, #108]	; 0x6c
   2cf40:	ldrb	r4, [r9]
   2cf44:	strb	r5, [sp, #100]	; 0x64
   2cf48:	strb	r5, [sp, #112]	; 0x70
   2cf4c:	str	r4, [sp, #116]	; 0x74
   2cf50:	cmp	r4, #0
   2cf54:	beq	2cd8c <__assert_fail@plt+0x1a798>
   2cf58:	ldrb	r3, [sp, #168]	; 0xa8
   2cf5c:	mov	r2, #1
   2cf60:	str	r2, [sp, #8]
   2cf64:	cmp	r3, #0
   2cf68:	add	r3, r7, #1
   2cf6c:	str	r7, [sp, #24]
   2cf70:	mov	r7, r3
   2cf74:	bne	2c830 <__assert_fail@plt+0x1a23c>
   2cf78:	b	2cc14 <__assert_fail@plt+0x1a620>
   2cf7c:	add	r0, sp, #260	; 0x104
   2cf80:	bl	12060 <mbsinit@plt>
   2cf84:	cmp	r0, #0
   2cf88:	beq	2d164 <__assert_fail@plt+0x1ab70>
   2cf8c:	strb	r5, [sp, #256]	; 0x100
   2cf90:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2cf94:	ldr	r4, [sp, #12]
   2cf98:	mov	r1, r0
   2cf9c:	mov	r0, r4
   2cfa0:	bl	360c8 <__assert_fail@plt+0x23ad4>
   2cfa4:	mov	r2, r0
   2cfa8:	add	r3, sp, #260	; 0x104
   2cfac:	mov	r1, r4
   2cfb0:	add	r0, sp, #284	; 0x11c
   2cfb4:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2cfb8:	cmn	r0, #1
   2cfbc:	str	r0, [sp, #276]	; 0x114
   2cfc0:	beq	2d07c <__assert_fail@plt+0x1aa88>
   2cfc4:	cmn	r0, #2
   2cfc8:	beq	2d08c <__assert_fail@plt+0x1aa98>
   2cfcc:	cmp	r0, #0
   2cfd0:	beq	2d0a4 <__assert_fail@plt+0x1aab0>
   2cfd4:	ldr	r4, [sp, #284]	; 0x11c
   2cfd8:	add	r0, sp, #260	; 0x104
   2cfdc:	strb	r5, [sp, #280]	; 0x118
   2cfe0:	bl	12060 <mbsinit@plt>
   2cfe4:	cmp	r0, #0
   2cfe8:	strb	r5, [sp, #268]	; 0x10c
   2cfec:	movne	r3, #0
   2cff0:	strbne	r3, [sp, #256]	; 0x100
   2cff4:	cmp	r4, #0
   2cff8:	bne	2c8f4 <__assert_fail@plt+0x1a300>
   2cffc:	bl	125a0 <abort@plt>
   2d000:	add	r8, sp, #92	; 0x5c
   2d004:	mov	r0, r8
   2d008:	bl	12060 <mbsinit@plt>
   2d00c:	cmp	r0, #0
   2d010:	beq	2d164 <__assert_fail@plt+0x1ab70>
   2d014:	strb	r5, [sp, #88]	; 0x58
   2d018:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2d01c:	mov	r1, r0
   2d020:	mov	r0, r9
   2d024:	bl	360c8 <__assert_fail@plt+0x23ad4>
   2d028:	mov	r2, r0
   2d02c:	mov	r3, r8
   2d030:	mov	r1, r9
   2d034:	add	r0, sp, #116	; 0x74
   2d038:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2d03c:	cmn	r0, #1
   2d040:	str	r0, [sp, #108]	; 0x6c
   2d044:	beq	2d108 <__assert_fail@plt+0x1ab14>
   2d048:	cmn	r0, #2
   2d04c:	beq	2d0ec <__assert_fail@plt+0x1aaf8>
   2d050:	cmp	r0, #0
   2d054:	beq	2d11c <__assert_fail@plt+0x1ab28>
   2d058:	ldr	r4, [sp, #116]	; 0x74
   2d05c:	mov	r0, r8
   2d060:	strb	r5, [sp, #112]	; 0x70
   2d064:	bl	12060 <mbsinit@plt>
   2d068:	cmp	r0, #0
   2d06c:	strb	r5, [sp, #100]	; 0x64
   2d070:	movne	r3, #0
   2d074:	strbne	r3, [sp, #88]	; 0x58
   2d078:	b	2cf50 <__assert_fail@plt+0x1a95c>
   2d07c:	str	fp, [sp, #276]	; 0x114
   2d080:	strb	r6, [sp, #280]	; 0x118
   2d084:	ldr	r4, [sp, #272]	; 0x110
   2d088:	b	2c8f8 <__assert_fail@plt+0x1a304>
   2d08c:	ldr	r4, [sp, #272]	; 0x110
   2d090:	mov	r0, r4
   2d094:	bl	12300 <strlen@plt>
   2d098:	str	r0, [sp, #276]	; 0x114
   2d09c:	strb	r6, [sp, #280]	; 0x118
   2d0a0:	b	2c8f8 <__assert_fail@plt+0x1a304>
   2d0a4:	ldr	r4, [sp, #272]	; 0x110
   2d0a8:	str	fp, [sp, #276]	; 0x114
   2d0ac:	ldrb	r3, [r4]
   2d0b0:	cmp	r3, #0
   2d0b4:	bne	2d184 <__assert_fail@plt+0x1ab90>
   2d0b8:	ldr	r4, [sp, #284]	; 0x11c
   2d0bc:	cmp	r4, #0
   2d0c0:	beq	2cfd8 <__assert_fail@plt+0x1a9e4>
   2d0c4:	b	2d0e8 <__assert_fail@plt+0x1aaf4>
   2d0c8:	ldr	r3, [sp, #48]	; 0x30
   2d0cc:	str	r6, [sp, #52]	; 0x34
   2d0d0:	ldrb	r3, [r3]
   2d0d4:	cmp	r3, #0
   2d0d8:	bne	2d184 <__assert_fail@plt+0x1ab90>
   2d0dc:	ldr	r5, [sp, #60]	; 0x3c
   2d0e0:	cmp	r5, #0
   2d0e4:	beq	2c640 <__assert_fail@plt+0x1a04c>
   2d0e8:	bl	2bba0 <__assert_fail@plt+0x195ac>
   2d0ec:	ldr	r0, [sp, #104]	; 0x68
   2d0f0:	bl	12300 <strlen@plt>
   2d0f4:	mov	r3, #0
   2d0f8:	strb	r5, [sp, #100]	; 0x64
   2d0fc:	str	r0, [sp, #108]	; 0x6c
   2d100:	strb	r3, [sp, #112]	; 0x70
   2d104:	b	2cf58 <__assert_fail@plt+0x1a964>
   2d108:	mov	r3, #0
   2d10c:	strb	r5, [sp, #100]	; 0x64
   2d110:	str	fp, [sp, #108]	; 0x6c
   2d114:	strb	r3, [sp, #112]	; 0x70
   2d118:	b	2cf58 <__assert_fail@plt+0x1a964>
   2d11c:	ldr	r4, [sp, #104]	; 0x68
   2d120:	str	fp, [sp, #108]	; 0x6c
   2d124:	ldrb	r3, [r4]
   2d128:	cmp	r3, #0
   2d12c:	bne	2d184 <__assert_fail@plt+0x1ab90>
   2d130:	ldr	r4, [sp, #116]	; 0x74
   2d134:	cmp	r4, #0
   2d138:	beq	2d05c <__assert_fail@plt+0x1aa68>
   2d13c:	b	2d0e8 <__assert_fail@plt+0x1aaf4>
   2d140:	cmp	r3, #0
   2d144:	beq	2cf0c <__assert_fail@plt+0x1a918>
   2d148:	ldrb	r3, [sp, #112]	; 0x70
   2d14c:	cmp	r3, #0
   2d150:	ldrne	r4, [sp, #116]	; 0x74
   2d154:	beq	2cf58 <__assert_fail@plt+0x1a964>
   2d158:	b	2cf50 <__assert_fail@plt+0x1a95c>
   2d15c:	ldr	r0, [sp, #256]	; 0x100
   2d160:	b	2c66c <__assert_fail@plt+0x1a078>
   2d164:	movw	r3, #20260	; 0x4f24
   2d168:	movt	r3, #5
   2d16c:	movw	r1, #20280	; 0x4f38
   2d170:	movt	r1, #5
   2d174:	movw	r0, #20312	; 0x4f58
   2d178:	movt	r0, #5
   2d17c:	mov	r2, #143	; 0x8f
   2d180:	bl	125f4 <__assert_fail@plt>
   2d184:	movw	r3, #20260	; 0x4f24
   2d188:	movt	r3, #5
   2d18c:	movw	r1, #20280	; 0x4f38
   2d190:	movt	r1, #5
   2d194:	movw	r0, #20336	; 0x4f70
   2d198:	movt	r0, #5
   2d19c:	mov	r2, #171	; 0xab
   2d1a0:	bl	125f4 <__assert_fail@plt>
   2d1a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d1a8:	mov	r4, r0
   2d1ac:	strd	r6, [sp, #8]
   2d1b0:	add	r6, r0, r1
   2d1b4:	strd	r8, [sp, #16]
   2d1b8:	mov	r9, r2
   2d1bc:	strd	sl, [sp, #24]
   2d1c0:	str	lr, [sp, #32]
   2d1c4:	sub	sp, sp, #20
   2d1c8:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2d1cc:	cmp	r0, #1
   2d1d0:	bls	2d368 <__assert_fail@plt+0x1ad74>
   2d1d4:	cmp	r4, r6
   2d1d8:	bcs	2d3d4 <__assert_fail@plt+0x1ade0>
   2d1dc:	and	sl, r9, #2
   2d1e0:	mov	r5, #0
   2d1e4:	and	r9, r9, #1
   2d1e8:	mvn	r8, #-2147483648	; 0x80000000
   2d1ec:	b	2d214 <__assert_fail@plt+0x1ac20>
   2d1f0:	cmp	r3, #37	; 0x25
   2d1f4:	bcs	2d204 <__assert_fail@plt+0x1ac10>
   2d1f8:	sub	r3, r3, #32
   2d1fc:	cmp	r3, #3
   2d200:	bhi	2d23c <__assert_fail@plt+0x1ac48>
   2d204:	add	r4, r4, #1
   2d208:	add	r5, r5, #1
   2d20c:	cmp	r4, r6
   2d210:	bcs	2d2dc <__assert_fail@plt+0x1ace8>
   2d214:	ldrb	r3, [r4]
   2d218:	cmp	r3, #63	; 0x3f
   2d21c:	bls	2d1f0 <__assert_fail@plt+0x1abfc>
   2d220:	cmp	r3, #65	; 0x41
   2d224:	bcc	2d23c <__assert_fail@plt+0x1ac48>
   2d228:	cmp	r3, #95	; 0x5f
   2d22c:	bls	2d204 <__assert_fail@plt+0x1ac10>
   2d230:	sub	r3, r3, #97	; 0x61
   2d234:	cmp	r3, #29
   2d238:	bls	2d204 <__assert_fail@plt+0x1ac10>
   2d23c:	mov	r2, #0
   2d240:	mov	r3, #0
   2d244:	cmp	sl, #0
   2d248:	add	fp, sp, #4
   2d24c:	strd	r2, [sp, #8]
   2d250:	beq	2d278 <__assert_fail@plt+0x1ac84>
   2d254:	b	2d314 <__assert_fail@plt+0x1ad20>
   2d258:	cmp	r3, r0
   2d25c:	add	r5, r5, r0
   2d260:	blt	2d2d8 <__assert_fail@plt+0x1ace4>
   2d264:	add	r0, sp, #8
   2d268:	add	r4, r4, r7
   2d26c:	bl	12060 <mbsinit@plt>
   2d270:	cmp	r0, #0
   2d274:	bne	2d20c <__assert_fail@plt+0x1ac18>
   2d278:	add	r3, sp, #8
   2d27c:	sub	r2, r6, r4
   2d280:	mov	r1, r4
   2d284:	mov	r0, fp
   2d288:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2d28c:	cmn	r0, #1
   2d290:	mov	r7, r0
   2d294:	beq	2d3b4 <__assert_fail@plt+0x1adc0>
   2d298:	cmn	r0, #2
   2d29c:	beq	2d3c0 <__assert_fail@plt+0x1adcc>
   2d2a0:	cmp	r0, #0
   2d2a4:	ldr	r0, [sp, #4]
   2d2a8:	moveq	r7, #1
   2d2ac:	bl	11fa0 <wcwidth@plt>
   2d2b0:	cmp	r0, #0
   2d2b4:	sub	r3, r8, r5
   2d2b8:	bge	2d258 <__assert_fail@plt+0x1ac64>
   2d2bc:	ldr	r0, [sp, #4]
   2d2c0:	bl	12114 <iswcntrl@plt>
   2d2c4:	cmp	r0, #0
   2d2c8:	bne	2d264 <__assert_fail@plt+0x1ac70>
   2d2cc:	cmn	r5, #-2147483647	; 0x80000001
   2d2d0:	add	r5, r5, #1
   2d2d4:	bne	2d264 <__assert_fail@plt+0x1ac70>
   2d2d8:	mvn	r5, #-2147483648	; 0x80000000
   2d2dc:	mov	r0, r5
   2d2e0:	add	sp, sp, #20
   2d2e4:	ldrd	r4, [sp]
   2d2e8:	ldrd	r6, [sp, #8]
   2d2ec:	ldrd	r8, [sp, #16]
   2d2f0:	ldrd	sl, [sp, #24]
   2d2f4:	add	sp, sp, #32
   2d2f8:	pop	{pc}		; (ldr pc, [sp], #4)
   2d2fc:	cmp	r3, r2
   2d300:	add	r4, r4, r7
   2d304:	bgt	2d2d8 <__assert_fail@plt+0x1ace4>
   2d308:	bl	12060 <mbsinit@plt>
   2d30c:	cmp	r0, #0
   2d310:	bne	2d20c <__assert_fail@plt+0x1ac18>
   2d314:	add	r3, sp, #8
   2d318:	sub	r2, r6, r4
   2d31c:	mov	r1, r4
   2d320:	mov	r0, fp
   2d324:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   2d328:	cmn	r0, #1
   2d32c:	mov	r7, r0
   2d330:	beq	2d3b4 <__assert_fail@plt+0x1adc0>
   2d334:	cmn	r0, #2
   2d338:	beq	2d3c0 <__assert_fail@plt+0x1adcc>
   2d33c:	cmp	r0, #0
   2d340:	ldr	r0, [sp, #4]
   2d344:	moveq	r7, #1
   2d348:	bl	11fa0 <wcwidth@plt>
   2d34c:	subs	r3, r0, #0
   2d350:	sub	r2, r8, r5
   2d354:	add	r0, sp, #8
   2d358:	add	r5, r5, r3
   2d35c:	bge	2d2fc <__assert_fail@plt+0x1ad08>
   2d360:	mvn	r5, #0
   2d364:	b	2d2dc <__assert_fail@plt+0x1ace8>
   2d368:	cmp	r4, r6
   2d36c:	bcs	2d3d4 <__assert_fail@plt+0x1ade0>
   2d370:	bl	122b8 <__ctype_b_loc@plt>
   2d374:	ands	r5, r9, #2
   2d378:	ldr	r2, [r0]
   2d37c:	bne	2d3dc <__assert_fail@plt+0x1ade8>
   2d380:	ldrb	r3, [r4], #1
   2d384:	lsl	r3, r3, #1
   2d388:	ldrh	r3, [r2, r3]
   2d38c:	tst	r3, #16384	; 0x4000
   2d390:	bne	2d39c <__assert_fail@plt+0x1ada8>
   2d394:	tst	r3, #2
   2d398:	bne	2d3a8 <__assert_fail@plt+0x1adb4>
   2d39c:	cmn	r5, #-2147483647	; 0x80000001
   2d3a0:	beq	2d2dc <__assert_fail@plt+0x1ace8>
   2d3a4:	add	r5, r5, #1
   2d3a8:	cmp	r6, r4
   2d3ac:	bne	2d380 <__assert_fail@plt+0x1ad8c>
   2d3b0:	b	2d2dc <__assert_fail@plt+0x1ace8>
   2d3b4:	cmp	r9, #0
   2d3b8:	beq	2d204 <__assert_fail@plt+0x1ac10>
   2d3bc:	b	2d360 <__assert_fail@plt+0x1ad6c>
   2d3c0:	cmp	r9, #0
   2d3c4:	bne	2d360 <__assert_fail@plt+0x1ad6c>
   2d3c8:	add	r5, r5, #1
   2d3cc:	mov	r4, r6
   2d3d0:	b	2d20c <__assert_fail@plt+0x1ac18>
   2d3d4:	mov	r5, #0
   2d3d8:	b	2d2dc <__assert_fail@plt+0x1ace8>
   2d3dc:	mov	r5, #0
   2d3e0:	b	2d3f8 <__assert_fail@plt+0x1ae04>
   2d3e4:	cmn	r5, #-2147483647	; 0x80000001
   2d3e8:	beq	2d2dc <__assert_fail@plt+0x1ace8>
   2d3ec:	cmp	r6, r4
   2d3f0:	add	r5, r5, #1
   2d3f4:	beq	2d2dc <__assert_fail@plt+0x1ace8>
   2d3f8:	ldrb	r3, [r4], #1
   2d3fc:	lsl	r3, r3, #1
   2d400:	ldrh	r3, [r2, r3]
   2d404:	tst	r3, #16384	; 0x4000
   2d408:	beq	2d360 <__assert_fail@plt+0x1ad6c>
   2d40c:	b	2d3e4 <__assert_fail@plt+0x1adf0>
   2d410:	strd	r4, [sp, #-16]!
   2d414:	mov	r5, r1
   2d418:	mov	r4, r0
   2d41c:	str	r6, [sp, #8]
   2d420:	str	lr, [sp, #12]
   2d424:	bl	12300 <strlen@plt>
   2d428:	mov	r1, r0
   2d42c:	mov	r2, r5
   2d430:	ldr	r6, [sp, #8]
   2d434:	mov	r0, r4
   2d438:	ldrd	r4, [sp]
   2d43c:	ldr	lr, [sp, #12]
   2d440:	add	sp, sp, #16
   2d444:	b	2d1a4 <__assert_fail@plt+0x1abb0>
   2d448:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d44c:	mov	r5, r0
   2d450:	strd	r6, [sp, #8]
   2d454:	strd	r8, [sp, #16]
   2d458:	strd	sl, [sp, #24]
   2d45c:	str	lr, [sp, #32]
   2d460:	sub	sp, sp, #4
   2d464:	ldrb	r3, [r0]
   2d468:	sub	r2, r3, #48	; 0x30
   2d46c:	cmp	r2, #7
   2d470:	bls	2d5b8 <__assert_fail@plt+0x1afc4>
   2d474:	cmp	r3, #0
   2d478:	moveq	r0, #1
   2d47c:	beq	2d4ac <__assert_fail@plt+0x1aeb8>
   2d480:	mov	r1, r5
   2d484:	mov	r0, #1
   2d488:	and	r2, r3, #239	; 0xef
   2d48c:	cmp	r3, #43	; 0x2b
   2d490:	cmpne	r2, #45	; 0x2d
   2d494:	ldrb	r3, [r1, #1]!
   2d498:	moveq	r2, #1
   2d49c:	movne	r2, #0
   2d4a0:	add	r0, r0, r2
   2d4a4:	cmp	r3, #0
   2d4a8:	bne	2d488 <__assert_fail@plt+0x1ae94>
   2d4ac:	mov	r1, #16
   2d4b0:	movw	fp, #519	; 0x207
   2d4b4:	bl	369c8 <__assert_fail@plt+0x243d4>
   2d4b8:	mov	r8, #3
   2d4bc:	mov	ip, #0
   2d4c0:	mov	r4, #0
   2d4c4:	ldrb	r3, [r5]
   2d4c8:	mov	lr, r5
   2d4cc:	add	r5, r5, #1
   2d4d0:	cmp	r3, #97	; 0x61
   2d4d4:	beq	2d760 <__assert_fail@plt+0x1b16c>
   2d4d8:	bls	2d518 <__assert_fail@plt+0x1af24>
   2d4dc:	cmp	r3, #111	; 0x6f
   2d4e0:	beq	2d758 <__assert_fail@plt+0x1b164>
   2d4e4:	cmp	r3, #117	; 0x75
   2d4e8:	beq	2d768 <__assert_fail@plt+0x1b174>
   2d4ec:	cmp	r3, #103	; 0x67
   2d4f0:	beq	2d770 <__assert_fail@plt+0x1b17c>
   2d4f4:	bl	38b10 <__assert_fail@plt+0x2651c>
   2d4f8:	mov	r0, #0
   2d4fc:	add	sp, sp, #4
   2d500:	ldrd	r4, [sp]
   2d504:	ldrd	r6, [sp, #8]
   2d508:	ldrd	r8, [sp, #16]
   2d50c:	ldrd	sl, [sp, #24]
   2d510:	add	sp, sp, #32
   2d514:	pop	{pc}		; (ldr pc, [sp], #4)
   2d518:	cmp	r3, #45	; 0x2d
   2d51c:	beq	2d530 <__assert_fail@plt+0x1af3c>
   2d520:	cmp	r3, #61	; 0x3d
   2d524:	beq	2d530 <__assert_fail@plt+0x1af3c>
   2d528:	cmp	r3, #43	; 0x2b
   2d52c:	bne	2d4f4 <__assert_fail@plt+0x1af00>
   2d530:	add	r6, ip, #1
   2d534:	mov	r7, #1
   2d538:	add	ip, r0, ip, lsl #4
   2d53c:	movw	r5, #4095	; 0xfff
   2d540:	b	2d590 <__assert_fail@plt+0x1af9c>
   2d544:	cmp	r2, #117	; 0x75
   2d548:	addeq	r2, lr, #2
   2d54c:	moveq	r9, #448	; 0x1c0
   2d550:	bne	2d664 <__assert_fail@plt+0x1b070>
   2d554:	strb	r3, [ip]
   2d558:	ldrb	r3, [lr, #2]
   2d55c:	mov	lr, r2
   2d560:	strb	r8, [ip, #1]
   2d564:	stmib	ip, {r4, r9}
   2d568:	cmp	r4, #0
   2d56c:	andne	r9, r9, r4
   2d570:	and	r2, r3, #239	; 0xef
   2d574:	add	ip, ip, #16
   2d578:	str	r9, [ip, #-4]
   2d57c:	cmp	r3, #43	; 0x2b
   2d580:	cmpne	r2, #45	; 0x2d
   2d584:	add	r2, r6, #1
   2d588:	bne	2d7c0 <__assert_fail@plt+0x1b1cc>
   2d58c:	mov	r6, r2
   2d590:	ldrb	r2, [lr, #1]
   2d594:	add	r1, lr, #1
   2d598:	cmp	r2, #103	; 0x67
   2d59c:	beq	2d74c <__assert_fail@plt+0x1b158>
   2d5a0:	bls	2d5f4 <__assert_fail@plt+0x1b000>
   2d5a4:	cmp	r2, #111	; 0x6f
   2d5a8:	bne	2d544 <__assert_fail@plt+0x1af50>
   2d5ac:	add	r2, lr, #2
   2d5b0:	mov	r9, #7
   2d5b4:	b	2d554 <__assert_fail@plt+0x1af60>
   2d5b8:	mov	r2, r0
   2d5bc:	mov	r4, #0
   2d5c0:	b	2d5d4 <__assert_fail@plt+0x1afe0>
   2d5c4:	ldrb	r3, [r2]
   2d5c8:	sub	r1, r3, #48	; 0x30
   2d5cc:	cmp	r1, #7
   2d5d0:	bhi	2d77c <__assert_fail@plt+0x1b188>
   2d5d4:	ldrb	r3, [r2], #1
   2d5d8:	lsl	r4, r4, #3
   2d5dc:	sub	r4, r4, #48	; 0x30
   2d5e0:	add	r4, r3, r4
   2d5e4:	cmp	r4, #4096	; 0x1000
   2d5e8:	bcc	2d5c4 <__assert_fail@plt+0x1afd0>
   2d5ec:	mov	r0, #0
   2d5f0:	b	2d4fc <__assert_fail@plt+0x1af08>
   2d5f4:	sub	lr, r2, #48	; 0x30
   2d5f8:	cmp	lr, #7
   2d5fc:	movls	r2, #0
   2d600:	bhi	2d664 <__assert_fail@plt+0x1b070>
   2d604:	ldrb	lr, [r1], #1
   2d608:	lsl	r2, r2, #3
   2d60c:	sub	r2, r2, #48	; 0x30
   2d610:	add	r2, lr, r2
   2d614:	cmp	r2, #4096	; 0x1000
   2d618:	bcs	2d4f4 <__assert_fail@plt+0x1af00>
   2d61c:	ldrb	r9, [r1]
   2d620:	sub	lr, r9, #48	; 0x30
   2d624:	cmp	lr, #7
   2d628:	bls	2d604 <__assert_fail@plt+0x1b010>
   2d62c:	cmp	r4, #0
   2d630:	bne	2d4f4 <__assert_fail@plt+0x1af00>
   2d634:	cmp	r9, #0
   2d638:	cmpne	r9, #44	; 0x2c
   2d63c:	bne	2d4f4 <__assert_fail@plt+0x1af00>
   2d640:	movw	r4, #4095	; 0xfff
   2d644:	mov	lr, r1
   2d648:	strb	r3, [ip]
   2d64c:	mov	r3, r9
   2d650:	mov	r9, r4
   2d654:	strb	r7, [ip, #1]
   2d658:	str	r5, [ip, #4]
   2d65c:	str	r2, [ip, #8]
   2d660:	b	2d570 <__assert_fail@plt+0x1af7c>
   2d664:	mov	sl, #1
   2d668:	mov	r9, #0
   2d66c:	sub	lr, r2, #88	; 0x58
   2d670:	cmp	lr, #32
   2d674:	ldrls	pc, [pc, lr, lsl #2]
   2d678:	b	2d734 <__assert_fail@plt+0x1b140>
   2d67c:	andeq	sp, r2, r0, lsl #14
   2d680:	andeq	sp, r2, r4, lsr r7
   2d684:	andeq	sp, r2, r4, lsr r7
   2d688:	andeq	sp, r2, r4, lsr r7
   2d68c:	andeq	sp, r2, r4, lsr r7
   2d690:	andeq	sp, r2, r4, lsr r7
   2d694:	andeq	sp, r2, r4, lsr r7
   2d698:	andeq	sp, r2, r4, lsr r7
   2d69c:	andeq	sp, r2, r4, lsr r7
   2d6a0:	andeq	sp, r2, r4, lsr r7
   2d6a4:	andeq	sp, r2, r4, lsr r7
   2d6a8:	andeq	sp, r2, r4, lsr r7
   2d6ac:	andeq	sp, r2, r4, lsr r7
   2d6b0:	andeq	sp, r2, r4, lsr r7
   2d6b4:	andeq	sp, r2, r4, lsr r7
   2d6b8:	andeq	sp, r2, r4, lsr r7
   2d6bc:	andeq	sp, r2, r4, lsr r7
   2d6c0:	andeq	sp, r2, r4, lsr r7
   2d6c4:	andeq	sp, r2, r4, lsr r7
   2d6c8:	andeq	sp, r2, r4, lsr r7
   2d6cc:	andeq	sp, r2, r4, lsr r7
   2d6d0:	andeq	sp, r2, r4, lsr r7
   2d6d4:	andeq	sp, r2, r4, lsr r7
   2d6d8:	andeq	sp, r2, r4, lsr r7
   2d6dc:	andeq	sp, r2, r4, lsr r7
   2d6e0:	andeq	sp, r2, r4, lsr r7
   2d6e4:	andeq	sp, r2, ip, lsr #14
   2d6e8:	andeq	sp, r2, r4, lsr #14
   2d6ec:	andeq	sp, r2, ip, lsl r7
   2d6f0:	andeq	sp, r2, r4, lsr r7
   2d6f4:	andeq	sp, r2, r4, lsr r7
   2d6f8:	andeq	sp, r2, r4, lsl r7
   2d6fc:	andeq	sp, r2, ip, lsl #14
   2d700:	mov	sl, #2
   2d704:	ldrb	r2, [r1, #1]!
   2d708:	b	2d66c <__assert_fail@plt+0x1b078>
   2d70c:	orr	r9, r9, #73	; 0x49
   2d710:	b	2d704 <__assert_fail@plt+0x1b110>
   2d714:	orr	r9, r9, #146	; 0x92
   2d718:	b	2d704 <__assert_fail@plt+0x1b110>
   2d71c:	orr	r9, r9, #512	; 0x200
   2d720:	b	2d704 <__assert_fail@plt+0x1b110>
   2d724:	orr	r9, r9, #3072	; 0xc00
   2d728:	b	2d704 <__assert_fail@plt+0x1b110>
   2d72c:	orr	r9, r9, #292	; 0x124
   2d730:	b	2d704 <__assert_fail@plt+0x1b110>
   2d734:	mov	lr, r1
   2d738:	strb	r3, [ip]
   2d73c:	mov	r3, r2
   2d740:	strb	sl, [ip, #1]
   2d744:	stmib	ip, {r4, r9}
   2d748:	b	2d568 <__assert_fail@plt+0x1af74>
   2d74c:	add	r2, lr, #2
   2d750:	mov	r9, #56	; 0x38
   2d754:	b	2d554 <__assert_fail@plt+0x1af60>
   2d758:	orr	r4, r4, fp
   2d75c:	b	2d4c4 <__assert_fail@plt+0x1aed0>
   2d760:	movw	r4, #4095	; 0xfff
   2d764:	b	2d4c4 <__assert_fail@plt+0x1aed0>
   2d768:	orr	r4, r4, #2496	; 0x9c0
   2d76c:	b	2d4c4 <__assert_fail@plt+0x1aed0>
   2d770:	orr	r4, r4, #1072	; 0x430
   2d774:	orr	r4, r4, #8
   2d778:	b	2d4c4 <__assert_fail@plt+0x1aed0>
   2d77c:	cmp	r3, #0
   2d780:	bne	2d5ec <__assert_fail@plt+0x1aff8>
   2d784:	sub	r2, r2, r5
   2d788:	mov	r0, #32
   2d78c:	cmp	r2, #4
   2d790:	andle	r5, r4, #3072	; 0xc00
   2d794:	movwgt	r5, #4095	; 0xfff
   2d798:	mvnle	r5, r5, lsr #10
   2d79c:	mvnle	r5, r5, lsl #10
   2d7a0:	bl	36864 <__assert_fail@plt+0x24270>
   2d7a4:	movw	r1, #317	; 0x13d
   2d7a8:	movw	r2, #4095	; 0xfff
   2d7ac:	mov	r3, #0
   2d7b0:	strh	r1, [r0]
   2d7b4:	stmib	r0, {r2, r4, r5}
   2d7b8:	strb	r3, [r0, #17]
   2d7bc:	b	2d4fc <__assert_fail@plt+0x1af08>
   2d7c0:	cmp	r3, #44	; 0x2c
   2d7c4:	bne	2d7d4 <__assert_fail@plt+0x1b1e0>
   2d7c8:	add	r5, lr, #1
   2d7cc:	mov	ip, r6
   2d7d0:	b	2d4c0 <__assert_fail@plt+0x1aecc>
   2d7d4:	cmp	r3, #0
   2d7d8:	addeq	r6, r0, r6, lsl #4
   2d7dc:	strbeq	r3, [r6, #1]
   2d7e0:	beq	2d4fc <__assert_fail@plt+0x1af08>
   2d7e4:	b	2d4f4 <__assert_fail@plt+0x1af00>
   2d7e8:	strd	r4, [sp, #-12]!
   2d7ec:	mov	r1, r0
   2d7f0:	mov	r0, #3
   2d7f4:	str	lr, [sp, #8]
   2d7f8:	sub	sp, sp, #108	; 0x6c
   2d7fc:	mov	r2, sp
   2d800:	bl	12558 <__xstat64@plt>
   2d804:	subs	r4, r0, #0
   2d808:	movne	r0, #0
   2d80c:	bne	2d834 <__assert_fail@plt+0x1b240>
   2d810:	ldr	r5, [sp, #16]
   2d814:	mov	r0, #32
   2d818:	bl	36864 <__assert_fail@plt+0x24270>
   2d81c:	movw	r3, #4095	; 0xfff
   2d820:	movw	r2, #317	; 0x13d
   2d824:	strh	r2, [r0]
   2d828:	stmib	r0, {r3, r5}
   2d82c:	str	r3, [r0, #12]
   2d830:	strb	r4, [r0, #17]
   2d834:	add	sp, sp, #108	; 0x6c
   2d838:	ldrd	r4, [sp]
   2d83c:	add	sp, sp, #8
   2d840:	pop	{pc}		; (ldr pc, [sp], #4)
   2d844:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d848:	ubfx	r0, r0, #0, #12
   2d84c:	strd	r6, [sp, #8]
   2d850:	strd	r8, [sp, #16]
   2d854:	strd	sl, [sp, #24]
   2d858:	str	lr, [sp, #32]
   2d85c:	ldrb	lr, [r3, #1]
   2d860:	ldr	sl, [sp, #36]	; 0x24
   2d864:	cmp	lr, #0
   2d868:	beq	2d9cc <__assert_fail@plt+0x1b3d8>
   2d86c:	add	r3, r3, #16
   2d870:	mvn	r2, r2
   2d874:	mov	r7, #0
   2d878:	mvn	r8, #3072	; 0xc00
   2d87c:	movw	r9, #438	; 0x1b6
   2d880:	b	2d908 <__assert_fail@plt+0x1b314>
   2d884:	cmp	lr, #2
   2d888:	mvn	r4, #0
   2d88c:	beq	2d9bc <__assert_fail@plt+0x1b3c8>
   2d890:	mov	r5, r1
   2d894:	cmp	lr, #3
   2d898:	bne	2d8cc <__assert_fail@plt+0x1b2d8>
   2d89c:	and	ip, ip, r0
   2d8a0:	and	lr, ip, #292	; 0x124
   2d8a4:	cmp	lr, #0
   2d8a8:	movne	lr, r9
   2d8ac:	moveq	lr, #146	; 0x92
   2d8b0:	movne	fp, #292	; 0x124
   2d8b4:	moveq	fp, #0
   2d8b8:	tst	ip, #146	; 0x92
   2d8bc:	moveq	lr, fp
   2d8c0:	tst	ip, #73	; 0x49
   2d8c4:	orrne	lr, lr, #73	; 0x49
   2d8c8:	orr	ip, lr, ip
   2d8cc:	cmp	r6, #0
   2d8d0:	and	ip, ip, r4
   2d8d4:	ldrb	lr, [r3, #-16]
   2d8d8:	bne	2d944 <__assert_fail@plt+0x1b350>
   2d8dc:	cmp	lr, #45	; 0x2d
   2d8e0:	and	ip, ip, r2
   2d8e4:	beq	2d9a4 <__assert_fail@plt+0x1b3b0>
   2d8e8:	cmp	lr, #61	; 0x3d
   2d8ec:	beq	2d964 <__assert_fail@plt+0x1b370>
   2d8f0:	cmp	lr, #43	; 0x2b
   2d8f4:	beq	2d9b0 <__assert_fail@plt+0x1b3bc>
   2d8f8:	add	r3, r3, #16
   2d8fc:	ldrb	lr, [r3, #-15]
   2d900:	cmp	lr, #0
   2d904:	beq	2d984 <__assert_fail@plt+0x1b390>
   2d908:	cmp	r1, #0
   2d90c:	ldr	r6, [r3, #-12]
   2d910:	ldr	ip, [r3, #-8]
   2d914:	beq	2d884 <__assert_fail@plt+0x1b290>
   2d918:	cmp	lr, #2
   2d91c:	ldr	r4, [r3, #-4]
   2d920:	mvn	r5, r4
   2d924:	orr	r4, r4, r8
   2d928:	and	r5, r5, #3072	; 0xc00
   2d92c:	bne	2d894 <__assert_fail@plt+0x1b2a0>
   2d930:	orr	ip, ip, #73	; 0x49
   2d934:	cmp	r6, #0
   2d938:	ldrb	lr, [r3, #-16]
   2d93c:	and	ip, ip, r4
   2d940:	beq	2d8dc <__assert_fail@plt+0x1b2e8>
   2d944:	cmp	lr, #45	; 0x2d
   2d948:	and	ip, ip, r6
   2d94c:	beq	2d9a4 <__assert_fail@plt+0x1b3b0>
   2d950:	cmp	lr, #61	; 0x3d
   2d954:	bne	2d8f0 <__assert_fail@plt+0x1b2fc>
   2d958:	mvn	r6, r6
   2d95c:	orr	r5, r5, r6
   2d960:	mvn	r4, r5
   2d964:	add	r3, r3, #16
   2d968:	ldrb	lr, [r3, #-15]
   2d96c:	ubfx	r4, r4, #0, #12
   2d970:	and	r0, r0, r5
   2d974:	orr	r0, r0, ip
   2d978:	orr	r7, r7, r4
   2d97c:	cmp	lr, #0
   2d980:	bne	2d908 <__assert_fail@plt+0x1b314>
   2d984:	cmp	sl, #0
   2d988:	ldrd	r4, [sp]
   2d98c:	strne	r7, [sl]
   2d990:	ldrd	r6, [sp, #8]
   2d994:	ldrd	r8, [sp, #16]
   2d998:	ldrd	sl, [sp, #24]
   2d99c:	add	sp, sp, #32
   2d9a0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d9a4:	orr	r7, r7, ip
   2d9a8:	bic	r0, r0, ip
   2d9ac:	b	2d8f8 <__assert_fail@plt+0x1b304>
   2d9b0:	orr	r7, r7, ip
   2d9b4:	orr	r0, r0, ip
   2d9b8:	b	2d8f8 <__assert_fail@plt+0x1b304>
   2d9bc:	ands	r5, r0, #73	; 0x49
   2d9c0:	beq	2d8cc <__assert_fail@plt+0x1b2d8>
   2d9c4:	mov	r5, r1
   2d9c8:	b	2d930 <__assert_fail@plt+0x1b33c>
   2d9cc:	mov	r7, lr
   2d9d0:	b	2d984 <__assert_fail@plt+0x1b390>
   2d9d4:	movw	r3, #29936	; 0x74f0
   2d9d8:	movt	r3, #6
   2d9dc:	str	r4, [sp, #-8]!
   2d9e0:	ldr	r4, [r3]
   2d9e4:	mov	r5, r0
   2d9e8:	mov	r2, #5
   2d9ec:	movw	r1, #20360	; 0x4f88
   2d9f0:	movt	r1, #5
   2d9f4:	str	lr, [sp, #4]
   2d9f8:	mov	r0, #0
   2d9fc:	bl	120b4 <dcgettext@plt>
   2da00:	mov	r2, r0
   2da04:	mov	r1, r5
   2da08:	mov	r0, r4
   2da0c:	bl	121ec <error@plt>
   2da10:	bl	125a0 <abort@plt>
   2da14:	movw	r3, #29936	; 0x74f0
   2da18:	movt	r3, #6
   2da1c:	str	r4, [sp, #-8]!
   2da20:	ldr	r4, [r3]
   2da24:	mov	r5, r0
   2da28:	mov	r2, #5
   2da2c:	movw	r1, #20404	; 0x4fb4
   2da30:	movt	r1, #5
   2da34:	str	lr, [sp, #4]
   2da38:	mov	r0, #0
   2da3c:	bl	120b4 <dcgettext@plt>
   2da40:	mov	r2, r0
   2da44:	mov	r1, r5
   2da48:	mov	r0, r4
   2da4c:	bl	121ec <error@plt>
   2da50:	bl	125a0 <abort@plt>
   2da54:	push	{r2, r3}
   2da58:	push	{lr}		; (str lr, [sp, #-4]!)
   2da5c:	sub	sp, sp, #12
   2da60:	ldr	r2, [sp, #16]
   2da64:	ands	r3, r2, #64	; 0x40
   2da68:	bne	2da84 <__assert_fail@plt+0x1b490>
   2da6c:	bl	12324 <openat64@plt>
   2da70:	bl	36114 <__assert_fail@plt+0x23b20>
   2da74:	add	sp, sp, #12
   2da78:	pop	{lr}		; (ldr lr, [sp], #4)
   2da7c:	add	sp, sp, #8
   2da80:	bx	lr
   2da84:	add	ip, sp, #20
   2da88:	ldr	r3, [sp, #20]
   2da8c:	str	ip, [sp, #4]
   2da90:	b	2da6c <__assert_fail@plt+0x1b478>
   2da94:	andeq	r0, r0, r0
   2da98:	sub	sp, sp, #8
   2da9c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2daa0:	mov	r4, r0
   2daa4:	add	r0, sp, #32
   2daa8:	ldr	r1, [r4, #156]	; 0x9c
   2daac:	strd	r6, [sp, #8]
   2dab0:	strd	r8, [sp, #16]
   2dab4:	str	sl, [sp, #24]
   2dab8:	str	lr, [sp, #28]
   2dabc:	cmp	r1, #0
   2dac0:	ldr	r6, [sp, #40]	; 0x28
   2dac4:	stm	r0, {r2, r3}
   2dac8:	ldr	r7, [sp, #44]	; 0x2c
   2dacc:	ldr	r5, [sp, #48]	; 0x30
   2dad0:	beq	2db20 <__assert_fail@plt+0x1b52c>
   2dad4:	ldr	r3, [r4, #48]	; 0x30
   2dad8:	cmp	r3, #0
   2dadc:	bne	2db20 <__assert_fail@plt+0x1b52c>
   2dae0:	ldrb	r3, [r4, #153]	; 0x99
   2dae4:	cmp	r3, #0
   2dae8:	bne	2db20 <__assert_fail@plt+0x1b52c>
   2daec:	ldr	r3, [r4, #172]	; 0xac
   2daf0:	cmp	r5, #2
   2daf4:	cmple	r3, #0
   2daf8:	beq	2dc28 <__assert_fail@plt+0x1b634>
   2dafc:	ldrd	r2, [r0]
   2db00:	mov	ip, #1
   2db04:	ldrd	r6, [r0, #8]
   2db08:	ldrd	r8, [r0, #16]
   2db0c:	strd	r2, [r4, #32]
   2db10:	strd	r6, [r4, #40]	; 0x28
   2db14:	strb	ip, [r4, #180]	; 0xb4
   2db18:	strd	r8, [r4, #48]	; 0x30
   2db1c:	b	2db8c <__assert_fail@plt+0x1b598>
   2db20:	cmp	r5, #4
   2db24:	ble	2dbac <__assert_fail@plt+0x1b5b8>
   2db28:	add	ip, r1, #1
   2db2c:	mov	r2, #100	; 0x64
   2db30:	mov	r3, #0
   2db34:	mov	r0, r6
   2db38:	mov	r1, r7
   2db3c:	str	ip, [r4, #156]	; 0x9c
   2db40:	sub	r5, r5, #4
   2db44:	bl	50488 <__assert_fail@plt+0x3de94>
   2db48:	mov	r0, r6
   2db4c:	mov	r1, r7
   2db50:	strd	r2, [r4, #64]	; 0x40
   2db54:	mov	r2, #100	; 0x64
   2db58:	mov	r3, #0
   2db5c:	bl	50488 <__assert_fail@plt+0x3de94>
   2db60:	mov	r2, #100	; 0x64
   2db64:	mov	r3, #0
   2db68:	bl	50488 <__assert_fail@plt+0x3de94>
   2db6c:	mov	r0, r6
   2db70:	mov	r1, r7
   2db74:	strd	r2, [r4, #56]	; 0x38
   2db78:	movw	r2, #10000	; 0x2710
   2db7c:	mov	r3, #0
   2db80:	bl	50488 <__assert_fail@plt+0x3de94>
   2db84:	strd	r0, [r4, #40]	; 0x28
   2db88:	str	r5, [r4, #48]	; 0x30
   2db8c:	ldrd	r4, [sp]
   2db90:	ldrd	r6, [sp, #8]
   2db94:	ldrd	r8, [sp, #16]
   2db98:	ldr	sl, [sp, #24]
   2db9c:	ldr	lr, [sp, #28]
   2dba0:	add	sp, sp, #32
   2dba4:	add	sp, sp, #8
   2dba8:	bx	lr
   2dbac:	ldr	r3, [r4, #172]	; 0xac
   2dbb0:	cmp	r5, #2
   2dbb4:	movle	r8, #0
   2dbb8:	movle	r9, #0
   2dbbc:	add	r3, r3, #1
   2dbc0:	str	r3, [r4, #172]	; 0xac
   2dbc4:	ble	2dc08 <__assert_fail@plt+0x1b614>
   2dbc8:	mov	r2, #100	; 0x64
   2dbcc:	mov	r3, #0
   2dbd0:	mov	r0, r6
   2dbd4:	mov	r1, r7
   2dbd8:	bl	50488 <__assert_fail@plt+0x3de94>
   2dbdc:	mov	lr, r0
   2dbe0:	mov	ip, r1
   2dbe4:	mov	r0, r6
   2dbe8:	mov	r1, r7
   2dbec:	mov	r2, #100	; 0x64
   2dbf0:	mov	r3, #0
   2dbf4:	mov	r6, lr
   2dbf8:	mov	r7, ip
   2dbfc:	bl	50488 <__assert_fail@plt+0x3de94>
   2dc00:	mov	r8, r2
   2dc04:	mov	r9, r3
   2dc08:	mov	r3, #0
   2dc0c:	mov	r1, #2
   2dc10:	str	r1, [r4, #28]
   2dc14:	strd	r6, [r4, #72]	; 0x48
   2dc18:	strd	r8, [r4, #80]	; 0x50
   2dc1c:	str	r3, [r4, #88]	; 0x58
   2dc20:	str	r3, [r4, #92]	; 0x5c
   2dc24:	b	2db8c <__assert_fail@plt+0x1b598>
   2dc28:	mov	r3, #1
   2dc2c:	mov	r8, #0
   2dc30:	mov	r9, #0
   2dc34:	str	r3, [r4, #172]	; 0xac
   2dc38:	b	2dc08 <__assert_fail@plt+0x1b614>
   2dc3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2dc40:	mov	r3, #0
   2dc44:	strd	r6, [sp, #8]
   2dc48:	movw	r7, #20452	; 0x4fe4
   2dc4c:	movt	r7, #5
   2dc50:	strd	r8, [sp, #16]
   2dc54:	mov	r9, r3
   2dc58:	strd	sl, [sp, #24]
   2dc5c:	mov	fp, #38	; 0x26
   2dc60:	mov	sl, r7
   2dc64:	str	lr, [sp, #32]
   2dc68:	sub	sp, sp, #1536	; 0x600
   2dc6c:	cmn	fp, #93	; 0x5d
   2dc70:	sub	sp, sp, #12
   2dc74:	mov	r5, fp
   2dc78:	add	r6, sp, #272	; 0x110
   2dc7c:	add	r8, sp, #424	; 0x1a8
   2dc80:	strh	r3, [r6]
   2dc84:	str	r3, [sp, #88]	; 0x58
   2dc88:	mov	r3, #51712	; 0xca00
   2dc8c:	movt	r3, #15258	; 0x3b9a
   2dc90:	str	r6, [sp, #16]
   2dc94:	str	r0, [sp, #36]	; 0x24
   2dc98:	str	r3, [sp, #92]	; 0x5c
   2dc9c:	mvn	r3, #1
   2dca0:	str	r3, [sp, #32]
   2dca4:	beq	2ddb4 <__assert_fail@plt+0x1b7c0>
   2dca8:	ldr	r3, [sp, #32]
   2dcac:	cmn	r3, #2
   2dcb0:	beq	2e1dc <__assert_fail@plt+0x1bbe8>
   2dcb4:	ldr	r2, [sp, #32]
   2dcb8:	cmp	r2, #0
   2dcbc:	ble	2e1c0 <__assert_fail@plt+0x1bbcc>
   2dcc0:	movw	r3, #277	; 0x115
   2dcc4:	cmp	r2, r3
   2dcc8:	ble	2e36c <__assert_fail@plt+0x1bd78>
   2dccc:	add	r5, fp, #2
   2dcd0:	mov	r2, #2
   2dcd4:	cmp	r5, #112	; 0x70
   2dcd8:	bhi	2ddb4 <__assert_fail@plt+0x1b7c0>
   2dcdc:	add	r5, sl, r5
   2dce0:	movw	r3, #2076	; 0x81c
   2dce4:	ldrsb	r3, [r5, r3]
   2dce8:	cmp	r3, r2
   2dcec:	bne	2ddb4 <__assert_fail@plt+0x1b7c0>
   2dcf0:	ldrb	r9, [r5, #2192]	; 0x890
   2dcf4:	cmp	r9, #0
   2dcf8:	beq	2e70c <__assert_fail@plt+0x1c118>
   2dcfc:	ldr	r3, [sp, #88]	; 0x58
   2dd00:	add	r2, sp, #312	; 0x138
   2dd04:	add	ip, sp, #320	; 0x140
   2dd08:	ldrd	r6, [sp, #96]	; 0x60
   2dd0c:	cmp	r3, #0
   2dd10:	subne	r3, r3, #1
   2dd14:	strne	r3, [sp, #88]	; 0x58
   2dd18:	ldr	r3, [sp, #240]	; 0xf0
   2dd1c:	str	r3, [sp, #328]	; 0x148
   2dd20:	ldrd	r0, [r2]
   2dd24:	add	r2, r8, #56	; 0x38
   2dd28:	strd	r6, [ip]
   2dd2c:	add	ip, sp, #328	; 0x148
   2dd30:	ldrd	r4, [ip]
   2dd34:	ldr	r3, [sp, #16]
   2dd38:	strd	r0, [r8, #56]	; 0x38
   2dd3c:	mvn	r1, #1
   2dd40:	str	r1, [sp, #32]
   2dd44:	add	r1, sp, #336	; 0x150
   2dd48:	add	ip, sp, #344	; 0x158
   2dd4c:	ldrd	r0, [r1]
   2dd50:	strd	r6, [r8, #64]	; 0x40
   2dd54:	strd	r4, [r8, #72]	; 0x48
   2dd58:	ldrd	r4, [ip]
   2dd5c:	add	ip, sp, #360	; 0x168
   2dd60:	strd	r0, [r8, #80]	; 0x50
   2dd64:	add	r1, sp, #352	; 0x160
   2dd68:	ldrd	r0, [r1]
   2dd6c:	strd	r4, [r8, #88]	; 0x58
   2dd70:	ldrd	r4, [ip]
   2dd74:	strd	r0, [r8, #96]	; 0x60
   2dd78:	mov	r8, r2
   2dd7c:	strd	r4, [r2, #48]	; 0x30
   2dd80:	add	r2, sp, #280	; 0x118
   2dd84:	add	r1, r3, #2
   2dd88:	strh	r9, [r3, #2]
   2dd8c:	add	r2, r2, #30
   2dd90:	cmp	r1, r2
   2dd94:	str	r1, [sp, #16]
   2dd98:	bcs	30320 <__assert_fail@plt+0x1dd2c>
   2dd9c:	cmp	r9, #12
   2dda0:	beq	30328 <__assert_fail@plt+0x1dd34>
   2dda4:	ldrsb	fp, [sl, r9]
   2dda8:	cmn	fp, #93	; 0x5d
   2ddac:	mov	r5, fp
   2ddb0:	bne	2dca8 <__assert_fail@plt+0x1b6b4>
   2ddb4:	add	r3, sl, r9
   2ddb8:	ldrb	ip, [r3, #2308]	; 0x904
   2ddbc:	cmp	ip, #0
   2ddc0:	bne	2de70 <__assert_fail@plt+0x1b87c>
   2ddc4:	ldr	r3, [sp, #88]	; 0x58
   2ddc8:	cmp	r3, #3
   2ddcc:	bne	2dde0 <__assert_fail@plt+0x1b7ec>
   2ddd0:	ldr	r3, [sp, #32]
   2ddd4:	cmp	r3, #0
   2ddd8:	bgt	2e1d0 <__assert_fail@plt+0x1bbdc>
   2dddc:	beq	2e19c <__assert_fail@plt+0x1bba8>
   2dde0:	movw	r0, #2076	; 0x81c
   2dde4:	add	r1, sp, #272	; 0x110
   2dde8:	ldr	r6, [sp, #16]
   2ddec:	b	2de00 <__assert_fail@plt+0x1b80c>
   2ddf0:	cmp	r6, r1
   2ddf4:	sub	r8, r8, #56	; 0x38
   2ddf8:	beq	2e19c <__assert_fail@plt+0x1bba8>
   2ddfc:	ldrsh	r9, [r6, #-2]!
   2de00:	ldrsb	r3, [sl, r9]
   2de04:	cmn	r3, #93	; 0x5d
   2de08:	add	r2, r3, #1
   2de0c:	beq	2ddf0 <__assert_fail@plt+0x1b7fc>
   2de10:	cmp	r2, #112	; 0x70
   2de14:	add	r3, sl, r2
   2de18:	bhi	2ddf0 <__assert_fail@plt+0x1b7fc>
   2de1c:	ldrsb	r2, [r3, r0]
   2de20:	cmp	r2, #1
   2de24:	bne	2ddf0 <__assert_fail@plt+0x1b7fc>
   2de28:	ldrb	r9, [r3, #2192]	; 0x890
   2de2c:	cmp	r9, #0
   2de30:	beq	2ddf0 <__assert_fail@plt+0x1b7fc>
   2de34:	ldr	r3, [sp, #240]	; 0xf0
   2de38:	add	r2, sp, #312	; 0x138
   2de3c:	add	ip, sp, #320	; 0x140
   2de40:	str	r3, [sp, #328]	; 0x148
   2de44:	mov	r3, r6
   2de48:	ldrd	r0, [r2]
   2de4c:	add	r2, r8, #56	; 0x38
   2de50:	ldrd	r6, [sp, #96]	; 0x60
   2de54:	strd	r0, [r8, #56]	; 0x38
   2de58:	mov	r1, #3
   2de5c:	strd	r6, [ip]
   2de60:	add	ip, sp, #328	; 0x148
   2de64:	str	r1, [sp, #88]	; 0x58
   2de68:	ldrd	r4, [ip]
   2de6c:	b	2dd44 <__assert_fail@plt+0x1b750>
   2de70:	add	r3, sl, ip
   2de74:	add	r5, sp, #376	; 0x178
   2de78:	ldrb	r2, [r3, #2424]	; 0x978
   2de7c:	mov	r4, r5
   2de80:	sub	lr, ip, #4
   2de84:	rsb	r1, r2, #1
   2de88:	rsb	r1, r1, r1, lsl #3
   2de8c:	lsl	r1, r1, #3
   2de90:	add	r3, r8, r1
   2de94:	ldrd	r0, [r1, r8]
   2de98:	ldr	fp, [r3, #16]
   2de9c:	ldr	r9, [r3, #20]
   2dea0:	strd	r0, [r5, #-8]
   2dea4:	ldrd	r0, [r3, #8]
   2dea8:	ldr	r7, [r3, #24]
   2deac:	ldr	r6, [r3, #36]	; 0x24
   2deb0:	strd	r0, [r4], #-8
   2deb4:	str	r9, [sp, #64]	; 0x40
   2deb8:	str	r9, [r4, #20]
   2debc:	ldr	r9, [r3, #32]
   2dec0:	str	fp, [r4, #16]
   2dec4:	str	r7, [r4, #24]
   2dec8:	str	r1, [sp, #48]	; 0x30
   2decc:	str	r0, [sp, #56]	; 0x38
   2ded0:	str	r9, [r4, #32]
   2ded4:	str	fp, [sp, #60]	; 0x3c
   2ded8:	str	r9, [sp, #68]	; 0x44
   2dedc:	str	r7, [sp, #72]	; 0x48
   2dee0:	ldr	fp, [r3, #28]
   2dee4:	ldr	r7, [r3, #40]	; 0x28
   2dee8:	ldr	r9, [r3, #44]	; 0x2c
   2deec:	str	fp, [r4, #28]
   2def0:	ldrd	r0, [r3, #48]	; 0x30
   2def4:	str	r7, [sp, #24]
   2def8:	ldr	r3, [r3, #48]	; 0x30
   2defc:	str	r6, [r4, #36]	; 0x24
   2df00:	str	r7, [r4, #40]	; 0x28
   2df04:	strd	r0, [r4, #48]	; 0x30
   2df08:	str	fp, [sp, #76]	; 0x4c
   2df0c:	mov	fp, r6
   2df10:	str	r3, [sp, #40]	; 0x28
   2df14:	str	r9, [sp, #28]
   2df18:	str	r9, [r4, #44]	; 0x2c
   2df1c:	cmp	lr, #87	; 0x57
   2df20:	ldrls	pc, [pc, lr, lsl #2]
   2df24:	b	30c34 <__assert_fail@plt+0x1e640>
   2df28:	andeq	pc, r2, r4, lsl #17
   2df2c:	andeq	r0, r3, r4, lsr ip
   2df30:	andeq	r0, r3, r4, lsr ip
   2df34:	andeq	pc, r2, r8, lsr r8	; <UNPREDICTABLE>
   2df38:	ldrdeq	pc, [r2], -ip
   2df3c:	muleq	r2, ip, sl
   2df40:	andeq	pc, r2, ip, asr sl	; <UNPREDICTABLE>
   2df44:	andeq	pc, r2, ip, lsl sl	; <UNPREDICTABLE>
   2df48:	andeq	pc, r2, r8, lsl #25
   2df4c:	andeq	pc, r2, ip, ror ip	; <UNPREDICTABLE>
   2df50:	andeq	pc, r2, r0, ror ip	; <UNPREDICTABLE>
   2df54:	andeq	pc, r2, r0, asr #24
   2df58:	andeq	r0, r3, r4, lsr ip
   2df5c:	andeq	r0, r3, r4, lsr ip
   2df60:	strdeq	pc, [r2], -r4
   2df64:			; <UNDEFINED> instruction: 0x0002fbb0
   2df68:	andeq	pc, r2, r4, ror #22
   2df6c:	andeq	r0, r3, r4, lsr ip
   2df70:	andeq	pc, r2, ip, lsl fp	; <UNPREDICTABLE>
   2df74:	andeq	lr, r2, ip, ror #30
   2df78:	andeq	lr, r2, r0, lsr #30
   2df7c:	andeq	r0, r3, r4, lsr ip
   2df80:	andeq	r0, r3, r4, lsr ip
   2df84:	muleq	r2, r0, r2
   2df88:	andeq	pc, r2, ip, ror #4
   2df8c:	andeq	pc, r2, r8, lsr r2	; <UNPREDICTABLE>
   2df90:	andeq	pc, r2, r4, lsl r2	; <UNPREDICTABLE>
   2df94:	andeq	pc, r2, r8, ror #3
   2df98:	andeq	lr, r2, r8, lsl #1
   2df9c:	andeq	pc, r2, r4, lsr #1
   2dfa0:			; <UNDEFINED> instruction: 0x0002efb0
   2dfa4:	muleq	r2, ip, sp
   2dfa8:	andeq	pc, r2, r0, ror sp	; <UNPREDICTABLE>
   2dfac:	andeq	pc, r2, r0, asr #26
   2dfb0:	andeq	pc, r2, ip, lsl #26
   2dfb4:	andeq	pc, r2, r0, lsl #26
   2dfb8:	andeq	pc, r2, r8, asr #25
   2dfbc:	andeq	r0, r3, r4, asr #2
   2dfc0:	ldrdeq	r0, [r3], -r4
   2dfc4:	muleq	r3, r8, r0
   2dfc8:	andeq	r0, r3, r4, lsr #32
   2dfcc:	strdeq	pc, [r2], -r4
   2dfd0:			; <UNDEFINED> instruction: 0x0002ffbc
   2dfd4:	andeq	pc, r2, ip, lsl #31
   2dfd8:	andeq	pc, r2, r8, lsr pc	; <UNPREDICTABLE>
   2dfdc:	andeq	r0, r3, r4, lsr ip
   2dfe0:			; <UNDEFINED> instruction: 0x0002fdb0
   2dfe4:	andeq	lr, r2, ip, ror fp
   2dfe8:	andeq	lr, r2, r8, ror #17
   2dfec:	andeq	lr, r2, r8, ror #17
   2dff0:	andeq	pc, r2, r0, lsr pc	; <UNPREDICTABLE>
   2dff4:	ldrdeq	pc, [r2], -r0
   2dff8:	andeq	pc, r2, r0, lsl #29
   2dffc:	andeq	pc, r2, r4, lsr lr	; <UNPREDICTABLE>
   2e000:	andeq	pc, r2, r4, ror #15
   2e004:	andeq	pc, r2, ip, ror r7	; <UNPREDICTABLE>
   2e008:	andeq	pc, r2, ip, asr r6	; <UNPREDICTABLE>
   2e00c:			; <UNDEFINED> instruction: 0x0002f5b8
   2e010:	andeq	pc, r2, r8, ror #10
   2e014:	andeq	pc, r2, r0, lsl #10
   2e018:	andeq	pc, r2, ip, asr #19
   2e01c:	andeq	pc, r2, r8, ror #18
   2e020:	andeq	pc, r2, ip, lsl r9	; <UNPREDICTABLE>
   2e024:	ldrdeq	pc, [r2], -r0
   2e028:	andeq	pc, r2, r8, lsl r7	; <UNPREDICTABLE>
   2e02c:	andeq	pc, r2, r0, ror #13
   2e030:	andeq	lr, r2, ip, lsl sp
   2e034:	andeq	lr, r2, r0, lsl sl
   2e038:	andeq	lr, r2, r0, lsl sl
   2e03c:	strdeq	lr, [r2], -ip
   2e040:	andeq	r0, r3, r4, lsr ip
   2e044:	muleq	r2, ip, sl
   2e048:			; <UNDEFINED> instruction: 0x0002f4b0
   2e04c:	andeq	pc, r2, ip, lsl r4	; <UNPREDICTABLE>
   2e050:	andeq	pc, r2, ip, asr #7
   2e054:	andeq	pc, r2, r4, ror #6
   2e058:	ldrdeq	lr, [r2], -ip
   2e05c:	andeq	lr, r2, ip, ror sp
   2e060:	andeq	r0, r3, r4, lsr ip
   2e064:	andeq	r0, r3, r4, lsr ip
   2e068:	andeq	r0, r3, r4, lsr ip
   2e06c:	andeq	lr, r2, r8, lsr lr
   2e070:	andeq	r0, r3, r4, lsr ip
   2e074:	andeq	lr, r2, r8, asr #29
   2e078:	muleq	r2, r0, lr
   2e07c:	andeq	r0, r3, r8, asr r1
   2e080:	andeq	lr, r2, ip, asr fp
   2e084:	andeq	lr, r2, r8, ror sl
   2e088:	ldr	r9, [sp, #36]	; 0x24
   2e08c:	ldr	r1, [r8, #48]	; 0x30
   2e090:	ldrd	r6, [r9, #128]	; 0x80
   2e094:	ldrd	r2, [r9, #136]	; 0x88
   2e098:	ldr	r0, [r9, #144]	; 0x90
   2e09c:	strd	r6, [sp, #80]	; 0x50
   2e0a0:	ldrd	r6, [r8, #40]	; 0x28
   2e0a4:	adds	r1, r0, r1
   2e0a8:	movvs	ip, #1
   2e0ac:	movvc	ip, #0
   2e0b0:	adds	r0, r2, r6
   2e0b4:	str	r1, [r9, #144]	; 0x90
   2e0b8:	adcs	r1, r3, r7
   2e0bc:	ldrd	r6, [r9, #120]	; 0x78
   2e0c0:	movvs	r3, #1
   2e0c4:	movvc	r3, #0
   2e0c8:	strd	r0, [r9, #136]	; 0x88
   2e0cc:	orr	ip, ip, r3
   2e0d0:	ldrd	r0, [r8, #32]
   2e0d4:	strd	r6, [sp, #128]	; 0x80
   2e0d8:	ldrd	r6, [sp, #80]	; 0x50
   2e0dc:	adds	r2, r6, r0
   2e0e0:	adcs	r3, r7, r1
   2e0e4:	ldrd	r6, [r9, #112]	; 0x70
   2e0e8:	movvs	lr, #1
   2e0ec:	movvc	lr, #0
   2e0f0:	ldrd	r0, [r8, #24]
   2e0f4:	orr	ip, ip, lr
   2e0f8:	strd	r2, [r9, #128]	; 0x80
   2e0fc:	strd	r6, [sp, #136]	; 0x88
   2e100:	ldrd	r6, [sp, #128]	; 0x80
   2e104:	adds	r2, r6, r0
   2e108:	adcs	r3, r7, r1
   2e10c:	ldrd	r6, [sp, #136]	; 0x88
   2e110:	movvs	r1, #1
   2e114:	movvc	r1, #0
   2e118:	orr	ip, ip, r1
   2e11c:	strd	r2, [r9, #120]	; 0x78
   2e120:	ldrd	r0, [r8, #16]
   2e124:	ldrd	r2, [r9, #104]	; 0x68
   2e128:	strd	r2, [sp, #80]	; 0x50
   2e12c:	adds	r2, r6, r0
   2e130:	adcs	r3, r7, r1
   2e134:	ldrd	r0, [r8, #8]
   2e138:	movvs	lr, #1
   2e13c:	movvc	lr, #0
   2e140:	strd	r2, [r9, #112]	; 0x70
   2e144:	orr	ip, ip, lr
   2e148:	ldrd	r6, [sp, #80]	; 0x50
   2e14c:	ldrd	r2, [r9, #96]	; 0x60
   2e150:	ldr	lr, [r8, #-56]	; 0xffffffc8
   2e154:	strd	r2, [sp, #128]	; 0x80
   2e158:	adds	r2, r6, r0
   2e15c:	adcs	r3, r7, r1
   2e160:	ldrd	r6, [sp, #128]	; 0x80
   2e164:	movvs	r1, #1
   2e168:	movvc	r1, #0
   2e16c:	strd	r2, [r9, #104]	; 0x68
   2e170:	str	r1, [sp, #80]	; 0x50
   2e174:	ldrd	r0, [r8]
   2e178:	str	lr, [r9, #24]
   2e17c:	adds	r2, r6, r0
   2e180:	adcs	r3, r7, r1
   2e184:	ldr	r1, [sp, #80]	; 0x50
   2e188:	strd	r2, [r9, #96]	; 0x60
   2e18c:	orrvc	r0, ip, r1
   2e190:	movvs	r0, #1
   2e194:	cmp	r0, #0
   2e198:	beq	2f1b4 <__assert_fail@plt+0x1cbc0>
   2e19c:	mov	r0, #1
   2e1a0:	add	sp, sp, #1536	; 0x600
   2e1a4:	add	sp, sp, #12
   2e1a8:	ldrd	r4, [sp]
   2e1ac:	ldrd	r6, [sp, #8]
   2e1b0:	ldrd	r8, [sp, #16]
   2e1b4:	ldrd	sl, [sp, #24]
   2e1b8:	add	sp, sp, #32
   2e1bc:	pop	{pc}		; (ldr pc, [sp], #4)
   2e1c0:	mov	r3, #0
   2e1c4:	mov	r2, r3
   2e1c8:	str	r3, [sp, #32]
   2e1cc:	b	2dcd4 <__assert_fail@plt+0x1b6e0>
   2e1d0:	mvn	r3, #1
   2e1d4:	str	r3, [sp, #32]
   2e1d8:	b	2dde0 <__assert_fail@plt+0x1b7ec>
   2e1dc:	ldr	r6, [sp, #16]
   2e1e0:	ldr	r0, [sp, #36]	; 0x24
   2e1e4:	ldr	r2, [r0]
   2e1e8:	ldrb	r3, [r2]
   2e1ec:	cmp	r3, #9
   2e1f0:	bcc	2e218 <__assert_fail@plt+0x1bc24>
   2e1f4:	cmp	r3, #13
   2e1f8:	bls	2e204 <__assert_fail@plt+0x1bc10>
   2e1fc:	cmp	r3, #32
   2e200:	bne	2e218 <__assert_fail@plt+0x1bc24>
   2e204:	add	r2, r2, #1
   2e208:	str	r2, [r0]
   2e20c:	ldrb	r3, [r2]
   2e210:	cmp	r3, #9
   2e214:	bcs	2e1f4 <__assert_fail@plt+0x1bc00>
   2e218:	sub	lr, r3, #48	; 0x30
   2e21c:	sub	r1, r3, #43	; 0x2b
   2e220:	cmp	lr, #9
   2e224:	and	r1, r1, #253	; 0xfd
   2e228:	bls	2e2a4 <__assert_fail@plt+0x1bcb0>
   2e22c:	cmp	r1, #0
   2e230:	beq	2e380 <__assert_fail@plt+0x1bd8c>
   2e234:	cmp	r3, #65	; 0x41
   2e238:	bcc	2e250 <__assert_fail@plt+0x1bc5c>
   2e23c:	cmp	r3, #90	; 0x5a
   2e240:	bls	2e6f8 <__assert_fail@plt+0x1c104>
   2e244:	sub	r1, r3, #97	; 0x61
   2e248:	cmp	r1, #25
   2e24c:	bls	2e5fc <__assert_fail@plt+0x1c008>
   2e250:	cmp	r3, #40	; 0x28
   2e254:	bne	309d8 <__assert_fail@plt+0x1e3e4>
   2e258:	mov	ip, #0
   2e25c:	b	2e280 <__assert_fail@plt+0x1bc8c>
   2e260:	cmp	r3, #40	; 0x28
   2e264:	addeq	ip, ip, #1
   2e268:	beq	2e274 <__assert_fail@plt+0x1bc80>
   2e26c:	cmp	r3, #41	; 0x29
   2e270:	subeq	ip, ip, #1
   2e274:	cmp	ip, #0
   2e278:	beq	30314 <__assert_fail@plt+0x1dd20>
   2e27c:	mov	r2, r1
   2e280:	add	r1, r2, #1
   2e284:	str	r1, [r0]
   2e288:	ldrb	r3, [r1, #-1]
   2e28c:	cmp	r3, #0
   2e290:	bne	2e260 <__assert_fail@plt+0x1bc6c>
   2e294:	mov	r2, r3
   2e298:	str	r6, [sp, #16]
   2e29c:	str	r3, [sp, #32]
   2e2a0:	b	2dcd4 <__assert_fail@plt+0x1b6e0>
   2e2a4:	sub	r3, r3, #45	; 0x2d
   2e2a8:	cmp	r1, #0
   2e2ac:	clz	r3, r3
   2e2b0:	lsr	r3, r3, #5
   2e2b4:	bne	303b0 <__assert_fail@plt+0x1ddbc>
   2e2b8:	cmp	r3, #0
   2e2bc:	moveq	r7, #1
   2e2c0:	mvnne	r7, #0
   2e2c4:	add	r2, r2, #1
   2e2c8:	str	r2, [r0]
   2e2cc:	ldrb	r3, [r2]
   2e2d0:	cmp	r3, #9
   2e2d4:	bcc	2e2e8 <__assert_fail@plt+0x1bcf4>
   2e2d8:	cmp	r3, #13
   2e2dc:	bls	2e2c4 <__assert_fail@plt+0x1bcd0>
   2e2e0:	cmp	r3, #32
   2e2e4:	beq	2e2c4 <__assert_fail@plt+0x1bcd0>
   2e2e8:	sub	lr, r3, #48	; 0x30
   2e2ec:	cmp	lr, #9
   2e2f0:	bhi	2e1ec <__assert_fail@plt+0x1bbf8>
   2e2f4:	cmn	r7, #1
   2e2f8:	str	r6, [sp, #16]
   2e2fc:	strne	r2, [sp, #24]
   2e300:	beq	2e390 <__assert_fail@plt+0x1bd9c>
   2e304:	mov	r4, #0
   2e308:	adds	r5, r4, lr
   2e30c:	add	ip, r2, #1
   2e310:	str	r5, [sp, #32]
   2e314:	bvs	2e340 <__assert_fail@plt+0x1bd4c>
   2e318:	ldrb	r3, [r2, #1]
   2e31c:	mov	r1, #10
   2e320:	smull	r0, r1, r5, r1
   2e324:	sub	lr, r3, #48	; 0x30
   2e328:	mov	r4, r0
   2e32c:	cmp	lr, #9
   2e330:	bhi	2e424 <__assert_fail@plt+0x1be30>
   2e334:	cmp	r1, r0, asr #31
   2e338:	mov	r2, ip
   2e33c:	beq	2e308 <__assert_fail@plt+0x1bd14>
   2e340:	str	r6, [sp, #16]
   2e344:	mov	r3, #63	; 0x3f
   2e348:	mov	r2, #2
   2e34c:	str	r3, [sp, #32]
   2e350:	b	2e378 <__assert_fail@plt+0x1bd84>
   2e354:	movw	r1, #273	; 0x111
   2e358:	mov	r2, #3600	; 0xe10
   2e35c:	mov	r3, #0
   2e360:	str	r1, [sp, #32]
   2e364:	add	r1, sp, #312	; 0x138
   2e368:	strd	r2, [r1]
   2e36c:	ldr	r3, [sp, #32]
   2e370:	add	r3, sl, r3
   2e374:	ldrb	r2, [r3, #1796]	; 0x704
   2e378:	add	r5, fp, r2
   2e37c:	b	2dcd4 <__assert_fail@plt+0x1b6e0>
   2e380:	sub	r3, r3, #45	; 0x2d
   2e384:	clz	r3, r3
   2e388:	lsr	r3, r3, #5
   2e38c:	b	2e2b8 <__assert_fail@plt+0x1bcc4>
   2e390:	mov	r5, r2
   2e394:	mov	r4, #0
   2e398:	str	r2, [sp, #24]
   2e39c:	rsb	r3, r3, #48	; 0x30
   2e3a0:	add	ip, r5, #1
   2e3a4:	adds	lr, r4, r3
   2e3a8:	str	lr, [sp, #32]
   2e3ac:	bvs	2e340 <__assert_fail@plt+0x1bd4c>
   2e3b0:	ldrb	r3, [r5, #1]
   2e3b4:	mov	r2, #10
   2e3b8:	smull	r0, r1, lr, r2
   2e3bc:	sub	r2, r3, #48	; 0x30
   2e3c0:	mov	r4, r0
   2e3c4:	cmp	r2, #9
   2e3c8:	bls	2e5ec <__assert_fail@plt+0x1bff8>
   2e3cc:	and	r3, r3, #253	; 0xfd
   2e3d0:	str	r6, [sp, #16]
   2e3d4:	cmp	r3, #44	; 0x2c
   2e3d8:	ldr	r2, [sp, #24]
   2e3dc:	bne	2e3f0 <__assert_fail@plt+0x1bdfc>
   2e3e0:	ldrb	r3, [ip, #1]
   2e3e4:	sub	r3, r3, #48	; 0x30
   2e3e8:	cmp	r3, #9
   2e3ec:	bls	2e48c <__assert_fail@plt+0x1be98>
   2e3f0:	sub	r2, ip, r2
   2e3f4:	mov	r3, #1
   2e3f8:	asr	r1, lr, #31
   2e3fc:	mov	r0, lr
   2e400:	str	r2, [sp, #240]	; 0xf0
   2e404:	ldr	r2, [sp, #36]	; 0x24
   2e408:	strb	r3, [sp, #312]	; 0x138
   2e40c:	movw	r3, #274	; 0x112
   2e410:	str	r3, [sp, #32]
   2e414:	strd	r0, [sp, #96]	; 0x60
   2e418:	str	ip, [r2]
   2e41c:	mov	r2, #19
   2e420:	b	2e378 <__assert_fail@plt+0x1bd84>
   2e424:	and	r3, r3, #253	; 0xfd
   2e428:	str	r6, [sp, #16]
   2e42c:	cmp	r3, #44	; 0x2c
   2e430:	bne	2e444 <__assert_fail@plt+0x1be50>
   2e434:	ldrb	r3, [ip, #1]
   2e438:	sub	r3, r3, #48	; 0x30
   2e43c:	cmp	r3, #9
   2e440:	bls	2e490 <__assert_fail@plt+0x1be9c>
   2e444:	ldr	r0, [sp, #24]
   2e448:	cmp	r7, #0
   2e44c:	movw	r1, #274	; 0x112
   2e450:	movw	r2, #275	; 0x113
   2e454:	lsr	r3, r7, #31
   2e458:	movne	r2, r1
   2e45c:	asr	r1, r5, #31
   2e460:	str	r2, [sp, #32]
   2e464:	movne	r2, #19
   2e468:	moveq	r2, #20
   2e46c:	strb	r3, [sp, #312]	; 0x138
   2e470:	sub	r0, ip, r0
   2e474:	str	r0, [sp, #240]	; 0xf0
   2e478:	ldr	r0, [sp, #36]	; 0x24
   2e47c:	str	ip, [r0]
   2e480:	mov	r0, r5
   2e484:	strd	r0, [sp, #96]	; 0x60
   2e488:	b	2e378 <__assert_fail@plt+0x1bd84>
   2e48c:	mov	r2, r5
   2e490:	ldrb	r1, [ip, #2]
   2e494:	add	r3, r3, r3, lsl #2
   2e498:	lsl	r3, r3, #1
   2e49c:	sub	r1, r1, #48	; 0x30
   2e4a0:	cmp	r1, #9
   2e4a4:	addhi	r1, ip, #2
   2e4a8:	bhi	2e870 <__assert_fail@plt+0x1c27c>
   2e4ac:	ldrb	r2, [r2, #4]
   2e4b0:	add	r3, r3, r1
   2e4b4:	add	r1, ip, #3
   2e4b8:	sub	r2, r2, #48	; 0x30
   2e4bc:	cmp	r2, #9
   2e4c0:	bhi	2e870 <__assert_fail@plt+0x1c27c>
   2e4c4:	ldrb	r1, [ip, #4]
   2e4c8:	add	r3, r3, r3, lsl #2
   2e4cc:	add	r3, r2, r3, lsl #1
   2e4d0:	add	r3, r3, r3, lsl #2
   2e4d4:	sub	r2, r1, #48	; 0x30
   2e4d8:	cmp	r2, #9
   2e4dc:	lsl	r3, r3, #1
   2e4e0:	bhi	30c2c <__assert_fail@plt+0x1e638>
   2e4e4:	ldrb	r1, [ip, #5]
   2e4e8:	add	r3, r2, r3
   2e4ec:	add	r3, r3, r3, lsl #2
   2e4f0:	lsl	r3, r3, #1
   2e4f4:	sub	r1, r1, #48	; 0x30
   2e4f8:	cmp	r1, #9
   2e4fc:	bhi	30c70 <__assert_fail@plt+0x1e67c>
   2e500:	ldrb	r2, [ip, #6]
   2e504:	add	r3, r1, r3
   2e508:	add	r3, r3, r3, lsl #2
   2e50c:	lsl	r3, r3, #1
   2e510:	sub	r2, r2, #48	; 0x30
   2e514:	cmp	r2, #9
   2e518:	bhi	30c68 <__assert_fail@plt+0x1e674>
   2e51c:	ldrb	r1, [ip, #7]
   2e520:	add	r3, r2, r3
   2e524:	add	r3, r3, r3, lsl #2
   2e528:	lsl	r3, r3, #1
   2e52c:	sub	r1, r1, #48	; 0x30
   2e530:	cmp	r1, #9
   2e534:	bhi	30c24 <__assert_fail@plt+0x1e630>
   2e538:	ldrb	r2, [ip, #8]
   2e53c:	add	r3, r1, r3
   2e540:	add	r3, r3, r3, lsl #2
   2e544:	lsl	r0, r3, #1
   2e548:	sub	r3, r2, #48	; 0x30
   2e54c:	cmp	r3, #9
   2e550:	bhi	30c1c <__assert_fail@plt+0x1e628>
   2e554:	ldrb	r2, [ip, #9]
   2e558:	add	r3, r3, r0
   2e55c:	add	r3, r3, r3, lsl #2
   2e560:	lsl	r3, r3, #1
   2e564:	sub	r2, r2, #48	; 0x30
   2e568:	cmp	r2, #9
   2e56c:	bhi	30bf8 <__assert_fail@plt+0x1e604>
   2e570:	cmn	r7, #1
   2e574:	add	r1, ip, #10
   2e578:	add	r3, r3, r2
   2e57c:	beq	2e8a8 <__assert_fail@plt+0x1c2b4>
   2e580:	ldrb	r2, [r1]
   2e584:	sub	r2, r2, #48	; 0x30
   2e588:	cmp	r2, #9
   2e58c:	ldrls	r6, [sp, #16]
   2e590:	bhi	2e5a8 <__assert_fail@plt+0x1bfb4>
   2e594:	ldrb	r2, [r1, #1]!
   2e598:	sub	r2, r2, #48	; 0x30
   2e59c:	cmp	r2, #9
   2e5a0:	bls	2e594 <__assert_fail@plt+0x1bfa0>
   2e5a4:	str	r6, [sp, #16]
   2e5a8:	adds	r2, r3, #0
   2e5ac:	movne	r2, #1
   2e5b0:	ands	r2, r2, r7, lsr #31
   2e5b4:	beq	30330 <__assert_fail@plt+0x1dd3c>
   2e5b8:	ldr	r2, [sp, #32]
   2e5bc:	subs	r2, r2, #1
   2e5c0:	bvs	2e344 <__assert_fail@plt+0x1bd50>
   2e5c4:	ldr	r0, [sp, #92]	; 0x5c
   2e5c8:	str	r2, [sp, #312]	; 0x138
   2e5cc:	mov	r2, #21
   2e5d0:	sub	r3, r0, r3
   2e5d4:	ldr	r0, [sp, #36]	; 0x24
   2e5d8:	str	r3, [sp, #316]	; 0x13c
   2e5dc:	str	r1, [r0]
   2e5e0:	mov	r1, #276	; 0x114
   2e5e4:	str	r1, [sp, #32]
   2e5e8:	b	2e378 <__assert_fail@plt+0x1bd84>
   2e5ec:	cmp	r1, r0, asr #31
   2e5f0:	mov	r5, ip
   2e5f4:	beq	2e39c <__assert_fail@plt+0x1bda8>
   2e5f8:	b	2e340 <__assert_fail@plt+0x1bd4c>
   2e5fc:	add	r4, sp, #252	; 0xfc
   2e600:	add	ip, sp, #264	; 0x108
   2e604:	str	r6, [sp, #16]
   2e608:	mov	r1, r4
   2e60c:	add	ip, ip, #7
   2e610:	mov	r0, r1
   2e614:	cmp	r1, ip
   2e618:	add	r2, r2, #1
   2e61c:	strbcc	r3, [r0], #1
   2e620:	movcc	r1, r0
   2e624:	ldr	r3, [sp, #36]	; 0x24
   2e628:	str	r2, [r3]
   2e62c:	ldrb	r3, [r2]
   2e630:	cmp	r3, #65	; 0x41
   2e634:	sub	r0, r3, #97	; 0x61
   2e638:	bcc	2e64c <__assert_fail@plt+0x1c058>
   2e63c:	cmp	r3, #90	; 0x5a
   2e640:	bls	2e610 <__assert_fail@plt+0x1c01c>
   2e644:	cmp	r0, #25
   2e648:	bls	2e610 <__assert_fail@plt+0x1c01c>
   2e64c:	cmp	r3, #46	; 0x2e
   2e650:	beq	2e610 <__assert_fail@plt+0x1c01c>
   2e654:	mov	r3, #0
   2e658:	str	r6, [sp, #16]
   2e65c:	strb	r3, [r1]
   2e660:	ldrb	r3, [sp, #252]	; 0xfc
   2e664:	cmp	r3, #0
   2e668:	movne	r2, r4
   2e66c:	beq	2e694 <__assert_fail@plt+0x1c0a0>
   2e670:	sub	r1, r3, #97	; 0x61
   2e674:	sub	r0, r3, #32
   2e678:	cmp	r1, #25
   2e67c:	bhi	2e6e4 <__assert_fail@plt+0x1c0f0>
   2e680:	strb	r0, [r2]
   2e684:	ldrb	r3, [r2, #1]!
   2e688:	cmp	r3, #0
   2e68c:	bne	2e670 <__assert_fail@plt+0x1c07c>
   2e690:	str	r6, [sp, #16]
   2e694:	movw	r1, #23116	; 0x5a4c
   2e698:	movt	r1, #5
   2e69c:	ldr	r7, [pc, #4008]	; 2f64c <__assert_fail@plt+0x1d058>
   2e6a0:	ldr	r6, [sp, #16]
   2e6a4:	b	2e6b4 <__assert_fail@plt+0x1c0c0>
   2e6a8:	ldr	r1, [r7, #12]!
   2e6ac:	cmp	r1, #0
   2e6b0:	beq	302a8 <__assert_fail@plt+0x1dcb4>
   2e6b4:	mov	r0, r4
   2e6b8:	bl	11f40 <strcmp@plt>
   2e6bc:	cmp	r0, #0
   2e6c0:	bne	2e6a8 <__assert_fail@plt+0x1c0b4>
   2e6c4:	ldr	r3, [r7, #4]
   2e6c8:	ldr	r2, [r7, #8]
   2e6cc:	str	r6, [sp, #16]
   2e6d0:	str	r3, [sp, #32]
   2e6d4:	asr	r3, r2, #31
   2e6d8:	add	r1, sp, #312	; 0x138
   2e6dc:	strd	r2, [r1]
   2e6e0:	b	2dcb4 <__assert_fail@plt+0x1b6c0>
   2e6e4:	strb	r3, [r2]
   2e6e8:	ldrb	r3, [r2, #1]!
   2e6ec:	cmp	r3, #0
   2e6f0:	bne	2e670 <__assert_fail@plt+0x1c07c>
   2e6f4:	b	2e690 <__assert_fail@plt+0x1c09c>
   2e6f8:	add	ip, sp, #264	; 0x108
   2e6fc:	str	r6, [sp, #16]
   2e700:	sub	r4, ip, #12
   2e704:	mov	r1, r4
   2e708:	b	2e60c <__assert_fail@plt+0x1c018>
   2e70c:	ldrd	r0, [r8, #56]	; 0x38
   2e710:	add	r5, sp, #376	; 0x178
   2e714:	mvn	r2, #27
   2e718:	mov	r4, r5
   2e71c:	str	r8, [sp, #80]	; 0x50
   2e720:	ldrd	r6, [r8, #64]	; 0x40
   2e724:	ldr	ip, [r8, #64]	; 0x40
   2e728:	strd	r0, [r5, #-8]
   2e72c:	ldrd	r0, [r8, #80]	; 0x50
   2e730:	strd	r6, [r4], #-8
   2e734:	ldrd	r6, [r8, #88]	; 0x58
   2e738:	str	ip, [sp, #56]	; 0x38
   2e73c:	ldr	ip, [r8, #68]	; 0x44
   2e740:	strd	r0, [r4, #24]
   2e744:	ldr	r3, [sp, #16]
   2e748:	strd	r6, [r4, #32]
   2e74c:	ldrd	r0, [r8, #104]	; 0x68
   2e750:	str	ip, [sp, #48]	; 0x30
   2e754:	ldrd	r6, [r8, #72]	; 0x48
   2e758:	ldr	fp, [r8, #92]	; 0x5c
   2e75c:	strd	r0, [r4, #48]	; 0x30
   2e760:	ldr	r1, [r8, #72]	; 0x48
   2e764:	strd	r6, [r4, #16]
   2e768:	ldrd	r6, [r8, #96]	; 0x60
   2e76c:	str	r1, [sp, #60]	; 0x3c
   2e770:	ldr	r1, [r8, #76]	; 0x4c
   2e774:	mov	r0, r6
   2e778:	strd	r6, [r4, #40]	; 0x28
   2e77c:	str	r1, [sp, #64]	; 0x40
   2e780:	ldr	r1, [r8, #80]	; 0x50
   2e784:	str	r1, [sp, #72]	; 0x48
   2e788:	ldr	r1, [r8, #84]	; 0x54
   2e78c:	str	r1, [sp, #76]	; 0x4c
   2e790:	ldr	r1, [r8, #88]	; 0x58
   2e794:	str	r1, [sp, #68]	; 0x44
   2e798:	mov	r1, r7
   2e79c:	strd	r0, [sp, #24]
   2e7a0:	ldr	r1, [r8, #104]	; 0x68
   2e7a4:	str	r1, [sp, #40]	; 0x28
   2e7a8:	ldr	r1, [sp, #40]	; 0x28
   2e7ac:	str	fp, [r5, #28]
   2e7b0:	ldr	lr, [sp, #80]	; 0x50
   2e7b4:	ldrsh	ip, [r3]
   2e7b8:	str	r1, [sp, #416]	; 0x1a0
   2e7bc:	ldr	r1, [sp, #56]	; 0x38
   2e7c0:	add	r8, lr, #56	; 0x38
   2e7c4:	add	r9, ip, r9
   2e7c8:	cmp	r9, #112	; 0x70
   2e7cc:	str	r1, [r5]
   2e7d0:	ldr	r1, [sp, #48]	; 0x30
   2e7d4:	str	r1, [r5, #4]
   2e7d8:	ldr	r1, [sp, #60]	; 0x3c
   2e7dc:	str	r1, [r5, #8]
   2e7e0:	ldr	r1, [sp, #64]	; 0x40
   2e7e4:	str	r1, [r5, #12]
   2e7e8:	ldr	r1, [sp, #72]	; 0x48
   2e7ec:	str	r1, [r5, #16]
   2e7f0:	ldr	r1, [sp, #76]	; 0x4c
   2e7f4:	str	r1, [r5, #20]
   2e7f8:	ldr	r1, [sp, #68]	; 0x44
   2e7fc:	str	r1, [r5, #24]
   2e800:	ldrd	r0, [sp, #24]
   2e804:	strd	r0, [r5, #32]
   2e808:	ldrd	r0, [r4]
   2e80c:	ldrd	r6, [r4, #8]
   2e810:	strd	r0, [lr, #56]	; 0x38
   2e814:	ldrd	r0, [r4, #24]
   2e818:	strd	r6, [r8, #8]
   2e81c:	ldrd	r6, [r4, #32]
   2e820:	strd	r0, [sp, #16]
   2e824:	ldrd	r0, [r4, #16]
   2e828:	strd	r0, [r8, #16]
   2e82c:	ldrd	r0, [r4, #40]	; 0x28
   2e830:	strd	r0, [r8, #40]	; 0x28
   2e834:	ldrd	r0, [sp, #16]
   2e838:	strd	r0, [r8, #24]
   2e83c:	ldrd	r0, [r4, #48]	; 0x30
   2e840:	strd	r6, [r8, #32]
   2e844:	strd	r0, [r8, #48]	; 0x30
   2e848:	bhi	2e860 <__assert_fail@plt+0x1c26c>
   2e84c:	add	r9, sl, r9
   2e850:	movw	r1, #2076	; 0x81c
   2e854:	ldrsb	r1, [r9, r1]
   2e858:	cmp	r1, ip
   2e85c:	beq	302a0 <__assert_fail@plt+0x1dcac>
   2e860:	add	r2, sl, r2
   2e864:	movw	r1, #2636	; 0xa4c
   2e868:	ldrsb	r9, [r2, r1]
   2e86c:	b	2dd80 <__assert_fail@plt+0x1b78c>
   2e870:	mov	r2, #100	; 0x64
   2e874:	mul	r3, r2, r3
   2e878:	add	r3, r3, r3, lsl #2
   2e87c:	lsl	r3, r3, #1
   2e880:	add	r3, r3, r3, lsl #2
   2e884:	lsl	r3, r3, #1
   2e888:	add	r3, r3, r3, lsl #2
   2e88c:	lsl	r3, r3, #1
   2e890:	add	r3, r3, r3, lsl #2
   2e894:	lsl	r0, r3, #1
   2e898:	add	r0, r0, r0, lsl #2
   2e89c:	lsl	r3, r0, #1
   2e8a0:	cmn	r7, #1
   2e8a4:	bne	30330 <__assert_fail@plt+0x1dd3c>
   2e8a8:	ldrb	r2, [r1]
   2e8ac:	sub	r0, r2, #48	; 0x30
   2e8b0:	cmp	r0, #9
   2e8b4:	bhi	2e5a8 <__assert_fail@plt+0x1bfb4>
   2e8b8:	cmp	r2, #48	; 0x30
   2e8bc:	ldreq	r6, [sp, #16]
   2e8c0:	bne	2e8e0 <__assert_fail@plt+0x1c2ec>
   2e8c4:	ldrb	r2, [r1, #1]!
   2e8c8:	sub	r0, r2, #48	; 0x30
   2e8cc:	cmp	r0, #9
   2e8d0:	bhi	2e5a4 <__assert_fail@plt+0x1bfb0>
   2e8d4:	cmp	r2, #48	; 0x30
   2e8d8:	beq	2e8c4 <__assert_fail@plt+0x1c2d0>
   2e8dc:	str	r6, [sp, #16]
   2e8e0:	add	r3, r3, #1
   2e8e4:	b	2e580 <__assert_fail@plt+0x1bf8c>
   2e8e8:	ldr	r9, [sp, #36]	; 0x24
   2e8ec:	ldr	r1, [r8, #48]	; 0x30
   2e8f0:	ldrd	r6, [r9, #128]	; 0x80
   2e8f4:	ldrd	r2, [r9, #136]	; 0x88
   2e8f8:	ldr	r0, [r9, #144]	; 0x90
   2e8fc:	strd	r6, [sp, #80]	; 0x50
   2e900:	ldrd	r6, [r8, #40]	; 0x28
   2e904:	adds	r1, r0, r1
   2e908:	movvs	ip, #1
   2e90c:	movvc	ip, #0
   2e910:	adds	r0, r2, r6
   2e914:	str	r1, [r9, #144]	; 0x90
   2e918:	adcs	r1, r3, r7
   2e91c:	ldrd	r6, [r9, #120]	; 0x78
   2e920:	movvs	r3, #1
   2e924:	movvc	r3, #0
   2e928:	strd	r0, [r9, #136]	; 0x88
   2e92c:	orr	ip, ip, r3
   2e930:	ldrd	r0, [r8, #32]
   2e934:	strd	r6, [sp, #128]	; 0x80
   2e938:	ldrd	r6, [sp, #80]	; 0x50
   2e93c:	adds	r2, r6, r0
   2e940:	adcs	r3, r7, r1
   2e944:	ldrd	r6, [r9, #112]	; 0x70
   2e948:	movvs	lr, #1
   2e94c:	movvc	lr, #0
   2e950:	ldrd	r0, [r8, #24]
   2e954:	orr	ip, ip, lr
   2e958:	strd	r2, [r9, #128]	; 0x80
   2e95c:	strd	r6, [sp, #136]	; 0x88
   2e960:	ldrd	r6, [sp, #128]	; 0x80
   2e964:	adds	r2, r6, r0
   2e968:	adcs	r3, r7, r1
   2e96c:	ldrd	r6, [sp, #136]	; 0x88
   2e970:	movvs	r1, #1
   2e974:	movvc	r1, #0
   2e978:	orr	ip, ip, r1
   2e97c:	strd	r2, [r9, #120]	; 0x78
   2e980:	ldrd	r0, [r8, #16]
   2e984:	ldrd	r2, [r9, #104]	; 0x68
   2e988:	strd	r2, [sp, #80]	; 0x50
   2e98c:	adds	r2, r6, r0
   2e990:	adcs	r3, r7, r1
   2e994:	ldrd	r6, [r9, #96]	; 0x60
   2e998:	movvs	lr, #1
   2e99c:	movvc	lr, #0
   2e9a0:	ldrd	r0, [r8, #8]
   2e9a4:	orr	ip, ip, lr
   2e9a8:	strd	r2, [r9, #112]	; 0x70
   2e9ac:	strd	r6, [sp, #128]	; 0x80
   2e9b0:	ldrd	r6, [sp, #80]	; 0x50
   2e9b4:	adds	r2, r6, r0
   2e9b8:	adcs	r3, r7, r1
   2e9bc:	ldrd	r0, [r8]
   2e9c0:	movvs	lr, #1
   2e9c4:	movvc	lr, #0
   2e9c8:	ldrd	r6, [sp, #128]	; 0x80
   2e9cc:	strd	r2, [r9, #104]	; 0x68
   2e9d0:	adds	r2, r6, r0
   2e9d4:	adcs	r3, r7, r1
   2e9d8:	orrvc	ip, ip, lr
   2e9dc:	movvs	ip, #1
   2e9e0:	cmp	ip, #0
   2e9e4:	strd	r2, [r9, #96]	; 0x60
   2e9e8:	bne	2e19c <__assert_fail@plt+0x1bba8>
   2e9ec:	sub	r3, r8, #56	; 0x38
   2e9f0:	mov	r1, #1
   2e9f4:	mov	r2, #16
   2e9f8:	str	r3, [sp, #80]	; 0x50
   2e9fc:	ldr	r3, [sp, #16]
   2ea00:	strb	r1, [r9, #153]	; 0x99
   2ea04:	mvn	r9, #92	; 0x5c
   2ea08:	sub	r3, r3, #2
   2ea0c:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2ea10:	mov	r1, #0
   2ea14:	mov	r2, #56	; 0x38
   2ea18:	mov	r0, r4
   2ea1c:	mov	r6, r1
   2ea20:	mov	fp, r1
   2ea24:	str	r1, [sp, #68]	; 0x44
   2ea28:	bl	12378 <memset@plt>
   2ea2c:	ldr	r1, [r8, #-56]	; 0xffffffc8
   2ea30:	str	r6, [sp, #48]	; 0x30
   2ea34:	ldr	r2, [r8, #-52]	; 0xffffffcc
   2ea38:	ldr	r3, [sp, #16]
   2ea3c:	asr	r9, r1, #31
   2ea40:	str	r2, [sp, #40]	; 0x28
   2ea44:	sub	r2, r8, #112	; 0x70
   2ea48:	mov	r8, r1
   2ea4c:	str	r6, [sp, #56]	; 0x38
   2ea50:	sub	r3, r3, #4
   2ea54:	strd	r8, [sp, #24]
   2ea58:	mvn	r9, #92	; 0x5c
   2ea5c:	str	r6, [sp, #60]	; 0x3c
   2ea60:	str	r6, [sp, #64]	; 0x40
   2ea64:	str	r6, [sp, #72]	; 0x48
   2ea68:	str	r6, [sp, #76]	; 0x4c
   2ea6c:	str	r2, [sp, #80]	; 0x50
   2ea70:	mov	r2, #17
   2ea74:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2ea78:	ldrd	r0, [r8, #8]
   2ea7c:	sub	r2, r8, #112	; 0x70
   2ea80:	mov	r9, #43	; 0x2b
   2ea84:	ldr	r3, [sp, #16]
   2ea88:	str	r2, [sp, #80]	; 0x50
   2ea8c:	mov	r2, #25
   2ea90:	strd	r0, [r5, #-8]
   2ea94:	sub	r3, r3, #4
   2ea98:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2ea9c:	ldrd	r6, [r8, #-48]	; 0xffffffd0
   2eaa0:	mov	r1, #0
   2eaa4:	mov	r0, #0
   2eaa8:	mov	r2, #0
   2eaac:	mov	r9, r1
   2eab0:	ldr	r3, [sp, #16]
   2eab4:	sub	ip, r8, #112	; 0x70
   2eab8:	mov	fp, r1
   2eabc:	strd	r0, [sp, #24]
   2eac0:	str	r2, [sp, #40]	; 0x28
   2eac4:	strd	r6, [r5, #-8]
   2eac8:	str	fp, [sp, #48]	; 0x30
   2eacc:	sub	r3, r3, #4
   2ead0:	str	r0, [sp, #56]	; 0x38
   2ead4:	str	r0, [sp, #60]	; 0x3c
   2ead8:	str	r9, [sp, #64]	; 0x40
   2eadc:	str	r0, [sp, #68]	; 0x44
   2eae0:	str	r0, [sp, #72]	; 0x48
   2eae4:	str	r9, [sp, #76]	; 0x4c
   2eae8:	mov	r9, #60	; 0x3c
   2eaec:	str	ip, [sp, #80]	; 0x50
   2eaf0:	str	r2, [sp, #420]	; 0x1a4
   2eaf4:	mov	r2, #18
   2eaf8:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2eafc:	mov	r1, #0
   2eb00:	sub	r3, r8, #56	; 0x38
   2eb04:	mov	r2, #56	; 0x38
   2eb08:	mov	r0, r4
   2eb0c:	mov	r6, r1
   2eb10:	mov	fp, r1
   2eb14:	str	r1, [sp, #68]	; 0x44
   2eb18:	str	r3, [sp, #80]	; 0x50
   2eb1c:	mvn	r9, #92	; 0x5c
   2eb20:	bl	12378 <memset@plt>
   2eb24:	ldr	r3, [sp, #16]
   2eb28:	mov	r0, #1
   2eb2c:	mov	r1, #0
   2eb30:	mov	r2, #17
   2eb34:	strd	r0, [sp, #24]
   2eb38:	str	r6, [sp, #40]	; 0x28
   2eb3c:	str	r6, [sp, #48]	; 0x30
   2eb40:	sub	r3, r3, #2
   2eb44:	str	r6, [sp, #56]	; 0x38
   2eb48:	str	r6, [sp, #60]	; 0x3c
   2eb4c:	str	r6, [sp, #64]	; 0x40
   2eb50:	str	r6, [sp, #72]	; 0x48
   2eb54:	str	r6, [sp, #76]	; 0x4c
   2eb58:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2eb5c:	mvn	r0, #0
   2eb60:	mvn	r1, #0
   2eb64:	str	r8, [sp, #80]	; 0x50
   2eb68:	mov	r2, #25
   2eb6c:	mov	r9, #43	; 0x2b
   2eb70:	ldr	r3, [sp, #16]
   2eb74:	strd	r0, [r5, #-8]
   2eb78:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2eb7c:	ldrd	r0, [r8, #-56]	; 0xffffffc8
   2eb80:	ldr	r3, [r8]
   2eb84:	strd	r0, [sp, #80]	; 0x50
   2eb88:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   2eb8c:	cmp	r3, #0
   2eb90:	ldrd	r2, [r8, #-40]	; 0xffffffd8
   2eb94:	strd	r0, [sp, #128]	; 0x80
   2eb98:	strd	r2, [sp, #136]	; 0x88
   2eb9c:	ldrd	r2, [r8, #-32]	; 0xffffffe0
   2eba0:	strd	r2, [sp, #144]	; 0x90
   2eba4:	ldrd	r2, [r8, #-24]	; 0xffffffe8
   2eba8:	strd	r2, [sp, #152]	; 0x98
   2ebac:	ldrd	r2, [r8, #-16]
   2ebb0:	mov	r6, r2
   2ebb4:	ldr	r2, [sp, #36]	; 0x24
   2ebb8:	mov	r7, r3
   2ebbc:	ldr	r3, [r8, #-8]
   2ebc0:	ldrd	r0, [r2, #96]	; 0x60
   2ebc4:	strd	r0, [sp, #192]	; 0xc0
   2ebc8:	ldrd	r0, [r2, #104]	; 0x68
   2ebcc:	strd	r0, [sp, #184]	; 0xb8
   2ebd0:	ldrd	r0, [r2, #112]	; 0x70
   2ebd4:	strd	r0, [sp, #176]	; 0xb0
   2ebd8:	ldrd	r0, [r2, #120]	; 0x78
   2ebdc:	strd	r0, [sp, #168]	; 0xa8
   2ebe0:	ldrd	r0, [r2, #128]	; 0x80
   2ebe4:	strd	r0, [sp, #160]	; 0xa0
   2ebe8:	ldrd	r0, [r2, #136]	; 0x88
   2ebec:	ldr	r2, [r2, #144]	; 0x90
   2ebf0:	blt	305a4 <__assert_fail@plt+0x1dfb0>
   2ebf4:	adds	r9, r2, r3
   2ebf8:	mov	r3, r7
   2ebfc:	movvs	lr, #1
   2ec00:	movvc	lr, #0
   2ec04:	ldr	ip, [sp, #36]	; 0x24
   2ec08:	adds	r6, r0, r6
   2ec0c:	adcs	r7, r1, r7
   2ec10:	ldrd	r0, [sp, #160]	; 0xa0
   2ec14:	movvs	r3, #1
   2ec18:	movvc	r3, #0
   2ec1c:	strd	r6, [sp, #232]	; 0xe8
   2ec20:	ldrd	r6, [sp, #152]	; 0x98
   2ec24:	str	r3, [sp, #244]	; 0xf4
   2ec28:	str	r9, [ip, #144]	; 0x90
   2ec2c:	adds	r2, r0, r6
   2ec30:	adcs	r3, r1, r7
   2ec34:	ldrd	r0, [sp, #168]	; 0xa8
   2ec38:	movvs	r9, #1
   2ec3c:	movvc	r9, #0
   2ec40:	strd	r2, [sp, #152]	; 0x98
   2ec44:	ldrd	r6, [sp, #232]	; 0xe8
   2ec48:	ldr	r3, [sp, #244]	; 0xf4
   2ec4c:	strd	r6, [ip, #136]	; 0x88
   2ec50:	orr	lr, lr, r3
   2ec54:	ldrd	r2, [sp, #144]	; 0x90
   2ec58:	orr	lr, lr, r9
   2ec5c:	adds	r6, r0, r2
   2ec60:	adcs	r7, r1, r3
   2ec64:	ldrd	r2, [sp, #136]	; 0x88
   2ec68:	movvs	r9, #1
   2ec6c:	movvc	r9, #0
   2ec70:	strd	r6, [sp, #144]	; 0x90
   2ec74:	orr	lr, lr, r9
   2ec78:	ldrd	r0, [sp, #152]	; 0x98
   2ec7c:	ldrd	r6, [sp, #176]	; 0xb0
   2ec80:	strd	r0, [ip, #128]	; 0x80
   2ec84:	adds	r0, r6, r2
   2ec88:	adcs	r1, r7, r3
   2ec8c:	ldrd	r6, [sp, #144]	; 0x90
   2ec90:	movvs	r9, #1
   2ec94:	movvc	r9, #0
   2ec98:	strd	r0, [sp, #136]	; 0x88
   2ec9c:	orr	lr, lr, r9
   2eca0:	ldrd	r0, [sp, #128]	; 0x80
   2eca4:	ldrd	r2, [sp, #184]	; 0xb8
   2eca8:	strd	r6, [ip, #120]	; 0x78
   2ecac:	adds	r6, r2, r0
   2ecb0:	adcs	r7, r3, r1
   2ecb4:	ldrd	r2, [sp, #80]	; 0x50
   2ecb8:	movvs	r9, #1
   2ecbc:	movvc	r9, #0
   2ecc0:	strd	r6, [sp, #128]	; 0x80
   2ecc4:	ldrd	r0, [sp, #136]	; 0x88
   2ecc8:	ldrd	r6, [sp, #192]	; 0xc0
   2eccc:	strd	r0, [ip, #112]	; 0x70
   2ecd0:	adds	r0, r6, r2
   2ecd4:	adcs	r1, r7, r3
   2ecd8:	ldrd	r6, [sp, #128]	; 0x80
   2ecdc:	orrvc	r3, lr, r9
   2ece0:	movvs	r3, #1
   2ece4:	strd	r0, [ip, #96]	; 0x60
   2ece8:	strd	r6, [ip, #104]	; 0x68
   2ecec:	cmp	r3, #0
   2ecf0:	bne	2e19c <__assert_fail@plt+0x1bba8>
   2ecf4:	sub	r3, r8, #112	; 0x70
   2ecf8:	ldr	r0, [sp, #36]	; 0x24
   2ecfc:	mov	r1, #1
   2ed00:	mov	r2, #16
   2ed04:	mvn	r9, #92	; 0x5c
   2ed08:	str	r3, [sp, #80]	; 0x50
   2ed0c:	ldr	r3, [sp, #16]
   2ed10:	strb	r1, [r0, #153]	; 0x99
   2ed14:	sub	r3, r3, #4
   2ed18:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2ed1c:	mov	r1, #0
   2ed20:	mov	r2, #56	; 0x38
   2ed24:	mov	r0, r4
   2ed28:	mov	r6, r1
   2ed2c:	mov	fp, r1
   2ed30:	str	r1, [sp, #68]	; 0x44
   2ed34:	str	r1, [sp, #72]	; 0x48
   2ed38:	bl	12378 <memset@plt>
   2ed3c:	ldr	r3, [sp, #16]
   2ed40:	mov	r2, r6
   2ed44:	str	r6, [sp, #60]	; 0x3c
   2ed48:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   2ed4c:	sub	r3, r3, #4
   2ed50:	mvn	r9, #92	; 0x5c
   2ed54:	strd	r0, [sp, #24]
   2ed58:	str	r2, [sp, #56]	; 0x38
   2ed5c:	sub	r2, r8, #112	; 0x70
   2ed60:	str	fp, [sp, #40]	; 0x28
   2ed64:	str	fp, [sp, #48]	; 0x30
   2ed68:	str	fp, [sp, #64]	; 0x40
   2ed6c:	str	fp, [sp, #76]	; 0x4c
   2ed70:	str	r2, [sp, #80]	; 0x50
   2ed74:	mov	r2, #17
   2ed78:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2ed7c:	mov	r2, #56	; 0x38
   2ed80:	mov	r1, #0
   2ed84:	mov	r0, r4
   2ed88:	mov	r9, #0
   2ed8c:	bl	12378 <memset@plt>
   2ed90:	mov	r3, r8
   2ed94:	mov	fp, r9
   2ed98:	str	r9, [sp, #48]	; 0x30
   2ed9c:	ldrd	r0, [r3], #-56	; 0xffffffc8
   2eda0:	mov	r8, #0
   2eda4:	mov	r2, #19
   2eda8:	strd	r8, [sp, #24]
   2edac:	str	r8, [sp, #56]	; 0x38
   2edb0:	str	r8, [sp, #68]	; 0x44
   2edb4:	str	r8, [sp, #72]	; 0x48
   2edb8:	str	r3, [sp, #80]	; 0x50
   2edbc:	ldr	r3, [sp, #16]
   2edc0:	str	r9, [sp, #76]	; 0x4c
   2edc4:	sub	r3, r3, #2
   2edc8:	strd	r0, [sp, #60]	; 0x3c
   2edcc:	mov	r1, #0
   2edd0:	mvn	r9, #92	; 0x5c
   2edd4:	str	r1, [sp, #40]	; 0x28
   2edd8:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2eddc:	mov	r1, #0
   2ede0:	mov	r2, #56	; 0x38
   2ede4:	mov	r0, r4
   2ede8:	mov	r6, r1
   2edec:	mov	fp, r1
   2edf0:	str	r1, [sp, #68]	; 0x44
   2edf4:	mov	r9, #60	; 0x3c
   2edf8:	str	r1, [sp, #72]	; 0x48
   2edfc:	bl	12378 <memset@plt>
   2ee00:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   2ee04:	sub	r2, r8, #112	; 0x70
   2ee08:	ldr	r3, [sp, #16]
   2ee0c:	strd	r0, [sp, #24]
   2ee10:	str	r6, [sp, #40]	; 0x28
   2ee14:	sub	r3, r3, #4
   2ee18:	str	r6, [sp, #48]	; 0x30
   2ee1c:	str	r6, [sp, #56]	; 0x38
   2ee20:	str	r6, [sp, #60]	; 0x3c
   2ee24:	str	r6, [sp, #64]	; 0x40
   2ee28:	str	r6, [sp, #76]	; 0x4c
   2ee2c:	str	r2, [sp, #80]	; 0x50
   2ee30:	mov	r2, #18
   2ee34:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2ee38:	ldr	r3, [r8, #8]
   2ee3c:	mov	r1, #0
   2ee40:	mvn	r0, #0
   2ee44:	ldr	r2, [r8, #12]
   2ee48:	adds	ip, r3, #-2147483648	; 0x80000000
   2ee4c:	adc	r2, r2, #0
   2ee50:	str	ip, [sp, #216]	; 0xd8
   2ee54:	str	r2, [sp, #220]	; 0xdc
   2ee58:	ldrd	r6, [sp, #216]	; 0xd8
   2ee5c:	cmp	r7, r1
   2ee60:	cmpeq	r6, r0
   2ee64:	bhi	2e19c <__assert_fail@plt+0x1bba8>
   2ee68:	str	r3, [sp, #368]	; 0x170
   2ee6c:	sub	r2, r8, #56	; 0x38
   2ee70:	mov	r1, #0
   2ee74:	ldr	r3, [sp, #16]
   2ee78:	mvn	r9, #92	; 0x5c
   2ee7c:	str	r2, [sp, #80]	; 0x50
   2ee80:	mov	r2, #21
   2ee84:	str	r1, [sp, #372]	; 0x174
   2ee88:	sub	r3, r3, #2
   2ee8c:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2ee90:	ldrd	r2, [r8, #8]
   2ee94:	sub	r1, r8, #56	; 0x38
   2ee98:	mvn	r9, #92	; 0x5c
   2ee9c:	ldr	r0, [sp, #36]	; 0x24
   2eea0:	strd	r2, [sp]
   2eea4:	ldrd	r2, [r8, #16]
   2eea8:	str	r1, [sp, #80]	; 0x50
   2eeac:	strd	r2, [sp, #8]
   2eeb0:	ldm	r8, {r2, r3}
   2eeb4:	bl	2da98 <__assert_fail@plt+0x1b4a4>
   2eeb8:	ldr	r3, [sp, #16]
   2eebc:	mov	r2, #23
   2eec0:	sub	r3, r3, #2
   2eec4:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2eec8:	ldr	r3, [r8, #8]
   2eecc:	mov	r1, #0
   2eed0:	mvn	r0, #0
   2eed4:	ldr	r2, [r8, #12]
   2eed8:	adds	ip, r3, #-2147483648	; 0x80000000
   2eedc:	adc	r2, r2, #0
   2eee0:	str	ip, [sp, #224]	; 0xe0
   2eee4:	str	r2, [sp, #228]	; 0xe4
   2eee8:	ldrd	r6, [sp, #224]	; 0xe0
   2eeec:	cmp	r7, r1
   2eef0:	cmpeq	r6, r0
   2eef4:	bhi	2e19c <__assert_fail@plt+0x1bba8>
   2eef8:	str	r3, [sp, #368]	; 0x170
   2eefc:	sub	r2, r8, #56	; 0x38
   2ef00:	mov	r1, #0
   2ef04:	ldr	r3, [sp, #16]
   2ef08:	mvn	r9, #91	; 0x5b
   2ef0c:	str	r2, [sp, #80]	; 0x50
   2ef10:	mov	r2, #22
   2ef14:	str	r1, [sp, #372]	; 0x174
   2ef18:	sub	r3, r3, #2
   2ef1c:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2ef20:	mov	ip, #2
   2ef24:	sub	r1, r8, #272	; 0x110
   2ef28:	ldrd	r6, [r8, #-160]	; 0xffffff60
   2ef2c:	sub	r8, r8, #336	; 0x150
   2ef30:	mov	r9, #20
   2ef34:	ldr	lr, [sp, #36]	; 0x24
   2ef38:	ldrd	r0, [r1]
   2ef3c:	ldr	r3, [sp, #16]
   2ef40:	str	ip, [lr, #28]
   2ef44:	ldr	r2, [r8, #280]	; 0x118
   2ef48:	strd	r0, [lr, #72]	; 0x48
   2ef4c:	ldr	ip, [r8, #284]	; 0x11c
   2ef50:	sub	r3, r3, #12
   2ef54:	strd	r6, [lr, #80]	; 0x50
   2ef58:	str	r8, [sp, #80]	; 0x50
   2ef5c:	str	r2, [lr, #88]	; 0x58
   2ef60:	mov	r2, #8
   2ef64:	str	ip, [lr, #92]	; 0x5c
   2ef68:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2ef6c:	mov	r6, #0
   2ef70:	mov	r7, #0
   2ef74:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   2ef78:	mov	r2, #2
   2ef7c:	sub	lr, r8, #224	; 0xe0
   2ef80:	ldr	ip, [sp, #36]	; 0x24
   2ef84:	mov	r9, #20
   2ef88:	str	lr, [sp, #80]	; 0x50
   2ef8c:	ldr	r3, [sp, #16]
   2ef90:	str	r2, [ip, #28]
   2ef94:	mov	r2, #8
   2ef98:	strd	r6, [ip, #88]	; 0x58
   2ef9c:	ldrd	r6, [r8, #-160]	; 0xffffff60
   2efa0:	sub	r3, r3, #8
   2efa4:	strd	r6, [ip, #72]	; 0x48
   2efa8:	strd	r0, [ip, #80]	; 0x50
   2efac:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2efb0:	ldr	r7, [r8, #-48]	; 0xffffffd0
   2efb4:	ldr	r3, [r8, #-40]	; 0xffffffd8
   2efb8:	ldr	r9, [r8, #-44]	; 0xffffffd4
   2efbc:	cmp	r3, #2
   2efc0:	ldrd	r2, [r8]
   2efc4:	strd	r2, [sp, #80]	; 0x50
   2efc8:	bgt	30448 <__assert_fail@plt+0x1de54>
   2efcc:	cmp	r2, #0
   2efd0:	sbcs	r3, r3, #0
   2efd4:	blt	30994 <__assert_fail@plt+0x1e3a0>
   2efd8:	cmp	r9, r7, asr #31
   2efdc:	mov	lr, #0
   2efe0:	bne	30ae4 <__assert_fail@plt+0x1e4f0>
   2efe4:	mov	r2, #60	; 0x3c
   2efe8:	smull	r2, r3, r7, r2
   2efec:	mov	r6, r2
   2eff0:	ldrb	ip, [r8, #-56]	; 0xffffffc8
   2eff4:	mov	r0, r6
   2eff8:	mov	r1, r3
   2effc:	ldrd	r6, [sp, #80]	; 0x50
   2f000:	cmp	ip, #0
   2f004:	beq	30704 <__assert_fail@plt+0x1e110>
   2f008:	subs	r2, r0, r6
   2f00c:	mov	r1, #0
   2f010:	sbcs	r3, r3, r7
   2f014:	mov	r0, r2
   2f018:	movvs	r1, #1
   2f01c:	mov	r9, r3
   2f020:	orrs	r3, lr, r1
   2f024:	bne	2e19c <__assert_fail@plt+0x1bba8>
   2f028:	adds	r3, r0, #1440	; 0x5a0
   2f02c:	str	r3, [sp, #208]	; 0xd0
   2f030:	adc	r3, r9, #0
   2f034:	str	r3, [sp, #212]	; 0xd4
   2f038:	ldrd	r2, [sp, #208]	; 0xd0
   2f03c:	cmp	r3, #0
   2f040:	cmpeq	r2, #2880	; 0xb40
   2f044:	bhi	2e19c <__assert_fail@plt+0x1bba8>
   2f048:	rsb	r2, r0, r0, lsl #4
   2f04c:	ldrd	r6, [r8, #-112]	; 0xffffff90
   2f050:	lsl	r2, r2, #2
   2f054:	asr	r3, r2, #31
   2f058:	adds	r0, r2, r6
   2f05c:	adcs	r1, r3, r7
   2f060:	asr	r3, r0, #31
   2f064:	movvs	ip, #1
   2f068:	movvc	ip, #0
   2f06c:	cmp	r1, r3
   2f070:	ldr	r3, [sp, #36]	; 0x24
   2f074:	cmpeq	r0, r0
   2f078:	movne	ip, #1
   2f07c:	cmp	ip, #0
   2f080:	str	r0, [r3, #24]
   2f084:	bne	2e19c <__assert_fail@plt+0x1bba8>
   2f088:	sub	r3, r8, #168	; 0xa8
   2f08c:	mov	r2, #12
   2f090:	mvn	r9, #92	; 0x5c
   2f094:	str	r3, [sp, #80]	; 0x50
   2f098:	ldr	r3, [sp, #16]
   2f09c:	sub	r3, r3, #6
   2f0a0:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f0a4:	ldr	r9, [sp, #36]	; 0x24
   2f0a8:	movw	r3, #40336	; 0x9d90
   2f0ac:	movt	r3, #65535	; 0xffff
   2f0b0:	ldr	r1, [r8, #48]	; 0x30
   2f0b4:	ldrd	r6, [r9, #128]	; 0x80
   2f0b8:	str	r3, [r9, #24]
   2f0bc:	ldrd	r2, [r9, #136]	; 0x88
   2f0c0:	ldr	r0, [r9, #144]	; 0x90
   2f0c4:	strd	r6, [sp, #80]	; 0x50
   2f0c8:	ldrd	r6, [r8, #40]	; 0x28
   2f0cc:	adds	r1, r0, r1
   2f0d0:	movvs	ip, #1
   2f0d4:	movvc	ip, #0
   2f0d8:	adds	r0, r2, r6
   2f0dc:	str	r1, [r9, #144]	; 0x90
   2f0e0:	adcs	r1, r3, r7
   2f0e4:	ldrd	r6, [r9, #120]	; 0x78
   2f0e8:	movvs	r3, #1
   2f0ec:	movvc	r3, #0
   2f0f0:	strd	r0, [r9, #136]	; 0x88
   2f0f4:	orr	ip, ip, r3
   2f0f8:	ldrd	r0, [r8, #32]
   2f0fc:	strd	r6, [sp, #128]	; 0x80
   2f100:	ldrd	r6, [sp, #80]	; 0x50
   2f104:	adds	r2, r6, r0
   2f108:	adcs	r3, r7, r1
   2f10c:	ldrd	r6, [r9, #112]	; 0x70
   2f110:	movvs	lr, #1
   2f114:	movvc	lr, #0
   2f118:	ldrd	r0, [r8, #24]
   2f11c:	orr	ip, ip, lr
   2f120:	strd	r2, [r9, #128]	; 0x80
   2f124:	strd	r6, [sp, #136]	; 0x88
   2f128:	ldrd	r6, [sp, #128]	; 0x80
   2f12c:	adds	r2, r6, r0
   2f130:	adcs	r3, r7, r1
   2f134:	ldrd	r6, [sp, #136]	; 0x88
   2f138:	movvs	r1, #1
   2f13c:	movvc	r1, #0
   2f140:	orr	ip, ip, r1
   2f144:	strd	r2, [r9, #120]	; 0x78
   2f148:	ldrd	r0, [r8, #16]
   2f14c:	ldrd	r2, [r9, #104]	; 0x68
   2f150:	strd	r2, [sp, #80]	; 0x50
   2f154:	adds	r2, r6, r0
   2f158:	adcs	r3, r7, r1
   2f15c:	ldrd	r6, [r9, #96]	; 0x60
   2f160:	movvs	lr, #1
   2f164:	movvc	lr, #0
   2f168:	ldrd	r0, [r8, #8]
   2f16c:	orr	ip, ip, lr
   2f170:	strd	r2, [r9, #112]	; 0x70
   2f174:	strd	r6, [sp, #128]	; 0x80
   2f178:	ldrd	r6, [sp, #80]	; 0x50
   2f17c:	adds	r2, r6, r0
   2f180:	adcs	r3, r7, r1
   2f184:	ldrd	r0, [r8]
   2f188:	movvs	lr, #1
   2f18c:	movvc	lr, #0
   2f190:	ldrd	r6, [sp, #128]	; 0x80
   2f194:	strd	r2, [r9, #104]	; 0x68
   2f198:	adds	r2, r6, r0
   2f19c:	adcs	r3, r7, r1
   2f1a0:	orrvc	r0, ip, lr
   2f1a4:	movvs	r0, #1
   2f1a8:	cmp	r0, #0
   2f1ac:	strd	r2, [r9, #96]	; 0x60
   2f1b0:	bne	2e19c <__assert_fail@plt+0x1bba8>
   2f1b4:	mov	r3, #1
   2f1b8:	mov	r2, #5
   2f1bc:	movw	r1, #23220	; 0x5ab4
   2f1c0:	movt	r1, #5
   2f1c4:	strb	r3, [r9, #153]	; 0x99
   2f1c8:	sub	r3, r8, #112	; 0x70
   2f1cc:	mvn	r9, #92	; 0x5c
   2f1d0:	str	r3, [sp, #80]	; 0x50
   2f1d4:	bl	120b4 <dcgettext@plt>
   2f1d8:	ldr	r3, [sp, #16]
   2f1dc:	mov	r2, #12
   2f1e0:	sub	r3, r3, #4
   2f1e4:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f1e8:	sub	r3, r8, #56	; 0x38
   2f1ec:	ldr	r0, [sp, #36]	; 0x24
   2f1f0:	movw	r1, #40336	; 0x9d90
   2f1f4:	movt	r1, #65535	; 0xffff
   2f1f8:	mov	r2, #12
   2f1fc:	str	r3, [sp, #80]	; 0x50
   2f200:	mvn	r9, #92	; 0x5c
   2f204:	ldr	r3, [sp, #16]
   2f208:	str	r1, [r0, #24]
   2f20c:	sub	r3, r3, #2
   2f210:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f214:	ldr	r1, [r8], #-56	; 0xffffffc8
   2f218:	mov	r2, #12
   2f21c:	mvn	r9, #92	; 0x5c
   2f220:	ldr	r3, [sp, #16]
   2f224:	ldr	r0, [sp, #36]	; 0x24
   2f228:	str	r8, [sp, #80]	; 0x50
   2f22c:	sub	r3, r3, #2
   2f230:	str	r1, [r0, #24]
   2f234:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f238:	ldr	ip, [sp, #36]	; 0x24
   2f23c:	sub	r3, r8, #112	; 0x70
   2f240:	mov	r0, #1
   2f244:	mov	r2, #11
   2f248:	mvn	r9, #92	; 0x5c
   2f24c:	str	r3, [sp, #80]	; 0x50
   2f250:	ldr	r3, [sp, #16]
   2f254:	ldr	r1, [ip, #168]	; 0xa8
   2f258:	str	r0, [ip, #20]
   2f25c:	sub	r3, r3, #4
   2f260:	add	r1, r1, r0
   2f264:	str	r1, [ip, #168]	; 0xa8
   2f268:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f26c:	ldr	r1, [r8], #-56	; 0xffffffc8
   2f270:	mov	r2, #11
   2f274:	mvn	r9, #92	; 0x5c
   2f278:	ldr	r3, [sp, #16]
   2f27c:	ldr	r0, [sp, #36]	; 0x24
   2f280:	str	r8, [sp, #80]	; 0x50
   2f284:	sub	r3, r3, #2
   2f288:	str	r1, [r0, #20]
   2f28c:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f290:	ldr	r1, [sp, #36]	; 0x24
   2f294:	ldr	r7, [r8, #-48]	; 0xffffffd0
   2f298:	ldr	r2, [r8, #-40]	; 0xffffffd8
   2f29c:	ldr	r3, [r1, #176]	; 0xb0
   2f2a0:	ldr	r9, [r8, #-44]	; 0xffffffd4
   2f2a4:	cmp	r2, #2
   2f2a8:	add	r3, r3, #1
   2f2ac:	str	r3, [r1, #176]	; 0xb0
   2f2b0:	ldrd	r2, [r8]
   2f2b4:	strd	r2, [sp, #80]	; 0x50
   2f2b8:	bgt	304f4 <__assert_fail@plt+0x1df00>
   2f2bc:	cmp	r2, #0
   2f2c0:	sbcs	r3, r3, #0
   2f2c4:	blt	30834 <__assert_fail@plt+0x1e240>
   2f2c8:	cmp	r9, r7, asr #31
   2f2cc:	mov	lr, #0
   2f2d0:	bne	30a00 <__assert_fail@plt+0x1e40c>
   2f2d4:	mov	r2, #60	; 0x3c
   2f2d8:	smull	r2, r3, r7, r2
   2f2dc:	mov	r6, r2
   2f2e0:	ldrb	ip, [r8, #-56]	; 0xffffffc8
   2f2e4:	mov	r0, r6
   2f2e8:	mov	r1, r3
   2f2ec:	ldrd	r6, [sp, #80]	; 0x50
   2f2f0:	cmp	ip, #0
   2f2f4:	beq	306e8 <__assert_fail@plt+0x1e0f4>
   2f2f8:	subs	r2, r0, r6
   2f2fc:	mov	r1, #0
   2f300:	sbcs	r3, r3, r7
   2f304:	mov	r0, r2
   2f308:	movvs	r1, #1
   2f30c:	mov	r9, r3
   2f310:	orrs	r3, lr, r1
   2f314:	bne	2e19c <__assert_fail@plt+0x1bba8>
   2f318:	adds	r3, r0, #1440	; 0x5a0
   2f31c:	str	r3, [sp, #200]	; 0xc8
   2f320:	adc	r3, r9, #0
   2f324:	str	r3, [sp, #204]	; 0xcc
   2f328:	ldrd	r2, [sp, #200]	; 0xc8
   2f32c:	cmp	r3, #0
   2f330:	cmpeq	r2, #2880	; 0xb40
   2f334:	bhi	2e19c <__assert_fail@plt+0x1bba8>
   2f338:	sub	r3, r8, #112	; 0x70
   2f33c:	rsb	r1, r0, r0, lsl #4
   2f340:	ldr	r0, [sp, #36]	; 0x24
   2f344:	mov	r2, #10
   2f348:	mvn	r9, #26
   2f34c:	str	r3, [sp, #80]	; 0x50
   2f350:	lsl	r1, r1, #2
   2f354:	ldr	r3, [sp, #16]
   2f358:	str	r1, [r0, #24]
   2f35c:	sub	r3, r3, #4
   2f360:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f364:	mov	r6, #0
   2f368:	mov	r7, #0
   2f36c:	mov	r2, #56	; 0x38
   2f370:	mov	r1, #0
   2f374:	mov	r0, r4
   2f378:	strd	r6, [sp, #24]
   2f37c:	bl	12378 <memset@plt>
   2f380:	ldr	r2, [r8, #-48]	; 0xffffffd0
   2f384:	mov	r3, r6
   2f388:	mov	r1, r7
   2f38c:	str	r6, [sp, #56]	; 0x38
   2f390:	ldr	fp, [r8, #-44]	; 0xffffffd4
   2f394:	str	r6, [sp, #60]	; 0x3c
   2f398:	str	r7, [sp, #64]	; 0x40
   2f39c:	strd	r2, [sp, #68]	; 0x44
   2f3a0:	ldr	r3, [sp, #16]
   2f3a4:	str	r7, [sp, #76]	; 0x4c
   2f3a8:	sub	r3, r3, #4
   2f3ac:	str	r1, [sp, #48]	; 0x30
   2f3b0:	sub	r2, r8, #112	; 0x70
   2f3b4:	mov	r1, #0
   2f3b8:	mov	r9, #60	; 0x3c
   2f3bc:	str	r1, [sp, #40]	; 0x28
   2f3c0:	str	r2, [sp, #80]	; 0x50
   2f3c4:	mov	r2, #18
   2f3c8:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f3cc:	mov	r6, #0
   2f3d0:	mov	r7, #0
   2f3d4:	mov	r2, #56	; 0x38
   2f3d8:	mov	r1, #0
   2f3dc:	mov	r0, r4
   2f3e0:	strd	r6, [sp, #24]
   2f3e4:	mov	fp, r7
   2f3e8:	bl	12378 <memset@plt>
   2f3ec:	ldr	r2, [r8, #-48]	; 0xffffffd0
   2f3f0:	mov	r1, r7
   2f3f4:	str	r6, [sp, #56]	; 0x38
   2f3f8:	ldr	r3, [sp, #16]
   2f3fc:	str	r6, [sp, #60]	; 0x3c
   2f400:	str	r7, [sp, #64]	; 0x40
   2f404:	str	r6, [sp, #68]	; 0x44
   2f408:	str	r2, [sp, #72]	; 0x48
   2f40c:	ldr	r2, [r8, #-44]	; 0xffffffd4
   2f410:	sub	r3, r3, #4
   2f414:	str	r2, [sp, #76]	; 0x4c
   2f418:	b	2f3ac <__assert_fail@plt+0x1cdb8>
   2f41c:	mov	r2, #56	; 0x38
   2f420:	mov	r1, #0
   2f424:	mov	r0, r4
   2f428:	mov	fp, #0
   2f42c:	bl	12378 <memset@plt>
   2f430:	ldr	r0, [r8, #-48]	; 0xffffffd0
   2f434:	ldr	ip, [r8, #-44]	; 0xffffffd4
   2f438:	ldrd	r2, [r8]
   2f43c:	cmp	ip, r0, asr #31
   2f440:	asr	r1, r2, #31
   2f444:	bne	309bc <__assert_fail@plt+0x1e3c8>
   2f448:	cmp	r1, r3
   2f44c:	bne	308b4 <__assert_fail@plt+0x1e2c0>
   2f450:	smull	r2, r3, r0, r2
   2f454:	strd	r2, [sp, #120]	; 0x78
   2f458:	ldrd	r0, [sp, #120]	; 0x78
   2f45c:	subs	r2, fp, #0
   2f460:	str	r0, [sp, #60]	; 0x3c
   2f464:	str	r1, [sp, #64]	; 0x40
   2f468:	bne	2e19c <__assert_fail@plt+0x1bba8>
   2f46c:	sub	r3, r8, #112	; 0x70
   2f470:	mov	r0, #0
   2f474:	str	r2, [sp, #40]	; 0x28
   2f478:	mov	r1, #0
   2f47c:	mov	r9, #60	; 0x3c
   2f480:	mov	fp, r1
   2f484:	mov	r2, #18
   2f488:	str	r3, [sp, #80]	; 0x50
   2f48c:	ldr	r3, [sp, #16]
   2f490:	strd	r0, [sp, #24]
   2f494:	str	r1, [sp, #48]	; 0x30
   2f498:	str	r0, [sp, #56]	; 0x38
   2f49c:	str	r0, [sp, #68]	; 0x44
   2f4a0:	sub	r3, r3, #4
   2f4a4:	str	r0, [sp, #72]	; 0x48
   2f4a8:	str	r1, [sp, #76]	; 0x4c
   2f4ac:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f4b0:	mov	r6, #0
   2f4b4:	mov	r7, #0
   2f4b8:	mov	r2, #56	; 0x38
   2f4bc:	mov	r1, #0
   2f4c0:	mov	r0, r4
   2f4c4:	strd	r6, [sp, #24]
   2f4c8:	mov	fp, r7
   2f4cc:	bl	12378 <memset@plt>
   2f4d0:	ldr	r2, [r8, #-48]	; 0xffffffd0
   2f4d4:	ldr	r3, [sp, #16]
   2f4d8:	str	r2, [sp, #56]	; 0x38
   2f4dc:	ldr	r2, [r8, #-44]	; 0xffffffd4
   2f4e0:	sub	r3, r3, #4
   2f4e4:	str	r2, [sp, #48]	; 0x30
   2f4e8:	str	r6, [sp, #60]	; 0x3c
   2f4ec:	str	r7, [sp, #64]	; 0x40
   2f4f0:	str	r6, [sp, #68]	; 0x44
   2f4f4:	str	r6, [sp, #72]	; 0x48
   2f4f8:	str	r7, [sp, #76]	; 0x4c
   2f4fc:	b	2f3b0 <__assert_fail@plt+0x1cdbc>
   2f500:	mov	r6, #0
   2f504:	mov	r7, #0
   2f508:	mov	r2, #56	; 0x38
   2f50c:	mov	r1, #0
   2f510:	mov	r0, r4
   2f514:	strd	r6, [sp, #24]
   2f518:	mov	fp, r7
   2f51c:	bl	12378 <memset@plt>
   2f520:	ldr	r2, [r8, #-56]	; 0xffffffc8
   2f524:	str	r7, [sp, #48]	; 0x30
   2f528:	ldr	r3, [sp, #16]
   2f52c:	str	r6, [sp, #56]	; 0x38
   2f530:	str	r6, [sp, #60]	; 0x3c
   2f534:	str	r7, [sp, #64]	; 0x40
   2f538:	str	r2, [sp, #72]	; 0x48
   2f53c:	ldr	r2, [r8, #-52]	; 0xffffffcc
   2f540:	sub	r3, r3, #4
   2f544:	str	r6, [sp, #68]	; 0x44
   2f548:	str	r2, [sp, #76]	; 0x4c
   2f54c:	sub	r2, r8, #112	; 0x70
   2f550:	mov	r1, #0
   2f554:	mvn	r9, #92	; 0x5c
   2f558:	str	r1, [sp, #40]	; 0x28
   2f55c:	str	r2, [sp, #80]	; 0x50
   2f560:	mov	r2, #17
   2f564:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f568:	mov	r2, #56	; 0x38
   2f56c:	mov	r1, #0
   2f570:	mov	r0, r4
   2f574:	mov	r9, #0
   2f578:	bl	12378 <memset@plt>
   2f57c:	mov	r3, r8
   2f580:	mov	r8, #0
   2f584:	ldrd	r0, [r3], #-56	; 0xffffffc8
   2f588:	mov	fp, r9
   2f58c:	mov	r2, #17
   2f590:	strd	r8, [sp, #24]
   2f594:	str	r9, [sp, #48]	; 0x30
   2f598:	str	r8, [sp, #56]	; 0x38
   2f59c:	str	r8, [sp, #68]	; 0x44
   2f5a0:	str	r8, [sp, #72]	; 0x48
   2f5a4:	str	r3, [sp, #80]	; 0x50
   2f5a8:	ldr	r3, [sp, #16]
   2f5ac:	str	r9, [sp, #76]	; 0x4c
   2f5b0:	sub	r3, r3, #2
   2f5b4:	b	2edc8 <__assert_fail@plt+0x1c7d4>
   2f5b8:	mov	r2, #56	; 0x38
   2f5bc:	mov	r1, #0
   2f5c0:	mov	r0, r4
   2f5c4:	mov	fp, #0
   2f5c8:	bl	12378 <memset@plt>
   2f5cc:	ldr	r0, [r8, #-48]	; 0xffffffd0
   2f5d0:	ldr	ip, [r8, #-44]	; 0xffffffd4
   2f5d4:	ldrd	r2, [r8]
   2f5d8:	cmp	ip, r0, asr #31
   2f5dc:	asr	r1, r2, #31
   2f5e0:	bne	307b0 <__assert_fail@plt+0x1e1bc>
   2f5e4:	cmp	r1, r3
   2f5e8:	bne	30720 <__assert_fail@plt+0x1e12c>
   2f5ec:	smull	r2, r3, r0, r2
   2f5f0:	strd	r2, [sp, #112]	; 0x70
   2f5f4:	ldrd	r0, [sp, #112]	; 0x70
   2f5f8:	subs	r2, fp, #0
   2f5fc:	str	r0, [sp, #60]	; 0x3c
   2f600:	str	r1, [sp, #64]	; 0x40
   2f604:	bne	2e19c <__assert_fail@plt+0x1bba8>
   2f608:	sub	r3, r8, #112	; 0x70
   2f60c:	mov	r0, #0
   2f610:	str	r2, [sp, #40]	; 0x28
   2f614:	mov	r1, #0
   2f618:	str	r3, [sp, #80]	; 0x50
   2f61c:	ldr	r3, [sp, #16]
   2f620:	strd	r0, [sp, #24]
   2f624:	sub	r3, r3, #4
   2f628:	mov	fp, r1
   2f62c:	str	r0, [sp, #68]	; 0x44
   2f630:	str	r0, [sp, #72]	; 0x48
   2f634:	str	r1, [sp, #76]	; 0x4c
   2f638:	mvn	r9, #92	; 0x5c
   2f63c:	mov	r2, #17
   2f640:	str	r1, [sp, #48]	; 0x30
   2f644:	str	r0, [sp, #56]	; 0x38
   2f648:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f64c:	andeq	r5, r5, r8, asr r0
   2f650:	muleq	r5, r4, r0
   2f654:	andeq	r5, r5, r0, asr #3
   2f658:	strdeq	r5, [r5], -r0
   2f65c:	mov	r2, #56	; 0x38
   2f660:	mov	r1, #0
   2f664:	mov	r0, r4
   2f668:	bl	12378 <memset@plt>
   2f66c:	mov	r3, #0
   2f670:	ldr	r9, [r8, #-56]	; 0xffffffc8
   2f674:	str	r3, [sp, #40]	; 0x28
   2f678:	ldr	r3, [r8, #-52]	; 0xffffffcc
   2f67c:	ldr	r2, [r8]
   2f680:	mov	r1, r3
   2f684:	cmp	r3, r9, asr #31
   2f688:	ldr	r3, [r8, #4]
   2f68c:	str	r1, [sp, #24]
   2f690:	asr	r1, r2, #31
   2f694:	bne	30894 <__assert_fail@plt+0x1e2a0>
   2f698:	cmp	r1, r3
   2f69c:	bne	307cc <__assert_fail@plt+0x1e1d8>
   2f6a0:	smull	r2, r3, r9, r2
   2f6a4:	strd	r2, [sp, #104]	; 0x68
   2f6a8:	ldr	r2, [sp, #40]	; 0x28
   2f6ac:	ldrd	r0, [sp, #104]	; 0x68
   2f6b0:	cmp	r2, #0
   2f6b4:	str	r0, [sp, #60]	; 0x3c
   2f6b8:	str	r1, [sp, #64]	; 0x40
   2f6bc:	bne	2e19c <__assert_fail@plt+0x1bba8>
   2f6c0:	sub	r3, r8, #112	; 0x70
   2f6c4:	mov	r0, #0
   2f6c8:	mov	r1, #0
   2f6cc:	str	r3, [sp, #80]	; 0x50
   2f6d0:	ldr	r3, [sp, #16]
   2f6d4:	strd	r0, [sp, #24]
   2f6d8:	sub	r3, r3, #4
   2f6dc:	b	2f628 <__assert_fail@plt+0x1d034>
   2f6e0:	mov	r1, #0
   2f6e4:	mov	r2, #56	; 0x38
   2f6e8:	mov	r0, r4
   2f6ec:	mov	r6, r1
   2f6f0:	mov	fp, r1
   2f6f4:	str	r1, [sp, #68]	; 0x44
   2f6f8:	str	r1, [sp, #72]	; 0x48
   2f6fc:	bl	12378 <memset@plt>
   2f700:	ldr	r3, [sp, #16]
   2f704:	mov	r2, r6
   2f708:	str	r6, [sp, #60]	; 0x3c
   2f70c:	ldrd	r0, [r8, #-56]	; 0xffffffc8
   2f710:	sub	r3, r3, #4
   2f714:	b	2ed50 <__assert_fail@plt+0x1c75c>
   2f718:	mov	r6, #0
   2f71c:	mov	r7, #0
   2f720:	sub	r3, r8, #56	; 0x38
   2f724:	mov	r2, #56	; 0x38
   2f728:	mov	r1, #0
   2f72c:	mov	r0, r4
   2f730:	strd	r6, [sp, #24]
   2f734:	str	r6, [sp, #72]	; 0x48
   2f738:	mov	fp, #0
   2f73c:	mvn	r9, #92	; 0x5c
   2f740:	str	r3, [sp, #80]	; 0x50
   2f744:	bl	12378 <memset@plt>
   2f748:	ldr	r3, [sp, #16]
   2f74c:	mov	r1, #0
   2f750:	mov	r2, #17
   2f754:	str	r1, [sp, #40]	; 0x28
   2f758:	mov	r1, #1
   2f75c:	str	r7, [sp, #48]	; 0x30
   2f760:	str	r6, [sp, #56]	; 0x38
   2f764:	sub	r3, r3, #2
   2f768:	str	r6, [sp, #60]	; 0x3c
   2f76c:	str	r7, [sp, #64]	; 0x40
   2f770:	str	r1, [sp, #68]	; 0x44
   2f774:	str	r7, [sp, #76]	; 0x4c
   2f778:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f77c:	mov	r6, #0
   2f780:	mov	r7, #0
   2f784:	sub	r3, r8, #56	; 0x38
   2f788:	mov	r2, #56	; 0x38
   2f78c:	mov	r1, #0
   2f790:	mov	r0, r4
   2f794:	strd	r6, [sp, #24]
   2f798:	str	r6, [sp, #68]	; 0x44
   2f79c:	mov	fp, r7
   2f7a0:	mvn	r9, #92	; 0x5c
   2f7a4:	str	r3, [sp, #80]	; 0x50
   2f7a8:	bl	12378 <memset@plt>
   2f7ac:	mov	r1, #0
   2f7b0:	ldr	r3, [sp, #16]
   2f7b4:	mov	r2, #17
   2f7b8:	str	r1, [sp, #40]	; 0x28
   2f7bc:	mov	r1, #1
   2f7c0:	str	r1, [sp, #56]	; 0x38
   2f7c4:	mov	r1, #0
   2f7c8:	sub	r3, r3, #2
   2f7cc:	str	r1, [sp, #48]	; 0x30
   2f7d0:	str	r6, [sp, #60]	; 0x3c
   2f7d4:	str	r7, [sp, #64]	; 0x40
   2f7d8:	str	r6, [sp, #72]	; 0x48
   2f7dc:	str	r7, [sp, #76]	; 0x4c
   2f7e0:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f7e4:	mov	r6, #0
   2f7e8:	mov	r7, #0
   2f7ec:	mov	r2, #56	; 0x38
   2f7f0:	mov	r1, #0
   2f7f4:	mov	r0, r4
   2f7f8:	strd	r6, [sp, #24]
   2f7fc:	mov	fp, r7
   2f800:	bl	12378 <memset@plt>
   2f804:	ldr	r2, [r8, #-48]	; 0xffffffd0
   2f808:	mov	r1, r7
   2f80c:	ldr	r3, [sp, #16]
   2f810:	str	r2, [sp, #56]	; 0x38
   2f814:	ldr	r2, [r8, #-44]	; 0xffffffd4
   2f818:	sub	r3, r3, #4
   2f81c:	str	r6, [sp, #60]	; 0x3c
   2f820:	str	r6, [sp, #68]	; 0x44
   2f824:	str	r6, [sp, #72]	; 0x48
   2f828:	str	r7, [sp, #76]	; 0x4c
   2f82c:	str	r2, [sp, #48]	; 0x30
   2f830:	str	r1, [sp, #64]	; 0x40
   2f834:	b	2f54c <__assert_fail@plt+0x1cf58>
   2f838:	ldr	lr, [sp, #36]	; 0x24
   2f83c:	sub	r3, r8, #56	; 0x38
   2f840:	mov	r2, #5
   2f844:	movw	r1, #23176	; 0x5a88
   2f848:	movt	r1, #5
   2f84c:	str	r3, [sp, #80]	; 0x50
   2f850:	mov	r0, #0
   2f854:	mvn	r9, #92	; 0x5c
   2f858:	ldr	ip, [lr, #156]	; 0x9c
   2f85c:	ldr	r3, [lr, #172]	; 0xac
   2f860:	add	ip, ip, #1
   2f864:	add	r3, r3, #1
   2f868:	str	ip, [lr, #156]	; 0x9c
   2f86c:	str	r3, [lr, #172]	; 0xac
   2f870:	bl	120b4 <dcgettext@plt>
   2f874:	ldr	r3, [sp, #16]
   2f878:	mov	r2, #4
   2f87c:	sub	r3, r3, #2
   2f880:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f884:	mov	r2, r8
   2f888:	ldr	ip, [sp, #36]	; 0x24
   2f88c:	mov	r3, #1
   2f890:	mvn	r9, #92	; 0x5c
   2f894:	ldrd	r0, [r2], #-112	; 0xffffff90
   2f898:	strb	r3, [ip, #152]	; 0x98
   2f89c:	mov	r6, r0
   2f8a0:	mov	r7, r1
   2f8a4:	str	r2, [sp, #80]	; 0x50
   2f8a8:	movw	r1, #23156	; 0x5a74
   2f8ac:	movt	r1, #5
   2f8b0:	mov	r2, #5
   2f8b4:	mov	r0, #0
   2f8b8:	strd	r6, [ip, #88]	; 0x58
   2f8bc:	bl	120b4 <dcgettext@plt>
   2f8c0:	ldr	r3, [sp, #16]
   2f8c4:	mov	r2, #2
   2f8c8:	sub	r3, r3, #4
   2f8cc:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f8d0:	mov	r6, #0
   2f8d4:	mov	r7, #0
   2f8d8:	mov	r2, #56	; 0x38
   2f8dc:	mov	r1, #0
   2f8e0:	mov	r0, r4
   2f8e4:	strd	r6, [sp, #24]
   2f8e8:	bl	12378 <memset@plt>
   2f8ec:	ldr	r2, [r8, #-48]	; 0xffffffd0
   2f8f0:	mov	r3, r6
   2f8f4:	str	r7, [sp, #48]	; 0x30
   2f8f8:	str	r6, [sp, #56]	; 0x38
   2f8fc:	str	r6, [sp, #60]	; 0x3c
   2f900:	str	r7, [sp, #64]	; 0x40
   2f904:	strd	r2, [sp, #68]	; 0x44
   2f908:	ldr	r3, [sp, #16]
   2f90c:	str	r7, [sp, #76]	; 0x4c
   2f910:	ldr	fp, [r8, #-44]	; 0xffffffd4
   2f914:	sub	r3, r3, #4
   2f918:	b	2f54c <__assert_fail@plt+0x1cf58>
   2f91c:	mov	r6, #0
   2f920:	mov	r7, #0
   2f924:	mov	r2, #56	; 0x38
   2f928:	mov	r1, #0
   2f92c:	mov	r0, r4
   2f930:	strd	r6, [sp, #24]
   2f934:	bl	12378 <memset@plt>
   2f938:	ldr	r2, [r8, #-56]	; 0xffffffc8
   2f93c:	mov	r3, r6
   2f940:	str	r7, [sp, #48]	; 0x30
   2f944:	str	r6, [sp, #56]	; 0x38
   2f948:	str	r6, [sp, #60]	; 0x3c
   2f94c:	str	r7, [sp, #64]	; 0x40
   2f950:	strd	r2, [sp, #68]	; 0x44
   2f954:	ldr	r3, [sp, #16]
   2f958:	str	r7, [sp, #76]	; 0x4c
   2f95c:	ldr	fp, [r8, #-52]	; 0xffffffcc
   2f960:	sub	r3, r3, #4
   2f964:	b	2f54c <__assert_fail@plt+0x1cf58>
   2f968:	mov	r6, #0
   2f96c:	mov	r7, #0
   2f970:	sub	r3, r8, #56	; 0x38
   2f974:	mov	r2, #56	; 0x38
   2f978:	mov	r1, #0
   2f97c:	mov	r0, r4
   2f980:	strd	r6, [sp, #24]
   2f984:	str	r6, [sp, #68]	; 0x44
   2f988:	mov	fp, r7
   2f98c:	mvn	r9, #92	; 0x5c
   2f990:	str	r3, [sp, #80]	; 0x50
   2f994:	bl	12378 <memset@plt>
   2f998:	ldr	r3, [sp, #16]
   2f99c:	mov	r1, #0
   2f9a0:	mov	r2, #17
   2f9a4:	str	r7, [sp, #48]	; 0x30
   2f9a8:	str	r6, [sp, #56]	; 0x38
   2f9ac:	str	r6, [sp, #60]	; 0x3c
   2f9b0:	mov	r6, #1
   2f9b4:	str	r7, [sp, #64]	; 0x40
   2f9b8:	mov	r7, #0
   2f9bc:	sub	r3, r3, #2
   2f9c0:	str	r1, [sp, #40]	; 0x28
   2f9c4:	strd	r6, [sp, #72]	; 0x48
   2f9c8:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2f9cc:	mov	r6, #0
   2f9d0:	mov	r7, #0
   2f9d4:	mov	r2, #56	; 0x38
   2f9d8:	mov	r1, #0
   2f9dc:	mov	r0, r4
   2f9e0:	strd	r6, [sp, #24]
   2f9e4:	mov	fp, r7
   2f9e8:	bl	12378 <memset@plt>
   2f9ec:	ldr	r2, [r8, #-48]	; 0xffffffd0
   2f9f0:	str	r7, [sp, #48]	; 0x30
   2f9f4:	ldr	r3, [sp, #16]
   2f9f8:	str	r6, [sp, #56]	; 0x38
   2f9fc:	str	r6, [sp, #60]	; 0x3c
   2fa00:	str	r7, [sp, #64]	; 0x40
   2fa04:	str	r2, [sp, #72]	; 0x48
   2fa08:	ldr	r2, [r8, #-44]	; 0xffffffd4
   2fa0c:	sub	r3, r3, #4
   2fa10:	str	r6, [sp, #68]	; 0x44
   2fa14:	str	r2, [sp, #76]	; 0x4c
   2fa18:	b	2f54c <__assert_fail@plt+0x1cf58>
   2fa1c:	ldr	ip, [sp, #36]	; 0x24
   2fa20:	sub	lr, r8, #56	; 0x38
   2fa24:	mov	r2, #5
   2fa28:	movw	r1, #23208	; 0x5aa8
   2fa2c:	movt	r1, #5
   2fa30:	mov	r0, #0
   2fa34:	str	lr, [sp, #80]	; 0x50
   2fa38:	mvn	r9, #92	; 0x5c
   2fa3c:	ldr	r3, [ip, #156]	; 0x9c
   2fa40:	add	r3, r3, #1
   2fa44:	str	r3, [ip, #156]	; 0x9c
   2fa48:	bl	120b4 <dcgettext@plt>
   2fa4c:	ldr	r3, [sp, #16]
   2fa50:	mov	r2, #4
   2fa54:	sub	r3, r3, #2
   2fa58:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fa5c:	ldr	ip, [sp, #36]	; 0x24
   2fa60:	sub	lr, r8, #56	; 0x38
   2fa64:	mov	r2, #5
   2fa68:	movw	r1, #23200	; 0x5aa0
   2fa6c:	movt	r1, #5
   2fa70:	mov	r0, #0
   2fa74:	str	lr, [sp, #80]	; 0x50
   2fa78:	mvn	r9, #92	; 0x5c
   2fa7c:	ldr	r3, [ip, #176]	; 0xb0
   2fa80:	add	r3, r3, #1
   2fa84:	str	r3, [ip, #176]	; 0xb0
   2fa88:	bl	120b4 <dcgettext@plt>
   2fa8c:	ldr	r3, [sp, #16]
   2fa90:	mov	r2, #4
   2fa94:	sub	r3, r3, #2
   2fa98:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fa9c:	ldr	ip, [sp, #36]	; 0x24
   2faa0:	sub	lr, r8, #56	; 0x38
   2faa4:	mov	r2, #5
   2faa8:	movw	r1, #23188	; 0x5a94
   2faac:	movt	r1, #5
   2fab0:	mov	r0, #0
   2fab4:	str	lr, [sp, #80]	; 0x50
   2fab8:	mvn	r9, #92	; 0x5c
   2fabc:	ldr	r3, [ip, #164]	; 0xa4
   2fac0:	add	r3, r3, #1
   2fac4:	str	r3, [ip, #164]	; 0xa4
   2fac8:	bl	120b4 <dcgettext@plt>
   2facc:	ldr	r3, [sp, #16]
   2fad0:	mov	r2, #4
   2fad4:	sub	r3, r3, #2
   2fad8:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fadc:	ldr	ip, [sp, #36]	; 0x24
   2fae0:	sub	lr, r8, #56	; 0x38
   2fae4:	mov	r2, #5
   2fae8:	movw	r1, #23180	; 0x5a8c
   2faec:	movt	r1, #5
   2faf0:	mov	r0, #0
   2faf4:	str	lr, [sp, #80]	; 0x50
   2faf8:	mvn	r9, #92	; 0x5c
   2fafc:	ldr	r3, [ip, #172]	; 0xac
   2fb00:	add	r3, r3, #1
   2fb04:	str	r3, [ip, #172]	; 0xac
   2fb08:	bl	120b4 <dcgettext@plt>
   2fb0c:	ldr	r3, [sp, #16]
   2fb10:	mov	r2, #4
   2fb14:	sub	r3, r3, #2
   2fb18:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fb1c:	sub	lr, r8, #112	; 0x70
   2fb20:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   2fb24:	mov	r2, #0
   2fb28:	mov	ip, #2
   2fb2c:	mov	r6, #0
   2fb30:	str	lr, [sp, #80]	; 0x50
   2fb34:	mov	r7, #0
   2fb38:	mov	r9, #20
   2fb3c:	ldr	r3, [sp, #16]
   2fb40:	ldr	lr, [sp, #36]	; 0x24
   2fb44:	sub	r3, r3, #4
   2fb48:	str	ip, [lr, #28]
   2fb4c:	strd	r0, [lr, #72]	; 0x48
   2fb50:	strd	r6, [lr, #80]	; 0x50
   2fb54:	str	r2, [lr, #88]	; 0x58
   2fb58:	str	r2, [lr, #92]	; 0x5c
   2fb5c:	mov	r2, #8
   2fb60:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fb64:	mov	lr, r8
   2fb68:	sub	r2, r8, #272	; 0x110
   2fb6c:	ldrd	r6, [r8, #-160]	; 0xffffff60
   2fb70:	mvn	r9, #92	; 0x5c
   2fb74:	ldrd	r0, [r2]
   2fb78:	ldr	r2, [lr], #-336	; 0xfffffeb0
   2fb7c:	ldr	ip, [r8, #-56]	; 0xffffffc8
   2fb80:	ldr	r3, [sp, #16]
   2fb84:	str	lr, [sp, #80]	; 0x50
   2fb88:	ldr	lr, [sp, #36]	; 0x24
   2fb8c:	sub	r3, r3, #12
   2fb90:	str	r2, [lr, #28]
   2fb94:	mov	r2, #7
   2fb98:	strd	r0, [lr, #72]	; 0x48
   2fb9c:	ldr	r1, [r8, #-52]	; 0xffffffcc
   2fba0:	strd	r6, [lr, #80]	; 0x50
   2fba4:	str	ip, [lr, #88]	; 0x58
   2fba8:	str	r1, [lr, #92]	; 0x5c
   2fbac:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fbb0:	mov	r6, #0
   2fbb4:	mov	r7, #0
   2fbb8:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   2fbbc:	mov	r2, r8
   2fbc0:	mvn	r9, #92	; 0x5c
   2fbc4:	ldr	lr, [sp, #36]	; 0x24
   2fbc8:	ldr	ip, [r2], #-224	; 0xffffff20
   2fbcc:	ldr	r3, [sp, #16]
   2fbd0:	strd	r6, [lr, #88]	; 0x58
   2fbd4:	ldrd	r6, [r8, #-160]	; 0xffffff60
   2fbd8:	str	ip, [lr, #28]
   2fbdc:	sub	r3, r3, #8
   2fbe0:	str	r2, [sp, #80]	; 0x50
   2fbe4:	mov	r2, #7
   2fbe8:	strd	r6, [lr, #72]	; 0x48
   2fbec:	strd	r0, [lr, #80]	; 0x50
   2fbf0:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fbf4:	mov	ip, r8
   2fbf8:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   2fbfc:	mov	r6, #0
   2fc00:	mov	r7, #0
   2fc04:	mvn	r9, #92	; 0x5c
   2fc08:	ldr	lr, [ip], #-112	; 0xffffff90
   2fc0c:	ldr	r2, [sp, #36]	; 0x24
   2fc10:	ldr	r3, [sp, #16]
   2fc14:	str	ip, [sp, #80]	; 0x50
   2fc18:	mov	ip, #0
   2fc1c:	strd	r6, [r2, #80]	; 0x50
   2fc20:	mov	r6, r2
   2fc24:	mov	r2, #7
   2fc28:	sub	r3, r3, #4
   2fc2c:	str	lr, [r6, #28]
   2fc30:	strd	r0, [r6, #72]	; 0x48
   2fc34:	str	ip, [r6, #88]	; 0x58
   2fc38:	str	ip, [r6, #92]	; 0x5c
   2fc3c:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fc40:	movw	r1, #23240	; 0x5ac8
   2fc44:	movt	r1, #5
   2fc48:	sub	r3, r8, #56	; 0x38
   2fc4c:	mov	r2, #5
   2fc50:	mov	r0, #0
   2fc54:	mvn	r9, #92	; 0x5c
   2fc58:	str	r3, [sp, #80]	; 0x50
   2fc5c:	bl	120b4 <dcgettext@plt>
   2fc60:	ldr	r3, [sp, #16]
   2fc64:	mov	r2, #4
   2fc68:	sub	r3, r3, #2
   2fc6c:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fc70:	movw	r1, #23232	; 0x5ac0
   2fc74:	movt	r1, #5
   2fc78:	b	2fc48 <__assert_fail@plt+0x1d654>
   2fc7c:	movw	r1, #23220	; 0x5ab4
   2fc80:	movt	r1, #5
   2fc84:	b	2fc48 <__assert_fail@plt+0x1d654>
   2fc88:	ldr	ip, [sp, #36]	; 0x24
   2fc8c:	sub	lr, r8, #56	; 0x38
   2fc90:	mov	r2, #5
   2fc94:	movw	r1, #23216	; 0x5ab0
   2fc98:	movt	r1, #5
   2fc9c:	mov	r0, #0
   2fca0:	str	lr, [sp, #80]	; 0x50
   2fca4:	mvn	r9, #92	; 0x5c
   2fca8:	ldr	r3, [ip, #160]	; 0xa0
   2fcac:	add	r3, r3, #1
   2fcb0:	str	r3, [ip, #160]	; 0xa0
   2fcb4:	bl	120b4 <dcgettext@plt>
   2fcb8:	ldr	r3, [sp, #16]
   2fcbc:	mov	r2, #4
   2fcc0:	sub	r3, r3, #2
   2fcc4:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fcc8:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   2fccc:	mov	r2, r8
   2fcd0:	mvn	r9, #92	; 0x5c
   2fcd4:	ldr	ip, [r2], #-112	; 0xffffff90
   2fcd8:	ldr	r3, [sp, #16]
   2fcdc:	ldr	lr, [sp, #36]	; 0x24
   2fce0:	str	r2, [sp, #80]	; 0x50
   2fce4:	mov	r2, #1
   2fce8:	sub	r3, r3, #4
   2fcec:	strd	r0, [lr, #8]
   2fcf0:	str	ip, [lr, #16]
   2fcf4:	strb	r2, [lr, #187]	; 0xbb
   2fcf8:	mov	r2, #13
   2fcfc:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fd00:	mov	r2, r8
   2fd04:	ldrd	r0, [r8, #-56]	; 0xffffffc8
   2fd08:	b	2fcd0 <__assert_fail@plt+0x1d6dc>
   2fd0c:	ldr	r1, [r8, #-56]	; 0xffffffc8
   2fd10:	sub	r2, r8, #112	; 0x70
   2fd14:	mov	r6, #0
   2fd18:	mov	r7, #0
   2fd1c:	mvn	r9, #92	; 0x5c
   2fd20:	ldr	r3, [sp, #16]
   2fd24:	str	r2, [sp, #80]	; 0x50
   2fd28:	mov	r2, #13
   2fd2c:	ldr	r0, [sp, #36]	; 0x24
   2fd30:	sub	r3, r3, #4
   2fd34:	strd	r6, [r0, #8]
   2fd38:	str	r1, [r0, #16]
   2fd3c:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fd40:	mov	r1, #0
   2fd44:	mov	r0, #0
   2fd48:	ldr	r3, [sp, #16]
   2fd4c:	mov	r2, #13
   2fd50:	mvn	r9, #92	; 0x5c
   2fd54:	ldr	ip, [sp, #36]	; 0x24
   2fd58:	sub	r3, r3, #2
   2fd5c:	strd	r0, [ip, #8]
   2fd60:	ldr	r1, [r8], #-56	; 0xffffffc8
   2fd64:	str	r1, [ip, #16]
   2fd68:	str	r8, [sp, #80]	; 0x50
   2fd6c:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fd70:	ldr	r3, [sp, #16]
   2fd74:	sub	r2, r8, #112	; 0x70
   2fd78:	ldr	r1, [r8, #-56]	; 0xffffffc8
   2fd7c:	str	r2, [sp, #80]	; 0x50
   2fd80:	sub	r3, r3, #4
   2fd84:	ldr	r0, [sp, #36]	; 0x24
   2fd88:	add	r1, r1, #3600	; 0xe10
   2fd8c:	mov	r2, #12
   2fd90:	mvn	r9, #92	; 0x5c
   2fd94:	str	r1, [r0, #24]
   2fd98:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fd9c:	ldr	r1, [r8], #-56	; 0xffffffc8
   2fda0:	ldr	r3, [sp, #16]
   2fda4:	str	r8, [sp, #80]	; 0x50
   2fda8:	sub	r3, r3, #2
   2fdac:	b	2fd84 <__assert_fail@plt+0x1d790>
   2fdb0:	ldr	r6, [sp, #36]	; 0x24
   2fdb4:	ldrd	r0, [r8, #-104]	; 0xffffff98
   2fdb8:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   2fdbc:	add	lr, r6, #32
   2fdc0:	mov	r9, r6
   2fdc4:	ldrd	r6, [r8, #-112]	; 0xffffff90
   2fdc8:	rsbs	r2, r2, #0
   2fdcc:	rscs	r3, r3, #0
   2fdd0:	strd	r6, [r9, #32]
   2fdd4:	strd	r0, [lr, #8]
   2fdd8:	mov	r1, #0
   2fddc:	movvs	r1, #1
   2fde0:	ldrd	r6, [r8, #-96]	; 0xffffffa0
   2fde4:	cmp	r1, #0
   2fde8:	ldr	r0, [sp, #36]	; 0x24
   2fdec:	strd	r6, [lr, #16]
   2fdf0:	strd	r2, [r0, #56]	; 0x38
   2fdf4:	bne	2e19c <__assert_fail@plt+0x1bba8>
   2fdf8:	ldrd	r2, [r8, #8]
   2fdfc:	rsbs	r2, r2, #0
   2fe00:	rscs	r3, r3, #0
   2fe04:	movvs	r1, #1
   2fe08:	cmp	r1, #0
   2fe0c:	ldr	r1, [sp, #36]	; 0x24
   2fe10:	strd	r2, [r1, #64]	; 0x40
   2fe14:	bne	2e19c <__assert_fail@plt+0x1bba8>
   2fe18:	sub	r3, r8, #168	; 0xa8
   2fe1c:	mov	r2, #15
   2fe20:	mvn	r9, #92	; 0x5c
   2fe24:	str	r3, [sp, #80]	; 0x50
   2fe28:	ldr	r3, [sp, #16]
   2fe2c:	sub	r3, r3, #6
   2fe30:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2fe34:	mov	r6, #0
   2fe38:	mov	r7, #0
   2fe3c:	mov	r2, #56	; 0x38
   2fe40:	mov	r1, #0
   2fe44:	mov	r0, r4
   2fe48:	strd	r6, [sp, #24]
   2fe4c:	mov	fp, r7
   2fe50:	bl	12378 <memset@plt>
   2fe54:	ldr	r2, [r8, #-56]	; 0xffffffc8
   2fe58:	mov	r1, r7
   2fe5c:	ldr	r3, [sp, #16]
   2fe60:	str	r2, [sp, #56]	; 0x38
   2fe64:	str	r6, [sp, #60]	; 0x3c
   2fe68:	sub	r3, r3, #4
   2fe6c:	str	r6, [sp, #68]	; 0x44
   2fe70:	str	r6, [sp, #72]	; 0x48
   2fe74:	str	r7, [sp, #76]	; 0x4c
   2fe78:	ldr	r2, [r8, #-52]	; 0xffffffcc
   2fe7c:	b	2f82c <__assert_fail@plt+0x1d238>
   2fe80:	sub	r3, r8, #56	; 0x38
   2fe84:	mov	r0, #0
   2fe88:	mov	r1, #0
   2fe8c:	mov	r2, #0
   2fe90:	mov	r6, #1
   2fe94:	mov	r7, #0
   2fe98:	str	r3, [sp, #80]	; 0x50
   2fe9c:	mov	fp, r1
   2fea0:	ldr	r3, [sp, #16]
   2fea4:	strd	r6, [r5, #-8]
   2fea8:	strd	r0, [sp, #24]
   2feac:	str	r2, [sp, #40]	; 0x28
   2feb0:	str	r0, [sp, #60]	; 0x3c
   2feb4:	sub	r3, r3, #2
   2feb8:	str	r1, [sp, #64]	; 0x40
   2febc:	str	r0, [sp, #68]	; 0x44
   2fec0:	str	r0, [sp, #72]	; 0x48
   2fec4:	str	r1, [sp, #76]	; 0x4c
   2fec8:	str	r2, [sp, #420]	; 0x1a4
   2fecc:	b	2f638 <__assert_fail@plt+0x1d044>
   2fed0:	ldrd	r6, [r8, #-48]	; 0xffffffd0
   2fed4:	mov	r1, #0
   2fed8:	mov	r0, #0
   2fedc:	strd	r6, [r5, #-8]
   2fee0:	ldr	r3, [sp, #16]
   2fee4:	mov	r2, #0
   2fee8:	mov	r9, r1
   2feec:	sub	ip, r8, #112	; 0x70
   2fef0:	mov	fp, r1
   2fef4:	strd	r0, [sp, #24]
   2fef8:	str	r2, [sp, #40]	; 0x28
   2fefc:	str	fp, [sp, #48]	; 0x30
   2ff00:	str	r0, [sp, #56]	; 0x38
   2ff04:	sub	r3, r3, #4
   2ff08:	str	r0, [sp, #60]	; 0x3c
   2ff0c:	str	r9, [sp, #64]	; 0x40
   2ff10:	str	r0, [sp, #68]	; 0x44
   2ff14:	str	r0, [sp, #72]	; 0x48
   2ff18:	str	r9, [sp, #76]	; 0x4c
   2ff1c:	mvn	r9, #92	; 0x5c
   2ff20:	str	ip, [sp, #80]	; 0x50
   2ff24:	str	r2, [sp, #420]	; 0x1a4
   2ff28:	mov	r2, #17
   2ff2c:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2ff30:	ldrd	r6, [r8, #-56]	; 0xffffffc8
   2ff34:	b	2fed4 <__assert_fail@plt+0x1d8e0>
   2ff38:	ldrd	r0, [r8, #-104]	; 0xffffff98
   2ff3c:	sub	lr, r8, #168	; 0xa8
   2ff40:	ldr	r3, [sp, #16]
   2ff44:	str	lr, [sp, #80]	; 0x50
   2ff48:	ldr	r2, [sp, #36]	; 0x24
   2ff4c:	ldrd	r6, [r8]
   2ff50:	sub	r3, r3, #6
   2ff54:	strd	r0, [r2, #64]	; 0x40
   2ff58:	add	ip, r2, #32
   2ff5c:	ldrd	r0, [r8, #8]
   2ff60:	strd	r0, [sp, #16]
   2ff64:	ldrd	r0, [r8, #-56]	; 0xffffffc8
   2ff68:	strd	r0, [r2, #56]	; 0x38
   2ff6c:	strd	r6, [r2, #32]
   2ff70:	mvn	r9, #92	; 0x5c
   2ff74:	ldrd	r0, [r8, #16]
   2ff78:	ldrd	r6, [sp, #16]
   2ff7c:	strd	r6, [r2, #40]	; 0x28
   2ff80:	mov	r2, #14
   2ff84:	strd	r0, [ip, #16]
   2ff88:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2ff8c:	mov	r2, r8
   2ff90:	ldrd	r6, [r8, #-48]	; 0xffffffd0
   2ff94:	mvn	r9, #92	; 0x5c
   2ff98:	ldrd	r0, [r2], #-112	; 0xffffff90
   2ff9c:	ldr	r3, [sp, #16]
   2ffa0:	ldr	ip, [sp, #36]	; 0x24
   2ffa4:	str	r2, [sp, #80]	; 0x50
   2ffa8:	mov	r2, #14
   2ffac:	sub	r3, r3, #4
   2ffb0:	strd	r0, [ip, #56]	; 0x38
   2ffb4:	strd	r6, [ip, #64]	; 0x40
   2ffb8:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   2ffbc:	ldrd	r0, [r8, #-168]	; 0xffffff58
   2ffc0:	sub	lr, r8, #224	; 0xe0
   2ffc4:	ldr	r3, [sp, #16]
   2ffc8:	str	lr, [sp, #80]	; 0x50
   2ffcc:	ldr	r2, [sp, #36]	; 0x24
   2ffd0:	ldrd	r6, [r8]
   2ffd4:	sub	r3, r3, #8
   2ffd8:	strd	r0, [r2, #56]	; 0x38
   2ffdc:	add	ip, r2, #32
   2ffe0:	ldrd	r0, [r8, #8]
   2ffe4:	strd	r0, [sp, #16]
   2ffe8:	ldrd	r0, [r8, #-104]	; 0xffffff98
   2ffec:	strd	r0, [r2, #64]	; 0x40
   2fff0:	b	2ff6c <__assert_fail@plt+0x1d978>
   2fff4:	ldr	r3, [sp, #16]
   2fff8:	sub	r2, r8, #112	; 0x70
   2fffc:	ldrd	r0, [r8, #-56]	; 0xffffffc8
   30000:	sub	r3, r3, #4
   30004:	ldrd	r6, [r8, #8]
   30008:	mvn	r9, #92	; 0x5c
   3000c:	str	r2, [sp, #80]	; 0x50
   30010:	mov	r2, #14
   30014:	ldr	ip, [sp, #36]	; 0x24
   30018:	strd	r0, [ip, #56]	; 0x38
   3001c:	strd	r6, [ip, #64]	; 0x40
   30020:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   30024:	ldrd	r0, [r8, #-112]	; 0xffffff90
   30028:	mov	ip, #0
   3002c:	ldr	lr, [sp, #36]	; 0x24
   30030:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   30034:	strd	r0, [lr, #56]	; 0x38
   30038:	ldr	r0, [sp, #36]	; 0x24
   3003c:	rsbs	r2, r2, #0
   30040:	rscs	r3, r3, #0
   30044:	movvs	ip, #1
   30048:	subs	r1, ip, #0
   3004c:	strd	r2, [r0, #64]	; 0x40
   30050:	bne	2e19c <__assert_fail@plt+0x1bba8>
   30054:	ldrd	r2, [r8, #8]
   30058:	ldr	r0, [sp, #36]	; 0x24
   3005c:	rsbs	r2, r2, #0
   30060:	rscs	r3, r3, #0
   30064:	movvs	r1, #1
   30068:	cmp	r1, #0
   3006c:	strd	r2, [r0, #40]	; 0x28
   30070:	bne	2e19c <__assert_fail@plt+0x1bba8>
   30074:	ldr	r1, [r8, #16]
   30078:	sub	r2, r8, #168	; 0xa8
   3007c:	mvn	r9, #92	; 0x5c
   30080:	ldr	r3, [sp, #16]
   30084:	str	r2, [sp, #80]	; 0x50
   30088:	mov	r2, #14
   3008c:	str	r1, [r0, #48]	; 0x30
   30090:	sub	r3, r3, #6
   30094:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   30098:	ldrd	r0, [r8, #-104]	; 0xffffff98
   3009c:	mov	ip, #0
   300a0:	ldr	lr, [sp, #36]	; 0x24
   300a4:	ldrd	r2, [r8, #8]
   300a8:	strd	r0, [lr, #64]	; 0x40
   300ac:	ldrd	r0, [r8, #-56]	; 0xffffffc8
   300b0:	rsbs	r2, r2, #0
   300b4:	rscs	r3, r3, #0
   300b8:	movvs	ip, #1
   300bc:	cmp	ip, #0
   300c0:	strd	r0, [lr, #56]	; 0x38
   300c4:	ldr	r0, [sp, #36]	; 0x24
   300c8:	strd	r2, [r0, #40]	; 0x28
   300cc:	beq	30074 <__assert_fail@plt+0x1da80>
   300d0:	b	2e19c <__assert_fail@plt+0x1bba8>
   300d4:	sub	r1, r8, #280	; 0x118
   300d8:	ldr	r2, [r8, #-208]	; 0xffffff30
   300dc:	str	r1, [sp, #80]	; 0x50
   300e0:	ldrd	r0, [r8, #-104]	; 0xffffff98
   300e4:	ldr	r3, [sp, #16]
   300e8:	cmp	r2, #3
   300ec:	strd	r0, [sp, #16]
   300f0:	sub	r3, r3, #10
   300f4:	ble	304b8 <__assert_fail@plt+0x1dec4>
   300f8:	ldr	r2, [sp, #36]	; 0x24
   300fc:	sub	lr, r8, #224	; 0xe0
   30100:	ldrd	r6, [r8, #-224]	; 0xffffff20
   30104:	ldrd	r0, [r8, #-216]	; 0xffffff28
   30108:	add	ip, r2, #32
   3010c:	ldrd	r8, [r8, #8]
   30110:	strd	r6, [r2, #32]
   30114:	ldrd	r6, [lr, #16]
   30118:	strd	r0, [ip, #8]
   3011c:	ldrd	r0, [sp, #16]
   30120:	strd	r8, [sp, #128]	; 0x80
   30124:	mov	r8, r2
   30128:	mvn	r9, #92	; 0x5c
   3012c:	mov	r2, #14
   30130:	strd	r6, [ip, #16]
   30134:	strd	r0, [r8, #56]	; 0x38
   30138:	ldrd	r0, [sp, #128]	; 0x80
   3013c:	strd	r0, [r8, #64]	; 0x40
   30140:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   30144:	ldr	r3, [sp, #16]
   30148:	sub	r2, r8, #168	; 0xa8
   3014c:	ldrd	r0, [r8, #-104]	; 0xffffff98
   30150:	sub	r3, r3, #6
   30154:	b	30004 <__assert_fail@plt+0x1da10>
   30158:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   3015c:	sub	r1, r8, #56	; 0x38
   30160:	ldr	r9, [sp, #36]	; 0x24
   30164:	strd	r2, [sp]
   30168:	ldrd	r2, [r8, #-40]	; 0xffffffd8
   3016c:	mov	r0, r9
   30170:	strd	r2, [sp, #8]
   30174:	ldm	r1, {r2, r3}
   30178:	bl	2da98 <__assert_fail@plt+0x1b4a4>
   3017c:	ldrd	r6, [r9, #128]	; 0x80
   30180:	ldr	r1, [r8, #48]	; 0x30
   30184:	ldrd	r2, [r9, #136]	; 0x88
   30188:	strd	r6, [sp, #80]	; 0x50
   3018c:	ldr	r0, [r9, #144]	; 0x90
   30190:	ldrd	r6, [r8, #40]	; 0x28
   30194:	adds	r1, r0, r1
   30198:	movvs	ip, #1
   3019c:	movvc	ip, #0
   301a0:	adds	r0, r2, r6
   301a4:	str	r1, [r9, #144]	; 0x90
   301a8:	adcs	r1, r3, r7
   301ac:	ldrd	r6, [r9, #120]	; 0x78
   301b0:	movvs	r3, #1
   301b4:	movvc	r3, #0
   301b8:	strd	r0, [r9, #136]	; 0x88
   301bc:	orr	ip, ip, r3
   301c0:	ldrd	r0, [r8, #32]
   301c4:	strd	r6, [sp, #128]	; 0x80
   301c8:	ldrd	r6, [sp, #80]	; 0x50
   301cc:	adds	r2, r6, r0
   301d0:	adcs	r3, r7, r1
   301d4:	ldrd	r6, [r9, #112]	; 0x70
   301d8:	movvs	lr, #1
   301dc:	movvc	lr, #0
   301e0:	ldrd	r0, [r8, #24]
   301e4:	orr	ip, ip, lr
   301e8:	strd	r2, [r9, #128]	; 0x80
   301ec:	strd	r6, [sp, #136]	; 0x88
   301f0:	ldrd	r6, [sp, #128]	; 0x80
   301f4:	adds	r2, r6, r0
   301f8:	adcs	r3, r7, r1
   301fc:	ldrd	r6, [sp, #136]	; 0x88
   30200:	movvs	r1, #1
   30204:	movvc	r1, #0
   30208:	orr	ip, ip, r1
   3020c:	strd	r2, [r9, #120]	; 0x78
   30210:	ldrd	r0, [r8, #16]
   30214:	ldrd	r2, [r9, #104]	; 0x68
   30218:	strd	r2, [sp, #80]	; 0x50
   3021c:	adds	r2, r6, r0
   30220:	adcs	r3, r7, r1
   30224:	ldrd	r6, [r9, #96]	; 0x60
   30228:	movvs	lr, #1
   3022c:	movvc	lr, #0
   30230:	ldrd	r0, [r8, #8]
   30234:	orr	ip, ip, lr
   30238:	strd	r2, [r9, #112]	; 0x70
   3023c:	strd	r6, [sp, #128]	; 0x80
   30240:	ldrd	r6, [sp, #80]	; 0x50
   30244:	adds	r2, r6, r0
   30248:	adcs	r3, r7, r1
   3024c:	ldrd	r0, [r8]
   30250:	movvs	lr, #1
   30254:	movvc	lr, #0
   30258:	ldrd	r6, [sp, #128]	; 0x80
   3025c:	strd	r2, [r9, #104]	; 0x68
   30260:	adds	r2, r6, r0
   30264:	adcs	r3, r7, r1
   30268:	orrvc	ip, ip, lr
   3026c:	movvs	ip, #1
   30270:	cmp	ip, #0
   30274:	strd	r2, [r9, #96]	; 0x60
   30278:	bne	2e19c <__assert_fail@plt+0x1bba8>
   3027c:	sub	r3, r8, #112	; 0x70
   30280:	mov	r1, #1
   30284:	mov	r2, #24
   30288:	str	r3, [sp, #80]	; 0x50
   3028c:	ldr	r3, [sp, #16]
   30290:	strb	r1, [r9, #153]	; 0x99
   30294:	mvn	r9, #92	; 0x5c
   30298:	sub	r3, r3, #4
   3029c:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   302a0:	ldrb	r9, [r9, #2192]	; 0x890
   302a4:	b	2dd80 <__assert_fail@plt+0x1b78c>
   302a8:	mov	r0, r4
   302ac:	str	r6, [sp, #16]
   302b0:	bl	12300 <strlen@plt>
   302b4:	cmp	r0, #3
   302b8:	str	r0, [sp, #32]
   302bc:	beq	3036c <__assert_fail@plt+0x1dd78>
   302c0:	cmp	r0, #4
   302c4:	beq	30360 <__assert_fail@plt+0x1dd6c>
   302c8:	movw	r1, #23120	; 0x5a50
   302cc:	movt	r1, #5
   302d0:	ldr	r7, [pc, #-3208]	; 2f650 <__assert_fail@plt+0x1d05c>
   302d4:	ldr	r6, [sp, #16]
   302d8:	b	302e8 <__assert_fail@plt+0x1dcf4>
   302dc:	ldr	r1, [r7, #12]!
   302e0:	cmp	r1, #0
   302e4:	beq	303c0 <__assert_fail@plt+0x1ddcc>
   302e8:	mov	r0, r4
   302ec:	bl	11f40 <strcmp@plt>
   302f0:	cmp	r0, #0
   302f4:	mov	r3, r7
   302f8:	bne	302dc <__assert_fail@plt+0x1dce8>
   302fc:	str	r6, [sp, #16]
   30300:	ldr	r2, [r3, #8]
   30304:	ldr	r3, [r3, #4]
   30308:	str	r3, [sp, #32]
   3030c:	asr	r3, r2, #31
   30310:	b	2e6d8 <__assert_fail@plt+0x1c0e4>
   30314:	ldrb	r3, [r2, #1]
   30318:	mov	r2, r1
   3031c:	b	2e1ec <__assert_fail@plt+0x1bbf8>
   30320:	mov	r0, #2
   30324:	b	2e1a0 <__assert_fail@plt+0x1bbac>
   30328:	mov	r0, #0
   3032c:	b	2e1a0 <__assert_fail@plt+0x1bbac>
   30330:	str	r3, [sp, #316]	; 0x13c
   30334:	cmp	r7, #0
   30338:	movw	r0, #277	; 0x115
   3033c:	ldr	r2, [sp, #32]
   30340:	movne	r0, #276	; 0x114
   30344:	ldr	r3, [sp, #36]	; 0x24
   30348:	str	r0, [sp, #32]
   3034c:	str	r2, [sp, #312]	; 0x138
   30350:	moveq	r2, #22
   30354:	movne	r2, #21
   30358:	str	r1, [r3]
   3035c:	b	2e378 <__assert_fail@plt+0x1bd84>
   30360:	ldrb	r3, [sp, #255]	; 0xff
   30364:	cmp	r3, #46	; 0x2e
   30368:	bne	302c8 <__assert_fail@plt+0x1dcd4>
   3036c:	ldr	r7, [pc, #-3364]	; 2f650 <__assert_fail@plt+0x1d05c>
   30370:	movw	r1, #23120	; 0x5a50
   30374:	movt	r1, #5
   30378:	mov	r6, r7
   3037c:	mov	r7, r5
   30380:	b	30390 <__assert_fail@plt+0x1dd9c>
   30384:	ldr	r1, [r6, #12]!
   30388:	cmp	r1, #0
   3038c:	beq	30440 <__assert_fail@plt+0x1de4c>
   30390:	mov	r2, #3
   30394:	mov	r0, r4
   30398:	bl	12594 <strncmp@plt>
   3039c:	cmp	r0, #0
   303a0:	bne	30384 <__assert_fail@plt+0x1dd90>
   303a4:	mov	r3, r6
   303a8:	mov	r5, r7
   303ac:	b	30300 <__assert_fail@plt+0x1dd0c>
   303b0:	mov	r7, #0
   303b4:	str	r6, [sp, #16]
   303b8:	str	r2, [sp, #24]
   303bc:	b	2e304 <__assert_fail@plt+0x1bd10>
   303c0:	str	r6, [sp, #16]
   303c4:	ldr	r3, [pc, #-3448]	; 2f654 <__assert_fail@plt+0x1d060>
   303c8:	movw	r1, #23128	; 0x5a58
   303cc:	movt	r1, #5
   303d0:	ldr	r6, [sp, #16]
   303d4:	mov	r7, r3
   303d8:	str	r3, [sp, #56]	; 0x38
   303dc:	b	303ec <__assert_fail@plt+0x1ddf8>
   303e0:	ldr	r1, [r7, #12]!
   303e4:	cmp	r1, #0
   303e8:	beq	30400 <__assert_fail@plt+0x1de0c>
   303ec:	mov	r0, r4
   303f0:	bl	11f40 <strcmp@plt>
   303f4:	cmp	r0, #0
   303f8:	bne	303e0 <__assert_fail@plt+0x1ddec>
   303fc:	b	2e6c4 <__assert_fail@plt+0x1c0d0>
   30400:	ldr	r3, [sp, #36]	; 0x24
   30404:	str	r6, [sp, #16]
   30408:	ldr	r1, [r3, #188]	; 0xbc
   3040c:	cmp	r1, #0
   30410:	str	r1, [sp, #48]	; 0x30
   30414:	beq	30568 <__assert_fail@plt+0x1df74>
   30418:	add	r7, r3, #188	; 0xbc
   3041c:	b	3042c <__assert_fail@plt+0x1de38>
   30420:	ldr	r1, [r7, #12]!
   30424:	cmp	r1, #0
   30428:	beq	30564 <__assert_fail@plt+0x1df70>
   3042c:	mov	r0, r4
   30430:	bl	11f40 <strcmp@plt>
   30434:	cmp	r0, #0
   30438:	bne	30420 <__assert_fail@plt+0x1de2c>
   3043c:	b	2e6c4 <__assert_fail@plt+0x1c0d0>
   30440:	mov	r5, r7
   30444:	b	303c4 <__assert_fail@plt+0x1ddd0>
   30448:	cmp	r2, #0
   3044c:	sbcs	r3, r3, #0
   30450:	bge	2efd8 <__assert_fail@plt+0x1c9e4>
   30454:	mov	r2, #100	; 0x64
   30458:	mov	r3, #0
   3045c:	mov	r0, r7
   30460:	mov	r1, r9
   30464:	bl	50488 <__assert_fail@plt+0x3de94>
   30468:	mov	lr, r0
   3046c:	mov	ip, r1
   30470:	mov	r0, r7
   30474:	mov	r1, r9
   30478:	mov	r2, #100	; 0x64
   3047c:	mov	r3, #0
   30480:	mov	r7, lr
   30484:	mov	r9, ip
   30488:	bl	50488 <__assert_fail@plt+0x3de94>
   3048c:	lsl	r1, r9, #4
   30490:	lsl	r0, r7, #4
   30494:	orr	r1, r1, r7, lsr #28
   30498:	subs	r7, r0, r7
   3049c:	sbc	r9, r1, r9
   304a0:	lsl	r1, r7, #2
   304a4:	lsl	r9, r9, #2
   304a8:	adds	r0, r1, r2
   304ac:	orr	r9, r9, r7, lsr #30
   304b0:	adc	r9, r9, r3
   304b4:	b	2f028 <__assert_fail@plt+0x1ca34>
   304b8:	ldr	lr, [sp, #36]	; 0x24
   304bc:	mov	r2, #14
   304c0:	mvn	r9, #92	; 0x5c
   304c4:	ldrd	r6, [r8]
   304c8:	strd	r0, [lr, #64]	; 0x40
   304cc:	ldrd	r0, [r8, #8]
   304d0:	strd	r6, [lr, #32]
   304d4:	strd	r0, [sp, #16]
   304d8:	ldrd	r0, [r8, #-216]	; 0xffffff28
   304dc:	ldrd	r6, [sp, #16]
   304e0:	strd	r0, [lr, #56]	; 0x38
   304e4:	ldrd	r0, [r8, #16]
   304e8:	strd	r6, [lr, #40]	; 0x28
   304ec:	strd	r0, [lr, #48]	; 0x30
   304f0:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   304f4:	cmp	r2, #0
   304f8:	sbcs	r3, r3, #0
   304fc:	bge	2f2c8 <__assert_fail@plt+0x1ccd4>
   30500:	mov	r2, #100	; 0x64
   30504:	mov	r3, #0
   30508:	mov	r0, r7
   3050c:	mov	r1, r9
   30510:	bl	50488 <__assert_fail@plt+0x3de94>
   30514:	mov	lr, r0
   30518:	mov	ip, r1
   3051c:	mov	r0, r7
   30520:	mov	r1, r9
   30524:	mov	r2, #100	; 0x64
   30528:	mov	r3, #0
   3052c:	mov	r7, lr
   30530:	mov	r9, ip
   30534:	bl	50488 <__assert_fail@plt+0x3de94>
   30538:	lsl	r1, r9, #4
   3053c:	lsl	r0, r7, #4
   30540:	orr	r1, r1, r7, lsr #28
   30544:	subs	r7, r0, r7
   30548:	sbc	r9, r1, r9
   3054c:	lsl	r1, r7, #2
   30550:	lsl	r9, r9, #2
   30554:	adds	r0, r1, r2
   30558:	orr	r9, r9, r7, lsr #30
   3055c:	adc	r9, r9, r3
   30560:	b	2f318 <__assert_fail@plt+0x1cd24>
   30564:	str	r6, [sp, #16]
   30568:	ldr	r3, [pc, #-3864]	; 2f658 <__assert_fail@plt+0x1d064>
   3056c:	movw	r1, #23132	; 0x5a5c
   30570:	movt	r1, #5
   30574:	ldr	r6, [sp, #16]
   30578:	mov	r7, r3
   3057c:	str	r3, [sp, #40]	; 0x28
   30580:	b	30590 <__assert_fail@plt+0x1df9c>
   30584:	ldr	r1, [r7, #12]!
   30588:	cmp	r1, #0
   3058c:	beq	30840 <__assert_fail@plt+0x1e24c>
   30590:	mov	r0, r4
   30594:	bl	11f40 <strcmp@plt>
   30598:	cmp	r0, #0
   3059c:	bne	30584 <__assert_fail@plt+0x1df90>
   305a0:	b	2e6c4 <__assert_fail@plt+0x1c0d0>
   305a4:	subs	ip, r2, r3
   305a8:	mov	r9, #0
   305ac:	ldr	r3, [sp, #36]	; 0x24
   305b0:	movvs	r9, #1
   305b4:	subs	r6, r0, r6
   305b8:	sbcs	r7, r1, r7
   305bc:	ldrd	r0, [sp, #160]	; 0xa0
   305c0:	mov	lr, #0
   305c4:	movvs	lr, #1
   305c8:	strd	r6, [sp, #232]	; 0xe8
   305cc:	ldrd	r6, [sp, #152]	; 0x98
   305d0:	str	ip, [r3, #144]	; 0x90
   305d4:	mov	ip, #0
   305d8:	subs	r2, r0, r6
   305dc:	sbcs	r3, r1, r7
   305e0:	ldr	r1, [sp, #36]	; 0x24
   305e4:	movvs	ip, #1
   305e8:	strd	r2, [sp, #152]	; 0x98
   305ec:	ldrd	r6, [sp, #144]	; 0x90
   305f0:	ldrd	r2, [sp, #232]	; 0xe8
   305f4:	strd	r2, [r1, #136]	; 0x88
   305f8:	ldrd	r0, [sp, #168]	; 0xa8
   305fc:	subs	r2, r0, r6
   30600:	sbcs	r3, r1, r7
   30604:	ldr	r1, [sp, #36]	; 0x24
   30608:	strd	r2, [sp, #160]	; 0xa0
   3060c:	mov	r3, #0
   30610:	ldrd	r6, [sp, #176]	; 0xb0
   30614:	str	r3, [sp, #144]	; 0x90
   30618:	ldrd	r2, [sp, #152]	; 0x98
   3061c:	strd	r2, [r1, #128]	; 0x80
   30620:	movvs	r3, #1
   30624:	ldrd	r0, [sp, #136]	; 0x88
   30628:	strvs	r3, [sp, #144]	; 0x90
   3062c:	subs	r2, r6, r0
   30630:	sbcs	r3, r7, r1
   30634:	ldr	r1, [sp, #36]	; 0x24
   30638:	strd	r2, [sp, #152]	; 0x98
   3063c:	mov	r3, #0
   30640:	ldrd	r6, [sp, #184]	; 0xb8
   30644:	str	r3, [sp, #136]	; 0x88
   30648:	ldrd	r2, [sp, #160]	; 0xa0
   3064c:	strd	r2, [r1, #120]	; 0x78
   30650:	movvs	r3, #1
   30654:	ldrd	r0, [sp, #128]	; 0x80
   30658:	strvs	r3, [sp, #136]	; 0x88
   3065c:	subs	r2, r6, r0
   30660:	sbcs	r3, r7, r1
   30664:	ldr	r1, [sp, #36]	; 0x24
   30668:	strd	r2, [sp, #160]	; 0xa0
   3066c:	mov	r3, #0
   30670:	str	r3, [sp, #128]	; 0x80
   30674:	ldrd	r2, [sp, #152]	; 0x98
   30678:	strd	r2, [r1, #112]	; 0x70
   3067c:	movvs	r3, #1
   30680:	strvs	r3, [sp, #128]	; 0x80
   30684:	ldrd	r6, [sp, #80]	; 0x50
   30688:	ldrd	r0, [sp, #192]	; 0xc0
   3068c:	subs	r2, r0, r6
   30690:	sbcs	r3, r1, r7
   30694:	ldrd	r0, [sp, #160]	; 0xa0
   30698:	mov	r6, r2
   3069c:	mov	r7, r3
   306a0:	mov	r2, #0
   306a4:	ldr	r3, [sp, #36]	; 0x24
   306a8:	movvs	r2, #1
   306ac:	strd	r0, [r3, #104]	; 0x68
   306b0:	orr	r3, r9, lr
   306b4:	mov	r1, r7
   306b8:	ldr	lr, [sp, #36]	; 0x24
   306bc:	mov	r0, r6
   306c0:	orr	r3, r3, ip
   306c4:	strd	r0, [lr, #96]	; 0x60
   306c8:	ldr	r1, [sp, #144]	; 0x90
   306cc:	orr	r3, r3, r1
   306d0:	ldr	r1, [sp, #136]	; 0x88
   306d4:	orr	r3, r3, r1
   306d8:	ldr	r1, [sp, #128]	; 0x80
   306dc:	orr	r3, r3, r1
   306e0:	orr	r3, r3, r2
   306e4:	b	2ecec <__assert_fail@plt+0x1c6f8>
   306e8:	adds	r2, r0, r6
   306ec:	adcs	r3, r3, r7
   306f0:	mov	r0, r2
   306f4:	mov	r9, r3
   306f8:	movvs	r1, #1
   306fc:	movvc	r1, #0
   30700:	b	2f310 <__assert_fail@plt+0x1cd1c>
   30704:	adds	r2, r0, r6
   30708:	adcs	r3, r3, r7
   3070c:	mov	r0, r2
   30710:	mov	r9, r3
   30714:	movvs	r1, #1
   30718:	movvc	r1, #0
   3071c:	b	2f020 <__assert_fail@plt+0x1ca2c>
   30720:	mov	r9, r2
   30724:	mov	lr, r3
   30728:	str	r3, [sp, #56]	; 0x38
   3072c:	mov	r1, r0
   30730:	umull	r6, r7, r0, r2
   30734:	cmp	lr, #0
   30738:	strd	r6, [sp, #40]	; 0x28
   3073c:	umull	r6, r7, r1, lr
   30740:	strd	r6, [sp, #24]
   30744:	bge	30760 <__assert_fail@plt+0x1e16c>
   30748:	mov	r7, #0
   3074c:	subs	r6, r6, r7
   30750:	str	r6, [sp, #24]
   30754:	ldr	r6, [sp, #28]
   30758:	sbc	lr, r6, r1
   3075c:	str	lr, [sp, #28]
   30760:	cmp	r1, #0
   30764:	bge	30784 <__assert_fail@plt+0x1e190>
   30768:	ldr	r1, [sp, #24]
   3076c:	ldr	lr, [sp, #56]	; 0x38
   30770:	subs	r1, r1, r9
   30774:	str	r1, [sp, #24]
   30778:	ldr	r1, [sp, #28]
   3077c:	sbc	r1, r1, lr
   30780:	str	r1, [sp, #28]
   30784:	ldrd	r6, [sp, #24]
   30788:	mov	lr, #0
   3078c:	ldr	r1, [sp, #44]	; 0x2c
   30790:	adds	r1, r6, r1
   30794:	adc	lr, r7, lr
   30798:	cmp	lr, r1, asr #31
   3079c:	bne	30d1c <__assert_fail@plt+0x1e728>
   307a0:	ldr	r3, [sp, #40]	; 0x28
   307a4:	str	r3, [sp, #112]	; 0x70
   307a8:	str	r1, [sp, #116]	; 0x74
   307ac:	b	2f5f4 <__assert_fail@plt+0x1d000>
   307b0:	cmp	r1, r3
   307b4:	bne	30c78 <__assert_fail@plt+0x1e684>
   307b8:	mov	r9, r0
   307bc:	mov	lr, ip
   307c0:	str	ip, [sp, #56]	; 0x38
   307c4:	mov	r1, r2
   307c8:	b	30730 <__assert_fail@plt+0x1e13c>
   307cc:	mov	fp, r2
   307d0:	mov	r0, r3
   307d4:	str	r3, [sp, #56]	; 0x38
   307d8:	mov	ip, r9
   307dc:	umull	r6, r7, r9, r2
   307e0:	cmp	r0, #0
   307e4:	umull	r0, r1, ip, r0
   307e8:	strd	r6, [sp, #48]	; 0x30
   307ec:	bge	307fc <__assert_fail@plt+0x1e208>
   307f0:	mov	r6, #0
   307f4:	subs	r0, r0, r6
   307f8:	sbc	r1, r1, ip
   307fc:	cmp	ip, #0
   30800:	bge	30810 <__assert_fail@plt+0x1e21c>
   30804:	ldr	ip, [sp, #56]	; 0x38
   30808:	subs	r0, r0, fp
   3080c:	sbc	r1, r1, ip
   30810:	umull	r6, r7, r9, r2
   30814:	mov	lr, #0
   30818:	adds	ip, r0, r7
   3081c:	adc	lr, r1, lr
   30820:	cmp	lr, ip, asr #31
   30824:	bne	30e78 <__assert_fail@plt+0x1e884>
   30828:	str	r6, [sp, #104]	; 0x68
   3082c:	str	ip, [sp, #108]	; 0x6c
   30830:	b	2f6a8 <__assert_fail@plt+0x1d0b4>
   30834:	mov	r2, #0
   30838:	mov	r3, r2
   3083c:	b	30538 <__assert_fail@plt+0x1df44>
   30840:	movw	r1, #23248	; 0x5ad0
   30844:	movt	r1, #5
   30848:	str	r6, [sp, #16]
   3084c:	mov	r0, r4
   30850:	bl	11f40 <strcmp@plt>
   30854:	cmp	r0, #0
   30858:	beq	309a0 <__assert_fail@plt+0x1e3ac>
   3085c:	ldr	r3, [pc, #1604]	; 30ea8 <__assert_fail@plt+0x1e8b4>
   30860:	movw	r1, #23136	; 0x5a60
   30864:	movt	r1, #5
   30868:	mov	r7, r3
   3086c:	str	r3, [sp, #24]
   30870:	b	30880 <__assert_fail@plt+0x1e28c>
   30874:	ldr	r1, [r7, #12]!
   30878:	cmp	r1, #0
   3087c:	beq	30944 <__assert_fail@plt+0x1e350>
   30880:	mov	r0, r4
   30884:	bl	11f40 <strcmp@plt>
   30888:	cmp	r0, #0
   3088c:	bne	30874 <__assert_fail@plt+0x1e280>
   30890:	b	2e6c4 <__assert_fail@plt+0x1c0d0>
   30894:	cmp	r1, r3
   30898:	bne	30cc0 <__assert_fail@plt+0x1e6cc>
   3089c:	ldr	r1, [r8, #-52]	; 0xffffffcc
   308a0:	mov	fp, r9
   308a4:	mov	ip, r2
   308a8:	ldr	r0, [sp, #24]
   308ac:	str	r1, [sp, #56]	; 0x38
   308b0:	b	307dc <__assert_fail@plt+0x1e1e8>
   308b4:	mov	r9, r2
   308b8:	mov	lr, r3
   308bc:	str	r3, [sp, #56]	; 0x38
   308c0:	mov	r1, r0
   308c4:	umull	r6, r7, r0, r2
   308c8:	cmp	lr, #0
   308cc:	strd	r6, [sp, #40]	; 0x28
   308d0:	umull	r6, r7, r1, lr
   308d4:	strd	r6, [sp, #24]
   308d8:	bge	308f4 <__assert_fail@plt+0x1e300>
   308dc:	mov	r7, #0
   308e0:	subs	r6, r6, r7
   308e4:	str	r6, [sp, #24]
   308e8:	ldr	r6, [sp, #28]
   308ec:	sbc	lr, r6, r1
   308f0:	str	lr, [sp, #28]
   308f4:	cmp	r1, #0
   308f8:	bge	30918 <__assert_fail@plt+0x1e324>
   308fc:	ldr	r1, [sp, #24]
   30900:	ldr	lr, [sp, #56]	; 0x38
   30904:	subs	r1, r1, r9
   30908:	str	r1, [sp, #24]
   3090c:	ldr	r1, [sp, #28]
   30910:	sbc	r1, r1, lr
   30914:	str	r1, [sp, #28]
   30918:	ldrd	r6, [sp, #24]
   3091c:	mov	lr, #0
   30920:	ldr	r1, [sp, #44]	; 0x2c
   30924:	adds	r1, r6, r1
   30928:	adc	lr, r7, lr
   3092c:	cmp	lr, r1, asr #31
   30930:	bne	30c00 <__assert_fail@plt+0x1e60c>
   30934:	ldr	r3, [sp, #40]	; 0x28
   30938:	str	r3, [sp, #120]	; 0x78
   3093c:	str	r1, [sp, #124]	; 0x7c
   30940:	b	2f458 <__assert_fail@plt+0x1ce64>
   30944:	ldr	r3, [sp, #32]
   30948:	str	r6, [sp, #16]
   3094c:	sub	r0, r3, #1
   30950:	ldrb	r2, [r4, r0]
   30954:	add	r3, r4, r0
   30958:	cmp	r2, #83	; 0x53
   3095c:	beq	30b28 <__assert_fail@plt+0x1e534>
   30960:	movw	r1, #23144	; 0x5a68
   30964:	movt	r1, #5
   30968:	ldr	r7, [pc, #1340]	; 30eac <__assert_fail@plt+0x1e8b8>
   3096c:	ldr	r6, [sp, #16]
   30970:	b	30980 <__assert_fail@plt+0x1e38c>
   30974:	ldr	r1, [r7, #12]!
   30978:	cmp	r1, #0
   3097c:	beq	30a44 <__assert_fail@plt+0x1e450>
   30980:	mov	r0, r4
   30984:	bl	11f40 <strcmp@plt>
   30988:	cmp	r0, #0
   3098c:	bne	30974 <__assert_fail@plt+0x1e380>
   30990:	b	2e6c4 <__assert_fail@plt+0x1c0d0>
   30994:	mov	r2, #0
   30998:	mov	r3, r2
   3099c:	b	3048c <__assert_fail@plt+0x1de98>
   309a0:	movw	r3, #259	; 0x103
   309a4:	mov	r2, #0
   309a8:	add	r1, sp, #312	; 0x138
   309ac:	str	r3, [sp, #32]
   309b0:	mov	r3, #0
   309b4:	strd	r2, [r1]
   309b8:	b	2e36c <__assert_fail@plt+0x1bd78>
   309bc:	cmp	r1, r3
   309c0:	bne	30d70 <__assert_fail@plt+0x1e77c>
   309c4:	mov	r9, r0
   309c8:	mov	lr, ip
   309cc:	str	ip, [sp, #56]	; 0x38
   309d0:	mov	r1, r2
   309d4:	b	308c4 <__assert_fail@plt+0x1e2d0>
   309d8:	ldr	r1, [sp, #36]	; 0x24
   309dc:	add	r3, r2, #1
   309e0:	str	r6, [sp, #16]
   309e4:	str	r3, [r1]
   309e8:	ldrb	r3, [r2]
   309ec:	cmp	r3, #0
   309f0:	str	r3, [sp, #32]
   309f4:	ldreq	r2, [sp, #32]
   309f8:	bne	2e370 <__assert_fail@plt+0x1bd7c>
   309fc:	b	2dcd4 <__assert_fail@plt+0x1b6e0>
   30a00:	mov	r1, #60	; 0x3c
   30a04:	cmp	r9, #0
   30a08:	umull	r2, r3, r7, r1
   30a0c:	strd	r2, [sp, #128]	; 0x80
   30a10:	umull	r2, r3, r1, r9
   30a14:	bge	30a20 <__assert_fail@plt+0x1e42c>
   30a18:	subs	r2, r2, lr
   30a1c:	sbc	r3, r3, r1
   30a20:	ldr	r1, [sp, #132]	; 0x84
   30a24:	mov	r0, #0
   30a28:	adds	r1, r2, r1
   30a2c:	adc	r0, r3, r0
   30a30:	cmp	r0, r1, asr #31
   30a34:	bne	30e20 <__assert_fail@plt+0x1e82c>
   30a38:	mov	r3, r1
   30a3c:	ldr	r6, [sp, #128]	; 0x80
   30a40:	b	2f2e0 <__assert_fail@plt+0x1ccec>
   30a44:	ldr	r3, [sp, #32]
   30a48:	str	r6, [sp, #16]
   30a4c:	cmp	r3, #1
   30a50:	ldrb	r3, [sp, #252]	; 0xfc
   30a54:	beq	30b9c <__assert_fail@plt+0x1e5a8>
   30a58:	cmp	r3, #0
   30a5c:	beq	30b78 <__assert_fail@plt+0x1e584>
   30a60:	ldr	r6, [sp, #16]
   30a64:	mov	r0, r4
   30a68:	mov	r2, r4
   30a6c:	cmp	r3, #46	; 0x2e
   30a70:	add	ip, r2, #1
   30a74:	ldrb	r3, [r0, #1]!
   30a78:	beq	30a9c <__assert_fail@plt+0x1e4a8>
   30a7c:	cmp	r3, #0
   30a80:	strb	r3, [r2, #1]
   30a84:	mov	r2, ip
   30a88:	bne	30a6c <__assert_fail@plt+0x1e478>
   30a8c:	cmp	r1, #0
   30a90:	str	r6, [sp, #16]
   30a94:	bne	30ab0 <__assert_fail@plt+0x1e4bc>
   30a98:	b	2e344 <__assert_fail@plt+0x1bd50>
   30a9c:	cmp	r3, #0
   30aa0:	mov	r1, #1
   30aa4:	strb	r3, [r2]
   30aa8:	bne	30a6c <__assert_fail@plt+0x1e478>
   30aac:	str	r6, [sp, #16]
   30ab0:	movw	r1, #23128	; 0x5a58
   30ab4:	movt	r1, #5
   30ab8:	ldr	r6, [sp, #16]
   30abc:	ldr	r7, [sp, #56]	; 0x38
   30ac0:	b	30ad0 <__assert_fail@plt+0x1e4dc>
   30ac4:	ldr	r1, [r7, #12]!
   30ac8:	cmp	r1, #0
   30acc:	beq	30d34 <__assert_fail@plt+0x1e740>
   30ad0:	mov	r0, r4
   30ad4:	bl	11f40 <strcmp@plt>
   30ad8:	cmp	r0, #0
   30adc:	bne	30ac4 <__assert_fail@plt+0x1e4d0>
   30ae0:	b	2e6c4 <__assert_fail@plt+0x1c0d0>
   30ae4:	mov	r1, #60	; 0x3c
   30ae8:	cmp	r9, #0
   30aec:	umull	r2, r3, r7, r1
   30af0:	strd	r2, [sp, #128]	; 0x80
   30af4:	umull	r2, r3, r1, r9
   30af8:	bge	30b04 <__assert_fail@plt+0x1e510>
   30afc:	subs	r2, r2, lr
   30b00:	sbc	r3, r3, r1
   30b04:	ldr	r1, [sp, #132]	; 0x84
   30b08:	mov	r0, #0
   30b0c:	adds	r1, r2, r1
   30b10:	adc	r0, r3, r0
   30b14:	cmp	r0, r1, asr #31
   30b18:	bne	30e4c <__assert_fail@plt+0x1e858>
   30b1c:	mov	r3, r1
   30b20:	ldr	r6, [sp, #128]	; 0x80
   30b24:	b	2eff0 <__assert_fail@plt+0x1c9fc>
   30b28:	movw	r2, #23136	; 0x5a60
   30b2c:	movt	r2, #5
   30b30:	strb	r1, [r4, r0]
   30b34:	mov	r7, sl
   30b38:	mov	r1, r2
   30b3c:	mov	sl, r3
   30b40:	b	30b58 <__assert_fail@plt+0x1e564>
   30b44:	ldr	r3, [sp, #24]
   30b48:	ldr	r1, [r3, #12]!
   30b4c:	cmp	r1, #0
   30b50:	str	r3, [sp, #24]
   30b54:	beq	30b84 <__assert_fail@plt+0x1e590>
   30b58:	mov	r0, r4
   30b5c:	bl	11f40 <strcmp@plt>
   30b60:	cmp	r0, #0
   30b64:	bne	30b44 <__assert_fail@plt+0x1e550>
   30b68:	mov	sl, r7
   30b6c:	str	r6, [sp, #16]
   30b70:	ldr	r3, [sp, #24]
   30b74:	b	30300 <__assert_fail@plt+0x1dd0c>
   30b78:	mov	r3, #63	; 0x3f
   30b7c:	str	r3, [sp, #32]
   30b80:	b	2e36c <__assert_fail@plt+0x1bd78>
   30b84:	mov	r3, sl
   30b88:	mov	r2, #83	; 0x53
   30b8c:	str	r6, [sp, #16]
   30b90:	mov	sl, r7
   30b94:	strb	r2, [r3]
   30b98:	b	30960 <__assert_fail@plt+0x1e36c>
   30b9c:	cmp	r3, #65	; 0x41
   30ba0:	ldrne	r2, [pc, #776]	; 30eb0 <__assert_fail@plt+0x1e8bc>
   30ba4:	ldrne	r6, [sp, #16]
   30ba8:	bne	30bbc <__assert_fail@plt+0x1e5c8>
   30bac:	b	2e354 <__assert_fail@plt+0x1bd60>
   30bb0:	ldrb	r1, [r1]
   30bb4:	cmp	r1, r3
   30bb8:	beq	30be0 <__assert_fail@plt+0x1e5ec>
   30bbc:	ldr	r1, [r2, #12]
   30bc0:	mov	r0, r2
   30bc4:	add	r2, r2, #12
   30bc8:	cmp	r1, #0
   30bcc:	bne	30bb0 <__assert_fail@plt+0x1e5bc>
   30bd0:	cmp	r3, #0
   30bd4:	str	r6, [sp, #16]
   30bd8:	bne	30a60 <__assert_fail@plt+0x1e46c>
   30bdc:	b	2e344 <__assert_fail@plt+0x1bd50>
   30be0:	ldr	r3, [r0, #16]
   30be4:	str	r6, [sp, #16]
   30be8:	ldr	r2, [r0, #20]
   30bec:	str	r3, [sp, #32]
   30bf0:	asr	r3, r2, #31
   30bf4:	b	2e6d8 <__assert_fail@plt+0x1c0e4>
   30bf8:	add	r1, ip, #9
   30bfc:	b	2e8a0 <__assert_fail@plt+0x1c2ac>
   30c00:	mul	r3, r0, r3
   30c04:	umull	r0, r1, r0, r2
   30c08:	mla	r3, r2, ip, r3
   30c0c:	add	r1, r3, r1
   30c10:	strd	r0, [sp, #120]	; 0x78
   30c14:	mov	fp, #1
   30c18:	b	2f458 <__assert_fail@plt+0x1ce64>
   30c1c:	add	r1, ip, #8
   30c20:	b	2e898 <__assert_fail@plt+0x1c2a4>
   30c24:	add	r1, ip, #7
   30c28:	b	2e890 <__assert_fail@plt+0x1c29c>
   30c2c:	add	r1, ip, #4
   30c30:	b	2e878 <__assert_fail@plt+0x1c284>
   30c34:	ldr	r1, [sp, #16]
   30c38:	add	ip, sl, ip
   30c3c:	sxth	r3, r2
   30c40:	rsb	r7, r3, r3, lsl #3
   30c44:	ldrb	r2, [ip, #2516]	; 0x9d4
   30c48:	sub	r3, r1, r3, lsl #1
   30c4c:	sub	r1, r8, r7, lsl #3
   30c50:	sub	r2, r2, #28
   30c54:	str	r1, [sp, #80]	; 0x50
   30c58:	add	r1, sl, r2
   30c5c:	add	r1, r1, #2608	; 0xa30
   30c60:	ldrsb	r9, [r1]
   30c64:	b	2e7a8 <__assert_fail@plt+0x1c1b4>
   30c68:	add	r1, ip, #6
   30c6c:	b	2e888 <__assert_fail@plt+0x1c294>
   30c70:	add	r1, ip, #5
   30c74:	b	2e880 <__assert_fail@plt+0x1c28c>
   30c78:	mul	r7, r0, r3
   30c7c:	add	lr, ip, #1
   30c80:	umull	r0, r1, r0, r2
   30c84:	cmp	lr, #1
   30c88:	mla	r2, r2, ip, r7
   30c8c:	add	r1, r2, r1
   30c90:	strd	r0, [sp, #112]	; 0x70
   30c94:	bhi	30cb8 <__assert_fail@plt+0x1e6c4>
   30c98:	add	r2, r3, #1
   30c9c:	cmp	r2, #1
   30ca0:	bhi	30cb8 <__assert_fail@plt+0x1e6c4>
   30ca4:	cmp	ip, r3
   30ca8:	bne	30db4 <__assert_fail@plt+0x1e7c0>
   30cac:	cmp	r0, #1
   30cb0:	sbcs	r3, r1, #0
   30cb4:	bge	2f5f4 <__assert_fail@plt+0x1d000>
   30cb8:	mov	fp, #1
   30cbc:	b	2f5f4 <__assert_fail@plt+0x1d000>
   30cc0:	ldr	ip, [sp, #24]
   30cc4:	mul	r1, r9, r3
   30cc8:	umull	r6, r7, r9, r2
   30ccc:	mla	r2, r2, ip, r1
   30cd0:	add	r0, ip, #1
   30cd4:	cmp	r0, #1
   30cd8:	mov	r0, r6
   30cdc:	add	r2, r2, r7
   30ce0:	mov	r1, r2
   30ce4:	mov	r7, r2
   30ce8:	strd	r0, [sp, #104]	; 0x68
   30cec:	bhi	30d10 <__assert_fail@plt+0x1e71c>
   30cf0:	add	r2, r3, #1
   30cf4:	cmp	r2, #1
   30cf8:	bhi	30d10 <__assert_fail@plt+0x1e71c>
   30cfc:	cmp	ip, r3
   30d00:	bne	30e94 <__assert_fail@plt+0x1e8a0>
   30d04:	cmp	r6, #1
   30d08:	sbcs	r3, r7, #0
   30d0c:	bge	2f6a8 <__assert_fail@plt+0x1d0b4>
   30d10:	mov	r3, #1
   30d14:	str	r3, [sp, #40]	; 0x28
   30d18:	b	2f6a8 <__assert_fail@plt+0x1d0b4>
   30d1c:	mul	r3, r0, r3
   30d20:	umull	r0, r1, r0, r2
   30d24:	mla	r2, r2, ip, r3
   30d28:	add	r1, r2, r1
   30d2c:	strd	r0, [sp, #112]	; 0x70
   30d30:	b	30cb8 <__assert_fail@plt+0x1e6c4>
   30d34:	ldr	r1, [sp, #48]	; 0x30
   30d38:	str	r6, [sp, #16]
   30d3c:	cmp	r1, #0
   30d40:	beq	30e0c <__assert_fail@plt+0x1e818>
   30d44:	ldr	r3, [sp, #36]	; 0x24
   30d48:	add	r7, r3, #188	; 0xbc
   30d4c:	b	30d5c <__assert_fail@plt+0x1e768>
   30d50:	ldr	r1, [r7, #12]!
   30d54:	cmp	r1, #0
   30d58:	beq	30ddc <__assert_fail@plt+0x1e7e8>
   30d5c:	mov	r0, r4
   30d60:	bl	11f40 <strcmp@plt>
   30d64:	cmp	r0, #0
   30d68:	bne	30d50 <__assert_fail@plt+0x1e75c>
   30d6c:	b	2e6c4 <__assert_fail@plt+0x1c0d0>
   30d70:	mul	r7, r0, r3
   30d74:	add	lr, ip, #1
   30d78:	umull	r0, r1, r0, r2
   30d7c:	cmp	lr, #1
   30d80:	mla	r2, r2, ip, r7
   30d84:	add	r1, r2, r1
   30d88:	strd	r0, [sp, #120]	; 0x78
   30d8c:	bhi	30c14 <__assert_fail@plt+0x1e620>
   30d90:	add	r2, r3, #1
   30d94:	cmp	r2, #1
   30d98:	bhi	30c14 <__assert_fail@plt+0x1e620>
   30d9c:	cmp	ip, r3
   30da0:	bne	30dc8 <__assert_fail@plt+0x1e7d4>
   30da4:	cmp	r0, #1
   30da8:	sbcs	r3, r1, #0
   30dac:	bge	2f458 <__assert_fail@plt+0x1ce64>
   30db0:	b	30c14 <__assert_fail@plt+0x1e620>
   30db4:	ldrd	r2, [sp, #112]	; 0x70
   30db8:	cmp	r2, #0
   30dbc:	sbcs	r3, r3, #0
   30dc0:	blt	2f5f4 <__assert_fail@plt+0x1d000>
   30dc4:	b	30cb8 <__assert_fail@plt+0x1e6c4>
   30dc8:	ldrd	r2, [sp, #120]	; 0x78
   30dcc:	cmp	r2, #0
   30dd0:	sbcs	r3, r3, #0
   30dd4:	blt	2f458 <__assert_fail@plt+0x1ce64>
   30dd8:	b	30c14 <__assert_fail@plt+0x1e620>
   30ddc:	movw	r1, #23132	; 0x5a5c
   30de0:	movt	r1, #5
   30de4:	ldr	r7, [sp, #40]	; 0x28
   30de8:	b	30df8 <__assert_fail@plt+0x1e804>
   30dec:	ldr	r1, [r7, #12]!
   30df0:	cmp	r1, #0
   30df4:	beq	2e340 <__assert_fail@plt+0x1bd4c>
   30df8:	mov	r0, r4
   30dfc:	bl	11f40 <strcmp@plt>
   30e00:	cmp	r0, #0
   30e04:	bne	30dec <__assert_fail@plt+0x1e7f8>
   30e08:	b	2e6c4 <__assert_fail@plt+0x1c0d0>
   30e0c:	movw	r1, #23132	; 0x5a5c
   30e10:	movt	r1, #5
   30e14:	ldr	r6, [sp, #16]
   30e18:	ldr	r7, [sp, #40]	; 0x28
   30e1c:	b	30df8 <__assert_fail@plt+0x1e804>
   30e20:	lsl	r3, r9, #4
   30e24:	mov	lr, #1
   30e28:	lsl	r2, r7, #4
   30e2c:	orr	r3, r3, r7, lsr #28
   30e30:	subs	r2, r2, r7
   30e34:	sbc	r3, r3, r9
   30e38:	lsl	r1, r2, #2
   30e3c:	lsl	r3, r3, #2
   30e40:	mov	r6, r1
   30e44:	orr	r3, r3, r2, lsr #30
   30e48:	b	2f2e0 <__assert_fail@plt+0x1ccec>
   30e4c:	lsl	r3, r9, #4
   30e50:	mov	lr, #1
   30e54:	lsl	r2, r7, #4
   30e58:	orr	r3, r3, r7, lsr #28
   30e5c:	subs	r2, r2, r7
   30e60:	sbc	r3, r3, r9
   30e64:	lsl	r1, r2, #2
   30e68:	lsl	r3, r3, #2
   30e6c:	mov	r6, r1
   30e70:	orr	r3, r3, r2, lsr #30
   30e74:	b	2eff0 <__assert_fail@plt+0x1c9fc>
   30e78:	ldr	ip, [sp, #24]
   30e7c:	mul	r3, r9, r3
   30e80:	umull	r0, r1, r9, r2
   30e84:	mla	r2, r2, ip, r3
   30e88:	add	r1, r2, r1
   30e8c:	strd	r0, [sp, #104]	; 0x68
   30e90:	b	30d10 <__assert_fail@plt+0x1e71c>
   30e94:	ldrd	r2, [sp, #104]	; 0x68
   30e98:	cmp	r2, #0
   30e9c:	sbcs	r3, r3, #0
   30ea0:	blt	2f6a8 <__assert_fail@plt+0x1d0b4>
   30ea4:	b	30d10 <__assert_fail@plt+0x1e71c>
   30ea8:	andeq	r5, r5, r0, lsr r4
   30eac:			; <UNDEFINED> instruction: 0x000554b4
   30eb0:			; <UNDEFINED> instruction: 0x000555b0
   30eb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   30eb8:	subs	r5, r2, #0
   30ebc:	strd	r6, [sp, #8]
   30ec0:	strd	r8, [sp, #16]
   30ec4:	mov	r8, r3
   30ec8:	strd	sl, [sp, #24]
   30ecc:	str	lr, [sp, #32]
   30ed0:	sub	sp, sp, #596	; 0x254
   30ed4:	str	r0, [sp, #4]
   30ed8:	beq	31a48 <__assert_fail@plt+0x1f454>
   30edc:	ldm	r5, {r7, sl}
   30ee0:	mov	r6, r1
   30ee4:	ldrb	r3, [r1], #1
   30ee8:	cmp	r3, #9
   30eec:	bcc	30f00 <__assert_fail@plt+0x1e90c>
   30ef0:	cmp	r3, #13
   30ef4:	bls	30ee0 <__assert_fail@plt+0x1e8ec>
   30ef8:	cmp	r3, #32
   30efc:	beq	30ee0 <__assert_fail@plt+0x1e8ec>
   30f00:	mov	r2, #56	; 0x38
   30f04:	mov	r1, #0
   30f08:	add	r0, sp, #208	; 0xd0
   30f0c:	bl	12378 <memset@plt>
   30f10:	movw	r1, #23252	; 0x5ad4
   30f14:	movt	r1, #5
   30f18:	mov	r2, #4
   30f1c:	mov	r0, r6
   30f20:	bl	12594 <strncmp@plt>
   30f24:	cmp	r0, #0
   30f28:	bne	30f88 <__assert_fail@plt+0x1e994>
   30f2c:	ldrb	ip, [r6, #4]
   30f30:	add	fp, r6, #4
   30f34:	cmp	ip, #0
   30f38:	beq	30f88 <__assert_fail@plt+0x1e994>
   30f3c:	mov	r1, fp
   30f40:	mov	r3, ip
   30f44:	mov	r0, #1
   30f48:	b	30f68 <__assert_fail@plt+0x1e974>
   30f4c:	cmp	r3, #34	; 0x22
   30f50:	beq	3197c <__assert_fail@plt+0x1f388>
   30f54:	ldrb	r3, [r2, #1]
   30f58:	add	r0, r0, #1
   30f5c:	add	r1, r2, #1
   30f60:	cmp	r3, #0
   30f64:	beq	30f88 <__assert_fail@plt+0x1e994>
   30f68:	cmp	r3, #92	; 0x5c
   30f6c:	mov	r2, r1
   30f70:	bne	30f4c <__assert_fail@plt+0x1e958>
   30f74:	ldrb	r3, [r1, #1]
   30f78:	add	r2, r1, #1
   30f7c:	cmp	r3, #92	; 0x5c
   30f80:	cmpne	r3, #34	; 0x22
   30f84:	beq	30f54 <__assert_fail@plt+0x1e960>
   30f88:	mov	r1, r5
   30f8c:	add	r2, sp, #120	; 0x78
   30f90:	mov	r0, r8
   30f94:	bl	4ef60 <__assert_fail@plt+0x3c96c>
   30f98:	cmp	r0, #0
   30f9c:	beq	31a60 <__assert_fail@plt+0x1f46c>
   30fa0:	mov	r9, #0
   30fa4:	str	r8, [sp]
   30fa8:	ldr	r2, [sp, #136]	; 0x88
   30fac:	add	r1, sp, #424	; 0x1a8
   30fb0:	movw	lr, #20308	; 0x4f54
   30fb4:	movt	lr, #5
   30fb8:	movw	r0, #1900	; 0x76c
   30fbc:	str	sl, [sp, #460]	; 0x1cc
   30fc0:	ldrb	r5, [r6]
   30fc4:	add	r4, sp, #408	; 0x198
   30fc8:	add	ip, sp, #464	; 0x1d0
   30fcc:	ldr	sl, [sp, #128]	; 0x80
   30fd0:	add	r2, r2, #1
   30fd4:	asr	r3, r2, #31
   30fd8:	cmp	r5, #0
   30fdc:	ldr	r5, [sp, #120]	; 0x78
   30fe0:	moveq	r6, lr
   30fe4:	strd	r2, [r1]
   30fe8:	mov	r1, #0
   30fec:	asr	fp, sl, #31
   30ff0:	ldr	lr, [sp, #132]	; 0x84
   30ff4:	mov	r3, #0
   30ff8:	str	r6, [sp, #368]	; 0x170
   30ffc:	mov	r6, #39936	; 0x9c00
   31000:	movt	r6, #474	; 0x1da
   31004:	ldr	r2, [sp, #140]	; 0x8c
   31008:	str	r3, [sp, #416]	; 0x1a0
   3100c:	str	r5, [sp, #456]	; 0x1c8
   31010:	adds	r0, r0, r2
   31014:	adc	r1, r1, r2, asr #31
   31018:	ldr	r2, [sp, #152]	; 0x98
   3101c:	strd	r0, [r4]
   31020:	asr	r1, lr, #31
   31024:	mov	r0, lr
   31028:	add	lr, sp, #432	; 0x1b0
   3102c:	add	r4, sp, #448	; 0x1c0
   31030:	str	r2, [sp, #104]	; 0x68
   31034:	strd	r0, [lr]
   31038:	add	lr, sp, #440	; 0x1b8
   3103c:	ldr	r0, [sp, #124]	; 0x7c
   31040:	strd	sl, [lr]
   31044:	mov	lr, #2
   31048:	ldrd	sl, [sp, #216]	; 0xd8
   3104c:	str	lr, [sp, #396]	; 0x18c
   31050:	asr	r1, r0, #31
   31054:	strd	sl, [ip, #8]
   31058:	strd	r0, [r4]
   3105c:	ldrd	r0, [sp, #208]	; 0xd0
   31060:	ldrd	r4, [sp, #224]	; 0xe0
   31064:	ldrd	sl, [sp, #240]	; 0xf0
   31068:	strd	r0, [ip]
   3106c:	ldrd	r0, [sp, #232]	; 0xe8
   31070:	strd	r4, [ip, #16]
   31074:	ldrd	r4, [sp, #248]	; 0xf8
   31078:	strd	r0, [ip, #24]
   3107c:	add	r1, sp, #256	; 0x100
   31080:	ldrd	r0, [r1]
   31084:	strd	r4, [ip, #40]	; 0x28
   31088:	mov	r5, #42752	; 0xa700
   3108c:	movt	r5, #118	; 0x76
   31090:	strd	r0, [ip, #48]	; 0x30
   31094:	movw	r1, #269	; 0x10d
   31098:	strd	sl, [ip, #32]
   3109c:	add	ip, sp, #520	; 0x208
   310a0:	ldr	r4, [sp]
   310a4:	strh	r3, [ip]
   310a8:	ldr	r0, [sp, #160]	; 0xa0
   310ac:	str	r3, [sp, #524]	; 0x20c
   310b0:	str	r3, [sp, #528]	; 0x210
   310b4:	str	r3, [sp, #532]	; 0x214
   310b8:	str	r3, [sp, #536]	; 0x218
   310bc:	str	r3, [sp, #540]	; 0x21c
   310c0:	str	r3, [sp, #544]	; 0x220
   310c4:	str	r3, [sp, #548]	; 0x224
   310c8:	str	r3, [sp, #552]	; 0x228
   310cc:	str	r0, [sp, #556]	; 0x22c
   310d0:	str	r1, [sp, #560]	; 0x230
   310d4:	str	r2, [sp, #564]	; 0x234
   310d8:	str	r3, [sp, #568]	; 0x238
   310dc:	adds	r3, r7, r5
   310e0:	add	r5, r5, #7733248	; 0x760000
   310e4:	movvs	sl, #1
   310e8:	movvc	sl, #0
   310ec:	cmp	sl, #0
   310f0:	add	r2, sp, #164	; 0xa4
   310f4:	str	r3, [sp, #60]	; 0x3c
   310f8:	add	r1, sp, #60	; 0x3c
   310fc:	mov	r0, r4
   31100:	add	r5, r5, #42752	; 0xa700
   31104:	bne	31138 <__assert_fail@plt+0x1eb44>
   31108:	bl	4ef60 <__assert_fail@plt+0x3c96c>
   3110c:	cmp	r0, #0
   31110:	beq	31130 <__assert_fail@plt+0x1eb3c>
   31114:	ldr	r3, [sp, #204]	; 0xcc
   31118:	cmp	r3, #0
   3111c:	beq	31130 <__assert_fail@plt+0x1eb3c>
   31120:	ldr	r2, [sp, #196]	; 0xc4
   31124:	ldr	r1, [sp, #564]	; 0x234
   31128:	cmp	r2, r1
   3112c:	bne	31af0 <__assert_fail@plt+0x1f4fc>
   31130:	cmp	r5, r6
   31134:	bne	310dc <__assert_fail@plt+0x1eae8>
   31138:	str	r4, [sp]
   3113c:	ldr	r0, [sp, #556]	; 0x22c
   31140:	cmp	r0, #0
   31144:	beq	31160 <__assert_fail@plt+0x1eb6c>
   31148:	ldr	r1, [sp, #568]	; 0x238
   3114c:	cmp	r1, #0
   31150:	beq	31160 <__assert_fail@plt+0x1eb6c>
   31154:	bl	11f40 <strcmp@plt>
   31158:	cmp	r0, #0
   3115c:	beq	31a20 <__assert_fail@plt+0x1f42c>
   31160:	add	r0, sp, #368	; 0x170
   31164:	bl	2dc3c <__assert_fail@plt+0x1b648>
   31168:	cmp	r0, #0
   3116c:	bne	31974 <__assert_fail@plt+0x1f380>
   31170:	ldrb	r5, [sp, #520]	; 0x208
   31174:	cmp	r5, #0
   31178:	beq	311c4 <__assert_fail@plt+0x1ebd0>
   3117c:	add	r3, sp, #456	; 0x1c8
   31180:	ldr	r1, [sp, #4]
   31184:	ldrd	r2, [r3]
   31188:	strd	r2, [r1]
   3118c:	ldr	r0, [sp]
   31190:	cmp	r0, r8
   31194:	beq	3119c <__assert_fail@plt+0x1eba8>
   31198:	bl	4ef2c <__assert_fail@plt+0x3c938>
   3119c:	mov	r0, r9
   311a0:	bl	38b10 <__assert_fail@plt+0x2651c>
   311a4:	mov	r0, r5
   311a8:	add	sp, sp, #596	; 0x254
   311ac:	ldrd	r4, [sp]
   311b0:	ldrd	r6, [sp, #8]
   311b4:	ldrd	r8, [sp, #16]
   311b8:	ldrd	sl, [sp, #24]
   311bc:	add	sp, sp, #32
   311c0:	pop	{pc}		; (ldr pc, [sp], #4)
   311c4:	ldr	ip, [sp, #524]	; 0x20c
   311c8:	ldr	r1, [sp, #528]	; 0x210
   311cc:	ldr	lr, [sp, #532]	; 0x214
   311d0:	ldr	fp, [sp, #540]	; 0x21c
   311d4:	str	r1, [sp, #8]
   311d8:	ldr	r3, [sp, #544]	; 0x220
   311dc:	ldr	r2, [sp, #536]	; 0x218
   311e0:	orr	sl, fp, ip
   311e4:	orr	sl, sl, r1
   311e8:	add	r3, lr, r3
   311ec:	orr	r3, r3, r2
   311f0:	orr	r3, r3, sl
   311f4:	cmp	r3, #1
   311f8:	bgt	3118c <__assert_fail@plt+0x1eb98>
   311fc:	add	r3, sp, #408	; 0x198
   31200:	ldrd	r2, [r3]
   31204:	cmp	r2, #0
   31208:	sbcs	r1, r3, #0
   3120c:	blt	31aa0 <__assert_fail@plt+0x1f4ac>
   31210:	ldr	r1, [sp, #416]	; 0x1a0
   31214:	cmp	r1, #2
   31218:	beq	31a80 <__assert_fail@plt+0x1f48c>
   3121c:	movw	r6, #63636	; 0xf894
   31220:	movt	r6, #65535	; 0xffff
   31224:	adds	r0, r2, r6
   31228:	mvn	r7, #0
   3122c:	movw	r6, #1900	; 0x76c
   31230:	mov	r1, #0
   31234:	str	r0, [sp, #16]
   31238:	adc	r0, r3, r7
   3123c:	mov	r7, #0
   31240:	cmp	r3, r7
   31244:	cmpeq	r2, r6
   31248:	str	r0, [sp, #20]
   3124c:	ldrd	r2, [sp, #16]
   31250:	bcs	31a6c <__assert_fail@plt+0x1f478>
   31254:	cmp	r2, #0
   31258:	sbcs	r3, r3, #0
   3125c:	bge	31a78 <__assert_fail@plt+0x1f484>
   31260:	ldrd	r6, [sp, #16]
   31264:	asr	r3, r6, #31
   31268:	str	r6, [sp, #16]
   3126c:	str	r6, [sp, #92]	; 0x5c
   31270:	cmp	r7, r3
   31274:	cmpeq	r6, r6
   31278:	movne	r1, #1
   3127c:	and	r1, r1, #1
   31280:	cmp	r1, #0
   31284:	bne	3118c <__assert_fail@plt+0x1eb98>
   31288:	add	r3, sp, #424	; 0x1a8
   3128c:	mvn	r6, #0
   31290:	ldrd	r2, [r3]
   31294:	mvn	r7, #0
   31298:	adds	r4, r2, r6
   3129c:	adcs	r5, r3, r7
   312a0:	asr	r3, r4, #31
   312a4:	mov	r6, r4
   312a8:	mov	r7, r5
   312ac:	movvs	r5, #1
   312b0:	movvc	r5, #0
   312b4:	cmp	r7, r3
   312b8:	cmpeq	r4, r4
   312bc:	strd	r6, [sp, #24]
   312c0:	movne	r5, #1
   312c4:	str	r4, [sp, #88]	; 0x58
   312c8:	cmp	r5, #0
   312cc:	bne	31adc <__assert_fail@plt+0x1f4e8>
   312d0:	add	r3, sp, #432	; 0x1b0
   312d4:	mov	r6, #0
   312d8:	ldrd	r4, [r3]
   312dc:	mov	r7, #0
   312e0:	asr	r3, r4, #31
   312e4:	strd	r4, [sp, #32]
   312e8:	str	r4, [sp, #84]	; 0x54
   312ec:	cmp	r5, r3
   312f0:	cmpeq	r4, r4
   312f4:	bne	31adc <__assert_fail@plt+0x1f4e8>
   312f8:	cmp	fp, #0
   312fc:	bne	31b0c <__assert_fail@plt+0x1f518>
   31300:	ldr	r2, [sp, #8]
   31304:	ldrb	r3, [sp, #521]	; 0x209
   31308:	orrs	r2, ip, r2
   3130c:	movne	r3, #0
   31310:	andeq	r3, r3, #1
   31314:	cmp	r3, #0
   31318:	bne	31b0c <__assert_fail@plt+0x1f518>
   3131c:	str	fp, [sp, #8]
   31320:	str	fp, [sp, #40]	; 0x28
   31324:	strd	r6, [sp, #72]	; 0x48
   31328:	str	fp, [sp, #80]	; 0x50
   3132c:	str	fp, [sp, #460]	; 0x1cc
   31330:	cmp	sl, #0
   31334:	mvnne	r3, #0
   31338:	strne	r3, [sp, #104]	; 0x68
   3133c:	cmp	lr, #0
   31340:	bne	31b5c <__assert_fail@plt+0x1f568>
   31344:	ldr	r3, [sp, #104]	; 0x68
   31348:	str	r3, [sp, #48]	; 0x30
   3134c:	mvn	r3, #0
   31350:	add	r1, sp, #72	; 0x48
   31354:	ldr	r0, [sp]
   31358:	str	r3, [sp, #96]	; 0x60
   3135c:	bl	4f07c <__assert_fail@plt+0x3ca88>
   31360:	ldr	r3, [sp, #96]	; 0x60
   31364:	mov	sl, r0
   31368:	cmp	r3, #0
   3136c:	blt	31798 <__assert_fail@plt+0x1f1a4>
   31370:	ldr	ip, [sp, #16]
   31374:	ldr	r0, [sp, #24]
   31378:	ldrd	r2, [sp, #84]	; 0x54
   3137c:	ldr	r1, [sp, #92]	; 0x5c
   31380:	eor	r3, r3, r0
   31384:	eor	r1, r1, ip
   31388:	ldr	ip, [sp, #32]
   3138c:	orr	r3, r3, r1
   31390:	ldrd	r0, [sp, #72]	; 0x48
   31394:	eor	r2, r2, ip
   31398:	orr	r3, r3, r2
   3139c:	ldr	r2, [sp, #80]	; 0x50
   313a0:	eor	r0, r0, fp
   313a4:	orr	r3, r3, r0
   313a8:	ldr	r0, [sp, #40]	; 0x28
   313ac:	eor	r1, r1, r0
   313b0:	orr	r3, r3, r1
   313b4:	ldr	r1, [sp, #8]
   313b8:	eor	r2, r2, r1
   313bc:	orrs	r3, r3, r2
   313c0:	bne	31798 <__assert_fail@plt+0x1f1a4>
   313c4:	ldr	r3, [sp, #528]	; 0x210
   313c8:	cmp	r3, #0
   313cc:	beq	314e4 <__assert_fail@plt+0x1eef0>
   313d0:	ldr	r3, [sp, #524]	; 0x20c
   313d4:	cmp	r3, #0
   313d8:	bne	314e4 <__assert_fail@plt+0x1eef0>
   313dc:	add	r3, sp, #376	; 0x178
   313e0:	ldrd	r4, [r3]
   313e4:	cmp	r4, #1
   313e8:	strd	r4, [sp, #16]
   313ec:	sbcs	r3, r5, #0
   313f0:	blt	31418 <__assert_fail@plt+0x1ee24>
   313f4:	ldr	r0, [sp, #96]	; 0x60
   313f8:	ldr	r1, [sp, #384]	; 0x180
   313fc:	cmp	r0, r1
   31400:	beq	31418 <__assert_fail@plt+0x1ee24>
   31404:	subs	r3, r4, #1
   31408:	str	r3, [sp, #16]
   3140c:	ldr	r3, [sp, #20]
   31410:	sbc	r3, r3, #0
   31414:	str	r3, [sp, #20]
   31418:	ldrd	r0, [sp, #16]
   3141c:	mov	ip, #0
   31420:	cmp	r1, r0, asr #31
   31424:	bne	31c3c <__assert_fail@plt+0x1f648>
   31428:	mov	r3, #7
   3142c:	smull	r2, r3, r0, r3
   31430:	mov	r6, r2
   31434:	mov	lr, r3
   31438:	cmp	ip, #0
   3143c:	mov	r1, lr
   31440:	bne	31974 <__assert_fail@plt+0x1f380>
   31444:	ldr	r2, [sp, #96]	; 0x60
   31448:	movw	lr, #9363	; 0x2493
   3144c:	movt	lr, #37449	; 0x9249
   31450:	ldr	r3, [sp, #384]	; 0x180
   31454:	sub	r3, r3, r2
   31458:	add	r3, r3, #7
   3145c:	asr	r2, r3, #31
   31460:	smull	r4, lr, lr, r3
   31464:	add	lr, lr, r3
   31468:	rsb	r2, r2, lr, asr #2
   3146c:	rsb	r2, r2, r2, lsl #3
   31470:	sub	r3, r3, r2
   31474:	mov	r2, r3
   31478:	asr	r3, r3, #31
   3147c:	adds	r6, r2, r6
   31480:	adcs	r7, r3, r1
   31484:	movvs	r5, #1
   31488:	movvc	r5, #0
   3148c:	bvs	31974 <__assert_fail@plt+0x1f380>
   31490:	ldr	r2, [sp, #84]	; 0x54
   31494:	asr	r3, r2, #31
   31498:	adds	r0, r6, r2
   3149c:	adcs	r1, r7, r3
   314a0:	asr	r3, r0, #31
   314a4:	str	r0, [sp, #84]	; 0x54
   314a8:	movvs	ip, #1
   314ac:	movvc	ip, #0
   314b0:	cmp	r1, r3
   314b4:	cmpeq	r0, r0
   314b8:	movne	ip, #1
   314bc:	cmp	ip, #0
   314c0:	bne	3118c <__assert_fail@plt+0x1eb98>
   314c4:	mvn	r3, #0
   314c8:	add	r1, sp, #72	; 0x48
   314cc:	ldr	r0, [sp]
   314d0:	str	r3, [sp, #104]	; 0x68
   314d4:	bl	4f07c <__assert_fail@plt+0x3ca88>
   314d8:	cmn	r0, #1
   314dc:	mov	sl, r0
   314e0:	beq	3118c <__assert_fail@plt+0x1eb98>
   314e4:	add	r1, sp, #472	; 0x1d8
   314e8:	add	r3, sp, #464	; 0x1d0
   314ec:	ldrd	r4, [r1]
   314f0:	add	r1, sp, #480	; 0x1e0
   314f4:	ldrd	r0, [r1]
   314f8:	ldrd	r6, [r3]
   314fc:	strd	r0, [sp, #16]
   31500:	ldr	ip, [sp, #16]
   31504:	orr	r0, r6, r4
   31508:	orr	r1, r7, r5
   3150c:	orr	r2, r0, ip
   31510:	ldr	ip, [sp, #20]
   31514:	orr	r3, r1, ip
   31518:	orrs	r3, r2, r3
   3151c:	beq	31614 <__assert_fail@plt+0x1f020>
   31520:	ldr	r2, [sp, #92]	; 0x5c
   31524:	asr	r3, r2, #31
   31528:	adds	r0, r2, r6
   3152c:	mov	r6, r0
   31530:	adcs	r1, r3, r7
   31534:	asr	r3, r0, #31
   31538:	mov	r7, r1
   3153c:	movvs	r1, #1
   31540:	movvc	r1, #0
   31544:	cmp	r7, r3
   31548:	cmpeq	r0, r0
   3154c:	strd	r6, [sp, #24]
   31550:	bne	31974 <__assert_fail@plt+0x1f380>
   31554:	cmp	r1, #0
   31558:	bne	31974 <__assert_fail@plt+0x1f380>
   3155c:	ldr	r2, [sp, #88]	; 0x58
   31560:	asr	r3, r2, #31
   31564:	adds	r0, r2, r4
   31568:	mov	r4, r0
   3156c:	adcs	r1, r3, r5
   31570:	asr	r3, r0, #31
   31574:	mov	r5, r1
   31578:	movvs	r1, #1
   3157c:	movvc	r1, #0
   31580:	cmp	r5, r3
   31584:	cmpeq	r0, r0
   31588:	strd	r4, [sp, #32]
   3158c:	bne	31974 <__assert_fail@plt+0x1f380>
   31590:	cmp	r1, #0
   31594:	bne	31974 <__assert_fail@plt+0x1f380>
   31598:	ldrd	r0, [sp, #16]
   3159c:	ldr	r2, [sp, #84]	; 0x54
   315a0:	asr	r3, r2, #31
   315a4:	adds	r6, r2, r0
   315a8:	adcs	r7, r3, r1
   315ac:	asr	r3, r6, #31
   315b0:	movvs	r5, #1
   315b4:	movvc	r5, #0
   315b8:	cmp	r7, r3
   315bc:	cmpeq	r6, r6
   315c0:	bne	31974 <__assert_fail@plt+0x1f380>
   315c4:	cmp	r5, #0
   315c8:	bne	31974 <__assert_fail@plt+0x1f380>
   315cc:	add	r1, sp, #72	; 0x48
   315d0:	ldr	r0, [sp]
   315d4:	str	fp, [sp, #72]	; 0x48
   315d8:	ldr	r3, [sp, #40]	; 0x28
   315dc:	str	r3, [sp, #76]	; 0x4c
   315e0:	ldr	r3, [sp, #8]
   315e4:	str	r6, [sp, #84]	; 0x54
   315e8:	str	r3, [sp, #80]	; 0x50
   315ec:	ldr	r3, [sp, #32]
   315f0:	str	r3, [sp, #88]	; 0x58
   315f4:	ldr	r3, [sp, #24]
   315f8:	str	r3, [sp, #92]	; 0x5c
   315fc:	ldr	r3, [sp, #48]	; 0x30
   31600:	str	r3, [sp, #104]	; 0x68
   31604:	bl	4f07c <__assert_fail@plt+0x3ca88>
   31608:	cmn	r0, #1
   3160c:	mov	sl, r0
   31610:	beq	3118c <__assert_fail@plt+0x1eb98>
   31614:	ldr	r3, [sp, #544]	; 0x220
   31618:	cmp	r3, #0
   3161c:	beq	31650 <__assert_fail@plt+0x1f05c>
   31620:	ldr	r2, [sp, #108]	; 0x6c
   31624:	ldr	r1, [sp, #392]	; 0x188
   31628:	asr	r5, r2, #31
   3162c:	subs	r2, r1, r2
   31630:	rsc	r3, r5, r1, asr #31
   31634:	subs	r4, sl, r2
   31638:	asr	r1, r4, #31
   3163c:	rsc	r5, r3, sl, asr #31
   31640:	cmp	r5, r1
   31644:	cmpeq	r4, r4
   31648:	bne	31974 <__assert_fail@plt+0x1f380>
   3164c:	mov	sl, r4
   31650:	ldr	r2, [sp, #488]	; 0x1e8
   31654:	mov	r5, #0
   31658:	ldr	r0, [sp, #492]	; 0x1ec
   3165c:	cmp	r0, r2, asr #31
   31660:	bne	31bf4 <__assert_fail@plt+0x1f600>
   31664:	mov	r0, #3600	; 0xe10
   31668:	smull	r0, r1, r2, r0
   3166c:	mov	r2, r0
   31670:	mov	r3, r1
   31674:	cmp	r5, #0
   31678:	bne	31974 <__assert_fail@plt+0x1f380>
   3167c:	asr	fp, sl, #31
   31680:	adds	r0, sl, r2
   31684:	adcs	r1, fp, r3
   31688:	movvs	r3, #1
   3168c:	movvc	r3, #0
   31690:	bvs	3118c <__assert_fail@plt+0x1eb98>
   31694:	ldr	r2, [sp, #496]	; 0x1f0
   31698:	mov	r5, r3
   3169c:	ldr	r6, [sp, #500]	; 0x1f4
   316a0:	cmp	r6, r2, asr #31
   316a4:	bne	31c90 <__assert_fail@plt+0x1f69c>
   316a8:	mov	r6, #60	; 0x3c
   316ac:	smull	r6, r7, r2, r6
   316b0:	mov	lr, r6
   316b4:	mov	ip, r7
   316b8:	cmp	r5, #0
   316bc:	bne	31974 <__assert_fail@plt+0x1f380>
   316c0:	adds	r6, r0, lr
   316c4:	adcs	r7, r1, ip
   316c8:	movvs	r1, #1
   316cc:	movvc	r1, #0
   316d0:	bvs	3118c <__assert_fail@plt+0x1eb98>
   316d4:	add	r3, sp, #504	; 0x1f8
   316d8:	ldrd	r2, [r3]
   316dc:	adds	r4, r6, r2
   316e0:	adcs	r5, r7, r3
   316e4:	strd	r4, [sp, #8]
   316e8:	movvs	r5, #1
   316ec:	movvc	r5, #0
   316f0:	bvs	31adc <__assert_fail@plt+0x1f4e8>
   316f4:	ldr	ip, [sp, #460]	; 0x1cc
   316f8:	mov	r6, #51712	; 0xca00
   316fc:	movt	r6, #15258	; 0x3b9a
   31700:	mov	r4, #0
   31704:	ldr	r0, [sp, #512]	; 0x200
   31708:	add	r3, pc, #984	; 0x3d8
   3170c:	ldrd	r2, [r3]
   31710:	asr	r1, r0, #31
   31714:	adds	sl, r0, ip
   31718:	mov	r0, sl
   3171c:	adc	fp, r1, ip, asr #31
   31720:	mov	r1, fp
   31724:	bl	50488 <__assert_fail@plt+0x3de94>
   31728:	adds	r0, r2, r6
   3172c:	mov	r2, r6
   31730:	adc	r1, r3, r4
   31734:	mov	r3, r4
   31738:	bl	50488 <__assert_fail@plt+0x3de94>
   3173c:	mov	r7, r2
   31740:	mov	r1, r3
   31744:	subs	r0, sl, r7
   31748:	mov	r2, r6
   3174c:	sbc	r1, fp, r1
   31750:	mov	r3, r4
   31754:	bl	50488 <__assert_fail@plt+0x3de94>
   31758:	ldrd	sl, [sp, #8]
   3175c:	asr	r1, r0, #31
   31760:	adds	r2, sl, r0
   31764:	adcs	r3, fp, r1
   31768:	asr	r1, r2, #31
   3176c:	movvs	ip, #1
   31770:	movvc	ip, r4
   31774:	cmp	r3, r1
   31778:	cmpeq	r2, r2
   3177c:	bne	3118c <__assert_fail@plt+0x1eb98>
   31780:	cmp	ip, r4
   31784:	bne	3118c <__assert_fail@plt+0x1eb98>
   31788:	ldr	r1, [sp, #4]
   3178c:	mov	r5, #1
   31790:	stm	r1, {r2, r7}
   31794:	b	3118c <__assert_fail@plt+0x1eb98>
   31798:	ldr	r5, [sp, #544]	; 0x220
   3179c:	cmp	r5, #0
   317a0:	beq	3118c <__assert_fail@plt+0x1eb98>
   317a4:	ldr	r6, [sp, #392]	; 0x188
   317a8:	movw	r3, #46021	; 0xb3c5
   317ac:	movt	r3, #37282	; 0x91a2
   317b0:	mov	r2, #88	; 0x58
   317b4:	movw	r0, #22616	; 0x5858
   317b8:	add	r7, sp, #164	; 0xa4
   317bc:	movw	r1, #23260	; 0x5adc
   317c0:	movt	r1, #5
   317c4:	strh	r0, [r7], #3
   317c8:	mov	r0, r7
   317cc:	smull	ip, r3, r3, r6
   317d0:	cmp	r6, #0
   317d4:	strb	r2, [sp, #166]	; 0xa6
   317d8:	asr	r5, r6, #31
   317dc:	movlt	r2, #45	; 0x2d
   317e0:	movge	r2, #43	; 0x2b
   317e4:	add	r3, r3, r6
   317e8:	rsb	r5, r5, r3, asr #11
   317ec:	eor	r3, r5, r5, asr #31
   317f0:	sub	r3, r3, r5, asr #31
   317f4:	bl	124b0 <sprintf@plt>
   317f8:	mov	r3, #3600	; 0xe10
   317fc:	mov	r1, r0
   31800:	mls	r5, r3, r5, r6
   31804:	cmp	r5, #0
   31808:	beq	318a8 <__assert_fail@plt+0x1f2b4>
   3180c:	cmp	r5, #0
   31810:	movw	r3, #34953	; 0x8889
   31814:	movt	r3, #34952	; 0x8888
   31818:	rsblt	r5, r5, #0
   3181c:	movw	r0, #33205	; 0x81b5
   31820:	movt	r0, #6990	; 0x1b4e
   31824:	umull	ip, r3, r3, r5
   31828:	movw	r2, #52429	; 0xcccd
   3182c:	movt	r2, #52428	; 0xcccc
   31830:	umull	ip, r0, r0, r5
   31834:	mov	r6, #58	; 0x3a
   31838:	lsr	ip, r3, #5
   3183c:	strb	r6, [r7, r1]
   31840:	add	r1, r7, r1
   31844:	lsr	r0, r0, #6
   31848:	rsb	r3, ip, ip, lsl #4
   3184c:	umull	r4, lr, r2, ip
   31850:	add	r0, r0, #48	; 0x30
   31854:	subs	r3, r5, r3, lsl #2
   31858:	strb	r0, [r1, #1]
   3185c:	lsr	lr, lr, #3
   31860:	add	lr, lr, lr, lsl #2
   31864:	sub	r0, ip, lr, lsl #1
   31868:	add	r0, r0, #48	; 0x30
   3186c:	strb	r0, [r1, #2]
   31870:	addeq	r0, r1, #3
   31874:	beq	318a0 <__assert_fail@plt+0x1f2ac>
   31878:	umull	r0, r2, r2, r3
   3187c:	add	r0, r1, #6
   31880:	strb	r6, [r1, #3]
   31884:	lsr	r2, r2, #3
   31888:	add	ip, r2, r2, lsl #2
   3188c:	add	r2, r2, #48	; 0x30
   31890:	sub	r3, r3, ip, lsl #1
   31894:	strb	r2, [r1, #4]
   31898:	add	r3, r3, #48	; 0x30
   3189c:	strb	r3, [r1, #5]
   318a0:	mov	r3, #0
   318a4:	strb	r3, [r0]
   318a8:	add	r0, sp, #164	; 0xa4
   318ac:	bl	4ee94 <__assert_fail@plt+0x3c8a0>
   318b0:	subs	r5, r0, #0
   318b4:	beq	3118c <__assert_fail@plt+0x1eb98>
   318b8:	ldr	r2, [sp, #40]	; 0x28
   318bc:	mvn	r3, #0
   318c0:	add	r1, sp, #72	; 0x48
   318c4:	str	fp, [sp, #72]	; 0x48
   318c8:	str	r2, [sp, #76]	; 0x4c
   318cc:	ldr	r2, [sp, #8]
   318d0:	str	r3, [sp, #96]	; 0x60
   318d4:	ldr	r3, [sp, #48]	; 0x30
   318d8:	str	r2, [sp, #80]	; 0x50
   318dc:	ldr	r2, [sp, #32]
   318e0:	str	r2, [sp, #84]	; 0x54
   318e4:	ldr	r2, [sp, #24]
   318e8:	str	r3, [sp, #104]	; 0x68
   318ec:	str	r2, [sp, #88]	; 0x58
   318f0:	ldr	r2, [sp, #16]
   318f4:	str	r2, [sp, #92]	; 0x5c
   318f8:	bl	4f07c <__assert_fail@plt+0x3ca88>
   318fc:	ldr	r3, [sp, #96]	; 0x60
   31900:	mov	sl, r0
   31904:	cmp	r3, #0
   31908:	blt	31c2c <__assert_fail@plt+0x1f638>
   3190c:	ldr	lr, [sp, #16]
   31910:	mov	r0, r5
   31914:	ldr	r1, [sp, #24]
   31918:	ldr	r3, [sp, #84]	; 0x54
   3191c:	ldr	ip, [sp, #88]	; 0x58
   31920:	ldr	r2, [sp, #92]	; 0x5c
   31924:	eor	ip, ip, r1
   31928:	ldr	r1, [sp, #72]	; 0x48
   3192c:	eor	lr, lr, r2
   31930:	orr	r2, ip, lr
   31934:	ldr	ip, [sp, #32]
   31938:	eor	r5, fp, r1
   3193c:	ldr	lr, [sp, #76]	; 0x4c
   31940:	eor	r3, r3, ip
   31944:	ldr	ip, [sp, #80]	; 0x50
   31948:	orr	r3, r2, r3
   3194c:	orr	r5, r3, r5
   31950:	ldr	r3, [sp, #40]	; 0x28
   31954:	eor	lr, lr, r3
   31958:	ldr	r3, [sp, #8]
   3195c:	orr	r5, r5, lr
   31960:	eor	ip, ip, r3
   31964:	orr	r5, r5, ip
   31968:	bl	4ef2c <__assert_fail@plt+0x3c938>
   3196c:	cmp	r5, #0
   31970:	beq	313c4 <__assert_fail@plt+0x1edd0>
   31974:	mov	r5, #0
   31978:	b	3118c <__assert_fail@plt+0x1eb98>
   3197c:	cmp	r0, #100	; 0x64
   31980:	addle	r0, sp, #268	; 0x10c
   31984:	movle	r9, #0
   31988:	bgt	31a30 <__assert_fail@plt+0x1f43c>
   3198c:	cmp	ip, #34	; 0x22
   31990:	mov	r2, r0
   31994:	beq	319c0 <__assert_fail@plt+0x1f3cc>
   31998:	sub	ip, ip, #92	; 0x5c
   3199c:	clz	ip, ip
   319a0:	lsr	ip, ip, #5
   319a4:	add	r3, fp, ip
   319a8:	ldrb	r1, [fp, ip]
   319ac:	add	fp, r3, #1
   319b0:	ldrb	ip, [r3, #1]
   319b4:	strb	r1, [r2], #1
   319b8:	cmp	ip, #34	; 0x22
   319bc:	bne	31998 <__assert_fail@plt+0x1f3a4>
   319c0:	mov	r3, #0
   319c4:	strb	r3, [r2]
   319c8:	bl	4ee94 <__assert_fail@plt+0x3c8a0>
   319cc:	subs	r4, r0, #0
   319d0:	moveq	r5, r4
   319d4:	str	r4, [sp]
   319d8:	beq	3119c <__assert_fail@plt+0x1eba8>
   319dc:	add	fp, fp, #1
   319e0:	mov	r6, fp
   319e4:	ldrb	r3, [fp], #1
   319e8:	cmp	r3, #9
   319ec:	bcc	31a00 <__assert_fail@plt+0x1f40c>
   319f0:	cmp	r3, #13
   319f4:	bls	319e0 <__assert_fail@plt+0x1f3ec>
   319f8:	cmp	r3, #32
   319fc:	beq	319e0 <__assert_fail@plt+0x1f3ec>
   31a00:	mov	r1, r5
   31a04:	mov	r0, r4
   31a08:	str	r4, [sp]
   31a0c:	add	r2, sp, #120	; 0x78
   31a10:	bl	4ef60 <__assert_fail@plt+0x3c96c>
   31a14:	subs	r5, r0, #0
   31a18:	bne	30fa8 <__assert_fail@plt+0x1e9b4>
   31a1c:	b	3118c <__assert_fail@plt+0x1eb98>
   31a20:	mvn	r3, #0
   31a24:	str	r3, [sp, #564]	; 0x234
   31a28:	str	r0, [sp, #568]	; 0x238
   31a2c:	b	31160 <__assert_fail@plt+0x1eb6c>
   31a30:	bl	3b49c <__assert_fail@plt+0x28ea8>
   31a34:	subs	r9, r0, #0
   31a38:	beq	31a60 <__assert_fail@plt+0x1f46c>
   31a3c:	ldrb	ip, [r6, #4]
   31a40:	mov	r0, r9
   31a44:	b	3198c <__assert_fail@plt+0x1f398>
   31a48:	add	r0, sp, #64	; 0x40
   31a4c:	str	r1, [sp]
   31a50:	mov	r5, r0
   31a54:	bl	4faa0 <__assert_fail@plt+0x3d4ac>
   31a58:	ldr	r1, [sp]
   31a5c:	b	30edc <__assert_fail@plt+0x1e8e8>
   31a60:	mov	r5, #0
   31a64:	mov	r9, r5
   31a68:	b	3119c <__assert_fail@plt+0x1eba8>
   31a6c:	cmp	r2, #0
   31a70:	sbcs	r3, r3, #0
   31a74:	bge	31260 <__assert_fail@plt+0x1ec6c>
   31a78:	mov	r1, #1
   31a7c:	b	31260 <__assert_fail@plt+0x1ec6c>
   31a80:	cmp	r2, #69	; 0x45
   31a84:	sbcs	r1, r3, #0
   31a88:	mov	r1, #0
   31a8c:	movwge	r6, #1900	; 0x76c
   31a90:	movlt	r6, #2000	; 0x7d0
   31a94:	adds	r2, r2, r6
   31a98:	adc	r3, r3, r1
   31a9c:	b	3121c <__assert_fail@plt+0x1ec28>
   31aa0:	movw	r0, #63636	; 0xf894
   31aa4:	movt	r0, #65535	; 0xffff
   31aa8:	subs	r6, r0, r2
   31aac:	mvn	r1, #0
   31ab0:	sbcs	r7, r1, r3
   31ab4:	asr	r3, r6, #31
   31ab8:	mov	r4, r5
   31abc:	movvs	r4, #1
   31ac0:	str	r6, [sp, #16]
   31ac4:	cmp	r7, r3
   31ac8:	str	r6, [sp, #92]	; 0x5c
   31acc:	cmpeq	r6, r6
   31ad0:	movne	r4, #1
   31ad4:	and	r1, r4, #1
   31ad8:	b	31280 <__assert_fail@plt+0x1ec8c>
   31adc:	mov	r5, r1
   31ae0:	b	3118c <__assert_fail@plt+0x1eb98>
   31ae4:	nop	{0}
   31ae8:	blcc	fe6e42f0 <stdout@@GLIBC_2.4+0xfe67cd9c>
   31aec:	andeq	r0, r0, r0
   31af0:	movw	r1, #269	; 0x10d
   31af4:	str	r4, [sp]
   31af8:	str	r3, [sp, #568]	; 0x238
   31afc:	str	r1, [sp, #572]	; 0x23c
   31b00:	str	r2, [sp, #576]	; 0x240
   31b04:	str	sl, [sp, #580]	; 0x244
   31b08:	b	3113c <__assert_fail@plt+0x1eb48>
   31b0c:	ldr	r1, [sp, #396]	; 0x18c
   31b10:	add	r3, sp, #440	; 0x1b8
   31b14:	ldrd	r2, [r3]
   31b18:	cmp	r1, #0
   31b1c:	str	r1, [sp, #8]
   31b20:	beq	31bbc <__assert_fail@plt+0x1f5c8>
   31b24:	cmp	r1, #1
   31b28:	beq	31b6c <__assert_fail@plt+0x1f578>
   31b2c:	cmp	r3, #0
   31b30:	cmpeq	r2, #23
   31b34:	bhi	31bac <__assert_fail@plt+0x1f5b8>
   31b38:	mov	r3, r2
   31b3c:	str	r2, [sp, #8]
   31b40:	str	r3, [sp, #80]	; 0x50
   31b44:	ldr	r3, [sp, #448]	; 0x1c0
   31b48:	ldr	fp, [sp, #456]	; 0x1c8
   31b4c:	str	r3, [sp, #40]	; 0x28
   31b50:	str	fp, [sp, #72]	; 0x48
   31b54:	str	r3, [sp, #76]	; 0x4c
   31b58:	b	31330 <__assert_fail@plt+0x1ed3c>
   31b5c:	ldr	r3, [sp, #388]	; 0x184
   31b60:	str	r3, [sp, #48]	; 0x30
   31b64:	str	r3, [sp, #104]	; 0x68
   31b68:	b	3134c <__assert_fail@plt+0x1ed58>
   31b6c:	subs	r1, r2, #1
   31b70:	str	r1, [sp, #48]	; 0x30
   31b74:	sbc	r1, r3, #0
   31b78:	str	r1, [sp, #52]	; 0x34
   31b7c:	ldrd	r0, [sp, #48]	; 0x30
   31b80:	cmp	r1, #0
   31b84:	cmpeq	r0, #10
   31b88:	addls	r3, r2, #12
   31b8c:	strls	r3, [sp, #8]
   31b90:	bls	31b40 <__assert_fail@plt+0x1f54c>
   31b94:	cmp	r3, #0
   31b98:	cmpeq	r2, #12
   31b9c:	moveq	r3, #12
   31ba0:	streq	r3, [sp, #8]
   31ba4:	streq	r3, [sp, #80]	; 0x50
   31ba8:	beq	31b44 <__assert_fail@plt+0x1f550>
   31bac:	mvn	r3, #0
   31bb0:	mov	r5, #0
   31bb4:	str	r3, [sp, #80]	; 0x50
   31bb8:	b	3118c <__assert_fail@plt+0x1eb98>
   31bbc:	subs	r1, r2, #1
   31bc0:	str	r1, [sp, #40]	; 0x28
   31bc4:	sbc	r1, r3, #0
   31bc8:	str	r1, [sp, #44]	; 0x2c
   31bcc:	ldrd	r0, [sp, #40]	; 0x28
   31bd0:	cmp	r1, #0
   31bd4:	cmpeq	r0, #10
   31bd8:	bls	31b38 <__assert_fail@plt+0x1f544>
   31bdc:	cmp	r3, #0
   31be0:	cmpeq	r2, #12
   31be4:	bne	31bac <__assert_fail@plt+0x1f5b8>
   31be8:	ldr	r3, [sp, #8]
   31bec:	str	r3, [sp, #80]	; 0x50
   31bf0:	b	31b44 <__assert_fail@plt+0x1f550>
   31bf4:	mov	ip, #3600	; 0xe10
   31bf8:	cmp	r0, #0
   31bfc:	umull	r2, r3, r2, ip
   31c00:	umull	r6, r7, ip, r0
   31c04:	bge	31c10 <__assert_fail@plt+0x1f61c>
   31c08:	subs	r6, r6, r5
   31c0c:	sbc	r7, r7, ip
   31c10:	adds	r0, r6, r3
   31c14:	mov	lr, #0
   31c18:	adc	r1, r7, lr
   31c1c:	cmp	r1, r0, asr #31
   31c20:	bne	31cc8 <__assert_fail@plt+0x1f6d4>
   31c24:	mov	r3, r0
   31c28:	b	31674 <__assert_fail@plt+0x1f080>
   31c2c:	mov	r0, r5
   31c30:	mov	r5, #0
   31c34:	bl	4ef2c <__assert_fail@plt+0x3c938>
   31c38:	b	3118c <__assert_fail@plt+0x1eb98>
   31c3c:	ldrd	r2, [sp, #16]
   31c40:	mov	lr, #7
   31c44:	cmp	r3, #0
   31c48:	umull	r6, r7, r2, lr
   31c4c:	umull	r0, r1, lr, r3
   31c50:	bge	31c5c <__assert_fail@plt+0x1f668>
   31c54:	subs	r0, r0, ip
   31c58:	sbc	r1, r1, lr
   31c5c:	adds	lr, r0, r7
   31c60:	mov	r5, #0
   31c64:	adc	r5, r1, r5
   31c68:	cmp	r5, lr, asr #31
   31c6c:	beq	31438 <__assert_fail@plt+0x1ee44>
   31c70:	ldrd	r2, [sp, #16]
   31c74:	mov	ip, #1
   31c78:	lsl	lr, r3, #3
   31c7c:	lsl	r1, r2, #3
   31c80:	orr	lr, lr, r2, lsr #29
   31c84:	subs	r6, r1, r2
   31c88:	sbc	lr, lr, r3
   31c8c:	b	31438 <__assert_fail@plt+0x1ee44>
   31c90:	mov	ip, #60	; 0x3c
   31c94:	cmp	r6, #0
   31c98:	umull	r2, r3, r2, ip
   31c9c:	umull	r6, r7, ip, r6
   31ca0:	bge	31cac <__assert_fail@plt+0x1f6b8>
   31ca4:	subs	r6, r6, r5
   31ca8:	sbc	r7, r7, ip
   31cac:	adds	ip, r6, r3
   31cb0:	mov	lr, #0
   31cb4:	adc	lr, r7, lr
   31cb8:	cmp	lr, ip, asr #31
   31cbc:	bne	31d10 <__assert_fail@plt+0x1f71c>
   31cc0:	mov	lr, r2
   31cc4:	b	316b8 <__assert_fail@plt+0x1f0c4>
   31cc8:	ldr	r0, [sp, #488]	; 0x1e8
   31ccc:	mov	r5, #1
   31cd0:	ldr	r1, [sp, #492]	; 0x1ec
   31cd4:	lsl	r2, r0, #3
   31cd8:	lsl	r3, r1, #3
   31cdc:	subs	r2, r2, r0
   31ce0:	lsl	ip, r2, #5
   31ce4:	orr	r3, r3, r0, lsr #29
   31ce8:	sbc	r3, r3, r1
   31cec:	lsl	r3, r3, #5
   31cf0:	orr	r3, r3, r2, lsr #27
   31cf4:	adds	r2, ip, r0
   31cf8:	adc	r3, r3, r1
   31cfc:	lsl	r1, r2, #4
   31d00:	lsl	r3, r3, #4
   31d04:	orr	r3, r3, r2, lsr #28
   31d08:	mov	r2, r1
   31d0c:	b	31674 <__assert_fail@plt+0x1f080>
   31d10:	ldr	lr, [sp, #496]	; 0x1f0
   31d14:	mov	r5, #1
   31d18:	ldr	r3, [sp, #500]	; 0x1f4
   31d1c:	lsl	r2, lr, #4
   31d20:	lsl	ip, r3, #4
   31d24:	subs	r2, r2, lr
   31d28:	orr	ip, ip, lr, lsr #28
   31d2c:	sbc	ip, ip, r3
   31d30:	lsl	r3, r2, #2
   31d34:	lsl	ip, ip, #2
   31d38:	orr	ip, ip, r2, lsr #30
   31d3c:	mov	r2, r3
   31d40:	b	31cc0 <__assert_fail@plt+0x1f6cc>
   31d44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   31d48:	mov	r5, r0
   31d4c:	movw	r0, #23268	; 0x5ae4
   31d50:	movt	r0, #5
   31d54:	strd	r6, [sp, #8]
   31d58:	mov	r6, r1
   31d5c:	mov	r7, r2
   31d60:	str	r8, [sp, #16]
   31d64:	str	lr, [sp, #20]
   31d68:	bl	12228 <getenv@plt>
   31d6c:	bl	4ee94 <__assert_fail@plt+0x3c8a0>
   31d70:	subs	r4, r0, #0
   31d74:	moveq	r5, r4
   31d78:	beq	31d9c <__assert_fail@plt+0x1f7a8>
   31d7c:	mov	r0, r5
   31d80:	mov	r2, r7
   31d84:	mov	r1, r6
   31d88:	mov	r3, r4
   31d8c:	bl	30eb4 <__assert_fail@plt+0x1e8c0>
   31d90:	mov	r5, r0
   31d94:	mov	r0, r4
   31d98:	bl	4ef2c <__assert_fail@plt+0x3c938>
   31d9c:	mov	r0, r5
   31da0:	ldrd	r4, [sp]
   31da4:	ldrd	r6, [sp, #8]
   31da8:	ldr	r8, [sp, #16]
   31dac:	add	sp, sp, #20
   31db0:	pop	{pc}		; (ldr pc, [sp], #4)
   31db4:	strd	r4, [sp, #-16]!
   31db8:	subs	r4, r0, #0
   31dbc:	str	r6, [sp, #8]
   31dc0:	str	lr, [sp, #12]
   31dc4:	beq	31e5c <__assert_fail@plt+0x1f868>
   31dc8:	mov	r1, #47	; 0x2f
   31dcc:	bl	12468 <strrchr@plt>
   31dd0:	subs	r5, r0, #0
   31dd4:	beq	31e34 <__assert_fail@plt+0x1f840>
   31dd8:	add	r6, r5, #1
   31ddc:	sub	r3, r6, r4
   31de0:	cmp	r3, #6
   31de4:	ble	31e34 <__assert_fail@plt+0x1f840>
   31de8:	movw	r1, #24060	; 0x5dfc
   31dec:	movt	r1, #5
   31df0:	mov	r2, #7
   31df4:	sub	r0, r5, #6
   31df8:	bl	12594 <strncmp@plt>
   31dfc:	cmp	r0, #0
   31e00:	bne	31e34 <__assert_fail@plt+0x1f840>
   31e04:	movw	r1, #24068	; 0x5e04
   31e08:	movt	r1, #5
   31e0c:	mov	r2, #3
   31e10:	mov	r0, r6
   31e14:	bl	12594 <strncmp@plt>
   31e18:	cmp	r0, #0
   31e1c:	movne	r4, r6
   31e20:	bne	31e34 <__assert_fail@plt+0x1f840>
   31e24:	add	r4, r5, #4
   31e28:	movw	r3, #30008	; 0x7538
   31e2c:	movt	r3, #6
   31e30:	str	r4, [r3]
   31e34:	movw	r2, #32004	; 0x7d04
   31e38:	movt	r2, #6
   31e3c:	ldr	r6, [sp, #8]
   31e40:	movw	r3, #30016	; 0x7540
   31e44:	movt	r3, #6
   31e48:	str	r4, [r2]
   31e4c:	str	r4, [r3]
   31e50:	ldrd	r4, [sp]
   31e54:	add	sp, sp, #12
   31e58:	pop	{pc}		; (ldr pc, [sp], #4)
   31e5c:	movw	r3, #30024	; 0x7548
   31e60:	movt	r3, #6
   31e64:	movw	r0, #24004	; 0x5dc4
   31e68:	movt	r0, #5
   31e6c:	ldr	r3, [r3]
   31e70:	mov	r2, #55	; 0x37
   31e74:	mov	r1, #1
   31e78:	bl	12168 <fwrite@plt>
   31e7c:	bl	125a0 <abort@plt>
   31e80:	mov	r2, #5
   31e84:	strd	r4, [sp, #-16]!
   31e88:	mov	r5, r0
   31e8c:	str	r6, [sp, #8]
   31e90:	mov	r6, r1
   31e94:	mov	r1, r0
   31e98:	mov	r0, #0
   31e9c:	str	lr, [sp, #12]
   31ea0:	bl	120b4 <dcgettext@plt>
   31ea4:	cmp	r5, r0
   31ea8:	mov	r4, r0
   31eac:	beq	31ec4 <__assert_fail@plt+0x1f8d0>
   31eb0:	mov	r0, r4
   31eb4:	ldrd	r4, [sp]
   31eb8:	ldr	r6, [sp, #8]
   31ebc:	add	sp, sp, #12
   31ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   31ec4:	bl	4fc08 <__assert_fail@plt+0x3d614>
   31ec8:	ldrb	r3, [r0]
   31ecc:	bic	r3, r3, #32
   31ed0:	cmp	r3, #85	; 0x55
   31ed4:	bne	31f3c <__assert_fail@plt+0x1f948>
   31ed8:	ldrb	r3, [r0, #1]
   31edc:	bic	r3, r3, #32
   31ee0:	cmp	r3, #84	; 0x54
   31ee4:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31ee8:	ldrb	r3, [r0, #2]
   31eec:	bic	r3, r3, #32
   31ef0:	cmp	r3, #70	; 0x46
   31ef4:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31ef8:	ldrb	r3, [r0, #3]
   31efc:	cmp	r3, #45	; 0x2d
   31f00:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31f04:	ldrb	r3, [r0, #4]
   31f08:	cmp	r3, #56	; 0x38
   31f0c:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31f10:	ldrb	r3, [r0, #5]
   31f14:	cmp	r3, #0
   31f18:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31f1c:	ldrb	r2, [r4]
   31f20:	movw	r3, #24160	; 0x5e60
   31f24:	movt	r3, #5
   31f28:	movw	r4, #24172	; 0x5e6c
   31f2c:	movt	r4, #5
   31f30:	cmp	r2, #96	; 0x60
   31f34:	movne	r4, r3
   31f38:	b	31eb0 <__assert_fail@plt+0x1f8bc>
   31f3c:	cmp	r3, #71	; 0x47
   31f40:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31f44:	ldrb	r3, [r0, #1]
   31f48:	bic	r3, r3, #32
   31f4c:	cmp	r3, #66	; 0x42
   31f50:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31f54:	ldrb	r3, [r0, #2]
   31f58:	cmp	r3, #49	; 0x31
   31f5c:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31f60:	ldrb	r3, [r0, #3]
   31f64:	cmp	r3, #56	; 0x38
   31f68:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31f6c:	ldrb	r3, [r0, #4]
   31f70:	cmp	r3, #48	; 0x30
   31f74:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31f78:	ldrb	r3, [r0, #5]
   31f7c:	cmp	r3, #51	; 0x33
   31f80:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31f84:	ldrb	r3, [r0, #6]
   31f88:	cmp	r3, #48	; 0x30
   31f8c:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31f90:	ldrb	r3, [r0, #7]
   31f94:	cmp	r3, #0
   31f98:	bne	31fbc <__assert_fail@plt+0x1f9c8>
   31f9c:	ldrb	r2, [r4]
   31fa0:	movw	r3, #24164	; 0x5e64
   31fa4:	movt	r3, #5
   31fa8:	movw	r4, #24168	; 0x5e68
   31fac:	movt	r4, #5
   31fb0:	cmp	r2, #96	; 0x60
   31fb4:	movne	r4, r3
   31fb8:	b	31eb0 <__assert_fail@plt+0x1f8bc>
   31fbc:	movw	r3, #5252	; 0x1484
   31fc0:	movt	r3, #5
   31fc4:	cmp	r6, #9
   31fc8:	movw	r4, #24156	; 0x5e5c
   31fcc:	movt	r4, #5
   31fd0:	movne	r4, r3
   31fd4:	b	31eb0 <__assert_fail@plt+0x1f8bc>
   31fd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   31fdc:	strd	r6, [sp, #8]
   31fe0:	strd	r8, [sp, #16]
   31fe4:	mov	r8, r3
   31fe8:	strd	sl, [sp, #24]
   31fec:	mov	fp, r0
   31ff0:	mov	sl, r1
   31ff4:	str	lr, [sp, #32]
   31ff8:	sub	sp, sp, #140	; 0x8c
   31ffc:	ldr	r3, [sp, #180]	; 0xb4
   32000:	str	r2, [sp, #28]
   32004:	and	r4, r3, #2
   32008:	ubfx	r3, r3, #1, #1
   3200c:	str	r3, [sp, #44]	; 0x2c
   32010:	bl	12198 <__ctype_get_mb_cur_max@plt>
   32014:	ldr	r3, [sp, #176]	; 0xb0
   32018:	str	r0, [sp, #76]	; 0x4c
   3201c:	cmp	r3, #10
   32020:	ldrls	pc, [pc, r3, lsl #2]
   32024:	b	339c0 <__assert_fail@plt+0x213cc>
   32028:	andeq	r2, r3, r8, lsr #9
   3202c:	andeq	r2, r3, r4, asr #11
   32030:	andeq	r2, r3, r0, asr #22
   32034:	andeq	r2, r3, r0, lsr r6
   32038:			; <UNDEFINED> instruction: 0x000323b0
   3203c:	andeq	r2, r3, ip, lsr #8
   32040:	andeq	r2, r3, r4, lsl #10
   32044:	andeq	r2, r3, ip, ror #10
   32048:	andeq	r2, r3, r4, asr r0
   3204c:	andeq	r2, r3, r4, asr r0
   32050:	andeq	r2, r3, r4, asr r0
   32054:	ldr	r3, [sp, #176]	; 0xb0
   32058:	cmp	r3, #10
   3205c:	beq	32088 <__assert_fail@plt+0x1fa94>
   32060:	mov	r1, r3
   32064:	movw	r0, #24176	; 0x5e70
   32068:	movt	r0, #5
   3206c:	bl	31e80 <__assert_fail@plt+0x1f88c>
   32070:	str	r0, [sp, #188]	; 0xbc
   32074:	movw	r0, #5252	; 0x1484
   32078:	movt	r0, #5
   3207c:	ldr	r1, [sp, #176]	; 0xb0
   32080:	bl	31e80 <__assert_fail@plt+0x1f88c>
   32084:	str	r0, [sp, #192]	; 0xc0
   32088:	cmp	r4, #0
   3208c:	movne	r4, #0
   32090:	beq	3374c <__assert_fail@plt+0x21158>
   32094:	mov	r5, #0
   32098:	ldr	r0, [sp, #192]	; 0xc0
   3209c:	mov	r9, r5
   320a0:	str	r5, [sp, #64]	; 0x40
   320a4:	bl	12300 <strlen@plt>
   320a8:	mov	r3, #1
   320ac:	ldr	r2, [sp, #44]	; 0x2c
   320b0:	cmp	r0, r5
   320b4:	moveq	r2, r5
   320b8:	str	r3, [sp, #32]
   320bc:	str	r3, [sp, #48]	; 0x30
   320c0:	str	r5, [sp, #52]	; 0x34
   320c4:	str	r3, [sp, #60]	; 0x3c
   320c8:	ldr	r3, [sp, #180]	; 0xb4
   320cc:	str	r0, [sp, #56]	; 0x38
   320d0:	str	r5, [sp, #68]	; 0x44
   320d4:	str	r5, [sp, #80]	; 0x50
   320d8:	str	r5, [sp, #84]	; 0x54
   320dc:	and	r3, r3, #1
   320e0:	str	r2, [sp, #88]	; 0x58
   320e4:	str	r3, [sp, #92]	; 0x5c
   320e8:	ldr	r3, [sp, #180]	; 0xb4
   320ec:	and	r3, r3, #4
   320f0:	str	r3, [sp, #96]	; 0x60
   320f4:	ldr	r3, [sp, #192]	; 0xc0
   320f8:	str	r3, [sp, #72]	; 0x48
   320fc:	mov	r3, fp
   32100:	mov	r7, #0
   32104:	mov	fp, r9
   32108:	mov	r9, r3
   3210c:	cmn	r8, #1
   32110:	beq	32714 <__assert_fail@plt+0x20120>
   32114:	subs	r6, r8, r7
   32118:	movne	r6, #1
   3211c:	cmp	r6, #0
   32120:	beq	3272c <__assert_fail@plt+0x20138>
   32124:	ldr	r0, [sp, #28]
   32128:	ldr	r3, [sp, #48]	; 0x30
   3212c:	cmp	r3, #0
   32130:	add	r3, r0, r7
   32134:	str	r3, [sp, #36]	; 0x24
   32138:	beq	32bb8 <__assert_fail@plt+0x205c4>
   3213c:	ldr	r2, [sp, #56]	; 0x38
   32140:	cmp	r2, #0
   32144:	beq	330b8 <__assert_fail@plt+0x20ac4>
   32148:	cmp	r2, #1
   3214c:	mov	r3, r2
   32150:	movls	r3, #0
   32154:	movhi	r3, #1
   32158:	cmn	r8, #1
   3215c:	add	r5, r7, r2
   32160:	movne	r3, #0
   32164:	cmp	r3, #0
   32168:	beq	32174 <__assert_fail@plt+0x1fb80>
   3216c:	bl	12300 <strlen@plt>
   32170:	mov	r8, r0
   32174:	cmp	r5, r8
   32178:	bhi	330b8 <__assert_fail@plt+0x20ac4>
   3217c:	ldr	r0, [sp, #36]	; 0x24
   32180:	ldr	r2, [sp, #56]	; 0x38
   32184:	ldr	r1, [sp, #72]	; 0x48
   32188:	bl	12084 <memcmp@plt>
   3218c:	cmp	r0, #0
   32190:	bne	330b8 <__assert_fail@plt+0x20ac4>
   32194:	ldr	r3, [sp, #44]	; 0x2c
   32198:	cmp	r3, #0
   3219c:	bne	33864 <__assert_fail@plt+0x21270>
   321a0:	ldr	r3, [sp, #36]	; 0x24
   321a4:	ldrb	r5, [r3]
   321a8:	cmp	r5, #126	; 0x7e
   321ac:	ldrls	pc, [pc, r5, lsl #2]
   321b0:	b	3364c <__assert_fail@plt+0x21058>
   321b4:	andeq	r2, r3, r8, lsl #17
   321b8:	andeq	r3, r3, ip, asr #12
   321bc:	andeq	r3, r3, ip, asr #12
   321c0:	andeq	r3, r3, ip, asr #12
   321c4:	andeq	r3, r3, ip, asr #12
   321c8:	andeq	r3, r3, ip, asr #12
   321cc:	andeq	r3, r3, ip, asr #12
   321d0:	andeq	r2, r3, r0, ror #15
   321d4:	ldrdeq	r2, [r3], -r8
   321d8:	andeq	r2, r3, r8, ror #15
   321dc:	andeq	r2, r3, ip, ror #18
   321e0:	andeq	r2, r3, ip, asr r9
   321e4:	andeq	r2, r3, r4, lsl #13
   321e8:	andeq	r2, r3, r8, lsr r9
   321ec:	andeq	r3, r3, ip, asr #12
   321f0:	andeq	r3, r3, ip, asr #12
   321f4:	andeq	r3, r3, ip, asr #12
   321f8:	andeq	r3, r3, ip, asr #12
   321fc:	andeq	r3, r3, ip, asr #12
   32200:	andeq	r3, r3, ip, asr #12
   32204:	andeq	r3, r3, ip, asr #12
   32208:	andeq	r3, r3, ip, asr #12
   3220c:	andeq	r3, r3, ip, asr #12
   32210:	andeq	r3, r3, ip, asr #12
   32214:	andeq	r3, r3, ip, asr #12
   32218:	andeq	r3, r3, ip, asr #12
   3221c:	andeq	r3, r3, ip, asr #12
   32220:	andeq	r3, r3, ip, asr #12
   32224:	andeq	r3, r3, ip, asr #12
   32228:	andeq	r3, r3, ip, asr #12
   3222c:	andeq	r3, r3, ip, asr #12
   32230:	andeq	r3, r3, ip, asr #12
   32234:	andeq	r2, r3, r4, ror #19
   32238:	ldrdeq	r2, [r3], -r8
   3223c:	ldrdeq	r2, [r3], -r8
   32240:	andeq	r2, r3, ip, asr #19
   32244:	ldrdeq	r2, [r3], -r8
   32248:			; <UNDEFINED> instruction: 0x00032ab0
   3224c:	ldrdeq	r2, [r3], -r8
   32250:	andeq	r2, r3, r0, lsr #22
   32254:	ldrdeq	r2, [r3], -r8
   32258:	ldrdeq	r2, [r3], -r8
   3225c:	ldrdeq	r2, [r3], -r8
   32260:			; <UNDEFINED> instruction: 0x00032ab0
   32264:			; <UNDEFINED> instruction: 0x00032ab0
   32268:			; <UNDEFINED> instruction: 0x00032ab0
   3226c:			; <UNDEFINED> instruction: 0x00032ab0
   32270:			; <UNDEFINED> instruction: 0x00032ab0
   32274:			; <UNDEFINED> instruction: 0x00032ab0
   32278:			; <UNDEFINED> instruction: 0x00032ab0
   3227c:			; <UNDEFINED> instruction: 0x00032ab0
   32280:			; <UNDEFINED> instruction: 0x00032ab0
   32284:			; <UNDEFINED> instruction: 0x00032ab0
   32288:			; <UNDEFINED> instruction: 0x00032ab0
   3228c:			; <UNDEFINED> instruction: 0x00032ab0
   32290:			; <UNDEFINED> instruction: 0x00032ab0
   32294:			; <UNDEFINED> instruction: 0x00032ab0
   32298:			; <UNDEFINED> instruction: 0x00032ab0
   3229c:			; <UNDEFINED> instruction: 0x00032ab0
   322a0:	ldrdeq	r2, [r3], -r8
   322a4:	ldrdeq	r2, [r3], -r8
   322a8:	ldrdeq	r2, [r3], -r8
   322ac:	ldrdeq	r2, [r3], -r8
   322b0:	ldrdeq	r2, [r3], -r0
   322b4:	andeq	r3, r3, ip, asr #12
   322b8:			; <UNDEFINED> instruction: 0x00032ab0
   322bc:			; <UNDEFINED> instruction: 0x00032ab0
   322c0:			; <UNDEFINED> instruction: 0x00032ab0
   322c4:			; <UNDEFINED> instruction: 0x00032ab0
   322c8:			; <UNDEFINED> instruction: 0x00032ab0
   322cc:			; <UNDEFINED> instruction: 0x00032ab0
   322d0:			; <UNDEFINED> instruction: 0x00032ab0
   322d4:			; <UNDEFINED> instruction: 0x00032ab0
   322d8:			; <UNDEFINED> instruction: 0x00032ab0
   322dc:			; <UNDEFINED> instruction: 0x00032ab0
   322e0:			; <UNDEFINED> instruction: 0x00032ab0
   322e4:			; <UNDEFINED> instruction: 0x00032ab0
   322e8:			; <UNDEFINED> instruction: 0x00032ab0
   322ec:			; <UNDEFINED> instruction: 0x00032ab0
   322f0:			; <UNDEFINED> instruction: 0x00032ab0
   322f4:			; <UNDEFINED> instruction: 0x00032ab0
   322f8:			; <UNDEFINED> instruction: 0x00032ab0
   322fc:			; <UNDEFINED> instruction: 0x00032ab0
   32300:			; <UNDEFINED> instruction: 0x00032ab0
   32304:			; <UNDEFINED> instruction: 0x00032ab0
   32308:			; <UNDEFINED> instruction: 0x00032ab0
   3230c:			; <UNDEFINED> instruction: 0x00032ab0
   32310:			; <UNDEFINED> instruction: 0x00032ab0
   32314:			; <UNDEFINED> instruction: 0x00032ab0
   32318:			; <UNDEFINED> instruction: 0x00032ab0
   3231c:			; <UNDEFINED> instruction: 0x00032ab0
   32320:	ldrdeq	r2, [r3], -r8
   32324:	andeq	r2, r3, r4, ror sl
   32328:			; <UNDEFINED> instruction: 0x00032ab0
   3232c:	ldrdeq	r2, [r3], -r8
   32330:			; <UNDEFINED> instruction: 0x00032ab0
   32334:	ldrdeq	r2, [r3], -r8
   32338:			; <UNDEFINED> instruction: 0x00032ab0
   3233c:			; <UNDEFINED> instruction: 0x00032ab0
   32340:			; <UNDEFINED> instruction: 0x00032ab0
   32344:			; <UNDEFINED> instruction: 0x00032ab0
   32348:			; <UNDEFINED> instruction: 0x00032ab0
   3234c:			; <UNDEFINED> instruction: 0x00032ab0
   32350:			; <UNDEFINED> instruction: 0x00032ab0
   32354:			; <UNDEFINED> instruction: 0x00032ab0
   32358:			; <UNDEFINED> instruction: 0x00032ab0
   3235c:			; <UNDEFINED> instruction: 0x00032ab0
   32360:			; <UNDEFINED> instruction: 0x00032ab0
   32364:			; <UNDEFINED> instruction: 0x00032ab0
   32368:			; <UNDEFINED> instruction: 0x00032ab0
   3236c:			; <UNDEFINED> instruction: 0x00032ab0
   32370:			; <UNDEFINED> instruction: 0x00032ab0
   32374:			; <UNDEFINED> instruction: 0x00032ab0
   32378:			; <UNDEFINED> instruction: 0x00032ab0
   3237c:			; <UNDEFINED> instruction: 0x00032ab0
   32380:			; <UNDEFINED> instruction: 0x00032ab0
   32384:			; <UNDEFINED> instruction: 0x00032ab0
   32388:			; <UNDEFINED> instruction: 0x00032ab0
   3238c:			; <UNDEFINED> instruction: 0x00032ab0
   32390:			; <UNDEFINED> instruction: 0x00032ab0
   32394:			; <UNDEFINED> instruction: 0x00032ab0
   32398:			; <UNDEFINED> instruction: 0x00032ab0
   3239c:			; <UNDEFINED> instruction: 0x00032ab0
   323a0:	andeq	r2, r3, r0, lsl #19
   323a4:	ldrdeq	r2, [r3], -r8
   323a8:	andeq	r2, r3, r0, lsl #19
   323ac:	andeq	r2, r3, ip, asr #19
   323b0:	ldr	r3, [sp, #180]	; 0xb4
   323b4:	cmp	r4, #0
   323b8:	and	r3, r3, #1
   323bc:	str	r3, [sp, #92]	; 0x5c
   323c0:	ldr	r3, [sp, #180]	; 0xb4
   323c4:	and	r3, r3, #4
   323c8:	str	r3, [sp, #96]	; 0x60
   323cc:	moveq	r3, #1
   323d0:	streq	r3, [sp, #60]	; 0x3c
   323d4:	beq	32b64 <__assert_fail@plt+0x20570>
   323d8:	mov	r3, #0
   323dc:	mov	r2, #1
   323e0:	mov	r4, r3
   323e4:	mov	r9, r3
   323e8:	str	r2, [sp, #32]
   323ec:	str	r2, [sp, #44]	; 0x2c
   323f0:	str	r3, [sp, #48]	; 0x30
   323f4:	str	r2, [sp, #52]	; 0x34
   323f8:	str	r2, [sp, #56]	; 0x38
   323fc:	str	r3, [sp, #60]	; 0x3c
   32400:	str	r2, [sp, #64]	; 0x40
   32404:	str	r2, [sp, #68]	; 0x44
   32408:	str	r3, [sp, #80]	; 0x50
   3240c:	str	r3, [sp, #84]	; 0x54
   32410:	str	r3, [sp, #88]	; 0x58
   32414:	movw	r3, #5252	; 0x1484
   32418:	movt	r3, #5
   3241c:	str	r3, [sp, #72]	; 0x48
   32420:	mov	r3, #2
   32424:	str	r3, [sp, #176]	; 0xb0
   32428:	b	320fc <__assert_fail@plt+0x1fb08>
   3242c:	ldr	r3, [sp, #180]	; 0xb4
   32430:	cmp	r4, #0
   32434:	and	r3, r3, #1
   32438:	str	r3, [sp, #92]	; 0x5c
   3243c:	ldr	r3, [sp, #180]	; 0xb4
   32440:	and	r3, r3, #4
   32444:	str	r3, [sp, #96]	; 0x60
   32448:	bne	3381c <__assert_fail@plt+0x21228>
   3244c:	cmp	sl, #0
   32450:	beq	335c8 <__assert_fail@plt+0x20fd4>
   32454:	mov	r3, #34	; 0x22
   32458:	mov	r2, r4
   3245c:	mov	r1, #1
   32460:	mov	r9, r2
   32464:	strb	r3, [fp]
   32468:	movw	r3, #24156	; 0x5e5c
   3246c:	movt	r3, #5
   32470:	mov	r4, r1
   32474:	str	r1, [sp, #32]
   32478:	str	r2, [sp, #44]	; 0x2c
   3247c:	str	r1, [sp, #48]	; 0x30
   32480:	str	r2, [sp, #52]	; 0x34
   32484:	str	r1, [sp, #56]	; 0x38
   32488:	str	r1, [sp, #60]	; 0x3c
   3248c:	str	r2, [sp, #64]	; 0x40
   32490:	str	r2, [sp, #68]	; 0x44
   32494:	str	r3, [sp, #72]	; 0x48
   32498:	str	r2, [sp, #80]	; 0x50
   3249c:	str	r2, [sp, #84]	; 0x54
   324a0:	str	r2, [sp, #88]	; 0x58
   324a4:	b	320fc <__assert_fail@plt+0x1fb08>
   324a8:	mov	r3, #0
   324ac:	mov	r2, #1
   324b0:	mov	r9, r3
   324b4:	str	r2, [sp, #32]
   324b8:	str	r3, [sp, #44]	; 0x2c
   324bc:	str	r3, [sp, #48]	; 0x30
   324c0:	str	r3, [sp, #52]	; 0x34
   324c4:	str	r3, [sp, #60]	; 0x3c
   324c8:	strd	r2, [sp, #64]	; 0x40
   324cc:	str	r3, [sp, #72]	; 0x48
   324d0:	str	r3, [sp, #80]	; 0x50
   324d4:	str	r3, [sp, #88]	; 0x58
   324d8:	ldr	r3, [sp, #180]	; 0xb4
   324dc:	and	r3, r3, r2
   324e0:	str	r3, [sp, #92]	; 0x5c
   324e4:	ldr	r3, [sp, #180]	; 0xb4
   324e8:	and	r3, r3, #4
   324ec:	str	r3, [sp, #96]	; 0x60
   324f0:	ldr	r3, [sp, #176]	; 0xb0
   324f4:	mov	r4, r3
   324f8:	str	r3, [sp, #56]	; 0x38
   324fc:	str	r3, [sp, #84]	; 0x54
   32500:	b	320fc <__assert_fail@plt+0x1fb08>
   32504:	mov	r3, #1
   32508:	mov	r4, #0
   3250c:	mov	r9, r4
   32510:	str	r3, [sp, #32]
   32514:	str	r3, [sp, #44]	; 0x2c
   32518:	str	r3, [sp, #48]	; 0x30
   3251c:	str	r4, [sp, #52]	; 0x34
   32520:	str	r3, [sp, #56]	; 0x38
   32524:	str	r3, [sp, #60]	; 0x3c
   32528:	str	r3, [sp, #88]	; 0x58
   3252c:	movw	r3, #24156	; 0x5e5c
   32530:	movt	r3, #5
   32534:	str	r4, [sp, #64]	; 0x40
   32538:	str	r4, [sp, #68]	; 0x44
   3253c:	str	r3, [sp, #72]	; 0x48
   32540:	ldr	r3, [sp, #180]	; 0xb4
   32544:	str	r4, [sp, #80]	; 0x50
   32548:	str	r4, [sp, #84]	; 0x54
   3254c:	and	r3, r3, #1
   32550:	str	r3, [sp, #92]	; 0x5c
   32554:	ldr	r3, [sp, #180]	; 0xb4
   32558:	and	r3, r3, #4
   3255c:	str	r3, [sp, #96]	; 0x60
   32560:	mov	r3, #5
   32564:	str	r3, [sp, #176]	; 0xb0
   32568:	b	320fc <__assert_fail@plt+0x1fb08>
   3256c:	mov	r3, #1
   32570:	mov	r4, #0
   32574:	mov	r9, r4
   32578:	str	r3, [sp, #32]
   3257c:	str	r4, [sp, #44]	; 0x2c
   32580:	str	r3, [sp, #48]	; 0x30
   32584:	str	r3, [sp, #60]	; 0x3c
   32588:	ldr	r3, [sp, #180]	; 0xb4
   3258c:	str	r4, [sp, #52]	; 0x34
   32590:	str	r4, [sp, #56]	; 0x38
   32594:	str	r4, [sp, #64]	; 0x40
   32598:	str	r4, [sp, #68]	; 0x44
   3259c:	and	r3, r3, #1
   325a0:	str	r4, [sp, #72]	; 0x48
   325a4:	str	r4, [sp, #80]	; 0x50
   325a8:	str	r4, [sp, #84]	; 0x54
   325ac:	str	r3, [sp, #92]	; 0x5c
   325b0:	ldr	r3, [sp, #180]	; 0xb4
   325b4:	str	r4, [sp, #88]	; 0x58
   325b8:	and	r3, r3, #4
   325bc:	str	r3, [sp, #96]	; 0x60
   325c0:	b	320fc <__assert_fail@plt+0x1fb08>
   325c4:	mov	r3, #0
   325c8:	mov	r2, #1
   325cc:	ldr	r1, [sp, #176]	; 0xb0
   325d0:	mov	r4, r3
   325d4:	mov	r9, r3
   325d8:	movw	r3, #5252	; 0x1484
   325dc:	movt	r3, #5
   325e0:	str	r2, [sp, #32]
   325e4:	str	r2, [sp, #44]	; 0x2c
   325e8:	str	r4, [sp, #48]	; 0x30
   325ec:	strd	r2, [sp, #68]	; 0x44
   325f0:	ldr	r3, [sp, #180]	; 0xb4
   325f4:	str	r2, [sp, #52]	; 0x34
   325f8:	str	r1, [sp, #56]	; 0x38
   325fc:	str	r4, [sp, #60]	; 0x3c
   32600:	str	r2, [sp, #64]	; 0x40
   32604:	and	r3, r3, r2
   32608:	str	r4, [sp, #80]	; 0x50
   3260c:	str	r4, [sp, #84]	; 0x54
   32610:	str	r4, [sp, #88]	; 0x58
   32614:	str	r3, [sp, #92]	; 0x5c
   32618:	ldr	r3, [sp, #180]	; 0xb4
   3261c:	and	r3, r3, #4
   32620:	str	r3, [sp, #96]	; 0x60
   32624:	mov	r3, #2
   32628:	str	r3, [sp, #176]	; 0xb0
   3262c:	b	320fc <__assert_fail@plt+0x1fb08>
   32630:	mov	r3, #1
   32634:	mov	r2, #0
   32638:	mov	r4, r2
   3263c:	mov	r9, r2
   32640:	str	r3, [sp, #32]
   32644:	str	r3, [sp, #44]	; 0x2c
   32648:	str	r2, [sp, #48]	; 0x30
   3264c:	str	r3, [sp, #52]	; 0x34
   32650:	str	r3, [sp, #56]	; 0x38
   32654:	str	r3, [sp, #60]	; 0x3c
   32658:	str	r3, [sp, #64]	; 0x40
   3265c:	str	r3, [sp, #68]	; 0x44
   32660:	str	r3, [sp, #88]	; 0x58
   32664:	movw	r3, #5252	; 0x1484
   32668:	movt	r3, #5
   3266c:	str	r3, [sp, #72]	; 0x48
   32670:	ldr	r3, [sp, #180]	; 0xb4
   32674:	str	r2, [sp, #80]	; 0x50
   32678:	str	r2, [sp, #84]	; 0x54
   3267c:	and	r3, r3, #1
   32680:	b	32614 <__assert_fail@plt+0x20020>
   32684:	mov	r5, #102	; 0x66
   32688:	mov	r6, #0
   3268c:	ldr	r3, [sp, #44]	; 0x2c
   32690:	cmp	r3, #0
   32694:	bne	33544 <__assert_fail@plt+0x20f50>
   32698:	ldr	r2, [sp, #52]	; 0x34
   3269c:	eor	r3, fp, #1
   326a0:	ands	r3, r2, r3
   326a4:	beq	326dc <__assert_fail@plt+0x200e8>
   326a8:	cmp	sl, r4
   326ac:	mov	fp, r3
   326b0:	movhi	r2, #39	; 0x27
   326b4:	strbhi	r2, [r9, r4]
   326b8:	add	r2, r4, #1
   326bc:	cmp	sl, r2
   326c0:	movhi	r1, #36	; 0x24
   326c4:	strbhi	r1, [r9, r2]
   326c8:	add	r2, r4, #2
   326cc:	add	r4, r4, #3
   326d0:	cmp	sl, r2
   326d4:	movhi	r1, #39	; 0x27
   326d8:	strbhi	r1, [r9, r2]
   326dc:	cmp	sl, r4
   326e0:	add	r7, r7, #1
   326e4:	movhi	r3, #92	; 0x5c
   326e8:	strbhi	r3, [r9, r4]
   326ec:	add	r4, r4, #1
   326f0:	cmp	r4, sl
   326f4:	ldr	r3, [sp, #32]
   326f8:	strbcc	r5, [r9, r4]
   326fc:	cmp	r6, #0
   32700:	add	r4, r4, #1
   32704:	moveq	r3, #0
   32708:	cmn	r8, #1
   3270c:	str	r3, [sp, #32]
   32710:	bne	32114 <__assert_fail@plt+0x1fb20>
   32714:	ldr	r3, [sp, #28]
   32718:	ldrb	r6, [r3, r7]
   3271c:	adds	r6, r6, #0
   32720:	movne	r6, #1
   32724:	cmp	r6, #0
   32728:	bne	32124 <__assert_fail@plt+0x1fb30>
   3272c:	mov	r3, r9
   32730:	mov	r9, fp
   32734:	mov	fp, r3
   32738:	ldr	r3, [sp, #68]	; 0x44
   3273c:	cmp	r4, #0
   32740:	movne	r3, #0
   32744:	cmp	r3, #0
   32748:	bne	3393c <__assert_fail@plt+0x21348>
   3274c:	ldr	r3, [sp, #44]	; 0x2c
   32750:	ldr	r2, [sp, #52]	; 0x34
   32754:	eor	r3, r3, #1
   32758:	ands	r2, r3, r2
   3275c:	beq	33874 <__assert_fail@plt+0x21280>
   32760:	ldr	r3, [sp, #80]	; 0x50
   32764:	cmp	r3, #0
   32768:	beq	33878 <__assert_fail@plt+0x21284>
   3276c:	ldr	r3, [sp, #32]
   32770:	cmp	r3, #0
   32774:	bne	338ec <__assert_fail@plt+0x212f8>
   32778:	ldr	r3, [sp, #84]	; 0x54
   3277c:	adds	r3, r3, #0
   32780:	movne	r3, #1
   32784:	cmp	sl, #0
   32788:	movne	r3, #0
   3278c:	cmp	r3, #0
   32790:	ldreq	r2, [sp, #80]	; 0x50
   32794:	beq	33878 <__assert_fail@plt+0x21284>
   32798:	ldr	r2, [sp, #84]	; 0x54
   3279c:	mov	sl, r2
   327a0:	mov	r0, #0
   327a4:	mov	r4, #1
   327a8:	mov	r1, #39	; 0x27
   327ac:	str	r0, [sp, #44]	; 0x2c
   327b0:	strb	r1, [fp]
   327b4:	str	r0, [sp, #48]	; 0x30
   327b8:	str	r4, [sp, #52]	; 0x34
   327bc:	str	r4, [sp, #56]	; 0x38
   327c0:	str	r4, [sp, #64]	; 0x40
   327c4:	str	r0, [sp, #68]	; 0x44
   327c8:	str	r3, [sp, #80]	; 0x50
   327cc:	str	r2, [sp, #84]	; 0x54
   327d0:	str	r0, [sp, #88]	; 0x58
   327d4:	b	32414 <__assert_fail@plt+0x1fe20>
   327d8:	mov	r5, #98	; 0x62
   327dc:	b	32688 <__assert_fail@plt+0x20094>
   327e0:	mov	r5, #97	; 0x61
   327e4:	b	32688 <__assert_fail@plt+0x20094>
   327e8:	ldr	r3, [sp, #48]	; 0x30
   327ec:	str	r3, [sp, #40]	; 0x28
   327f0:	mov	r3, #116	; 0x74
   327f4:	ldr	r2, [sp, #68]	; 0x44
   327f8:	cmp	r2, #0
   327fc:	bne	329f8 <__assert_fail@plt+0x20404>
   32800:	ldr	r2, [sp, #60]	; 0x3c
   32804:	cmp	r2, #0
   32808:	bne	32954 <__assert_fail@plt+0x20360>
   3280c:	ldr	r3, [sp, #44]	; 0x2c
   32810:	mov	r6, #0
   32814:	cmp	r3, #0
   32818:	beq	329c4 <__assert_fail@plt+0x203d0>
   3281c:	mov	r3, fp
   32820:	ldr	r2, [sp, #184]	; 0xb8
   32824:	cmp	r2, #0
   32828:	beq	32848 <__assert_fail@plt+0x20254>
   3282c:	ubfx	r1, r5, #5, #8
   32830:	mov	r0, r2
   32834:	and	r2, r5, #31
   32838:	ldr	r1, [r0, r1, lsl #2]
   3283c:	lsr	r2, r1, r2
   32840:	tst	r2, #1
   32844:	bne	3268c <__assert_fail@plt+0x20098>
   32848:	ldr	r2, [sp, #40]	; 0x28
   3284c:	cmp	r2, #0
   32850:	addeq	r7, r7, #1
   32854:	bne	3268c <__assert_fail@plt+0x20098>
   32858:	cmp	r3, #0
   3285c:	beq	326f0 <__assert_fail@plt+0x200fc>
   32860:	cmp	sl, r4
   32864:	mov	fp, #0
   32868:	movhi	r3, #39	; 0x27
   3286c:	strbhi	r3, [r9, r4]
   32870:	add	r3, r4, #1
   32874:	add	r4, r4, #2
   32878:	cmp	sl, r3
   3287c:	movhi	r2, #39	; 0x27
   32880:	strbhi	r2, [r9, r3]
   32884:	b	326f0 <__assert_fail@plt+0x200fc>
   32888:	ldr	r3, [sp, #48]	; 0x30
   3288c:	str	r3, [sp, #40]	; 0x28
   32890:	eor	r3, fp, #1
   32894:	ldr	r2, [sp, #52]	; 0x34
   32898:	ands	r2, r2, r3
   3289c:	beq	3355c <__assert_fail@plt+0x20f68>
   328a0:	cmp	sl, r4
   328a4:	movhi	r3, #39	; 0x27
   328a8:	strbhi	r3, [r9, r4]
   328ac:	add	r3, r4, #1
   328b0:	cmp	sl, r3
   328b4:	movhi	r1, #36	; 0x24
   328b8:	strbhi	r1, [r9, r3]
   328bc:	add	r3, r4, #2
   328c0:	cmp	sl, r3
   328c4:	movhi	r1, #39	; 0x27
   328c8:	strbhi	r1, [r9, r3]
   328cc:	add	r3, r4, #3
   328d0:	cmp	sl, r3
   328d4:	bls	335a8 <__assert_fail@plt+0x20fb4>
   328d8:	mov	r4, r3
   328dc:	mov	r3, #92	; 0x5c
   328e0:	mov	fp, r2
   328e4:	mov	r2, r4
   328e8:	strb	r3, [r9, r4]
   328ec:	ldr	r3, [sp, #176]	; 0xb0
   328f0:	add	r4, r4, #1
   328f4:	cmp	r3, #2
   328f8:	beq	33610 <__assert_fail@plt+0x2101c>
   328fc:	add	r3, r7, #1
   32900:	cmp	r3, r8
   32904:	bcs	3291c <__assert_fail@plt+0x20328>
   32908:	ldr	r1, [sp, #28]
   3290c:	ldrb	r3, [r1, r3]
   32910:	sub	r3, r3, #48	; 0x30
   32914:	cmp	r3, #9
   32918:	bls	33620 <__assert_fail@plt+0x2102c>
   3291c:	mov	r3, #0
   32920:	mov	r5, #48	; 0x30
   32924:	ldr	r6, [sp, #64]	; 0x40
   32928:	cmp	r6, #0
   3292c:	beq	32820 <__assert_fail@plt+0x2022c>
   32930:	mov	r6, #0
   32934:	b	32848 <__assert_fail@plt+0x20254>
   32938:	ldr	r3, [sp, #48]	; 0x30
   3293c:	str	r3, [sp, #40]	; 0x28
   32940:	ldr	r2, [sp, #60]	; 0x3c
   32944:	mov	r5, #13
   32948:	mov	r3, #114	; 0x72
   3294c:	cmp	r2, #0
   32950:	beq	3280c <__assert_fail@plt+0x20218>
   32954:	mov	r5, r3
   32958:	b	32688 <__assert_fail@plt+0x20094>
   3295c:	ldr	r3, [sp, #48]	; 0x30
   32960:	str	r3, [sp, #40]	; 0x28
   32964:	mov	r3, #118	; 0x76
   32968:	b	32800 <__assert_fail@plt+0x2020c>
   3296c:	ldr	r3, [sp, #48]	; 0x30
   32970:	str	r3, [sp, #40]	; 0x28
   32974:	mov	r5, #10
   32978:	mov	r3, #110	; 0x6e
   3297c:	b	32800 <__assert_fail@plt+0x2020c>
   32980:	ldr	r3, [sp, #48]	; 0x30
   32984:	cmn	r8, #1
   32988:	str	r3, [sp, #40]	; 0x28
   3298c:	beq	32dd4 <__assert_fail@plt+0x207e0>
   32990:	subs	r3, r8, #1
   32994:	movne	r3, #1
   32998:	cmp	r3, #0
   3299c:	bne	329a8 <__assert_fail@plt+0x203b4>
   329a0:	cmp	r7, #0
   329a4:	beq	329ec <__assert_fail@plt+0x203f8>
   329a8:	mov	r6, #0
   329ac:	ldr	r3, [sp, #64]	; 0x40
   329b0:	cmp	r3, #0
   329b4:	beq	3281c <__assert_fail@plt+0x20228>
   329b8:	ldr	r3, [sp, #44]	; 0x2c
   329bc:	cmp	r3, #0
   329c0:	bne	3281c <__assert_fail@plt+0x20228>
   329c4:	mov	r3, fp
   329c8:	b	32848 <__assert_fail@plt+0x20254>
   329cc:	ldr	r3, [sp, #48]	; 0x30
   329d0:	str	r3, [sp, #40]	; 0x28
   329d4:	b	329a0 <__assert_fail@plt+0x203ac>
   329d8:	ldr	r3, [sp, #48]	; 0x30
   329dc:	str	r3, [sp, #40]	; 0x28
   329e0:	b	329a8 <__assert_fail@plt+0x203b4>
   329e4:	ldr	r6, [sp, #48]	; 0x30
   329e8:	str	r6, [sp, #40]	; 0x28
   329ec:	ldr	r3, [sp, #68]	; 0x44
   329f0:	cmp	r3, #0
   329f4:	beq	329ac <__assert_fail@plt+0x203b8>
   329f8:	mov	r3, #2
   329fc:	mov	fp, r9
   32a00:	str	r3, [sp, #176]	; 0xb0
   32a04:	ldr	r3, [sp, #60]	; 0x3c
   32a08:	cmp	r3, #0
   32a0c:	ldr	r3, [sp, #176]	; 0xb0
   32a10:	movne	r3, #4
   32a14:	str	r3, [sp, #176]	; 0xb0
   32a18:	mov	lr, #0
   32a1c:	mov	r0, fp
   32a20:	ldr	r2, [sp, #28]
   32a24:	ldr	r3, [sp, #180]	; 0xb4
   32a28:	ldr	r1, [sp, #188]	; 0xbc
   32a2c:	bic	ip, r3, #2
   32a30:	ldr	r3, [sp, #176]	; 0xb0
   32a34:	stm	sp, {r3, ip, lr}
   32a38:	mov	r3, r8
   32a3c:	ldr	ip, [sp, #192]	; 0xc0
   32a40:	str	r1, [sp, #12]
   32a44:	mov	r1, sl
   32a48:	str	ip, [sp, #16]
   32a4c:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   32a50:	mov	r4, r0
   32a54:	mov	r0, r4
   32a58:	add	sp, sp, #140	; 0x8c
   32a5c:	ldrd	r4, [sp]
   32a60:	ldrd	r6, [sp, #8]
   32a64:	ldrd	r8, [sp, #16]
   32a68:	ldrd	sl, [sp, #24]
   32a6c:	add	sp, sp, #32
   32a70:	pop	{pc}		; (ldr pc, [sp], #4)
   32a74:	ldr	r3, [sp, #48]	; 0x30
   32a78:	str	r3, [sp, #40]	; 0x28
   32a7c:	ldr	r3, [sp, #176]	; 0xb0
   32a80:	cmp	r3, #2
   32a84:	beq	32dfc <__assert_fail@plt+0x20808>
   32a88:	ldr	r3, [sp, #88]	; 0x58
   32a8c:	cmp	r3, #0
   32a90:	moveq	r5, #92	; 0x5c
   32a94:	moveq	r3, r5
   32a98:	beq	32800 <__assert_fail@plt+0x2020c>
   32a9c:	add	r7, r7, #1
   32aa0:	mov	r3, fp
   32aa4:	mov	r6, #0
   32aa8:	mov	r5, #92	; 0x5c
   32aac:	b	32858 <__assert_fail@plt+0x20264>
   32ab0:	ldr	r3, [sp, #64]	; 0x40
   32ab4:	cmp	r3, #0
   32ab8:	bne	33930 <__assert_fail@plt+0x2133c>
   32abc:	ldr	r2, [sp, #48]	; 0x30
   32ac0:	mov	r3, fp
   32ac4:	mov	r6, r2
   32ac8:	str	r2, [sp, #40]	; 0x28
   32acc:	b	32820 <__assert_fail@plt+0x2022c>
   32ad0:	ldr	r3, [sp, #176]	; 0xb0
   32ad4:	cmp	r3, #2
   32ad8:	beq	3386c <__assert_fail@plt+0x21278>
   32adc:	cmp	r3, #5
   32ae0:	ldr	r3, [sp, #48]	; 0x30
   32ae4:	str	r3, [sp, #40]	; 0x28
   32ae8:	bne	32b14 <__assert_fail@plt+0x20520>
   32aec:	ldr	r3, [sp, #96]	; 0x60
   32af0:	cmp	r3, #0
   32af4:	beq	33570 <__assert_fail@plt+0x20f7c>
   32af8:	add	r3, r7, #2
   32afc:	cmp	r3, r8
   32b00:	bcs	32b14 <__assert_fail@plt+0x20520>
   32b04:	ldr	r2, [sp, #36]	; 0x24
   32b08:	ldrb	r5, [r2, #1]
   32b0c:	cmp	r5, #63	; 0x3f
   32b10:	beq	33658 <__assert_fail@plt+0x21064>
   32b14:	mov	r6, #0
   32b18:	mov	r5, #63	; 0x3f
   32b1c:	b	329ac <__assert_fail@plt+0x203b8>
   32b20:	ldr	r3, [sp, #176]	; 0xb0
   32b24:	cmp	r3, #2
   32b28:	ldr	r3, [sp, #48]	; 0x30
   32b2c:	beq	33314 <__assert_fail@plt+0x20d20>
   32b30:	mov	r5, #39	; 0x27
   32b34:	str	r3, [sp, #40]	; 0x28
   32b38:	str	r6, [sp, #80]	; 0x50
   32b3c:	b	329ac <__assert_fail@plt+0x203b8>
   32b40:	ldr	r3, [sp, #180]	; 0xb4
   32b44:	cmp	r4, #0
   32b48:	and	r3, r3, #1
   32b4c:	str	r3, [sp, #92]	; 0x5c
   32b50:	ldr	r3, [sp, #180]	; 0xb4
   32b54:	and	r3, r3, #4
   32b58:	str	r3, [sp, #96]	; 0x60
   32b5c:	bne	3397c <__assert_fail@plt+0x21388>
   32b60:	str	r4, [sp, #60]	; 0x3c
   32b64:	cmp	sl, #0
   32b68:	bne	33960 <__assert_fail@plt+0x2136c>
   32b6c:	mov	r3, #1
   32b70:	movw	r2, #5252	; 0x1484
   32b74:	movt	r2, #5
   32b78:	mov	r4, r3
   32b7c:	mov	r3, #2
   32b80:	mov	r9, sl
   32b84:	str	r4, [sp, #32]
   32b88:	str	sl, [sp, #44]	; 0x2c
   32b8c:	str	sl, [sp, #48]	; 0x30
   32b90:	str	r4, [sp, #52]	; 0x34
   32b94:	str	r4, [sp, #56]	; 0x38
   32b98:	str	r4, [sp, #64]	; 0x40
   32b9c:	str	sl, [sp, #68]	; 0x44
   32ba0:	str	r2, [sp, #72]	; 0x48
   32ba4:	str	sl, [sp, #80]	; 0x50
   32ba8:	str	sl, [sp, #84]	; 0x54
   32bac:	str	sl, [sp, #88]	; 0x58
   32bb0:	str	r3, [sp, #176]	; 0xb0
   32bb4:	b	320fc <__assert_fail@plt+0x1fb08>
   32bb8:	ldrb	r5, [r0, r7]
   32bbc:	cmp	r5, #126	; 0x7e
   32bc0:	ldrls	pc, [pc, r5, lsl #2]
   32bc4:	b	32f28 <__assert_fail@plt+0x20934>
   32bc8:	strdeq	r2, [r3], -r4
   32bcc:	andeq	r2, r3, r8, lsr #30
   32bd0:	andeq	r2, r3, r8, lsr #30
   32bd4:	andeq	r2, r3, r8, lsr #30
   32bd8:	andeq	r2, r3, r8, lsr #30
   32bdc:	andeq	r2, r3, r8, lsr #30
   32be0:	andeq	r2, r3, r8, lsr #30
   32be4:	andeq	r2, r3, r4, ror #29
   32be8:	ldrdeq	r2, [r3], -r4
   32bec:	andeq	r2, r3, r8, asr lr
   32bf0:	andeq	r2, r3, r4, asr #29
   32bf4:	andeq	r2, r3, r8, lsr lr
   32bf8:	andeq	r2, r3, r8, lsl pc
   32bfc:	andeq	r2, r3, r4, lsr #29
   32c00:	andeq	r2, r3, r8, lsr #30
   32c04:	andeq	r2, r3, r8, lsr #30
   32c08:	andeq	r2, r3, r8, lsr #30
   32c0c:	andeq	r2, r3, r8, lsr #30
   32c10:	andeq	r2, r3, r8, lsr #30
   32c14:	andeq	r2, r3, r8, lsr #30
   32c18:	andeq	r2, r3, r8, lsr #30
   32c1c:	andeq	r2, r3, r8, lsr #30
   32c20:	andeq	r2, r3, r8, lsr #30
   32c24:	andeq	r2, r3, r8, lsr #30
   32c28:	andeq	r2, r3, r8, lsr #30
   32c2c:	andeq	r2, r3, r8, lsr #30
   32c30:	andeq	r2, r3, r8, lsr #30
   32c34:	andeq	r2, r3, r8, lsr #30
   32c38:	andeq	r2, r3, r8, lsr #30
   32c3c:	andeq	r2, r3, r8, lsr #30
   32c40:	andeq	r2, r3, r8, lsr #30
   32c44:	andeq	r2, r3, r8, lsr #30
   32c48:	andeq	r2, r3, ip, asr #28
   32c4c:			; <UNDEFINED> instruction: 0x00032eb4
   32c50:			; <UNDEFINED> instruction: 0x00032eb4
   32c54:	andeq	r2, r3, ip, lsr #28
   32c58:			; <UNDEFINED> instruction: 0x00032eb4
   32c5c:	andeq	r2, r3, r0, lsr #28
   32c60:			; <UNDEFINED> instruction: 0x00032eb4
   32c64:	muleq	r3, r0, lr
   32c68:			; <UNDEFINED> instruction: 0x00032eb4
   32c6c:			; <UNDEFINED> instruction: 0x00032eb4
   32c70:			; <UNDEFINED> instruction: 0x00032eb4
   32c74:	andeq	r2, r3, r0, lsr #28
   32c78:	andeq	r2, r3, r0, lsr #28
   32c7c:	andeq	r2, r3, r0, lsr #28
   32c80:	andeq	r2, r3, r0, lsr #28
   32c84:	andeq	r2, r3, r0, lsr #28
   32c88:	andeq	r2, r3, r0, lsr #28
   32c8c:	andeq	r2, r3, r0, lsr #28
   32c90:	andeq	r2, r3, r0, lsr #28
   32c94:	andeq	r2, r3, r0, lsr #28
   32c98:	andeq	r2, r3, r0, lsr #28
   32c9c:	andeq	r2, r3, r0, lsr #28
   32ca0:	andeq	r2, r3, r0, lsr #28
   32ca4:	andeq	r2, r3, r0, lsr #28
   32ca8:	andeq	r2, r3, r0, lsr #28
   32cac:	andeq	r2, r3, r0, lsr #28
   32cb0:	andeq	r2, r3, r0, lsr #28
   32cb4:			; <UNDEFINED> instruction: 0x00032eb4
   32cb8:			; <UNDEFINED> instruction: 0x00032eb4
   32cbc:			; <UNDEFINED> instruction: 0x00032eb4
   32cc0:			; <UNDEFINED> instruction: 0x00032eb4
   32cc4:	andeq	r2, r3, r8, ror #28
   32cc8:	andeq	r2, r3, r8, lsr #30
   32ccc:	andeq	r2, r3, r0, lsr #28
   32cd0:	andeq	r2, r3, r0, lsr #28
   32cd4:	andeq	r2, r3, r0, lsr #28
   32cd8:	andeq	r2, r3, r0, lsr #28
   32cdc:	andeq	r2, r3, r0, lsr #28
   32ce0:	andeq	r2, r3, r0, lsr #28
   32ce4:	andeq	r2, r3, r0, lsr #28
   32ce8:	andeq	r2, r3, r0, lsr #28
   32cec:	andeq	r2, r3, r0, lsr #28
   32cf0:	andeq	r2, r3, r0, lsr #28
   32cf4:	andeq	r2, r3, r0, lsr #28
   32cf8:	andeq	r2, r3, r0, lsr #28
   32cfc:	andeq	r2, r3, r0, lsr #28
   32d00:	andeq	r2, r3, r0, lsr #28
   32d04:	andeq	r2, r3, r0, lsr #28
   32d08:	andeq	r2, r3, r0, lsr #28
   32d0c:	andeq	r2, r3, r0, lsr #28
   32d10:	andeq	r2, r3, r0, lsr #28
   32d14:	andeq	r2, r3, r0, lsr #28
   32d18:	andeq	r2, r3, r0, lsr #28
   32d1c:	andeq	r2, r3, r0, lsr #28
   32d20:	andeq	r2, r3, r0, lsr #28
   32d24:	andeq	r2, r3, r0, lsr #28
   32d28:	andeq	r2, r3, r0, lsr #28
   32d2c:	andeq	r2, r3, r0, lsr #28
   32d30:	andeq	r2, r3, r0, lsr #28
   32d34:			; <UNDEFINED> instruction: 0x00032eb4
   32d38:	andeq	r2, r3, r8, ror #27
   32d3c:	andeq	r2, r3, r0, lsr #28
   32d40:			; <UNDEFINED> instruction: 0x00032eb4
   32d44:	andeq	r2, r3, r0, lsr #28
   32d48:			; <UNDEFINED> instruction: 0x00032eb4
   32d4c:	andeq	r2, r3, r0, lsr #28
   32d50:	andeq	r2, r3, r0, lsr #28
   32d54:	andeq	r2, r3, r0, lsr #28
   32d58:	andeq	r2, r3, r0, lsr #28
   32d5c:	andeq	r2, r3, r0, lsr #28
   32d60:	andeq	r2, r3, r0, lsr #28
   32d64:	andeq	r2, r3, r0, lsr #28
   32d68:	andeq	r2, r3, r0, lsr #28
   32d6c:	andeq	r2, r3, r0, lsr #28
   32d70:	andeq	r2, r3, r0, lsr #28
   32d74:	andeq	r2, r3, r0, lsr #28
   32d78:	andeq	r2, r3, r0, lsr #28
   32d7c:	andeq	r2, r3, r0, lsr #28
   32d80:	andeq	r2, r3, r0, lsr #28
   32d84:	andeq	r2, r3, r0, lsr #28
   32d88:	andeq	r2, r3, r0, lsr #28
   32d8c:	andeq	r2, r3, r0, lsr #28
   32d90:	andeq	r2, r3, r0, lsr #28
   32d94:	andeq	r2, r3, r0, lsr #28
   32d98:	andeq	r2, r3, r0, lsr #28
   32d9c:	andeq	r2, r3, r0, lsr #28
   32da0:	andeq	r2, r3, r0, lsr #28
   32da4:	andeq	r2, r3, r0, lsr #28
   32da8:	andeq	r2, r3, r0, lsr #28
   32dac:	andeq	r2, r3, r0, lsr #28
   32db0:	andeq	r2, r3, r0, lsr #28
   32db4:	andeq	r2, r3, r4, asr #27
   32db8:			; <UNDEFINED> instruction: 0x00032eb4
   32dbc:	andeq	r2, r3, r4, asr #27
   32dc0:	andeq	r2, r3, ip, lsr #28
   32dc4:	mov	r3, #0
   32dc8:	cmn	r8, #1
   32dcc:	str	r3, [sp, #40]	; 0x28
   32dd0:	bne	32990 <__assert_fail@plt+0x2039c>
   32dd4:	ldr	r3, [sp, #28]
   32dd8:	ldrb	r3, [r3, #1]
   32ddc:	adds	r3, r3, #0
   32de0:	movne	r3, #1
   32de4:	b	32998 <__assert_fail@plt+0x203a4>
   32de8:	mov	r3, #0
   32dec:	str	r3, [sp, #40]	; 0x28
   32df0:	ldr	r3, [sp, #176]	; 0xb0
   32df4:	cmp	r3, #2
   32df8:	bne	32a88 <__assert_fail@plt+0x20494>
   32dfc:	ldr	r3, [sp, #44]	; 0x2c
   32e00:	cmp	r3, #0
   32e04:	bne	33744 <__assert_fail@plt+0x21150>
   32e08:	mov	r6, r3
   32e0c:	add	r7, r7, #1
   32e10:	mov	r3, fp
   32e14:	mov	r5, #92	; 0x5c
   32e18:	b	32858 <__assert_fail@plt+0x20264>
   32e1c:	ldr	r6, [sp, #48]	; 0x30
   32e20:	mov	r3, #0
   32e24:	str	r3, [sp, #40]	; 0x28
   32e28:	b	329ac <__assert_fail@plt+0x203b8>
   32e2c:	mov	r3, #0
   32e30:	str	r3, [sp, #40]	; 0x28
   32e34:	b	329a0 <__assert_fail@plt+0x203ac>
   32e38:	mov	r3, #0
   32e3c:	str	r3, [sp, #40]	; 0x28
   32e40:	mov	r3, #118	; 0x76
   32e44:	b	32800 <__assert_fail@plt+0x2020c>
   32e48:	ldr	r6, [sp, #48]	; 0x30
   32e4c:	mov	r3, #0
   32e50:	str	r3, [sp, #40]	; 0x28
   32e54:	b	329ec <__assert_fail@plt+0x203f8>
   32e58:	mov	r3, #0
   32e5c:	str	r3, [sp, #40]	; 0x28
   32e60:	mov	r3, #116	; 0x74
   32e64:	b	327f4 <__assert_fail@plt+0x20200>
   32e68:	ldr	r3, [sp, #176]	; 0xb0
   32e6c:	cmp	r3, #2
   32e70:	beq	33380 <__assert_fail@plt+0x20d8c>
   32e74:	cmp	r3, #5
   32e78:	mov	r3, #0
   32e7c:	str	r3, [sp, #40]	; 0x28
   32e80:	beq	32aec <__assert_fail@plt+0x204f8>
   32e84:	mov	r6, #0
   32e88:	mov	r5, #63	; 0x3f
   32e8c:	b	329ac <__assert_fail@plt+0x203b8>
   32e90:	ldr	r3, [sp, #176]	; 0xb0
   32e94:	cmp	r3, #2
   32e98:	beq	33308 <__assert_fail@plt+0x20d14>
   32e9c:	mov	r3, #0
   32ea0:	b	32b30 <__assert_fail@plt+0x2053c>
   32ea4:	mov	r3, #0
   32ea8:	str	r3, [sp, #40]	; 0x28
   32eac:	mov	r3, #114	; 0x72
   32eb0:	b	327f4 <__assert_fail@plt+0x20200>
   32eb4:	mov	r3, #0
   32eb8:	mov	r6, r3
   32ebc:	str	r3, [sp, #40]	; 0x28
   32ec0:	b	329ec <__assert_fail@plt+0x203f8>
   32ec4:	mov	r3, #0
   32ec8:	str	r3, [sp, #40]	; 0x28
   32ecc:	mov	r3, #110	; 0x6e
   32ed0:	b	327f4 <__assert_fail@plt+0x20200>
   32ed4:	mov	r3, #0
   32ed8:	str	r3, [sp, #40]	; 0x28
   32edc:	mov	r3, #98	; 0x62
   32ee0:	b	32800 <__assert_fail@plt+0x2020c>
   32ee4:	mov	r3, #0
   32ee8:	str	r3, [sp, #40]	; 0x28
   32eec:	mov	r3, #97	; 0x61
   32ef0:	b	32800 <__assert_fail@plt+0x2020c>
   32ef4:	ldr	r3, [sp, #60]	; 0x3c
   32ef8:	cmp	r3, #0
   32efc:	bne	332ec <__assert_fail@plt+0x20cf8>
   32f00:	ldr	r3, [sp, #92]	; 0x5c
   32f04:	cmp	r3, #0
   32f08:	addne	r7, r7, #1
   32f0c:	bne	3210c <__assert_fail@plt+0x1fb18>
   32f10:	str	r3, [sp, #40]	; 0x28
   32f14:	b	3280c <__assert_fail@plt+0x20218>
   32f18:	mov	r3, #0
   32f1c:	str	r3, [sp, #40]	; 0x28
   32f20:	mov	r3, #102	; 0x66
   32f24:	b	32800 <__assert_fail@plt+0x2020c>
   32f28:	mov	r3, #0
   32f2c:	str	r3, [sp, #40]	; 0x28
   32f30:	ldr	r3, [sp, #76]	; 0x4c
   32f34:	cmp	r3, #1
   32f38:	bne	333a0 <__assert_fail@plt+0x20dac>
   32f3c:	bl	122b8 <__ctype_b_loc@plt>
   32f40:	ldr	r2, [r0]
   32f44:	sxth	r3, r5
   32f48:	lsl	r3, r3, #1
   32f4c:	ldr	r1, [sp, #76]	; 0x4c
   32f50:	ldrh	r3, [r2, r3]
   32f54:	mov	r0, r1
   32f58:	and	r3, r3, #16384	; 0x4000
   32f5c:	cmp	r3, #0
   32f60:	ldr	r3, [sp, #60]	; 0x3c
   32f64:	movne	r6, #1
   32f68:	moveq	r6, #0
   32f6c:	movne	r2, #0
   32f70:	andeq	r2, r3, #1
   32f74:	cmp	r2, #0
   32f78:	beq	329ac <__assert_fail@plt+0x203b8>
   32f7c:	ldr	r2, [sp, #60]	; 0x3c
   32f80:	mov	r6, #0
   32f84:	add	r1, r7, r0
   32f88:	mov	ip, #39	; 0x27
   32f8c:	str	r6, [sp, #100]	; 0x64
   32f90:	mov	r0, #0
   32f94:	ldr	lr, [sp, #36]	; 0x24
   32f98:	str	r8, [sp, #36]	; 0x24
   32f9c:	ldr	r6, [sp, #40]	; 0x28
   32fa0:	ldr	r8, [sp, #44]	; 0x2c
   32fa4:	b	33054 <__assert_fail@plt+0x20a60>
   32fa8:	cmp	r8, #0
   32fac:	bne	33588 <__assert_fail@plt+0x20f94>
   32fb0:	ldr	r0, [sp, #52]	; 0x34
   32fb4:	eor	r3, fp, #1
   32fb8:	ands	r3, r0, r3
   32fbc:	beq	32fec <__assert_fail@plt+0x209f8>
   32fc0:	cmp	sl, r4
   32fc4:	add	r0, r4, #1
   32fc8:	strbhi	ip, [r9, r4]
   32fcc:	cmp	sl, r0
   32fd0:	movhi	fp, #36	; 0x24
   32fd4:	strbhi	fp, [r9, r0]
   32fd8:	add	r0, r4, #2
   32fdc:	mov	fp, r3
   32fe0:	cmp	sl, r0
   32fe4:	add	r4, r4, #3
   32fe8:	strbhi	ip, [r9, r0]
   32fec:	cmp	sl, r4
   32ff0:	movhi	r3, #92	; 0x5c
   32ff4:	strbhi	r3, [r9, r4]
   32ff8:	add	r3, r4, #1
   32ffc:	cmp	sl, r3
   33000:	bls	33010 <__assert_fail@plt+0x20a1c>
   33004:	lsr	r0, r5, #6
   33008:	add	r0, r0, #48	; 0x30
   3300c:	strb	r0, [r9, r3]
   33010:	add	r3, r4, #2
   33014:	cmp	sl, r3
   33018:	bls	33028 <__assert_fail@plt+0x20a34>
   3301c:	ubfx	r0, r5, #3, #3
   33020:	add	r0, r0, #48	; 0x30
   33024:	strb	r0, [r9, r3]
   33028:	add	r7, r7, #1
   3302c:	and	r5, r5, #7
   33030:	cmp	r1, r7
   33034:	add	r5, r5, #48	; 0x30
   33038:	add	r4, r4, #3
   3303c:	bls	3359c <__assert_fail@plt+0x20fa8>
   33040:	mov	r0, r2
   33044:	cmp	sl, r4
   33048:	strbhi	r5, [r9, r4]
   3304c:	add	r4, r4, #1
   33050:	ldrb	r5, [lr, #1]!
   33054:	cmp	r2, #0
   33058:	bne	32fa8 <__assert_fail@plt+0x209b4>
   3305c:	eor	r3, r0, #1
   33060:	cmp	r6, #0
   33064:	and	r3, r3, fp
   33068:	uxtb	r3, r3
   3306c:	beq	33080 <__assert_fail@plt+0x20a8c>
   33070:	cmp	sl, r4
   33074:	movhi	r6, #92	; 0x5c
   33078:	strbhi	r6, [r9, r4]
   3307c:	add	r4, r4, #1
   33080:	add	r7, r7, #1
   33084:	cmp	r7, r1
   33088:	bcs	3357c <__assert_fail@plt+0x20f88>
   3308c:	cmp	r3, #0
   33090:	beq	335c0 <__assert_fail@plt+0x20fcc>
   33094:	cmp	sl, r4
   33098:	add	r3, r4, #1
   3309c:	mov	r6, #0
   330a0:	strbhi	ip, [r9, r4]
   330a4:	cmp	sl, r3
   330a8:	add	r4, r4, #2
   330ac:	mov	fp, r6
   330b0:	strbhi	ip, [r9, r3]
   330b4:	b	33044 <__assert_fail@plt+0x20a50>
   330b8:	ldr	r3, [sp, #36]	; 0x24
   330bc:	ldrb	r5, [r3]
   330c0:	cmp	r5, #126	; 0x7e
   330c4:	ldrls	pc, [pc, r5, lsl #2]
   330c8:	b	32f28 <__assert_fail@plt+0x20934>
   330cc:	andeq	r3, r3, ip, ror #5
   330d0:	andeq	r2, r3, r8, lsr #30
   330d4:	andeq	r2, r3, r8, lsr #30
   330d8:	andeq	r2, r3, r8, lsr #30
   330dc:	andeq	r2, r3, r8, lsr #30
   330e0:	andeq	r2, r3, r8, lsr #30
   330e4:	andeq	r2, r3, r8, lsr #30
   330e8:	andeq	r2, r3, r0, ror #15
   330ec:	ldrdeq	r2, [r3], -r8
   330f0:	andeq	r2, r3, r8, asr lr
   330f4:	andeq	r3, r3, r0, ror #5
   330f8:	andeq	r2, r3, r8, lsr lr
   330fc:	andeq	r2, r3, r4, lsl #13
   33100:	ldrdeq	r3, [r3], -r4
   33104:	andeq	r2, r3, r8, lsr #30
   33108:	andeq	r2, r3, r8, lsr #30
   3310c:	andeq	r2, r3, r8, lsr #30
   33110:	andeq	r2, r3, r8, lsr #30
   33114:	andeq	r2, r3, r8, lsr #30
   33118:	andeq	r2, r3, r8, lsr #30
   3311c:	andeq	r2, r3, r8, lsr #30
   33120:	andeq	r2, r3, r8, lsr #30
   33124:	andeq	r2, r3, r8, lsr #30
   33128:	andeq	r2, r3, r8, lsr #30
   3312c:	andeq	r2, r3, r8, lsr #30
   33130:	andeq	r2, r3, r8, lsr #30
   33134:	andeq	r2, r3, r8, lsr #30
   33138:	andeq	r2, r3, r8, lsr #30
   3313c:	andeq	r2, r3, r8, lsr #30
   33140:	andeq	r2, r3, r8, lsr #30
   33144:	andeq	r2, r3, r8, lsr #30
   33148:	andeq	r2, r3, r8, lsr #30
   3314c:	andeq	r2, r3, r8, asr #28
   33150:	andeq	r3, r3, r8, asr #5
   33154:	andeq	r3, r3, r8, asr #5
   33158:	andeq	r2, r3, ip, lsr #28
   3315c:	andeq	r3, r3, r8, asr #5
   33160:	andeq	r2, r3, ip, lsl lr
   33164:	andeq	r3, r3, r8, asr #5
   33168:	muleq	r3, r0, lr
   3316c:	andeq	r3, r3, r8, asr #5
   33170:	andeq	r3, r3, r8, asr #5
   33174:	andeq	r3, r3, r8, asr #5
   33178:	andeq	r2, r3, ip, lsl lr
   3317c:	andeq	r2, r3, ip, lsl lr
   33180:	andeq	r2, r3, ip, lsl lr
   33184:	andeq	r2, r3, ip, lsl lr
   33188:	andeq	r2, r3, ip, lsl lr
   3318c:	andeq	r2, r3, ip, lsl lr
   33190:	andeq	r2, r3, ip, lsl lr
   33194:	andeq	r2, r3, ip, lsl lr
   33198:	andeq	r2, r3, ip, lsl lr
   3319c:	andeq	r2, r3, ip, lsl lr
   331a0:	andeq	r2, r3, ip, lsl lr
   331a4:	andeq	r2, r3, ip, lsl lr
   331a8:	andeq	r2, r3, ip, lsl lr
   331ac:	andeq	r2, r3, ip, lsl lr
   331b0:	andeq	r2, r3, ip, lsl lr
   331b4:	andeq	r2, r3, ip, lsl lr
   331b8:	andeq	r3, r3, r8, asr #5
   331bc:	andeq	r3, r3, r8, asr #5
   331c0:	andeq	r3, r3, r8, asr #5
   331c4:	andeq	r3, r3, r8, asr #5
   331c8:	andeq	r2, r3, r8, ror #28
   331cc:	andeq	r2, r3, r8, lsr #30
   331d0:	andeq	r2, r3, ip, lsl lr
   331d4:	andeq	r2, r3, ip, lsl lr
   331d8:	andeq	r2, r3, ip, lsl lr
   331dc:	andeq	r2, r3, ip, lsl lr
   331e0:	andeq	r2, r3, ip, lsl lr
   331e4:	andeq	r2, r3, ip, lsl lr
   331e8:	andeq	r2, r3, ip, lsl lr
   331ec:	andeq	r2, r3, ip, lsl lr
   331f0:	andeq	r2, r3, ip, lsl lr
   331f4:	andeq	r2, r3, ip, lsl lr
   331f8:	andeq	r2, r3, ip, lsl lr
   331fc:	andeq	r2, r3, ip, lsl lr
   33200:	andeq	r2, r3, ip, lsl lr
   33204:	andeq	r2, r3, ip, lsl lr
   33208:	andeq	r2, r3, ip, lsl lr
   3320c:	andeq	r2, r3, ip, lsl lr
   33210:	andeq	r2, r3, ip, lsl lr
   33214:	andeq	r2, r3, ip, lsl lr
   33218:	andeq	r2, r3, ip, lsl lr
   3321c:	andeq	r2, r3, ip, lsl lr
   33220:	andeq	r2, r3, ip, lsl lr
   33224:	andeq	r2, r3, ip, lsl lr
   33228:	andeq	r2, r3, ip, lsl lr
   3322c:	andeq	r2, r3, ip, lsl lr
   33230:	andeq	r2, r3, ip, lsl lr
   33234:	andeq	r2, r3, ip, lsl lr
   33238:	andeq	r3, r3, r8, asr #5
   3323c:	andeq	r2, r3, r8, ror #27
   33240:	andeq	r2, r3, ip, lsl lr
   33244:	andeq	r3, r3, r8, asr #5
   33248:	andeq	r2, r3, ip, lsl lr
   3324c:	andeq	r3, r3, r8, asr #5
   33250:	andeq	r2, r3, ip, lsl lr
   33254:	andeq	r2, r3, ip, lsl lr
   33258:	andeq	r2, r3, ip, lsl lr
   3325c:	andeq	r2, r3, ip, lsl lr
   33260:	andeq	r2, r3, ip, lsl lr
   33264:	andeq	r2, r3, ip, lsl lr
   33268:	andeq	r2, r3, ip, lsl lr
   3326c:	andeq	r2, r3, ip, lsl lr
   33270:	andeq	r2, r3, ip, lsl lr
   33274:	andeq	r2, r3, ip, lsl lr
   33278:	andeq	r2, r3, ip, lsl lr
   3327c:	andeq	r2, r3, ip, lsl lr
   33280:	andeq	r2, r3, ip, lsl lr
   33284:	andeq	r2, r3, ip, lsl lr
   33288:	andeq	r2, r3, ip, lsl lr
   3328c:	andeq	r2, r3, ip, lsl lr
   33290:	andeq	r2, r3, ip, lsl lr
   33294:	andeq	r2, r3, ip, lsl lr
   33298:	andeq	r2, r3, ip, lsl lr
   3329c:	andeq	r2, r3, ip, lsl lr
   332a0:	andeq	r2, r3, ip, lsl lr
   332a4:	andeq	r2, r3, ip, lsl lr
   332a8:	andeq	r2, r3, ip, lsl lr
   332ac:	andeq	r2, r3, ip, lsl lr
   332b0:	andeq	r2, r3, ip, lsl lr
   332b4:	andeq	r2, r3, ip, lsl lr
   332b8:	andeq	r2, r3, r4, asr #27
   332bc:	andeq	r3, r3, r8, asr #5
   332c0:	andeq	r2, r3, r4, asr #27
   332c4:	andeq	r2, r3, ip, lsr #28
   332c8:	mov	r3, #0
   332cc:	str	r3, [sp, #40]	; 0x28
   332d0:	b	329a8 <__assert_fail@plt+0x203b4>
   332d4:	mov	r3, #0
   332d8:	str	r3, [sp, #40]	; 0x28
   332dc:	b	32940 <__assert_fail@plt+0x2034c>
   332e0:	mov	r3, #0
   332e4:	str	r3, [sp, #40]	; 0x28
   332e8:	b	32974 <__assert_fail@plt+0x20380>
   332ec:	ldr	r3, [sp, #44]	; 0x2c
   332f0:	cmp	r3, #0
   332f4:	beq	3288c <__assert_fail@plt+0x20298>
   332f8:	ldr	r3, [sp, #52]	; 0x34
   332fc:	mov	fp, r9
   33300:	str	r3, [sp, #60]	; 0x3c
   33304:	b	32a04 <__assert_fail@plt+0x20410>
   33308:	ldr	r3, [sp, #44]	; 0x2c
   3330c:	cmp	r3, #0
   33310:	bne	33744 <__assert_fail@plt+0x21150>
   33314:	str	r3, [sp, #40]	; 0x28
   33318:	cmp	sl, #0
   3331c:	ldr	r3, [sp, #84]	; 0x54
   33320:	clz	r3, r3
   33324:	lsr	r3, r3, #5
   33328:	moveq	r3, #0
   3332c:	cmp	r3, #0
   33330:	strne	sl, [sp, #84]	; 0x54
   33334:	movne	sl, #0
   33338:	bne	33368 <__assert_fail@plt+0x20d74>
   3333c:	cmp	sl, r4
   33340:	movhi	r3, #39	; 0x27
   33344:	strbhi	r3, [r9, r4]
   33348:	add	r3, r4, #1
   3334c:	cmp	sl, r3
   33350:	movhi	r2, #92	; 0x5c
   33354:	strbhi	r2, [r9, r3]
   33358:	add	r3, r4, #2
   3335c:	cmp	sl, r3
   33360:	movhi	r2, #39	; 0x27
   33364:	strbhi	r2, [r9, r3]
   33368:	mov	r3, #0
   3336c:	add	r4, r4, #3
   33370:	str	r6, [sp, #80]	; 0x50
   33374:	mov	fp, r3
   33378:	mov	r5, #39	; 0x27
   3337c:	b	32848 <__assert_fail@plt+0x20254>
   33380:	ldr	r3, [sp, #44]	; 0x2c
   33384:	cmp	r3, #0
   33388:	bne	33744 <__assert_fail@plt+0x21150>
   3338c:	mov	r6, #0
   33390:	mov	r5, #63	; 0x3f
   33394:	str	r3, [sp, #40]	; 0x28
   33398:	mov	r3, fp
   3339c:	b	32848 <__assert_fail@plt+0x20254>
   333a0:	mov	r2, #0
   333a4:	mov	r3, #0
   333a8:	cmn	r8, #1
   333ac:	strd	r2, [sp, #128]	; 0x80
   333b0:	bne	333c0 <__assert_fail@plt+0x20dcc>
   333b4:	ldr	r0, [sp, #28]
   333b8:	bl	12300 <strlen@plt>
   333bc:	mov	r8, r0
   333c0:	str	r9, [sp, #100]	; 0x64
   333c4:	mov	r3, #0
   333c8:	strd	sl, [sp, #104]	; 0x68
   333cc:	ldr	sl, [sp, #28]
   333d0:	str	r5, [sp, #112]	; 0x70
   333d4:	mov	r5, r3
   333d8:	ldr	r9, [sp, #68]	; 0x44
   333dc:	str	r4, [sp, #116]	; 0x74
   333e0:	add	r4, r7, r5
   333e4:	add	r3, sp, #128	; 0x80
   333e8:	add	fp, sl, r4
   333ec:	sub	r2, r8, r4
   333f0:	mov	r1, fp
   333f4:	add	r0, sp, #124	; 0x7c
   333f8:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   333fc:	subs	r1, r0, #0
   33400:	beq	33440 <__assert_fail@plt+0x20e4c>
   33404:	cmn	r1, #1
   33408:	beq	33798 <__assert_fail@plt+0x211a4>
   3340c:	cmn	r1, #2
   33410:	beq	337b8 <__assert_fail@plt+0x211c4>
   33414:	cmp	r9, #0
   33418:	bne	33470 <__assert_fail@plt+0x20e7c>
   3341c:	ldr	r0, [sp, #124]	; 0x7c
   33420:	add	r5, r5, r1
   33424:	bl	12138 <iswprint@plt>
   33428:	cmp	r0, #0
   3342c:	add	r0, sp, #128	; 0x80
   33430:	moveq	r6, #0
   33434:	bl	12060 <mbsinit@plt>
   33438:	cmp	r0, #0
   3343c:	beq	333e0 <__assert_fail@plt+0x20dec>
   33440:	ldr	r3, [sp, #60]	; 0x3c
   33444:	add	r9, sp, #100	; 0x64
   33448:	mov	r0, r5
   3344c:	ldm	r9, {r9, sl, fp}
   33450:	eor	r2, r6, #1
   33454:	ldr	r5, [sp, #112]	; 0x70
   33458:	and	r2, r2, r3
   3345c:	uxtb	r2, r2
   33460:	ldr	r4, [sp, #116]	; 0x74
   33464:	cmp	r0, #1
   33468:	bhi	32f84 <__assert_fail@plt+0x20990>
   3346c:	b	32f74 <__assert_fail@plt+0x20980>
   33470:	cmp	r1, #1
   33474:	beq	3341c <__assert_fail@plt+0x20e28>
   33478:	add	r2, r4, #1
   3347c:	add	r3, sl, r1
   33480:	add	r2, sl, r2
   33484:	add	r4, r3, r4
   33488:	ldrb	r3, [r2], #1
   3348c:	sub	r3, r3, #91	; 0x5b
   33490:	cmp	r3, #33	; 0x21
   33494:	ldrls	pc, [pc, r3, lsl #2]
   33498:	b	33524 <__assert_fail@plt+0x20f30>
   3349c:	andeq	r3, r3, r0, lsr r5
   334a0:	andeq	r3, r3, r0, lsr r5
   334a4:	andeq	r3, r3, r4, lsr #10
   334a8:	andeq	r3, r3, r0, lsr r5
   334ac:	andeq	r3, r3, r4, lsr #10
   334b0:	andeq	r3, r3, r0, lsr r5
   334b4:	andeq	r3, r3, r4, lsr #10
   334b8:	andeq	r3, r3, r4, lsr #10
   334bc:	andeq	r3, r3, r4, lsr #10
   334c0:	andeq	r3, r3, r4, lsr #10
   334c4:	andeq	r3, r3, r4, lsr #10
   334c8:	andeq	r3, r3, r4, lsr #10
   334cc:	andeq	r3, r3, r4, lsr #10
   334d0:	andeq	r3, r3, r4, lsr #10
   334d4:	andeq	r3, r3, r4, lsr #10
   334d8:	andeq	r3, r3, r4, lsr #10
   334dc:	andeq	r3, r3, r4, lsr #10
   334e0:	andeq	r3, r3, r4, lsr #10
   334e4:	andeq	r3, r3, r4, lsr #10
   334e8:	andeq	r3, r3, r4, lsr #10
   334ec:	andeq	r3, r3, r4, lsr #10
   334f0:	andeq	r3, r3, r4, lsr #10
   334f4:	andeq	r3, r3, r4, lsr #10
   334f8:	andeq	r3, r3, r4, lsr #10
   334fc:	andeq	r3, r3, r4, lsr #10
   33500:	andeq	r3, r3, r4, lsr #10
   33504:	andeq	r3, r3, r4, lsr #10
   33508:	andeq	r3, r3, r4, lsr #10
   3350c:	andeq	r3, r3, r4, lsr #10
   33510:	andeq	r3, r3, r4, lsr #10
   33514:	andeq	r3, r3, r4, lsr #10
   33518:	andeq	r3, r3, r4, lsr #10
   3351c:	andeq	r3, r3, r4, lsr #10
   33520:	andeq	r3, r3, r0, lsr r5
   33524:	cmp	r4, r2
   33528:	bne	33488 <__assert_fail@plt+0x20e94>
   3352c:	b	3341c <__assert_fail@plt+0x20e28>
   33530:	mov	r3, #2
   33534:	ldr	fp, [sp, #100]	; 0x64
   33538:	str	r3, [sp, #176]	; 0xb0
   3353c:	ldr	sl, [sp, #104]	; 0x68
   33540:	b	32a04 <__assert_fail@plt+0x20410>
   33544:	ldr	r2, [sp, #52]	; 0x34
   33548:	mov	fp, r9
   3354c:	ldr	r3, [sp, #60]	; 0x3c
   33550:	and	r3, r3, r2
   33554:	str	r3, [sp, #60]	; 0x3c
   33558:	b	32a04 <__assert_fail@plt+0x20410>
   3355c:	cmp	sl, r4
   33560:	movhi	r2, fp
   33564:	bhi	328dc <__assert_fail@plt+0x202e8>
   33568:	mov	r2, r4
   3356c:	b	328ec <__assert_fail@plt+0x202f8>
   33570:	mov	r6, r3
   33574:	mov	r5, #63	; 0x3f
   33578:	b	329ac <__assert_fail@plt+0x203b8>
   3357c:	ldr	r8, [sp, #36]	; 0x24
   33580:	ldr	r6, [sp, #100]	; 0x64
   33584:	b	32858 <__assert_fail@plt+0x20264>
   33588:	mov	fp, r9
   3358c:	ldr	r8, [sp, #36]	; 0x24
   33590:	ldr	r3, [sp, #52]	; 0x34
   33594:	str	r3, [sp, #60]	; 0x3c
   33598:	b	32a04 <__assert_fail@plt+0x20410>
   3359c:	ldr	r8, [sp, #36]	; 0x24
   335a0:	ldr	r6, [sp, #100]	; 0x64
   335a4:	b	326f0 <__assert_fail@plt+0x200fc>
   335a8:	mov	r3, #0
   335ac:	add	r4, r4, #4
   335b0:	mov	fp, r2
   335b4:	mov	r6, r3
   335b8:	mov	r5, #48	; 0x30
   335bc:	b	32848 <__assert_fail@plt+0x20254>
   335c0:	mov	r6, r3
   335c4:	b	33044 <__assert_fail@plt+0x20a50>
   335c8:	mov	r3, #1
   335cc:	movw	r2, #24156	; 0x5e5c
   335d0:	movt	r2, #5
   335d4:	mov	r4, r3
   335d8:	mov	r9, sl
   335dc:	str	r3, [sp, #32]
   335e0:	str	sl, [sp, #44]	; 0x2c
   335e4:	str	r3, [sp, #48]	; 0x30
   335e8:	str	sl, [sp, #52]	; 0x34
   335ec:	str	r3, [sp, #56]	; 0x38
   335f0:	str	r3, [sp, #60]	; 0x3c
   335f4:	str	sl, [sp, #64]	; 0x40
   335f8:	str	sl, [sp, #68]	; 0x44
   335fc:	str	r2, [sp, #72]	; 0x48
   33600:	str	sl, [sp, #80]	; 0x50
   33604:	str	sl, [sp, #84]	; 0x54
   33608:	str	sl, [sp, #88]	; 0x58
   3360c:	b	320fc <__assert_fail@plt+0x1fb08>
   33610:	mov	r3, #0
   33614:	mov	r5, #48	; 0x30
   33618:	mov	r6, r3
   3361c:	b	32848 <__assert_fail@plt+0x20254>
   33620:	cmp	sl, r4
   33624:	mov	r5, #48	; 0x30
   33628:	movhi	r3, #48	; 0x30
   3362c:	strbhi	r3, [r9, r4]
   33630:	add	r3, r2, #2
   33634:	add	r4, r2, #3
   33638:	cmp	sl, r3
   3363c:	movhi	r1, #48	; 0x30
   33640:	strbhi	r1, [r9, r3]
   33644:	mov	r3, #0
   33648:	b	32924 <__assert_fail@plt+0x20330>
   3364c:	ldr	r3, [sp, #48]	; 0x30
   33650:	str	r3, [sp, #40]	; 0x28
   33654:	b	32f30 <__assert_fail@plt+0x2093c>
   33658:	ldr	r2, [sp, #28]
   3365c:	ldrb	r2, [r2, r3]
   33660:	sub	r1, r2, #33	; 0x21
   33664:	cmp	r1, #29
   33668:	ldrls	pc, [pc, r1, lsl #2]
   3366c:	b	329a8 <__assert_fail@plt+0x203b4>
   33670:	andeq	r3, r3, r8, ror #13
   33674:	andeq	r2, r3, r8, lsr #19
   33678:	andeq	r2, r3, r8, lsr #19
   3367c:	andeq	r2, r3, r8, lsr #19
   33680:	andeq	r2, r3, r8, lsr #19
   33684:	andeq	r2, r3, r8, lsr #19
   33688:	andeq	r3, r3, r8, ror #13
   3368c:	andeq	r3, r3, r8, ror #13
   33690:	andeq	r3, r3, r8, ror #13
   33694:	andeq	r2, r3, r8, lsr #19
   33698:	andeq	r2, r3, r8, lsr #19
   3369c:	andeq	r2, r3, r8, lsr #19
   336a0:	andeq	r3, r3, r8, ror #13
   336a4:	andeq	r2, r3, r8, lsr #19
   336a8:	andeq	r3, r3, r8, ror #13
   336ac:	andeq	r2, r3, r8, lsr #19
   336b0:	andeq	r2, r3, r8, lsr #19
   336b4:	andeq	r2, r3, r8, lsr #19
   336b8:	andeq	r2, r3, r8, lsr #19
   336bc:	andeq	r2, r3, r8, lsr #19
   336c0:	andeq	r2, r3, r8, lsr #19
   336c4:	andeq	r2, r3, r8, lsr #19
   336c8:	andeq	r2, r3, r8, lsr #19
   336cc:	andeq	r2, r3, r8, lsr #19
   336d0:	andeq	r2, r3, r8, lsr #19
   336d4:	andeq	r2, r3, r8, lsr #19
   336d8:	andeq	r2, r3, r8, lsr #19
   336dc:	andeq	r3, r3, r8, ror #13
   336e0:	andeq	r3, r3, r8, ror #13
   336e4:	andeq	r3, r3, r8, ror #13
   336e8:	ldr	r1, [sp, #44]	; 0x2c
   336ec:	cmp	r1, #0
   336f0:	bne	33950 <__assert_fail@plt+0x2135c>
   336f4:	cmp	sl, r4
   336f8:	mov	r7, r3
   336fc:	movhi	r1, #63	; 0x3f
   33700:	mov	r5, r2
   33704:	mov	r3, fp
   33708:	strbhi	r1, [r9, r4]
   3370c:	add	r1, r4, #1
   33710:	cmp	sl, r1
   33714:	movhi	r0, #34	; 0x22
   33718:	strbhi	r0, [r9, r1]
   3371c:	add	r1, r4, #2
   33720:	cmp	sl, r1
   33724:	movhi	r0, #34	; 0x22
   33728:	strbhi	r0, [r9, r1]
   3372c:	add	r1, r4, #3
   33730:	add	r4, r4, #4
   33734:	cmp	sl, r1
   33738:	movhi	r0, #63	; 0x3f
   3373c:	strbhi	r0, [r9, r1]
   33740:	b	32924 <__assert_fail@plt+0x20330>
   33744:	mov	fp, r9
   33748:	b	32a04 <__assert_fail@plt+0x20410>
   3374c:	ldr	r3, [sp, #188]	; 0xbc
   33750:	ldrb	r3, [r3]
   33754:	cmp	r3, #0
   33758:	beq	32094 <__assert_fail@plt+0x1faa0>
   3375c:	ldr	r2, [sp, #188]	; 0xbc
   33760:	cmp	sl, r4
   33764:	bls	33784 <__assert_fail@plt+0x21190>
   33768:	strb	r3, [fp, r4]
   3376c:	add	r4, r4, #1
   33770:	ldrb	r3, [r2, #1]!
   33774:	cmp	r3, #0
   33778:	beq	32094 <__assert_fail@plt+0x1faa0>
   3377c:	cmp	sl, r4
   33780:	bhi	33768 <__assert_fail@plt+0x21174>
   33784:	ldrb	r3, [r2, #1]!
   33788:	add	r4, r4, #1
   3378c:	cmp	r3, #0
   33790:	bne	33760 <__assert_fail@plt+0x2116c>
   33794:	b	32094 <__assert_fail@plt+0x1faa0>
   33798:	add	r9, sp, #100	; 0x64
   3379c:	mov	r0, r5
   337a0:	ldr	r2, [sp, #60]	; 0x3c
   337a4:	mov	r6, #0
   337a8:	ldm	r9, {r9, sl, fp}
   337ac:	ldr	r5, [sp, #112]	; 0x70
   337b0:	ldr	r4, [sp, #116]	; 0x74
   337b4:	b	33464 <__assert_fail@plt+0x20e70>
   337b8:	cmp	r4, r8
   337bc:	add	r9, sp, #100	; 0x64
   337c0:	mov	r1, r4
   337c4:	mov	r2, fp
   337c8:	ldm	r9, {r9, sl, fp}
   337cc:	mov	r3, r5
   337d0:	mov	r0, r5
   337d4:	ldr	r5, [sp, #112]	; 0x70
   337d8:	ldr	r4, [sp, #116]	; 0x74
   337dc:	bcs	33810 <__assert_fail@plt+0x2121c>
   337e0:	ldrb	r6, [r2]
   337e4:	cmp	r6, #0
   337e8:	bne	337fc <__assert_fail@plt+0x21208>
   337ec:	b	33948 <__assert_fail@plt+0x21354>
   337f0:	ldrb	r6, [r2, #1]!
   337f4:	cmp	r6, #0
   337f8:	beq	338e0 <__assert_fail@plt+0x212ec>
   337fc:	add	r3, r3, #1
   33800:	add	r1, r7, r3
   33804:	cmp	r8, r1
   33808:	bhi	337f0 <__assert_fail@plt+0x211fc>
   3380c:	mov	r0, r3
   33810:	mov	r6, #0
   33814:	ldr	r2, [sp, #60]	; 0x3c
   33818:	b	33464 <__assert_fail@plt+0x20e70>
   3381c:	mov	r3, #1
   33820:	mov	r4, #0
   33824:	mov	r9, r4
   33828:	str	r3, [sp, #32]
   3382c:	str	r3, [sp, #44]	; 0x2c
   33830:	str	r3, [sp, #48]	; 0x30
   33834:	str	r4, [sp, #52]	; 0x34
   33838:	str	r3, [sp, #56]	; 0x38
   3383c:	str	r3, [sp, #60]	; 0x3c
   33840:	str	r3, [sp, #88]	; 0x58
   33844:	movw	r3, #24156	; 0x5e5c
   33848:	movt	r3, #5
   3384c:	str	r4, [sp, #64]	; 0x40
   33850:	str	r4, [sp, #68]	; 0x44
   33854:	str	r3, [sp, #72]	; 0x48
   33858:	str	r4, [sp, #80]	; 0x50
   3385c:	str	r4, [sp, #84]	; 0x54
   33860:	b	320fc <__assert_fail@plt+0x1fb08>
   33864:	mov	fp, r9
   33868:	b	32a18 <__assert_fail@plt+0x20424>
   3386c:	ldr	r3, [sp, #48]	; 0x30
   33870:	b	3338c <__assert_fail@plt+0x20d98>
   33874:	mov	r2, r3
   33878:	ldr	r3, [sp, #72]	; 0x48
   3387c:	cmp	r3, #0
   33880:	moveq	r2, #0
   33884:	andne	r2, r2, #1
   33888:	cmp	r2, #0
   3388c:	beq	338bc <__assert_fail@plt+0x212c8>
   33890:	mov	r2, r3
   33894:	ldrb	r3, [r3]
   33898:	cmp	r3, #0
   3389c:	beq	338bc <__assert_fail@plt+0x212c8>
   338a0:	cmp	sl, r4
   338a4:	bls	338cc <__assert_fail@plt+0x212d8>
   338a8:	strb	r3, [fp, r4]
   338ac:	add	r4, r4, #1
   338b0:	ldrb	r3, [r2, #1]!
   338b4:	cmp	r3, #0
   338b8:	bne	338a0 <__assert_fail@plt+0x212ac>
   338bc:	cmp	sl, r4
   338c0:	movhi	r3, #0
   338c4:	strbhi	r3, [fp, r4]
   338c8:	b	32a54 <__assert_fail@plt+0x20460>
   338cc:	ldrb	r3, [r2, #1]!
   338d0:	add	r4, r4, #1
   338d4:	cmp	r3, #0
   338d8:	bne	338a0 <__assert_fail@plt+0x212ac>
   338dc:	b	338bc <__assert_fail@plt+0x212c8>
   338e0:	mov	r0, r3
   338e4:	ldr	r2, [sp, #60]	; 0x3c
   338e8:	b	33464 <__assert_fail@plt+0x20e70>
   338ec:	mov	ip, #5
   338f0:	mov	r3, r8
   338f4:	ldr	r1, [sp, #84]	; 0x54
   338f8:	str	ip, [sp]
   338fc:	ldr	r2, [sp, #180]	; 0xb4
   33900:	ldr	ip, [sp, #188]	; 0xbc
   33904:	ldr	r0, [sp, #184]	; 0xb8
   33908:	str	r2, [sp, #4]
   3390c:	ldr	r2, [sp, #28]
   33910:	str	ip, [sp, #12]
   33914:	ldr	ip, [sp, #192]	; 0xc0
   33918:	str	r0, [sp, #8]
   3391c:	mov	r0, fp
   33920:	str	ip, [sp, #16]
   33924:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   33928:	mov	r4, r0
   3392c:	b	32a54 <__assert_fail@plt+0x20460>
   33930:	mov	r6, r3
   33934:	str	r3, [sp, #40]	; 0x28
   33938:	b	329c4 <__assert_fail@plt+0x203d0>
   3393c:	mov	r3, #2
   33940:	str	r3, [sp, #176]	; 0xb0
   33944:	b	32a04 <__assert_fail@plt+0x20410>
   33948:	ldr	r2, [sp, #60]	; 0x3c
   3394c:	b	33464 <__assert_fail@plt+0x20e70>
   33950:	mov	r3, #5
   33954:	mov	fp, r9
   33958:	str	r3, [sp, #176]	; 0xb0
   3395c:	b	32a18 <__assert_fail@plt+0x20424>
   33960:	mov	r1, #1
   33964:	mov	r3, #0
   33968:	mov	r2, r3
   3396c:	mov	r9, r3
   33970:	str	r1, [sp, #32]
   33974:	str	sl, [sp, #84]	; 0x54
   33978:	b	327a0 <__assert_fail@plt+0x201ac>
   3397c:	mov	r3, #0
   33980:	mov	r2, #1
   33984:	mov	r9, r3
   33988:	mov	r4, r3
   3398c:	str	r2, [sp, #32]
   33990:	strd	r2, [sp, #44]	; 0x2c
   33994:	strd	r2, [sp, #56]	; 0x38
   33998:	str	r3, [sp, #80]	; 0x50
   3399c:	str	r3, [sp, #84]	; 0x54
   339a0:	str	r3, [sp, #88]	; 0x58
   339a4:	movw	r3, #5252	; 0x1484
   339a8:	movt	r3, #5
   339ac:	str	r2, [sp, #52]	; 0x34
   339b0:	str	r2, [sp, #64]	; 0x40
   339b4:	str	r2, [sp, #68]	; 0x44
   339b8:	str	r3, [sp, #72]	; 0x48
   339bc:	b	320fc <__assert_fail@plt+0x1fb08>
   339c0:	bl	125a0 <abort@plt>
   339c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   339c8:	mov	r4, r0
   339cc:	mov	r5, r3
   339d0:	strd	r6, [sp, #8]
   339d4:	movw	r7, #29940	; 0x74f4
   339d8:	movt	r7, #6
   339dc:	strd	r8, [sp, #16]
   339e0:	strd	sl, [sp, #24]
   339e4:	mov	sl, r1
   339e8:	mov	fp, r2
   339ec:	str	lr, [sp, #32]
   339f0:	sub	sp, sp, #60	; 0x3c
   339f4:	bl	12348 <__errno_location@plt>
   339f8:	mov	r8, r0
   339fc:	cmn	r4, #-2147483647	; 0x80000001
   33a00:	ldr	r6, [r7]
   33a04:	movne	r0, #0
   33a08:	moveq	r0, #1
   33a0c:	ldr	r3, [r8]
   33a10:	orrs	r0, r0, r4, lsr #31
   33a14:	str	r3, [sp, #28]
   33a18:	bne	33ba8 <__assert_fail@plt+0x215b4>
   33a1c:	ldr	r3, [r7, #4]
   33a20:	cmp	r3, r4
   33a24:	bgt	33a84 <__assert_fail@plt+0x21490>
   33a28:	add	r1, r7, #8
   33a2c:	sub	r2, r4, r3
   33a30:	str	r3, [sp, #52]	; 0x34
   33a34:	cmp	r6, r1
   33a38:	add	r2, r2, #1
   33a3c:	beq	33b80 <__assert_fail@plt+0x2158c>
   33a40:	mov	r1, #8
   33a44:	mov	r0, r6
   33a48:	mvn	r3, #-2147483648	; 0x80000000
   33a4c:	str	r1, [sp]
   33a50:	add	r1, sp, #52	; 0x34
   33a54:	bl	36b50 <__assert_fail@plt+0x2455c>
   33a58:	mov	r6, r0
   33a5c:	str	r0, [r7]
   33a60:	ldr	r0, [r7, #4]
   33a64:	mov	r1, #0
   33a68:	ldr	r2, [sp, #52]	; 0x34
   33a6c:	sub	r2, r2, r0
   33a70:	add	r0, r6, r0, lsl #3
   33a74:	lsl	r2, r2, #3
   33a78:	bl	12378 <memset@plt>
   33a7c:	ldr	r3, [sp, #52]	; 0x34
   33a80:	str	r3, [r7, #4]
   33a84:	ldr	r1, [r5, #4]
   33a88:	add	r0, r6, r4, lsl #3
   33a8c:	add	ip, r5, #8
   33a90:	mov	r3, fp
   33a94:	mov	r2, sl
   33a98:	ldr	r7, [r0, #4]
   33a9c:	str	r0, [sp, #36]	; 0x24
   33aa0:	str	ip, [sp, #40]	; 0x28
   33aa4:	orr	r0, r1, #1
   33aa8:	ldr	r9, [r6, r4, lsl #3]
   33aac:	str	ip, [sp, #8]
   33ab0:	ldr	lr, [r5, #44]	; 0x2c
   33ab4:	str	r0, [sp, #4]
   33ab8:	ldr	ip, [r5]
   33abc:	mov	r1, r9
   33ac0:	str	ip, [sp, #32]
   33ac4:	ldr	ip, [r5, #40]	; 0x28
   33ac8:	str	ip, [sp, #12]
   33acc:	ldr	ip, [sp, #32]
   33ad0:	str	lr, [sp, #16]
   33ad4:	str	r0, [sp, #44]	; 0x2c
   33ad8:	mov	r0, r7
   33adc:	str	ip, [sp]
   33ae0:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   33ae4:	cmp	r9, r0
   33ae8:	bhi	33b58 <__assert_fail@plt+0x21564>
   33aec:	add	r9, r0, #1
   33af0:	movw	r3, #32008	; 0x7d08
   33af4:	movt	r3, #6
   33af8:	cmp	r7, r3
   33afc:	str	r9, [r6, r4, lsl #3]
   33b00:	beq	33b0c <__assert_fail@plt+0x21518>
   33b04:	mov	r0, r7
   33b08:	bl	38b10 <__assert_fail@plt+0x2651c>
   33b0c:	mov	r0, r9
   33b10:	bl	368ac <__assert_fail@plt+0x242b8>
   33b14:	ldr	ip, [r5]
   33b18:	mov	r3, fp
   33b1c:	mov	r2, sl
   33b20:	mov	r1, r9
   33b24:	mov	r7, r0
   33b28:	ldr	lr, [sp, #36]	; 0x24
   33b2c:	ldr	r4, [r5, #40]	; 0x28
   33b30:	str	r0, [lr, #4]
   33b34:	ldr	lr, [r5, #44]	; 0x2c
   33b38:	str	ip, [sp]
   33b3c:	ldr	ip, [sp, #44]	; 0x2c
   33b40:	str	ip, [sp, #4]
   33b44:	ldr	ip, [sp, #40]	; 0x28
   33b48:	str	r4, [sp, #12]
   33b4c:	str	lr, [sp, #16]
   33b50:	str	ip, [sp, #8]
   33b54:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   33b58:	ldr	r3, [sp, #28]
   33b5c:	mov	r0, r7
   33b60:	str	r3, [r8]
   33b64:	add	sp, sp, #60	; 0x3c
   33b68:	ldrd	r4, [sp]
   33b6c:	ldrd	r6, [sp, #8]
   33b70:	ldrd	r8, [sp, #16]
   33b74:	ldrd	sl, [sp, #24]
   33b78:	add	sp, sp, #32
   33b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   33b80:	mov	r1, #8
   33b84:	mvn	r3, #-2147483648	; 0x80000000
   33b88:	str	r1, [sp]
   33b8c:	add	r1, sp, #52	; 0x34
   33b90:	bl	36b50 <__assert_fail@plt+0x2455c>
   33b94:	ldrd	r2, [r7, #8]
   33b98:	mov	r6, r0
   33b9c:	str	r0, [r7]
   33ba0:	strd	r2, [r0]
   33ba4:	b	33a60 <__assert_fail@plt+0x2146c>
   33ba8:	bl	125a0 <abort@plt>
   33bac:	strd	r4, [sp, #-16]!
   33bb0:	mov	r5, r0
   33bb4:	str	r6, [sp, #8]
   33bb8:	str	lr, [sp, #12]
   33bbc:	bl	12348 <__errno_location@plt>
   33bc0:	mov	r4, r0
   33bc4:	cmp	r5, #0
   33bc8:	ldr	r0, [pc, #32]	; 33bf0 <__assert_fail@plt+0x215fc>
   33bcc:	mov	r1, #48	; 0x30
   33bd0:	movne	r0, r5
   33bd4:	ldr	r6, [r4]
   33bd8:	bl	36cf0 <__assert_fail@plt+0x246fc>
   33bdc:	str	r6, [r4]
   33be0:	ldrd	r4, [sp]
   33be4:	ldr	r6, [sp, #8]
   33be8:	add	sp, sp, #12
   33bec:	pop	{pc}		; (ldr pc, [sp], #4)
   33bf0:	andeq	r7, r6, r8, lsl #28
   33bf4:	ldr	r3, [pc, #12]	; 33c08 <__assert_fail@plt+0x21614>
   33bf8:	cmp	r0, #0
   33bfc:	moveq	r0, r3
   33c00:	ldr	r0, [r0]
   33c04:	bx	lr
   33c08:	andeq	r7, r6, r8, lsl #28
   33c0c:	ldr	r3, [pc, #12]	; 33c20 <__assert_fail@plt+0x2162c>
   33c10:	cmp	r0, #0
   33c14:	moveq	r0, r3
   33c18:	str	r1, [r0]
   33c1c:	bx	lr
   33c20:	andeq	r7, r6, r8, lsl #28
   33c24:	ldr	r3, [pc, #52]	; 33c60 <__assert_fail@plt+0x2166c>
   33c28:	cmp	r0, #0
   33c2c:	push	{lr}		; (str lr, [sp, #-4]!)
   33c30:	lsr	lr, r1, #5
   33c34:	and	r1, r1, #31
   33c38:	moveq	r0, r3
   33c3c:	add	r3, r0, #8
   33c40:	ldr	ip, [r3, lr, lsl #2]
   33c44:	lsr	r0, ip, r1
   33c48:	eor	r2, r2, r0
   33c4c:	and	r0, r0, #1
   33c50:	and	r2, r2, #1
   33c54:	eor	r1, ip, r2, lsl r1
   33c58:	str	r1, [r3, lr, lsl #2]
   33c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   33c60:	andeq	r7, r6, r8, lsl #28
   33c64:	ldr	r3, [pc, #16]	; 33c7c <__assert_fail@plt+0x21688>
   33c68:	cmp	r0, #0
   33c6c:	movne	r3, r0
   33c70:	ldr	r0, [r3, #4]
   33c74:	str	r1, [r3, #4]
   33c78:	bx	lr
   33c7c:	andeq	r7, r6, r8, lsl #28
   33c80:	ldr	r3, [pc, #48]	; 33cb8 <__assert_fail@plt+0x216c4>
   33c84:	cmp	r0, #0
   33c88:	mov	ip, #10
   33c8c:	moveq	r0, r3
   33c90:	cmp	r2, #0
   33c94:	cmpne	r1, #0
   33c98:	str	ip, [r0]
   33c9c:	beq	33cac <__assert_fail@plt+0x216b8>
   33ca0:	str	r1, [r0, #40]	; 0x28
   33ca4:	str	r2, [r0, #44]	; 0x2c
   33ca8:	bx	lr
   33cac:	str	r4, [sp, #-8]!
   33cb0:	str	lr, [sp, #4]
   33cb4:	bl	125a0 <abort@plt>
   33cb8:	andeq	r7, r6, r8, lsl #28
   33cbc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   33cc0:	strd	r6, [sp, #8]
   33cc4:	mov	r7, r0
   33cc8:	mov	r6, r1
   33ccc:	strd	r8, [sp, #16]
   33cd0:	mov	r8, r2
   33cd4:	mov	r9, r3
   33cd8:	str	lr, [sp, #24]
   33cdc:	sub	sp, sp, #28
   33ce0:	ldr	r4, [sp, #56]	; 0x38
   33ce4:	ldr	ip, [pc, #104]	; 33d54 <__assert_fail@plt+0x21760>
   33ce8:	cmp	r4, #0
   33cec:	moveq	r4, ip
   33cf0:	bl	12348 <__errno_location@plt>
   33cf4:	ldr	ip, [r4, #44]	; 0x2c
   33cf8:	mov	r5, r0
   33cfc:	mov	r1, r6
   33d00:	add	lr, r4, #8
   33d04:	mov	r3, r9
   33d08:	ldr	r6, [r5]
   33d0c:	mov	r2, r8
   33d10:	mov	r0, r7
   33d14:	str	ip, [sp, #16]
   33d18:	ldr	ip, [r4, #40]	; 0x28
   33d1c:	str	lr, [sp, #8]
   33d20:	str	ip, [sp, #12]
   33d24:	ldr	ip, [r4, #4]
   33d28:	str	ip, [sp, #4]
   33d2c:	ldr	ip, [r4]
   33d30:	str	ip, [sp]
   33d34:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   33d38:	str	r6, [r5]
   33d3c:	add	sp, sp, #28
   33d40:	ldrd	r4, [sp]
   33d44:	ldrd	r6, [sp, #8]
   33d48:	ldrd	r8, [sp, #16]
   33d4c:	add	sp, sp, #24
   33d50:	pop	{pc}		; (ldr pc, [sp], #4)
   33d54:	andeq	r7, r6, r8, lsl #28
   33d58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   33d5c:	cmp	r2, #0
   33d60:	ldr	r4, [pc, #192]	; 33e28 <__assert_fail@plt+0x21834>
   33d64:	movne	r4, r2
   33d68:	strd	r6, [sp, #8]
   33d6c:	strd	r8, [sp, #16]
   33d70:	mov	r9, r1
   33d74:	mov	r8, r0
   33d78:	strd	sl, [sp, #24]
   33d7c:	str	lr, [sp, #32]
   33d80:	sub	sp, sp, #36	; 0x24
   33d84:	bl	12348 <__errno_location@plt>
   33d88:	ldr	r5, [r4, #4]
   33d8c:	mov	r6, r0
   33d90:	add	r7, r4, #8
   33d94:	mov	r1, #0
   33d98:	mov	r3, r9
   33d9c:	ldr	ip, [r4, #44]	; 0x2c
   33da0:	mov	r2, r8
   33da4:	mov	r0, r1
   33da8:	ldr	sl, [r6]
   33dac:	orr	r5, r5, #1
   33db0:	str	ip, [sp, #16]
   33db4:	ldr	ip, [r4, #40]	; 0x28
   33db8:	stmib	sp, {r5, r7, ip}
   33dbc:	ldr	ip, [r4]
   33dc0:	str	ip, [sp]
   33dc4:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   33dc8:	add	r1, r0, #1
   33dcc:	mov	r0, r1
   33dd0:	str	r1, [sp, #28]
   33dd4:	bl	368ac <__assert_fail@plt+0x242b8>
   33dd8:	ldr	ip, [r4, #44]	; 0x2c
   33ddc:	mov	fp, r0
   33de0:	mov	r3, r9
   33de4:	mov	r2, r8
   33de8:	ldr	r1, [sp, #28]
   33dec:	str	ip, [sp, #16]
   33df0:	ldr	ip, [r4, #40]	; 0x28
   33df4:	stmib	sp, {r5, r7, ip}
   33df8:	ldr	ip, [r4]
   33dfc:	str	ip, [sp]
   33e00:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   33e04:	mov	r0, fp
   33e08:	str	sl, [r6]
   33e0c:	add	sp, sp, #36	; 0x24
   33e10:	ldrd	r4, [sp]
   33e14:	ldrd	r6, [sp, #8]
   33e18:	ldrd	r8, [sp, #16]
   33e1c:	ldrd	sl, [sp, #24]
   33e20:	add	sp, sp, #32
   33e24:	pop	{pc}		; (ldr pc, [sp], #4)
   33e28:	andeq	r7, r6, r8, lsl #28
   33e2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   33e30:	cmp	r3, #0
   33e34:	ldr	r4, [pc, #220]	; 33f18 <__assert_fail@plt+0x21924>
   33e38:	movne	r4, r3
   33e3c:	strd	r6, [sp, #8]
   33e40:	mov	r6, r2
   33e44:	strd	r8, [sp, #16]
   33e48:	mov	r9, r0
   33e4c:	strd	sl, [sp, #24]
   33e50:	mov	sl, r1
   33e54:	str	lr, [sp, #32]
   33e58:	sub	sp, sp, #44	; 0x2c
   33e5c:	bl	12348 <__errno_location@plt>
   33e60:	ldr	r5, [r4, #4]
   33e64:	mov	r7, r0
   33e68:	mov	r1, #0
   33e6c:	add	r8, r4, #8
   33e70:	mov	r3, sl
   33e74:	ldr	ip, [r4, #44]	; 0x2c
   33e78:	mov	r2, r9
   33e7c:	mov	r0, r1
   33e80:	ldr	lr, [r7]
   33e84:	cmp	r6, r1
   33e88:	orreq	r5, r5, #1
   33e8c:	str	ip, [sp, #16]
   33e90:	ldr	ip, [r4, #40]	; 0x28
   33e94:	stmib	sp, {r5, r8, ip}
   33e98:	ldr	ip, [r4]
   33e9c:	str	lr, [sp, #28]
   33ea0:	str	ip, [sp]
   33ea4:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   33ea8:	add	r1, r0, #1
   33eac:	mov	fp, r0
   33eb0:	mov	r0, r1
   33eb4:	str	r1, [sp, #36]	; 0x24
   33eb8:	bl	368ac <__assert_fail@plt+0x242b8>
   33ebc:	ldr	ip, [r4, #44]	; 0x2c
   33ec0:	mov	r3, sl
   33ec4:	mov	r2, r9
   33ec8:	ldr	r1, [sp, #36]	; 0x24
   33ecc:	str	ip, [sp, #16]
   33ed0:	ldr	ip, [r4, #40]	; 0x28
   33ed4:	str	r0, [sp, #32]
   33ed8:	stmib	sp, {r5, r8, ip}
   33edc:	ldr	ip, [r4]
   33ee0:	str	ip, [sp]
   33ee4:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   33ee8:	ldr	lr, [sp, #28]
   33eec:	cmp	r6, #0
   33ef0:	ldr	r0, [sp, #32]
   33ef4:	str	lr, [r7]
   33ef8:	strne	fp, [r6]
   33efc:	add	sp, sp, #44	; 0x2c
   33f00:	ldrd	r4, [sp]
   33f04:	ldrd	r6, [sp, #8]
   33f08:	ldrd	r8, [sp, #16]
   33f0c:	ldrd	sl, [sp, #24]
   33f10:	add	sp, sp, #32
   33f14:	pop	{pc}		; (ldr pc, [sp], #4)
   33f18:	andeq	r7, r6, r8, lsl #28
   33f1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33f20:	movw	r5, #29940	; 0x74f4
   33f24:	movt	r5, #6
   33f28:	ldr	r3, [r5, #4]
   33f2c:	strd	r6, [sp, #8]
   33f30:	str	r8, [sp, #16]
   33f34:	str	lr, [sp, #20]
   33f38:	ldr	r7, [r5]
   33f3c:	cmp	r3, #1
   33f40:	ble	33f64 <__assert_fail@plt+0x21970>
   33f44:	mov	r4, #1
   33f48:	add	r6, r7, #4
   33f4c:	ldr	r0, [r6, r4, lsl #3]
   33f50:	add	r4, r4, #1
   33f54:	bl	38b10 <__assert_fail@plt+0x2651c>
   33f58:	ldr	r3, [r5, #4]
   33f5c:	cmp	r3, r4
   33f60:	bgt	33f4c <__assert_fail@plt+0x21958>
   33f64:	ldr	r0, [r7, #4]
   33f68:	movw	r4, #32008	; 0x7d08
   33f6c:	movt	r4, #6
   33f70:	cmp	r0, r4
   33f74:	beq	33f88 <__assert_fail@plt+0x21994>
   33f78:	bl	38b10 <__assert_fail@plt+0x2651c>
   33f7c:	mov	r3, #256	; 0x100
   33f80:	str	r3, [r5, #8]
   33f84:	str	r4, [r5, #12]
   33f88:	ldr	r4, [pc, #44]	; 33fbc <__assert_fail@plt+0x219c8>
   33f8c:	cmp	r7, r4
   33f90:	beq	33fa0 <__assert_fail@plt+0x219ac>
   33f94:	mov	r0, r7
   33f98:	bl	38b10 <__assert_fail@plt+0x2651c>
   33f9c:	str	r4, [r5]
   33fa0:	mov	r3, #1
   33fa4:	ldrd	r6, [sp, #8]
   33fa8:	str	r3, [r5, #4]
   33fac:	ldrd	r4, [sp]
   33fb0:	ldr	r8, [sp, #16]
   33fb4:	add	sp, sp, #20
   33fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   33fbc:	strdeq	r7, [r6], -ip
   33fc0:	ldr	r3, [pc, #4]	; 33fcc <__assert_fail@plt+0x219d8>
   33fc4:	mvn	r2, #0
   33fc8:	b	339c4 <__assert_fail@plt+0x213d0>
   33fcc:	andeq	r7, r6, r8, lsl #28
   33fd0:	ldr	r3, [pc]	; 33fd8 <__assert_fail@plt+0x219e4>
   33fd4:	b	339c4 <__assert_fail@plt+0x213d0>
   33fd8:	andeq	r7, r6, r8, lsl #28
   33fdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   33fe0:	movw	r4, #29940	; 0x74f4
   33fe4:	movt	r4, #6
   33fe8:	strd	r6, [sp, #8]
   33fec:	strd	r8, [sp, #16]
   33ff0:	strd	sl, [sp, #24]
   33ff4:	mov	sl, r0
   33ff8:	str	lr, [sp, #32]
   33ffc:	sub	sp, sp, #44	; 0x2c
   34000:	bl	12348 <__errno_location@plt>
   34004:	ldr	r3, [r0]
   34008:	mov	r8, r0
   3400c:	ldr	r2, [r4, #4]
   34010:	ldr	r5, [r4]
   34014:	str	r3, [sp, #28]
   34018:	cmp	r2, #0
   3401c:	bgt	34078 <__assert_fail@plt+0x21a84>
   34020:	add	r3, r4, #8
   34024:	str	r2, [sp, #36]	; 0x24
   34028:	rsb	r2, r2, #1
   3402c:	cmp	r5, r3
   34030:	beq	34144 <__assert_fail@plt+0x21b50>
   34034:	mov	r1, #8
   34038:	mov	r0, r5
   3403c:	mvn	r3, #-2147483648	; 0x80000000
   34040:	str	r1, [sp]
   34044:	add	r1, sp, #36	; 0x24
   34048:	bl	36b50 <__assert_fail@plt+0x2455c>
   3404c:	mov	r5, r0
   34050:	str	r0, [r4]
   34054:	ldr	r0, [r4, #4]
   34058:	mov	r1, #0
   3405c:	ldr	r2, [sp, #36]	; 0x24
   34060:	sub	r2, r2, r0
   34064:	add	r0, r5, r0, lsl #3
   34068:	lsl	r2, r2, #3
   3406c:	bl	12378 <memset@plt>
   34070:	ldr	r3, [sp, #36]	; 0x24
   34074:	str	r3, [r4, #4]
   34078:	movw	r4, #32008	; 0x7d08
   3407c:	movt	r4, #6
   34080:	ldr	r9, [r5]
   34084:	add	fp, r4, #264	; 0x108
   34088:	mvn	r3, #0
   3408c:	ldr	r7, [r4, #260]	; 0x104
   34090:	mov	r2, sl
   34094:	ldr	r6, [r5, #4]
   34098:	str	fp, [sp, #8]
   3409c:	mov	r1, r9
   340a0:	ldr	ip, [r4, #256]	; 0x100
   340a4:	orr	r7, r7, #1
   340a8:	ldr	lr, [r4, #300]	; 0x12c
   340ac:	mov	r0, r6
   340b0:	str	ip, [sp]
   340b4:	str	r7, [sp, #4]
   340b8:	str	lr, [sp, #16]
   340bc:	ldr	ip, [r4, #296]	; 0x128
   340c0:	str	ip, [sp, #12]
   340c4:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   340c8:	cmp	r9, r0
   340cc:	bhi	3411c <__assert_fail@plt+0x21b28>
   340d0:	add	r9, r0, #1
   340d4:	cmp	r6, r4
   340d8:	str	r9, [r5]
   340dc:	beq	340e8 <__assert_fail@plt+0x21af4>
   340e0:	mov	r0, r6
   340e4:	bl	38b10 <__assert_fail@plt+0x2651c>
   340e8:	mov	r0, r9
   340ec:	bl	368ac <__assert_fail@plt+0x242b8>
   340f0:	ldr	r3, [r4, #256]	; 0x100
   340f4:	mov	r2, sl
   340f8:	mov	r1, r9
   340fc:	mov	r6, r0
   34100:	ldr	lr, [r4, #296]	; 0x128
   34104:	ldr	ip, [r4, #300]	; 0x12c
   34108:	str	r0, [r5, #4]
   3410c:	stm	sp, {r3, r7, fp, lr}
   34110:	mvn	r3, #0
   34114:	str	ip, [sp, #16]
   34118:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   3411c:	ldr	r3, [sp, #28]
   34120:	mov	r0, r6
   34124:	str	r3, [r8]
   34128:	add	sp, sp, #44	; 0x2c
   3412c:	ldrd	r4, [sp]
   34130:	ldrd	r6, [sp, #8]
   34134:	ldrd	r8, [sp, #16]
   34138:	ldrd	sl, [sp, #24]
   3413c:	add	sp, sp, #32
   34140:	pop	{pc}		; (ldr pc, [sp], #4)
   34144:	mov	r0, #8
   34148:	mvn	r3, #-2147483648	; 0x80000000
   3414c:	add	r1, sp, #36	; 0x24
   34150:	str	r0, [sp]
   34154:	mov	r0, #0
   34158:	bl	36b50 <__assert_fail@plt+0x2455c>
   3415c:	ldrd	r2, [r4, #8]
   34160:	mov	r5, r0
   34164:	str	r0, [r4]
   34168:	strd	r2, [r0]
   3416c:	b	34054 <__assert_fail@plt+0x21a60>
   34170:	strd	r4, [sp, #-36]!	; 0xffffffdc
   34174:	movw	r4, #29940	; 0x74f4
   34178:	movt	r4, #6
   3417c:	strd	r6, [sp, #8]
   34180:	strd	r8, [sp, #16]
   34184:	strd	sl, [sp, #24]
   34188:	mov	sl, r0
   3418c:	mov	fp, r1
   34190:	str	lr, [sp, #32]
   34194:	sub	sp, sp, #44	; 0x2c
   34198:	bl	12348 <__errno_location@plt>
   3419c:	ldr	r3, [r0]
   341a0:	mov	r8, r0
   341a4:	ldr	r2, [r4, #4]
   341a8:	ldr	r5, [r4]
   341ac:	str	r3, [sp, #28]
   341b0:	cmp	r2, #0
   341b4:	bgt	34210 <__assert_fail@plt+0x21c1c>
   341b8:	add	r3, r4, #8
   341bc:	str	r2, [sp, #36]	; 0x24
   341c0:	rsb	r2, r2, #1
   341c4:	cmp	r5, r3
   341c8:	beq	342ec <__assert_fail@plt+0x21cf8>
   341cc:	mov	r1, #8
   341d0:	mov	r0, r5
   341d4:	mvn	r3, #-2147483648	; 0x80000000
   341d8:	str	r1, [sp]
   341dc:	add	r1, sp, #36	; 0x24
   341e0:	bl	36b50 <__assert_fail@plt+0x2455c>
   341e4:	mov	r5, r0
   341e8:	str	r0, [r4]
   341ec:	ldr	r0, [r4, #4]
   341f0:	mov	r1, #0
   341f4:	ldr	r2, [sp, #36]	; 0x24
   341f8:	sub	r2, r2, r0
   341fc:	add	r0, r5, r0, lsl #3
   34200:	lsl	r2, r2, #3
   34204:	bl	12378 <memset@plt>
   34208:	ldr	r3, [sp, #36]	; 0x24
   3420c:	str	r3, [r4, #4]
   34210:	movw	r4, #32008	; 0x7d08
   34214:	movt	r4, #6
   34218:	ldr	r9, [r5]
   3421c:	add	r0, r4, #264	; 0x108
   34220:	mov	r3, fp
   34224:	ldr	r7, [r4, #260]	; 0x104
   34228:	mov	r2, sl
   3422c:	ldr	r6, [r5, #4]
   34230:	str	r0, [sp, #8]
   34234:	mov	r1, r9
   34238:	ldr	ip, [r4, #256]	; 0x100
   3423c:	orr	r7, r7, #1
   34240:	ldr	lr, [r4, #300]	; 0x12c
   34244:	mov	r0, r6
   34248:	str	ip, [sp]
   3424c:	str	r7, [sp, #4]
   34250:	str	lr, [sp, #16]
   34254:	ldr	ip, [r4, #296]	; 0x128
   34258:	str	ip, [sp, #12]
   3425c:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34260:	cmp	r9, r0
   34264:	bhi	342c4 <__assert_fail@plt+0x21cd0>
   34268:	add	r9, r0, #1
   3426c:	cmp	r6, r4
   34270:	str	r9, [r5]
   34274:	beq	34280 <__assert_fail@plt+0x21c8c>
   34278:	mov	r0, r6
   3427c:	bl	38b10 <__assert_fail@plt+0x2651c>
   34280:	mov	r0, r9
   34284:	bl	368ac <__assert_fail@plt+0x242b8>
   34288:	ldr	ip, [r4, #256]	; 0x100
   3428c:	mov	r1, r9
   34290:	mov	r3, fp
   34294:	mov	r2, sl
   34298:	mov	r6, r0
   3429c:	ldr	r9, [r4, #296]	; 0x128
   342a0:	ldr	lr, [r4, #300]	; 0x12c
   342a4:	str	r0, [r5, #4]
   342a8:	str	ip, [sp]
   342ac:	ldr	ip, [pc, #100]	; 34318 <__assert_fail@plt+0x21d24>
   342b0:	str	r7, [sp, #4]
   342b4:	str	ip, [sp, #8]
   342b8:	str	r9, [sp, #12]
   342bc:	str	lr, [sp, #16]
   342c0:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   342c4:	ldr	r3, [sp, #28]
   342c8:	mov	r0, r6
   342cc:	str	r3, [r8]
   342d0:	add	sp, sp, #44	; 0x2c
   342d4:	ldrd	r4, [sp]
   342d8:	ldrd	r6, [sp, #8]
   342dc:	ldrd	r8, [sp, #16]
   342e0:	ldrd	sl, [sp, #24]
   342e4:	add	sp, sp, #32
   342e8:	pop	{pc}		; (ldr pc, [sp], #4)
   342ec:	mov	r0, #8
   342f0:	mvn	r3, #-2147483648	; 0x80000000
   342f4:	add	r1, sp, #36	; 0x24
   342f8:	str	r0, [sp]
   342fc:	mov	r0, #0
   34300:	bl	36b50 <__assert_fail@plt+0x2455c>
   34304:	ldrd	r2, [r4, #8]
   34308:	mov	r5, r0
   3430c:	str	r0, [r4]
   34310:	strd	r2, [r0]
   34314:	b	341ec <__assert_fail@plt+0x21bf8>
   34318:	andeq	r7, r6, r0, lsl lr
   3431c:	strd	r4, [sp, #-20]!	; 0xffffffec
   34320:	mov	r4, #0
   34324:	mov	r5, #0
   34328:	strd	r6, [sp, #8]
   3432c:	cmp	r1, #10
   34330:	str	lr, [sp, #16]
   34334:	sub	sp, sp, #100	; 0x64
   34338:	strd	r4, [sp, #48]	; 0x30
   3433c:	beq	34384 <__assert_fail@plt+0x21d90>
   34340:	mov	r3, sp
   34344:	strd	r4, [sp, #8]
   34348:	str	r1, [sp, #48]	; 0x30
   3434c:	mov	r1, r2
   34350:	mvn	r2, #0
   34354:	ldrd	r6, [sp, #48]	; 0x30
   34358:	strd	r6, [sp]
   3435c:	strd	r4, [sp, #16]
   34360:	strd	r4, [sp, #24]
   34364:	strd	r4, [sp, #32]
   34368:	strd	r4, [sp, #40]	; 0x28
   3436c:	bl	339c4 <__assert_fail@plt+0x213d0>
   34370:	add	sp, sp, #100	; 0x64
   34374:	ldrd	r4, [sp]
   34378:	ldrd	r6, [sp, #8]
   3437c:	add	sp, sp, #16
   34380:	pop	{pc}		; (ldr pc, [sp], #4)
   34384:	bl	125a0 <abort@plt>
   34388:	strd	r4, [sp, #-20]!	; 0xffffffec
   3438c:	mov	r4, #0
   34390:	mov	r5, #0
   34394:	strd	r6, [sp, #8]
   34398:	cmp	r1, #10
   3439c:	str	lr, [sp, #16]
   343a0:	sub	sp, sp, #100	; 0x64
   343a4:	strd	r4, [sp, #48]	; 0x30
   343a8:	beq	343f4 <__assert_fail@plt+0x21e00>
   343ac:	mov	ip, r2
   343b0:	mov	r2, r3
   343b4:	strd	r4, [sp, #8]
   343b8:	str	r1, [sp, #48]	; 0x30
   343bc:	mov	r3, sp
   343c0:	mov	r1, ip
   343c4:	ldrd	r6, [sp, #48]	; 0x30
   343c8:	strd	r6, [sp]
   343cc:	strd	r4, [sp, #16]
   343d0:	strd	r4, [sp, #24]
   343d4:	strd	r4, [sp, #32]
   343d8:	strd	r4, [sp, #40]	; 0x28
   343dc:	bl	339c4 <__assert_fail@plt+0x213d0>
   343e0:	add	sp, sp, #100	; 0x64
   343e4:	ldrd	r4, [sp]
   343e8:	ldrd	r6, [sp, #8]
   343ec:	add	sp, sp, #16
   343f0:	pop	{pc}		; (ldr pc, [sp], #4)
   343f4:	bl	125a0 <abort@plt>
   343f8:	mov	r2, #0
   343fc:	mov	r3, #0
   34400:	strd	r4, [sp, #-36]!	; 0xffffffdc
   34404:	strd	r6, [sp, #8]
   34408:	cmp	r0, #10
   3440c:	strd	r8, [sp, #16]
   34410:	strd	sl, [sp, #24]
   34414:	str	lr, [sp, #32]
   34418:	sub	sp, sp, #124	; 0x7c
   3441c:	strd	r2, [sp, #72]	; 0x48
   34420:	strd	r2, [sp, #80]	; 0x50
   34424:	strd	r2, [sp, #88]	; 0x58
   34428:	strd	r2, [sp, #96]	; 0x60
   3442c:	strd	r2, [sp, #104]	; 0x68
   34430:	strd	r2, [sp, #112]	; 0x70
   34434:	beq	345d8 <__assert_fail@plt+0x21fe4>
   34438:	mov	r6, r1
   3443c:	movw	r4, #29940	; 0x74f4
   34440:	movt	r4, #6
   34444:	str	r0, [sp, #72]	; 0x48
   34448:	ldrd	r0, [sp, #72]	; 0x48
   3444c:	strd	r0, [sp, #24]
   34450:	strd	r2, [sp, #32]
   34454:	strd	r2, [sp, #40]	; 0x28
   34458:	strd	r2, [sp, #48]	; 0x30
   3445c:	strd	r2, [sp, #56]	; 0x38
   34460:	strd	r2, [sp, #64]	; 0x40
   34464:	bl	12348 <__errno_location@plt>
   34468:	mov	r8, r0
   3446c:	ldr	r5, [r4]
   34470:	ldr	r2, [r4, #4]
   34474:	ldr	r9, [r0]
   34478:	cmp	r2, #0
   3447c:	bgt	344d8 <__assert_fail@plt+0x21ee4>
   34480:	add	r3, r4, #8
   34484:	str	r2, [sp, #72]	; 0x48
   34488:	rsb	r2, r2, #1
   3448c:	cmp	r5, r3
   34490:	beq	345ac <__assert_fail@plt+0x21fb8>
   34494:	mov	r3, #8
   34498:	mov	r0, r5
   3449c:	add	r1, sp, #72	; 0x48
   344a0:	str	r3, [sp]
   344a4:	mvn	r3, #-2147483648	; 0x80000000
   344a8:	bl	36b50 <__assert_fail@plt+0x2455c>
   344ac:	mov	r5, r0
   344b0:	str	r0, [r4]
   344b4:	ldr	r0, [r4, #4]
   344b8:	mov	r1, #0
   344bc:	ldr	r2, [sp, #72]	; 0x48
   344c0:	sub	r2, r2, r0
   344c4:	add	r0, r5, r0, lsl #3
   344c8:	lsl	r2, r2, #3
   344cc:	bl	12378 <memset@plt>
   344d0:	ldr	r3, [sp, #72]	; 0x48
   344d4:	str	r3, [r4, #4]
   344d8:	ldr	sl, [r5]
   344dc:	add	r0, sp, #32
   344e0:	mvn	r3, #0
   344e4:	mov	r2, r6
   344e8:	ldr	r7, [sp, #28]
   344ec:	ldr	r4, [r5, #4]
   344f0:	mov	r1, sl
   344f4:	str	r0, [sp, #8]
   344f8:	ldr	lr, [sp, #24]
   344fc:	orr	r7, r7, #1
   34500:	ldr	ip, [sp, #64]	; 0x40
   34504:	mov	r0, r4
   34508:	ldr	fp, [sp, #68]	; 0x44
   3450c:	str	lr, [sp]
   34510:	str	r7, [sp, #4]
   34514:	str	ip, [sp, #12]
   34518:	str	fp, [sp, #16]
   3451c:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34520:	cmp	sl, r0
   34524:	bhi	34588 <__assert_fail@plt+0x21f94>
   34528:	add	sl, r0, #1
   3452c:	movw	r3, #32008	; 0x7d08
   34530:	movt	r3, #6
   34534:	cmp	r4, r3
   34538:	str	sl, [r5]
   3453c:	beq	34548 <__assert_fail@plt+0x21f54>
   34540:	mov	r0, r4
   34544:	bl	38b10 <__assert_fail@plt+0x2651c>
   34548:	mov	r0, sl
   3454c:	bl	368ac <__assert_fail@plt+0x242b8>
   34550:	ldr	r3, [sp, #24]
   34554:	mov	r2, r6
   34558:	mov	r1, sl
   3455c:	mov	r4, r0
   34560:	ldr	lr, [sp, #64]	; 0x40
   34564:	ldr	ip, [sp, #68]	; 0x44
   34568:	str	r0, [r5, #4]
   3456c:	add	r5, sp, #32
   34570:	stm	sp, {r3, r7}
   34574:	mvn	r3, #0
   34578:	str	r5, [sp, #8]
   3457c:	str	lr, [sp, #12]
   34580:	str	ip, [sp, #16]
   34584:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34588:	mov	r0, r4
   3458c:	str	r9, [r8]
   34590:	add	sp, sp, #124	; 0x7c
   34594:	ldrd	r4, [sp]
   34598:	ldrd	r6, [sp, #8]
   3459c:	ldrd	r8, [sp, #16]
   345a0:	ldrd	sl, [sp, #24]
   345a4:	add	sp, sp, #32
   345a8:	pop	{pc}		; (ldr pc, [sp], #4)
   345ac:	mov	r0, #8
   345b0:	mvn	r3, #-2147483648	; 0x80000000
   345b4:	add	r1, sp, #72	; 0x48
   345b8:	str	r0, [sp]
   345bc:	mov	r0, #0
   345c0:	bl	36b50 <__assert_fail@plt+0x2455c>
   345c4:	ldrd	r2, [r4, #8]
   345c8:	mov	r5, r0
   345cc:	str	r0, [r4]
   345d0:	strd	r2, [r0]
   345d4:	b	344b4 <__assert_fail@plt+0x21ec0>
   345d8:	bl	125a0 <abort@plt>
   345dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   345e0:	cmp	r0, #10
   345e4:	strd	r6, [sp, #8]
   345e8:	mov	r6, #0
   345ec:	mov	r7, #0
   345f0:	strd	r8, [sp, #16]
   345f4:	strd	sl, [sp, #24]
   345f8:	str	lr, [sp, #32]
   345fc:	sub	sp, sp, #124	; 0x7c
   34600:	strd	r6, [sp, #72]	; 0x48
   34604:	strd	r6, [sp, #80]	; 0x50
   34608:	strd	r6, [sp, #88]	; 0x58
   3460c:	strd	r6, [sp, #96]	; 0x60
   34610:	strd	r6, [sp, #104]	; 0x68
   34614:	strd	r6, [sp, #112]	; 0x70
   34618:	beq	347c4 <__assert_fail@plt+0x221d0>
   3461c:	mov	sl, r2
   34620:	movw	r5, #29940	; 0x74f4
   34624:	movt	r5, #6
   34628:	str	r0, [sp, #72]	; 0x48
   3462c:	mov	r9, r1
   34630:	ldrd	r2, [sp, #72]	; 0x48
   34634:	strd	r2, [sp, #24]
   34638:	strd	r6, [sp, #32]
   3463c:	strd	r6, [sp, #40]	; 0x28
   34640:	strd	r6, [sp, #48]	; 0x30
   34644:	strd	r6, [sp, #56]	; 0x38
   34648:	strd	r6, [sp, #64]	; 0x40
   3464c:	bl	12348 <__errno_location@plt>
   34650:	mov	r7, r0
   34654:	ldr	r4, [r5]
   34658:	ldr	r2, [r5, #4]
   3465c:	ldr	fp, [r0]
   34660:	cmp	r2, #0
   34664:	bgt	346c0 <__assert_fail@plt+0x220cc>
   34668:	add	r3, r5, #8
   3466c:	str	r2, [sp, #72]	; 0x48
   34670:	rsb	r2, r2, #1
   34674:	cmp	r4, r3
   34678:	beq	34798 <__assert_fail@plt+0x221a4>
   3467c:	mov	r3, #8
   34680:	mov	r0, r4
   34684:	add	r1, sp, #72	; 0x48
   34688:	str	r3, [sp]
   3468c:	mvn	r3, #-2147483648	; 0x80000000
   34690:	bl	36b50 <__assert_fail@plt+0x2455c>
   34694:	mov	r4, r0
   34698:	str	r0, [r5]
   3469c:	ldr	r0, [r5, #4]
   346a0:	mov	r1, #0
   346a4:	ldr	r2, [sp, #72]	; 0x48
   346a8:	sub	r2, r2, r0
   346ac:	add	r0, r4, r0, lsl #3
   346b0:	lsl	r2, r2, #3
   346b4:	bl	12378 <memset@plt>
   346b8:	ldr	r3, [sp, #72]	; 0x48
   346bc:	str	r3, [r5, #4]
   346c0:	ldr	ip, [sp, #24]
   346c4:	add	r0, sp, #32
   346c8:	mov	r3, sl
   346cc:	mov	r2, r9
   346d0:	ldr	r6, [sp, #28]
   346d4:	ldr	r8, [r4]
   346d8:	ldr	r5, [r4, #4]
   346dc:	str	ip, [sp]
   346e0:	orr	r6, r6, #1
   346e4:	ldr	ip, [sp, #64]	; 0x40
   346e8:	mov	r1, r8
   346ec:	str	r6, [sp, #4]
   346f0:	ldr	lr, [sp, #68]	; 0x44
   346f4:	str	r0, [sp, #8]
   346f8:	mov	r0, r5
   346fc:	str	ip, [sp, #12]
   34700:	str	lr, [sp, #16]
   34704:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34708:	cmp	r8, r0
   3470c:	bhi	34774 <__assert_fail@plt+0x22180>
   34710:	add	r8, r0, #1
   34714:	movw	r3, #32008	; 0x7d08
   34718:	movt	r3, #6
   3471c:	cmp	r5, r3
   34720:	str	r8, [r4]
   34724:	beq	34730 <__assert_fail@plt+0x2213c>
   34728:	mov	r0, r5
   3472c:	bl	38b10 <__assert_fail@plt+0x2651c>
   34730:	mov	r0, r8
   34734:	bl	368ac <__assert_fail@plt+0x242b8>
   34738:	ldr	lr, [sp, #24]
   3473c:	mov	r1, r8
   34740:	mov	r3, sl
   34744:	mov	r2, r9
   34748:	mov	r5, r0
   3474c:	ldr	r8, [sp, #64]	; 0x40
   34750:	ldr	ip, [sp, #68]	; 0x44
   34754:	str	r0, [r4, #4]
   34758:	str	lr, [sp]
   3475c:	add	lr, sp, #32
   34760:	str	r6, [sp, #4]
   34764:	str	lr, [sp, #8]
   34768:	str	r8, [sp, #12]
   3476c:	str	ip, [sp, #16]
   34770:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34774:	mov	r0, r5
   34778:	str	fp, [r7]
   3477c:	add	sp, sp, #124	; 0x7c
   34780:	ldrd	r4, [sp]
   34784:	ldrd	r6, [sp, #8]
   34788:	ldrd	r8, [sp, #16]
   3478c:	ldrd	sl, [sp, #24]
   34790:	add	sp, sp, #32
   34794:	pop	{pc}		; (ldr pc, [sp], #4)
   34798:	mov	r0, #8
   3479c:	mvn	r3, #-2147483648	; 0x80000000
   347a0:	add	r1, sp, #72	; 0x48
   347a4:	str	r0, [sp]
   347a8:	mov	r0, #0
   347ac:	bl	36b50 <__assert_fail@plt+0x2455c>
   347b0:	ldrd	r2, [r5, #8]
   347b4:	mov	r4, r0
   347b8:	str	r0, [r5]
   347bc:	strd	r2, [r0]
   347c0:	b	3469c <__assert_fail@plt+0x220a8>
   347c4:	bl	125a0 <abort@plt>
   347c8:	ldr	r3, [pc, #492]	; 349bc <__assert_fail@plt+0x223c8>
   347cc:	lsr	ip, r2, #5
   347d0:	and	r2, r2, #31
   347d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   347d8:	movw	r5, #29940	; 0x74f4
   347dc:	movt	r5, #6
   347e0:	strd	r6, [sp, #8]
   347e4:	strd	r8, [sp, #16]
   347e8:	strd	sl, [sp, #24]
   347ec:	mov	sl, r0
   347f0:	mov	fp, r1
   347f4:	ldrd	r0, [r3]
   347f8:	str	lr, [sp, #32]
   347fc:	sub	sp, sp, #92	; 0x5c
   34800:	ldrd	r8, [r3, #8]
   34804:	add	r6, sp, #48	; 0x30
   34808:	strd	r0, [sp, #40]	; 0x28
   3480c:	ldrd	r0, [r3, #16]
   34810:	strd	r8, [sp, #48]	; 0x30
   34814:	ldrd	r8, [r3, #24]
   34818:	strd	r0, [sp, #56]	; 0x38
   3481c:	ldrd	r0, [r3, #32]
   34820:	strd	r8, [sp, #64]	; 0x40
   34824:	ldrd	r8, [r3, #40]	; 0x28
   34828:	strd	r0, [sp, #72]	; 0x48
   3482c:	strd	r8, [sp, #80]	; 0x50
   34830:	ldr	r3, [r6, ip, lsl #2]
   34834:	mvn	r1, r3, lsr r2
   34838:	and	r1, r1, #1
   3483c:	eor	r2, r3, r1, lsl r2
   34840:	str	r2, [r6, ip, lsl #2]
   34844:	bl	12348 <__errno_location@plt>
   34848:	ldr	r3, [r0]
   3484c:	mov	r8, r0
   34850:	ldr	r2, [r5, #4]
   34854:	ldr	r4, [r5]
   34858:	str	r3, [sp, #28]
   3485c:	cmp	r2, #0
   34860:	bgt	348bc <__assert_fail@plt+0x222c8>
   34864:	add	r3, r5, #8
   34868:	str	r2, [sp, #36]	; 0x24
   3486c:	rsb	r2, r2, #1
   34870:	cmp	r4, r3
   34874:	beq	34990 <__assert_fail@plt+0x2239c>
   34878:	mov	r1, #8
   3487c:	mov	r0, r4
   34880:	mvn	r3, #-2147483648	; 0x80000000
   34884:	str	r1, [sp]
   34888:	add	r1, sp, #36	; 0x24
   3488c:	bl	36b50 <__assert_fail@plt+0x2455c>
   34890:	mov	r4, r0
   34894:	str	r0, [r5]
   34898:	ldr	r0, [r5, #4]
   3489c:	mov	r1, #0
   348a0:	ldr	r2, [sp, #36]	; 0x24
   348a4:	sub	r2, r2, r0
   348a8:	add	r0, r4, r0, lsl #3
   348ac:	lsl	r2, r2, #3
   348b0:	bl	12378 <memset@plt>
   348b4:	ldr	r3, [sp, #36]	; 0x24
   348b8:	str	r3, [r5, #4]
   348bc:	ldr	ip, [sp, #40]	; 0x28
   348c0:	mov	r3, fp
   348c4:	mov	r2, sl
   348c8:	ldr	r7, [sp, #44]	; 0x2c
   348cc:	ldr	r9, [r4]
   348d0:	ldr	r5, [r4, #4]
   348d4:	str	ip, [sp]
   348d8:	orr	r7, r7, #1
   348dc:	ldr	ip, [sp, #80]	; 0x50
   348e0:	mov	r1, r9
   348e4:	str	r7, [sp, #4]
   348e8:	ldr	lr, [sp, #84]	; 0x54
   348ec:	mov	r0, r5
   348f0:	str	r6, [sp, #8]
   348f4:	str	ip, [sp, #12]
   348f8:	str	lr, [sp, #16]
   348fc:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34900:	cmp	r9, r0
   34904:	bhi	34968 <__assert_fail@plt+0x22374>
   34908:	add	r9, r0, #1
   3490c:	movw	r3, #32008	; 0x7d08
   34910:	movt	r3, #6
   34914:	cmp	r5, r3
   34918:	str	r9, [r4]
   3491c:	beq	34928 <__assert_fail@plt+0x22334>
   34920:	mov	r0, r5
   34924:	bl	38b10 <__assert_fail@plt+0x2651c>
   34928:	mov	r0, r9
   3492c:	bl	368ac <__assert_fail@plt+0x242b8>
   34930:	mov	r1, r9
   34934:	ldr	ip, [sp, #40]	; 0x28
   34938:	mov	r3, fp
   3493c:	mov	r2, sl
   34940:	mov	r5, r0
   34944:	ldr	r9, [sp, #80]	; 0x50
   34948:	ldr	lr, [sp, #84]	; 0x54
   3494c:	str	r0, [r4, #4]
   34950:	str	ip, [sp]
   34954:	str	r7, [sp, #4]
   34958:	str	r6, [sp, #8]
   3495c:	str	r9, [sp, #12]
   34960:	str	lr, [sp, #16]
   34964:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34968:	ldr	r3, [sp, #28]
   3496c:	mov	r0, r5
   34970:	str	r3, [r8]
   34974:	add	sp, sp, #92	; 0x5c
   34978:	ldrd	r4, [sp]
   3497c:	ldrd	r6, [sp, #8]
   34980:	ldrd	r8, [sp, #16]
   34984:	ldrd	sl, [sp, #24]
   34988:	add	sp, sp, #32
   3498c:	pop	{pc}		; (ldr pc, [sp], #4)
   34990:	mov	r0, #8
   34994:	mvn	r3, #-2147483648	; 0x80000000
   34998:	add	r1, sp, #36	; 0x24
   3499c:	str	r0, [sp]
   349a0:	mov	r0, #0
   349a4:	bl	36b50 <__assert_fail@plt+0x2455c>
   349a8:	ldrd	r2, [r5, #8]
   349ac:	mov	r4, r0
   349b0:	str	r0, [r5]
   349b4:	strd	r2, [r0]
   349b8:	b	34898 <__assert_fail@plt+0x222a4>
   349bc:	andeq	r7, r6, r8, lsl #28
   349c0:	ldr	ip, [pc, #476]	; 34ba4 <__assert_fail@plt+0x225b0>
   349c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   349c8:	movw	r4, #29940	; 0x74f4
   349cc:	movt	r4, #6
   349d0:	ldrd	r2, [ip, #8]
   349d4:	strd	r6, [sp, #8]
   349d8:	lsr	r7, r1, #5
   349dc:	mov	r6, r0
   349e0:	strd	r8, [sp, #16]
   349e4:	str	lr, [sp, #32]
   349e8:	and	lr, r1, #31
   349ec:	ldrd	r0, [ip]
   349f0:	strd	sl, [sp, #24]
   349f4:	sub	sp, sp, #84	; 0x54
   349f8:	add	r5, sp, #40	; 0x28
   349fc:	strd	r0, [sp, #32]
   34a00:	strd	r2, [sp, #40]	; 0x28
   34a04:	ldrd	r0, [ip, #16]
   34a08:	ldrd	r2, [ip, #24]
   34a0c:	strd	r0, [sp, #48]	; 0x30
   34a10:	ldrd	r0, [ip, #32]
   34a14:	strd	r2, [sp, #56]	; 0x38
   34a18:	ldrd	r2, [ip, #40]	; 0x28
   34a1c:	strd	r0, [sp, #64]	; 0x40
   34a20:	strd	r2, [sp, #72]	; 0x48
   34a24:	ldr	r1, [r5, r7, lsl #2]
   34a28:	mvn	r3, r1, lsr lr
   34a2c:	and	r3, r3, #1
   34a30:	eor	r1, r1, r3, lsl lr
   34a34:	str	r1, [r5, r7, lsl #2]
   34a38:	bl	12348 <__errno_location@plt>
   34a3c:	mov	r9, r0
   34a40:	ldr	sl, [r0]
   34a44:	ldr	r2, [r4, #4]
   34a48:	ldr	r7, [r4]
   34a4c:	cmp	r2, #0
   34a50:	bgt	34aac <__assert_fail@plt+0x224b8>
   34a54:	add	r3, r4, #8
   34a58:	str	r2, [sp, #28]
   34a5c:	rsb	r2, r2, #1
   34a60:	cmp	r7, r3
   34a64:	beq	34b78 <__assert_fail@plt+0x22584>
   34a68:	mov	r1, #8
   34a6c:	mov	r0, r7
   34a70:	mvn	r3, #-2147483648	; 0x80000000
   34a74:	str	r1, [sp]
   34a78:	add	r1, sp, #28
   34a7c:	bl	36b50 <__assert_fail@plt+0x2455c>
   34a80:	mov	r7, r0
   34a84:	str	r0, [r4]
   34a88:	ldr	r0, [r4, #4]
   34a8c:	mov	r1, #0
   34a90:	ldr	r2, [sp, #28]
   34a94:	sub	r2, r2, r0
   34a98:	add	r0, r7, r0, lsl #3
   34a9c:	lsl	r2, r2, #3
   34aa0:	bl	12378 <memset@plt>
   34aa4:	ldr	r3, [sp, #28]
   34aa8:	str	r3, [r4, #4]
   34aac:	ldr	ip, [sp, #32]
   34ab0:	mvn	r3, #0
   34ab4:	mov	r2, r6
   34ab8:	ldr	r8, [sp, #36]	; 0x24
   34abc:	ldr	fp, [r7]
   34ac0:	ldr	r4, [r7, #4]
   34ac4:	str	ip, [sp]
   34ac8:	orr	r8, r8, #1
   34acc:	ldr	ip, [sp, #72]	; 0x48
   34ad0:	mov	r1, fp
   34ad4:	str	r8, [sp, #4]
   34ad8:	ldr	lr, [sp, #76]	; 0x4c
   34adc:	mov	r0, r4
   34ae0:	str	r5, [sp, #8]
   34ae4:	str	ip, [sp, #12]
   34ae8:	str	lr, [sp, #16]
   34aec:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34af0:	cmp	fp, r0
   34af4:	bhi	34b54 <__assert_fail@plt+0x22560>
   34af8:	add	fp, r0, #1
   34afc:	movw	r3, #32008	; 0x7d08
   34b00:	movt	r3, #6
   34b04:	cmp	r4, r3
   34b08:	str	fp, [r7]
   34b0c:	beq	34b18 <__assert_fail@plt+0x22524>
   34b10:	mov	r0, r4
   34b14:	bl	38b10 <__assert_fail@plt+0x2651c>
   34b18:	mov	r0, fp
   34b1c:	bl	368ac <__assert_fail@plt+0x242b8>
   34b20:	ldr	r3, [sp, #32]
   34b24:	mov	r2, r6
   34b28:	mov	r1, fp
   34b2c:	mov	r4, r0
   34b30:	ldr	lr, [sp, #72]	; 0x48
   34b34:	ldr	ip, [sp, #76]	; 0x4c
   34b38:	str	r0, [r7, #4]
   34b3c:	stm	sp, {r3, r8}
   34b40:	mvn	r3, #0
   34b44:	str	r5, [sp, #8]
   34b48:	str	lr, [sp, #12]
   34b4c:	str	ip, [sp, #16]
   34b50:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34b54:	mov	r0, r4
   34b58:	str	sl, [r9]
   34b5c:	add	sp, sp, #84	; 0x54
   34b60:	ldrd	r4, [sp]
   34b64:	ldrd	r6, [sp, #8]
   34b68:	ldrd	r8, [sp, #16]
   34b6c:	ldrd	sl, [sp, #24]
   34b70:	add	sp, sp, #32
   34b74:	pop	{pc}		; (ldr pc, [sp], #4)
   34b78:	mov	r0, #8
   34b7c:	mvn	r3, #-2147483648	; 0x80000000
   34b80:	add	r1, sp, #28
   34b84:	str	r0, [sp]
   34b88:	mov	r0, #0
   34b8c:	bl	36b50 <__assert_fail@plt+0x2455c>
   34b90:	ldrd	r2, [r4, #8]
   34b94:	mov	r7, r0
   34b98:	str	r0, [r4]
   34b9c:	strd	r2, [r0]
   34ba0:	b	34a88 <__assert_fail@plt+0x22494>
   34ba4:	andeq	r7, r6, r8, lsl #28
   34ba8:	ldr	ip, [pc, #472]	; 34d88 <__assert_fail@plt+0x22794>
   34bac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   34bb0:	mov	r5, r0
   34bb4:	movw	r4, #29940	; 0x74f4
   34bb8:	movt	r4, #6
   34bbc:	ldrd	r2, [ip]
   34bc0:	ldrd	r0, [ip, #8]
   34bc4:	strd	r6, [sp, #8]
   34bc8:	strd	r8, [sp, #16]
   34bcc:	strd	sl, [sp, #24]
   34bd0:	str	lr, [sp, #32]
   34bd4:	sub	sp, sp, #84	; 0x54
   34bd8:	strd	r2, [sp, #32]
   34bdc:	strd	r0, [sp, #40]	; 0x28
   34be0:	ldr	r6, [sp, #44]	; 0x2c
   34be4:	ldrd	r2, [ip, #16]
   34be8:	ldrd	r0, [ip, #24]
   34bec:	mvn	lr, r6
   34bf0:	and	lr, lr, #67108864	; 0x4000000
   34bf4:	eor	lr, lr, r6
   34bf8:	ldrd	r6, [ip, #40]	; 0x28
   34bfc:	strd	r2, [sp, #48]	; 0x30
   34c00:	ldrd	r2, [ip, #32]
   34c04:	str	lr, [sp, #44]	; 0x2c
   34c08:	strd	r0, [sp, #56]	; 0x38
   34c0c:	strd	r2, [sp, #64]	; 0x40
   34c10:	strd	r6, [sp, #72]	; 0x48
   34c14:	bl	12348 <__errno_location@plt>
   34c18:	mov	r8, r0
   34c1c:	ldr	r9, [r0]
   34c20:	ldr	r2, [r4, #4]
   34c24:	ldr	r6, [r4]
   34c28:	cmp	r2, #0
   34c2c:	bgt	34c88 <__assert_fail@plt+0x22694>
   34c30:	add	r3, r4, #8
   34c34:	str	r2, [sp, #28]
   34c38:	rsb	r2, r2, #1
   34c3c:	cmp	r6, r3
   34c40:	beq	34d5c <__assert_fail@plt+0x22768>
   34c44:	mov	r1, #8
   34c48:	mov	r0, r6
   34c4c:	mvn	r3, #-2147483648	; 0x80000000
   34c50:	str	r1, [sp]
   34c54:	add	r1, sp, #28
   34c58:	bl	36b50 <__assert_fail@plt+0x2455c>
   34c5c:	mov	r6, r0
   34c60:	str	r0, [r4]
   34c64:	ldr	r0, [r4, #4]
   34c68:	mov	r1, #0
   34c6c:	ldr	r2, [sp, #28]
   34c70:	sub	r2, r2, r0
   34c74:	add	r0, r6, r0, lsl #3
   34c78:	lsl	r2, r2, #3
   34c7c:	bl	12378 <memset@plt>
   34c80:	ldr	r3, [sp, #28]
   34c84:	str	r3, [r4, #4]
   34c88:	ldr	sl, [r6]
   34c8c:	add	r0, sp, #40	; 0x28
   34c90:	mvn	r3, #0
   34c94:	mov	r2, r5
   34c98:	ldr	r7, [sp, #36]	; 0x24
   34c9c:	ldr	r4, [r6, #4]
   34ca0:	mov	r1, sl
   34ca4:	str	r0, [sp, #8]
   34ca8:	ldr	lr, [sp, #32]
   34cac:	orr	r7, r7, #1
   34cb0:	ldr	ip, [sp, #72]	; 0x48
   34cb4:	mov	r0, r4
   34cb8:	ldr	fp, [sp, #76]	; 0x4c
   34cbc:	str	lr, [sp]
   34cc0:	str	r7, [sp, #4]
   34cc4:	str	ip, [sp, #12]
   34cc8:	str	fp, [sp, #16]
   34ccc:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34cd0:	cmp	sl, r0
   34cd4:	bhi	34d38 <__assert_fail@plt+0x22744>
   34cd8:	add	sl, r0, #1
   34cdc:	movw	r3, #32008	; 0x7d08
   34ce0:	movt	r3, #6
   34ce4:	cmp	r4, r3
   34ce8:	str	sl, [r6]
   34cec:	beq	34cf8 <__assert_fail@plt+0x22704>
   34cf0:	mov	r0, r4
   34cf4:	bl	38b10 <__assert_fail@plt+0x2651c>
   34cf8:	mov	r0, sl
   34cfc:	bl	368ac <__assert_fail@plt+0x242b8>
   34d00:	ldr	r3, [sp, #32]
   34d04:	mov	r2, r5
   34d08:	add	r5, sp, #40	; 0x28
   34d0c:	mov	r1, sl
   34d10:	mov	r4, r0
   34d14:	ldr	lr, [sp, #72]	; 0x48
   34d18:	ldr	ip, [sp, #76]	; 0x4c
   34d1c:	str	r0, [r6, #4]
   34d20:	stm	sp, {r3, r7}
   34d24:	mvn	r3, #0
   34d28:	str	r5, [sp, #8]
   34d2c:	str	lr, [sp, #12]
   34d30:	str	ip, [sp, #16]
   34d34:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34d38:	mov	r0, r4
   34d3c:	str	r9, [r8]
   34d40:	add	sp, sp, #84	; 0x54
   34d44:	ldrd	r4, [sp]
   34d48:	ldrd	r6, [sp, #8]
   34d4c:	ldrd	r8, [sp, #16]
   34d50:	ldrd	sl, [sp, #24]
   34d54:	add	sp, sp, #32
   34d58:	pop	{pc}		; (ldr pc, [sp], #4)
   34d5c:	mov	r0, #8
   34d60:	mvn	r3, #-2147483648	; 0x80000000
   34d64:	add	r1, sp, #28
   34d68:	str	r0, [sp]
   34d6c:	mov	r0, #0
   34d70:	bl	36b50 <__assert_fail@plt+0x2455c>
   34d74:	ldrd	r2, [r4, #8]
   34d78:	mov	r6, r0
   34d7c:	str	r0, [r4]
   34d80:	strd	r2, [r0]
   34d84:	b	34c64 <__assert_fail@plt+0x22670>
   34d88:	andeq	r7, r6, r8, lsl #28
   34d8c:	ldr	ip, [pc, #480]	; 34f74 <__assert_fail@plt+0x22980>
   34d90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   34d94:	mov	r5, r0
   34d98:	movw	r4, #29940	; 0x74f4
   34d9c:	movt	r4, #6
   34da0:	ldrd	r2, [ip]
   34da4:	strd	r6, [sp, #8]
   34da8:	mov	r6, r1
   34dac:	ldrd	r0, [ip, #8]
   34db0:	strd	r8, [sp, #16]
   34db4:	strd	sl, [sp, #24]
   34db8:	str	lr, [sp, #32]
   34dbc:	sub	sp, sp, #84	; 0x54
   34dc0:	ldrd	r8, [ip, #40]	; 0x28
   34dc4:	strd	r2, [sp, #32]
   34dc8:	strd	r0, [sp, #40]	; 0x28
   34dcc:	ldrd	r2, [ip, #16]
   34dd0:	ldr	r7, [sp, #44]	; 0x2c
   34dd4:	ldrd	r0, [ip, #24]
   34dd8:	strd	r2, [sp, #48]	; 0x30
   34ddc:	ldrd	r2, [ip, #32]
   34de0:	mvn	lr, r7
   34de4:	and	lr, lr, #67108864	; 0x4000000
   34de8:	eor	lr, lr, r7
   34dec:	str	lr, [sp, #44]	; 0x2c
   34df0:	strd	r0, [sp, #56]	; 0x38
   34df4:	strd	r2, [sp, #64]	; 0x40
   34df8:	strd	r8, [sp, #72]	; 0x48
   34dfc:	bl	12348 <__errno_location@plt>
   34e00:	mov	r9, r0
   34e04:	ldr	sl, [r0]
   34e08:	ldr	r2, [r4, #4]
   34e0c:	ldr	r7, [r4]
   34e10:	cmp	r2, #0
   34e14:	bgt	34e70 <__assert_fail@plt+0x2287c>
   34e18:	add	r3, r4, #8
   34e1c:	str	r2, [sp, #28]
   34e20:	rsb	r2, r2, #1
   34e24:	cmp	r7, r3
   34e28:	beq	34f48 <__assert_fail@plt+0x22954>
   34e2c:	mov	r1, #8
   34e30:	mov	r0, r7
   34e34:	mvn	r3, #-2147483648	; 0x80000000
   34e38:	str	r1, [sp]
   34e3c:	add	r1, sp, #28
   34e40:	bl	36b50 <__assert_fail@plt+0x2455c>
   34e44:	mov	r7, r0
   34e48:	str	r0, [r4]
   34e4c:	ldr	r0, [r4, #4]
   34e50:	mov	r1, #0
   34e54:	ldr	r2, [sp, #28]
   34e58:	sub	r2, r2, r0
   34e5c:	add	r0, r7, r0, lsl #3
   34e60:	lsl	r2, r2, #3
   34e64:	bl	12378 <memset@plt>
   34e68:	ldr	r3, [sp, #28]
   34e6c:	str	r3, [r4, #4]
   34e70:	ldr	ip, [sp, #32]
   34e74:	add	r0, sp, #40	; 0x28
   34e78:	mov	r3, r6
   34e7c:	mov	r2, r5
   34e80:	ldr	r8, [sp, #36]	; 0x24
   34e84:	ldr	fp, [r7]
   34e88:	ldr	r4, [r7, #4]
   34e8c:	str	ip, [sp]
   34e90:	orr	r8, r8, #1
   34e94:	ldr	ip, [sp, #72]	; 0x48
   34e98:	mov	r1, fp
   34e9c:	str	r8, [sp, #4]
   34ea0:	ldr	lr, [sp, #76]	; 0x4c
   34ea4:	str	r0, [sp, #8]
   34ea8:	mov	r0, r4
   34eac:	str	ip, [sp, #12]
   34eb0:	str	lr, [sp, #16]
   34eb4:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34eb8:	cmp	fp, r0
   34ebc:	bhi	34f24 <__assert_fail@plt+0x22930>
   34ec0:	add	fp, r0, #1
   34ec4:	movw	r3, #32008	; 0x7d08
   34ec8:	movt	r3, #6
   34ecc:	cmp	r4, r3
   34ed0:	str	fp, [r7]
   34ed4:	beq	34ee0 <__assert_fail@plt+0x228ec>
   34ed8:	mov	r0, r4
   34edc:	bl	38b10 <__assert_fail@plt+0x2651c>
   34ee0:	mov	r0, fp
   34ee4:	bl	368ac <__assert_fail@plt+0x242b8>
   34ee8:	ldr	lr, [sp, #32]
   34eec:	mov	r2, r5
   34ef0:	mov	r3, r6
   34ef4:	mov	r1, fp
   34ef8:	mov	r4, r0
   34efc:	ldr	r5, [sp, #72]	; 0x48
   34f00:	ldr	ip, [sp, #76]	; 0x4c
   34f04:	str	r0, [r7, #4]
   34f08:	str	lr, [sp]
   34f0c:	add	lr, sp, #40	; 0x28
   34f10:	str	r8, [sp, #4]
   34f14:	str	lr, [sp, #8]
   34f18:	str	r5, [sp, #12]
   34f1c:	str	ip, [sp, #16]
   34f20:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   34f24:	mov	r0, r4
   34f28:	str	sl, [r9]
   34f2c:	add	sp, sp, #84	; 0x54
   34f30:	ldrd	r4, [sp]
   34f34:	ldrd	r6, [sp, #8]
   34f38:	ldrd	r8, [sp, #16]
   34f3c:	ldrd	sl, [sp, #24]
   34f40:	add	sp, sp, #32
   34f44:	pop	{pc}		; (ldr pc, [sp], #4)
   34f48:	mov	r0, #8
   34f4c:	mvn	r3, #-2147483648	; 0x80000000
   34f50:	add	r1, sp, #28
   34f54:	str	r0, [sp]
   34f58:	mov	r0, #0
   34f5c:	bl	36b50 <__assert_fail@plt+0x2455c>
   34f60:	ldrd	r2, [r4, #8]
   34f64:	mov	r7, r0
   34f68:	str	r0, [r4]
   34f6c:	strd	r2, [r0]
   34f70:	b	34e4c <__assert_fail@plt+0x22858>
   34f74:	andeq	r7, r6, r8, lsl #28
   34f78:	strd	r4, [sp, #-12]!
   34f7c:	mov	r4, #0
   34f80:	mov	r5, #0
   34f84:	str	lr, [sp, #8]
   34f88:	sub	sp, sp, #100	; 0x64
   34f8c:	cmp	r1, #10
   34f90:	strd	r4, [sp]
   34f94:	strd	r4, [sp, #8]
   34f98:	strd	r4, [sp, #16]
   34f9c:	strd	r4, [sp, #24]
   34fa0:	strd	r4, [sp, #32]
   34fa4:	strd	r4, [sp, #40]	; 0x28
   34fa8:	beq	34fd8 <__assert_fail@plt+0x229e4>
   34fac:	mov	ip, #67108864	; 0x4000000
   34fb0:	mov	r3, sp
   34fb4:	str	r1, [sp]
   34fb8:	mov	r1, r2
   34fbc:	mvn	r2, #0
   34fc0:	str	ip, [sp, #12]
   34fc4:	bl	339c4 <__assert_fail@plt+0x213d0>
   34fc8:	add	sp, sp, #100	; 0x64
   34fcc:	ldrd	r4, [sp]
   34fd0:	add	sp, sp, #8
   34fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   34fd8:	bl	125a0 <abort@plt>
   34fdc:	ldr	ip, [pc, #156]	; 35080 <__assert_fail@plt+0x22a8c>
   34fe0:	cmp	r2, #0
   34fe4:	cmpne	r1, #0
   34fe8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   34fec:	strd	r6, [sp, #8]
   34ff0:	mov	r6, r2
   34ff4:	str	r8, [sp, #16]
   34ff8:	mov	r8, r3
   34ffc:	strd	sl, [sp, #20]
   35000:	ldrd	r4, [ip]
   35004:	str	lr, [sp, #28]
   35008:	sub	sp, sp, #48	; 0x30
   3500c:	mov	lr, #10
   35010:	ldrd	r2, [ip, #8]
   35014:	ldrd	sl, [ip, #16]
   35018:	strd	r4, [sp]
   3501c:	ldrd	r4, [ip, #32]
   35020:	str	lr, [sp]
   35024:	strd	r2, [sp, #8]
   35028:	strd	sl, [sp, #16]
   3502c:	ldrd	r2, [ip, #24]
   35030:	ldrd	sl, [ip, #40]	; 0x28
   35034:	strd	r2, [sp, #24]
   35038:	strd	r4, [sp, #32]
   3503c:	strd	sl, [sp, #40]	; 0x28
   35040:	beq	3507c <__assert_fail@plt+0x22a88>
   35044:	mov	r7, r1
   35048:	mov	r3, sp
   3504c:	mov	r1, r8
   35050:	mvn	r2, #0
   35054:	str	r7, [sp, #40]	; 0x28
   35058:	str	r6, [sp, #44]	; 0x2c
   3505c:	bl	339c4 <__assert_fail@plt+0x213d0>
   35060:	add	sp, sp, #48	; 0x30
   35064:	ldrd	r4, [sp]
   35068:	ldrd	r6, [sp, #8]
   3506c:	ldr	r8, [sp, #16]
   35070:	ldrd	sl, [sp, #20]
   35074:	add	sp, sp, #28
   35078:	pop	{pc}		; (ldr pc, [sp], #4)
   3507c:	bl	125a0 <abort@plt>
   35080:	andeq	r7, r6, r8, lsl #28
   35084:	ldr	ip, [pc, #156]	; 35128 <__assert_fail@plt+0x22b34>
   35088:	cmp	r2, #0
   3508c:	cmpne	r1, #0
   35090:	strd	r4, [sp, #-32]!	; 0xffffffe0
   35094:	strd	r6, [sp, #8]
   35098:	mov	r6, r2
   3509c:	str	r8, [sp, #16]
   350a0:	mov	r8, r3
   350a4:	strd	sl, [sp, #20]
   350a8:	ldrd	r4, [ip]
   350ac:	str	lr, [sp, #28]
   350b0:	sub	sp, sp, #48	; 0x30
   350b4:	mov	lr, #10
   350b8:	ldrd	r2, [ip, #8]
   350bc:	ldrd	sl, [ip, #16]
   350c0:	strd	r4, [sp]
   350c4:	ldrd	r4, [ip, #32]
   350c8:	str	lr, [sp]
   350cc:	strd	r2, [sp, #8]
   350d0:	strd	sl, [sp, #16]
   350d4:	ldrd	r2, [ip, #24]
   350d8:	ldrd	sl, [ip, #40]	; 0x28
   350dc:	strd	r2, [sp, #24]
   350e0:	strd	r4, [sp, #32]
   350e4:	strd	sl, [sp, #40]	; 0x28
   350e8:	beq	35124 <__assert_fail@plt+0x22b30>
   350ec:	ldr	r2, [sp, #80]	; 0x50
   350f0:	mov	r7, r1
   350f4:	mov	r3, sp
   350f8:	mov	r1, r8
   350fc:	str	r7, [sp, #40]	; 0x28
   35100:	str	r6, [sp, #44]	; 0x2c
   35104:	bl	339c4 <__assert_fail@plt+0x213d0>
   35108:	add	sp, sp, #48	; 0x30
   3510c:	ldrd	r4, [sp]
   35110:	ldrd	r6, [sp, #8]
   35114:	ldr	r8, [sp, #16]
   35118:	ldrd	sl, [sp, #20]
   3511c:	add	sp, sp, #28
   35120:	pop	{pc}		; (ldr pc, [sp], #4)
   35124:	bl	125a0 <abort@plt>
   35128:	andeq	r7, r6, r8, lsl #28
   3512c:	ldr	ip, [pc, #512]	; 35334 <__assert_fail@plt+0x22d40>
   35130:	cmp	r0, #0
   35134:	strd	r4, [sp, #-36]!	; 0xffffffdc
   35138:	ldrd	r4, [ip, #16]
   3513c:	strd	r6, [sp, #8]
   35140:	clz	r6, r1
   35144:	mov	r7, r1
   35148:	strd	r8, [sp, #16]
   3514c:	mov	r8, r0
   35150:	lsr	r6, r6, #5
   35154:	strd	sl, [sp, #24]
   35158:	mov	fp, r2
   3515c:	mov	sl, #10
   35160:	ldrd	r2, [ip]
   35164:	moveq	r6, #1
   35168:	str	lr, [sp, #32]
   3516c:	sub	sp, sp, #92	; 0x5c
   35170:	cmp	r6, #0
   35174:	ldrd	r0, [ip, #8]
   35178:	strd	r2, [sp, #40]	; 0x28
   3517c:	strd	r4, [sp, #56]	; 0x38
   35180:	ldrd	r2, [ip, #24]
   35184:	strd	r0, [sp, #48]	; 0x30
   35188:	ldrd	r0, [ip, #32]
   3518c:	str	sl, [sp, #40]	; 0x28
   35190:	ldrd	r4, [ip, #40]	; 0x28
   35194:	strd	r2, [sp, #64]	; 0x40
   35198:	strd	r0, [sp, #72]	; 0x48
   3519c:	strd	r4, [sp, #80]	; 0x50
   351a0:	bne	35330 <__assert_fail@plt+0x22d3c>
   351a4:	movw	r5, #29940	; 0x74f4
   351a8:	movt	r5, #6
   351ac:	str	r8, [sp, #80]	; 0x50
   351b0:	str	r7, [sp, #84]	; 0x54
   351b4:	bl	12348 <__errno_location@plt>
   351b8:	ldr	r3, [r0]
   351bc:	mov	r9, r0
   351c0:	ldr	r2, [r5, #4]
   351c4:	ldr	r4, [r5]
   351c8:	str	r3, [sp, #28]
   351cc:	cmp	r2, #0
   351d0:	movgt	r1, sl
   351d4:	bgt	3523c <__assert_fail@plt+0x22c48>
   351d8:	add	r3, r5, #8
   351dc:	str	r2, [sp, #36]	; 0x24
   351e0:	rsb	r2, r2, #1
   351e4:	cmp	r4, r3
   351e8:	beq	35304 <__assert_fail@plt+0x22d10>
   351ec:	mov	r1, #8
   351f0:	mov	r0, r4
   351f4:	mvn	r3, #-2147483648	; 0x80000000
   351f8:	str	r1, [sp]
   351fc:	add	r1, sp, #36	; 0x24
   35200:	bl	36b50 <__assert_fail@plt+0x2455c>
   35204:	mov	r4, r0
   35208:	str	r0, [r5]
   3520c:	ldr	r0, [r5, #4]
   35210:	mov	r1, #0
   35214:	ldr	r2, [sp, #36]	; 0x24
   35218:	sub	r2, r2, r0
   3521c:	add	r0, r4, r0, lsl #3
   35220:	lsl	r2, r2, #3
   35224:	bl	12378 <memset@plt>
   35228:	ldr	r3, [sp, #36]	; 0x24
   3522c:	ldr	r1, [sp, #40]	; 0x28
   35230:	ldr	r8, [sp, #80]	; 0x50
   35234:	str	r3, [r5, #4]
   35238:	ldr	r7, [sp, #84]	; 0x54
   3523c:	mvn	r3, #0
   35240:	mov	r2, fp
   35244:	ldr	r6, [sp, #44]	; 0x2c
   35248:	ldr	sl, [r4]
   3524c:	ldr	r5, [r4, #4]
   35250:	orr	r6, r6, #1
   35254:	stm	sp, {r1, r6}
   35258:	add	r1, sp, #48	; 0x30
   3525c:	str	r8, [sp, #12]
   35260:	mov	r0, r5
   35264:	str	r1, [sp, #8]
   35268:	mov	r1, sl
   3526c:	str	r7, [sp, #16]
   35270:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   35274:	cmp	sl, r0
   35278:	bhi	352dc <__assert_fail@plt+0x22ce8>
   3527c:	add	r7, r0, #1
   35280:	movw	r3, #32008	; 0x7d08
   35284:	movt	r3, #6
   35288:	cmp	r5, r3
   3528c:	str	r7, [r4]
   35290:	beq	3529c <__assert_fail@plt+0x22ca8>
   35294:	mov	r0, r5
   35298:	bl	38b10 <__assert_fail@plt+0x2651c>
   3529c:	mov	r0, r7
   352a0:	bl	368ac <__assert_fail@plt+0x242b8>
   352a4:	ldr	r3, [sp, #40]	; 0x28
   352a8:	mov	r2, fp
   352ac:	mov	r1, r7
   352b0:	mov	r5, r0
   352b4:	ldr	lr, [sp, #80]	; 0x50
   352b8:	ldr	ip, [sp, #84]	; 0x54
   352bc:	str	r0, [r4, #4]
   352c0:	add	r4, sp, #48	; 0x30
   352c4:	stm	sp, {r3, r6}
   352c8:	mvn	r3, #0
   352cc:	str	r4, [sp, #8]
   352d0:	str	lr, [sp, #12]
   352d4:	str	ip, [sp, #16]
   352d8:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   352dc:	ldr	r3, [sp, #28]
   352e0:	mov	r0, r5
   352e4:	str	r3, [r9]
   352e8:	add	sp, sp, #92	; 0x5c
   352ec:	ldrd	r4, [sp]
   352f0:	ldrd	r6, [sp, #8]
   352f4:	ldrd	r8, [sp, #16]
   352f8:	ldrd	sl, [sp, #24]
   352fc:	add	sp, sp, #32
   35300:	pop	{pc}		; (ldr pc, [sp], #4)
   35304:	mov	r1, #8
   35308:	mvn	r3, #-2147483648	; 0x80000000
   3530c:	mov	r0, r6
   35310:	str	r1, [sp]
   35314:	add	r1, sp, #36	; 0x24
   35318:	bl	36b50 <__assert_fail@plt+0x2455c>
   3531c:	ldrd	r2, [r5, #8]
   35320:	mov	r4, r0
   35324:	str	r0, [r5]
   35328:	strd	r2, [r0]
   3532c:	b	3520c <__assert_fail@plt+0x22c18>
   35330:	bl	125a0 <abort@plt>
   35334:	andeq	r7, r6, r8, lsl #28
   35338:	ldr	ip, [pc, #536]	; 35558 <__assert_fail@plt+0x22f64>
   3533c:	cmp	r0, #0
   35340:	strd	r4, [sp, #-36]!	; 0xffffffdc
   35344:	ldrd	r4, [ip, #16]
   35348:	strd	r6, [sp, #8]
   3534c:	mov	r6, r1
   35350:	mov	r7, r0
   35354:	strd	r8, [sp, #16]
   35358:	mov	r9, #10
   3535c:	strd	sl, [sp, #24]
   35360:	mov	sl, r2
   35364:	mov	fp, r3
   35368:	str	lr, [sp, #32]
   3536c:	clz	lr, r1
   35370:	sub	sp, sp, #92	; 0x5c
   35374:	ldrd	r2, [ip]
   35378:	lsr	lr, lr, #5
   3537c:	moveq	lr, #1
   35380:	ldrd	r0, [ip, #8]
   35384:	cmp	lr, #0
   35388:	strd	r4, [sp, #56]	; 0x38
   3538c:	ldrd	r4, [ip, #40]	; 0x28
   35390:	str	lr, [sp, #28]
   35394:	strd	r2, [sp, #40]	; 0x28
   35398:	ldrd	r2, [ip, #24]
   3539c:	strd	r0, [sp, #48]	; 0x30
   353a0:	ldrd	r0, [ip, #32]
   353a4:	str	r9, [sp, #40]	; 0x28
   353a8:	strd	r2, [sp, #64]	; 0x40
   353ac:	strd	r4, [sp, #80]	; 0x50
   353b0:	strd	r0, [sp, #72]	; 0x48
   353b4:	bne	35554 <__assert_fail@plt+0x22f60>
   353b8:	movw	r5, #29940	; 0x74f4
   353bc:	movt	r5, #6
   353c0:	str	r7, [sp, #80]	; 0x50
   353c4:	str	r6, [sp, #84]	; 0x54
   353c8:	bl	12348 <__errno_location@plt>
   353cc:	ldr	r3, [r0]
   353d0:	mov	r8, r0
   353d4:	ldr	r2, [r5, #4]
   353d8:	ldr	r4, [r5]
   353dc:	str	r3, [sp, #24]
   353e0:	cmp	r2, #0
   353e4:	movgt	r1, r9
   353e8:	bgt	35450 <__assert_fail@plt+0x22e5c>
   353ec:	add	r3, r5, #8
   353f0:	str	r2, [sp, #36]	; 0x24
   353f4:	rsb	r2, r2, #1
   353f8:	cmp	r4, r3
   353fc:	beq	35528 <__assert_fail@plt+0x22f34>
   35400:	mov	r1, #8
   35404:	mov	r0, r4
   35408:	mvn	r3, #-2147483648	; 0x80000000
   3540c:	str	r1, [sp]
   35410:	add	r1, sp, #36	; 0x24
   35414:	bl	36b50 <__assert_fail@plt+0x2455c>
   35418:	mov	r4, r0
   3541c:	str	r0, [r5]
   35420:	ldr	r0, [r5, #4]
   35424:	mov	r1, #0
   35428:	ldr	r2, [sp, #36]	; 0x24
   3542c:	sub	r2, r2, r0
   35430:	add	r0, r4, r0, lsl #3
   35434:	lsl	r2, r2, #3
   35438:	bl	12378 <memset@plt>
   3543c:	ldr	r3, [sp, #36]	; 0x24
   35440:	ldr	r1, [sp, #40]	; 0x28
   35444:	ldr	r7, [sp, #80]	; 0x50
   35448:	str	r3, [r5, #4]
   3544c:	ldr	r6, [sp, #84]	; 0x54
   35450:	mov	r3, fp
   35454:	mov	r2, sl
   35458:	ldr	r0, [sp, #44]	; 0x2c
   3545c:	ldr	r9, [r4]
   35460:	ldr	r5, [r4, #4]
   35464:	orr	r0, r0, #1
   35468:	str	r1, [sp]
   3546c:	add	r1, sp, #48	; 0x30
   35470:	str	r0, [sp, #4]
   35474:	str	r1, [sp, #8]
   35478:	mov	r1, r9
   3547c:	str	r7, [sp, #12]
   35480:	str	r6, [sp, #16]
   35484:	str	r0, [sp, #28]
   35488:	mov	r0, r5
   3548c:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   35490:	cmp	r9, r0
   35494:	bhi	35500 <__assert_fail@plt+0x22f0c>
   35498:	add	r6, r0, #1
   3549c:	movw	r3, #32008	; 0x7d08
   354a0:	movt	r3, #6
   354a4:	cmp	r5, r3
   354a8:	str	r6, [r4]
   354ac:	beq	354b8 <__assert_fail@plt+0x22ec4>
   354b0:	mov	r0, r5
   354b4:	bl	38b10 <__assert_fail@plt+0x2651c>
   354b8:	mov	r0, r6
   354bc:	bl	368ac <__assert_fail@plt+0x242b8>
   354c0:	ldr	lr, [sp, #40]	; 0x28
   354c4:	mov	r1, r6
   354c8:	mov	r3, fp
   354cc:	mov	r2, sl
   354d0:	mov	r5, r0
   354d4:	ldr	r6, [sp, #80]	; 0x50
   354d8:	ldr	ip, [sp, #84]	; 0x54
   354dc:	str	r0, [r4, #4]
   354e0:	str	lr, [sp]
   354e4:	ldr	lr, [sp, #28]
   354e8:	str	lr, [sp, #4]
   354ec:	add	lr, sp, #48	; 0x30
   354f0:	str	r6, [sp, #12]
   354f4:	str	lr, [sp, #8]
   354f8:	str	ip, [sp, #16]
   354fc:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   35500:	ldr	r3, [sp, #24]
   35504:	mov	r0, r5
   35508:	str	r3, [r8]
   3550c:	add	sp, sp, #92	; 0x5c
   35510:	ldrd	r4, [sp]
   35514:	ldrd	r6, [sp, #8]
   35518:	ldrd	r8, [sp, #16]
   3551c:	ldrd	sl, [sp, #24]
   35520:	add	sp, sp, #32
   35524:	pop	{pc}		; (ldr pc, [sp], #4)
   35528:	mov	r1, #8
   3552c:	mvn	r3, #-2147483648	; 0x80000000
   35530:	ldr	r0, [sp, #28]
   35534:	str	r1, [sp]
   35538:	add	r1, sp, #36	; 0x24
   3553c:	bl	36b50 <__assert_fail@plt+0x2455c>
   35540:	ldrd	r2, [r5, #8]
   35544:	mov	r4, r0
   35548:	str	r0, [r5]
   3554c:	strd	r2, [r0]
   35550:	b	35420 <__assert_fail@plt+0x22e2c>
   35554:	bl	125a0 <abort@plt>
   35558:	andeq	r7, r6, r8, lsl #28
   3555c:	ldr	r3, [pc]	; 35564 <__assert_fail@plt+0x22f70>
   35560:	b	339c4 <__assert_fail@plt+0x213d0>
   35564:	andeq	r7, r6, r4, lsl #10
   35568:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3556c:	movw	r4, #29940	; 0x74f4
   35570:	movt	r4, #6
   35574:	strd	r6, [sp, #8]
   35578:	strd	r8, [sp, #16]
   3557c:	strd	sl, [sp, #24]
   35580:	mov	sl, r0
   35584:	mov	fp, r1
   35588:	str	lr, [sp, #32]
   3558c:	sub	sp, sp, #44	; 0x2c
   35590:	bl	12348 <__errno_location@plt>
   35594:	ldr	r3, [r0]
   35598:	mov	r8, r0
   3559c:	ldr	r2, [r4, #4]
   355a0:	ldr	r5, [r4]
   355a4:	str	r3, [sp, #28]
   355a8:	cmp	r2, #0
   355ac:	bgt	35608 <__assert_fail@plt+0x23014>
   355b0:	add	r3, r4, #8
   355b4:	str	r2, [sp, #36]	; 0x24
   355b8:	rsb	r2, r2, #1
   355bc:	cmp	r5, r3
   355c0:	beq	356e4 <__assert_fail@plt+0x230f0>
   355c4:	mov	r1, #8
   355c8:	mov	r0, r5
   355cc:	mvn	r3, #-2147483648	; 0x80000000
   355d0:	str	r1, [sp]
   355d4:	add	r1, sp, #36	; 0x24
   355d8:	bl	36b50 <__assert_fail@plt+0x2455c>
   355dc:	mov	r5, r0
   355e0:	str	r0, [r4]
   355e4:	ldr	r0, [r4, #4]
   355e8:	mov	r1, #0
   355ec:	ldr	r2, [sp, #36]	; 0x24
   355f0:	sub	r2, r2, r0
   355f4:	add	r0, r5, r0, lsl #3
   355f8:	lsl	r2, r2, #3
   355fc:	bl	12378 <memset@plt>
   35600:	ldr	r3, [sp, #36]	; 0x24
   35604:	str	r3, [r4, #4]
   35608:	ldr	ip, [r4, #16]
   3560c:	mov	r3, fp
   35610:	mov	r2, sl
   35614:	ldr	r7, [r4, #20]
   35618:	ldr	r0, [pc, #240]	; 35710 <__assert_fail@plt+0x2311c>
   3561c:	ldr	r9, [r5]
   35620:	orr	r7, r7, #1
   35624:	ldr	r6, [r5, #4]
   35628:	str	ip, [sp]
   3562c:	ldr	ip, [r4, #56]	; 0x38
   35630:	mov	r1, r9
   35634:	str	r7, [sp, #4]
   35638:	ldr	lr, [r4, #60]	; 0x3c
   3563c:	str	r0, [sp, #8]
   35640:	mov	r0, r6
   35644:	str	ip, [sp, #12]
   35648:	str	lr, [sp, #16]
   3564c:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   35650:	cmp	r9, r0
   35654:	bhi	356bc <__assert_fail@plt+0x230c8>
   35658:	add	r9, r0, #1
   3565c:	movw	r3, #32008	; 0x7d08
   35660:	movt	r3, #6
   35664:	cmp	r6, r3
   35668:	str	r9, [r5]
   3566c:	beq	35678 <__assert_fail@plt+0x23084>
   35670:	mov	r0, r6
   35674:	bl	38b10 <__assert_fail@plt+0x2651c>
   35678:	mov	r0, r9
   3567c:	bl	368ac <__assert_fail@plt+0x242b8>
   35680:	ldr	ip, [r4, #16]
   35684:	mov	r1, r9
   35688:	mov	r3, fp
   3568c:	mov	r2, sl
   35690:	mov	r6, r0
   35694:	ldr	r9, [r4, #56]	; 0x38
   35698:	ldr	lr, [r4, #60]	; 0x3c
   3569c:	str	r0, [r5, #4]
   356a0:	str	ip, [sp]
   356a4:	ldr	ip, [pc, #100]	; 35710 <__assert_fail@plt+0x2311c>
   356a8:	str	r7, [sp, #4]
   356ac:	str	ip, [sp, #8]
   356b0:	str	r9, [sp, #12]
   356b4:	str	lr, [sp, #16]
   356b8:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   356bc:	ldr	r3, [sp, #28]
   356c0:	mov	r0, r6
   356c4:	str	r3, [r8]
   356c8:	add	sp, sp, #44	; 0x2c
   356cc:	ldrd	r4, [sp]
   356d0:	ldrd	r6, [sp, #8]
   356d4:	ldrd	r8, [sp, #16]
   356d8:	ldrd	sl, [sp, #24]
   356dc:	add	sp, sp, #32
   356e0:	pop	{pc}		; (ldr pc, [sp], #4)
   356e4:	mov	r0, #8
   356e8:	mvn	r3, #-2147483648	; 0x80000000
   356ec:	add	r1, sp, #36	; 0x24
   356f0:	str	r0, [sp]
   356f4:	mov	r0, #0
   356f8:	bl	36b50 <__assert_fail@plt+0x2455c>
   356fc:	ldrd	r2, [r4, #8]
   35700:	mov	r5, r0
   35704:	str	r0, [r4]
   35708:	strd	r2, [r0]
   3570c:	b	355e4 <__assert_fail@plt+0x22ff0>
   35710:	andeq	r7, r6, ip, lsl #10
   35714:	ldr	r3, [pc, #4]	; 35720 <__assert_fail@plt+0x2312c>
   35718:	mvn	r2, #0
   3571c:	b	339c4 <__assert_fail@plt+0x213d0>
   35720:	andeq	r7, r6, r4, lsl #10
   35724:	strd	r4, [sp, #-36]!	; 0xffffffdc
   35728:	movw	r4, #29940	; 0x74f4
   3572c:	movt	r4, #6
   35730:	strd	r6, [sp, #8]
   35734:	strd	r8, [sp, #16]
   35738:	strd	sl, [sp, #24]
   3573c:	mov	sl, r0
   35740:	str	lr, [sp, #32]
   35744:	sub	sp, sp, #44	; 0x2c
   35748:	bl	12348 <__errno_location@plt>
   3574c:	ldr	r3, [r0]
   35750:	mov	r8, r0
   35754:	ldr	r2, [r4, #4]
   35758:	ldr	r5, [r4]
   3575c:	str	r3, [sp, #28]
   35760:	cmp	r2, #0
   35764:	bgt	357c0 <__assert_fail@plt+0x231cc>
   35768:	add	r3, r4, #8
   3576c:	str	r2, [sp, #36]	; 0x24
   35770:	rsb	r2, r2, #1
   35774:	cmp	r5, r3
   35778:	beq	35888 <__assert_fail@plt+0x23294>
   3577c:	mov	r1, #8
   35780:	mov	r0, r5
   35784:	mvn	r3, #-2147483648	; 0x80000000
   35788:	str	r1, [sp]
   3578c:	add	r1, sp, #36	; 0x24
   35790:	bl	36b50 <__assert_fail@plt+0x2455c>
   35794:	mov	r5, r0
   35798:	str	r0, [r4]
   3579c:	ldr	r0, [r4, #4]
   357a0:	mov	r1, #0
   357a4:	ldr	r2, [sp, #36]	; 0x24
   357a8:	sub	r2, r2, r0
   357ac:	add	r0, r5, r0, lsl #3
   357b0:	lsl	r2, r2, #3
   357b4:	bl	12378 <memset@plt>
   357b8:	ldr	r3, [sp, #36]	; 0x24
   357bc:	str	r3, [r4, #4]
   357c0:	ldr	ip, [r4, #16]
   357c4:	mvn	r3, #0
   357c8:	mov	r2, sl
   357cc:	ldr	r7, [r4, #20]
   357d0:	ldr	fp, [pc, #220]	; 358b4 <__assert_fail@plt+0x232c0>
   357d4:	ldr	r9, [r5]
   357d8:	orr	r7, r7, #1
   357dc:	ldr	r6, [r5, #4]
   357e0:	str	ip, [sp]
   357e4:	ldr	ip, [r4, #56]	; 0x38
   357e8:	mov	r1, r9
   357ec:	stmib	sp, {r7, fp}
   357f0:	ldr	lr, [r4, #60]	; 0x3c
   357f4:	mov	r0, r6
   357f8:	str	ip, [sp, #12]
   357fc:	str	lr, [sp, #16]
   35800:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   35804:	cmp	r9, r0
   35808:	bhi	35860 <__assert_fail@plt+0x2326c>
   3580c:	add	r9, r0, #1
   35810:	movw	r3, #32008	; 0x7d08
   35814:	movt	r3, #6
   35818:	cmp	r6, r3
   3581c:	str	r9, [r5]
   35820:	beq	3582c <__assert_fail@plt+0x23238>
   35824:	mov	r0, r6
   35828:	bl	38b10 <__assert_fail@plt+0x2651c>
   3582c:	mov	r0, r9
   35830:	bl	368ac <__assert_fail@plt+0x242b8>
   35834:	ldr	r3, [r4, #16]
   35838:	mov	r2, sl
   3583c:	mov	r1, r9
   35840:	mov	r6, r0
   35844:	ldr	lr, [r4, #56]	; 0x38
   35848:	ldr	ip, [r4, #60]	; 0x3c
   3584c:	str	r0, [r5, #4]
   35850:	stm	sp, {r3, r7, fp, lr}
   35854:	mvn	r3, #0
   35858:	str	ip, [sp, #16]
   3585c:	bl	31fd8 <__assert_fail@plt+0x1f9e4>
   35860:	ldr	r3, [sp, #28]
   35864:	mov	r0, r6
   35868:	str	r3, [r8]
   3586c:	add	sp, sp, #44	; 0x2c
   35870:	ldrd	r4, [sp]
   35874:	ldrd	r6, [sp, #8]
   35878:	ldrd	r8, [sp, #16]
   3587c:	ldrd	sl, [sp, #24]
   35880:	add	sp, sp, #32
   35884:	pop	{pc}		; (ldr pc, [sp], #4)
   35888:	mov	r0, #8
   3588c:	mvn	r3, #-2147483648	; 0x80000000
   35890:	add	r1, sp, #36	; 0x24
   35894:	str	r0, [sp]
   35898:	mov	r0, #0
   3589c:	bl	36b50 <__assert_fail@plt+0x2455c>
   358a0:	ldrd	r2, [r4, #8]
   358a4:	mov	r5, r0
   358a8:	str	r0, [r4]
   358ac:	strd	r2, [r0]
   358b0:	b	3579c <__assert_fail@plt+0x231a8>
   358b4:	andeq	r7, r6, ip, lsl #10
   358b8:	strd	r4, [sp, #-16]!
   358bc:	mov	r5, r0
   358c0:	mov	r4, #0
   358c4:	movw	r0, #16940	; 0x422c
   358c8:	movt	r0, #5
   358cc:	str	r6, [sp, #8]
   358d0:	mov	r1, #524288	; 0x80000
   358d4:	str	lr, [sp, #12]
   358d8:	str	r4, [r5, #4]
   358dc:	bl	28b00 <__assert_fail@plt+0x1650c>
   358e0:	cmp	r0, r4
   358e4:	str	r0, [r5]
   358e8:	movge	r0, r4
   358ec:	blt	35900 <__assert_fail@plt+0x2330c>
   358f0:	ldrd	r4, [sp]
   358f4:	ldr	r6, [sp, #8]
   358f8:	add	sp, sp, #12
   358fc:	pop	{pc}		; (ldr pc, [sp], #4)
   35900:	mov	r1, r4
   35904:	mov	r0, r4
   35908:	bl	122c4 <getcwd@plt>
   3590c:	clz	r4, r0
   35910:	str	r0, [r5, #4]
   35914:	lsr	r4, r4, #5
   35918:	ldr	r6, [sp, #8]
   3591c:	rsb	r0, r4, #0
   35920:	ldrd	r4, [sp]
   35924:	add	sp, sp, #12
   35928:	pop	{pc}		; (ldr pc, [sp], #4)
   3592c:	ldr	r3, [r0]
   35930:	cmp	r3, #0
   35934:	blt	35940 <__assert_fail@plt+0x2334c>
   35938:	mov	r0, r3
   3593c:	b	124f8 <fchdir@plt>
   35940:	ldr	r0, [r0, #4]
   35944:	b	3857c <__assert_fail@plt+0x25f88>
   35948:	str	r4, [sp, #-8]!
   3594c:	mov	r4, r0
   35950:	ldr	r0, [r0]
   35954:	str	lr, [sp, #4]
   35958:	cmp	r0, #0
   3595c:	blt	35964 <__assert_fail@plt+0x23370>
   35960:	bl	125ac <close@plt>
   35964:	ldr	r0, [r4, #4]
   35968:	ldr	r4, [sp]
   3596c:	ldr	lr, [sp, #4]
   35970:	add	sp, sp, #8
   35974:	b	38b10 <__assert_fail@plt+0x2651c>
   35978:	cmn	r0, #100	; 0x64
   3597c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   35980:	mov	r5, r1
   35984:	strd	r6, [sp, #8]
   35988:	strd	r8, [sp, #16]
   3598c:	mov	r8, r2
   35990:	strd	sl, [sp, #24]
   35994:	str	lr, [sp, #32]
   35998:	sub	sp, sp, #4032	; 0xfc0
   3599c:	sub	sp, sp, #4
   359a0:	beq	35a90 <__assert_fail@plt+0x2349c>
   359a4:	ldrb	r3, [r1]
   359a8:	cmp	r3, #47	; 0x2f
   359ac:	beq	35a90 <__assert_fail@plt+0x2349c>
   359b0:	mov	r4, r0
   359b4:	mov	r7, sp
   359b8:	mov	r2, r1
   359bc:	mov	r0, r7
   359c0:	mov	r1, r4
   359c4:	bl	4f638 <__assert_fail@plt+0x3d044>
   359c8:	subs	r9, r0, #0
   359cc:	beq	35a08 <__assert_fail@plt+0x23414>
   359d0:	mov	r1, r8
   359d4:	bl	3b2ec <__assert_fail@plt+0x28cf8>
   359d8:	mov	r6, r0
   359dc:	bl	12348 <__errno_location@plt>
   359e0:	cmp	r9, r7
   359e4:	mov	fp, r0
   359e8:	ldr	sl, [r0]
   359ec:	beq	359f8 <__assert_fail@plt+0x23404>
   359f0:	mov	r0, r9
   359f4:	bl	38b10 <__assert_fail@plt+0x2651c>
   359f8:	cmn	r6, #1
   359fc:	bne	35a6c <__assert_fail@plt+0x23478>
   35a00:	cmp	sl, #20
   35a04:	bne	35aa4 <__assert_fail@plt+0x234b0>
   35a08:	mov	r0, r7
   35a0c:	bl	358b8 <__assert_fail@plt+0x232c4>
   35a10:	cmp	r0, #0
   35a14:	bne	35b40 <__assert_fail@plt+0x2354c>
   35a18:	cmp	r4, #0
   35a1c:	blt	35a2c <__assert_fail@plt+0x23438>
   35a20:	ldr	r3, [sp]
   35a24:	cmp	r3, r4
   35a28:	beq	35b18 <__assert_fail@plt+0x23524>
   35a2c:	mov	r0, r4
   35a30:	bl	124f8 <fchdir@plt>
   35a34:	cmp	r0, #0
   35a38:	bne	35af8 <__assert_fail@plt+0x23504>
   35a3c:	mov	r1, r8
   35a40:	mov	r0, r5
   35a44:	bl	3b2ec <__assert_fail@plt+0x28cf8>
   35a48:	cmn	r0, #1
   35a4c:	mov	r6, r0
   35a50:	beq	35ac8 <__assert_fail@plt+0x234d4>
   35a54:	mov	r0, r7
   35a58:	bl	3592c <__assert_fail@plt+0x23338>
   35a5c:	cmp	r0, #0
   35a60:	bne	35b34 <__assert_fail@plt+0x23540>
   35a64:	mov	r0, r7
   35a68:	bl	35948 <__assert_fail@plt+0x23354>
   35a6c:	mov	r0, r6
   35a70:	add	sp, sp, #4032	; 0xfc0
   35a74:	add	sp, sp, #4
   35a78:	ldrd	r4, [sp]
   35a7c:	ldrd	r6, [sp, #8]
   35a80:	ldrd	r8, [sp, #16]
   35a84:	ldrd	sl, [sp, #24]
   35a88:	add	sp, sp, #32
   35a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   35a90:	mov	r1, r8
   35a94:	mov	r0, r5
   35a98:	bl	3b2ec <__assert_fail@plt+0x28cf8>
   35a9c:	mov	r6, r0
   35aa0:	b	35a6c <__assert_fail@plt+0x23478>
   35aa4:	sub	r3, sl, #1
   35aa8:	cmp	sl, #13
   35aac:	cmpne	r3, #1
   35ab0:	bls	35a08 <__assert_fail@plt+0x23414>
   35ab4:	cmp	sl, #38	; 0x26
   35ab8:	cmpne	sl, #95	; 0x5f
   35abc:	strne	sl, [fp]
   35ac0:	beq	35a08 <__assert_fail@plt+0x23414>
   35ac4:	b	35a6c <__assert_fail@plt+0x23478>
   35ac8:	bl	12348 <__errno_location@plt>
   35acc:	mov	r4, r0
   35ad0:	mov	r0, r7
   35ad4:	ldr	r5, [r4]
   35ad8:	bl	3592c <__assert_fail@plt+0x23338>
   35adc:	cmp	r0, #0
   35ae0:	bne	35b34 <__assert_fail@plt+0x23540>
   35ae4:	mov	r0, r7
   35ae8:	bl	35948 <__assert_fail@plt+0x23354>
   35aec:	cmp	r5, #0
   35af0:	strne	r5, [r4]
   35af4:	b	35a6c <__assert_fail@plt+0x23478>
   35af8:	bl	12348 <__errno_location@plt>
   35afc:	mov	r4, r0
   35b00:	mov	r0, r7
   35b04:	ldr	r5, [r4]
   35b08:	mvn	r6, #0
   35b0c:	bl	35948 <__assert_fail@plt+0x23354>
   35b10:	str	r5, [r4]
   35b14:	b	35a6c <__assert_fail@plt+0x23478>
   35b18:	mov	r0, r7
   35b1c:	mvn	r6, #0
   35b20:	bl	35948 <__assert_fail@plt+0x23354>
   35b24:	bl	12348 <__errno_location@plt>
   35b28:	mov	r3, #9
   35b2c:	str	r3, [r0]
   35b30:	b	35a6c <__assert_fail@plt+0x23478>
   35b34:	bl	12348 <__errno_location@plt>
   35b38:	ldr	r0, [r0]
   35b3c:	bl	2da14 <__assert_fail@plt+0x1b420>
   35b40:	bl	12348 <__errno_location@plt>
   35b44:	ldr	r0, [r0]
   35b48:	bl	2d9d4 <__assert_fail@plt+0x1b3e0>
   35b4c:	cmn	r0, #100	; 0x64
   35b50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   35b54:	mov	r5, r1
   35b58:	strd	r6, [sp, #8]
   35b5c:	strd	r8, [sp, #16]
   35b60:	mov	r8, r2
   35b64:	strd	sl, [sp, #24]
   35b68:	str	lr, [sp, #32]
   35b6c:	sub	sp, sp, #4032	; 0xfc0
   35b70:	sub	sp, sp, #4
   35b74:	beq	35c64 <__assert_fail@plt+0x23670>
   35b78:	ldrb	r3, [r1]
   35b7c:	cmp	r3, #47	; 0x2f
   35b80:	beq	35c64 <__assert_fail@plt+0x23670>
   35b84:	mov	r4, r0
   35b88:	mov	r7, sp
   35b8c:	mov	r2, r1
   35b90:	mov	r0, r7
   35b94:	mov	r1, r4
   35b98:	bl	4f638 <__assert_fail@plt+0x3d044>
   35b9c:	subs	r9, r0, #0
   35ba0:	beq	35bdc <__assert_fail@plt+0x235e8>
   35ba4:	mov	r1, r8
   35ba8:	bl	3b37c <__assert_fail@plt+0x28d88>
   35bac:	mov	r6, r0
   35bb0:	bl	12348 <__errno_location@plt>
   35bb4:	cmp	r9, r7
   35bb8:	mov	fp, r0
   35bbc:	ldr	sl, [r0]
   35bc0:	beq	35bcc <__assert_fail@plt+0x235d8>
   35bc4:	mov	r0, r9
   35bc8:	bl	38b10 <__assert_fail@plt+0x2651c>
   35bcc:	cmn	r6, #1
   35bd0:	bne	35c40 <__assert_fail@plt+0x2364c>
   35bd4:	cmp	sl, #20
   35bd8:	bne	35c78 <__assert_fail@plt+0x23684>
   35bdc:	mov	r0, r7
   35be0:	bl	358b8 <__assert_fail@plt+0x232c4>
   35be4:	cmp	r0, #0
   35be8:	bne	35d14 <__assert_fail@plt+0x23720>
   35bec:	cmp	r4, #0
   35bf0:	blt	35c00 <__assert_fail@plt+0x2360c>
   35bf4:	ldr	r3, [sp]
   35bf8:	cmp	r3, r4
   35bfc:	beq	35cec <__assert_fail@plt+0x236f8>
   35c00:	mov	r0, r4
   35c04:	bl	124f8 <fchdir@plt>
   35c08:	cmp	r0, #0
   35c0c:	bne	35ccc <__assert_fail@plt+0x236d8>
   35c10:	mov	r1, r8
   35c14:	mov	r0, r5
   35c18:	bl	3b37c <__assert_fail@plt+0x28d88>
   35c1c:	cmn	r0, #1
   35c20:	mov	r6, r0
   35c24:	beq	35c9c <__assert_fail@plt+0x236a8>
   35c28:	mov	r0, r7
   35c2c:	bl	3592c <__assert_fail@plt+0x23338>
   35c30:	cmp	r0, #0
   35c34:	bne	35d08 <__assert_fail@plt+0x23714>
   35c38:	mov	r0, r7
   35c3c:	bl	35948 <__assert_fail@plt+0x23354>
   35c40:	mov	r0, r6
   35c44:	add	sp, sp, #4032	; 0xfc0
   35c48:	add	sp, sp, #4
   35c4c:	ldrd	r4, [sp]
   35c50:	ldrd	r6, [sp, #8]
   35c54:	ldrd	r8, [sp, #16]
   35c58:	ldrd	sl, [sp, #24]
   35c5c:	add	sp, sp, #32
   35c60:	pop	{pc}		; (ldr pc, [sp], #4)
   35c64:	mov	r1, r8
   35c68:	mov	r0, r5
   35c6c:	bl	3b37c <__assert_fail@plt+0x28d88>
   35c70:	mov	r6, r0
   35c74:	b	35c40 <__assert_fail@plt+0x2364c>
   35c78:	sub	r3, sl, #1
   35c7c:	cmp	sl, #13
   35c80:	cmpne	r3, #1
   35c84:	bls	35bdc <__assert_fail@plt+0x235e8>
   35c88:	cmp	sl, #38	; 0x26
   35c8c:	cmpne	sl, #95	; 0x5f
   35c90:	strne	sl, [fp]
   35c94:	beq	35bdc <__assert_fail@plt+0x235e8>
   35c98:	b	35c40 <__assert_fail@plt+0x2364c>
   35c9c:	bl	12348 <__errno_location@plt>
   35ca0:	mov	r4, r0
   35ca4:	mov	r0, r7
   35ca8:	ldr	r5, [r4]
   35cac:	bl	3592c <__assert_fail@plt+0x23338>
   35cb0:	cmp	r0, #0
   35cb4:	bne	35d08 <__assert_fail@plt+0x23714>
   35cb8:	mov	r0, r7
   35cbc:	bl	35948 <__assert_fail@plt+0x23354>
   35cc0:	cmp	r5, #0
   35cc4:	strne	r5, [r4]
   35cc8:	b	35c40 <__assert_fail@plt+0x2364c>
   35ccc:	bl	12348 <__errno_location@plt>
   35cd0:	mov	r4, r0
   35cd4:	mov	r0, r7
   35cd8:	ldr	r5, [r4]
   35cdc:	mvn	r6, #0
   35ce0:	bl	35948 <__assert_fail@plt+0x23354>
   35ce4:	str	r5, [r4]
   35ce8:	b	35c40 <__assert_fail@plt+0x2364c>
   35cec:	mov	r0, r7
   35cf0:	mvn	r6, #0
   35cf4:	bl	35948 <__assert_fail@plt+0x23354>
   35cf8:	bl	12348 <__errno_location@plt>
   35cfc:	mov	r3, #9
   35d00:	str	r3, [r0]
   35d04:	b	35c40 <__assert_fail@plt+0x2364c>
   35d08:	bl	12348 <__errno_location@plt>
   35d0c:	ldr	r0, [r0]
   35d10:	bl	2da14 <__assert_fail@plt+0x1b420>
   35d14:	bl	12348 <__errno_location@plt>
   35d18:	ldr	r0, [r0]
   35d1c:	bl	2d9d4 <__assert_fail@plt+0x1b3e0>
   35d20:	cmn	r0, #100	; 0x64
   35d24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   35d28:	mov	r5, r1
   35d2c:	strd	r6, [sp, #8]
   35d30:	strd	r8, [sp, #16]
   35d34:	mov	r8, r2
   35d38:	strd	sl, [sp, #24]
   35d3c:	str	lr, [sp, #32]
   35d40:	sub	sp, sp, #4032	; 0xfc0
   35d44:	sub	sp, sp, #4
   35d48:	beq	35e38 <__assert_fail@plt+0x23844>
   35d4c:	ldrb	r3, [r1]
   35d50:	cmp	r3, #47	; 0x2f
   35d54:	beq	35e38 <__assert_fail@plt+0x23844>
   35d58:	mov	r4, r0
   35d5c:	mov	r7, sp
   35d60:	mov	r2, r1
   35d64:	mov	r0, r7
   35d68:	mov	r1, r4
   35d6c:	bl	4f638 <__assert_fail@plt+0x3d044>
   35d70:	subs	r9, r0, #0
   35d74:	beq	35db0 <__assert_fail@plt+0x237bc>
   35d78:	mov	r1, r8
   35d7c:	bl	123e4 <setfilecon@plt>
   35d80:	mov	r6, r0
   35d84:	bl	12348 <__errno_location@plt>
   35d88:	cmp	r9, r7
   35d8c:	mov	fp, r0
   35d90:	ldr	sl, [r0]
   35d94:	beq	35da0 <__assert_fail@plt+0x237ac>
   35d98:	mov	r0, r9
   35d9c:	bl	38b10 <__assert_fail@plt+0x2651c>
   35da0:	cmn	r6, #1
   35da4:	bne	35e14 <__assert_fail@plt+0x23820>
   35da8:	cmp	sl, #20
   35dac:	bne	35e4c <__assert_fail@plt+0x23858>
   35db0:	mov	r0, r7
   35db4:	bl	358b8 <__assert_fail@plt+0x232c4>
   35db8:	cmp	r0, #0
   35dbc:	bne	35ee8 <__assert_fail@plt+0x238f4>
   35dc0:	cmp	r4, #0
   35dc4:	blt	35dd4 <__assert_fail@plt+0x237e0>
   35dc8:	ldr	r3, [sp]
   35dcc:	cmp	r3, r4
   35dd0:	beq	35ec0 <__assert_fail@plt+0x238cc>
   35dd4:	mov	r0, r4
   35dd8:	bl	124f8 <fchdir@plt>
   35ddc:	cmp	r0, #0
   35de0:	bne	35ea0 <__assert_fail@plt+0x238ac>
   35de4:	mov	r1, r8
   35de8:	mov	r0, r5
   35dec:	bl	123e4 <setfilecon@plt>
   35df0:	cmn	r0, #1
   35df4:	mov	r6, r0
   35df8:	beq	35e70 <__assert_fail@plt+0x2387c>
   35dfc:	mov	r0, r7
   35e00:	bl	3592c <__assert_fail@plt+0x23338>
   35e04:	cmp	r0, #0
   35e08:	bne	35edc <__assert_fail@plt+0x238e8>
   35e0c:	mov	r0, r7
   35e10:	bl	35948 <__assert_fail@plt+0x23354>
   35e14:	mov	r0, r6
   35e18:	add	sp, sp, #4032	; 0xfc0
   35e1c:	add	sp, sp, #4
   35e20:	ldrd	r4, [sp]
   35e24:	ldrd	r6, [sp, #8]
   35e28:	ldrd	r8, [sp, #16]
   35e2c:	ldrd	sl, [sp, #24]
   35e30:	add	sp, sp, #32
   35e34:	pop	{pc}		; (ldr pc, [sp], #4)
   35e38:	mov	r1, r8
   35e3c:	mov	r0, r5
   35e40:	bl	123e4 <setfilecon@plt>
   35e44:	mov	r6, r0
   35e48:	b	35e14 <__assert_fail@plt+0x23820>
   35e4c:	sub	r3, sl, #1
   35e50:	cmp	sl, #13
   35e54:	cmpne	r3, #1
   35e58:	bls	35db0 <__assert_fail@plt+0x237bc>
   35e5c:	cmp	sl, #38	; 0x26
   35e60:	cmpne	sl, #95	; 0x5f
   35e64:	strne	sl, [fp]
   35e68:	beq	35db0 <__assert_fail@plt+0x237bc>
   35e6c:	b	35e14 <__assert_fail@plt+0x23820>
   35e70:	bl	12348 <__errno_location@plt>
   35e74:	mov	r4, r0
   35e78:	mov	r0, r7
   35e7c:	ldr	r5, [r4]
   35e80:	bl	3592c <__assert_fail@plt+0x23338>
   35e84:	cmp	r0, #0
   35e88:	bne	35edc <__assert_fail@plt+0x238e8>
   35e8c:	mov	r0, r7
   35e90:	bl	35948 <__assert_fail@plt+0x23354>
   35e94:	cmp	r5, #0
   35e98:	strne	r5, [r4]
   35e9c:	b	35e14 <__assert_fail@plt+0x23820>
   35ea0:	bl	12348 <__errno_location@plt>
   35ea4:	mov	r4, r0
   35ea8:	mov	r0, r7
   35eac:	ldr	r5, [r4]
   35eb0:	mvn	r6, #0
   35eb4:	bl	35948 <__assert_fail@plt+0x23354>
   35eb8:	str	r5, [r4]
   35ebc:	b	35e14 <__assert_fail@plt+0x23820>
   35ec0:	mov	r0, r7
   35ec4:	mvn	r6, #0
   35ec8:	bl	35948 <__assert_fail@plt+0x23354>
   35ecc:	bl	12348 <__errno_location@plt>
   35ed0:	mov	r3, #9
   35ed4:	str	r3, [r0]
   35ed8:	b	35e14 <__assert_fail@plt+0x23820>
   35edc:	bl	12348 <__errno_location@plt>
   35ee0:	ldr	r0, [r0]
   35ee4:	bl	2da14 <__assert_fail@plt+0x1b420>
   35ee8:	bl	12348 <__errno_location@plt>
   35eec:	ldr	r0, [r0]
   35ef0:	bl	2d9d4 <__assert_fail@plt+0x1b3e0>
   35ef4:	cmn	r0, #100	; 0x64
   35ef8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   35efc:	mov	r5, r1
   35f00:	strd	r6, [sp, #8]
   35f04:	strd	r8, [sp, #16]
   35f08:	mov	r8, r2
   35f0c:	strd	sl, [sp, #24]
   35f10:	str	lr, [sp, #32]
   35f14:	sub	sp, sp, #4032	; 0xfc0
   35f18:	sub	sp, sp, #4
   35f1c:	beq	3600c <__assert_fail@plt+0x23a18>
   35f20:	ldrb	r3, [r1]
   35f24:	cmp	r3, #47	; 0x2f
   35f28:	beq	3600c <__assert_fail@plt+0x23a18>
   35f2c:	mov	r4, r0
   35f30:	mov	r7, sp
   35f34:	mov	r2, r1
   35f38:	mov	r0, r7
   35f3c:	mov	r1, r4
   35f40:	bl	4f638 <__assert_fail@plt+0x3d044>
   35f44:	subs	r9, r0, #0
   35f48:	beq	35f84 <__assert_fail@plt+0x23990>
   35f4c:	mov	r1, r8
   35f50:	bl	11fac <lsetfilecon@plt>
   35f54:	mov	r6, r0
   35f58:	bl	12348 <__errno_location@plt>
   35f5c:	cmp	r9, r7
   35f60:	mov	fp, r0
   35f64:	ldr	sl, [r0]
   35f68:	beq	35f74 <__assert_fail@plt+0x23980>
   35f6c:	mov	r0, r9
   35f70:	bl	38b10 <__assert_fail@plt+0x2651c>
   35f74:	cmn	r6, #1
   35f78:	bne	35fe8 <__assert_fail@plt+0x239f4>
   35f7c:	cmp	sl, #20
   35f80:	bne	36020 <__assert_fail@plt+0x23a2c>
   35f84:	mov	r0, r7
   35f88:	bl	358b8 <__assert_fail@plt+0x232c4>
   35f8c:	cmp	r0, #0
   35f90:	bne	360bc <__assert_fail@plt+0x23ac8>
   35f94:	cmp	r4, #0
   35f98:	blt	35fa8 <__assert_fail@plt+0x239b4>
   35f9c:	ldr	r3, [sp]
   35fa0:	cmp	r3, r4
   35fa4:	beq	36094 <__assert_fail@plt+0x23aa0>
   35fa8:	mov	r0, r4
   35fac:	bl	124f8 <fchdir@plt>
   35fb0:	cmp	r0, #0
   35fb4:	bne	36074 <__assert_fail@plt+0x23a80>
   35fb8:	mov	r1, r8
   35fbc:	mov	r0, r5
   35fc0:	bl	11fac <lsetfilecon@plt>
   35fc4:	cmn	r0, #1
   35fc8:	mov	r6, r0
   35fcc:	beq	36044 <__assert_fail@plt+0x23a50>
   35fd0:	mov	r0, r7
   35fd4:	bl	3592c <__assert_fail@plt+0x23338>
   35fd8:	cmp	r0, #0
   35fdc:	bne	360b0 <__assert_fail@plt+0x23abc>
   35fe0:	mov	r0, r7
   35fe4:	bl	35948 <__assert_fail@plt+0x23354>
   35fe8:	mov	r0, r6
   35fec:	add	sp, sp, #4032	; 0xfc0
   35ff0:	add	sp, sp, #4
   35ff4:	ldrd	r4, [sp]
   35ff8:	ldrd	r6, [sp, #8]
   35ffc:	ldrd	r8, [sp, #16]
   36000:	ldrd	sl, [sp, #24]
   36004:	add	sp, sp, #32
   36008:	pop	{pc}		; (ldr pc, [sp], #4)
   3600c:	mov	r1, r8
   36010:	mov	r0, r5
   36014:	bl	11fac <lsetfilecon@plt>
   36018:	mov	r6, r0
   3601c:	b	35fe8 <__assert_fail@plt+0x239f4>
   36020:	sub	r3, sl, #1
   36024:	cmp	sl, #13
   36028:	cmpne	r3, #1
   3602c:	bls	35f84 <__assert_fail@plt+0x23990>
   36030:	cmp	sl, #38	; 0x26
   36034:	cmpne	sl, #95	; 0x5f
   36038:	strne	sl, [fp]
   3603c:	beq	35f84 <__assert_fail@plt+0x23990>
   36040:	b	35fe8 <__assert_fail@plt+0x239f4>
   36044:	bl	12348 <__errno_location@plt>
   36048:	mov	r4, r0
   3604c:	mov	r0, r7
   36050:	ldr	r5, [r4]
   36054:	bl	3592c <__assert_fail@plt+0x23338>
   36058:	cmp	r0, #0
   3605c:	bne	360b0 <__assert_fail@plt+0x23abc>
   36060:	mov	r0, r7
   36064:	bl	35948 <__assert_fail@plt+0x23354>
   36068:	cmp	r5, #0
   3606c:	strne	r5, [r4]
   36070:	b	35fe8 <__assert_fail@plt+0x239f4>
   36074:	bl	12348 <__errno_location@plt>
   36078:	mov	r4, r0
   3607c:	mov	r0, r7
   36080:	ldr	r5, [r4]
   36084:	mvn	r6, #0
   36088:	bl	35948 <__assert_fail@plt+0x23354>
   3608c:	str	r5, [r4]
   36090:	b	35fe8 <__assert_fail@plt+0x239f4>
   36094:	mov	r0, r7
   36098:	mvn	r6, #0
   3609c:	bl	35948 <__assert_fail@plt+0x23354>
   360a0:	bl	12348 <__errno_location@plt>
   360a4:	mov	r3, #9
   360a8:	str	r3, [r0]
   360ac:	b	35fe8 <__assert_fail@plt+0x239f4>
   360b0:	bl	12348 <__errno_location@plt>
   360b4:	ldr	r0, [r0]
   360b8:	bl	2da14 <__assert_fail@plt+0x1b420>
   360bc:	bl	12348 <__errno_location@plt>
   360c0:	ldr	r0, [r0]
   360c4:	bl	2d9d4 <__assert_fail@plt+0x1b3e0>
   360c8:	strd	r4, [sp, #-16]!
   360cc:	mov	r4, r1
   360d0:	mov	r1, #0
   360d4:	mov	r2, r4
   360d8:	mov	r5, r0
   360dc:	str	r6, [sp, #8]
   360e0:	str	lr, [sp, #12]
   360e4:	bl	123d8 <memchr@plt>
   360e8:	cmp	r0, #0
   360ec:	ldr	r6, [sp, #8]
   360f0:	subne	r0, r0, r5
   360f4:	moveq	r0, r4
   360f8:	ldrd	r4, [sp]
   360fc:	add	sp, sp, #12
   36100:	addne	r0, r0, #1
   36104:	pop	{pc}		; (ldr pc, [sp], #4)
   36108:	mov	r2, #3
   3610c:	mov	r1, #0
   36110:	b	388c8 <__assert_fail@plt+0x262d4>
   36114:	cmp	r0, #2
   36118:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3611c:	mov	r4, r0
   36120:	strd	r6, [sp, #8]
   36124:	str	r8, [sp, #16]
   36128:	str	lr, [sp, #20]
   3612c:	bls	36148 <__assert_fail@plt+0x23b54>
   36130:	mov	r0, r4
   36134:	ldrd	r4, [sp]
   36138:	ldrd	r6, [sp, #8]
   3613c:	ldr	r8, [sp, #16]
   36140:	add	sp, sp, #20
   36144:	pop	{pc}		; (ldr pc, [sp], #4)
   36148:	bl	36108 <__assert_fail@plt+0x23b14>
   3614c:	mov	r7, r0
   36150:	bl	12348 <__errno_location@plt>
   36154:	mov	r5, r0
   36158:	mov	r0, r4
   3615c:	ldr	r6, [r5]
   36160:	mov	r4, r7
   36164:	bl	125ac <close@plt>
   36168:	str	r6, [r5]
   3616c:	b	36130 <__assert_fail@plt+0x23b3c>
   36170:	cmp	r1, #0
   36174:	strd	r4, [sp, #-16]!
   36178:	mov	r4, r0
   3617c:	str	r6, [sp, #8]
   36180:	str	lr, [sp, #12]
   36184:	sub	sp, sp, #32
   36188:	ldr	r5, [sp, #48]	; 0x30
   3618c:	ldr	r6, [sp, #52]	; 0x34
   36190:	beq	362c4 <__assert_fail@plt+0x23cd0>
   36194:	mov	ip, r3
   36198:	mov	r3, r2
   3619c:	mov	r2, r1
   361a0:	movw	r1, #24280	; 0x5ed8
   361a4:	movt	r1, #5
   361a8:	str	ip, [sp]
   361ac:	bl	1233c <fprintf@plt>
   361b0:	mov	r2, #5
   361b4:	movw	r1, #24300	; 0x5eec
   361b8:	movt	r1, #5
   361bc:	mov	r0, #0
   361c0:	bl	120b4 <dcgettext@plt>
   361c4:	mov	r2, r0
   361c8:	movw	r3, #2022	; 0x7e6
   361cc:	movw	r1, #25004	; 0x61ac
   361d0:	movt	r1, #5
   361d4:	mov	r0, r4
   361d8:	bl	1233c <fprintf@plt>
   361dc:	mov	r1, r4
   361e0:	mov	r0, #10
   361e4:	bl	1248c <fputc@plt>
   361e8:	mov	r2, #5
   361ec:	movw	r1, #24304	; 0x5ef0
   361f0:	movt	r1, #5
   361f4:	mov	r0, #0
   361f8:	bl	120b4 <dcgettext@plt>
   361fc:	mov	r1, r0
   36200:	movw	r2, #24476	; 0x5f9c
   36204:	movt	r2, #5
   36208:	mov	r0, r4
   3620c:	bl	1233c <fprintf@plt>
   36210:	mov	r1, r4
   36214:	mov	r0, #10
   36218:	bl	1248c <fputc@plt>
   3621c:	cmp	r6, #9
   36220:	ldrls	pc, [pc, r6, lsl #2]
   36224:	b	36510 <__assert_fail@plt+0x23f1c>
   36228:			; <UNDEFINED> instruction: 0x000362b0
   3622c:	ldrdeq	r6, [r3], -r4
   36230:	andeq	r6, r3, ip, lsl #6
   36234:	andeq	r6, r3, r4, asr #6
   36238:	andeq	r6, r3, r4, lsl #7
   3623c:	ldrdeq	r6, [r3], -r0
   36240:	andeq	r6, r3, r4, lsl r4
   36244:	andeq	r6, r3, r0, ror #8
   36248:			; <UNDEFINED> instruction: 0x000364b4
   3624c:	andeq	r6, r3, r0, asr r2
   36250:	movw	r1, #24780	; 0x60cc
   36254:	movt	r1, #5
   36258:	mov	r2, #5
   3625c:	mov	r0, #0
   36260:	bl	120b4 <dcgettext@plt>
   36264:	ldr	ip, [r5, #8]
   36268:	mov	r1, r0
   3626c:	mov	r0, r4
   36270:	ldr	r3, [r5, #12]
   36274:	ldr	r2, [r5, #32]
   36278:	str	ip, [sp]
   3627c:	ldr	ip, [r5, #16]
   36280:	str	r2, [sp, #24]
   36284:	ldr	r2, [r5, #28]
   36288:	str	r3, [sp, #4]
   3628c:	ldr	r3, [r5, #20]
   36290:	str	ip, [sp, #8]
   36294:	ldr	ip, [r5, #24]
   36298:	str	r2, [sp, #20]
   3629c:	ldr	r2, [r5]
   362a0:	str	r3, [sp, #12]
   362a4:	ldr	r3, [r5, #4]
   362a8:	str	ip, [sp, #16]
   362ac:	bl	1233c <fprintf@plt>
   362b0:	add	sp, sp, #32
   362b4:	ldrd	r4, [sp]
   362b8:	ldr	r6, [sp, #8]
   362bc:	add	sp, sp, #12
   362c0:	pop	{pc}		; (ldr pc, [sp], #4)
   362c4:	movw	r1, #24292	; 0x5ee4
   362c8:	movt	r1, #5
   362cc:	bl	1233c <fprintf@plt>
   362d0:	b	361b0 <__assert_fail@plt+0x23bbc>
   362d4:	mov	r2, #5
   362d8:	movw	r1, #24512	; 0x5fc0
   362dc:	movt	r1, #5
   362e0:	mov	r0, #0
   362e4:	bl	120b4 <dcgettext@plt>
   362e8:	ldr	r2, [r5]
   362ec:	mov	r1, r0
   362f0:	mov	r0, r4
   362f4:	add	sp, sp, #32
   362f8:	ldrd	r4, [sp]
   362fc:	ldr	r6, [sp, #8]
   36300:	ldr	lr, [sp, #12]
   36304:	add	sp, sp, #16
   36308:	b	1233c <fprintf@plt>
   3630c:	mov	r2, #5
   36310:	movw	r1, #24528	; 0x5fd0
   36314:	movt	r1, #5
   36318:	mov	r0, #0
   3631c:	bl	120b4 <dcgettext@plt>
   36320:	ldrd	r2, [r5]
   36324:	mov	r1, r0
   36328:	mov	r0, r4
   3632c:	add	sp, sp, #32
   36330:	ldrd	r4, [sp]
   36334:	ldr	r6, [sp, #8]
   36338:	ldr	lr, [sp, #12]
   3633c:	add	sp, sp, #16
   36340:	b	1233c <fprintf@plt>
   36344:	mov	r2, #5
   36348:	movw	r1, #24552	; 0x5fe8
   3634c:	movt	r1, #5
   36350:	mov	r0, #0
   36354:	bl	120b4 <dcgettext@plt>
   36358:	ldrd	r2, [r5]
   3635c:	mov	r1, r0
   36360:	mov	r0, r4
   36364:	ldr	ip, [r5, #8]
   36368:	str	ip, [sp, #48]	; 0x30
   3636c:	add	sp, sp, #32
   36370:	ldrd	r4, [sp]
   36374:	ldr	r6, [sp, #8]
   36378:	ldr	lr, [sp, #12]
   3637c:	add	sp, sp, #16
   36380:	b	1233c <fprintf@plt>
   36384:	mov	r2, #5
   36388:	movw	r1, #24580	; 0x6004
   3638c:	movt	r1, #5
   36390:	mov	r0, #0
   36394:	bl	120b4 <dcgettext@plt>
   36398:	ldr	r2, [r5]
   3639c:	mov	r1, r0
   363a0:	mov	r0, r4
   363a4:	ldr	r3, [r5, #8]
   363a8:	ldr	ip, [r5, #12]
   363ac:	str	r3, [sp, #48]	; 0x30
   363b0:	ldr	r3, [r5, #4]
   363b4:	str	ip, [sp, #52]	; 0x34
   363b8:	add	sp, sp, #32
   363bc:	ldrd	r4, [sp]
   363c0:	ldr	r6, [sp, #8]
   363c4:	ldr	lr, [sp, #12]
   363c8:	add	sp, sp, #16
   363cc:	b	1233c <fprintf@plt>
   363d0:	mov	r2, #5
   363d4:	movw	r1, #24612	; 0x6024
   363d8:	movt	r1, #5
   363dc:	mov	r0, #0
   363e0:	bl	120b4 <dcgettext@plt>
   363e4:	ldr	r2, [r5, #8]
   363e8:	mov	r1, r0
   363ec:	mov	r0, r4
   363f0:	ldr	ip, [r5, #12]
   363f4:	ldr	r3, [r5, #16]
   363f8:	str	r2, [sp]
   363fc:	ldr	r2, [r5]
   36400:	str	r3, [sp, #8]
   36404:	ldr	r3, [r5, #4]
   36408:	str	ip, [sp, #4]
   3640c:	bl	1233c <fprintf@plt>
   36410:	b	362b0 <__assert_fail@plt+0x23cbc>
   36414:	mov	r2, #5
   36418:	movw	r1, #24648	; 0x6048
   3641c:	movt	r1, #5
   36420:	mov	r0, #0
   36424:	bl	120b4 <dcgettext@plt>
   36428:	ldr	ip, [r5, #8]
   3642c:	mov	r1, r0
   36430:	mov	r0, r4
   36434:	ldr	r3, [r5, #12]
   36438:	ldr	r2, [r5, #20]
   3643c:	str	ip, [sp]
   36440:	ldr	ip, [r5, #16]
   36444:	str	r2, [sp, #12]
   36448:	ldr	r2, [r5]
   3644c:	str	r3, [sp, #4]
   36450:	ldr	r3, [r5, #4]
   36454:	str	ip, [sp, #8]
   36458:	bl	1233c <fprintf@plt>
   3645c:	b	362b0 <__assert_fail@plt+0x23cbc>
   36460:	mov	r2, #5
   36464:	movw	r1, #24688	; 0x6070
   36468:	movt	r1, #5
   3646c:	mov	r0, #0
   36470:	bl	120b4 <dcgettext@plt>
   36474:	ldr	r3, [r5, #8]
   36478:	mov	r1, r0
   3647c:	mov	r0, r4
   36480:	ldr	r2, [r5, #12]
   36484:	ldr	ip, [r5, #24]
   36488:	str	r3, [sp]
   3648c:	ldr	r3, [r5, #16]
   36490:	str	ip, [sp, #16]
   36494:	ldr	ip, [r5, #20]
   36498:	str	r2, [sp, #4]
   3649c:	ldr	r2, [r5]
   364a0:	str	r3, [sp, #8]
   364a4:	ldr	r3, [r5, #4]
   364a8:	str	ip, [sp, #12]
   364ac:	bl	1233c <fprintf@plt>
   364b0:	b	362b0 <__assert_fail@plt+0x23cbc>
   364b4:	mov	r2, #5
   364b8:	movw	r1, #24732	; 0x609c
   364bc:	movt	r1, #5
   364c0:	mov	r0, #0
   364c4:	bl	120b4 <dcgettext@plt>
   364c8:	ldr	r2, [r5, #8]
   364cc:	mov	r1, r0
   364d0:	mov	r0, r4
   364d4:	ldr	ip, [r5, #12]
   364d8:	ldr	r3, [r5, #28]
   364dc:	str	r2, [sp]
   364e0:	ldr	r2, [r5, #16]
   364e4:	str	r3, [sp, #20]
   364e8:	ldr	r3, [r5, #24]
   364ec:	str	ip, [sp, #4]
   364f0:	ldr	ip, [r5, #20]
   364f4:	str	r2, [sp, #8]
   364f8:	ldr	r2, [r5]
   364fc:	str	r3, [sp, #16]
   36500:	ldr	r3, [r5, #4]
   36504:	str	ip, [sp, #12]
   36508:	bl	1233c <fprintf@plt>
   3650c:	b	362b0 <__assert_fail@plt+0x23cbc>
   36510:	movw	r1, #24832	; 0x6100
   36514:	movt	r1, #5
   36518:	b	36258 <__assert_fail@plt+0x23c64>
   3651c:	strd	r4, [sp, #-12]!
   36520:	str	lr, [sp, #8]
   36524:	sub	sp, sp, #12
   36528:	ldr	r5, [sp, #24]
   3652c:	ldr	ip, [r5]
   36530:	cmp	ip, #0
   36534:	beq	36550 <__assert_fail@plt+0x23f5c>
   36538:	mov	lr, r5
   3653c:	mov	ip, #0
   36540:	ldr	r4, [lr, #4]!
   36544:	add	ip, ip, #1
   36548:	cmp	r4, #0
   3654c:	bne	36540 <__assert_fail@plt+0x23f4c>
   36550:	stm	sp, {r5, ip}
   36554:	bl	36170 <__assert_fail@plt+0x23b7c>
   36558:	add	sp, sp, #12
   3655c:	ldrd	r4, [sp]
   36560:	add	sp, sp, #8
   36564:	pop	{pc}		; (ldr pc, [sp], #4)
   36568:	push	{lr}		; (str lr, [sp, #-4]!)
   3656c:	sub	sp, sp, #52	; 0x34
   36570:	ldr	ip, [sp, #56]	; 0x38
   36574:	ldr	lr, [ip]
   36578:	cmp	lr, #0
   3657c:	str	lr, [sp, #8]
   36580:	beq	36618 <__assert_fail@plt+0x24024>
   36584:	ldr	lr, [ip, #4]
   36588:	cmp	lr, #0
   3658c:	str	lr, [sp, #12]
   36590:	beq	3662c <__assert_fail@plt+0x24038>
   36594:	ldr	lr, [ip, #8]
   36598:	cmp	lr, #0
   3659c:	str	lr, [sp, #16]
   365a0:	beq	36634 <__assert_fail@plt+0x24040>
   365a4:	ldr	lr, [ip, #12]
   365a8:	cmp	lr, #0
   365ac:	str	lr, [sp, #20]
   365b0:	beq	3663c <__assert_fail@plt+0x24048>
   365b4:	ldr	lr, [ip, #16]
   365b8:	cmp	lr, #0
   365bc:	str	lr, [sp, #24]
   365c0:	beq	36644 <__assert_fail@plt+0x24050>
   365c4:	ldr	lr, [ip, #20]
   365c8:	cmp	lr, #0
   365cc:	str	lr, [sp, #28]
   365d0:	beq	3664c <__assert_fail@plt+0x24058>
   365d4:	ldr	lr, [ip, #24]
   365d8:	cmp	lr, #0
   365dc:	str	lr, [sp, #32]
   365e0:	beq	36654 <__assert_fail@plt+0x24060>
   365e4:	ldr	lr, [ip, #28]
   365e8:	cmp	lr, #0
   365ec:	str	lr, [sp, #36]	; 0x24
   365f0:	beq	3665c <__assert_fail@plt+0x24068>
   365f4:	ldr	lr, [ip, #32]
   365f8:	cmp	lr, #0
   365fc:	str	lr, [sp, #40]	; 0x28
   36600:	beq	36664 <__assert_fail@plt+0x24070>
   36604:	ldr	ip, [ip, #36]	; 0x24
   36608:	cmp	ip, #0
   3660c:	str	ip, [sp, #44]	; 0x2c
   36610:	movne	lr, #10
   36614:	moveq	lr, #9
   36618:	add	ip, sp, #8
   3661c:	stm	sp, {ip, lr}
   36620:	bl	36170 <__assert_fail@plt+0x23b7c>
   36624:	add	sp, sp, #52	; 0x34
   36628:	pop	{pc}		; (ldr pc, [sp], #4)
   3662c:	mov	lr, #1
   36630:	b	36618 <__assert_fail@plt+0x24024>
   36634:	mov	lr, #2
   36638:	b	36618 <__assert_fail@plt+0x24024>
   3663c:	mov	lr, #3
   36640:	b	36618 <__assert_fail@plt+0x24024>
   36644:	mov	lr, #4
   36648:	b	36618 <__assert_fail@plt+0x24024>
   3664c:	mov	lr, #5
   36650:	b	36618 <__assert_fail@plt+0x24024>
   36654:	mov	lr, #6
   36658:	b	36618 <__assert_fail@plt+0x24024>
   3665c:	mov	lr, #7
   36660:	b	36618 <__assert_fail@plt+0x24024>
   36664:	mov	lr, #8
   36668:	b	36618 <__assert_fail@plt+0x24024>
   3666c:	push	{r3}		; (str r3, [sp, #-4]!)
   36670:	push	{lr}		; (str lr, [sp, #-4]!)
   36674:	sub	sp, sp, #56	; 0x38
   36678:	ldr	ip, [sp, #64]	; 0x40
   3667c:	add	r3, sp, #64	; 0x40
   36680:	str	r3, [sp, #12]
   36684:	cmp	ip, #0
   36688:	str	ip, [sp, #16]
   3668c:	beq	36724 <__assert_fail@plt+0x24130>
   36690:	ldr	ip, [sp, #68]	; 0x44
   36694:	cmp	ip, #0
   36698:	str	ip, [sp, #20]
   3669c:	beq	36748 <__assert_fail@plt+0x24154>
   366a0:	ldr	ip, [sp, #72]	; 0x48
   366a4:	cmp	ip, #0
   366a8:	str	ip, [sp, #24]
   366ac:	beq	36750 <__assert_fail@plt+0x2415c>
   366b0:	ldr	ip, [sp, #76]	; 0x4c
   366b4:	cmp	ip, #0
   366b8:	str	ip, [sp, #28]
   366bc:	beq	36758 <__assert_fail@plt+0x24164>
   366c0:	ldr	ip, [sp, #80]	; 0x50
   366c4:	cmp	ip, #0
   366c8:	str	ip, [sp, #32]
   366cc:	beq	36760 <__assert_fail@plt+0x2416c>
   366d0:	ldr	ip, [sp, #84]	; 0x54
   366d4:	cmp	ip, #0
   366d8:	str	ip, [sp, #36]	; 0x24
   366dc:	beq	36768 <__assert_fail@plt+0x24174>
   366e0:	ldr	ip, [sp, #88]	; 0x58
   366e4:	cmp	ip, #0
   366e8:	str	ip, [sp, #40]	; 0x28
   366ec:	beq	36770 <__assert_fail@plt+0x2417c>
   366f0:	ldr	ip, [sp, #92]	; 0x5c
   366f4:	cmp	ip, #0
   366f8:	str	ip, [sp, #44]	; 0x2c
   366fc:	beq	36778 <__assert_fail@plt+0x24184>
   36700:	ldr	ip, [sp, #96]	; 0x60
   36704:	cmp	ip, #0
   36708:	str	ip, [sp, #48]	; 0x30
   3670c:	beq	36780 <__assert_fail@plt+0x2418c>
   36710:	ldr	r3, [sp, #100]	; 0x64
   36714:	cmp	r3, #0
   36718:	str	r3, [sp, #52]	; 0x34
   3671c:	movne	ip, #10
   36720:	moveq	ip, #9
   36724:	ldr	r3, [sp, #60]	; 0x3c
   36728:	add	lr, sp, #16
   3672c:	str	lr, [sp]
   36730:	str	ip, [sp, #4]
   36734:	bl	36170 <__assert_fail@plt+0x23b7c>
   36738:	add	sp, sp, #56	; 0x38
   3673c:	pop	{lr}		; (ldr lr, [sp], #4)
   36740:	add	sp, sp, #4
   36744:	bx	lr
   36748:	mov	ip, #1
   3674c:	b	36724 <__assert_fail@plt+0x24130>
   36750:	mov	ip, #2
   36754:	b	36724 <__assert_fail@plt+0x24130>
   36758:	mov	ip, #3
   3675c:	b	36724 <__assert_fail@plt+0x24130>
   36760:	mov	ip, #4
   36764:	b	36724 <__assert_fail@plt+0x24130>
   36768:	mov	ip, #5
   3676c:	b	36724 <__assert_fail@plt+0x24130>
   36770:	mov	ip, #6
   36774:	b	36724 <__assert_fail@plt+0x24130>
   36778:	mov	ip, #7
   3677c:	b	36724 <__assert_fail@plt+0x24130>
   36780:	mov	ip, #8
   36784:	b	36724 <__assert_fail@plt+0x24130>
   36788:	movw	r3, #30036	; 0x7554
   3678c:	movt	r3, #6
   36790:	str	r4, [sp, #-8]!
   36794:	mov	r0, #10
   36798:	ldr	r1, [r3]
   3679c:	str	lr, [sp, #4]
   367a0:	bl	1248c <fputc@plt>
   367a4:	mov	r2, #5
   367a8:	movw	r1, #24892	; 0x613c
   367ac:	movt	r1, #5
   367b0:	mov	r0, #0
   367b4:	bl	120b4 <dcgettext@plt>
   367b8:	movw	r1, #19928	; 0x4dd8
   367bc:	movt	r1, #5
   367c0:	bl	11f64 <printf@plt>
   367c4:	mov	r2, #5
   367c8:	movw	r1, #24912	; 0x6150
   367cc:	movt	r1, #5
   367d0:	mov	r0, #0
   367d4:	bl	120b4 <dcgettext@plt>
   367d8:	movw	r2, #19888	; 0x4db0
   367dc:	movt	r2, #5
   367e0:	movw	r1, #19088	; 0x4a90
   367e4:	movt	r1, #5
   367e8:	bl	11f64 <printf@plt>
   367ec:	movw	r1, #24932	; 0x6164
   367f0:	movt	r1, #5
   367f4:	mov	r2, #5
   367f8:	mov	r0, #0
   367fc:	bl	120b4 <dcgettext@plt>
   36800:	movw	r1, #24972	; 0x618c
   36804:	movt	r1, #5
   36808:	ldr	r4, [sp]
   3680c:	ldr	lr, [sp, #4]
   36810:	add	sp, sp, #8
   36814:	b	11f64 <printf@plt>
   36818:	strd	r4, [sp, #-16]!
   3681c:	mov	r4, r0
   36820:	mov	r5, r2
   36824:	str	r6, [sp, #8]
   36828:	mov	r6, r1
   3682c:	str	lr, [sp, #12]
   36830:	bl	3c010 <__assert_fail@plt+0x29a1c>
   36834:	cmp	r0, #0
   36838:	beq	3684c <__assert_fail@plt+0x24258>
   3683c:	ldrd	r4, [sp]
   36840:	ldr	r6, [sp, #8]
   36844:	add	sp, sp, #12
   36848:	pop	{pc}		; (ldr pc, [sp], #4)
   3684c:	cmp	r4, #0
   36850:	beq	36860 <__assert_fail@plt+0x2426c>
   36854:	cmp	r6, #0
   36858:	cmpne	r5, #0
   3685c:	beq	3683c <__assert_fail@plt+0x24248>
   36860:	bl	36e1c <__assert_fail@plt+0x24828>
   36864:	str	r4, [sp, #-8]!
   36868:	str	lr, [sp, #4]
   3686c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   36870:	cmp	r0, #0
   36874:	beq	36884 <__assert_fail@plt+0x24290>
   36878:	ldr	r4, [sp]
   3687c:	add	sp, sp, #4
   36880:	pop	{pc}		; (ldr pc, [sp], #4)
   36884:	bl	36e1c <__assert_fail@plt+0x24828>
   36888:	str	r4, [sp, #-8]!
   3688c:	str	lr, [sp, #4]
   36890:	bl	3b49c <__assert_fail@plt+0x28ea8>
   36894:	cmp	r0, #0
   36898:	beq	368a8 <__assert_fail@plt+0x242b4>
   3689c:	ldr	r4, [sp]
   368a0:	add	sp, sp, #4
   368a4:	pop	{pc}		; (ldr pc, [sp], #4)
   368a8:	bl	36e1c <__assert_fail@plt+0x24828>
   368ac:	str	r4, [sp, #-8]!
   368b0:	str	lr, [sp, #4]
   368b4:	bl	3b49c <__assert_fail@plt+0x28ea8>
   368b8:	cmp	r0, #0
   368bc:	beq	368cc <__assert_fail@plt+0x242d8>
   368c0:	ldr	r4, [sp]
   368c4:	add	sp, sp, #4
   368c8:	pop	{pc}		; (ldr pc, [sp], #4)
   368cc:	bl	36e1c <__assert_fail@plt+0x24828>
   368d0:	strd	r4, [sp, #-16]!
   368d4:	mov	r5, r0
   368d8:	mov	r4, r1
   368dc:	str	r6, [sp, #8]
   368e0:	str	lr, [sp, #12]
   368e4:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   368e8:	cmp	r0, #0
   368ec:	beq	36900 <__assert_fail@plt+0x2430c>
   368f0:	ldrd	r4, [sp]
   368f4:	ldr	r6, [sp, #8]
   368f8:	add	sp, sp, #12
   368fc:	pop	{pc}		; (ldr pc, [sp], #4)
   36900:	adds	r4, r4, #0
   36904:	movne	r4, #1
   36908:	cmp	r5, #0
   3690c:	moveq	r4, #1
   36910:	cmp	r4, #0
   36914:	beq	368f0 <__assert_fail@plt+0x242fc>
   36918:	bl	36e1c <__assert_fail@plt+0x24828>
   3691c:	cmp	r1, #0
   36920:	orreq	r1, r1, #1
   36924:	str	r4, [sp, #-8]!
   36928:	str	lr, [sp, #4]
   3692c:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   36930:	cmp	r0, #0
   36934:	beq	36944 <__assert_fail@plt+0x24350>
   36938:	ldr	r4, [sp]
   3693c:	add	sp, sp, #4
   36940:	pop	{pc}		; (ldr pc, [sp], #4)
   36944:	bl	36e1c <__assert_fail@plt+0x24828>
   36948:	strd	r4, [sp, #-16]!
   3694c:	mov	r4, r0
   36950:	mov	r5, r2
   36954:	str	r6, [sp, #8]
   36958:	mov	r6, r1
   3695c:	str	lr, [sp, #12]
   36960:	bl	3c010 <__assert_fail@plt+0x29a1c>
   36964:	cmp	r0, #0
   36968:	beq	3697c <__assert_fail@plt+0x24388>
   3696c:	ldrd	r4, [sp]
   36970:	ldr	r6, [sp, #8]
   36974:	add	sp, sp, #12
   36978:	pop	{pc}		; (ldr pc, [sp], #4)
   3697c:	cmp	r4, #0
   36980:	beq	36990 <__assert_fail@plt+0x2439c>
   36984:	cmp	r6, #0
   36988:	cmpne	r5, #0
   3698c:	beq	3696c <__assert_fail@plt+0x24378>
   36990:	bl	36e1c <__assert_fail@plt+0x24828>
   36994:	cmp	r2, #0
   36998:	cmpne	r1, #0
   3699c:	str	r4, [sp, #-8]!
   369a0:	moveq	r2, #1
   369a4:	str	lr, [sp, #4]
   369a8:	moveq	r1, r2
   369ac:	bl	3c010 <__assert_fail@plt+0x29a1c>
   369b0:	cmp	r0, #0
   369b4:	beq	369c4 <__assert_fail@plt+0x243d0>
   369b8:	ldr	r4, [sp]
   369bc:	add	sp, sp, #4
   369c0:	pop	{pc}		; (ldr pc, [sp], #4)
   369c4:	bl	36e1c <__assert_fail@plt+0x24828>
   369c8:	mov	r2, r1
   369cc:	mov	r1, r0
   369d0:	str	r4, [sp, #-8]!
   369d4:	mov	r0, #0
   369d8:	str	lr, [sp, #4]
   369dc:	bl	3c010 <__assert_fail@plt+0x29a1c>
   369e0:	cmp	r0, #0
   369e4:	beq	369f4 <__assert_fail@plt+0x24400>
   369e8:	ldr	r4, [sp]
   369ec:	add	sp, sp, #4
   369f0:	pop	{pc}		; (ldr pc, [sp], #4)
   369f4:	bl	36e1c <__assert_fail@plt+0x24828>
   369f8:	cmp	r1, #0
   369fc:	cmpne	r0, #0
   36a00:	str	r4, [sp, #-8]!
   36a04:	moveq	r2, #1
   36a08:	movne	r2, r1
   36a0c:	str	lr, [sp, #4]
   36a10:	movne	r1, r0
   36a14:	moveq	r1, r2
   36a18:	mov	r0, #0
   36a1c:	bl	3c010 <__assert_fail@plt+0x29a1c>
   36a20:	cmp	r0, #0
   36a24:	beq	36a34 <__assert_fail@plt+0x24440>
   36a28:	ldr	r4, [sp]
   36a2c:	add	sp, sp, #4
   36a30:	pop	{pc}		; (ldr pc, [sp], #4)
   36a34:	bl	36e1c <__assert_fail@plt+0x24828>
   36a38:	cmp	r0, #0
   36a3c:	strd	r4, [sp, #-16]!
   36a40:	mov	r5, r1
   36a44:	ldr	r4, [r1]
   36a48:	str	r6, [sp, #8]
   36a4c:	str	lr, [sp, #12]
   36a50:	beq	36a98 <__assert_fail@plt+0x244a4>
   36a54:	lsr	r3, r4, #1
   36a58:	add	r3, r3, #1
   36a5c:	adds	r4, r4, r3
   36a60:	bcs	36a94 <__assert_fail@plt+0x244a0>
   36a64:	mov	r2, #1
   36a68:	mov	r1, r4
   36a6c:	bl	3c010 <__assert_fail@plt+0x29a1c>
   36a70:	cmp	r0, #0
   36a74:	beq	36a8c <__assert_fail@plt+0x24498>
   36a78:	ldr	r6, [sp, #8]
   36a7c:	str	r4, [r5]
   36a80:	ldrd	r4, [sp]
   36a84:	add	sp, sp, #12
   36a88:	pop	{pc}		; (ldr pc, [sp], #4)
   36a8c:	cmp	r4, #0
   36a90:	beq	36a78 <__assert_fail@plt+0x24484>
   36a94:	bl	36e1c <__assert_fail@plt+0x24828>
   36a98:	cmp	r4, #0
   36a9c:	mov	r2, #1
   36aa0:	moveq	r4, #64	; 0x40
   36aa4:	mov	r1, r4
   36aa8:	bl	3c010 <__assert_fail@plt+0x29a1c>
   36aac:	cmp	r0, #0
   36ab0:	bne	36a78 <__assert_fail@plt+0x24484>
   36ab4:	b	36a94 <__assert_fail@plt+0x244a0>
   36ab8:	cmp	r0, #0
   36abc:	strd	r4, [sp, #-16]!
   36ac0:	mov	r5, r1
   36ac4:	ldr	r4, [r1]
   36ac8:	str	r6, [sp, #8]
   36acc:	mov	r6, r2
   36ad0:	str	lr, [sp, #12]
   36ad4:	beq	36b1c <__assert_fail@plt+0x24528>
   36ad8:	lsr	r3, r4, #1
   36adc:	add	r3, r3, #1
   36ae0:	adds	r4, r4, r3
   36ae4:	bcs	36b18 <__assert_fail@plt+0x24524>
   36ae8:	mov	r1, r4
   36aec:	bl	3c010 <__assert_fail@plt+0x29a1c>
   36af0:	cmp	r0, #0
   36af4:	beq	36b0c <__assert_fail@plt+0x24518>
   36af8:	ldr	r6, [sp, #8]
   36afc:	str	r4, [r5]
   36b00:	ldrd	r4, [sp]
   36b04:	add	sp, sp, #12
   36b08:	pop	{pc}		; (ldr pc, [sp], #4)
   36b0c:	cmp	r4, #0
   36b10:	cmpne	r6, #0
   36b14:	beq	36af8 <__assert_fail@plt+0x24504>
   36b18:	bl	36e1c <__assert_fail@plt+0x24828>
   36b1c:	cmp	r4, #0
   36b20:	bne	36b34 <__assert_fail@plt+0x24540>
   36b24:	mov	r4, #64	; 0x40
   36b28:	udiv	r4, r4, r2
   36b2c:	cmp	r2, #64	; 0x40
   36b30:	addhi	r4, r4, #1
   36b34:	mov	r2, r6
   36b38:	mov	r1, r4
   36b3c:	mov	r0, #0
   36b40:	bl	3c010 <__assert_fail@plt+0x29a1c>
   36b44:	cmp	r0, #0
   36b48:	bne	36af8 <__assert_fail@plt+0x24504>
   36b4c:	b	36b18 <__assert_fail@plt+0x24524>
   36b50:	ldr	ip, [r1]
   36b54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36b58:	strd	r6, [sp, #8]
   36b5c:	mov	r7, r1
   36b60:	mov	r6, r0
   36b64:	str	r8, [sp, #16]
   36b68:	mvn	r8, r3
   36b6c:	lsr	r8, r8, #31
   36b70:	str	lr, [sp, #20]
   36b74:	asr	r1, ip, #1
   36b78:	ldr	lr, [sp, #24]
   36b7c:	adds	r4, ip, r1
   36b80:	mvnvs	r4, #-2147483648	; 0x80000000
   36b84:	cmp	r3, r4
   36b88:	movge	r1, #0
   36b8c:	andlt	r1, r8, #1
   36b90:	cmp	r1, #0
   36b94:	movne	r4, r3
   36b98:	smull	r0, r1, r4, lr
   36b9c:	cmp	r1, r0, asr #31
   36ba0:	bne	36c50 <__assert_fail@plt+0x2465c>
   36ba4:	cmp	r0, #63	; 0x3f
   36ba8:	mov	r5, r0
   36bac:	ble	36c1c <__assert_fail@plt+0x24628>
   36bb0:	cmp	r6, #0
   36bb4:	sub	r1, r4, ip
   36bb8:	streq	r6, [r7]
   36bbc:	cmp	r1, r2
   36bc0:	bge	36bf0 <__assert_fail@plt+0x245fc>
   36bc4:	adds	r4, ip, r2
   36bc8:	bvs	36c4c <__assert_fail@plt+0x24658>
   36bcc:	cmp	r4, r3
   36bd0:	movle	r3, #0
   36bd4:	andgt	r3, r8, #1
   36bd8:	cmp	r3, #0
   36bdc:	bne	36c4c <__assert_fail@plt+0x24658>
   36be0:	smull	r0, r1, r4, lr
   36be4:	cmp	r1, r0, asr #31
   36be8:	mov	r5, r0
   36bec:	bne	36c4c <__assert_fail@plt+0x24658>
   36bf0:	mov	r1, r5
   36bf4:	mov	r0, r6
   36bf8:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   36bfc:	cmp	r0, #0
   36c00:	beq	36c30 <__assert_fail@plt+0x2463c>
   36c04:	ldr	r8, [sp, #16]
   36c08:	str	r4, [r7]
   36c0c:	ldrd	r4, [sp]
   36c10:	ldrd	r6, [sp, #8]
   36c14:	add	sp, sp, #20
   36c18:	pop	{pc}		; (ldr pc, [sp], #4)
   36c1c:	mov	r0, #64	; 0x40
   36c20:	sdiv	r4, r0, lr
   36c24:	mls	r5, lr, r4, r0
   36c28:	sub	r5, r0, r5
   36c2c:	b	36bb0 <__assert_fail@plt+0x245bc>
   36c30:	adds	r5, r5, #0
   36c34:	movne	r5, #1
   36c38:	cmp	r6, #0
   36c3c:	movne	r6, r5
   36c40:	moveq	r6, #1
   36c44:	cmp	r6, #0
   36c48:	beq	36c04 <__assert_fail@plt+0x24610>
   36c4c:	bl	36e1c <__assert_fail@plt+0x24828>
   36c50:	mvn	r0, #-2147483648	; 0x80000000
   36c54:	b	36c20 <__assert_fail@plt+0x2462c>
   36c58:	mov	r1, #1
   36c5c:	str	r4, [sp, #-8]!
   36c60:	str	lr, [sp, #4]
   36c64:	bl	384e0 <__assert_fail@plt+0x25eec>
   36c68:	cmp	r0, #0
   36c6c:	beq	36c7c <__assert_fail@plt+0x24688>
   36c70:	ldr	r4, [sp]
   36c74:	add	sp, sp, #4
   36c78:	pop	{pc}		; (ldr pc, [sp], #4)
   36c7c:	bl	36e1c <__assert_fail@plt+0x24828>
   36c80:	mov	r1, #1
   36c84:	str	r4, [sp, #-8]!
   36c88:	str	lr, [sp, #4]
   36c8c:	bl	384e0 <__assert_fail@plt+0x25eec>
   36c90:	cmp	r0, #0
   36c94:	beq	36ca4 <__assert_fail@plt+0x246b0>
   36c98:	ldr	r4, [sp]
   36c9c:	add	sp, sp, #4
   36ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   36ca4:	bl	36e1c <__assert_fail@plt+0x24828>
   36ca8:	str	r4, [sp, #-8]!
   36cac:	str	lr, [sp, #4]
   36cb0:	bl	384e0 <__assert_fail@plt+0x25eec>
   36cb4:	cmp	r0, #0
   36cb8:	beq	36cc8 <__assert_fail@plt+0x246d4>
   36cbc:	ldr	r4, [sp]
   36cc0:	add	sp, sp, #4
   36cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   36cc8:	bl	36e1c <__assert_fail@plt+0x24828>
   36ccc:	str	r4, [sp, #-8]!
   36cd0:	str	lr, [sp, #4]
   36cd4:	bl	384e0 <__assert_fail@plt+0x25eec>
   36cd8:	cmp	r0, #0
   36cdc:	beq	36cec <__assert_fail@plt+0x246f8>
   36ce0:	ldr	r4, [sp]
   36ce4:	add	sp, sp, #4
   36ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   36cec:	bl	36e1c <__assert_fail@plt+0x24828>
   36cf0:	strd	r4, [sp, #-16]!
   36cf4:	mov	r4, r1
   36cf8:	str	r6, [sp, #8]
   36cfc:	mov	r6, r0
   36d00:	mov	r0, r1
   36d04:	str	lr, [sp, #12]
   36d08:	bl	3b49c <__assert_fail@plt+0x28ea8>
   36d0c:	subs	r5, r0, #0
   36d10:	beq	36d34 <__assert_fail@plt+0x24740>
   36d14:	mov	r2, r4
   36d18:	mov	r1, r6
   36d1c:	bl	12024 <memcpy@plt>
   36d20:	mov	r0, r5
   36d24:	ldrd	r4, [sp]
   36d28:	ldr	r6, [sp, #8]
   36d2c:	add	sp, sp, #12
   36d30:	pop	{pc}		; (ldr pc, [sp], #4)
   36d34:	bl	36e1c <__assert_fail@plt+0x24828>
   36d38:	strd	r4, [sp, #-16]!
   36d3c:	mov	r4, r1
   36d40:	str	r6, [sp, #8]
   36d44:	mov	r6, r0
   36d48:	mov	r0, r1
   36d4c:	str	lr, [sp, #12]
   36d50:	bl	3b49c <__assert_fail@plt+0x28ea8>
   36d54:	subs	r5, r0, #0
   36d58:	beq	36d7c <__assert_fail@plt+0x24788>
   36d5c:	mov	r2, r4
   36d60:	mov	r1, r6
   36d64:	bl	12024 <memcpy@plt>
   36d68:	mov	r0, r5
   36d6c:	ldrd	r4, [sp]
   36d70:	ldr	r6, [sp, #8]
   36d74:	add	sp, sp, #12
   36d78:	pop	{pc}		; (ldr pc, [sp], #4)
   36d7c:	bl	36e1c <__assert_fail@plt+0x24828>
   36d80:	strd	r4, [sp, #-16]!
   36d84:	mov	r4, r1
   36d88:	str	r6, [sp, #8]
   36d8c:	mov	r6, r0
   36d90:	add	r0, r1, #1
   36d94:	str	lr, [sp, #12]
   36d98:	bl	3b49c <__assert_fail@plt+0x28ea8>
   36d9c:	subs	r5, r0, #0
   36da0:	beq	36dcc <__assert_fail@plt+0x247d8>
   36da4:	mov	r3, #0
   36da8:	mov	r1, r6
   36dac:	mov	r2, r4
   36db0:	strb	r3, [r5, r4]
   36db4:	bl	12024 <memcpy@plt>
   36db8:	mov	r0, r5
   36dbc:	ldrd	r4, [sp]
   36dc0:	ldr	r6, [sp, #8]
   36dc4:	add	sp, sp, #12
   36dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   36dcc:	bl	36e1c <__assert_fail@plt+0x24828>
   36dd0:	strd	r4, [sp, #-16]!
   36dd4:	str	r6, [sp, #8]
   36dd8:	mov	r6, r0
   36ddc:	str	lr, [sp, #12]
   36de0:	bl	12300 <strlen@plt>
   36de4:	add	r4, r0, #1
   36de8:	mov	r0, r4
   36dec:	bl	3b49c <__assert_fail@plt+0x28ea8>
   36df0:	subs	r5, r0, #0
   36df4:	beq	36e18 <__assert_fail@plt+0x24824>
   36df8:	mov	r2, r4
   36dfc:	mov	r1, r6
   36e00:	bl	12024 <memcpy@plt>
   36e04:	mov	r0, r5
   36e08:	ldrd	r4, [sp]
   36e0c:	ldr	r6, [sp, #8]
   36e10:	add	sp, sp, #12
   36e14:	pop	{pc}		; (ldr pc, [sp], #4)
   36e18:	bl	36e1c <__assert_fail@plt+0x24828>
   36e1c:	movw	r3, #29936	; 0x74f0
   36e20:	movt	r3, #6
   36e24:	str	r4, [sp, #-8]!
   36e28:	ldr	r4, [r3]
   36e2c:	mov	r2, #5
   36e30:	movw	r1, #25052	; 0x61dc
   36e34:	movt	r1, #5
   36e38:	mov	r0, #0
   36e3c:	str	lr, [sp, #4]
   36e40:	bl	120b4 <dcgettext@plt>
   36e44:	mov	r3, r0
   36e48:	movw	r2, #20016	; 0x4e30
   36e4c:	movt	r2, #5
   36e50:	mov	r1, #0
   36e54:	mov	r0, r4
   36e58:	bl	121ec <error@plt>
   36e5c:	bl	125a0 <abort@plt>
   36e60:	strd	r4, [sp, #-28]!	; 0xffffffe4
   36e64:	mov	r5, r1
   36e68:	mov	r4, #0
   36e6c:	strd	r6, [sp, #8]
   36e70:	mov	r6, r0
   36e74:	strd	r8, [sp, #16]
   36e78:	mov	r9, r3
   36e7c:	mov	r8, r2
   36e80:	str	lr, [sp, #24]
   36e84:	sub	sp, sp, #12
   36e88:	bl	12348 <__errno_location@plt>
   36e8c:	mov	r7, r0
   36e90:	add	r1, sp, #4
   36e94:	mov	r0, r6
   36e98:	str	r4, [r7]
   36e9c:	blx	r9
   36ea0:	ldr	r3, [sp, #4]
   36ea4:	cmp	r3, r6
   36ea8:	beq	36f1c <__assert_fail@plt+0x24928>
   36eac:	cmp	r5, r4
   36eb0:	beq	36ef8 <__assert_fail@plt+0x24904>
   36eb4:	vcmp.f64	d0, #0.0
   36eb8:	vmrs	APSR_nzcv, fpscr
   36ebc:	moveq	r0, #1
   36ec0:	beq	36ed8 <__assert_fail@plt+0x248e4>
   36ec4:	ldr	r0, [r7]
   36ec8:	subs	r0, r0, #34	; 0x22
   36ecc:	movne	r0, #1
   36ed0:	cmp	r5, #0
   36ed4:	beq	36edc <__assert_fail@plt+0x248e8>
   36ed8:	str	r3, [r5]
   36edc:	vstr	d0, [r8]
   36ee0:	add	sp, sp, #12
   36ee4:	ldrd	r4, [sp]
   36ee8:	ldrd	r6, [sp, #8]
   36eec:	ldrd	r8, [sp, #16]
   36ef0:	add	sp, sp, #24
   36ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   36ef8:	ldrb	r2, [r3]
   36efc:	cmp	r2, r4
   36f00:	movne	r0, r5
   36f04:	bne	36edc <__assert_fail@plt+0x248e8>
   36f08:	vcmp.f64	d0, #0.0
   36f0c:	vmrs	APSR_nzcv, fpscr
   36f10:	bne	36ec4 <__assert_fail@plt+0x248d0>
   36f14:	mov	r0, #1
   36f18:	b	36edc <__assert_fail@plt+0x248e8>
   36f1c:	mov	r0, r4
   36f20:	b	36ed0 <__assert_fail@plt+0x248dc>
   36f24:	cmp	r2, #36	; 0x24
   36f28:	strd	r4, [sp, #-32]!	; 0xffffffe0
   36f2c:	strd	r6, [sp, #8]
   36f30:	strd	r8, [sp, #16]
   36f34:	str	sl, [sp, #24]
   36f38:	str	lr, [sp, #28]
   36f3c:	sub	sp, sp, #8
   36f40:	bhi	37508 <__assert_fail@plt+0x24f14>
   36f44:	cmp	r1, #0
   36f48:	mov	r9, r2
   36f4c:	mov	r6, r1
   36f50:	mov	r5, r0
   36f54:	addeq	r6, sp, #4
   36f58:	mov	r8, r3
   36f5c:	bl	12348 <__errno_location@plt>
   36f60:	mov	r3, #0
   36f64:	mov	r7, r0
   36f68:	str	r3, [r0]
   36f6c:	ldrb	r4, [r5]
   36f70:	bl	122b8 <__ctype_b_loc@plt>
   36f74:	ldr	r2, [r0]
   36f78:	lsl	r3, r4, #1
   36f7c:	ldrh	r3, [r2, r3]
   36f80:	tst	r3, #8192	; 0x2000
   36f84:	beq	36fa0 <__assert_fail@plt+0x249ac>
   36f88:	mov	r3, r5
   36f8c:	ldrb	r4, [r3, #1]!
   36f90:	lsl	r1, r4, #1
   36f94:	ldrh	r1, [r2, r1]
   36f98:	tst	r1, #8192	; 0x2000
   36f9c:	bne	36f8c <__assert_fail@plt+0x24998>
   36fa0:	cmp	r4, #45	; 0x2d
   36fa4:	beq	37038 <__assert_fail@plt+0x24a44>
   36fa8:	mov	r2, r9
   36fac:	mov	r1, r6
   36fb0:	mov	r0, r5
   36fb4:	bl	122f4 <strtoul@plt>
   36fb8:	ldr	sl, [r6]
   36fbc:	mov	r9, r0
   36fc0:	cmp	sl, r5
   36fc4:	beq	37020 <__assert_fail@plt+0x24a2c>
   36fc8:	ldr	r4, [r7]
   36fcc:	cmp	r4, #0
   36fd0:	bne	37010 <__assert_fail@plt+0x24a1c>
   36fd4:	ldr	r3, [sp, #40]	; 0x28
   36fd8:	cmp	r3, #0
   36fdc:	beq	36fec <__assert_fail@plt+0x249f8>
   36fe0:	ldrb	r5, [sl]
   36fe4:	cmp	r5, #0
   36fe8:	bne	3741c <__assert_fail@plt+0x24e28>
   36fec:	str	r9, [r8]
   36ff0:	mov	r0, r4
   36ff4:	add	sp, sp, #8
   36ff8:	ldrd	r4, [sp]
   36ffc:	ldrd	r6, [sp, #8]
   37000:	ldrd	r8, [sp, #16]
   37004:	ldr	sl, [sp, #24]
   37008:	add	sp, sp, #28
   3700c:	pop	{pc}		; (ldr pc, [sp], #4)
   37010:	cmp	r4, #34	; 0x22
   37014:	bne	37038 <__assert_fail@plt+0x24a44>
   37018:	mov	r4, #1
   3701c:	b	36fd4 <__assert_fail@plt+0x249e0>
   37020:	ldr	r3, [sp, #40]	; 0x28
   37024:	cmp	r3, #0
   37028:	beq	37038 <__assert_fail@plt+0x24a44>
   3702c:	ldrb	r5, [r5]
   37030:	cmp	r5, #0
   37034:	bne	37040 <__assert_fail@plt+0x24a4c>
   37038:	mov	r4, #4
   3703c:	b	36ff0 <__assert_fail@plt+0x249fc>
   37040:	mov	r1, r5
   37044:	mov	r0, r3
   37048:	bl	1230c <strchr@plt>
   3704c:	cmp	r0, #0
   37050:	movne	r4, #0
   37054:	movne	r9, #1
   37058:	beq	37038 <__assert_fail@plt+0x24a44>
   3705c:	sub	r7, r5, #69	; 0x45
   37060:	cmp	r7, #47	; 0x2f
   37064:	ldrls	pc, [pc, r7, lsl #2]
   37068:	b	37228 <__assert_fail@plt+0x24c34>
   3706c:	andeq	r7, r3, ip, lsr #2
   37070:	andeq	r7, r3, r8, lsr #4
   37074:	andeq	r7, r3, ip, lsr #2
   37078:	andeq	r7, r3, r8, lsr #4
   3707c:	andeq	r7, r3, r8, lsr #4
   37080:	andeq	r7, r3, r8, lsr #4
   37084:	andeq	r7, r3, ip, lsr #2
   37088:	andeq	r7, r3, r8, lsr #4
   3708c:	andeq	r7, r3, ip, lsr #2
   37090:	andeq	r7, r3, r8, lsr #4
   37094:	andeq	r7, r3, r8, lsr #4
   37098:	andeq	r7, r3, ip, lsr #2
   3709c:	andeq	r7, r3, r8, lsr #4
   370a0:	andeq	r7, r3, r8, lsr #4
   370a4:	andeq	r7, r3, r8, lsr #4
   370a8:	andeq	r7, r3, ip, lsr #2
   370ac:	andeq	r7, r3, r8, lsr #4
   370b0:	andeq	r7, r3, r8, lsr #4
   370b4:	andeq	r7, r3, r8, lsr #4
   370b8:	andeq	r7, r3, r8, lsr #4
   370bc:	andeq	r7, r3, ip, lsr #2
   370c0:	andeq	r7, r3, ip, lsr #2
   370c4:	andeq	r7, r3, r8, lsr #4
   370c8:	andeq	r7, r3, r8, lsr #4
   370cc:	andeq	r7, r3, r8, lsr #4
   370d0:	andeq	r7, r3, r8, lsr #4
   370d4:	andeq	r7, r3, r8, lsr #4
   370d8:	andeq	r7, r3, r8, lsr #4
   370dc:	andeq	r7, r3, r8, lsr #4
   370e0:	andeq	r7, r3, r8, lsr #4
   370e4:	andeq	r7, r3, r8, lsr #4
   370e8:	andeq	r7, r3, r8, lsr #4
   370ec:	andeq	r7, r3, r8, lsr #4
   370f0:	andeq	r7, r3, r8, lsr #4
   370f4:	andeq	r7, r3, ip, lsr #2
   370f8:	andeq	r7, r3, r8, lsr #4
   370fc:	andeq	r7, r3, r8, lsr #4
   37100:	andeq	r7, r3, r8, lsr #4
   37104:	andeq	r7, r3, ip, lsr #2
   37108:	andeq	r7, r3, r8, lsr #4
   3710c:	andeq	r7, r3, ip, lsr #2
   37110:	andeq	r7, r3, r8, lsr #4
   37114:	andeq	r7, r3, r8, lsr #4
   37118:	andeq	r7, r3, r8, lsr #4
   3711c:	andeq	r7, r3, r8, lsr #4
   37120:	andeq	r7, r3, r8, lsr #4
   37124:	andeq	r7, r3, r8, lsr #4
   37128:	andeq	r7, r3, ip, lsr #2
   3712c:	mov	r1, #48	; 0x30
   37130:	ldr	r0, [sp, #40]	; 0x28
   37134:	bl	1230c <strchr@plt>
   37138:	cmp	r0, #0
   3713c:	beq	37228 <__assert_fail@plt+0x24c34>
   37140:	ldrb	r3, [sl, #1]
   37144:	cmp	r3, #68	; 0x44
   37148:	beq	374fc <__assert_fail@plt+0x24f08>
   3714c:	cmp	r3, #105	; 0x69
   37150:	beq	37434 <__assert_fail@plt+0x24e40>
   37154:	cmp	r3, #66	; 0x42
   37158:	beq	374fc <__assert_fail@plt+0x24f08>
   3715c:	cmp	r7, #47	; 0x2f
   37160:	ldrls	pc, [pc, r7, lsl #2]
   37164:	b	373f8 <__assert_fail@plt+0x24e04>
   37168:	andeq	r7, r3, r0, ror #9
   3716c:	strdeq	r7, [r3], -r8
   37170:	ldrdeq	r7, [r3], -r4
   37174:	strdeq	r7, [r3], -r8
   37178:	strdeq	r7, [r3], -r8
   3717c:	strdeq	r7, [r3], -r8
   37180:	andeq	r7, r3, r0, lsl #8
   37184:	strdeq	r7, [r3], -r8
   37188:	andeq	r7, r3, r0, ror r4
   3718c:	strdeq	r7, [r3], -r8
   37190:	strdeq	r7, [r3], -r8
   37194:	andeq	r7, r3, r8, asr #9
   37198:	strdeq	r7, [r3], -r8
   3719c:	strdeq	r7, [r3], -r8
   371a0:	strdeq	r7, [r3], -r8
   371a4:			; <UNDEFINED> instruction: 0x000374bc
   371a8:	strdeq	r7, [r3], -r8
   371ac:	strdeq	r7, [r3], -r8
   371b0:	strdeq	r7, [r3], -r8
   371b4:	strdeq	r7, [r3], -r8
   371b8:	andeq	r7, r3, r8, lsl r3
   371bc:			; <UNDEFINED> instruction: 0x000374b0
   371c0:	strdeq	r7, [r3], -r8
   371c4:	strdeq	r7, [r3], -r8
   371c8:	strdeq	r7, [r3], -r8
   371cc:	strdeq	r7, [r3], -r8
   371d0:	strdeq	r7, [r3], -r8
   371d4:	strdeq	r7, [r3], -r8
   371d8:	strdeq	r7, [r3], -r8
   371dc:	andeq	r7, r3, ip, asr r4
   371e0:	andeq	r7, r3, ip, ror #9
   371e4:	strdeq	r7, [r3], -r8
   371e8:	strdeq	r7, [r3], -r8
   371ec:	strdeq	r7, [r3], -r8
   371f0:	ldrdeq	r7, [r3], -r4
   371f4:	strdeq	r7, [r3], -r8
   371f8:	strdeq	r7, [r3], -r8
   371fc:	strdeq	r7, [r3], -r8
   37200:	andeq	r7, r3, r0, lsl #8
   37204:	strdeq	r7, [r3], -r8
   37208:	andeq	r7, r3, r0, ror r4
   3720c:	strdeq	r7, [r3], -r8
   37210:	strdeq	r7, [r3], -r8
   37214:	strdeq	r7, [r3], -r8
   37218:	strdeq	r7, [r3], -r8
   3721c:	strdeq	r7, [r3], -r8
   37220:	strdeq	r7, [r3], -r8
   37224:			; <UNDEFINED> instruction: 0x000374bc
   37228:	mov	r3, #1024	; 0x400
   3722c:	mov	r2, #1
   37230:	sub	r5, r5, #66	; 0x42
   37234:	cmp	r5, #53	; 0x35
   37238:	ldrls	pc, [pc, r5, lsl #2]
   3723c:	b	373f8 <__assert_fail@plt+0x24e04>
   37240:	andeq	r7, r3, r0, lsr #9
   37244:	strdeq	r7, [r3], -r8
   37248:	strdeq	r7, [r3], -r8
   3724c:	andeq	r7, r3, r0, asr r3
   37250:	strdeq	r7, [r3], -r8
   37254:	muleq	r3, r8, r3
   37258:	strdeq	r7, [r3], -r8
   3725c:	strdeq	r7, [r3], -r8
   37260:	strdeq	r7, [r3], -r8
   37264:	andeq	r7, r3, r8, lsl #8
   37268:	strdeq	r7, [r3], -r8
   3726c:	andeq	r7, r3, r8, ror r4
   37270:	strdeq	r7, [r3], -r8
   37274:	strdeq	r7, [r3], -r8
   37278:	andeq	r7, r3, r8, ror #6
   3727c:	strdeq	r7, [r3], -r8
   37280:	strdeq	r7, [r3], -r8
   37284:	strdeq	r7, [r3], -r8
   37288:	andeq	r7, r3, r0, lsl #7
   3728c:	strdeq	r7, [r3], -r8
   37290:	strdeq	r7, [r3], -r8
   37294:	strdeq	r7, [r3], -r8
   37298:	strdeq	r7, [r3], -r8
   3729c:	andeq	r7, r3, r0, lsr #6
   372a0:	andeq	r7, r3, r8, lsr r3
   372a4:	strdeq	r7, [r3], -r8
   372a8:	strdeq	r7, [r3], -r8
   372ac:	strdeq	r7, [r3], -r8
   372b0:	strdeq	r7, [r3], -r8
   372b4:	strdeq	r7, [r3], -r8
   372b8:	strdeq	r7, [r3], -r8
   372bc:	strdeq	r7, [r3], -r8
   372c0:	andeq	r7, r3, r0, ror #8
   372c4:	andeq	r7, r3, r4, ror #7
   372c8:	strdeq	r7, [r3], -r8
   372cc:	strdeq	r7, [r3], -r8
   372d0:	strdeq	r7, [r3], -r8
   372d4:	muleq	r3, r8, r3
   372d8:	strdeq	r7, [r3], -r8
   372dc:	strdeq	r7, [r3], -r8
   372e0:	strdeq	r7, [r3], -r8
   372e4:	andeq	r7, r3, r8, lsl #8
   372e8:	strdeq	r7, [r3], -r8
   372ec:	andeq	r7, r3, r8, ror r4
   372f0:	strdeq	r7, [r3], -r8
   372f4:	strdeq	r7, [r3], -r8
   372f8:	strdeq	r7, [r3], -r8
   372fc:	strdeq	r7, [r3], -r8
   37300:	strdeq	r7, [r3], -r8
   37304:	strdeq	r7, [r3], -r8
   37308:	andeq	r7, r3, r0, lsl #7
   3730c:	strdeq	r7, [r3], -r8
   37310:	strdeq	r7, [r3], -r8
   37314:	andeq	r7, r3, ip, asr #8
   37318:	mov	r2, #1
   3731c:	mov	r3, #1024	; 0x400
   37320:	umull	r0, r1, r3, r9
   37324:	adds	r1, r1, #0
   37328:	movne	r1, #1
   3732c:	cmp	r1, #0
   37330:	bne	374f4 <__assert_fail@plt+0x24f00>
   37334:	mul	r9, r9, r3
   37338:	umull	r0, r1, r3, r9
   3733c:	adds	r1, r1, #0
   37340:	movne	r1, #1
   37344:	cmp	r1, #0
   37348:	bne	374f4 <__assert_fail@plt+0x24f00>
   3734c:	mul	r9, r9, r3
   37350:	umull	r0, r1, r3, r9
   37354:	adds	r1, r1, #0
   37358:	movne	r1, #1
   3735c:	cmp	r1, #0
   37360:	bne	374f4 <__assert_fail@plt+0x24f00>
   37364:	mul	r9, r9, r3
   37368:	umull	r0, r1, r3, r9
   3736c:	adds	r1, r1, #0
   37370:	movne	r1, #1
   37374:	cmp	r1, #0
   37378:	bne	374f4 <__assert_fail@plt+0x24f00>
   3737c:	mul	r9, r3, r9
   37380:	umull	r0, r1, r3, r9
   37384:	adds	r1, r1, #0
   37388:	movne	r1, #1
   3738c:	cmp	r1, #0
   37390:	bne	374f4 <__assert_fail@plt+0x24f00>
   37394:	mul	r9, r3, r9
   37398:	umull	r0, r1, r3, r9
   3739c:	adds	r1, r1, #0
   373a0:	movne	r1, #1
   373a4:	cmp	r1, #0
   373a8:	bne	374f4 <__assert_fail@plt+0x24f00>
   373ac:	mul	r9, r3, r9
   373b0:	umull	r0, r1, r3, r9
   373b4:	adds	r1, r1, #0
   373b8:	movne	r1, #1
   373bc:	cmp	r1, #0
   373c0:	bne	374f4 <__assert_fail@plt+0x24f00>
   373c4:	mul	r9, r9, r3
   373c8:	umull	r0, r1, r3, r9
   373cc:	adds	r1, r1, #0
   373d0:	movne	r1, #1
   373d4:	cmp	r1, #0
   373d8:	muleq	r9, r9, r3
   373dc:	bne	374f4 <__assert_fail@plt+0x24f00>
   373e0:	orr	r4, r4, r1
   373e4:	add	r3, sl, r2
   373e8:	str	r3, [r6]
   373ec:	ldrb	r3, [sl, r2]
   373f0:	cmp	r3, #0
   373f4:	beq	36fec <__assert_fail@plt+0x249f8>
   373f8:	orr	r4, r4, #2
   373fc:	b	36fec <__assert_fail@plt+0x249f8>
   37400:	mov	r2, #1
   37404:	mov	r3, #1024	; 0x400
   37408:	umull	r0, r1, r3, r9
   3740c:	cmp	r1, #0
   37410:	bne	37494 <__assert_fail@plt+0x24ea0>
   37414:	mul	r9, r3, r9
   37418:	b	373e4 <__assert_fail@plt+0x24df0>
   3741c:	mov	r0, r3
   37420:	mov	r1, r5
   37424:	bl	1230c <strchr@plt>
   37428:	cmp	r0, #0
   3742c:	bne	3705c <__assert_fail@plt+0x24a68>
   37430:	b	373f8 <__assert_fail@plt+0x24e04>
   37434:	ldrb	r2, [sl, #2]
   37438:	mov	r3, #1024	; 0x400
   3743c:	cmp	r2, #66	; 0x42
   37440:	movne	r2, #1
   37444:	moveq	r2, #3
   37448:	b	37230 <__assert_fail@plt+0x24c3c>
   3744c:	cmp	r9, #0
   37450:	blt	37494 <__assert_fail@plt+0x24ea0>
   37454:	lsl	r9, r9, #1
   37458:	b	373e4 <__assert_fail@plt+0x24df0>
   3745c:	mov	r2, #1
   37460:	lsrs	r3, r9, #23
   37464:	bne	37494 <__assert_fail@plt+0x24ea0>
   37468:	lsl	r9, r9, #9
   3746c:	b	373e4 <__assert_fail@plt+0x24df0>
   37470:	mov	r2, #1
   37474:	mov	r3, #1024	; 0x400
   37478:	umull	r0, r1, r3, r9
   3747c:	cmp	r1, #0
   37480:	bne	37494 <__assert_fail@plt+0x24ea0>
   37484:	mul	r9, r9, r3
   37488:	umull	r0, r1, r3, r9
   3748c:	cmp	r1, #0
   37490:	beq	37414 <__assert_fail@plt+0x24e20>
   37494:	mov	r4, #1
   37498:	mvn	r9, #0
   3749c:	b	373e4 <__assert_fail@plt+0x24df0>
   374a0:	lsrs	r3, r9, #22
   374a4:	bne	37494 <__assert_fail@plt+0x24ea0>
   374a8:	lsl	r9, r9, #10
   374ac:	b	373e4 <__assert_fail@plt+0x24df0>
   374b0:	mov	r2, #1
   374b4:	mov	r3, #1024	; 0x400
   374b8:	b	37338 <__assert_fail@plt+0x24d44>
   374bc:	mov	r2, #1
   374c0:	mov	r3, #1024	; 0x400
   374c4:	b	37380 <__assert_fail@plt+0x24d8c>
   374c8:	mov	r2, #1
   374cc:	mov	r3, #1024	; 0x400
   374d0:	b	37368 <__assert_fail@plt+0x24d74>
   374d4:	mov	r2, #1
   374d8:	mov	r3, #1024	; 0x400
   374dc:	b	37398 <__assert_fail@plt+0x24da4>
   374e0:	mov	r2, #1
   374e4:	mov	r3, #1024	; 0x400
   374e8:	b	37350 <__assert_fail@plt+0x24d5c>
   374ec:	mov	r2, #1
   374f0:	b	373e4 <__assert_fail@plt+0x24df0>
   374f4:	mvn	r9, #0
   374f8:	b	373e0 <__assert_fail@plt+0x24dec>
   374fc:	mov	r3, #1000	; 0x3e8
   37500:	mov	r2, #2
   37504:	b	37230 <__assert_fail@plt+0x24c3c>
   37508:	movw	r3, #25072	; 0x61f0
   3750c:	movt	r3, #5
   37510:	movw	r1, #25084	; 0x61fc
   37514:	movt	r1, #5
   37518:	movw	r0, #25096	; 0x6208
   3751c:	movt	r0, #5
   37520:	mov	r2, #84	; 0x54
   37524:	bl	125f4 <__assert_fail@plt>
   37528:	cmp	r2, #36	; 0x24
   3752c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   37530:	strd	r6, [sp, #8]
   37534:	strd	r8, [sp, #16]
   37538:	strd	sl, [sp, #24]
   3753c:	str	lr, [sp, #32]
   37540:	sub	sp, sp, #28
   37544:	bhi	38440 <__assert_fail@plt+0x25e4c>
   37548:	cmp	r1, #0
   3754c:	mov	r6, r2
   37550:	mov	r5, r1
   37554:	mov	sl, r0
   37558:	addeq	r5, sp, #20
   3755c:	mov	r9, r3
   37560:	bl	12348 <__errno_location@plt>
   37564:	mov	r3, #0
   37568:	mov	fp, r0
   3756c:	str	r3, [r0]
   37570:	ldrb	r4, [sl]
   37574:	bl	122b8 <__ctype_b_loc@plt>
   37578:	ldr	r2, [r0]
   3757c:	lsl	r3, r4, #1
   37580:	ldrh	r3, [r2, r3]
   37584:	tst	r3, #8192	; 0x2000
   37588:	beq	375a4 <__assert_fail@plt+0x24fb0>
   3758c:	mov	r3, sl
   37590:	ldrb	r4, [r3, #1]!
   37594:	lsl	r1, r4, #1
   37598:	ldrh	r1, [r2, r1]
   3759c:	tst	r1, #8192	; 0x2000
   375a0:	bne	37590 <__assert_fail@plt+0x24f9c>
   375a4:	cmp	r4, #45	; 0x2d
   375a8:	beq	37644 <__assert_fail@plt+0x25050>
   375ac:	mov	r2, r6
   375b0:	mov	r3, #0
   375b4:	mov	r1, r5
   375b8:	mov	r0, sl
   375bc:	bl	12048 <__strtoull_internal@plt>
   375c0:	ldr	r8, [r5]
   375c4:	mov	r6, r0
   375c8:	mov	r7, r1
   375cc:	cmp	r8, sl
   375d0:	beq	3762c <__assert_fail@plt+0x25038>
   375d4:	ldr	r4, [fp]
   375d8:	cmp	r4, #0
   375dc:	bne	3761c <__assert_fail@plt+0x25028>
   375e0:	ldr	r3, [sp, #64]	; 0x40
   375e4:	cmp	r3, #0
   375e8:	beq	375f8 <__assert_fail@plt+0x25004>
   375ec:	ldrb	sl, [r8]
   375f0:	cmp	sl, #0
   375f4:	bne	37ab4 <__assert_fail@plt+0x254c0>
   375f8:	strd	r6, [r9]
   375fc:	mov	r0, r4
   37600:	add	sp, sp, #28
   37604:	ldrd	r4, [sp]
   37608:	ldrd	r6, [sp, #8]
   3760c:	ldrd	r8, [sp, #16]
   37610:	ldrd	sl, [sp, #24]
   37614:	add	sp, sp, #32
   37618:	pop	{pc}		; (ldr pc, [sp], #4)
   3761c:	cmp	r4, #34	; 0x22
   37620:	bne	37644 <__assert_fail@plt+0x25050>
   37624:	mov	r4, #1
   37628:	b	375e0 <__assert_fail@plt+0x24fec>
   3762c:	ldr	r3, [sp, #64]	; 0x40
   37630:	cmp	r3, #0
   37634:	beq	37644 <__assert_fail@plt+0x25050>
   37638:	ldrb	sl, [sl]
   3763c:	cmp	sl, #0
   37640:	bne	3764c <__assert_fail@plt+0x25058>
   37644:	mov	r4, #4
   37648:	b	375fc <__assert_fail@plt+0x25008>
   3764c:	mov	r1, sl
   37650:	mov	r0, r3
   37654:	bl	1230c <strchr@plt>
   37658:	cmp	r0, #0
   3765c:	movne	r4, #0
   37660:	movne	r6, #1
   37664:	movne	r7, #0
   37668:	beq	37644 <__assert_fail@plt+0x25050>
   3766c:	sub	fp, sl, #69	; 0x45
   37670:	cmp	fp, #47	; 0x2f
   37674:	ldrls	pc, [pc, fp, lsl #2]
   37678:	b	37838 <__assert_fail@plt+0x25244>
   3767c:	andeq	r7, r3, ip, lsr r7
   37680:	andeq	r7, r3, r8, lsr r8
   37684:	andeq	r7, r3, ip, lsr r7
   37688:	andeq	r7, r3, r8, lsr r8
   3768c:	andeq	r7, r3, r8, lsr r8
   37690:	andeq	r7, r3, r8, lsr r8
   37694:	andeq	r7, r3, ip, lsr r7
   37698:	andeq	r7, r3, r8, lsr r8
   3769c:	andeq	r7, r3, ip, lsr r7
   376a0:	andeq	r7, r3, r8, lsr r8
   376a4:	andeq	r7, r3, r8, lsr r8
   376a8:	andeq	r7, r3, ip, lsr r7
   376ac:	andeq	r7, r3, r8, lsr r8
   376b0:	andeq	r7, r3, r8, lsr r8
   376b4:	andeq	r7, r3, r8, lsr r8
   376b8:	andeq	r7, r3, ip, lsr r7
   376bc:	andeq	r7, r3, r8, lsr r8
   376c0:	andeq	r7, r3, r8, lsr r8
   376c4:	andeq	r7, r3, r8, lsr r8
   376c8:	andeq	r7, r3, r8, lsr r8
   376cc:	andeq	r7, r3, ip, lsr r7
   376d0:	andeq	r7, r3, ip, lsr r7
   376d4:	andeq	r7, r3, r8, lsr r8
   376d8:	andeq	r7, r3, r8, lsr r8
   376dc:	andeq	r7, r3, r8, lsr r8
   376e0:	andeq	r7, r3, r8, lsr r8
   376e4:	andeq	r7, r3, r8, lsr r8
   376e8:	andeq	r7, r3, r8, lsr r8
   376ec:	andeq	r7, r3, r8, lsr r8
   376f0:	andeq	r7, r3, r8, lsr r8
   376f4:	andeq	r7, r3, r8, lsr r8
   376f8:	andeq	r7, r3, r8, lsr r8
   376fc:	andeq	r7, r3, r8, lsr r8
   37700:	andeq	r7, r3, r8, lsr r8
   37704:	andeq	r7, r3, ip, lsr r7
   37708:	andeq	r7, r3, r8, lsr r8
   3770c:	andeq	r7, r3, r8, lsr r8
   37710:	andeq	r7, r3, r8, lsr r8
   37714:	andeq	r7, r3, ip, lsr r7
   37718:	andeq	r7, r3, r8, lsr r8
   3771c:	andeq	r7, r3, ip, lsr r7
   37720:	andeq	r7, r3, r8, lsr r8
   37724:	andeq	r7, r3, r8, lsr r8
   37728:	andeq	r7, r3, r8, lsr r8
   3772c:	andeq	r7, r3, r8, lsr r8
   37730:	andeq	r7, r3, r8, lsr r8
   37734:	andeq	r7, r3, r8, lsr r8
   37738:	andeq	r7, r3, ip, lsr r7
   3773c:	mov	r1, #48	; 0x30
   37740:	ldr	r0, [sp, #64]	; 0x40
   37744:	bl	1230c <strchr@plt>
   37748:	subs	lr, r0, #0
   3774c:	beq	37fbc <__assert_fail@plt+0x259c8>
   37750:	ldrb	r3, [r8, #1]
   37754:	cmp	r3, #68	; 0x44
   37758:	beq	37fcc <__assert_fail@plt+0x259d8>
   3775c:	cmp	r3, #105	; 0x69
   37760:	beq	37adc <__assert_fail@plt+0x254e8>
   37764:	cmp	r3, #66	; 0x42
   37768:	beq	37fcc <__assert_fail@plt+0x259d8>
   3776c:	cmp	fp, #47	; 0x2f
   37770:	ldrls	pc, [pc, fp, lsl #2]
   37774:	b	37a70 <__assert_fail@plt+0x2547c>
   37778:	andeq	r7, r3, ip, ror lr
   3777c:	andeq	r7, r3, r0, ror sl
   37780:	andeq	r7, r3, r4, ror #27
   37784:	andeq	r7, r3, r0, ror sl
   37788:	andeq	r7, r3, r0, ror sl
   3778c:	andeq	r7, r3, r0, ror sl
   37790:	andeq	r7, r3, r8, ror sl
   37794:	andeq	r7, r3, r0, ror sl
   37798:	andeq	r7, r3, ip, ror sp
   3779c:	andeq	r7, r3, r0, ror sl
   377a0:	andeq	r7, r3, r0, ror sl
   377a4:	andeq	r7, r3, r0, asr #25
   377a8:	andeq	r7, r3, r0, ror sl
   377ac:	andeq	r7, r3, r0, ror sl
   377b0:	andeq	r7, r3, r0, ror sl
   377b4:	andeq	r7, r3, r8, lsl #25
   377b8:	andeq	r7, r3, r0, ror sl
   377bc:	andeq	r7, r3, r0, ror sl
   377c0:	andeq	r7, r3, r0, ror sl
   377c4:	andeq	r7, r3, r0, ror sl
   377c8:	andeq	r7, r3, r0, asr #22
   377cc:	andeq	r7, r3, r0, lsr r9
   377d0:	andeq	r7, r3, r0, ror sl
   377d4:	andeq	r7, r3, r0, ror sl
   377d8:	andeq	r7, r3, r0, ror sl
   377dc:	andeq	r7, r3, r0, ror sl
   377e0:	andeq	r7, r3, r0, ror sl
   377e4:	andeq	r7, r3, r0, ror sl
   377e8:	andeq	r7, r3, r0, ror sl
   377ec:	andeq	r7, r3, r4, lsl fp
   377f0:	andeq	r7, r3, r0, lsr #31
   377f4:	andeq	r7, r3, r0, ror sl
   377f8:	andeq	r7, r3, r0, ror sl
   377fc:	andeq	r7, r3, r0, ror sl
   37800:	andeq	r7, r3, r4, ror #27
   37804:	andeq	r7, r3, r0, ror sl
   37808:	andeq	r7, r3, r0, ror sl
   3780c:	andeq	r7, r3, r0, ror sl
   37810:	andeq	r7, r3, r8, ror sl
   37814:	andeq	r7, r3, r0, ror sl
   37818:	andeq	r7, r3, ip, ror sp
   3781c:	andeq	r7, r3, r0, ror sl
   37820:	andeq	r7, r3, r0, ror sl
   37824:	andeq	r7, r3, r0, ror sl
   37828:	andeq	r7, r3, r0, ror sl
   3782c:	andeq	r7, r3, r0, ror sl
   37830:	andeq	r7, r3, r0, ror sl
   37834:	andeq	r7, r3, r8, lsl #25
   37838:	mov	r3, #1
   3783c:	mov	ip, #1024	; 0x400
   37840:	mov	lr, #0
   37844:	str	r3, [sp, #4]
   37848:	sub	sl, sl, #66	; 0x42
   3784c:	cmp	sl, #53	; 0x35
   37850:	ldrls	pc, [pc, sl, lsl #2]
   37854:	b	37a70 <__assert_fail@plt+0x2547c>
   37858:	andeq	r7, r3, ip, ror pc
   3785c:	andeq	r7, r3, r0, ror sl
   37860:	andeq	r7, r3, r0, ror sl
   37864:	andeq	r7, r3, ip, lsl #29
   37868:	andeq	r7, r3, r0, ror sl
   3786c:	strdeq	r7, [r3], -r4
   37870:	andeq	r7, r3, r0, ror sl
   37874:	andeq	r7, r3, r0, ror sl
   37878:	andeq	r7, r3, r0, ror sl
   3787c:	andeq	r7, r3, r8, lsl #21
   37880:	andeq	r7, r3, r0, ror sl
   37884:	andeq	r7, r3, ip, lsl #27
   37888:	andeq	r7, r3, r0, ror sl
   3788c:	andeq	r7, r3, r0, ror sl
   37890:	ldrdeq	r7, [r3], -r0
   37894:	andeq	r7, r3, r0, ror sl
   37898:	andeq	r7, r3, r0, ror sl
   3789c:	andeq	r7, r3, r0, ror sl
   378a0:	muleq	r3, r8, ip
   378a4:	andeq	r7, r3, r0, ror sl
   378a8:	andeq	r7, r3, r0, ror sl
   378ac:	andeq	r7, r3, r0, ror sl
   378b0:	andeq	r7, r3, r0, ror sl
   378b4:	andeq	r7, r3, r0, asr fp
   378b8:	andeq	r7, r3, r0, asr #18
   378bc:	andeq	r7, r3, r0, ror sl
   378c0:	andeq	r7, r3, r0, ror sl
   378c4:	andeq	r7, r3, r0, ror sl
   378c8:	andeq	r7, r3, r0, ror sl
   378cc:	andeq	r7, r3, r0, ror sl
   378d0:	andeq	r7, r3, r0, ror sl
   378d4:	andeq	r7, r3, r0, ror sl
   378d8:	andeq	r7, r3, ip, lsl fp
   378dc:	andeq	r7, r3, r8, asr sl
   378e0:	andeq	r7, r3, r0, ror sl
   378e4:	andeq	r7, r3, r0, ror sl
   378e8:	andeq	r7, r3, r0, ror sl
   378ec:	strdeq	r7, [r3], -r4
   378f0:	andeq	r7, r3, r0, ror sl
   378f4:	andeq	r7, r3, r0, ror sl
   378f8:	andeq	r7, r3, r0, ror sl
   378fc:	andeq	r7, r3, r8, lsl #21
   37900:	andeq	r7, r3, r0, ror sl
   37904:	andeq	r7, r3, ip, lsl #27
   37908:	andeq	r7, r3, r0, ror sl
   3790c:	andeq	r7, r3, r0, ror sl
   37910:	andeq	r7, r3, r0, ror sl
   37914:	andeq	r7, r3, r0, ror sl
   37918:	andeq	r7, r3, r0, ror sl
   3791c:	andeq	r7, r3, r0, ror sl
   37920:	muleq	r3, r8, ip
   37924:	andeq	r7, r3, r0, ror sl
   37928:	andeq	r7, r3, r0, ror sl
   3792c:	strdeq	r7, [r3], -ip
   37930:	mov	r3, #1
   37934:	mov	ip, #1024	; 0x400
   37938:	mov	lr, #0
   3793c:	str	r3, [sp, #4]
   37940:	cmp	r7, #0
   37944:	mov	r0, #0
   37948:	mov	r1, #0
   3794c:	bne	380d8 <__assert_fail@plt+0x25ae4>
   37950:	orrs	r3, r0, r1
   37954:	bne	37fac <__assert_fail@plt+0x259b8>
   37958:	mul	r3, ip, r7
   3795c:	mov	sl, r0
   37960:	mov	fp, r1
   37964:	umull	r0, r1, ip, r6
   37968:	mla	r6, lr, r6, r3
   3796c:	add	r6, r6, r1
   37970:	cmp	r6, #0
   37974:	mov	r1, r6
   37978:	bne	382b8 <__assert_fail@plt+0x25cc4>
   3797c:	orrs	r3, sl, fp
   37980:	bne	37fac <__assert_fail@plt+0x259b8>
   37984:	mul	r3, ip, r1
   37988:	umull	r6, r7, ip, r0
   3798c:	mla	r3, lr, r0, r3
   37990:	add	r1, r3, r7
   37994:	cmp	r1, #0
   37998:	mov	r7, r1
   3799c:	bne	38290 <__assert_fail@plt+0x25c9c>
   379a0:	orrs	r3, sl, fp
   379a4:	bne	37fac <__assert_fail@plt+0x259b8>
   379a8:	mul	r3, ip, r7
   379ac:	umull	r0, r1, ip, r6
   379b0:	mla	r6, lr, r6, r3
   379b4:	add	r6, r6, r1
   379b8:	cmp	r6, #0
   379bc:	mov	r1, r6
   379c0:	bne	381c8 <__assert_fail@plt+0x25bd4>
   379c4:	orrs	r3, sl, fp
   379c8:	bne	37fac <__assert_fail@plt+0x259b8>
   379cc:	mul	r3, ip, r1
   379d0:	umull	r6, r7, ip, r0
   379d4:	mla	r3, lr, r0, r3
   379d8:	add	r1, r3, r7
   379dc:	cmp	r1, #0
   379e0:	mov	r7, r1
   379e4:	bne	381a0 <__assert_fail@plt+0x25bac>
   379e8:	orrs	r3, sl, fp
   379ec:	bne	37fac <__assert_fail@plt+0x259b8>
   379f0:	mul	r3, ip, r7
   379f4:	umull	r0, r1, ip, r6
   379f8:	mla	r6, lr, r6, r3
   379fc:	add	r6, r6, r1
   37a00:	cmp	r6, #0
   37a04:	mov	r1, r6
   37a08:	bne	37d54 <__assert_fail@plt+0x25760>
   37a0c:	orrs	r3, sl, fp
   37a10:	bne	37fac <__assert_fail@plt+0x259b8>
   37a14:	mul	r3, ip, r1
   37a18:	strd	sl, [sp, #8]
   37a1c:	umull	sl, fp, ip, r0
   37a20:	mla	r3, lr, r0, r3
   37a24:	add	r6, r3, fp
   37a28:	cmp	r6, #0
   37a2c:	mov	fp, r6
   37a30:	bne	38000 <__assert_fail@plt+0x25a0c>
   37a34:	ldrd	r2, [sp, #8]
   37a38:	orrs	r3, r2, r3
   37a3c:	bne	37fac <__assert_fail@plt+0x259b8>
   37a40:	mul	r2, ip, fp
   37a44:	mov	r3, #0
   37a48:	umull	r6, r7, ip, sl
   37a4c:	mla	lr, lr, sl, r2
   37a50:	add	r7, lr, r7
   37a54:	orr	r4, r4, r3
   37a58:	ldr	r2, [sp, #4]
   37a5c:	add	r3, r8, r2
   37a60:	str	r3, [r5]
   37a64:	ldrb	r3, [r8, r2]
   37a68:	cmp	r3, #0
   37a6c:	beq	375f8 <__assert_fail@plt+0x25004>
   37a70:	orr	r4, r4, #2
   37a74:	b	375f8 <__assert_fail@plt+0x25004>
   37a78:	mov	r3, #1
   37a7c:	mov	ip, #1024	; 0x400
   37a80:	mov	lr, #0
   37a84:	str	r3, [sp, #4]
   37a88:	cmp	r7, #0
   37a8c:	mov	r2, #0
   37a90:	mov	r3, #0
   37a94:	bne	37fe0 <__assert_fail@plt+0x259ec>
   37a98:	orrs	r3, r2, r3
   37a9c:	bne	37acc <__assert_fail@plt+0x254d8>
   37aa0:	mul	r3, r6, lr
   37aa4:	mla	r3, ip, r7, r3
   37aa8:	umull	r6, r7, r6, ip
   37aac:	add	r7, r3, r7
   37ab0:	b	37a58 <__assert_fail@plt+0x25464>
   37ab4:	mov	r0, r3
   37ab8:	mov	r1, sl
   37abc:	bl	1230c <strchr@plt>
   37ac0:	cmp	r0, #0
   37ac4:	bne	3766c <__assert_fail@plt+0x25078>
   37ac8:	b	37a70 <__assert_fail@plt+0x2547c>
   37acc:	mov	r4, #1
   37ad0:	mvn	r6, #0
   37ad4:	mvn	r7, #0
   37ad8:	b	37a58 <__assert_fail@plt+0x25464>
   37adc:	ldrb	r3, [r8, #2]
   37ae0:	mov	ip, #1024	; 0x400
   37ae4:	mov	lr, #0
   37ae8:	cmp	r3, #66	; 0x42
   37aec:	movne	r3, #1
   37af0:	moveq	r3, #3
   37af4:	str	r3, [sp, #4]
   37af8:	b	37848 <__assert_fail@plt+0x25254>
   37afc:	lsr	r3, r7, #31
   37b00:	cmp	r3, #0
   37b04:	bne	37acc <__assert_fail@plt+0x254d8>
   37b08:	adds	r6, r6, r6
   37b0c:	adc	r7, r7, r7
   37b10:	b	37a58 <__assert_fail@plt+0x25464>
   37b14:	mov	r3, #1
   37b18:	str	r3, [sp, #4]
   37b1c:	lsr	r3, r7, #23
   37b20:	cmp	r3, #0
   37b24:	bne	37acc <__assert_fail@plt+0x254d8>
   37b28:	lsl	r3, r7, #9
   37b2c:	lsl	r2, r6, #9
   37b30:	orr	r3, r3, r6, lsr #23
   37b34:	mov	r6, r2
   37b38:	mov	r7, r3
   37b3c:	b	37a58 <__assert_fail@plt+0x25464>
   37b40:	mov	r3, #1
   37b44:	mov	ip, #1024	; 0x400
   37b48:	mov	lr, #0
   37b4c:	str	r3, [sp, #4]
   37b50:	cmp	r7, #0
   37b54:	mov	r0, #0
   37b58:	mov	r1, #0
   37b5c:	bne	380f8 <__assert_fail@plt+0x25b04>
   37b60:	orrs	r3, r0, r1
   37b64:	bne	37fac <__assert_fail@plt+0x259b8>
   37b68:	mul	r3, ip, r7
   37b6c:	mov	sl, r0
   37b70:	mov	fp, r1
   37b74:	umull	r0, r1, ip, r6
   37b78:	mla	r6, lr, r6, r3
   37b7c:	add	r6, r6, r1
   37b80:	cmp	r6, #0
   37b84:	mov	r1, r6
   37b88:	bne	38218 <__assert_fail@plt+0x25c24>
   37b8c:	orrs	r3, sl, fp
   37b90:	bne	37fac <__assert_fail@plt+0x259b8>
   37b94:	mul	r3, ip, r1
   37b98:	umull	r6, r7, ip, r0
   37b9c:	mla	r3, lr, r0, r3
   37ba0:	add	r1, r3, r7
   37ba4:	cmp	r1, #0
   37ba8:	mov	r7, r1
   37bac:	bne	38268 <__assert_fail@plt+0x25c74>
   37bb0:	orrs	r3, sl, fp
   37bb4:	bne	37fac <__assert_fail@plt+0x259b8>
   37bb8:	mul	r3, ip, r7
   37bbc:	umull	r0, r1, ip, r6
   37bc0:	mla	r6, lr, r6, r3
   37bc4:	add	r6, r6, r1
   37bc8:	cmp	r6, #0
   37bcc:	mov	r1, r6
   37bd0:	bne	38240 <__assert_fail@plt+0x25c4c>
   37bd4:	orrs	r3, sl, fp
   37bd8:	bne	37fac <__assert_fail@plt+0x259b8>
   37bdc:	mul	r3, ip, r1
   37be0:	umull	r6, r7, ip, r0
   37be4:	mla	r3, lr, r0, r3
   37be8:	add	r1, r3, r7
   37bec:	cmp	r1, #0
   37bf0:	mov	r7, r1
   37bf4:	bne	383d0 <__assert_fail@plt+0x25ddc>
   37bf8:	orrs	r3, sl, fp
   37bfc:	bne	37fac <__assert_fail@plt+0x259b8>
   37c00:	mul	r3, ip, r7
   37c04:	umull	r0, r1, ip, r6
   37c08:	mla	r6, lr, r6, r3
   37c0c:	add	r6, r6, r1
   37c10:	cmp	r6, #0
   37c14:	mov	r1, r6
   37c18:	bne	38070 <__assert_fail@plt+0x25a7c>
   37c1c:	orrs	r3, sl, fp
   37c20:	bne	37fac <__assert_fail@plt+0x259b8>
   37c24:	mul	r3, ip, r1
   37c28:	umull	r6, r7, ip, r0
   37c2c:	mla	r3, lr, r0, r3
   37c30:	add	r1, r3, r7
   37c34:	cmp	r1, #0
   37c38:	mov	r7, r1
   37c3c:	bne	38048 <__assert_fail@plt+0x25a54>
   37c40:	orrs	r3, sl, fp
   37c44:	bne	37fac <__assert_fail@plt+0x259b8>
   37c48:	mul	r3, ip, r7
   37c4c:	umull	r0, r1, ip, r6
   37c50:	mla	r3, lr, r6, r3
   37c54:	add	r3, r3, r1
   37c58:	cmp	r3, #0
   37c5c:	mov	r1, r3
   37c60:	str	r3, [sp, #8]
   37c64:	bne	38028 <__assert_fail@plt+0x25a34>
   37c68:	orrs	r3, sl, fp
   37c6c:	bne	37fac <__assert_fail@plt+0x259b8>
   37c70:	mul	r2, ip, r1
   37c74:	mov	r3, #0
   37c78:	umull	r6, r7, ip, r0
   37c7c:	mla	r0, lr, r0, r2
   37c80:	add	r7, r0, r7
   37c84:	b	37a54 <__assert_fail@plt+0x25460>
   37c88:	mov	r3, #1
   37c8c:	mov	ip, #1024	; 0x400
   37c90:	mov	lr, #0
   37c94:	str	r3, [sp, #4]
   37c98:	cmp	r7, #0
   37c9c:	mov	r0, #0
   37ca0:	mov	r1, #0
   37ca4:	bne	38158 <__assert_fail@plt+0x25b64>
   37ca8:	orrs	r3, r0, r1
   37cac:	bne	37fac <__assert_fail@plt+0x259b8>
   37cb0:	mul	r3, ip, r7
   37cb4:	mov	sl, r0
   37cb8:	mov	fp, r1
   37cbc:	b	37c04 <__assert_fail@plt+0x25610>
   37cc0:	mov	r3, #1
   37cc4:	mov	ip, #1024	; 0x400
   37cc8:	mov	lr, #0
   37ccc:	str	r3, [sp, #4]
   37cd0:	cmp	r7, #0
   37cd4:	mov	r0, #0
   37cd8:	mov	r1, #0
   37cdc:	bne	38138 <__assert_fail@plt+0x25b44>
   37ce0:	orrs	r3, r0, r1
   37ce4:	bne	37fac <__assert_fail@plt+0x259b8>
   37ce8:	mul	r3, ip, r7
   37cec:	mov	sl, r0
   37cf0:	mov	fp, r1
   37cf4:	umull	r0, r1, ip, r6
   37cf8:	mla	r6, lr, r6, r3
   37cfc:	add	r6, r6, r1
   37d00:	cmp	r6, #0
   37d04:	mov	r1, r6
   37d08:	bne	38308 <__assert_fail@plt+0x25d14>
   37d0c:	orrs	r3, sl, fp
   37d10:	bne	37fac <__assert_fail@plt+0x259b8>
   37d14:	mul	r3, r0, lr
   37d18:	umull	r6, r7, r0, ip
   37d1c:	mla	r3, ip, r1, r3
   37d20:	add	r1, r3, r7
   37d24:	cmp	r1, #0
   37d28:	mov	r7, r1
   37d2c:	bne	382e0 <__assert_fail@plt+0x25cec>
   37d30:	orrs	r3, sl, fp
   37d34:	bne	37fac <__assert_fail@plt+0x259b8>
   37d38:	mul	r3, r6, lr
   37d3c:	umull	r0, r1, r6, ip
   37d40:	mla	r3, ip, r7, r3
   37d44:	add	r6, r3, r1
   37d48:	cmp	r6, #0
   37d4c:	mov	r1, r6
   37d50:	beq	37a0c <__assert_fail@plt+0x25418>
   37d54:	umull	r2, r3, r0, ip
   37d58:	str	r3, [sp, #8]
   37d5c:	mov	r3, #0
   37d60:	str	r3, [sp, #12]
   37d64:	ldrd	r2, [sp, #8]
   37d68:	umlal	r2, r3, r6, ip
   37d6c:	cmp	r3, #0
   37d70:	movne	sl, #1
   37d74:	movne	fp, #0
   37d78:	b	37a0c <__assert_fail@plt+0x25418>
   37d7c:	mov	r3, #1
   37d80:	mov	ip, #1024	; 0x400
   37d84:	mov	lr, #0
   37d88:	str	r3, [sp, #4]
   37d8c:	cmp	r7, #0
   37d90:	mov	r0, #0
   37d94:	mov	r1, #0
   37d98:	bne	38118 <__assert_fail@plt+0x25b24>
   37d9c:	orrs	r3, r0, r1
   37da0:	bne	37acc <__assert_fail@plt+0x254d8>
   37da4:	mul	r3, ip, r7
   37da8:	strd	r0, [sp, #8]
   37dac:	umull	r0, r1, ip, r6
   37db0:	mla	r3, lr, r6, r3
   37db4:	add	sl, r3, r1
   37db8:	cmp	sl, #0
   37dbc:	mov	r1, sl
   37dc0:	bne	38178 <__assert_fail@plt+0x25b84>
   37dc4:	ldrd	r2, [sp, #8]
   37dc8:	orrs	r3, r2, r3
   37dcc:	bne	37acc <__assert_fail@plt+0x254d8>
   37dd0:	mul	lr, r0, lr
   37dd4:	umull	r6, r7, r0, ip
   37dd8:	mla	ip, ip, r1, lr
   37ddc:	add	r7, ip, r7
   37de0:	b	37a58 <__assert_fail@plt+0x25464>
   37de4:	mov	r3, #1
   37de8:	mov	ip, #1024	; 0x400
   37dec:	mov	lr, #0
   37df0:	str	r3, [sp, #4]
   37df4:	cmp	r7, #0
   37df8:	mov	r0, #0
   37dfc:	mov	r1, #0
   37e00:	bne	38098 <__assert_fail@plt+0x25aa4>
   37e04:	orrs	r3, r0, r1
   37e08:	bne	37fac <__assert_fail@plt+0x259b8>
   37e0c:	mul	r3, ip, r7
   37e10:	mov	sl, r0
   37e14:	mov	fp, r1
   37e18:	umull	r0, r1, ip, r6
   37e1c:	mla	r6, lr, r6, r3
   37e20:	add	r6, r6, r1
   37e24:	cmp	r6, #0
   37e28:	mov	r1, r6
   37e2c:	bne	38330 <__assert_fail@plt+0x25d3c>
   37e30:	orrs	r3, sl, fp
   37e34:	bne	37fac <__assert_fail@plt+0x259b8>
   37e38:	mul	r3, r0, lr
   37e3c:	strd	sl, [sp, #8]
   37e40:	umull	sl, fp, r0, ip
   37e44:	mla	r3, ip, r1, r3
   37e48:	add	r6, r3, fp
   37e4c:	cmp	r6, #0
   37e50:	mov	fp, r6
   37e54:	bne	381f0 <__assert_fail@plt+0x25bfc>
   37e58:	ldrd	r2, [sp, #8]
   37e5c:	orrs	r3, r2, r3
   37e60:	bne	37fac <__assert_fail@plt+0x259b8>
   37e64:	mul	lr, sl, lr
   37e68:	mov	r3, #0
   37e6c:	umull	r6, r7, sl, ip
   37e70:	mla	ip, ip, fp, lr
   37e74:	add	r7, ip, r7
   37e78:	b	37a54 <__assert_fail@plt+0x25460>
   37e7c:	mov	r3, #1
   37e80:	mov	ip, #1024	; 0x400
   37e84:	mov	lr, #0
   37e88:	str	r3, [sp, #4]
   37e8c:	cmp	r7, #0
   37e90:	mov	r0, #0
   37e94:	mov	r1, #0
   37e98:	bne	380b8 <__assert_fail@plt+0x25ac4>
   37e9c:	orrs	r3, r0, r1
   37ea0:	bne	37fac <__assert_fail@plt+0x259b8>
   37ea4:	mul	r3, ip, r7
   37ea8:	mov	sl, r0
   37eac:	mov	fp, r1
   37eb0:	umull	r0, r1, ip, r6
   37eb4:	mla	r6, lr, r6, r3
   37eb8:	add	r6, r6, r1
   37ebc:	cmp	r6, #0
   37ec0:	mov	r1, r6
   37ec4:	bne	38358 <__assert_fail@plt+0x25d64>
   37ec8:	orrs	r3, sl, fp
   37ecc:	bne	37fac <__assert_fail@plt+0x259b8>
   37ed0:	mul	r3, r0, lr
   37ed4:	umull	r6, r7, r0, ip
   37ed8:	mla	r3, ip, r1, r3
   37edc:	add	r1, r3, r7
   37ee0:	cmp	r1, #0
   37ee4:	mov	r7, r1
   37ee8:	bne	383a8 <__assert_fail@plt+0x25db4>
   37eec:	orrs	r3, sl, fp
   37ef0:	bne	37fac <__assert_fail@plt+0x259b8>
   37ef4:	mul	r3, r6, lr
   37ef8:	umull	r0, r1, r6, ip
   37efc:	mla	r3, ip, r7, r3
   37f00:	add	r6, r3, r1
   37f04:	cmp	r6, #0
   37f08:	mov	r1, r6
   37f0c:	bne	38380 <__assert_fail@plt+0x25d8c>
   37f10:	orrs	r3, sl, fp
   37f14:	bne	37fac <__assert_fail@plt+0x259b8>
   37f18:	mul	r3, r0, lr
   37f1c:	umull	r6, r7, r0, ip
   37f20:	mla	r3, ip, r1, r3
   37f24:	add	r1, r3, r7
   37f28:	cmp	r1, #0
   37f2c:	mov	r7, r1
   37f30:	bne	38418 <__assert_fail@plt+0x25e24>
   37f34:	orrs	r3, sl, fp
   37f38:	bne	37fac <__assert_fail@plt+0x259b8>
   37f3c:	mul	r3, ip, r7
   37f40:	umull	r0, r1, ip, r6
   37f44:	mla	r3, lr, r6, r3
   37f48:	add	r3, r3, r1
   37f4c:	cmp	r3, #0
   37f50:	mov	r1, r3
   37f54:	str	r3, [sp, #8]
   37f58:	bne	383f8 <__assert_fail@plt+0x25e04>
   37f5c:	orrs	r3, sl, fp
   37f60:	bne	37fac <__assert_fail@plt+0x259b8>
   37f64:	mul	lr, r0, lr
   37f68:	mov	r3, #0
   37f6c:	umull	r6, r7, r0, ip
   37f70:	mla	ip, ip, r1, lr
   37f74:	add	r7, ip, r7
   37f78:	b	37a54 <__assert_fail@plt+0x25460>
   37f7c:	lsr	r3, r7, #22
   37f80:	cmp	r3, #0
   37f84:	bne	37acc <__assert_fail@plt+0x254d8>
   37f88:	lsl	r3, r7, #10
   37f8c:	lsl	r2, r6, #10
   37f90:	orr	r3, r3, r6, lsr #22
   37f94:	mov	r6, r2
   37f98:	mov	r7, r3
   37f9c:	b	37a58 <__assert_fail@plt+0x25464>
   37fa0:	mov	r3, #1
   37fa4:	str	r3, [sp, #4]
   37fa8:	b	37a58 <__assert_fail@plt+0x25464>
   37fac:	mov	r3, #1
   37fb0:	mvn	r6, #0
   37fb4:	mvn	r7, #0
   37fb8:	b	37a54 <__assert_fail@plt+0x25460>
   37fbc:	mov	r3, #1
   37fc0:	mov	ip, #1024	; 0x400
   37fc4:	str	r3, [sp, #4]
   37fc8:	b	37848 <__assert_fail@plt+0x25254>
   37fcc:	mov	r3, #2
   37fd0:	mov	ip, #1000	; 0x3e8
   37fd4:	mov	lr, #0
   37fd8:	str	r3, [sp, #4]
   37fdc:	b	37848 <__assert_fail@plt+0x25254>
   37fe0:	umull	r0, r1, r6, ip
   37fe4:	mov	fp, #0
   37fe8:	mov	sl, r1
   37fec:	umlal	sl, fp, r7, ip
   37ff0:	cmp	fp, #0
   37ff4:	movne	r2, #1
   37ff8:	movne	r3, #0
   37ffc:	b	37a98 <__assert_fail@plt+0x254a4>
   38000:	umull	r2, r3, sl, ip
   38004:	mov	r1, #0
   38008:	mov	r0, r3
   3800c:	umlal	r0, r1, r6, ip
   38010:	cmp	r1, #0
   38014:	beq	37a34 <__assert_fail@plt+0x25440>
   38018:	mov	r2, #1
   3801c:	mov	r3, #0
   38020:	strd	r2, [sp, #8]
   38024:	b	37a34 <__assert_fail@plt+0x25440>
   38028:	umull	r2, r3, r0, ip
   3802c:	mov	r7, #0
   38030:	mov	r6, r3
   38034:	umlal	r6, r7, r1, ip
   38038:	cmp	r7, #0
   3803c:	movne	sl, #1
   38040:	movne	fp, #0
   38044:	b	37c68 <__assert_fail@plt+0x25674>
   38048:	umull	r2, r3, r6, ip
   3804c:	str	r3, [sp, #8]
   38050:	mov	r3, #0
   38054:	str	r3, [sp, #12]
   38058:	ldrd	r2, [sp, #8]
   3805c:	umlal	r2, r3, r1, ip
   38060:	cmp	r3, #0
   38064:	movne	sl, #1
   38068:	movne	fp, #0
   3806c:	b	37c40 <__assert_fail@plt+0x2564c>
   38070:	umull	r2, r3, r0, ip
   38074:	str	r3, [sp, #8]
   38078:	mov	r3, #0
   3807c:	str	r3, [sp, #12]
   38080:	ldrd	r2, [sp, #8]
   38084:	umlal	r2, r3, r6, ip
   38088:	cmp	r3, #0
   3808c:	movne	sl, #1
   38090:	movne	fp, #0
   38094:	b	37c1c <__assert_fail@plt+0x25628>
   38098:	umull	r2, r3, r6, ip
   3809c:	mov	fp, #0
   380a0:	mov	sl, r3
   380a4:	umlal	sl, fp, r7, ip
   380a8:	cmp	fp, #0
   380ac:	movne	r0, #1
   380b0:	movne	r1, #0
   380b4:	b	37e04 <__assert_fail@plt+0x25810>
   380b8:	umull	r2, r3, r6, ip
   380bc:	mov	fp, #0
   380c0:	mov	sl, r3
   380c4:	umlal	sl, fp, r7, ip
   380c8:	cmp	fp, #0
   380cc:	movne	r0, #1
   380d0:	movne	r1, #0
   380d4:	b	37e9c <__assert_fail@plt+0x258a8>
   380d8:	umull	r2, r3, r6, ip
   380dc:	mov	fp, #0
   380e0:	mov	sl, r3
   380e4:	umlal	sl, fp, r7, ip
   380e8:	cmp	fp, #0
   380ec:	movne	r0, #1
   380f0:	movne	r1, #0
   380f4:	b	37950 <__assert_fail@plt+0x2535c>
   380f8:	umull	r2, r3, r6, ip
   380fc:	mov	fp, #0
   38100:	mov	sl, r3
   38104:	umlal	sl, fp, r7, ip
   38108:	cmp	fp, #0
   3810c:	movne	r0, #1
   38110:	movne	r1, #0
   38114:	b	37b60 <__assert_fail@plt+0x2556c>
   38118:	umull	r2, r3, r6, ip
   3811c:	mov	fp, #0
   38120:	mov	sl, r3
   38124:	umlal	sl, fp, r7, ip
   38128:	cmp	fp, #0
   3812c:	movne	r0, #1
   38130:	movne	r1, #0
   38134:	b	37d9c <__assert_fail@plt+0x257a8>
   38138:	umull	r2, r3, r6, ip
   3813c:	mov	fp, #0
   38140:	mov	sl, r3
   38144:	umlal	sl, fp, r7, ip
   38148:	cmp	fp, #0
   3814c:	movne	r0, #1
   38150:	movne	r1, #0
   38154:	b	37ce0 <__assert_fail@plt+0x256ec>
   38158:	umull	r2, r3, r6, ip
   3815c:	mov	fp, #0
   38160:	mov	sl, r3
   38164:	umlal	sl, fp, r7, ip
   38168:	cmp	fp, #0
   3816c:	movne	r0, #1
   38170:	movne	r1, #0
   38174:	b	37ca8 <__assert_fail@plt+0x256b4>
   38178:	umull	r2, r3, r0, ip
   3817c:	mov	r7, #0
   38180:	mov	r6, r3
   38184:	umlal	r6, r7, sl, ip
   38188:	cmp	r7, #0
   3818c:	beq	37dc4 <__assert_fail@plt+0x257d0>
   38190:	mov	r2, #1
   38194:	mov	r3, #0
   38198:	strd	r2, [sp, #8]
   3819c:	b	37dc4 <__assert_fail@plt+0x257d0>
   381a0:	umull	r2, r3, r6, ip
   381a4:	str	r3, [sp, #8]
   381a8:	mov	r3, #0
   381ac:	str	r3, [sp, #12]
   381b0:	ldrd	r2, [sp, #8]
   381b4:	umlal	r2, r3, r1, ip
   381b8:	cmp	r3, #0
   381bc:	movne	sl, #1
   381c0:	movne	fp, #0
   381c4:	b	379e8 <__assert_fail@plt+0x253f4>
   381c8:	umull	r2, r3, r0, ip
   381cc:	str	r3, [sp, #8]
   381d0:	mov	r3, #0
   381d4:	str	r3, [sp, #12]
   381d8:	ldrd	r2, [sp, #8]
   381dc:	umlal	r2, r3, r6, ip
   381e0:	cmp	r3, #0
   381e4:	movne	sl, #1
   381e8:	movne	fp, #0
   381ec:	b	379c4 <__assert_fail@plt+0x253d0>
   381f0:	umull	r2, r3, sl, ip
   381f4:	mov	r1, #0
   381f8:	mov	r0, r3
   381fc:	umlal	r0, r1, r6, ip
   38200:	cmp	r1, #0
   38204:	beq	37e58 <__assert_fail@plt+0x25864>
   38208:	mov	r2, #1
   3820c:	mov	r3, #0
   38210:	strd	r2, [sp, #8]
   38214:	b	37e58 <__assert_fail@plt+0x25864>
   38218:	umull	r2, r3, r0, ip
   3821c:	str	r3, [sp, #8]
   38220:	mov	r3, #0
   38224:	str	r3, [sp, #12]
   38228:	ldrd	r2, [sp, #8]
   3822c:	umlal	r2, r3, r6, ip
   38230:	cmp	r3, #0
   38234:	movne	sl, #1
   38238:	movne	fp, #0
   3823c:	b	37b8c <__assert_fail@plt+0x25598>
   38240:	umull	r2, r3, r0, ip
   38244:	str	r3, [sp, #8]
   38248:	mov	r3, #0
   3824c:	str	r3, [sp, #12]
   38250:	ldrd	r2, [sp, #8]
   38254:	umlal	r2, r3, r6, ip
   38258:	cmp	r3, #0
   3825c:	movne	sl, #1
   38260:	movne	fp, #0
   38264:	b	37bd4 <__assert_fail@plt+0x255e0>
   38268:	umull	r2, r3, r6, ip
   3826c:	str	r3, [sp, #8]
   38270:	mov	r3, #0
   38274:	str	r3, [sp, #12]
   38278:	ldrd	r2, [sp, #8]
   3827c:	umlal	r2, r3, r1, ip
   38280:	cmp	r3, #0
   38284:	movne	sl, #1
   38288:	movne	fp, #0
   3828c:	b	37bb0 <__assert_fail@plt+0x255bc>
   38290:	umull	r2, r3, r6, ip
   38294:	str	r3, [sp, #8]
   38298:	mov	r3, #0
   3829c:	str	r3, [sp, #12]
   382a0:	ldrd	r2, [sp, #8]
   382a4:	umlal	r2, r3, r1, ip
   382a8:	cmp	r3, #0
   382ac:	movne	sl, #1
   382b0:	movne	fp, #0
   382b4:	b	379a0 <__assert_fail@plt+0x253ac>
   382b8:	umull	r2, r3, r0, ip
   382bc:	str	r3, [sp, #8]
   382c0:	mov	r3, #0
   382c4:	str	r3, [sp, #12]
   382c8:	ldrd	r2, [sp, #8]
   382cc:	umlal	r2, r3, r6, ip
   382d0:	cmp	r3, #0
   382d4:	movne	sl, #1
   382d8:	movne	fp, #0
   382dc:	b	3797c <__assert_fail@plt+0x25388>
   382e0:	umull	r2, r3, r6, ip
   382e4:	str	r3, [sp, #8]
   382e8:	mov	r3, #0
   382ec:	str	r3, [sp, #12]
   382f0:	ldrd	r2, [sp, #8]
   382f4:	umlal	r2, r3, r1, ip
   382f8:	cmp	r3, #0
   382fc:	movne	sl, #1
   38300:	movne	fp, #0
   38304:	b	37d30 <__assert_fail@plt+0x2573c>
   38308:	umull	r2, r3, r0, ip
   3830c:	str	r3, [sp, #8]
   38310:	mov	r3, #0
   38314:	str	r3, [sp, #12]
   38318:	ldrd	r2, [sp, #8]
   3831c:	umlal	r2, r3, r6, ip
   38320:	cmp	r3, #0
   38324:	movne	sl, #1
   38328:	movne	fp, #0
   3832c:	b	37d0c <__assert_fail@plt+0x25718>
   38330:	umull	r2, r3, r0, ip
   38334:	str	r3, [sp, #8]
   38338:	mov	r3, #0
   3833c:	str	r3, [sp, #12]
   38340:	ldrd	r2, [sp, #8]
   38344:	umlal	r2, r3, r6, ip
   38348:	cmp	r3, #0
   3834c:	movne	sl, #1
   38350:	movne	fp, #0
   38354:	b	37e30 <__assert_fail@plt+0x2583c>
   38358:	umull	r2, r3, r0, ip
   3835c:	str	r3, [sp, #8]
   38360:	mov	r3, #0
   38364:	str	r3, [sp, #12]
   38368:	ldrd	r2, [sp, #8]
   3836c:	umlal	r2, r3, r6, ip
   38370:	cmp	r3, #0
   38374:	movne	sl, #1
   38378:	movne	fp, #0
   3837c:	b	37ec8 <__assert_fail@plt+0x258d4>
   38380:	umull	r2, r3, r0, ip
   38384:	str	r3, [sp, #8]
   38388:	mov	r3, #0
   3838c:	str	r3, [sp, #12]
   38390:	ldrd	r2, [sp, #8]
   38394:	umlal	r2, r3, r6, ip
   38398:	cmp	r3, #0
   3839c:	movne	sl, #1
   383a0:	movne	fp, #0
   383a4:	b	37f10 <__assert_fail@plt+0x2591c>
   383a8:	umull	r2, r3, r6, ip
   383ac:	str	r3, [sp, #8]
   383b0:	mov	r3, #0
   383b4:	str	r3, [sp, #12]
   383b8:	ldrd	r2, [sp, #8]
   383bc:	umlal	r2, r3, r1, ip
   383c0:	cmp	r3, #0
   383c4:	movne	sl, #1
   383c8:	movne	fp, #0
   383cc:	b	37eec <__assert_fail@plt+0x258f8>
   383d0:	umull	r2, r3, r6, ip
   383d4:	str	r3, [sp, #8]
   383d8:	mov	r3, #0
   383dc:	str	r3, [sp, #12]
   383e0:	ldrd	r2, [sp, #8]
   383e4:	umlal	r2, r3, r1, ip
   383e8:	cmp	r3, #0
   383ec:	movne	sl, #1
   383f0:	movne	fp, #0
   383f4:	b	37bf8 <__assert_fail@plt+0x25604>
   383f8:	umull	r2, r3, r0, ip
   383fc:	mov	r7, #0
   38400:	mov	r6, r3
   38404:	umlal	r6, r7, r1, ip
   38408:	cmp	r7, #0
   3840c:	movne	sl, #1
   38410:	movne	fp, #0
   38414:	b	37f5c <__assert_fail@plt+0x25968>
   38418:	umull	r2, r3, r6, ip
   3841c:	str	r3, [sp, #8]
   38420:	mov	r3, #0
   38424:	str	r3, [sp, #12]
   38428:	ldrd	r2, [sp, #8]
   3842c:	umlal	r2, r3, r1, ip
   38430:	cmp	r3, #0
   38434:	movne	sl, #1
   38438:	movne	fp, #0
   3843c:	b	37f34 <__assert_fail@plt+0x25940>
   38440:	movw	r3, #25136	; 0x6230
   38444:	movt	r3, #5
   38448:	movw	r1, #25084	; 0x61fc
   3844c:	movt	r1, #5
   38450:	movw	r0, #25096	; 0x6208
   38454:	movt	r0, #5
   38458:	mov	r2, #84	; 0x54
   3845c:	bl	125f4 <__assert_fail@plt>
   38460:	movw	r3, #30032	; 0x7550
   38464:	movt	r3, #6
   38468:	str	r4, [sp, #-8]!
   3846c:	mov	r4, #0
   38470:	ldr	r3, [r3]
   38474:	mov	r2, #10
   38478:	str	lr, [sp, #4]
   3847c:	sub	sp, sp, #8
   38480:	add	r1, sp, #4
   38484:	mov	r0, sp
   38488:	str	r4, [sp]
   3848c:	str	r4, [sp, #4]
   38490:	bl	11f10 <__getdelim@plt>
   38494:	subs	r3, r0, #0
   38498:	ble	384c4 <__assert_fail@plt+0x25ed0>
   3849c:	ldr	r0, [sp]
   384a0:	sub	r3, r3, #1
   384a4:	ldrb	r2, [r0, r3]
   384a8:	cmp	r2, #10
   384ac:	strbeq	r4, [r0, r3]
   384b0:	ldreq	r0, [sp]
   384b4:	bl	12438 <rpmatch@plt>
   384b8:	cmp	r0, #0
   384bc:	movle	r4, #0
   384c0:	movgt	r4, #1
   384c4:	ldr	r0, [sp]
   384c8:	bl	38b10 <__assert_fail@plt+0x2651c>
   384cc:	mov	r0, r4
   384d0:	add	sp, sp, #8
   384d4:	ldr	r4, [sp]
   384d8:	add	sp, sp, #4
   384dc:	pop	{pc}		; (ldr pc, [sp], #4)
   384e0:	cmp	r1, #0
   384e4:	cmpne	r0, #0
   384e8:	beq	38534 <__assert_fail@plt+0x25f40>
   384ec:	strd	r4, [sp, #-16]!
   384f0:	umull	r4, r5, r0, r1
   384f4:	str	r6, [sp, #8]
   384f8:	str	lr, [sp, #12]
   384fc:	adds	r3, r5, #0
   38500:	movne	r3, #1
   38504:	cmp	r4, #0
   38508:	blt	38514 <__assert_fail@plt+0x25f20>
   3850c:	cmp	r3, #0
   38510:	beq	38540 <__assert_fail@plt+0x25f4c>
   38514:	bl	12348 <__errno_location@plt>
   38518:	mov	r3, #12
   3851c:	ldrd	r4, [sp]
   38520:	ldr	r6, [sp, #8]
   38524:	add	sp, sp, #12
   38528:	str	r3, [r0]
   3852c:	mov	r0, #0
   38530:	pop	{pc}		; (ldr pc, [sp], #4)
   38534:	mov	r1, #1
   38538:	mov	r0, r1
   3853c:	b	11ec8 <calloc@plt>
   38540:	ldrd	r4, [sp]
   38544:	ldr	r6, [sp, #8]
   38548:	ldr	lr, [sp, #12]
   3854c:	add	sp, sp, #16
   38550:	b	11ec8 <calloc@plt>
   38554:	movw	r3, #25148	; 0x623c
   38558:	movt	r3, #5
   3855c:	str	r4, [sp, #-8]!
   38560:	movw	r1, #25172	; 0x6254
   38564:	movt	r1, #5
   38568:	str	lr, [sp, #4]
   3856c:	movw	r0, #25188	; 0x6264
   38570:	movt	r0, #5
   38574:	mov	r2, #64	; 0x40
   38578:	bl	125f4 <__assert_fail@plt>
   3857c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   38580:	strd	r6, [sp, #8]
   38584:	mov	r6, r0
   38588:	strd	r8, [sp, #16]
   3858c:	strd	sl, [sp, #24]
   38590:	str	lr, [sp, #32]
   38594:	sub	sp, sp, #4
   38598:	bl	12120 <chdir@plt>
   3859c:	subs	r4, r0, #0
   385a0:	beq	38704 <__assert_fail@plt+0x26110>
   385a4:	bl	12348 <__errno_location@plt>
   385a8:	ldr	r3, [r0]
   385ac:	mov	sl, r0
   385b0:	cmp	r3, #36	; 0x24
   385b4:	bne	38704 <__assert_fail@plt+0x26110>
   385b8:	mov	r0, r6
   385bc:	bl	12300 <strlen@plt>
   385c0:	subs	r7, r0, #0
   385c4:	beq	38854 <__assert_fail@plt+0x26260>
   385c8:	cmp	r7, #4096	; 0x1000
   385cc:	bcc	38870 <__assert_fail@plt+0x2627c>
   385d0:	movw	r1, #26352	; 0x66f0
   385d4:	movt	r1, #5
   385d8:	mov	r0, r6
   385dc:	bl	125e8 <strspn@plt>
   385e0:	cmp	r0, #2
   385e4:	mov	r4, r0
   385e8:	beq	38748 <__assert_fail@plt+0x26154>
   385ec:	cmp	r0, #0
   385f0:	moveq	r4, r6
   385f4:	mvneq	r5, #99	; 0x63
   385f8:	bne	38724 <__assert_fail@plt+0x26130>
   385fc:	ldrb	r3, [r4]
   38600:	cmp	r3, #47	; 0x2f
   38604:	beq	3888c <__assert_fail@plt+0x26298>
   38608:	add	r6, r6, r7
   3860c:	cmp	r4, r6
   38610:	bhi	388a8 <__assert_fail@plt+0x262b4>
   38614:	sub	r3, r6, r4
   38618:	cmp	r3, #4096	; 0x1000
   3861c:	blt	386b4 <__assert_fail@plt+0x260c0>
   38620:	movw	r8, #26352	; 0x66f0
   38624:	movt	r8, #5
   38628:	mov	r9, #47	; 0x2f
   3862c:	b	38654 <__assert_fail@plt+0x26060>
   38630:	mov	r1, r8
   38634:	strb	r9, [fp], #1
   38638:	mov	r0, fp
   3863c:	bl	125e8 <strspn@plt>
   38640:	add	r4, fp, r0
   38644:	mov	r5, r7
   38648:	sub	r3, r6, r4
   3864c:	cmp	r3, #4096	; 0x1000
   38650:	blt	386b8 <__assert_fail@plt+0x260c4>
   38654:	mov	r2, #4096	; 0x1000
   38658:	mov	r1, #47	; 0x2f
   3865c:	mov	r0, r4
   38660:	bl	12330 <memrchr@plt>
   38664:	subs	fp, r0, #0
   38668:	beq	387a4 <__assert_fail@plt+0x261b0>
   3866c:	mov	r3, #0
   38670:	sub	r2, fp, r4
   38674:	cmp	r2, #4096	; 0x1000
   38678:	strb	r3, [fp]
   3867c:	bge	38838 <__assert_fail@plt+0x26244>
   38680:	mov	r1, r4
   38684:	mov	r2, #18688	; 0x4900
   38688:	mov	r0, r5
   3868c:	bl	12324 <openat64@plt>
   38690:	subs	r7, r0, #0
   38694:	blt	387f8 <__assert_fail@plt+0x26204>
   38698:	cmp	r5, #0
   3869c:	blt	38630 <__assert_fail@plt+0x2603c>
   386a0:	mov	r0, r5
   386a4:	bl	125ac <close@plt>
   386a8:	cmp	r0, #0
   386ac:	beq	38630 <__assert_fail@plt+0x2603c>
   386b0:	bl	38554 <__assert_fail@plt+0x25f60>
   386b4:	mov	r7, r5
   386b8:	cmp	r6, r4
   386bc:	bls	387b4 <__assert_fail@plt+0x261c0>
   386c0:	mov	r1, r4
   386c4:	mov	r2, #18688	; 0x4900
   386c8:	mov	r0, r7
   386cc:	bl	12324 <openat64@plt>
   386d0:	subs	r5, r0, #0
   386d4:	blt	387c4 <__assert_fail@plt+0x261d0>
   386d8:	cmp	r7, #0
   386dc:	bge	3881c <__assert_fail@plt+0x26228>
   386e0:	mov	r0, r5
   386e4:	bl	124f8 <fchdir@plt>
   386e8:	cmp	r0, #0
   386ec:	bne	387e0 <__assert_fail@plt+0x261ec>
   386f0:	mov	r0, r5
   386f4:	bl	125ac <close@plt>
   386f8:	cmp	r0, #0
   386fc:	bne	386b0 <__assert_fail@plt+0x260bc>
   38700:	mov	r4, #0
   38704:	mov	r0, r4
   38708:	add	sp, sp, #4
   3870c:	ldrd	r4, [sp]
   38710:	ldrd	r6, [sp, #8]
   38714:	ldrd	r8, [sp, #16]
   38718:	ldrd	sl, [sp, #24]
   3871c:	add	sp, sp, #32
   38720:	pop	{pc}		; (ldr pc, [sp], #4)
   38724:	movw	r1, #26352	; 0x66f0
   38728:	movt	r1, #5
   3872c:	mov	r2, #18688	; 0x4900
   38730:	mvn	r0, #99	; 0x63
   38734:	bl	12324 <openat64@plt>
   38738:	subs	r5, r0, #0
   3873c:	blt	38830 <__assert_fail@plt+0x2623c>
   38740:	add	r4, r6, r4
   38744:	b	385fc <__assert_fail@plt+0x26008>
   38748:	sub	r2, r7, #3
   3874c:	mov	r1, #47	; 0x2f
   38750:	add	r0, r6, #3
   38754:	bl	123d8 <memchr@plt>
   38758:	subs	r4, r0, #0
   3875c:	beq	38804 <__assert_fail@plt+0x26210>
   38760:	mov	r3, #0
   38764:	mov	r2, #18688	; 0x4900
   38768:	mov	r1, r6
   3876c:	mvn	r0, #99	; 0x63
   38770:	strb	r3, [r4]
   38774:	bl	12324 <openat64@plt>
   38778:	subs	r5, r0, #0
   3877c:	mov	r3, #47	; 0x2f
   38780:	strblt	r3, [r4]
   38784:	blt	38830 <__assert_fail@plt+0x2623c>
   38788:	movw	r1, #26352	; 0x66f0
   3878c:	movt	r1, #5
   38790:	strb	r3, [r4], #1
   38794:	mov	r0, r4
   38798:	bl	125e8 <strspn@plt>
   3879c:	add	r4, r4, r0
   387a0:	b	385fc <__assert_fail@plt+0x26008>
   387a4:	mov	r3, #36	; 0x24
   387a8:	mvn	r4, #0
   387ac:	str	r3, [sl]
   387b0:	b	38704 <__assert_fail@plt+0x26110>
   387b4:	mov	r0, r7
   387b8:	bl	124f8 <fchdir@plt>
   387bc:	cmp	r0, #0
   387c0:	beq	3880c <__assert_fail@plt+0x26218>
   387c4:	mov	r5, r7
   387c8:	cmp	r5, #0
   387cc:	ldr	r6, [sl]
   387d0:	bge	387e4 <__assert_fail@plt+0x261f0>
   387d4:	mvn	r4, #0
   387d8:	str	r6, [sl]
   387dc:	b	38704 <__assert_fail@plt+0x26110>
   387e0:	ldr	r6, [sl]
   387e4:	mov	r0, r5
   387e8:	bl	125ac <close@plt>
   387ec:	cmp	r0, #0
   387f0:	beq	387d4 <__assert_fail@plt+0x261e0>
   387f4:	b	386b0 <__assert_fail@plt+0x260bc>
   387f8:	mov	r3, #47	; 0x2f
   387fc:	strb	r3, [fp]
   38800:	b	387c8 <__assert_fail@plt+0x261d4>
   38804:	mvn	r4, #0
   38808:	b	38704 <__assert_fail@plt+0x26110>
   3880c:	cmp	r7, #0
   38810:	blt	38700 <__assert_fail@plt+0x2610c>
   38814:	mov	r5, r7
   38818:	b	386f0 <__assert_fail@plt+0x260fc>
   3881c:	mov	r0, r7
   38820:	bl	125ac <close@plt>
   38824:	cmp	r0, #0
   38828:	beq	386e0 <__assert_fail@plt+0x260ec>
   3882c:	b	386b0 <__assert_fail@plt+0x260bc>
   38830:	ldr	r6, [sl]
   38834:	b	387d4 <__assert_fail@plt+0x261e0>
   38838:	movw	r1, #25172	; 0x6254
   3883c:	movt	r1, #5
   38840:	ldr	r3, [pc, #124]	; 388c4 <__assert_fail@plt+0x262d0>
   38844:	movw	r0, #25252	; 0x62a4
   38848:	movt	r0, #5
   3884c:	mov	r2, #179	; 0xb3
   38850:	bl	125f4 <__assert_fail@plt>
   38854:	movw	r1, #25172	; 0x6254
   38858:	movt	r1, #5
   3885c:	ldr	r3, [pc, #96]	; 388c4 <__assert_fail@plt+0x262d0>
   38860:	movw	r0, #25204	; 0x6274
   38864:	movt	r0, #5
   38868:	mov	r2, #126	; 0x7e
   3886c:	bl	125f4 <__assert_fail@plt>
   38870:	movw	r1, #25172	; 0x6254
   38874:	movt	r1, #5
   38878:	ldr	r3, [pc, #68]	; 388c4 <__assert_fail@plt+0x262d0>
   3887c:	movw	r0, #25212	; 0x627c
   38880:	movt	r0, #5
   38884:	mov	r2, #127	; 0x7f
   38888:	bl	125f4 <__assert_fail@plt>
   3888c:	movw	r1, #25172	; 0x6254
   38890:	movt	r1, #5
   38894:	ldr	r3, [pc, #40]	; 388c4 <__assert_fail@plt+0x262d0>
   38898:	movw	r0, #25224	; 0x6288
   3889c:	movt	r0, #5
   388a0:	mov	r2, #162	; 0xa2
   388a4:	bl	125f4 <__assert_fail@plt>
   388a8:	movw	r1, #25172	; 0x6254
   388ac:	movt	r1, #5
   388b0:	ldr	r3, [pc, #12]	; 388c4 <__assert_fail@plt+0x262d0>
   388b4:	movw	r0, #25236	; 0x6294
   388b8:	movt	r0, #5
   388bc:	mov	r2, #163	; 0xa3
   388c0:	bl	125f4 <__assert_fail@plt>
   388c4:	andeq	r6, r5, r8, asr #4
   388c8:	push	{r1, r2, r3}
   388cc:	strd	r4, [sp, #-20]!	; 0xffffffec
   388d0:	strd	r6, [sp, #8]
   388d4:	str	lr, [sp, #16]
   388d8:	sub	sp, sp, #8
   388dc:	ldr	r1, [sp, #28]
   388e0:	add	r2, sp, #32
   388e4:	str	r2, [sp, #4]
   388e8:	cmp	r1, #0
   388ec:	beq	389c8 <__assert_fail@plt+0x263d4>
   388f0:	movw	r3, #1030	; 0x406
   388f4:	mov	r6, r0
   388f8:	cmp	r1, r3
   388fc:	beq	389d8 <__assert_fail@plt+0x263e4>
   38900:	cmp	r1, #11
   38904:	beq	38980 <__assert_fail@plt+0x2638c>
   38908:	ble	38960 <__assert_fail@plt+0x2636c>
   3890c:	movw	r2, #1031	; 0x407
   38910:	cmp	r1, r2
   38914:	bgt	3899c <__assert_fail@plt+0x263a8>
   38918:	cmp	r1, r3
   3891c:	bge	3892c <__assert_fail@plt+0x26338>
   38920:	movw	r3, #1025	; 0x401
   38924:	cmp	r1, r3
   38928:	beq	38980 <__assert_fail@plt+0x2638c>
   3892c:	ldr	r3, [sp, #4]
   38930:	mov	r0, r6
   38934:	ldr	r2, [r3]
   38938:	bl	1242c <fcntl64@plt>
   3893c:	mov	r4, r0
   38940:	mov	r0, r4
   38944:	add	sp, sp, #8
   38948:	ldrd	r4, [sp]
   3894c:	ldrd	r6, [sp, #8]
   38950:	ldr	lr, [sp, #16]
   38954:	add	sp, sp, #20
   38958:	add	sp, sp, #12
   3895c:	bx	lr
   38960:	cmp	r1, #4
   38964:	beq	3892c <__assert_fail@plt+0x26338>
   38968:	bgt	38990 <__assert_fail@plt+0x2639c>
   3896c:	cmp	r1, #2
   38970:	beq	3892c <__assert_fail@plt+0x26338>
   38974:	bgt	38980 <__assert_fail@plt+0x2638c>
   38978:	cmp	r1, #1
   3897c:	bne	3892c <__assert_fail@plt+0x26338>
   38980:	mov	r0, r6
   38984:	bl	1242c <fcntl64@plt>
   38988:	mov	r4, r0
   3898c:	b	38940 <__assert_fail@plt+0x2634c>
   38990:	cmp	r1, #9
   38994:	bne	3892c <__assert_fail@plt+0x26338>
   38998:	b	38980 <__assert_fail@plt+0x2638c>
   3899c:	movw	r3, #1033	; 0x409
   389a0:	cmp	r1, r3
   389a4:	beq	3892c <__assert_fail@plt+0x26338>
   389a8:	blt	38980 <__assert_fail@plt+0x2638c>
   389ac:	movw	r3, #1034	; 0x40a
   389b0:	cmp	r1, r3
   389b4:	bne	3892c <__assert_fail@plt+0x26338>
   389b8:	mov	r0, r6
   389bc:	bl	1242c <fcntl64@plt>
   389c0:	mov	r4, r0
   389c4:	b	38940 <__assert_fail@plt+0x2634c>
   389c8:	ldr	r2, [sp, #32]
   389cc:	bl	1242c <fcntl64@plt>
   389d0:	mov	r4, r0
   389d4:	b	38940 <__assert_fail@plt+0x2634c>
   389d8:	movw	r5, #32312	; 0x7e38
   389dc:	movt	r5, #6
   389e0:	ldr	r7, [r2]
   389e4:	add	r2, sp, #36	; 0x24
   389e8:	ldr	r3, [r5]
   389ec:	str	r2, [sp, #4]
   389f0:	mov	r2, r7
   389f4:	cmp	r3, #0
   389f8:	blt	38a14 <__assert_fail@plt+0x26420>
   389fc:	bl	1242c <fcntl64@plt>
   38a00:	subs	r4, r0, #0
   38a04:	blt	38a7c <__assert_fail@plt+0x26488>
   38a08:	mov	r3, #1
   38a0c:	str	r3, [r5]
   38a10:	b	38940 <__assert_fail@plt+0x2634c>
   38a14:	mov	r1, #0
   38a18:	bl	1242c <fcntl64@plt>
   38a1c:	subs	r4, r0, #0
   38a20:	blt	38940 <__assert_fail@plt+0x2634c>
   38a24:	ldr	r3, [r5]
   38a28:	cmn	r3, #1
   38a2c:	bne	38940 <__assert_fail@plt+0x2634c>
   38a30:	mov	r1, #1
   38a34:	mov	r0, r4
   38a38:	bl	1242c <fcntl64@plt>
   38a3c:	subs	r2, r0, #0
   38a40:	blt	38a5c <__assert_fail@plt+0x26468>
   38a44:	orr	r2, r2, #1
   38a48:	mov	r1, #2
   38a4c:	mov	r0, r4
   38a50:	bl	1242c <fcntl64@plt>
   38a54:	cmn	r0, #1
   38a58:	bne	38940 <__assert_fail@plt+0x2634c>
   38a5c:	bl	12348 <__errno_location@plt>
   38a60:	mov	r5, r0
   38a64:	mov	r0, r4
   38a68:	ldr	r6, [r5]
   38a6c:	mvn	r4, #0
   38a70:	bl	125ac <close@plt>
   38a74:	str	r6, [r5]
   38a78:	b	38940 <__assert_fail@plt+0x2634c>
   38a7c:	bl	12348 <__errno_location@plt>
   38a80:	ldr	r3, [r0]
   38a84:	cmp	r3, #22
   38a88:	bne	38a08 <__assert_fail@plt+0x26414>
   38a8c:	mov	r2, r7
   38a90:	mov	r0, r6
   38a94:	mov	r1, #0
   38a98:	bl	1242c <fcntl64@plt>
   38a9c:	subs	r4, r0, #0
   38aa0:	mvnge	r3, #0
   38aa4:	strge	r3, [r5]
   38aa8:	bge	38a30 <__assert_fail@plt+0x2643c>
   38aac:	b	38940 <__assert_fail@plt+0x2634c>
   38ab0:	str	r4, [sp, #-8]!
   38ab4:	subs	r4, r0, #0
   38ab8:	str	lr, [sp, #4]
   38abc:	sub	sp, sp, #8
   38ac0:	beq	38adc <__assert_fail@plt+0x264e8>
   38ac4:	bl	12270 <__freading@plt>
   38ac8:	cmp	r0, #0
   38acc:	beq	38adc <__assert_fail@plt+0x264e8>
   38ad0:	ldr	r3, [r4]
   38ad4:	tst	r3, #256	; 0x100
   38ad8:	bne	38af4 <__assert_fail@plt+0x26500>
   38adc:	mov	r0, r4
   38ae0:	add	sp, sp, #8
   38ae4:	ldr	r4, [sp]
   38ae8:	ldr	lr, [sp, #4]
   38aec:	add	sp, sp, #8
   38af0:	b	11f88 <fflush@plt>
   38af4:	mov	r1, #1
   38af8:	mov	r2, #0
   38afc:	mov	r3, #0
   38b00:	mov	r0, r4
   38b04:	str	r1, [sp]
   38b08:	bl	38b70 <__assert_fail@plt+0x2657c>
   38b0c:	b	38adc <__assert_fail@plt+0x264e8>
   38b10:	strd	r4, [sp, #-12]!
   38b14:	mov	r5, r0
   38b18:	str	lr, [sp, #8]
   38b1c:	sub	sp, sp, #12
   38b20:	bl	12348 <__errno_location@plt>
   38b24:	mov	r4, r0
   38b28:	mov	r2, #0
   38b2c:	ldr	r3, [r4]
   38b30:	mov	r0, r5
   38b34:	str	r2, [r4]
   38b38:	str	r3, [sp]
   38b3c:	str	r3, [sp, #4]
   38b40:	bl	11fc4 <free@plt>
   38b44:	ldr	r3, [r4]
   38b48:	add	r2, sp, #8
   38b4c:	clz	r3, r3
   38b50:	lsr	r3, r3, #5
   38b54:	add	r3, r2, r3, lsl #2
   38b58:	ldr	r3, [r3, #-8]
   38b5c:	str	r3, [r4]
   38b60:	add	sp, sp, #12
   38b64:	ldrd	r4, [sp]
   38b68:	add	sp, sp, #8
   38b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   38b70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   38b74:	mov	r4, r0
   38b78:	ldr	ip, [r0, #4]
   38b7c:	strd	r6, [sp, #8]
   38b80:	str	lr, [sp, #20]
   38b84:	ldr	lr, [r0, #8]
   38b88:	str	r8, [sp, #16]
   38b8c:	sub	sp, sp, #8
   38b90:	ldr	r5, [sp, #32]
   38b94:	cmp	lr, ip
   38b98:	beq	38bc0 <__assert_fail@plt+0x265cc>
   38b9c:	mov	r0, r4
   38ba0:	str	r5, [sp, #32]
   38ba4:	add	sp, sp, #8
   38ba8:	ldrd	r4, [sp]
   38bac:	ldrd	r6, [sp, #8]
   38bb0:	ldr	r8, [sp, #16]
   38bb4:	ldr	lr, [sp, #20]
   38bb8:	add	sp, sp, #24
   38bbc:	b	12414 <fseeko64@plt>
   38bc0:	ldr	ip, [r0, #16]
   38bc4:	ldr	lr, [r0, #20]
   38bc8:	cmp	lr, ip
   38bcc:	bne	38b9c <__assert_fail@plt+0x265a8>
   38bd0:	ldr	r8, [r0, #36]	; 0x24
   38bd4:	cmp	r8, #0
   38bd8:	bne	38b9c <__assert_fail@plt+0x265a8>
   38bdc:	mov	r6, r2
   38be0:	mov	r7, r3
   38be4:	bl	123c0 <fileno@plt>
   38be8:	mov	r2, r6
   38bec:	mov	r3, r7
   38bf0:	str	r5, [sp]
   38bf4:	bl	12180 <lseek64@plt>
   38bf8:	mvn	r3, #0
   38bfc:	mvn	r2, #0
   38c00:	cmp	r1, r3
   38c04:	cmpeq	r0, r2
   38c08:	beq	38c38 <__assert_fail@plt+0x26644>
   38c0c:	ldr	r3, [r4]
   38c10:	strd	r0, [r4, #80]	; 0x50
   38c14:	bic	r3, r3, #16
   38c18:	str	r3, [r4]
   38c1c:	mov	r0, r8
   38c20:	add	sp, sp, #8
   38c24:	ldrd	r4, [sp]
   38c28:	ldrd	r6, [sp, #8]
   38c2c:	ldr	r8, [sp, #16]
   38c30:	add	sp, sp, #20
   38c34:	pop	{pc}		; (ldr pc, [sp], #4)
   38c38:	mvn	r8, #0
   38c3c:	b	38c1c <__assert_fail@plt+0x26628>
   38c40:	strd	r4, [sp, #-8]!
   38c44:	ldrd	r2, [r1, #8]
   38c48:	ldrd	r4, [r0, #8]
   38c4c:	cmp	r5, r3
   38c50:	cmpeq	r4, r2
   38c54:	movne	r0, #0
   38c58:	bne	38c74 <__assert_fail@plt+0x26680>
   38c5c:	ldrd	r4, [r0]
   38c60:	ldrd	r2, [r1]
   38c64:	cmp	r5, r3
   38c68:	cmpeq	r4, r2
   38c6c:	moveq	r0, #1
   38c70:	movne	r0, #0
   38c74:	ldrd	r4, [sp]
   38c78:	add	sp, sp, #8
   38c7c:	bx	lr
   38c80:	mov	r2, r1
   38c84:	mov	r3, #0
   38c88:	str	r4, [sp, #-8]!
   38c8c:	ldrd	r0, [r0, #8]
   38c90:	str	lr, [sp, #4]
   38c94:	bl	5055c <__assert_fail@plt+0x3df68>
   38c98:	ldr	r4, [sp]
   38c9c:	add	sp, sp, #4
   38ca0:	mov	r0, r2
   38ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   38ca8:	mov	r2, r1
   38cac:	mov	r3, #0
   38cb0:	str	r4, [sp, #-8]!
   38cb4:	ldrd	r0, [r0]
   38cb8:	str	lr, [sp, #4]
   38cbc:	bl	5055c <__assert_fail@plt+0x3df68>
   38cc0:	ldr	r4, [sp]
   38cc4:	add	sp, sp, #4
   38cc8:	mov	r0, r2
   38ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   38cd0:	strd	r4, [sp, #-8]!
   38cd4:	ldrd	r2, [r1]
   38cd8:	ldrd	r4, [r0]
   38cdc:	cmp	r5, r3
   38ce0:	cmpeq	r4, r2
   38ce4:	ldrd	r4, [sp]
   38ce8:	add	sp, sp, #8
   38cec:	moveq	r0, #1
   38cf0:	movne	r0, #0
   38cf4:	bx	lr
   38cf8:	ldr	r2, [r0]
   38cfc:	ldr	r3, [r1]
   38d00:	ldrd	r0, [r2, #160]	; 0xa0
   38d04:	ldrd	r2, [r3, #160]	; 0xa0
   38d08:	cmp	r1, r3
   38d0c:	cmpeq	r0, r2
   38d10:	movhi	r0, #1
   38d14:	movls	r0, #0
   38d18:	movcc	r3, #1
   38d1c:	movcs	r3, #0
   38d20:	sub	r0, r0, r3
   38d24:	bx	lr
   38d28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   38d2c:	mov	r5, r2
   38d30:	mov	r4, r1
   38d34:	ldr	r2, [r0, #40]	; 0x28
   38d38:	strd	r6, [sp, #8]
   38d3c:	mov	r6, r0
   38d40:	str	r8, [sp, #16]
   38d44:	str	lr, [sp, #20]
   38d48:	ldr	r0, [r0, #8]
   38d4c:	cmp	r2, r5
   38d50:	ldr	r7, [r6, #44]	; 0x2c
   38d54:	bcs	38d7c <__assert_fail@plt+0x26788>
   38d58:	add	r1, r5, #40	; 0x28
   38d5c:	cmn	r1, #-1073741823	; 0xc0000001
   38d60:	str	r1, [r6, #40]	; 0x28
   38d64:	bhi	38dfc <__assert_fail@plt+0x26808>
   38d68:	lsl	r1, r1, #2
   38d6c:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   38d70:	cmp	r0, #0
   38d74:	strne	r0, [r6, #8]
   38d78:	beq	38df8 <__assert_fail@plt+0x26804>
   38d7c:	cmp	r4, #0
   38d80:	movne	r2, r0
   38d84:	beq	38d98 <__assert_fail@plt+0x267a4>
   38d88:	str	r4, [r2], #4
   38d8c:	ldr	r4, [r4, #8]
   38d90:	cmp	r4, #0
   38d94:	bne	38d88 <__assert_fail@plt+0x26794>
   38d98:	mov	r3, r7
   38d9c:	mov	r2, #4
   38da0:	mov	r1, r5
   38da4:	bl	12510 <qsort@plt>
   38da8:	ldr	lr, [r6, #8]
   38dac:	subs	r3, r5, #1
   38db0:	ldr	r0, [lr]
   38db4:	moveq	r2, r0
   38db8:	beq	38ddc <__assert_fail@plt+0x267e8>
   38dbc:	mov	r2, lr
   38dc0:	ldr	r1, [r2]
   38dc4:	subs	r3, r3, #1
   38dc8:	ldr	ip, [r2, #4]!
   38dcc:	str	ip, [r1, #8]
   38dd0:	bne	38dc0 <__assert_fail@plt+0x267cc>
   38dd4:	add	r5, lr, r5, lsl #2
   38dd8:	ldr	r2, [r5, #-4]
   38ddc:	mov	r3, #0
   38de0:	str	r3, [r2, #8]
   38de4:	ldrd	r4, [sp]
   38de8:	ldrd	r6, [sp, #8]
   38dec:	ldr	r8, [sp, #16]
   38df0:	add	sp, sp, #20
   38df4:	pop	{pc}		; (ldr pc, [sp], #4)
   38df8:	ldr	r0, [r6, #8]
   38dfc:	bl	38b10 <__assert_fail@plt+0x2651c>
   38e00:	mov	r3, #0
   38e04:	mov	r0, r4
   38e08:	str	r3, [r6, #8]
   38e0c:	str	r3, [r6, #40]	; 0x28
   38e10:	b	38de4 <__assert_fail@plt+0x267f0>
   38e14:	strd	r4, [sp, #-20]!	; 0xffffffec
   38e18:	ldr	r5, [r0, #44]	; 0x2c
   38e1c:	ldr	r3, [r5, #48]	; 0x30
   38e20:	strd	r6, [sp, #8]
   38e24:	str	lr, [sp, #16]
   38e28:	sub	sp, sp, #100	; 0x64
   38e2c:	tst	r3, #512	; 0x200
   38e30:	beq	38ec0 <__assert_fail@plt+0x268cc>
   38e34:	ldr	r4, [r5, #52]	; 0x34
   38e38:	mov	r7, r1
   38e3c:	mov	r6, r0
   38e40:	cmp	r4, #0
   38e44:	beq	38e6c <__assert_fail@plt+0x26878>
   38e48:	ldrd	r2, [r6, #64]	; 0x40
   38e4c:	add	r1, sp, #8
   38e50:	mov	r0, r4
   38e54:	strd	r2, [sp, #8]
   38e58:	bl	29440 <__assert_fail@plt+0x16e4c>
   38e5c:	cmp	r0, #0
   38e60:	beq	38ea4 <__assert_fail@plt+0x268b0>
   38e64:	ldr	r0, [r0, #8]
   38e68:	b	38ec4 <__assert_fail@plt+0x268d0>
   38e6c:	movw	r0, #35600	; 0x8b10
   38e70:	movt	r0, #3
   38e74:	mov	r1, r4
   38e78:	movw	r3, #36048	; 0x8cd0
   38e7c:	movt	r3, #3
   38e80:	movw	r2, #36008	; 0x8ca8
   38e84:	movt	r2, #3
   38e88:	str	r0, [sp]
   38e8c:	mov	r0, #13
   38e90:	bl	297c4 <__assert_fail@plt+0x171d0>
   38e94:	cmp	r0, #0
   38e98:	mov	r4, r0
   38e9c:	str	r0, [r5, #52]	; 0x34
   38ea0:	bne	38e48 <__assert_fail@plt+0x26854>
   38ea4:	cmp	r7, #0
   38ea8:	blt	38ec0 <__assert_fail@plt+0x268cc>
   38eac:	mov	r0, r7
   38eb0:	add	r1, sp, #8
   38eb4:	bl	11ebc <fstatfs64@plt>
   38eb8:	cmp	r0, #0
   38ebc:	beq	38ed8 <__assert_fail@plt+0x268e4>
   38ec0:	mov	r0, #0
   38ec4:	add	sp, sp, #100	; 0x64
   38ec8:	ldrd	r4, [sp]
   38ecc:	ldrd	r6, [sp, #8]
   38ed0:	add	sp, sp, #16
   38ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   38ed8:	cmp	r4, #0
   38edc:	beq	38f1c <__assert_fail@plt+0x26928>
   38ee0:	mov	r0, #16
   38ee4:	bl	3b49c <__assert_fail@plt+0x28ea8>
   38ee8:	subs	r5, r0, #0
   38eec:	beq	38f1c <__assert_fail@plt+0x26928>
   38ef0:	ldr	ip, [sp, #8]
   38ef4:	mov	r0, r4
   38ef8:	mov	r1, r5
   38efc:	ldrd	r2, [r6, #64]	; 0x40
   38f00:	strd	r2, [r5]
   38f04:	str	ip, [r5, #8]
   38f08:	bl	2a02c <__assert_fail@plt+0x17a38>
   38f0c:	cmp	r0, #0
   38f10:	beq	38f24 <__assert_fail@plt+0x26930>
   38f14:	cmp	r5, r0
   38f18:	bne	38f30 <__assert_fail@plt+0x2693c>
   38f1c:	ldr	r0, [sp, #8]
   38f20:	b	38ec4 <__assert_fail@plt+0x268d0>
   38f24:	mov	r0, r5
   38f28:	bl	38b10 <__assert_fail@plt+0x2651c>
   38f2c:	b	38f1c <__assert_fail@plt+0x26928>
   38f30:	bl	125a0 <abort@plt>
   38f34:	ldr	ip, [r2, #48]	; 0x30
   38f38:	strd	r4, [sp, #-16]!
   38f3c:	mov	r4, r2
   38f40:	add	r5, r2, #64	; 0x40
   38f44:	ldr	r2, [r2, #24]
   38f48:	str	r6, [sp, #8]
   38f4c:	str	lr, [sp, #12]
   38f50:	sub	sp, sp, #8
   38f54:	cmp	ip, #0
   38f58:	bne	38fd0 <__assert_fail@plt+0x269dc>
   38f5c:	tst	r1, #1
   38f60:	beq	38fd0 <__assert_fail@plt+0x269dc>
   38f64:	mov	r1, r2
   38f68:	mov	r0, #3
   38f6c:	mov	r2, r5
   38f70:	bl	12558 <__xstat64@plt>
   38f74:	cmp	r0, #0
   38f78:	beq	38ffc <__assert_fail@plt+0x26a08>
   38f7c:	bl	12348 <__errno_location@plt>
   38f80:	ldr	r3, [r0]
   38f84:	mov	r6, r0
   38f88:	cmp	r3, #2
   38f8c:	bne	38fb4 <__assert_fail@plt+0x269c0>
   38f90:	mov	r2, r5
   38f94:	mov	r0, #3
   38f98:	ldr	r1, [r4, #24]
   38f9c:	bl	125b8 <__lxstat64@plt>
   38fa0:	subs	r3, r0, #0
   38fa4:	moveq	r0, #13
   38fa8:	streq	r3, [r6]
   38fac:	beq	39020 <__assert_fail@plt+0x26a2c>
   38fb0:	ldr	r3, [r6]
   38fb4:	mov	r0, r5
   38fb8:	mov	r2, #104	; 0x68
   38fbc:	str	r3, [r4, #32]
   38fc0:	mov	r1, #0
   38fc4:	bl	12378 <memset@plt>
   38fc8:	mov	r0, #10
   38fcc:	b	39020 <__assert_fail@plt+0x26a2c>
   38fd0:	ubfx	ip, r1, #1, #1
   38fd4:	orrs	r3, r3, ip
   38fd8:	bne	38f64 <__assert_fail@plt+0x26970>
   38fdc:	mov	ip, #256	; 0x100
   38fe0:	mov	r1, r0
   38fe4:	mov	r3, r5
   38fe8:	mov	r0, #3
   38fec:	str	ip, [sp]
   38ff0:	bl	1212c <__fxstatat64@plt>
   38ff4:	cmp	r0, #0
   38ff8:	bne	3907c <__assert_fail@plt+0x26a88>
   38ffc:	ldr	r3, [r4, #80]	; 0x50
   39000:	and	r3, r3, #61440	; 0xf000
   39004:	cmp	r3, #16384	; 0x4000
   39008:	beq	39034 <__assert_fail@plt+0x26a40>
   3900c:	cmp	r3, #40960	; 0xa000
   39010:	beq	39088 <__assert_fail@plt+0x26a94>
   39014:	cmp	r3, #32768	; 0x8000
   39018:	movne	r0, #3
   3901c:	moveq	r0, #8
   39020:	add	sp, sp, #8
   39024:	ldrd	r4, [sp]
   39028:	ldr	r6, [sp, #8]
   3902c:	add	sp, sp, #12
   39030:	pop	{pc}		; (ldr pc, [sp], #4)
   39034:	ldrb	r3, [r4, #168]	; 0xa8
   39038:	cmp	r3, #46	; 0x2e
   3903c:	bne	39060 <__assert_fail@plt+0x26a6c>
   39040:	ldrb	r3, [r4, #169]	; 0xa9
   39044:	cmp	r3, #0
   39048:	beq	39068 <__assert_fail@plt+0x26a74>
   3904c:	ldr	r3, [r4, #168]	; 0xa8
   39050:	bic	r3, r3, #-16777216	; 0xff000000
   39054:	bic	r3, r3, #255	; 0xff
   39058:	cmp	r3, #11776	; 0x2e00
   3905c:	beq	39068 <__assert_fail@plt+0x26a74>
   39060:	mov	r0, #1
   39064:	b	39020 <__assert_fail@plt+0x26a2c>
   39068:	ldr	r3, [r4, #48]	; 0x30
   3906c:	cmp	r3, #0
   39070:	moveq	r0, #1
   39074:	movne	r0, #5
   39078:	b	39020 <__assert_fail@plt+0x26a2c>
   3907c:	bl	12348 <__errno_location@plt>
   39080:	ldr	r3, [r0]
   39084:	b	38fb4 <__assert_fail@plt+0x269c0>
   39088:	mov	r0, #12
   3908c:	b	39020 <__assert_fail@plt+0x26a2c>
   39090:	movw	r3, #258	; 0x102
   39094:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39098:	tst	r0, r3
   3909c:	strd	r6, [sp, #8]
   390a0:	strd	r8, [sp, #16]
   390a4:	mov	r8, r2
   390a8:	str	sl, [sp, #24]
   390ac:	mov	sl, r1
   390b0:	str	lr, [sp, #28]
   390b4:	beq	39138 <__assert_fail@plt+0x26b44>
   390b8:	mov	r0, #24
   390bc:	bl	3b49c <__assert_fail@plt+0x28ea8>
   390c0:	subs	r9, r0, #0
   390c4:	beq	3915c <__assert_fail@plt+0x26b68>
   390c8:	ldrd	r6, [r8, #64]	; 0x40
   390cc:	mov	r1, r9
   390d0:	ldrd	r4, [r8, #160]	; 0xa0
   390d4:	ldr	r0, [sl]
   390d8:	strd	r6, [r9]
   390dc:	str	r8, [r9, #16]
   390e0:	strd	r4, [r9, #8]
   390e4:	bl	2a02c <__assert_fail@plt+0x17a38>
   390e8:	cmp	r9, r0
   390ec:	mov	r4, r0
   390f0:	beq	3911c <__assert_fail@plt+0x26b28>
   390f4:	mov	r0, r9
   390f8:	bl	38b10 <__assert_fail@plt+0x2651c>
   390fc:	cmp	r4, #0
   39100:	beq	3915c <__assert_fail@plt+0x26b68>
   39104:	ldr	r3, [r4, #16]
   39108:	mov	r2, #2
   3910c:	mov	r0, #1
   39110:	str	r3, [r8]
   39114:	strh	r2, [r8, #56]	; 0x38
   39118:	b	39120 <__assert_fail@plt+0x26b2c>
   3911c:	mov	r0, #1
   39120:	ldrd	r4, [sp]
   39124:	ldrd	r6, [sp, #8]
   39128:	ldrd	r8, [sp, #16]
   3912c:	ldr	sl, [sp, #24]
   39130:	add	sp, sp, #28
   39134:	pop	{pc}		; (ldr pc, [sp], #4)
   39138:	add	r1, r2, #64	; 0x40
   3913c:	ldr	r0, [sl]
   39140:	bl	4f8dc <__assert_fail@plt+0x3d2e8>
   39144:	cmp	r0, #0
   39148:	beq	3911c <__assert_fail@plt+0x26b28>
   3914c:	mov	r3, #2
   39150:	str	r8, [r8]
   39154:	strh	r3, [r8, #56]	; 0x38
   39158:	b	39120 <__assert_fail@plt+0x26b2c>
   3915c:	mov	r0, #0
   39160:	b	39120 <__assert_fail@plt+0x26b2c>
   39164:	movw	r3, #258	; 0x102
   39168:	mov	ip, r1
   3916c:	strd	r4, [sp, #-12]!
   39170:	tst	r0, r3
   39174:	str	lr, [sp, #8]
   39178:	sub	sp, sp, #28
   3917c:	bne	391cc <__assert_fail@plt+0x26bd8>
   39180:	ldr	r3, [r2, #4]
   39184:	cmp	r3, #0
   39188:	beq	391bc <__assert_fail@plt+0x26bc8>
   3918c:	ldr	r1, [r3, #48]	; 0x30
   39190:	cmp	r1, #0
   39194:	blt	391bc <__assert_fail@plt+0x26bc8>
   39198:	ldr	ip, [ip]
   3919c:	ldrd	r0, [ip, #16]
   391a0:	orrs	r1, r0, r1
   391a4:	beq	3922c <__assert_fail@plt+0x26c38>
   391a8:	ldrd	r4, [ip]
   391ac:	ldrd	r0, [r2, #160]	; 0xa0
   391b0:	cmp	r5, r1
   391b4:	cmpeq	r4, r0
   391b8:	beq	39204 <__assert_fail@plt+0x26c10>
   391bc:	add	sp, sp, #28
   391c0:	ldrd	r4, [sp]
   391c4:	add	sp, sp, #8
   391c8:	pop	{pc}		; (ldr pc, [sp], #4)
   391cc:	ldrd	r4, [r2, #64]	; 0x40
   391d0:	mov	r1, sp
   391d4:	ldrd	r2, [r2, #160]	; 0xa0
   391d8:	ldr	r0, [ip]
   391dc:	strd	r4, [sp]
   391e0:	strd	r2, [sp, #8]
   391e4:	bl	2a250 <__assert_fail@plt+0x17c5c>
   391e8:	cmp	r0, #0
   391ec:	beq	3922c <__assert_fail@plt+0x26c38>
   391f0:	bl	38b10 <__assert_fail@plt+0x2651c>
   391f4:	add	sp, sp, #28
   391f8:	ldrd	r4, [sp]
   391fc:	add	sp, sp, #8
   39200:	pop	{pc}		; (ldr pc, [sp], #4)
   39204:	ldrd	r0, [ip, #8]
   39208:	ldrd	r4, [r2, #64]	; 0x40
   3920c:	cmp	r1, r5
   39210:	cmpeq	r0, r4
   39214:	bne	391bc <__assert_fail@plt+0x26bc8>
   39218:	ldrd	r0, [r3, #64]	; 0x40
   3921c:	ldrd	r2, [r3, #160]	; 0xa0
   39220:	strd	r2, [ip]
   39224:	strd	r0, [ip, #8]
   39228:	b	391bc <__assert_fail@plt+0x26bc8>
   3922c:	bl	125a0 <abort@plt>
   39230:	ldr	r3, [r0, #48]	; 0x30
   39234:	strd	r4, [sp, #-16]!
   39238:	add	r5, r0, #60	; 0x3c
   3923c:	str	r6, [sp, #8]
   39240:	str	lr, [sp, #12]
   39244:	ands	r6, r3, #4
   39248:	movne	r6, #0
   3924c:	bne	39288 <__assert_fail@plt+0x26c94>
   39250:	tst	r3, #512	; 0x200
   39254:	mov	r4, r0
   39258:	beq	392b8 <__assert_fail@plt+0x26cc4>
   3925c:	mov	r0, r5
   39260:	ldr	r1, [r4, #32]
   39264:	bl	4fb70 <__assert_fail@plt+0x3d57c>
   39268:	cmp	r0, #0
   3926c:	bge	392cc <__assert_fail@plt+0x26cd8>
   39270:	mvn	r3, #99	; 0x63
   39274:	str	r3, [r4, #32]
   39278:	b	39288 <__assert_fail@plt+0x26c94>
   3927c:	bl	4fbb8 <__assert_fail@plt+0x3d5c4>
   39280:	cmp	r0, #0
   39284:	bge	392b0 <__assert_fail@plt+0x26cbc>
   39288:	mov	r0, r5
   3928c:	bl	4fb68 <__assert_fail@plt+0x3d574>
   39290:	cmp	r0, #0
   39294:	mov	r0, r5
   39298:	beq	3927c <__assert_fail@plt+0x26c88>
   3929c:	mov	r0, r6
   392a0:	ldrd	r4, [sp]
   392a4:	ldr	r6, [sp, #8]
   392a8:	add	sp, sp, #12
   392ac:	pop	{pc}		; (ldr pc, [sp], #4)
   392b0:	bl	125ac <close@plt>
   392b4:	b	39288 <__assert_fail@plt+0x26c94>
   392b8:	ldr	r0, [r0, #28]
   392bc:	bl	124f8 <fchdir@plt>
   392c0:	adds	r6, r0, #0
   392c4:	movne	r6, #1
   392c8:	b	39288 <__assert_fail@plt+0x26c94>
   392cc:	bl	125ac <close@plt>
   392d0:	mvn	r3, #99	; 0x63
   392d4:	str	r3, [r4, #32]
   392d8:	b	39288 <__assert_fail@plt+0x26c94>
   392dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   392e0:	mov	r5, r0
   392e4:	mov	r4, r2
   392e8:	strd	r6, [sp, #8]
   392ec:	strd	r8, [sp, #16]
   392f0:	mov	r8, r1
   392f4:	ldr	r9, [r0, #48]	; 0x30
   392f8:	str	sl, [sp, #24]
   392fc:	subs	sl, r3, #0
   39300:	str	lr, [sp, #28]
   39304:	sub	sp, sp, #104	; 0x68
   39308:	and	r6, r9, #4
   3930c:	beq	39408 <__assert_fail@plt+0x26e14>
   39310:	movw	r1, #25320	; 0x62e8
   39314:	movt	r1, #5
   39318:	mov	r0, sl
   3931c:	bl	11f40 <strcmp@plt>
   39320:	cmp	r0, #0
   39324:	bne	39408 <__assert_fail@plt+0x26e14>
   39328:	cmp	r6, #0
   3932c:	bne	39448 <__assert_fail@plt+0x26e54>
   39330:	cmp	r4, #0
   39334:	bge	39584 <__assert_fail@plt+0x26f90>
   39338:	tst	r9, #512	; 0x200
   3933c:	beq	3948c <__assert_fail@plt+0x26e98>
   39340:	add	r6, r5, #60	; 0x3c
   39344:	mov	r0, r6
   39348:	bl	4fb68 <__assert_fail@plt+0x3d574>
   3934c:	cmp	r0, #0
   39350:	beq	3950c <__assert_fail@plt+0x26f18>
   39354:	lsl	r2, r9, #11
   39358:	mov	r6, #1
   3935c:	and	r2, r2, #32768	; 0x8000
   39360:	orr	r2, r2, #540672	; 0x84000
   39364:	orr	r2, r2, #2304	; 0x900
   39368:	mov	r1, sl
   3936c:	ldr	r0, [r5, #32]
   39370:	bl	2da54 <__assert_fail@plt+0x1b460>
   39374:	mov	r7, r0
   39378:	cmp	r7, #0
   3937c:	blt	3957c <__assert_fail@plt+0x26f88>
   39380:	ldr	r9, [r5, #48]	; 0x30
   39384:	tst	r9, #2
   39388:	beq	39424 <__assert_fail@plt+0x26e30>
   3938c:	mov	r2, sp
   39390:	mov	r1, r7
   39394:	mov	r0, #3
   39398:	bl	1215c <__fxstat64@plt>
   3939c:	cmp	r0, #0
   393a0:	bne	39484 <__assert_fail@plt+0x26e90>
   393a4:	ldrd	r2, [sp]
   393a8:	ldrd	r0, [r8, #64]	; 0x40
   393ac:	cmp	r1, r3
   393b0:	cmpeq	r0, r2
   393b4:	bne	39478 <__assert_fail@plt+0x26e84>
   393b8:	ldrd	r2, [sp, #96]	; 0x60
   393bc:	ldrd	r0, [r8, #160]	; 0xa0
   393c0:	cmp	r1, r3
   393c4:	cmpeq	r0, r2
   393c8:	bne	39478 <__assert_fail@plt+0x26e84>
   393cc:	ldr	r9, [r5, #48]	; 0x30
   393d0:	tst	r9, #512	; 0x200
   393d4:	bne	394b4 <__assert_fail@plt+0x26ec0>
   393d8:	mov	r0, r7
   393dc:	bl	124f8 <fchdir@plt>
   393e0:	mov	r9, r0
   393e4:	cmp	r4, #0
   393e8:	bge	39458 <__assert_fail@plt+0x26e64>
   393ec:	bl	12348 <__errno_location@plt>
   393f0:	mov	r4, r0
   393f4:	mov	r0, r7
   393f8:	ldr	r5, [r4]
   393fc:	bl	125ac <close@plt>
   39400:	str	r5, [r4]
   39404:	b	39458 <__assert_fail@plt+0x26e64>
   39408:	cmp	r6, #0
   3940c:	bne	39448 <__assert_fail@plt+0x26e54>
   39410:	cmp	r4, #0
   39414:	movge	r7, r4
   39418:	blt	3953c <__assert_fail@plt+0x26f48>
   3941c:	tst	r9, #2
   39420:	bne	3938c <__assert_fail@plt+0x26d98>
   39424:	cmp	sl, #0
   39428:	beq	393d0 <__assert_fail@plt+0x26ddc>
   3942c:	mov	r0, sl
   39430:	movw	r1, #25320	; 0x62e8
   39434:	movt	r1, #5
   39438:	bl	11f40 <strcmp@plt>
   3943c:	cmp	r0, #0
   39440:	bne	393d0 <__assert_fail@plt+0x26ddc>
   39444:	b	3938c <__assert_fail@plt+0x26d98>
   39448:	mvn	r3, r4
   3944c:	lsr	r3, r3, #31
   39450:	ands	r9, r3, r9, lsr #9
   39454:	bne	394fc <__assert_fail@plt+0x26f08>
   39458:	mov	r0, r9
   3945c:	add	sp, sp, #104	; 0x68
   39460:	ldrd	r4, [sp]
   39464:	ldrd	r6, [sp, #8]
   39468:	ldrd	r8, [sp, #16]
   3946c:	ldr	sl, [sp, #24]
   39470:	add	sp, sp, #28
   39474:	pop	{pc}		; (ldr pc, [sp], #4)
   39478:	bl	12348 <__errno_location@plt>
   3947c:	mov	r3, #2
   39480:	str	r3, [r0]
   39484:	mvn	r9, #0
   39488:	b	393e4 <__assert_fail@plt+0x26df0>
   3948c:	lsl	r2, r9, #11
   39490:	mov	r6, #1
   39494:	and	r2, r2, #32768	; 0x8000
   39498:	orr	r2, r2, #540672	; 0x84000
   3949c:	orr	r2, r2, #2304	; 0x900
   394a0:	mov	r1, r2
   394a4:	mov	r0, sl
   394a8:	bl	28b00 <__assert_fail@plt+0x1650c>
   394ac:	mov	r7, r0
   394b0:	b	39378 <__assert_fail@plt+0x26d84>
   394b4:	ldr	r1, [r5, #32]
   394b8:	sub	r3, r1, r7
   394bc:	cmn	r1, #100	; 0x64
   394c0:	clz	r3, r3
   394c4:	lsr	r3, r3, #5
   394c8:	moveq	r3, #0
   394cc:	cmp	r3, #0
   394d0:	bne	39598 <__assert_fail@plt+0x26fa4>
   394d4:	cmp	r6, #0
   394d8:	beq	3955c <__assert_fail@plt+0x26f68>
   394dc:	mvn	r3, r1
   394e0:	eor	r9, r9, #4
   394e4:	lsr	r3, r3, #31
   394e8:	ands	r3, r3, r9, lsr #2
   394ec:	bne	39574 <__assert_fail@plt+0x26f80>
   394f0:	mov	r9, #0
   394f4:	str	r7, [r5, #32]
   394f8:	b	39458 <__assert_fail@plt+0x26e64>
   394fc:	mov	r0, r4
   39500:	mov	r9, #0
   39504:	bl	125ac <close@plt>
   39508:	b	39458 <__assert_fail@plt+0x26e64>
   3950c:	mov	r0, r6
   39510:	bl	4fbb8 <__assert_fail@plt+0x3d5c4>
   39514:	ldr	r9, [r5, #48]	; 0x30
   39518:	subs	r7, r0, #0
   3951c:	movlt	r6, #1
   39520:	andlt	r3, r9, #512	; 0x200
   39524:	blt	39540 <__assert_fail@plt+0x26f4c>
   39528:	tst	r9, #2
   3952c:	mov	r4, r7
   39530:	mov	r6, #1
   39534:	beq	393d0 <__assert_fail@plt+0x26ddc>
   39538:	b	3938c <__assert_fail@plt+0x26d98>
   3953c:	and	r3, r9, #512	; 0x200
   39540:	lsl	r2, r9, #11
   39544:	cmp	r3, #0
   39548:	and	r2, r2, #32768	; 0x8000
   3954c:	orr	r2, r2, #540672	; 0x84000
   39550:	orr	r2, r2, #2304	; 0x900
   39554:	bne	39368 <__assert_fail@plt+0x26d74>
   39558:	b	394a0 <__assert_fail@plt+0x26eac>
   3955c:	add	r0, r5, #60	; 0x3c
   39560:	bl	4fb70 <__assert_fail@plt+0x3d57c>
   39564:	cmp	r0, #0
   39568:	blt	394f0 <__assert_fail@plt+0x26efc>
   3956c:	bl	125ac <close@plt>
   39570:	b	394f0 <__assert_fail@plt+0x26efc>
   39574:	mov	r0, r1
   39578:	b	3956c <__assert_fail@plt+0x26f78>
   3957c:	mvn	r9, #0
   39580:	b	39458 <__assert_fail@plt+0x26e64>
   39584:	tst	r9, #2
   39588:	mov	r7, r4
   3958c:	mov	r6, #1
   39590:	beq	3942c <__assert_fail@plt+0x26e38>
   39594:	b	3938c <__assert_fail@plt+0x26d98>
   39598:	bl	125a0 <abort@plt>
   3959c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   395a0:	strd	r6, [sp, #8]
   395a4:	mov	r6, r0
   395a8:	strd	sl, [sp, #24]
   395ac:	ldr	fp, [r0]
   395b0:	strd	r8, [sp, #16]
   395b4:	str	lr, [sp, #32]
   395b8:	sub	sp, sp, #76	; 0x4c
   395bc:	str	r1, [sp, #40]	; 0x28
   395c0:	ldr	r0, [fp, #12]
   395c4:	cmp	r0, #0
   395c8:	str	r0, [sp, #48]	; 0x30
   395cc:	beq	39a3c <__assert_fail@plt+0x27448>
   395d0:	bl	124ec <dirfd@plt>
   395d4:	cmp	r0, #0
   395d8:	str	r0, [sp, #68]	; 0x44
   395dc:	blt	39fb0 <__assert_fail@plt+0x279bc>
   395e0:	ldr	r3, [r6, #44]	; 0x2c
   395e4:	cmp	r3, #0
   395e8:	beq	39e5c <__assert_fail@plt+0x27868>
   395ec:	ldr	r3, [r6, #48]	; 0x30
   395f0:	mvn	r2, #0
   395f4:	str	r2, [sp, #28]
   395f8:	mov	r2, #1
   395fc:	str	r2, [sp, #60]	; 0x3c
   39600:	ldr	r1, [fp, #28]
   39604:	ldr	r0, [fp, #40]	; 0x28
   39608:	sub	r2, r0, #1
   3960c:	str	r0, [sp, #4]
   39610:	ldrb	r1, [r1, r2]
   39614:	cmp	r1, #47	; 0x2f
   39618:	beq	39628 <__assert_fail@plt+0x27034>
   3961c:	add	r1, r0, #1
   39620:	mov	r2, r0
   39624:	str	r1, [sp, #4]
   39628:	ands	r3, r3, #4
   3962c:	streq	r3, [sp, #32]
   39630:	beq	3964c <__assert_fail@plt+0x27058>
   39634:	ldr	r3, [r6, #24]
   39638:	mov	r0, #47	; 0x2f
   3963c:	add	r1, r3, r2
   39640:	strb	r0, [r3, r2]
   39644:	add	r3, r1, #1
   39648:	str	r3, [sp, #32]
   3964c:	movw	r3, #6548	; 0x1994
   39650:	movt	r3, #258	; 0x102
   39654:	ldr	r2, [r6, #36]	; 0x24
   39658:	movw	r0, #19778	; 0x4d42
   3965c:	movt	r0, #65363	; 0xff53
   39660:	str	fp, [sp, #16]
   39664:	str	r3, [sp, #52]	; 0x34
   39668:	mov	r1, #0
   3966c:	ldr	r3, [fp, #48]	; 0x30
   39670:	mov	r9, r1
   39674:	mov	fp, r1
   39678:	str	r0, [sp, #56]	; 0x38
   3967c:	ldr	r0, [sp, #4]
   39680:	str	r1, [sp, #12]
   39684:	str	r1, [sp, #36]	; 0x24
   39688:	add	r3, r3, #1
   3968c:	sub	r2, r2, r0
   39690:	str	r1, [sp, #44]	; 0x2c
   39694:	str	r2, [sp, #20]
   39698:	str	r3, [sp, #24]
   3969c:	b	396b4 <__assert_fail@plt+0x270c0>
   396a0:	ldr	r3, [sp, #28]
   396a4:	add	r9, r9, #1
   396a8:	cmp	r9, r3
   396ac:	bcs	39b98 <__assert_fail@plt+0x275a4>
   396b0:	mov	fp, r4
   396b4:	ldr	r3, [sp, #16]
   396b8:	ldr	r4, [r3, #12]
   396bc:	cmp	r4, #0
   396c0:	beq	39cd8 <__assert_fail@plt+0x276e4>
   396c4:	bl	12348 <__errno_location@plt>
   396c8:	mov	sl, r0
   396cc:	mov	r3, #0
   396d0:	mov	r0, r4
   396d4:	str	r3, [sl]
   396d8:	bl	124bc <readdir64@plt>
   396dc:	subs	r7, r0, #0
   396e0:	beq	39dac <__assert_fail@plt+0x277b8>
   396e4:	ldr	r3, [r6, #48]	; 0x30
   396e8:	tst	r3, #32
   396ec:	bne	396fc <__assert_fail@plt+0x27108>
   396f0:	ldrb	r3, [r7, #19]
   396f4:	cmp	r3, #46	; 0x2e
   396f8:	beq	398fc <__assert_fail@plt+0x27308>
   396fc:	add	r1, r7, #19
   39700:	mov	r0, r1
   39704:	str	r1, [sp, #8]
   39708:	bl	12300 <strlen@plt>
   3970c:	mov	r5, r0
   39710:	add	r0, r0, #176	; 0xb0
   39714:	bic	r0, r0, #7
   39718:	bl	3b49c <__assert_fail@plt+0x28ea8>
   3971c:	subs	r4, r0, #0
   39720:	beq	39930 <__assert_fail@plt+0x2733c>
   39724:	add	r8, r4, #168	; 0xa8
   39728:	mov	r2, r5
   3972c:	ldr	r1, [sp, #8]
   39730:	mov	r0, r8
   39734:	bl	12024 <memcpy@plt>
   39738:	ldr	r3, [sp, #20]
   3973c:	mov	r1, #0
   39740:	add	r0, r4, r5
   39744:	mov	ip, #196608	; 0x30000
   39748:	ldr	r2, [r6, #24]
   3974c:	strb	r1, [r0, #168]	; 0xa8
   39750:	str	r1, [r4, #12]
   39754:	cmp	r3, r5
   39758:	str	r1, [r4, #16]
   3975c:	str	r1, [r4, #20]
   39760:	str	r2, [r4, #28]
   39764:	str	r1, [r4, #32]
   39768:	str	r6, [r4, #44]	; 0x2c
   3976c:	str	r5, [r4, #52]	; 0x34
   39770:	str	ip, [r4, #58]	; 0x3a
   39774:	bls	39838 <__assert_fail@plt+0x27244>
   39778:	ldr	r3, [sp, #4]
   3977c:	adds	r5, r5, r3
   39780:	bcs	3a098 <__assert_fail@plt+0x27aa4>
   39784:	ldr	r3, [sp, #24]
   39788:	str	r5, [r4, #40]	; 0x28
   3978c:	ldr	ip, [r6]
   39790:	ldr	r1, [r6, #48]	; 0x30
   39794:	str	r3, [r4, #48]	; 0x30
   39798:	ldrd	r2, [r7]
   3979c:	str	ip, [r4, #4]
   397a0:	tst	r1, #4
   397a4:	streq	r8, [r4, #24]
   397a8:	strd	r2, [r4, #160]	; 0xa0
   397ac:	bne	398d8 <__assert_fail@plt+0x272e4>
   397b0:	ldr	r3, [r6, #44]	; 0x2c
   397b4:	cmp	r3, #0
   397b8:	beq	397c4 <__assert_fail@plt+0x271d0>
   397bc:	ands	r3, r1, #1024	; 0x400
   397c0:	beq	3991c <__assert_fail@plt+0x27328>
   397c4:	ldrb	r3, [r7, #18]
   397c8:	tst	r1, #8
   397cc:	sub	r0, r3, #1
   397d0:	beq	397dc <__assert_fail@plt+0x271e8>
   397d4:	tst	r3, #251	; 0xfb
   397d8:	bne	399d8 <__assert_fail@plt+0x273e4>
   397dc:	mov	r3, #11
   397e0:	cmp	r0, r3
   397e4:	strh	r3, [r4, #56]	; 0x38
   397e8:	bls	398bc <__assert_fail@plt+0x272c8>
   397ec:	mov	r1, #0
   397f0:	mov	r2, #2
   397f4:	mov	r3, #0
   397f8:	str	r1, [r4, #80]	; 0x50
   397fc:	strd	r2, [r4, #112]	; 0x70
   39800:	ldr	r2, [sp, #12]
   39804:	mov	r3, #0
   39808:	str	r3, [r4, #8]
   3980c:	cmp	r2, r3
   39810:	movw	r3, #10000	; 0x2710
   39814:	strne	r4, [fp, #8]
   39818:	streq	r4, [sp, #12]
   3981c:	cmp	r9, r3
   39820:	bne	396a0 <__assert_fail@plt+0x270ac>
   39824:	ldr	r5, [r6, #44]	; 0x2c
   39828:	cmp	r5, #0
   3982c:	beq	39b4c <__assert_fail@plt+0x27558>
   39830:	movw	r9, #10001	; 0x2711
   39834:	b	396b0 <__assert_fail@plt+0x270bc>
   39838:	ldr	ip, [r6, #36]	; 0x24
   3983c:	ldr	r3, [sp, #4]
   39840:	add	r0, ip, #256	; 0x100
   39844:	add	r0, r0, #1
   39848:	add	r0, r0, r3
   3984c:	add	r0, r0, r5
   39850:	cmp	ip, r0
   39854:	bhi	39a14 <__assert_fail@plt+0x27420>
   39858:	mov	r1, r0
   3985c:	str	r0, [r6, #36]	; 0x24
   39860:	mov	r0, r2
   39864:	str	r2, [sp, #8]
   39868:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3986c:	cmp	r0, #0
   39870:	ldr	r2, [sp, #8]
   39874:	beq	39e08 <__assert_fail@plt+0x27814>
   39878:	cmp	r2, r0
   3987c:	str	r0, [r6, #24]
   39880:	beq	398a0 <__assert_fail@plt+0x272ac>
   39884:	ldr	r2, [r6, #48]	; 0x30
   39888:	tst	r2, #4
   3988c:	ldrne	r3, [sp, #4]
   39890:	addne	r3, r0, r3
   39894:	strne	r3, [sp, #32]
   39898:	mov	r3, #1
   3989c:	str	r3, [sp, #36]	; 0x24
   398a0:	ldr	r3, [sp, #4]
   398a4:	ldr	r2, [r6, #36]	; 0x24
   398a8:	sub	r3, r2, r3
   398ac:	str	r3, [sp, #20]
   398b0:	b	39778 <__assert_fail@plt+0x27184>
   398b4:	mov	r3, #11
   398b8:	strh	r3, [r4, #56]	; 0x38
   398bc:	movw	r3, #25272	; 0x62b8
   398c0:	movt	r3, #5
   398c4:	ldr	r1, [r3, r0, lsl #2]
   398c8:	mov	r2, #2
   398cc:	mov	r3, #0
   398d0:	str	r1, [r4, #80]	; 0x50
   398d4:	b	397fc <__assert_fail@plt+0x27208>
   398d8:	ldr	ip, [r4, #28]
   398dc:	mov	r1, r8
   398e0:	ldr	r2, [r4, #52]	; 0x34
   398e4:	ldr	r0, [sp, #32]
   398e8:	str	ip, [r4, #24]
   398ec:	add	r2, r2, #1
   398f0:	bl	11fb8 <memmove@plt>
   398f4:	ldr	r1, [r6, #48]	; 0x30
   398f8:	b	397b0 <__assert_fail@plt+0x271bc>
   398fc:	ldrb	r3, [r7, #20]
   39900:	cmp	r3, #0
   39904:	beq	39914 <__assert_fail@plt+0x27320>
   39908:	ldrh	r3, [r7, #20]
   3990c:	cmp	r3, #46	; 0x2e
   39910:	bne	396fc <__assert_fail@plt+0x27108>
   39914:	mov	r4, fp
   39918:	b	396b0 <__assert_fail@plt+0x270bc>
   3991c:	mov	r2, r4
   39920:	ldr	r0, [r6, #32]
   39924:	bl	38f34 <__assert_fail@plt+0x26940>
   39928:	strh	r0, [r4, #56]	; 0x38
   3992c:	b	39800 <__assert_fail@plt+0x2720c>
   39930:	ldr	r5, [sl]
   39934:	ldr	r8, [sp, #12]
   39938:	ldr	fp, [sp, #16]
   3993c:	mov	r0, r4
   39940:	bl	38b10 <__assert_fail@plt+0x2651c>
   39944:	cmp	r8, #0
   39948:	bne	399b4 <__assert_fail@plt+0x273c0>
   3994c:	ldr	r0, [fp, #12]
   39950:	bl	125c4 <closedir@plt>
   39954:	ldr	r3, [r6, #48]	; 0x30
   39958:	mov	r2, #0
   3995c:	mov	r1, #7
   39960:	mov	r8, r2
   39964:	str	r2, [fp, #12]
   39968:	strh	r1, [fp, #56]	; 0x38
   3996c:	orr	r3, r3, #8192	; 0x2000
   39970:	str	r3, [r6, #48]	; 0x30
   39974:	str	r5, [sl]
   39978:	mov	r0, r8
   3997c:	add	sp, sp, #76	; 0x4c
   39980:	ldrd	r4, [sp]
   39984:	ldrd	r6, [sp, #8]
   39988:	ldrd	r8, [sp, #16]
   3998c:	ldrd	sl, [sp, #24]
   39990:	add	sp, sp, #32
   39994:	pop	{pc}		; (ldr pc, [sp], #4)
   39998:	mov	r0, r3
   3999c:	bl	125c4 <closedir@plt>
   399a0:	mov	r0, r8
   399a4:	bl	38b10 <__assert_fail@plt+0x2651c>
   399a8:	cmp	r4, #0
   399ac:	beq	3994c <__assert_fail@plt+0x27358>
   399b0:	mov	r8, r4
   399b4:	mov	r0, r8
   399b8:	ldr	r4, [r8, #8]
   399bc:	ldr	r3, [r8, #12]
   399c0:	cmp	r3, #0
   399c4:	bne	39998 <__assert_fail@plt+0x273a4>
   399c8:	bl	38b10 <__assert_fail@plt+0x2651c>
   399cc:	cmp	r4, #0
   399d0:	bne	399b0 <__assert_fail@plt+0x273bc>
   399d4:	b	3994c <__assert_fail@plt+0x27358>
   399d8:	ubfx	r2, r1, #4, #1
   399dc:	cmp	r3, #10
   399e0:	moveq	r3, r2
   399e4:	orrne	r3, r2, #1
   399e8:	cmp	r3, #0
   399ec:	beq	398b4 <__assert_fail@plt+0x272c0>
   399f0:	mov	r3, #11
   399f4:	cmp	r0, r3
   399f8:	strh	r3, [r4, #56]	; 0x38
   399fc:	bls	39c54 <__assert_fail@plt+0x27660>
   39a00:	mov	r1, #0
   39a04:	mov	r2, #1
   39a08:	mov	r3, #0
   39a0c:	str	r1, [r4, #80]	; 0x50
   39a10:	b	397fc <__assert_fail@plt+0x27208>
   39a14:	mov	r0, r2
   39a18:	ldr	r8, [sp, #12]
   39a1c:	ldr	fp, [sp, #16]
   39a20:	bl	38b10 <__assert_fail@plt+0x2651c>
   39a24:	mov	r3, #36	; 0x24
   39a28:	mov	r1, #0
   39a2c:	mov	r5, r3
   39a30:	str	r1, [r6, #24]
   39a34:	str	r3, [sl]
   39a38:	b	3993c <__assert_fail@plt+0x27348>
   39a3c:	ldr	r3, [r6, #48]	; 0x30
   39a40:	ldr	r1, [fp, #24]
   39a44:	and	r2, r3, #516	; 0x204
   39a48:	cmp	r2, #512	; 0x200
   39a4c:	ldreq	r0, [r6, #32]
   39a50:	mvnne	r0, #99	; 0x63
   39a54:	ands	r2, r3, #16
   39a58:	beq	39a68 <__assert_fail@plt+0x27474>
   39a5c:	tst	r3, #1
   39a60:	moveq	r2, #32768	; 0x8000
   39a64:	bne	39c70 <__assert_fail@plt+0x2767c>
   39a68:	add	r3, sp, #68	; 0x44
   39a6c:	bl	4ffa0 <__assert_fail@plt+0x3d9ac>
   39a70:	cmp	r0, #0
   39a74:	mov	r8, r0
   39a78:	str	r0, [fp, #12]
   39a7c:	beq	3a004 <__assert_fail@plt+0x27a10>
   39a80:	ldrh	r3, [fp, #56]	; 0x38
   39a84:	ldr	r0, [r6, #48]	; 0x30
   39a88:	cmp	r3, #11
   39a8c:	beq	39f44 <__assert_fail@plt+0x27950>
   39a90:	tst	r0, #256	; 0x100
   39a94:	bne	39e88 <__assert_fail@plt+0x27894>
   39a98:	ldr	r2, [r6, #44]	; 0x2c
   39a9c:	movw	r3, #34464	; 0x86a0
   39aa0:	movt	r3, #1
   39aa4:	cmp	r2, #0
   39aa8:	mvnne	r3, #0
   39aac:	str	r3, [sp, #28]
   39ab0:	ldr	r3, [sp, #40]	; 0x28
   39ab4:	cmp	r3, #2
   39ab8:	beq	39e78 <__assert_fail@plt+0x27884>
   39abc:	ldr	r3, [r6, #48]	; 0x30
   39ac0:	ldr	r0, [sp, #68]	; 0x44
   39ac4:	and	r3, r3, #56	; 0x38
   39ac8:	cmp	r3, #24
   39acc:	beq	39c80 <__assert_fail@plt+0x2768c>
   39ad0:	ldr	r3, [sp, #40]	; 0x28
   39ad4:	sub	r4, r3, #3
   39ad8:	clz	r4, r4
   39adc:	lsr	r4, r4, #5
   39ae0:	ldr	r3, [r6, #48]	; 0x30
   39ae4:	tst	r3, #512	; 0x200
   39ae8:	bne	39ff0 <__assert_fail@plt+0x279fc>
   39aec:	cmp	r0, #0
   39af0:	bge	39f84 <__assert_fail@plt+0x27990>
   39af4:	cmp	r4, #0
   39af8:	beq	39b08 <__assert_fail@plt+0x27514>
   39afc:	bl	12348 <__errno_location@plt>
   39b00:	ldr	r3, [r0]
   39b04:	str	r3, [fp, #32]
   39b08:	ldrh	r3, [fp, #58]	; 0x3a
   39b0c:	ldr	r0, [fp, #12]
   39b10:	orr	r3, r3, #1
   39b14:	strh	r3, [fp, #58]	; 0x3a
   39b18:	bl	125c4 <closedir@plt>
   39b1c:	ldr	r3, [r6, #48]	; 0x30
   39b20:	mov	r2, #0
   39b24:	str	r2, [fp, #12]
   39b28:	tst	r3, #512	; 0x200
   39b2c:	beq	39b3c <__assert_fail@plt+0x27548>
   39b30:	ldr	r0, [sp, #68]	; 0x44
   39b34:	cmp	r0, r2
   39b38:	bge	39fe4 <__assert_fail@plt+0x279f0>
   39b3c:	mov	r2, #0
   39b40:	str	r2, [fp, #12]
   39b44:	str	r2, [sp, #60]	; 0x3c
   39b48:	b	39600 <__assert_fail@plt+0x2700c>
   39b4c:	ldr	r0, [sp, #16]
   39b50:	ldr	r1, [sp, #68]	; 0x44
   39b54:	bl	38e14 <__assert_fail@plt+0x26820>
   39b58:	movw	r3, #26985	; 0x6969
   39b5c:	cmp	r0, r3
   39b60:	beq	39b84 <__assert_fail@plt+0x27590>
   39b64:	ldr	r3, [sp, #52]	; 0x34
   39b68:	cmp	r0, r3
   39b6c:	beq	39b84 <__assert_fail@plt+0x27590>
   39b70:	ldr	r3, [sp, #56]	; 0x38
   39b74:	cmp	r0, r3
   39b78:	movne	r3, #1
   39b7c:	strne	r3, [sp, #44]	; 0x2c
   39b80:	bne	39830 <__assert_fail@plt+0x2723c>
   39b84:	ldr	r3, [sp, #28]
   39b88:	add	r9, r9, #1
   39b8c:	str	r5, [sp, #44]	; 0x2c
   39b90:	cmp	r9, r3
   39b94:	bcc	396b0 <__assert_fail@plt+0x270bc>
   39b98:	ldr	r8, [sp, #12]
   39b9c:	ldr	r3, [sp, #36]	; 0x24
   39ba0:	ldr	fp, [sp, #16]
   39ba4:	cmp	r3, #0
   39ba8:	beq	39cec <__assert_fail@plt+0x276f8>
   39bac:	ldr	r3, [r6, #4]
   39bb0:	ldr	r1, [r6, #24]
   39bb4:	cmp	r3, #0
   39bb8:	beq	39bec <__assert_fail@plt+0x275f8>
   39bbc:	ldr	r2, [r3, #24]
   39bc0:	add	r0, r3, #168	; 0xa8
   39bc4:	cmp	r2, r0
   39bc8:	beq	39df4 <__assert_fail@plt+0x27800>
   39bcc:	ldr	r0, [r3, #28]
   39bd0:	str	r1, [r3, #28]
   39bd4:	sub	r2, r2, r0
   39bd8:	add	r2, r1, r2
   39bdc:	str	r2, [r3, #24]
   39be0:	ldr	r3, [r3, #8]
   39be4:	cmp	r3, #0
   39be8:	bne	39bbc <__assert_fail@plt+0x275c8>
   39bec:	ldr	r3, [r8, #48]	; 0x30
   39bf0:	cmp	r3, #0
   39bf4:	movge	r3, r8
   39bf8:	bge	39c10 <__assert_fail@plt+0x2761c>
   39bfc:	b	39cec <__assert_fail@plt+0x276f8>
   39c00:	ldr	r3, [r2, #48]	; 0x30
   39c04:	cmp	r3, #0
   39c08:	blt	39cec <__assert_fail@plt+0x276f8>
   39c0c:	mov	r3, r2
   39c10:	ldr	r2, [r3, #24]
   39c14:	add	r0, r3, #168	; 0xa8
   39c18:	cmp	r2, r0
   39c1c:	beq	39c30 <__assert_fail@plt+0x2763c>
   39c20:	ldr	r0, [r3, #28]
   39c24:	sub	r2, r2, r0
   39c28:	add	r2, r1, r2
   39c2c:	str	r2, [r3, #24]
   39c30:	ldr	r2, [r3, #8]
   39c34:	str	r1, [r3, #28]
   39c38:	cmp	r2, #0
   39c3c:	bne	39c00 <__assert_fail@plt+0x2760c>
   39c40:	ldr	r2, [r3, #4]
   39c44:	ldr	r3, [r2, #48]	; 0x30
   39c48:	cmp	r3, #0
   39c4c:	bge	39c0c <__assert_fail@plt+0x27618>
   39c50:	b	39cec <__assert_fail@plt+0x276f8>
   39c54:	movw	r3, #25272	; 0x62b8
   39c58:	movt	r3, #5
   39c5c:	ldr	r1, [r3, r0, lsl #2]
   39c60:	mov	r2, #1
   39c64:	mov	r3, #0
   39c68:	str	r1, [r4, #80]	; 0x50
   39c6c:	b	397fc <__assert_fail@plt+0x27208>
   39c70:	ldr	r2, [fp, #48]	; 0x30
   39c74:	cmp	r2, #0
   39c78:	movne	r2, #32768	; 0x8000
   39c7c:	b	39a68 <__assert_fail@plt+0x27474>
   39c80:	ldr	r3, [fp, #84]	; 0x54
   39c84:	cmp	r3, #2
   39c88:	bne	39ad0 <__assert_fail@plt+0x274dc>
   39c8c:	mov	r1, r0
   39c90:	mov	r0, fp
   39c94:	bl	38e14 <__assert_fail@plt+0x26820>
   39c98:	movw	r3, #26985	; 0x6969
   39c9c:	cmp	r0, r3
   39ca0:	beq	3a090 <__assert_fail@plt+0x27a9c>
   39ca4:	bgt	3a074 <__assert_fail@plt+0x27a80>
   39ca8:	movw	r3, #19778	; 0x4d42
   39cac:	movt	r3, #65363	; 0xff53
   39cb0:	cmp	r0, r3
   39cb4:	beq	3a090 <__assert_fail@plt+0x27a9c>
   39cb8:	cmp	r0, #0
   39cbc:	beq	3a090 <__assert_fail@plt+0x27a9c>
   39cc0:	ldr	r3, [sp, #40]	; 0x28
   39cc4:	cmp	r3, #3
   39cc8:	bne	39e78 <__assert_fail@plt+0x27884>
   39ccc:	mov	r4, #0
   39cd0:	ldr	r0, [sp, #68]	; 0x44
   39cd4:	b	39ae0 <__assert_fail@plt+0x274ec>
   39cd8:	ldr	r8, [sp, #12]
   39cdc:	mov	fp, r3
   39ce0:	ldr	r3, [sp, #36]	; 0x24
   39ce4:	cmp	r3, #0
   39ce8:	bne	39bac <__assert_fail@plt+0x275b8>
   39cec:	ldr	r3, [r6, #48]	; 0x30
   39cf0:	tst	r3, #4
   39cf4:	beq	39d24 <__assert_fail@plt+0x27730>
   39cf8:	ldr	r2, [sp, #4]
   39cfc:	ldr	r3, [r6, #36]	; 0x24
   39d00:	cmp	r9, #0
   39d04:	cmpne	r3, r2
   39d08:	bne	39d18 <__assert_fail@plt+0x27724>
   39d0c:	ldr	r3, [sp, #32]
   39d10:	sub	r3, r3, #1
   39d14:	str	r3, [sp, #32]
   39d18:	ldr	r2, [sp, #32]
   39d1c:	mov	r3, #0
   39d20:	strb	r3, [r2]
   39d24:	ldr	r2, [sp, #48]	; 0x30
   39d28:	ldr	r3, [sp, #60]	; 0x3c
   39d2c:	cmp	r2, #0
   39d30:	movne	r3, #0
   39d34:	cmp	r3, #0
   39d38:	beq	39d70 <__assert_fail@plt+0x2777c>
   39d3c:	ldr	r3, [sp, #40]	; 0x28
   39d40:	cmp	r9, #0
   39d44:	cmpne	r3, #1
   39d48:	bne	39d78 <__assert_fail@plt+0x27784>
   39d4c:	ldr	r3, [fp, #48]	; 0x30
   39d50:	cmp	r3, #0
   39d54:	bne	39f60 <__assert_fail@plt+0x2796c>
   39d58:	mov	r0, r6
   39d5c:	bl	39230 <__assert_fail@plt+0x26c3c>
   39d60:	adds	r0, r0, #0
   39d64:	movne	r0, #1
   39d68:	cmp	r0, #0
   39d6c:	bne	3a014 <__assert_fail@plt+0x27a20>
   39d70:	cmp	r9, #0
   39d74:	beq	39ed4 <__assert_fail@plt+0x278e0>
   39d78:	ldr	r3, [sp, #44]	; 0x2c
   39d7c:	cmp	r3, #0
   39d80:	bne	39e30 <__assert_fail@plt+0x2783c>
   39d84:	ldr	r3, [r6, #44]	; 0x2c
   39d88:	cmp	r3, #0
   39d8c:	cmpne	r9, #1
   39d90:	beq	39978 <__assert_fail@plt+0x27384>
   39d94:	mov	r1, r8
   39d98:	mov	r2, r9
   39d9c:	mov	r0, r6
   39da0:	bl	38d28 <__assert_fail@plt+0x26734>
   39da4:	mov	r8, r0
   39da8:	b	39978 <__assert_fail@plt+0x27384>
   39dac:	ldr	r3, [sl]
   39db0:	ldr	r8, [sp, #12]
   39db4:	ldr	fp, [sp, #16]
   39db8:	cmp	r3, #0
   39dbc:	beq	39dd8 <__assert_fail@plt+0x277e4>
   39dc0:	ldr	r2, [sp, #48]	; 0x30
   39dc4:	str	r3, [fp, #32]
   39dc8:	orrs	r2, r2, r9
   39dcc:	moveq	r3, #4
   39dd0:	movne	r3, #7
   39dd4:	strh	r3, [fp, #56]	; 0x38
   39dd8:	ldr	r0, [fp, #12]
   39ddc:	cmp	r0, #0
   39de0:	beq	39ce0 <__assert_fail@plt+0x276ec>
   39de4:	bl	125c4 <closedir@plt>
   39de8:	mov	r3, #0
   39dec:	str	r3, [fp, #12]
   39df0:	b	39ce0 <__assert_fail@plt+0x276ec>
   39df4:	str	r1, [r3, #28]
   39df8:	ldr	r3, [r3, #8]
   39dfc:	cmp	r3, #0
   39e00:	bne	39bbc <__assert_fail@plt+0x275c8>
   39e04:	b	39bec <__assert_fail@plt+0x275f8>
   39e08:	mov	r1, r0
   39e0c:	ldr	r0, [r6, #24]
   39e10:	str	r1, [sp, #4]
   39e14:	ldr	r8, [sp, #12]
   39e18:	ldr	fp, [sp, #16]
   39e1c:	bl	38b10 <__assert_fail@plt+0x2651c>
   39e20:	ldr	r1, [sp, #4]
   39e24:	ldr	r5, [sl]
   39e28:	str	r1, [r6, #24]
   39e2c:	b	3993c <__assert_fail@plt+0x27348>
   39e30:	movw	r3, #36088	; 0x8cf8
   39e34:	movt	r3, #3
   39e38:	mov	r1, r8
   39e3c:	mov	r2, r9
   39e40:	mov	r0, r6
   39e44:	str	r3, [r6, #44]	; 0x2c
   39e48:	bl	38d28 <__assert_fail@plt+0x26734>
   39e4c:	mov	r3, #0
   39e50:	mov	r8, r0
   39e54:	str	r3, [r6, #44]	; 0x2c
   39e58:	b	39978 <__assert_fail@plt+0x27384>
   39e5c:	movw	r3, #34464	; 0x86a0
   39e60:	movt	r3, #1
   39e64:	mov	r2, #1
   39e68:	str	r3, [sp, #28]
   39e6c:	str	r2, [sp, #60]	; 0x3c
   39e70:	ldr	r3, [r6, #48]	; 0x30
   39e74:	b	39600 <__assert_fail@plt+0x2700c>
   39e78:	mov	r3, #0
   39e7c:	str	r3, [sp, #60]	; 0x3c
   39e80:	ldr	r3, [r6, #48]	; 0x30
   39e84:	b	39600 <__assert_fail@plt+0x2700c>
   39e88:	add	r4, r6, #56	; 0x38
   39e8c:	mov	r2, fp
   39e90:	mov	r1, r4
   39e94:	bl	39164 <__assert_fail@plt+0x26b70>
   39e98:	mov	r3, #0
   39e9c:	mov	r2, fp
   39ea0:	ldr	r0, [r6, #32]
   39ea4:	ldr	r1, [r6, #48]	; 0x30
   39ea8:	bl	38f34 <__assert_fail@plt+0x26940>
   39eac:	mov	r2, fp
   39eb0:	mov	r1, r4
   39eb4:	ldr	r0, [r6, #48]	; 0x30
   39eb8:	bl	39090 <__assert_fail@plt+0x26a9c>
   39ebc:	subs	r8, r0, #0
   39ec0:	bne	39a98 <__assert_fail@plt+0x274a4>
   39ec4:	bl	12348 <__errno_location@plt>
   39ec8:	mov	r3, #12
   39ecc:	str	r3, [r0]
   39ed0:	b	39978 <__assert_fail@plt+0x27384>
   39ed4:	ldr	r3, [sp, #40]	; 0x28
   39ed8:	cmp	r3, #3
   39edc:	bne	39ef4 <__assert_fail@plt+0x27900>
   39ee0:	ldrh	r3, [fp, #56]	; 0x38
   39ee4:	cmp	r3, #4
   39ee8:	cmpne	r3, #7
   39eec:	movne	r3, #6
   39ef0:	strhne	r3, [fp, #56]	; 0x38
   39ef4:	cmp	r8, #0
   39ef8:	bne	39f1c <__assert_fail@plt+0x27928>
   39efc:	b	39f3c <__assert_fail@plt+0x27948>
   39f00:	mov	r0, r3
   39f04:	bl	125c4 <closedir@plt>
   39f08:	mov	r0, r8
   39f0c:	bl	38b10 <__assert_fail@plt+0x2651c>
   39f10:	cmp	r4, #0
   39f14:	beq	39f3c <__assert_fail@plt+0x27948>
   39f18:	mov	r8, r4
   39f1c:	mov	r0, r8
   39f20:	ldr	r4, [r8, #8]
   39f24:	ldr	r3, [r8, #12]
   39f28:	cmp	r3, #0
   39f2c:	bne	39f00 <__assert_fail@plt+0x2790c>
   39f30:	bl	38b10 <__assert_fail@plt+0x2651c>
   39f34:	cmp	r4, #0
   39f38:	bne	39f18 <__assert_fail@plt+0x27924>
   39f3c:	mov	r8, #0
   39f40:	b	39978 <__assert_fail@plt+0x27384>
   39f44:	mov	r1, r0
   39f48:	mov	r3, #0
   39f4c:	ldr	r0, [r6, #32]
   39f50:	mov	r2, fp
   39f54:	bl	38f34 <__assert_fail@plt+0x26940>
   39f58:	strh	r0, [fp, #56]	; 0x38
   39f5c:	b	39a98 <__assert_fail@plt+0x274a4>
   39f60:	movw	r3, #25320	; 0x62e8
   39f64:	movt	r3, #5
   39f68:	ldr	r1, [fp, #4]
   39f6c:	mvn	r2, #0
   39f70:	mov	r0, r6
   39f74:	bl	392dc <__assert_fail@plt+0x26ce8>
   39f78:	adds	r0, r0, #0
   39f7c:	movne	r0, #1
   39f80:	b	39d68 <__assert_fail@plt+0x27774>
   39f84:	mov	r2, r0
   39f88:	mov	r3, #0
   39f8c:	mov	r1, fp
   39f90:	mov	r0, r6
   39f94:	bl	392dc <__assert_fail@plt+0x26ce8>
   39f98:	cmp	r0, #0
   39f9c:	bne	39af4 <__assert_fail@plt+0x27500>
   39fa0:	mov	r3, #1
   39fa4:	str	r3, [sp, #60]	; 0x3c
   39fa8:	ldr	r3, [r6, #48]	; 0x30
   39fac:	b	39600 <__assert_fail@plt+0x2700c>
   39fb0:	ldr	r0, [fp, #12]
   39fb4:	mov	r8, #0
   39fb8:	bl	125c4 <closedir@plt>
   39fbc:	ldr	r3, [sp, #40]	; 0x28
   39fc0:	str	r8, [fp, #12]
   39fc4:	cmp	r3, #3
   39fc8:	bne	39f3c <__assert_fail@plt+0x27948>
   39fcc:	mov	r3, #4
   39fd0:	strh	r3, [fp, #56]	; 0x38
   39fd4:	bl	12348 <__errno_location@plt>
   39fd8:	ldr	r3, [r0]
   39fdc:	str	r3, [fp, #32]
   39fe0:	b	39978 <__assert_fail@plt+0x27384>
   39fe4:	bl	125ac <close@plt>
   39fe8:	ldr	r3, [r6, #48]	; 0x30
   39fec:	b	39b3c <__assert_fail@plt+0x27548>
   39ff0:	mov	r2, #3
   39ff4:	movw	r1, #1030	; 0x406
   39ff8:	bl	388c8 <__assert_fail@plt+0x262d4>
   39ffc:	str	r0, [sp, #68]	; 0x44
   3a000:	b	39aec <__assert_fail@plt+0x274f8>
   3a004:	ldr	r3, [sp, #40]	; 0x28
   3a008:	cmp	r3, #3
   3a00c:	bne	39f3c <__assert_fail@plt+0x27948>
   3a010:	b	39fcc <__assert_fail@plt+0x279d8>
   3a014:	ldr	r3, [r6, #48]	; 0x30
   3a018:	mov	r2, #7
   3a01c:	cmp	r8, #0
   3a020:	strh	r2, [fp, #56]	; 0x38
   3a024:	orr	r3, r3, #8192	; 0x2000
   3a028:	str	r3, [r6, #48]	; 0x30
   3a02c:	bne	3a050 <__assert_fail@plt+0x27a5c>
   3a030:	b	39f3c <__assert_fail@plt+0x27948>
   3a034:	mov	r0, r3
   3a038:	bl	125c4 <closedir@plt>
   3a03c:	mov	r0, r8
   3a040:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a044:	cmp	r4, #0
   3a048:	beq	39f3c <__assert_fail@plt+0x27948>
   3a04c:	mov	r8, r4
   3a050:	mov	r0, r8
   3a054:	ldr	r4, [r8, #8]
   3a058:	ldr	r3, [r8, #12]
   3a05c:	cmp	r3, #0
   3a060:	bne	3a034 <__assert_fail@plt+0x27a40>
   3a064:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a068:	cmp	r4, #0
   3a06c:	bne	3a04c <__assert_fail@plt+0x27a58>
   3a070:	b	39f3c <__assert_fail@plt+0x27948>
   3a074:	movw	r3, #40864	; 0x9fa0
   3a078:	cmp	r0, r3
   3a07c:	beq	3a090 <__assert_fail@plt+0x27a9c>
   3a080:	movw	r3, #16719	; 0x414f
   3a084:	movt	r3, #21318	; 0x5346
   3a088:	cmp	r0, r3
   3a08c:	bne	39cc0 <__assert_fail@plt+0x276cc>
   3a090:	ldr	r0, [sp, #68]	; 0x44
   3a094:	b	39ad0 <__assert_fail@plt+0x274dc>
   3a098:	ldr	r8, [sp, #12]
   3a09c:	mov	r0, r4
   3a0a0:	ldr	fp, [sp, #16]
   3a0a4:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a0a8:	cmp	r8, #0
   3a0ac:	bne	3a0d0 <__assert_fail@plt+0x27adc>
   3a0b0:	b	3a0f0 <__assert_fail@plt+0x27afc>
   3a0b4:	mov	r0, r3
   3a0b8:	bl	125c4 <closedir@plt>
   3a0bc:	mov	r0, r8
   3a0c0:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a0c4:	cmp	r4, #0
   3a0c8:	beq	3a0f0 <__assert_fail@plt+0x27afc>
   3a0cc:	mov	r8, r4
   3a0d0:	mov	r0, r8
   3a0d4:	ldr	r4, [r8, #8]
   3a0d8:	ldr	r3, [r8, #12]
   3a0dc:	cmp	r3, #0
   3a0e0:	bne	3a0b4 <__assert_fail@plt+0x27ac0>
   3a0e4:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a0e8:	cmp	r4, #0
   3a0ec:	bne	3a0cc <__assert_fail@plt+0x27ad8>
   3a0f0:	ldr	r0, [fp, #12]
   3a0f4:	mov	r8, #0
   3a0f8:	bl	125c4 <closedir@plt>
   3a0fc:	ldr	r3, [r6, #48]	; 0x30
   3a100:	mov	r1, #7
   3a104:	mov	r2, #36	; 0x24
   3a108:	str	r8, [fp, #12]
   3a10c:	strh	r1, [fp, #56]	; 0x38
   3a110:	orr	r3, r3, #8192	; 0x2000
   3a114:	str	r3, [r6, #48]	; 0x30
   3a118:	str	r2, [sl]
   3a11c:	b	39978 <__assert_fail@plt+0x27384>
   3a120:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3a124:	strd	r6, [sp, #8]
   3a128:	bic	r7, r1, #4080	; 0xff0
   3a12c:	bic	r7, r7, #15
   3a130:	strd	r8, [sp, #16]
   3a134:	strd	sl, [sp, #24]
   3a138:	cmp	r7, #0
   3a13c:	str	lr, [sp, #32]
   3a140:	sub	sp, sp, #36	; 0x24
   3a144:	str	r2, [sp, #12]
   3a148:	bne	3a5b4 <__assert_fail@plt+0x27fc0>
   3a14c:	and	r3, r1, #516	; 0x204
   3a150:	mov	r5, r1
   3a154:	cmp	r3, #516	; 0x204
   3a158:	beq	3a548 <__assert_fail@plt+0x27f54>
   3a15c:	ands	r7, r1, #18
   3a160:	beq	3a548 <__assert_fail@plt+0x27f54>
   3a164:	mov	r9, r0
   3a168:	mov	r1, #96	; 0x60
   3a16c:	mov	r0, #1
   3a170:	bl	384e0 <__assert_fail@plt+0x25eec>
   3a174:	subs	r7, r0, #0
   3a178:	beq	3a4c0 <__assert_fail@plt+0x27ecc>
   3a17c:	ldr	r3, [sp, #12]
   3a180:	tst	r5, #2
   3a184:	mvn	r2, #99	; 0x63
   3a188:	streq	r5, [r7, #48]	; 0x30
   3a18c:	str	r2, [r7, #32]
   3a190:	str	r3, [r7, #44]	; 0x2c
   3a194:	bicne	r3, r5, #512	; 0x200
   3a198:	orrne	r3, r3, #4
   3a19c:	strne	r3, [r7, #48]	; 0x30
   3a1a0:	ldr	r3, [r9]
   3a1a4:	cmp	r3, #0
   3a1a8:	beq	3a600 <__assert_fail@plt+0x2800c>
   3a1ac:	mov	r6, r9
   3a1b0:	mov	r4, #0
   3a1b4:	mov	r0, r3
   3a1b8:	bl	12300 <strlen@plt>
   3a1bc:	ldr	r3, [r6, #4]!
   3a1c0:	cmp	r4, r0
   3a1c4:	movcc	r4, r0
   3a1c8:	cmp	r3, #0
   3a1cc:	bne	3a1b4 <__assert_fail@plt+0x27bc0>
   3a1d0:	add	r4, r4, #1
   3a1d4:	cmp	r4, #4096	; 0x1000
   3a1d8:	movcc	r4, #4096	; 0x1000
   3a1dc:	ldr	r0, [r7, #24]
   3a1e0:	ldr	r3, [r7, #36]	; 0x24
   3a1e4:	add	r1, r3, #256	; 0x100
   3a1e8:	add	r1, r1, r4
   3a1ec:	cmp	r3, r1
   3a1f0:	bhi	3a5c8 <__assert_fail@plt+0x27fd4>
   3a1f4:	str	r1, [r7, #36]	; 0x24
   3a1f8:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3a1fc:	subs	r4, r0, #0
   3a200:	beq	3a64c <__assert_fail@plt+0x28058>
   3a204:	ldr	r3, [r9]
   3a208:	str	r4, [r7, #24]
   3a20c:	cmp	r3, #0
   3a210:	str	r3, [sp, #16]
   3a214:	beq	3a5a0 <__assert_fail@plt+0x27fac>
   3a218:	mov	r0, #176	; 0xb0
   3a21c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   3a220:	subs	ip, r0, #0
   3a224:	str	ip, [sp, #16]
   3a228:	beq	3a530 <__assert_fail@plt+0x27f3c>
   3a22c:	ldr	r2, [sp, #12]
   3a230:	mov	r3, #0
   3a234:	mvn	r1, #0
   3a238:	ldr	r0, [r7, #24]
   3a23c:	str	r3, [ip, #12]
   3a240:	str	r3, [ip, #16]
   3a244:	cmp	r2, r3
   3a248:	mov	r2, #196608	; 0x30000
   3a24c:	str	r3, [ip, #20]
   3a250:	str	r7, [ip, #44]	; 0x2c
   3a254:	str	r3, [ip, #32]
   3a258:	str	r3, [ip, #52]	; 0x34
   3a25c:	strb	r3, [ip, #168]	; 0xa8
   3a260:	moveq	r3, #1
   3a264:	str	r0, [ip, #28]
   3a268:	streq	r3, [sp, #24]
   3a26c:	str	r1, [ip, #48]	; 0x30
   3a270:	str	r2, [ip, #58]	; 0x3a
   3a274:	ldr	fp, [r9]
   3a278:	beq	3a288 <__assert_fail@plt+0x27c94>
   3a27c:	ldr	r3, [r7, #48]	; 0x30
   3a280:	ubfx	r3, r3, #10, #1
   3a284:	str	r3, [sp, #24]
   3a288:	cmp	fp, #0
   3a28c:	beq	3a678 <__assert_fail@plt+0x28084>
   3a290:	eor	r5, r5, #2048	; 0x800
   3a294:	mov	r3, #0
   3a298:	ubfx	r2, r5, #11, #1
   3a29c:	mov	r6, r3
   3a2a0:	mov	sl, r3
   3a2a4:	mov	r8, r3
   3a2a8:	str	r2, [sp, #20]
   3a2ac:	str	r3, [sp, #28]
   3a2b0:	b	3a2ec <__assert_fail@plt+0x27cf8>
   3a2b4:	ldr	r2, [sp, #12]
   3a2b8:	mov	r3, #11
   3a2bc:	mov	r0, #2
   3a2c0:	mov	r1, #0
   3a2c4:	strh	r3, [r4, #56]	; 0x38
   3a2c8:	strd	r0, [r4, #112]	; 0x70
   3a2cc:	cmp	r2, #0
   3a2d0:	beq	3a58c <__assert_fail@plt+0x27f98>
   3a2d4:	str	r8, [r4, #8]
   3a2d8:	mov	r8, r4
   3a2dc:	ldr	fp, [r9, #4]!
   3a2e0:	add	sl, sl, #1
   3a2e4:	cmp	fp, #0
   3a2e8:	beq	3a3e8 <__assert_fail@plt+0x27df4>
   3a2ec:	mov	r0, fp
   3a2f0:	bl	12300 <strlen@plt>
   3a2f4:	ldr	r3, [sp, #20]
   3a2f8:	mov	r5, r0
   3a2fc:	cmp	r0, #2
   3a300:	movls	r3, #0
   3a304:	andhi	r3, r3, #1
   3a308:	cmp	r3, #0
   3a30c:	bne	3a558 <__assert_fail@plt+0x27f64>
   3a310:	add	r0, r5, #176	; 0xb0
   3a314:	bic	r0, r0, #7
   3a318:	bl	3b49c <__assert_fail@plt+0x28ea8>
   3a31c:	subs	r4, r0, #0
   3a320:	beq	3a4e0 <__assert_fail@plt+0x27eec>
   3a324:	add	r3, r4, #168	; 0xa8
   3a328:	mov	r1, fp
   3a32c:	mov	r0, r3
   3a330:	mov	r2, r5
   3a334:	bl	12024 <memcpy@plt>
   3a338:	add	ip, r4, r5
   3a33c:	ldr	r2, [sp, #24]
   3a340:	mov	r3, r0
   3a344:	cmp	r8, #0
   3a348:	mov	r1, #3
   3a34c:	strb	r6, [ip, #168]	; 0xa8
   3a350:	moveq	r2, #0
   3a354:	ldr	ip, [sp, #16]
   3a358:	ldr	r0, [r7, #24]
   3a35c:	cmp	r2, #0
   3a360:	str	ip, [r4, #4]
   3a364:	str	r6, [r4, #12]
   3a368:	str	r6, [r4, #16]
   3a36c:	str	r6, [r4, #20]
   3a370:	str	r3, [r4, #24]
   3a374:	str	r0, [r4, #28]
   3a378:	str	r6, [r4, #32]
   3a37c:	str	r7, [r4, #44]	; 0x2c
   3a380:	str	r6, [r4, #48]	; 0x30
   3a384:	str	r5, [r4, #52]	; 0x34
   3a388:	strh	r6, [r4, #58]	; 0x3a
   3a38c:	strh	r1, [r4, #60]	; 0x3c
   3a390:	bne	3a2b4 <__assert_fail@plt+0x27cc0>
   3a394:	mov	r3, r2
   3a398:	mov	r2, r4
   3a39c:	ldr	r0, [r7, #32]
   3a3a0:	ldr	r1, [r7, #48]	; 0x30
   3a3a4:	bl	38f34 <__assert_fail@plt+0x26940>
   3a3a8:	ldr	r3, [sp, #12]
   3a3ac:	strh	r0, [r4, #56]	; 0x38
   3a3b0:	cmp	r3, #0
   3a3b4:	bne	3a2d4 <__assert_fail@plt+0x27ce0>
   3a3b8:	cmp	r8, #0
   3a3bc:	str	r3, [r4, #8]
   3a3c0:	moveq	r8, r4
   3a3c4:	streq	r4, [sp, #28]
   3a3c8:	beq	3a2dc <__assert_fail@plt+0x27ce8>
   3a3cc:	ldr	r3, [sp, #28]
   3a3d0:	str	r4, [sp, #28]
   3a3d4:	str	r4, [r3, #8]
   3a3d8:	ldr	fp, [r9, #4]!
   3a3dc:	add	sl, sl, #1
   3a3e0:	cmp	fp, #0
   3a3e4:	bne	3a2ec <__assert_fail@plt+0x27cf8>
   3a3e8:	ldr	r3, [sp, #12]
   3a3ec:	cmp	r3, #0
   3a3f0:	cmpne	sl, #1
   3a3f4:	bls	3a40c <__assert_fail@plt+0x27e18>
   3a3f8:	mov	r1, r8
   3a3fc:	mov	r2, sl
   3a400:	mov	r0, r7
   3a404:	bl	38d28 <__assert_fail@plt+0x26734>
   3a408:	mov	r8, r0
   3a40c:	mov	r0, #176	; 0xb0
   3a410:	bl	3b49c <__assert_fail@plt+0x28ea8>
   3a414:	cmp	r0, #0
   3a418:	streq	r0, [r7]
   3a41c:	beq	3a4e0 <__assert_fail@plt+0x27eec>
   3a420:	ldr	lr, [r7, #24]
   3a424:	movw	r4, #258	; 0x102
   3a428:	mov	r1, #0
   3a42c:	mov	ip, #1
   3a430:	mov	r2, #9
   3a434:	str	r0, [r7]
   3a438:	ldr	r3, [r7, #48]	; 0x30
   3a43c:	str	r8, [r0, #8]
   3a440:	str	r1, [r0, #12]
   3a444:	str	r1, [r0, #16]
   3a448:	str	r1, [r0, #20]
   3a44c:	tst	r4, r3
   3a450:	mov	r3, #3
   3a454:	str	lr, [r0, #28]
   3a458:	str	r1, [r0, #32]
   3a45c:	str	r7, [r0, #44]	; 0x2c
   3a460:	str	ip, [r0, #48]	; 0x30
   3a464:	str	r1, [r0, #52]	; 0x34
   3a468:	str	r2, [r0, #56]	; 0x38
   3a46c:	strh	r3, [r0, #60]	; 0x3c
   3a470:	strb	r1, [r0, #168]	; 0xa8
   3a474:	beq	3a5e4 <__assert_fail@plt+0x27ff0>
   3a478:	movw	r0, #35600	; 0x8b10
   3a47c:	movt	r0, #3
   3a480:	movw	r3, #35904	; 0x8c40
   3a484:	movt	r3, #3
   3a488:	movw	r2, #35968	; 0x8c80
   3a48c:	movt	r2, #3
   3a490:	str	r0, [sp]
   3a494:	mov	r0, #31
   3a498:	bl	297c4 <__assert_fail@plt+0x171d0>
   3a49c:	cmp	r0, #0
   3a4a0:	str	r0, [r7, #56]	; 0x38
   3a4a4:	beq	3a4e0 <__assert_fail@plt+0x27eec>
   3a4a8:	ldr	r3, [r7, #48]	; 0x30
   3a4ac:	tst	r3, #516	; 0x204
   3a4b0:	beq	3a608 <__assert_fail@plt+0x28014>
   3a4b4:	mvn	r1, #0
   3a4b8:	add	r0, r7, #60	; 0x3c
   3a4bc:	bl	4fb3c <__assert_fail@plt+0x3d548>
   3a4c0:	mov	r0, r7
   3a4c4:	add	sp, sp, #36	; 0x24
   3a4c8:	ldrd	r4, [sp]
   3a4cc:	ldrd	r6, [sp, #8]
   3a4d0:	ldrd	r8, [sp, #16]
   3a4d4:	ldrd	sl, [sp, #24]
   3a4d8:	add	sp, sp, #32
   3a4dc:	pop	{pc}		; (ldr pc, [sp], #4)
   3a4e0:	cmp	r8, #0
   3a4e4:	bne	3a508 <__assert_fail@plt+0x27f14>
   3a4e8:	b	3a528 <__assert_fail@plt+0x27f34>
   3a4ec:	mov	r0, r3
   3a4f0:	bl	125c4 <closedir@plt>
   3a4f4:	mov	r0, r8
   3a4f8:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a4fc:	cmp	r4, #0
   3a500:	beq	3a528 <__assert_fail@plt+0x27f34>
   3a504:	mov	r8, r4
   3a508:	mov	r0, r8
   3a50c:	ldr	r4, [r8, #8]
   3a510:	ldr	r3, [r8, #12]
   3a514:	cmp	r3, #0
   3a518:	bne	3a4ec <__assert_fail@plt+0x27ef8>
   3a51c:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a520:	cmp	r4, #0
   3a524:	bne	3a504 <__assert_fail@plt+0x27f10>
   3a528:	ldr	r0, [sp, #16]
   3a52c:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a530:	ldr	r0, [r7, #24]
   3a534:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a538:	mov	r0, r7
   3a53c:	mov	r7, #0
   3a540:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a544:	b	3a4c0 <__assert_fail@plt+0x27ecc>
   3a548:	bl	12348 <__errno_location@plt>
   3a54c:	mov	r3, #22
   3a550:	str	r3, [r0]
   3a554:	b	3a4c0 <__assert_fail@plt+0x27ecc>
   3a558:	sub	r3, r0, #1
   3a55c:	ldrb	r2, [fp, r3]
   3a560:	add	r3, fp, r3
   3a564:	cmp	r2, #47	; 0x2f
   3a568:	bne	3a310 <__assert_fail@plt+0x27d1c>
   3a56c:	ldrb	r2, [r3, #-1]!
   3a570:	cmp	r2, #47	; 0x2f
   3a574:	bne	3a310 <__assert_fail@plt+0x27d1c>
   3a578:	sub	r5, r5, #1
   3a57c:	cmp	r5, #1
   3a580:	bne	3a56c <__assert_fail@plt+0x27f78>
   3a584:	mov	r0, #176	; 0xb0
   3a588:	b	3a318 <__assert_fail@plt+0x27d24>
   3a58c:	ldr	r3, [sp, #28]
   3a590:	str	r2, [r4, #8]
   3a594:	str	r4, [sp, #28]
   3a598:	str	r4, [r3, #8]
   3a59c:	b	3a3d8 <__assert_fail@plt+0x27de4>
   3a5a0:	ldr	r3, [sp, #12]
   3a5a4:	cmp	r3, #0
   3a5a8:	beq	3a670 <__assert_fail@plt+0x2807c>
   3a5ac:	ldr	fp, [sp, #16]
   3a5b0:	b	3a27c <__assert_fail@plt+0x27c88>
   3a5b4:	bl	12348 <__errno_location@plt>
   3a5b8:	mov	r3, #22
   3a5bc:	mov	r7, #0
   3a5c0:	str	r3, [r0]
   3a5c4:	b	3a4c0 <__assert_fail@plt+0x27ecc>
   3a5c8:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a5cc:	mov	r3, #0
   3a5d0:	str	r3, [r7, #24]
   3a5d4:	bl	12348 <__errno_location@plt>
   3a5d8:	mov	r3, #36	; 0x24
   3a5dc:	str	r3, [r0]
   3a5e0:	b	3a538 <__assert_fail@plt+0x27f44>
   3a5e4:	mov	r0, #32
   3a5e8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   3a5ec:	cmp	r0, #0
   3a5f0:	str	r0, [r7, #56]	; 0x38
   3a5f4:	beq	3a4e0 <__assert_fail@plt+0x27eec>
   3a5f8:	bl	4f8b4 <__assert_fail@plt+0x3d2c0>
   3a5fc:	b	3a4a8 <__assert_fail@plt+0x27eb4>
   3a600:	mov	r4, #4096	; 0x1000
   3a604:	b	3a1dc <__assert_fail@plt+0x27be8>
   3a608:	lsl	r2, r3, #11
   3a60c:	tst	r3, #512	; 0x200
   3a610:	and	r2, r2, #32768	; 0x8000
   3a614:	orr	r2, r2, #540672	; 0x84000
   3a618:	orr	r2, r2, #2304	; 0x900
   3a61c:	beq	3a65c <__assert_fail@plt+0x28068>
   3a620:	movw	r1, #16940	; 0x422c
   3a624:	movt	r1, #5
   3a628:	ldr	r0, [r7, #32]
   3a62c:	bl	2da54 <__assert_fail@plt+0x1b460>
   3a630:	cmp	r0, #0
   3a634:	str	r0, [r7, #28]
   3a638:	bge	3a4b4 <__assert_fail@plt+0x27ec0>
   3a63c:	ldr	r3, [r7, #48]	; 0x30
   3a640:	orr	r3, r3, #4
   3a644:	str	r3, [r7, #48]	; 0x30
   3a648:	b	3a4b4 <__assert_fail@plt+0x27ec0>
   3a64c:	ldr	r0, [r7, #24]
   3a650:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a654:	str	r4, [r7, #24]
   3a658:	b	3a538 <__assert_fail@plt+0x27f44>
   3a65c:	mov	r1, r2
   3a660:	movw	r0, #16940	; 0x422c
   3a664:	movt	r0, #5
   3a668:	bl	28b00 <__assert_fail@plt+0x1650c>
   3a66c:	b	3a630 <__assert_fail@plt+0x2803c>
   3a670:	ldr	r8, [sp, #16]
   3a674:	b	3a40c <__assert_fail@plt+0x27e18>
   3a678:	mov	r8, fp
   3a67c:	b	3a40c <__assert_fail@plt+0x27e18>
   3a680:	ldr	r3, [r0]
   3a684:	strd	r4, [sp, #-16]!
   3a688:	str	r6, [sp, #8]
   3a68c:	mov	r6, r0
   3a690:	str	lr, [sp, #12]
   3a694:	cmp	r3, #0
   3a698:	beq	3a6ec <__assert_fail@plt+0x280f8>
   3a69c:	ldr	r2, [r3, #48]	; 0x30
   3a6a0:	cmp	r2, #0
   3a6a4:	bge	3a6c0 <__assert_fail@plt+0x280cc>
   3a6a8:	b	3a870 <__assert_fail@plt+0x2827c>
   3a6ac:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a6b0:	ldr	r3, [r4, #48]	; 0x30
   3a6b4:	cmp	r3, #0
   3a6b8:	blt	3a6e4 <__assert_fail@plt+0x280f0>
   3a6bc:	mov	r3, r4
   3a6c0:	ldr	r4, [r3, #8]
   3a6c4:	mov	r0, r3
   3a6c8:	cmp	r4, #0
   3a6cc:	bne	3a6ac <__assert_fail@plt+0x280b8>
   3a6d0:	ldr	r4, [r3, #4]
   3a6d4:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a6d8:	ldr	r3, [r4, #48]	; 0x30
   3a6dc:	cmp	r3, #0
   3a6e0:	bge	3a6bc <__assert_fail@plt+0x280c8>
   3a6e4:	mov	r0, r4
   3a6e8:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a6ec:	ldr	r4, [r6, #4]
   3a6f0:	cmp	r4, #0
   3a6f4:	bne	3a718 <__assert_fail@plt+0x28124>
   3a6f8:	b	3a738 <__assert_fail@plt+0x28144>
   3a6fc:	mov	r0, r3
   3a700:	bl	125c4 <closedir@plt>
   3a704:	mov	r0, r4
   3a708:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a70c:	cmp	r5, #0
   3a710:	beq	3a738 <__assert_fail@plt+0x28144>
   3a714:	mov	r4, r5
   3a718:	mov	r0, r4
   3a71c:	ldr	r5, [r4, #8]
   3a720:	ldr	r3, [r4, #12]
   3a724:	cmp	r3, #0
   3a728:	bne	3a6fc <__assert_fail@plt+0x28108>
   3a72c:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a730:	cmp	r5, #0
   3a734:	bne	3a714 <__assert_fail@plt+0x28120>
   3a738:	ldr	r0, [r6, #8]
   3a73c:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a740:	ldr	r0, [r6, #24]
   3a744:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a748:	ldr	r3, [r6, #48]	; 0x30
   3a74c:	tst	r3, #512	; 0x200
   3a750:	beq	3a800 <__assert_fail@plt+0x2820c>
   3a754:	ldr	r0, [r6, #32]
   3a758:	cmp	r0, #0
   3a75c:	bge	3a7e8 <__assert_fail@plt+0x281f4>
   3a760:	mov	r5, #0
   3a764:	add	r4, r6, #60	; 0x3c
   3a768:	b	3a778 <__assert_fail@plt+0x28184>
   3a76c:	bl	4fbb8 <__assert_fail@plt+0x3d5c4>
   3a770:	cmp	r0, #0
   3a774:	bge	3a7e0 <__assert_fail@plt+0x281ec>
   3a778:	mov	r0, r4
   3a77c:	bl	4fb68 <__assert_fail@plt+0x3d574>
   3a780:	cmp	r0, #0
   3a784:	mov	r0, r4
   3a788:	beq	3a76c <__assert_fail@plt+0x28178>
   3a78c:	ldr	r0, [r6, #52]	; 0x34
   3a790:	cmp	r0, #0
   3a794:	beq	3a79c <__assert_fail@plt+0x281a8>
   3a798:	bl	29b04 <__assert_fail@plt+0x17510>
   3a79c:	ldr	r3, [r6, #48]	; 0x30
   3a7a0:	movw	r2, #258	; 0x102
   3a7a4:	ldr	r0, [r6, #56]	; 0x38
   3a7a8:	tst	r2, r3
   3a7ac:	beq	3a838 <__assert_fail@plt+0x28244>
   3a7b0:	cmp	r0, #0
   3a7b4:	beq	3a7bc <__assert_fail@plt+0x281c8>
   3a7b8:	bl	29b04 <__assert_fail@plt+0x17510>
   3a7bc:	mov	r0, r6
   3a7c0:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a7c4:	cmp	r5, #0
   3a7c8:	bne	3a878 <__assert_fail@plt+0x28284>
   3a7cc:	mov	r0, r5
   3a7d0:	ldrd	r4, [sp]
   3a7d4:	ldr	r6, [sp, #8]
   3a7d8:	add	sp, sp, #12
   3a7dc:	pop	{pc}		; (ldr pc, [sp], #4)
   3a7e0:	bl	125ac <close@plt>
   3a7e4:	b	3a778 <__assert_fail@plt+0x28184>
   3a7e8:	bl	125ac <close@plt>
   3a7ec:	cmp	r0, #0
   3a7f0:	beq	3a760 <__assert_fail@plt+0x2816c>
   3a7f4:	bl	12348 <__errno_location@plt>
   3a7f8:	ldr	r5, [r0]
   3a7fc:	b	3a764 <__assert_fail@plt+0x28170>
   3a800:	tst	r3, #4
   3a804:	bne	3a760 <__assert_fail@plt+0x2816c>
   3a808:	ldr	r0, [r6, #28]
   3a80c:	bl	124f8 <fchdir@plt>
   3a810:	cmp	r0, #0
   3a814:	bne	3a840 <__assert_fail@plt+0x2824c>
   3a818:	ldr	r0, [r6, #28]
   3a81c:	bl	125ac <close@plt>
   3a820:	cmp	r0, #0
   3a824:	beq	3a760 <__assert_fail@plt+0x2816c>
   3a828:	bl	12348 <__errno_location@plt>
   3a82c:	mov	r4, r0
   3a830:	ldr	r5, [r4]
   3a834:	b	3a764 <__assert_fail@plt+0x28170>
   3a838:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a83c:	b	3a7bc <__assert_fail@plt+0x281c8>
   3a840:	bl	12348 <__errno_location@plt>
   3a844:	ldr	r5, [r0]
   3a848:	mov	r4, r0
   3a84c:	ldr	r0, [r6, #28]
   3a850:	bl	125ac <close@plt>
   3a854:	adds	r3, r0, #0
   3a858:	movne	r3, #1
   3a85c:	cmp	r5, #0
   3a860:	movne	r3, #0
   3a864:	cmp	r3, #0
   3a868:	beq	3a764 <__assert_fail@plt+0x28170>
   3a86c:	b	3a830 <__assert_fail@plt+0x2823c>
   3a870:	mov	r4, r3
   3a874:	b	3a6e4 <__assert_fail@plt+0x280f0>
   3a878:	bl	12348 <__errno_location@plt>
   3a87c:	str	r5, [r0]
   3a880:	mvn	r5, #0
   3a884:	b	3a7cc <__assert_fail@plt+0x281d8>
   3a888:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3a88c:	ldr	r4, [r0]
   3a890:	strd	r6, [sp, #8]
   3a894:	str	r8, [sp, #16]
   3a898:	str	lr, [sp, #20]
   3a89c:	sub	sp, sp, #8
   3a8a0:	cmp	r4, #0
   3a8a4:	beq	3aab4 <__assert_fail@plt+0x284c0>
   3a8a8:	ldr	r1, [r0, #48]	; 0x30
   3a8ac:	ands	r3, r1, #8192	; 0x2000
   3a8b0:	bne	3aab4 <__assert_fail@plt+0x284c0>
   3a8b4:	ldrh	r2, [r4, #60]	; 0x3c
   3a8b8:	mov	r8, r0
   3a8bc:	mov	r0, #3
   3a8c0:	strh	r0, [r4, #60]	; 0x3c
   3a8c4:	cmp	r2, #1
   3a8c8:	beq	3ad0c <__assert_fail@plt+0x28718>
   3a8cc:	cmp	r2, #2
   3a8d0:	ldrh	r3, [r4, #56]	; 0x38
   3a8d4:	beq	3a9d4 <__assert_fail@plt+0x283e0>
   3a8d8:	cmp	r3, #1
   3a8dc:	bne	3a90c <__assert_fail@plt+0x28318>
   3a8e0:	b	3aad4 <__assert_fail@plt+0x284e0>
   3a8e4:	mov	r0, r4
   3a8e8:	str	r5, [r8]
   3a8ec:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a8f0:	ldr	r4, [r5, #48]	; 0x30
   3a8f4:	cmp	r4, #0
   3a8f8:	beq	3ab54 <__assert_fail@plt+0x28560>
   3a8fc:	ldrh	r3, [r5, #60]	; 0x3c
   3a900:	mov	r4, r5
   3a904:	cmp	r3, #4
   3a908:	bne	3ac28 <__assert_fail@plt+0x28634>
   3a90c:	ldr	r5, [r4, #8]
   3a910:	cmp	r5, #0
   3a914:	bne	3a8e4 <__assert_fail@plt+0x282f0>
   3a918:	ldr	r6, [r4, #4]
   3a91c:	ldr	r3, [r6, #12]
   3a920:	cmp	r3, #0
   3a924:	bne	3ae84 <__assert_fail@plt+0x28890>
   3a928:	mov	r0, r4
   3a92c:	str	r6, [r8]
   3a930:	bl	38b10 <__assert_fail@plt+0x2651c>
   3a934:	ldr	r3, [r6, #48]	; 0x30
   3a938:	cmn	r3, #1
   3a93c:	beq	3ae64 <__assert_fail@plt+0x28870>
   3a940:	ldrh	r3, [r6, #56]	; 0x38
   3a944:	cmp	r3, #11
   3a948:	beq	3ad08 <__assert_fail@plt+0x28714>
   3a94c:	ldr	r2, [r8, #24]
   3a950:	mov	r1, #0
   3a954:	ldr	r3, [r6, #40]	; 0x28
   3a958:	strb	r1, [r2, r3]
   3a95c:	ldr	r3, [r6, #48]	; 0x30
   3a960:	cmp	r3, r1
   3a964:	beq	3aa80 <__assert_fail@plt+0x2848c>
   3a968:	ldrh	r3, [r6, #58]	; 0x3a
   3a96c:	tst	r3, #2
   3a970:	beq	3adc0 <__assert_fail@plt+0x287cc>
   3a974:	ldr	r3, [r8, #48]	; 0x30
   3a978:	ldr	r4, [r6, #36]	; 0x24
   3a97c:	tst	r3, #4
   3a980:	bne	3a9c8 <__assert_fail@plt+0x283d4>
   3a984:	tst	r3, #512	; 0x200
   3a988:	beq	3af60 <__assert_fail@plt+0x2896c>
   3a98c:	ldr	r1, [r8, #32]
   3a990:	sub	r3, r4, r1
   3a994:	cmn	r1, #100	; 0x64
   3a998:	clz	r3, r3
   3a99c:	lsr	r3, r3, #5
   3a9a0:	moveq	r3, #0
   3a9a4:	cmp	r3, #0
   3a9a8:	bne	3ad08 <__assert_fail@plt+0x28714>
   3a9ac:	add	r0, r8, #60	; 0x3c
   3a9b0:	bl	4fb70 <__assert_fail@plt+0x3d57c>
   3a9b4:	cmp	r0, #0
   3a9b8:	blt	3a9c0 <__assert_fail@plt+0x283cc>
   3a9bc:	bl	125ac <close@plt>
   3a9c0:	str	r4, [r8, #32]
   3a9c4:	ldr	r4, [r6, #36]	; 0x24
   3a9c8:	mov	r0, r4
   3a9cc:	bl	125ac <close@plt>
   3a9d0:	b	3adc8 <__assert_fail@plt+0x287d4>
   3a9d4:	sub	r2, r3, #12
   3a9d8:	cmp	r2, #1
   3a9dc:	bls	3acc4 <__assert_fail@plt+0x286d0>
   3a9e0:	cmp	r3, #1
   3a9e4:	bne	3a90c <__assert_fail@plt+0x28318>
   3a9e8:	tst	r1, #64	; 0x40
   3a9ec:	beq	3aa04 <__assert_fail@plt+0x28410>
   3a9f0:	ldrd	r2, [r8, #16]
   3a9f4:	ldrd	r6, [r4, #64]	; 0x40
   3a9f8:	cmp	r7, r3
   3a9fc:	cmpeq	r6, r2
   3aa00:	bne	3aadc <__assert_fail@plt+0x284e8>
   3aa04:	ldr	r5, [r8, #4]
   3aa08:	cmp	r5, #0
   3aa0c:	beq	3ad6c <__assert_fail@plt+0x28778>
   3aa10:	tst	r1, #4096	; 0x1000
   3aa14:	bne	3ad20 <__assert_fail@plt+0x2872c>
   3aa18:	mvn	r2, #0
   3aa1c:	mov	r1, r4
   3aa20:	ldr	r3, [r4, #24]
   3aa24:	mov	r0, r8
   3aa28:	bl	392dc <__assert_fail@plt+0x26ce8>
   3aa2c:	cmp	r0, #0
   3aa30:	beq	3ae4c <__assert_fail@plt+0x28858>
   3aa34:	bl	12348 <__errno_location@plt>
   3aa38:	ldrh	r3, [r4, #58]	; 0x3a
   3aa3c:	ldr	r2, [r0]
   3aa40:	orr	r3, r3, #1
   3aa44:	str	r2, [r4, #32]
   3aa48:	strh	r3, [r4, #58]	; 0x3a
   3aa4c:	ldr	r4, [r8, #4]
   3aa50:	cmp	r4, #0
   3aa54:	beq	3aa74 <__assert_fail@plt+0x28480>
   3aa58:	mov	r3, r4
   3aa5c:	ldr	r2, [r3, #4]
   3aa60:	ldr	r2, [r2, #24]
   3aa64:	str	r2, [r3, #24]
   3aa68:	ldr	r3, [r3, #8]
   3aa6c:	cmp	r3, #0
   3aa70:	bne	3aa5c <__assert_fail@plt+0x28468>
   3aa74:	mov	r3, #0
   3aa78:	str	r3, [r8, #4]
   3aa7c:	b	3ac30 <__assert_fail@plt+0x2863c>
   3aa80:	mov	r0, r8
   3aa84:	bl	39230 <__assert_fail@plt+0x26c3c>
   3aa88:	cmp	r0, #0
   3aa8c:	beq	3adc8 <__assert_fail@plt+0x287d4>
   3aa90:	bl	12348 <__errno_location@plt>
   3aa94:	ldr	r3, [r8, #48]	; 0x30
   3aa98:	ldr	r2, [r0]
   3aa9c:	orr	r0, r3, #8192	; 0x2000
   3aaa0:	ldrh	r3, [r6, #56]	; 0x38
   3aaa4:	str	r2, [r6, #32]
   3aaa8:	str	r0, [r8, #48]	; 0x30
   3aaac:	cmp	r3, #2
   3aab0:	bne	3addc <__assert_fail@plt+0x287e8>
   3aab4:	mov	r4, #0
   3aab8:	mov	r0, r4
   3aabc:	add	sp, sp, #8
   3aac0:	ldrd	r4, [sp]
   3aac4:	ldrd	r6, [sp, #8]
   3aac8:	ldr	r8, [sp, #16]
   3aacc:	add	sp, sp, #20
   3aad0:	pop	{pc}		; (ldr pc, [sp], #4)
   3aad4:	cmp	r2, #4
   3aad8:	bne	3a9e8 <__assert_fail@plt+0x283f4>
   3aadc:	ldrh	r3, [r4, #58]	; 0x3a
   3aae0:	tst	r3, #2
   3aae4:	bne	3aec4 <__assert_fail@plt+0x288d0>
   3aae8:	ldr	r5, [r8, #4]
   3aaec:	cmp	r5, #0
   3aaf0:	bne	3ab28 <__assert_fail@plt+0x28534>
   3aaf4:	mov	r3, #6
   3aaf8:	mov	r2, r4
   3aafc:	ldr	r0, [r8, #48]	; 0x30
   3ab00:	add	r1, r8, #56	; 0x38
   3ab04:	strh	r3, [r4, #56]	; 0x38
   3ab08:	bl	39164 <__assert_fail@plt+0x26b70>
   3ab0c:	b	3aab8 <__assert_fail@plt+0x284c4>
   3ab10:	bl	125c4 <closedir@plt>
   3ab14:	mov	r0, r5
   3ab18:	bl	38b10 <__assert_fail@plt+0x2651c>
   3ab1c:	cmp	r6, #0
   3ab20:	beq	3ab48 <__assert_fail@plt+0x28554>
   3ab24:	mov	r5, r6
   3ab28:	ldr	r6, [r5, #8]
   3ab2c:	ldr	r0, [r5, #12]
   3ab30:	cmp	r0, #0
   3ab34:	bne	3ab10 <__assert_fail@plt+0x2851c>
   3ab38:	mov	r0, r5
   3ab3c:	bl	38b10 <__assert_fail@plt+0x2651c>
   3ab40:	cmp	r6, #0
   3ab44:	bne	3ab24 <__assert_fail@plt+0x28530>
   3ab48:	mov	r3, #0
   3ab4c:	str	r3, [r8, #4]
   3ab50:	b	3aaf4 <__assert_fail@plt+0x28500>
   3ab54:	mov	r0, r8
   3ab58:	bl	39230 <__assert_fail@plt+0x26c3c>
   3ab5c:	ldr	r3, [r8, #48]	; 0x30
   3ab60:	cmp	r0, #0
   3ab64:	orrne	r3, r3, #8192	; 0x2000
   3ab68:	strne	r3, [r8, #48]	; 0x30
   3ab6c:	bne	3aab8 <__assert_fail@plt+0x284c4>
   3ab70:	movw	r2, #258	; 0x102
   3ab74:	ldr	r0, [r8, #56]	; 0x38
   3ab78:	tst	r2, r3
   3ab7c:	beq	3aebc <__assert_fail@plt+0x288c8>
   3ab80:	cmp	r0, #0
   3ab84:	beq	3ab8c <__assert_fail@plt+0x28598>
   3ab88:	bl	29b04 <__assert_fail@plt+0x17510>
   3ab8c:	ldr	r2, [r5, #52]	; 0x34
   3ab90:	add	r4, r5, #168	; 0xa8
   3ab94:	mov	r1, r4
   3ab98:	ldr	r0, [r8, #24]
   3ab9c:	str	r2, [r5, #40]	; 0x28
   3aba0:	add	r2, r2, #1
   3aba4:	bl	11fb8 <memmove@plt>
   3aba8:	mov	r0, r4
   3abac:	mov	r1, #47	; 0x2f
   3abb0:	bl	12468 <strrchr@plt>
   3abb4:	cmp	r0, #0
   3abb8:	beq	3abe8 <__assert_fail@plt+0x285f4>
   3abbc:	cmp	r4, r0
   3abc0:	beq	3ae54 <__assert_fail@plt+0x28860>
   3abc4:	add	r6, r0, #1
   3abc8:	mov	r0, r6
   3abcc:	bl	12300 <strlen@plt>
   3abd0:	mov	r7, r0
   3abd4:	mov	r1, r6
   3abd8:	mov	r0, r4
   3abdc:	add	r2, r7, #1
   3abe0:	bl	11fb8 <memmove@plt>
   3abe4:	str	r7, [r5, #52]	; 0x34
   3abe8:	ldr	r3, [r8, #24]
   3abec:	movw	r1, #258	; 0x102
   3abf0:	ldr	r2, [r8, #48]	; 0x30
   3abf4:	str	r3, [r5, #24]
   3abf8:	str	r3, [r5, #28]
   3abfc:	tst	r1, r2
   3ac00:	bne	3ae14 <__assert_fail@plt+0x28820>
   3ac04:	mov	r0, #32
   3ac08:	bl	3b49c <__assert_fail@plt+0x28ea8>
   3ac0c:	cmp	r0, #0
   3ac10:	str	r0, [r8, #56]	; 0x38
   3ac14:	beq	3af54 <__assert_fail@plt+0x28960>
   3ac18:	bl	4f8b4 <__assert_fail@plt+0x3d2c0>
   3ac1c:	mov	r4, r5
   3ac20:	ldrh	r3, [r5, #56]	; 0x38
   3ac24:	b	3ac74 <__assert_fail@plt+0x28680>
   3ac28:	cmp	r3, #2
   3ac2c:	beq	3aed0 <__assert_fail@plt+0x288dc>
   3ac30:	ldr	r0, [r4, #4]
   3ac34:	mov	ip, #47	; 0x2f
   3ac38:	add	r1, r4, #168	; 0xa8
   3ac3c:	ldr	r3, [r8, #24]
   3ac40:	ldr	lr, [r0, #28]
   3ac44:	ldr	r2, [r0, #40]	; 0x28
   3ac48:	sub	r0, r2, #1
   3ac4c:	ldrb	lr, [lr, r0]
   3ac50:	cmp	lr, ip
   3ac54:	movne	r0, r2
   3ac58:	strb	ip, [r3, r0]
   3ac5c:	add	r0, r3, r0
   3ac60:	ldr	r2, [r4, #52]	; 0x34
   3ac64:	add	r0, r0, #1
   3ac68:	add	r2, r2, #1
   3ac6c:	bl	11fb8 <memmove@plt>
   3ac70:	ldrh	r3, [r4, #56]	; 0x38
   3ac74:	cmp	r3, #11
   3ac78:	str	r4, [r8]
   3ac7c:	beq	3acec <__assert_fail@plt+0x286f8>
   3ac80:	cmp	r3, #1
   3ac84:	bne	3aab8 <__assert_fail@plt+0x284c4>
   3ac88:	ldr	r3, [r4, #48]	; 0x30
   3ac8c:	add	r1, r8, #56	; 0x38
   3ac90:	ldr	r0, [r8, #48]	; 0x30
   3ac94:	cmp	r3, #0
   3ac98:	ldrdeq	r2, [r4, #64]	; 0x40
   3ac9c:	strdeq	r2, [r8, #16]
   3aca0:	mov	r2, r4
   3aca4:	bl	39090 <__assert_fail@plt+0x26a9c>
   3aca8:	subs	r5, r0, #0
   3acac:	bne	3aab8 <__assert_fail@plt+0x284c4>
   3acb0:	bl	12348 <__errno_location@plt>
   3acb4:	mov	r3, #12
   3acb8:	mov	r4, r5
   3acbc:	str	r3, [r0]
   3acc0:	b	3aab8 <__assert_fail@plt+0x284c4>
   3acc4:	mov	r3, #1
   3acc8:	mov	r2, r4
   3accc:	ldr	r0, [r8, #32]
   3acd0:	bl	38f34 <__assert_fail@plt+0x26940>
   3acd4:	cmp	r0, #1
   3acd8:	strh	r0, [r4, #56]	; 0x38
   3acdc:	beq	3af78 <__assert_fail@plt+0x28984>
   3ace0:	cmp	r0, #11
   3ace4:	str	r4, [r8]
   3ace8:	bne	3aab8 <__assert_fail@plt+0x284c4>
   3acec:	ldrd	r2, [r4, #112]	; 0x70
   3acf0:	cmp	r3, #0
   3acf4:	cmpeq	r2, #2
   3acf8:	beq	3af00 <__assert_fail@plt+0x2890c>
   3acfc:	cmp	r3, #0
   3ad00:	cmpeq	r2, #1
   3ad04:	beq	3aab8 <__assert_fail@plt+0x284c4>
   3ad08:	bl	125a0 <abort@plt>
   3ad0c:	mov	r2, r4
   3ad10:	ldr	r0, [r8, #32]
   3ad14:	bl	38f34 <__assert_fail@plt+0x26940>
   3ad18:	strh	r0, [r4, #56]	; 0x38
   3ad1c:	b	3aab8 <__assert_fail@plt+0x284c4>
   3ad20:	bic	r1, r1, #4096	; 0x1000
   3ad24:	str	r1, [r8, #48]	; 0x30
   3ad28:	b	3ad44 <__assert_fail@plt+0x28750>
   3ad2c:	bl	125c4 <closedir@plt>
   3ad30:	mov	r0, r5
   3ad34:	bl	38b10 <__assert_fail@plt+0x2651c>
   3ad38:	cmp	r6, #0
   3ad3c:	beq	3ad64 <__assert_fail@plt+0x28770>
   3ad40:	mov	r5, r6
   3ad44:	ldr	r6, [r5, #8]
   3ad48:	ldr	r0, [r5, #12]
   3ad4c:	cmp	r0, #0
   3ad50:	bne	3ad2c <__assert_fail@plt+0x28738>
   3ad54:	mov	r0, r5
   3ad58:	bl	38b10 <__assert_fail@plt+0x2651c>
   3ad5c:	cmp	r6, #0
   3ad60:	bne	3ad40 <__assert_fail@plt+0x2874c>
   3ad64:	mov	r3, #0
   3ad68:	str	r3, [r8, #4]
   3ad6c:	mov	r1, #3
   3ad70:	mov	r0, r8
   3ad74:	bl	3959c <__assert_fail@plt+0x26fa8>
   3ad78:	cmp	r0, #0
   3ad7c:	str	r0, [r8, #4]
   3ad80:	movne	r4, r0
   3ad84:	bne	3aa74 <__assert_fail@plt+0x28480>
   3ad88:	ldr	r0, [r8, #48]	; 0x30
   3ad8c:	tst	r0, #8192	; 0x2000
   3ad90:	bne	3aab4 <__assert_fail@plt+0x284c0>
   3ad94:	ldr	r3, [r4, #32]
   3ad98:	cmp	r3, #0
   3ad9c:	beq	3adb0 <__assert_fail@plt+0x287bc>
   3ada0:	ldrh	r3, [r4, #56]	; 0x38
   3ada4:	cmp	r3, #4
   3ada8:	movne	r3, #7
   3adac:	strhne	r3, [r4, #56]	; 0x38
   3adb0:	add	r1, r8, #56	; 0x38
   3adb4:	mov	r2, r4
   3adb8:	bl	39164 <__assert_fail@plt+0x26b70>
   3adbc:	b	3aab8 <__assert_fail@plt+0x284c4>
   3adc0:	tst	r3, #1
   3adc4:	beq	3af20 <__assert_fail@plt+0x2892c>
   3adc8:	ldrh	r3, [r6, #56]	; 0x38
   3adcc:	ldr	r0, [r8, #48]	; 0x30
   3add0:	cmp	r3, #2
   3add4:	beq	3ae04 <__assert_fail@plt+0x28810>
   3add8:	ldr	r2, [r6, #32]
   3addc:	cmp	r2, #0
   3ade0:	movne	r3, #7
   3ade4:	strhne	r3, [r6, #56]	; 0x38
   3ade8:	bne	3ae04 <__assert_fail@plt+0x28810>
   3adec:	mov	r3, #6
   3adf0:	mov	r2, r6
   3adf4:	add	r1, r8, #56	; 0x38
   3adf8:	strh	r3, [r6, #56]	; 0x38
   3adfc:	bl	39164 <__assert_fail@plt+0x26b70>
   3ae00:	ldr	r0, [r8, #48]	; 0x30
   3ae04:	tst	r0, #8192	; 0x2000
   3ae08:	moveq	r4, r6
   3ae0c:	beq	3aab8 <__assert_fail@plt+0x284c4>
   3ae10:	b	3aab4 <__assert_fail@plt+0x284c0>
   3ae14:	movw	r1, #35600	; 0x8b10
   3ae18:	movt	r1, #3
   3ae1c:	movw	r3, #35904	; 0x8c40
   3ae20:	movt	r3, #3
   3ae24:	movw	r2, #35968	; 0x8c80
   3ae28:	movt	r2, #3
   3ae2c:	str	r1, [sp]
   3ae30:	mov	r0, #31
   3ae34:	mov	r1, #0
   3ae38:	bl	297c4 <__assert_fail@plt+0x171d0>
   3ae3c:	mov	r4, r5
   3ae40:	ldrh	r3, [r5, #56]	; 0x38
   3ae44:	str	r0, [r8, #56]	; 0x38
   3ae48:	b	3ac74 <__assert_fail@plt+0x28680>
   3ae4c:	ldr	r4, [r8, #4]
   3ae50:	b	3aa74 <__assert_fail@plt+0x28480>
   3ae54:	ldrb	r3, [r4, #1]
   3ae58:	cmp	r3, #0
   3ae5c:	beq	3abe8 <__assert_fail@plt+0x285f4>
   3ae60:	b	3abc4 <__assert_fail@plt+0x285d0>
   3ae64:	mov	r0, r6
   3ae68:	bl	38b10 <__assert_fail@plt+0x2651c>
   3ae6c:	bl	12348 <__errno_location@plt>
   3ae70:	mov	r3, #0
   3ae74:	mov	r4, r3
   3ae78:	str	r3, [r0]
   3ae7c:	str	r3, [r8]
   3ae80:	b	3aab8 <__assert_fail@plt+0x284c4>
   3ae84:	ldr	r2, [r8, #24]
   3ae88:	mov	r1, #3
   3ae8c:	mov	r0, r8
   3ae90:	ldr	r3, [r6, #40]	; 0x28
   3ae94:	str	r6, [r8]
   3ae98:	strb	r5, [r2, r3]
   3ae9c:	bl	3959c <__assert_fail@plt+0x26fa8>
   3aea0:	subs	r3, r0, #0
   3aea4:	bne	3af44 <__assert_fail@plt+0x28950>
   3aea8:	ldr	r3, [r8, #48]	; 0x30
   3aeac:	tst	r3, #8192	; 0x2000
   3aeb0:	bne	3aab4 <__assert_fail@plt+0x284c0>
   3aeb4:	ldr	r6, [r4, #4]
   3aeb8:	b	3a928 <__assert_fail@plt+0x28334>
   3aebc:	bl	38b10 <__assert_fail@plt+0x2651c>
   3aec0:	b	3ab8c <__assert_fail@plt+0x28598>
   3aec4:	ldr	r0, [r4, #36]	; 0x24
   3aec8:	bl	125ac <close@plt>
   3aecc:	b	3aae8 <__assert_fail@plt+0x284f4>
   3aed0:	mov	r3, #1
   3aed4:	mov	r2, r5
   3aed8:	ldr	r0, [r8, #32]
   3aedc:	ldr	r1, [r8, #48]	; 0x30
   3aee0:	bl	38f34 <__assert_fail@plt+0x26940>
   3aee4:	cmp	r0, #1
   3aee8:	strh	r0, [r5, #56]	; 0x38
   3aeec:	beq	3afd0 <__assert_fail@plt+0x289dc>
   3aef0:	mov	r3, #3
   3aef4:	mov	r4, r5
   3aef8:	strh	r3, [r5, #60]	; 0x3c
   3aefc:	b	3ac30 <__assert_fail@plt+0x2863c>
   3af00:	mov	r3, #0
   3af04:	mov	r2, r4
   3af08:	ldr	r0, [r8, #32]
   3af0c:	ldr	r1, [r8, #48]	; 0x30
   3af10:	bl	38f34 <__assert_fail@plt+0x26940>
   3af14:	mov	r3, r0
   3af18:	strh	r0, [r4, #56]	; 0x38
   3af1c:	b	3ac80 <__assert_fail@plt+0x2868c>
   3af20:	movw	r3, #25320	; 0x62e8
   3af24:	movt	r3, #5
   3af28:	ldr	r1, [r6, #4]
   3af2c:	mvn	r2, #0
   3af30:	mov	r0, r8
   3af34:	bl	392dc <__assert_fail@plt+0x26ce8>
   3af38:	cmp	r0, #0
   3af3c:	beq	3adc8 <__assert_fail@plt+0x287d4>
   3af40:	b	3aa90 <__assert_fail@plt+0x2849c>
   3af44:	mov	r0, r4
   3af48:	mov	r4, r3
   3af4c:	bl	38b10 <__assert_fail@plt+0x2651c>
   3af50:	b	3ac30 <__assert_fail@plt+0x2863c>
   3af54:	ldrh	r3, [r5, #56]	; 0x38
   3af58:	mov	r4, r5
   3af5c:	b	3ac74 <__assert_fail@plt+0x28680>
   3af60:	mov	r0, r4
   3af64:	bl	124f8 <fchdir@plt>
   3af68:	cmp	r0, #0
   3af6c:	bne	3b020 <__assert_fail@plt+0x28a2c>
   3af70:	ldr	r4, [r6, #36]	; 0x24
   3af74:	b	3a9c8 <__assert_fail@plt+0x283d4>
   3af78:	ldr	r3, [r8, #48]	; 0x30
   3af7c:	tst	r3, #4
   3af80:	strne	r4, [r8]
   3af84:	bne	3ac88 <__assert_fail@plt+0x28694>
   3af88:	lsl	r2, r3, #11
   3af8c:	tst	r3, #512	; 0x200
   3af90:	and	r2, r2, #32768	; 0x8000
   3af94:	orr	r2, r2, #540672	; 0x84000
   3af98:	orr	r2, r2, #2304	; 0x900
   3af9c:	beq	3b040 <__assert_fail@plt+0x28a4c>
   3afa0:	movw	r1, #16940	; 0x422c
   3afa4:	movt	r1, #5
   3afa8:	ldr	r0, [r8, #32]
   3afac:	bl	2da54 <__assert_fail@plt+0x1b460>
   3afb0:	cmp	r0, #0
   3afb4:	str	r0, [r4, #36]	; 0x24
   3afb8:	blt	3b054 <__assert_fail@plt+0x28a60>
   3afbc:	ldrh	r2, [r4, #58]	; 0x3a
   3afc0:	ldrh	r3, [r4, #56]	; 0x38
   3afc4:	orr	r2, r2, #2
   3afc8:	strh	r2, [r4, #58]	; 0x3a
   3afcc:	b	3ac74 <__assert_fail@plt+0x28680>
   3afd0:	ldr	r3, [r8, #48]	; 0x30
   3afd4:	tst	r3, #4
   3afd8:	bne	3aef0 <__assert_fail@plt+0x288fc>
   3afdc:	lsl	r2, r3, #11
   3afe0:	tst	r3, #512	; 0x200
   3afe4:	and	r2, r2, #32768	; 0x8000
   3afe8:	orr	r2, r2, #540672	; 0x84000
   3afec:	orr	r2, r2, #2304	; 0x900
   3aff0:	beq	3b070 <__assert_fail@plt+0x28a7c>
   3aff4:	movw	r1, #16940	; 0x422c
   3aff8:	movt	r1, #5
   3affc:	ldr	r0, [r8, #32]
   3b000:	bl	2da54 <__assert_fail@plt+0x1b460>
   3b004:	cmp	r0, #0
   3b008:	str	r0, [r5, #36]	; 0x24
   3b00c:	blt	3b084 <__assert_fail@plt+0x28a90>
   3b010:	ldrh	r3, [r5, #58]	; 0x3a
   3b014:	orr	r3, r3, #2
   3b018:	strh	r3, [r5, #58]	; 0x3a
   3b01c:	b	3aef0 <__assert_fail@plt+0x288fc>
   3b020:	bl	12348 <__errno_location@plt>
   3b024:	ldr	r3, [r8, #48]	; 0x30
   3b028:	ldr	r2, [r0]
   3b02c:	ldr	r4, [r6, #36]	; 0x24
   3b030:	orr	r3, r3, #8192	; 0x2000
   3b034:	str	r2, [r6, #32]
   3b038:	str	r3, [r8, #48]	; 0x30
   3b03c:	b	3a9c8 <__assert_fail@plt+0x283d4>
   3b040:	mov	r1, r2
   3b044:	movw	r0, #16940	; 0x422c
   3b048:	movt	r0, #5
   3b04c:	bl	28b00 <__assert_fail@plt+0x1650c>
   3b050:	b	3afb0 <__assert_fail@plt+0x289bc>
   3b054:	bl	12348 <__errno_location@plt>
   3b058:	ldr	r3, [r0]
   3b05c:	mov	r2, #7
   3b060:	str	r3, [r4, #32]
   3b064:	strh	r2, [r4, #56]	; 0x38
   3b068:	str	r4, [r8]
   3b06c:	b	3aab8 <__assert_fail@plt+0x284c4>
   3b070:	mov	r1, r2
   3b074:	movw	r0, #16940	; 0x422c
   3b078:	movt	r0, #5
   3b07c:	bl	28b00 <__assert_fail@plt+0x1650c>
   3b080:	b	3b004 <__assert_fail@plt+0x28a10>
   3b084:	bl	12348 <__errno_location@plt>
   3b088:	ldr	r3, [r0]
   3b08c:	mov	r2, #7
   3b090:	str	r3, [r5, #32]
   3b094:	strh	r2, [r5, #56]	; 0x38
   3b098:	b	3aef0 <__assert_fail@plt+0x288fc>
   3b09c:	cmp	r2, #4
   3b0a0:	bhi	3b0b4 <__assert_fail@plt+0x28ac0>
   3b0a4:	mov	r3, #0
   3b0a8:	strh	r2, [r1, #60]	; 0x3c
   3b0ac:	mov	r0, r3
   3b0b0:	bx	lr
   3b0b4:	str	r4, [sp, #-8]!
   3b0b8:	str	lr, [sp, #4]
   3b0bc:	bl	12348 <__errno_location@plt>
   3b0c0:	mov	r2, #22
   3b0c4:	mov	r3, #1
   3b0c8:	ldr	r4, [sp]
   3b0cc:	add	sp, sp, #4
   3b0d0:	str	r2, [r0]
   3b0d4:	mov	r0, r3
   3b0d8:	pop	{pc}		; (ldr pc, [sp], #4)
   3b0dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3b0e0:	mov	r5, r0
   3b0e4:	strd	r6, [sp, #8]
   3b0e8:	strd	r8, [sp, #16]
   3b0ec:	mov	r8, r1
   3b0f0:	str	sl, [sp, #24]
   3b0f4:	str	lr, [sp, #28]
   3b0f8:	bl	12348 <__errno_location@plt>
   3b0fc:	bics	r2, r8, #4096	; 0x1000
   3b100:	mov	r6, r0
   3b104:	movne	r3, #22
   3b108:	movne	r0, #0
   3b10c:	strne	r3, [r6]
   3b110:	bne	3b1d8 <__assert_fail@plt+0x28be4>
   3b114:	ldr	r9, [r5]
   3b118:	str	r2, [r6]
   3b11c:	ldr	r3, [r5, #48]	; 0x30
   3b120:	ands	r0, r3, #8192	; 0x2000
   3b124:	bne	3b288 <__assert_fail@plt+0x28c94>
   3b128:	ldrh	r3, [r9, #56]	; 0x38
   3b12c:	cmp	r3, #9
   3b130:	beq	3b290 <__assert_fail@plt+0x28c9c>
   3b134:	cmp	r3, #1
   3b138:	bne	3b1d8 <__assert_fail@plt+0x28be4>
   3b13c:	ldr	r4, [r5, #4]
   3b140:	cmp	r4, #0
   3b144:	bne	3b164 <__assert_fail@plt+0x28b70>
   3b148:	b	3b184 <__assert_fail@plt+0x28b90>
   3b14c:	bl	125c4 <closedir@plt>
   3b150:	mov	r0, r4
   3b154:	bl	38b10 <__assert_fail@plt+0x2651c>
   3b158:	cmp	r7, #0
   3b15c:	beq	3b184 <__assert_fail@plt+0x28b90>
   3b160:	mov	r4, r7
   3b164:	ldr	r7, [r4, #8]
   3b168:	ldr	r0, [r4, #12]
   3b16c:	cmp	r0, #0
   3b170:	bne	3b14c <__assert_fail@plt+0x28b58>
   3b174:	mov	r0, r4
   3b178:	bl	38b10 <__assert_fail@plt+0x2651c>
   3b17c:	cmp	r7, #0
   3b180:	bne	3b160 <__assert_fail@plt+0x28b6c>
   3b184:	cmp	r8, #4096	; 0x1000
   3b188:	movne	r4, #1
   3b18c:	bne	3b1a0 <__assert_fail@plt+0x28bac>
   3b190:	ldr	r3, [r5, #48]	; 0x30
   3b194:	mov	r4, #2
   3b198:	orr	r3, r3, #4096	; 0x1000
   3b19c:	str	r3, [r5, #48]	; 0x30
   3b1a0:	ldr	r3, [r9, #48]	; 0x30
   3b1a4:	cmp	r3, #0
   3b1a8:	bne	3b1c8 <__assert_fail@plt+0x28bd4>
   3b1ac:	ldr	r3, [r9, #24]
   3b1b0:	ldrb	r3, [r3]
   3b1b4:	cmp	r3, #47	; 0x2f
   3b1b8:	beq	3b1c8 <__assert_fail@plt+0x28bd4>
   3b1bc:	ldr	r3, [r5, #48]	; 0x30
   3b1c0:	tst	r3, #4
   3b1c4:	beq	3b1f0 <__assert_fail@plt+0x28bfc>
   3b1c8:	mov	r1, r4
   3b1cc:	mov	r0, r5
   3b1d0:	bl	3959c <__assert_fail@plt+0x26fa8>
   3b1d4:	str	r0, [r5, #4]
   3b1d8:	ldrd	r4, [sp]
   3b1dc:	ldrd	r6, [sp, #8]
   3b1e0:	ldrd	r8, [sp, #16]
   3b1e4:	ldr	sl, [sp, #24]
   3b1e8:	add	sp, sp, #28
   3b1ec:	pop	{pc}		; (ldr pc, [sp], #4)
   3b1f0:	lsl	r2, r3, #11
   3b1f4:	tst	r3, #512	; 0x200
   3b1f8:	and	r2, r2, #32768	; 0x8000
   3b1fc:	orr	r2, r2, #540672	; 0x84000
   3b200:	orr	r2, r2, #2304	; 0x900
   3b204:	beq	3b298 <__assert_fail@plt+0x28ca4>
   3b208:	movw	r1, #16940	; 0x422c
   3b20c:	movt	r1, #5
   3b210:	ldr	r0, [r5, #32]
   3b214:	bl	2da54 <__assert_fail@plt+0x1b460>
   3b218:	mov	r7, r0
   3b21c:	cmp	r7, #0
   3b220:	movlt	r3, #0
   3b224:	movlt	r0, r3
   3b228:	strlt	r3, [r5, #4]
   3b22c:	blt	3b1d8 <__assert_fail@plt+0x28be4>
   3b230:	mov	r1, r4
   3b234:	mov	r0, r5
   3b238:	bl	3959c <__assert_fail@plt+0x26fa8>
   3b23c:	ldr	r3, [r5, #48]	; 0x30
   3b240:	str	r0, [r5, #4]
   3b244:	ands	r4, r3, #512	; 0x200
   3b248:	beq	3b2b0 <__assert_fail@plt+0x28cbc>
   3b24c:	ldr	r1, [r5, #32]
   3b250:	sub	r3, r7, r1
   3b254:	cmn	r1, #100	; 0x64
   3b258:	clz	r3, r3
   3b25c:	lsr	r3, r3, #5
   3b260:	moveq	r3, #0
   3b264:	cmp	r3, #0
   3b268:	bne	3b2e8 <__assert_fail@plt+0x28cf4>
   3b26c:	add	r0, r5, #60	; 0x3c
   3b270:	bl	4fb70 <__assert_fail@plt+0x3d57c>
   3b274:	cmp	r0, #0
   3b278:	blt	3b280 <__assert_fail@plt+0x28c8c>
   3b27c:	bl	125ac <close@plt>
   3b280:	str	r7, [r5, #32]
   3b284:	b	3b2c8 <__assert_fail@plt+0x28cd4>
   3b288:	mov	r0, r2
   3b28c:	b	3b1d8 <__assert_fail@plt+0x28be4>
   3b290:	ldr	r0, [r9, #8]
   3b294:	b	3b1d8 <__assert_fail@plt+0x28be4>
   3b298:	mov	r1, r2
   3b29c:	movw	r0, #16940	; 0x422c
   3b2a0:	movt	r0, #5
   3b2a4:	bl	28b00 <__assert_fail@plt+0x1650c>
   3b2a8:	mov	r7, r0
   3b2ac:	b	3b21c <__assert_fail@plt+0x28c28>
   3b2b0:	mov	r0, r7
   3b2b4:	bl	124f8 <fchdir@plt>
   3b2b8:	cmp	r0, #0
   3b2bc:	bne	3b2d0 <__assert_fail@plt+0x28cdc>
   3b2c0:	mov	r0, r7
   3b2c4:	bl	125ac <close@plt>
   3b2c8:	ldr	r0, [r5, #4]
   3b2cc:	b	3b1d8 <__assert_fail@plt+0x28be4>
   3b2d0:	ldr	r5, [r6]
   3b2d4:	mov	r0, r7
   3b2d8:	bl	125ac <close@plt>
   3b2dc:	mov	r0, r4
   3b2e0:	str	r5, [r6]
   3b2e4:	b	3b1d8 <__assert_fail@plt+0x28be4>
   3b2e8:	bl	125a0 <abort@plt>
   3b2ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3b2f0:	mov	r5, r1
   3b2f4:	strd	r6, [sp, #8]
   3b2f8:	str	r8, [sp, #16]
   3b2fc:	str	lr, [sp, #20]
   3b300:	bl	122e8 <getfilecon@plt>
   3b304:	subs	r4, r0, #0
   3b308:	beq	3b368 <__assert_fail@plt+0x28d74>
   3b30c:	cmp	r4, #10
   3b310:	beq	3b32c <__assert_fail@plt+0x28d38>
   3b314:	mov	r0, r4
   3b318:	ldrd	r4, [sp]
   3b31c:	ldrd	r6, [sp, #8]
   3b320:	ldr	r8, [sp, #16]
   3b324:	add	sp, sp, #20
   3b328:	pop	{pc}		; (ldr pc, [sp], #4)
   3b32c:	ldr	r6, [r5]
   3b330:	movw	r1, #25324	; 0x62ec
   3b334:	movt	r1, #5
   3b338:	mov	r0, r6
   3b33c:	bl	11f40 <strcmp@plt>
   3b340:	subs	r7, r0, #0
   3b344:	bne	3b314 <__assert_fail@plt+0x28d20>
   3b348:	mov	r0, r6
   3b34c:	mvn	r4, #0
   3b350:	bl	1251c <freecon@plt>
   3b354:	str	r7, [r5]
   3b358:	bl	12348 <__errno_location@plt>
   3b35c:	mov	r3, #61	; 0x3d
   3b360:	str	r3, [r0]
   3b364:	b	3b314 <__assert_fail@plt+0x28d20>
   3b368:	bl	12348 <__errno_location@plt>
   3b36c:	mov	r3, #95	; 0x5f
   3b370:	mvn	r4, #0
   3b374:	str	r3, [r0]
   3b378:	b	3b314 <__assert_fail@plt+0x28d20>
   3b37c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3b380:	mov	r5, r1
   3b384:	strd	r6, [sp, #8]
   3b388:	str	r8, [sp, #16]
   3b38c:	str	lr, [sp, #20]
   3b390:	bl	12234 <lgetfilecon@plt>
   3b394:	subs	r4, r0, #0
   3b398:	beq	3b3f8 <__assert_fail@plt+0x28e04>
   3b39c:	cmp	r4, #10
   3b3a0:	beq	3b3bc <__assert_fail@plt+0x28dc8>
   3b3a4:	mov	r0, r4
   3b3a8:	ldrd	r4, [sp]
   3b3ac:	ldrd	r6, [sp, #8]
   3b3b0:	ldr	r8, [sp, #16]
   3b3b4:	add	sp, sp, #20
   3b3b8:	pop	{pc}		; (ldr pc, [sp], #4)
   3b3bc:	ldr	r6, [r5]
   3b3c0:	movw	r1, #25324	; 0x62ec
   3b3c4:	movt	r1, #5
   3b3c8:	mov	r0, r6
   3b3cc:	bl	11f40 <strcmp@plt>
   3b3d0:	subs	r7, r0, #0
   3b3d4:	bne	3b3a4 <__assert_fail@plt+0x28db0>
   3b3d8:	mov	r0, r6
   3b3dc:	mvn	r4, #0
   3b3e0:	bl	1251c <freecon@plt>
   3b3e4:	str	r7, [r5]
   3b3e8:	bl	12348 <__errno_location@plt>
   3b3ec:	mov	r3, #61	; 0x3d
   3b3f0:	str	r3, [r0]
   3b3f4:	b	3b3a4 <__assert_fail@plt+0x28db0>
   3b3f8:	bl	12348 <__errno_location@plt>
   3b3fc:	mov	r3, #95	; 0x5f
   3b400:	mvn	r4, #0
   3b404:	str	r3, [r0]
   3b408:	b	3b3a4 <__assert_fail@plt+0x28db0>
   3b40c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3b410:	mov	r5, r1
   3b414:	strd	r6, [sp, #8]
   3b418:	str	r8, [sp, #16]
   3b41c:	str	lr, [sp, #20]
   3b420:	bl	120f0 <fgetfilecon@plt>
   3b424:	subs	r4, r0, #0
   3b428:	beq	3b488 <__assert_fail@plt+0x28e94>
   3b42c:	cmp	r4, #10
   3b430:	beq	3b44c <__assert_fail@plt+0x28e58>
   3b434:	mov	r0, r4
   3b438:	ldrd	r4, [sp]
   3b43c:	ldrd	r6, [sp, #8]
   3b440:	ldr	r8, [sp, #16]
   3b444:	add	sp, sp, #20
   3b448:	pop	{pc}		; (ldr pc, [sp], #4)
   3b44c:	ldr	r6, [r5]
   3b450:	movw	r1, #25324	; 0x62ec
   3b454:	movt	r1, #5
   3b458:	mov	r0, r6
   3b45c:	bl	11f40 <strcmp@plt>
   3b460:	subs	r7, r0, #0
   3b464:	bne	3b434 <__assert_fail@plt+0x28e40>
   3b468:	mov	r0, r6
   3b46c:	mvn	r4, #0
   3b470:	bl	1251c <freecon@plt>
   3b474:	str	r7, [r5]
   3b478:	bl	12348 <__errno_location@plt>
   3b47c:	mov	r3, #61	; 0x3d
   3b480:	str	r3, [r0]
   3b484:	b	3b434 <__assert_fail@plt+0x28e40>
   3b488:	bl	12348 <__errno_location@plt>
   3b48c:	mov	r3, #95	; 0x5f
   3b490:	mvn	r4, #0
   3b494:	str	r3, [r0]
   3b498:	b	3b434 <__assert_fail@plt+0x28e40>
   3b49c:	cmp	r0, #0
   3b4a0:	beq	3b4ac <__assert_fail@plt+0x28eb8>
   3b4a4:	blt	3b4b4 <__assert_fail@plt+0x28ec0>
   3b4a8:	b	12240 <malloc@plt>
   3b4ac:	mov	r0, #1
   3b4b0:	b	12240 <malloc@plt>
   3b4b4:	str	r4, [sp, #-8]!
   3b4b8:	str	lr, [sp, #4]
   3b4bc:	bl	12348 <__errno_location@plt>
   3b4c0:	mov	r3, #12
   3b4c4:	ldr	r4, [sp]
   3b4c8:	add	sp, sp, #4
   3b4cc:	str	r3, [r0]
   3b4d0:	mov	r0, #0
   3b4d4:	pop	{pc}		; (ldr pc, [sp], #4)
   3b4d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   3b4dc:	mov	r5, r2
   3b4e0:	strd	r6, [sp, #8]
   3b4e4:	subs	r6, r0, #0
   3b4e8:	mov	r7, r1
   3b4ec:	str	lr, [sp, #16]
   3b4f0:	sub	sp, sp, #12
   3b4f4:	addeq	r6, sp, #4
   3b4f8:	mov	r0, r6
   3b4fc:	bl	121d4 <mbrtowc@plt>
   3b500:	cmp	r5, #0
   3b504:	cmnne	r0, #3
   3b508:	mov	r4, r0
   3b50c:	bhi	3b528 <__assert_fail@plt+0x28f34>
   3b510:	mov	r0, r4
   3b514:	add	sp, sp, #12
   3b518:	ldrd	r4, [sp]
   3b51c:	ldrd	r6, [sp, #8]
   3b520:	add	sp, sp, #16
   3b524:	pop	{pc}		; (ldr pc, [sp], #4)
   3b528:	mov	r0, #0
   3b52c:	bl	4fae4 <__assert_fail@plt+0x3d4f0>
   3b530:	cmp	r0, #0
   3b534:	bne	3b510 <__assert_fail@plt+0x28f1c>
   3b538:	ldrb	r3, [r7]
   3b53c:	mov	r4, #1
   3b540:	str	r3, [r6]
   3b544:	b	3b510 <__assert_fail@plt+0x28f1c>
   3b548:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3b54c:	mov	r4, r0
   3b550:	strd	r6, [sp, #8]
   3b554:	str	r8, [sp, #16]
   3b558:	str	lr, [sp, #20]
   3b55c:	bl	12300 <strlen@plt>
   3b560:	add	r0, r0, #1
   3b564:	mov	ip, r4
   3b568:	mov	r3, #0
   3b56c:	b	3b580 <__assert_fail@plt+0x28f8c>
   3b570:	cmp	r0, r2
   3b574:	strb	r1, [ip], #1
   3b578:	bls	3b5f0 <__assert_fail@plt+0x28ffc>
   3b57c:	mov	r3, r2
   3b580:	ldrb	r1, [r4, r3]
   3b584:	add	r2, r3, #1
   3b588:	cmp	r1, #92	; 0x5c
   3b58c:	bne	3b570 <__assert_fail@plt+0x28f7c>
   3b590:	add	lr, r3, #4
   3b594:	cmp	lr, r0
   3b598:	bcs	3b570 <__assert_fail@plt+0x28f7c>
   3b59c:	ldrb	r5, [r4, r2]
   3b5a0:	sub	r5, r5, #48	; 0x30
   3b5a4:	uxtb	r6, r5
   3b5a8:	cmp	r6, #3
   3b5ac:	bhi	3b570 <__assert_fail@plt+0x28f7c>
   3b5b0:	add	r3, r4, r3
   3b5b4:	ldrb	r6, [r3, #2]
   3b5b8:	sub	r6, r6, #48	; 0x30
   3b5bc:	uxtb	r7, r6
   3b5c0:	cmp	r7, #7
   3b5c4:	bhi	3b570 <__assert_fail@plt+0x28f7c>
   3b5c8:	ldrb	r3, [r3, #3]
   3b5cc:	sub	r3, r3, #48	; 0x30
   3b5d0:	uxtb	r3, r3
   3b5d4:	cmp	r3, #7
   3b5d8:	bhi	3b570 <__assert_fail@plt+0x28f7c>
   3b5dc:	add	r5, r6, r5, lsl #3
   3b5e0:	mov	r2, lr
   3b5e4:	add	r5, r3, r5, lsl #3
   3b5e8:	strb	r5, [ip], #1
   3b5ec:	b	3b57c <__assert_fail@plt+0x28f88>
   3b5f0:	ldrd	r4, [sp]
   3b5f4:	ldrd	r6, [sp, #8]
   3b5f8:	ldr	r8, [sp, #16]
   3b5fc:	add	sp, sp, #20
   3b600:	pop	{pc}		; (ldr pc, [sp], #4)
   3b604:	movw	r1, #12220	; 0x2fbc
   3b608:	movt	r1, #5
   3b60c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b610:	movw	r0, #25336	; 0x62f8
   3b614:	movt	r0, #5
   3b618:	strd	r6, [sp, #8]
   3b61c:	strd	r8, [sp, #16]
   3b620:	strd	sl, [sp, #24]
   3b624:	str	lr, [sp, #32]
   3b628:	sub	sp, sp, #44	; 0x2c
   3b62c:	bl	12504 <fopen64@plt>
   3b630:	subs	r8, r0, #0
   3b634:	beq	3babc <__assert_fail@plt+0x294c8>
   3b638:	movw	r2, #25380	; 0x6324
   3b63c:	movt	r2, #5
   3b640:	mov	r3, #0
   3b644:	movw	r9, #25360	; 0x6310
   3b648:	movt	r9, #5
   3b64c:	add	sl, sp, #16
   3b650:	str	r2, [sp, #8]
   3b654:	mov	r2, #65280	; 0xff00
   3b658:	movt	r2, #15
   3b65c:	str	r2, [sp, #12]
   3b660:	str	r3, [sp, #20]
   3b664:	str	r3, [sp, #24]
   3b668:	mov	r3, r8
   3b66c:	mov	r2, #10
   3b670:	add	r1, sp, #24
   3b674:	add	r0, sp, #20
   3b678:	bl	11f10 <__getdelim@plt>
   3b67c:	cmn	r0, #1
   3b680:	beq	3b848 <__assert_fail@plt+0x29254>
   3b684:	add	ip, sp, #36	; 0x24
   3b688:	add	r3, sp, #32
   3b68c:	ldr	r0, [sp, #20]
   3b690:	add	r2, sp, #28
   3b694:	mov	r1, r9
   3b698:	str	ip, [sp]
   3b69c:	bl	12498 <sscanf@plt>
   3b6a0:	sub	r0, r0, #2
   3b6a4:	cmp	r0, #1
   3b6a8:	bhi	3b668 <__assert_fail@plt+0x29074>
   3b6ac:	ldr	r5, [sp, #20]
   3b6b0:	mov	r1, #32
   3b6b4:	ldr	r3, [sp, #36]	; 0x24
   3b6b8:	add	r5, r5, r3
   3b6bc:	mov	r0, r5
   3b6c0:	bl	1230c <strchr@plt>
   3b6c4:	subs	r4, r0, #0
   3b6c8:	beq	3b668 <__assert_fail@plt+0x29074>
   3b6cc:	mov	r6, #0
   3b6d0:	mov	r1, #32
   3b6d4:	strb	r6, [r4], #1
   3b6d8:	mov	r0, r4
   3b6dc:	bl	1230c <strchr@plt>
   3b6e0:	cmp	r0, #0
   3b6e4:	beq	3b668 <__assert_fail@plt+0x29074>
   3b6e8:	strb	r6, [r0], #1
   3b6ec:	ldr	r1, [sp, #8]
   3b6f0:	bl	4e7bc <__assert_fail@plt+0x3c1c8>
   3b6f4:	cmp	r0, #0
   3b6f8:	beq	3b668 <__assert_fail@plt+0x29074>
   3b6fc:	add	r7, r0, #3
   3b700:	mov	r1, #32
   3b704:	mov	r0, r7
   3b708:	bl	1230c <strchr@plt>
   3b70c:	subs	fp, r0, #0
   3b710:	beq	3b668 <__assert_fail@plt+0x29074>
   3b714:	mov	r1, #32
   3b718:	strb	r6, [fp], #1
   3b71c:	mov	r0, fp
   3b720:	bl	1230c <strchr@plt>
   3b724:	cmp	r0, #0
   3b728:	beq	3b668 <__assert_fail@plt+0x29074>
   3b72c:	strb	r6, [r0]
   3b730:	mov	r0, fp
   3b734:	bl	3b548 <__assert_fail@plt+0x28f54>
   3b738:	mov	r0, r4
   3b73c:	bl	3b548 <__assert_fail@plt+0x28f54>
   3b740:	mov	r0, r5
   3b744:	bl	3b548 <__assert_fail@plt+0x28f54>
   3b748:	mov	r0, r7
   3b74c:	bl	3b548 <__assert_fail@plt+0x28f54>
   3b750:	mov	r0, #32
   3b754:	bl	36864 <__assert_fail@plt+0x24270>
   3b758:	mov	r6, r0
   3b75c:	mov	r0, fp
   3b760:	bl	36dd0 <__assert_fail@plt+0x247dc>
   3b764:	str	r0, [r6]
   3b768:	mov	r0, r4
   3b76c:	bl	36dd0 <__assert_fail@plt+0x247dc>
   3b770:	str	r0, [r6, #4]
   3b774:	mov	r0, r5
   3b778:	bl	36dd0 <__assert_fail@plt+0x247dc>
   3b77c:	str	r0, [r6, #8]
   3b780:	mov	r0, r7
   3b784:	bl	36dd0 <__assert_fail@plt+0x247dc>
   3b788:	ldr	r1, [sp, #12]
   3b78c:	mov	r2, #0
   3b790:	movt	r2, #65520	; 0xfff0
   3b794:	str	r0, [r6, #12]
   3b798:	mov	r4, r0
   3b79c:	ldr	ip, [sp, #28]
   3b7a0:	ldr	r5, [sp, #32]
   3b7a4:	ldrb	r3, [r6, #24]
   3b7a8:	and	lr, r1, ip, lsl #8
   3b7ac:	bic	ip, ip, #4080	; 0xff0
   3b7b0:	bic	ip, ip, #15
   3b7b4:	and	r1, r2, r5, lsl #12
   3b7b8:	uxtb	r2, r5
   3b7bc:	orr	ip, ip, r5, lsr #20
   3b7c0:	orr	r2, r2, lr
   3b7c4:	orr	r2, r1, r2
   3b7c8:	orr	r3, r3, #4
   3b7cc:	movw	r1, #25384	; 0x6328
   3b7d0:	movt	r1, #5
   3b7d4:	str	r2, [r6, #16]
   3b7d8:	str	ip, [r6, #20]
   3b7dc:	strb	r3, [r6, #24]
   3b7e0:	bl	11f40 <strcmp@plt>
   3b7e4:	cmp	r0, #0
   3b7e8:	beq	3b804 <__assert_fail@plt+0x29210>
   3b7ec:	movw	r1, #25392	; 0x6330
   3b7f0:	movt	r1, #5
   3b7f4:	mov	r0, r4
   3b7f8:	bl	11f40 <strcmp@plt>
   3b7fc:	cmp	r0, #0
   3b800:	bne	3b898 <__assert_fail@plt+0x292a4>
   3b804:	mov	r0, #1
   3b808:	ldrb	r3, [r6, #24]
   3b80c:	mov	r1, #58	; 0x3a
   3b810:	ldr	r5, [r6]
   3b814:	bfi	r3, r0, #0, #1
   3b818:	mov	r0, r5
   3b81c:	strb	r3, [r6, #24]
   3b820:	bl	1230c <strchr@plt>
   3b824:	cmp	r0, #0
   3b828:	beq	3b9bc <__assert_fail@plt+0x293c8>
   3b82c:	mov	r0, #1
   3b830:	ldrb	r3, [r6, #24]
   3b834:	bfi	r3, r0, #1, #1
   3b838:	strb	r3, [r6, #24]
   3b83c:	str	r6, [sl]
   3b840:	add	sl, r6, #28
   3b844:	b	3b668 <__assert_fail@plt+0x29074>
   3b848:	ldr	r0, [sp, #20]
   3b84c:	bl	38b10 <__assert_fail@plt+0x2651c>
   3b850:	ldr	r3, [r8]
   3b854:	tst	r3, #32
   3b858:	bne	3be9c <__assert_fail@plt+0x298a8>
   3b85c:	mov	r0, r8
   3b860:	bl	123fc <fclose@plt>
   3b864:	cmn	r0, #1
   3b868:	beq	3bd10 <__assert_fail@plt+0x2971c>
   3b86c:	mov	r3, #0
   3b870:	str	r3, [sl]
   3b874:	ldr	r6, [sp, #16]
   3b878:	mov	r0, r6
   3b87c:	add	sp, sp, #44	; 0x2c
   3b880:	ldrd	r4, [sp]
   3b884:	ldrd	r6, [sp, #8]
   3b888:	ldrd	r8, [sp, #16]
   3b88c:	ldrd	sl, [sp, #24]
   3b890:	add	sp, sp, #32
   3b894:	pop	{pc}		; (ldr pc, [sp], #4)
   3b898:	movw	r1, #25400	; 0x6338
   3b89c:	movt	r1, #5
   3b8a0:	mov	r0, r4
   3b8a4:	bl	11f40 <strcmp@plt>
   3b8a8:	cmp	r0, #0
   3b8ac:	beq	3b804 <__assert_fail@plt+0x29210>
   3b8b0:	movw	r1, #25408	; 0x6340
   3b8b4:	movt	r1, #5
   3b8b8:	mov	r0, r4
   3b8bc:	bl	11f40 <strcmp@plt>
   3b8c0:	cmp	r0, #0
   3b8c4:	beq	3b804 <__assert_fail@plt+0x29210>
   3b8c8:	movw	r1, #25416	; 0x6348
   3b8cc:	movt	r1, #5
   3b8d0:	mov	r0, r4
   3b8d4:	bl	11f40 <strcmp@plt>
   3b8d8:	cmp	r0, #0
   3b8dc:	beq	3b804 <__assert_fail@plt+0x29210>
   3b8e0:	movw	r1, #25424	; 0x6350
   3b8e4:	movt	r1, #5
   3b8e8:	mov	r0, r4
   3b8ec:	bl	11f40 <strcmp@plt>
   3b8f0:	cmp	r0, #0
   3b8f4:	beq	3b804 <__assert_fail@plt+0x29210>
   3b8f8:	movw	r1, #25432	; 0x6358
   3b8fc:	movt	r1, #5
   3b900:	mov	r0, r4
   3b904:	bl	11f40 <strcmp@plt>
   3b908:	cmp	r0, #0
   3b90c:	beq	3b804 <__assert_fail@plt+0x29210>
   3b910:	movw	r1, #25444	; 0x6364
   3b914:	movt	r1, #5
   3b918:	mov	r0, r4
   3b91c:	bl	11f40 <strcmp@plt>
   3b920:	cmp	r0, #0
   3b924:	beq	3b804 <__assert_fail@plt+0x29210>
   3b928:	movw	r1, #25452	; 0x636c
   3b92c:	movt	r1, #5
   3b930:	mov	r0, r4
   3b934:	bl	11f40 <strcmp@plt>
   3b938:	cmp	r0, #0
   3b93c:	beq	3b804 <__assert_fail@plt+0x29210>
   3b940:	movw	r1, #25464	; 0x6378
   3b944:	movt	r1, #5
   3b948:	mov	r0, r4
   3b94c:	bl	11f40 <strcmp@plt>
   3b950:	cmp	r0, #0
   3b954:	beq	3b804 <__assert_fail@plt+0x29210>
   3b958:	movw	r1, #25472	; 0x6380
   3b95c:	movt	r1, #5
   3b960:	mov	r0, r4
   3b964:	bl	11f40 <strcmp@plt>
   3b968:	cmp	r0, #0
   3b96c:	beq	3b804 <__assert_fail@plt+0x29210>
   3b970:	movw	r1, #25480	; 0x6388
   3b974:	movt	r1, #5
   3b978:	mov	r0, r4
   3b97c:	bl	11f40 <strcmp@plt>
   3b980:	cmp	r0, #0
   3b984:	beq	3b804 <__assert_fail@plt+0x29210>
   3b988:	movw	r1, #12216	; 0x2fb8
   3b98c:	movt	r1, #5
   3b990:	mov	r0, r4
   3b994:	bl	11f40 <strcmp@plt>
   3b998:	cmp	r0, #0
   3b99c:	beq	3b804 <__assert_fail@plt+0x29210>
   3b9a0:	movw	r1, #25488	; 0x6390
   3b9a4:	movt	r1, #5
   3b9a8:	mov	r0, r4
   3b9ac:	bl	11f40 <strcmp@plt>
   3b9b0:	clz	r0, r0
   3b9b4:	lsr	r0, r0, #5
   3b9b8:	b	3b808 <__assert_fail@plt+0x29214>
   3b9bc:	ldrb	r3, [r5]
   3b9c0:	cmp	r3, #47	; 0x2f
   3b9c4:	beq	3bf10 <__assert_fail@plt+0x2991c>
   3b9c8:	movw	r1, #25520	; 0x63b0
   3b9cc:	movt	r1, #5
   3b9d0:	mov	r0, r4
   3b9d4:	bl	11f40 <strcmp@plt>
   3b9d8:	cmp	r0, #0
   3b9dc:	beq	3b82c <__assert_fail@plt+0x29238>
   3b9e0:	movw	r1, #12224	; 0x2fc0
   3b9e4:	movt	r1, #5
   3b9e8:	mov	r0, r4
   3b9ec:	bl	11f40 <strcmp@plt>
   3b9f0:	cmp	r0, #0
   3b9f4:	beq	3b82c <__assert_fail@plt+0x29238>
   3b9f8:	movw	r1, #25528	; 0x63b8
   3b9fc:	movt	r1, #5
   3ba00:	mov	r0, r4
   3ba04:	bl	11f40 <strcmp@plt>
   3ba08:	cmp	r0, #0
   3ba0c:	beq	3b82c <__assert_fail@plt+0x29238>
   3ba10:	movw	r1, #25536	; 0x63c0
   3ba14:	movt	r1, #5
   3ba18:	mov	r0, r4
   3ba1c:	bl	11f40 <strcmp@plt>
   3ba20:	cmp	r0, #0
   3ba24:	beq	3b82c <__assert_fail@plt+0x29238>
   3ba28:	movw	r1, #25548	; 0x63cc
   3ba2c:	movt	r1, #5
   3ba30:	mov	r0, r4
   3ba34:	bl	11f40 <strcmp@plt>
   3ba38:	cmp	r0, #0
   3ba3c:	beq	3b82c <__assert_fail@plt+0x29238>
   3ba40:	movw	r1, #25556	; 0x63d4
   3ba44:	movt	r1, #5
   3ba48:	mov	r0, r4
   3ba4c:	bl	11f40 <strcmp@plt>
   3ba50:	cmp	r0, #0
   3ba54:	beq	3b82c <__assert_fail@plt+0x29238>
   3ba58:	movw	r1, #25564	; 0x63dc
   3ba5c:	movt	r1, #5
   3ba60:	mov	r0, r4
   3ba64:	bl	11f40 <strcmp@plt>
   3ba68:	cmp	r0, #0
   3ba6c:	beq	3b82c <__assert_fail@plt+0x29238>
   3ba70:	movw	r1, #25572	; 0x63e4
   3ba74:	movt	r1, #5
   3ba78:	mov	r0, r4
   3ba7c:	bl	11f40 <strcmp@plt>
   3ba80:	cmp	r0, #0
   3ba84:	beq	3b82c <__assert_fail@plt+0x29238>
   3ba88:	mov	r0, r4
   3ba8c:	movw	r1, #25580	; 0x63ec
   3ba90:	movt	r1, #5
   3ba94:	bl	11f40 <strcmp@plt>
   3ba98:	cmp	r0, #0
   3ba9c:	beq	3b82c <__assert_fail@plt+0x29238>
   3baa0:	mov	r1, r5
   3baa4:	movw	r0, #25588	; 0x63f4
   3baa8:	movt	r0, #5
   3baac:	bl	11f40 <strcmp@plt>
   3bab0:	clz	r0, r0
   3bab4:	lsr	r0, r0, #5
   3bab8:	b	3b830 <__assert_fail@plt+0x2923c>
   3babc:	movw	r1, #26112	; 0x6600
   3bac0:	movt	r1, #5
   3bac4:	movw	r0, #25596	; 0x63fc
   3bac8:	movt	r0, #5
   3bacc:	bl	12534 <setmntent@plt>
   3bad0:	subs	r6, r0, #0
   3bad4:	beq	3b878 <__assert_fail@plt+0x29284>
   3bad8:	mov	r0, r6
   3badc:	movw	r8, #25608	; 0x6408
   3bae0:	movt	r8, #5
   3bae4:	movw	r7, #25384	; 0x6328
   3bae8:	movt	r7, #5
   3baec:	movw	fp, #25392	; 0x6330
   3baf0:	movt	fp, #5
   3baf4:	add	sl, sp, #16
   3baf8:	bl	121f8 <getmntent@plt>
   3bafc:	subs	r5, r0, #0
   3bb00:	beq	3bd00 <__assert_fail@plt+0x2970c>
   3bb04:	mov	r1, r8
   3bb08:	bl	121a4 <hasmntopt@plt>
   3bb0c:	mov	r9, r0
   3bb10:	mov	r0, #32
   3bb14:	bl	36864 <__assert_fail@plt+0x24270>
   3bb18:	mov	r4, r0
   3bb1c:	ldr	r0, [r5]
   3bb20:	bl	36dd0 <__assert_fail@plt+0x247dc>
   3bb24:	str	r0, [r4]
   3bb28:	ldr	r0, [r5, #4]
   3bb2c:	bl	36dd0 <__assert_fail@plt+0x247dc>
   3bb30:	mov	r3, #0
   3bb34:	str	r0, [r4, #4]
   3bb38:	ldr	r0, [r5, #8]
   3bb3c:	str	r3, [r4, #8]
   3bb40:	bl	36dd0 <__assert_fail@plt+0x247dc>
   3bb44:	ldrb	r3, [r4, #24]
   3bb48:	mov	r1, r7
   3bb4c:	mov	r5, r0
   3bb50:	str	r0, [r4, #12]
   3bb54:	orr	r3, r3, #4
   3bb58:	strb	r3, [r4, #24]
   3bb5c:	bl	11f40 <strcmp@plt>
   3bb60:	cmp	r0, #0
   3bb64:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bb68:	mov	r1, fp
   3bb6c:	mov	r0, r5
   3bb70:	bl	11f40 <strcmp@plt>
   3bb74:	cmp	r0, #0
   3bb78:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bb7c:	movw	r1, #25400	; 0x6338
   3bb80:	movt	r1, #5
   3bb84:	mov	r0, r5
   3bb88:	bl	11f40 <strcmp@plt>
   3bb8c:	cmp	r0, #0
   3bb90:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bb94:	movw	r1, #25408	; 0x6340
   3bb98:	movt	r1, #5
   3bb9c:	mov	r0, r5
   3bba0:	bl	11f40 <strcmp@plt>
   3bba4:	cmp	r0, #0
   3bba8:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bbac:	movw	r1, #25416	; 0x6348
   3bbb0:	movt	r1, #5
   3bbb4:	mov	r0, r5
   3bbb8:	bl	11f40 <strcmp@plt>
   3bbbc:	cmp	r0, #0
   3bbc0:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bbc4:	movw	r1, #25424	; 0x6350
   3bbc8:	movt	r1, #5
   3bbcc:	mov	r0, r5
   3bbd0:	bl	11f40 <strcmp@plt>
   3bbd4:	cmp	r0, #0
   3bbd8:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bbdc:	movw	r1, #25432	; 0x6358
   3bbe0:	movt	r1, #5
   3bbe4:	mov	r0, r5
   3bbe8:	bl	11f40 <strcmp@plt>
   3bbec:	cmp	r0, #0
   3bbf0:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bbf4:	movw	r1, #25444	; 0x6364
   3bbf8:	movt	r1, #5
   3bbfc:	mov	r0, r5
   3bc00:	bl	11f40 <strcmp@plt>
   3bc04:	cmp	r0, #0
   3bc08:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bc0c:	movw	r1, #25452	; 0x636c
   3bc10:	movt	r1, #5
   3bc14:	mov	r0, r5
   3bc18:	bl	11f40 <strcmp@plt>
   3bc1c:	cmp	r0, #0
   3bc20:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bc24:	movw	r1, #25464	; 0x6378
   3bc28:	movt	r1, #5
   3bc2c:	mov	r0, r5
   3bc30:	bl	11f40 <strcmp@plt>
   3bc34:	cmp	r0, #0
   3bc38:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bc3c:	movw	r1, #25472	; 0x6380
   3bc40:	movt	r1, #5
   3bc44:	mov	r0, r5
   3bc48:	bl	11f40 <strcmp@plt>
   3bc4c:	cmp	r0, #0
   3bc50:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bc54:	movw	r1, #25480	; 0x6388
   3bc58:	movt	r1, #5
   3bc5c:	mov	r0, r5
   3bc60:	bl	11f40 <strcmp@plt>
   3bc64:	cmp	r0, #0
   3bc68:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bc6c:	movw	r1, #12216	; 0x2fb8
   3bc70:	movt	r1, #5
   3bc74:	mov	r0, r5
   3bc78:	bl	11f40 <strcmp@plt>
   3bc7c:	cmp	r0, #0
   3bc80:	beq	3bca4 <__assert_fail@plt+0x296b0>
   3bc84:	movw	r1, #25488	; 0x6390
   3bc88:	movt	r1, #5
   3bc8c:	mov	r0, r5
   3bc90:	bl	11f40 <strcmp@plt>
   3bc94:	orrs	r3, r9, r0
   3bc98:	moveq	r2, #1
   3bc9c:	movne	r2, #0
   3bca0:	b	3bca8 <__assert_fail@plt+0x296b4>
   3bca4:	mov	r2, #1
   3bca8:	ldrb	r3, [r4, #24]
   3bcac:	mov	r1, #58	; 0x3a
   3bcb0:	ldr	r9, [r4]
   3bcb4:	bfi	r3, r2, #0, #1
   3bcb8:	mov	r0, r9
   3bcbc:	strb	r3, [r4, #24]
   3bcc0:	bl	1230c <strchr@plt>
   3bcc4:	cmp	r0, #0
   3bcc8:	beq	3bd9c <__assert_fail@plt+0x297a8>
   3bccc:	mov	r0, #1
   3bcd0:	ldrb	r1, [r4, #24]
   3bcd4:	mvn	r2, #0
   3bcd8:	mvn	r3, #0
   3bcdc:	strd	r2, [r4, #16]
   3bce0:	bfi	r1, r0, #1, #1
   3bce4:	mov	r0, r6
   3bce8:	strb	r1, [r4, #24]
   3bcec:	str	r4, [sl]
   3bcf0:	add	sl, r4, #28
   3bcf4:	bl	121f8 <getmntent@plt>
   3bcf8:	subs	r5, r0, #0
   3bcfc:	bne	3bb04 <__assert_fail@plt+0x29510>
   3bd00:	mov	r0, r6
   3bd04:	bl	12420 <endmntent@plt>
   3bd08:	cmp	r0, #0
   3bd0c:	bne	3b86c <__assert_fail@plt+0x29278>
   3bd10:	bl	12348 <__errno_location@plt>
   3bd14:	ldr	r8, [r0]
   3bd18:	mov	r7, r0
   3bd1c:	mov	r3, #0
   3bd20:	str	r3, [sl]
   3bd24:	ldr	r4, [sp, #16]
   3bd28:	cmp	r4, r3
   3bd2c:	bne	3bd48 <__assert_fail@plt+0x29754>
   3bd30:	b	3bd90 <__assert_fail@plt+0x2979c>
   3bd34:	bl	38b10 <__assert_fail@plt+0x2651c>
   3bd38:	cmp	r5, #0
   3bd3c:	str	r5, [sp, #16]
   3bd40:	beq	3bd90 <__assert_fail@plt+0x2979c>
   3bd44:	mov	r4, r5
   3bd48:	ldr	r0, [r4]
   3bd4c:	ldr	r5, [r4, #28]
   3bd50:	bl	38b10 <__assert_fail@plt+0x2651c>
   3bd54:	ldr	r0, [r4, #4]
   3bd58:	bl	38b10 <__assert_fail@plt+0x2651c>
   3bd5c:	ldr	r0, [r4, #8]
   3bd60:	bl	38b10 <__assert_fail@plt+0x2651c>
   3bd64:	ldrb	r3, [r4, #24]
   3bd68:	mov	r0, r4
   3bd6c:	tst	r3, #4
   3bd70:	beq	3bd34 <__assert_fail@plt+0x29740>
   3bd74:	ldr	r0, [r4, #12]
   3bd78:	bl	38b10 <__assert_fail@plt+0x2651c>
   3bd7c:	mov	r0, r4
   3bd80:	bl	38b10 <__assert_fail@plt+0x2651c>
   3bd84:	cmp	r5, #0
   3bd88:	str	r5, [sp, #16]
   3bd8c:	bne	3bd44 <__assert_fail@plt+0x29750>
   3bd90:	mov	r6, #0
   3bd94:	str	r8, [r7]
   3bd98:	b	3b878 <__assert_fail@plt+0x29284>
   3bd9c:	ldrb	r3, [r9]
   3bda0:	cmp	r3, #47	; 0x2f
   3bda4:	beq	3beb8 <__assert_fail@plt+0x298c4>
   3bda8:	movw	r1, #25520	; 0x63b0
   3bdac:	movt	r1, #5
   3bdb0:	mov	r0, r5
   3bdb4:	bl	11f40 <strcmp@plt>
   3bdb8:	cmp	r0, #0
   3bdbc:	beq	3bccc <__assert_fail@plt+0x296d8>
   3bdc0:	movw	r1, #12224	; 0x2fc0
   3bdc4:	movt	r1, #5
   3bdc8:	mov	r0, r5
   3bdcc:	bl	11f40 <strcmp@plt>
   3bdd0:	cmp	r0, #0
   3bdd4:	beq	3bccc <__assert_fail@plt+0x296d8>
   3bdd8:	movw	r1, #25528	; 0x63b8
   3bddc:	movt	r1, #5
   3bde0:	mov	r0, r5
   3bde4:	bl	11f40 <strcmp@plt>
   3bde8:	cmp	r0, #0
   3bdec:	beq	3bccc <__assert_fail@plt+0x296d8>
   3bdf0:	movw	r1, #25536	; 0x63c0
   3bdf4:	movt	r1, #5
   3bdf8:	mov	r0, r5
   3bdfc:	bl	11f40 <strcmp@plt>
   3be00:	cmp	r0, #0
   3be04:	beq	3bccc <__assert_fail@plt+0x296d8>
   3be08:	movw	r1, #25548	; 0x63cc
   3be0c:	movt	r1, #5
   3be10:	mov	r0, r5
   3be14:	bl	11f40 <strcmp@plt>
   3be18:	cmp	r0, #0
   3be1c:	beq	3bccc <__assert_fail@plt+0x296d8>
   3be20:	movw	r1, #25556	; 0x63d4
   3be24:	movt	r1, #5
   3be28:	mov	r0, r5
   3be2c:	bl	11f40 <strcmp@plt>
   3be30:	cmp	r0, #0
   3be34:	beq	3bccc <__assert_fail@plt+0x296d8>
   3be38:	movw	r1, #25564	; 0x63dc
   3be3c:	movt	r1, #5
   3be40:	mov	r0, r5
   3be44:	bl	11f40 <strcmp@plt>
   3be48:	cmp	r0, #0
   3be4c:	beq	3bccc <__assert_fail@plt+0x296d8>
   3be50:	movw	r1, #25572	; 0x63e4
   3be54:	movt	r1, #5
   3be58:	mov	r0, r5
   3be5c:	bl	11f40 <strcmp@plt>
   3be60:	cmp	r0, #0
   3be64:	beq	3bccc <__assert_fail@plt+0x296d8>
   3be68:	mov	r0, r5
   3be6c:	movw	r1, #25580	; 0x63ec
   3be70:	movt	r1, #5
   3be74:	bl	11f40 <strcmp@plt>
   3be78:	cmp	r0, #0
   3be7c:	beq	3bccc <__assert_fail@plt+0x296d8>
   3be80:	mov	r1, r9
   3be84:	movw	r0, #25588	; 0x63f4
   3be88:	movt	r0, #5
   3be8c:	bl	11f40 <strcmp@plt>
   3be90:	clz	r0, r0
   3be94:	lsr	r0, r0, #5
   3be98:	b	3bcd0 <__assert_fail@plt+0x296dc>
   3be9c:	bl	12348 <__errno_location@plt>
   3bea0:	mov	r7, r0
   3bea4:	mov	r0, r8
   3bea8:	ldr	r8, [r7]
   3beac:	bl	123fc <fclose@plt>
   3beb0:	str	r8, [r7]
   3beb4:	b	3bd1c <__assert_fail@plt+0x29728>
   3beb8:	ldrb	r3, [r9, #1]
   3bebc:	cmp	r3, #47	; 0x2f
   3bec0:	bne	3bda8 <__assert_fail@plt+0x297b4>
   3bec4:	movw	r1, #25496	; 0x6398
   3bec8:	movt	r1, #5
   3becc:	mov	r0, r5
   3bed0:	bl	11f40 <strcmp@plt>
   3bed4:	cmp	r0, #0
   3bed8:	beq	3bccc <__assert_fail@plt+0x296d8>
   3bedc:	movw	r1, #25504	; 0x63a0
   3bee0:	movt	r1, #5
   3bee4:	mov	r0, r5
   3bee8:	bl	11f40 <strcmp@plt>
   3beec:	cmp	r0, #0
   3bef0:	beq	3bccc <__assert_fail@plt+0x296d8>
   3bef4:	movw	r1, #25512	; 0x63a8
   3bef8:	movt	r1, #5
   3befc:	mov	r0, r5
   3bf00:	bl	11f40 <strcmp@plt>
   3bf04:	cmp	r0, #0
   3bf08:	beq	3bccc <__assert_fail@plt+0x296d8>
   3bf0c:	b	3bda8 <__assert_fail@plt+0x297b4>
   3bf10:	ldrb	r3, [r5, #1]
   3bf14:	cmp	r3, #47	; 0x2f
   3bf18:	bne	3b9c8 <__assert_fail@plt+0x293d4>
   3bf1c:	movw	r1, #25496	; 0x6398
   3bf20:	movt	r1, #5
   3bf24:	mov	r0, r4
   3bf28:	bl	11f40 <strcmp@plt>
   3bf2c:	cmp	r0, #0
   3bf30:	beq	3b82c <__assert_fail@plt+0x29238>
   3bf34:	movw	r1, #25504	; 0x63a0
   3bf38:	movt	r1, #5
   3bf3c:	mov	r0, r4
   3bf40:	bl	11f40 <strcmp@plt>
   3bf44:	cmp	r0, #0
   3bf48:	beq	3b82c <__assert_fail@plt+0x29238>
   3bf4c:	movw	r1, #25512	; 0x63a8
   3bf50:	movt	r1, #5
   3bf54:	mov	r0, r4
   3bf58:	bl	11f40 <strcmp@plt>
   3bf5c:	cmp	r0, #0
   3bf60:	beq	3b82c <__assert_fail@plt+0x29238>
   3bf64:	b	3b9c8 <__assert_fail@plt+0x293d4>
   3bf68:	str	r4, [sp, #-8]!
   3bf6c:	mov	r4, r0
   3bf70:	ldr	r0, [r0]
   3bf74:	str	lr, [sp, #4]
   3bf78:	bl	38b10 <__assert_fail@plt+0x2651c>
   3bf7c:	ldr	r0, [r4, #4]
   3bf80:	bl	38b10 <__assert_fail@plt+0x2651c>
   3bf84:	ldr	r0, [r4, #8]
   3bf88:	bl	38b10 <__assert_fail@plt+0x2651c>
   3bf8c:	ldrb	r3, [r4, #24]
   3bf90:	tst	r3, #4
   3bf94:	bne	3bfac <__assert_fail@plt+0x299b8>
   3bf98:	mov	r0, r4
   3bf9c:	ldr	r4, [sp]
   3bfa0:	ldr	lr, [sp, #4]
   3bfa4:	add	sp, sp, #8
   3bfa8:	b	38b10 <__assert_fail@plt+0x2651c>
   3bfac:	ldr	r0, [r4, #12]
   3bfb0:	bl	38b10 <__assert_fail@plt+0x2651c>
   3bfb4:	b	3bf98 <__assert_fail@plt+0x299a4>
   3bfb8:	cmp	r0, #0
   3bfbc:	beq	3bfe4 <__assert_fail@plt+0x299f0>
   3bfc0:	cmp	r1, #0
   3bfc4:	str	r4, [sp, #-8]!
   3bfc8:	str	lr, [sp, #4]
   3bfcc:	beq	3bfec <__assert_fail@plt+0x299f8>
   3bfd0:	blt	3c000 <__assert_fail@plt+0x29a0c>
   3bfd4:	ldr	r4, [sp]
   3bfd8:	ldr	lr, [sp, #4]
   3bfdc:	add	sp, sp, #8
   3bfe0:	b	120e4 <realloc@plt>
   3bfe4:	mov	r0, r1
   3bfe8:	b	3b49c <__assert_fail@plt+0x28ea8>
   3bfec:	bl	38b10 <__assert_fail@plt+0x2651c>
   3bff0:	ldr	r4, [sp]
   3bff4:	add	sp, sp, #4
   3bff8:	mov	r0, #0
   3bffc:	pop	{pc}		; (ldr pc, [sp], #4)
   3c000:	bl	12348 <__errno_location@plt>
   3c004:	mov	r3, #12
   3c008:	str	r3, [r0]
   3c00c:	b	3bff0 <__assert_fail@plt+0x299fc>
   3c010:	umull	r2, r3, r1, r2
   3c014:	cmp	r3, #0
   3c018:	bne	3c024 <__assert_fail@plt+0x29a30>
   3c01c:	mov	r1, r2
   3c020:	b	3bfb8 <__assert_fail@plt+0x299c4>
   3c024:	str	r4, [sp, #-8]!
   3c028:	str	lr, [sp, #4]
   3c02c:	bl	12348 <__errno_location@plt>
   3c030:	mov	r3, #12
   3c034:	ldr	r4, [sp]
   3c038:	add	sp, sp, #4
   3c03c:	str	r3, [r0]
   3c040:	mov	r0, #0
   3c044:	pop	{pc}		; (ldr pc, [sp], #4)
   3c048:	ldr	r3, [r1, #40]	; 0x28
   3c04c:	ldr	ip, [r1, #56]	; 0x38
   3c050:	cmp	ip, r3
   3c054:	ble	3c118 <__assert_fail@plt+0x29b24>
   3c058:	str	r4, [sp, #-8]!
   3c05c:	ldr	r4, [r1, #80]	; 0x50
   3c060:	str	lr, [sp, #4]
   3c064:	ldr	lr, [r1, #4]
   3c068:	cmp	r4, #1
   3c06c:	ldrb	ip, [lr, r3]
   3c070:	strb	ip, [r0]
   3c074:	ble	3c094 <__assert_fail@plt+0x29aa0>
   3c078:	ldr	r4, [r1, #28]
   3c07c:	cmp	r3, r4
   3c080:	beq	3c094 <__assert_fail@plt+0x29aa0>
   3c084:	ldr	r4, [r1, #8]
   3c088:	ldr	r4, [r4, r3, lsl #2]
   3c08c:	cmn	r4, #1
   3c090:	beq	3c0d8 <__assert_fail@plt+0x29ae4>
   3c094:	cmp	ip, #92	; 0x5c
   3c098:	beq	3c0d0 <__assert_fail@plt+0x29adc>
   3c09c:	cmp	ip, #91	; 0x5b
   3c0a0:	beq	3c158 <__assert_fail@plt+0x29b64>
   3c0a4:	cmp	ip, #93	; 0x5d
   3c0a8:	beq	3c1b0 <__assert_fail@plt+0x29bbc>
   3c0ac:	cmp	ip, #94	; 0x5e
   3c0b0:	bne	3c0f4 <__assert_fail@plt+0x29b00>
   3c0b4:	mov	r2, #25
   3c0b8:	mov	r3, #1
   3c0bc:	ldr	r4, [sp]
   3c0c0:	add	sp, sp, #4
   3c0c4:	strb	r2, [r0, #4]
   3c0c8:	mov	r0, r3
   3c0cc:	pop	{pc}		; (ldr pc, [sp], #4)
   3c0d0:	tst	r2, #1
   3c0d4:	bne	3c12c <__assert_fail@plt+0x29b38>
   3c0d8:	mov	r2, #1
   3c0dc:	mov	r3, r2
   3c0e0:	strb	r2, [r0, #4]
   3c0e4:	ldr	r4, [sp]
   3c0e8:	add	sp, sp, #4
   3c0ec:	mov	r0, r3
   3c0f0:	pop	{pc}		; (ldr pc, [sp], #4)
   3c0f4:	cmp	ip, #45	; 0x2d
   3c0f8:	bne	3c0d8 <__assert_fail@plt+0x29ae4>
   3c0fc:	mov	r2, #22
   3c100:	mov	r3, #1
   3c104:	ldr	r4, [sp]
   3c108:	add	sp, sp, #4
   3c10c:	strb	r2, [r0, #4]
   3c110:	mov	r0, r3
   3c114:	pop	{pc}		; (ldr pc, [sp], #4)
   3c118:	mov	r2, #2
   3c11c:	mov	r3, #0
   3c120:	strb	r2, [r0, #4]
   3c124:	mov	r0, r3
   3c128:	bx	lr
   3c12c:	ldr	r2, [r1, #48]	; 0x30
   3c130:	add	r3, r3, #1
   3c134:	cmp	r3, r2
   3c138:	bge	3c0d8 <__assert_fail@plt+0x29ae4>
   3c13c:	str	r3, [r1, #40]	; 0x28
   3c140:	mov	r2, #1
   3c144:	ldrb	r1, [lr, r3]
   3c148:	mov	r3, r2
   3c14c:	strb	r1, [r0]
   3c150:	strb	r2, [r0, #4]
   3c154:	b	3c0e4 <__assert_fail@plt+0x29af0>
   3c158:	ldr	r1, [r1, #48]	; 0x30
   3c15c:	add	ip, r3, #1
   3c160:	cmp	ip, r1
   3c164:	bge	3c198 <__assert_fail@plt+0x29ba4>
   3c168:	add	r3, lr, r3
   3c16c:	ldrb	r3, [r3, #1]
   3c170:	cmp	r3, #58	; 0x3a
   3c174:	strb	r3, [r0]
   3c178:	beq	3c1dc <__assert_fail@plt+0x29be8>
   3c17c:	cmp	r3, #61	; 0x3d
   3c180:	beq	3c1cc <__assert_fail@plt+0x29bd8>
   3c184:	cmp	r3, #46	; 0x2e
   3c188:	moveq	r2, #26
   3c18c:	moveq	r3, #2
   3c190:	strbeq	r2, [r0, #4]
   3c194:	beq	3c0e4 <__assert_fail@plt+0x29af0>
   3c198:	mov	r2, #1
   3c19c:	mov	r1, #91	; 0x5b
   3c1a0:	mov	r3, r2
   3c1a4:	strb	r1, [r0]
   3c1a8:	strb	r2, [r0, #4]
   3c1ac:	b	3c0e4 <__assert_fail@plt+0x29af0>
   3c1b0:	mov	r2, #21
   3c1b4:	mov	r3, #1
   3c1b8:	ldr	r4, [sp]
   3c1bc:	add	sp, sp, #4
   3c1c0:	strb	r2, [r0, #4]
   3c1c4:	mov	r0, r3
   3c1c8:	pop	{pc}		; (ldr pc, [sp], #4)
   3c1cc:	mov	r2, #28
   3c1d0:	mov	r3, #2
   3c1d4:	strb	r2, [r0, #4]
   3c1d8:	b	3c0e4 <__assert_fail@plt+0x29af0>
   3c1dc:	tst	r2, #4
   3c1e0:	beq	3c198 <__assert_fail@plt+0x29ba4>
   3c1e4:	mov	r2, #30
   3c1e8:	mov	r3, #2
   3c1ec:	strb	r2, [r0, #4]
   3c1f0:	b	3c0e4 <__assert_fail@plt+0x29af0>
   3c1f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3c1f8:	strd	r6, [sp, #8]
   3c1fc:	ldr	r7, [r0, #84]	; 0x54
   3c200:	strd	r8, [sp, #16]
   3c204:	strd	sl, [sp, #24]
   3c208:	mov	fp, r1
   3c20c:	str	lr, [sp, #32]
   3c210:	sub	sp, sp, #52	; 0x34
   3c214:	ldr	r8, [r7, #24]
   3c218:	str	r3, [sp, #24]
   3c21c:	add	r3, r3, r3, lsl #1
   3c220:	add	r8, r8, r3, lsl #2
   3c224:	ldr	r1, [r8, #4]
   3c228:	cmp	r1, #0
   3c22c:	ble	3c3e0 <__assert_fail@plt+0x29dec>
   3c230:	ldr	r3, [sp, #88]	; 0x58
   3c234:	mov	r9, r2
   3c238:	mov	r2, #1
   3c23c:	mov	sl, r0
   3c240:	and	r0, fp, #2
   3c244:	mov	r4, #0
   3c248:	str	r0, [sp, #12]
   3c24c:	and	r0, fp, #1
   3c250:	add	r3, r3, r3, lsl r2
   3c254:	str	r0, [sp, #16]
   3c258:	lsl	r2, r2, r9
   3c25c:	lsl	r3, r3, #3
   3c260:	str	r2, [sp, #20]
   3c264:	str	r3, [sp, #28]
   3c268:	mvn	r3, r2
   3c26c:	str	r3, [sp, #32]
   3c270:	b	3c288 <__assert_fail@plt+0x29c94>
   3c274:	cmp	r3, #4
   3c278:	beq	3c304 <__assert_fail@plt+0x29d10>
   3c27c:	add	r4, r4, #1
   3c280:	cmp	r4, r1
   3c284:	bge	3c3e0 <__assert_fail@plt+0x29dec>
   3c288:	ldr	r3, [r8, #8]
   3c28c:	ldr	r2, [r7]
   3c290:	ldr	r5, [r3, r4, lsl #2]
   3c294:	add	r3, r2, r5, lsl #3
   3c298:	ldrb	r3, [r3, #4]
   3c29c:	cmp	r3, #8
   3c2a0:	beq	3c2cc <__assert_fail@plt+0x29cd8>
   3c2a4:	cmp	r3, #9
   3c2a8:	bne	3c274 <__assert_fail@plt+0x29c80>
   3c2ac:	ldr	r3, [sp, #12]
   3c2b0:	cmp	r3, #0
   3c2b4:	beq	3c27c <__assert_fail@plt+0x29c88>
   3c2b8:	ldr	r3, [r2, r5, lsl #3]
   3c2bc:	cmp	r3, r9
   3c2c0:	bne	3c27c <__assert_fail@plt+0x29c88>
   3c2c4:	mov	r0, #0
   3c2c8:	b	3c2e8 <__assert_fail@plt+0x29cf4>
   3c2cc:	ldr	r3, [sp, #16]
   3c2d0:	cmp	r3, #0
   3c2d4:	beq	3c27c <__assert_fail@plt+0x29c88>
   3c2d8:	ldr	r3, [r2, r5, lsl #3]
   3c2dc:	cmp	r3, r9
   3c2e0:	bne	3c27c <__assert_fail@plt+0x29c88>
   3c2e4:	mvn	r0, #0
   3c2e8:	add	sp, sp, #52	; 0x34
   3c2ec:	ldrd	r4, [sp]
   3c2f0:	ldrd	r6, [sp, #8]
   3c2f4:	ldrd	r8, [sp, #16]
   3c2f8:	ldrd	sl, [sp, #24]
   3c2fc:	add	sp, sp, #32
   3c300:	pop	{pc}		; (ldr pc, [sp], #4)
   3c304:	ldr	r3, [sp, #88]	; 0x58
   3c308:	cmn	r3, #1
   3c30c:	beq	3c27c <__assert_fail@plt+0x29c88>
   3c310:	add	r3, r5, r5, lsl #1
   3c314:	ldr	r2, [sp, #28]
   3c318:	cmp	r9, #31
   3c31c:	ldr	r6, [sl, #116]	; 0x74
   3c320:	lsl	r3, r3, #2
   3c324:	str	r3, [sp, #36]	; 0x24
   3c328:	add	r6, r6, r2
   3c32c:	bgt	3c3e8 <__assert_fail@plt+0x29df4>
   3c330:	ldr	r3, [sp, #12]
   3c334:	add	r6, r6, #24
   3c338:	str	r8, [sp, #40]	; 0x28
   3c33c:	str	r4, [sp, #44]	; 0x2c
   3c340:	ldr	r4, [sp, #24]
   3c344:	cmp	r3, #0
   3c348:	bne	3c478 <__assert_fail@plt+0x29e84>
   3c34c:	ldr	r8, [sp, #36]	; 0x24
   3c350:	ldr	r3, [r6, #-24]	; 0xffffffe8
   3c354:	cmp	r5, r3
   3c358:	bne	3c3b8 <__assert_fail@plt+0x29dc4>
   3c35c:	ldr	r3, [r6, #-8]
   3c360:	mov	r2, r9
   3c364:	mov	r1, fp
   3c368:	mov	r0, sl
   3c36c:	ldr	ip, [sp, #20]
   3c370:	tst	ip, r3
   3c374:	beq	3c3b8 <__assert_fail@plt+0x29dc4>
   3c378:	ldr	r3, [r7, #20]
   3c37c:	add	r3, r3, r8
   3c380:	ldr	r3, [r3, #8]
   3c384:	ldr	ip, [r3]
   3c388:	cmp	r4, ip
   3c38c:	mov	r3, ip
   3c390:	beq	3c46c <__assert_fail@plt+0x29e78>
   3c394:	ldr	ip, [sp, #88]	; 0x58
   3c398:	str	ip, [sp]
   3c39c:	bl	3c1f4 <__assert_fail@plt+0x29c00>
   3c3a0:	cmn	r0, #1
   3c3a4:	beq	3c2e4 <__assert_fail@plt+0x29cf0>
   3c3a8:	ldr	r3, [r6, #-8]
   3c3ac:	ldr	r2, [sp, #32]
   3c3b0:	and	r3, r3, r2
   3c3b4:	str	r3, [r6, #-8]
   3c3b8:	add	r6, r6, #24
   3c3bc:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   3c3c0:	cmp	r3, #0
   3c3c4:	bne	3c350 <__assert_fail@plt+0x29d5c>
   3c3c8:	ldr	r8, [sp, #40]	; 0x28
   3c3cc:	ldr	r4, [sp, #44]	; 0x2c
   3c3d0:	add	r4, r4, #1
   3c3d4:	ldr	r1, [r8, #4]
   3c3d8:	cmp	r4, r1
   3c3dc:	blt	3c288 <__assert_fail@plt+0x29c94>
   3c3e0:	asr	r0, fp, #1
   3c3e4:	b	3c2e8 <__assert_fail@plt+0x29cf4>
   3c3e8:	ldr	r2, [sp, #12]
   3c3ec:	add	r6, r6, #24
   3c3f0:	cmp	r2, #0
   3c3f4:	bne	3c504 <__assert_fail@plt+0x29f10>
   3c3f8:	str	r8, [sp, #36]	; 0x24
   3c3fc:	mov	r8, r3
   3c400:	str	r4, [sp, #40]	; 0x28
   3c404:	ldr	r4, [sp, #24]
   3c408:	mov	r2, r9
   3c40c:	mov	r1, fp
   3c410:	ldr	r3, [r6, #-24]	; 0xffffffe8
   3c414:	mov	r0, sl
   3c418:	add	r6, r6, #24
   3c41c:	cmp	r5, r3
   3c420:	bne	3c454 <__assert_fail@plt+0x29e60>
   3c424:	ldr	r3, [r7, #20]
   3c428:	add	r3, r3, r8
   3c42c:	ldr	r3, [r3, #8]
   3c430:	ldr	ip, [r3]
   3c434:	cmp	r4, ip
   3c438:	mov	r3, ip
   3c43c:	beq	3c46c <__assert_fail@plt+0x29e78>
   3c440:	ldr	ip, [sp, #88]	; 0x58
   3c444:	str	ip, [sp]
   3c448:	bl	3c1f4 <__assert_fail@plt+0x29c00>
   3c44c:	cmn	r0, #1
   3c450:	beq	3c2e4 <__assert_fail@plt+0x29cf0>
   3c454:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   3c458:	cmp	r3, #0
   3c45c:	bne	3c408 <__assert_fail@plt+0x29e14>
   3c460:	ldr	r8, [sp, #36]	; 0x24
   3c464:	ldr	r4, [sp, #40]	; 0x28
   3c468:	b	3c3d0 <__assert_fail@plt+0x29ddc>
   3c46c:	ldr	r3, [sp, #16]
   3c470:	rsb	r0, r3, #0
   3c474:	b	3c2e8 <__assert_fail@plt+0x29cf4>
   3c478:	ldr	r8, [sp, #88]	; 0x58
   3c47c:	b	3c4a0 <__assert_fail@plt+0x29eac>
   3c480:	ldr	r3, [r6, #-8]
   3c484:	ldr	r2, [sp, #32]
   3c488:	and	r3, r3, r2
   3c48c:	str	r3, [r6, #-8]
   3c490:	add	r6, r6, #24
   3c494:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   3c498:	cmp	r3, #0
   3c49c:	beq	3c3c8 <__assert_fail@plt+0x29dd4>
   3c4a0:	ldr	r3, [r6, #-24]	; 0xffffffe8
   3c4a4:	cmp	r3, r5
   3c4a8:	bne	3c490 <__assert_fail@plt+0x29e9c>
   3c4ac:	ldr	r3, [r6, #-8]
   3c4b0:	mov	r2, r9
   3c4b4:	mov	r1, fp
   3c4b8:	mov	r0, sl
   3c4bc:	ldr	ip, [sp, #20]
   3c4c0:	tst	ip, r3
   3c4c4:	beq	3c490 <__assert_fail@plt+0x29e9c>
   3c4c8:	ldr	r3, [r7, #20]
   3c4cc:	ldr	ip, [sp, #36]	; 0x24
   3c4d0:	add	r3, r3, ip
   3c4d4:	ldr	r3, [r3, #8]
   3c4d8:	ldr	ip, [r3]
   3c4dc:	cmp	r4, ip
   3c4e0:	mov	r3, ip
   3c4e4:	beq	3c46c <__assert_fail@plt+0x29e78>
   3c4e8:	str	r8, [sp]
   3c4ec:	bl	3c1f4 <__assert_fail@plt+0x29c00>
   3c4f0:	cmn	r0, #1
   3c4f4:	beq	3c2e4 <__assert_fail@plt+0x29cf0>
   3c4f8:	cmp	r0, #0
   3c4fc:	bne	3c480 <__assert_fail@plt+0x29e8c>
   3c500:	b	3c2c4 <__assert_fail@plt+0x29cd0>
   3c504:	str	r8, [sp, #40]	; 0x28
   3c508:	str	r4, [sp, #44]	; 0x2c
   3c50c:	ldr	r4, [sp, #24]
   3c510:	ldr	r8, [sp, #88]	; 0x58
   3c514:	b	3c524 <__assert_fail@plt+0x29f30>
   3c518:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   3c51c:	cmp	r3, #0
   3c520:	beq	3c3c8 <__assert_fail@plt+0x29dd4>
   3c524:	ldr	r3, [r6, #-24]	; 0xffffffe8
   3c528:	mov	r2, r9
   3c52c:	mov	r1, fp
   3c530:	mov	r0, sl
   3c534:	add	r6, r6, #24
   3c538:	cmp	r5, r3
   3c53c:	bne	3c518 <__assert_fail@plt+0x29f24>
   3c540:	ldr	r3, [r7, #20]
   3c544:	ldr	ip, [sp, #36]	; 0x24
   3c548:	add	r3, r3, ip
   3c54c:	ldr	r3, [r3, #8]
   3c550:	ldr	ip, [r3]
   3c554:	cmp	r4, ip
   3c558:	mov	r3, ip
   3c55c:	beq	3c46c <__assert_fail@plt+0x29e78>
   3c560:	str	r8, [sp]
   3c564:	bl	3c1f4 <__assert_fail@plt+0x29c00>
   3c568:	cmn	r0, #1
   3c56c:	beq	3c2e4 <__assert_fail@plt+0x29cf0>
   3c570:	cmp	r0, #0
   3c574:	beq	3c2c4 <__assert_fail@plt+0x29cd0>
   3c578:	b	3c518 <__assert_fail@plt+0x29f24>
   3c57c:	ldr	r3, [r0, #80]	; 0x50
   3c580:	strd	r4, [sp, #-16]!
   3c584:	mov	r4, r0
   3c588:	mov	r5, r1
   3c58c:	str	r6, [sp, #8]
   3c590:	str	lr, [sp, #12]
   3c594:	cmp	r3, #1
   3c598:	ble	3c5e0 <__assert_fail@plt+0x29fec>
   3c59c:	cmn	r1, #-1073741823	; 0xc0000001
   3c5a0:	bhi	3c620 <__assert_fail@plt+0x2a02c>
   3c5a4:	lsl	r6, r1, #2
   3c5a8:	ldr	r0, [r0, #8]
   3c5ac:	mov	r1, r6
   3c5b0:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3c5b4:	subs	r3, r0, #0
   3c5b8:	beq	3c620 <__assert_fail@plt+0x2a02c>
   3c5bc:	ldr	r0, [r4, #12]
   3c5c0:	str	r3, [r4, #8]
   3c5c4:	cmp	r0, #0
   3c5c8:	beq	3c5e0 <__assert_fail@plt+0x29fec>
   3c5cc:	mov	r1, r6
   3c5d0:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3c5d4:	cmp	r0, #0
   3c5d8:	beq	3c620 <__assert_fail@plt+0x2a02c>
   3c5dc:	str	r0, [r4, #12]
   3c5e0:	ldrb	r3, [r4, #75]	; 0x4b
   3c5e4:	cmp	r3, #0
   3c5e8:	bne	3c604 <__assert_fail@plt+0x2a010>
   3c5ec:	str	r5, [r4, #36]	; 0x24
   3c5f0:	mov	r0, #0
   3c5f4:	ldrd	r4, [sp]
   3c5f8:	ldr	r6, [sp, #8]
   3c5fc:	add	sp, sp, #12
   3c600:	pop	{pc}		; (ldr pc, [sp], #4)
   3c604:	mov	r1, r5
   3c608:	ldr	r0, [r4, #4]
   3c60c:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3c610:	cmp	r0, #0
   3c614:	beq	3c620 <__assert_fail@plt+0x2a02c>
   3c618:	str	r0, [r4, #4]
   3c61c:	b	3c5ec <__assert_fail@plt+0x29ff8>
   3c620:	ldrd	r4, [sp]
   3c624:	mov	r0, #12
   3c628:	ldr	r6, [sp, #8]
   3c62c:	add	sp, sp, #12
   3c630:	pop	{pc}		; (ldr pc, [sp], #4)
   3c634:	ldr	r3, [r1, #8]
   3c638:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3c63c:	mov	r4, #0
   3c640:	mov	r5, r1
   3c644:	strd	r6, [sp, #8]
   3c648:	mov	r7, r2
   3c64c:	str	r8, [sp, #16]
   3c650:	mov	r8, r0
   3c654:	str	lr, [sp, #20]
   3c658:	lsl	r0, r3, #2
   3c65c:	str	r2, [r1]
   3c660:	str	r3, [r1, #16]
   3c664:	str	r4, [r1, #20]
   3c668:	bl	3b49c <__assert_fail@plt+0x28ea8>
   3c66c:	cmp	r0, r4
   3c670:	str	r0, [r5, #24]
   3c674:	beq	3c750 <__assert_fail@plt+0x2a15c>
   3c678:	ldr	r1, [r5, #8]
   3c67c:	cmp	r1, #0
   3c680:	bgt	3c690 <__assert_fail@plt+0x2a09c>
   3c684:	b	3c6dc <__assert_fail@plt+0x2a0e8>
   3c688:	cmp	r4, r1
   3c68c:	bge	3c6dc <__assert_fail@plt+0x2a0e8>
   3c690:	ldr	r2, [r5, #12]
   3c694:	ldr	r3, [r8]
   3c698:	ldr	r6, [r2, r4, lsl #2]
   3c69c:	add	r4, r4, #1
   3c6a0:	add	r3, r3, r6, lsl #3
   3c6a4:	ldrb	r3, [r3, #4]
   3c6a8:	tst	r3, #8
   3c6ac:	bne	3c688 <__assert_fail@plt+0x2a094>
   3c6b0:	ldr	r3, [r5, #16]
   3c6b4:	ldr	r1, [r5, #20]
   3c6b8:	ldr	r0, [r5, #24]
   3c6bc:	cmp	r3, r1
   3c6c0:	beq	3c728 <__assert_fail@plt+0x2a134>
   3c6c4:	add	r3, r1, #1
   3c6c8:	str	r3, [r5, #20]
   3c6cc:	str	r6, [r0, r1, lsl #2]
   3c6d0:	ldr	r1, [r5, #8]
   3c6d4:	cmp	r4, r1
   3c6d8:	blt	3c690 <__assert_fail@plt+0x2a09c>
   3c6dc:	ldr	r6, [r8, #32]
   3c6e0:	ldr	r4, [r8, #68]	; 0x44
   3c6e4:	and	r7, r7, r4
   3c6e8:	add	r7, r7, r7, lsl #1
   3c6ec:	lsl	r4, r7, #2
   3c6f0:	add	r7, r6, r4
   3c6f4:	ldr	r3, [r6, r4]
   3c6f8:	ldrd	r0, [r7, #4]
   3c6fc:	add	r2, r3, #1
   3c700:	cmp	r0, r3
   3c704:	ble	3c758 <__assert_fail@plt+0x2a164>
   3c708:	mov	r0, #0
   3c70c:	str	r2, [r6, r4]
   3c710:	str	r5, [r1, r3, lsl #2]
   3c714:	ldrd	r4, [sp]
   3c718:	ldrd	r6, [sp, #8]
   3c71c:	ldr	r8, [sp, #16]
   3c720:	add	sp, sp, #20
   3c724:	pop	{pc}		; (ldr pc, [sp], #4)
   3c728:	add	r1, r1, #1
   3c72c:	lsl	r3, r1, #1
   3c730:	lsl	r1, r1, #3
   3c734:	str	r3, [r5, #16]
   3c738:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3c73c:	cmp	r0, #0
   3c740:	beq	3c750 <__assert_fail@plt+0x2a15c>
   3c744:	str	r0, [r5, #24]
   3c748:	ldr	r1, [r5, #20]
   3c74c:	b	3c6c4 <__assert_fail@plt+0x2a0d0>
   3c750:	mov	r0, #12
   3c754:	b	3c714 <__assert_fail@plt+0x2a120>
   3c758:	mov	r0, r1
   3c75c:	lsl	r1, r2, #3
   3c760:	lsl	r8, r2, #1
   3c764:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3c768:	subs	r1, r0, #0
   3c76c:	beq	3c750 <__assert_fail@plt+0x2a15c>
   3c770:	ldr	r3, [r6, r4]
   3c774:	str	r8, [r7, #4]
   3c778:	str	r1, [r7, #8]
   3c77c:	add	r2, r3, #1
   3c780:	b	3c708 <__assert_fail@plt+0x2a114>
   3c784:	strd	r4, [sp, #-28]!	; 0xffffffe4
   3c788:	mov	r5, r0
   3c78c:	ldr	r4, [r0, #28]
   3c790:	ldr	r3, [r0, #48]	; 0x30
   3c794:	strd	r6, [sp, #8]
   3c798:	strd	r8, [sp, #16]
   3c79c:	ldr	r8, [r0, #36]	; 0x24
   3c7a0:	str	lr, [sp, #24]
   3c7a4:	sub	sp, sp, #84	; 0x54
   3c7a8:	cmp	r8, r3
   3c7ac:	movge	r8, r3
   3c7b0:	cmp	r8, r4
   3c7b4:	ble	3c848 <__assert_fail@plt+0x2a254>
   3c7b8:	add	r9, r0, #16
   3c7bc:	ldr	r3, [r5, #64]	; 0x40
   3c7c0:	sub	r2, r8, r4
   3c7c4:	ldrd	r0, [r9]
   3c7c8:	cmp	r3, #0
   3c7cc:	strd	r0, [sp, #8]
   3c7d0:	bne	3c89c <__assert_fail@plt+0x2a2a8>
   3c7d4:	ldr	r1, [r5]
   3c7d8:	ldr	r3, [r5, #24]
   3c7dc:	add	r3, r4, r3
   3c7e0:	add	r1, r1, r3
   3c7e4:	mov	r3, r9
   3c7e8:	add	r0, sp, #4
   3c7ec:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   3c7f0:	sub	r3, r0, #1
   3c7f4:	cmn	r3, #3
   3c7f8:	bhi	3c868 <__assert_fail@plt+0x2a274>
   3c7fc:	cmn	r0, #2
   3c800:	ldrne	lr, [sp, #4]
   3c804:	beq	3c944 <__assert_fail@plt+0x2a350>
   3c808:	add	r2, r4, #1
   3c80c:	add	r1, r4, r0
   3c810:	lsl	r3, r4, #2
   3c814:	ldr	ip, [r5, #8]
   3c818:	cmp	r2, r1
   3c81c:	str	lr, [ip, r4, lsl #2]
   3c820:	bge	3c934 <__assert_fail@plt+0x2a340>
   3c824:	sub	r2, r0, #-1073741823	; 0xc0000001
   3c828:	add	r3, r3, #4
   3c82c:	mov	r4, r1
   3c830:	lsl	r2, r2, #2
   3c834:	add	r0, ip, r3
   3c838:	mov	r1, #255	; 0xff
   3c83c:	bl	12378 <memset@plt>
   3c840:	cmp	r4, r8
   3c844:	blt	3c7bc <__assert_fail@plt+0x2a1c8>
   3c848:	str	r4, [r5, #28]
   3c84c:	str	r4, [r5, #32]
   3c850:	add	sp, sp, #84	; 0x54
   3c854:	ldrd	r4, [sp]
   3c858:	ldrd	r6, [sp, #8]
   3c85c:	ldrd	r8, [sp, #16]
   3c860:	add	sp, sp, #24
   3c864:	pop	{pc}		; (ldr pc, [sp], #4)
   3c868:	ldr	r3, [r5]
   3c86c:	mov	r0, #1
   3c870:	ldr	r1, [r5, #24]
   3c874:	ldr	r2, [r5, #64]	; 0x40
   3c878:	add	r3, r3, r4
   3c87c:	ldrd	r6, [sp, #8]
   3c880:	ldrb	lr, [r3, r1]
   3c884:	cmp	r2, #0
   3c888:	str	lr, [sp, #4]
   3c88c:	ldrbne	lr, [r2, lr]
   3c890:	strd	r6, [r9]
   3c894:	strne	lr, [sp, #4]
   3c898:	b	3c808 <__assert_fail@plt+0x2a214>
   3c89c:	ldr	r1, [r5, #80]	; 0x50
   3c8a0:	cmp	r1, #0
   3c8a4:	cmpgt	r2, #0
   3c8a8:	ble	3c92c <__assert_fail@plt+0x2a338>
   3c8ac:	ldr	r1, [r5]
   3c8b0:	ldr	r0, [r5, #4]
   3c8b4:	ldr	ip, [r5, #24]
   3c8b8:	add	r1, r1, r4
   3c8bc:	ldrb	r1, [r1, ip]
   3c8c0:	ldrb	r1, [r3, r1]
   3c8c4:	strb	r1, [r0, r4]
   3c8c8:	ldr	r3, [r5, #80]	; 0x50
   3c8cc:	strb	r1, [sp, #16]
   3c8d0:	cmp	r2, r3
   3c8d4:	movlt	r3, r2
   3c8d8:	cmp	r3, #1
   3c8dc:	ble	3c92c <__assert_fail@plt+0x2a338>
   3c8e0:	add	r0, sp, #16
   3c8e4:	mov	r1, #1
   3c8e8:	ldr	r3, [r5]
   3c8ec:	ldr	ip, [r5, #24]
   3c8f0:	ldr	lr, [r5, #64]	; 0x40
   3c8f4:	add	r3, r3, r4
   3c8f8:	add	r3, r3, r1
   3c8fc:	ldrb	ip, [r3, ip]
   3c900:	ldr	r3, [r5, #4]
   3c904:	ldrb	ip, [lr, ip]
   3c908:	add	r3, r3, r1
   3c90c:	add	r1, r1, #1
   3c910:	strb	ip, [r3, r4]
   3c914:	ldr	r3, [r5, #80]	; 0x50
   3c918:	strb	ip, [r0, #1]!
   3c91c:	cmp	r2, r3
   3c920:	movlt	r3, r2
   3c924:	cmp	r3, r1
   3c928:	bgt	3c8e8 <__assert_fail@plt+0x2a2f4>
   3c92c:	add	r1, sp, #16
   3c930:	b	3c7e4 <__assert_fail@plt+0x2a1f0>
   3c934:	cmp	r8, r2
   3c938:	mov	r4, r2
   3c93c:	bgt	3c7bc <__assert_fail@plt+0x2a1c8>
   3c940:	b	3c848 <__assert_fail@plt+0x2a254>
   3c944:	ldr	r2, [r5, #36]	; 0x24
   3c948:	ldr	r3, [r5, #48]	; 0x30
   3c94c:	cmp	r2, r3
   3c950:	bge	3c868 <__assert_fail@plt+0x2a274>
   3c954:	ldrd	r2, [sp, #8]
   3c958:	strd	r2, [r5, #16]
   3c95c:	b	3c848 <__assert_fail@plt+0x2a254>
   3c960:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3c964:	mov	r4, r0
   3c968:	ldr	r5, [r0, #28]
   3c96c:	ldr	r3, [r0, #48]	; 0x30
   3c970:	strd	r6, [sp, #8]
   3c974:	ldr	r6, [r0, #36]	; 0x24
   3c978:	strd	r8, [sp, #16]
   3c97c:	strd	sl, [sp, #24]
   3c980:	str	lr, [sp, #32]
   3c984:	sub	sp, sp, #108	; 0x6c
   3c988:	ldrb	r2, [r0, #74]	; 0x4a
   3c98c:	cmp	r6, r3
   3c990:	movge	r6, r3
   3c994:	cmp	r2, #0
   3c998:	bne	3c9a8 <__assert_fail@plt+0x2a3b4>
   3c99c:	ldr	r3, [r0, #64]	; 0x40
   3c9a0:	cmp	r3, #0
   3c9a4:	beq	3cae8 <__assert_fail@plt+0x2a4f4>
   3c9a8:	ldr	r7, [r4, #32]
   3c9ac:	cmp	r5, r6
   3c9b0:	bge	3cac0 <__assert_fail@plt+0x2a4cc>
   3c9b4:	add	r3, r4, #16
   3c9b8:	sub	fp, r6, r5
   3c9bc:	str	r3, [sp, #20]
   3c9c0:	add	r3, sp, #28
   3c9c4:	str	r3, [sp, #12]
   3c9c8:	ldrd	r0, [r4, #16]
   3c9cc:	ldr	r3, [r4, #64]	; 0x40
   3c9d0:	strd	r0, [sp, #32]
   3c9d4:	cmp	r3, #0
   3c9d8:	bne	3ccb8 <__assert_fail@plt+0x2a6c4>
   3c9dc:	ldr	r8, [r4]
   3c9e0:	ldr	r3, [r4, #24]
   3c9e4:	add	r3, r7, r3
   3c9e8:	add	r3, r8, r3
   3c9ec:	mov	r1, r3
   3c9f0:	str	r3, [sp, #4]
   3c9f4:	mov	r2, fp
   3c9f8:	ldr	r0, [sp, #12]
   3c9fc:	ldr	r3, [sp, #20]
   3ca00:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   3ca04:	sub	r3, r0, #1
   3ca08:	mov	r8, r0
   3ca0c:	cmn	r3, #4
   3ca10:	str	r3, [sp, #8]
   3ca14:	bhi	3cd50 <__assert_fail@plt+0x2a75c>
   3ca18:	ldr	r9, [sp, #28]
   3ca1c:	mov	fp, r5
   3ca20:	mov	r0, r9
   3ca24:	bl	1257c <towupper@plt>
   3ca28:	cmp	r9, r0
   3ca2c:	mov	sl, r0
   3ca30:	beq	3cd38 <__assert_fail@plt+0x2a744>
   3ca34:	add	r9, sp, #40	; 0x28
   3ca38:	add	r2, sp, #32
   3ca3c:	mov	r0, r9
   3ca40:	mov	r1, sl
   3ca44:	bl	11ef8 <wcrtomb@plt>
   3ca48:	cmp	r8, r0
   3ca4c:	mov	r3, r0
   3ca50:	bne	3cde0 <__assert_fail@plt+0x2a7ec>
   3ca54:	ldr	r0, [r4, #4]
   3ca58:	mov	r1, r9
   3ca5c:	mov	r2, r8
   3ca60:	add	r0, r0, r5
   3ca64:	bl	12024 <memcpy@plt>
   3ca68:	ldrb	r2, [r4, #76]	; 0x4c
   3ca6c:	cmp	r2, #0
   3ca70:	bne	3cdc0 <__assert_fail@plt+0x2a7cc>
   3ca74:	add	r2, r8, r7
   3ca78:	ldr	r0, [r4, #8]
   3ca7c:	add	r5, r5, #1
   3ca80:	add	ip, r8, fp
   3ca84:	cmp	r5, ip
   3ca88:	mov	r7, r2
   3ca8c:	lsl	r1, fp, #2
   3ca90:	str	sl, [r0, fp, lsl #2]
   3ca94:	bge	3c9ac <__assert_fail@plt+0x2a3b8>
   3ca98:	sub	r2, r8, #-1073741823	; 0xc0000001
   3ca9c:	add	r1, r1, #4
   3caa0:	lsl	r2, r2, #2
   3caa4:	add	r0, r0, r1
   3caa8:	mov	r1, #255	; 0xff
   3caac:	mov	r5, ip
   3cab0:	bl	12378 <memset@plt>
   3cab4:	b	3c9ac <__assert_fail@plt+0x2a3b8>
   3cab8:	ldrd	r2, [sp, #32]
   3cabc:	strd	r2, [r4, #16]
   3cac0:	mov	r0, #0
   3cac4:	str	r5, [r4, #28]
   3cac8:	str	r7, [r4, #32]
   3cacc:	add	sp, sp, #108	; 0x6c
   3cad0:	ldrd	r4, [sp]
   3cad4:	ldrd	r6, [sp, #8]
   3cad8:	ldrd	r8, [sp, #16]
   3cadc:	ldrd	sl, [sp, #24]
   3cae0:	add	sp, sp, #32
   3cae4:	pop	{pc}		; (ldr pc, [sp], #4)
   3cae8:	ldrb	r3, [r0, #76]	; 0x4c
   3caec:	cmp	r3, #0
   3caf0:	bne	3c9a8 <__assert_fail@plt+0x2a3b4>
   3caf4:	cmp	r5, r6
   3caf8:	bge	3cd28 <__assert_fail@plt+0x2a734>
   3cafc:	add	sl, r0, #16
   3cb00:	str	r6, [sp, #4]
   3cb04:	str	sl, [sp, #20]
   3cb08:	b	3cb88 <__assert_fail@plt+0x2a594>
   3cb0c:	add	r3, sp, #40	; 0x28
   3cb10:	add	r2, sp, #32
   3cb14:	mov	r0, r3
   3cb18:	mov	r1, r9
   3cb1c:	str	r3, [sp, #8]
   3cb20:	bl	11ef8 <wcrtomb@plt>
   3cb24:	cmp	r7, r0
   3cb28:	bne	3cd10 <__assert_fail@plt+0x2a71c>
   3cb2c:	ldr	r0, [r4, #4]
   3cb30:	mov	r2, r7
   3cb34:	ldr	r3, [sp, #8]
   3cb38:	add	r0, r0, r5
   3cb3c:	mov	r1, r3
   3cb40:	bl	12024 <memcpy@plt>
   3cb44:	ldr	r0, [r4, #8]
   3cb48:	add	r5, r5, #1
   3cb4c:	add	ip, r7, r8
   3cb50:	cmp	r5, ip
   3cb54:	lsl	r3, r8, #2
   3cb58:	str	r9, [r0, r8, lsl #2]
   3cb5c:	bge	3cb7c <__assert_fail@plt+0x2a588>
   3cb60:	sub	r2, r7, #-1073741823	; 0xc0000001
   3cb64:	add	r3, r3, #4
   3cb68:	lsl	r2, r2, #2
   3cb6c:	add	r0, r0, r3
   3cb70:	mov	r1, #255	; 0xff
   3cb74:	mov	r5, ip
   3cb78:	bl	12378 <memset@plt>
   3cb7c:	ldr	r3, [sp, #4]
   3cb80:	cmp	r3, r5
   3cb84:	ble	3cd28 <__assert_fail@plt+0x2a734>
   3cb88:	ldr	fp, [r4]
   3cb8c:	mov	r8, r5
   3cb90:	ldr	r7, [r4, #24]
   3cb94:	add	r2, fp, r7
   3cb98:	ldrb	r9, [r2, r5]
   3cb9c:	tst	r9, #128	; 0x80
   3cba0:	bne	3cbc4 <__assert_fail@plt+0x2a5d0>
   3cba4:	mov	r0, sl
   3cba8:	bl	12060 <mbsinit@plt>
   3cbac:	cmp	r0, #0
   3cbb0:	beq	3cbc4 <__assert_fail@plt+0x2a5d0>
   3cbb4:	mov	r0, r9
   3cbb8:	bl	1257c <towupper@plt>
   3cbbc:	bics	r3, r0, #127	; 0x7f
   3cbc0:	beq	3cc48 <__assert_fail@plt+0x2a654>
   3cbc4:	ldr	r3, [sp, #4]
   3cbc8:	add	r1, r7, r5
   3cbcc:	add	r0, sp, #28
   3cbd0:	add	r1, fp, r1
   3cbd4:	ldrd	r6, [sl]
   3cbd8:	str	r0, [sp, #12]
   3cbdc:	sub	r3, r3, r5
   3cbe0:	mov	r2, r3
   3cbe4:	str	r3, [sp, #16]
   3cbe8:	mov	r3, sl
   3cbec:	strd	r6, [sp, #32]
   3cbf0:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   3cbf4:	sub	r3, r0, #1
   3cbf8:	mov	r7, r0
   3cbfc:	cmn	r3, #4
   3cc00:	bhi	3cc60 <__assert_fail@plt+0x2a66c>
   3cc04:	ldr	r3, [sp, #28]
   3cc08:	mov	r0, r3
   3cc0c:	str	r3, [sp, #8]
   3cc10:	bl	1257c <towupper@plt>
   3cc14:	ldr	r3, [sp, #8]
   3cc18:	mov	r9, r0
   3cc1c:	cmp	r3, r0
   3cc20:	bne	3cb0c <__assert_fail@plt+0x2a518>
   3cc24:	ldr	r1, [r4]
   3cc28:	mov	r2, r7
   3cc2c:	ldr	r3, [r4, #24]
   3cc30:	ldr	r0, [r4, #4]
   3cc34:	add	r3, r5, r3
   3cc38:	add	r1, r1, r3
   3cc3c:	add	r0, r0, r5
   3cc40:	bl	12024 <memcpy@plt>
   3cc44:	b	3cb44 <__assert_fail@plt+0x2a550>
   3cc48:	ldr	r3, [r4, #4]
   3cc4c:	strb	r0, [r3, r5]
   3cc50:	ldr	r3, [r4, #8]
   3cc54:	str	r0, [r3, r5, lsl #2]
   3cc58:	add	r5, r5, #1
   3cc5c:	b	3cb7c <__assert_fail@plt+0x2a588>
   3cc60:	cmn	r3, #3
   3cc64:	beq	3cc90 <__assert_fail@plt+0x2a69c>
   3cc68:	ldr	r3, [r4, #4]
   3cc6c:	cmn	r0, #1
   3cc70:	strb	r9, [r3, r5]
   3cc74:	add	r5, r5, #1
   3cc78:	ldr	r3, [r4, #8]
   3cc7c:	str	r9, [r3, r8, lsl #2]
   3cc80:	bne	3cb7c <__assert_fail@plt+0x2a588>
   3cc84:	ldrd	r2, [sp, #32]
   3cc88:	strd	r2, [sl]
   3cc8c:	b	3cb7c <__assert_fail@plt+0x2a588>
   3cc90:	ldr	r2, [r4, #36]	; 0x24
   3cc94:	ldr	r3, [r4, #48]	; 0x30
   3cc98:	cmp	r2, r3
   3cc9c:	blt	3cd20 <__assert_fail@plt+0x2a72c>
   3cca0:	ldr	r3, [r4, #4]
   3cca4:	strb	r9, [r3, r5]
   3cca8:	add	r5, r5, #1
   3ccac:	ldr	r3, [r4, #8]
   3ccb0:	str	r9, [r3, r8, lsl #2]
   3ccb4:	b	3cb7c <__assert_fail@plt+0x2a588>
   3ccb8:	ldr	lr, [r4, #80]	; 0x50
   3ccbc:	cmp	fp, #0
   3ccc0:	cmpgt	lr, #0
   3ccc4:	ble	3cfa8 <__assert_fail@plt+0x2a9b4>
   3ccc8:	ldr	r8, [r4]
   3cccc:	cmp	lr, fp
   3ccd0:	add	r9, sp, #40	; 0x28
   3ccd4:	movge	lr, fp
   3ccd8:	mov	r1, r9
   3ccdc:	ldr	r2, [r4, #24]
   3cce0:	add	r2, r7, r2
   3cce4:	add	r8, r8, r2
   3cce8:	mov	r2, r8
   3ccec:	ldrb	r0, [r2], #1
   3ccf0:	ldrb	r0, [r3, r0]
   3ccf4:	sub	ip, r2, r8
   3ccf8:	cmp	ip, lr
   3ccfc:	strb	r0, [r1], #1
   3cd00:	blt	3ccec <__assert_fail@plt+0x2a6f8>
   3cd04:	mov	r1, r9
   3cd08:	str	r9, [sp, #4]
   3cd0c:	b	3c9f4 <__assert_fail@plt+0x2a400>
   3cd10:	mov	r7, r5
   3cd14:	ldr	r6, [sp, #4]
   3cd18:	ldr	fp, [sp, #16]
   3cd1c:	b	3c9c8 <__assert_fail@plt+0x2a3d4>
   3cd20:	ldrd	r2, [sp, #32]
   3cd24:	strd	r2, [sl]
   3cd28:	mov	r0, #0
   3cd2c:	str	r5, [r4, #28]
   3cd30:	str	r5, [r4, #32]
   3cd34:	b	3cacc <__assert_fail@plt+0x2a4d8>
   3cd38:	ldr	r0, [r4, #4]
   3cd3c:	mov	r2, r8
   3cd40:	ldr	r1, [sp, #4]
   3cd44:	add	r0, r0, r5
   3cd48:	bl	12024 <memcpy@plt>
   3cd4c:	b	3ca68 <__assert_fail@plt+0x2a474>
   3cd50:	cmn	r3, #3
   3cd54:	bne	3cd68 <__assert_fail@plt+0x2a774>
   3cd58:	ldr	r1, [r4, #36]	; 0x24
   3cd5c:	ldr	r2, [r4, #48]	; 0x30
   3cd60:	cmp	r1, r2
   3cd64:	blt	3cab8 <__assert_fail@plt+0x2a4c4>
   3cd68:	ldr	r2, [r4]
   3cd6c:	ldr	r0, [r4, #24]
   3cd70:	ldr	r1, [r4, #64]	; 0x40
   3cd74:	add	r2, r2, r7
   3cd78:	ldrb	r2, [r2, r0]
   3cd7c:	cmp	r1, #0
   3cd80:	ldr	r0, [r4, #4]
   3cd84:	ldrbne	r2, [r1, r2]
   3cd88:	lsl	r1, r5, #2
   3cd8c:	strb	r2, [r0, r5]
   3cd90:	ldrb	r0, [r4, #76]	; 0x4c
   3cd94:	cmp	r0, #0
   3cd98:	ldrne	r0, [r4, #12]
   3cd9c:	strne	r7, [r0, r5, lsl #2]
   3cda0:	cmn	r8, #1
   3cda4:	add	r7, r7, #1
   3cda8:	ldr	r0, [r4, #8]
   3cdac:	add	r5, r5, #1
   3cdb0:	str	r2, [r0, r1]
   3cdb4:	ldrdeq	r2, [sp, #32]
   3cdb8:	strdeq	r2, [r4, #16]
   3cdbc:	b	3c9ac <__assert_fail@plt+0x2a3b8>
   3cdc0:	ldr	r1, [r4, #12]
   3cdc4:	add	r2, r8, r7
   3cdc8:	add	r1, r1, r5, lsl #2
   3cdcc:	str	r7, [r1], #4
   3cdd0:	add	r7, r7, #1
   3cdd4:	cmp	r7, r2
   3cdd8:	bne	3cdcc <__assert_fail@plt+0x2a7d8>
   3cddc:	b	3ca78 <__assert_fail@plt+0x2a484>
   3cde0:	cmn	r0, #1
   3cde4:	beq	3cd38 <__assert_fail@plt+0x2a744>
   3cde8:	add	r2, r0, r5
   3cdec:	ldr	r0, [r4, #36]	; 0x24
   3cdf0:	str	r2, [sp, #4]
   3cdf4:	cmp	r2, r0
   3cdf8:	bhi	3cab8 <__assert_fail@plt+0x2a4c4>
   3cdfc:	ldr	r2, [r4, #12]
   3ce00:	cmp	r2, #0
   3ce04:	beq	3cfb0 <__assert_fail@plt+0x2a9bc>
   3ce08:	ldrb	r0, [r4, #76]	; 0x4c
   3ce0c:	cmp	r0, #0
   3ce10:	bne	3ceb0 <__assert_fail@plt+0x2a8bc>
   3ce14:	cmp	r5, #0
   3ce18:	beq	3cea8 <__assert_fail@plt+0x2a8b4>
   3ce1c:	ldr	r2, [r4, #12]
   3ce20:	sub	r1, r5, #1
   3ce24:	cmp	r1, #3
   3ce28:	ubfx	r1, r2, #2, #1
   3ce2c:	bls	3cfd4 <__assert_fail@plt+0x2a9e0>
   3ce30:	cmp	r1, #0
   3ce34:	sub	fp, r5, r1
   3ce38:	lsr	ip, fp, #1
   3ce3c:	mov	r6, r1
   3ce40:	add	lr, r1, #1
   3ce44:	strne	r0, [r2]
   3ce48:	add	r0, r2, r1, lsl #2
   3ce4c:	add	ip, r0, ip, lsl #3
   3ce50:	stm	r0, {r6, lr}
   3ce54:	add	r0, r0, #8
   3ce58:	add	r6, r6, #2
   3ce5c:	cmp	ip, r0
   3ce60:	add	lr, lr, #2
   3ce64:	bne	3ce50 <__assert_fail@plt+0x2a85c>
   3ce68:	bic	r0, fp, #1
   3ce6c:	cmp	r0, fp
   3ce70:	add	r1, r0, r1
   3ce74:	beq	3cea8 <__assert_fail@plt+0x2a8b4>
   3ce78:	add	ip, r1, #1
   3ce7c:	str	r1, [r2, r1, lsl #2]
   3ce80:	cmp	ip, r5
   3ce84:	bcs	3cea8 <__assert_fail@plt+0x2a8b4>
   3ce88:	add	r0, r1, #2
   3ce8c:	str	ip, [r2, ip, lsl #2]
   3ce90:	cmp	r0, r5
   3ce94:	bcs	3cea8 <__assert_fail@plt+0x2a8b4>
   3ce98:	add	r1, r1, #3
   3ce9c:	str	r0, [r2, r0, lsl #2]
   3cea0:	cmp	r1, r5
   3cea4:	strcc	r1, [r2, r1, lsl #2]
   3cea8:	mov	r2, #1
   3ceac:	strb	r2, [r4, #76]	; 0x4c
   3ceb0:	ldr	r0, [r4, #4]
   3ceb4:	mov	r2, r3
   3ceb8:	mov	r1, r9
   3cebc:	str	r3, [sp, #12]
   3cec0:	add	r0, r0, r5
   3cec4:	bl	12024 <memcpy@plt>
   3cec8:	ldr	r3, [sp, #12]
   3cecc:	lsl	r2, r5, #2
   3ced0:	ldr	r0, [r4, #8]
   3ced4:	ldr	ip, [r4, #12]
   3ced8:	cmp	r3, #1
   3cedc:	add	lr, r0, r2
   3cee0:	str	sl, [r0, r5, lsl #2]
   3cee4:	add	r2, ip, r2
   3cee8:	str	r7, [ip, r5, lsl #2]
   3ceec:	bls	3cf68 <__assert_fail@plt+0x2a974>
   3cef0:	cmp	r8, #1
   3cef4:	movls	r2, #1
   3cef8:	bls	3cf34 <__assert_fail@plt+0x2a940>
   3cefc:	cmp	r8, r3
   3cf00:	mov	r1, r2
   3cf04:	movcc	sl, r8
   3cf08:	movcs	sl, r3
   3cf0c:	mov	r2, #1
   3cf10:	mvn	r6, #0
   3cf14:	add	r9, r2, r7
   3cf18:	add	r2, r2, #1
   3cf1c:	cmp	r2, sl
   3cf20:	str	r9, [r1, #4]!
   3cf24:	str	r6, [lr, #4]!
   3cf28:	bcc	3cf14 <__assert_fail@plt+0x2a920>
   3cf2c:	cmp	r3, r2
   3cf30:	bls	3cf68 <__assert_fail@plt+0x2a974>
   3cf34:	ldr	lr, [sp, #8]
   3cf38:	sub	r1, r5, #-1073741823	; 0xc0000001
   3cf3c:	mvn	r5, #0
   3cf40:	add	r1, r1, r2
   3cf44:	lsl	r1, r1, #2
   3cf48:	add	ip, ip, r1
   3cf4c:	add	r0, r0, r1
   3cf50:	add	lr, lr, r7
   3cf54:	add	r2, r2, #1
   3cf58:	str	lr, [ip, #4]!
   3cf5c:	cmp	r3, r2
   3cf60:	str	r5, [r0, #4]!
   3cf64:	bhi	3cf54 <__assert_fail@plt+0x2a960>
   3cf68:	ldr	r6, [r4, #48]	; 0x30
   3cf6c:	sub	r2, r3, r8
   3cf70:	ldr	r1, [r4, #52]	; 0x34
   3cf74:	add	r6, r2, r6
   3cf78:	cmp	r1, r7
   3cf7c:	str	r6, [r4, #48]	; 0x30
   3cf80:	ble	3cf90 <__assert_fail@plt+0x2a99c>
   3cf84:	ldr	r1, [r4, #56]	; 0x38
   3cf88:	add	r2, r1, r2
   3cf8c:	str	r2, [r4, #56]	; 0x38
   3cf90:	ldr	r2, [r4, #36]	; 0x24
   3cf94:	add	r7, r8, r7
   3cf98:	ldr	r5, [sp, #4]
   3cf9c:	cmp	r6, r2
   3cfa0:	movge	r6, r2
   3cfa4:	b	3c9ac <__assert_fail@plt+0x2a3b8>
   3cfa8:	add	r9, sp, #40	; 0x28
   3cfac:	b	3cd04 <__assert_fail@plt+0x2a710>
   3cfb0:	lsl	r0, r0, #2
   3cfb4:	str	r3, [sp, #12]
   3cfb8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   3cfbc:	cmp	r0, #0
   3cfc0:	str	r0, [r4, #12]
   3cfc4:	moveq	r0, #12
   3cfc8:	ldr	r3, [sp, #12]
   3cfcc:	bne	3ce08 <__assert_fail@plt+0x2a814>
   3cfd0:	b	3cacc <__assert_fail@plt+0x2a4d8>
   3cfd4:	mov	r1, r0
   3cfd8:	b	3ce78 <__assert_fail@plt+0x2a884>
   3cfdc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3cfe0:	mov	r4, r0
   3cfe4:	ldr	ip, [r0, #8]
   3cfe8:	strd	r6, [sp, #8]
   3cfec:	ldr	r6, [r0, #4]
   3cff0:	strd	r8, [sp, #16]
   3cff4:	str	sl, [sp, #24]
   3cff8:	str	lr, [sp, #28]
   3cffc:	sub	sp, sp, #8
   3d000:	add	r3, sp, #8
   3d004:	cmp	ip, r6
   3d008:	stmdb	r3, {r1, r2}
   3d00c:	ldrb	r5, [sp, #4]
   3d010:	bcs	3d0e0 <__assert_fail@plt+0x2aaec>
   3d014:	ldr	r7, [r0, #12]
   3d018:	ldr	r6, [r0, #20]
   3d01c:	lsl	r0, ip, #3
   3d020:	cmp	r5, #5
   3d024:	ldr	lr, [r4]
   3d028:	ldrd	r2, [sp]
   3d02c:	add	r1, lr, r0
   3d030:	strd	r2, [lr, r0]
   3d034:	ldr	r3, [r1, #4]
   3d038:	bfc	r3, #8, #10
   3d03c:	str	r3, [r1, #4]
   3d040:	beq	3d0cc <__assert_fail@plt+0x2aad8>
   3d044:	sub	r5, r5, #6
   3d048:	clz	r5, r5
   3d04c:	lsr	r5, r5, #5
   3d050:	ldrb	r3, [r1, #6]
   3d054:	mvn	r0, #0
   3d058:	mov	r2, #0
   3d05c:	bfi	r3, r5, #4, #1
   3d060:	strb	r3, [r1, #6]
   3d064:	str	r0, [r7, ip, lsl #2]
   3d068:	ldr	r3, [r4, #8]
   3d06c:	add	r3, r3, r3, lsl #1
   3d070:	lsl	r3, r3, #2
   3d074:	add	r1, r6, r3
   3d078:	str	r2, [r6, r3]
   3d07c:	str	r2, [r1, #4]
   3d080:	str	r2, [r1, #8]
   3d084:	ldr	r3, [r4, #8]
   3d088:	ldr	r0, [r4, #24]
   3d08c:	add	r3, r3, r3, lsl #1
   3d090:	lsl	r3, r3, #2
   3d094:	add	r1, r0, r3
   3d098:	str	r2, [r0, r3]
   3d09c:	str	r2, [r1, #4]
   3d0a0:	str	r2, [r1, #8]
   3d0a4:	ldr	r0, [r4, #8]
   3d0a8:	add	r3, r0, #1
   3d0ac:	str	r3, [r4, #8]
   3d0b0:	add	sp, sp, #8
   3d0b4:	ldrd	r4, [sp]
   3d0b8:	ldrd	r6, [sp, #8]
   3d0bc:	ldrd	r8, [sp, #16]
   3d0c0:	ldr	sl, [sp, #24]
   3d0c4:	add	sp, sp, #28
   3d0c8:	pop	{pc}		; (ldr pc, [sp], #4)
   3d0cc:	ldr	r5, [r4, #92]	; 0x5c
   3d0d0:	cmp	r5, #1
   3d0d4:	movle	r5, #0
   3d0d8:	movgt	r5, #1
   3d0dc:	b	3d050 <__assert_fail@plt+0x2aa5c>
   3d0e0:	lsl	r9, r6, #1
   3d0e4:	movw	r3, #21845	; 0x5555
   3d0e8:	movt	r3, #5461	; 0x1555
   3d0ec:	cmp	r9, r3
   3d0f0:	bhi	3d1ac <__assert_fail@plt+0x2abb8>
   3d0f4:	lsl	r1, r6, #4
   3d0f8:	ldr	r0, [r0]
   3d0fc:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3d100:	cmp	r0, #0
   3d104:	beq	3d1ac <__assert_fail@plt+0x2abb8>
   3d108:	lsl	r8, r6, #3
   3d10c:	str	r0, [r4]
   3d110:	add	r6, r9, r6
   3d114:	ldr	r0, [r4, #12]
   3d118:	mov	r1, r8
   3d11c:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3d120:	mov	r7, r0
   3d124:	mov	r1, r8
   3d128:	lsl	r8, r6, #3
   3d12c:	ldr	r0, [r4, #16]
   3d130:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3d134:	mov	sl, r0
   3d138:	mov	r1, r8
   3d13c:	ldr	r0, [r4, #20]
   3d140:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3d144:	mov	r6, r0
   3d148:	mov	r1, r8
   3d14c:	ldr	r0, [r4, #24]
   3d150:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3d154:	cmp	sl, #0
   3d158:	cmpne	r7, #0
   3d15c:	mov	r8, r0
   3d160:	beq	3d18c <__assert_fail@plt+0x2ab98>
   3d164:	cmp	r0, #0
   3d168:	cmpne	r6, #0
   3d16c:	beq	3d18c <__assert_fail@plt+0x2ab98>
   3d170:	str	r9, [r4, #4]
   3d174:	str	r7, [r4, #12]
   3d178:	str	sl, [r4, #16]
   3d17c:	str	r6, [r4, #20]
   3d180:	str	r0, [r4, #24]
   3d184:	ldr	ip, [r4, #8]
   3d188:	b	3d01c <__assert_fail@plt+0x2aa28>
   3d18c:	mov	r0, r7
   3d190:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d194:	mov	r0, sl
   3d198:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d19c:	mov	r0, r6
   3d1a0:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d1a4:	mov	r0, r8
   3d1a8:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d1ac:	mvn	r0, #0
   3d1b0:	b	3d0b0 <__assert_fail@plt+0x2aabc>
   3d1b4:	ldr	r3, [r0, #124]	; 0x7c
   3d1b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3d1bc:	strd	r6, [sp, #8]
   3d1c0:	str	r8, [sp, #16]
   3d1c4:	mov	r8, r0
   3d1c8:	str	lr, [sp, #20]
   3d1cc:	cmp	r3, #0
   3d1d0:	ble	3d254 <__assert_fail@plt+0x2ac60>
   3d1d4:	mov	r7, #0
   3d1d8:	ldr	r3, [r8, #132]	; 0x84
   3d1dc:	ldr	r6, [r3, r7, lsl #2]
   3d1e0:	ldr	r3, [r6, #16]
   3d1e4:	cmp	r3, #0
   3d1e8:	ble	3d218 <__assert_fail@plt+0x2ac24>
   3d1ec:	mov	r4, #0
   3d1f0:	ldr	r3, [r6, #20]
   3d1f4:	ldr	r5, [r3, r4, lsl #2]
   3d1f8:	add	r4, r4, #1
   3d1fc:	ldr	r0, [r5, #16]
   3d200:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d204:	mov	r0, r5
   3d208:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d20c:	ldr	r3, [r6, #16]
   3d210:	cmp	r3, r4
   3d214:	bgt	3d1f0 <__assert_fail@plt+0x2abfc>
   3d218:	ldr	r0, [r6, #20]
   3d21c:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d220:	ldr	r3, [r6, #8]
   3d224:	cmp	r3, #0
   3d228:	beq	3d274 <__assert_fail@plt+0x2ac80>
   3d22c:	ldr	r0, [r3, #8]
   3d230:	add	r7, r7, #1
   3d234:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d238:	ldr	r0, [r6, #8]
   3d23c:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d240:	mov	r0, r6
   3d244:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d248:	ldr	r3, [r8, #124]	; 0x7c
   3d24c:	cmp	r3, r7
   3d250:	bgt	3d1d8 <__assert_fail@plt+0x2abe4>
   3d254:	mov	r3, #0
   3d258:	ldrd	r4, [sp]
   3d25c:	ldrd	r6, [sp, #8]
   3d260:	str	r3, [r8, #108]	; 0x6c
   3d264:	str	r3, [r8, #124]	; 0x7c
   3d268:	ldr	r8, [sp, #16]
   3d26c:	add	sp, sp, #20
   3d270:	pop	{pc}		; (ldr pc, [sp], #4)
   3d274:	mov	r0, r6
   3d278:	add	r7, r7, #1
   3d27c:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d280:	ldr	r3, [r8, #124]	; 0x7c
   3d284:	cmp	r3, r7
   3d288:	bgt	3d1d8 <__assert_fail@plt+0x2abe4>
   3d28c:	b	3d254 <__assert_fail@plt+0x2ac60>
   3d290:	ldr	r3, [r0]
   3d294:	strd	r4, [sp, #-16]!
   3d298:	mov	r4, r0
   3d29c:	str	r6, [sp, #8]
   3d2a0:	mov	r6, r1
   3d2a4:	str	lr, [sp, #12]
   3d2a8:	cmp	r3, #0
   3d2ac:	beq	3d2e0 <__assert_fail@plt+0x2acec>
   3d2b0:	ldmib	r0, {r1, r5}
   3d2b4:	cmp	r1, #0
   3d2b8:	bne	3d324 <__assert_fail@plt+0x2ad30>
   3d2bc:	str	r6, [r5]
   3d2c0:	mov	r0, #1
   3d2c4:	ldr	r3, [r4, #4]
   3d2c8:	add	r3, r3, r0
   3d2cc:	str	r3, [r4, #4]
   3d2d0:	ldrd	r4, [sp]
   3d2d4:	ldr	r6, [sp, #8]
   3d2d8:	add	sp, sp, #12
   3d2dc:	pop	{pc}		; (ldr pc, [sp], #4)
   3d2e0:	mov	r5, #1
   3d2e4:	mov	r0, #4
   3d2e8:	str	r5, [r4]
   3d2ec:	str	r5, [r4, #4]
   3d2f0:	bl	3b49c <__assert_fail@plt+0x28ea8>
   3d2f4:	mov	r3, r0
   3d2f8:	cmp	r0, #0
   3d2fc:	str	r0, [r4, #8]
   3d300:	streq	r3, [r4]
   3d304:	streq	r3, [r4, #4]
   3d308:	beq	3d2d0 <__assert_fail@plt+0x2acdc>
   3d30c:	mov	r0, r5
   3d310:	str	r6, [r3]
   3d314:	ldrd	r4, [sp]
   3d318:	ldr	r6, [sp, #8]
   3d31c:	add	sp, sp, #12
   3d320:	pop	{pc}		; (ldr pc, [sp], #4)
   3d324:	cmp	r3, r1
   3d328:	beq	3d3a8 <__assert_fail@plt+0x2adb4>
   3d32c:	ldr	r3, [r5]
   3d330:	mov	r2, r1
   3d334:	cmp	r3, r6
   3d338:	ble	3d370 <__assert_fail@plt+0x2ad7c>
   3d33c:	cmp	r1, #0
   3d340:	ble	3d358 <__assert_fail@plt+0x2ad64>
   3d344:	lsl	r2, r1, #2
   3d348:	add	r0, r5, #4
   3d34c:	mov	r1, r5
   3d350:	bl	11fb8 <memmove@plt>
   3d354:	mov	r2, #0
   3d358:	str	r6, [r5, r2, lsl #2]
   3d35c:	mov	r0, #1
   3d360:	ldr	r3, [r4, #4]
   3d364:	add	r3, r3, r0
   3d368:	str	r3, [r4, #4]
   3d36c:	b	3d2d0 <__assert_fail@plt+0x2acdc>
   3d370:	sub	r3, r1, #-1073741823	; 0xc0000001
   3d374:	ldr	r0, [r5, r3, lsl #2]
   3d378:	lsl	r3, r3, #2
   3d37c:	cmp	r6, r0
   3d380:	bge	3d358 <__assert_fail@plt+0x2ad64>
   3d384:	add	r3, r3, #4
   3d388:	add	r3, r5, r3
   3d38c:	str	r0, [r3], #-4
   3d390:	sub	r1, r1, #1
   3d394:	ldr	r0, [r3, #-4]
   3d398:	mov	r2, r1
   3d39c:	cmp	r0, r6
   3d3a0:	bgt	3d38c <__assert_fail@plt+0x2ad98>
   3d3a4:	b	3d358 <__assert_fail@plt+0x2ad64>
   3d3a8:	lsl	r3, r1, #1
   3d3ac:	mov	r0, r5
   3d3b0:	lsl	r1, r1, #3
   3d3b4:	str	r3, [r4]
   3d3b8:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3d3bc:	subs	r5, r0, #0
   3d3c0:	beq	3d3d0 <__assert_fail@plt+0x2addc>
   3d3c4:	str	r5, [r4, #8]
   3d3c8:	ldr	r1, [r4, #4]
   3d3cc:	b	3d32c <__assert_fail@plt+0x2ad38>
   3d3d0:	mov	r0, r5
   3d3d4:	b	3d2d0 <__assert_fail@plt+0x2acdc>
   3d3d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3d3dc:	subs	r4, r0, #0
   3d3e0:	strd	r6, [sp, #8]
   3d3e4:	str	r8, [sp, #16]
   3d3e8:	str	lr, [sp, #20]
   3d3ec:	ldr	r7, [sp, #28]
   3d3f0:	beq	3d49c <__assert_fail@plt+0x2aea8>
   3d3f4:	ldr	ip, [r4]
   3d3f8:	cmp	ip, #0
   3d3fc:	beq	3d49c <__assert_fail@plt+0x2aea8>
   3d400:	sub	ip, ip, #1
   3d404:	ldr	lr, [r4, #8]
   3d408:	mov	r0, r3
   3d40c:	add	r5, ip, ip, lsl #1
   3d410:	mov	r8, r1
   3d414:	lsl	r6, r2, #3
   3d418:	lsl	r5, r5, #3
   3d41c:	mov	r2, r6
   3d420:	ldr	r3, [lr, r5]
   3d424:	add	lr, lr, r5
   3d428:	ldr	r1, [lr, #8]
   3d42c:	str	ip, [r4]
   3d430:	str	r3, [r8]
   3d434:	bl	12024 <memcpy@plt>
   3d438:	ldr	r3, [r4, #8]
   3d43c:	mov	r2, r6
   3d440:	ldr	r0, [sp, #24]
   3d444:	add	r3, r3, r5
   3d448:	ldr	r1, [r3, #8]
   3d44c:	add	r1, r1, r6
   3d450:	bl	12024 <memcpy@plt>
   3d454:	ldr	r0, [r7, #8]
   3d458:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d45c:	ldr	r3, [r4, #8]
   3d460:	add	r3, r3, r5
   3d464:	ldr	r0, [r3, #8]
   3d468:	bl	38b10 <__assert_fail@plt+0x2651c>
   3d46c:	ldr	r3, [r4, #8]
   3d470:	add	r5, r3, r5
   3d474:	ldr	r0, [r5, #4]
   3d478:	ldrd	r2, [r5, #12]
   3d47c:	strd	r2, [r7]
   3d480:	ldr	r3, [r5, #20]
   3d484:	str	r3, [r7, #8]
   3d488:	ldrd	r4, [sp]
   3d48c:	ldrd	r6, [sp, #8]
   3d490:	ldr	r8, [sp, #16]
   3d494:	add	sp, sp, #20
   3d498:	pop	{pc}		; (ldr pc, [sp], #4)
   3d49c:	mvn	r0, #0
   3d4a0:	b	3d488 <__assert_fail@plt+0x2ae94>
   3d4a4:	ldr	ip, [r1, #4]
   3d4a8:	cmp	ip, #0
   3d4ac:	beq	3d644 <__assert_fail@plt+0x2b050>
   3d4b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3d4b4:	strd	r6, [sp, #8]
   3d4b8:	str	lr, [sp, #28]
   3d4bc:	ldr	lr, [r2, #4]
   3d4c0:	strd	r8, [sp, #16]
   3d4c4:	str	sl, [sp, #24]
   3d4c8:	cmp	lr, #0
   3d4cc:	beq	3d5cc <__assert_fail@plt+0x2afd8>
   3d4d0:	ldr	r4, [r0]
   3d4d4:	mov	r9, r2
   3d4d8:	add	r2, ip, lr
   3d4dc:	mov	r8, r1
   3d4e0:	mov	r7, r0
   3d4e4:	ldmib	r0, {r3, sl}
   3d4e8:	add	r1, r2, r3
   3d4ec:	cmp	r1, r4
   3d4f0:	bgt	3d654 <__assert_fail@plt+0x2b060>
   3d4f4:	ldr	r0, [r8, #8]
   3d4f8:	add	r1, r3, ip
   3d4fc:	sub	r5, ip, #1
   3d500:	sub	r6, lr, #1
   3d504:	add	r1, r1, lr
   3d508:	ldr	r2, [r9, #8]
   3d50c:	sub	r3, r3, #1
   3d510:	ldr	ip, [r0, r5, lsl #2]
   3d514:	ldr	lr, [r2, r6, lsl #2]
   3d518:	cmp	ip, lr
   3d51c:	beq	3d538 <__assert_fail@plt+0x2af44>
   3d520:	bge	3d5ec <__assert_fail@plt+0x2aff8>
   3d524:	subs	r6, r6, #1
   3d528:	bmi	3d588 <__assert_fail@plt+0x2af94>
   3d52c:	ldr	lr, [r2, r6, lsl #2]
   3d530:	cmp	ip, lr
   3d534:	bne	3d520 <__assert_fail@plt+0x2af2c>
   3d538:	cmp	r3, #0
   3d53c:	blt	3d568 <__assert_fail@plt+0x2af74>
   3d540:	ldr	r4, [sl, r3, lsl #2]
   3d544:	add	lr, sl, r3, lsl #2
   3d548:	cmp	r4, ip
   3d54c:	bgt	3d560 <__assert_fail@plt+0x2af6c>
   3d550:	b	3d5fc <__assert_fail@plt+0x2b008>
   3d554:	ldr	r4, [lr, #-4]!
   3d558:	cmp	r4, ip
   3d55c:	ble	3d5fc <__assert_fail@plt+0x2b008>
   3d560:	subs	r3, r3, #1
   3d564:	bcs	3d554 <__assert_fail@plt+0x2af60>
   3d568:	sub	r1, r1, #1
   3d56c:	str	ip, [sl, r1, lsl #2]
   3d570:	subs	r5, r5, #1
   3d574:	bmi	3d588 <__assert_fail@plt+0x2af94>
   3d578:	subs	r6, r6, #1
   3d57c:	bmi	3d588 <__assert_fail@plt+0x2af94>
   3d580:	ldr	ip, [r0, r5, lsl #2]
   3d584:	b	3d52c <__assert_fail@plt+0x2af38>
   3d588:	ldr	ip, [r7, #4]
   3d58c:	ldr	r0, [r8, #4]
   3d590:	ldr	r2, [r9, #4]
   3d594:	sub	r3, ip, #1
   3d598:	add	r0, ip, r0
   3d59c:	add	r0, r0, r2
   3d5a0:	sub	r2, r0, r1
   3d5a4:	sub	r0, r0, #1
   3d5a8:	add	ip, ip, r2
   3d5ac:	cmp	r3, #0
   3d5b0:	cmpge	r2, #0
   3d5b4:	str	ip, [r7, #4]
   3d5b8:	bgt	3d618 <__assert_fail@plt+0x2b024>
   3d5bc:	lsl	r2, r2, #2
   3d5c0:	add	r1, sl, r1, lsl #2
   3d5c4:	mov	r0, sl
   3d5c8:	bl	12024 <memcpy@plt>
   3d5cc:	mov	ip, #0
   3d5d0:	ldrd	r4, [sp]
   3d5d4:	mov	r0, ip
   3d5d8:	ldrd	r6, [sp, #8]
   3d5dc:	ldrd	r8, [sp, #16]
   3d5e0:	ldr	sl, [sp, #24]
   3d5e4:	add	sp, sp, #28
   3d5e8:	pop	{pc}		; (ldr pc, [sp], #4)
   3d5ec:	subs	r5, r5, #1
   3d5f0:	bmi	3d588 <__assert_fail@plt+0x2af94>
   3d5f4:	ldr	ip, [r0, r5, lsl #2]
   3d5f8:	b	3d518 <__assert_fail@plt+0x2af24>
   3d5fc:	cmp	r4, ip
   3d600:	bne	3d568 <__assert_fail@plt+0x2af74>
   3d604:	b	3d570 <__assert_fail@plt+0x2af7c>
   3d608:	sub	r3, r3, #1
   3d60c:	str	ip, [sl, r4, lsl #2]
   3d610:	cmn	r3, #1
   3d614:	beq	3d64c <__assert_fail@plt+0x2b058>
   3d618:	ldr	lr, [sl, r0, lsl #2]
   3d61c:	add	r4, r3, r2
   3d620:	ldr	ip, [sl, r3, lsl #2]
   3d624:	cmp	lr, ip
   3d628:	ble	3d608 <__assert_fail@plt+0x2b014>
   3d62c:	subs	r2, r2, #1
   3d630:	sub	r0, r0, #1
   3d634:	str	lr, [sl, r4, lsl #2]
   3d638:	bne	3d618 <__assert_fail@plt+0x2b024>
   3d63c:	ldr	sl, [r7, #8]
   3d640:	b	3d5c0 <__assert_fail@plt+0x2afcc>
   3d644:	mov	r0, ip
   3d648:	bx	lr
   3d64c:	ldr	sl, [r7, #8]
   3d650:	b	3d5bc <__assert_fail@plt+0x2afc8>
   3d654:	add	r4, r2, r4
   3d658:	mov	r0, sl
   3d65c:	lsl	r1, r4, #2
   3d660:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3d664:	subs	sl, r0, #0
   3d668:	beq	3d684 <__assert_fail@plt+0x2b090>
   3d66c:	ldr	ip, [r8, #4]
   3d670:	ldr	lr, [r9, #4]
   3d674:	str	r4, [r7]
   3d678:	str	sl, [r7, #8]
   3d67c:	ldr	r3, [r7, #4]
   3d680:	b	3d4f4 <__assert_fail@plt+0x2af00>
   3d684:	mov	ip, #12
   3d688:	b	3d5d0 <__assert_fail@plt+0x2afdc>
   3d68c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3d690:	strd	r6, [sp, #8]
   3d694:	subs	r6, r1, #0
   3d698:	str	r8, [sp, #16]
   3d69c:	str	lr, [sp, #20]
   3d6a0:	beq	3d7b0 <__assert_fail@plt+0x2b1bc>
   3d6a4:	ldr	r2, [r6, #4]
   3d6a8:	cmp	r2, #0
   3d6ac:	mov	ip, r2
   3d6b0:	beq	3d7b0 <__assert_fail@plt+0x2b1bc>
   3d6b4:	ldm	r0, {r1, r3}
   3d6b8:	mov	r5, r0
   3d6bc:	add	r4, r3, r2, lsl #1
   3d6c0:	cmp	r1, r4
   3d6c4:	blt	3d7ec <__assert_fail@plt+0x2b1f8>
   3d6c8:	cmp	r3, #0
   3d6cc:	beq	3d82c <__assert_fail@plt+0x2b238>
   3d6d0:	sub	r2, r2, #1
   3d6d4:	sub	r3, r3, #1
   3d6d8:	mvn	lr, r3
   3d6dc:	mvn	ip, r2
   3d6e0:	tst	lr, ip
   3d6e4:	bpl	3d740 <__assert_fail@plt+0x2b14c>
   3d6e8:	ldr	r7, [r5, #8]
   3d6ec:	ldr	r8, [r6, #8]
   3d6f0:	b	3d718 <__assert_fail@plt+0x2b124>
   3d6f4:	subge	r3, r3, #1
   3d6f8:	mvnge	lr, r3
   3d6fc:	bge	3d710 <__assert_fail@plt+0x2b11c>
   3d700:	sub	r2, r2, #1
   3d704:	sub	r4, r4, #1
   3d708:	mvn	ip, r2
   3d70c:	str	r1, [r7, r4, lsl #2]
   3d710:	tst	ip, lr
   3d714:	bpl	3d740 <__assert_fail@plt+0x2b14c>
   3d718:	ldr	r0, [r7, r3, lsl #2]
   3d71c:	ldr	r1, [r8, r2, lsl #2]
   3d720:	cmp	r0, r1
   3d724:	bne	3d6f4 <__assert_fail@plt+0x2b100>
   3d728:	sub	r2, r2, #1
   3d72c:	sub	r3, r3, #1
   3d730:	mvn	lr, r3
   3d734:	mvn	ip, r2
   3d738:	tst	ip, lr
   3d73c:	bmi	3d718 <__assert_fail@plt+0x2b124>
   3d740:	cmp	r2, #0
   3d744:	blt	3d764 <__assert_fail@plt+0x2b170>
   3d748:	ldr	r0, [r5, #8]
   3d74c:	add	r2, r2, #1
   3d750:	sub	r4, r4, r2
   3d754:	lsl	r2, r2, #2
   3d758:	ldr	r1, [r6, #8]
   3d75c:	add	r0, r0, r4, lsl #2
   3d760:	bl	12024 <memcpy@plt>
   3d764:	ldr	r3, [r5, #4]
   3d768:	ldr	r0, [r6, #4]
   3d76c:	add	r0, r3, r0, lsl #1
   3d770:	subs	r2, r0, r4
   3d774:	sub	r0, r0, #1
   3d778:	beq	3d7b0 <__assert_fail@plt+0x2b1bc>
   3d77c:	ldr	r1, [r5, #8]
   3d780:	add	ip, r3, r2
   3d784:	sub	r3, r3, #1
   3d788:	str	ip, [r5, #4]
   3d78c:	ldr	lr, [r1, r0, lsl #2]
   3d790:	add	r5, r3, r2
   3d794:	ldr	ip, [r1, r3, lsl #2]
   3d798:	cmp	lr, ip
   3d79c:	ble	3d7c8 <__assert_fail@plt+0x2b1d4>
   3d7a0:	subs	r2, r2, #1
   3d7a4:	sub	r0, r0, #1
   3d7a8:	str	lr, [r1, r5, lsl #2]
   3d7ac:	bne	3d78c <__assert_fail@plt+0x2b198>
   3d7b0:	mov	r0, #0
   3d7b4:	ldrd	r4, [sp]
   3d7b8:	ldrd	r6, [sp, #8]
   3d7bc:	ldr	r8, [sp, #16]
   3d7c0:	add	sp, sp, #20
   3d7c4:	pop	{pc}		; (ldr pc, [sp], #4)
   3d7c8:	subs	r3, r3, #1
   3d7cc:	str	ip, [r1, r5, lsl #2]
   3d7d0:	bpl	3d78c <__assert_fail@plt+0x2b198>
   3d7d4:	mov	r0, r1
   3d7d8:	lsl	r2, r2, #2
   3d7dc:	add	r1, r1, r4, lsl #2
   3d7e0:	bl	12024 <memcpy@plt>
   3d7e4:	mov	r0, #0
   3d7e8:	b	3d7b4 <__assert_fail@plt+0x2b1c0>
   3d7ec:	add	r2, r2, r1
   3d7f0:	ldr	r0, [r0, #8]
   3d7f4:	lsl	r1, r2, #3
   3d7f8:	lsl	r4, r2, #1
   3d7fc:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3d800:	cmp	r0, #0
   3d804:	beq	3d848 <__assert_fail@plt+0x2b254>
   3d808:	ldr	r3, [r5, #4]
   3d80c:	str	r4, [r5]
   3d810:	str	r0, [r5, #8]
   3d814:	cmp	r3, #0
   3d818:	ldreq	ip, [r6, #4]
   3d81c:	beq	3d830 <__assert_fail@plt+0x2b23c>
   3d820:	ldr	r2, [r6, #4]
   3d824:	add	r4, r3, r2, lsl #1
   3d828:	b	3d6d0 <__assert_fail@plt+0x2b0dc>
   3d82c:	ldr	r0, [r0, #8]
   3d830:	ldr	r1, [r6, #8]
   3d834:	str	ip, [r5, #4]
   3d838:	ldr	r2, [r6, #4]
   3d83c:	lsl	r2, r2, #2
   3d840:	bl	12024 <memcpy@plt>
   3d844:	b	3d7b0 <__assert_fail@plt+0x2b1bc>
   3d848:	mov	r0, #12
   3d84c:	b	3d7b4 <__assert_fail@plt+0x2b1c0>
   3d850:	cmp	r1, #0
   3d854:	strd	r4, [sp, #-16]!
   3d858:	mov	r5, r0
   3d85c:	str	r6, [sp, #8]
   3d860:	str	lr, [sp, #12]
   3d864:	blt	3d918 <__assert_fail@plt+0x2b324>
   3d868:	ldr	r3, [r0, #48]	; 0x30
   3d86c:	cmp	r3, r1
   3d870:	beq	3d92c <__assert_fail@plt+0x2b338>
   3d874:	ldr	r3, [r0, #80]	; 0x50
   3d878:	cmp	r3, #1
   3d87c:	ble	3d8cc <__assert_fail@plt+0x2b2d8>
   3d880:	ldr	r3, [r0, #8]
   3d884:	add	r3, r3, r1, lsl #2
   3d888:	b	3d894 <__assert_fail@plt+0x2b2a0>
   3d88c:	cmn	r1, #1
   3d890:	beq	3d918 <__assert_fail@plt+0x2b324>
   3d894:	ldr	r4, [r3], #-4
   3d898:	sub	r1, r1, #1
   3d89c:	cmn	r4, #1
   3d8a0:	beq	3d88c <__assert_fail@plt+0x2b298>
   3d8a4:	ldrb	r3, [r5, #78]	; 0x4e
   3d8a8:	cmp	r3, #0
   3d8ac:	bne	3d93c <__assert_fail@plt+0x2b348>
   3d8b0:	cmp	r4, #10
   3d8b4:	movne	r0, #0
   3d8b8:	beq	3d8f8 <__assert_fail@plt+0x2b304>
   3d8bc:	ldrd	r4, [sp]
   3d8c0:	ldr	r6, [sp, #8]
   3d8c4:	add	sp, sp, #12
   3d8c8:	pop	{pc}		; (ldr pc, [sp], #4)
   3d8cc:	ldr	r3, [r0, #4]
   3d8d0:	ldr	r0, [r0, #68]	; 0x44
   3d8d4:	ldrb	r3, [r3, r1]
   3d8d8:	asr	r1, r3, #5
   3d8dc:	and	r2, r3, #31
   3d8e0:	ldr	r0, [r0, r1, lsl #2]
   3d8e4:	lsr	r0, r0, r2
   3d8e8:	ands	r0, r0, #1
   3d8ec:	bne	3d8bc <__assert_fail@plt+0x2b2c8>
   3d8f0:	cmp	r3, #10
   3d8f4:	bne	3d8bc <__assert_fail@plt+0x2b2c8>
   3d8f8:	ldrb	r3, [r5, #77]	; 0x4d
   3d8fc:	ldrd	r4, [sp]
   3d900:	ldr	r6, [sp, #8]
   3d904:	add	sp, sp, #12
   3d908:	cmp	r3, #0
   3d90c:	moveq	r0, #0
   3d910:	movne	r0, #2
   3d914:	pop	{pc}		; (ldr pc, [sp], #4)
   3d918:	ldr	r6, [sp, #8]
   3d91c:	ldr	r0, [r5, #60]	; 0x3c
   3d920:	ldrd	r4, [sp]
   3d924:	add	sp, sp, #12
   3d928:	pop	{pc}		; (ldr pc, [sp], #4)
   3d92c:	tst	r2, #2
   3d930:	movne	r0, #8
   3d934:	moveq	r0, #10
   3d938:	b	3d8bc <__assert_fail@plt+0x2b2c8>
   3d93c:	mov	r0, r4
   3d940:	bl	12354 <iswalnum@plt>
   3d944:	sub	r3, r4, #95	; 0x5f
   3d948:	cmp	r0, #0
   3d94c:	clz	r3, r3
   3d950:	lsr	r3, r3, #5
   3d954:	movne	r3, #1
   3d958:	cmp	r3, #0
   3d95c:	movne	r0, #1
   3d960:	bne	3d8bc <__assert_fail@plt+0x2b2c8>
   3d964:	b	3d8b0 <__assert_fail@plt+0x2b2bc>
   3d968:	ldrb	ip, [r1, #4]
   3d96c:	str	r4, [sp, #-8]!
   3d970:	ldr	r3, [r0, #4]
   3d974:	str	lr, [sp, #4]
   3d978:	sub	ip, ip, #1
   3d97c:	ldrb	r3, [r3, r2]
   3d980:	cmp	ip, #6
   3d984:	ldrls	pc, [pc, ip, lsl #2]
   3d988:	b	3d9b4 <__assert_fail@plt+0x2b3c0>
   3d98c:	andeq	sp, r3, r8, lsr #19
   3d990:			; <UNDEFINED> instruction: 0x0003d9b4
   3d994:	andeq	sp, r3, r8, asr sl
   3d998:			; <UNDEFINED> instruction: 0x0003d9b4
   3d99c:	andeq	sp, r3, ip, asr #19
   3d9a0:			; <UNDEFINED> instruction: 0x0003d9b4
   3d9a4:	andeq	sp, r3, r4, asr #19
   3d9a8:	ldrb	ip, [r1]
   3d9ac:	cmp	ip, r3
   3d9b0:	beq	3d9ec <__assert_fail@plt+0x2b3f8>
   3d9b4:	mov	r0, #0
   3d9b8:	ldr	r4, [sp]
   3d9bc:	add	sp, sp, #4
   3d9c0:	pop	{pc}		; (ldr pc, [sp], #4)
   3d9c4:	tst	r3, #128	; 0x80
   3d9c8:	bne	3d9b4 <__assert_fail@plt+0x2b3c0>
   3d9cc:	cmp	r3, #10
   3d9d0:	beq	3da8c <__assert_fail@plt+0x2b498>
   3d9d4:	cmp	r3, #0
   3d9d8:	bne	3d9ec <__assert_fail@plt+0x2b3f8>
   3d9dc:	ldr	ip, [r0, #84]	; 0x54
   3d9e0:	ldr	ip, [ip, #128]	; 0x80
   3d9e4:	tst	ip, #128	; 0x80
   3d9e8:	bne	3d9b4 <__assert_fail@plt+0x2b3c0>
   3d9ec:	ldr	r4, [r1, #4]
   3d9f0:	mov	r3, #65280	; 0xff00
   3d9f4:	movt	r3, #3
   3d9f8:	and	r3, r3, r4
   3d9fc:	cmp	r3, #0
   3da00:	beq	3da48 <__assert_fail@plt+0x2b454>
   3da04:	mov	r1, r2
   3da08:	ldr	r2, [r0, #88]	; 0x58
   3da0c:	bl	3d850 <__assert_fail@plt+0x2b25c>
   3da10:	ubfx	r1, r4, #8, #10
   3da14:	ands	r2, r1, #4
   3da18:	bne	3da78 <__assert_fail@plt+0x2b484>
   3da1c:	tst	r1, #8
   3da20:	beq	3da2c <__assert_fail@plt+0x2b438>
   3da24:	tst	r0, #1
   3da28:	bne	3d9b4 <__assert_fail@plt+0x2b3c0>
   3da2c:	tst	r1, #32
   3da30:	beq	3da3c <__assert_fail@plt+0x2b448>
   3da34:	ands	r3, r0, #2
   3da38:	beq	3d9b4 <__assert_fail@plt+0x2b3c0>
   3da3c:	tst	r1, #128	; 0x80
   3da40:	ubfxne	r0, r0, #3, #1
   3da44:	bne	3d9b8 <__assert_fail@plt+0x2b3c4>
   3da48:	ldr	r4, [sp]
   3da4c:	add	sp, sp, #4
   3da50:	mov	r0, #1
   3da54:	pop	{pc}		; (ldr pc, [sp], #4)
   3da58:	ldr	ip, [r1]
   3da5c:	asr	lr, r3, #5
   3da60:	and	r3, r3, #31
   3da64:	ldr	ip, [ip, lr, lsl #2]
   3da68:	lsr	r3, ip, r3
   3da6c:	ands	r3, r3, #1
   3da70:	bne	3d9ec <__assert_fail@plt+0x2b3f8>
   3da74:	b	3d9b4 <__assert_fail@plt+0x2b3c0>
   3da78:	ands	r3, r0, #1
   3da7c:	beq	3d9b4 <__assert_fail@plt+0x2b3c0>
   3da80:	tst	r1, #8
   3da84:	beq	3da2c <__assert_fail@plt+0x2b438>
   3da88:	b	3d9b4 <__assert_fail@plt+0x2b3c0>
   3da8c:	ldr	r3, [r0, #84]	; 0x54
   3da90:	ldr	r3, [r3, #128]	; 0x80
   3da94:	ands	r3, r3, #64	; 0x40
   3da98:	bne	3d9ec <__assert_fail@plt+0x2b3f8>
   3da9c:	b	3d9b4 <__assert_fail@plt+0x2b3c0>
   3daa0:	strd	r4, [sp, #-16]!
   3daa4:	mov	r4, r1
   3daa8:	mov	r1, r2
   3daac:	ldr	r2, [r0, #88]	; 0x58
   3dab0:	mov	r5, r0
   3dab4:	str	r6, [sp, #8]
   3dab8:	str	lr, [sp, #12]
   3dabc:	bl	3d850 <__assert_fail@plt+0x2b25c>
   3dac0:	ldr	r1, [r4, #8]
   3dac4:	cmp	r1, #0
   3dac8:	ble	3db34 <__assert_fail@plt+0x2b540>
   3dacc:	ldr	ip, [r5, #84]	; 0x54
   3dad0:	ands	r3, r0, #1
   3dad4:	and	r2, r0, #2
   3dad8:	and	r0, r0, #8
   3dadc:	ldr	lr, [r4, #12]
   3dae0:	ldr	ip, [ip]
   3dae4:	beq	3db48 <__assert_fail@plt+0x2b554>
   3dae8:	cmp	r2, #0
   3daec:	beq	3dc78 <__assert_fail@plt+0x2b684>
   3daf0:	cmp	r0, #0
   3daf4:	beq	3dd08 <__assert_fail@plt+0x2b714>
   3daf8:	mov	r2, #0
   3dafc:	ldr	r0, [lr, r2, lsl #2]
   3db00:	add	r2, r2, #1
   3db04:	add	r3, ip, r0, lsl #3
   3db08:	ldrb	r4, [r3, #4]
   3db0c:	ldr	r3, [r3, #4]
   3db10:	cmp	r4, #2
   3db14:	ubfx	r3, r3, #8, #10
   3db18:	bne	3db2c <__assert_fail@plt+0x2b538>
   3db1c:	cmp	r3, #0
   3db20:	beq	3db8c <__assert_fail@plt+0x2b598>
   3db24:	tst	r3, #8
   3db28:	beq	3db8c <__assert_fail@plt+0x2b598>
   3db2c:	cmp	r1, r2
   3db30:	bne	3dafc <__assert_fail@plt+0x2b508>
   3db34:	ldrd	r4, [sp]
   3db38:	mov	r0, #0
   3db3c:	ldr	r6, [sp, #8]
   3db40:	add	sp, sp, #12
   3db44:	pop	{pc}		; (ldr pc, [sp], #4)
   3db48:	cmp	r2, #0
   3db4c:	beq	3dbe8 <__assert_fail@plt+0x2b5f4>
   3db50:	cmp	r0, #0
   3db54:	sub	lr, lr, #4
   3db58:	beq	3dba8 <__assert_fail@plt+0x2b5b4>
   3db5c:	ldr	r0, [lr, #4]!
   3db60:	add	r3, r3, #1
   3db64:	add	r2, ip, r0, lsl #3
   3db68:	ldrb	r4, [r2, #4]
   3db6c:	ldr	r2, [r2, #4]
   3db70:	cmp	r4, #2
   3db74:	ubfx	r2, r2, #8, #10
   3db78:	bne	3db9c <__assert_fail@plt+0x2b5a8>
   3db7c:	cmp	r2, #0
   3db80:	beq	3db8c <__assert_fail@plt+0x2b598>
   3db84:	tst	r2, #4
   3db88:	bne	3db9c <__assert_fail@plt+0x2b5a8>
   3db8c:	ldrd	r4, [sp]
   3db90:	ldr	r6, [sp, #8]
   3db94:	add	sp, sp, #12
   3db98:	pop	{pc}		; (ldr pc, [sp], #4)
   3db9c:	cmp	r1, r3
   3dba0:	bne	3db5c <__assert_fail@plt+0x2b568>
   3dba4:	b	3db34 <__assert_fail@plt+0x2b540>
   3dba8:	mov	r3, r0
   3dbac:	ldr	r0, [lr, #4]!
   3dbb0:	add	r3, r3, #1
   3dbb4:	add	r2, ip, r0, lsl #3
   3dbb8:	ldrb	r4, [r2, #4]
   3dbbc:	ldr	r2, [r2, #4]
   3dbc0:	cmp	r4, #2
   3dbc4:	ubfx	r2, r2, #8, #10
   3dbc8:	bne	3dbdc <__assert_fail@plt+0x2b5e8>
   3dbcc:	cmp	r2, #0
   3dbd0:	beq	3db8c <__assert_fail@plt+0x2b598>
   3dbd4:	tst	r2, #132	; 0x84
   3dbd8:	beq	3db8c <__assert_fail@plt+0x2b598>
   3dbdc:	cmp	r1, r3
   3dbe0:	bne	3dbac <__assert_fail@plt+0x2b5b8>
   3dbe4:	b	3db34 <__assert_fail@plt+0x2b540>
   3dbe8:	cmp	r0, #0
   3dbec:	beq	3dc34 <__assert_fail@plt+0x2b640>
   3dbf0:	sub	lr, lr, #4
   3dbf4:	mov	r3, r2
   3dbf8:	ldr	r0, [lr, #4]!
   3dbfc:	add	r3, r3, #1
   3dc00:	add	r2, ip, r0, lsl #3
   3dc04:	ldrb	r4, [r2, #4]
   3dc08:	ldr	r2, [r2, #4]
   3dc0c:	cmp	r4, #2
   3dc10:	ubfx	r2, r2, #8, #10
   3dc14:	bne	3dc28 <__assert_fail@plt+0x2b634>
   3dc18:	cmp	r2, #0
   3dc1c:	beq	3db8c <__assert_fail@plt+0x2b598>
   3dc20:	tst	r2, #36	; 0x24
   3dc24:	beq	3db8c <__assert_fail@plt+0x2b598>
   3dc28:	cmp	r1, r3
   3dc2c:	bne	3dbf8 <__assert_fail@plt+0x2b604>
   3dc30:	b	3db34 <__assert_fail@plt+0x2b540>
   3dc34:	sub	r2, lr, #4
   3dc38:	mov	r3, r0
   3dc3c:	ldr	r0, [r2, #4]!
   3dc40:	add	r3, r3, #1
   3dc44:	add	lr, ip, r0, lsl #3
   3dc48:	ldrb	r4, [lr, #4]
   3dc4c:	ldr	lr, [lr, #4]
   3dc50:	cmp	r4, #2
   3dc54:	ubfx	lr, lr, #8, #10
   3dc58:	bne	3dc6c <__assert_fail@plt+0x2b678>
   3dc5c:	cmp	lr, #0
   3dc60:	beq	3db8c <__assert_fail@plt+0x2b598>
   3dc64:	tst	lr, #164	; 0xa4
   3dc68:	beq	3db8c <__assert_fail@plt+0x2b598>
   3dc6c:	cmp	r1, r3
   3dc70:	bne	3dc3c <__assert_fail@plt+0x2b648>
   3dc74:	b	3db34 <__assert_fail@plt+0x2b540>
   3dc78:	cmp	r0, #0
   3dc7c:	beq	3dcc0 <__assert_fail@plt+0x2b6cc>
   3dc80:	mov	r3, r2
   3dc84:	ldr	r0, [lr, r3, lsl #2]
   3dc88:	add	r2, ip, r0, lsl #3
   3dc8c:	ldrb	r4, [r2, #4]
   3dc90:	ldr	r2, [r2, #4]
   3dc94:	cmp	r4, #2
   3dc98:	ubfx	r2, r2, #8, #10
   3dc9c:	bne	3dcb0 <__assert_fail@plt+0x2b6bc>
   3dca0:	cmp	r2, #0
   3dca4:	beq	3db8c <__assert_fail@plt+0x2b598>
   3dca8:	tst	r2, #8
   3dcac:	beq	3dd48 <__assert_fail@plt+0x2b754>
   3dcb0:	add	r3, r3, #1
   3dcb4:	cmp	r1, r3
   3dcb8:	bne	3dc84 <__assert_fail@plt+0x2b690>
   3dcbc:	b	3db34 <__assert_fail@plt+0x2b540>
   3dcc0:	mov	r3, r0
   3dcc4:	ldr	r0, [lr, r3, lsl #2]
   3dcc8:	add	r2, ip, r0, lsl #3
   3dccc:	ldrb	r4, [r2, #4]
   3dcd0:	ldr	r2, [r2, #4]
   3dcd4:	cmp	r4, #2
   3dcd8:	ubfx	r2, r2, #8, #10
   3dcdc:	bne	3dcf8 <__assert_fail@plt+0x2b704>
   3dce0:	cmp	r2, #0
   3dce4:	beq	3db8c <__assert_fail@plt+0x2b598>
   3dce8:	tst	r2, #8
   3dcec:	bne	3dcf8 <__assert_fail@plt+0x2b704>
   3dcf0:	tst	r2, #160	; 0xa0
   3dcf4:	beq	3db8c <__assert_fail@plt+0x2b598>
   3dcf8:	add	r3, r3, #1
   3dcfc:	cmp	r3, r1
   3dd00:	bne	3dcc4 <__assert_fail@plt+0x2b6d0>
   3dd04:	b	3db34 <__assert_fail@plt+0x2b540>
   3dd08:	mov	r3, r0
   3dd0c:	ldr	r0, [lr, r3, lsl #2]
   3dd10:	add	r2, ip, r0, lsl #3
   3dd14:	ldrb	r4, [r2, #4]
   3dd18:	ldr	r2, [r2, #4]
   3dd1c:	cmp	r4, #2
   3dd20:	ubfx	r2, r2, #8, #10
   3dd24:	bne	3dd38 <__assert_fail@plt+0x2b744>
   3dd28:	cmp	r2, #0
   3dd2c:	beq	3db8c <__assert_fail@plt+0x2b598>
   3dd30:	tst	r2, #8
   3dd34:	beq	3dd54 <__assert_fail@plt+0x2b760>
   3dd38:	add	r3, r3, #1
   3dd3c:	cmp	r1, r3
   3dd40:	bne	3dd0c <__assert_fail@plt+0x2b718>
   3dd44:	b	3db34 <__assert_fail@plt+0x2b540>
   3dd48:	tst	r2, #32
   3dd4c:	beq	3db8c <__assert_fail@plt+0x2b598>
   3dd50:	b	3dcb0 <__assert_fail@plt+0x2b6bc>
   3dd54:	tst	r2, #128	; 0x80
   3dd58:	beq	3db8c <__assert_fail@plt+0x2b598>
   3dd5c:	b	3dd38 <__assert_fail@plt+0x2b744>
   3dd60:	ldr	r3, [r0, #24]
   3dd64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3dd68:	mov	r4, r0
   3dd6c:	strd	r6, [sp, #8]
   3dd70:	mov	r7, r1
   3dd74:	strd	r8, [sp, #16]
   3dd78:	mov	r8, r2
   3dd7c:	strd	sl, [sp, #24]
   3dd80:	cmp	r3, r1
   3dd84:	str	lr, [sp, #32]
   3dd88:	sub	sp, sp, #36	; 0x24
   3dd8c:	suble	r5, r1, r3
   3dd90:	ble	3ddf4 <__assert_fail@plt+0x2b800>
   3dd94:	ldr	r3, [r0, #80]	; 0x50
   3dd98:	cmp	r3, #1
   3dd9c:	ble	3ddac <__assert_fail@plt+0x2b7b8>
   3dda0:	mov	r2, #0
   3dda4:	mov	r3, #0
   3dda8:	strd	r2, [r0, #16]
   3ddac:	ldrb	r3, [r4, #75]	; 0x4b
   3ddb0:	tst	r8, #1
   3ddb4:	mov	r9, #0
   3ddb8:	movne	r1, #4
   3ddbc:	moveq	r1, #6
   3ddc0:	ldr	r0, [r4, #44]	; 0x2c
   3ddc4:	str	r9, [r4, #24]
   3ddc8:	ldr	r2, [r4, #52]	; 0x34
   3ddcc:	cmp	r3, r9
   3ddd0:	str	r9, [r4, #28]
   3ddd4:	movne	r3, r9
   3ddd8:	movne	r5, r7
   3dddc:	str	r9, [r4, #32]
   3dde0:	str	r0, [r4, #48]	; 0x30
   3dde4:	str	r2, [r4, #56]	; 0x38
   3dde8:	str	r1, [r4, #60]	; 0x3c
   3ddec:	strb	r9, [r4, #76]	; 0x4c
   3ddf0:	beq	3ded0 <__assert_fail@plt+0x2b8dc>
   3ddf4:	cmp	r5, #0
   3ddf8:	beq	3dee4 <__assert_fail@plt+0x2b8f0>
   3ddfc:	ldrb	r2, [r4, #76]	; 0x4c
   3de00:	ldr	r1, [r4, #32]
   3de04:	ldr	r6, [r4, #28]
   3de08:	cmp	r1, r5
   3de0c:	ble	3dfb8 <__assert_fail@plt+0x2b9c4>
   3de10:	cmp	r2, #0
   3de14:	bne	3e11c <__assert_fail@plt+0x2bb28>
   3de18:	mov	r2, r8
   3de1c:	sub	r1, r5, #1
   3de20:	mov	r0, r4
   3de24:	bl	3d850 <__assert_fail@plt+0x2b25c>
   3de28:	ldr	r3, [r4, #80]	; 0x50
   3de2c:	sub	r2, r6, r5
   3de30:	str	r0, [r4, #60]	; 0x3c
   3de34:	cmp	r3, #1
   3de38:	bgt	3def4 <__assert_fail@plt+0x2b900>
   3de3c:	ldrb	r3, [r4, #75]	; 0x4b
   3de40:	cmp	r3, #0
   3de44:	bne	3e15c <__assert_fail@plt+0x2bb68>
   3de48:	ldr	ip, [r4, #32]
   3de4c:	str	r2, [r4, #28]
   3de50:	ldr	r1, [r4, #48]	; 0x30
   3de54:	ldr	r0, [r4, #56]	; 0x38
   3de58:	sub	ip, ip, r5
   3de5c:	ldr	r2, [r4, #80]	; 0x50
   3de60:	sub	r1, r1, r5
   3de64:	str	ip, [r4, #32]
   3de68:	sub	r0, r0, r5
   3de6c:	cmp	r3, #0
   3de70:	bne	3de80 <__assert_fail@plt+0x2b88c>
   3de74:	ldr	r3, [r4, #4]
   3de78:	add	r5, r3, r5
   3de7c:	str	r5, [r4, #4]
   3de80:	cmp	r2, #1
   3de84:	str	r7, [r4, #24]
   3de88:	str	r1, [r4, #48]	; 0x30
   3de8c:	str	r0, [r4, #56]	; 0x38
   3de90:	ble	3df20 <__assert_fail@plt+0x2b92c>
   3de94:	ldrb	r3, [r4, #72]	; 0x48
   3de98:	mov	r0, r4
   3de9c:	cmp	r3, #0
   3dea0:	bne	3df10 <__assert_fail@plt+0x2b91c>
   3dea4:	bl	3c784 <__assert_fail@plt+0x2a190>
   3dea8:	mov	r3, #0
   3deac:	mov	r0, r3
   3deb0:	str	r3, [r4, #40]	; 0x28
   3deb4:	add	sp, sp, #36	; 0x24
   3deb8:	ldrd	r4, [sp]
   3debc:	ldrd	r6, [sp, #8]
   3dec0:	ldrd	r8, [sp, #16]
   3dec4:	ldrd	sl, [sp, #24]
   3dec8:	add	sp, sp, #32
   3decc:	pop	{pc}		; (ldr pc, [sp], #4)
   3ded0:	ldr	r2, [r4]
   3ded4:	mov	r5, r7
   3ded8:	cmp	r5, #0
   3dedc:	str	r2, [r4, #4]
   3dee0:	bne	3ddfc <__assert_fail@plt+0x2b808>
   3dee4:	ldr	r1, [r4, #48]	; 0x30
   3dee8:	ldr	r0, [r4, #56]	; 0x38
   3deec:	ldr	r2, [r4, #80]	; 0x50
   3def0:	b	3de80 <__assert_fail@plt+0x2b88c>
   3def4:	ldr	r0, [r4, #8]
   3def8:	lsl	r2, r2, #2
   3defc:	add	r1, r0, r5, lsl #2
   3df00:	bl	11fb8 <memmove@plt>
   3df04:	ldr	r2, [r4, #28]
   3df08:	sub	r2, r2, r5
   3df0c:	b	3de3c <__assert_fail@plt+0x2b848>
   3df10:	bl	3c960 <__assert_fail@plt+0x2a36c>
   3df14:	cmp	r0, #0
   3df18:	beq	3dea8 <__assert_fail@plt+0x2b8b4>
   3df1c:	b	3deb4 <__assert_fail@plt+0x2b8c0>
   3df20:	ldrb	r3, [r4, #75]	; 0x4b
   3df24:	cmp	r3, #0
   3df28:	streq	r1, [r4, #28]
   3df2c:	beq	3dea8 <__assert_fail@plt+0x2b8b4>
   3df30:	ldrb	r3, [r4, #72]	; 0x48
   3df34:	cmp	r3, #0
   3df38:	bne	3e41c <__assert_fail@plt+0x2be28>
   3df3c:	ldr	r0, [r4, #64]	; 0x40
   3df40:	cmp	r0, #0
   3df44:	beq	3dea8 <__assert_fail@plt+0x2b8b4>
   3df48:	ldr	r2, [r4, #28]
   3df4c:	ldr	r3, [r4, #36]	; 0x24
   3df50:	cmp	r1, r3
   3df54:	movge	r1, r3
   3df58:	cmp	r1, r2
   3df5c:	ble	3e5f4 <__assert_fail@plt+0x2c000>
   3df60:	ldm	r4, {ip, lr}
   3df64:	add	r3, r2, #1
   3df68:	cmp	r1, r3
   3df6c:	add	ip, ip, r2
   3df70:	ldrb	ip, [ip, r7]
   3df74:	ldrb	r0, [r0, ip]
   3df78:	strb	r0, [lr, r2]
   3df7c:	ble	3dfac <__assert_fail@plt+0x2b9b8>
   3df80:	ldr	r2, [r4]
   3df84:	ldr	r0, [r4, #24]
   3df88:	ldr	ip, [r4, #64]	; 0x40
   3df8c:	add	r2, r2, r3
   3df90:	ldrb	r0, [r2, r0]
   3df94:	ldr	r2, [r4, #4]
   3df98:	ldrb	r0, [ip, r0]
   3df9c:	strb	r0, [r2, r3]
   3dfa0:	add	r3, r3, #1
   3dfa4:	cmp	r1, r3
   3dfa8:	bne	3df80 <__assert_fail@plt+0x2b98c>
   3dfac:	str	r1, [r4, #28]
   3dfb0:	str	r1, [r4, #32]
   3dfb4:	b	3dea8 <__assert_fail@plt+0x2b8b4>
   3dfb8:	cmp	r2, #0
   3dfbc:	bne	3e524 <__assert_fail@plt+0x2bf30>
   3dfc0:	ldr	r2, [r4, #80]	; 0x50
   3dfc4:	mov	r0, #0
   3dfc8:	str	r0, [r4, #28]
   3dfcc:	cmp	r2, #1
   3dfd0:	ble	3e2dc <__assert_fail@plt+0x2bce8>
   3dfd4:	ldrb	r0, [r4, #73]	; 0x49
   3dfd8:	cmp	r0, #0
   3dfdc:	beq	3e050 <__assert_fail@plt+0x2ba5c>
   3dfe0:	ldr	ip, [r4]
   3dfe4:	sub	r2, r5, r2
   3dfe8:	sub	r0, r5, #1
   3dfec:	add	lr, ip, r3
   3dff0:	add	r2, lr, r2
   3dff4:	add	r9, lr, r0
   3dff8:	cmp	ip, r2
   3dffc:	str	lr, [sp]
   3e000:	movcc	ip, r2
   3e004:	cmp	ip, r9
   3e008:	bhi	3e050 <__assert_fail@plt+0x2ba5c>
   3e00c:	ldrb	r2, [lr, r0]
   3e010:	and	r2, r2, #192	; 0xc0
   3e014:	cmp	r2, #128	; 0x80
   3e018:	movne	r1, lr
   3e01c:	bne	3e4a4 <__assert_fail@plt+0x2beb0>
   3e020:	mov	sl, lr
   3e024:	sub	r2, r9, #1
   3e028:	sub	ip, ip, #1
   3e02c:	b	3e044 <__assert_fail@plt+0x2ba50>
   3e030:	ldrb	r0, [r9]
   3e034:	sub	r2, r2, #1
   3e038:	and	r0, r0, #192	; 0xc0
   3e03c:	cmp	r0, #128	; 0x80
   3e040:	bne	3e49c <__assert_fail@plt+0x2bea8>
   3e044:	cmp	ip, r2
   3e048:	mov	r9, r2
   3e04c:	bne	3e030 <__assert_fail@plt+0x2ba3c>
   3e050:	add	r9, r3, r1
   3e054:	cmp	r7, r9
   3e058:	ble	3e35c <__assert_fail@plt+0x2bd68>
   3e05c:	add	fp, r4, #16
   3e060:	str	r7, [sp]
   3e064:	str	r6, [sp, #4]
   3e068:	ldr	r1, [r4]
   3e06c:	mov	r3, fp
   3e070:	add	r0, sp, #16
   3e074:	ldr	sl, [r4, #44]	; 0x2c
   3e078:	ldrd	r6, [fp]
   3e07c:	add	r1, r1, r9
   3e080:	sub	sl, sl, r9
   3e084:	mov	r2, sl
   3e088:	strd	r6, [sp, #24]
   3e08c:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   3e090:	sub	r3, r0, #1
   3e094:	cmn	r3, #4
   3e098:	ldrls	r1, [sp, #16]
   3e09c:	bhi	3e550 <__assert_fail@plt+0x2bf5c>
   3e0a0:	add	r9, r9, r0
   3e0a4:	ldr	r3, [sp]
   3e0a8:	cmp	r3, r9
   3e0ac:	bgt	3e068 <__assert_fail@plt+0x2ba74>
   3e0b0:	sub	r9, r9, r3
   3e0b4:	cmn	r1, #1
   3e0b8:	ldr	r6, [sp, #4]
   3e0bc:	mov	r7, r3
   3e0c0:	str	r9, [r4, #28]
   3e0c4:	beq	3e364 <__assert_fail@plt+0x2bd70>
   3e0c8:	ldrb	r3, [r4, #78]	; 0x4e
   3e0cc:	cmp	r3, #0
   3e0d0:	bne	3e5c4 <__assert_fail@plt+0x2bfd0>
   3e0d4:	cmp	r1, #10
   3e0d8:	movne	r3, #0
   3e0dc:	bne	3e0f0 <__assert_fail@plt+0x2bafc>
   3e0e0:	ldrb	r3, [r4, #77]	; 0x4d
   3e0e4:	cmp	r3, #0
   3e0e8:	moveq	r3, #0
   3e0ec:	movne	r3, #2
   3e0f0:	str	r3, [r4, #60]	; 0x3c
   3e0f4:	cmp	r9, #0
   3e0f8:	bne	3e574 <__assert_fail@plt+0x2bf80>
   3e0fc:	ldrb	r3, [r4, #75]	; 0x4b
   3e100:	str	r9, [r4, #32]
   3e104:	ldr	r1, [r4, #48]	; 0x30
   3e108:	ldr	r0, [r4, #56]	; 0x38
   3e10c:	ldr	r2, [r4, #80]	; 0x50
   3e110:	sub	r1, r1, r5
   3e114:	sub	r0, r0, r5
   3e118:	b	3de6c <__assert_fail@plt+0x2b878>
   3e11c:	mov	r3, r6
   3e120:	mov	r2, #0
   3e124:	ldr	r9, [r4, #12]
   3e128:	b	3e13c <__assert_fail@plt+0x2bb48>
   3e12c:	bge	3e2d0 <__assert_fail@plt+0x2bcdc>
   3e130:	add	r2, r1, #1
   3e134:	cmp	r2, r3
   3e138:	bge	3e178 <__assert_fail@plt+0x2bb84>
   3e13c:	add	r1, r2, r3
   3e140:	add	r1, r1, r1, lsr #31
   3e144:	asr	r1, r1, #1
   3e148:	ldr	r0, [r9, r1, lsl #2]
   3e14c:	cmp	r0, r5
   3e150:	ble	3e12c <__assert_fail@plt+0x2bb38>
   3e154:	mov	r3, r1
   3e158:	b	3e134 <__assert_fail@plt+0x2bb40>
   3e15c:	ldr	r0, [r4, #4]
   3e160:	add	r1, r0, r5
   3e164:	bl	11fb8 <memmove@plt>
   3e168:	ldr	r2, [r4, #28]
   3e16c:	ldrb	r3, [r4, #75]	; 0x4b
   3e170:	sub	r2, r2, r5
   3e174:	b	3de48 <__assert_fail@plt+0x2b854>
   3e178:	cmp	r0, r5
   3e17c:	addlt	sl, r1, #1
   3e180:	bge	3e2d0 <__assert_fail@plt+0x2bcdc>
   3e184:	mov	r2, r8
   3e188:	mov	r0, r4
   3e18c:	bl	3d850 <__assert_fail@plt+0x2b25c>
   3e190:	sub	r3, r5, sl
   3e194:	cmp	r5, r6
   3e198:	str	r0, [r4, #60]	; 0x3c
   3e19c:	clz	r3, r3
   3e1a0:	lsr	r3, r3, #5
   3e1a4:	movge	r3, #0
   3e1a8:	cmp	r3, #0
   3e1ac:	bne	3e37c <__assert_fail@plt+0x2bd88>
   3e1b0:	ldr	r1, [r4, #44]	; 0x2c
   3e1b4:	mov	r3, #0
   3e1b8:	cmp	sl, #0
   3e1bc:	ldr	r0, [r4, #52]	; 0x34
   3e1c0:	strb	r3, [r4, #76]	; 0x4c
   3e1c4:	sub	r1, r1, r7
   3e1c8:	add	r2, r1, r5
   3e1cc:	sub	r0, r0, r7
   3e1d0:	add	r3, r0, r5
   3e1d4:	str	r2, [r4, #48]	; 0x30
   3e1d8:	str	r3, [r4, #56]	; 0x38
   3e1dc:	ble	3e20c <__assert_fail@plt+0x2bc18>
   3e1e0:	sub	r3, sl, #-1073741823	; 0xc0000001
   3e1e4:	ldr	r2, [r9, r3, lsl #2]
   3e1e8:	add	r3, r9, r3, lsl #2
   3e1ec:	cmp	r2, r5
   3e1f0:	beq	3e204 <__assert_fail@plt+0x2bc10>
   3e1f4:	b	3e20c <__assert_fail@plt+0x2bc18>
   3e1f8:	ldr	r2, [r3, #-4]!
   3e1fc:	cmp	r2, r5
   3e200:	bne	3e20c <__assert_fail@plt+0x2bc18>
   3e204:	subs	sl, sl, #1
   3e208:	bne	3e1f8 <__assert_fail@plt+0x2bc04>
   3e20c:	cmp	sl, r6
   3e210:	bge	3e268 <__assert_fail@plt+0x2bc74>
   3e214:	ldr	r3, [r4, #8]
   3e218:	lsl	ip, sl, #2
   3e21c:	ldr	r2, [r3, sl, lsl #2]
   3e220:	add	r3, r3, ip
   3e224:	cmn	r2, #1
   3e228:	beq	3e23c <__assert_fail@plt+0x2bc48>
   3e22c:	b	3e270 <__assert_fail@plt+0x2bc7c>
   3e230:	ldr	r2, [r3, #4]!
   3e234:	cmn	r2, #1
   3e238:	bne	3e270 <__assert_fail@plt+0x2bc7c>
   3e23c:	add	sl, sl, #1
   3e240:	cmp	sl, r6
   3e244:	lsl	ip, sl, #2
   3e248:	bne	3e230 <__assert_fail@plt+0x2bc3c>
   3e24c:	mov	r3, #0
   3e250:	mov	r2, r3
   3e254:	str	r3, [r4, #28]
   3e258:	ldrb	r3, [r4, #75]	; 0x4b
   3e25c:	str	r2, [r4, #32]
   3e260:	ldr	r2, [r4, #80]	; 0x50
   3e264:	b	3de6c <__assert_fail@plt+0x2b878>
   3e268:	beq	3e24c <__assert_fail@plt+0x2bc58>
   3e26c:	lsl	ip, sl, #2
   3e270:	ldr	r2, [r9, ip]
   3e274:	sub	r2, r2, r5
   3e278:	cmp	r2, #0
   3e27c:	str	r2, [r4, #28]
   3e280:	beq	3e258 <__assert_fail@plt+0x2bc64>
   3e284:	ble	3e2ac <__assert_fail@plt+0x2bcb8>
   3e288:	ldr	r1, [r4, #8]
   3e28c:	mov	r3, #0
   3e290:	mvn	r0, #0
   3e294:	sub	r1, r1, #4
   3e298:	str	r0, [r1, #4]!
   3e29c:	add	r3, r3, #1
   3e2a0:	ldr	r2, [r4, #28]
   3e2a4:	cmp	r2, r3
   3e2a8:	bgt	3e298 <__assert_fail@plt+0x2bca4>
   3e2ac:	mov	r1, #255	; 0xff
   3e2b0:	ldr	r0, [r4, #4]
   3e2b4:	bl	12378 <memset@plt>
   3e2b8:	ldr	r2, [r4, #28]
   3e2bc:	ldr	r1, [r4, #48]	; 0x30
   3e2c0:	ldr	r0, [r4, #56]	; 0x38
   3e2c4:	sub	r1, r1, r5
   3e2c8:	sub	r0, r0, r5
   3e2cc:	b	3e258 <__assert_fail@plt+0x2bc64>
   3e2d0:	mov	sl, r1
   3e2d4:	sub	r1, r1, #1
   3e2d8:	b	3e184 <__assert_fail@plt+0x2bb90>
   3e2dc:	ldr	r9, [r4]
   3e2e0:	ldr	r1, [r4, #64]	; 0x40
   3e2e4:	add	r9, r9, r3
   3e2e8:	add	r3, r9, r5
   3e2ec:	ldrb	ip, [r3, #-1]
   3e2f0:	cmp	r1, #0
   3e2f4:	str	r0, [r4, #32]
   3e2f8:	ldr	r0, [r4, #68]	; 0x44
   3e2fc:	ldrbne	ip, [r1, ip]
   3e300:	asr	r1, ip, #5
   3e304:	and	r3, ip, #31
   3e308:	ldr	r1, [r0, r1, lsl #2]
   3e30c:	lsr	r3, r1, r3
   3e310:	ands	r1, r3, #1
   3e314:	bne	3e32c <__assert_fail@plt+0x2bd38>
   3e318:	cmp	ip, #10
   3e31c:	bne	3e32c <__assert_fail@plt+0x2bd38>
   3e320:	ldrb	r3, [r4, #77]	; 0x4d
   3e324:	cmp	r3, #0
   3e328:	movne	r1, #2
   3e32c:	ldrb	r3, [r4, #75]	; 0x4b
   3e330:	str	r1, [r4, #60]	; 0x3c
   3e334:	ldr	r1, [r4, #48]	; 0x30
   3e338:	ldr	r0, [r4, #56]	; 0x38
   3e33c:	cmp	r3, #0
   3e340:	sub	r1, r1, r5
   3e344:	sub	r0, r0, r5
   3e348:	beq	3de74 <__assert_fail@plt+0x2b880>
   3e34c:	str	r7, [r4, #24]
   3e350:	str	r1, [r4, #48]	; 0x30
   3e354:	str	r0, [r4, #56]	; 0x38
   3e358:	b	3df24 <__assert_fail@plt+0x2b930>
   3e35c:	sub	r9, r9, r7
   3e360:	str	r9, [r4, #28]
   3e364:	mov	r2, r8
   3e368:	sub	r1, r6, #1
   3e36c:	mov	r0, r4
   3e370:	bl	3d850 <__assert_fail@plt+0x2b25c>
   3e374:	str	r0, [r4, #60]	; 0x3c
   3e378:	b	3e0f4 <__assert_fail@plt+0x2bb00>
   3e37c:	ldr	r3, [r9, sl, lsl #2]
   3e380:	cmp	r3, r5
   3e384:	bne	3e1b0 <__assert_fail@plt+0x2bbbc>
   3e388:	ldr	r0, [r4, #8]
   3e38c:	lsl	r8, r5, #2
   3e390:	sub	r2, r6, r5
   3e394:	lsl	r2, r2, #2
   3e398:	add	r1, r0, r8
   3e39c:	bl	11fb8 <memmove@plt>
   3e3a0:	ldr	r0, [r4, #4]
   3e3a4:	ldr	r2, [r4, #28]
   3e3a8:	add	r1, r0, r5
   3e3ac:	sub	r2, r2, r5
   3e3b0:	bl	11fb8 <memmove@plt>
   3e3b4:	ldr	r3, [r4, #28]
   3e3b8:	ldr	r2, [r4, #32]
   3e3bc:	sub	r3, r3, r5
   3e3c0:	cmp	r3, #0
   3e3c4:	sub	r2, r2, r5
   3e3c8:	str	r3, [r4, #28]
   3e3cc:	str	r2, [r4, #32]
   3e3d0:	ble	3e400 <__assert_fail@plt+0x2be0c>
   3e3d4:	ldr	r1, [r4, #12]
   3e3d8:	mov	r2, #0
   3e3dc:	add	r0, r1, r8
   3e3e0:	sub	r1, r1, #4
   3e3e4:	ldr	r3, [r0], #4
   3e3e8:	add	r2, r2, #1
   3e3ec:	sub	r3, r3, r5
   3e3f0:	str	r3, [r1, #4]!
   3e3f4:	ldr	r3, [r4, #28]
   3e3f8:	cmp	r3, r2
   3e3fc:	bgt	3e3e4 <__assert_fail@plt+0x2bdf0>
   3e400:	ldr	r1, [r4, #48]	; 0x30
   3e404:	ldr	r0, [r4, #56]	; 0x38
   3e408:	ldrb	r3, [r4, #75]	; 0x4b
   3e40c:	sub	r1, r1, r5
   3e410:	ldr	r2, [r4, #80]	; 0x50
   3e414:	sub	r0, r0, r5
   3e418:	b	3de6c <__assert_fail@plt+0x2b878>
   3e41c:	ldr	r5, [r4, #28]
   3e420:	ldr	r6, [r4, #36]	; 0x24
   3e424:	cmp	r1, r6
   3e428:	movlt	r6, r1
   3e42c:	cmp	r6, r5
   3e430:	ble	3e5fc <__assert_fail@plt+0x2c008>
   3e434:	bl	122a0 <__ctype_toupper_loc@plt>
   3e438:	b	3e458 <__assert_fail@plt+0x2be64>
   3e43c:	ldr	r3, [r1, r3, lsl #2]
   3e440:	ldr	r2, [r4, #4]
   3e444:	strb	r3, [r2, r5]
   3e448:	add	r5, r5, #1
   3e44c:	cmp	r6, r5
   3e450:	beq	3e490 <__assert_fail@plt+0x2be9c>
   3e454:	ldr	r7, [r4, #24]
   3e458:	ldr	r3, [r4]
   3e45c:	ldr	r2, [r4, #64]	; 0x40
   3e460:	ldr	r1, [r0]
   3e464:	add	r3, r3, r5
   3e468:	ldrb	r3, [r3, r7]
   3e46c:	cmp	r2, #0
   3e470:	beq	3e43c <__assert_fail@plt+0x2be48>
   3e474:	ldrb	r2, [r2, r3]
   3e478:	ldr	r3, [r4, #4]
   3e47c:	ldr	r2, [r1, r2, lsl #2]
   3e480:	strb	r2, [r3, r5]
   3e484:	add	r5, r5, #1
   3e488:	cmp	r5, r6
   3e48c:	bne	3e454 <__assert_fail@plt+0x2be60>
   3e490:	str	r6, [r4, #28]
   3e494:	str	r6, [r4, #32]
   3e498:	b	3dea8 <__assert_fail@plt+0x2b8b4>
   3e49c:	mov	r1, sl
   3e4a0:	str	sl, [sp]
   3e4a4:	ldr	r2, [r4, #48]	; 0x30
   3e4a8:	ldr	r3, [r4, #64]	; 0x40
   3e4ac:	add	r2, r1, r2
   3e4b0:	sub	r2, r2, r9
   3e4b4:	cmp	r3, #0
   3e4b8:	moveq	r1, r9
   3e4bc:	bne	3e604 <__assert_fail@plt+0x2c010>
   3e4c0:	mov	sl, #0
   3e4c4:	mov	fp, #0
   3e4c8:	add	r3, sp, #24
   3e4cc:	add	r0, sp, #12
   3e4d0:	strd	sl, [sp, #24]
   3e4d4:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   3e4d8:	ldr	r3, [sp]
   3e4dc:	add	sl, r3, r5
   3e4e0:	sub	r9, sl, r9
   3e4e4:	cmp	r0, r9
   3e4e8:	bcc	3e4f4 <__assert_fail@plt+0x2bf00>
   3e4ec:	cmn	r0, #3
   3e4f0:	bls	3e500 <__assert_fail@plt+0x2bf0c>
   3e4f4:	ldr	r3, [r4, #24]
   3e4f8:	ldr	r1, [r4, #32]
   3e4fc:	b	3e050 <__assert_fail@plt+0x2ba5c>
   3e500:	ldr	r1, [sp, #12]
   3e504:	sub	r9, r0, r9
   3e508:	mov	r2, #0
   3e50c:	mov	r3, #0
   3e510:	strd	r2, [r4, #16]
   3e514:	str	r9, [r4, #28]
   3e518:	cmn	r1, #1
   3e51c:	bne	3e0c8 <__assert_fail@plt+0x2bad4>
   3e520:	b	3e4f4 <__assert_fail@plt+0x2bf00>
   3e524:	ldr	r0, [r4, #44]	; 0x2c
   3e528:	mov	ip, #0
   3e52c:	ldr	r2, [r4, #52]	; 0x34
   3e530:	strb	ip, [r4, #76]	; 0x4c
   3e534:	sub	r0, r0, r7
   3e538:	add	r0, r0, r5
   3e53c:	sub	r2, r2, r7
   3e540:	add	r2, r2, r5
   3e544:	str	r0, [r4, #48]	; 0x30
   3e548:	str	r2, [r4, #56]	; 0x38
   3e54c:	b	3dfc0 <__assert_fail@plt+0x2b9cc>
   3e550:	mov	r1, #0
   3e554:	cmp	sl, r1
   3e558:	cmpne	r0, r1
   3e55c:	mov	r0, #1
   3e560:	ldrne	r3, [r4]
   3e564:	ldrbne	r1, [r3, r9]
   3e568:	ldrd	r2, [sp, #24]
   3e56c:	strd	r2, [fp]
   3e570:	b	3e0a0 <__assert_fail@plt+0x2baac>
   3e574:	ble	3e59c <__assert_fail@plt+0x2bfa8>
   3e578:	ldr	r2, [r4, #8]
   3e57c:	mov	r3, #0
   3e580:	mvn	r1, #0
   3e584:	sub	r2, r2, #4
   3e588:	str	r1, [r2, #4]!
   3e58c:	add	r3, r3, #1
   3e590:	ldr	r9, [r4, #28]
   3e594:	cmp	r9, r3
   3e598:	bgt	3e588 <__assert_fail@plt+0x2bf94>
   3e59c:	ldrb	r3, [r4, #75]	; 0x4b
   3e5a0:	cmp	r3, #0
   3e5a4:	beq	3e100 <__assert_fail@plt+0x2bb0c>
   3e5a8:	mov	r2, r9
   3e5ac:	mov	r1, #255	; 0xff
   3e5b0:	ldr	r0, [r4, #4]
   3e5b4:	bl	12378 <memset@plt>
   3e5b8:	ldrb	r3, [r4, #75]	; 0x4b
   3e5bc:	ldr	r9, [r4, #28]
   3e5c0:	b	3e100 <__assert_fail@plt+0x2bb0c>
   3e5c4:	mov	r0, r1
   3e5c8:	str	r1, [sp]
   3e5cc:	bl	12354 <iswalnum@plt>
   3e5d0:	ldr	r1, [sp]
   3e5d4:	subs	r3, r1, #95	; 0x5f
   3e5d8:	movne	r3, #1
   3e5dc:	cmp	r0, #0
   3e5e0:	movne	r3, #0
   3e5e4:	cmp	r3, #0
   3e5e8:	moveq	r3, #1
   3e5ec:	beq	3e0f0 <__assert_fail@plt+0x2bafc>
   3e5f0:	b	3e0d4 <__assert_fail@plt+0x2bae0>
   3e5f4:	mov	r1, r2
   3e5f8:	b	3dfac <__assert_fail@plt+0x2b9b8>
   3e5fc:	mov	r6, r5
   3e600:	b	3e490 <__assert_fail@plt+0x2be9c>
   3e604:	cmp	r2, #6
   3e608:	movlt	r1, r2
   3e60c:	movge	r1, #6
   3e610:	subs	r0, r1, #1
   3e614:	bmi	3e6bc <__assert_fail@plt+0x2c0c8>
   3e618:	ldrb	lr, [r9, r0]
   3e61c:	add	ip, sp, #32
   3e620:	add	ip, ip, r0
   3e624:	sub	r0, r1, #2
   3e628:	cmn	r0, #1
   3e62c:	ldrb	lr, [r3, lr]
   3e630:	strb	lr, [ip, #-16]
   3e634:	beq	3e6bc <__assert_fail@plt+0x2c0c8>
   3e638:	ldrb	lr, [r9, r0]
   3e63c:	add	ip, sp, #32
   3e640:	add	ip, ip, r0
   3e644:	sub	r0, r1, #3
   3e648:	cmn	r0, #1
   3e64c:	ldrb	lr, [r3, lr]
   3e650:	strb	lr, [ip, #-16]
   3e654:	beq	3e6bc <__assert_fail@plt+0x2c0c8>
   3e658:	ldrb	lr, [r9, r0]
   3e65c:	add	ip, sp, #32
   3e660:	add	ip, ip, r0
   3e664:	sub	r0, r1, #4
   3e668:	cmn	r0, #1
   3e66c:	ldrb	lr, [r3, lr]
   3e670:	strb	lr, [ip, #-16]
   3e674:	beq	3e6bc <__assert_fail@plt+0x2c0c8>
   3e678:	ldrb	ip, [r9, r0]
   3e67c:	add	lr, sp, #32
   3e680:	sub	r1, r1, #5
   3e684:	add	r0, lr, r0
   3e688:	cmn	r1, #1
   3e68c:	ldrb	ip, [r3, ip]
   3e690:	strb	ip, [r0, #-16]
   3e694:	beq	3e6bc <__assert_fail@plt+0x2c0c8>
   3e698:	ldrb	r0, [r9, r1]
   3e69c:	add	r1, lr, r1
   3e6a0:	cmp	r2, #5
   3e6a4:	ldrb	r0, [r3, r0]
   3e6a8:	strb	r0, [r1, #-16]
   3e6ac:	ble	3e6bc <__assert_fail@plt+0x2c0c8>
   3e6b0:	ldrb	r1, [r9]
   3e6b4:	ldrb	r3, [r3, r1]
   3e6b8:	strb	r3, [sp, #16]
   3e6bc:	add	r1, sp, #16
   3e6c0:	b	3e4c0 <__assert_fail@plt+0x2becc>
   3e6c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3e6c8:	strd	r6, [sp, #8]
   3e6cc:	strd	sl, [sp, #24]
   3e6d0:	ldr	fp, [r1]
   3e6d4:	strd	r8, [sp, #16]
   3e6d8:	str	lr, [sp, #32]
   3e6dc:	sub	sp, sp, #12
   3e6e0:	ldr	r6, [r0, #84]	; 0x54
   3e6e4:	cmp	fp, #0
   3e6e8:	ble	3e7a4 <__assert_fail@plt+0x2c1b0>
   3e6ec:	mov	r8, r3
   3e6f0:	mov	r9, r2
   3e6f4:	mov	sl, r0
   3e6f8:	mov	r7, r1
   3e6fc:	mov	r4, #0
   3e700:	b	3e70c <__assert_fail@plt+0x2c118>
   3e704:	cmp	r4, fp
   3e708:	bge	3e7a4 <__assert_fail@plt+0x2c1b0>
   3e70c:	ldr	r3, [r9]
   3e710:	ldr	ip, [r6]
   3e714:	ldr	r5, [r3, r4, lsl #2]
   3e718:	add	r4, r4, #1
   3e71c:	add	lr, ip, r5, lsl #3
   3e720:	ldrb	lr, [lr, #4]
   3e724:	cmp	lr, #8
   3e728:	bne	3e704 <__assert_fail@plt+0x2c110>
   3e72c:	ldr	r3, [ip, r5, lsl #3]
   3e730:	cmp	r3, #31
   3e734:	bgt	3e704 <__assert_fail@plt+0x2c110>
   3e738:	ldr	r2, [r6, #80]	; 0x50
   3e73c:	lsr	r3, r2, r3
   3e740:	tst	r3, #1
   3e744:	beq	3e704 <__assert_fail@plt+0x2c110>
   3e748:	ldr	fp, [sl, #124]	; 0x7c
   3e74c:	ldr	r3, [sl, #128]	; 0x80
   3e750:	ldr	r2, [sl, #132]	; 0x84
   3e754:	cmp	r3, fp
   3e758:	beq	3e7cc <__assert_fail@plt+0x2c1d8>
   3e75c:	mov	r1, #24
   3e760:	mov	r0, #1
   3e764:	str	r2, [sp, #4]
   3e768:	bl	384e0 <__assert_fail@plt+0x25eec>
   3e76c:	ldr	r2, [sp, #4]
   3e770:	ldr	r3, [sl, #124]	; 0x7c
   3e774:	str	r0, [r2, fp, lsl #2]
   3e778:	ldr	r2, [sl, #132]	; 0x84
   3e77c:	add	r1, r3, #1
   3e780:	ldr	r3, [r2, r3, lsl #2]
   3e784:	cmp	r3, #0
   3e788:	beq	3e7c4 <__assert_fail@plt+0x2c1d0>
   3e78c:	str	r5, [r3, #4]
   3e790:	str	r1, [sl, #124]	; 0x7c
   3e794:	str	r8, [r3]
   3e798:	ldr	fp, [r7]
   3e79c:	cmp	r4, fp
   3e7a0:	blt	3e70c <__assert_fail@plt+0x2c118>
   3e7a4:	mov	r0, #0
   3e7a8:	add	sp, sp, #12
   3e7ac:	ldrd	r4, [sp]
   3e7b0:	ldrd	r6, [sp, #8]
   3e7b4:	ldrd	r8, [sp, #16]
   3e7b8:	ldrd	sl, [sp, #24]
   3e7bc:	add	sp, sp, #32
   3e7c0:	pop	{pc}		; (ldr pc, [sp], #4)
   3e7c4:	mov	r0, #12
   3e7c8:	b	3e7a8 <__assert_fail@plt+0x2c1b4>
   3e7cc:	mov	r0, r2
   3e7d0:	lsl	r1, fp, #3
   3e7d4:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3e7d8:	subs	r2, r0, #0
   3e7dc:	lsl	r3, fp, #1
   3e7e0:	beq	3e7c4 <__assert_fail@plt+0x2c1d0>
   3e7e4:	str	r3, [sl, #128]	; 0x80
   3e7e8:	str	r2, [sl, #132]	; 0x84
   3e7ec:	ldr	fp, [sl, #124]	; 0x7c
   3e7f0:	b	3e75c <__assert_fail@plt+0x2c168>
   3e7f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3e7f8:	mov	r5, r1
   3e7fc:	strd	r6, [sp, #8]
   3e800:	mov	r6, r0
   3e804:	strd	r8, [sp, #16]
   3e808:	mov	r8, r3
   3e80c:	strd	sl, [sp, #24]
   3e810:	mov	sl, r2
   3e814:	str	lr, [sp, #32]
   3e818:	sub	sp, sp, #4
   3e81c:	ldr	r9, [sp, #40]	; 0x28
   3e820:	ldr	ip, [sp, #48]	; 0x30
   3e824:	ldr	r7, [sp, #44]	; 0x2c
   3e828:	tst	ip, #4194304	; 0x400000
   3e82c:	beq	3e850 <__assert_fail@plt+0x2c25c>
   3e830:	mov	r0, r7
   3e834:	movw	r1, #26108	; 0x65fc
   3e838:	movt	r1, #5
   3e83c:	bl	11f40 <strcmp@plt>
   3e840:	cmp	r0, #0
   3e844:	movweq	r7, #26100	; 0x65f4
   3e848:	movteq	r7, #5
   3e84c:	bne	3e954 <__assert_fail@plt+0x2c360>
   3e850:	ldr	r4, [r8]
   3e854:	ldr	r3, [r9]
   3e858:	ldr	fp, [sl]
   3e85c:	cmp	r3, r4
   3e860:	beq	3ea38 <__assert_fail@plt+0x2c444>
   3e864:	add	r3, r4, #1
   3e868:	mov	r0, r7
   3e86c:	str	r3, [r8]
   3e870:	bl	11ee0 <wctype@plt>
   3e874:	movw	r1, #26124	; 0x660c
   3e878:	movt	r1, #5
   3e87c:	str	r0, [fp, r4, lsl #2]
   3e880:	mov	r0, r7
   3e884:	bl	11f40 <strcmp@plt>
   3e888:	subs	r4, r0, #0
   3e88c:	beq	3e90c <__assert_fail@plt+0x2c318>
   3e890:	movw	r1, #26132	; 0x6614
   3e894:	movt	r1, #5
   3e898:	mov	r0, r7
   3e89c:	bl	11f40 <strcmp@plt>
   3e8a0:	subs	r4, r0, #0
   3e8a4:	bne	3e978 <__assert_fail@plt+0x2c384>
   3e8a8:	bl	122b8 <__ctype_b_loc@plt>
   3e8ac:	ldr	r3, [r0]
   3e8b0:	cmp	r6, #0
   3e8b4:	moveq	ip, #1
   3e8b8:	sub	r3, r3, #2
   3e8bc:	bne	3eb60 <__assert_fail@plt+0x2c56c>
   3e8c0:	ldrh	r2, [r3, #2]!
   3e8c4:	asr	r1, r4, #5
   3e8c8:	and	r0, r4, #31
   3e8cc:	add	r4, r4, #1
   3e8d0:	tst	r2, #2
   3e8d4:	beq	3e8e4 <__assert_fail@plt+0x2c2f0>
   3e8d8:	ldr	r2, [r5, r1, lsl #2]
   3e8dc:	orr	r2, r2, ip, lsl r0
   3e8e0:	str	r2, [r5, r1, lsl #2]
   3e8e4:	cmp	r4, #256	; 0x100
   3e8e8:	bne	3e8c0 <__assert_fail@plt+0x2c2cc>
   3e8ec:	mov	r0, #0
   3e8f0:	add	sp, sp, #4
   3e8f4:	ldrd	r4, [sp]
   3e8f8:	ldrd	r6, [sp, #8]
   3e8fc:	ldrd	r8, [sp, #16]
   3e900:	ldrd	sl, [sp, #24]
   3e904:	add	sp, sp, #32
   3e908:	pop	{pc}		; (ldr pc, [sp], #4)
   3e90c:	bl	122b8 <__ctype_b_loc@plt>
   3e910:	ldr	r3, [r0]
   3e914:	cmp	r6, #0
   3e918:	moveq	lr, #1
   3e91c:	sub	r3, r3, #2
   3e920:	bne	3eb24 <__assert_fail@plt+0x2c530>
   3e924:	ldrh	r0, [r3, #2]!
   3e928:	asr	r2, r4, #5
   3e92c:	and	ip, r4, #31
   3e930:	add	r4, r4, #1
   3e934:	tst	r0, #8
   3e938:	beq	3e948 <__assert_fail@plt+0x2c354>
   3e93c:	ldr	r1, [r5, r2, lsl #2]
   3e940:	orr	r1, r1, lr, lsl ip
   3e944:	str	r1, [r5, r2, lsl #2]
   3e948:	cmp	r4, #256	; 0x100
   3e94c:	bne	3e924 <__assert_fail@plt+0x2c330>
   3e950:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3e954:	mov	r0, r7
   3e958:	movw	r1, #26116	; 0x6604
   3e95c:	movt	r1, #5
   3e960:	bl	11f40 <strcmp@plt>
   3e964:	cmp	r0, #0
   3e968:	movw	r3, #26100	; 0x65f4
   3e96c:	movt	r3, #5
   3e970:	moveq	r7, r3
   3e974:	b	3e850 <__assert_fail@plt+0x2c25c>
   3e978:	movw	r1, #26116	; 0x6604
   3e97c:	movt	r1, #5
   3e980:	mov	r0, r7
   3e984:	bl	11f40 <strcmp@plt>
   3e988:	subs	r4, r0, #0
   3e98c:	beq	3e9f0 <__assert_fail@plt+0x2c3fc>
   3e990:	movw	r1, #26140	; 0x661c
   3e994:	movt	r1, #5
   3e998:	mov	r0, r7
   3e99c:	bl	11f40 <strcmp@plt>
   3e9a0:	subs	r4, r0, #0
   3e9a4:	bne	3ea64 <__assert_fail@plt+0x2c470>
   3e9a8:	bl	122b8 <__ctype_b_loc@plt>
   3e9ac:	ldr	r3, [r0]
   3e9b0:	cmp	r6, #0
   3e9b4:	moveq	ip, #1
   3e9b8:	sub	r3, r3, #2
   3e9bc:	bne	3ed3c <__assert_fail@plt+0x2c748>
   3e9c0:	ldrh	r2, [r3, #2]!
   3e9c4:	asr	r1, r4, #5
   3e9c8:	and	r0, r4, #31
   3e9cc:	add	r4, r4, #1
   3e9d0:	tst	r2, #8192	; 0x2000
   3e9d4:	beq	3e9e4 <__assert_fail@plt+0x2c3f0>
   3e9d8:	ldr	r2, [r5, r1, lsl #2]
   3e9dc:	orr	r2, r2, ip, lsl r0
   3e9e0:	str	r2, [r5, r1, lsl #2]
   3e9e4:	cmp	r4, #256	; 0x100
   3e9e8:	bne	3e9c0 <__assert_fail@plt+0x2c3cc>
   3e9ec:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3e9f0:	bl	122b8 <__ctype_b_loc@plt>
   3e9f4:	ldr	r3, [r0]
   3e9f8:	cmp	r6, #0
   3e9fc:	moveq	ip, #1
   3ea00:	sub	r3, r3, #2
   3ea04:	bne	3eb9c <__assert_fail@plt+0x2c5a8>
   3ea08:	ldrh	r2, [r3, #2]!
   3ea0c:	asr	r1, r4, #5
   3ea10:	and	r0, r4, #31
   3ea14:	add	r4, r4, #1
   3ea18:	tst	r2, #512	; 0x200
   3ea1c:	beq	3ea2c <__assert_fail@plt+0x2c438>
   3ea20:	ldr	r2, [r5, r1, lsl #2]
   3ea24:	orr	r2, r2, ip, lsl r0
   3ea28:	str	r2, [r5, r1, lsl #2]
   3ea2c:	cmp	r4, #256	; 0x100
   3ea30:	bne	3ea08 <__assert_fail@plt+0x2c414>
   3ea34:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3ea38:	lsl	r4, r4, #1
   3ea3c:	mov	r0, fp
   3ea40:	add	r4, r4, #1
   3ea44:	lsl	r1, r4, #2
   3ea48:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   3ea4c:	subs	fp, r0, #0
   3ea50:	beq	3ec98 <__assert_fail@plt+0x2c6a4>
   3ea54:	str	fp, [sl]
   3ea58:	str	r4, [r9]
   3ea5c:	ldr	r4, [r8]
   3ea60:	b	3e864 <__assert_fail@plt+0x2c270>
   3ea64:	movw	r1, #26100	; 0x65f4
   3ea68:	movt	r1, #5
   3ea6c:	mov	r0, r7
   3ea70:	bl	11f40 <strcmp@plt>
   3ea74:	subs	r4, r0, #0
   3ea78:	beq	3eadc <__assert_fail@plt+0x2c4e8>
   3ea7c:	movw	r1, #26148	; 0x6624
   3ea80:	movt	r1, #5
   3ea84:	mov	r0, r7
   3ea88:	bl	11f40 <strcmp@plt>
   3ea8c:	subs	r4, r0, #0
   3ea90:	bne	3ebd8 <__assert_fail@plt+0x2c5e4>
   3ea94:	bl	122b8 <__ctype_b_loc@plt>
   3ea98:	ldr	r3, [r0]
   3ea9c:	cmp	r6, #0
   3eaa0:	moveq	ip, #1
   3eaa4:	sub	r3, r3, #2
   3eaa8:	bne	3ed78 <__assert_fail@plt+0x2c784>
   3eaac:	ldrh	r1, [r3, #2]!
   3eab0:	asr	r2, r4, #5
   3eab4:	and	r0, r4, #31
   3eab8:	add	r4, r4, #1
   3eabc:	tst	r1, #2048	; 0x800
   3eac0:	beq	3ead0 <__assert_fail@plt+0x2c4dc>
   3eac4:	ldr	r1, [r5, r2, lsl #2]
   3eac8:	orr	r1, r1, ip, lsl r0
   3eacc:	str	r1, [r5, r2, lsl #2]
   3ead0:	cmp	r4, #256	; 0x100
   3ead4:	bne	3eaac <__assert_fail@plt+0x2c4b8>
   3ead8:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3eadc:	bl	122b8 <__ctype_b_loc@plt>
   3eae0:	ldr	r3, [r0]
   3eae4:	cmp	r6, #0
   3eae8:	moveq	ip, #1
   3eaec:	sub	r3, r3, #2
   3eaf0:	bne	3ed00 <__assert_fail@plt+0x2c70c>
   3eaf4:	ldrh	r2, [r3, #2]!
   3eaf8:	asr	r1, r4, #5
   3eafc:	and	r0, r4, #31
   3eb00:	add	r4, r4, #1
   3eb04:	tst	r2, #1024	; 0x400
   3eb08:	beq	3eb18 <__assert_fail@plt+0x2c524>
   3eb0c:	ldr	r2, [r5, r1, lsl #2]
   3eb10:	orr	r2, r2, ip, lsl r0
   3eb14:	str	r2, [r5, r1, lsl #2]
   3eb18:	cmp	r4, #256	; 0x100
   3eb1c:	bne	3eaf4 <__assert_fail@plt+0x2c500>
   3eb20:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3eb24:	add	ip, r6, #256	; 0x100
   3eb28:	mov	lr, #1
   3eb2c:	ldrh	r2, [r3, #2]!
   3eb30:	tst	r2, #8
   3eb34:	beq	3eb50 <__assert_fail@plt+0x2c55c>
   3eb38:	ldrb	r2, [r6]
   3eb3c:	asr	r0, r2, #5
   3eb40:	and	r2, r2, #31
   3eb44:	ldr	r1, [r5, r0, lsl #2]
   3eb48:	orr	r2, r1, lr, lsl r2
   3eb4c:	str	r2, [r5, r0, lsl #2]
   3eb50:	add	r6, r6, #1
   3eb54:	cmp	ip, r6
   3eb58:	bne	3eb2c <__assert_fail@plt+0x2c538>
   3eb5c:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3eb60:	add	ip, r6, #256	; 0x100
   3eb64:	mov	lr, #1
   3eb68:	ldrh	r2, [r3, #2]!
   3eb6c:	tst	r2, #2
   3eb70:	beq	3eb8c <__assert_fail@plt+0x2c598>
   3eb74:	ldrb	r2, [r6]
   3eb78:	asr	r0, r2, #5
   3eb7c:	and	r2, r2, #31
   3eb80:	ldr	r1, [r5, r0, lsl #2]
   3eb84:	orr	r2, r1, lr, lsl r2
   3eb88:	str	r2, [r5, r0, lsl #2]
   3eb8c:	add	r6, r6, #1
   3eb90:	cmp	ip, r6
   3eb94:	bne	3eb68 <__assert_fail@plt+0x2c574>
   3eb98:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3eb9c:	add	ip, r6, #256	; 0x100
   3eba0:	mov	lr, #1
   3eba4:	ldrh	r2, [r3, #2]!
   3eba8:	tst	r2, #512	; 0x200
   3ebac:	beq	3ebc8 <__assert_fail@plt+0x2c5d4>
   3ebb0:	ldrb	r2, [r6]
   3ebb4:	asr	r0, r2, #5
   3ebb8:	and	r2, r2, #31
   3ebbc:	ldr	r1, [r5, r0, lsl #2]
   3ebc0:	orr	r2, r1, lr, lsl r2
   3ebc4:	str	r2, [r5, r0, lsl #2]
   3ebc8:	add	r6, r6, #1
   3ebcc:	cmp	ip, r6
   3ebd0:	bne	3eba4 <__assert_fail@plt+0x2c5b0>
   3ebd4:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3ebd8:	movw	r1, #6872	; 0x1ad8
   3ebdc:	movt	r1, #5
   3ebe0:	mov	r0, r7
   3ebe4:	bl	11f40 <strcmp@plt>
   3ebe8:	subs	r4, r0, #0
   3ebec:	bne	3ec38 <__assert_fail@plt+0x2c644>
   3ebf0:	bl	122b8 <__ctype_b_loc@plt>
   3ebf4:	ldr	r3, [r0]
   3ebf8:	cmp	r6, #0
   3ebfc:	moveq	ip, #1
   3ec00:	sub	r3, r3, #2
   3ec04:	bne	3ef88 <__assert_fail@plt+0x2c994>
   3ec08:	ldrh	r2, [r3, #2]!
   3ec0c:	asr	r1, r4, #5
   3ec10:	and	r0, r4, #31
   3ec14:	add	r4, r4, #1
   3ec18:	tst	r2, #16384	; 0x4000
   3ec1c:	beq	3ec2c <__assert_fail@plt+0x2c638>
   3ec20:	ldr	r2, [r5, r1, lsl #2]
   3ec24:	orr	r2, r2, ip, lsl r0
   3ec28:	str	r2, [r5, r1, lsl #2]
   3ec2c:	cmp	r4, #256	; 0x100
   3ec30:	bne	3ec08 <__assert_fail@plt+0x2c614>
   3ec34:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3ec38:	movw	r1, #26108	; 0x65fc
   3ec3c:	movt	r1, #5
   3ec40:	mov	r0, r7
   3ec44:	bl	11f40 <strcmp@plt>
   3ec48:	subs	r4, r0, #0
   3ec4c:	bne	3eca0 <__assert_fail@plt+0x2c6ac>
   3ec50:	bl	122b8 <__ctype_b_loc@plt>
   3ec54:	ldr	r3, [r0]
   3ec58:	cmp	r6, #0
   3ec5c:	moveq	ip, #1
   3ec60:	sub	r3, r3, #2
   3ec64:	bne	3f000 <__assert_fail@plt+0x2ca0c>
   3ec68:	ldrh	r2, [r3, #2]!
   3ec6c:	asr	r1, r4, #5
   3ec70:	and	r0, r4, #31
   3ec74:	add	r4, r4, #1
   3ec78:	tst	r2, #256	; 0x100
   3ec7c:	beq	3ec8c <__assert_fail@plt+0x2c698>
   3ec80:	ldr	r2, [r5, r1, lsl #2]
   3ec84:	orr	r2, r2, ip, lsl r0
   3ec88:	str	r2, [r5, r1, lsl #2]
   3ec8c:	cmp	r4, #256	; 0x100
   3ec90:	bne	3ec68 <__assert_fail@plt+0x2c674>
   3ec94:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3ec98:	mov	r0, #12
   3ec9c:	b	3e8f0 <__assert_fail@plt+0x2c2fc>
   3eca0:	movw	r1, #26156	; 0x662c
   3eca4:	movt	r1, #5
   3eca8:	mov	r0, r7
   3ecac:	bl	11f40 <strcmp@plt>
   3ecb0:	subs	r4, r0, #0
   3ecb4:	bne	3edb4 <__assert_fail@plt+0x2c7c0>
   3ecb8:	bl	122b8 <__ctype_b_loc@plt>
   3ecbc:	ldr	r3, [r0]
   3ecc0:	cmp	r6, #0
   3ecc4:	moveq	ip, #1
   3ecc8:	sub	r3, r3, #2
   3eccc:	bne	3efc4 <__assert_fail@plt+0x2c9d0>
   3ecd0:	ldrh	r2, [r3, #2]!
   3ecd4:	asr	r1, r4, #5
   3ecd8:	and	r0, r4, #31
   3ecdc:	add	r4, r4, #1
   3ece0:	tst	r2, #1
   3ece4:	beq	3ecf4 <__assert_fail@plt+0x2c700>
   3ece8:	ldr	r2, [r5, r1, lsl #2]
   3ecec:	orr	r2, r2, ip, lsl r0
   3ecf0:	str	r2, [r5, r1, lsl #2]
   3ecf4:	cmp	r4, #256	; 0x100
   3ecf8:	bne	3ecd0 <__assert_fail@plt+0x2c6dc>
   3ecfc:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3ed00:	add	ip, r6, #256	; 0x100
   3ed04:	mov	lr, #1
   3ed08:	ldrh	r2, [r3, #2]!
   3ed0c:	tst	r2, #1024	; 0x400
   3ed10:	beq	3ed2c <__assert_fail@plt+0x2c738>
   3ed14:	ldrb	r2, [r6]
   3ed18:	asr	r0, r2, #5
   3ed1c:	and	r2, r2, #31
   3ed20:	ldr	r1, [r5, r0, lsl #2]
   3ed24:	orr	r2, r1, lr, lsl r2
   3ed28:	str	r2, [r5, r0, lsl #2]
   3ed2c:	add	r6, r6, #1
   3ed30:	cmp	ip, r6
   3ed34:	bne	3ed08 <__assert_fail@plt+0x2c714>
   3ed38:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3ed3c:	add	ip, r6, #256	; 0x100
   3ed40:	mov	lr, #1
   3ed44:	ldrh	r2, [r3, #2]!
   3ed48:	tst	r2, #8192	; 0x2000
   3ed4c:	beq	3ed68 <__assert_fail@plt+0x2c774>
   3ed50:	ldrb	r2, [r6]
   3ed54:	asr	r0, r2, #5
   3ed58:	and	r2, r2, #31
   3ed5c:	ldr	r1, [r5, r0, lsl #2]
   3ed60:	orr	r2, r1, lr, lsl r2
   3ed64:	str	r2, [r5, r0, lsl #2]
   3ed68:	add	r6, r6, #1
   3ed6c:	cmp	ip, r6
   3ed70:	bne	3ed44 <__assert_fail@plt+0x2c750>
   3ed74:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3ed78:	add	r1, r6, #256	; 0x100
   3ed7c:	mov	lr, #1
   3ed80:	ldrh	r2, [r3, #2]!
   3ed84:	tst	r2, #2048	; 0x800
   3ed88:	beq	3eda4 <__assert_fail@plt+0x2c7b0>
   3ed8c:	ldrb	r2, [r6]
   3ed90:	asr	ip, r2, #5
   3ed94:	and	r2, r2, #31
   3ed98:	ldr	r0, [r5, ip, lsl #2]
   3ed9c:	orr	r2, r0, lr, lsl r2
   3eda0:	str	r2, [r5, ip, lsl #2]
   3eda4:	add	r6, r6, #1
   3eda8:	cmp	r1, r6
   3edac:	bne	3ed80 <__assert_fail@plt+0x2c78c>
   3edb0:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3edb4:	movw	r1, #26164	; 0x6634
   3edb8:	movt	r1, #5
   3edbc:	mov	r0, r7
   3edc0:	bl	11f40 <strcmp@plt>
   3edc4:	subs	r4, r0, #0
   3edc8:	bne	3ee50 <__assert_fail@plt+0x2c85c>
   3edcc:	bl	122b8 <__ctype_b_loc@plt>
   3edd0:	ldr	r3, [r0]
   3edd4:	cmp	r6, #0
   3edd8:	moveq	r0, #1
   3eddc:	sub	r3, r3, #2
   3ede0:	bne	3ee14 <__assert_fail@plt+0x2c820>
   3ede4:	ldrsh	r2, [r3, #2]!
   3ede8:	asr	r1, r4, #5
   3edec:	and	ip, r4, #31
   3edf0:	add	r4, r4, #1
   3edf4:	cmp	r2, #0
   3edf8:	bge	3ee08 <__assert_fail@plt+0x2c814>
   3edfc:	ldr	r2, [r5, r1, lsl #2]
   3ee00:	orr	r2, r2, r0, lsl ip
   3ee04:	str	r2, [r5, r1, lsl #2]
   3ee08:	cmp	r4, #256	; 0x100
   3ee0c:	bne	3ede4 <__assert_fail@plt+0x2c7f0>
   3ee10:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3ee14:	add	lr, r6, #256	; 0x100
   3ee18:	mov	ip, #1
   3ee1c:	ldrsh	r2, [r3, #2]!
   3ee20:	cmp	r2, #0
   3ee24:	bge	3ee40 <__assert_fail@plt+0x2c84c>
   3ee28:	ldrb	r2, [r6]
   3ee2c:	asr	r0, r2, #5
   3ee30:	and	r2, r2, #31
   3ee34:	ldr	r1, [r5, r0, lsl #2]
   3ee38:	orr	r2, r1, ip, lsl r2
   3ee3c:	str	r2, [r5, r0, lsl #2]
   3ee40:	add	r6, r6, #1
   3ee44:	cmp	lr, r6
   3ee48:	bne	3ee1c <__assert_fail@plt+0x2c828>
   3ee4c:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3ee50:	movw	r1, #26172	; 0x663c
   3ee54:	movt	r1, #5
   3ee58:	mov	r0, r7
   3ee5c:	bl	11f40 <strcmp@plt>
   3ee60:	subs	r4, r0, #0
   3ee64:	bne	3eeec <__assert_fail@plt+0x2c8f8>
   3ee68:	bl	122b8 <__ctype_b_loc@plt>
   3ee6c:	ldr	r3, [r0]
   3ee70:	cmp	r6, #0
   3ee74:	moveq	r0, #1
   3ee78:	sub	r3, r3, #2
   3ee7c:	bne	3eeb0 <__assert_fail@plt+0x2c8bc>
   3ee80:	ldrh	r2, [r3, #2]!
   3ee84:	asr	r1, r4, #5
   3ee88:	and	ip, r4, #31
   3ee8c:	add	r4, r4, #1
   3ee90:	tst	r2, #4
   3ee94:	beq	3eea4 <__assert_fail@plt+0x2c8b0>
   3ee98:	ldr	r2, [r5, r1, lsl #2]
   3ee9c:	orr	r2, r2, r0, lsl ip
   3eea0:	str	r2, [r5, r1, lsl #2]
   3eea4:	cmp	r4, #256	; 0x100
   3eea8:	bne	3ee80 <__assert_fail@plt+0x2c88c>
   3eeac:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3eeb0:	add	lr, r6, #256	; 0x100
   3eeb4:	mov	ip, #1
   3eeb8:	ldrh	r2, [r3, #2]!
   3eebc:	tst	r2, #4
   3eec0:	beq	3eedc <__assert_fail@plt+0x2c8e8>
   3eec4:	ldrb	r2, [r6]
   3eec8:	asr	r0, r2, #5
   3eecc:	and	r2, r2, #31
   3eed0:	ldr	r1, [r5, r0, lsl #2]
   3eed4:	orr	r2, r1, ip, lsl r2
   3eed8:	str	r2, [r5, r0, lsl #2]
   3eedc:	add	r6, r6, #1
   3eee0:	cmp	lr, r6
   3eee4:	bne	3eeb8 <__assert_fail@plt+0x2c8c4>
   3eee8:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3eeec:	mov	r0, r7
   3eef0:	movw	r1, #26180	; 0x6644
   3eef4:	movt	r1, #5
   3eef8:	bl	11f40 <strcmp@plt>
   3eefc:	subs	r4, r0, #0
   3ef00:	movne	r0, #4
   3ef04:	bne	3e8f0 <__assert_fail@plt+0x2c2fc>
   3ef08:	bl	122b8 <__ctype_b_loc@plt>
   3ef0c:	ldr	r3, [r0]
   3ef10:	cmp	r6, #0
   3ef14:	moveq	r0, #1
   3ef18:	sub	r3, r3, #2
   3ef1c:	bne	3ef50 <__assert_fail@plt+0x2c95c>
   3ef20:	ldrh	r2, [r3, #2]!
   3ef24:	asr	r1, r4, #5
   3ef28:	and	ip, r4, #31
   3ef2c:	add	r4, r4, #1
   3ef30:	tst	r2, #4096	; 0x1000
   3ef34:	beq	3ef44 <__assert_fail@plt+0x2c950>
   3ef38:	ldr	r2, [r5, r1, lsl #2]
   3ef3c:	orr	r2, r2, r0, lsl ip
   3ef40:	str	r2, [r5, r1, lsl #2]
   3ef44:	cmp	r4, #256	; 0x100
   3ef48:	bne	3ef20 <__assert_fail@plt+0x2c92c>
   3ef4c:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3ef50:	mov	ip, #1
   3ef54:	ldrh	r2, [r3, #2]!
   3ef58:	tst	r2, #4096	; 0x1000
   3ef5c:	beq	3ef78 <__assert_fail@plt+0x2c984>
   3ef60:	ldrb	r2, [r6, r4]
   3ef64:	asr	r0, r2, #5
   3ef68:	and	r2, r2, #31
   3ef6c:	ldr	r1, [r5, r0, lsl #2]
   3ef70:	orr	r2, r1, ip, lsl r2
   3ef74:	str	r2, [r5, r0, lsl #2]
   3ef78:	add	r4, r4, #1
   3ef7c:	cmp	r4, #256	; 0x100
   3ef80:	bne	3ef54 <__assert_fail@plt+0x2c960>
   3ef84:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3ef88:	add	lr, r6, #256	; 0x100
   3ef8c:	mov	ip, #1
   3ef90:	ldrh	r2, [r3, #2]!
   3ef94:	tst	r2, #16384	; 0x4000
   3ef98:	beq	3efb4 <__assert_fail@plt+0x2c9c0>
   3ef9c:	ldrb	r2, [r6]
   3efa0:	asr	r0, r2, #5
   3efa4:	and	r2, r2, #31
   3efa8:	ldr	r1, [r5, r0, lsl #2]
   3efac:	orr	r2, r1, ip, lsl r2
   3efb0:	str	r2, [r5, r0, lsl #2]
   3efb4:	add	r6, r6, #1
   3efb8:	cmp	lr, r6
   3efbc:	bne	3ef90 <__assert_fail@plt+0x2c99c>
   3efc0:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3efc4:	add	lr, r6, #256	; 0x100
   3efc8:	mov	ip, #1
   3efcc:	ldrh	r2, [r3, #2]!
   3efd0:	tst	r2, #1
   3efd4:	beq	3eff0 <__assert_fail@plt+0x2c9fc>
   3efd8:	ldrb	r2, [r6]
   3efdc:	asr	r0, r2, #5
   3efe0:	and	r2, r2, #31
   3efe4:	ldr	r1, [r5, r0, lsl #2]
   3efe8:	orr	r2, r1, ip, lsl r2
   3efec:	str	r2, [r5, r0, lsl #2]
   3eff0:	add	r6, r6, #1
   3eff4:	cmp	lr, r6
   3eff8:	bne	3efcc <__assert_fail@plt+0x2c9d8>
   3effc:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3f000:	add	lr, r6, #256	; 0x100
   3f004:	mov	ip, #1
   3f008:	ldrh	r2, [r3, #2]!
   3f00c:	tst	r2, #256	; 0x100
   3f010:	beq	3f02c <__assert_fail@plt+0x2ca38>
   3f014:	ldrb	r2, [r6]
   3f018:	asr	r0, r2, #5
   3f01c:	and	r2, r2, #31
   3f020:	ldr	r1, [r5, r0, lsl #2]
   3f024:	orr	r2, r1, ip, lsl r2
   3f028:	str	r2, [r5, r0, lsl #2]
   3f02c:	add	r6, r6, #1
   3f030:	cmp	lr, r6
   3f034:	bne	3f008 <__assert_fail@plt+0x2ca14>
   3f038:	b	3e8ec <__assert_fail@plt+0x2c2f8>
   3f03c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3f040:	strd	r6, [sp, #8]
   3f044:	ldr	r6, [r0]
   3f048:	strd	r8, [sp, #16]
   3f04c:	strd	sl, [sp, #24]
   3f050:	str	lr, [sp, #32]
   3f054:	sub	sp, sp, #316	; 0x13c
   3f058:	ldr	ip, [r6, #92]	; 0x5c
   3f05c:	cmp	ip, #1
   3f060:	ldreq	ip, [r0, #12]
   3f064:	movne	ip, #0
   3f068:	ubfxeq	ip, ip, #22, #1
   3f06c:	str	ip, [sp, #12]
   3f070:	ldr	ip, [r1]
   3f074:	cmp	ip, #0
   3f078:	ble	3f15c <__assert_fail@plt+0x2cb68>
   3f07c:	mov	r4, r3
   3f080:	mov	r3, #255	; 0xff
   3f084:	movt	r3, #32
   3f088:	mov	r5, #0
   3f08c:	str	r2, [sp, #4]
   3f090:	str	r1, [sp, #20]
   3f094:	str	r0, [sp, #24]
   3f098:	str	r3, [sp, #32]
   3f09c:	mov	r3, #1
   3f0a0:	movt	r3, #32
   3f0a4:	str	r3, [sp, #36]	; 0x24
   3f0a8:	b	3f0dc <__assert_fail@plt+0x2cae8>
   3f0ac:	cmp	r7, #3
   3f0b0:	beq	3f300 <__assert_fail@plt+0x2cd0c>
   3f0b4:	cmp	r7, #6
   3f0b8:	beq	3f178 <__assert_fail@plt+0x2cb84>
   3f0bc:	and	r3, r7, #253	; 0xfd
   3f0c0:	cmp	r3, #5
   3f0c4:	beq	3f4b8 <__assert_fail@plt+0x2cec4>
   3f0c8:	cmp	r7, #2
   3f0cc:	beq	3f4d4 <__assert_fail@plt+0x2cee0>
   3f0d0:	add	r5, r5, #1
   3f0d4:	cmp	r5, ip
   3f0d8:	bge	3f15c <__assert_fail@plt+0x2cb68>
   3f0dc:	ldr	r3, [sp, #4]
   3f0e0:	ldr	r1, [r6]
   3f0e4:	ldr	r3, [r3]
   3f0e8:	ldr	r8, [r3, r5, lsl #2]
   3f0ec:	lsl	r3, r8, #3
   3f0f0:	add	r2, r1, r3
   3f0f4:	ldrb	r7, [r2, #4]
   3f0f8:	cmp	r7, #1
   3f0fc:	bne	3f0ac <__assert_fail@plt+0x2cab8>
   3f100:	ldr	r2, [sp, #12]
   3f104:	ldrb	r9, [r1, r8, lsl #3]
   3f108:	cmp	r2, #0
   3f10c:	strb	r7, [r4, r9]
   3f110:	beq	3f12c <__assert_fail@plt+0x2cb38>
   3f114:	str	r3, [sp, #8]
   3f118:	bl	12288 <__ctype_tolower_loc@plt>
   3f11c:	ldr	r2, [r0]
   3f120:	ldr	r3, [sp, #8]
   3f124:	ldr	r2, [r2, r9, lsl #2]
   3f128:	strb	r7, [r4, r2]
   3f12c:	ldr	r2, [sp, #24]
   3f130:	ldr	r2, [r2, #12]
   3f134:	tst	r2, #4194304	; 0x400000
   3f138:	beq	3f148 <__assert_fail@plt+0x2cb54>
   3f13c:	ldr	r2, [r6, #92]	; 0x5c
   3f140:	cmp	r2, #1
   3f144:	bgt	3f3d8 <__assert_fail@plt+0x2cde4>
   3f148:	ldr	r3, [sp, #20]
   3f14c:	add	r5, r5, #1
   3f150:	ldr	ip, [r3]
   3f154:	cmp	r5, ip
   3f158:	blt	3f0dc <__assert_fail@plt+0x2cae8>
   3f15c:	add	sp, sp, #316	; 0x13c
   3f160:	ldrd	r4, [sp]
   3f164:	ldrd	r6, [sp, #8]
   3f168:	ldrd	r8, [sp, #16]
   3f16c:	ldrd	sl, [sp, #24]
   3f170:	add	sp, sp, #32
   3f174:	pop	{pc}		; (ldr pc, [sp], #4)
   3f178:	ldr	r1, [r6, #92]	; 0x5c
   3f17c:	ldr	fp, [r2]
   3f180:	cmp	r1, #1
   3f184:	ble	3f1ac <__assert_fail@plt+0x2cbb8>
   3f188:	ldr	r2, [fp, #36]	; 0x24
   3f18c:	cmp	r2, #0
   3f190:	bne	3f28c <__assert_fail@plt+0x2cc98>
   3f194:	ldrb	r2, [fp, #16]
   3f198:	tst	r2, #1
   3f19c:	bne	3f28c <__assert_fail@plt+0x2cc98>
   3f1a0:	ldr	r2, [fp, #32]
   3f1a4:	cmp	r2, #0
   3f1a8:	bne	3f28c <__assert_fail@plt+0x2cc98>
   3f1ac:	ldr	r2, [fp, #20]
   3f1b0:	cmp	r2, #0
   3f1b4:	ble	3f0d0 <__assert_fail@plt+0x2cadc>
   3f1b8:	str	r5, [sp, #28]
   3f1bc:	mov	r5, fp
   3f1c0:	mov	r7, #0
   3f1c4:	ldr	fp, [sp, #24]
   3f1c8:	add	r8, sp, #56	; 0x38
   3f1cc:	add	r9, sp, #48	; 0x30
   3f1d0:	mov	sl, #1
   3f1d4:	mov	r2, #0
   3f1d8:	mov	r3, #0
   3f1dc:	mov	r0, r8
   3f1e0:	strd	r2, [r9]
   3f1e4:	lsl	r3, r7, #2
   3f1e8:	mov	r2, r9
   3f1ec:	ldr	r1, [r5]
   3f1f0:	str	r3, [sp, #8]
   3f1f4:	ldr	r1, [r1, r7, lsl #2]
   3f1f8:	add	r7, r7, #1
   3f1fc:	bl	11ef8 <wcrtomb@plt>
   3f200:	cmn	r0, #1
   3f204:	beq	3f234 <__assert_fail@plt+0x2cc40>
   3f208:	ldr	r3, [sp, #12]
   3f20c:	ldrb	r2, [sp, #56]	; 0x38
   3f210:	cmp	r3, #0
   3f214:	strb	sl, [r4, r2]
   3f218:	str	r2, [sp, #16]
   3f21c:	beq	3f234 <__assert_fail@plt+0x2cc40>
   3f220:	bl	12288 <__ctype_tolower_loc@plt>
   3f224:	ldr	r1, [r0]
   3f228:	ldr	r2, [sp, #16]
   3f22c:	ldr	r2, [r1, r2, lsl #2]
   3f230:	strb	sl, [r4, r2]
   3f234:	ldr	r2, [fp, #12]
   3f238:	tst	r2, #4194304	; 0x400000
   3f23c:	beq	3f278 <__assert_fail@plt+0x2cc84>
   3f240:	ldr	r2, [r6, #92]	; 0x5c
   3f244:	cmp	r2, #1
   3f248:	ble	3f278 <__assert_fail@plt+0x2cc84>
   3f24c:	ldr	r2, [r5]
   3f250:	ldr	r3, [sp, #8]
   3f254:	ldr	r0, [r2, r3]
   3f258:	bl	12054 <towlower@plt>
   3f25c:	mov	r1, r0
   3f260:	mov	r2, r9
   3f264:	mov	r0, r8
   3f268:	bl	11ef8 <wcrtomb@plt>
   3f26c:	cmn	r0, #1
   3f270:	ldrbne	r2, [sp, #56]	; 0x38
   3f274:	strbne	sl, [r4, r2]
   3f278:	ldr	r2, [r5, #20]
   3f27c:	cmp	r7, r2
   3f280:	blt	3f1d4 <__assert_fail@plt+0x2cbe0>
   3f284:	ldr	r5, [sp, #28]
   3f288:	b	3f148 <__assert_fail@plt+0x2cb54>
   3f28c:	mov	r3, #0
   3f290:	add	r8, sp, #56	; 0x38
   3f294:	add	r9, sp, #48	; 0x30
   3f298:	mov	r7, #1
   3f29c:	strb	r3, [sp, #48]	; 0x30
   3f2a0:	mov	r0, #0
   3f2a4:	mov	r1, #0
   3f2a8:	mov	r3, r8
   3f2ac:	mov	r2, #1
   3f2b0:	strd	r0, [r8]
   3f2b4:	mov	r1, r9
   3f2b8:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   3f2bc:	cmn	r0, #2
   3f2c0:	beq	3f2e0 <__assert_fail@plt+0x2ccec>
   3f2c4:	ldrb	r3, [sp, #48]	; 0x30
   3f2c8:	add	r3, r3, #1
   3f2cc:	uxtb	r3, r3
   3f2d0:	cmp	r3, #0
   3f2d4:	strb	r3, [sp, #48]	; 0x30
   3f2d8:	bne	3f2a0 <__assert_fail@plt+0x2ccac>
   3f2dc:	b	3f148 <__assert_fail@plt+0x2cb54>
   3f2e0:	ldrb	r2, [sp, #48]	; 0x30
   3f2e4:	add	r3, r2, #1
   3f2e8:	strb	r7, [r4, r2]
   3f2ec:	uxtb	r3, r3
   3f2f0:	cmp	r3, #0
   3f2f4:	strb	r3, [sp, #48]	; 0x30
   3f2f8:	bne	3f2a0 <__assert_fail@plt+0x2ccac>
   3f2fc:	b	3f148 <__assert_fail@plt+0x2cb54>
   3f300:	mov	sl, #0
   3f304:	mov	fp, #32
   3f308:	str	r3, [sp, #8]
   3f30c:	str	r6, [sp, #16]
   3f310:	mov	r6, fp
   3f314:	mov	fp, sl
   3f318:	str	r5, [sp, #28]
   3f31c:	mov	r5, sl
   3f320:	mov	r9, #1
   3f324:	ldr	sl, [sp, #12]
   3f328:	mov	r0, r1
   3f32c:	cmp	sl, #0
   3f330:	lsl	r7, fp, #3
   3f334:	ldr	r3, [sp, #8]
   3f338:	ldr	r0, [r0, r3]
   3f33c:	ldr	r8, [r0, fp]
   3f340:	bne	3f384 <__assert_fail@plt+0x2cd90>
   3f344:	mov	r0, sl
   3f348:	sub	lr, r4, r5
   3f34c:	lsr	r3, r8, r0
   3f350:	tst	r3, #1
   3f354:	strbne	r9, [lr, r0]
   3f358:	add	r0, r0, #1
   3f35c:	cmp	r0, #32
   3f360:	bne	3f34c <__assert_fail@plt+0x2cd58>
   3f364:	add	fp, fp, #4
   3f368:	add	r6, r6, #32
   3f36c:	cmp	fp, #32
   3f370:	sub	r5, r5, #32
   3f374:	beq	3f3cc <__assert_fail@plt+0x2cdd8>
   3f378:	ldr	r3, [sp, #16]
   3f37c:	ldr	r0, [r3]
   3f380:	b	3f32c <__assert_fail@plt+0x2cd38>
   3f384:	add	r3, r5, r7
   3f388:	add	r2, r7, #128	; 0x80
   3f38c:	lsr	r3, r8, r3
   3f390:	add	r1, r4, r7
   3f394:	tst	r3, #1
   3f398:	beq	3f3bc <__assert_fail@plt+0x2cdc8>
   3f39c:	cmp	r2, #384	; 0x180
   3f3a0:	strb	r9, [r4, r7]
   3f3a4:	bcs	3f3b8 <__assert_fail@plt+0x2cdc4>
   3f3a8:	bl	12288 <__ctype_tolower_loc@plt>
   3f3ac:	ldr	r3, [r0]
   3f3b0:	ldr	r1, [r3, r7, lsl #2]
   3f3b4:	add	r1, r4, r1
   3f3b8:	strb	r9, [r1]
   3f3bc:	add	r7, r7, #1
   3f3c0:	cmp	r7, r6
   3f3c4:	bne	3f384 <__assert_fail@plt+0x2cd90>
   3f3c8:	b	3f364 <__assert_fail@plt+0x2cd70>
   3f3cc:	ldr	r6, [sp, #16]
   3f3d0:	ldr	r5, [sp, #28]
   3f3d4:	b	3f148 <__assert_fail@plt+0x2cb54>
   3f3d8:	ldr	r1, [r6]
   3f3dc:	add	r2, r8, #1
   3f3e0:	ldrb	r0, [r1, r8, lsl #3]
   3f3e4:	strb	r0, [sp, #56]	; 0x38
   3f3e8:	ldr	r0, [r6, #8]
   3f3ec:	cmp	r0, r2
   3f3f0:	bls	3f4f8 <__assert_fail@plt+0x2cf04>
   3f3f4:	add	r3, r3, #8
   3f3f8:	ldr	r0, [sp, #32]
   3f3fc:	add	r3, r1, r3
   3f400:	ldr	r1, [r3, #4]
   3f404:	and	r1, r1, r0
   3f408:	ldr	r0, [sp, #36]	; 0x24
   3f40c:	cmp	r1, r0
   3f410:	bne	3f4f8 <__assert_fail@plt+0x2cf04>
   3f414:	mov	ip, r0
   3f418:	add	r7, sp, #57	; 0x39
   3f41c:	ldr	r0, [sp, #32]
   3f420:	b	3f43c <__assert_fail@plt+0x2ce48>
   3f424:	ldr	r3, [r6]
   3f428:	add	r3, r3, r2, lsl #3
   3f42c:	ldr	r1, [r3, #4]
   3f430:	and	r1, r1, r0
   3f434:	cmp	r1, ip
   3f438:	bne	3f454 <__assert_fail@plt+0x2ce60>
   3f43c:	ldrb	r3, [r3]
   3f440:	add	r2, r2, #1
   3f444:	strb	r3, [r7], #1
   3f448:	ldr	r3, [r6, #8]
   3f44c:	cmp	r3, r2
   3f450:	bhi	3f424 <__assert_fail@plt+0x2ce30>
   3f454:	add	r8, sp, #56	; 0x38
   3f458:	sub	r7, r7, r8
   3f45c:	add	r9, sp, #48	; 0x30
   3f460:	mov	sl, #0
   3f464:	mov	fp, #0
   3f468:	mov	r2, r7
   3f46c:	mov	r3, r9
   3f470:	mov	r1, r8
   3f474:	add	r0, sp, #44	; 0x2c
   3f478:	strd	sl, [sp, #48]	; 0x30
   3f47c:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   3f480:	cmp	r0, r7
   3f484:	bne	3f148 <__assert_fail@plt+0x2cb54>
   3f488:	ldr	r0, [sp, #44]	; 0x2c
   3f48c:	bl	12054 <towlower@plt>
   3f490:	mov	r1, r0
   3f494:	mov	r2, r9
   3f498:	mov	r0, r8
   3f49c:	bl	11ef8 <wcrtomb@plt>
   3f4a0:	cmn	r0, #1
   3f4a4:	beq	3f148 <__assert_fail@plt+0x2cb54>
   3f4a8:	ldrb	r3, [sp, #56]	; 0x38
   3f4ac:	mov	r2, #1
   3f4b0:	strb	r2, [r4, r3]
   3f4b4:	b	3f148 <__assert_fail@plt+0x2cb54>
   3f4b8:	mov	r0, r4
   3f4bc:	mov	r2, #256	; 0x100
   3f4c0:	mov	r1, #1
   3f4c4:	bl	12378 <memset@plt>
   3f4c8:	cmp	r7, #2
   3f4cc:	bne	3f15c <__assert_fail@plt+0x2cb68>
   3f4d0:	b	3f4e4 <__assert_fail@plt+0x2cef0>
   3f4d4:	mov	r0, r4
   3f4d8:	mov	r2, #256	; 0x100
   3f4dc:	mov	r1, #1
   3f4e0:	bl	12378 <memset@plt>
   3f4e4:	ldr	r2, [sp, #24]
   3f4e8:	ldrb	r3, [r2, #28]
   3f4ec:	orr	r3, r3, #1
   3f4f0:	strb	r3, [r2, #28]
   3f4f4:	b	3f15c <__assert_fail@plt+0x2cb68>
   3f4f8:	add	r8, sp, #56	; 0x38
   3f4fc:	b	3f45c <__assert_fail@plt+0x2ce68>
   3f500:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3f504:	ldr	r3, [r1, #56]	; 0x38
   3f508:	strd	r6, [sp, #8]
   3f50c:	mov	r6, r0
   3f510:	ldr	r7, [r1, #40]	; 0x28
   3f514:	strd	r8, [sp, #16]
   3f518:	str	sl, [sp, #24]
   3f51c:	str	lr, [sp, #28]
   3f520:	sub	sp, sp, #8
   3f524:	cmp	r3, r7
   3f528:	movle	r3, #2
   3f52c:	movle	r0, #0
   3f530:	strble	r3, [r6, #4]
   3f534:	ble	3f7fc <__assert_fail@plt+0x2d208>
   3f538:	ldr	sl, [r1, #4]
   3f53c:	mov	r8, r2
   3f540:	mov	r5, r1
   3f544:	ldrb	r3, [r6, #6]
   3f548:	ldr	r2, [r1, #80]	; 0x50
   3f54c:	ldrb	r4, [sl, r7]
   3f550:	bic	r3, r3, #96	; 0x60
   3f554:	cmp	r2, #1
   3f558:	strb	r4, [r6]
   3f55c:	strb	r3, [r6, #6]
   3f560:	ble	3f818 <__assert_fail@plt+0x2d224>
   3f564:	ldr	r3, [r1, #28]
   3f568:	cmp	r7, r3
   3f56c:	beq	3f580 <__assert_fail@plt+0x2cf8c>
   3f570:	ldr	r3, [r1, #8]
   3f574:	ldr	r3, [r3, r7, lsl #2]
   3f578:	cmn	r3, #1
   3f57c:	beq	3fa60 <__assert_fail@plt+0x2d46c>
   3f580:	cmp	r4, #92	; 0x5c
   3f584:	beq	3f854 <__assert_fail@plt+0x2d260>
   3f588:	ldr	r3, [r5, #8]
   3f58c:	mov	r2, #1
   3f590:	strb	r2, [r6, #4]
   3f594:	ldr	r9, [r3, r7, lsl #2]
   3f598:	mov	r0, r9
   3f59c:	sub	r9, r9, #95	; 0x5f
   3f5a0:	bl	12354 <iswalnum@plt>
   3f5a4:	ldrb	r3, [r6, #6]
   3f5a8:	clz	r9, r9
   3f5ac:	cmp	r0, #0
   3f5b0:	lsr	r9, r9, #5
   3f5b4:	movne	r9, #1
   3f5b8:	bfi	r3, r9, #6, #1
   3f5bc:	strb	r3, [r6, #6]
   3f5c0:	sub	r4, r4, #10
   3f5c4:	cmp	r4, #115	; 0x73
   3f5c8:	ldrls	pc, [pc, r4, lsl #2]
   3f5cc:	b	3fa58 <__assert_fail@plt+0x2d464>
   3f5d0:			; <UNDEFINED> instruction: 0x0003fbb8
   3f5d4:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f5d8:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f5dc:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f5e0:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f5e4:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f5e8:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f5ec:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f5f0:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f5f4:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f5f8:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f5fc:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f600:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f604:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f608:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f60c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f610:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f614:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f618:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f61c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f620:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f624:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f628:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f62c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f630:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f634:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f638:	andeq	pc, r3, r0, lsr #15
   3f63c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f640:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f644:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f648:	andeq	pc, r3, r4, lsr fp	; <UNPREDICTABLE>
   3f64c:	andeq	pc, r3, ip, asr #22
   3f650:	andeq	pc, r3, r4, lsr #22
   3f654:	andeq	pc, r3, r4, ror #22
   3f658:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f65c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f660:	andeq	pc, r3, ip, lsr #21
   3f664:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f668:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f66c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f670:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f674:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f678:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f67c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f680:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f684:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f688:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f68c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f690:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f694:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f698:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f69c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6a0:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6a4:			; <UNDEFINED> instruction: 0x0003fabc
   3f6a8:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6ac:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6b0:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6b4:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6b8:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6bc:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6c0:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6c4:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6c8:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6cc:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6d0:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6d4:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6d8:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6dc:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6e0:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6e4:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6e8:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6ec:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6f0:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6f4:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6f8:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f6fc:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f700:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f704:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f708:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f70c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f710:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f714:	ldrdeq	pc, [r3], -r8
   3f718:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f71c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f720:	andeq	pc, r3, r8, ror #21
   3f724:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f728:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f72c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f730:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f734:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f738:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f73c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f740:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f744:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f748:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f74c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f750:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f754:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f758:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f75c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f760:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f764:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f768:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f76c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f770:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f774:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f778:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f77c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f780:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f784:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f788:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f78c:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f790:	andeq	pc, r3, r8, asr sl	; <UNPREDICTABLE>
   3f794:	andeq	pc, r3, r0, lsl #23
   3f798:	muleq	r3, ip, fp
   3f79c:	andeq	pc, r3, r4, asr #23
   3f7a0:	tst	r8, #8
   3f7a4:	bne	3f7e8 <__assert_fail@plt+0x2d1f4>
   3f7a8:	ldr	r3, [r5, #48]	; 0x30
   3f7ac:	add	r7, r7, #1
   3f7b0:	cmp	r7, r3
   3f7b4:	beq	3f7e8 <__assert_fail@plt+0x2d1f4>
   3f7b8:	mov	r2, r8
   3f7bc:	mov	r1, r5
   3f7c0:	str	r7, [r5, #40]	; 0x28
   3f7c4:	mov	r0, sp
   3f7c8:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   3f7cc:	ldrb	r2, [sp, #4]
   3f7d0:	ldr	r3, [r5, #40]	; 0x28
   3f7d4:	sub	r2, r2, #9
   3f7d8:	cmp	r2, #1
   3f7dc:	sub	r3, r3, #1
   3f7e0:	str	r3, [r5, #40]	; 0x28
   3f7e4:	bhi	3fa58 <__assert_fail@plt+0x2d464>
   3f7e8:	mov	r3, #12
   3f7ec:	mov	r2, #32
   3f7f0:	mov	r0, #1
   3f7f4:	str	r2, [r6]
   3f7f8:	strb	r3, [r6, #4]
   3f7fc:	add	sp, sp, #8
   3f800:	ldrd	r4, [sp]
   3f804:	ldrd	r6, [sp, #8]
   3f808:	ldrd	r8, [sp, #16]
   3f80c:	ldr	sl, [sp, #24]
   3f810:	add	sp, sp, #28
   3f814:	pop	{pc}		; (ldr pc, [sp], #4)
   3f818:	cmp	r4, #92	; 0x5c
   3f81c:	beq	3f854 <__assert_fail@plt+0x2d260>
   3f820:	mov	r3, #1
   3f824:	strb	r3, [r6, #4]
   3f828:	bl	122b8 <__ctype_b_loc@plt>
   3f82c:	ldr	r1, [r0]
   3f830:	lsl	r3, r4, #1
   3f834:	ldrb	r2, [r6, #6]
   3f838:	ldrh	r3, [r1, r3]
   3f83c:	ubfx	r3, r3, #3, #1
   3f840:	cmp	r4, #95	; 0x5f
   3f844:	orreq	r3, r3, #1
   3f848:	bfi	r2, r3, #6, #1
   3f84c:	strb	r2, [r6, #6]
   3f850:	b	3f5c0 <__assert_fail@plt+0x2cfcc>
   3f854:	ldr	r1, [r5, #48]	; 0x30
   3f858:	add	r3, r7, #1
   3f85c:	cmp	r3, r1
   3f860:	blt	3f874 <__assert_fail@plt+0x2d280>
   3f864:	mov	r3, #36	; 0x24
   3f868:	mov	r0, #1
   3f86c:	strb	r3, [r6, #4]
   3f870:	b	3f7fc <__assert_fail@plt+0x2d208>
   3f874:	ldrb	r1, [r5, #75]	; 0x4b
   3f878:	cmp	r1, #0
   3f87c:	bne	3fde4 <__assert_fail@plt+0x2d7f0>
   3f880:	ldrb	r7, [sl, r3]
   3f884:	mov	r1, #1
   3f888:	strb	r7, [r6]
   3f88c:	cmp	r2, r1
   3f890:	strb	r1, [r6, #4]
   3f894:	ble	3fa80 <__assert_fail@plt+0x2d48c>
   3f898:	ldr	r1, [r5, #8]
   3f89c:	add	r1, r1, r3, lsl #2
   3f8a0:	ldr	r4, [r1]
   3f8a4:	mov	r0, r4
   3f8a8:	sub	r4, r4, #95	; 0x5f
   3f8ac:	bl	12354 <iswalnum@plt>
   3f8b0:	ldrb	r3, [r6, #6]
   3f8b4:	clz	r4, r4
   3f8b8:	cmp	r0, #0
   3f8bc:	lsr	r4, r4, #5
   3f8c0:	movne	r4, #1
   3f8c4:	bfi	r3, r4, #6, #1
   3f8c8:	strb	r3, [r6, #6]
   3f8cc:	sub	r3, r7, #39	; 0x27
   3f8d0:	cmp	r3, #86	; 0x56
   3f8d4:	ldrls	pc, [pc, r3, lsl #2]
   3f8d8:	b	3fbf8 <__assert_fail@plt+0x2d604>
   3f8dc:	andeq	pc, r3, ip, lsr #27
   3f8e0:	andeq	pc, r3, ip, asr #27
   3f8e4:	muleq	r3, r4, sp
   3f8e8:	strdeq	pc, [r3], -r8
   3f8ec:	andeq	pc, r3, r4, ror sp	; <UNPREDICTABLE>
   3f8f0:	strdeq	pc, [r3], -r8
   3f8f4:	strdeq	pc, [r3], -r8
   3f8f8:	strdeq	pc, [r3], -r8
   3f8fc:	strdeq	pc, [r3], -r8
   3f900:	strdeq	pc, [r3], -r8
   3f904:	andeq	pc, r3, r4, asr sp	; <UNPREDICTABLE>
   3f908:	andeq	pc, r3, r4, asr sp	; <UNPREDICTABLE>
   3f90c:	andeq	pc, r3, r4, asr sp	; <UNPREDICTABLE>
   3f910:	andeq	pc, r3, r4, asr sp	; <UNPREDICTABLE>
   3f914:	andeq	pc, r3, r4, asr sp	; <UNPREDICTABLE>
   3f918:	andeq	pc, r3, r4, asr sp	; <UNPREDICTABLE>
   3f91c:	andeq	pc, r3, r4, asr sp	; <UNPREDICTABLE>
   3f920:	andeq	pc, r3, r4, asr sp	; <UNPREDICTABLE>
   3f924:	andeq	pc, r3, r4, asr sp	; <UNPREDICTABLE>
   3f928:	strdeq	pc, [r3], -r8
   3f92c:	strdeq	pc, [r3], -r8
   3f930:	andeq	pc, r3, r4, lsr sp	; <UNPREDICTABLE>
   3f934:	strdeq	pc, [r3], -r8
   3f938:	andeq	pc, r3, r4, lsl sp	; <UNPREDICTABLE>
   3f93c:	strdeq	pc, [r3], -r4
   3f940:	strdeq	pc, [r3], -r8
   3f944:	strdeq	pc, [r3], -r8
   3f948:	ldrdeq	pc, [r3], -r4
   3f94c:	strdeq	pc, [r3], -r8
   3f950:	strdeq	pc, [r3], -r8
   3f954:	strdeq	pc, [r3], -r8
   3f958:	strdeq	pc, [r3], -r8
   3f95c:	strdeq	pc, [r3], -r8
   3f960:	strdeq	pc, [r3], -r8
   3f964:	strdeq	pc, [r3], -r8
   3f968:	strdeq	pc, [r3], -r8
   3f96c:	strdeq	pc, [r3], -r8
   3f970:	strdeq	pc, [r3], -r8
   3f974:	strdeq	pc, [r3], -r8
   3f978:	strdeq	pc, [r3], -r8
   3f97c:	strdeq	pc, [r3], -r8
   3f980:	strdeq	pc, [r3], -r8
   3f984:	strdeq	pc, [r3], -r8
   3f988:	strdeq	pc, [r3], -r8
   3f98c:			; <UNDEFINED> instruction: 0x0003fcbc
   3f990:	strdeq	pc, [r3], -r8
   3f994:	strdeq	pc, [r3], -r8
   3f998:	strdeq	pc, [r3], -r8
   3f99c:	andeq	pc, r3, r4, lsr #25
   3f9a0:	strdeq	pc, [r3], -r8
   3f9a4:	strdeq	pc, [r3], -r8
   3f9a8:	strdeq	pc, [r3], -r8
   3f9ac:	strdeq	pc, [r3], -r8
   3f9b0:	strdeq	pc, [r3], -r8
   3f9b4:	strdeq	pc, [r3], -r8
   3f9b8:	strdeq	pc, [r3], -r8
   3f9bc:	strdeq	pc, [r3], -r8
   3f9c0:	andeq	pc, r3, r4, lsl #25
   3f9c4:	strdeq	pc, [r3], -r8
   3f9c8:	andeq	pc, r3, r4, ror #24
   3f9cc:	strdeq	pc, [r3], -r8
   3f9d0:	strdeq	pc, [r3], -r8
   3f9d4:	strdeq	pc, [r3], -r8
   3f9d8:	strdeq	pc, [r3], -r8
   3f9dc:	strdeq	pc, [r3], -r8
   3f9e0:	strdeq	pc, [r3], -r8
   3f9e4:	strdeq	pc, [r3], -r8
   3f9e8:	strdeq	pc, [r3], -r8
   3f9ec:	strdeq	pc, [r3], -r8
   3f9f0:	strdeq	pc, [r3], -r8
   3f9f4:	strdeq	pc, [r3], -r8
   3f9f8:	strdeq	pc, [r3], -r8
   3f9fc:	strdeq	pc, [r3], -r8
   3fa00:	strdeq	pc, [r3], -r8
   3fa04:	strdeq	pc, [r3], -r8
   3fa08:	strdeq	pc, [r3], -r8
   3fa0c:	andeq	pc, r3, ip, asr #24
   3fa10:	strdeq	pc, [r3], -r8
   3fa14:	strdeq	pc, [r3], -r8
   3fa18:	strdeq	pc, [r3], -r8
   3fa1c:	andeq	pc, r3, r4, lsr ip	; <UNPREDICTABLE>
   3fa20:	strdeq	pc, [r3], -r8
   3fa24:	strdeq	pc, [r3], -r8
   3fa28:	strdeq	pc, [r3], -r8
   3fa2c:	andeq	pc, r3, r8, lsl ip	; <UNPREDICTABLE>
   3fa30:	andeq	pc, r3, r0, lsl #24
   3fa34:	andeq	pc, r3, r0, ror #23
   3fa38:	add	r7, sl, r7
   3fa3c:	eor	r3, r8, #2048	; 0x800
   3fa40:	ldrb	r2, [r7, #-1]
   3fa44:	ubfx	r3, r3, #11, #1
   3fa48:	cmp	r2, #10
   3fa4c:	orrne	r3, r3, #1
   3fa50:	cmp	r3, #0
   3fa54:	beq	3fb0c <__assert_fail@plt+0x2d518>
   3fa58:	mov	r0, #1
   3fa5c:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fa60:	ldr	r3, [r6, #4]
   3fa64:	mov	r0, #1
   3fa68:	bic	r3, r3, #2097152	; 0x200000
   3fa6c:	bic	r3, r3, #255	; 0xff
   3fa70:	orr	r3, r3, #2097152	; 0x200000
   3fa74:	orr	r3, r3, r0
   3fa78:	str	r3, [r6, #4]
   3fa7c:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fa80:	bl	122b8 <__ctype_b_loc@plt>
   3fa84:	ldr	r1, [r0]
   3fa88:	lsl	r3, r7, #1
   3fa8c:	ldrb	r2, [r6, #6]
   3fa90:	ldrh	r3, [r1, r3]
   3fa94:	ubfx	r3, r3, #3, #1
   3fa98:	cmp	r7, #95	; 0x5f
   3fa9c:	orreq	r3, r3, #1
   3faa0:	bfi	r2, r3, #6, #1
   3faa4:	strb	r2, [r6, #6]
   3faa8:	b	3f8cc <__assert_fail@plt+0x2d2d8>
   3faac:	mov	r3, #5
   3fab0:	mov	r0, #1
   3fab4:	strb	r3, [r6, #4]
   3fab8:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fabc:	movw	r3, #1026	; 0x402
   3fac0:	tst	r8, r3
   3fac4:	bne	3fa58 <__assert_fail@plt+0x2d464>
   3fac8:	mov	r3, #19
   3facc:	mov	r0, #1
   3fad0:	strb	r3, [r6, #4]
   3fad4:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fad8:	mov	r3, #20
   3fadc:	mov	r0, #1
   3fae0:	strb	r3, [r6, #4]
   3fae4:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fae8:	mov	r3, #8
   3faec:	movt	r3, #128	; 0x80
   3faf0:	tst	r8, r3
   3faf4:	moveq	r3, #1
   3faf8:	movne	r3, #0
   3fafc:	cmp	r7, #0
   3fb00:	moveq	r3, #0
   3fb04:	cmp	r3, #0
   3fb08:	bne	3fa38 <__assert_fail@plt+0x2d444>
   3fb0c:	mov	r3, #12
   3fb10:	mov	r2, #16
   3fb14:	mov	r0, #1
   3fb18:	str	r2, [r6]
   3fb1c:	strb	r3, [r6, #4]
   3fb20:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fb24:	mov	r3, #11
   3fb28:	mov	r0, #1
   3fb2c:	strb	r3, [r6, #4]
   3fb30:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fb34:	tst	r8, #8192	; 0x2000
   3fb38:	beq	3fa58 <__assert_fail@plt+0x2d464>
   3fb3c:	mov	r3, #8
   3fb40:	mov	r0, #1
   3fb44:	strb	r3, [r6, #4]
   3fb48:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fb4c:	tst	r8, #8192	; 0x2000
   3fb50:	beq	3fa58 <__assert_fail@plt+0x2d464>
   3fb54:	mov	r3, #9
   3fb58:	mov	r0, #1
   3fb5c:	strb	r3, [r6, #4]
   3fb60:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fb64:	movw	r3, #1026	; 0x402
   3fb68:	tst	r8, r3
   3fb6c:	bne	3fa58 <__assert_fail@plt+0x2d464>
   3fb70:	mov	r3, #18
   3fb74:	mov	r0, #1
   3fb78:	strb	r3, [r6, #4]
   3fb7c:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fb80:	and	r2, r8, #4608	; 0x1200
   3fb84:	cmp	r2, #4608	; 0x1200
   3fb88:	moveq	r3, #23
   3fb8c:	moveq	r0, #1
   3fb90:	strbeq	r3, [r6, #4]
   3fb94:	bne	3fa58 <__assert_fail@plt+0x2d464>
   3fb98:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fb9c:	and	r2, r8, #33792	; 0x8400
   3fba0:	cmp	r2, #32768	; 0x8000
   3fba4:	bne	3fa58 <__assert_fail@plt+0x2d464>
   3fba8:	mov	r3, #10
   3fbac:	mov	r0, #1
   3fbb0:	strb	r3, [r6, #4]
   3fbb4:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fbb8:	tst	r8, #2048	; 0x800
   3fbbc:	beq	3fa58 <__assert_fail@plt+0x2d464>
   3fbc0:	b	3fba8 <__assert_fail@plt+0x2d5b4>
   3fbc4:	and	r2, r8, #4608	; 0x1200
   3fbc8:	cmp	r2, #4608	; 0x1200
   3fbcc:	moveq	r3, #24
   3fbd0:	moveq	r0, #1
   3fbd4:	strbeq	r3, [r6, #4]
   3fbd8:	bne	3fa58 <__assert_fail@plt+0x2d464>
   3fbdc:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fbe0:	and	r2, r8, #4608	; 0x1200
   3fbe4:	cmp	r2, #512	; 0x200
   3fbe8:	moveq	r3, #24
   3fbec:	moveq	r0, #2
   3fbf0:	strbeq	r3, [r6, #4]
   3fbf4:	beq	3f7fc <__assert_fail@plt+0x2d208>
   3fbf8:	mov	r0, #2
   3fbfc:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fc00:	tst	r8, #33792	; 0x8400
   3fc04:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fc08:	mov	r3, #10
   3fc0c:	mov	r0, #2
   3fc10:	strb	r3, [r6, #4]
   3fc14:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fc18:	and	r2, r8, #4608	; 0x1200
   3fc1c:	cmp	r2, #512	; 0x200
   3fc20:	moveq	r3, #23
   3fc24:	moveq	r0, #2
   3fc28:	strbeq	r3, [r6, #4]
   3fc2c:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fc30:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fc34:	tst	r8, #524288	; 0x80000
   3fc38:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fc3c:	mov	r3, #32
   3fc40:	mov	r0, #2
   3fc44:	strb	r3, [r6, #4]
   3fc48:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fc4c:	tst	r8, #524288	; 0x80000
   3fc50:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fc54:	mov	r3, #34	; 0x22
   3fc58:	mov	r0, #2
   3fc5c:	strb	r3, [r6, #4]
   3fc60:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fc64:	tst	r8, #524288	; 0x80000
   3fc68:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fc6c:	mov	r3, #12
   3fc70:	mov	r2, #256	; 0x100
   3fc74:	mov	r0, #2
   3fc78:	str	r2, [r6]
   3fc7c:	strb	r3, [r6, #4]
   3fc80:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fc84:	tst	r8, #524288	; 0x80000
   3fc88:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fc8c:	mov	r3, #12
   3fc90:	mov	r2, #64	; 0x40
   3fc94:	mov	r0, #2
   3fc98:	str	r2, [r6]
   3fc9c:	strb	r3, [r6, #4]
   3fca0:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fca4:	tst	r8, #524288	; 0x80000
   3fca8:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fcac:	mov	r3, #33	; 0x21
   3fcb0:	mov	r0, #2
   3fcb4:	strb	r3, [r6, #4]
   3fcb8:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fcbc:	tst	r8, #524288	; 0x80000
   3fcc0:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fcc4:	mov	r3, #35	; 0x23
   3fcc8:	mov	r0, #2
   3fccc:	strb	r3, [r6, #4]
   3fcd0:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fcd4:	tst	r8, #524288	; 0x80000
   3fcd8:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fcdc:	mov	r3, #12
   3fce0:	mov	r2, #512	; 0x200
   3fce4:	mov	r0, #2
   3fce8:	str	r2, [r6]
   3fcec:	strb	r3, [r6, #4]
   3fcf0:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fcf4:	movw	r2, #1026	; 0x402
   3fcf8:	and	r2, r2, r8
   3fcfc:	cmp	r2, #2
   3fd00:	moveq	r3, #19
   3fd04:	moveq	r0, r2
   3fd08:	strbeq	r3, [r6, #4]
   3fd0c:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fd10:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fd14:	tst	r8, #524288	; 0x80000
   3fd18:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fd1c:	mov	r3, #12
   3fd20:	mov	r2, #9
   3fd24:	mov	r0, #2
   3fd28:	str	r2, [r6]
   3fd2c:	strb	r3, [r6, #4]
   3fd30:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fd34:	tst	r8, #524288	; 0x80000
   3fd38:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fd3c:	mov	r3, #12
   3fd40:	mov	r2, #6
   3fd44:	mov	r0, #2
   3fd48:	str	r2, [r6]
   3fd4c:	strb	r3, [r6, #4]
   3fd50:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fd54:	tst	r8, #16384	; 0x4000
   3fd58:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fd5c:	sub	r7, r7, #49	; 0x31
   3fd60:	mov	r3, #4
   3fd64:	mov	r0, #2
   3fd68:	str	r7, [r6]
   3fd6c:	strb	r3, [r6, #4]
   3fd70:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fd74:	movw	r2, #1026	; 0x402
   3fd78:	and	r2, r2, r8
   3fd7c:	cmp	r2, #2
   3fd80:	moveq	r3, #18
   3fd84:	moveq	r0, r2
   3fd88:	strbeq	r3, [r6, #4]
   3fd8c:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fd90:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fd94:	tst	r8, #8192	; 0x2000
   3fd98:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fd9c:	mov	r3, #9
   3fda0:	mov	r0, #2
   3fda4:	strb	r3, [r6, #4]
   3fda8:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fdac:	tst	r8, #524288	; 0x80000
   3fdb0:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fdb4:	mov	r3, #12
   3fdb8:	mov	r2, #128	; 0x80
   3fdbc:	mov	r0, #2
   3fdc0:	str	r2, [r6]
   3fdc4:	strb	r3, [r6, #4]
   3fdc8:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fdcc:	tst	r8, #8192	; 0x2000
   3fdd0:	bne	3fbf8 <__assert_fail@plt+0x2d604>
   3fdd4:	mov	r3, #8
   3fdd8:	mov	r0, #2
   3fddc:	strb	r3, [r6, #4]
   3fde0:	b	3f7fc <__assert_fail@plt+0x2d208>
   3fde4:	cmp	r2, #1
   3fde8:	ble	3fe1c <__assert_fail@plt+0x2d828>
   3fdec:	ldr	r1, [r5, #8]
   3fdf0:	ldr	r0, [r1, r3, lsl #2]
   3fdf4:	add	r1, r1, r3, lsl #2
   3fdf8:	cmn	r0, #1
   3fdfc:	beq	3fe58 <__assert_fail@plt+0x2d864>
   3fe00:	ldr	r0, [r5, #28]
   3fe04:	add	r7, r7, #2
   3fe08:	cmp	r0, r7
   3fe0c:	beq	3fe1c <__assert_fail@plt+0x2d828>
   3fe10:	ldr	r0, [r1, #4]
   3fe14:	cmn	r0, #1
   3fe18:	beq	3fe58 <__assert_fail@plt+0x2d864>
   3fe1c:	ldrb	r0, [r5, #76]	; 0x4c
   3fe20:	ldr	r1, [r5]
   3fe24:	ldr	ip, [r5, #24]
   3fe28:	cmp	r0, #0
   3fe2c:	beq	3fe4c <__assert_fail@plt+0x2d858>
   3fe30:	ldr	r0, [r5, #12]
   3fe34:	add	r1, r1, ip
   3fe38:	ldr	r0, [r0, r3, lsl #2]
   3fe3c:	ldrb	r7, [r1, r0]
   3fe40:	tst	r7, #128	; 0x80
   3fe44:	beq	3f884 <__assert_fail@plt+0x2d290>
   3fe48:	b	3f880 <__assert_fail@plt+0x2d28c>
   3fe4c:	add	r1, r1, r3
   3fe50:	ldrb	r7, [r1, ip]
   3fe54:	b	3f884 <__assert_fail@plt+0x2d290>
   3fe58:	ldrb	r7, [sl, r3]
   3fe5c:	mov	r3, #1
   3fe60:	strb	r7, [r6]
   3fe64:	strb	r3, [r6, #4]
   3fe68:	b	3f8a0 <__assert_fail@plt+0x2d2ac>
   3fe6c:	ldr	r3, [r1]
   3fe70:	strd	r4, [sp, #-12]!
   3fe74:	mov	r5, r0
   3fe78:	str	lr, [sp, #8]
   3fe7c:	sub	sp, sp, #12
   3fe80:	cmp	r3, #31
   3fe84:	beq	3fef0 <__assert_fail@plt+0x2d8fc>
   3fe88:	ldr	ip, [r5]
   3fe8c:	lsl	lr, r3, #5
   3fe90:	add	r4, r3, #1
   3fe94:	add	r0, lr, #4
   3fe98:	add	r3, ip, lr
   3fe9c:	str	r4, [r1]
   3fea0:	mov	r1, #0
   3fea4:	add	lr, lr, #16
   3fea8:	add	r0, ip, r0
   3feac:	str	r1, [r3, #4]
   3feb0:	add	ip, ip, lr
   3feb4:	mvn	lr, #0
   3feb8:	str	r1, [r3, #8]
   3febc:	str	r1, [r3, #12]
   3fec0:	ldrd	r4, [r2]
   3fec4:	strd	r4, [r3, #24]
   3fec8:	ldrb	r2, [ip, #14]
   3fecc:	bic	r2, r2, #12
   3fed0:	strb	r2, [ip, #14]
   3fed4:	str	r1, [r3, #16]
   3fed8:	str	r1, [r3, #20]
   3fedc:	str	lr, [r3, #32]
   3fee0:	add	sp, sp, #12
   3fee4:	ldrd	r4, [sp]
   3fee8:	add	sp, sp, #8
   3feec:	pop	{pc}		; (ldr pc, [sp], #4)
   3fef0:	mov	r0, #996	; 0x3e4
   3fef4:	stm	sp, {r1, r2}
   3fef8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   3fefc:	subs	ip, r0, #0
   3ff00:	beq	3ff24 <__assert_fail@plt+0x2d930>
   3ff04:	ldr	r3, [r5]
   3ff08:	mov	r0, #4
   3ff0c:	mov	r4, #1
   3ff10:	mov	lr, #0
   3ff14:	str	ip, [r5]
   3ff18:	ldm	sp, {r1, r2}
   3ff1c:	str	r3, [ip]
   3ff20:	b	3fe98 <__assert_fail@plt+0x2d8a4>
   3ff24:	mov	r0, ip
   3ff28:	b	3fee0 <__assert_fail@plt+0x2d8ec>
   3ff2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3ff30:	ldr	ip, [r0, #84]	; 0x54
   3ff34:	strd	r6, [sp, #8]
   3ff38:	strd	r8, [sp, #16]
   3ff3c:	ldr	r8, [r0, #108]	; 0x6c
   3ff40:	strd	sl, [sp, #24]
   3ff44:	str	lr, [sp, #32]
   3ff48:	sub	sp, sp, #36	; 0x24
   3ff4c:	ldr	r7, [sp, #72]	; 0x48
   3ff50:	str	ip, [sp, #12]
   3ff54:	cmp	r8, #0
   3ff58:	ldr	r6, [sp, #80]	; 0x50
   3ff5c:	ble	40244 <__assert_fail@plt+0x2dc50>
   3ff60:	ldr	sl, [r0, #116]	; 0x74
   3ff64:	mov	lr, r8
   3ff68:	mov	r4, #0
   3ff6c:	add	ip, lr, r4
   3ff70:	asr	ip, ip, #1
   3ff74:	add	r5, ip, ip, lsl #1
   3ff78:	add	r5, sl, r5, lsl #3
   3ff7c:	ldr	r5, [r5, #4]
   3ff80:	cmp	r7, r5
   3ff84:	bgt	401a4 <__assert_fail@plt+0x2dbb0>
   3ff88:	cmp	ip, r4
   3ff8c:	ble	3ffd8 <__assert_fail@plt+0x2d9e4>
   3ff90:	add	lr, ip, r4
   3ff94:	asr	lr, lr, #1
   3ff98:	add	r5, lr, lr, lsl #1
   3ff9c:	add	r5, sl, r5, lsl #3
   3ffa0:	ldr	r5, [r5, #4]
   3ffa4:	cmp	r7, r5
   3ffa8:	ble	3ffc8 <__assert_fail@plt+0x2d9d4>
   3ffac:	b	40198 <__assert_fail@plt+0x2dba4>
   3ffb0:	add	r5, ip, ip, lsl #1
   3ffb4:	add	r5, sl, r5, lsl #3
   3ffb8:	ldr	r5, [r5, #4]
   3ffbc:	cmp	r5, r7
   3ffc0:	blt	401a4 <__assert_fail@plt+0x2dbb0>
   3ffc4:	mov	lr, ip
   3ffc8:	add	ip, r4, lr
   3ffcc:	cmp	r4, lr
   3ffd0:	asr	ip, ip, #1
   3ffd4:	blt	3ffb0 <__assert_fail@plt+0x2d9bc>
   3ffd8:	cmp	r8, r4
   3ffdc:	mvnle	r4, #0
   3ffe0:	ble	3fff8 <__assert_fail@plt+0x2da04>
   3ffe4:	add	ip, r4, r4, lsl #1
   3ffe8:	add	ip, sl, ip, lsl #3
   3ffec:	ldr	ip, [ip, #4]
   3fff0:	cmp	r7, ip
   3fff4:	mvnne	r4, #0
   3fff8:	mov	lr, r8
   3fffc:	mov	r5, #0
   40000:	add	fp, lr, r5
   40004:	add	fp, fp, fp, lsr #31
   40008:	asr	fp, fp, #1
   4000c:	add	ip, fp, fp, lsl #1
   40010:	add	ip, sl, ip, lsl #3
   40014:	ldr	ip, [ip, #4]
   40018:	cmp	r6, ip
   4001c:	bgt	40188 <__assert_fail@plt+0x2db94>
   40020:	cmp	fp, r5
   40024:	ble	40080 <__assert_fail@plt+0x2da8c>
   40028:	add	lr, fp, r5
   4002c:	add	lr, lr, lr, lsr #31
   40030:	asr	lr, lr, #1
   40034:	add	ip, lr, lr, lsl #1
   40038:	mov	r9, lr
   4003c:	add	ip, sl, ip, lsl #3
   40040:	ldr	ip, [ip, #4]
   40044:	cmp	r6, ip
   40048:	ble	40070 <__assert_fail@plt+0x2da7c>
   4004c:	b	40180 <__assert_fail@plt+0x2db8c>
   40050:	asr	ip, ip, #1
   40054:	add	r9, ip, ip, lsl #1
   40058:	mov	fp, ip
   4005c:	add	r9, sl, r9, lsl #3
   40060:	ldr	r9, [r9, #4]
   40064:	cmp	r9, r6
   40068:	blt	40188 <__assert_fail@plt+0x2db94>
   4006c:	mov	lr, ip
   40070:	add	ip, r5, lr
   40074:	cmp	r5, lr
   40078:	add	ip, ip, ip, lsr #31
   4007c:	blt	40050 <__assert_fail@plt+0x2da5c>
   40080:	cmp	r8, r5
   40084:	ble	40274 <__assert_fail@plt+0x2dc80>
   40088:	add	ip, r5, r5, lsl #1
   4008c:	add	sl, sl, ip, lsl #3
   40090:	ldr	ip, [sl, #4]
   40094:	cmp	r6, ip
   40098:	mvnne	r5, #0
   4009c:	ldr	ip, [r1]
   400a0:	cmp	ip, #0
   400a4:	ble	401ec <__assert_fail@plt+0x2dbf8>
   400a8:	mov	sl, r2
   400ac:	mov	r8, r0
   400b0:	str	r1, [sp, #16]
   400b4:	mov	fp, #0
   400b8:	str	r3, [sp, #20]
   400bc:	str	r5, [sp, #24]
   400c0:	str	r4, [sp, #28]
   400c4:	ldr	r3, [sl]
   400c8:	lsl	r4, fp, #2
   400cc:	ldr	r2, [sp, #12]
   400d0:	ldr	r0, [r8, #116]	; 0x74
   400d4:	ldr	r3, [r3, fp, lsl #2]
   400d8:	ldr	r1, [r2]
   400dc:	add	r3, r3, r3, lsl #1
   400e0:	add	r2, r0, r3, lsl #3
   400e4:	ldr	r0, [r0, r3, lsl #3]
   400e8:	ldr	r3, [r2, #8]
   400ec:	ldr	r9, [r1, r0, lsl #3]
   400f0:	cmp	r7, r3
   400f4:	blt	40250 <__assert_fail@plt+0x2dc5c>
   400f8:	ldr	r2, [r2, #12]
   400fc:	cmp	r7, r2
   40100:	bgt	4023c <__assert_fail@plt+0x2dc48>
   40104:	sub	r1, r7, r3
   40108:	cmp	r7, r2
   4010c:	clz	r1, r1
   40110:	lsr	r1, r1, #5
   40114:	beq	401f4 <__assert_fail@plt+0x2dc00>
   40118:	cmp	r7, r3
   4011c:	movne	r5, #0
   40120:	beq	401f8 <__assert_fail@plt+0x2dc04>
   40124:	cmp	r6, r3
   40128:	blt	40160 <__assert_fail@plt+0x2db6c>
   4012c:	cmp	r6, r2
   40130:	movgt	r0, #1
   40134:	bgt	40158 <__assert_fail@plt+0x2db64>
   40138:	sub	r1, r6, r3
   4013c:	cmp	r6, r2
   40140:	clz	r1, r1
   40144:	lsr	r1, r1, #5
   40148:	beq	401b4 <__assert_fail@plt+0x2dbc0>
   4014c:	cmp	r6, r3
   40150:	movne	r0, #0
   40154:	beq	401b8 <__assert_fail@plt+0x2dbc4>
   40158:	cmp	r0, r5
   4015c:	beq	401d8 <__assert_fail@plt+0x2dbe4>
   40160:	mov	r0, #1
   40164:	add	sp, sp, #36	; 0x24
   40168:	ldrd	r4, [sp]
   4016c:	ldrd	r6, [sp, #8]
   40170:	ldrd	r8, [sp, #16]
   40174:	ldrd	sl, [sp, #24]
   40178:	add	sp, sp, #32
   4017c:	pop	{pc}		; (ldr pc, [sp], #4)
   40180:	mov	lr, fp
   40184:	mov	fp, r9
   40188:	add	r5, fp, #1
   4018c:	cmp	r5, lr
   40190:	blt	40000 <__assert_fail@plt+0x2da0c>
   40194:	b	40080 <__assert_fail@plt+0x2da8c>
   40198:	mov	r4, lr
   4019c:	mov	lr, ip
   401a0:	mov	ip, r4
   401a4:	add	r4, ip, #1
   401a8:	cmp	r4, lr
   401ac:	blt	3ff6c <__assert_fail@plt+0x2d978>
   401b0:	b	3ffd8 <__assert_fail@plt+0x2d9e4>
   401b4:	orr	r1, r1, #2
   401b8:	ldr	r3, [sp, #24]
   401bc:	mov	r2, r9
   401c0:	mov	r0, r8
   401c4:	str	r3, [sp]
   401c8:	ldr	r3, [sp, #76]	; 0x4c
   401cc:	bl	3c1f4 <__assert_fail@plt+0x29c00>
   401d0:	cmp	r0, r5
   401d4:	bne	40160 <__assert_fail@plt+0x2db6c>
   401d8:	ldr	r3, [sp, #16]
   401dc:	ldr	ip, [r3]
   401e0:	add	fp, fp, #1
   401e4:	cmp	fp, ip
   401e8:	blt	400c4 <__assert_fail@plt+0x2dad0>
   401ec:	mov	r0, #0
   401f0:	b	40164 <__assert_fail@plt+0x2db70>
   401f4:	orr	r1, r1, #2
   401f8:	mov	r0, r8
   401fc:	ldr	r3, [sp, #20]
   40200:	ldr	r2, [sp, #28]
   40204:	str	r2, [sp]
   40208:	mov	r2, r9
   4020c:	bl	3c1f4 <__assert_fail@plt+0x29c00>
   40210:	ldr	r3, [sl]
   40214:	mov	r5, r0
   40218:	ldr	r2, [r8, #116]	; 0x74
   4021c:	ldr	r3, [r3, r4]
   40220:	add	r3, r3, r3, lsl #1
   40224:	add	r2, r2, r3, lsl #3
   40228:	ldr	r3, [r2, #8]
   4022c:	cmp	r6, r3
   40230:	blt	4026c <__assert_fail@plt+0x2dc78>
   40234:	ldr	r2, [r2, #12]
   40238:	b	4012c <__assert_fail@plt+0x2db38>
   4023c:	mov	r5, #1
   40240:	b	40124 <__assert_fail@plt+0x2db30>
   40244:	mvn	r4, #0
   40248:	mov	r5, r4
   4024c:	b	4009c <__assert_fail@plt+0x2daa8>
   40250:	cmp	r6, r3
   40254:	blt	401e0 <__assert_fail@plt+0x2dbec>
   40258:	ldr	r2, [r2, #12]
   4025c:	cmp	r6, r2
   40260:	bgt	40160 <__assert_fail@plt+0x2db6c>
   40264:	mvn	r5, #0
   40268:	b	40138 <__assert_fail@plt+0x2db44>
   4026c:	mvn	r0, #0
   40270:	b	40158 <__assert_fail@plt+0x2db64>
   40274:	mvn	r5, #0
   40278:	b	4009c <__assert_fail@plt+0x2daa8>
   4027c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   40280:	mov	r4, r0
   40284:	strd	r6, [sp, #8]
   40288:	ldr	r0, [r1, #80]	; 0x50
   4028c:	strd	r8, [sp, #16]
   40290:	str	sl, [sp, #24]
   40294:	str	lr, [sp, #28]
   40298:	sub	sp, sp, #8
   4029c:	ldrb	r7, [sp, #44]	; 0x2c
   402a0:	cmp	r0, #1
   402a4:	ldr	ip, [r1, #40]	; 0x28
   402a8:	beq	40310 <__assert_fail@plt+0x2dd1c>
   402ac:	add	r5, ip, #1
   402b0:	ldr	r6, [r1, #28]
   402b4:	cmp	r5, r6
   402b8:	bge	40310 <__assert_fail@plt+0x2dd1c>
   402bc:	ldr	r0, [r1, #8]
   402c0:	ldr	lr, [r0, r5, lsl #2]
   402c4:	add	r0, r0, r5, lsl #2
   402c8:	cmn	lr, #1
   402cc:	bne	40310 <__assert_fail@plt+0x2dd1c>
   402d0:	add	r3, ip, #2
   402d4:	mov	r2, r0
   402d8:	b	402ec <__assert_fail@plt+0x2dcf8>
   402dc:	ldr	ip, [r2, #4]!
   402e0:	add	r3, r3, #1
   402e4:	cmn	ip, #1
   402e8:	bne	402f8 <__assert_fail@plt+0x2dd04>
   402ec:	cmp	r6, r3
   402f0:	mov	lr, r3
   402f4:	bne	402dc <__assert_fail@plt+0x2dce8>
   402f8:	ldr	r3, [r0, #-4]
   402fc:	mov	r2, #1
   40300:	mov	r0, #0
   40304:	strd	r2, [r4]
   40308:	str	lr, [r1, #40]	; 0x28
   4030c:	b	40358 <__assert_fail@plt+0x2dd64>
   40310:	ldrb	lr, [r2, #4]
   40314:	add	r3, ip, r3
   40318:	str	r3, [r1, #40]	; 0x28
   4031c:	and	r0, lr, #251	; 0xfb
   40320:	cmp	lr, #28
   40324:	cmpne	r0, #26
   40328:	beq	40374 <__assert_fail@plt+0x2dd80>
   4032c:	cmp	lr, #22
   40330:	moveq	lr, r7
   40334:	orrne	lr, r7, #1
   40338:	mov	r5, r2
   4033c:	cmp	lr, #0
   40340:	beq	404ec <__assert_fail@plt+0x2def8>
   40344:	ldrb	r2, [r5]
   40348:	mov	r3, #0
   4034c:	mov	r0, r3
   40350:	str	r3, [r4]
   40354:	strb	r2, [r4, #4]
   40358:	add	sp, sp, #8
   4035c:	ldrd	r4, [sp]
   40360:	ldrd	r6, [sp, #8]
   40364:	ldrd	r8, [sp, #16]
   40368:	ldr	sl, [sp, #24]
   4036c:	add	sp, sp, #28
   40370:	pop	{pc}		; (ldr pc, [sp], #4)
   40374:	ldr	r6, [r1, #56]	; 0x38
   40378:	cmp	r3, r6
   4037c:	bge	4041c <__assert_fail@plt+0x2de28>
   40380:	ldrb	r7, [r2]
   40384:	mov	r5, #0
   40388:	b	403ac <__assert_fail@plt+0x2ddb8>
   4038c:	ldr	r3, [r4, #4]
   40390:	strb	r0, [r3, r5]
   40394:	add	r5, r5, #1
   40398:	cmp	r5, #32
   4039c:	beq	4041c <__assert_fail@plt+0x2de28>
   403a0:	ldrb	lr, [r2, #4]
   403a4:	ldr	r3, [r1, #40]	; 0x28
   403a8:	ldr	r6, [r1, #56]	; 0x38
   403ac:	cmp	lr, #30
   403b0:	add	ip, r3, #1
   403b4:	beq	40424 <__assert_fail@plt+0x2de30>
   403b8:	ldr	r0, [r1, #4]
   403bc:	str	ip, [r1, #40]	; 0x28
   403c0:	ldrb	r0, [r0, r3]
   403c4:	cmp	r6, ip
   403c8:	ble	4041c <__assert_fail@plt+0x2de28>
   403cc:	cmp	r7, r0
   403d0:	bne	4038c <__assert_fail@plt+0x2dd98>
   403d4:	ldr	r3, [r1, #4]
   403d8:	ldrb	r3, [r3, ip]
   403dc:	cmp	r3, #93	; 0x5d
   403e0:	bne	4038c <__assert_fail@plt+0x2dd98>
   403e4:	ldr	r3, [r4, #4]
   403e8:	add	ip, ip, #1
   403ec:	mov	r0, #0
   403f0:	str	ip, [r1, #40]	; 0x28
   403f4:	strb	r0, [r3, r5]
   403f8:	ldrb	r3, [r2, #4]
   403fc:	cmp	r3, #28
   40400:	beq	40518 <__assert_fail@plt+0x2df24>
   40404:	cmp	r3, #30
   40408:	beq	4050c <__assert_fail@plt+0x2df18>
   4040c:	cmp	r3, #26
   40410:	moveq	r3, #3
   40414:	streq	r3, [r4]
   40418:	b	40358 <__assert_fail@plt+0x2dd64>
   4041c:	mov	r0, #7
   40420:	b	40358 <__assert_fail@plt+0x2dd64>
   40424:	ldrb	r0, [r1, #75]	; 0x4b
   40428:	cmp	r0, #0
   4042c:	beq	403b8 <__assert_fail@plt+0x2ddc4>
   40430:	ldrb	r0, [r1, #76]	; 0x4c
   40434:	cmp	r0, #0
   40438:	beq	404d4 <__assert_fail@plt+0x2dee0>
   4043c:	ldr	r8, [r1, #28]
   40440:	lsl	lr, r3, #2
   40444:	cmp	r3, r8
   40448:	beq	4045c <__assert_fail@plt+0x2de68>
   4044c:	ldr	r0, [r1, #8]
   40450:	ldr	r0, [r0, r3, lsl #2]
   40454:	cmn	r0, #1
   40458:	beq	403b8 <__assert_fail@plt+0x2ddc4>
   4045c:	ldr	r0, [r1]
   40460:	ldr	sl, [r1, #12]
   40464:	ldr	r9, [r1, #24]
   40468:	ldr	sl, [sl, lr]
   4046c:	add	r0, r0, sl
   40470:	ldrb	r0, [r0, r9]
   40474:	tst	r0, #128	; 0x80
   40478:	bne	403b8 <__assert_fail@plt+0x2ddc4>
   4047c:	ldr	r9, [r1, #80]	; 0x50
   40480:	cmp	r9, #1
   40484:	beq	404cc <__assert_fail@plt+0x2ded8>
   40488:	cmp	r8, ip
   4048c:	ble	404cc <__assert_fail@plt+0x2ded8>
   40490:	ldr	r9, [r1, #8]
   40494:	add	lr, r9, lr
   40498:	ldr	lr, [lr, #4]
   4049c:	cmn	lr, #1
   404a0:	bne	404cc <__assert_fail@plt+0x2ded8>
   404a4:	add	r3, r3, #2
   404a8:	sub	r9, r9, #4
   404ac:	b	404bc <__assert_fail@plt+0x2dec8>
   404b0:	ldr	lr, [r9, r3, lsl #2]
   404b4:	cmn	lr, #1
   404b8:	bne	404cc <__assert_fail@plt+0x2ded8>
   404bc:	cmp	r8, r3
   404c0:	mov	ip, r3
   404c4:	add	r3, r3, #1
   404c8:	bne	404b0 <__assert_fail@plt+0x2debc>
   404cc:	str	ip, [r1, #40]	; 0x28
   404d0:	b	403c4 <__assert_fail@plt+0x2ddd0>
   404d4:	ldr	r0, [r1]
   404d8:	str	ip, [r1, #40]	; 0x28
   404dc:	ldr	lr, [r1, #24]
   404e0:	add	r3, r0, r3
   404e4:	ldrb	r0, [r3, lr]
   404e8:	b	403c4 <__assert_fail@plt+0x2ddd0>
   404ec:	mov	r0, sp
   404f0:	ldr	r2, [sp, #40]	; 0x28
   404f4:	bl	3c048 <__assert_fail@plt+0x29a54>
   404f8:	ldrb	r3, [sp, #4]
   404fc:	cmp	r3, #21
   40500:	movne	r0, #11
   40504:	beq	40344 <__assert_fail@plt+0x2dd50>
   40508:	b	40358 <__assert_fail@plt+0x2dd64>
   4050c:	mov	r3, #4
   40510:	str	r3, [r4]
   40514:	b	40358 <__assert_fail@plt+0x2dd64>
   40518:	mov	r3, #2
   4051c:	str	r3, [r4]
   40520:	b	40358 <__assert_fail@plt+0x2dd64>
   40524:	add	ip, r0, r2, lsl #3
   40528:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4052c:	strd	r6, [sp, #8]
   40530:	str	r8, [sp, #16]
   40534:	ldrb	r8, [ip, #4]
   40538:	str	lr, [sp, #20]
   4053c:	ldr	r7, [sp, #24]
   40540:	cmp	r8, #7
   40544:	beq	406ac <__assert_fail@plt+0x2e0b8>
   40548:	ldr	ip, [r3, #80]	; 0x50
   4054c:	cmp	ip, #1
   40550:	beq	405b0 <__assert_fail@plt+0x2dfbc>
   40554:	ldr	ip, [r3, #28]
   40558:	add	lr, r7, #1
   4055c:	cmp	lr, ip
   40560:	bge	405b0 <__assert_fail@plt+0x2dfbc>
   40564:	ldr	r4, [r3, #8]
   40568:	ldr	r5, [r4, lr, lsl #2]
   4056c:	add	r6, r4, lr, lsl #2
   40570:	cmn	r5, #1
   40574:	bne	405b0 <__assert_fail@plt+0x2dfbc>
   40578:	sub	ip, ip, r7
   4057c:	mov	lr, r6
   40580:	mov	r4, #1
   40584:	b	40594 <__assert_fail@plt+0x2dfa0>
   40588:	ldr	r5, [lr, #4]!
   4058c:	cmn	r5, #1
   40590:	bne	405a0 <__assert_fail@plt+0x2dfac>
   40594:	add	r4, r4, #1
   40598:	cmp	ip, r4
   4059c:	bne	40588 <__assert_fail@plt+0x2df94>
   405a0:	cmp	r8, #5
   405a4:	beq	405cc <__assert_fail@plt+0x2dfd8>
   405a8:	cmp	r8, #6
   405ac:	beq	40604 <__assert_fail@plt+0x2e010>
   405b0:	mov	r4, #0
   405b4:	mov	r0, r4
   405b8:	ldrd	r4, [sp]
   405bc:	ldrd	r6, [sp, #8]
   405c0:	ldr	r8, [sp, #16]
   405c4:	add	sp, sp, #20
   405c8:	pop	{pc}		; (ldr pc, [sp], #4)
   405cc:	ldr	r2, [r1]
   405d0:	tst	r2, #64	; 0x40
   405d4:	bne	405e8 <__assert_fail@plt+0x2dff4>
   405d8:	ldr	r1, [r3, #4]
   405dc:	ldrb	r1, [r1, r7]
   405e0:	cmp	r1, #10
   405e4:	beq	405b0 <__assert_fail@plt+0x2dfbc>
   405e8:	tst	r2, #128	; 0x80
   405ec:	beq	405b4 <__assert_fail@plt+0x2dfc0>
   405f0:	ldr	r3, [r3, #4]
   405f4:	ldrb	r3, [r3, r7]
   405f8:	cmp	r3, #0
   405fc:	beq	405b0 <__assert_fail@plt+0x2dfbc>
   40600:	b	405b4 <__assert_fail@plt+0x2dfc0>
   40604:	ldr	r7, [r0, r2, lsl #3]
   40608:	ldr	r0, [r7, #20]
   4060c:	ldr	ip, [r7, #32]
   40610:	cmp	ip, #0
   40614:	bne	40624 <__assert_fail@plt+0x2e030>
   40618:	ldr	r3, [r7, #36]	; 0x24
   4061c:	orrs	r3, r0, r3
   40620:	beq	407ac <__assert_fail@plt+0x2e1b8>
   40624:	cmp	r0, #0
   40628:	ldr	r6, [r6, #-4]
   4062c:	ble	40660 <__assert_fail@plt+0x2e06c>
   40630:	ldr	r2, [r7]
   40634:	ldr	r3, [r2]
   40638:	cmp	r6, r3
   4063c:	beq	4069c <__assert_fail@plt+0x2e0a8>
   40640:	mov	r3, #0
   40644:	b	40654 <__assert_fail@plt+0x2e060>
   40648:	ldr	r1, [r2, #4]!
   4064c:	cmp	r6, r1
   40650:	beq	4069c <__assert_fail@plt+0x2e0a8>
   40654:	add	r3, r3, #1
   40658:	cmp	r3, r0
   4065c:	bne	40648 <__assert_fail@plt+0x2e054>
   40660:	ldr	r3, [r7, #36]	; 0x24
   40664:	cmp	r3, #0
   40668:	ble	40770 <__assert_fail@plt+0x2e17c>
   4066c:	mov	r5, #0
   40670:	b	40680 <__assert_fail@plt+0x2e08c>
   40674:	ldr	r3, [r7, #36]	; 0x24
   40678:	cmp	r5, r3
   4067c:	bge	4076c <__assert_fail@plt+0x2e178>
   40680:	ldr	r3, [r7, #12]
   40684:	mov	r0, r6
   40688:	ldr	r1, [r3, r5, lsl #2]
   4068c:	add	r5, r5, #1
   40690:	bl	11f34 <iswctype@plt>
   40694:	cmp	r0, #0
   40698:	beq	40674 <__assert_fail@plt+0x2e080>
   4069c:	ldrb	r3, [r7, #16]
   406a0:	tst	r3, #1
   406a4:	beq	405b4 <__assert_fail@plt+0x2dfc0>
   406a8:	b	405b0 <__assert_fail@plt+0x2dfbc>
   406ac:	ldr	r1, [r3, #4]
   406b0:	ldrb	r2, [r1, r7]
   406b4:	cmp	r2, #193	; 0xc1
   406b8:	bls	405b0 <__assert_fail@plt+0x2dfbc>
   406bc:	ldr	r3, [r3, #48]	; 0x30
   406c0:	add	r0, r7, #1
   406c4:	cmp	r0, r3
   406c8:	bge	405b0 <__assert_fail@plt+0x2dfbc>
   406cc:	add	ip, r1, r7
   406d0:	cmp	r2, #223	; 0xdf
   406d4:	ldrb	lr, [ip, #1]
   406d8:	bls	407d8 <__assert_fail@plt+0x2e1e4>
   406dc:	cmp	r2, #239	; 0xef
   406e0:	bhi	407bc <__assert_fail@plt+0x2e1c8>
   406e4:	cmp	lr, #159	; 0x9f
   406e8:	cmpls	r2, #224	; 0xe0
   406ec:	movne	r4, #3
   406f0:	beq	405b0 <__assert_fail@plt+0x2dfbc>
   406f4:	add	r7, r7, r4
   406f8:	cmp	r3, r7
   406fc:	blt	405b0 <__assert_fail@plt+0x2dfbc>
   40700:	ldrb	r3, [r1, r0]
   40704:	eor	r3, r3, #128	; 0x80
   40708:	cmp	r3, #63	; 0x3f
   4070c:	bhi	405b0 <__assert_fail@plt+0x2dfbc>
   40710:	ldrb	r3, [ip, #2]
   40714:	eor	r3, r3, #128	; 0x80
   40718:	cmp	r3, #63	; 0x3f
   4071c:	bhi	405b0 <__assert_fail@plt+0x2dfbc>
   40720:	cmp	r4, #3
   40724:	beq	405b4 <__assert_fail@plt+0x2dfc0>
   40728:	ldrb	r3, [ip, #3]
   4072c:	eor	r3, r3, #128	; 0x80
   40730:	cmp	r3, #63	; 0x3f
   40734:	bhi	405b0 <__assert_fail@plt+0x2dfbc>
   40738:	cmp	r4, #4
   4073c:	beq	405b4 <__assert_fail@plt+0x2dfc0>
   40740:	ldrb	r3, [ip, #4]
   40744:	eor	r3, r3, #128	; 0x80
   40748:	cmp	r3, #63	; 0x3f
   4074c:	bhi	405b0 <__assert_fail@plt+0x2dfbc>
   40750:	cmp	r4, #6
   40754:	bne	40824 <__assert_fail@plt+0x2e230>
   40758:	ldrb	r3, [ip, #5]
   4075c:	eor	r3, r3, #128	; 0x80
   40760:	cmp	r3, #63	; 0x3f
   40764:	bls	405b4 <__assert_fail@plt+0x2dfc0>
   40768:	b	405b0 <__assert_fail@plt+0x2dfbc>
   4076c:	ldr	ip, [r7, #32]
   40770:	cmp	ip, #0
   40774:	ble	407ac <__assert_fail@plt+0x2e1b8>
   40778:	ldr	r2, [r7, #4]
   4077c:	mov	r3, #0
   40780:	sub	r2, r2, #4
   40784:	ldr	r1, [r2, #4]!
   40788:	cmp	r6, r1
   4078c:	bcc	407a0 <__assert_fail@plt+0x2e1ac>
   40790:	ldr	r1, [r7, #8]
   40794:	ldr	r1, [r1, r3, lsl #2]
   40798:	cmp	r6, r1
   4079c:	bls	4069c <__assert_fail@plt+0x2e0a8>
   407a0:	add	r3, r3, #1
   407a4:	cmp	r3, ip
   407a8:	bne	40784 <__assert_fail@plt+0x2e190>
   407ac:	ldrb	r3, [r7, #16]
   407b0:	tst	r3, #1
   407b4:	bne	405b4 <__assert_fail@plt+0x2dfc0>
   407b8:	b	405b0 <__assert_fail@plt+0x2dfbc>
   407bc:	cmp	r2, #247	; 0xf7
   407c0:	bhi	407ec <__assert_fail@plt+0x2e1f8>
   407c4:	cmp	lr, #143	; 0x8f
   407c8:	cmpls	r2, #240	; 0xf0
   407cc:	movne	r4, #4
   407d0:	bne	406f4 <__assert_fail@plt+0x2e100>
   407d4:	b	405b0 <__assert_fail@plt+0x2dfbc>
   407d8:	eor	lr, lr, #128	; 0x80
   407dc:	cmp	lr, #63	; 0x3f
   407e0:	movls	r4, #2
   407e4:	bls	405b4 <__assert_fail@plt+0x2dfc0>
   407e8:	b	405b0 <__assert_fail@plt+0x2dfbc>
   407ec:	cmp	r2, #251	; 0xfb
   407f0:	bhi	40808 <__assert_fail@plt+0x2e214>
   407f4:	cmp	lr, #135	; 0x87
   407f8:	cmpls	r2, #248	; 0xf8
   407fc:	movne	r4, #5
   40800:	bne	406f4 <__assert_fail@plt+0x2e100>
   40804:	b	405b0 <__assert_fail@plt+0x2dfbc>
   40808:	cmp	r2, #253	; 0xfd
   4080c:	bhi	405b0 <__assert_fail@plt+0x2dfbc>
   40810:	cmp	lr, #131	; 0x83
   40814:	cmpls	r2, #252	; 0xfc
   40818:	beq	405b0 <__assert_fail@plt+0x2dfbc>
   4081c:	mov	r4, #6
   40820:	b	406f4 <__assert_fail@plt+0x2e100>
   40824:	mov	r4, #5
   40828:	b	405b4 <__assert_fail@plt+0x2dfc0>
   4082c:	strd	r4, [sp, #-16]!
   40830:	mov	r5, #255	; 0xff
   40834:	movt	r5, #4
   40838:	mov	r4, r0
   4083c:	str	r6, [sp, #8]
   40840:	str	lr, [sp, #12]
   40844:	b	4084c <__assert_fail@plt+0x2e258>
   40848:	mov	r4, r3
   4084c:	ldr	r3, [r4, #4]
   40850:	cmp	r3, #0
   40854:	bne	40848 <__assert_fail@plt+0x2e254>
   40858:	ldr	r3, [r4, #8]
   4085c:	cmp	r3, #0
   40860:	bne	40848 <__assert_fail@plt+0x2e254>
   40864:	ldr	r3, [r4, #24]
   40868:	and	r3, r3, r5
   4086c:	cmp	r3, #6
   40870:	beq	408b8 <__assert_fail@plt+0x2e2c4>
   40874:	cmp	r3, #3
   40878:	beq	40900 <__assert_fail@plt+0x2e30c>
   4087c:	ldr	r0, [r4]
   40880:	cmp	r0, #0
   40884:	beq	408f0 <__assert_fail@plt+0x2e2fc>
   40888:	ldr	r3, [r0, #8]
   4088c:	cmp	r3, #0
   40890:	cmpne	r4, r3
   40894:	mov	r4, r0
   40898:	moveq	r2, #1
   4089c:	movne	r2, #0
   408a0:	cmp	r2, #0
   408a4:	beq	40848 <__assert_fail@plt+0x2e254>
   408a8:	ldr	r3, [r4, #24]
   408ac:	and	r3, r3, r5
   408b0:	cmp	r3, #6
   408b4:	bne	40874 <__assert_fail@plt+0x2e280>
   408b8:	ldr	r6, [r4, #20]
   408bc:	ldr	r0, [r6]
   408c0:	bl	38b10 <__assert_fail@plt+0x2651c>
   408c4:	ldr	r0, [r6, #4]
   408c8:	bl	38b10 <__assert_fail@plt+0x2651c>
   408cc:	ldr	r0, [r6, #8]
   408d0:	bl	38b10 <__assert_fail@plt+0x2651c>
   408d4:	ldr	r0, [r6, #12]
   408d8:	bl	38b10 <__assert_fail@plt+0x2651c>
   408dc:	mov	r0, r6
   408e0:	bl	38b10 <__assert_fail@plt+0x2651c>
   408e4:	ldr	r0, [r4]
   408e8:	cmp	r0, #0
   408ec:	bne	40888 <__assert_fail@plt+0x2e294>
   408f0:	ldrd	r4, [sp]
   408f4:	ldr	r6, [sp, #8]
   408f8:	add	sp, sp, #12
   408fc:	pop	{pc}		; (ldr pc, [sp], #4)
   40900:	ldr	r0, [r4, #20]
   40904:	bl	38b10 <__assert_fail@plt+0x2651c>
   40908:	b	4087c <__assert_fail@plt+0x2e288>
   4090c:	ldr	r2, [r0]
   40910:	strd	r4, [sp, #-24]!	; 0xffffffe8
   40914:	strd	r6, [sp, #8]
   40918:	mov	r7, r0
   4091c:	str	r8, [sp, #16]
   40920:	str	lr, [sp, #20]
   40924:	cmp	r2, #0
   40928:	beq	409b0 <__assert_fail@plt+0x2e3bc>
   4092c:	ldr	r0, [r0, #8]
   40930:	cmp	r0, #0
   40934:	beq	409b0 <__assert_fail@plt+0x2e3bc>
   40938:	mov	r5, #255	; 0xff
   4093c:	movt	r5, #4
   40940:	mov	r4, #0
   40944:	b	40960 <__assert_fail@plt+0x2e36c>
   40948:	cmp	r3, #3
   4094c:	beq	40b88 <__assert_fail@plt+0x2e594>
   40950:	add	r4, r4, #1
   40954:	cmp	r4, r0
   40958:	bcs	409b0 <__assert_fail@plt+0x2e3bc>
   4095c:	ldr	r2, [r7]
   40960:	add	r1, r2, r4, lsl #3
   40964:	ldr	r3, [r1, #4]
   40968:	and	r3, r3, r5
   4096c:	cmp	r3, #6
   40970:	bne	40948 <__assert_fail@plt+0x2e354>
   40974:	ldr	r6, [r2, r4, lsl #3]
   40978:	add	r4, r4, #1
   4097c:	ldr	r0, [r6]
   40980:	bl	38b10 <__assert_fail@plt+0x2651c>
   40984:	ldr	r0, [r6, #4]
   40988:	bl	38b10 <__assert_fail@plt+0x2651c>
   4098c:	ldr	r0, [r6, #8]
   40990:	bl	38b10 <__assert_fail@plt+0x2651c>
   40994:	ldr	r0, [r6, #12]
   40998:	bl	38b10 <__assert_fail@plt+0x2651c>
   4099c:	mov	r0, r6
   409a0:	bl	38b10 <__assert_fail@plt+0x2651c>
   409a4:	ldr	r0, [r7, #8]
   409a8:	cmp	r4, r0
   409ac:	bcc	4095c <__assert_fail@plt+0x2e368>
   409b0:	ldr	r0, [r7, #12]
   409b4:	bl	38b10 <__assert_fail@plt+0x2651c>
   409b8:	ldr	r3, [r7, #8]
   409bc:	cmp	r3, #0
   409c0:	movne	r4, #0
   409c4:	movne	r5, r4
   409c8:	beq	40a28 <__assert_fail@plt+0x2e434>
   409cc:	ldr	r3, [r7, #24]
   409d0:	cmp	r3, #0
   409d4:	add	r2, r3, r4
   409d8:	beq	409e4 <__assert_fail@plt+0x2e3f0>
   409dc:	ldr	r0, [r2, #8]
   409e0:	bl	38b10 <__assert_fail@plt+0x2651c>
   409e4:	ldr	r3, [r7, #28]
   409e8:	cmp	r3, #0
   409ec:	add	r2, r3, r4
   409f0:	beq	409fc <__assert_fail@plt+0x2e408>
   409f4:	ldr	r0, [r2, #8]
   409f8:	bl	38b10 <__assert_fail@plt+0x2651c>
   409fc:	ldr	r0, [r7, #20]
   40a00:	cmp	r0, #0
   40a04:	add	r3, r0, r4
   40a08:	beq	40b2c <__assert_fail@plt+0x2e538>
   40a0c:	ldr	r0, [r3, #8]
   40a10:	add	r5, r5, #1
   40a14:	add	r4, r4, #12
   40a18:	bl	38b10 <__assert_fail@plt+0x2651c>
   40a1c:	ldr	r3, [r7, #8]
   40a20:	cmp	r5, r3
   40a24:	bcc	409cc <__assert_fail@plt+0x2e3d8>
   40a28:	ldr	r0, [r7, #20]
   40a2c:	bl	38b10 <__assert_fail@plt+0x2651c>
   40a30:	ldr	r0, [r7, #24]
   40a34:	bl	38b10 <__assert_fail@plt+0x2651c>
   40a38:	ldr	r0, [r7, #28]
   40a3c:	bl	38b10 <__assert_fail@plt+0x2651c>
   40a40:	ldr	r0, [r7]
   40a44:	bl	38b10 <__assert_fail@plt+0x2651c>
   40a48:	ldr	r0, [r7, #32]
   40a4c:	cmp	r0, #0
   40a50:	movne	r8, #0
   40a54:	beq	40b48 <__assert_fail@plt+0x2e554>
   40a58:	add	r6, r8, r8, lsl #1
   40a5c:	ldr	r3, [r0, r6, lsl #2]
   40a60:	add	r6, r0, r6, lsl #2
   40a64:	cmp	r3, #0
   40a68:	movgt	r5, #0
   40a6c:	ble	40ad8 <__assert_fail@plt+0x2e4e4>
   40a70:	ldr	r3, [r6, #8]
   40a74:	ldr	r4, [r3, r5, lsl #2]
   40a78:	ldr	r0, [r4, #24]
   40a7c:	bl	38b10 <__assert_fail@plt+0x2651c>
   40a80:	ldr	r0, [r4, #36]	; 0x24
   40a84:	bl	38b10 <__assert_fail@plt+0x2651c>
   40a88:	ldr	r3, [r4, #40]	; 0x28
   40a8c:	add	r2, r4, #4
   40a90:	cmp	r3, r2
   40a94:	beq	40af8 <__assert_fail@plt+0x2e504>
   40a98:	ldr	r0, [r3, #8]
   40a9c:	add	r5, r5, #1
   40aa0:	bl	38b10 <__assert_fail@plt+0x2651c>
   40aa4:	ldr	r0, [r4, #40]	; 0x28
   40aa8:	bl	38b10 <__assert_fail@plt+0x2651c>
   40aac:	ldr	r0, [r4, #12]
   40ab0:	bl	38b10 <__assert_fail@plt+0x2651c>
   40ab4:	ldr	r0, [r4, #48]	; 0x30
   40ab8:	bl	38b10 <__assert_fail@plt+0x2651c>
   40abc:	ldr	r0, [r4, #44]	; 0x2c
   40ac0:	bl	38b10 <__assert_fail@plt+0x2651c>
   40ac4:	mov	r0, r4
   40ac8:	bl	38b10 <__assert_fail@plt+0x2651c>
   40acc:	ldr	r3, [r6]
   40ad0:	cmp	r3, r5
   40ad4:	bgt	40a70 <__assert_fail@plt+0x2e47c>
   40ad8:	ldr	r0, [r6, #8]
   40adc:	add	r8, r8, #1
   40ae0:	bl	38b10 <__assert_fail@plt+0x2651c>
   40ae4:	ldr	r3, [r7, #68]	; 0x44
   40ae8:	cmp	r3, r8
   40aec:	bcc	40b44 <__assert_fail@plt+0x2e550>
   40af0:	ldr	r0, [r7, #32]
   40af4:	b	40a58 <__assert_fail@plt+0x2e464>
   40af8:	ldr	r0, [r4, #12]
   40afc:	add	r5, r5, #1
   40b00:	bl	38b10 <__assert_fail@plt+0x2651c>
   40b04:	ldr	r0, [r4, #48]	; 0x30
   40b08:	bl	38b10 <__assert_fail@plt+0x2651c>
   40b0c:	ldr	r0, [r4, #44]	; 0x2c
   40b10:	bl	38b10 <__assert_fail@plt+0x2651c>
   40b14:	mov	r0, r4
   40b18:	bl	38b10 <__assert_fail@plt+0x2651c>
   40b1c:	ldr	r3, [r6]
   40b20:	cmp	r5, r3
   40b24:	blt	40a70 <__assert_fail@plt+0x2e47c>
   40b28:	b	40ad8 <__assert_fail@plt+0x2e4e4>
   40b2c:	ldr	r3, [r7, #8]
   40b30:	add	r5, r5, #1
   40b34:	add	r4, r4, #12
   40b38:	cmp	r3, r5
   40b3c:	bhi	409cc <__assert_fail@plt+0x2e3d8>
   40b40:	b	40a2c <__assert_fail@plt+0x2e438>
   40b44:	ldr	r0, [r7, #32]
   40b48:	bl	38b10 <__assert_fail@plt+0x2651c>
   40b4c:	ldr	r0, [r7, #60]	; 0x3c
   40b50:	movw	r3, #25616	; 0x6410
   40b54:	movt	r3, #5
   40b58:	cmp	r0, r3
   40b5c:	beq	40b64 <__assert_fail@plt+0x2e570>
   40b60:	bl	38b10 <__assert_fail@plt+0x2651c>
   40b64:	ldr	r0, [r7, #132]	; 0x84
   40b68:	bl	38b10 <__assert_fail@plt+0x2651c>
   40b6c:	mov	r0, r7
   40b70:	ldrd	r4, [sp]
   40b74:	ldrd	r6, [sp, #8]
   40b78:	ldr	r8, [sp, #16]
   40b7c:	ldr	lr, [sp, #20]
   40b80:	add	sp, sp, #24
   40b84:	b	38b10 <__assert_fail@plt+0x2651c>
   40b88:	ldr	r0, [r1]
   40b8c:	bl	38b10 <__assert_fail@plt+0x2651c>
   40b90:	ldr	r0, [r7, #8]
   40b94:	b	40950 <__assert_fail@plt+0x2e35c>
   40b98:	ldr	r2, [r1, #24]
   40b9c:	mov	r3, #255	; 0xff
   40ba0:	movt	r3, #4
   40ba4:	str	r4, [sp, #-8]!
   40ba8:	str	lr, [sp, #4]
   40bac:	and	r3, r3, r2
   40bb0:	cmp	r3, #6
   40bb4:	beq	40bd0 <__assert_fail@plt+0x2e5dc>
   40bb8:	cmp	r3, #3
   40bbc:	beq	40c0c <__assert_fail@plt+0x2e618>
   40bc0:	ldr	r4, [sp]
   40bc4:	add	sp, sp, #4
   40bc8:	mov	r0, #0
   40bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   40bd0:	ldr	r4, [r1, #20]
   40bd4:	ldr	r0, [r4]
   40bd8:	bl	38b10 <__assert_fail@plt+0x2651c>
   40bdc:	ldr	r0, [r4, #4]
   40be0:	bl	38b10 <__assert_fail@plt+0x2651c>
   40be4:	ldr	r0, [r4, #8]
   40be8:	bl	38b10 <__assert_fail@plt+0x2651c>
   40bec:	ldr	r0, [r4, #12]
   40bf0:	bl	38b10 <__assert_fail@plt+0x2651c>
   40bf4:	mov	r0, r4
   40bf8:	bl	38b10 <__assert_fail@plt+0x2651c>
   40bfc:	ldr	r4, [sp]
   40c00:	add	sp, sp, #4
   40c04:	mov	r0, #0
   40c08:	pop	{pc}		; (ldr pc, [sp], #4)
   40c0c:	ldr	r0, [r1, #20]
   40c10:	bl	38b10 <__assert_fail@plt+0x2651c>
   40c14:	ldr	r4, [sp]
   40c18:	add	sp, sp, #4
   40c1c:	mov	r0, #0
   40c20:	pop	{pc}		; (ldr pc, [sp], #4)
   40c24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   40c28:	mov	r4, r2
   40c2c:	strd	r6, [sp, #8]
   40c30:	lsl	r7, r1, #3
   40c34:	mov	r6, r0
   40c38:	strd	r8, [sp, #16]
   40c3c:	mov	r8, r1
   40c40:	strd	sl, [sp, #24]
   40c44:	mov	sl, #0
   40c48:	str	lr, [sp, #32]
   40c4c:	sub	sp, sp, #20
   40c50:	ldr	r9, [sp, #56]	; 0x38
   40c54:	str	r3, [sp, #8]
   40c58:	ldr	r2, [r6]
   40c5c:	mov	r5, r4
   40c60:	ldr	r1, [r6, #20]
   40c64:	add	r3, r2, r7
   40c68:	ldrb	r0, [r3, #4]
   40c6c:	cmp	r0, #4
   40c70:	beq	40e98 <__assert_fail@plt+0x2e8a4>
   40c74:	add	fp, r8, r8, lsl #1
   40c78:	lsl	fp, fp, #2
   40c7c:	add	ip, r1, fp
   40c80:	ldr	r0, [ip, #4]
   40c84:	cmp	r0, #0
   40c88:	beq	40fe8 <__assert_fail@plt+0x2e9f4>
   40c8c:	ldr	ip, [ip, #8]
   40c90:	add	r5, r4, r4, lsl #1
   40c94:	cmp	r0, #1
   40c98:	lsl	r5, r5, #2
   40c9c:	add	r0, r1, r5
   40ca0:	ldr	r7, [ip]
   40ca4:	beq	40de0 <__assert_fail@plt+0x2e7ec>
   40ca8:	ldr	ip, [r6, #8]
   40cac:	sub	r1, ip, #1
   40cb0:	add	r3, r2, r1, lsl #3
   40cb4:	cmp	r1, #0
   40cb8:	movle	lr, #0
   40cbc:	movgt	lr, #1
   40cc0:	ldrb	r4, [r3, #6]
   40cc4:	str	sl, [r0, #4]
   40cc8:	ands	lr, lr, r4, lsr #2
   40ccc:	beq	40f48 <__assert_fail@plt+0x2e954>
   40cd0:	ldr	lr, [r6, #16]
   40cd4:	add	r4, r2, ip, lsl #3
   40cd8:	sub	r4, r4, r3
   40cdc:	sub	r4, r4, #16
   40ce0:	add	lr, lr, ip, lsl #2
   40ce4:	b	40d08 <__assert_fail@plt+0x2e714>
   40ce8:	add	r3, r3, r4
   40cec:	sub	r1, r1, #1
   40cf0:	ldrb	r8, [r3, #6]
   40cf4:	cmp	r1, #0
   40cf8:	movle	ip, #0
   40cfc:	movgt	ip, #1
   40d00:	ands	ip, ip, r8, lsr #2
   40d04:	beq	40f48 <__assert_fail@plt+0x2e954>
   40d08:	ldr	ip, [lr, #-4]!
   40d0c:	cmp	ip, r7
   40d10:	bne	40ce8 <__assert_fail@plt+0x2e6f4>
   40d14:	ldr	ip, [r3, #4]
   40d18:	ubfx	ip, ip, #8, #10
   40d1c:	cmp	r9, ip
   40d20:	bne	40ce8 <__assert_fail@plt+0x2e6f4>
   40d24:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   40d28:	cmp	r0, #0
   40d2c:	beq	40dc0 <__assert_fail@plt+0x2e7cc>
   40d30:	ldr	r3, [r6]
   40d34:	mov	r0, r6
   40d38:	ldr	r2, [r6, #20]
   40d3c:	add	fp, r2, fp
   40d40:	ldr	r2, [fp, #8]
   40d44:	ldr	r8, [r2, #4]
   40d48:	lsl	r7, r8, #3
   40d4c:	add	r3, r3, r7
   40d50:	ldm	r3, {r1, r2}
   40d54:	bl	3cfdc <__assert_fail@plt+0x2a9e8>
   40d58:	cmn	r0, #1
   40d5c:	mov	r4, r0
   40d60:	beq	40dc0 <__assert_fail@plt+0x2e7cc>
   40d64:	ldr	r3, [r6]
   40d68:	mov	r1, r0
   40d6c:	ubfx	r2, r9, #0, #10
   40d70:	add	r0, r3, r0, lsl #3
   40d74:	add	ip, r3, r7
   40d78:	ldr	r3, [r0, #4]
   40d7c:	bfi	r3, r2, #8, #10
   40d80:	str	r3, [r0, #4]
   40d84:	ldr	ip, [ip, #4]
   40d88:	ubfx	ip, ip, #8, #10
   40d8c:	orr	r2, r2, ip
   40d90:	bfi	r3, r2, #8, #10
   40d94:	ubfx	r2, r3, #16, #8
   40d98:	str	r3, [r0, #4]
   40d9c:	orr	r3, r2, #4
   40da0:	strb	r3, [r0, #6]
   40da4:	ldr	r3, [r6, #16]
   40da8:	ldr	r0, [r6, #20]
   40dac:	str	r8, [r3, r4, lsl #2]
   40db0:	add	r0, r0, r5
   40db4:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   40db8:	cmp	r0, #0
   40dbc:	bne	40c58 <__assert_fail@plt+0x2e664>
   40dc0:	mov	r0, #12
   40dc4:	add	sp, sp, #20
   40dc8:	ldrd	r4, [sp]
   40dcc:	ldrd	r6, [sp, #8]
   40dd0:	ldrd	r8, [sp, #16]
   40dd4:	ldrd	sl, [sp, #24]
   40dd8:	add	sp, sp, #32
   40ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   40de0:	ldr	r1, [sp, #8]
   40de4:	cmp	r8, r4
   40de8:	str	sl, [r0, #4]
   40dec:	sub	r1, r8, r1
   40df0:	clz	r1, r1
   40df4:	lsr	r1, r1, #5
   40df8:	moveq	r1, #0
   40dfc:	cmp	r1, #0
   40e00:	bne	40ff8 <__assert_fail@plt+0x2ea04>
   40e04:	ldr	r3, [r3, #4]
   40e08:	lsl	fp, r7, #3
   40e0c:	mov	r0, r6
   40e10:	add	r2, r2, fp
   40e14:	ldm	r2, {r1, r2}
   40e18:	ubfx	r3, r3, #8, #10
   40e1c:	orr	r9, r9, r3
   40e20:	bl	3cfdc <__assert_fail@plt+0x2a9e8>
   40e24:	cmn	r0, #1
   40e28:	mov	r4, r0
   40e2c:	beq	40dc0 <__assert_fail@plt+0x2e7cc>
   40e30:	ldr	r3, [r6]
   40e34:	mov	r1, r0
   40e38:	ubfx	r2, r9, #0, #10
   40e3c:	add	r0, r3, r0, lsl #3
   40e40:	add	ip, r3, fp
   40e44:	ldr	r3, [r0, #4]
   40e48:	bfi	r3, r2, #8, #10
   40e4c:	str	r3, [r0, #4]
   40e50:	ldr	ip, [ip, #4]
   40e54:	ubfx	ip, ip, #8, #10
   40e58:	orr	r2, r2, ip
   40e5c:	bfi	r3, r2, #8, #10
   40e60:	ubfx	r2, r3, #16, #8
   40e64:	str	r3, [r0, #4]
   40e68:	orr	r3, r2, #4
   40e6c:	strb	r3, [r0, #6]
   40e70:	ldr	r3, [r6, #16]
   40e74:	ldr	r0, [r6, #20]
   40e78:	str	r7, [r3, r4, lsl #2]
   40e7c:	add	r0, r0, r5
   40e80:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   40e84:	cmp	r0, #0
   40e88:	beq	40dc0 <__assert_fail@plt+0x2e7cc>
   40e8c:	mov	r8, r7
   40e90:	mov	r7, fp
   40e94:	b	40c58 <__assert_fail@plt+0x2e664>
   40e98:	ldr	ip, [r6, #12]
   40e9c:	lsl	r3, r8, #2
   40ea0:	mov	r0, r6
   40ea4:	add	r4, r4, r4, lsl #1
   40ea8:	lsl	fp, r4, #2
   40eac:	str	r3, [sp, #12]
   40eb0:	ldr	r8, [ip, r8, lsl #2]
   40eb4:	add	r1, r1, fp
   40eb8:	str	sl, [r1, #4]
   40ebc:	lsl	r7, r8, #3
   40ec0:	add	r2, r2, r7
   40ec4:	ldm	r2, {r1, r2}
   40ec8:	bl	3cfdc <__assert_fail@plt+0x2a9e8>
   40ecc:	cmn	r0, #1
   40ed0:	mov	r4, r0
   40ed4:	ldr	r3, [sp, #12]
   40ed8:	beq	40dc0 <__assert_fail@plt+0x2e7cc>
   40edc:	ldr	lr, [r6]
   40ee0:	ubfx	r0, r9, #0, #10
   40ee4:	mov	r1, r4
   40ee8:	add	ip, lr, r4, lsl #3
   40eec:	add	lr, lr, r7
   40ef0:	ldr	r2, [ip, #4]
   40ef4:	bfi	r2, r0, #8, #10
   40ef8:	str	r2, [ip, #4]
   40efc:	ldr	lr, [lr, #4]
   40f00:	ubfx	lr, lr, #8, #10
   40f04:	orr	r0, r0, lr
   40f08:	bfi	r2, r0, #8, #10
   40f0c:	ubfx	r0, r2, #16, #8
   40f10:	str	r2, [ip, #4]
   40f14:	orr	r2, r0, #4
   40f18:	strb	r2, [ip, #6]
   40f1c:	ldr	r2, [r6, #12]
   40f20:	ldr	ip, [r6, #16]
   40f24:	ldr	r0, [r6, #20]
   40f28:	str	r8, [ip, r4, lsl #2]
   40f2c:	ldr	r3, [r2, r3]
   40f30:	add	r0, r0, fp
   40f34:	str	r3, [r2, r5, lsl #2]
   40f38:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   40f3c:	cmp	r0, #0
   40f40:	bne	40c58 <__assert_fail@plt+0x2e664>
   40f44:	b	40dc0 <__assert_fail@plt+0x2e7cc>
   40f48:	lsl	r4, r7, #3
   40f4c:	mov	r0, r6
   40f50:	add	r2, r2, r4
   40f54:	ldm	r2, {r1, r2}
   40f58:	bl	3cfdc <__assert_fail@plt+0x2a9e8>
   40f5c:	cmn	r0, #1
   40f60:	mov	r8, r0
   40f64:	beq	40dc0 <__assert_fail@plt+0x2e7cc>
   40f68:	ldr	r3, [r6]
   40f6c:	ubfx	r0, r9, #0, #10
   40f70:	mov	r1, r8
   40f74:	add	r2, r3, r8, lsl #3
   40f78:	add	r4, r3, r4
   40f7c:	ldr	r3, [r2, #4]
   40f80:	bfi	r3, r0, #8, #10
   40f84:	str	r3, [r2, #4]
   40f88:	ldr	ip, [r4, #4]
   40f8c:	ubfx	ip, ip, #8, #10
   40f90:	orr	r0, r0, ip
   40f94:	bfi	r3, r0, #8, #10
   40f98:	ubfx	r0, r3, #16, #8
   40f9c:	str	r3, [r2, #4]
   40fa0:	orr	r3, r0, #4
   40fa4:	strb	r3, [r2, #6]
   40fa8:	ldr	r3, [r6, #16]
   40fac:	ldr	r0, [r6, #20]
   40fb0:	str	r7, [r3, r8, lsl #2]
   40fb4:	add	r0, r0, r5
   40fb8:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   40fbc:	cmp	r0, #0
   40fc0:	beq	40dc0 <__assert_fail@plt+0x2e7cc>
   40fc4:	mov	r2, r8
   40fc8:	mov	r1, r7
   40fcc:	str	r9, [sp]
   40fd0:	mov	r0, r6
   40fd4:	ldr	r3, [sp, #8]
   40fd8:	bl	40c24 <__assert_fail@plt+0x2e630>
   40fdc:	cmp	r0, #0
   40fe0:	beq	40d30 <__assert_fail@plt+0x2e73c>
   40fe4:	b	40dc4 <__assert_fail@plt+0x2e7d0>
   40fe8:	ldr	r3, [r6, #12]
   40fec:	ldr	r2, [r3, r8, lsl #2]
   40ff0:	str	r2, [r3, r4, lsl #2]
   40ff4:	b	40dc4 <__assert_fail@plt+0x2e7d0>
   40ff8:	mov	r1, r7
   40ffc:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   41000:	cmp	r0, #0
   41004:	movne	r0, #0
   41008:	bne	40dc4 <__assert_fail@plt+0x2e7d0>
   4100c:	b	40dc0 <__assert_fail@plt+0x2e7cc>
   41010:	ldr	r3, [r0, #36]	; 0x24
   41014:	strd	r4, [sp, #-24]!	; 0xffffffe8
   41018:	strd	r6, [sp, #8]
   4101c:	str	r8, [sp, #16]
   41020:	str	lr, [sp, #20]
   41024:	cmn	r3, #-536870910	; 0xe0000002
   41028:	bhi	411f0 <__assert_fail@plt+0x2ebfc>
   4102c:	ldr	r2, [r0, #48]	; 0x30
   41030:	lsl	r3, r3, #1
   41034:	mov	r4, r0
   41038:	cmp	r3, r2
   4103c:	movge	r3, r2
   41040:	cmp	r3, r1
   41044:	movge	r1, r3
   41048:	bl	3c57c <__assert_fail@plt+0x29f88>
   4104c:	subs	r6, r0, #0
   41050:	bne	410bc <__assert_fail@plt+0x2eac8>
   41054:	ldr	r0, [r4, #100]	; 0x64
   41058:	cmp	r0, #0
   4105c:	beq	4107c <__assert_fail@plt+0x2ea88>
   41060:	ldr	r1, [r4, #36]	; 0x24
   41064:	add	r1, r1, #1
   41068:	lsl	r1, r1, #2
   4106c:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   41070:	cmp	r0, #0
   41074:	beq	411f0 <__assert_fail@plt+0x2ebfc>
   41078:	str	r0, [r4, #100]	; 0x64
   4107c:	ldrb	r3, [r4, #72]	; 0x48
   41080:	ldr	r2, [r4, #80]	; 0x50
   41084:	cmp	r3, #0
   41088:	beq	410d4 <__assert_fail@plt+0x2eae0>
   4108c:	cmp	r2, #1
   41090:	ble	4116c <__assert_fail@plt+0x2eb78>
   41094:	mov	r0, r4
   41098:	ldrd	r4, [sp]
   4109c:	ldrd	r6, [sp, #8]
   410a0:	ldr	r8, [sp, #16]
   410a4:	ldr	lr, [sp, #20]
   410a8:	add	sp, sp, #24
   410ac:	b	3c960 <__assert_fail@plt+0x2a36c>
   410b0:	mov	r1, r2
   410b4:	str	r1, [r4, #28]
   410b8:	str	r1, [r4, #32]
   410bc:	mov	r0, r6
   410c0:	ldrd	r4, [sp]
   410c4:	ldrd	r6, [sp, #8]
   410c8:	ldr	r8, [sp, #16]
   410cc:	add	sp, sp, #20
   410d0:	pop	{pc}		; (ldr pc, [sp], #4)
   410d4:	cmp	r2, #1
   410d8:	bgt	41160 <__assert_fail@plt+0x2eb6c>
   410dc:	ldr	r0, [r4, #64]	; 0x40
   410e0:	cmp	r0, #0
   410e4:	beq	410bc <__assert_fail@plt+0x2eac8>
   410e8:	ldr	r2, [r4, #28]
   410ec:	ldr	r1, [r4, #36]	; 0x24
   410f0:	ldr	r3, [r4, #48]	; 0x30
   410f4:	cmp	r1, r3
   410f8:	movge	r1, r3
   410fc:	cmp	r1, r2
   41100:	ble	410b0 <__assert_fail@plt+0x2eabc>
   41104:	ldm	r4, {ip, lr}
   41108:	add	r3, r2, #1
   4110c:	cmp	r1, r3
   41110:	ldr	r5, [r4, #24]
   41114:	add	ip, ip, r2
   41118:	ldrb	ip, [ip, r5]
   4111c:	ldrb	r0, [r0, ip]
   41120:	strb	r0, [lr, r2]
   41124:	ble	410b4 <__assert_fail@plt+0x2eac0>
   41128:	ldr	r2, [r4]
   4112c:	ldr	r0, [r4, #24]
   41130:	ldr	ip, [r4, #64]	; 0x40
   41134:	add	r2, r2, r3
   41138:	ldrb	r0, [r2, r0]
   4113c:	ldr	r2, [r4, #4]
   41140:	ldrb	r0, [ip, r0]
   41144:	strb	r0, [r2, r3]
   41148:	add	r3, r3, #1
   4114c:	cmp	r1, r3
   41150:	bne	41128 <__assert_fail@plt+0x2eb34>
   41154:	str	r1, [r4, #28]
   41158:	str	r1, [r4, #32]
   4115c:	b	410bc <__assert_fail@plt+0x2eac8>
   41160:	mov	r0, r4
   41164:	bl	3c784 <__assert_fail@plt+0x2a190>
   41168:	b	410bc <__assert_fail@plt+0x2eac8>
   4116c:	ldr	r5, [r4, #28]
   41170:	ldr	r7, [r4, #36]	; 0x24
   41174:	ldr	r3, [r4, #48]	; 0x30
   41178:	cmp	r7, r3
   4117c:	movge	r7, r3
   41180:	cmp	r7, r5
   41184:	ble	411f8 <__assert_fail@plt+0x2ec04>
   41188:	bl	122a0 <__ctype_toupper_loc@plt>
   4118c:	b	411a8 <__assert_fail@plt+0x2ebb4>
   41190:	ldr	r3, [r1, r3, lsl #2]
   41194:	ldr	r2, [r4, #4]
   41198:	strb	r3, [r2, r5]
   4119c:	add	r5, r5, #1
   411a0:	cmp	r7, r5
   411a4:	beq	411e4 <__assert_fail@plt+0x2ebf0>
   411a8:	ldr	r3, [r4]
   411ac:	ldr	r1, [r4, #24]
   411b0:	ldr	r2, [r4, #64]	; 0x40
   411b4:	add	r3, r3, r5
   411b8:	ldrb	r3, [r3, r1]
   411bc:	cmp	r2, #0
   411c0:	ldr	r1, [r0]
   411c4:	beq	41190 <__assert_fail@plt+0x2eb9c>
   411c8:	ldrb	r2, [r2, r3]
   411cc:	ldr	r3, [r4, #4]
   411d0:	ldr	r2, [r1, r2, lsl #2]
   411d4:	strb	r2, [r3, r5]
   411d8:	add	r5, r5, #1
   411dc:	cmp	r7, r5
   411e0:	bne	411a8 <__assert_fail@plt+0x2ebb4>
   411e4:	str	r7, [r4, #28]
   411e8:	str	r7, [r4, #32]
   411ec:	b	410bc <__assert_fail@plt+0x2eac8>
   411f0:	mov	r6, #12
   411f4:	b	410bc <__assert_fail@plt+0x2eac8>
   411f8:	mov	r7, r5
   411fc:	b	411e4 <__assert_fail@plt+0x2ebf0>
   41200:	strd	r4, [sp, #-32]!	; 0xffffffe0
   41204:	mov	r5, r1
   41208:	mov	r4, r2
   4120c:	strd	r6, [sp, #8]
   41210:	mov	r6, r0
   41214:	strd	r8, [sp, #16]
   41218:	mov	r8, r3
   4121c:	mov	r9, #1
   41220:	str	sl, [sp, #24]
   41224:	str	lr, [sp, #28]
   41228:	sub	sp, sp, #8
   4122c:	ldr	r7, [sp, #40]	; 0x28
   41230:	ldr	r1, [r5, #4]
   41234:	cmp	r1, #0
   41238:	ble	412b0 <__assert_fail@plt+0x2ecbc>
   4123c:	subs	r2, r1, #1
   41240:	ldr	ip, [r5, #8]
   41244:	moveq	r0, r2
   41248:	beq	412a4 <__assert_fail@plt+0x2ecb0>
   4124c:	mov	r0, #0
   41250:	add	r3, r0, r2
   41254:	lsr	r3, r3, #1
   41258:	ldr	lr, [ip, r3, lsl #2]
   4125c:	cmp	lr, r4
   41260:	blt	41334 <__assert_fail@plt+0x2ed40>
   41264:	cmp	r0, r3
   41268:	bcs	412a4 <__assert_fail@plt+0x2ecb0>
   4126c:	add	r2, r0, r3
   41270:	lsr	r2, r2, #1
   41274:	ldr	lr, [ip, r2, lsl #2]
   41278:	cmp	r4, lr
   4127c:	ble	41294 <__assert_fail@plt+0x2eca0>
   41280:	b	41328 <__assert_fail@plt+0x2ed34>
   41284:	ldr	lr, [ip, r3, lsl #2]
   41288:	cmp	r4, lr
   4128c:	bgt	41334 <__assert_fail@plt+0x2ed40>
   41290:	mov	r2, r3
   41294:	add	r3, r2, r0
   41298:	cmp	r2, r0
   4129c:	lsr	r3, r3, #1
   412a0:	bhi	41284 <__assert_fail@plt+0x2ec90>
   412a4:	ldr	r3, [ip, r0, lsl #2]
   412a8:	cmp	r4, r3
   412ac:	beq	4134c <__assert_fail@plt+0x2ed58>
   412b0:	ldr	r3, [r6]
   412b4:	add	r2, r3, r4, lsl #3
   412b8:	ldrb	r2, [r2, #4]
   412bc:	cmp	r2, r7
   412c0:	bne	412d0 <__assert_fail@plt+0x2ecdc>
   412c4:	ldr	r3, [r3, r4, lsl #3]
   412c8:	cmp	r3, r8
   412cc:	beq	41444 <__assert_fail@plt+0x2ee50>
   412d0:	ldr	r3, [r5]
   412d4:	cmp	r3, #0
   412d8:	beq	4136c <__assert_fail@plt+0x2ed78>
   412dc:	cmp	r1, #0
   412e0:	ldr	sl, [r5, #8]
   412e4:	bne	413c4 <__assert_fail@plt+0x2edd0>
   412e8:	str	r4, [sl]
   412ec:	ldr	r3, [r5, #4]
   412f0:	add	r3, r3, #1
   412f4:	str	r3, [r5, #4]
   412f8:	ldr	r3, [r6, #20]
   412fc:	add	r4, r4, r4, lsl #1
   41300:	lsl	r4, r4, #2
   41304:	add	r3, r3, r4
   41308:	ldr	r2, [r3, #4]
   4130c:	cmp	r2, #0
   41310:	beq	4134c <__assert_fail@plt+0x2ed58>
   41314:	cmp	r2, #2
   41318:	ldr	r3, [r3, #8]
   4131c:	beq	41394 <__assert_fail@plt+0x2eda0>
   41320:	ldr	r4, [r3]
   41324:	b	41230 <__assert_fail@plt+0x2ec3c>
   41328:	mov	r0, r2
   4132c:	mov	r2, r3
   41330:	mov	r3, r0
   41334:	add	r0, r3, #1
   41338:	cmp	r0, r2
   4133c:	bcc	41250 <__assert_fail@plt+0x2ec5c>
   41340:	ldr	r3, [ip, r0, lsl #2]
   41344:	cmp	r4, r3
   41348:	bne	412b0 <__assert_fail@plt+0x2ecbc>
   4134c:	mov	r0, #0
   41350:	add	sp, sp, #8
   41354:	ldrd	r4, [sp]
   41358:	ldrd	r6, [sp, #8]
   4135c:	ldrd	r8, [sp, #16]
   41360:	ldr	sl, [sp, #24]
   41364:	add	sp, sp, #28
   41368:	pop	{pc}		; (ldr pc, [sp], #4)
   4136c:	mov	r0, #4
   41370:	str	r9, [r5]
   41374:	str	r9, [r5, #4]
   41378:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4137c:	cmp	r0, #0
   41380:	mov	r3, r0
   41384:	str	r0, [r5, #8]
   41388:	beq	41468 <__assert_fail@plt+0x2ee74>
   4138c:	str	r4, [r0]
   41390:	b	412f8 <__assert_fail@plt+0x2ed04>
   41394:	mov	r1, r5
   41398:	mov	r0, r6
   4139c:	ldr	r2, [r3, #4]
   413a0:	mov	r3, r8
   413a4:	str	r7, [sp]
   413a8:	bl	41200 <__assert_fail@plt+0x2ec0c>
   413ac:	cmp	r0, #0
   413b0:	bne	41350 <__assert_fail@plt+0x2ed5c>
   413b4:	ldr	r3, [r6, #20]
   413b8:	add	r4, r3, r4
   413bc:	ldr	r3, [r4, #8]
   413c0:	b	41320 <__assert_fail@plt+0x2ed2c>
   413c4:	cmp	r1, r3
   413c8:	beq	41478 <__assert_fail@plt+0x2ee84>
   413cc:	ldr	r3, [sl]
   413d0:	mov	r2, r1
   413d4:	cmp	r4, r3
   413d8:	bge	4140c <__assert_fail@plt+0x2ee18>
   413dc:	cmp	r1, #0
   413e0:	ble	413f8 <__assert_fail@plt+0x2ee04>
   413e4:	lsl	r2, r1, #2
   413e8:	add	r0, sl, #4
   413ec:	mov	r1, sl
   413f0:	bl	11fb8 <memmove@plt>
   413f4:	mov	r2, #0
   413f8:	str	r4, [sl, r2, lsl #2]
   413fc:	ldr	r3, [r5, #4]
   41400:	add	r3, r3, #1
   41404:	str	r3, [r5, #4]
   41408:	b	412f8 <__assert_fail@plt+0x2ed04>
   4140c:	sub	r3, r1, #-1073741823	; 0xc0000001
   41410:	ldr	r0, [sl, r3, lsl #2]
   41414:	lsl	r3, r3, #2
   41418:	cmp	r4, r0
   4141c:	bge	413f8 <__assert_fail@plt+0x2ee04>
   41420:	add	r3, r3, #4
   41424:	add	r3, sl, r3
   41428:	str	r0, [r3], #-4
   4142c:	sub	r1, r1, #1
   41430:	ldr	r0, [r3, #-4]
   41434:	mov	r2, r1
   41438:	cmp	r4, r0
   4143c:	blt	41428 <__assert_fail@plt+0x2ee34>
   41440:	b	413f8 <__assert_fail@plt+0x2ee04>
   41444:	cmp	r7, #9
   41448:	bne	4134c <__assert_fail@plt+0x2ed58>
   4144c:	mov	r1, r4
   41450:	mov	r0, r5
   41454:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   41458:	cmp	r0, #0
   4145c:	bne	4134c <__assert_fail@plt+0x2ed58>
   41460:	mov	r0, #12
   41464:	b	41350 <__assert_fail@plt+0x2ed5c>
   41468:	mov	r0, #12
   4146c:	str	r3, [r5]
   41470:	str	r3, [r5, #4]
   41474:	b	41350 <__assert_fail@plt+0x2ed5c>
   41478:	lsl	r3, r1, #1
   4147c:	mov	r0, sl
   41480:	lsl	r1, r1, #3
   41484:	str	r3, [r5]
   41488:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   4148c:	subs	sl, r0, #0
   41490:	beq	41460 <__assert_fail@plt+0x2ee6c>
   41494:	str	sl, [r5, #8]
   41498:	ldr	r1, [r5, #4]
   4149c:	b	413cc <__assert_fail@plt+0x2edd8>
   414a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   414a4:	mov	r5, r2
   414a8:	mov	r4, r3
   414ac:	strd	r6, [sp, #8]
   414b0:	mov	r6, #0
   414b4:	mov	r7, r0
   414b8:	strd	r8, [sp, #16]
   414bc:	mov	r8, r1
   414c0:	ldr	r1, [r1, #4]
   414c4:	strd	sl, [sp, #24]
   414c8:	str	lr, [sp, #32]
   414cc:	sub	sp, sp, #28
   414d0:	lsl	r0, r1, #2
   414d4:	str	r1, [sp, #12]
   414d8:	str	r6, [sp, #16]
   414dc:	bl	3b49c <__assert_fail@plt+0x28ea8>
   414e0:	cmp	r0, r6
   414e4:	str	r0, [sp, #20]
   414e8:	beq	415e8 <__assert_fail@plt+0x2eff4>
   414ec:	ldr	r3, [r8, #4]
   414f0:	add	r9, sp, #12
   414f4:	cmp	r3, r6
   414f8:	ble	41590 <__assert_fail@plt+0x2ef9c>
   414fc:	ldr	r3, [r8, #8]
   41500:	ldr	r1, [r7, #24]
   41504:	ldr	r2, [r3, r6, lsl #2]
   41508:	add	r3, r2, r2, lsl #1
   4150c:	add	r1, r1, r3, lsl #2
   41510:	ldr	fp, [r1, #4]
   41514:	cmp	fp, #0
   41518:	ble	415b0 <__assert_fail@plt+0x2efbc>
   4151c:	ldr	ip, [r1, #8]
   41520:	mov	r3, #0
   41524:	ldr	sl, [r7]
   41528:	sub	ip, ip, #4
   4152c:	b	41538 <__assert_fail@plt+0x2ef44>
   41530:	cmp	fp, r3
   41534:	beq	415b0 <__assert_fail@plt+0x2efbc>
   41538:	ldr	r0, [ip, #4]!
   4153c:	add	r3, r3, #1
   41540:	add	lr, sl, r0, lsl #3
   41544:	ldrb	lr, [lr, #4]
   41548:	cmp	r4, lr
   4154c:	bne	41530 <__assert_fail@plt+0x2ef3c>
   41550:	ldr	lr, [sl, r0, lsl #3]
   41554:	cmp	r5, lr
   41558:	bne	41530 <__assert_fail@plt+0x2ef3c>
   4155c:	cmn	r0, #1
   41560:	beq	415b0 <__assert_fail@plt+0x2efbc>
   41564:	mov	r3, r5
   41568:	mov	r1, r9
   4156c:	str	r4, [sp]
   41570:	mov	r0, r7
   41574:	bl	41200 <__assert_fail@plt+0x2ec0c>
   41578:	subs	sl, r0, #0
   4157c:	bne	415c0 <__assert_fail@plt+0x2efcc>
   41580:	ldr	r3, [r8, #4]
   41584:	add	r6, r6, #1
   41588:	cmp	r3, r6
   4158c:	bgt	414fc <__assert_fail@plt+0x2ef08>
   41590:	ldr	r0, [r8, #8]
   41594:	mov	sl, #0
   41598:	bl	38b10 <__assert_fail@plt+0x2651c>
   4159c:	ldr	r1, [r9, #8]
   415a0:	ldrd	r2, [sp, #12]
   415a4:	strd	r2, [r8]
   415a8:	str	r1, [r8, #8]
   415ac:	b	415c8 <__assert_fail@plt+0x2efd4>
   415b0:	mov	r0, r9
   415b4:	bl	3d68c <__assert_fail@plt+0x2b098>
   415b8:	subs	sl, r0, #0
   415bc:	beq	41580 <__assert_fail@plt+0x2ef8c>
   415c0:	ldr	r0, [sp, #20]
   415c4:	bl	38b10 <__assert_fail@plt+0x2651c>
   415c8:	mov	r0, sl
   415cc:	add	sp, sp, #28
   415d0:	ldrd	r4, [sp]
   415d4:	ldrd	r6, [sp, #8]
   415d8:	ldrd	r8, [sp, #16]
   415dc:	ldrd	sl, [sp, #24]
   415e0:	add	sp, sp, #32
   415e4:	pop	{pc}		; (ldr pc, [sp], #4)
   415e8:	mov	sl, #12
   415ec:	b	415c8 <__assert_fail@plt+0x2efd4>
   415f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   415f4:	mov	r4, #0
   415f8:	strd	r6, [sp, #8]
   415fc:	mov	r6, r0
   41600:	add	r0, r1, r1, lsl #1
   41604:	strd	r8, [sp, #16]
   41608:	strd	sl, [sp, #24]
   4160c:	str	lr, [sp, #32]
   41610:	sub	sp, sp, #44	; 0x2c
   41614:	str	r1, [sp, #4]
   41618:	ldr	r1, [r6, #28]
   4161c:	str	r3, [sp, #16]
   41620:	str	r4, [sp, #28]
   41624:	str	r4, [sp, #32]
   41628:	str	r4, [sp, #36]	; 0x24
   4162c:	add	r9, r1, r0, lsl #2
   41630:	ldr	sl, [r9, #4]
   41634:	str	r9, [sp, #20]
   41638:	cmp	sl, r4
   4163c:	ble	41b1c <__assert_fail@plt+0x2f528>
   41640:	str	r2, [sp, #8]
   41644:	ldr	r1, [r9, #8]
   41648:	ldr	r3, [sp, #4]
   4164c:	ldr	r2, [r1, r4, lsl #2]
   41650:	cmp	r3, r2
   41654:	beq	41890 <__assert_fail@plt+0x2f29c>
   41658:	ldr	r3, [r6]
   4165c:	add	r3, r3, r2, lsl #3
   41660:	ldrb	r3, [r3, #4]
   41664:	tst	r3, #8
   41668:	beq	41890 <__assert_fail@plt+0x2f29c>
   4166c:	ldr	r3, [r6, #20]
   41670:	add	r2, r2, r2, lsl #1
   41674:	lsl	r2, r2, #2
   41678:	add	r3, r3, r2
   4167c:	ldmib	r3, {r0, r3}
   41680:	cmp	r0, #1
   41684:	mvnle	r7, #0
   41688:	ldrgt	r7, [r3, #4]
   4168c:	sub	lr, sl, #1
   41690:	cmp	lr, #0
   41694:	mov	ip, lr
   41698:	ldr	r5, [r3]
   4169c:	moveq	r8, lr
   416a0:	beq	41700 <__assert_fail@plt+0x2f10c>
   416a4:	mov	r0, lr
   416a8:	mov	r8, #0
   416ac:	add	r3, r0, r8
   416b0:	lsr	r3, r3, #1
   416b4:	ldr	fp, [r1, r3, lsl #2]
   416b8:	cmp	r5, fp
   416bc:	bgt	41a24 <__assert_fail@plt+0x2f430>
   416c0:	cmp	r3, r8
   416c4:	bls	41700 <__assert_fail@plt+0x2f10c>
   416c8:	add	r0, r3, r8
   416cc:	lsr	r0, r0, #1
   416d0:	ldr	fp, [r1, r0, lsl #2]
   416d4:	cmp	r5, fp
   416d8:	ble	416f0 <__assert_fail@plt+0x2f0fc>
   416dc:	b	41a18 <__assert_fail@plt+0x2f424>
   416e0:	ldr	fp, [r1, r3, lsl #2]
   416e4:	cmp	r5, fp
   416e8:	bgt	41a24 <__assert_fail@plt+0x2f430>
   416ec:	mov	r0, r3
   416f0:	add	r3, r8, r0
   416f4:	cmp	r8, r0
   416f8:	lsr	r3, r3, #1
   416fc:	bcc	416e0 <__assert_fail@plt+0x2f0ec>
   41700:	ldr	r3, [r1, r8, lsl #2]
   41704:	cmp	r5, r3
   41708:	beq	41798 <__assert_fail@plt+0x2f1a4>
   4170c:	ldr	r3, [sp, #8]
   41710:	ldr	r0, [r3, #4]
   41714:	cmp	r0, #0
   41718:	ble	41798 <__assert_fail@plt+0x2f1a4>
   4171c:	subs	r0, r0, #1
   41720:	ldr	fp, [r3, #8]
   41724:	moveq	r8, r0
   41728:	beq	4178c <__assert_fail@plt+0x2f198>
   4172c:	mov	r8, #0
   41730:	str	r2, [sp, #12]
   41734:	add	r3, r0, r8
   41738:	lsr	r3, r3, #1
   4173c:	ldr	r2, [fp, r3, lsl #2]
   41740:	cmp	r5, r2
   41744:	bgt	41ac4 <__assert_fail@plt+0x2f4d0>
   41748:	cmp	r3, r8
   4174c:	bls	41788 <__assert_fail@plt+0x2f194>
   41750:	add	r0, r3, r8
   41754:	lsr	r0, r0, #1
   41758:	ldr	r2, [fp, r0, lsl #2]
   4175c:	cmp	r5, r2
   41760:	ble	41778 <__assert_fail@plt+0x2f184>
   41764:	b	41ab8 <__assert_fail@plt+0x2f4c4>
   41768:	ldr	r2, [fp, r3, lsl #2]
   4176c:	cmp	r5, r2
   41770:	bgt	41ac4 <__assert_fail@plt+0x2f4d0>
   41774:	mov	r0, r3
   41778:	add	r3, r8, r0
   4177c:	cmp	r8, r0
   41780:	lsr	r3, r3, #1
   41784:	bcc	41768 <__assert_fail@plt+0x2f174>
   41788:	ldr	r2, [sp, #12]
   4178c:	ldr	r3, [fp, r8, lsl #2]
   41790:	cmp	r5, r3
   41794:	beq	41a94 <__assert_fail@plt+0x2f4a0>
   41798:	cmp	r7, #0
   4179c:	ble	41890 <__assert_fail@plt+0x2f29c>
   417a0:	cmp	lr, #0
   417a4:	movne	lr, #0
   417a8:	beq	41800 <__assert_fail@plt+0x2f20c>
   417ac:	add	r3, ip, lr
   417b0:	lsr	r3, r3, #1
   417b4:	ldr	r0, [r1, r3, lsl #2]
   417b8:	cmp	r0, r7
   417bc:	blt	41ae0 <__assert_fail@plt+0x2f4ec>
   417c0:	cmp	r3, lr
   417c4:	bls	41800 <__assert_fail@plt+0x2f20c>
   417c8:	add	ip, r3, lr
   417cc:	lsr	ip, ip, #1
   417d0:	ldr	r0, [r1, ip, lsl #2]
   417d4:	cmp	r7, r0
   417d8:	ble	417f0 <__assert_fail@plt+0x2f1fc>
   417dc:	b	41ad4 <__assert_fail@plt+0x2f4e0>
   417e0:	ldr	r0, [r1, r3, lsl #2]
   417e4:	cmp	r0, r7
   417e8:	blt	41ae0 <__assert_fail@plt+0x2f4ec>
   417ec:	mov	ip, r3
   417f0:	add	r3, lr, ip
   417f4:	cmp	lr, ip
   417f8:	lsr	r3, r3, #1
   417fc:	bcc	417e0 <__assert_fail@plt+0x2f1ec>
   41800:	ldr	r3, [r1, lr, lsl #2]
   41804:	cmp	r3, r7
   41808:	beq	41890 <__assert_fail@plt+0x2f29c>
   4180c:	ldr	r3, [sp, #8]
   41810:	ldr	r1, [r3, #4]
   41814:	cmp	r1, #0
   41818:	ble	41890 <__assert_fail@plt+0x2f29c>
   4181c:	subs	r1, r1, #1
   41820:	ldr	ip, [r3, #8]
   41824:	moveq	r0, r1
   41828:	beq	41884 <__assert_fail@plt+0x2f290>
   4182c:	mov	r0, #0
   41830:	add	r3, r1, r0
   41834:	lsr	r3, r3, #1
   41838:	ldr	lr, [ip, r3, lsl #2]
   4183c:	cmp	lr, r7
   41840:	blt	41afc <__assert_fail@plt+0x2f508>
   41844:	cmp	r3, r0
   41848:	bls	41884 <__assert_fail@plt+0x2f290>
   4184c:	add	r1, r3, r0
   41850:	lsr	r1, r1, #1
   41854:	ldr	lr, [ip, r1, lsl #2]
   41858:	cmp	r7, lr
   4185c:	ble	41874 <__assert_fail@plt+0x2f280>
   41860:	b	41af0 <__assert_fail@plt+0x2f4fc>
   41864:	ldr	lr, [ip, r3, lsl #2]
   41868:	cmp	lr, r7
   4186c:	blt	41afc <__assert_fail@plt+0x2f508>
   41870:	mov	r1, r3
   41874:	add	r3, r0, r1
   41878:	cmp	r0, r1
   4187c:	lsr	r3, r3, #1
   41880:	bcc	41864 <__assert_fail@plt+0x2f270>
   41884:	ldr	r3, [ip, r0, lsl #2]
   41888:	cmp	r3, r7
   4188c:	beq	41a94 <__assert_fail@plt+0x2f4a0>
   41890:	add	r4, r4, #1
   41894:	cmp	r4, sl
   41898:	blt	41644 <__assert_fail@plt+0x2f050>
   4189c:	cmp	sl, #0
   418a0:	ldr	r5, [sp, #8]
   418a4:	ldr	r0, [sp, #36]	; 0x24
   418a8:	ble	419d4 <__assert_fail@plt+0x2f3e0>
   418ac:	mov	r1, #0
   418b0:	ldr	r4, [sp, #20]
   418b4:	ldr	ip, [r4, #8]
   418b8:	sub	ip, ip, #4
   418bc:	ldr	r2, [sp, #32]
   418c0:	ldr	lr, [ip, #4]!
   418c4:	cmp	r2, #0
   418c8:	ble	4193c <__assert_fail@plt+0x2f348>
   418cc:	subs	r2, r2, #1
   418d0:	moveq	r7, r2
   418d4:	beq	41930 <__assert_fail@plt+0x2f33c>
   418d8:	mov	r7, #0
   418dc:	add	r3, r2, r7
   418e0:	lsr	r3, r3, #1
   418e4:	ldr	r6, [r0, r3, lsl #2]
   418e8:	cmp	r6, lr
   418ec:	blt	41a08 <__assert_fail@plt+0x2f414>
   418f0:	cmp	r3, r7
   418f4:	bls	41930 <__assert_fail@plt+0x2f33c>
   418f8:	add	r2, r3, r7
   418fc:	lsr	r2, r2, #1
   41900:	ldr	r6, [r0, r2, lsl #2]
   41904:	cmp	lr, r6
   41908:	ble	41920 <__assert_fail@plt+0x2f32c>
   4190c:	b	419fc <__assert_fail@plt+0x2f408>
   41910:	ldr	r6, [r0, r3, lsl #2]
   41914:	cmp	lr, r6
   41918:	bgt	41a08 <__assert_fail@plt+0x2f414>
   4191c:	mov	r2, r3
   41920:	add	r3, r7, r2
   41924:	cmp	r7, r2
   41928:	lsr	r3, r3, #1
   4192c:	bcc	41910 <__assert_fail@plt+0x2f31c>
   41930:	ldr	r3, [r0, r7, lsl #2]
   41934:	cmp	lr, r3
   41938:	beq	419c8 <__assert_fail@plt+0x2f3d4>
   4193c:	ldr	r7, [r5, #4]
   41940:	cmp	r7, #0
   41944:	ble	419c8 <__assert_fail@plt+0x2f3d4>
   41948:	sub	r8, r7, #1
   4194c:	ldr	r3, [r5, #8]
   41950:	cmp	r8, #0
   41954:	mov	r9, r8
   41958:	moveq	r6, r8
   4195c:	beq	419b8 <__assert_fail@plt+0x2f3c4>
   41960:	mov	r6, #0
   41964:	add	r2, r9, r6
   41968:	lsr	r2, r2, #1
   4196c:	ldr	fp, [r3, r2, lsl #2]
   41970:	cmp	lr, fp
   41974:	bgt	41a84 <__assert_fail@plt+0x2f490>
   41978:	cmp	r2, r6
   4197c:	bls	419b8 <__assert_fail@plt+0x2f3c4>
   41980:	add	r9, r2, r6
   41984:	lsr	r9, r9, #1
   41988:	ldr	fp, [r3, r9, lsl #2]
   4198c:	cmp	lr, fp
   41990:	ble	419a8 <__assert_fail@plt+0x2f3b4>
   41994:	b	41a78 <__assert_fail@plt+0x2f484>
   41998:	ldr	fp, [r3, r2, lsl #2]
   4199c:	cmp	lr, fp
   419a0:	bgt	41a84 <__assert_fail@plt+0x2f490>
   419a4:	mov	r9, r2
   419a8:	add	r2, r6, r9
   419ac:	cmp	r6, r9
   419b0:	lsr	r2, r2, #1
   419b4:	bcc	41998 <__assert_fail@plt+0x2f3a4>
   419b8:	ldr	r2, [r3, r6, lsl #2]
   419bc:	add	r3, r3, r6, lsl #2
   419c0:	cmp	lr, r2
   419c4:	beq	41a34 <__assert_fail@plt+0x2f440>
   419c8:	add	r1, r1, #1
   419cc:	cmp	r1, sl
   419d0:	blt	418bc <__assert_fail@plt+0x2f2c8>
   419d4:	mov	r7, #0
   419d8:	bl	38b10 <__assert_fail@plt+0x2651c>
   419dc:	mov	r0, r7
   419e0:	add	sp, sp, #44	; 0x2c
   419e4:	ldrd	r4, [sp]
   419e8:	ldrd	r6, [sp, #8]
   419ec:	ldrd	r8, [sp, #16]
   419f0:	ldrd	sl, [sp, #24]
   419f4:	add	sp, sp, #32
   419f8:	pop	{pc}		; (ldr pc, [sp], #4)
   419fc:	mov	r6, r2
   41a00:	mov	r2, r3
   41a04:	mov	r3, r6
   41a08:	add	r7, r3, #1
   41a0c:	cmp	r7, r2
   41a10:	bcc	418dc <__assert_fail@plt+0x2f2e8>
   41a14:	b	41930 <__assert_fail@plt+0x2f33c>
   41a18:	mov	r8, r3
   41a1c:	mov	r3, r0
   41a20:	mov	r0, r8
   41a24:	add	r8, r3, #1
   41a28:	cmp	r0, r8
   41a2c:	bhi	416ac <__assert_fail@plt+0x2f0b8>
   41a30:	b	41700 <__assert_fail@plt+0x2f10c>
   41a34:	cmp	r6, r7
   41a38:	mov	r2, r6
   41a3c:	movlt	r7, #0
   41a40:	movge	r7, #1
   41a44:	orrs	lr, r7, r6, lsr #31
   41a48:	bne	419c8 <__assert_fail@plt+0x2f3d4>
   41a4c:	cmp	r6, r8
   41a50:	str	r8, [r5, #4]
   41a54:	bge	41a70 <__assert_fail@plt+0x2f47c>
   41a58:	ldr	lr, [r3, #4]
   41a5c:	add	r2, r2, #1
   41a60:	str	lr, [r3], #4
   41a64:	ldr	lr, [r5, #4]
   41a68:	cmp	r2, lr
   41a6c:	blt	41a58 <__assert_fail@plt+0x2f464>
   41a70:	ldr	sl, [r4, #4]
   41a74:	b	419c8 <__assert_fail@plt+0x2f3d4>
   41a78:	mov	r6, r2
   41a7c:	mov	r2, r9
   41a80:	mov	r9, r6
   41a84:	add	r6, r2, #1
   41a88:	cmp	r6, r9
   41a8c:	bcc	41964 <__assert_fail@plt+0x2f370>
   41a90:	b	419b8 <__assert_fail@plt+0x2f3c4>
   41a94:	ldr	r3, [r6, #28]
   41a98:	add	r0, sp, #28
   41a9c:	ldr	r1, [sp, #16]
   41aa0:	add	r2, r3, r2
   41aa4:	bl	3d4a4 <__assert_fail@plt+0x2aeb0>
   41aa8:	cmp	r0, #0
   41aac:	bne	41b0c <__assert_fail@plt+0x2f518>
   41ab0:	ldr	sl, [r9, #4]
   41ab4:	b	41890 <__assert_fail@plt+0x2f29c>
   41ab8:	mov	r8, r0
   41abc:	mov	r0, r3
   41ac0:	mov	r3, r8
   41ac4:	add	r8, r3, #1
   41ac8:	cmp	r8, r0
   41acc:	bcc	41734 <__assert_fail@plt+0x2f140>
   41ad0:	b	41788 <__assert_fail@plt+0x2f194>
   41ad4:	mov	r0, ip
   41ad8:	mov	ip, r3
   41adc:	mov	r3, r0
   41ae0:	add	lr, r3, #1
   41ae4:	cmp	lr, ip
   41ae8:	bcc	417ac <__assert_fail@plt+0x2f1b8>
   41aec:	b	41800 <__assert_fail@plt+0x2f20c>
   41af0:	mov	r0, r1
   41af4:	mov	r1, r3
   41af8:	mov	r3, r0
   41afc:	add	r0, r3, #1
   41b00:	cmp	r0, r1
   41b04:	bcc	41830 <__assert_fail@plt+0x2f23c>
   41b08:	b	41884 <__assert_fail@plt+0x2f290>
   41b0c:	mov	r7, r0
   41b10:	ldr	r0, [sp, #36]	; 0x24
   41b14:	bl	38b10 <__assert_fail@plt+0x2651c>
   41b18:	b	419dc <__assert_fail@plt+0x2f3e8>
   41b1c:	mov	r0, r4
   41b20:	b	419d4 <__assert_fail@plt+0x2f3e0>
   41b24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   41b28:	mov	r5, r2
   41b2c:	ldr	r2, [r1, #20]
   41b30:	strd	r6, [sp, #8]
   41b34:	mov	r7, r1
   41b38:	strd	r8, [sp, #16]
   41b3c:	add	r9, r5, r5, lsl #1
   41b40:	strd	sl, [sp, #24]
   41b44:	lsl	r9, r9, #2
   41b48:	str	lr, [sp, #32]
   41b4c:	sub	sp, sp, #44	; 0x2c
   41b50:	add	r2, r2, r9
   41b54:	str	r0, [sp, #16]
   41b58:	ldr	r2, [r2, #4]
   41b5c:	str	r3, [sp, #20]
   41b60:	add	r3, r2, #1
   41b64:	lsl	r0, r3, #2
   41b68:	str	r3, [sp, #8]
   41b6c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   41b70:	subs	r4, r0, #0
   41b74:	beq	41e90 <__assert_fail@plt+0x2f89c>
   41b78:	ldr	ip, [r7]
   41b7c:	lsl	r6, r5, #3
   41b80:	mov	r3, #65280	; 0xff00
   41b84:	movt	r3, #3
   41b88:	str	r5, [r4]
   41b8c:	mvn	r8, #0
   41b90:	ldr	r1, [r7, #24]
   41b94:	add	r0, ip, r6
   41b98:	ldr	lr, [r0, #4]
   41b9c:	add	r2, r1, r9
   41ba0:	str	r8, [r2, #4]
   41ba4:	and	r3, r3, lr
   41ba8:	cmp	r3, #0
   41bac:	beq	41bdc <__assert_fail@plt+0x2f5e8>
   41bb0:	ldr	r3, [r7, #20]
   41bb4:	add	r3, r3, r9
   41bb8:	ldr	r8, [r3, #4]
   41bbc:	cmp	r8, #0
   41bc0:	beq	41e54 <__assert_fail@plt+0x2f860>
   41bc4:	ldr	r3, [r3, #8]
   41bc8:	ldr	r3, [r3]
   41bcc:	add	ip, ip, r3, lsl #3
   41bd0:	ldrb	r3, [ip, #6]
   41bd4:	tst	r3, #4
   41bd8:	beq	41e5c <__assert_fail@plt+0x2f868>
   41bdc:	ldrb	r3, [r0, #4]
   41be0:	tst	r3, #8
   41be4:	beq	41d80 <__assert_fail@plt+0x2f78c>
   41be8:	ldr	ip, [r7, #20]
   41bec:	add	r3, ip, r9
   41bf0:	ldr	r2, [r3, #4]
   41bf4:	cmp	r2, #0
   41bf8:	ble	41d80 <__assert_fail@plt+0x2f78c>
   41bfc:	mov	r2, #0
   41c00:	mov	sl, #1
   41c04:	mov	r8, r2
   41c08:	str	r2, [sp, #12]
   41c0c:	ldr	r3, [r3, #8]
   41c10:	ldr	r2, [r3, r8, lsl #2]
   41c14:	add	r6, r2, r2, lsl #1
   41c18:	lsl	r6, r6, #2
   41c1c:	add	r0, r1, r6
   41c20:	ldr	r3, [r0, #4]
   41c24:	cmn	r3, #1
   41c28:	moveq	r3, #1
   41c2c:	streq	r3, [sp, #12]
   41c30:	beq	41d48 <__assert_fail@plt+0x2f754>
   41c34:	cmp	r3, #0
   41c38:	beq	41de8 <__assert_fail@plt+0x2f7f4>
   41c3c:	ldrd	r2, [r0]
   41c40:	strd	r2, [sp, #28]
   41c44:	ldr	r3, [r0, #8]
   41c48:	str	r3, [sp, #36]	; 0x24
   41c4c:	ldr	r2, [sp, #32]
   41c50:	cmp	r2, #0
   41c54:	mov	r3, r2
   41c58:	beq	41d30 <__assert_fail@plt+0x2f73c>
   41c5c:	ldr	r1, [sp, #8]
   41c60:	add	fp, sl, r2, lsl #1
   41c64:	cmp	r1, fp
   41c68:	blt	41e1c <__assert_fail@plt+0x2f828>
   41c6c:	cmp	sl, #0
   41c70:	beq	41e98 <__assert_fail@plt+0x2f8a4>
   41c74:	sub	r2, r2, #1
   41c78:	sub	r5, sl, #1
   41c7c:	ldr	r1, [sp, #36]	; 0x24
   41c80:	cmp	r2, #0
   41c84:	cmpge	r5, #0
   41c88:	mvn	r0, r2
   41c8c:	blt	41cd8 <__assert_fail@plt+0x2f6e4>
   41c90:	mov	r3, r5
   41c94:	ldr	lr, [r4, r3, lsl #2]
   41c98:	ldr	ip, [r1, r2, lsl #2]
   41c9c:	cmp	lr, ip
   41ca0:	subeq	r2, r2, #1
   41ca4:	subeq	r3, r3, #1
   41ca8:	mvneq	r0, r2
   41cac:	beq	41cc8 <__assert_fail@plt+0x2f6d4>
   41cb0:	subge	r3, r3, #1
   41cb4:	bge	41cc8 <__assert_fail@plt+0x2f6d4>
   41cb8:	sub	r2, r2, #1
   41cbc:	sub	fp, fp, #1
   41cc0:	mvn	r0, r2
   41cc4:	str	ip, [r4, fp, lsl #2]
   41cc8:	mvn	ip, r3
   41ccc:	lsr	ip, ip, #31
   41cd0:	ands	ip, ip, r0, lsr #31
   41cd4:	bne	41c94 <__assert_fail@plt+0x2f6a0>
   41cd8:	cmp	r2, #0
   41cdc:	blt	41cf4 <__assert_fail@plt+0x2f700>
   41ce0:	add	r2, r2, #1
   41ce4:	sub	fp, fp, r2
   41ce8:	lsl	r2, r2, #2
   41cec:	add	r0, r4, fp, lsl #2
   41cf0:	bl	12024 <memcpy@plt>
   41cf4:	ldr	r3, [sp, #32]
   41cf8:	add	r3, sl, r3, lsl #1
   41cfc:	subs	r2, r3, fp
   41d00:	sub	r3, r3, #1
   41d04:	beq	41d30 <__assert_fail@plt+0x2f73c>
   41d08:	add	sl, sl, r2
   41d0c:	ldr	ip, [r4, r3, lsl #2]
   41d10:	add	r1, r5, r2
   41d14:	ldr	r0, [r4, r5, lsl #2]
   41d18:	cmp	ip, r0
   41d1c:	ble	41dc8 <__assert_fail@plt+0x2f7d4>
   41d20:	subs	r2, r2, #1
   41d24:	sub	r3, r3, #1
   41d28:	str	ip, [r4, r1, lsl #2]
   41d2c:	bne	41d0c <__assert_fail@plt+0x2f718>
   41d30:	ldr	r1, [r7, #24]
   41d34:	add	r6, r1, r6
   41d38:	ldr	r3, [r6, #4]
   41d3c:	cmp	r3, #0
   41d40:	beq	41e00 <__assert_fail@plt+0x2f80c>
   41d44:	ldr	ip, [r7, #20]
   41d48:	add	r3, ip, r9
   41d4c:	add	r8, r8, #1
   41d50:	ldr	r2, [r3, #4]
   41d54:	cmp	r2, r8
   41d58:	bgt	41c0c <__assert_fail@plt+0x2f618>
   41d5c:	ldr	r0, [sp, #12]
   41d60:	add	r2, r1, r9
   41d64:	ldr	r3, [sp, #20]
   41d68:	eor	r3, r3, #1
   41d6c:	tst	r0, r3
   41d70:	beq	41d88 <__assert_fail@plt+0x2f794>
   41d74:	mov	r3, #0
   41d78:	str	r3, [r2, #4]
   41d7c:	b	41d98 <__assert_fail@plt+0x2f7a4>
   41d80:	mov	sl, #1
   41d84:	add	r2, r1, r9
   41d88:	ldr	r3, [sp, #8]
   41d8c:	str	r3, [r1, r9]
   41d90:	str	sl, [r2, #4]
   41d94:	str	r4, [r2, #8]
   41d98:	ldr	r2, [sp, #8]
   41d9c:	mov	r0, #0
   41da0:	ldr	r3, [sp, #16]
   41da4:	stm	r3, {r2, sl}
   41da8:	str	r4, [r3, #8]
   41dac:	add	sp, sp, #44	; 0x2c
   41db0:	ldrd	r4, [sp]
   41db4:	ldrd	r6, [sp, #8]
   41db8:	ldrd	r8, [sp, #16]
   41dbc:	ldrd	sl, [sp, #24]
   41dc0:	add	sp, sp, #32
   41dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   41dc8:	subs	r5, r5, #1
   41dcc:	str	r0, [r4, r1, lsl #2]
   41dd0:	bpl	41d0c <__assert_fail@plt+0x2f718>
   41dd4:	lsl	r2, r2, #2
   41dd8:	mov	r0, r4
   41ddc:	add	r1, r4, fp, lsl #2
   41de0:	bl	12024 <memcpy@plt>
   41de4:	b	41d30 <__assert_fail@plt+0x2f73c>
   41de8:	mov	r1, r7
   41dec:	add	r0, sp, #28
   41df0:	bl	41b24 <__assert_fail@plt+0x2f530>
   41df4:	cmp	r0, #0
   41df8:	beq	41c4c <__assert_fail@plt+0x2f658>
   41dfc:	b	41dac <__assert_fail@plt+0x2f7b8>
   41e00:	mov	r3, #1
   41e04:	ldr	r0, [sp, #36]	; 0x24
   41e08:	str	r3, [sp, #12]
   41e0c:	bl	38b10 <__assert_fail@plt+0x2651c>
   41e10:	ldr	ip, [r7, #20]
   41e14:	ldr	r1, [r7, #24]
   41e18:	b	41d48 <__assert_fail@plt+0x2f754>
   41e1c:	add	r2, r1, r2
   41e20:	mov	r0, r4
   41e24:	lsl	r3, r2, #1
   41e28:	lsl	r1, r2, #3
   41e2c:	str	r3, [sp, #8]
   41e30:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   41e34:	subs	r4, r0, #0
   41e38:	beq	41e90 <__assert_fail@plt+0x2f89c>
   41e3c:	cmp	sl, #0
   41e40:	ldreq	r3, [sp, #32]
   41e44:	beq	41e98 <__assert_fail@plt+0x2f8a4>
   41e48:	ldr	r2, [sp, #32]
   41e4c:	add	fp, sl, r2, lsl #1
   41e50:	b	41c74 <__assert_fail@plt+0x2f680>
   41e54:	mov	sl, #1
   41e58:	b	41d88 <__assert_fail@plt+0x2f794>
   41e5c:	ubfx	lr, lr, #8, #10
   41e60:	mov	r3, r5
   41e64:	mov	r2, r5
   41e68:	mov	r1, r5
   41e6c:	mov	r0, r7
   41e70:	str	lr, [sp]
   41e74:	bl	40c24 <__assert_fail@plt+0x2e630>
   41e78:	cmp	r0, #0
   41e7c:	bne	41dac <__assert_fail@plt+0x2f7b8>
   41e80:	ldr	r0, [r7]
   41e84:	ldr	r1, [r7, #24]
   41e88:	add	r0, r0, r6
   41e8c:	b	41bdc <__assert_fail@plt+0x2f5e8>
   41e90:	mov	r0, #12
   41e94:	b	41dac <__assert_fail@plt+0x2f7b8>
   41e98:	mov	r0, r4
   41e9c:	lsl	r2, r3, #2
   41ea0:	ldr	r1, [sp, #36]	; 0x24
   41ea4:	mov	sl, r3
   41ea8:	bl	12024 <memcpy@plt>
   41eac:	b	41d30 <__assert_fail@plt+0x2f73c>
   41eb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   41eb4:	strd	r6, [sp, #8]
   41eb8:	strd	r8, [sp, #16]
   41ebc:	ldr	r8, [r2, #4]
   41ec0:	strd	sl, [sp, #24]
   41ec4:	str	lr, [sp, #32]
   41ec8:	sub	sp, sp, #4
   41ecc:	cmp	r8, #0
   41ed0:	moveq	r4, r8
   41ed4:	streq	r8, [r0]
   41ed8:	beq	42098 <__assert_fail@plt+0x2faa4>
   41edc:	mov	r5, r8
   41ee0:	ble	41efc <__assert_fail@plt+0x2f908>
   41ee4:	ldr	r3, [r2, #8]
   41ee8:	add	lr, r3, r8, lsl #2
   41eec:	ldr	ip, [r3], #4
   41ef0:	cmp	r3, lr
   41ef4:	add	r5, r5, ip
   41ef8:	bne	41eec <__assert_fail@plt+0x2f8f8>
   41efc:	ldr	ip, [r1, #32]
   41f00:	ldr	r3, [r1, #68]	; 0x44
   41f04:	and	r3, r3, r5
   41f08:	add	r3, r3, r3, lsl #1
   41f0c:	lsl	r3, r3, #2
   41f10:	ldr	r9, [ip, r3]
   41f14:	add	r3, ip, r3
   41f18:	cmp	r9, #0
   41f1c:	ble	41f64 <__assert_fail@plt+0x2f970>
   41f20:	ldr	lr, [r3, #8]
   41f24:	mov	ip, #0
   41f28:	sub	lr, lr, #4
   41f2c:	b	41f3c <__assert_fail@plt+0x2f948>
   41f30:	add	ip, ip, #1
   41f34:	cmp	ip, r9
   41f38:	beq	41f64 <__assert_fail@plt+0x2f970>
   41f3c:	ldr	r4, [lr, #4]!
   41f40:	ldr	r3, [r4]
   41f44:	cmp	r3, r5
   41f48:	bne	41f30 <__assert_fail@plt+0x2f93c>
   41f4c:	ldr	r3, [r4, #8]
   41f50:	cmp	r8, r3
   41f54:	beq	42090 <__assert_fail@plt+0x2fa9c>
   41f58:	add	ip, ip, #1
   41f5c:	cmp	ip, r9
   41f60:	bne	41f3c <__assert_fail@plt+0x2f948>
   41f64:	mov	r6, r1
   41f68:	mov	r7, r0
   41f6c:	mov	r1, #1
   41f70:	mov	r0, #56	; 0x38
   41f74:	mov	r9, r2
   41f78:	bl	384e0 <__assert_fail@plt+0x25eec>
   41f7c:	subs	r4, r0, #0
   41f80:	beq	42130 <__assert_fail@plt+0x2fb3c>
   41f84:	ldr	r3, [r9, #4]
   41f88:	add	r8, r4, #4
   41f8c:	cmp	r3, #0
   41f90:	str	r3, [r4, #8]
   41f94:	ble	420b8 <__assert_fail@plt+0x2fac4>
   41f98:	lsl	r0, r3, #2
   41f9c:	str	r3, [r4, #4]
   41fa0:	bl	3b49c <__assert_fail@plt+0x28ea8>
   41fa4:	cmp	r0, #0
   41fa8:	mov	r3, r0
   41fac:	str	r0, [r4, #12]
   41fb0:	beq	42168 <__assert_fail@plt+0x2fb74>
   41fb4:	ldr	sl, [r9, #4]
   41fb8:	ldr	r1, [r9, #8]
   41fbc:	lsl	fp, sl, #2
   41fc0:	mov	r2, fp
   41fc4:	bl	12024 <memcpy@plt>
   41fc8:	cmp	sl, #0
   41fcc:	str	r8, [r4, #40]	; 0x28
   41fd0:	ble	420cc <__assert_fail@plt+0x2fad8>
   41fd4:	ldr	r1, [r9, #8]
   41fd8:	mov	sl, #65280	; 0xff00
   41fdc:	movt	sl, #3
   41fe0:	ldr	r9, [r6]
   41fe4:	add	lr, fp, r1
   41fe8:	b	4202c <__assert_fail@plt+0x2fa38>
   41fec:	ldrb	r2, [r4, #52]	; 0x34
   41ff0:	cmp	r0, #2
   41ff4:	ldrb	fp, [r3, #6]
   41ff8:	ubfx	ip, r2, #5, #1
   41ffc:	ubfx	fp, fp, #4, #1
   42000:	orr	ip, ip, fp
   42004:	bfi	r2, ip, #5, #1
   42008:	strb	r2, [r4, #52]	; 0x34
   4200c:	beq	42140 <__assert_fail@plt+0x2fb4c>
   42010:	cmp	r0, #4
   42014:	bne	42150 <__assert_fail@plt+0x2fb5c>
   42018:	ldrb	r3, [r4, #52]	; 0x34
   4201c:	orr	r3, r3, #64	; 0x40
   42020:	strb	r3, [r4, #52]	; 0x34
   42024:	cmp	lr, r1
   42028:	beq	420cc <__assert_fail@plt+0x2fad8>
   4202c:	ldr	r3, [r1], #4
   42030:	add	r3, r9, r3, lsl #3
   42034:	ldrb	r0, [r3, #4]
   42038:	cmp	r0, #1
   4203c:	bne	41fec <__assert_fail@plt+0x2f9f8>
   42040:	ldr	r2, [r3, #4]
   42044:	tst	sl, r2
   42048:	beq	42024 <__assert_fail@plt+0x2fa30>
   4204c:	ldrb	r2, [r3, #6]
   42050:	ldrb	r3, [r4, #52]	; 0x34
   42054:	ubfx	r0, r2, #4, #1
   42058:	ubfx	r2, r3, #5, #1
   4205c:	orr	r2, r2, r0
   42060:	bfi	r3, r2, #5, #1
   42064:	strb	r3, [r4, #52]	; 0x34
   42068:	ldrb	r3, [r4, #52]	; 0x34
   4206c:	orr	r3, r3, #128	; 0x80
   42070:	strb	r3, [r4, #52]	; 0x34
   42074:	b	42024 <__assert_fail@plt+0x2fa30>
   42078:	ldr	r6, [r2, #8]
   4207c:	ldr	r7, [r4, #12]
   42080:	ldr	r6, [r6, r3, lsl #2]
   42084:	ldr	r7, [r7, r3, lsl #2]
   42088:	cmp	r7, r6
   4208c:	bne	41f30 <__assert_fail@plt+0x2f93c>
   42090:	subs	r3, r3, #1
   42094:	bpl	42078 <__assert_fail@plt+0x2fa84>
   42098:	mov	r0, r4
   4209c:	add	sp, sp, #4
   420a0:	ldrd	r4, [sp]
   420a4:	ldrd	r6, [sp, #8]
   420a8:	ldrd	r8, [sp, #16]
   420ac:	ldrd	sl, [sp, #24]
   420b0:	add	sp, sp, #32
   420b4:	pop	{pc}		; (ldr pc, [sp], #4)
   420b8:	mov	r3, #0
   420bc:	str	r3, [r4, #4]
   420c0:	str	r3, [r8, #4]
   420c4:	str	r3, [r8, #8]
   420c8:	str	r8, [r4, #40]	; 0x28
   420cc:	mov	r2, r5
   420d0:	mov	r0, r6
   420d4:	mov	r1, r4
   420d8:	bl	3c634 <__assert_fail@plt+0x2a040>
   420dc:	cmp	r0, #0
   420e0:	beq	42098 <__assert_fail@plt+0x2faa4>
   420e4:	ldr	r0, [r4, #24]
   420e8:	bl	38b10 <__assert_fail@plt+0x2651c>
   420ec:	ldr	r0, [r4, #36]	; 0x24
   420f0:	bl	38b10 <__assert_fail@plt+0x2651c>
   420f4:	ldr	r3, [r4, #40]	; 0x28
   420f8:	cmp	r8, r3
   420fc:	beq	42110 <__assert_fail@plt+0x2fb1c>
   42100:	ldr	r0, [r3, #8]
   42104:	bl	38b10 <__assert_fail@plt+0x2651c>
   42108:	ldr	r0, [r4, #40]	; 0x28
   4210c:	bl	38b10 <__assert_fail@plt+0x2651c>
   42110:	ldr	r0, [r4, #12]
   42114:	bl	38b10 <__assert_fail@plt+0x2651c>
   42118:	ldr	r0, [r4, #48]	; 0x30
   4211c:	bl	38b10 <__assert_fail@plt+0x2651c>
   42120:	ldr	r0, [r4, #44]	; 0x2c
   42124:	bl	38b10 <__assert_fail@plt+0x2651c>
   42128:	mov	r0, r4
   4212c:	bl	38b10 <__assert_fail@plt+0x2651c>
   42130:	mov	r3, #12
   42134:	mov	r4, #0
   42138:	str	r3, [r7]
   4213c:	b	42098 <__assert_fail@plt+0x2faa4>
   42140:	uxtb	r3, r2
   42144:	orr	r3, r3, #16
   42148:	strb	r3, [r4, #52]	; 0x34
   4214c:	b	42024 <__assert_fail@plt+0x2fa30>
   42150:	cmp	r0, #12
   42154:	beq	42068 <__assert_fail@plt+0x2fa74>
   42158:	ldr	r3, [r3, #4]
   4215c:	tst	sl, r3
   42160:	beq	42024 <__assert_fail@plt+0x2fa30>
   42164:	b	42068 <__assert_fail@plt+0x2fa74>
   42168:	mov	r0, r4
   4216c:	str	r3, [r4, #4]
   42170:	str	r3, [r4, #8]
   42174:	bl	38b10 <__assert_fail@plt+0x2651c>
   42178:	b	42130 <__assert_fail@plt+0x2fb3c>
   4217c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   42180:	strd	r6, [sp, #8]
   42184:	ldr	r6, [r0, #108]	; 0x6c
   42188:	strd	r8, [sp, #16]
   4218c:	strd	sl, [sp, #24]
   42190:	str	lr, [sp, #32]
   42194:	sub	sp, sp, #44	; 0x2c
   42198:	cmp	r6, #0
   4219c:	ble	422fc <__assert_fail@plt+0x2fd08>
   421a0:	ldr	r4, [r0, #116]	; 0x74
   421a4:	mov	r5, r6
   421a8:	mov	r9, #0
   421ac:	add	ip, r5, r9
   421b0:	asr	ip, ip, #1
   421b4:	add	lr, ip, ip, lsl #1
   421b8:	add	lr, r4, lr, lsl #3
   421bc:	ldr	lr, [lr, #4]
   421c0:	cmp	r2, lr
   421c4:	bgt	42620 <__assert_fail@plt+0x3002c>
   421c8:	cmp	ip, r9
   421cc:	ble	42218 <__assert_fail@plt+0x2fc24>
   421d0:	add	r5, ip, r9
   421d4:	asr	r5, r5, #1
   421d8:	add	lr, r5, r5, lsl #1
   421dc:	add	lr, r4, lr, lsl #3
   421e0:	ldr	lr, [lr, #4]
   421e4:	cmp	r2, lr
   421e8:	ble	42208 <__assert_fail@plt+0x2fc14>
   421ec:	b	42614 <__assert_fail@plt+0x30020>
   421f0:	add	lr, ip, ip, lsl #1
   421f4:	add	lr, r4, lr, lsl #3
   421f8:	ldr	lr, [lr, #4]
   421fc:	cmp	r2, lr
   42200:	bgt	42620 <__assert_fail@plt+0x3002c>
   42204:	mov	r5, ip
   42208:	add	ip, r9, r5
   4220c:	cmp	r9, r5
   42210:	asr	ip, ip, #1
   42214:	blt	421f0 <__assert_fail@plt+0x2fbfc>
   42218:	cmp	r6, r9
   4221c:	ble	422fc <__assert_fail@plt+0x2fd08>
   42220:	add	r9, r9, r9, lsl #1
   42224:	lsl	ip, r9, #3
   42228:	add	lr, r4, ip
   4222c:	ldr	lr, [lr, #4]
   42230:	cmp	r2, lr
   42234:	bne	422fc <__assert_fail@plt+0x2fd08>
   42238:	ldr	r9, [r0, #84]	; 0x54
   4223c:	mov	r6, r2
   42240:	mov	r7, r1
   42244:	mov	r8, r0
   42248:	str	r3, [sp, #12]
   4224c:	add	r3, ip, #24
   42250:	str	r3, [sp, #8]
   42254:	ldr	r3, [sp, #8]
   42258:	add	r4, r4, r3
   4225c:	ldr	lr, [r7, #4]
   42260:	cmp	lr, #0
   42264:	ble	422ec <__assert_fail@plt+0x2fcf8>
   42268:	sub	lr, lr, #1
   4226c:	ldr	ip, [r4, #-24]	; 0xffffffe8
   42270:	cmp	lr, #0
   42274:	mov	r1, lr
   42278:	moveq	r5, lr
   4227c:	ldr	r2, [r7, #8]
   42280:	beq	422e0 <__assert_fail@plt+0x2fcec>
   42284:	mov	r0, lr
   42288:	mov	r5, #0
   4228c:	add	r3, r0, r5
   42290:	lsr	r3, r3, #1
   42294:	ldr	sl, [r2, r3, lsl #2]
   42298:	cmp	ip, sl
   4229c:	bgt	42328 <__assert_fail@plt+0x2fd34>
   422a0:	cmp	r3, r5
   422a4:	bls	422e0 <__assert_fail@plt+0x2fcec>
   422a8:	add	r0, r3, r5
   422ac:	lsr	r0, r0, #1
   422b0:	ldr	sl, [r2, r0, lsl #2]
   422b4:	cmp	ip, sl
   422b8:	ble	422d0 <__assert_fail@plt+0x2fcdc>
   422bc:	b	4231c <__assert_fail@plt+0x2fd28>
   422c0:	ldr	sl, [r2, r3, lsl #2]
   422c4:	cmp	ip, sl
   422c8:	bgt	42328 <__assert_fail@plt+0x2fd34>
   422cc:	mov	r0, r3
   422d0:	add	r3, r5, r0
   422d4:	cmp	r5, r0
   422d8:	lsr	r3, r3, #1
   422dc:	bcc	422c0 <__assert_fail@plt+0x2fccc>
   422e0:	ldr	r3, [r2, r5, lsl #2]
   422e4:	cmp	ip, r3
   422e8:	beq	42340 <__assert_fail@plt+0x2fd4c>
   422ec:	add	r4, r4, #24
   422f0:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   422f4:	cmp	r3, #0
   422f8:	bne	4225c <__assert_fail@plt+0x2fc68>
   422fc:	mov	r0, #0
   42300:	add	sp, sp, #44	; 0x2c
   42304:	ldrd	r4, [sp]
   42308:	ldrd	r6, [sp, #8]
   4230c:	ldrd	r8, [sp, #16]
   42310:	ldrd	sl, [sp, #24]
   42314:	add	sp, sp, #32
   42318:	pop	{pc}		; (ldr pc, [sp], #4)
   4231c:	mov	r5, r0
   42320:	mov	r0, r3
   42324:	mov	r3, r5
   42328:	add	r5, r3, #1
   4232c:	cmp	r5, r0
   42330:	bcc	4228c <__assert_fail@plt+0x2fc98>
   42334:	ldr	r3, [r2, r5, lsl #2]
   42338:	cmp	ip, r3
   4233c:	bne	422ec <__assert_fail@plt+0x2fcf8>
   42340:	ldr	r3, [r4, #-16]
   42344:	ldr	r5, [r4, #-12]
   42348:	add	r5, r6, r5
   4234c:	sub	r5, r5, r3
   42350:	cmp	r6, r5
   42354:	beq	424b8 <__assert_fail@plt+0x2fec4>
   42358:	ldr	r2, [r8, #100]	; 0x64
   4235c:	ldr	r3, [r9, #12]
   42360:	ldr	fp, [r2, r5, lsl #2]
   42364:	ldr	sl, [r3, ip, lsl #2]
   42368:	cmp	fp, #0
   4236c:	beq	425cc <__assert_fail@plt+0x2ffd8>
   42370:	ldr	ip, [fp, #8]
   42374:	cmp	ip, #0
   42378:	ble	425fc <__assert_fail@plt+0x30008>
   4237c:	subs	r2, ip, #1
   42380:	ldr	r0, [fp, #12]
   42384:	moveq	r1, r2
   42388:	beq	423e4 <__assert_fail@plt+0x2fdf0>
   4238c:	mov	r1, #0
   42390:	add	r3, r2, r1
   42394:	lsr	r3, r3, #1
   42398:	ldr	lr, [r0, r3, lsl #2]
   4239c:	cmp	lr, sl
   423a0:	blt	424a8 <__assert_fail@plt+0x2feb4>
   423a4:	cmp	r3, r1
   423a8:	bls	423e4 <__assert_fail@plt+0x2fdf0>
   423ac:	add	r2, r3, r1
   423b0:	lsr	r2, r2, #1
   423b4:	ldr	lr, [r0, r2, lsl #2]
   423b8:	cmp	sl, lr
   423bc:	ble	423d4 <__assert_fail@plt+0x2fde0>
   423c0:	b	4249c <__assert_fail@plt+0x2fea8>
   423c4:	ldr	lr, [r0, r3, lsl #2]
   423c8:	cmp	sl, lr
   423cc:	bgt	424a8 <__assert_fail@plt+0x2feb4>
   423d0:	mov	r2, r3
   423d4:	add	r3, r1, r2
   423d8:	cmp	r1, r2
   423dc:	lsr	r3, r3, #1
   423e0:	bcc	423c4 <__assert_fail@plt+0x2fdd0>
   423e4:	ldr	r3, [r0, r1, lsl #2]
   423e8:	cmp	sl, r3
   423ec:	beq	422ec <__assert_fail@plt+0x2fcf8>
   423f0:	lsl	r0, ip, #2
   423f4:	str	ip, [sp, #24]
   423f8:	str	ip, [sp, #28]
   423fc:	bl	3b49c <__assert_fail@plt+0x28ea8>
   42400:	cmp	r0, #0
   42404:	str	r0, [sp, #32]
   42408:	beq	42690 <__assert_fail@plt+0x3009c>
   4240c:	ldr	r2, [fp, #8]
   42410:	add	r3, sp, #24
   42414:	ldr	r1, [fp, #12]
   42418:	str	r3, [sp, #4]
   4241c:	lsl	r2, r2, #2
   42420:	bl	12024 <memcpy@plt>
   42424:	ldr	r3, [sp, #4]
   42428:	mov	r2, #0
   4242c:	mov	r0, r3
   42430:	mov	r1, sl
   42434:	str	r3, [sp, #4]
   42438:	str	r2, [sp, #20]
   4243c:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   42440:	eor	r0, r0, #1
   42444:	ldr	r3, [sp, #4]
   42448:	ldr	r2, [sp, #20]
   4244c:	cmp	r2, #0
   42450:	orrne	r0, r0, #1
   42454:	tst	r0, #255	; 0xff
   42458:	bne	42630 <__assert_fail@plt+0x3003c>
   4245c:	ldr	sl, [r8, #100]	; 0x64
   42460:	mov	r2, r3
   42464:	mov	r1, r9
   42468:	add	r0, sp, #20
   4246c:	bl	41eb0 <__assert_fail@plt+0x2f8bc>
   42470:	str	r0, [sl, r5, lsl #2]
   42474:	ldr	r0, [sp, #32]
   42478:	bl	38b10 <__assert_fail@plt+0x2651c>
   4247c:	ldr	r3, [r8, #100]	; 0x64
   42480:	ldr	r3, [r3, r5, lsl #2]
   42484:	cmp	r3, #0
   42488:	bne	422ec <__assert_fail@plt+0x2fcf8>
   4248c:	ldr	r0, [sp, #20]
   42490:	cmp	r0, #0
   42494:	beq	422ec <__assert_fail@plt+0x2fcf8>
   42498:	b	42300 <__assert_fail@plt+0x2fd0c>
   4249c:	mov	r1, r3
   424a0:	mov	r3, r2
   424a4:	mov	r2, r1
   424a8:	add	r1, r3, #1
   424ac:	cmp	r2, r1
   424b0:	bhi	42390 <__assert_fail@plt+0x2fd9c>
   424b4:	b	423e4 <__assert_fail@plt+0x2fdf0>
   424b8:	ldr	r3, [r9, #20]
   424bc:	add	ip, ip, ip, lsl #1
   424c0:	cmp	lr, #0
   424c4:	movne	lr, #0
   424c8:	add	ip, r3, ip, lsl #2
   424cc:	ldr	r3, [ip, #8]
   424d0:	ldr	r5, [r3]
   424d4:	beq	4252c <__assert_fail@plt+0x2ff38>
   424d8:	add	r3, r1, lr
   424dc:	lsr	r3, r3, #1
   424e0:	ldr	r0, [r2, r3, lsl #2]
   424e4:	cmp	r0, r5
   424e8:	blt	425bc <__assert_fail@plt+0x2ffc8>
   424ec:	cmp	r3, lr
   424f0:	bls	4252c <__assert_fail@plt+0x2ff38>
   424f4:	add	r1, r3, lr
   424f8:	lsr	r1, r1, #1
   424fc:	ldr	r0, [r2, r1, lsl #2]
   42500:	cmp	r5, r0
   42504:	ble	4251c <__assert_fail@plt+0x2ff28>
   42508:	b	425b0 <__assert_fail@plt+0x2ffbc>
   4250c:	ldr	r0, [r2, r3, lsl #2]
   42510:	cmp	r5, r0
   42514:	bgt	425bc <__assert_fail@plt+0x2ffc8>
   42518:	mov	r1, r3
   4251c:	add	r3, lr, r1
   42520:	cmp	lr, r1
   42524:	lsr	r3, r3, #1
   42528:	bcc	4250c <__assert_fail@plt+0x2ff18>
   4252c:	ldr	r3, [r2, lr, lsl #2]
   42530:	cmp	r5, r3
   42534:	beq	422ec <__assert_fail@plt+0x2fcf8>
   42538:	mov	r2, #1
   4253c:	mov	r3, #1
   42540:	mov	r0, #4
   42544:	strd	r2, [sp, #24]
   42548:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4254c:	cmp	r0, #0
   42550:	str	r0, [sp, #32]
   42554:	beq	4264c <__assert_fail@plt+0x30058>
   42558:	mov	r2, #0
   4255c:	ldr	r3, [sp, #80]	; 0x50
   42560:	add	r4, sp, #24
   42564:	mov	r1, r4
   42568:	str	r5, [r0]
   4256c:	mov	r0, r9
   42570:	str	r2, [sp, #20]
   42574:	ldr	r2, [sp, #12]
   42578:	bl	414a0 <__assert_fail@plt+0x2eeac>
   4257c:	mov	r5, r0
   42580:	mov	r1, r4
   42584:	mov	r0, r7
   42588:	bl	3d68c <__assert_fail@plt+0x2b098>
   4258c:	mov	r4, r0
   42590:	ldr	r0, [sp, #32]
   42594:	bl	38b10 <__assert_fail@plt+0x2651c>
   42598:	ldr	r0, [sp, #20]
   4259c:	orr	r3, r5, r4
   425a0:	orrs	r3, r3, r0
   425a4:	bne	42678 <__assert_fail@plt+0x30084>
   425a8:	ldr	r4, [r8, #116]	; 0x74
   425ac:	b	42254 <__assert_fail@plt+0x2fc60>
   425b0:	mov	r0, r1
   425b4:	mov	r1, r3
   425b8:	mov	r3, r0
   425bc:	add	lr, r3, #1
   425c0:	cmp	lr, r1
   425c4:	bcc	424d8 <__assert_fail@plt+0x2fee4>
   425c8:	b	4252c <__assert_fail@plt+0x2ff38>
   425cc:	mov	r2, #1
   425d0:	mov	r3, #1
   425d4:	mov	r0, #4
   425d8:	strd	r2, [sp, #24]
   425dc:	bl	3b49c <__assert_fail@plt+0x28ea8>
   425e0:	cmp	r0, #0
   425e4:	str	r0, [sp, #32]
   425e8:	beq	42644 <__assert_fail@plt+0x30050>
   425ec:	add	r3, sp, #24
   425f0:	str	sl, [r0]
   425f4:	str	fp, [sp, #20]
   425f8:	b	4245c <__assert_fail@plt+0x2fe68>
   425fc:	mov	r2, #0
   42600:	add	r3, sp, #24
   42604:	str	r2, [sp, #24]
   42608:	str	r2, [r3, #4]
   4260c:	str	r2, [r3, #8]
   42610:	b	4242c <__assert_fail@plt+0x2fe38>
   42614:	mov	lr, ip
   42618:	mov	ip, r5
   4261c:	mov	r5, lr
   42620:	add	r9, ip, #1
   42624:	cmp	r5, r9
   42628:	bgt	421ac <__assert_fail@plt+0x2fbb8>
   4262c:	b	42218 <__assert_fail@plt+0x2fc24>
   42630:	ldr	r0, [sp, #32]
   42634:	bl	38b10 <__assert_fail@plt+0x2651c>
   42638:	ldr	r0, [sp, #20]
   4263c:	cmp	r0, #0
   42640:	bne	42300 <__assert_fail@plt+0x2fd0c>
   42644:	mov	r0, #12
   42648:	b	42300 <__assert_fail@plt+0x2fd0c>
   4264c:	mov	r2, #0
   42650:	mov	r3, #0
   42654:	mov	ip, #12
   42658:	add	r4, sp, #24
   4265c:	mov	r1, r4
   42660:	mov	r0, r9
   42664:	str	ip, [sp, #20]
   42668:	strd	r2, [sp, #24]
   4266c:	ldr	r2, [sp, #12]
   42670:	ldr	r3, [sp, #80]	; 0x50
   42674:	b	42578 <__assert_fail@plt+0x2ff84>
   42678:	cmp	r0, #0
   4267c:	bne	42300 <__assert_fail@plt+0x2fd0c>
   42680:	cmp	r5, #0
   42684:	movne	r0, r5
   42688:	moveq	r0, r4
   4268c:	b	42300 <__assert_fail@plt+0x2fd0c>
   42690:	mov	r0, #0
   42694:	mov	r1, #0
   42698:	mov	r2, #12
   4269c:	add	r3, sp, #24
   426a0:	strd	r0, [sp, #24]
   426a4:	b	4242c <__assert_fail@plt+0x2fe38>
   426a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   426ac:	strd	r6, [sp, #8]
   426b0:	ldr	r6, [r2, #4]
   426b4:	strd	r8, [sp, #16]
   426b8:	strd	sl, [sp, #24]
   426bc:	str	lr, [sp, #32]
   426c0:	sub	sp, sp, #20
   426c4:	cmp	r6, #0
   426c8:	moveq	r4, r6
   426cc:	streq	r6, [r0]
   426d0:	beq	42948 <__assert_fail@plt+0x30354>
   426d4:	add	r7, r3, r6
   426d8:	ble	426f4 <__assert_fail@plt+0x30100>
   426dc:	ldr	ip, [r2, #8]
   426e0:	add	r4, ip, r6, lsl #2
   426e4:	ldr	lr, [ip], #4
   426e8:	cmp	r4, ip
   426ec:	add	r7, r7, lr
   426f0:	bne	426e4 <__assert_fail@plt+0x300f0>
   426f4:	ldr	lr, [r1, #32]
   426f8:	ldr	ip, [r1, #68]	; 0x44
   426fc:	and	ip, ip, r7
   42700:	add	ip, ip, ip, lsl #1
   42704:	lsl	ip, ip, #2
   42708:	ldr	r8, [lr, ip]
   4270c:	add	ip, lr, ip
   42710:	cmp	r8, #0
   42714:	ble	42778 <__assert_fail@plt+0x30184>
   42718:	ldr	lr, [ip, #8]
   4271c:	mov	ip, #0
   42720:	sub	lr, lr, #4
   42724:	b	42734 <__assert_fail@plt+0x30140>
   42728:	add	ip, ip, #1
   4272c:	cmp	ip, r8
   42730:	beq	42778 <__assert_fail@plt+0x30184>
   42734:	ldr	r4, [lr, #4]!
   42738:	ldr	r5, [r4]
   4273c:	cmp	r5, r7
   42740:	bne	42728 <__assert_fail@plt+0x30134>
   42744:	ldrb	r5, [r4, #52]	; 0x34
   42748:	and	r5, r5, #15
   4274c:	cmp	r5, r3
   42750:	bne	42728 <__assert_fail@plt+0x30134>
   42754:	ldr	fp, [r4, #40]	; 0x28
   42758:	cmp	fp, #0
   4275c:	beq	42728 <__assert_fail@plt+0x30134>
   42760:	ldr	r5, [fp, #4]
   42764:	cmp	r6, r5
   42768:	beq	42980 <__assert_fail@plt+0x3038c>
   4276c:	add	ip, ip, #1
   42770:	cmp	ip, r8
   42774:	bne	42734 <__assert_fail@plt+0x30140>
   42778:	mov	r9, r1
   4277c:	mov	r1, #1
   42780:	str	r0, [sp, #8]
   42784:	mov	r0, #56	; 0x38
   42788:	mov	sl, r3
   4278c:	mov	r6, r2
   42790:	bl	384e0 <__assert_fail@plt+0x25eec>
   42794:	subs	r4, r0, #0
   42798:	beq	42a98 <__assert_fail@plt+0x304a4>
   4279c:	ldr	r3, [r6, #4]
   427a0:	add	fp, r4, #4
   427a4:	cmp	r3, #0
   427a8:	str	r3, [r4, #8]
   427ac:	ble	4298c <__assert_fail@plt+0x30398>
   427b0:	lsl	r0, r3, #2
   427b4:	str	r3, [r4, #4]
   427b8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   427bc:	cmp	r0, #0
   427c0:	mov	r3, r0
   427c4:	str	r0, [r4, #12]
   427c8:	beq	42aac <__assert_fail@plt+0x304b8>
   427cc:	ldr	r8, [r6, #4]
   427d0:	ldr	r1, [r6, #8]
   427d4:	lsl	r2, r8, #2
   427d8:	bl	12024 <memcpy@plt>
   427dc:	ldrb	r3, [r4, #52]	; 0x34
   427e0:	cmp	r8, #0
   427e4:	str	fp, [r4, #40]	; 0x28
   427e8:	bfi	r3, sl, #0, #4
   427ec:	strb	r3, [r4, #52]	; 0x34
   427f0:	ble	42930 <__assert_fail@plt+0x3033c>
   427f4:	and	r2, sl, #2
   427f8:	mov	r1, #0
   427fc:	and	r3, sl, #1
   42800:	mov	lr, r8
   42804:	mov	r5, r1
   42808:	mov	r8, r3
   4280c:	str	r2, [sp]
   42810:	and	r2, sl, #4
   42814:	str	r2, [sp, #4]
   42818:	ldr	r3, [r6, #8]
   4281c:	ldr	r2, [r9]
   42820:	ldr	r3, [r3, r5, lsl #2]
   42824:	add	r2, r2, r3, lsl #3
   42828:	ldr	sl, [r2, #4]
   4282c:	ldrb	r3, [r2, #4]
   42830:	ubfx	sl, sl, #8, #10
   42834:	cmp	r3, #1
   42838:	cmpeq	sl, #0
   4283c:	beq	42924 <__assert_fail@plt+0x30330>
   42840:	ldrb	ip, [r2, #6]
   42844:	cmp	r3, #2
   42848:	ldrb	r2, [r4, #52]	; 0x34
   4284c:	ubfx	ip, ip, #4, #1
   42850:	ubfx	r0, r2, #5, #1
   42854:	orr	r0, r0, ip
   42858:	bfi	r2, r0, #5, #1
   4285c:	uxtbeq	r3, r2
   42860:	orreq	r3, r3, #16
   42864:	strb	r2, [r4, #52]	; 0x34
   42868:	strbeq	r3, [r4, #52]	; 0x34
   4286c:	beq	42884 <__assert_fail@plt+0x30290>
   42870:	cmp	r3, #4
   42874:	bne	42884 <__assert_fail@plt+0x30290>
   42878:	ldrb	r3, [r4, #52]	; 0x34
   4287c:	orr	r3, r3, #64	; 0x40
   42880:	strb	r3, [r4, #52]	; 0x34
   42884:	cmp	sl, #0
   42888:	beq	42924 <__assert_fail@plt+0x30330>
   4288c:	ldr	r3, [r4, #40]	; 0x28
   42890:	cmp	fp, r3
   42894:	beq	429c4 <__assert_fail@plt+0x303d0>
   42898:	tst	sl, #1
   4289c:	beq	429b0 <__assert_fail@plt+0x303bc>
   428a0:	cmp	r8, #0
   428a4:	beq	428d8 <__assert_fail@plt+0x302e4>
   428a8:	tst	sl, #2
   428ac:	bne	428d8 <__assert_fail@plt+0x302e4>
   428b0:	tst	sl, #16
   428b4:	beq	428c4 <__assert_fail@plt+0x302d0>
   428b8:	ldr	r3, [sp]
   428bc:	cmp	r3, #0
   428c0:	beq	428d8 <__assert_fail@plt+0x302e4>
   428c4:	tst	sl, #64	; 0x40
   428c8:	beq	42920 <__assert_fail@plt+0x3032c>
   428cc:	ldr	r3, [sp, #4]
   428d0:	cmp	r3, #0
   428d4:	bne	42920 <__assert_fail@plt+0x3032c>
   428d8:	subs	r3, r5, r1
   428dc:	bmi	4291c <__assert_fail@plt+0x30328>
   428e0:	ldr	r2, [r4, #8]
   428e4:	cmp	r3, r2
   428e8:	bge	4291c <__assert_fail@plt+0x30328>
   428ec:	sub	r2, r2, #1
   428f0:	cmp	r3, r2
   428f4:	str	r2, [r4, #8]
   428f8:	bge	4291c <__assert_fail@plt+0x30328>
   428fc:	ldr	r2, [r4, #12]
   42900:	add	r2, r2, r3, lsl #2
   42904:	ldr	r0, [r2, #4]
   42908:	add	r3, r3, #1
   4290c:	str	r0, [r2], #4
   42910:	ldr	r0, [r4, #8]
   42914:	cmp	r3, r0
   42918:	blt	42904 <__assert_fail@plt+0x30310>
   4291c:	add	r1, r1, #1
   42920:	ldr	lr, [r6, #4]
   42924:	add	r5, r5, #1
   42928:	cmp	r5, lr
   4292c:	blt	42818 <__assert_fail@plt+0x30224>
   42930:	mov	r2, r7
   42934:	mov	r0, r9
   42938:	mov	r1, r4
   4293c:	bl	3c634 <__assert_fail@plt+0x2a040>
   42940:	cmp	r0, #0
   42944:	bne	42a4c <__assert_fail@plt+0x30458>
   42948:	mov	r0, r4
   4294c:	add	sp, sp, #20
   42950:	ldrd	r4, [sp]
   42954:	ldrd	r6, [sp, #8]
   42958:	ldrd	r8, [sp, #16]
   4295c:	ldrd	sl, [sp, #24]
   42960:	add	sp, sp, #32
   42964:	pop	{pc}		; (ldr pc, [sp], #4)
   42968:	ldr	r9, [r2, #8]
   4296c:	ldr	sl, [fp, #8]
   42970:	ldr	r9, [r9, r5, lsl #2]
   42974:	ldr	sl, [sl, r5, lsl #2]
   42978:	cmp	sl, r9
   4297c:	bne	42728 <__assert_fail@plt+0x30134>
   42980:	subs	r5, r5, #1
   42984:	bpl	42968 <__assert_fail@plt+0x30374>
   42988:	b	42948 <__assert_fail@plt+0x30354>
   4298c:	mov	r3, #0
   42990:	str	r3, [r4, #4]
   42994:	str	r3, [fp, #4]
   42998:	str	r3, [fp, #8]
   4299c:	ldrb	r3, [r4, #52]	; 0x34
   429a0:	str	fp, [r4, #40]	; 0x28
   429a4:	bfi	r3, sl, #0, #4
   429a8:	strb	r3, [r4, #52]	; 0x34
   429ac:	b	42930 <__assert_fail@plt+0x3033c>
   429b0:	tst	sl, #2
   429b4:	beq	428b0 <__assert_fail@plt+0x302bc>
   429b8:	cmp	r8, #0
   429bc:	beq	428b0 <__assert_fail@plt+0x302bc>
   429c0:	b	428d8 <__assert_fail@plt+0x302e4>
   429c4:	mov	r0, #12
   429c8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   429cc:	subs	r3, r0, #0
   429d0:	beq	42a4c <__assert_fail@plt+0x30458>
   429d4:	ldr	r2, [r6, #4]
   429d8:	str	r3, [r4, #40]	; 0x28
   429dc:	cmp	r2, #0
   429e0:	str	r2, [r3, #4]
   429e4:	ble	42a2c <__assert_fail@plt+0x30438>
   429e8:	lsl	r0, r2, #2
   429ec:	str	r2, [r3]
   429f0:	str	r3, [sp, #12]
   429f4:	bl	3b49c <__assert_fail@plt+0x28ea8>
   429f8:	ldr	r3, [sp, #12]
   429fc:	cmp	r0, #0
   42a00:	str	r0, [r3, #8]
   42a04:	beq	42a40 <__assert_fail@plt+0x3044c>
   42a08:	ldr	r2, [r6, #4]
   42a0c:	ldr	r1, [r6, #8]
   42a10:	lsl	r2, r2, #2
   42a14:	bl	12024 <memcpy@plt>
   42a18:	ldrb	r3, [r4, #52]	; 0x34
   42a1c:	mov	r1, #0
   42a20:	orr	r3, r3, #128	; 0x80
   42a24:	strb	r3, [r4, #52]	; 0x34
   42a28:	b	42898 <__assert_fail@plt+0x302a4>
   42a2c:	mov	r2, #0
   42a30:	str	r2, [r3]
   42a34:	str	r2, [r3, #4]
   42a38:	str	r2, [r3, #8]
   42a3c:	b	42a18 <__assert_fail@plt+0x30424>
   42a40:	mov	r8, r3
   42a44:	str	r0, [r8]
   42a48:	str	r0, [r8, #4]
   42a4c:	ldr	r0, [r4, #24]
   42a50:	bl	38b10 <__assert_fail@plt+0x2651c>
   42a54:	ldr	r0, [r4, #36]	; 0x24
   42a58:	bl	38b10 <__assert_fail@plt+0x2651c>
   42a5c:	ldr	r3, [r4, #40]	; 0x28
   42a60:	cmp	fp, r3
   42a64:	beq	42a78 <__assert_fail@plt+0x30484>
   42a68:	ldr	r0, [r3, #8]
   42a6c:	bl	38b10 <__assert_fail@plt+0x2651c>
   42a70:	ldr	r0, [r4, #40]	; 0x28
   42a74:	bl	38b10 <__assert_fail@plt+0x2651c>
   42a78:	ldr	r0, [r4, #12]
   42a7c:	bl	38b10 <__assert_fail@plt+0x2651c>
   42a80:	ldr	r0, [r4, #48]	; 0x30
   42a84:	bl	38b10 <__assert_fail@plt+0x2651c>
   42a88:	ldr	r0, [r4, #44]	; 0x2c
   42a8c:	bl	38b10 <__assert_fail@plt+0x2651c>
   42a90:	mov	r0, r4
   42a94:	bl	38b10 <__assert_fail@plt+0x2651c>
   42a98:	ldr	r2, [sp, #8]
   42a9c:	mov	r3, #12
   42aa0:	mov	r4, #0
   42aa4:	str	r3, [r2]
   42aa8:	b	42948 <__assert_fail@plt+0x30354>
   42aac:	mov	r0, r4
   42ab0:	str	r3, [r4, #4]
   42ab4:	str	r3, [r4, #8]
   42ab8:	bl	38b10 <__assert_fail@plt+0x2651c>
   42abc:	b	42a98 <__assert_fail@plt+0x304a4>
   42ac0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   42ac4:	mov	ip, r1
   42ac8:	strd	r6, [sp, #8]
   42acc:	strd	r8, [sp, #16]
   42ad0:	ldr	r8, [r1, #8]
   42ad4:	strd	sl, [sp, #24]
   42ad8:	str	lr, [sp, #32]
   42adc:	sub	sp, sp, #14528	; 0x38c0
   42ae0:	sub	sp, sp, #60	; 0x3c
   42ae4:	add	r9, sp, #2288	; 0x8f0
   42ae8:	add	r9, r9, #8
   42aec:	str	r1, [sp, #100]	; 0x64
   42af0:	mov	r1, #0
   42af4:	cmp	r8, r1
   42af8:	str	r1, [r9]
   42afc:	str	r1, [r9, #4]
   42b00:	str	r1, [r9, #8]
   42b04:	str	r1, [r9, #12]
   42b08:	str	r1, [r9, #16]
   42b0c:	str	r1, [r9, #20]
   42b10:	str	r1, [r9, #24]
   42b14:	str	r1, [r9, #28]
   42b18:	str	r1, [ip, #44]	; 0x2c
   42b1c:	str	r1, [ip, #48]	; 0x30
   42b20:	ble	43a98 <__assert_fail@plt+0x314a4>
   42b24:	mov	r3, r1
   42b28:	mov	r2, r1
   42b2c:	str	r1, [sp, #48]	; 0x30
   42b30:	mov	fp, r0
   42b34:	mov	r6, r8
   42b38:	str	r1, [sp, #104]	; 0x68
   42b3c:	str	r0, [sp, #116]	; 0x74
   42b40:	strd	r2, [sp, #128]	; 0x80
   42b44:	sub	r3, r9, #2080	; 0x820
   42b48:	str	r3, [sp, #124]	; 0x7c
   42b4c:	ldr	r3, [sp, #100]	; 0x64
   42b50:	ldr	r1, [sp, #104]	; 0x68
   42b54:	ldr	r3, [r3, #12]
   42b58:	lsl	r2, r1, #2
   42b5c:	str	r2, [sp, #112]	; 0x70
   42b60:	ldr	r2, [sp, #116]	; 0x74
   42b64:	ldr	r1, [r3, r1, lsl #2]
   42b68:	ldr	r2, [r2]
   42b6c:	add	r3, r2, r1, lsl #3
   42b70:	ldrb	r0, [r3, #4]
   42b74:	str	r3, [sp, #96]	; 0x60
   42b78:	cmp	r0, #1
   42b7c:	ldr	r3, [r3, #4]
   42b80:	str	r0, [sp, #52]	; 0x34
   42b84:	ubfx	r3, r3, #8, #10
   42b88:	beq	42e94 <__assert_fail@plt+0x308a0>
   42b8c:	cmp	r0, #3
   42b90:	beq	43844 <__assert_fail@plt+0x31250>
   42b94:	cmp	r0, #5
   42b98:	beq	4356c <__assert_fail@plt+0x30f78>
   42b9c:	cmp	r0, #7
   42ba0:	beq	43780 <__assert_fail@plt+0x3118c>
   42ba4:	ldr	r3, [sp, #104]	; 0x68
   42ba8:	add	r3, r3, #1
   42bac:	cmp	r3, r6
   42bb0:	str	r3, [sp, #104]	; 0x68
   42bb4:	blt	42b4c <__assert_fail@plt+0x30558>
   42bb8:	ldr	r3, [sp, #48]	; 0x30
   42bbc:	ldr	fp, [sp, #116]	; 0x74
   42bc0:	cmp	r3, #0
   42bc4:	ble	43a94 <__assert_fail@plt+0x314a0>
   42bc8:	add	r3, r3, #1
   42bcc:	mov	r5, #0
   42bd0:	lsl	r0, r3, #2
   42bd4:	str	r3, [r9, #-2156]	; 0xfffff794
   42bd8:	str	r5, [r9, #-2152]	; 0xfffff798
   42bdc:	bl	3b49c <__assert_fail@plt+0x28ea8>
   42be0:	cmp	r0, r5
   42be4:	str	r0, [r9, #-2148]	; 0xfffff79c
   42be8:	beq	43a44 <__assert_fail@plt+0x31450>
   42bec:	mov	r3, #0
   42bf0:	mov	r2, #0
   42bf4:	str	r5, [r9, #-2160]	; 0xfffff790
   42bf8:	add	r1, sp, #3312	; 0xcf0
   42bfc:	mov	sl, r5
   42c00:	str	r5, [sp]
   42c04:	add	r1, r1, #8
   42c08:	mov	r8, r5
   42c0c:	str	r5, [sp, #8]
   42c10:	strd	r2, [sp, #152]	; 0x98
   42c14:	mov	r4, r1
   42c18:	strd	r2, [sp, #160]	; 0xa0
   42c1c:	strd	r2, [sp, #168]	; 0xa8
   42c20:	strd	r2, [sp, #176]	; 0xb0
   42c24:	add	r3, sp, #136	; 0x88
   42c28:	str	r5, [sp, #12]
   42c2c:	str	r5, [sp, #16]
   42c30:	str	r3, [sp, #40]	; 0x28
   42c34:	add	r3, sp, #6336	; 0x18c0
   42c38:	add	r3, r3, #56	; 0x38
   42c3c:	str	r5, [sp, #24]
   42c40:	mov	r6, r3
   42c44:	str	r5, [sp, #32]
   42c48:	str	r5, [sp, #52]	; 0x34
   42c4c:	str	r3, [sp, #56]	; 0x38
   42c50:	str	r1, [sp, #60]	; 0x3c
   42c54:	str	r1, [sp, #108]	; 0x6c
   42c58:	ldr	ip, [r4, #4]
   42c5c:	mov	r3, #0
   42c60:	str	r3, [r9, #-2152]	; 0xfffff798
   42c64:	cmp	ip, r3
   42c68:	movgt	r7, #0
   42c6c:	ble	42cb8 <__assert_fail@plt+0x306c4>
   42c70:	ldr	r2, [r4, #8]
   42c74:	add	r0, sp, #140	; 0x8c
   42c78:	ldr	r3, [fp, #12]
   42c7c:	ldr	r2, [r2, r7, lsl #2]
   42c80:	add	r7, r7, #1
   42c84:	ldr	r3, [r3, r2, lsl #2]
   42c88:	cmn	r3, #1
   42c8c:	add	r2, r3, r3, lsl #1
   42c90:	beq	42cb0 <__assert_fail@plt+0x306bc>
   42c94:	ldr	r1, [fp, #24]
   42c98:	add	r1, r1, r2, lsl #2
   42c9c:	bl	3d68c <__assert_fail@plt+0x2b098>
   42ca0:	cmp	r0, #0
   42ca4:	str	r0, [r9, #-2160]	; 0xfffff790
   42ca8:	bne	43960 <__assert_fail@plt+0x3136c>
   42cac:	ldr	ip, [r4, #4]
   42cb0:	cmp	r7, ip
   42cb4:	blt	42c70 <__assert_fail@plt+0x3067c>
   42cb8:	mov	r3, #0
   42cbc:	add	r2, sp, #140	; 0x8c
   42cc0:	ldr	r0, [sp, #40]	; 0x28
   42cc4:	mov	r1, fp
   42cc8:	bl	426a8 <__assert_fail@plt+0x300b4>
   42ccc:	add	r3, sp, #248	; 0xf8
   42cd0:	cmp	r0, #0
   42cd4:	mov	r7, r0
   42cd8:	str	r0, [r3, r8, lsl #2]
   42cdc:	beq	43a34 <__assert_fail@plt+0x31440>
   42ce0:	ldrsb	r3, [r7, #52]	; 0x34
   42ce4:	cmp	r3, #0
   42ce8:	blt	43990 <__assert_fail@plt+0x3139c>
   42cec:	add	r3, sp, #1264	; 0x4f0
   42cf0:	str	r7, [r9, r8, lsl #2]
   42cf4:	add	r3, r3, #8
   42cf8:	str	r7, [r3, r8, lsl #2]
   42cfc:	add	r8, r8, #1
   42d00:	ldr	r0, [sp]
   42d04:	add	r4, r4, #12
   42d08:	add	r6, r6, #32
   42d0c:	ldr	r3, [sp, #48]	; 0x30
   42d10:	ldr	r2, [r6, #-32]	; 0xffffffe0
   42d14:	ldr	r1, [r6, #-24]	; 0xffffffe8
   42d18:	cmp	r8, r3
   42d1c:	ldr	r3, [r6, #-28]	; 0xffffffe4
   42d20:	orr	sl, sl, r2
   42d24:	ldr	r2, [r6, #-20]	; 0xffffffec
   42d28:	str	sl, [r9, #-2144]	; 0xfffff7a0
   42d2c:	ldr	ip, [sp, #8]
   42d30:	orr	r0, r0, r3
   42d34:	ldr	r3, [r6, #-16]
   42d38:	str	r0, [r9, #-2140]	; 0xfffff7a4
   42d3c:	str	r0, [sp]
   42d40:	ldr	r0, [sp, #12]
   42d44:	orr	ip, ip, r1
   42d48:	str	ip, [r9, #-2136]	; 0xfffff7a8
   42d4c:	str	ip, [sp, #8]
   42d50:	ldr	r1, [r6, #-12]
   42d54:	orr	r0, r0, r2
   42d58:	ldr	ip, [sp, #16]
   42d5c:	str	r0, [r9, #-2132]	; 0xfffff7ac
   42d60:	str	r0, [sp, #12]
   42d64:	ldr	r0, [sp, #24]
   42d68:	orr	ip, ip, r3
   42d6c:	ldrd	r2, [r6, #-8]
   42d70:	str	ip, [r9, #-2128]	; 0xfffff7b0
   42d74:	orr	r1, r0, r1
   42d78:	ldr	r0, [sp, #32]
   42d7c:	str	ip, [sp, #16]
   42d80:	orr	r5, r5, r3
   42d84:	str	r1, [r9, #-2124]	; 0xfffff7b4
   42d88:	str	r1, [sp, #24]
   42d8c:	str	r5, [r9, #-2116]	; 0xfffff7bc
   42d90:	orr	r2, r0, r2
   42d94:	str	r2, [r9, #-2120]	; 0xfffff7b8
   42d98:	str	r2, [sp, #32]
   42d9c:	bne	42c58 <__assert_fail@plt+0x30664>
   42da0:	ldr	r3, [sp, #52]	; 0x34
   42da4:	cmp	r3, #0
   42da8:	bne	43adc <__assert_fail@plt+0x314e8>
   42dac:	mov	r1, #256	; 0x100
   42db0:	mov	r0, #4
   42db4:	bl	384e0 <__assert_fail@plt+0x25eec>
   42db8:	ldr	r3, [sp, #100]	; 0x64
   42dbc:	cmp	r0, #0
   42dc0:	mov	r7, r0
   42dc4:	str	r0, [r3, #44]	; 0x2c
   42dc8:	beq	43960 <__assert_fail@plt+0x3136c>
   42dcc:	ldr	lr, [sp, #56]	; 0x38
   42dd0:	add	ip, sp, #148	; 0x94
   42dd4:	add	r5, fp, #96	; 0x60
   42dd8:	mov	r4, r0
   42ddc:	add	r6, r0, #1024	; 0x400
   42de0:	ldr	r3, [ip, #4]!
   42de4:	cmp	r3, #0
   42de8:	movne	r0, r4
   42dec:	movne	r1, #1
   42df0:	beq	42e0c <__assert_fail@plt+0x30818>
   42df4:	tst	r3, #1
   42df8:	bne	43a5c <__assert_fail@plt+0x31468>
   42dfc:	lsrs	r3, r3, #1
   42e00:	add	r0, r0, #4
   42e04:	lsl	r1, r1, #1
   42e08:	bne	42df4 <__assert_fail@plt+0x30800>
   42e0c:	add	r4, r4, #128	; 0x80
   42e10:	add	r5, r5, #4
   42e14:	cmp	r6, r4
   42e18:	add	lr, lr, #4
   42e1c:	bne	42de0 <__assert_fail@plt+0x307ec>
   42e20:	ubfx	r3, sl, #10, #1
   42e24:	cmp	r3, #0
   42e28:	beq	42e5c <__assert_fail@plt+0x30868>
   42e2c:	ldr	ip, [sp, #48]	; 0x30
   42e30:	add	r2, sp, #6336	; 0x18c0
   42e34:	add	r1, r3, #1
   42e38:	add	r2, r2, #56	; 0x38
   42e3c:	sub	r0, r3, #1
   42e40:	add	r2, r2, r3, lsl #5
   42e44:	ldr	r2, [r2, #-32]	; 0xffffffe0
   42e48:	tst	r2, #1024	; 0x400
   42e4c:	bne	43ac4 <__assert_fail@plt+0x314d0>
   42e50:	cmp	ip, r3
   42e54:	mov	r3, r1
   42e58:	bne	42e30 <__assert_fail@plt+0x3083c>
   42e5c:	ldr	r0, [r9, #-2148]	; 0xfffff79c
   42e60:	bl	38b10 <__assert_fail@plt+0x2651c>
   42e64:	ldr	r3, [sp, #48]	; 0x30
   42e68:	ldr	r5, [sp, #60]	; 0x3c
   42e6c:	add	r1, r3, r3, lsl #1
   42e70:	ldr	r3, [sp, #108]	; 0x6c
   42e74:	add	r4, r3, r1, lsl #2
   42e78:	add	r5, r5, #12
   42e7c:	ldr	r0, [r5, #-4]
   42e80:	bl	38b10 <__assert_fail@plt+0x2651c>
   42e84:	cmp	r4, r5
   42e88:	bne	42e78 <__assert_fail@plt+0x30884>
   42e8c:	mov	r0, #1
   42e90:	b	436b4 <__assert_fail@plt+0x310c0>
   42e94:	ldrb	r2, [r2, r1, lsl #3]
   42e98:	mov	ip, r0
   42e9c:	asr	r1, r2, #5
   42ea0:	and	r2, r2, #31
   42ea4:	ldr	r0, [r9, r1, lsl #2]
   42ea8:	orr	r2, r0, ip, lsl r2
   42eac:	str	r2, [r9, r1, lsl #2]
   42eb0:	cmp	r3, #0
   42eb4:	beq	43174 <__assert_fail@plt+0x30b80>
   42eb8:	tst	r3, #32
   42ebc:	bne	4361c <__assert_fail@plt+0x31028>
   42ec0:	tst	r3, #128	; 0x80
   42ec4:	bne	4365c <__assert_fail@plt+0x31068>
   42ec8:	tst	r3, #4
   42ecc:	beq	43034 <__assert_fail@plt+0x30a40>
   42ed0:	ldr	r2, [sp, #52]	; 0x34
   42ed4:	cmp	r2, #1
   42ed8:	beq	43940 <__assert_fail@plt+0x3134c>
   42edc:	ldr	r1, [sp, #116]	; 0x74
   42ee0:	ldrd	r4, [r9]
   42ee4:	ldr	lr, [r9, #16]
   42ee8:	ldr	r2, [r1, #92]	; 0x5c
   42eec:	ldr	r0, [r9, #24]
   42ef0:	ldr	ip, [r9, #28]
   42ef4:	cmp	r2, #1
   42ef8:	ldr	r2, [r9, #8]
   42efc:	str	lr, [sp, #56]	; 0x38
   42f00:	ldr	sl, [r9, #12]
   42f04:	str	r2, [sp]
   42f08:	ldr	r2, [r9, #20]
   42f0c:	str	r0, [sp, #16]
   42f10:	str	ip, [sp, #32]
   42f14:	str	r2, [sp, #12]
   42f18:	mov	r2, r1
   42f1c:	ldr	r1, [r1, #96]	; 0x60
   42f20:	ldr	r7, [r2, #120]	; 0x78
   42f24:	ldr	r8, [r2, #108]	; 0x6c
   42f28:	ldr	ip, [r2, #100]	; 0x64
   42f2c:	ldr	r0, [r2, #104]	; 0x68
   42f30:	str	r7, [sp, #24]
   42f34:	str	r8, [sp, #8]
   42f38:	ldr	r7, [r2, #124]	; 0x7c
   42f3c:	ldr	r8, [r2, #112]	; 0x70
   42f40:	ldr	fp, [r2, #116]	; 0x74
   42f44:	str	r7, [sp, #40]	; 0x28
   42f48:	ble	437cc <__assert_fail@plt+0x311d8>
   42f4c:	ldr	r2, [sp, #116]	; 0x74
   42f50:	ldr	lr, [r2, #60]	; 0x3c
   42f54:	ldr	r2, [lr]
   42f58:	mvn	r2, r2
   42f5c:	orr	r2, r2, r1
   42f60:	ldr	r1, [lr, #4]
   42f64:	and	r2, r2, r4
   42f68:	str	r2, [r9]
   42f6c:	mvn	r1, r1
   42f70:	orr	r1, r1, ip
   42f74:	ldr	ip, [lr, #8]
   42f78:	and	r1, r1, r5
   42f7c:	orr	r2, r2, r1
   42f80:	mvn	r4, ip
   42f84:	ldr	ip, [lr, #20]
   42f88:	orr	r4, r4, r0
   42f8c:	ldr	r0, [lr, #12]
   42f90:	mvn	ip, ip
   42f94:	orr	ip, ip, fp
   42f98:	mvn	r5, r0
   42f9c:	ldr	r0, [sp]
   42fa0:	and	r4, r4, r0
   42fa4:	ldr	r0, [lr, #24]
   42fa8:	orr	r2, r2, r4
   42fac:	stmib	r9, {r1, r4}
   42fb0:	ldr	r1, [sp, #8]
   42fb4:	ldr	r4, [sp, #56]	; 0x38
   42fb8:	mvn	r0, r0
   42fbc:	orr	r5, r5, r1
   42fc0:	ldr	r1, [lr, #16]
   42fc4:	and	r5, r5, sl
   42fc8:	orr	r2, r2, r5
   42fcc:	ldr	lr, [lr, #28]
   42fd0:	str	r5, [r9, #12]
   42fd4:	mvn	r1, r1
   42fd8:	orr	r1, r1, r8
   42fdc:	and	r1, r1, r4
   42fe0:	ldr	r4, [sp, #12]
   42fe4:	mvn	lr, lr
   42fe8:	orr	r2, r2, r1
   42fec:	str	r1, [r9, #16]
   42ff0:	ldr	r1, [sp, #24]
   42ff4:	and	ip, ip, r4
   42ff8:	orr	r2, r2, ip
   42ffc:	str	ip, [r9, #20]
   43000:	orr	r0, r0, r1
   43004:	ldr	r1, [sp, #16]
   43008:	and	r0, r0, r1
   4300c:	ldr	r1, [sp, #40]	; 0x28
   43010:	orr	ip, r2, r0
   43014:	ldr	r2, [sp, #32]
   43018:	str	r0, [r9, #24]
   4301c:	orr	lr, lr, r1
   43020:	and	lr, lr, r2
   43024:	orr	ip, ip, lr
   43028:	str	lr, [r9, #28]
   4302c:	cmp	ip, #0
   43030:	beq	42ba4 <__assert_fail@plt+0x305b0>
   43034:	tst	r3, #8
   43038:	beq	43174 <__assert_fail@plt+0x30b80>
   4303c:	ldr	r3, [sp, #52]	; 0x34
   43040:	cmp	r3, #1
   43044:	beq	4392c <__assert_fail@plt+0x31338>
   43048:	ldr	r2, [sp, #116]	; 0x74
   4304c:	ldr	r5, [r9]
   43050:	ldr	r1, [r9, #24]
   43054:	add	r7, r2, #112	; 0x70
   43058:	ldr	r3, [r2, #92]	; 0x5c
   4305c:	ldm	r7, {r7, sl, lr}
   43060:	str	r1, [sp, #12]
   43064:	cmp	r3, #1
   43068:	ldr	ip, [r9, #28]
   4306c:	ldr	r3, [r9, #8]
   43070:	ldr	r0, [r2, #100]	; 0x64
   43074:	str	lr, [sp, #32]
   43078:	ldr	r1, [r2, #104]	; 0x68
   4307c:	str	r3, [sp]
   43080:	str	ip, [sp, #16]
   43084:	ldr	r3, [r9, #20]
   43088:	ldr	ip, [r2, #96]	; 0x60
   4308c:	ldr	r4, [r9, #4]
   43090:	str	r3, [sp, #8]
   43094:	ldr	r3, [r2, #108]	; 0x6c
   43098:	ldr	r2, [r2, #124]	; 0x7c
   4309c:	ldr	r8, [r9, #12]
   430a0:	ldr	fp, [r9, #16]
   430a4:	str	r2, [sp, #24]
   430a8:	ble	438c0 <__assert_fail@plt+0x312cc>
   430ac:	ldr	r2, [sp, #116]	; 0x74
   430b0:	ldr	r2, [r2, #60]	; 0x3c
   430b4:	ldr	lr, [r2]
   430b8:	and	ip, ip, lr
   430bc:	ldr	lr, [r2, #4]
   430c0:	bic	ip, r5, ip
   430c4:	str	ip, [r9]
   430c8:	and	r0, r0, lr
   430cc:	ldr	lr, [r2, #16]
   430d0:	bic	r4, r4, r0
   430d4:	ldr	r0, [r2, #8]
   430d8:	orr	r5, ip, r4
   430dc:	str	r4, [r9, #4]
   430e0:	ldr	ip, [sp]
   430e4:	and	r7, r7, lr
   430e8:	bic	r7, fp, r7
   430ec:	and	r1, r1, r0
   430f0:	ldr	r0, [r2, #20]
   430f4:	str	r7, [r9, #16]
   430f8:	bic	r1, ip, r1
   430fc:	ldr	ip, [r2, #12]
   43100:	orr	r5, r5, r1
   43104:	str	r1, [r9, #8]
   43108:	and	r0, r0, sl
   4310c:	and	r3, r3, ip
   43110:	ldr	ip, [r2, #24]
   43114:	bic	r3, r8, r3
   43118:	orr	r5, r5, r3
   4311c:	ldr	r2, [r2, #28]
   43120:	str	r3, [r9, #12]
   43124:	orr	r5, r5, r7
   43128:	ldr	r3, [sp, #8]
   4312c:	bic	r0, r3, r0
   43130:	ldr	r3, [sp, #32]
   43134:	orr	r5, r5, r0
   43138:	str	r0, [r9, #20]
   4313c:	and	r3, r3, ip
   43140:	mov	ip, r3
   43144:	ldr	r3, [sp, #12]
   43148:	bic	ip, r3, ip
   4314c:	ldr	r3, [sp, #24]
   43150:	orr	r5, r5, ip
   43154:	str	ip, [r9, #24]
   43158:	and	r3, r3, r2
   4315c:	ldr	r2, [sp, #16]
   43160:	bic	r3, r2, r3
   43164:	orr	r2, r5, r3
   43168:	str	r3, [r9, #28]
   4316c:	cmp	r2, #0
   43170:	beq	42ba4 <__assert_fail@plt+0x305b0>
   43174:	ldr	r3, [sp, #48]	; 0x30
   43178:	cmp	r3, #0
   4317c:	movle	fp, #0
   43180:	ble	43538 <__assert_fail@plt+0x30f44>
   43184:	add	r3, sp, #3312	; 0xcf0
   43188:	mov	fp, #0
   4318c:	add	r3, r3, #8
   43190:	add	r4, sp, #6336	; 0x18c0
   43194:	add	r4, r4, #56	; 0x38
   43198:	str	fp, [sp]
   4319c:	mov	r6, r4
   431a0:	str	r3, [sp, #8]
   431a4:	str	r3, [sp, #108]	; 0x6c
   431a8:	b	43208 <__assert_fail@plt+0x30c14>
   431ac:	ldr	r3, [sp, #96]	; 0x60
   431b0:	add	r0, sp, #14528	; 0x38c0
   431b4:	add	r0, r0, #56	; 0x38
   431b8:	ldrb	r2, [r3]
   431bc:	asr	r3, r2, #5
   431c0:	and	r2, r2, #31
   431c4:	add	r3, r0, r3, lsl #2
   431c8:	add	r3, r3, r1
   431cc:	sub	r3, r3, #8192	; 0x2000
   431d0:	ldr	r3, [r3]
   431d4:	lsr	r2, r3, r2
   431d8:	tst	r2, #1
   431dc:	bne	4321c <__assert_fail@plt+0x30c28>
   431e0:	ldr	r3, [sp]
   431e4:	add	r6, r6, #32
   431e8:	add	r2, r3, #1
   431ec:	ldr	r3, [sp, #48]	; 0x30
   431f0:	str	r2, [sp]
   431f4:	cmp	r2, r3
   431f8:	ldr	r3, [sp, #8]
   431fc:	add	r3, r3, #12
   43200:	str	r3, [sp, #8]
   43204:	bge	436d4 <__assert_fail@plt+0x310e0>
   43208:	ldr	r3, [sp, #52]	; 0x34
   4320c:	cmp	r3, #1
   43210:	ldr	r3, [sp]
   43214:	lsl	r1, r3, #5
   43218:	beq	431ac <__assert_fail@plt+0x30bb8>
   4321c:	ldr	fp, [r6]
   43220:	ldm	r9, {r2, r4, lr}
   43224:	ldr	sl, [r6, #4]
   43228:	and	r3, r2, fp
   4322c:	str	fp, [sp, #56]	; 0x38
   43230:	ldr	r8, [r6, #8]
   43234:	str	r3, [sp, #64]	; 0x40
   43238:	ldr	r7, [r6, #12]
   4323c:	and	r1, r4, sl
   43240:	orr	r3, r3, r1
   43244:	ldr	ip, [r9, #12]
   43248:	and	r0, lr, r8
   4324c:	str	r1, [sp, #68]	; 0x44
   43250:	mov	r5, r0
   43254:	ldr	r1, [r6, #16]
   43258:	orr	r3, r3, r5
   4325c:	ldr	r0, [r9, #16]
   43260:	and	fp, ip, r7
   43264:	orr	r3, r3, fp
   43268:	str	r5, [sp, #72]	; 0x48
   4326c:	ldr	r5, [r9, #20]
   43270:	str	fp, [sp, #76]	; 0x4c
   43274:	ldr	fp, [r9, #24]
   43278:	str	r5, [sp, #12]
   4327c:	ldr	r5, [r6, #20]
   43280:	str	r1, [sp, #60]	; 0x3c
   43284:	str	r5, [sp, #16]
   43288:	and	r5, r0, r1
   4328c:	orr	r3, r3, r5
   43290:	ldr	r1, [sp, #12]
   43294:	str	fp, [sp, #24]
   43298:	str	r5, [sp, #80]	; 0x50
   4329c:	ldr	r5, [sp, #16]
   432a0:	ldr	fp, [r6, #24]
   432a4:	and	r1, r1, r5
   432a8:	ldr	r5, [r9, #28]
   432ac:	orr	r3, r3, r1
   432b0:	str	fp, [sp, #32]
   432b4:	ldr	fp, [sp, #24]
   432b8:	str	r5, [sp, #40]	; 0x28
   432bc:	str	r1, [sp, #84]	; 0x54
   432c0:	ldr	r1, [r6, #28]
   432c4:	ldr	r5, [sp, #32]
   432c8:	and	fp, fp, r5
   432cc:	ldr	r5, [sp, #40]	; 0x28
   432d0:	orr	r3, r3, fp
   432d4:	str	fp, [sp, #88]	; 0x58
   432d8:	and	r5, r5, r1
   432dc:	orrs	r3, r3, r5
   432e0:	str	r5, [sp, #92]	; 0x5c
   432e4:	beq	431e0 <__assert_fail@plt+0x30bec>
   432e8:	ldr	fp, [sp, #56]	; 0x38
   432ec:	bic	r5, sl, r4
   432f0:	bic	r4, r4, sl
   432f4:	str	r5, [sp, #120]	; 0x78
   432f8:	bic	r3, fp, r2
   432fc:	bic	r2, r2, fp
   43300:	ldr	fp, [sp, #32]
   43304:	mov	sl, r3
   43308:	str	r3, [sp, #56]	; 0x38
   4330c:	orr	r3, sl, r5
   43310:	bic	sl, r8, lr
   43314:	bic	lr, lr, r8
   43318:	stm	r9, {r2, r4}
   4331c:	orr	r2, r2, r4
   43320:	orr	r2, r2, lr
   43324:	bic	r8, r7, ip
   43328:	ldr	r5, [sp, #16]
   4332c:	str	lr, [r9, #8]
   43330:	bic	ip, ip, r7
   43334:	orr	r3, r3, sl
   43338:	ldr	lr, [sp, #60]	; 0x3c
   4333c:	orr	r2, r2, ip
   43340:	orr	r3, r3, r8
   43344:	str	ip, [r9, #12]
   43348:	ldr	ip, [sp, #24]
   4334c:	bic	r7, lr, r0
   43350:	bic	r0, r0, lr
   43354:	ldr	lr, [sp, #12]
   43358:	orr	r2, r2, r0
   4335c:	orr	r3, r3, r7
   43360:	str	r0, [r9, #16]
   43364:	bic	r0, ip, fp
   43368:	bic	r4, r5, lr
   4336c:	bic	r5, lr, r5
   43370:	bic	lr, fp, ip
   43374:	ldr	fp, [sp, #40]	; 0x28
   43378:	orr	r3, r3, r4
   4337c:	orr	r2, r2, r5
   43380:	orr	r3, r3, lr
   43384:	str	r5, [r9, #20]
   43388:	orr	r2, r2, r0
   4338c:	bic	ip, r1, fp
   43390:	bic	r1, fp, r1
   43394:	orrs	r3, r3, ip
   43398:	orr	r5, r2, r1
   4339c:	strd	r0, [r9, #24]
   433a0:	beq	4350c <__assert_fail@plt+0x30f18>
   433a4:	ldr	r2, [sp, #48]	; 0x30
   433a8:	str	sl, [r9, #-2072]	; 0xfffff7e8
   433ac:	ldr	r3, [sp, #64]	; 0x40
   433b0:	str	ip, [r9, #-2052]	; 0xfffff7fc
   433b4:	ldr	r1, [sp, #68]	; 0x44
   433b8:	ldr	r0, [sp, #72]	; 0x48
   433bc:	str	r3, [r9, #-2112]	; 0xfffff7c0
   433c0:	ldr	fp, [sp, #76]	; 0x4c
   433c4:	str	r1, [r9, #-2108]	; 0xfffff7c4
   433c8:	lsl	r1, r2, #1
   433cc:	ldr	ip, [sp, #124]	; 0x7c
   433d0:	str	r0, [r9, #-2104]	; 0xfffff7c8
   433d4:	add	r0, sp, #14528	; 0x38c0
   433d8:	add	r0, r0, #56	; 0x38
   433dc:	str	r1, [sp, #60]	; 0x3c
   433e0:	add	r3, r0, r2, lsl #5
   433e4:	add	r2, r1, r2
   433e8:	ldr	r1, [sp, #80]	; 0x50
   433ec:	str	fp, [r9, #-2100]	; 0xfffff7cc
   433f0:	ldr	fp, [sp, #88]	; 0x58
   433f4:	sub	r3, r3, #8192	; 0x2000
   433f8:	ldr	r0, [sp, #108]	; 0x6c
   433fc:	str	r1, [r9, #-2096]	; 0xfffff7d0
   43400:	ldr	r1, [sp, #84]	; 0x54
   43404:	str	r8, [r9, #-2068]	; 0xfffff7ec
   43408:	add	r0, r0, r2, lsl #2
   4340c:	str	r1, [r9, #-2092]	; 0xfffff7d4
   43410:	ldr	r1, [sp, #92]	; 0x5c
   43414:	str	r7, [r9, #-2064]	; 0xfffff7f0
   43418:	str	r4, [r9, #-2060]	; 0xfffff7f4
   4341c:	str	lr, [r9, #-2056]	; 0xfffff7f8
   43420:	str	r0, [sp, #12]
   43424:	str	fp, [r9, #-2088]	; 0xfffff7d8
   43428:	str	r1, [r9, #-2084]	; 0xfffff7dc
   4342c:	ldr	r1, [sp, #56]	; 0x38
   43430:	str	r1, [r9, #-2080]	; 0xfffff7e0
   43434:	ldr	r1, [sp, #120]	; 0x78
   43438:	str	r1, [r9, #-2076]	; 0xfffff7e4
   4343c:	ldrd	r0, [ip]
   43440:	ldrd	sl, [sp, #184]	; 0xb8
   43444:	ldr	r4, [sp, #12]
   43448:	strd	r0, [r3]
   4344c:	ldrd	r0, [sp, #192]	; 0xc0
   43450:	strd	sl, [sp, #24]
   43454:	ldrd	sl, [ip, #8]
   43458:	strd	r0, [sp, #32]
   4345c:	ldrd	r0, [ip, #16]
   43460:	strd	r0, [sp, #16]
   43464:	mov	r0, sl
   43468:	mov	r1, fp
   4346c:	ldrd	sl, [sp, #200]	; 0xc8
   43470:	strd	r0, [r3, #8]
   43474:	ldrd	r0, [sp, #16]
   43478:	strd	sl, [sp, #40]	; 0x28
   4347c:	ldrd	sl, [ip, #24]
   43480:	strd	r0, [r3, #16]
   43484:	ldrd	r0, [sp, #208]	; 0xd0
   43488:	strd	r0, [sp, #16]
   4348c:	mov	r0, sl
   43490:	mov	r1, fp
   43494:	ldrd	sl, [sp, #24]
   43498:	strd	r0, [r3, #24]
   4349c:	ldr	r3, [sp, #8]
   434a0:	ldrd	r0, [sp, #32]
   434a4:	strd	sl, [r6]
   434a8:	ldrd	sl, [sp, #40]	; 0x28
   434ac:	ldr	r3, [r3, #4]
   434b0:	strd	r0, [r6, #8]
   434b4:	ldrd	r0, [sp, #16]
   434b8:	strd	sl, [r6, #16]
   434bc:	cmp	r3, #0
   434c0:	str	r3, [r4, #4]
   434c4:	strd	r0, [r6, #24]
   434c8:	ble	43550 <__assert_fail@plt+0x30f5c>
   434cc:	ldr	r1, [sp, #108]	; 0x6c
   434d0:	lsl	r0, r3, #2
   434d4:	str	r3, [r1, r2, lsl #2]
   434d8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   434dc:	cmp	r0, #0
   434e0:	str	r0, [r4, #8]
   434e4:	ldr	r1, [sp, #60]	; 0x3c
   434e8:	beq	43a04 <__assert_fail@plt+0x31410>
   434ec:	ldr	r3, [sp, #8]
   434f0:	ldr	r2, [r3, #4]
   434f4:	ldr	r1, [r3, #8]
   434f8:	lsl	r2, r2, #2
   434fc:	bl	12024 <memcpy@plt>
   43500:	ldr	r3, [sp, #48]	; 0x30
   43504:	add	r3, r3, #1
   43508:	str	r3, [sp, #48]	; 0x30
   4350c:	ldr	r0, [sp, #8]
   43510:	ldr	r3, [sp, #100]	; 0x64
   43514:	ldr	r2, [sp, #112]	; 0x70
   43518:	ldr	r3, [r3, #12]
   4351c:	ldr	r1, [r3, r2]
   43520:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   43524:	cmp	r0, #0
   43528:	beq	4367c <__assert_fail@plt+0x31088>
   4352c:	cmp	r5, #0
   43530:	bne	431e0 <__assert_fail@plt+0x30bec>
   43534:	ldr	fp, [sp]
   43538:	ldr	r3, [sp, #48]	; 0x30
   4353c:	cmp	fp, r3
   43540:	beq	436e4 <__assert_fail@plt+0x310f0>
   43544:	ldr	r3, [sp, #100]	; 0x64
   43548:	ldr	r6, [r3, #8]
   4354c:	b	42ba4 <__assert_fail@plt+0x305b0>
   43550:	ldr	r1, [sp, #108]	; 0x6c
   43554:	mov	r3, #0
   43558:	str	r3, [r1, r2, lsl #2]
   4355c:	ldr	r2, [sp, #12]
   43560:	str	r3, [r2, #4]
   43564:	str	r3, [r2, #8]
   43568:	b	43500 <__assert_fail@plt+0x30f0c>
   4356c:	ldr	r1, [sp, #116]	; 0x74
   43570:	ldr	r2, [r1, #92]	; 0x5c
   43574:	cmp	r2, #1
   43578:	ble	437b0 <__assert_fail@plt+0x311bc>
   4357c:	ldr	r2, [r1, #60]	; 0x3c
   43580:	ldm	r9, {r1, ip}
   43584:	ldm	r2, {r0, lr}
   43588:	ldr	r4, [r2, #8]
   4358c:	orr	r1, r1, r0
   43590:	orr	ip, ip, lr
   43594:	ldr	r0, [r9, #8]
   43598:	stm	r9, {r1, ip}
   4359c:	ldr	lr, [r2, #12]
   435a0:	ldr	r1, [r9, #12]
   435a4:	orr	r0, r0, r4
   435a8:	str	r0, [r9, #8]
   435ac:	ldr	r4, [r2, #16]
   435b0:	orr	r1, r1, lr
   435b4:	ldr	r0, [r9, #16]
   435b8:	ldr	ip, [r2, #20]
   435bc:	str	r1, [r9, #12]
   435c0:	ldr	lr, [r9, #20]
   435c4:	orr	r0, r0, r4
   435c8:	ldr	r1, [r2, #24]
   435cc:	str	r0, [r9, #16]
   435d0:	ldr	r0, [r9, #24]
   435d4:	orr	ip, lr, ip
   435d8:	ldr	r2, [r2, #28]
   435dc:	str	ip, [r9, #20]
   435e0:	ldr	ip, [r9, #28]
   435e4:	orr	r1, r0, r1
   435e8:	str	r1, [r9, #24]
   435ec:	orr	r2, ip, r2
   435f0:	str	r2, [r9, #28]
   435f4:	ldr	r2, [sp, #116]	; 0x74
   435f8:	ldr	r2, [r2, #128]	; 0x80
   435fc:	tst	r2, #64	; 0x40
   43600:	beq	437a0 <__assert_fail@plt+0x311ac>
   43604:	tst	r2, #128	; 0x80
   43608:	beq	42eb0 <__assert_fail@plt+0x308bc>
   4360c:	ldr	r2, [r9]
   43610:	bic	r2, r2, #1
   43614:	str	r2, [r9]
   43618:	b	42eb0 <__assert_fail@plt+0x308bc>
   4361c:	ldr	r2, [r9]
   43620:	ldr	r1, [sp, #128]	; 0x80
   43624:	ldr	r0, [sp, #132]	; 0x84
   43628:	tst	r2, #1024	; 0x400
   4362c:	str	r1, [r9]
   43630:	strd	r0, [r9, #4]
   43634:	str	r0, [r9, #12]
   43638:	str	r1, [r9, #16]
   4363c:	str	r0, [r9, #20]
   43640:	str	r1, [r9, #24]
   43644:	str	r0, [r9, #28]
   43648:	beq	42ba4 <__assert_fail@plt+0x305b0>
   4364c:	mov	r2, #1024	; 0x400
   43650:	tst	r3, #128	; 0x80
   43654:	str	r2, [r9]
   43658:	beq	42ec8 <__assert_fail@plt+0x308d4>
   4365c:	ldr	r3, [sp, #128]	; 0x80
   43660:	ldr	r2, [sp, #132]	; 0x84
   43664:	str	r3, [r9]
   43668:	strd	r2, [r9, #4]
   4366c:	strd	r2, [r9, #12]
   43670:	strd	r2, [r9, #20]
   43674:	str	r2, [r9, #28]
   43678:	b	42ba4 <__assert_fail@plt+0x305b0>
   4367c:	ldr	r3, [sp, #48]	; 0x30
   43680:	lsl	r3, r3, #1
   43684:	mov	r2, r3
   43688:	mov	r3, r2
   4368c:	ldr	r2, [sp, #48]	; 0x30
   43690:	ldr	r4, [sp, #108]	; 0x6c
   43694:	add	r1, r3, r2
   43698:	add	r5, r4, r1, lsl #2
   4369c:	add	r4, r4, #12
   436a0:	ldr	r0, [r4, #-4]
   436a4:	bl	38b10 <__assert_fail@plt+0x2651c>
   436a8:	cmp	r5, r4
   436ac:	bne	4369c <__assert_fail@plt+0x310a8>
   436b0:	mov	r0, #0
   436b4:	add	sp, sp, #14528	; 0x38c0
   436b8:	add	sp, sp, #60	; 0x3c
   436bc:	ldrd	r4, [sp]
   436c0:	ldrd	r6, [sp, #8]
   436c4:	ldrd	r8, [sp, #16]
   436c8:	ldrd	sl, [sp, #24]
   436cc:	add	sp, sp, #32
   436d0:	pop	{pc}		; (ldr pc, [sp], #4)
   436d4:	ldr	r3, [sp, #48]	; 0x30
   436d8:	mov	fp, r2
   436dc:	cmp	fp, r3
   436e0:	bne	43544 <__assert_fail@plt+0x30f50>
   436e4:	ldr	r2, [sp, #100]	; 0x64
   436e8:	lsl	sl, r3, #1
   436ec:	add	ip, sp, #3312	; 0xcf0
   436f0:	add	ip, ip, #8
   436f4:	ldrd	r6, [r9]
   436f8:	add	r1, sl, r3
   436fc:	add	r5, ip, r1, lsl #2
   43700:	str	ip, [sp, #108]	; 0x6c
   43704:	ldr	lr, [sp, #112]	; 0x70
   43708:	ldr	r0, [r2, #12]
   4370c:	add	r2, sp, #14528	; 0x38c0
   43710:	add	r2, r2, #56	; 0x38
   43714:	add	r3, r2, r3, lsl #5
   43718:	mov	r2, #1
   4371c:	sub	r3, r3, #8192	; 0x2000
   43720:	ldr	r4, [r0, lr]
   43724:	mov	r0, #4
   43728:	strd	r6, [r3]
   4372c:	ldrd	r6, [r9, #16]
   43730:	str	r2, [ip, r1, lsl #2]
   43734:	str	r2, [r5, #4]
   43738:	strd	r6, [sp]
   4373c:	ldrd	r6, [r9, #8]
   43740:	strd	r6, [r3, #8]
   43744:	ldrd	r6, [sp]
   43748:	strd	r6, [r3, #16]
   4374c:	ldrd	r6, [r9, #24]
   43750:	strd	r6, [r3, #24]
   43754:	bl	3b49c <__assert_fail@plt+0x28ea8>
   43758:	cmp	r0, #0
   4375c:	str	r0, [r5, #8]
   43760:	beq	43a18 <__assert_fail@plt+0x31424>
   43764:	ldr	r3, [sp, #100]	; 0x64
   43768:	str	r4, [r0]
   4376c:	ldr	r6, [r3, #8]
   43770:	ldr	r3, [sp, #48]	; 0x30
   43774:	add	r3, r3, #1
   43778:	str	r3, [sp, #48]	; 0x30
   4377c:	b	4365c <__assert_fail@plt+0x31068>
   43780:	ldr	r2, [sp, #116]	; 0x74
   43784:	mvn	r0, #0
   43788:	mvn	r1, #0
   4378c:	strd	r0, [r9]
   43790:	strd	r0, [r9, #8]
   43794:	ldr	r2, [r2, #128]	; 0x80
   43798:	tst	r2, #64	; 0x40
   4379c:	bne	43604 <__assert_fail@plt+0x31010>
   437a0:	ldr	r1, [r9]
   437a4:	bic	r1, r1, #1024	; 0x400
   437a8:	str	r1, [r9]
   437ac:	b	43604 <__assert_fail@plt+0x31010>
   437b0:	mvn	r0, #0
   437b4:	mvn	r1, #0
   437b8:	strd	r0, [r9]
   437bc:	strd	r0, [r9, #8]
   437c0:	strd	r0, [r9, #16]
   437c4:	strd	r0, [r9, #24]
   437c8:	b	435f4 <__assert_fail@plt+0x31000>
   437cc:	and	r2, r4, r1
   437d0:	ldr	r4, [sp]
   437d4:	and	r1, r5, ip
   437d8:	orr	ip, r2, r1
   437dc:	and	lr, lr, r8
   437e0:	ldr	r5, [sp, #8]
   437e4:	mov	r8, lr
   437e8:	str	r2, [r9]
   437ec:	ldr	r2, [sp, #12]
   437f0:	and	r4, r4, r0
   437f4:	ldr	r0, [sp, #16]
   437f8:	orr	ip, ip, r4
   437fc:	and	r5, r5, sl
   43800:	ldr	r7, [sp, #24]
   43804:	orr	ip, ip, r5
   43808:	and	r2, r2, fp
   4380c:	orr	ip, ip, lr
   43810:	stmib	r9, {r1, r4, r5, r8}
   43814:	mov	fp, r2
   43818:	orr	ip, ip, r2
   4381c:	ldr	r2, [sp, #32]
   43820:	and	r0, r0, r7
   43824:	str	fp, [r9, #20]
   43828:	ldr	r7, [sp, #40]	; 0x28
   4382c:	orr	ip, ip, r0
   43830:	str	r0, [r9, #24]
   43834:	and	r2, r2, r7
   43838:	orr	ip, ip, r2
   4383c:	str	r2, [r9, #28]
   43840:	b	4302c <__assert_fail@plt+0x30a38>
   43844:	ldr	r2, [r2, r1, lsl #3]
   43848:	ldm	r9, {r1, ip}
   4384c:	ldm	r2, {r0, lr}
   43850:	ldr	r4, [r2, #8]
   43854:	orr	r1, r1, r0
   43858:	orr	ip, ip, lr
   4385c:	ldr	r0, [r9, #8]
   43860:	stm	r9, {r1, ip}
   43864:	ldr	lr, [r2, #12]
   43868:	ldr	r1, [r9, #12]
   4386c:	orr	r0, r0, r4
   43870:	str	r0, [r9, #8]
   43874:	ldr	r4, [r2, #16]
   43878:	orr	r1, r1, lr
   4387c:	ldr	r0, [r9, #16]
   43880:	ldr	ip, [r2, #20]
   43884:	str	r1, [r9, #12]
   43888:	ldr	lr, [r9, #20]
   4388c:	orr	r0, r0, r4
   43890:	ldr	r1, [r2, #24]
   43894:	str	r0, [r9, #16]
   43898:	ldr	r0, [r9, #24]
   4389c:	orr	ip, lr, ip
   438a0:	ldr	r2, [r2, #28]
   438a4:	str	ip, [r9, #20]
   438a8:	ldr	ip, [r9, #28]
   438ac:	orr	r1, r0, r1
   438b0:	str	r1, [r9, #24]
   438b4:	orr	r2, ip, r2
   438b8:	str	r2, [r9, #28]
   438bc:	b	42eb0 <__assert_fail@plt+0x308bc>
   438c0:	ldr	r2, [sp]
   438c4:	bic	ip, r5, ip
   438c8:	bic	r0, r4, r0
   438cc:	bic	r3, r8, r3
   438d0:	bic	r7, fp, r7
   438d4:	str	ip, [r9]
   438d8:	str	r3, [r9, #12]
   438dc:	str	r7, [r9, #16]
   438e0:	bic	r1, r2, r1
   438e4:	orr	r2, ip, r0
   438e8:	orr	r2, r2, r1
   438ec:	strd	r0, [r9, #4]
   438f0:	orr	r2, r2, r3
   438f4:	ldrd	r0, [sp, #8]
   438f8:	orr	r2, r2, r7
   438fc:	ldr	r3, [sp, #16]
   43900:	bic	ip, r1, lr
   43904:	ldr	r1, [sp, #24]
   43908:	bic	sl, r0, sl
   4390c:	orr	r2, r2, sl
   43910:	orr	r2, r2, ip
   43914:	str	sl, [r9, #20]
   43918:	str	ip, [r9, #24]
   4391c:	bic	r3, r3, r1
   43920:	orr	r2, r2, r3
   43924:	str	r3, [r9, #28]
   43928:	b	4316c <__assert_fail@plt+0x30b78>
   4392c:	ldr	r3, [sp, #96]	; 0x60
   43930:	ldrb	r3, [r3, #6]
   43934:	tst	r3, #64	; 0x40
   43938:	beq	43048 <__assert_fail@plt+0x30a54>
   4393c:	b	4365c <__assert_fail@plt+0x31068>
   43940:	ldr	r2, [sp, #96]	; 0x60
   43944:	ldrb	r2, [r2, #6]
   43948:	tst	r2, #64	; 0x40
   4394c:	bne	42edc <__assert_fail@plt+0x308e8>
   43950:	b	4365c <__assert_fail@plt+0x31068>
   43954:	ldr	r3, [r9, #-2160]	; 0xfffff790
   43958:	cmp	r3, #0
   4395c:	beq	439c0 <__assert_fail@plt+0x313cc>
   43960:	ldr	r0, [r9, #-2148]	; 0xfffff79c
   43964:	ldr	r4, [sp, #108]	; 0x6c
   43968:	bl	38b10 <__assert_fail@plt+0x2651c>
   4396c:	ldr	r3, [sp, #48]	; 0x30
   43970:	add	r5, r3, r3, lsl #1
   43974:	add	r5, r4, r5, lsl #2
   43978:	add	r4, r4, #12
   4397c:	ldr	r0, [r4, #-4]
   43980:	bl	38b10 <__assert_fail@plt+0x2651c>
   43984:	cmp	r4, r5
   43988:	bne	43978 <__assert_fail@plt+0x31384>
   4398c:	b	436b0 <__assert_fail@plt+0x310bc>
   43990:	mov	r3, #1
   43994:	add	r2, sp, #140	; 0x8c
   43998:	ldr	r0, [sp, #40]	; 0x28
   4399c:	mov	r1, fp
   439a0:	bl	426a8 <__assert_fail@plt+0x300b4>
   439a4:	add	r3, sp, #1264	; 0x4f0
   439a8:	cmp	r0, #0
   439ac:	add	r3, r3, #8
   439b0:	str	r0, [r3, r8, lsl #2]
   439b4:	beq	43954 <__assert_fail@plt+0x31360>
   439b8:	cmp	r7, r0
   439bc:	beq	439d4 <__assert_fail@plt+0x313e0>
   439c0:	ldr	r3, [fp, #92]	; 0x5c
   439c4:	cmp	r3, #2
   439c8:	ldr	r3, [sp, #52]	; 0x34
   439cc:	movge	r3, #1
   439d0:	str	r3, [sp, #52]	; 0x34
   439d4:	mov	r3, #2
   439d8:	add	r2, sp, #140	; 0x8c
   439dc:	ldr	r0, [sp, #40]	; 0x28
   439e0:	mov	r1, fp
   439e4:	bl	426a8 <__assert_fail@plt+0x300b4>
   439e8:	cmp	r0, #0
   439ec:	str	r0, [r9, r8, lsl #2]
   439f0:	bne	42cfc <__assert_fail@plt+0x30708>
   439f4:	ldr	r3, [r9, #-2160]	; 0xfffff790
   439f8:	cmp	r3, #0
   439fc:	beq	42cfc <__assert_fail@plt+0x30708>
   43a00:	b	43960 <__assert_fail@plt+0x3136c>
   43a04:	mov	r2, r1
   43a08:	ldr	r1, [sp, #12]
   43a0c:	str	r0, [r1]
   43a10:	str	r0, [r1, #4]
   43a14:	b	43688 <__assert_fail@plt+0x31094>
   43a18:	ldr	r3, [sp, #48]	; 0x30
   43a1c:	mov	r2, sl
   43a20:	str	r0, [r5]
   43a24:	str	r0, [r5, #4]
   43a28:	cmp	r3, #0
   43a2c:	beq	436b0 <__assert_fail@plt+0x310bc>
   43a30:	b	43688 <__assert_fail@plt+0x31094>
   43a34:	ldr	r3, [r9, #-2160]	; 0xfffff790
   43a38:	cmp	r3, #0
   43a3c:	beq	42ce0 <__assert_fail@plt+0x306ec>
   43a40:	b	43960 <__assert_fail@plt+0x3136c>
   43a44:	add	r2, sp, #3312	; 0xcf0
   43a48:	mov	r3, #12
   43a4c:	add	r2, r2, #8
   43a50:	str	r3, [r9, #-2160]	; 0xfffff790
   43a54:	str	r2, [sp, #108]	; 0x6c
   43a58:	b	43964 <__assert_fail@plt+0x31370>
   43a5c:	ldr	r2, [lr]
   43a60:	ands	r2, r1, r2
   43a64:	bne	43abc <__assert_fail@plt+0x314c8>
   43a68:	add	r2, r2, #1
   43a6c:	ldr	r8, [lr, r2, lsl #5]
   43a70:	tst	r1, r8
   43a74:	beq	43a68 <__assert_fail@plt+0x31474>
   43a78:	ldr	r8, [r5]
   43a7c:	add	r2, r9, r2, lsl #2
   43a80:	tst	r1, r8
   43a84:	ldrne	r2, [r2, #-1024]	; 0xfffffc00
   43a88:	ldreq	r2, [r2, #-2048]	; 0xfffff800
   43a8c:	str	r2, [r0]
   43a90:	b	42dfc <__assert_fail@plt+0x30808>
   43a94:	bne	436b0 <__assert_fail@plt+0x310bc>
   43a98:	mov	r1, #256	; 0x100
   43a9c:	mov	r0, #4
   43aa0:	bl	384e0 <__assert_fail@plt+0x25eec>
   43aa4:	ldr	r2, [sp, #100]	; 0x64
   43aa8:	mov	r3, r0
   43aac:	adds	r0, r0, #0
   43ab0:	movne	r0, #1
   43ab4:	str	r3, [r2, #44]	; 0x2c
   43ab8:	b	436b4 <__assert_fail@plt+0x310c0>
   43abc:	mov	r2, #0
   43ac0:	b	43a78 <__assert_fail@plt+0x31484>
   43ac4:	ldr	r2, [sp, #52]	; 0x34
   43ac8:	ldr	r3, [r9, r0, lsl #2]
   43acc:	cmp	r2, #0
   43ad0:	strne	r3, [r7, #1064]	; 0x428
   43ad4:	str	r3, [r7, #40]	; 0x28
   43ad8:	b	42e5c <__assert_fail@plt+0x30868>
   43adc:	mov	r1, #512	; 0x200
   43ae0:	mov	r0, #4
   43ae4:	bl	384e0 <__assert_fail@plt+0x25eec>
   43ae8:	ldr	r3, [sp, #100]	; 0x64
   43aec:	cmp	r0, #0
   43af0:	mov	r7, r0
   43af4:	str	r0, [r3, #48]	; 0x30
   43af8:	beq	43960 <__assert_fail@plt+0x3136c>
   43afc:	ldr	ip, [sp, #56]	; 0x38
   43b00:	add	r4, sp, #148	; 0x94
   43b04:	mov	lr, r0
   43b08:	add	r5, r0, #1024	; 0x400
   43b0c:	ldr	r3, [r4, #4]!
   43b10:	cmp	r3, #0
   43b14:	movne	r0, lr
   43b18:	movne	r1, #1
   43b1c:	beq	43b38 <__assert_fail@plt+0x31544>
   43b20:	tst	r3, #1
   43b24:	bne	43b4c <__assert_fail@plt+0x31558>
   43b28:	lsrs	r3, r3, #1
   43b2c:	add	r0, r0, #4
   43b30:	lsl	r1, r1, #1
   43b34:	bne	43b20 <__assert_fail@plt+0x3152c>
   43b38:	add	lr, lr, #128	; 0x80
   43b3c:	add	ip, ip, #4
   43b40:	cmp	r5, lr
   43b44:	bne	43b0c <__assert_fail@plt+0x31518>
   43b48:	b	42e20 <__assert_fail@plt+0x3082c>
   43b4c:	ldr	r2, [ip]
   43b50:	ands	r2, r1, r2
   43b54:	bne	43b80 <__assert_fail@plt+0x3158c>
   43b58:	add	r2, r2, #1
   43b5c:	ldr	r6, [ip, r2, lsl #5]
   43b60:	tst	r1, r6
   43b64:	beq	43b58 <__assert_fail@plt+0x31564>
   43b68:	add	r2, r9, r2, lsl #2
   43b6c:	ldr	r6, [r2, #-2048]	; 0xfffff800
   43b70:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   43b74:	str	r6, [r0]
   43b78:	str	r2, [r0, #1024]	; 0x400
   43b7c:	b	43b28 <__assert_fail@plt+0x31534>
   43b80:	mov	r2, #0
   43b84:	b	43b68 <__assert_fail@plt+0x31574>
   43b88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   43b8c:	mov	r4, r0
   43b90:	ldr	r0, [r0, #84]	; 0x54
   43b94:	ldr	r5, [r1, #4]
   43b98:	strd	r6, [sp, #8]
   43b9c:	mov	r7, r3
   43ba0:	mov	r6, #0
   43ba4:	strd	r8, [sp, #16]
   43ba8:	mov	r9, r2
   43bac:	ldr	r3, [r0]
   43bb0:	strd	sl, [sp, #24]
   43bb4:	str	lr, [sp, #32]
   43bb8:	sub	sp, sp, #76	; 0x4c
   43bbc:	ldr	r2, [r4, #120]	; 0x78
   43bc0:	str	r0, [sp, #16]
   43bc4:	str	r1, [sp, #28]
   43bc8:	ldr	r1, [sp, #116]	; 0x74
   43bcc:	ldr	r3, [r3, r9, lsl #3]
   43bd0:	add	r2, r1, r2
   43bd4:	cmp	r2, r5
   43bd8:	str	r3, [sp, #20]
   43bdc:	str	r6, [sp, #40]	; 0x28
   43be0:	bge	4428c <__assert_fail@plt+0x31c98>
   43be4:	ldr	r3, [sp, #28]
   43be8:	ldr	r2, [r4, #88]	; 0x58
   43bec:	ldr	r6, [r3]
   43bf0:	ldr	r5, [r3, #8]
   43bf4:	ldr	r3, [r4, #40]	; 0x28
   43bf8:	cmp	r6, #0
   43bfc:	str	r3, [sp, #36]	; 0x24
   43c00:	ldr	r3, [r4, #100]	; 0x64
   43c04:	str	r3, [sp, #32]
   43c08:	bne	44038 <__assert_fail@plt+0x31a44>
   43c0c:	sub	r1, r7, #1
   43c10:	mov	r0, r4
   43c14:	str	r7, [r4, #40]	; 0x28
   43c18:	str	r5, [r4, #100]	; 0x64
   43c1c:	bl	3d850 <__assert_fail@plt+0x2b25c>
   43c20:	mov	r8, r0
   43c24:	mov	r2, #1
   43c28:	mov	r3, #1
   43c2c:	mov	r0, #4
   43c30:	strd	r2, [sp, #48]	; 0x30
   43c34:	bl	3b49c <__assert_fail@plt+0x28ea8>
   43c38:	cmp	r0, #0
   43c3c:	str	r0, [sp, #56]	; 0x38
   43c40:	beq	442fc <__assert_fail@plt+0x31d08>
   43c44:	mov	ip, #0
   43c48:	add	r5, sp, #48	; 0x30
   43c4c:	str	r9, [r0]
   43c50:	mov	r1, r5
   43c54:	ldr	r0, [sp, #16]
   43c58:	str	ip, [sp, #40]	; 0x28
   43c5c:	ldr	r2, [sp, #20]
   43c60:	ldr	r3, [sp, #120]	; 0x78
   43c64:	bl	414a0 <__assert_fail@plt+0x2eeac>
   43c68:	cmp	r0, #0
   43c6c:	str	r0, [sp, #40]	; 0x28
   43c70:	bne	44168 <__assert_fail@plt+0x31b74>
   43c74:	ldr	r3, [sp, #52]	; 0x34
   43c78:	mov	r6, r7
   43c7c:	cmp	r3, #0
   43c80:	beq	43cac <__assert_fail@plt+0x316b8>
   43c84:	mov	r2, r6
   43c88:	mov	r0, r4
   43c8c:	ldr	r3, [sp, #20]
   43c90:	ldr	r1, [sp, #120]	; 0x78
   43c94:	str	r1, [sp]
   43c98:	mov	r1, r5
   43c9c:	bl	4217c <__assert_fail@plt+0x2fb88>
   43ca0:	cmp	r0, #0
   43ca4:	str	r0, [sp, #40]	; 0x28
   43ca8:	bne	44168 <__assert_fail@plt+0x31b74>
   43cac:	mov	r3, r8
   43cb0:	mov	r2, r5
   43cb4:	ldr	r1, [sp, #16]
   43cb8:	add	r0, sp, #40	; 0x28
   43cbc:	bl	426a8 <__assert_fail@plt+0x300b4>
   43cc0:	subs	fp, r0, #0
   43cc4:	beq	44304 <__assert_fail@plt+0x31d10>
   43cc8:	ldr	r3, [r4, #100]	; 0x64
   43ccc:	str	fp, [r3, r6, lsl #2]
   43cd0:	ldr	r3, [sp, #116]	; 0x74
   43cd4:	cmp	r6, r3
   43cd8:	bge	43f78 <__assert_fail@plt+0x31984>
   43cdc:	ldr	r3, [r4, #120]	; 0x78
   43ce0:	cmp	r3, #0
   43ce4:	blt	43f78 <__assert_fail@plt+0x31984>
   43ce8:	ldr	r3, [r4, #100]	; 0x64
   43cec:	mov	r2, #0
   43cf0:	add	r9, r6, #1
   43cf4:	str	r2, [sp, #8]
   43cf8:	ldr	r1, [r3, r9, lsl #2]
   43cfc:	lsl	r3, r9, #2
   43d00:	sub	r8, r9, #1
   43d04:	str	r3, [sp, #12]
   43d08:	mov	r3, #0
   43d0c:	cmp	r1, r3
   43d10:	str	r3, [sp, #52]	; 0x34
   43d14:	beq	44138 <__assert_fail@plt+0x31b44>
   43d18:	add	r5, sp, #48	; 0x30
   43d1c:	add	r1, r1, #4
   43d20:	mov	r0, r5
   43d24:	bl	3d68c <__assert_fail@plt+0x2b098>
   43d28:	cmp	r0, #0
   43d2c:	str	r0, [sp, #40]	; 0x28
   43d30:	bne	44168 <__assert_fail@plt+0x31b74>
   43d34:	cmp	fp, #0
   43d38:	beq	43ec0 <__assert_fail@plt+0x318cc>
   43d3c:	ldr	r3, [fp, #20]
   43d40:	mov	r2, #0
   43d44:	str	r2, [sp, #44]	; 0x2c
   43d48:	str	r2, [sp, #60]	; 0x3c
   43d4c:	str	r2, [sp, #64]	; 0x40
   43d50:	cmp	r3, r2
   43d54:	str	r2, [sp, #68]	; 0x44
   43d58:	ldr	r7, [r4, #84]	; 0x54
   43d5c:	ble	44334 <__assert_fail@plt+0x31d40>
   43d60:	str	r9, [sp, #24]
   43d64:	mov	r9, r2
   43d68:	ldr	r3, [fp, #24]
   43d6c:	ldr	r0, [r7]
   43d70:	ldr	r5, [r3]
   43d74:	lsl	sl, r5, #3
   43d78:	add	r1, r0, sl
   43d7c:	b	43df0 <__assert_fail@plt+0x317fc>
   43d80:	mov	r2, r8
   43d84:	mov	r0, r4
   43d88:	bl	3d968 <__assert_fail@plt+0x2b374>
   43d8c:	cmp	r0, #0
   43d90:	beq	43dcc <__assert_fail@plt+0x317d8>
   43d94:	lsl	sl, r5, #2
   43d98:	ldr	r3, [sp, #48]	; 0x30
   43d9c:	ldr	r2, [r7, #12]
   43da0:	cmp	r3, #0
   43da4:	ldr	r5, [r2, sl]
   43da8:	beq	440e8 <__assert_fail@plt+0x31af4>
   43dac:	ldr	r1, [sp, #52]	; 0x34
   43db0:	ldr	r6, [sp, #56]	; 0x38
   43db4:	cmp	r1, #0
   43db8:	bne	44190 <__assert_fail@plt+0x31b9c>
   43dbc:	str	r5, [r6]
   43dc0:	ldr	r3, [sp, #52]	; 0x34
   43dc4:	add	r3, r3, #1
   43dc8:	str	r3, [sp, #52]	; 0x34
   43dcc:	ldr	r3, [fp, #20]
   43dd0:	add	r9, r9, #1
   43dd4:	cmp	r9, r3
   43dd8:	bge	4411c <__assert_fail@plt+0x31b28>
   43ddc:	ldr	r3, [fp, #24]
   43de0:	ldr	r0, [r7]
   43de4:	ldr	r5, [r3, r9, lsl #2]
   43de8:	lsl	sl, r5, #3
   43dec:	add	r1, r0, sl
   43df0:	ldrb	r3, [r1, #6]
   43df4:	tst	r3, #16
   43df8:	beq	43d80 <__assert_fail@plt+0x3178c>
   43dfc:	mov	r3, r4
   43e00:	mov	r2, r5
   43e04:	str	r8, [sp]
   43e08:	add	r1, r7, #128	; 0x80
   43e0c:	bl	40524 <__assert_fail@plt+0x2df30>
   43e10:	cmp	r0, #1
   43e14:	ble	440d4 <__assert_fail@plt+0x31ae0>
   43e18:	ldr	r2, [r4, #100]	; 0x64
   43e1c:	add	r6, r0, r8
   43e20:	lsl	sl, r5, #2
   43e24:	ldr	r3, [r7, #12]
   43e28:	ldr	r1, [r2, r6, lsl #2]
   43e2c:	ldr	r5, [r3, r5, lsl #2]
   43e30:	mov	r3, #0
   43e34:	str	r3, [sp, #64]	; 0x40
   43e38:	cmp	r1, r3
   43e3c:	beq	43e58 <__assert_fail@plt+0x31864>
   43e40:	add	r1, r1, #4
   43e44:	add	r0, sp, #60	; 0x3c
   43e48:	bl	3d68c <__assert_fail@plt+0x2b098>
   43e4c:	cmp	r0, #0
   43e50:	str	r0, [sp, #44]	; 0x2c
   43e54:	bne	43ea0 <__assert_fail@plt+0x318ac>
   43e58:	mov	r1, r5
   43e5c:	add	r0, sp, #60	; 0x3c
   43e60:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   43e64:	cmp	r0, #0
   43e68:	beq	44158 <__assert_fail@plt+0x31b64>
   43e6c:	add	r2, sp, #60	; 0x3c
   43e70:	mov	r1, r7
   43e74:	ldr	r5, [r4, #100]	; 0x64
   43e78:	add	r0, sp, #44	; 0x2c
   43e7c:	bl	41eb0 <__assert_fail@plt+0x2f8bc>
   43e80:	ldr	r3, [r4, #100]	; 0x64
   43e84:	str	r0, [r5, r6, lsl #2]
   43e88:	ldr	r3, [r3, r6, lsl #2]
   43e8c:	cmp	r3, #0
   43e90:	bne	43d98 <__assert_fail@plt+0x317a4>
   43e94:	ldr	r3, [sp, #44]	; 0x2c
   43e98:	cmp	r3, #0
   43e9c:	beq	43d98 <__assert_fail@plt+0x317a4>
   43ea0:	ldr	r9, [sp, #24]
   43ea4:	ldr	r0, [sp, #68]	; 0x44
   43ea8:	bl	38b10 <__assert_fail@plt+0x2651c>
   43eac:	ldr	r3, [sp, #44]	; 0x2c
   43eb0:	cmp	r3, #0
   43eb4:	str	r3, [sp, #40]	; 0x28
   43eb8:	bne	44168 <__assert_fail@plt+0x31b74>
   43ebc:	add	r5, sp, #48	; 0x30
   43ec0:	ldr	r3, [sp, #52]	; 0x34
   43ec4:	mov	r6, r9
   43ec8:	cmp	r3, #0
   43ecc:	beq	43f18 <__assert_fail@plt+0x31924>
   43ed0:	mov	r1, r5
   43ed4:	ldr	r0, [sp, #16]
   43ed8:	ldr	r2, [sp, #20]
   43edc:	ldr	r3, [sp, #120]	; 0x78
   43ee0:	bl	414a0 <__assert_fail@plt+0x2eeac>
   43ee4:	cmp	r0, #0
   43ee8:	str	r0, [sp, #40]	; 0x28
   43eec:	bne	44168 <__assert_fail@plt+0x31b74>
   43ef0:	mov	r2, r9
   43ef4:	mov	r0, r4
   43ef8:	ldr	r3, [sp, #20]
   43efc:	ldr	r1, [sp, #120]	; 0x78
   43f00:	str	r1, [sp]
   43f04:	mov	r1, r5
   43f08:	bl	4217c <__assert_fail@plt+0x2fb88>
   43f0c:	cmp	r0, #0
   43f10:	str	r0, [sp, #40]	; 0x28
   43f14:	bne	44168 <__assert_fail@plt+0x31b74>
   43f18:	mov	r1, r8
   43f1c:	mov	r0, r4
   43f20:	ldr	r2, [r4, #88]	; 0x58
   43f24:	bl	3d850 <__assert_fail@plt+0x2b25c>
   43f28:	mov	r3, r0
   43f2c:	mov	r2, r5
   43f30:	ldr	r1, [sp, #16]
   43f34:	add	r0, sp, #40	; 0x28
   43f38:	bl	426a8 <__assert_fail@plt+0x300b4>
   43f3c:	subs	fp, r0, #0
   43f40:	beq	44210 <__assert_fail@plt+0x31c1c>
   43f44:	mov	r2, #0
   43f48:	ldr	r3, [r4, #100]	; 0x64
   43f4c:	str	r2, [sp, #8]
   43f50:	ldr	r2, [sp, #12]
   43f54:	str	fp, [r3, r2]
   43f58:	ldr	r2, [sp, #116]	; 0x74
   43f5c:	cmp	r2, r9
   43f60:	ble	43f78 <__assert_fail@plt+0x31984>
   43f64:	ldr	r1, [sp, #8]
   43f68:	add	r9, r9, #1
   43f6c:	ldr	r2, [r4, #120]	; 0x78
   43f70:	cmp	r2, r1
   43f74:	bge	43cf8 <__assert_fail@plt+0x31704>
   43f78:	ldr	r0, [sp, #56]	; 0x38
   43f7c:	bl	38b10 <__assert_fail@plt+0x2651c>
   43f80:	ldr	r3, [r4, #100]	; 0x64
   43f84:	ldr	r2, [sp, #116]	; 0x74
   43f88:	ldr	r3, [r3, r2, lsl #2]
   43f8c:	cmp	r3, #0
   43f90:	beq	44314 <__assert_fail@plt+0x31d20>
   43f94:	ldr	r2, [sp, #28]
   43f98:	ldr	r1, [sp, #32]
   43f9c:	str	r6, [r2]
   43fa0:	ldr	r2, [sp, #36]	; 0x24
   43fa4:	str	r2, [r4, #40]	; 0x28
   43fa8:	ldr	r2, [r3, #8]
   43fac:	str	r1, [r4, #100]	; 0x64
   43fb0:	cmp	r2, #0
   43fb4:	ble	4433c <__assert_fail@plt+0x31d48>
   43fb8:	subs	r2, r2, #1
   43fbc:	ldr	ip, [r3, #12]
   43fc0:	moveq	r1, r2
   43fc4:	beq	44024 <__assert_fail@plt+0x31a30>
   43fc8:	ldr	lr, [sp, #112]	; 0x70
   43fcc:	mov	r1, #0
   43fd0:	add	r3, r1, r2
   43fd4:	lsr	r3, r3, #1
   43fd8:	ldr	r0, [ip, r3, lsl #2]
   43fdc:	cmp	r0, lr
   43fe0:	blt	442ec <__assert_fail@plt+0x31cf8>
   43fe4:	cmp	r3, r1
   43fe8:	bls	44024 <__assert_fail@plt+0x31a30>
   43fec:	add	r2, r3, r1
   43ff0:	lsr	r2, r2, #1
   43ff4:	ldr	r0, [ip, r2, lsl #2]
   43ff8:	cmp	lr, r0
   43ffc:	ble	44014 <__assert_fail@plt+0x31a20>
   44000:	b	442e0 <__assert_fail@plt+0x31cec>
   44004:	ldr	r0, [ip, r3, lsl #2]
   44008:	cmp	lr, r0
   4400c:	bgt	442ec <__assert_fail@plt+0x31cf8>
   44010:	mov	r2, r3
   44014:	add	r3, r2, r1
   44018:	cmp	r2, r1
   4401c:	lsr	r3, r3, #1
   44020:	bhi	44004 <__assert_fail@plt+0x31a10>
   44024:	ldr	r0, [ip, r1, lsl #2]
   44028:	ldr	r3, [sp, #112]	; 0x70
   4402c:	subs	r0, r0, r3
   44030:	movne	r0, #1
   44034:	b	44174 <__assert_fail@plt+0x31b80>
   44038:	sub	r1, r6, #1
   4403c:	mov	r0, r4
   44040:	str	r6, [r4, #40]	; 0x28
   44044:	str	r5, [r4, #100]	; 0x64
   44048:	bl	3d850 <__assert_fail@plt+0x2b25c>
   4404c:	cmp	r6, r7
   44050:	mov	r8, r0
   44054:	beq	43c24 <__assert_fail@plt+0x31630>
   44058:	ldr	fp, [r5, r6, lsl #2]
   4405c:	cmp	fp, #0
   44060:	beq	4427c <__assert_fail@plt+0x31c88>
   44064:	ldrb	r3, [fp, #52]	; 0x34
   44068:	ands	r3, r3, #64	; 0x40
   4406c:	streq	r3, [sp, #48]	; 0x30
   44070:	streq	r3, [sp, #52]	; 0x34
   44074:	streq	r3, [sp, #56]	; 0x38
   44078:	beq	43cd0 <__assert_fail@plt+0x316dc>
   4407c:	ldr	r3, [fp, #8]
   44080:	cmp	r3, #0
   44084:	str	r3, [sp, #52]	; 0x34
   44088:	ble	44238 <__assert_fail@plt+0x31c44>
   4408c:	lsl	r0, r3, #2
   44090:	str	r3, [sp, #48]	; 0x30
   44094:	bl	3b49c <__assert_fail@plt+0x28ea8>
   44098:	cmp	r0, #0
   4409c:	str	r0, [sp, #56]	; 0x38
   440a0:	beq	442fc <__assert_fail@plt+0x31d08>
   440a4:	ldr	r2, [fp, #8]
   440a8:	ldr	r1, [fp, #12]
   440ac:	lsl	r2, r2, #2
   440b0:	bl	12024 <memcpy@plt>
   440b4:	ldrb	r3, [fp, #52]	; 0x34
   440b8:	mov	r2, #0
   440bc:	str	r2, [sp, #40]	; 0x28
   440c0:	tst	r3, #64	; 0x40
   440c4:	beq	43cd0 <__assert_fail@plt+0x316dc>
   440c8:	add	r5, sp, #48	; 0x30
   440cc:	ldr	r3, [sp, #52]	; 0x34
   440d0:	b	43c7c <__assert_fail@plt+0x31688>
   440d4:	cmp	r0, #0
   440d8:	bne	43d94 <__assert_fail@plt+0x317a0>
   440dc:	ldr	r0, [r7]
   440e0:	add	r1, r0, sl
   440e4:	b	43d80 <__assert_fail@plt+0x3178c>
   440e8:	mov	r2, #1
   440ec:	mov	r3, #1
   440f0:	mov	r0, #4
   440f4:	strd	r2, [sp, #48]	; 0x30
   440f8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   440fc:	cmp	r0, #0
   44100:	str	r0, [sp, #56]	; 0x38
   44104:	beq	4414c <__assert_fail@plt+0x31b58>
   44108:	str	r5, [r0]
   4410c:	add	r9, r9, #1
   44110:	ldr	r3, [fp, #20]
   44114:	cmp	r9, r3
   44118:	blt	43ddc <__assert_fail@plt+0x317e8>
   4411c:	ldr	r9, [sp, #24]
   44120:	ldr	r0, [sp, #68]	; 0x44
   44124:	bl	38b10 <__assert_fail@plt+0x2651c>
   44128:	mov	r3, #0
   4412c:	add	r5, sp, #48	; 0x30
   44130:	str	r3, [sp, #40]	; 0x28
   44134:	b	43ec0 <__assert_fail@plt+0x318cc>
   44138:	cmp	fp, #0
   4413c:	bne	43d3c <__assert_fail@plt+0x31748>
   44140:	mov	r6, r9
   44144:	add	r5, sp, #48	; 0x30
   44148:	b	43f18 <__assert_fail@plt+0x31924>
   4414c:	mov	r2, #0
   44150:	mov	r3, #0
   44154:	strd	r2, [sp, #48]	; 0x30
   44158:	ldr	r0, [sp, #68]	; 0x44
   4415c:	bl	38b10 <__assert_fail@plt+0x2651c>
   44160:	mov	r3, #12
   44164:	str	r3, [sp, #40]	; 0x28
   44168:	ldr	r0, [sp, #56]	; 0x38
   4416c:	bl	38b10 <__assert_fail@plt+0x2651c>
   44170:	ldr	r0, [sp, #40]	; 0x28
   44174:	add	sp, sp, #76	; 0x4c
   44178:	ldrd	r4, [sp]
   4417c:	ldrd	r6, [sp, #8]
   44180:	ldrd	r8, [sp, #16]
   44184:	ldrd	sl, [sp, #24]
   44188:	add	sp, sp, #32
   4418c:	pop	{pc}		; (ldr pc, [sp], #4)
   44190:	cmp	r3, r1
   44194:	beq	44254 <__assert_fail@plt+0x31c60>
   44198:	ldr	r3, [r6]
   4419c:	mov	r2, r1
   441a0:	cmp	r5, r3
   441a4:	bge	441d8 <__assert_fail@plt+0x31be4>
   441a8:	cmp	r1, #0
   441ac:	ble	441c4 <__assert_fail@plt+0x31bd0>
   441b0:	lsl	r2, r1, #2
   441b4:	add	r0, r6, #4
   441b8:	mov	r1, r6
   441bc:	bl	11fb8 <memmove@plt>
   441c0:	mov	r2, #0
   441c4:	str	r5, [r6, r2, lsl #2]
   441c8:	ldr	r3, [sp, #52]	; 0x34
   441cc:	add	r3, r3, #1
   441d0:	str	r3, [sp, #52]	; 0x34
   441d4:	b	43dcc <__assert_fail@plt+0x317d8>
   441d8:	sub	r3, r1, #-1073741823	; 0xc0000001
   441dc:	ldr	r0, [r6, r3, lsl #2]
   441e0:	lsl	r3, r3, #2
   441e4:	cmp	r0, r5
   441e8:	ble	441c4 <__assert_fail@plt+0x31bd0>
   441ec:	add	r3, r3, #4
   441f0:	add	r3, r6, r3
   441f4:	str	r0, [r3], #-4
   441f8:	sub	r1, r1, #1
   441fc:	ldr	r0, [r3, #-4]
   44200:	mov	r2, r1
   44204:	cmp	r5, r0
   44208:	blt	441f4 <__assert_fail@plt+0x31c00>
   4420c:	b	441c4 <__assert_fail@plt+0x31bd0>
   44210:	ldr	r3, [sp, #40]	; 0x28
   44214:	cmp	r3, #0
   44218:	bne	44168 <__assert_fail@plt+0x31b74>
   4421c:	ldr	r2, [sp, #8]
   44220:	ldr	r3, [r4, #100]	; 0x64
   44224:	add	r2, r2, #1
   44228:	str	r2, [sp, #8]
   4422c:	ldr	r2, [sp, #12]
   44230:	str	fp, [r3, r2]
   44234:	b	43f58 <__assert_fail@plt+0x31964>
   44238:	mov	r3, #0
   4423c:	add	r5, sp, #48	; 0x30
   44240:	str	r3, [sp, #40]	; 0x28
   44244:	str	r3, [sp, #48]	; 0x30
   44248:	str	r3, [r5, #4]
   4424c:	str	r3, [r5, #8]
   44250:	b	43cac <__assert_fail@plt+0x316b8>
   44254:	lsl	r3, r1, #1
   44258:	mov	r0, r6
   4425c:	lsl	r1, r1, #3
   44260:	str	r3, [sp, #48]	; 0x30
   44264:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   44268:	subs	r6, r0, #0
   4426c:	beq	44158 <__assert_fail@plt+0x31b64>
   44270:	str	r6, [sp, #56]	; 0x38
   44274:	ldr	r1, [sp, #52]	; 0x34
   44278:	b	44198 <__assert_fail@plt+0x31ba4>
   4427c:	str	fp, [sp, #48]	; 0x30
   44280:	str	fp, [sp, #52]	; 0x34
   44284:	str	fp, [sp, #56]	; 0x38
   44288:	b	43cd0 <__assert_fail@plt+0x316dc>
   4428c:	mvn	r3, #-2147483648	; 0x80000000
   44290:	add	sl, r2, #1
   44294:	sub	r3, r3, r5
   44298:	cmp	r3, sl
   4429c:	blt	442fc <__assert_fail@plt+0x31d08>
   442a0:	add	r8, r5, sl
   442a4:	cmn	r8, #-1073741823	; 0xc0000001
   442a8:	bhi	442fc <__assert_fail@plt+0x31d08>
   442ac:	ldr	fp, [sp, #28]
   442b0:	lsl	r1, r8, #2
   442b4:	ldr	r0, [fp, #8]
   442b8:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   442bc:	subs	r3, r0, #0
   442c0:	beq	442fc <__assert_fail@plt+0x31d08>
   442c4:	lsl	r2, sl, #2
   442c8:	mov	r1, r6
   442cc:	str	r8, [fp, #4]
   442d0:	add	r0, r3, r5, lsl #2
   442d4:	str	r3, [fp, #8]
   442d8:	bl	12378 <memset@plt>
   442dc:	b	43be4 <__assert_fail@plt+0x315f0>
   442e0:	mov	r1, r2
   442e4:	mov	r2, r3
   442e8:	mov	r3, r1
   442ec:	add	r1, r3, #1
   442f0:	cmp	r1, r2
   442f4:	bcc	43fd0 <__assert_fail@plt+0x319dc>
   442f8:	b	44024 <__assert_fail@plt+0x31a30>
   442fc:	mov	r0, #12
   44300:	b	44174 <__assert_fail@plt+0x31b80>
   44304:	ldr	r3, [sp, #40]	; 0x28
   44308:	cmp	r3, #0
   4430c:	beq	43cc8 <__assert_fail@plt+0x316d4>
   44310:	b	44168 <__assert_fail@plt+0x31b74>
   44314:	ldr	r3, [sp, #28]
   44318:	mov	r0, #1
   4431c:	str	r6, [r3]
   44320:	ldr	r3, [sp, #36]	; 0x24
   44324:	str	r3, [r4, #40]	; 0x28
   44328:	ldr	r3, [sp, #32]
   4432c:	str	r3, [r4, #100]	; 0x64
   44330:	b	44174 <__assert_fail@plt+0x31b80>
   44334:	mov	r0, #0
   44338:	b	44124 <__assert_fail@plt+0x31b30>
   4433c:	mov	r0, #1
   44340:	b	44174 <__assert_fail@plt+0x31b80>
   44344:	mov	ip, r2
   44348:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4434c:	mov	r4, r0
   44350:	strd	r6, [sp, #8]
   44354:	mov	r6, r2
   44358:	mov	r7, r3
   4435c:	strd	r8, [sp, #16]
   44360:	mov	r3, #8
   44364:	mov	r9, r1
   44368:	strd	sl, [sp, #24]
   4436c:	str	lr, [sp, #32]
   44370:	sub	sp, sp, #20
   44374:	ldr	r2, [ip], #8
   44378:	str	r7, [sp]
   4437c:	ldr	r5, [sp, #56]	; 0x38
   44380:	mov	r1, ip
   44384:	str	r5, [sp, #4]
   44388:	str	r3, [sp, #8]
   4438c:	ldr	r3, [r6, #4]
   44390:	bl	43b88 <__assert_fail@plt+0x31594>
   44394:	subs	r8, r0, #0
   44398:	beq	443bc <__assert_fail@plt+0x31dc8>
   4439c:	mov	r0, r8
   443a0:	add	sp, sp, #20
   443a4:	ldrd	r4, [sp]
   443a8:	ldrd	r6, [sp, #8]
   443ac:	ldrd	r8, [sp, #16]
   443b0:	ldrd	sl, [sp, #24]
   443b4:	add	sp, sp, #32
   443b8:	pop	{pc}		; (ldr pc, [sp], #4)
   443bc:	ldr	r3, [r4, #108]	; 0x6c
   443c0:	ldr	r1, [r4, #112]	; 0x70
   443c4:	ldr	sl, [r6, #4]
   443c8:	ldr	fp, [r9]
   443cc:	cmp	r3, r1
   443d0:	ldr	r0, [r4, #116]	; 0x74
   443d4:	movlt	ip, sl
   443d8:	bge	444c4 <__assert_fail@plt+0x31ed0>
   443dc:	add	r2, r3, r3, lsl #1
   443e0:	cmp	r3, #0
   443e4:	lsl	r2, r2, #3
   443e8:	ble	44404 <__assert_fail@plt+0x31e10>
   443ec:	sub	r1, r2, #24
   443f0:	add	r1, r0, r1
   443f4:	ldr	lr, [r1, #4]
   443f8:	cmp	r5, lr
   443fc:	moveq	lr, #1
   44400:	strbeq	lr, [r1, #20]
   44404:	cmp	fp, sl
   44408:	add	r1, r0, r2
   4440c:	str	r7, [r0, r2]
   44410:	add	r3, r3, #1
   44414:	movne	lr, #0
   44418:	mvneq	lr, #0
   4441c:	mov	r0, #0
   44420:	stmib	r1, {r5, fp}
   44424:	str	sl, [r1, #12]
   44428:	sub	r2, sl, fp
   4442c:	add	r5, r5, ip
   44430:	str	lr, [r1, #16]
   44434:	str	r3, [r4, #108]	; 0x6c
   44438:	strb	r0, [r1, #20]
   4443c:	ldr	r6, [r4, #104]	; 0x68
   44440:	ldr	r3, [r4, #120]	; 0x78
   44444:	cmp	r3, r2
   44448:	ldr	r3, [r4, #36]	; 0x24
   4444c:	strlt	r2, [r4, #120]	; 0x78
   44450:	ldr	r2, [r9]
   44454:	sub	r5, r5, r2
   44458:	cmp	r5, r3
   4445c:	blt	4446c <__assert_fail@plt+0x31e78>
   44460:	ldr	r2, [r4, #48]	; 0x30
   44464:	cmp	r3, r2
   44468:	blt	44484 <__assert_fail@plt+0x31e90>
   4446c:	ldr	r3, [r4, #28]
   44470:	cmp	r5, r3
   44474:	blt	44498 <__assert_fail@plt+0x31ea4>
   44478:	ldr	r2, [r4, #48]	; 0x30
   4447c:	cmp	r3, r2
   44480:	bge	44498 <__assert_fail@plt+0x31ea4>
   44484:	add	r1, r5, #1
   44488:	mov	r0, r4
   4448c:	bl	41010 <__assert_fail@plt+0x2ea1c>
   44490:	cmp	r0, #0
   44494:	bne	44518 <__assert_fail@plt+0x31f24>
   44498:	cmp	r5, r6
   4449c:	ble	4439c <__assert_fail@plt+0x31da8>
   444a0:	ldr	r3, [r4, #100]	; 0x64
   444a4:	add	r0, r6, #1
   444a8:	sub	r2, r5, r6
   444ac:	lsl	r2, r2, #2
   444b0:	mov	r1, #0
   444b4:	add	r0, r3, r0, lsl #2
   444b8:	bl	12378 <memset@plt>
   444bc:	str	r5, [r4, #104]	; 0x68
   444c0:	b	4439c <__assert_fail@plt+0x31da8>
   444c4:	add	r1, r1, r1, lsl #1
   444c8:	lsl	r1, r1, #4
   444cc:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   444d0:	cmp	r0, #0
   444d4:	beq	44520 <__assert_fail@plt+0x31f2c>
   444d8:	ldr	r3, [r4, #108]	; 0x6c
   444dc:	mov	r1, r8
   444e0:	str	r0, [r4, #116]	; 0x74
   444e4:	ldr	r2, [r4, #112]	; 0x70
   444e8:	add	r3, r3, r3, lsl #1
   444ec:	add	r2, r2, r2, lsl #1
   444f0:	add	r0, r0, r3, lsl #3
   444f4:	lsl	r2, r2, #3
   444f8:	bl	12378 <memset@plt>
   444fc:	ldr	ip, [r6, #4]
   44500:	ldr	r2, [r4, #112]	; 0x70
   44504:	ldr	r3, [r4, #108]	; 0x6c
   44508:	ldr	r0, [r4, #116]	; 0x74
   4450c:	lsl	r2, r2, #1
   44510:	str	r2, [r4, #112]	; 0x70
   44514:	b	443dc <__assert_fail@plt+0x31de8>
   44518:	mov	r8, r0
   4451c:	b	4439c <__assert_fail@plt+0x31da8>
   44520:	ldr	r0, [r4, #116]	; 0x74
   44524:	mov	r8, #12
   44528:	bl	38b10 <__assert_fail@plt+0x2651c>
   4452c:	b	4439c <__assert_fail@plt+0x31da8>
   44530:	strd	r4, [sp, #-36]!	; 0xffffffdc
   44534:	ldr	r4, [r2, #4]
   44538:	ldrb	ip, [r1, #28]
   4453c:	ldr	r5, [r1]
   44540:	adds	r3, r4, #0
   44544:	strd	r6, [sp, #8]
   44548:	movne	r3, #1
   4454c:	strd	r8, [sp, #16]
   44550:	ands	r3, r3, ip, lsr #4
   44554:	strd	sl, [sp, #24]
   44558:	str	lr, [sp, #32]
   4455c:	sub	sp, sp, #20
   44560:	bne	447d8 <__assert_fail@plt+0x321e4>
   44564:	mov	sl, r2
   44568:	ldr	r2, [r5, #64]	; 0x40
   4456c:	mov	r6, #0
   44570:	mov	r7, #0
   44574:	mov	r1, r0
   44578:	strd	r6, [sp, #8]
   4457c:	cmp	r2, #31
   44580:	beq	44808 <__assert_fail@plt+0x32214>
   44584:	ldr	r0, [r5, #56]	; 0x38
   44588:	lsl	r3, r2, #5
   4458c:	add	r2, r2, #1
   44590:	add	r8, r3, #4
   44594:	mov	lr, #8
   44598:	add	ip, r0, r3
   4459c:	str	r2, [r5, #64]	; 0x40
   445a0:	add	r3, r3, #16
   445a4:	add	r8, r0, r8
   445a8:	strb	lr, [sp, #12]
   445ac:	add	r0, r0, r3
   445b0:	mov	lr, #0
   445b4:	ldrd	r2, [sp, #8]
   445b8:	mvn	r6, #0
   445bc:	str	lr, [ip, #4]
   445c0:	str	lr, [ip, #8]
   445c4:	str	lr, [ip, #12]
   445c8:	strd	r2, [ip, #24]
   445cc:	ldrb	r3, [r0, #14]
   445d0:	bic	r3, r3, #12
   445d4:	strb	r3, [r0, #14]
   445d8:	str	lr, [ip, #16]
   445dc:	str	lr, [ip, #20]
   445e0:	str	r6, [ip, #32]
   445e4:	ldr	r0, [r5, #64]	; 0x40
   445e8:	mov	r2, #0
   445ec:	mov	r3, #0
   445f0:	strd	r2, [sp, #8]
   445f4:	cmp	r0, #31
   445f8:	beq	4483c <__assert_fail@plt+0x32248>
   445fc:	lsl	r3, r0, #5
   44600:	add	r2, r0, #1
   44604:	ldr	r0, [r5, #56]	; 0x38
   44608:	add	r9, r3, #4
   4460c:	mov	lr, #9
   44610:	add	ip, r0, r3
   44614:	str	r2, [r5, #64]	; 0x40
   44618:	add	r3, r3, #16
   4461c:	add	r9, r0, r9
   44620:	strb	lr, [sp, #12]
   44624:	add	r0, r0, r3
   44628:	mov	lr, #0
   4462c:	ldrd	r2, [sp, #8]
   44630:	mvn	r6, #0
   44634:	str	lr, [ip, #4]
   44638:	str	lr, [ip, #8]
   4463c:	str	lr, [ip, #12]
   44640:	strd	r2, [ip, #24]
   44644:	ldrb	r3, [r0, #14]
   44648:	bic	r3, r3, #12
   4464c:	strb	r3, [r0, #14]
   44650:	str	lr, [ip, #16]
   44654:	str	lr, [ip, #20]
   44658:	str	r6, [ip, #32]
   4465c:	cmp	r4, #0
   44660:	ldr	r0, [r5, #64]	; 0x40
   44664:	moveq	fp, r9
   44668:	beq	446f0 <__assert_fail@plt+0x320fc>
   4466c:	mov	r2, #0
   44670:	mov	r3, #0
   44674:	cmp	r0, #31
   44678:	strd	r2, [sp, #8]
   4467c:	beq	448a4 <__assert_fail@plt+0x322b0>
   44680:	ldr	r2, [r5, #56]	; 0x38
   44684:	lsl	r3, r0, #5
   44688:	add	r0, r0, #1
   4468c:	add	fp, r3, #4
   44690:	mov	lr, #16
   44694:	str	r0, [r5, #64]	; 0x40
   44698:	add	ip, r2, r3
   4469c:	add	r0, r3, lr
   446a0:	add	fp, r2, fp
   446a4:	strb	lr, [sp, #12]
   446a8:	add	r0, r2, r0
   446ac:	mov	lr, #0
   446b0:	ldrd	r2, [sp, #8]
   446b4:	mvn	r6, #0
   446b8:	cmp	r9, lr
   446bc:	str	lr, [ip, #4]
   446c0:	str	r4, [ip, #8]
   446c4:	str	r9, [ip, #12]
   446c8:	strd	r2, [ip, #24]
   446cc:	ldrb	r3, [r0, #14]
   446d0:	bic	r3, r3, #12
   446d4:	strb	r3, [r0, #14]
   446d8:	str	lr, [ip, #16]
   446dc:	str	lr, [ip, #20]
   446e0:	str	r6, [ip, #32]
   446e4:	str	fp, [r4]
   446e8:	strne	fp, [r9]
   446ec:	ldr	r0, [r5, #64]	; 0x40
   446f0:	mov	r2, #0
   446f4:	mov	r3, #0
   446f8:	cmp	r0, #31
   446fc:	strd	r2, [sp, #8]
   44700:	beq	44870 <__assert_fail@plt+0x3227c>
   44704:	ldr	r4, [r5, #56]	; 0x38
   44708:	lsl	r3, r0, #5
   4470c:	add	r0, r0, #1
   44710:	add	r2, r3, #4
   44714:	mov	ip, #16
   44718:	str	r0, [r5, #64]	; 0x40
   4471c:	add	r0, r4, r3
   44720:	add	r3, r3, ip
   44724:	cmp	r8, #0
   44728:	strb	ip, [sp, #12]
   4472c:	mov	ip, #0
   44730:	add	r3, r4, r3
   44734:	ldrd	r6, [sp, #8]
   44738:	add	r4, r4, r2
   4473c:	mvn	lr, #0
   44740:	str	ip, [r0, #4]
   44744:	str	r8, [r0, #8]
   44748:	str	fp, [r0, #12]
   4474c:	strd	r6, [r0, #24]
   44750:	ldrb	r2, [r3, #14]
   44754:	bic	r2, r2, #12
   44758:	strb	r2, [r3, #14]
   4475c:	str	ip, [r0, #16]
   44760:	str	ip, [r0, #20]
   44764:	str	lr, [r0, #32]
   44768:	strne	r4, [r8]
   4476c:	cmp	fp, #0
   44770:	beq	447f8 <__assert_fail@plt+0x32204>
   44774:	cmp	r4, #0
   44778:	str	r4, [fp]
   4477c:	beq	447f8 <__assert_fail@plt+0x32204>
   44780:	cmp	r9, #0
   44784:	cmpne	r8, #0
   44788:	beq	447f8 <__assert_fail@plt+0x32204>
   4478c:	ldr	r2, [sl, #20]
   44790:	ldrb	r3, [sl, #26]
   44794:	str	r2, [r9, #20]
   44798:	str	r2, [r8, #20]
   4479c:	ldrb	r2, [r9, #26]
   447a0:	ubfx	r3, r3, #3, #1
   447a4:	bfi	r2, r3, #3, #1
   447a8:	strb	r2, [r9, #26]
   447ac:	ldrb	r2, [r8, #26]
   447b0:	bfi	r2, r3, #3, #1
   447b4:	strb	r2, [r8, #26]
   447b8:	mov	r0, r4
   447bc:	add	sp, sp, #20
   447c0:	ldrd	r4, [sp]
   447c4:	ldrd	r6, [sp, #8]
   447c8:	ldrd	r8, [sp, #16]
   447cc:	ldrd	sl, [sp, #24]
   447d0:	add	sp, sp, #32
   447d4:	pop	{pc}		; (ldr pc, [sp], #4)
   447d8:	ldr	r3, [r2, #20]
   447dc:	cmp	r3, #31
   447e0:	bgt	447b8 <__assert_fail@plt+0x321c4>
   447e4:	ldr	r1, [r5, #80]	; 0x50
   447e8:	lsr	r3, r1, r3
   447ec:	tst	r3, #1
   447f0:	bne	44564 <__assert_fail@plt+0x31f70>
   447f4:	b	447b8 <__assert_fail@plt+0x321c4>
   447f8:	mov	r3, #12
   447fc:	mov	r4, #0
   44800:	str	r3, [r1]
   44804:	b	447b8 <__assert_fail@plt+0x321c4>
   44808:	mov	r0, #996	; 0x3e4
   4480c:	str	r1, [sp, #4]
   44810:	bl	3b49c <__assert_fail@plt+0x28ea8>
   44814:	cmp	r0, #0
   44818:	ldr	r1, [sp, #4]
   4481c:	beq	448e0 <__assert_fail@plt+0x322ec>
   44820:	ldr	ip, [r5, #56]	; 0x38
   44824:	mov	r2, #1
   44828:	mov	r8, #4
   4482c:	mov	r3, #0
   44830:	str	ip, [r0]
   44834:	str	r0, [r5, #56]	; 0x38
   44838:	b	44594 <__assert_fail@plt+0x31fa0>
   4483c:	mov	r0, #996	; 0x3e4
   44840:	str	r1, [sp, #4]
   44844:	bl	3b49c <__assert_fail@plt+0x28ea8>
   44848:	cmp	r0, #0
   4484c:	ldr	r1, [sp, #4]
   44850:	beq	448d8 <__assert_fail@plt+0x322e4>
   44854:	ldr	ip, [r5, #56]	; 0x38
   44858:	mov	r2, #1
   4485c:	mov	r9, #4
   44860:	mov	r3, #0
   44864:	str	ip, [r0]
   44868:	str	r0, [r5, #56]	; 0x38
   4486c:	b	4460c <__assert_fail@plt+0x32018>
   44870:	mov	r0, #996	; 0x3e4
   44874:	str	r1, [sp, #4]
   44878:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4487c:	subs	r4, r0, #0
   44880:	ldr	r1, [sp, #4]
   44884:	beq	447f8 <__assert_fail@plt+0x32204>
   44888:	ldr	ip, [r5, #56]	; 0x38
   4488c:	mov	r0, #1
   44890:	mov	r2, #4
   44894:	mov	r3, #0
   44898:	str	ip, [r4]
   4489c:	str	r4, [r5, #56]	; 0x38
   448a0:	b	44714 <__assert_fail@plt+0x32120>
   448a4:	mov	r0, #996	; 0x3e4
   448a8:	str	r1, [sp, #4]
   448ac:	bl	3b49c <__assert_fail@plt+0x28ea8>
   448b0:	subs	r2, r0, #0
   448b4:	ldr	r1, [sp, #4]
   448b8:	beq	448e8 <__assert_fail@plt+0x322f4>
   448bc:	ldr	ip, [r5, #56]	; 0x38
   448c0:	mov	fp, #4
   448c4:	mov	r0, #1
   448c8:	mov	r3, #0
   448cc:	str	ip, [r2]
   448d0:	str	r2, [r5, #56]	; 0x38
   448d4:	b	44690 <__assert_fail@plt+0x3209c>
   448d8:	mov	r9, r0
   448dc:	b	4465c <__assert_fail@plt+0x32068>
   448e0:	mov	r8, r0
   448e4:	b	445e4 <__assert_fail@plt+0x31ff0>
   448e8:	mov	fp, r2
   448ec:	b	446ec <__assert_fail@plt+0x320f8>
   448f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   448f4:	mov	r4, r0
   448f8:	mov	r5, r2
   448fc:	strd	r6, [sp, #8]
   44900:	subs	r6, r1, #0
   44904:	strd	r8, [sp, #16]
   44908:	str	sl, [sp, #24]
   4490c:	str	lr, [sp, #28]
   44910:	beq	4492c <__assert_fail@plt+0x32338>
   44914:	ldr	r3, [r6, #4]
   44918:	cmp	r2, #0
   4491c:	cmpne	r3, #0
   44920:	bgt	4496c <__assert_fail@plt+0x32378>
   44924:	cmp	r3, #0
   44928:	bgt	44978 <__assert_fail@plt+0x32384>
   4492c:	cmp	r5, #0
   44930:	beq	44940 <__assert_fail@plt+0x3234c>
   44934:	ldr	r3, [r5, #4]
   44938:	cmp	r3, #0
   4493c:	bgt	449ac <__assert_fail@plt+0x323b8>
   44940:	mov	r3, #0
   44944:	mov	r0, r3
   44948:	str	r3, [r4]
   4494c:	str	r3, [r4, #4]
   44950:	str	r3, [r4, #8]
   44954:	ldrd	r4, [sp]
   44958:	ldrd	r6, [sp, #8]
   4495c:	ldrd	r8, [sp, #16]
   44960:	ldr	sl, [sp, #24]
   44964:	add	sp, sp, #28
   44968:	pop	{pc}		; (ldr pc, [sp], #4)
   4496c:	ldr	r2, [r2, #4]
   44970:	cmp	r2, #0
   44974:	bgt	449e0 <__assert_fail@plt+0x323ec>
   44978:	lsl	r0, r3, #2
   4497c:	str	r3, [r4]
   44980:	str	r3, [r4, #4]
   44984:	bl	3b49c <__assert_fail@plt+0x28ea8>
   44988:	cmp	r0, #0
   4498c:	str	r0, [r4, #8]
   44990:	beq	44acc <__assert_fail@plt+0x324d8>
   44994:	ldr	r2, [r6, #4]
   44998:	ldr	r1, [r6, #8]
   4499c:	lsl	r2, r2, #2
   449a0:	bl	12024 <memcpy@plt>
   449a4:	mov	r0, #0
   449a8:	b	44954 <__assert_fail@plt+0x32360>
   449ac:	lsl	r0, r3, #2
   449b0:	str	r3, [r4]
   449b4:	str	r3, [r4, #4]
   449b8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   449bc:	cmp	r0, #0
   449c0:	str	r0, [r4, #8]
   449c4:	beq	44acc <__assert_fail@plt+0x324d8>
   449c8:	ldr	r2, [r5, #4]
   449cc:	ldr	r1, [r5, #8]
   449d0:	lsl	r2, r2, #2
   449d4:	bl	12024 <memcpy@plt>
   449d8:	mov	r0, #0
   449dc:	b	44954 <__assert_fail@plt+0x32360>
   449e0:	add	r3, r3, r2
   449e4:	lsl	r0, r3, #2
   449e8:	str	r3, [r4]
   449ec:	bl	3b49c <__assert_fail@plt+0x28ea8>
   449f0:	cmp	r0, #0
   449f4:	str	r0, [r4, #8]
   449f8:	beq	44ae0 <__assert_fail@plt+0x324ec>
   449fc:	ldr	r7, [r6, #4]
   44a00:	ldr	r8, [r5, #4]
   44a04:	cmp	r7, #0
   44a08:	ble	44ae8 <__assert_fail@plt+0x324f4>
   44a0c:	ldr	r1, [r6, #8]
   44a10:	cmp	r8, #0
   44a14:	movle	r6, #0
   44a18:	movle	lr, r0
   44a1c:	movle	r3, r6
   44a20:	mov	r9, r1
   44a24:	ble	44ab4 <__assert_fail@plt+0x324c0>
   44a28:	mov	r6, #0
   44a2c:	mov	lr, r0
   44a30:	ldr	sl, [r5, #8]
   44a34:	mov	ip, r6
   44a38:	mov	r3, r6
   44a3c:	b	44a48 <__assert_fail@plt+0x32454>
   44a40:	cmp	r8, ip
   44a44:	ble	44ab4 <__assert_fail@plt+0x324c0>
   44a48:	ldr	r2, [r1]
   44a4c:	add	r6, r6, #1
   44a50:	ldr	r1, [sl, ip, lsl #2]
   44a54:	cmp	r2, r1
   44a58:	addgt	ip, ip, #1
   44a5c:	strgt	r1, [lr]
   44a60:	bgt	44a70 <__assert_fail@plt+0x3247c>
   44a64:	add	r3, r3, #1
   44a68:	addeq	ip, ip, #1
   44a6c:	str	r2, [lr]
   44a70:	cmp	r7, r3
   44a74:	add	r1, r9, r3, lsl #2
   44a78:	add	lr, lr, #4
   44a7c:	bgt	44a40 <__assert_fail@plt+0x3244c>
   44a80:	cmp	r8, ip
   44a84:	bgt	44a94 <__assert_fail@plt+0x324a0>
   44a88:	mov	r0, #0
   44a8c:	str	r6, [r4, #4]
   44a90:	b	44954 <__assert_fail@plt+0x32360>
   44a94:	ldr	r1, [r5, #8]
   44a98:	sub	r2, r8, ip
   44a9c:	add	r0, r0, r6, lsl #2
   44aa0:	add	r6, r6, r2
   44aa4:	lsl	r2, r2, #2
   44aa8:	add	r1, r1, ip, lsl #2
   44aac:	bl	12024 <memcpy@plt>
   44ab0:	b	44a88 <__assert_fail@plt+0x32494>
   44ab4:	sub	r3, r7, r3
   44ab8:	mov	r0, lr
   44abc:	lsl	r2, r3, #2
   44ac0:	add	r6, r6, r3
   44ac4:	bl	12024 <memcpy@plt>
   44ac8:	b	44a88 <__assert_fail@plt+0x32494>
   44acc:	mov	r3, #0
   44ad0:	mov	r0, #12
   44ad4:	str	r3, [r4]
   44ad8:	str	r3, [r4, #4]
   44adc:	b	44954 <__assert_fail@plt+0x32360>
   44ae0:	mov	r0, #12
   44ae4:	b	44954 <__assert_fail@plt+0x32360>
   44ae8:	mov	r6, #0
   44aec:	mov	ip, r6
   44af0:	b	44a80 <__assert_fail@plt+0x3248c>
   44af4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   44af8:	strd	r6, [sp, #8]
   44afc:	subs	r7, r3, #0
   44b00:	subgt	r4, r1, #4
   44b04:	subgt	r6, r2, #4
   44b08:	str	r8, [sp, #16]
   44b0c:	movgt	r5, #0
   44b10:	movgt	r8, r0
   44b14:	str	lr, [sp, #20]
   44b18:	sub	sp, sp, #16
   44b1c:	bgt	44b4c <__assert_fail@plt+0x32558>
   44b20:	b	44bb0 <__assert_fail@plt+0x325bc>
   44b24:	bl	41eb0 <__assert_fail@plt+0x2f8bc>
   44b28:	str	r0, [r4]
   44b2c:	ldr	r0, [sp, #12]
   44b30:	bl	38b10 <__assert_fail@plt+0x2651c>
   44b34:	ldr	r3, [sp]
   44b38:	cmp	r3, #0
   44b3c:	bne	44b94 <__assert_fail@plt+0x325a0>
   44b40:	add	r5, r5, #1
   44b44:	cmp	r7, r5
   44b48:	beq	44bb0 <__assert_fail@plt+0x325bc>
   44b4c:	ldr	r1, [r4, #4]!
   44b50:	ldr	ip, [r6, #4]!
   44b54:	cmp	r1, #0
   44b58:	streq	ip, [r4]
   44b5c:	beq	44b40 <__assert_fail@plt+0x3254c>
   44b60:	cmp	ip, #0
   44b64:	add	r2, ip, #4
   44b68:	add	r1, r1, #4
   44b6c:	add	r0, sp, #4
   44b70:	beq	44b40 <__assert_fail@plt+0x3254c>
   44b74:	bl	448f0 <__assert_fail@plt+0x322fc>
   44b78:	mov	r3, r0
   44b7c:	add	r2, sp, #4
   44b80:	cmp	r3, #0
   44b84:	mov	r1, r8
   44b88:	mov	r0, sp
   44b8c:	str	r3, [sp]
   44b90:	beq	44b24 <__assert_fail@plt+0x32530>
   44b94:	mov	r0, r3
   44b98:	add	sp, sp, #16
   44b9c:	ldrd	r4, [sp]
   44ba0:	ldrd	r6, [sp, #8]
   44ba4:	ldr	r8, [sp, #16]
   44ba8:	add	sp, sp, #20
   44bac:	pop	{pc}		; (ldr pc, [sp], #4)
   44bb0:	mov	r3, #0
   44bb4:	b	44b94 <__assert_fail@plt+0x325a0>
   44bb8:	lsl	ip, r2, #2
   44bbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   44bc0:	mov	r4, r3
   44bc4:	strd	r6, [sp, #8]
   44bc8:	strd	r8, [sp, #16]
   44bcc:	mov	r8, r2
   44bd0:	ldr	r9, [r3, #4]
   44bd4:	strd	sl, [sp, #24]
   44bd8:	mov	sl, r0
   44bdc:	mov	fp, r1
   44be0:	ldr	r2, [r0, #100]	; 0x64
   44be4:	str	lr, [sp, #32]
   44be8:	sub	sp, sp, #100	; 0x64
   44bec:	ldr	r6, [r0, #84]	; 0x54
   44bf0:	mov	r0, #0
   44bf4:	str	ip, [sp, #28]
   44bf8:	ldr	r3, [r2, r8, lsl #2]
   44bfc:	add	r2, r2, ip
   44c00:	cmp	r3, r0
   44c04:	str	r3, [sp, #20]
   44c08:	str	r0, [sp, #60]	; 0x3c
   44c0c:	beq	44fc0 <__assert_fail@plt+0x329cc>
   44c10:	cmp	r9, #0
   44c14:	bne	44c50 <__assert_fail@plt+0x3265c>
   44c18:	ldr	r3, [r1]
   44c1c:	str	r9, [r3, r8, lsl #2]
   44c20:	ldr	r3, [r2]
   44c24:	ldrb	r9, [r3, #52]	; 0x34
   44c28:	ands	r9, r9, #64	; 0x40
   44c2c:	bne	44d74 <__assert_fail@plt+0x32780>
   44c30:	mov	r0, r9
   44c34:	add	sp, sp, #100	; 0x64
   44c38:	ldrd	r4, [sp]
   44c3c:	ldrd	r6, [sp, #8]
   44c40:	ldrd	r8, [sp, #16]
   44c44:	ldrd	sl, [sp, #24]
   44c48:	add	sp, sp, #32
   44c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   44c50:	mov	r2, r4
   44c54:	mov	r1, r6
   44c58:	str	r0, [sp, #64]	; 0x40
   44c5c:	add	r0, sp, #64	; 0x40
   44c60:	bl	41eb0 <__assert_fail@plt+0x2f8bc>
   44c64:	ldr	r9, [sp, #64]	; 0x40
   44c68:	mov	r2, r0
   44c6c:	cmp	r9, #0
   44c70:	bne	44c30 <__assert_fail@plt+0x3263c>
   44c74:	mov	r5, r0
   44c78:	ldr	r7, [r5, #28]!
   44c7c:	cmp	r7, #0
   44c80:	bne	44d00 <__assert_fail@plt+0x3270c>
   44c84:	ldr	r3, [r4, #4]
   44c88:	str	r2, [sp, #24]
   44c8c:	lsl	r0, r3, #2
   44c90:	str	r3, [r2, #28]
   44c94:	str	r9, [r2, #32]
   44c98:	bl	3b49c <__assert_fail@plt+0x28ea8>
   44c9c:	ldr	r2, [sp, #24]
   44ca0:	cmp	r0, #0
   44ca4:	str	r0, [r2, #36]	; 0x24
   44ca8:	beq	44cf8 <__assert_fail@plt+0x32704>
   44cac:	ldr	r3, [r4, #4]
   44cb0:	str	r7, [sp, #64]	; 0x40
   44cb4:	cmp	r3, #0
   44cb8:	bgt	44ccc <__assert_fail@plt+0x326d8>
   44cbc:	b	44d00 <__assert_fail@plt+0x3270c>
   44cc0:	ldr	r3, [r4, #4]
   44cc4:	cmp	r7, r3
   44cc8:	bge	44d00 <__assert_fail@plt+0x3270c>
   44ccc:	ldr	r3, [r4, #8]
   44cd0:	mov	r0, r5
   44cd4:	ldr	r1, [r6, #28]
   44cd8:	ldr	r3, [r3, r7, lsl #2]
   44cdc:	add	r7, r7, #1
   44ce0:	add	r3, r3, r3, lsl #1
   44ce4:	add	r1, r1, r3, lsl #2
   44ce8:	bl	3d68c <__assert_fail@plt+0x2b098>
   44cec:	cmp	r0, #0
   44cf0:	str	r0, [sp, #64]	; 0x40
   44cf4:	beq	44cc0 <__assert_fail@plt+0x326cc>
   44cf8:	mov	r9, #12
   44cfc:	b	44c30 <__assert_fail@plt+0x3263c>
   44d00:	ldr	r3, [sp, #20]
   44d04:	mov	r2, r5
   44d08:	mov	r0, r4
   44d0c:	add	r3, r3, #4
   44d10:	mov	r1, r3
   44d14:	str	r3, [sp, #36]	; 0x24
   44d18:	bl	3d4a4 <__assert_fail@plt+0x2aeb0>
   44d1c:	cmp	r0, #0
   44d20:	str	r0, [sp, #60]	; 0x3c
   44d24:	bne	45520 <__assert_fail@plt+0x32f2c>
   44d28:	ldr	r9, [fp, #20]
   44d2c:	cmp	r9, #0
   44d30:	bne	45240 <__assert_fail@plt+0x32c4c>
   44d34:	mov	r2, r4
   44d38:	mov	r1, r6
   44d3c:	ldr	r4, [fp]
   44d40:	add	r0, sp, #60	; 0x3c
   44d44:	bl	41eb0 <__assert_fail@plt+0x2f8bc>
   44d48:	ldr	r9, [sp, #60]	; 0x3c
   44d4c:	str	r0, [r4, r8, lsl #2]
   44d50:	cmp	r9, #0
   44d54:	bne	44c30 <__assert_fail@plt+0x3263c>
   44d58:	ldr	r3, [sp, #28]
   44d5c:	ldr	r2, [sl, #100]	; 0x64
   44d60:	add	r2, r2, r3
   44d64:	ldr	r3, [r2]
   44d68:	ldrb	r9, [r3, #52]	; 0x34
   44d6c:	ands	r9, r9, #64	; 0x40
   44d70:	beq	44c30 <__assert_fail@plt+0x3263c>
   44d74:	ldr	ip, [sl, #108]	; 0x6c
   44d78:	cmp	ip, #0
   44d7c:	ble	44ff8 <__assert_fail@plt+0x32a04>
   44d80:	ldr	r0, [sl, #116]	; 0x74
   44d84:	mov	r2, ip
   44d88:	mov	lr, #0
   44d8c:	add	r3, r2, lr
   44d90:	asr	r3, r3, #1
   44d94:	add	r1, r3, r3, lsl #1
   44d98:	add	r1, r0, r1, lsl #3
   44d9c:	ldr	r1, [r1, #4]
   44da0:	cmp	r8, r1
   44da4:	bgt	451d0 <__assert_fail@plt+0x32bdc>
   44da8:	cmp	r3, lr
   44dac:	ble	44df8 <__assert_fail@plt+0x32804>
   44db0:	add	r2, r3, lr
   44db4:	asr	r2, r2, #1
   44db8:	add	r1, r2, r2, lsl #1
   44dbc:	add	r1, r0, r1, lsl #3
   44dc0:	ldr	r1, [r1, #4]
   44dc4:	cmp	r8, r1
   44dc8:	ble	44de8 <__assert_fail@plt+0x327f4>
   44dcc:	b	451c4 <__assert_fail@plt+0x32bd0>
   44dd0:	add	r1, r3, r3, lsl #1
   44dd4:	add	r1, r0, r1, lsl #3
   44dd8:	ldr	r1, [r1, #4]
   44ddc:	cmp	r8, r1
   44de0:	bgt	451d0 <__assert_fail@plt+0x32bdc>
   44de4:	mov	r2, r3
   44de8:	add	r3, lr, r2
   44dec:	cmp	lr, r2
   44df0:	asr	r3, r3, #1
   44df4:	blt	44dd0 <__assert_fail@plt+0x327dc>
   44df8:	cmp	ip, lr
   44dfc:	str	lr, [sp, #44]	; 0x2c
   44e00:	ble	44ff8 <__assert_fail@plt+0x32a04>
   44e04:	add	r3, lr, lr, lsl #1
   44e08:	lsl	r3, r3, #3
   44e0c:	add	r0, r0, r3
   44e10:	str	r3, [sp, #48]	; 0x30
   44e14:	ldr	r3, [r0, #4]
   44e18:	cmp	r8, r3
   44e1c:	bne	44ff8 <__assert_fail@plt+0x32a04>
   44e20:	ldr	r3, [sp, #20]
   44e24:	ldr	r7, [sl, #84]	; 0x54
   44e28:	ldr	r0, [r3, #8]
   44e2c:	mov	r3, #0
   44e30:	str	r3, [sp, #64]	; 0x40
   44e34:	cmp	r0, r3
   44e38:	ble	44ff8 <__assert_fail@plt+0x32a04>
   44e3c:	add	r2, fp, #24
   44e40:	mov	r9, r8
   44e44:	mov	r8, r3
   44e48:	str	r2, [sp, #36]	; 0x24
   44e4c:	add	r2, fp, #20
   44e50:	str	r2, [sp, #40]	; 0x28
   44e54:	b	44e6c <__assert_fail@plt+0x32878>
   44e58:	cmp	r3, #4
   44e5c:	beq	44ea4 <__assert_fail@plt+0x328b0>
   44e60:	add	r8, r8, #1
   44e64:	cmp	r8, r0
   44e68:	bge	44fec <__assert_fail@plt+0x329f8>
   44e6c:	ldr	r3, [sp, #20]
   44e70:	ldr	r2, [fp, #8]
   44e74:	ldr	r1, [r3, #12]
   44e78:	ldr	r3, [r7]
   44e7c:	ldr	r6, [r1, r8, lsl #2]
   44e80:	add	r3, r3, r6, lsl #3
   44e84:	cmp	r6, r2
   44e88:	ldrb	r3, [r3, #4]
   44e8c:	bne	44e58 <__assert_fail@plt+0x32864>
   44e90:	ldr	r2, [fp, #12]
   44e94:	cmp	r9, r2
   44e98:	beq	44e60 <__assert_fail@plt+0x3286c>
   44e9c:	cmp	r3, #4
   44ea0:	bne	44e60 <__assert_fail@plt+0x3286c>
   44ea4:	add	r3, r6, r6, lsl #1
   44ea8:	ldr	r4, [sl, #116]	; 0x74
   44eac:	lsl	r2, r6, #2
   44eb0:	str	r8, [sp, #52]	; 0x34
   44eb4:	lsl	r3, r3, #2
   44eb8:	ldr	r5, [sp, #44]	; 0x2c
   44ebc:	mov	r8, r2
   44ec0:	str	r3, [sp, #32]
   44ec4:	ldr	r3, [sp, #48]	; 0x30
   44ec8:	add	r4, r4, r3
   44ecc:	ldr	r3, [r4]
   44ed0:	cmp	r6, r3
   44ed4:	bne	44f9c <__assert_fail@plt+0x329a8>
   44ed8:	ldr	r3, [r4, #8]
   44edc:	ldr	ip, [r4, #12]
   44ee0:	sub	ip, ip, r3
   44ee4:	cmp	ip, #0
   44ee8:	add	ip, r9, ip
   44eec:	beq	4501c <__assert_fail@plt+0x32a28>
   44ef0:	ldr	r3, [r7, #12]
   44ef4:	ldr	r0, [r3, r8]
   44ef8:	ldr	r3, [fp, #12]
   44efc:	cmp	ip, r3
   44f00:	bgt	44f9c <__assert_fail@plt+0x329a8>
   44f04:	ldr	r3, [fp]
   44f08:	ldr	r2, [r3, ip, lsl #2]
   44f0c:	cmp	r2, #0
   44f10:	beq	44f9c <__assert_fail@plt+0x329a8>
   44f14:	ldr	r3, [r2, #8]
   44f18:	cmp	r3, #0
   44f1c:	ble	44f9c <__assert_fail@plt+0x329a8>
   44f20:	subs	r3, r3, #1
   44f24:	ldr	lr, [r2, #12]
   44f28:	moveq	r1, r3
   44f2c:	beq	44f90 <__assert_fail@plt+0x3299c>
   44f30:	mov	r1, #0
   44f34:	str	ip, [sp, #24]
   44f38:	add	r2, r3, r1
   44f3c:	lsr	r2, r2, #1
   44f40:	ldr	ip, [lr, r2, lsl #2]
   44f44:	cmp	r0, ip
   44f48:	bgt	4500c <__assert_fail@plt+0x32a18>
   44f4c:	cmp	r2, r1
   44f50:	bls	44f8c <__assert_fail@plt+0x32998>
   44f54:	add	r3, r2, r1
   44f58:	lsr	r3, r3, #1
   44f5c:	ldr	ip, [lr, r3, lsl #2]
   44f60:	cmp	r0, ip
   44f64:	ble	44f7c <__assert_fail@plt+0x32988>
   44f68:	b	45000 <__assert_fail@plt+0x32a0c>
   44f6c:	ldr	ip, [lr, r2, lsl #2]
   44f70:	cmp	r0, ip
   44f74:	bgt	4500c <__assert_fail@plt+0x32a18>
   44f78:	mov	r3, r2
   44f7c:	add	r2, r1, r3
   44f80:	cmp	r1, r3
   44f84:	lsr	r2, r2, #1
   44f88:	bcc	44f6c <__assert_fail@plt+0x32978>
   44f8c:	ldr	ip, [sp, #24]
   44f90:	ldr	r3, [lr, r1, lsl #2]
   44f94:	cmp	r0, r3
   44f98:	beq	45034 <__assert_fail@plt+0x32a40>
   44f9c:	ldrb	r3, [r4, #20]
   44fa0:	add	r5, r5, #1
   44fa4:	add	r4, r4, #24
   44fa8:	cmp	r3, #0
   44fac:	bne	44ecc <__assert_fail@plt+0x328d8>
   44fb0:	ldr	r3, [sp, #20]
   44fb4:	ldr	r8, [sp, #52]	; 0x34
   44fb8:	ldr	r0, [r3, #8]
   44fbc:	b	44e60 <__assert_fail@plt+0x3286c>
   44fc0:	ldr	r5, [r1]
   44fc4:	cmp	r9, r0
   44fc8:	streq	r9, [r5, r8, lsl #2]
   44fcc:	beq	44c30 <__assert_fail@plt+0x3263c>
   44fd0:	mov	r2, r4
   44fd4:	mov	r1, r6
   44fd8:	add	r0, sp, #60	; 0x3c
   44fdc:	bl	41eb0 <__assert_fail@plt+0x2f8bc>
   44fe0:	str	r0, [r5, r8, lsl #2]
   44fe4:	ldr	r9, [sp, #60]	; 0x3c
   44fe8:	b	44c30 <__assert_fail@plt+0x3263c>
   44fec:	ldr	r3, [sp, #64]	; 0x40
   44ff0:	cmp	r3, #0
   44ff4:	bne	45600 <__assert_fail@plt+0x3300c>
   44ff8:	mov	r9, #0
   44ffc:	b	44c30 <__assert_fail@plt+0x3263c>
   45000:	mov	r1, r3
   45004:	mov	r3, r2
   45008:	mov	r2, r1
   4500c:	add	r1, r2, #1
   45010:	cmp	r3, r1
   45014:	bhi	44f38 <__assert_fail@plt+0x32944>
   45018:	b	44f8c <__assert_fail@plt+0x32998>
   4501c:	ldr	r3, [r7, #20]
   45020:	ldr	r2, [sp, #32]
   45024:	add	r3, r3, r2
   45028:	ldr	r3, [r3, #8]
   4502c:	ldr	r0, [r3]
   45030:	b	44ef8 <__assert_fail@plt+0x32904>
   45034:	mov	r3, r6
   45038:	str	r9, [sp]
   4503c:	stmib	sp, {r0, ip}
   45040:	mov	r0, sl
   45044:	ldr	r2, [sp, #36]	; 0x24
   45048:	ldr	r1, [sp, #40]	; 0x28
   4504c:	bl	3ff2c <__assert_fail@plt+0x2d938>
   45050:	cmp	r0, #0
   45054:	bne	44f9c <__assert_fail@plt+0x329a8>
   45058:	ldr	r1, [sp, #64]	; 0x40
   4505c:	cmp	r1, #0
   45060:	beq	451e0 <__assert_fail@plt+0x32bec>
   45064:	add	r4, sp, #64	; 0x40
   45068:	add	r0, sp, #80	; 0x50
   4506c:	mov	r1, r5
   45070:	str	r6, [sp, #72]	; 0x48
   45074:	str	r9, [sp, #76]	; 0x4c
   45078:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   4507c:	cmp	r0, #0
   45080:	beq	45590 <__assert_fail@plt+0x32f9c>
   45084:	ldr	r2, [sp, #28]
   45088:	mov	r1, r4
   4508c:	mov	r0, sl
   45090:	ldr	r3, [sp, #64]	; 0x40
   45094:	ldr	r4, [r3, r2]
   45098:	bl	45608 <__assert_fail@plt+0x33014>
   4509c:	cmp	r0, #0
   450a0:	bne	45528 <__assert_fail@plt+0x32f34>
   450a4:	ldr	r1, [fp, #4]
   450a8:	ldr	r2, [sp, #64]	; 0x40
   450ac:	cmp	r1, #0
   450b0:	beq	450cc <__assert_fail@plt+0x32ad8>
   450b4:	add	r3, r9, #1
   450b8:	mov	r0, r7
   450bc:	bl	44af4 <__assert_fail@plt+0x32500>
   450c0:	cmp	r0, #0
   450c4:	bne	45528 <__assert_fail@plt+0x32f34>
   450c8:	ldr	r2, [sp, #64]	; 0x40
   450cc:	ldr	r3, [sp, #28]
   450d0:	ldr	lr, [sp, #84]	; 0x54
   450d4:	str	r4, [r2, r3]
   450d8:	cmp	lr, #0
   450dc:	ble	4515c <__assert_fail@plt+0x32b68>
   450e0:	sub	r4, lr, #1
   450e4:	ldr	r1, [sp, #88]	; 0x58
   450e8:	cmp	r4, #0
   450ec:	mov	r0, r4
   450f0:	movne	r2, #0
   450f4:	beq	455d8 <__assert_fail@plt+0x32fe4>
   450f8:	add	r3, r0, r2
   450fc:	lsr	r3, r3, #1
   45100:	ldr	ip, [r1, r3, lsl #2]
   45104:	cmp	r5, ip
   45108:	bgt	451b4 <__assert_fail@plt+0x32bc0>
   4510c:	cmp	r3, r2
   45110:	bls	4514c <__assert_fail@plt+0x32b58>
   45114:	add	r0, r3, r2
   45118:	lsr	r0, r0, #1
   4511c:	ldr	ip, [r1, r0, lsl #2]
   45120:	cmp	r5, ip
   45124:	ble	4513c <__assert_fail@plt+0x32b48>
   45128:	b	451a8 <__assert_fail@plt+0x32bb4>
   4512c:	ldr	ip, [r1, r3, lsl #2]
   45130:	cmp	r5, ip
   45134:	bgt	451b4 <__assert_fail@plt+0x32bc0>
   45138:	mov	r0, r3
   4513c:	add	r3, r2, r0
   45140:	cmp	r2, r0
   45144:	lsr	r3, r3, #1
   45148:	bcc	4512c <__assert_fail@plt+0x32b38>
   4514c:	lsl	r3, r2, #2
   45150:	ldr	r3, [r1, r3]!
   45154:	cmp	r5, r3
   45158:	beq	4516c <__assert_fail@plt+0x32b78>
   4515c:	ldr	r4, [sl, #116]	; 0x74
   45160:	add	r3, r5, r5, lsl #1
   45164:	add	r4, r4, r3, lsl #3
   45168:	b	44f9c <__assert_fail@plt+0x329a8>
   4516c:	cmp	lr, r2
   45170:	movgt	lr, #0
   45174:	movle	lr, #1
   45178:	orrs	r3, lr, r2, lsr #31
   4517c:	bne	4515c <__assert_fail@plt+0x32b68>
   45180:	cmp	r2, r4
   45184:	str	r4, [sp, #84]	; 0x54
   45188:	bge	4515c <__assert_fail@plt+0x32b68>
   4518c:	ldr	r3, [r1, #4]
   45190:	add	r2, r2, #1
   45194:	str	r3, [r1], #4
   45198:	ldr	r3, [sp, #84]	; 0x54
   4519c:	cmp	r2, r3
   451a0:	blt	4518c <__assert_fail@plt+0x32b98>
   451a4:	b	4515c <__assert_fail@plt+0x32b68>
   451a8:	mov	r2, r0
   451ac:	mov	r0, r3
   451b0:	mov	r3, r2
   451b4:	add	r2, r3, #1
   451b8:	cmp	r2, r0
   451bc:	bcc	450f8 <__assert_fail@plt+0x32b04>
   451c0:	b	4514c <__assert_fail@plt+0x32b58>
   451c4:	mov	r1, r2
   451c8:	mov	r2, r3
   451cc:	mov	r3, r1
   451d0:	add	lr, r3, #1
   451d4:	cmp	lr, r2
   451d8:	blt	44d8c <__assert_fail@plt+0x32798>
   451dc:	b	44df8 <__assert_fail@plt+0x32804>
   451e0:	ldrd	r2, [fp]
   451e4:	add	r4, sp, #64	; 0x40
   451e8:	ldr	ip, [fp, #20]
   451ec:	ldr	r0, [fp, #24]
   451f0:	strd	r2, [sp, #64]	; 0x40
   451f4:	ldrd	r2, [fp, #8]
   451f8:	cmp	ip, #0
   451fc:	strd	r2, [r4, #8]
   45200:	ldrd	r2, [fp, #16]
   45204:	str	r0, [r4, #24]
   45208:	strd	r2, [r4, #16]
   4520c:	ble	45544 <__assert_fail@plt+0x32f50>
   45210:	lsl	r0, ip, #2
   45214:	str	ip, [sp, #80]	; 0x50
   45218:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4521c:	cmp	r0, #0
   45220:	str	r0, [sp, #88]	; 0x58
   45224:	beq	455ec <__assert_fail@plt+0x32ff8>
   45228:	ldr	r2, [fp, #20]
   4522c:	ldr	r1, [fp, #24]
   45230:	lsl	r2, r2, #2
   45234:	bl	12024 <memcpy@plt>
   45238:	add	r0, sp, #80	; 0x50
   4523c:	b	4506c <__assert_fail@plt+0x32a78>
   45240:	ldr	r3, [sl, #116]	; 0x74
   45244:	str	r3, [sp, #32]
   45248:	ble	45338 <__assert_fail@plt+0x32d44>
   4524c:	mov	r7, r0
   45250:	str	r9, [sp, #24]
   45254:	mov	r9, r8
   45258:	str	sl, [sp, #48]	; 0x30
   4525c:	ldr	r3, [fp, #24]
   45260:	ldr	r0, [sp, #32]
   45264:	ldr	r3, [r3, r7, lsl #2]
   45268:	add	r3, r3, r3, lsl #1
   4526c:	add	r2, r0, r3, lsl #3
   45270:	ldr	r1, [r2, #8]
   45274:	cmp	r9, r1
   45278:	ble	45320 <__assert_fail@plt+0x32d2c>
   4527c:	ldr	r1, [r2, #4]
   45280:	cmp	r9, r1
   45284:	bgt	45320 <__assert_fail@plt+0x32d2c>
   45288:	ldr	r1, [r2, #12]
   4528c:	ldr	r2, [r0, r3, lsl #3]
   45290:	ldr	r3, [r6]
   45294:	cmp	r9, r1
   45298:	ldr	r0, [r4, #4]
   4529c:	ldr	r8, [r3, r2, lsl #3]
   452a0:	str	r0, [sp, #40]	; 0x28
   452a4:	beq	45344 <__assert_fail@plt+0x32d50>
   452a8:	cmp	r0, #0
   452ac:	ble	45320 <__assert_fail@plt+0x32d2c>
   452b0:	mov	r5, #0
   452b4:	ldr	sl, [sp, #36]	; 0x24
   452b8:	b	452c8 <__assert_fail@plt+0x32cd4>
   452bc:	cmp	r5, r0
   452c0:	bge	45318 <__assert_fail@plt+0x32d24>
   452c4:	ldr	r3, [r6]
   452c8:	ldr	r2, [r4, #8]
   452cc:	ldr	r1, [r2, r5, lsl #2]
   452d0:	add	r5, r5, #1
   452d4:	add	r2, r3, r1, lsl #3
   452d8:	ldrb	r2, [r2, #4]
   452dc:	sub	r2, r2, #8
   452e0:	cmp	r2, #1
   452e4:	bhi	452bc <__assert_fail@plt+0x32cc8>
   452e8:	ldr	r3, [r3, r1, lsl #3]
   452ec:	cmp	r8, r3
   452f0:	bne	452bc <__assert_fail@plt+0x32cc8>
   452f4:	mov	r3, sl
   452f8:	mov	r2, r4
   452fc:	mov	r0, r6
   45300:	bl	415f0 <__assert_fail@plt+0x2effc>
   45304:	cmp	r0, #0
   45308:	bne	45520 <__assert_fail@plt+0x32f2c>
   4530c:	ldr	r0, [r4, #4]
   45310:	cmp	r5, r0
   45314:	blt	452c4 <__assert_fail@plt+0x32cd0>
   45318:	ldr	r3, [fp, #20]
   4531c:	str	r3, [sp, #24]
   45320:	ldr	r3, [sp, #24]
   45324:	add	r7, r7, #1
   45328:	cmp	r7, r3
   4532c:	blt	4525c <__assert_fail@plt+0x32c68>
   45330:	ldr	sl, [sp, #48]	; 0x30
   45334:	mov	r8, r9
   45338:	mov	r3, #0
   4533c:	str	r3, [sp, #60]	; 0x3c
   45340:	b	44d34 <__assert_fail@plt+0x32740>
   45344:	cmp	r0, #0
   45348:	ble	45320 <__assert_fail@plt+0x32d2c>
   4534c:	ldr	sl, [r4, #8]
   45350:	mvn	r5, #0
   45354:	mov	r1, r5
   45358:	str	r6, [sp, #44]	; 0x2c
   4535c:	add	r2, sl, r0, lsl #2
   45360:	mov	r0, sl
   45364:	mov	r6, r2
   45368:	b	45388 <__assert_fail@plt+0x32d94>
   4536c:	cmp	ip, #9
   45370:	bne	45380 <__assert_fail@plt+0x32d8c>
   45374:	ldr	ip, [lr]
   45378:	cmp	r8, ip
   4537c:	moveq	r5, r2
   45380:	cmp	r6, r0
   45384:	beq	453b0 <__assert_fail@plt+0x32dbc>
   45388:	ldr	r2, [r0], #4
   4538c:	add	lr, r3, r2, lsl #3
   45390:	ldrb	ip, [lr, #4]
   45394:	cmp	ip, #8
   45398:	bne	4536c <__assert_fail@plt+0x32d78>
   4539c:	ldr	ip, [r3, r2, lsl #3]
   453a0:	cmp	r8, ip
   453a4:	moveq	r1, r2
   453a8:	cmp	r6, r0
   453ac:	bne	45388 <__assert_fail@plt+0x32d94>
   453b0:	cmp	r1, #0
   453b4:	ldr	r6, [sp, #44]	; 0x2c
   453b8:	bge	45558 <__assert_fail@plt+0x32f64>
   453bc:	cmp	r5, #0
   453c0:	blt	45320 <__assert_fail@plt+0x32d2c>
   453c4:	mov	r3, sl
   453c8:	ldr	sl, [sp, #40]	; 0x28
   453cc:	mov	r8, #0
   453d0:	ldr	r1, [r3, r8, lsl #2]
   453d4:	ldr	r3, [r6, #28]
   453d8:	add	lr, r1, r1, lsl #1
   453dc:	lsl	lr, lr, #2
   453e0:	add	r3, r3, lr
   453e4:	ldr	r2, [r3, #4]
   453e8:	cmp	r2, #0
   453ec:	ble	4546c <__assert_fail@plt+0x32e78>
   453f0:	subs	r2, r2, #1
   453f4:	ldr	ip, [r3, #8]
   453f8:	moveq	r0, r2
   453fc:	beq	45460 <__assert_fail@plt+0x32e6c>
   45400:	mov	r0, #0
   45404:	str	r1, [sp, #24]
   45408:	add	r3, r2, r0
   4540c:	lsr	r3, r3, #1
   45410:	ldr	r1, [ip, r3, lsl #2]
   45414:	cmp	r5, r1
   45418:	bgt	455a4 <__assert_fail@plt+0x32fb0>
   4541c:	cmp	r3, r0
   45420:	bls	4545c <__assert_fail@plt+0x32e68>
   45424:	add	r2, r3, r0
   45428:	lsr	r2, r2, #1
   4542c:	ldr	r1, [ip, r2, lsl #2]
   45430:	cmp	r5, r1
   45434:	ble	4544c <__assert_fail@plt+0x32e58>
   45438:	b	45598 <__assert_fail@plt+0x32fa4>
   4543c:	ldr	r1, [ip, r3, lsl #2]
   45440:	cmp	r5, r1
   45444:	bgt	455a4 <__assert_fail@plt+0x32fb0>
   45448:	mov	r2, r3
   4544c:	add	r3, r0, r2
   45450:	cmp	r0, r2
   45454:	lsr	r3, r3, #1
   45458:	bcc	4543c <__assert_fail@plt+0x32e48>
   4545c:	ldr	r1, [sp, #24]
   45460:	ldr	r3, [ip, r0, lsl #2]
   45464:	cmp	r5, r3
   45468:	beq	455b4 <__assert_fail@plt+0x32fc0>
   4546c:	ldr	r3, [r6, #24]
   45470:	add	lr, r3, lr
   45474:	ldr	r2, [lr, #4]
   45478:	cmp	r2, #0
   4547c:	ble	454f4 <__assert_fail@plt+0x32f00>
   45480:	subs	r2, r2, #1
   45484:	ldr	ip, [lr, #8]
   45488:	moveq	r0, r2
   4548c:	beq	454e8 <__assert_fail@plt+0x32ef4>
   45490:	mov	r0, #0
   45494:	add	r3, r2, r0
   45498:	lsr	r3, r3, #1
   4549c:	ldr	lr, [ip, r3, lsl #2]
   454a0:	cmp	lr, r5
   454a4:	blt	455c8 <__assert_fail@plt+0x32fd4>
   454a8:	cmp	r3, r0
   454ac:	bls	454e8 <__assert_fail@plt+0x32ef4>
   454b0:	add	r2, r3, r0
   454b4:	lsr	r2, r2, #1
   454b8:	ldr	lr, [ip, r2, lsl #2]
   454bc:	cmp	r5, lr
   454c0:	ble	454d8 <__assert_fail@plt+0x32ee4>
   454c4:	b	455bc <__assert_fail@plt+0x32fc8>
   454c8:	ldr	lr, [ip, r3, lsl #2]
   454cc:	cmp	r5, lr
   454d0:	bgt	455c8 <__assert_fail@plt+0x32fd4>
   454d4:	mov	r2, r3
   454d8:	add	r3, r0, r2
   454dc:	cmp	r0, r2
   454e0:	lsr	r3, r3, #1
   454e4:	bcc	454c8 <__assert_fail@plt+0x32ed4>
   454e8:	ldr	r3, [ip, r0, lsl #2]
   454ec:	cmp	r5, r3
   454f0:	beq	455b4 <__assert_fail@plt+0x32fc0>
   454f4:	mov	r2, r4
   454f8:	mov	r0, r6
   454fc:	ldr	r3, [sp, #36]	; 0x24
   45500:	bl	415f0 <__assert_fail@plt+0x2effc>
   45504:	cmp	r0, #0
   45508:	bne	45520 <__assert_fail@plt+0x32f2c>
   4550c:	ldr	sl, [r4, #4]
   45510:	cmp	sl, r8
   45514:	ble	45318 <__assert_fail@plt+0x32d24>
   45518:	ldr	r3, [r4, #8]
   4551c:	b	453d0 <__assert_fail@plt+0x32ddc>
   45520:	mov	r9, r0
   45524:	b	44c30 <__assert_fail@plt+0x3263c>
   45528:	mov	r9, r0
   4552c:	ldr	r3, [sp, #64]	; 0x40
   45530:	cmp	r3, #0
   45534:	beq	44c30 <__assert_fail@plt+0x3263c>
   45538:	ldr	r0, [sp, #88]	; 0x58
   4553c:	bl	38b10 <__assert_fail@plt+0x2651c>
   45540:	b	44c30 <__assert_fail@plt+0x3263c>
   45544:	add	r0, sp, #80	; 0x50
   45548:	str	r1, [sp, #80]	; 0x50
   4554c:	str	r1, [r0, #4]
   45550:	str	r1, [r0, #8]
   45554:	b	4506c <__assert_fail@plt+0x32a78>
   45558:	mov	r2, r4
   4555c:	mov	r0, r6
   45560:	ldr	r3, [sp, #36]	; 0x24
   45564:	bl	415f0 <__assert_fail@plt+0x2effc>
   45568:	cmp	r0, #0
   4556c:	bne	45520 <__assert_fail@plt+0x32f2c>
   45570:	cmp	r5, #0
   45574:	blt	45318 <__assert_fail@plt+0x32d24>
   45578:	ldr	r3, [r4, #4]
   4557c:	cmp	r3, #0
   45580:	str	r3, [sp, #40]	; 0x28
   45584:	ble	45318 <__assert_fail@plt+0x32d24>
   45588:	ldr	sl, [r4, #8]
   4558c:	b	453c4 <__assert_fail@plt+0x32dd0>
   45590:	mov	r9, #12
   45594:	b	4552c <__assert_fail@plt+0x32f38>
   45598:	mov	r0, r2
   4559c:	mov	r2, r3
   455a0:	mov	r3, r0
   455a4:	add	r0, r3, #1
   455a8:	cmp	r0, r2
   455ac:	bcc	45408 <__assert_fail@plt+0x32e14>
   455b0:	b	4545c <__assert_fail@plt+0x32e68>
   455b4:	add	r8, r8, #1
   455b8:	b	45510 <__assert_fail@plt+0x32f1c>
   455bc:	mov	r0, r2
   455c0:	mov	r2, r3
   455c4:	mov	r3, r0
   455c8:	add	r0, r3, #1
   455cc:	cmp	r0, r2
   455d0:	bcc	45494 <__assert_fail@plt+0x32ea0>
   455d4:	b	454e8 <__assert_fail@plt+0x32ef4>
   455d8:	ldr	r3, [r1]
   455dc:	cmp	r3, r5
   455e0:	bne	4515c <__assert_fail@plt+0x32b68>
   455e4:	mov	r2, r4
   455e8:	b	45180 <__assert_fail@plt+0x32b8c>
   455ec:	mov	r2, #0
   455f0:	mov	r3, #0
   455f4:	mov	r9, #12
   455f8:	strd	r2, [sp, #80]	; 0x50
   455fc:	b	4552c <__assert_fail@plt+0x32f38>
   45600:	mov	r9, #0
   45604:	b	45538 <__assert_fail@plt+0x32f44>
   45608:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4560c:	ldr	r4, [r1, #8]
   45610:	strd	r6, [sp, #8]
   45614:	mov	r6, #1
   45618:	strd	r8, [sp, #16]
   4561c:	strd	sl, [sp, #24]
   45620:	mov	sl, r0
   45624:	mov	r0, #4
   45628:	str	lr, [sp, #32]
   4562c:	sub	sp, sp, #68	; 0x44
   45630:	mov	fp, r1
   45634:	ldr	r9, [r1, #12]
   45638:	str	r6, [sp, #48]	; 0x30
   4563c:	str	r6, [sp, #52]	; 0x34
   45640:	bl	3b49c <__assert_fail@plt+0x28ea8>
   45644:	cmp	r0, #0
   45648:	str	r0, [sp, #56]	; 0x38
   4564c:	beq	45b14 <__assert_fail@plt+0x33520>
   45650:	mov	r2, r9
   45654:	add	r3, sp, #48	; 0x30
   45658:	str	r4, [r0]
   4565c:	mov	r1, fp
   45660:	mov	r0, sl
   45664:	bl	44bb8 <__assert_fail@plt+0x325c4>
   45668:	subs	r4, r0, #0
   4566c:	bne	45af0 <__assert_fail@plt+0x334fc>
   45670:	cmp	r9, #0
   45674:	movgt	r5, r6
   45678:	strgt	r4, [sp, #24]
   4567c:	strgt	r6, [sp, #40]	; 0x28
   45680:	strgt	r5, [sp, #44]	; 0x2c
   45684:	ble	45af0 <__assert_fail@plt+0x334fc>
   45688:	ldr	r0, [fp]
   4568c:	lsl	r3, r9, #2
   45690:	str	r3, [sp, #20]
   45694:	ldr	r3, [r0, r9, lsl #2]
   45698:	cmp	r3, #0
   4569c:	ldreq	r3, [sp, #24]
   456a0:	movne	r3, #0
   456a4:	addeq	r3, r3, #1
   456a8:	mov	r2, r3
   456ac:	str	r3, [sp, #24]
   456b0:	ldr	r3, [sl, #120]	; 0x78
   456b4:	cmp	r3, r2
   456b8:	blt	45af8 <__assert_fail@plt+0x33504>
   456bc:	mov	r2, #0
   456c0:	ldr	r3, [sl, #100]	; 0x64
   456c4:	sub	r9, r9, #1
   456c8:	str	r2, [sp, #52]	; 0x34
   456cc:	ldr	r2, [sp, #20]
   456d0:	add	r3, r3, r2
   456d4:	ldr	r5, [r3, #-4]
   456d8:	cmp	r5, #0
   456dc:	beq	45994 <__assert_fail@plt+0x333a0>
   456e0:	ldr	r3, [r5, #20]
   456e4:	ldr	r7, [sl, #84]	; 0x54
   456e8:	cmp	r3, #0
   456ec:	ble	45994 <__assert_fail@plt+0x333a0>
   456f0:	ldr	r3, [r5, #24]
   456f4:	add	r2, fp, #24
   456f8:	mov	r8, #0
   456fc:	ldr	r1, [r7]
   45700:	str	r2, [sp, #32]
   45704:	add	r2, fp, #20
   45708:	ldr	r4, [r3]
   4570c:	str	r2, [sp, #36]	; 0x24
   45710:	lsl	r6, r4, #3
   45714:	add	r1, r1, r6
   45718:	ldrb	r3, [r1, #6]
   4571c:	str	r6, [sp, #16]
   45720:	mov	r6, r8
   45724:	mov	r8, r5
   45728:	tst	r3, #16
   4572c:	bne	45814 <__assert_fail@plt+0x33220>
   45730:	mov	r2, r9
   45734:	mov	r0, sl
   45738:	bl	3d968 <__assert_fail@plt+0x2b374>
   4573c:	cmp	r0, #0
   45740:	beq	457e0 <__assert_fail@plt+0x331ec>
   45744:	ldr	r3, [fp]
   45748:	ldr	r2, [sp, #20]
   4574c:	ldr	r2, [r3, r2]
   45750:	cmp	r2, #0
   45754:	beq	457e0 <__assert_fail@plt+0x331ec>
   45758:	ldr	r3, [r2, #8]
   4575c:	cmp	r3, #0
   45760:	ble	457e0 <__assert_fail@plt+0x331ec>
   45764:	ldr	r1, [r7, #12]
   45768:	subs	r3, r3, #1
   4576c:	ldr	ip, [r2, #12]
   45770:	ldr	r0, [r1, r4, lsl #2]
   45774:	moveq	r1, r3
   45778:	beq	457d4 <__assert_fail@plt+0x331e0>
   4577c:	mov	r1, #0
   45780:	add	r2, r3, r1
   45784:	lsr	r2, r2, #1
   45788:	ldr	lr, [ip, r2, lsl #2]
   4578c:	cmp	r0, lr
   45790:	bgt	45904 <__assert_fail@plt+0x33310>
   45794:	cmp	r2, r1
   45798:	bls	457d4 <__assert_fail@plt+0x331e0>
   4579c:	add	r3, r2, r1
   457a0:	lsr	r3, r3, #1
   457a4:	ldr	lr, [ip, r3, lsl #2]
   457a8:	cmp	r0, lr
   457ac:	ble	457c4 <__assert_fail@plt+0x331d0>
   457b0:	b	458f8 <__assert_fail@plt+0x33304>
   457b4:	ldr	lr, [ip, r2, lsl #2]
   457b8:	cmp	r0, lr
   457bc:	bgt	45904 <__assert_fail@plt+0x33310>
   457c0:	mov	r3, r2
   457c4:	add	r2, r1, r3
   457c8:	cmp	r1, r3
   457cc:	lsr	r2, r2, #1
   457d0:	bcc	457b4 <__assert_fail@plt+0x331c0>
   457d4:	ldr	r3, [ip, r1, lsl #2]
   457d8:	cmp	r0, r3
   457dc:	beq	4591c <__assert_fail@plt+0x33328>
   457e0:	ldr	r3, [r8, #20]
   457e4:	add	r6, r6, #1
   457e8:	cmp	r6, r3
   457ec:	bge	45994 <__assert_fail@plt+0x333a0>
   457f0:	ldr	r3, [r8, #24]
   457f4:	ldr	r1, [r7]
   457f8:	ldr	r4, [r3, r6, lsl #2]
   457fc:	lsl	r3, r4, #3
   45800:	add	r1, r1, r3
   45804:	str	r3, [sp, #16]
   45808:	ldrb	r3, [r1, #6]
   4580c:	tst	r3, #16
   45810:	beq	45730 <__assert_fail@plt+0x3313c>
   45814:	ldr	r1, [fp, #12]
   45818:	mov	r3, sl
   4581c:	mov	r2, r4
   45820:	ldr	r5, [sl, #84]	; 0x54
   45824:	str	r1, [sp, #28]
   45828:	mov	r1, r5
   4582c:	ldr	r0, [r1], #128	; 0x80
   45830:	str	r9, [sp]
   45834:	bl	40524 <__assert_fail@plt+0x2df30>
   45838:	cmp	r0, #0
   4583c:	ble	459e4 <__assert_fail@plt+0x333f0>
   45840:	ldr	r1, [sp, #28]
   45844:	add	r3, r9, r0
   45848:	cmp	r1, r3
   4584c:	blt	45920 <__assert_fail@plt+0x3332c>
   45850:	ldr	r2, [fp]
   45854:	ldr	r3, [r2, r3, lsl #2]
   45858:	cmp	r3, #0
   4585c:	beq	458e8 <__assert_fail@plt+0x332f4>
   45860:	ldr	r2, [r3, #8]
   45864:	cmp	r2, #0
   45868:	ble	458e8 <__assert_fail@plt+0x332f4>
   4586c:	ldr	r1, [r5, #12]
   45870:	subs	r2, r2, #1
   45874:	ldr	lr, [r3, #12]
   45878:	ldr	ip, [r1, r4, lsl #2]
   4587c:	moveq	r1, r2
   45880:	beq	458dc <__assert_fail@plt+0x332e8>
   45884:	mov	r1, #0
   45888:	add	r3, r2, r1
   4588c:	lsr	r3, r3, #1
   45890:	ldr	r5, [lr, r3, lsl #2]
   45894:	cmp	ip, r5
   45898:	bgt	45a6c <__assert_fail@plt+0x33478>
   4589c:	cmp	r3, r1
   458a0:	bls	458dc <__assert_fail@plt+0x332e8>
   458a4:	add	r2, r3, r1
   458a8:	lsr	r2, r2, #1
   458ac:	ldr	r5, [lr, r2, lsl #2]
   458b0:	cmp	ip, r5
   458b4:	ble	458cc <__assert_fail@plt+0x332d8>
   458b8:	b	45a60 <__assert_fail@plt+0x3346c>
   458bc:	ldr	r5, [lr, r3, lsl #2]
   458c0:	cmp	ip, r5
   458c4:	bgt	45a6c <__assert_fail@plt+0x33478>
   458c8:	mov	r2, r3
   458cc:	add	r3, r1, r2
   458d0:	cmp	r1, r2
   458d4:	lsr	r3, r3, #1
   458d8:	bcc	458bc <__assert_fail@plt+0x332c8>
   458dc:	ldr	r3, [lr, r1, lsl #2]
   458e0:	cmp	ip, r3
   458e4:	beq	45920 <__assert_fail@plt+0x3332c>
   458e8:	ldr	r1, [r7]
   458ec:	ldr	r3, [sp, #16]
   458f0:	add	r1, r1, r3
   458f4:	b	45730 <__assert_fail@plt+0x3313c>
   458f8:	mov	r1, r3
   458fc:	mov	r3, r2
   45900:	mov	r2, r1
   45904:	add	r1, r2, #1
   45908:	cmp	r3, r1
   4590c:	bhi	45780 <__assert_fail@plt+0x3318c>
   45910:	ldr	r3, [ip, r1, lsl #2]
   45914:	cmp	r0, r3
   45918:	bne	457e0 <__assert_fail@plt+0x331ec>
   4591c:	mov	r0, #1
   45920:	ldr	r3, [fp, #20]
   45924:	cmp	r3, #0
   45928:	beq	45958 <__assert_fail@plt+0x33364>
   4592c:	ldr	r3, [r7, #12]
   45930:	add	ip, r9, r0
   45934:	mov	r0, sl
   45938:	ldr	r2, [sp, #32]
   4593c:	ldr	r1, [sp, #36]	; 0x24
   45940:	ldr	r3, [r3, r4, lsl #2]
   45944:	str	ip, [sp]
   45948:	stmib	sp, {r4, r9}
   4594c:	bl	3ff2c <__assert_fail@plt+0x2d938>
   45950:	cmp	r0, #0
   45954:	bne	457e0 <__assert_fail@plt+0x331ec>
   45958:	ldr	r1, [sp, #48]	; 0x30
   4595c:	cmp	r1, #0
   45960:	beq	459ec <__assert_fail@plt+0x333f8>
   45964:	ldr	r3, [sp, #52]	; 0x34
   45968:	ldr	r5, [sp, #56]	; 0x38
   4596c:	cmp	r3, #0
   45970:	bne	45a18 <__assert_fail@plt+0x33424>
   45974:	str	r4, [r5]
   45978:	add	r6, r6, #1
   4597c:	ldr	r3, [sp, #52]	; 0x34
   45980:	add	r3, r3, #1
   45984:	str	r3, [sp, #52]	; 0x34
   45988:	ldr	r3, [r8, #20]
   4598c:	cmp	r6, r3
   45990:	blt	457f0 <__assert_fail@plt+0x331fc>
   45994:	add	r3, sp, #48	; 0x30
   45998:	mov	r2, r9
   4599c:	mov	r1, fp
   459a0:	mov	r0, sl
   459a4:	bl	44bb8 <__assert_fail@plt+0x325c4>
   459a8:	cmp	r0, #0
   459ac:	bne	459b8 <__assert_fail@plt+0x333c4>
   459b0:	cmp	r9, #0
   459b4:	bne	45688 <__assert_fail@plt+0x33094>
   459b8:	mov	r4, r0
   459bc:	ldr	r0, [sp, #56]	; 0x38
   459c0:	bl	38b10 <__assert_fail@plt+0x2651c>
   459c4:	mov	r0, r4
   459c8:	add	sp, sp, #68	; 0x44
   459cc:	ldrd	r4, [sp]
   459d0:	ldrd	r6, [sp, #8]
   459d4:	ldrd	r8, [sp, #16]
   459d8:	ldrd	sl, [sp, #24]
   459dc:	add	sp, sp, #32
   459e0:	pop	{pc}		; (ldr pc, [sp], #4)
   459e4:	beq	458e8 <__assert_fail@plt+0x332f4>
   459e8:	b	45920 <__assert_fail@plt+0x3332c>
   459ec:	ldr	r3, [sp, #40]	; 0x28
   459f0:	mov	r0, #4
   459f4:	str	r3, [sp, #48]	; 0x30
   459f8:	ldr	r3, [sp, #44]	; 0x2c
   459fc:	str	r3, [sp, #52]	; 0x34
   45a00:	bl	3b49c <__assert_fail@plt+0x28ea8>
   45a04:	cmp	r0, #0
   45a08:	str	r0, [sp, #56]	; 0x38
   45a0c:	beq	45ab4 <__assert_fail@plt+0x334c0>
   45a10:	str	r4, [r0]
   45a14:	b	457e0 <__assert_fail@plt+0x331ec>
   45a18:	cmp	r1, r3
   45a1c:	beq	45ac8 <__assert_fail@plt+0x334d4>
   45a20:	ldr	r1, [r5]
   45a24:	mov	r2, r3
   45a28:	cmp	r1, r4
   45a2c:	ble	45a7c <__assert_fail@plt+0x33488>
   45a30:	cmp	r3, #0
   45a34:	ble	45a4c <__assert_fail@plt+0x33458>
   45a38:	lsl	r2, r3, #2
   45a3c:	mov	r1, r5
   45a40:	add	r0, r5, #4
   45a44:	bl	11fb8 <memmove@plt>
   45a48:	mov	r2, #0
   45a4c:	str	r4, [r5, r2, lsl #2]
   45a50:	ldr	r3, [sp, #52]	; 0x34
   45a54:	add	r3, r3, #1
   45a58:	str	r3, [sp, #52]	; 0x34
   45a5c:	b	457e0 <__assert_fail@plt+0x331ec>
   45a60:	mov	r1, r2
   45a64:	mov	r2, r3
   45a68:	mov	r3, r1
   45a6c:	add	r1, r3, #1
   45a70:	cmp	r1, r2
   45a74:	bcc	45888 <__assert_fail@plt+0x33294>
   45a78:	b	458dc <__assert_fail@plt+0x332e8>
   45a7c:	sub	r1, r3, #-1073741823	; 0xc0000001
   45a80:	ldr	r0, [r5, r1, lsl #2]
   45a84:	lsl	r1, r1, #2
   45a88:	cmp	r0, r4
   45a8c:	ble	45a4c <__assert_fail@plt+0x33458>
   45a90:	add	r1, r1, #4
   45a94:	add	r1, r5, r1
   45a98:	str	r0, [r1], #-4
   45a9c:	sub	r3, r3, #1
   45aa0:	ldr	r0, [r1, #-4]
   45aa4:	mov	r2, r3
   45aa8:	cmp	r0, r4
   45aac:	bgt	45a98 <__assert_fail@plt+0x334a4>
   45ab0:	b	45a4c <__assert_fail@plt+0x33458>
   45ab4:	mov	r2, #0
   45ab8:	mov	r3, #0
   45abc:	mov	r4, #12
   45ac0:	strd	r2, [sp, #48]	; 0x30
   45ac4:	b	459c0 <__assert_fail@plt+0x333cc>
   45ac8:	lsl	r3, r1, #1
   45acc:	mov	r0, r5
   45ad0:	lsl	r1, r1, #3
   45ad4:	str	r3, [sp, #48]	; 0x30
   45ad8:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   45adc:	subs	r5, r0, #0
   45ae0:	beq	45b1c <__assert_fail@plt+0x33528>
   45ae4:	str	r5, [sp, #56]	; 0x38
   45ae8:	ldr	r3, [sp, #52]	; 0x34
   45aec:	b	45a20 <__assert_fail@plt+0x3342c>
   45af0:	ldr	r0, [sp, #56]	; 0x38
   45af4:	b	459c0 <__assert_fail@plt+0x333cc>
   45af8:	mov	r1, #0
   45afc:	ldr	r2, [sp, #20]
   45b00:	mov	r4, r1
   45b04:	bl	12378 <memset@plt>
   45b08:	ldr	r0, [sp, #56]	; 0x38
   45b0c:	bl	38b10 <__assert_fail@plt+0x2651c>
   45b10:	b	459c4 <__assert_fail@plt+0x333d0>
   45b14:	mov	r4, #12
   45b18:	b	459c4 <__assert_fail@plt+0x333d0>
   45b1c:	mov	r4, #12
   45b20:	ldr	r0, [sp, #56]	; 0x38
   45b24:	b	459c0 <__assert_fail@plt+0x333cc>
   45b28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   45b2c:	ldr	r3, [r0, #84]	; 0x54
   45b30:	strd	r6, [sp, #8]
   45b34:	ldr	r6, [r1]
   45b38:	strd	r8, [sp, #16]
   45b3c:	strd	sl, [sp, #24]
   45b40:	str	lr, [sp, #32]
   45b44:	sub	sp, sp, #92	; 0x5c
   45b48:	ldr	sl, [r0, #40]	; 0x28
   45b4c:	cmp	r6, #0
   45b50:	str	r3, [sp, #32]
   45b54:	ble	460b4 <__assert_fail@plt+0x33ac0>
   45b58:	lsl	r3, sl, #2
   45b5c:	mov	fp, r0
   45b60:	str	r2, [sp, #44]	; 0x2c
   45b64:	str	r3, [sp, #52]	; 0x34
   45b68:	mov	r3, #0
   45b6c:	str	r1, [sp, #64]	; 0x40
   45b70:	str	r3, [sp, #20]
   45b74:	b	45bbc <__assert_fail@plt+0x335c8>
   45b78:	tst	r0, #1
   45b7c:	beq	45ba8 <__assert_fail@plt+0x335b4>
   45b80:	tst	r3, #8
   45b84:	bne	45ba8 <__assert_fail@plt+0x335b4>
   45b88:	tst	r3, #32
   45b8c:	beq	45b98 <__assert_fail@plt+0x335a4>
   45b90:	tst	r0, #2
   45b94:	beq	45ba8 <__assert_fail@plt+0x335b4>
   45b98:	tst	r3, #128	; 0x80
   45b9c:	beq	45c2c <__assert_fail@plt+0x33638>
   45ba0:	tst	r0, #8
   45ba4:	bne	45c2c <__assert_fail@plt+0x33638>
   45ba8:	ldr	r3, [sp, #20]
   45bac:	add	r3, r3, #1
   45bb0:	cmp	r3, r6
   45bb4:	str	r3, [sp, #20]
   45bb8:	bge	460b4 <__assert_fail@plt+0x33ac0>
   45bbc:	ldr	r1, [sp, #20]
   45bc0:	ldr	r3, [sp, #44]	; 0x2c
   45bc4:	ldr	r2, [r3]
   45bc8:	ldr	r3, [sp, #32]
   45bcc:	ldr	r8, [r2, r1, lsl #2]
   45bd0:	ldr	r3, [r3]
   45bd4:	add	r3, r3, r8, lsl #3
   45bd8:	ldrb	r2, [r3, #4]
   45bdc:	cmp	r2, #4
   45be0:	bne	45ba8 <__assert_fail@plt+0x335b4>
   45be4:	ldr	r4, [r3, #4]
   45be8:	mov	r3, #65280	; 0xff00
   45bec:	movt	r3, #3
   45bf0:	and	r3, r3, r4
   45bf4:	cmp	r3, #0
   45bf8:	beq	45c2c <__assert_fail@plt+0x33638>
   45bfc:	mov	r1, sl
   45c00:	mov	r0, fp
   45c04:	ldr	r2, [fp, #88]	; 0x58
   45c08:	bl	3d850 <__assert_fail@plt+0x2b25c>
   45c0c:	ubfx	r3, r4, #8, #10
   45c10:	tst	r3, #4
   45c14:	bne	45b78 <__assert_fail@plt+0x33584>
   45c18:	tst	r3, #8
   45c1c:	beq	45b88 <__assert_fail@plt+0x33594>
   45c20:	tst	r0, #1
   45c24:	beq	45b88 <__assert_fail@plt+0x33594>
   45c28:	b	45ba8 <__assert_fail@plt+0x335b4>
   45c2c:	ldr	ip, [fp, #108]	; 0x6c
   45c30:	cmp	ip, #0
   45c34:	mov	r9, ip
   45c38:	ble	45ec0 <__assert_fail@plt+0x338cc>
   45c3c:	ldr	r1, [fp, #116]	; 0x74
   45c40:	mov	r2, ip
   45c44:	mov	r0, #0
   45c48:	add	r3, r2, r0
   45c4c:	asr	r3, r3, #1
   45c50:	add	lr, r3, r3, lsl #1
   45c54:	add	lr, r1, lr, lsl #3
   45c58:	ldr	lr, [lr, #4]
   45c5c:	cmp	sl, lr
   45c60:	bgt	45eb0 <__assert_fail@plt+0x338bc>
   45c64:	cmp	r3, r0
   45c68:	ble	45cb4 <__assert_fail@plt+0x336c0>
   45c6c:	add	r2, r3, r0
   45c70:	asr	r2, r2, #1
   45c74:	add	lr, r2, r2, lsl #1
   45c78:	add	lr, r1, lr, lsl #3
   45c7c:	ldr	lr, [lr, #4]
   45c80:	cmp	sl, lr
   45c84:	ble	45ca4 <__assert_fail@plt+0x336b0>
   45c88:	b	45ea4 <__assert_fail@plt+0x338b0>
   45c8c:	add	lr, r3, r3, lsl #1
   45c90:	add	lr, r1, lr, lsl #3
   45c94:	ldr	lr, [lr, #4]
   45c98:	cmp	sl, lr
   45c9c:	bgt	45eb0 <__assert_fail@plt+0x338bc>
   45ca0:	mov	r2, r3
   45ca4:	add	r3, r0, r2
   45ca8:	cmp	r0, r2
   45cac:	asr	r3, r3, #1
   45cb0:	blt	45c8c <__assert_fail@plt+0x33698>
   45cb4:	cmp	ip, r0
   45cb8:	ble	45ec0 <__assert_fail@plt+0x338cc>
   45cbc:	add	r0, r0, r0, lsl #1
   45cc0:	add	r1, r1, r0, lsl #3
   45cc4:	ldr	r3, [r1, #4]
   45cc8:	cmp	sl, r3
   45ccc:	bne	45ec0 <__assert_fail@plt+0x338cc>
   45cd0:	add	r1, r1, #24
   45cd4:	b	45ce4 <__assert_fail@plt+0x336f0>
   45cd8:	ldrb	r3, [r1, #-28]	; 0xffffffe4
   45cdc:	cmp	r3, #0
   45ce0:	beq	45ec0 <__assert_fail@plt+0x338cc>
   45ce4:	ldr	r3, [r1, #-24]	; 0xffffffe8
   45ce8:	add	r1, r1, #24
   45cec:	cmp	r8, r3
   45cf0:	bne	45cd8 <__assert_fail@plt+0x336e4>
   45cf4:	lsl	r2, r8, #2
   45cf8:	mov	r3, #0
   45cfc:	cmp	r9, ip
   45d00:	str	r2, [sp, #40]	; 0x28
   45d04:	str	r3, [sp, #72]	; 0x48
   45d08:	bge	4603c <__assert_fail@plt+0x33a48>
   45d0c:	add	r3, r8, r8, lsl #1
   45d10:	ldr	r7, [sp, #32]
   45d14:	lsl	r3, r3, #2
   45d18:	str	r3, [sp, #48]	; 0x30
   45d1c:	b	45e04 <__assert_fail@plt+0x33810>
   45d20:	ldr	r2, [r7, #20]
   45d24:	ldr	r1, [sp, #48]	; 0x30
   45d28:	add	r2, r2, r1
   45d2c:	ldr	r2, [r2, #8]
   45d30:	ldr	r2, [r2]
   45d34:	add	r2, r2, r2, lsl #1
   45d38:	add	r5, r5, r2, lsl #2
   45d3c:	add	r3, sl, r3
   45d40:	mov	r0, fp
   45d44:	ldr	r2, [fp, #88]	; 0x58
   45d48:	sub	r4, r3, r4
   45d4c:	sub	r1, r4, #1
   45d50:	bl	3d850 <__assert_fail@plt+0x2b25c>
   45d54:	ldr	r2, [sp, #52]	; 0x34
   45d58:	mov	r3, r0
   45d5c:	ldr	r6, [fp, #100]	; 0x64
   45d60:	ldr	r2, [r6, r2]
   45d64:	ldr	r1, [r6, r4, lsl #2]
   45d68:	cmp	r2, #0
   45d6c:	ldrne	r2, [r2, #8]
   45d70:	cmp	r1, #0
   45d74:	str	r2, [sp, #28]
   45d78:	beq	45e58 <__assert_fail@plt+0x33864>
   45d7c:	mov	r2, r5
   45d80:	add	r0, sp, #76	; 0x4c
   45d84:	ldr	r1, [r1, #40]	; 0x28
   45d88:	str	r3, [sp, #36]	; 0x24
   45d8c:	bl	448f0 <__assert_fail@plt+0x322fc>
   45d90:	cmp	r0, #0
   45d94:	str	r0, [sp, #72]	; 0x48
   45d98:	ldr	r3, [sp, #36]	; 0x24
   45d9c:	bne	460a4 <__assert_fail@plt+0x33ab0>
   45da0:	add	r2, sp, #76	; 0x4c
   45da4:	mov	r1, r7
   45da8:	ldr	r6, [fp, #100]	; 0x64
   45dac:	add	r0, sp, #72	; 0x48
   45db0:	bl	426a8 <__assert_fail@plt+0x300b4>
   45db4:	str	r0, [r6, r4, lsl #2]
   45db8:	ldr	r0, [sp, #84]	; 0x54
   45dbc:	bl	38b10 <__assert_fail@plt+0x2651c>
   45dc0:	ldr	r3, [fp, #100]	; 0x64
   45dc4:	ldr	r2, [r3, r4, lsl #2]
   45dc8:	cmp	r2, #0
   45dcc:	beq	45e7c <__assert_fail@plt+0x33888>
   45dd0:	ldr	r2, [sp, #24]
   45dd4:	cmp	r2, #0
   45dd8:	bne	45df4 <__assert_fail@plt+0x33800>
   45ddc:	ldr	r2, [sp, #52]	; 0x34
   45de0:	ldr	r3, [r3, r2]
   45de4:	ldr	r2, [sp, #28]
   45de8:	ldr	r3, [r3, #8]
   45dec:	cmp	r3, r2
   45df0:	bgt	45ff4 <__assert_fail@plt+0x33a00>
   45df4:	ldr	ip, [fp, #108]	; 0x6c
   45df8:	add	r9, r9, #1
   45dfc:	cmp	r9, ip
   45e00:	bge	4603c <__assert_fail@plt+0x33a48>
   45e04:	ldr	r3, [fp, #116]	; 0x74
   45e08:	add	r2, r9, r9, lsl #1
   45e0c:	ldr	r1, [r3, r2, lsl #3]
   45e10:	add	r3, r3, r2, lsl #3
   45e14:	cmp	r8, r1
   45e18:	bne	45df8 <__assert_fail@plt+0x33804>
   45e1c:	ldr	r2, [r3, #4]
   45e20:	cmp	sl, r2
   45e24:	bne	45df8 <__assert_fail@plt+0x33804>
   45e28:	ldr	r4, [r3, #8]
   45e2c:	ldr	r3, [r3, #12]
   45e30:	ldr	r5, [r7, #24]
   45e34:	subs	r2, r3, r4
   45e38:	str	r2, [sp, #24]
   45e3c:	beq	45d20 <__assert_fail@plt+0x3372c>
   45e40:	ldr	r2, [r7, #12]
   45e44:	ldr	r1, [sp, #40]	; 0x28
   45e48:	ldr	r2, [r2, r1]
   45e4c:	add	r2, r2, r2, lsl #1
   45e50:	add	r5, r5, r2, lsl #2
   45e54:	b	45d3c <__assert_fail@plt+0x33748>
   45e58:	mov	r2, r5
   45e5c:	mov	r1, r7
   45e60:	add	r0, sp, #72	; 0x48
   45e64:	bl	426a8 <__assert_fail@plt+0x300b4>
   45e68:	ldr	r3, [fp, #100]	; 0x64
   45e6c:	str	r0, [r6, r4, lsl #2]
   45e70:	ldr	r2, [r3, r4, lsl #2]
   45e74:	cmp	r2, #0
   45e78:	bne	45dd0 <__assert_fail@plt+0x337dc>
   45e7c:	ldr	r0, [sp, #72]	; 0x48
   45e80:	cmp	r0, #0
   45e84:	beq	45dd0 <__assert_fail@plt+0x337dc>
   45e88:	add	sp, sp, #92	; 0x5c
   45e8c:	ldrd	r4, [sp]
   45e90:	ldrd	r6, [sp, #8]
   45e94:	ldrd	r8, [sp, #16]
   45e98:	ldrd	sl, [sp, #24]
   45e9c:	add	sp, sp, #32
   45ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   45ea4:	mov	r0, r2
   45ea8:	mov	r2, r3
   45eac:	mov	r3, r0
   45eb0:	add	r0, r3, #1
   45eb4:	cmp	r0, r2
   45eb8:	blt	45c48 <__assert_fail@plt+0x33654>
   45ebc:	b	45cb4 <__assert_fail@plt+0x336c0>
   45ec0:	ldr	r3, [fp, #84]	; 0x54
   45ec4:	ldr	r1, [fp, #124]	; 0x7c
   45ec8:	str	r3, [sp, #60]	; 0x3c
   45ecc:	ldr	r3, [r3]
   45ed0:	cmp	r1, #0
   45ed4:	ldr	r2, [r3, r8, lsl #3]
   45ed8:	str	r2, [sp, #56]	; 0x38
   45edc:	ble	45cf4 <__assert_fail@plt+0x33700>
   45ee0:	mov	r2, #0
   45ee4:	str	r2, [sp, #36]	; 0x24
   45ee8:	ldr	r2, [fp, #4]
   45eec:	str	sl, [sp, #40]	; 0x28
   45ef0:	str	r8, [sp, #48]	; 0x30
   45ef4:	str	r9, [sp, #68]	; 0x44
   45ef8:	mov	ip, r2
   45efc:	ldr	r0, [sp, #36]	; 0x24
   45f00:	ldr	r2, [fp, #132]	; 0x84
   45f04:	ldr	r4, [r2, r0, lsl #2]
   45f08:	ldr	r2, [r4, #4]
   45f0c:	ldr	r3, [r3, r2, lsl #3]
   45f10:	ldr	r2, [sp, #56]	; 0x38
   45f14:	cmp	r2, r3
   45f18:	beq	45f3c <__assert_fail@plt+0x33948>
   45f1c:	ldr	r3, [sp, #36]	; 0x24
   45f20:	add	r3, r3, #1
   45f24:	cmp	r3, r1
   45f28:	str	r3, [sp, #36]	; 0x24
   45f2c:	bge	462b0 <__assert_fail@plt+0x33cbc>
   45f30:	ldr	r3, [sp, #60]	; 0x3c
   45f34:	ldr	r3, [r3]
   45f38:	b	45efc <__assert_fail@plt+0x33908>
   45f3c:	ldr	r7, [r4]
   45f40:	ldr	r2, [r4, #16]
   45f44:	ldr	r8, [sp, #40]	; 0x28
   45f48:	cmp	r2, #0
   45f4c:	ble	460cc <__assert_fail@plt+0x33ad8>
   45f50:	mov	r5, #0
   45f54:	mov	r3, ip
   45f58:	str	r8, [sp, #24]
   45f5c:	b	45f70 <__assert_fail@plt+0x3397c>
   45f60:	ldr	r2, [r4, #16]
   45f64:	str	sl, [sp, #24]
   45f68:	cmp	r5, r2
   45f6c:	bge	460bc <__assert_fail@plt+0x33ac8>
   45f70:	ldr	r1, [r4, #20]
   45f74:	ldr	r9, [r1, r5, lsl #2]
   45f78:	ldr	r1, [sp, #24]
   45f7c:	ldr	r8, [r9, #4]
   45f80:	sub	r6, r8, r7
   45f84:	cmp	r6, #0
   45f88:	add	sl, r6, r1
   45f8c:	ble	45fc0 <__assert_fail@plt+0x339cc>
   45f90:	ldr	r1, [fp, #28]
   45f94:	cmp	r1, sl
   45f98:	blt	46048 <__assert_fail@plt+0x33a54>
   45f9c:	ldr	r0, [sp, #24]
   45fa0:	add	r1, r3, r7
   45fa4:	mov	r2, r6
   45fa8:	str	r3, [sp, #28]
   45fac:	add	r0, r3, r0
   45fb0:	bl	12084 <memcmp@plt>
   45fb4:	cmp	r0, #0
   45fb8:	ldr	r3, [sp, #28]
   45fbc:	bne	4625c <__assert_fail@plt+0x33c68>
   45fc0:	ldr	r1, [sp, #40]	; 0x28
   45fc4:	mov	r2, r9
   45fc8:	mov	r0, fp
   45fcc:	add	r5, r5, #1
   45fd0:	mov	r7, r8
   45fd4:	ldr	r3, [sp, #48]	; 0x30
   45fd8:	str	r1, [sp]
   45fdc:	mov	r1, r4
   45fe0:	bl	44344 <__assert_fail@plt+0x31d50>
   45fe4:	cmp	r0, #1
   45fe8:	ldr	r3, [fp, #4]
   45fec:	bls	45f60 <__assert_fail@plt+0x3396c>
   45ff0:	b	45e88 <__assert_fail@plt+0x33894>
   45ff4:	add	r4, r5, #4
   45ff8:	add	r5, r5, #8
   45ffc:	mov	r2, r5
   46000:	mov	r1, r4
   46004:	mov	r3, sl
   46008:	mov	r0, fp
   4600c:	bl	3e6c4 <__assert_fail@plt+0x2c0d0>
   46010:	cmp	r0, #0
   46014:	str	r0, [sp, #72]	; 0x48
   46018:	bne	45e88 <__assert_fail@plt+0x33894>
   4601c:	mov	r2, r5
   46020:	mov	r1, r4
   46024:	mov	r0, fp
   46028:	bl	45b28 <__assert_fail@plt+0x33534>
   4602c:	cmp	r0, #0
   46030:	str	r0, [sp, #72]	; 0x48
   46034:	beq	45df4 <__assert_fail@plt+0x33800>
   46038:	b	45e88 <__assert_fail@plt+0x33894>
   4603c:	ldr	r3, [sp, #64]	; 0x40
   46040:	ldr	r6, [r3]
   46044:	b	45ba8 <__assert_fail@plt+0x335b4>
   46048:	ldr	ip, [fp, #48]	; 0x30
   4604c:	add	r1, sl, #1
   46050:	mov	r0, fp
   46054:	cmp	ip, sl
   46058:	blt	462f4 <__assert_fail@plt+0x33d00>
   4605c:	ldr	r3, [fp, #104]	; 0x68
   46060:	str	r3, [sp, #28]
   46064:	bl	41010 <__assert_fail@plt+0x2ea1c>
   46068:	cmp	r0, #0
   4606c:	mov	r1, r0
   46070:	bne	45e88 <__assert_fail@plt+0x33894>
   46074:	ldr	r3, [sp, #28]
   46078:	sub	r2, sl, r3
   4607c:	cmp	r3, sl
   46080:	add	r0, r3, #1
   46084:	lsl	r2, r2, #2
   46088:	bge	4609c <__assert_fail@plt+0x33aa8>
   4608c:	ldr	r3, [fp, #100]	; 0x64
   46090:	add	r0, r3, r0, lsl #2
   46094:	bl	12378 <memset@plt>
   46098:	str	sl, [fp, #104]	; 0x68
   4609c:	ldr	r3, [fp, #4]
   460a0:	b	45f9c <__assert_fail@plt+0x339a8>
   460a4:	ldr	r0, [sp, #84]	; 0x54
   460a8:	bl	38b10 <__assert_fail@plt+0x2651c>
   460ac:	ldr	r0, [sp, #72]	; 0x48
   460b0:	b	45e88 <__assert_fail@plt+0x33894>
   460b4:	mov	r0, #0
   460b8:	b	45e88 <__assert_fail@plt+0x33894>
   460bc:	mov	r9, r8
   460c0:	mov	ip, r3
   460c4:	add	r7, r9, #1
   460c8:	mov	r8, sl
   460cc:	ldr	r3, [sp, #40]	; 0x28
   460d0:	cmp	r3, r7
   460d4:	blt	4622c <__assert_fail@plt+0x33c38>
   460d8:	ldr	r6, [sp, #56]	; 0x38
   460dc:	mov	sl, r3
   460e0:	mov	r9, ip
   460e4:	ldr	r3, [r4]
   460e8:	sub	r3, r7, r3
   460ec:	cmp	r3, #0
   460f0:	ble	4611c <__assert_fail@plt+0x33b28>
   460f4:	ldr	r3, [fp, #28]
   460f8:	cmp	r3, r8
   460fc:	ble	46284 <__assert_fail@plt+0x33c90>
   46100:	add	r5, r8, #1
   46104:	add	r3, r9, r7
   46108:	ldrb	r2, [r9, r8]
   4610c:	ldrb	r3, [r3, #-1]
   46110:	cmp	r2, r3
   46114:	bne	46228 <__assert_fail@plt+0x33c34>
   46118:	mov	r8, r5
   4611c:	ldr	r3, [fp, #100]	; 0x64
   46120:	ldr	r3, [r3, r7, lsl #2]
   46124:	cmp	r3, #0
   46128:	beq	4621c <__assert_fail@plt+0x33c28>
   4612c:	ldr	ip, [r3, #8]
   46130:	cmp	ip, #0
   46134:	ble	4621c <__assert_fail@plt+0x33c28>
   46138:	ldr	r2, [r3, #12]
   4613c:	mov	r3, #0
   46140:	ldr	r1, [sp, #60]	; 0x3c
   46144:	sub	r2, r2, #4
   46148:	ldr	r0, [r1]
   4614c:	b	46158 <__assert_fail@plt+0x33b64>
   46150:	cmp	ip, r3
   46154:	beq	4621c <__assert_fail@plt+0x33c28>
   46158:	ldr	r5, [r2, #4]!
   4615c:	add	r3, r3, #1
   46160:	add	r1, r0, r5, lsl #3
   46164:	ldrb	r1, [r1, #4]
   46168:	cmp	r1, #9
   4616c:	bne	46150 <__assert_fail@plt+0x33b5c>
   46170:	ldr	r1, [r0, r5, lsl #3]
   46174:	cmp	r6, r1
   46178:	bne	46150 <__assert_fail@plt+0x33b5c>
   4617c:	cmn	r5, #1
   46180:	beq	4621c <__assert_fail@plt+0x33c28>
   46184:	ldr	r3, [r4]
   46188:	ldr	r1, [r4, #8]
   4618c:	cmp	r1, #0
   46190:	beq	46234 <__assert_fail@plt+0x33c40>
   46194:	mov	ip, #9
   46198:	mov	r0, fp
   4619c:	ldr	r2, [r4, #4]
   461a0:	stm	sp, {r5, r7, ip}
   461a4:	bl	43b88 <__assert_fail@plt+0x31594>
   461a8:	cmp	r0, #1
   461ac:	beq	4621c <__assert_fail@plt+0x33c28>
   461b0:	cmp	r0, #0
   461b4:	bne	45e88 <__assert_fail@plt+0x33894>
   461b8:	ldrd	r2, [r4, #12]
   461bc:	cmp	r3, r2
   461c0:	beq	462cc <__assert_fail@plt+0x33cd8>
   461c4:	mov	r1, #20
   461c8:	mov	r0, #1
   461cc:	bl	384e0 <__assert_fail@plt+0x25eec>
   461d0:	subs	ip, r0, #0
   461d4:	beq	462c4 <__assert_fail@plt+0x33cd0>
   461d8:	ldr	lr, [r4, #16]
   461dc:	mov	r2, ip
   461e0:	mov	r1, r4
   461e4:	mov	r0, fp
   461e8:	ldr	r3, [sp, #48]	; 0x30
   461ec:	add	r9, lr, #1
   461f0:	str	r9, [sp, #24]
   461f4:	ldr	r9, [r4, #20]
   461f8:	str	ip, [r9, lr, lsl #2]
   461fc:	stm	ip, {r5, r7}
   46200:	ldr	ip, [sp, #24]
   46204:	str	ip, [r4, #16]
   46208:	str	sl, [sp]
   4620c:	bl	44344 <__assert_fail@plt+0x31d50>
   46210:	cmp	r0, #1
   46214:	ldr	r9, [fp, #4]
   46218:	bhi	45e88 <__assert_fail@plt+0x33894>
   4621c:	add	r7, r7, #1
   46220:	cmp	sl, r7
   46224:	bge	460e4 <__assert_fail@plt+0x33af0>
   46228:	mov	ip, r9
   4622c:	ldr	r1, [fp, #124]	; 0x7c
   46230:	b	45f1c <__assert_fail@plt+0x33928>
   46234:	sub	r3, r7, r3
   46238:	mov	r0, #12
   4623c:	add	r1, r3, #1
   46240:	bl	384e0 <__assert_fail@plt+0x25eec>
   46244:	cmp	r0, #0
   46248:	mov	r1, r0
   4624c:	str	r0, [r4, #8]
   46250:	beq	462c4 <__assert_fail@plt+0x33cd0>
   46254:	ldr	r3, [r4]
   46258:	b	46194 <__assert_fail@plt+0x33ba0>
   4625c:	ldr	r2, [r4, #16]
   46260:	mov	ip, r3
   46264:	ldr	r8, [sp, #24]
   46268:	cmp	r5, r2
   4626c:	blt	4622c <__assert_fail@plt+0x33c38>
   46270:	cmp	r5, #0
   46274:	ble	460cc <__assert_fail@plt+0x33ad8>
   46278:	mov	sl, r8
   4627c:	mov	r9, r7
   46280:	b	460c4 <__assert_fail@plt+0x33ad0>
   46284:	ldr	r3, [fp, #48]	; 0x30
   46288:	cmp	r3, r8
   4628c:	ble	46228 <__assert_fail@plt+0x33c34>
   46290:	add	r5, r8, #1
   46294:	mov	r0, fp
   46298:	mov	r1, r5
   4629c:	bl	41010 <__assert_fail@plt+0x2ea1c>
   462a0:	cmp	r0, #0
   462a4:	bne	45e88 <__assert_fail@plt+0x33894>
   462a8:	ldr	r9, [fp, #4]
   462ac:	b	46104 <__assert_fail@plt+0x33b10>
   462b0:	ldr	sl, [sp, #40]	; 0x28
   462b4:	ldr	r8, [sp, #48]	; 0x30
   462b8:	ldr	r9, [sp, #68]	; 0x44
   462bc:	ldr	ip, [fp, #108]	; 0x6c
   462c0:	b	45cf4 <__assert_fail@plt+0x33700>
   462c4:	mov	r0, #12
   462c8:	b	45e88 <__assert_fail@plt+0x33894>
   462cc:	lsl	r3, r3, #1
   462d0:	ldr	r0, [r4, #20]
   462d4:	add	r9, r3, #1
   462d8:	lsl	r1, r9, #2
   462dc:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   462e0:	cmp	r0, #0
   462e4:	beq	462c4 <__assert_fail@plt+0x33cd0>
   462e8:	str	r9, [r4, #12]
   462ec:	str	r0, [r4, #20]
   462f0:	b	461c4 <__assert_fail@plt+0x33bd0>
   462f4:	mov	ip, r3
   462f8:	ldr	r8, [sp, #24]
   462fc:	b	46268 <__assert_fail@plt+0x33c74>
   46300:	strd	r4, [sp, #-32]!	; 0xffffffe0
   46304:	mov	r4, r1
   46308:	ldr	r5, [r1, #40]	; 0x28
   4630c:	ldr	r3, [r1, #104]	; 0x68
   46310:	strd	r6, [sp, #8]
   46314:	strd	r8, [sp, #16]
   46318:	str	sl, [sp, #24]
   4631c:	mov	sl, r0
   46320:	str	lr, [sp, #28]
   46324:	sub	sp, sp, #16
   46328:	cmp	r3, r5
   4632c:	ldr	r8, [r1, #84]	; 0x54
   46330:	ldr	r9, [r1, #100]	; 0x64
   46334:	bge	46370 <__assert_fail@plt+0x33d7c>
   46338:	mov	r6, r2
   4633c:	str	r2, [r9, r5, lsl #2]
   46340:	str	r5, [r1, #104]	; 0x68
   46344:	ldr	r3, [r8, #76]	; 0x4c
   46348:	cmp	r3, #0
   4634c:	bne	46438 <__assert_fail@plt+0x33e44>
   46350:	mov	r0, r6
   46354:	add	sp, sp, #16
   46358:	ldrd	r4, [sp]
   4635c:	ldrd	r6, [sp, #8]
   46360:	ldrd	r8, [sp, #16]
   46364:	ldr	sl, [sp, #24]
   46368:	add	sp, sp, #28
   4636c:	pop	{pc}		; (ldr pc, [sp], #4)
   46370:	ldr	r3, [r9, r5, lsl #2]
   46374:	cmp	r3, #0
   46378:	moveq	r6, r2
   4637c:	streq	r2, [r9, r5, lsl #2]
   46380:	beq	46344 <__assert_fail@plt+0x33d50>
   46384:	cmp	r2, #0
   46388:	ldr	r3, [r3, #40]	; 0x28
   4638c:	beq	463f8 <__assert_fail@plt+0x33e04>
   46390:	ldr	r7, [r2, #40]	; 0x28
   46394:	add	r0, sp, #4
   46398:	mov	r2, r3
   4639c:	mov	r1, r7
   463a0:	bl	448f0 <__assert_fail@plt+0x322fc>
   463a4:	cmp	r0, #0
   463a8:	str	r0, [sl]
   463ac:	bne	4649c <__assert_fail@plt+0x33ea8>
   463b0:	ldr	r1, [r4, #40]	; 0x28
   463b4:	mov	r0, r4
   463b8:	ldr	r2, [r4, #88]	; 0x58
   463bc:	sub	r1, r1, #1
   463c0:	bl	3d850 <__assert_fail@plt+0x2b25c>
   463c4:	ldr	r9, [r4, #100]	; 0x64
   463c8:	mov	r3, r0
   463cc:	add	r2, sp, #4
   463d0:	mov	r1, r8
   463d4:	mov	r0, sl
   463d8:	bl	426a8 <__assert_fail@plt+0x300b4>
   463dc:	cmp	r7, #0
   463e0:	mov	r6, r0
   463e4:	str	r0, [r9, r5, lsl #2]
   463e8:	beq	46344 <__assert_fail@plt+0x33d50>
   463ec:	ldr	r0, [sp, #12]
   463f0:	bl	38b10 <__assert_fail@plt+0x2651c>
   463f4:	b	46344 <__assert_fail@plt+0x33d50>
   463f8:	ldrd	r6, [r3]
   463fc:	sub	r1, r5, #1
   46400:	mov	r0, r4
   46404:	ldr	r2, [r4, #88]	; 0x58
   46408:	strd	r6, [sp, #4]
   4640c:	ldr	r3, [r3, #8]
   46410:	str	r3, [sp, #12]
   46414:	bl	3d850 <__assert_fail@plt+0x2b25c>
   46418:	mov	r3, r0
   4641c:	add	r2, sp, #4
   46420:	mov	r1, r8
   46424:	mov	r0, sl
   46428:	bl	426a8 <__assert_fail@plt+0x300b4>
   4642c:	mov	r6, r0
   46430:	str	r0, [r9, r5, lsl #2]
   46434:	b	46344 <__assert_fail@plt+0x33d50>
   46438:	cmp	r6, #0
   4643c:	beq	4649c <__assert_fail@plt+0x33ea8>
   46440:	add	r7, r6, #8
   46444:	add	r8, r6, #12
   46448:	mov	r1, r7
   4644c:	mov	r2, r8
   46450:	mov	r3, r5
   46454:	mov	r0, r4
   46458:	bl	3e6c4 <__assert_fail@plt+0x2c0d0>
   4645c:	cmp	r0, #0
   46460:	str	r0, [sl]
   46464:	bne	4649c <__assert_fail@plt+0x33ea8>
   46468:	ldrb	r3, [r6, #52]	; 0x34
   4646c:	tst	r3, #64	; 0x40
   46470:	beq	46350 <__assert_fail@plt+0x33d5c>
   46474:	mov	r2, r8
   46478:	mov	r1, r7
   4647c:	mov	r0, r4
   46480:	bl	45b28 <__assert_fail@plt+0x33534>
   46484:	cmp	r0, #0
   46488:	str	r0, [sl]
   4648c:	bne	4649c <__assert_fail@plt+0x33ea8>
   46490:	ldr	r3, [r4, #100]	; 0x64
   46494:	ldr	r6, [r3, r5, lsl #2]
   46498:	b	46350 <__assert_fail@plt+0x33d5c>
   4649c:	mov	r6, #0
   464a0:	b	46350 <__assert_fail@plt+0x33d5c>
   464a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   464a8:	mov	r5, r0
   464ac:	mov	r0, #32
   464b0:	strd	r6, [sp, #8]
   464b4:	mov	r7, r3
   464b8:	strd	r8, [sp, #16]
   464bc:	mov	r9, #0
   464c0:	strd	sl, [sp, #24]
   464c4:	mov	fp, r1
   464c8:	mov	r1, #1
   464cc:	str	lr, [sp, #32]
   464d0:	sub	sp, sp, #44	; 0x2c
   464d4:	mov	sl, r2
   464d8:	ldrb	r8, [sp, #80]	; 0x50
   464dc:	str	r9, [sp, #20]
   464e0:	bl	384e0 <__assert_fail@plt+0x25eec>
   464e4:	subs	r4, r0, #0
   464e8:	beq	468a4 <__assert_fail@plt+0x342b0>
   464ec:	mov	r1, #1
   464f0:	mov	r0, #40	; 0x28
   464f4:	bl	384e0 <__assert_fail@plt+0x25eec>
   464f8:	subs	r6, r0, #0
   464fc:	beq	468e4 <__assert_fail@plt+0x342f0>
   46500:	ldrb	ip, [r6, #16]
   46504:	add	lr, sp, #20
   46508:	mov	r0, fp
   4650c:	add	r3, r6, #36	; 0x24
   46510:	add	r2, r6, #12
   46514:	mov	r1, r4
   46518:	bfi	ip, r8, #0, #1
   4651c:	strb	ip, [r6, #16]
   46520:	str	lr, [sp]
   46524:	str	sl, [sp, #4]
   46528:	str	r9, [sp, #8]
   4652c:	bl	3e7f4 <__assert_fail@plt+0x2c200>
   46530:	subs	sl, r0, #0
   46534:	bne	46984 <__assert_fail@plt+0x34390>
   46538:	ldrb	r3, [r7]
   4653c:	cmp	r3, #0
   46540:	beq	46568 <__assert_fail@plt+0x33f74>
   46544:	mov	ip, #1
   46548:	asr	r1, r3, #5
   4654c:	and	r0, r3, #31
   46550:	ldrb	r3, [r7, #1]!
   46554:	ldr	r2, [r4, r1, lsl #2]
   46558:	cmp	r3, #0
   4655c:	orr	r2, r2, ip, lsl r0
   46560:	str	r2, [r4, r1, lsl #2]
   46564:	bne	46548 <__assert_fail@plt+0x33f54>
   46568:	cmp	r8, #0
   4656c:	beq	46600 <__assert_fail@plt+0x3400c>
   46570:	ubfx	r1, r4, #2, #1
   46574:	cmp	r1, #0
   46578:	moveq	r3, r1
   4657c:	beq	46590 <__assert_fail@plt+0x33f9c>
   46580:	ldr	r2, [r4]
   46584:	mov	r3, #1
   46588:	mvn	r2, r2
   4658c:	str	r2, [r4]
   46590:	ldr	ip, [r4, r1, lsl #2]
   46594:	rsb	lr, r1, #8
   46598:	add	r2, r4, r1, lsl #2
   4659c:	lsr	lr, lr, #1
   465a0:	ldr	r0, [r2, #4]
   465a4:	cmp	lr, #4
   465a8:	mvn	ip, ip
   465ac:	str	ip, [r4, r1, lsl #2]
   465b0:	mvn	r1, r0
   465b4:	ldr	lr, [r2, #8]
   465b8:	ldr	ip, [r2, #12]
   465bc:	ldr	r0, [r2, #16]
   465c0:	mvn	lr, lr
   465c4:	stmib	r2, {r1, lr}
   465c8:	mvn	ip, ip
   465cc:	ldr	r1, [r2, #20]
   465d0:	mvn	r0, r0
   465d4:	str	ip, [r2, #12]
   465d8:	str	r0, [r2, #16]
   465dc:	mvn	r1, r1
   465e0:	str	r1, [r2, #20]
   465e4:	bne	46850 <__assert_fail@plt+0x3425c>
   465e8:	ldr	r1, [r2, #24]
   465ec:	ldr	r3, [r2, #28]
   465f0:	mvn	r1, r1
   465f4:	mvn	r3, r3
   465f8:	str	r1, [r2, #24]
   465fc:	str	r3, [r2, #28]
   46600:	ldr	r3, [r5, #92]	; 0x5c
   46604:	cmp	r3, #1
   46608:	ble	466b0 <__assert_fail@plt+0x340bc>
   4660c:	ldr	r3, [r5, #60]	; 0x3c
   46610:	add	r2, r4, #8
   46614:	add	r0, r3, #8
   46618:	orr	r1, r3, r4
   4661c:	cmp	r4, r0
   46620:	cmpcc	r3, r2
   46624:	movcs	r2, #1
   46628:	movcc	r2, #0
   4662c:	tst	r1, #7
   46630:	movne	r2, #0
   46634:	cmp	r2, #0
   46638:	beq	46900 <__assert_fail@plt+0x3430c>
   4663c:	ldr	ip, [r3]
   46640:	ldr	r1, [r4]
   46644:	ldr	r2, [r3, #4]
   46648:	ldr	r0, [r4, #4]
   4664c:	and	r1, r1, ip
   46650:	ldr	ip, [r4, #8]
   46654:	ldr	lr, [r4, #12]
   46658:	and	r2, r2, r0
   4665c:	stm	r4, {r1, r2}
   46660:	ldrd	r0, [r3, #8]
   46664:	and	r0, r0, ip
   46668:	and	r1, r1, lr
   4666c:	ldr	ip, [r4, #16]
   46670:	strd	r0, [r4, #8]
   46674:	ldr	r2, [r3, #16]
   46678:	ldr	r0, [r3, #20]
   4667c:	ldr	lr, [r4, #20]
   46680:	and	r2, r2, ip
   46684:	ldr	ip, [r4, #24]
   46688:	str	r2, [r4, #16]
   4668c:	ldr	r2, [r4, #28]
   46690:	and	r0, r0, lr
   46694:	str	r0, [r4, #20]
   46698:	ldr	r1, [r3, #24]
   4669c:	ldr	r3, [r3, #28]
   466a0:	and	r1, r1, ip
   466a4:	and	r3, r3, r2
   466a8:	str	r1, [r4, #24]
   466ac:	str	r3, [r4, #28]
   466b0:	ldr	r2, [r5, #64]	; 0x40
   466b4:	mov	r7, #0
   466b8:	str	r7, [sp, #28]
   466bc:	cmp	r2, #31
   466c0:	beq	469c4 <__assert_fail@plt+0x343d0>
   466c4:	ldr	r0, [r5, #56]	; 0x38
   466c8:	lsl	r3, r2, #5
   466cc:	add	r2, r2, #1
   466d0:	add	r9, r3, #4
   466d4:	mov	r1, #3
   466d8:	add	r8, r0, r3
   466dc:	str	r4, [sp, #24]
   466e0:	add	r3, r3, #16
   466e4:	str	r2, [r5, #64]	; 0x40
   466e8:	mov	r7, #0
   466ec:	strb	r1, [sp, #28]
   466f0:	add	r1, r0, r3
   466f4:	mvn	ip, #0
   466f8:	ldrd	r2, [sp, #24]
   466fc:	adds	r9, r0, r9
   46700:	str	r7, [r8, #4]
   46704:	str	r7, [r8, #8]
   46708:	str	r7, [r8, #12]
   4670c:	strd	r2, [r8, #24]
   46710:	ldrb	r3, [r1, #14]
   46714:	bic	r3, r3, #12
   46718:	strb	r3, [r1, #14]
   4671c:	str	r7, [r8, #16]
   46720:	str	r7, [r8, #20]
   46724:	str	ip, [r8, #32]
   46728:	beq	46870 <__assert_fail@plt+0x3427c>
   4672c:	ldr	r3, [r5, #92]	; 0x5c
   46730:	cmp	r3, #1
   46734:	ble	468b4 <__assert_fail@plt+0x342c0>
   46738:	ldrb	r2, [r5, #88]	; 0x58
   4673c:	ldr	r3, [r5, #64]	; 0x40
   46740:	orr	r2, r2, #2
   46744:	cmp	r3, #31
   46748:	strb	r2, [r5, #88]	; 0x58
   4674c:	beq	469f0 <__assert_fail@plt+0x343fc>
   46750:	lsl	r7, r3, #5
   46754:	add	r3, r3, #1
   46758:	add	fp, r7, #4
   4675c:	mov	r2, #6
   46760:	str	r6, [sp, #24]
   46764:	add	sl, r0, r7
   46768:	str	r3, [r5, #64]	; 0x40
   4676c:	add	r7, r7, #16
   46770:	mvn	ip, #0
   46774:	strb	r2, [sp, #28]
   46778:	add	r1, r0, r7
   4677c:	mov	r7, #0
   46780:	ldrd	r2, [sp, #24]
   46784:	adds	fp, r0, fp
   46788:	str	r7, [sl, #4]
   4678c:	str	r7, [sl, #8]
   46790:	str	r7, [sl, #12]
   46794:	strd	r2, [sl, #24]
   46798:	ldrb	r3, [r1, #14]
   4679c:	bic	r3, r3, #12
   467a0:	strb	r3, [r1, #14]
   467a4:	str	r7, [sl, #16]
   467a8:	str	r7, [sl, #20]
   467ac:	str	ip, [sl, #32]
   467b0:	beq	46870 <__assert_fail@plt+0x3427c>
   467b4:	ldr	r1, [r5, #64]	; 0x40
   467b8:	mov	r2, #0
   467bc:	mov	r3, #0
   467c0:	strd	r2, [sp, #32]
   467c4:	cmp	r1, #31
   467c8:	beq	46a18 <__assert_fail@plt+0x34424>
   467cc:	lsl	r7, r1, #5
   467d0:	add	r1, r1, #1
   467d4:	add	r4, r7, #4
   467d8:	mov	r3, #10
   467dc:	mov	ip, #0
   467e0:	str	r1, [r5, #64]	; 0x40
   467e4:	add	r1, r0, r7
   467e8:	add	r7, r7, #16
   467ec:	strb	r3, [sp, #36]	; 0x24
   467f0:	add	r4, r0, r4
   467f4:	add	r0, r0, r7
   467f8:	ldrd	r2, [sp, #32]
   467fc:	mvn	lr, #0
   46800:	str	ip, [r1, #4]
   46804:	str	r9, [r1, #8]
   46808:	str	fp, [r1, #12]
   4680c:	strd	r2, [r1, #24]
   46810:	ldrb	r3, [r0, #14]
   46814:	bic	r3, r3, #12
   46818:	strb	r3, [r0, #14]
   4681c:	str	ip, [r1, #16]
   46820:	str	ip, [r1, #20]
   46824:	str	lr, [r1, #32]
   46828:	str	r4, [r8, #4]
   4682c:	str	r4, [sl, #4]
   46830:	mov	r0, r4
   46834:	add	sp, sp, #44	; 0x2c
   46838:	ldrd	r4, [sp]
   4683c:	ldrd	r6, [sp, #8]
   46840:	ldrd	r8, [sp, #16]
   46844:	ldrd	sl, [sp, #24]
   46848:	add	sp, sp, #32
   4684c:	pop	{pc}		; (ldr pc, [sp], #4)
   46850:	add	r3, r3, #6
   46854:	ldr	r2, [r4, r3, lsl #2]
   46858:	mvn	r2, r2
   4685c:	str	r2, [r4, r3, lsl #2]
   46860:	ldr	r3, [r5, #92]	; 0x5c
   46864:	cmp	r3, #1
   46868:	bgt	4660c <__assert_fail@plt+0x34018>
   4686c:	b	466b0 <__assert_fail@plt+0x340bc>
   46870:	mov	r0, r4
   46874:	mov	r4, #0
   46878:	bl	38b10 <__assert_fail@plt+0x2651c>
   4687c:	ldr	r0, [r6]
   46880:	bl	38b10 <__assert_fail@plt+0x2651c>
   46884:	ldr	r0, [r6, #4]
   46888:	bl	38b10 <__assert_fail@plt+0x2651c>
   4688c:	ldr	r0, [r6, #8]
   46890:	bl	38b10 <__assert_fail@plt+0x2651c>
   46894:	ldr	r0, [r6, #12]
   46898:	bl	38b10 <__assert_fail@plt+0x2651c>
   4689c:	mov	r0, r6
   468a0:	bl	38b10 <__assert_fail@plt+0x2651c>
   468a4:	ldr	r2, [sp, #84]	; 0x54
   468a8:	mov	r3, #12
   468ac:	str	r3, [r2]
   468b0:	b	46830 <__assert_fail@plt+0x3423c>
   468b4:	ldr	r0, [r6]
   468b8:	mov	r4, r9
   468bc:	bl	38b10 <__assert_fail@plt+0x2651c>
   468c0:	ldr	r0, [r6, #4]
   468c4:	bl	38b10 <__assert_fail@plt+0x2651c>
   468c8:	ldr	r0, [r6, #8]
   468cc:	bl	38b10 <__assert_fail@plt+0x2651c>
   468d0:	ldr	r0, [r6, #12]
   468d4:	bl	38b10 <__assert_fail@plt+0x2651c>
   468d8:	mov	r0, r6
   468dc:	bl	38b10 <__assert_fail@plt+0x2651c>
   468e0:	b	46830 <__assert_fail@plt+0x3423c>
   468e4:	mov	r0, r4
   468e8:	mov	r4, r6
   468ec:	bl	38b10 <__assert_fail@plt+0x2651c>
   468f0:	ldr	r2, [sp, #84]	; 0x54
   468f4:	mov	r3, #12
   468f8:	str	r3, [r2]
   468fc:	b	46830 <__assert_fail@plt+0x3423c>
   46900:	ldr	r1, [r3]
   46904:	ldr	r2, [r4]
   46908:	ldr	r0, [r4, #4]
   4690c:	and	r2, r2, r1
   46910:	ldr	r1, [r4, #8]
   46914:	str	r2, [r4]
   46918:	ldr	ip, [r3, #4]
   4691c:	ldr	r2, [r4, #12]
   46920:	and	r0, r0, ip
   46924:	ldr	ip, [r4, #16]
   46928:	str	r0, [r4, #4]
   4692c:	ldr	lr, [r3, #8]
   46930:	ldr	r0, [r4, #20]
   46934:	and	r1, r1, lr
   46938:	str	r1, [r4, #8]
   4693c:	ldr	lr, [r3, #12]
   46940:	ldr	r1, [r4, #24]
   46944:	and	r2, r2, lr
   46948:	str	r2, [r4, #12]
   4694c:	ldr	lr, [r3, #16]
   46950:	ldr	r2, [r4, #28]
   46954:	and	ip, ip, lr
   46958:	str	ip, [r4, #16]
   4695c:	ldr	ip, [r3, #20]
   46960:	and	r0, r0, ip
   46964:	str	r0, [r4, #20]
   46968:	ldr	r0, [r3, #24]
   4696c:	and	r1, r1, r0
   46970:	str	r1, [r4, #24]
   46974:	ldr	r3, [r3, #28]
   46978:	and	r3, r3, r2
   4697c:	str	r3, [r4, #28]
   46980:	b	466b0 <__assert_fail@plt+0x340bc>
   46984:	mov	r0, r4
   46988:	mov	r4, r9
   4698c:	bl	38b10 <__assert_fail@plt+0x2651c>
   46990:	ldr	r0, [r6]
   46994:	bl	38b10 <__assert_fail@plt+0x2651c>
   46998:	ldr	r0, [r6, #4]
   4699c:	bl	38b10 <__assert_fail@plt+0x2651c>
   469a0:	ldr	r0, [r6, #8]
   469a4:	bl	38b10 <__assert_fail@plt+0x2651c>
   469a8:	ldr	r0, [r6, #12]
   469ac:	bl	38b10 <__assert_fail@plt+0x2651c>
   469b0:	mov	r0, r6
   469b4:	bl	38b10 <__assert_fail@plt+0x2651c>
   469b8:	ldr	r3, [sp, #84]	; 0x54
   469bc:	str	sl, [r3]
   469c0:	b	46830 <__assert_fail@plt+0x3423c>
   469c4:	mov	r0, #996	; 0x3e4
   469c8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   469cc:	cmp	r0, #0
   469d0:	beq	46870 <__assert_fail@plt+0x3427c>
   469d4:	ldr	r1, [r5, #56]	; 0x38
   469d8:	mov	r3, r7
   469dc:	mov	r2, #1
   469e0:	mov	r9, #4
   469e4:	str	r0, [r5, #56]	; 0x38
   469e8:	str	r1, [r0]
   469ec:	b	466d4 <__assert_fail@plt+0x340e0>
   469f0:	mov	r0, #996	; 0x3e4
   469f4:	bl	3b49c <__assert_fail@plt+0x28ea8>
   469f8:	cmp	r0, #0
   469fc:	beq	46870 <__assert_fail@plt+0x3427c>
   46a00:	ldr	r2, [r5, #56]	; 0x38
   46a04:	mov	r3, #1
   46a08:	mov	fp, #4
   46a0c:	str	r0, [r5, #56]	; 0x38
   46a10:	str	r2, [r0]
   46a14:	b	4675c <__assert_fail@plt+0x34168>
   46a18:	mov	r0, #996	; 0x3e4
   46a1c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   46a20:	cmp	r0, #0
   46a24:	beq	46a40 <__assert_fail@plt+0x3444c>
   46a28:	ldr	r3, [r5, #56]	; 0x38
   46a2c:	mov	r4, #4
   46a30:	mov	r1, #1
   46a34:	str	r0, [r5, #56]	; 0x38
   46a38:	str	r3, [r0]
   46a3c:	b	467d8 <__assert_fail@plt+0x341e4>
   46a40:	mov	r4, r0
   46a44:	b	46830 <__assert_fail@plt+0x3423c>
   46a48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   46a4c:	mov	r4, r0
   46a50:	mov	r5, r3
   46a54:	strd	r6, [sp, #8]
   46a58:	strd	r8, [sp, #16]
   46a5c:	strd	sl, [sp, #24]
   46a60:	str	lr, [sp, #32]
   46a64:	sub	sp, sp, #428	; 0x1ac
   46a68:	ldr	sl, [r0]
   46a6c:	str	r0, [sp, #32]
   46a70:	add	r0, sp, #144	; 0x90
   46a74:	str	r1, [sp, #56]	; 0x38
   46a78:	mov	r1, #0
   46a7c:	str	r2, [sp, #72]	; 0x48
   46a80:	mov	r2, #136	; 0x88
   46a84:	ldr	r6, [sp, #464]	; 0x1d0
   46a88:	bl	12378 <memset@plt>
   46a8c:	ldr	r2, [r4, #16]
   46a90:	cmp	r2, #0
   46a94:	str	r2, [sp, #48]	; 0x30
   46a98:	str	sl, [sp, #228]	; 0xe4
   46a9c:	beq	46ab8 <__assert_fail@plt+0x344c4>
   46aa0:	ldrb	r2, [r4, #28]
   46aa4:	subs	r3, r5, r6
   46aa8:	movne	r3, #1
   46aac:	ands	r3, r3, r2, lsr #3
   46ab0:	streq	r3, [sp, #48]	; 0x30
   46ab4:	bne	46e5c <__assert_fail@plt+0x34868>
   46ab8:	ldr	r3, [sp, #32]
   46abc:	ldr	r2, [sp, #472]	; 0x1d8
   46ac0:	ldr	r3, [r3, #24]
   46ac4:	cmp	r3, r2
   46ac8:	movcs	r3, #0
   46acc:	strcs	r3, [sp, #108]	; 0x6c
   46ad0:	bcs	46af0 <__assert_fail@plt+0x344fc>
   46ad4:	sub	r2, r2, #1
   46ad8:	sub	r1, r3, r2
   46adc:	sub	r3, r2, r3
   46ae0:	str	r3, [sp, #108]	; 0x6c
   46ae4:	ldr	r3, [sp, #472]	; 0x1d8
   46ae8:	add	r3, r3, r1
   46aec:	str	r3, [sp, #472]	; 0x1d8
   46af0:	ldr	ip, [sp, #32]
   46af4:	ldr	r3, [ip, #8]
   46af8:	cmp	r3, #0
   46afc:	beq	47794 <__assert_fail@plt+0x351a0>
   46b00:	ldr	r3, [sl, #36]	; 0x24
   46b04:	cmp	r3, #0
   46b08:	beq	47794 <__assert_fail@plt+0x351a0>
   46b0c:	ldr	r2, [sl, #40]	; 0x28
   46b10:	cmp	r2, #0
   46b14:	beq	47794 <__assert_fail@plt+0x351a0>
   46b18:	ldr	r0, [sl, #44]	; 0x2c
   46b1c:	cmp	r0, #0
   46b20:	beq	47794 <__assert_fail@plt+0x351a0>
   46b24:	ldr	r1, [sl, #48]	; 0x30
   46b28:	cmp	r1, #0
   46b2c:	beq	47794 <__assert_fail@plt+0x351a0>
   46b30:	ldr	r3, [r3, #8]
   46b34:	cmp	r3, #0
   46b38:	bne	46b7c <__assert_fail@plt+0x34588>
   46b3c:	ldr	r3, [r2, #8]
   46b40:	cmp	r3, #0
   46b44:	bne	46b7c <__assert_fail@plt+0x34588>
   46b48:	ldr	r3, [r0, #8]
   46b4c:	cmp	r3, #0
   46b50:	beq	46b60 <__assert_fail@plt+0x3456c>
   46b54:	ldrsb	r3, [ip, #28]
   46b58:	cmp	r3, #0
   46b5c:	blt	46b7c <__assert_fail@plt+0x34588>
   46b60:	adds	r6, r6, #0
   46b64:	movne	r6, #1
   46b68:	cmp	r5, #0
   46b6c:	moveq	r6, #0
   46b70:	cmp	r6, #0
   46b74:	bne	47794 <__assert_fail@plt+0x351a0>
   46b78:	mov	r5, r6
   46b7c:	ldr	r3, [sp, #472]	; 0x1d8
   46b80:	cmp	r3, #0
   46b84:	bne	46e4c <__assert_fail@plt+0x34858>
   46b88:	ldr	r3, [sl, #76]	; 0x4c
   46b8c:	adds	r3, r3, #0
   46b90:	movne	r3, #1
   46b94:	str	r3, [sp, #20]
   46b98:	str	r3, [sp, #60]	; 0x3c
   46b9c:	ldr	r8, [sp, #32]
   46ba0:	add	r0, sp, #144	; 0x90
   46ba4:	ldr	r2, [sp, #56]	; 0x38
   46ba8:	ldr	r3, [sl, #8]
   46bac:	ldr	ip, [r8, #12]
   46bb0:	str	r2, [sp, #144]	; 0x90
   46bb4:	ldr	lr, [sl, #92]	; 0x5c
   46bb8:	add	r3, r3, #1
   46bbc:	ldrb	r2, [sl, #88]	; 0x58
   46bc0:	and	r4, ip, #4194304	; 0x400000
   46bc4:	ubfx	ip, ip, #22, #1
   46bc8:	ldr	r8, [r8, #20]
   46bcc:	cmp	r3, lr
   46bd0:	ldr	r7, [sp, #72]	; 0x48
   46bd4:	movlt	r3, lr
   46bd8:	str	r8, [sp, #80]	; 0x50
   46bdc:	strb	ip, [sp, #216]	; 0xd8
   46be0:	ubfx	ip, r2, #2, #1
   46be4:	add	r1, r7, #1
   46be8:	ubfx	r2, r2, #3, #1
   46bec:	str	lr, [sp, #224]	; 0xe0
   46bf0:	orrs	lr, r8, r4
   46bf4:	str	r7, [sp, #188]	; 0xbc
   46bf8:	movne	lr, #1
   46bfc:	moveq	lr, #0
   46c00:	str	r7, [sp, #192]	; 0xc0
   46c04:	cmp	r3, r1
   46c08:	str	r7, [sp, #196]	; 0xc4
   46c0c:	movlt	r1, r3
   46c10:	str	r7, [sp, #200]	; 0xc8
   46c14:	str	r8, [sp, #208]	; 0xd0
   46c18:	strb	ip, [sp, #217]	; 0xd9
   46c1c:	strb	r2, [sp, #218]	; 0xda
   46c20:	strb	lr, [sp, #219]	; 0xdb
   46c24:	bl	3c57c <__assert_fail@plt+0x29f88>
   46c28:	subs	r3, r0, #0
   46c2c:	str	r3, [sp, #36]	; 0x24
   46c30:	bne	47314 <__assert_fail@plt+0x34d20>
   46c34:	ldrb	r3, [sl, #88]	; 0x58
   46c38:	add	r1, sl, #96	; 0x60
   46c3c:	ldrb	r2, [sp, #219]	; 0xdb
   46c40:	str	r1, [sp, #212]	; 0xd4
   46c44:	ubfx	r3, r3, #4, #1
   46c48:	cmp	r2, #0
   46c4c:	strb	r3, [sp, #222]	; 0xde
   46c50:	bne	46c68 <__assert_fail@plt+0x34674>
   46c54:	ldr	r3, [sl, #92]	; 0x5c
   46c58:	ldr	r2, [sp, #56]	; 0x38
   46c5c:	cmp	r3, #1
   46c60:	str	r2, [sp, #148]	; 0x94
   46c64:	ble	478c0 <__assert_fail@plt+0x352cc>
   46c68:	mov	r2, #0
   46c6c:	ldr	r3, [sp, #32]
   46c70:	mvn	r1, #0
   46c74:	str	r2, [sp, #172]	; 0xac
   46c78:	str	r2, [sp, #176]	; 0xb0
   46c7c:	ldr	r2, [sp, #468]	; 0x1d4
   46c80:	ldrb	r3, [r3, #28]
   46c84:	str	r2, [sp, #196]	; 0xc4
   46c88:	str	r2, [sp, #200]	; 0xc8
   46c8c:	ubfx	r3, r3, #7, #1
   46c90:	strb	r3, [sp, #221]	; 0xdd
   46c94:	ldr	r7, [sl, #76]	; 0x4c
   46c98:	str	r1, [sp, #236]	; 0xec
   46c9c:	ldr	r3, [sp, #480]	; 0x1e0
   46ca0:	lsl	r4, r7, #1
   46ca4:	cmp	r4, #0
   46ca8:	str	r3, [sp, #232]	; 0xe8
   46cac:	ble	46cec <__assert_fail@plt+0x346f8>
   46cb0:	movw	r3, #43690	; 0xaaaa
   46cb4:	movt	r3, #2730	; 0xaaa
   46cb8:	cmp	r4, r3
   46cbc:	bgt	47bc8 <__assert_fail@plt+0x355d4>
   46cc0:	add	r0, r4, r7, lsl #2
   46cc4:	lsl	r0, r0, #3
   46cc8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   46ccc:	str	r0, [sp, #260]	; 0x104
   46cd0:	lsl	r0, r7, #3
   46cd4:	bl	3b49c <__assert_fail@plt+0x28ea8>
   46cd8:	ldr	r3, [sp, #260]	; 0x104
   46cdc:	str	r0, [sp, #276]	; 0x114
   46ce0:	cmp	r0, #0
   46ce4:	cmpne	r3, #0
   46ce8:	beq	47bc8 <__assert_fail@plt+0x355d4>
   46cec:	ldr	r2, [sp, #472]	; 0x1d8
   46cf0:	mov	r3, #1
   46cf4:	str	r4, [sp, #256]	; 0x100
   46cf8:	str	r3, [sp, #264]	; 0x108
   46cfc:	str	r4, [sp, #272]	; 0x110
   46d00:	cmp	r2, r3
   46d04:	bls	47b5c <__assert_fail@plt+0x35568>
   46d08:	ldr	r0, [sp, #180]	; 0xb4
   46d0c:	cmn	r0, #-1073741822	; 0xc0000002
   46d10:	bhi	47bc8 <__assert_fail@plt+0x355d4>
   46d14:	add	r0, r0, #1
   46d18:	lsl	r0, r0, #2
   46d1c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   46d20:	cmp	r0, #0
   46d24:	mov	r4, r0
   46d28:	str	r0, [sp, #244]	; 0xf4
   46d2c:	beq	477c0 <__assert_fail@plt+0x351cc>
   46d30:	ldr	r3, [sp, #480]	; 0x1e0
   46d34:	str	r5, [sp, #112]	; 0x70
   46d38:	ldr	r2, [sl, #92]	; 0x5c
   46d3c:	tst	r3, #1
   46d40:	movne	r3, #4
   46d44:	moveq	r3, #6
   46d48:	cmp	r5, r6
   46d4c:	str	r2, [sp, #84]	; 0x54
   46d50:	str	r3, [sp, #204]	; 0xcc
   46d54:	movge	r3, r5
   46d58:	movlt	r3, r6
   46d5c:	mvngt	r2, #0
   46d60:	movle	r2, #1
   46d64:	str	r3, [sp, #64]	; 0x40
   46d68:	ldr	r3, [sp, #48]	; 0x30
   46d6c:	str	r2, [sp, #96]	; 0x60
   46d70:	movlt	r2, r5
   46d74:	movge	r2, r6
   46d78:	str	r2, [sp, #76]	; 0x4c
   46d7c:	cmp	r3, #0
   46d80:	beq	47bd8 <__assert_fail@plt+0x355e4>
   46d84:	ldr	r3, [sp, #84]	; 0x54
   46d88:	cmp	r3, #1
   46d8c:	moveq	r3, #4
   46d90:	beq	46db0 <__assert_fail@plt+0x347bc>
   46d94:	ldr	r3, [sp, #32]
   46d98:	ldr	r2, [sp, #80]	; 0x50
   46d9c:	ldr	r3, [r3, #12]
   46da0:	and	r3, r3, #4194304	; 0x400000
   46da4:	orrs	r3, r2, r3
   46da8:	moveq	r3, #4
   46dac:	movne	r3, #0
   46db0:	ldr	r2, [sp, #36]	; 0x24
   46db4:	cmp	r5, r6
   46db8:	movle	r2, #2
   46dbc:	ldr	r1, [sp, #80]	; 0x50
   46dc0:	cmp	r1, #0
   46dc4:	orrne	r3, r3, #1
   46dc8:	orr	r3, r3, r2
   46dcc:	ldr	r1, [sp, #64]	; 0x40
   46dd0:	ldr	r2, [sp, #76]	; 0x4c
   46dd4:	cmp	r5, r2
   46dd8:	movge	r2, #0
   46ddc:	movlt	r2, #1
   46de0:	cmp	r5, r1
   46de4:	orrgt	r2, r2, #1
   46de8:	cmp	r2, #0
   46dec:	bne	4730c <__assert_fail@plt+0x34d18>
   46df0:	add	r2, sp, #424	; 0x1a8
   46df4:	cmp	r5, r6
   46df8:	str	sl, [sp, #68]	; 0x44
   46dfc:	sub	r3, r3, #4
   46e00:	suble	r2, r2, #312	; 0x138
   46e04:	movgt	r2, #0
   46e08:	str	r3, [sp, #88]	; 0x58
   46e0c:	adds	r3, r2, #0
   46e10:	movne	r3, #1
   46e14:	str	r2, [sp, #100]	; 0x64
   46e18:	str	r3, [sp, #104]	; 0x68
   46e1c:	mov	r3, #65280	; 0xff00
   46e20:	movt	r3, #3
   46e24:	str	r3, [sp, #52]	; 0x34
   46e28:	ldr	r3, [sp, #88]	; 0x58
   46e2c:	cmp	r3, #4
   46e30:	ldrls	pc, [pc, r3, lsl #2]
   46e34:	b	47bf8 <__assert_fail@plt+0x35604>
   46e38:	andeq	r7, r4, r4, lsl #7
   46e3c:	andeq	r7, r4, r4, lsl #7
   46e40:	andeq	r7, r4, ip, lsl r3
   46e44:	andeq	r7, r4, r8, asr r2
   46e48:	andeq	r6, r4, r4, ror lr
   46e4c:	mov	r3, #1
   46e50:	str	r3, [sp, #20]
   46e54:	str	r3, [sp, #60]	; 0x3c
   46e58:	b	46b9c <__assert_fail@plt+0x345a8>
   46e5c:	ldr	r3, [sp, #48]	; 0x30
   46e60:	tst	r2, #1
   46e64:	movne	r3, #0
   46e68:	str	r3, [sp, #48]	; 0x30
   46e6c:	b	46ab8 <__assert_fail@plt+0x344c4>
   46e70:	str	r5, [sp, #112]	; 0x70
   46e74:	mov	r1, r5
   46e78:	add	r0, sp, #144	; 0x90
   46e7c:	ldr	r2, [sp, #480]	; 0x1e0
   46e80:	bl	3dd60 <__assert_fail@plt+0x2b76c>
   46e84:	subs	r3, r0, #0
   46e88:	str	r3, [sp, #36]	; 0x24
   46e8c:	bne	47c2c <__assert_fail@plt+0x35638>
   46e90:	ldr	r3, [sp, #84]	; 0x54
   46e94:	cmp	r3, #1
   46e98:	beq	46eb8 <__assert_fail@plt+0x348c4>
   46e9c:	ldr	r3, [sp, #172]	; 0xac
   46ea0:	cmp	r3, #0
   46ea4:	beq	46eb8 <__assert_fail@plt+0x348c4>
   46ea8:	ldr	r3, [sp, #152]	; 0x98
   46eac:	ldr	r3, [r3]
   46eb0:	cmn	r3, #1
   46eb4:	beq	47760 <__assert_fail@plt+0x3516c>
   46eb8:	ldr	r4, [sp, #228]	; 0xe4
   46ebc:	mov	r3, #0
   46ec0:	mov	r0, #0
   46ec4:	mov	r1, #0
   46ec8:	ldr	sl, [r4, #36]	; 0x24
   46ecc:	str	r3, [sp, #120]	; 0x78
   46ed0:	strd	r0, [sp, #248]	; 0xf8
   46ed4:	str	r3, [sp, #264]	; 0x108
   46ed8:	ldr	r3, [sp, #184]	; 0xb8
   46edc:	mov	r2, r3
   46ee0:	ldrsb	r3, [sl, #52]	; 0x34
   46ee4:	str	r2, [sp, #12]
   46ee8:	cmp	r3, #0
   46eec:	bge	46f2c <__assert_fail@plt+0x34938>
   46ef0:	sub	r1, r2, #1
   46ef4:	add	r0, sp, #144	; 0x90
   46ef8:	ldr	r2, [sp, #232]	; 0xe8
   46efc:	bl	3d850 <__assert_fail@plt+0x2b25c>
   46f00:	tst	r0, #1
   46f04:	bne	47b88 <__assert_fail@plt+0x35594>
   46f08:	cmp	r0, #0
   46f0c:	beq	46f2c <__assert_fail@plt+0x34938>
   46f10:	and	r3, r0, #6
   46f14:	cmp	r3, #6
   46f18:	beq	47d6c <__assert_fail@plt+0x35778>
   46f1c:	tst	r0, #2
   46f20:	bne	47c6c <__assert_fail@plt+0x35678>
   46f24:	tst	r0, #4
   46f28:	bne	47c94 <__assert_fail@plt+0x356a0>
   46f2c:	ldr	r3, [sp, #244]	; 0xf4
   46f30:	cmp	r3, #0
   46f34:	beq	4788c <__assert_fail@plt+0x35298>
   46f38:	ldr	r2, [r4, #76]	; 0x4c
   46f3c:	ldr	r1, [sp, #12]
   46f40:	cmp	r2, #0
   46f44:	str	sl, [r3, r1, lsl #2]
   46f48:	bne	47d28 <__assert_fail@plt+0x35734>
   46f4c:	ldrb	r3, [sl, #52]	; 0x34
   46f50:	ldr	r2, [sp, #104]	; 0x68
   46f54:	str	r2, [sp, #16]
   46f58:	ubfx	r3, r3, #4, #1
   46f5c:	cmp	r3, #0
   46f60:	mvneq	fp, #0
   46f64:	streq	r3, [sp, #28]
   46f68:	bne	47c38 <__assert_fail@plt+0x35644>
   46f6c:	ldr	r3, [sp, #100]	; 0x64
   46f70:	str	fp, [sp, #24]
   46f74:	ldr	r4, [sp, #184]	; 0xb8
   46f78:	str	r3, [sp, #40]	; 0x28
   46f7c:	b	46fdc <__assert_fail@plt+0x349e8>
   46f80:	ldrb	r3, [r5, #52]	; 0x34
   46f84:	ldr	r2, [sp, #16]
   46f88:	ldr	r1, [sp, #12]
   46f8c:	ldr	r4, [sp, #184]	; 0xb8
   46f90:	cmp	sl, r5
   46f94:	movne	r2, #0
   46f98:	andeq	r2, r2, #1
   46f9c:	cmp	r2, #0
   46fa0:	movne	r1, r8
   46fa4:	tst	r3, #16
   46fa8:	str	r1, [sp, #12]
   46fac:	str	r2, [sp, #16]
   46fb0:	beq	46fd8 <__assert_fail@plt+0x349e4>
   46fb4:	tst	r3, #128	; 0x80
   46fb8:	bne	4743c <__assert_fail@plt+0x34e48>
   46fbc:	ldr	r3, [sp, #20]
   46fc0:	cmp	r3, #0
   46fc4:	beq	47c64 <__assert_fail@plt+0x35670>
   46fc8:	str	r4, [sp, #24]
   46fcc:	str	r3, [sp, #28]
   46fd0:	mov	r3, #0
   46fd4:	str	r3, [sp, #40]	; 0x28
   46fd8:	mov	sl, r5
   46fdc:	ldr	r3, [sp, #200]	; 0xc8
   46fe0:	cmp	r3, r4
   46fe4:	ble	47434 <__assert_fail@plt+0x34e40>
   46fe8:	ldr	r3, [sp, #180]	; 0xb4
   46fec:	add	r8, r4, #1
   46ff0:	cmp	r8, r3
   46ff4:	bge	47458 <__assert_fail@plt+0x34e64>
   46ff8:	ldr	r3, [sp, #172]	; 0xac
   46ffc:	cmp	r8, r3
   47000:	bge	47734 <__assert_fail@plt+0x35140>
   47004:	ldrb	r3, [sl, #52]	; 0x34
   47008:	tst	r3, #32
   4700c:	bne	4748c <__assert_fail@plt+0x34e98>
   47010:	ldr	r3, [sp, #148]	; 0x94
   47014:	add	r2, r4, #1
   47018:	str	r2, [sp, #184]	; 0xb8
   4701c:	ldrb	r4, [r3, r4]
   47020:	ldr	r3, [sl, #44]	; 0x2c
   47024:	cmp	r3, #0
   47028:	beq	47704 <__assert_fail@plt+0x35110>
   4702c:	ldr	r5, [r3, r4, lsl #2]
   47030:	ldr	r3, [sp, #244]	; 0xf4
   47034:	cmp	r3, #0
   47038:	beq	47050 <__assert_fail@plt+0x34a5c>
   4703c:	mov	r2, r5
   47040:	add	r1, sp, #144	; 0x90
   47044:	add	r0, sp, #120	; 0x78
   47048:	bl	46300 <__assert_fail@plt+0x33d0c>
   4704c:	mov	r5, r0
   47050:	cmp	r5, #0
   47054:	bne	46f80 <__assert_fail@plt+0x3498c>
   47058:	ldr	r3, [sp, #120]	; 0x78
   4705c:	ldr	r4, [sp, #244]	; 0xf4
   47060:	cmp	r3, #0
   47064:	bne	477bc <__assert_fail@plt+0x351c8>
   47068:	cmp	r4, #0
   4706c:	beq	47434 <__assert_fail@plt+0x34e40>
   47070:	ldr	r2, [sp, #28]
   47074:	ldr	r3, [sp, #60]	; 0x3c
   47078:	eor	r3, r3, #1
   4707c:	tst	r2, r3
   47080:	bne	47434 <__assert_fail@plt+0x34e40>
   47084:	ldr	r3, [sp, #184]	; 0xb8
   47088:	mov	r1, #0
   4708c:	ldr	r0, [sp, #248]	; 0xf8
   47090:	add	r4, r4, r3, lsl #2
   47094:	b	470ac <__assert_fail@plt+0x34ab8>
   47098:	ldr	ip, [r4, #4]!
   4709c:	mov	r3, r2
   470a0:	mov	r1, #1
   470a4:	cmp	ip, #0
   470a8:	bne	473f8 <__assert_fail@plt+0x34e04>
   470ac:	add	r2, r3, #1
   470b0:	cmp	r0, r2
   470b4:	bge	47098 <__assert_fail@plt+0x34aa4>
   470b8:	ldr	fp, [sp, #24]
   470bc:	cmp	r1, #0
   470c0:	strne	r3, [sp, #184]	; 0xb8
   470c4:	ldr	r2, [sp, #40]	; 0x28
   470c8:	cmp	r2, #0
   470cc:	beq	470e0 <__assert_fail@plt+0x34aec>
   470d0:	ldr	r3, [r2]
   470d4:	ldr	r1, [sp, #12]
   470d8:	add	r3, r3, r1
   470dc:	str	r3, [r2]
   470e0:	cmn	fp, #1
   470e4:	beq	47754 <__assert_fail@plt+0x35160>
   470e8:	cmn	fp, #2
   470ec:	ldr	r4, [sp, #244]	; 0xf4
   470f0:	beq	477bc <__assert_fail@plt+0x351c8>
   470f4:	ldr	r3, [sp, #32]
   470f8:	str	fp, [sp, #236]	; 0xec
   470fc:	ldrb	r3, [r3, #28]
   47100:	tst	r3, #16
   47104:	bne	47830 <__assert_fail@plt+0x3523c>
   47108:	ldr	r2, [sp, #472]	; 0x1d8
   4710c:	cmp	r2, #1
   47110:	bls	4789c <__assert_fail@plt+0x352a8>
   47114:	mov	r2, fp
   47118:	add	r0, sp, #144	; 0x90
   4711c:	ldr	r1, [r4, fp, lsl #2]
   47120:	bl	3daa0 <__assert_fail@plt+0x2b4ac>
   47124:	ldr	r3, [sp, #68]	; 0x44
   47128:	ldrb	r3, [r3, #88]	; 0x58
   4712c:	str	r0, [sp, #240]	; 0xf0
   47130:	tst	r3, #1
   47134:	bne	47148 <__assert_fail@plt+0x34b54>
   47138:	ldr	r3, [sp, #68]	; 0x44
   4713c:	ldr	r3, [r3, #76]	; 0x4c
   47140:	cmp	r3, #0
   47144:	beq	48b7c <__assert_fail@plt+0x36588>
   47148:	ldr	r3, [sp, #228]	; 0xe4
   4714c:	cmn	fp, #-1073741822	; 0xc0000002
   47150:	ldr	sl, [sp, #240]	; 0xf0
   47154:	str	r3, [sp, #12]
   47158:	bhi	477bc <__assert_fail@plt+0x351c8>
   4715c:	add	r5, fp, #1
   47160:	lsl	r4, r5, #2
   47164:	mov	r0, r4
   47168:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4716c:	subs	r9, r0, #0
   47170:	beq	47c74 <__assert_fail@plt+0x35680>
   47174:	ldr	r3, [sp, #12]
   47178:	ldr	r6, [r3, #76]	; 0x4c
   4717c:	cmp	r6, #0
   47180:	beq	47910 <__assert_fail@plt+0x3531c>
   47184:	mov	r0, r4
   47188:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4718c:	cmp	r0, #0
   47190:	mov	r6, r0
   47194:	str	r0, [sp, #24]
   47198:	beq	47da0 <__assert_fail@plt+0x357ac>
   4719c:	add	r4, sp, #296	; 0x128
   471a0:	mov	r8, #0
   471a4:	lsl	r7, r5, #2
   471a8:	mov	r1, #0
   471ac:	mov	r0, r6
   471b0:	mov	r2, r7
   471b4:	bl	12378 <memset@plt>
   471b8:	add	r1, sp, #280	; 0x118
   471bc:	add	r0, sp, #144	; 0x90
   471c0:	str	r9, [sp, #280]	; 0x118
   471c4:	str	r6, [sp, #284]	; 0x11c
   471c8:	str	sl, [sp, #288]	; 0x120
   471cc:	str	fp, [sp, #292]	; 0x124
   471d0:	str	r8, [r4]
   471d4:	str	r8, [r4, #4]
   471d8:	str	r8, [r4, #8]
   471dc:	bl	45608 <__assert_fail@plt+0x33014>
   471e0:	mov	r3, r0
   471e4:	ldr	r0, [sp, #304]	; 0x130
   471e8:	str	r3, [sp, #16]
   471ec:	bl	38b10 <__assert_fail@plt+0x2651c>
   471f0:	ldr	r3, [sp, #16]
   471f4:	cmp	r3, #0
   471f8:	bne	47d74 <__assert_fail@plt+0x35780>
   471fc:	ldr	r3, [r9]
   47200:	cmp	r3, #0
   47204:	bne	47dc8 <__assert_fail@plt+0x357d4>
   47208:	ldr	r3, [r6]
   4720c:	cmp	r3, #0
   47210:	bne	47dc8 <__assert_fail@plt+0x357d4>
   47214:	ldr	r3, [sp, #244]	; 0xf4
   47218:	sub	r7, r7, #4
   4721c:	add	r3, r3, r7
   47220:	subs	fp, fp, #1
   47224:	bcc	47ba8 <__assert_fail@plt+0x355b4>
   47228:	ldr	r1, [r3, #-4]!
   4722c:	cmp	r1, #0
   47230:	beq	47220 <__assert_fail@plt+0x34c2c>
   47234:	ldrb	r2, [r1, #52]	; 0x34
   47238:	tst	r2, #16
   4723c:	beq	47220 <__assert_fail@plt+0x34c2c>
   47240:	mov	r2, fp
   47244:	add	r0, sp, #144	; 0x90
   47248:	bl	3daa0 <__assert_fail@plt+0x2b4ac>
   4724c:	add	r5, fp, #1
   47250:	mov	sl, r0
   47254:	b	471a4 <__assert_fail@plt+0x34bb0>
   47258:	ldr	r3, [sp, #64]	; 0x40
   4725c:	cmp	r3, r5
   47260:	ble	472cc <__assert_fail@plt+0x34cd8>
   47264:	ldr	r3, [sp, #56]	; 0x38
   47268:	ldr	r1, [sp, #80]	; 0x50
   4726c:	ldrb	r2, [r3, r5]
   47270:	add	r3, r3, r5
   47274:	ldrb	r2, [r1, r2]
   47278:	ldr	r1, [sp, #48]	; 0x30
   4727c:	ldrb	r2, [r1, r2]
   47280:	cmp	r2, #0
   47284:	bne	46e74 <__assert_fail@plt+0x34880>
   47288:	ldr	r2, [sp, #56]	; 0x38
   4728c:	mov	ip, r1
   47290:	ldr	r1, [sp, #64]	; 0x40
   47294:	ldr	lr, [sp, #80]	; 0x50
   47298:	sub	r0, r2, #1
   4729c:	rsb	r2, r2, #1
   472a0:	add	r0, r0, r1
   472a4:	b	472bc <__assert_fail@plt+0x34cc8>
   472a8:	ldrb	r1, [r3, #1]!
   472ac:	ldrb	r1, [lr, r1]
   472b0:	ldrb	r1, [ip, r1]
   472b4:	cmp	r1, #0
   472b8:	bne	46e70 <__assert_fail@plt+0x3487c>
   472bc:	cmp	r0, r3
   472c0:	add	r5, r2, r3
   472c4:	bne	472a8 <__assert_fail@plt+0x34cb4>
   472c8:	str	r5, [sp, #112]	; 0x70
   472cc:	ldr	r3, [sp, #64]	; 0x40
   472d0:	cmp	r3, r5
   472d4:	bne	46e74 <__assert_fail@plt+0x34880>
   472d8:	ldr	r2, [sp, #72]	; 0x48
   472dc:	cmp	r2, r3
   472e0:	ldrgt	r2, [sp, #56]	; 0x38
   472e4:	movle	r3, #0
   472e8:	ldrbgt	r3, [r2, r3]
   472ec:	ldr	r2, [sp, #80]	; 0x50
   472f0:	cmp	r2, #0
   472f4:	ldrbne	r3, [r2, r3]
   472f8:	ldr	r2, [sp, #48]	; 0x30
   472fc:	ldrb	r3, [r2, r3]
   47300:	cmp	r3, #0
   47304:	bne	46e74 <__assert_fail@plt+0x34880>
   47308:	ldr	sl, [sp, #68]	; 0x44
   4730c:	mov	r3, #1
   47310:	str	r3, [sp, #36]	; 0x24
   47314:	ldr	r4, [sp, #244]	; 0xf4
   47318:	b	477c8 <__assert_fail@plt+0x351d4>
   4731c:	ldr	r3, [sp, #64]	; 0x40
   47320:	cmp	r3, r5
   47324:	ble	472cc <__assert_fail@plt+0x34cd8>
   47328:	ldr	r1, [sp, #48]	; 0x30
   4732c:	ldr	r3, [sp, #56]	; 0x38
   47330:	ldrb	r2, [r3, r5]
   47334:	add	r3, r3, r5
   47338:	ldrb	r2, [r1, r2]
   4733c:	cmp	r2, #0
   47340:	bne	46e74 <__assert_fail@plt+0x34880>
   47344:	ldr	r2, [sp, #56]	; 0x38
   47348:	mov	ip, r1
   4734c:	ldr	r1, [sp, #64]	; 0x40
   47350:	sub	r0, r2, #1
   47354:	rsb	r2, r2, #1
   47358:	add	r0, r0, r1
   4735c:	b	47370 <__assert_fail@plt+0x34d7c>
   47360:	ldrb	r1, [r3, #1]!
   47364:	ldrb	r1, [ip, r1]
   47368:	cmp	r1, #0
   4736c:	bne	46e70 <__assert_fail@plt+0x3487c>
   47370:	cmp	r0, r3
   47374:	add	r5, r2, r3
   47378:	bne	47360 <__assert_fail@plt+0x34d6c>
   4737c:	str	r5, [sp, #112]	; 0x70
   47380:	b	472cc <__assert_fail@plt+0x34cd8>
   47384:	ldr	r3, [sp, #76]	; 0x4c
   47388:	cmp	r3, r5
   4738c:	bgt	47308 <__assert_fail@plt+0x34d14>
   47390:	ldr	r3, [sp, #80]	; 0x50
   47394:	cmp	r3, #0
   47398:	beq	478c8 <__assert_fail@plt+0x352d4>
   4739c:	mov	ip, r3
   473a0:	mov	r1, #0
   473a4:	ldr	r0, [sp, #48]	; 0x30
   473a8:	mov	r3, r5
   473ac:	ldr	r6, [sp, #56]	; 0x38
   473b0:	ldr	lr, [sp, #72]	; 0x48
   473b4:	ldr	r4, [sp, #76]	; 0x4c
   473b8:	b	473cc <__assert_fail@plt+0x34dd8>
   473bc:	sub	r3, r3, #1
   473c0:	mov	r1, #1
   473c4:	cmp	r3, r4
   473c8:	blt	47be0 <__assert_fail@plt+0x355ec>
   473cc:	cmp	lr, r3
   473d0:	mov	r2, #0
   473d4:	ldrbgt	r2, [r6, r3]
   473d8:	ldrb	r2, [ip, r2]
   473dc:	ldrb	r2, [r0, r2]
   473e0:	cmp	r2, #0
   473e4:	beq	473bc <__assert_fail@plt+0x34dc8>
   473e8:	cmp	r1, #0
   473ec:	movne	r5, r3
   473f0:	strne	r3, [sp, #112]	; 0x70
   473f4:	b	46e74 <__assert_fail@plt+0x34880>
   473f8:	mov	r2, #0
   473fc:	add	r1, sp, #144	; 0x90
   47400:	str	r3, [sp, #184]	; 0xb8
   47404:	add	r0, sp, #120	; 0x78
   47408:	bl	46300 <__assert_fail@plt+0x33d0c>
   4740c:	ldr	r3, [sp, #120]	; 0x78
   47410:	cmp	r3, #0
   47414:	bne	47428 <__assert_fail@plt+0x34e34>
   47418:	cmp	r0, #0
   4741c:	bne	47c5c <__assert_fail@plt+0x35668>
   47420:	ldr	r4, [sp, #244]	; 0xf4
   47424:	b	47084 <__assert_fail@plt+0x34a90>
   47428:	cmp	r0, #0
   4742c:	mov	r5, r0
   47430:	bne	46f80 <__assert_fail@plt+0x3498c>
   47434:	ldr	fp, [sp, #24]
   47438:	b	470c4 <__assert_fail@plt+0x34ad0>
   4743c:	mov	r2, r4
   47440:	mov	r1, r5
   47444:	add	r0, sp, #144	; 0x90
   47448:	bl	3daa0 <__assert_fail@plt+0x2b4ac>
   4744c:	cmp	r0, #0
   47450:	beq	46fd8 <__assert_fail@plt+0x349e4>
   47454:	b	46fbc <__assert_fail@plt+0x349c8>
   47458:	ldr	r2, [sp, #192]	; 0xc0
   4745c:	cmp	r3, r2
   47460:	bge	46ff8 <__assert_fail@plt+0x34a04>
   47464:	add	r1, r4, #2
   47468:	add	r0, sp, #144	; 0x90
   4746c:	bl	41010 <__assert_fail@plt+0x2ea1c>
   47470:	cmp	r0, #0
   47474:	str	r0, [sp, #120]	; 0x78
   47478:	bne	47b94 <__assert_fail@plt+0x355a0>
   4747c:	ldrb	r3, [sl, #52]	; 0x34
   47480:	ldr	r4, [sp, #184]	; 0xb8
   47484:	tst	r3, #32
   47488:	beq	47010 <__assert_fail@plt+0x34a1c>
   4748c:	ldr	fp, [sl, #8]
   47490:	ldr	r6, [sp, #228]	; 0xe4
   47494:	cmp	fp, #0
   47498:	ble	47808 <__assert_fail@plt+0x35214>
   4749c:	add	r3, r6, #128	; 0x80
   474a0:	mov	r7, #0
   474a4:	str	r3, [sp, #44]	; 0x2c
   474a8:	str	r8, [sp, #92]	; 0x5c
   474ac:	b	47614 <__assert_fail@plt+0x35020>
   474b0:	tst	r0, #1
   474b4:	beq	47608 <__assert_fail@plt+0x35014>
   474b8:	tst	r5, #8
   474bc:	bne	47608 <__assert_fail@plt+0x35014>
   474c0:	tst	r5, #32
   474c4:	beq	474d0 <__assert_fail@plt+0x34edc>
   474c8:	tst	r0, #2
   474cc:	beq	47608 <__assert_fail@plt+0x35014>
   474d0:	tst	r5, #128	; 0x80
   474d4:	beq	474e0 <__assert_fail@plt+0x34eec>
   474d8:	tst	r0, #8
   474dc:	beq	47608 <__assert_fail@plt+0x35014>
   474e0:	mov	r0, r8
   474e4:	add	r3, sp, #144	; 0x90
   474e8:	str	r4, [sp]
   474ec:	mov	r2, r9
   474f0:	ldr	r1, [sp, #44]	; 0x2c
   474f4:	bl	40524 <__assert_fail@plt+0x2df30>
   474f8:	cmp	r0, #0
   474fc:	beq	47600 <__assert_fail@plt+0x3500c>
   47500:	ldr	r2, [sp, #180]	; 0xb4
   47504:	ldr	r3, [sp, #264]	; 0x108
   47508:	ldr	r4, [sp, #184]	; 0xb8
   4750c:	ldr	r5, [sp, #248]	; 0xf8
   47510:	cmp	r3, r0
   47514:	movlt	r3, r0
   47518:	add	r4, r0, r4
   4751c:	cmp	r4, r2
   47520:	str	r3, [sp, #264]	; 0x108
   47524:	blt	47670 <__assert_fail@plt+0x3507c>
   47528:	ldr	r3, [sp, #192]	; 0xc0
   4752c:	cmp	r2, r3
   47530:	bge	47670 <__assert_fail@plt+0x3507c>
   47534:	add	r1, r4, #1
   47538:	add	r0, sp, #144	; 0x90
   4753c:	bl	41010 <__assert_fail@plt+0x2ea1c>
   47540:	cmp	r0, #0
   47544:	bne	47814 <__assert_fail@plt+0x35220>
   47548:	cmp	r4, r5
   4754c:	ble	4768c <__assert_fail@plt+0x35098>
   47550:	ldr	r3, [sp, #244]	; 0xf4
   47554:	add	r0, r5, #1
   47558:	sub	r2, r4, r5
   4755c:	lsl	r2, r2, #2
   47560:	mov	r1, #0
   47564:	add	r0, r3, r0, lsl #2
   47568:	bl	12378 <memset@plt>
   4756c:	mov	r3, #0
   47570:	str	r3, [sp, #132]	; 0x84
   47574:	str	r4, [sp, #248]	; 0xf8
   47578:	ldr	r3, [r6, #12]
   4757c:	ldr	r5, [sp, #244]	; 0xf4
   47580:	ldr	r2, [r6, #24]
   47584:	ldr	r3, [r3, r9, lsl #2]
   47588:	ldr	r1, [r5, r4, lsl #2]
   4758c:	add	r3, r3, r3, lsl #1
   47590:	lsl	r3, r3, #2
   47594:	cmp	r1, #0
   47598:	add	ip, r2, r3
   4759c:	beq	47698 <__assert_fail@plt+0x350a4>
   475a0:	mov	r2, ip
   475a4:	add	r0, sp, #280	; 0x118
   475a8:	ldr	r1, [r1, #40]	; 0x28
   475ac:	bl	448f0 <__assert_fail@plt+0x322fc>
   475b0:	cmp	r0, #0
   475b4:	str	r0, [sp, #132]	; 0x84
   475b8:	bne	47814 <__assert_fail@plt+0x35220>
   475bc:	sub	r1, r4, #1
   475c0:	add	r0, sp, #144	; 0x90
   475c4:	ldr	r2, [sp, #232]	; 0xe8
   475c8:	bl	3d850 <__assert_fail@plt+0x2b25c>
   475cc:	ldr	r5, [sp, #244]	; 0xf4
   475d0:	mov	r3, r0
   475d4:	add	r2, sp, #280	; 0x118
   475d8:	mov	r1, r6
   475dc:	add	r0, sp, #132	; 0x84
   475e0:	bl	426a8 <__assert_fail@plt+0x300b4>
   475e4:	str	r0, [r5, r4, lsl #2]
   475e8:	ldr	r0, [sp, #288]	; 0x120
   475ec:	bl	38b10 <__assert_fail@plt+0x2651c>
   475f0:	ldr	r3, [sp, #244]	; 0xf4
   475f4:	ldr	r2, [r3, r4, lsl #2]
   475f8:	cmp	r2, #0
   475fc:	beq	476f0 <__assert_fail@plt+0x350fc>
   47600:	ldr	fp, [sl, #8]
   47604:	ldr	r4, [sp, #184]	; 0xb8
   47608:	add	r7, r7, #1
   4760c:	cmp	r7, fp
   47610:	bge	47804 <__assert_fail@plt+0x35210>
   47614:	ldr	r2, [sl, #12]
   47618:	ldr	r8, [r6]
   4761c:	ldr	r9, [r2, r7, lsl #2]
   47620:	add	r2, r8, r9, lsl #3
   47624:	ldrb	r1, [r2, #6]
   47628:	tst	r1, #16
   4762c:	beq	47608 <__assert_fail@plt+0x35014>
   47630:	ldr	r5, [r2, #4]
   47634:	ldr	r3, [sp, #52]	; 0x34
   47638:	tst	r3, r5
   4763c:	beq	474e0 <__assert_fail@plt+0x34eec>
   47640:	ubfx	r5, r5, #8, #10
   47644:	mov	r1, r4
   47648:	add	r0, sp, #144	; 0x90
   4764c:	ldr	r2, [sp, #232]	; 0xe8
   47650:	bl	3d850 <__assert_fail@plt+0x2b25c>
   47654:	tst	r5, #4
   47658:	bne	474b0 <__assert_fail@plt+0x34ebc>
   4765c:	tst	r5, #8
   47660:	beq	474c0 <__assert_fail@plt+0x34ecc>
   47664:	tst	r0, #1
   47668:	beq	474c0 <__assert_fail@plt+0x34ecc>
   4766c:	b	47608 <__assert_fail@plt+0x35014>
   47670:	ldr	r3, [sp, #172]	; 0xac
   47674:	cmp	r4, r3
   47678:	blt	47548 <__assert_fail@plt+0x34f54>
   4767c:	ldr	r2, [sp, #192]	; 0xc0
   47680:	cmp	r3, r2
   47684:	bge	47548 <__assert_fail@plt+0x34f54>
   47688:	b	47534 <__assert_fail@plt+0x34f40>
   4768c:	mov	r3, #0
   47690:	str	r3, [sp, #132]	; 0x84
   47694:	b	47578 <__assert_fail@plt+0x34f84>
   47698:	add	r2, r2, r3
   4769c:	sub	r1, r4, #1
   476a0:	ldrd	r2, [r2]
   476a4:	add	r0, sp, #144	; 0x90
   476a8:	mov	r8, r2
   476ac:	mov	r9, r3
   476b0:	ldr	r2, [sp, #232]	; 0xe8
   476b4:	add	r3, sp, #280	; 0x118
   476b8:	strd	r8, [r3]
   476bc:	ldr	r3, [ip, #8]
   476c0:	str	r3, [sp, #288]	; 0x120
   476c4:	bl	3d850 <__assert_fail@plt+0x2b25c>
   476c8:	mov	r3, r0
   476cc:	add	r2, sp, #280	; 0x118
   476d0:	mov	r1, r6
   476d4:	add	r0, sp, #132	; 0x84
   476d8:	bl	426a8 <__assert_fail@plt+0x300b4>
   476dc:	ldr	r3, [sp, #244]	; 0xf4
   476e0:	str	r0, [r5, r4, lsl #2]
   476e4:	ldr	r2, [r3, r4, lsl #2]
   476e8:	cmp	r2, #0
   476ec:	bne	47600 <__assert_fail@plt+0x3500c>
   476f0:	ldr	r0, [sp, #132]	; 0x84
   476f4:	cmp	r0, #0
   476f8:	beq	47600 <__assert_fail@plt+0x3500c>
   476fc:	ldr	r8, [sp, #92]	; 0x5c
   47700:	b	4781c <__assert_fail@plt+0x35228>
   47704:	ldr	r5, [sl, #48]	; 0x30
   47708:	cmp	r5, #0
   4770c:	beq	47858 <__assert_fail@plt+0x35264>
   47710:	ldr	r1, [sp, #184]	; 0xb8
   47714:	add	r0, sp, #144	; 0x90
   47718:	ldr	r2, [sp, #232]	; 0xe8
   4771c:	sub	r1, r1, #1
   47720:	bl	3d850 <__assert_fail@plt+0x2b25c>
   47724:	tst	r0, #1
   47728:	addne	r4, r4, #256	; 0x100
   4772c:	ldr	r5, [r5, r4, lsl #2]
   47730:	b	47030 <__assert_fail@plt+0x34a3c>
   47734:	ldr	r2, [sp, #192]	; 0xc0
   47738:	cmp	r3, r2
   4773c:	bge	47004 <__assert_fail@plt+0x34a10>
   47740:	b	47464 <__assert_fail@plt+0x34e70>
   47744:	mov	r0, r9
   47748:	bl	38b10 <__assert_fail@plt+0x2651c>
   4774c:	mov	r0, r4
   47750:	bl	38b10 <__assert_fail@plt+0x2651c>
   47754:	add	r0, sp, #144	; 0x90
   47758:	bl	3d1b4 <__assert_fail@plt+0x2abc0>
   4775c:	ldr	r5, [sp, #112]	; 0x70
   47760:	ldr	r2, [sp, #76]	; 0x4c
   47764:	ldr	r3, [sp, #96]	; 0x60
   47768:	add	r5, r5, r3
   4776c:	ldr	r3, [sp, #64]	; 0x40
   47770:	str	r5, [sp, #112]	; 0x70
   47774:	cmp	r5, r3
   47778:	movle	r3, #0
   4777c:	movgt	r3, #1
   47780:	cmp	r5, r2
   47784:	orrlt	r3, r3, #1
   47788:	cmp	r3, #0
   4778c:	beq	46e28 <__assert_fail@plt+0x34834>
   47790:	b	47308 <__assert_fail@plt+0x34d14>
   47794:	mov	r3, #1
   47798:	str	r3, [sp, #36]	; 0x24
   4779c:	ldr	r0, [sp, #36]	; 0x24
   477a0:	add	sp, sp, #428	; 0x1ac
   477a4:	ldrd	r4, [sp]
   477a8:	ldrd	r6, [sp, #8]
   477ac:	ldrd	r8, [sp, #16]
   477b0:	ldrd	sl, [sp, #24]
   477b4:	add	sp, sp, #32
   477b8:	pop	{pc}		; (ldr pc, [sp], #4)
   477bc:	ldr	sl, [sp, #68]	; 0x44
   477c0:	mov	r3, #12
   477c4:	str	r3, [sp, #36]	; 0x24
   477c8:	mov	r0, r4
   477cc:	bl	38b10 <__assert_fail@plt+0x2651c>
   477d0:	ldr	r3, [sl, #76]	; 0x4c
   477d4:	cmp	r3, #0
   477d8:	bne	47b6c <__assert_fail@plt+0x35578>
   477dc:	ldr	r0, [sp, #152]	; 0x98
   477e0:	bl	38b10 <__assert_fail@plt+0x2651c>
   477e4:	ldr	r0, [sp, #156]	; 0x9c
   477e8:	bl	38b10 <__assert_fail@plt+0x2651c>
   477ec:	ldrb	r3, [sp, #219]	; 0xdb
   477f0:	cmp	r3, #0
   477f4:	beq	4779c <__assert_fail@plt+0x351a8>
   477f8:	ldr	r0, [sp, #148]	; 0x94
   477fc:	bl	38b10 <__assert_fail@plt+0x2651c>
   47800:	b	4779c <__assert_fail@plt+0x351a8>
   47804:	ldr	r8, [sp, #92]	; 0x5c
   47808:	mov	r3, #0
   4780c:	str	r3, [sp, #120]	; 0x78
   47810:	b	47010 <__assert_fail@plt+0x34a1c>
   47814:	ldr	r8, [sp, #92]	; 0x5c
   47818:	ldr	r3, [sp, #244]	; 0xf4
   4781c:	cmp	r3, #0
   47820:	str	r0, [sp, #120]	; 0x78
   47824:	beq	47880 <__assert_fail@plt+0x3528c>
   47828:	mov	r5, #0
   4782c:	b	4703c <__assert_fail@plt+0x34a48>
   47830:	ldr	sl, [sp, #68]	; 0x44
   47834:	ldr	r3, [sl, #76]	; 0x4c
   47838:	cmp	r3, #0
   4783c:	beq	4798c <__assert_fail@plt+0x35398>
   47840:	mov	r2, fp
   47844:	add	r0, sp, #144	; 0x90
   47848:	ldr	r1, [r4, fp, lsl #2]
   4784c:	bl	3daa0 <__assert_fail@plt+0x2b4ac>
   47850:	str	r0, [sp, #240]	; 0xf0
   47854:	b	47148 <__assert_fail@plt+0x34b54>
   47858:	mov	r1, sl
   4785c:	ldr	r0, [sp, #228]	; 0xe4
   47860:	bl	42ac0 <__assert_fail@plt+0x304cc>
   47864:	cmp	r0, #0
   47868:	bne	47020 <__assert_fail@plt+0x34a2c>
   4786c:	ldr	r3, [sp, #244]	; 0xf4
   47870:	mov	r2, #12
   47874:	str	r2, [sp, #120]	; 0x78
   47878:	cmp	r3, #0
   4787c:	bne	47828 <__assert_fail@plt+0x35234>
   47880:	mov	r4, #0
   47884:	ldr	sl, [sp, #68]	; 0x44
   47888:	b	477c0 <__assert_fail@plt+0x351cc>
   4788c:	ldr	r3, [sp, #104]	; 0x68
   47890:	str	r3, [sp, #16]
   47894:	ldrb	r3, [sl, #52]	; 0x34
   47898:	b	46f58 <__assert_fail@plt+0x34964>
   4789c:	ldr	sl, [sp, #68]	; 0x44
   478a0:	ldr	r2, [sl, #76]	; 0x4c
   478a4:	cmp	r2, #0
   478a8:	bne	47840 <__assert_fail@plt+0x3524c>
   478ac:	ldr	r2, [sp, #472]	; 0x1d8
   478b0:	cmp	r2, #0
   478b4:	bne	479f4 <__assert_fail@plt+0x35400>
   478b8:	str	r2, [sp, #36]	; 0x24
   478bc:	b	477c8 <__assert_fail@plt+0x351d4>
   478c0:	ldr	r2, [sp, #72]	; 0x48
   478c4:	b	46c6c <__assert_fail@plt+0x34678>
   478c8:	mov	r1, r3
   478cc:	mov	r3, r5
   478d0:	ldr	r0, [sp, #48]	; 0x30
   478d4:	ldr	r4, [sp, #56]	; 0x38
   478d8:	ldr	ip, [sp, #72]	; 0x48
   478dc:	ldr	lr, [sp, #76]	; 0x4c
   478e0:	b	478f4 <__assert_fail@plt+0x35300>
   478e4:	sub	r3, r3, #1
   478e8:	mov	r1, #1
   478ec:	cmp	lr, r3
   478f0:	bgt	47be0 <__assert_fail@plt+0x355ec>
   478f4:	cmp	ip, r3
   478f8:	mov	r2, #0
   478fc:	ldrbgt	r2, [r4, r3]
   47900:	ldrb	r2, [r0, r2]
   47904:	cmp	r2, #0
   47908:	beq	478e4 <__assert_fail@plt+0x352f0>
   4790c:	b	473e8 <__assert_fail@plt+0x34df4>
   47910:	add	r1, sp, #280	; 0x118
   47914:	add	r0, sp, #144	; 0x90
   47918:	str	r9, [sp, #280]	; 0x118
   4791c:	str	r6, [sp, #284]	; 0x11c
   47920:	str	sl, [sp, #288]	; 0x120
   47924:	str	fp, [sp, #292]	; 0x124
   47928:	str	r6, [sp, #296]	; 0x128
   4792c:	str	r6, [sp, #300]	; 0x12c
   47930:	str	r6, [sp, #304]	; 0x130
   47934:	bl	45608 <__assert_fail@plt+0x33014>
   47938:	mov	r7, r0
   4793c:	ldr	r0, [sp, #304]	; 0x130
   47940:	bl	38b10 <__assert_fail@plt+0x2651c>
   47944:	cmp	r7, #0
   47948:	bne	47dc0 <__assert_fail@plt+0x357cc>
   4794c:	ldr	r4, [r9]
   47950:	cmp	r4, #0
   47954:	beq	47744 <__assert_fail@plt+0x35150>
   47958:	mov	r8, fp
   4795c:	mov	fp, sl
   47960:	ldr	sl, [sp, #68]	; 0x44
   47964:	ldr	r0, [sp, #244]	; 0xf4
   47968:	bl	38b10 <__assert_fail@plt+0x2651c>
   4796c:	mov	r0, #0
   47970:	str	r8, [sp, #236]	; 0xec
   47974:	str	fp, [sp, #240]	; 0xf0
   47978:	str	r9, [sp, #244]	; 0xf4
   4797c:	bl	38b10 <__assert_fail@plt+0x2651c>
   47980:	mov	r0, #0
   47984:	bl	38b10 <__assert_fail@plt+0x2651c>
   47988:	ldr	r4, [sp, #244]	; 0xf4
   4798c:	ldr	r3, [sp, #472]	; 0x1d8
   47990:	cmp	r3, #0
   47994:	beq	477c8 <__assert_fail@plt+0x351d4>
   47998:	cmp	r3, #1
   4799c:	bls	479ec <__assert_fail@plt+0x353f8>
   479a0:	sub	r2, r3, #2
   479a4:	ldr	r3, [sp, #476]	; 0x1dc
   479a8:	cmp	r2, #4
   479ac:	movls	r2, #0
   479b0:	movhi	r2, #1
   479b4:	add	r3, r3, #8
   479b8:	ubfx	r1, r3, #0, #3
   479bc:	cmp	r1, #0
   479c0:	movne	r2, #0
   479c4:	cmp	r2, #0
   479c8:	beq	4883c <__assert_fail@plt+0x36248>
   479cc:	ldr	r1, [sp, #472]	; 0x1d8
   479d0:	mvn	r0, #0
   479d4:	ldr	r2, [sp, #476]	; 0x1dc
   479d8:	add	r2, r2, r1, lsl #3
   479dc:	mvn	r1, #0
   479e0:	strd	r0, [r3], #8
   479e4:	cmp	r2, r3
   479e8:	bne	479e0 <__assert_fail@plt+0x353ec>
   479ec:	ldr	r3, [sp, #32]
   479f0:	ldrb	r3, [r3, #28]
   479f4:	eor	r3, r3, #16
   479f8:	mov	r5, #0
   479fc:	ldr	r1, [sp, #236]	; 0xec
   47a00:	ldr	r2, [sp, #472]	; 0x1d8
   47a04:	subs	r2, r2, #1
   47a08:	movne	r2, #1
   47a0c:	ands	r3, r2, r3, lsr #4
   47a10:	ldr	r2, [sp, #476]	; 0x1dc
   47a14:	str	r5, [r2]
   47a18:	str	r1, [r2, #4]
   47a1c:	bne	47e24 <__assert_fail@plt+0x35830>
   47a20:	ldrb	r2, [sp, #220]	; 0xdc
   47a24:	ldr	ip, [sp, #112]	; 0x70
   47a28:	ldr	r0, [sp, #156]	; 0x9c
   47a2c:	cmp	r2, #0
   47a30:	ldrne	r5, [sp, #476]	; 0x1dc
   47a34:	movne	r2, #0
   47a38:	ldrne	r7, [sp, #472]	; 0x1d8
   47a3c:	ldr	r1, [sp, #172]	; 0xac
   47a40:	addne	r5, r5, #4
   47a44:	ldr	lr, [sp, #176]	; 0xb0
   47a48:	bne	47cdc <__assert_fail@plt+0x356e8>
   47a4c:	ldr	lr, [sp, #472]	; 0x1d8
   47a50:	ldr	r1, [sp, #476]	; 0x1dc
   47a54:	add	r0, r1, #4
   47a58:	b	47a64 <__assert_fail@plt+0x35470>
   47a5c:	ldr	r3, [sp, #476]	; 0x1dc
   47a60:	ldr	r3, [r3, r2, lsl #3]
   47a64:	cmn	r3, #1
   47a68:	add	r1, ip, r3
   47a6c:	beq	47a84 <__assert_fail@plt+0x35490>
   47a70:	ldr	r3, [r0, r2, lsl #3]
   47a74:	ldr	r5, [sp, #476]	; 0x1dc
   47a78:	add	r3, ip, r3
   47a7c:	str	r1, [r5, r2, lsl #3]
   47a80:	str	r3, [r0, r2, lsl #3]
   47a84:	add	r2, r2, #1
   47a88:	cmp	lr, r2
   47a8c:	bne	47a5c <__assert_fail@plt+0x35468>
   47a90:	ldr	r3, [sp, #108]	; 0x6c
   47a94:	cmp	r3, #0
   47a98:	ble	47ae8 <__assert_fail@plt+0x354f4>
   47a9c:	mov	r0, r3
   47aa0:	ldr	r2, [sp, #472]	; 0x1d8
   47aa4:	ldr	r3, [sp, #476]	; 0x1dc
   47aa8:	add	r3, r3, r2, lsl #3
   47aac:	sub	r2, r0, #1
   47ab0:	cmp	r2, #4
   47ab4:	ubfx	r1, r3, #0, #3
   47ab8:	movls	r2, #0
   47abc:	movhi	r2, #1
   47ac0:	cmp	r1, #0
   47ac4:	movne	r2, #0
   47ac8:	cmp	r2, #0
   47acc:	beq	48864 <__assert_fail@plt+0x36270>
   47ad0:	add	r2, r3, r0, lsl #3
   47ad4:	mvn	r1, #0
   47ad8:	mvn	r0, #0
   47adc:	strd	r0, [r3], #8
   47ae0:	cmp	r3, r2
   47ae4:	bne	47adc <__assert_fail@plt+0x354e8>
   47ae8:	ldr	ip, [sl, #132]	; 0x84
   47aec:	cmp	ip, #0
   47af0:	beq	477c8 <__assert_fail@plt+0x351d4>
   47af4:	ldr	r3, [sp, #472]	; 0x1d8
   47af8:	cmp	r3, #1
   47afc:	bls	477c8 <__assert_fail@plt+0x351d4>
   47b00:	ldr	r1, [sp, #476]	; 0x1dc
   47b04:	mov	r6, r3
   47b08:	mov	r2, #0
   47b0c:	mov	r3, #1
   47b10:	add	r5, r1, #4
   47b14:	ldr	r1, [ip, r2, lsl #2]
   47b18:	mov	r0, r3
   47b1c:	cmp	r1, r2
   47b20:	add	lr, r1, #1
   47b24:	beq	47b48 <__assert_fail@plt+0x35554>
   47b28:	ldr	r1, [sp, #476]	; 0x1dc
   47b2c:	ldr	r1, [r1, lr, lsl #3]
   47b30:	ldr	lr, [sp, #476]	; 0x1dc
   47b34:	str	r1, [lr, r3, lsl #3]
   47b38:	ldr	r2, [ip, r2, lsl #2]
   47b3c:	add	r2, lr, r2, lsl #3
   47b40:	ldr	r2, [r2, #12]
   47b44:	str	r2, [r5, r3, lsl #3]
   47b48:	add	r3, r3, #1
   47b4c:	mov	r2, r0
   47b50:	cmp	r6, r3
   47b54:	bne	47b14 <__assert_fail@plt+0x35520>
   47b58:	b	477c8 <__assert_fail@plt+0x351d4>
   47b5c:	ldrb	r3, [sl, #88]	; 0x58
   47b60:	tst	r3, #2
   47b64:	bne	46d08 <__assert_fail@plt+0x34714>
   47b68:	b	46d30 <__assert_fail@plt+0x3473c>
   47b6c:	add	r0, sp, #144	; 0x90
   47b70:	bl	3d1b4 <__assert_fail@plt+0x2abc0>
   47b74:	ldr	r0, [sp, #276]	; 0x114
   47b78:	bl	38b10 <__assert_fail@plt+0x2651c>
   47b7c:	ldr	r0, [sp, #260]	; 0x104
   47b80:	bl	38b10 <__assert_fail@plt+0x2651c>
   47b84:	b	477dc <__assert_fail@plt+0x351e8>
   47b88:	ldr	sl, [r4, #40]	; 0x28
   47b8c:	cmp	sl, #0
   47b90:	bne	46f2c <__assert_fail@plt+0x34938>
   47b94:	mov	r3, #12
   47b98:	ldr	sl, [sp, #68]	; 0x44
   47b9c:	str	r3, [sp, #36]	; 0x24
   47ba0:	ldr	r4, [sp, #244]	; 0xf4
   47ba4:	b	477c8 <__assert_fail@plt+0x351d4>
   47ba8:	mov	r0, r9
   47bac:	bl	38b10 <__assert_fail@plt+0x2651c>
   47bb0:	mov	r0, r6
   47bb4:	bl	38b10 <__assert_fail@plt+0x2651c>
   47bb8:	add	r0, sp, #144	; 0x90
   47bbc:	bl	3d1b4 <__assert_fail@plt+0x2abc0>
   47bc0:	ldr	r5, [sp, #112]	; 0x70
   47bc4:	b	47760 <__assert_fail@plt+0x3516c>
   47bc8:	mov	r3, #12
   47bcc:	ldr	r4, [sp, #244]	; 0xf4
   47bd0:	str	r3, [sp, #36]	; 0x24
   47bd4:	b	477c8 <__assert_fail@plt+0x351d4>
   47bd8:	mov	r3, #8
   47bdc:	b	46dcc <__assert_fail@plt+0x347d8>
   47be0:	mov	r2, #1
   47be4:	ldr	sl, [sp, #68]	; 0x44
   47be8:	str	r2, [sp, #36]	; 0x24
   47bec:	str	r3, [sp, #112]	; 0x70
   47bf0:	ldr	r4, [sp, #244]	; 0xf4
   47bf4:	b	477c8 <__assert_fail@plt+0x351d4>
   47bf8:	ldr	r4, [sp, #48]	; 0x30
   47bfc:	ldr	r1, [sp, #168]	; 0xa8
   47c00:	sub	r2, r5, r1
   47c04:	ldr	r3, [sp, #176]	; 0xb0
   47c08:	cmp	r3, r2
   47c0c:	bhi	48bac <__assert_fail@plt+0x365b8>
   47c10:	mov	r1, r5
   47c14:	add	r0, sp, #144	; 0x90
   47c18:	ldr	r2, [sp, #480]	; 0x1e0
   47c1c:	bl	3dd60 <__assert_fail@plt+0x2b76c>
   47c20:	subs	r3, r0, #0
   47c24:	str	r3, [sp, #36]	; 0x24
   47c28:	beq	48ba4 <__assert_fail@plt+0x365b0>
   47c2c:	ldr	sl, [sp, #68]	; 0x44
   47c30:	ldr	r4, [sp, #244]	; 0xf4
   47c34:	b	477c8 <__assert_fail@plt+0x351d4>
   47c38:	ldrsb	r3, [sl, #52]	; 0x34
   47c3c:	cmp	r3, #0
   47c40:	blt	47cb0 <__assert_fail@plt+0x356bc>
   47c44:	ldr	fp, [sp, #12]
   47c48:	ldr	r3, [sp, #20]
   47c4c:	cmp	r3, #0
   47c50:	strne	r3, [sp, #28]
   47c54:	bne	46f6c <__assert_fail@plt+0x34978>
   47c58:	b	470e0 <__assert_fail@plt+0x34aec>
   47c5c:	mov	r5, r0
   47c60:	b	46f80 <__assert_fail@plt+0x3498c>
   47c64:	mov	fp, r4
   47c68:	b	470e0 <__assert_fail@plt+0x34aec>
   47c6c:	ldr	sl, [r4, #44]	; 0x2c
   47c70:	b	47b8c <__assert_fail@plt+0x35598>
   47c74:	ldr	sl, [sp, #68]	; 0x44
   47c78:	bl	38b10 <__assert_fail@plt+0x2651c>
   47c7c:	mov	r3, #12
   47c80:	mov	r0, r9
   47c84:	str	r3, [sp, #36]	; 0x24
   47c88:	bl	38b10 <__assert_fail@plt+0x2651c>
   47c8c:	ldr	r4, [sp, #244]	; 0xf4
   47c90:	b	477c8 <__assert_fail@plt+0x351d4>
   47c94:	mov	r3, r0
   47c98:	mov	r1, r4
   47c9c:	ldr	r2, [sl, #40]	; 0x28
   47ca0:	add	r0, sp, #120	; 0x78
   47ca4:	bl	426a8 <__assert_fail@plt+0x300b4>
   47ca8:	mov	sl, r0
   47cac:	b	47b8c <__assert_fail@plt+0x35598>
   47cb0:	mov	r1, sl
   47cb4:	add	r0, sp, #144	; 0x90
   47cb8:	ldr	r2, [sp, #12]
   47cbc:	bl	3daa0 <__assert_fail@plt+0x2b4ac>
   47cc0:	subs	r3, r0, #0
   47cc4:	str	r3, [sp, #28]
   47cc8:	bne	47c44 <__assert_fail@plt+0x35650>
   47ccc:	mvn	fp, #0
   47cd0:	b	46f6c <__assert_fail@plt+0x34978>
   47cd4:	ldr	r3, [sp, #476]	; 0x1dc
   47cd8:	ldr	r3, [r3, r2, lsl #3]
   47cdc:	cmn	r3, #1
   47ce0:	beq	47d18 <__assert_fail@plt+0x35724>
   47ce4:	cmp	r1, r3
   47ce8:	ldr	r6, [r5, r2, lsl #3]
   47cec:	moveq	r3, lr
   47cf0:	ldrne	r3, [r0, r3, lsl #2]
   47cf4:	ldr	r8, [sp, #476]	; 0x1dc
   47cf8:	cmp	r1, r6
   47cfc:	moveq	r6, lr
   47d00:	str	r3, [r8, r2, lsl #3]
   47d04:	add	r3, ip, r3
   47d08:	ldrne	r6, [r0, r6, lsl #2]
   47d0c:	str	r3, [r8, r2, lsl #3]
   47d10:	add	r6, ip, r6
   47d14:	str	r6, [r5, r2, lsl #3]
   47d18:	add	r2, r2, #1
   47d1c:	cmp	r2, r7
   47d20:	bne	47cd4 <__assert_fail@plt+0x356e0>
   47d24:	b	47a90 <__assert_fail@plt+0x3549c>
   47d28:	add	r4, sl, #8
   47d2c:	add	r5, sl, #12
   47d30:	mov	r1, r4
   47d34:	mov	r2, r5
   47d38:	mov	r3, #0
   47d3c:	add	r0, sp, #144	; 0x90
   47d40:	bl	3e6c4 <__assert_fail@plt+0x2c0d0>
   47d44:	cmp	r0, #0
   47d48:	mov	fp, r0
   47d4c:	str	r0, [sp, #120]	; 0x78
   47d50:	bne	470e0 <__assert_fail@plt+0x34aec>
   47d54:	ldrb	r3, [sl, #52]	; 0x34
   47d58:	tst	r3, #64	; 0x40
   47d5c:	bne	47dfc <__assert_fail@plt+0x35808>
   47d60:	mov	r2, #0
   47d64:	str	r2, [sp, #16]
   47d68:	b	46f58 <__assert_fail@plt+0x34964>
   47d6c:	ldr	sl, [r4, #48]	; 0x30
   47d70:	b	47b8c <__assert_fail@plt+0x35598>
   47d74:	mov	r7, r3
   47d78:	mov	r0, r9
   47d7c:	bl	38b10 <__assert_fail@plt+0x2651c>
   47d80:	ldr	r0, [sp, #24]
   47d84:	bl	38b10 <__assert_fail@plt+0x2651c>
   47d88:	cmp	r7, #1
   47d8c:	beq	47754 <__assert_fail@plt+0x35160>
   47d90:	str	r7, [sp, #36]	; 0x24
   47d94:	ldr	sl, [sp, #68]	; 0x44
   47d98:	ldr	r4, [sp, #244]	; 0xf4
   47d9c:	b	477c8 <__assert_fail@plt+0x351d4>
   47da0:	mov	r3, #12
   47da4:	mov	r0, r9
   47da8:	ldr	sl, [sp, #68]	; 0x44
   47dac:	str	r3, [sp, #36]	; 0x24
   47db0:	bl	38b10 <__assert_fail@plt+0x2651c>
   47db4:	mov	r0, r6
   47db8:	bl	38b10 <__assert_fail@plt+0x2651c>
   47dbc:	b	47314 <__assert_fail@plt+0x34d20>
   47dc0:	str	r6, [sp, #24]
   47dc4:	b	47d78 <__assert_fail@plt+0x35784>
   47dc8:	mov	r3, r5
   47dcc:	mov	r2, r6
   47dd0:	ldr	r0, [sp, #12]
   47dd4:	mov	r1, r9
   47dd8:	bl	44af4 <__assert_fail@plt+0x32500>
   47ddc:	mov	r7, r0
   47de0:	mov	r0, r6
   47de4:	bl	38b10 <__assert_fail@plt+0x2651c>
   47de8:	cmp	r7, #0
   47dec:	beq	47958 <__assert_fail@plt+0x35364>
   47df0:	mov	r3, #0
   47df4:	str	r3, [sp, #24]
   47df8:	b	47d78 <__assert_fail@plt+0x35784>
   47dfc:	mov	r2, r5
   47e00:	mov	r1, r4
   47e04:	add	r0, sp, #144	; 0x90
   47e08:	bl	45b28 <__assert_fail@plt+0x33534>
   47e0c:	cmp	r0, #0
   47e10:	mov	fp, r0
   47e14:	str	r0, [sp, #120]	; 0x78
   47e18:	bne	470e0 <__assert_fail@plt+0x34aec>
   47e1c:	ldrb	r3, [sl, #52]	; 0x34
   47e20:	b	47d60 <__assert_fail@plt+0x3576c>
   47e24:	ldr	r2, [sp, #32]
   47e28:	ldrb	r3, [sl, #88]	; 0x58
   47e2c:	ldr	r2, [r2]
   47e30:	tst	r3, #1
   47e34:	str	r2, [sp, #12]
   47e38:	beq	4873c <__assert_fail@plt+0x36148>
   47e3c:	ldr	r3, [sl, #76]	; 0x4c
   47e40:	cmp	r3, r5
   47e44:	ble	4873c <__assert_fail@plt+0x36148>
   47e48:	mov	r0, #0
   47e4c:	mov	r1, #2
   47e50:	mov	r2, #0
   47e54:	mov	r3, #16
   47e58:	add	ip, sp, #280	; 0x118
   47e5c:	strd	r0, [sp, #120]	; 0x78
   47e60:	add	r1, sp, #292	; 0x124
   47e64:	mov	r0, #48	; 0x30
   47e68:	strd	r2, [ip]
   47e6c:	str	r1, [sp, #16]
   47e70:	str	r5, [sp, #128]	; 0x80
   47e74:	str	r1, [sp, #288]	; 0x120
   47e78:	bl	3b49c <__assert_fail@plt+0x28ea8>
   47e7c:	cmp	r0, #0
   47e80:	str	r0, [sp, #128]	; 0x80
   47e84:	beq	47bc8 <__assert_fail@plt+0x355d4>
   47e88:	ldr	r1, [sp, #12]
   47e8c:	add	r2, sp, #132	; 0x84
   47e90:	ldr	r3, [sp, #280]	; 0x118
   47e94:	str	r2, [sp, #24]
   47e98:	ldr	fp, [r1, #72]	; 0x48
   47e9c:	str	r5, [sp, #132]	; 0x84
   47ea0:	ldr	r1, [sp, #472]	; 0x1d8
   47ea4:	str	r5, [sp, #136]	; 0x88
   47ea8:	str	r5, [sp, #140]	; 0x8c
   47eac:	cmp	r3, r1
   47eb0:	movcs	r3, r1
   47eb4:	addcs	r5, sp, #120	; 0x78
   47eb8:	strcs	r3, [sp, #280]	; 0x118
   47ebc:	bcc	48b88 <__assert_fail@plt+0x36594>
   47ec0:	ldr	r0, [sp, #288]	; 0x120
   47ec4:	ldr	r3, [sp, #472]	; 0x1d8
   47ec8:	ldr	r1, [sp, #476]	; 0x1dc
   47ecc:	str	r0, [sp, #28]
   47ed0:	lsl	r2, r3, #3
   47ed4:	lsl	r3, r3, #4
   47ed8:	mov	r4, r1
   47edc:	str	r2, [sp, #32]
   47ee0:	str	r3, [sp, #44]	; 0x2c
   47ee4:	bl	12024 <memcpy@plt>
   47ee8:	ldr	r6, [r4], #4
   47eec:	str	sl, [sp, #20]
   47ef0:	str	r4, [sp, #40]	; 0x28
   47ef4:	str	r6, [sp, #116]	; 0x74
   47ef8:	ldr	r3, [sp, #476]	; 0x1dc
   47efc:	ldr	r0, [r3, #4]
   47f00:	cmp	r6, r0
   47f04:	bgt	48a74 <__assert_fail@plt+0x36480>
   47f08:	ldr	r3, [sp, #12]
   47f0c:	lsl	r4, fp, #3
   47f10:	mov	r7, fp
   47f14:	ldr	r2, [r3]
   47f18:	add	r1, r2, r4
   47f1c:	ldrb	r3, [r1, #4]
   47f20:	cmp	r3, #8
   47f24:	beq	48438 <__assert_fail@plt+0x35e44>
   47f28:	cmp	r3, #9
   47f2c:	beq	484bc <__assert_fail@plt+0x35ec8>
   47f30:	cmp	r0, r6
   47f34:	beq	48350 <__assert_fail@plt+0x35d5c>
   47f38:	cmp	r5, #0
   47f3c:	beq	47fc0 <__assert_fail@plt+0x359cc>
   47f40:	ldr	r2, [sp, #136]	; 0x88
   47f44:	cmp	r2, #0
   47f48:	ble	47fc0 <__assert_fail@plt+0x359cc>
   47f4c:	subs	r2, r2, #1
   47f50:	ldr	r0, [sp, #140]	; 0x8c
   47f54:	moveq	r1, r2
   47f58:	beq	47fb4 <__assert_fail@plt+0x359c0>
   47f5c:	mov	r1, #0
   47f60:	add	r3, r2, r1
   47f64:	lsr	r3, r3, #1
   47f68:	ldr	ip, [r0, r3, lsl #2]
   47f6c:	cmp	ip, fp
   47f70:	blt	48324 <__assert_fail@plt+0x35d30>
   47f74:	cmp	r3, r1
   47f78:	bls	47fb4 <__assert_fail@plt+0x359c0>
   47f7c:	add	r2, r3, r1
   47f80:	lsr	r2, r2, #1
   47f84:	ldr	ip, [r0, r2, lsl #2]
   47f88:	cmp	fp, ip
   47f8c:	ble	47fa4 <__assert_fail@plt+0x359b0>
   47f90:	b	48318 <__assert_fail@plt+0x35d24>
   47f94:	ldr	ip, [r0, r3, lsl #2]
   47f98:	cmp	ip, fp
   47f9c:	blt	48324 <__assert_fail@plt+0x35d30>
   47fa0:	mov	r2, r3
   47fa4:	add	r3, r1, r2
   47fa8:	cmp	r1, r2
   47fac:	lsr	r3, r3, #1
   47fb0:	bcc	47f94 <__assert_fail@plt+0x359a0>
   47fb4:	ldr	r3, [r0, r1, lsl #2]
   47fb8:	cmp	r3, fp
   47fbc:	beq	48364 <__assert_fail@plt+0x35d70>
   47fc0:	ldr	r6, [sp, #228]	; 0xe4
   47fc4:	ldr	r0, [r6]
   47fc8:	add	r1, r0, r4
   47fcc:	ldrb	r3, [r1, #4]
   47fd0:	tst	r3, #8
   47fd4:	beq	48170 <__assert_fail@plt+0x35b7c>
   47fd8:	ldr	ip, [r6, #20]
   47fdc:	add	r4, fp, fp, lsl #1
   47fe0:	ldr	r2, [sp, #136]	; 0x88
   47fe4:	ldr	r0, [sp, #116]	; 0x74
   47fe8:	add	r4, ip, r4, lsl #2
   47fec:	ldr	r1, [sp, #244]	; 0xf4
   47ff0:	cmp	r2, #0
   47ff4:	ldr	r6, [r1, r0, lsl #2]
   47ff8:	ble	48070 <__assert_fail@plt+0x35a7c>
   47ffc:	subs	r2, r2, #1
   48000:	moveq	r1, r2
   48004:	ldr	ip, [sp, #140]	; 0x8c
   48008:	beq	48064 <__assert_fail@plt+0x35a70>
   4800c:	mov	r1, #0
   48010:	add	r3, r2, r1
   48014:	lsr	r3, r3, #1
   48018:	ldr	r0, [ip, r3, lsl #2]
   4801c:	cmp	fp, r0
   48020:	bgt	48340 <__assert_fail@plt+0x35d4c>
   48024:	cmp	r3, r1
   48028:	bls	48064 <__assert_fail@plt+0x35a70>
   4802c:	add	r2, r3, r1
   48030:	lsr	r2, r2, #1
   48034:	ldr	r0, [ip, r2, lsl #2]
   48038:	cmp	fp, r0
   4803c:	ble	48054 <__assert_fail@plt+0x35a60>
   48040:	b	48334 <__assert_fail@plt+0x35d40>
   48044:	ldr	r0, [ip, r3, lsl #2]
   48048:	cmp	fp, r0
   4804c:	bgt	48340 <__assert_fail@plt+0x35d4c>
   48050:	mov	r2, r3
   48054:	add	r3, r1, r2
   48058:	cmp	r1, r2
   4805c:	lsr	r3, r3, #1
   48060:	bcc	48044 <__assert_fail@plt+0x35a50>
   48064:	ldr	r3, [ip, r1, lsl #2]
   48068:	cmp	fp, r3
   4806c:	beq	48084 <__assert_fail@plt+0x35a90>
   48070:	mov	r1, fp
   48074:	ldr	r0, [sp, #24]
   48078:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   4807c:	cmp	r0, #0
   48080:	beq	48988 <__assert_fail@plt+0x36394>
   48084:	ldr	r9, [r4, #4]
   48088:	cmp	r9, #0
   4808c:	ble	48250 <__assert_fail@plt+0x35c5c>
   48090:	ldr	r8, [r6, #8]
   48094:	mvn	fp, #0
   48098:	mov	lr, #0
   4809c:	ldr	sl, [r4, #8]
   480a0:	add	r7, r8, fp
   480a4:	cmp	r8, #0
   480a8:	ble	48128 <__assert_fail@plt+0x35b34>
   480ac:	cmp	r7, #0
   480b0:	ldr	r4, [sl, lr, lsl #2]
   480b4:	moveq	r1, r7
   480b8:	ldr	r0, [r6, #12]
   480bc:	beq	4811c <__assert_fail@plt+0x35b28>
   480c0:	mov	r2, r7
   480c4:	mov	r1, #0
   480c8:	add	r3, r2, r1
   480cc:	lsr	r3, r3, #1
   480d0:	ldr	ip, [r0, r3, lsl #2]
   480d4:	cmp	r4, ip
   480d8:	bgt	48150 <__assert_fail@plt+0x35b5c>
   480dc:	cmp	r3, r1
   480e0:	bls	4811c <__assert_fail@plt+0x35b28>
   480e4:	add	r2, r3, r1
   480e8:	lsr	r2, r2, #1
   480ec:	ldr	ip, [r0, r2, lsl #2]
   480f0:	cmp	r4, ip
   480f4:	ble	4810c <__assert_fail@plt+0x35b18>
   480f8:	b	48144 <__assert_fail@plt+0x35b50>
   480fc:	ldr	ip, [r0, r3, lsl #2]
   48100:	cmp	r4, ip
   48104:	bgt	48150 <__assert_fail@plt+0x35b5c>
   48108:	mov	r2, r3
   4810c:	add	r3, r1, r2
   48110:	cmp	r1, r2
   48114:	lsr	r3, r3, #1
   48118:	bcc	480fc <__assert_fail@plt+0x35b08>
   4811c:	ldr	r3, [r0, r1, lsl #2]
   48120:	cmp	r4, r3
   48124:	beq	48160 <__assert_fail@plt+0x35b6c>
   48128:	add	lr, lr, #1
   4812c:	cmp	r9, lr
   48130:	bne	480a4 <__assert_fail@plt+0x35ab0>
   48134:	cmp	fp, #0
   48138:	blt	48980 <__assert_fail@plt+0x3638c>
   4813c:	ldr	r6, [sp, #116]	; 0x74
   48140:	b	47ef8 <__assert_fail@plt+0x35904>
   48144:	mov	r1, r2
   48148:	mov	r2, r3
   4814c:	mov	r3, r1
   48150:	add	r1, r3, #1
   48154:	cmp	r2, r1
   48158:	bhi	480c8 <__assert_fail@plt+0x35ad4>
   4815c:	b	4811c <__assert_fail@plt+0x35b28>
   48160:	cmn	fp, #1
   48164:	bne	4851c <__assert_fail@plt+0x35f28>
   48168:	mov	fp, r4
   4816c:	b	48128 <__assert_fail@plt+0x35b34>
   48170:	ldrb	r2, [r1, #6]
   48174:	tst	r2, #16
   48178:	bne	48664 <__assert_fail@plt+0x36070>
   4817c:	cmp	r3, #4
   48180:	beq	486b0 <__assert_fail@plt+0x360bc>
   48184:	ldr	r8, [sp, #116]	; 0x74
   48188:	mov	r2, r8
   4818c:	add	r0, sp, #144	; 0x90
   48190:	bl	3d968 <__assert_fail@plt+0x2b374>
   48194:	cmp	r0, #0
   48198:	beq	48250 <__assert_fail@plt+0x35c5c>
   4819c:	ldr	r3, [r6, #12]
   481a0:	add	r8, r8, #1
   481a4:	ldr	fp, [r3, r7, lsl #2]
   481a8:	cmp	r5, #0
   481ac:	str	r8, [sp, #116]	; 0x74
   481b0:	beq	4830c <__assert_fail@plt+0x35d18>
   481b4:	ldr	r3, [sp, #236]	; 0xec
   481b8:	cmp	r8, r3
   481bc:	bgt	48250 <__assert_fail@plt+0x35c5c>
   481c0:	ldr	r3, [sp, #244]	; 0xf4
   481c4:	ldr	r3, [r3, r8, lsl #2]
   481c8:	cmp	r3, #0
   481cc:	beq	48250 <__assert_fail@plt+0x35c5c>
   481d0:	ldr	r2, [r3, #8]
   481d4:	cmp	r2, #0
   481d8:	ble	48250 <__assert_fail@plt+0x35c5c>
   481dc:	subs	r2, r2, #1
   481e0:	ldr	r0, [r3, #12]
   481e4:	moveq	r1, r2
   481e8:	beq	48244 <__assert_fail@plt+0x35c50>
   481ec:	mov	r1, #0
   481f0:	add	r3, r2, r1
   481f4:	lsr	r3, r3, #1
   481f8:	ldr	ip, [r0, r3, lsl #2]
   481fc:	cmp	ip, fp
   48200:	blt	48478 <__assert_fail@plt+0x35e84>
   48204:	cmp	r3, r1
   48208:	bls	48244 <__assert_fail@plt+0x35c50>
   4820c:	add	r2, r3, r1
   48210:	lsr	r2, r2, #1
   48214:	ldr	ip, [r0, r2, lsl #2]
   48218:	cmp	fp, ip
   4821c:	ble	48234 <__assert_fail@plt+0x35c40>
   48220:	b	4846c <__assert_fail@plt+0x35e78>
   48224:	ldr	ip, [r0, r3, lsl #2]
   48228:	cmp	ip, fp
   4822c:	blt	48478 <__assert_fail@plt+0x35e84>
   48230:	mov	r2, r3
   48234:	add	r3, r1, r2
   48238:	cmp	r1, r2
   4823c:	lsr	r3, r3, #1
   48240:	bcc	48224 <__assert_fail@plt+0x35c30>
   48244:	ldr	r3, [r0, r1, lsl #2]
   48248:	cmp	r3, fp
   4824c:	beq	4830c <__assert_fail@plt+0x35d18>
   48250:	ldr	ip, [sp, #24]
   48254:	mov	r0, r5
   48258:	ldr	r1, [sp, #28]
   4825c:	ldr	r2, [sp, #472]	; 0x1d8
   48260:	ldr	r3, [sp, #476]	; 0x1dc
   48264:	stm	sp, {r1, ip}
   48268:	add	r1, sp, #116	; 0x74
   4826c:	bl	3d3d8 <__assert_fail@plt+0x2ade4>
   48270:	subs	fp, r0, #0
   48274:	bge	4813c <__assert_fail@plt+0x35b48>
   48278:	ldr	sl, [sp, #20]
   4827c:	ldr	r0, [sp, #140]	; 0x8c
   48280:	bl	38b10 <__assert_fail@plt+0x2651c>
   48284:	ldr	r3, [sp, #16]
   48288:	ldr	r0, [sp, #288]	; 0x120
   4828c:	cmp	r0, r3
   48290:	beq	48298 <__assert_fail@plt+0x35ca4>
   48294:	bl	38b10 <__assert_fail@plt+0x2651c>
   48298:	ldr	r1, [sp, #16]
   4829c:	mov	r2, #0
   482a0:	mov	r3, #16
   482a4:	cmp	r5, #0
   482a8:	str	r1, [sp, #288]	; 0x120
   482ac:	add	r1, sp, #280	; 0x118
   482b0:	strd	r2, [r1]
   482b4:	beq	4730c <__assert_fail@plt+0x34d18>
   482b8:	mov	r6, #24
   482bc:	ldr	r4, [sp, #36]	; 0x24
   482c0:	b	482e0 <__assert_fail@plt+0x35cec>
   482c4:	add	r0, r0, r7
   482c8:	ldr	r0, [r0, #20]
   482cc:	bl	38b10 <__assert_fail@plt+0x2651c>
   482d0:	ldr	r3, [r5, #8]
   482d4:	add	r3, r3, r7
   482d8:	ldr	r0, [r3, #8]
   482dc:	bl	38b10 <__assert_fail@plt+0x2651c>
   482e0:	ldr	r3, [r5]
   482e4:	mul	r7, r6, r4
   482e8:	ldr	r0, [r5, #8]
   482ec:	cmp	r4, r3
   482f0:	add	r4, r4, #1
   482f4:	blt	482c4 <__assert_fail@plt+0x35cd0>
   482f8:	mov	r3, #1
   482fc:	str	r3, [sp, #36]	; 0x24
   48300:	bl	38b10 <__assert_fail@plt+0x2651c>
   48304:	ldr	r4, [sp, #244]	; 0xf4
   48308:	b	477c8 <__assert_fail@plt+0x351d4>
   4830c:	mov	r3, #0
   48310:	str	r3, [sp, #136]	; 0x88
   48314:	b	48134 <__assert_fail@plt+0x35b40>
   48318:	mov	r1, r2
   4831c:	mov	r2, r3
   48320:	mov	r3, r1
   48324:	add	r1, r3, #1
   48328:	cmp	r2, r1
   4832c:	bhi	47f60 <__assert_fail@plt+0x3596c>
   48330:	b	47fb4 <__assert_fail@plt+0x359c0>
   48334:	mov	r1, r2
   48338:	mov	r2, r3
   4833c:	mov	r3, r1
   48340:	add	r1, r3, #1
   48344:	cmp	r2, r1
   48348:	bhi	48010 <__assert_fail@plt+0x35a1c>
   4834c:	b	48064 <__assert_fail@plt+0x35a70>
   48350:	ldr	r3, [sp, #240]	; 0xf0
   48354:	cmp	r3, fp
   48358:	bne	47f38 <__assert_fail@plt+0x35944>
   4835c:	cmp	r5, #0
   48360:	beq	48b4c <__assert_fail@plt+0x36558>
   48364:	ldr	r0, [sp, #40]	; 0x28
   48368:	mov	r3, #0
   4836c:	ldr	r1, [sp, #472]	; 0x1d8
   48370:	ldr	r2, [sp, #476]	; 0x1dc
   48374:	ldr	r2, [r2, r3, lsl #3]
   48378:	cmp	r2, #0
   4837c:	blt	4838c <__assert_fail@plt+0x35d98>
   48380:	ldr	r2, [r0, r3, lsl #3]
   48384:	cmn	r2, #1
   48388:	beq	48488 <__assert_fail@plt+0x35e94>
   4838c:	add	r3, r3, #1
   48390:	cmp	r1, r3
   48394:	bne	48370 <__assert_fail@plt+0x35d7c>
   48398:	ldr	sl, [sp, #20]
   4839c:	ldr	r0, [sp, #140]	; 0x8c
   483a0:	bl	38b10 <__assert_fail@plt+0x2651c>
   483a4:	ldr	r3, [sp, #16]
   483a8:	ldr	r0, [sp, #288]	; 0x120
   483ac:	cmp	r0, r3
   483b0:	beq	48b90 <__assert_fail@plt+0x3659c>
   483b4:	bl	38b10 <__assert_fail@plt+0x2651c>
   483b8:	ldr	r1, [sp, #16]
   483bc:	mov	r2, #0
   483c0:	mov	r3, #16
   483c4:	cmp	r5, #0
   483c8:	str	r1, [sp, #288]	; 0x120
   483cc:	add	r1, sp, #280	; 0x118
   483d0:	strd	r2, [r1]
   483d4:	beq	48428 <__assert_fail@plt+0x35e34>
   483d8:	ldr	r3, [r5]
   483dc:	cmp	r3, #0
   483e0:	movgt	r6, #0
   483e4:	movgt	r4, r6
   483e8:	ble	48420 <__assert_fail@plt+0x35e2c>
   483ec:	ldr	r3, [r5, #8]
   483f0:	add	r6, r6, #1
   483f4:	add	r3, r3, r4
   483f8:	ldr	r0, [r3, #20]
   483fc:	bl	38b10 <__assert_fail@plt+0x2651c>
   48400:	ldr	r3, [r5, #8]
   48404:	add	r3, r3, r4
   48408:	add	r4, r4, #24
   4840c:	ldr	r0, [r3, #8]
   48410:	bl	38b10 <__assert_fail@plt+0x2651c>
   48414:	ldr	r3, [r5]
   48418:	cmp	r6, r3
   4841c:	blt	483ec <__assert_fail@plt+0x35df8>
   48420:	ldr	r0, [r5, #8]
   48424:	bl	38b10 <__assert_fail@plt+0x2651c>
   48428:	ldr	r4, [sp, #244]	; 0xf4
   4842c:	ldr	r3, [sp, #476]	; 0x1dc
   48430:	ldr	r3, [r3]
   48434:	b	47a20 <__assert_fail@plt+0x3542c>
   48438:	ldr	r3, [r2, fp, lsl #3]
   4843c:	ldr	r2, [sp, #472]	; 0x1d8
   48440:	add	r3, r3, #1
   48444:	cmp	r2, r3
   48448:	ble	47f30 <__assert_fail@plt+0x3593c>
   4844c:	ldr	r2, [sp, #476]	; 0x1dc
   48450:	ldr	r1, [sp, #476]	; 0x1dc
   48454:	add	r2, r2, r3, lsl #3
   48458:	str	r6, [r1, r3, lsl #3]
   4845c:	mvn	r3, #0
   48460:	str	r3, [r2, #4]
   48464:	ldr	r0, [r1, #4]
   48468:	b	47f30 <__assert_fail@plt+0x3593c>
   4846c:	mov	r1, r2
   48470:	mov	r2, r3
   48474:	mov	r3, r1
   48478:	add	r1, r3, #1
   4847c:	cmp	r2, r1
   48480:	bhi	481f0 <__assert_fail@plt+0x35bfc>
   48484:	b	48244 <__assert_fail@plt+0x35c50>
   48488:	ldr	ip, [sp, #24]
   4848c:	mov	r0, r5
   48490:	ldr	r1, [sp, #28]
   48494:	ldr	r2, [sp, #472]	; 0x1d8
   48498:	ldr	r3, [sp, #476]	; 0x1dc
   4849c:	stm	sp, {r1, ip}
   484a0:	add	r1, sp, #116	; 0x74
   484a4:	bl	3d3d8 <__assert_fail@plt+0x2ade4>
   484a8:	subs	fp, r0, #0
   484ac:	blt	48398 <__assert_fail@plt+0x35da4>
   484b0:	mov	r7, fp
   484b4:	lsl	r4, fp, #3
   484b8:	b	47fc0 <__assert_fail@plt+0x359cc>
   484bc:	ldr	r3, [r1]
   484c0:	ldr	r2, [sp, #472]	; 0x1d8
   484c4:	add	r3, r3, #1
   484c8:	cmp	r2, r3
   484cc:	ble	47f30 <__assert_fail@plt+0x3593c>
   484d0:	ldr	r2, [sp, #476]	; 0x1dc
   484d4:	ldr	r0, [sp, #476]	; 0x1dc
   484d8:	ldr	r2, [r2, r3, lsl #3]
   484dc:	add	r0, r0, r3, lsl #3
   484e0:	cmp	r2, r6
   484e4:	blt	48a14 <__assert_fail@plt+0x36420>
   484e8:	ldrb	r2, [r1, #6]
   484ec:	tst	r2, #8
   484f0:	beq	48890 <__assert_fail@plt+0x3629c>
   484f4:	ldr	r1, [sp, #28]
   484f8:	ldr	r3, [r1, r3, lsl #3]
   484fc:	cmn	r3, #1
   48500:	beq	48890 <__assert_fail@plt+0x3629c>
   48504:	ldr	r2, [sp, #32]
   48508:	ldr	r0, [sp, #476]	; 0x1dc
   4850c:	bl	12024 <memcpy@plt>
   48510:	ldr	r3, [sp, #476]	; 0x1dc
   48514:	ldr	r0, [r3, #4]
   48518:	b	47f30 <__assert_fail@plt+0x3593c>
   4851c:	ldr	r2, [sp, #136]	; 0x88
   48520:	cmp	r2, #0
   48524:	ble	4859c <__assert_fail@plt+0x35fa8>
   48528:	subs	r2, r2, #1
   4852c:	ldr	r0, [sp, #140]	; 0x8c
   48530:	moveq	r1, r2
   48534:	beq	48590 <__assert_fail@plt+0x35f9c>
   48538:	mov	r1, #0
   4853c:	add	r3, r2, r1
   48540:	lsr	r3, r3, #1
   48544:	ldr	ip, [r0, r3, lsl #2]
   48548:	cmp	fp, ip
   4854c:	bgt	486a0 <__assert_fail@plt+0x360ac>
   48550:	cmp	r3, r1
   48554:	bls	48590 <__assert_fail@plt+0x35f9c>
   48558:	add	r2, r3, r1
   4855c:	lsr	r2, r2, #1
   48560:	ldr	ip, [r0, r2, lsl #2]
   48564:	cmp	fp, ip
   48568:	ble	48580 <__assert_fail@plt+0x35f8c>
   4856c:	b	48694 <__assert_fail@plt+0x360a0>
   48570:	ldr	ip, [r0, r3, lsl #2]
   48574:	cmp	fp, ip
   48578:	bgt	486a0 <__assert_fail@plt+0x360ac>
   4857c:	mov	r2, r3
   48580:	add	r3, r1, r2
   48584:	cmp	r1, r2
   48588:	lsr	r3, r3, #1
   4858c:	bcc	48570 <__assert_fail@plt+0x35f7c>
   48590:	ldr	r3, [r0, r1, lsl #2]
   48594:	cmp	fp, r3
   48598:	beq	48968 <__assert_fail@plt+0x36374>
   4859c:	cmp	r5, #0
   485a0:	beq	48134 <__assert_fail@plt+0x35b40>
   485a4:	ldr	r6, [r5]
   485a8:	ldmib	r5, {r1, r3}
   485ac:	ldr	r7, [sp, #116]	; 0x74
   485b0:	add	r2, r6, #1
   485b4:	cmp	r2, r1
   485b8:	str	r2, [r5]
   485bc:	beq	48a4c <__assert_fail@plt+0x36458>
   485c0:	add	r2, r6, r6, lsl #1
   485c4:	ldr	r0, [sp, #44]	; 0x2c
   485c8:	lsl	r6, r2, #3
   485cc:	str	r7, [r3, r2, lsl #3]
   485d0:	add	r7, r3, r6
   485d4:	str	r4, [r7, #4]
   485d8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   485dc:	ldr	r3, [r5, #8]
   485e0:	str	r0, [r7, #8]
   485e4:	add	r3, r3, r6
   485e8:	ldr	r0, [r3, #8]
   485ec:	cmp	r0, #0
   485f0:	beq	48b1c <__assert_fail@plt+0x36528>
   485f4:	ldr	r4, [sp, #32]
   485f8:	ldr	r1, [sp, #476]	; 0x1dc
   485fc:	mov	r2, r4
   48600:	bl	12024 <memcpy@plt>
   48604:	ldr	r3, [r5, #8]
   48608:	mov	r2, r4
   4860c:	ldr	r1, [sp, #28]
   48610:	add	r3, r3, r6
   48614:	ldr	r0, [r3, #8]
   48618:	add	r0, r0, r4
   4861c:	bl	12024 <memcpy@plt>
   48620:	ldr	r2, [r5, #8]
   48624:	ldr	r3, [sp, #136]	; 0x88
   48628:	add	r6, r2, r6
   4862c:	cmp	r3, #0
   48630:	str	r3, [r6, #16]
   48634:	ble	48a38 <__assert_fail@plt+0x36444>
   48638:	lsl	r0, r3, #2
   4863c:	str	r3, [r6, #12]
   48640:	bl	3b49c <__assert_fail@plt+0x28ea8>
   48644:	cmp	r0, #0
   48648:	str	r0, [r6, #20]
   4864c:	beq	48b6c <__assert_fail@plt+0x36578>
   48650:	ldr	r2, [sp, #136]	; 0x88
   48654:	ldr	r1, [sp, #140]	; 0x8c
   48658:	lsl	r2, r2, #2
   4865c:	bl	12024 <memcpy@plt>
   48660:	b	48134 <__assert_fail@plt+0x35b40>
   48664:	ldr	ip, [sp, #116]	; 0x74
   48668:	add	r3, sp, #144	; 0x90
   4866c:	mov	r2, fp
   48670:	add	r1, r6, #128	; 0x80
   48674:	str	ip, [sp]
   48678:	bl	40524 <__assert_fail@plt+0x2df30>
   4867c:	subs	r8, r0, #0
   48680:	bne	48978 <__assert_fail@plt+0x36384>
   48684:	ldr	r1, [r6]
   48688:	ldr	r8, [sp, #116]	; 0x74
   4868c:	add	r1, r1, r4
   48690:	b	48188 <__assert_fail@plt+0x35b94>
   48694:	mov	r1, r2
   48698:	mov	r2, r3
   4869c:	mov	r3, r1
   486a0:	add	r1, r3, #1
   486a4:	cmp	r2, r1
   486a8:	bhi	4853c <__assert_fail@plt+0x35f48>
   486ac:	b	48590 <__assert_fail@plt+0x35f9c>
   486b0:	ldr	r3, [r1]
   486b4:	ldr	r2, [sp, #472]	; 0x1d8
   486b8:	add	r3, r3, #1
   486bc:	cmp	r2, r3
   486c0:	ble	488a0 <__assert_fail@plt+0x362ac>
   486c4:	ldr	r2, [sp, #476]	; 0x1dc
   486c8:	cmp	r5, #0
   486cc:	ldr	r1, [sp, #476]	; 0x1dc
   486d0:	add	r2, r2, r3, lsl #3
   486d4:	ldr	r0, [r1, r3, lsl #3]
   486d8:	ldr	r3, [r2, #4]
   486dc:	sub	r8, r3, r0
   486e0:	beq	48970 <__assert_fail@plt+0x3637c>
   486e4:	cmn	r0, #1
   486e8:	beq	48250 <__assert_fail@plt+0x35c5c>
   486ec:	cmn	r3, #1
   486f0:	beq	48250 <__assert_fail@plt+0x35c5c>
   486f4:	cmp	r8, #0
   486f8:	beq	488a8 <__assert_fail@plt+0x362b4>
   486fc:	ldr	r4, [sp, #116]	; 0x74
   48700:	ldr	r1, [sp, #148]	; 0x94
   48704:	ldr	r3, [sp, #172]	; 0xac
   48708:	sub	r3, r3, r4
   4870c:	cmp	r8, r3
   48710:	bgt	48250 <__assert_fail@plt+0x35c5c>
   48714:	add	r0, r1, r0
   48718:	mov	r2, r8
   4871c:	add	r1, r1, r4
   48720:	bl	12084 <memcmp@plt>
   48724:	cmp	r0, #0
   48728:	bne	48250 <__assert_fail@plt+0x35c5c>
   4872c:	ldr	r3, [r6, #12]
   48730:	add	r8, r8, r4
   48734:	ldr	fp, [r3, fp, lsl #2]
   48738:	b	481a8 <__assert_fail@plt+0x35bb4>
   4873c:	mov	r0, #0
   48740:	mov	r1, #2
   48744:	mov	r3, #16
   48748:	mov	r2, #0
   4874c:	strd	r0, [sp, #120]	; 0x78
   48750:	add	r0, sp, #280	; 0x118
   48754:	mov	ip, #0
   48758:	add	r1, sp, #292	; 0x124
   4875c:	add	lr, sp, #132	; 0x84
   48760:	strd	r2, [r0]
   48764:	mov	r5, ip
   48768:	ldr	r3, [sp, #12]
   4876c:	str	r1, [sp, #16]
   48770:	str	lr, [sp, #24]
   48774:	str	ip, [sp, #128]	; 0x80
   48778:	str	r1, [sp, #288]	; 0x120
   4877c:	ldr	fp, [r3, #72]	; 0x48
   48780:	str	ip, [sp, #132]	; 0x84
   48784:	str	ip, [sp, #136]	; 0x88
   48788:	str	ip, [sp, #140]	; 0x8c
   4878c:	mov	r3, #8
   48790:	add	r0, sp, #280	; 0x118
   48794:	ldr	r2, [sp, #16]
   48798:	ldr	r1, [sp, #472]	; 0x1d8
   4879c:	bl	4f9d4 <__assert_fail@plt+0x3d3e0>
   487a0:	cmp	r0, #0
   487a4:	bne	47ec0 <__assert_fail@plt+0x358cc>
   487a8:	ldr	r3, [sp, #16]
   487ac:	ldr	r0, [sp, #288]	; 0x120
   487b0:	cmp	r0, r3
   487b4:	beq	487bc <__assert_fail@plt+0x361c8>
   487b8:	bl	38b10 <__assert_fail@plt+0x2651c>
   487bc:	ldr	r1, [sp, #16]
   487c0:	mov	r2, #0
   487c4:	mov	r3, #16
   487c8:	cmp	r5, #0
   487cc:	str	r1, [sp, #288]	; 0x120
   487d0:	add	r1, sp, #280	; 0x118
   487d4:	strd	r2, [r1]
   487d8:	beq	47bc8 <__assert_fail@plt+0x355d4>
   487dc:	ldr	r3, [r5]
   487e0:	cmp	r3, #0
   487e4:	movgt	r4, #0
   487e8:	ldrgt	r6, [sp, #36]	; 0x24
   487ec:	ble	48824 <__assert_fail@plt+0x36230>
   487f0:	add	r6, r6, #1
   487f4:	ldr	r3, [r5, #8]
   487f8:	add	r3, r3, r4
   487fc:	ldr	r0, [r3, #20]
   48800:	bl	38b10 <__assert_fail@plt+0x2651c>
   48804:	ldr	r3, [r5, #8]
   48808:	add	r3, r3, r4
   4880c:	add	r4, r4, #24
   48810:	ldr	r0, [r3, #8]
   48814:	bl	38b10 <__assert_fail@plt+0x2651c>
   48818:	ldr	r3, [r5]
   4881c:	cmp	r6, r3
   48820:	blt	487f0 <__assert_fail@plt+0x361fc>
   48824:	mov	r3, #12
   48828:	ldr	r0, [r5, #8]
   4882c:	str	r3, [sp, #36]	; 0x24
   48830:	bl	38b10 <__assert_fail@plt+0x2651c>
   48834:	ldr	r4, [sp, #244]	; 0xf4
   48838:	b	477c8 <__assert_fail@plt+0x351d4>
   4883c:	ldr	r2, [sp, #472]	; 0x1d8
   48840:	ldr	r3, [sp, #476]	; 0x1dc
   48844:	sub	r1, r3, #8
   48848:	add	r1, r1, r2, lsl #3
   4884c:	mvn	r2, #0
   48850:	str	r2, [r3, #12]
   48854:	str	r2, [r3, #8]!
   48858:	cmp	r1, r3
   4885c:	bne	48850 <__assert_fail@plt+0x3625c>
   48860:	b	479ec <__assert_fail@plt+0x353f8>
   48864:	ldr	r1, [sp, #472]	; 0x1d8
   48868:	ldr	r2, [sp, #476]	; 0x1dc
   4886c:	add	r1, r0, r1
   48870:	add	r1, r2, r1, lsl #3
   48874:	mvn	r2, #0
   48878:	add	r3, r3, #8
   4887c:	str	r2, [r3, #-8]
   48880:	str	r2, [r3, #-4]
   48884:	cmp	r1, r3
   48888:	bne	48878 <__assert_fail@plt+0x36284>
   4888c:	b	47ae8 <__assert_fail@plt+0x354f4>
   48890:	ldr	r3, [sp, #476]	; 0x1dc
   48894:	str	r6, [r0, #4]
   48898:	ldr	r0, [r3, #4]
   4889c:	b	47f30 <__assert_fail@plt+0x3593c>
   488a0:	cmp	r5, #0
   488a4:	bne	48250 <__assert_fail@plt+0x35c5c>
   488a8:	mov	r1, fp
   488ac:	ldr	r0, [sp, #24]
   488b0:	bl	3d290 <__assert_fail@plt+0x2ac9c>
   488b4:	cmp	r0, #0
   488b8:	beq	48988 <__assert_fail@plt+0x36394>
   488bc:	ldr	r8, [sp, #116]	; 0x74
   488c0:	ldr	r3, [sp, #244]	; 0xf4
   488c4:	ldr	r0, [r3, r8, lsl #2]
   488c8:	ldr	r2, [r0, #8]
   488cc:	cmp	r2, #0
   488d0:	ble	4895c <__assert_fail@plt+0x36368>
   488d4:	ldr	r1, [r6, #20]
   488d8:	mov	r3, #12
   488dc:	subs	r2, r2, #1
   488e0:	ldr	ip, [r0, #12]
   488e4:	mla	fp, r3, fp, r1
   488e8:	moveq	r1, r2
   488ec:	ldr	r3, [fp, #8]
   488f0:	ldr	r0, [r3]
   488f4:	beq	48950 <__assert_fail@plt+0x3635c>
   488f8:	mov	r1, #0
   488fc:	add	r3, r2, r1
   48900:	lsr	r3, r3, #1
   48904:	ldr	lr, [ip, r3, lsl #2]
   48908:	cmp	r0, lr
   4890c:	bgt	48b0c <__assert_fail@plt+0x36518>
   48910:	cmp	r1, r3
   48914:	bcs	48950 <__assert_fail@plt+0x3635c>
   48918:	add	r2, r1, r3
   4891c:	lsr	r2, r2, #1
   48920:	ldr	lr, [ip, r2, lsl #2]
   48924:	cmp	r0, lr
   48928:	ble	48940 <__assert_fail@plt+0x3634c>
   4892c:	b	48b00 <__assert_fail@plt+0x3650c>
   48930:	ldr	lr, [ip, r3, lsl #2]
   48934:	cmp	r0, lr
   48938:	bgt	48b0c <__assert_fail@plt+0x36518>
   4893c:	mov	r2, r3
   48940:	add	r3, r1, r2
   48944:	cmp	r1, r2
   48948:	lsr	r3, r3, #1
   4894c:	bcc	48930 <__assert_fail@plt+0x3633c>
   48950:	ldr	fp, [ip, r1, lsl #2]
   48954:	cmp	r0, fp
   48958:	beq	48134 <__assert_fail@plt+0x35b40>
   4895c:	ldr	r1, [r6]
   48960:	add	r1, r1, r4
   48964:	b	48188 <__assert_fail@plt+0x35b94>
   48968:	mov	fp, r4
   4896c:	b	48134 <__assert_fail@plt+0x35b40>
   48970:	cmp	r8, #0
   48974:	beq	488a8 <__assert_fail@plt+0x362b4>
   48978:	ldr	r4, [sp, #116]	; 0x74
   4897c:	b	4872c <__assert_fail@plt+0x36138>
   48980:	cmn	fp, #2
   48984:	bne	48250 <__assert_fail@plt+0x35c5c>
   48988:	ldr	sl, [sp, #20]
   4898c:	ldr	r0, [sp, #140]	; 0x8c
   48990:	bl	38b10 <__assert_fail@plt+0x2651c>
   48994:	ldr	r3, [sp, #16]
   48998:	ldr	r0, [sp, #288]	; 0x120
   4899c:	cmp	r0, r3
   489a0:	beq	489a8 <__assert_fail@plt+0x363b4>
   489a4:	bl	38b10 <__assert_fail@plt+0x2651c>
   489a8:	ldr	r1, [sp, #16]
   489ac:	mov	r2, #0
   489b0:	mov	r3, #16
   489b4:	cmp	r5, #0
   489b8:	str	r1, [sp, #288]	; 0x120
   489bc:	add	r1, sp, #280	; 0x118
   489c0:	strd	r2, [r1]
   489c4:	beq	47bc8 <__assert_fail@plt+0x355d4>
   489c8:	ldr	r3, [r5]
   489cc:	cmp	r3, #0
   489d0:	movgt	r4, #0
   489d4:	ldrgt	r6, [sp, #36]	; 0x24
   489d8:	ble	48824 <__assert_fail@plt+0x36230>
   489dc:	add	r6, r6, #1
   489e0:	ldr	r3, [r5, #8]
   489e4:	add	r3, r3, r4
   489e8:	ldr	r0, [r3, #20]
   489ec:	bl	38b10 <__assert_fail@plt+0x2651c>
   489f0:	ldr	r3, [r5, #8]
   489f4:	add	r3, r3, r4
   489f8:	add	r4, r4, #24
   489fc:	ldr	r0, [r3, #8]
   48a00:	bl	38b10 <__assert_fail@plt+0x2651c>
   48a04:	ldr	r3, [r5]
   48a08:	cmp	r6, r3
   48a0c:	blt	489dc <__assert_fail@plt+0x363e8>
   48a10:	b	48824 <__assert_fail@plt+0x36230>
   48a14:	str	r6, [r0, #4]
   48a18:	ldr	r0, [sp, #28]
   48a1c:	ldr	r2, [sp, #32]
   48a20:	ldr	r1, [sp, #476]	; 0x1dc
   48a24:	bl	12024 <memcpy@plt>
   48a28:	ldr	r6, [sp, #116]	; 0x74
   48a2c:	ldr	r3, [sp, #476]	; 0x1dc
   48a30:	ldr	r0, [r3, #4]
   48a34:	b	47f30 <__assert_fail@plt+0x3593c>
   48a38:	mov	r3, #0
   48a3c:	str	r3, [r6, #12]
   48a40:	str	r3, [r6, #16]
   48a44:	str	r3, [r6, #20]
   48a48:	b	48134 <__assert_fail@plt+0x35b40>
   48a4c:	mov	r1, #48	; 0x30
   48a50:	mov	r0, r3
   48a54:	mul	r1, r1, r2
   48a58:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   48a5c:	subs	r3, r0, #0
   48a60:	beq	48b1c <__assert_fail@plt+0x36528>
   48a64:	ldr	r2, [r5, #4]
   48a68:	lsl	r2, r2, #1
   48a6c:	strd	r2, [r5, #4]
   48a70:	b	485c0 <__assert_fail@plt+0x35fcc>
   48a74:	ldr	sl, [sp, #20]
   48a78:	ldr	r0, [sp, #140]	; 0x8c
   48a7c:	bl	38b10 <__assert_fail@plt+0x2651c>
   48a80:	ldr	r3, [sp, #16]
   48a84:	ldr	r0, [sp, #288]	; 0x120
   48a88:	cmp	r0, r3
   48a8c:	beq	48a94 <__assert_fail@plt+0x364a0>
   48a90:	bl	38b10 <__assert_fail@plt+0x2651c>
   48a94:	ldr	r1, [sp, #16]
   48a98:	mov	r2, #0
   48a9c:	mov	r3, #16
   48aa0:	cmp	r5, #0
   48aa4:	str	r1, [sp, #288]	; 0x120
   48aa8:	add	r1, sp, #280	; 0x118
   48aac:	strd	r2, [r1]
   48ab0:	beq	48428 <__assert_fail@plt+0x35e34>
   48ab4:	ldr	r3, [r5]
   48ab8:	cmp	r3, #0
   48abc:	movgt	r6, #0
   48ac0:	movgt	r4, r6
   48ac4:	ble	48420 <__assert_fail@plt+0x35e2c>
   48ac8:	ldr	r3, [r5, #8]
   48acc:	add	r6, r6, #1
   48ad0:	add	r3, r3, r4
   48ad4:	ldr	r0, [r3, #20]
   48ad8:	bl	38b10 <__assert_fail@plt+0x2651c>
   48adc:	ldr	r3, [r5, #8]
   48ae0:	add	r3, r3, r4
   48ae4:	add	r4, r4, #24
   48ae8:	ldr	r0, [r3, #8]
   48aec:	bl	38b10 <__assert_fail@plt+0x2651c>
   48af0:	ldr	r3, [r5]
   48af4:	cmp	r6, r3
   48af8:	blt	48ac8 <__assert_fail@plt+0x364d4>
   48afc:	b	48420 <__assert_fail@plt+0x35e2c>
   48b00:	mov	r1, r2
   48b04:	mov	r2, r3
   48b08:	mov	r3, r1
   48b0c:	add	r1, r3, #1
   48b10:	cmp	r2, r1
   48b14:	bhi	488fc <__assert_fail@plt+0x36308>
   48b18:	b	48950 <__assert_fail@plt+0x3635c>
   48b1c:	ldr	sl, [sp, #20]
   48b20:	ldr	r0, [sp, #140]	; 0x8c
   48b24:	bl	38b10 <__assert_fail@plt+0x2651c>
   48b28:	ldr	r3, [sp, #16]
   48b2c:	ldr	r0, [sp, #288]	; 0x120
   48b30:	cmp	r0, r3
   48b34:	bne	489a4 <__assert_fail@plt+0x363b0>
   48b38:	mov	r2, #0
   48b3c:	mov	r3, #16
   48b40:	add	r1, sp, #280	; 0x118
   48b44:	strd	r2, [r1]
   48b48:	b	489c8 <__assert_fail@plt+0x363d4>
   48b4c:	ldr	sl, [sp, #20]
   48b50:	ldr	r0, [sp, #140]	; 0x8c
   48b54:	bl	38b10 <__assert_fail@plt+0x2651c>
   48b58:	ldr	r3, [sp, #16]
   48b5c:	ldr	r0, [sp, #288]	; 0x120
   48b60:	cmp	r0, r3
   48b64:	bne	48424 <__assert_fail@plt+0x35e30>
   48b68:	b	48428 <__assert_fail@plt+0x35e34>
   48b6c:	str	r0, [r6, #12]
   48b70:	str	r0, [r6, #16]
   48b74:	ldr	sl, [sp, #20]
   48b78:	b	48b20 <__assert_fail@plt+0x3652c>
   48b7c:	ldr	sl, [sp, #68]	; 0x44
   48b80:	ldr	r3, [sp, #472]	; 0x1d8
   48b84:	b	47998 <__assert_fail@plt+0x353a4>
   48b88:	add	r5, sp, #120	; 0x78
   48b8c:	b	4878c <__assert_fail@plt+0x36198>
   48b90:	mov	r2, #0
   48b94:	mov	r3, #16
   48b98:	add	r1, sp, #280	; 0x118
   48b9c:	strd	r2, [r1]
   48ba0:	b	483d8 <__assert_fail@plt+0x35de4>
   48ba4:	ldr	r1, [sp, #168]	; 0xa8
   48ba8:	sub	r2, r5, r1
   48bac:	ldr	r0, [sp, #172]	; 0xac
   48bb0:	mov	r3, r4
   48bb4:	cmp	r0, r2
   48bb8:	bls	48bc8 <__assert_fail@plt+0x365d4>
   48bbc:	ldr	r3, [sp, #148]	; 0x94
   48bc0:	ldrb	r3, [r3, r2]
   48bc4:	add	r3, r4, r3
   48bc8:	ldrb	r3, [r3]
   48bcc:	cmp	r3, #0
   48bd0:	bne	46e74 <__assert_fail@plt+0x34880>
   48bd4:	ldr	r2, [sp, #76]	; 0x4c
   48bd8:	ldr	r3, [sp, #96]	; 0x60
   48bdc:	add	r5, r5, r3
   48be0:	ldr	r3, [sp, #64]	; 0x40
   48be4:	str	r5, [sp, #112]	; 0x70
   48be8:	cmp	r5, r3
   48bec:	movle	r3, #0
   48bf0:	movgt	r3, #1
   48bf4:	cmp	r5, r2
   48bf8:	orrlt	r3, r3, #1
   48bfc:	cmp	r3, #0
   48c00:	beq	47c00 <__assert_fail@plt+0x3560c>
   48c04:	b	47308 <__assert_fail@plt+0x34d14>
   48c08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   48c0c:	mov	r5, r1
   48c10:	strd	r6, [sp, #8]
   48c14:	strd	r8, [sp, #16]
   48c18:	mov	r9, r0
   48c1c:	strd	sl, [sp, #24]
   48c20:	str	lr, [sp, #32]
   48c24:	sub	sp, sp, #164	; 0xa4
   48c28:	ldr	sl, [r1]
   48c2c:	str	r2, [sp, #20]
   48c30:	ldrb	r2, [r2, #4]
   48c34:	str	r3, [sp, #32]
   48c38:	sub	r3, r2, #1
   48c3c:	cmp	r3, #35	; 0x23
   48c40:	ldrls	pc, [pc, r3, lsl #2]
   48c44:	b	4984c <__assert_fail@plt+0x37258>
   48c48:	andeq	r9, r4, ip, ror #7
   48c4c:	muleq	r4, r8, r1
   48c50:	andeq	r9, r4, ip, asr #16
   48c54:	andeq	r9, r4, r4, asr #12
   48c58:			; <UNDEFINED> instruction: 0x000495b8
   48c5c:	andeq	r9, r4, ip, asr #16
   48c60:	andeq	r9, r4, ip, asr #16
   48c64:	strdeq	r9, [r4], -r8
   48c68:	andeq	r9, r4, r4, ror #16
   48c6c:	muleq	r4, r8, r1
   48c70:	andeq	r8, r4, r4, ror #25
   48c74:	andeq	r9, r4, r0, asr #3
   48c78:	andeq	r9, r4, ip, asr #16
   48c7c:	andeq	r9, r4, ip, asr #16
   48c80:	andeq	r9, r4, ip, asr #16
   48c84:	andeq	r9, r4, ip, asr #16
   48c88:	andeq	r9, r4, ip, asr #16
   48c8c:	andeq	r8, r4, r4, ror #25
   48c90:	andeq	r8, r4, r4, ror #25
   48c94:	strdeq	r9, [r4], -r8
   48c98:	andeq	r9, r4, ip, asr #16
   48c9c:	andeq	r9, r4, ip, asr #16
   48ca0:	ldrdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   48ca4:	andeq	r8, r4, r0, lsl #26
   48ca8:	andeq	r9, r4, ip, asr #16
   48cac:	andeq	r9, r4, ip, asr #16
   48cb0:	andeq	r9, r4, ip, asr #16
   48cb4:	andeq	r9, r4, ip, asr #16
   48cb8:	andeq	r9, r4, ip, asr #16
   48cbc:	andeq	r9, r4, ip, asr #16
   48cc0:	andeq	r9, r4, ip, asr #16
   48cc4:	muleq	r4, r0, r3
   48cc8:	muleq	r4, r0, r3
   48ccc:	andeq	r9, r4, ip, lsr #16
   48cd0:	andeq	r9, r4, ip, lsr #16
   48cd4:	andeq	r9, r4, ip, asr #16
   48cd8:	ldr	r3, [sp, #32]
   48cdc:	tst	r3, #16777216	; 0x1000000
   48ce0:	bne	49a58 <__assert_fail@plt+0x37464>
   48ce4:	ldr	r3, [sp, #32]
   48ce8:	tst	r3, #32
   48cec:	bne	49a58 <__assert_fail@plt+0x37464>
   48cf0:	tst	r3, #16
   48cf4:	bne	4a508 <__assert_fail@plt+0x37f14>
   48cf8:	cmp	r2, #9
   48cfc:	beq	49864 <__assert_fail@plt+0x37270>
   48d00:	ldr	r3, [sp, #20]
   48d04:	mov	r4, #1
   48d08:	strb	r4, [r3, #4]
   48d0c:	ldr	r2, [sl, #64]	; 0x40
   48d10:	cmp	r2, #31
   48d14:	beq	4a448 <__assert_fail@plt+0x37e54>
   48d18:	ldr	r0, [sl, #56]	; 0x38
   48d1c:	lsl	r3, r2, #5
   48d20:	add	r4, r2, r4
   48d24:	add	r2, r3, #4
   48d28:	add	r1, r0, r3
   48d2c:	add	r3, r3, #16
   48d30:	str	r4, [sl, #64]	; 0x40
   48d34:	adds	r2, r0, r2
   48d38:	add	r0, r0, r3
   48d3c:	ldr	r3, [sp, #20]
   48d40:	mov	ip, #0
   48d44:	mvn	lr, #0
   48d48:	str	r2, [sp, #28]
   48d4c:	str	ip, [r1, #4]
   48d50:	str	ip, [r1, #8]
   48d54:	str	ip, [r1, #12]
   48d58:	ldrd	r2, [r3]
   48d5c:	strd	r2, [r1, #24]
   48d60:	ldrb	r3, [r0, #14]
   48d64:	bic	r3, r3, #12
   48d68:	strb	r3, [r0, #14]
   48d6c:	str	ip, [r1, #16]
   48d70:	str	ip, [r1, #20]
   48d74:	str	lr, [r1, #32]
   48d78:	beq	495a0 <__assert_fail@plt+0x36fac>
   48d7c:	ldr	r6, [sp, #20]
   48d80:	mov	r1, r9
   48d84:	mov	r5, #0
   48d88:	ldr	r4, [sp, #32]
   48d8c:	mov	r0, r6
   48d90:	and	r3, r4, #2097152	; 0x200000
   48d94:	mov	r2, r4
   48d98:	str	r3, [sp, #52]	; 0x34
   48d9c:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   48da0:	ldr	r3, [r9, #40]	; 0x28
   48da4:	and	r2, r4, #16777216	; 0x1000000
   48da8:	ldrb	r8, [r6, #4]
   48dac:	str	r2, [sp, #36]	; 0x24
   48db0:	add	r0, r3, r0
   48db4:	str	r0, [r9, #40]	; 0x28
   48db8:	cmp	r8, #23
   48dbc:	cmpne	r8, #11
   48dc0:	sub	r2, r8, #18
   48dc4:	moveq	r3, #1
   48dc8:	movne	r3, #0
   48dcc:	cmp	r2, #1
   48dd0:	orrls	r3, r3, #1
   48dd4:	sub	r6, r8, #18
   48dd8:	clz	r6, r6
   48ddc:	cmp	r3, #0
   48de0:	lsr	r6, r6, #5
   48de4:	beq	491a0 <__assert_fail@plt+0x36bac>
   48de8:	ldr	r3, [sp, #20]
   48dec:	cmp	r8, #23
   48df0:	add	r7, sp, #96	; 0x60
   48df4:	ldr	r4, [r9, #40]	; 0x28
   48df8:	ldrd	r2, [r3]
   48dfc:	strd	r2, [sp, #96]	; 0x60
   48e00:	beq	49ba8 <__assert_fail@plt+0x375b4>
   48e04:	cmp	r8, #19
   48e08:	beq	49adc <__assert_fail@plt+0x374e8>
   48e0c:	mov	r1, r9
   48e10:	ldr	r0, [sp, #20]
   48e14:	ldr	r2, [sp, #32]
   48e18:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   48e1c:	ldr	r3, [r9, #40]	; 0x28
   48e20:	ldr	r2, [sp, #28]
   48e24:	add	r0, r3, r0
   48e28:	cmp	r2, #0
   48e2c:	str	r0, [r9, #40]	; 0x28
   48e30:	beq	49d14 <__assert_fail@plt+0x37720>
   48e34:	cmp	r8, #18
   48e38:	beq	4a33c <__assert_fail@plt+0x37d48>
   48e3c:	ldrb	r3, [r2, #24]
   48e40:	mov	r7, r2
   48e44:	cmp	r3, #17
   48e48:	beq	49c5c <__assert_fail@plt+0x37668>
   48e4c:	mov	r6, #0
   48e50:	add	r8, sp, #128	; 0x80
   48e54:	str	r6, [sp, #40]	; 0x28
   48e58:	mvn	r3, #0
   48e5c:	mov	fp, #11
   48e60:	str	r3, [sp, #24]
   48e64:	mov	r2, #0
   48e68:	mov	r3, #0
   48e6c:	strd	r2, [r8]
   48e70:	ldr	r1, [sl, #64]	; 0x40
   48e74:	cmp	r1, #31
   48e78:	beq	49d30 <__assert_fail@plt+0x3773c>
   48e7c:	ldr	r4, [sl, #56]	; 0x38
   48e80:	lsl	r3, r1, #5
   48e84:	add	r1, r1, #1
   48e88:	add	r0, r3, #4
   48e8c:	add	r2, r4, r3
   48e90:	add	r3, r3, #16
   48e94:	str	r1, [sl, #64]	; 0x40
   48e98:	add	r3, r4, r3
   48e9c:	add	r4, r4, r0
   48ea0:	stmib	r2, {r5, r7}
   48ea4:	mvn	ip, #0
   48ea8:	cmp	r4, #0
   48eac:	str	r5, [r2, #12]
   48eb0:	strb	fp, [sp, #132]	; 0x84
   48eb4:	ldrd	r0, [r8]
   48eb8:	strd	r0, [r2, #24]
   48ebc:	ldrb	r0, [r3, #14]
   48ec0:	bic	r0, r0, #12
   48ec4:	strb	r0, [r3, #14]
   48ec8:	str	r5, [r2, #16]
   48ecc:	str	r5, [r2, #20]
   48ed0:	str	ip, [r2, #32]
   48ed4:	str	r4, [r7]
   48ed8:	beq	49abc <__assert_fail@plt+0x374c8>
   48edc:	ldr	r3, [sp, #24]
   48ee0:	add	r1, r6, #2
   48ee4:	cmp	r3, r1
   48ee8:	blt	49988 <__assert_fail@plt+0x37394>
   48eec:	mov	fp, r4
   48ef0:	mov	r2, r8
   48ef4:	str	sl, [sp, #16]
   48ef8:	str	r9, [sp, #44]	; 0x2c
   48efc:	mov	r9, r1
   48f00:	mov	r6, r7
   48f04:	mov	r8, r2
   48f08:	mov	r7, r2
   48f0c:	b	48f14 <__assert_fail@plt+0x36920>
   48f10:	mov	r6, r3
   48f14:	ldr	r2, [sl, #64]	; 0x40
   48f18:	cmp	r2, #31
   48f1c:	beq	49a7c <__assert_fail@plt+0x37488>
   48f20:	ldr	r0, [sl, #56]	; 0x38
   48f24:	lsl	r3, r2, #5
   48f28:	add	r2, r2, #1
   48f2c:	add	lr, r3, #4
   48f30:	add	ip, r0, r3
   48f34:	add	r3, r3, #16
   48f38:	str	r2, [sl, #64]	; 0x40
   48f3c:	add	r1, r0, r3
   48f40:	add	r0, r0, lr
   48f44:	str	r5, [ip, #4]
   48f48:	mvn	lr, #0
   48f4c:	cmp	r0, #0
   48f50:	str	r5, [ip, #8]
   48f54:	str	r5, [ip, #12]
   48f58:	ldrd	r2, [r6, #20]
   48f5c:	strd	r2, [ip, #24]
   48f60:	ldrb	r3, [r1, #14]
   48f64:	bic	r3, r3, #12
   48f68:	strb	r3, [r1, #14]
   48f6c:	str	r5, [ip, #16]
   48f70:	str	r5, [ip, #20]
   48f74:	str	lr, [ip, #32]
   48f78:	str	r0, [r8]
   48f7c:	beq	49aa8 <__assert_fail@plt+0x374b4>
   48f80:	str	fp, [ip, #4]
   48f84:	ldr	fp, [r8]
   48f88:	ldrb	r3, [fp, #26]
   48f8c:	orr	r3, r3, #4
   48f90:	strb	r3, [fp, #26]
   48f94:	ldr	r3, [r6, #4]
   48f98:	cmp	r3, #0
   48f9c:	addne	r8, fp, #4
   48fa0:	bne	48f10 <__assert_fail@plt+0x3691c>
   48fa4:	ldr	r2, [r6, #8]
   48fa8:	cmp	r2, #0
   48fac:	cmpne	r2, r3
   48fb0:	mov	r3, r6
   48fb4:	bne	49a70 <__assert_fail@plt+0x3747c>
   48fb8:	ldr	r2, [r6]
   48fbc:	ldr	fp, [fp]
   48fc0:	subs	r6, r2, #0
   48fc4:	bne	48fa4 <__assert_fail@plt+0x369b0>
   48fc8:	mov	r2, r7
   48fcc:	ldr	r7, [sp, #128]	; 0x80
   48fd0:	str	sl, [sp, #16]
   48fd4:	mov	r0, #0
   48fd8:	mov	r1, #0
   48fdc:	strd	r0, [r2]
   48fe0:	ldr	r1, [sp, #16]
   48fe4:	ldr	r0, [r1, #64]	; 0x40
   48fe8:	cmp	r0, #31
   48fec:	beq	49b30 <__assert_fail@plt+0x3753c>
   48ff0:	lsl	r3, r0, #5
   48ff4:	add	ip, r0, #1
   48ff8:	ldr	r0, [r1, #56]	; 0x38
   48ffc:	add	r8, r3, #4
   49000:	add	r6, r0, r3
   49004:	mov	lr, #16
   49008:	str	ip, [r1, #64]	; 0x40
   4900c:	add	r3, r3, lr
   49010:	add	r8, r0, r8
   49014:	str	r5, [r6, #4]
   49018:	add	r3, r0, r3
   4901c:	mvn	ip, #0
   49020:	str	r4, [r6, #8]
   49024:	cmp	r7, #0
   49028:	str	r7, [r6, #12]
   4902c:	strb	lr, [sp, #132]	; 0x84
   49030:	ldrd	sl, [r2]
   49034:	strd	sl, [r6, #24]
   49038:	ldrb	lr, [r3, #14]
   4903c:	bic	lr, lr, #12
   49040:	strb	lr, [r3, #14]
   49044:	str	r5, [r6, #16]
   49048:	str	r5, [r6, #20]
   4904c:	str	ip, [r6, #32]
   49050:	str	r8, [r4]
   49054:	beq	49abc <__assert_fail@plt+0x374c8>
   49058:	cmp	r8, #0
   4905c:	str	r8, [r7]
   49060:	beq	49abc <__assert_fail@plt+0x374c8>
   49064:	mov	sl, #0
   49068:	mov	fp, #0
   4906c:	strd	sl, [r2]
   49070:	ldr	r3, [r1, #64]	; 0x40
   49074:	cmp	r3, #31
   49078:	lslne	ip, r3, #5
   4907c:	addne	lr, r3, #1
   49080:	addne	r4, ip, #4
   49084:	beq	49b6c <__assert_fail@plt+0x37578>
   49088:	add	r3, r0, ip
   4908c:	str	lr, [r1, #64]	; 0x40
   49090:	mov	lr, #10
   49094:	add	ip, ip, #16
   49098:	add	r4, r0, r4
   4909c:	stmib	r3, {r5, r8}
   490a0:	add	r0, r0, ip
   490a4:	mvn	ip, #0
   490a8:	str	r5, [r3, #12]
   490ac:	cmp	r4, #0
   490b0:	strb	lr, [sp, #132]	; 0x84
   490b4:	ldrd	sl, [r2]
   490b8:	strd	sl, [r3, #24]
   490bc:	ldrb	lr, [r0, #14]
   490c0:	bic	lr, lr, #12
   490c4:	strb	lr, [r0, #14]
   490c8:	str	r5, [r3, #16]
   490cc:	str	r5, [r3, #20]
   490d0:	str	ip, [r3, #32]
   490d4:	str	r4, [r6, #4]
   490d8:	beq	49abc <__assert_fail@plt+0x374c8>
   490dc:	ldr	r3, [sp, #24]
   490e0:	add	r9, r9, #1
   490e4:	cmp	r3, r9
   490e8:	blt	4997c <__assert_fail@plt+0x37388>
   490ec:	mov	sl, r1
   490f0:	ldr	fp, [r7]
   490f4:	b	48f00 <__assert_fail@plt+0x3690c>
   490f8:	ldr	r4, [r5, #24]
   490fc:	mov	r1, r0
   49100:	ldr	r6, [sp, #20]
   49104:	ldr	r7, [sp, #32]
   49108:	add	r3, r4, #1
   4910c:	mov	r0, r6
   49110:	str	r3, [r5, #24]
   49114:	orr	r2, r7, #8388608	; 0x800000
   49118:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   4911c:	ldr	r3, [r9, #40]	; 0x28
   49120:	ldrb	r2, [r6, #4]
   49124:	add	r3, r3, r0
   49128:	cmp	r2, #9
   4912c:	str	r3, [r9, #40]	; 0x28
   49130:	moveq	r5, #0
   49134:	beq	49884 <__assert_fail@plt+0x37290>
   49138:	ldr	r3, [sp, #200]	; 0xc8
   4913c:	mov	r1, r5
   49140:	mov	r2, r6
   49144:	add	r0, r3, #1
   49148:	ldr	r3, [sp, #204]	; 0xcc
   4914c:	stm	sp, {r0, r3}
   49150:	mov	r3, r7
   49154:	mov	r0, r9
   49158:	bl	4b268 <__assert_fail@plt+0x38c74>
   4915c:	ldr	r3, [sp, #204]	; 0xcc
   49160:	mov	r5, r0
   49164:	ldr	r3, [r3]
   49168:	cmp	r3, #0
   4916c:	bne	49198 <__assert_fail@plt+0x36ba4>
   49170:	ldr	r3, [sp, #20]
   49174:	ldrb	r3, [r3, #4]
   49178:	cmp	r3, #9
   4917c:	beq	49884 <__assert_fail@plt+0x37290>
   49180:	cmp	r0, #0
   49184:	beq	4918c <__assert_fail@plt+0x36b98>
   49188:	bl	4082c <__assert_fail@plt+0x2e238>
   4918c:	ldr	r2, [sp, #204]	; 0xcc
   49190:	mov	r3, #8
   49194:	str	r3, [r2]
   49198:	mov	r3, #0
   4919c:	str	r3, [sp, #28]
   491a0:	ldr	r0, [sp, #28]
   491a4:	add	sp, sp, #164	; 0xa4
   491a8:	ldrd	r4, [sp]
   491ac:	ldrd	r6, [sp, #8]
   491b0:	ldrd	r8, [sp, #16]
   491b4:	ldrd	sl, [sp, #24]
   491b8:	add	sp, sp, #32
   491bc:	pop	{pc}		; (ldr pc, [sp], #4)
   491c0:	ldr	r3, [sp, #20]
   491c4:	ldr	r5, [r3]
   491c8:	movw	r3, #783	; 0x30f
   491cc:	tst	r5, r3
   491d0:	beq	49230 <__assert_fail@plt+0x36c3c>
   491d4:	ldrb	r3, [sl, #88]	; 0x58
   491d8:	ands	r4, r3, #16
   491dc:	bne	49230 <__assert_fail@plt+0x36c3c>
   491e0:	orr	r3, r3, #16
   491e4:	ands	r2, r3, #8
   491e8:	mov	r1, r3
   491ec:	strb	r3, [sl, #88]	; 0x58
   491f0:	bne	4ad94 <__assert_fail@plt+0x387a0>
   491f4:	mov	r3, #0
   491f8:	movt	r3, #1023	; 0x3ff
   491fc:	tst	r1, #4
   49200:	mvn	r1, #2013265921	; 0x78000001
   49204:	strd	r2, [sl, #96]	; 0x60
   49208:	mvn	r3, #-134217727	; 0xf8000001
   4920c:	str	r1, [sl, #104]	; 0x68
   49210:	str	r3, [sl, #108]	; 0x6c
   49214:	beq	4ad14 <__assert_fail@plt+0x38720>
   49218:	ldr	r3, [sp, #20]
   4921c:	str	r2, [sl, #112]	; 0x70
   49220:	str	r2, [sl, #116]	; 0x74
   49224:	str	r2, [sl, #120]	; 0x78
   49228:	str	r2, [sl, #124]	; 0x7c
   4922c:	ldr	r5, [r3]
   49230:	sub	r3, r5, #256	; 0x100
   49234:	add	r0, sl, #56	; 0x38
   49238:	bics	r3, r3, #256	; 0x100
   4923c:	add	r1, sl, #64	; 0x40
   49240:	bne	4a430 <__assert_fail@plt+0x37e3c>
   49244:	cmp	r5, #256	; 0x100
   49248:	beq	4a5d0 <__assert_fail@plt+0x37fdc>
   4924c:	ldr	r4, [sp, #20]
   49250:	mov	r3, #5
   49254:	mov	r2, r4
   49258:	str	r3, [r4]
   4925c:	bl	3fe6c <__assert_fail@plt+0x2d878>
   49260:	mov	r5, r0
   49264:	mov	r3, #10
   49268:	str	r3, [r4]
   4926c:	ldr	r2, [sl, #64]	; 0x40
   49270:	cmp	r2, #31
   49274:	beq	4a96c <__assert_fail@plt+0x38378>
   49278:	ldr	r0, [sl, #56]	; 0x38
   4927c:	lsl	r3, r2, #5
   49280:	add	r2, r2, #1
   49284:	add	r4, r3, #4
   49288:	add	r1, r0, r3
   4928c:	add	r3, r3, #16
   49290:	str	r2, [sl, #64]	; 0x40
   49294:	add	r4, r0, r4
   49298:	add	r0, r0, r3
   4929c:	ldr	r3, [sp, #20]
   492a0:	mov	ip, #0
   492a4:	mvn	lr, #0
   492a8:	str	ip, [r1, #4]
   492ac:	str	ip, [r1, #8]
   492b0:	str	ip, [r1, #12]
   492b4:	ldrd	r2, [r3]
   492b8:	strd	r2, [r1, #24]
   492bc:	ldrb	r3, [r0, #14]
   492c0:	bic	r3, r3, #12
   492c4:	strb	r3, [r0, #14]
   492c8:	str	ip, [r1, #16]
   492cc:	str	ip, [r1, #20]
   492d0:	str	lr, [r1, #32]
   492d4:	mov	r2, #0
   492d8:	mov	r3, #0
   492dc:	strd	r2, [sp, #128]	; 0x80
   492e0:	ldr	r2, [sl, #64]	; 0x40
   492e4:	cmp	r2, #31
   492e8:	beq	4a940 <__assert_fail@plt+0x3834c>
   492ec:	ldr	r0, [sl, #56]	; 0x38
   492f0:	lsl	r3, r2, #5
   492f4:	add	r2, r2, #1
   492f8:	add	r6, r3, #4
   492fc:	add	ip, r0, r3
   49300:	mov	lr, #0
   49304:	str	r2, [sl, #64]	; 0x40
   49308:	mov	r2, #10
   4930c:	add	r3, r3, #16
   49310:	str	lr, [ip, #4]
   49314:	add	r1, r0, r3
   49318:	add	r6, r0, r6
   4931c:	str	r5, [ip, #8]
   49320:	mvn	r0, #0
   49324:	cmp	r5, lr
   49328:	str	r4, [ip, #12]
   4932c:	str	r6, [sp, #28]
   49330:	strb	r2, [sp, #132]	; 0x84
   49334:	ldrd	r2, [sp, #128]	; 0x80
   49338:	strd	r2, [ip, #24]
   4933c:	ldrb	r3, [r1, #14]
   49340:	bic	r3, r3, #12
   49344:	strb	r3, [r1, #14]
   49348:	str	lr, [ip, #16]
   4934c:	str	lr, [ip, #20]
   49350:	str	r0, [ip, #32]
   49354:	beq	4a5f4 <__assert_fail@plt+0x38000>
   49358:	cmp	r4, lr
   4935c:	str	r6, [r5]
   49360:	beq	495a0 <__assert_fail@plt+0x36fac>
   49364:	cmp	r6, lr
   49368:	str	r6, [r4]
   4936c:	beq	495a0 <__assert_fail@plt+0x36fac>
   49370:	mov	r1, r9
   49374:	ldr	r0, [sp, #20]
   49378:	ldr	r2, [sp, #32]
   4937c:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   49380:	ldr	r3, [r9, #40]	; 0x28
   49384:	add	r3, r3, r0
   49388:	str	r3, [r9, #40]	; 0x28
   4938c:	b	491a0 <__assert_fail@plt+0x36bac>
   49390:	sub	r1, r2, #33	; 0x21
   49394:	movw	r3, #26188	; 0x664c
   49398:	movt	r3, #5
   4939c:	clz	r1, r1
   493a0:	lsr	r1, r1, #5
   493a4:	movw	r2, #26124	; 0x660c
   493a8:	movt	r2, #5
   493ac:	str	r1, [sp]
   493b0:	mov	r0, sl
   493b4:	ldr	r1, [sp, #204]	; 0xcc
   493b8:	str	r1, [sp, #4]
   493bc:	ldr	r1, [r9, #64]	; 0x40
   493c0:	bl	464a4 <__assert_fail@plt+0x33eb0>
   493c4:	ldr	r3, [sp, #204]	; 0xcc
   493c8:	str	r0, [sp, #28]
   493cc:	ldr	r2, [r3]
   493d0:	clz	r3, r0
   493d4:	lsr	r3, r3, #5
   493d8:	cmp	r2, #0
   493dc:	moveq	r3, #0
   493e0:	cmp	r3, #0
   493e4:	beq	48d7c <__assert_fail@plt+0x36788>
   493e8:	b	49198 <__assert_fail@plt+0x36ba4>
   493ec:	ldr	r2, [sl, #64]	; 0x40
   493f0:	cmp	r2, #31
   493f4:	beq	4a81c <__assert_fail@plt+0x38228>
   493f8:	ldr	r0, [sl, #56]	; 0x38
   493fc:	lsl	r3, r2, #5
   49400:	add	r2, r2, #1
   49404:	add	ip, r3, #4
   49408:	add	r1, r0, r3
   4940c:	add	r3, r3, #16
   49410:	str	r2, [sl, #64]	; 0x40
   49414:	adds	r2, r0, ip
   49418:	add	r0, r0, r3
   4941c:	ldr	r3, [sp, #20]
   49420:	mov	r4, #0
   49424:	mvn	r7, #0
   49428:	str	r2, [sp, #28]
   4942c:	str	r4, [r1, #4]
   49430:	str	r4, [r1, #8]
   49434:	str	r4, [r1, #12]
   49438:	ldrd	r2, [r3]
   4943c:	strd	r2, [r1, #24]
   49440:	ldrb	r3, [r0, #14]
   49444:	bic	r3, r3, #12
   49448:	strb	r3, [r0, #14]
   4944c:	str	r4, [r1, #16]
   49450:	str	r4, [r1, #20]
   49454:	str	r7, [r1, #32]
   49458:	beq	495a0 <__assert_fail@plt+0x36fac>
   4945c:	ldr	r3, [sl, #92]	; 0x5c
   49460:	cmp	r3, #1
   49464:	ble	48d7c <__assert_fail@plt+0x36788>
   49468:	ldr	r8, [sp, #20]
   4946c:	ldr	r5, [sp, #28]
   49470:	ldr	r6, [sp, #32]
   49474:	b	49484 <__assert_fail@plt+0x36e90>
   49478:	subs	r5, ip, #0
   4947c:	str	ip, [fp]
   49480:	beq	495a0 <__assert_fail@plt+0x36fac>
   49484:	ldr	r3, [r9, #40]	; 0x28
   49488:	ldr	r2, [r9, #56]	; 0x38
   4948c:	cmp	r2, r3
   49490:	ble	4a5c8 <__assert_fail@plt+0x37fd4>
   49494:	ldr	r2, [r9, #28]
   49498:	cmp	r3, r2
   4949c:	beq	4a5c8 <__assert_fail@plt+0x37fd4>
   494a0:	ldr	r2, [r9, #8]
   494a4:	ldr	r3, [r2, r3, lsl #2]
   494a8:	cmn	r3, #1
   494ac:	bne	4a5c8 <__assert_fail@plt+0x37fd4>
   494b0:	mov	r2, r6
   494b4:	mov	r1, r9
   494b8:	mov	r0, r8
   494bc:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   494c0:	ldr	r3, [r9, #40]	; 0x28
   494c4:	add	r3, r3, r0
   494c8:	str	r3, [r9, #40]	; 0x28
   494cc:	ldr	r2, [sl, #64]	; 0x40
   494d0:	cmp	r2, #31
   494d4:	beq	4a58c <__assert_fail@plt+0x37f98>
   494d8:	ldr	fp, [sl, #56]	; 0x38
   494dc:	lsl	r3, r2, #5
   494e0:	add	r2, r2, #1
   494e4:	add	r0, r3, #4
   494e8:	add	ip, fp, r3
   494ec:	add	r3, r3, #16
   494f0:	str	r2, [sl, #64]	; 0x40
   494f4:	add	r1, fp, r3
   494f8:	add	fp, fp, r0
   494fc:	str	r4, [ip, #4]
   49500:	str	r4, [ip, #8]
   49504:	str	r4, [ip, #12]
   49508:	ldrd	r2, [r8]
   4950c:	strd	r2, [ip, #24]
   49510:	ldrb	r3, [r1, #14]
   49514:	bic	r3, r3, #12
   49518:	strb	r3, [r1, #14]
   4951c:	str	r4, [ip, #16]
   49520:	str	r4, [ip, #20]
   49524:	str	r7, [ip, #32]
   49528:	mov	r2, #0
   4952c:	mov	r3, #0
   49530:	strd	r2, [sp, #128]	; 0x80
   49534:	add	r2, sp, #128	; 0x80
   49538:	ldr	r1, [sl, #64]	; 0x40
   4953c:	cmp	r1, #31
   49540:	beq	4a558 <__assert_fail@plt+0x37f64>
   49544:	ldr	r0, [sl, #56]	; 0x38
   49548:	lsl	r3, r1, #5
   4954c:	add	lr, r1, #1
   49550:	add	ip, r3, #4
   49554:	add	r1, r0, r3
   49558:	str	lr, [sl, #64]	; 0x40
   4955c:	mov	lr, #16
   49560:	add	r3, r3, lr
   49564:	add	ip, r0, ip
   49568:	add	r0, r0, r3
   4956c:	stmib	r1, {r4, r5, fp}
   49570:	cmp	fp, #0
   49574:	strb	lr, [sp, #132]	; 0x84
   49578:	ldrd	r2, [r2]
   4957c:	strd	r2, [r1, #24]
   49580:	ldrb	r3, [r0, #14]
   49584:	bic	r3, r3, #12
   49588:	strb	r3, [r0, #14]
   4958c:	str	r4, [r1, #16]
   49590:	str	r4, [r1, #20]
   49594:	str	r7, [r1, #32]
   49598:	str	ip, [r5]
   4959c:	bne	49478 <__assert_fail@plt+0x36e84>
   495a0:	mov	r2, #0
   495a4:	mov	r3, #12
   495a8:	str	r2, [sp, #28]
   495ac:	ldr	r2, [sp, #204]	; 0xcc
   495b0:	str	r3, [r2]
   495b4:	b	491a0 <__assert_fail@plt+0x36bac>
   495b8:	ldr	r2, [sl, #64]	; 0x40
   495bc:	cmp	r2, #31
   495c0:	beq	4a85c <__assert_fail@plt+0x38268>
   495c4:	ldr	r0, [sl, #56]	; 0x38
   495c8:	lsl	r3, r2, #5
   495cc:	add	r2, r2, #1
   495d0:	add	lr, r3, #4
   495d4:	add	r1, r0, r3
   495d8:	add	r3, r3, #16
   495dc:	str	r2, [sl, #64]	; 0x40
   495e0:	adds	r2, r0, lr
   495e4:	add	r0, r0, r3
   495e8:	ldr	r3, [sp, #20]
   495ec:	mov	ip, #0
   495f0:	mvn	lr, #0
   495f4:	str	r2, [sp, #28]
   495f8:	str	ip, [r1, #4]
   495fc:	str	ip, [r1, #8]
   49600:	str	ip, [r1, #12]
   49604:	ldrd	r2, [r3]
   49608:	strd	r2, [r1, #24]
   4960c:	ldrb	r3, [r0, #14]
   49610:	bic	r3, r3, #12
   49614:	strb	r3, [r0, #14]
   49618:	str	ip, [r1, #16]
   4961c:	str	ip, [r1, #20]
   49620:	str	lr, [r1, #32]
   49624:	beq	495a0 <__assert_fail@plt+0x36fac>
   49628:	ldr	r3, [sl, #92]	; 0x5c
   4962c:	cmp	r3, #1
   49630:	ble	48d7c <__assert_fail@plt+0x36788>
   49634:	ldrb	r3, [sl, #88]	; 0x58
   49638:	orr	r3, r3, #2
   4963c:	strb	r3, [sl, #88]	; 0x58
   49640:	b	48d7c <__assert_fail@plt+0x36788>
   49644:	ldr	r3, [sp, #20]
   49648:	mov	r4, #1
   4964c:	ldr	r2, [sl, #84]	; 0x54
   49650:	ldr	r3, [r3]
   49654:	lsl	r3, r4, r3
   49658:	ands	r2, r3, r2
   4965c:	beq	4a848 <__assert_fail@plt+0x38254>
   49660:	ldr	r1, [sl, #64]	; 0x40
   49664:	ldr	r2, [sl, #80]	; 0x50
   49668:	cmp	r1, #31
   4966c:	orr	r3, r2, r3
   49670:	str	r3, [sl, #80]	; 0x50
   49674:	beq	4a904 <__assert_fail@plt+0x38310>
   49678:	ldr	r0, [sl, #56]	; 0x38
   4967c:	lsl	r3, r1, #5
   49680:	add	r4, r1, #1
   49684:	add	r2, r3, #4
   49688:	add	r1, r0, r3
   4968c:	add	r3, r3, #16
   49690:	str	r4, [sl, #64]	; 0x40
   49694:	adds	r2, r0, r2
   49698:	add	r0, r0, r3
   4969c:	ldr	r3, [sp, #20]
   496a0:	mov	ip, #0
   496a4:	mvn	lr, #0
   496a8:	str	r2, [sp, #28]
   496ac:	str	ip, [r1, #4]
   496b0:	str	ip, [r1, #8]
   496b4:	str	ip, [r1, #12]
   496b8:	ldrd	r2, [r3]
   496bc:	strd	r2, [r1, #24]
   496c0:	ldrb	r3, [r0, #14]
   496c4:	bic	r3, r3, #12
   496c8:	strb	r3, [r0, #14]
   496cc:	str	ip, [r1, #16]
   496d0:	str	ip, [r1, #20]
   496d4:	str	lr, [r1, #32]
   496d8:	beq	495a0 <__assert_fail@plt+0x36fac>
   496dc:	ldrb	r3, [sl, #88]	; 0x58
   496e0:	ldr	r2, [sl, #76]	; 0x4c
   496e4:	orr	r3, r3, #2
   496e8:	add	r2, r2, #1
   496ec:	str	r2, [sl, #76]	; 0x4c
   496f0:	strb	r3, [sl, #88]	; 0x58
   496f4:	b	48d7c <__assert_fail@plt+0x36788>
   496f8:	mov	r6, #0
   496fc:	mov	r1, #1
   49700:	mov	r0, #32
   49704:	str	r6, [sp, #68]	; 0x44
   49708:	bl	384e0 <__assert_fail@plt+0x25eec>
   4970c:	mov	r4, r0
   49710:	mov	r1, #1
   49714:	mov	r0, #40	; 0x28
   49718:	bl	384e0 <__assert_fail@plt+0x25eec>
   4971c:	clz	r5, r0
   49720:	cmp	r4, r6
   49724:	str	r0, [sp, #16]
   49728:	lsr	r5, r5, #5
   4972c:	moveq	r5, #1
   49730:	cmp	r5, r6
   49734:	bne	4a8e0 <__assert_fail@plt+0x382ec>
   49738:	ldr	r6, [sp, #20]
   4973c:	mov	r1, r9
   49740:	ldr	r2, [sp, #32]
   49744:	mov	r0, r6
   49748:	bl	3c048 <__assert_fail@plt+0x29a54>
   4974c:	ldrb	r3, [r6, #4]
   49750:	mov	fp, r0
   49754:	cmp	r3, #2
   49758:	beq	4a7f0 <__assert_fail@plt+0x381fc>
   4975c:	cmp	r3, #25
   49760:	strne	r5, [sp, #44]	; 0x2c
   49764:	beq	4a480 <__assert_fail@plt+0x37e8c>
   49768:	cmp	r3, #21
   4976c:	beq	4a470 <__assert_fail@plt+0x37e7c>
   49770:	ldr	r5, [sp, #20]
   49774:	mov	r3, #0
   49778:	mov	r0, #1
   4977c:	mov	r6, #3
   49780:	str	sl, [sp, #24]
   49784:	ldr	r2, [sp, #32]
   49788:	str	r3, [sp, #36]	; 0x24
   4978c:	str	r3, [sp, #40]	; 0x28
   49790:	add	r3, sp, #96	; 0x60
   49794:	str	r3, [sp, #28]
   49798:	ubfx	r1, r2, #16, #1
   4979c:	mov	sl, r2
   497a0:	str	r1, [sp, #48]	; 0x30
   497a4:	ldr	ip, [sp, #28]
   497a8:	mov	r3, fp
   497ac:	mov	r2, r5
   497b0:	mov	r1, r9
   497b4:	str	sl, [sp]
   497b8:	str	r0, [sp, #4]
   497bc:	add	r0, sp, #72	; 0x48
   497c0:	str	r6, [sp, #72]	; 0x48
   497c4:	str	ip, [sp, #76]	; 0x4c
   497c8:	bl	4027c <__assert_fail@plt+0x2dc88>
   497cc:	cmp	r0, #0
   497d0:	bne	4a5b8 <__assert_fail@plt+0x37fc4>
   497d4:	mov	r2, sl
   497d8:	mov	r1, r9
   497dc:	mov	r0, r5
   497e0:	bl	3c048 <__assert_fail@plt+0x29a54>
   497e4:	ldr	r3, [sp, #72]	; 0x48
   497e8:	mov	fp, r0
   497ec:	sub	r2, r3, #2
   497f0:	bics	r2, r2, #2
   497f4:	beq	4980c <__assert_fail@plt+0x37218>
   497f8:	ldrb	r2, [r5, #4]
   497fc:	cmp	r2, #2
   49800:	beq	4a4f4 <__assert_fail@plt+0x37f00>
   49804:	cmp	r2, #22
   49808:	beq	4a600 <__assert_fail@plt+0x3800c>
   4980c:	cmp	r3, #4
   49810:	ldrls	pc, [pc, r3, lsl #2]
   49814:	b	4a3a4 <__assert_fail@plt+0x37db0>
   49818:	muleq	r4, r8, r3
   4981c:	andeq	sl, r4, r8, ror #6
   49820:	andeq	r9, r4, r8, lsr #18
   49824:	andeq	r9, r4, r8, lsr #18
   49828:	andeq	sl, r4, r4, lsr #7
   4982c:	sub	r1, r2, #35	; 0x23
   49830:	movw	r3, #9500	; 0x251c
   49834:	movt	r3, #5
   49838:	clz	r1, r1
   4983c:	movw	r2, #26140	; 0x661c
   49840:	movt	r2, #5
   49844:	lsr	r1, r1, #5
   49848:	b	493ac <__assert_fail@plt+0x36db8>
   4984c:	mov	r2, #0
   49850:	mov	r3, #5
   49854:	str	r2, [sp, #28]
   49858:	ldr	r2, [sp, #204]	; 0xcc
   4985c:	str	r3, [r2]
   49860:	b	491a0 <__assert_fail@plt+0x36bac>
   49864:	ldr	r3, [sp, #32]
   49868:	ands	r3, r3, #131072	; 0x20000
   4986c:	bne	48d00 <__assert_fail@plt+0x3670c>
   49870:	str	r3, [sp, #28]
   49874:	mov	r2, #16
   49878:	ldr	r3, [sp, #204]	; 0xcc
   4987c:	str	r2, [r3]
   49880:	b	491a0 <__assert_fail@plt+0x36bac>
   49884:	cmp	r4, #8
   49888:	bls	4a354 <__assert_fail@plt+0x37d60>
   4988c:	mov	r3, #0
   49890:	mov	r2, #0
   49894:	strd	r2, [sp, #128]	; 0x80
   49898:	ldr	r3, [sl, #64]	; 0x40
   4989c:	cmp	r3, #31
   498a0:	beq	4a888 <__assert_fail@plt+0x38294>
   498a4:	ldr	r0, [sl, #56]	; 0x38
   498a8:	lsl	r1, r3, #5
   498ac:	add	r2, r3, #1
   498b0:	add	r6, r1, #4
   498b4:	add	r3, r0, r1
   498b8:	mov	ip, #0
   498bc:	str	r2, [sl, #64]	; 0x40
   498c0:	mov	lr, #17
   498c4:	add	r8, r0, r6
   498c8:	str	ip, [r3, #4]
   498cc:	add	r2, r1, #16
   498d0:	mvn	fp, #0
   498d4:	str	r5, [r3, #8]
   498d8:	add	r2, r0, r2
   498dc:	cmp	r5, ip
   498e0:	str	ip, [r3, #12]
   498e4:	str	r8, [sp, #28]
   498e8:	strb	lr, [sp, #132]	; 0x84
   498ec:	ldrd	r6, [sp, #128]	; 0x80
   498f0:	strd	r6, [r3, #24]
   498f4:	ldrb	lr, [r2, #14]
   498f8:	bic	lr, lr, #12
   498fc:	strb	lr, [r2, #14]
   49900:	str	ip, [r3, #16]
   49904:	str	ip, [r3, #20]
   49908:	str	fp, [r3, #32]
   4990c:	ldr	r3, [sp, #28]
   49910:	strne	r8, [r5]
   49914:	cmp	r3, #0
   49918:	beq	495a0 <__assert_fail@plt+0x36fac>
   4991c:	add	r1, r0, r1
   49920:	str	r4, [r1, #24]
   49924:	b	48d7c <__assert_fail@plt+0x36788>
   49928:	ldr	r7, [sp, #76]	; 0x4c
   4992c:	mov	r0, r7
   49930:	bl	12300 <strlen@plt>
   49934:	cmp	r0, #1
   49938:	bne	4a8cc <__assert_fail@plt+0x382d8>
   4993c:	ldr	r1, [sp, #204]	; 0xcc
   49940:	mov	r2, #0
   49944:	ldrb	r3, [r7]
   49948:	str	r2, [r1]
   4994c:	asr	r1, r3, #5
   49950:	and	r3, r3, #31
   49954:	ldr	r2, [r4, r1, lsl #2]
   49958:	orr	r3, r2, r0, lsl r3
   4995c:	str	r3, [r4, r1, lsl #2]
   49960:	ldrb	r3, [r5, #4]
   49964:	cmp	r3, #2
   49968:	beq	4a4f4 <__assert_fail@plt+0x37f00>
   4996c:	cmp	r3, #21
   49970:	beq	4a998 <__assert_fail@plt+0x383a4>
   49974:	mov	r0, #0
   49978:	b	497a4 <__assert_fail@plt+0x371b0>
   4997c:	ldr	r9, [sp, #44]	; 0x2c
   49980:	mov	sl, r1
   49984:	mov	r8, r2
   49988:	ldr	r3, [sp, #40]	; 0x28
   4998c:	cmp	r3, #0
   49990:	beq	49d5c <__assert_fail@plt+0x37768>
   49994:	mov	r3, #0
   49998:	mov	r2, #0
   4999c:	strd	r2, [r8]
   499a0:	ldr	r3, [sl, #64]	; 0x40
   499a4:	cmp	r3, #31
   499a8:	beq	4a2e8 <__assert_fail@plt+0x37cf4>
   499ac:	ldr	r0, [sl, #56]	; 0x38
   499b0:	lsl	r2, r3, #5
   499b4:	add	r3, r3, #1
   499b8:	add	ip, r2, #4
   499bc:	ldr	r6, [sp, #40]	; 0x28
   499c0:	add	r1, r0, r2
   499c4:	add	ip, r0, ip
   499c8:	str	r3, [sl, #64]	; 0x40
   499cc:	mov	r3, #16
   499d0:	mvn	lr, #0
   499d4:	add	r2, r2, r3
   499d8:	add	r0, r0, r2
   499dc:	stmib	r1, {r5, r6}
   499e0:	str	r4, [r1, #12]
   499e4:	strb	r3, [sp, #132]	; 0x84
   499e8:	ldrd	r2, [r8]
   499ec:	strd	r2, [r1, #24]
   499f0:	ldrb	r3, [r0, #14]
   499f4:	bic	r3, r3, #12
   499f8:	strb	r3, [r0, #14]
   499fc:	ldr	r3, [sp, #204]	; 0xcc
   49a00:	str	r5, [r1, #16]
   49a04:	str	r5, [r1, #20]
   49a08:	str	lr, [r1, #32]
   49a0c:	str	ip, [r6]
   49a10:	ldr	r3, [r3]
   49a14:	str	ip, [r4]
   49a18:	cmp	r3, #0
   49a1c:	bne	4a2c8 <__assert_fail@plt+0x37cd4>
   49a20:	str	ip, [sp, #28]
   49a24:	ldr	r3, [sp, #36]	; 0x24
   49a28:	cmp	r3, #0
   49a2c:	ldr	r3, [sp, #20]
   49a30:	ldrb	r8, [r3, #4]
   49a34:	beq	48db8 <__assert_fail@plt+0x367c4>
   49a38:	cmp	r8, #11
   49a3c:	cmpne	r8, #23
   49a40:	bne	48db8 <__assert_fail@plt+0x367c4>
   49a44:	ldr	r3, [sp, #28]
   49a48:	cmp	r3, #0
   49a4c:	beq	49a58 <__assert_fail@plt+0x37464>
   49a50:	mov	r0, r3
   49a54:	bl	4082c <__assert_fail@plt+0x2e238>
   49a58:	mov	r2, #0
   49a5c:	mov	r3, #13
   49a60:	str	r2, [sp, #28]
   49a64:	ldr	r2, [sp, #204]	; 0xcc
   49a68:	str	r3, [r2]
   49a6c:	b	491a0 <__assert_fail@plt+0x36bac>
   49a70:	mov	r3, r2
   49a74:	add	r8, fp, #8
   49a78:	b	48f10 <__assert_fail@plt+0x3691c>
   49a7c:	mov	r0, #996	; 0x3e4
   49a80:	bl	3b49c <__assert_fail@plt+0x28ea8>
   49a84:	cmp	r0, #0
   49a88:	beq	49c48 <__assert_fail@plt+0x37654>
   49a8c:	ldr	r1, [sl, #56]	; 0x38
   49a90:	mov	r2, #1
   49a94:	mov	lr, #4
   49a98:	mov	r3, #0
   49a9c:	str	r1, [r0]
   49aa0:	str	r0, [sl, #56]	; 0x38
   49aa4:	b	48f30 <__assert_fail@plt+0x3693c>
   49aa8:	mov	r2, r7
   49aac:	mov	r7, r0
   49ab0:	str	sl, [sp, #16]
   49ab4:	b	48fd4 <__assert_fail@plt+0x369e0>
   49ab8:	str	r0, [r1]
   49abc:	ldr	r2, [sp, #204]	; 0xcc
   49ac0:	mov	r3, #12
   49ac4:	str	r3, [r2]
   49ac8:	mov	r3, #0
   49acc:	ldr	r0, [sp, #28]
   49ad0:	str	r3, [sp, #28]
   49ad4:	bl	4082c <__assert_fail@plt+0x2e238>
   49ad8:	b	491a0 <__assert_fail@plt+0x36bac>
   49adc:	mov	r1, r9
   49ae0:	ldr	r0, [sp, #20]
   49ae4:	ldr	r2, [sp, #32]
   49ae8:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   49aec:	ldr	r3, [r9, #40]	; 0x28
   49af0:	ldr	r2, [sp, #28]
   49af4:	add	r0, r3, r0
   49af8:	cmp	r2, #0
   49afc:	str	r0, [r9, #40]	; 0x28
   49b00:	beq	49d14 <__assert_fail@plt+0x37720>
   49b04:	ldrb	r3, [r2, #24]
   49b08:	mov	r7, r2
   49b0c:	add	r8, sp, #128	; 0x80
   49b10:	cmp	r3, #17
   49b14:	mov	r3, #0
   49b18:	str	r3, [sp, #40]	; 0x28
   49b1c:	mov	r3, #1
   49b20:	str	r3, [sp, #24]
   49b24:	beq	49c74 <__assert_fail@plt+0x37680>
   49b28:	mov	fp, #10
   49b2c:	b	48e64 <__assert_fail@plt+0x36870>
   49b30:	mov	r0, #996	; 0x3e4
   49b34:	str	r2, [sp, #48]	; 0x30
   49b38:	bl	3b49c <__assert_fail@plt+0x28ea8>
   49b3c:	cmp	r0, #0
   49b40:	beq	49abc <__assert_fail@plt+0x374c8>
   49b44:	ldr	r2, [sp, #16]
   49b48:	mov	ip, #1
   49b4c:	mov	r8, #4
   49b50:	mov	r3, #0
   49b54:	ldr	r1, [sp, #16]
   49b58:	ldr	lr, [r2, #56]	; 0x38
   49b5c:	str	lr, [r0]
   49b60:	str	r0, [r2, #56]	; 0x38
   49b64:	ldr	r2, [sp, #48]	; 0x30
   49b68:	b	49000 <__assert_fail@plt+0x36a0c>
   49b6c:	mov	r0, #996	; 0x3e4
   49b70:	str	r2, [sp, #48]	; 0x30
   49b74:	bl	3b49c <__assert_fail@plt+0x28ea8>
   49b78:	cmp	r0, #0
   49b7c:	beq	49abc <__assert_fail@plt+0x374c8>
   49b80:	ldr	r2, [sp, #16]
   49b84:	mov	lr, #1
   49b88:	mov	r4, #4
   49b8c:	mov	ip, #0
   49b90:	ldr	r1, [sp, #16]
   49b94:	ldr	r3, [r2, #56]	; 0x38
   49b98:	str	r3, [r0]
   49b9c:	str	r0, [r2, #56]	; 0x38
   49ba0:	ldr	r2, [sp, #48]	; 0x30
   49ba4:	b	49088 <__assert_fail@plt+0x36a94>
   49ba8:	ldr	fp, [sp, #20]
   49bac:	mvn	r6, #0
   49bb0:	movw	r8, #32816	; 0x8030
   49bb4:	mov	r1, r9
   49bb8:	mov	r0, fp
   49bbc:	ldr	r2, [sp, #32]
   49bc0:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   49bc4:	ldr	r2, [r9, #40]	; 0x28
   49bc8:	ldrb	r3, [fp, #4]
   49bcc:	ldrb	r1, [fp]
   49bd0:	add	r0, r2, r0
   49bd4:	cmp	r3, #2
   49bd8:	str	r0, [r9, #40]	; 0x28
   49bdc:	beq	4a290 <__assert_fail@plt+0x37c9c>
   49be0:	cmp	r3, #24
   49be4:	beq	49d64 <__assert_fail@plt+0x37770>
   49be8:	cmp	r1, #44	; 0x2c
   49bec:	beq	49e04 <__assert_fail@plt+0x37810>
   49bf0:	cmp	r3, #1
   49bf4:	beq	49c00 <__assert_fail@plt+0x3760c>
   49bf8:	mvn	r6, #1
   49bfc:	b	49bb4 <__assert_fail@plt+0x375c0>
   49c00:	sub	r2, r1, #48	; 0x30
   49c04:	uxtb	r0, r2
   49c08:	cmp	r0, #9
   49c0c:	movhi	r3, #0
   49c10:	movls	r3, #1
   49c14:	cmn	r6, #2
   49c18:	moveq	r3, #0
   49c1c:	cmp	r3, #0
   49c20:	beq	49bf8 <__assert_fail@plt+0x37604>
   49c24:	cmn	r6, #1
   49c28:	add	r3, r6, r6, lsl #2
   49c2c:	moveq	r6, r2
   49c30:	beq	49bb4 <__assert_fail@plt+0x375c0>
   49c34:	add	r6, r1, r3, lsl #1
   49c38:	cmp	r6, r8
   49c3c:	movge	r6, r8
   49c40:	sub	r6, r6, #48	; 0x30
   49c44:	b	49bb4 <__assert_fail@plt+0x375c0>
   49c48:	mov	r2, r7
   49c4c:	mov	r7, r0
   49c50:	str	r0, [r8]
   49c54:	str	sl, [sp, #16]
   49c58:	b	48fd4 <__assert_fail@plt+0x369e0>
   49c5c:	mov	r3, #0
   49c60:	add	r8, sp, #128	; 0x80
   49c64:	mov	r6, r3
   49c68:	str	r3, [sp, #40]	; 0x28
   49c6c:	mvn	r3, #0
   49c70:	str	r3, [sp, #24]
   49c74:	mov	r3, r7
   49c78:	ldr	ip, [r7, #20]
   49c7c:	b	49c84 <__assert_fail@plt+0x37690>
   49c80:	mov	r3, r2
   49c84:	ldr	r2, [r3, #4]
   49c88:	cmp	r2, #0
   49c8c:	bne	49c80 <__assert_fail@plt+0x3768c>
   49c90:	ldr	r2, [r3, #8]
   49c94:	cmp	r2, #0
   49c98:	bne	49c80 <__assert_fail@plt+0x3768c>
   49c9c:	b	49cd4 <__assert_fail@plt+0x376e0>
   49ca0:	ldr	r1, [r3]
   49ca4:	cmp	r1, #0
   49ca8:	beq	49d04 <__assert_fail@plt+0x37710>
   49cac:	ldr	r2, [r1, #8]
   49cb0:	sub	r0, r3, r2
   49cb4:	cmp	r2, #0
   49cb8:	clz	r0, r0
   49cbc:	mov	r3, r1
   49cc0:	lsr	r0, r0, #5
   49cc4:	moveq	r1, #1
   49cc8:	movne	r1, r0
   49ccc:	cmp	r1, #0
   49cd0:	beq	49c80 <__assert_fail@plt+0x3768c>
   49cd4:	ldrb	r2, [r3, #24]
   49cd8:	cmp	r2, #17
   49cdc:	bne	49ca0 <__assert_fail@plt+0x376ac>
   49ce0:	ldr	r2, [r3, #20]
   49ce4:	cmp	ip, r2
   49ce8:	bne	49ca0 <__assert_fail@plt+0x376ac>
   49cec:	ldrb	r2, [r3, #26]
   49cf0:	ldr	r1, [r3]
   49cf4:	orr	r2, r2, #8
   49cf8:	cmp	r1, #0
   49cfc:	strb	r2, [r3, #26]
   49d00:	bne	49cac <__assert_fail@plt+0x376b8>
   49d04:	ldr	r3, [sp, #24]
   49d08:	cmn	r3, #1
   49d0c:	bne	49b28 <__assert_fail@plt+0x37534>
   49d10:	b	48e58 <__assert_fail@plt+0x36864>
   49d14:	ldr	r3, [sp, #204]	; 0xcc
   49d18:	ldr	r3, [r3]
   49d1c:	cmp	r3, #0
   49d20:	bne	49198 <__assert_fail@plt+0x36ba4>
   49d24:	mov	r3, #0
   49d28:	str	r3, [sp, #28]
   49d2c:	b	49a24 <__assert_fail@plt+0x37430>
   49d30:	mov	r0, #996	; 0x3e4
   49d34:	bl	3b49c <__assert_fail@plt+0x28ea8>
   49d38:	subs	r4, r0, #0
   49d3c:	beq	49abc <__assert_fail@plt+0x374c8>
   49d40:	ldr	r2, [sl, #56]	; 0x38
   49d44:	mov	r1, #1
   49d48:	mov	r0, #4
   49d4c:	mov	r3, #0
   49d50:	str	r2, [r4]
   49d54:	str	r4, [sl, #56]	; 0x38
   49d58:	b	48e8c <__assert_fail@plt+0x36898>
   49d5c:	str	r4, [sp, #28]
   49d60:	b	49a24 <__assert_fail@plt+0x37430>
   49d64:	cmn	r6, #1
   49d68:	beq	49de8 <__assert_fail@plt+0x377f4>
   49d6c:	cmn	r6, #2
   49d70:	strne	r6, [sp, #24]
   49d74:	beq	4a4e4 <__assert_fail@plt+0x37ef0>
   49d78:	ldr	r3, [sp, #24]
   49d7c:	cmp	r3, #32768	; 0x8000
   49d80:	movlt	r4, #0
   49d84:	movge	r4, #1
   49d88:	cmp	r4, #0
   49d8c:	bne	49ed8 <__assert_fail@plt+0x378e4>
   49d90:	mov	r1, r9
   49d94:	ldr	r0, [sp, #20]
   49d98:	ldr	r2, [sp, #32]
   49d9c:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   49da0:	ldr	r3, [r9, #40]	; 0x28
   49da4:	ldr	r2, [sp, #28]
   49da8:	add	r0, r3, r0
   49dac:	cmp	r2, #0
   49db0:	str	r0, [r9, #40]	; 0x28
   49db4:	beq	49d14 <__assert_fail@plt+0x37720>
   49db8:	ldr	r3, [sp, #24]
   49dbc:	orrs	r3, r6, r3
   49dc0:	bne	49ee8 <__assert_fail@plt+0x378f4>
   49dc4:	mov	r0, r2
   49dc8:	bl	4082c <__assert_fail@plt+0x2e238>
   49dcc:	ldr	r3, [sp, #204]	; 0xcc
   49dd0:	ldr	r3, [r3]
   49dd4:	cmp	r3, #0
   49dd8:	beq	49d24 <__assert_fail@plt+0x37730>
   49ddc:	b	49ac8 <__assert_fail@plt+0x374d4>
   49de0:	cmp	r3, #2
   49de4:	beq	4a32c <__assert_fail@plt+0x37d38>
   49de8:	ldr	r2, [sp, #204]	; 0xcc
   49dec:	mov	r3, #10
   49df0:	str	r3, [r2]
   49df4:	ldr	r3, [sp, #28]
   49df8:	cmp	r3, #0
   49dfc:	bne	49ac8 <__assert_fail@plt+0x374d4>
   49e00:	b	49198 <__assert_fail@plt+0x36ba4>
   49e04:	cmn	r6, #1
   49e08:	bne	4a280 <__assert_fail@plt+0x37c8c>
   49e0c:	cmp	r3, #1
   49e10:	bne	49de8 <__assert_fail@plt+0x377f4>
   49e14:	mov	r6, #0
   49e18:	mvn	r3, #0
   49e1c:	ldr	fp, [sp, #20]
   49e20:	movw	r8, #32816	; 0x8030
   49e24:	str	r3, [sp, #24]
   49e28:	mov	r3, r7
   49e2c:	mov	r7, r4
   49e30:	mov	r4, r6
   49e34:	mov	r6, r9
   49e38:	mov	r9, r3
   49e3c:	mov	r1, r6
   49e40:	mov	r0, fp
   49e44:	ldr	r2, [sp, #32]
   49e48:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   49e4c:	ldr	r2, [r6, #40]	; 0x28
   49e50:	ldrb	r1, [fp, #4]
   49e54:	ldrb	ip, [fp]
   49e58:	add	r0, r2, r0
   49e5c:	cmp	r1, #2
   49e60:	str	r0, [r6, #40]	; 0x28
   49e64:	beq	4a314 <__assert_fail@plt+0x37d20>
   49e68:	cmp	r1, #24
   49e6c:	cmpne	ip, #44	; 0x2c
   49e70:	beq	49e88 <__assert_fail@plt+0x37894>
   49e74:	cmp	r1, #1
   49e78:	beq	4a230 <__assert_fail@plt+0x37c3c>
   49e7c:	mvn	r3, #1
   49e80:	str	r3, [sp, #24]
   49e84:	b	49e3c <__assert_fail@plt+0x37848>
   49e88:	mov	r2, r9
   49e8c:	mov	r9, r6
   49e90:	mov	r6, r4
   49e94:	mov	r4, r7
   49e98:	mov	r7, r2
   49e9c:	ldr	r2, [sp, #24]
   49ea0:	cmn	r2, #2
   49ea4:	beq	4a4e4 <__assert_fail@plt+0x37ef0>
   49ea8:	cmn	r2, #1
   49eac:	cmpne	r6, r2
   49eb0:	bgt	49de8 <__assert_fail@plt+0x377f4>
   49eb4:	cmp	r1, #24
   49eb8:	bne	49de8 <__assert_fail@plt+0x377f4>
   49ebc:	cmn	r2, #1
   49ec0:	bne	49d78 <__assert_fail@plt+0x37784>
   49ec4:	cmp	r6, #32768	; 0x8000
   49ec8:	movlt	r4, #0
   49ecc:	movge	r4, #1
   49ed0:	cmp	r4, #0
   49ed4:	beq	49d90 <__assert_fail@plt+0x3779c>
   49ed8:	ldr	r2, [sp, #204]	; 0xcc
   49edc:	mov	r3, #15
   49ee0:	str	r3, [r2]
   49ee4:	b	49df4 <__assert_fail@plt+0x37800>
   49ee8:	cmp	r6, #0
   49eec:	ble	4af7c <__assert_fail@plt+0x38988>
   49ef0:	cmp	r6, #1
   49ef4:	beq	4af90 <__assert_fail@plt+0x3899c>
   49ef8:	ldr	r4, [r2]
   49efc:	mov	r3, #2
   49f00:	mov	r7, r2
   49f04:	add	r8, sp, #128	; 0x80
   49f08:	mov	fp, r2
   49f0c:	str	r6, [sp, #16]
   49f10:	mov	r6, r3
   49f14:	str	r9, [sp, #40]	; 0x28
   49f18:	mov	r9, r8
   49f1c:	b	49f24 <__assert_fail@plt+0x37930>
   49f20:	mov	r7, r3
   49f24:	ldr	r2, [sl, #64]	; 0x40
   49f28:	cmp	r2, #31
   49f2c:	beq	4a184 <__assert_fail@plt+0x37b90>
   49f30:	ldr	r0, [sl, #56]	; 0x38
   49f34:	lsl	r3, r2, #5
   49f38:	add	r2, r2, #1
   49f3c:	add	lr, r3, #4
   49f40:	add	ip, r0, r3
   49f44:	add	r3, r3, #16
   49f48:	str	r2, [sl, #64]	; 0x40
   49f4c:	add	r1, r0, r3
   49f50:	add	r0, r0, lr
   49f54:	str	r5, [ip, #4]
   49f58:	mvn	lr, #0
   49f5c:	cmp	r0, #0
   49f60:	str	r5, [ip, #8]
   49f64:	str	r5, [ip, #12]
   49f68:	ldrd	r2, [r7, #20]
   49f6c:	strd	r2, [ip, #24]
   49f70:	ldrb	r3, [r1, #14]
   49f74:	bic	r3, r3, #12
   49f78:	strb	r3, [r1, #14]
   49f7c:	str	r5, [ip, #16]
   49f80:	str	r5, [ip, #20]
   49f84:	str	lr, [ip, #32]
   49f88:	str	r0, [r9]
   49f8c:	beq	4a1bc <__assert_fail@plt+0x37bc8>
   49f90:	str	r4, [ip, #4]
   49f94:	ldr	r4, [r9]
   49f98:	ldrb	r3, [r4, #26]
   49f9c:	orr	r3, r3, #4
   49fa0:	strb	r3, [r4, #26]
   49fa4:	ldr	r3, [r7, #4]
   49fa8:	cmp	r3, #0
   49fac:	addne	r9, r4, #4
   49fb0:	bne	49f20 <__assert_fail@plt+0x3792c>
   49fb4:	ldr	r2, [r7, #8]
   49fb8:	cmp	r2, #0
   49fbc:	cmpne	r2, r3
   49fc0:	mov	r3, r7
   49fc4:	bne	4a1b0 <__assert_fail@plt+0x37bbc>
   49fc8:	ldr	r2, [r7]
   49fcc:	ldr	r4, [r4]
   49fd0:	subs	r7, r2, #0
   49fd4:	bne	49fb4 <__assert_fail@plt+0x379c0>
   49fd8:	ldr	r7, [sp, #128]	; 0x80
   49fdc:	mov	r3, #0
   49fe0:	mov	r2, #0
   49fe4:	strd	r2, [r8]
   49fe8:	ldr	r3, [sl, #64]	; 0x40
   49fec:	cmp	r3, #31
   49ff0:	beq	4a1c4 <__assert_fail@plt+0x37bd0>
   49ff4:	ldr	r0, [sl, #56]	; 0x38
   49ff8:	lsl	r1, r3, #5
   49ffc:	add	lr, r3, #1
   4a000:	add	r4, r1, #4
   4a004:	add	r3, r0, r1
   4a008:	mov	ip, #16
   4a00c:	str	lr, [sl, #64]	; 0x40
   4a010:	add	r1, r1, ip
   4a014:	add	r4, r0, r4
   4a018:	add	r2, r0, r1
   4a01c:	stmib	r3, {r5, fp}
   4a020:	mvn	lr, #0
   4a024:	str	r7, [r3, #12]
   4a028:	cmp	r7, #0
   4a02c:	strb	ip, [sp, #132]	; 0x84
   4a030:	ldrd	r0, [r8]
   4a034:	strd	r0, [r3, #24]
   4a038:	ldrb	ip, [r2, #14]
   4a03c:	bic	ip, ip, #12
   4a040:	strb	ip, [r2, #14]
   4a044:	str	r5, [r3, #16]
   4a048:	str	r5, [r3, #20]
   4a04c:	str	lr, [r3, #32]
   4a050:	str	r4, [fp]
   4a054:	beq	49abc <__assert_fail@plt+0x374c8>
   4a058:	cmp	r4, #0
   4a05c:	str	r4, [r7]
   4a060:	beq	49abc <__assert_fail@plt+0x374c8>
   4a064:	ldr	r3, [sp, #16]
   4a068:	add	r6, r6, #1
   4a06c:	mov	fp, r4
   4a070:	cmp	r3, r6
   4a074:	bge	49f18 <__assert_fail@plt+0x37924>
   4a078:	ldr	r9, [sp, #40]	; 0x28
   4a07c:	mov	r6, r3
   4a080:	ldr	r3, [sp, #24]
   4a084:	cmp	r6, r3
   4a088:	beq	49d5c <__assert_fail@plt+0x37768>
   4a08c:	add	r8, sp, #128	; 0x80
   4a090:	str	r9, [sp, #16]
   4a094:	mov	r1, r8
   4a098:	ldr	fp, [r7]
   4a09c:	str	r8, [sp, #40]	; 0x28
   4a0a0:	b	4a0ac <__assert_fail@plt+0x37ab8>
   4a0a4:	mov	r7, r3
   4a0a8:	add	r1, fp, #4
   4a0ac:	ldr	r3, [sl, #64]	; 0x40
   4a0b0:	cmp	r3, #31
   4a0b4:	beq	4a1fc <__assert_fail@plt+0x37c08>
   4a0b8:	ldr	r0, [sl, #56]	; 0x38
   4a0bc:	lsl	r2, r3, #5
   4a0c0:	add	lr, r3, #1
   4a0c4:	add	ip, r2, #4
   4a0c8:	add	r3, r0, r2
   4a0cc:	str	lr, [sl, #64]	; 0x40
   4a0d0:	add	r2, r2, #16
   4a0d4:	add	r2, r0, r2
   4a0d8:	add	r0, r0, ip
   4a0dc:	str	r5, [r3, #4]
   4a0e0:	mvn	ip, #0
   4a0e4:	cmp	r0, #0
   4a0e8:	str	r5, [r3, #8]
   4a0ec:	str	r5, [r3, #12]
   4a0f0:	ldrd	r8, [r7, #20]
   4a0f4:	strd	r8, [r3, #24]
   4a0f8:	ldrb	lr, [r2, #14]
   4a0fc:	bic	lr, lr, #12
   4a100:	strb	lr, [r2, #14]
   4a104:	str	r5, [r3, #16]
   4a108:	str	r5, [r3, #20]
   4a10c:	str	ip, [r3, #32]
   4a110:	str	r0, [r1]
   4a114:	beq	49abc <__assert_fail@plt+0x374c8>
   4a118:	str	fp, [r3, #4]
   4a11c:	ldr	fp, [r1]
   4a120:	ldrb	r3, [fp, #26]
   4a124:	orr	r3, r3, #4
   4a128:	strb	r3, [fp, #26]
   4a12c:	ldr	r3, [r7, #4]
   4a130:	cmp	r3, #0
   4a134:	bne	4a0a4 <__assert_fail@plt+0x37ab0>
   4a138:	ldr	r9, [sp, #16]
   4a13c:	ldr	r8, [sp, #40]	; 0x28
   4a140:	ldr	r2, [r7, #8]
   4a144:	cmp	r2, #0
   4a148:	cmpne	r2, r3
   4a14c:	mov	r3, r7
   4a150:	bne	4a2d4 <__assert_fail@plt+0x37ce0>
   4a154:	ldr	r2, [r7]
   4a158:	ldr	fp, [fp]
   4a15c:	subs	r7, r2, #0
   4a160:	bne	4a140 <__assert_fail@plt+0x37b4c>
   4a164:	ldr	r7, [sp, #128]	; 0x80
   4a168:	cmp	r7, #0
   4a16c:	beq	49abc <__assert_fail@plt+0x374c8>
   4a170:	ldrb	r3, [r7, #24]
   4a174:	str	r4, [sp, #40]	; 0x28
   4a178:	cmp	r3, #17
   4a17c:	bne	49d04 <__assert_fail@plt+0x37710>
   4a180:	b	49c74 <__assert_fail@plt+0x37680>
   4a184:	mov	r0, #996	; 0x3e4
   4a188:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a18c:	cmp	r0, #0
   4a190:	beq	4a1f0 <__assert_fail@plt+0x37bfc>
   4a194:	ldr	r1, [sl, #56]	; 0x38
   4a198:	mov	r2, #1
   4a19c:	mov	lr, #4
   4a1a0:	mov	r3, #0
   4a1a4:	str	r1, [r0]
   4a1a8:	str	r0, [sl, #56]	; 0x38
   4a1ac:	b	49f40 <__assert_fail@plt+0x3794c>
   4a1b0:	mov	r3, r2
   4a1b4:	add	r9, r4, #8
   4a1b8:	b	49f20 <__assert_fail@plt+0x3792c>
   4a1bc:	mov	r7, r0
   4a1c0:	b	49fdc <__assert_fail@plt+0x379e8>
   4a1c4:	mov	r0, #996	; 0x3e4
   4a1c8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a1cc:	cmp	r0, #0
   4a1d0:	beq	49abc <__assert_fail@plt+0x374c8>
   4a1d4:	ldr	r3, [sl, #56]	; 0x38
   4a1d8:	mov	lr, #1
   4a1dc:	mov	r4, #4
   4a1e0:	mov	r1, #0
   4a1e4:	str	r3, [r0]
   4a1e8:	str	r0, [sl, #56]	; 0x38
   4a1ec:	b	4a004 <__assert_fail@plt+0x37a10>
   4a1f0:	mov	r7, r0
   4a1f4:	str	r0, [r9]
   4a1f8:	b	49fdc <__assert_fail@plt+0x379e8>
   4a1fc:	mov	r0, #996	; 0x3e4
   4a200:	str	r1, [sp, #44]	; 0x2c
   4a204:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a208:	cmp	r0, #0
   4a20c:	ldr	r1, [sp, #44]	; 0x2c
   4a210:	beq	49ab8 <__assert_fail@plt+0x374c4>
   4a214:	ldr	r3, [sl, #56]	; 0x38
   4a218:	mov	lr, #1
   4a21c:	mov	ip, #4
   4a220:	mov	r2, #0
   4a224:	str	r3, [r0]
   4a228:	str	r0, [sl, #56]	; 0x38
   4a22c:	b	4a0c8 <__assert_fail@plt+0x37ad4>
   4a230:	ldr	r3, [sp, #24]
   4a234:	sub	r1, ip, #48	; 0x30
   4a238:	uxtb	r0, r1
   4a23c:	cmp	r0, #9
   4a240:	movhi	r2, #0
   4a244:	movls	r2, #1
   4a248:	cmn	r3, #2
   4a24c:	moveq	r2, #0
   4a250:	cmp	r2, #0
   4a254:	beq	49e7c <__assert_fail@plt+0x37888>
   4a258:	cmn	r3, #1
   4a25c:	add	r2, r3, r3, lsl #2
   4a260:	streq	r1, [sp, #24]
   4a264:	beq	49e3c <__assert_fail@plt+0x37848>
   4a268:	add	ip, ip, r2, lsl #1
   4a26c:	cmp	ip, r8
   4a270:	movge	ip, r8
   4a274:	sub	r3, ip, #48	; 0x30
   4a278:	str	r3, [sp, #24]
   4a27c:	b	49e3c <__assert_fail@plt+0x37848>
   4a280:	cmn	r6, #2
   4a284:	beq	4a290 <__assert_fail@plt+0x37c9c>
   4a288:	cmp	r3, #1
   4a28c:	beq	49e18 <__assert_fail@plt+0x37824>
   4a290:	ldr	r2, [sp, #52]	; 0x34
   4a294:	cmp	r2, #0
   4a298:	beq	49de0 <__assert_fail@plt+0x377ec>
   4a29c:	ldrd	r2, [r7]
   4a2a0:	mov	r1, #1
   4a2a4:	str	r4, [r9, #40]	; 0x28
   4a2a8:	ldr	r0, [sp, #20]
   4a2ac:	ldr	ip, [sp, #28]
   4a2b0:	strd	r2, [r0]
   4a2b4:	ldr	r3, [sp, #204]	; 0xcc
   4a2b8:	strb	r1, [r0, #4]
   4a2bc:	ldr	r3, [r3]
   4a2c0:	cmp	r3, #0
   4a2c4:	beq	49a20 <__assert_fail@plt+0x3742c>
   4a2c8:	cmp	ip, #0
   4a2cc:	bne	49a20 <__assert_fail@plt+0x3742c>
   4a2d0:	b	49df4 <__assert_fail@plt+0x37800>
   4a2d4:	mov	r7, r2
   4a2d8:	add	r1, fp, #8
   4a2dc:	str	r9, [sp, #16]
   4a2e0:	str	r8, [sp, #40]	; 0x28
   4a2e4:	b	4a0ac <__assert_fail@plt+0x37ab8>
   4a2e8:	mov	r0, #996	; 0x3e4
   4a2ec:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a2f0:	cmp	r0, #0
   4a2f4:	beq	4a92c <__assert_fail@plt+0x38338>
   4a2f8:	ldr	r1, [sl, #56]	; 0x38
   4a2fc:	mov	r3, #1
   4a300:	mov	ip, #4
   4a304:	mov	r2, #0
   4a308:	str	r1, [r0]
   4a30c:	str	r0, [sl, #56]	; 0x38
   4a310:	b	499bc <__assert_fail@plt+0x373c8>
   4a314:	ldr	r3, [sp, #52]	; 0x34
   4a318:	mov	r4, r7
   4a31c:	mov	r7, r9
   4a320:	mov	r9, r6
   4a324:	cmp	r3, #0
   4a328:	bne	4a29c <__assert_fail@plt+0x37ca8>
   4a32c:	ldr	r2, [sp, #204]	; 0xcc
   4a330:	mov	r3, #9
   4a334:	str	r3, [r2]
   4a338:	b	49df4 <__assert_fail@plt+0x37800>
   4a33c:	mvn	r3, #0
   4a340:	mov	r4, r2
   4a344:	mov	r7, r2
   4a348:	mov	r6, #1
   4a34c:	str	r3, [sp, #24]
   4a350:	b	4a08c <__assert_fail@plt+0x37a98>
   4a354:	ldr	r3, [sl, #84]	; 0x54
   4a358:	mov	r2, #1
   4a35c:	orr	r3, r3, r2, lsl r4
   4a360:	str	r3, [sl, #84]	; 0x54
   4a364:	b	4988c <__assert_fail@plt+0x37298>
   4a368:	ldr	r2, [sp, #16]
   4a36c:	ldr	r0, [r2]
   4a370:	ldr	r3, [r2, #20]
   4a374:	ldr	r2, [sp, #36]	; 0x24
   4a378:	cmp	r3, r2
   4a37c:	beq	4acc0 <__assert_fail@plt+0x386cc>
   4a380:	ldr	ip, [sp, #16]
   4a384:	add	r1, r3, #1
   4a388:	ldr	r2, [sp, #76]	; 0x4c
   4a38c:	str	r1, [ip, #20]
   4a390:	str	r2, [r0, r3, lsl #2]
   4a394:	b	49960 <__assert_fail@plt+0x3736c>
   4a398:	ldrb	r3, [sp, #76]	; 0x4c
   4a39c:	mov	r0, #1
   4a3a0:	b	4994c <__assert_fail@plt+0x37358>
   4a3a4:	ldr	r2, [sp, #16]
   4a3a8:	add	r0, sp, #68	; 0x44
   4a3ac:	mov	r1, r4
   4a3b0:	ldr	ip, [sp, #76]	; 0x4c
   4a3b4:	str	r0, [sp]
   4a3b8:	str	sl, [sp, #8]
   4a3bc:	add	r3, r2, #36	; 0x24
   4a3c0:	add	r2, r2, #12
   4a3c4:	ldr	r0, [r9, #64]	; 0x40
   4a3c8:	str	ip, [sp, #4]
   4a3cc:	bl	3e7f4 <__assert_fail@plt+0x2c200>
   4a3d0:	ldr	r3, [sp, #204]	; 0xcc
   4a3d4:	cmp	r0, #0
   4a3d8:	str	r0, [r3]
   4a3dc:	beq	49960 <__assert_fail@plt+0x3736c>
   4a3e0:	ldr	sl, [sp, #24]
   4a3e4:	mov	r0, r4
   4a3e8:	bl	38b10 <__assert_fail@plt+0x2651c>
   4a3ec:	ldr	r4, [sp, #16]
   4a3f0:	ldr	r0, [r4]
   4a3f4:	bl	38b10 <__assert_fail@plt+0x2651c>
   4a3f8:	ldr	r0, [r4, #4]
   4a3fc:	bl	38b10 <__assert_fail@plt+0x2651c>
   4a400:	ldr	r0, [r4, #8]
   4a404:	bl	38b10 <__assert_fail@plt+0x2651c>
   4a408:	ldr	r0, [r4, #12]
   4a40c:	bl	38b10 <__assert_fail@plt+0x2651c>
   4a410:	mov	r0, r4
   4a414:	bl	38b10 <__assert_fail@plt+0x2651c>
   4a418:	ldr	r3, [sp, #204]	; 0xcc
   4a41c:	ldr	r3, [r3]
   4a420:	cmp	r3, #0
   4a424:	bne	49198 <__assert_fail@plt+0x36ba4>
   4a428:	str	r3, [sp, #28]
   4a42c:	b	48d7c <__assert_fail@plt+0x36788>
   4a430:	ldr	r2, [sp, #20]
   4a434:	bl	3fe6c <__assert_fail@plt+0x2d878>
   4a438:	subs	r3, r0, #0
   4a43c:	str	r3, [sp, #28]
   4a440:	bne	49370 <__assert_fail@plt+0x36d7c>
   4a444:	b	495a0 <__assert_fail@plt+0x36fac>
   4a448:	mov	r0, #996	; 0x3e4
   4a44c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a450:	cmp	r0, #0
   4a454:	beq	495a0 <__assert_fail@plt+0x36fac>
   4a458:	ldr	r1, [sl, #56]	; 0x38
   4a45c:	mov	r2, #4
   4a460:	mov	r3, #0
   4a464:	str	r1, [r0]
   4a468:	str	r0, [sl, #56]	; 0x38
   4a46c:	b	48d28 <__assert_fail@plt+0x36734>
   4a470:	ldr	r2, [sp, #20]
   4a474:	mov	r3, #1
   4a478:	strb	r3, [r2, #4]
   4a47c:	b	49770 <__assert_fail@plt+0x3717c>
   4a480:	ldr	r2, [sp, #16]
   4a484:	ldr	r1, [sp, #32]
   4a488:	ldrb	r3, [r2, #16]
   4a48c:	tst	r1, #256	; 0x100
   4a490:	orr	r3, r3, #1
   4a494:	strb	r3, [r2, #16]
   4a498:	beq	4a4a8 <__assert_fail@plt+0x37eb4>
   4a49c:	ldr	r3, [r4]
   4a4a0:	orr	r3, r3, #1024	; 0x400
   4a4a4:	str	r3, [r4]
   4a4a8:	ldr	r3, [r9, #40]	; 0x28
   4a4ac:	mov	r1, r9
   4a4b0:	ldr	r5, [sp, #20]
   4a4b4:	ldr	r2, [sp, #32]
   4a4b8:	add	fp, r3, fp
   4a4bc:	mov	r0, r5
   4a4c0:	str	fp, [r9, #40]	; 0x28
   4a4c4:	bl	3c048 <__assert_fail@plt+0x29a54>
   4a4c8:	ldrb	r3, [r5, #4]
   4a4cc:	mov	fp, r0
   4a4d0:	cmp	r3, #2
   4a4d4:	beq	4a7f0 <__assert_fail@plt+0x381fc>
   4a4d8:	mov	r2, #1
   4a4dc:	str	r2, [sp, #44]	; 0x2c
   4a4e0:	b	49768 <__assert_fail@plt+0x37174>
   4a4e4:	ldr	r3, [sp, #52]	; 0x34
   4a4e8:	cmp	r3, #0
   4a4ec:	bne	4a29c <__assert_fail@plt+0x37ca8>
   4a4f0:	b	49de8 <__assert_fail@plt+0x377f4>
   4a4f4:	mov	r3, #7
   4a4f8:	ldr	sl, [sp, #24]
   4a4fc:	ldr	r2, [sp, #204]	; 0xcc
   4a500:	str	r3, [r2]
   4a504:	b	4a3e4 <__assert_fail@plt+0x37df0>
   4a508:	ldr	r4, [sp, #20]
   4a50c:	mov	r2, r3
   4a510:	mov	r1, r9
   4a514:	mov	r6, r3
   4a518:	mov	r0, r4
   4a51c:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   4a520:	ldr	lr, [sp, #200]	; 0xc8
   4a524:	mov	r3, r6
   4a528:	mov	r2, r4
   4a52c:	mov	r1, r5
   4a530:	ldr	ip, [r9, #40]	; 0x28
   4a534:	str	lr, [sp]
   4a538:	ldr	lr, [sp, #204]	; 0xcc
   4a53c:	add	ip, ip, r0
   4a540:	mov	r0, r9
   4a544:	str	lr, [sp, #4]
   4a548:	str	ip, [r9, #40]	; 0x28
   4a54c:	bl	48c08 <__assert_fail@plt+0x36614>
   4a550:	str	r0, [sp, #28]
   4a554:	b	491a0 <__assert_fail@plt+0x36bac>
   4a558:	mov	r0, #996	; 0x3e4
   4a55c:	str	r2, [sp, #16]
   4a560:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a564:	cmp	r0, #0
   4a568:	beq	495a0 <__assert_fail@plt+0x36fac>
   4a56c:	ldr	r1, [sl, #56]	; 0x38
   4a570:	mov	lr, #1
   4a574:	mov	ip, #4
   4a578:	mov	r3, #0
   4a57c:	ldr	r2, [sp, #16]
   4a580:	str	r1, [r0]
   4a584:	str	r0, [sl, #56]	; 0x38
   4a588:	b	49554 <__assert_fail@plt+0x36f60>
   4a58c:	mov	r0, #996	; 0x3e4
   4a590:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a594:	subs	fp, r0, #0
   4a598:	beq	49528 <__assert_fail@plt+0x36f34>
   4a59c:	ldr	r1, [sl, #56]	; 0x38
   4a5a0:	mov	r0, #4
   4a5a4:	mov	r2, #1
   4a5a8:	mov	r3, #0
   4a5ac:	str	r1, [fp]
   4a5b0:	str	fp, [sl, #56]	; 0x38
   4a5b4:	b	494e8 <__assert_fail@plt+0x36ef4>
   4a5b8:	ldr	sl, [sp, #24]
   4a5bc:	ldr	r3, [sp, #204]	; 0xcc
   4a5c0:	str	r0, [r3]
   4a5c4:	b	4a3e4 <__assert_fail@plt+0x37df0>
   4a5c8:	str	r5, [sp, #28]
   4a5cc:	b	48d7c <__assert_fail@plt+0x36788>
   4a5d0:	ldr	r4, [sp, #20]
   4a5d4:	mov	r3, #6
   4a5d8:	mov	r2, r4
   4a5dc:	str	r3, [r4]
   4a5e0:	bl	3fe6c <__assert_fail@plt+0x2d878>
   4a5e4:	mov	r3, #9
   4a5e8:	mov	r5, r0
   4a5ec:	str	r3, [r4]
   4a5f0:	b	4926c <__assert_fail@plt+0x36c78>
   4a5f4:	cmp	r4, #0
   4a5f8:	strne	r6, [r4]
   4a5fc:	b	495a0 <__assert_fail@plt+0x36fac>
   4a600:	ldr	r3, [r9, #40]	; 0x28
   4a604:	mov	r2, sl
   4a608:	add	r0, sp, #88	; 0x58
   4a60c:	mov	r1, r9
   4a610:	add	r3, r3, fp
   4a614:	str	r3, [r9, #40]	; 0x28
   4a618:	bl	3c048 <__assert_fail@plt+0x29a54>
   4a61c:	ldrb	r2, [sp, #92]	; 0x5c
   4a620:	mov	r3, r0
   4a624:	cmp	r2, #2
   4a628:	beq	4a4f4 <__assert_fail@plt+0x37f00>
   4a62c:	cmp	r2, #21
   4a630:	beq	4a800 <__assert_fail@plt+0x3820c>
   4a634:	mov	r1, #1
   4a638:	add	ip, sp, #128	; 0x80
   4a63c:	str	sl, [sp]
   4a640:	add	r2, sp, #88	; 0x58
   4a644:	add	r0, sp, #80	; 0x50
   4a648:	str	r1, [sp, #4]
   4a64c:	mov	r1, r9
   4a650:	str	r6, [sp, #80]	; 0x50
   4a654:	str	ip, [sp, #84]	; 0x54
   4a658:	bl	4027c <__assert_fail@plt+0x2dc88>
   4a65c:	cmp	r0, #0
   4a660:	bne	4a5b8 <__assert_fail@plt+0x37fc4>
   4a664:	mov	r2, sl
   4a668:	mov	r1, r9
   4a66c:	mov	r0, r5
   4a670:	bl	3c048 <__assert_fail@plt+0x29a54>
   4a674:	ldr	r2, [sp, #72]	; 0x48
   4a678:	mov	fp, r0
   4a67c:	sub	r3, r2, #2
   4a680:	bics	r3, r3, #2
   4a684:	beq	4ad00 <__assert_fail@plt+0x3870c>
   4a688:	ldr	r3, [sp, #80]	; 0x50
   4a68c:	sub	r1, r3, #2
   4a690:	bics	r1, r1, #2
   4a694:	beq	4ad00 <__assert_fail@plt+0x3870c>
   4a698:	cmp	r2, #3
   4a69c:	moveq	r1, #1
   4a6a0:	movne	r1, #0
   4a6a4:	str	r1, [sp, #52]	; 0x34
   4a6a8:	beq	4aecc <__assert_fail@plt+0x388d8>
   4a6ac:	cmp	r3, #3
   4a6b0:	beq	4aea4 <__assert_fail@plt+0x388b0>
   4a6b4:	cmp	r2, #0
   4a6b8:	bne	4ae50 <__assert_fail@plt+0x3885c>
   4a6bc:	ldrb	r7, [sp, #76]	; 0x4c
   4a6c0:	cmp	r3, #0
   4a6c4:	beq	4ae60 <__assert_fail@plt+0x3886c>
   4a6c8:	cmp	r3, #3
   4a6cc:	bne	4ae70 <__assert_fail@plt+0x3887c>
   4a6d0:	ldr	r1, [sp, #84]	; 0x54
   4a6d4:	ldrb	r8, [r1]
   4a6d8:	cmp	r2, #0
   4a6dc:	ldr	r1, [sp, #52]	; 0x34
   4a6e0:	moveq	r1, #1
   4a6e4:	cmp	r1, #0
   4a6e8:	beq	4ae68 <__assert_fail@plt+0x38874>
   4a6ec:	ldr	r2, [sp, #24]
   4a6f0:	ldr	r2, [r2, #92]	; 0x5c
   4a6f4:	cmp	r2, #1
   4a6f8:	ble	4acec <__assert_fail@plt+0x386f8>
   4a6fc:	mov	r0, r7
   4a700:	bl	123a8 <btowc@plt>
   4a704:	ldr	r3, [sp, #80]	; 0x50
   4a708:	mov	r7, r0
   4a70c:	cmp	r3, #3
   4a710:	cmpne	r3, #0
   4a714:	bne	4acf8 <__assert_fail@plt+0x38704>
   4a718:	ldr	r3, [sp, #24]
   4a71c:	ldr	r3, [r3, #92]	; 0x5c
   4a720:	cmp	r3, #1
   4a724:	ble	4a734 <__assert_fail@plt+0x38140>
   4a728:	mov	r0, r8
   4a72c:	bl	123a8 <btowc@plt>
   4a730:	mov	r8, r0
   4a734:	cmn	r7, #1
   4a738:	cmnne	r8, #1
   4a73c:	beq	4a8cc <__assert_fail@plt+0x382d8>
   4a740:	ldr	r3, [sp, #48]	; 0x30
   4a744:	cmp	r8, r7
   4a748:	movcs	r3, #0
   4a74c:	andcc	r3, r3, #1
   4a750:	cmp	r3, #0
   4a754:	bne	4ad00 <__assert_fail@plt+0x3870c>
   4a758:	ldr	r3, [sp, #24]
   4a75c:	ldr	r3, [r3, #92]	; 0x5c
   4a760:	cmp	r3, #1
   4a764:	ble	4a79c <__assert_fail@plt+0x381a8>
   4a768:	ldr	r2, [sp, #16]
   4a76c:	ldr	r1, [sp, #40]	; 0x28
   4a770:	ldr	r3, [r2, #32]
   4a774:	ldr	r2, [r2, #4]
   4a778:	cmp	r3, r1
   4a77c:	beq	4aef8 <__assert_fail@plt+0x38904>
   4a780:	ldr	r0, [sp, #16]
   4a784:	str	r7, [r2, r3, lsl #2]
   4a788:	ldr	r2, [r0, #8]
   4a78c:	ldr	r3, [r0, #32]
   4a790:	add	r1, r3, #1
   4a794:	str	r1, [r0, #32]
   4a798:	str	r8, [r2, r3, lsl #2]
   4a79c:	mov	r3, #0
   4a7a0:	mov	ip, #1
   4a7a4:	cmp	r7, r3
   4a7a8:	asr	r2, r3, #5
   4a7ac:	and	r0, r3, #31
   4a7b0:	movhi	r1, #0
   4a7b4:	movls	r1, #1
   4a7b8:	cmp	r8, r3
   4a7bc:	add	r3, r3, #1
   4a7c0:	movcc	r1, #0
   4a7c4:	cmp	r1, #0
   4a7c8:	beq	4a7d8 <__assert_fail@plt+0x381e4>
   4a7cc:	ldr	r1, [r4, r2, lsl #2]
   4a7d0:	orr	r1, r1, ip, lsl r0
   4a7d4:	str	r1, [r4, r2, lsl #2]
   4a7d8:	cmp	r3, #256	; 0x100
   4a7dc:	bne	4a7a4 <__assert_fail@plt+0x381b0>
   4a7e0:	ldr	r2, [sp, #204]	; 0xcc
   4a7e4:	mov	r3, #0
   4a7e8:	str	r3, [r2]
   4a7ec:	b	49960 <__assert_fail@plt+0x3736c>
   4a7f0:	ldr	r2, [sp, #204]	; 0xcc
   4a7f4:	mov	r3, #2
   4a7f8:	str	r3, [r2]
   4a7fc:	b	4a3e4 <__assert_fail@plt+0x37df0>
   4a800:	ldr	r2, [r9, #40]	; 0x28
   4a804:	mov	r1, #1
   4a808:	ldr	r3, [sp, #72]	; 0x48
   4a80c:	sub	r2, r2, fp
   4a810:	str	r2, [r9, #40]	; 0x28
   4a814:	strb	r1, [r5, #4]
   4a818:	b	4980c <__assert_fail@plt+0x37218>
   4a81c:	mov	r0, #996	; 0x3e4
   4a820:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a824:	cmp	r0, #0
   4a828:	beq	495a0 <__assert_fail@plt+0x36fac>
   4a82c:	ldr	r1, [sl, #56]	; 0x38
   4a830:	mov	r2, #1
   4a834:	mov	ip, #4
   4a838:	mov	r3, #0
   4a83c:	str	r1, [r0]
   4a840:	str	r0, [sl, #56]	; 0x38
   4a844:	b	49408 <__assert_fail@plt+0x36e14>
   4a848:	str	r2, [sp, #28]
   4a84c:	mov	r3, #6
   4a850:	ldr	r2, [sp, #204]	; 0xcc
   4a854:	str	r3, [r2]
   4a858:	b	491a0 <__assert_fail@plt+0x36bac>
   4a85c:	mov	r0, #996	; 0x3e4
   4a860:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a864:	cmp	r0, #0
   4a868:	beq	495a0 <__assert_fail@plt+0x36fac>
   4a86c:	ldr	r1, [sl, #56]	; 0x38
   4a870:	mov	r2, #1
   4a874:	mov	lr, #4
   4a878:	mov	r3, #0
   4a87c:	str	r1, [r0]
   4a880:	str	r0, [sl, #56]	; 0x38
   4a884:	b	495d4 <__assert_fail@plt+0x36fe0>
   4a888:	mov	r0, #996	; 0x3e4
   4a88c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a890:	cmp	r0, #0
   4a894:	beq	495a0 <__assert_fail@plt+0x36fac>
   4a898:	ldr	r3, [sl, #56]	; 0x38
   4a89c:	mov	r6, #4
   4a8a0:	mov	r2, #1
   4a8a4:	mov	r1, #0
   4a8a8:	str	r3, [r0]
   4a8ac:	str	r0, [sl, #56]	; 0x38
   4a8b0:	b	498b4 <__assert_fail@plt+0x372c0>
   4a8b4:	ldr	r0, [sp, #84]	; 0x54
   4a8b8:	strd	r2, [sp, #56]	; 0x38
   4a8bc:	bl	12300 <strlen@plt>
   4a8c0:	cmp	r0, #1
   4a8c4:	ldrd	r2, [sp, #56]	; 0x38
   4a8c8:	bls	4aeec <__assert_fail@plt+0x388f8>
   4a8cc:	mov	r3, #3
   4a8d0:	ldr	sl, [sp, #24]
   4a8d4:	ldr	r2, [sp, #204]	; 0xcc
   4a8d8:	str	r3, [r2]
   4a8dc:	b	4a3e4 <__assert_fail@plt+0x37df0>
   4a8e0:	mov	r0, r4
   4a8e4:	str	r6, [sp, #28]
   4a8e8:	bl	38b10 <__assert_fail@plt+0x2651c>
   4a8ec:	ldr	r0, [sp, #16]
   4a8f0:	bl	38b10 <__assert_fail@plt+0x2651c>
   4a8f4:	ldr	r2, [sp, #204]	; 0xcc
   4a8f8:	mov	r3, #12
   4a8fc:	str	r3, [r2]
   4a900:	b	491a0 <__assert_fail@plt+0x36bac>
   4a904:	mov	r0, #996	; 0x3e4
   4a908:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a90c:	cmp	r0, #0
   4a910:	beq	495a0 <__assert_fail@plt+0x36fac>
   4a914:	ldr	r1, [sl, #56]	; 0x38
   4a918:	mov	r2, #4
   4a91c:	mov	r3, #0
   4a920:	str	r1, [r0]
   4a924:	str	r0, [sl, #56]	; 0x38
   4a928:	b	49688 <__assert_fail@plt+0x37094>
   4a92c:	ldr	r3, [sp, #204]	; 0xcc
   4a930:	ldr	r3, [r3]
   4a934:	cmp	r3, #0
   4a938:	beq	49d24 <__assert_fail@plt+0x37730>
   4a93c:	b	49ac8 <__assert_fail@plt+0x374d4>
   4a940:	mov	r0, #996	; 0x3e4
   4a944:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a948:	cmp	r0, #0
   4a94c:	beq	495a0 <__assert_fail@plt+0x36fac>
   4a950:	ldr	r1, [sl, #56]	; 0x38
   4a954:	mov	r6, #4
   4a958:	mov	r2, #1
   4a95c:	mov	r3, #0
   4a960:	str	r1, [r0]
   4a964:	str	r0, [sl, #56]	; 0x38
   4a968:	b	492fc <__assert_fail@plt+0x36d08>
   4a96c:	mov	r0, #996	; 0x3e4
   4a970:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4a974:	cmp	r0, #0
   4a978:	beq	4af88 <__assert_fail@plt+0x38994>
   4a97c:	ldr	r1, [sl, #56]	; 0x38
   4a980:	mov	r4, #4
   4a984:	mov	r2, #1
   4a988:	mov	r3, #0
   4a98c:	str	r1, [r0]
   4a990:	str	r0, [sl, #56]	; 0x38
   4a994:	b	49288 <__assert_fail@plt+0x36c94>
   4a998:	ldr	r3, [r9, #40]	; 0x28
   4a99c:	ldr	sl, [sp, #24]
   4a9a0:	ldr	r2, [sp, #44]	; 0x2c
   4a9a4:	add	fp, r3, fp
   4a9a8:	str	fp, [r9, #40]	; 0x28
   4a9ac:	cmp	r2, #0
   4a9b0:	beq	4aa44 <__assert_fail@plt+0x38450>
   4a9b4:	ubfx	r2, r4, #2, #1
   4a9b8:	cmp	r2, #0
   4a9bc:	moveq	r1, r2
   4a9c0:	beq	4a9d4 <__assert_fail@plt+0x383e0>
   4a9c4:	ldr	r3, [r4]
   4a9c8:	mov	r1, #1
   4a9cc:	mvn	r3, r3
   4a9d0:	str	r3, [r4]
   4a9d4:	ldr	ip, [r4, r2, lsl #2]
   4a9d8:	rsb	lr, r2, #8
   4a9dc:	add	r3, r4, r2, lsl #2
   4a9e0:	lsr	lr, lr, #1
   4a9e4:	ldr	r0, [r3, #4]
   4a9e8:	cmp	lr, #4
   4a9ec:	mvn	ip, ip
   4a9f0:	str	ip, [r4, r2, lsl #2]
   4a9f4:	mvn	r2, r0
   4a9f8:	ldr	lr, [r3, #8]
   4a9fc:	ldr	ip, [r3, #12]
   4aa00:	ldr	r0, [r3, #16]
   4aa04:	mvn	lr, lr
   4aa08:	stmib	r3, {r2, lr}
   4aa0c:	mvn	ip, ip
   4aa10:	ldr	r2, [r3, #20]
   4aa14:	mvn	r0, r0
   4aa18:	str	ip, [r3, #12]
   4aa1c:	str	r0, [r3, #16]
   4aa20:	mvn	r2, r2
   4aa24:	str	r2, [r3, #20]
   4aa28:	bne	4abb8 <__assert_fail@plt+0x385c4>
   4aa2c:	ldr	r1, [r3, #24]
   4aa30:	ldr	r2, [r3, #28]
   4aa34:	mvn	r1, r1
   4aa38:	mvn	r2, r2
   4aa3c:	str	r1, [r3, #24]
   4aa40:	str	r2, [r3, #28]
   4aa44:	ldr	ip, [sl, #92]	; 0x5c
   4aa48:	cmp	ip, #1
   4aa4c:	ble	4aafc <__assert_fail@plt+0x38508>
   4aa50:	ldr	r3, [sl, #60]	; 0x3c
   4aa54:	add	r1, r4, #8
   4aa58:	add	r2, r3, #8
   4aa5c:	orr	r0, r3, r4
   4aa60:	cmp	r3, r1
   4aa64:	cmpcc	r4, r2
   4aa68:	movcs	r2, #1
   4aa6c:	movcc	r2, #0
   4aa70:	tst	r0, #7
   4aa74:	movne	r2, #0
   4aa78:	cmp	r2, #0
   4aa7c:	ldr	r2, [r4]
   4aa80:	beq	4af9c <__assert_fail@plt+0x389a8>
   4aa84:	ldm	r3, {r0, lr}
   4aa88:	ldr	r1, [r4, #4]
   4aa8c:	and	r2, r2, r0
   4aa90:	ldr	r0, [r4, #8]
   4aa94:	and	r1, r1, lr
   4aa98:	str	r2, [r4]
   4aa9c:	ldr	r2, [r4, #12]
   4aaa0:	str	r1, [r4, #4]
   4aaa4:	ldr	r1, [r3, #8]
   4aaa8:	ldr	lr, [r3, #12]
   4aaac:	and	r0, r0, r1
   4aab0:	ldr	r1, [r4, #16]
   4aab4:	and	r2, r2, lr
   4aab8:	str	r0, [r4, #8]
   4aabc:	ldr	lr, [r4, #20]
   4aac0:	str	r2, [r4, #12]
   4aac4:	ldr	r2, [r3, #16]
   4aac8:	ldr	r0, [r3, #20]
   4aacc:	and	r2, r2, r1
   4aad0:	ldr	r1, [r4, #24]
   4aad4:	and	r0, r0, lr
   4aad8:	str	r2, [r4, #16]
   4aadc:	ldr	r2, [r4, #28]
   4aae0:	str	r0, [r4, #20]
   4aae4:	ldr	r0, [r3, #24]
   4aae8:	ldr	r3, [r3, #28]
   4aaec:	and	r1, r1, r0
   4aaf0:	and	r3, r3, r2
   4aaf4:	str	r1, [r4, #24]
   4aaf8:	str	r3, [r4, #28]
   4aafc:	ldr	r3, [sp, #16]
   4ab00:	ldr	r3, [r3, #20]
   4ab04:	cmp	r3, #0
   4ab08:	bne	4abcc <__assert_fail@plt+0x385d8>
   4ab0c:	ldr	r2, [sp, #16]
   4ab10:	ldr	r3, [r2, #24]
   4ab14:	cmp	r3, #0
   4ab18:	bne	4abcc <__assert_fail@plt+0x385d8>
   4ab1c:	ldr	r3, [r2, #28]
   4ab20:	cmp	r3, #0
   4ab24:	bne	4abcc <__assert_fail@plt+0x385d8>
   4ab28:	ldr	r3, [r2, #32]
   4ab2c:	cmp	r3, #0
   4ab30:	bne	4abcc <__assert_fail@plt+0x385d8>
   4ab34:	cmp	ip, #1
   4ab38:	ble	4ab54 <__assert_fail@plt+0x38560>
   4ab3c:	ldr	r3, [r2, #36]	; 0x24
   4ab40:	cmp	r3, #0
   4ab44:	bne	4abcc <__assert_fail@plt+0x385d8>
   4ab48:	ldrb	r3, [r2, #16]
   4ab4c:	tst	r3, #1
   4ab50:	bne	4abcc <__assert_fail@plt+0x385d8>
   4ab54:	ldr	r5, [sp, #16]
   4ab58:	ldr	r0, [r5]
   4ab5c:	bl	38b10 <__assert_fail@plt+0x2651c>
   4ab60:	ldr	r0, [r5, #4]
   4ab64:	bl	38b10 <__assert_fail@plt+0x2651c>
   4ab68:	ldr	r0, [r5, #8]
   4ab6c:	bl	38b10 <__assert_fail@plt+0x2651c>
   4ab70:	ldr	r0, [r5, #12]
   4ab74:	bl	38b10 <__assert_fail@plt+0x2651c>
   4ab78:	mov	r0, r5
   4ab7c:	bl	38b10 <__assert_fail@plt+0x2651c>
   4ab80:	mov	r3, #3
   4ab84:	add	r1, sl, #64	; 0x40
   4ab88:	ldr	r2, [sp, #28]
   4ab8c:	add	r0, sl, #56	; 0x38
   4ab90:	str	r4, [sp, #96]	; 0x60
   4ab94:	strb	r3, [sp, #100]	; 0x64
   4ab98:	bl	3fe6c <__assert_fail@plt+0x2d878>
   4ab9c:	subs	r3, r0, #0
   4aba0:	str	r3, [sp, #28]
   4aba4:	bne	48d7c <__assert_fail@plt+0x36788>
   4aba8:	ldr	r2, [sp, #204]	; 0xcc
   4abac:	mov	r3, #12
   4abb0:	str	r3, [r2]
   4abb4:	b	4a3e4 <__assert_fail@plt+0x37df0>
   4abb8:	add	r3, r1, #6
   4abbc:	ldr	r2, [r4, r3, lsl #2]
   4abc0:	mvn	r2, r2
   4abc4:	str	r2, [r4, r3, lsl #2]
   4abc8:	b	4aa44 <__assert_fail@plt+0x38450>
   4abcc:	ldrb	r3, [sl, #88]	; 0x58
   4abd0:	mov	r2, #6
   4abd4:	orr	r3, r3, #2
   4abd8:	strb	r3, [sl, #88]	; 0x58
   4abdc:	ldr	r3, [sp, #16]
   4abe0:	str	r3, [sp, #96]	; 0x60
   4abe4:	strb	r2, [sp, #100]	; 0x64
   4abe8:	ldr	r3, [sl, #64]	; 0x40
   4abec:	cmp	r3, #31
   4abf0:	beq	4af58 <__assert_fail@plt+0x38964>
   4abf4:	ldr	r5, [sl, #56]	; 0x38
   4abf8:	lsl	r6, r3, #5
   4abfc:	add	r3, r3, #1
   4ac00:	mov	r1, #0
   4ac04:	mvn	ip, #0
   4ac08:	add	r0, r6, #16
   4ac0c:	str	r3, [sl, #64]	; 0x40
   4ac10:	add	r3, r6, #4
   4ac14:	add	r6, r5, r6
   4ac18:	add	r0, r5, r0
   4ac1c:	adds	r5, r5, r3
   4ac20:	str	r1, [r6, #4]
   4ac24:	str	r1, [r6, #8]
   4ac28:	str	r1, [r6, #12]
   4ac2c:	ldrd	r2, [sp, #96]	; 0x60
   4ac30:	strd	r2, [r6, #24]
   4ac34:	ldrb	r3, [r0, #14]
   4ac38:	bic	r3, r3, #12
   4ac3c:	strb	r3, [r0, #14]
   4ac40:	str	r1, [r6, #16]
   4ac44:	str	r1, [r6, #20]
   4ac48:	str	ip, [r6, #32]
   4ac4c:	beq	4aba8 <__assert_fail@plt+0x385b4>
   4ac50:	ldr	r3, [r4]
   4ac54:	cmp	r3, r1
   4ac58:	bne	4ad9c <__assert_fail@plt+0x387a8>
   4ac5c:	ldr	r3, [r4, #4]
   4ac60:	cmp	r3, r1
   4ac64:	bne	4ad9c <__assert_fail@plt+0x387a8>
   4ac68:	ldr	r3, [r4, #8]
   4ac6c:	cmp	r3, r1
   4ac70:	bne	4ad9c <__assert_fail@plt+0x387a8>
   4ac74:	ldr	r3, [r4, #12]
   4ac78:	cmp	r3, r1
   4ac7c:	bne	4ad9c <__assert_fail@plt+0x387a8>
   4ac80:	ldr	r3, [r4, #16]
   4ac84:	cmp	r3, r1
   4ac88:	bne	4ad9c <__assert_fail@plt+0x387a8>
   4ac8c:	ldr	r3, [r4, #20]
   4ac90:	cmp	r3, r1
   4ac94:	bne	4ad9c <__assert_fail@plt+0x387a8>
   4ac98:	ldr	r3, [r4, #24]
   4ac9c:	cmp	r3, r1
   4aca0:	bne	4ad9c <__assert_fail@plt+0x387a8>
   4aca4:	ldr	r3, [r4, #28]
   4aca8:	cmp	r3, r1
   4acac:	bne	4ad9c <__assert_fail@plt+0x387a8>
   4acb0:	mov	r0, r4
   4acb4:	str	r5, [sp, #28]
   4acb8:	bl	38b10 <__assert_fail@plt+0x2651c>
   4acbc:	b	48d7c <__assert_fail@plt+0x36788>
   4acc0:	lsl	r3, r2, #1
   4acc4:	add	r3, r3, #1
   4acc8:	lsl	r1, r3, #2
   4accc:	str	r3, [sp, #36]	; 0x24
   4acd0:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   4acd4:	cmp	r0, #0
   4acd8:	beq	4b01c <__assert_fail@plt+0x38a28>
   4acdc:	ldr	r2, [sp, #16]
   4ace0:	str	r0, [r2]
   4ace4:	ldr	r3, [r2, #20]
   4ace8:	b	4a380 <__assert_fail@plt+0x37d8c>
   4acec:	cmp	r3, #0
   4acf0:	cmpne	r3, #3
   4acf4:	beq	4a740 <__assert_fail@plt+0x3814c>
   4acf8:	ldr	r8, [sp, #84]	; 0x54
   4acfc:	b	4a734 <__assert_fail@plt+0x38140>
   4ad00:	mov	r3, #11
   4ad04:	ldr	sl, [sp, #24]
   4ad08:	ldr	r2, [sp, #204]	; 0xcc
   4ad0c:	str	r3, [r2]
   4ad10:	b	4a3e4 <__assert_fail@plt+0x37df0>
   4ad14:	mov	r4, #128	; 0x80
   4ad18:	mov	r7, #4
   4ad1c:	bl	122b8 <__ctype_b_loc@plt>
   4ad20:	ldr	r2, [r0]
   4ad24:	add	ip, r7, #24
   4ad28:	sub	r3, r4, #-2147483647	; 0x80000001
   4ad2c:	mov	lr, #1
   4ad30:	add	ip, sl, ip, lsl #2
   4ad34:	add	r7, sl, #128	; 0x80
   4ad38:	add	r6, r2, r3, lsl lr
   4ad3c:	mov	r0, r6
   4ad40:	mov	r1, #0
   4ad44:	ldrh	r2, [r0, #2]!
   4ad48:	add	r3, r4, r1
   4ad4c:	ubfx	r2, r2, #3, #1
   4ad50:	cmp	r3, #95	; 0x5f
   4ad54:	movne	r3, r2
   4ad58:	orreq	r3, r2, #1
   4ad5c:	cmp	r3, #0
   4ad60:	beq	4ad70 <__assert_fail@plt+0x3877c>
   4ad64:	ldr	r3, [ip]
   4ad68:	orr	r3, r3, lr, lsl r1
   4ad6c:	str	r3, [ip]
   4ad70:	add	r1, r1, #1
   4ad74:	cmp	r1, #32
   4ad78:	bne	4ad44 <__assert_fail@plt+0x38750>
   4ad7c:	add	ip, ip, #4
   4ad80:	add	r4, r4, #32
   4ad84:	cmp	ip, r7
   4ad88:	add	r6, r6, #64	; 0x40
   4ad8c:	bne	4ad3c <__assert_fail@plt+0x38748>
   4ad90:	b	49230 <__assert_fail@plt+0x36c3c>
   4ad94:	mov	r7, r4
   4ad98:	b	4ad1c <__assert_fail@plt+0x38728>
   4ad9c:	mov	r3, #3
   4ada0:	add	r1, sl, #64	; 0x40
   4ada4:	ldr	r2, [sp, #28]
   4ada8:	add	r0, sl, #56	; 0x38
   4adac:	str	r4, [sp, #96]	; 0x60
   4adb0:	strb	r3, [sp, #100]	; 0x64
   4adb4:	bl	3fe6c <__assert_fail@plt+0x2d878>
   4adb8:	subs	r7, r0, #0
   4adbc:	beq	4aba8 <__assert_fail@plt+0x385b4>
   4adc0:	mov	r2, #0
   4adc4:	mov	r3, #0
   4adc8:	strd	r2, [sp, #128]	; 0x80
   4adcc:	ldr	r2, [sl, #64]	; 0x40
   4add0:	cmp	r2, #31
   4add4:	beq	4ae78 <__assert_fail@plt+0x38884>
   4add8:	ldr	ip, [sl, #56]	; 0x38
   4addc:	lsl	r3, r2, #5
   4ade0:	add	r2, r2, #1
   4ade4:	mov	fp, #0
   4ade8:	mov	lr, #10
   4adec:	add	r0, r3, #4
   4adf0:	str	r2, [sl, #64]	; 0x40
   4adf4:	add	r2, r3, #16
   4adf8:	mvn	r8, #0
   4adfc:	add	r3, ip, r3
   4ae00:	add	r2, ip, r2
   4ae04:	add	ip, ip, r0
   4ae08:	str	fp, [r3, #4]
   4ae0c:	cmp	ip, fp
   4ae10:	str	r7, [r3, #8]
   4ae14:	str	r5, [r3, #12]
   4ae18:	str	ip, [sp, #28]
   4ae1c:	strb	lr, [sp, #132]	; 0x84
   4ae20:	ldrd	r0, [sp, #128]	; 0x80
   4ae24:	strd	r0, [r3, #24]
   4ae28:	ldrb	r0, [r2, #14]
   4ae2c:	bic	r0, r0, #12
   4ae30:	strb	r0, [r2, #14]
   4ae34:	str	fp, [r3, #16]
   4ae38:	str	fp, [r3, #20]
   4ae3c:	str	r8, [r3, #32]
   4ae40:	str	ip, [r7]
   4ae44:	str	ip, [r6, #4]
   4ae48:	bne	48d7c <__assert_fail@plt+0x36788>
   4ae4c:	b	4aba8 <__assert_fail@plt+0x385b4>
   4ae50:	cmp	r3, #0
   4ae54:	movne	r7, #0
   4ae58:	bne	4ae70 <__assert_fail@plt+0x3887c>
   4ae5c:	mov	r7, r3
   4ae60:	ldrb	r8, [sp, #84]	; 0x54
   4ae64:	b	4a6d8 <__assert_fail@plt+0x380e4>
   4ae68:	ldr	r7, [sp, #76]	; 0x4c
   4ae6c:	b	4a70c <__assert_fail@plt+0x38118>
   4ae70:	mov	r8, #0
   4ae74:	b	4a6d8 <__assert_fail@plt+0x380e4>
   4ae78:	mov	r0, #996	; 0x3e4
   4ae7c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4ae80:	cmp	r0, #0
   4ae84:	beq	4aba8 <__assert_fail@plt+0x385b4>
   4ae88:	ldr	r1, [sl, #56]	; 0x38
   4ae8c:	mov	r3, #0
   4ae90:	mov	r2, r3
   4ae94:	str	r1, [r0]
   4ae98:	str	r0, [sl, #56]	; 0x38
   4ae9c:	str	r3, [sl, #64]	; 0x40
   4aea0:	b	4add8 <__assert_fail@plt+0x387e4>
   4aea4:	ldr	r0, [sp, #84]	; 0x54
   4aea8:	strd	r2, [sp, #56]	; 0x38
   4aeac:	bl	12300 <strlen@plt>
   4aeb0:	cmp	r0, #1
   4aeb4:	bhi	4a8cc <__assert_fail@plt+0x382d8>
   4aeb8:	ldrd	r2, [sp, #56]	; 0x38
   4aebc:	cmp	r2, #0
   4aec0:	movne	r7, #0
   4aec4:	bne	4a6d0 <__assert_fail@plt+0x380dc>
   4aec8:	b	4a6bc <__assert_fail@plt+0x380c8>
   4aecc:	ldr	r0, [sp, #76]	; 0x4c
   4aed0:	strd	r2, [sp, #56]	; 0x38
   4aed4:	bl	12300 <strlen@plt>
   4aed8:	cmp	r0, #1
   4aedc:	ldrd	r2, [sp, #56]	; 0x38
   4aee0:	bhi	4a8cc <__assert_fail@plt+0x382d8>
   4aee4:	cmp	r3, #3
   4aee8:	beq	4a8b4 <__assert_fail@plt+0x382c0>
   4aeec:	ldr	r1, [sp, #76]	; 0x4c
   4aef0:	ldrb	r7, [r1]
   4aef4:	b	4a6c0 <__assert_fail@plt+0x380cc>
   4aef8:	lsl	r3, r1, #1
   4aefc:	mov	r0, r2
   4af00:	add	r3, r3, #1
   4af04:	str	r3, [sp, #40]	; 0x28
   4af08:	lsl	r3, r3, #2
   4af0c:	mov	r1, r3
   4af10:	str	r3, [sp, #56]	; 0x38
   4af14:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   4af18:	ldr	r3, [sp, #56]	; 0x38
   4af1c:	mov	r2, r0
   4af20:	str	r2, [sp, #52]	; 0x34
   4af24:	mov	r1, r3
   4af28:	ldr	r3, [sp, #16]
   4af2c:	ldr	r0, [r3, #8]
   4af30:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   4af34:	ldr	r2, [sp, #52]	; 0x34
   4af38:	cmp	r0, #0
   4af3c:	cmpne	r2, #0
   4af40:	beq	4b024 <__assert_fail@plt+0x38a30>
   4af44:	ldr	r1, [sp, #16]
   4af48:	str	r2, [r1, #4]
   4af4c:	str	r0, [r1, #8]
   4af50:	ldr	r3, [r1, #32]
   4af54:	b	4a780 <__assert_fail@plt+0x3818c>
   4af58:	mov	r0, #996	; 0x3e4
   4af5c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4af60:	cmp	r0, #0
   4af64:	beq	4aba8 <__assert_fail@plt+0x385b4>
   4af68:	ldr	r2, [sl, #56]	; 0x38
   4af6c:	mov	r3, #0
   4af70:	str	r2, [r0]
   4af74:	str	r0, [sl, #56]	; 0x38
   4af78:	b	4abf4 <__assert_fail@plt+0x38600>
   4af7c:	add	r8, sp, #128	; 0x80
   4af80:	ldr	r7, [sp, #28]
   4af84:	b	4a170 <__assert_fail@plt+0x37b7c>
   4af88:	mov	r4, r0
   4af8c:	b	492d4 <__assert_fail@plt+0x36ce0>
   4af90:	ldr	r7, [sp, #28]
   4af94:	mov	r4, r7
   4af98:	b	4a080 <__assert_fail@plt+0x37a8c>
   4af9c:	ldr	r1, [r3]
   4afa0:	ldr	lr, [r4, #4]
   4afa4:	ldr	r0, [r4, #8]
   4afa8:	and	r2, r2, r1
   4afac:	ldr	r1, [r4, #12]
   4afb0:	str	r2, [r4]
   4afb4:	ldr	r2, [r3, #4]
   4afb8:	ldr	r5, [r4, #20]
   4afbc:	and	lr, lr, r2
   4afc0:	ldr	r2, [r4, #16]
   4afc4:	str	lr, [r4, #4]
   4afc8:	ldr	lr, [r3, #8]
   4afcc:	and	r0, r0, lr
   4afd0:	ldr	lr, [r4, #24]
   4afd4:	str	r0, [r4, #8]
   4afd8:	ldr	r0, [r3, #12]
   4afdc:	and	r1, r1, r0
   4afe0:	ldr	r0, [r4, #28]
   4afe4:	str	r1, [r4, #12]
   4afe8:	ldr	r1, [r3, #16]
   4afec:	and	r2, r2, r1
   4aff0:	str	r2, [r4, #16]
   4aff4:	ldr	r2, [r3, #20]
   4aff8:	and	r5, r5, r2
   4affc:	str	r5, [r4, #20]
   4b000:	ldr	r2, [r3, #24]
   4b004:	and	lr, lr, r2
   4b008:	str	lr, [r4, #24]
   4b00c:	ldr	r3, [r3, #28]
   4b010:	and	r0, r0, r3
   4b014:	str	r0, [r4, #28]
   4b018:	b	4aafc <__assert_fail@plt+0x38508>
   4b01c:	ldr	sl, [sp, #24]
   4b020:	b	4aba8 <__assert_fail@plt+0x385b4>
   4b024:	mov	r8, r0
   4b028:	mov	r0, r2
   4b02c:	ldr	sl, [sp, #24]
   4b030:	bl	38b10 <__assert_fail@plt+0x2651c>
   4b034:	mov	r0, r8
   4b038:	bl	38b10 <__assert_fail@plt+0x2651c>
   4b03c:	ldr	r2, [sp, #204]	; 0xcc
   4b040:	mov	r3, #12
   4b044:	str	r3, [r2]
   4b048:	b	4a3e4 <__assert_fail@plt+0x37df0>
   4b04c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4b050:	strd	r6, [sp, #8]
   4b054:	mov	r7, r2
   4b058:	strd	r8, [sp, #16]
   4b05c:	mov	r8, r1
   4b060:	strd	sl, [sp, #24]
   4b064:	mov	fp, r0
   4b068:	str	lr, [sp, #32]
   4b06c:	sub	sp, sp, #44	; 0x2c
   4b070:	ldr	r6, [sp, #80]	; 0x50
   4b074:	str	r3, [sp, #12]
   4b078:	ldr	r5, [sp, #84]	; 0x54
   4b07c:	ldr	r9, [r1]
   4b080:	str	r6, [sp]
   4b084:	str	r5, [sp, #4]
   4b088:	bl	48c08 <__assert_fail@plt+0x36614>
   4b08c:	ldr	r2, [r5]
   4b090:	clz	r3, r0
   4b094:	lsr	r3, r3, #5
   4b098:	cmp	r2, #0
   4b09c:	moveq	r3, #0
   4b0a0:	cmp	r3, #0
   4b0a4:	bne	4b260 <__assert_fail@plt+0x38c6c>
   4b0a8:	mov	r4, r0
   4b0ac:	strd	r8, [sp, #16]
   4b0b0:	str	r3, [sp, #24]
   4b0b4:	ldrb	r2, [r7, #4]
   4b0b8:	and	r3, r2, #247	; 0xf7
   4b0bc:	cmp	r3, #2
   4b0c0:	beq	4b13c <__assert_fail@plt+0x38b48>
   4b0c4:	clz	r3, r6
   4b0c8:	lsr	r3, r3, #5
   4b0cc:	cmp	r2, #9
   4b0d0:	orrne	r3, r3, #1
   4b0d4:	cmp	r3, #0
   4b0d8:	beq	4b13c <__assert_fail@plt+0x38b48>
   4b0dc:	mov	r2, r7
   4b0e0:	mov	r0, fp
   4b0e4:	str	r6, [sp]
   4b0e8:	str	r5, [sp, #4]
   4b0ec:	ldr	r3, [sp, #12]
   4b0f0:	ldr	r1, [sp, #16]
   4b0f4:	bl	48c08 <__assert_fail@plt+0x36614>
   4b0f8:	ldr	r2, [r5]
   4b0fc:	clz	r3, r0
   4b100:	mov	sl, r0
   4b104:	lsr	r3, r3, #5
   4b108:	cmp	r2, #0
   4b10c:	moveq	r3, #0
   4b110:	cmp	r3, #0
   4b114:	bne	4b228 <__assert_fail@plt+0x38c34>
   4b118:	cmp	r4, #0
   4b11c:	cmpne	r0, #0
   4b120:	bne	4b15c <__assert_fail@plt+0x38b68>
   4b124:	ldrb	r2, [r7, #4]
   4b128:	cmp	r4, #0
   4b12c:	moveq	r4, r0
   4b130:	and	r3, r2, #247	; 0xf7
   4b134:	cmp	r3, #2
   4b138:	bne	4b0c4 <__assert_fail@plt+0x38ad0>
   4b13c:	mov	r0, r4
   4b140:	add	sp, sp, #44	; 0x2c
   4b144:	ldrd	r4, [sp]
   4b148:	ldrd	r6, [sp, #8]
   4b14c:	ldrd	r8, [sp, #16]
   4b150:	ldrd	sl, [sp, #24]
   4b154:	add	sp, sp, #32
   4b158:	pop	{pc}		; (ldr pc, [sp], #4)
   4b15c:	ldr	r2, [sp, #20]
   4b160:	mov	r0, #0
   4b164:	mov	r1, #0
   4b168:	strd	r0, [sp, #32]
   4b16c:	ldr	ip, [r2, #64]	; 0x40
   4b170:	cmp	ip, #31
   4b174:	beq	4b1f4 <__assert_fail@plt+0x38c00>
   4b178:	ldr	r0, [r2, #56]	; 0x38
   4b17c:	lsl	r3, ip, #5
   4b180:	add	ip, ip, #1
   4b184:	add	r1, r3, #4
   4b188:	mov	r2, #16
   4b18c:	ldr	lr, [sp, #24]
   4b190:	strb	r2, [sp, #36]	; 0x24
   4b194:	add	r2, r0, r3
   4b198:	add	r3, r3, #16
   4b19c:	add	r3, r0, r3
   4b1a0:	add	r0, r0, r1
   4b1a4:	ldr	r1, [sp, #20]
   4b1a8:	cmp	r0, #0
   4b1ac:	ldrd	r8, [sp, #32]
   4b1b0:	str	ip, [r1, #64]	; 0x40
   4b1b4:	mvn	r1, #0
   4b1b8:	str	lr, [r2, #4]
   4b1bc:	str	r4, [r2, #8]
   4b1c0:	str	sl, [r2, #12]
   4b1c4:	strd	r8, [r2, #24]
   4b1c8:	ldrb	ip, [r3, #14]
   4b1cc:	bic	ip, ip, #12
   4b1d0:	strb	ip, [r3, #14]
   4b1d4:	str	lr, [r2, #16]
   4b1d8:	str	lr, [r2, #20]
   4b1dc:	str	r1, [r2, #32]
   4b1e0:	str	r0, [r4]
   4b1e4:	str	r0, [sl]
   4b1e8:	beq	4b240 <__assert_fail@plt+0x38c4c>
   4b1ec:	mov	r4, r0
   4b1f0:	b	4b0b4 <__assert_fail@plt+0x38ac0>
   4b1f4:	mov	r0, #996	; 0x3e4
   4b1f8:	str	r3, [sp, #28]
   4b1fc:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4b200:	cmp	r0, #0
   4b204:	beq	4b240 <__assert_fail@plt+0x38c4c>
   4b208:	ldr	lr, [sp, #20]
   4b20c:	mov	ip, #1
   4b210:	mov	r1, #4
   4b214:	ldr	r3, [sp, #28]
   4b218:	ldr	r2, [lr, #56]	; 0x38
   4b21c:	str	r2, [r0]
   4b220:	str	r0, [lr, #56]	; 0x38
   4b224:	b	4b188 <__assert_fail@plt+0x38b94>
   4b228:	cmp	r4, #0
   4b22c:	beq	4b260 <__assert_fail@plt+0x38c6c>
   4b230:	mov	r0, r4
   4b234:	mov	r4, #0
   4b238:	bl	4082c <__assert_fail@plt+0x2e238>
   4b23c:	b	4b13c <__assert_fail@plt+0x38b48>
   4b240:	mov	r0, sl
   4b244:	bl	4082c <__assert_fail@plt+0x2e238>
   4b248:	mov	r0, r4
   4b24c:	mov	r4, #0
   4b250:	bl	4082c <__assert_fail@plt+0x2e238>
   4b254:	mov	r3, #12
   4b258:	str	r3, [r5]
   4b25c:	b	4b13c <__assert_fail@plt+0x38b48>
   4b260:	mov	r4, #0
   4b264:	b	4b13c <__assert_fail@plt+0x38b48>
   4b268:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4b26c:	mov	r5, r2
   4b270:	mov	r4, r0
   4b274:	strd	r6, [sp, #8]
   4b278:	ldr	r6, [r1]
   4b27c:	strd	r8, [sp, #16]
   4b280:	mov	r8, r3
   4b284:	strd	sl, [sp, #24]
   4b288:	mov	sl, r1
   4b28c:	str	lr, [sp, #32]
   4b290:	sub	sp, sp, #76	; 0x4c
   4b294:	ldr	r9, [sp, #116]	; 0x74
   4b298:	ldr	ip, [r6, #84]	; 0x54
   4b29c:	str	r9, [sp, #4]
   4b2a0:	str	ip, [sp, #16]
   4b2a4:	ldr	ip, [sp, #112]	; 0x70
   4b2a8:	str	ip, [sp]
   4b2ac:	bl	4b04c <__assert_fail@plt+0x38a58>
   4b2b0:	ldr	r2, [r9]
   4b2b4:	clz	r3, r0
   4b2b8:	lsr	r3, r3, #5
   4b2bc:	cmp	r2, #0
   4b2c0:	moveq	r3, #0
   4b2c4:	cmp	r3, #0
   4b2c8:	bne	4be10 <__assert_fail@plt+0x3981c>
   4b2cc:	movw	r3, #1026	; 0x402
   4b2d0:	mov	r2, #65280	; 0xff00
   4b2d4:	movt	r2, #65503	; 0xffdf
   4b2d8:	and	r3, r8, r3
   4b2dc:	str	r8, [sp, #12]
   4b2e0:	mov	r7, r0
   4b2e4:	str	sl, [sp, #20]
   4b2e8:	str	r3, [sp, #32]
   4b2ec:	and	r3, r8, #4608	; 0x1200
   4b2f0:	str	r3, [sp, #36]	; 0x24
   4b2f4:	and	r3, r8, #33792	; 0x8400
   4b2f8:	str	r2, [sp, #40]	; 0x28
   4b2fc:	str	r3, [sp, #44]	; 0x2c
   4b300:	and	r3, r8, #8192	; 0x2000
   4b304:	str	r9, [sp, #116]	; 0x74
   4b308:	str	r3, [sp, #28]
   4b30c:	and	r3, r8, #8
   4b310:	str	r3, [sp, #52]	; 0x34
   4b314:	and	r3, r8, #2048	; 0x800
   4b318:	str	r3, [sp, #56]	; 0x38
   4b31c:	and	r3, r8, #524288	; 0x80000
   4b320:	str	r3, [sp, #48]	; 0x30
   4b324:	and	r3, r8, #16384	; 0x4000
   4b328:	str	r3, [sp, #60]	; 0x3c
   4b32c:	ldrb	r3, [r5, #4]
   4b330:	cmp	r3, #10
   4b334:	bne	4b6e8 <__assert_fail@plt+0x390f4>
   4b338:	ldr	r0, [r4, #40]	; 0x28
   4b33c:	ldr	r3, [r4, #56]	; 0x38
   4b340:	cmp	r3, r0
   4b344:	ble	4b6bc <__assert_fail@plt+0x390c8>
   4b348:	ldr	r1, [r4, #4]
   4b34c:	add	fp, r0, #1
   4b350:	ldrb	ip, [r5, #6]
   4b354:	ldr	r2, [r4, #80]	; 0x50
   4b358:	ldrb	sl, [r1, r0]
   4b35c:	bic	ip, ip, #96	; 0x60
   4b360:	cmp	r2, #1
   4b364:	strb	sl, [r5]
   4b368:	strb	ip, [r5, #6]
   4b36c:	ble	4b708 <__assert_fail@plt+0x39114>
   4b370:	ldr	ip, [r4, #28]
   4b374:	cmp	r0, ip
   4b378:	beq	4b38c <__assert_fail@plt+0x38d98>
   4b37c:	ldr	ip, [r4, #8]
   4b380:	ldr	ip, [ip, r0, lsl #2]
   4b384:	cmn	ip, #1
   4b388:	beq	4b9cc <__assert_fail@plt+0x393d8>
   4b38c:	cmp	sl, #92	; 0x5c
   4b390:	beq	4b744 <__assert_fail@plt+0x39150>
   4b394:	ldr	r2, [r4, #8]
   4b398:	mov	r1, #1
   4b39c:	strb	r1, [r5, #4]
   4b3a0:	ldr	r2, [r2, r0, lsl #2]
   4b3a4:	mov	r0, r2
   4b3a8:	str	r2, [sp, #24]
   4b3ac:	bl	12354 <iswalnum@plt>
   4b3b0:	ldr	r2, [sp, #24]
   4b3b4:	adds	r0, r0, #0
   4b3b8:	movne	r0, #1
   4b3bc:	ldrb	r1, [r5, #6]
   4b3c0:	cmp	r2, #95	; 0x5f
   4b3c4:	orreq	r0, r0, #1
   4b3c8:	bfi	r1, r0, #6, #1
   4b3cc:	strb	r1, [r5, #6]
   4b3d0:	sub	r3, sl, #10
   4b3d4:	cmp	r3, #115	; 0x73
   4b3d8:	ldrls	pc, [pc, r3, lsl #2]
   4b3dc:	b	4b5bc <__assert_fail@plt+0x38fc8>
   4b3e0:	andeq	fp, r4, r4, lsr sl
   4b3e4:			; <UNDEFINED> instruction: 0x0004b5bc
   4b3e8:			; <UNDEFINED> instruction: 0x0004b5bc
   4b3ec:			; <UNDEFINED> instruction: 0x0004b5bc
   4b3f0:			; <UNDEFINED> instruction: 0x0004b5bc
   4b3f4:			; <UNDEFINED> instruction: 0x0004b5bc
   4b3f8:			; <UNDEFINED> instruction: 0x0004b5bc
   4b3fc:			; <UNDEFINED> instruction: 0x0004b5bc
   4b400:			; <UNDEFINED> instruction: 0x0004b5bc
   4b404:			; <UNDEFINED> instruction: 0x0004b5bc
   4b408:			; <UNDEFINED> instruction: 0x0004b5bc
   4b40c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b410:			; <UNDEFINED> instruction: 0x0004b5bc
   4b414:			; <UNDEFINED> instruction: 0x0004b5bc
   4b418:			; <UNDEFINED> instruction: 0x0004b5bc
   4b41c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b420:			; <UNDEFINED> instruction: 0x0004b5bc
   4b424:			; <UNDEFINED> instruction: 0x0004b5bc
   4b428:			; <UNDEFINED> instruction: 0x0004b5bc
   4b42c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b430:			; <UNDEFINED> instruction: 0x0004b5bc
   4b434:			; <UNDEFINED> instruction: 0x0004b5bc
   4b438:			; <UNDEFINED> instruction: 0x0004b5bc
   4b43c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b440:			; <UNDEFINED> instruction: 0x0004b5bc
   4b444:			; <UNDEFINED> instruction: 0x0004b5bc
   4b448:	andeq	fp, r4, r4, asr sl
   4b44c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b450:			; <UNDEFINED> instruction: 0x0004b5bc
   4b454:			; <UNDEFINED> instruction: 0x0004b5bc
   4b458:	andeq	fp, r4, r4, lsl #21
   4b45c:	andeq	fp, r4, r0, lsr #21
   4b460:	andeq	fp, r4, r0, asr #21
   4b464:	ldrdeq	fp, [r4], -r0
   4b468:			; <UNDEFINED> instruction: 0x0004b5bc
   4b46c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b470:	andeq	fp, r4, ip, ror #21
   4b474:			; <UNDEFINED> instruction: 0x0004b5bc
   4b478:			; <UNDEFINED> instruction: 0x0004b5bc
   4b47c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b480:			; <UNDEFINED> instruction: 0x0004b5bc
   4b484:			; <UNDEFINED> instruction: 0x0004b5bc
   4b488:			; <UNDEFINED> instruction: 0x0004b5bc
   4b48c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b490:			; <UNDEFINED> instruction: 0x0004b5bc
   4b494:			; <UNDEFINED> instruction: 0x0004b5bc
   4b498:			; <UNDEFINED> instruction: 0x0004b5bc
   4b49c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4a0:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4a4:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4a8:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4ac:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4b0:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4b4:	strdeq	fp, [r4], -ip
   4b4b8:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4bc:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4c0:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4c4:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4c8:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4cc:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4d0:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4d4:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4d8:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4dc:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4e0:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4e4:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4e8:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4ec:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4f0:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4f4:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4f8:			; <UNDEFINED> instruction: 0x0004b5bc
   4b4fc:			; <UNDEFINED> instruction: 0x0004b5bc
   4b500:			; <UNDEFINED> instruction: 0x0004b5bc
   4b504:			; <UNDEFINED> instruction: 0x0004b5bc
   4b508:			; <UNDEFINED> instruction: 0x0004b5bc
   4b50c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b510:			; <UNDEFINED> instruction: 0x0004b5bc
   4b514:			; <UNDEFINED> instruction: 0x0004b5bc
   4b518:			; <UNDEFINED> instruction: 0x0004b5bc
   4b51c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b520:			; <UNDEFINED> instruction: 0x0004b5bc
   4b524:	andeq	fp, r4, r8, lsl fp
   4b528:			; <UNDEFINED> instruction: 0x0004b5bc
   4b52c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b530:	andeq	fp, r4, r8, lsr #22
   4b534:			; <UNDEFINED> instruction: 0x0004b5bc
   4b538:			; <UNDEFINED> instruction: 0x0004b5bc
   4b53c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b540:			; <UNDEFINED> instruction: 0x0004b5bc
   4b544:			; <UNDEFINED> instruction: 0x0004b5bc
   4b548:			; <UNDEFINED> instruction: 0x0004b5bc
   4b54c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b550:			; <UNDEFINED> instruction: 0x0004b5bc
   4b554:			; <UNDEFINED> instruction: 0x0004b5bc
   4b558:			; <UNDEFINED> instruction: 0x0004b5bc
   4b55c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b560:			; <UNDEFINED> instruction: 0x0004b5bc
   4b564:			; <UNDEFINED> instruction: 0x0004b5bc
   4b568:			; <UNDEFINED> instruction: 0x0004b5bc
   4b56c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b570:			; <UNDEFINED> instruction: 0x0004b5bc
   4b574:			; <UNDEFINED> instruction: 0x0004b5bc
   4b578:			; <UNDEFINED> instruction: 0x0004b5bc
   4b57c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b580:			; <UNDEFINED> instruction: 0x0004b5bc
   4b584:			; <UNDEFINED> instruction: 0x0004b5bc
   4b588:			; <UNDEFINED> instruction: 0x0004b5bc
   4b58c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b590:			; <UNDEFINED> instruction: 0x0004b5bc
   4b594:			; <UNDEFINED> instruction: 0x0004b5bc
   4b598:			; <UNDEFINED> instruction: 0x0004b5bc
   4b59c:			; <UNDEFINED> instruction: 0x0004b5bc
   4b5a0:			; <UNDEFINED> instruction: 0x0004b5bc
   4b5a4:	andeq	fp, r4, r0, asr #22
   4b5a8:			; <UNDEFINED> instruction: 0x0004b5b0
   4b5ac:	andeq	fp, r4, r8, lsl sl
   4b5b0:	ldr	r3, [sp, #44]	; 0x2c
   4b5b4:	cmp	r3, #32768	; 0x8000
   4b5b8:	beq	4ba40 <__assert_fail@plt+0x3944c>
   4b5bc:	str	fp, [r4, #40]	; 0x28
   4b5c0:	ldr	fp, [r6, #84]	; 0x54
   4b5c4:	mov	r2, r5
   4b5c8:	mov	r0, r4
   4b5cc:	ldr	ip, [sp, #16]
   4b5d0:	ldr	r3, [sp, #12]
   4b5d4:	ldr	r1, [sp, #20]
   4b5d8:	str	ip, [r6, #84]	; 0x54
   4b5dc:	ldr	ip, [sp, #112]	; 0x70
   4b5e0:	str	ip, [sp]
   4b5e4:	ldr	ip, [sp, #116]	; 0x74
   4b5e8:	str	ip, [sp, #4]
   4b5ec:	bl	4b04c <__assert_fail@plt+0x38a58>
   4b5f0:	ldr	r3, [sp, #116]	; 0x74
   4b5f4:	mov	sl, r0
   4b5f8:	ldr	r2, [r3]
   4b5fc:	clz	r3, r0
   4b600:	lsr	r3, r3, #5
   4b604:	cmp	r2, #0
   4b608:	moveq	r3, #0
   4b60c:	cmp	r3, #0
   4b610:	bne	4bdf8 <__assert_fail@plt+0x39804>
   4b614:	ldr	r3, [r6, #84]	; 0x54
   4b618:	orr	fp, r3, fp
   4b61c:	str	fp, [r6, #84]	; 0x54
   4b620:	mov	r2, #0
   4b624:	mov	r3, #0
   4b628:	strd	r2, [sp, #64]	; 0x40
   4b62c:	ldr	fp, [r6, #64]	; 0x40
   4b630:	cmp	fp, #31
   4b634:	beq	4b760 <__assert_fail@plt+0x3916c>
   4b638:	ldr	r0, [r6, #56]	; 0x38
   4b63c:	lsl	r3, fp, #5
   4b640:	add	fp, fp, #1
   4b644:	add	ip, r3, #4
   4b648:	add	r2, r0, r3
   4b64c:	mov	lr, #0
   4b650:	str	fp, [r6, #64]	; 0x40
   4b654:	mov	fp, #10
   4b658:	add	r3, r3, #16
   4b65c:	str	lr, [r2, #4]
   4b660:	add	r3, r0, r3
   4b664:	cmp	r7, lr
   4b668:	str	r7, [r2, #8]
   4b66c:	add	r0, r0, ip
   4b670:	mvn	ip, #0
   4b674:	str	sl, [r2, #12]
   4b678:	strb	fp, [sp, #68]	; 0x44
   4b67c:	ldrd	r8, [sp, #64]	; 0x40
   4b680:	strd	r8, [r2, #24]
   4b684:	ldrb	fp, [r3, #14]
   4b688:	bic	fp, fp, #12
   4b68c:	strb	fp, [r3, #14]
   4b690:	str	lr, [r2, #16]
   4b694:	str	lr, [r2, #20]
   4b698:	str	ip, [r2, #32]
   4b69c:	strne	r0, [r7]
   4b6a0:	cmp	sl, #0
   4b6a4:	beq	4b6d0 <__assert_fail@plt+0x390dc>
   4b6a8:	cmp	r0, #0
   4b6ac:	str	r0, [sl]
   4b6b0:	beq	4b6d8 <__assert_fail@plt+0x390e4>
   4b6b4:	mov	r7, r0
   4b6b8:	b	4b32c <__assert_fail@plt+0x38d38>
   4b6bc:	mov	r3, #2
   4b6c0:	mov	sl, #0
   4b6c4:	strb	r3, [r5, #4]
   4b6c8:	str	r0, [r4, #40]	; 0x28
   4b6cc:	b	4b620 <__assert_fail@plt+0x3902c>
   4b6d0:	cmp	r0, #0
   4b6d4:	bne	4b6b4 <__assert_fail@plt+0x390c0>
   4b6d8:	ldr	r9, [sp, #116]	; 0x74
   4b6dc:	mov	r3, #12
   4b6e0:	mov	r7, #0
   4b6e4:	str	r3, [r9]
   4b6e8:	mov	r0, r7
   4b6ec:	add	sp, sp, #76	; 0x4c
   4b6f0:	ldrd	r4, [sp]
   4b6f4:	ldrd	r6, [sp, #8]
   4b6f8:	ldrd	r8, [sp, #16]
   4b6fc:	ldrd	sl, [sp, #24]
   4b700:	add	sp, sp, #32
   4b704:	pop	{pc}		; (ldr pc, [sp], #4)
   4b708:	cmp	sl, #92	; 0x5c
   4b70c:	beq	4b744 <__assert_fail@plt+0x39150>
   4b710:	mov	r2, #1
   4b714:	strb	r2, [r5, #4]
   4b718:	bl	122b8 <__ctype_b_loc@plt>
   4b71c:	ldr	r0, [r0]
   4b720:	lsl	r2, sl, #1
   4b724:	ldrb	r1, [r5, #6]
   4b728:	ldrh	r2, [r0, r2]
   4b72c:	ubfx	r2, r2, #3, #1
   4b730:	cmp	sl, #95	; 0x5f
   4b734:	orreq	r2, r2, #1
   4b738:	bfi	r1, r2, #6, #1
   4b73c:	strb	r1, [r5, #6]
   4b740:	b	4b3d0 <__assert_fail@plt+0x38ddc>
   4b744:	ldr	r3, [r4, #48]	; 0x30
   4b748:	cmp	r3, fp
   4b74c:	bgt	4b78c <__assert_fail@plt+0x39198>
   4b750:	mov	r3, #36	; 0x24
   4b754:	strb	r3, [r5, #4]
   4b758:	str	fp, [r4, #40]	; 0x28
   4b75c:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4b760:	mov	r0, #996	; 0x3e4
   4b764:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4b768:	cmp	r0, #0
   4b76c:	beq	4b6d8 <__assert_fail@plt+0x390e4>
   4b770:	ldr	r2, [r6, #56]	; 0x38
   4b774:	mov	fp, #1
   4b778:	mov	ip, #4
   4b77c:	mov	r3, #0
   4b780:	str	r2, [r0]
   4b784:	str	r0, [r6, #56]	; 0x38
   4b788:	b	4b648 <__assert_fail@plt+0x39054>
   4b78c:	ldrb	r3, [r4, #75]	; 0x4b
   4b790:	add	r0, r0, #2
   4b794:	mov	r8, r0
   4b798:	cmp	r3, #0
   4b79c:	bne	4bd94 <__assert_fail@plt+0x397a0>
   4b7a0:	ldrb	sl, [r1, fp]
   4b7a4:	mov	r1, #1
   4b7a8:	strb	sl, [r5]
   4b7ac:	cmp	r2, r1
   4b7b0:	strb	r1, [r5, #4]
   4b7b4:	ble	4b9ec <__assert_fail@plt+0x393f8>
   4b7b8:	ldr	r0, [r4, #8]
   4b7bc:	add	r0, r0, fp, lsl #2
   4b7c0:	ldr	fp, [r0]
   4b7c4:	mov	r0, fp
   4b7c8:	sub	fp, fp, #95	; 0x5f
   4b7cc:	bl	12354 <iswalnum@plt>
   4b7d0:	ldrb	r2, [r5, #6]
   4b7d4:	clz	fp, fp
   4b7d8:	cmp	r0, #0
   4b7dc:	lsr	fp, fp, #5
   4b7e0:	movne	fp, #1
   4b7e4:	bfi	r2, fp, #6, #1
   4b7e8:	strb	r2, [r5, #6]
   4b7ec:	sub	r2, sl, #39	; 0x27
   4b7f0:	cmp	r2, #86	; 0x56
   4b7f4:	ldrls	pc, [pc, r2, lsl #2]
   4b7f8:	b	4b990 <__assert_fail@plt+0x3939c>
   4b7fc:	andeq	fp, r4, r4, asr sp
   4b800:	andeq	fp, r4, r8, ror sp
   4b804:	andeq	fp, r4, ip, asr fp
   4b808:	muleq	r4, r0, r9
   4b80c:	andeq	fp, r4, ip, ror fp
   4b810:	muleq	r4, r0, r9
   4b814:	muleq	r4, r0, r9
   4b818:	muleq	r4, r0, r9
   4b81c:	muleq	r4, r0, r9
   4b820:	muleq	r4, r0, r9
   4b824:	muleq	r4, r8, fp
   4b828:	muleq	r4, r8, fp
   4b82c:	muleq	r4, r8, fp
   4b830:	muleq	r4, r8, fp
   4b834:	muleq	r4, r8, fp
   4b838:	muleq	r4, r8, fp
   4b83c:	muleq	r4, r8, fp
   4b840:	muleq	r4, r8, fp
   4b844:	muleq	r4, r8, fp
   4b848:	muleq	r4, r0, r9
   4b84c:	muleq	r4, r0, r9
   4b850:			; <UNDEFINED> instruction: 0x0004bbbc
   4b854:	muleq	r4, r0, r9
   4b858:	andeq	fp, r4, r0, ror #23
   4b85c:	andeq	fp, r4, r4, lsl #24
   4b860:	muleq	r4, r0, r9
   4b864:	muleq	r4, r0, r9
   4b868:	andeq	fp, r4, r0, lsr #24
   4b86c:	muleq	r4, r0, r9
   4b870:	muleq	r4, r0, r9
   4b874:	muleq	r4, r0, r9
   4b878:	muleq	r4, r0, r9
   4b87c:	muleq	r4, r0, r9
   4b880:	muleq	r4, r0, r9
   4b884:	muleq	r4, r0, r9
   4b888:	muleq	r4, r0, r9
   4b88c:	muleq	r4, r0, r9
   4b890:	muleq	r4, r0, r9
   4b894:	muleq	r4, r0, r9
   4b898:	muleq	r4, r0, r9
   4b89c:	muleq	r4, r0, r9
   4b8a0:	muleq	r4, r0, r9
   4b8a4:	muleq	r4, r0, r9
   4b8a8:	muleq	r4, r0, r9
   4b8ac:	andeq	fp, r4, r4, asr #24
   4b8b0:	muleq	r4, r0, r9
   4b8b4:	muleq	r4, r0, r9
   4b8b8:	muleq	r4, r0, r9
   4b8bc:	andeq	fp, r4, r0, ror #24
   4b8c0:	muleq	r4, r0, r9
   4b8c4:	muleq	r4, r0, r9
   4b8c8:	muleq	r4, r0, r9
   4b8cc:	muleq	r4, r0, r9
   4b8d0:	muleq	r4, r0, r9
   4b8d4:	muleq	r4, r0, r9
   4b8d8:	muleq	r4, r0, r9
   4b8dc:	muleq	r4, r0, r9
   4b8e0:	andeq	fp, r4, ip, ror ip
   4b8e4:	muleq	r4, r0, r9
   4b8e8:	andeq	fp, r4, r0, lsr #25
   4b8ec:	muleq	r4, r0, r9
   4b8f0:	muleq	r4, r0, r9
   4b8f4:	muleq	r4, r0, r9
   4b8f8:	muleq	r4, r0, r9
   4b8fc:	muleq	r4, r0, r9
   4b900:	muleq	r4, r0, r9
   4b904:	muleq	r4, r0, r9
   4b908:	muleq	r4, r0, r9
   4b90c:	muleq	r4, r0, r9
   4b910:	muleq	r4, r0, r9
   4b914:	muleq	r4, r0, r9
   4b918:	muleq	r4, r0, r9
   4b91c:	muleq	r4, r0, r9
   4b920:	muleq	r4, r0, r9
   4b924:	muleq	r4, r0, r9
   4b928:	muleq	r4, r0, r9
   4b92c:	andeq	fp, r4, r4, asr #25
   4b930:	muleq	r4, r0, r9
   4b934:	muleq	r4, r0, r9
   4b938:	muleq	r4, r0, r9
   4b93c:	andeq	fp, r4, r0, ror #25
   4b940:	muleq	r4, r0, r9
   4b944:	muleq	r4, r0, r9
   4b948:	muleq	r4, r0, r9
   4b94c:	strdeq	fp, [r4], -ip
   4b950:	andeq	fp, r4, r8, lsl sp
   4b954:	andeq	fp, r4, r8, lsr sp
   4b958:	ldr	r3, [sp, #12]
   4b95c:	mov	r1, r4
   4b960:	add	r0, sp, #64	; 0x40
   4b964:	str	fp, [r4, #40]	; 0x28
   4b968:	orr	r2, r3, #8388608	; 0x800000
   4b96c:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   4b970:	ldrb	r3, [sp, #68]	; 0x44
   4b974:	ldr	fp, [r4, #40]	; 0x28
   4b978:	sub	r3, r3, #9
   4b97c:	cmp	r3, #1
   4b980:	sub	r3, fp, #1
   4b984:	mov	r8, fp
   4b988:	str	r3, [r4, #40]	; 0x28
   4b98c:	bls	4ba6c <__assert_fail@plt+0x39478>
   4b990:	ldrb	r3, [r5, #4]
   4b994:	str	r8, [r4, #40]	; 0x28
   4b998:	and	r2, r3, #247	; 0xf7
   4b99c:	cmp	r2, #2
   4b9a0:	moveq	sl, #0
   4b9a4:	beq	4b620 <__assert_fail@plt+0x3902c>
   4b9a8:	ldr	r2, [sp, #112]	; 0x70
   4b9ac:	clz	r1, r2
   4b9b0:	lsr	r1, r1, #5
   4b9b4:	cmp	r3, #9
   4b9b8:	orrne	r1, r1, #1
   4b9bc:	cmp	r1, #0
   4b9c0:	moveq	sl, r1
   4b9c4:	beq	4b620 <__assert_fail@plt+0x3902c>
   4b9c8:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4b9cc:	ldr	r3, [r5, #4]
   4b9d0:	ldr	r2, [sp, #40]	; 0x28
   4b9d4:	and	r3, r3, r2
   4b9d8:	orr	r3, r3, #2097152	; 0x200000
   4b9dc:	orr	r3, r3, #1
   4b9e0:	str	r3, [r5, #4]
   4b9e4:	str	fp, [r4, #40]	; 0x28
   4b9e8:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4b9ec:	bl	122b8 <__ctype_b_loc@plt>
   4b9f0:	ldr	r0, [r0]
   4b9f4:	lsl	r2, sl, #1
   4b9f8:	ldrb	r1, [r5, #6]
   4b9fc:	ldrh	r2, [r0, r2]
   4ba00:	ubfx	r2, r2, #3, #1
   4ba04:	cmp	sl, #95	; 0x5f
   4ba08:	orreq	r2, r2, #1
   4ba0c:	bfi	r1, r2, #6, #1
   4ba10:	strb	r1, [r5, #6]
   4ba14:	b	4b7ec <__assert_fail@plt+0x391f8>
   4ba18:	ldr	r3, [sp, #36]	; 0x24
   4ba1c:	cmp	r3, #4608	; 0x1200
   4ba20:	moveq	r3, #24
   4ba24:	strbeq	r3, [r5, #4]
   4ba28:	streq	fp, [r4, #40]	; 0x28
   4ba2c:	bne	4b5bc <__assert_fail@plt+0x38fc8>
   4ba30:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4ba34:	ldr	r3, [sp, #56]	; 0x38
   4ba38:	cmp	r3, #0
   4ba3c:	beq	4b5bc <__assert_fail@plt+0x38fc8>
   4ba40:	mov	r3, #10
   4ba44:	mov	sl, #0
   4ba48:	strb	r3, [r5, #4]
   4ba4c:	str	fp, [r4, #40]	; 0x28
   4ba50:	b	4b620 <__assert_fail@plt+0x3902c>
   4ba54:	ldr	r3, [sp, #52]	; 0x34
   4ba58:	cmp	r3, #0
   4ba5c:	bne	4ba6c <__assert_fail@plt+0x39478>
   4ba60:	ldr	r3, [r4, #48]	; 0x30
   4ba64:	cmp	r3, fp
   4ba68:	bne	4b958 <__assert_fail@plt+0x39364>
   4ba6c:	mov	r3, #12
   4ba70:	mov	r2, #32
   4ba74:	str	r2, [r5]
   4ba78:	strb	r3, [r5, #4]
   4ba7c:	str	fp, [r4, #40]	; 0x28
   4ba80:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4ba84:	ldr	r3, [sp, #28]
   4ba88:	cmp	r3, #0
   4ba8c:	beq	4b5bc <__assert_fail@plt+0x38fc8>
   4ba90:	mov	r3, #8
   4ba94:	strb	r3, [r5, #4]
   4ba98:	str	fp, [r4, #40]	; 0x28
   4ba9c:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4baa0:	ldr	r3, [sp, #28]
   4baa4:	cmp	r3, #0
   4baa8:	beq	4b5bc <__assert_fail@plt+0x38fc8>
   4baac:	mov	r3, #9
   4bab0:	strb	r3, [r5, #4]
   4bab4:	mov	r3, #9
   4bab8:	str	fp, [r4, #40]	; 0x28
   4babc:	b	4b9a8 <__assert_fail@plt+0x393b4>
   4bac0:	mov	r3, #11
   4bac4:	strb	r3, [r5, #4]
   4bac8:	str	fp, [r4, #40]	; 0x28
   4bacc:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bad0:	ldr	r3, [sp, #32]
   4bad4:	cmp	r3, #0
   4bad8:	bne	4b5bc <__assert_fail@plt+0x38fc8>
   4badc:	mov	r3, #18
   4bae0:	strb	r3, [r5, #4]
   4bae4:	str	fp, [r4, #40]	; 0x28
   4bae8:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4baec:	mov	r3, #5
   4baf0:	strb	r3, [r5, #4]
   4baf4:	str	fp, [r4, #40]	; 0x28
   4baf8:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bafc:	ldr	r3, [sp, #32]
   4bb00:	cmp	r3, #0
   4bb04:	bne	4b5bc <__assert_fail@plt+0x38fc8>
   4bb08:	mov	r3, #19
   4bb0c:	strb	r3, [r5, #4]
   4bb10:	str	fp, [r4, #40]	; 0x28
   4bb14:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bb18:	mov	r3, #20
   4bb1c:	strb	r3, [r5, #4]
   4bb20:	str	fp, [r4, #40]	; 0x28
   4bb24:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bb28:	mov	r3, #12
   4bb2c:	mov	r2, #16
   4bb30:	str	r2, [r5]
   4bb34:	strb	r3, [r5, #4]
   4bb38:	str	fp, [r4, #40]	; 0x28
   4bb3c:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bb40:	ldr	r3, [sp, #36]	; 0x24
   4bb44:	cmp	r3, #4608	; 0x1200
   4bb48:	bne	4b5bc <__assert_fail@plt+0x38fc8>
   4bb4c:	mov	r3, #23
   4bb50:	strb	r3, [r5, #4]
   4bb54:	str	fp, [r4, #40]	; 0x28
   4bb58:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bb5c:	ldr	r3, [sp, #28]
   4bb60:	cmp	r3, #0
   4bb64:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bb68:	mov	r3, #9
   4bb6c:	strb	r3, [r5, #4]
   4bb70:	mov	r3, #9
   4bb74:	str	r8, [r4, #40]	; 0x28
   4bb78:	b	4b9a8 <__assert_fail@plt+0x393b4>
   4bb7c:	ldr	r3, [sp, #32]
   4bb80:	cmp	r3, #2
   4bb84:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bb88:	mov	r3, #18
   4bb8c:	strb	r3, [r5, #4]
   4bb90:	str	r8, [r4, #40]	; 0x28
   4bb94:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bb98:	ldr	r3, [sp, #60]	; 0x3c
   4bb9c:	cmp	r3, #0
   4bba0:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bba4:	sub	r3, sl, #49	; 0x31
   4bba8:	mov	r2, #4
   4bbac:	str	r3, [r5]
   4bbb0:	strb	r2, [r5, #4]
   4bbb4:	str	r8, [r4, #40]	; 0x28
   4bbb8:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bbbc:	ldr	r3, [sp, #48]	; 0x30
   4bbc0:	cmp	r3, #0
   4bbc4:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bbc8:	mov	r3, #12
   4bbcc:	mov	r2, #6
   4bbd0:	str	r2, [r5]
   4bbd4:	strb	r3, [r5, #4]
   4bbd8:	str	r8, [r4, #40]	; 0x28
   4bbdc:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bbe0:	ldr	r3, [sp, #48]	; 0x30
   4bbe4:	cmp	r3, #0
   4bbe8:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bbec:	mov	r3, #12
   4bbf0:	mov	r2, #9
   4bbf4:	str	r2, [r5]
   4bbf8:	strb	r3, [r5, #4]
   4bbfc:	str	r8, [r4, #40]	; 0x28
   4bc00:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bc04:	ldr	r3, [sp, #32]
   4bc08:	cmp	r3, #2
   4bc0c:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bc10:	mov	r3, #19
   4bc14:	strb	r3, [r5, #4]
   4bc18:	str	r8, [r4, #40]	; 0x28
   4bc1c:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bc20:	ldr	r3, [sp, #48]	; 0x30
   4bc24:	cmp	r3, #0
   4bc28:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bc2c:	mov	r3, #12
   4bc30:	mov	r2, #512	; 0x200
   4bc34:	str	r2, [r5]
   4bc38:	strb	r3, [r5, #4]
   4bc3c:	str	r8, [r4, #40]	; 0x28
   4bc40:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bc44:	ldr	r3, [sp, #48]	; 0x30
   4bc48:	cmp	r3, #0
   4bc4c:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bc50:	mov	r3, #35	; 0x23
   4bc54:	strb	r3, [r5, #4]
   4bc58:	str	r8, [r4, #40]	; 0x28
   4bc5c:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bc60:	ldr	r3, [sp, #48]	; 0x30
   4bc64:	cmp	r3, #0
   4bc68:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bc6c:	mov	r3, #33	; 0x21
   4bc70:	strb	r3, [r5, #4]
   4bc74:	str	r8, [r4, #40]	; 0x28
   4bc78:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bc7c:	ldr	r3, [sp, #48]	; 0x30
   4bc80:	cmp	r3, #0
   4bc84:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bc88:	mov	r3, #12
   4bc8c:	mov	r2, #64	; 0x40
   4bc90:	str	r2, [r5]
   4bc94:	strb	r3, [r5, #4]
   4bc98:	str	r8, [r4, #40]	; 0x28
   4bc9c:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bca0:	ldr	r3, [sp, #48]	; 0x30
   4bca4:	cmp	r3, #0
   4bca8:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bcac:	mov	r3, #12
   4bcb0:	mov	r2, #256	; 0x100
   4bcb4:	str	r2, [r5]
   4bcb8:	strb	r3, [r5, #4]
   4bcbc:	str	r8, [r4, #40]	; 0x28
   4bcc0:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bcc4:	ldr	r3, [sp, #48]	; 0x30
   4bcc8:	cmp	r3, #0
   4bccc:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bcd0:	mov	r3, #34	; 0x22
   4bcd4:	strb	r3, [r5, #4]
   4bcd8:	str	r8, [r4, #40]	; 0x28
   4bcdc:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bce0:	ldr	r3, [sp, #48]	; 0x30
   4bce4:	cmp	r3, #0
   4bce8:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bcec:	mov	r3, #32
   4bcf0:	strb	r3, [r5, #4]
   4bcf4:	str	r8, [r4, #40]	; 0x28
   4bcf8:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bcfc:	ldr	r3, [sp, #36]	; 0x24
   4bd00:	cmp	r3, #512	; 0x200
   4bd04:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bd08:	mov	r3, #23
   4bd0c:	strb	r3, [r5, #4]
   4bd10:	str	r8, [r4, #40]	; 0x28
   4bd14:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bd18:	ldr	r3, [sp, #44]	; 0x2c
   4bd1c:	cmp	r3, #0
   4bd20:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bd24:	mov	sl, r3
   4bd28:	mov	r3, #10
   4bd2c:	strb	r3, [r5, #4]
   4bd30:	str	r8, [r4, #40]	; 0x28
   4bd34:	b	4b620 <__assert_fail@plt+0x3902c>
   4bd38:	ldr	r3, [sp, #36]	; 0x24
   4bd3c:	cmp	r3, #512	; 0x200
   4bd40:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bd44:	mov	r3, #24
   4bd48:	strb	r3, [r5, #4]
   4bd4c:	str	r8, [r4, #40]	; 0x28
   4bd50:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bd54:	ldr	r3, [sp, #48]	; 0x30
   4bd58:	cmp	r3, #0
   4bd5c:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bd60:	mov	r3, #12
   4bd64:	mov	r2, #128	; 0x80
   4bd68:	str	r2, [r5]
   4bd6c:	strb	r3, [r5, #4]
   4bd70:	str	r8, [r4, #40]	; 0x28
   4bd74:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bd78:	ldr	r3, [sp, #28]
   4bd7c:	cmp	r3, #0
   4bd80:	bne	4b990 <__assert_fail@plt+0x3939c>
   4bd84:	mov	r3, #8
   4bd88:	strb	r3, [r5, #4]
   4bd8c:	str	r8, [r4, #40]	; 0x28
   4bd90:	b	4b5c0 <__assert_fail@plt+0x38fcc>
   4bd94:	cmp	r2, #1
   4bd98:	ble	4bdc8 <__assert_fail@plt+0x397d4>
   4bd9c:	ldr	r0, [r4, #8]
   4bda0:	ldr	r3, [r0, fp, lsl #2]
   4bda4:	add	r0, r0, fp, lsl #2
   4bda8:	cmn	r3, #1
   4bdac:	beq	4be24 <__assert_fail@plt+0x39830>
   4bdb0:	ldr	r3, [r4, #28]
   4bdb4:	cmp	r3, r8
   4bdb8:	beq	4bdc8 <__assert_fail@plt+0x397d4>
   4bdbc:	ldr	r3, [r0, #4]
   4bdc0:	cmn	r3, #1
   4bdc4:	beq	4be24 <__assert_fail@plt+0x39830>
   4bdc8:	ldrb	ip, [r4, #76]	; 0x4c
   4bdcc:	ldr	r0, [r4]
   4bdd0:	ldr	r3, [r4, #24]
   4bdd4:	cmp	ip, #0
   4bdd8:	beq	4be18 <__assert_fail@plt+0x39824>
   4bddc:	ldr	ip, [r4, #12]
   4bde0:	add	r3, r0, r3
   4bde4:	ldr	r0, [ip, fp, lsl #2]
   4bde8:	ldrb	sl, [r3, r0]
   4bdec:	tst	sl, #128	; 0x80
   4bdf0:	beq	4b7a4 <__assert_fail@plt+0x391b0>
   4bdf4:	b	4b7a0 <__assert_fail@plt+0x391ac>
   4bdf8:	cmp	r7, #0
   4bdfc:	beq	4be10 <__assert_fail@plt+0x3981c>
   4be00:	mov	r0, r7
   4be04:	mov	r7, #0
   4be08:	bl	4082c <__assert_fail@plt+0x2e238>
   4be0c:	b	4b6e8 <__assert_fail@plt+0x390f4>
   4be10:	mov	r7, #0
   4be14:	b	4b6e8 <__assert_fail@plt+0x390f4>
   4be18:	add	r0, r0, fp
   4be1c:	ldrb	sl, [r0, r3]
   4be20:	b	4b7a4 <__assert_fail@plt+0x391b0>
   4be24:	ldrb	sl, [r1, fp]
   4be28:	mov	r2, #1
   4be2c:	strb	sl, [r5]
   4be30:	strb	r2, [r5, #4]
   4be34:	b	4b7c0 <__assert_fail@plt+0x391cc>
   4be38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4be3c:	mov	r5, r2
   4be40:	strd	r6, [sp, #8]
   4be44:	mov	r6, r0
   4be48:	mov	r7, r3
   4be4c:	ldrb	r3, [r0, #28]
   4be50:	mov	r0, #0
   4be54:	strd	r8, [sp, #16]
   4be58:	mov	r8, r1
   4be5c:	strd	sl, [sp, #24]
   4be60:	ldr	r2, [r6, #4]
   4be64:	str	lr, [sp, #32]
   4be68:	sub	sp, sp, #148	; 0x94
   4be6c:	bic	r3, r3, #111	; 0x6f
   4be70:	str	r0, [r6, #8]
   4be74:	str	r7, [r6, #12]
   4be78:	str	r0, [r6, #24]
   4be7c:	cmp	r2, #159	; 0x9f
   4be80:	strb	r3, [r6, #28]
   4be84:	str	r0, [sp, #36]	; 0x24
   4be88:	ldr	r4, [r6]
   4be8c:	bls	4d18c <__assert_fail@plt+0x3ab98>
   4be90:	mov	r3, #160	; 0xa0
   4be94:	mov	r1, #0
   4be98:	mov	r2, r3
   4be9c:	mov	r0, r4
   4bea0:	str	r3, [r6, #8]
   4bea4:	bl	12378 <memset@plt>
   4bea8:	movw	r3, #43689	; 0xaaa9
   4beac:	movt	r3, #2730	; 0xaaa
   4beb0:	mov	r2, #31
   4beb4:	cmp	r5, r3
   4beb8:	str	r2, [r4, #64]	; 0x40
   4bebc:	bhi	4c694 <__assert_fail@plt+0x3a0a0>
   4bec0:	add	r9, r5, #1
   4bec4:	lsl	r0, r9, #3
   4bec8:	str	r9, [r4, #4]
   4becc:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4bed0:	cmp	r5, #0
   4bed4:	str	r0, [r4]
   4bed8:	beq	4d1b0 <__assert_fail@plt+0x3abbc>
   4bedc:	mov	r1, #1
   4bee0:	lsl	r1, r1, #1
   4bee4:	cmp	r5, r1
   4bee8:	bcs	4bee0 <__assert_fail@plt+0x398ec>
   4beec:	sub	sl, r1, #1
   4bef0:	mov	r0, #12
   4bef4:	bl	384e0 <__assert_fail@plt+0x25eec>
   4bef8:	str	r0, [r4, #32]
   4befc:	str	sl, [r4, #68]	; 0x44
   4bf00:	bl	12198 <__ctype_get_mb_cur_max@plt>
   4bf04:	str	r0, [r4, #92]	; 0x5c
   4bf08:	mov	r0, #14
   4bf0c:	bl	12480 <nl_langinfo@plt>
   4bf10:	ldrb	r3, [r0]
   4bf14:	and	r3, r3, #223	; 0xdf
   4bf18:	cmp	r3, #85	; 0x55
   4bf1c:	bne	4bf74 <__assert_fail@plt+0x39980>
   4bf20:	ldrb	r3, [r0, #1]
   4bf24:	and	r3, r3, #223	; 0xdf
   4bf28:	cmp	r3, #84	; 0x54
   4bf2c:	bne	4bf74 <__assert_fail@plt+0x39980>
   4bf30:	ldrb	r3, [r0, #2]
   4bf34:	and	r3, r3, #223	; 0xdf
   4bf38:	cmp	r3, #70	; 0x46
   4bf3c:	bne	4bf74 <__assert_fail@plt+0x39980>
   4bf40:	ldrb	r3, [r0, #3]
   4bf44:	movw	r1, #26192	; 0x6650
   4bf48:	movt	r1, #5
   4bf4c:	cmp	r3, #45	; 0x2d
   4bf50:	moveq	r3, #4
   4bf54:	movne	r3, #3
   4bf58:	add	r0, r0, r3
   4bf5c:	bl	11f40 <strcmp@plt>
   4bf60:	cmp	r0, #0
   4bf64:	bne	4bf74 <__assert_fail@plt+0x39980>
   4bf68:	ldrb	r3, [r4, #88]	; 0x58
   4bf6c:	orr	r3, r3, #4
   4bf70:	strb	r3, [r4, #88]	; 0x58
   4bf74:	ldrb	r3, [r4, #88]	; 0x58
   4bf78:	ldr	r2, [r4, #92]	; 0x5c
   4bf7c:	bfc	r3, #3, #1
   4bf80:	cmp	r2, #1
   4bf84:	strb	r3, [r4, #88]	; 0x58
   4bf88:	ble	4bfa4 <__assert_fail@plt+0x399b0>
   4bf8c:	uxtb	sl, r3
   4bf90:	ands	sl, sl, #4
   4bf94:	beq	4c6f0 <__assert_fail@plt+0x3a0fc>
   4bf98:	movw	r3, #25616	; 0x6410
   4bf9c:	movt	r3, #5
   4bfa0:	str	r3, [r4, #60]	; 0x3c
   4bfa4:	ldr	r3, [r4]
   4bfa8:	cmp	r3, #0
   4bfac:	beq	4c694 <__assert_fail@plt+0x3a0a0>
   4bfb0:	ldr	r3, [r4, #32]
   4bfb4:	cmp	r3, #0
   4bfb8:	beq	4c694 <__assert_fail@plt+0x3a0a0>
   4bfbc:	mov	r1, #0
   4bfc0:	movw	r2, #8180	; 0x1ff4
   4bfc4:	movt	r2, #1
   4bfc8:	mov	r3, #1
   4bfcc:	cmp	r2, r1
   4bfd0:	str	r1, [sp, #36]	; 0x24
   4bfd4:	mov	r1, #1
   4bfd8:	moveq	r3, r2
   4bfdc:	movw	r2, #9116	; 0x239c
   4bfe0:	movt	r2, #1
   4bfe4:	cmp	r2, #0
   4bfe8:	moveq	r1, r2
   4bfec:	orr	r3, r3, r1
   4bff0:	ands	r3, r3, #255	; 0xff
   4bff4:	str	r3, [sp, #16]
   4bff8:	beq	4c01c <__assert_fail@plt+0x39a28>
   4bffc:	mov	r1, #0
   4c000:	add	r0, r4, #136	; 0x88
   4c004:	bl	1203c <pthread_mutex_init@plt>
   4c008:	cmp	r0, #0
   4c00c:	bne	4c694 <__assert_fail@plt+0x3a0a0>
   4c010:	ldr	r3, [sp, #36]	; 0x24
   4c014:	cmp	r3, #0
   4c018:	bne	4c69c <__assert_fail@plt+0x3a0a8>
   4c01c:	and	r3, r7, #4194304	; 0x400000
   4c020:	mov	r2, #76	; 0x4c
   4c024:	ldr	sl, [r6, #20]
   4c028:	mov	r1, #0
   4c02c:	add	r0, sp, #64	; 0x40
   4c030:	mov	fp, r3
   4c034:	str	r3, [sp, #12]
   4c038:	bl	12378 <memset@plt>
   4c03c:	ldrb	r3, [r4, #88]	; 0x58
   4c040:	adds	ip, fp, #0
   4c044:	orr	fp, sl, fp
   4c048:	movne	ip, #1
   4c04c:	str	r8, [sp, #60]	; 0x3c
   4c050:	ldr	r1, [r4, #92]	; 0x5c
   4c054:	adds	r2, fp, #0
   4c058:	movne	r2, #1
   4c05c:	cmp	r5, #0
   4c060:	str	r5, [sp, #104]	; 0x68
   4c064:	str	r5, [sp, #108]	; 0x6c
   4c068:	ubfx	r0, r3, #2, #1
   4c06c:	str	r5, [sp, #112]	; 0x70
   4c070:	ubfx	r3, r3, #3, #1
   4c074:	str	r5, [sp, #116]	; 0x74
   4c078:	str	sl, [sp, #124]	; 0x7c
   4c07c:	strb	ip, [sp, #132]	; 0x84
   4c080:	strb	r0, [sp, #133]	; 0x85
   4c084:	strb	r3, [sp, #134]	; 0x86
   4c088:	strb	r2, [sp, #135]	; 0x87
   4c08c:	str	r1, [sp, #140]	; 0x8c
   4c090:	bne	4c6d0 <__assert_fail@plt+0x3a0dc>
   4c094:	cmp	r2, #0
   4c098:	ldr	r3, [sp, #12]
   4c09c:	ldrne	r8, [sp, #64]	; 0x40
   4c0a0:	cmp	r3, #0
   4c0a4:	str	r8, [sp, #64]	; 0x40
   4c0a8:	beq	4c174 <__assert_fail@plt+0x39b80>
   4c0ac:	cmp	r1, #1
   4c0b0:	ble	4d100 <__assert_fail@plt+0x3ab0c>
   4c0b4:	add	r0, sp, #60	; 0x3c
   4c0b8:	bl	3c960 <__assert_fail@plt+0x2a36c>
   4c0bc:	cmp	r0, #0
   4c0c0:	bne	4c0fc <__assert_fail@plt+0x39b08>
   4c0c4:	ldr	r3, [sp, #92]	; 0x5c
   4c0c8:	cmp	r5, r3
   4c0cc:	ble	4d22c <__assert_fail@plt+0x3ac38>
   4c0d0:	ldr	r3, [sp, #88]	; 0x58
   4c0d4:	ldr	r2, [r4, #92]	; 0x5c
   4c0d8:	ldr	r1, [sp, #96]	; 0x60
   4c0dc:	add	r3, r3, r2
   4c0e0:	cmp	r1, r3
   4c0e4:	bgt	4d22c <__assert_fail@plt+0x3ac38>
   4c0e8:	lsl	r1, r1, #1
   4c0ec:	add	r0, sp, #60	; 0x3c
   4c0f0:	bl	3c57c <__assert_fail@plt+0x29f88>
   4c0f4:	cmp	r0, #0
   4c0f8:	beq	4c0b4 <__assert_fail@plt+0x39ac0>
   4c0fc:	ldr	r5, [r6]
   4c100:	str	r0, [sp, #36]	; 0x24
   4c104:	ldr	r0, [r5, #56]	; 0x38
   4c108:	cmp	r0, #0
   4c10c:	beq	4c120 <__assert_fail@plt+0x39b2c>
   4c110:	ldr	r7, [r0]
   4c114:	bl	38b10 <__assert_fail@plt+0x2651c>
   4c118:	subs	r0, r7, #0
   4c11c:	bne	4c110 <__assert_fail@plt+0x39b1c>
   4c120:	mov	r3, #31
   4c124:	mov	r7, #0
   4c128:	ldr	r0, [r5, #16]
   4c12c:	str	r7, [r5, #52]	; 0x34
   4c130:	str	r7, [r5, #56]	; 0x38
   4c134:	str	r3, [r5, #64]	; 0x40
   4c138:	bl	38b10 <__assert_fail@plt+0x2651c>
   4c13c:	str	r7, [r5, #16]
   4c140:	ldr	r0, [sp, #68]	; 0x44
   4c144:	bl	38b10 <__assert_fail@plt+0x2651c>
   4c148:	ldr	r0, [sp, #72]	; 0x48
   4c14c:	bl	38b10 <__assert_fail@plt+0x2651c>
   4c150:	ldrb	r3, [sp, #135]	; 0x87
   4c154:	cmp	r3, r7
   4c158:	bne	4d1c8 <__assert_fail@plt+0x3abd4>
   4c15c:	ldr	r3, [sp, #16]
   4c160:	cmp	r3, #0
   4c164:	beq	4c69c <__assert_fail@plt+0x3a0a8>
   4c168:	add	r0, r4, #136	; 0x88
   4c16c:	bl	11f70 <pthread_mutex_destroy@plt>
   4c170:	b	4c69c <__assert_fail@plt+0x3a0a8>
   4c174:	cmp	r1, #1
   4c178:	bgt	4d004 <__assert_fail@plt+0x3aa10>
   4c17c:	cmp	fp, #0
   4c180:	ldr	r1, [sp, #96]	; 0x60
   4c184:	beq	4c7a0 <__assert_fail@plt+0x3a1ac>
   4c188:	ldr	r3, [sp, #88]	; 0x58
   4c18c:	ldr	r2, [sp, #108]	; 0x6c
   4c190:	cmp	r1, r2
   4c194:	movge	r1, r2
   4c198:	cmp	r1, r3
   4c19c:	ble	4d370 <__assert_fail@plt+0x3ad7c>
   4c1a0:	ldr	r0, [sp, #60]	; 0x3c
   4c1a4:	add	r2, r3, #1
   4c1a8:	cmp	r1, r2
   4c1ac:	ldr	lr, [sp, #84]	; 0x54
   4c1b0:	ldr	ip, [sp, #124]	; 0x7c
   4c1b4:	add	r0, r0, r3
   4c1b8:	ldrb	r0, [r0, lr]
   4c1bc:	ldrb	r0, [ip, r0]
   4c1c0:	strb	r0, [r8, r3]
   4c1c4:	ble	4c1f4 <__assert_fail@plt+0x39c00>
   4c1c8:	ldr	r3, [sp, #60]	; 0x3c
   4c1cc:	ldr	r0, [sp, #84]	; 0x54
   4c1d0:	ldr	ip, [sp, #124]	; 0x7c
   4c1d4:	add	r3, r3, r2
   4c1d8:	ldrb	r0, [r3, r0]
   4c1dc:	ldr	r3, [sp, #64]	; 0x40
   4c1e0:	ldrb	r0, [ip, r0]
   4c1e4:	strb	r0, [r3, r2]
   4c1e8:	add	r2, r2, #1
   4c1ec:	cmp	r1, r2
   4c1f0:	bne	4c1c8 <__assert_fail@plt+0x39bd4>
   4c1f4:	mov	r3, #0
   4c1f8:	str	r3, [sp, #36]	; 0x24
   4c1fc:	str	r1, [sp, #88]	; 0x58
   4c200:	str	r1, [sp, #92]	; 0x5c
   4c204:	ldr	r5, [r6]
   4c208:	mov	r8, #0
   4c20c:	orr	r2, r7, #8388608	; 0x800000
   4c210:	add	r1, sp, #60	; 0x3c
   4c214:	add	r0, sp, #40	; 0x28
   4c218:	str	r8, [r6, #24]
   4c21c:	str	r7, [r5, #128]	; 0x80
   4c220:	bl	3f500 <__assert_fail@plt+0x2cf0c>
   4c224:	ldr	ip, [sp, #100]	; 0x64
   4c228:	add	r1, sp, #36	; 0x24
   4c22c:	mov	r3, r7
   4c230:	add	r2, sp, #40	; 0x28
   4c234:	str	r8, [sp]
   4c238:	str	r1, [sp, #4]
   4c23c:	mov	r1, r6
   4c240:	add	ip, ip, r0
   4c244:	add	r0, sp, #60	; 0x3c
   4c248:	str	ip, [sp, #100]	; 0x64
   4c24c:	bl	4b268 <__assert_fail@plt+0x38c74>
   4c250:	ldr	sl, [sp, #36]	; 0x24
   4c254:	clz	r3, r0
   4c258:	mov	r9, r0
   4c25c:	lsr	r3, r3, #5
   4c260:	cmp	sl, r8
   4c264:	movne	sl, r3
   4c268:	moveq	sl, r8
   4c26c:	cmp	sl, r8
   4c270:	bne	4d388 <__assert_fail@plt+0x3ad94>
   4c274:	mov	r2, #0
   4c278:	mov	r3, #0
   4c27c:	strd	r2, [sp, #48]	; 0x30
   4c280:	ldr	r2, [r5, #64]	; 0x40
   4c284:	cmp	r2, #31
   4c288:	beq	4d1f8 <__assert_fail@plt+0x3ac04>
   4c28c:	ldr	r7, [r5, #56]	; 0x38
   4c290:	lsl	r3, r2, #5
   4c294:	add	r2, r2, #1
   4c298:	add	r0, r3, #4
   4c29c:	add	ip, r7, r3
   4c2a0:	mov	lr, #0
   4c2a4:	str	r2, [r5, #64]	; 0x40
   4c2a8:	mov	r2, #2
   4c2ac:	add	r3, r3, #16
   4c2b0:	str	lr, [ip, #4]
   4c2b4:	add	r1, r7, r3
   4c2b8:	adds	r7, r7, r0
   4c2bc:	str	lr, [ip, #8]
   4c2c0:	mvn	r0, #0
   4c2c4:	moveq	r8, #1
   4c2c8:	str	lr, [ip, #12]
   4c2cc:	movne	r8, lr
   4c2d0:	cmp	r9, lr
   4c2d4:	strb	r2, [sp, #52]	; 0x34
   4c2d8:	ldrd	r2, [sp, #48]	; 0x30
   4c2dc:	strd	r2, [ip, #24]
   4c2e0:	ldrb	r3, [r1, #14]
   4c2e4:	bic	r3, r3, #12
   4c2e8:	strb	r3, [r1, #14]
   4c2ec:	str	lr, [ip, #16]
   4c2f0:	str	lr, [ip, #20]
   4c2f4:	str	r0, [ip, #32]
   4c2f8:	beq	4c38c <__assert_fail@plt+0x39d98>
   4c2fc:	mov	r3, #0
   4c300:	mov	r2, #0
   4c304:	strd	r2, [sp, #48]	; 0x30
   4c308:	ldr	r3, [r5, #64]	; 0x40
   4c30c:	cmp	r3, #31
   4c310:	beq	4d324 <__assert_fail@plt+0x3ad30>
   4c314:	ldr	r0, [r5, #56]	; 0x38
   4c318:	lsl	r1, r3, #5
   4c31c:	add	r3, r3, #1
   4c320:	add	r2, r1, #4
   4c324:	add	ip, r0, r1
   4c328:	mov	lr, #0
   4c32c:	str	r3, [r5, #64]	; 0x40
   4c330:	mov	r3, #16
   4c334:	mvn	r5, #0
   4c338:	add	r1, r1, r3
   4c33c:	str	lr, [ip, #4]
   4c340:	str	r9, [ip, #8]
   4c344:	add	r1, r0, r1
   4c348:	add	r0, r0, r2
   4c34c:	str	r7, [ip, #12]
   4c350:	cmp	r0, lr
   4c354:	orreq	r8, r8, #1
   4c358:	cmp	r7, lr
   4c35c:	strb	r3, [sp, #52]	; 0x34
   4c360:	ldrd	r2, [sp, #48]	; 0x30
   4c364:	strd	r2, [ip, #24]
   4c368:	ldrb	r3, [r1, #14]
   4c36c:	bic	r3, r3, #12
   4c370:	strb	r3, [r1, #14]
   4c374:	str	lr, [ip, #16]
   4c378:	str	lr, [ip, #20]
   4c37c:	str	r5, [ip, #32]
   4c380:	str	r0, [r9]
   4c384:	strne	r0, [r7]
   4c388:	mov	r7, r0
   4c38c:	cmp	r8, #0
   4c390:	ldr	r5, [r6]
   4c394:	bne	4d1e4 <__assert_fail@plt+0x3abf0>
   4c398:	ldr	r0, [r5, #4]
   4c39c:	str	r7, [r4, #52]	; 0x34
   4c3a0:	lsl	r0, r0, #2
   4c3a4:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4c3a8:	ldr	r3, [r5, #4]
   4c3ac:	str	r0, [r5, #12]
   4c3b0:	lsl	r0, r3, #2
   4c3b4:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4c3b8:	ldr	r3, [r5, #4]
   4c3bc:	str	r0, [r5, #16]
   4c3c0:	add	r3, r3, r3, lsl #1
   4c3c4:	lsl	r0, r3, #2
   4c3c8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4c3cc:	ldr	r3, [r5, #4]
   4c3d0:	str	r0, [r5, #20]
   4c3d4:	add	r3, r3, r3, lsl #1
   4c3d8:	lsl	r0, r3, #2
   4c3dc:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4c3e0:	ldr	r3, [r5, #12]
   4c3e4:	str	r0, [r5, #24]
   4c3e8:	cmp	r3, #0
   4c3ec:	beq	4c7fc <__assert_fail@plt+0x3a208>
   4c3f0:	ldr	r3, [r5, #16]
   4c3f4:	cmp	r3, #0
   4c3f8:	beq	4c7fc <__assert_fail@plt+0x3a208>
   4c3fc:	ldr	r3, [r5, #20]
   4c400:	cmp	r3, #0
   4c404:	beq	4c7fc <__assert_fail@plt+0x3a208>
   4c408:	cmp	r0, #0
   4c40c:	beq	4c7fc <__assert_fail@plt+0x3a208>
   4c410:	ldr	r0, [r6, #24]
   4c414:	lsl	r0, r0, #2
   4c418:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4c41c:	cmp	r0, #0
   4c420:	str	r0, [r5, #132]	; 0x84
   4c424:	beq	4d084 <__assert_fail@plt+0x3aa90>
   4c428:	ldr	ip, [r6, #24]
   4c42c:	cmp	ip, #0
   4c430:	beq	4c4e0 <__assert_fail@plt+0x39eec>
   4c434:	sub	r3, ip, #1
   4c438:	ubfx	r2, r0, #2, #1
   4c43c:	cmp	r3, #4
   4c440:	bls	4d358 <__assert_fail@plt+0x3ad64>
   4c444:	cmp	r2, #0
   4c448:	beq	4d1bc <__assert_fail@plt+0x3abc8>
   4c44c:	mov	r7, r2
   4c450:	mov	r9, #1
   4c454:	str	r8, [r0]
   4c458:	sub	r8, ip, r2
   4c45c:	add	r2, r0, r2, lsl #2
   4c460:	mov	lr, r9
   4c464:	lsr	r3, r8, #1
   4c468:	add	r1, r9, #1
   4c46c:	add	r3, r2, r3, lsl #3
   4c470:	add	r2, r2, #8
   4c474:	str	lr, [r2, #-8]
   4c478:	add	lr, lr, #2
   4c47c:	str	r1, [r2, #-4]
   4c480:	cmp	r3, r2
   4c484:	add	r1, r1, #2
   4c488:	bne	4c470 <__assert_fail@plt+0x39e7c>
   4c48c:	bic	r3, r8, #1
   4c490:	cmp	r3, r8
   4c494:	add	r7, r3, r7
   4c498:	add	r3, r3, r9
   4c49c:	beq	4c4e0 <__assert_fail@plt+0x39eec>
   4c4a0:	add	r2, r3, #1
   4c4a4:	str	r3, [r0, r7, lsl #2]
   4c4a8:	cmp	ip, r2
   4c4ac:	bls	4c4e0 <__assert_fail@plt+0x39eec>
   4c4b0:	add	r1, r3, #2
   4c4b4:	str	r2, [r0, r2, lsl #2]
   4c4b8:	cmp	ip, r1
   4c4bc:	bls	4c4e0 <__assert_fail@plt+0x39eec>
   4c4c0:	add	r2, r3, #3
   4c4c4:	str	r1, [r0, r1, lsl #2]
   4c4c8:	cmp	ip, r2
   4c4cc:	bls	4c4e0 <__assert_fail@plt+0x39eec>
   4c4d0:	add	r3, r3, #4
   4c4d4:	str	r2, [r0, r2, lsl #2]
   4c4d8:	cmp	ip, r3
   4c4dc:	strhi	r3, [r0, r3, lsl #2]
   4c4e0:	ldr	r2, [r5, #52]	; 0x34
   4c4e4:	mov	r8, #1
   4c4e8:	ldrb	r1, [r2, #24]
   4c4ec:	mov	lr, r2
   4c4f0:	ldr	r3, [r2, #4]
   4c4f4:	b	4c518 <__assert_fail@plt+0x39f24>
   4c4f8:	cmp	r1, #17
   4c4fc:	beq	4c7b0 <__assert_fail@plt+0x3a1bc>
   4c500:	cmp	r3, #0
   4c504:	beq	4c540 <__assert_fail@plt+0x39f4c>
   4c508:	ldrb	r1, [r3, #24]
   4c50c:	ldr	r7, [r3, #4]
   4c510:	mov	lr, r3
   4c514:	mov	r3, r7
   4c518:	cmp	r1, #4
   4c51c:	bne	4c4f8 <__assert_fail@plt+0x39f04>
   4c520:	ldr	r7, [lr, #20]
   4c524:	cmp	r3, #0
   4c528:	ldr	r1, [r5, #80]	; 0x50
   4c52c:	ldr	r7, [r0, r7, lsl #2]
   4c530:	orr	r1, r1, r8, lsl r7
   4c534:	str	r7, [lr, #20]
   4c538:	str	r1, [r5, #80]	; 0x50
   4c53c:	bne	4c508 <__assert_fail@plt+0x39f14>
   4c540:	mov	r1, #0
   4c544:	b	4c54c <__assert_fail@plt+0x39f58>
   4c548:	mov	lr, r3
   4c54c:	ldr	r3, [lr, #8]
   4c550:	cmp	r3, r1
   4c554:	cmpne	r3, #0
   4c558:	bne	4c508 <__assert_fail@plt+0x39f14>
   4c55c:	ldr	r3, [lr]
   4c560:	mov	r1, lr
   4c564:	cmp	r3, #0
   4c568:	bne	4c548 <__assert_fail@plt+0x39f54>
   4c56c:	cmp	ip, #0
   4c570:	beq	4c5a0 <__assert_fail@plt+0x39fac>
   4c574:	ldr	r3, [r0]
   4c578:	cmp	r3, #0
   4c57c:	bne	4c5b0 <__assert_fail@plt+0x39fbc>
   4c580:	mov	r1, r0
   4c584:	b	4c594 <__assert_fail@plt+0x39fa0>
   4c588:	ldr	lr, [r1, #4]!
   4c58c:	cmp	lr, r3
   4c590:	bne	4c5b0 <__assert_fail@plt+0x39fbc>
   4c594:	add	r3, r3, #1
   4c598:	cmp	r3, ip
   4c59c:	bne	4c588 <__assert_fail@plt+0x39f94>
   4c5a0:	bl	38b10 <__assert_fail@plt+0x2651c>
   4c5a4:	ldr	r2, [r5, #52]	; 0x34
   4c5a8:	mov	r3, #0
   4c5ac:	str	r3, [r5, #132]	; 0x84
   4c5b0:	mov	r7, #0
   4c5b4:	mov	r8, r2
   4c5b8:	ldr	r3, [r8, #4]
   4c5bc:	cmp	r3, #0
   4c5c0:	beq	4c5d4 <__assert_fail@plt+0x39fe0>
   4c5c4:	mov	r8, r3
   4c5c8:	ldr	r3, [r8, #4]
   4c5cc:	cmp	r3, #0
   4c5d0:	bne	4c5c4 <__assert_fail@plt+0x39fd0>
   4c5d4:	ldr	r2, [r8, #8]
   4c5d8:	cmp	r2, #0
   4c5dc:	bne	4c5b4 <__assert_fail@plt+0x39fc0>
   4c5e0:	mov	r3, r2
   4c5e4:	b	4c62c <__assert_fail@plt+0x3a038>
   4c5e8:	cmp	r3, #0
   4c5ec:	beq	4c608 <__assert_fail@plt+0x3a014>
   4c5f0:	ldrb	r2, [r3, #24]
   4c5f4:	cmp	r2, #17
   4c5f8:	beq	4c674 <__assert_fail@plt+0x3a080>
   4c5fc:	ldr	r3, [sp, #48]	; 0x30
   4c600:	cmp	r3, #0
   4c604:	bne	4cfc4 <__assert_fail@plt+0x3a9d0>
   4c608:	ldr	r2, [r8]
   4c60c:	cmp	r2, #0
   4c610:	beq	4c80c <__assert_fail@plt+0x3a218>
   4c614:	ldr	r3, [r2, #8]
   4c618:	cmp	r3, #0
   4c61c:	cmpne	r8, r3
   4c620:	bne	4d224 <__assert_fail@plt+0x3ac30>
   4c624:	mov	r8, r2
   4c628:	ldr	r2, [r2, #4]
   4c62c:	cmp	r2, #0
   4c630:	str	r7, [sp, #48]	; 0x30
   4c634:	beq	4c5e8 <__assert_fail@plt+0x39ff4>
   4c638:	ldrb	r1, [r2, #24]
   4c63c:	cmp	r1, #17
   4c640:	bne	4c5e8 <__assert_fail@plt+0x39ff4>
   4c644:	mov	r1, r6
   4c648:	add	r0, sp, #48	; 0x30
   4c64c:	bl	44530 <__assert_fail@plt+0x31f3c>
   4c650:	ldr	r3, [r8, #8]
   4c654:	cmp	r0, #0
   4c658:	str	r0, [r8, #4]
   4c65c:	strne	r8, [r0]
   4c660:	cmp	r3, #0
   4c664:	beq	4c5fc <__assert_fail@plt+0x3a008>
   4c668:	ldrb	r2, [r3, #24]
   4c66c:	cmp	r2, #17
   4c670:	bne	4c5fc <__assert_fail@plt+0x3a008>
   4c674:	mov	r2, r3
   4c678:	mov	r1, r6
   4c67c:	add	r0, sp, #48	; 0x30
   4c680:	bl	44530 <__assert_fail@plt+0x31f3c>
   4c684:	cmp	r0, #0
   4c688:	str	r0, [r8, #8]
   4c68c:	strne	r8, [r0]
   4c690:	b	4c5fc <__assert_fail@plt+0x3a008>
   4c694:	mov	r3, #12
   4c698:	str	r3, [sp, #36]	; 0x24
   4c69c:	mov	r0, r4
   4c6a0:	bl	4090c <__assert_fail@plt+0x2e318>
   4c6a4:	ldr	r0, [sp, #36]	; 0x24
   4c6a8:	mov	r3, #0
   4c6ac:	str	r3, [r6]
   4c6b0:	str	r3, [r6, #4]
   4c6b4:	add	sp, sp, #148	; 0x94
   4c6b8:	ldrd	r4, [sp]
   4c6bc:	ldrd	r6, [sp, #8]
   4c6c0:	ldrd	r8, [sp, #16]
   4c6c4:	ldrd	sl, [sp, #24]
   4c6c8:	add	sp, sp, #32
   4c6cc:	pop	{pc}		; (ldr pc, [sp], #4)
   4c6d0:	mov	r1, r9
   4c6d4:	add	r0, sp, #60	; 0x3c
   4c6d8:	bl	3c57c <__assert_fail@plt+0x29f88>
   4c6dc:	cmp	r0, #0
   4c6e0:	bne	4c0fc <__assert_fail@plt+0x39b08>
   4c6e4:	ldrb	r2, [sp, #135]	; 0x87
   4c6e8:	ldr	r1, [r4, #92]	; 0x5c
   4c6ec:	b	4c094 <__assert_fail@plt+0x39aa0>
   4c6f0:	mov	r1, #1
   4c6f4:	mov	r0, #32
   4c6f8:	bl	384e0 <__assert_fail@plt+0x25eec>
   4c6fc:	cmp	r0, #0
   4c700:	str	r0, [r4, #60]	; 0x3c
   4c704:	beq	4c694 <__assert_fail@plt+0x3a0a0>
   4c708:	str	r5, [sp, #12]
   4c70c:	mov	r5, r4
   4c710:	lsl	fp, sl, #3
   4c714:	mov	r4, #0
   4c718:	b	4c740 <__assert_fail@plt+0x3a14c>
   4c71c:	cmp	r3, #0
   4c720:	bne	4c730 <__assert_fail@plt+0x3a13c>
   4c724:	ldrb	r3, [r5, #88]	; 0x58
   4c728:	orr	r3, r3, #8
   4c72c:	strb	r3, [r5, #88]	; 0x58
   4c730:	add	r4, r4, #1
   4c734:	add	fp, fp, #1
   4c738:	cmp	r4, #32
   4c73c:	beq	4c788 <__assert_fail@plt+0x3a194>
   4c740:	mov	r0, fp
   4c744:	bl	123a8 <btowc@plt>
   4c748:	cmn	r0, #1
   4c74c:	bic	r3, fp, #127	; 0x7f
   4c750:	beq	4c71c <__assert_fail@plt+0x3a128>
   4c754:	ldr	r1, [r5, #60]	; 0x3c
   4c758:	cmp	r3, #0
   4c75c:	mov	r2, #1
   4c760:	ldr	r3, [r1, sl]
   4c764:	orr	r3, r3, r2, lsl r4
   4c768:	str	r3, [r1, sl]
   4c76c:	bne	4c730 <__assert_fail@plt+0x3a13c>
   4c770:	cmp	r0, fp
   4c774:	bne	4c724 <__assert_fail@plt+0x3a130>
   4c778:	add	r4, r4, #1
   4c77c:	add	fp, fp, #1
   4c780:	cmp	r4, #32
   4c784:	bne	4c740 <__assert_fail@plt+0x3a14c>
   4c788:	add	sl, sl, #4
   4c78c:	cmp	sl, #32
   4c790:	bne	4c710 <__assert_fail@plt+0x3a11c>
   4c794:	mov	r4, r5
   4c798:	ldr	r5, [sp, #12]
   4c79c:	b	4bfa4 <__assert_fail@plt+0x399b0>
   4c7a0:	str	r3, [sp, #36]	; 0x24
   4c7a4:	str	r1, [sp, #88]	; 0x58
   4c7a8:	str	r1, [sp, #92]	; 0x5c
   4c7ac:	b	4c204 <__assert_fail@plt+0x39c10>
   4c7b0:	cmp	r3, #0
   4c7b4:	beq	4c540 <__assert_fail@plt+0x39f4c>
   4c7b8:	ldrb	r1, [r3, #24]
   4c7bc:	ldr	r7, [r3, #4]
   4c7c0:	cmp	r1, #17
   4c7c4:	bne	4c510 <__assert_fail@plt+0x39f1c>
   4c7c8:	ldr	r1, [r3, #20]
   4c7cc:	cmp	r7, #0
   4c7d0:	str	r7, [lr, #4]
   4c7d4:	ldr	r3, [lr, #20]
   4c7d8:	strne	lr, [r7]
   4c7dc:	cmp	r1, #31
   4c7e0:	ldrle	r9, [r5, #80]	; 0x50
   4c7e4:	ldr	r3, [r0, r3, lsl #2]
   4c7e8:	str	r3, [r0, r1, lsl #2]
   4c7ec:	bicle	r1, r9, r8, lsl r1
   4c7f0:	mov	r3, r7
   4c7f4:	strle	r1, [r5, #80]	; 0x50
   4c7f8:	b	4c500 <__assert_fail@plt+0x39f0c>
   4c7fc:	mov	r3, #12
   4c800:	ldr	r5, [r6]
   4c804:	str	r3, [sp, #36]	; 0x24
   4c808:	b	4c104 <__assert_fail@plt+0x39b10>
   4c80c:	ldr	r3, [r5, #52]	; 0x34
   4c810:	mov	r7, r3
   4c814:	ldr	r3, [r3, #4]
   4c818:	cmp	r3, #0
   4c81c:	bne	4c810 <__assert_fail@plt+0x3a21c>
   4c820:	ldr	r3, [r7, #8]
   4c824:	cmp	r3, #0
   4c828:	bne	4c810 <__assert_fail@plt+0x3a21c>
   4c82c:	b	4c874 <__assert_fail@plt+0x3a280>
   4c830:	ldr	r3, [r7, #4]
   4c834:	ldr	r2, [r3, #12]
   4c838:	ldr	r3, [r3, #28]
   4c83c:	str	r2, [r7, #12]
   4c840:	str	r3, [r7, #28]
   4c844:	ldr	r1, [r7]
   4c848:	cmp	r1, #0
   4c84c:	beq	4c8d0 <__assert_fail@plt+0x3a2dc>
   4c850:	ldr	r3, [r1, #8]
   4c854:	sub	r2, r7, r3
   4c858:	cmp	r3, #0
   4c85c:	clz	r2, r2
   4c860:	mov	r7, r1
   4c864:	lsr	r2, r2, #5
   4c868:	moveq	r2, #1
   4c86c:	cmp	r2, #0
   4c870:	beq	4c810 <__assert_fail@plt+0x3a21c>
   4c874:	ldrb	r3, [r7, #24]
   4c878:	cmp	r3, #16
   4c87c:	beq	4c830 <__assert_fail@plt+0x3a23c>
   4c880:	add	r3, r7, #20
   4c884:	mov	r0, r5
   4c888:	ldm	r3, {r1, r2}
   4c88c:	str	r7, [r7, #12]
   4c890:	bl	3cfdc <__assert_fail@plt+0x2a9e8>
   4c894:	cmn	r0, #1
   4c898:	str	r0, [r7, #28]
   4c89c:	beq	4cff0 <__assert_fail@plt+0x3a9fc>
   4c8a0:	ldrb	r3, [r7, #24]
   4c8a4:	cmp	r3, #12
   4c8a8:	bne	4c844 <__assert_fail@plt+0x3a250>
   4c8ac:	ldr	r3, [r5]
   4c8b0:	ldr	r2, [r7, #20]
   4c8b4:	add	r0, r3, r0, lsl #3
   4c8b8:	ldr	r3, [r0, #4]
   4c8bc:	bfi	r3, r2, #8, #10
   4c8c0:	str	r3, [r0, #4]
   4c8c4:	ldr	r1, [r7]
   4c8c8:	cmp	r1, #0
   4c8cc:	bne	4c850 <__assert_fail@plt+0x3a25c>
   4c8d0:	ldr	fp, [r5, #52]	; 0x34
   4c8d4:	mov	r3, fp
   4c8d8:	b	4c904 <__assert_fail@plt+0x3a310>
   4c8dc:	cmp	r2, #0
   4c8e0:	ldr	r1, [r3, #8]
   4c8e4:	beq	4c93c <__assert_fail@plt+0x3a348>
   4c8e8:	ldr	r0, [r3, #16]
   4c8ec:	cmp	r1, #0
   4c8f0:	str	r0, [r2, #16]
   4c8f4:	beq	4c900 <__assert_fail@plt+0x3a30c>
   4c8f8:	ldr	r3, [r3, #16]
   4c8fc:	str	r3, [r1, #16]
   4c900:	mov	r3, r2
   4c904:	ldrb	r1, [r3, #24]
   4c908:	ldr	r2, [r3, #4]
   4c90c:	cmp	r1, #11
   4c910:	beq	4c934 <__assert_fail@plt+0x3a340>
   4c914:	cmp	r1, #16
   4c918:	bne	4c8dc <__assert_fail@plt+0x3a2e8>
   4c91c:	ldr	r1, [r3, #8]
   4c920:	ldr	r0, [r1, #12]
   4c924:	str	r0, [r2, #16]
   4c928:	ldr	r3, [r3, #16]
   4c92c:	str	r3, [r1, #16]
   4c930:	b	4c900 <__assert_fail@plt+0x3a30c>
   4c934:	str	r3, [r2, #16]
   4c938:	b	4c900 <__assert_fail@plt+0x3a30c>
   4c93c:	cmp	r1, #0
   4c940:	beq	4c954 <__assert_fail@plt+0x3a360>
   4c944:	ldr	r3, [r3, #16]
   4c948:	mov	r2, r1
   4c94c:	str	r3, [r1, #16]
   4c950:	b	4c900 <__assert_fail@plt+0x3a30c>
   4c954:	ldr	r1, [r3]
   4c958:	cmp	r1, #0
   4c95c:	bne	4c968 <__assert_fail@plt+0x3a374>
   4c960:	b	4c988 <__assert_fail@plt+0x3a394>
   4c964:	mov	r1, r2
   4c968:	ldr	r2, [r1, #8]
   4c96c:	cmp	r2, #0
   4c970:	cmpne	r2, r3
   4c974:	bne	4c900 <__assert_fail@plt+0x3a30c>
   4c978:	ldr	r2, [r1]
   4c97c:	mov	r3, r1
   4c980:	cmp	r2, #0
   4c984:	bne	4c964 <__assert_fail@plt+0x3a370>
   4c988:	mov	r7, #1
   4c98c:	mov	r9, #2
   4c990:	str	r4, [sp, #20]
   4c994:	ldrb	r2, [fp, #24]
   4c998:	ldr	r3, [fp, #28]
   4c99c:	sub	r2, r2, #2
   4c9a0:	cmp	r2, #14
   4c9a4:	ldrls	pc, [pc, r2, lsl #2]
   4c9a8:	b	4cb5c <__assert_fail@plt+0x3a568>
   4c9ac:	andeq	ip, r4, r0, ror #20
   4c9b0:	andeq	ip, r4, ip, asr fp
   4c9b4:	andeq	ip, r4, r0, lsr fp
   4c9b8:	andeq	ip, r4, ip, asr fp
   4c9bc:	andeq	ip, r4, ip, asr fp
   4c9c0:	andeq	ip, r4, ip, asr fp
   4c9c4:	strdeq	ip, [r4], -r8
   4c9c8:	strdeq	ip, [r4], -r8
   4c9cc:	andeq	ip, r4, r8, ror #19
   4c9d0:	andeq	ip, r4, r8, ror #19
   4c9d4:	strdeq	ip, [r4], -r8
   4c9d8:	andeq	ip, r4, ip, asr fp
   4c9dc:	andeq	ip, r4, ip, asr fp
   4c9e0:	andeq	ip, r4, ip, asr fp
   4c9e4:	andeq	ip, r4, r0, ror #20
   4c9e8:	ldrb	r2, [r5, #88]	; 0x58
   4c9ec:	add	r3, r3, r3, lsl #1
   4c9f0:	mov	r0, #8
   4c9f4:	orr	r2, r2, #1
   4c9f8:	strb	r2, [r5, #88]	; 0x58
   4c9fc:	ldr	r2, [fp, #4]
   4ca00:	cmp	r2, #0
   4ca04:	ldrne	r2, [r2, #12]
   4ca08:	ldreq	r2, [fp, #16]
   4ca0c:	ldr	sl, [r2, #28]
   4ca10:	ldr	r2, [fp, #8]
   4ca14:	cmp	r2, #0
   4ca18:	ldrne	r2, [r2, #12]
   4ca1c:	ldreq	r2, [fp, #16]
   4ca20:	ldr	r4, [r2, #28]
   4ca24:	ldr	r2, [r5, #20]
   4ca28:	add	r8, r2, r3, lsl #2
   4ca2c:	str	r9, [r2, r3, lsl #2]
   4ca30:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4ca34:	cmp	r0, #0
   4ca38:	str	r0, [r8, #8]
   4ca3c:	beq	4cfec <__assert_fail@plt+0x3a9f8>
   4ca40:	cmp	sl, r4
   4ca44:	streq	r7, [r8, #4]
   4ca48:	streq	sl, [r0]
   4ca4c:	beq	4ca60 <__assert_fail@plt+0x3a46c>
   4ca50:	str	r9, [r8, #4]
   4ca54:	strlt	sl, [r0]
   4ca58:	strlt	r4, [r0, #4]
   4ca5c:	stmge	r0, {r4, sl}
   4ca60:	ldr	r3, [fp, #4]
   4ca64:	cmp	r3, #0
   4ca68:	beq	4ca78 <__assert_fail@plt+0x3a484>
   4ca6c:	mov	fp, r3
   4ca70:	b	4c994 <__assert_fail@plt+0x3a3a0>
   4ca74:	mov	fp, r8
   4ca78:	ldr	r2, [fp, #8]
   4ca7c:	sub	r3, r2, r3
   4ca80:	cmp	r2, #0
   4ca84:	clz	r3, r3
   4ca88:	moveq	sl, #1
   4ca8c:	lsr	r3, r3, #5
   4ca90:	movne	sl, r3
   4ca94:	cmp	sl, #0
   4ca98:	beq	4d0f8 <__assert_fail@plt+0x3ab04>
   4ca9c:	ldr	r8, [fp]
   4caa0:	mov	r3, fp
   4caa4:	cmp	r8, #0
   4caa8:	bne	4ca74 <__assert_fail@plt+0x3a480>
   4caac:	ldr	r4, [sp, #20]
   4cab0:	mov	fp, r8
   4cab4:	mov	r7, r8
   4cab8:	ldr	r2, [r5, #24]
   4cabc:	add	r9, r7, r7, lsl #1
   4cac0:	lsl	r9, r9, #2
   4cac4:	add	r3, r2, r9
   4cac8:	ldr	r3, [r3, #4]
   4cacc:	cmp	r3, #0
   4cad0:	beq	4cba8 <__assert_fail@plt+0x3a5b4>
   4cad4:	ldr	r3, [r5, #8]
   4cad8:	add	r7, r7, #1
   4cadc:	cmp	r3, r7
   4cae0:	bne	4cabc <__assert_fail@plt+0x3a4c8>
   4cae4:	cmp	fp, #0
   4cae8:	beq	4cbe4 <__assert_fail@plt+0x3a5f0>
   4caec:	mov	fp, #0
   4caf0:	mov	r7, fp
   4caf4:	b	4cabc <__assert_fail@plt+0x3a4c8>
   4caf8:	ldr	r1, [fp, #16]
   4cafc:	add	r3, r3, r3, lsl #1
   4cb00:	mov	r0, #4
   4cb04:	ldr	r2, [r5, #20]
   4cb08:	ldr	r8, [r1, #28]
   4cb0c:	add	sl, r2, r3, lsl #2
   4cb10:	str	r7, [r2, r3, lsl #2]
   4cb14:	str	r7, [sl, #4]
   4cb18:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4cb1c:	cmp	r0, #0
   4cb20:	str	r0, [sl, #8]
   4cb24:	beq	4d310 <__assert_fail@plt+0x3ad1c>
   4cb28:	str	r8, [r0]
   4cb2c:	b	4ca60 <__assert_fail@plt+0x3a46c>
   4cb30:	ldr	r1, [fp, #16]
   4cb34:	ldr	r2, [r5, #12]
   4cb38:	ldr	r8, [r1, #28]
   4cb3c:	str	r8, [r2, r3, lsl #2]
   4cb40:	ldrb	r0, [fp, #24]
   4cb44:	cmp	r0, #4
   4cb48:	bne	4ca60 <__assert_fail@plt+0x3a46c>
   4cb4c:	ldr	r2, [r5, #20]
   4cb50:	add	r3, r3, r3, lsl #1
   4cb54:	add	sl, r2, r3, lsl #2
   4cb58:	b	4cb10 <__assert_fail@plt+0x3a51c>
   4cb5c:	ldr	r1, [fp, #16]
   4cb60:	ldr	r2, [r5, #12]
   4cb64:	ldr	r1, [r1, #28]
   4cb68:	str	r1, [r2, r3, lsl #2]
   4cb6c:	b	4ca60 <__assert_fail@plt+0x3a46c>
   4cb70:	ldr	r0, [sp, #56]	; 0x38
   4cb74:	bl	38b10 <__assert_fail@plt+0x2651c>
   4cb78:	ldr	r3, [r5, #8]
   4cb7c:	cmp	r3, r7
   4cb80:	moveq	fp, r9
   4cb84:	moveq	r7, fp
   4cb88:	movne	fp, sl
   4cb8c:	ldr	r2, [r5, #24]
   4cb90:	add	r9, r7, r7, lsl #1
   4cb94:	lsl	r9, r9, #2
   4cb98:	add	r1, r2, r9
   4cb9c:	ldr	r1, [r1, #4]
   4cba0:	cmp	r1, #0
   4cba4:	bne	4cad8 <__assert_fail@plt+0x3a4e4>
   4cba8:	mov	r3, #1
   4cbac:	mov	r2, r7
   4cbb0:	mov	r1, r5
   4cbb4:	add	r0, sp, #48	; 0x30
   4cbb8:	bl	41b24 <__assert_fail@plt+0x2f530>
   4cbbc:	cmp	r0, #0
   4cbc0:	bne	4cfc0 <__assert_fail@plt+0x3a9cc>
   4cbc4:	ldr	r2, [r5, #24]
   4cbc8:	add	r7, r7, #1
   4cbcc:	add	r9, r2, r9
   4cbd0:	ldr	r9, [r9, #4]
   4cbd4:	cmp	r9, #0
   4cbd8:	beq	4cb70 <__assert_fail@plt+0x3a57c>
   4cbdc:	ldr	r3, [r5, #8]
   4cbe0:	b	4cadc <__assert_fail@plt+0x3a4e8>
   4cbe4:	ldrb	r3, [r6, #28]
   4cbe8:	tst	r3, #16
   4cbec:	bne	4cc08 <__assert_fail@plt+0x3a614>
   4cbf0:	ldr	r3, [r6, #24]
   4cbf4:	cmp	r3, #0
   4cbf8:	beq	4cc08 <__assert_fail@plt+0x3a614>
   4cbfc:	ldrb	r3, [r5, #88]	; 0x58
   4cc00:	tst	r3, #1
   4cc04:	bne	4cc14 <__assert_fail@plt+0x3a620>
   4cc08:	ldr	r3, [r5, #76]	; 0x4c
   4cc0c:	cmp	r3, #0
   4cc10:	beq	4cd38 <__assert_fail@plt+0x3a744>
   4cc14:	add	r7, r7, r7, lsl #1
   4cc18:	lsl	r0, r7, #2
   4cc1c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4cc20:	cmp	r0, #0
   4cc24:	str	r0, [r5, #28]
   4cc28:	beq	4c7fc <__assert_fail@plt+0x3a208>
   4cc2c:	ldr	r3, [r5, #8]
   4cc30:	cmp	r3, #0
   4cc34:	movne	r3, #0
   4cc38:	movne	r2, r3
   4cc3c:	bne	4cc48 <__assert_fail@plt+0x3a654>
   4cc40:	b	4cd38 <__assert_fail@plt+0x3a744>
   4cc44:	ldr	r0, [r5, #28]
   4cc48:	add	ip, r3, r3, lsl #1
   4cc4c:	add	r3, r3, #1
   4cc50:	add	r1, r0, ip, lsl #2
   4cc54:	str	r2, [r0, ip, lsl #2]
   4cc58:	str	r2, [r1, #4]
   4cc5c:	str	r2, [r1, #8]
   4cc60:	ldr	r1, [r5, #8]
   4cc64:	cmp	r1, r3
   4cc68:	bhi	4cc44 <__assert_fail@plt+0x3a650>
   4cc6c:	cmp	r1, #0
   4cc70:	beq	4cd38 <__assert_fail@plt+0x3a744>
   4cc74:	ldr	ip, [r5, #24]
   4cc78:	mov	r3, #0
   4cc7c:	mov	sl, r3
   4cc80:	str	r4, [sp, #20]
   4cc84:	mov	r4, r3
   4cc88:	str	r8, [sp, #24]
   4cc8c:	str	fp, [sp, #28]
   4cc90:	add	fp, ip, r4
   4cc94:	ldmib	fp, {r3, r9}
   4cc98:	cmp	r3, #0
   4cc9c:	ble	4cd20 <__assert_fail@plt+0x3a72c>
   4cca0:	sub	r9, r9, #4
   4cca4:	mov	r8, #0
   4cca8:	b	4ccc8 <__assert_fail@plt+0x3a6d4>
   4ccac:	add	r3, r1, #1
   4ccb0:	add	r8, r8, #1
   4ccb4:	str	r3, [r7, #4]
   4ccb8:	str	sl, [r0, r1, lsl #2]
   4ccbc:	ldr	r3, [fp, #4]
   4ccc0:	cmp	r8, r3
   4ccc4:	bge	4cd1c <__assert_fail@plt+0x3a728>
   4ccc8:	ldr	r3, [r9, #4]!
   4cccc:	ldr	r2, [r5, #28]
   4ccd0:	add	r3, r3, r3, lsl #1
   4ccd4:	add	r7, r2, r3, lsl #2
   4ccd8:	ldr	lr, [r2, r3, lsl #2]
   4ccdc:	ldr	r1, [r7, #4]
   4cce0:	ldr	r0, [r7, #8]
   4cce4:	cmp	lr, r1
   4cce8:	bne	4ccac <__assert_fail@plt+0x3a6b8>
   4ccec:	add	r1, r1, #1
   4ccf0:	lsl	ip, r1, #1
   4ccf4:	lsl	r1, r1, #3
   4ccf8:	str	ip, [r2, r3, lsl #2]
   4ccfc:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   4cd00:	cmp	r0, #0
   4cd04:	beq	4cfec <__assert_fail@plt+0x3a9f8>
   4cd08:	ldr	ip, [r5, #24]
   4cd0c:	str	r0, [r7, #8]
   4cd10:	ldr	r1, [r7, #4]
   4cd14:	add	fp, ip, r4
   4cd18:	b	4ccac <__assert_fail@plt+0x3a6b8>
   4cd1c:	ldr	r1, [r5, #8]
   4cd20:	add	sl, sl, #1
   4cd24:	add	r4, r4, #12
   4cd28:	cmp	sl, r1
   4cd2c:	bcc	4cc90 <__assert_fail@plt+0x3a69c>
   4cd30:	add	r4, sp, #20
   4cd34:	ldm	r4, {r4, r8, fp}
   4cd38:	mov	r1, #0
   4cd3c:	str	r1, [sp, #36]	; 0x24
   4cd40:	ldr	r3, [sp, #12]
   4cd44:	ldrb	r2, [r4, #88]	; 0x58
   4cd48:	clz	r3, r3
   4cd4c:	lsr	r3, r3, #5
   4cd50:	ands	r3, r3, r2, lsr #2
   4cd54:	bne	4d018 <__assert_fail@plt+0x3aa24>
   4cd58:	ldr	r7, [r4, #24]
   4cd5c:	ldr	r3, [r4, #52]	; 0x34
   4cd60:	ldr	r3, [r3, #12]
   4cd64:	ldr	r3, [r3, #28]
   4cd68:	add	r2, r3, r3, lsl #1
   4cd6c:	str	r3, [r4, #72]	; 0x48
   4cd70:	add	r7, r7, r2, lsl #2
   4cd74:	ldr	r3, [r7, #4]
   4cd78:	cmp	r3, #0
   4cd7c:	str	r3, [sp, #52]	; 0x34
   4cd80:	ble	4cfd0 <__assert_fail@plt+0x3a9dc>
   4cd84:	lsl	r0, r3, #2
   4cd88:	str	r3, [sp, #48]	; 0x30
   4cd8c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4cd90:	cmp	r0, #0
   4cd94:	mov	r8, r0
   4cd98:	str	r0, [sp, #56]	; 0x38
   4cd9c:	beq	4d350 <__assert_fail@plt+0x3ad5c>
   4cda0:	ldr	r2, [r7, #4]
   4cda4:	add	r5, sp, #48	; 0x30
   4cda8:	ldr	r1, [r7, #8]
   4cdac:	lsl	r2, r2, #2
   4cdb0:	bl	12024 <memcpy@plt>
   4cdb4:	mov	r3, #0
   4cdb8:	str	r3, [sp, #40]	; 0x28
   4cdbc:	ldr	r3, [r4, #76]	; 0x4c
   4cdc0:	cmp	r3, #0
   4cdc4:	ble	4cef0 <__assert_fail@plt+0x3a8fc>
   4cdc8:	ldr	r7, [sp, #52]	; 0x34
   4cdcc:	cmp	r7, #0
   4cdd0:	ble	4cef0 <__assert_fail@plt+0x3a8fc>
   4cdd4:	mov	ip, #0
   4cdd8:	b	4cdec <__assert_fail@plt+0x3a7f8>
   4cddc:	add	ip, ip, #1
   4cde0:	cmp	r7, ip
   4cde4:	ble	4cef0 <__assert_fail@plt+0x3a8fc>
   4cde8:	ldr	r8, [sp, #56]	; 0x38
   4cdec:	ldr	r3, [r8, ip, lsl #2]
   4cdf0:	ldr	r0, [r4]
   4cdf4:	add	r9, r0, r3, lsl #3
   4cdf8:	ldrb	r2, [r9, #4]
   4cdfc:	cmp	r2, #4
   4ce00:	bne	4cddc <__assert_fail@plt+0x3a7e8>
   4ce04:	sub	lr, r8, #4
   4ce08:	mov	r1, #0
   4ce0c:	b	4ce1c <__assert_fail@plt+0x3a828>
   4ce10:	add	r1, r1, #1
   4ce14:	cmp	r7, r1
   4ce18:	beq	4cddc <__assert_fail@plt+0x3a7e8>
   4ce1c:	ldr	r2, [lr, #4]!
   4ce20:	add	sl, r0, r2, lsl #3
   4ce24:	ldrb	sl, [sl, #4]
   4ce28:	cmp	sl, #9
   4ce2c:	bne	4ce10 <__assert_fail@plt+0x3a81c>
   4ce30:	ldr	sl, [r0, r2, lsl #3]
   4ce34:	ldr	r2, [r9]
   4ce38:	cmp	sl, r2
   4ce3c:	bne	4ce10 <__assert_fail@plt+0x3a81c>
   4ce40:	ldr	r1, [r4, #20]
   4ce44:	add	r3, r3, r3, lsl #1
   4ce48:	subs	r2, r7, #1
   4ce4c:	add	r3, r1, r3, lsl #2
   4ce50:	moveq	r1, r2
   4ce54:	ldr	r3, [r3, #8]
   4ce58:	ldr	lr, [r3]
   4ce5c:	beq	4ceb8 <__assert_fail@plt+0x3a8c4>
   4ce60:	mov	r1, #0
   4ce64:	add	r3, r2, r1
   4ce68:	lsr	r3, r3, #1
   4ce6c:	ldr	r0, [r8, r3, lsl #2]
   4ce70:	cmp	lr, r0
   4ce74:	bgt	4cfb0 <__assert_fail@plt+0x3a9bc>
   4ce78:	cmp	r3, r1
   4ce7c:	bls	4ceb8 <__assert_fail@plt+0x3a8c4>
   4ce80:	add	r2, r3, r1
   4ce84:	lsr	r2, r2, #1
   4ce88:	ldr	r0, [r8, r2, lsl #2]
   4ce8c:	cmp	lr, r0
   4ce90:	ble	4ceb0 <__assert_fail@plt+0x3a8bc>
   4ce94:	b	4cfa4 <__assert_fail@plt+0x3a9b0>
   4ce98:	add	r3, r1, r2
   4ce9c:	lsr	r3, r3, #1
   4cea0:	ldr	r0, [r8, r3, lsl #2]
   4cea4:	cmp	lr, r0
   4cea8:	bgt	4cfb0 <__assert_fail@plt+0x3a9bc>
   4ceac:	mov	r2, r3
   4ceb0:	cmp	r1, r2
   4ceb4:	bcc	4ce98 <__assert_fail@plt+0x3a8a4>
   4ceb8:	ldr	r3, [r8, r1, lsl #2]
   4cebc:	cmp	lr, r3
   4cec0:	beq	4cddc <__assert_fail@plt+0x3a7e8>
   4cec4:	ldr	r1, [r4, #24]
   4cec8:	add	lr, lr, lr, lsl #1
   4cecc:	mov	r0, r5
   4ced0:	add	r1, r1, lr, lsl #2
   4ced4:	bl	3d68c <__assert_fail@plt+0x2b098>
   4ced8:	cmp	r0, #0
   4cedc:	bne	4cf34 <__assert_fail@plt+0x3a940>
   4cee0:	ldr	r7, [sp, #52]	; 0x34
   4cee4:	mov	ip, #1
   4cee8:	cmp	r7, ip
   4ceec:	bgt	4cde8 <__assert_fail@plt+0x3a7f4>
   4cef0:	mov	r3, #0
   4cef4:	mov	r2, r5
   4cef8:	mov	r1, r4
   4cefc:	add	r0, sp, #40	; 0x28
   4cf00:	bl	426a8 <__assert_fail@plt+0x300b4>
   4cf04:	cmp	r0, #0
   4cf08:	str	r0, [r4, #36]	; 0x24
   4cf0c:	beq	4d0f0 <__assert_fail@plt+0x3aafc>
   4cf10:	ldrsb	r3, [r0, #52]	; 0x34
   4cf14:	cmp	r3, #0
   4cf18:	strge	r0, [r4, #40]	; 0x28
   4cf1c:	strge	r0, [r4, #44]	; 0x2c
   4cf20:	strge	r0, [r4, #48]	; 0x30
   4cf24:	blt	4d08c <__assert_fail@plt+0x3aa98>
   4cf28:	ldr	r0, [sp, #56]	; 0x38
   4cf2c:	bl	38b10 <__assert_fail@plt+0x2651c>
   4cf30:	mov	r0, #0
   4cf34:	ldr	r5, [r6]
   4cf38:	str	r0, [sp, #36]	; 0x24
   4cf3c:	ldr	r0, [r5, #56]	; 0x38
   4cf40:	cmp	r0, #0
   4cf44:	beq	4cf58 <__assert_fail@plt+0x3a964>
   4cf48:	ldr	r7, [r0]
   4cf4c:	bl	38b10 <__assert_fail@plt+0x2651c>
   4cf50:	subs	r0, r7, #0
   4cf54:	bne	4cf48 <__assert_fail@plt+0x3a954>
   4cf58:	mov	r3, #31
   4cf5c:	mov	r7, #0
   4cf60:	ldr	r0, [r5, #16]
   4cf64:	str	r7, [r5, #52]	; 0x34
   4cf68:	str	r7, [r5, #56]	; 0x38
   4cf6c:	str	r3, [r5, #64]	; 0x40
   4cf70:	bl	38b10 <__assert_fail@plt+0x2651c>
   4cf74:	str	r7, [r5, #16]
   4cf78:	ldr	r0, [sp, #68]	; 0x44
   4cf7c:	bl	38b10 <__assert_fail@plt+0x2651c>
   4cf80:	ldr	r0, [sp, #72]	; 0x48
   4cf84:	bl	38b10 <__assert_fail@plt+0x2651c>
   4cf88:	ldrb	r3, [sp, #135]	; 0x87
   4cf8c:	cmp	r3, r7
   4cf90:	bne	4cff8 <__assert_fail@plt+0x3aa04>
   4cf94:	ldr	r0, [sp, #36]	; 0x24
   4cf98:	cmp	r0, #0
   4cf9c:	beq	4c6b4 <__assert_fail@plt+0x3a0c0>
   4cfa0:	b	4c15c <__assert_fail@plt+0x39b68>
   4cfa4:	mov	r1, r2
   4cfa8:	mov	r2, r3
   4cfac:	mov	r3, r1
   4cfb0:	add	r1, r3, #1
   4cfb4:	cmp	r1, r2
   4cfb8:	bcc	4ce64 <__assert_fail@plt+0x3a870>
   4cfbc:	b	4ceb8 <__assert_fail@plt+0x3a8c4>
   4cfc0:	mov	r3, r0
   4cfc4:	str	r3, [sp, #36]	; 0x24
   4cfc8:	ldr	r5, [r6]
   4cfcc:	b	4c104 <__assert_fail@plt+0x39b10>
   4cfd0:	mov	r3, #0
   4cfd4:	add	r5, sp, #48	; 0x30
   4cfd8:	str	r3, [sp, #40]	; 0x28
   4cfdc:	str	r3, [sp, #48]	; 0x30
   4cfe0:	str	r3, [r5, #4]
   4cfe4:	str	r3, [r5, #8]
   4cfe8:	b	4cdbc <__assert_fail@plt+0x3a7c8>
   4cfec:	ldr	r4, [sp, #20]
   4cff0:	mov	r3, #12
   4cff4:	b	4cfc4 <__assert_fail@plt+0x3a9d0>
   4cff8:	ldr	r0, [sp, #64]	; 0x40
   4cffc:	bl	38b10 <__assert_fail@plt+0x2651c>
   4d000:	b	4cf94 <__assert_fail@plt+0x3a9a0>
   4d004:	add	r0, sp, #60	; 0x3c
   4d008:	bl	3c784 <__assert_fail@plt+0x2a190>
   4d00c:	ldr	r3, [sp, #12]
   4d010:	str	r3, [sp, #36]	; 0x24
   4d014:	b	4c204 <__assert_fail@plt+0x39c10>
   4d018:	ldr	r2, [r6, #20]
   4d01c:	cmp	r2, #0
   4d020:	bne	4cd58 <__assert_fail@plt+0x3a764>
   4d024:	ldr	r5, [r4, #8]
   4d028:	cmp	r5, #0
   4d02c:	beq	4d394 <__assert_fail@plt+0x3ada0>
   4d030:	ldr	lr, [r4]
   4d034:	mov	r0, r2
   4d038:	mov	ip, r2
   4d03c:	mov	r1, lr
   4d040:	ldrb	r2, [r1, #4]
   4d044:	sub	r2, r2, #1
   4d048:	cmp	r2, #11
   4d04c:	ldrls	pc, [pc, r2, lsl #2]
   4d050:	b	4d3c4 <__assert_fail@plt+0x3add0>
   4d054:	andeq	sp, r4, r4, lsr #5
   4d058:	andeq	sp, r4, ip, lsr r2
   4d05c:			; <UNDEFINED> instruction: 0x0004d2b4
   4d060:	andeq	sp, r4, ip, lsr r2
   4d064:	andeq	sp, r4, r8, lsr r2
   4d068:	andeq	ip, r4, r8, asr sp
   4d06c:	andeq	sp, r4, r4, asr #7
   4d070:	andeq	sp, r4, ip, lsr r2
   4d074:	andeq	sp, r4, ip, lsr r2
   4d078:	andeq	sp, r4, ip, lsr r2
   4d07c:	andeq	sp, r4, ip, lsr r2
   4d080:	andeq	sp, r4, ip, ror #5
   4d084:	ldr	r2, [r5, #52]	; 0x34
   4d088:	b	4c5b0 <__assert_fail@plt+0x39fbc>
   4d08c:	mov	r3, #1
   4d090:	mov	r2, r5
   4d094:	mov	r1, r4
   4d098:	add	r0, sp, #40	; 0x28
   4d09c:	bl	426a8 <__assert_fail@plt+0x300b4>
   4d0a0:	mov	r3, #2
   4d0a4:	mov	r2, r5
   4d0a8:	str	r0, [r4, #40]	; 0x28
   4d0ac:	mov	r1, r4
   4d0b0:	add	r0, sp, #40	; 0x28
   4d0b4:	bl	426a8 <__assert_fail@plt+0x300b4>
   4d0b8:	mov	r3, #6
   4d0bc:	mov	r2, r5
   4d0c0:	str	r0, [r4, #44]	; 0x2c
   4d0c4:	mov	r1, r4
   4d0c8:	add	r0, sp, #40	; 0x28
   4d0cc:	bl	426a8 <__assert_fail@plt+0x300b4>
   4d0d0:	ldr	r3, [r4, #40]	; 0x28
   4d0d4:	str	r0, [r4, #48]	; 0x30
   4d0d8:	cmp	r3, #0
   4d0dc:	beq	4d0f0 <__assert_fail@plt+0x3aafc>
   4d0e0:	ldr	r3, [r4, #44]	; 0x2c
   4d0e4:	cmp	r0, #0
   4d0e8:	cmpne	r3, #0
   4d0ec:	bne	4cf28 <__assert_fail@plt+0x3a934>
   4d0f0:	ldr	r0, [sp, #40]	; 0x28
   4d0f4:	b	4cf34 <__assert_fail@plt+0x3a940>
   4d0f8:	mov	r3, r2
   4d0fc:	b	4ca6c <__assert_fail@plt+0x3a478>
   4d100:	ldr	r5, [sp, #88]	; 0x58
   4d104:	ldr	r9, [sp, #96]	; 0x60
   4d108:	ldr	r3, [sp, #108]	; 0x6c
   4d10c:	cmp	r9, r3
   4d110:	movge	r9, r3
   4d114:	cmp	r9, r5
   4d118:	ble	4d378 <__assert_fail@plt+0x3ad84>
   4d11c:	bl	122a0 <__ctype_toupper_loc@plt>
   4d120:	b	4d140 <__assert_fail@plt+0x3ab4c>
   4d124:	ldr	r2, [r0]
   4d128:	ldr	r3, [r2, r3, lsl #2]
   4d12c:	strb	r3, [r8, r5]
   4d130:	add	r5, r5, #1
   4d134:	cmp	r9, r5
   4d138:	beq	4d178 <__assert_fail@plt+0x3ab84>
   4d13c:	ldr	r8, [sp, #64]	; 0x40
   4d140:	ldr	r3, [sp, #60]	; 0x3c
   4d144:	ldr	r1, [sp, #84]	; 0x54
   4d148:	ldr	r2, [sp, #124]	; 0x7c
   4d14c:	add	r3, r3, r5
   4d150:	ldrb	r3, [r3, r1]
   4d154:	cmp	r2, #0
   4d158:	beq	4d124 <__assert_fail@plt+0x3ab30>
   4d15c:	ldrb	r2, [r2, r3]
   4d160:	ldr	r3, [r0]
   4d164:	ldr	r3, [r3, r2, lsl #2]
   4d168:	strb	r3, [r8, r5]
   4d16c:	add	r5, r5, #1
   4d170:	cmp	r9, r5
   4d174:	bne	4d13c <__assert_fail@plt+0x3ab48>
   4d178:	mov	r3, #0
   4d17c:	str	r3, [sp, #36]	; 0x24
   4d180:	str	r9, [sp, #88]	; 0x58
   4d184:	str	r9, [sp, #92]	; 0x5c
   4d188:	b	4c204 <__assert_fail@plt+0x39c10>
   4d18c:	mov	r0, r4
   4d190:	mov	r1, #160	; 0xa0
   4d194:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   4d198:	subs	r4, r0, #0
   4d19c:	beq	4d380 <__assert_fail@plt+0x3ad8c>
   4d1a0:	mov	r3, #160	; 0xa0
   4d1a4:	str	r4, [r6]
   4d1a8:	str	r3, [r6, #4]
   4d1ac:	b	4be90 <__assert_fail@plt+0x3989c>
   4d1b0:	mov	sl, r5
   4d1b4:	mov	r1, #1
   4d1b8:	b	4bef0 <__assert_fail@plt+0x398fc>
   4d1bc:	mov	r7, r8
   4d1c0:	mov	r9, r8
   4d1c4:	b	4c458 <__assert_fail@plt+0x39e64>
   4d1c8:	ldr	r0, [sp, #64]	; 0x40
   4d1cc:	bl	38b10 <__assert_fail@plt+0x2651c>
   4d1d0:	b	4c15c <__assert_fail@plt+0x39b68>
   4d1d4:	cmp	r9, #0
   4d1d8:	movne	r8, #1
   4d1dc:	bne	4c2fc <__assert_fail@plt+0x39d08>
   4d1e0:	ldr	r5, [r6]
   4d1e4:	mov	r2, #12
   4d1e8:	mov	r3, #0
   4d1ec:	str	r2, [sp, #36]	; 0x24
   4d1f0:	str	r3, [r4, #52]	; 0x34
   4d1f4:	b	4c104 <__assert_fail@plt+0x39b10>
   4d1f8:	mov	r0, #996	; 0x3e4
   4d1fc:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4d200:	subs	r7, r0, #0
   4d204:	beq	4d1d4 <__assert_fail@plt+0x3abe0>
   4d208:	ldr	r1, [r5, #56]	; 0x38
   4d20c:	mov	r3, sl
   4d210:	mov	r2, #1
   4d214:	mov	r0, #4
   4d218:	str	r1, [r7]
   4d21c:	str	r7, [r5, #56]	; 0x38
   4d220:	b	4c29c <__assert_fail@plt+0x39ca8>
   4d224:	mov	r2, r3
   4d228:	b	4c5b4 <__assert_fail@plt+0x39fc0>
   4d22c:	mov	r3, #0
   4d230:	str	r3, [sp, #36]	; 0x24
   4d234:	b	4c204 <__assert_fail@plt+0x39c10>
   4d238:	mov	r0, r3
   4d23c:	add	ip, ip, #1
   4d240:	add	r1, r1, #8
   4d244:	cmp	ip, r5
   4d248:	bne	4d040 <__assert_fail@plt+0x3aa4c>
   4d24c:	orr	fp, fp, r0
   4d250:	ands	fp, fp, #255	; 0xff
   4d254:	moveq	r0, fp
   4d258:	beq	4d398 <__assert_fail@plt+0x3ada4>
   4d25c:	add	ip, lr, ip, lsl #3
   4d260:	mov	r2, #7
   4d264:	b	4d27c <__assert_fail@plt+0x3ac88>
   4d268:	cmp	r3, #5
   4d26c:	strbeq	r2, [lr, #4]
   4d270:	add	lr, lr, #8
   4d274:	cmp	ip, lr
   4d278:	beq	4d398 <__assert_fail@plt+0x3ada4>
   4d27c:	ldrb	r3, [lr, #4]
   4d280:	cmp	r3, #1
   4d284:	bne	4d268 <__assert_fail@plt+0x3ac74>
   4d288:	ldrsb	r3, [lr]
   4d28c:	cmp	r3, #0
   4d290:	bge	4d270 <__assert_fail@plt+0x3ac7c>
   4d294:	ldrb	r3, [lr, #6]
   4d298:	bfc	r3, #5, #1
   4d29c:	strb	r3, [lr, #6]
   4d2a0:	b	4d270 <__assert_fail@plt+0x3ac7c>
   4d2a4:	ldrsb	r2, [r1]
   4d2a8:	cmp	r2, #0
   4d2ac:	movlt	fp, r3
   4d2b0:	b	4d23c <__assert_fail@plt+0x3ac48>
   4d2b4:	ldr	r2, [r1]
   4d2b8:	ldr	r7, [r2, #16]
   4d2bc:	cmp	r7, #0
   4d2c0:	bne	4cd58 <__assert_fail@plt+0x3a764>
   4d2c4:	ldr	r7, [r2, #20]
   4d2c8:	cmp	r7, #0
   4d2cc:	bne	4cd58 <__assert_fail@plt+0x3a764>
   4d2d0:	ldr	r7, [r2, #24]
   4d2d4:	cmp	r7, #0
   4d2d8:	bne	4cd58 <__assert_fail@plt+0x3a764>
   4d2dc:	ldr	r2, [r2, #28]
   4d2e0:	cmp	r2, #0
   4d2e4:	beq	4d23c <__assert_fail@plt+0x3ac48>
   4d2e8:	b	4cd58 <__assert_fail@plt+0x3a764>
   4d2ec:	ldr	r2, [r1]
   4d2f0:	cmp	r2, #32
   4d2f4:	beq	4d23c <__assert_fail@plt+0x3ac48>
   4d2f8:	bls	4d364 <__assert_fail@plt+0x3ad70>
   4d2fc:	cmp	r2, #64	; 0x40
   4d300:	beq	4d23c <__assert_fail@plt+0x3ac48>
   4d304:	cmp	r2, #128	; 0x80
   4d308:	beq	4d23c <__assert_fail@plt+0x3ac48>
   4d30c:	b	4cd58 <__assert_fail@plt+0x3a764>
   4d310:	mov	r3, #12
   4d314:	ldr	r4, [sp, #20]
   4d318:	str	r0, [sl]
   4d31c:	str	r0, [sl, #4]
   4d320:	b	4cfc4 <__assert_fail@plt+0x3a9d0>
   4d324:	mov	r0, #996	; 0x3e4
   4d328:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4d32c:	cmp	r0, #0
   4d330:	beq	4d1e0 <__assert_fail@plt+0x3abec>
   4d334:	ldr	ip, [r5, #56]	; 0x38
   4d338:	mov	r2, #4
   4d33c:	mov	r3, #1
   4d340:	mov	r1, #0
   4d344:	str	ip, [r0]
   4d348:	str	r0, [r5, #56]	; 0x38
   4d34c:	b	4c324 <__assert_fail@plt+0x39d30>
   4d350:	mov	r0, #12
   4d354:	b	4cf34 <__assert_fail@plt+0x3a940>
   4d358:	mov	r3, r8
   4d35c:	mov	r7, r8
   4d360:	b	4c4a0 <__assert_fail@plt+0x39eac>
   4d364:	cmp	r2, #16
   4d368:	beq	4d23c <__assert_fail@plt+0x3ac48>
   4d36c:	b	4cd58 <__assert_fail@plt+0x3a764>
   4d370:	mov	r1, r3
   4d374:	b	4c1f4 <__assert_fail@plt+0x39c00>
   4d378:	mov	r9, r5
   4d37c:	b	4d178 <__assert_fail@plt+0x3ab84>
   4d380:	mov	r0, #12
   4d384:	b	4c6b4 <__assert_fail@plt+0x3a0c0>
   4d388:	ldr	r5, [r6]
   4d38c:	str	r8, [r4, #52]	; 0x34
   4d390:	b	4c104 <__assert_fail@plt+0x39b10>
   4d394:	mov	r0, r5
   4d398:	ldrb	r3, [r4, #88]	; 0x58
   4d39c:	mov	r1, #1
   4d3a0:	ldr	r2, [r4, #76]	; 0x4c
   4d3a4:	str	r1, [r4, #92]	; 0x5c
   4d3a8:	and	r3, r3, #251	; 0xfb
   4d3ac:	cmp	r2, #0
   4d3b0:	movle	r2, r0
   4d3b4:	orrgt	r2, r0, #1
   4d3b8:	bfi	r3, r2, #1, #1
   4d3bc:	strb	r3, [r4, #88]	; 0x58
   4d3c0:	b	4cd58 <__assert_fail@plt+0x3a764>
   4d3c4:	bl	125a0 <abort@plt>
   4d3c8:	movw	r3, #32448	; 0x7ec0
   4d3cc:	movt	r3, #6
   4d3d0:	str	r4, [sp, #-8]!
   4d3d4:	ldr	r3, [r3]
   4d3d8:	str	lr, [sp, #4]
   4d3dc:	mov	lr, r2
   4d3e0:	mov	r2, r1
   4d3e4:	ldrb	ip, [lr, #28]
   4d3e8:	mov	r1, r0
   4d3ec:	mov	r0, lr
   4d3f0:	ubfx	r4, r3, #25, #1
   4d3f4:	bfi	ip, r4, #4, #1
   4d3f8:	mvn	ip, ip, lsl #25
   4d3fc:	mvn	ip, ip, lsr #25
   4d400:	strb	ip, [lr, #28]
   4d404:	bl	4be38 <__assert_fail@plt+0x39844>
   4d408:	subs	r3, r0, #0
   4d40c:	beq	4d440 <__assert_fail@plt+0x3ae4c>
   4d410:	movw	r1, #25616	; 0x6410
   4d414:	movt	r1, #5
   4d418:	ldr	r4, [sp]
   4d41c:	add	r3, r1, r3, lsl #2
   4d420:	add	r1, r1, #32
   4d424:	mov	r2, #5
   4d428:	mov	r0, #0
   4d42c:	ldr	lr, [sp, #4]
   4d430:	add	sp, sp, #8
   4d434:	ldr	r3, [r3, #416]	; 0x1a0
   4d438:	add	r1, r1, r3
   4d43c:	b	120b4 <dcgettext@plt>
   4d440:	ldr	r4, [sp]
   4d444:	add	sp, sp, #4
   4d448:	pop	{pc}		; (ldr pc, [sp], #4)
   4d44c:	movw	r3, #32448	; 0x7ec0
   4d450:	movt	r3, #6
   4d454:	ldr	r2, [r3]
   4d458:	str	r0, [r3]
   4d45c:	mov	r0, r2
   4d460:	bx	lr
   4d464:	strd	r4, [sp, #-16]!
   4d468:	mov	r2, #256	; 0x100
   4d46c:	mov	r4, r0
   4d470:	ldr	r5, [r0]
   4d474:	mov	r1, #0
   4d478:	str	r6, [sp, #8]
   4d47c:	ldr	r6, [r0, #16]
   4d480:	str	lr, [sp, #12]
   4d484:	mov	r0, r6
   4d488:	bl	12378 <memset@plt>
   4d48c:	ldr	r1, [r5, #36]	; 0x24
   4d490:	mov	r3, r6
   4d494:	mov	r0, r4
   4d498:	add	r2, r1, #12
   4d49c:	add	r1, r1, #8
   4d4a0:	bl	3f03c <__assert_fail@plt+0x2ca48>
   4d4a4:	ldr	r3, [r5, #36]	; 0x24
   4d4a8:	ldr	r0, [r5, #40]	; 0x28
   4d4ac:	cmp	r3, r0
   4d4b0:	beq	4d4cc <__assert_fail@plt+0x3aed8>
   4d4b4:	add	r2, r0, #12
   4d4b8:	add	r1, r0, #8
   4d4bc:	mov	r3, r6
   4d4c0:	mov	r0, r4
   4d4c4:	bl	3f03c <__assert_fail@plt+0x2ca48>
   4d4c8:	ldr	r0, [r5, #36]	; 0x24
   4d4cc:	ldr	r1, [r5, #44]	; 0x2c
   4d4d0:	cmp	r1, r0
   4d4d4:	beq	4d4f0 <__assert_fail@plt+0x3aefc>
   4d4d8:	add	r2, r1, #12
   4d4dc:	mov	r0, r4
   4d4e0:	mov	r3, r6
   4d4e4:	add	r1, r1, #8
   4d4e8:	bl	3f03c <__assert_fail@plt+0x2ca48>
   4d4ec:	ldr	r0, [r5, #36]	; 0x24
   4d4f0:	ldr	r1, [r5, #48]	; 0x30
   4d4f4:	cmp	r1, r0
   4d4f8:	beq	4d510 <__assert_fail@plt+0x3af1c>
   4d4fc:	add	r2, r1, #12
   4d500:	mov	r3, r6
   4d504:	add	r1, r1, #8
   4d508:	mov	r0, r4
   4d50c:	bl	3f03c <__assert_fail@plt+0x2ca48>
   4d510:	ldrb	r3, [r4, #28]
   4d514:	mov	r0, #0
   4d518:	ldr	r6, [sp, #8]
   4d51c:	orr	r3, r3, #8
   4d520:	strb	r3, [r4, #28]
   4d524:	ldrd	r4, [sp]
   4d528:	add	sp, sp, #12
   4d52c:	pop	{pc}		; (ldr pc, [sp], #4)
   4d530:	cmp	r3, r2
   4d534:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4d538:	strd	r6, [sp, #8]
   4d53c:	strd	r8, [sp, #16]
   4d540:	strd	sl, [sp, #24]
   4d544:	str	lr, [sp, #32]
   4d548:	sub	sp, sp, #52	; 0x34
   4d54c:	movle	lr, #0
   4d550:	movgt	lr, #1
   4d554:	ldr	ip, [sp, #88]	; 0x58
   4d558:	orrs	lr, lr, r3, lsr #31
   4d55c:	ldrb	lr, [sp, #100]	; 0x64
   4d560:	ldr	r8, [sp, #96]	; 0x60
   4d564:	add	r7, r3, ip
   4d568:	str	lr, [sp, #36]	; 0x24
   4d56c:	ldr	lr, [r0]
   4d570:	str	lr, [sp, #28]
   4d574:	bne	4d874 <__assert_fail@plt+0x3b280>
   4d578:	cmp	r7, r2
   4d57c:	mov	fp, r3
   4d580:	str	r2, [sp, #32]
   4d584:	mov	r4, r0
   4d588:	mov	r3, r2
   4d58c:	str	r1, [sp, #40]	; 0x28
   4d590:	bgt	4d820 <__assert_fail@plt+0x3b22c>
   4d594:	cmp	ip, #0
   4d598:	cmpge	fp, r7
   4d59c:	bgt	4d820 <__assert_fail@plt+0x3b22c>
   4d5a0:	cmp	r7, #0
   4d5a4:	blt	4d828 <__assert_fail@plt+0x3b234>
   4d5a8:	cmp	fp, r7
   4d5ac:	movgt	r2, #0
   4d5b0:	movle	r2, #1
   4d5b4:	ands	r3, r2, ip, lsr #31
   4d5b8:	bne	4d828 <__assert_fail@plt+0x3b234>
   4d5bc:	movw	r2, #9116	; 0x239c
   4d5c0:	movt	r2, #1
   4d5c4:	cmp	r2, #0
   4d5c8:	mov	r5, #1
   4d5cc:	moveq	r5, r2
   4d5d0:	movw	r2, #8180	; 0x1ff4
   4d5d4:	movt	r2, #1
   4d5d8:	mov	r0, #1
   4d5dc:	cmp	r2, #0
   4d5e0:	moveq	r0, r2
   4d5e4:	orr	r5, r5, r0
   4d5e8:	ands	r5, r5, #255	; 0xff
   4d5ec:	beq	4d600 <__assert_fail@plt+0x3b00c>
   4d5f0:	ldr	r3, [sp, #28]
   4d5f4:	mov	r5, #1
   4d5f8:	add	r0, r3, #136	; 0x88
   4d5fc:	bl	11fd0 <pthread_mutex_lock@plt>
   4d600:	ldrb	r0, [r4, #28]
   4d604:	cmp	fp, r7
   4d608:	ubfx	r3, r0, #5, #2
   4d60c:	str	r3, [sp, #44]	; 0x2c
   4d610:	bge	4d628 <__assert_fail@plt+0x3b034>
   4d614:	ldr	r2, [r4, #16]
   4d618:	cmp	r2, #0
   4d61c:	beq	4d628 <__assert_fail@plt+0x3b034>
   4d620:	tst	r0, #8
   4d624:	beq	4d7c8 <__assert_fail@plt+0x3b1d4>
   4d628:	ubfx	r2, r0, #4, #1
   4d62c:	cmp	r8, #0
   4d630:	orreq	r2, r2, #1
   4d634:	ands	r2, r2, #255	; 0xff
   4d638:	bne	4d7b4 <__assert_fail@plt+0x3b1c0>
   4d63c:	and	r0, r0, #6
   4d640:	ldr	ip, [r4, #24]
   4d644:	cmp	r0, #4
   4d648:	beq	4d884 <__assert_fail@plt+0x3b290>
   4d64c:	add	sl, ip, #1
   4d650:	mov	r6, sl
   4d654:	lsl	r0, sl, #3
   4d658:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4d65c:	subs	r9, r0, #0
   4d660:	beq	4d87c <__assert_fail@plt+0x3b288>
   4d664:	mov	r3, fp
   4d668:	mov	r0, r4
   4d66c:	str	sl, [sp, #8]
   4d670:	ldr	ip, [sp, #92]	; 0x5c
   4d674:	ldr	r2, [sp, #32]
   4d678:	ldr	r1, [sp, #40]	; 0x28
   4d67c:	stm	sp, {r7, ip}
   4d680:	ldr	ip, [sp, #44]	; 0x2c
   4d684:	str	r9, [sp, #12]
   4d688:	str	ip, [sp, #16]
   4d68c:	bl	46a48 <__assert_fail@plt+0x34454>
   4d690:	cmp	r0, #0
   4d694:	beq	4d6e4 <__assert_fail@plt+0x3b0f0>
   4d698:	cmp	r0, #1
   4d69c:	mvneq	r4, #0
   4d6a0:	beq	4d6a8 <__assert_fail@plt+0x3b0b4>
   4d6a4:	mvn	r4, #1
   4d6a8:	mov	r0, r9
   4d6ac:	bl	38b10 <__assert_fail@plt+0x2651c>
   4d6b0:	cmp	r5, #0
   4d6b4:	beq	4d6c4 <__assert_fail@plt+0x3b0d0>
   4d6b8:	ldr	r3, [sp, #28]
   4d6bc:	add	r0, r3, #136	; 0x88
   4d6c0:	bl	11ea4 <pthread_mutex_unlock@plt>
   4d6c4:	mov	r0, r4
   4d6c8:	add	sp, sp, #52	; 0x34
   4d6cc:	ldrd	r4, [sp]
   4d6d0:	ldrd	r6, [sp, #8]
   4d6d4:	ldrd	r8, [sp, #16]
   4d6d8:	ldrd	sl, [sp, #24]
   4d6dc:	add	sp, sp, #32
   4d6e0:	pop	{pc}		; (ldr pc, [sp], #4)
   4d6e4:	cmp	r8, #0
   4d6e8:	beq	4d798 <__assert_fail@plt+0x3b1a4>
   4d6ec:	ldrb	r7, [r4, #28]
   4d6f0:	add	sl, r6, #1
   4d6f4:	ubfx	r7, r7, #1, #2
   4d6f8:	cmp	r7, #0
   4d6fc:	beq	4d7d8 <__assert_fail@plt+0x3b1e4>
   4d700:	cmp	r7, #1
   4d704:	beq	4d8b0 <__assert_fail@plt+0x3b2bc>
   4d708:	ldr	fp, [r8]
   4d70c:	mov	r7, #2
   4d710:	cmp	r6, #0
   4d714:	ble	4d918 <__assert_fail@plt+0x3b324>
   4d718:	ldrd	r0, [r8, #4]
   4d71c:	add	lr, r9, r6, lsl #3
   4d720:	mov	r3, r9
   4d724:	mov	r2, r6
   4d728:	sub	r0, r0, #4
   4d72c:	sub	r1, r1, #4
   4d730:	ldr	ip, [r3]
   4d734:	add	r3, r3, #8
   4d738:	str	ip, [r0, #4]!
   4d73c:	ldr	ip, [r3, #-4]
   4d740:	cmp	r3, lr
   4d744:	str	ip, [r1, #4]!
   4d748:	bne	4d730 <__assert_fail@plt+0x3b13c>
   4d74c:	ldr	fp, [r8]
   4d750:	cmp	r2, fp
   4d754:	bcs	4d780 <__assert_fail@plt+0x3b18c>
   4d758:	ldr	ip, [r8, #4]
   4d75c:	mvn	r3, #0
   4d760:	ldr	r0, [r8, #8]
   4d764:	str	r3, [r0, r2, lsl #2]
   4d768:	add	r6, r6, #1
   4d76c:	str	r3, [ip, r2, lsl #2]
   4d770:	mov	r2, r6
   4d774:	ldr	r1, [r8]
   4d778:	cmp	r1, r6
   4d77c:	bhi	4d764 <__assert_fail@plt+0x3b170>
   4d780:	ldrb	r3, [r4, #28]
   4d784:	bfi	r3, r7, #1, #2
   4d788:	and	r2, r3, #6
   4d78c:	cmp	r2, #0
   4d790:	strb	r3, [r4, #28]
   4d794:	beq	4d6a4 <__assert_fail@plt+0x3b0b0>
   4d798:	ldr	r3, [sp, #36]	; 0x24
   4d79c:	ldr	r4, [r9]
   4d7a0:	cmp	r3, #0
   4d7a4:	beq	4d6a8 <__assert_fail@plt+0x3b0b4>
   4d7a8:	ldr	r3, [r9, #4]
   4d7ac:	sub	r4, r3, r4
   4d7b0:	b	4d6a8 <__assert_fail@plt+0x3b0b4>
   4d7b4:	mov	sl, #1
   4d7b8:	mov	r0, #8
   4d7bc:	mov	r6, sl
   4d7c0:	mov	r8, #0
   4d7c4:	b	4d658 <__assert_fail@plt+0x3b064>
   4d7c8:	mov	r0, r4
   4d7cc:	bl	4d464 <__assert_fail@plt+0x3ae70>
   4d7d0:	ldrb	r0, [r4, #28]
   4d7d4:	b	4d628 <__assert_fail@plt+0x3b034>
   4d7d8:	lsl	r7, sl, #2
   4d7dc:	mov	fp, sl
   4d7e0:	mov	r0, r7
   4d7e4:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4d7e8:	cmp	r0, #0
   4d7ec:	str	r0, [r8, #4]
   4d7f0:	beq	4d924 <__assert_fail@plt+0x3b330>
   4d7f4:	mov	r0, r7
   4d7f8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4d7fc:	cmp	r0, #0
   4d800:	mov	r7, r0
   4d804:	str	r0, [r8, #8]
   4d808:	movne	r7, #1
   4d80c:	strne	sl, [r8]
   4d810:	bne	4d710 <__assert_fail@plt+0x3b11c>
   4d814:	ldr	r0, [r8, #4]
   4d818:	bl	38b10 <__assert_fail@plt+0x2651c>
   4d81c:	b	4d780 <__assert_fail@plt+0x3b18c>
   4d820:	mov	r7, r3
   4d824:	b	4d5bc <__assert_fail@plt+0x3afc8>
   4d828:	movw	r2, #9116	; 0x239c
   4d82c:	movt	r2, #1
   4d830:	cmp	r2, #0
   4d834:	mov	r5, #1
   4d838:	moveq	r5, r2
   4d83c:	movw	r2, #8180	; 0x1ff4
   4d840:	movt	r2, #1
   4d844:	mov	r1, #1
   4d848:	cmp	r2, #0
   4d84c:	moveq	r1, r2
   4d850:	orr	r5, r5, r1
   4d854:	ands	r5, r5, #255	; 0xff
   4d858:	movne	r7, #0
   4d85c:	bne	4d5f0 <__assert_fail@plt+0x3affc>
   4d860:	ldrb	r0, [r4, #28]
   4d864:	mov	r7, r5
   4d868:	ubfx	r3, r0, #5, #2
   4d86c:	str	r3, [sp, #44]	; 0x2c
   4d870:	b	4d628 <__assert_fail@plt+0x3b034>
   4d874:	mvn	r4, #0
   4d878:	b	4d6c4 <__assert_fail@plt+0x3b0d0>
   4d87c:	mvn	r4, #1
   4d880:	b	4d6b0 <__assert_fail@plt+0x3b0bc>
   4d884:	ldr	sl, [r8]
   4d888:	cmp	sl, ip
   4d88c:	bhi	4d64c <__assert_fail@plt+0x3b058>
   4d890:	cmp	sl, #0
   4d894:	mov	r6, sl
   4d898:	bgt	4d654 <__assert_fail@plt+0x3b060>
   4d89c:	mov	sl, #1
   4d8a0:	mov	r8, r2
   4d8a4:	mov	r6, sl
   4d8a8:	mov	r0, #8
   4d8ac:	b	4d658 <__assert_fail@plt+0x3b064>
   4d8b0:	ldr	fp, [r8]
   4d8b4:	cmp	fp, sl
   4d8b8:	bcs	4d710 <__assert_fail@plt+0x3b11c>
   4d8bc:	lsl	fp, sl, #2
   4d8c0:	ldr	r0, [r8, #4]
   4d8c4:	mov	r1, fp
   4d8c8:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   4d8cc:	subs	r2, r0, #0
   4d8d0:	str	r2, [sp, #32]
   4d8d4:	beq	4d924 <__assert_fail@plt+0x3b330>
   4d8d8:	mov	r1, fp
   4d8dc:	ldr	r0, [r8, #8]
   4d8e0:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   4d8e4:	ldr	r2, [sp, #32]
   4d8e8:	subs	r1, r0, #0
   4d8ec:	movne	fp, sl
   4d8f0:	strne	sl, [r8]
   4d8f4:	strne	r1, [r8, #8]
   4d8f8:	strne	r2, [r8, #4]
   4d8fc:	bne	4d710 <__assert_fail@plt+0x3b11c>
   4d900:	mov	r0, r2
   4d904:	str	r1, [sp, #32]
   4d908:	bl	38b10 <__assert_fail@plt+0x2651c>
   4d90c:	ldr	r1, [sp, #32]
   4d910:	mov	r7, r1
   4d914:	b	4d780 <__assert_fail@plt+0x3b18c>
   4d918:	mov	r6, #0
   4d91c:	mov	r2, r6
   4d920:	b	4d750 <__assert_fail@plt+0x3b15c>
   4d924:	mov	r7, #0
   4d928:	b	4d780 <__assert_fail@plt+0x3b18c>
   4d92c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4d930:	mov	r4, r0
   4d934:	mov	r0, #0
   4d938:	tst	r2, #1
   4d93c:	movw	r5, #45820	; 0xb2fc
   4d940:	movt	r5, #3
   4d944:	movw	r3, #710	; 0x2c6
   4d948:	movt	r3, #257	; 0x101
   4d94c:	strd	r6, [sp, #8]
   4d950:	mov	r6, r2
   4d954:	str	r8, [sp, #16]
   4d958:	mov	r7, r1
   4d95c:	movne	r8, r5
   4d960:	str	lr, [sp, #20]
   4d964:	moveq	r8, r3
   4d968:	str	r0, [r4]
   4d96c:	str	r0, [r4, #4]
   4d970:	str	r0, [r4, #8]
   4d974:	mov	r0, #256	; 0x100
   4d978:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4d97c:	cmp	r0, #0
   4d980:	str	r0, [r4, #16]
   4d984:	beq	4da30 <__assert_fail@plt+0x3b43c>
   4d988:	lsl	r5, r6, #21
   4d98c:	ands	r2, r6, #4
   4d990:	and	r5, r5, #4194304	; 0x400000
   4d994:	orr	r5, r5, r8
   4d998:	bne	4da08 <__assert_fail@plt+0x3b414>
   4d99c:	ldrb	r3, [r4, #28]
   4d9a0:	ubfx	r6, r6, #3, #1
   4d9a4:	mov	r1, #0
   4d9a8:	mov	r0, r7
   4d9ac:	str	r1, [r4, #20]
   4d9b0:	bfi	r3, r2, #7, #1
   4d9b4:	bfi	r3, r6, #4, #1
   4d9b8:	strb	r3, [r4, #28]
   4d9bc:	bl	12300 <strlen@plt>
   4d9c0:	mov	r2, r0
   4d9c4:	mov	r3, r5
   4d9c8:	mov	r1, r7
   4d9cc:	mov	r0, r4
   4d9d0:	bl	4be38 <__assert_fail@plt+0x39844>
   4d9d4:	cmp	r0, #16
   4d9d8:	mov	r5, r0
   4d9dc:	beq	4da18 <__assert_fail@plt+0x3b424>
   4d9e0:	cmp	r0, #0
   4d9e4:	bne	4da1c <__assert_fail@plt+0x3b428>
   4d9e8:	mov	r0, r4
   4d9ec:	bl	4d464 <__assert_fail@plt+0x3ae70>
   4d9f0:	mov	r0, r5
   4d9f4:	ldrd	r4, [sp]
   4d9f8:	ldrd	r6, [sp, #8]
   4d9fc:	ldr	r8, [sp, #16]
   4da00:	add	sp, sp, #20
   4da04:	pop	{pc}		; (ldr pc, [sp], #4)
   4da08:	bic	r5, r5, #64	; 0x40
   4da0c:	mov	r2, #1
   4da10:	orr	r5, r5, #256	; 0x100
   4da14:	b	4d99c <__assert_fail@plt+0x3b3a8>
   4da18:	mov	r5, #8
   4da1c:	ldr	r0, [r4, #16]
   4da20:	bl	38b10 <__assert_fail@plt+0x2651c>
   4da24:	mov	r3, #0
   4da28:	str	r3, [r4, #16]
   4da2c:	b	4d9f0 <__assert_fail@plt+0x3b3fc>
   4da30:	mov	r5, #12
   4da34:	b	4d9f0 <__assert_fail@plt+0x3b3fc>
   4da38:	cmp	r0, #16
   4da3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4da40:	strd	r6, [sp, #8]
   4da44:	str	r8, [sp, #16]
   4da48:	str	lr, [sp, #20]
   4da4c:	bhi	4dac8 <__assert_fail@plt+0x3b4d4>
   4da50:	movw	r1, #25616	; 0x6410
   4da54:	movt	r1, #5
   4da58:	add	ip, r1, r0, lsl #2
   4da5c:	mov	r4, r3
   4da60:	add	r1, r1, #32
   4da64:	mov	r6, r2
   4da68:	mov	r0, #0
   4da6c:	ldr	r3, [ip, #416]	; 0x1a0
   4da70:	mov	r2, #5
   4da74:	add	r1, r1, r3
   4da78:	bl	120b4 <dcgettext@plt>
   4da7c:	mov	r7, r0
   4da80:	bl	12300 <strlen@plt>
   4da84:	cmp	r4, #0
   4da88:	add	r5, r0, #1
   4da8c:	beq	4dab0 <__assert_fail@plt+0x3b4bc>
   4da90:	cmp	r5, r4
   4da94:	mov	r1, r7
   4da98:	subhi	r2, r4, #1
   4da9c:	movhi	r3, #0
   4daa0:	movls	r2, r5
   4daa4:	mov	r0, r6
   4daa8:	strbhi	r3, [r6, r2]
   4daac:	bl	12024 <memcpy@plt>
   4dab0:	mov	r0, r5
   4dab4:	ldrd	r4, [sp]
   4dab8:	ldrd	r6, [sp, #8]
   4dabc:	ldr	r8, [sp, #16]
   4dac0:	add	sp, sp, #20
   4dac4:	pop	{pc}		; (ldr pc, [sp], #4)
   4dac8:	bl	125a0 <abort@plt>
   4dacc:	strd	r4, [sp, #-16]!
   4dad0:	mov	r4, r0
   4dad4:	ldr	r5, [r0]
   4dad8:	str	r6, [sp, #8]
   4dadc:	str	lr, [sp, #12]
   4dae0:	cmp	r5, #0
   4dae4:	beq	4db2c <__assert_fail@plt+0x3b538>
   4dae8:	movw	r2, #8180	; 0x1ff4
   4daec:	movt	r2, #1
   4daf0:	cmp	r2, #0
   4daf4:	mov	r3, #1
   4daf8:	moveq	r3, r2
   4dafc:	movw	r2, #9116	; 0x239c
   4db00:	movt	r2, #1
   4db04:	mov	r1, #1
   4db08:	cmp	r2, #0
   4db0c:	moveq	r1, r2
   4db10:	orr	r3, r3, r1
   4db14:	tst	r3, #1
   4db18:	beq	4db24 <__assert_fail@plt+0x3b530>
   4db1c:	add	r0, r5, #136	; 0x88
   4db20:	bl	11f70 <pthread_mutex_destroy@plt>
   4db24:	mov	r0, r5
   4db28:	bl	4090c <__assert_fail@plt+0x2e318>
   4db2c:	mov	r5, #0
   4db30:	ldr	r0, [r4, #16]
   4db34:	str	r5, [r4]
   4db38:	str	r5, [r4, #4]
   4db3c:	bl	38b10 <__assert_fail@plt+0x2651c>
   4db40:	str	r5, [r4, #16]
   4db44:	ldr	r0, [r4, #20]
   4db48:	bl	38b10 <__assert_fail@plt+0x2651c>
   4db4c:	ldr	r6, [sp, #8]
   4db50:	str	r5, [r4, #20]
   4db54:	ldrd	r4, [sp]
   4db58:	add	sp, sp, #12
   4db5c:	pop	{pc}		; (ldr pc, [sp], #4)
   4db60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4db64:	strd	r6, [sp, #8]
   4db68:	strd	r8, [sp, #16]
   4db6c:	strd	sl, [sp, #24]
   4db70:	str	lr, [sp, #32]
   4db74:	sub	sp, sp, #36	; 0x24
   4db78:	ldr	r6, [sp, #72]	; 0x48
   4db7c:	bics	ip, r6, #7
   4db80:	movne	r0, #2
   4db84:	bne	4dc3c <__assert_fail@plt+0x3b648>
   4db88:	ands	sl, r6, #4
   4db8c:	mov	r7, r3
   4db90:	str	r2, [sp, #28]
   4db94:	mov	r8, r1
   4db98:	mov	r5, r0
   4db9c:	bne	4dc58 <__assert_fail@plt+0x3b664>
   4dba0:	mov	r0, r1
   4dba4:	bl	12300 <strlen@plt>
   4dba8:	mov	r9, r0
   4dbac:	movw	r2, #9116	; 0x239c
   4dbb0:	movt	r2, #1
   4dbb4:	ldr	fp, [r5]
   4dbb8:	cmp	r2, #0
   4dbbc:	mov	r4, #1
   4dbc0:	moveq	r4, r2
   4dbc4:	movw	r2, #8180	; 0x1ff4
   4dbc8:	movt	r2, #1
   4dbcc:	mov	r1, #1
   4dbd0:	cmp	r2, #0
   4dbd4:	moveq	r1, r2
   4dbd8:	orr	r4, r4, r1
   4dbdc:	ands	r4, r4, #255	; 0xff
   4dbe0:	beq	4dbec <__assert_fail@plt+0x3b5f8>
   4dbe4:	add	r0, fp, #136	; 0x88
   4dbe8:	bl	11fd0 <pthread_mutex_lock@plt>
   4dbec:	ldrb	r2, [r5, #28]
   4dbf0:	tst	r2, #16
   4dbf4:	beq	4dc64 <__assert_fail@plt+0x3b670>
   4dbf8:	mov	ip, #0
   4dbfc:	mov	r0, r5
   4dc00:	str	r9, [sp]
   4dc04:	mov	r3, sl
   4dc08:	mov	r1, r8
   4dc0c:	mov	r2, r9
   4dc10:	stmib	sp, {r9, ip}
   4dc14:	str	ip, [sp, #12]
   4dc18:	str	r6, [sp, #16]
   4dc1c:	bl	46a48 <__assert_fail@plt+0x34454>
   4dc20:	mov	r5, r0
   4dc24:	cmp	r4, #0
   4dc28:	beq	4dc34 <__assert_fail@plt+0x3b640>
   4dc2c:	add	r0, fp, #136	; 0x88
   4dc30:	bl	11ea4 <pthread_mutex_unlock@plt>
   4dc34:	adds	r0, r5, #0
   4dc38:	movne	r0, #1
   4dc3c:	add	sp, sp, #36	; 0x24
   4dc40:	ldrd	r4, [sp]
   4dc44:	ldrd	r6, [sp, #8]
   4dc48:	ldrd	r8, [sp, #16]
   4dc4c:	ldrd	sl, [sp, #24]
   4dc50:	add	sp, sp, #32
   4dc54:	pop	{pc}		; (ldr pc, [sp], #4)
   4dc58:	ldr	sl, [r3]
   4dc5c:	ldr	r9, [r3, #4]
   4dc60:	b	4dbac <__assert_fail@plt+0x3b5b8>
   4dc64:	ldr	ip, [sp, #28]
   4dc68:	mov	r0, r5
   4dc6c:	mov	r3, sl
   4dc70:	mov	r1, r8
   4dc74:	mov	r2, r9
   4dc78:	str	r9, [sp]
   4dc7c:	stmib	sp, {r9, ip}
   4dc80:	str	r7, [sp, #12]
   4dc84:	str	r6, [sp, #16]
   4dc88:	bl	46a48 <__assert_fail@plt+0x34454>
   4dc8c:	mov	r5, r0
   4dc90:	b	4dc24 <__assert_fail@plt+0x3b630>
   4dc94:	cmp	r2, r3
   4dc98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4dc9c:	movge	ip, #0
   4dca0:	movlt	ip, #1
   4dca4:	strd	r6, [sp, #8]
   4dca8:	orrs	ip, ip, r3, lsr #31
   4dcac:	strd	r8, [sp, #16]
   4dcb0:	strd	sl, [sp, #24]
   4dcb4:	str	lr, [sp, #32]
   4dcb8:	sub	sp, sp, #44	; 0x2c
   4dcbc:	ldr	fp, [r0]
   4dcc0:	ldr	r8, [sp, #80]	; 0x50
   4dcc4:	bne	4df00 <__assert_fail@plt+0x3b90c>
   4dcc8:	movw	lr, #9116	; 0x239c
   4dccc:	movt	lr, #1
   4dcd0:	str	r1, [sp, #36]	; 0x24
   4dcd4:	cmp	lr, #0
   4dcd8:	mov	ip, #1
   4dcdc:	moveq	ip, lr
   4dce0:	movw	lr, #8180	; 0x1ff4
   4dce4:	movt	lr, #1
   4dce8:	mov	r6, #1
   4dcec:	cmp	lr, #0
   4dcf0:	mov	r4, r3
   4dcf4:	moveq	r6, lr
   4dcf8:	mov	r5, r0
   4dcfc:	orr	r3, ip, r6
   4dd00:	mov	r7, r2
   4dd04:	ands	r3, r3, #255	; 0xff
   4dd08:	str	r3, [sp, #28]
   4dd0c:	beq	4dd18 <__assert_fail@plt+0x3b724>
   4dd10:	add	r0, fp, #136	; 0x88
   4dd14:	bl	11fd0 <pthread_mutex_lock@plt>
   4dd18:	ldrb	r2, [r5, #28]
   4dd1c:	ubfx	r3, r2, #4, #1
   4dd20:	ubfx	r1, r2, #5, #2
   4dd24:	cmp	r8, #0
   4dd28:	orreq	r3, r3, #1
   4dd2c:	ands	r3, r3, #255	; 0xff
   4dd30:	str	r1, [sp, #32]
   4dd34:	bne	4de98 <__assert_fail@plt+0x3b8a4>
   4dd38:	and	r2, r2, #6
   4dd3c:	ldr	r1, [r5, #24]
   4dd40:	cmp	r2, #4
   4dd44:	beq	4df10 <__assert_fail@plt+0x3b91c>
   4dd48:	add	sl, r1, #1
   4dd4c:	mov	r6, sl
   4dd50:	lsl	r0, sl, #3
   4dd54:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4dd58:	subs	r9, r0, #0
   4dd5c:	beq	4df08 <__assert_fail@plt+0x3b914>
   4dd60:	ldr	ip, [sp, #32]
   4dd64:	mov	r2, r7
   4dd68:	mov	r3, r4
   4dd6c:	mov	r0, r5
   4dd70:	stm	sp, {r4, r7, sl}
   4dd74:	str	r9, [sp, #12]
   4dd78:	str	ip, [sp, #16]
   4dd7c:	ldr	r1, [sp, #36]	; 0x24
   4dd80:	bl	46a48 <__assert_fail@plt+0x34454>
   4dd84:	cmp	r0, #0
   4dd88:	beq	4ddd8 <__assert_fail@plt+0x3b7e4>
   4dd8c:	cmp	r0, #1
   4dd90:	mvneq	r4, #0
   4dd94:	beq	4dd9c <__assert_fail@plt+0x3b7a8>
   4dd98:	mvn	r4, #1
   4dd9c:	mov	r0, r9
   4dda0:	bl	38b10 <__assert_fail@plt+0x2651c>
   4dda4:	ldr	r3, [sp, #28]
   4dda8:	cmp	r3, #0
   4ddac:	beq	4ddb8 <__assert_fail@plt+0x3b7c4>
   4ddb0:	add	r0, fp, #136	; 0x88
   4ddb4:	bl	11ea4 <pthread_mutex_unlock@plt>
   4ddb8:	mov	r0, r4
   4ddbc:	add	sp, sp, #44	; 0x2c
   4ddc0:	ldrd	r4, [sp]
   4ddc4:	ldrd	r6, [sp, #8]
   4ddc8:	ldrd	r8, [sp, #16]
   4ddcc:	ldrd	sl, [sp, #24]
   4ddd0:	add	sp, sp, #32
   4ddd4:	pop	{pc}		; (ldr pc, [sp], #4)
   4ddd8:	cmp	r8, #0
   4dddc:	beq	4de8c <__assert_fail@plt+0x3b898>
   4dde0:	ldrb	r7, [r5, #28]
   4dde4:	add	sl, r6, #1
   4dde8:	ubfx	r7, r7, #1, #2
   4ddec:	cmp	r7, #0
   4ddf0:	beq	4deac <__assert_fail@plt+0x3b8b8>
   4ddf4:	cmp	r7, #1
   4ddf8:	beq	4df3c <__assert_fail@plt+0x3b948>
   4ddfc:	ldr	r3, [r8]
   4de00:	mov	r7, #2
   4de04:	cmp	r6, #0
   4de08:	ble	4dfac <__assert_fail@plt+0x3b9b8>
   4de0c:	ldrd	r0, [r8, #4]
   4de10:	add	lr, r9, r6, lsl #3
   4de14:	mov	r3, r9
   4de18:	mov	r2, r6
   4de1c:	sub	r0, r0, #4
   4de20:	sub	r1, r1, #4
   4de24:	ldr	ip, [r3]
   4de28:	add	r3, r3, #8
   4de2c:	str	ip, [r0, #4]!
   4de30:	ldr	ip, [r3, #-4]
   4de34:	cmp	r3, lr
   4de38:	str	ip, [r1, #4]!
   4de3c:	bne	4de24 <__assert_fail@plt+0x3b830>
   4de40:	ldr	r3, [r8]
   4de44:	cmp	r2, r3
   4de48:	bcs	4de74 <__assert_fail@plt+0x3b880>
   4de4c:	ldr	ip, [r8, #4]
   4de50:	mvn	r3, #0
   4de54:	ldr	r0, [r8, #8]
   4de58:	str	r3, [r0, r2, lsl #2]
   4de5c:	add	r6, r6, #1
   4de60:	str	r3, [ip, r2, lsl #2]
   4de64:	mov	r2, r6
   4de68:	ldr	r1, [r8]
   4de6c:	cmp	r1, r6
   4de70:	bhi	4de58 <__assert_fail@plt+0x3b864>
   4de74:	ldrb	r3, [r5, #28]
   4de78:	bfi	r3, r7, #1, #2
   4de7c:	and	r2, r3, #6
   4de80:	cmp	r2, #0
   4de84:	strb	r3, [r5, #28]
   4de88:	beq	4dd98 <__assert_fail@plt+0x3b7a4>
   4de8c:	ldr	r3, [r9, #4]
   4de90:	sub	r4, r3, r4
   4de94:	b	4dd9c <__assert_fail@plt+0x3b7a8>
   4de98:	mov	sl, #1
   4de9c:	mov	r0, #8
   4dea0:	mov	r6, sl
   4dea4:	mov	r8, #0
   4dea8:	b	4dd54 <__assert_fail@plt+0x3b760>
   4deac:	lsl	r7, sl, #2
   4deb0:	str	sl, [sp, #32]
   4deb4:	mov	r0, r7
   4deb8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4debc:	cmp	r0, #0
   4dec0:	str	r0, [r8, #4]
   4dec4:	ldr	r3, [sp, #32]
   4dec8:	beq	4dfb8 <__assert_fail@plt+0x3b9c4>
   4decc:	mov	r0, r7
   4ded0:	str	r3, [sp, #32]
   4ded4:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4ded8:	ldr	r3, [sp, #32]
   4dedc:	cmp	r0, #0
   4dee0:	mov	r7, r0
   4dee4:	movne	r7, #1
   4dee8:	str	r0, [r8, #8]
   4deec:	strne	r3, [r8]
   4def0:	bne	4de04 <__assert_fail@plt+0x3b810>
   4def4:	ldr	r0, [r8, #4]
   4def8:	bl	38b10 <__assert_fail@plt+0x2651c>
   4defc:	b	4de74 <__assert_fail@plt+0x3b880>
   4df00:	mvn	r4, #0
   4df04:	b	4ddb8 <__assert_fail@plt+0x3b7c4>
   4df08:	mvn	r4, #1
   4df0c:	b	4dda4 <__assert_fail@plt+0x3b7b0>
   4df10:	ldr	sl, [r8]
   4df14:	cmp	sl, r1
   4df18:	bhi	4dd48 <__assert_fail@plt+0x3b754>
   4df1c:	cmp	sl, #0
   4df20:	mov	r6, sl
   4df24:	bgt	4dd50 <__assert_fail@plt+0x3b75c>
   4df28:	mov	sl, #1
   4df2c:	mov	r8, r3
   4df30:	mov	r6, sl
   4df34:	mov	r0, #8
   4df38:	b	4dd54 <__assert_fail@plt+0x3b760>
   4df3c:	ldr	r3, [r8]
   4df40:	cmp	r3, sl
   4df44:	bcs	4de04 <__assert_fail@plt+0x3b810>
   4df48:	lsl	r3, sl, #2
   4df4c:	ldr	r0, [r8, #4]
   4df50:	mov	r1, r3
   4df54:	str	r3, [sp, #36]	; 0x24
   4df58:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   4df5c:	subs	r2, r0, #0
   4df60:	str	r2, [sp, #32]
   4df64:	beq	4dfb8 <__assert_fail@plt+0x3b9c4>
   4df68:	ldr	r3, [sp, #36]	; 0x24
   4df6c:	ldr	r0, [r8, #8]
   4df70:	mov	r1, r3
   4df74:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   4df78:	ldr	r2, [sp, #32]
   4df7c:	subs	r1, r0, #0
   4df80:	movne	r3, sl
   4df84:	strne	sl, [r8]
   4df88:	strne	r1, [r8, #8]
   4df8c:	strne	r2, [r8, #4]
   4df90:	bne	4de04 <__assert_fail@plt+0x3b810>
   4df94:	mov	r0, r2
   4df98:	str	r1, [sp, #32]
   4df9c:	bl	38b10 <__assert_fail@plt+0x2651c>
   4dfa0:	ldr	r1, [sp, #32]
   4dfa4:	mov	r7, r1
   4dfa8:	b	4de74 <__assert_fail@plt+0x3b880>
   4dfac:	mov	r6, #0
   4dfb0:	mov	r2, r6
   4dfb4:	b	4de44 <__assert_fail@plt+0x3b850>
   4dfb8:	mov	r7, #0
   4dfbc:	b	4de74 <__assert_fail@plt+0x3b880>
   4dfc0:	str	r4, [sp, #-8]!
   4dfc4:	mov	r4, #0
   4dfc8:	str	lr, [sp, #4]
   4dfcc:	sub	sp, sp, #16
   4dfd0:	ldr	lr, [sp, #24]
   4dfd4:	ldr	ip, [sp, #28]
   4dfd8:	str	lr, [sp]
   4dfdc:	str	r4, [sp, #12]
   4dfe0:	stmib	sp, {r2, ip}
   4dfe4:	bl	4d530 <__assert_fail@plt+0x3af3c>
   4dfe8:	add	sp, sp, #16
   4dfec:	ldr	r4, [sp]
   4dff0:	add	sp, sp, #4
   4dff4:	pop	{pc}		; (ldr pc, [sp], #4)
   4dff8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   4dffc:	strd	r6, [sp, #8]
   4e000:	mov	r7, r3
   4e004:	strd	r8, [sp, #16]
   4e008:	str	sl, [sp, #24]
   4e00c:	str	lr, [sp, #28]
   4e010:	sub	sp, sp, #24
   4e014:	ldr	r5, [sp, #56]	; 0x38
   4e018:	ldr	r6, [sp, #68]	; 0x44
   4e01c:	orr	r3, r5, r2
   4e020:	orrs	r3, r3, r6
   4e024:	bmi	4e0e0 <__assert_fail@plt+0x3baec>
   4e028:	adds	r9, r2, r5
   4e02c:	mov	r4, r2
   4e030:	bvs	4e0e0 <__assert_fail@plt+0x3baec>
   4e034:	cmp	r5, #0
   4e038:	mov	sl, r0
   4e03c:	beq	4e0e8 <__assert_fail@plt+0x3baf4>
   4e040:	cmp	r2, #0
   4e044:	str	r1, [sp, #20]
   4e048:	moveq	r8, r2
   4e04c:	bne	4e0ac <__assert_fail@plt+0x3bab8>
   4e050:	ldr	r0, [sp, #64]	; 0x40
   4e054:	mov	r3, #1
   4e058:	mov	ip, #0
   4e05c:	mov	r2, r9
   4e060:	mov	r1, r7
   4e064:	str	ip, [sp]
   4e068:	str	r6, [sp, #4]
   4e06c:	str	r0, [sp, #8]
   4e070:	mov	r0, sl
   4e074:	str	r3, [sp, #12]
   4e078:	ldr	r3, [sp, #60]	; 0x3c
   4e07c:	bl	4d530 <__assert_fail@plt+0x3af3c>
   4e080:	mov	r4, r0
   4e084:	mov	r0, r8
   4e088:	bl	38b10 <__assert_fail@plt+0x2651c>
   4e08c:	mov	r0, r4
   4e090:	add	sp, sp, #24
   4e094:	ldrd	r4, [sp]
   4e098:	ldrd	r6, [sp, #8]
   4e09c:	ldrd	r8, [sp, #16]
   4e0a0:	ldr	sl, [sp, #24]
   4e0a4:	add	sp, sp, #28
   4e0a8:	pop	{pc}		; (ldr pc, [sp], #4)
   4e0ac:	mov	r0, r9
   4e0b0:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4e0b4:	subs	r8, r0, #0
   4e0b8:	beq	4e0e0 <__assert_fail@plt+0x3baec>
   4e0bc:	mov	r2, r4
   4e0c0:	ldr	r1, [sp, #20]
   4e0c4:	bl	12024 <memcpy@plt>
   4e0c8:	mov	r1, r7
   4e0cc:	mov	r2, r5
   4e0d0:	add	r0, r8, r4
   4e0d4:	mov	r7, r8
   4e0d8:	bl	12024 <memcpy@plt>
   4e0dc:	b	4e050 <__assert_fail@plt+0x3ba5c>
   4e0e0:	mvn	r4, #1
   4e0e4:	b	4e08c <__assert_fail@plt+0x3ba98>
   4e0e8:	mov	r7, r1
   4e0ec:	mov	r8, r5
   4e0f0:	b	4e050 <__assert_fail@plt+0x3ba5c>
   4e0f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   4e0f8:	strd	r6, [sp, #8]
   4e0fc:	mov	r7, r3
   4e100:	strd	r8, [sp, #16]
   4e104:	str	sl, [sp, #24]
   4e108:	str	lr, [sp, #28]
   4e10c:	sub	sp, sp, #24
   4e110:	ldr	r5, [sp, #56]	; 0x38
   4e114:	ldr	r6, [sp, #72]	; 0x48
   4e118:	orr	r3, r5, r2
   4e11c:	orrs	r3, r3, r6
   4e120:	bmi	4e1d8 <__assert_fail@plt+0x3bbe4>
   4e124:	adds	r9, r2, r5
   4e128:	mov	r4, r2
   4e12c:	bvs	4e1d8 <__assert_fail@plt+0x3bbe4>
   4e130:	cmp	r5, #0
   4e134:	mov	sl, r0
   4e138:	beq	4e1e0 <__assert_fail@plt+0x3bbec>
   4e13c:	cmp	r2, #0
   4e140:	str	r1, [sp, #20]
   4e144:	moveq	r8, r2
   4e148:	bne	4e1a4 <__assert_fail@plt+0x3bbb0>
   4e14c:	ldr	r3, [sp, #64]	; 0x40
   4e150:	mov	ip, #0
   4e154:	mov	r2, r9
   4e158:	mov	r1, r7
   4e15c:	mov	r0, sl
   4e160:	stm	sp, {r3, r6}
   4e164:	ldr	r3, [sp, #68]	; 0x44
   4e168:	str	ip, [sp, #12]
   4e16c:	str	r3, [sp, #8]
   4e170:	ldr	r3, [sp, #60]	; 0x3c
   4e174:	bl	4d530 <__assert_fail@plt+0x3af3c>
   4e178:	mov	r4, r0
   4e17c:	mov	r0, r8
   4e180:	bl	38b10 <__assert_fail@plt+0x2651c>
   4e184:	mov	r0, r4
   4e188:	add	sp, sp, #24
   4e18c:	ldrd	r4, [sp]
   4e190:	ldrd	r6, [sp, #8]
   4e194:	ldrd	r8, [sp, #16]
   4e198:	ldr	sl, [sp, #24]
   4e19c:	add	sp, sp, #28
   4e1a0:	pop	{pc}		; (ldr pc, [sp], #4)
   4e1a4:	mov	r0, r9
   4e1a8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4e1ac:	subs	r8, r0, #0
   4e1b0:	beq	4e1d8 <__assert_fail@plt+0x3bbe4>
   4e1b4:	mov	r2, r4
   4e1b8:	ldr	r1, [sp, #20]
   4e1bc:	bl	12024 <memcpy@plt>
   4e1c0:	mov	r1, r7
   4e1c4:	mov	r2, r5
   4e1c8:	add	r0, r8, r4
   4e1cc:	mov	r7, r8
   4e1d0:	bl	12024 <memcpy@plt>
   4e1d4:	b	4e14c <__assert_fail@plt+0x3bb58>
   4e1d8:	mvn	r4, #1
   4e1dc:	b	4e184 <__assert_fail@plt+0x3bb90>
   4e1e0:	mov	r7, r1
   4e1e4:	mov	r8, r5
   4e1e8:	b	4e14c <__assert_fail@plt+0x3bb58>
   4e1ec:	cmp	r2, #0
   4e1f0:	beq	4e218 <__assert_fail@plt+0x3bc24>
   4e1f4:	ldrb	ip, [r0, #28]
   4e1f8:	push	{lr}		; (str lr, [sp, #-4]!)
   4e1fc:	mov	lr, #1
   4e200:	bfi	ip, lr, #1, #2
   4e204:	strb	ip, [r0, #28]
   4e208:	strd	r2, [r1]
   4e20c:	ldr	r3, [sp, #4]
   4e210:	str	r3, [r1, #8]
   4e214:	pop	{pc}		; (ldr pc, [sp], #4)
   4e218:	ldrb	r3, [r0, #28]
   4e21c:	bfi	r3, r2, #1, #2
   4e220:	strb	r3, [r0, #28]
   4e224:	str	r2, [r1]
   4e228:	str	r2, [r1, #4]
   4e22c:	str	r2, [r1, #8]
   4e230:	bx	lr
   4e234:	cmp	r1, #1
   4e238:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4e23c:	strd	r6, [sp, #8]
   4e240:	str	r8, [sp, #16]
   4e244:	str	lr, [sp, #20]
   4e248:	bls	4e36c <__assert_fail@plt+0x3bd78>
   4e24c:	mov	r8, #1
   4e250:	mov	r4, #0
   4e254:	mov	lr, r8
   4e258:	mov	r3, r8
   4e25c:	mvn	r5, #0
   4e260:	b	4e27c <__assert_fail@plt+0x3bc88>
   4e264:	sub	r8, r3, r5
   4e268:	mov	r4, r3
   4e26c:	mov	lr, #1
   4e270:	add	r3, r4, lr
   4e274:	cmp	r1, r3
   4e278:	bls	4e2b0 <__assert_fail@plt+0x3bcbc>
   4e27c:	add	ip, r0, r5
   4e280:	ldrb	r6, [r0, r3]
   4e284:	ldrb	ip, [ip, lr]
   4e288:	cmp	r6, ip
   4e28c:	bcc	4e264 <__assert_fail@plt+0x3bc70>
   4e290:	beq	4e344 <__assert_fail@plt+0x3bd50>
   4e294:	mov	r8, #1
   4e298:	mov	r5, r4
   4e29c:	mov	lr, r8
   4e2a0:	add	r4, r4, r8
   4e2a4:	add	r3, r4, lr
   4e2a8:	cmp	r1, r3
   4e2ac:	bhi	4e27c <__assert_fail@plt+0x3bc88>
   4e2b0:	mov	r7, #1
   4e2b4:	mov	r4, #0
   4e2b8:	str	r8, [r2]
   4e2bc:	mov	lr, r7
   4e2c0:	mov	r3, r7
   4e2c4:	mvn	r6, #0
   4e2c8:	b	4e2e4 <__assert_fail@plt+0x3bcf0>
   4e2cc:	sub	r7, r3, r6
   4e2d0:	mov	r4, r3
   4e2d4:	mov	lr, #1
   4e2d8:	add	r3, r4, lr
   4e2dc:	cmp	r1, r3
   4e2e0:	bls	4e318 <__assert_fail@plt+0x3bd24>
   4e2e4:	add	ip, r0, r6
   4e2e8:	ldrb	r8, [r0, r3]
   4e2ec:	ldrb	ip, [ip, lr]
   4e2f0:	cmp	r8, ip
   4e2f4:	bhi	4e2cc <__assert_fail@plt+0x3bcd8>
   4e2f8:	beq	4e358 <__assert_fail@plt+0x3bd64>
   4e2fc:	mov	r7, #1
   4e300:	mov	r6, r4
   4e304:	mov	lr, r7
   4e308:	add	r4, r4, r7
   4e30c:	add	r3, r4, lr
   4e310:	cmp	r1, r3
   4e314:	bhi	4e2e4 <__assert_fail@plt+0x3bcf0>
   4e318:	add	r6, r6, #1
   4e31c:	add	r0, r5, #1
   4e320:	cmp	r6, r0
   4e324:	bcc	4e330 <__assert_fail@plt+0x3bd3c>
   4e328:	mov	r0, r6
   4e32c:	str	r7, [r2]
   4e330:	ldrd	r4, [sp]
   4e334:	ldrd	r6, [sp, #8]
   4e338:	ldr	r8, [sp, #16]
   4e33c:	add	sp, sp, #20
   4e340:	pop	{pc}		; (ldr pc, [sp], #4)
   4e344:	cmp	lr, r8
   4e348:	addeq	r4, r4, lr
   4e34c:	addne	lr, lr, #1
   4e350:	moveq	lr, #1
   4e354:	b	4e270 <__assert_fail@plt+0x3bc7c>
   4e358:	cmp	lr, r7
   4e35c:	addeq	r4, r4, lr
   4e360:	addne	lr, lr, #1
   4e364:	moveq	lr, #1
   4e368:	b	4e2d8 <__assert_fail@plt+0x3bce4>
   4e36c:	mov	r7, #1
   4e370:	mov	r6, #0
   4e374:	b	4e328 <__assert_fail@plt+0x3bd34>
   4e378:	cmp	r3, #2
   4e37c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4e380:	mov	r4, r3
   4e384:	strd	r6, [sp, #8]
   4e388:	mov	r5, r0
   4e38c:	strd	r8, [sp, #16]
   4e390:	strd	sl, [sp, #24]
   4e394:	mov	fp, r1
   4e398:	mov	sl, r2
   4e39c:	str	lr, [sp, #32]
   4e3a0:	sub	sp, sp, #1056	; 0x420
   4e3a4:	sub	sp, sp, #12
   4e3a8:	bls	4e798 <__assert_fail@plt+0x3c1a4>
   4e3ac:	add	r6, sp, #40	; 0x28
   4e3b0:	mov	r1, r3
   4e3b4:	sub	r2, r6, #4
   4e3b8:	mov	r0, sl
   4e3bc:	bl	4e234 <__assert_fail@plt+0x3bc40>
   4e3c0:	ldr	r3, [sp, #36]	; 0x24
   4e3c4:	str	r3, [sp, #4]
   4e3c8:	str	r0, [sp, #8]
   4e3cc:	mov	r3, r6
   4e3d0:	add	r2, sp, #1056	; 0x420
   4e3d4:	add	r3, r3, #8
   4e3d8:	str	r4, [r3, #-8]
   4e3dc:	add	r2, r2, #8
   4e3e0:	str	r4, [r3, #-4]
   4e3e4:	cmp	r3, r2
   4e3e8:	bne	4e3d0 <__assert_fail@plt+0x3bddc>
   4e3ec:	ldr	r3, [sp, #4]
   4e3f0:	cmp	r4, #0
   4e3f4:	add	r1, sl, r3
   4e3f8:	beq	4e5ac <__assert_fail@plt+0x3bfb8>
   4e3fc:	sub	r3, r4, #1
   4e400:	sub	r2, sl, #1
   4e404:	add	ip, sl, r3
   4e408:	str	r3, [sp]
   4e40c:	ldrb	r0, [r2, #1]!
   4e410:	add	lr, sp, #1056	; 0x420
   4e414:	add	lr, lr, #8
   4e418:	mvn	r3, r2
   4e41c:	add	r0, lr, r0, lsl #2
   4e420:	cmp	ip, r2
   4e424:	add	r3, r3, r4
   4e428:	add	r3, sl, r3
   4e42c:	str	r3, [r0, #-1024]	; 0xfffffc00
   4e430:	bne	4e40c <__assert_fail@plt+0x3be18>
   4e434:	mov	r0, sl
   4e438:	ldr	r2, [sp, #8]
   4e43c:	bl	12084 <memcmp@plt>
   4e440:	cmp	r0, #0
   4e444:	beq	4e5f8 <__assert_fail@plt+0x3c004>
   4e448:	ldr	r2, [sp, #8]
   4e44c:	sub	r8, sl, #1
   4e450:	mov	r7, #0
   4e454:	rsb	r9, sl, #1
   4e458:	sub	r3, r4, r2
   4e45c:	sub	r1, r2, #1
   4e460:	cmp	r3, r2
   4e464:	movcc	r3, r2
   4e468:	str	r1, [sp, #16]
   4e46c:	add	r1, sl, r1
   4e470:	add	r3, r3, #1
   4e474:	str	r1, [sp, #12]
   4e478:	str	r3, [sp, #20]
   4e47c:	ldr	r3, [sp]
   4e480:	add	r8, r8, r3
   4e484:	mov	r3, r2
   4e488:	add	r2, sl, r2
   4e48c:	str	r2, [sp, #4]
   4e490:	rsb	r2, r3, #1
   4e494:	str	r2, [sp, #8]
   4e498:	mov	r2, fp
   4e49c:	mov	fp, r3
   4e4a0:	b	4e4a8 <__assert_fail@plt+0x3beb4>
   4e4a4:	mov	r2, r6
   4e4a8:	add	r6, r7, r4
   4e4ac:	add	r0, r5, r2
   4e4b0:	mov	r1, #0
   4e4b4:	sub	r2, r6, r2
   4e4b8:	bl	123d8 <memchr@plt>
   4e4bc:	adds	r2, r6, #0
   4e4c0:	movne	r2, #1
   4e4c4:	cmp	r0, #0
   4e4c8:	moveq	r0, r2
   4e4cc:	movne	r0, #0
   4e4d0:	cmp	r0, #0
   4e4d4:	beq	4e5c8 <__assert_fail@plt+0x3bfd4>
   4e4d8:	add	r2, r5, r6
   4e4dc:	add	r3, sp, #1056	; 0x420
   4e4e0:	ldrb	r2, [r2, #-1]
   4e4e4:	add	r3, r3, #8
   4e4e8:	add	r2, r3, r2, lsl #2
   4e4ec:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   4e4f0:	cmp	r2, #0
   4e4f4:	addne	r7, r7, r2
   4e4f8:	bne	4e4a4 <__assert_fail@plt+0x3beb0>
   4e4fc:	ldr	r3, [sp]
   4e500:	cmp	fp, r3
   4e504:	bcs	4e54c <__assert_fail@plt+0x3bf58>
   4e508:	ldr	r3, [sp, #4]
   4e50c:	add	r2, r7, fp
   4e510:	add	r1, r5, r2
   4e514:	ldrb	r2, [r5, r2]
   4e518:	ldrb	r0, [r3]
   4e51c:	cmp	r2, r0
   4e520:	movne	lr, fp
   4e524:	bne	4e59c <__assert_fail@plt+0x3bfa8>
   4e528:	mov	r2, r3
   4e52c:	b	4e540 <__assert_fail@plt+0x3bf4c>
   4e530:	ldrb	r0, [r2, #1]!
   4e534:	ldrb	r3, [r1, #1]!
   4e538:	cmp	r0, r3
   4e53c:	bne	4e59c <__assert_fail@plt+0x3bfa8>
   4e540:	cmp	r8, r2
   4e544:	add	lr, r9, r2
   4e548:	bne	4e530 <__assert_fail@plt+0x3bf3c>
   4e54c:	ldr	r3, [sp, #16]
   4e550:	cmn	r3, #1
   4e554:	beq	4e594 <__assert_fail@plt+0x3bfa0>
   4e558:	add	r2, r7, r3
   4e55c:	ldr	r3, [sp, #12]
   4e560:	add	r1, r5, r2
   4e564:	ldrb	r2, [r5, r2]
   4e568:	ldrb	r0, [r3]
   4e56c:	cmp	r2, r0
   4e570:	moveq	r2, r3
   4e574:	beq	4e58c <__assert_fail@plt+0x3bf98>
   4e578:	b	4e5ec <__assert_fail@plt+0x3bff8>
   4e57c:	ldrb	r0, [r2, #-1]!
   4e580:	ldrb	r3, [r1, #-1]!
   4e584:	cmp	r0, r3
   4e588:	bne	4e5ec <__assert_fail@plt+0x3bff8>
   4e58c:	cmp	sl, r2
   4e590:	bne	4e57c <__assert_fail@plt+0x3bf88>
   4e594:	add	r0, r5, r7
   4e598:	b	4e5cc <__assert_fail@plt+0x3bfd8>
   4e59c:	ldr	r3, [sp, #8]
   4e5a0:	add	r7, r3, r7
   4e5a4:	add	r7, lr, r7
   4e5a8:	b	4e4a4 <__assert_fail@plt+0x3beb0>
   4e5ac:	mov	r0, sl
   4e5b0:	ldr	r2, [sp, #8]
   4e5b4:	bl	12084 <memcmp@plt>
   4e5b8:	cmp	r0, #0
   4e5bc:	mvnne	r3, #0
   4e5c0:	strne	r3, [sp]
   4e5c4:	bne	4e448 <__assert_fail@plt+0x3be54>
   4e5c8:	mov	r0, #0
   4e5cc:	add	sp, sp, #1056	; 0x420
   4e5d0:	add	sp, sp, #12
   4e5d4:	ldrd	r4, [sp]
   4e5d8:	ldrd	r6, [sp, #8]
   4e5dc:	ldrd	r8, [sp, #16]
   4e5e0:	ldrd	sl, [sp, #24]
   4e5e4:	add	sp, sp, #32
   4e5e8:	pop	{pc}		; (ldr pc, [sp], #4)
   4e5ec:	ldr	r3, [sp, #20]
   4e5f0:	add	r7, r7, r3
   4e5f4:	b	4e4a4 <__assert_fail@plt+0x3beb0>
   4e5f8:	ldr	r2, [sp, #8]
   4e5fc:	sub	r8, r4, #2
   4e600:	rsb	r9, sl, #1
   4e604:	add	r8, sl, r8
   4e608:	mov	r7, r0
   4e60c:	str	sl, [sp, #12]
   4e610:	sub	r3, r2, #1
   4e614:	str	r3, [sp, #28]
   4e618:	add	r3, sl, r3
   4e61c:	mov	sl, r0
   4e620:	str	r3, [sp, #24]
   4e624:	ldr	r3, [sp, #4]
   4e628:	sub	r3, r4, r3
   4e62c:	str	r3, [sp, #20]
   4e630:	rsb	r3, r2, #1
   4e634:	mov	r2, fp
   4e638:	str	r3, [sp, #16]
   4e63c:	b	4e65c <__assert_fail@plt+0x3c068>
   4e640:	ldr	r2, [sp, #4]
   4e644:	cmp	sl, #0
   4e648:	cmpne	r3, r2
   4e64c:	mov	sl, #0
   4e650:	ldrcc	r3, [sp, #20]
   4e654:	add	r7, r7, r3
   4e658:	mov	r2, r6
   4e65c:	add	r6, r7, r4
   4e660:	add	r0, r5, r2
   4e664:	mov	r1, #0
   4e668:	sub	r2, r6, r2
   4e66c:	bl	123d8 <memchr@plt>
   4e670:	adds	r3, r6, #0
   4e674:	movne	r3, #1
   4e678:	cmp	r0, #0
   4e67c:	moveq	r0, r3
   4e680:	movne	r0, #0
   4e684:	cmp	r0, #0
   4e688:	beq	4e5c8 <__assert_fail@plt+0x3bfd4>
   4e68c:	add	r3, r5, r6
   4e690:	add	r2, sp, #1056	; 0x420
   4e694:	ldrb	r3, [r3, #-1]
   4e698:	add	r2, r2, #8
   4e69c:	add	r3, r2, r3, lsl #2
   4e6a0:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   4e6a4:	cmp	r3, #0
   4e6a8:	bne	4e640 <__assert_fail@plt+0x3c04c>
   4e6ac:	ldr	r3, [sp, #8]
   4e6b0:	cmp	sl, r3
   4e6b4:	movcc	r0, r3
   4e6b8:	ldr	r3, [sp]
   4e6bc:	movcs	r0, sl
   4e6c0:	cmp	r0, r3
   4e6c4:	bcs	4e708 <__assert_fail@plt+0x3c114>
   4e6c8:	ldr	r3, [sp, #12]
   4e6cc:	add	r1, r7, r0
   4e6d0:	add	r2, r5, r1
   4e6d4:	ldrb	r1, [r5, r1]
   4e6d8:	ldrb	ip, [r3, r0]
   4e6dc:	add	r3, r3, r0
   4e6e0:	cmp	ip, r1
   4e6e4:	beq	4e6fc <__assert_fail@plt+0x3c108>
   4e6e8:	b	4e784 <__assert_fail@plt+0x3c190>
   4e6ec:	ldrb	ip, [r3, #1]!
   4e6f0:	ldrb	r1, [r2, #1]!
   4e6f4:	cmp	ip, r1
   4e6f8:	bne	4e784 <__assert_fail@plt+0x3c190>
   4e6fc:	cmp	r8, r3
   4e700:	add	r0, r9, r3
   4e704:	bne	4e6ec <__assert_fail@plt+0x3c0f8>
   4e708:	ldr	r3, [sp, #8]
   4e70c:	cmp	sl, r3
   4e710:	bcs	4e7b4 <__assert_fail@plt+0x3c1c0>
   4e714:	ldr	r3, [sp, #28]
   4e718:	add	r2, r7, r3
   4e71c:	ldr	r3, [sp, #24]
   4e720:	ldrb	r1, [r3]
   4e724:	add	r3, r5, r2
   4e728:	ldrb	r2, [r5, r2]
   4e72c:	cmp	r1, r2
   4e730:	ldrne	lr, [sp, #8]
   4e734:	bne	4e768 <__assert_fail@plt+0x3c174>
   4e738:	add	ip, r7, sl
   4e73c:	add	fp, r5, r7
   4e740:	add	ip, ip, r5
   4e744:	ldr	r2, [sp, #24]
   4e748:	b	4e75c <__assert_fail@plt+0x3c168>
   4e74c:	ldrb	r0, [r2, #-1]!
   4e750:	ldrb	r1, [r3, #-1]!
   4e754:	cmp	r0, r1
   4e758:	bne	4e768 <__assert_fail@plt+0x3c174>
   4e75c:	cmp	ip, r3
   4e760:	sub	lr, r3, fp
   4e764:	bne	4e74c <__assert_fail@plt+0x3c158>
   4e768:	add	sl, sl, #1
   4e76c:	cmp	sl, lr
   4e770:	bhi	4e594 <__assert_fail@plt+0x3bfa0>
   4e774:	ldr	r3, [sp, #4]
   4e778:	ldr	sl, [sp, #20]
   4e77c:	add	r7, r7, r3
   4e780:	b	4e658 <__assert_fail@plt+0x3c064>
   4e784:	ldr	r3, [sp, #16]
   4e788:	mov	sl, #0
   4e78c:	add	r7, r3, r7
   4e790:	add	r7, r0, r7
   4e794:	b	4e658 <__assert_fail@plt+0x3c064>
   4e798:	mov	r3, #1
   4e79c:	sub	r2, r4, #1
   4e7a0:	add	r6, sp, #40	; 0x28
   4e7a4:	str	r3, [sp, #4]
   4e7a8:	str	r2, [sp, #8]
   4e7ac:	str	r3, [sp, #36]	; 0x24
   4e7b0:	b	4e3cc <__assert_fail@plt+0x3bdd8>
   4e7b4:	mov	lr, r3
   4e7b8:	b	4e768 <__assert_fail@plt+0x3c174>
   4e7bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4e7c0:	strd	r6, [sp, #8]
   4e7c4:	strd	r8, [sp, #16]
   4e7c8:	strd	sl, [sp, #24]
   4e7cc:	str	lr, [sp, #32]
   4e7d0:	sub	sp, sp, #44	; 0x2c
   4e7d4:	ldrb	r4, [r0]
   4e7d8:	ldrb	r3, [r1]
   4e7dc:	cmp	r4, #0
   4e7e0:	beq	4eb94 <__assert_fail@plt+0x3c5a0>
   4e7e4:	cmp	r3, #0
   4e7e8:	beq	4e8b4 <__assert_fail@plt+0x3c2c0>
   4e7ec:	mov	r8, r0
   4e7f0:	add	r2, r1, #1
   4e7f4:	mov	ip, r3
   4e7f8:	mov	lr, #1
   4e7fc:	b	4e808 <__assert_fail@plt+0x3c214>
   4e800:	cmp	ip, #0
   4e804:	beq	4e830 <__assert_fail@plt+0x3c23c>
   4e808:	cmp	ip, r4
   4e80c:	movne	lr, #0
   4e810:	andeq	lr, lr, #1
   4e814:	ldrb	r4, [r8, #1]!
   4e818:	mov	r5, r2
   4e81c:	ldrb	ip, [r2], #1
   4e820:	cmp	r4, #0
   4e824:	bne	4e800 <__assert_fail@plt+0x3c20c>
   4e828:	cmp	ip, #0
   4e82c:	bne	4e894 <__assert_fail@plt+0x3c2a0>
   4e830:	cmp	lr, #0
   4e834:	bne	4e8b4 <__assert_fail@plt+0x3c2c0>
   4e838:	mov	r7, r1
   4e83c:	mov	r6, r0
   4e840:	mov	r1, r3
   4e844:	add	r0, r0, #1
   4e848:	bl	1230c <strchr@plt>
   4e84c:	subs	r4, r0, #0
   4e850:	sub	r7, r5, r7
   4e854:	beq	4e894 <__assert_fail@plt+0x3c2a0>
   4e858:	cmp	r7, #1
   4e85c:	beq	4e894 <__assert_fail@plt+0x3c2a0>
   4e860:	add	r6, r6, r7
   4e864:	sub	r5, r5, r7
   4e868:	cmp	r6, r4
   4e86c:	subcs	r6, r6, r4
   4e870:	movcc	r6, #1
   4e874:	cmp	r7, #31
   4e878:	bls	4e8bc <__assert_fail@plt+0x3c2c8>
   4e87c:	mov	r0, r4
   4e880:	mov	r3, r7
   4e884:	mov	r2, r5
   4e888:	mov	r1, r6
   4e88c:	bl	4e378 <__assert_fail@plt+0x3bd84>
   4e890:	mov	r4, r0
   4e894:	mov	r0, r4
   4e898:	add	sp, sp, #44	; 0x2c
   4e89c:	ldrd	r4, [sp]
   4e8a0:	ldrd	r6, [sp, #8]
   4e8a4:	ldrd	r8, [sp, #16]
   4e8a8:	ldrd	sl, [sp, #24]
   4e8ac:	add	sp, sp, #32
   4e8b0:	pop	{pc}		; (ldr pc, [sp], #4)
   4e8b4:	mov	r4, r0
   4e8b8:	b	4e894 <__assert_fail@plt+0x3c2a0>
   4e8bc:	cmp	r7, #2
   4e8c0:	bls	4eba4 <__assert_fail@plt+0x3c5b0>
   4e8c4:	add	r2, sp, #36	; 0x24
   4e8c8:	mov	r1, r7
   4e8cc:	mov	r0, r5
   4e8d0:	bl	4e234 <__assert_fail@plt+0x3bc40>
   4e8d4:	ldr	r3, [sp, #36]	; 0x24
   4e8d8:	mov	r8, r0
   4e8dc:	str	r3, [sp, #16]
   4e8e0:	mov	r2, r8
   4e8e4:	add	r1, r5, r3
   4e8e8:	mov	r0, r5
   4e8ec:	bl	12084 <memcmp@plt>
   4e8f0:	cmp	r0, #0
   4e8f4:	bne	4ea58 <__assert_fail@plt+0x3c464>
   4e8f8:	sub	r2, r8, #1
   4e8fc:	mov	r3, r8
   4e900:	str	r7, [sp, #4]
   4e904:	sub	r8, r7, #1
   4e908:	rsb	r9, r5, #1
   4e90c:	str	r5, [sp, #8]
   4e910:	str	r2, [sp, #20]
   4e914:	add	r2, r5, r2
   4e918:	add	r8, r8, r5
   4e91c:	mov	sl, r0
   4e920:	mov	r5, r0
   4e924:	str	r2, [sp, #28]
   4e928:	ldr	r2, [sp, #16]
   4e92c:	sub	r2, r7, r2
   4e930:	mov	r7, r3
   4e934:	str	r2, [sp, #24]
   4e938:	rsb	r2, r3, #1
   4e93c:	str	r2, [sp, #12]
   4e940:	mov	r2, r6
   4e944:	ldr	r3, [sp, #4]
   4e948:	add	r0, r4, r2
   4e94c:	mov	r1, #0
   4e950:	add	fp, r3, sl
   4e954:	sub	r2, fp, r2
   4e958:	bl	123d8 <memchr@plt>
   4e95c:	clz	r0, r0
   4e960:	cmp	fp, #0
   4e964:	lsr	r0, r0, #5
   4e968:	moveq	r0, #0
   4e96c:	cmp	r0, #0
   4e970:	beq	4e8b4 <__assert_fail@plt+0x3c2c0>
   4e974:	ldr	r3, [sp, #4]
   4e978:	cmp	r7, r5
   4e97c:	movcs	r0, r7
   4e980:	movcc	r0, r5
   4e984:	cmp	r3, r0
   4e988:	bls	4e9cc <__assert_fail@plt+0x3c3d8>
   4e98c:	ldr	r3, [sp, #8]
   4e990:	add	r1, r0, sl
   4e994:	add	r2, r4, r1
   4e998:	ldrb	r1, [r4, r1]
   4e99c:	ldrb	ip, [r3, r0]
   4e9a0:	add	r3, r3, r0
   4e9a4:	cmp	r1, ip
   4e9a8:	beq	4e9c0 <__assert_fail@plt+0x3c3cc>
   4e9ac:	b	4ea44 <__assert_fail@plt+0x3c450>
   4e9b0:	ldrb	ip, [r3, #1]!
   4e9b4:	ldrb	r1, [r2, #1]!
   4e9b8:	cmp	ip, r1
   4e9bc:	bne	4ea44 <__assert_fail@plt+0x3c450>
   4e9c0:	cmp	r8, r3
   4e9c4:	add	r0, r9, r3
   4e9c8:	bne	4e9b0 <__assert_fail@plt+0x3c3bc>
   4e9cc:	cmp	r7, r5
   4e9d0:	bls	4ebbc <__assert_fail@plt+0x3c5c8>
   4e9d4:	ldr	r3, [sp, #20]
   4e9d8:	ldr	r0, [sp, #28]
   4e9dc:	add	r2, sl, r3
   4e9e0:	add	r3, r4, r2
   4e9e4:	ldrb	r2, [r4, r2]
   4e9e8:	ldrb	r1, [r0]
   4e9ec:	cmp	r1, r2
   4e9f0:	bne	4ebbc <__assert_fail@plt+0x3c5c8>
   4e9f4:	add	ip, r5, sl
   4e9f8:	mov	r2, r0
   4e9fc:	add	ip, ip, r4
   4ea00:	add	r6, r4, sl
   4ea04:	b	4ea18 <__assert_fail@plt+0x3c424>
   4ea08:	ldrb	r0, [r2, #-1]!
   4ea0c:	ldrb	r1, [r3, #-1]!
   4ea10:	cmp	r0, r1
   4ea14:	bne	4ea24 <__assert_fail@plt+0x3c430>
   4ea18:	cmp	ip, r3
   4ea1c:	sub	lr, r3, r6
   4ea20:	bne	4ea08 <__assert_fail@plt+0x3c414>
   4ea24:	add	r5, r5, #1
   4ea28:	cmp	r5, lr
   4ea2c:	bhi	4eb6c <__assert_fail@plt+0x3c578>
   4ea30:	ldr	r3, [sp, #16]
   4ea34:	ldr	r5, [sp, #24]
   4ea38:	add	sl, sl, r3
   4ea3c:	mov	r2, fp
   4ea40:	b	4e944 <__assert_fail@plt+0x3c350>
   4ea44:	ldr	r3, [sp, #12]
   4ea48:	mov	r5, #0
   4ea4c:	add	sl, r3, sl
   4ea50:	add	sl, r0, sl
   4ea54:	b	4ea3c <__assert_fail@plt+0x3c448>
   4ea58:	sub	r3, r7, r8
   4ea5c:	mov	r2, r8
   4ea60:	cmp	r3, r8
   4ea64:	sub	r1, r8, #1
   4ea68:	movcc	r3, r2
   4ea6c:	sub	r8, r7, #1
   4ea70:	add	r3, r3, #1
   4ea74:	add	r8, r8, r5
   4ea78:	str	r1, [sp, #12]
   4ea7c:	mov	sl, #0
   4ea80:	add	r1, r5, r1
   4ea84:	str	r3, [sp, #16]
   4ea88:	mov	r3, r2
   4ea8c:	add	r2, r5, r2
   4ea90:	rsb	r9, r5, #1
   4ea94:	str	r2, [sp, #4]
   4ea98:	rsb	r2, r3, #1
   4ea9c:	str	r2, [sp, #8]
   4eaa0:	mov	r2, r6
   4eaa4:	mov	r6, r3
   4eaa8:	str	r1, [sp, #20]
   4eaac:	add	fp, r7, sl
   4eab0:	add	r0, r4, r2
   4eab4:	mov	r1, #0
   4eab8:	sub	r2, fp, r2
   4eabc:	bl	123d8 <memchr@plt>
   4eac0:	clz	r0, r0
   4eac4:	cmp	fp, #0
   4eac8:	lsr	r0, r0, #5
   4eacc:	moveq	r0, #0
   4ead0:	cmp	r0, #0
   4ead4:	beq	4e8b4 <__assert_fail@plt+0x3c2c0>
   4ead8:	cmp	r7, r6
   4eadc:	bls	4eb24 <__assert_fail@plt+0x3c530>
   4eae0:	ldr	r3, [sp, #4]
   4eae4:	add	r2, r6, sl
   4eae8:	add	r1, r4, r2
   4eaec:	ldrb	r2, [r4, r2]
   4eaf0:	ldrb	r0, [r3]
   4eaf4:	cmp	r2, r0
   4eaf8:	movne	lr, r6
   4eafc:	bne	4eb74 <__assert_fail@plt+0x3c580>
   4eb00:	mov	r2, r3
   4eb04:	b	4eb18 <__assert_fail@plt+0x3c524>
   4eb08:	ldrb	r0, [r2, #1]!
   4eb0c:	ldrb	r3, [r1, #1]!
   4eb10:	cmp	r0, r3
   4eb14:	bne	4eb74 <__assert_fail@plt+0x3c580>
   4eb18:	cmp	r8, r2
   4eb1c:	add	lr, r9, r2
   4eb20:	bne	4eb08 <__assert_fail@plt+0x3c514>
   4eb24:	ldr	r3, [sp, #12]
   4eb28:	cmn	r3, #1
   4eb2c:	beq	4eb6c <__assert_fail@plt+0x3c578>
   4eb30:	add	r2, sl, r3
   4eb34:	ldr	r3, [sp, #20]
   4eb38:	add	r1, r4, r2
   4eb3c:	ldrb	r2, [r4, r2]
   4eb40:	ldrb	r0, [r3]
   4eb44:	cmp	r2, r0
   4eb48:	bne	4eb88 <__assert_fail@plt+0x3c594>
   4eb4c:	mov	r2, r3
   4eb50:	b	4eb64 <__assert_fail@plt+0x3c570>
   4eb54:	ldrb	r0, [r2, #-1]!
   4eb58:	ldrb	r3, [r1, #-1]!
   4eb5c:	cmp	r0, r3
   4eb60:	bne	4eb88 <__assert_fail@plt+0x3c594>
   4eb64:	cmp	r5, r2
   4eb68:	bne	4eb54 <__assert_fail@plt+0x3c560>
   4eb6c:	add	r4, r4, sl
   4eb70:	b	4e894 <__assert_fail@plt+0x3c2a0>
   4eb74:	ldr	r3, [sp, #8]
   4eb78:	add	sl, r3, sl
   4eb7c:	add	sl, lr, sl
   4eb80:	mov	r2, fp
   4eb84:	b	4eaac <__assert_fail@plt+0x3c4b8>
   4eb88:	ldr	r3, [sp, #16]
   4eb8c:	add	sl, sl, r3
   4eb90:	b	4eb80 <__assert_fail@plt+0x3c58c>
   4eb94:	cmp	r3, #0
   4eb98:	moveq	r4, r0
   4eb9c:	movne	r4, #0
   4eba0:	b	4e894 <__assert_fail@plt+0x3c2a0>
   4eba4:	mov	r3, #1
   4eba8:	sub	r2, r7, #1
   4ebac:	mov	r8, r2
   4ebb0:	str	r3, [sp, #16]
   4ebb4:	str	r3, [sp, #36]	; 0x24
   4ebb8:	b	4e8e0 <__assert_fail@plt+0x3c2ec>
   4ebbc:	mov	lr, r7
   4ebc0:	b	4ea24 <__assert_fail@plt+0x3c430>
   4ebc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4ebc8:	strd	r6, [sp, #8]
   4ebcc:	mov	r6, r0
   4ebd0:	movw	r0, #23268	; 0x5ae4
   4ebd4:	movt	r0, #5
   4ebd8:	str	r8, [sp, #16]
   4ebdc:	str	lr, [sp, #20]
   4ebe0:	bl	12228 <getenv@plt>
   4ebe4:	subs	r5, r0, #0
   4ebe8:	ldrb	r3, [r6, #4]
   4ebec:	beq	4eca4 <__assert_fail@plt+0x3c6b0>
   4ebf0:	cmp	r3, #0
   4ebf4:	beq	4ec28 <__assert_fail@plt+0x3c634>
   4ebf8:	mov	r1, r5
   4ebfc:	add	r0, r6, #5
   4ec00:	bl	11f40 <strcmp@plt>
   4ec04:	cmp	r0, #0
   4ec08:	bne	4ec28 <__assert_fail@plt+0x3c634>
   4ec0c:	mov	r4, #1
   4ec10:	mov	r0, r4
   4ec14:	ldrd	r4, [sp]
   4ec18:	ldrd	r6, [sp, #8]
   4ec1c:	ldr	r8, [sp, #16]
   4ec20:	add	sp, sp, #20
   4ec24:	pop	{pc}		; (ldr pc, [sp], #4)
   4ec28:	mov	r0, r5
   4ec2c:	bl	12300 <strlen@plt>
   4ec30:	add	r7, r0, #1
   4ec34:	cmp	r7, #58	; 0x3a
   4ec38:	movcs	r0, r7
   4ec3c:	movcc	r0, #58	; 0x3a
   4ec40:	add	r0, r0, #9
   4ec44:	bic	r0, r0, #3
   4ec48:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4ec4c:	subs	r4, r0, #0
   4ec50:	beq	4ecc4 <__assert_fail@plt+0x3c6d0>
   4ec54:	mov	r8, #0
   4ec58:	mov	ip, #1
   4ec5c:	add	r3, r4, #5
   4ec60:	mov	r1, r5
   4ec64:	mov	r0, r3
   4ec68:	mov	r2, r7
   4ec6c:	str	r8, [r4]
   4ec70:	strh	ip, [r4, #4]
   4ec74:	bl	12024 <memcpy@plt>
   4ec78:	strb	r8, [r0, r7]
   4ec7c:	ldrb	r3, [r6, #4]
   4ec80:	cmp	r3, #0
   4ec84:	bne	4eccc <__assert_fail@plt+0x3c6d8>
   4ec88:	movw	r0, #23268	; 0x5ae4
   4ec8c:	movt	r0, #5
   4ec90:	bl	12570 <unsetenv@plt>
   4ec94:	cmp	r0, #0
   4ec98:	bne	4ece8 <__assert_fail@plt+0x3c6f4>
   4ec9c:	bl	12144 <tzset@plt>
   4eca0:	b	4ec10 <__assert_fail@plt+0x3c61c>
   4eca4:	cmp	r3, #0
   4eca8:	beq	4ec0c <__assert_fail@plt+0x3c618>
   4ecac:	mov	r0, #64	; 0x40
   4ecb0:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4ecb4:	subs	r4, r0, #0
   4ecb8:	strne	r5, [r4]
   4ecbc:	strhne	r5, [r4, #4]
   4ecc0:	bne	4ec7c <__assert_fail@plt+0x3c688>
   4ecc4:	mov	r4, #0
   4ecc8:	b	4ec10 <__assert_fail@plt+0x3c61c>
   4eccc:	add	r1, r6, #5
   4ecd0:	movw	r0, #23268	; 0x5ae4
   4ecd4:	movt	r0, #5
   4ecd8:	mov	r2, #1
   4ecdc:	bl	12318 <setenv@plt>
   4ece0:	cmp	r0, #0
   4ece4:	beq	4ec9c <__assert_fail@plt+0x3c6a8>
   4ece8:	bl	12348 <__errno_location@plt>
   4ecec:	cmp	r4, #1
   4ecf0:	mov	r5, r0
   4ecf4:	ldr	r6, [r0]
   4ecf8:	beq	4ed10 <__assert_fail@plt+0x3c71c>
   4ecfc:	mov	r0, r4
   4ed00:	ldr	r4, [r4]
   4ed04:	bl	38b10 <__assert_fail@plt+0x2651c>
   4ed08:	cmp	r4, #0
   4ed0c:	bne	4ecfc <__assert_fail@plt+0x3c708>
   4ed10:	mov	r4, #0
   4ed14:	str	r6, [r5]
   4ed18:	b	4ec10 <__assert_fail@plt+0x3c61c>
   4ed1c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   4ed20:	strd	r6, [sp, #8]
   4ed24:	ldr	r6, [r1, #40]	; 0x28
   4ed28:	strd	r8, [sp, #16]
   4ed2c:	str	sl, [sp, #24]
   4ed30:	str	lr, [sp, #28]
   4ed34:	cmp	r6, #0
   4ed38:	beq	4ee48 <__assert_fail@plt+0x3c854>
   4ed3c:	cmp	r1, r6
   4ed40:	mov	r7, r1
   4ed44:	mov	r5, r0
   4ed48:	bhi	4ed58 <__assert_fail@plt+0x3c764>
   4ed4c:	add	r3, r1, #44	; 0x2c
   4ed50:	cmp	r6, r3
   4ed54:	bcc	4ee48 <__assert_fail@plt+0x3c854>
   4ed58:	ldrb	r3, [r6]
   4ed5c:	cmp	r3, #0
   4ed60:	addne	r4, r5, #5
   4ed64:	beq	4ee3c <__assert_fail@plt+0x3c848>
   4ed68:	mov	r1, r6
   4ed6c:	mov	r0, r4
   4ed70:	bl	11f40 <strcmp@plt>
   4ed74:	cmp	r0, #0
   4ed78:	add	r2, r5, #5
   4ed7c:	mov	r0, r4
   4ed80:	beq	4ee1c <__assert_fail@plt+0x3c828>
   4ed84:	ldrb	r3, [r4]
   4ed88:	cmp	r3, #0
   4ed8c:	bne	4eda4 <__assert_fail@plt+0x3c7b0>
   4ed90:	cmp	r4, r2
   4ed94:	bne	4ee50 <__assert_fail@plt+0x3c85c>
   4ed98:	ldrb	r3, [r5, #4]
   4ed9c:	cmp	r3, #0
   4eda0:	beq	4ee50 <__assert_fail@plt+0x3c85c>
   4eda4:	bl	12300 <strlen@plt>
   4eda8:	add	r0, r0, #1
   4edac:	ldrb	r3, [r4, r0]!
   4edb0:	cmp	r3, #0
   4edb4:	bne	4ed68 <__assert_fail@plt+0x3c774>
   4edb8:	ldr	r3, [r5]
   4edbc:	cmp	r3, #0
   4edc0:	addne	r4, r3, #5
   4edc4:	movne	r5, r3
   4edc8:	b	4ed68 <__assert_fail@plt+0x3c774>
   4edcc:	cmp	r8, #58	; 0x3a
   4edd0:	movcs	r0, r8
   4edd4:	movcc	r0, #58	; 0x3a
   4edd8:	add	r0, r0, #9
   4eddc:	bic	r0, r0, #3
   4ede0:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4ede4:	subs	r9, r0, #0
   4ede8:	beq	4ee88 <__assert_fail@plt+0x3c894>
   4edec:	mov	sl, #0
   4edf0:	mov	r3, #1
   4edf4:	add	r4, r9, #5
   4edf8:	mov	r1, r6
   4edfc:	mov	r0, r4
   4ee00:	mov	r2, r8
   4ee04:	str	sl, [r9]
   4ee08:	strh	r3, [r9, #4]
   4ee0c:	bl	12024 <memcpy@plt>
   4ee10:	strb	sl, [r4, r8]
   4ee14:	str	r9, [r5]
   4ee18:	strb	sl, [r9, #4]
   4ee1c:	mov	r0, #1
   4ee20:	str	r4, [r7, #40]	; 0x28
   4ee24:	ldrd	r4, [sp]
   4ee28:	ldrd	r6, [sp, #8]
   4ee2c:	ldrd	r8, [sp, #16]
   4ee30:	ldr	sl, [sp, #24]
   4ee34:	add	sp, sp, #28
   4ee38:	pop	{pc}		; (ldr pc, [sp], #4)
   4ee3c:	movw	r4, #9500	; 0x251c
   4ee40:	movt	r4, #5
   4ee44:	b	4ee1c <__assert_fail@plt+0x3c828>
   4ee48:	mov	r0, #1
   4ee4c:	b	4ee24 <__assert_fail@plt+0x3c830>
   4ee50:	mov	r0, r6
   4ee54:	bl	12300 <strlen@plt>
   4ee58:	add	r3, r5, #64	; 0x40
   4ee5c:	add	r8, r0, #1
   4ee60:	sub	r3, r3, r4
   4ee64:	cmp	r3, r8
   4ee68:	ble	4edcc <__assert_fail@plt+0x3c7d8>
   4ee6c:	mov	r1, r6
   4ee70:	mov	r2, r8
   4ee74:	mov	r0, r4
   4ee78:	bl	12024 <memcpy@plt>
   4ee7c:	mov	r3, #0
   4ee80:	strb	r3, [r4, r8]
   4ee84:	b	4ee1c <__assert_fail@plt+0x3c828>
   4ee88:	mov	r0, r9
   4ee8c:	str	r9, [r5]
   4ee90:	b	4ee24 <__assert_fail@plt+0x3c830>
   4ee94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4ee98:	strd	r6, [sp, #8]
   4ee9c:	subs	r6, r0, #0
   4eea0:	str	r8, [sp, #16]
   4eea4:	str	lr, [sp, #20]
   4eea8:	beq	4ef14 <__assert_fail@plt+0x3c920>
   4eeac:	bl	12300 <strlen@plt>
   4eeb0:	add	r5, r0, #1
   4eeb4:	cmp	r5, #58	; 0x3a
   4eeb8:	movcs	r0, r5
   4eebc:	movcc	r0, #58	; 0x3a
   4eec0:	add	r0, r0, #9
   4eec4:	bic	r0, r0, #3
   4eec8:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4eecc:	subs	r4, r0, #0
   4eed0:	beq	4eefc <__assert_fail@plt+0x3c908>
   4eed4:	mov	r7, #0
   4eed8:	mov	ip, #1
   4eedc:	add	r3, r4, #5
   4eee0:	mov	r1, r6
   4eee4:	mov	r0, r3
   4eee8:	mov	r2, r5
   4eeec:	str	r7, [r4]
   4eef0:	strh	ip, [r4, #4]
   4eef4:	bl	12024 <memcpy@plt>
   4eef8:	strb	r7, [r0, r5]
   4eefc:	mov	r0, r4
   4ef00:	ldrd	r4, [sp]
   4ef04:	ldrd	r6, [sp, #8]
   4ef08:	ldr	r8, [sp, #16]
   4ef0c:	add	sp, sp, #20
   4ef10:	pop	{pc}		; (ldr pc, [sp], #4)
   4ef14:	mov	r0, #64	; 0x40
   4ef18:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4ef1c:	subs	r4, r0, #0
   4ef20:	strne	r6, [r4]
   4ef24:	strhne	r6, [r4, #4]
   4ef28:	b	4eefc <__assert_fail@plt+0x3c908>
   4ef2c:	cmp	r0, #1
   4ef30:	bxeq	lr
   4ef34:	cmp	r0, #0
   4ef38:	bxeq	lr
   4ef3c:	str	r4, [sp, #-8]!
   4ef40:	str	lr, [sp, #4]
   4ef44:	ldr	r4, [r0]
   4ef48:	bl	38b10 <__assert_fail@plt+0x2651c>
   4ef4c:	subs	r0, r4, #0
   4ef50:	bne	4ef44 <__assert_fail@plt+0x3c950>
   4ef54:	ldr	r4, [sp]
   4ef58:	add	sp, sp, #4
   4ef5c:	pop	{pc}		; (ldr pc, [sp], #4)
   4ef60:	subs	ip, r0, #0
   4ef64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4ef68:	strd	r6, [sp, #8]
   4ef6c:	mov	r6, r1
   4ef70:	str	r8, [sp, #16]
   4ef74:	str	lr, [sp, #20]
   4ef78:	beq	4f05c <__assert_fail@plt+0x3ca68>
   4ef7c:	mov	r5, r2
   4ef80:	mov	r7, ip
   4ef84:	bl	4ebc4 <__assert_fail@plt+0x3c5d0>
   4ef88:	subs	r4, r0, #0
   4ef8c:	beq	4f030 <__assert_fail@plt+0x3ca3c>
   4ef90:	mov	r0, r6
   4ef94:	mov	r1, r5
   4ef98:	bl	120fc <localtime_r@plt>
   4ef9c:	cmp	r0, #0
   4efa0:	beq	4f024 <__assert_fail@plt+0x3ca30>
   4efa4:	mov	r0, r7
   4efa8:	mov	r1, r5
   4efac:	bl	4ed1c <__assert_fail@plt+0x3c728>
   4efb0:	subs	r7, r0, #0
   4efb4:	beq	4f024 <__assert_fail@plt+0x3ca30>
   4efb8:	cmp	r4, #1
   4efbc:	beq	4f01c <__assert_fail@plt+0x3ca28>
   4efc0:	bl	12348 <__errno_location@plt>
   4efc4:	ldrb	r3, [r4, #4]
   4efc8:	mov	r6, r0
   4efcc:	movw	r0, #23268	; 0x5ae4
   4efd0:	movt	r0, #5
   4efd4:	ldr	r8, [r6]
   4efd8:	cmp	r3, #0
   4efdc:	beq	4f048 <__assert_fail@plt+0x3ca54>
   4efe0:	mov	r2, #1
   4efe4:	add	r1, r4, #5
   4efe8:	bl	12318 <setenv@plt>
   4efec:	cmp	r0, #0
   4eff0:	beq	4f054 <__assert_fail@plt+0x3ca60>
   4eff4:	ldr	r8, [r6]
   4eff8:	mov	r7, #0
   4effc:	mov	r0, r4
   4f000:	ldr	r4, [r4]
   4f004:	bl	38b10 <__assert_fail@plt+0x2651c>
   4f008:	cmp	r4, #0
   4f00c:	bne	4effc <__assert_fail@plt+0x3ca08>
   4f010:	cmp	r7, #0
   4f014:	str	r8, [r6]
   4f018:	beq	4f030 <__assert_fail@plt+0x3ca3c>
   4f01c:	mov	r0, r5
   4f020:	b	4f034 <__assert_fail@plt+0x3ca40>
   4f024:	cmp	r4, #1
   4f028:	movne	r7, #0
   4f02c:	bne	4efc0 <__assert_fail@plt+0x3c9cc>
   4f030:	mov	r0, #0
   4f034:	ldrd	r4, [sp]
   4f038:	ldrd	r6, [sp, #8]
   4f03c:	ldr	r8, [sp, #16]
   4f040:	add	sp, sp, #20
   4f044:	pop	{pc}		; (ldr pc, [sp], #4)
   4f048:	bl	12570 <unsetenv@plt>
   4f04c:	cmp	r0, #0
   4f050:	bne	4eff4 <__assert_fail@plt+0x3ca00>
   4f054:	bl	12144 <tzset@plt>
   4f058:	b	4effc <__assert_fail@plt+0x3ca08>
   4f05c:	mov	r0, r6
   4f060:	mov	r1, r2
   4f064:	ldrd	r4, [sp]
   4f068:	ldrd	r6, [sp, #8]
   4f06c:	ldr	r8, [sp, #16]
   4f070:	ldr	lr, [sp, #20]
   4f074:	add	sp, sp, #24
   4f078:	b	11f04 <gmtime_r@plt>
   4f07c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   4f080:	subs	r5, r0, #0
   4f084:	strd	r6, [sp, #8]
   4f088:	mov	r6, r1
   4f08c:	strd	r8, [sp, #16]
   4f090:	str	lr, [sp, #24]
   4f094:	sub	sp, sp, #52	; 0x34
   4f098:	beq	4f1dc <__assert_fail@plt+0x3cbe8>
   4f09c:	bl	4ebc4 <__assert_fail@plt+0x3c5d0>
   4f0a0:	subs	r4, r0, #0
   4f0a4:	beq	4f1ec <__assert_fail@plt+0x3cbf8>
   4f0a8:	ldr	r3, [r6]
   4f0ac:	mvn	r2, #0
   4f0b0:	add	r0, sp, #4
   4f0b4:	ldr	r1, [r6, #4]
   4f0b8:	str	r3, [sp, #4]
   4f0bc:	str	r2, [sp, #32]
   4f0c0:	ldrd	r2, [r6, #8]
   4f0c4:	str	r1, [sp, #8]
   4f0c8:	ldr	r1, [r6, #16]
   4f0cc:	strd	r2, [sp, #12]
   4f0d0:	ldr	r2, [r6, #20]
   4f0d4:	str	r1, [sp, #20]
   4f0d8:	ldr	r3, [r6, #32]
   4f0dc:	str	r2, [sp, #24]
   4f0e0:	str	r3, [sp, #36]	; 0x24
   4f0e4:	bl	11f7c <mktime@plt>
   4f0e8:	ldr	r3, [sp, #32]
   4f0ec:	mov	r7, r0
   4f0f0:	cmp	r3, #0
   4f0f4:	bge	4f1a8 <__assert_fail@plt+0x3cbb4>
   4f0f8:	cmp	r4, #1
   4f0fc:	beq	4f1ec <__assert_fail@plt+0x3cbf8>
   4f100:	mov	r5, #0
   4f104:	bl	12348 <__errno_location@plt>
   4f108:	ldrb	r3, [r4, #4]
   4f10c:	mov	r8, r0
   4f110:	movw	r0, #23268	; 0x5ae4
   4f114:	movt	r0, #5
   4f118:	ldr	r9, [r8]
   4f11c:	cmp	r3, #0
   4f120:	beq	4f1d4 <__assert_fail@plt+0x3cbe0>
   4f124:	mov	r2, #1
   4f128:	add	r1, r4, #5
   4f12c:	bl	12318 <setenv@plt>
   4f130:	cmp	r0, #0
   4f134:	bne	4f1c8 <__assert_fail@plt+0x3cbd4>
   4f138:	bl	12144 <tzset@plt>
   4f13c:	mov	r0, r4
   4f140:	ldr	r4, [r4]
   4f144:	bl	38b10 <__assert_fail@plt+0x2651c>
   4f148:	cmp	r4, #0
   4f14c:	bne	4f13c <__assert_fail@plt+0x3cb48>
   4f150:	cmp	r5, #0
   4f154:	str	r9, [r8]
   4f158:	beq	4f1ec <__assert_fail@plt+0x3cbf8>
   4f15c:	ldrd	r0, [sp, #4]
   4f160:	ldrd	r2, [sp, #12]
   4f164:	ldrd	r4, [sp, #20]
   4f168:	strd	r0, [r6]
   4f16c:	ldrd	r0, [sp, #28]
   4f170:	strd	r2, [r6, #8]
   4f174:	ldrd	r2, [sp, #36]	; 0x24
   4f178:	strd	r4, [r6, #16]
   4f17c:	ldr	ip, [sp, #44]	; 0x2c
   4f180:	strd	r0, [r6, #24]
   4f184:	strd	r2, [r6, #32]
   4f188:	str	ip, [r6, #40]	; 0x28
   4f18c:	mov	r0, r7
   4f190:	add	sp, sp, #52	; 0x34
   4f194:	ldrd	r4, [sp]
   4f198:	ldrd	r6, [sp, #8]
   4f19c:	ldrd	r8, [sp, #16]
   4f1a0:	add	sp, sp, #24
   4f1a4:	pop	{pc}		; (ldr pc, [sp], #4)
   4f1a8:	mov	r0, r5
   4f1ac:	add	r1, sp, #4
   4f1b0:	bl	4ed1c <__assert_fail@plt+0x3c728>
   4f1b4:	subs	r5, r0, #0
   4f1b8:	beq	4f0f8 <__assert_fail@plt+0x3cb04>
   4f1bc:	cmp	r4, #1
   4f1c0:	beq	4f15c <__assert_fail@plt+0x3cb68>
   4f1c4:	b	4f104 <__assert_fail@plt+0x3cb10>
   4f1c8:	mov	r5, #0
   4f1cc:	ldr	r9, [r8]
   4f1d0:	b	4f13c <__assert_fail@plt+0x3cb48>
   4f1d4:	bl	12570 <unsetenv@plt>
   4f1d8:	b	4f130 <__assert_fail@plt+0x3cb3c>
   4f1dc:	mov	r0, r1
   4f1e0:	bl	124d4 <timegm@plt>
   4f1e4:	mov	r7, r0
   4f1e8:	b	4f18c <__assert_fail@plt+0x3cb98>
   4f1ec:	mvn	r7, #0
   4f1f0:	b	4f18c <__assert_fail@plt+0x3cb98>
   4f1f4:	movw	r3, #29936	; 0x74f0
   4f1f8:	movt	r3, #6
   4f1fc:	str	r4, [sp, #-8]!
   4f200:	ldr	r0, [r3]
   4f204:	str	lr, [sp, #4]
   4f208:	bl	122d0 <exit@plt>
   4f20c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4f210:	mov	r4, r1
   4f214:	strd	r6, [sp, #8]
   4f218:	mov	r6, r2
   4f21c:	strd	r8, [sp, #16]
   4f220:	mov	r8, r3
   4f224:	strd	sl, [sp, #24]
   4f228:	mov	sl, r0
   4f22c:	str	lr, [sp, #32]
   4f230:	sub	sp, sp, #12
   4f234:	str	r2, [sp]
   4f238:	bl	12300 <strlen@plt>
   4f23c:	ldr	fp, [r4]
   4f240:	cmp	fp, #0
   4f244:	beq	4f354 <__assert_fail@plt+0x3cd60>
   4f248:	cmp	r6, #0
   4f24c:	mov	r7, r0
   4f250:	beq	4f300 <__assert_fail@plt+0x3cd0c>
   4f254:	mov	r5, #0
   4f258:	mvn	r9, #0
   4f25c:	str	r5, [sp, #4]
   4f260:	mov	r2, r7
   4f264:	mov	r1, sl
   4f268:	mov	r0, fp
   4f26c:	bl	12594 <strncmp@plt>
   4f270:	cmp	r0, #0
   4f274:	mov	r0, fp
   4f278:	bne	4f2b8 <__assert_fail@plt+0x3ccc4>
   4f27c:	bl	12300 <strlen@plt>
   4f280:	ldr	r3, [sp]
   4f284:	cmp	r0, r7
   4f288:	mov	r2, r8
   4f28c:	mov	r1, r6
   4f290:	mla	r0, r8, r9, r3
   4f294:	beq	4f2f8 <__assert_fail@plt+0x3cd04>
   4f298:	cmn	r9, #1
   4f29c:	moveq	r9, r5
   4f2a0:	beq	4f2b8 <__assert_fail@plt+0x3ccc4>
   4f2a4:	bl	12084 <memcmp@plt>
   4f2a8:	ldr	r3, [sp, #4]
   4f2ac:	cmp	r0, #0
   4f2b0:	movne	r3, #1
   4f2b4:	str	r3, [sp, #4]
   4f2b8:	ldr	fp, [r4, #4]!
   4f2bc:	add	r5, r5, #1
   4f2c0:	add	r6, r6, r8
   4f2c4:	cmp	fp, #0
   4f2c8:	bne	4f260 <__assert_fail@plt+0x3cc6c>
   4f2cc:	ldr	r3, [sp, #4]
   4f2d0:	cmp	r3, #0
   4f2d4:	mvnne	r9, #1
   4f2d8:	mov	r0, r9
   4f2dc:	add	sp, sp, #12
   4f2e0:	ldrd	r4, [sp]
   4f2e4:	ldrd	r6, [sp, #8]
   4f2e8:	ldrd	r8, [sp, #16]
   4f2ec:	ldrd	sl, [sp, #24]
   4f2f0:	add	sp, sp, #32
   4f2f4:	pop	{pc}		; (ldr pc, [sp], #4)
   4f2f8:	mov	r9, r5
   4f2fc:	b	4f2d8 <__assert_fail@plt+0x3cce4>
   4f300:	mov	r5, r6
   4f304:	mvn	r9, #0
   4f308:	mov	r2, r7
   4f30c:	mov	r1, sl
   4f310:	mov	r0, fp
   4f314:	bl	12594 <strncmp@plt>
   4f318:	cmp	r0, #0
   4f31c:	mov	r0, fp
   4f320:	bne	4f33c <__assert_fail@plt+0x3cd48>
   4f324:	bl	12300 <strlen@plt>
   4f328:	cmp	r0, r7
   4f32c:	beq	4f2f8 <__assert_fail@plt+0x3cd04>
   4f330:	cmn	r9, #1
   4f334:	moveq	r9, r5
   4f338:	movne	r6, #1
   4f33c:	ldr	fp, [r4, #4]!
   4f340:	add	r5, r5, #1
   4f344:	cmp	fp, #0
   4f348:	bne	4f308 <__assert_fail@plt+0x3cd14>
   4f34c:	str	r6, [sp, #4]
   4f350:	b	4f2cc <__assert_fail@plt+0x3ccd8>
   4f354:	mvn	r9, #0
   4f358:	b	4f2d8 <__assert_fail@plt+0x3cce4>
   4f35c:	cmn	r2, #1
   4f360:	strd	r4, [sp, #-16]!
   4f364:	mov	r5, r1
   4f368:	movweq	r1, #26212	; 0x6664
   4f36c:	movwne	r1, #26240	; 0x6680
   4f370:	str	r6, [sp, #8]
   4f374:	movteq	r1, #5
   4f378:	movtne	r1, #5
   4f37c:	str	lr, [sp, #12]
   4f380:	mov	r6, r0
   4f384:	sub	sp, sp, #8
   4f388:	mov	r2, #5
   4f38c:	mov	r0, #0
   4f390:	bl	120b4 <dcgettext@plt>
   4f394:	mov	r4, r0
   4f398:	mov	r2, r5
   4f39c:	mov	r1, #8
   4f3a0:	mov	r0, #0
   4f3a4:	bl	3431c <__assert_fail@plt+0x21d28>
   4f3a8:	mov	r5, r0
   4f3ac:	mov	r1, r6
   4f3b0:	mov	r0, #1
   4f3b4:	bl	35714 <__assert_fail@plt+0x23120>
   4f3b8:	mov	r1, #0
   4f3bc:	mov	r3, r5
   4f3c0:	str	r0, [sp]
   4f3c4:	mov	r2, r4
   4f3c8:	mov	r0, r1
   4f3cc:	bl	121ec <error@plt>
   4f3d0:	add	sp, sp, #8
   4f3d4:	ldrd	r4, [sp]
   4f3d8:	ldr	r6, [sp, #8]
   4f3dc:	add	sp, sp, #12
   4f3e0:	pop	{pc}		; (ldr pc, [sp], #4)
   4f3e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4f3e8:	mov	r4, r1
   4f3ec:	movw	r1, #26272	; 0x66a0
   4f3f0:	movt	r1, #5
   4f3f4:	strd	r6, [sp, #8]
   4f3f8:	mov	r6, r0
   4f3fc:	mov	r7, r2
   4f400:	mov	r0, #0
   4f404:	strd	r8, [sp, #16]
   4f408:	mov	r2, #5
   4f40c:	strd	sl, [sp, #24]
   4f410:	movw	sl, #30024	; 0x7548
   4f414:	movt	sl, #6
   4f418:	str	lr, [sp, #32]
   4f41c:	sub	sp, sp, #12
   4f420:	bl	120b4 <dcgettext@plt>
   4f424:	ldr	r1, [sl]
   4f428:	bl	12588 <fputs@plt>
   4f42c:	ldr	fp, [r6]
   4f430:	cmp	fp, #0
   4f434:	beq	4f4cc <__assert_fail@plt+0x3ced8>
   4f438:	movw	r3, #26296	; 0x66b8
   4f43c:	movt	r3, #5
   4f440:	mov	r9, #0
   4f444:	str	r3, [sp]
   4f448:	movw	r3, #26304	; 0x66c0
   4f44c:	movt	r3, #5
   4f450:	mov	r5, r9
   4f454:	str	r3, [sp, #4]
   4f458:	b	4f48c <__assert_fail@plt+0x3ce98>
   4f45c:	mov	r0, fp
   4f460:	mov	r9, r4
   4f464:	bl	35724 <__assert_fail@plt+0x23130>
   4f468:	mov	r2, r0
   4f46c:	mov	r0, r8
   4f470:	ldr	r1, [sp]
   4f474:	bl	1233c <fprintf@plt>
   4f478:	ldr	fp, [r6, #4]!
   4f47c:	add	r5, r5, #1
   4f480:	add	r4, r4, r7
   4f484:	cmp	fp, #0
   4f488:	beq	4f4cc <__assert_fail@plt+0x3ced8>
   4f48c:	cmp	r5, #0
   4f490:	mov	r1, r4
   4f494:	ldr	r8, [sl]
   4f498:	mov	r2, r7
   4f49c:	mov	r0, r9
   4f4a0:	beq	4f45c <__assert_fail@plt+0x3ce68>
   4f4a4:	bl	12084 <memcmp@plt>
   4f4a8:	cmp	r0, #0
   4f4ac:	bne	4f45c <__assert_fail@plt+0x3ce68>
   4f4b0:	mov	r0, fp
   4f4b4:	bl	35724 <__assert_fail@plt+0x23130>
   4f4b8:	mov	r2, r0
   4f4bc:	mov	r0, r8
   4f4c0:	ldr	r1, [sp, #4]
   4f4c4:	bl	1233c <fprintf@plt>
   4f4c8:	b	4f478 <__assert_fail@plt+0x3ce84>
   4f4cc:	ldr	r1, [sl]
   4f4d0:	mov	r0, #10
   4f4d4:	add	sp, sp, #12
   4f4d8:	ldrd	r4, [sp]
   4f4dc:	ldrd	r6, [sp, #8]
   4f4e0:	ldrd	r8, [sp, #16]
   4f4e4:	ldrd	sl, [sp, #24]
   4f4e8:	ldr	lr, [sp, #32]
   4f4ec:	add	sp, sp, #36	; 0x24
   4f4f0:	b	124e0 <putc@plt>
   4f4f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4f4f8:	mov	r4, r2
   4f4fc:	mov	r5, r3
   4f500:	strd	r6, [sp, #8]
   4f504:	mov	r6, r1
   4f508:	mov	r2, r3
   4f50c:	str	r8, [sp, #16]
   4f510:	mov	r7, r0
   4f514:	mov	r1, r4
   4f518:	str	lr, [sp, #20]
   4f51c:	sub	sp, sp, #8
   4f520:	mov	r0, r6
   4f524:	ldr	r3, [sp, #32]
   4f528:	bl	4f20c <__assert_fail@plt+0x3cc18>
   4f52c:	cmp	r0, #0
   4f530:	blt	4f54c <__assert_fail@plt+0x3cf58>
   4f534:	add	sp, sp, #8
   4f538:	ldrd	r4, [sp]
   4f53c:	ldrd	r6, [sp, #8]
   4f540:	ldr	r8, [sp, #16]
   4f544:	add	sp, sp, #20
   4f548:	pop	{pc}		; (ldr pc, [sp], #4)
   4f54c:	cmn	r0, #1
   4f550:	mov	r2, #5
   4f554:	movweq	r1, #26212	; 0x6664
   4f558:	movwne	r1, #26240	; 0x6680
   4f55c:	movteq	r1, #5
   4f560:	movtne	r1, #5
   4f564:	mov	r0, #0
   4f568:	bl	120b4 <dcgettext@plt>
   4f56c:	mov	r8, r0
   4f570:	mov	r2, r6
   4f574:	mov	r1, #8
   4f578:	mov	r0, #0
   4f57c:	bl	3431c <__assert_fail@plt+0x21d28>
   4f580:	mov	r6, r0
   4f584:	mov	r1, r7
   4f588:	mov	r0, #1
   4f58c:	bl	35714 <__assert_fail@plt+0x23120>
   4f590:	mov	r1, #0
   4f594:	mov	r3, r6
   4f598:	str	r0, [sp]
   4f59c:	mov	r2, r8
   4f5a0:	mov	r0, r1
   4f5a4:	bl	121ec <error@plt>
   4f5a8:	mov	r0, r4
   4f5ac:	mov	r1, r5
   4f5b0:	ldr	r2, [sp, #32]
   4f5b4:	bl	4f3e4 <__assert_fail@plt+0x3cdf0>
   4f5b8:	ldr	r3, [sp, #36]	; 0x24
   4f5bc:	blx	r3
   4f5c0:	mvn	r0, #0
   4f5c4:	b	4f534 <__assert_fail@plt+0x3cf40>
   4f5c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4f5cc:	strd	r6, [sp, #8]
   4f5d0:	ldr	r7, [r1]
   4f5d4:	str	r8, [sp, #16]
   4f5d8:	str	lr, [sp, #20]
   4f5dc:	cmp	r7, #0
   4f5e0:	beq	4f620 <__assert_fail@plt+0x3d02c>
   4f5e4:	mov	r6, r3
   4f5e8:	mov	r8, r0
   4f5ec:	mov	r4, r2
   4f5f0:	mov	r5, r1
   4f5f4:	b	4f604 <__assert_fail@plt+0x3d010>
   4f5f8:	ldr	r7, [r5, #4]!
   4f5fc:	cmp	r7, #0
   4f600:	beq	4f620 <__assert_fail@plt+0x3d02c>
   4f604:	mov	r1, r4
   4f608:	mov	r2, r6
   4f60c:	mov	r0, r8
   4f610:	add	r4, r4, r6
   4f614:	bl	12084 <memcmp@plt>
   4f618:	cmp	r0, #0
   4f61c:	bne	4f5f8 <__assert_fail@plt+0x3d004>
   4f620:	mov	r0, r7
   4f624:	ldrd	r4, [sp]
   4f628:	ldrd	r6, [sp, #8]
   4f62c:	ldr	r8, [sp, #16]
   4f630:	add	sp, sp, #20
   4f634:	pop	{pc}		; (ldr pc, [sp], #4)
   4f638:	strd	r4, [sp, #-28]!	; 0xffffffe4
   4f63c:	mov	r5, r0
   4f640:	strd	r6, [sp, #8]
   4f644:	strd	r8, [sp, #16]
   4f648:	str	lr, [sp, #24]
   4f64c:	sub	sp, sp, #36	; 0x24
   4f650:	ldrb	r3, [r2]
   4f654:	cmp	r3, #0
   4f658:	strbeq	r3, [r5]
   4f65c:	beq	4f6bc <__assert_fail@plt+0x3d0c8>
   4f660:	movw	r7, #32316	; 0x7e3c
   4f664:	movt	r7, #6
   4f668:	ldr	r4, [r7]
   4f66c:	mov	r6, r2
   4f670:	mov	r8, r1
   4f674:	cmp	r4, #0
   4f678:	beq	4f6e8 <__assert_fail@plt+0x3d0f4>
   4f67c:	cmp	r4, #0
   4f680:	blt	4f6e0 <__assert_fail@plt+0x3d0ec>
   4f684:	mov	r0, r6
   4f688:	bl	12300 <strlen@plt>
   4f68c:	add	r0, r0, #27
   4f690:	cmp	r0, #4032	; 0xfc0
   4f694:	bhi	4f6d4 <__assert_fail@plt+0x3d0e0>
   4f698:	mov	r2, r8
   4f69c:	movw	r1, #26336	; 0x66e0
   4f6a0:	movt	r1, #5
   4f6a4:	mov	r0, r5
   4f6a8:	bl	124b0 <sprintf@plt>
   4f6ac:	add	r0, r5, r0
   4f6b0:	mov	r1, r6
   4f6b4:	bl	121b0 <strcpy@plt>
   4f6b8:	mov	r0, r5
   4f6bc:	add	sp, sp, #36	; 0x24
   4f6c0:	ldrd	r4, [sp]
   4f6c4:	ldrd	r6, [sp, #8]
   4f6c8:	ldrd	r8, [sp, #16]
   4f6cc:	add	sp, sp, #24
   4f6d0:	pop	{pc}		; (ldr pc, [sp], #4)
   4f6d4:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4f6d8:	subs	r5, r0, #0
   4f6dc:	bne	4f698 <__assert_fail@plt+0x3d0a4>
   4f6e0:	mov	r0, #0
   4f6e4:	b	4f6bc <__assert_fail@plt+0x3d0c8>
   4f6e8:	mov	r1, #18688	; 0x4900
   4f6ec:	movt	r1, #8
   4f6f0:	movw	r0, #18820	; 0x4984
   4f6f4:	movt	r0, #5
   4f6f8:	bl	1221c <open64@plt>
   4f6fc:	subs	r9, r0, #0
   4f700:	bge	4f714 <__assert_fail@plt+0x3d120>
   4f704:	mvn	r3, #0
   4f708:	mov	r0, r4
   4f70c:	str	r3, [r7]
   4f710:	b	4f6bc <__assert_fail@plt+0x3d0c8>
   4f714:	mov	r2, r9
   4f718:	movw	r1, #26312	; 0x66c8
   4f71c:	movt	r1, #5
   4f720:	mov	r0, sp
   4f724:	bl	124b0 <sprintf@plt>
   4f728:	mov	r1, r4
   4f72c:	mov	r0, sp
   4f730:	bl	123f0 <access@plt>
   4f734:	cmp	r0, #0
   4f738:	mov	r0, r9
   4f73c:	mvnne	r3, #0
   4f740:	moveq	r3, #1
   4f744:	str	r3, [r7]
   4f748:	bl	125ac <close@plt>
   4f74c:	ldr	r4, [r7]
   4f750:	b	4f67c <__assert_fail@plt+0x3d088>
   4f754:	ldrb	r3, [r0]
   4f758:	cmp	r3, #47	; 0x2f
   4f75c:	bne	4f76c <__assert_fail@plt+0x3d178>
   4f760:	ldrb	r3, [r0, #1]!
   4f764:	cmp	r3, #47	; 0x2f
   4f768:	beq	4f760 <__assert_fail@plt+0x3d16c>
   4f76c:	cmp	r3, #0
   4f770:	beq	4f7a0 <__assert_fail@plt+0x3d1ac>
   4f774:	mov	r2, r0
   4f778:	mov	r1, #0
   4f77c:	cmp	r3, #47	; 0x2f
   4f780:	moveq	r1, #1
   4f784:	beq	4f794 <__assert_fail@plt+0x3d1a0>
   4f788:	cmp	r1, #0
   4f78c:	movne	r0, r2
   4f790:	movne	r1, #0
   4f794:	ldrb	r3, [r2, #1]!
   4f798:	cmp	r3, #0
   4f79c:	bne	4f77c <__assert_fail@plt+0x3d188>
   4f7a0:	bx	lr
   4f7a4:	str	r4, [sp, #-8]!
   4f7a8:	mov	r4, r0
   4f7ac:	str	lr, [sp, #4]
   4f7b0:	bl	12300 <strlen@plt>
   4f7b4:	cmp	r0, #1
   4f7b8:	bls	4f7cc <__assert_fail@plt+0x3d1d8>
   4f7bc:	sub	r2, r0, #1
   4f7c0:	ldrb	r1, [r4, r2]
   4f7c4:	cmp	r1, #47	; 0x2f
   4f7c8:	beq	4f7d8 <__assert_fail@plt+0x3d1e4>
   4f7cc:	ldr	r4, [sp]
   4f7d0:	add	sp, sp, #4
   4f7d4:	pop	{pc}		; (ldr pc, [sp], #4)
   4f7d8:	cmp	r2, #1
   4f7dc:	beq	4f7f0 <__assert_fail@plt+0x3d1fc>
   4f7e0:	add	r1, r4, r0
   4f7e4:	ldrb	r1, [r1, #-2]
   4f7e8:	cmp	r1, #47	; 0x2f
   4f7ec:	beq	4f800 <__assert_fail@plt+0x3d20c>
   4f7f0:	ldr	r4, [sp]
   4f7f4:	add	sp, sp, #4
   4f7f8:	mov	r0, r2
   4f7fc:	pop	{pc}		; (ldr pc, [sp], #4)
   4f800:	sub	r3, r0, #3
   4f804:	rsb	r0, r4, #1
   4f808:	add	r3, r4, r3
   4f80c:	cmp	r3, r4
   4f810:	add	r2, r0, r3
   4f814:	beq	4f7f0 <__assert_fail@plt+0x3d1fc>
   4f818:	ldrb	r1, [r3], #-1
   4f81c:	cmp	r1, #47	; 0x2f
   4f820:	bne	4f7f0 <__assert_fail@plt+0x3d1fc>
   4f824:	b	4f80c <__assert_fail@plt+0x3d218>
   4f828:	strd	r4, [sp, #-16]!
   4f82c:	mov	r4, r0
   4f830:	str	r6, [sp, #8]
   4f834:	str	lr, [sp, #12]
   4f838:	bl	121c8 <__fpending@plt>
   4f83c:	mov	r6, r0
   4f840:	mov	r0, r4
   4f844:	bl	11fe8 <ferror@plt>
   4f848:	mov	r5, r0
   4f84c:	mov	r0, r4
   4f850:	bl	123fc <fclose@plt>
   4f854:	cmp	r5, #0
   4f858:	mov	r4, r0
   4f85c:	bne	4f894 <__assert_fail@plt+0x3d2a0>
   4f860:	cmp	r0, #0
   4f864:	beq	4f880 <__assert_fail@plt+0x3d28c>
   4f868:	cmp	r6, #0
   4f86c:	bne	4f8ac <__assert_fail@plt+0x3d2b8>
   4f870:	bl	12348 <__errno_location@plt>
   4f874:	ldr	r4, [r0]
   4f878:	subs	r4, r4, #9
   4f87c:	mvnne	r4, #0
   4f880:	mov	r0, r4
   4f884:	ldrd	r4, [sp]
   4f888:	ldr	r6, [sp, #8]
   4f88c:	add	sp, sp, #12
   4f890:	pop	{pc}		; (ldr pc, [sp], #4)
   4f894:	cmp	r0, #0
   4f898:	bne	4f8ac <__assert_fail@plt+0x3d2b8>
   4f89c:	bl	12348 <__errno_location@plt>
   4f8a0:	str	r4, [r0]
   4f8a4:	mvn	r4, #0
   4f8a8:	b	4f880 <__assert_fail@plt+0x3d28c>
   4f8ac:	mvn	r4, #0
   4f8b0:	b	4f880 <__assert_fail@plt+0x3d28c>
   4f8b4:	movw	r3, #62998	; 0xf616
   4f8b8:	movt	r3, #149	; 0x95
   4f8bc:	strd	r4, [sp, #-8]!
   4f8c0:	mov	r4, #0
   4f8c4:	mov	r5, #0
   4f8c8:	strd	r4, [r0, #16]
   4f8cc:	str	r3, [r0, #24]
   4f8d0:	ldrd	r4, [sp]
   4f8d4:	add	sp, sp, #8
   4f8d8:	bx	lr
   4f8dc:	ldr	r2, [r0, #24]
   4f8e0:	movw	r3, #62998	; 0xf616
   4f8e4:	movt	r3, #149	; 0x95
   4f8e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   4f8ec:	strd	r6, [sp, #8]
   4f8f0:	strd	r8, [sp, #16]
   4f8f4:	strd	sl, [sp, #24]
   4f8f8:	cmp	r2, r3
   4f8fc:	str	lr, [sp, #32]
   4f900:	sub	sp, sp, #4
   4f904:	bne	4f9b4 <__assert_fail@plt+0x3d3c0>
   4f908:	ldrd	r6, [r0, #16]
   4f90c:	ldrd	sl, [r1, #96]	; 0x60
   4f910:	orrs	r3, r6, r7
   4f914:	beq	4f968 <__assert_fail@plt+0x3d374>
   4f918:	ldrd	r2, [r0]
   4f91c:	cmp	r3, fp
   4f920:	cmpeq	r2, sl
   4f924:	beq	4f988 <__assert_fail@plt+0x3d394>
   4f928:	adds	r8, r6, #1
   4f92c:	adc	r9, r7, #0
   4f930:	and	r2, r6, r8
   4f934:	and	r3, r7, r9
   4f938:	orrs	r3, r2, r3
   4f93c:	strd	r8, [r0, #16]
   4f940:	movne	r1, #0
   4f944:	beq	4f9a4 <__assert_fail@plt+0x3d3b0>
   4f948:	mov	r0, r1
   4f94c:	add	sp, sp, #4
   4f950:	ldrd	r4, [sp]
   4f954:	ldrd	r6, [sp, #8]
   4f958:	ldrd	r8, [sp, #16]
   4f95c:	ldrd	sl, [sp, #24]
   4f960:	add	sp, sp, #32
   4f964:	pop	{pc}		; (ldr pc, [sp], #4)
   4f968:	mov	r2, #1
   4f96c:	mov	r3, #0
   4f970:	strd	r2, [r0, #16]
   4f974:	ldrd	r2, [r1]
   4f978:	mov	r1, #0
   4f97c:	strd	sl, [r0]
   4f980:	strd	r2, [r0, #8]
   4f984:	b	4f948 <__assert_fail@plt+0x3d354>
   4f988:	ldrd	r4, [r1]
   4f98c:	ldrd	r2, [r0, #8]
   4f990:	cmp	r5, r3
   4f994:	cmpeq	r4, r2
   4f998:	bne	4f928 <__assert_fail@plt+0x3d334>
   4f99c:	mov	r1, #1
   4f9a0:	b	4f948 <__assert_fail@plt+0x3d354>
   4f9a4:	orrs	r3, r8, r9
   4f9a8:	bne	4f974 <__assert_fail@plt+0x3d380>
   4f9ac:	mov	r1, #1
   4f9b0:	b	4f948 <__assert_fail@plt+0x3d354>
   4f9b4:	movw	r3, #26356	; 0x66f4
   4f9b8:	movt	r3, #5
   4f9bc:	movw	r1, #26368	; 0x6700
   4f9c0:	movt	r1, #5
   4f9c4:	movw	r0, #26384	; 0x6710
   4f9c8:	movt	r0, #5
   4f9cc:	mov	r2, #60	; 0x3c
   4f9d0:	bl	125f4 <__assert_fail@plt>
   4f9d4:	ldr	ip, [r0, #4]
   4f9d8:	cmp	ip, r1
   4f9dc:	bcs	4fa48 <__assert_fail@plt+0x3d454>
   4f9e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4f9e4:	mov	r5, r1
   4f9e8:	mov	r4, r0
   4f9ec:	strd	r6, [sp, #8]
   4f9f0:	umull	r6, r7, r1, r3
   4f9f4:	str	r8, [sp, #16]
   4f9f8:	mov	r8, r3
   4f9fc:	str	lr, [sp, #20]
   4fa00:	cmp	r7, #0
   4fa04:	bne	4fa8c <__assert_fail@plt+0x3d498>
   4fa08:	ldr	r0, [r0, #8]
   4fa0c:	cmp	r0, r2
   4fa10:	beq	4fa58 <__assert_fail@plt+0x3d464>
   4fa14:	mov	r1, r6
   4fa18:	bl	3bfb8 <__assert_fail@plt+0x299c4>
   4fa1c:	subs	r6, r0, #0
   4fa20:	beq	4fa84 <__assert_fail@plt+0x3d490>
   4fa24:	mov	r3, #1
   4fa28:	str	r5, [r4]
   4fa2c:	stmib	r4, {r5, r6}
   4fa30:	ldrd	r4, [sp]
   4fa34:	mov	r0, r3
   4fa38:	ldrd	r6, [sp, #8]
   4fa3c:	ldr	r8, [sp, #16]
   4fa40:	add	sp, sp, #20
   4fa44:	pop	{pc}		; (ldr pc, [sp], #4)
   4fa48:	mov	r3, #1
   4fa4c:	str	r1, [r0]
   4fa50:	mov	r0, r3
   4fa54:	bx	lr
   4fa58:	mov	r0, r6
   4fa5c:	bl	3b49c <__assert_fail@plt+0x28ea8>
   4fa60:	subs	r6, r0, #0
   4fa64:	beq	4fa84 <__assert_fail@plt+0x3d490>
   4fa68:	ldr	r1, [r4, #8]
   4fa6c:	cmp	r1, #0
   4fa70:	beq	4fa24 <__assert_fail@plt+0x3d430>
   4fa74:	ldr	r2, [r4]
   4fa78:	mul	r2, r2, r8
   4fa7c:	bl	12024 <memcpy@plt>
   4fa80:	b	4fa24 <__assert_fail@plt+0x3d430>
   4fa84:	mov	r3, #0
   4fa88:	b	4fa30 <__assert_fail@plt+0x3d43c>
   4fa8c:	bl	12348 <__errno_location@plt>
   4fa90:	mov	r2, #12
   4fa94:	mov	r3, #0
   4fa98:	str	r2, [r0]
   4fa9c:	b	4fa30 <__assert_fail@plt+0x3d43c>
   4faa0:	mov	r1, r0
   4faa4:	mov	r0, #0
   4faa8:	b	1200c <clock_gettime@plt>
   4faac:	str	r4, [sp, #-8]!
   4fab0:	mov	r4, r0
   4fab4:	mov	r0, #0
   4fab8:	str	lr, [sp, #4]
   4fabc:	sub	sp, sp, #8
   4fac0:	mov	r1, sp
   4fac4:	bl	1200c <clock_gettime@plt>
   4fac8:	ldrd	r2, [sp]
   4facc:	mov	r0, r4
   4fad0:	strd	r2, [r4]
   4fad4:	add	sp, sp, #8
   4fad8:	ldr	r4, [sp]
   4fadc:	add	sp, sp, #4
   4fae0:	pop	{pc}		; (ldr pc, [sp], #4)
   4fae4:	push	{lr}		; (str lr, [sp, #-4]!)
   4fae8:	sub	sp, sp, #268	; 0x10c
   4faec:	movw	r2, #257	; 0x101
   4faf0:	add	r1, sp, #4
   4faf4:	bl	50004 <__assert_fail@plt+0x3da10>
   4faf8:	cmp	r0, #0
   4fafc:	movne	r0, #0
   4fb00:	bne	4fb34 <__assert_fail@plt+0x3d540>
   4fb04:	movw	r1, #23280	; 0x5af0
   4fb08:	movt	r1, #5
   4fb0c:	add	r0, sp, #4
   4fb10:	bl	11f40 <strcmp@plt>
   4fb14:	cmp	r0, #0
   4fb18:	beq	4fb34 <__assert_fail@plt+0x3d540>
   4fb1c:	add	r0, sp, #4
   4fb20:	movw	r1, #26408	; 0x6728
   4fb24:	movt	r1, #5
   4fb28:	bl	11f40 <strcmp@plt>
   4fb2c:	adds	r0, r0, #0
   4fb30:	movne	r0, #1
   4fb34:	add	sp, sp, #268	; 0x10c
   4fb38:	pop	{pc}		; (ldr pc, [sp], #4)
   4fb3c:	mov	r3, #0
   4fb40:	mov	r2, #1
   4fb44:	str	r1, [r0]
   4fb48:	str	r1, [r0, #4]
   4fb4c:	str	r1, [r0, #8]
   4fb50:	str	r1, [r0, #12]
   4fb54:	str	r1, [r0, #16]
   4fb58:	str	r3, [r0, #20]
   4fb5c:	str	r3, [r0, #24]
   4fb60:	strb	r2, [r0, #28]
   4fb64:	bx	lr
   4fb68:	ldrb	r0, [r0, #28]
   4fb6c:	bx	lr
   4fb70:	ldrb	ip, [r0, #28]
   4fb74:	mov	r2, r0
   4fb78:	ldr	r3, [r0, #20]
   4fb7c:	eor	ip, ip, #1
   4fb80:	add	r3, ip, r3
   4fb84:	and	r3, r3, #3
   4fb88:	ldr	r0, [r0, r3, lsl #2]
   4fb8c:	str	r1, [r2, r3, lsl #2]
   4fb90:	ldr	r1, [r2, #24]
   4fb94:	str	r3, [r2, #20]
   4fb98:	cmp	r1, r3
   4fb9c:	bne	4fbac <__assert_fail@plt+0x3d5b8>
   4fba0:	add	ip, ip, r1
   4fba4:	and	ip, ip, #3
   4fba8:	str	ip, [r2, #24]
   4fbac:	mov	r3, #0
   4fbb0:	strb	r3, [r2, #28]
   4fbb4:	bx	lr
   4fbb8:	ldrb	r3, [r0, #28]
   4fbbc:	cmp	r3, #0
   4fbc0:	bne	4fbfc <__assert_fail@plt+0x3d608>
   4fbc4:	ldr	r1, [r0, #16]
   4fbc8:	ldr	r3, [r0, #20]
   4fbcc:	ldr	r2, [r0, r3, lsl #2]
   4fbd0:	str	r1, [r0, r3, lsl #2]
   4fbd4:	ldr	r1, [r0, #24]
   4fbd8:	cmp	r3, r1
   4fbdc:	moveq	r3, #1
   4fbe0:	strbeq	r3, [r0, #28]
   4fbe4:	beq	4fbf4 <__assert_fail@plt+0x3d600>
   4fbe8:	add	r3, r3, #3
   4fbec:	and	r3, r3, #3
   4fbf0:	str	r3, [r0, #20]
   4fbf4:	mov	r0, r2
   4fbf8:	bx	lr
   4fbfc:	str	r4, [sp, #-8]!
   4fc00:	str	lr, [sp, #4]
   4fc04:	bl	125a0 <abort@plt>
   4fc08:	mov	r0, #14
   4fc0c:	str	r4, [sp, #-8]!
   4fc10:	str	lr, [sp, #4]
   4fc14:	bl	12480 <nl_langinfo@plt>
   4fc18:	cmp	r0, #0
   4fc1c:	beq	4fc40 <__assert_fail@plt+0x3d64c>
   4fc20:	ldrb	r2, [r0]
   4fc24:	movw	r3, #26416	; 0x6730
   4fc28:	movt	r3, #5
   4fc2c:	ldr	r4, [sp]
   4fc30:	add	sp, sp, #4
   4fc34:	cmp	r2, #0
   4fc38:	moveq	r0, r3
   4fc3c:	pop	{pc}		; (ldr pc, [sp], #4)
   4fc40:	ldr	r4, [sp]
   4fc44:	add	sp, sp, #4
   4fc48:	movw	r0, #26416	; 0x6730
   4fc4c:	movt	r0, #5
   4fc50:	pop	{pc}		; (ldr pc, [sp], #4)
   4fc54:	adds	r3, r0, #16
   4fc58:	bmi	4fca4 <__assert_fail@plt+0x3d6b0>
   4fc5c:	cmp	r3, r0
   4fc60:	bcc	4fca4 <__assert_fail@plt+0x3d6b0>
   4fc64:	mov	r0, r3
   4fc68:	str	r4, [sp, #-8]!
   4fc6c:	str	lr, [sp, #4]
   4fc70:	bl	12240 <malloc@plt>
   4fc74:	cmp	r0, #0
   4fc78:	moveq	r0, #0
   4fc7c:	beq	4fc98 <__assert_fail@plt+0x3d6a4>
   4fc80:	add	r3, r0, #8
   4fc84:	rsb	r2, r0, #8
   4fc88:	bic	r3, r3, #15
   4fc8c:	add	r3, r3, r2
   4fc90:	add	r0, r0, r3
   4fc94:	strb	r3, [r0, #-1]
   4fc98:	ldr	r4, [sp]
   4fc9c:	add	sp, sp, #4
   4fca0:	pop	{pc}		; (ldr pc, [sp], #4)
   4fca4:	mov	r0, #0
   4fca8:	bx	lr
   4fcac:	tst	r0, #7
   4fcb0:	bne	4fcc8 <__assert_fail@plt+0x3d6d4>
   4fcb4:	tst	r0, #8
   4fcb8:	bxeq	lr
   4fcbc:	ldrb	r3, [r0, #-1]
   4fcc0:	sub	r0, r0, r3
   4fcc4:	b	38b10 <__assert_fail@plt+0x2651c>
   4fcc8:	str	r4, [sp, #-8]!
   4fccc:	str	lr, [sp, #4]
   4fcd0:	bl	125a0 <abort@plt>
   4fcd4:	str	r4, [sp, #-8]!
   4fcd8:	mov	r4, r0
   4fcdc:	str	lr, [sp, #4]
   4fce0:	bl	11fa0 <wcwidth@plt>
   4fce4:	cmp	r0, #0
   4fce8:	bge	4fcfc <__assert_fail@plt+0x3d708>
   4fcec:	mov	r0, r4
   4fcf0:	bl	12114 <iswcntrl@plt>
   4fcf4:	clz	r0, r0
   4fcf8:	lsr	r0, r0, #5
   4fcfc:	ldr	r4, [sp]
   4fd00:	add	sp, sp, #4
   4fd04:	pop	{pc}		; (ldr pc, [sp], #4)
   4fd08:	mov	r3, r1
   4fd0c:	strd	r4, [sp, #-16]!
   4fd10:	mov	r4, r1
   4fd14:	ldr	r2, [r1, #4]
   4fd18:	mov	r5, r0
   4fd1c:	ldr	r1, [r3], #16
   4fd20:	str	r6, [sp, #8]
   4fd24:	str	lr, [sp, #12]
   4fd28:	cmp	r1, r3
   4fd2c:	strne	r1, [r0]
   4fd30:	beq	4fd5c <__assert_fail@plt+0x3d768>
   4fd34:	ldrb	r3, [r4, #8]
   4fd38:	str	r2, [r5, #4]
   4fd3c:	ldr	r6, [sp, #8]
   4fd40:	cmp	r3, #0
   4fd44:	strb	r3, [r5, #8]
   4fd48:	ldrne	r3, [r4, #12]
   4fd4c:	strne	r3, [r5, #12]
   4fd50:	ldrd	r4, [sp]
   4fd54:	add	sp, sp, #12
   4fd58:	pop	{pc}		; (ldr pc, [sp], #4)
   4fd5c:	add	r3, r0, #16
   4fd60:	mov	r0, r3
   4fd64:	bl	12024 <memcpy@plt>
   4fd68:	ldr	r2, [r4, #4]
   4fd6c:	str	r0, [r5]
   4fd70:	b	4fd34 <__assert_fail@plt+0x3d740>
   4fd74:	lsr	r2, r0, #5
   4fd78:	movw	r3, #26424	; 0x6738
   4fd7c:	movt	r3, #5
   4fd80:	and	r0, r0, #31
   4fd84:	ldr	r3, [r3, r2, lsl #2]
   4fd88:	lsr	r0, r3, r0
   4fd8c:	and	r0, r0, #1
   4fd90:	bx	lr
   4fd94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   4fd98:	mov	r4, r0
   4fd9c:	strd	r6, [sp, #8]
   4fda0:	str	r8, [sp, #16]
   4fda4:	str	lr, [sp, #20]
   4fda8:	sub	sp, sp, #56	; 0x38
   4fdac:	bl	12198 <__ctype_get_mb_cur_max@plt>
   4fdb0:	cmp	r0, #1
   4fdb4:	bhi	4fde0 <__assert_fail@plt+0x3d7ec>
   4fdb8:	mov	r0, r4
   4fdbc:	bl	12300 <strlen@plt>
   4fdc0:	mov	r5, r0
   4fdc4:	mov	r0, r5
   4fdc8:	add	sp, sp, #56	; 0x38
   4fdcc:	ldrd	r4, [sp]
   4fdd0:	ldrd	r6, [sp, #8]
   4fdd4:	ldr	r8, [sp, #16]
   4fdd8:	add	sp, sp, #20
   4fddc:	pop	{pc}		; (ldr pc, [sp], #4)
   4fde0:	mov	r3, #0
   4fde4:	mov	r0, #0
   4fde8:	mov	r1, #0
   4fdec:	movw	r7, #26424	; 0x6738
   4fdf0:	movt	r7, #5
   4fdf4:	mov	r5, r3
   4fdf8:	strb	r3, [sp]
   4fdfc:	mov	r6, #1
   4fe00:	strd	r0, [sp, #4]
   4fe04:	strb	r3, [sp, #12]
   4fe08:	str	r4, [sp, #16]
   4fe0c:	b	4fe64 <__assert_fail@plt+0x3d870>
   4fe10:	ldrb	r3, [r4]
   4fe14:	lsr	r2, r3, #5
   4fe18:	and	r3, r3, #31
   4fe1c:	ldr	r2, [r7, r2, lsl #2]
   4fe20:	lsr	r3, r2, r3
   4fe24:	tst	r3, #1
   4fe28:	beq	4fed4 <__assert_fail@plt+0x3d8e0>
   4fe2c:	str	r6, [sp, #20]
   4fe30:	ldrb	r3, [r4]
   4fe34:	strb	r6, [sp, #24]
   4fe38:	mov	r4, r3
   4fe3c:	str	r3, [sp, #28]
   4fe40:	cmp	r4, #0
   4fe44:	beq	4fdc4 <__assert_fail@plt+0x3d7d0>
   4fe48:	ldr	r4, [sp, #16]
   4fe4c:	mov	r2, #0
   4fe50:	add	r5, r5, #1
   4fe54:	ldr	r3, [sp, #20]
   4fe58:	strb	r2, [sp, #12]
   4fe5c:	add	r4, r4, r3
   4fe60:	str	r4, [sp, #16]
   4fe64:	ldrb	r3, [sp]
   4fe68:	cmp	r3, #0
   4fe6c:	addne	r8, sp, #4
   4fe70:	beq	4fe10 <__assert_fail@plt+0x3d81c>
   4fe74:	bl	12198 <__ctype_get_mb_cur_max@plt>
   4fe78:	mov	r1, r0
   4fe7c:	mov	r0, r4
   4fe80:	bl	360c8 <__assert_fail@plt+0x23ad4>
   4fe84:	mov	r2, r0
   4fe88:	mov	r3, r8
   4fe8c:	mov	r1, r4
   4fe90:	add	r0, sp, #28
   4fe94:	bl	3b4d8 <__assert_fail@plt+0x28ee4>
   4fe98:	cmn	r0, #1
   4fe9c:	str	r0, [sp, #20]
   4fea0:	beq	4fef0 <__assert_fail@plt+0x3d8fc>
   4fea4:	cmn	r0, #2
   4fea8:	beq	4ff04 <__assert_fail@plt+0x3d910>
   4feac:	cmp	r0, #0
   4feb0:	beq	4ff20 <__assert_fail@plt+0x3d92c>
   4feb4:	ldr	r4, [sp, #28]
   4feb8:	mov	r0, r8
   4febc:	strb	r6, [sp, #24]
   4fec0:	bl	12060 <mbsinit@plt>
   4fec4:	cmp	r0, #0
   4fec8:	movne	r3, #0
   4fecc:	strbne	r3, [sp]
   4fed0:	b	4fe40 <__assert_fail@plt+0x3d84c>
   4fed4:	add	r8, sp, #4
   4fed8:	mov	r0, r8
   4fedc:	bl	12060 <mbsinit@plt>
   4fee0:	cmp	r0, #0
   4fee4:	beq	4ff60 <__assert_fail@plt+0x3d96c>
   4fee8:	strb	r6, [sp]
   4feec:	b	4fe74 <__assert_fail@plt+0x3d880>
   4fef0:	mov	r3, #0
   4fef4:	str	r6, [sp, #20]
   4fef8:	ldr	r4, [sp, #16]
   4fefc:	strb	r3, [sp, #24]
   4ff00:	b	4fe4c <__assert_fail@plt+0x3d858>
   4ff04:	ldr	r4, [sp, #16]
   4ff08:	mov	r0, r4
   4ff0c:	bl	12300 <strlen@plt>
   4ff10:	mov	r3, #0
   4ff14:	str	r0, [sp, #20]
   4ff18:	strb	r3, [sp, #24]
   4ff1c:	b	4fe4c <__assert_fail@plt+0x3d858>
   4ff20:	ldr	r4, [sp, #16]
   4ff24:	str	r6, [sp, #20]
   4ff28:	ldrb	r3, [r4]
   4ff2c:	cmp	r3, #0
   4ff30:	bne	4ff80 <__assert_fail@plt+0x3d98c>
   4ff34:	ldr	r4, [sp, #28]
   4ff38:	cmp	r4, #0
   4ff3c:	beq	4feb8 <__assert_fail@plt+0x3d8c4>
   4ff40:	movw	r3, #26456	; 0x6758
   4ff44:	movt	r3, #5
   4ff48:	movw	r1, #20280	; 0x4f38
   4ff4c:	movt	r1, #5
   4ff50:	movw	r0, #20292	; 0x4f44
   4ff54:	movt	r0, #5
   4ff58:	mov	r2, #172	; 0xac
   4ff5c:	bl	125f4 <__assert_fail@plt>
   4ff60:	movw	r3, #26456	; 0x6758
   4ff64:	movt	r3, #5
   4ff68:	movw	r1, #20280	; 0x4f38
   4ff6c:	movt	r1, #5
   4ff70:	movw	r0, #20312	; 0x4f58
   4ff74:	movt	r0, #5
   4ff78:	mov	r2, #143	; 0x8f
   4ff7c:	bl	125f4 <__assert_fail@plt>
   4ff80:	movw	r3, #26456	; 0x6758
   4ff84:	movt	r3, #5
   4ff88:	movw	r1, #20280	; 0x4f38
   4ff8c:	movt	r1, #5
   4ff90:	movw	r0, #20336	; 0x4f70
   4ff94:	movt	r0, #5
   4ff98:	mov	r2, #171	; 0xab
   4ff9c:	bl	125f4 <__assert_fail@plt>
   4ffa0:	orr	r2, r2, #540672	; 0x84000
   4ffa4:	strd	r4, [sp, #-16]!
   4ffa8:	orr	r2, r2, #2304	; 0x900
   4ffac:	str	r6, [sp, #8]
   4ffb0:	mov	r6, r3
   4ffb4:	str	lr, [sp, #12]
   4ffb8:	bl	2da54 <__assert_fail@plt+0x1b460>
   4ffbc:	subs	r5, r0, #0
   4ffc0:	movlt	r4, #0
   4ffc4:	blt	4ffd8 <__assert_fail@plt+0x3d9e4>
   4ffc8:	bl	124c8 <fdopendir@plt>
   4ffcc:	subs	r4, r0, #0
   4ffd0:	beq	4ffec <__assert_fail@plt+0x3d9f8>
   4ffd4:	str	r5, [r6]
   4ffd8:	mov	r0, r4
   4ffdc:	ldrd	r4, [sp]
   4ffe0:	ldr	r6, [sp, #8]
   4ffe4:	add	sp, sp, #12
   4ffe8:	pop	{pc}		; (ldr pc, [sp], #4)
   4ffec:	bl	12348 <__errno_location@plt>
   4fff0:	mov	r6, r0
   4fff4:	mov	r0, r5
   4fff8:	ldr	r5, [r6]
   4fffc:	bl	125ac <close@plt>
   50000:	b	4ffd4 <__assert_fail@plt+0x3d9e0>
   50004:	strd	r4, [sp, #-16]!
   50008:	mov	r5, r1
   5000c:	mov	r1, #0
   50010:	mov	r4, r2
   50014:	str	r6, [sp, #8]
   50018:	str	lr, [sp, #12]
   5001c:	bl	12444 <setlocale@plt>
   50020:	subs	r6, r0, #0
   50024:	beq	500a4 <__assert_fail@plt+0x3dab0>
   50028:	bl	12300 <strlen@plt>
   5002c:	cmp	r4, r0
   50030:	bhi	50050 <__assert_fail@plt+0x3da5c>
   50034:	cmp	r4, #0
   50038:	moveq	r0, #34	; 0x22
   5003c:	bne	50074 <__assert_fail@plt+0x3da80>
   50040:	ldrd	r4, [sp]
   50044:	ldr	r6, [sp, #8]
   50048:	add	sp, sp, #12
   5004c:	pop	{pc}		; (ldr pc, [sp], #4)
   50050:	add	r2, r0, #1
   50054:	mov	r1, r6
   50058:	mov	r0, r5
   5005c:	bl	12024 <memcpy@plt>
   50060:	ldrd	r4, [sp]
   50064:	mov	r0, #0
   50068:	ldr	r6, [sp, #8]
   5006c:	add	sp, sp, #12
   50070:	pop	{pc}		; (ldr pc, [sp], #4)
   50074:	sub	r4, r4, #1
   50078:	mov	r1, r6
   5007c:	mov	r2, r4
   50080:	mov	r0, r5
   50084:	bl	12024 <memcpy@plt>
   50088:	mov	r3, #0
   5008c:	mov	r0, #34	; 0x22
   50090:	strb	r3, [r5, r4]
   50094:	ldrd	r4, [sp]
   50098:	ldr	r6, [sp, #8]
   5009c:	add	sp, sp, #12
   500a0:	pop	{pc}		; (ldr pc, [sp], #4)
   500a4:	cmp	r4, #0
   500a8:	mov	r0, #22
   500ac:	strbne	r6, [r5]
   500b0:	ldrd	r4, [sp]
   500b4:	ldr	r6, [sp, #8]
   500b8:	add	sp, sp, #12
   500bc:	pop	{pc}		; (ldr pc, [sp], #4)
   500c0:	mov	r1, #0
   500c4:	b	12444 <setlocale@plt>
   500c8:	eor	r1, r1, #-2147483648	; 0x80000000
   500cc:	b	500d4 <__assert_fail@plt+0x3dae0>
   500d0:	eor	r3, r3, #-2147483648	; 0x80000000
   500d4:	push	{r4, r5, lr}
   500d8:	lsl	r4, r1, #1
   500dc:	lsl	r5, r3, #1
   500e0:	teq	r4, r5
   500e4:	teqeq	r0, r2
   500e8:	orrsne	ip, r4, r0
   500ec:	orrsne	ip, r5, r2
   500f0:	mvnsne	ip, r4, asr #21
   500f4:	mvnsne	ip, r5, asr #21
   500f8:	beq	502e4 <__assert_fail@plt+0x3dcf0>
   500fc:	lsr	r4, r4, #21
   50100:	rsbs	r5, r4, r5, lsr #21
   50104:	rsblt	r5, r5, #0
   50108:	ble	50128 <__assert_fail@plt+0x3db34>
   5010c:	add	r4, r4, r5
   50110:	eor	r2, r0, r2
   50114:	eor	r3, r1, r3
   50118:	eor	r0, r2, r0
   5011c:	eor	r1, r3, r1
   50120:	eor	r2, r0, r2
   50124:	eor	r3, r1, r3
   50128:	cmp	r5, #54	; 0x36
   5012c:	pophi	{r4, r5, pc}
   50130:	tst	r1, #-2147483648	; 0x80000000
   50134:	lsl	r1, r1, #12
   50138:	mov	ip, #1048576	; 0x100000
   5013c:	orr	r1, ip, r1, lsr #12
   50140:	beq	5014c <__assert_fail@plt+0x3db58>
   50144:	rsbs	r0, r0, #0
   50148:	rsc	r1, r1, #0
   5014c:	tst	r3, #-2147483648	; 0x80000000
   50150:	lsl	r3, r3, #12
   50154:	orr	r3, ip, r3, lsr #12
   50158:	beq	50164 <__assert_fail@plt+0x3db70>
   5015c:	rsbs	r2, r2, #0
   50160:	rsc	r3, r3, #0
   50164:	teq	r4, r5
   50168:	beq	502cc <__assert_fail@plt+0x3dcd8>
   5016c:	sub	r4, r4, #1
   50170:	rsbs	lr, r5, #32
   50174:	blt	50190 <__assert_fail@plt+0x3db9c>
   50178:	lsl	ip, r2, lr
   5017c:	adds	r0, r0, r2, lsr r5
   50180:	adc	r1, r1, #0
   50184:	adds	r0, r0, r3, lsl lr
   50188:	adcs	r1, r1, r3, asr r5
   5018c:	b	501ac <__assert_fail@plt+0x3dbb8>
   50190:	sub	r5, r5, #32
   50194:	add	lr, lr, #32
   50198:	cmp	r2, #1
   5019c:	lsl	ip, r3, lr
   501a0:	orrcs	ip, ip, #2
   501a4:	adds	r0, r0, r3, asr r5
   501a8:	adcs	r1, r1, r3, asr #31
   501ac:	and	r5, r1, #-2147483648	; 0x80000000
   501b0:	bpl	501c0 <__assert_fail@plt+0x3dbcc>
   501b4:	rsbs	ip, ip, #0
   501b8:	rscs	r0, r0, #0
   501bc:	rsc	r1, r1, #0
   501c0:	cmp	r1, #1048576	; 0x100000
   501c4:	bcc	50204 <__assert_fail@plt+0x3dc10>
   501c8:	cmp	r1, #2097152	; 0x200000
   501cc:	bcc	501ec <__assert_fail@plt+0x3dbf8>
   501d0:	lsrs	r1, r1, #1
   501d4:	rrxs	r0, r0
   501d8:	rrx	ip, ip
   501dc:	add	r4, r4, #1
   501e0:	lsl	r2, r4, #21
   501e4:	cmn	r2, #4194304	; 0x400000
   501e8:	bcs	50344 <__assert_fail@plt+0x3dd50>
   501ec:	cmp	ip, #-2147483648	; 0x80000000
   501f0:	lsrseq	ip, r0, #1
   501f4:	adcs	r0, r0, #0
   501f8:	adc	r1, r1, r4, lsl #20
   501fc:	orr	r1, r1, r5
   50200:	pop	{r4, r5, pc}
   50204:	lsls	ip, ip, #1
   50208:	adcs	r0, r0, r0
   5020c:	adc	r1, r1, r1
   50210:	tst	r1, #1048576	; 0x100000
   50214:	sub	r4, r4, #1
   50218:	bne	501ec <__assert_fail@plt+0x3dbf8>
   5021c:	teq	r1, #0
   50220:	moveq	r1, r0
   50224:	moveq	r0, #0
   50228:	clz	r3, r1
   5022c:	addeq	r3, r3, #32
   50230:	sub	r3, r3, #11
   50234:	subs	r2, r3, #32
   50238:	bge	5025c <__assert_fail@plt+0x3dc68>
   5023c:	adds	r2, r2, #12
   50240:	ble	50258 <__assert_fail@plt+0x3dc64>
   50244:	add	ip, r2, #20
   50248:	rsb	r2, r2, #12
   5024c:	lsl	r0, r1, ip
   50250:	lsr	r1, r1, r2
   50254:	b	5026c <__assert_fail@plt+0x3dc78>
   50258:	add	r2, r2, #20
   5025c:	rsble	ip, r2, #32
   50260:	lsl	r1, r1, r2
   50264:	orrle	r1, r1, r0, lsr ip
   50268:	lslle	r0, r0, r2
   5026c:	subs	r4, r4, r3
   50270:	addge	r1, r1, r4, lsl #20
   50274:	orrge	r1, r1, r5
   50278:	popge	{r4, r5, pc}
   5027c:	mvn	r4, r4
   50280:	subs	r4, r4, #31
   50284:	bge	502c0 <__assert_fail@plt+0x3dccc>
   50288:	adds	r4, r4, #12
   5028c:	bgt	502a8 <__assert_fail@plt+0x3dcb4>
   50290:	add	r4, r4, #20
   50294:	rsb	r2, r4, #32
   50298:	lsr	r0, r0, r4
   5029c:	orr	r0, r0, r1, lsl r2
   502a0:	orr	r1, r5, r1, lsr r4
   502a4:	pop	{r4, r5, pc}
   502a8:	rsb	r4, r4, #12
   502ac:	rsb	r2, r4, #32
   502b0:	lsr	r0, r0, r2
   502b4:	orr	r0, r0, r1, lsl r4
   502b8:	mov	r1, r5
   502bc:	pop	{r4, r5, pc}
   502c0:	lsr	r0, r1, r4
   502c4:	mov	r1, r5
   502c8:	pop	{r4, r5, pc}
   502cc:	teq	r4, #0
   502d0:	eor	r3, r3, #1048576	; 0x100000
   502d4:	eoreq	r1, r1, #1048576	; 0x100000
   502d8:	addeq	r4, r4, #1
   502dc:	subne	r5, r5, #1
   502e0:	b	5016c <__assert_fail@plt+0x3db78>
   502e4:	mvns	ip, r4, asr #21
   502e8:	mvnsne	ip, r5, asr #21
   502ec:	beq	50354 <__assert_fail@plt+0x3dd60>
   502f0:	teq	r4, r5
   502f4:	teqeq	r0, r2
   502f8:	beq	5030c <__assert_fail@plt+0x3dd18>
   502fc:	orrs	ip, r4, r0
   50300:	moveq	r1, r3
   50304:	moveq	r0, r2
   50308:	pop	{r4, r5, pc}
   5030c:	teq	r1, r3
   50310:	movne	r1, #0
   50314:	movne	r0, #0
   50318:	popne	{r4, r5, pc}
   5031c:	lsrs	ip, r4, #21
   50320:	bne	50334 <__assert_fail@plt+0x3dd40>
   50324:	lsls	r0, r0, #1
   50328:	adcs	r1, r1, r1
   5032c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   50330:	pop	{r4, r5, pc}
   50334:	adds	r4, r4, #4194304	; 0x400000
   50338:	addcc	r1, r1, #1048576	; 0x100000
   5033c:	popcc	{r4, r5, pc}
   50340:	and	r5, r1, #-2147483648	; 0x80000000
   50344:	orr	r1, r5, #2130706432	; 0x7f000000
   50348:	orr	r1, r1, #15728640	; 0xf00000
   5034c:	mov	r0, #0
   50350:	pop	{r4, r5, pc}
   50354:	mvns	ip, r4, asr #21
   50358:	movne	r1, r3
   5035c:	movne	r0, r2
   50360:	mvnseq	ip, r5, asr #21
   50364:	movne	r3, r1
   50368:	movne	r2, r0
   5036c:	orrs	r4, r0, r1, lsl #12
   50370:	orrseq	r5, r2, r3, lsl #12
   50374:	teqeq	r1, r3
   50378:	orrne	r1, r1, #524288	; 0x80000
   5037c:	pop	{r4, r5, pc}
   50380:	teq	r0, #0
   50384:	moveq	r1, #0
   50388:	bxeq	lr
   5038c:	push	{r4, r5, lr}
   50390:	mov	r4, #1024	; 0x400
   50394:	add	r4, r4, #50	; 0x32
   50398:	mov	r5, #0
   5039c:	mov	r1, #0
   503a0:	b	5021c <__assert_fail@plt+0x3dc28>
   503a4:	teq	r0, #0
   503a8:	moveq	r1, #0
   503ac:	bxeq	lr
   503b0:	push	{r4, r5, lr}
   503b4:	mov	r4, #1024	; 0x400
   503b8:	add	r4, r4, #50	; 0x32
   503bc:	ands	r5, r0, #-2147483648	; 0x80000000
   503c0:	rsbmi	r0, r0, #0
   503c4:	mov	r1, #0
   503c8:	b	5021c <__assert_fail@plt+0x3dc28>
   503cc:	lsls	r2, r0, #1
   503d0:	asr	r1, r2, #3
   503d4:	rrx	r1, r1
   503d8:	lsl	r0, r2, #28
   503dc:	andsne	r3, r2, #-16777216	; 0xff000000
   503e0:	teqne	r3, #-16777216	; 0xff000000
   503e4:	eorne	r1, r1, #939524096	; 0x38000000
   503e8:	bxne	lr
   503ec:	bics	r2, r2, #-16777216	; 0xff000000
   503f0:	bxeq	lr
   503f4:	teq	r3, #-16777216	; 0xff000000
   503f8:	orreq	r1, r1, #524288	; 0x80000
   503fc:	bxeq	lr
   50400:	push	{r4, r5, lr}
   50404:	mov	r4, #896	; 0x380
   50408:	and	r5, r1, #-2147483648	; 0x80000000
   5040c:	bic	r1, r1, #-2147483648	; 0x80000000
   50410:	b	5021c <__assert_fail@plt+0x3dc28>
   50414:	orrs	r2, r0, r1
   50418:	bxeq	lr
   5041c:	push	{r4, r5, lr}
   50420:	mov	r5, #0
   50424:	b	50444 <__assert_fail@plt+0x3de50>
   50428:	orrs	r2, r0, r1
   5042c:	bxeq	lr
   50430:	push	{r4, r5, lr}
   50434:	ands	r5, r1, #-2147483648	; 0x80000000
   50438:	bpl	50444 <__assert_fail@plt+0x3de50>
   5043c:	rsbs	r0, r0, #0
   50440:	rsc	r1, r1, #0
   50444:	mov	r4, #1024	; 0x400
   50448:	add	r4, r4, #50	; 0x32
   5044c:	lsrs	ip, r1, #22
   50450:	beq	501c0 <__assert_fail@plt+0x3dbcc>
   50454:	mov	r2, #3
   50458:	lsrs	ip, ip, #3
   5045c:	addne	r2, r2, #3
   50460:	lsrs	ip, ip, #3
   50464:	addne	r2, r2, #3
   50468:	add	r2, r2, ip, lsr #3
   5046c:	rsb	r3, r2, #32
   50470:	lsl	ip, r0, r3
   50474:	lsr	r0, r0, r2
   50478:	orr	r0, r0, r1, lsl r3
   5047c:	lsr	r1, r1, r2
   50480:	add	r4, r4, r2
   50484:	b	501c0 <__assert_fail@plt+0x3dbcc>
   50488:	cmp	r3, #0
   5048c:	cmpeq	r2, #0
   50490:	bne	504b4 <__assert_fail@plt+0x3dec0>
   50494:	cmp	r1, #0
   50498:	movlt	r1, #-2147483648	; 0x80000000
   5049c:	movlt	r0, #0
   504a0:	blt	504b0 <__assert_fail@plt+0x3debc>
   504a4:	cmpeq	r0, #0
   504a8:	mvnne	r1, #-2147483648	; 0x80000000
   504ac:	mvnne	r0, #0
   504b0:	b	50598 <__assert_fail@plt+0x3dfa4>
   504b4:	sub	sp, sp, #8
   504b8:	push	{sp, lr}
   504bc:	cmp	r1, #0
   504c0:	blt	504e0 <__assert_fail@plt+0x3deec>
   504c4:	cmp	r3, #0
   504c8:	blt	50514 <__assert_fail@plt+0x3df20>
   504cc:	bl	505e8 <__assert_fail@plt+0x3dff4>
   504d0:	ldr	lr, [sp, #4]
   504d4:	add	sp, sp, #8
   504d8:	pop	{r2, r3}
   504dc:	bx	lr
   504e0:	rsbs	r0, r0, #0
   504e4:	sbc	r1, r1, r1, lsl #1
   504e8:	cmp	r3, #0
   504ec:	blt	50538 <__assert_fail@plt+0x3df44>
   504f0:	bl	505e8 <__assert_fail@plt+0x3dff4>
   504f4:	ldr	lr, [sp, #4]
   504f8:	add	sp, sp, #8
   504fc:	pop	{r2, r3}
   50500:	rsbs	r0, r0, #0
   50504:	sbc	r1, r1, r1, lsl #1
   50508:	rsbs	r2, r2, #0
   5050c:	sbc	r3, r3, r3, lsl #1
   50510:	bx	lr
   50514:	rsbs	r2, r2, #0
   50518:	sbc	r3, r3, r3, lsl #1
   5051c:	bl	505e8 <__assert_fail@plt+0x3dff4>
   50520:	ldr	lr, [sp, #4]
   50524:	add	sp, sp, #8
   50528:	pop	{r2, r3}
   5052c:	rsbs	r0, r0, #0
   50530:	sbc	r1, r1, r1, lsl #1
   50534:	bx	lr
   50538:	rsbs	r2, r2, #0
   5053c:	sbc	r3, r3, r3, lsl #1
   50540:	bl	505e8 <__assert_fail@plt+0x3dff4>
   50544:	ldr	lr, [sp, #4]
   50548:	add	sp, sp, #8
   5054c:	pop	{r2, r3}
   50550:	rsbs	r2, r2, #0
   50554:	sbc	r3, r3, r3, lsl #1
   50558:	bx	lr
   5055c:	cmp	r3, #0
   50560:	cmpeq	r2, #0
   50564:	bne	5057c <__assert_fail@plt+0x3df88>
   50568:	cmp	r1, #0
   5056c:	cmpeq	r0, #0
   50570:	mvnne	r1, #0
   50574:	mvnne	r0, #0
   50578:	b	50598 <__assert_fail@plt+0x3dfa4>
   5057c:	sub	sp, sp, #8
   50580:	push	{sp, lr}
   50584:	bl	505e8 <__assert_fail@plt+0x3dff4>
   50588:	ldr	lr, [sp, #4]
   5058c:	add	sp, sp, #8
   50590:	pop	{r2, r3}
   50594:	bx	lr
   50598:	push	{r1, lr}
   5059c:	mov	r0, #8
   505a0:	bl	11eec <raise@plt>
   505a4:	pop	{r1, pc}
   505a8:	vmov	d6, r0, r1
   505ac:	vldr	d7, [pc, #36]	; 505d8 <__assert_fail@plt+0x3dfe4>
   505b0:	vldr	d5, [pc, #40]	; 505e0 <__assert_fail@plt+0x3dfec>
   505b4:	vmul.f64	d7, d6, d7
   505b8:	vcvt.u32.f64	s14, d7
   505bc:	vcvt.f64.u32	d4, s14
   505c0:	vmov	r1, s14
   505c4:	vmls.f64	d6, d4, d5
   505c8:	vcvt.u32.f64	s15, d6
   505cc:	vmov	r0, s15
   505d0:	bx	lr
   505d4:	nop			; (mov r0, r0)
   505d8:	andeq	r0, r0, r0
   505dc:	ldclcc	0, cr0, [r0]
   505e0:	andeq	r0, r0, r0
   505e4:	mvnsmi	r0, r0
   505e8:	cmp	r1, r3
   505ec:	cmpeq	r0, r2
   505f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   505f4:	mov	r4, r0
   505f8:	movcc	r0, #0
   505fc:	mov	r5, r1
   50600:	ldr	lr, [sp, #36]	; 0x24
   50604:	movcc	r1, r0
   50608:	bcc	50704 <__assert_fail@plt+0x3e110>
   5060c:	cmp	r3, #0
   50610:	clzeq	ip, r2
   50614:	clzne	ip, r3
   50618:	addeq	ip, ip, #32
   5061c:	cmp	r5, #0
   50620:	clzeq	r1, r4
   50624:	addeq	r1, r1, #32
   50628:	clzne	r1, r5
   5062c:	sub	ip, ip, r1
   50630:	sub	sl, ip, #32
   50634:	lsl	r9, r3, ip
   50638:	rsb	fp, ip, #32
   5063c:	orr	r9, r9, r2, lsl sl
   50640:	orr	r9, r9, r2, lsr fp
   50644:	lsl	r8, r2, ip
   50648:	cmp	r5, r9
   5064c:	cmpeq	r4, r8
   50650:	movcc	r0, #0
   50654:	movcc	r1, r0
   50658:	bcc	50674 <__assert_fail@plt+0x3e080>
   5065c:	mov	r0, #1
   50660:	subs	r4, r4, r8
   50664:	lsl	r1, r0, sl
   50668:	orr	r1, r1, r0, lsr fp
   5066c:	lsl	r0, r0, ip
   50670:	sbc	r5, r5, r9
   50674:	cmp	ip, #0
   50678:	beq	50704 <__assert_fail@plt+0x3e110>
   5067c:	lsr	r6, r8, #1
   50680:	orr	r6, r6, r9, lsl #31
   50684:	lsr	r7, r9, #1
   50688:	mov	r2, ip
   5068c:	b	506b0 <__assert_fail@plt+0x3e0bc>
   50690:	subs	r3, r4, r6
   50694:	sbc	r8, r5, r7
   50698:	adds	r3, r3, r3
   5069c:	adc	r8, r8, r8
   506a0:	adds	r4, r3, #1
   506a4:	adc	r5, r8, #0
   506a8:	subs	r2, r2, #1
   506ac:	beq	506cc <__assert_fail@plt+0x3e0d8>
   506b0:	cmp	r5, r7
   506b4:	cmpeq	r4, r6
   506b8:	bcs	50690 <__assert_fail@plt+0x3e09c>
   506bc:	adds	r4, r4, r4
   506c0:	adc	r5, r5, r5
   506c4:	subs	r2, r2, #1
   506c8:	bne	506b0 <__assert_fail@plt+0x3e0bc>
   506cc:	lsr	r3, r4, ip
   506d0:	orr	r3, r3, r5, lsl fp
   506d4:	lsr	r2, r5, ip
   506d8:	orr	r3, r3, r5, lsr sl
   506dc:	adds	r0, r0, r4
   506e0:	mov	r4, r3
   506e4:	lsl	r3, r2, ip
   506e8:	orr	r3, r3, r4, lsl sl
   506ec:	lsl	ip, r4, ip
   506f0:	orr	r3, r3, r4, lsr fp
   506f4:	adc	r1, r1, r5
   506f8:	subs	r0, r0, ip
   506fc:	mov	r5, r2
   50700:	sbc	r1, r1, r3
   50704:	cmp	lr, #0
   50708:	strdne	r4, [lr]
   5070c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   50710:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   50714:	mov	r7, r0
   50718:	ldr	r6, [pc, #72]	; 50768 <__assert_fail@plt+0x3e174>
   5071c:	ldr	r5, [pc, #72]	; 5076c <__assert_fail@plt+0x3e178>
   50720:	add	r6, pc, r6
   50724:	add	r5, pc, r5
   50728:	sub	r6, r6, r5
   5072c:	mov	r8, r1
   50730:	mov	r9, r2
   50734:	bl	11e84 <pthread_mutex_unlock@plt-0x20>
   50738:	asrs	r6, r6, #2
   5073c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   50740:	mov	r4, #0
   50744:	add	r4, r4, #1
   50748:	ldr	r3, [r5], #4
   5074c:	mov	r2, r9
   50750:	mov	r1, r8
   50754:	mov	r0, r7
   50758:	blx	r3
   5075c:	cmp	r6, r4
   50760:	bne	50744 <__assert_fail@plt+0x3e150>
   50764:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   50768:	ldrdeq	r6, [r1], -ip
   5076c:	ldrdeq	r6, [r1], -r4
   50770:	bx	lr
   50774:	ldr	r3, [pc, #12]	; 50788 <__assert_fail@plt+0x3e194>
   50778:	mov	r1, #0
   5077c:	add	r3, pc, r3
   50780:	ldr	r2, [r3]
   50784:	b	1236c <__cxa_atexit@plt>
   50788:	andeq	r6, r1, r4, lsl #22

Disassembly of section .fini:

0005078c <.fini>:
   5078c:	push	{r3, lr}
   50790:	pop	{r3, pc}
