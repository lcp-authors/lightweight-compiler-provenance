
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010cb0 <.init>:
   10cb0:	push	{r3, lr}
   10cb4:	bl	12108 <__assert_fail@plt+0x11b0>
   10cb8:	pop	{r3, pc}

Disassembly of section .plt:

00010cbc <calloc@plt-0x14>:
   10cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc0:	ldr	lr, [pc, #4]	; 10ccc <calloc@plt-0x4>
   10cc4:	add	lr, pc, lr
   10cc8:	ldr	pc, [lr, #8]!
   10ccc:	andeq	r8, r1, r4, lsr r3

00010cd0 <calloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #24, 20	; 0x18000
   10cd8:	ldr	pc, [ip, #820]!	; 0x334

00010cdc <fputs_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #24, 20	; 0x18000
   10ce4:	ldr	pc, [ip, #812]!	; 0x32c

00010ce8 <raise@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #24, 20	; 0x18000
   10cf0:	ldr	pc, [ip, #804]!	; 0x324

00010cf4 <strcmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #24, 20	; 0x18000
   10cfc:	ldr	pc, [ip, #796]!	; 0x31c

00010d00 <read@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #24, 20	; 0x18000
   10d08:	ldr	pc, [ip, #788]!	; 0x314

00010d0c <fflush@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #24, 20	; 0x18000
   10d14:	ldr	pc, [ip, #780]!	; 0x30c

00010d18 <free@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #24, 20	; 0x18000
   10d20:	ldr	pc, [ip, #772]!	; 0x304

00010d24 <_exit@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #24, 20	; 0x18000
   10d2c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d30 <memcpy@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #24, 20	; 0x18000
   10d38:	ldr	pc, [ip, #756]!	; 0x2f4

00010d3c <__strtoull_internal@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #24, 20	; 0x18000
   10d44:	ldr	pc, [ip, #748]!	; 0x2ec

00010d48 <mbsinit@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #24, 20	; 0x18000
   10d50:	ldr	pc, [ip, #740]!	; 0x2e4

00010d54 <fwrite_unlocked@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #24, 20	; 0x18000
   10d5c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d60 <memcmp@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #24, 20	; 0x18000
   10d68:	ldr	pc, [ip, #724]!	; 0x2d4

00010d6c <fputc_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #24, 20	; 0x18000
   10d74:	ldr	pc, [ip, #716]!	; 0x2cc

00010d78 <dcgettext@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #24, 20	; 0x18000
   10d80:	ldr	pc, [ip, #708]!	; 0x2c4

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #24, 20	; 0x18000
   10d8c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #24, 20	; 0x18000
   10d98:	ldr	pc, [ip, #692]!	; 0x2b4

00010d9c <rawmemchr@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #24, 20	; 0x18000
   10da4:	ldr	pc, [ip, #684]!	; 0x2ac

00010da8 <iswprint@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #24, 20	; 0x18000
   10db0:	ldr	pc, [ip, #676]!	; 0x2a4

00010db4 <__fxstat64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #24, 20	; 0x18000
   10dbc:	ldr	pc, [ip, #668]!	; 0x29c

00010dc0 <fwrite@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #24, 20	; 0x18000
   10dc8:	ldr	pc, [ip, #660]!	; 0x294

00010dcc <lseek64@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #24, 20	; 0x18000
   10dd4:	ldr	pc, [ip, #652]!	; 0x28c

00010dd8 <__ctype_get_mb_cur_max@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #24, 20	; 0x18000
   10de0:	ldr	pc, [ip, #644]!	; 0x284

00010de4 <__fpending@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #24, 20	; 0x18000
   10dec:	ldr	pc, [ip, #636]!	; 0x27c

00010df0 <mbrtowc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #24, 20	; 0x18000
   10df8:	ldr	pc, [ip, #628]!	; 0x274

00010dfc <error@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #24, 20	; 0x18000
   10e04:	ldr	pc, [ip, #620]!	; 0x26c

00010e08 <open64@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #24, 20	; 0x18000
   10e10:	ldr	pc, [ip, #612]!	; 0x264

00010e14 <malloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #24, 20	; 0x18000
   10e1c:	ldr	pc, [ip, #604]!	; 0x25c

00010e20 <__libc_start_main@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #24, 20	; 0x18000
   10e28:	ldr	pc, [ip, #596]!	; 0x254

00010e2c <__freading@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #24, 20	; 0x18000
   10e34:	ldr	pc, [ip, #588]!	; 0x24c

00010e38 <__gmon_start__@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #24, 20	; 0x18000
   10e40:	ldr	pc, [ip, #580]!	; 0x244

00010e44 <getopt_long@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #24, 20	; 0x18000
   10e4c:	ldr	pc, [ip, #572]!	; 0x23c

00010e50 <__ctype_b_loc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #24, 20	; 0x18000
   10e58:	ldr	pc, [ip, #564]!	; 0x234

00010e5c <exit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #24, 20	; 0x18000
   10e64:	ldr	pc, [ip, #556]!	; 0x22c

00010e68 <strlen@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #548]!	; 0x224

00010e74 <strchr@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #540]!	; 0x21c

00010e80 <memrchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #532]!	; 0x214

00010e8c <__errno_location@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #524]!	; 0x20c

00010e98 <__cxa_atexit@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #516]!	; 0x204

00010ea4 <memset@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb0 <__printf_chk@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #500]!	; 0x1f4

00010ebc <fileno@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec8 <__fprintf_chk@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #24, 20	; 0x18000
   10ed0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed4 <memchr@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #24, 20	; 0x18000
   10edc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee0 <fclose@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #24, 20	; 0x18000
   10ee8:	ldr	pc, [ip, #468]!	; 0x1d4

00010eec <fseeko64@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #24, 20	; 0x18000
   10ef4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef8 <setlocale@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #24, 20	; 0x18000
   10f00:	ldr	pc, [ip, #452]!	; 0x1c4

00010f04 <strrchr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #24, 20	; 0x18000
   10f0c:	ldr	pc, [ip, #444]!	; 0x1bc

00010f10 <nl_langinfo@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #24, 20	; 0x18000
   10f18:	ldr	pc, [ip, #436]!	; 0x1b4

00010f1c <clearerr_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #24, 20	; 0x18000
   10f24:	ldr	pc, [ip, #428]!	; 0x1ac

00010f28 <bindtextdomain@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #24, 20	; 0x18000
   10f30:	ldr	pc, [ip, #420]!	; 0x1a4

00010f34 <strncmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #24, 20	; 0x18000
   10f3c:	ldr	pc, [ip, #412]!	; 0x19c

00010f40 <abort@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #24, 20	; 0x18000
   10f48:	ldr	pc, [ip, #404]!	; 0x194

00010f4c <close@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #24, 20	; 0x18000
   10f54:	ldr	pc, [ip, #396]!	; 0x18c

00010f58 <__assert_fail@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #24, 20	; 0x18000
   10f60:	ldr	pc, [ip, #388]!	; 0x184

Disassembly of section .text:

00010f64 <.text>:
   10f64:	movw	r3, #37213	; 0x915d
   10f68:	movt	r3, #2
   10f6c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f70:	strd	r6, [sp, #8]
   10f74:	mov	r4, r3
   10f78:	mov	r6, r1
   10f7c:	strd	r8, [sp, #16]
   10f80:	mov	r8, r0
   10f84:	mov	r5, #0
   10f88:	strd	sl, [sp, #24]
   10f8c:	str	lr, [sp, #32]
   10f90:	sub	sp, sp, #260	; 0x104
   10f94:	ldr	r0, [r1]
   10f98:	str	r3, [sp, #24]
   10f9c:	bl	131e0 <__assert_fail@plt+0x2288>
   10fa0:	movw	r1, #29972	; 0x7514
   10fa4:	movt	r1, #1
   10fa8:	mov	r0, #6
   10fac:	bl	10ef8 <setlocale@plt>
   10fb0:	movw	r1, #31396	; 0x7aa4
   10fb4:	movt	r1, #1
   10fb8:	movw	r0, #31224	; 0x79f8
   10fbc:	movt	r0, #1
   10fc0:	bl	10f28 <bindtextdomain@plt>
   10fc4:	movw	r0, #31224	; 0x79f8
   10fc8:	movt	r0, #1
   10fcc:	bl	10d90 <textdomain@plt>
   10fd0:	movw	r0, #11956	; 0x2eb4
   10fd4:	movt	r0, #1
   10fd8:	bl	172e0 <__assert_fail@plt+0x6388>
   10fdc:	mov	r3, #10
   10fe0:	cmp	r8, #1
   10fe4:	strb	r3, [r4]
   10fe8:	strb	r5, [r4, #1]
   10fec:	strb	r5, [r4, #2]
   10ff0:	ble	11004 <__assert_fail@plt+0xac>
   10ff4:	ldr	r1, [r6, #4]
   10ff8:	ldrb	r3, [r1]
   10ffc:	cmp	r3, #45	; 0x2d
   11000:	beq	11190 <__assert_fail@plt+0x238>
   11004:	mov	r3, #1
   11008:	mov	r2, #10
   1100c:	str	r3, [sp, #32]
   11010:	mov	r3, #0
   11014:	strd	r2, [sp, #16]
   11018:	ldr	r9, [pc, #4076]	; 1200c <__assert_fail@plt+0x10b4>
   1101c:	movw	r7, #31484	; 0x7afc
   11020:	movt	r7, #1
   11024:	movw	sl, #37208	; 0x9158
   11028:	movt	sl, #2
   1102c:	mov	r3, #0
   11030:	str	r3, [sp, #28]
   11034:	mov	r4, #0
   11038:	mov	r3, r9
   1103c:	mov	r2, r7
   11040:	mov	r1, r6
   11044:	mov	r0, r8
   11048:	str	r4, [sp]
   1104c:	bl	10e44 <getopt_long@plt>
   11050:	cmn	r0, #1
   11054:	beq	112cc <__assert_fail@plt+0x374>
   11058:	cmp	r0, #110	; 0x6e
   1105c:	beq	1111c <__assert_fail@plt+0x1c4>
   11060:	ble	11084 <__assert_fail@plt+0x12c>
   11064:	cmp	r0, #118	; 0x76
   11068:	beq	11114 <__assert_fail@plt+0x1bc>
   1106c:	ble	110e4 <__assert_fail@plt+0x18c>
   11070:	cmp	r0, #122	; 0x7a
   11074:	bne	110cc <__assert_fail@plt+0x174>
   11078:	ldr	r3, [sp, #24]
   1107c:	strb	r4, [r3]
   11080:	b	11034 <__assert_fail@plt+0xdc>
   11084:	cmn	r0, #2
   11088:	beq	12034 <__assert_fail@plt+0x10dc>
   1108c:	cmp	r0, #99	; 0x63
   11090:	bne	110f4 <__assert_fail@plt+0x19c>
   11094:	ldr	r3, [sl]
   11098:	mov	r0, #0
   1109c:	ldrb	r2, [r3]
   110a0:	cmp	r2, #45	; 0x2d
   110a4:	moveq	r2, #1
   110a8:	movne	r2, #0
   110ac:	addeq	r3, r3, #1
   110b0:	str	r2, [sp, #28]
   110b4:	streq	r3, [sl]
   110b8:	ldr	r1, [sl]
   110bc:	str	r0, [sp, #32]
   110c0:	bl	121bc <__assert_fail@plt+0x1264>
   110c4:	strd	r0, [sp, #16]
   110c8:	b	11034 <__assert_fail@plt+0xdc>
   110cc:	cmp	r0, #256	; 0x100
   110d0:	bne	12004 <__assert_fail@plt+0x10ac>
   110d4:	ldr	r2, [sp, #24]
   110d8:	mov	r3, #1
   110dc:	strb	r3, [r2, #3]
   110e0:	b	11034 <__assert_fail@plt+0xdc>
   110e4:	cmp	r0, #113	; 0x71
   110e8:	bne	12004 <__assert_fail@plt+0x10ac>
   110ec:	mov	r5, #2
   110f0:	b	11034 <__assert_fail@plt+0xdc>
   110f4:	cmn	r0, #3
   110f8:	mov	fp, r0
   110fc:	beq	11144 <__assert_fail@plt+0x1ec>
   11100:	sub	r3, fp, #48	; 0x30
   11104:	cmp	r3, #9
   11108:	bls	11bb4 <__assert_fail@plt+0xc5c>
   1110c:	mov	r0, #1
   11110:	bl	12ac4 <__assert_fail@plt+0x1b6c>
   11114:	mov	r5, #1
   11118:	b	11034 <__assert_fail@plt+0xdc>
   1111c:	ldr	r3, [sl]
   11120:	mov	r0, #1
   11124:	ldrb	r2, [r3]
   11128:	cmp	r2, #45	; 0x2d
   1112c:	moveq	r2, #1
   11130:	movne	r2, #0
   11134:	addeq	r3, r3, #1
   11138:	str	r2, [sp, #28]
   1113c:	streq	r3, [sl]
   11140:	b	110b8 <__assert_fail@plt+0x160>
   11144:	movw	r1, #31452	; 0x7adc
   11148:	movt	r1, #1
   1114c:	movw	r2, #31468	; 0x7aec
   11150:	movt	r2, #1
   11154:	movw	r3, #37112	; 0x90f8
   11158:	movt	r3, #2
   1115c:	movw	r0, #37204	; 0x9154
   11160:	movt	r0, #2
   11164:	str	r2, [sp]
   11168:	movw	r2, #31220	; 0x79f4
   1116c:	movt	r2, #1
   11170:	stmib	sp, {r1, r4}
   11174:	movw	r1, #29892	; 0x74c4
   11178:	movt	r1, #1
   1117c:	ldr	r0, [r0]
   11180:	ldr	r3, [r3]
   11184:	bl	159f0 <__assert_fail@plt+0x4a98>
   11188:	mov	r0, r4
   1118c:	bl	10e5c <exit@plt>
   11190:	ldrb	r3, [r1, #1]
   11194:	sub	r3, r3, #48	; 0x30
   11198:	cmp	r3, #9
   1119c:	bhi	11004 <__assert_fail@plt+0xac>
   111a0:	add	r1, r1, #1
   111a4:	mov	r0, r1
   111a8:	ldrb	r3, [r0, #1]!
   111ac:	sub	r2, r3, #48	; 0x30
   111b0:	cmp	r2, #9
   111b4:	bls	111a8 <__assert_fail@plt+0x250>
   111b8:	cmp	r3, #0
   111bc:	beq	12020 <__assert_fail@plt+0x10c8>
   111c0:	mov	lr, #0
   111c4:	mov	r4, r0
   111c8:	mov	ip, lr
   111cc:	mov	r5, lr
   111d0:	mov	r7, #10
   111d4:	mov	r9, #1
   111d8:	sub	r2, r3, #98	; 0x62
   111dc:	cmp	r2, #24
   111e0:	ldrls	pc, [pc, r2, lsl #2]
   111e4:	b	11be0 <__assert_fail@plt+0xc88>
   111e8:	andeq	r1, r1, r0, asr #5
   111ec:			; <UNDEFINED> instruction: 0x000112b4
   111f0:	andeq	r1, r1, r0, ror #23
   111f4:	andeq	r1, r1, r0, ror #23
   111f8:	andeq	r1, r1, r0, ror #23
   111fc:	andeq	r1, r1, r0, ror #23
   11200:	andeq	r1, r1, r0, ror #23
   11204:	andeq	r1, r1, r0, ror #23
   11208:	andeq	r1, r1, r0, ror #23
   1120c:	andeq	r1, r1, r0, asr #5
   11210:	andeq	r1, r1, ip, lsr #5
   11214:	andeq	r1, r1, r0, asr #5
   11218:	andeq	r1, r1, r0, ror #23
   1121c:	andeq	r1, r1, r0, ror #23
   11220:	andeq	r1, r1, r0, ror #23
   11224:	andeq	r1, r1, r4, lsr #5
   11228:	andeq	r1, r1, r0, ror #23
   1122c:	andeq	r1, r1, r0, ror #23
   11230:	andeq	r1, r1, r0, ror #23
   11234:	andeq	r1, r1, r0, ror #23
   11238:	muleq	r1, ip, r2
   1123c:	andeq	r1, r1, r0, ror #23
   11240:	andeq	r1, r1, r0, ror #23
   11244:	andeq	r1, r1, r0, ror #23
   11248:	andeq	r1, r1, ip, asr #4
   1124c:	mov	lr, #1
   11250:	mov	r7, #0
   11254:	ldrb	r3, [r4, #1]!
   11258:	cmp	r3, #0
   1125c:	bne	111d8 <__assert_fail@plt+0x280>
   11260:	cmp	lr, #0
   11264:	strb	ip, [r0]
   11268:	ldrne	r3, [sp, #24]
   1126c:	str	r9, [sp, #32]
   11270:	strbne	r7, [r3]
   11274:	cmp	ip, #0
   11278:	movne	r3, #0
   1127c:	strbne	r3, [r0, #1]
   11280:	ldr	r0, [sp, #32]
   11284:	sub	r8, r8, #1
   11288:	bl	121bc <__assert_fail@plt+0x1264>
   1128c:	ldr	r3, [r6]
   11290:	strd	r0, [sp, #16]
   11294:	str	r3, [r6, #4]!
   11298:	b	11018 <__assert_fail@plt+0xc0>
   1129c:	mov	r5, #1
   112a0:	b	11254 <__assert_fail@plt+0x2fc>
   112a4:	mov	r5, #2
   112a8:	b	11254 <__assert_fail@plt+0x2fc>
   112ac:	mov	r9, #1
   112b0:	b	11254 <__assert_fail@plt+0x2fc>
   112b4:	mov	ip, #0
   112b8:	mov	r9, ip
   112bc:	b	11254 <__assert_fail@plt+0x2fc>
   112c0:	mov	ip, r3
   112c4:	mov	r9, #0
   112c8:	b	11254 <__assert_fail@plt+0x2fc>
   112cc:	cmp	r5, #1
   112d0:	beq	114e4 <__assert_fail@plt+0x58c>
   112d4:	cmp	r5, r4
   112d8:	bne	112f4 <__assert_fail@plt+0x39c>
   112dc:	movw	r3, #37192	; 0x9148
   112e0:	movt	r3, #2
   112e4:	ldr	r3, [r3]
   112e8:	sub	r2, r8, #1
   112ec:	cmp	r2, r3
   112f0:	bgt	114e4 <__assert_fail@plt+0x58c>
   112f4:	ldrd	r2, [sp, #28]
   112f8:	eor	r3, r3, #1
   112fc:	tst	r2, r3
   11300:	beq	11314 <__assert_fail@plt+0x3bc>
   11304:	ldrd	r2, [sp, #16]
   11308:	cmp	r2, #0
   1130c:	sbcs	r3, r3, #0
   11310:	blt	1203c <__assert_fail@plt+0x10e4>
   11314:	movw	r3, #37192	; 0x9148
   11318:	movt	r3, #2
   1131c:	ldr	r3, [r3]
   11320:	cmp	r3, r8
   11324:	bge	11a80 <__assert_fail@plt+0xb28>
   11328:	ldr	fp, [r6, r3, lsl #2]
   1132c:	add	r6, r6, r3, lsl #2
   11330:	cmp	fp, #0
   11334:	beq	116f0 <__assert_fail@plt+0x798>
   11338:	ldrd	r2, [sp, #16]
   1133c:	str	r6, [sp, #40]	; 0x28
   11340:	adds	r0, r2, #8192	; 0x2000
   11344:	ubfx	r1, r2, #0, #13
   11348:	str	r0, [sp, #80]	; 0x50
   1134c:	adc	r0, r3, #0
   11350:	rsb	ip, r1, #8192	; 0x2000
   11354:	add	r3, ip, r2
   11358:	str	r0, [sp, #84]	; 0x54
   1135c:	movw	r0, #31392	; 0x7aa0
   11360:	movt	r0, #1
   11364:	lsr	r3, r3, #13
   11368:	str	r0, [sp, #56]	; 0x38
   1136c:	mov	r0, r2
   11370:	movw	r2, #31624	; 0x7b88
   11374:	movt	r2, #1
   11378:	str	r3, [sp, #76]	; 0x4c
   1137c:	str	r0, [sp, #92]	; 0x5c
   11380:	str	r2, [sp, #100]	; 0x64
   11384:	mov	r2, #1
   11388:	add	r3, r3, r2
   1138c:	str	r2, [sp, #36]	; 0x24
   11390:	str	r3, [sp, #112]	; 0x70
   11394:	lsr	r3, r3, r2
   11398:	str	ip, [sp, #116]	; 0x74
   1139c:	str	r1, [sp, #120]	; 0x78
   113a0:	str	r3, [sp, #96]	; 0x60
   113a4:	b	11470 <__assert_fail@plt+0x518>
   113a8:	ldr	ip, [sp, #24]
   113ac:	mov	r3, #1
   113b0:	movw	r1, #31512	; 0x7b18
   113b4:	movt	r1, #1
   113b8:	mov	r2, #5
   113bc:	strb	r3, [ip, #1]
   113c0:	bl	10d78 <dcgettext@plt>
   113c4:	mov	fp, r0
   113c8:	ldr	r3, [sp, #24]
   113cc:	ldrb	r3, [r3, #2]
   113d0:	cmp	r3, #0
   113d4:	beq	11418 <__assert_fail@plt+0x4c0>
   113d8:	movw	r4, #37108	; 0x90f4
   113dc:	movt	r4, #2
   113e0:	ldrb	lr, [r4]
   113e4:	movw	ip, #31568	; 0x7b50
   113e8:	movt	ip, #1
   113ec:	mov	r3, fp
   113f0:	movw	r2, #29972	; 0x7514
   113f4:	movt	r2, #1
   113f8:	movw	r1, #31556	; 0x7b44
   113fc:	movt	r1, #1
   11400:	mov	r0, #1
   11404:	cmp	lr, #0
   11408:	moveq	r2, ip
   1140c:	bl	10eb0 <__printf_chk@plt>
   11410:	mov	r3, #0
   11414:	strb	r3, [r4]
   11418:	ldr	r3, [sp, #28]
   1141c:	cmp	r3, #0
   11420:	bne	11500 <__assert_fail@plt+0x5a8>
   11424:	ldr	r3, [sp, #32]
   11428:	mov	r1, sl
   1142c:	mov	r0, fp
   11430:	cmp	r3, #0
   11434:	ldrd	r2, [sp, #16]
   11438:	beq	114f4 <__assert_fail@plt+0x59c>
   1143c:	bl	12450 <__assert_fail@plt+0x14f8>
   11440:	mov	r4, r0
   11444:	ldr	r3, [sp, #44]	; 0x2c
   11448:	cmp	r3, #0
   1144c:	bne	1165c <__assert_fail@plt+0x704>
   11450:	ldr	r3, [sp, #40]	; 0x28
   11454:	ldr	fp, [r3, #4]!
   11458:	str	r3, [sp, #40]	; 0x28
   1145c:	cmp	fp, #0
   11460:	ldr	r3, [sp, #36]	; 0x24
   11464:	and	r3, r3, r4
   11468:	str	r3, [sp, #36]	; 0x24
   1146c:	beq	116f8 <__assert_fail@plt+0x7a0>
   11470:	mov	r0, fp
   11474:	ldr	r1, [sp, #56]	; 0x38
   11478:	bl	10cf4 <strcmp@plt>
   1147c:	subs	sl, r0, #0
   11480:	str	sl, [sp, #44]	; 0x2c
   11484:	beq	113a8 <__assert_fail@plt+0x450>
   11488:	mov	r1, #0
   1148c:	mov	r0, fp
   11490:	bl	10e08 <open64@plt>
   11494:	subs	sl, r0, #0
   11498:	bge	113c8 <__assert_fail@plt+0x470>
   1149c:	bl	10e8c <__errno_location@plt>
   114a0:	movw	r1, #31528	; 0x7b28
   114a4:	movt	r1, #1
   114a8:	ldr	r5, [r0]
   114ac:	mov	r2, #5
   114b0:	mov	r0, #0
   114b4:	bl	10d78 <dcgettext@plt>
   114b8:	mov	r6, r0
   114bc:	mov	r4, #0
   114c0:	mov	r1, fp
   114c4:	mov	r0, #4
   114c8:	bl	1521c <__assert_fail@plt+0x42c4>
   114cc:	mov	r3, r0
   114d0:	mov	r2, r6
   114d4:	mov	r1, r5
   114d8:	mov	r0, r4
   114dc:	bl	10dfc <error@plt>
   114e0:	b	11450 <__assert_fail@plt+0x4f8>
   114e4:	ldr	r2, [sp, #24]
   114e8:	mov	r3, #1
   114ec:	strb	r3, [r2, #2]
   114f0:	b	112f4 <__assert_fail@plt+0x39c>
   114f4:	bl	125f4 <__assert_fail@plt+0x169c>
   114f8:	mov	r4, r0
   114fc:	b	11444 <__assert_fail@plt+0x4ec>
   11500:	add	r2, sp, #152	; 0x98
   11504:	mov	r1, sl
   11508:	mov	r0, #3
   1150c:	bl	10db4 <__fxstat64@plt>
   11510:	cmp	r0, #0
   11514:	bne	11a90 <__assert_fail@plt+0xb38>
   11518:	ldr	r3, [sp, #24]
   1151c:	ldrb	r3, [r3, #3]
   11520:	cmp	r3, #0
   11524:	bne	11538 <__assert_fail@plt+0x5e0>
   11528:	ldr	r3, [sp, #168]	; 0xa8
   1152c:	and	r3, r3, #53248	; 0xd000
   11530:	cmp	r3, #32768	; 0x8000
   11534:	beq	11b00 <__assert_fail@plt+0xba8>
   11538:	ldr	r3, [sp, #32]
   1153c:	mvn	r2, #0
   11540:	cmp	r3, #0
   11544:	mvn	r3, #0
   11548:	strd	r2, [sp, #64]	; 0x40
   1154c:	bne	11740 <__assert_fail@plt+0x7e8>
   11550:	ldrd	r0, [sp, #80]	; 0x50
   11554:	mov	r3, #0
   11558:	mvn	r2, #0
   1155c:	cmp	r1, r3
   11560:	cmpeq	r0, r2
   11564:	ldrd	r2, [sp, #64]	; 0x40
   11568:	strd	r2, [sp, #48]	; 0x30
   1156c:	bhi	12094 <__assert_fail@plt+0x113c>
   11570:	ldr	r3, [sp, #92]	; 0x5c
   11574:	cmp	r3, #1048576	; 0x100000
   11578:	bls	11d20 <__assert_fail@plt+0xdc8>
   1157c:	ldr	r8, [sp, #112]	; 0x70
   11580:	mov	r6, #0
   11584:	mov	r5, #1
   11588:	mov	r4, r6
   1158c:	mov	r7, r6
   11590:	str	sl, [sp, #72]	; 0x48
   11594:	str	fp, [sp, #124]	; 0x7c
   11598:	mov	fp, r6
   1159c:	str	r6, [sp, #88]	; 0x58
   115a0:	cmp	fp, #0
   115a4:	bne	1172c <__assert_fail@plt+0x7d4>
   115a8:	cmp	r8, #16
   115ac:	movcc	fp, r8
   115b0:	movcs	fp, #16
   115b4:	mov	r0, r7
   115b8:	mov	r2, #4
   115bc:	mov	r1, fp
   115c0:	mov	sl, r6
   115c4:	bl	15be4 <__assert_fail@plt+0x4c8c>
   115c8:	mov	r7, r0
   115cc:	mov	r6, r5
   115d0:	cmp	r4, #0
   115d4:	beq	11698 <__assert_fail@plt+0x740>
   115d8:	mov	r2, #8192	; 0x2000
   115dc:	ldr	r1, [r7, sl, lsl #2]
   115e0:	ldr	r0, [sp, #72]	; 0x48
   115e4:	bl	13000 <__assert_fail@plt+0x20a8>
   115e8:	cmp	r0, #8192	; 0x2000
   115ec:	mov	r9, r0
   115f0:	movcs	r2, #0
   115f4:	bcs	1160c <__assert_fail@plt+0x6b4>
   115f8:	bl	10e8c <__errno_location@plt>
   115fc:	ldr	r2, [r0]
   11600:	cmp	r2, #0
   11604:	bne	11ed4 <__assert_fail@plt+0xf7c>
   11608:	mov	r2, r4
   1160c:	str	r2, [sp, #60]	; 0x3c
   11610:	mov	r1, r9
   11614:	ldr	r0, [r7, r5, lsl #2]
   11618:	ldrd	r2, [sp, #48]	; 0x30
   1161c:	ldr	r4, [sp, #28]
   11620:	adds	r2, r2, r9
   11624:	adc	r3, r3, #0
   11628:	strd	r2, [sp, #48]	; 0x30
   1162c:	bl	12314 <__assert_fail@plt+0x13bc>
   11630:	ldr	r2, [sp, #60]	; 0x3c
   11634:	add	r5, r5, #1
   11638:	cmp	r2, #0
   1163c:	udiv	r3, r5, r8
   11640:	mls	r5, r8, r3, r5
   11644:	bne	11ca0 <__assert_fail@plt+0xd48>
   11648:	cmp	fp, r6
   1164c:	mov	sl, r6
   11650:	beq	115a0 <__assert_fail@plt+0x648>
   11654:	mov	r6, r5
   11658:	b	115d0 <__assert_fail@plt+0x678>
   1165c:	mov	r0, sl
   11660:	bl	10f4c <close@plt>
   11664:	cmp	r0, #0
   11668:	beq	11450 <__assert_fail@plt+0x4f8>
   1166c:	bl	10e8c <__errno_location@plt>
   11670:	mov	r2, #5
   11674:	ldr	r5, [r0]
   11678:	mov	r0, #0
   1167c:	mov	r4, r0
   11680:	ldr	r1, [sp, #100]	; 0x64
   11684:	bl	10d78 <dcgettext@plt>
   11688:	mov	r6, r0
   1168c:	mov	r1, fp
   11690:	mov	r0, #4
   11694:	b	114c8 <__assert_fail@plt+0x570>
   11698:	add	r3, sl, #1
   1169c:	mov	r0, #8192	; 0x2000
   116a0:	str	r3, [sp, #88]	; 0x58
   116a4:	bl	15b00 <__assert_fail@plt+0x4ba8>
   116a8:	mov	r1, r0
   116ac:	mov	r2, #8192	; 0x2000
   116b0:	str	r0, [r7, sl, lsl #2]
   116b4:	ldr	r0, [sp, #72]	; 0x48
   116b8:	bl	13000 <__assert_fail@plt+0x20a8>
   116bc:	cmp	r0, #8192	; 0x2000
   116c0:	mov	r9, r0
   116c4:	movcs	r2, r4
   116c8:	bcs	116e0 <__assert_fail@plt+0x788>
   116cc:	bl	10e8c <__errno_location@plt>
   116d0:	ldr	r2, [r0]
   116d4:	cmp	r2, #0
   116d8:	bne	11ed4 <__assert_fail@plt+0xf7c>
   116dc:	ldr	r2, [sp, #28]
   116e0:	ldr	r3, [sp, #76]	; 0x4c
   116e4:	cmp	r3, sl
   116e8:	bne	11634 <__assert_fail@plt+0x6dc>
   116ec:	b	1160c <__assert_fail@plt+0x6b4>
   116f0:	mov	r3, #1
   116f4:	str	r3, [sp, #36]	; 0x24
   116f8:	ldr	r3, [sp, #24]
   116fc:	ldrb	r3, [r3, #1]
   11700:	cmp	r3, #0
   11704:	bne	11ad8 <__assert_fail@plt+0xb80>
   11708:	ldr	r3, [sp, #36]	; 0x24
   1170c:	eor	r0, r3, #1
   11710:	add	sp, sp, #260	; 0x104
   11714:	ldrd	r4, [sp]
   11718:	ldrd	r6, [sp, #8]
   1171c:	ldrd	r8, [sp, #16]
   11720:	ldrd	sl, [sp, #24]
   11724:	add	sp, sp, #32
   11728:	pop	{pc}		; (ldr pc, [sp], #4)
   1172c:	ldr	r3, [sp, #96]	; 0x60
   11730:	cmp	r3, fp
   11734:	lslcs	fp, fp, #1
   11738:	movcc	fp, r8
   1173c:	b	115b4 <__assert_fail@plt+0x65c>
   11740:	movw	r0, #8208	; 0x2010
   11744:	mov	r4, #0
   11748:	bl	15b00 <__assert_fail@plt+0x4ba8>
   1174c:	add	r3, r0, #8192	; 0x2000
   11750:	mov	r2, r0
   11754:	movw	r0, #8208	; 0x2010
   11758:	mov	r6, r4
   1175c:	str	r4, [r3, #4]
   11760:	str	r4, [r3, #8]
   11764:	str	r4, [r3, #12]
   11768:	str	r2, [sp, #60]	; 0x3c
   1176c:	str	r2, [sp, #72]	; 0x48
   11770:	ldrd	r2, [sp, #64]	; 0x40
   11774:	strd	r2, [sp, #48]	; 0x30
   11778:	bl	15b00 <__assert_fail@plt+0x4ba8>
   1177c:	mov	r8, r0
   11780:	mov	r2, #8192	; 0x2000
   11784:	mov	r1, r8
   11788:	mov	r0, sl
   1178c:	bl	154e8 <__assert_fail@plt+0x4590>
   11790:	sub	r2, r0, #1
   11794:	mov	r3, r0
   11798:	cmn	r2, #3
   1179c:	bhi	118dc <__assert_fail@plt+0x984>
   117a0:	ldrd	r0, [sp, #16]
   117a4:	orrs	r2, r0, r1
   117a8:	beq	11880 <__assert_fail@plt+0x928>
   117ac:	ldr	r2, [sp, #24]
   117b0:	add	r4, r8, #8192	; 0x2000
   117b4:	add	r7, r8, r3
   117b8:	mov	r0, r8
   117bc:	str	r3, [r4, #4]
   117c0:	ldrb	r5, [r2]
   117c4:	mov	r2, #0
   117c8:	str	r2, [r4, #8]
   117cc:	str	r2, [r4, #12]
   117d0:	strb	r5, [r8, r3]
   117d4:	ldr	r9, [r4, #8]
   117d8:	b	117e8 <__assert_fail@plt+0x890>
   117dc:	add	r0, r0, #1
   117e0:	mov	r9, r3
   117e4:	str	r3, [r4, #8]
   117e8:	mov	r1, r5
   117ec:	bl	10d9c <rawmemchr@plt>
   117f0:	cmp	r7, r0
   117f4:	add	r3, r9, #1
   117f8:	bhi	117dc <__assert_fail@plt+0x884>
   117fc:	ldr	r3, [sp, #60]	; 0x3c
   11800:	add	r6, r6, r9
   11804:	ldr	r2, [r4, #4]
   11808:	add	r5, r3, #8192	; 0x2000
   1180c:	ldr	r0, [r5, #4]
   11810:	add	r3, r2, r0
   11814:	cmp	r3, #8192	; 0x2000
   11818:	bcc	118b4 <__assert_fail@plt+0x95c>
   1181c:	ldrd	r0, [sp, #16]
   11820:	mov	r3, #0
   11824:	ldr	ip, [sp, #72]	; 0x48
   11828:	cmp	r1, r3
   1182c:	add	r7, ip, #8192	; 0x2000
   11830:	ldr	r2, [r7, #8]
   11834:	str	r8, [r5, #12]
   11838:	sub	r2, r6, r2
   1183c:	cmpeq	r0, r2
   11840:	bcs	118a0 <__assert_fail@plt+0x948>
   11844:	ldr	r3, [r7, #4]
   11848:	mov	r0, ip
   1184c:	str	r8, [sp, #60]	; 0x3c
   11850:	mov	r8, ip
   11854:	ldrd	r4, [sp, #48]	; 0x30
   11858:	mov	r1, r3
   1185c:	adds	r4, r4, r3
   11860:	adc	r5, r5, #0
   11864:	strd	r4, [sp, #48]	; 0x30
   11868:	bl	12314 <__assert_fail@plt+0x13bc>
   1186c:	ldr	r3, [r7, #8]
   11870:	ldr	r2, [r7, #12]
   11874:	sub	r6, r6, r3
   11878:	str	r2, [sp, #72]	; 0x48
   1187c:	b	11780 <__assert_fail@plt+0x828>
   11880:	ldrd	r4, [sp, #48]	; 0x30
   11884:	mov	r1, r3
   11888:	mov	r0, r8
   1188c:	adds	r4, r4, r3
   11890:	adc	r5, r5, #0
   11894:	strd	r4, [sp, #48]	; 0x30
   11898:	bl	12314 <__assert_fail@plt+0x13bc>
   1189c:	b	11780 <__assert_fail@plt+0x828>
   118a0:	movw	r0, #8208	; 0x2010
   118a4:	str	r8, [sp, #60]	; 0x3c
   118a8:	bl	15b00 <__assert_fail@plt+0x4ba8>
   118ac:	mov	r8, r0
   118b0:	b	11780 <__assert_fail@plt+0x828>
   118b4:	ldr	r3, [sp, #60]	; 0x3c
   118b8:	mov	r1, r8
   118bc:	add	r0, r3, r0
   118c0:	bl	10d30 <memcpy@plt>
   118c4:	ldrd	r0, [r4, #4]
   118c8:	ldrd	r2, [r5, #4]
   118cc:	add	r2, r2, r0
   118d0:	add	r3, r3, r1
   118d4:	strd	r2, [r5, #4]
   118d8:	b	11780 <__assert_fail@plt+0x828>
   118dc:	mov	r0, r8
   118e0:	str	r3, [sp, #88]	; 0x58
   118e4:	bl	12fa0 <__assert_fail@plt+0x2048>
   118e8:	ldr	r3, [sp, #88]	; 0x58
   118ec:	cmn	r3, #1
   118f0:	beq	11f44 <__assert_fail@plt+0xfec>
   118f4:	ldr	r1, [sp, #60]	; 0x3c
   118f8:	add	r3, r1, #8192	; 0x2000
   118fc:	ldr	r2, [r3, #4]
   11900:	cmp	r2, #0
   11904:	bne	11b88 <__assert_fail@plt+0xc30>
   11908:	ldrd	r0, [sp, #16]
   1190c:	ldr	r3, [sp, #72]	; 0x48
   11910:	ldr	r5, [sp, #72]	; 0x48
   11914:	add	r7, r3, #8192	; 0x2000
   11918:	mov	r3, #0
   1191c:	ldr	r2, [r7, #8]
   11920:	cmp	r1, r3
   11924:	sub	r2, r6, r2
   11928:	cmpeq	r0, r2
   1192c:	bcs	11998 <__assert_fail@plt+0xa40>
   11930:	mov	r4, r7
   11934:	mov	ip, r5
   11938:	str	r7, [sp, #60]	; 0x3c
   1193c:	mov	r5, r6
   11940:	ldrd	r6, [sp, #16]
   11944:	ldrd	r8, [sp, #48]	; 0x30
   11948:	mov	r0, ip
   1194c:	ldr	r2, [r4, #4]
   11950:	adds	r8, r8, r2
   11954:	mov	r1, r2
   11958:	adc	r9, r9, #0
   1195c:	bl	12314 <__assert_fail@plt+0x13bc>
   11960:	ldr	r1, [r4, #8]
   11964:	mov	r3, #0
   11968:	cmp	r7, r3
   1196c:	ldr	ip, [r4, #12]
   11970:	sub	r5, r5, r1
   11974:	add	r4, ip, #8192	; 0x2000
   11978:	ldr	r2, [r4, #8]
   1197c:	sub	r2, r5, r2
   11980:	cmpeq	r6, r2
   11984:	bcc	11948 <__assert_fail@plt+0x9f0>
   11988:	ldr	r7, [sp, #60]	; 0x3c
   1198c:	mov	r6, r5
   11990:	mov	r5, ip
   11994:	strd	r8, [sp, #48]	; 0x30
   11998:	ldrd	r0, [sp, #16]
   1199c:	mov	r3, #0
   119a0:	cmp	r1, r3
   119a4:	cmpeq	r0, r6
   119a8:	bcs	11a20 <__assert_fail@plt+0xac8>
   119ac:	ldr	r3, [sp, #92]	; 0x5c
   119b0:	add	r4, r5, #8192	; 0x2000
   119b4:	mov	r0, r5
   119b8:	ldr	r8, [r4, #4]
   119bc:	sub	r6, r6, r3
   119c0:	ldr	r3, [sp, #24]
   119c4:	add	r8, r5, r8
   119c8:	ldrb	r9, [r3]
   119cc:	b	119f8 <__assert_fail@plt+0xaa0>
   119d0:	sub	r2, r8, r0
   119d4:	mov	r1, r9
   119d8:	bl	10ed4 <memchr@plt>
   119dc:	cmp	r0, #0
   119e0:	beq	11a00 <__assert_fail@plt+0xaa8>
   119e4:	ldr	r3, [r4, #8]
   119e8:	add	r0, r0, #1
   119ec:	sub	r6, r6, #1
   119f0:	add	r3, r3, #1
   119f4:	str	r3, [r4, #8]
   119f8:	cmp	r6, #0
   119fc:	bne	119d0 <__assert_fail@plt+0xa78>
   11a00:	sub	r3, r0, r5
   11a04:	mov	r0, r5
   11a08:	ldrd	r4, [sp, #48]	; 0x30
   11a0c:	mov	r1, r3
   11a10:	adds	r4, r4, r3
   11a14:	adc	r5, r5, r3, asr #31
   11a18:	strd	r4, [sp, #48]	; 0x30
   11a1c:	bl	12314 <__assert_fail@plt+0x13bc>
   11a20:	ldr	r4, [sp, #28]
   11a24:	ldr	r0, [sp, #72]	; 0x48
   11a28:	b	11a30 <__assert_fail@plt+0xad8>
   11a2c:	add	r7, r0, #8192	; 0x2000
   11a30:	ldr	r5, [r7, #12]
   11a34:	bl	12fa0 <__assert_fail@plt+0x2048>
   11a38:	subs	r0, r5, #0
   11a3c:	bne	11a2c <__assert_fail@plt+0xad4>
   11a40:	ldrd	r0, [sp, #64]	; 0x40
   11a44:	mvn	r3, #0
   11a48:	mvn	r2, #0
   11a4c:	cmp	r1, r3
   11a50:	cmpeq	r0, r2
   11a54:	beq	11444 <__assert_fail@plt+0x4ec>
   11a58:	mov	r1, #0
   11a5c:	mov	r0, sl
   11a60:	ldrd	r2, [sp, #48]	; 0x30
   11a64:	stm	sp, {r1, fp}
   11a68:	bl	12244 <__assert_fail@plt+0x12ec>
   11a6c:	cmp	r0, #0
   11a70:	sbcs	r3, r1, #0
   11a74:	bge	11444 <__assert_fail@plt+0x4ec>
   11a78:	mov	r4, #0
   11a7c:	b	11444 <__assert_fail@plt+0x4ec>
   11a80:	movw	fp, #31392	; 0x7aa0
   11a84:	movt	fp, #1
   11a88:	ldr	r6, [pc, #1408]	; 12010 <__assert_fail@plt+0x10b8>
   11a8c:	b	11338 <__assert_fail@plt+0x3e0>
   11a90:	bl	10e8c <__errno_location@plt>
   11a94:	ldr	r5, [r0]
   11a98:	mov	r2, #5
   11a9c:	movw	r1, #31572	; 0x7b54
   11aa0:	movt	r1, #1
   11aa4:	mov	r0, #0
   11aa8:	bl	10d78 <dcgettext@plt>
   11aac:	mov	r6, r0
   11ab0:	mov	r1, fp
   11ab4:	mov	r0, #4
   11ab8:	mov	r4, #0
   11abc:	bl	1521c <__assert_fail@plt+0x42c4>
   11ac0:	mov	r3, r0
   11ac4:	mov	r2, r6
   11ac8:	mov	r1, r5
   11acc:	mov	r0, r4
   11ad0:	bl	10dfc <error@plt>
   11ad4:	b	11444 <__assert_fail@plt+0x4ec>
   11ad8:	mov	r0, #0
   11adc:	bl	10f4c <close@plt>
   11ae0:	cmp	r0, #0
   11ae4:	bge	11708 <__assert_fail@plt+0x7b0>
   11ae8:	bl	10e8c <__errno_location@plt>
   11aec:	movw	r2, #31392	; 0x7aa0
   11af0:	movt	r2, #1
   11af4:	ldr	r1, [r0]
   11af8:	mov	r0, #1
   11afc:	bl	10dfc <error@plt>
   11b00:	mov	r4, #1
   11b04:	mov	r2, #0
   11b08:	mov	r3, #0
   11b0c:	mov	r0, sl
   11b10:	stm	sp, {r4, fp}
   11b14:	bl	12244 <__assert_fail@plt+0x12ec>
   11b18:	mov	r3, r1
   11b1c:	mov	r2, r0
   11b20:	cmp	r0, #0
   11b24:	strd	r2, [sp, #64]	; 0x40
   11b28:	sbcs	r3, r3, #0
   11b2c:	blt	11a78 <__assert_fail@plt+0xb20>
   11b30:	ldr	r3, [sp, #32]
   11b34:	ldrd	r6, [sp, #200]	; 0xc8
   11b38:	cmp	r3, #0
   11b3c:	ldr	r3, [sp, #24]
   11b40:	ldrb	r3, [r3, #3]
   11b44:	beq	11c1c <__assert_fail@plt+0xcc4>
   11b48:	cmp	r3, #0
   11b4c:	bne	11740 <__assert_fail@plt+0x7e8>
   11b50:	ldr	r2, [sp, #208]	; 0xd0
   11b54:	sub	r3, r2, #1
   11b58:	cmp	r3, #536870912	; 0x20000000
   11b5c:	movcs	r2, #512	; 0x200
   11b60:	asr	r3, r2, #31
   11b64:	cmp	r2, r6
   11b68:	sbcs	r3, r3, r7
   11b6c:	bge	11740 <__assert_fail@plt+0x7e8>
   11b70:	ldrd	r2, [sp, #64]	; 0x40
   11b74:	cmp	r2, r6
   11b78:	sbcs	r3, r3, r7
   11b7c:	blt	11f20 <__assert_fail@plt+0xfc8>
   11b80:	and	r4, r4, #1
   11b84:	b	11444 <__assert_fail@plt+0x4ec>
   11b88:	add	r1, r1, r2
   11b8c:	ldr	r2, [sp, #24]
   11b90:	ldrb	r1, [r1, #-1]
   11b94:	ldrb	r2, [r2]
   11b98:	cmp	r1, r2
   11b9c:	beq	11908 <__assert_fail@plt+0x9b0>
   11ba0:	ldr	r2, [r3, #8]
   11ba4:	add	r6, r6, #1
   11ba8:	add	r2, r2, #1
   11bac:	str	r2, [r3, #8]
   11bb0:	b	11908 <__assert_fail@plt+0x9b0>
   11bb4:	mov	r2, #5
   11bb8:	movw	r1, #31420	; 0x7abc
   11bbc:	movt	r1, #1
   11bc0:	mov	r0, #0
   11bc4:	bl	10d78 <dcgettext@plt>
   11bc8:	mov	r1, #0
   11bcc:	mov	r2, r0
   11bd0:	mov	r3, fp
   11bd4:	mov	r0, r1
   11bd8:	bl	10dfc <error@plt>
   11bdc:	b	1110c <__assert_fail@plt+0x1b4>
   11be0:	cmp	lr, #0
   11be4:	mov	r2, #5
   11be8:	ldrne	r3, [sp, #24]
   11bec:	movw	r1, #31420	; 0x7abc
   11bf0:	movt	r1, #1
   11bf4:	mov	r0, #0
   11bf8:	strbne	r7, [r3]
   11bfc:	bl	10d78 <dcgettext@plt>
   11c00:	mov	r1, #0
   11c04:	mov	r2, r0
   11c08:	ldrb	r3, [r4]
   11c0c:	mov	r0, r1
   11c10:	bl	10dfc <error@plt>
   11c14:	mov	r0, #1
   11c18:	bl	12ac4 <__assert_fail@plt+0x1b6c>
   11c1c:	subs	r4, r3, #0
   11c20:	bne	11550 <__assert_fail@plt+0x5f8>
   11c24:	ldr	r2, [sp, #208]	; 0xd0
   11c28:	sub	r3, r2, #1
   11c2c:	cmp	r3, #536870912	; 0x20000000
   11c30:	movcs	r2, #512	; 0x200
   11c34:	asr	r3, r2, #31
   11c38:	cmp	r2, r6
   11c3c:	sbcs	r3, r3, r7
   11c40:	bge	11550 <__assert_fail@plt+0x5f8>
   11c44:	ldrd	r2, [sp, #64]	; 0x40
   11c48:	subs	r1, r6, r2
   11c4c:	sbc	r3, r7, r3
   11c50:	str	r1, [sp, #104]	; 0x68
   11c54:	str	r3, [sp, #108]	; 0x6c
   11c58:	ldrd	r2, [sp, #104]	; 0x68
   11c5c:	cmp	r2, #0
   11c60:	sbcs	r1, r3, #0
   11c64:	blt	11c98 <__assert_fail@plt+0xd40>
   11c68:	ldrd	r0, [sp, #16]
   11c6c:	cmp	r1, r3
   11c70:	cmpeq	r0, r2
   11c74:	bcs	11c98 <__assert_fail@plt+0xd40>
   11c78:	ldrd	r6, [sp, #16]
   11c7c:	mov	r0, sl
   11c80:	ldrd	r8, [sp, #104]	; 0x68
   11c84:	subs	r2, r8, r6
   11c88:	sbc	r3, r9, r7
   11c8c:	bl	123a4 <__assert_fail@plt+0x144c>
   11c90:	cmp	r0, #0
   11c94:	bne	12014 <__assert_fail@plt+0x10bc>
   11c98:	ldr	r4, [sp, #28]
   11c9c:	b	11444 <__assert_fail@plt+0x4ec>
   11ca0:	mov	ip, r4
   11ca4:	mov	r8, r4
   11ca8:	ldr	sl, [sp, #72]	; 0x48
   11cac:	cmp	ip, #0
   11cb0:	mov	r4, r2
   11cb4:	ldr	fp, [sp, #124]	; 0x7c
   11cb8:	beq	11ea0 <__assert_fail@plt+0xf48>
   11cbc:	rsb	r1, r9, #8192	; 0x2000
   11cc0:	ldrd	r2, [sp, #48]	; 0x30
   11cc4:	ldr	r0, [sp, #116]	; 0x74
   11cc8:	ldr	lr, [r7, r6, lsl #2]
   11ccc:	adds	r2, r2, r0
   11cd0:	adc	r3, r3, #0
   11cd4:	cmp	r0, r1
   11cd8:	strd	r2, [sp, #48]	; 0x30
   11cdc:	mov	r3, r0
   11ce0:	add	r0, lr, r9
   11ce4:	bcs	11f9c <__assert_fail@plt+0x1044>
   11ce8:	mov	r1, r3
   11cec:	mov	r4, ip
   11cf0:	bl	12314 <__assert_fail@plt+0x13bc>
   11cf4:	ldr	r3, [sp, #88]	; 0x58
   11cf8:	mov	r5, r7
   11cfc:	add	r6, r7, r3, lsl #2
   11d00:	b	11d0c <__assert_fail@plt+0xdb4>
   11d04:	ldr	r0, [r5], #4
   11d08:	bl	12fa0 <__assert_fail@plt+0x2048>
   11d0c:	cmp	r6, r5
   11d10:	bne	11d04 <__assert_fail@plt+0xdac>
   11d14:	mov	r0, r7
   11d18:	bl	12fa0 <__assert_fail@plt+0x2048>
   11d1c:	b	11a40 <__assert_fail@plt+0xae8>
   11d20:	add	r7, r3, #8192	; 0x2000
   11d24:	mov	r0, #2
   11d28:	ldr	r4, [sp, #28]
   11d2c:	mov	r1, r7
   11d30:	mov	r9, r3
   11d34:	bl	15c68 <__assert_fail@plt+0x4d10>
   11d38:	mov	r2, r0
   11d3c:	add	r3, r0, r7
   11d40:	str	sl, [sp, #60]	; 0x3c
   11d44:	mov	r5, #0
   11d48:	str	fp, [sp, #72]	; 0x48
   11d4c:	str	r0, [sp, #88]	; 0x58
   11d50:	strd	r2, [sp, #128]	; 0x80
   11d54:	ldrd	sl, [sp, #48]	; 0x30
   11d58:	b	11dec <__assert_fail@plt+0xe94>
   11d5c:	str	r0, [sp, #48]	; 0x30
   11d60:	bl	10e8c <__errno_location@plt>
   11d64:	ldr	r8, [r0]
   11d68:	ldr	r3, [sp, #48]	; 0x30
   11d6c:	cmp	r8, #0
   11d70:	bne	11fb8 <__assert_fail@plt+0x1060>
   11d74:	cmp	r9, r3
   11d78:	bcc	11e38 <__assert_fail@plt+0xee0>
   11d7c:	cmp	r4, #0
   11d80:	bne	11e88 <__assert_fail@plt+0xf30>
   11d84:	sub	r4, r9, r3
   11d88:	eor	r8, r5, #1
   11d8c:	str	r3, [sp, #48]	; 0x30
   11d90:	add	r3, sp, #256	; 0x100
   11d94:	uxtb	r2, r8
   11d98:	sub	r1, r9, r4
   11d9c:	add	r2, r3, r2, lsl #2
   11da0:	adds	sl, sl, r1
   11da4:	adc	fp, fp, #0
   11da8:	ldr	r0, [r2, #-128]	; 0xffffff80
   11dac:	add	r0, r0, #8192	; 0x2000
   11db0:	bl	12314 <__assert_fail@plt+0x13bc>
   11db4:	ldr	r3, [sp, #48]	; 0x30
   11db8:	cmp	r9, r3
   11dbc:	bcs	12080 <__assert_fail@plt+0x1128>
   11dc0:	ldr	r4, [sp, #28]
   11dc4:	sub	r3, r3, r9
   11dc8:	mov	r0, r6
   11dcc:	adds	sl, sl, r3
   11dd0:	mov	r1, r3
   11dd4:	adc	fp, fp, #0
   11dd8:	uxtb	r5, r8
   11ddc:	bl	12314 <__assert_fail@plt+0x13bc>
   11de0:	cmp	r4, #0
   11de4:	bne	11e88 <__assert_fail@plt+0xf30>
   11de8:	mov	r4, #0
   11dec:	add	r3, sp, #256	; 0x100
   11df0:	mov	r2, r7
   11df4:	ldr	r0, [sp, #60]	; 0x3c
   11df8:	add	r3, r3, r5, lsl #2
   11dfc:	ldr	r6, [r3, #-128]	; 0xffffff80
   11e00:	mov	r1, r6
   11e04:	bl	13000 <__assert_fail@plt+0x20a8>
   11e08:	cmp	r7, r0
   11e0c:	mov	r3, r0
   11e10:	bhi	11d5c <__assert_fail@plt+0xe04>
   11e14:	cmp	r4, #0
   11e18:	beq	11e48 <__assert_fail@plt+0xef0>
   11e1c:	cmp	r9, r0
   11e20:	eorcs	r5, r5, #1
   11e24:	uxtbcs	r5, r5
   11e28:	bcs	11de8 <__assert_fail@plt+0xe90>
   11e2c:	eor	r8, r5, #1
   11e30:	mov	r4, #0
   11e34:	b	11dc4 <__assert_fail@plt+0xe6c>
   11e38:	cmp	r4, #0
   11e3c:	eorne	r8, r5, #1
   11e40:	bne	11dc4 <__assert_fail@plt+0xe6c>
   11e44:	b	11d88 <__assert_fail@plt+0xe30>
   11e48:	eor	r8, r5, #1
   11e4c:	add	r3, sp, #256	; 0x100
   11e50:	str	r0, [sp, #48]	; 0x30
   11e54:	uxtb	r5, r8
   11e58:	ldr	r2, [sp, #16]
   11e5c:	mov	r1, r9
   11e60:	add	r0, r3, r5, lsl #2
   11e64:	ldr	r0, [r0, #-128]	; 0xffffff80
   11e68:	adds	sl, sl, r2
   11e6c:	adc	fp, fp, r4
   11e70:	add	r0, r0, #8192	; 0x2000
   11e74:	bl	12314 <__assert_fail@plt+0x13bc>
   11e78:	ldr	r3, [sp, #48]	; 0x30
   11e7c:	cmp	r9, r3
   11e80:	bcs	11de8 <__assert_fail@plt+0xe90>
   11e84:	b	11dc4 <__assert_fail@plt+0xe6c>
   11e88:	strd	sl, [sp, #48]	; 0x30
   11e8c:	ldr	sl, [sp, #60]	; 0x3c
   11e90:	ldr	fp, [sp, #72]	; 0x48
   11e94:	ldr	r0, [sp, #88]	; 0x58
   11e98:	bl	12fa0 <__assert_fail@plt+0x2048>
   11e9c:	b	11a40 <__assert_fail@plt+0xae8>
   11ea0:	ldr	r3, [sp, #76]	; 0x4c
   11ea4:	cmp	r3, r6
   11ea8:	bne	11cf4 <__assert_fail@plt+0xd9c>
   11eac:	ldr	r3, [sp, #120]	; 0x78
   11eb0:	ldr	r0, [r7, r5, lsl #2]
   11eb4:	sub	r2, r9, r3
   11eb8:	ldrd	r8, [sp, #48]	; 0x30
   11ebc:	mov	r1, r2
   11ec0:	adds	r8, r8, r2
   11ec4:	adc	r9, r9, #0
   11ec8:	strd	r8, [sp, #48]	; 0x30
   11ecc:	bl	12314 <__assert_fail@plt+0x13bc>
   11ed0:	b	11cf4 <__assert_fail@plt+0xd9c>
   11ed4:	mov	r6, r2
   11ed8:	movw	r1, #29840	; 0x7490
   11edc:	movt	r1, #1
   11ee0:	ldr	fp, [sp, #124]	; 0x7c
   11ee4:	mov	r2, #5
   11ee8:	mov	r0, #0
   11eec:	mov	r4, #0
   11ef0:	ldr	sl, [sp, #72]	; 0x48
   11ef4:	bl	10d78 <dcgettext@plt>
   11ef8:	mov	r5, r0
   11efc:	mov	r0, #4
   11f00:	mov	r1, fp
   11f04:	bl	1521c <__assert_fail@plt+0x42c4>
   11f08:	mov	r3, r0
   11f0c:	mov	r2, r5
   11f10:	mov	r1, r6
   11f14:	mov	r0, r4
   11f18:	bl	10dfc <error@plt>
   11f1c:	b	11cf4 <__assert_fail@plt+0xd9c>
   11f20:	ldrd	r2, [sp, #64]	; 0x40
   11f24:	mov	r1, sl
   11f28:	mov	r0, fp
   11f2c:	strd	r2, [sp]
   11f30:	strd	r6, [sp, #8]
   11f34:	ldrd	r2, [sp, #16]
   11f38:	bl	12784 <__assert_fail@plt+0x182c>
   11f3c:	mov	r4, r0
   11f40:	b	11b80 <__assert_fail@plt+0xc28>
   11f44:	bl	10e8c <__errno_location@plt>
   11f48:	ldr	r4, [r0]
   11f4c:	mov	r2, #5
   11f50:	movw	r1, #29840	; 0x7490
   11f54:	movt	r1, #1
   11f58:	mov	r0, #0
   11f5c:	bl	10d78 <dcgettext@plt>
   11f60:	mov	r5, r0
   11f64:	mov	r1, fp
   11f68:	mov	r0, #4
   11f6c:	bl	1521c <__assert_fail@plt+0x42c4>
   11f70:	mov	r3, r0
   11f74:	mov	r1, r4
   11f78:	mov	r2, r5
   11f7c:	mov	r0, #0
   11f80:	bl	10dfc <error@plt>
   11f84:	ldr	r4, [sp, #72]	; 0x48
   11f88:	cmp	r4, #0
   11f8c:	beq	11a40 <__assert_fail@plt+0xae8>
   11f90:	mov	r4, #0
   11f94:	ldr	r0, [sp, #72]	; 0x48
   11f98:	b	11a2c <__assert_fail@plt+0xad4>
   11f9c:	bl	12314 <__assert_fail@plt+0x13bc>
   11fa0:	ldr	r3, [sp, #120]	; 0x78
   11fa4:	mov	r4, r8
   11fa8:	ldr	r0, [r7, r5, lsl #2]
   11fac:	sub	r1, r9, r3
   11fb0:	bl	12314 <__assert_fail@plt+0x13bc>
   11fb4:	b	11cf4 <__assert_fail@plt+0xd9c>
   11fb8:	strd	sl, [sp, #48]	; 0x30
   11fbc:	mov	r2, #5
   11fc0:	movw	r1, #29840	; 0x7490
   11fc4:	movt	r1, #1
   11fc8:	mov	r0, #0
   11fcc:	ldr	sl, [sp, #60]	; 0x3c
   11fd0:	mov	r4, #0
   11fd4:	ldr	fp, [sp, #72]	; 0x48
   11fd8:	bl	10d78 <dcgettext@plt>
   11fdc:	mov	r5, r0
   11fe0:	mov	r0, #4
   11fe4:	mov	r1, fp
   11fe8:	bl	1521c <__assert_fail@plt+0x42c4>
   11fec:	mov	r3, r0
   11ff0:	mov	r2, r5
   11ff4:	mov	r1, r8
   11ff8:	mov	r0, r4
   11ffc:	bl	10dfc <error@plt>
   12000:	b	11e94 <__assert_fail@plt+0xf3c>
   12004:	mov	fp, r0
   12008:	b	11100 <__assert_fail@plt+0x1a8>
   1200c:	andeq	r7, r1, r4, asr #6
   12010:	andeq	r7, r1, ip, lsr r3
   12014:	mov	r1, fp
   12018:	bl	126dc <__assert_fail@plt+0x1784>
   1201c:	b	11444 <__assert_fail@plt+0x4ec>
   12020:	mov	r5, r3
   12024:	strb	r3, [r0]
   12028:	mov	r3, #1
   1202c:	str	r3, [sp, #32]
   12030:	b	11280 <__assert_fail@plt+0x328>
   12034:	mov	r0, r4
   12038:	bl	12ac4 <__assert_fail@plt+0x1b6c>
   1203c:	mov	r2, #5
   12040:	movw	r1, #29692	; 0x73fc
   12044:	movt	r1, #1
   12048:	mov	r0, #0
   1204c:	bl	10d78 <dcgettext@plt>
   12050:	mov	r4, r0
   12054:	add	r2, sp, #152	; 0x98
   12058:	ldrd	r0, [sp, #16]
   1205c:	bl	13168 <__assert_fail@plt+0x2210>
   12060:	bl	154d0 <__assert_fail@plt+0x4578>
   12064:	movw	r2, #31504	; 0x7b10
   12068:	movt	r2, #1
   1206c:	str	r0, [sp]
   12070:	mov	r3, r4
   12074:	mov	r1, #75	; 0x4b
   12078:	mov	r0, #1
   1207c:	bl	10dfc <error@plt>
   12080:	strd	sl, [sp, #48]	; 0x30
   12084:	ldr	r4, [sp, #28]
   12088:	ldr	sl, [sp, #60]	; 0x3c
   1208c:	ldr	fp, [sp, #72]	; 0x48
   12090:	b	11e94 <__assert_fail@plt+0xf3c>
   12094:	mov	r2, #5
   12098:	movw	r1, #31588	; 0x7b64
   1209c:	movt	r1, #1
   120a0:	mov	r0, #0
   120a4:	bl	10d78 <dcgettext@plt>
   120a8:	mov	r4, r0
   120ac:	add	r2, sp, #128	; 0x80
   120b0:	ldrd	r0, [sp, #16]
   120b4:	bl	13168 <__assert_fail@plt+0x2210>
   120b8:	mov	r3, r0
   120bc:	mov	r2, r4
   120c0:	mov	r1, #0
   120c4:	mov	r0, #1
   120c8:	bl	10dfc <error@plt>
   120cc:	mov	fp, #0
   120d0:	mov	lr, #0
   120d4:	pop	{r1}		; (ldr r1, [sp], #4)
   120d8:	mov	r2, sp
   120dc:	push	{r2}		; (str r2, [sp, #-4]!)
   120e0:	push	{r0}		; (str r0, [sp, #-4]!)
   120e4:	ldr	ip, [pc, #16]	; 120fc <__assert_fail@plt+0x11a4>
   120e8:	push	{ip}		; (str ip, [sp, #-4]!)
   120ec:	ldr	r0, [pc, #12]	; 12100 <__assert_fail@plt+0x11a8>
   120f0:	ldr	r3, [pc, #12]	; 12104 <__assert_fail@plt+0x11ac>
   120f4:	bl	10e20 <__libc_start_main@plt>
   120f8:	bl	10f40 <abort@plt>
   120fc:	ldrdeq	r7, [r1], -ip
   12100:	andeq	r0, r1, r4, ror #30
   12104:	andeq	r7, r1, ip, ror r2
   12108:	ldr	r3, [pc, #20]	; 12124 <__assert_fail@plt+0x11cc>
   1210c:	ldr	r2, [pc, #20]	; 12128 <__assert_fail@plt+0x11d0>
   12110:	add	r3, pc, r3
   12114:	ldr	r2, [r3, r2]
   12118:	cmp	r2, #0
   1211c:	bxeq	lr
   12120:	b	10e38 <__gmon_start__@plt>
   12124:	andeq	r6, r1, r8, ror #29
   12128:	andeq	r0, r0, r8, ror #1
   1212c:	ldr	r0, [pc, #24]	; 1214c <__assert_fail@plt+0x11f4>
   12130:	ldr	r3, [pc, #24]	; 12150 <__assert_fail@plt+0x11f8>
   12134:	cmp	r3, r0
   12138:	bxeq	lr
   1213c:	ldr	r3, [pc, #16]	; 12154 <__assert_fail@plt+0x11fc>
   12140:	cmp	r3, #0
   12144:	bxeq	lr
   12148:	bx	r3
   1214c:	andeq	r9, r2, r0, asr #2
   12150:	andeq	r9, r2, r0, asr #2
   12154:	andeq	r0, r0, r0
   12158:	ldr	r0, [pc, #36]	; 12184 <__assert_fail@plt+0x122c>
   1215c:	ldr	r1, [pc, #36]	; 12188 <__assert_fail@plt+0x1230>
   12160:	sub	r1, r1, r0
   12164:	asr	r1, r1, #2
   12168:	add	r1, r1, r1, lsr #31
   1216c:	asrs	r1, r1, #1
   12170:	bxeq	lr
   12174:	ldr	r3, [pc, #16]	; 1218c <__assert_fail@plt+0x1234>
   12178:	cmp	r3, #0
   1217c:	bxeq	lr
   12180:	bx	r3
   12184:	andeq	r9, r2, r0, asr #2
   12188:	andeq	r9, r2, r0, asr #2
   1218c:	andeq	r0, r0, r0
   12190:	push	{r4, lr}
   12194:	ldr	r4, [pc, #24]	; 121b4 <__assert_fail@plt+0x125c>
   12198:	ldrb	r3, [r4]
   1219c:	cmp	r3, #0
   121a0:	popne	{r4, pc}
   121a4:	bl	1212c <__assert_fail@plt+0x11d4>
   121a8:	mov	r3, #1
   121ac:	strb	r3, [r4]
   121b0:	pop	{r4, pc}
   121b4:	andeq	r9, r2, ip, asr r1
   121b8:	b	12158 <__assert_fail@plt+0x1200>
   121bc:	cmp	r0, #0
   121c0:	strd	r4, [sp, #-16]!
   121c4:	str	r6, [sp, #8]
   121c8:	mov	r6, r1
   121cc:	str	lr, [sp, #12]
   121d0:	sub	sp, sp, #24
   121d4:	beq	12230 <__assert_fail@plt+0x12d8>
   121d8:	movw	r1, #29668	; 0x73e4
   121dc:	movt	r1, #1
   121e0:	mov	r2, #5
   121e4:	mov	r0, #0
   121e8:	bl	10d78 <dcgettext@plt>
   121ec:	mov	r1, #0
   121f0:	mvn	r4, #0
   121f4:	mvn	r5, #0
   121f8:	movw	r3, #29716	; 0x7414
   121fc:	movt	r3, #1
   12200:	mov	r2, #0
   12204:	strd	r4, [sp]
   12208:	str	r3, [sp, #8]
   1220c:	mov	r3, #0
   12210:	strd	r0, [sp, #12]
   12214:	mov	r0, r6
   12218:	bl	16100 <__assert_fail@plt+0x51a8>
   1221c:	add	sp, sp, #24
   12220:	ldrd	r4, [sp]
   12224:	ldr	r6, [sp, #8]
   12228:	add	sp, sp, #12
   1222c:	pop	{pc}		; (ldr pc, [sp], #4)
   12230:	movw	r1, #29692	; 0x73fc
   12234:	movt	r1, #1
   12238:	mov	r2, #5
   1223c:	bl	10d78 <dcgettext@plt>
   12240:	b	121ec <__assert_fail@plt+0x1294>
   12244:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12248:	strd	r6, [sp, #8]
   1224c:	strd	r8, [sp, #16]
   12250:	mov	r9, r3
   12254:	mov	r8, r2
   12258:	str	sl, [sp, #24]
   1225c:	str	lr, [sp, #28]
   12260:	sub	sp, sp, #32
   12264:	ldr	r6, [sp, #64]	; 0x40
   12268:	str	r6, [sp]
   1226c:	bl	10dcc <lseek64@plt>
   12270:	cmp	r0, #0
   12274:	mov	r4, r0
   12278:	sbcs	r3, r1, #0
   1227c:	mov	r5, r1
   12280:	bge	122f0 <__assert_fail@plt+0x1398>
   12284:	bl	10e8c <__errno_location@plt>
   12288:	cmp	r6, #0
   1228c:	movw	r3, #29764	; 0x7444
   12290:	movt	r3, #1
   12294:	mov	r2, #5
   12298:	ldr	r7, [r0]
   1229c:	movw	r1, #29732	; 0x7424
   122a0:	movt	r1, #1
   122a4:	mov	r0, #0
   122a8:	movne	r1, r3
   122ac:	bl	10d78 <dcgettext@plt>
   122b0:	mov	r6, r0
   122b4:	mov	r1, #3
   122b8:	ldr	r2, [sp, #68]	; 0x44
   122bc:	mov	r0, #0
   122c0:	bl	152f8 <__assert_fail@plt+0x43a0>
   122c4:	mov	sl, r0
   122c8:	add	r2, sp, #8
   122cc:	mov	r1, r9
   122d0:	mov	r0, r8
   122d4:	bl	13088 <__assert_fail@plt+0x2130>
   122d8:	mov	r1, r7
   122dc:	mov	r3, sl
   122e0:	str	r0, [sp]
   122e4:	mov	r2, r6
   122e8:	mov	r0, #0
   122ec:	bl	10dfc <error@plt>
   122f0:	mov	r0, r4
   122f4:	mov	r1, r5
   122f8:	add	sp, sp, #32
   122fc:	ldrd	r4, [sp]
   12300:	ldrd	r6, [sp, #8]
   12304:	ldrd	r8, [sp, #16]
   12308:	ldr	sl, [sp, #24]
   1230c:	add	sp, sp, #28
   12310:	pop	{pc}		; (ldr pc, [sp], #4)
   12314:	strd	r4, [sp, #-16]!
   12318:	subs	r4, r1, #0
   1231c:	str	r6, [sp, #8]
   12320:	str	lr, [sp, #12]
   12324:	beq	12348 <__assert_fail@plt+0x13f0>
   12328:	movw	r5, #37204	; 0x9154
   1232c:	movt	r5, #2
   12330:	mov	r2, r4
   12334:	mov	r1, #1
   12338:	ldr	r3, [r5]
   1233c:	bl	10d54 <fwrite_unlocked@plt>
   12340:	cmp	r4, r0
   12344:	bhi	12358 <__assert_fail@plt+0x1400>
   12348:	ldrd	r4, [sp]
   1234c:	ldr	r6, [sp, #8]
   12350:	add	sp, sp, #12
   12354:	pop	{pc}		; (ldr pc, [sp], #4)
   12358:	ldr	r0, [r5]
   1235c:	bl	10f1c <clearerr_unlocked@plt>
   12360:	bl	10e8c <__errno_location@plt>
   12364:	ldr	r4, [r0]
   12368:	mov	r2, #5
   1236c:	movw	r1, #29804	; 0x746c
   12370:	movt	r1, #1
   12374:	mov	r0, #0
   12378:	bl	10d78 <dcgettext@plt>
   1237c:	mov	r5, r0
   12380:	movw	r1, #29824	; 0x7480
   12384:	movt	r1, #1
   12388:	mov	r0, #4
   1238c:	bl	1521c <__assert_fail@plt+0x42c4>
   12390:	mov	r3, r0
   12394:	mov	r2, r5
   12398:	mov	r1, r4
   1239c:	mov	r0, #1
   123a0:	bl	10dfc <error@plt>
   123a4:	strd	r4, [sp, #-20]!	; 0xffffffec
   123a8:	mov	r4, r2
   123ac:	mov	r5, r3
   123b0:	strd	r6, [sp, #8]
   123b4:	mov	r7, r0
   123b8:	str	lr, [sp, #16]
   123bc:	sub	sp, sp, #8192	; 0x2000
   123c0:	sub	sp, sp, #4
   123c4:	cmp	r5, #0
   123c8:	mov	r1, sp
   123cc:	cmpeq	r4, #8192	; 0x2000
   123d0:	mov	r2, r4
   123d4:	mov	r0, r7
   123d8:	movhi	r2, #8192	; 0x2000
   123dc:	bl	154e8 <__assert_fail@plt+0x4590>
   123e0:	mov	r3, r0
   123e4:	mov	r0, sp
   123e8:	cmn	r3, #1
   123ec:	mov	r1, r3
   123f0:	beq	12440 <__assert_fail@plt+0x14e8>
   123f4:	subs	r4, r4, r3
   123f8:	sbc	r5, r5, #0
   123fc:	orrs	r2, r4, r5
   12400:	movne	r6, #1
   12404:	moveq	r6, #0
   12408:	cmp	r3, #0
   1240c:	movne	r6, #0
   12410:	cmp	r6, #0
   12414:	bne	12448 <__assert_fail@plt+0x14f0>
   12418:	bl	12314 <__assert_fail@plt+0x13bc>
   1241c:	orrs	r3, r4, r5
   12420:	bne	123c4 <__assert_fail@plt+0x146c>
   12424:	mov	r0, r6
   12428:	add	sp, sp, #8192	; 0x2000
   1242c:	add	sp, sp, #4
   12430:	ldrd	r4, [sp]
   12434:	ldrd	r6, [sp, #8]
   12438:	add	sp, sp, #16
   1243c:	pop	{pc}		; (ldr pc, [sp], #4)
   12440:	mov	r0, #1
   12444:	b	12428 <__assert_fail@plt+0x14d0>
   12448:	mov	r0, #2
   1244c:	b	12428 <__assert_fail@plt+0x14d0>
   12450:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12454:	strd	r6, [sp, #8]
   12458:	mov	r6, r2
   1245c:	mov	r7, r3
   12460:	orrs	r3, r6, r7
   12464:	strd	r8, [sp, #16]
   12468:	str	lr, [sp, #24]
   1246c:	sub	sp, sp, #8256	; 0x2040
   12470:	sub	sp, sp, #52	; 0x34
   12474:	beq	125ec <__assert_fail@plt+0x1694>
   12478:	movw	r9, #37213	; 0x915d
   1247c:	movt	r9, #2
   12480:	mov	r8, r0
   12484:	mov	r5, r1
   12488:	mov	r2, #8192	; 0x2000
   1248c:	add	r1, sp, #112	; 0x70
   12490:	mov	r0, r5
   12494:	bl	154e8 <__assert_fail@plt+0x4590>
   12498:	cmn	r0, #1
   1249c:	beq	125a4 <__assert_fail@plt+0x164c>
   124a0:	cmp	r0, #0
   124a4:	beq	125ec <__assert_fail@plt+0x1694>
   124a8:	ldrb	r1, [r9]
   124ac:	add	r3, sp, #112	; 0x70
   124b0:	mov	r4, #0
   124b4:	b	124c0 <__assert_fail@plt+0x1568>
   124b8:	cmp	r0, r4
   124bc:	beq	1253c <__assert_fail@plt+0x15e4>
   124c0:	ldrb	r2, [r3], #1
   124c4:	add	r4, r4, #1
   124c8:	cmp	r2, r1
   124cc:	bne	124b8 <__assert_fail@plt+0x1560>
   124d0:	subs	r6, r6, #1
   124d4:	sbc	r7, r7, #0
   124d8:	orrs	r2, r6, r7
   124dc:	bne	124b8 <__assert_fail@plt+0x1560>
   124e0:	sub	r6, r0, r4
   124e4:	mov	r9, #1
   124e8:	rsbs	r6, r6, #0
   124ec:	mov	r0, r5
   124f0:	sbc	r7, r7, r7
   124f4:	mov	r2, r6
   124f8:	str	r9, [sp]
   124fc:	mov	r3, r7
   12500:	bl	10dcc <lseek64@plt>
   12504:	cmp	r0, #0
   12508:	sbcs	r3, r1, #0
   1250c:	blt	1254c <__assert_fail@plt+0x15f4>
   12510:	add	r0, sp, #112	; 0x70
   12514:	mov	r1, r4
   12518:	bl	12314 <__assert_fail@plt+0x13bc>
   1251c:	mov	r0, r9
   12520:	add	sp, sp, #8256	; 0x2040
   12524:	add	sp, sp, #52	; 0x34
   12528:	ldrd	r4, [sp]
   1252c:	ldrd	r6, [sp, #8]
   12530:	ldrd	r8, [sp, #16]
   12534:	add	sp, sp, #24
   12538:	pop	{pc}		; (ldr pc, [sp], #4)
   1253c:	mov	r1, r0
   12540:	add	r0, sp, #112	; 0x70
   12544:	bl	12314 <__assert_fail@plt+0x13bc>
   12548:	b	12488 <__assert_fail@plt+0x1530>
   1254c:	add	r2, sp, #8
   12550:	mov	r1, r5
   12554:	mov	r0, #3
   12558:	bl	10db4 <__fxstat64@plt>
   1255c:	cmp	r0, #0
   12560:	bne	12588 <__assert_fail@plt+0x1630>
   12564:	ldr	r3, [sp, #24]
   12568:	and	r3, r3, #61440	; 0xf000
   1256c:	cmp	r3, #32768	; 0x8000
   12570:	beq	12588 <__assert_fail@plt+0x1630>
   12574:	add	r0, sp, #112	; 0x70
   12578:	mov	r1, r4
   1257c:	bl	12314 <__assert_fail@plt+0x13bc>
   12580:	mov	r0, #1
   12584:	b	12520 <__assert_fail@plt+0x15c8>
   12588:	mov	r1, #1
   1258c:	mov	r2, r6
   12590:	mov	r3, r7
   12594:	mov	r0, r5
   12598:	stm	sp, {r1, r8}
   1259c:	bl	12244 <__assert_fail@plt+0x12ec>
   125a0:	b	12574 <__assert_fail@plt+0x161c>
   125a4:	bl	10e8c <__errno_location@plt>
   125a8:	ldr	r4, [r0]
   125ac:	mov	r2, #5
   125b0:	movw	r1, #29840	; 0x7490
   125b4:	movt	r1, #1
   125b8:	mov	r0, #0
   125bc:	bl	10d78 <dcgettext@plt>
   125c0:	mov	r5, r0
   125c4:	mov	r1, r8
   125c8:	mov	r0, #4
   125cc:	bl	1521c <__assert_fail@plt+0x42c4>
   125d0:	mov	r3, r0
   125d4:	mov	r2, r5
   125d8:	mov	r0, #0
   125dc:	mov	r1, r4
   125e0:	bl	10dfc <error@plt>
   125e4:	mov	r0, #0
   125e8:	b	12520 <__assert_fail@plt+0x15c8>
   125ec:	mov	r0, #1
   125f0:	b	12520 <__assert_fail@plt+0x15c8>
   125f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   125f8:	mov	r4, r2
   125fc:	mov	r5, r3
   12600:	orrs	r3, r4, r5
   12604:	strd	r6, [sp, #8]
   12608:	str	r8, [sp, #16]
   1260c:	str	lr, [sp, #20]
   12610:	sub	sp, sp, #8192	; 0x2000
   12614:	beq	126c0 <__assert_fail@plt+0x1768>
   12618:	mov	r8, r0
   1261c:	mov	r7, r1
   12620:	mov	r6, #8192	; 0x2000
   12624:	b	12644 <__assert_fail@plt+0x16ec>
   12628:	cmp	r3, #0
   1262c:	beq	126c0 <__assert_fail@plt+0x1768>
   12630:	subs	r4, r4, r3
   12634:	sbc	r5, r5, #0
   12638:	bl	12314 <__assert_fail@plt+0x13bc>
   1263c:	orrs	r3, r4, r5
   12640:	beq	126c0 <__assert_fail@plt+0x1768>
   12644:	mov	r3, #0
   12648:	mov	r1, sp
   1264c:	cmp	r3, r5
   12650:	mov	r0, r7
   12654:	cmpeq	r6, r4
   12658:	movhi	r6, r4
   1265c:	mov	r2, r6
   12660:	bl	154e8 <__assert_fail@plt+0x4590>
   12664:	mov	r3, r0
   12668:	mov	r0, sp
   1266c:	cmn	r3, #1
   12670:	mov	r1, r3
   12674:	bne	12628 <__assert_fail@plt+0x16d0>
   12678:	bl	10e8c <__errno_location@plt>
   1267c:	ldr	r4, [r0]
   12680:	mov	r2, #5
   12684:	movw	r1, #29840	; 0x7490
   12688:	movt	r1, #1
   1268c:	mov	r0, #0
   12690:	bl	10d78 <dcgettext@plt>
   12694:	mov	r5, r0
   12698:	mov	r1, r8
   1269c:	mov	r0, #4
   126a0:	bl	1521c <__assert_fail@plt+0x42c4>
   126a4:	mov	r3, r0
   126a8:	mov	r2, r5
   126ac:	mov	r0, #0
   126b0:	mov	r1, r4
   126b4:	bl	10dfc <error@plt>
   126b8:	mov	r0, #0
   126bc:	b	126c4 <__assert_fail@plt+0x176c>
   126c0:	mov	r0, #1
   126c4:	add	sp, sp, #8192	; 0x2000
   126c8:	ldrd	r4, [sp]
   126cc:	ldrd	r6, [sp, #8]
   126d0:	ldr	r8, [sp, #16]
   126d4:	add	sp, sp, #20
   126d8:	pop	{pc}		; (ldr pc, [sp], #4)
   126dc:	cmp	r0, #1
   126e0:	strd	r4, [sp, #-16]!
   126e4:	mov	r4, r1
   126e8:	str	r6, [sp, #8]
   126ec:	str	lr, [sp, #12]
   126f0:	bne	12744 <__assert_fail@plt+0x17ec>
   126f4:	bl	10e8c <__errno_location@plt>
   126f8:	movw	r1, #29840	; 0x7490
   126fc:	movt	r1, #1
   12700:	ldr	r5, [r0]
   12704:	mov	r2, #5
   12708:	mov	r0, #0
   1270c:	bl	10d78 <dcgettext@plt>
   12710:	mov	r6, r0
   12714:	mov	r1, r4
   12718:	mov	r0, #4
   1271c:	bl	1521c <__assert_fail@plt+0x42c4>
   12720:	mov	r3, r0
   12724:	mov	r2, r6
   12728:	ldr	r6, [sp, #8]
   1272c:	mov	r1, r5
   12730:	mov	r0, #0
   12734:	ldrd	r4, [sp]
   12738:	ldr	lr, [sp, #12]
   1273c:	add	sp, sp, #16
   12740:	b	10dfc <error@plt>
   12744:	cmp	r0, #2
   12748:	bne	12780 <__assert_fail@plt+0x1828>
   1274c:	bl	10e8c <__errno_location@plt>
   12750:	mov	r2, #5
   12754:	movw	r1, #29860	; 0x74a4
   12758:	movt	r1, #1
   1275c:	ldr	r5, [r0]
   12760:	mov	r0, #0
   12764:	bl	10d78 <dcgettext@plt>
   12768:	mov	r6, r0
   1276c:	mov	r2, r4
   12770:	mov	r1, #3
   12774:	mov	r0, #0
   12778:	bl	152f8 <__assert_fail@plt+0x43a0>
   1277c:	b	12720 <__assert_fail@plt+0x17c8>
   12780:	bl	10f40 <abort@plt>
   12784:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12788:	strd	r6, [sp, #8]
   1278c:	mov	r7, #0
   12790:	strd	r8, [sp, #16]
   12794:	mov	r9, r3
   12798:	mov	r8, r2
   1279c:	strd	sl, [sp, #24]
   127a0:	mov	sl, #0
   127a4:	mov	fp, r1
   127a8:	str	lr, [sp, #32]
   127ac:	sub	sp, sp, #8192	; 0x2000
   127b0:	sub	sp, sp, #28
   127b4:	add	r3, sp, #8256	; 0x2040
   127b8:	add	r2, sp, #8256	; 0x2040
   127bc:	add	r3, r3, #8
   127c0:	ldr	ip, [r3]
   127c4:	add	r3, sp, #8256	; 0x2040
   127c8:	add	r3, r3, #12
   127cc:	add	r2, r2, #4
   127d0:	str	r0, [sp, #16]
   127d4:	ldr	lr, [r3]
   127d8:	add	r3, sp, #8256	; 0x2040
   127dc:	ldr	r3, [r3]
   127e0:	ldr	r2, [r2]
   127e4:	str	sl, [sp]
   127e8:	subs	r3, ip, r3
   127ec:	sbc	r2, lr, r2
   127f0:	asr	r2, r2, #31
   127f4:	eor	r3, r3, r2
   127f8:	mov	r0, r2
   127fc:	subs	r3, r3, r2
   12800:	ubfx	r3, r3, #0, #13
   12804:	eor	r2, r2, r3
   12808:	subs	r0, r2, r0
   1280c:	cmp	r0, r7
   12810:	moveq	r0, #8192	; 0x2000
   12814:	subs	r3, ip, r0
   12818:	mov	r6, r0
   1281c:	mov	r0, r1
   12820:	str	r3, [sp, #8]
   12824:	ldr	r3, [sp, #16]
   12828:	str	r3, [sp, #4]
   1282c:	sbc	r3, lr, r7
   12830:	str	r3, [sp, #12]
   12834:	ldrd	r2, [sp, #8]
   12838:	bl	12244 <__assert_fail@plt+0x12ec>
   1283c:	cmp	r0, #0
   12840:	sbcs	r3, r1, #0
   12844:	blt	129b4 <__assert_fail@plt+0x1a5c>
   12848:	add	r7, sp, #24
   1284c:	mov	r2, r6
   12850:	mov	r1, r7
   12854:	mov	r0, fp
   12858:	bl	154e8 <__assert_fail@plt+0x4590>
   1285c:	cmn	r0, #1
   12860:	mov	r6, r0
   12864:	beq	12974 <__assert_fail@plt+0x1a1c>
   12868:	orrs	r3, r8, r9
   1286c:	movne	r3, #1
   12870:	moveq	r3, #0
   12874:	cmp	r0, #0
   12878:	moveq	r3, #0
   1287c:	cmp	r3, #0
   12880:	bne	129d8 <__assert_fail@plt+0x1a80>
   12884:	mov	r4, r8
   12888:	mov	r5, r9
   1288c:	movw	r3, #37213	; 0x915d
   12890:	movt	r3, #2
   12894:	str	r3, [sp, #20]
   12898:	cmp	r6, #0
   1289c:	beq	12a00 <__assert_fail@plt+0x1aa8>
   128a0:	ldr	r3, [sp, #20]
   128a4:	ldrb	sl, [r3]
   128a8:	b	128b8 <__assert_fail@plt+0x1960>
   128ac:	cmp	r6, #0
   128b0:	mov	r5, r1
   128b4:	beq	12a00 <__assert_fail@plt+0x1aa8>
   128b8:	orrs	r3, r8, r9
   128bc:	mov	r2, r6
   128c0:	mov	r1, sl
   128c4:	mov	r0, r7
   128c8:	subeq	r6, r6, #1
   128cc:	beq	128e0 <__assert_fail@plt+0x1988>
   128d0:	bl	10e80 <memrchr@plt>
   128d4:	cmp	r0, #0
   128d8:	sub	r6, r0, r7
   128dc:	beq	12a00 <__assert_fail@plt+0x1aa8>
   128e0:	subs	r2, r4, #1
   128e4:	sbc	r1, r5, #0
   128e8:	orrs	r3, r4, r5
   128ec:	mov	r4, r2
   128f0:	bne	128ac <__assert_fail@plt+0x1954>
   128f4:	add	r3, sp, #8256	; 0x2040
   128f8:	ldrd	r4, [sp, #8]
   128fc:	ldrd	r2, [r3]
   12900:	cmp	r2, r4
   12904:	sbcs	r3, r3, r5
   12908:	bge	12a84 <__assert_fail@plt+0x1b2c>
   1290c:	ldr	r1, [sp, #16]
   12910:	mov	sl, #0
   12914:	add	r3, sp, #8256	; 0x2040
   12918:	mov	r0, fp
   1291c:	ldrd	r2, [r3]
   12920:	str	sl, [sp]
   12924:	str	r1, [sp, #4]
   12928:	bl	12244 <__assert_fail@plt+0x12ec>
   1292c:	cmp	r0, #0
   12930:	sbcs	r3, r1, #0
   12934:	blt	129b4 <__assert_fail@plt+0x1a5c>
   12938:	add	r3, sp, #8256	; 0x2040
   1293c:	mov	r0, fp
   12940:	ldr	r3, [r3]
   12944:	subs	r2, r4, r3
   12948:	add	r3, sp, #8256	; 0x2040
   1294c:	add	r3, r3, #4
   12950:	ldr	r3, [r3]
   12954:	sbc	r3, r5, r3
   12958:	bl	123a4 <__assert_fail@plt+0x144c>
   1295c:	cmp	r0, sl
   12960:	beq	12a84 <__assert_fail@plt+0x1b2c>
   12964:	ldr	r1, [sp, #16]
   12968:	bl	126dc <__assert_fail@plt+0x1784>
   1296c:	mov	r0, sl
   12970:	b	129b8 <__assert_fail@plt+0x1a60>
   12974:	bl	10e8c <__errno_location@plt>
   12978:	ldr	r4, [r0]
   1297c:	mov	r2, #5
   12980:	movw	r1, #29840	; 0x7490
   12984:	movt	r1, #1
   12988:	mov	r0, #0
   1298c:	bl	10d78 <dcgettext@plt>
   12990:	mov	r5, r0
   12994:	mov	r0, #4
   12998:	ldr	r1, [sp, #16]
   1299c:	bl	1521c <__assert_fail@plt+0x42c4>
   129a0:	mov	r3, r0
   129a4:	mov	r2, r5
   129a8:	mov	r1, r4
   129ac:	mov	r0, #0
   129b0:	bl	10dfc <error@plt>
   129b4:	mov	r0, #0
   129b8:	add	sp, sp, #8192	; 0x2000
   129bc:	add	sp, sp, #28
   129c0:	ldrd	r4, [sp]
   129c4:	ldrd	r6, [sp, #8]
   129c8:	ldrd	r8, [sp, #16]
   129cc:	ldrd	sl, [sp, #24]
   129d0:	add	sp, sp, #32
   129d4:	pop	{pc}		; (ldr pc, [sp], #4)
   129d8:	movw	r2, #37213	; 0x915d
   129dc:	movt	r2, #2
   129e0:	add	r3, r7, r0
   129e4:	ldrb	r2, [r2]
   129e8:	ldrb	r3, [r3, #-1]
   129ec:	cmp	r3, r2
   129f0:	beq	12884 <__assert_fail@plt+0x192c>
   129f4:	subs	r4, r8, #1
   129f8:	sbc	r5, r9, #0
   129fc:	b	1288c <__assert_fail@plt+0x1934>
   12a00:	add	r1, sp, #8256	; 0x2040
   12a04:	ldrd	r2, [sp, #8]
   12a08:	ldrd	r0, [r1]
   12a0c:	cmp	r3, r1
   12a10:	cmpeq	r2, r0
   12a14:	beq	12a7c <__assert_fail@plt+0x1b24>
   12a18:	ldr	r3, [sp, #8]
   12a1c:	mov	r0, fp
   12a20:	subs	r3, r3, #8192	; 0x2000
   12a24:	str	r3, [sp, #8]
   12a28:	mov	r3, #0
   12a2c:	str	r3, [sp]
   12a30:	ldr	r3, [sp, #12]
   12a34:	sbc	r3, r3, #0
   12a38:	str	r3, [sp, #12]
   12a3c:	ldr	r3, [sp, #16]
   12a40:	str	r3, [sp, #4]
   12a44:	ldrd	r2, [sp, #8]
   12a48:	bl	12244 <__assert_fail@plt+0x12ec>
   12a4c:	cmp	r0, #0
   12a50:	sbcs	r3, r1, #0
   12a54:	blt	129b4 <__assert_fail@plt+0x1a5c>
   12a58:	mov	r2, #8192	; 0x2000
   12a5c:	mov	r1, r7
   12a60:	mov	r0, fp
   12a64:	bl	154e8 <__assert_fail@plt+0x4590>
   12a68:	cmn	r0, #1
   12a6c:	mov	r6, r0
   12a70:	beq	12974 <__assert_fail@plt+0x1a1c>
   12a74:	cmp	r0, #0
   12a78:	bne	12898 <__assert_fail@plt+0x1940>
   12a7c:	mov	r0, #1
   12a80:	b	129b8 <__assert_fail@plt+0x1a60>
   12a84:	mov	r0, r7
   12a88:	add	r1, r6, #1
   12a8c:	bl	12314 <__assert_fail@plt+0x13bc>
   12a90:	ldrd	r4, [sp, #8]
   12a94:	mov	r1, #0
   12a98:	mov	r0, fp
   12a9c:	ldr	r3, [sp, #16]
   12aa0:	adds	r4, r4, r6
   12aa4:	adc	r5, r5, #0
   12aa8:	adds	r2, r4, #1
   12aac:	stm	sp, {r1, r3}
   12ab0:	adc	r3, r5, r1
   12ab4:	bl	12244 <__assert_fail@plt+0x12ec>
   12ab8:	mvn	r0, r1
   12abc:	lsr	r0, r0, #31
   12ac0:	b	129b8 <__assert_fail@plt+0x1a60>
   12ac4:	subs	r6, r0, #0
   12ac8:	str	r7, [sp, #-8]!
   12acc:	str	lr, [sp, #4]
   12ad0:	sub	sp, sp, #56	; 0x38
   12ad4:	beq	12b1c <__assert_fail@plt+0x1bc4>
   12ad8:	movw	r3, #37200	; 0x9150
   12adc:	movt	r3, #2
   12ae0:	ldr	r4, [r3]
   12ae4:	mov	r2, #5
   12ae8:	movw	r1, #29900	; 0x74cc
   12aec:	movt	r1, #1
   12af0:	mov	r0, #0
   12af4:	bl	10d78 <dcgettext@plt>
   12af8:	movw	r3, #37228	; 0x916c
   12afc:	movt	r3, #2
   12b00:	mov	r2, r0
   12b04:	mov	r1, #1
   12b08:	ldr	r3, [r3]
   12b0c:	mov	r0, r4
   12b10:	bl	10ec8 <__fprintf_chk@plt>
   12b14:	mov	r0, r6
   12b18:	bl	10e5c <exit@plt>
   12b1c:	mov	r2, #5
   12b20:	movw	r1, #29940	; 0x74f4
   12b24:	movt	r1, #1
   12b28:	movw	r7, #37204	; 0x9154
   12b2c:	movt	r7, #2
   12b30:	bl	10d78 <dcgettext@plt>
   12b34:	movw	r3, #37228	; 0x916c
   12b38:	movt	r3, #2
   12b3c:	mov	r1, r0
   12b40:	mov	r0, #1
   12b44:	ldr	r2, [r3]
   12b48:	bl	10eb0 <__printf_chk@plt>
   12b4c:	mov	r2, #5
   12b50:	movw	r1, #29976	; 0x7518
   12b54:	movt	r1, #1
   12b58:	mov	r0, r6
   12b5c:	bl	10d78 <dcgettext@plt>
   12b60:	mov	r1, r0
   12b64:	mov	r2, #10
   12b68:	mov	r0, #1
   12b6c:	bl	10eb0 <__printf_chk@plt>
   12b70:	mov	r2, #5
   12b74:	movw	r1, #30112	; 0x75a0
   12b78:	movt	r1, #1
   12b7c:	mov	r0, r6
   12b80:	bl	10d78 <dcgettext@plt>
   12b84:	ldr	r1, [r7]
   12b88:	bl	10cdc <fputs_unlocked@plt>
   12b8c:	mov	r2, #5
   12b90:	movw	r1, #30168	; 0x75d8
   12b94:	movt	r1, #1
   12b98:	mov	r0, r6
   12b9c:	bl	10d78 <dcgettext@plt>
   12ba0:	ldr	r1, [r7]
   12ba4:	bl	10cdc <fputs_unlocked@plt>
   12ba8:	mov	r2, #5
   12bac:	movw	r1, #30244	; 0x7624
   12bb0:	movt	r1, #1
   12bb4:	mov	r0, r6
   12bb8:	bl	10d78 <dcgettext@plt>
   12bbc:	mov	r1, r0
   12bc0:	mov	r2, #10
   12bc4:	mov	r0, #1
   12bc8:	bl	10eb0 <__printf_chk@plt>
   12bcc:	mov	r2, #5
   12bd0:	movw	r1, #30644	; 0x77b4
   12bd4:	movt	r1, #1
   12bd8:	mov	r0, r6
   12bdc:	bl	10d78 <dcgettext@plt>
   12be0:	ldr	r1, [r7]
   12be4:	bl	10cdc <fputs_unlocked@plt>
   12be8:	mov	r2, #5
   12bec:	movw	r1, #30776	; 0x7838
   12bf0:	movt	r1, #1
   12bf4:	mov	r0, r6
   12bf8:	bl	10d78 <dcgettext@plt>
   12bfc:	ldr	r1, [r7]
   12c00:	bl	10cdc <fputs_unlocked@plt>
   12c04:	mov	r2, #5
   12c08:	movw	r1, #30840	; 0x7878
   12c0c:	movt	r1, #1
   12c10:	mov	r0, r6
   12c14:	bl	10d78 <dcgettext@plt>
   12c18:	ldr	r1, [r7]
   12c1c:	bl	10cdc <fputs_unlocked@plt>
   12c20:	mov	r2, #5
   12c24:	movw	r1, #30888	; 0x78a8
   12c28:	movt	r1, #1
   12c2c:	mov	r0, r6
   12c30:	bl	10d78 <dcgettext@plt>
   12c34:	ldr	r1, [r7]
   12c38:	bl	10cdc <fputs_unlocked@plt>
   12c3c:	mov	r2, #5
   12c40:	movw	r1, #30944	; 0x78e0
   12c44:	movt	r1, #1
   12c48:	mov	r0, r6
   12c4c:	bl	10d78 <dcgettext@plt>
   12c50:	ldr	r1, [r7]
   12c54:	bl	10cdc <fputs_unlocked@plt>
   12c58:	movw	lr, #29444	; 0x7304
   12c5c:	movt	lr, #1
   12c60:	ldr	ip, [lr]
   12c64:	ldr	r4, [lr, #4]
   12c68:	ldrd	r8, [lr, #8]
   12c6c:	subs	r1, ip, #0
   12c70:	str	ip, [sp]
   12c74:	ldrd	r2, [lr, #16]
   12c78:	str	r4, [sp, #4]
   12c7c:	ldrd	r4, [lr, #24]
   12c80:	strd	r8, [sp, #8]
   12c84:	ldrd	r8, [lr, #32]
   12c88:	strd	r2, [sp, #16]
   12c8c:	ldrd	r2, [lr, #40]	; 0x28
   12c90:	strd	r4, [sp, #24]
   12c94:	ldrd	r4, [lr, #48]	; 0x30
   12c98:	strd	r8, [sp, #32]
   12c9c:	strd	r2, [sp, #40]	; 0x28
   12ca0:	strd	r4, [sp, #48]	; 0x30
   12ca4:	movwne	r5, #29892	; 0x74c4
   12ca8:	mov	r4, sp
   12cac:	movtne	r5, #1
   12cb0:	bne	12da8 <__assert_fail@plt+0x1e50>
   12cb4:	ldr	r4, [r4, #4]
   12cb8:	movw	r1, #31156	; 0x79b4
   12cbc:	movt	r1, #1
   12cc0:	mov	r2, #5
   12cc4:	cmp	r4, #0
   12cc8:	beq	12dbc <__assert_fail@plt+0x1e64>
   12ccc:	mov	r0, #0
   12cd0:	bl	10d78 <dcgettext@plt>
   12cd4:	mov	r1, r0
   12cd8:	movw	r3, #31180	; 0x79cc
   12cdc:	movt	r3, #1
   12ce0:	movw	r2, #31220	; 0x79f4
   12ce4:	movt	r2, #1
   12ce8:	mov	r0, #1
   12cec:	bl	10eb0 <__printf_chk@plt>
   12cf0:	mov	r1, #0
   12cf4:	mov	r0, #5
   12cf8:	bl	10ef8 <setlocale@plt>
   12cfc:	cmp	r0, #0
   12d00:	movweq	r5, #29892	; 0x74c4
   12d04:	movteq	r5, #1
   12d08:	beq	12d2c <__assert_fail@plt+0x1dd4>
   12d0c:	movw	r1, #31236	; 0x7a04
   12d10:	movt	r1, #1
   12d14:	mov	r2, #3
   12d18:	movw	r5, #29892	; 0x74c4
   12d1c:	movt	r5, #1
   12d20:	bl	10f34 <strncmp@plt>
   12d24:	cmp	r0, #0
   12d28:	bne	12e74 <__assert_fail@plt+0x1f1c>
   12d2c:	mov	r2, #5
   12d30:	movw	r1, #31312	; 0x7a50
   12d34:	movt	r1, #1
   12d38:	mov	r0, #0
   12d3c:	bl	10d78 <dcgettext@plt>
   12d40:	mov	r1, r0
   12d44:	movw	r3, #29892	; 0x74c4
   12d48:	movt	r3, #1
   12d4c:	movw	r2, #31180	; 0x79cc
   12d50:	movt	r2, #1
   12d54:	mov	r0, #1
   12d58:	bl	10eb0 <__printf_chk@plt>
   12d5c:	mov	r2, #5
   12d60:	movw	r1, #31340	; 0x7a6c
   12d64:	movt	r1, #1
   12d68:	mov	r0, #0
   12d6c:	bl	10d78 <dcgettext@plt>
   12d70:	movw	r2, #31652	; 0x7ba4
   12d74:	movt	r2, #1
   12d78:	cmp	r4, r5
   12d7c:	movw	r3, #29972	; 0x7514
   12d80:	movt	r3, #1
   12d84:	mov	r1, r0
   12d88:	moveq	r3, r2
   12d8c:	mov	r2, r4
   12d90:	mov	r0, #1
   12d94:	bl	10eb0 <__printf_chk@plt>
   12d98:	b	12b14 <__assert_fail@plt+0x1bbc>
   12d9c:	ldr	r1, [r4, #8]!
   12da0:	cmp	r1, #0
   12da4:	beq	12cb4 <__assert_fail@plt+0x1d5c>
   12da8:	mov	r0, r5
   12dac:	bl	10cf4 <strcmp@plt>
   12db0:	cmp	r0, #0
   12db4:	bne	12d9c <__assert_fail@plt+0x1e44>
   12db8:	b	12cb4 <__assert_fail@plt+0x1d5c>
   12dbc:	mov	r0, r4
   12dc0:	bl	10d78 <dcgettext@plt>
   12dc4:	mov	r1, r0
   12dc8:	movw	r3, #31180	; 0x79cc
   12dcc:	movt	r3, #1
   12dd0:	movw	r2, #31220	; 0x79f4
   12dd4:	movt	r2, #1
   12dd8:	mov	r0, #1
   12ddc:	bl	10eb0 <__printf_chk@plt>
   12de0:	mov	r1, r4
   12de4:	mov	r0, #5
   12de8:	bl	10ef8 <setlocale@plt>
   12dec:	cmp	r0, #0
   12df0:	beq	12e0c <__assert_fail@plt+0x1eb4>
   12df4:	movw	r1, #31236	; 0x7a04
   12df8:	movt	r1, #1
   12dfc:	mov	r2, #3
   12e00:	bl	10f34 <strncmp@plt>
   12e04:	cmp	r0, #0
   12e08:	bne	12e68 <__assert_fail@plt+0x1f10>
   12e0c:	mov	r2, #5
   12e10:	movw	r1, #31312	; 0x7a50
   12e14:	movt	r1, #1
   12e18:	mov	r0, #0
   12e1c:	bl	10d78 <dcgettext@plt>
   12e20:	mov	r1, r0
   12e24:	movw	r3, #29892	; 0x74c4
   12e28:	movt	r3, #1
   12e2c:	movw	r2, #31180	; 0x79cc
   12e30:	movt	r2, #1
   12e34:	mov	r0, #1
   12e38:	bl	10eb0 <__printf_chk@plt>
   12e3c:	movw	r1, #31340	; 0x7a6c
   12e40:	movt	r1, #1
   12e44:	mov	r2, #5
   12e48:	mov	r0, #0
   12e4c:	bl	10d78 <dcgettext@plt>
   12e50:	movw	r4, #29892	; 0x74c4
   12e54:	movt	r4, #1
   12e58:	movw	r3, #31652	; 0x7ba4
   12e5c:	movt	r3, #1
   12e60:	mov	r1, r0
   12e64:	b	12d8c <__assert_fail@plt+0x1e34>
   12e68:	movw	r5, #29892	; 0x74c4
   12e6c:	movt	r5, #1
   12e70:	mov	r4, r5
   12e74:	mov	r2, #5
   12e78:	movw	r1, #31240	; 0x7a08
   12e7c:	movt	r1, #1
   12e80:	mov	r0, #0
   12e84:	bl	10d78 <dcgettext@plt>
   12e88:	ldr	r1, [r7]
   12e8c:	bl	10cdc <fputs_unlocked@plt>
   12e90:	b	12d2c <__assert_fail@plt+0x1dd4>
   12e94:	movw	r3, #37220	; 0x9164
   12e98:	movt	r3, #2
   12e9c:	str	r0, [r3]
   12ea0:	bx	lr
   12ea4:	movw	r3, #37220	; 0x9164
   12ea8:	movt	r3, #2
   12eac:	strb	r0, [r3, #4]
   12eb0:	bx	lr
   12eb4:	movw	r3, #37204	; 0x9154
   12eb8:	movt	r3, #2
   12ebc:	strd	r4, [sp, #-16]!
   12ec0:	ldr	r0, [r3]
   12ec4:	str	r6, [sp, #8]
   12ec8:	str	lr, [sp, #12]
   12ecc:	sub	sp, sp, #8
   12ed0:	bl	16bb8 <__assert_fail@plt+0x5c60>
   12ed4:	cmp	r0, #0
   12ed8:	beq	12f04 <__assert_fail@plt+0x1fac>
   12edc:	movw	r4, #37220	; 0x9164
   12ee0:	movt	r4, #2
   12ee4:	ldrb	r6, [r4, #4]
   12ee8:	bl	10e8c <__errno_location@plt>
   12eec:	mov	r5, r0
   12ef0:	cmp	r6, #0
   12ef4:	beq	12f30 <__assert_fail@plt+0x1fd8>
   12ef8:	ldr	r3, [r0]
   12efc:	cmp	r3, #32
   12f00:	bne	12f30 <__assert_fail@plt+0x1fd8>
   12f04:	movw	r3, #37200	; 0x9150
   12f08:	movt	r3, #2
   12f0c:	ldr	r0, [r3]
   12f10:	bl	16bb8 <__assert_fail@plt+0x5c60>
   12f14:	cmp	r0, #0
   12f18:	bne	12f78 <__assert_fail@plt+0x2020>
   12f1c:	add	sp, sp, #8
   12f20:	ldrd	r4, [sp]
   12f24:	ldr	r6, [sp, #8]
   12f28:	add	sp, sp, #12
   12f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f30:	movw	r1, #31860	; 0x7c74
   12f34:	movt	r1, #1
   12f38:	mov	r2, #5
   12f3c:	mov	r0, #0
   12f40:	bl	10d78 <dcgettext@plt>
   12f44:	mov	r6, r0
   12f48:	ldr	r0, [r4]
   12f4c:	cmp	r0, #0
   12f50:	beq	12f88 <__assert_fail@plt+0x2030>
   12f54:	ldr	r4, [r5]
   12f58:	bl	152e4 <__assert_fail@plt+0x438c>
   12f5c:	mov	r3, r0
   12f60:	movw	r2, #31504	; 0x7b10
   12f64:	movt	r2, #1
   12f68:	mov	r0, #0
   12f6c:	str	r6, [sp]
   12f70:	mov	r1, r4
   12f74:	bl	10dfc <error@plt>
   12f78:	movw	r3, #37116	; 0x90fc
   12f7c:	movt	r3, #2
   12f80:	ldr	r0, [r3]
   12f84:	bl	10d24 <_exit@plt>
   12f88:	mov	r3, r6
   12f8c:	movw	r2, #31508	; 0x7b14
   12f90:	movt	r2, #1
   12f94:	ldr	r1, [r5]
   12f98:	bl	10dfc <error@plt>
   12f9c:	b	12f78 <__assert_fail@plt+0x2020>
   12fa0:	strd	r4, [sp, #-12]!
   12fa4:	mov	r5, r0
   12fa8:	str	lr, [sp, #8]
   12fac:	sub	sp, sp, #12
   12fb0:	bl	10e8c <__errno_location@plt>
   12fb4:	mov	r4, r0
   12fb8:	mov	r2, #0
   12fbc:	ldr	r3, [r4]
   12fc0:	mov	r0, r5
   12fc4:	str	r2, [r4]
   12fc8:	str	r3, [sp]
   12fcc:	str	r3, [sp, #4]
   12fd0:	bl	10d18 <free@plt>
   12fd4:	ldr	r3, [r4]
   12fd8:	add	r2, sp, #8
   12fdc:	clz	r3, r3
   12fe0:	lsr	r3, r3, #5
   12fe4:	add	r3, r2, r3, lsl #2
   12fe8:	ldr	r3, [r3, #-8]
   12fec:	str	r3, [r4]
   12ff0:	add	sp, sp, #12
   12ff4:	ldrd	r4, [sp]
   12ff8:	add	sp, sp, #8
   12ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   13000:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13004:	subs	r5, r2, #0
   13008:	strd	r6, [sp, #8]
   1300c:	str	r8, [sp, #16]
   13010:	str	lr, [sp, #20]
   13014:	beq	13080 <__assert_fail@plt+0x2128>
   13018:	mov	r8, r0
   1301c:	mov	r6, r1
   13020:	mov	r7, #0
   13024:	b	1303c <__assert_fail@plt+0x20e4>
   13028:	cmp	r0, #0
   1302c:	beq	13074 <__assert_fail@plt+0x211c>
   13030:	subs	r5, r5, r0
   13034:	add	r7, r7, r0
   13038:	beq	1305c <__assert_fail@plt+0x2104>
   1303c:	mov	r1, r6
   13040:	mov	r2, r5
   13044:	mov	r0, r8
   13048:	bl	154e8 <__assert_fail@plt+0x4590>
   1304c:	cmn	r0, #1
   13050:	mov	r4, r0
   13054:	add	r6, r6, r0
   13058:	bne	13028 <__assert_fail@plt+0x20d0>
   1305c:	mov	r0, r7
   13060:	ldrd	r4, [sp]
   13064:	ldrd	r6, [sp, #8]
   13068:	ldr	r8, [sp, #16]
   1306c:	add	sp, sp, #20
   13070:	pop	{pc}		; (ldr pc, [sp], #4)
   13074:	bl	10e8c <__errno_location@plt>
   13078:	str	r4, [r0]
   1307c:	b	1305c <__assert_fail@plt+0x2104>
   13080:	mov	r7, r5
   13084:	b	1305c <__assert_fail@plt+0x2104>
   13088:	mov	r3, #0
   1308c:	cmp	r0, #0
   13090:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13094:	mov	r5, r1
   13098:	sbcs	r1, r1, #0
   1309c:	strd	r6, [sp, #8]
   130a0:	mov	r4, r0
   130a4:	add	r6, r2, #20
   130a8:	str	r8, [sp, #16]
   130ac:	str	lr, [sp, #20]
   130b0:	strb	r3, [r2, #20]
   130b4:	blt	13114 <__assert_fail@plt+0x21bc>
   130b8:	mov	r0, r4
   130bc:	mov	r1, r5
   130c0:	mov	r2, #10
   130c4:	mov	r3, #0
   130c8:	bl	17034 <__assert_fail@plt+0x60dc>
   130cc:	add	ip, r2, #48	; 0x30
   130d0:	mov	r0, r4
   130d4:	mov	r1, r5
   130d8:	mov	r3, #0
   130dc:	mov	r2, #10
   130e0:	strb	ip, [r6, #-1]!
   130e4:	bl	17034 <__assert_fail@plt+0x60dc>
   130e8:	mov	r4, r0
   130ec:	mov	r5, r1
   130f0:	orrs	r3, r4, r5
   130f4:	bne	130b8 <__assert_fail@plt+0x2160>
   130f8:	mov	r0, r6
   130fc:	ldrd	r4, [sp]
   13100:	ldrd	r6, [sp, #8]
   13104:	ldr	r8, [sp, #16]
   13108:	add	sp, sp, #20
   1310c:	pop	{pc}		; (ldr pc, [sp], #4)
   13110:	mov	r6, r7
   13114:	mov	r0, r4
   13118:	mov	r1, r5
   1311c:	mov	r2, #10
   13120:	mov	r3, #0
   13124:	bl	17034 <__assert_fail@plt+0x60dc>
   13128:	rsb	ip, r2, #48	; 0x30
   1312c:	mov	r0, r4
   13130:	mov	r1, r5
   13134:	mov	r3, #0
   13138:	mov	r2, #10
   1313c:	strb	ip, [r6, #-1]
   13140:	sub	r7, r6, #1
   13144:	bl	17034 <__assert_fail@plt+0x60dc>
   13148:	mov	r4, r0
   1314c:	mov	r5, r1
   13150:	orrs	r3, r4, r5
   13154:	bne	13110 <__assert_fail@plt+0x21b8>
   13158:	mov	r3, #45	; 0x2d
   1315c:	sub	r6, r6, #2
   13160:	strb	r3, [r7, #-1]
   13164:	b	130f8 <__assert_fail@plt+0x21a0>
   13168:	mov	r3, #0
   1316c:	strd	r4, [sp, #-16]!
   13170:	mov	r4, r0
   13174:	mov	r5, r1
   13178:	str	r6, [sp, #8]
   1317c:	add	r6, r2, #20
   13180:	str	lr, [sp, #12]
   13184:	strb	r3, [r2, #20]
   13188:	mov	r0, r4
   1318c:	mov	r1, r5
   13190:	mov	r2, #10
   13194:	mov	r3, #0
   13198:	bl	17108 <__assert_fail@plt+0x61b0>
   1319c:	add	ip, r2, #48	; 0x30
   131a0:	mov	r0, r4
   131a4:	mov	r1, r5
   131a8:	mov	r2, #10
   131ac:	mov	r3, #0
   131b0:	strb	ip, [r6, #-1]!
   131b4:	bl	17108 <__assert_fail@plt+0x61b0>
   131b8:	cmp	r5, #0
   131bc:	mov	r5, r1
   131c0:	cmpeq	r4, #9
   131c4:	mov	r4, r0
   131c8:	bhi	13188 <__assert_fail@plt+0x2230>
   131cc:	mov	r0, r6
   131d0:	ldrd	r4, [sp]
   131d4:	ldr	r6, [sp, #8]
   131d8:	add	sp, sp, #12
   131dc:	pop	{pc}		; (ldr pc, [sp], #4)
   131e0:	strd	r4, [sp, #-16]!
   131e4:	subs	r4, r0, #0
   131e8:	str	r6, [sp, #8]
   131ec:	str	lr, [sp, #12]
   131f0:	beq	13288 <__assert_fail@plt+0x2330>
   131f4:	mov	r1, #47	; 0x2f
   131f8:	bl	10f04 <strrchr@plt>
   131fc:	subs	r5, r0, #0
   13200:	beq	13260 <__assert_fail@plt+0x2308>
   13204:	add	r6, r5, #1
   13208:	sub	r3, r6, r4
   1320c:	cmp	r3, #6
   13210:	ble	13260 <__assert_fail@plt+0x2308>
   13214:	movw	r1, #31928	; 0x7cb8
   13218:	movt	r1, #1
   1321c:	mov	r2, #7
   13220:	sub	r0, r5, #6
   13224:	bl	10f34 <strncmp@plt>
   13228:	cmp	r0, #0
   1322c:	bne	13260 <__assert_fail@plt+0x2308>
   13230:	movw	r1, #31936	; 0x7cc0
   13234:	movt	r1, #1
   13238:	mov	r2, #3
   1323c:	mov	r0, r6
   13240:	bl	10f34 <strncmp@plt>
   13244:	cmp	r0, #0
   13248:	movne	r4, r6
   1324c:	bne	13260 <__assert_fail@plt+0x2308>
   13250:	add	r4, r5, #4
   13254:	movw	r3, #37184	; 0x9140
   13258:	movt	r3, #2
   1325c:	str	r4, [r3]
   13260:	movw	r2, #37228	; 0x916c
   13264:	movt	r2, #2
   13268:	ldr	r6, [sp, #8]
   1326c:	movw	r3, #37188	; 0x9144
   13270:	movt	r3, #2
   13274:	str	r4, [r2]
   13278:	str	r4, [r3]
   1327c:	ldrd	r4, [sp]
   13280:	add	sp, sp, #12
   13284:	pop	{pc}		; (ldr pc, [sp], #4)
   13288:	movw	r3, #37200	; 0x9150
   1328c:	movt	r3, #2
   13290:	movw	r0, #31872	; 0x7c80
   13294:	movt	r0, #1
   13298:	ldr	r3, [r3]
   1329c:	mov	r2, #55	; 0x37
   132a0:	mov	r1, #1
   132a4:	bl	10dc0 <fwrite@plt>
   132a8:	bl	10f40 <abort@plt>
   132ac:	strd	r4, [sp, #-16]!
   132b0:	mov	r4, #0
   132b4:	mov	r5, #0
   132b8:	cmp	r1, #10
   132bc:	str	r6, [sp, #8]
   132c0:	strd	r4, [r0]
   132c4:	strd	r4, [r0, #8]
   132c8:	str	lr, [sp, #12]
   132cc:	strd	r4, [r0, #16]
   132d0:	strd	r4, [r0, #24]
   132d4:	strd	r4, [r0, #32]
   132d8:	strd	r4, [r0, #40]	; 0x28
   132dc:	beq	132f4 <__assert_fail@plt+0x239c>
   132e0:	ldrd	r4, [sp]
   132e4:	str	r1, [r0]
   132e8:	ldr	r6, [sp, #8]
   132ec:	add	sp, sp, #12
   132f0:	pop	{pc}		; (ldr pc, [sp], #4)
   132f4:	bl	10f40 <abort@plt>
   132f8:	mov	r2, #5
   132fc:	strd	r4, [sp, #-16]!
   13300:	mov	r5, r0
   13304:	str	r6, [sp, #8]
   13308:	mov	r6, r1
   1330c:	mov	r1, r0
   13310:	mov	r0, #0
   13314:	str	lr, [sp, #12]
   13318:	bl	10d78 <dcgettext@plt>
   1331c:	cmp	r5, r0
   13320:	mov	r4, r0
   13324:	beq	1333c <__assert_fail@plt+0x23e4>
   13328:	mov	r0, r4
   1332c:	ldrd	r4, [sp]
   13330:	ldr	r6, [sp, #8]
   13334:	add	sp, sp, #12
   13338:	pop	{pc}		; (ldr pc, [sp], #4)
   1333c:	bl	16e24 <__assert_fail@plt+0x5ecc>
   13340:	ldrb	r3, [r0]
   13344:	bic	r3, r3, #32
   13348:	cmp	r3, #85	; 0x55
   1334c:	bne	133b4 <__assert_fail@plt+0x245c>
   13350:	ldrb	r3, [r0, #1]
   13354:	bic	r3, r3, #32
   13358:	cmp	r3, #84	; 0x54
   1335c:	bne	13434 <__assert_fail@plt+0x24dc>
   13360:	ldrb	r3, [r0, #2]
   13364:	bic	r3, r3, #32
   13368:	cmp	r3, #70	; 0x46
   1336c:	bne	13434 <__assert_fail@plt+0x24dc>
   13370:	ldrb	r3, [r0, #3]
   13374:	cmp	r3, #45	; 0x2d
   13378:	bne	13434 <__assert_fail@plt+0x24dc>
   1337c:	ldrb	r3, [r0, #4]
   13380:	cmp	r3, #56	; 0x38
   13384:	bne	13434 <__assert_fail@plt+0x24dc>
   13388:	ldrb	r3, [r0, #5]
   1338c:	cmp	r3, #0
   13390:	bne	13434 <__assert_fail@plt+0x24dc>
   13394:	ldrb	r2, [r4]
   13398:	movw	r3, #32028	; 0x7d1c
   1339c:	movt	r3, #1
   133a0:	movw	r4, #32040	; 0x7d28
   133a4:	movt	r4, #1
   133a8:	cmp	r2, #96	; 0x60
   133ac:	movne	r4, r3
   133b0:	b	13328 <__assert_fail@plt+0x23d0>
   133b4:	cmp	r3, #71	; 0x47
   133b8:	bne	13434 <__assert_fail@plt+0x24dc>
   133bc:	ldrb	r3, [r0, #1]
   133c0:	bic	r3, r3, #32
   133c4:	cmp	r3, #66	; 0x42
   133c8:	bne	13434 <__assert_fail@plt+0x24dc>
   133cc:	ldrb	r3, [r0, #2]
   133d0:	cmp	r3, #49	; 0x31
   133d4:	bne	13434 <__assert_fail@plt+0x24dc>
   133d8:	ldrb	r3, [r0, #3]
   133dc:	cmp	r3, #56	; 0x38
   133e0:	bne	13434 <__assert_fail@plt+0x24dc>
   133e4:	ldrb	r3, [r0, #4]
   133e8:	cmp	r3, #48	; 0x30
   133ec:	bne	13434 <__assert_fail@plt+0x24dc>
   133f0:	ldrb	r3, [r0, #5]
   133f4:	cmp	r3, #51	; 0x33
   133f8:	bne	13434 <__assert_fail@plt+0x24dc>
   133fc:	ldrb	r3, [r0, #6]
   13400:	cmp	r3, #48	; 0x30
   13404:	bne	13434 <__assert_fail@plt+0x24dc>
   13408:	ldrb	r3, [r0, #7]
   1340c:	cmp	r3, #0
   13410:	bne	13434 <__assert_fail@plt+0x24dc>
   13414:	ldrb	r2, [r4]
   13418:	movw	r3, #32032	; 0x7d20
   1341c:	movt	r3, #1
   13420:	movw	r4, #32036	; 0x7d24
   13424:	movt	r4, #1
   13428:	cmp	r2, #96	; 0x60
   1342c:	movne	r4, r3
   13430:	b	13328 <__assert_fail@plt+0x23d0>
   13434:	movw	r3, #32044	; 0x7d2c
   13438:	movt	r3, #1
   1343c:	cmp	r6, #9
   13440:	movw	r4, #32024	; 0x7d18
   13444:	movt	r4, #1
   13448:	movne	r4, r3
   1344c:	b	13328 <__assert_fail@plt+0x23d0>
   13450:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13454:	strd	r6, [sp, #8]
   13458:	strd	r8, [sp, #16]
   1345c:	strd	sl, [sp, #24]
   13460:	mov	fp, r0
   13464:	mov	sl, r1
   13468:	str	lr, [sp, #32]
   1346c:	sub	sp, sp, #116	; 0x74
   13470:	ldr	r8, [sp, #152]	; 0x98
   13474:	str	r3, [sp, #28]
   13478:	ldr	r3, [sp, #156]	; 0x9c
   1347c:	str	r2, [sp, #32]
   13480:	and	r4, r3, #2
   13484:	ubfx	r3, r3, #1, #1
   13488:	str	r3, [sp, #44]	; 0x2c
   1348c:	bl	10dd8 <__ctype_get_mb_cur_max@plt>
   13490:	str	r0, [sp, #64]	; 0x40
   13494:	cmp	r8, #10
   13498:	ldrls	pc, [pc, r8, lsl #2]
   1349c:	b	14c0c <__assert_fail@plt+0x3cb4>
   134a0:	andeq	r3, r1, r4, lsr #17
   134a4:	andeq	r3, r1, r0, asr #18
   134a8:	andeq	r3, r1, ip, lsl pc
   134ac:	andeq	r3, r1, r0, ror #18
   134b0:	andeq	r3, r1, r8, lsl #16
   134b4:	andeq	r3, r1, r4, asr r8
   134b8:	ldrdeq	r3, [r1], -r4
   134bc:	andeq	r3, r1, r0, lsl r9
   134c0:	andeq	r3, r1, ip, asr #9
   134c4:	andeq	r3, r1, ip, asr #9
   134c8:	andeq	r3, r1, ip, asr #9
   134cc:	cmp	r8, #10
   134d0:	beq	134fc <__assert_fail@plt+0x25a4>
   134d4:	mov	r1, r8
   134d8:	movw	r0, #32048	; 0x7d30
   134dc:	movt	r0, #1
   134e0:	bl	132f8 <__assert_fail@plt+0x23a0>
   134e4:	mov	r1, r8
   134e8:	str	r0, [sp, #164]	; 0xa4
   134ec:	movw	r0, #32044	; 0x7d2c
   134f0:	movt	r0, #1
   134f4:	bl	132f8 <__assert_fail@plt+0x23a0>
   134f8:	str	r0, [sp, #168]	; 0xa8
   134fc:	cmp	r4, #0
   13500:	movne	r4, #0
   13504:	beq	148e8 <__assert_fail@plt+0x3990>
   13508:	mov	r3, #1
   1350c:	mov	r5, #0
   13510:	ldr	r0, [sp, #168]	; 0xa8
   13514:	str	r3, [sp, #36]	; 0x24
   13518:	str	r3, [sp, #40]	; 0x28
   1351c:	str	r5, [sp, #68]	; 0x44
   13520:	bl	10e68 <strlen@plt>
   13524:	ldr	r3, [sp, #168]	; 0xa8
   13528:	str	r5, [sp, #48]	; 0x30
   1352c:	str	r0, [sp, #56]	; 0x38
   13530:	str	r3, [sp, #60]	; 0x3c
   13534:	str	r5, [sp, #72]	; 0x48
   13538:	str	r8, [sp, #152]	; 0x98
   1353c:	mov	r8, fp
   13540:	mov	r9, #0
   13544:	ldr	fp, [sp, #152]	; 0x98
   13548:	ldr	r3, [sp, #28]
   1354c:	cmn	r3, #1
   13550:	beq	13ab0 <__assert_fail@plt+0x2b58>
   13554:	ldr	r3, [sp, #28]
   13558:	subs	r6, r3, r9
   1355c:	movne	r6, #1
   13560:	cmp	r6, #0
   13564:	beq	13ac8 <__assert_fail@plt+0x2b70>
   13568:	ldr	r0, [sp, #32]
   1356c:	ldr	r7, [sp, #40]	; 0x28
   13570:	add	r3, r0, r9
   13574:	cmp	fp, #2
   13578:	moveq	r7, #0
   1357c:	andne	r7, r7, #1
   13580:	str	r3, [sp, #52]	; 0x34
   13584:	cmp	r7, #0
   13588:	beq	13f64 <__assert_fail@plt+0x300c>
   1358c:	ldr	r2, [sp, #56]	; 0x38
   13590:	cmp	r2, #0
   13594:	beq	14200 <__assert_fail@plt+0x32a8>
   13598:	ldr	r1, [sp, #28]
   1359c:	cmp	r2, #1
   135a0:	mov	r3, r2
   135a4:	movls	r3, #0
   135a8:	movhi	r3, #1
   135ac:	add	r5, r9, r2
   135b0:	cmn	r1, #1
   135b4:	movne	r3, #0
   135b8:	cmp	r3, #0
   135bc:	beq	135c8 <__assert_fail@plt+0x2670>
   135c0:	bl	10e68 <strlen@plt>
   135c4:	str	r0, [sp, #28]
   135c8:	ldr	r3, [sp, #28]
   135cc:	cmp	r5, r3
   135d0:	bhi	14200 <__assert_fail@plt+0x32a8>
   135d4:	ldr	r0, [sp, #52]	; 0x34
   135d8:	ldr	r2, [sp, #56]	; 0x38
   135dc:	ldr	r1, [sp, #60]	; 0x3c
   135e0:	bl	10d60 <memcmp@plt>
   135e4:	cmp	r0, #0
   135e8:	bne	14200 <__assert_fail@plt+0x32a8>
   135ec:	ldr	r3, [sp, #44]	; 0x2c
   135f0:	cmp	r3, #0
   135f4:	bne	14b30 <__assert_fail@plt+0x3bd8>
   135f8:	ldr	r3, [sp, #52]	; 0x34
   135fc:	ldrb	r5, [r3]
   13600:	cmp	r5, #126	; 0x7e
   13604:	ldrls	pc, [pc, r5, lsl #2]
   13608:	b	13ec0 <__assert_fail@plt+0x2f68>
   1360c:	andeq	r3, r1, r4, asr #27
   13610:	andeq	r3, r1, r0, asr #29
   13614:	andeq	r3, r1, r0, asr #29
   13618:	andeq	r3, r1, r0, asr #29
   1361c:	andeq	r3, r1, r0, asr #29
   13620:	andeq	r3, r1, r0, asr #29
   13624:	andeq	r3, r1, r0, asr #29
   13628:	muleq	r1, r8, sp
   1362c:	muleq	r1, r0, sp
   13630:	ldrdeq	r3, [r1], -r8
   13634:	andeq	r3, r1, r4, lsl #27
   13638:	ldrdeq	r3, [r1], -r0
   1363c:	andeq	r3, r1, r0, ror #26
   13640:	andeq	r3, r1, ip, lsr #27
   13644:	andeq	r3, r1, r0, asr #29
   13648:	andeq	r3, r1, r0, asr #29
   1364c:	andeq	r3, r1, r0, asr #29
   13650:	andeq	r3, r1, r0, asr #29
   13654:	andeq	r3, r1, r0, asr #29
   13658:	andeq	r3, r1, r0, asr #29
   1365c:	andeq	r3, r1, r0, asr #29
   13660:	andeq	r3, r1, r0, asr #29
   13664:	andeq	r3, r1, r0, asr #29
   13668:	andeq	r3, r1, r0, asr #29
   1366c:	andeq	r3, r1, r0, asr #29
   13670:	andeq	r3, r1, r0, asr #29
   13674:	andeq	r3, r1, r0, asr #29
   13678:	andeq	r3, r1, r0, asr #29
   1367c:	andeq	r3, r1, r0, asr #29
   13680:	andeq	r3, r1, r0, asr #29
   13684:	andeq	r3, r1, r0, asr #29
   13688:	andeq	r3, r1, r0, asr #29
   1368c:	muleq	r1, ip, lr
   13690:	andeq	r3, r1, r4, lsr #27
   13694:	andeq	r3, r1, r4, lsr #27
   13698:	andeq	r3, r1, r0, lsl #29
   1369c:	andeq	r3, r1, r4, lsr #27
   136a0:			; <UNDEFINED> instruction: 0x00013eb4
   136a4:	andeq	r3, r1, r4, lsr #27
   136a8:	andeq	r3, r1, r0, lsl #24
   136ac:	andeq	r3, r1, r4, lsr #27
   136b0:	andeq	r3, r1, r4, lsr #27
   136b4:	andeq	r3, r1, r4, lsr #27
   136b8:			; <UNDEFINED> instruction: 0x00013eb4
   136bc:			; <UNDEFINED> instruction: 0x00013eb4
   136c0:			; <UNDEFINED> instruction: 0x00013eb4
   136c4:			; <UNDEFINED> instruction: 0x00013eb4
   136c8:			; <UNDEFINED> instruction: 0x00013eb4
   136cc:			; <UNDEFINED> instruction: 0x00013eb4
   136d0:			; <UNDEFINED> instruction: 0x00013eb4
   136d4:			; <UNDEFINED> instruction: 0x00013eb4
   136d8:			; <UNDEFINED> instruction: 0x00013eb4
   136dc:			; <UNDEFINED> instruction: 0x00013eb4
   136e0:			; <UNDEFINED> instruction: 0x00013eb4
   136e4:			; <UNDEFINED> instruction: 0x00013eb4
   136e8:			; <UNDEFINED> instruction: 0x00013eb4
   136ec:			; <UNDEFINED> instruction: 0x00013eb4
   136f0:			; <UNDEFINED> instruction: 0x00013eb4
   136f4:			; <UNDEFINED> instruction: 0x00013eb4
   136f8:	andeq	r3, r1, r4, lsr #27
   136fc:	andeq	r3, r1, r4, lsr #27
   13700:	andeq	r3, r1, r4, lsr #27
   13704:	andeq	r3, r1, r4, lsr #27
   13708:	ldrdeq	r3, [r1], -r4
   1370c:	andeq	r3, r1, r0, asr #29
   13710:			; <UNDEFINED> instruction: 0x00013eb4
   13714:			; <UNDEFINED> instruction: 0x00013eb4
   13718:			; <UNDEFINED> instruction: 0x00013eb4
   1371c:			; <UNDEFINED> instruction: 0x00013eb4
   13720:			; <UNDEFINED> instruction: 0x00013eb4
   13724:			; <UNDEFINED> instruction: 0x00013eb4
   13728:			; <UNDEFINED> instruction: 0x00013eb4
   1372c:			; <UNDEFINED> instruction: 0x00013eb4
   13730:			; <UNDEFINED> instruction: 0x00013eb4
   13734:			; <UNDEFINED> instruction: 0x00013eb4
   13738:			; <UNDEFINED> instruction: 0x00013eb4
   1373c:			; <UNDEFINED> instruction: 0x00013eb4
   13740:			; <UNDEFINED> instruction: 0x00013eb4
   13744:			; <UNDEFINED> instruction: 0x00013eb4
   13748:			; <UNDEFINED> instruction: 0x00013eb4
   1374c:			; <UNDEFINED> instruction: 0x00013eb4
   13750:			; <UNDEFINED> instruction: 0x00013eb4
   13754:			; <UNDEFINED> instruction: 0x00013eb4
   13758:			; <UNDEFINED> instruction: 0x00013eb4
   1375c:			; <UNDEFINED> instruction: 0x00013eb4
   13760:			; <UNDEFINED> instruction: 0x00013eb4
   13764:			; <UNDEFINED> instruction: 0x00013eb4
   13768:			; <UNDEFINED> instruction: 0x00013eb4
   1376c:			; <UNDEFINED> instruction: 0x00013eb4
   13770:			; <UNDEFINED> instruction: 0x00013eb4
   13774:			; <UNDEFINED> instruction: 0x00013eb4
   13778:	andeq	r3, r1, r4, lsr #27
   1377c:	andeq	r3, r1, ip, ror fp
   13780:			; <UNDEFINED> instruction: 0x00013eb4
   13784:	andeq	r3, r1, r4, lsr #27
   13788:			; <UNDEFINED> instruction: 0x00013eb4
   1378c:	andeq	r3, r1, r4, lsr #27
   13790:			; <UNDEFINED> instruction: 0x00013eb4
   13794:			; <UNDEFINED> instruction: 0x00013eb4
   13798:			; <UNDEFINED> instruction: 0x00013eb4
   1379c:			; <UNDEFINED> instruction: 0x00013eb4
   137a0:			; <UNDEFINED> instruction: 0x00013eb4
   137a4:			; <UNDEFINED> instruction: 0x00013eb4
   137a8:			; <UNDEFINED> instruction: 0x00013eb4
   137ac:			; <UNDEFINED> instruction: 0x00013eb4
   137b0:			; <UNDEFINED> instruction: 0x00013eb4
   137b4:			; <UNDEFINED> instruction: 0x00013eb4
   137b8:			; <UNDEFINED> instruction: 0x00013eb4
   137bc:			; <UNDEFINED> instruction: 0x00013eb4
   137c0:			; <UNDEFINED> instruction: 0x00013eb4
   137c4:			; <UNDEFINED> instruction: 0x00013eb4
   137c8:			; <UNDEFINED> instruction: 0x00013eb4
   137cc:			; <UNDEFINED> instruction: 0x00013eb4
   137d0:			; <UNDEFINED> instruction: 0x00013eb4
   137d4:			; <UNDEFINED> instruction: 0x00013eb4
   137d8:			; <UNDEFINED> instruction: 0x00013eb4
   137dc:			; <UNDEFINED> instruction: 0x00013eb4
   137e0:			; <UNDEFINED> instruction: 0x00013eb4
   137e4:			; <UNDEFINED> instruction: 0x00013eb4
   137e8:			; <UNDEFINED> instruction: 0x00013eb4
   137ec:			; <UNDEFINED> instruction: 0x00013eb4
   137f0:			; <UNDEFINED> instruction: 0x00013eb4
   137f4:			; <UNDEFINED> instruction: 0x00013eb4
   137f8:	andeq	r3, r1, r0, lsr #19
   137fc:	andeq	r3, r1, r4, lsr #27
   13800:	andeq	r3, r1, r0, lsr #19
   13804:	andeq	r3, r1, r0, lsl #29
   13808:	cmp	r4, #0
   1380c:	moveq	r3, #1
   13810:	streq	r3, [sp, #40]	; 0x28
   13814:	beq	13f28 <__assert_fail@plt+0x2fd0>
   13818:	mov	r3, #0
   1381c:	mov	r2, #1
   13820:	mov	r4, r3
   13824:	str	r2, [sp, #36]	; 0x24
   13828:	str	r2, [sp, #44]	; 0x2c
   1382c:	str	r2, [sp, #56]	; 0x38
   13830:	str	r3, [sp, #68]	; 0x44
   13834:	movw	r3, #32044	; 0x7d2c
   13838:	movt	r3, #1
   1383c:	str	r4, [sp, #40]	; 0x28
   13840:	mov	r8, #2
   13844:	str	r4, [sp, #48]	; 0x30
   13848:	str	r3, [sp, #60]	; 0x3c
   1384c:	str	r4, [sp, #72]	; 0x48
   13850:	b	13538 <__assert_fail@plt+0x25e0>
   13854:	cmp	r4, #0
   13858:	bne	14aa4 <__assert_fail@plt+0x3b4c>
   1385c:	cmp	sl, #0
   13860:	beq	14864 <__assert_fail@plt+0x390c>
   13864:	mov	r3, #34	; 0x22
   13868:	mov	r1, r4
   1386c:	mov	r2, #1
   13870:	strb	r3, [fp]
   13874:	movw	r3, #32024	; 0x7d18
   13878:	movt	r3, #1
   1387c:	mov	r4, r2
   13880:	str	r2, [sp, #36]	; 0x24
   13884:	str	r2, [sp, #40]	; 0x28
   13888:	str	r1, [sp, #44]	; 0x2c
   1388c:	str	r1, [sp, #48]	; 0x30
   13890:	str	r2, [sp, #56]	; 0x38
   13894:	str	r3, [sp, #60]	; 0x3c
   13898:	str	r1, [sp, #68]	; 0x44
   1389c:	str	r1, [sp, #72]	; 0x48
   138a0:	b	13538 <__assert_fail@plt+0x25e0>
   138a4:	mov	r3, #0
   138a8:	mov	r4, r8
   138ac:	str	r3, [sp, #40]	; 0x28
   138b0:	str	r3, [sp, #44]	; 0x2c
   138b4:	str	r3, [sp, #48]	; 0x30
   138b8:	str	r8, [sp, #56]	; 0x38
   138bc:	str	r3, [sp, #60]	; 0x3c
   138c0:	str	r3, [sp, #68]	; 0x44
   138c4:	mov	r3, #1
   138c8:	str	r3, [sp, #36]	; 0x24
   138cc:	str	r8, [sp, #72]	; 0x48
   138d0:	b	13538 <__assert_fail@plt+0x25e0>
   138d4:	mov	r3, #1
   138d8:	mov	r2, #0
   138dc:	mov	r4, r2
   138e0:	mov	r8, #5
   138e4:	str	r3, [sp, #36]	; 0x24
   138e8:	str	r3, [sp, #40]	; 0x28
   138ec:	str	r3, [sp, #44]	; 0x2c
   138f0:	str	r2, [sp, #48]	; 0x30
   138f4:	str	r3, [sp, #56]	; 0x38
   138f8:	movw	r3, #32024	; 0x7d18
   138fc:	movt	r3, #1
   13900:	str	r3, [sp, #60]	; 0x3c
   13904:	str	r2, [sp, #68]	; 0x44
   13908:	str	r2, [sp, #72]	; 0x48
   1390c:	b	13538 <__assert_fail@plt+0x25e0>
   13910:	mov	r3, #0
   13914:	mov	r2, #1
   13918:	mov	r4, r3
   1391c:	str	r2, [sp, #36]	; 0x24
   13920:	str	r2, [sp, #40]	; 0x28
   13924:	str	r3, [sp, #44]	; 0x2c
   13928:	str	r3, [sp, #48]	; 0x30
   1392c:	str	r3, [sp, #56]	; 0x38
   13930:	str	r3, [sp, #60]	; 0x3c
   13934:	str	r3, [sp, #68]	; 0x44
   13938:	str	r3, [sp, #72]	; 0x48
   1393c:	b	13538 <__assert_fail@plt+0x25e0>
   13940:	mov	r2, #1
   13944:	mov	r3, #0
   13948:	mov	r4, r3
   1394c:	str	r2, [sp, #36]	; 0x24
   13950:	str	r2, [sp, #44]	; 0x2c
   13954:	str	r8, [sp, #56]	; 0x38
   13958:	str	r3, [sp, #68]	; 0x44
   1395c:	b	13834 <__assert_fail@plt+0x28dc>
   13960:	mov	r3, #1
   13964:	mov	r2, #0
   13968:	mov	r4, r2
   1396c:	mov	r8, #2
   13970:	str	r3, [sp, #36]	; 0x24
   13974:	str	r3, [sp, #40]	; 0x28
   13978:	str	r3, [sp, #44]	; 0x2c
   1397c:	str	r2, [sp, #48]	; 0x30
   13980:	str	r3, [sp, #56]	; 0x38
   13984:	movw	r3, #32044	; 0x7d2c
   13988:	movt	r3, #1
   1398c:	str	r3, [sp, #60]	; 0x3c
   13990:	str	r2, [sp, #68]	; 0x44
   13994:	str	r2, [sp, #72]	; 0x48
   13998:	b	13538 <__assert_fail@plt+0x25e0>
   1399c:	mov	r7, #0
   139a0:	ldr	r3, [sp, #28]
   139a4:	cmn	r3, #1
   139a8:	beq	14480 <__assert_fail@plt+0x3528>
   139ac:	ldr	r3, [sp, #28]
   139b0:	subs	r2, r3, #1
   139b4:	movne	r2, #1
   139b8:	sub	r3, fp, #2
   139bc:	cmp	r2, #0
   139c0:	clz	r3, r3
   139c4:	lsr	r3, r3, #5
   139c8:	bne	139d4 <__assert_fail@plt+0x2a7c>
   139cc:	cmp	r9, #0
   139d0:	beq	141e0 <__assert_fail@plt+0x3288>
   139d4:	mov	r6, #0
   139d8:	ldr	r2, [sp, #40]	; 0x28
   139dc:	eor	r2, r2, #1
   139e0:	orrs	r3, r3, r2
   139e4:	bne	13bbc <__assert_fail@plt+0x2c64>
   139e8:	ldr	r2, [sp, #160]	; 0xa0
   139ec:	cmp	r2, #0
   139f0:	beq	13a10 <__assert_fail@plt+0x2ab8>
   139f4:	ldr	r0, [sp, #160]	; 0xa0
   139f8:	ubfx	r1, r5, #5, #8
   139fc:	and	r2, r5, #31
   13a00:	ldr	r1, [r0, r1, lsl #2]
   13a04:	lsr	r2, r1, r2
   13a08:	tst	r2, #1
   13a0c:	bne	13a18 <__assert_fail@plt+0x2ac0>
   13a10:	cmp	r7, #0
   13a14:	beq	13c88 <__assert_fail@plt+0x2d30>
   13a18:	ldr	r2, [sp, #44]	; 0x2c
   13a1c:	sub	r3, fp, #2
   13a20:	clz	r3, r3
   13a24:	lsr	r3, r3, #5
   13a28:	cmp	r2, #0
   13a2c:	bne	147d4 <__assert_fail@plt+0x387c>
   13a30:	ldr	r2, [sp, #48]	; 0x30
   13a34:	eor	r2, r2, #1
   13a38:	ands	r3, r3, r2
   13a3c:	beq	13a74 <__assert_fail@plt+0x2b1c>
   13a40:	cmp	sl, r4
   13a44:	str	r3, [sp, #48]	; 0x30
   13a48:	movhi	r2, #39	; 0x27
   13a4c:	strbhi	r2, [r8, r4]
   13a50:	add	r2, r4, #1
   13a54:	cmp	sl, r2
   13a58:	movhi	r1, #36	; 0x24
   13a5c:	strbhi	r1, [r8, r2]
   13a60:	add	r2, r4, #2
   13a64:	add	r4, r4, #3
   13a68:	cmp	sl, r2
   13a6c:	movhi	r1, #39	; 0x27
   13a70:	strbhi	r1, [r8, r2]
   13a74:	cmp	r4, sl
   13a78:	add	r9, r9, #1
   13a7c:	movcc	r3, #92	; 0x5c
   13a80:	strbcc	r3, [r8, r4]
   13a84:	add	r4, r4, #1
   13a88:	cmp	r4, sl
   13a8c:	ldr	r3, [sp, #36]	; 0x24
   13a90:	strbcc	r5, [r8, r4]
   13a94:	cmp	r6, #0
   13a98:	add	r4, r4, #1
   13a9c:	moveq	r3, #0
   13aa0:	str	r3, [sp, #36]	; 0x24
   13aa4:	ldr	r3, [sp, #28]
   13aa8:	cmn	r3, #1
   13aac:	bne	13554 <__assert_fail@plt+0x25fc>
   13ab0:	ldr	r3, [sp, #32]
   13ab4:	ldrb	r6, [r3, r9]
   13ab8:	adds	r6, r6, #0
   13abc:	movne	r6, #1
   13ac0:	cmp	r6, #0
   13ac4:	bne	13568 <__assert_fail@plt+0x2610>
   13ac8:	str	fp, [sp, #152]	; 0x98
   13acc:	mov	fp, r8
   13ad0:	cmp	r4, #0
   13ad4:	ldr	r1, [sp, #44]	; 0x2c
   13ad8:	movne	r3, #0
   13adc:	ldr	r8, [sp, #152]	; 0x98
   13ae0:	sub	r2, r8, #2
   13ae4:	clz	r2, r2
   13ae8:	lsr	r2, r2, #5
   13aec:	andeq	r3, r2, r1
   13af0:	cmp	r3, #0
   13af4:	bne	14bb0 <__assert_fail@plt+0x3c58>
   13af8:	eor	r3, r1, #1
   13afc:	ands	r2, r2, r3
   13b00:	beq	14adc <__assert_fail@plt+0x3b84>
   13b04:	ldr	r3, [sp, #68]	; 0x44
   13b08:	cmp	r3, #0
   13b0c:	beq	14ae0 <__assert_fail@plt+0x3b88>
   13b10:	ldr	r3, [sp, #36]	; 0x24
   13b14:	cmp	r3, #0
   13b18:	bne	14b6c <__assert_fail@plt+0x3c14>
   13b1c:	ldr	r3, [sp, #72]	; 0x48
   13b20:	adds	r3, r3, #0
   13b24:	movne	r3, #1
   13b28:	cmp	sl, #0
   13b2c:	movne	r3, #0
   13b30:	cmp	r3, #0
   13b34:	ldreq	r2, [sp, #68]	; 0x44
   13b38:	beq	14ae0 <__assert_fail@plt+0x3b88>
   13b3c:	ldr	r2, [sp, #72]	; 0x48
   13b40:	str	r3, [sp, #68]	; 0x44
   13b44:	movw	r3, #32044	; 0x7d2c
   13b48:	movt	r3, #1
   13b4c:	mov	r1, #39	; 0x27
   13b50:	mov	r4, #1
   13b54:	ldr	sl, [sp, #72]	; 0x48
   13b58:	mov	r8, #2
   13b5c:	str	r3, [sp, #60]	; 0x3c
   13b60:	mov	r3, #0
   13b64:	strb	r1, [fp]
   13b68:	str	r3, [sp, #44]	; 0x2c
   13b6c:	str	r4, [sp, #56]	; 0x38
   13b70:	str	r2, [sp, #72]	; 0x48
   13b74:	b	13538 <__assert_fail@plt+0x25e0>
   13b78:	mov	r7, #0
   13b7c:	cmp	fp, #2
   13b80:	beq	14460 <__assert_fail@plt+0x3508>
   13b84:	ldr	r2, [sp, #40]	; 0x28
   13b88:	ldr	r3, [sp, #56]	; 0x38
   13b8c:	ldr	r1, [sp, #44]	; 0x2c
   13b90:	cmp	r3, #0
   13b94:	moveq	r3, #0
   13b98:	andne	r3, r2, r1
   13b9c:	cmp	r3, #0
   13ba0:	moveq	r5, #92	; 0x5c
   13ba4:	moveq	r3, r5
   13ba8:	bne	1446c <__assert_fail@plt+0x3514>
   13bac:	ldr	r2, [sp, #40]	; 0x28
   13bb0:	cmp	r2, #0
   13bb4:	bne	148a8 <__assert_fail@plt+0x3950>
   13bb8:	mov	r6, #0
   13bbc:	ldr	r3, [sp, #44]	; 0x2c
   13bc0:	cmp	r3, #0
   13bc4:	beq	14458 <__assert_fail@plt+0x3500>
   13bc8:	mov	r3, #0
   13bcc:	b	139e8 <__assert_fail@plt+0x2a90>
   13bd0:	mov	r7, #0
   13bd4:	cmp	fp, #2
   13bd8:	beq	144d0 <__assert_fail@plt+0x3578>
   13bdc:	cmp	fp, #5
   13be0:	beq	14494 <__assert_fail@plt+0x353c>
   13be4:	sub	r3, fp, #2
   13be8:	mov	r6, #0
   13bec:	clz	r3, r3
   13bf0:	mov	r5, #63	; 0x3f
   13bf4:	lsr	r3, r3, #5
   13bf8:	b	139d8 <__assert_fail@plt+0x2a80>
   13bfc:	mov	r7, #0
   13c00:	cmp	fp, #2
   13c04:	movne	r3, #0
   13c08:	movne	r5, #39	; 0x27
   13c0c:	strne	r6, [sp, #68]	; 0x44
   13c10:	bne	139d8 <__assert_fail@plt+0x2a80>
   13c14:	ldr	r3, [sp, #44]	; 0x2c
   13c18:	cmp	r3, #0
   13c1c:	bne	148d8 <__assert_fail@plt+0x3980>
   13c20:	ldr	r3, [sp, #72]	; 0x48
   13c24:	cmp	sl, #0
   13c28:	clz	r3, r3
   13c2c:	lsr	r3, r3, #5
   13c30:	moveq	r3, #0
   13c34:	cmp	r3, #0
   13c38:	bne	14804 <__assert_fail@plt+0x38ac>
   13c3c:	cmp	sl, r4
   13c40:	movhi	r3, #39	; 0x27
   13c44:	strbhi	r3, [r8, r4]
   13c48:	add	r3, r4, #1
   13c4c:	cmp	sl, r3
   13c50:	movhi	r2, #92	; 0x5c
   13c54:	strbhi	r2, [r8, r3]
   13c58:	add	r3, r4, #2
   13c5c:	cmp	sl, r3
   13c60:	bls	13c6c <__assert_fail@plt+0x2d14>
   13c64:	mov	r2, #39	; 0x27
   13c68:	strb	r2, [r8, r3]
   13c6c:	mov	r3, #0
   13c70:	cmp	r7, #0
   13c74:	add	r4, r4, #3
   13c78:	mov	r5, #39	; 0x27
   13c7c:	str	r3, [sp, #48]	; 0x30
   13c80:	str	r6, [sp, #68]	; 0x44
   13c84:	bne	13a18 <__assert_fail@plt+0x2ac0>
   13c88:	ldr	r2, [sp, #48]	; 0x30
   13c8c:	eor	r3, r3, #1
   13c90:	add	r9, r9, #1
   13c94:	and	r3, r3, r2
   13c98:	uxtb	r3, r3
   13c9c:	cmp	r3, #0
   13ca0:	beq	13a88 <__assert_fail@plt+0x2b30>
   13ca4:	cmp	sl, r4
   13ca8:	movhi	r3, #39	; 0x27
   13cac:	strbhi	r3, [r8, r4]
   13cb0:	add	r3, r4, #1
   13cb4:	add	r4, r4, #2
   13cb8:	cmp	sl, r3
   13cbc:	movhi	r2, #39	; 0x27
   13cc0:	strbhi	r2, [r8, r3]
   13cc4:	mov	r3, #0
   13cc8:	str	r3, [sp, #48]	; 0x30
   13ccc:	b	13a88 <__assert_fail@plt+0x2b30>
   13cd0:	mov	r3, #118	; 0x76
   13cd4:	b	13bac <__assert_fail@plt+0x2c54>
   13cd8:	mov	r3, #116	; 0x74
   13cdc:	ldr	r2, [sp, #44]	; 0x2c
   13ce0:	cmp	fp, #2
   13ce4:	movne	r2, #0
   13ce8:	andeq	r2, r2, #1
   13cec:	cmp	r2, #0
   13cf0:	beq	13bac <__assert_fail@plt+0x2c54>
   13cf4:	mov	fp, r8
   13cf8:	mov	r8, #2
   13cfc:	ldr	r3, [sp, #40]	; 0x28
   13d00:	cmp	r3, #0
   13d04:	movne	r8, #4
   13d08:	mov	lr, #0
   13d0c:	mov	r0, fp
   13d10:	ldr	r2, [sp, #32]
   13d14:	ldr	r3, [sp, #156]	; 0x9c
   13d18:	ldr	r1, [sp, #164]	; 0xa4
   13d1c:	bic	ip, r3, #2
   13d20:	ldr	r3, [sp, #28]
   13d24:	stm	sp, {r8, ip, lr}
   13d28:	ldr	ip, [sp, #168]	; 0xa8
   13d2c:	str	r1, [sp, #12]
   13d30:	mov	r1, sl
   13d34:	str	ip, [sp, #16]
   13d38:	bl	13450 <__assert_fail@plt+0x24f8>
   13d3c:	mov	r4, r0
   13d40:	mov	r0, r4
   13d44:	add	sp, sp, #116	; 0x74
   13d48:	ldrd	r4, [sp]
   13d4c:	ldrd	r6, [sp, #8]
   13d50:	ldrd	r8, [sp, #16]
   13d54:	ldrd	sl, [sp, #24]
   13d58:	add	sp, sp, #32
   13d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d60:	mov	r5, #102	; 0x66
   13d64:	ldr	r2, [sp, #44]	; 0x2c
   13d68:	sub	r3, fp, #2
   13d6c:	clz	r3, r3
   13d70:	lsr	r3, r3, #5
   13d74:	cmp	r2, #0
   13d78:	bne	147d4 <__assert_fail@plt+0x387c>
   13d7c:	mov	r6, r2
   13d80:	b	13a74 <__assert_fail@plt+0x2b1c>
   13d84:	mov	r5, #110	; 0x6e
   13d88:	mov	r6, #0
   13d8c:	b	13a18 <__assert_fail@plt+0x2ac0>
   13d90:	mov	r5, #98	; 0x62
   13d94:	b	13d64 <__assert_fail@plt+0x2e0c>
   13d98:	mov	r5, #97	; 0x61
   13d9c:	b	13d64 <__assert_fail@plt+0x2e0c>
   13da0:	mov	r7, #0
   13da4:	mov	r6, #0
   13da8:	b	13bc8 <__assert_fail@plt+0x2c70>
   13dac:	mov	r5, #114	; 0x72
   13db0:	b	13d88 <__assert_fail@plt+0x2e30>
   13db4:	ldr	r3, [sp, #44]	; 0x2c
   13db8:	cmp	r3, #0
   13dbc:	bne	14b4c <__assert_fail@plt+0x3bf4>
   13dc0:	mov	r7, r3
   13dc4:	ldr	r3, [sp, #48]	; 0x30
   13dc8:	sub	r2, fp, #2
   13dcc:	clz	r2, r2
   13dd0:	lsr	r2, r2, #5
   13dd4:	eor	r3, r3, #1
   13dd8:	ands	r3, r2, r3
   13ddc:	beq	147f0 <__assert_fail@plt+0x3898>
   13de0:	cmp	sl, r4
   13de4:	movhi	r1, #39	; 0x27
   13de8:	strbhi	r1, [r8, r4]
   13dec:	add	r1, r4, #1
   13df0:	cmp	sl, r1
   13df4:	movhi	r0, #36	; 0x24
   13df8:	strbhi	r0, [r8, r1]
   13dfc:	add	r1, r4, #2
   13e00:	cmp	sl, r1
   13e04:	movhi	r0, #39	; 0x27
   13e08:	strbhi	r0, [r8, r1]
   13e0c:	add	r1, r4, #3
   13e10:	cmp	sl, r1
   13e14:	bls	14848 <__assert_fail@plt+0x38f0>
   13e18:	mov	r4, r1
   13e1c:	mov	r1, #92	; 0x5c
   13e20:	mov	r0, r4
   13e24:	str	r3, [sp, #48]	; 0x30
   13e28:	strb	r1, [r8, r4]
   13e2c:	cmp	fp, #2
   13e30:	add	r4, r4, #1
   13e34:	beq	14898 <__assert_fail@plt+0x3940>
   13e38:	ldr	r1, [sp, #28]
   13e3c:	add	r3, r9, #1
   13e40:	cmp	r3, r1
   13e44:	bcs	13e5c <__assert_fail@plt+0x2f04>
   13e48:	ldr	r1, [sp, #32]
   13e4c:	ldrb	r3, [r1, r3]
   13e50:	sub	r3, r3, #48	; 0x30
   13e54:	cmp	r3, #9
   13e58:	bls	148b0 <__assert_fail@plt+0x3958>
   13e5c:	mov	r5, #48	; 0x30
   13e60:	ldr	r3, [sp, #40]	; 0x28
   13e64:	eor	r3, r3, #1
   13e68:	orrs	r2, r2, r3
   13e6c:	mov	r3, r6
   13e70:	moveq	r6, r2
   13e74:	beq	139e8 <__assert_fail@plt+0x2a90>
   13e78:	mov	r6, #0
   13e7c:	b	13a10 <__assert_fail@plt+0x2ab8>
   13e80:	cmp	r9, #0
   13e84:	mov	r2, r7
   13e88:	bne	14428 <__assert_fail@plt+0x34d0>
   13e8c:	mov	r6, r7
   13e90:	mov	r3, r9
   13e94:	mov	r7, r2
   13e98:	b	139d8 <__assert_fail@plt+0x2a80>
   13e9c:	mov	r2, r7
   13ea0:	mov	r6, r7
   13ea4:	mov	r3, #0
   13ea8:	mov	r7, r2
   13eac:	mov	r5, #32
   13eb0:	b	139d8 <__assert_fail@plt+0x2a80>
   13eb4:	mov	r6, r7
   13eb8:	b	13bc8 <__assert_fail@plt+0x2c70>
   13ebc:	mov	r7, #0
   13ec0:	ldr	r3, [sp, #64]	; 0x40
   13ec4:	cmp	r3, #1
   13ec8:	bne	144e8 <__assert_fail@plt+0x3590>
   13ecc:	bl	10e50 <__ctype_b_loc@plt>
   13ed0:	ldr	r2, [r0]
   13ed4:	sxth	r3, r5
   13ed8:	lsl	r3, r3, #1
   13edc:	ldr	r1, [sp, #64]	; 0x40
   13ee0:	ldrh	r3, [r2, r3]
   13ee4:	mov	ip, r1
   13ee8:	and	r3, r3, #16384	; 0x4000
   13eec:	cmp	r3, #0
   13ef0:	ldr	r3, [sp, #40]	; 0x28
   13ef4:	movne	r6, #1
   13ef8:	moveq	r6, #0
   13efc:	movne	r2, #0
   13f00:	andeq	r2, r3, #1
   13f04:	cmp	r2, #0
   13f08:	bne	14830 <__assert_fail@plt+0x38d8>
   13f0c:	sub	r3, fp, #2
   13f10:	clz	r3, r3
   13f14:	lsr	r3, r3, #5
   13f18:	b	139d8 <__assert_fail@plt+0x2a80>
   13f1c:	cmp	r4, #0
   13f20:	bne	14bc0 <__assert_fail@plt+0x3c68>
   13f24:	str	r4, [sp, #40]	; 0x28
   13f28:	cmp	sl, #0
   13f2c:	bne	14bf0 <__assert_fail@plt+0x3c98>
   13f30:	mov	r3, #1
   13f34:	movw	r2, #32044	; 0x7d2c
   13f38:	movt	r2, #1
   13f3c:	mov	r4, r3
   13f40:	mov	r8, #2
   13f44:	str	r3, [sp, #36]	; 0x24
   13f48:	str	sl, [sp, #44]	; 0x2c
   13f4c:	str	sl, [sp, #48]	; 0x30
   13f50:	str	r3, [sp, #56]	; 0x38
   13f54:	str	r2, [sp, #60]	; 0x3c
   13f58:	str	sl, [sp, #68]	; 0x44
   13f5c:	str	sl, [sp, #72]	; 0x48
   13f60:	b	13538 <__assert_fail@plt+0x25e0>
   13f64:	ldr	r3, [sp, #32]
   13f68:	ldrb	r5, [r3, r9]
   13f6c:	cmp	r5, #126	; 0x7e
   13f70:	ldrls	pc, [pc, r5, lsl #2]
   13f74:	b	13ec0 <__assert_fail@plt+0x2f68>
   13f78:	muleq	r1, ip, r1
   13f7c:	andeq	r3, r1, r0, asr #29
   13f80:	andeq	r3, r1, r0, asr #29
   13f84:	andeq	r3, r1, r0, asr #29
   13f88:	andeq	r3, r1, r0, asr #29
   13f8c:	andeq	r3, r1, r0, asr #29
   13f90:	andeq	r3, r1, r0, asr #29
   13f94:	muleq	r1, r4, r1
   13f98:	andeq	r4, r1, ip, lsl #3
   13f9c:	ldrdeq	r3, [r1], -r8
   13fa0:	andeq	r4, r1, r4, lsl #3
   13fa4:	ldrdeq	r3, [r1], -r0
   13fa8:	andeq	r4, r1, ip, ror r1
   13fac:	andeq	r4, r1, r4, ror r1
   13fb0:	andeq	r3, r1, r0, asr #29
   13fb4:	andeq	r3, r1, r0, asr #29
   13fb8:	andeq	r3, r1, r0, asr #29
   13fbc:	andeq	r3, r1, r0, asr #29
   13fc0:	andeq	r3, r1, r0, asr #29
   13fc4:	andeq	r3, r1, r0, asr #29
   13fc8:	andeq	r3, r1, r0, asr #29
   13fcc:	andeq	r3, r1, r0, asr #29
   13fd0:	andeq	r3, r1, r0, asr #29
   13fd4:	andeq	r3, r1, r0, asr #29
   13fd8:	andeq	r3, r1, r0, asr #29
   13fdc:	andeq	r3, r1, r0, asr #29
   13fe0:	andeq	r3, r1, r0, asr #29
   13fe4:	andeq	r3, r1, r0, asr #29
   13fe8:	andeq	r3, r1, r0, asr #29
   13fec:	andeq	r3, r1, r0, asr #29
   13ff0:	andeq	r3, r1, r0, asr #29
   13ff4:	andeq	r3, r1, r0, asr #29
   13ff8:	strdeq	r4, [r1], -r0
   13ffc:	ldrdeq	r4, [r1], -r0
   14000:	ldrdeq	r4, [r1], -r0
   14004:	andeq	r4, r1, r0, asr #3
   14008:	ldrdeq	r4, [r1], -r0
   1400c:	andeq	r3, r1, ip, lsl #30
   14010:	ldrdeq	r4, [r1], -r0
   14014:	andeq	r3, r1, r0, lsl #24
   14018:	ldrdeq	r4, [r1], -r0
   1401c:	ldrdeq	r4, [r1], -r0
   14020:	ldrdeq	r4, [r1], -r0
   14024:	andeq	r3, r1, ip, lsl #30
   14028:	andeq	r3, r1, ip, lsl #30
   1402c:	andeq	r3, r1, ip, lsl #30
   14030:	andeq	r3, r1, ip, lsl #30
   14034:	andeq	r3, r1, ip, lsl #30
   14038:	andeq	r3, r1, ip, lsl #30
   1403c:	andeq	r3, r1, ip, lsl #30
   14040:	andeq	r3, r1, ip, lsl #30
   14044:	andeq	r3, r1, ip, lsl #30
   14048:	andeq	r3, r1, ip, lsl #30
   1404c:	andeq	r3, r1, ip, lsl #30
   14050:	andeq	r3, r1, ip, lsl #30
   14054:	andeq	r3, r1, ip, lsl #30
   14058:	andeq	r3, r1, ip, lsl #30
   1405c:	andeq	r3, r1, ip, lsl #30
   14060:	andeq	r3, r1, ip, lsl #30
   14064:	ldrdeq	r4, [r1], -r0
   14068:	ldrdeq	r4, [r1], -r0
   1406c:	ldrdeq	r4, [r1], -r0
   14070:	ldrdeq	r4, [r1], -r0
   14074:	ldrdeq	r3, [r1], -r4
   14078:	andeq	r3, r1, r0, asr #29
   1407c:	andeq	r3, r1, ip, lsl #30
   14080:	andeq	r3, r1, ip, lsl #30
   14084:	andeq	r3, r1, ip, lsl #30
   14088:	andeq	r3, r1, ip, lsl #30
   1408c:	andeq	r3, r1, ip, lsl #30
   14090:	andeq	r3, r1, ip, lsl #30
   14094:	andeq	r3, r1, ip, lsl #30
   14098:	andeq	r3, r1, ip, lsl #30
   1409c:	andeq	r3, r1, ip, lsl #30
   140a0:	andeq	r3, r1, ip, lsl #30
   140a4:	andeq	r3, r1, ip, lsl #30
   140a8:	andeq	r3, r1, ip, lsl #30
   140ac:	andeq	r3, r1, ip, lsl #30
   140b0:	andeq	r3, r1, ip, lsl #30
   140b4:	andeq	r3, r1, ip, lsl #30
   140b8:	andeq	r3, r1, ip, lsl #30
   140bc:	andeq	r3, r1, ip, lsl #30
   140c0:	andeq	r3, r1, ip, lsl #30
   140c4:	andeq	r3, r1, ip, lsl #30
   140c8:	andeq	r3, r1, ip, lsl #30
   140cc:	andeq	r3, r1, ip, lsl #30
   140d0:	andeq	r3, r1, ip, lsl #30
   140d4:	andeq	r3, r1, ip, lsl #30
   140d8:	andeq	r3, r1, ip, lsl #30
   140dc:	andeq	r3, r1, ip, lsl #30
   140e0:	andeq	r3, r1, ip, lsl #30
   140e4:	ldrdeq	r4, [r1], -r0
   140e8:	andeq	r3, r1, ip, ror fp
   140ec:	andeq	r3, r1, ip, lsl #30
   140f0:	ldrdeq	r4, [r1], -r0
   140f4:	andeq	r3, r1, ip, lsl #30
   140f8:	ldrdeq	r4, [r1], -r0
   140fc:	andeq	r3, r1, ip, lsl #30
   14100:	andeq	r3, r1, ip, lsl #30
   14104:	andeq	r3, r1, ip, lsl #30
   14108:	andeq	r3, r1, ip, lsl #30
   1410c:	andeq	r3, r1, ip, lsl #30
   14110:	andeq	r3, r1, ip, lsl #30
   14114:	andeq	r3, r1, ip, lsl #30
   14118:	andeq	r3, r1, ip, lsl #30
   1411c:	andeq	r3, r1, ip, lsl #30
   14120:	andeq	r3, r1, ip, lsl #30
   14124:	andeq	r3, r1, ip, lsl #30
   14128:	andeq	r3, r1, ip, lsl #30
   1412c:	andeq	r3, r1, ip, lsl #30
   14130:	andeq	r3, r1, ip, lsl #30
   14134:	andeq	r3, r1, ip, lsl #30
   14138:	andeq	r3, r1, ip, lsl #30
   1413c:	andeq	r3, r1, ip, lsl #30
   14140:	andeq	r3, r1, ip, lsl #30
   14144:	andeq	r3, r1, ip, lsl #30
   14148:	andeq	r3, r1, ip, lsl #30
   1414c:	andeq	r3, r1, ip, lsl #30
   14150:	andeq	r3, r1, ip, lsl #30
   14154:	andeq	r3, r1, ip, lsl #30
   14158:	andeq	r3, r1, ip, lsl #30
   1415c:	andeq	r3, r1, ip, lsl #30
   14160:	andeq	r3, r1, ip, lsl #30
   14164:	andeq	r3, r1, r0, lsr #19
   14168:	ldrdeq	r4, [r1], -r0
   1416c:	andeq	r3, r1, r0, lsr #19
   14170:	andeq	r4, r1, r0, asr #3
   14174:	mov	r3, #114	; 0x72
   14178:	b	13cdc <__assert_fail@plt+0x2d84>
   1417c:	mov	r3, #102	; 0x66
   14180:	b	13bac <__assert_fail@plt+0x2c54>
   14184:	mov	r3, #110	; 0x6e
   14188:	b	13cdc <__assert_fail@plt+0x2d84>
   1418c:	mov	r3, #98	; 0x62
   14190:	b	13bac <__assert_fail@plt+0x2c54>
   14194:	mov	r3, #97	; 0x61
   14198:	b	13bac <__assert_fail@plt+0x2c54>
   1419c:	ldr	r3, [sp, #40]	; 0x28
   141a0:	cmp	r3, #0
   141a4:	bne	13db4 <__assert_fail@plt+0x2e5c>
   141a8:	ldr	r3, [sp, #156]	; 0x9c
   141ac:	tst	r3, #1
   141b0:	addne	r9, r9, #1
   141b4:	bne	13548 <__assert_fail@plt+0x25f0>
   141b8:	ldr	r7, [sp, #40]	; 0x28
   141bc:	b	13bb8 <__assert_fail@plt+0x2c60>
   141c0:	sub	r3, fp, #2
   141c4:	clz	r3, r3
   141c8:	lsr	r3, r3, #5
   141cc:	b	139cc <__assert_fail@plt+0x2a74>
   141d0:	sub	r3, fp, #2
   141d4:	mov	r6, #0
   141d8:	clz	r3, r3
   141dc:	lsr	r3, r3, #5
   141e0:	ldr	r2, [sp, #44]	; 0x2c
   141e4:	tst	r2, r3
   141e8:	beq	139d8 <__assert_fail@plt+0x2a80>
   141ec:	b	13cf4 <__assert_fail@plt+0x2d9c>
   141f0:	sub	r3, fp, #2
   141f4:	clz	r3, r3
   141f8:	lsr	r3, r3, #5
   141fc:	b	141e0 <__assert_fail@plt+0x3288>
   14200:	ldr	r3, [sp, #52]	; 0x34
   14204:	ldrb	r5, [r3]
   14208:	cmp	r5, #126	; 0x7e
   1420c:	ldrls	pc, [pc, r5, lsl #2]
   14210:	b	13ebc <__assert_fail@plt+0x2f64>
   14214:			; <UNDEFINED> instruction: 0x00013db4
   14218:			; <UNDEFINED> instruction: 0x00013ebc
   1421c:			; <UNDEFINED> instruction: 0x00013ebc
   14220:			; <UNDEFINED> instruction: 0x00013ebc
   14224:			; <UNDEFINED> instruction: 0x00013ebc
   14228:			; <UNDEFINED> instruction: 0x00013ebc
   1422c:			; <UNDEFINED> instruction: 0x00013ebc
   14230:	muleq	r1, r8, sp
   14234:	muleq	r1, r0, sp
   14238:	andeq	r4, r1, ip, asr #8
   1423c:	andeq	r3, r1, r4, lsl #27
   14240:	andeq	r4, r1, r0, asr #8
   14244:	andeq	r3, r1, r0, ror #26
   14248:	andeq	r3, r1, ip, lsr #27
   1424c:			; <UNDEFINED> instruction: 0x00013ebc
   14250:			; <UNDEFINED> instruction: 0x00013ebc
   14254:			; <UNDEFINED> instruction: 0x00013ebc
   14258:			; <UNDEFINED> instruction: 0x00013ebc
   1425c:			; <UNDEFINED> instruction: 0x00013ebc
   14260:			; <UNDEFINED> instruction: 0x00013ebc
   14264:			; <UNDEFINED> instruction: 0x00013ebc
   14268:			; <UNDEFINED> instruction: 0x00013ebc
   1426c:			; <UNDEFINED> instruction: 0x00013ebc
   14270:			; <UNDEFINED> instruction: 0x00013ebc
   14274:			; <UNDEFINED> instruction: 0x00013ebc
   14278:			; <UNDEFINED> instruction: 0x00013ebc
   1427c:			; <UNDEFINED> instruction: 0x00013ebc
   14280:			; <UNDEFINED> instruction: 0x00013ebc
   14284:			; <UNDEFINED> instruction: 0x00013ebc
   14288:			; <UNDEFINED> instruction: 0x00013ebc
   1428c:			; <UNDEFINED> instruction: 0x00013ebc
   14290:			; <UNDEFINED> instruction: 0x00013ebc
   14294:	andeq	r4, r1, r8, lsr r4
   14298:	andeq	r3, r1, r0, lsr #27
   1429c:	andeq	r3, r1, r0, lsr #27
   142a0:	andeq	r4, r1, ip, lsl r4
   142a4:	andeq	r3, r1, r0, lsr #27
   142a8:	andeq	r4, r1, r0, lsl r4
   142ac:	andeq	r3, r1, r0, lsr #27
   142b0:	strdeq	r3, [r1], -ip
   142b4:	andeq	r3, r1, r0, lsr #27
   142b8:	andeq	r3, r1, r0, lsr #27
   142bc:	andeq	r3, r1, r0, lsr #27
   142c0:	andeq	r4, r1, r0, lsl r4
   142c4:	andeq	r4, r1, r0, lsl r4
   142c8:	andeq	r4, r1, r0, lsl r4
   142cc:	andeq	r4, r1, r0, lsl r4
   142d0:	andeq	r4, r1, r0, lsl r4
   142d4:	andeq	r4, r1, r0, lsl r4
   142d8:	andeq	r4, r1, r0, lsl r4
   142dc:	andeq	r4, r1, r0, lsl r4
   142e0:	andeq	r4, r1, r0, lsl r4
   142e4:	andeq	r4, r1, r0, lsl r4
   142e8:	andeq	r4, r1, r0, lsl r4
   142ec:	andeq	r4, r1, r0, lsl r4
   142f0:	andeq	r4, r1, r0, lsl r4
   142f4:	andeq	r4, r1, r0, lsl r4
   142f8:	andeq	r4, r1, r0, lsl r4
   142fc:	andeq	r4, r1, r0, lsl r4
   14300:	andeq	r3, r1, r0, lsr #27
   14304:	andeq	r3, r1, r0, lsr #27
   14308:	andeq	r3, r1, r0, lsr #27
   1430c:	andeq	r3, r1, r0, lsr #27
   14310:	ldrdeq	r3, [r1], -r0
   14314:			; <UNDEFINED> instruction: 0x00013ebc
   14318:	andeq	r4, r1, r0, lsl r4
   1431c:	andeq	r4, r1, r0, lsl r4
   14320:	andeq	r4, r1, r0, lsl r4
   14324:	andeq	r4, r1, r0, lsl r4
   14328:	andeq	r4, r1, r0, lsl r4
   1432c:	andeq	r4, r1, r0, lsl r4
   14330:	andeq	r4, r1, r0, lsl r4
   14334:	andeq	r4, r1, r0, lsl r4
   14338:	andeq	r4, r1, r0, lsl r4
   1433c:	andeq	r4, r1, r0, lsl r4
   14340:	andeq	r4, r1, r0, lsl r4
   14344:	andeq	r4, r1, r0, lsl r4
   14348:	andeq	r4, r1, r0, lsl r4
   1434c:	andeq	r4, r1, r0, lsl r4
   14350:	andeq	r4, r1, r0, lsl r4
   14354:	andeq	r4, r1, r0, lsl r4
   14358:	andeq	r4, r1, r0, lsl r4
   1435c:	andeq	r4, r1, r0, lsl r4
   14360:	andeq	r4, r1, r0, lsl r4
   14364:	andeq	r4, r1, r0, lsl r4
   14368:	andeq	r4, r1, r0, lsl r4
   1436c:	andeq	r4, r1, r0, lsl r4
   14370:	andeq	r4, r1, r0, lsl r4
   14374:	andeq	r4, r1, r0, lsl r4
   14378:	andeq	r4, r1, r0, lsl r4
   1437c:	andeq	r4, r1, r0, lsl r4
   14380:	andeq	r3, r1, r0, lsr #27
   14384:	andeq	r3, r1, r8, ror fp
   14388:	andeq	r4, r1, r0, lsl r4
   1438c:	andeq	r3, r1, r0, lsr #27
   14390:	andeq	r4, r1, r0, lsl r4
   14394:	andeq	r3, r1, r0, lsr #27
   14398:	andeq	r4, r1, r0, lsl r4
   1439c:	andeq	r4, r1, r0, lsl r4
   143a0:	andeq	r4, r1, r0, lsl r4
   143a4:	andeq	r4, r1, r0, lsl r4
   143a8:	andeq	r4, r1, r0, lsl r4
   143ac:	andeq	r4, r1, r0, lsl r4
   143b0:	andeq	r4, r1, r0, lsl r4
   143b4:	andeq	r4, r1, r0, lsl r4
   143b8:	andeq	r4, r1, r0, lsl r4
   143bc:	andeq	r4, r1, r0, lsl r4
   143c0:	andeq	r4, r1, r0, lsl r4
   143c4:	andeq	r4, r1, r0, lsl r4
   143c8:	andeq	r4, r1, r0, lsl r4
   143cc:	andeq	r4, r1, r0, lsl r4
   143d0:	andeq	r4, r1, r0, lsl r4
   143d4:	andeq	r4, r1, r0, lsl r4
   143d8:	andeq	r4, r1, r0, lsl r4
   143dc:	andeq	r4, r1, r0, lsl r4
   143e0:	andeq	r4, r1, r0, lsl r4
   143e4:	andeq	r4, r1, r0, lsl r4
   143e8:	andeq	r4, r1, r0, lsl r4
   143ec:	andeq	r4, r1, r0, lsl r4
   143f0:	andeq	r4, r1, r0, lsl r4
   143f4:	andeq	r4, r1, r0, lsl r4
   143f8:	andeq	r4, r1, r0, lsl r4
   143fc:	andeq	r4, r1, r0, lsl r4
   14400:	muleq	r1, ip, r9
   14404:	andeq	r3, r1, r0, lsr #27
   14408:	muleq	r1, ip, r9
   1440c:	andeq	r4, r1, ip, lsl r4
   14410:	mov	r6, r7
   14414:	mov	r7, #0
   14418:	b	13bc8 <__assert_fail@plt+0x2c70>
   1441c:	cmp	r9, #0
   14420:	mov	r2, #0
   14424:	beq	13e8c <__assert_fail@plt+0x2f34>
   14428:	mov	r6, #0
   1442c:	mov	r7, r2
   14430:	mov	r3, r6
   14434:	b	139e8 <__assert_fail@plt+0x2a90>
   14438:	mov	r2, #0
   1443c:	b	13ea0 <__assert_fail@plt+0x2f48>
   14440:	mov	r7, #0
   14444:	mov	r3, #118	; 0x76
   14448:	b	13bac <__assert_fail@plt+0x2c54>
   1444c:	mov	r7, #0
   14450:	mov	r3, #116	; 0x74
   14454:	b	13cdc <__assert_fail@plt+0x2d84>
   14458:	ldr	r3, [sp, #44]	; 0x2c
   1445c:	b	13a10 <__assert_fail@plt+0x2ab8>
   14460:	ldr	r3, [sp, #44]	; 0x2c
   14464:	cmp	r3, #0
   14468:	bne	148d8 <__assert_fail@plt+0x3980>
   1446c:	add	r9, r9, #1
   14470:	mov	r6, #0
   14474:	ldr	r3, [sp, #48]	; 0x30
   14478:	mov	r5, #92	; 0x5c
   1447c:	b	13c9c <__assert_fail@plt+0x2d44>
   14480:	ldr	r3, [sp, #32]
   14484:	ldrb	r2, [r3, #1]
   14488:	adds	r2, r2, #0
   1448c:	movne	r2, #1
   14490:	b	139b8 <__assert_fail@plt+0x2a60>
   14494:	ldr	r3, [sp, #156]	; 0x9c
   14498:	ands	r3, r3, #4
   1449c:	beq	144c4 <__assert_fail@plt+0x356c>
   144a0:	ldr	r2, [sp, #28]
   144a4:	add	r3, r9, #2
   144a8:	cmp	r3, r2
   144ac:	bcs	144c0 <__assert_fail@plt+0x3568>
   144b0:	ldr	r2, [sp, #52]	; 0x34
   144b4:	ldrb	r5, [r2, #1]
   144b8:	cmp	r5, #63	; 0x3f
   144bc:	beq	1493c <__assert_fail@plt+0x39e4>
   144c0:	mov	r3, #0
   144c4:	mov	r5, #63	; 0x3f
   144c8:	mov	r6, r3
   144cc:	b	139d8 <__assert_fail@plt+0x2a80>
   144d0:	ldr	r3, [sp, #44]	; 0x2c
   144d4:	cmp	r3, #0
   144d8:	bne	148d8 <__assert_fail@plt+0x3980>
   144dc:	mov	r6, r3
   144e0:	mov	r5, #63	; 0x3f
   144e4:	b	13a10 <__assert_fail@plt+0x2ab8>
   144e8:	ldr	r1, [sp, #28]
   144ec:	mov	r2, #0
   144f0:	mov	r3, #0
   144f4:	strd	r2, [sp, #104]	; 0x68
   144f8:	cmn	r1, #1
   144fc:	bne	1450c <__assert_fail@plt+0x35b4>
   14500:	ldr	r0, [sp, #32]
   14504:	bl	10e68 <strlen@plt>
   14508:	str	r0, [sp, #28]
   1450c:	str	r8, [sp, #76]	; 0x4c
   14510:	mov	r3, #0
   14514:	str	sl, [sp, #80]	; 0x50
   14518:	ldr	sl, [sp, #32]
   1451c:	str	r5, [sp, #84]	; 0x54
   14520:	mov	r5, r3
   14524:	ldr	r8, [sp, #44]	; 0x2c
   14528:	str	r7, [sp, #88]	; 0x58
   1452c:	str	r4, [sp, #92]	; 0x5c
   14530:	ldr	r2, [sp, #28]
   14534:	add	r4, r9, r5
   14538:	add	r3, sp, #104	; 0x68
   1453c:	add	r7, sl, r4
   14540:	add	r0, sp, #100	; 0x64
   14544:	mov	r1, r7
   14548:	sub	r2, r2, r4
   1454c:	bl	16e70 <__assert_fail@plt+0x5f18>
   14550:	subs	r1, r0, #0
   14554:	beq	145a0 <__assert_fail@plt+0x3648>
   14558:	cmn	r1, #1
   1455c:	beq	14918 <__assert_fail@plt+0x39c0>
   14560:	cmn	r1, #2
   14564:	beq	14a38 <__assert_fail@plt+0x3ae0>
   14568:	cmp	fp, #2
   1456c:	movne	r3, #0
   14570:	andeq	r3, r8, #1
   14574:	cmp	r3, #0
   14578:	bne	14704 <__assert_fail@plt+0x37ac>
   1457c:	ldr	r0, [sp, #100]	; 0x64
   14580:	add	r5, r5, r1
   14584:	bl	10da8 <iswprint@plt>
   14588:	cmp	r0, #0
   1458c:	add	r0, sp, #104	; 0x68
   14590:	moveq	r6, #0
   14594:	bl	10d48 <mbsinit@plt>
   14598:	cmp	r0, #0
   1459c:	beq	14530 <__assert_fail@plt+0x35d8>
   145a0:	ldr	r3, [sp, #40]	; 0x28
   145a4:	mov	ip, r5
   145a8:	eor	r2, r6, #1
   145ac:	ldr	r8, [sp, #76]	; 0x4c
   145b0:	ldr	sl, [sp, #80]	; 0x50
   145b4:	and	r2, r2, r3
   145b8:	ldr	r5, [sp, #84]	; 0x54
   145bc:	ldr	r7, [sp, #88]	; 0x58
   145c0:	ldr	r4, [sp, #92]	; 0x5c
   145c4:	cmp	ip, #1
   145c8:	bls	13f04 <__assert_fail@plt+0x2fac>
   145cc:	add	r1, ip, r9
   145d0:	mov	r0, #39	; 0x27
   145d4:	ldr	lr, [sp, #52]	; 0x34
   145d8:	mov	ip, #0
   145dc:	str	r6, [sp, #52]	; 0x34
   145e0:	ldr	r6, [sp, #48]	; 0x30
   145e4:	b	146a0 <__assert_fail@plt+0x3748>
   145e8:	ldr	ip, [sp, #44]	; 0x2c
   145ec:	sub	r3, fp, #2
   145f0:	clz	r3, r3
   145f4:	lsr	r3, r3, #5
   145f8:	cmp	ip, #0
   145fc:	bne	14810 <__assert_fail@plt+0x38b8>
   14600:	eor	ip, r6, #1
   14604:	ands	r3, r3, ip
   14608:	beq	14638 <__assert_fail@plt+0x36e0>
   1460c:	cmp	sl, r4
   14610:	add	ip, r4, #1
   14614:	strbhi	r0, [r8, r4]
   14618:	cmp	sl, ip
   1461c:	movhi	r6, #36	; 0x24
   14620:	strbhi	r6, [r8, ip]
   14624:	add	ip, r4, #2
   14628:	mov	r6, r3
   1462c:	cmp	sl, ip
   14630:	add	r4, r4, #3
   14634:	strbhi	r0, [r8, ip]
   14638:	cmp	sl, r4
   1463c:	movhi	r3, #92	; 0x5c
   14640:	strbhi	r3, [r8, r4]
   14644:	add	r3, r4, #1
   14648:	cmp	sl, r3
   1464c:	bls	1465c <__assert_fail@plt+0x3704>
   14650:	lsr	ip, r5, #6
   14654:	add	ip, ip, #48	; 0x30
   14658:	strb	ip, [r8, r3]
   1465c:	add	r3, r4, #2
   14660:	cmp	sl, r3
   14664:	bls	14674 <__assert_fail@plt+0x371c>
   14668:	ubfx	ip, r5, #3, #3
   1466c:	add	ip, ip, #48	; 0x30
   14670:	strb	ip, [r8, r3]
   14674:	add	r9, r9, #1
   14678:	and	r5, r5, #7
   1467c:	cmp	r9, r1
   14680:	add	r5, r5, #48	; 0x30
   14684:	add	r4, r4, #3
   14688:	bcs	1483c <__assert_fail@plt+0x38e4>
   1468c:	mov	ip, r2
   14690:	cmp	sl, r4
   14694:	strbhi	r5, [r8, r4]
   14698:	add	r4, r4, #1
   1469c:	ldrb	r5, [lr, #1]!
   146a0:	cmp	r2, #0
   146a4:	bne	145e8 <__assert_fail@plt+0x3690>
   146a8:	eor	r3, ip, #1
   146ac:	cmp	r7, #0
   146b0:	and	r3, r3, r6
   146b4:	uxtb	r3, r3
   146b8:	beq	146cc <__assert_fail@plt+0x3774>
   146bc:	cmp	sl, r4
   146c0:	movhi	r7, #92	; 0x5c
   146c4:	strbhi	r7, [r8, r4]
   146c8:	add	r4, r4, #1
   146cc:	add	r9, r9, #1
   146d0:	cmp	r9, r1
   146d4:	bcs	14824 <__assert_fail@plt+0x38cc>
   146d8:	cmp	r3, #0
   146dc:	beq	1485c <__assert_fail@plt+0x3904>
   146e0:	cmp	sl, r4
   146e4:	add	r3, r4, #1
   146e8:	mov	r7, #0
   146ec:	strbhi	r0, [r8, r4]
   146f0:	cmp	sl, r3
   146f4:	add	r4, r4, #2
   146f8:	mov	r6, r7
   146fc:	strbhi	r0, [r8, r3]
   14700:	b	14690 <__assert_fail@plt+0x3738>
   14704:	cmp	r1, #1
   14708:	beq	1457c <__assert_fail@plt+0x3624>
   1470c:	add	r2, r4, #1
   14710:	add	r3, sl, r1
   14714:	add	r2, sl, r2
   14718:	add	r4, r3, r4
   1471c:	ldrb	r3, [r2], #1
   14720:	sub	r3, r3, #91	; 0x5b
   14724:	cmp	r3, #33	; 0x21
   14728:	ldrls	pc, [pc, r3, lsl #2]
   1472c:	b	147b8 <__assert_fail@plt+0x3860>
   14730:	andeq	r4, r1, r4, asr #15
   14734:	andeq	r4, r1, r4, asr #15
   14738:			; <UNDEFINED> instruction: 0x000147b8
   1473c:	andeq	r4, r1, r4, asr #15
   14740:			; <UNDEFINED> instruction: 0x000147b8
   14744:	andeq	r4, r1, r4, asr #15
   14748:			; <UNDEFINED> instruction: 0x000147b8
   1474c:			; <UNDEFINED> instruction: 0x000147b8
   14750:			; <UNDEFINED> instruction: 0x000147b8
   14754:			; <UNDEFINED> instruction: 0x000147b8
   14758:			; <UNDEFINED> instruction: 0x000147b8
   1475c:			; <UNDEFINED> instruction: 0x000147b8
   14760:			; <UNDEFINED> instruction: 0x000147b8
   14764:			; <UNDEFINED> instruction: 0x000147b8
   14768:			; <UNDEFINED> instruction: 0x000147b8
   1476c:			; <UNDEFINED> instruction: 0x000147b8
   14770:			; <UNDEFINED> instruction: 0x000147b8
   14774:			; <UNDEFINED> instruction: 0x000147b8
   14778:			; <UNDEFINED> instruction: 0x000147b8
   1477c:			; <UNDEFINED> instruction: 0x000147b8
   14780:			; <UNDEFINED> instruction: 0x000147b8
   14784:			; <UNDEFINED> instruction: 0x000147b8
   14788:			; <UNDEFINED> instruction: 0x000147b8
   1478c:			; <UNDEFINED> instruction: 0x000147b8
   14790:			; <UNDEFINED> instruction: 0x000147b8
   14794:			; <UNDEFINED> instruction: 0x000147b8
   14798:			; <UNDEFINED> instruction: 0x000147b8
   1479c:			; <UNDEFINED> instruction: 0x000147b8
   147a0:			; <UNDEFINED> instruction: 0x000147b8
   147a4:			; <UNDEFINED> instruction: 0x000147b8
   147a8:			; <UNDEFINED> instruction: 0x000147b8
   147ac:			; <UNDEFINED> instruction: 0x000147b8
   147b0:			; <UNDEFINED> instruction: 0x000147b8
   147b4:	andeq	r4, r1, r4, asr #15
   147b8:	cmp	r4, r2
   147bc:	bne	1471c <__assert_fail@plt+0x37c4>
   147c0:	b	1457c <__assert_fail@plt+0x3624>
   147c4:	mov	r8, #2
   147c8:	ldr	fp, [sp, #76]	; 0x4c
   147cc:	ldr	sl, [sp, #80]	; 0x50
   147d0:	b	13cfc <__assert_fail@plt+0x2da4>
   147d4:	ldr	r2, [sp, #40]	; 0x28
   147d8:	str	fp, [sp, #152]	; 0x98
   147dc:	mov	fp, r8
   147e0:	ldr	r8, [sp, #152]	; 0x98
   147e4:	and	r2, r2, r3
   147e8:	str	r2, [sp, #40]	; 0x28
   147ec:	b	13cfc <__assert_fail@plt+0x2da4>
   147f0:	cmp	sl, r4
   147f4:	movls	r0, r4
   147f8:	bls	13e2c <__assert_fail@plt+0x2ed4>
   147fc:	ldr	r3, [sp, #48]	; 0x30
   14800:	b	13e1c <__assert_fail@plt+0x2ec4>
   14804:	str	sl, [sp, #72]	; 0x48
   14808:	ldr	sl, [sp, #44]	; 0x2c
   1480c:	b	13c6c <__assert_fail@plt+0x2d14>
   14810:	str	r3, [sp, #40]	; 0x28
   14814:	str	fp, [sp, #152]	; 0x98
   14818:	mov	fp, r8
   1481c:	ldr	r8, [sp, #152]	; 0x98
   14820:	b	13cfc <__assert_fail@plt+0x2da4>
   14824:	str	r6, [sp, #48]	; 0x30
   14828:	ldr	r6, [sp, #52]	; 0x34
   1482c:	b	13c9c <__assert_fail@plt+0x2d44>
   14830:	mov	r6, #0
   14834:	ldr	r2, [sp, #40]	; 0x28
   14838:	b	145cc <__assert_fail@plt+0x3674>
   1483c:	str	r6, [sp, #48]	; 0x30
   14840:	ldr	r6, [sp, #52]	; 0x34
   14844:	b	13a88 <__assert_fail@plt+0x2b30>
   14848:	add	r4, r4, #4
   1484c:	mov	r6, #0
   14850:	str	r3, [sp, #48]	; 0x30
   14854:	mov	r5, #48	; 0x30
   14858:	b	13a10 <__assert_fail@plt+0x2ab8>
   1485c:	mov	r7, r3
   14860:	b	14690 <__assert_fail@plt+0x3738>
   14864:	mov	r3, #1
   14868:	movw	r2, #32024	; 0x7d18
   1486c:	movt	r2, #1
   14870:	mov	r4, r3
   14874:	str	r3, [sp, #36]	; 0x24
   14878:	str	r3, [sp, #40]	; 0x28
   1487c:	str	sl, [sp, #44]	; 0x2c
   14880:	str	sl, [sp, #48]	; 0x30
   14884:	str	r3, [sp, #56]	; 0x38
   14888:	str	r2, [sp, #60]	; 0x3c
   1488c:	str	sl, [sp, #68]	; 0x44
   14890:	str	sl, [sp, #72]	; 0x48
   14894:	b	13538 <__assert_fail@plt+0x25e0>
   14898:	mov	r3, r6
   1489c:	mov	r5, #48	; 0x30
   148a0:	mov	r6, #0
   148a4:	b	13a10 <__assert_fail@plt+0x2ab8>
   148a8:	mov	r5, r3
   148ac:	b	13d88 <__assert_fail@plt+0x2e30>
   148b0:	cmp	sl, r4
   148b4:	mov	r5, #48	; 0x30
   148b8:	movhi	r3, #48	; 0x30
   148bc:	strbhi	r3, [r8, r4]
   148c0:	add	r3, r0, #2
   148c4:	add	r4, r0, #3
   148c8:	cmp	sl, r3
   148cc:	movhi	r1, #48	; 0x30
   148d0:	strbhi	r1, [r8, r3]
   148d4:	b	13e60 <__assert_fail@plt+0x2f08>
   148d8:	str	fp, [sp, #152]	; 0x98
   148dc:	mov	fp, r8
   148e0:	ldr	r8, [sp, #152]	; 0x98
   148e4:	b	13cfc <__assert_fail@plt+0x2da4>
   148e8:	ldr	r3, [sp, #164]	; 0xa4
   148ec:	ldrb	r3, [r3]
   148f0:	cmp	r3, #0
   148f4:	beq	13508 <__assert_fail@plt+0x25b0>
   148f8:	ldr	r2, [sp, #164]	; 0xa4
   148fc:	cmp	sl, r4
   14900:	strbhi	r3, [fp, r4]
   14904:	add	r4, r4, #1
   14908:	ldrb	r3, [r2, #1]!
   1490c:	cmp	r3, #0
   14910:	bne	148fc <__assert_fail@plt+0x39a4>
   14914:	b	13508 <__assert_fail@plt+0x25b0>
   14918:	mov	ip, r5
   1491c:	mov	r6, #0
   14920:	ldr	r2, [sp, #40]	; 0x28
   14924:	ldr	r8, [sp, #76]	; 0x4c
   14928:	ldr	sl, [sp, #80]	; 0x50
   1492c:	ldr	r5, [sp, #84]	; 0x54
   14930:	ldr	r7, [sp, #88]	; 0x58
   14934:	ldr	r4, [sp, #92]	; 0x5c
   14938:	b	145c4 <__assert_fail@plt+0x366c>
   1493c:	ldr	r2, [sp, #32]
   14940:	ldrb	r1, [r2, r3]
   14944:	sub	r2, r1, #33	; 0x21
   14948:	cmp	r2, #29
   1494c:	ldrls	pc, [pc, r2, lsl #2]
   14950:	b	14a2c <__assert_fail@plt+0x3ad4>
   14954:	andeq	r4, r1, ip, asr #19
   14958:	andeq	r4, r1, ip, lsr #20
   1495c:	andeq	r4, r1, ip, lsr #20
   14960:	andeq	r4, r1, ip, lsr #20
   14964:	andeq	r4, r1, ip, lsr #20
   14968:	andeq	r4, r1, ip, lsr #20
   1496c:	andeq	r4, r1, ip, asr #19
   14970:	andeq	r4, r1, ip, asr #19
   14974:	andeq	r4, r1, ip, asr #19
   14978:	andeq	r4, r1, ip, lsr #20
   1497c:	andeq	r4, r1, ip, lsr #20
   14980:	andeq	r4, r1, ip, lsr #20
   14984:	andeq	r4, r1, ip, asr #19
   14988:	andeq	r4, r1, ip, lsr #20
   1498c:	andeq	r4, r1, ip, asr #19
   14990:	andeq	r4, r1, ip, lsr #20
   14994:	andeq	r4, r1, ip, lsr #20
   14998:	andeq	r4, r1, ip, lsr #20
   1499c:	andeq	r4, r1, ip, lsr #20
   149a0:	andeq	r4, r1, ip, lsr #20
   149a4:	andeq	r4, r1, ip, lsr #20
   149a8:	andeq	r4, r1, ip, lsr #20
   149ac:	andeq	r4, r1, ip, lsr #20
   149b0:	andeq	r4, r1, ip, lsr #20
   149b4:	andeq	r4, r1, ip, lsr #20
   149b8:	andeq	r4, r1, ip, lsr #20
   149bc:	andeq	r4, r1, ip, lsr #20
   149c0:	andeq	r4, r1, ip, asr #19
   149c4:	andeq	r4, r1, ip, asr #19
   149c8:	andeq	r4, r1, ip, asr #19
   149cc:	ldr	r2, [sp, #44]	; 0x2c
   149d0:	cmp	r2, #0
   149d4:	bne	14b30 <__assert_fail@plt+0x3bd8>
   149d8:	cmp	sl, r4
   149dc:	mov	r5, r1
   149e0:	movhi	r2, #63	; 0x3f
   149e4:	mov	r9, r3
   149e8:	strbhi	r2, [r8, r4]
   149ec:	add	r2, r4, #1
   149f0:	cmp	sl, r2
   149f4:	movhi	r0, #34	; 0x22
   149f8:	strbhi	r0, [r8, r2]
   149fc:	add	r2, r4, #2
   14a00:	cmp	sl, r2
   14a04:	movhi	r0, #34	; 0x22
   14a08:	strbhi	r0, [r8, r2]
   14a0c:	add	r2, r4, #3
   14a10:	add	r4, r4, #4
   14a14:	cmp	sl, r2
   14a18:	movhi	r0, #63	; 0x3f
   14a1c:	strbhi	r0, [r8, r2]
   14a20:	mov	r2, #0
   14a24:	mov	r6, r2
   14a28:	b	13e60 <__assert_fail@plt+0x2f08>
   14a2c:	mov	r3, #0
   14a30:	mov	r6, r3
   14a34:	b	139d8 <__assert_fail@plt+0x2a80>
   14a38:	ldr	r0, [sp, #28]
   14a3c:	mov	r1, r4
   14a40:	mov	r2, r7
   14a44:	mov	r3, r5
   14a48:	mov	ip, r5
   14a4c:	ldr	r8, [sp, #76]	; 0x4c
   14a50:	ldr	sl, [sp, #80]	; 0x50
   14a54:	cmp	r1, r0
   14a58:	ldr	r5, [sp, #84]	; 0x54
   14a5c:	ldr	r7, [sp, #88]	; 0x58
   14a60:	ldr	r4, [sp, #92]	; 0x5c
   14a64:	bcs	14a98 <__assert_fail@plt+0x3b40>
   14a68:	ldrb	r6, [r2]
   14a6c:	cmp	r6, #0
   14a70:	bne	14a84 <__assert_fail@plt+0x3b2c>
   14a74:	b	14bb8 <__assert_fail@plt+0x3c60>
   14a78:	ldrb	r6, [r2, #1]!
   14a7c:	cmp	r6, #0
   14a80:	beq	14b40 <__assert_fail@plt+0x3be8>
   14a84:	add	r3, r3, #1
   14a88:	add	r1, r9, r3
   14a8c:	cmp	r1, r0
   14a90:	bcc	14a78 <__assert_fail@plt+0x3b20>
   14a94:	mov	ip, r3
   14a98:	mov	r6, #0
   14a9c:	ldr	r2, [sp, #40]	; 0x28
   14aa0:	b	145c4 <__assert_fail@plt+0x366c>
   14aa4:	mov	r3, #1
   14aa8:	mov	r2, #0
   14aac:	mov	r4, r2
   14ab0:	str	r3, [sp, #36]	; 0x24
   14ab4:	str	r3, [sp, #40]	; 0x28
   14ab8:	str	r3, [sp, #44]	; 0x2c
   14abc:	str	r2, [sp, #48]	; 0x30
   14ac0:	str	r3, [sp, #56]	; 0x38
   14ac4:	movw	r3, #32024	; 0x7d18
   14ac8:	movt	r3, #1
   14acc:	str	r3, [sp, #60]	; 0x3c
   14ad0:	str	r2, [sp, #68]	; 0x44
   14ad4:	str	r2, [sp, #72]	; 0x48
   14ad8:	b	13538 <__assert_fail@plt+0x25e0>
   14adc:	mov	r2, r3
   14ae0:	ldr	r3, [sp, #60]	; 0x3c
   14ae4:	cmp	r3, #0
   14ae8:	moveq	r2, #0
   14aec:	andne	r2, r2, #1
   14af0:	cmp	r2, #0
   14af4:	beq	14b20 <__assert_fail@plt+0x3bc8>
   14af8:	mov	r2, r3
   14afc:	ldrb	r3, [r3]
   14b00:	cmp	r3, #0
   14b04:	beq	14b20 <__assert_fail@plt+0x3bc8>
   14b08:	cmp	sl, r4
   14b0c:	strbhi	r3, [fp, r4]
   14b10:	add	r4, r4, #1
   14b14:	ldrb	r3, [r2, #1]!
   14b18:	cmp	r3, #0
   14b1c:	bne	14b08 <__assert_fail@plt+0x3bb0>
   14b20:	cmp	sl, r4
   14b24:	movhi	r3, #0
   14b28:	strbhi	r3, [fp, r4]
   14b2c:	b	13d40 <__assert_fail@plt+0x2de8>
   14b30:	str	fp, [sp, #152]	; 0x98
   14b34:	mov	fp, r8
   14b38:	ldr	r8, [sp, #152]	; 0x98
   14b3c:	b	13d08 <__assert_fail@plt+0x2db0>
   14b40:	mov	ip, r3
   14b44:	ldr	r2, [sp, #40]	; 0x28
   14b48:	b	145c4 <__assert_fail@plt+0x366c>
   14b4c:	str	fp, [sp, #152]	; 0x98
   14b50:	mov	fp, r8
   14b54:	ldr	r8, [sp, #152]	; 0x98
   14b58:	sub	r3, r8, #2
   14b5c:	clz	r3, r3
   14b60:	lsr	r3, r3, #5
   14b64:	str	r3, [sp, #40]	; 0x28
   14b68:	b	13cfc <__assert_fail@plt+0x2da4>
   14b6c:	mov	ip, #5
   14b70:	ldr	r3, [sp, #28]
   14b74:	str	ip, [sp]
   14b78:	ldr	r2, [sp, #156]	; 0x9c
   14b7c:	ldr	ip, [sp, #164]	; 0xa4
   14b80:	ldr	r0, [sp, #160]	; 0xa0
   14b84:	str	r2, [sp, #4]
   14b88:	ldr	r2, [sp, #32]
   14b8c:	ldr	r1, [sp, #72]	; 0x48
   14b90:	str	ip, [sp, #12]
   14b94:	ldr	ip, [sp, #168]	; 0xa8
   14b98:	str	r0, [sp, #8]
   14b9c:	mov	r0, fp
   14ba0:	str	ip, [sp, #16]
   14ba4:	bl	13450 <__assert_fail@plt+0x24f8>
   14ba8:	mov	r4, r0
   14bac:	b	13d40 <__assert_fail@plt+0x2de8>
   14bb0:	mov	r8, #2
   14bb4:	b	13cfc <__assert_fail@plt+0x2da4>
   14bb8:	ldr	r2, [sp, #40]	; 0x28
   14bbc:	b	145c4 <__assert_fail@plt+0x366c>
   14bc0:	mov	r3, #0
   14bc4:	mov	r2, #1
   14bc8:	mov	r4, r3
   14bcc:	strd	r2, [sp, #36]	; 0x24
   14bd0:	strd	r2, [sp, #44]	; 0x2c
   14bd4:	str	r2, [sp, #56]	; 0x38
   14bd8:	str	r3, [sp, #68]	; 0x44
   14bdc:	str	r3, [sp, #72]	; 0x48
   14be0:	movw	r3, #32044	; 0x7d2c
   14be4:	movt	r3, #1
   14be8:	str	r3, [sp, #60]	; 0x3c
   14bec:	b	13538 <__assert_fail@plt+0x25e0>
   14bf0:	mov	r3, #0
   14bf4:	mov	r1, #1
   14bf8:	mov	r2, r3
   14bfc:	str	r1, [sp, #36]	; 0x24
   14c00:	str	r3, [sp, #48]	; 0x30
   14c04:	str	sl, [sp, #72]	; 0x48
   14c08:	b	13b40 <__assert_fail@plt+0x2be8>
   14c0c:	bl	10f40 <abort@plt>
   14c10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c14:	mov	r4, r0
   14c18:	mov	r5, r3
   14c1c:	strd	r6, [sp, #8]
   14c20:	movw	r7, #37120	; 0x9100
   14c24:	movt	r7, #2
   14c28:	strd	r8, [sp, #16]
   14c2c:	strd	sl, [sp, #24]
   14c30:	mov	sl, r1
   14c34:	mov	fp, r2
   14c38:	str	lr, [sp, #32]
   14c3c:	sub	sp, sp, #60	; 0x3c
   14c40:	bl	10e8c <__errno_location@plt>
   14c44:	mov	r8, r0
   14c48:	cmn	r4, #-2147483647	; 0x80000001
   14c4c:	ldr	r6, [r7]
   14c50:	movne	r0, #0
   14c54:	moveq	r0, #1
   14c58:	ldr	r3, [r8]
   14c5c:	orrs	r0, r0, r4, lsr #31
   14c60:	str	r3, [sp, #28]
   14c64:	bne	14df4 <__assert_fail@plt+0x3e9c>
   14c68:	ldr	r3, [r7, #4]
   14c6c:	cmp	r3, r4
   14c70:	bgt	14cd0 <__assert_fail@plt+0x3d78>
   14c74:	add	r1, r7, #8
   14c78:	sub	r2, r4, r3
   14c7c:	str	r3, [sp, #52]	; 0x34
   14c80:	cmp	r6, r1
   14c84:	add	r2, r2, #1
   14c88:	beq	14dcc <__assert_fail@plt+0x3e74>
   14c8c:	mov	r1, #8
   14c90:	mov	r0, r6
   14c94:	mvn	r3, #-2147483648	; 0x80000000
   14c98:	str	r1, [sp]
   14c9c:	add	r1, sp, #52	; 0x34
   14ca0:	bl	15cf8 <__assert_fail@plt+0x4da0>
   14ca4:	mov	r6, r0
   14ca8:	str	r0, [r7]
   14cac:	ldr	r0, [r7, #4]
   14cb0:	mov	r1, #0
   14cb4:	ldr	r2, [sp, #52]	; 0x34
   14cb8:	sub	r2, r2, r0
   14cbc:	add	r0, r6, r0, lsl #3
   14cc0:	lsl	r2, r2, #3
   14cc4:	bl	10ea4 <memset@plt>
   14cc8:	ldr	r3, [sp, #52]	; 0x34
   14ccc:	str	r3, [r7, #4]
   14cd0:	ldr	r1, [r5, #4]
   14cd4:	add	r0, r6, r4, lsl #3
   14cd8:	add	ip, r5, #8
   14cdc:	mov	r3, fp
   14ce0:	mov	r2, sl
   14ce4:	ldr	r7, [r0, #4]
   14ce8:	str	r0, [sp, #36]	; 0x24
   14cec:	str	ip, [sp, #40]	; 0x28
   14cf0:	orr	r0, r1, #1
   14cf4:	ldr	r9, [r6, r4, lsl #3]
   14cf8:	str	ip, [sp, #8]
   14cfc:	ldr	lr, [r5, #44]	; 0x2c
   14d00:	str	r0, [sp, #4]
   14d04:	ldr	ip, [r5]
   14d08:	mov	r1, r9
   14d0c:	str	ip, [sp, #32]
   14d10:	ldr	ip, [r5, #40]	; 0x28
   14d14:	str	ip, [sp, #12]
   14d18:	ldr	ip, [sp, #32]
   14d1c:	str	lr, [sp, #16]
   14d20:	str	r0, [sp, #44]	; 0x2c
   14d24:	mov	r0, r7
   14d28:	str	ip, [sp]
   14d2c:	bl	13450 <__assert_fail@plt+0x24f8>
   14d30:	cmp	r9, r0
   14d34:	bhi	14da4 <__assert_fail@plt+0x3e4c>
   14d38:	add	r9, r0, #1
   14d3c:	movw	r3, #37232	; 0x9170
   14d40:	movt	r3, #2
   14d44:	cmp	r7, r3
   14d48:	str	r9, [r6, r4, lsl #3]
   14d4c:	beq	14d58 <__assert_fail@plt+0x3e00>
   14d50:	mov	r0, r7
   14d54:	bl	12fa0 <__assert_fail@plt+0x2048>
   14d58:	mov	r0, r9
   14d5c:	bl	15b48 <__assert_fail@plt+0x4bf0>
   14d60:	ldr	ip, [r5]
   14d64:	mov	r3, fp
   14d68:	mov	r2, sl
   14d6c:	mov	r1, r9
   14d70:	mov	r7, r0
   14d74:	ldr	lr, [sp, #36]	; 0x24
   14d78:	ldr	r4, [r5, #40]	; 0x28
   14d7c:	str	r0, [lr, #4]
   14d80:	ldr	lr, [r5, #44]	; 0x2c
   14d84:	str	ip, [sp]
   14d88:	ldr	ip, [sp, #44]	; 0x2c
   14d8c:	str	ip, [sp, #4]
   14d90:	ldr	ip, [sp, #40]	; 0x28
   14d94:	str	r4, [sp, #12]
   14d98:	str	lr, [sp, #16]
   14d9c:	str	ip, [sp, #8]
   14da0:	bl	13450 <__assert_fail@plt+0x24f8>
   14da4:	ldr	r3, [sp, #28]
   14da8:	mov	r0, r7
   14dac:	str	r3, [r8]
   14db0:	add	sp, sp, #60	; 0x3c
   14db4:	ldrd	r4, [sp]
   14db8:	ldrd	r6, [sp, #8]
   14dbc:	ldrd	r8, [sp, #16]
   14dc0:	ldrd	sl, [sp, #24]
   14dc4:	add	sp, sp, #32
   14dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dcc:	mov	r1, #8
   14dd0:	mvn	r3, #-2147483648	; 0x80000000
   14dd4:	str	r1, [sp]
   14dd8:	add	r1, sp, #52	; 0x34
   14ddc:	bl	15cf8 <__assert_fail@plt+0x4da0>
   14de0:	ldrd	r2, [r7, #8]
   14de4:	mov	r6, r0
   14de8:	str	r0, [r7]
   14dec:	strd	r2, [r0]
   14df0:	b	14cac <__assert_fail@plt+0x3d54>
   14df4:	bl	10f40 <abort@plt>
   14df8:	strd	r4, [sp, #-16]!
   14dfc:	mov	r5, r0
   14e00:	str	r6, [sp, #8]
   14e04:	str	lr, [sp, #12]
   14e08:	bl	10e8c <__errno_location@plt>
   14e0c:	mov	r4, r0
   14e10:	cmp	r5, #0
   14e14:	ldr	r0, [pc, #32]	; 14e3c <__assert_fail@plt+0x3ee4>
   14e18:	mov	r1, #48	; 0x30
   14e1c:	movne	r0, r5
   14e20:	ldr	r6, [r4]
   14e24:	bl	15e70 <__assert_fail@plt+0x4f18>
   14e28:	str	r6, [r4]
   14e2c:	ldrd	r4, [sp]
   14e30:	ldr	r6, [sp, #8]
   14e34:	add	sp, sp, #12
   14e38:	pop	{pc}		; (ldr pc, [sp], #4)
   14e3c:	andeq	r9, r2, r0, ror r2
   14e40:	ldr	r3, [pc, #12]	; 14e54 <__assert_fail@plt+0x3efc>
   14e44:	cmp	r0, #0
   14e48:	moveq	r0, r3
   14e4c:	ldr	r0, [r0]
   14e50:	bx	lr
   14e54:	andeq	r9, r2, r0, ror r2
   14e58:	ldr	r3, [pc, #12]	; 14e6c <__assert_fail@plt+0x3f14>
   14e5c:	cmp	r0, #0
   14e60:	moveq	r0, r3
   14e64:	str	r1, [r0]
   14e68:	bx	lr
   14e6c:	andeq	r9, r2, r0, ror r2
   14e70:	ldr	r3, [pc, #52]	; 14eac <__assert_fail@plt+0x3f54>
   14e74:	cmp	r0, #0
   14e78:	push	{lr}		; (str lr, [sp, #-4]!)
   14e7c:	lsr	lr, r1, #5
   14e80:	and	r1, r1, #31
   14e84:	moveq	r0, r3
   14e88:	add	r3, r0, #8
   14e8c:	ldr	ip, [r3, lr, lsl #2]
   14e90:	lsr	r0, ip, r1
   14e94:	eor	r2, r2, r0
   14e98:	and	r0, r0, #1
   14e9c:	and	r2, r2, #1
   14ea0:	eor	r1, ip, r2, lsl r1
   14ea4:	str	r1, [r3, lr, lsl #2]
   14ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   14eac:	andeq	r9, r2, r0, ror r2
   14eb0:	ldr	r3, [pc, #16]	; 14ec8 <__assert_fail@plt+0x3f70>
   14eb4:	cmp	r0, #0
   14eb8:	movne	r3, r0
   14ebc:	ldr	r0, [r3, #4]
   14ec0:	str	r1, [r3, #4]
   14ec4:	bx	lr
   14ec8:	andeq	r9, r2, r0, ror r2
   14ecc:	ldr	r3, [pc, #48]	; 14f04 <__assert_fail@plt+0x3fac>
   14ed0:	cmp	r0, #0
   14ed4:	mov	ip, #10
   14ed8:	moveq	r0, r3
   14edc:	cmp	r2, #0
   14ee0:	cmpne	r1, #0
   14ee4:	str	ip, [r0]
   14ee8:	beq	14ef8 <__assert_fail@plt+0x3fa0>
   14eec:	str	r1, [r0, #40]	; 0x28
   14ef0:	str	r2, [r0, #44]	; 0x2c
   14ef4:	bx	lr
   14ef8:	str	r4, [sp, #-8]!
   14efc:	str	lr, [sp, #4]
   14f00:	bl	10f40 <abort@plt>
   14f04:	andeq	r9, r2, r0, ror r2
   14f08:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14f0c:	strd	r6, [sp, #8]
   14f10:	mov	r7, r0
   14f14:	mov	r6, r1
   14f18:	strd	r8, [sp, #16]
   14f1c:	mov	r8, r2
   14f20:	mov	r9, r3
   14f24:	str	lr, [sp, #24]
   14f28:	sub	sp, sp, #28
   14f2c:	ldr	r4, [sp, #56]	; 0x38
   14f30:	ldr	ip, [pc, #104]	; 14fa0 <__assert_fail@plt+0x4048>
   14f34:	cmp	r4, #0
   14f38:	moveq	r4, ip
   14f3c:	bl	10e8c <__errno_location@plt>
   14f40:	ldr	ip, [r4, #44]	; 0x2c
   14f44:	mov	r5, r0
   14f48:	mov	r1, r6
   14f4c:	add	lr, r4, #8
   14f50:	mov	r3, r9
   14f54:	ldr	r6, [r5]
   14f58:	mov	r2, r8
   14f5c:	mov	r0, r7
   14f60:	str	ip, [sp, #16]
   14f64:	ldr	ip, [r4, #40]	; 0x28
   14f68:	str	lr, [sp, #8]
   14f6c:	str	ip, [sp, #12]
   14f70:	ldr	ip, [r4, #4]
   14f74:	str	ip, [sp, #4]
   14f78:	ldr	ip, [r4]
   14f7c:	str	ip, [sp]
   14f80:	bl	13450 <__assert_fail@plt+0x24f8>
   14f84:	str	r6, [r5]
   14f88:	add	sp, sp, #28
   14f8c:	ldrd	r4, [sp]
   14f90:	ldrd	r6, [sp, #8]
   14f94:	ldrd	r8, [sp, #16]
   14f98:	add	sp, sp, #24
   14f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14fa0:	andeq	r9, r2, r0, ror r2
   14fa4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14fa8:	cmp	r3, #0
   14fac:	ldr	r4, [pc, #220]	; 15090 <__assert_fail@plt+0x4138>
   14fb0:	movne	r4, r3
   14fb4:	strd	r6, [sp, #8]
   14fb8:	mov	r6, r2
   14fbc:	strd	r8, [sp, #16]
   14fc0:	mov	r9, r0
   14fc4:	strd	sl, [sp, #24]
   14fc8:	mov	sl, r1
   14fcc:	str	lr, [sp, #32]
   14fd0:	sub	sp, sp, #44	; 0x2c
   14fd4:	bl	10e8c <__errno_location@plt>
   14fd8:	ldr	r5, [r4, #4]
   14fdc:	mov	r7, r0
   14fe0:	mov	r1, #0
   14fe4:	add	r8, r4, #8
   14fe8:	mov	r3, sl
   14fec:	ldr	ip, [r4, #44]	; 0x2c
   14ff0:	mov	r2, r9
   14ff4:	mov	r0, r1
   14ff8:	ldr	lr, [r7]
   14ffc:	cmp	r6, r1
   15000:	orreq	r5, r5, #1
   15004:	str	ip, [sp, #16]
   15008:	ldr	ip, [r4, #40]	; 0x28
   1500c:	stmib	sp, {r5, r8, ip}
   15010:	ldr	ip, [r4]
   15014:	str	lr, [sp, #28]
   15018:	str	ip, [sp]
   1501c:	bl	13450 <__assert_fail@plt+0x24f8>
   15020:	add	r1, r0, #1
   15024:	mov	fp, r0
   15028:	mov	r0, r1
   1502c:	str	r1, [sp, #36]	; 0x24
   15030:	bl	15b48 <__assert_fail@plt+0x4bf0>
   15034:	ldr	ip, [r4, #44]	; 0x2c
   15038:	mov	r3, sl
   1503c:	mov	r2, r9
   15040:	ldr	r1, [sp, #36]	; 0x24
   15044:	str	ip, [sp, #16]
   15048:	ldr	ip, [r4, #40]	; 0x28
   1504c:	str	r0, [sp, #32]
   15050:	stmib	sp, {r5, r8, ip}
   15054:	ldr	ip, [r4]
   15058:	str	ip, [sp]
   1505c:	bl	13450 <__assert_fail@plt+0x24f8>
   15060:	ldr	lr, [sp, #28]
   15064:	cmp	r6, #0
   15068:	ldr	r0, [sp, #32]
   1506c:	str	lr, [r7]
   15070:	strne	fp, [r6]
   15074:	add	sp, sp, #44	; 0x2c
   15078:	ldrd	r4, [sp]
   1507c:	ldrd	r6, [sp, #8]
   15080:	ldrd	r8, [sp, #16]
   15084:	ldrd	sl, [sp, #24]
   15088:	add	sp, sp, #32
   1508c:	pop	{pc}		; (ldr pc, [sp], #4)
   15090:	andeq	r9, r2, r0, ror r2
   15094:	mov	r3, r2
   15098:	mov	r2, #0
   1509c:	b	14fa4 <__assert_fail@plt+0x404c>
   150a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   150a4:	movw	r5, #37120	; 0x9100
   150a8:	movt	r5, #2
   150ac:	ldr	r3, [r5, #4]
   150b0:	strd	r6, [sp, #8]
   150b4:	str	r8, [sp, #16]
   150b8:	str	lr, [sp, #20]
   150bc:	ldr	r7, [r5]
   150c0:	cmp	r3, #1
   150c4:	ble	150e8 <__assert_fail@plt+0x4190>
   150c8:	mov	r4, #1
   150cc:	add	r6, r7, #4
   150d0:	ldr	r0, [r6, r4, lsl #3]
   150d4:	add	r4, r4, #1
   150d8:	bl	12fa0 <__assert_fail@plt+0x2048>
   150dc:	ldr	r3, [r5, #4]
   150e0:	cmp	r3, r4
   150e4:	bgt	150d0 <__assert_fail@plt+0x4178>
   150e8:	ldr	r0, [r7, #4]
   150ec:	movw	r4, #37232	; 0x9170
   150f0:	movt	r4, #2
   150f4:	cmp	r0, r4
   150f8:	beq	1510c <__assert_fail@plt+0x41b4>
   150fc:	bl	12fa0 <__assert_fail@plt+0x2048>
   15100:	mov	r3, #256	; 0x100
   15104:	str	r3, [r5, #8]
   15108:	str	r4, [r5, #12]
   1510c:	ldr	r4, [pc, #44]	; 15140 <__assert_fail@plt+0x41e8>
   15110:	cmp	r7, r4
   15114:	beq	15124 <__assert_fail@plt+0x41cc>
   15118:	mov	r0, r7
   1511c:	bl	12fa0 <__assert_fail@plt+0x2048>
   15120:	str	r4, [r5]
   15124:	mov	r3, #1
   15128:	ldrd	r6, [sp, #8]
   1512c:	str	r3, [r5, #4]
   15130:	ldrd	r4, [sp]
   15134:	ldr	r8, [sp, #16]
   15138:	add	sp, sp, #20
   1513c:	pop	{pc}		; (ldr pc, [sp], #4)
   15140:	andeq	r9, r2, r8, lsl #2
   15144:	ldr	r3, [pc, #4]	; 15150 <__assert_fail@plt+0x41f8>
   15148:	mvn	r2, #0
   1514c:	b	14c10 <__assert_fail@plt+0x3cb8>
   15150:	andeq	r9, r2, r0, ror r2
   15154:	ldr	r3, [pc]	; 1515c <__assert_fail@plt+0x4204>
   15158:	b	14c10 <__assert_fail@plt+0x3cb8>
   1515c:	andeq	r9, r2, r0, ror r2
   15160:	mov	r1, r0
   15164:	ldr	r3, [pc, #8]	; 15174 <__assert_fail@plt+0x421c>
   15168:	mvn	r2, #0
   1516c:	mov	r0, #0
   15170:	b	14c10 <__assert_fail@plt+0x3cb8>
   15174:	andeq	r9, r2, r0, ror r2
   15178:	mov	r2, r1
   1517c:	ldr	r3, [pc, #8]	; 1518c <__assert_fail@plt+0x4234>
   15180:	mov	r1, r0
   15184:	mov	r0, #0
   15188:	b	14c10 <__assert_fail@plt+0x3cb8>
   1518c:	andeq	r9, r2, r0, ror r2
   15190:	strd	r4, [sp, #-12]!
   15194:	mov	r5, r2
   15198:	mov	r4, r0
   1519c:	str	lr, [sp, #8]
   151a0:	sub	sp, sp, #52	; 0x34
   151a4:	mov	r0, sp
   151a8:	bl	132ac <__assert_fail@plt+0x2354>
   151ac:	mov	r3, sp
   151b0:	mov	r1, r5
   151b4:	mov	r0, r4
   151b8:	mvn	r2, #0
   151bc:	bl	14c10 <__assert_fail@plt+0x3cb8>
   151c0:	add	sp, sp, #52	; 0x34
   151c4:	ldrd	r4, [sp]
   151c8:	add	sp, sp, #8
   151cc:	pop	{pc}		; (ldr pc, [sp], #4)
   151d0:	strd	r4, [sp, #-16]!
   151d4:	mov	r5, r2
   151d8:	mov	r4, r0
   151dc:	str	r6, [sp, #8]
   151e0:	mov	r6, r3
   151e4:	str	lr, [sp, #12]
   151e8:	sub	sp, sp, #48	; 0x30
   151ec:	mov	r0, sp
   151f0:	bl	132ac <__assert_fail@plt+0x2354>
   151f4:	mov	r3, sp
   151f8:	mov	r2, r6
   151fc:	mov	r1, r5
   15200:	mov	r0, r4
   15204:	bl	14c10 <__assert_fail@plt+0x3cb8>
   15208:	add	sp, sp, #48	; 0x30
   1520c:	ldrd	r4, [sp]
   15210:	ldr	r6, [sp, #8]
   15214:	add	sp, sp, #12
   15218:	pop	{pc}		; (ldr pc, [sp], #4)
   1521c:	mov	r2, r1
   15220:	mov	r1, r0
   15224:	mov	r0, #0
   15228:	b	15190 <__assert_fail@plt+0x4238>
   1522c:	mov	r3, r2
   15230:	mov	r2, r1
   15234:	mov	r1, r0
   15238:	mov	r0, #0
   1523c:	b	151d0 <__assert_fail@plt+0x4278>
   15240:	ldr	ip, [pc, #140]	; 152d4 <__assert_fail@plt+0x437c>
   15244:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15248:	ldrd	r4, [ip]
   1524c:	strd	r6, [sp, #8]
   15250:	ldrd	r6, [ip, #8]
   15254:	strd	r8, [sp, #16]
   15258:	lsr	r9, r2, #5
   1525c:	str	lr, [sp, #24]
   15260:	sub	sp, sp, #52	; 0x34
   15264:	and	lr, r2, #31
   15268:	add	r8, sp, #8
   1526c:	mov	r2, r1
   15270:	strd	r4, [sp]
   15274:	mov	r1, r0
   15278:	mov	r3, sp
   1527c:	strd	r6, [sp, #8]
   15280:	mov	r0, #0
   15284:	ldrd	r4, [ip, #16]
   15288:	ldrd	r6, [ip, #24]
   1528c:	strd	r4, [sp, #16]
   15290:	ldrd	r4, [ip, #32]
   15294:	strd	r6, [sp, #24]
   15298:	ldrd	r6, [ip, #40]	; 0x28
   1529c:	strd	r4, [sp, #32]
   152a0:	strd	r6, [sp, #40]	; 0x28
   152a4:	ldr	ip, [r8, r9, lsl #2]
   152a8:	mvn	r4, ip, lsr lr
   152ac:	and	r4, r4, #1
   152b0:	eor	lr, ip, r4, lsl lr
   152b4:	str	lr, [r8, r9, lsl #2]
   152b8:	bl	14c10 <__assert_fail@plt+0x3cb8>
   152bc:	add	sp, sp, #52	; 0x34
   152c0:	ldrd	r4, [sp]
   152c4:	ldrd	r6, [sp, #8]
   152c8:	ldrd	r8, [sp, #16]
   152cc:	add	sp, sp, #24
   152d0:	pop	{pc}		; (ldr pc, [sp], #4)
   152d4:	andeq	r9, r2, r0, ror r2
   152d8:	mov	r2, r1
   152dc:	mvn	r1, #0
   152e0:	b	15240 <__assert_fail@plt+0x42e8>
   152e4:	mov	r2, #58	; 0x3a
   152e8:	mvn	r1, #0
   152ec:	b	15240 <__assert_fail@plt+0x42e8>
   152f0:	mov	r2, #58	; 0x3a
   152f4:	b	15240 <__assert_fail@plt+0x42e8>
   152f8:	strd	r4, [sp, #-20]!	; 0xffffffec
   152fc:	strd	r6, [sp, #8]
   15300:	mov	r6, r0
   15304:	mov	r7, r2
   15308:	str	lr, [sp, #16]
   1530c:	sub	sp, sp, #100	; 0x64
   15310:	mov	r0, sp
   15314:	bl	132ac <__assert_fail@plt+0x2354>
   15318:	ldrd	r4, [sp, #8]
   1531c:	mov	r1, r7
   15320:	mov	r0, r6
   15324:	add	r3, sp, #48	; 0x30
   15328:	mvn	r2, #0
   1532c:	ldrd	r6, [sp]
   15330:	strd	r4, [sp, #56]	; 0x38
   15334:	ldrd	r4, [sp, #16]
   15338:	strd	r6, [sp, #48]	; 0x30
   1533c:	ldrd	r6, [sp, #32]
   15340:	ldr	lr, [sp, #60]	; 0x3c
   15344:	strd	r4, [sp, #64]	; 0x40
   15348:	ldrd	r4, [sp, #24]
   1534c:	mvn	ip, lr
   15350:	and	ip, ip, #67108864	; 0x4000000
   15354:	strd	r4, [sp, #72]	; 0x48
   15358:	eor	ip, ip, lr
   1535c:	ldrd	r4, [sp, #40]	; 0x28
   15360:	str	ip, [sp, #60]	; 0x3c
   15364:	strd	r6, [sp, #80]	; 0x50
   15368:	strd	r4, [sp, #88]	; 0x58
   1536c:	bl	14c10 <__assert_fail@plt+0x3cb8>
   15370:	add	sp, sp, #100	; 0x64
   15374:	ldrd	r4, [sp]
   15378:	ldrd	r6, [sp, #8]
   1537c:	add	sp, sp, #16
   15380:	pop	{pc}		; (ldr pc, [sp], #4)
   15384:	ldr	ip, [pc, #156]	; 15428 <__assert_fail@plt+0x44d0>
   15388:	cmp	r2, #0
   1538c:	cmpne	r1, #0
   15390:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15394:	strd	r6, [sp, #8]
   15398:	mov	r6, r2
   1539c:	str	r8, [sp, #16]
   153a0:	mov	r8, r3
   153a4:	strd	sl, [sp, #20]
   153a8:	ldrd	r4, [ip]
   153ac:	str	lr, [sp, #28]
   153b0:	sub	sp, sp, #48	; 0x30
   153b4:	mov	lr, #10
   153b8:	ldrd	r2, [ip, #8]
   153bc:	ldrd	sl, [ip, #16]
   153c0:	strd	r4, [sp]
   153c4:	ldrd	r4, [ip, #32]
   153c8:	str	lr, [sp]
   153cc:	strd	r2, [sp, #8]
   153d0:	strd	sl, [sp, #16]
   153d4:	ldrd	r2, [ip, #24]
   153d8:	ldrd	sl, [ip, #40]	; 0x28
   153dc:	strd	r2, [sp, #24]
   153e0:	strd	r4, [sp, #32]
   153e4:	strd	sl, [sp, #40]	; 0x28
   153e8:	beq	15424 <__assert_fail@plt+0x44cc>
   153ec:	ldr	r2, [sp, #80]	; 0x50
   153f0:	mov	r7, r1
   153f4:	mov	r3, sp
   153f8:	mov	r1, r8
   153fc:	str	r7, [sp, #40]	; 0x28
   15400:	str	r6, [sp, #44]	; 0x2c
   15404:	bl	14c10 <__assert_fail@plt+0x3cb8>
   15408:	add	sp, sp, #48	; 0x30
   1540c:	ldrd	r4, [sp]
   15410:	ldrd	r6, [sp, #8]
   15414:	ldr	r8, [sp, #16]
   15418:	ldrd	sl, [sp, #20]
   1541c:	add	sp, sp, #28
   15420:	pop	{pc}		; (ldr pc, [sp], #4)
   15424:	bl	10f40 <abort@plt>
   15428:	andeq	r9, r2, r0, ror r2
   1542c:	mvn	ip, #0
   15430:	push	{lr}		; (str lr, [sp, #-4]!)
   15434:	sub	sp, sp, #12
   15438:	str	ip, [sp]
   1543c:	bl	15384 <__assert_fail@plt+0x442c>
   15440:	add	sp, sp, #12
   15444:	pop	{pc}		; (ldr pc, [sp], #4)
   15448:	mvn	ip, #0
   1544c:	push	{lr}		; (str lr, [sp, #-4]!)
   15450:	sub	sp, sp, #12
   15454:	mov	r3, r2
   15458:	mov	r2, r1
   1545c:	mov	r1, r0
   15460:	mov	r0, #0
   15464:	str	ip, [sp]
   15468:	bl	15384 <__assert_fail@plt+0x442c>
   1546c:	add	sp, sp, #12
   15470:	pop	{pc}		; (ldr pc, [sp], #4)
   15474:	push	{lr}		; (str lr, [sp, #-4]!)
   15478:	sub	sp, sp, #12
   1547c:	str	r3, [sp]
   15480:	mov	r3, r2
   15484:	mov	r2, r1
   15488:	mov	r1, r0
   1548c:	mov	r0, #0
   15490:	bl	15384 <__assert_fail@plt+0x442c>
   15494:	add	sp, sp, #12
   15498:	pop	{pc}		; (ldr pc, [sp], #4)
   1549c:	ldr	r3, [pc]	; 154a4 <__assert_fail@plt+0x454c>
   154a0:	b	14c10 <__assert_fail@plt+0x3cb8>
   154a4:	andeq	r9, r2, r0, lsl r1
   154a8:	mov	r2, r1
   154ac:	ldr	r3, [pc, #8]	; 154bc <__assert_fail@plt+0x4564>
   154b0:	mov	r1, r0
   154b4:	mov	r0, #0
   154b8:	b	14c10 <__assert_fail@plt+0x3cb8>
   154bc:	andeq	r9, r2, r0, lsl r1
   154c0:	ldr	r3, [pc, #4]	; 154cc <__assert_fail@plt+0x4574>
   154c4:	mvn	r2, #0
   154c8:	b	14c10 <__assert_fail@plt+0x3cb8>
   154cc:	andeq	r9, r2, r0, lsl r1
   154d0:	mov	r1, r0
   154d4:	ldr	r3, [pc, #8]	; 154e4 <__assert_fail@plt+0x458c>
   154d8:	mvn	r2, #0
   154dc:	mov	r0, #0
   154e0:	b	14c10 <__assert_fail@plt+0x3cb8>
   154e4:	andeq	r9, r2, r0, lsl r1
   154e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   154ec:	mov	r5, #0
   154f0:	movt	r5, #32752	; 0x7ff0
   154f4:	mov	r4, r2
   154f8:	strd	r6, [sp, #8]
   154fc:	mov	r7, r1
   15500:	str	r8, [sp, #16]
   15504:	mov	r8, r0
   15508:	str	lr, [sp, #20]
   1550c:	mov	r2, r4
   15510:	mov	r1, r7
   15514:	mov	r0, r8
   15518:	bl	10d00 <read@plt>
   1551c:	subs	r6, r0, #0
   15520:	bge	15554 <__assert_fail@plt+0x45fc>
   15524:	bl	10e8c <__errno_location@plt>
   15528:	ldr	r3, [r0]
   1552c:	cmp	r3, #4
   15530:	beq	1550c <__assert_fail@plt+0x45b4>
   15534:	cmp	r4, r5
   15538:	mov	r4, r5
   1553c:	movls	r2, #0
   15540:	movhi	r2, #1
   15544:	cmp	r3, #22
   15548:	movne	r2, #0
   1554c:	cmp	r2, #0
   15550:	bne	1550c <__assert_fail@plt+0x45b4>
   15554:	mov	r0, r6
   15558:	ldrd	r4, [sp]
   1555c:	ldrd	r6, [sp, #8]
   15560:	ldr	r8, [sp, #16]
   15564:	add	sp, sp, #20
   15568:	pop	{pc}		; (ldr pc, [sp], #4)
   1556c:	cmp	r1, #0
   15570:	strd	r4, [sp, #-16]!
   15574:	mov	ip, r3
   15578:	str	r6, [sp, #8]
   1557c:	mov	r4, r0
   15580:	str	lr, [sp, #12]
   15584:	sub	sp, sp, #32
   15588:	ldr	r5, [sp, #48]	; 0x30
   1558c:	ldr	r6, [sp, #52]	; 0x34
   15590:	beq	156d4 <__assert_fail@plt+0x477c>
   15594:	mov	r3, r1
   15598:	mov	r1, #1
   1559c:	stm	sp, {r2, ip}
   155a0:	movw	r2, #32152	; 0x7d98
   155a4:	movt	r2, #1
   155a8:	bl	10ec8 <__fprintf_chk@plt>
   155ac:	mov	r2, #5
   155b0:	movw	r1, #32172	; 0x7dac
   155b4:	movt	r1, #1
   155b8:	mov	r0, #0
   155bc:	bl	10d78 <dcgettext@plt>
   155c0:	movw	ip, #2022	; 0x7e6
   155c4:	mov	r3, r0
   155c8:	mov	r1, #1
   155cc:	movw	r2, #32900	; 0x8084
   155d0:	movt	r2, #1
   155d4:	mov	r0, r4
   155d8:	str	ip, [sp]
   155dc:	bl	10ec8 <__fprintf_chk@plt>
   155e0:	mov	r1, r4
   155e4:	mov	r0, #10
   155e8:	bl	10d6c <fputc_unlocked@plt>
   155ec:	mov	r2, #5
   155f0:	movw	r1, #32176	; 0x7db0
   155f4:	movt	r1, #1
   155f8:	mov	r0, #0
   155fc:	bl	10d78 <dcgettext@plt>
   15600:	mov	r2, r0
   15604:	mov	r1, #1
   15608:	movw	r3, #32348	; 0x7e5c
   1560c:	movt	r3, #1
   15610:	mov	r0, r4
   15614:	bl	10ec8 <__fprintf_chk@plt>
   15618:	mov	r1, r4
   1561c:	mov	r0, #10
   15620:	bl	10d6c <fputc_unlocked@plt>
   15624:	cmp	r6, #9
   15628:	ldrls	pc, [pc, r6, lsl #2]
   1562c:	b	15940 <__assert_fail@plt+0x49e8>
   15630:	andeq	r5, r1, r0, asr #13
   15634:	strdeq	r5, [r1], -r0
   15638:	andeq	r5, r1, ip, lsr #14
   1563c:	andeq	r5, r1, ip, ror #14
   15640:			; <UNDEFINED> instruction: 0x000157b4
   15644:	andeq	r5, r1, ip, ror #15
   15648:	andeq	r5, r1, r4, lsr r8
   1564c:	andeq	r5, r1, r8, lsl #17
   15650:	andeq	r5, r1, r0, ror #17
   15654:	andeq	r5, r1, r8, asr r6
   15658:	movw	r1, #32652	; 0x7f8c
   1565c:	movt	r1, #1
   15660:	mov	r2, #5
   15664:	mov	r0, #0
   15668:	bl	10d78 <dcgettext@plt>
   1566c:	ldr	lr, [r5, #4]
   15670:	mov	r2, r0
   15674:	mov	r1, #1
   15678:	mov	r0, r4
   1567c:	ldr	r3, [r5, #8]
   15680:	ldr	ip, [r5, #32]
   15684:	str	lr, [sp]
   15688:	ldr	lr, [r5, #12]
   1568c:	str	ip, [sp, #28]
   15690:	ldr	ip, [r5, #28]
   15694:	str	r3, [sp, #4]
   15698:	ldr	r3, [r5, #16]
   1569c:	str	lr, [sp, #8]
   156a0:	ldr	lr, [r5, #20]
   156a4:	str	ip, [sp, #24]
   156a8:	ldr	ip, [r5, #24]
   156ac:	str	r3, [sp, #12]
   156b0:	ldr	r3, [r5]
   156b4:	str	lr, [sp, #16]
   156b8:	str	ip, [sp, #20]
   156bc:	bl	10ec8 <__fprintf_chk@plt>
   156c0:	add	sp, sp, #32
   156c4:	ldrd	r4, [sp]
   156c8:	ldr	r6, [sp, #8]
   156cc:	add	sp, sp, #12
   156d0:	pop	{pc}		; (ldr pc, [sp], #4)
   156d4:	mov	r3, r2
   156d8:	mov	r1, #1
   156dc:	str	ip, [sp]
   156e0:	movw	r2, #32164	; 0x7da4
   156e4:	movt	r2, #1
   156e8:	bl	10ec8 <__fprintf_chk@plt>
   156ec:	b	155ac <__assert_fail@plt+0x4654>
   156f0:	mov	r2, #5
   156f4:	movw	r1, #32384	; 0x7e80
   156f8:	movt	r1, #1
   156fc:	mov	r0, #0
   15700:	bl	10d78 <dcgettext@plt>
   15704:	ldr	r3, [r5]
   15708:	mov	r2, r0
   1570c:	mov	r1, #1
   15710:	mov	r0, r4
   15714:	add	sp, sp, #32
   15718:	ldrd	r4, [sp]
   1571c:	ldr	r6, [sp, #8]
   15720:	ldr	lr, [sp, #12]
   15724:	add	sp, sp, #16
   15728:	b	10ec8 <__fprintf_chk@plt>
   1572c:	mov	r2, #5
   15730:	movw	r1, #32400	; 0x7e90
   15734:	movt	r1, #1
   15738:	mov	r0, #0
   1573c:	bl	10d78 <dcgettext@plt>
   15740:	ldm	r5, {r3, ip}
   15744:	mov	r2, r0
   15748:	mov	r1, #1
   1574c:	mov	r0, r4
   15750:	str	ip, [sp, #48]	; 0x30
   15754:	add	sp, sp, #32
   15758:	ldrd	r4, [sp]
   1575c:	ldr	r6, [sp, #8]
   15760:	ldr	lr, [sp, #12]
   15764:	add	sp, sp, #16
   15768:	b	10ec8 <__fprintf_chk@plt>
   1576c:	mov	r2, #5
   15770:	movw	r1, #32424	; 0x7ea8
   15774:	movt	r1, #1
   15778:	mov	r0, #0
   1577c:	bl	10d78 <dcgettext@plt>
   15780:	ldm	r5, {r3, lr}
   15784:	mov	r2, r0
   15788:	mov	r1, #1
   1578c:	mov	r0, r4
   15790:	ldr	ip, [r5, #8]
   15794:	str	lr, [sp, #48]	; 0x30
   15798:	str	ip, [sp, #52]	; 0x34
   1579c:	add	sp, sp, #32
   157a0:	ldrd	r4, [sp]
   157a4:	ldr	r6, [sp, #8]
   157a8:	ldr	lr, [sp, #12]
   157ac:	add	sp, sp, #16
   157b0:	b	10ec8 <__fprintf_chk@plt>
   157b4:	mov	r2, #5
   157b8:	movw	r1, #32452	; 0x7ec4
   157bc:	movt	r1, #1
   157c0:	mov	r0, #0
   157c4:	bl	10d78 <dcgettext@plt>
   157c8:	ldmib	r5, {r3, ip, lr}
   157cc:	mov	r2, r0
   157d0:	mov	r1, #1
   157d4:	mov	r0, r4
   157d8:	str	r3, [sp]
   157dc:	ldr	r3, [r5]
   157e0:	stmib	sp, {ip, lr}
   157e4:	bl	10ec8 <__fprintf_chk@plt>
   157e8:	b	156c0 <__assert_fail@plt+0x4768>
   157ec:	mov	r2, #5
   157f0:	movw	r1, #32484	; 0x7ee4
   157f4:	movt	r1, #1
   157f8:	mov	r0, #0
   157fc:	bl	10d78 <dcgettext@plt>
   15800:	ldmib	r5, {ip, lr}
   15804:	mov	r2, r0
   15808:	mov	r1, #1
   1580c:	mov	r0, r4
   15810:	ldr	r3, [r5, #16]
   15814:	str	ip, [sp]
   15818:	ldr	ip, [r5, #12]
   1581c:	str	r3, [sp, #12]
   15820:	ldr	r3, [r5]
   15824:	str	lr, [sp, #4]
   15828:	str	ip, [sp, #8]
   1582c:	bl	10ec8 <__fprintf_chk@plt>
   15830:	b	156c0 <__assert_fail@plt+0x4768>
   15834:	mov	r2, #5
   15838:	movw	r1, #32520	; 0x7f08
   1583c:	movt	r1, #1
   15840:	mov	r0, #0
   15844:	bl	10d78 <dcgettext@plt>
   15848:	ldr	lr, [r5, #4]
   1584c:	mov	r2, r0
   15850:	mov	r1, #1
   15854:	mov	r0, r4
   15858:	ldr	r3, [r5, #8]
   1585c:	ldr	ip, [r5, #20]
   15860:	str	lr, [sp]
   15864:	ldr	lr, [r5, #12]
   15868:	str	ip, [sp, #16]
   1586c:	ldr	ip, [r5, #16]
   15870:	str	r3, [sp, #4]
   15874:	ldr	r3, [r5]
   15878:	str	lr, [sp, #8]
   1587c:	str	ip, [sp, #12]
   15880:	bl	10ec8 <__fprintf_chk@plt>
   15884:	b	156c0 <__assert_fail@plt+0x4768>
   15888:	mov	r2, #5
   1588c:	movw	r1, #32560	; 0x7f30
   15890:	movt	r1, #1
   15894:	mov	r0, #0
   15898:	bl	10d78 <dcgettext@plt>
   1589c:	ldmib	r5, {r3, ip}
   158a0:	mov	r2, r0
   158a4:	mov	r1, #1
   158a8:	mov	r0, r4
   158ac:	ldr	lr, [r5, #24]
   158b0:	str	r3, [sp]
   158b4:	ldr	r3, [r5, #12]
   158b8:	str	lr, [sp, #20]
   158bc:	ldr	lr, [r5, #20]
   158c0:	str	ip, [sp, #4]
   158c4:	ldr	ip, [r5, #16]
   158c8:	str	r3, [sp, #8]
   158cc:	ldr	r3, [r5]
   158d0:	str	ip, [sp, #12]
   158d4:	str	lr, [sp, #16]
   158d8:	bl	10ec8 <__fprintf_chk@plt>
   158dc:	b	156c0 <__assert_fail@plt+0x4768>
   158e0:	mov	r2, #5
   158e4:	movw	r1, #32604	; 0x7f5c
   158e8:	movt	r1, #1
   158ec:	mov	r0, #0
   158f0:	bl	10d78 <dcgettext@plt>
   158f4:	ldmib	r5, {ip, lr}
   158f8:	mov	r2, r0
   158fc:	mov	r1, #1
   15900:	mov	r0, r4
   15904:	ldr	r3, [r5, #28]
   15908:	str	ip, [sp]
   1590c:	ldr	ip, [r5, #12]
   15910:	str	r3, [sp, #24]
   15914:	ldr	r3, [r5, #24]
   15918:	str	lr, [sp, #4]
   1591c:	ldr	lr, [r5, #16]
   15920:	str	ip, [sp, #8]
   15924:	ldr	ip, [r5, #20]
   15928:	str	r3, [sp, #20]
   1592c:	ldr	r3, [r5]
   15930:	str	lr, [sp, #12]
   15934:	str	ip, [sp, #16]
   15938:	bl	10ec8 <__fprintf_chk@plt>
   1593c:	b	156c0 <__assert_fail@plt+0x4768>
   15940:	movw	r1, #32704	; 0x7fc0
   15944:	movt	r1, #1
   15948:	b	15660 <__assert_fail@plt+0x4708>
   1594c:	strd	r4, [sp, #-12]!
   15950:	str	lr, [sp, #8]
   15954:	sub	sp, sp, #12
   15958:	ldr	r5, [sp, #24]
   1595c:	ldr	ip, [r5]
   15960:	cmp	ip, #0
   15964:	beq	15980 <__assert_fail@plt+0x4a28>
   15968:	mov	lr, r5
   1596c:	mov	ip, #0
   15970:	ldr	r4, [lr, #4]!
   15974:	add	ip, ip, #1
   15978:	cmp	r4, #0
   1597c:	bne	15970 <__assert_fail@plt+0x4a18>
   15980:	stm	sp, {r5, ip}
   15984:	bl	1556c <__assert_fail@plt+0x4614>
   15988:	add	sp, sp, #12
   1598c:	ldrd	r4, [sp]
   15990:	add	sp, sp, #8
   15994:	pop	{pc}		; (ldr pc, [sp], #4)
   15998:	strd	r4, [sp, #-16]!
   1599c:	mov	ip, #0
   159a0:	str	r6, [sp, #8]
   159a4:	str	lr, [sp, #12]
   159a8:	sub	sp, sp, #48	; 0x30
   159ac:	ldr	r5, [sp, #64]	; 0x40
   159b0:	add	r6, sp, #8
   159b4:	mov	r4, r6
   159b8:	ldr	lr, [r5], #4
   159bc:	cmp	lr, #0
   159c0:	str	lr, [r4], #4
   159c4:	beq	159d4 <__assert_fail@plt+0x4a7c>
   159c8:	add	ip, ip, #1
   159cc:	cmp	ip, #10
   159d0:	bne	159b8 <__assert_fail@plt+0x4a60>
   159d4:	stm	sp, {r6, ip}
   159d8:	bl	1556c <__assert_fail@plt+0x4614>
   159dc:	add	sp, sp, #48	; 0x30
   159e0:	ldrd	r4, [sp]
   159e4:	ldr	r6, [sp, #8]
   159e8:	add	sp, sp, #12
   159ec:	pop	{pc}		; (ldr pc, [sp], #4)
   159f0:	push	{r3}		; (str r3, [sp, #-4]!)
   159f4:	mov	ip, #0
   159f8:	strd	r4, [sp, #-12]!
   159fc:	str	lr, [sp, #8]
   15a00:	sub	sp, sp, #56	; 0x38
   15a04:	add	r3, sp, #72	; 0x48
   15a08:	add	r5, sp, #16
   15a0c:	mov	r4, r3
   15a10:	mov	lr, r5
   15a14:	str	r3, [sp, #12]
   15a18:	ldr	r3, [r4], #4
   15a1c:	cmp	r3, #0
   15a20:	str	r3, [lr], #4
   15a24:	beq	15a34 <__assert_fail@plt+0x4adc>
   15a28:	add	ip, ip, #1
   15a2c:	cmp	ip, #10
   15a30:	bne	15a18 <__assert_fail@plt+0x4ac0>
   15a34:	ldr	r3, [sp, #68]	; 0x44
   15a38:	stm	sp, {r5, ip}
   15a3c:	bl	1556c <__assert_fail@plt+0x4614>
   15a40:	add	sp, sp, #56	; 0x38
   15a44:	ldrd	r4, [sp]
   15a48:	ldr	lr, [sp, #8]
   15a4c:	add	sp, sp, #12
   15a50:	add	sp, sp, #4
   15a54:	bx	lr
   15a58:	movw	r3, #37204	; 0x9154
   15a5c:	movt	r3, #2
   15a60:	str	r4, [sp, #-8]!
   15a64:	mov	r0, #10
   15a68:	ldr	r1, [r3]
   15a6c:	str	lr, [sp, #4]
   15a70:	bl	10d6c <fputc_unlocked@plt>
   15a74:	mov	r2, #5
   15a78:	movw	r1, #32764	; 0x7ffc
   15a7c:	movt	r1, #1
   15a80:	mov	r0, #0
   15a84:	bl	10d78 <dcgettext@plt>
   15a88:	mov	r1, r0
   15a8c:	movw	r2, #32784	; 0x8010
   15a90:	movt	r2, #1
   15a94:	mov	r0, #1
   15a98:	bl	10eb0 <__printf_chk@plt>
   15a9c:	mov	r2, #5
   15aa0:	movw	r1, #32808	; 0x8028
   15aa4:	movt	r1, #1
   15aa8:	mov	r0, #0
   15aac:	bl	10d78 <dcgettext@plt>
   15ab0:	mov	r1, r0
   15ab4:	movw	r3, #31180	; 0x79cc
   15ab8:	movt	r3, #1
   15abc:	movw	r2, #31220	; 0x79f4
   15ac0:	movt	r2, #1
   15ac4:	mov	r0, #1
   15ac8:	bl	10eb0 <__printf_chk@plt>
   15acc:	mov	r2, #5
   15ad0:	movw	r1, #32828	; 0x803c
   15ad4:	movt	r1, #1
   15ad8:	mov	r0, #0
   15adc:	bl	10d78 <dcgettext@plt>
   15ae0:	mov	r1, r0
   15ae4:	movw	r2, #32868	; 0x8064
   15ae8:	movt	r2, #1
   15aec:	mov	r0, #1
   15af0:	ldr	r4, [sp]
   15af4:	ldr	lr, [sp, #4]
   15af8:	add	sp, sp, #8
   15afc:	b	10eb0 <__printf_chk@plt>
   15b00:	str	r4, [sp, #-8]!
   15b04:	str	lr, [sp, #4]
   15b08:	bl	16b24 <__assert_fail@plt+0x5bcc>
   15b0c:	cmp	r0, #0
   15b10:	beq	15b20 <__assert_fail@plt+0x4bc8>
   15b14:	ldr	r4, [sp]
   15b18:	add	sp, sp, #4
   15b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b20:	bl	15f78 <__assert_fail@plt+0x5020>
   15b24:	str	r4, [sp, #-8]!
   15b28:	str	lr, [sp, #4]
   15b2c:	bl	16b24 <__assert_fail@plt+0x5bcc>
   15b30:	cmp	r0, #0
   15b34:	beq	15b44 <__assert_fail@plt+0x4bec>
   15b38:	ldr	r4, [sp]
   15b3c:	add	sp, sp, #4
   15b40:	pop	{pc}		; (ldr pc, [sp], #4)
   15b44:	bl	15f78 <__assert_fail@plt+0x5020>
   15b48:	str	r4, [sp, #-8]!
   15b4c:	str	lr, [sp, #4]
   15b50:	bl	16b24 <__assert_fail@plt+0x5bcc>
   15b54:	cmp	r0, #0
   15b58:	beq	15b68 <__assert_fail@plt+0x4c10>
   15b5c:	ldr	r4, [sp]
   15b60:	add	sp, sp, #4
   15b64:	pop	{pc}		; (ldr pc, [sp], #4)
   15b68:	bl	15f78 <__assert_fail@plt+0x5020>
   15b6c:	strd	r4, [sp, #-16]!
   15b70:	mov	r5, r0
   15b74:	mov	r4, r1
   15b78:	str	r6, [sp, #8]
   15b7c:	str	lr, [sp, #12]
   15b80:	bl	16b60 <__assert_fail@plt+0x5c08>
   15b84:	cmp	r0, #0
   15b88:	beq	15b9c <__assert_fail@plt+0x4c44>
   15b8c:	ldrd	r4, [sp]
   15b90:	ldr	r6, [sp, #8]
   15b94:	add	sp, sp, #12
   15b98:	pop	{pc}		; (ldr pc, [sp], #4)
   15b9c:	adds	r4, r4, #0
   15ba0:	movne	r4, #1
   15ba4:	cmp	r5, #0
   15ba8:	moveq	r4, #1
   15bac:	cmp	r4, #0
   15bb0:	beq	15b8c <__assert_fail@plt+0x4c34>
   15bb4:	bl	15f78 <__assert_fail@plt+0x5020>
   15bb8:	cmp	r1, #0
   15bbc:	orreq	r1, r1, #1
   15bc0:	str	r4, [sp, #-8]!
   15bc4:	str	lr, [sp, #4]
   15bc8:	bl	16b60 <__assert_fail@plt+0x5c08>
   15bcc:	cmp	r0, #0
   15bd0:	beq	15be0 <__assert_fail@plt+0x4c88>
   15bd4:	ldr	r4, [sp]
   15bd8:	add	sp, sp, #4
   15bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   15be0:	bl	15f78 <__assert_fail@plt+0x5020>
   15be4:	strd	r4, [sp, #-16]!
   15be8:	mov	r4, r0
   15bec:	mov	r5, r2
   15bf0:	str	r6, [sp, #8]
   15bf4:	mov	r6, r1
   15bf8:	str	lr, [sp, #12]
   15bfc:	bl	16ee0 <__assert_fail@plt+0x5f88>
   15c00:	cmp	r0, #0
   15c04:	beq	15c18 <__assert_fail@plt+0x4cc0>
   15c08:	ldrd	r4, [sp]
   15c0c:	ldr	r6, [sp, #8]
   15c10:	add	sp, sp, #12
   15c14:	pop	{pc}		; (ldr pc, [sp], #4)
   15c18:	cmp	r4, #0
   15c1c:	beq	15c2c <__assert_fail@plt+0x4cd4>
   15c20:	cmp	r6, #0
   15c24:	cmpne	r5, #0
   15c28:	beq	15c08 <__assert_fail@plt+0x4cb0>
   15c2c:	bl	15f78 <__assert_fail@plt+0x5020>
   15c30:	b	15be4 <__assert_fail@plt+0x4c8c>
   15c34:	cmp	r2, #0
   15c38:	cmpne	r1, #0
   15c3c:	str	r4, [sp, #-8]!
   15c40:	moveq	r2, #1
   15c44:	str	lr, [sp, #4]
   15c48:	moveq	r1, r2
   15c4c:	bl	16ee0 <__assert_fail@plt+0x5f88>
   15c50:	cmp	r0, #0
   15c54:	beq	15c64 <__assert_fail@plt+0x4d0c>
   15c58:	ldr	r4, [sp]
   15c5c:	add	sp, sp, #4
   15c60:	pop	{pc}		; (ldr pc, [sp], #4)
   15c64:	bl	15f78 <__assert_fail@plt+0x5020>
   15c68:	mov	r2, r1
   15c6c:	mov	r1, r0
   15c70:	mov	r0, #0
   15c74:	b	15be4 <__assert_fail@plt+0x4c8c>
   15c78:	mov	r2, r1
   15c7c:	mov	r1, r0
   15c80:	mov	r0, #0
   15c84:	b	15c34 <__assert_fail@plt+0x4cdc>
   15c88:	cmp	r0, #0
   15c8c:	strd	r4, [sp, #-16]!
   15c90:	mov	r5, r1
   15c94:	ldr	r4, [r1]
   15c98:	str	r6, [sp, #8]
   15c9c:	str	lr, [sp, #12]
   15ca0:	beq	15cd0 <__assert_fail@plt+0x4d78>
   15ca4:	lsr	r3, r4, #1
   15ca8:	add	r3, r3, #1
   15cac:	adds	r4, r4, r3
   15cb0:	bcs	15cec <__assert_fail@plt+0x4d94>
   15cb4:	mov	r1, r4
   15cb8:	bl	15be4 <__assert_fail@plt+0x4c8c>
   15cbc:	ldr	r6, [sp, #8]
   15cc0:	str	r4, [r5]
   15cc4:	ldrd	r4, [sp]
   15cc8:	add	sp, sp, #12
   15ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd0:	cmp	r4, #0
   15cd4:	bne	15cb4 <__assert_fail@plt+0x4d5c>
   15cd8:	mov	r4, #64	; 0x40
   15cdc:	udiv	r4, r4, r2
   15ce0:	cmp	r2, #64	; 0x40
   15ce4:	addhi	r4, r4, #1
   15ce8:	b	15cb4 <__assert_fail@plt+0x4d5c>
   15cec:	bl	15f78 <__assert_fail@plt+0x5020>
   15cf0:	mov	r2, #1
   15cf4:	b	15c88 <__assert_fail@plt+0x4d30>
   15cf8:	ldr	ip, [r1]
   15cfc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15d00:	mov	r5, r1
   15d04:	strd	r6, [sp, #8]
   15d08:	str	lr, [sp, #28]
   15d0c:	strd	r8, [sp, #16]
   15d10:	asr	lr, ip, #1
   15d14:	ldr	r8, [sp, #32]
   15d18:	str	sl, [sp, #24]
   15d1c:	adds	r4, ip, lr
   15d20:	mvn	lr, r3
   15d24:	lsr	lr, lr, #31
   15d28:	mvnvs	r4, #-2147483648	; 0x80000000
   15d2c:	cmp	r3, r4
   15d30:	movge	r1, #0
   15d34:	andlt	r1, lr, #1
   15d38:	cmp	r1, #0
   15d3c:	movne	r4, r3
   15d40:	smull	r6, r7, r4, r8
   15d44:	cmp	r7, r6, asr #31
   15d48:	bne	15dd0 <__assert_fail@plt+0x4e78>
   15d4c:	cmp	r6, #63	; 0x3f
   15d50:	mov	r1, r6
   15d54:	ble	15db8 <__assert_fail@plt+0x4e60>
   15d58:	cmp	r0, #0
   15d5c:	sub	r6, r4, ip
   15d60:	streq	r0, [r5]
   15d64:	cmp	r6, r2
   15d68:	bge	15d98 <__assert_fail@plt+0x4e40>
   15d6c:	adds	r4, ip, r2
   15d70:	bvs	15dcc <__assert_fail@plt+0x4e74>
   15d74:	cmp	r4, r3
   15d78:	movle	r3, #0
   15d7c:	andgt	r3, lr, #1
   15d80:	cmp	r3, #0
   15d84:	bne	15dcc <__assert_fail@plt+0x4e74>
   15d88:	smull	r8, r9, r4, r8
   15d8c:	cmp	r9, r8, asr #31
   15d90:	mov	r1, r8
   15d94:	bne	15dcc <__assert_fail@plt+0x4e74>
   15d98:	bl	15b6c <__assert_fail@plt+0x4c14>
   15d9c:	ldrd	r6, [sp, #8]
   15da0:	ldrd	r8, [sp, #16]
   15da4:	ldr	sl, [sp, #24]
   15da8:	str	r4, [r5]
   15dac:	ldrd	r4, [sp]
   15db0:	add	sp, sp, #28
   15db4:	pop	{pc}		; (ldr pc, [sp], #4)
   15db8:	mov	r6, #64	; 0x40
   15dbc:	sdiv	r4, r6, r8
   15dc0:	mls	r1, r8, r4, r6
   15dc4:	sub	r1, r6, r1
   15dc8:	b	15d58 <__assert_fail@plt+0x4e00>
   15dcc:	bl	15f78 <__assert_fail@plt+0x5020>
   15dd0:	mvn	r6, #-2147483648	; 0x80000000
   15dd4:	b	15dbc <__assert_fail@plt+0x4e64>
   15dd8:	mov	r1, #1
   15ddc:	str	r4, [sp, #-8]!
   15de0:	str	lr, [sp, #4]
   15de4:	bl	16ab0 <__assert_fail@plt+0x5b58>
   15de8:	cmp	r0, #0
   15dec:	beq	15dfc <__assert_fail@plt+0x4ea4>
   15df0:	ldr	r4, [sp]
   15df4:	add	sp, sp, #4
   15df8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dfc:	bl	15f78 <__assert_fail@plt+0x5020>
   15e00:	mov	r1, #1
   15e04:	str	r4, [sp, #-8]!
   15e08:	str	lr, [sp, #4]
   15e0c:	bl	16ab0 <__assert_fail@plt+0x5b58>
   15e10:	cmp	r0, #0
   15e14:	beq	15e24 <__assert_fail@plt+0x4ecc>
   15e18:	ldr	r4, [sp]
   15e1c:	add	sp, sp, #4
   15e20:	pop	{pc}		; (ldr pc, [sp], #4)
   15e24:	bl	15f78 <__assert_fail@plt+0x5020>
   15e28:	str	r4, [sp, #-8]!
   15e2c:	str	lr, [sp, #4]
   15e30:	bl	16ab0 <__assert_fail@plt+0x5b58>
   15e34:	cmp	r0, #0
   15e38:	beq	15e48 <__assert_fail@plt+0x4ef0>
   15e3c:	ldr	r4, [sp]
   15e40:	add	sp, sp, #4
   15e44:	pop	{pc}		; (ldr pc, [sp], #4)
   15e48:	bl	15f78 <__assert_fail@plt+0x5020>
   15e4c:	str	r4, [sp, #-8]!
   15e50:	str	lr, [sp, #4]
   15e54:	bl	16ab0 <__assert_fail@plt+0x5b58>
   15e58:	cmp	r0, #0
   15e5c:	beq	15e6c <__assert_fail@plt+0x4f14>
   15e60:	ldr	r4, [sp]
   15e64:	add	sp, sp, #4
   15e68:	pop	{pc}		; (ldr pc, [sp], #4)
   15e6c:	bl	15f78 <__assert_fail@plt+0x5020>
   15e70:	strd	r4, [sp, #-16]!
   15e74:	mov	r4, r1
   15e78:	str	r6, [sp, #8]
   15e7c:	mov	r6, r0
   15e80:	mov	r0, r1
   15e84:	str	lr, [sp, #12]
   15e88:	bl	16b24 <__assert_fail@plt+0x5bcc>
   15e8c:	subs	r5, r0, #0
   15e90:	beq	15eb4 <__assert_fail@plt+0x4f5c>
   15e94:	mov	r2, r4
   15e98:	mov	r1, r6
   15e9c:	bl	10d30 <memcpy@plt>
   15ea0:	mov	r0, r5
   15ea4:	ldrd	r4, [sp]
   15ea8:	ldr	r6, [sp, #8]
   15eac:	add	sp, sp, #12
   15eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   15eb4:	bl	15f78 <__assert_fail@plt+0x5020>
   15eb8:	strd	r4, [sp, #-16]!
   15ebc:	mov	r4, r1
   15ec0:	str	r6, [sp, #8]
   15ec4:	mov	r6, r0
   15ec8:	mov	r0, r1
   15ecc:	str	lr, [sp, #12]
   15ed0:	bl	16b24 <__assert_fail@plt+0x5bcc>
   15ed4:	subs	r5, r0, #0
   15ed8:	beq	15efc <__assert_fail@plt+0x4fa4>
   15edc:	mov	r2, r4
   15ee0:	mov	r1, r6
   15ee4:	bl	10d30 <memcpy@plt>
   15ee8:	mov	r0, r5
   15eec:	ldrd	r4, [sp]
   15ef0:	ldr	r6, [sp, #8]
   15ef4:	add	sp, sp, #12
   15ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   15efc:	bl	15f78 <__assert_fail@plt+0x5020>
   15f00:	strd	r4, [sp, #-16]!
   15f04:	mov	r4, r1
   15f08:	str	r6, [sp, #8]
   15f0c:	mov	r6, r0
   15f10:	add	r0, r1, #1
   15f14:	str	lr, [sp, #12]
   15f18:	bl	16b24 <__assert_fail@plt+0x5bcc>
   15f1c:	subs	r5, r0, #0
   15f20:	beq	15f4c <__assert_fail@plt+0x4ff4>
   15f24:	mov	r3, #0
   15f28:	mov	r1, r6
   15f2c:	mov	r2, r4
   15f30:	strb	r3, [r5, r4]
   15f34:	bl	10d30 <memcpy@plt>
   15f38:	mov	r0, r5
   15f3c:	ldrd	r4, [sp]
   15f40:	ldr	r6, [sp, #8]
   15f44:	add	sp, sp, #12
   15f48:	pop	{pc}		; (ldr pc, [sp], #4)
   15f4c:	bl	15f78 <__assert_fail@plt+0x5020>
   15f50:	str	r4, [sp, #-8]!
   15f54:	mov	r4, r0
   15f58:	str	lr, [sp, #4]
   15f5c:	bl	10e68 <strlen@plt>
   15f60:	add	r1, r0, #1
   15f64:	mov	r0, r4
   15f68:	ldr	r4, [sp]
   15f6c:	ldr	lr, [sp, #4]
   15f70:	add	sp, sp, #8
   15f74:	b	15e70 <__assert_fail@plt+0x4f18>
   15f78:	movw	r3, #37116	; 0x90fc
   15f7c:	movt	r3, #2
   15f80:	str	r4, [sp, #-8]!
   15f84:	ldr	r4, [r3]
   15f88:	mov	r2, #5
   15f8c:	movw	r1, #32948	; 0x80b4
   15f90:	movt	r1, #1
   15f94:	mov	r0, #0
   15f98:	str	lr, [sp, #4]
   15f9c:	bl	10d78 <dcgettext@plt>
   15fa0:	mov	r3, r0
   15fa4:	movw	r2, #31508	; 0x7b14
   15fa8:	movt	r2, #1
   15fac:	mov	r1, #0
   15fb0:	mov	r0, r4
   15fb4:	bl	10dfc <error@plt>
   15fb8:	bl	10f40 <abort@plt>
   15fbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15fc0:	strd	r6, [sp, #8]
   15fc4:	mov	r6, r2
   15fc8:	mov	r7, r3
   15fcc:	str	r8, [sp, #16]
   15fd0:	mov	r2, r1
   15fd4:	mov	r1, #0
   15fd8:	str	lr, [sp, #20]
   15fdc:	sub	sp, sp, #16
   15fe0:	mov	r8, r0
   15fe4:	ldr	ip, [sp, #48]	; 0x30
   15fe8:	add	r3, sp, #8
   15fec:	str	ip, [sp]
   15ff0:	bl	16108 <__assert_fail@plt+0x51b0>
   15ff4:	subs	r4, r0, #0
   15ff8:	bne	16048 <__assert_fail@plt+0x50f0>
   15ffc:	ldrd	r4, [sp, #8]
   16000:	ldrd	r0, [sp, #40]	; 0x28
   16004:	cmp	r5, r7
   16008:	cmpeq	r4, r6
   1600c:	movcc	r3, #1
   16010:	movcs	r3, #0
   16014:	cmp	r5, r1
   16018:	cmpeq	r4, r0
   1601c:	orrhi	r3, r3, #1
   16020:	cmp	r3, #0
   16024:	bne	160c8 <__assert_fail@plt+0x5170>
   16028:	mov	r0, r4
   1602c:	mov	r1, r5
   16030:	add	sp, sp, #16
   16034:	ldrd	r4, [sp]
   16038:	ldrd	r6, [sp, #8]
   1603c:	ldr	r8, [sp, #16]
   16040:	add	sp, sp, #20
   16044:	pop	{pc}		; (ldr pc, [sp], #4)
   16048:	bl	10e8c <__errno_location@plt>
   1604c:	cmp	r4, #1
   16050:	moveq	r3, #75	; 0x4b
   16054:	moveq	r4, r3
   16058:	streq	r3, [r0]
   1605c:	beq	160b0 <__assert_fail@plt+0x5158>
   16060:	cmp	r4, #3
   16064:	beq	160a4 <__assert_fail@plt+0x514c>
   16068:	ldr	r3, [sp, #56]	; 0x38
   1606c:	ldr	r4, [r0]
   16070:	cmp	r3, #0
   16074:	beq	160bc <__assert_fail@plt+0x5164>
   16078:	cmp	r4, #22
   1607c:	moveq	r4, #0
   16080:	mov	r0, r8
   16084:	bl	154d0 <__assert_fail@plt+0x4578>
   16088:	movw	r2, #31504	; 0x7b10
   1608c:	movt	r2, #1
   16090:	str	r0, [sp]
   16094:	mov	r1, r4
   16098:	ldr	r3, [sp, #52]	; 0x34
   1609c:	ldr	r0, [sp, #56]	; 0x38
   160a0:	bl	10dfc <error@plt>
   160a4:	mov	r3, #0
   160a8:	mov	r4, r3
   160ac:	str	r3, [r0]
   160b0:	ldr	r3, [sp, #56]	; 0x38
   160b4:	cmp	r3, #0
   160b8:	bne	16080 <__assert_fail@plt+0x5128>
   160bc:	mov	r3, #1
   160c0:	str	r3, [sp, #56]	; 0x38
   160c4:	b	16078 <__assert_fail@plt+0x5120>
   160c8:	bl	10e8c <__errno_location@plt>
   160cc:	mov	r3, #0
   160d0:	mvn	r2, #-1073741824	; 0xc0000000
   160d4:	cmp	r5, r3
   160d8:	cmpeq	r4, r2
   160dc:	movhi	r3, #75	; 0x4b
   160e0:	movls	r3, #34	; 0x22
   160e4:	mov	r4, r3
   160e8:	str	r3, [r0]
   160ec:	ldr	r3, [sp, #56]	; 0x38
   160f0:	cmp	r3, #0
   160f4:	moveq	r3, #1
   160f8:	str	r3, [sp, #56]	; 0x38
   160fc:	b	16080 <__assert_fail@plt+0x5128>
   16100:	mov	r1, #10
   16104:	b	15fbc <__assert_fail@plt+0x5064>
   16108:	cmp	r2, #36	; 0x24
   1610c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16110:	strd	r6, [sp, #8]
   16114:	strd	r8, [sp, #16]
   16118:	strd	sl, [sp, #24]
   1611c:	str	lr, [sp, #32]
   16120:	sub	sp, sp, #36	; 0x24
   16124:	bhi	169b4 <__assert_fail@plt+0x5a5c>
   16128:	cmp	r1, #0
   1612c:	mov	r8, r2
   16130:	mov	r6, r0
   16134:	mov	r5, r1
   16138:	mov	sl, r3
   1613c:	addeq	r5, sp, #28
   16140:	bl	10e8c <__errno_location@plt>
   16144:	mov	r3, #0
   16148:	mov	r7, r0
   1614c:	str	r3, [r0]
   16150:	bl	10e50 <__ctype_b_loc@plt>
   16154:	ldrb	r3, [r6]
   16158:	mov	r2, r6
   1615c:	ldr	r0, [r0]
   16160:	b	16168 <__assert_fail@plt+0x5210>
   16164:	ldrb	r3, [r2, #1]!
   16168:	lsl	r1, r3, #1
   1616c:	ldrh	r4, [r0, r1]
   16170:	ands	r4, r4, #8192	; 0x2000
   16174:	bne	16164 <__assert_fail@plt+0x520c>
   16178:	cmp	r3, #45	; 0x2d
   1617c:	beq	1621c <__assert_fail@plt+0x52c4>
   16180:	mov	r2, r8
   16184:	mov	r3, r4
   16188:	mov	r1, r5
   1618c:	mov	r0, r6
   16190:	bl	10d3c <__strtoull_internal@plt>
   16194:	ldr	fp, [r5]
   16198:	mov	r9, r0
   1619c:	mov	r8, r1
   161a0:	cmp	fp, r6
   161a4:	beq	16204 <__assert_fail@plt+0x52ac>
   161a8:	ldr	r4, [r7]
   161ac:	cmp	r4, #0
   161b0:	bne	161f4 <__assert_fail@plt+0x529c>
   161b4:	ldr	r3, [sp, #72]	; 0x48
   161b8:	cmp	r3, #0
   161bc:	beq	161cc <__assert_fail@plt+0x5274>
   161c0:	ldrb	r6, [fp]
   161c4:	cmp	r6, #0
   161c8:	bne	1650c <__assert_fail@plt+0x55b4>
   161cc:	str	r9, [sl]
   161d0:	str	r8, [sl, #4]
   161d4:	mov	r0, r4
   161d8:	add	sp, sp, #36	; 0x24
   161dc:	ldrd	r4, [sp]
   161e0:	ldrd	r6, [sp, #8]
   161e4:	ldrd	r8, [sp, #16]
   161e8:	ldrd	sl, [sp, #24]
   161ec:	add	sp, sp, #32
   161f0:	pop	{pc}		; (ldr pc, [sp], #4)
   161f4:	cmp	r4, #34	; 0x22
   161f8:	bne	1621c <__assert_fail@plt+0x52c4>
   161fc:	mov	r4, #1
   16200:	b	161b4 <__assert_fail@plt+0x525c>
   16204:	ldr	r3, [sp, #72]	; 0x48
   16208:	cmp	r3, #0
   1620c:	beq	1621c <__assert_fail@plt+0x52c4>
   16210:	ldrb	r6, [r6]
   16214:	cmp	r6, #0
   16218:	bne	16224 <__assert_fail@plt+0x52cc>
   1621c:	mov	r4, #4
   16220:	b	161d4 <__assert_fail@plt+0x527c>
   16224:	mov	r1, r6
   16228:	mov	r0, r3
   1622c:	bl	10e74 <strchr@plt>
   16230:	cmp	r0, #0
   16234:	movne	r9, #1
   16238:	movne	r8, #0
   1623c:	beq	1621c <__assert_fail@plt+0x52c4>
   16240:	sub	r3, r6, #69	; 0x45
   16244:	cmp	r3, #47	; 0x2f
   16248:	ldrls	pc, [pc, r3, lsl #2]
   1624c:	b	16354 <__assert_fail@plt+0x53fc>
   16250:	andeq	r6, r1, r0, lsl r3
   16254:	andeq	r6, r1, r4, asr r3
   16258:	andeq	r6, r1, r0, lsl r3
   1625c:	andeq	r6, r1, r4, asr r3
   16260:	andeq	r6, r1, r4, asr r3
   16264:	andeq	r6, r1, r4, asr r3
   16268:	andeq	r6, r1, r0, lsl r3
   1626c:	andeq	r6, r1, r4, asr r3
   16270:	andeq	r6, r1, r0, lsl r3
   16274:	andeq	r6, r1, r4, asr r3
   16278:	andeq	r6, r1, r4, asr r3
   1627c:	andeq	r6, r1, r0, lsl r3
   16280:	andeq	r6, r1, r4, asr r3
   16284:	andeq	r6, r1, r4, asr r3
   16288:	andeq	r6, r1, r4, asr r3
   1628c:	andeq	r6, r1, r0, lsl r3
   16290:	andeq	r6, r1, r4, asr r3
   16294:	andeq	r6, r1, r4, asr r3
   16298:	andeq	r6, r1, r4, asr r3
   1629c:	andeq	r6, r1, r4, asr r3
   162a0:	andeq	r6, r1, r0, lsl r3
   162a4:	andeq	r6, r1, r0, lsl r3
   162a8:	andeq	r6, r1, r4, asr r3
   162ac:	andeq	r6, r1, r4, asr r3
   162b0:	andeq	r6, r1, r4, asr r3
   162b4:	andeq	r6, r1, r4, asr r3
   162b8:	andeq	r6, r1, r4, asr r3
   162bc:	andeq	r6, r1, r4, asr r3
   162c0:	andeq	r6, r1, r4, asr r3
   162c4:	andeq	r6, r1, r4, asr r3
   162c8:	andeq	r6, r1, r4, asr r3
   162cc:	andeq	r6, r1, r4, asr r3
   162d0:	andeq	r6, r1, r4, asr r3
   162d4:	andeq	r6, r1, r4, asr r3
   162d8:	andeq	r6, r1, r0, lsl r3
   162dc:	andeq	r6, r1, r4, asr r3
   162e0:	andeq	r6, r1, r4, asr r3
   162e4:	andeq	r6, r1, r4, asr r3
   162e8:	andeq	r6, r1, r0, lsl r3
   162ec:	andeq	r6, r1, r4, asr r3
   162f0:	andeq	r6, r1, r0, lsl r3
   162f4:	andeq	r6, r1, r4, asr r3
   162f8:	andeq	r6, r1, r4, asr r3
   162fc:	andeq	r6, r1, r4, asr r3
   16300:	andeq	r6, r1, r4, asr r3
   16304:	andeq	r6, r1, r4, asr r3
   16308:	andeq	r6, r1, r4, asr r3
   1630c:	andeq	r6, r1, r0, lsl r3
   16310:	mov	r1, #48	; 0x30
   16314:	ldr	r0, [sp, #72]	; 0x48
   16318:	bl	10e74 <strchr@plt>
   1631c:	cmp	r0, #0
   16320:	beq	16354 <__assert_fail@plt+0x53fc>
   16324:	ldrb	r3, [fp, #1]
   16328:	cmp	r3, #68	; 0x44
   1632c:	beq	16880 <__assert_fail@plt+0x5928>
   16330:	cmp	r3, #105	; 0x69
   16334:	beq	16524 <__assert_fail@plt+0x55cc>
   16338:	cmp	r3, #66	; 0x42
   1633c:	moveq	r3, #2
   16340:	movne	r3, #1
   16344:	moveq	r7, #1000	; 0x3e8
   16348:	movne	r7, #1024	; 0x400
   1634c:	str	r3, [sp, #4]
   16350:	b	16360 <__assert_fail@plt+0x5408>
   16354:	mov	r3, #1
   16358:	mov	r7, #1024	; 0x400
   1635c:	str	r3, [sp, #4]
   16360:	sub	r6, r6, #66	; 0x42
   16364:	cmp	r6, #53	; 0x35
   16368:	ldrls	pc, [pc, r6, lsl #2]
   1636c:	b	164d0 <__assert_fail@plt+0x5578>
   16370:	andeq	r6, r1, r8, lsr #16
   16374:	ldrdeq	r6, [r1], -r0
   16378:	ldrdeq	r6, [r1], -r0
   1637c:	andeq	r6, r1, r4, lsr r6
   16380:	ldrdeq	r6, [r1], -r0
   16384:	andeq	r6, r1, r8, asr #8
   16388:	ldrdeq	r6, [r1], -r0
   1638c:	ldrdeq	r6, [r1], -r0
   16390:	ldrdeq	r6, [r1], -r0
   16394:	ldrdeq	r6, [r1], -r8
   16398:	ldrdeq	r6, [r1], -r0
   1639c:	ldrdeq	r6, [r1], -r4
   163a0:	ldrdeq	r6, [r1], -r0
   163a4:	ldrdeq	r6, [r1], -r0
   163a8:	andeq	r6, r1, r4, lsr #14
   163ac:	ldrdeq	r6, [r1], -r0
   163b0:	ldrdeq	r6, [r1], -r0
   163b4:	ldrdeq	r6, [r1], -r0
   163b8:	andeq	r6, r1, ip, lsr #13
   163bc:	ldrdeq	r6, [r1], -r0
   163c0:	ldrdeq	r6, [r1], -r0
   163c4:	ldrdeq	r6, [r1], -r0
   163c8:	ldrdeq	r6, [r1], -r0
   163cc:			; <UNDEFINED> instruction: 0x000165bc
   163d0:	andeq	r6, r1, r0, asr #10
   163d4:	ldrdeq	r6, [r1], -r0
   163d8:	ldrdeq	r6, [r1], -r0
   163dc:	ldrdeq	r6, [r1], -r0
   163e0:	ldrdeq	r6, [r1], -r0
   163e4:	ldrdeq	r6, [r1], -r0
   163e8:	ldrdeq	r6, [r1], -r0
   163ec:	ldrdeq	r6, [r1], -r0
   163f0:			; <UNDEFINED> instruction: 0x000167b4
   163f4:			; <UNDEFINED> instruction: 0x000164b8
   163f8:	ldrdeq	r6, [r1], -r0
   163fc:	ldrdeq	r6, [r1], -r0
   16400:	ldrdeq	r6, [r1], -r0
   16404:	andeq	r6, r1, r8, asr #8
   16408:	ldrdeq	r6, [r1], -r0
   1640c:	ldrdeq	r6, [r1], -r0
   16410:	ldrdeq	r6, [r1], -r0
   16414:	ldrdeq	r6, [r1], -r8
   16418:	ldrdeq	r6, [r1], -r0
   1641c:	ldrdeq	r6, [r1], -r4
   16420:	ldrdeq	r6, [r1], -r0
   16424:	ldrdeq	r6, [r1], -r0
   16428:	ldrdeq	r6, [r1], -r0
   1642c:	ldrdeq	r6, [r1], -r0
   16430:	ldrdeq	r6, [r1], -r0
   16434:	ldrdeq	r6, [r1], -r0
   16438:	andeq	r6, r1, ip, lsr #13
   1643c:	ldrdeq	r6, [r1], -r0
   16440:	ldrdeq	r6, [r1], -r0
   16444:	muleq	r1, ip, r7
   16448:	asr	r3, r7, #31
   1644c:	mov	r2, r7
   16450:	cmp	r8, #0
   16454:	umull	r0, r1, r9, r7
   16458:	mov	ip, #0
   1645c:	strd	r2, [sp, #8]
   16460:	bne	168b4 <__assert_fail@plt+0x595c>
   16464:	mov	r2, r0
   16468:	mov	r3, r1
   1646c:	cmp	ip, #0
   16470:	bne	164fc <__assert_fail@plt+0x55a4>
   16474:	cmp	r3, #0
   16478:	mov	lr, ip
   1647c:	bne	16918 <__assert_fail@plt+0x59c0>
   16480:	umull	r2, r3, r2, r7
   16484:	mov	ip, r2
   16488:	mov	r1, r3
   1648c:	subs	r0, lr, #0
   16490:	bne	164fc <__assert_fail@plt+0x55a4>
   16494:	cmp	r1, #0
   16498:	bne	168f8 <__assert_fail@plt+0x59a0>
   1649c:	umull	r2, r3, ip, r7
   164a0:	mov	r6, r2
   164a4:	mov	r2, r3
   164a8:	cmp	r0, #0
   164ac:	mov	r9, r6
   164b0:	mov	r8, r2
   164b4:	bne	164fc <__assert_fail@plt+0x55a4>
   164b8:	ldr	r2, [sp, #4]
   164bc:	add	r3, fp, r2
   164c0:	str	r3, [r5]
   164c4:	ldrb	r3, [fp, r2]
   164c8:	cmp	r3, #0
   164cc:	beq	161cc <__assert_fail@plt+0x5274>
   164d0:	orr	r4, r4, #2
   164d4:	b	161cc <__assert_fail@plt+0x5274>
   164d8:	cmp	r8, #0
   164dc:	umull	r2, r3, r9, r7
   164e0:	mov	ip, #0
   164e4:	asr	r1, r7, #31
   164e8:	bne	16850 <__assert_fail@plt+0x58f8>
   164ec:	mov	r9, r2
   164f0:	mov	r8, r3
   164f4:	cmp	ip, #0
   164f8:	beq	164b8 <__assert_fail@plt+0x5560>
   164fc:	mvn	r9, #0
   16500:	mov	r4, #1
   16504:	mov	r8, r9
   16508:	b	164b8 <__assert_fail@plt+0x5560>
   1650c:	mov	r1, r6
   16510:	ldr	r0, [sp, #72]	; 0x48
   16514:	bl	10e74 <strchr@plt>
   16518:	cmp	r0, #0
   1651c:	bne	16240 <__assert_fail@plt+0x52e8>
   16520:	b	164d0 <__assert_fail@plt+0x5578>
   16524:	ldrb	r3, [fp, #2]
   16528:	mov	r7, #1024	; 0x400
   1652c:	cmp	r3, #66	; 0x42
   16530:	movne	r3, #1
   16534:	moveq	r3, #3
   16538:	str	r3, [sp, #4]
   1653c:	b	16360 <__assert_fail@plt+0x5408>
   16540:	asr	r3, r7, #31
   16544:	mov	r2, r7
   16548:	mov	ip, #0
   1654c:	mov	r0, #7
   16550:	mov	lr, ip
   16554:	mov	r6, r4
   16558:	strd	r2, [sp, #8]
   1655c:	str	r5, [sp, #16]
   16560:	b	1658c <__assert_fail@plt+0x5634>
   16564:	umull	r2, r3, r9, r7
   16568:	mov	r9, r2
   1656c:	mov	r8, r3
   16570:	cmp	r1, #0
   16574:	beq	16584 <__assert_fail@plt+0x562c>
   16578:	mvn	r9, #0
   1657c:	mov	ip, #1
   16580:	mov	r8, r9
   16584:	subs	r0, r0, #1
   16588:	beq	16874 <__assert_fail@plt+0x591c>
   1658c:	cmp	r8, #0
   16590:	mov	r1, #0
   16594:	beq	16564 <__assert_fail@plt+0x560c>
   16598:	umull	r4, r5, r9, r7
   1659c:	mov	r3, lr
   165a0:	mov	r2, r5
   165a4:	umlal	r2, r3, r8, r7
   165a8:	cmp	r3, #0
   165ac:	bne	169d4 <__assert_fail@plt+0x5a7c>
   165b0:	mov	r9, r4
   165b4:	mov	r8, r2
   165b8:	b	16570 <__assert_fail@plt+0x5618>
   165bc:	asr	r3, r7, #31
   165c0:	mov	r2, r7
   165c4:	mov	r6, #0
   165c8:	mov	lr, #8
   165cc:	mov	r0, r4
   165d0:	mov	ip, r5
   165d4:	strd	r2, [sp, #8]
   165d8:	b	16604 <__assert_fail@plt+0x56ac>
   165dc:	umull	r2, r3, r9, r7
   165e0:	mov	r9, r2
   165e4:	mov	r8, r3
   165e8:	cmp	r1, #0
   165ec:	beq	165fc <__assert_fail@plt+0x56a4>
   165f0:	mvn	r9, #0
   165f4:	mov	r6, #1
   165f8:	mov	r8, r9
   165fc:	subs	lr, lr, #1
   16600:	beq	16844 <__assert_fail@plt+0x58ec>
   16604:	cmp	r8, #0
   16608:	mov	r1, #0
   1660c:	beq	165dc <__assert_fail@plt+0x5684>
   16610:	umull	r4, r5, r9, r7
   16614:	mov	r3, #0
   16618:	mov	r2, r5
   1661c:	umlal	r2, r3, r8, r7
   16620:	cmp	r3, #0
   16624:	bne	16a2c <__assert_fail@plt+0x5ad4>
   16628:	mov	r9, r4
   1662c:	mov	r8, r2
   16630:	b	165e8 <__assert_fail@plt+0x5690>
   16634:	asr	r3, r7, #31
   16638:	mov	r2, r7
   1663c:	mov	r6, #0
   16640:	mov	lr, #6
   16644:	mov	r0, r4
   16648:	mov	ip, r5
   1664c:	strd	r2, [sp, #8]
   16650:	b	1667c <__assert_fail@plt+0x5724>
   16654:	umull	r2, r3, r9, r7
   16658:	mov	r9, r2
   1665c:	mov	r8, r3
   16660:	cmp	r1, #0
   16664:	beq	16674 <__assert_fail@plt+0x571c>
   16668:	mvn	r9, #0
   1666c:	mov	r6, #1
   16670:	mov	r8, r9
   16674:	subs	lr, lr, #1
   16678:	beq	16844 <__assert_fail@plt+0x58ec>
   1667c:	cmp	r8, #0
   16680:	mov	r1, #0
   16684:	beq	16654 <__assert_fail@plt+0x56fc>
   16688:	umull	r4, r5, r9, r7
   1668c:	mov	r3, #0
   16690:	mov	r2, r5
   16694:	umlal	r2, r3, r8, r7
   16698:	cmp	r3, #0
   1669c:	bne	169f4 <__assert_fail@plt+0x5a9c>
   166a0:	mov	r9, r4
   166a4:	mov	r8, r2
   166a8:	b	16660 <__assert_fail@plt+0x5708>
   166ac:	asr	r3, r7, #31
   166b0:	mov	r2, r7
   166b4:	mov	r6, #0
   166b8:	mov	lr, #4
   166bc:	mov	r0, r4
   166c0:	mov	ip, r5
   166c4:	strd	r2, [sp, #8]
   166c8:	b	166f4 <__assert_fail@plt+0x579c>
   166cc:	umull	r2, r3, r9, r7
   166d0:	mov	r9, r2
   166d4:	mov	r8, r3
   166d8:	cmp	r1, #0
   166dc:	beq	166ec <__assert_fail@plt+0x5794>
   166e0:	mvn	r9, #0
   166e4:	mov	r6, #1
   166e8:	mov	r8, r9
   166ec:	subs	lr, lr, #1
   166f0:	beq	16844 <__assert_fail@plt+0x58ec>
   166f4:	cmp	r8, #0
   166f8:	mov	r1, #0
   166fc:	beq	166cc <__assert_fail@plt+0x5774>
   16700:	umull	r4, r5, r9, r7
   16704:	mov	r3, #0
   16708:	mov	r2, r5
   1670c:	umlal	r2, r3, r8, r7
   16710:	cmp	r3, #0
   16714:	bne	16a10 <__assert_fail@plt+0x5ab8>
   16718:	mov	r9, r4
   1671c:	mov	r8, r2
   16720:	b	166d8 <__assert_fail@plt+0x5780>
   16724:	asr	r3, r7, #31
   16728:	mov	r2, r7
   1672c:	mov	r6, #0
   16730:	mov	lr, #5
   16734:	mov	r0, r4
   16738:	mov	ip, r5
   1673c:	strd	r2, [sp, #8]
   16740:	b	1676c <__assert_fail@plt+0x5814>
   16744:	umull	r2, r3, r9, r7
   16748:	mov	r9, r2
   1674c:	mov	r8, r3
   16750:	cmp	r1, #0
   16754:	beq	16764 <__assert_fail@plt+0x580c>
   16758:	mvn	r9, #0
   1675c:	mov	r6, #1
   16760:	mov	r8, r9
   16764:	subs	lr, lr, #1
   16768:	beq	16844 <__assert_fail@plt+0x58ec>
   1676c:	cmp	r8, #0
   16770:	mov	r1, #0
   16774:	beq	16744 <__assert_fail@plt+0x57ec>
   16778:	umull	r4, r5, r9, r7
   1677c:	mov	r3, #0
   16780:	mov	r2, r5
   16784:	umlal	r2, r3, r8, r7
   16788:	cmp	r3, #0
   1678c:	bne	1697c <__assert_fail@plt+0x5a24>
   16790:	mov	r9, r4
   16794:	mov	r8, r2
   16798:	b	16750 <__assert_fail@plt+0x57f8>
   1679c:	lsr	r3, r8, #31
   167a0:	adds	r9, r9, r9
   167a4:	adc	r8, r8, r8
   167a8:	cmp	r3, #0
   167ac:	beq	164b8 <__assert_fail@plt+0x5560>
   167b0:	b	164fc <__assert_fail@plt+0x55a4>
   167b4:	lsr	r3, r8, #23
   167b8:	lsl	r8, r8, #9
   167bc:	cmp	r3, #0
   167c0:	lsl	r3, r9, #9
   167c4:	orr	r8, r8, r9, lsr #23
   167c8:	bne	164fc <__assert_fail@plt+0x55a4>
   167cc:	mov	r9, r3
   167d0:	b	164b8 <__assert_fail@plt+0x5560>
   167d4:	asr	r3, r7, #31
   167d8:	mov	r2, r7
   167dc:	cmp	r8, #0
   167e0:	mov	r1, #0
   167e4:	strd	r2, [sp, #8]
   167e8:	umull	r2, r3, r9, r7
   167ec:	bne	16890 <__assert_fail@plt+0x5938>
   167f0:	mov	r0, r2
   167f4:	mov	ip, r3
   167f8:	cmp	r1, #0
   167fc:	bne	164fc <__assert_fail@plt+0x55a4>
   16800:	cmp	ip, #0
   16804:	bne	168d8 <__assert_fail@plt+0x5980>
   16808:	umull	r2, r3, r0, r7
   1680c:	mov	r6, r2
   16810:	mov	r2, r3
   16814:	cmp	r1, #0
   16818:	mov	r9, r6
   1681c:	mov	r8, r2
   16820:	beq	164b8 <__assert_fail@plt+0x5560>
   16824:	b	164fc <__assert_fail@plt+0x55a4>
   16828:	lsr	r3, r8, #22
   1682c:	lsl	r8, r8, #10
   16830:	cmp	r3, #0
   16834:	lsl	r3, r9, #10
   16838:	orr	r8, r8, r9, lsr #22
   1683c:	beq	167cc <__assert_fail@plt+0x5874>
   16840:	b	164fc <__assert_fail@plt+0x55a4>
   16844:	mov	r5, ip
   16848:	orr	r4, r0, r6
   1684c:	b	164b8 <__assert_fail@plt+0x5560>
   16850:	strd	r2, [sp, #8]
   16854:	mov	r3, ip
   16858:	ldr	r2, [sp, #12]
   1685c:	umlal	r2, r3, r8, r7
   16860:	cmp	r3, #0
   16864:	bne	16998 <__assert_fail@plt+0x5a40>
   16868:	mov	r8, r2
   1686c:	ldr	r9, [sp, #8]
   16870:	b	164f4 <__assert_fail@plt+0x559c>
   16874:	orr	r4, r6, ip
   16878:	ldr	r5, [sp, #16]
   1687c:	b	164b8 <__assert_fail@plt+0x5560>
   16880:	mov	r3, #2
   16884:	mov	r7, #1000	; 0x3e8
   16888:	str	r3, [sp, #4]
   1688c:	b	16360 <__assert_fail@plt+0x5408>
   16890:	strd	r2, [sp, #16]
   16894:	mov	r3, r1
   16898:	ldr	r2, [sp, #20]
   1689c:	umlal	r2, r3, r8, r7
   168a0:	cmp	r3, #0
   168a4:	bne	16a68 <__assert_fail@plt+0x5b10>
   168a8:	mov	ip, r2
   168ac:	ldr	r0, [sp, #16]
   168b0:	b	167f8 <__assert_fail@plt+0x58a0>
   168b4:	mov	r2, r1
   168b8:	mov	r3, ip
   168bc:	umlal	r2, r3, r8, r7
   168c0:	cmp	r3, #0
   168c4:	strd	r2, [sp, #16]
   168c8:	bne	1693c <__assert_fail@plt+0x59e4>
   168cc:	mov	r2, r0
   168d0:	ldr	r3, [sp, #16]
   168d4:	b	1646c <__assert_fail@plt+0x5514>
   168d8:	umull	r8, r9, r0, r7
   168dc:	mov	r3, r1
   168e0:	mov	r2, r9
   168e4:	umlal	r2, r3, ip, r7
   168e8:	cmp	r3, #0
   168ec:	bne	16a48 <__assert_fail@plt+0x5af0>
   168f0:	mov	r6, r8
   168f4:	b	16814 <__assert_fail@plt+0x58bc>
   168f8:	umull	r8, r9, ip, r7
   168fc:	mov	r3, r0
   16900:	mov	r2, r9
   16904:	umlal	r2, r3, r1, r7
   16908:	cmp	r3, #0
   1690c:	bne	16a90 <__assert_fail@plt+0x5b38>
   16910:	mov	r6, r8
   16914:	b	164a8 <__assert_fail@plt+0x5550>
   16918:	umull	r8, r9, r2, r7
   1691c:	mov	r1, ip
   16920:	mov	r0, r9
   16924:	umlal	r0, r1, r3, r7
   16928:	cmp	r1, #0
   1692c:	bne	1695c <__assert_fail@plt+0x5a04>
   16930:	mov	ip, r8
   16934:	mov	r1, r0
   16938:	b	1648c <__assert_fail@plt+0x5534>
   1693c:	ldr	lr, [sp, #8]
   16940:	mov	r2, r0
   16944:	mov	ip, #1
   16948:	ldr	r3, [sp, #12]
   1694c:	mul	r3, r9, r3
   16950:	mla	r3, lr, r8, r3
   16954:	add	r3, r3, r1
   16958:	b	1646c <__assert_fail@plt+0x5514>
   1695c:	ldr	r1, [sp, #12]
   16960:	mov	lr, #1
   16964:	mov	ip, r8
   16968:	mul	r1, r2, r1
   1696c:	ldr	r2, [sp, #8]
   16970:	mla	r1, r3, r2, r1
   16974:	add	r1, r1, r9
   16978:	b	1648c <__assert_fail@plt+0x5534>
   1697c:	ldrd	r2, [sp, #8]
   16980:	mov	r1, #1
   16984:	mul	r3, r9, r3
   16988:	mov	r9, r4
   1698c:	mla	r8, r2, r8, r3
   16990:	add	r8, r8, r5
   16994:	b	16750 <__assert_fail@plt+0x57f8>
   16998:	mul	r3, r9, r1
   1699c:	mov	ip, #1
   169a0:	mla	r8, r7, r8, r3
   169a4:	ldrd	r6, [sp, #8]
   169a8:	mov	r9, r6
   169ac:	add	r8, r8, r7
   169b0:	b	164f4 <__assert_fail@plt+0x559c>
   169b4:	movw	r3, #32968	; 0x80c8
   169b8:	movt	r3, #1
   169bc:	movw	r1, #32980	; 0x80d4
   169c0:	movt	r1, #1
   169c4:	movw	r0, #32996	; 0x80e4
   169c8:	movt	r0, #1
   169cc:	mov	r2, #85	; 0x55
   169d0:	bl	10f58 <__assert_fail@plt>
   169d4:	ldr	r3, [sp, #12]
   169d8:	mov	r1, #1
   169dc:	mul	r2, r9, r3
   169e0:	ldr	r3, [sp, #8]
   169e4:	mov	r9, r4
   169e8:	mla	r8, r3, r8, r2
   169ec:	add	r8, r8, r5
   169f0:	b	16570 <__assert_fail@plt+0x5618>
   169f4:	ldrd	r2, [sp, #8]
   169f8:	mov	r1, #1
   169fc:	mul	r3, r9, r3
   16a00:	mov	r9, r4
   16a04:	mla	r8, r2, r8, r3
   16a08:	add	r8, r8, r5
   16a0c:	b	16660 <__assert_fail@plt+0x5708>
   16a10:	ldrd	r2, [sp, #8]
   16a14:	mov	r1, #1
   16a18:	mul	r3, r9, r3
   16a1c:	mov	r9, r4
   16a20:	mla	r8, r2, r8, r3
   16a24:	add	r8, r8, r5
   16a28:	b	166d8 <__assert_fail@plt+0x5780>
   16a2c:	ldrd	r2, [sp, #8]
   16a30:	mov	r1, #1
   16a34:	mul	r3, r9, r3
   16a38:	mov	r9, r4
   16a3c:	mla	r8, r2, r8, r3
   16a40:	add	r8, r8, r5
   16a44:	b	165e8 <__assert_fail@plt+0x5690>
   16a48:	ldr	r3, [sp, #12]
   16a4c:	mov	r6, r8
   16a50:	mov	r1, #1
   16a54:	mul	r2, r0, r3
   16a58:	ldr	r3, [sp, #8]
   16a5c:	mla	r2, ip, r3, r2
   16a60:	add	r2, r2, r9
   16a64:	b	16814 <__assert_fail@plt+0x58bc>
   16a68:	ldr	r3, [sp, #12]
   16a6c:	mov	r1, #1
   16a70:	ldr	r2, [sp, #16]
   16a74:	mul	ip, r9, r3
   16a78:	ldr	r3, [sp, #8]
   16a7c:	mov	r0, r2
   16a80:	mla	ip, r3, r8, ip
   16a84:	ldr	r3, [sp, #20]
   16a88:	add	ip, ip, r3
   16a8c:	b	167f8 <__assert_fail@plt+0x58a0>
   16a90:	ldr	r3, [sp, #12]
   16a94:	mov	r6, r8
   16a98:	mov	r0, #1
   16a9c:	mul	r2, ip, r3
   16aa0:	ldr	r3, [sp, #8]
   16aa4:	mla	r2, r1, r3, r2
   16aa8:	add	r2, r2, r9
   16aac:	b	164a8 <__assert_fail@plt+0x5550>
   16ab0:	cmp	r1, #0
   16ab4:	cmpne	r0, #0
   16ab8:	beq	16b04 <__assert_fail@plt+0x5bac>
   16abc:	strd	r4, [sp, #-16]!
   16ac0:	umull	r4, r5, r0, r1
   16ac4:	str	r6, [sp, #8]
   16ac8:	str	lr, [sp, #12]
   16acc:	adds	r3, r5, #0
   16ad0:	movne	r3, #1
   16ad4:	cmp	r4, #0
   16ad8:	blt	16ae4 <__assert_fail@plt+0x5b8c>
   16adc:	cmp	r3, #0
   16ae0:	beq	16b10 <__assert_fail@plt+0x5bb8>
   16ae4:	bl	10e8c <__errno_location@plt>
   16ae8:	mov	r3, #12
   16aec:	ldrd	r4, [sp]
   16af0:	ldr	r6, [sp, #8]
   16af4:	add	sp, sp, #12
   16af8:	str	r3, [r0]
   16afc:	mov	r0, #0
   16b00:	pop	{pc}		; (ldr pc, [sp], #4)
   16b04:	mov	r1, #1
   16b08:	mov	r0, r1
   16b0c:	b	10cd0 <calloc@plt>
   16b10:	ldrd	r4, [sp]
   16b14:	ldr	r6, [sp, #8]
   16b18:	ldr	lr, [sp, #12]
   16b1c:	add	sp, sp, #16
   16b20:	b	10cd0 <calloc@plt>
   16b24:	cmp	r0, #0
   16b28:	beq	16b34 <__assert_fail@plt+0x5bdc>
   16b2c:	blt	16b3c <__assert_fail@plt+0x5be4>
   16b30:	b	10e14 <malloc@plt>
   16b34:	mov	r0, #1
   16b38:	b	10e14 <malloc@plt>
   16b3c:	str	r4, [sp, #-8]!
   16b40:	str	lr, [sp, #4]
   16b44:	bl	10e8c <__errno_location@plt>
   16b48:	mov	r3, #12
   16b4c:	ldr	r4, [sp]
   16b50:	add	sp, sp, #4
   16b54:	str	r3, [r0]
   16b58:	mov	r0, #0
   16b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b60:	cmp	r0, #0
   16b64:	beq	16b8c <__assert_fail@plt+0x5c34>
   16b68:	cmp	r1, #0
   16b6c:	str	r4, [sp, #-8]!
   16b70:	str	lr, [sp, #4]
   16b74:	beq	16b94 <__assert_fail@plt+0x5c3c>
   16b78:	blt	16ba8 <__assert_fail@plt+0x5c50>
   16b7c:	ldr	r4, [sp]
   16b80:	ldr	lr, [sp, #4]
   16b84:	add	sp, sp, #8
   16b88:	b	10d84 <realloc@plt>
   16b8c:	mov	r0, r1
   16b90:	b	16b24 <__assert_fail@plt+0x5bcc>
   16b94:	bl	12fa0 <__assert_fail@plt+0x2048>
   16b98:	ldr	r4, [sp]
   16b9c:	add	sp, sp, #4
   16ba0:	mov	r0, #0
   16ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ba8:	bl	10e8c <__errno_location@plt>
   16bac:	mov	r3, #12
   16bb0:	str	r3, [r0]
   16bb4:	b	16b98 <__assert_fail@plt+0x5c40>
   16bb8:	strd	r4, [sp, #-16]!
   16bbc:	mov	r4, r0
   16bc0:	str	r6, [sp, #8]
   16bc4:	str	lr, [sp, #12]
   16bc8:	bl	10de4 <__fpending@plt>
   16bcc:	ldr	r5, [r4]
   16bd0:	mov	r6, r0
   16bd4:	mov	r0, r4
   16bd8:	bl	16c40 <__assert_fail@plt+0x5ce8>
   16bdc:	mov	r4, r0
   16be0:	and	r5, r5, #32
   16be4:	cmp	r5, #0
   16be8:	bne	16c20 <__assert_fail@plt+0x5cc8>
   16bec:	cmp	r0, #0
   16bf0:	beq	16c0c <__assert_fail@plt+0x5cb4>
   16bf4:	cmp	r6, #0
   16bf8:	bne	16c38 <__assert_fail@plt+0x5ce0>
   16bfc:	bl	10e8c <__errno_location@plt>
   16c00:	ldr	r4, [r0]
   16c04:	subs	r4, r4, #9
   16c08:	mvnne	r4, #0
   16c0c:	mov	r0, r4
   16c10:	ldrd	r4, [sp]
   16c14:	ldr	r6, [sp, #8]
   16c18:	add	sp, sp, #12
   16c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c20:	cmp	r0, #0
   16c24:	bne	16c38 <__assert_fail@plt+0x5ce0>
   16c28:	bl	10e8c <__errno_location@plt>
   16c2c:	str	r4, [r0]
   16c30:	mvn	r4, #0
   16c34:	b	16c0c <__assert_fail@plt+0x5cb4>
   16c38:	mvn	r4, #0
   16c3c:	b	16c0c <__assert_fail@plt+0x5cb4>
   16c40:	strd	r4, [sp, #-12]!
   16c44:	mov	r4, r0
   16c48:	str	lr, [sp, #8]
   16c4c:	sub	sp, sp, #12
   16c50:	bl	10ebc <fileno@plt>
   16c54:	cmp	r0, #0
   16c58:	mov	r0, r4
   16c5c:	blt	16ce0 <__assert_fail@plt+0x5d88>
   16c60:	bl	10e2c <__freading@plt>
   16c64:	cmp	r0, #0
   16c68:	bne	16cac <__assert_fail@plt+0x5d54>
   16c6c:	mov	r0, r4
   16c70:	bl	16cf4 <__assert_fail@plt+0x5d9c>
   16c74:	cmp	r0, #0
   16c78:	beq	16cdc <__assert_fail@plt+0x5d84>
   16c7c:	bl	10e8c <__errno_location@plt>
   16c80:	mov	r5, r0
   16c84:	mov	r0, r4
   16c88:	ldr	r4, [r5]
   16c8c:	bl	10ee0 <fclose@plt>
   16c90:	cmp	r4, #0
   16c94:	mvnne	r0, #0
   16c98:	strne	r4, [r5]
   16c9c:	add	sp, sp, #12
   16ca0:	ldrd	r4, [sp]
   16ca4:	add	sp, sp, #8
   16ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   16cac:	mov	r0, r4
   16cb0:	bl	10ebc <fileno@plt>
   16cb4:	mov	r1, #1
   16cb8:	mov	r2, #0
   16cbc:	mov	r3, #0
   16cc0:	str	r1, [sp]
   16cc4:	bl	10dcc <lseek64@plt>
   16cc8:	mvn	r3, #0
   16ccc:	mvn	r2, #0
   16cd0:	cmp	r1, r3
   16cd4:	cmpeq	r0, r2
   16cd8:	bne	16c6c <__assert_fail@plt+0x5d14>
   16cdc:	mov	r0, r4
   16ce0:	add	sp, sp, #12
   16ce4:	ldrd	r4, [sp]
   16ce8:	ldr	lr, [sp, #8]
   16cec:	add	sp, sp, #12
   16cf0:	b	10ee0 <fclose@plt>
   16cf4:	str	r4, [sp, #-8]!
   16cf8:	subs	r4, r0, #0
   16cfc:	str	lr, [sp, #4]
   16d00:	sub	sp, sp, #8
   16d04:	beq	16d20 <__assert_fail@plt+0x5dc8>
   16d08:	bl	10e2c <__freading@plt>
   16d0c:	cmp	r0, #0
   16d10:	beq	16d20 <__assert_fail@plt+0x5dc8>
   16d14:	ldr	r3, [r4]
   16d18:	tst	r3, #256	; 0x100
   16d1c:	bne	16d38 <__assert_fail@plt+0x5de0>
   16d20:	mov	r0, r4
   16d24:	add	sp, sp, #8
   16d28:	ldr	r4, [sp]
   16d2c:	ldr	lr, [sp, #4]
   16d30:	add	sp, sp, #8
   16d34:	b	10d0c <fflush@plt>
   16d38:	mov	r1, #1
   16d3c:	mov	r2, #0
   16d40:	mov	r3, #0
   16d44:	mov	r0, r4
   16d48:	str	r1, [sp]
   16d4c:	bl	16d54 <__assert_fail@plt+0x5dfc>
   16d50:	b	16d20 <__assert_fail@plt+0x5dc8>
   16d54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16d58:	mov	r4, r0
   16d5c:	ldr	ip, [r0, #4]
   16d60:	strd	r6, [sp, #8]
   16d64:	str	lr, [sp, #20]
   16d68:	ldr	lr, [r0, #8]
   16d6c:	str	r8, [sp, #16]
   16d70:	sub	sp, sp, #8
   16d74:	ldr	r5, [sp, #32]
   16d78:	cmp	lr, ip
   16d7c:	beq	16da4 <__assert_fail@plt+0x5e4c>
   16d80:	mov	r0, r4
   16d84:	str	r5, [sp, #32]
   16d88:	add	sp, sp, #8
   16d8c:	ldrd	r4, [sp]
   16d90:	ldrd	r6, [sp, #8]
   16d94:	ldr	r8, [sp, #16]
   16d98:	ldr	lr, [sp, #20]
   16d9c:	add	sp, sp, #24
   16da0:	b	10eec <fseeko64@plt>
   16da4:	ldr	ip, [r0, #16]
   16da8:	ldr	lr, [r0, #20]
   16dac:	cmp	lr, ip
   16db0:	bne	16d80 <__assert_fail@plt+0x5e28>
   16db4:	ldr	r8, [r0, #36]	; 0x24
   16db8:	cmp	r8, #0
   16dbc:	bne	16d80 <__assert_fail@plt+0x5e28>
   16dc0:	mov	r6, r2
   16dc4:	mov	r7, r3
   16dc8:	bl	10ebc <fileno@plt>
   16dcc:	mov	r2, r6
   16dd0:	mov	r3, r7
   16dd4:	str	r5, [sp]
   16dd8:	bl	10dcc <lseek64@plt>
   16ddc:	mvn	r3, #0
   16de0:	mvn	r2, #0
   16de4:	cmp	r1, r3
   16de8:	cmpeq	r0, r2
   16dec:	beq	16e1c <__assert_fail@plt+0x5ec4>
   16df0:	ldr	r3, [r4]
   16df4:	strd	r0, [r4, #80]	; 0x50
   16df8:	bic	r3, r3, #16
   16dfc:	str	r3, [r4]
   16e00:	mov	r0, r8
   16e04:	add	sp, sp, #8
   16e08:	ldrd	r4, [sp]
   16e0c:	ldrd	r6, [sp, #8]
   16e10:	ldr	r8, [sp, #16]
   16e14:	add	sp, sp, #20
   16e18:	pop	{pc}		; (ldr pc, [sp], #4)
   16e1c:	mvn	r8, #0
   16e20:	b	16e00 <__assert_fail@plt+0x5ea8>
   16e24:	mov	r0, #14
   16e28:	str	r4, [sp, #-8]!
   16e2c:	str	lr, [sp, #4]
   16e30:	bl	10f10 <nl_langinfo@plt>
   16e34:	cmp	r0, #0
   16e38:	beq	16e5c <__assert_fail@plt+0x5f04>
   16e3c:	ldrb	r2, [r0]
   16e40:	movw	r3, #33036	; 0x810c
   16e44:	movt	r3, #1
   16e48:	ldr	r4, [sp]
   16e4c:	add	sp, sp, #4
   16e50:	cmp	r2, #0
   16e54:	moveq	r0, r3
   16e58:	pop	{pc}		; (ldr pc, [sp], #4)
   16e5c:	ldr	r4, [sp]
   16e60:	add	sp, sp, #4
   16e64:	movw	r0, #33036	; 0x810c
   16e68:	movt	r0, #1
   16e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e70:	strd	r4, [sp, #-20]!	; 0xffffffec
   16e74:	mov	r5, r2
   16e78:	strd	r6, [sp, #8]
   16e7c:	subs	r6, r0, #0
   16e80:	mov	r7, r1
   16e84:	str	lr, [sp, #16]
   16e88:	sub	sp, sp, #12
   16e8c:	addeq	r6, sp, #4
   16e90:	mov	r0, r6
   16e94:	bl	10df0 <mbrtowc@plt>
   16e98:	cmp	r5, #0
   16e9c:	cmnne	r0, #3
   16ea0:	mov	r4, r0
   16ea4:	bhi	16ec0 <__assert_fail@plt+0x5f68>
   16ea8:	mov	r0, r4
   16eac:	add	sp, sp, #12
   16eb0:	ldrd	r4, [sp]
   16eb4:	ldrd	r6, [sp, #8]
   16eb8:	add	sp, sp, #16
   16ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   16ec0:	mov	r0, #0
   16ec4:	bl	16f18 <__assert_fail@plt+0x5fc0>
   16ec8:	cmp	r0, #0
   16ecc:	bne	16ea8 <__assert_fail@plt+0x5f50>
   16ed0:	ldrb	r3, [r7]
   16ed4:	mov	r4, #1
   16ed8:	str	r3, [r6]
   16edc:	b	16ea8 <__assert_fail@plt+0x5f50>
   16ee0:	umull	r2, r3, r1, r2
   16ee4:	cmp	r3, #0
   16ee8:	bne	16ef4 <__assert_fail@plt+0x5f9c>
   16eec:	mov	r1, r2
   16ef0:	b	16b60 <__assert_fail@plt+0x5c08>
   16ef4:	str	r4, [sp, #-8]!
   16ef8:	str	lr, [sp, #4]
   16efc:	bl	10e8c <__errno_location@plt>
   16f00:	mov	r3, #12
   16f04:	ldr	r4, [sp]
   16f08:	add	sp, sp, #4
   16f0c:	str	r3, [r0]
   16f10:	mov	r0, #0
   16f14:	pop	{pc}		; (ldr pc, [sp], #4)
   16f18:	push	{lr}		; (str lr, [sp, #-4]!)
   16f1c:	sub	sp, sp, #268	; 0x10c
   16f20:	movw	r2, #257	; 0x101
   16f24:	add	r1, sp, #4
   16f28:	bl	16f70 <__assert_fail@plt+0x6018>
   16f2c:	cmp	r0, #0
   16f30:	movne	r0, #0
   16f34:	bne	16f68 <__assert_fail@plt+0x6010>
   16f38:	movw	r1, #33044	; 0x8114
   16f3c:	movt	r1, #1
   16f40:	add	r0, sp, #4
   16f44:	bl	10cf4 <strcmp@plt>
   16f48:	cmp	r0, #0
   16f4c:	beq	16f68 <__assert_fail@plt+0x6010>
   16f50:	add	r0, sp, #4
   16f54:	movw	r1, #33048	; 0x8118
   16f58:	movt	r1, #1
   16f5c:	bl	10cf4 <strcmp@plt>
   16f60:	adds	r0, r0, #0
   16f64:	movne	r0, #1
   16f68:	add	sp, sp, #268	; 0x10c
   16f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f70:	strd	r4, [sp, #-16]!
   16f74:	mov	r5, r1
   16f78:	mov	r1, #0
   16f7c:	mov	r4, r2
   16f80:	str	r6, [sp, #8]
   16f84:	str	lr, [sp, #12]
   16f88:	bl	10ef8 <setlocale@plt>
   16f8c:	subs	r6, r0, #0
   16f90:	beq	17010 <__assert_fail@plt+0x60b8>
   16f94:	bl	10e68 <strlen@plt>
   16f98:	cmp	r4, r0
   16f9c:	bhi	16fbc <__assert_fail@plt+0x6064>
   16fa0:	cmp	r4, #0
   16fa4:	moveq	r0, #34	; 0x22
   16fa8:	bne	16fe0 <__assert_fail@plt+0x6088>
   16fac:	ldrd	r4, [sp]
   16fb0:	ldr	r6, [sp, #8]
   16fb4:	add	sp, sp, #12
   16fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fbc:	add	r2, r0, #1
   16fc0:	mov	r1, r6
   16fc4:	mov	r0, r5
   16fc8:	bl	10d30 <memcpy@plt>
   16fcc:	ldrd	r4, [sp]
   16fd0:	mov	r0, #0
   16fd4:	ldr	r6, [sp, #8]
   16fd8:	add	sp, sp, #12
   16fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   16fe0:	sub	r4, r4, #1
   16fe4:	mov	r1, r6
   16fe8:	mov	r2, r4
   16fec:	mov	r0, r5
   16ff0:	bl	10d30 <memcpy@plt>
   16ff4:	mov	r3, #0
   16ff8:	mov	r0, #34	; 0x22
   16ffc:	strb	r3, [r5, r4]
   17000:	ldrd	r4, [sp]
   17004:	ldr	r6, [sp, #8]
   17008:	add	sp, sp, #12
   1700c:	pop	{pc}		; (ldr pc, [sp], #4)
   17010:	cmp	r4, #0
   17014:	mov	r0, #22
   17018:	strbne	r6, [r5]
   1701c:	ldrd	r4, [sp]
   17020:	ldr	r6, [sp, #8]
   17024:	add	sp, sp, #12
   17028:	pop	{pc}		; (ldr pc, [sp], #4)
   1702c:	mov	r1, #0
   17030:	b	10ef8 <setlocale@plt>
   17034:	cmp	r3, #0
   17038:	cmpeq	r2, #0
   1703c:	bne	17060 <__assert_fail@plt+0x6108>
   17040:	cmp	r1, #0
   17044:	movlt	r1, #-2147483648	; 0x80000000
   17048:	movlt	r0, #0
   1704c:	blt	1705c <__assert_fail@plt+0x6104>
   17050:	cmpeq	r0, #0
   17054:	mvnne	r1, #-2147483648	; 0x80000000
   17058:	mvnne	r0, #0
   1705c:	b	17144 <__assert_fail@plt+0x61ec>
   17060:	sub	sp, sp, #8
   17064:	push	{sp, lr}
   17068:	cmp	r1, #0
   1706c:	blt	1708c <__assert_fail@plt+0x6134>
   17070:	cmp	r3, #0
   17074:	blt	170c0 <__assert_fail@plt+0x6168>
   17078:	bl	17154 <__assert_fail@plt+0x61fc>
   1707c:	ldr	lr, [sp, #4]
   17080:	add	sp, sp, #8
   17084:	pop	{r2, r3}
   17088:	bx	lr
   1708c:	rsbs	r0, r0, #0
   17090:	sbc	r1, r1, r1, lsl #1
   17094:	cmp	r3, #0
   17098:	blt	170e4 <__assert_fail@plt+0x618c>
   1709c:	bl	17154 <__assert_fail@plt+0x61fc>
   170a0:	ldr	lr, [sp, #4]
   170a4:	add	sp, sp, #8
   170a8:	pop	{r2, r3}
   170ac:	rsbs	r0, r0, #0
   170b0:	sbc	r1, r1, r1, lsl #1
   170b4:	rsbs	r2, r2, #0
   170b8:	sbc	r3, r3, r3, lsl #1
   170bc:	bx	lr
   170c0:	rsbs	r2, r2, #0
   170c4:	sbc	r3, r3, r3, lsl #1
   170c8:	bl	17154 <__assert_fail@plt+0x61fc>
   170cc:	ldr	lr, [sp, #4]
   170d0:	add	sp, sp, #8
   170d4:	pop	{r2, r3}
   170d8:	rsbs	r0, r0, #0
   170dc:	sbc	r1, r1, r1, lsl #1
   170e0:	bx	lr
   170e4:	rsbs	r2, r2, #0
   170e8:	sbc	r3, r3, r3, lsl #1
   170ec:	bl	17154 <__assert_fail@plt+0x61fc>
   170f0:	ldr	lr, [sp, #4]
   170f4:	add	sp, sp, #8
   170f8:	pop	{r2, r3}
   170fc:	rsbs	r2, r2, #0
   17100:	sbc	r3, r3, r3, lsl #1
   17104:	bx	lr
   17108:	cmp	r3, #0
   1710c:	cmpeq	r2, #0
   17110:	bne	17128 <__assert_fail@plt+0x61d0>
   17114:	cmp	r1, #0
   17118:	cmpeq	r0, #0
   1711c:	mvnne	r1, #0
   17120:	mvnne	r0, #0
   17124:	b	17144 <__assert_fail@plt+0x61ec>
   17128:	sub	sp, sp, #8
   1712c:	push	{sp, lr}
   17130:	bl	17154 <__assert_fail@plt+0x61fc>
   17134:	ldr	lr, [sp, #4]
   17138:	add	sp, sp, #8
   1713c:	pop	{r2, r3}
   17140:	bx	lr
   17144:	push	{r1, lr}
   17148:	mov	r0, #8
   1714c:	bl	10ce8 <raise@plt>
   17150:	pop	{r1, pc}
   17154:	cmp	r1, r3
   17158:	cmpeq	r0, r2
   1715c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17160:	mov	r4, r0
   17164:	movcc	r0, #0
   17168:	mov	r5, r1
   1716c:	ldr	lr, [sp, #36]	; 0x24
   17170:	movcc	r1, r0
   17174:	bcc	17270 <__assert_fail@plt+0x6318>
   17178:	cmp	r3, #0
   1717c:	clzeq	ip, r2
   17180:	clzne	ip, r3
   17184:	addeq	ip, ip, #32
   17188:	cmp	r5, #0
   1718c:	clzeq	r1, r4
   17190:	addeq	r1, r1, #32
   17194:	clzne	r1, r5
   17198:	sub	ip, ip, r1
   1719c:	sub	sl, ip, #32
   171a0:	lsl	r9, r3, ip
   171a4:	rsb	fp, ip, #32
   171a8:	orr	r9, r9, r2, lsl sl
   171ac:	orr	r9, r9, r2, lsr fp
   171b0:	lsl	r8, r2, ip
   171b4:	cmp	r5, r9
   171b8:	cmpeq	r4, r8
   171bc:	movcc	r0, #0
   171c0:	movcc	r1, r0
   171c4:	bcc	171e0 <__assert_fail@plt+0x6288>
   171c8:	mov	r0, #1
   171cc:	subs	r4, r4, r8
   171d0:	lsl	r1, r0, sl
   171d4:	orr	r1, r1, r0, lsr fp
   171d8:	lsl	r0, r0, ip
   171dc:	sbc	r5, r5, r9
   171e0:	cmp	ip, #0
   171e4:	beq	17270 <__assert_fail@plt+0x6318>
   171e8:	lsr	r6, r8, #1
   171ec:	orr	r6, r6, r9, lsl #31
   171f0:	lsr	r7, r9, #1
   171f4:	mov	r2, ip
   171f8:	b	1721c <__assert_fail@plt+0x62c4>
   171fc:	subs	r3, r4, r6
   17200:	sbc	r8, r5, r7
   17204:	adds	r3, r3, r3
   17208:	adc	r8, r8, r8
   1720c:	adds	r4, r3, #1
   17210:	adc	r5, r8, #0
   17214:	subs	r2, r2, #1
   17218:	beq	17238 <__assert_fail@plt+0x62e0>
   1721c:	cmp	r5, r7
   17220:	cmpeq	r4, r6
   17224:	bcs	171fc <__assert_fail@plt+0x62a4>
   17228:	adds	r4, r4, r4
   1722c:	adc	r5, r5, r5
   17230:	subs	r2, r2, #1
   17234:	bne	1721c <__assert_fail@plt+0x62c4>
   17238:	lsr	r3, r4, ip
   1723c:	orr	r3, r3, r5, lsl fp
   17240:	lsr	r2, r5, ip
   17244:	orr	r3, r3, r5, lsr sl
   17248:	adds	r0, r0, r4
   1724c:	mov	r4, r3
   17250:	lsl	r3, r2, ip
   17254:	orr	r3, r3, r4, lsl sl
   17258:	lsl	ip, r4, ip
   1725c:	orr	r3, r3, r4, lsr fp
   17260:	adc	r1, r1, r5
   17264:	subs	r0, r0, ip
   17268:	mov	r5, r2
   1726c:	sbc	r1, r1, r3
   17270:	cmp	lr, #0
   17274:	strdne	r4, [lr]
   17278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1727c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17280:	mov	r7, r0
   17284:	ldr	r6, [pc, #72]	; 172d4 <__assert_fail@plt+0x637c>
   17288:	ldr	r5, [pc, #72]	; 172d8 <__assert_fail@plt+0x6380>
   1728c:	add	r6, pc, r6
   17290:	add	r5, pc, r5
   17294:	sub	r6, r6, r5
   17298:	mov	r8, r1
   1729c:	mov	r9, r2
   172a0:	bl	10cb0 <calloc@plt-0x20>
   172a4:	asrs	r6, r6, #2
   172a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   172ac:	mov	r4, #0
   172b0:	add	r4, r4, #1
   172b4:	ldr	r3, [r5], #4
   172b8:	mov	r2, r9
   172bc:	mov	r1, r8
   172c0:	mov	r0, r7
   172c4:	blx	r3
   172c8:	cmp	r6, r4
   172cc:	bne	172b0 <__assert_fail@plt+0x6358>
   172d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   172d4:	andeq	r1, r1, r0, lsl #25
   172d8:	andeq	r1, r1, r8, ror ip
   172dc:	bx	lr
   172e0:	ldr	r3, [pc, #12]	; 172f4 <__assert_fail@plt+0x639c>
   172e4:	mov	r1, #0
   172e8:	add	r3, pc, r3
   172ec:	ldr	r2, [r3]
   172f0:	b	10e98 <__cxa_atexit@plt>
   172f4:	andeq	r1, r1, r0, lsl #28

Disassembly of section .fini:

000172f8 <.fini>:
   172f8:	push	{r3, lr}
   172fc:	pop	{r3, pc}
